double sub_1000041C4@<D0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _OWORD *a4@<X8>)
{
  uint64_t v4;
  id v8;
  uint64_t v9;
  void *v10;
  void *v11;
  Swift::String v12;
  double result;
  __int128 v14;
  __int128 v15;
  void v16[8];
  __int128 v17;
  __int128 v18;
  __int128 v19;
  v16[5] = 0x656E6961746E6F63LL;
  v16[6] = 0xEB000000002D7372LL;
  v16[7] = a2;
  v8 = [a1 identifier];
  v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
  v11 = v10;

  v12._countAndFlagsBits = v9;
  v12._object = v11;
  String.append(_:)(v12);
  swift_bridgeObjectRelease(v11);
  v16[2] = a1;
  v16[3] = a3;
  type metadata accessor for ToolDatabase.Transaction(0LL);
  sub_10000844C(&qword_100069A78);
  ToolDatabase.Rollbackable.inSavepoint<A>(name:work:)(0x656E6961746E6F63LL, 0xEB000000002D7372LL, sub_100008434, v16);
  swift_bridgeObjectRelease(0xEB000000002D7372LL);
  if (!v4)
  {
    result = *(double *)&v17;
    v14 = v18;
    v15 = v19;
    *a4 = v17;
    a4[1] = v14;
    a4[2] = v15;
  }

  return result;
}

void sub_1000042F0(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v136 = a1;
  uint64_t v137 = a3;
  uint64_t v7 = sub_10000844C(&qword_100069A80);
  uint64_t v8 = __chkstk_darwin(v7);
  v10 = (void (*)(char *, uint64_t))((char *)&v128 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v11 = __chkstk_darwin(v8);
  v13 = (void (*)(char *, uint64_t))((char *)&v128 - v12);
  uint64_t v14 = __chkstk_darwin(v11);
  v16 = (void (*)(char *, uint64_t))((char *)&v128 - v15);
  __chkstk_darwin(v14);
  v18 = (void (*)(char *, uint64_t))((char *)&v128 - v17);
  uint64_t v19 = objc_opt_self(&OBJC_CLASS___WFAppIntentExecutionAction);
  uint64_t v20 = swift_dynamicCastObjCClass(a2, v19);
  uint64_t v135 = a4;
  if (!v20)
  {
    uint64_t v33 = objc_opt_self(&OBJC_CLASS___WFLinkContentItemFilterAction);
    uint64_t v34 = swift_dynamicCastObjCClass(a2, v33);
    if (v34)
    {
      v35 = (void *)v34;
      id v36 = a2;
      id v37 = [v35 fullyQualifiedLinkActionIdentifier];
      id v38 = [v37 bundleIdentifier];

      uint64_t v25 = static String._unconditionallyBridgeFromObjectiveC(_:)(v38);
      uint64_t v27 = v39;

      if ((WFAction.isLinkSystemFrameworkIntent.getter() & 1) != 0)
      {
        uint64_t v40 = enum case for ContainerDefinition.ContainerType.framework(_:);
        uint64_t v41 = type metadata accessor for ContainerDefinition.ContainerType(0LL);
        (*(void (**)(void (*)(char *, uint64_t), uint64_t, uint64_t))(*(void *)(v41 - 8) + 104LL))( v13,  v40,  v41);
        uint64_t v42 = (uint64_t)v13;
        uint64_t v43 = 0LL;
        uint64_t v44 = v41;
      }

      else
      {
        uint64_t v44 = type metadata accessor for ContainerDefinition.ContainerType(0LL);
        uint64_t v42 = (uint64_t)v13;
        uint64_t v43 = 1LL;
      }

      sub_10000848C(v42, v43, 1LL, v44);
      sub_100004DEC(v25, v27, v13, v136);
      if (v4)
      {
        swift_bridgeObjectRelease(v27);

        uint64_t v46 = (uint64_t)v13;
        goto LABEL_26;
      }

      uint64_t v134 = v65;
      sub_10000857C((uint64_t)v13, &qword_100069A80);
      id v68 = [v35 displayableAppDescriptor];
      if (v68)
      {
        v69 = v68;
        uint64_t v70 = sub_100008338(v68, (SEL *)&selRef_bundleIdentifier);
        if (v71)
        {
          uint64_t v72 = v70;
          uint64_t v73 = v71;
          BOOL v74 = v70 == v25 && v71 == v27;
          if (!v74 && (_stringCompareWithSmolCheck(_:_:expecting:)(v70, v71, v25, v27, 0LL) & 1) == 0)
          {
            uint64_t v90 = type metadata accessor for ContainerDefinition.ContainerType(0LL);
            sub_10000848C((uint64_t)v10, 1LL, 1LL, v90);
            sub_100004DEC(v72, v73, v10, v136);
            uint64_t v82 = v123;
            sub_10000857C((uint64_t)v10, &qword_100069A80);
            swift_bridgeObjectRelease(v73);

            unsigned int v53 = 0;
            v54 = &_swiftEmptyArrayStorage;
            uint64_t v47 = v134;
            goto LABEL_46;
          }

          swift_bridgeObjectRelease(v73);
        }

        else
        {
        }
      }

      unsigned int v53 = 0;
      v54 = &_swiftEmptyArrayStorage;
      uint64_t v47 = v134;
LABEL_45:
      uint64_t v82 = v47;
      goto LABEL_46;
    }

    uint64_t v55 = objc_opt_self(&OBJC_CLASS___WFHandleIntentAction);
    uint64_t v56 = swift_dynamicCastObjCClass(a2, v55);
    if (!v56)
    {
      uint64_t v75 = static String._unconditionallyBridgeFromObjectiveC(_:)(VCCurrentPlatformShortcutsAppBundleIdentifier);
      uint64_t v27 = v76;
      sub_100004F90(v136);
      if (!v4)
      {
        uint64_t v47 = v77;
        uint64_t v133 = v75;
        id v78 = [a2 displayableAppDescriptor];
        if (v78)
        {
          v79 = v78;
          uint64_t v80 = v47;
          id v81 = [a2 app];
          uint64_t v82 = sub_100004E8C(v79, 1);
          char v84 = v83;

          unsigned int v53 = v84 & 1;
          v54 = &_swiftEmptyArrayStorage;
          uint64_t v25 = v133;
          uint64_t v47 = v80;
        }

        else
        {
          id v91 = [a2 appDescriptor];
          if (v91)
          {
            v92 = v91;
            uint64_t v93 = v47;
            id v94 = [a2 app];
            uint64_t v125 = sub_100004E8C(v92, 1);
            char v127 = v126;

            unsigned int v53 = v127 & 1;
            v54 = &_swiftEmptyArrayStorage;
            uint64_t v25 = v133;
            uint64_t v47 = v93;
            uint64_t v82 = v125;
          }

          else
          {
            uint64_t v82 = 0LL;
            v54 = &_swiftEmptyArrayStorage;
            unsigned int v53 = 1;
            uint64_t v25 = v133;
          }
        }

        goto LABEL_46;
      }

LABEL_58:
      swift_bridgeObjectRelease(v27);
      return;
    }

    v57 = (void *)v56;
    id v58 = a2;
    id v59 = [v57 appDescriptor];
    if (v59)
    {
      v60 = v59;
      uint64_t v61 = sub_100008338(v59, (SEL *)&selRef_bundleIdentifier);
      if (v62)
      {
        uint64_t v25 = v61;
        uint64_t v27 = v62;
        uint64_t v63 = sub_100004E8C(v60, 0);
        if (v4)
        {

          goto LABEL_58;
        }

        char v88 = v64;
        uint64_t v89 = v63;

        if ((v88 & 1) == 0)
        {
          uint64_t v47 = v89;
          goto LABEL_55;
        }

        swift_bridgeObjectRelease(v27);
      }

      else
      {
      }
    }

    uint64_t v95 = v136;
    uint64_t v25 = static String._unconditionallyBridgeFromObjectiveC(_:)(VCCurrentPlatformShortcutsAppBundleIdentifier);
    uint64_t v27 = v96;
    sub_100004F90(v95);
    if (v4)
    {

      goto LABEL_58;
    }

    uint64_t v47 = v97;
LABEL_55:
    id v98 = [v57 displayableAppDescriptor];
    if (v98)
    {
      v99 = v98;
      uint64_t v82 = sub_100004E8C(v98, 1);
      char v101 = v100;

      unsigned int v53 = v101 & 1;
    }

    else
    {
      uint64_t v82 = 0LL;
      unsigned int v53 = 1;
    }

    uint64_t v102 = objc_opt_self(&OBJC_CLASS___WFHandleSystemIntentAction);
    uint64_t v103 = swift_dynamicCastObjCClass(v57, v102);
    if (v103)
    {
      v104 = (void *)v103;
      id v105 = v58;
      uint64_t v106 = sub_100008270(v104);
      if (v106)
      {
        uint64_t v107 = v106;
        id v132 = v104;
        uint64_t v108 = *(void *)(v106 + 16);
        if (v108)
        {
          uint64_t v128 = v106;
          id v129 = v105;
          unsigned int v130 = v53;
          uint64_t v131 = v82;
          v109 = (uint64_t *)(v106 + 40);
          v54 = &_swiftEmptyArrayStorage;
          uint64_t v133 = v25;
          uint64_t v134 = v47;
          while (1)
          {
            uint64_t v111 = *(v109 - 1);
            uint64_t v110 = *v109;
            swift_bridgeObjectRetain(*v109);
            NSString v112 = String._bridgeToObjectiveC()();
            id v113 = [v132 actionForAppIdentifier:v112];

            if (v113)
            {
              id v114 = objc_allocWithZone(&OBJC_CLASS___INAppDescriptor);
              id v115 = sub_100007C48(v111, v110);
              uint64_t v116 = sub_100004E8C(v115, 1);
              uint64_t v47 = v134;
              if ((v117 & 1) != 0)
              {

                uint64_t v25 = v133;
                goto LABEL_79;
              }

              uint64_t v118 = v116;
              uint64_t v25 = v133;
              if (v116 == v134) {
                goto LABEL_78;
              }
              char v119 = v130;
              if (v116 != v131) {
                char v119 = 1;
              }
              if ((v119 & 1) == 0)
              {
LABEL_78:

                goto LABEL_79;
              }

              if ((swift_isUniquelyReferenced_nonNull_native(v54) & 1) == 0)
              {
                sub_1000509A0();
                v54 = v121;
              }

              unint64_t v120 = v54[2];
              if (v120 >= v54[3] >> 1)
              {
                sub_1000509A0();
                v54 = v122;
              }

              v54[2] = v120 + 1;
              v54[v120 + 4] = v118;
            }

            else
            {
              swift_bridgeObjectRelease(v110);
            }

            uint64_t v25 = v133;
            uint64_t v47 = v134;
LABEL_79:
            v109 += 2;
            if (!--v108)
            {
              id v124 = v129;

              swift_bridgeObjectRelease(v128);
              uint64_t v82 = v131;
              unsigned int v53 = v130;
              goto LABEL_46;
            }
          }
        }

        swift_bridgeObjectRelease(v107);
      }

      else
      {
      }
    }

    else
    {
    }

            sub_100043410(*(void *)(v0 + 720), v76, v77, *(void *)(v0 + 632));
LABEL_59:
            sub_100044A38(v4420);
            swift_bridgeObjectRelease(*v72);
            v79 = v70 == 1953392980 && v71 == 0xE400000000000000LL;
            if (v79 || (sub_100043138(v70, v71) & 1) != 0)
            {
              uint64_t v80 = *(void *)(v0 + 712);
              id v81 = *(void *)(v0 + 632);
              sub_100045A84(*(void *)(v0 + 720), v78, &qword_10006A378);
              sub_100043DBC(v80, 1LL, v81);
              if (!v79)
              {
                v86 = *(void *)(v0 + 712);
                uint64_t v87 = *(void *)(v0 + 688);
                char v88 = *(void *)(v0 + 664);
                uint64_t v4 = *(void *)(v0 + 640);
                uint64_t v89 = *(void *)(v0 + 632);
                sub_100041358(*(void *)(v0 + 720), &qword_10006A378);
                sub_100042E4C();
                uint64_t v90 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32);
                v90(v88, v86, v89);
                v90(v87, v88, v89);
                id v91 = (unsigned int *)&enum case for ToolSymbolIconStyle.tinted(_:);
LABEL_74:
                uint64_t v102 = *(uint64_t **)(v0 + 768);
                uint64_t v103 = *(void *)(v0 + 688);
                v3 = *(void *)(v0 + 680);
                v104 = *(void *)(v0 + 672);
                sub_100043C08(v103, *v91, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 104));
                id v105 = (uint64_t)v102 + *(int *)(sub_10000844C(&qword_10006A430) + 48);
                *uint64_t v102 = v4418;
                v102[1] = (uint64_t)v2;
                sub_100043C08(v105, v103, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 32));
                id v58 = enum case for ToolIcon.symbol(_:);
                uint64_t v106 = sub_1000432E8();
                sub_100043FB8(v106);
                uint64_t v62 = (uint64_t)v102;
                uint64_t v63 = 0LL;
                char v64 = 1LL;
                uint64_t v65 = v104;
                goto LABEL_75;
              }

              sub_100041358(*(void *)(v0 + 712), &qword_10006A378);
            }

            uint64_t v82 = *(void *)(v0 + 704);
            char v83 = *(void *)(v0 + 632);
            sub_100044F98();
            sub_1000084E0(v82, 1LL, v83);
            sub_1000472C8();
            if (v79)
            {
              uint64_t v85 = sub_100044A10();
              sub_1000431B8(v85, &qword_10006A378);
            }

            else
            {
              sub_100044A04(v84);
            }

            uint64_t v93 = *(void *)(v0 + 696);
            id v94 = *(void *)(v0 + 632);
            sub_100045EAC(*(void *)(v0 + 720), v92, &qword_10006A378);
            sub_1000084E0(v93, 1LL, v94);
            uint64_t v95 = *(void *)(v0 + 640);
            sub_1000472C8();
            if (v79)
            {
              uint64_t v96 = (*(uint64_t (**)(void))(v95 + 104))();
              sub_1000431B8(v96, &qword_10006A378);
              uint64_t v4 = *(void *)(v95 + 32);
            }

            else
            {
              uint64_t v4 = *(void *)(v95 + 32);
              ((void (*)(void))v4)();
            }

            uint64_t v97 = *(void *)(v0 + 688);
            id v98 = *(void *)(v0 + 656);
            v99 = *(void *)(v0 + 632);
            char v100 = v97 + *(int *)(sub_10000844C(&qword_10006A428) + 48);
            char v101 = sub_100044B04();
            ((void (*)(uint64_t))v4)(v101);
            ((void (*)(uint64_t, uint64_t, uint64_t))v4)(v100, v98, v99);
            id v91 = (unsigned int *)&enum case for ToolSymbolIconStyle.multicolor(_:);
            goto LABEL_74;
          }
        }

        else
        {
          *(_OWORD *)(v0 + 304) = 0u;
          *(_OWORD *)(v0 + 320) = 0u;
        }

        sub_100041358(v0 + 304, &qword_10006A420);
        goto LABEL_58;
      }

      sub_1000432F0();
    }

    sub_100044430();
    sub_100044004();
    sub_1000432E8();
    uint64_t v62 = sub_10004403C();
    goto LABEL_75;
  }

  v16 = v15;
  result = sub_100037D80(v15, (uint64_t (*)(void))sub_100052324);
  if (v16 < 0) {
    goto LABEL_82;
  }
  v4429 = *(void *)(v0 + 1056);
  v4423 = *(void *)(v0 + 1024);
  v18 = *(void *)(v0 + 1016);
  v4433 = sub_100052268(v14);
  v3 = 0LL;
  v4427 = enum case for RuntimeRequirement.platform(_:);
  sub_1000468D0();
  v4418 = v19;
  uint64_t v20 = v14;
  v21 = v16;
  while ((v4433 & 1) != 0)
  {
    sub_100045544();
    id v22 = *(void (**)(void))(v18 + 16);
    v22();
LABEL_12:
    v1 = *(void *)(v0 + 1064);
    uint64_t v26 = *(void *)(v0 + 1032);
    uint64_t v27 = *(void *)(v0 + 1008);
    ++v3;
    sub_100043D7C(v26, *(void *)(v0 + 1040), *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v18 + 32));
    ((void (*)(uint64_t, uint64_t, uint64_t))v22)(v1, v26, v27);
    sub_1000447A4(v1, v4427, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4429 + 104));
    sub_1000431A8(v26, *(uint64_t (**)(uint64_t, uint64_t))(v18 + 8));
    v2 = sub_100052324;
    sub_10003DA40((uint64_t (*)(void, uint64_t, uint64_t))sub_100052324);
    sub_10003DA98(_swiftEmptyArrayStorage[2], (uint64_t (*)(BOOL))sub_100052324);
    sub_100044B04();
    sub_10003DAC4();
    uint64_t v14 = v20;
    if (v21 == v3)
    {
      sub_100042E4C();
      uint64_t v4 = v0 + 400;
      goto LABEL_15;
    }
  }

  result = sub_100038A18( v3,  v14,  (uint64_t (*)(void))&type metadata accessor for RuntimeAvailabilityAnnotation);
  if (v4423 == 8)
  {
    id v23 = result;
    id v24 = *(void *)(v0 + 1040);
    uint64_t v25 = *(void *)(v0 + 1008);
    *(void *)(v0 + 520) = v23;
    id v22 = *(void (**)(void))(v18 + 16);
    ((void (*)(uint64_t, uint64_t, uint64_t))v22)(v24, v0 + 520, v25);
    sub_1000431C0();
    goto LABEL_12;
  }

  __break(1u);
LABEL_81:
  __break(1u);
LABEL_82:
  __break(1u);
LABEL_83:
  __break(1u);
  return result;
}

            char v126 = 1LL;
            goto LABEL_59;
          }

          v122 = 1LL;
        }

LABEL_85:
    v54 = &_swiftEmptyArrayStorage;
LABEL_46:
    v86 = (void *)v135;
    *(void *)uint64_t v135 = v25;
    v86[1] = v27;
    v86[2] = v47;
    v86[3] = v82;
    v86[4] = v53;
    v86[5] = v54;
    return;
  }

  v21 = (void *)v20;
  id v22 = a2;
  id v23 = [v21 fullyQualifiedLinkActionIdentifier];
  id v24 = [v23 bundleIdentifier];

  uint64_t v25 = static String._unconditionallyBridgeFromObjectiveC(_:)(v24);
  uint64_t v27 = v26;

  if ((WFAction.isLinkSystemFrameworkIntent.getter() & 1) != 0)
  {
    uint64_t v28 = enum case for ContainerDefinition.ContainerType.framework(_:);
    uint64_t v29 = type metadata accessor for ContainerDefinition.ContainerType(0LL);
    (*(void (**)(void (*)(char *, uint64_t), uint64_t, uint64_t))(*(void *)(v29 - 8) + 104LL))( v18,  v28,  v29);
    uint64_t v30 = (uint64_t)v18;
    uint64_t v31 = 0LL;
    uint64_t v32 = v29;
  }

  else
  {
    uint64_t v32 = type metadata accessor for ContainerDefinition.ContainerType(0LL);
    uint64_t v30 = (uint64_t)v18;
    uint64_t v31 = 1LL;
  }

  sub_10000848C(v30, v31, 1LL, v32);
  sub_100004DEC(v25, v27, v18, v136);
  if (!v4)
  {
    uint64_t v47 = v45;
    sub_10000857C((uint64_t)v18, &qword_100069A80);
    uint64_t v48 = sub_100008338(v21, (SEL *)&selRef_displayableAppBundleIdentifier);
    if (!v49)
    {
LABEL_17:

      unsigned int v53 = 0;
      v54 = &_swiftEmptyArrayStorage;
      goto LABEL_45;
    }

    uint64_t v50 = v48;
    uint64_t v51 = v49;
    BOOL v52 = v48 == v25 && v49 == v27;
    if (v52 || (_stringCompareWithSmolCheck(_:_:expecting:)(v48, v49, v25, v27, 0LL) & 1) != 0)
    {
      swift_bridgeObjectRelease(v51);
      goto LABEL_17;
    }

    uint64_t v85 = type metadata accessor for ContainerDefinition.ContainerType(0LL);
    sub_10000848C((uint64_t)v16, 1LL, 1LL, v85);
    sub_100004DEC(v50, v51, v16, v136);
    uint64_t v82 = v87;
    sub_10000857C((uint64_t)v16, &qword_100069A80);
    swift_bridgeObjectRelease(v51);

    unsigned int v53 = 0;
    goto LABEL_85;
  }

  swift_bridgeObjectRelease(v27);

  uint64_t v46 = (uint64_t)v18;
LABEL_26:
  sub_10000857C(v46, &qword_100069A80);
  uint64_t v140 = v4;
  swift_errorRetain(v4);
  uint64_t v66 = sub_10000844C(&qword_100069A88);
  if ((swift_dynamicCast(v138, &v140, v66, &type metadata for ToolKitIndexer.Error, 0LL) & 1) != 0 && v139)
  {
    swift_bridgeObjectRelease(v139);
    swift_errorRelease(v4);
    v67 = (_OWORD *)v135;
    *(_OWORD *)(v135 + 16) = 0u;
    v67[2] = 0u;
    _OWORD *v67 = 0u;
    swift_errorRelease(v140);
  }

  else
  {
    swift_errorRelease(v140);
  }
}

void sub_100004DEC(uint64_t a1, uint64_t a2, void (*a3)(char *, uint64_t), uint64_t a4)
{
  if ((v9 & 1) != 0)
  {
    v10 = sub_100005220(a1, a2, a3, a4);
    if (!v4)
    {
      uint64_t v11 = (uint64_t)v10;
      swift_bridgeObjectRetain(a2);
      sub_1000133E4(v11, 0, a1, a2);
    }
  }

  sub_100008D04();
}

uint64_t sub_100004E8C(void *a1, char a2)
{
  if (!v5 || (v6 = v5, v2 = sub_100013368(), char v8 = v7, swift_bridgeObjectRelease(v6), (v8 & 1) != 0))
  {
    char v9 = (void *)sub_100008D1C();
    if ((a2 & 1) != 0)
    {
      uint64_t v12 = sub_1000062EC(v9, v10, v11);
      if (v3) {
        return v2;
      }
      if ((v19 & 1) != 0)
      {
        uint64_t v12 = sub_100008D30();
        if ((v21 & 1) != 0)
        {
          id v22 = (void *)sub_100008D1C();
          return sub_100006168(v22, v23, v24);
        }
      }
    }

    else
    {
      uint64_t v12 = sub_100006168(v9, v10, v11);
      if (v3) {
        return v2;
      }
      if ((v13 & 1) != 0)
      {
        uint64_t v14 = (void *)sub_100008D1C();
        uint64_t v12 = sub_1000062EC(v14, v15, v16);
        if ((v17 & 1) != 0) {
          return sub_100008D30();
        }
      }
    }

    return v12;
  }

  return v2;
}

void sub_100004F90(uint64_t a1)
{
  uint64_t v3 = sub_100008D74();
  uint64_t v5 = v4;
  sub_100008D68();
  if ((v6 & 1) != 0)
  {
    uint64_t v7 = sub_100008D74();
    uint64_t v9 = v8;
    id v10 = objc_allocWithZone(&OBJC_CLASS___LSApplicationRecord);
    id v11 = sub_100007CA8(v7, v9, 0);
    if (v1)
    {
      __chkstk_darwin(v11);
      ToolDatabase.Savepoint.perform<A>(work:)(&v18, sub_100008700);
      swift_errorRelease(v1);
      uint64_t v16 = v18;
    }

    else
    {
      uint64_t v12 = v11;
      uint64_t v13 = sub_100008D74();
      uint64_t v15 = v14;
      id v17 = v12;
      uint64_t v16 = sub_100005694(v13, v15, v12, a1);
      swift_bridgeObjectRelease(v15);
    }

    sub_1000133E4(v16, 0, v3, v5);
  }

  else
  {
    swift_bridgeObjectRelease(v5);
  }

  sub_100008D04();
}

BOOL sub_100005140(int a1, int a2)
{
  return ((a2 ^ a1) & 1) == 0;
}

void sub_100005150(uint64_t a1, char a2)
{
}

Swift::Int sub_100005170(char a1)
{
  return Hasher._finalize()();
}

BOOL sub_1000051B4(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_100005140(*a1, *a2);
}

Swift::Int sub_1000051C0()
{
  return sub_100005170(*v0);
}

void sub_1000051C8(uint64_t a1)
{
}

Swift::Int sub_1000051D0(uint64_t a1)
{
  Swift::UInt v2 = *v1;
  Hasher.init(_seed:)(v4, a1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

void (*sub_100005220( uint64_t a1, uint64_t a2, void (*a3)(char *, uint64_t), uint64_t a4))(char *, uint64_t)
{
  uint64_t v52 = a4;
  uint64_t v7 = sub_10000844C(&qword_100069A80);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v52 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for ContainerDefinition.ContainerType(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v52 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v12);
  uint64_t v55 = (char *)&v52 - v15;
  if (qword_1000699B0 != -1) {
    swift_once(&qword_1000699B0, sub_100008E20);
  }
  uint64_t v16 = qword_10006BC70;
  uint64_t v17 = qword_10006BC70 + 16;
  swift_beginAccess(qword_10006BC70 + 16, v54, 0LL, 0LL);
  if (!*(void *)(*(void *)(v16 + 16) + 16LL))
  {
    unint64_t v29 = sub_1000084EC();
    uint64_t v30 = swift_allocError(&type metadata for ContainerIndexer.ContainerIndexerError, v29, 0LL, 0LL);
    *uint64_t v31 = 0;
    swift_willThrow(v30, v31, v32, v33, v34, v35, v36);
    return a3;
  }

  sub_100008498((uint64_t)a3, (uint64_t)v9);
  a3 = (void (*)(char *, uint64_t))&enum case for ContainerDefinition.ContainerType.extension(_:);
  if (sub_1000084E0((uint64_t)v9, 1LL, v10) != 1)
  {
    uint64_t v28 = v55;
    (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v55, v9, v10);
    uint64_t v19 = v53;
    goto LABEL_15;
  }

  sub_10000857C((uint64_t)v9, &qword_100069A80);
  uint64_t v18 = *(void *)v17;
  uint64_t v19 = v53;
  if (!*(void *)(*(void *)v17 + 16LL))
  {
LABEL_11:
    id v37 = *(void (**)(char *, void, uint64_t))(v11 + 104);
    uint64_t v28 = v55;
    v37(v55, enum case for ContainerDefinition.ContainerType.app(_:), v10);
    id v38 = objc_allocWithZone(&OBJC_CLASS___LSApplicationExtensionRecord);
    swift_bridgeObjectRetain(a2);
    id v39 = sub_100007D80(a1, a2);
    if (v19)
    {
      swift_errorRelease(v19);
      uint64_t v19 = 0LL;
    }

    else
    {

      (*(void (**)(char *, uint64_t))(v11 + 8))(v28, v10);
      v37(v28, enum case for ContainerDefinition.ContainerType.extension(_:), v10);
    }

    a3 = (void (*)(char *, uint64_t))&enum case for ContainerDefinition.ContainerType.extension(_:);
    goto LABEL_15;
  }

  swift_bridgeObjectRetain(a2);
  swift_bridgeObjectRetain(v18);
  uint64_t v20 = sub_100051B7C(a1, a2);
  if ((v21 & 1) == 0)
  {
    swift_bridgeObjectRelease(a2);
    swift_bridgeObjectRelease(v18);
    goto LABEL_11;
  }

  id v22 = (void *)(*(void *)(v18 + 56) + (v20 << 6));
  uint64_t v23 = v22[1];
  uint64_t v24 = v22[3];
  uint64_t v25 = v22[5];
  swift_bridgeObjectRetain(v23);
  swift_bridgeObjectRetain(v24);
  uint64_t v26 = swift_bridgeObjectRetain(v25);
  swift_bridgeObjectRelease(v26);
  swift_bridgeObjectRelease(v24);
  uint64_t v27 = v23;
  a3 = (void (*)(char *, uint64_t))&enum case for ContainerDefinition.ContainerType.extension(_:);
  swift_bridgeObjectRelease(v27);
  swift_bridgeObjectRelease(a2);
  swift_bridgeObjectRelease(v18);
  uint64_t v28 = v55;
  (*(void (**)(char *, void, uint64_t))(v11 + 104))( v55,  enum case for ContainerDefinition.ContainerType.daemon(_:),  v10);
LABEL_15:
  (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v14, v28, v10);
  int v40 = (*(uint64_t (**)(char *, uint64_t))(v11 + 88))(v14, v10);
  if (v40 == enum case for ContainerDefinition.ContainerType.app(_:))
  {
    uint64_t v41 = v19;
    sub_100005694(a1, a2, 0LL, v52);
  }

  else if (v40 == enum case for ContainerDefinition.ContainerType.daemon(_:))
  {
    uint64_t v41 = v19;
    uint64_t v42 = (void (*)(char *, uint64_t))sub_1000069C8(a1, a2);
  }

  else if (v40 == enum case for ContainerDefinition.ContainerType.extension(_:))
  {
    uint64_t v41 = v19;
    sub_100006208(a1, a2);
  }

  else
  {
    if (v40 != enum case for ContainerDefinition.ContainerType.framework(_:))
    {
      unint64_t v44 = sub_1000084EC();
      uint64_t v45 = swift_allocError(&type metadata for ContainerIndexer.ContainerIndexerError, v44, 0LL, 0LL);
      *uint64_t v46 = 1;
      swift_willThrow(v45, v46, v47, v48, v49, v50, v51);
      a3 = *(void (**)(char *, uint64_t))(v11 + 8);
      a3(v28, v10);
      a3(v14, v10);
      return a3;
    }

    uint64_t v41 = v19;
    uint64_t v42 = (void (*)(char *, uint64_t))sub_100006B64();
  }

  if (!v41) {
    a3 = v42;
  }
  (*(void (**)(char *, uint64_t))(v11 + 8))(v28, v10);
  return a3;
}

void sub_100005694(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  if (a3)
  {
    uint64_t v9 = a3;
    goto LABEL_3;
  }

  uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(VCBundleIdentifierRunner);
  if (v11 == a1 && v12 == a2) {
    goto LABEL_17;
  }
  uint64_t v14 = v12;
  char v15 = _stringCompareWithSmolCheck(_:_:expecting:)(v11, v12, a1, a2, 0LL);
  swift_bridgeObjectRelease(v14);
  if ((v15 & 1) != 0) {
    goto LABEL_18;
  }
  uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(VCCurrentPlatformShortcutsAppBundleIdentifier);
  if (v16 == a1 && v17 == a2)
  {
LABEL_17:
    swift_bridgeObjectRelease(a2);
    goto LABEL_18;
  }

  uint64_t v19 = v17;
  char v20 = _stringCompareWithSmolCheck(_:_:expecting:)(v16, v17, a1, a2, 0LL);
  swift_bridgeObjectRelease(v19);
  if ((v20 & 1) == 0)
  {
    id v21 = objc_allocWithZone(&OBJC_CLASS___LSApplicationRecord);
    swift_bridgeObjectRetain(a2);
    id v22 = sub_100007CA8(a1, a2, 1);
    if (v4)
    {
      id v10 = (id)swift_errorRelease(v4);
      uint64_t v9 = 0LL;
      goto LABEL_4;
    }

    uint64_t v9 = v22;
LABEL_3:
    id v10 = a3;
LABEL_4:
    __chkstk_darwin(v10);
    ToolDatabase.Savepoint.perform<A>(work:)(&v23, sub_100008528);

    return;
  }

LABEL_18:
  sub_100004F90(a4);
}

  __break(1u);
  return result;
}

    sub_100046898();
    goto LABEL_10;
  }

  __break(1u);
  return result;
}

  __break(1u);
}

    char v6 = (v11 - 1) & v11;
    uint64_t v9 = __clz(__rbit64(v11)) + (v12 << 6);
    uint64_t v5 = v12;
  }

  __break(1u);
  return result;
}

uint64_t sub_100005844@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  uint64_t v73 = a3;
  uint64_t v74 = a4;
  uint64_t v80 = a2;
  id v78 = a5;
  uint64_t v6 = type metadata accessor for URL(0LL);
  __chkstk_darwin(v6);
  uint64_t v75 = (char *)&v67 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v79 = type metadata accessor for Locale(0LL);
  uint64_t v77 = *(void *)(v79 - 8);
  uint64_t v8 = __chkstk_darwin(v79);
  uint64_t v72 = (char *)&v67 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = __chkstk_darwin(v8);
  char v83 = (char *)&v67 - v11;
  __chkstk_darwin(v10);
  uint64_t v76 = (char *)&v67 - v12;
  uint64_t v13 = type metadata accessor for ContainerDefinition.ContainerType(0LL);
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v67 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = type metadata accessor for ContainerDefinition.Origin(0LL);
  uint64_t v18 = *(void *)(v17 - 8);
  __chkstk_darwin(v17);
  char v20 = (char *)&v67 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(VCCurrentPlatformShortcutsAppBundleIdentifier);
  uint64_t v23 = v22;
  uint64_t v24 = *(void (**)(char *, void, uint64_t))(v14 + 104);
  uint64_t v84 = v13;
  v24(v16, enum case for ContainerDefinition.ContainerType.app(_:), v13);
  (*(void (**)(char *, void, uint64_t))(v18 + 104))( v20,  enum case for ContainerDefinition.Origin.firstParty(_:),  v17);
  uint64_t v25 = v85;
  uint64_t v26 = ToolDatabase.Accessor.addContainerMetadata(containerId:bundleVersion:containerType:deviceId:teamId:origin:)( v21,  v23,  3157553LL,  0xE300000000000000LL,  v16,  0LL,  0LL,  0x3030303030303030LL,  0xE800000000000000LL,  v20);
  if (v25)
  {
    swift_bridgeObjectRelease(v23);
    (*(void (**)(char *, uint64_t))(v18 + 8))(v20, v17);
    return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v16, v84);
  }

  else
  {
    uint64_t v70 = a1;
    Swift::Int64 v71 = v26;
    swift_bridgeObjectRelease(v23);
    (*(void (**)(char *, uint64_t))(v18 + 8))(v20, v17);
    (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v84);
    uint64_t v28 = *(void *)(v80 + 24);
    uint64_t v29 = *(void *)((v28 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    swift_bridgeObjectRetain(*(void *)(v80 + 24));
    while (1)
    {
      uint64_t v30 = v78;
      uint64_t v31 = v79;
      uint64_t v33 = v76;
      uint64_t v32 = v77;
      uint64_t v34 = v83;
      if (!v29) {
        break;
      }
      uint64_t v68 = v28;
      unint64_t v69 = v28 & 0xC000000000000001LL;
      uint64_t v35 = 4LL;
      uint64_t v67 = v29;
      while (1)
      {
        id v36 = v69
            ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v35 - 4, v28)
            : *(id *)(v28 + 8 * v35);
        if (__OFADD__(v35 - 4, 1LL)) {
          break;
        }
        uint64_t v81 = v35;
        uint64_t v82 = v35 - 3;
        id v37 = v36;
        id v38 = [v36 locale];
        static Locale._unconditionallyBridgeFromObjectiveC(_:)();

        uint64_t v84 = Locale.identifier.getter();
        uint64_t v85 = v39;
        char v83 = *(char **)(v32 + 8);
        ((void (*)(char *, uint64_t))v83)(v33, v31);
        uint64_t v40 = static String._fromUTF8Repairing(_:)("Shortcuts");
        uint64_t v42 = v41;
        uint64_t v43 = static String._fromUTF8Repairing(_:)("Shortcuts");
        uint64_t v45 = v44;
        static Locale.autoupdatingCurrent.getter();
        uint64_t v46 = (uint64_t)v34;
        if (qword_1000699B8 != -1) {
          swift_once(&qword_1000699B8, sub_100009D58);
        }
        id v47 = objc_msgSend((id)static NSBundle._current, "bundleURL", v67);
        uint64_t v48 = (uint64_t)v75;
        static URL._unconditionallyBridgeFromObjectiveC(_:)();

        id v49 = objc_allocWithZone(&OBJC_CLASS____NSLocalizedStringResource);
        id v50 = sub_100007E48(v40, v42, v43, v45, 0LL, 0LL, v46, v48);
        id v51 = [v37 localize:v50];

        uint64_t v52 = static String._unconditionallyBridgeFromObjectiveC(_:)(v51);
        v54 = v53;

        Swift::Int64 v55 = v71;
        v56._countAndFlagsBits = v84;
        v57 = v85;
        v56._object = v85;
        v58._countAndFlagsBits = v52;
        v58._object = v54;
        ToolDatabase.Accessor.addContainerMetadataLocalization(containerId:locale:name:)(v71, v56, v58);
        if (v59)
        {

          swift_bridgeObjectRelease(v57);
          swift_bridgeObjectRelease(v54);
          return swift_bridgeObjectRelease(v68);
        }

        uint64_t v34 = (char *)v46;
        swift_bridgeObjectRelease(v57);
        swift_bridgeObjectRelease(v54);
        id v60 = [v37 locale];
        uint64_t v61 = v72;
        static Locale._unconditionallyBridgeFromObjectiveC(_:)();

        uint64_t v62 = Locale.identifier.getter();
        char v64 = v63;
        uint64_t v65 = v61;
        uint64_t v31 = v79;
        ((void (*)(char *, uint64_t))v83)(v65, v79);
        sub_100005DDC(v73, v74, v55, v62, v64);
        uint64_t v28 = v68;
        swift_bridgeObjectRelease(v64);

        uint64_t v35 = v81 + 1;
        uint64_t v32 = v77;
        uint64_t v30 = v78;
        uint64_t v33 = v76;
        if (v82 == v67) {
          goto LABEL_15;
        }
      }

      __break(1u);
LABEL_18:
      if (v28 < 0) {
        uint64_t v66 = v28;
      }
      else {
        uint64_t v66 = v28 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain(v28);
      uint64_t v29 = _CocoaArrayWrapper.endIndex.getter(v66);
    }

LABEL_15:
    uint64_t result = swift_bridgeObjectRelease(v28);
    *uint64_t v30 = v71;
  }

  return result;
}

  __break(1u);
}

  __break(1u);
}

void sub_100005DDC(uint64_t a1, uint64_t a2, Swift::Int64 a3, uint64_t a4, void *a5)
{
  v43._object = a5;
  v43._countAndFlagsBits = a4;
  sub_100008540();
  swift_bridgeObjectRetain(a2);
  id v7 = sub_100007BC0(a1, a2);
  if (!v7) {
    return;
  }
  uint64_t v8 = v7;
  uint64_t v9 = sub_1000082D0(v7);
  if (!v9)
  {
    __int128 v44 = 0u;
    __int128 v45 = 0u;
    goto LABEL_18;
  }

  uint64_t v10 = v9;
  sub_100008D94(0xD000000000000015LL, 0x8000000100059DA0LL, v9, &v44);
  swift_bridgeObjectRelease(v10);
  if (!*((void *)&v45 + 1))
  {
LABEL_18:

    sub_10000857C((uint64_t)&v44, &qword_10006A420);
    return;
  }

  uint64_t v11 = sub_10000844C(&qword_100069AB0);
  if ((swift_dynamicCast(&v46, &v44, (char *)&type metadata for Any + 8, v11, 6LL) & 1) != 0)
  {
    id v41 = v8;
    uint64_t v12 = v46;
    uint64_t v13 = *(void *)(v46 + 16);
    if (v13)
    {
      swift_bridgeObjectRetain(v46);
      uint64_t v14 = 0LL;
      uint64_t v15 = &_swiftEmptyArrayStorage;
      do
      {
        uint64_t v16 = *(void *)(v12 + 8 * v14 + 32);
        if (*(void *)(v16 + 16))
        {
          swift_bridgeObjectRetain(*(void *)(v12 + 8 * v14 + 32));
          uint64_t v17 = sub_100051B7C(0xD000000000000014LL, 0x8000000100059DC0LL);
          if ((v18 & 1) != 0)
          {
            uint64_t v19 = (uint64_t *)(*(void *)(v16 + 56) + 16 * v17);
            uint64_t v20 = *v19;
            uint64_t v21 = v19[1];
            swift_bridgeObjectRetain(v21);
            swift_bridgeObjectRelease(v16);
            if ((swift_isUniquelyReferenced_nonNull_native(v15) & 1) == 0)
            {
              sub_100050A48(0LL, v15[2] + 1LL, 1LL, (uint64_t)v15);
              uint64_t v15 = v25;
            }

            unint64_t v23 = v15[2];
            unint64_t v22 = v15[3];
            if (v23 >= v22 >> 1)
            {
              sub_100050A48(v22 > 1, v23 + 1, 1LL, (uint64_t)v15);
              uint64_t v15 = v26;
            }

            v15[2] = v23 + 1;
            uint64_t v24 = (char *)&v15[2 * v23];
            *((void *)v24 + 4) = v20;
            *((void *)v24 + 5) = v21;
          }

          else
          {
            swift_bridgeObjectRelease(v16);
          }
        }

        ++v14;
      }

      while (v13 != v14);
      swift_bridgeObjectRelease(v12);
    }

    else
    {
      uint64_t v15 = &_swiftEmptyArrayStorage;
    }

    swift_bridgeObjectRelease(v12);
    uint64_t v40 = v15[2];
    if (v40)
    {
      Swift::Int v27 = 0LL;
      uint64_t v28 = v15 + 5;
      while (1)
      {
        uint64_t v29 = *v28;
        swift_bridgeObjectRetain(*v28);
        NSString v30 = String._bridgeToObjectiveC()();
        NSString v31 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease(v29);
        NSString v32 = String._bridgeToObjectiveC()();
        NSString v33 = String._bridgeToObjectiveC()();
        id v34 = [v41 localizedStringForKey:v30 value:v31 table:v32 localization:v33];

        uint64_t v35 = static String._unconditionallyBridgeFromObjectiveC(_:)(v34);
        id v37 = v36;

        v38._countAndFlagsBits = v35;
        v38._object = v37;
        ToolDatabase.Accessor.addContainerMetadataSynonym(containerId:locale:synonym:order:)(a3, v43, v38, v27);
        if (v39) {
          break;
        }
        v28 += 2;
        ++v27;
        swift_bridgeObjectRelease(v37);
        if (v40 == v27) {
          goto LABEL_28;
        }
      }

      swift_bridgeObjectRelease(v37);
    }

LABEL_28:
    swift_bridgeObjectRelease(v15);
  }

  else
  {
  }

  __break(1u);
  return result;
}

    sub_100046A38();
LABEL_29:
    unint64_t v22 = *(id *)(*(void *)(v5 + 48) + 8 * v17);
    if (!v22) {
      goto LABEL_37;
    }
    while (1)
    {
      uint64_t v26 = a2(0LL);
      if (swift_dynamicCastClass(v22, v26))
      {
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        uint64_t v28 = *(void *)((v35 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
        Swift::Int v27 = *(void *)((v35 & 0xFFFFFFFFFFFFFF8LL) + 0x18);
        if (v28 >= v27 >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v27 > 1, v28 + 1, 1LL);
        }
        uint64_t v29 = sub_100046C54();
        NSString v31 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v29, v30);
        uint64_t v11 = (void *)specialized Array._endMutation()(v31);
      }

      else
      {
      }

      uint64_t v13 = v18;
      Swift::UInt v2 = v3;
      if ((v5 & 0x8000000000000000LL) == 0) {
        break;
      }
LABEL_10:
      uint64_t v19 = __CocoaSet.Iterator.next()(v11);
      if (v19)
      {
        uint64_t v20 = v19;
        NSString v33 = v19;
        uint64_t v21 = sub_10000E518(0LL, &qword_10006A3D0, &OBJC_CLASS___WFResource_ptr);
        swift_unknownObjectRetain(v20);
        swift_dynamicCast(v34, &v33, (char *)&type metadata for Swift.AnyObject + 8, v21, 7LL);
        unint64_t v22 = (id)v34[0];
        swift_unknownObjectRelease(v20);
        char v18 = v13;
        uint64_t v3 = v2;
        if (v22) {
          continue;
        }
      }

      goto LABEL_37;
    }
  }

  __break(1u);
}

  __break(1u);
  return result;
}

  Swift::String v43 = (unsigned int *)&enum case for RuntimePlatform.phone(_:);
LABEL_29:
  __int128 v44 = *v43;
  __int128 v45 = type metadata accessor for RuntimePlatform(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v45 - 8) + 104LL))(a2, v44, v45);
}

uint64_t sub_100006168(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = sub_100008338(a1, (SEL *)&selRef_extensionBundleIdentifier);
  uint64_t v7 = v6;
  if (!v6) {
    return 0LL;
  }
  uint64_t v8 = v5;
  sub_100006208(v5, v6);
  if (v3)
  {
    swift_bridgeObjectRelease(v7);
  }

  else
  {
    a3 = v9;
    sub_1000133E4(v9, 0, v8, v7);
  }

  return a3;
}

void sub_100006208(uint64_t a1, uint64_t a2)
{
  id v5 = objc_allocWithZone(&OBJC_CLASS___LSApplicationExtensionRecord);
  swift_bridgeObjectRetain(a2);
  id v6 = sub_100007D80(a1, a2);
  if (!v2)
  {
    uint64_t v7 = v6;
    __chkstk_darwin(v6);
    ToolDatabase.Savepoint.perform<A>(work:)(&v8, sub_1000086B0);
  }

uint64_t sub_1000062EC(void *a1, uint64_t a2, uint64_t a3)
{
  id v6 = [a1 applicationRecord];
  uint64_t v7 = sub_100008338(a1, (SEL *)&selRef_bundleIdentifier);
  uint64_t v9 = v8;
  if (!v6)
  {
    swift_bridgeObjectRelease(v8);
    return 0LL;
  }

  if (!v8)
  {

    return 0LL;
  }

  uint64_t v10 = v7;
  id v11 = v6;
  sub_100005694(v10, v9, v6, a3);
  if (v3)
  {

    swift_bridgeObjectRelease(v9);
  }

  else
  {
    a3 = v12;
    sub_1000133E4(v12, 0, v10, v9);
  }

  return a3;
}

uint64_t sub_1000063E8(void *a1)
{
  uint64_t v2 = sub_100008338(a1, (SEL *)&selRef_bundleIdentifier);
  if (!v3) {
    return 0LL;
  }
  uint64_t v4 = v3;
  __chkstk_darwin(v2);
  sub_10000844C(&qword_100069AC0);
  ToolDatabase.Savepoint.perform<A>(work:)(&v6, sub_1000086E4);
  uint64_t result = swift_bridgeObjectRelease(v4);
  if (!v1) {
    return v6;
  }
  return result;
}

uint64_t sub_1000064CC@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, uint64_t a5@<X4>, void *a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v77 = (void *)a3;
  id v68 = a6;
  uint64_t v72 = a7;
  uint64_t v73 = a5;
  uint64_t v75 = a1;
  uint64_t v78 = type metadata accessor for Locale(0LL);
  uint64_t v70 = *(void *)(v78 - 8);
  uint64_t v9 = __chkstk_darwin(v78);
  uint64_t v67 = (char *)&v62 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v9);
  unint64_t v69 = (char *)&v62 - v11;
  uint64_t v12 = type metadata accessor for ContainerDefinition.Origin(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v62 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = type metadata accessor for ContainerDefinition.ContainerType(0LL);
  uint64_t v17 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  uint64_t v19 = (char *)&v62 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, void, uint64_t))(v17 + 104))( v19,  enum case for ContainerDefinition.ContainerType.app(_:),  v16);
  Swift::Int64 v71 = a4;
  uint64_t v20 = sub_100008338(a4, (SEL *)&selRef_teamIdentifier);
  uint64_t v22 = v21;
  unint64_t v23 = *(void (**)(char *, void, uint64_t))(v13 + 104);
  unint64_t v65 = v12;
  v23(v15, enum case for ContainerDefinition.Origin.unknown(_:), v12);
  uint64_t v74 = a2;
  uint64_t v24 = v76;
  uint64_t v25 = ToolDatabase.Accessor.addContainerMetadata(containerId:bundleVersion:containerType:deviceId:teamId:origin:)( a2,  v77,  0LL,  0LL,  v19,  0LL,  0LL,  v20,  v22,  v15);
  if (v24)
  {
    swift_bridgeObjectRelease(v22);
    (*(void (**)(char *, unint64_t))(v13 + 8))(v15, v65);
    return (*(uint64_t (**)(char *, uint64_t))(v17 + 8))(v19, v16);
  }

  else
  {
    Swift::Int64 v66 = v25;
    swift_bridgeObjectRelease(v22);
    (*(void (**)(char *, unint64_t))(v13 + 8))(v15, v65);
    (*(void (**)(char *, uint64_t))(v17 + 8))(v19, v16);
    uint64_t v27 = *(void *)(v73 + 24);
    uint64_t v28 = *(void *)((v27 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    swift_bridgeObjectRetain(*(void *)(v73 + 24));
    while (1)
    {
      NSString v30 = v71;
      uint64_t v29 = v72;
      uint64_t v31 = v74;
      uint64_t v32 = v70;
      if (!v28) {
        break;
      }
      uint64_t v64 = v27;
      unint64_t v65 = v27 & 0xC000000000000001LL;
      uint64_t v33 = 4LL;
      uint64_t v63 = v28;
      while (1)
      {
        id v34 = v65
            ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v33 - 4, v27)
            : *(id *)(v27 + 8 * v33);
        uint64_t v35 = v34;
        uint64_t v27 = v78;
        id v36 = v69;
        if (__OFADD__(v33 - 4, 1LL)) {
          break;
        }
        uint64_t v76 = v33 - 3;
        id v37 = [v34 locale];
        static Locale._unconditionallyBridgeFromObjectiveC(_:)();

        uint64_t v38 = Locale.identifier.getter();
        uint64_t v39 = v36;
        id v41 = v40;
        uint64_t v42 = *(void (**)(char *, uint64_t))(v32 + 8);
        v42(v39, v27);
        if (v68
          && (id v43 = [v68 localizedNameWithContext:v35]) != 0)
        {
          __int128 v44 = v43;
          uint64_t v45 = static String._unconditionallyBridgeFromObjectiveC(_:)(v43);
          id v47 = v46;
        }

        else
        {
          uint64_t v48 = sub_100008338(v30, (SEL *)&selRef_localizedName);
          if (v49)
          {
            uint64_t v45 = v48;
            id v47 = v49;
          }

          else
          {
            id v47 = v77;
            swift_bridgeObjectRetain(v77);
            uint64_t v45 = v74;
          }
        }

        Swift::Int64 v50 = v66;
        v51._countAndFlagsBits = v38;
        v51._object = v41;
        v52._countAndFlagsBits = v45;
        v52._object = v47;
        ToolDatabase.Accessor.addContainerMetadataLocalization(containerId:locale:name:)(v66, v51, v52);
        if (v53)
        {

          swift_bridgeObjectRelease(v41);
          swift_bridgeObjectRelease(v47);
          return swift_bridgeObjectRelease(v64);
        }

        swift_bridgeObjectRelease(v47);
        swift_bridgeObjectRelease(v41);
        id v54 = [v35 locale];
        Swift::Int64 v55 = v67;
        static Locale._unconditionallyBridgeFromObjectiveC(_:)();

        uint64_t v56 = Locale.identifier.getter();
        Swift::String v58 = v57;
        v42(v55, v78);
        uint64_t v31 = v74;
        sub_100005DDC(v74, (uint64_t)v77, v50, v56, v58);
        swift_bridgeObjectRelease(v58);

        ++v33;
        uint64_t v27 = v64;
        NSString v30 = v71;
        uint64_t v29 = v72;
        uint64_t v32 = v70;
        if (v76 == v63) {
          goto LABEL_19;
        }
      }

      __break(1u);
LABEL_22:
      if (v27 < 0) {
        uint64_t v61 = v27;
      }
      else {
        uint64_t v61 = v27 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain(v27);
      uint64_t v28 = _CocoaArrayWrapper.endIndex.getter(v61);
    }

LABEL_19:
    swift_bridgeObjectRelease(v27);
    uint64_t v59 = (uint64_t)v77;
    swift_bridgeObjectRetain(v77);
    Swift::Int64 v60 = v66;
    uint64_t result = sub_1000133E4(v66, 0, v31, v59);
    *(void *)uint64_t v29 = v60;
    *(_BYTE *)(v29 + 8) = 0;
  }

  return result;
}

    uint64_t result = swift_bridgeObjectRelease(v25);
    *uint64_t v64 = v28;
  }

  return result;
}

    sub_100046A28();
    uint64_t v17 = v28 & v27;
  }

  if (v23 + 3 >= v43)
  {
LABEL_31:
    sub_100044304(v13);
    id v5 = v41;
    goto LABEL_33;
  }

  sub_10004705C();
  if (v26)
  {
    uint64_t v20 = v25;
    goto LABEL_19;
  }

  while (1)
  {
    uint64_t v20 = v25 + 1;
    if (__OFADD__(v25, 1LL)) {
      break;
    }
    if (v20 >= v43) {
      goto LABEL_31;
    }
    ++v25;
    if (*(void *)(v42 + 8 * v20)) {
      goto LABEL_19;
    }
  }

uint64_t sub_100006984()
{
  return v0;
}

uint64_t sub_1000069A8()
{
  return swift_deallocClassInstance(v0, 32LL, 7LL);
}

void *sub_1000069C8(uint64_t a1, uint64_t a2)
{
  if (qword_1000699B0 != -1) {
    swift_once(&qword_1000699B0, sub_100008E20);
  }
  uint64_t v5 = qword_10006BC70;
  swift_beginAccess(qword_10006BC70 + 16, v25, 0LL, 0LL);
  uint64_t v6 = *(void *)(v5 + 16);
  if (!*(void *)(v6 + 16)) {
    goto LABEL_8;
  }
  swift_bridgeObjectRetain(a2);
  swift_bridgeObjectRetain(v6);
  uint64_t v7 = sub_100051B7C(a1, a2);
  if ((v8 & 1) == 0)
  {
    swift_bridgeObjectRelease(a2);
    swift_bridgeObjectRelease(v6);
LABEL_8:
    unint64_t v15 = sub_1000085B4();
    swift_allocError(&type metadata for ToolKitIndexer.Error, v15, 0LL, 0LL);
    *uint64_t v16 = a1;
    v16[1] = a2;
    uint64_t v17 = swift_bridgeObjectRetain(a2);
    return (void *)swift_willThrow(v17, v18, v19, v20, v21, v22, v23);
  }

  uint64_t v9 = (_OWORD *)(*(void *)(v6 + 56) + (v7 << 6));
  __int128 v11 = v9[2];
  __int128 v10 = v9[3];
  __int128 v12 = v9[1];
  v26[0] = *v9;
  v26[1] = v12;
  v26[2] = v11;
  v26[3] = v10;
  sub_1000085F0(v26);
  swift_bridgeObjectRelease(a2);
  uint64_t v13 = swift_bridgeObjectRelease(v6);
  __chkstk_darwin(v13);
  ToolDatabase.Savepoint.perform<A>(work:)(&v24, sub_100008644);
  uint64_t result = sub_10000865C(v26);
  if (!v2) {
    return (void *)v24;
  }
  return result;
}

void *sub_100006B64()
{
  uint64_t result = ToolDatabase.Savepoint.perform<A>(work:)(&v2, sub_1000086C8);
  if (!v0) {
    return (void *)v2;
  }
  return result;
}

uint64_t sub_100006BBC@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, uint64_t a5@<X4>, Swift::Int64 *a6@<X8>)
{
  uint64_t v74 = a5;
  uint64_t v75 = a2;
  uint64_t v76 = a3;
  uint64_t v77 = a1;
  uint64_t v64 = a6;
  uint64_t v82 = type metadata accessor for Locale(0LL);
  uint64_t v72 = *(void *)(v82 - 8);
  uint64_t v8 = __chkstk_darwin(v82);
  uint64_t v70 = (char *)&v63 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v67 = (char *)&v63 - v11;
  __chkstk_darwin(v10);
  Swift::Int64 v71 = (char *)&v63 - v12;
  uint64_t v13 = type metadata accessor for ContainerDefinition.Origin(0LL);
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v63 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = type metadata accessor for ContainerDefinition.ContainerType(0LL);
  uint64_t v18 = *(void *)(v17 - 8);
  __chkstk_darwin(v17);
  uint64_t v20 = (char *)&v63 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v73 = a4;
  if (a4)
  {
    a4 = (void *)sub_100008338(a4, (SEL *)&selRef_bundleVersion);
    uint64_t v22 = v21;
  }

  else
  {
    uint64_t v22 = 0LL;
  }

  (*(void (**)(char *, void, uint64_t))(v18 + 104))( v20,  enum case for ContainerDefinition.ContainerType.app(_:),  v17);
  (*(void (**)(char *, void, uint64_t))(v14 + 104))( v16,  enum case for ContainerDefinition.Origin.unknown(_:),  v13);
  uint64_t v23 = ToolDatabase.Accessor.addContainerMetadata(containerId:bundleVersion:containerType:deviceId:teamId:origin:)( v75,  v76,  a4,  v22,  v20,  0LL,  0LL,  0LL,  0LL,  v16);
  if (v6)
  {
    swift_bridgeObjectRelease(v22);
    (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
    return (*(uint64_t (**)(char *, uint64_t))(v18 + 8))(v20, v17);
  }

  else
  {
    Swift::Int64 v66 = v23;
    swift_bridgeObjectRelease(v22);
    (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
    (*(void (**)(char *, uint64_t))(v18 + 8))(v20, v17);
    uint64_t v25 = *(void *)(v74 + 24);
    uint64_t v26 = *(void *)((v25 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    swift_bridgeObjectRetain(*(void *)(v74 + 24));
    while (1)
    {
      uint64_t v27 = v82;
      Swift::Int64 v28 = v66;
      if (!v26) {
        break;
      }
      unint64_t v69 = v25 & 0xC000000000000001LL;
      uint64_t v29 = 4LL;
      NSString v30 = &selRef_parameterKey;
      __int128 v65 = xmmword_1000590B0;
      uint64_t v68 = v26;
      while (1)
      {
        id v31 = v69
            ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v29 - 4, v25)
            : *(id *)(v25 + 8 * v29);
        if (__OFADD__(v29 - 4, 1LL)) {
          break;
        }
        uint64_t v78 = v29;
        uint64_t v79 = v29 - 3;
        uint64_t v32 = v31;
        id v33 = [v31 v30[75]];
        id v34 = v71;
        static Locale._unconditionallyBridgeFromObjectiveC(_:)();

        v80._countAndFlagsBits = Locale.identifier.getter();
        v80._object = v35;
        id v36 = *(void (**)(char *, uint64_t))(v72 + 8);
        v36(v34, v27);
        id v37 = v73;
        id v81 = v32;
        if (v73)
        {
          uint64_t v38 = v30;
          uint64_t v39 = v27;
          uint64_t v40 = sub_10000844C(&qword_100069A98);
          uint64_t v41 = swift_allocObject(v40, 48LL, 7LL);
          *(_OWORD *)(v41 + 16) = v65;
          id v42 = [v32 v38[75]];
          id v43 = v67;
          static Locale._unconditionallyBridgeFromObjectiveC(_:)();

          uint64_t v44 = v25;
          uint64_t v45 = Locale.identifier.getter();
          uint64_t v47 = v46;
          v36(v43, v39);
          *(void *)(v41 + 32) = v45;
          *(void *)(v41 + 40) = v47;
          uint64_t v25 = v44;
          Swift::Int64 v28 = v66;
          Class isa = Array._bridgeToObjectiveC()().super.isa;
          swift_bridgeObjectRelease(v41);
          id v49 = [v37 localizedNameWithPreferredLocalizations:isa];

          uint64_t v50 = static String._unconditionallyBridgeFromObjectiveC(_:)(v49);
          Swift::String v52 = v51;
        }

        else
        {
          uint64_t v50 = 0LL;
          Swift::String v52 = (void *)0xE000000000000000LL;
        }

        object = v80._object;
        v54._countAndFlagsBits = v50;
        v54._object = v52;
        ToolDatabase.Accessor.addContainerMetadataLocalization(containerId:locale:name:)(v28, v80, v54);
        if (v55)
        {

          swift_bridgeObjectRelease(object);
          swift_bridgeObjectRelease(v52);
          return swift_bridgeObjectRelease(v25);
        }

        swift_bridgeObjectRelease(v52);
        swift_bridgeObjectRelease(object);
        id v56 = v81;
        id v57 = [v81 locale];
        Swift::String v58 = v70;
        static Locale._unconditionallyBridgeFromObjectiveC(_:)();

        uint64_t v59 = Locale.identifier.getter();
        uint64_t v61 = v60;
        v36(v58, v82);
        sub_100005DDC(v75, v76, v28, v59, v61);
        swift_bridgeObjectRelease(v61);

        uint64_t v29 = v78 + 1;
        uint64_t v27 = v82;
        NSString v30 = &selRef_parameterKey;
        if (v79 == v68) {
          goto LABEL_19;
        }
      }

      __break(1u);
LABEL_22:
      if (v25 < 0) {
        uint64_t v62 = v25;
      }
      else {
        uint64_t v62 = v25 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain(v25);
      uint64_t v26 = _CocoaArrayWrapper.endIndex.getter(v62);
    }

uint64_t sub_1000070DC@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, Swift::Int64 a3@<X2>, void *a4@<X3>, uint64_t a5@<X4>, void *a6@<X8>)
{
  uint64_t v61 = a5;
  Swift::Int64 v65 = a3;
  *(void *)&__int128 v63 = a2;
  Swift::Int64 v71 = a6;
  uint64_t v72 = a1;
  uint64_t v68 = type metadata accessor for Locale(0LL);
  uint64_t v70 = *(void *)(v68 - 8);
  uint64_t v7 = __chkstk_darwin(v68);
  Swift::Int64 v66 = (char *)&v61 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v7);
  unint64_t v69 = (char *)&v61 - v9;
  uint64_t v10 = type metadata accessor for ContainerDefinition.Origin(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v61 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = type metadata accessor for ContainerDefinition.ContainerType(0LL);
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v17 = (char *)&v61 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v62 = sub_100008338(a4, (SEL *)&selRef_bundleVersion);
  uint64_t v19 = v18;
  uint64_t v20 = *(void (**)(char *, void, uint64_t))(v15 + 104);
  unint64_t v64 = v14;
  v20(v17, enum case for ContainerDefinition.ContainerType.extension(_:), v14);
  uint64_t v21 = sub_100008338(a4, (SEL *)&selRef_teamIdentifier);
  uint64_t v23 = v22;
  id v67 = a4;
  unsigned int v24 = [a4 developerType];
  uint64_t v25 = (unsigned int *)&enum case for ContainerDefinition.Origin.thirdParty(_:);
  uint64_t v26 = (unsigned int *)&enum case for ContainerDefinition.Origin.firstParty(_:);
  if (v24 != 1) {
    uint64_t v26 = (unsigned int *)&enum case for ContainerDefinition.Origin.unknown(_:);
  }
  if (v24 != 3) {
    uint64_t v25 = v26;
  }
  uint64_t v27 = *v25;
  uint64_t v73 = v11;
  uint64_t v74 = v10;
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 104))(v13, v27, v10);
  uint64_t v28 = v75;
  uint64_t v29 = ToolDatabase.Accessor.addContainerMetadata(containerId:bundleVersion:containerType:deviceId:teamId:origin:)( v63,  v65,  v62,  v19,  v17,  0LL,  0LL,  v21,  v23,  v13);
  uint64_t v75 = v28;
  if (v28)
  {
    swift_bridgeObjectRelease(v23);
    swift_bridgeObjectRelease(v19);
    (*(void (**)(char *, uint64_t))(v73 + 8))(v13, v74);
    return (*(uint64_t (**)(char *, unint64_t))(v15 + 8))(v17, v64);
  }

  else
  {
    Swift::Int64 v65 = v29;
    swift_bridgeObjectRelease(v23);
    swift_bridgeObjectRelease(v19);
    (*(void (**)(char *, uint64_t))(v73 + 8))(v13, v74);
    (*(void (**)(char *, unint64_t))(v15 + 8))(v17, v64);
    uint64_t v31 = *(void *)(v61 + 24);
    uint64_t v32 = *(void *)((v31 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    swift_bridgeObjectRetain(*(void *)(v61 + 24));
    while (1)
    {
      uint64_t v34 = v70;
      id v33 = v71;
      uint64_t v35 = v69;
      if (!v32) {
        break;
      }
      unint64_t v64 = v31 & 0xC000000000000001LL;
      uint64_t v36 = 4LL;
      __int128 v63 = xmmword_1000590B0;
      uint64_t v62 = v31;
      while (1)
      {
        id v37 = v64
            ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v36 - 4, v31)
            : *(id *)(v31 + 8 * v36);
        uint64_t v38 = v68;
        if (__OFADD__(v36 - 4, 1LL)) {
          break;
        }
        uint64_t v73 = v36 - 3;
        uint64_t v39 = v37;
        id v40 = [v37 locale];
        static Locale._unconditionallyBridgeFromObjectiveC(_:)();

        uint64_t v74 = Locale.identifier.getter();
        id v42 = v41;
        id v43 = *(void (**)(char *, uint64_t))(v34 + 8);
        v43(v35, v38);
        uint64_t v44 = sub_10000844C(&qword_100069A98);
        uint64_t v45 = swift_allocObject(v44, 48LL, 7LL);
        *(_OWORD *)(v45 + 16) = v63;
        id v46 = [v39 locale];
        uint64_t v47 = v66;
        static Locale._unconditionallyBridgeFromObjectiveC(_:)();

        uint64_t v48 = Locale.identifier.getter();
        uint64_t v49 = v38;
        uint64_t v51 = v50;
        v43(v47, v49);
        *(void *)(v45 + 32) = v48;
        *(void *)(v45 + 40) = v51;
        Class isa = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease(v45);
        id v53 = [v67 localizedNameWithPreferredLocalizations:isa];

        uint64_t v54 = static String._unconditionallyBridgeFromObjectiveC(_:)(v53);
        id v56 = v55;

        v57._countAndFlagsBits = v74;
        v57._object = v42;
        v58._countAndFlagsBits = v54;
        v58._object = v56;
        ToolDatabase.Accessor.addContainerMetadataLocalization(containerId:locale:name:)(v65, v57, v58);
        uint64_t v75 = v59;
        if (v59)
        {

          swift_bridgeObjectRelease(v42);
          swift_bridgeObjectRelease(v56);
          return swift_bridgeObjectRelease(v62);
        }

        swift_bridgeObjectRelease(v42);
        swift_bridgeObjectRelease(v56);

        ++v36;
        uint64_t v34 = v70;
        id v33 = v71;
        uint64_t v35 = v69;
        uint64_t v31 = v62;
        if (v73 == v32) {
          goto LABEL_17;
        }
      }

      __break(1u);
LABEL_21:
      if (v31 < 0) {
        uint64_t v60 = v31;
      }
      else {
        uint64_t v60 = v31 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain(v31);
      uint64_t v32 = _CocoaArrayWrapper.endIndex.getter(v60);
    }

LABEL_17:
    uint64_t result = swift_bridgeObjectRelease(v31);
    *id v33 = v65;
  }

  return result;
}

  uint64_t v6 = *a1;
  uint64_t v7 = v6 >= 2;
  uint64_t v5 = v6 - 2;
  if (!v7) {
    uint64_t v5 = -1;
  }
  return (v5 + 1);
}

      sub_100046A28();
      uint64_t v16 = v28 & v27;
    }
  }

  sub_100043DA4();
  *uint64_t v5 = v13;
  sub_1000436A4();
}

  uint64_t v6 = *a1;
  uint64_t v7 = v6 >= 4;
  uint64_t v5 = v6 - 4;
  if (!v7) {
    uint64_t v5 = -1;
  }
  return (v5 + 1);
}

uint64_t sub_100007580@<X0>( uint64_t a1@<X0>, void *a2@<X1>, Swift::Int64 a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, void *a6@<X8>)
{
  uint64_t v45 = a5;
  id v46 = a2;
  Swift::Int64 v49 = a3;
  uint64_t v44 = a1;
  Swift::String v52 = a6;
  uint64_t v7 = type metadata accessor for Locale(0LL);
  uint64_t v50 = *(void *)(v7 - 8);
  uint64_t v51 = v7;
  __chkstk_darwin();
  uint64_t v9 = (char *)&v43 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for ContainerDefinition.Origin(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin();
  uint64_t v13 = (char *)&v43 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = type metadata accessor for ContainerDefinition.ContainerType(0LL);
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin();
  uint64_t v17 = (char *)&v43 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v43 = a4;
  uint64_t v19 = *(void *)(a4 + 48);
  uint64_t v18 = *(void *)(a4 + 56);
  (*(void (**)(char *, void, uint64_t))(v15 + 104))( v17,  enum case for ContainerDefinition.ContainerType.daemon(_:),  v14);
  uint64_t v47 = v11;
  unint64_t v48 = v10;
  (*(void (**)(char *, void, uint64_t))(v11 + 104))( v13,  enum case for ContainerDefinition.Origin.firstParty(_:),  v10);
  uint64_t v20 = v19;
  uint64_t v21 = v44;
  uint64_t v22 = v53;
  uint64_t v23 = ToolDatabase.Accessor.addContainerMetadata(containerId:bundleVersion:containerType:deviceId:teamId:origin:)( v46,  v49,  v20,  v18,  v17,  0LL,  0LL,  0LL,  0LL,  v13);
  if (v22)
  {
    (*(void (**)(char *, unint64_t))(v47 + 8))(v13, v48);
    return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v17, v14);
  }

  else
  {
    uint64_t v53 = 0LL;
    uint64_t v25 = v43;
    Swift::Int64 v49 = v23;
    (*(void (**)(char *, unint64_t))(v47 + 8))(v13, v48);
    (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
    uint64_t v26 = *(void *)(v45 + 24);
    uint64_t v27 = *(void *)((v26 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    swift_bridgeObjectRetain(*(void *)(v45 + 24));
    while (1)
    {
      uint64_t v28 = v52;
      if (!v27) {
        break;
      }
      uint64_t v29 = *(void *)(v25 + 16);
      id v46 = *(void **)(v25 + 24);
      uint64_t v47 = v29;
      unint64_t v48 = v26 & 0xC000000000000001LL;
      uint64_t v30 = 4LL;
      uint64_t v45 = v27;
      while (1)
      {
        id v31 = v48
            ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v30 - 4, v26)
            : *(id *)(v26 + 8 * v30);
        uint64_t v32 = v31;
        uint64_t v25 = v30 - 3;
        if (__OFADD__(v30 - 4, 1LL)) {
          break;
        }
        id v33 = [v31 locale];
        static Locale._unconditionallyBridgeFromObjectiveC(_:)();

        uint64_t v34 = Locale.identifier.getter();
        uint64_t v35 = v21;
        id v37 = v36;
        (*(void (**)(char *, uint64_t))(v50 + 8))(v9, v51);
        v38._countAndFlagsBits = v34;
        v38._object = v37;
        v39._object = v46;
        v39._countAndFlagsBits = v47;
        uint64_t v40 = v35;
        ToolDatabase.Accessor.addContainerMetadataLocalization(containerId:locale:name:)(v49, v38, v39);
        if (v41)
        {

          swift_bridgeObjectRelease(v37);
          return swift_bridgeObjectRelease(v26);
        }

        uint64_t v53 = 0LL;
        swift_bridgeObjectRelease(v37);

        ++v30;
        uint64_t v28 = v52;
        uint64_t v21 = v40;
        if (v25 == v45) {
          goto LABEL_13;
        }
      }

      __break(1u);
LABEL_17:
      if (v26 < 0) {
        uint64_t v42 = v26;
      }
      else {
        uint64_t v42 = v26 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain(v26);
      uint64_t v27 = _CocoaArrayWrapper.endIndex.getter(v42);
    }

LABEL_13:
    uint64_t result = swift_bridgeObjectRelease(v26);
    *uint64_t v28 = v49;
  }

  return result;
}

    uint64_t result = swift_bridgeObjectRelease(v22);
    *unsigned int v24 = v38;
  }

  return result;
}

uint64_t sub_1000078BC@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  uint64_t v36 = a4;
  uint64_t v43 = a1;
  uint64_t v42 = a5;
  uint64_t v7 = type metadata accessor for Locale(0LL);
  uint64_t v39 = *(void *)(v7 - 8);
  uint64_t v40 = v7;
  __chkstk_darwin();
  uint64_t v9 = (char *)&v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for ContainerDefinition.Origin(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin();
  uint64_t v13 = (char *)&v36 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = type metadata accessor for ContainerDefinition.ContainerType(0LL);
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin();
  uint64_t v17 = (char *)&v36 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, void, uint64_t))(v15 + 104))( v17,  enum case for ContainerDefinition.ContainerType.framework(_:),  v14);
  uint64_t v18 = *(void (**)(char *, void, uint64_t))(v11 + 104);
  unint64_t v37 = v10;
  v18(v13, enum case for ContainerDefinition.Origin.firstParty(_:), v10);
  v41._countAndFlagsBits = a2;
  v41._object = a3;
  Swift::Int64 v19 = v38;
  uint64_t v20 = ToolDatabase.Accessor.addContainerMetadata(containerId:bundleVersion:containerType:deviceId:teamId:origin:)( a2,  a3,  0LL,  0LL,  v17,  0LL,  0LL,  0LL,  0LL,  v13);
  if (v19)
  {
    (*(void (**)(char *, unint64_t))(v11 + 8))(v13, v37);
    return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v17, v14);
  }

  else
  {
    Swift::Int64 v38 = v20;
    (*(void (**)(char *, unint64_t))(v11 + 8))(v13, v37);
    (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
    uint64_t v22 = *(void *)(v36 + 24);
    uint64_t v23 = *(void *)((v22 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    swift_bridgeObjectRetain(*(void *)(v36 + 24));
    while (1)
    {
      unsigned int v24 = v42;
      if (!v23) {
        break;
      }
      unint64_t v37 = v22 & 0xC000000000000001LL;
      uint64_t v25 = 4LL;
      while (1)
      {
        id v26 = v37
            ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v25 - 4, v22)
            : *(id *)(v22 + 8 * v25);
        uint64_t v27 = v26;
        uint64_t v28 = v25 - 3;
        if (__OFADD__(v25 - 4, 1LL)) {
          break;
        }
        id v29 = [v26 locale];
        static Locale._unconditionallyBridgeFromObjectiveC(_:)();

        uint64_t v30 = Locale.identifier.getter();
        uint64_t v32 = v31;
        (*(void (**)(char *, uint64_t))(v39 + 8))(v9, v40);
        v33._countAndFlagsBits = v30;
        v33._object = v32;
        ToolDatabase.Accessor.addContainerMetadataLocalization(containerId:locale:name:)(v38, v33, v41);
        if (v34)
        {

          swift_bridgeObjectRelease(v32);
          return swift_bridgeObjectRelease(v22);
        }

        swift_bridgeObjectRelease(v32);

        ++v25;
        unsigned int v24 = v42;
        if (v28 == v23) {
          goto LABEL_13;
        }
      }

      __break(1u);
LABEL_17:
      if (v22 < 0) {
        uint64_t v35 = v22;
      }
      else {
        uint64_t v35 = v22 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain(v22);
      uint64_t v23 = _CocoaArrayWrapper.endIndex.getter(v35);
    }

id sub_100007BC0(uint64_t a1, uint64_t a2)
{
  NSString v4 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  id v5 = [(id)swift_getObjCClassFromMetadata(v2) bundleWithIdentifier:v4];

  return v5;
}

uint64_t variable initialization expression of ToolKitHelper.ContentPropertyPossibleValuesDefinition.contentItemClass()
{
  return 0LL;
}

uint64_t type metadata accessor for ContainerIndexer()
{
  return objc_opt_self(&OBJC_CLASS____TtC24BackgroundShortcutRunner16ContainerIndexer);
}

id sub_100007C48(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    NSString v4 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(a2);
  }

  else
  {
    NSString v4 = 0LL;
  }

  id v5 = [v2 initWithBundleIdentifier:v4];

  return v5;
}

id sub_100007CA8(uint64_t a1, uint64_t a2, char a3)
{
  NSString v6 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  id v12 = 0LL;
  id v7 = [v3 initWithBundleIdentifier:v6 allowPlaceholder:a3 & 1 error:&v12];

  id v8 = v12;
  if (v7)
  {
    id v9 = v12;
  }

  else
  {
    id v10 = v12;
    _convertNSErrorToError(_:)(v8);

    swift_willThrow();
  }

  return v7;
}

id sub_100007D80(uint64_t a1, uint64_t a2)
{
  NSString v4 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  id v10 = 0LL;
  id v5 = [v2 initWithBundleIdentifier:v4 error:&v10];

  id v6 = v10;
  if (v5)
  {
    id v7 = v10;
  }

  else
  {
    id v8 = v10;
    _convertNSErrorToError(_:)(v6);

    swift_willThrow();
  }

  return v5;
}

id sub_100007E48( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  id v9 = v8;
  NSString v15 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  if (!a4)
  {
    NSString v16 = 0LL;
    if (a6) {
      goto LABEL_3;
    }
LABEL_5:
    NSString v17 = 0LL;
    goto LABEL_6;
  }

  NSString v16 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a4);
  if (!a6) {
    goto LABEL_5;
  }
LABEL_3:
  NSString v17 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a6);
LABEL_6:
  Class isa = Locale._bridgeToObjectiveC()().super.isa;
  URL._bridgeToObjectiveC()(v19);
  uint64_t v21 = v20;
  id v22 = [v9 initWithKey:v15 defaultValue:v16 table:v17 locale:isa bundleURL:v20];

  uint64_t v23 = type metadata accessor for URL(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v23 - 8) + 8LL))(a8, v23);
  uint64_t v24 = type metadata accessor for Locale(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v24 - 8) + 8LL))(a7, v24);
  return v22;
}

uint64_t sub_100007F88(uint64_t a1, id *a2)
{
  return sub_100008BB4(a1, a2);
}

uint64_t sub_100007F9C(uint64_t a1, id *a2)
{
  return sub_100008C18(a1, a2) & 1;
}

void sub_100007FB4()
{
}

uint64_t sub_100007FD4(uint64_t a1)
{
  return sub_100008394(a1, *v1);
}

Swift::Int sub_100007FEC(uint64_t a1)
{
  return sub_1000083CC(a1, *v1);
}

void sub_100008004()
{
}

void sub_100008024(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = v3;
}

void sub_100008048(uint64_t *a1, uint64_t *a2)
{
}

uint64_t sub_100008054(uint64_t *a1, uint64_t *a2)
{
  return sub_100008B34(*a1, *a2) & 1;
}

uint64_t sub_100008078(uint64_t a1)
{
  uint64_t v3 = v2;
  sub_100008984( (unint64_t *)&unk_100069B40,  (uint64_t (*)(uint64_t))type metadata accessor for WFMeasurementUnitType,  (uint64_t)&unk_100059518);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v3, v4, &protocol witness table for String);
}

uint64_t sub_1000080FC@<X0>(void *a1@<X8>)
{
  NSString v2 = String._bridgeToObjectiveC()();
  uint64_t result = sub_100008D58();
  *a1 = v2;
  return result;
}

uint64_t sub_10000813C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = j___sSS10FoundationE36_unconditionallyBridgeFromObjectiveCySSSo8NSStringCSgFZ(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_100008168(uint64_t a1)
{
  uint64_t v3 = v2;
  sub_100008984( &qword_100069B50,  (uint64_t (*)(uint64_t))type metadata accessor for LNPlatformName,  (uint64_t)&unk_1000593A4);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v3, v4, &protocol witness table for String);
}

uint64_t sub_1000081EC(uint64_t a1)
{
  uint64_t v3 = v2;
  sub_100008984( (unint64_t *)&unk_100069B60,  (uint64_t (*)(uint64_t))type metadata accessor for WFExecutionPlatform,  (uint64_t)&unk_10005923C);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v3, v4, &protocol witness table for String);
}

uint64_t sub_100008270(void *a1)
{
  id v2 = [a1 supportedAppIdentifiers];

  if (!v2) {
    return 0LL;
  }
  uint64_t v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v2, &type metadata for String);

  return v3;
}

uint64_t sub_1000082D0(void *a1)
{
  id v1 = [a1 infoDictionary];
  if (!v1) {
    return 0LL;
  }
  id v2 = v1;
  uint64_t v3 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( v1,  &type metadata for String,  (char *)&type metadata for Any + 8,  &protocol witness table for String);

  return v3;
}

uint64_t sub_100008338(void *a1, SEL *a2)
{
  id v2 = [a1 *a2];
  if (!v2) {
    return 0LL;
  }
  uint64_t v3 = v2;
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v4;
}

uint64_t sub_100008394(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = sub_100008D7C(a1, a2);
  uint64_t v5 = v4;
  String.hash(into:)(v2, v3, v4);
  return swift_bridgeObjectRelease(v5);
}

Swift::Int sub_1000083CC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = sub_100008D7C(a1, a2);
  uint64_t v5 = v4;
  Hasher.init(_seed:)(v8, v2);
  String.hash(into:)(v8, v3, v5);
  Swift::Int v6 = Hasher._finalize()();
  swift_bridgeObjectRelease(v5);
  return v6;
}

void sub_100008434(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
}

uint64_t sub_10000844C(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContext2((char *)a1 + (int)result, -(result >> 32), 0LL, 0LL);
    *a1 = result;
  }

  return result;
}

uint64_t sub_10000848C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(*(void *)(a4 - 8) + 56LL))();
}

uint64_t sub_100008498(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000844C(&qword_100069A80);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000084E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(void *)(a3 - 8) + 48LL))();
}

unint64_t sub_1000084EC()
{
  unint64_t result = qword_100069A90;
  if (!qword_100069A90)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000595F8, &type metadata for ContainerIndexer.ContainerIndexerError);
    atomic_store(result, (unint64_t *)&qword_100069A90);
  }

  return result;
}

uint64_t sub_100008528()
{
  return sub_100006BBC(v0, v1, v2, v3, v4, v5);
}

unint64_t sub_100008540()
{
  unint64_t result = qword_100069AA0;
  if (!qword_100069AA0)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___NSBundle);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_100069AA0);
  }

  return result;
}

void sub_10000857C(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = sub_10000844C(a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8LL))(a1, v3);
  sub_100008D60();
}

unint64_t sub_1000085B4()
{
  unint64_t result = qword_100069AB8;
  if (!qword_100069AB8)
  {
    unint64_t result = swift_getWitnessTable(&unk_100059974, &type metadata for ToolKitIndexer.Error);
    atomic_store(result, (unint64_t *)&qword_100069AB8);
  }

  return result;
}

void *sub_1000085F0(void *a1)
{
  uint64_t v2 = a1[3];
  uint64_t v3 = a1[5];
  uint64_t v4 = a1[7];
  swift_bridgeObjectRetain(a1[1]);
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  return a1;
}

uint64_t sub_100008644()
{
  return sub_100007580(v0, v1, v2, v3, v4, v5);
}

void *sub_10000865C(void *a1)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[5];
  swift_bridgeObjectRelease(a1[7]);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v2);
  return a1;
}

uint64_t sub_1000086B0()
{
  return sub_1000070DC(v0, v1, v2, v3, v4, v5);
}

uint64_t sub_1000086C8@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return sub_1000078BC(a1, *(void *)(v2 + 16), *(void **)(v2 + 24), *(void *)(v2 + 32), a2);
}

uint64_t sub_1000086E4()
{
  return sub_1000064CC(v1, v2, v3, v4, v5, *(void **)(v0 + 48), v6);
}

uint64_t sub_100008700@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return sub_100005844(a1, v2[2], v2[3], v2[4], a2);
}

void type metadata accessor for os_unfair_lock_s(uint64_t a1)
{
}

void type metadata accessor for WFMeasurementUnitType(uint64_t a1)
{
}

_BYTE *initializeBufferWithCopyOfBuffer for ContainerIndexer.ContainerIndexerError(_BYTE *result, _BYTE *a2)
{
  *unint64_t result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for ContainerIndexer.ContainerIndexerError( unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }

  if (a2 >= 0xFF)
  {
    if (a2 + 1 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 1) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }

    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }

    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }

    int v5 = (*a1 | (v4 << 8)) - 2;
    return (v5 + 1);
  }

uint64_t storeEnumTagSinglePayload for ContainerIndexer.ContainerIndexerError( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_100008828 + 4 * byte_1000590C5[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_10000885C + 4 * byte_1000590C0[v4]))();
}

uint64_t sub_10000885C(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100008864(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x10000886CLL);
  }
  return result;
}

uint64_t sub_100008878(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x100008880LL);
  }
  *(_BYTE *)unint64_t result = a2 + 1;
  return result;
}

uint64_t sub_100008884(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10000888C(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100008898(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *sub_1000088A4(_BYTE *result, char a2)
{
  *unint64_t result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for ContainerIndexer.ContainerIndexerError()
{
  return &type metadata for ContainerIndexer.ContainerIndexerError;
}

void type metadata accessor for LNPlatformName(uint64_t a1)
{
}

void type metadata accessor for WFExecutionPlatform(uint64_t a1)
{
}

void sub_1000088E8(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  if (!*a2)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata(0LL, a3);
    if (!v5) {
      atomic_store(ForeignTypeMetadata, a2);
    }
  }

void sub_10000892C()
{
}

void sub_100008958()
{
}

void sub_100008984(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  if (!*a1)
  {
    uint64_t v5 = a2(255LL);
    atomic_store(swift_getWitnessTable(a3, v5), a1);
  }

  sub_100008D60();
}

void sub_1000089C0()
{
}

void sub_1000089EC()
{
}

void sub_100008A18()
{
}

unint64_t sub_100008A48()
{
  unint64_t result = qword_100069B10;
  if (!qword_100069B10)
  {
    unint64_t result = swift_getWitnessTable(&unk_100059490, &type metadata for ContainerIndexer.ContainerIndexerError);
    atomic_store(result, (unint64_t *)&qword_100069B10);
  }

  return result;
}

void sub_100008A84()
{
}

void sub_100008AB0()
{
}

void sub_100008ADC()
{
}

void sub_100008B08()
{
}

uint64_t sub_100008B34(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  uint64_t v5 = v4;
  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(a2);
  if (v3 == v6 && v5 == v7) {
    char v9 = 1;
  }
  else {
    char v9 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v5, v6, v7, 0LL);
  }
  swift_bridgeObjectRelease(v5);
  sub_100008D58();
  return v9 & 1;
}

uint64_t sub_100008BB4(uint64_t a1, id *a2)
{
  uint64_t v6 = 0LL;
  uint64_t v7 = 0LL;
  uint64_t result = static String._forceBridgeFromObjectiveC(_:result:)(v3, &v6);
  if (v7)
  {
    NSString v5 = String._bridgeToObjectiveC()();
    uint64_t result = sub_100008D58();
  }

  else
  {
    NSString v5 = 0LL;
  }

  *int v2 = v5;
  return result;
}

uint64_t sub_100008C18(uint64_t a1, id *a2)
{
  uint64_t v8 = 0LL;
  uint64_t v9 = 0LL;
  char v4 = static String._conditionallyBridgeFromObjectiveC(_:result:)(v3, &v8);
  uint64_t v5 = v9;
  if (v9)
  {
    NSString v6 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v5);
  }

  else
  {
    NSString v6 = 0LL;
  }

  *int v2 = v6;
  return v4 & 1;
}

void sub_100008C88(uint64_t a1)
{
  uint64_t v2 = v1;
  String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v2);
  sub_100008D60();
}

void sub_100008CB8(uint64_t a1, void (*a2)(uint64_t))
{
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  a2(v3);
  sub_100008D58();
  sub_100008D60();
}

  ;
}

uint64_t sub_100008D1C()
{
  return v0;
}

uint64_t sub_100008D30()
{
  return sub_1000063E8(v0);
}

void sub_100008D48(uint64_t a1, id *a2)
{
}

uint64_t sub_100008D58()
{
  return swift_bridgeObjectRelease(v0);
}

  ;
}

uint64_t sub_100008D68()
{
  return sub_100013368();
}

uint64_t sub_100008D74()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)(v0);
}

uint64_t sub_100008D7C(uint64_t a1, uint64_t a2)
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)(a2);
}

  ;
}

void sub_100008D94(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _OWORD *a4@<X8>)
{
  if (*(void *)(a3 + 16) && (uint64_t v6 = sub_100051B7C(a1, a2), (v7 & 1) != 0))
  {
    sub_100009A44(*(void *)(a3 + 56) + 32 * v6, (uint64_t)a4);
  }

  else
  {
    *a4 = 0u;
    a4[1] = 0u;
    sub_100008D60();
  }

uint64_t sub_100008DE0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 16) && (uint64_t v4 = sub_100051B7C(a1, a2), (v5 & 1) != 0)) {
    return swift_bridgeObjectRetain(*(void *)(*(void *)(a3 + 56) + 8 * v4));
  }
  else {
    return 0LL;
  }
}

void sub_100008E20()
{
  uint64_t v0 = type metadata accessor for DaemonEnumerator();
  uint64_t v1 = swift_allocObject(v0, 24LL, 7LL);
  *(void *)(v1 + 16) = Dictionary.init(dictionaryLiteral:)( &_swiftEmptyArrayStorage,  &type metadata for String,  &type metadata for DaemonRecord,  &protocol witness table for String);
  qword_10006BC70 = v1;
  sub_100008D60();
}

void sub_100008E78()
{
  uint64_t v2 = v0;
  sub_100009920();
  id v3 = sub_1000095DC(0xD000000000000021LL, 0x8000000100059E20LL);
  if (!v3)
  {
    unint64_t v7 = sub_10000995C();
    uint64_t v8 = sub_100009BE0((uint64_t)&type metadata for DaemonEnumerator.EnumeratorError, v7);
    *uint64_t v9 = 0;
    swift_willThrow(v8, v9, v10, v11, v12, v13, v14);
    return;
  }

  uint64_t v4 = v3;
  strcpy((char *)&v113, "LaunchDaemons");
  HIWORD(v113) = -4864;
  uint64_t v5 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(&v113, &type metadata for String);
  id v6 = objc_msgSend(v4, "__swift_objectForKeyedSubscript:", v5);
  swift_unknownObjectRelease(v5);
  if (v6)
  {
    _bridgeAnyObjectToAny(_:)(v6);
    swift_unknownObjectRelease(v6);
  }

  else
  {
    __int128 v113 = 0u;
    v114[0] = 0u;
  }

  sub_100009A80((uint64_t)&v113, (uint64_t)&v115, &qword_10006A420);
  if (!v117[1])
  {
    sub_100009998((uint64_t)&v115);
    goto LABEL_72;
  }

  uint64_t v15 = sub_10000844C(&qword_100069CA0);
  if ((sub_100009C04((uint64_t)&v111, (uint64_t)&v115, (uint64_t)&type metadata for Any + 8, v15) & 1) == 0)
  {
LABEL_72:
    unint64_t v84 = sub_10000995C();
    uint64_t v85 = sub_100009BE0((uint64_t)&type metadata for DaemonEnumerator.EnumeratorError, v84);
    _BYTE *v86 = 0;
LABEL_73:
    swift_willThrow(v85, v86, v87, v88, v89, v90, v91);

    return;
  }

  uint64_t v16 = (uint64_t)v111;
  id v17 = [(id)objc_opt_self(WFDevice) currentDevice];
  uint64_t v100 = sub_1000099D8(v17);
  if (!v18)
  {
    swift_bridgeObjectRelease(v16);
    unint64_t v92 = sub_10000995C();
    uint64_t v85 = sub_100009BE0((uint64_t)&type metadata for DaemonEnumerator.EnumeratorError, v92);
    _BYTE *v86 = 1;
    goto LABEL_73;
  }

  uint64_t v19 = v18;
  id v94 = v4;
  uint64_t v95 = v1;
  uint64_t v118 = 0LL;
  uint64_t v20 = v16 + 64;
  uint64_t v21 = 1LL << *(_BYTE *)(v16 + 32);
  uint64_t v22 = -1LL;
  if (v21 < 64) {
    uint64_t v22 = ~(-1LL << v21);
  }
  unint64_t v23 = v22 & *(void *)(v16 + 64);
  uint64_t v24 = v117;
  int64_t v105 = (unint64_t)(v21 + 63) >> 6;
  uint64_t v106 = v117;
  uint64_t v93 = v105 - 1;
  v109 = v114;
  uint64_t v110 = (char *)&type metadata for Any + 8;
  uint64_t v103 = (void *)(v2 + 16);
  uint64_t v104 = 0x8000000100059E50LL;
  uint64_t v97 = v16;
  uint64_t v98 = v15;
  uint64_t v99 = v18;
  uint64_t v96 = v16 + 64;
  while (v23)
  {
    unint64_t v25 = __clz(__rbit64(v23));
    v23 &= v23 - 1;
    unint64_t v26 = v25 | (v118 << 6);
LABEL_14:
    uint64_t v27 = *(void *)(v16 + 56);
    uint64_t v28 = (void *)(*(void *)(v16 + 48) + 16 * v26);
    uint64_t v29 = v28[1];
    *(void *)&__int128 v113 = *v28;
    *((void *)&v113 + 1) = v29;
    sub_100009A44(v27 + 32 * v26, (uint64_t)v109);
    sub_100009BEC();
LABEL_33:
    sub_100009A80((uint64_t)&v113, (uint64_t)&v115, &qword_100069CA8);
    uint64_t v33 = v116;
    if (!v116)
    {
      swift_bridgeObjectRelease(v19);

      swift_release(v16);
      return;
    }

    uint64_t v34 = v115;
    sub_100009AC4(v24, &v113);
    if (sub_100009C04((uint64_t)&v111, (uint64_t)&v113, (uint64_t)v110, v15))
    {
      uint64_t v35 = (uint64_t)v111;
      uint64_t v107 = v34;
      if (v111[2] && (uint64_t v36 = sub_100051B7C(0x6C6562614CLL, 0xE500000000000000LL), (v37 & 1) != 0))
      {
        sub_100009BF4( v36,  v37,  v38,  v39,  v40,  v41,  v42,  v43,  v93,  (uint64_t)v94,  v95,  v96,  v97,  v98,  v99,  v100,  v101,  v102,  (uint64_t)v103,  v104,  v105,  (uint64_t)v106,  v34,  v108,  (uint64_t)v109,  (uint64_t)v110,  (uint64_t)v111,  v112,  v113);
        int v44 = sub_100009C04( (uint64_t)&v111,  (uint64_t)&v113,  (uint64_t)&type metadata for Any + 8,  (uint64_t)&type metadata for String);
        uint64_t v45 = (uint64_t)v111;
        if (!v44) {
          uint64_t v45 = 0LL;
        }
        uint64_t v108 = v45;
        if (v44) {
          uint64_t v46 = v112;
        }
        else {
          uint64_t v46 = 0LL;
        }
      }

      else
      {
        uint64_t v108 = 0LL;
        uint64_t v46 = 0LL;
      }

      if (*(void *)(v35 + 16) && (uint64_t v47 = sub_100051B7C(0xD000000000000010LL, v104), (v48 & 1) != 0))
      {
        sub_100009BF4( v47,  v48,  v49,  v50,  v51,  v52,  v53,  v54,  v93,  (uint64_t)v94,  v95,  v96,  v97,  v98,  v99,  v100,  v101,  v102,  (uint64_t)v103,  v104,  v105,  (uint64_t)v106,  v107,  v108,  (uint64_t)v109,  (uint64_t)v110,  (uint64_t)v111,  v112,  v113);
      }

      else
      {
        __int128 v113 = 0u;
        v114[0] = 0u;
      }

      sub_100008D58();
      if (*((void *)&v114[0] + 1))
      {
        uint64_t v55 = sub_10000844C(&qword_100069CB8);
        else {
          uint64_t v56 = 0LL;
        }
        if (!v46) {
          goto LABEL_59;
        }
        if (!v56) {
          goto LABEL_57;
        }
        if (*(void *)(v56 + 16))
        {
          uint64_t v57 = *(void *)(v56 + 40);
          swift_bridgeObjectRetain(v57);
          sub_100008D58();
          NSString v58 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease(v57);
          id v59 = [v58 lastPathComponent];

          uint64_t v60 = static String._unconditionallyBridgeFromObjectiveC(_:)(v59);
          uint64_t v101 = v61;
          uint64_t v102 = v60;

          uint64_t v62 = v108;
        }

        else
        {
          sub_100008D58();
          sub_100009BEC();
          uint64_t v62 = v108;
          uint64_t v101 = v46;
          uint64_t v102 = v108;
        }

        swift_beginAccess(v103, &v113, 33LL, 0LL);
        sub_100009BEC();
        swift_bridgeObjectRetain(v19);
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v103);
        uint64_t v111 = (void *)*v103;
        uint64_t v65 = (uint64_t)v111;
        *uint64_t v103 = 0x8000000000000000LL;
        uint64_t v66 = sub_100051B7C(v62, v46);
        uint64_t v68 = *(void *)(v65 + 16);
        BOOL v69 = (v67 & 1) == 0;
        Swift::Int v70 = v68 + v69;
        if (__OFADD__(v68, v69)) {
          goto LABEL_77;
        }
        unint64_t v71 = v66;
        char v72 = v67;
        sub_10000844C(&qword_100069CB0);
        if (_NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v70))
        {
          uint64_t v73 = sub_100051B7C(v108, v46);
          if ((v72 & 1) != (v74 & 1)) {
            goto LABEL_80;
          }
          unint64_t v71 = v73;
        }

        uint64_t v75 = v111;
        if ((v72 & 1) != 0)
        {
          uint64_t v76 = (uint64_t *)(v111[7] + (v71 << 6));
          uint64_t v77 = v76[3];
          uint64_t v78 = v76[5];
          swift_bridgeObjectRelease(v76[7]);
          swift_bridgeObjectRelease(v78);
          swift_bridgeObjectRelease(v77);
          sub_100008D58();
          *uint64_t v76 = v108;
          v76[1] = v46;
          v76[2] = v102;
          v76[3] = v101;
          v76[4] = v107;
          v76[5] = v33;
          uint64_t v19 = v99;
          v76[6] = v100;
          v76[7] = v99;
        }

        else
        {
          v111[(v71 >> 6) + 8] |= 1LL << v71;
          uint64_t v79 = (uint64_t *)(v75[6] + 16 * v71);
          uint64_t *v79 = v108;
          v79[1] = v46;
          Swift::String v80 = (uint64_t *)(v75[7] + (v71 << 6));
          *Swift::String v80 = v108;
          v80[1] = v46;
          v80[2] = v102;
          v80[3] = v101;
          v80[4] = v107;
          v80[5] = v33;
          uint64_t v19 = v99;
          v80[6] = v100;
          v80[7] = v99;
          uint64_t v81 = v75[2];
          BOOL v82 = __OFADD__(v81, 1LL);
          uint64_t v83 = v81 + 1;
          if (v82) {
            goto LABEL_78;
          }
          v75[2] = v83;
          sub_100009BEC();
        }

        uint64_t v20 = v96;
        uint64_t v16 = v97;
        *uint64_t v103 = v75;
        swift_bridgeObjectRelease(v46);
        sub_100008D58();
        swift_endAccess(&v113);
        uint64_t v15 = v98;
        uint64_t v24 = v106;
      }

      else
      {
        sub_100009998((uint64_t)&v113);
        if (v46)
        {
LABEL_57:
          swift_bridgeObjectRelease(v46);
          uint64_t v63 = v33;
          goto LABEL_60;
        }

        uint64_t v56 = 0LL;
LABEL_59:
        swift_bridgeObjectRelease(v33);
        uint64_t v63 = v56;
LABEL_60:
        swift_bridgeObjectRelease(v63);
        uint64_t v24 = v106;
      }
    }

    else
    {
      swift_bridgeObjectRelease(v33);
    }
  }

  int64_t v30 = v118 + 1;
  if (__OFADD__(v118, 1LL))
  {
    __break(1u);
LABEL_77:
    __break(1u);
LABEL_78:
    __break(1u);
    goto LABEL_79;
  }

  if (v30 >= v105)
  {
LABEL_32:
    unint64_t v23 = 0LL;
    memset(v114, 0, sizeof(v114));
    __int128 v113 = 0u;
    goto LABEL_33;
  }

  unint64_t v31 = *(void *)(v20 + 8 * v30);
  if (v31)
  {
LABEL_18:
    unint64_t v23 = (v31 - 1) & v31;
    unint64_t v26 = __clz(__rbit64(v31)) + (v30 << 6);
    uint64_t v118 = v30;
    goto LABEL_14;
  }

  int64_t v32 = v118 + 2;
  ++v118;
  if (v30 + 1 >= v105) {
    goto LABEL_32;
  }
  unint64_t v31 = *(void *)(v20 + 8 * v32);
  if (v31) {
    goto LABEL_21;
  }
  uint64_t v118 = v30 + 1;
  if (v30 + 2 >= v105) {
    goto LABEL_32;
  }
  unint64_t v31 = *(void *)(v20 + 8 * (v30 + 2));
  if (v31)
  {
    v30 += 2LL;
    goto LABEL_18;
  }

  int64_t v32 = v30 + 3;
  uint64_t v118 = v30 + 2;
  if (v30 + 3 >= v105) {
    goto LABEL_32;
  }
  unint64_t v31 = *(void *)(v20 + 8 * v32);
  if (v31)
  {
LABEL_21:
    int64_t v30 = v32;
    goto LABEL_18;
  }

  while (1)
  {
    int64_t v30 = v32 + 1;
    if (__OFADD__(v32, 1LL)) {
      break;
    }
    if (v30 >= v105)
    {
      uint64_t v118 = v93;
      goto LABEL_32;
    }

    unint64_t v31 = *(void *)(v20 + 8 * v30);
    ++v32;
    if (v31) {
      goto LABEL_18;
    }
  }

LABEL_79:
  __break(1u);
LABEL_80:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
}

    unint64_t v26 = v4998;
    uint64_t v13 = *(void *)(v4998 + 1448);
    uint64_t v104 = *(void *)(v4998 + 1416);
    sub_1000132B8();
    swift_isUniquelyReferenced_nonNull_native(v122);
    sub_100045B84();
    *(void *)(v4998 + 392) = v122;
    if (*(void *)(v122 + 24) > *(void *)(v122 + 16))
    {
      if ((v116 & 1) == 0) {
        sub_10003AE5C();
      }
      goto LABEL_90;
    }

    if ((_DWORD)v116) {
      sub_10003A578();
    }
    else {
      sub_10003B54C();
    }
    sub_100044634(*(void *)(*(void *)(v4998 + 392) + 40LL), *(void *)(v4998 + 1416));
    sub_100043388();
    if ((v138 & 1) == 0)
    {
LABEL_90:
      sub_1000438B8();
      v142 = *(void *)(v122 + 16);
      uint64_t v35 = __OFADD__(v142, 1LL);
      v143 = v142 + 1;
      if (v35)
      {
        __break(1u);
LABEL_255:
        __break(1u);
LABEL_256:
        __break(1u);
LABEL_257:
        __break(1u);
LABEL_258:
        __break(1u);
        goto LABEL_259;
      }

      uint64_t v116 = *(void *)(v123 + 1424);
      *(void *)(v122 + 16) = v143;
      sub_100045D08();
      uint64_t v125 = *(void *)(v116 + 8);
LABEL_92:
      sub_100046FEC();
      sub_100047220();
      if (v111) {
        goto LABEL_94;
      }
      continue;
    }

    break;
  }

  sub_100047010();
  while (1)
  {
    sub_10004450C();
    sub_100040370(&qword_10006A3E8, (uint64_t (*)(uint64_t))&type metadata accessor for TypedValue);
    uint64_t v140 = sub_100044214(v139);
    sub_100043D10(v104, *(uint64_t (**)(uint64_t, uint64_t))(v125 + 8));
    if ((v140 & 1) != 0) {
      break;
    }
    uint64_t v102 = (_UNKNOWN **)(((unint64_t)v102 + 1) & v4998);
    sub_100043600();
    if ((v141 & 1) == 0) {
      goto LABEL_90;
    }
  }

  sub_1000430D0();
}

    uint64_t v28 = v5004;
    uint64_t v15 = *(void *)(v5004 + 1448);
    uint64_t v110 = *(void *)(v5004 + 1416);
    sub_1000132B8();
    swift_isUniquelyReferenced_nonNull_native(v128);
    sub_100045B84();
    *(void *)(v5004 + 392) = v128;
    if (*(void *)(v128 + 24) > *(void *)(v128 + 16))
    {
      if ((v122 & 1) == 0) {
        sub_10003AE5C();
      }
      goto LABEL_90;
    }

    if ((_DWORD)v122) {
      sub_10003A578();
    }
    else {
      sub_10003B54C();
    }
    sub_100044634(*(void *)(*(void *)(v5004 + 392) + 40LL), *(void *)(v5004 + 1416));
    sub_100043388();
    if ((v144 & 1) == 0)
    {
LABEL_90:
      sub_1000438B8();
      v148 = *(void *)(v128 + 16);
      uint64_t v41 = __OFADD__(v148, 1LL);
      v149 = v148 + 1;
      if (v41)
      {
        __break(1u);
LABEL_255:
        __break(1u);
LABEL_256:
        __break(1u);
LABEL_257:
        __break(1u);
LABEL_258:
        __break(1u);
        goto LABEL_259;
      }

      v122 = *(void *)(v129 + 1424);
      *(void *)(v128 + 16) = v149;
      sub_100045D08();
      uint64_t v131 = *(void *)(v122 + 8);
LABEL_92:
      sub_100046FEC();
      sub_100047220();
      if (v117) {
        goto LABEL_94;
      }
      continue;
    }

    break;
  }

  sub_100047010();
  while (1)
  {
    sub_10004450C();
    sub_100040370(&qword_10006A3E8, (uint64_t (*)(uint64_t))&type metadata accessor for TypedValue);
    v146 = sub_100044214(v145);
    sub_100043D10(v110, *(uint64_t (**)(uint64_t, uint64_t))(v131 + 8));
    if ((v146 & 1) != 0) {
      break;
    }
    uint64_t v108 = (_UNKNOWN **)(((unint64_t)v108 + 1) & v5004);
    sub_100043600();
    if ((v147 & 1) == 0) {
      goto LABEL_90;
    }
  }

  sub_1000430D0();
}

id sub_1000095DC(uint64_t a1, uint64_t a2)
{
  id v4 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v2));
  NSString v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  id v6 = [v4 initWithContentsOfFile:v5];

  return v6;
}

uint64_t sub_10000964C()
{
  return swift_deallocClassInstance(v0, 24LL, 7LL);
}

uint64_t type metadata accessor for DaemonEnumerator()
{
  return objc_opt_self(&OBJC_CLASS____TtC24BackgroundShortcutRunner16DaemonEnumerator);
}

uint64_t initializeBufferWithCopyOfBuffer for DaemonRecord(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a1 = *a2;
  uint64_t v3 = v2 + 16;
  swift_retain(v2);
  return v3;
}

uint64_t destroy for DaemonRecord(void *a1)
{
  return swift_bridgeObjectRelease(a1[7]);
}

void *initializeWithCopy for DaemonRecord(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  uint64_t v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  uint64_t v6 = a2[7];
  a1[6] = a2[6];
  a1[7] = v6;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  return a1;
}

void *assignWithCopy for DaemonRecord(void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[2] = a2[2];
  uint64_t v6 = a2[3];
  uint64_t v7 = a1[3];
  a1[3] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  a1[4] = a2[4];
  uint64_t v8 = a2[5];
  uint64_t v9 = a1[5];
  a1[5] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  a1[6] = a2[6];
  uint64_t v10 = a2[7];
  uint64_t v11 = a1[7];
  a1[7] = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  return a1;
}

__n128 initializeWithTake for DaemonRecord(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  __int128 v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

void *assignWithTake for DaemonRecord(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  uint64_t v5 = a1[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease(v5);
  uint64_t v6 = a2[3];
  uint64_t v7 = a1[3];
  a1[2] = a2[2];
  a1[3] = v6;
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = a2[5];
  uint64_t v9 = a1[5];
  a1[4] = a2[4];
  a1[5] = v8;
  swift_bridgeObjectRelease(v9);
  uint64_t v10 = a2[7];
  uint64_t v11 = a1[7];
  a1[6] = a2[6];
  a1[7] = v10;
  swift_bridgeObjectRelease(v11);
  return a1;
}

uint64_t getEnumTagSinglePayload for DaemonRecord(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 64))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }

    else
    {
      unint64_t v2 = *(void *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }

  else
  {
    LODWORD(v2) = -1;
  }

  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DaemonRecord(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 56) = 0LL;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 64) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 64) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for DaemonRecord()
{
  return &type metadata for DaemonRecord;
}

unint64_t sub_100009920()
{
  unint64_t result = qword_100069C90;
  if (!qword_100069C90)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___NSDictionary);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_100069C90);
  }

  return result;
}

unint64_t sub_10000995C()
{
  unint64_t result = qword_100069C98;
  if (!qword_100069C98)
  {
    unint64_t result = swift_getWitnessTable(&unk_100059738, &type metadata for DaemonEnumerator.EnumeratorError);
    atomic_store(result, (unint64_t *)&qword_100069C98);
  }

  return result;
}

uint64_t sub_100009998(uint64_t a1)
{
  uint64_t v2 = sub_10000844C(&qword_10006A420);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_1000099D8(void *a1)
{
  id v2 = [a1 systemBuildNumber];

  if (!v2) {
    return 0LL;
  }
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);

  return v3;
}

uint64_t sub_100009A44(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_100009A80(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_10000844C(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32LL))(a2, a1, v5);
  return a2;
}

_OWORD *sub_100009AC4(_OWORD *a1, _OWORD *a2)
{
  __int128 v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

uint64_t storeEnumTagSinglePayload for DaemonEnumerator.EnumeratorError( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_100009B20 + 4 * byte_100059685[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_100009B54 + 4 * byte_100059680[v4]))();
}

uint64_t sub_100009B54(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100009B5C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x100009B64LL);
  }
  return result;
}

uint64_t sub_100009B70(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x100009B78LL);
  }
  *(_BYTE *)unint64_t result = a2 + 1;
  return result;
}

uint64_t sub_100009B7C(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100009B84(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for DaemonEnumerator.EnumeratorError()
{
  return &type metadata for DaemonEnumerator.EnumeratorError;
}

unint64_t sub_100009BA4()
{
  unint64_t result = qword_100069CC0;
  if (!qword_100069CC0)
  {
    unint64_t result = swift_getWitnessTable(&unk_100059710, &type metadata for DaemonEnumerator.EnumeratorError);
    atomic_store(result, (unint64_t *)&qword_100069CC0);
  }

  return result;
}

uint64_t sub_100009BE0(uint64_t a1, uint64_t a2)
{
  return swift_allocError(a1, a2, 0LL, 0LL);
}

uint64_t sub_100009BEC()
{
  return swift_bridgeObjectRetain(v0);
}

uint64_t sub_100009BF4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, char a29)
{
  return sub_100009A44(*(void *)(v29 + 56) + 32 * a1, (uint64_t)&a29);
}

uint64_t sub_100009C04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_dynamicCast(a1, a2, a3, a4, 6LL);
}

unint64_t StaticString._asString.getter(unint64_t result, uint64_t a2, char a3)
{
  if ((a3 & 1) == 0)
  {
    if (result) {
      return static String._fromUTF8Repairing(_:)(result);
    }
    __break(1u);
  }

  unint64_t v3 = HIDWORD(result);
  if (HIDWORD(result))
  {
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }

  LODWORD(v3) = WORD1(result);
  if (WORD1(result) > 0x10u) {
    goto LABEL_13;
  }
  if ((result & 0xFFFFFF80) != 0)
  {
LABEL_14:
    int v5 = (result & 0x3F) << 8;
    unsigned int v6 = (v5 | (result >> 6)) + 33217;
    unsigned int v7 = (v5 | (result >> 6) & 0x3F) << 8;
    unsigned int v8 = (((v7 | (result >> 12) & 0x3F) << 8) | (result >> 18)) - 2122219023;
    unsigned int v9 = (v7 | (result >> 12)) + 8487393;
    if ((_DWORD)v3) {
      unsigned int v4 = v8;
    }
    else {
      unsigned int v4 = v9;
    }
    goto LABEL_10;
  }

  if (result <= 0xFF)
  {
    unsigned int v4 = (result + 1);
LABEL_10:
    uint64_t v10 = (v4 + 0xFEFEFEFEFEFEFFLL) & ~(-1LL << (8 * ((4 - (__clz(v4) >> 3)) & 7)));
    unint64_t result = (unint64_t)&v10;
    return static String._fromUTF8Repairing(_:)(result);
  }

  __break(1u);
LABEL_21:
  __break(1u);
  return result;
}

uint64_t *NSBundle._current.unsafeMutableAddressor()
{
  if (qword_1000699B8 != -1) {
    swift_once(&qword_1000699B8, sub_100009D58);
  }
  return &static NSBundle._current;
}

id sub_100009D58()
{
  uint64_t v0 = _s2__CMa();
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v0);
  id result = [(id)objc_opt_self(NSBundle) bundleForClass:ObjCClassFromMetadata];
  static NSBundle._current = (uint64_t)result;
  return result;
}

id static NSBundle._current.getter()
{
  if (qword_1000699B8 != -1) {
    swift_once(&qword_1000699B8, sub_100009D58);
  }
  return (id)static NSBundle._current;
}

uint64_t sub_100009DEC()
{
  return swift_deallocClassInstance(v0, 16LL, 7LL);
}

uint64_t _s2__CMa()
{
  return objc_opt_self(&OBJC_CLASS____TtCFIZvE24BackgroundShortcutRunnerCSo8NSBundle8_currentS0_iU_FT_S0_L_2__);
}

uint64_t sub_100009E1C(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  sub_10000F3A0();
  return swift_task_switch(v4, v5, v6);
}

uint64_t sub_100009E3C()
{
  uint64_t v1 = _s23IndexingPreflightResultV4StepOMa(0LL);
  uint64_t v2 = swift_task_alloc(32LL);
  *(void *)(v0 + 40) = v2;
  *(_OWORD *)(v2 + 16) = *(_OWORD *)(v0 + 24);
  uint64_t v3 = _s23IndexingPreflightResultVMa(0LL);
  uint64_t v4 = (void *)swift_task_alloc(async function pointer to withThrowingTaskGroup<A, B>(of:returning:isolation:body:)[1]);
  *(void *)(v0 + 48) = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_100009EE8;
  return withThrowingTaskGroup<A, B>(of:returning:isolation:body:)( *(void *)(v0 + 16),  v1,  v3,  0LL,  0LL,  &unk_100069D70,  v2,  v1);
}

uint64_t sub_100009EE8()
{
  uint64_t v3 = v0[6];
  uint64_t v4 = *v2;
  *uint64_t v5 = v4;
  v0[7] = v1;
  swift_task_dealloc(v3);
  if (v1)
  {
    sub_10000F3A0();
    return sub_10000F2E4();
  }

  else
  {
    swift_task_dealloc(v0[5]);
    return sub_10000F2DC(*(uint64_t (**)(void))(v4 + 8));
  }

uint64_t sub_100009F44()
{
  return sub_10000F2C4(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_100009F70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[4] = a3;
  v4[5] = a4;
  v4[2] = a1;
  v4[3] = a2;
  uint64_t v5 = sub_10000844C(&qword_100069D78);
  v4[6] = swift_task_alloc((*(void *)(*(void *)(v5 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = _s23IndexingPreflightResultV4StepOMa(0LL);
  v4[7] = v6;
  unint64_t v7 = (*(void *)(*(void *)(v6 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v4[8] = swift_task_alloc(v7);
  void v4[9] = swift_task_alloc(v7);
  uint64_t v8 = sub_10000844C(&qword_100069D80);
  v4[10] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v4[11] = v9;
  v4[12] = swift_task_alloc((*(void *)(v9 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for LaunchServicesSnapshot(0LL);
  v4[13] = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  v4[14] = v11;
  v4[15] = swift_task_alloc((*(void *)(v11 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = _s23IndexingPreflightResultVMa(0LL);
  v4[16] = v12;
  unint64_t v13 = (*(void *)(*(void *)(v12 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v4[17] = swift_task_alloc(v13);
  v4[18] = swift_task_alloc(v13);
  v4[19] = swift_task_alloc(v13);
  uint64_t v14 = type metadata accessor for ToolKitIndexingReason.Changeset(0LL);
  v4[20] = v14;
  uint64_t v15 = *(void *)(v14 - 8);
  v4[21] = v15;
  uint64_t v16 = *(void *)(v15 + 64);
  v4[22] = v16;
  v4[23] = swift_task_alloc((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = sub_10000844C(&qword_100069D88);
  v4[24] = swift_task_alloc((*(void *)(*(void *)(v17 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_10000A0E8, 0LL, 0LL);
}

uint64_t sub_10000A0E8()
{
  uint64_t v2 = v0[23];
  uint64_t v1 = v0[24];
  uint64_t v3 = v0[21];
  uint64_t v4 = v0[22];
  uint64_t v37 = v4;
  uint64_t v5 = v0[20];
  uint64_t v6 = v0[4];
  uint64_t v35 = (void *)v0[5];
  uint64_t v40 = v6;
  unint64_t v7 = (uint64_t *)v0[3];
  uint64_t v8 = type metadata accessor for TaskPriority(0LL);
  sub_10000F48C();
  uint64_t v39 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  sub_10000F538(v2, v6, v39);
  uint64_t v9 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v10 = (v9 + 32) & ~v9;
  uint64_t v11 = swift_allocObject(&unk_1000661F0, v10 + v4, v9 | 7);
  *(void *)(v11 + 16) = 0LL;
  *(void *)(v11 + 24) = 0LL;
  uint64_t v36 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 32);
  sub_10000F538(v11 + v10, v2, v36);
  sub_10000AB8C(v1, (uint64_t)&unk_100069D98, v11);
  sub_10000F608();
  sub_10000848C(v1, 1LL, 1LL, v8);
  uint64_t v12 = (void *)swift_allocObject(&unk_100066218, 40LL, 7LL);
  v12[2] = 0LL;
  v12[3] = 0LL;
  v12[4] = v35;
  id v13 = v35;
  sub_10000F614((uint64_t)v13, (uint64_t)&unk_100069DA8);
  sub_10000F608();
  sub_10000F48C();
  uint64_t v34 = v2;
  uint64_t v14 = v5;
  v39(v34, v40, v5);
  uint64_t v15 = (v9 + 40) & ~v9;
  uint64_t v16 = v9 | 7;
  uint64_t v38 = v15 + v37;
  uint64_t v17 = (void *)swift_allocObject(&unk_100066240, v38, v9 | 7);
  v17[2] = 0LL;
  v17[3] = 0LL;
  v17[4] = v13;
  v36((uint64_t)v17 + v15, v34, v14);
  id v18 = v13;
  sub_10000AB8C(v1, (uint64_t)&unk_100069DB8, (uint64_t)v17);
  sub_10000D8E0(v1, &qword_100069D88);
  sub_10000848C(v1, 1LL, 1LL, v8);
  v39(v34, v40, v14);
  uint64_t v19 = (void *)swift_allocObject(&unk_100066268, v38, v16);
  v19[2] = 0LL;
  v19[3] = 0LL;
  v19[4] = v18;
  v36((uint64_t)v19 + v15, v34, v14);
  sub_10000F614((uint64_t)v18, (uint64_t)&unk_100069DC8);
  sub_10000D8E0(v1, &qword_100069D88);
  uint64_t v20 = *v7;
  uint64_t v21 = static LaunchServicesSnapshot.empty.getter();
  uint64_t v23 = v0[18];
  uint64_t v22 = v0[19];
  uint64_t v24 = v0[15];
  uint64_t v25 = v0[16];
  uint64_t v26 = v0[14];
  uint64_t v41 = v0[7];
  static LinkSnapshot.empty.getter(v21);
  uint64_t v27 = sub_10000844C((uint64_t *)&unk_100069DD0);
  uint64_t v28 = Dictionary.init(dictionaryLiteral:)( &_swiftEmptyArrayStorage,  &type metadata for String,  v27,  &protocol witness table for String);
  uint64_t v29 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v26 + 32);
  v0[25] = v29;
  sub_10000F538(v22, v24, v29);
  *(void *)(v22 + *(int *)(v25 + swift_bridgeObjectRelease(*(void *)(v0 + 24)) = &_swiftEmptySetSingleton;
  *(void *)(v22 + *(int *)(v25 + 28)) = v28;
  sub_10000D930(v22, v23, _s23IndexingPreflightResultVMa);
  uint64_t v30 = sub_10000844C(&qword_100069A88);
  ThrowingTaskGroup.makeAsyncIterator()(v20, v41, v30, &protocol self-conformance witness table for Error);
  v0[26] = sub_10000D858();
  unint64_t v31 = (void *)swift_task_alloc(async function pointer to dispatch thunk of AsyncIteratorProtocol.next()[1]);
  v0[27] = v31;
  *unint64_t v31 = v0;
  v31[1] = sub_10000A4A8;
  uint64_t v32 = sub_10000F62C();
  return dispatch thunk of AsyncIteratorProtocol.next()(v32);
}

uint64_t sub_10000A4A8()
{
  if (v1)
  {
    sub_10000F3AC();
    sub_10000D958(v1, _s23IndexingPreflightResultVMa);
  }

  sub_10000F3A0();
  return sub_10000F2E4();
}

void sub_10000A500()
{
  uint64_t v2 = v0[6];
  uint64_t v1 = v0[7];
  if (sub_1000084E0(v2, 1LL, v1) == 1)
  {
    uint64_t v4 = v0[18];
    uint64_t v3 = v0[19];
    uint64_t v20 = v0[15];
    uint64_t v21 = v0[9];
    uint64_t v22 = v0[8];
    uint64_t v5 = v0[2];
    (*(void (**)(void, void))(v0[11] + 8LL))(v0[12], v0[10]);
    sub_10000D8E0(v2, &qword_100069D78);
    sub_10000D908(v4, v5, _s23IndexingPreflightResultVMa);
    sub_10000D958(v3, _s23IndexingPreflightResultVMa);
    sub_10000F4A0();
    sub_10000F484();
    sub_10000F3FC();
    sub_10000F41C();
    sub_10000F3F4();
    swift_task_dealloc(v20);
    uint64_t v6 = sub_10000F4A8();
    sub_10000F6A4(v6, v7, v8, v9, v10, v11, v12, v13, v20, v21);
    swift_task_dealloc(v22);
    sub_10000F404();
    sub_10000F588();
    sub_10000F5DC();
    __asm { BR              X0 }
  }

  uint64_t v16 = v0[8];
  uint64_t v15 = v0[9];
  uint64_t v17 = sub_10000F674();
  sub_10000D908(v17, v18, _s23IndexingPreflightResultV4StepOMa);
  sub_10000D930(v15, v16, _s23IndexingPreflightResultV4StepOMa);
  uint64_t v19 = (char *)&loc_10000A630 + *((int *)qword_10000A810 + swift_getEnumCaseMultiPayload(v16, v1));
  __asm { BR              X10 }

uint64_t sub_10000A640()
{
  uint64_t v1 = (void (*)(uint64_t))v0[25];
  uint64_t v2 = v0[17];
  uint64_t v3 = v0[18];
  uint64_t v4 = v0[16];
  uint64_t v5 = v0[8];
  uint64_t v6 = v5 + *(int *)(sub_10000844C(&qword_100069DE8) + 48);
  uint64_t v7 = sub_10000F674();
  v1(v7);
  sub_10000F4E4();
  uint64_t v8 = sub_10000F654();
  v9(v8, v6);
  uint64_t v10 = *(int *)(v4 + 24);
  uint64_t v11 = *(void *)(v3 + v10);
  uint64_t v12 = *(void *)(v3 + *(int *)(v4 + 28));
  *(void *)(v2 + v10) = v11;
  *(void *)(v2 + *(int *)(v4 + 28)) = v12;
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRetain(v12);
  uint64_t v13 = v0[17];
  uint64_t v14 = v0[18];
  sub_10000D958(v0[9], _s23IndexingPreflightResultV4StepOMa);
  uint64_t v15 = sub_10000F674();
  sub_10000D958(v15, v16);
  sub_10000D908(v13, v14, _s23IndexingPreflightResultVMa);
  uint64_t v17 = (void *)swift_task_alloc(async function pointer to dispatch thunk of AsyncIteratorProtocol.next()[1]);
  v0[28] = v17;
  *uint64_t v17 = v0;
  v17[1] = sub_10000A820;
  sub_10000F62C();
  sub_10000F5DC();
  return dispatch thunk of AsyncIteratorProtocol.next()();
}

uint64_t sub_10000A820()
{
  if (v1)
  {
    sub_10000F3AC();
    sub_10000D958(v1, _s23IndexingPreflightResultVMa);
  }

  sub_10000F3A0();
  return sub_10000F2E4();
}

uint64_t sub_10000A878()
{
  return sub_10000F308(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_10000A8FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[2] = a1;
  v4[3] = a4;
  uint64_t v5 = type metadata accessor for LinkSnapshot(0LL);
  v4[4] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v4[5] = v6;
  v4[6] = swift_task_alloc((*(void *)(v6 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for LaunchServicesSnapshot(0LL);
  v4[7] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v4[8] = v8;
  uint64_t v9 = swift_task_alloc((*(void *)(v8 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  void v4[9] = v9;
  uint64_t v10 = (void *)swift_task_alloc(dword_10006A55C);
  v4[10] = v10;
  *uint64_t v10 = v4;
  v10[1] = sub_10000A9A4;
  return sub_10001410C(v9);
}

uint64_t sub_10000A9A4()
{
  uint64_t v3 = v0[10];
  uint64_t v4 = *v2;
  *uint64_t v5 = v4;
  v0[11] = v1;
  swift_task_dealloc(v3);
  if (v1)
  {
    sub_10000F3A0();
    return sub_10000F2E4();
  }

  else
  {
    uint64_t v7 = (void *)swift_task_alloc(dword_10006A544);
    v0[12] = (uint64_t)v7;
    *uint64_t v7 = v4;
    v7[1] = sub_10000AA24;
    return sub_100014B20(v0[6]);
  }

uint64_t sub_10000AA24()
{
  uint64_t v3 = *(void *)(v2 + 96);
  *uint64_t v4 = *v1;
  *(void *)(v2 + 104) = v0;
  swift_task_dealloc(v3);
  sub_10000F3A0();
  return sub_10000F2D0();
}

uint64_t sub_10000AA74()
{
  uint64_t v2 = v0[8];
  uint64_t v1 = v0[9];
  uint64_t v4 = v0[6];
  uint64_t v3 = v0[7];
  uint64_t v5 = v0[4];
  uint64_t v6 = v0[5];
  uint64_t v7 = v0[2];
  uint64_t v8 = v7 + *(int *)(sub_10000844C(&qword_100069DE8) + 48);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 32))(v7, v1, v3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 32))(v8, v4, v5);
  uint64_t v9 = _s23IndexingPreflightResultV4StepOMa(0LL);
  swift_storeEnumTagMultiPayload(v7, v9, 0LL);
  sub_10000F404();
  sub_10000F4A0();
  uint64_t v10 = (uint64_t (*)(void))sub_10000F588();
  return sub_10000F2DC(v10);
}

uint64_t sub_10000AB1C()
{
  return sub_10000F2DC(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_10000AB4C()
{
  return sub_10000F2DC(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_10000AB8C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = sub_10000844C(&qword_100069D88);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v25[-1] - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_10000E61C(a1, (uint64_t)v10);
  uint64_t v11 = type metadata accessor for TaskPriority(0LL);
  if (sub_1000084E0((uint64_t)v10, 1LL, v11) == 1)
  {
    sub_10000D8E0((uint64_t)v10, &qword_100069D88);
    uint64_t v12 = 12544LL;
  }

  else
  {
    unsigned __int8 v13 = TaskPriority.rawValue.getter();
    (*(void (**)(char *, uint64_t))(*(void *)(v11 - 8) + 8LL))(v10, v11);
    uint64_t v12 = v13 | 0x3100LL;
  }

  uint64_t v14 = *(void *)(a3 + 16);
  if (v14)
  {
    uint64_t ObjectType = swift_getObjectType(*(void *)(a3 + 16));
    swift_unknownObjectRetain(v14);
    uint64_t v16 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType);
    uint64_t v18 = v17;
    swift_unknownObjectRelease(v14);
  }

  else
  {
    uint64_t v16 = 0LL;
    uint64_t v18 = 0LL;
  }

  uint64_t v19 = *v4;
  uint64_t v20 = _s23IndexingPreflightResultV4StepOMa(0LL);
  uint64_t v21 = (void *)(v18 | v16);
  if (v18 | v16)
  {
    v26[0] = 0LL;
    v26[1] = 0LL;
    uint64_t v21 = v26;
    v26[2] = v16;
    v26[3] = v18;
  }

  v25[0] = 1LL;
  v25[1] = v21;
  v25[2] = v19;
  uint64_t v22 = swift_task_create(v12, v25, v20, a2, a3);
  return swift_release(v22);
}

uint64_t sub_10000AD0C(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  uint64_t v2 = (void *)swift_task_alloc(dword_100069E8C);
  *(void *)(v1 + 24) = v2;
  *uint64_t v2 = v1;
  v2[1] = sub_10000AD58;
  return sub_10000ADCC();
}

uint64_t sub_10000AD58()
{
  if (v0) {
    return sub_10000F2C4(*(uint64_t (**)(void))(v1 + 8));
  }
  sub_10000F3A0();
  return sub_10000F2D0();
}

uint64_t sub_10000AD9C()
{
  uint64_t v0 = sub_10000F5C0();
  swift_storeEnumTagMultiPayload(v0, v1, 3LL);
  uint64_t v2 = (uint64_t (*)(void))sub_10000F588();
  return sub_10000F2C4(v2);
}

uint64_t sub_10000ADCC()
{
  uint64_t v1 = (void *)swift_task_alloc(async function pointer to withThrowingDiscardingTaskGroup<A>(returning:isolation:body:)[1]);
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_10000AE38;
  return withThrowingDiscardingTaskGroup<A>(returning:isolation:body:)();
}

uint64_t sub_10000AE38()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 16LL);
  *(void *)(*(void *)v1 + 24LL) = v0;
  swift_task_dealloc(v2);
  sub_10000F3A0();
  return sub_10000F2D0();
}

uint64_t sub_10000AE90()
{
  uint64_t v0 = (uint64_t (*)(void))sub_10000F588();
  return v0();
}

uint64_t sub_10000AEA0()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10000AEAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(v5 + 16) = a1;
  uint64_t v7 = (void *)swift_task_alloc(dword_100069E04);
  *(void *)(v5 + 24) = v7;
  *uint64_t v7 = v5;
  v7[1] = sub_10000AF04;
  return sub_10000AF8C(a5);
}

uint64_t sub_10000AF04(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 24LL);
  *(void *)(*(void *)v1 + 32LL) = a1;
  swift_task_dealloc(v2);
  sub_10000F3A0();
  return sub_10000F2D0();
}

uint64_t sub_10000AF54()
{
  **(void **)(v0 + 16) = *(void *)(v0 + 32);
  uint64_t v1 = sub_10000F5C0();
  swift_storeEnumTagMultiPayload(v1, v2, 1LL);
  uint64_t v3 = (uint64_t (*)(void))sub_10000F588();
  return sub_10000F2C4(v3);
}

uint64_t sub_10000AF8C(uint64_t a1)
{
  v1[2] = a1;
  uint64_t v2 = type metadata accessor for OSSignpostID(0LL);
  v1[3] = v2;
  uint64_t v3 = *(void *)(v2 - 8);
  v1[4] = v3;
  unint64_t v4 = (*(void *)(v3 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v1[5] = swift_task_alloc(v4);
  v1[6] = swift_task_alloc(v4);
  v1[7] = swift_task_alloc(v4);
  uint64_t v5 = type metadata accessor for OSSignposter(0LL);
  v1[8] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v1[9] = v6;
  unint64_t v7 = (*(void *)(v6 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v1[10] = swift_task_alloc(v7);
  v1[11] = swift_task_alloc(v7);
  v1[12] = swift_task_alloc(v7);
  uint64_t v8 = type metadata accessor for WFLogSignpost(0LL);
  v1[13] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v1[14] = v9;
  unint64_t v10 = (*(void *)(v9 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v1[15] = swift_task_alloc(v10);
  v1[16] = swift_task_alloc(v10);
  uint64_t v11 = type metadata accessor for Logger(0LL);
  v1[17] = v11;
  uint64_t v12 = *(void *)(v11 - 8);
  v1[18] = v12;
  unint64_t v13 = (*(void *)(v12 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v1[19] = swift_task_alloc(v13);
  v1[20] = swift_task_alloc(v13);
  v1[21] = swift_task_alloc(v13);
  uint64_t v14 = type metadata accessor for ToolKitIndexingReason.Changeset(0LL);
  v1[22] = v14;
  uint64_t v15 = *(void *)(v14 - 8);
  v1[23] = v15;
  v1[24] = swift_task_alloc((*(void *)(v15 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_10000B0F0, 0LL, 0LL);
}

uint64_t sub_10000B0F0()
{
  uint64_t v2 = *(void *)(v0 + 184);
  uint64_t v1 = *(void *)(v0 + 192);
  uint64_t v3 = *(void *)(v0 + 176);
  (*(void (**)(uint64_t, void, uint64_t))(v2 + 16))(v1, *(void *)(v0 + 16), v3);
  int v4 = (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 88))(v1, v3);
  if (v4 == enum case for ToolKitIndexingReason.Changeset.partial(_:))
  {
    uint64_t v5 = *(uint64_t **)(v0 + 192);
    (*(void (**)(uint64_t *, void))(*(void *)(v0 + 184) + 96LL))(v5, *(void *)(v0 + 176));
    uint64_t v7 = *v5;
    uint64_t v6 = v5[1];
    swift_bridgeObjectRelease(v5[2]);
    swift_bridgeObjectRelease(v6);
    if (*(void *)(v7 + 16))
    {
      uint64_t v97 = v7;
      uint64_t v8 = sub_10000F568();
      uint64_t v9 = (os_log_s *)Logger.logObject.getter(v8);
      os_log_type_t v10 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v9, v10))
      {
        uint64_t v11 = (uint8_t *)sub_10000F2FC();
        *(_WORD *)uint64_t v11 = 0;
        sub_10000F540((void *)&_mh_execute_header, v9, v10, "Getting actions", v11);
        sub_10000F2F0((uint64_t)v11);
      }

      uint64_t v12 = *(void *)(v0 + 160);
      uint64_t v14 = *(void *)(v0 + 136);
      uint64_t v13 = *(void *)(v0 + 144);

      uint64_t v95 = *(void (**)(uint64_t, uint64_t))(v13 + 8);
      v95(v12, v14);
      uint64_t v15 = sub_10000F620();
      uint64_t v16 = OSSignposter.logHandle.getter(v15);
      uint64_t v17 = OSSignpostID.init(log:)(v16);
      uint64_t v18 = (os_log_s *)OSSignposter.logHandle.getter(v17);
      os_signpost_type_t v19 = static os_signpost_type_t.begin.getter();
      if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
      {
        uint64_t v20 = *(void *)(v0 + 48);
        uint64_t v21 = *(void *)(v0 + 24);
        uint64_t v22 = *(void *)(v0 + 32);
        uint64_t v23 = *(void (**)(uint64_t, void, uint64_t))(v22 + 16);
        v23(v20, *(void *)(v0 + 40), v21);
        uint64_t v24 = (uint8_t *)sub_10000F2FC();
        os_signpost_id_t v25 = sub_10000F64C(v24);
        sub_10000F530( (void *)&_mh_execute_header,  v18,  v19,  v25,  "FetchingActions",  "Fetching actions for a given set of bundles",  v24);
        (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v20, v21);
        sub_10000F2F0((uint64_t)v24);

        uint64_t v26 = v23;
      }

      else
      {
        uint64_t v43 = *(void *)(v0 + 32);

        uint64_t v26 = *(void (**)(void, uint64_t, uint64_t))(v43 + 16);
      }

      uint64_t v44 = *(void *)(v0 + 80);
      uint64_t v45 = *(void *)(v0 + 88);
      uint64_t v47 = *(void *)(v0 + 64);
      uint64_t v46 = *(void *)(v0 + 72);
      uint64_t v48 = *(void *)(v0 + 40);
      uint64_t v50 = *(void *)(v0 + 24);
      uint64_t v49 = *(void *)(v0 + 32);
      v26(*(void *)(v0 + 48), v48, v50);
      uint64_t v51 = sub_10000F694();
      sub_10000F4D8(v51);
      sub_10000F324();
      sub_10000F538(v45, v44, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v46 + 16));
      sub_10000F4B0(v45, (uint64_t)"FetchingActions", 15LL);
      (*(void (**)(uint64_t, uint64_t))(v49 + 8))(v48, v50);
      (*(void (**)(uint64_t, uint64_t))(v46 + 8))(v44, v47);
      id v52 = [(id)objc_opt_self(WFLinkActionProvider) sharedProvider];
      if ((ToolKitIndexingReason.Changeset.isExpensive.getter() & 1) != 0)
      {
        uint64_t v53 = sub_10000F568();
        uint64_t v54 = (os_log_s *)Logger.logObject.getter(v53);
        os_log_type_t v55 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v54, v55))
        {
          uint64_t v56 = (uint8_t *)sub_10000F2FC();
          *(_WORD *)uint64_t v56 = 0;
          sub_10000F540( (void *)&_mh_execute_header,  v54,  v55,  "indexing: the changeset is expensive, filling Link provider in full",  v56);
          sub_10000F2F0((uint64_t)v56);
        }

        uint64_t v57 = *(void *)(v0 + 152);
        uint64_t v58 = *(void *)(v0 + 136);

        v95(v57, v58);
        id v59 = [v52 createAllAvailableActions];
        if (v59)
        {
          uint64_t v60 = v59;
          sub_10000E518(0LL, &qword_100069E08, &OBJC_CLASS___WFAction_ptr);
          sub_10000E550();
          uint64_t v61 = sub_10000F674();
          unint64_t v64 = (void *)static Set._unconditionallyBridgeFromObjectiveC(_:)(v61, v62, v63);
        }

        else
        {
          unint64_t v64 = &_swiftEmptySetSingleton;
        }

        uint64_t v66 = v97;
        swift_bridgeObjectRetain(v97);
        Swift::Int v67 = sub_10000DED8((uint64_t)v64, v97);
        goto LABEL_29;
      }

LABEL_23:
      for (i = &_swiftEmptySetSingleton; ; i = v94)
      {
        uint64_t v66 = v97;
        Swift::Int v67 = sub_10000CF28((uint64_t)i, v97, v52);
LABEL_29:
        sub_10000CAD4(v67);
        int64_t v74 = 0LL;
        uint64_t v75 = v66 + 56;
        uint64_t v76 = -1LL << *(_BYTE *)(v66 + 32);
        if (-v76 < 64) {
          uint64_t v77 = ~(-1LL << -(char)v76);
        }
        else {
          uint64_t v77 = -1LL;
        }
        uint64_t v78 = v77 & *(void *)(v66 + 56);
        int64_t v79 = (unint64_t)(63 - v76) >> 6;
        if (v78) {
          goto LABEL_43;
        }
        while (1)
        {
          if (__OFADD__(v74++, 1LL))
          {
            __break(1u);
            goto LABEL_52;
          }

          if (v74 >= v79) {
            goto LABEL_49;
          }
          uint64_t v78 = *(void *)(v75 + 8 * v74);
          if (!v78) {
            break;
          }
          do
LABEL_43:
            v78 &= v78 - 1;
          while (v78);
        }

        int64_t v81 = v74 + 1;
        if (v74 + 1 >= v79) {
          goto LABEL_49;
        }
        uint64_t v78 = *(void *)(v75 + 8 * v81);
        if (v78) {
          goto LABEL_42;
        }
        int64_t v81 = v74 + 2;
        if (v74 + 2 >= v79) {
          goto LABEL_49;
        }
        uint64_t v78 = *(void *)(v75 + 8 * v81);
        if (v78) {
          goto LABEL_42;
        }
        int64_t v81 = v74 + 3;
        if (v74 + 3 >= v79)
        {
LABEL_49:
          swift_release(v66);

          uint64_t v82 = *(void *)(v0 + 112);
          sub_10000D13C();
          sub_10000F394(*(uint64_t (**)(uint64_t, uint64_t))(v82 + 8));
          goto LABEL_50;
        }

        uint64_t v78 = *(void *)(v75 + 8 * v81);
        if (v78)
        {
LABEL_42:
          int64_t v74 = v81;
          goto LABEL_43;
        }

        while (1)
        {
          int64_t v74 = v81 + 1;
          if (__OFADD__(v81, 1LL)) {
            break;
          }
          if (v74 >= v79) {
            goto LABEL_49;
          }
          uint64_t v78 = *(void *)(v75 + 8 * v74);
          ++v81;
          if (v78) {
            goto LABEL_43;
          }
        }

    uint64_t v9 = (v15 - 1) & v15;
    uint64_t v13 = __clz(__rbit64(v15)) + (v10 << 6);
LABEL_24:
    uint64_t v17 = (uint64_t *)(*(void *)(v4 + 48) + 16 * v13);
    uint64_t v18 = *v17;
    os_signpost_type_t v19 = v17[1];
    Hasher.init(_seed:)(v32, v8[5]);
    swift_bridgeObjectRetain(v19);
    String.hash(into:)(v32, v18, v19);
    id result = Hasher._finalize()();
    uint64_t v20 = -1LL << *((_BYTE *)v8 + 32);
    uint64_t v21 = result & ~v20;
    uint64_t v22 = v21 >> 6;
    if (((-1LL << v21) & ~*(void *)(v11 + 8 * (v21 >> 6))) == 0)
    {
      uint64_t v24 = 0;
      os_signpost_id_t v25 = (unint64_t)(63 - v20) >> 6;
      while (++v22 != v25 || (v24 & 1) == 0)
      {
        uint64_t v26 = v22 == v25;
        if (v22 == v25) {
          uint64_t v22 = 0LL;
        }
        v24 |= v26;
        uint64_t v27 = *(void *)(v11 + 8 * v22);
        if (v27 != -1)
        {
          uint64_t v23 = __clz(__rbit64(~v27)) + (v22 << 6);
          goto LABEL_33;
        }
      }

      __break(1u);
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }

    uint64_t v23 = __clz(__rbit64((-1LL << v21) & ~*(void *)(v11 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0LL;
LABEL_33:
    *(void *)(v11 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v23;
    uint64_t v28 = (void *)(v8[6] + 16 * v23);
    *uint64_t v28 = v18;
    v28[1] = v19;
    ++v8[2];
    if (__OFSUB__(v5--, 1LL)) {
      goto LABEL_38;
    }
    if (!v5) {
      goto LABEL_35;
    }
  }

  uint64_t v16 = v14 + 3;
  if (v16 >= v30) {
    goto LABEL_35;
  }
  uint64_t v15 = a1[v16];
  if (v15)
  {
    os_log_type_t v10 = v16;
    goto LABEL_23;
  }

  while (1)
  {
    os_log_type_t v10 = v16 + 1;
    if (__OFADD__(v16, 1LL)) {
      break;
    }
    if (v10 >= v30) {
      goto LABEL_35;
    }
    uint64_t v15 = a1[v10];
    ++v16;
    if (v15) {
      goto LABEL_23;
    }
  }

    os_log_type_t v10 = (v16 - 1) & v16;
    uint64_t v14 = __clz(__rbit64(v16)) + (v11 << 6);
LABEL_24:
    uint64_t v18 = v9[5];
    os_signpost_type_t v19 = *(id *)(*(void *)(v4 + 48) + 8 * v14);
    id result = NSObject._rawHashValue(seed:)(v18);
    uint64_t v20 = -1LL << *((_BYTE *)v9 + 32);
    uint64_t v21 = result & ~v20;
    uint64_t v22 = v21 >> 6;
    if (((-1LL << v21) & ~*(void *)(v12 + 8 * (v21 >> 6))) == 0)
    {
      uint64_t v24 = 0;
      os_signpost_id_t v25 = (unint64_t)(63 - v20) >> 6;
      while (++v22 != v25 || (v24 & 1) == 0)
      {
        uint64_t v26 = v22 == v25;
        if (v22 == v25) {
          uint64_t v22 = 0LL;
        }
        v24 |= v26;
        uint64_t v27 = *(void *)(v12 + 8 * v22);
        if (v27 != -1)
        {
          uint64_t v23 = __clz(__rbit64(~v27)) + (v22 << 6);
          goto LABEL_33;
        }
      }

      __break(1u);
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }

    uint64_t v23 = __clz(__rbit64((-1LL << v21) & ~*(void *)(v12 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0LL;
LABEL_33:
    *(void *)(v12 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v23;
    *(void *)(v9[6] + 8 * v23) = v19;
    ++v9[2];
    if (__OFSUB__(v5--, 1LL)) {
      goto LABEL_38;
    }
    if (!v5) {
      goto LABEL_35;
    }
  }

  uint64_t v17 = v15 + 3;
  if (v17 >= a2) {
    goto LABEL_35;
  }
  uint64_t v16 = v29[v17];
  if (v16)
  {
    uint64_t v11 = v17;
    goto LABEL_23;
  }

  while (1)
  {
    uint64_t v11 = v17 + 1;
    if (__OFADD__(v17, 1LL)) {
      break;
    }
    if (v11 >= a2) {
      goto LABEL_35;
    }
    uint64_t v16 = v29[v11];
    ++v17;
    if (v16) {
      goto LABEL_23;
    }
  }

  char v72 = v28 + 51;
  v28[232] = 0LL;
  uint64_t v73 = *(void *)(v5211 + 1264);
  int64_t v74 = *(void *)(v5211 + 1144);
  swift_bridgeObjectRelease(v28[213]);
  sub_100008D58();
  sub_100040370(&qword_10006A3F0, (uint64_t (*)(uint64_t))&type metadata accessor for ToolFlag);
  uint64_t v75 = (void *)v5211;
  dispatch thunk of SetAlgebra.init()(v73);
  sub_100043230();
  *(void *)(v5211 + 400) = v76;
  uint64_t v77 = sub_10004601C();
  int64_t v79 = v78;
  *(void *)(v5211 + 1864) = v77;
  *(void *)(v5211 + 1872) = v78;
  sub_100044AC8();
  *(void *)(v5211 + 408) = v80;
  sub_100045FD4(&qword_10006A3F8);
  uint64_t v82 = v81;
  sub_10000844C(&qword_10006A400);
  uint64_t v83 = sub_100045F70();
  uint64_t v84 = dispatch thunk of SetAlgebra.init<A>(_:)(v72, &type metadata accessor for ToolVisibilityFlag, v83, v74, v82);
  v5199 = static ToolVisibilityFlag.allCases.getter(v84);
  v5205 = v79;
  v5152 = v77;
  if (!sub_1000531E4(v5199))
  {
LABEL_50:
    v5166 = v75 + 67;
    id v129 = (void *)v75[72];
    sub_10004515C();
    sub_10000F568();
    unsigned int v130 = sub_100042644((uint64_t)&unk_100066638, 24LL);
    sub_1000465E0(v130);
    uint64_t v131 = sub_100042644((uint64_t)&unk_100066660, 32LL);
    *(void *)(v131 + 16) = sub_100040F24;
    *(void *)(v131 + 24) = v77;
    id v132 = v129;
    sub_100045D98(v77);
    uint64_t v133 = Logger.logObject.getter(v132);
    v5178 = sub_100045C58(v133);
    uint64_t v134 = sub_100042644((uint64_t)&unk_100066688, 17LL);
    *(_BYTE *)(v134 + 16) = 32;
    v5171 = sub_100042644((uint64_t)&unk_1000666B0, 17LL);
    *(_BYTE *)(v5171 + 16) = 8;
    uint64_t v135 = sub_100042644((uint64_t)&unk_1000666D8, 32LL);
    *(void *)(v135 + 16) = sub_1000421D0;
    *(void *)(v135 + 24) = v74;
    uint64_t v136 = sub_100042644((uint64_t)&unk_100066700, 32LL);
    *(void *)(v136 + 16) = sub_100040F3C;
    *(void *)(v136 + 24) = v135;
    uint64_t v137 = sub_100042644((uint64_t)&unk_100066728, 17LL);
    *(_BYTE *)(v137 + 16) = 32;
    v138 = sub_100042644((uint64_t)&unk_100066750, 17LL);
    *(_BYTE *)(v138 + 16) = 8;
    uint64_t v139 = sub_100042644((uint64_t)&unk_100066778, 32LL);
    *(void *)(v139 + 16) = sub_100040F2C;
    *(void *)(v139 + 24) = v131;
    uint64_t v77 = sub_100042644((uint64_t)&unk_1000667A0, 32LL);
    *(void *)(v77 + 16) = sub_100042178;
    *(void *)(v77 + 24) = v139;
    uint64_t v140 = sub_10000844C((uint64_t *)&unk_10006A360);
    v141 = sub_100047388(v140);
    *(_OWORD *)(v141 + 16) = xmmword_100059850;
    *(void *)(v141 + 32) = sub_1000421D8;
    *(void *)(v141 + 40) = v134;
    *(void *)(v141 + 48) = sub_1000421D8;
    *(void *)(v141 + 56) = v5171;
    *(void *)(v141 + 64) = sub_100042184;
    *(void *)(v141 + 72) = v136;
    *(void *)(v141 + 80) = sub_1000421D8;
    *(void *)(v141 + 88) = v137;
    *(void *)(v141 + 96) = sub_1000421D8;
    *(void *)(v141 + 104) = v138;
    *(void *)(v141 + 112) = sub_100042184;
    *(void *)(v141 + 120) = v77;
    sub_100045D00();
    v5191 = v135;
    sub_100043FDC();
    sub_100044AFC();
    LOBYTE(v5194) = v139;
    sub_1000442F4();
    sub_100044EE0();
    v142 = v5171;
    sub_10004486C();
    sub_100043D5C();
    swift_retain(v137);
    sub_100044B34();
    sub_1000446A0();
    sub_1000132B8();
    v143 = v5178;
    if (os_log_type_enabled(v5210, v5178))
    {
      v5149 = *(void *)(v5211 + 1208);
      v5146 = *(void *)(v5211 + 1152);
      v5147 = *(void *)(v5211 + 1144);
      v5179 = *(unint64_t **)(v5211 + 1104);
      v5159 = *(void *)(v5211 + 1088);
      v5161 = *(void *)(v5211 + 1080);
      v144 = *(void **)(v5211 + 576);
      v145 = sub_100044BAC();
      v5156 = sub_10000D524(64LL);
      v5212[0] = v5156;
      *(_WORD *)v145 = 514;
      *(_BYTE *)(v145 + 2) = 32;
      sub_100044EE8();
      *(_BYTE *)(v145 + 3) = 8;
      sub_100043DD0();
      v142 = (uint64_t)v144;
      v146 = sub_1000459D0((uint64_t)[v144 identifier]);
      sub_100047320();
      *(void *)(v5211 + 528) = sub_100044874(v146, v147, v5212);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v5211 + 528, v5166);
      sub_10004316C();
      sub_100043C48();
      sub_100043E18();
      sub_1000435DC();

      *(_BYTE *)(v145 + 12) = 32;
      sub_100043BF8();
      *(_BYTE *)(v145 + 13) = 8;
      sub_100013360();
      sub_100043154(v5205, v5211 + 336);
      uint64_t v82 = v5146;
      sub_10000F538(v5149, v5205, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5146 + 16));
      sub_100040370(&qword_10006A418, (uint64_t (*)(uint64_t))&type metadata accessor for ToolVisibilityFlag);
      v149 = dispatch thunk of CustomStringConvertible.description.getter(v5147, v148);
      sub_100043C00(v5149, *(uint64_t (**)(uint64_t, uint64_t))(v5146 + 8));
      *(void *)(v5211 + 544) = sub_100044874(v149, v150, v5212);
      sub_100045474(v5211 + 544, v5148);
      sub_10004316C();
      sub_10000F69C();
      sub_100045980();
      sub_1000440CC();
      sub_100044304(v5152);
      sub_100043ADC((void *)&_mh_execute_header, v5210, v143, "%s: Visibility flags: %s", (uint8_t *)v145);
      sub_1000442BC(v5156);
      sub_10000F2F0(v5156);
      sub_10000F2F0(v145);

      (*(void (**)(unint64_t *, unint64_t))(v5159 + 8))(v5179, v5161);
    }

    else
    {
      v145 = *(void *)(v5211 + 1088);
      uint64_t v82 = *(void *)(v5211 + 576);
      sub_100044EE8();
      sub_100043DD0();
      sub_100043C48();
      sub_100043E18();
      sub_1000435DC();

      sub_100043BF8();
      sub_100013360();
      sub_10000F69C();
      sub_100045980();
      sub_1000440CC();
      sub_100044304(v5152);
      sub_10004593C();
      sub_10004385C(*(uint64_t (**)(uint64_t, uint64_t))(v145 + 8));
    }

    v151 = (void *)v5211;
    if (*(void *)(v5211 + 1672))
    {
      v152 = sub_100043240();
      sub_100044AD4(v152);
      *(void *)(v5211 + 1888) = sub_1000431DC();
      sub_100042F20();
      sub_100043160();
LABEL_222:
      sub_10004628C();
      sub_100042EB0();
      return;
    }

    [(id)sub_100044BB4() requiresUnlock];
    v255 = sub_1000440B0();
    if (v257)
    {
      v258 = *(void *)(v5211 + 1072);
      v259 = *(void *)(v5211 + 1056);
      v256(v255, enum case for ToolAuthenticationPolicy.requiresAuthenticationOnOriginAndRemote(_:));
      v260 = sub_1000459E0();
      sub_100044390(v260);
      sub_1000447A4( v258,  enum case for RuntimeRequirement.deviceState(_:),  *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v259 + 104));
      sub_100044EF0();
      v261 = sub_1000460A8();
      v151 = (void *)v5211;
      sub_100037F50(v261, v262);
      sub_10004609C();
    }

    else
    {
      v256(v255, enum case for ToolAuthenticationPolicy.none(_:));
    }

    v263 = v151[72];
    v151[54] = &OBJC_PROTOCOL___WFLinkActionProtocol;
    if (sub_100043D04(v263))
    {
      sub_100044604();
      sub_100044F38(v264);
    }

    else
    {
      v278 = objc_opt_self(&OBJC_CLASS___WFHandleIntentAction);
      sub_100043AF8(v278);
      v279 = sub_1000457E0();
      if (v280) {
        v281 = (unsigned int *)&enum case for ToolTypeDefinition.siriIntent(_:);
      }
      else {
        v281 = (unsigned int *)&enum case for ToolTypeDefinition.action(_:);
      }
      sub_100045C98(v279, v281);
    }

    if ([(id)sub_100046F10() isDiscontinued])
    {
      v151 = (void *)v151[159];
      sub_1000441C0();
      sub_100043254();
      sub_100043248();
      sub_100046CD4();
      v282 = objc_opt_self(&OBJC_CLASS___WFLinkAction);
      v283 = sub_100045244(v282);
      v151[248] = v283;
      if (v283)
      {
        sub_100043240();
        v284 = sub_100043C20();
        v151[249] = sub_1000431DC();
        sub_100042F20();
        sub_100043160();
        goto LABEL_222;
      }
    }

    v5155 = (void *)v145;
    v5210 = (os_log_s *)v82;
    if ([(id)v151[72] isResidentCompatible])
    {
      v151 = (void *)v151[159];
      static ToolFlag.isHomeResidentCompatible.getter();
      sub_100043254();
      sub_100043248();
      sub_100046CD4();
    }

    v285 = v151[232];
    v286 = sub_100043EB8();
    uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v286);
    v288 = sub_10004341C(ObjCClassFromMetadata, "unevaluatedResourceObjectsOfClass:");
    uint64_t v28 = &qword_10006A3D0;
    sub_100043C10();
    sub_1000442C4(&qword_10006A3D8);
    v290 = sub_100044A6C(v289);

    sub_1000442FC(v290);
    v5200 = v285;
    sub_1000432F0();
    v291 = sub_10004492C();
    if (v291)
    {
      v292 = v291;
      if (v291 < 1) {
        goto LABEL_269;
      }
      sub_100043EC4();
      sub_1000449F0();
      v145 = enum case for RuntimeRequirement.deviceCapability(_:);
      uint64_t v77 = (uint64_t)sub_100050CD0;
      do
      {
        if ((v290 & 1) != 0) {
          v293 = (uint64_t)sub_1000430AC((uint64_t)v5208 + 8 * v82);
        }
        else {
          v293 = sub_1000445EC(v82);
        }
        v142 = v293;
        v294 = *(void *)(v5211 + 1072);
        ++v82;
        sub_1000448C4();
        sub_100043C08(v294, v145, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5205 + 104));
        sub_1000449A4();
        uint64_t v28 = *(unint64_t **)(*(void *)(v5211 + 400) + 16LL);
        sub_1000453B4((uint64_t)v28);
        sub_100037FF8();
      }

      while (v292 != v82);
    }

    v295 = (void *)v5211;
    v296 = *(void **)(v5211 + 576);
    sub_100044088();
    v297 = sub_10004536C();
    v298 = swift_getObjCClassFromMetadata(v297);
    v299 = sub_10004341C(v298, "unevaluatedResourceObjectsOfClass:");
    v300 = sub_100043D38((uint64_t)v299);

    sub_1000442FC(v300);
    sub_1000476C8();
    *(void *)(v5211 + 2008) = v5200;
    sub_1000432F0();
    v5206 = sub_10004492C();
    if (v5206)
    {
      sub_10004635C();
      if (v184 != v161) {
        goto LABEL_270;
      }
      v5194 = *(void *)(v5211 + 1056);
      v5201 = *(void *)(v5211 + 1072);
      v301 = sub_1000531F0(v5208);
      sub_10004751C(v301);
      v5184 = enum case for RuntimeRequirement.featureFlag(_:);
      do
      {
        if ((v5191 & 1) != 0) {
          v302 = (uint64_t)sub_1000430AC((uint64_t)v5208 + 8 * v142);
        }
        else {
          v302 = sub_1000445EC(v142);
        }
        v300 = v302;
        v303 = (uint64_t *)v295[134];
        v304 = *(void *)(v5211 + 1048);
        sub_100043F10();
        v305 = sub_100045F40();
        v306 = sub_100047174();
        *v303 = v145;
        *(void *)(v5201 + 8) = v77;
        *(void *)(v5201 + 16) = v305;
        *(void *)(v5201 + 24) = v82;
        *(_BYTE *)(v5201 + 32) = v306 & 1;
        v295 = (void *)v5211;
        (*(void (**)(uint64_t *, void, uint64_t))(v5194 + 104))(v303, v5184, v304);
        uint64_t v28 = (unint64_t *)sub_100050CD0;
        sub_100044EF0();
        v307 = sub_100044B04();
        sub_100037F50(v307, v308);
        sub_100044180();
        sub_100037FF8();

        sub_100047138();
      }

      while (!v169);
    }

    v309 = v295[209];
    sub_100044088();
    if (v309)
    {
      sub_100043240();
      sub_100043C20();
      v295[252] = sub_1000431DC();
      sub_100042F20();
      sub_100043160();
      goto LABEL_222;
    }

    sub_100043230();
    if (sub_100043E10())
    {
      v310 = (void *)sub_100043EA0();
    }

    else
    {
      sub_100008D58();
      v310 = &_swiftEmptySetSingleton;
    }

    v5212[9] = (uint64_t)v310;
    sub_100043230();
    if (sub_100043E10())
    {
      v311 = (void *)sub_100043EA0();
    }

    else
    {
      sub_100008D58();
      v311 = &_swiftEmptySetSingleton;
    }

    v312 = sub_100043EA8((uint64_t)v311);
    v313 = &type metadata accessor for WFDeviceIdiomResource;
    v314 = swift_getObjCClassFromMetadata(v312);
    v315 = sub_10004341C(v314, "unevaluatedResourceObjectsOfClass:");
    sub_100043D38((uint64_t)v315);
    sub_100043D6C();
    sub_1000442FC((uint64_t)v28);
    v317 = v316;
    v5154 = v5161;
    swift_bridgeObjectRelease(v28);
    if (sub_100047418())
    {
      uint64_t v82 = *(void *)(v5211 + 992);
      v313 = *(void **)(v5211 + 928);
      LODWORD(v5206) = sub_10005226C((uint64_t)v317);
      uint64_t v77 = 0LL;
      v5185 = enum case for WFDeviceIdiomResource.Requirement.notEqualTo(_:);
      LOBYTE(v5194) = enum case for RuntimePlatform.macintosh(_:);
      while (1)
      {
        v318 = (v5206 & 1) != 0 ? (unint64_t *)sub_1000430AC((uint64_t)v317) : (unint64_t *)sub_100045DA8();
        uint64_t v28 = v318;
        v319 = *(void *)(v5211 + 1000);
        v320 = *(void *)(v5211 + 984);
        WFDeviceIdiomResource.requirement.getter();
        (*(void (**)(uint64_t, uint64_t))(v82 + 88))(v319, v320);
        sub_10004707C();
        if (v169) {
          break;
        }
        v323 = *(void *)(v5211 + 1000);
        v300 = *(void *)(v5211 + 984);
        if (v321 == v5185)
        {
          sub_100043C00(*(void *)(v5211 + 1000), *(uint64_t (**)(uint64_t, uint64_t))(v82 + 96));
          sub_1000432D0();
          if (!(!v169 & v206)) {
            __asm { BR              X9 }
          }

          goto LABEL_232;
        }

        sub_100043C00(v323, *(uint64_t (**)(uint64_t, uint64_t))(v82 + 8));
        sub_1000462C0();
        if (v169) {
          goto LABEL_176;
        }
      }

      sub_100043184(*(uint64_t (**)(uint64_t))(v82 + 96));
      sub_1000432D0();
      if (!(!v169 & v206)) {
        __asm { BR              X9 }
      }

      goto LABEL_232;
    }

      uint64_t v9 = (v17 - 1) & v17;
    }
  }

  id result = swift_release(v3);
  *uint64_t v2 = v6;
  return result;
}

    os_log_type_t v10 = (v17 - 1) & v17;
  }

  uint64_t v18 = v16 + 3;
  if (v18 >= v32)
  {
LABEL_35:
    id result = swift_release_n(v3, 2LL);
    uint64_t v2 = v31;
    goto LABEL_37;
  }

  uint64_t v17 = *(void *)(v8 + 8 * v18);
  if (v17)
  {
    uint64_t v13 = v18;
    goto LABEL_23;
  }

  while (1)
  {
    uint64_t v13 = v18 + 1;
    if (__OFADD__(v18, 1LL)) {
      break;
    }
    if (v13 >= v32) {
      goto LABEL_35;
    }
    uint64_t v17 = *(void *)(v8 + 8 * v13);
    ++v18;
    if (v17) {
      goto LABEL_23;
    }
  }

    os_log_type_t v10 = (v18 - 1) & v18;
  }

  os_signpost_type_t v19 = v17 + 3;
  if (v19 >= v11)
  {
LABEL_35:
    id result = swift_release_n(v3, 2LL);
    uint64_t v2 = v30;
    goto LABEL_37;
  }

  uint64_t v18 = *(void *)(v8 + 8 * v19);
  if (v18)
  {
    uint64_t v14 = v19;
    goto LABEL_23;
  }

  while (1)
  {
    uint64_t v14 = v19 + 1;
    if (__OFADD__(v19, 1LL)) {
      break;
    }
    if (v14 >= v11) {
      goto LABEL_35;
    }
    uint64_t v18 = *(void *)(v8 + 8 * v14);
    ++v19;
    if (v18) {
      goto LABEL_23;
    }
  }

LABEL_52:
        __break(1u);
LABEL_53:
        if (!_CocoaArrayWrapper.endIndex.getter(&_swiftEmptyArrayStorage)) {
          goto LABEL_23;
        }
        sub_10003BBE8((unint64_t)&_swiftEmptyArrayStorage);
      }
    }

    swift_bridgeObjectRelease(v7);
    goto LABEL_50;
  }

  if (v4 != enum case for ToolKitIndexingReason.Changeset.full(_:))
  {
    if (v4 != enum case for ToolKitIndexingReason.Changeset.none(_:)) {
      (*(void (**)(void, void))(*(void *)(v0 + 184) + 8LL))( *(void *)(v0 + 192),  *(void *)(v0 + 176));
    }
LABEL_50:
    uint64_t v83 = sub_10000F340();
    uint64_t v98 = v85;
    uint64_t v99 = v84;
    swift_task_dealloc(v83);
    sub_10000F338();
    sub_10000F4A0();
    sub_10000F484();
    sub_10000F3FC();
    sub_10000F41C();
    sub_10000F3F4();
    sub_10000F4EC();
    sub_10000F4A8();
    uint64_t v86 = sub_10000F404();
    sub_10000F6A4(v86, v87, v88, v89, v90, v91, v92, v93, (uint64_t)&_swiftEmptySetSingleton, v98);
    swift_task_dealloc(v99);
    return (*(uint64_t (**)(uint64_t))(v0 + 8))(v96);
  }

  uint64_t v27 = sub_10000F568();
  uint64_t v28 = (os_log_s *)Logger.logObject.getter(v27);
  os_log_type_t v29 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v28, v29))
  {
    uint64_t v30 = (uint8_t *)sub_10000F2FC();
    *(_WORD *)uint64_t v30 = 0;
    sub_10000F540((void *)&_mh_execute_header, v28, v29, "Filling registry", v30);
    sub_10000F2F0((uint64_t)v30);
  }

  uint64_t v31 = *(void *)(v0 + 136);
  uint64_t v32 = *(void *)(v0 + 144);

  sub_10000F394(*(uint64_t (**)(uint64_t, uint64_t))(v32 + 8));
  uint64_t v33 = sub_10000F620();
  uint64_t v34 = OSSignposter.logHandle.getter(v33);
  uint64_t v35 = OSSignpostID.init(log:)(v34);
  uint64_t v36 = (os_log_s *)OSSignposter.logHandle.getter(v35);
  static os_signpost_type_t.begin.getter();
  uint64_t v37 = sub_10000F6B8();
  if ((v37 & 1) != 0)
  {
    uint64_t v38 = *(void *)(v0 + 48);
    uint64_t v39 = *(void *)(v0 + 32);
    sub_10000F5F8(v37, *(void *)(v0 + 56));
    uint64_t v40 = (uint8_t *)sub_10000F2FC();
    os_signpost_id_t v41 = sub_10000F64C(v40);
    sub_10000F530( (void *)&_mh_execute_header,  v36,  (os_signpost_type_t)v31,  v41,  "RegistryFill",  "Filling the action registry prior to indexing",  v40);
    sub_10000F508(v38, *(uint64_t (**)(uint64_t, uint64_t))(v39 + 8));
    sub_10000F2F0((uint64_t)v40);

    uint64_t v42 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))&WFLogCategoryToolKit;
  }

  else
  {
    uint64_t v68 = *(void *)(v0 + 32);

    uint64_t v42 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v68 + 16);
  }

  uint64_t v69 = *(void *)(v0 + 88);
  uint64_t v70 = *(void *)(v0 + 72);
  sub_10000F594(v42);
  uint64_t v71 = sub_10000F694();
  sub_10000F4D8(v71);
  sub_10000F324();
  sub_10000F464();
  sub_10000F4B0(v69, (uint64_t)"RegistryFill", 12LL);
  sub_10000F548();
  sub_10000F394(*(uint64_t (**)(uint64_t, uint64_t))(v70 + 8));
  *(void *)(v0 + 200) = [(id)objc_opt_self(WFActionRegistry) toolKitRegistry];
  char v72 = (void *)swift_task_alloc(async function pointer to WFActionRegistry.fillAndWait()[1]);
  *(void *)(v0 + 208) = v72;
  *char v72 = v0;
  v72[1] = sub_10000B868;
  return WFActionRegistry.fillAndWait()();
}

uint64_t sub_10000B868()
{
  return sub_10000F2D0();
}

void sub_10000B89C()
{
  uint64_t v1 = (void *)v0[25];
  uint64_t v2 = v0[16];
  uint64_t v3 = v0[14];
  id v4 = [v1 actions];
  uint64_t v5 = sub_10000E518(0LL, &qword_100069E08, &OBJC_CLASS___WFAction_ptr);
  unint64_t v6 = sub_10000E550();
  static Set._unconditionallyBridgeFromObjectiveC(_:)(v4, v5, v6);

  sub_10000D13C();
  sub_10000F508(v2, *(uint64_t (**)(uint64_t, uint64_t))(v3 + 8));
  uint64_t v7 = sub_10000F340();
  uint64_t v19 = v9;
  uint64_t v20 = v8;
  swift_task_dealloc(v7);
  sub_10000F338();
  sub_10000F4A0();
  sub_10000F484();
  sub_10000F3FC();
  sub_10000F41C();
  sub_10000F3F4();
  sub_10000F4EC();
  sub_10000F4A8();
  sub_10000F404();
  uint64_t v10 = swift_task_dealloc(v19);
  sub_10000F6A4(v10, v11, v12, v13, v14, v15, v16, v17, v19, v20);
  sub_10000F5DC();
  __asm { BR              X1 }

uint64_t sub_10000B990(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[3] = a4;
  v5[4] = a5;
  v5[2] = a1;
  return swift_task_switch(sub_10000B9AC, 0LL, 0LL);
}

uint64_t sub_10000B9AC()
{
  **(void **)(v0 + 16) = sub_10000BA0C(*(void *)(v0 + 32));
  uint64_t v1 = sub_10000F5C0();
  swift_storeEnumTagMultiPayload(v1, v2, 2LL);
  uint64_t v3 = (uint64_t (*)(void))sub_10000F588();
  return v3();
}

uint64_t sub_10000BA0C(uint64_t a1)
{
  uint64_t v107 = a1;
  uint64_t v111 = type metadata accessor for ToolKitIndexingReason.Changeset(0LL);
  uint64_t v108 = *(void **)(v111 - 8);
  __chkstk_darwin(v111);
  uint64_t v110 = (uint64_t *)((char *)&v99 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v2 = type metadata accessor for OSSignpostID(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  unint64_t v6 = (char *)&v99 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v99 - v7;
  uint64_t v9 = type metadata accessor for OSSignposter(0LL);
  uint64_t v104 = *(void *)(v9 - 8);
  uint64_t v105 = v9;
  uint64_t v10 = __chkstk_darwin(v9);
  uint64_t v103 = (char *)&v99 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v99 - v12;
  uint64_t v14 = type metadata accessor for WFLogSignpost(0LL);
  uint64_t v101 = *(void *)(v14 - 8);
  uint64_t v102 = v14;
  __chkstk_darwin(v14);
  uint64_t v16 = (char *)&v99 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = static WFLogSignpost.signposter(for:)(WFLogCategoryToolKit);
  uint64_t v18 = OSSignposter.logHandle.getter(v17);
  uint64_t v19 = OSSignpostID.init(log:)(v18);
  uint64_t v20 = (os_log_s *)OSSignposter.logHandle.getter(v19);
  os_signpost_type_t v21 = static os_signpost_type_t.begin.getter();
  char v22 = OS_os_log.signpostsEnabled.getter();
  v109 = v16;
  uint64_t v106 = v3;
  if ((v22 & 1) != 0)
  {
    uint64_t v100 = v2;
    uint64_t v23 = v3;
    uint64_t v24 = *(void (**)(char *, char *, uint64_t))(v3 + 16);
    v24(v6, v8, v100);
    os_signpost_id_t v25 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)os_signpost_id_t v25 = 0;
    os_signpost_id_t v26 = OSSignpostID.rawValue.getter();
    _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v20,  v21,  v26,  "SampleInvocationFetch",  "Fetching sample invocations prior to indexing",  v25,  2u);
    uint64_t v27 = *(void (**)(char *, uint64_t))(v23 + 8);
    uint64_t v2 = v100;
    v27(v6, v100);
    uint64_t v28 = v25;
    uint64_t v16 = v109;
    swift_slowDealloc(v28, -1LL, -1LL);
  }

  else
  {

    uint64_t v24 = *(void (**)(char *, char *, uint64_t))(v3 + 16);
  }

  v24(v6, v8, v2);
  uint64_t v29 = type metadata accessor for OSSignpostIntervalState(0LL);
  swift_allocObject(v29, *(unsigned int *)(v29 + 48), *(unsigned __int16 *)(v29 + 52));
  uint64_t v30 = OSSignpostIntervalState.init(id:isOpen:)(v6, 1LL);
  uint64_t v32 = v103;
  uint64_t v31 = v104;
  uint64_t v33 = v105;
  (*(void (**)(char *, char *, uint64_t))(v104 + 16))(v103, v13, v105);
  WFLogSignpost.init(_:_:_:)(v32, "SampleInvocationFetch", 21LL, 2LL, v30);
  (*(void (**)(char *, uint64_t))(v106 + 8))(v8, v2);
  (*(void (**)(char *, uint64_t))(v31 + 8))(v13, v33);
  uint64_t v34 = v108;
  uint64_t v36 = v110;
  uint64_t v35 = v111;
  ((void (*)(uint64_t *, uint64_t, uint64_t))v108[2])(v110, v107, v111);
  int v37 = ((uint64_t (*)(uint64_t *, uint64_t))v34[11])(v36, v35);
  if (v37 == enum case for ToolKitIndexingReason.Changeset.partial(_:))
  {
    ((void (*)(uint64_t *, uint64_t))v34[12])(v36, v35);
    uint64_t v39 = *v36;
    uint64_t v38 = v36[1];
    uint64_t v40 = v36[2];
    swift_bridgeObjectRelease(v38);
    swift_bridgeObjectRelease(v40);
    sub_10003DBDC(v39);
    uint64_t v42 = v41;
    swift_bridgeObjectRelease(v39);
  }

  else if (v37 == enum case for ToolKitIndexingReason.Changeset.full(_:))
  {
    id v43 = [(id)objc_opt_self(WFSharedLinkMetadataProvider) sharedProvider];
    id v44 = [v43 metadataProvider];

    id v112 = 0LL;
    id v45 = [v44 bundlesWithError:&v112];
    id v46 = v112;
    if (!v45)
    {
      uint64_t v51 = v112;
      _convertNSErrorToError(_:)(v46);

      swift_willThrow(v91, v92, v93, v94, v95, v96, v97);
LABEL_38:
      sub_10000D13C();
      (*(void (**)(char *, uint64_t))(v101 + 8))(v16, v102);
      return (uint64_t)v51;
    }

    uint64_t v47 = v45;
    uint64_t v42 = (void *)static Array._unconditionallyBridgeFromObjectiveC(_:)(v45, &type metadata for String);
    id v48 = v46;
  }

  else
  {
    if (v37 != enum case for ToolKitIndexingReason.Changeset.none(_:)) {
      ((void (*)(uint64_t *, uint64_t))v34[1])(v36, v35);
    }
    uint64_t v42 = &_swiftEmptyArrayStorage;
  }

  uint64_t v49 = v42[2];
  uint64_t v108 = v42;
  if (!v49)
  {
    uint64_t v51 = &_swiftEmptyDictionarySingleton;
LABEL_35:
    swift_bridgeObjectRelease(v108);
    uint64_t v82 = v109;
    sub_10000D13C();
    (*(void (**)(char *, uint64_t))(v101 + 8))(v82, v102);
    return (uint64_t)v51;
  }

  uint64_t v110 = (uint64_t *)objc_opt_self(&OBJC_CLASS___WFSharedLinkMetadataProvider);
  uint64_t v50 = v42 + 5;
  uint64_t v51 = &_swiftEmptyDictionarySingleton;
  while (1)
  {
    uint64_t v53 = *(v50 - 1);
    uint64_t v52 = *v50;
    swift_bridgeObjectRetain(*v50);
    id v54 = [v110 sharedProvider];
    NSString v55 = String._bridgeToObjectiveC()();
    id v112 = 0LL;
    id v56 = [v54 examplePhrasesForBundleIdentifier:v55 useCache:1 error:&v112];

    id v57 = v112;
    if (!v56)
    {
      id v83 = v112;
      swift_bridgeObjectRelease(v51);
      swift_bridgeObjectRelease(v108);
      swift_bridgeObjectRelease(v52);
      _convertNSErrorToError(_:)(v57);

      swift_willThrow(v84, v85, v86, v87, v88, v89, v90);
      uint64_t v16 = v109;
      goto LABEL_38;
    }

    uint64_t v58 = sub_10000E518(0LL, &qword_100069DF0, &OBJC_CLASS___LNExamplePhraseDescription_ptr);
    uint64_t v59 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v56, v58);
    id v60 = v57;

    if ((unint64_t)v59 >> 62)
    {
      uint64_t v81 = v59 < 0 ? v59 : v59 & 0xFFFFFFFFFFFFFF8LL;
      swift_bridgeObjectRetain(v59);
      uint64_t v61 = _CocoaArrayWrapper.endIndex.getter(v81);
      swift_bridgeObjectRelease(v59);
    }

    else
    {
      uint64_t v61 = *(void *)((v59 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    }

    if (v61 >= 1) {
      break;
    }
    swift_bridgeObjectRelease(v59);
    unint64_t v76 = v52;
LABEL_28:
    swift_bridgeObjectRelease(v76);
    v50 += 2;
    if (!--v49) {
      goto LABEL_35;
    }
  }

  uint64_t v111 = v59;
  uint64_t v62 = v49;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v51);
  id v112 = v51;
  uint64_t v64 = v53;
  uint64_t v65 = sub_100051B7C(v53, v52);
  uint64_t v67 = v51[2];
  BOOL v68 = (v66 & 1) == 0;
  Swift::Int v69 = v67 + v68;
  if (__OFADD__(v67, v68))
  {
    __break(1u);
LABEL_41:
    __break(1u);
  }

  unint64_t v70 = v65;
  char v71 = v66;
  sub_10000844C(&qword_100069DF8);
  Swift::Bool v72 = _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v69);
  uint64_t v49 = v62;
  if (!v72)
  {
LABEL_22:
    uint64_t v51 = v112;
    if ((v71 & 1) != 0)
    {
      uint64_t v75 = *((void *)v112 + 7);
      swift_bridgeObjectRelease(*(void *)(v75 + 8 * v70));
      *(void *)(v75 + 8 * v70) = v111;
    }

    else
    {
      *((void *)v112 + (v70 >> 6) + 8) |= 1LL << v70;
      uint64_t v77 = (uint64_t *)(v51[6] + 16 * v70);
      *uint64_t v77 = v64;
      v77[1] = v52;
      *(void *)(v51[7] + 8 * v70) = v111;
      uint64_t v78 = v51[2];
      BOOL v79 = __OFADD__(v78, 1LL);
      uint64_t v80 = v78 + 1;
      if (v79) {
        goto LABEL_41;
      }
      v51[2] = v80;
      swift_bridgeObjectRetain(v52);
    }

    swift_bridgeObjectRelease(v52);
    unint64_t v76 = 0x8000000000000000LL;
    goto LABEL_28;
  }

  uint64_t v73 = sub_100051B7C(v64, v52);
  if ((v71 & 1) == (v74 & 1))
  {
    unint64_t v70 = v73;
    goto LABEL_22;
  }

  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

uint64_t sub_10000C170(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 16) = a2;
  uint64_t v3 = sub_10000844C(&qword_100069D88);
  *(void *)(v2 + 24) = swift_task_alloc((*(void *)(*(void *)(v3 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_10000C1CC, 0LL, 0LL);
}

uint64_t sub_10000C1CC()
{
  uint64_t v1 = *(void *)(v0 + 24);
  uint64_t v2 = type metadata accessor for TaskPriority(0LL);
  sub_10000848C(v1, 1LL, 1LL, v2);
  uint64_t v3 = swift_allocObject(&unk_100066290, 32LL, 7LL);
  *(void *)(v3 + 16) = 0LL;
  *(void *)(v3 + 24) = 0LL;
  sub_10000C4C4(v1, (uint64_t)&unk_100069EA0, v3);
  sub_10000D8E0(v1, &qword_100069D88);
  sub_10000F338();
  uint64_t v4 = (uint64_t (*)(void))sub_10000F588();
  return sub_10000F2DC(v4);
}

uint64_t sub_10000C250()
{
  uint64_t v1 = type metadata accessor for OSSignpostID(0LL);
  v0[2] = v1;
  uint64_t v2 = *(void *)(v1 - 8);
  v0[3] = v2;
  unint64_t v3 = (*(void *)(v2 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v0[4] = swift_task_alloc(v3);
  v0[5] = swift_task_alloc(v3);
  uint64_t v4 = type metadata accessor for OSSignposter(0LL);
  v0[6] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v0[7] = v5;
  unint64_t v6 = (*(void *)(v5 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v0[8] = swift_task_alloc(v6);
  v0[9] = swift_task_alloc(v6);
  uint64_t v7 = type metadata accessor for WFLogSignpost(0LL);
  v0[10] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v0[11] = v8;
  v0[12] = swift_task_alloc((*(void *)(v8 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_10000C31C, 0LL, 0LL);
}

uint64_t sub_10000C31C()
{
  uint64_t v3 = static WFLogSignpost.signposter(for:)(WFLogCategoryToolKit);
  uint64_t v4 = OSSignposter.logHandle.getter(v3);
  uint64_t v5 = OSSignpostID.init(log:)(v4);
  unint64_t v6 = (os_log_s *)OSSignposter.logHandle.getter(v5);
  static os_signpost_type_t.begin.getter();
  uint64_t v7 = sub_10000F6B8();
  if ((v7 & 1) != 0)
  {
    uint64_t v8 = *(void *)(v1 + 32);
    uint64_t v9 = *(void *)(v1 + 24);
    sub_10000F5F8(v7, *(void *)(v1 + 40));
    uint64_t v10 = (uint8_t *)sub_10000F2FC();
    os_signpost_id_t v11 = sub_10000F64C(v10);
    sub_10000F530( (void *)&_mh_execute_header,  v6,  v0,  v11,  "DaemonEnumerator",  "Enumerating daemons on system prior to indexing",  v10);
    sub_10000F508(v8, *(uint64_t (**)(uint64_t, uint64_t))(v9 + 8));
    sub_10000F2F0((uint64_t)v10);

    uint64_t v12 = v2;
  }

  else
  {
    uint64_t v13 = *(void *)(v1 + 24);

    uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v13 + 16);
  }

  uint64_t v14 = *(void *)(v1 + 64);
  uint64_t v15 = *(void *)(v1 + 56);
  sub_10000F594(v12);
  uint64_t v16 = sub_10000F694();
  sub_10000F4D8(v16);
  sub_10000F324();
  sub_10000F464();
  sub_10000F4B0(v14, (uint64_t)"DaemonEnumerator", 16LL);
  sub_10000F548();
  sub_10000F394(*(uint64_t (**)(uint64_t, uint64_t))(v15 + 8));
  if (qword_1000699B0 != -1) {
    swift_once(&qword_1000699B0, sub_100008E20);
  }
  uint64_t v18 = *(void *)(v1 + 88);
  uint64_t v17 = *(void *)(v1 + 96);
  sub_100008E78();
  sub_10000D13C();
  sub_10000F508(v17, *(uint64_t (**)(uint64_t, uint64_t))(v18 + 8));
  sub_10000F338();
  sub_10000F3FC();
  sub_10000F41C();
  sub_10000F3F4();
  sub_10000F4EC();
  return sub_10000F308(*(uint64_t (**)(void))(v1 + 8));
}

uint64_t sub_10000C4C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = sub_10000844C(&qword_100069D88);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v24[-1] - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_10000E61C(a1, (uint64_t)v10);
  uint64_t v11 = type metadata accessor for TaskPriority(0LL);
  if (sub_1000084E0((uint64_t)v10, 1LL, v11) == 1)
  {
    sub_10000D8E0((uint64_t)v10, &qword_100069D88);
    uint64_t v12 = 28928LL;
  }

  else
  {
    unsigned __int8 v13 = TaskPriority.rawValue.getter();
    (*(void (**)(char *, uint64_t))(*(void *)(v11 - 8) + 8LL))(v10, v11);
    uint64_t v12 = v13 | 0x7100LL;
  }

  uint64_t v14 = *(void *)(a3 + 16);
  if (v14)
  {
    uint64_t ObjectType = swift_getObjectType(*(void *)(a3 + 16));
    swift_unknownObjectRetain(v14);
    uint64_t v16 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType);
    uint64_t v18 = v17;
    swift_unknownObjectRelease(v14);
  }

  else
  {
    uint64_t v16 = 0LL;
    uint64_t v18 = 0LL;
  }

  uint64_t v19 = *v4;
  uint64_t v20 = (void *)(v18 | v16);
  if (v18 | v16)
  {
    v25[0] = 0LL;
    v25[1] = 0LL;
    uint64_t v20 = v25;
    v25[2] = v16;
    void v25[3] = v18;
  }

  v24[0] = 1LL;
  v24[1] = v20;
  v24[2] = v19;
  uint64_t v21 = swift_task_create(v12, v24, (char *)&type metadata for () + 8, a2, a3);
  return swift_release(v21);
}

uint64_t ToolKitIndexingReason.Changeset.isExpensive.getter()
{
  uint64_t v2 = type metadata accessor for Logger(0LL);
  __chkstk_darwin(v2);
  uint64_t v3 = sub_10000F47C();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  sub_10000F570();
  id v5 = [(id)objc_opt_self(WFSharedLinkMetadataProvider) sharedProvider];
  id v6 = [v5 metadataProvider];

  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v4 + 16))(v1, v0, v3);
  int v7 = (*(uint64_t (**)(uint64_t *, uint64_t))(v4 + 88))(v1, v3);
  if (v7 == enum case for ToolKitIndexingReason.Changeset.partial(_:))
  {
    (*(void (**)(uint64_t *, uint64_t))(v4 + 96))(v1, v3);
    uint64_t v8 = *v1;
    uint64_t v9 = v1[2];
    swift_bridgeObjectRelease(v1[1]);
    swift_bridgeObjectRelease(v9);
    id v10 = v6;
    uint64_t v11 = sub_10000CD70(0LL, v8, v10);
    swift_bridgeObjectRelease(v8);

    return v11 > 80;
  }

  else if (v7 == enum case for ToolKitIndexingReason.Changeset.full(_:))
  {

    return 1LL;
  }

  else if (v7 == enum case for ToolKitIndexingReason.Changeset.none(_:))
  {

    return 0LL;
  }

  else
  {
    uint64_t result = _diagnoseUnexpectedEnumCase<A>(type:)(v3, v3);
    __break(1u);
  }

  return result;
}

uint64_t sub_10000C898(void **a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  os_signpost_id_t v26 = &OBJC_PROTOCOL___WFLinkActionProtocol;
  uint64_t v5 = swift_dynamicCastObjCProtocolConditional(v4, 1LL, &v26);
  if (!v5)
  {
    _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000032LL,  0x8000000100059F60LL,  "BackgroundShortcutRunner/ToolKitIndexer+Preflighting.swift",  58LL,  2LL,  166LL,  0);
    goto LABEL_9;
  }

  uint64_t v2 = v5;
  uint64_t v6 = objc_opt_self(&OBJC_CLASS___WFAppIntentExecutionAction);
  uint64_t v7 = swift_dynamicCastObjCClass(v2, v6);
  if (v7
    || (v8 = objc_opt_self(&OBJC_CLASS___WFLinkContentItemFilterAction), (uint64_t v7 = swift_dynamicCastObjCClass(v2, v8)) != 0))
  {
    uint64_t v9 = (void *)v7;
    id v10 = v4;
    id v11 = [v9 fullyQualifiedLinkActionIdentifier];
  }

  else
  {
    uint64_t v19 = type metadata accessor for WFGetAppSettingAction();
    if (!swift_dynamicCastClass(v2, v19))
    {
      while (1)
      {
        uint64_t v24 = 0LL;
        unint64_t v25 = 0xE000000000000000LL;
        id v20 = v4;
        _StringGuts.grow(_:)(31LL);
        v21._object = (void *)0x8000000100059FA0LL;
        v21._countAndFlagsBits = 0xD00000000000001DLL;
        String.append(_:)(v21);
        uint64_t v23 = v2;
        uint64_t v22 = sub_10000844C(&qword_100069E80);
        _print_unlocked<A, B>(_:_:)( &v23,  &v24,  v22,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
        _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  v24,  v25,  "BackgroundShortcutRunner/ToolKitIndexer+Preflighting.swift",  58LL,  2LL,  177LL,  0);
LABEL_9:
        __break(1u);
      }
    }

    id v11 = (id)WFGetAppSettingAction.fullyQualifiedActionIdentifier.getter(v4);
  }

  uint64_t v12 = v11;
  id v13 = [v11 bundleIdentifier];

  uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
  uint64_t v16 = v15;

  sub_100015688(v14, v16, a2);
  LOBYTE(v14) = v17;
  swift_bridgeObjectRelease(v16);

  return v14 & 1;
}

void sub_10000CAD4(uint64_t a1)
{
  uint64_t v1 = a1;
  if ((a1 & 0xC000000000000001LL) != 0)
  {
    if (a1 >= 0) {
      a1 &= 0xFFFFFFFFFFFFFF8uLL;
    }
    uint64_t v2 = __CocoaSet.makeIterator()(a1);
    uint64_t v3 = sub_10000E518(0LL, &qword_100069E08, &OBJC_CLASS___WFAction_ptr);
    unint64_t v4 = sub_10000E550();
    a1 = (uint64_t)Set.Iterator.init(_cocoa:)(v25, v2, v3, v4);
    uint64_t v1 = v25[0];
    uint64_t v22 = v25[1];
    uint64_t v5 = v25[2];
    int64_t v6 = v25[3];
    unint64_t v7 = v25[4];
  }

  else
  {
    int64_t v6 = 0LL;
    uint64_t v8 = -1LL << *(_BYTE *)(a1 + 32);
    uint64_t v22 = a1 + 56;
    uint64_t v5 = ~v8;
    uint64_t v9 = -v8;
    if (v9 < 64) {
      uint64_t v10 = ~(-1LL << v9);
    }
    else {
      uint64_t v10 = -1LL;
    }
    unint64_t v7 = v10 & *(void *)(a1 + 56);
  }

  int64_t v11 = (unint64_t)(v5 + 64) >> 6;
  if (v1 < 0) {
    goto LABEL_12;
  }
  while (1)
  {
    if (v7)
    {
      uint64_t v12 = (v7 - 1) & v7;
      unint64_t v13 = __clz(__rbit64(v7)) | (v6 << 6);
      int64_t v14 = v6;
      goto LABEL_31;
    }

    int64_t v19 = v6 + 1;
    if (__OFADD__(v6, 1LL)) {
      break;
    }
    if (v19 >= v11) {
      goto LABEL_34;
    }
    unint64_t v20 = *(void *)(v22 + 8 * v19);
    int64_t v14 = v6 + 1;
    if (!v20)
    {
      int64_t v14 = v6 + 2;
      if (v6 + 2 >= v11) {
        goto LABEL_34;
      }
      unint64_t v20 = *(void *)(v22 + 8 * v14);
      if (!v20)
      {
        int64_t v14 = v6 + 3;
        if (v6 + 3 >= v11) {
          goto LABEL_34;
        }
        unint64_t v20 = *(void *)(v22 + 8 * v14);
        if (!v20)
        {
          int64_t v14 = v6 + 4;
          if (v6 + 4 >= v11) {
            goto LABEL_34;
          }
          unint64_t v20 = *(void *)(v22 + 8 * v14);
          if (!v20)
          {
            int64_t v14 = v6 + 5;
            if (v6 + 5 >= v11) {
              goto LABEL_34;
            }
            unint64_t v20 = *(void *)(v22 + 8 * v14);
            if (!v20)
            {
              int64_t v21 = v6 + 6;
              while (v21 < v11)
              {
                unint64_t v20 = *(void *)(v22 + 8 * v21++);
                if (v20)
                {
                  int64_t v14 = v21 - 1;
                  goto LABEL_30;
                }
              }

LABEL_34:
              sub_10000E5A0(v1);
              return;
            }
          }
        }
      }
    }

LABEL_30:
    uint64_t v12 = (v20 - 1) & v20;
    unint64_t v13 = __clz(__rbit64(v20)) + (v14 << 6);
LABEL_31:
    id v18 = *(id *)(*(void *)(v1 + 48) + 8 * v13);
    if (!v18) {
      goto LABEL_34;
    }
    while (1)
    {
      sub_10003C230((Swift::Int *)&v24, v18);

      int64_t v6 = v14;
      unint64_t v7 = v12;
      if ((v1 & 0x8000000000000000LL) == 0) {
        break;
      }
LABEL_12:
      uint64_t v15 = __CocoaSet.Iterator.next()(a1);
      if (v15)
      {
        uint64_t v16 = v15;
        uint64_t v23 = v15;
        uint64_t v17 = sub_10000E518(0LL, &qword_100069E08, &OBJC_CLASS___WFAction_ptr);
        swift_unknownObjectRetain(v16);
        swift_dynamicCast(&v24, &v23, (char *)&type metadata for Swift.AnyObject + 8, v17, 7LL);
        id v18 = v24;
        swift_unknownObjectRelease(v16);
        int64_t v14 = v6;
        uint64_t v12 = v7;
        if (v18) {
          continue;
        }
      }

      goto LABEL_34;
    }
  }

  __break(1u);
}

            uint64_t v90 = v37;
            goto LABEL_31;
          }
        }
      }
    }

          sub_100043410(*(void *)(v0 + 720), v853, v854, *(void *)(v0 + 632));
LABEL_31:
          swift_bridgeObjectRelease(*v39);
          swift_bridgeObjectRelease(*v40);
          v856 = v37 == 1953392980 && v38 == 0xE400000000000000LL;
          if (v856 || (v857 = sub_1000460A8(), (sub_100043138(v857, v858) & 1) != 0))
          {
            v859 = *(void *)(v0 + 712);
            v860 = *(void *)(v0 + 632);
            sub_100047550(*(void *)(v0 + 720), v855, &qword_10006A378);
            sub_100043DBC(v859, 1LL, v860);
            if (!v856)
            {
              v867 = *(void *)(v0 + 712);
              v868 = *(void *)(v0 + 664);
              v869 = *(void *)(v0 + 640);
              v870 = *(void *)(v0 + 632);
              sub_100041358(*(void *)(v0 + 720), &qword_10006A378);
              sub_100043024();
              v871 = *(void (**)(uint64_t, uint64_t, uint64_t))(v869 + 32);
              v871(v868, v867, v870);
              v872 = sub_100046BE4();
              ((void (*)(uint64_t))v871)(v872);
              v873 = (unsigned int *)&enum case for ToolSymbolIconStyle.tinted(_:);
LABEL_46:
              uint64_t v1 = *(uint64_t **)(v0 + 768);
              uint64_t v2 = *(void *)(v0 + 688);
              v884 = *(void *)(v0 + 680);
              (*(void (**)(uint64_t, void, void))(v884 + 104))(v2, *v873, *(void *)(v0 + 672));
              v885 = (uint64_t)v1 + *(int *)(sub_10000844C(&qword_10006A430) + 48);
              *uint64_t v1 = v33;
              v1[1] = v34;
              sub_1000446CC(v885, v2, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v884 + 32));
              uint64_t v23 = (unsigned int *)&enum case for ToolIcon.symbol(_:);
              goto LABEL_12;
            }

            sub_100041358(*(void *)(v0 + 712), &qword_10006A378);
          }

          v861 = *(void *)(v0 + 704);
          v862 = *(void *)(v0 + 632);
          v863 = sub_1000460A8();
          ToolSymbolIconColor.init(rawValue:)(v863, v864);
          sub_1000084E0(v861, 1LL, v862);
          sub_1000472C8();
          if (v856)
          {
            v866 = sub_100044A10();
            sub_100045A94(v866, &qword_10006A378);
          }

          else
          {
            (*(void (**)(void))(v865 + 32))();
          }

          v874 = *(void *)(v0 + 696);
          v875 = *(void *)(v0 + 632);
          sub_1000412F8(*(void *)(v0 + 720), v874, &qword_10006A378);
          sub_1000084E0(v874, 1LL, v875);
          v876 = *(void *)(v0 + 640);
          sub_1000472C8();
          if (v856)
          {
            v877 = (*(uint64_t (**)(void))(v876 + 104))();
            sub_100045A94(v877, &qword_10006A378);
            v878 = *(void (**)(void))(v876 + 32);
          }

          else
          {
            v878 = *(void (**)(void))(v876 + 32);
            v878();
          }

          v879 = *(void *)(v0 + 688);
          v880 = *(void *)(v0 + 656);
          v881 = *(void *)(v0 + 648);
          v882 = *(void *)(v0 + 632);
          v883 = v879 + *(int *)(sub_10000844C(&qword_10006A428) + 48);
          ((void (*)(uint64_t, uint64_t, uint64_t))v878)(v879, v881, v882);
          ((void (*)(uint64_t, uint64_t, uint64_t))v878)(v883, v880, v882);
          v873 = (unsigned int *)&enum case for ToolSymbolIconStyle.multicolor(_:);
          goto LABEL_46;
        }
      }

      else
      {
        *(_OWORD *)(v0 + 304) = 0u;
        *(_OWORD *)(v0 + 320) = 0u;
      }

      sub_100041358(v0 + 304, &qword_10006A420);
      goto LABEL_30;
    }

    sub_100042E4C();
  }

  sub_100044430();
  sub_100044004();
  sub_1000432E8();
  uint64_t v27 = sub_10004403C();
LABEL_20:
  sub_10000848C(v27, v28, v29, v30);
  sub_100046184();
  id v45 = *(void *)(v0 + 1320);
  v4368 = v46;
  v4369 = *(void *)(v0 + 1296);
  sub_100046154();
  uint64_t v47 = *(_BYTE *)(v0 + 2080);
  id v48 = *(void *)(v0 + 608);
  uint64_t v49 = *(void *)(v0 + 600);
  v4367 = *(void *)(v0 + 592);
  sub_1000462FC();
  uint64_t v51 = sub_100046088(v50, "identifier");
  uint64_t v52 = sub_1000453AC((uint64_t)v51);
  id v54 = v53;

  NSString v55 = sub_100044B10();
  *(void *)(v55 + 16) = v2;
  *(void *)(v55 + 24) = v45;
  *(void *)(v55 + 32) = v49;
  *(void *)(v55 + 40) = v48;
  *(_BYTE *)(v55 + 48) = v47 & 1;
  *(void *)(v55 + 56) = v4368;
  *(void *)(v55 + 64) = v5;
  *(void *)(v55 + 72) = v0 + 360;
  *(void *)(v55 + 80) = v4369;
  *(void *)(v55 + 88) = v0 + 400;
  *(void *)(v55 + 96) = v4370;
  id v56 = sub_100047878((void *)v55, v4367);
  sub_100043B58((uint64_t)v56, v4371);
  ToolDatabase.Rollbackable.inSavepoint<A>(name:work:)(v52, v54, sub_100040F80, v55);
  v4375 = *(void *)(v0 + 1864);
  v4373 = *(void **)(v0 + 1672);
  sub_100043D84();
  if (v4372)
  {
    uint64_t v58 = *(void *)(v0 + 1552);
    uint64_t v59 = *(void *)(v0 + 1520);
    id v60 = *(void *)(v0 + 1312);
    sub_100043820(v57);
    sub_100046284();
    sub_1000465C0();

    uint64_t v61 = sub_10000F484();
    sub_1000431B8(v61, &qword_10006A388);
    sub_100043AEC(*(uint64_t (**)(uint64_t, uint64_t))(v60 + 8));
    sub_100043FD4(v58, *(uint64_t (**)(uint64_t, uint64_t))(v59 + 8));
    sub_100043B64();
    swift_release(v4375);
    sub_100008D58();
    sub_1000473D0();
    sub_100043A38();
    sub_1000463A8();
    sub_100043B04();
    sub_100042B6C();
    v4374 = *(void *)(v0 + 656);
    v4376 = *(void *)(v0 + 648);
    swift_task_dealloc(v62);
    sub_10000F41C();
    sub_10000F4A0();
    sub_10000F3FC();
    sub_10000F484();
    sub_10000F338();
    sub_10000F404();
    sub_10000F4A8();
    sub_10000F4EC();
    uint64_t v63 = sub_10000F3F4();
    char v71 = sub_100043EE8( v63,  v64,  v65,  v66,  v67,  v68,  v69,  v70,  v886,  v983,  v1081,  v1179,  v1277,  v1375,  v1473,  v1571,  v1669,  v1766,  v1862,  v1957,  v2051,  v2144,  v2236,  v2327);
    BOOL v79 = sub_100043F40( v71,  v72,  v73,  v74,  v75,  v76,  v77,  v78,  v887,  v984,  v1082,  v1180,  v1278,  v1376,  v1474,  v1572,  v1670,  v1767,  v1863,  v1958,  v2052,  v2145,  v2237,  v2328,  v2417);
    uint64_t v87 = sub_1000436F0( v79,  v80,  v81,  v82,  v83,  v84,  v85,  v86,  v888,  v985,  v1083,  v1181,  v1279,  v1377,  v1475,  v1573,  v1671,  v1768,  v1864,  v1959,  v2053,  v2146,  v2238,  v2329,  v2418,  v2505);
    uint64_t v95 = sub_1000436E8( v87,  v88,  v89,  v90,  v91,  v92,  v93,  v94,  v889,  v986,  v1084,  v1182,  v1280,  v1378,  v1476,  v1574,  v1672,  v1769,  v1865,  v1960,  v2054,  v2147,  v2239,  v2330,  v2419,  v2506,  v2591);
    uint64_t v103 = sub_1000436C4( v95,  v96,  v97,  v98,  v99,  v100,  v101,  v102,  v890,  v987,  v1085,  v1183,  v1281,  v1379,  v1477,  v1575,  v1673,  v1770,  v1866,  v1961,  v2055,  v2148,  v2240,  v2331,  v2420,  v2507,  v2592,  v2675);
    uint64_t v111 = sub_100043624( v103,  v104,  v105,  v106,  v107,  v108,  v109,  v110,  v891,  v988,  v1086,  v1184,  v1282,  v1380,  v1478,  v1576,  v1674,  v1771,  v1867,  v1962,  v2056,  v2149,  v2241,  v2332,  v2421,  v2508,  v2593,  v2676,  v2757);
    char v119 = sub_100043658( v111,  v112,  v113,  v114,  v115,  v116,  v117,  v118,  v892,  v989,  v1087,  v1185,  v1283,  v1381,  v1479,  v1577,  v1675,  v1772,  v1868,  v1963,  v2057,  v2150,  v2242,  v2333,  v2422,  v2509,  v2594,  v2677,  v2758,  v2837);
    char v127 = sub_100043660( v119,  v120,  v121,  v122,  v123,  v124,  v125,  v126,  v893,  v990,  v1088,  v1186,  v1284,  v1382,  v1480,  v1578,  v1676,  v1773,  v1869,  v1964,  v2058,  v2151,  v2243,  v2334,  v2423,  v2510,  v2595,  v2678,  v2759,  v2838,  v2915);
    uint64_t v135 = sub_10004361C( v127,  v128,  v129,  v130,  v131,  v132,  v133,  v134,  v894,  v991,  v1089,  v1187,  v1285,  v1383,  v1481,  v1579,  v1677,  v1774,  v1870,  v1965,  v2059,  v2152,  v2244,  v2335,  v2424,  v2511,  v2596,  v2679,  v2760,  v2839,  v2916,  v2991);
    v143 = sub_100043614( v135,  v136,  v137,  v138,  v139,  v140,  v141,  v142,  v895,  v992,  v1090,  v1188,  v1286,  v1384,  v1482,  v1580,  v1678,  v1775,  v1871,  v1966,  v2060,  v2153,  v2245,  v2336,  v2425,  v2512,  v2597,  v2680,  v2761,  v2840,  v2917,  v2992,  v3065);
    v151 = sub_100043A48( v143,  v144,  v145,  v146,  v147,  v148,  v149,  v150,  v896,  v993,  v1091,  v1189,  v1287,  v1385,  v1483,  v1581,  v1679,  v1776,  v1872,  v1967,  v2061,  v2154,  v2246,  v2337,  v2426,  v2513,  v2598,  v2681,  v2762,  v2841,  v2918,  v2993,  v3066,  v3137);
    v159 = sub_100043A40( v151,  v152,  v153,  v154,  v155,  v156,  v157,  v158,  v897,  v994,  v1092,  v1190,  v1288,  v1386,  v1484,  v1582,  v1680,  v1777,  v1873,  v1968,  v2062,  v2155,  v2247,  v2338,  v2427,  v2514,  v2599,  v2682,  v2763,  v2842,  v2919,  v2994,  v3067,  v3138,  v3207);
    v167 = sub_1000437F8( v159,  v160,  v161,  v162,  v163,  v164,  v165,  v166,  v898,  v995,  v1093,  v1191,  v1289,  v1387,  v1485,  v1583,  v1681,  v1778,  v1874,  v1969,  v2063,  v2156,  v2248,  v2339,  v2428,  v2515,  v2600,  v2683,  v2764,  v2843,  v2920,  v2995,  v3068,  v3139,  v3208,  v3275);
    v175 = sub_10004384C( v167,  v168,  v169,  v170,  v171,  v172,  v173,  v174,  v899,  v996,  v1094,  v1192,  v1290,  v1388,  v1486,  v1584,  v1682,  v1779,  v1875,  v1970,  v2064,  v2157,  v2249,  v2340,  v2429,  v2516,  v2601,  v2684,  v2765,  v2844,  v2921,  v2996,  v3069,  v3140,  v3209,  v3276,  v3341);
    v183 = sub_100043A30( v175,  v176,  v177,  v178,  v179,  v180,  v181,  v182,  v900,  v997,  v1095,  v1193,  v1291,  v1389,  v1487,  v1585,  v1683,  v1780,  v1876,  v1971,  v2065,  v2158,  v2250,  v2341,  v2430,  v2517,  v2602,  v2685,  v2766,  v2845,  v2922,  v2997,  v3070,  v3141,  v3210,  v3277,  v3342,  v3405);
    v191 = sub_100043A28( v183,  v184,  v185,  v186,  v187,  v188,  v189,  v190,  v901,  v998,  v1096,  v1194,  v1292,  v1390,  v1488,  v1586,  v1684,  v1781,  v1877,  v1972,  v2066,  v2159,  v2251,  v2342,  v2431,  v2518,  v2603,  v2686,  v2767,  v2846,  v2923,  v2998,  v3071,  v3142,  v3211,  v3278,  v3343,  v3406,  v3467);
    v199 = sub_100043A20( v191,  v192,  v193,  v194,  v195,  v196,  v197,  v198,  v902,  v999,  v1097,  v1195,  v1293,  v1391,  v1489,  v1587,  v1685,  v1782,  v1878,  v1973,  v2067,  v2160,  v2252,  v2343,  v2432,  v2519,  v2604,  v2687,  v2768,  v2847,  v2924,  v2999,  v3072,  v3143,  v3212,  v3279,  v3344,  v3407,  v3468,  v3527);
    v207 = sub_100043A18( v199,  v200,  v201,  v202,  v203,  v204,  v205,  v206,  v903,  v1000,  v1098,  v1196,  v1294,  v1392,  v1490,  v1588,  v1686,  v1783,  v1879,  v1974,  v2068,  v2161,  v2253,  v2344,  v2433,  v2520,  v2605,  v2688,  v2769,  v2848,  v2925,  v3000,  v3073,  v3144,  v3213,  v3280,  v3345,  v3408,  v3469,  v3528,  v3585);
    v215 = sub_100043A10( v207,  v208,  v209,  v210,  v211,  v212,  v213,  v214,  v904,  v1001,  v1099,  v1197,  v1295,  v1393,  v1491,  v1589,  v1687,  v1784,  v1880,  v1975,  v2069,  v2162,  v2254,  v2345,  v2434,  v2521,  v2606,  v2689,  v2770,  v2849,  v2926,  v3001,  v3074,  v3145,  v3214,  v3281,  v3346,  v3409,  v3470,  v3529,  v3586,  v3641);
    v223 = sub_100043A08( v215,  v216,  v217,  v218,  v219,  v220,  v221,  v222,  v905,  v1002,  v1100,  v1198,  v1296,  v1394,  v1492,  v1590,  v1688,  v1785,  v1881,  v1976,  v2070,  v2163,  v2255,  v2346,  v2435,  v2522,  v2607,  v2690,  v2771,  v2850,  v2927,  v3002,  v3075,  v3146,  v3215,  v3282,  v3347,  v3410,  v3471,  v3530,  v3587,  v3642,  v3695);
    v231 = sub_100043A00( v223,  v224,  v225,  v226,  v227,  v228,  v229,  v230,  v906,  v1003,  v1101,  v1199,  v1297,  v1395,  v1493,  v1591,  v1689,  v1786,  v1882,  v1977,  v2071,  v2164,  v2256,  v2347,  v2436,  v2523,  v2608,  v2691,  v2772,  v2851,  v2928,  v3003,  v3076,  v3147,  v3216,  v3283,  v3348,  v3411,  v3472,  v3531,  v3588,  v3643,  v3696,  v3747);
    v239 = sub_1000439F8( v231,  v232,  v233,  v234,  v235,  v236,  v237,  v238,  v907,  v1004,  v1102,  v1200,  v1298,  v1396,  v1494,  v1592,  v1690,  v1787,  v1883,  v1978,  v2072,  v2165,  v2257,  v2348,  v2437,  v2524,  v2609,  v2692,  v2773,  v2852,  v2929,  v3004,  v3077,  v3148,  v3217,  v3284,  v3349,  v3412,  v3473,  v3532,  v3589,  v3644,  v3697,  v3748,  v3797);
    v247 = sub_1000439F0( v239,  v240,  v241,  v242,  v243,  v244,  v245,  v246,  v908,  v1005,  v1103,  v1201,  v1299,  v1397,  v1495,  v1593,  v1691,  v1788,  v1884,  v1979,  v2073,  v2166,  v2258,  v2349,  v2438,  v2525,  v2610,  v2693,  v2774,  v2853,  v2930,  v3005,  v3078,  v3149,  v3218,  v3285,  v3350,  v3413,  v3474,  v3533,  v3590,  v3645,  v3698,  v3749,  v3798,  v3845);
    v255 = sub_1000439E8( v247,  v248,  v249,  v250,  v251,  v252,  v253,  v254,  v909,  v1006,  v1104,  v1202,  v1300,  v1398,  v1496,  v1594,  v1692,  v1789,  v1885,  v1980,  v2074,  v2167,  v2259,  v2350,  v2439,  v2526,  v2611,  v2694,  v2775,  v2854,  v2931,  v3006,  v3079,  v3150,  v3219,  v3286,  v3351,  v3414,  v3475,  v3534,  v3591,  v3646,  v3699,  v3750,  v3799,  v3846,  v3891);
    v263 = sub_1000439E0( v255,  v256,  v257,  v258,  v259,  v260,  v261,  v262,  v910,  v1007,  v1105,  v1203,  v1301,  v1399,  v1497,  v1595,  v1693,  v1790,  v1886,  v1981,  v2075,  v2168,  v2260,  v2351,  v2440,  v2527,  v2612,  v2695,  v2776,  v2855,  v2932,  v3007,  v3080,  v3151,  v3220,  v3287,  v3352,  v3415,  v3476,  v3535,  v3592,  v3647,  v3700,  v3751,  v3800,  v3847,  v3892,  v3935);
    v271 = sub_1000439D8( v263,  v264,  v265,  v266,  v267,  v268,  v269,  v270,  v911,  v1008,  v1106,  v1204,  v1302,  v1400,  v1498,  v1596,  v1694,  v1791,  v1887,  v1982,  v2076,  v2169,  v2261,  v2352,  v2441,  v2528,  v2613,  v2696,  v2777,  v2856,  v2933,  v3008,  v3081,  v3152,  v3221,  v3288,  v3353,  v3416,  v3477,  v3536,  v3593,  v3648,  v3701,  v3752,  v3801,  v3848,  v3893,  v3936,  v3977);
    v279 = sub_1000439D0( v271,  v272,  v273,  v274,  v275,  v276,  v277,  v278,  v912,  v1009,  v1107,  v1205,  v1303,  v1401,  v1499,  v1597,  v1695,  v1792,  v1888,  v1983,  v2077,  v2170,  v2262,  v2353,  v2442,  v2529,  v2614,  v2697,  v2778,  v2857,  v2934,  v3009,  v3082,  v3153,  v3222,  v3289,  v3354,  v3417,  v3478,  v3537,  v3594,  v3649,  v3702,  v3753,  v3802,  v3849,  v3894,  v3937,  v3978,
             v4017);
    v287 = sub_1000439C8( v279,  v280,  v281,  v282,  v283,  v284,  v285,  v286,  v913,  v1010,  v1108,  v1206,  v1304,  v1402,  v1500,  v1598,  v1696,  v1793,  v1889,  v1984,  v2078,  v2171,  v2263,  v2354,  v2443,  v2530,  v2615,  v2698,  v2779,  v2858,  v2935,  v3010,  v3083,  v3154,  v3223,  v3290,  v3355,  v3418,  v3479,  v3538,  v3595,  v3650,  v3703,  v3754,  v3803,  v3850,  v3895,  v3938,  v3979,
             v4018,
             v4055);
    v295 = sub_1000439C0( v287,  v288,  v289,  v290,  v291,  v292,  v293,  v294,  v914,  v1011,  v1109,  v1207,  v1305,  v1403,  v1501,  v1599,  v1697,  v1794,  v1890,  v1985,  v2079,  v2172,  v2264,  v2355,  v2444,  v2531,  v2616,  v2699,  v2780,  v2859,  v2936,  v3011,  v3084,  v3155,  v3224,  v3291,  v3356,  v3419,  v3480,  v3539,  v3596,  v3651,  v3704,  v3755,  v3804,  v3851,  v3896,  v3939,  v3980,
             v4019,
             v4056,
             v4091);
    v303 = sub_1000439B8( v295,  v296,  v297,  v298,  v299,  v300,  v301,  v302,  v915,  v1012,  v1110,  v1208,  v1306,  v1404,  v1502,  v1600,  v1698,  v1795,  v1891,  v1986,  v2080,  v2173,  v2265,  v2356,  v2445,  v2532,  v2617,  v2700,  v2781,  v2860,  v2937,  v3012,  v3085,  v3156,  v3225,  v3292,  v3357,  v3420,  v3481,  v3540,  v3597,  v3652,  v3705,  v3756,  v3805,  v3852,  v3897,  v3940,  v3981,
             v4020,
             v4057,
             v4092,
             v4125);
    v311 = sub_1000439B0( v303,  v304,  v305,  v306,  v307,  v308,  v309,  v310,  v916,  v1013,  v1111,  v1209,  v1307,  v1405,  v1503,  v1601,  v1699,  v1796,  v1892,  v1987,  v2081,  v2174,  v2266,  v2357,  v2446,  v2533,  v2618,  v2701,  v2782,  v2861,  v2938,  v3013,  v3086,  v3157,  v3226,  v3293,  v3358,  v3421,  v3482,  v3541,  v3598,  v3653,  v3706,  v3757,  v3806,  v3853,  v3898,  v3941,  v3982,
             v4021,
             v4058,
             v4093,
             v4126,
             v4157);
    v319 = sub_1000439A8( v311,  v312,  v313,  v314,  v315,  v316,  v317,  v318,  v917,  v1014,  v1112,  v1210,  v1308,  v1406,  v1504,  v1602,  v1700,  v1797,  v1893,  v1988,  v2082,  v2175,  v2267,  v2358,  v2447,  v2534,  v2619,  v2702,  v2783,  v2862,  v2939,  v3014,  v3087,  v3158,  v3227,  v3294,  v3359,  v3422,  v3483,  v3542,  v3599,  v3654,  v3707,  v3758,  v3807,  v3854,  v3899,  v3942,  v3983,
             v4022,
             v4059,
             v4094,
             v4127,
             v4158,
             v4187);
    v327 = sub_1000439A0( v319,  v320,  v321,  v322,  v323,  v324,  v325,  v326,  v918,  v1015,  v1113,  v1211,  v1309,  v1407,  v1505,  v1603,  v1701,  v1798,  v1894,  v1989,  v2083,  v2176,  v2268,  v2359,  v2448,  v2535,  v2620,  v2703,  v2784,  v2863,  v2940,  v3015,  v3088,  v3159,  v3228,  v3295,  v3360,  v3423,  v3484,  v3543,  v3600,  v3655,  v3708,  v3759,  v3808,  v3855,  v3900,  v3943,  v3984,
             v4023,
             v4060,
             v4095,
             v4128,
             v4159,
             v4188,
             v4215);
    v335 = sub_100043998( v327,  v328,  v329,  v330,  v331,  v332,  v333,  v334,  v919,  v1016,  v1114,  v1212,  v1310,  v1408,  v1506,  v1604,  v1702,  v1799,  v1895,  v1990,  v2084,  v2177,  v2269,  v2360,  v2449,  v2536,  v2621,  v2704,  v2785,  v2864,  v2941,  v3016,  v3089,  v3160,  v3229,  v3296,  v3361,  v3424,  v3485,  v3544,  v3601,  v3656,  v3709,  v3760,  v3809,  v3856,  v3901,  v3944,  v3985,
             v4024,
             v4061,
             v4096,
             v4129,
             v4160,
             v4189,
             v4216,
             v4241);
    v343 = sub_100043990( v335,  v336,  v337,  v338,  v339,  v340,  v341,  v342,  v920,  v1017,  v1115,  v1213,  v1311,  v1409,  v1507,  v1605,  v1703,  v1800,  v1896,  v1991,  v2085,  v2178,  v2270,  v2361,  v2450,  v2537,  v2622,  v2705,  v2786,  v2865,  v2942,  v3017,  v3090,  v3161,  v3230,  v3297,  v3362,  v3425,  v3486,  v3545,  v3602,  v3657,  v3710,  v3761,  v3810,  v3857,  v3902,  v3945,  v3986,
             v4025,
             v4062,
             v4097,
             v4130,
             v4161,
             v4190,
             v4217,
             v4242,
             v4265);
    v351 = sub_100043988( v343,  v344,  v345,  v346,  v347,  v348,  v349,  v350,  v921,  v1018,  v1116,  v1214,  v1312,  v1410,  v1508,  v1606,  v1704,  v1801,  v1897,  v1992,  v2086,  v2179,  v2271,  v2362,  v2451,  v2538,  v2623,  v2706,  v2787,  v2866,  v2943,  v3018,  v3091,  v3162,  v3231,  v3298,  v3363,  v3426,  v3487,  v3546,  v3603,  v3658,  v3711,  v3762,  v3811,  v3858,  v3903,  v3946,  v3987,
             v4026,
             v4063,
             v4098,
             v4131,
             v4162,
             v4191,
             v4218,
             v4243,
             v4266,
             v4287);
    v359 = sub_100043980( v351,  v352,  v353,  v354,  v355,  v356,  v357,  v358,  v922,  v1019,  v1117,  v1215,  v1313,  v1411,  v1509,  v1607,  v1705,  v1802,  v1898,  v1993,  v2087,  v2180,  v2272,  v2363,  v2452,  v2539,  v2624,  v2707,  v2788,  v2867,  v2944,  v3019,  v3092,  v3163,  v3232,  v3299,  v3364,  v3427,  v3488,  v3547,  v3604,  v3659,  v3712,  v3763,  v3812,  v3859,  v3904,  v3947,  v3988,
             v4027,
             v4064,
             v4099,
             v4132,
             v4163,
             v4192,
             v4219,
             v4244,
             v4267,
             v4288,
             v4307);
    v367 = sub_100043978( v359,  v360,  v361,  v362,  v363,  v364,  v365,  v366,  v923,  v1020,  v1118,  v1216,  v1314,  v1412,  v1510,  v1608,  v1706,  v1803,  v1899,  v1994,  v2088,  v2181,  v2273,  v2364,  v2453,  v2540,  v2625,  v2708,  v2789,  v2868,  v2945,  v3020,  v3093,  v3164,  v3233,  v3300,  v3365,  v3428,  v3489,  v3548,  v3605,  v3660,  v3713,  v3764,  v3813,  v3860,  v3905,  v3948,  v3989,
             v4028,
             v4065,
             v4100,
             v4133,
             v4164,
             v4193,
             v4220,
             v4245,
             v4268,
             v4289,
             v4308,
             v4325);
    v375 = sub_100043970( v367,  v368,  v369,  v370,  v371,  v372,  v373,  v374,  v924,  v1021,  v1119,  v1217,  v1315,  v1413,  v1511,  v1609,  v1707,  v1804,  v1900,  v1995,  v2089,  v2182,  v2274,  v2365,  v2454,  v2541,  v2626,  v2709,  v2790,  v2869,  v2946,  v3021,  v3094,  v3165,  v3234,  v3301,  v3366,  v3429,  v3490,  v3549,  v3606,  v3661,  v3714,  v3765,  v3814,  v3861,  v3906,  v3949,  v3990,
             v4029,
             v4066,
             v4101,
             v4134,
             v4165,
             v4194,
             v4221,
             v4246,
             v4269,
             v4290,
             v4309,
             v4326,
             v4341);
    v383 = sub_100043968( v375,  v376,  v377,  v378,  v379,  v380,  v381,  v382,  v925,  v1022,  v1120,  v1218,  v1316,  v1414,  v1512,  v1610,  v1708,  v1805,  v1901,  v1996,  v2090,  v2183,  v2275,  v2366,  v2455,  v2542,  v2627,  v2710,  v2791,  v2870,  v2947,  v3022,  v3095,  v3166,  v3235,  v3302,  v3367,  v3430,  v3491,  v3550,  v3607,  v3662,  v3715,  v3766,  v3815,  v3862,  v3907,  v3950,  v3991,
             v4030,
             v4067,
             v4102,
             v4135,
             v4166,
             v4195,
             v4222,
             v4247,
             v4270,
             v4291,
             v4310,
             v4327,
             v4342,
             v4355);
    v391 = sub_100043960( v383,  v384,  v385,  v386,  v387,  v388,  v389,  v390,  v926,  v1023,  v1121,  v1219,  v1317,  v1415,  v1513,  v1611,  v1709,  v1806,  v1902,  v1997,  v2091,  v2184,  v2276,  v2367,  v2456,  v2543,  v2628,  v2711,  v2792,  v2871,  v2948,  v3023,  v3096,  v3167,  v3236,  v3303,  v3368,  v3431,  v3492,  v3551,  v3608,  v3663,  v3716,  v3767,  v3816,  v3863,  v3908,  v3951,  v3992,
             v4031,
             v4068,
             v4103,
             v4136,
             v4167,
             v4196,
             v4223,
             v4248,
             v4271,
             v4292,
             v4311,
             v4328,
             v4343,
             v4356);
    v399 = sub_100043958( v391,  v392,  v393,  v394,  v395,  v396,  v397,  v398,  v927,  v1024,  v1122,  v1220,  v1318,  v1416,  v1514,  v1612,  v1710,  v1807,  v1903,  v1998,  v2092,  v2185,  v2277,  v2368,  v2457,  v2544,  v2629,  v2712,  v2793,  v2872,  v2949,  v3024,  v3097,  v3168,  v3237,  v3304,  v3369,  v3432,  v3493,  v3552,  v3609,  v3664,  v3717,  v3768,  v3817,  v3864,  v3909,  v3952,  v3993,
             v4032,
             v4069,
             v4104,
             v4137,
             v4168,
             v4197,
             v4224,
             v4249,
             v4272,
             v4293,
             v4312,
             v4329,
             v4344,
             v4357);
    v407 = sub_100043950( v399,  v400,  v401,  v402,  v403,  v404,  v405,  v406,  v928,  v1025,  v1123,  v1221,  v1319,  v1417,  v1515,  v1613,  v1711,  v1808,  v1904,  v1999,  v2093,  v2186,  v2278,  v2369,  v2458,  v2545,  v2630,  v2713,  v2794,  v2873,  v2950,  v3025,  v3098,  v3169,  v3238,  v3305,  v3370,  v3433,  v3494,  v3553,  v3610,  v3665,  v3718,  v3769,  v3818,  v3865,  v3910,  v3953,  v3994,
             v4033,
             v4070,
             v4105,
             v4138,
             v4169,
             v4198,
             v4225,
             v4250,
             v4273,
             v4294,
             v4313,
             v4330,
             v4345,
             v4358);
    v415 = sub_100043948( v407,  v408,  v409,  v410,  v411,  v412,  v413,  v414,  v929,  v1026,  v1124,  v1222,  v1320,  v1418,  v1516,  v1614,  v1712,  v1809,  v1905,  v2000,  v2094,  v2187,  v2279,  v2370,  v2459,  v2546,  v2631,  v2714,  v2795,  v2874,  v2951,  v3026,  v3099,  v3170,  v3239,  v3306,  v3371,  v3434,  v3495,  v3554,  v3611,  v3666,  v3719,  v3770,  v3819,  v3866,  v3911,  v3954,  v3995,
             v4034,
             v4071,
             v4106,
             v4139,
             v4170,
             v4199,
             v4226,
             v4251,
             v4274,
             v4295,
             v4314,
             v4331,
             v4346,
             v4359);
    sub_100043940( v415,  v416,  v417,  v418,  v419,  v420,  v421,  v422,  v930,  v1027,  v1125,  v1223,  v1321,  v1419,  v1517,  v1615,  v1713,  v1810,  v1906,  v2001,  v2095,  v2188,  v2280,  v2371,  v2460,  v2547,  v2632,  v2715,  v2796,  v2875,  v2952,  v3027,  v3100,  v3171,  v3240,  v3307,  v3372,  v3435,  v3496,  v3555,  v3612,  v3667,  v3720,  v3771,  v3820,  v3867,  v3912,  v3955,  v3996,
      v4035,
      v4072,
      v4107,
      v4140,
      v4171,
      v4200,
      v4227,
      v4252,
      v4275,
      v4296,
      v4315,
      v4332,
      v4347,
      v4360);
    sub_100043938();
    sub_100043930();
    sub_100043928();
    sub_100043920();
    sub_100043D44();
    sub_100043DB4();
    sub_100043DAC();
    sub_100043EF0();
    sub_100043E50();
    sub_1000442E4();
    sub_1000442DC();
    sub_100044938();
    sub_100044D4C();
    sub_100044C9C();
    sub_100044948();
    sub_1000448DC();
    sub_100045DD8();
    sub_100045DD0();
    swift_task_dealloc(v4374);
    swift_task_dealloc(v4376);
    return sub_10000F308(*(uint64_t (**)(void))(v0 + 8));
  }

  else
  {
    v1616 = *(void *)(v0 + 1608);
    v1714 = *(void *)(v0 + 1600);
    v1811 = *(void *)(v0 + 1592);
    v1907 = *(void *)(v0 + 1584);
    v2002 = *(void *)(v0 + 1576);
    v2189 = *(void *)(v0 + 1544);
    v2281 = *(void *)(v0 + 1536);
    v1224 = *(void *)(v0 + 1520);
    v1322 = *(void *)(v0 + 1512);
    v1420 = *(void *)(v0 + 1552);
    v2461 = *(void *)(v0 + 1528);
    v2548 = *(void *)(v0 + 1504);
    v2716 = *(void *)(v0 + 1496);
    v2876 = *(void *)(v0 + 1488);
    v3028 = *(void *)(v0 + 1464);
    v3101 = *(void *)(v0 + 1456);
    v3241 = *(void *)(v0 + 1448);
    v3373 = *(void *)(v0 + 1440);
    v3497 = *(void *)(v0 + 1408);
    v3613 = *(void *)(v0 + 1400);
    v3721 = *(void *)(v0 + 1376);
    v3821 = *(void *)(v0 + 1368);
    v3868 = *(void *)(v0 + 1344);
    v3956 = *(void *)(v0 + 1336);
    v424 = *(void *)(v0 + 1312);
    v1028 = *(void *)(v0 + 1304);
    v1126 = *(void *)(v0 + 1320);
    v1518 = *(void *)(v0 + 1296);
    v4073 = *(void *)(v0 + 1288);
    v4141 = *(void *)(v0 + 1280);
    sub_100045710();
    v2372 = v425;
    v2633 = *(void *)(v0 + 1224);
    v2797 = *(void *)(v0 + 1216);
    v2953 = *(void *)(v0 + 1208);
    v3172 = *(void *)(v0 + 1200);
    v3308 = *(void *)(v0 + 1192);
    v3436 = *(void *)(v0 + 1184);
    v3556 = *(void *)(v0 + 1176);
    v3668 = *(void *)(v0 + 1168);
    v3772 = *(void *)(v0 + 1136);
    v3913 = *(void *)(v0 + 1128);
    v3997 = *(void *)(v0 + 1120);
    v4036 = *(void *)(v0 + 1104);
    v4108 = *(void *)(v0 + 1096);
    v4172 = *(void *)(v0 + 1072);
    v4201 = *(void *)(v0 + 1064);
    v4228 = *(void *)(v0 + 1040);
    v4253 = *(void *)(v0 + 1032);
    v4276 = *(void *)(v0 + 1000);
    v4297 = *(void *)(v0 + 976);
    v4316 = *(void *)(v0 + 968);
    v4333 = *(void *)(v0 + 960);
    v4348 = *(void *)(v0 + 952);
    v4361 = *(void *)(v0 + 944);
    v2096 = *(void *)(v0 + 768);
    sub_10004763C(v426);
    sub_100046284();
    sub_1000465C0();

    v427 = sub_10000F484();
    sub_1000431B8(v427, &qword_10006A388);
    sub_100044D3C(*(uint64_t (**)(uint64_t))(v424 + 8));
    sub_100046D6C(*(uint64_t (**)(uint64_t))(v1224 + 8));
    sub_100043B64();
    swift_release(v4375);
    sub_100042E4C();
    sub_100043F9C(v2, MEMORY[8]);
    sub_100043A38();
    sub_100043910(v1518, *(uint64_t (**)(uint64_t, uint64_t))(v49 + 8));
    sub_100043B04();
    v428 = sub_10000F3F4();
    v436 = sub_100043BBC( v428,  v429,  v430,  v431,  v432,  v433,  v434,  v435,  v886,  v1028,  v1126,  v1224,  v1322,  v1420,  v1518,  v1616);
    v444 = sub_100043BB4( v436,  v437,  v438,  v439,  v440,  v441,  v442,  v443,  v931,  v1029,  v1127,  v1225,  v1323,  v1421,  v1519,  v1617,  v1714);
    v452 = sub_1000435E4( v444,  v445,  v446,  v447,  v448,  v449,  v450,  v451,  v932,  v1030,  v1128,  v1226,  v1324,  v1422,  v1520,  v1618,  v1715,  v1811);
    v460 = sub_100043900( v452,  v453,  v454,  v455,  v456,  v457,  v458,  v459,  v933,  v1031,  v1129,  v1227,  v1325,  v1423,  v1521,  v1619,  v1716,  v1812,  v1907);
    sub_100043AE4( v460,  v461,  v462,  v463,  v464,  v465,  v466,  v467,  v934,  v1032,  v1130,  v1228,  v1326,  v1424,  v1522,  v1620,  v1717,  v1813,  v1908,  v2002);
    v468 = sub_10000F484();
    v476 = sub_100044940( v468,  v469,  v470,  v471,  v472,  v473,  v474,  v475,  v935,  v1033,  v1131,  v1229,  v1327,  v1425,  v1523,  v1621,  v1718,  v1814,  v1909,  v2003,  v2096,  v2189);
    v484 = sub_100044584( v476,  v477,  v478,  v479,  v480,  v481,  v482,  v483,  v936,  v1034,  v1132,  v1230,  v1328,  v1426,  v1524,  v1622,  v1719,  v1815,  v1910,  v2004,  v2097,  v2190,  v2281);
    v492 = sub_100043F40( v484,  v485,  v486,  v487,  v488,  v489,  v490,  v491,  v937,  v1035,  v1133,  v1231,  v1329,  v1427,  v1525,  v1623,  v1720,  v1816,  v1911,  v2005,  v2098,  v2191,  v2282,  v2372,  v2461);
    v500 = sub_1000436F0( v492,  v493,  v494,  v495,  v496,  v497,  v498,  v499,  v938,  v1036,  v1134,  v1232,  v1330,  v1428,  v1526,  v1624,  v1721,  v1817,  v1912,  v2006,  v2099,  v2192,  v2283,  v2373,  v2462,  v2548);
    v508 = sub_1000436C4( v500,  v501,  v502,  v503,  v504,  v505,  v506,  v507,  v939,  v1037,  v1135,  v1233,  v1331,  v1429,  v1527,  v1625,  v1722,  v1818,  v1913,  v2007,  v2100,  v2193,  v2284,  v2374,  v2463,  v2549,  v2633,  v2716);
    v516 = sub_100043658( v508,  v509,  v510,  v511,  v512,  v513,  v514,  v515,  v940,  v1038,  v1136,  v1234,  v1332,  v1430,  v1528,  v1626,  v1723,  v1819,  v1914,  v2008,  v2101,  v2194,  v2285,  v2375,  v2464,  v2550,  v2634,  v2717,  v2797,  v2876);
    v524 = sub_10004361C( v516,  v517,  v518,  v519,  v520,  v521,  v522,  v523,  v941,  v1039,  v1137,  v1235,  v1333,  v1431,  v1529,  v1627,  v1724,  v1820,  v1915,  v2009,  v2102,  v2195,  v2286,  v2376,  v2465,  v2551,  v2635,  v2718,  v2798,  v2877,  v2953,  v3028);
    v532 = sub_100043614( v524,  v525,  v526,  v527,  v528,  v529,  v530,  v531,  v942,  v1040,  v1138,  v1236,  v1334,  v1432,  v1530,  v1628,  v1725,  v1821,  v1916,  v2010,  v2103,  v2196,  v2287,  v2377,  v2466,  v2552,  v2636,  v2719,  v2799,  v2878,  v2954,  v3029,  v3101);
    v540 = sub_100043A40( v532,  v533,  v534,  v535,  v536,  v537,  v538,  v539,  v943,  v1041,  v1139,  v1237,  v1335,  v1433,  v1531,  v1629,  v1726,  v1822,  v1917,  v2011,  v2104,  v2197,  v2288,  v2378,  v2467,  v2553,  v2637,  v2720,  v2800,  v2879,  v2955,  v3030,  v3102,  v3172,  v3241);
    v548 = sub_10004384C( v540,  v541,  v542,  v543,  v544,  v545,  v546,  v547,  v944,  v1042,  v1140,  v1238,  v1336,  v1434,  v1532,  v1630,  v1727,  v1823,  v1918,  v2012,  v2105,  v2198,  v2289,  v2379,  v2468,  v2554,  v2638,  v2721,  v2801,  v2880,  v2956,  v3031,  v3103,  v3173,  v3242,  v3308,  v3373);
    v556 = sub_100043A28( v548,  v549,  v550,  v551,  v552,  v553,  v554,  v555,  v945,  v1043,  v1141,  v1239,  v1337,  v1435,  v1533,  v1631,  v1728,  v1824,  v1919,  v2013,  v2106,  v2199,  v2290,  v2380,  v2469,  v2555,  v2639,  v2722,  v2802,  v2881,  v2957,  v3032,  v3104,  v3174,  v3243,  v3309,  v3374,  v3436,  v3497);
    v564 = sub_100043A18( v556,  v557,  v558,  v559,  v560,  v561,  v562,  v563,  v946,  v1044,  v1142,  v1240,  v1338,  v1436,  v1534,  v1632,  v1729,  v1825,  v1920,  v2014,  v2107,  v2200,  v2291,  v2381,  v2470,  v2556,  v2640,  v2723,  v2803,  v2882,  v2958,  v3033,  v3105,  v3175,  v3244,  v3310,  v3375,  v3437,  v3498,  v3556,  v3613);
    v572 = sub_100043A08( v564,  v565,  v566,  v567,  v568,  v569,  v570,  v571,  v947,  v1045,  v1143,  v1241,  v1339,  v1437,  v1535,  v1633,  v1730,  v1826,  v1921,  v2015,  v2108,  v2201,  v2292,  v2382,  v2471,  v2557,  v2641,  v2724,  v2804,  v2883,  v2959,  v3034,  v3106,  v3176,  v3245,  v3311,  v3376,  v3438,  v3499,  v3557,  v3614,  v3668,  v3721);
    v580 = sub_1000439F8( v572,  v573,  v574,  v575,  v576,  v577,  v578,  v579,  v948,  v1046,  v1144,  v1242,  v1340,  v1438,  v1536,  v1634,  v1731,  v1827,  v1922,  v2016,  v2109,  v2202,  v2293,  v2383,  v2472,  v2558,  v2642,  v2725,  v2805,  v2884,  v2960,  v3035,  v3107,  v3177,  v3246,  v3312,  v3377,  v3439,  v3500,  v3558,  v3615,  v3669,  v3722,  v3772,  v3821);
    v588 = sub_1000439F0( v580,  v581,  v582,  v583,  v584,  v585,  v586,  v587,  v949,  v1047,  v1145,  v1243,  v1341,  v1439,  v1537,  v1635,  v1732,  v1828,  v1923,  v2017,  v2110,  v2203,  v2294,  v2384,  v2473,  v2559,  v2643,  v2726,  v2806,  v2885,  v2961,  v3036,  v3108,  v3178,  v3247,  v3313,  v3378,  v3440,  v3501,  v3559,  v3616,  v3670,  v3723,  v3773,  v3822,  v3868);
    sub_1000439E0( v588,  v589,  v590,  v591,  v592,  v593,  v594,  v595,  v950,  v1048,  v1146,  v1244,  v1342,  v1440,  v1538,  v1636,  v1733,  v1829,  v1924,  v2018,  v2111,  v2204,  v2295,  v2385,  v2474,  v2560,  v2644,  v2727,  v2807,  v2886,  v2962,  v3037,  v3109,  v3179,  v3248,  v3314,  v3379,  v3441,  v3502,  v3560,  v3617,  v3671,  v3724,  v3774,  v3823,  v3869,  v3913,  v3956);
    sub_10000F4EC();
    v596 = sub_10000F404();
    v604 = sub_1000439C8( v596,  v597,  v598,  v599,  v600,  v601,  v602,  v603,  v951,  v1049,  v1147,  v1245,  v1343,  v1441,  v1539,  v1637,  v1734,  v1830,  v1925,  v2019,  v2112,  v2205,  v2296,  v2386,  v2475,  v2561,  v2645,  v2728,  v2808,  v2887,  v2963,  v3038,  v3110,  v3180,  v3249,  v3315,  v3380,  v3442,  v3503,  v3561,  v3618,  v3672,  v3725,  v3775,  v3824,  v3870,  v3914,  v3957,  v3997,
             v4036,
             v4073);
    sub_1000439B8( v604,  v605,  v606,  v607,  v608,  v609,  v610,  v611,  v952,  v1050,  v1148,  v1246,  v1344,  v1442,  v1540,  v1638,  v1735,  v1831,  v1926,  v2020,  v2113,  v2206,  v2297,  v2387,  v2476,  v2562,  v2646,  v2729,  v2809,  v2888,  v2964,  v3039,  v3111,  v3181,  v3250,  v3316,  v3381,  v3443,  v3504,  v3562,  v3619,  v3673,  v3726,  v3776,  v3825,  v3871,  v3915,  v3958,  v3998,
      v4037,
      v4074,
      v4108,
      v4141);
    v612 = sub_10000F3FC();
    v620 = sub_100043EE8( v612,  v613,  v614,  v615,  v616,  v617,  v618,  v619,  v953,  v1051,  v1149,  v1247,  v1345,  v1443,  v1541,  v1639,  v1736,  v1832,  v1927,  v2021,  v2114,  v2207,  v2298,  v2388);
    v628 = sub_1000436E8( v620,  v621,  v622,  v623,  v624,  v625,  v626,  v627,  v954,  v1052,  v1150,  v1248,  v1346,  v1444,  v1542,  v1640,  v1737,  v1833,  v1928,  v2022,  v2115,  v2208,  v2299,  v2389,  v2477,  v2563,  v2647);
    v636 = sub_100043624( v628,  v629,  v630,  v631,  v632,  v633,  v634,  v635,  v955,  v1053,  v1151,  v1249,  v1347,  v1445,  v1543,  v1641,  v1738,  v1834,  v1929,  v2023,  v2116,  v2209,  v2300,  v2390,  v2478,  v2564,  v2648,  v2730,  v2810);
    v644 = sub_100043660( v636,  v637,  v638,  v639,  v640,  v641,  v642,  v643,  v956,  v1054,  v1152,  v1250,  v1348,  v1446,  v1544,  v1642,  v1739,  v1835,  v1930,  v2024,  v2117,  v2210,  v2301,  v2391,  v2479,  v2565,  v2649,  v2731,  v2811,  v2889,  v2965);
    v652 = sub_100043A48( v644,  v645,  v646,  v647,  v648,  v649,  v650,  v651,  v957,  v1055,  v1153,  v1251,  v1349,  v1447,  v1545,  v1643,  v1740,  v1836,  v1931,  v2025,  v2118,  v2211,  v2302,  v2392,  v2480,  v2566,  v2650,  v2732,  v2812,  v2890,  v2966,  v3040,  v3112,  v3182);
    v660 = sub_1000437F8( v652,  v653,  v654,  v655,  v656,  v657,  v658,  v659,  v958,  v1056,  v1154,  v1252,  v1350,  v1448,  v1546,  v1644,  v1741,  v1837,  v1932,  v2026,  v2119,  v2212,  v2303,  v2393,  v2481,  v2567,  v2651,  v2733,  v2813,  v2891,  v2967,  v3041,  v3113,  v3183,  v3251,  v3317);
    v668 = sub_100043A30( v660,  v661,  v662,  v663,  v664,  v665,  v666,  v667,  v959,  v1057,  v1155,  v1253,  v1351,  v1449,  v1547,  v1645,  v1742,  v1838,  v1933,  v2027,  v2120,  v2213,  v2304,  v2394,  v2482,  v2568,  v2652,  v2734,  v2814,  v2892,  v2968,  v3042,  v3114,  v3184,  v3252,  v3318,  v3382,  v3444);
    v676 = sub_100043A20( v668,  v669,  v670,  v671,  v672,  v673,  v674,  v675,  v960,  v1058,  v1156,  v1254,  v1352,  v1450,  v1548,  v1646,  v1743,  v1839,  v1934,  v2028,  v2121,  v2214,  v2305,  v2395,  v2483,  v2569,  v2653,  v2735,  v2815,  v2893,  v2969,  v3043,  v3115,  v3185,  v3253,  v3319,  v3383,  v3445,  v3505,  v3563);
    v684 = sub_100043A10( v676,  v677,  v678,  v679,  v680,  v681,  v682,  v683,  v961,  v1059,  v1157,  v1255,  v1353,  v1451,  v1549,  v1647,  v1744,  v1840,  v1935,  v2029,  v2122,  v2215,  v2306,  v2396,  v2484,  v2570,  v2654,  v2736,  v2816,  v2894,  v2970,  v3044,  v3116,  v3186,  v3254,  v3320,  v3384,  v3446,  v3506,  v3564,  v3620,  v3674);
    v692 = sub_100043A00( v684,  v685,  v686,  v687,  v688,  v689,  v690,  v691,  v962,  v1060,  v1158,  v1256,  v1354,  v1452,  v1550,  v1648,  v1745,  v1841,  v1936,  v2030,  v2123,  v2216,  v2307,  v2397,  v2485,  v2571,  v2655,  v2737,  v2817,  v2895,  v2971,  v3045,  v3117,  v3187,  v3255,  v3321,  v3385,  v3447,  v3507,  v3565,  v3621,  v3675,  v3727,  v3777);
    v700 = sub_1000439E8( v692,  v693,  v694,  v695,  v696,  v697,  v698,  v699,  v963,  v1061,  v1159,  v1257,  v1355,  v1453,  v1551,  v1649,  v1746,  v1842,  v1937,  v2031,  v2124,  v2217,  v2308,  v2398,  v2486,  v2572,  v2656,  v2738,  v2818,  v2896,  v2972,  v3046,  v3118,  v3188,  v3256,  v3322,  v3386,  v3448,  v3508,  v3566,  v3622,  v3676,  v3728,  v3778,  v3826,  v3872,  v3916);
    v708 = sub_1000439D8( v700,  v701,  v702,  v703,  v704,  v705,  v706,  v707,  v964,  v1062,  v1160,  v1258,  v1356,  v1454,  v1552,  v1650,  v1747,  v1843,  v1938,  v2032,  v2125,  v2218,  v2309,  v2399,  v2487,  v2573,  v2657,  v2739,  v2819,  v2897,  v2973,  v3047,  v3119,  v3189,  v3257,  v3323,  v3387,  v3449,  v3509,  v3567,  v3623,  v3677,  v3729,  v3779,  v3827,  v3873,  v3917,  v3959,  v3999);
    v716 = sub_1000439D0( v708,  v709,  v710,  v711,  v712,  v713,  v714,  v715,  v965,  v1063,  v1161,  v1259,  v1357,  v1455,  v1553,  v1651,  v1748,  v1844,  v1939,  v2033,  v2126,  v2219,  v2310,  v2400,  v2488,  v2574,  v2658,  v2740,  v2820,  v2898,  v2974,  v3048,  v3120,  v3190,  v3258,  v3324,  v3388,  v3450,  v3510,  v3568,  v3624,  v3678,  v3730,  v3780,  v3828,  v3874,  v3918,  v3960,  v4000,
             v4038);
    v724 = sub_1000439C0( v716,  v717,  v718,  v719,  v720,  v721,  v722,  v723,  v966,  v1064,  v1162,  v1260,  v1358,  v1456,  v1554,  v1652,  v1749,  v1845,  v1940,  v2034,  v2127,  v2220,  v2311,  v2401,  v2489,  v2575,  v2659,  v2741,  v2821,  v2899,  v2975,  v3049,  v3121,  v3191,  v3259,  v3325,  v3389,  v3451,  v3511,  v3569,  v3625,  v3679,  v3731,  v3781,  v3829,  v3875,  v3919,  v3961,  v4001,
             v4039,
             v4075,
             v4109);
    v732 = sub_1000439B0( v724,  v725,  v726,  v727,  v728,  v729,  v730,  v731,  v967,  v1065,  v1163,  v1261,  v1359,  v1457,  v1555,  v1653,  v1750,  v1846,  v1941,  v2035,  v2128,  v2221,  v2312,  v2402,  v2490,  v2576,  v2660,  v2742,  v2822,  v2900,  v2976,  v3050,  v3122,  v3192,  v3260,  v3326,  v3390,  v3452,  v3512,  v3570,  v3626,  v3680,  v3732,  v3782,  v3830,  v3876,  v3920,  v3962,  v4002,
             v4040,
             v4076,
             v4110,
             v4142,
             v4172);
    v740 = sub_1000439A8( v732,  v733,  v734,  v735,  v736,  v737,  v738,  v739,  v968,  v1066,  v1164,  v1262,  v1360,  v1458,  v1556,  v1654,  v1751,  v1847,  v1942,  v2036,  v2129,  v2222,  v2313,  v2403,  v2491,  v2577,  v2661,  v2743,  v2823,  v2901,  v2977,  v3051,  v3123,  v3193,  v3261,  v3327,  v3391,  v3453,  v3513,  v3571,  v3627,  v3681,  v3733,  v3783,  v3831,  v3877,  v3921,  v3963,  v4003,
             v4041,
             v4077,
             v4111,
             v4143,
             v4173,
             v4201);
    v748 = sub_1000439A0( v740,  v741,  v742,  v743,  v744,  v745,  v746,  v747,  v969,  v1067,  v1165,  v1263,  v1361,  v1459,  v1557,  v1655,  v1752,  v1848,  v1943,  v2037,  v2130,  v2223,  v2314,  v2404,  v2492,  v2578,  v2662,  v2744,  v2824,  v2902,  v2978,  v3052,  v3124,  v3194,  v3262,  v3328,  v3392,  v3454,  v3514,  v3572,  v3628,  v3682,  v3734,  v3784,  v3832,  v3878,  v3922,  v3964,  v4004,
             v4042,
             v4078,
             v4112,
             v4144,
             v4174,
             v4202,
             v4228);
    v756 = sub_100043998( v748,  v749,  v750,  v751,  v752,  v753,  v754,  v755,  v970,  v1068,  v1166,  v1264,  v1362,  v1460,  v1558,  v1656,  v1753,  v1849,  v1944,  v2038,  v2131,  v2224,  v2315,  v2405,  v2493,  v2579,  v2663,  v2745,  v2825,  v2903,  v2979,  v3053,  v3125,  v3195,  v3263,  v3329,  v3393,  v3455,  v3515,  v3573,  v3629,  v3683,  v3735,  v3785,  v3833,  v3879,  v3923,  v3965,  v4005,
             v4043,
             v4079,
             v4113,
             v4145,
             v4175,
             v4203,
             v4229,
             v4253);
    v764 = sub_100043990( v756,  v757,  v758,  v759,  v760,  v761,  v762,  v763,  v971,  v1069,  v1167,  v1265,  v1363,  v1461,  v1559,  v1657,  v1754,  v1850,  v1945,  v2039,  v2132,  v2225,  v2316,  v2406,  v2494,  v2580,  v2664,  v2746,  v2826,  v2904,  v2980,  v3054,  v3126,  v3196,  v3264,  v3330,  v3394,  v3456,  v3516,  v3574,  v3630,  v3684,  v3736,  v3786,  v3834,  v3880,  v3924,  v3966,  v4006,
             v4044,
             v4080,
             v4114,
             v4146,
             v4176,
             v4204,
             v4230,
             v4254,
             v4276);
    v772 = sub_100043988( v764,  v765,  v766,  v767,  v768,  v769,  v770,  v771,  v972,  v1070,  v1168,  v1266,  v1364,  v1462,  v1560,  v1658,  v1755,  v1851,  v1946,  v2040,  v2133,  v2226,  v2317,  v2407,  v2495,  v2581,  v2665,  v2747,  v2827,  v2905,  v2981,  v3055,  v3127,  v3197,  v3265,  v3331,  v3395,  v3457,  v3517,  v3575,  v3631,  v3685,  v3737,  v3787,  v3835,  v3881,  v3925,  v3967,  v4007,
             v4045,
             v4081,
             v4115,
             v4147,
             v4177,
             v4205,
             v4231,
             v4255,
             v4277,
             v4297);
    v780 = sub_100043980( v772,  v773,  v774,  v775,  v776,  v777,  v778,  v779,  v973,  v1071,  v1169,  v1267,  v1365,  v1463,  v1561,  v1659,  v1756,  v1852,  v1947,  v2041,  v2134,  v2227,  v2318,  v2408,  v2496,  v2582,  v2666,  v2748,  v2828,  v2906,  v2982,  v3056,  v3128,  v3198,  v3266,  v3332,  v3396,  v3458,  v3518,  v3576,  v3632,  v3686,  v3738,  v3788,  v3836,  v3882,  v3926,  v3968,  v4008,
             v4046,
             v4082,
             v4116,
             v4148,
             v4178,
             v4206,
             v4232,
             v4256,
             v4278,
             v4298,
             v4316);
    v788 = sub_100043978( v780,  v781,  v782,  v783,  v784,  v785,  v786,  v787,  v974,  v1072,  v1170,  v1268,  v1366,  v1464,  v1562,  v1660,  v1757,  v1853,  v1948,  v2042,  v2135,  v2228,  v2319,  v2409,  v2497,  v2583,  v2667,  v2749,  v2829,  v2907,  v2983,  v3057,  v3129,  v3199,  v3267,  v3333,  v3397,  v3459,  v3519,  v3577,  v3633,  v3687,  v3739,  v3789,  v3837,  v3883,  v3927,  v3969,  v4009,
             v4047,
             v4083,
             v4117,
             v4149,
             v4179,
             v4207,
             v4233,
             v4257,
             v4279,
             v4299,
             v4317,
             v4333);
    v796 = sub_100043970( v788,  v789,  v790,  v791,  v792,  v793,  v794,  v795,  v975,  v1073,  v1171,  v1269,  v1367,  v1465,  v1563,  v1661,  v1758,  v1854,  v1949,  v2043,  v2136,  v2229,  v2320,  v2410,  v2498,  v2584,  v2668,  v2750,  v2830,  v2908,  v2984,  v3058,  v3130,  v3200,  v3268,  v3334,  v3398,  v3460,  v3520,  v3578,  v3634,  v3688,  v3740,  v3790,  v3838,  v3884,  v3928,  v3970,  v4010,
             v4048,
             v4084,
             v4118,
             v4150,
             v4180,
             v4208,
             v4234,
             v4258,
             v4280,
             v4300,
             v4318,
             v4334,
             v4348);
    v804 = sub_100043968( v796,  v797,  v798,  v799,  v800,  v801,  v802,  v803,  v976,  v1074,  v1172,  v1270,  v1368,  v1466,  v1564,  v1662,  v1759,  v1855,  v1950,  v2044,  v2137,  v2230,  v2321,  v2411,  v2499,  v2585,  v2669,  v2751,  v2831,  v2909,  v2985,  v3059,  v3131,  v3201,  v3269,  v3335,  v3399,  v3461,  v3521,  v3579,  v3635,  v3689,  v3741,  v3791,  v3839,  v3885,  v3929,  v3971,  v4011,
             v4049,
             v4085,
             v4119,
             v4151,
             v4181,
             v4209,
             v4235,
             v4259,
             v4281,
             v4301,
             v4319,
             v4335,
             v4349,
             v4361);
    v812 = sub_100043960( v804,  v805,  v806,  v807,  v808,  v809,  v810,  v811,  v977,  v1075,  v1173,  v1271,  v1369,  v1467,  v1565,  v1663,  v1760,  v1856,  v1951,  v2045,  v2138,  v2231,  v2322,  v2412,  v2500,  v2586,  v2670,  v2752,  v2832,  v2910,  v2986,  v3060,  v3132,  v3202,  v3270,  v3336,  v3400,  v3462,  v3522,  v3580,  v3636,  v3690,  v3742,  v3792,  v3840,  v3886,  v3930,  v3972,  v4012,
             v4050,
             v4086,
             v4120,
             v4152,
             v4182,
             v4210,
             v4236,
             v4260,
             v4282,
             v4302,
             v4320,
             v4336,
             v4350,
             v4362);
    v820 = sub_100043958( v812,  v813,  v814,  v815,  v816,  v817,  v818,  v819,  v978,  v1076,  v1174,  v1272,  v1370,  v1468,  v1566,  v1664,  v1761,  v1857,  v1952,  v2046,  v2139,  v2232,  v2323,  v2413,  v2501,  v2587,  v2671,  v2753,  v2833,  v2911,  v2987,  v3061,  v3133,  v3203,  v3271,  v3337,  v3401,  v3463,  v3523,  v3581,  v3637,  v3691,  v3743,  v3793,  v3841,  v3887,  v3931,  v3973,  v4013,
             v4051,
             v4087,
             v4121,
             v4153,
             v4183,
             v4211,
             v4237,
             v4261,
             v4283,
             v4303,
             v4321,
             v4337,
             v4351,
             v4363);
    v828 = sub_100043950( v820,  v821,  v822,  v823,  v824,  v825,  v826,  v827,  v979,  v1077,  v1175,  v1273,  v1371,  v1469,  v1567,  v1665,  v1762,  v1858,  v1953,  v2047,  v2140,  v2233,  v2324,  v2414,  v2502,  v2588,  v2672,  v2754,  v2834,  v2912,  v2988,  v3062,  v3134,  v3204,  v3272,  v3338,  v3402,  v3464,  v3524,  v3582,  v3638,  v3692,  v3744,  v3794,  v3842,  v3888,  v3932,  v3974,  v4014,
             v4052,
             v4088,
             v4122,
             v4154,
             v4184,
             v4212,
             v4238,
             v4262,
             v4284,
             v4304,
             v4322,
             v4338,
             v4352,
             v4364);
    v836 = sub_100043948( v828,  v829,  v830,  v831,  v832,  v833,  v834,  v835,  v980,  v1078,  v1176,  v1274,  v1372,  v1470,  v1568,  v1666,  v1763,  v1859,  v1954,  v2048,  v2141,  v2234,  v2325,  v2415,  v2503,  v2589,  v2673,  v2755,  v2835,  v2913,  v2989,  v3063,  v3135,  v3205,  v3273,  v3339,  v3403,  v3465,  v3525,  v3583,  v3639,  v3693,  v3745,  v3795,  v3843,  v3889,  v3933,  v3975,  v4015,
             v4053,
             v4089,
             v4123,
             v4155,
             v4185,
             v4213,
             v4239,
             v4263,
             v4285,
             v4305,
             v4323,
             v4339,
             v4353,
             v4365);
    sub_100043940( v836,  v837,  v838,  v839,  v840,  v841,  v842,  v843,  v981,  v1079,  v1177,  v1275,  v1373,  v1471,  v1569,  v1667,  v1764,  v1860,  v1955,  v2049,  v2142,  v2235,  v2326,  v2416,  v2504,  v2590,  v2674,  v2756,  v2836,  v2914,  v2990,  v3064,  v3136,  v3206,  v3274,  v3340,  v3404,  v3466,  v3526,  v3584,  v3640,  v3694,  v3746,  v3796,  v3844,  v3890,  v3934,  v3976,  v4016,
      v4054,
      v4090,
      v4124,
      v4156,
      v4186,
      v4214,
      v4240,
      v4264,
      v4286,
      v4306,
      v4324,
      v4340,
      v4354,
      v4366);
    sub_100043938();
    sub_100043930();
    sub_100043928();
    sub_100043920();
    sub_100043D44();
    v844 = sub_100043DB4();
    sub_100044AF4( v844,  v845,  v846,  v847,  v848,  v849,  v850,  v851,  v982,  v1080,  v1178,  v1276,  v1374,  v1472,  v1570,  v1668,  v1765,  v1861,  v1956,  v2050,  v2143);
    sub_100043DAC();
    sub_100043EF0();
    sub_100043E50();
    sub_1000442E4();
    sub_1000442DC();
    sub_100044938();
    sub_100044D4C();
    sub_100044C9C();
    sub_100044948();
    sub_1000448DC();
    sub_100044FDC();
    v852 = (uint64_t (*)(void))sub_10000F588();
    return sub_10000F308(v852);
  }

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

uint64_t sub_10000CD70(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v21 = a1;
  uint64_t v6 = a2 + 56;
  uint64_t v7 = 1LL << *(_BYTE *)(a2 + 32);
  uint64_t v8 = -1LL;
  if (v7 < 64) {
    uint64_t v8 = ~(-1LL << v7);
  }
  unint64_t v9 = v8 & *(void *)(a2 + 56);
  int64_t v10 = (unint64_t)(v7 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain(a2);
  int64_t v12 = 0LL;
  if (!v9) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v13 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  for (unint64_t i = v13 | (v12 << 6); ; unint64_t i = __clz(__rbit64(v16)) + (v12 << 6))
  {
    id v18 = (uint64_t *)(*(void *)(a2 + 48) + 16 * i);
    uint64_t v19 = v18[1];
    v20[0] = *v18;
    v20[1] = v19;
    swift_bridgeObjectRetain(v19);
    sub_10000D3C8(&v21, v20, a3);
    if (v3)
    {

      swift_release(a2);
      return swift_bridgeObjectRelease(v19);
    }

    uint64_t result = swift_bridgeObjectRelease(v19);
    if (v9) {
      goto LABEL_4;
    }
LABEL_5:
    if (__OFADD__(v12++, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v12 >= v10) {
      goto LABEL_26;
    }
    unint64_t v16 = *(void *)(v6 + 8 * v12);
    if (!v16) {
      break;
    }
LABEL_17:
    unint64_t v9 = (v16 - 1) & v16;
  }

  int64_t v17 = v12 + 1;
  if (v12 + 1 >= v10) {
    goto LABEL_26;
  }
  unint64_t v16 = *(void *)(v6 + 8 * v17);
  if (v16) {
    goto LABEL_16;
  }
  int64_t v17 = v12 + 2;
  if (v12 + 2 >= v10) {
    goto LABEL_26;
  }
  unint64_t v16 = *(void *)(v6 + 8 * v17);
  if (v16) {
    goto LABEL_16;
  }
  int64_t v17 = v12 + 3;
  if (v12 + 3 >= v10) {
    goto LABEL_26;
  }
  unint64_t v16 = *(void *)(v6 + 8 * v17);
  if (v16) {
    goto LABEL_16;
  }
  int64_t v17 = v12 + 4;
  if (v12 + 4 >= v10)
  {
LABEL_26:

    swift_release(a2);
    return v21;
  }

  unint64_t v16 = *(void *)(v6 + 8 * v17);
  if (v16)
  {
LABEL_16:
    int64_t v12 = v17;
    goto LABEL_17;
  }

  while (1)
  {
    int64_t v12 = v17 + 1;
    if (__OFADD__(v17, 1LL)) {
      break;
    }
    if (v12 >= v10) {
      goto LABEL_26;
    }
    unint64_t v16 = *(void *)(v6 + 8 * v12);
    ++v17;
    if (v16) {
      goto LABEL_17;
    }
  }

uint64_t sub_10000CF28(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5 = 1LL << *(_BYTE *)(a2 + 32);
  uint64_t v6 = -1LL;
  if (v5 < 64) {
    uint64_t v6 = ~(-1LL << v5);
  }
  unint64_t v7 = v6 & *(void *)(a2 + 56);
  int64_t v8 = (unint64_t)(v5 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain(a2);
  int64_t v10 = 0LL;
  if (!v7) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v11 = __clz(__rbit64(v7));
  v7 &= v7 - 1;
  for (unint64_t i = v11 | (v10 << 6); ; unint64_t i = __clz(__rbit64(v14)) + (v10 << 6))
  {
    uint64_t v16 = *(void *)(*(void *)(a2 + 48) + 16 * i + 8);
    swift_bridgeObjectRetain(v16);
    NSString v17 = String._bridgeToObjectiveC()();
    id v18 = [a3 createActionsForBundleIdentifier:v17];

    uint64_t v19 = sub_10000E518(0LL, &qword_100069E08, &OBJC_CLASS___WFAction_ptr);
    unint64_t v20 = sub_10000E550();
    uint64_t v21 = static Set._unconditionallyBridgeFromObjectiveC(_:)(v18, v19, v20);

    sub_10000CAD4(v21);
    uint64_t result = swift_bridgeObjectRelease(v16);
    if (v7) {
      goto LABEL_4;
    }
LABEL_5:
    int64_t v13 = v10 + 1;
    if (__OFADD__(v10, 1LL))
    {
      __break(1u);
      goto LABEL_25;
    }

    if (v13 >= v8) {
      goto LABEL_23;
    }
    unint64_t v14 = *(void *)(v22 + 8 * v13);
    ++v10;
    if (!v14)
    {
      int64_t v10 = v13 + 1;
      if (v13 + 1 >= v8) {
        goto LABEL_23;
      }
      unint64_t v14 = *(void *)(v22 + 8 * v10);
      if (!v14)
      {
        int64_t v10 = v13 + 2;
        if (v13 + 2 >= v8) {
          goto LABEL_23;
        }
        unint64_t v14 = *(void *)(v22 + 8 * v10);
        if (!v14)
        {
          int64_t v10 = v13 + 3;
          if (v13 + 3 >= v8) {
            goto LABEL_23;
          }
          unint64_t v14 = *(void *)(v22 + 8 * v10);
          if (!v14) {
            break;
          }
        }
      }
    }

LABEL_20:
    unint64_t v7 = (v14 - 1) & v14;
  }

  int64_t v15 = v13 + 4;
  if (v15 >= v8)
  {
LABEL_23:

    swift_release(a2);
    return a1;
  }

  unint64_t v14 = *(void *)(v22 + 8 * v15);
  if (v14)
  {
    int64_t v10 = v15;
    goto LABEL_20;
  }

  while (1)
  {
    int64_t v10 = v15 + 1;
    if (__OFADD__(v15, 1LL)) {
      break;
    }
    if (v10 >= v8) {
      goto LABEL_23;
    }
    unint64_t v14 = *(void *)(v22 + 8 * v10);
    ++v15;
    if (v14) {
      goto LABEL_20;
    }
  }

    unint64_t v7 = (v12 - 1) & v12;
  }

  int64_t v13 = v11 + 4;
  if (v13 >= v8)
  {
LABEL_23:
    swift_release(v2);
    return v18;
  }

  int64_t v12 = *(void *)(v4 + 8 * v13);
  if (v12)
  {
    uint64_t v3 = v13;
    goto LABEL_20;
  }

  while (1)
  {
    uint64_t v3 = v13 + 1;
    if (__OFADD__(v13, 1LL)) {
      break;
    }
    if (v3 >= v8) {
      goto LABEL_23;
    }
    int64_t v12 = *(void *)(v4 + 8 * v3);
    ++v13;
    if (v12) {
      goto LABEL_20;
    }
  }

      int64_t v8 = (v15 - 1) & v15;
    }
  }

  sub_100043678();
  *uint64_t v1 = v4;
}

          unint64_t v11 = (v17 - 1) & v17;
          int64_t v12 = __clz(__rbit64(v17)) + (v13 << 6);
          unint64_t v9 = v13;
        }

        uint64_t v19 = (uint64_t *)(*(void *)(*a5 + 48LL) + 16 * v12);
        uint64_t v21 = *v19;
        unint64_t v20 = v19[1];
        a5[3] = v9;
        a5[4] = v11;
        Hasher.init(_seed:)(v41, *(void *)(a3 + 40));
        swift_bridgeObjectRetain(v20);
        String.hash(into:)(v41, v21, v20);
        uint64_t v22 = Hasher._finalize()();
        uint64_t v23 = -1LL << *(_BYTE *)(a3 + 32);
        id v24 = v22 & ~v23;
        unint64_t v25 = v24 >> 6;
        os_signpost_id_t v26 = 1LL << v24;
        if (((1LL << v24) & *(void *)(v42 + 8 * (v24 >> 6))) != 0) {
          break;
        }
LABEL_38:
        uint64_t result = (unint64_t *)swift_bridgeObjectRelease(v20);
      }

      uint64_t v27 = *(void *)(a3 + 48);
      uint64_t v28 = (void *)(v27 + 16 * v24);
      uint64_t v29 = v28[1];
      uint64_t v30 = *v28 == v21 && v29 == v20;
      if (!v30 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v28, v29, v21, v20, 0LL) & 1) == 0)
      {
        uint64_t v32 = ~v23;
        for (unint64_t i = v24 + 1; ; unint64_t i = v34 + 1)
        {
          uint64_t v34 = i & v32;
          uint64_t v35 = (void *)(v27 + 16 * v34);
          uint64_t v36 = v35[1];
          int v37 = *v35 == v21 && v36 == v20;
          if (v37 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v35, v36, v21, v20, 0LL) & 1) != 0)
          {
            uint64_t result = (unint64_t *)swift_bridgeObjectRelease(v20);
            unint64_t v25 = v34 >> 6;
            os_signpost_id_t v26 = 1LL << v34;
            goto LABEL_28;
          }
        }

        goto LABEL_38;
      }

      uint64_t result = (unint64_t *)swift_bridgeObjectRelease(v20);
LABEL_28:
      uint64_t v31 = v40[v25];
      v40[v25] = v31 & ~v26;
    }

    while ((v26 & v31) == 0);
    int64_t v8 = v39 - 1;
    if (__OFSUB__(v39, 1LL))
    {
LABEL_46:
      __break(1u);
      return result;
    }

    if (v39 != 1) {
      continue;
    }
    return (unint64_t *)&_swiftEmptySetSingleton;
  }

LABEL_25:
  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

    int64_t v13 = (v18 - 1) & v18;
  }

  uint64_t v19 = v17 + 3;
  if (v19 >= v14) {
    goto LABEL_28;
  }
  id v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
    unint64_t v9 = v19;
    goto LABEL_25;
  }

  while (1)
  {
    unint64_t v9 = v19 + 1;
    if (__OFADD__(v19, 1LL)) {
      break;
    }
    if (v9 >= v14) {
      goto LABEL_28;
    }
    id v18 = *(void *)(v6 + 8 * v9);
    ++v19;
    if (v18) {
      goto LABEL_25;
    }
  }

    int64_t v13 = (v18 - 1) & v18;
  }

  uint64_t v19 = v17 + 3;
  if (v19 >= v14) {
    goto LABEL_28;
  }
  id v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
    unint64_t v9 = v19;
    goto LABEL_25;
  }

  while (1)
  {
    unint64_t v9 = v19 + 1;
    if (__OFADD__(v19, 1LL)) {
      break;
    }
    if (v9 >= v14) {
      goto LABEL_28;
    }
    id v18 = *(void *)(v6 + 8 * v9);
    ++v19;
    if (v18) {
      goto LABEL_25;
    }
  }

    sub_100046A38();
  }

  unint64_t v25 = v24 + 3;
  if (v25 >= v21)
  {
LABEL_28:
    sub_100044EE8();
    uint64_t v3 = v28;
    goto LABEL_30;
  }

  if (v12[v25])
  {
    uint64_t v16 = v25;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v16 = v25 + 1;
    if (__OFADD__(v25, 1LL)) {
      break;
    }
    if (v16 >= v21) {
      goto LABEL_28;
    }
    ++v25;
    if (v12[v16]) {
      goto LABEL_25;
    }
  }

    *(void *)(v34 + (((unint64_t)a1 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) &= (-1LL << a1) - 1;
    uint64_t result = swift_release(v7);
    uint64_t v1 = v32;
  }

  else
  {
    *(void *)(v8 + (((unint64_t)a1 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) &= (-1LL << a1) - 1;
  }

  uint64_t v28 = *v1;
  uint64_t v29 = *(void *)(*v1 + 16);
  uint64_t v30 = __OFSUB__(v29, 1LL);
  uint64_t v31 = v29 - 1;
  if (v30)
  {
    __break(1u);
  }

  else
  {
    *(void *)(v28 + 16) = v31;
    ++*(_DWORD *)(v28 + 36);
  }

  return result;
}

uint64_t sub_10000D13C()
{
  uint64_t v1 = (const char *)type metadata accessor for OSSignpostError(0LL);
  uint64_t v29 = *((void *)v1 - 1);
  uint64_t v30 = v1;
  __chkstk_darwin(v1);
  uint64_t v3 = &v27[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v31 = type metadata accessor for OSSignpostID(0LL);
  uint64_t v4 = *(void *)(v31 - 8);
  uint64_t v5 = __chkstk_darwin(v31);
  unint64_t v7 = &v27[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  __chkstk_darwin(v5);
  unint64_t v9 = &v27[-v8];
  uint64_t v10 = type metadata accessor for OSSignposter(0LL);
  uint64_t v32 = *(void *)(v10 - 8);
  uint64_t v33 = v10;
  __chkstk_darwin(v10);
  sub_10000F570();
  uint64_t v11 = WFLogSignpost.signposter.getter();
  unint64_t v12 = WFLogSignpost.name.getter(v11);
  char v14 = v13;
  uint64_t v15 = WFLogSignpost.state.getter();
  uint64_t v16 = (void *)OSSignposter.logHandle.getter();
  uint64_t v17 = OSSignpostIntervalState.signpostID.getter();
  int v28 = static os_signpost_type_t.end.getter(v17);
  uint64_t result = OS_os_log.signpostsEnabled.getter();
  if ((result & 1) == 0)
  {
    sub_10000F69C();

    (*(void (**)(_BYTE *, uint64_t))(v4 + 8))(v9, v31);
    return (*(uint64_t (**)(uint64_t, uint64_t))(v32 + 8))(v0, v33);
  }

  if ((v14 & 1) == 0)
  {
    if (v12)
    {
      uint64_t v20 = v29;
      uint64_t v19 = v30;
LABEL_10:
      uint64_t v21 = swift_retain(v15);
      checkForErrorAndConsumeState(state:)(v21);
      sub_10000F69C();
      if ((*(unsigned int (**)(_BYTE *, const char *))(v20 + 88))(v3, v19) == enum case for OSSignpostError.doubleEnd(_:))
      {
        uint64_t v22 = "[Error] Interval already ended";
      }

      else
      {
        (*(void (**)(_BYTE *, const char *))(v20 + 8))(v3, v19);
        uint64_t v22 = "";
      }

      uint64_t v30 = v22;
      uint64_t v23 = v31;
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v4 + 16))(v7, v9, v31);
      id v24 = (uint8_t *)sub_10000F2FC();
      *(_WORD *)id v24 = 0;
      os_signpost_id_t v25 = OSSignpostID.rawValue.getter();
      sub_10000F530( (void *)&_mh_execute_header,  (os_log_s *)v16,  (os_signpost_type_t)v28,  v25,  (const char *)v12,  v30,  v24);
      os_signpost_id_t v26 = *(void (**)(_BYTE *, uint64_t))(v4 + 8);
      v26(v7, v23);
      sub_10000F2F0((uint64_t)v24);
      sub_10000F69C();

      v26(v9, v23);
      return (*(uint64_t (**)(uint64_t, uint64_t))(v32 + 8))(v0, v33);
    }

    __break(1u);
    goto LABEL_16;
  }

  if (HIDWORD(v12))
  {
LABEL_16:
    __break(1u);
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }

  if (v12 >> 11 != 27)
  {
    uint64_t v20 = v29;
    uint64_t v19 = v30;
    if (WORD1(v12) <= 0x10u)
    {
      unint64_t v12 = (unint64_t)&v34;
      goto LABEL_10;
    }

    goto LABEL_17;
  }

uint64_t sub_10000D3C8(void *a1, uint64_t *a2, void *a3)
{
  uint64_t v5 = *a2;
  uint64_t v6 = a2[1];
  uint64_t v30 = 0LL;
  id v7 = sub_10000E664(v5, v6, (uint64_t)&v30, a3, (SEL *)&selRef_actionIdentifiersForBundleIdentifier_error_);
  uint64_t v8 = v30;
  if (v7)
  {
    unint64_t v9 = v7;
    uint64_t v10 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v7, &type metadata for String);
    id v11 = v8;

    uint64_t v12 = *(void *)(v10 + 16);
    swift_bridgeObjectRelease(v10);
    uint64_t v30 = 0LL;
    id v13 = sub_10000E664(v5, v6, (uint64_t)&v30, a3, (SEL *)&selRef_entityIdentifiersForBundleIdentifier_error_);
    uint64_t v8 = v30;
    if (v13)
    {
      char v14 = v13;
      uint64_t v15 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v13, &type metadata for String);
      id v16 = v8;

      uint64_t v17 = *(void *)(v15 + 16);
      uint64_t result = swift_bridgeObjectRelease(v15);
      uint64_t v19 = v12 + v17;
      if (__OFADD__(v12, v17))
      {
        __break(1u);
      }

      else
      {
        BOOL v20 = __OFADD__(*a1, v19);
        uint64_t v21 = *a1 + v19;
        if (!v20)
        {
          *a1 = v21;
          return result;
        }
      }

      __break(1u);
    }
  }

  id v22 = v8;
  _convertNSErrorToError(_:)(v8);

  return swift_willThrow(v23, v24, v25, v26, v27, v28, v29);
}

uint64_t sub_10000D524(uint64_t a1)
{
  return swift_slowAlloc(a1, -1LL);
}

uint64_t _s23IndexingPreflightResultV4StepOMa(uint64_t a1)
{
  return sub_10000D5BC(a1, qword_100069F20, (uint64_t)&_s23IndexingPreflightResultV4StepOMn);
}

uint64_t sub_10000D540(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *(void *)(v2 + 16);
  uint64_t v6 = *(void *)(v2 + 24);
  uint64_t v8 = swift_task_alloc(dword_100069D6C);
  unint64_t v9 = (void *)sub_10000F5B4(v8);
  *unint64_t v9 = v3;
  v9[1] = sub_10000F2C0;
  return sub_100009F70(a1, a2, v7, v6);
}

uint64_t _s23IndexingPreflightResultVMa(uint64_t a1)
{
  return sub_10000D5BC(a1, qword_100069FB0, (uint64_t)&_s23IndexingPreflightResultVMn);
}

uint64_t sub_10000D5BC(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result = *a2;
  if (!*a2) {
    return swift_getSingletonMetadata(a1, a3);
  }
  return result;
}

uint64_t sub_10000D5EC()
{
  return sub_10000F364(v0, v1, v2);
}

uint64_t sub_10000D630()
{
  uint64_t v0 = swift_task_alloc(dword_100069D94);
  uint64_t v1 = (void *)sub_10000F5B4(v0);
  uint64_t v2 = sub_10000F4BC(v1);
  return sub_10000A8FC(v2, v3, v4, v5);
}

uint64_t sub_10000D698()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

uint64_t sub_10000D6C4()
{
  uint64_t v0 = swift_task_alloc(dword_100069DA4);
  uint64_t v1 = (void *)sub_10000F5B4(v0);
  uint64_t v2 = sub_10000F4BC(v1);
  return sub_10000AD0C(v2);
}

uint64_t sub_10000D718()
{
  return sub_10000F2C4(v0[1]);
}

uint64_t sub_10000D750()
{
  uint64_t v0 = swift_task_alloc(dword_100069DB4);
  uint64_t v1 = (void *)sub_10000F5B4(v0);
  uint64_t v2 = sub_10000F444(v1);
  return sub_10000AEAC(v2, v3, v4, v5, v6);
}

uint64_t sub_10000D7B0()
{
  sub_10000F558();
  return sub_10000F364(v0, v1, v2);
}

uint64_t sub_10000D7FC()
{
  uint64_t v0 = swift_task_alloc(dword_100069DC4);
  uint64_t v1 = (void *)sub_10000F5B4(v0);
  uint64_t v2 = sub_10000F444(v1);
  return sub_10000B990(v2, v3, v4, v5, v6);
}

unint64_t sub_10000D858()
{
  unint64_t result = qword_100069DE0;
  if (!qword_100069DE0)
  {
    uint64_t v1 = sub_10000D89C(&qword_100069D80);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for ThrowingTaskGroup<A, B>.Iterator, v1);
    atomic_store(result, (unint64_t *)&qword_100069DE0);
  }

  return result;
}

uint64_t sub_10000D89C(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContextInMetadataState2( 255LL,  (char *)a1 + (int)result,  -(result >> 32),  0LL,  0LL);
    *a1 = result;
  }

  return result;
}

void sub_10000D8E0(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = sub_10000844C(a2);
  sub_10000F4F4(v2);
  sub_100008D60();
}

void sub_10000D908(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v4 = sub_10000F654();
  v5(v4, v3);
  sub_100008D60();
}

void sub_10000D930(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v3 = sub_10000F5A4(a1, a2, a3);
  sub_10000F374(*(void *)(v3 - 8));
  sub_100008D60();
}

void sub_10000D958(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v2 = a2(0LL);
  sub_10000F4F4(v2);
  sub_100008D60();
}

void sub_10000D980(uint64_t a1, uint64_t a2)
{
  Swift::Int v4 = NSObject._rawHashValue(seed:)(*(void *)(a2 + 40));
  unint64_t v5 = _HashTable.nextHole(atOrAfter:)(v4 & ~(-1LL << *(_BYTE *)(a2 + 32)), a2 + 56, ~(-1LL << *(_BYTE *)(a2 + 32)));
  *(void *)(a2 + 56 + ((v5 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v5;
  *(void *)(*(void *)(a2 + 48) + 8 * v5) = a1;
  ++*(void *)(a2 + 16);
  sub_10000F6AC();
}

Swift::Int sub_10000D9F8(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  if (!a3)
  {
    uint64_t v8 = &_swiftEmptySetSingleton;
LABEL_35:
    swift_release(v4);
    return (Swift::Int)v8;
  }

  uint64_t v5 = a3;
  if (*(void *)(a4 + 16) == a3) {
    return v4;
  }
  sub_10000844C(&qword_10006A2F0);
  Swift::Int result = static _SetStorage.allocate(capacity:)(v5);
  uint64_t v8 = (void *)result;
  uint64_t v30 = a2;
  if (a2 < 1) {
    unint64_t v9 = 0LL;
  }
  else {
    unint64_t v9 = *a1;
  }
  uint64_t v10 = 0LL;
  Swift::Int v11 = result + 56;
  while (1)
  {
    if (v9)
    {
      unint64_t v12 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      unint64_t v13 = v12 | (v10 << 6);
      goto LABEL_24;
    }

    uint64_t v14 = v10 + 1;
    if (__OFADD__(v10, 1LL)) {
      goto LABEL_39;
    }
    if (v14 >= v30) {
      goto LABEL_35;
    }
    unint64_t v15 = a1[v14];
    ++v10;
    if (!v15)
    {
      uint64_t v10 = v14 + 1;
      if (v14 + 1 >= v30) {
        goto LABEL_35;
      }
      unint64_t v15 = a1[v10];
      if (!v15)
      {
        uint64_t v10 = v14 + 2;
        if (v14 + 2 >= v30) {
          goto LABEL_35;
        }
        unint64_t v15 = a1[v10];
        if (!v15) {
          break;
        }
      }
    }

LABEL_40:
  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

              sub_10000E5A0(v1);
              return;
            }
          }
        }
      }
    }

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

Swift::Int sub_10000DC84(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  if (!a3)
  {
    unint64_t v9 = &_swiftEmptySetSingleton;
LABEL_35:
    swift_release(v4);
    return (Swift::Int)v9;
  }

  uint64_t v5 = a3;
  if (*(void *)(a4 + 16) == a3) {
    return v4;
  }
  sub_10000844C(&qword_100069E18);
  Swift::Int result = static _SetStorage.allocate(capacity:)(v5);
  unint64_t v9 = (void *)result;
  uint64_t v29 = a1;
  if (a2 < 1) {
    unint64_t v10 = 0LL;
  }
  else {
    unint64_t v10 = *a1;
  }
  uint64_t v11 = 0LL;
  Swift::Int v12 = result + 56;
  while (1)
  {
    if (v10)
    {
      unint64_t v13 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v14 = v13 | (v11 << 6);
      goto LABEL_24;
    }

    uint64_t v15 = v11 + 1;
    if (__OFADD__(v11, 1LL)) {
      goto LABEL_39;
    }
    if (v15 >= a2) {
      goto LABEL_35;
    }
    unint64_t v16 = v29[v15];
    ++v11;
    if (!v16)
    {
      uint64_t v11 = v15 + 1;
      if (v15 + 1 >= a2) {
        goto LABEL_35;
      }
      unint64_t v16 = v29[v11];
      if (!v16)
      {
        uint64_t v11 = v15 + 2;
        if (v15 + 2 >= a2) {
          goto LABEL_35;
        }
        unint64_t v16 = v29[v11];
        if (!v16) {
          break;
        }
      }
    }

Swift::Int sub_10000DED8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = a1;
  if ((a1 & 0xC000000000000001LL) == 0)
  {
    swift_bridgeObjectRetain(a2);
    uint64_t v6 = (void *)sub_10000E148(v5, a2);
    swift_bridgeObjectRelease(a2);
    return (Swift::Int)v6;
  }

  uint64_t v6 = &_swiftEmptySetSingleton;
  BOOL v26 = &_swiftEmptySetSingleton;
  if (a1 >= 0) {
    uint64_t v5 = a1 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain(a2);
  uint64_t v7 = __CocoaSet.makeIterator()(v5);
  uint64_t v8 = __CocoaSet.Iterator.next()(v7);
  if (!v8)
  {
LABEL_23:
    swift_bridgeObjectRelease_n(a2, 2LL);
    swift_release(v7);
    return (Swift::Int)v6;
  }

  uint64_t v9 = v8;
  uint64_t v6 = (void *)sub_10000E518(0LL, &qword_100069E08, &OBJC_CLASS___WFAction_ptr);
  while (1)
  {
    uint64_t v24 = v9;
    swift_dynamicCast(&v25, &v24, (char *)&type metadata for Swift.AnyObject + 8, v6, 7LL);
    char v10 = sub_10000C898(&v25, a2);
    if (v3)
    {
      swift_release(v7);

      unint64_t v23 = v26;
      swift_bridgeObjectRelease_n(a2, 2LL);
      swift_release(v23);
      return (Swift::Int)v6;
    }

    uint64_t v11 = v25;
    if ((v10 & 1) != 0) {
      break;
    }

LABEL_21:
    uint64_t v9 = __CocoaSet.Iterator.next()(result);
    if (!v9)
    {
      uint64_t v6 = v26;
      goto LABEL_23;
    }
  }

  Swift::Int v12 = v26;
  if (*((void *)v26 + 3) <= *((void *)v26 + 2))
  {
    sub_10003A328();
    Swift::Int v12 = v26;
  }

  Swift::Int result = NSObject._rawHashValue(seed:)(v12[5]);
  unint64_t v14 = (char *)(v12 + 7);
  uint64_t v15 = -1LL << *((_BYTE *)v12 + 32);
  unint64_t v16 = result & ~v15;
  unint64_t v17 = v16 >> 6;
  if (((-1LL << v16) & ~v12[(v16 >> 6) + 7]) != 0)
  {
    unint64_t v18 = __clz(__rbit64((-1LL << v16) & ~v12[(v16 >> 6) + 7])) | v16 & 0x7FFFFFFFFFFFFFC0LL;
LABEL_20:
    *(void *)&v14[(v18 >> 3) & 0x1FFFFFFFFFFFFFF8LL] |= 1LL << v18;
    *(void *)(v12[6] + 8 * v18) = v11;
    ++v12[2];
    goto LABEL_21;
  }

  char v19 = 0;
  unint64_t v20 = (unint64_t)(63 - v15) >> 6;
  while (++v17 != v20 || (v19 & 1) == 0)
  {
    BOOL v21 = v17 == v20;
    if (v17 == v20) {
      unint64_t v17 = 0LL;
    }
    v19 |= v21;
    uint64_t v22 = *(void *)&v14[8 * v17];
    if (v22 != -1)
    {
      unint64_t v18 = __clz(__rbit64(~v22)) + (v17 << 6);
      goto LABEL_20;
    }
  }

  __break(1u);
  return result;
}

uint64_t sub_10000E148(uint64_t a1, uint64_t a2)
{
  char v5 = *(_BYTE *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  unint64_t v7 = (unint64_t)((1LL << v5) + 63) >> 6;
  uint64_t v8 = 8 * v7;
  uint64_t isStackAllocationSafe = swift_bridgeObjectRetain_n(a2, 2LL);
  if (v6 <= 0xD
    || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(v8, 8LL), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    char v10 = (unint64_t *)((char *)&v23 - ((v8 + 15) & 0x3FFFFFFFFFFFFFF0LL));
    sub_100039214(0LL, v7, v10);
    swift_bridgeObjectRetain(a2);
    sub_10000E314(v10, v7, a1, a2);
    uint64_t v12 = v11;
    uint64_t v13 = swift_release(a1);
    if (v2) {
      swift_willThrow(v13, v14, v15, v16, v17, v18, v19);
    }
    swift_bridgeObjectRelease_n(a2, 2LL);
  }

  else
  {
    unint64_t v20 = (unint64_t *)swift_slowAlloc(v8, -1LL);
    sub_100039214(0LL, v7, v20);
    swift_bridgeObjectRetain(a2);
    sub_10000E314(v20, v7, a1, a2);
    uint64_t v12 = v21;
    swift_release(a1);
    swift_slowDealloc(v20, -1LL, -1LL);
    swift_bridgeObjectRelease_n(a2, 2LL);
  }

  swift_bridgeObjectRelease(a2);
  return v12;
}

void sub_10000E314(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int64_t v7 = 0LL;
  uint64_t v8 = a3 + 56;
  uint64_t v9 = 1LL << *(_BYTE *)(a3 + 32);
  uint64_t v10 = -1LL;
  if (v9 < 64) {
    uint64_t v10 = ~(-1LL << v9);
  }
  unint64_t v11 = v10 & *(void *)(a3 + 56);
  uint64_t v22 = 0LL;
  int64_t v23 = (unint64_t)(v9 + 63) >> 6;
  while (v11)
  {
    unint64_t v12 = __clz(__rbit64(v11));
    v11 &= v11 - 1;
    unint64_t v13 = v12 | (v7 << 6);
LABEL_17:
    uint64_t v24 = *(void **)(*(void *)(a3 + 48) + 8 * v13);
    uint64_t v17 = v24;
    char v18 = sub_10000C898(&v24, a4);
    if (v4)
    {
      swift_bridgeObjectRelease(a4);

      return;
    }

    char v19 = v18;

    if ((v19 & 1) != 0)
    {
      *(unint64_t *)((char *)a1 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v13;
      BOOL v14 = __OFADD__(v22++, 1LL);
      if (v14) {
        goto LABEL_30;
      }
    }
  }

  BOOL v14 = __OFADD__(v7++, 1LL);
  if (v14)
  {
    __break(1u);
    goto LABEL_29;
  }

  if (v7 >= v23) {
    goto LABEL_27;
  }
  unint64_t v15 = *(void *)(v8 + 8 * v7);
  if (v15)
  {
LABEL_16:
    unint64_t v11 = (v15 - 1) & v15;
    unint64_t v13 = __clz(__rbit64(v15)) + (v7 << 6);
    goto LABEL_17;
  }

  int64_t v16 = v7 + 1;
  if (v7 + 1 >= v23) {
    goto LABEL_27;
  }
  unint64_t v15 = *(void *)(v8 + 8 * v16);
  if (v15) {
    goto LABEL_15;
  }
  int64_t v16 = v7 + 2;
  if (v7 + 2 >= v23) {
    goto LABEL_27;
  }
  unint64_t v15 = *(void *)(v8 + 8 * v16);
  if (v15) {
    goto LABEL_15;
  }
  int64_t v16 = v7 + 3;
  if (v7 + 3 >= v23)
  {
LABEL_27:
    swift_retain(a3);
    sub_10000DC84(a1, a2, v22, a3);
    swift_bridgeObjectRelease(a4);
    return;
  }

  unint64_t v15 = *(void *)(v8 + 8 * v16);
  if (v15)
  {
LABEL_15:
    int64_t v7 = v16;
    goto LABEL_16;
  }

  while (1)
  {
    int64_t v7 = v16 + 1;
    if (__OFADD__(v16, 1LL)) {
      break;
    }
    if (v7 >= v23) {
      goto LABEL_27;
    }
    unint64_t v15 = *(void *)(v8 + 8 * v7);
    ++v16;
    if (v15) {
      goto LABEL_16;
    }
  }

LABEL_29:
  __break(1u);
LABEL_30:
  __break(1u);
}

uint64_t sub_10000E518(uint64_t a1, unint64_t *a2, void *a3)
{
  uint64_t result = *a2;
  if (!*a2)
  {
    uint64_t v5 = objc_opt_self(*a3);
    uint64_t result = swift_getObjCClassMetadata(v5);
    atomic_store(result, a2);
  }

  return result;
}

unint64_t sub_10000E550()
{
  unint64_t result = qword_100069E10;
  if (!qword_100069E10)
  {
    uint64_t v1 = sub_10000E518(255LL, &qword_100069E08, &OBJC_CLASS___WFAction_ptr);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for NSObject, v1);
    atomic_store(result, (unint64_t *)&qword_100069E10);
  }

  return result;
}

uint64_t sub_10000E5A0(uint64_t a1)
{
  return swift_release(a1 & 0x7FFFFFFFFFFFFFFFLL);
}

uint64_t sub_10000E5A8()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_10000E5CC()
{
  uint64_t v1 = (void *)swift_task_alloc(dword_100069E9C);
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_10000F2C0;
  return sub_10000C250();
}

uint64_t sub_10000E61C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000844C(&qword_100069D88);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

id sub_10000E664(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, SEL *a5)
{
  NSString v8 = String._bridgeToObjectiveC()();
  id v9 = objc_msgSend(a4, *a5, v8, a3);

  return v9;
}

uint64_t *sub_10000E6C0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 - 8);
  int v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    uint64_t v17 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v17 + ((v6 + 16LL) & ~(unint64_t)v6));
    swift_retain(v17);
  }

  else
  {
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    if (EnumCaseMultiPayload == 2)
    {
      uint64_t v18 = *a2;
      *a1 = *a2;
      swift_bridgeObjectRetain(v18);
      BOOL v14 = a1;
      uint64_t v15 = a3;
      uint64_t v16 = 2LL;
    }

    else if (EnumCaseMultiPayload == 1)
    {
      uint64_t v19 = *a2;
      *a1 = *a2;
      swift_bridgeObjectRetain(v19);
      BOOL v14 = a1;
      uint64_t v15 = a3;
      uint64_t v16 = 1LL;
    }

    else
    {
      if (EnumCaseMultiPayload)
      {
        memcpy(a1, a2, *(void *)(v5 + 64));
        return a1;
      }

      uint64_t v9 = type metadata accessor for LaunchServicesSnapshot(0LL);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v9 - 8) + 16LL))(a1, a2, v9);
      uint64_t v10 = *(int *)(sub_10000844C(&qword_100069DE8) + 48);
      unint64_t v11 = (char *)a1 + v10;
      unint64_t v12 = (char *)a2 + v10;
      uint64_t v13 = type metadata accessor for LinkSnapshot(0LL);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 16LL))(v11, v12, v13);
      BOOL v14 = a1;
      uint64_t v15 = a3;
      uint64_t v16 = 0LL;
    }

    swift_storeEnumTagMultiPayload(v14, v15, v16);
  }

  return a1;
}

uint64_t sub_10000E7F0(void *a1, uint64_t a2)
{
  uint64_t result = swift_getEnumCaseMultiPayload(a1, a2);
  if ((_DWORD)result == 2 || (_DWORD)result == 1) {
    return swift_bridgeObjectRelease(*a1);
  }
  if (!(_DWORD)result)
  {
    uint64_t v4 = type metadata accessor for LaunchServicesSnapshot(0LL);
    (*(void (**)(void *, uint64_t))(*(void *)(v4 - 8) + 8LL))(a1, v4);
    uint64_t v5 = (char *)a1 + *(int *)(sub_10000844C(&qword_100069DE8) + 48);
    uint64_t v6 = type metadata accessor for LinkSnapshot(0LL);
    return (*(uint64_t (**)(char *, uint64_t))(*(void *)(v6 - 8) + 8LL))(v5, v6);
  }

  return result;
}

uint64_t *sub_10000E888(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
  if (EnumCaseMultiPayload == 2)
  {
    uint64_t v15 = *a2;
    *a1 = *a2;
    swift_bridgeObjectRetain(v15);
    unint64_t v12 = a1;
    uint64_t v13 = a3;
    uint64_t v14 = 2LL;
  }

  else if (EnumCaseMultiPayload == 1)
  {
    uint64_t v16 = *a2;
    *a1 = *a2;
    swift_bridgeObjectRetain(v16);
    unint64_t v12 = a1;
    uint64_t v13 = a3;
    uint64_t v14 = 1LL;
  }

  else
  {
    if (EnumCaseMultiPayload)
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
      return a1;
    }

    uint64_t v7 = type metadata accessor for LaunchServicesSnapshot(0LL);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16LL))(a1, a2, v7);
    uint64_t v8 = *(int *)(sub_10000844C(&qword_100069DE8) + 48);
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for LinkSnapshot(0LL);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16LL))(v9, v10, v11);
    unint64_t v12 = a1;
    uint64_t v13 = a3;
    uint64_t v14 = 0LL;
  }

  swift_storeEnumTagMultiPayload(v12, v13, v14);
  return a1;
}

uint64_t *sub_10000E990(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_10000D958((uint64_t)a1, _s23IndexingPreflightResultV4StepOMa);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    if (EnumCaseMultiPayload == 2)
    {
      uint64_t v15 = *a2;
      *a1 = *a2;
      swift_bridgeObjectRetain(v15);
      unint64_t v12 = a1;
      uint64_t v13 = a3;
      uint64_t v14 = 2LL;
    }

    else if (EnumCaseMultiPayload == 1)
    {
      uint64_t v16 = *a2;
      *a1 = *a2;
      swift_bridgeObjectRetain(v16);
      unint64_t v12 = a1;
      uint64_t v13 = a3;
      uint64_t v14 = 1LL;
    }

    else
    {
      if (EnumCaseMultiPayload)
      {
        memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
        return a1;
      }

      uint64_t v7 = type metadata accessor for LaunchServicesSnapshot(0LL);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16LL))(a1, a2, v7);
      uint64_t v8 = *(int *)(sub_10000844C(&qword_100069DE8) + 48);
      uint64_t v9 = (char *)a1 + v8;
      uint64_t v10 = (char *)a2 + v8;
      uint64_t v11 = type metadata accessor for LinkSnapshot(0LL);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16LL))(v9, v10, v11);
      unint64_t v12 = a1;
      uint64_t v13 = a3;
      uint64_t v14 = 0LL;
    }

    swift_storeEnumTagMultiPayload(v12, v13, v14);
  }

  return a1;
}

char *sub_10000EAB0(char *a1, char *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload(a2, a3))
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
  }

  else
  {
    uint64_t v6 = type metadata accessor for LaunchServicesSnapshot(0LL);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
    uint64_t v7 = *(int *)(sub_10000844C(&qword_100069DE8) + 48);
    uint64_t v8 = &a1[v7];
    uint64_t v9 = &a2[v7];
    uint64_t v10 = type metadata accessor for LinkSnapshot(0LL);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 32LL))(v8, v9, v10);
    swift_storeEnumTagMultiPayload(a1, a3, 0LL);
  }

  return a1;
}

char *sub_10000EB70(char *a1, char *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_10000D958((uint64_t)a1, _s23IndexingPreflightResultV4StepOMa);
    if (swift_getEnumCaseMultiPayload(a2, a3))
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
    }

    else
    {
      uint64_t v6 = type metadata accessor for LaunchServicesSnapshot(0LL);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
      uint64_t v7 = *(int *)(sub_10000844C(&qword_100069DE8) + 48);
      uint64_t v8 = &a1[v7];
      uint64_t v9 = &a2[v7];
      uint64_t v10 = type metadata accessor for LinkSnapshot(0LL);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 32LL))(v8, v9, v10);
      swift_storeEnumTagMultiPayload(a1, a3, 0LL);
    }
  }

  return a1;
}

uint64_t sub_10000EC54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_storeEnumTagMultiPayload(a1, a3, a2);
}

uint64_t sub_10000EC64(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for LaunchServicesSnapshot(319LL);
  if (v3 <= 0x3F)
  {
    uint64_t v4 = type metadata accessor for LinkSnapshot(319LL);
    if (v5 > 0x3F)
    {
      return v4;
    }

    else
    {
      swift_getTupleTypeLayout2(v7, *(void *)(v2 - 8) + 64LL, *(void *)(v4 - 8) + 64LL);
      v8[0] = v7;
      v8[1] = (char *)&value witness table for Builtin.BridgeObject + 64;
      v8[2] = (char *)&value witness table for Builtin.BridgeObject + 64;
      swift_initEnumMetadataMultiPayload(a1, 256LL, 3LL, v8);
      return 0LL;
    }
  }

  return v2;
}

uint64_t *sub_10000ED10(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v16 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v16 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v16);
  }

  else
  {
    uint64_t v7 = type metadata accessor for LaunchServicesSnapshot(0LL);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16LL))(a1, a2, v7);
    uint64_t v8 = a3[5];
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for LinkSnapshot(0LL);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16LL))(v9, v10, v11);
    uint64_t v12 = a3[6];
    uint64_t v13 = a3[7];
    uint64_t v14 = *(uint64_t *)((char *)a2 + v12);
    *(uint64_t *)((char *)a1 + v12) = v14;
    uint64_t v15 = *(uint64_t *)((char *)a2 + v13);
    *(uint64_t *)((char *)a1 + v13) = v15;
    swift_bridgeObjectRetain(v14);
    swift_bridgeObjectRetain(v15);
  }

  return a1;
}

uint64_t sub_10000EDE0(uint64_t a1, int *a2)
{
  uint64_t v4 = type metadata accessor for LaunchServicesSnapshot(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8LL))(a1, v4);
  uint64_t v5 = a1 + a2[5];
  uint64_t v6 = type metadata accessor for LinkSnapshot(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8LL))(v5, v6);
  swift_bridgeObjectRelease(*(void *)(a1 + a2[6]));
  return swift_bridgeObjectRelease(*(void *)(a1 + a2[7]));
}

uint64_t sub_10000EE5C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for LaunchServicesSnapshot(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for LinkSnapshot(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16LL))(v8, v9, v10);
  uint64_t v11 = a3[6];
  uint64_t v12 = a3[7];
  uint64_t v13 = *(void *)(a2 + v11);
  *(void *)(a1 + v11) = v13;
  uint64_t v14 = *(void *)(a2 + v12);
  *(void *)(a1 + v12) = v14;
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRetain(v14);
  return a1;
}

uint64_t sub_10000EF00(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for LaunchServicesSnapshot(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24LL))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for LinkSnapshot(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 24LL))(v8, v9, v10);
  uint64_t v11 = a3[6];
  uint64_t v12 = *(void *)(a2 + v11);
  uint64_t v13 = *(void *)(a1 + v11);
  *(void *)(a1 + v11) = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  uint64_t v14 = a3[7];
  uint64_t v15 = *(void *)(a2 + v14);
  uint64_t v16 = *(void *)(a1 + v14);
  *(void *)(a1 + v14) = v15;
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRelease(v16);
  return a1;
}

uint64_t sub_10000EFBC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for LaunchServicesSnapshot(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for LinkSnapshot(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32LL))(v8, v9, v10);
  uint64_t v11 = a3[7];
  *(void *)(a1 + a3[6]) = *(void *)(a2 + a3[6]);
  *(void *)(a1 + v11) = *(void *)(a2 + v11);
  return a1;
}

uint64_t sub_10000F054(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for LaunchServicesSnapshot(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40LL))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for LinkSnapshot(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 40LL))(v8, v9, v10);
  uint64_t v11 = a3[6];
  uint64_t v12 = *(void *)(a1 + v11);
  *(void *)(a1 + v11) = *(void *)(a2 + v11);
  swift_bridgeObjectRelease(v12);
  uint64_t v13 = a3[7];
  uint64_t v14 = *(void *)(a1 + v13);
  *(void *)(a1 + v13) = *(void *)(a2 + v13);
  swift_bridgeObjectRelease(v14);
  return a1;
}

uint64_t sub_10000F100(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10000F10C);
}

uint64_t sub_10000F10C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_10000F510();
  if (*(_DWORD *)(*(void *)(v6 - 8) + 84LL) == (_DWORD)v3)
  {
    uint64_t v7 = v6;
    uint64_t v8 = v4;
    return sub_1000084E0(v8, v3, v7);
  }

  uint64_t v9 = sub_10000F4E4();
  if (*(_DWORD *)(*(void *)(v9 - 8) + 84LL) == (_DWORD)v3)
  {
    uint64_t v7 = v9;
    uint64_t v8 = v4 + *(int *)(a3 + 20);
    return sub_1000084E0(v8, v3, v7);
  }

  unint64_t v11 = *(void *)(v4 + *(int *)(a3 + 24));
  if (v11 >= 0xFFFFFFFF) {
    LODWORD(v11) = -1;
  }
  return (v11 + 1);
}

uint64_t sub_10000F19C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10000F1A8);
}

void sub_10000F1A8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8 = sub_10000F510();
  if (*(_DWORD *)(*(void *)(v8 - 8) + 84LL) == a3)
  {
    uint64_t v9 = v8;
    uint64_t v10 = v5;
LABEL_5:
    sub_10000848C(v10, v4, v4, v9);
    return;
  }

  uint64_t v11 = sub_10000F4E4();
  if (*(_DWORD *)(*(void *)(v11 - 8) + 84LL) == a3)
  {
    uint64_t v9 = v11;
    uint64_t v10 = v5 + *(int *)(a4 + 20);
    goto LABEL_5;
  }

  *(void *)(v5 + *(int *)(a4 + sub_10000F384(*(void *)(v2 + 24)) = (v4 - 1);
  sub_10000F6AC();
}

uint64_t sub_10000F22C(uint64_t a1)
{
  uint64_t result = type metadata accessor for LaunchServicesSnapshot(319LL);
  if (v3 <= 0x3F)
  {
    v5[0] = *(void *)(result - 8) + 64LL;
    uint64_t result = type metadata accessor for LinkSnapshot(319LL);
    if (v4 <= 0x3F)
    {
      v5[1] = *(void *)(result - 8) + 64LL;
      v5[2] = (char *)&value witness table for Builtin.BridgeObject + 64;
      v5[3] = (char *)&value witness table for Builtin.BridgeObject + 64;
      swift_initStructMetadata(a1, 256LL, 4LL, v5, a1 + 16);
      return 0LL;
    }
  }

  return result;
}

uint64_t sub_10000F2C4(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_10000F2D0()
{
  return ((uint64_t (*)(void))swift_task_switch)();
}

uint64_t sub_10000F2DC(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_10000F2E4()
{
  return ((uint64_t (*)(void))swift_task_switch)();
}

uint64_t sub_10000F2F0(uint64_t a1)
{
  return swift_slowDealloc(a1, -1LL, -1LL);
}

uint64_t sub_10000F2FC()
{
  return swift_slowAlloc(2LL, -1LL);
}

uint64_t sub_10000F308(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_10000F324()
{
  return OSSignpostIntervalState.init(id:isOpen:)(v0, 1LL);
}

uint64_t sub_10000F338()
{
  return swift_task_dealloc(v0);
}

uint64_t sub_10000F340()
{
  return *(void *)(v0 + 192);
}

uint64_t sub_10000F364(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_deallocObject(a1, a2, a3);
}

uint64_t sub_10000F374@<X0>(uint64_t a1@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 16))(v1, v2);
}

uint64_t sub_10000F384(uint64_t a1)
{
  *(void *)(v2 - 8) = *v1;
  return swift_task_dealloc(a1);
}

uint64_t sub_10000F394@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  return a1(v1, v2);
}

  ;
}

uint64_t sub_10000F3AC()
{
  v0[29] = v1;
  return (*(uint64_t (**)(void, void))(v0[11] + 8LL))(v0[12], v0[10]);
}

uint64_t sub_10000F3C4(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a1 - 8) + 16LL))(v2, v1, a1);
}

uint64_t sub_10000F3DC()
{
  return swift_unknownObjectRelease(*(void *)(v0 + 16));
}

uint64_t sub_10000F3F4()
{
  return swift_task_dealloc(v0);
}

uint64_t sub_10000F3FC()
{
  return swift_task_dealloc(v0);
}

uint64_t sub_10000F404()
{
  return swift_task_dealloc(v0);
}

void sub_10000F40C()
{
  *(void *)(v1 - 8) = *v0;
}

uint64_t sub_10000F41C()
{
  return swift_task_dealloc(v0);
}

  ;
}

uint64_t sub_10000F444(void *a1)
{
  *a1 = v3;
  a1[1] = v1;
  return v2;
}

uint64_t sub_10000F464()
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v0, v1);
}

uint64_t sub_10000F47C()
{
  return type metadata accessor for ToolKitIndexingReason.Changeset(0LL);
}

uint64_t sub_10000F484()
{
  return swift_task_dealloc(v0);
}

uint64_t sub_10000F48C()
{
  return sub_10000848C(v0, 1LL, 1LL, v1);
}

uint64_t sub_10000F4A0()
{
  return swift_task_dealloc(v0);
}

uint64_t sub_10000F4A8()
{
  return swift_task_dealloc(v0);
}

uint64_t sub_10000F4B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return WFLogSignpost.init(_:_:_:)(a1, a2, a3, 2LL, v3);
}

uint64_t sub_10000F4BC(void *a1)
{
  *a1 = v3;
  a1[1] = v1;
  return v2;
}

uint64_t sub_10000F4D8(uint64_t a1)
{
  return swift_allocObject(a1, *(unsigned int *)(a1 + 48), *(unsigned __int16 *)(a1 + 52));
}

uint64_t sub_10000F4E4()
{
  return type metadata accessor for LinkSnapshot(0LL);
}

uint64_t sub_10000F4EC()
{
  return swift_task_dealloc(v0);
}

uint64_t sub_10000F4F4(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a1 - 8) + 8LL))(v1, a1);
}

uint64_t sub_10000F508@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X8>)
{
  return a2(a1, v2);
}

uint64_t sub_10000F510()
{
  return type metadata accessor for LaunchServicesSnapshot(0LL);
}

void sub_10000F520()
{
  *(void *)(v1 - 8) = *v0;
}

void sub_10000F530( void *a1, os_log_s *a2, os_signpost_type_t a3, os_signpost_id_t a4, const char *a5, const char *a6, uint8_t *a7)
{
}

uint64_t sub_10000F538@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  return a3(a1, a2, v3);
}

void sub_10000F540(void *a1, os_log_s *a2, os_log_type_t a3, const char *a4, uint8_t *a5)
{
}

uint64_t sub_10000F548()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v0, v1);
}

uint64_t sub_10000F558()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1 + v3, v0);
}

uint64_t sub_10000F568()
{
  return static WFLog.subscript.getter();
}

  ;
}

uint64_t sub_10000F588()
{
  return *(void *)(v0 + 8);
}

uint64_t sub_10000F594@<X0>(uint64_t (*a1)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  return a1(v1, v2, v3);
}

uint64_t sub_10000F5A4(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  return a3(0LL);
}

uint64_t sub_10000F5B4(uint64_t result)
{
  *(void *)(v1 + 16) = result;
  return result;
}

uint64_t sub_10000F5C0()
{
  return v0;
}

  ;
}

uint64_t sub_10000F5F8(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v2, a2, v3);
}

void sub_10000F608()
{
}

uint64_t sub_10000F614(uint64_t a1, uint64_t a2)
{
  return sub_10000AB8C(v3, a2, v2);
}

uint64_t sub_10000F620()
{
  return static WFLogSignpost.signposter(for:)(*v0);
}

uint64_t sub_10000F62C()
{
  return *(void *)(v0 + 48);
}

uint64_t sub_10000F640()
{
  return swift_task_dealloc(*(void *)(v0 + 72));
}

uint64_t sub_10000F64C(_WORD *a1)
{
  *a1 = 0;
  return OSSignpostID.rawValue.getter();
}

uint64_t sub_10000F654()
{
  return v0;
}

uint64_t sub_10000F668@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = *v2;
  return swift_task_dealloc(a1);
}

uint64_t sub_10000F674()
{
  return v0;
}

  ;
}

uint64_t sub_10000F694()
{
  return type metadata accessor for OSSignpostIntervalState(0LL);
}

uint64_t sub_10000F69C()
{
  return swift_release(v0);
}

uint64_t sub_10000F6A4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  return swift_task_dealloc(a10);
}

  ;
}

uint64_t sub_10000F6B8()
{
  return OS_os_log.signpostsEnabled.getter();
}

void *sub_10000F6C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[2] = a1;
  v3[3] = a2;
  v3[4] = a3;
  return v3;
}

uint64_t sub_10000F6D4(void *a1, void *a2)
{
  uint64_t v4 = v2;
  uint64_t v7 = type metadata accessor for TypeDefinition(0LL);
  uint64_t v74 = *(void *)(v7 - 8);
  uint64_t v75 = v7;
  __chkstk_darwin(v7);
  uint64_t v8 = sub_1000132D4();
  uint64_t v9 = type metadata accessor for DisplayRepresentationConfiguration(v8);
  __chkstk_darwin(v9);
  sub_100013318();
  id v12 = (id)(v11 - v10);
  uint64_t v13 = type metadata accessor for TypedValueResolutionCoercion(0LL);
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  sub_100013318();
  uint64_t v17 = v16 - v15;
  uint64_t v81 = type metadata accessor for WFContentItem.ToolKitTypeResolutionContext(0LL);
  unint64_t v78 = *(void *)(v81 - 8);
  __chkstk_darwin(v81);
  sub_100013318();
  uint64_t v20 = v19 - v18;
  uint64_t v86 = _swiftEmptyArrayStorage;
  if ((void *)sub_1000132F0(v21, &qword_10006A0F0, &OBJC_CLASS___WFMeasurementContentItem_ptr) != a1)
  {
    uint64_t v85 = 0LL;
    memset(v84, 0, sizeof(v84));
    (*(void (**)(uint64_t, void, uint64_t))(v14 + 104))( v17,  enum case for TypedValueResolutionCoercion.default(_:),  v13);
    id v22 = a2;
    static DisplayRepresentationConfiguration.inMemoryImages.getter(v22);
    WFContentItem.ToolKitTypeResolutionContext.init(measurementUnitTypeProvider:requiredCoercion:displayRepresentationConfig:localizationContext:)( v84,  v17,  v12,  v22);
    static WFContentItem.toolkitTypeDefinition(context:)(v20);
    uint64_t v13 = v82;
    if (v82)
    {
      sub_1000132C0();
LABEL_42:
      swift_bridgeObjectRelease(v86);
      return (uint64_t)v12;
    }

    uint64_t v80 = a2;
    uint64_t v25 = sub_100050A64(0LL, 1LL, 1LL, (uint64_t)_swiftEmptyArrayStorage);
    unint64_t v27 = *(void *)(v25 + 16);
    unint64_t v26 = *(void *)(v25 + 24);
    uint64_t v79 = v4;
    if (v27 >= v26 >> 1) {
      uint64_t v25 = sub_100050A64(v26 > 1, v27 + 1, 1LL, v25);
    }
    *(void *)(v25 + 16) = v27 + 1;
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v74 + 32))( v25 + ((*(unsigned __int8 *)(v74 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v74 + 80))
    + *(void *)(v74 + 72) * v27,
      v3,
      v75);
    uint64_t v86 = (void *)v25;
    sub_1000132C0();
LABEL_9:
    id v28 = [(id)swift_getObjCClassFromMetadata(a1) allProperties];
    uint64_t v29 = sub_1000132F0((uint64_t)v28, &qword_10006A0F8, &OBJC_CLASS___WFContentProperty_ptr);
    uint64_t v30 = sub_100013354(v29);

    uint64_t v31 = *(void *)((v30 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    while (v31)
    {
      uint64_t v77 = v30;
      unint64_t v78 = v30 & 0xC000000000000001LL;
      uint64_t v32 = 4LL;
      unint64_t v76 = a1;
      while (1)
      {
        id v33 = v78
            ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v32 - 4, v30)
            : *(id *)(v30 + 8 * v32);
        char v34 = v33;
        id v12 = (id)(v32 - 3);
        if (__OFADD__(v32 - 4, 1LL)) {
          break;
        }
        uint64_t v35 = sub_1000104FC(v33, (uint64_t)a1, v80);
        if (v13)
        {

          sub_1000132B8();
          goto LABEL_42;
        }

        uint64_t v36 = v35;
        uint64_t v37 = v32 - 3;
        uint64_t v81 = 0LL;
        uint64_t v82 = v32;
        uint64_t v38 = v34;
        uint64_t v39 = v31;
        uint64_t v40 = v35[2];
        uint64_t v13 = (uint64_t)v86;
        uint64_t v41 = v86[2];
        uint64_t v30 = v41 + v40;
        if (__OFADD__(v41, v40)) {
          goto LABEL_46;
        }
        uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v86);
        if (!(_DWORD)isUniquelyReferenced_nonNull_native || (uint64_t v43 = *(void *)(v13 + 24) >> 1, v43 < v30))
        {
          if (v41 <= v30) {
            uint64_t v44 = v41 + v40;
          }
          else {
            uint64_t v44 = v41;
          }
          uint64_t v13 = sub_100050A64(isUniquelyReferenced_nonNull_native, v44, 1LL, v13);
          uint64_t v43 = *(void *)(v13 + 24) >> 1;
        }

        uint64_t v31 = v39;
        a1 = v38;
        if (v36[2])
        {
          uint64_t v45 = *(void *)(v13 + 16);
          uint64_t v46 = v82;
          if (v43 - v45 < v40) {
            goto LABEL_48;
          }
          unint64_t v47 = (*(unsigned __int8 *)(v74 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v74 + 80);
          uint64_t v48 = *(void *)(v74 + 72);
          unint64_t v49 = v13 + v47 + v48 * v45;
          uint64_t v50 = (char *)v36 + v47;
          unint64_t v51 = (unint64_t)v36 + v47 + v48 * v40;
          if ((unint64_t)v50 < v49 + v48 * v40 && v49 < v51)
          {
            LOBYTE(v69) = 2;
            uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  (_DWORD)v69,  1092LL,  0);
            __break(1u);
            return result;
          }

          swift_arrayInitWithCopy(v49);
          if (v40)
          {
            uint64_t v53 = *(void *)(v13 + 16);
            BOOL v54 = __OFADD__(v53, v40);
            uint64_t v55 = v53 + v40;
            if (v54) {
              goto LABEL_49;
            }
            *(void *)(v13 + 16) = v55;
          }
        }

        else
        {
          uint64_t v46 = v82;
          if (v40) {
            goto LABEL_47;
          }
        }

        swift_bridgeObjectRelease(v36);

        uint64_t v86 = (void *)v13;
        uint64_t v32 = v46 + 1;
        a1 = v76;
        uint64_t v30 = v77;
        uint64_t v13 = v81;
        if (v37 == v39) {
          goto LABEL_36;
        }
      }

      __break(1u);
LABEL_46:
      __break(1u);
LABEL_47:
      __break(1u);
LABEL_48:
      __break(1u);
LABEL_49:
      __break(1u);
LABEL_50:
      if (v30 < 0) {
        uint64_t v67 = v30;
      }
      else {
        uint64_t v67 = v30 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain(v30);
      uint64_t v31 = _CocoaArrayWrapper.endIndex.getter(v67);
      sub_1000132B8();
    }

LABEL_36:
    uint64_t v56 = sub_1000132B8();
    uint64_t v57 = sub_1000132F0(v56, &qword_10006A100, &OBJC_CLASS___WFLinkEnumerationContentItem_ptr);
    uint64_t v58 = swift_dynamicCastMetatype(a1, v57);
    if (v58)
    {
      id v59 = [(id)swift_getObjCClassFromMetadata(v58) enumMetadata];
      uint64_t v60 = sub_1000132F0((uint64_t)v59, &qword_10006A110, &OBJC_CLASS___LNEnumMetadata_ptr);
      char v61 = LNEffectiveBundleIdentifierGrouping.isLinkSystemFrameworkIntent.getter(v60);
    }

    else
    {
      char v61 = 0;
    }

    uint64_t v62 = *(void *)(v79 + 16);
    id v83 = a1;
    *(void *)&v84[0] = v62;
    swift_retain();
    uint64_t v63 = sub_10000844C(&qword_10006A108);
    uint64_t v64 = String.init<A>(describing:)(&v83, v63);
    id v12 = v65;
    __chkstk_darwin(v64);
    Swift::Int v69 = &v86;
    uint64_t v70 = v79;
    LOBYTE(v71) = v61 & 1;
    Swift::Bool v72 = v80;
    type metadata accessor for ToolDatabase.Transaction(0LL);
    ToolDatabase.Rollbackable.inSavepoint<A>(name:work:)(v64, v12, sub_10001328C, &v73 - 6);
    if (!v13)
    {
      sub_100013348();
      sub_100013360();
      uint64_t v66 = swift_bridgeObjectRetain(v86);
      sub_1000103A4(v66);
      sub_100013338();
      swift_bridgeObjectRelease(v86);
      return (uint64_t)v12;
    }

    sub_100013348();
    sub_100013360();
    goto LABEL_42;
  }

  uint64_t v80 = a2;
  id v12 = [(id)objc_opt_self(WFMeasurementUnit) availableUnitTypes];
  type metadata accessor for WFMeasurementUnitType(0LL);
  uint64_t v24 = sub_100013354(v23);

  swift_retain();
  sub_100010214(v24, v4);
  sub_100013338();
  if (!v13)
  {
    uint64_t v79 = v4;
    sub_100015E1C();
    goto LABEL_9;
  }

  return (uint64_t)v12;
}

  __break(1u);
}

uint64_t sub_10000FD3C(void *a1)
{
  uint64_t v2 = type metadata accessor for DisplayRepresentationConfiguration(0LL);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v17[-1] - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for TypedValueResolutionCoercion(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v17[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for WFContentItem.ToolKitTypeResolutionContext(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  id v12 = (char *)&v17[-1] - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  type metadata accessor for WFMeasurementUnitType(0LL);
  v17[3] = v13;
  v17[4] = &protocol witness table for WFMeasurementUnitType;
  v17[0] = a1;
  (*(void (**)(char *, void, uint64_t))(v6 + 104))( v8,  enum case for TypedValueResolutionCoercion.default(_:),  v5);
  static DisplayRepresentationConfiguration.inMemoryImages.getter(a1);
  id v14 = [(id)objc_opt_self(WFLocalizationContext) defaultContext];
  WFContentItem.ToolKitTypeResolutionContext.init(measurementUnitTypeProvider:requiredCoercion:displayRepresentationConfig:localizationContext:)( v17,  v8,  v4,  v14);
  sub_10000E518(0LL, &qword_10006A0F0, &OBJC_CLASS___WFMeasurementContentItem_ptr);
  static WFContentItem.toolkitTypeDefinition(context:)(v12);
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
}

uint64_t sub_10000FEEC(uint64_t a1, void *a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v41 = a5;
  uint64_t v42 = a4;
  id v43 = a3;
  uint64_t v8 = type metadata accessor for TypeIdentifier(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  id v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v10);
  uint64_t v40 = (char *)&v32 - v13;
  uint64_t v14 = type metadata accessor for TypeDefinition(0LL);
  uint64_t v38 = *(void *)(v14 - 8);
  uint64_t v39 = v14;
  __chkstk_darwin(v14);
  uint64_t v45 = (uint64_t)&v32 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = *(void *)(a1 + 16);
  if (v16)
  {
    uint64_t v46 = v5;
    uint64_t v35 = v12;
    uint64_t v36 = v9;
    uint64_t v48 = _swiftEmptyArrayStorage;
    sub_1000522A0(0LL, v16, 0LL);
    uint64_t result = sub_100040E3C(a1);
    uint64_t v19 = result;
    char v21 = v20 & 1;
    uint64_t v37 = a1 + 56;
    uint64_t v33 = v8;
    char v34 = a2;
    while ((v19 & 0x8000000000000000LL) == 0 && v19 < 1LL << *(_BYTE *)(a1 + 32))
    {
      if (*(_DWORD *)(a1 + 36) != (_DWORD)v18) {
        goto LABEL_20;
      }
      uint64_t v44 = v18;
      uint64_t v22 = a1;
      uint64_t v23 = (void *)v36;
      uint64_t v24 = a2;
      uint64_t v25 = v40;
      (*(void (**)(char *, uint64_t, uint64_t))(v36 + 16))( v40,  *(void *)(a1 + 48) + *(void *)(v36 + 72) * v19,  v8);
      uint64_t v26 = (uint64_t)v35;
      ((void (*)(char *, char *, uint64_t))v23[4])(v35, v25, v8);
      uint64_t v27 = v46;
      sub_100012A84(v26, (uint64_t)v43, v42, v41, &v47, v45);
      uint64_t v46 = v27;
      if (v27)
      {
        ((void (*)(uint64_t, uint64_t))v23[1])(v26, v8);
        uint64_t v31 = v48;
        swift_bridgeObjectRelease(v42);

        swift_release(v31);
        return (uint64_t)v23;
      }

      ((void (*)(uint64_t, uint64_t))v23[1])(v26, v8);
      uint64_t v23 = v48;
      if ((swift_isUniquelyReferenced_nonNull_native(v48) & 1) == 0)
      {
        sub_1000522A0(0LL, v23[2] + 1LL, 1LL);
        uint64_t v23 = v48;
      }

      a1 = v22;
      unint64_t v29 = v23[2];
      unint64_t v28 = v23[3];
      if (v29 >= v28 >> 1)
      {
        sub_1000522A0(v28 > 1, v29 + 1, 1LL);
        uint64_t v23 = v48;
      }

      v23[2] = v29 + 1;
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v38 + 32))( (unint64_t)v23 + ((*(unsigned __int8 *)(v38 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v38 + 80))
      + *(void *)(v38 + 72) * v29,
        v45,
        v39);
      uint64_t v48 = v23;
      uint64_t result = sub_100040CD0(v19, v44, v21 & 1, v22);
      uint64_t v19 = result;
      char v21 = v30 & 1;
      --v16;
      uint64_t v8 = v33;
      a2 = v34;
      if (!v16)
      {
        sub_1000132AC(result, v18, v30 & 1);

        goto LABEL_16;
      }
    }

    __break(1u);
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
  }

  else
  {

    uint64_t v23 = _swiftEmptyArrayStorage;
LABEL_16:
    swift_bridgeObjectRelease(v42);

    return (uint64_t)v23;
  }

  return result;
}

void *sub_100010214(uint64_t a1, uint64_t a2)
{
  uint64_t v14 = type metadata accessor for TypeDefinition(0LL);
  uint64_t v5 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v7 = *(void *)(a1 + 16);
  if (v7)
  {
    uint64_t v16 = _swiftEmptyArrayStorage;
    uint64_t v15 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
    sub_1000522A0(0LL, v7, 0LL);
    uint64_t v8 = v16;
    for (unint64_t i = (id *)(a1 + 32); ; ++i)
    {
      id v10 = *i;
      sub_10000FD3C(v10);
      if (v2) {
        break;
      }

      uint64_t v16 = v8;
      unint64_t v12 = v8[2];
      unint64_t v11 = v8[3];
      if (v12 >= v11 >> 1)
      {
        sub_1000522A0(v11 > 1, v12 + 1, 1LL);
        uint64_t v8 = v16;
      }

      v8[2] = v12 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))( (unint64_t)v8 + ((*(unsigned __int8 *)(v5 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))
      + *(void *)(v5 + 72) * v12,
        v15,
        v14);
      if (!--v7)
      {
        swift_release(a2);
        return v8;
      }
    }

    swift_release(a2);
    swift_release(v8);
  }

  else
  {
    swift_release(a2);
    return _swiftEmptyArrayStorage;
  }

  return v8;
}

void *sub_1000103A4(uint64_t a1)
{
  uint64_t v16 = type metadata accessor for TypeIdentifier(0LL);
  uint64_t v3 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  uint64_t v5 = (char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v7 = _swiftEmptyArrayStorage;
  if (v6)
  {
    uint64_t v15 = v1;
    uint64_t v17 = _swiftEmptyArrayStorage;
    sub_1000522CC(0LL, v6, 0LL);
    uint64_t v7 = v17;
    uint64_t v8 = type metadata accessor for TypeDefinition(0LL);
    uint64_t v9 = *(void *)(v8 - 8);
    uint64_t v10 = a1 + ((*(unsigned __int8 *)(v9 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
    uint64_t v11 = *(void *)(v9 + 72);
    do
    {
      TypeDefinition.typeIdentifier.getter(v8);
      uint64_t v17 = v7;
      unint64_t v13 = v7[2];
      unint64_t v12 = v7[3];
      if (v13 >= v12 >> 1)
      {
        sub_1000522CC(v12 > 1, v13 + 1, 1LL);
        uint64_t v7 = v17;
      }

      v7[2] = v13 + 1;
      uint64_t v8 = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32))( (unint64_t)v7 + ((*(unsigned __int8 *)(v3 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80))
           + *(void *)(v3 + 72) * v13,
             v5,
             v16);
      v10 += v11;
      --v6;
    }

    while (v6);
  }

  return v7;
}

void *sub_1000104FC(void *a1, uint64_t a2, void *a3)
{
  id v26 = a3;
  uint64_t v29 = a2;
  uint64_t v4 = type metadata accessor for ContentItemClassDescriptor(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for TypeInstance(0LL);
  uint64_t v27 = *(void *)(v8 - 8);
  uint64_t v28 = v8;
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unsigned int v11 = [a1 hasPossibleValues];
  id v12 = [a1 possibleValues];
  unsigned __int8 v13 = [v12 isAsynchronous];
  swift_unknownObjectRelease(v12);
  uint64_t v14 = _swiftEmptyArrayStorage;
  if (v11 && (v13 & 1) == 0)
  {
    id v15 = [a1 possibleValues];
    uint64_t ObjectType = swift_getObjectType(v15);
    uint64_t v17 = WFContentPropertyPossibleValuesGetter.unsafeTypedValues.getter(ObjectType);
    uint64_t v18 = swift_unknownObjectRelease(v15);
    uint64_t v19 = v29;
    static WFContentItem.classDescriptor.getter(v18);
    uint64_t v14 = a1;
    uint64_t v20 = v30;
    WFContentProperty.toolkitTypeInstance(classDescriptor:seen:isDeferrable:)(v7, _swiftEmptyArrayStorage, 1LL);
    if (v20)
    {
      (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    }

    else
    {
      uint64_t v21 = (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
      uint64_t v22 = TypeInstance.typeIdentifiers.getter(v21);
      id v23 = a1;
      id v24 = v26;
      swift_bridgeObjectRetain(v17);
      uint64_t v14 = (void *)sub_10000FEEC(v22, v23, v24, v17, v19);
      swift_bridgeObjectRelease(v22);
      (*(void (**)(char *, uint64_t))(v27 + 8))(v10, v28);
    }

    swift_bridgeObjectRelease(v17);
  }

  return v14;
}

uint64_t sub_10001073C(uint64_t a1, uint64_t *a2, uint64_t a3, char a4, void *a5)
{
  id v24 = a5;
  uint64_t v23 = a1;
  uint64_t v8 = type metadata accessor for TypeDefinition(0LL);
  __chkstk_darwin(v8);
  unsigned int v11 = (char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t result = *a2;
  uint64_t v13 = *(void *)(*a2 + 16);
  if (v13)
  {
    unint64_t v14 = result + ((*(unsigned __int8 *)(v9 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
    uint64_t v15 = *(void *)(v9 + 72);
    uint64_t v21 = result;
    uint64_t v22 = v15;
    uint64_t v16 = v9;
    uint64_t v17 = *(void (**)(char *, unint64_t, uint64_t))(v9 + 16);
    swift_bridgeObjectRetain(result);
    int v18 = a4 & 1;
    while (1)
    {
      v17(v11, v14, v8);
      sub_100010878((uint64_t)v11, v23, v18, v24);
      if (v5) {
        break;
      }
      swift_bridgeObjectRelease(v19);
      (*(void (**)(char *, uint64_t))(v16 + 8))(v11, v8);
      v14 += v22;
      if (!--v13) {
        return swift_bridgeObjectRelease(v21);
      }
    }

    (*(void (**)(char *, uint64_t))(v16 + 8))(v11, v8);
    return swift_bridgeObjectRelease(v21);
  }

  return result;
}

uint64_t sub_100010878(uint64_t a1, uint64_t a2, int a3, void *a4)
{
  uint64_t v5 = v4;
  int v57 = a3;
  uint64_t v58 = a2;
  uint64_t v8 = sub_10000844C(&qword_100069A80);
  __chkstk_darwin(v8);
  uint64_t v56 = (void (*)(char *, uint64_t))((char *)v50 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v55 = type metadata accessor for TypeIdentifier(0LL);
  uint64_t v10 = *(void *)(v55 - 8);
  __chkstk_darwin(v55);
  id v12 = (char *)v50 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for ToolKitIndexer.TypeRegistryKey(0LL);
  uint64_t v14 = __chkstk_darwin(v13);
  uint64_t v16 = (char *)v50 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = __chkstk_darwin(v14);
  uint64_t v19 = (char *)v50 - v18;
  uint64_t v59 = a1;
  TypeDefinition.typeIdentifier.getter(v17);
  id v20 = [a4 locale];
  static Locale._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v21 = *(void *)(v5 + 24);
  uint64_t v60 = v19;
  sub_100016008();
  if (v23)
  {
    uint64_t v24 = v22;
    uint64_t v25 = (uint64_t)v60;
LABEL_3:
    sub_100013160(v25);
    return v24;
  }

  uint64_t v27 = v55;
  uint64_t v28 = v56;
  unint64_t v51 = v16;
  uint64_t v52 = a4;
  v50[1] = v21;
  uint64_t v53 = v10;
  uint64_t v29 = TypeDefinition.typeIdentifier.getter(v22);
  BOOL v54 = v12;
  uint64_t v30 = TypeIdentifier.bundleIdentifier.getter(v29);
  uint64_t v32 = v31;
  if ((v57 & 1) != 0)
  {
    uint64_t v33 = enum case for ContainerDefinition.ContainerType.framework(_:);
    uint64_t v34 = type metadata accessor for ContainerDefinition.ContainerType(0LL);
    (*(void (**)(void (*)(char *, uint64_t), uint64_t, uint64_t))(*(void *)(v34 - 8) + 104LL))( v28,  v33,  v34);
    uint64_t v35 = (uint64_t)v28;
    uint64_t v36 = 0LL;
    uint64_t v37 = v34;
  }

  else
  {
    uint64_t v37 = type metadata accessor for ContainerDefinition.ContainerType(0LL);
    uint64_t v35 = (uint64_t)v28;
    uint64_t v36 = 1LL;
  }

  sub_10000848C(v35, v36, 1LL, v37);
  uint64_t v38 = v61[3];
  sub_100004DEC(v30, v32, v28, v58);
  if (!v38)
  {
    uint64_t v40 = v39;
    sub_100013234((uint64_t)v28, &qword_100069A80);
    uint64_t v41 = swift_bridgeObjectRelease(v32);
    __chkstk_darwin(v41);
    uint64_t v42 = v59;
    v50[-4] = v59;
    v50[-3] = v40;
    v50[-2] = v52;
    id v43 = ToolDatabase.Savepoint.perform<A>(work:)(v61, sub_10001319C);
    uint64_t v45 = v61[0];
    uint64_t v44 = v61[1];
    __chkstk_darwin(v43);
    v50[-4] = v42;
    v50[-3] = v45;
    v50[-2] = v44;
    uint64_t v46 = ToolDatabase.Savepoint.perform<A>(work:)(&type metadata for (), sub_1000131B8);
    __chkstk_darwin(v46);
    v50[-4] = v42;
    v50[-3] = v45;
    v50[-2] = v44;
    ToolDatabase.Savepoint.perform<A>(work:)(v50, sub_1000131D4);
    uint64_t v48 = v53;
    unint64_t v47 = v54;
    uint64_t v25 = (uint64_t)v60;
    uint64_t v49 = (uint64_t)v51;
    sub_1000131F0((uint64_t)v60, (uint64_t)v51);
    swift_bridgeObjectRetain(v44);
    uint64_t v24 = v45;
    sub_100016064(v45, v44, v49);
    (*(void (**)(char *, uint64_t))(v48 + 8))(v47, v27);
    goto LABEL_3;
  }

  swift_bridgeObjectRelease(v32);
  sub_100013234((uint64_t)v28, &qword_100069A80);
  (*(void (**)(char *, uint64_t))(v53 + 8))(v54, v27);
  return sub_100013160((uint64_t)v60);
}

uint64_t sub_100010CA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[8] = a4;
  v5[9] = v4;
  v5[6] = a2;
  v5[7] = a3;
  v5[5] = a1;
  uint64_t v8 = type metadata accessor for Locale(0LL);
  v5[10] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v5[11] = v9;
  v5[12] = sub_100013328(v9);
  uint64_t v10 = type metadata accessor for TypeDefinition(0LL);
  v5[13] = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  v5[14] = v11;
  uint64_t v12 = sub_100013328(v11);
  v5[15] = v12;
  uint64_t v13 = (void *)swift_task_alloc(async function pointer to WFParameter.toolkitTypeDefinition(for:localizationContext:)[1]);
  v5[16] = v13;
  *uint64_t v13 = v5;
  v13[1] = sub_100010D58;
  return WFParameter.toolkitTypeDefinition(for:localizationContext:)(v12, a3, a4);
}

uint64_t sub_100010D58()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 128LL);
  *(void *)(*(void *)v1 + 136LL) = v0;
  swift_task_dealloc(v2);
  if (v0) {
    uint64_t v3 = sub_100011008;
  }
  else {
    uint64_t v3 = sub_100010DBC;
  }
  return swift_task_switch(v3, 0LL, 0LL);
}

uint64_t sub_100010DBC()
{
  uint64_t v48 = *(void *)(v0 + 72);
  *(void *)(v0 + 32) = *(void *)(v48 + 16);
  uint64_t v52 = *(void *)(v0 + 136);
  uint64_t v2 = *(void *)(v0 + 88);
  uint64_t v1 = *(void *)(v0 + 96);
  uint64_t v43 = *(void *)(v0 + 80);
  uint64_t v45 = *(void *)(v0 + 120);
  uint64_t v4 = *(void **)(v0 + 56);
  uint64_t v3 = *(void **)(v0 + 64);
  uint64_t v5 = *(void **)(v0 + 48);
  swift_retain();
  id v6 = [v4 identifier];
  char v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(v6);
  uint64_t v9 = v8;

  char v55 = v7;
  v10._countAndFlagsBits = 35LL;
  v10._object = (void *)0xE100000000000000LL;
  String.append(_:)(v10);
  id v11 = [v5 key];
  static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
  uint64_t v13 = v12;

  sub_100013308(v14, v15, v16, v17, v18, v19, v20, v21, v41, v43, v45, v48, v0 + 16, v52, v55);
  swift_bridgeObjectRelease(v13);
  v22._countAndFlagsBits = 45LL;
  v22._object = (void *)0xE100000000000000LL;
  String.append(_:)(v22);
  id v23 = [v3 locale];
  static Locale._unconditionallyBridgeFromObjectiveC(_:)();

  Locale.identifier.getter();
  uint64_t v25 = v24;
  int v26 = (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v44);
  sub_100013308(v26, v27, v28, v29, v30, v31, v32, v33, v42, v44, v46, v49, v51, v53, v56);
  swift_bridgeObjectRelease(v25);
  uint64_t v34 = v9;
  uint64_t v35 = (void *)swift_task_alloc(48LL);
  v35[2] = v50;
  v35[3] = v47;
  v35[4] = v4;
  v35[5] = v3;
  type metadata accessor for ToolDatabase.Transaction(0LL);
  ToolDatabase.Rollbackable.inSavepoint<A>(name:work:)(*(void *)v57, v9, sub_100013270, v35);
  uint64_t v36 = *(void *)(v0 + 120);
  if (v54)
  {
    swift_release(*(void *)(v0 + 32));
    swift_bridgeObjectRelease(v9);
    swift_task_dealloc(v35);
    sub_1000132F8();
    uint64_t v37 = *(void *)(v0 + 96);
    swift_task_dealloc(*(void *)(v0 + 120));
    swift_task_dealloc(v37);
  }

  else
  {
    uint64_t v38 = *(void *)(v0 + 96);
    swift_bridgeObjectRelease(v34);
    swift_task_dealloc(v35);
    swift_release(*(void *)(v0 + 32));
    uint64_t v39 = swift_bridgeObjectRelease(*(void *)(v0 + 24));
    TypeDefinition.typeIdentifier.getter(v39);
    sub_1000132F8();
    swift_task_dealloc(v36);
    swift_task_dealloc(v38);
  }

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100011008()
{
  uint64_t v1 = *(void *)(v0 + 96);
  swift_task_dealloc(*(void *)(v0 + 120));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100011048@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, void *a3@<X4>, uint64_t *a4@<X8>)
{
  char v9 = WFAction.isLinkSystemFrameworkIntent.getter();
  uint64_t result = sub_100010878(a2, a1, v9 & 1, a3);
  if (!v4)
  {
    *a4 = result;
    a4[1] = v11;
  }

  return result;
}

uint64_t sub_1000110BC(uint64_t a1)
{
  uint64_t v4 = v1;
  uint64_t v6 = type metadata accessor for TypeDefinition(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v8 = sub_1000132D4();
  uint64_t v9 = type metadata accessor for TypeIdentifier.PrimitiveTypeIdentifier(v8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 16LL))(v3, a1, v9);
  (*(void (**)(uint64_t, void, uint64_t))(v7 + 104))(v3, enum case for TypeDefinition.primitive(_:), v6);
  uint64_t v20 = *(void *)(v4 + 16);
  uint64_t v17 = 0x766974696D697270LL;
  unint64_t v18 = 0xEA00000000002065LL;
  uint64_t v10 = swift_retain();
  v11._countAndFlagsBits = TypeIdentifier.PrimitiveTypeIdentifier.debugDescription.getter(v10);
  String.append(_:)(v11);
  sub_1000132B8();
  uint64_t v15 = v4;
  uint64_t v16 = v3;
  type metadata accessor for ToolDatabase.Transaction(0LL);
  ToolDatabase.Rollbackable.inSavepoint<A>(name:work:)(0x766974696D697270LL, 0xEA00000000002065LL, sub_100013148, v14);
  sub_1000132B8();
  if (v2)
  {
    sub_100013360();
  }

  else
  {
    swift_release(v20);
    uint64_t v12 = swift_bridgeObjectRelease(v19);
    TypeDefinition.typeIdentifier.getter(v12);
  }

  return (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 8))(v3, v6);
}

void sub_100011248(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  id v7 = [(id)objc_opt_self(WFLocalizationContext) defaultContext];
  uint64_t v8 = sub_100010878(a2, a1, 0, v7);
  uint64_t v10 = v9;

  if (!v3)
  {
    *a3 = v8;
    a3[1] = v10;
  }

uint64_t sub_1000112E0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, void *a4@<X3>, uint64_t *a5@<X8>)
{
  v226 = a3;
  id v225 = a4;
  uint64_t v228 = a1;
  v193 = a5;
  uint64_t v6 = sub_10000844C(&qword_10006A0A0);
  __chkstk_darwin(v6);
  uint64_t v221 = (uint64_t)&v179 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = sub_10000844C(&qword_10006A0A8);
  __chkstk_darwin(v8);
  uint64_t v220 = (uint64_t)&v179 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = sub_10000844C(&qword_10006A0B0);
  __chkstk_darwin(v10);
  v215 = (char *)&v179 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = sub_10000844C(&qword_10006A0B8);
  __chkstk_darwin(v12);
  uint64_t v219 = (uint64_t)&v179 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = sub_10000844C(&qword_10006A0C0);
  uint64_t v15 = __chkstk_darwin(v14);
  v207 = (char *)&v179 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = __chkstk_darwin(v15);
  v206 = (char *)&v179 - v18;
  uint64_t v19 = __chkstk_darwin(v17);
  v205 = (char *)&v179 - v20;
  uint64_t v21 = __chkstk_darwin(v19);
  v213 = (char *)&v179 - v22;
  uint64_t v23 = __chkstk_darwin(v21);
  v204 = (char *)&v179 - v24;
  __chkstk_darwin(v23);
  v208 = (char *)&v179 - v25;
  uint64_t v26 = type metadata accessor for EnumerationCaseDefinition(0LL);
  uint64_t v209 = *(void *)(v26 - 8);
  uint64_t v210 = v26;
  __chkstk_darwin(v26);
  v214 = (char *)&v179 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v188 = type metadata accessor for EnumerationDefinition(0LL);
  uint64_t v187 = *(void *)(v188 - 8);
  __chkstk_darwin(v188);
  v186 = (char *)&v179 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v197 = type metadata accessor for TypeInstance(0LL);
  uint64_t v196 = *(void *)(v197 - 8);
  __chkstk_darwin(v197);
  v195 = (char *)&v179 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v200 = type metadata accessor for EntityPropertyDefinition(0LL);
  uint64_t v199 = *(void *)(v200 - 8);
  __chkstk_darwin(v200);
  v185 = (char *)&v179 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v191 = type metadata accessor for EntityDefinition(0LL);
  uint64_t v190 = *(void *)(v191 - 8);
  __chkstk_darwin(v191);
  v189 = (char *)&v179 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v223 = type metadata accessor for Locale(0LL);
  uint64_t v192 = *(void *)(v223 - 8);
  uint64_t v32 = __chkstk_darwin(v223);
  v212 = (char *)&v179 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v34 = __chkstk_darwin(v32);
  v194 = (char *)&v179 - v35;
  __chkstk_darwin(v34);
  v218 = (char *)&v179 - v36;
  uint64_t v37 = sub_10000844C(&qword_10006A0C8);
  __chkstk_darwin(v37);
  v217 = (char *)&v179 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v222 = type metadata accessor for TypeDisplayRepresentation(0LL);
  uint64_t v216 = *(void *)(v222 - 8);
  __chkstk_darwin(v222);
  v198 = (char *)&v179 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v203 = type metadata accessor for QueryDefinition.PredicateTemplates(0LL);
  uint64_t v202 = *(void *)(v203 - 8);
  __chkstk_darwin(v203);
  v201 = (char *)&v179 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v41 = type metadata accessor for TypeDefinition(0LL);
  uint64_t v42 = *(char **)(v41 - 8);
  uint64_t v43 = __chkstk_darwin(v41);
  uint64_t v45 = (char *)&v179 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v46 = __chkstk_darwin(v43);
  uint64_t v48 = (char *)&v179 - v47;
  __chkstk_darwin(v46);
  uint64_t v50 = (char *)&v179 - v49;
  uint64_t Definition = type metadata accessor for QueryDefinition(0LL);
  uint64_t v52 = *(void *)(Definition - 8);
  __chkstk_darwin(Definition);
  uint64_t v54 = (char *)&v179 - ((v53 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v224 = a2;
  uint64_t v55 = v227;
  uint64_t result = ToolDatabase.Accessor.addType(_:sourceContainerId:)(a2, v226);
  if (v55) {
    return result;
  }
  v183 = v54;
  v184 = (unsigned int (*)(char *, uint64_t))Definition;
  v182 = v48;
  v181 = v45;
  uint64_t v211 = result;
  v226 = v57;
  uint64_t v227 = 0LL;
  uint64_t v58 = (void (*)(char *, uint64_t, uint64_t))*((void *)v42 + 2);
  v58(v50, v224, v41);
  uint64_t v59 = (unsigned int (*)(char *, uint64_t))*((void *)v42 + 11);
  if (v59(v50, v41) == enum case for TypeDefinition.query(_:))
  {
    (*((void (**)(char *, uint64_t))v42 + 12))(v50, v41);
    uint64_t v60 = v52;
    char v61 = v183;
    uint64_t v62 = (*(uint64_t (**)(char *, char *, unsigned int (*)(char *, uint64_t)))(v52 + 32))( v183,  v50,  v184);
    uint64_t v63 = v201;
    QueryDefinition.templates.getter(v62);
    uint64_t v65 = v226;
    uint64_t v64 = v227;
    ToolDatabase.Accessor.addPredicateTemplates(_:typeId:)(v63, v211, v226);
    uint64_t v227 = v64;
    if (v64)
    {
      swift_bridgeObjectRelease(v65);
      (*(void (**)(char *, uint64_t))(v202 + 8))(v63, v203);
      return (*(uint64_t (**)(char *, void))(v60 + 8))(v61, v184);
    }

    (*(void (**)(char *, uint64_t))(v202 + 8))(v63, v203);
    uint64_t v66 = (*(uint64_t (**)(char *, void))(v60 + 8))(v61, v184);
  }

  else
  {
    uint64_t v66 = (*((uint64_t (**)(char *, uint64_t))v42 + 1))(v50, v41);
  }

  uint64_t v67 = v217;
  TypeDefinition.displayRepresentation.getter(v66);
  uint64_t v68 = (uint64_t)v67;
  uint64_t v69 = (uint64_t)v67;
  uint64_t v70 = v222;
  int v71 = sub_1000084E0(v69, 1LL, v222);
  id v72 = v225;
  uint64_t v73 = v218;
  if (v71 == 1)
  {
    uint64_t result = sub_100013234(v68, &qword_10006A0C8);
LABEL_9:
    uint64_t v74 = v193;
    uint64_t v75 = (uint64_t)v226;
    uint64_t *v193 = v211;
    v74[1] = v75;
    return result;
  }

  v184 = v59;
  v201 = (char *)v58;
  v183 = v42;
  uint64_t v180 = v41;
  unint64_t v76 = v198;
  uint64_t v77 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v216 + 32))(v198, v68, v70);
  v217 = (char *)TypeDisplayRepresentation.name.getter(v77);
  uint64_t v79 = v78;
  uint64_t v202 = TypeDisplayRepresentation.numericFormat.getter();
  uint64_t v81 = v80;
  v82._rawValue = (void *)TypeDisplayRepresentation.synonyms.getter();
  id v83 = [v72 locale];
  static Locale._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v84 = Locale.identifier.getter();
  uint64_t v85 = v73;
  uint64_t v87 = v86;
  uint64_t v88 = *(void (**)(char *, uint64_t))(v192 + 8);
  v88(v85, v223);
  v229._object = v87;
  v89._countAndFlagsBits = v211;
  uint64_t v90 = v226;
  v89._object = v226;
  v91._countAndFlagsBits = (uint64_t)v217;
  uint64_t v203 = (uint64_t)v79;
  v91._object = v79;
  v92.value._countAndFlagsBits = v202;
  v217 = v81;
  v92.value._object = v81;
  v229._countAndFlagsBits = v84;
  ToolDatabase.Accessor.addTypeDisplayRepresentation(typeId:name:numericFormat:synonyms:locale:)( v89,  v91,  v92,  v82,  v229);
  uint64_t v227 = v93;
  if (v93)
  {
    (*(void (**)(char *, uint64_t))(v216 + 8))(v76, v222);
    swift_bridgeObjectRelease(v90);
    swift_bridgeObjectRelease(v203);
    swift_bridgeObjectRelease(v82._rawValue);
    swift_bridgeObjectRelease(v87);
    return swift_bridgeObjectRelease(v217);
  }

  v218 = (char *)v88;
  swift_bridgeObjectRelease(v87);
  swift_bridgeObjectRelease(v203);
  swift_bridgeObjectRelease(v82._rawValue);
  swift_bridgeObjectRelease(v217);
  uint64_t v94 = v182;
  uint64_t v95 = v180;
  ((void (*)(char *, uint64_t, uint64_t))v201)(v182, v224, v180);
  if (v184(v94, v95) == enum case for TypeDefinition.entity(_:))
  {
    (*((void (**)(char *, uint64_t))v183 + 12))(v94, v95);
    uint64_t v96 = v190;
    uint64_t v97 = v189;
    uint64_t v98 = v94;
    uint64_t v99 = v191;
    uint64_t v100 = (*(uint64_t (**)(char *, char *, uint64_t))(v190 + 32))(v189, v98, v191);
    uint64_t v101 = EntityDefinition.properties.getter(v100);
    uint64_t v102 = *(void *)(v101 + 16);
    if (v102)
    {
      unint64_t v103 = (*(unsigned __int8 *)(v199 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v199 + 80);
      v182 = (char *)v101;
      unint64_t v104 = v101 + v103;
      uint64_t v192 = *(void *)(v199 + 72);
      uint64_t v202 = *(void *)(v199 + 16);
      uint64_t v105 = &selRef_parameterKey;
      uint64_t v106 = v200;
      uint64_t v107 = v185;
      uint64_t v108 = v211;
      while (1)
      {
        uint64_t v203 = v102;
        uint64_t v109 = ((uint64_t (*)(char *, unint64_t, uint64_t))v202)(v107, v104, v106);
        uint64_t v110 = EntityPropertyDefinition.id.getter(v109);
        uint64_t v112 = v111;
        __int128 v113 = v195;
        EntityPropertyDefinition.type.getter();
        uint64_t v115 = v226;
        uint64_t v114 = v227;
        ToolDatabase.Accessor.addEntityProperty(typeId:id:typeInstance:)(v108, v226, v110, v112, v113);
        if (v114)
        {
          swift_bridgeObjectRelease(v115);
          swift_bridgeObjectRelease(v112);
          (*(void (**)(char *, uint64_t))(v196 + 8))(v113, v197);
          goto LABEL_54;
        }

        (*(void (**)(char *, uint64_t))(v196 + 8))(v113, v197);
        uint64_t v116 = swift_bridgeObjectRelease(v112);
        uint64_t v227 = 0LL;
        v217 = (char *)EntityPropertyDefinition.id.getter(v116);
        uint64_t v118 = v117;
        id v119 = [v225 v105[75]];
        unint64_t v120 = v194;
        static Locale._unconditionallyBridgeFromObjectiveC(_:)();

        uint64_t v121 = Locale.identifier.getter();
        uint64_t v123 = v122;
        uint64_t v124 = ((uint64_t (*)(char *, uint64_t))v218)(v120, v223);
        v125._countAndFlagsBits = EntityPropertyDefinition.displayName.getter(v124);
        char v127 = v126;
        v128._countAndFlagsBits = v108;
        v128._object = v115;
        v129._countAndFlagsBits = (uint64_t)v217;
        v129._object = v118;
        v130._countAndFlagsBits = v121;
        v130._object = v123;
        v125._object = v127;
        ToolDatabase.Accessor.addEntityPropertyLocalization(typeId:propertyId:locale:displayName:)( v128,  v129,  v130,  v125);
        if (v131) {
          break;
        }
        uint64_t v227 = 0LL;
        uint64_t v106 = v200;
        (*(void (**)(char *, uint64_t))(v199 + 8))(v107, v200);
        swift_bridgeObjectRelease(v118);
        swift_bridgeObjectRelease(v123);
        swift_bridgeObjectRelease(v127);
        v104 += v192;
        uint64_t v102 = v203 - 1;
        uint64_t v105 = &selRef_parameterKey;
        if (v203 == 1)
        {
          swift_bridgeObjectRelease(v182);
          id v72 = v225;
          uint64_t v99 = v191;
          uint64_t v96 = v190;
          uint64_t v97 = v189;
          goto LABEL_22;
        }
      }

      swift_bridgeObjectRelease(v226);
      swift_bridgeObjectRelease(v118);
      swift_bridgeObjectRelease(v123);
      swift_bridgeObjectRelease(v127);
LABEL_54:
      (*(void (**)(char *, uint64_t))(v199 + 8))(v107, v200);
      swift_bridgeObjectRelease(v182);
      (*(void (**)(char *, uint64_t))(v190 + 8))(v189, v191);
      return (*(uint64_t (**)(char *, uint64_t))(v216 + 8))(v198, v222);
    }

    swift_bridgeObjectRelease(v101);
LABEL_22:
    (*(void (**)(char *, uint64_t))(v96 + 8))(v97, v99);
    uint64_t v133 = v214;
    uint64_t v132 = (uint64_t)v215;
    uint64_t v134 = v222;
    uint64_t v136 = v212;
    uint64_t v135 = (uint64_t)v213;
    uint64_t v95 = v180;
  }

  else
  {
    (*((void (**)(char *, uint64_t))v183 + 1))(v94, v95);
    uint64_t v133 = v214;
    uint64_t v132 = (uint64_t)v215;
    uint64_t v134 = v222;
    uint64_t v136 = v212;
    uint64_t v135 = (uint64_t)v213;
  }

  uint64_t v137 = v181;
  ((void (*)(char *, uint64_t, uint64_t))v201)(v181, v224, v95);
  if (v184(v137, v95) != enum case for TypeDefinition.enumeration(_:))
  {
    (*(void (**)(char *, uint64_t))(v216 + 8))(v198, v134);
    uint64_t result = (*((uint64_t (**)(char *, uint64_t))v183 + 1))(v137, v95);
    goto LABEL_9;
  }

  (*((void (**)(char *, uint64_t))v183 + 12))(v137, v95);
  uint64_t v138 = (*(uint64_t (**)(char *, char *, uint64_t))(v187 + 32))(v186, v137, v188);
  uint64_t v139 = EnumerationDefinition.cases.getter(v138);
  uint64_t v140 = *(void *)(v139 + 16);
  if (!v140)
  {
    swift_bridgeObjectRelease(v139);
    uint64_t v174 = v188;
    uint64_t v175 = v187;
    v176 = v186;
LABEL_49:
    v177 = v198;
    uint64_t v178 = v216;
    (*(void (**)(char *, uint64_t))(v175 + 8))(v176, v174);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v178 + 8))(v177, v134);
    goto LABEL_9;
  }

  unint64_t v141 = (*(unsigned __int8 *)(v209 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v209 + 80);
  v194 = (char *)v139;
  v142 = (char *)(v139 + v141);
  v195 = *(char **)(v209 + 72);
  uint64_t v196 = *(void *)(v209 + 16);
  uint64_t v143 = v210;
  while (1)
  {
    uint64_t v199 = v140;
    ((void (*)(char *, char *, uint64_t))v196)(v133, v142, v143);
    id v144 = [v72 locale];
    static Locale._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v203 = Locale.identifier.getter();
    uint64_t v224 = v145;
    uint64_t v146 = ((uint64_t (*)(char *, uint64_t))v218)(v136, v223);
    uint64_t v202 = EnumerationCaseDefinition.id.getter(v146);
    v217 = v147;
    uint64_t v148 = (uint64_t)v208;
    ((void (*)(void))EnumerationCaseDefinition.displayRepresentation.getter)();
    uint64_t v149 = type metadata accessor for DisplayRepresentation(0LL);
    if (sub_1000084E0(v148, 1LL, v149) == 1)
    {
      uint64_t v150 = sub_100013234(v148, &qword_10006A0C0);
      uint64_t v200 = 0LL;
      v201 = 0LL;
    }

    else
    {
      uint64_t v200 = DisplayRepresentation.title.getter();
      v201 = v151;
      uint64_t v150 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v149 - 8) + 8LL))(v148, v149);
    }

    uint64_t v152 = (uint64_t)v206;
    uint64_t v153 = (uint64_t)v204;
    EnumerationCaseDefinition.displayRepresentation.getter(v150);
    if (sub_1000084E0(v153, 1LL, v149) == 1)
    {
      sub_100013234(v153, &qword_10006A0C0);
      uint64_t v154 = sub_10000844C(&qword_10006A0D0);
      uint64_t v155 = sub_10000848C(v219, 1LL, 1LL, v154);
    }

    else
    {
      DisplayRepresentation.subtitle.getter();
      uint64_t v155 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v149 - 8) + 8LL))(v153, v149);
    }

    EnumerationCaseDefinition.displayRepresentation.getter(v155);
    if (sub_1000084E0(v135, 1LL, v149) == 1)
    {
      sub_100013234(v135, &qword_10006A0C0);
      uint64_t v156 = sub_10000844C(&qword_10006A0D8);
      uint64_t v157 = sub_10000848C(v132, 1LL, 1LL, v156);
    }

    else
    {
      DisplayRepresentation.altText.getter();
      uint64_t v157 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v149 - 8) + 8LL))(v135, v149);
    }

    uint64_t v158 = (uint64_t)v207;
    uint64_t v159 = (uint64_t)v205;
    EnumerationCaseDefinition.displayRepresentation.getter(v157);
    if (sub_1000084E0(v159, 1LL, v149) == 1)
    {
      sub_100013234(v159, &qword_10006A0C0);
      uint64_t v160 = sub_10000844C(&qword_10006A0E0);
      uint64_t v161 = sub_10000848C(v220, 1LL, 1LL, v160);
    }

    else
    {
      DisplayRepresentation.image.getter();
      uint64_t v161 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v149 - 8) + 8LL))(v159, v149);
    }

    EnumerationCaseDefinition.displayRepresentation.getter(v161);
    if (sub_1000084E0(v152, 1LL, v149) == 1)
    {
      sub_100013234(v152, &qword_10006A0C0);
      uint64_t v162 = type metadata accessor for DisplayRepresentation.PluginModelData(0LL);
      uint64_t v163 = sub_10000848C(v221, 1LL, 1LL, v162);
    }

    else
    {
      DisplayRepresentation.snippetPluginModel.getter();
      uint64_t v163 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v149 - 8) + 8LL))(v152, v149);
    }

    EnumerationCaseDefinition.displayRepresentation.getter(v163);
    int v164 = sub_1000084E0(v158, 1LL, v149);
    uint64_t v197 = (uint64_t)v142;
    if (v164 == 1)
    {
      sub_100013234(v158, &qword_10006A0C0);
      v165 = _swiftEmptyArrayStorage;
    }

    else
    {
      v165 = (void *)DisplayRepresentation.synonyms.getter();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v149 - 8) + 8LL))(v158, v149);
    }

    uint64_t v166 = v220;
    uint64_t v167 = v221;
    uint64_t v168 = v219;
    uint64_t v169 = v227;
    uint64_t v170 = v224;
    v171 = v217;
    v172 = v201;
    uint64_t v173 = (uint64_t)v215;
    ToolDatabase.Accessor.addEnumerationCase(typeId:locale:id:title:subtitle:altText:image:snippetPluginModel:synonyms:)( v211,  v226,  v203,  v224,  v202,  v217,  v200,  v201,  v219,  v215,  v220,  v221,  v165);
    if (v169) {
      break;
    }
    uint64_t v227 = 0LL;
    swift_bridgeObjectRelease(v165);
    swift_bridgeObjectRelease(v170);
    swift_bridgeObjectRelease(v171);
    swift_bridgeObjectRelease(v172);
    sub_100013234(v167, &qword_10006A0A0);
    sub_100013234(v166, &qword_10006A0A8);
    sub_100013234(v173, &qword_10006A0B0);
    sub_100013234(v168, &qword_10006A0B8);
    uint64_t v143 = v210;
    uint64_t v133 = v214;
    (*(void (**)(char *, uint64_t))(v209 + 8))(v214, v210);
    v142 = &v195[v197];
    uint64_t v140 = v199 - 1;
    id v72 = v225;
    uint64_t v132 = v173;
    uint64_t v136 = v212;
    uint64_t v135 = (uint64_t)v213;
    if (v199 == 1)
    {
      swift_bridgeObjectRelease(v194);
      uint64_t v174 = v188;
      uint64_t v175 = v187;
      v176 = v186;
      uint64_t v134 = v222;
      goto LABEL_49;
    }
  }

  swift_bridgeObjectRelease(v165);
  swift_bridgeObjectRelease(v226);
  swift_bridgeObjectRelease(v170);
  swift_bridgeObjectRelease(v171);
  swift_bridgeObjectRelease(v172);
  sub_100013234(v167, &qword_10006A0A0);
  sub_100013234(v166, &qword_10006A0A8);
  sub_100013234(v173, &qword_10006A0B0);
  sub_100013234(v168, &qword_10006A0B8);
  (*(void (**)(char *, uint64_t))(v209 + 8))(v214, v210);
  swift_bridgeObjectRelease(v194);
  (*(void (**)(char *, uint64_t))(v187 + 8))(v186, v188);
  return (*(uint64_t (**)(char *, uint64_t))(v216 + 8))(v198, v222);
}

uint64_t sub_100012614(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v21 = a4;
  uint64_t v19 = a1;
  uint64_t v20 = a3;
  uint64_t v5 = type metadata accessor for SystemTypeProtocol(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = __chkstk_darwin();
  uint64_t v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = TypeDefinition.systemProtocols.getter(v7);
  uint64_t v11 = *(void *)(v10 + 16);
  if (v11)
  {
    unint64_t v12 = (*(unsigned __int8 *)(v6 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
    uint64_t v18 = v10;
    unint64_t v13 = v10 + v12;
    uint64_t v14 = *(void *)(v6 + 72);
    uint64_t v15 = *(void (**)(char *, unint64_t, uint64_t))(v6 + 16);
    while (1)
    {
      v15(v9, v13, v5);
      ToolDatabase.Accessor.addSystemTypeProtocol(typeId:systemTypeProtocol:)(v20, v21, v9);
      if (v4) {
        break;
      }
      (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
      v13 += v14;
      if (!--v11) {
        goto LABEL_7;
      }
    }

    (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
LABEL_7:
    uint64_t v10 = v18;
  }

  return swift_bridgeObjectRelease(v10);
}

uint64_t sub_100012730(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v5 = v4;
  uint64_t v59 = a4;
  uint64_t v57 = a1;
  uint64_t v58 = a3;
  uint64_t v6 = type metadata accessor for UTType(0LL);
  uint64_t v56 = *(void *)(v6 - 8);
  ((void (*)(void))__chkstk_darwin)();
  uint64_t v8 = (char *)&v43 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for CoercionDefinition.Direction(0LL);
  uint64_t v53 = *(void *)(v9 - 8);
  uint64_t v54 = v9;
  uint64_t v10 = ((uint64_t (*)(void))__chkstk_darwin)();
  uint64_t v52 = (char *)&v43 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v10);
  uint64_t v51 = (char *)&v43 - v12;
  uint64_t v13 = type metadata accessor for CoercionDefinition(0LL);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v17 = (char *)&v43 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t result = TypeDefinition.coercions.getter(v15);
  uint64_t v19 = result;
  uint64_t v45 = *(void *)(result + 16);
  if (v45)
  {
    unint64_t v20 = 0LL;
    unint64_t v50 = result + ((*(unsigned __int8 *)(v14 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80));
    unsigned int v49 = enum case for CoercionDefinition.Direction.export(_:);
    uint64_t v46 = result;
    uint64_t v47 = v13;
    uint64_t v48 = v14;
    uint64_t v43 = v17;
    do
    {
      if (v20 >= *(void *)(v19 + 16))
      {
        __break(1u);
        return result;
      }

      (*(void (**)(char *, unint64_t, uint64_t))(v14 + 16))( v17,  v50 + *(void *)(v14 + 72) * v20,  v13);
      uint64_t v21 = ToolDatabase.Accessor.addTypeCoercion(typeId:coercionDefinition:)(v58, v59, v17);
      if (v5)
      {
        (*(void (**)(char *, uint64_t))(v14 + 8))(v17, v13);
        break;
      }

      unint64_t v55 = v20;
      uint64_t v22 = v51;
      CoercionDefinition.direction.getter(v21);
      uint64_t v23 = v53;
      uint64_t v24 = v54;
      uint64_t v25 = v17;
      uint64_t v26 = v52;
      (*(void (**)(char *, void, uint64_t))(v53 + 104))(v52, v49, v54);
      char v27 = static CoercionDefinition.Direction.== infix(_:_:)(v22, v26);
      uint64_t v28 = *(void (**)(char *, uint64_t))(v23 + 8);
      v28(v26, v24);
      uint64_t v29 = ((uint64_t (*)(char *, uint64_t))v28)(v22, v24);
      if ((v27 & 1) != 0)
      {
        uint64_t v30 = CoercionDefinition.wrappedUTTypes.getter(v29);
        uint64_t v31 = *(void *)(v30 + 16);
        if (v31)
        {
          unint64_t v32 = (*(unsigned __int8 *)(v56 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v56 + 80);
          uint64_t v44 = v30;
          unint64_t v33 = v30 + v32;
          uint64_t v34 = *(void *)(v56 + 72);
          uint64_t v35 = *(uint64_t (**)(char *, unint64_t, uint64_t))(v56 + 16);
          while (1)
          {
            uint64_t v36 = v35(v8, v33, v6);
            v37._countAndFlagsBits = UTType.identifier.getter(v36);
            uint64_t v39 = v38;
            v40._countAndFlagsBits = v58;
            v40._object = v59;
            v37._object = v39;
            ToolDatabase.Accessor.addUTTypeCoercion(typeId:coercionIdentifier:)(v40, v37);
            uint64_t v5 = v41;
            if (v41) {
              break;
            }
            (*(void (**)(char *, uint64_t))(v56 + 8))(v8, v6);
            swift_bridgeObjectRelease(v39);
            v33 += v34;
            if (!--v31)
            {
              swift_bridgeObjectRelease(v44);
              uint64_t v19 = v46;
              uint64_t v13 = v47;
              uint64_t v17 = v43;
              goto LABEL_14;
            }
          }

          swift_bridgeObjectRelease(v39);
          (*(void (**)(char *, uint64_t))(v56 + 8))(v8, v6);
          swift_bridgeObjectRelease(v44);
          (*(void (**)(char *, uint64_t))(v48 + 8))(v43, v47);
          uint64_t v42 = v46;
          return swift_bridgeObjectRelease(v42);
        }

        uint64_t v17 = v25;
        swift_bridgeObjectRelease(v30);
      }

      else
      {
        uint64_t v17 = v25;
      }

      uint64_t v19 = v46;
      uint64_t v13 = v47;
LABEL_14:
      unint64_t v20 = v55 + 1;
      uint64_t v14 = v48;
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v48 + 8))(v17, v13);
    }

    while (v20 != v45);
  }

  uint64_t v42 = v19;
  return swift_bridgeObjectRelease(v42);
}

void sub_100012A84( uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, char **a5@<X5>, uint64_t a6@<X8>)
{
  uint64_t v87 = a5;
  uint64_t v82 = a4;
  uint64_t v83 = a6;
  uint64_t v85 = a2;
  uint64_t v86 = a3;
  uint64_t v84 = a1;
  uint64_t v6 = type metadata accessor for TypeDisplayRepresentation(0LL);
  __chkstk_darwin(v6);
  uint64_t v81 = (char *)&v71 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for EnumerationDefinition.Kind(0LL);
  uint64_t v78 = *(void *)(v8 - 8);
  uint64_t v79 = v8;
  __chkstk_darwin(v8);
  uint64_t v80 = (char *)&v71 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for TypeIdentifier(0LL);
  uint64_t v75 = *(void *)(v10 - 8);
  uint64_t v76 = v10;
  __chkstk_darwin(v10);
  uint64_t v77 = (char *)&v71 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = sub_10000844C(&qword_10006A0A0);
  __chkstk_darwin(v12);
  uint64_t v91 = (uint64_t)&v71 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = sub_10000844C(&qword_10006A118);
  __chkstk_darwin(v14);
  uint64_t v94 = (char *)&v71 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = sub_10000844C(&qword_10006A0C0);
  __chkstk_darwin(v16);
  uint64_t v90 = (char *)&v71 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v95 = type metadata accessor for ContentPropertyPossibleValue(0LL);
  uint64_t v93 = *(void *)(v95 - 8);
  __chkstk_darwin(v95);
  uint64_t v19 = (char *)&v71 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v92 = type metadata accessor for EnumerationCaseDefinition(0LL);
  uint64_t v89 = *(void *)(v92 - 8);
  __chkstk_darwin(v92);
  uint64_t v21 = (char *)&v71 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v22 = type metadata accessor for DisplayRepresentationConfiguration(0LL);
  uint64_t v23 = *(void *)(v22 - 8);
  __chkstk_darwin(v22);
  uint64_t v25 = (char *)&v71 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v26 = type metadata accessor for EnumerationDefinition(0LL);
  uint64_t v27 = *(void *)(v26 - 8);
  uint64_t v28 = __chkstk_darwin(v26);
  uint64_t v30 = (char *)&v71 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v31 = v88;
  uint64_t v32 = WFContentProperty.associatedEnumMetadataIfAvailable()(v28);
  if (v31)
  {
    *uint64_t v87 = v31;
  }

  else
  {
    unint64_t v33 = (void *)v32;
    uint64_t v74 = v30;
    uint64_t v72 = v27;
    uint64_t v73 = v26;
    uint64_t v88 = v21;
    if (v32)
    {
      uint64_t v34 = v25;
      static DisplayRepresentationConfiguration.inMemoryImages.getter(v32);
      uint64_t v35 = v74;
      LNEnumMetadata.toolkitDefinition(for:displayRepresentationConfig:localizationContext:)(v84, v34, v85);
      (*(void (**)(char *, uint64_t))(v23 + 8))(v34, v22);

      uint64_t v61 = v83;
      (*(void (**)(uint64_t, char *, uint64_t))(v72 + 32))(v83, v35, v73);
      uint64_t v62 = enum case for TypeDefinition.enumeration(_:);
      uint64_t v63 = type metadata accessor for TypeDefinition(0LL);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v63 - 8) + 104LL))(v61, v62, v63);
    }

    else
    {
      uint64_t v74 = 0LL;
      uint64_t v36 = v86;
      uint64_t v37 = *(void *)(v86 + 16);
      if (v37)
      {
        uint64_t v96 = _swiftEmptyArrayStorage;
        sub_1000522F8(0LL, v37, 0LL);
        uint64_t v38 = (uint64_t)v94;
        uint64_t v39 = v36 + ((*(unsigned __int8 *)(v93 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v93 + 80));
        Swift::String v40 = *(char ***)(v93 + 72);
        uint64_t v86 = *(void *)(v93 + 16);
        uint64_t v87 = v40;
        uint64_t v41 = v95;
        do
        {
          uint64_t v42 = ((uint64_t (*)(char *, uint64_t, uint64_t))v86)(v19, v39, v41);
          uint64_t v43 = ContentPropertyPossibleValue.label.getter(v42);
          uint64_t v45 = v44;
          uint64_t v46 = ContentPropertyPossibleValue.label.getter(v43);
          uint64_t v48 = v47;
          uint64_t v49 = type metadata accessor for DisplayRepresentation.Image(0LL);
          sub_10000848C(v38, 1LL, 1LL, v49);
          uint64_t v50 = type metadata accessor for DisplayRepresentation.PluginModelData(0LL);
          uint64_t v51 = v91;
          sub_10000848C(v91, 1LL, 1LL, v50);
          uint64_t v52 = v46;
          uint64_t v53 = (uint64_t)v90;
          uint64_t v54 = v51;
          uint64_t v38 = (uint64_t)v94;
          DisplayRepresentation.init(title:subtitle:altText:image:snippetPluginModel:synonyms:)( v52,  v48,  0LL,  0LL,  0LL,  0LL,  v94,  v54,  _swiftEmptyArrayStorage);
          uint64_t v55 = type metadata accessor for DisplayRepresentation(0LL);
          sub_10000848C(v53, 0LL, 1LL, v55);
          uint64_t v56 = v53;
          uint64_t v41 = v95;
          EnumerationCaseDefinition.init(id:displayRepresentation:)(v43, v45, v56);
          (*(void (**)(char *, uint64_t))(v93 + 8))(v19, v41);
          uint64_t v57 = v96;
          if ((swift_isUniquelyReferenced_nonNull_native(v96) & 1) == 0)
          {
            sub_1000522F8(0LL, v57[2] + 1LL, 1LL);
            uint64_t v41 = v95;
            uint64_t v57 = v96;
          }

          uint64_t v58 = v89;
          unint64_t v60 = v57[2];
          unint64_t v59 = v57[3];
          if (v60 >= v59 >> 1)
          {
            sub_1000522F8(v59 > 1, v60 + 1, 1LL);
            uint64_t v41 = v95;
            uint64_t v57 = v96;
          }

          v57[2] = v60 + 1;
          (*(void (**)(unint64_t, char *))(v58 + 32))( (unint64_t)v57 + ((*(unsigned __int8 *)(v58 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v58 + 80))
          + *(void *)(v58 + 72) * v60,
            v88);
          uint64_t v96 = v57;
          v39 += (uint64_t)v87;
          --v37;
        }

        while (v37);
      }

      else
      {
        uint64_t v57 = _swiftEmptyArrayStorage;
      }

      uint64_t v64 = v85;
      uint64_t v65 = v77;
      (*(void (**)(char *, uint64_t, uint64_t))(v75 + 16))(v77, v84, v76);
      uint64_t v66 = v80;
      (*(void (**)(char *, void, uint64_t))(v78 + 104))( v80,  enum case for EnumerationDefinition.Kind.actionEnum(_:),  v79);
      uint64_t v67 = v81;
      static WFContentItem.toolkitTypeDisplayRepresentation(localizationContext:)(v64);
      uint64_t v68 = v83;
      EnumerationDefinition.init(identifier:cases:kind:systemProtocols:runtimeRequirements:displayRepresentation:)( v65,  v57,  v66,  _swiftEmptyArrayStorage,  _swiftEmptyArrayStorage,  v67);
      uint64_t v69 = enum case for TypeDefinition.enumeration(_:);
      uint64_t v70 = type metadata accessor for TypeDefinition(0LL);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v70 - 8) + 104LL))(v68, v69, v70);
    }
  }

void *sub_1000130DC()
{
  return v0;
}

uint64_t sub_100013108()
{
  return swift_deallocClassInstance(v0, 40LL, 7LL);
}

uint64_t type metadata accessor for TypeIndexer()
{
  return objc_opt_self(&OBJC_CLASS____TtC24BackgroundShortcutRunner11TypeIndexer);
}

void sub_100013148(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
}

uint64_t sub_100013160(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for ToolKitIndexer.TypeRegistryKey(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_10001319C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_1000112E0(a1, *(void *)(v2 + 16), *(void **)(v2 + 24), *(void **)(v2 + 32), a2);
}

uint64_t sub_1000131B8(uint64_t a1)
{
  return sub_100012614(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_1000131D4(uint64_t a1)
{
  return sub_100012730(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(void **)(v1 + 32));
}

uint64_t sub_1000131F0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ToolKitIndexer.TypeRegistryKey(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_100013234(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = sub_10000844C(a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8LL))(a1, v3);
  return a1;
}

uint64_t sub_100013270@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_100011048(a1, *(void *)(v2 + 24), *(void **)(v2 + 40), a2);
}

uint64_t sub_10001328C(uint64_t a1)
{
  return sub_10001073C(a1, *(uint64_t **)(v1 + 16), *(void *)(v1 + 24), *(_BYTE *)(v1 + 32), *(void **)(v1 + 40));
}

uint64_t sub_1000132AC(uint64_t result, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0) {
    return swift_bridgeObjectRelease(result);
  }
  return result;
}

uint64_t sub_1000132B8()
{
  return swift_bridgeObjectRelease(v0);
}

uint64_t sub_1000132C0()
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)(v1 - 184) + 8LL))(v0, *(void *)(v1 - 160));
}

uint64_t sub_1000132D4()
{
  return 0LL;
}

uint64_t sub_1000132F0(uint64_t a1, unint64_t *a2, void *a3)
{
  return sub_10000E518(0LL, a2, a3);
}

uint64_t sub_1000132F8()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

void sub_100013308( int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  v17._countAndFlagsBits = v15;
  v17._object = v16;
  String.append(_:)(v17);
}

  ;
}

uint64_t sub_100013328@<X0>(uint64_t a1@<X8>)
{
  return swift_task_alloc((*(void *)(a1 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
}

uint64_t sub_100013338()
{
  return swift_bridgeObjectRelease(v0);
}

uint64_t sub_100013348()
{
  return swift_bridgeObjectRelease(v0);
}

uint64_t sub_100013354(uint64_t a1)
{
  return static Array._unconditionallyBridgeFromObjectiveC(_:)(v1, a1);
}

uint64_t sub_100013360()
{
  return swift_release(v0);
}

uint64_t sub_100013368()
{
  uint64_t v2 = *(os_unfair_lock_s **)(v1 + 16);
  sub_100044400();
  os_unfair_lock_lock(v2 + 6);
  uint64_t v3 = sub_100044B28();
  sub_1000160EC(v3, v4, v0, v5);
  os_unfair_lock_unlock(v2 + 6);
  sub_100013360();
  return v7;
}

uint64_t sub_1000133E4(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  char v8 = a2 & 1;
  uint64_t v9 = *(os_unfair_lock_s **)(v4 + 16);
  sub_100044400();
  os_unfair_lock_lock(v9 + 6);
  sub_100016180((uint64_t)&v9[4], a3, a4, a1, v8);
  os_unfair_lock_unlock(v9 + 6);
  sub_100013360();
  return swift_bridgeObjectRelease(a4);
}

void sub_100013470(uint64_t a1)
{
  uint64_t v1 = a1;
  unint64_t v34 = (unint64_t)&_swiftEmptyArrayStorage;
  if ((a1 & 0xC000000000000001LL) != 0)
  {
    if (a1 < 0) {
      uint64_t v2 = a1;
    }
    else {
      uint64_t v2 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a1);
    uint64_t v3 = __CocoaSet.makeIterator()(v2);
    uint64_t v4 = sub_10000E518(0LL, &qword_10006A3D0, &OBJC_CLASS___WFResource_ptr);
    sub_100040880(&qword_10006A3D8, &qword_10006A3D0, &OBJC_CLASS___WFResource_ptr);
    uint64_t v6 = Set.Iterator.init(_cocoa:)(v33, v3, v4, v5);
    uint64_t v1 = v33[0];
    uint64_t v30 = v33[1];
    uint64_t v7 = v33[2];
    int64_t v8 = v33[3];
    unint64_t v9 = v33[4];
  }

  else
  {
    uint64_t v10 = -1LL << *(_BYTE *)(a1 + 32);
    uint64_t v30 = a1 + 56;
    uint64_t v7 = ~v10;
    uint64_t v11 = -v10;
    if (v11 < 64) {
      uint64_t v12 = ~(-1LL << v11);
    }
    else {
      uint64_t v12 = -1LL;
    }
    unint64_t v9 = v12 & *(void *)(a1 + 56);
    uint64_t v6 = (void *)swift_bridgeObjectRetain(a1);
    int64_t v8 = 0LL;
  }

  int64_t v13 = (unint64_t)(v7 + 64) >> 6;
  if (v1 < 0) {
    goto LABEL_13;
  }
  while (1)
  {
    if (v9)
    {
      uint64_t v14 = (v9 - 1) & v9;
      unint64_t v15 = __clz(__rbit64(v9)) | (v8 << 6);
      int64_t v16 = v8;
      goto LABEL_32;
    }

    int64_t v21 = v8 + 1;
    if (__OFADD__(v8, 1LL)) {
      break;
    }
    if (v21 >= v13) {
      goto LABEL_40;
    }
    unint64_t v22 = *(void *)(v30 + 8 * v21);
    int64_t v16 = v8 + 1;
    if (!v22)
    {
      int64_t v16 = v8 + 2;
      if (v8 + 2 >= v13) {
        goto LABEL_40;
      }
      unint64_t v22 = *(void *)(v30 + 8 * v16);
      if (!v22)
      {
        int64_t v16 = v8 + 3;
        if (v8 + 3 >= v13) {
          goto LABEL_40;
        }
        unint64_t v22 = *(void *)(v30 + 8 * v16);
        if (!v22)
        {
          int64_t v16 = v8 + 4;
          if (v8 + 4 >= v13) {
            goto LABEL_40;
          }
          unint64_t v22 = *(void *)(v30 + 8 * v16);
          if (!v22)
          {
            int64_t v16 = v8 + 5;
            if (v8 + 5 >= v13) {
              goto LABEL_40;
            }
            unint64_t v22 = *(void *)(v30 + 8 * v16);
            if (!v22)
            {
              int64_t v23 = v8 + 6;
              while (v23 < v13)
              {
                unint64_t v22 = *(void *)(v30 + 8 * v23++);
                if (v22)
                {
                  int64_t v16 = v23 - 1;
                  goto LABEL_31;
                }
              }

LABEL_31:
    uint64_t v14 = (v22 - 1) & v22;
    unint64_t v15 = __clz(__rbit64(v22)) + (v16 << 6);
LABEL_32:
    id v20 = *(id *)(*(void *)(v1 + 48) + 8 * v15);
    if (!v20) {
      goto LABEL_40;
    }
    while (1)
    {
      uint64_t v24 = objc_opt_self(&OBJC_CLASS___WFParameterRelationResource);
      uint64_t v25 = swift_dynamicCastObjCClass(v20, v24);
      if (v25)
      {
        uint64_t v26 = v25;
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        unint64_t v28 = *(void *)((v34 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
        unint64_t v27 = *(void *)((v34 & 0xFFFFFFFFFFFFFF8LL) + 0x18);
        if (v28 >= v27 >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v27 > 1, v28 + 1, 1LL);
        }
        uint64_t v29 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v28, v26);
        uint64_t v6 = (void *)specialized Array._endMutation()(v29);
      }

      else
      {
      }

      int64_t v8 = v16;
      unint64_t v9 = v14;
      if ((v1 & 0x8000000000000000LL) == 0) {
        break;
      }
LABEL_13:
      uint64_t v17 = __CocoaSet.Iterator.next()(v6);
      if (v17)
      {
        uint64_t v18 = v17;
        uint64_t v31 = v17;
        uint64_t v19 = sub_10000E518(0LL, &qword_10006A3D0, &OBJC_CLASS___WFResource_ptr);
        swift_unknownObjectRetain(v18);
        swift_dynamicCast(&v32, &v31, (char *)&type metadata for Swift.AnyObject + 8, v19, 7LL);
        id v20 = v32;
        swift_unknownObjectRelease(v18);
        int64_t v16 = v8;
        uint64_t v14 = v9;
        if (v20) {
          continue;
        }
      }

      goto LABEL_40;
    }
  }

  __break(1u);
}

    unint64_t v103 = v90 + 22;
    sub_1000475E4(v90[45]);
    v90[22] = &_swiftEmptyDictionarySingleton;
    unint64_t v104 = *(void *)(isUniquelyReferenced_nonNull_native + 16);
    uint64_t v105 = (uint64_t)v90;
    if (v104)
    {
      uint64_t v106 = 0LL;
      uint64_t v37 = 0LL;
      uint64_t v107 = 0LL;
      uint64_t v108 = 0LL;
      uint64_t v109 = isUniquelyReferenced_nonNull_native + 32;
      a11 = *(void *)(isUniquelyReferenced_nonNull_native + 16);
      while (v108 < *(void *)(isUniquelyReferenced_nonNull_native + 16))
      {
        uint64_t v110 = (_BYTE *)(v109 + 16 * v108);
        if (v110[8])
        {
          if (v110[8] == 1)
          {
            uint64_t v111 = __OFADD__(v37, 1LL);
            uint64_t v37 = (void *)((char *)v37 + 1);
            if (v111) {
              goto LABEL_99;
            }
          }

          else
          {
            uint64_t v111 = __OFADD__(v107++, 1LL);
            if (v111) {
              goto LABEL_100;
            }
          }
        }

        else
        {
          uint64_t v75 = *(void *)v110;
          uint64_t v112 = *(void *)(*(void *)v110 + 16LL);
          if (v112)
          {
            a15 = v108;
            v207 = v107;
            uint64_t v211 = v37;
            a19 = isUniquelyReferenced_nonNull_native;
            sub_100040930(v75, 0);
            sub_1000436BC();
            __int128 v113 = (unsigned __int8 *)(v75 + 48);
            while (1)
            {
              uint64_t v219 = v112;
              uint64_t v37 = (void *)*((void *)v113 - 2);
              uint64_t v45 = *((void *)v113 - 1);
              uint64_t v114 = *v113;
              sub_100045AEC((uint64_t)v37, v45, *v113);
              uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v103);
              a23 = *v103;
              uint64_t v115 = v103;
              *unint64_t v103 = 0x8000000000000000LL;
              sub_100046514();
              sub_100046548();
              unint64_t v120 = v118 + v119;
              if (__OFADD__(v118, v119)) {
                break;
              }
              uint64_t v121 = v116;
              v122 = v117;
              sub_10000844C(&qword_10006A350);
              uint64_t v123 = _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v120);
              uint64_t v124 = a23;
              unint64_t v103 = v115;
              if (v123)
              {
                sub_100046514();
                sub_100046204();
                if (!v126) {
                  return sub_1000437A4();
                }
                uint64_t v121 = v125;
              }

              char v127 = *v115;
              *uint64_t v115 = v124;
              swift_bridgeObjectRelease(v127);
              Swift::String v128 = (void *)*v115;
              if ((v122 & 1) != 0)
              {
                sub_10004317C();
              }

              else
              {
                v128[(v121 >> 6) + 8] |= 1LL << v121;
                Swift::String v129 = v128[6] + 24 * v121;
                *(void *)Swift::String v129 = v37;
                *(void *)(v129 + 8) = v45;
                *(_BYTE *)(v129 + 16) = v114;
                *(void *)(v128[7] + 8 * v121) = 0LL;
                Swift::String v130 = v128[2];
                uint64_t v131 = v130 + 1;
                uint64_t isUniquelyReferenced_nonNull_native = __OFADD__(v130, 1LL);
                sub_10004317C();
                if ((isUniquelyReferenced_nonNull_native & 1) != 0) {
                  goto LABEL_95;
                }
                v128[2] = v131;
                sub_1000408B4((uint64_t)v37, v45, v114);
              }

              uint64_t v75 = v128[7];
              sub_100008D58();
              uint64_t v132 = *(void *)(v75 + 8 * v121);
              uint64_t v133 = __CFADD__(v132, 1LL);
              uint64_t v134 = v132 + 1;
              if (v133) {
                goto LABEL_94;
              }
              v113 += 24;
              *(void *)(v75 + 8 * v121) = v134;
              sub_1000408CC((uint64_t)v37, v45, v114);
              uint64_t v112 = v219 - 1;
              if (v219 == 1)
              {
                sub_100044B3C();
                uint64_t v106 = sub_1000204E8;
                uint64_t v105 = (uint64_t)v209;
                uint64_t v37 = v211;
                uint64_t isUniquelyReferenced_nonNull_native = a19;
                uint64_t v109 = v215;
                uint64_t v108 = a15;
                uint64_t v107 = v207;
                unint64_t v104 = a11;
                goto LABEL_57;
              }
            }

            __break(1u);
LABEL_94:
            __break(1u);
LABEL_95:
            __break(1u);
            goto LABEL_96;
          }
        }

      uint64_t v7 = v16;
LABEL_32:
      if (v7 >= v3) {
        goto LABEL_41;
      }
      if (__OFSUB__(v7, v9)) {
        goto LABEL_144;
      }
      if (v7 - v9 >= v99) {
        goto LABEL_41;
      }
      if (__OFADD__(v9, v99)) {
        goto LABEL_147;
      }
      if (v9 + v99 >= v3) {
        uint64_t v30 = v3;
      }
      else {
        uint64_t v30 = v9 + v99;
      }
      if (v30 < v9)
      {
LABEL_148:
        __break(1u);
LABEL_149:
        __break(1u);
LABEL_150:
        __break(1u);
LABEL_151:
        __break(1u);
LABEL_152:
        __break(1u);
LABEL_153:
        __break(1u);
LABEL_154:
        __break(1u);
        return result;
      }

      if (v7 == v30)
      {
LABEL_41:
        uint64_t v31 = v103;
      }

      else
      {
        uint64_t v82 = (uint64_t *)(v8 + 16 * v7);
        uint64_t v31 = v103;
        do
        {
          uint64_t v83 = (uint64_t *)(v8 + 16 * v7);
          uint64_t result = *v83;
          uint64_t v84 = v83[1];
          uint64_t v85 = v9;
          uint64_t v86 = v82;
          do
          {
            uint64_t v87 = *(v86 - 2);
            uint64_t v88 = *(v86 - 1);
            if (result == v87 && v84 == v88) {
              break;
            }
            uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(result, v84, v87, v88, 1LL);
            if ((result & 1) == 0) {
              break;
            }
            if (!v8) {
              goto LABEL_151;
            }
            uint64_t result = *v86;
            uint64_t v84 = v86[1];
            *(_OWORD *)uint64_t v86 = *((_OWORD *)v86 - 1);
            *(v86 - 1) = v84;
            *(v86 - 2) = result;
            v86 -= 2;
            ++v85;
          }

          while (v7 != v85);
          ++v7;
          v82 += 2;
        }

        while (v7 != v30);
        uint64_t v7 = v30;
      }

      if (v7 < v9) {
        goto LABEL_143;
      }
      uint64_t result = swift_isUniquelyReferenced_nonNull_native(v31);
      if ((result & 1) == 0)
      {
        uint64_t result = (uint64_t)sub_10003F9CC(0LL, *((void *)v31 + 2) + 1LL, 1, v31);
        uint64_t v31 = (char *)result;
      }

      unint64_t v33 = *((void *)v31 + 2);
      uint64_t v32 = *((void *)v31 + 3);
      unint64_t v34 = v33 + 1;
      if (v33 >= v32 >> 1)
      {
        uint64_t result = (uint64_t)sub_10003F9CC((char *)(v32 > 1), v33 + 1, 1, v31);
        uint64_t v31 = (char *)result;
      }

      *((void *)v31 + 2) = v34;
      uint64_t v35 = v31 + 32;
      uint64_t v36 = (Swift::Int *)&v31[16 * v33 + 32];
      *uint64_t v36 = v9;
      v36[1] = v7;
      unint64_t v103 = v31;
      if (v33)
      {
        while (1)
        {
          uint64_t v37 = v34 - 1;
          if (v34 >= 4)
          {
            uint64_t v42 = &v35[2 * v34];
            uint64_t v43 = *(v42 - 8);
            uint64_t v44 = *(v42 - 7);
            uint64_t v48 = __OFSUB__(v44, v43);
            uint64_t v45 = v44 - v43;
            if (v48) {
              goto LABEL_128;
            }
            uint64_t v47 = *(v42 - 6);
            uint64_t v46 = *(v42 - 5);
            uint64_t v48 = __OFSUB__(v46, v47);
            Swift::String v40 = v46 - v47;
            uint64_t v41 = v48;
            if (v48) {
              goto LABEL_129;
            }
            uint64_t v49 = v34 - 2;
            uint64_t v50 = &v35[2 * v34 - 4];
            uint64_t v52 = *v50;
            uint64_t v51 = v50[1];
            uint64_t v48 = __OFSUB__(v51, v52);
            uint64_t v53 = v51 - v52;
            if (v48) {
              goto LABEL_130;
            }
            uint64_t v48 = __OFADD__(v40, v53);
            uint64_t v54 = v40 + v53;
            if (v48) {
              goto LABEL_132;
            }
            if (v54 >= v45)
            {
              uint64_t v72 = &v35[2 * v37];
              uint64_t v74 = *v72;
              uint64_t v73 = v72[1];
              uint64_t v48 = __OFSUB__(v73, v74);
              uint64_t v75 = v73 - v74;
              if (v48) {
                goto LABEL_138;
              }
              uint64_t v65 = v40 < v75;
              goto LABEL_79;
            }
          }

          else
          {
            if (v34 != 3)
            {
              uint64_t v66 = *((void *)v31 + 4);
              uint64_t v67 = *((void *)v31 + 5);
              uint64_t v48 = __OFSUB__(v67, v66);
              unint64_t v59 = v67 - v66;
              unint64_t v60 = v48;
              goto LABEL_73;
            }

            uint64_t v39 = *((void *)v31 + 4);
            uint64_t v38 = *((void *)v31 + 5);
            uint64_t v48 = __OFSUB__(v38, v39);
            Swift::String v40 = v38 - v39;
            uint64_t v41 = v48;
          }

          if ((v41 & 1) != 0) {
            goto LABEL_131;
          }
          uint64_t v49 = v34 - 2;
          uint64_t v55 = &v35[2 * v34 - 4];
          uint64_t v57 = *v55;
          uint64_t v56 = v55[1];
          uint64_t v58 = __OFSUB__(v56, v57);
          unint64_t v59 = v56 - v57;
          unint64_t v60 = v58;
          if (v58) {
            goto LABEL_133;
          }
          uint64_t v61 = &v35[2 * v37];
          uint64_t v63 = *v61;
          uint64_t v62 = v61[1];
          uint64_t v48 = __OFSUB__(v62, v63);
          uint64_t v64 = v62 - v63;
          if (v48) {
            goto LABEL_135;
          }
          if (__OFADD__(v59, v64)) {
            goto LABEL_137;
          }
          if (v59 + v64 >= v40)
          {
            uint64_t v65 = v40 < v64;
LABEL_79:
            if (v65) {
              uint64_t v37 = v49;
            }
            goto LABEL_81;
          }

char *sub_1000137AC(uint64_t a1, void *a2)
{
  uint64_t v5 = sub_10000844C(&qword_10006A4B0);
  __chkstk_darwin(v5);
  uint64_t v7 = (uint64_t *)((char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v8 = type metadata accessor for TypedValue(0LL);
  uint64_t v24 = *(void *)(v8 - 8);
  uint64_t v9 = __chkstk_darwin(v8);
  int64_t v23 = (char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v9);
  unint64_t v22 = (char *)&v20 - v11;
  uint64_t v12 = *(void *)(a1 + 16);
  if (v12)
  {
    uint64_t v13 = a1 + 32;
    uint64_t v20 = a1;
    swift_bridgeObjectRetain(a1);
    uint64_t v14 = (char *)&_swiftEmptyArrayStorage;
    int64_t v21 = a2;
    while (1)
    {
      sub_1000346AC(v13, a2, v7);
      if (v2) {
        break;
      }
      if (sub_1000084E0((uint64_t)v7, 1LL, v8) == 1)
      {
        sub_100041358((uint64_t)v7, &qword_10006A4B0);
      }

      else
      {
        unint64_t v15 = *(void (**)(char *, uint64_t *, uint64_t))(v24 + 32);
        int64_t v16 = v22;
        v15(v22, v7, v8);
        v15(v23, (uint64_t *)v16, v8);
        if ((swift_isUniquelyReferenced_nonNull_native(v14) & 1) == 0) {
          uint64_t v14 = (char *)sub_100050D0C(0LL, *((void *)v14 + 2) + 1LL, 1LL, (uint64_t)v14);
        }
        unint64_t v18 = *((void *)v14 + 2);
        unint64_t v17 = *((void *)v14 + 3);
        if (v18 >= v17 >> 1) {
          uint64_t v14 = (char *)sub_100050D0C(v17 > 1, v18 + 1, 1LL, (uint64_t)v14);
        }
        *((void *)v14 + 2) = v18 + 1;
        v15( &v14[((*(unsigned __int8 *)(v24 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v24 + 80))
             + *(void *)(v24 + 72) * v18],
          (uint64_t *)v23,
          v8);
        a2 = v21;
      }

      v13 += 32LL;
      if (!--v12)
      {

        swift_bridgeObjectRelease(v20);
        return v14;
      }
    }

    swift_bridgeObjectRelease(v14);
    swift_bridgeObjectRelease(v20);
  }

  else
  {

    return (char *)&_swiftEmptyArrayStorage;
  }

  return v14;
}

void sub_100013A00(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v5 = a1;
  unint64_t v35 = (unint64_t)_swiftEmptyArrayStorage;
  if ((a1 & 0xC000000000000001LL) != 0)
  {
    if (a1 < 0) {
      uint64_t v6 = a1;
    }
    else {
      uint64_t v6 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    sub_100043E98();
    __CocoaSet.makeIterator()(v6);
    sub_10000E518(0LL, &qword_10006A3D0, &OBJC_CLASS___WFResource_ptr);
    sub_100040880(&qword_10006A3D8, &qword_10006A3D0, &OBJC_CLASS___WFResource_ptr);
    uint64_t v7 = sub_100045A78();
    uint64_t v11 = Set.Iterator.init(_cocoa:)(v10, v7, v8, v9);
    uint64_t v5 = v34[1];
    uint64_t v32 = v34[2];
    uint64_t v12 = v34[3];
    int64_t v13 = v34[4];
    uint64_t v2 = v34[5];
  }

  else
  {
    uint64_t v32 = a1 + 56;
    uint64_t v12 = ~(-1LL << *(_BYTE *)(a1 + 32));
    sub_100046AA0();
    uint64_t v11 = (void *)sub_100043E98();
    int64_t v13 = 0LL;
  }

  int64_t v14 = (unint64_t)(v12 + 64) >> 6;
  if (v5 < 0) {
    goto LABEL_10;
  }
  while (1)
  {
    if (v2)
    {
      sub_100046A80();
      uint64_t v3 = v15 & v2;
      uint64_t v17 = v16 | (v13 << 6);
      int64_t v18 = v13;
      goto LABEL_29;
    }

    int64_t v23 = v13 + 1;
    if (__OFADD__(v13, 1LL)) {
      break;
    }
    if (v23 >= v14) {
      goto LABEL_37;
    }
    int64_t v18 = v13 + 1;
    if (!*(void *)(v32 + 8 * v23))
    {
      int64_t v18 = v13 + 2;
      if (v13 + 2 >= v14) {
        goto LABEL_37;
      }
      if (!*(void *)(v32 + 8 * v18))
      {
        int64_t v18 = v13 + 3;
        if (v13 + 3 >= v14) {
          goto LABEL_37;
        }
        if (!*(void *)(v32 + 8 * v18))
        {
          int64_t v18 = v13 + 4;
          if (v13 + 4 >= v14) {
            goto LABEL_37;
          }
          if (!*(void *)(v32 + 8 * v18))
          {
            int64_t v18 = v13 + 5;
            if (v13 + 5 >= v14) {
              goto LABEL_37;
            }
            if (!*(void *)(v32 + 8 * v18))
            {
              int64_t v24 = v13 + 6;
              while (v24 < v14)
              {
                if (*(void *)(v32 + 8 * v24++))
                {
                  int64_t v18 = v24 - 1;
                  goto LABEL_28;
                }
              }

LABEL_37:
              sub_10000E5A0(v5);
              return;
            }
          }
        }
      }
    }

void *sub_100013D08(uint64_t a1)
{
  uint64_t result = &_swiftEmptyArrayStorage;
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3)
  {
    swift_bridgeObjectRetain(a1);
    uint64_t v4 = (void *)(a1 + 40);
    do
    {
      uint64_t v5 = *v4;
      swift_bridgeObjectRetain(*v4);
      NSString v6 = String._bridgeToObjectiveC()();
      id v7 = (id)WFLinkActionIdentifierFromShortcutsActionIdentifier();
      swift_bridgeObjectRelease(v5);

      if (v7)
      {
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        unint64_t v9 = *(void *)(((unint64_t)&_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8LL) + 0x10);
        unint64_t v8 = *(void *)(((unint64_t)&_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8LL) + 0x18);
        if (v9 >= v8 >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v8 > 1, v9 + 1, 1LL);
        }
        uint64_t v10 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v9, v7);
        specialized Array._endMutation()(v10);
      }

      v4 += 2;
      --v3;
    }

    while (v3);
    swift_bridgeObjectRelease(a1);
    return &_swiftEmptyArrayStorage;
  }

  return result;
}

void *sub_100013E0C(void *a1)
{
  uint64_t v2 = type metadata accessor for NSFastEnumerationIterator(0LL);
  uint64_t v18 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v17 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v5 = a1;
  NSOrderedSet.makeIterator()();

  sub_100040370( &qword_10006A480,  (uint64_t (*)(uint64_t))&type metadata accessor for NSFastEnumerationIterator);
  uint64_t v7 = v6;
  dispatch thunk of IteratorProtocol.next()(&v23, v2, v6);
  if (v24)
  {
    unint64_t v8 = _swiftEmptyArrayStorage;
    do
    {
      sub_100009AC4(&v23, v22);
      sub_100009A44((uint64_t)v22, (uint64_t)v19);
      if ((swift_dynamicCast(&v20, v19, (char *)&type metadata for Any + 8, &type metadata for String, 6LL) & 1) == 0)
      {
        uint64_t v20 = 0LL;
        uint64_t v21 = 0LL;
      }

      sub_100040830(v22);
      uint64_t v9 = v21;
      if (v21)
      {
        uint64_t v10 = v20;
        if ((swift_isUniquelyReferenced_nonNull_native(v8) & 1) == 0)
        {
          sub_100050A48(0LL, v8[2] + 1LL, 1LL, (uint64_t)v8);
          unint64_t v8 = v14;
        }

        unint64_t v12 = v8[2];
        unint64_t v11 = v8[3];
        if (v12 >= v11 >> 1)
        {
          sub_100050A48(v11 > 1, v12 + 1, 1LL, (uint64_t)v8);
          unint64_t v8 = v15;
        }

        v8[2] = v12 + 1;
        int64_t v13 = &v8[2 * v12];
        v13[4] = v10;
        v13[5] = v9;
      }

      dispatch thunk of IteratorProtocol.next()(&v23, v2, v7);
    }

    while (v24);
  }

  else
  {
    unint64_t v8 = _swiftEmptyArrayStorage;
  }

  (*(void (**)(char *, uint64_t))(v18 + 8))(v4, v2);
  return v8;
}

unint64_t sub_100013FF4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result = sub_100041128(a1);
  if ((v6 & 1) != 0) {
    goto LABEL_8;
  }
  if (*(_DWORD *)(a1 + 36) != v5)
  {
    __break(1u);
LABEL_8:
    __break(1u);
    return result;
  }

  if (result == 1LL << *(_BYTE *)(a1 + 32))
  {
    uint64_t v7 = 1LL;
  }

  else
  {
    sub_100040DB8(result, a2);
    uint64_t v7 = 0LL;
  }

  uint64_t v8 = type metadata accessor for TypeIdentifier(0LL);
  return sub_10000848C(a2, v7, 1LL, v8);
}

id sub_100014078(uint64_t a1)
{
  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0) {
      uint64_t v3 = a1;
    }
    else {
      uint64_t v3 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a1);
    uint64_t v4 = _CocoaArrayWrapper.endIndex.getter(v3);
    swift_bridgeObjectRelease(a1);
    if (v4) {
      goto LABEL_3;
    }
    return 0LL;
  }

  if (!*(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10)) {
    return 0LL;
  }
LABEL_3:
  sub_100052278(0LL, (a1 & 0xC000000000000001LL) == 0, a1);
  if ((a1 & 0xC000000000000001LL) != 0) {
    return (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, a1);
  }
  else {
    return *(id *)(a1 + 32);
  }
}

uint64_t sub_10001410C(uint64_t a1)
{
  v2[2] = a1;
  v2[3] = v1;
  uint64_t v3 = type metadata accessor for LaunchServicesSnapshot(0LL);
  v2[4] = v3;
  v2[5] = *(void *)(v3 - 8);
  v2[6] = sub_1000421E4();
  v2[7] = sub_1000421E4();
  v2[8] = sub_1000421E4();
  v2[9] = sub_1000421E4();
  v2[10] = sub_1000421E4();
  uint64_t v4 = sub_1000421E4();
  uint64_t v5 = sub_100047564(v4);
  v2[12] = v5;
  v2[13] = *(void *)(v5 - 8);
  v2[14] = sub_1000421E4();
  v2[15] = sub_1000421E4();
  v2[16] = sub_1000421E4();
  sub_10000844C(&qword_10006A560);
  v2[17] = sub_1000421E4();
  v2[18] = sub_1000421E4();
  v2[19] = sub_1000421E4();
  v2[20] = sub_1000421E4();
  v2[21] = sub_1000421E4();
  v2[22] = sub_1000421E4();
  v2[23] = sub_1000421E4();
  v2[24] = sub_1000421E4();
  v2[25] = sub_1000421E4();
  v2[26] = sub_1000421E4();
  uint64_t v6 = sub_10000F47C();
  v2[27] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v2[28] = v7;
  v2[29] = sub_100013328(v7);
  sub_10000F3A0();
  return sub_10000F2D0();
}

#error "100014758: call analysis failed (funcsize=399)"
uint64_t sub_1000148AC()
{
  sub_100044CF4();
  sub_10000F3A0();
  return sub_10000F2D0();
}

uint64_t sub_1000148E8()
{
  return sub_10000F2E4();
}

#error "100014964: call analysis failed (funcsize=88)"
#error "100014AE8: call analysis failed (funcsize=34)"
uint64_t sub_100014B20(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  v2[2] = a1;
  v2[3] = v1;
  uint64_t v3 = type metadata accessor for LinkSnapshot(0LL);
  v2[4] = v3;
  v2[5] = *(void *)(v3 - 8);
  v2[6] = sub_1000421E4();
  v2[7] = sub_1000421E4();
  v2[8] = sub_1000421E4();
  v2[9] = sub_1000421E4();
  v2[10] = sub_1000421E4();
  uint64_t v4 = sub_1000421E4();
  uint64_t v5 = sub_100047564(v4);
  v2[12] = v5;
  v2[13] = *(void *)(v5 - 8);
  v2[14] = sub_1000421E4();
  v2[15] = sub_1000421E4();
  v2[16] = sub_1000421E4();
  sub_10000844C(&qword_10006A548);
  v2[17] = sub_1000421E4();
  v2[18] = sub_1000421E4();
  v2[19] = sub_1000421E4();
  v2[20] = sub_1000421E4();
  v2[21] = sub_1000421E4();
  v2[22] = sub_1000421E4();
  v2[23] = sub_1000421E4();
  v2[24] = sub_1000421E4();
  v2[25] = sub_1000421E4();
  v2[26] = sub_1000421E4();
  uint64_t v6 = sub_10000F47C();
  v2[27] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v2[28] = v7;
  v2[29] = sub_100013328(v7);
  sub_10000F3A0();
  return sub_10000F2D0();
}

#error "1000151D8: call analysis failed (funcsize=402)"
uint64_t sub_1000152D4()
{
  sub_100044CF4();
  sub_10000F3A0();
  return sub_10000F2D0();
}

#error "1000153A0: call analysis failed (funcsize=49)"
uint64_t sub_1000153D4()
{
  sub_100044D14();
  sub_100042E4C();
  sub_10000F3A0();
  return sub_10000F2E4();
}

#error "100015450: call analysis failed (funcsize=88)"
#error "1000155C4: call analysis failed (funcsize=31)"
#error "100015650: call analysis failed (funcsize=34)"
void sub_100015688(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  Swift::Int v8;
  uint64_t v9;
  Swift::Int v10;
  char v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t *v19;
  uint64_t v20;
  char v22;
  _BYTE v23[72];
  if (*(void *)(a3 + 16))
  {
    sub_100046148();
    sub_100047204(*(void *)(v6 + 40), v7);
    String.hash(into:)(v23, v4, v3);
    uint64_t v8 = sub_100045CEC();
    uint64_t v9 = -1LL << *(_BYTE *)(a3 + 32);
    uint64_t v10 = v8 & ~v9;
    sub_1000456B8();
    if ((v11 & 1) != 0)
    {
      unint64_t v12 = *(void *)(a3 + 48);
      int64_t v13 = (uint64_t *)(v12 + 16 * v10);
      int64_t v14 = v13[1];
      if ((*v13 != v4 || v14 != v3) && (sub_10004320C(*v13, v14, v4, v3) & 1) == 0)
      {
        uint64_t v16 = ~v9;
        uint64_t v17 = (v10 + 1) & v16;
        sub_1000456B8();
        if ((v18 & 1) != 0)
        {
          do
          {
            uint64_t v19 = (uint64_t *)(v12 + 16 * v17);
            uint64_t v20 = v19[1];
            if (*v19 == v4 && v20 == v3) {
              break;
            }
            if ((sub_10004320C(*v19, v20, v4, v3) & 1) != 0) {
              break;
            }
            uint64_t v17 = (v17 + 1) & v16;
            sub_1000456B8();
          }

          while ((v22 & 1) != 0);
        }
      }
    }
  }

uint64_t sub_100015784(uint64_t a1)
{
  uint64_t v31 = type metadata accessor for TypeDefinition(0LL);
  uint64_t v3 = *(void *)(v31 - 8);
  uint64_t v4 = __chkstk_darwin(v31);
  uint64_t v30 = (char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v4);
  uint64_t v29 = (char *)&v25 - v6;
  uint64_t v7 = type metadata accessor for TypeIdentifier(0LL);
  uint64_t v27 = *(void *)(v7 - 8);
  uint64_t v28 = v7;
  __chkstk_darwin(v7);
  uint64_t v32 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = *(void *)(a1 + 16);
  uint64_t v10 = _swiftEmptyArrayStorage;
  if (!v9) {
    return (uint64_t)v10;
  }
  uint64_t v25 = v1;
  uint64_t v33 = _swiftEmptyArrayStorage;
  sub_1000522CC(0LL, v9, 0LL);
  uint64_t result = sub_100041128(a1);
  int64_t v12 = result;
  int v14 = v13;
  char v16 = v15 & 1;
  uint64_t v26 = a1 + 56;
  while ((v12 & 0x8000000000000000LL) == 0 && v12 < 1LL << *(_BYTE *)(a1 + 32))
  {
    if (*(_DWORD *)(a1 + 36) != v14) {
      goto LABEL_16;
    }
    uint64_t v17 = v29;
    uint64_t v18 = v31;
    (*(void (**)(char *, int64_t, uint64_t))(v3 + 16))( v29,  *(void *)(a1 + 48) + *(void *)(v3 + 72) * v12,  v31);
    uint64_t v19 = v30;
    uint64_t v20 = (*(uint64_t (**)(char *, char *, uint64_t))(v3 + 32))(v30, v17, v18);
    TypeDefinition.typeIdentifier.getter(v20);
    (*(void (**)(char *, uint64_t))(v3 + 8))(v19, v18);
    uint64_t v10 = v33;
    if ((swift_isUniquelyReferenced_nonNull_native(v33) & 1) == 0)
    {
      sub_1000522CC(0LL, v10[2] + 1LL, 1LL);
      uint64_t v10 = v33;
    }

    unint64_t v22 = v10[2];
    unint64_t v21 = v10[3];
    if (v22 >= v21 >> 1)
    {
      sub_1000522CC(v21 > 1, v22 + 1, 1LL);
      uint64_t v10 = v33;
    }

    v10[2] = v22 + 1;
    (*(void (**)(unint64_t, char *, uint64_t))(v27 + 32))( (unint64_t)v10 + ((*(unsigned __int8 *)(v27 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v27 + 80))
    + *(void *)(v27 + 72) * v22,
      v32,
      v28);
    uint64_t v33 = v10;
    uint64_t result = sub_100040CD4(v12, v14, v16 & 1, a1);
    int64_t v12 = result;
    int v14 = v23;
    char v16 = v24 & 1;
    if (!--v9)
    {
      sub_1000132AC(result, v23, v24 & 1);
      return (uint64_t)v10;
    }
  }

  __break(1u);
LABEL_15:
  __break(1u);
LABEL_16:
  __break(1u);
  return result;
}

void sub_100015A1C(uint64_t a1)
{
  uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  while (v2)
  {
    sub_10005236C();
    if (v2 < 0)
    {
      __break(1u);
      return;
    }

    uint64_t v3 = 0LL;
    while (v2 != v3)
    {
      if ((a1 & 0xC000000000000001LL) != 0) {
        id v4 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v3, a1);
      }
      else {
        id v4 = *(id *)(a1 + 8 * v3 + 32);
      }
      uint64_t v5 = v4;
      id v6 = [v4 key];
      uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(v6);
      uint64_t v9 = v8;

      unint64_t v10 = _swiftEmptyArrayStorage[2];
      if (v10 >= _swiftEmptyArrayStorage[3] >> 1) {
        sub_10005236C();
      }
      ++v3;
      _swiftEmptyArrayStorage[2] = v10 + 1;
      unint64_t v11 = (char *)&_swiftEmptyArrayStorage[2 * v10];
      *((void *)v11 + 4) = v7;
      *((void *)v11 + 5) = v9;
      if (v2 == v3) {
        return;
      }
    }

    __break(1u);
LABEL_15:
    if (a1 < 0) {
      uint64_t v12 = a1;
    }
    else {
      uint64_t v12 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a1);
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter(v12);
    swift_bridgeObjectRelease(a1);
  }

char *sub_100015B94(uint64_t a1, void *a2)
{
  uint64_t v3 = v2;
  id v37 = a2;
  uint64_t v5 = type metadata accessor for Locale(0LL);
  uint64_t v35 = *(void *)(v5 - 8);
  uint64_t v36 = v5;
  __chkstk_darwin(v5);
  unint64_t v34 = (char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  if (v7)
  {
    while (1)
    {
      Swift::String v40 = _swiftEmptyArrayStorage;
      uint64_t result = sub_100052350(0LL, v7 & ~(v7 >> 63), 0);
      if (v7 < 0) {
        break;
      }
      uint64_t v9 = 0LL;
      uint64_t v30 = v3;
      unint64_t v31 = a1 & 0xC000000000000001LL;
      unint64_t v10 = v40;
      uint64_t v32 = v7;
      uint64_t v33 = a1;
      while (v7 != v9)
      {
        if (v31) {
          id v11 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v9, a1);
        }
        else {
          id v11 = *(id *)(a1 + 8 * v9 + 32);
        }
        uint64_t v12 = v11;
        id v13 = objc_msgSend(v11, "locale", v30);
        int v14 = v34;
        static Locale._unconditionallyBridgeFromObjectiveC(_:)();

        uint64_t v15 = Locale.identifier.getter();
        uint64_t v39 = v16;
        (*(void (**)(char *, uint64_t))(v35 + 8))(v14, v36);
        id v17 = v37;
        id v18 = [v37 localizedLabelWithContext:v12];
        uint64_t v38 = static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
        uint64_t v20 = v19;

        id v21 = [v17 localizedDescriptionWithContext:v12];
        if (v21)
        {
          unint64_t v22 = v21;
          uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)(v21);
          uint64_t v3 = v24;
        }

        else
        {

          uint64_t v23 = 0LL;
          uint64_t v3 = 0LL;
        }

        Swift::String v40 = v10;
        unint64_t v26 = v10[2];
        unint64_t v25 = v10[3];
        if (v26 >= v25 >> 1)
        {
          sub_100052350((char *)(v25 > 1), v26 + 1, 1);
          unint64_t v10 = v40;
        }

        ++v9;
        v10[2] = v26 + 1;
        uint64_t v27 = &v10[6 * v26];
        uint64_t v28 = v39;
        v27[4] = v15;
        v27[5] = v28;
        v27[6] = v38;
        v27[7] = v20;
        v27[8] = v23;
        v27[9] = v3;
        uint64_t v7 = v32;
        a1 = v33;
        if (v32 == v9)
        {

          return (char *)v10;
        }
      }

      __break(1u);
LABEL_17:
      if (a1 < 0) {
        uint64_t v29 = a1;
      }
      else {
        uint64_t v29 = a1 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain(a1);
      uint64_t v7 = _CocoaArrayWrapper.endIndex.getter(v29);
      swift_bridgeObjectRelease(a1);
      if (!v7) {
        goto LABEL_21;
      }
    }

    __break(1u);
  }

  else
  {
LABEL_21:

    return (char *)_swiftEmptyArrayStorage;
  }

  return result;
}

void sub_100015E1C()
{
}

void sub_100015E38(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *v1;
  uint64_t v4 = *(void *)(*v1 + 16LL);
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }

  if (!swift_isUniquelyReferenced_nonNull_native(*v1) || (uint64_t v6 = *(void *)(v3 + 24) >> 1, v6 < v4 + v2))
  {
    sub_100050BF8();
    uint64_t v3 = v7;
    uint64_t v6 = *(void *)(v7 + 24) >> 1;
  }

  if (!*(void *)(a1 + 16))
  {
    if (!v2) {
      goto LABEL_11;
    }
    goto LABEL_13;
  }

  uint64_t v8 = *(void *)(v3 + 16);
  if (v6 - v8 < v2)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }

  sub_10005186C((char *)(a1 + 32), v2, (char *)(v3 + 8 * v8 + 32));
  if (!v2)
  {
LABEL_11:
    swift_bridgeObjectRelease(a1);
    *uint64_t v1 = v3;
    return;
  }

  uint64_t v9 = *(void *)(v3 + 16);
  BOOL v10 = __OFADD__(v9, v2);
  uint64_t v11 = v9 + v2;
  if (!v10)
  {
    *(void *)(v3 + 16) = v11;
    goto LABEL_11;
  }

void sub_100015F18()
{
  uint64_t v5 = *(void *)(v1 + 16);
  uint64_t v6 = *v0;
  uint64_t v7 = *(void *)(*v0 + 16);
  if (__OFADD__(v7, v5))
  {
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }

  uint64_t v8 = v4;
  uint64_t v9 = v3;
  BOOL v10 = v2;
  uint64_t v11 = v1;
  if (!*(void *)(v11 + 16))
  {
    if (!v5) {
      goto LABEL_11;
    }
    goto LABEL_13;
  }

  uint64_t v12 = *(void *)(v6 + 16);
  uint64_t v13 = (*(void *)(v6 + 24) >> 1) - v12;
  uint64_t v14 = v8(0LL);
  if (v13 < v5)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }

  uint64_t v15 = *(void *)(v14 - 8);
  unint64_t v16 = (*(unsigned __int8 *)(v15 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
  v9(v11 + v16, v5, v6 + v16 + *(void *)(v15 + 72) * v12);
  if (!v5)
  {
LABEL_11:
    sub_100042E4C();
    uint64_t *v0 = v6;
    sub_1000436A4();
    return;
  }

  uint64_t v17 = *(void *)(v6 + 16);
  BOOL v18 = __OFADD__(v17, v5);
  uint64_t v19 = v17 + v5;
  if (!v18)
  {
    *(void *)(v6 + 16) = v19;
    goto LABEL_11;
  }

void sub_100016008()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + 24);
  sub_100044400();
  os_unfair_lock_lock(v1 + 6);
  uint64_t v2 = (uint64_t *)sub_1000477EC();
  sub_1000161F8(v2, v3, v4);
  os_unfair_lock_unlock(v1 + 6);
  sub_100013360();
  sub_100044180();
  sub_100046378();
}

uint64_t sub_100016064(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(os_unfair_lock_s **)(v3 + 24);
  sub_100044400();
  os_unfair_lock_lock(v6 + 6);
  sub_100046864();
  sub_10001625C(v7, v8, v9, a2);
  os_unfair_lock_unlock(v6 + 6);
  sub_100013360();
  sub_100040FB8(a3, type metadata accessor for ToolKitIndexer.TypeRegistryKey);
  return swift_bridgeObjectRelease(a2);
}

uint64_t sub_1000160EC@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5 = *(void *)result;
  if (*(void *)(*(void *)result + 16LL))
  {
    swift_bridgeObjectRetain(a3);
    uint64_t v8 = sub_100051B7C(a2, a3);
    if ((v9 & 1) != 0) {
      uint64_t v10 = *(void *)(*(void *)(v5 + 56) + 8 * v8);
    }
    else {
      uint64_t v10 = 0LL;
    }
    char v11 = v9 ^ 1;
    uint64_t result = swift_bridgeObjectRelease(a3);
  }

  else
  {
    uint64_t v10 = 0LL;
    char v11 = 1;
  }

  *(void *)a4 = v10;
  *(_BYTE *)(a4 + 8) = v11 & 1;
  return result;
}

uint64_t sub_100016180(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  if ((a5 & 1) != 0) {
    sub_100038B90(a2, a3);
  }
  else {
    sub_100038DD8(a4, a2, a3);
  }
  return swift_bridgeObjectRelease(a3);
}

uint64_t sub_1000161F8@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v4 = *a1;
  if (*(void *)(*a1 + 16) && (unint64_t v5 = sub_100051BE8(a2), (v6 & 1) != 0))
  {
    uint64_t v7 = (uint64_t *)(*(void *)(v4 + 56) + 16 * v5);
    uint64_t v8 = *v7;
    uint64_t result = swift_bridgeObjectRetain(v7[1]);
  }

  else
  {
    uint64_t v8 = 0LL;
    uint64_t result = 0LL;
  }

  *a3 = v8;
  a3[1] = result;
  return result;
}

void sub_10001625C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = type metadata accessor for ToolKitIndexer.TypeRegistryKey(0LL);
  __chkstk_darwin(v7);
  char v9 = (char *)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100041230(a2, (uint64_t)v9, v10);
  if (a4)
  {
    swift_bridgeObjectRetain(a4);
    sub_100038E54(a3, a4, (uint64_t)v9);
    sub_100040FB8((uint64_t)v9, type metadata accessor for ToolKitIndexer.TypeRegistryKey);
  }

  else
  {
    sub_100038C9C((uint64_t)v9);
    uint64_t v12 = v11;
    sub_100040FB8((uint64_t)v9, type metadata accessor for ToolKitIndexer.TypeRegistryKey);
    swift_bridgeObjectRelease(v12);
  }

uint64_t sub_10001633C()
{
  return v0;
}

uint64_t sub_100016360()
{
  uint64_t v0 = sub_100046DCC();
  return swift_deallocClassInstance(v0, v1, v2);
}

void sub_100016378()
{
  uint64_t v1 = sub_10000844C(&qword_10006A520);
  uint64_t v2 = sub_100042644(v1, 28LL);
  *(_DWORD *)(v2 + 24) = 0;
  *(void *)(v2 + 16) = &_swiftEmptyDictionarySingleton;
  *(void *)(v0 + 16) = v2;
  uint64_t v3 = sub_10000844C(&qword_10006A528);
  uint64_t v4 = sub_100042644(v3, 28LL);
  *(_DWORD *)(v4 + 24) = 0;
  *(void *)(v4 + 16) = &_swiftEmptyDictionarySingleton;
  *(void *)(v0 + 24) = v4;
  sub_100008D60();
}

void sub_1000163D8()
{
}

uint64_t sub_100016454(uint64_t a1, uint64_t a2)
{
  if ((static TypeIdentifier.== infix(_:_:)() & 1) == 0) {
    return 0LL;
  }
  uint64_t v4 = *(int *)(type metadata accessor for ToolKitIndexer.TypeRegistryKey(0LL) + 20);
  return static Locale.== infix(_:_:)(a1 + v4, a2 + v4);
}

Swift::Int sub_1000164A0(uint64_t a1)
{
  return sub_100045CEC();
}

void sub_100016530(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = sub_100044E9C();
  sub_100040370(&qword_10006A2D8, (uint64_t (*)(uint64_t))&type metadata accessor for TypeIdentifier);
  dispatch thunk of Hashable.hash(into:)(v6, v2, v3);
  sub_100045374();
  sub_100040370((unint64_t *)&unk_10006A2E0, (uint64_t (*)(uint64_t))&type metadata accessor for Locale);
  sub_100045318(v4, v5);
  sub_100045CEC();
  sub_100044FE4();
}

id ToolKitIndexer.__allocating_init(clientIdentifier:)(uint64_t a1, uint64_t a2)
{
  return ToolKitIndexer.init(clientIdentifier:)((uint64_t)objc_allocWithZone(v2), a2);
}

id ToolKitIndexer.init(clientIdentifier:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2;
  uint64_t v5 = ToolDatabase.__allocating_init()();
  if (v3)
  {

    uint64_t v6 = type metadata accessor for ToolKitIndexer();
    return (id)swift_deallocPartialClassInstance(v4, v6, 16LL, 7LL);
  }

  else
  {
    *(void *)&v4[OBJC_IVAR___WFToolKitIndexer_toolDatabase] = v5;

    v8.receiver = v4;
    v8.super_class = (Class)type metadata accessor for ToolKitIndexer();
    return objc_msgSendSuper2(&v8, "init");
  }

uint64_t type metadata accessor for ToolKitIndexer()
{
  return objc_opt_self(&OBJC_CLASS___WFToolKitIndexer);
}

uint64_t ToolKitIndexer.reindex(request:)(uint64_t a1)
{
  v2[29] = a1;
  v2[30] = v1;
  uint64_t v3 = sub_100045FDC();
  v2[31] = v3;
  v2[32] = *(void *)(v3 - 8);
  v2[33] = sub_1000421E4();
  v2[34] = sub_1000421E4();
  uint64_t v4 = type metadata accessor for ToolDatabase.DidChangeNotificationSource(0LL);
  v2[35] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v2[36] = v5;
  v2[37] = sub_100013328(v5);
  uint64_t v6 = sub_10000F47C();
  v2[38] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v2[39] = v7;
  v2[40] = sub_100013328(v7);
  uint64_t v8 = sub_10000844C(&qword_10006A130);
  v2[41] = sub_100013328(*(void *)(v8 - 8));
  v2[42] = sub_10000844C(&qword_10006A138);
  v2[43] = sub_1000421E4();
  v2[44] = sub_1000421E4();
  uint64_t v9 = type metadata accessor for ToolDatabase.Environment(0LL);
  v2[45] = v9;
  v2[46] = *(void *)(v9 - 8);
  v2[47] = sub_1000421E4();
  v2[48] = sub_1000421E4();
  uint64_t v10 = type metadata accessor for ToolDatabase.DatabaseFile(0LL);
  v2[49] = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  v2[50] = v11;
  v2[51] = sub_100013328(v11);
  uint64_t v12 = sub_100047790();
  v2[52] = v12;
  uint64_t v13 = *(void *)(v12 - 8);
  v2[53] = v13;
  v2[54] = *(void *)(v13 + 64);
  v2[55] = sub_1000421E4();
  v2[56] = sub_1000421E4();
  sub_10000F3A0();
  return sub_10000F2D0();
}

uint64_t sub_10001688C()
{
  uint64_t v1 = *(void *)(v0 + 400);
  uint64_t v2 = *(void *)(v0 + 408);
  uint64_t v3 = *(void *)(v0 + 384);
  uint64_t v81 = *(void *)(v0 + 392);
  uint64_t v5 = *(void *)(v0 + 368);
  uint64_t v4 = *(void *)(v0 + 376);
  uint64_t v6 = *(void *)(v0 + 360);
  uint64_t v78 = os_transaction_create("com.apple.BackgroundShortcutRunner.ToolKitIndexer");
  *(void *)(v0 + 456) = v78;
  ToolKitIndexingRequest.id.getter();
  *(CFTimeInterval *)(v0 + 464) = CACurrentMediaTime();
  uint64_t v7 = ToolDatabase.file.getter();
  ToolDatabase.DatabaseFile.environment.getter(v7);
  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v2, v81);
  (*(void (**)(uint64_t, void, uint64_t))(v5 + 104))( v4,  enum case for ToolDatabase.Environment.simulation(_:),  v6);
  sub_100040370(&qword_10006A140, (uint64_t (*)(uint64_t))&type metadata accessor for ToolDatabase.Environment);
  char v10 = sub_100047024(v3, v4, v9, v8);
  uint64_t v11 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
  v11(v4, v6);
  uint64_t v12 = sub_100044174();
  ((void (*)(uint64_t))v11)(v12);
  if ((v10 & 1) != 0)
  {
    uint64_t v13 = *(void **)(v0 + 264);
    uint64_t v14 = sub_10000F568();
    Logger.logObject.getter(v14);
    os_log_type_t v15 = sub_100043BF0();
    if (sub_100043ED8(v15))
    {
      unint64_t v16 = (_WORD *)sub_10000D524(2LL);
      *unint64_t v16 = 0;
      sub_100046B04();
      sub_100046FE0(v17, v18, v19, v20);
      sub_10000F2F0((uint64_t)v16);
    }

    uint64_t v22 = *(void *)(v0 + 256);
    uint64_t v21 = *(void *)(v0 + 264);

    sub_100043380(v21, *(uint64_t (**)(uint64_t, uint64_t))(v22 + 8));
    unint64_t v23 = sub_1000085B4();
    uint64_t v82 = swift_allocError(&type metadata for ToolKitIndexer.Error, v23, 0LL, 0LL);
    *uint64_t v24 = 0LL;
    v24[1] = 0LL;
    swift_willThrow(v82, v24, v25, v26, v27, v28, v29);
    swift_unknownObjectRelease(v78);
    sub_100045B04();
    uint64_t v73 = *(void *)(v0 + 296);
    uint64_t v76 = *(void *)(v0 + 272);
    uint64_t v79 = *(void *)(v0 + 264);
    sub_100045080(v30);
    sub_10000F338();
    sub_10000F4A0();
    sub_10000F484();
    sub_10000F3FC();
    sub_10000F41C();
    sub_10000F3F4();
    sub_10000F4EC();
    sub_10000F4A8();
    uint64_t v31 = sub_10000F404();
    uint64_t v39 = sub_100045D10(v31, v32, v33, v34, v35, v36, v37, v38, v73);
    uint64_t v47 = sub_10000F6A4(v39, v40, v41, v42, v43, v44, v45, v46, v74, v76);
    sub_100043CF0(v47, v48, v49, v50, v51, v52, v53, v54, v75, v77, v79);
    return sub_100044468(*(uint64_t (**)(void))(v0 + 8));
  }

  else
  {
    uint64_t v56 = *(void *)(v0 + 440);
    uint64_t v57 = *(void *)(v0 + 448);
    uint64_t v58 = *(void *)(v0 + 424);
    uint64_t v59 = *(void *)(v0 + 328);
    unint64_t v60 = *(void **)(v0 + 240);
    uint64_t v80 = *(void *)(v0 + 432);
    uint64_t v83 = *(void **)(v0 + 232);
    uint64_t v61 = (void *)objc_opt_self(&OBJC_CLASS___NSDistributedNotificationCenter);
    *(void *)(v0 + 472) = v61;
    id v62 = [v61 defaultCenter];
    uint64_t v63 = (void *)static NSNotificationName.toolKitIndexingBegan.getter();
    uint64_t v64 = Dictionary.init(dictionaryLiteral:)( _swiftEmptyArrayStorage,  &type metadata for AnyHashable,  (char *)&type metadata for Any + 8,  &protocol witness table for AnyHashable);
    sub_10003FAE8((uint64_t)v63, 0LL, v64, v62);

    uint64_t v65 = enum case for ToolDatabase.Transaction.Mode.immediate(_:);
    uint64_t v66 = type metadata accessor for ToolDatabase.Transaction.Mode(0LL);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v66 - 8) + 104LL))(v59, v65, v66);
    sub_1000465C8(v59);
    sub_10004314C(v56, v57, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v58 + 16));
    uint64_t v67 = *(unsigned __int8 *)(v58 + 80);
    uint64_t v68 = (v67 + 32) & ~v67;
    uint64_t v69 = swift_allocObject(&unk_1000662D8, v68 + v80, v67 | 7);
    *(void *)(v0 + 480) = v69;
    *(void *)(v69 + 16) = v60;
    *(void *)(v69 + 24) = v83;
    sub_10004314C(v69 + v68, v56, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v58 + 32));
    id v70 = v60;
    id v71 = v83;
    uint64_t v72 = (void *)sub_1000421E4();
    *(void *)(v0 + 488) = v72;
    *uint64_t v72 = v0;
    v72[1] = sub_100016C0C;
    return ToolDatabase.inTransaction<A>(mode:work:)( *(void *)(v0 + 352),  *(void *)(v0 + 328),  &unk_10006A150,  v69,  *(void *)(v0 + 336));
  }

uint64_t sub_100016C0C()
{
  *(void *)(v1 + 496) = v0;
  uint64_t v3 = swift_task_dealloc(v2);
  sub_100044EA4(v3, &qword_10006A130);
  sub_100043C48();
  sub_10000F3A0();
  return swift_task_switch(v4, v5, v6);
}

uint64_t sub_100016C7C()
{
  uint64_t v1 = *(void *)(v0 + 344);
  uint64_t v2 = *(void *)(v0 + 304);
  sub_1000412CC(*(void *)(v0 + 352), v1, &qword_10006A138);
  sub_100043DBC(v1, 1LL, v2);
  if (v3)
  {
    sub_100041358(*(void *)(v0 + 344), &qword_10006A138);
  }

  else
  {
    uint64_t v4 = *(void *)(v0 + 496);
    uint64_t v5 = (*(uint64_t (**)(void, void, void))(*(void *)(v0 + 312) + 32LL))( *(void *)(v0 + 320),  *(void *)(v0 + 344),  *(void *)(v0 + 304));
    uint64_t v6 = ToolKitIndexingReason.Changeset.encoded()(v5);
    if (v4)
    {
      uint64_t v9 = *(void *)(v0 + 312);
      uint64_t v8 = *(void *)(v0 + 320);
      swift_unknownObjectRelease(*(void *)(v0 + 456));
      uint64_t v10 = sub_10000F508(v8, *(uint64_t (**)(uint64_t, uint64_t))(v9 + 8));
      sub_10004610C(v10, &qword_10006A138);
      uint64_t v202 = *(void *)(v0 + 320);
      uint64_t v211 = *(void *)(v0 + 296);
      uint64_t v218 = *(void *)(v0 + 272);
      uint64_t v223 = *(void *)(v0 + 264);
      sub_100043184(*(uint64_t (**)(uint64_t))(*(void *)(v0 + 424) + 8LL));
      sub_10000F404();
      sub_10000F338();
      sub_10000F484();
      sub_10000F3FC();
      sub_10000F41C();
      sub_10000F3F4();
      sub_10000F4EC();
      uint64_t v11 = sub_10000F4A8();
      uint64_t v19 = sub_100043D94(v11, v12, v13, v14, v15, v16, v17, v18, v146, v159, v171, v182, v192, v202);
      uint64_t v27 = sub_100043CE8(v19, v20, v21, v22, v23, v24, v25, v26, v147, v160, v172, v183, v193, v203, v211);
      uint64_t v35 = sub_100043BBC(v27, v28, v29, v30, v31, v32, v33, v34, v148, v161, v173, v184, v194, v204, v212, v218);
      sub_100043BB4(v35, v36, v37, v38, v39, v40, v41, v42, v149, v162, v174, v185, v195, v205, v213, v219, v223);
      uint64_t v43 = (uint64_t (*)(void))sub_100044674();
      return v43();
    }

    uint64_t v44 = v6;
    uint64_t v45 = v7;
    uint64_t v214 = *(void *)(v0 + 312);
    uint64_t v46 = *(void *)(v0 + 296);
    uint64_t v220 = *(void *)(v0 + 304);
    uint64_t v224 = *(void *)(v0 + 320);
    uint64_t v48 = *(void *)(v0 + 280);
    uint64_t v47 = *(void *)(v0 + 288);
    id v206 = [*(id *)(v0 + 472) defaultCenter];
    uint64_t v196 = (void *)static NSNotificationName.toolkitDatabaseChanged.getter();
    uint64_t v49 = sub_10000844C(&qword_10006A158);
    uint64_t inited = swift_initStackObject(v49, v0 + 16);
    *(_OWORD *)(inited + 16) = xmmword_100059830;
    *(void *)(v0 + 192) = 0x657365676E616863LL;
    *(void *)(v0 + 200) = 0xE900000000000074LL;
    sub_10004748C(v0 + 192);
    *(void *)(inited + 96) = sub_10000844C((uint64_t *)&unk_10006A160);
    *(void *)(inited + 72) = v44;
    *(void *)(inited + 80) = v45;
    *(void *)(v0 + 208) = 0x656372756F73LL;
    *(void *)(v0 + 216) = 0xE600000000000000LL;
    uint64_t v51 = sub_100044B04();
    sub_10003FC90(v51, v52);
    sub_10004748C(v0 + 208);
    uint64_t v53 = (*(uint64_t (**)(uint64_t, void, uint64_t))(v47 + 104))( v46,  enum case for ToolDatabase.DidChangeNotificationSource.local(_:),  v48);
    uint64_t v54 = ToolDatabase.DidChangeNotificationSource.rawValue.getter(v53);
    sub_100043FD4(v46, *(uint64_t (**)(uint64_t, uint64_t))(v47 + 8));
    *(void *)(inited + 168) = &type metadata for Int;
    *(void *)(inited + 144) = v54;
    uint64_t v55 = Dictionary.init(dictionaryLiteral:)( inited,  &type metadata for AnyHashable,  (char *)&type metadata for Any + 8,  &protocol witness table for AnyHashable);
    sub_10003FAE8((uint64_t)v196, 0LL, v55, v206);

    uint64_t v56 = sub_100044B04();
    sub_10003FCE8(v56, v57);
    (*(void (**)(uint64_t, uint64_t))(v214 + 8))(v224, v220);
  }

  uint64_t v58 = *(void **)(v0 + 272);
  uint64_t v59 = sub_10000F568();
  Logger.logObject.getter(v59);
  os_log_type_t v60 = sub_100043BF0();
  if (sub_100043ED8(v60))
  {
    double v61 = *(double *)(v0 + 464);
    id v62 = (uint8_t *)sub_10000D524(12LL);
    *(_DWORD *)id v62 = 134217984;
    *(CFTimeInterval *)(v0 + 224) = CACurrentMediaTime() - v61;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 224, v0 + 232);
    sub_100046B04();
    sub_100043D54(v63, v64, v65, v66, v62);
    sub_10000F2F0((uint64_t)v62);
  }

  uint64_t v68 = *(void *)(v0 + 448);
  uint64_t v67 = *(void *)(v0 + 456);
  uint64_t v69 = *(void *)(v0 + 424);
  uint64_t v150 = *(void *)(v0 + 440);
  uint64_t v163 = *(void *)(v0 + 408);
  uint64_t v175 = *(void *)(v0 + 384);
  uint64_t v186 = *(void *)(v0 + 376);
  uint64_t v70 = *(void *)(v0 + 352);
  uint64_t v197 = *(void *)(v0 + 344);
  uint64_t v207 = *(void *)(v0 + 328);
  uint64_t v215 = *(void *)(v0 + 320);
  uint64_t v221 = *(void *)(v0 + 296);
  uint64_t v71 = *(void *)(v0 + 272);
  uint64_t v225 = *(void *)(v0 + 264);
  uint64_t v72 = *(void *)(v0 + 256);

  sub_100043910(v71, *(uint64_t (**)(uint64_t, uint64_t))(v72 + 8));
  sub_100041358(v70, &qword_10006A138);
  sub_10000F508(v68, *(uint64_t (**)(uint64_t, uint64_t))(v69 + 8));
  swift_unknownObjectRelease(v67);
  uint64_t v73 = sub_10000F4A8();
  uint64_t v81 = sub_100045D10(v73, v74, v75, v76, v77, v78, v79, v80, v150);
  uint64_t v89 = sub_10000F6A4(v81, v82, v83, v84, v85, v86, v87, v88, v151, v163);
  uint64_t v97 = sub_100043CF0(v89, v90, v91, v92, v93, v94, v95, v96, v152, v164, v175);
  sub_100043D9C(v97, v98, v99, v100, v101, v102, v103, v104, v153, v165, v176, v186);
  uint64_t v105 = sub_10000F3F4();
  uint64_t v113 = sub_100043EF8(v105, v106, v107, v108, v109, v110, v111, v112, v154, v166, v177, v187, v197);
  uint64_t v121 = sub_100043D94(v113, v114, v115, v116, v117, v118, v119, v120, v155, v167, v178, v188, v198, v207);
  uint64_t v129 = sub_100043CE8(v121, v122, v123, v124, v125, v126, v127, v128, v156, v168, v179, v189, v199, v208, v215);
  sub_100043BBC(v129, v130, v131, v132, v133, v134, v135, v136, v157, v169, v180, v190, v200, v209, v216, v221);
  uint64_t v137 = sub_10000F4A0();
  sub_100043BB4(v137, v138, v139, v140, v141, v142, v143, v144, v158, v170, v181, v191, v201, v210, v217, v222, v225);
  uint64_t v43 = (uint64_t (*)(void))sub_10000F588();
  return v43();
}

uint64_t sub_100017090()
{
  uint64_t v30 = *(void *)(v0 + 296);
  uint64_t v33 = *(void *)(v0 + 272);
  uint64_t v35 = *(void *)(v0 + 264);
  sub_100045080(v1);
  sub_10000F338();
  sub_10000F4A0();
  sub_10000F484();
  sub_10000F3FC();
  sub_10000F41C();
  sub_10000F3F4();
  sub_10000F4EC();
  sub_10000F4A8();
  uint64_t v2 = sub_10000F404();
  uint64_t v10 = sub_10000F6A4(v2, v3, v4, v5, v6, v7, v8, v9, v27, v30);
  uint64_t v18 = sub_100043CF0(v10, v11, v12, v13, v14, v15, v16, v17, v28, v31, v33);
  sub_100043D9C(v18, v19, v20, v21, v22, v23, v24, v25, v29, v32, v34, v35);
  return sub_100044468(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_10001711C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[12] = a4;
  v5[13] = a5;
  v5[10] = a2;
  v5[11] = a3;
  v5[9] = a1;
  uint64_t v6 = _s23IndexingPreflightResultVMa(0LL);
  v5[14] = v6;
  v5[15] = swift_task_alloc((*(void *)(*(void *)(v6 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for Logger(0LL);
  v5[16] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v5[17] = v8;
  v5[18] = swift_task_alloc((*(void *)(v8 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for UUID(0LL);
  v5[19] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v5[20] = v10;
  v5[21] = swift_task_alloc((*(void *)(v10 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for ToolKitIndexingReason.Changeset(0LL);
  v5[22] = v11;
  uint64_t v12 = *(void *)(v11 - 8);
  v5[23] = v12;
  unint64_t v13 = (*(void *)(v12 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v5[24] = swift_task_alloc(v13);
  v5[25] = swift_task_alloc(v13);
  v5[26] = swift_task_alloc(v13);
  return swift_task_switch(sub_100017214, 0LL, 0LL);
}

uint64_t sub_100017214()
{
  uint64_t v1 = (void *)v0[12];
  uint64_t v2 = v0[10];
  uint64_t v3 = type metadata accessor for ToolKitIndexingPolicy(0LL);
  sub_10000F4D8(v3);
  v0[27] = ToolKitIndexingPolicy.init(from:)(v1);
  v0[28] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_100017300;
  return ((uint64_t (*)(void, uint64_t))v6)(v0[26], v2);
}

uint64_t sub_100017300()
{
  *(void *)(v0 + 232) = v1;
  swift_task_dealloc(v3);
  if (!v1) {
    swift_release(*(void *)(v0 + 216));
  }
  sub_10000F3A0();
  return sub_10000F2E4();
}

uint64_t sub_100017354( int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, os_log_t log, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30)
{
  uint64_t v80 = v31;
  uint64_t v81 = v32;
  uint64_t v79 = v30;
  uint64_t v33 = *(void *)(v30 + 208);
  uint64_t v34 = *(void *)(v30 + 184);
  uint64_t v74 = *(void *)(v30 + 176);
  uint64_t v76 = *(void *)(v30 + 200);
  uint64_t v35 = *(void *)(v30 + 160);
  uint64_t v36 = *(void *)(v30 + 168);
  uint64_t v37 = *(void **)(v30 + 96);
  sub_100044AC0();
  sub_100044DD4();
  ((void (*)(void))ToolKitIndexingRequest.id.getter)();
  ((void (*)(uint64_t, _UNKNOWN **, uint64_t))IndexingLog.log(resolvedChangeset:decisionMetadata:for:))( v33,  &off_100065E18,  v36);
  sub_100043DD0();
  sub_100043D10(v36, *(uint64_t (**)(uint64_t, uint64_t))(v35 + 8));
  static WFLog.subscript.getter(WFLogCategoryToolKitIndexing);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v34 + 16))(v76, v33, v74);
  id v38 = v37;
  uint64_t v39 = (os_log_s *)sub_1000462D8();
  os_log_type_t v40 = static os_log_type_t.default.getter();
  if (sub_100046EFC(v39))
  {
    uint64_t v68 = *(void *)(v30 + 200);
    uint64_t v69 = *(void *)(v30 + 184);
    uint64_t v70 = *(void *)(v30 + 176);
    uint64_t v73 = *(void *)(v30 + 136);
    uint64_t v75 = *(void *)(v30 + 128);
    uint64_t v77 = *(void *)(v30 + 144);
    uint64_t v41 = *(void **)(v30 + 96);
    uint64_t v42 = sub_10000D524(28LL);
    uint64_t v71 = v39;
    uint64_t v43 = (void *)sub_10000D524(8LL);
    uint64_t v72 = sub_10000D524(32LL);
    *(void *)(v30 + 56) = v41;
    uint64_t v78 = v72;
    *(_DWORD *)uint64_t v42 = 138412802;
    id v44 = v41;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v30 + 56, v30 + 64);
    *uint64_t v43 = v41;

    *(_WORD *)(v42 + 12) = 2080;
    uint64_t v45 = ((uint64_t (*)(void))ToolKitIndexingReason.Changeset.debugDescription.getter)();
    *(void *)(v30 + 64) = sub_100038098(v45, v46, &v78);
    sub_10004775C(v30 + 64, v30 + 72);
    sub_100008D58();
    uint64_t v47 = *(uint64_t (**)(uint64_t, uint64_t))(v69 + 8);
    uint64_t v48 = v47(v68, v70);
    *(_WORD *)(v42 + 22) = 1024;
    *(_DWORD *)(v30 + 328) = ((uint64_t (*)(uint64_t))BSPthreadGetCurrentPriority)(v48);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v30 + 328, v30 + 332);
    _os_log_impl( (void *)&_mh_execute_header,  v71,  v40,  "Indexing for request: %@, changeset: %s, priority: %d",  (uint8_t *)v42,  0x1Cu);
    sub_10000844C(&qword_10006A320);
    sub_100043668((uint64_t)v43);
    sub_10000F2F0((uint64_t)v43);
    sub_100043668(v72);
    sub_10000F2F0(v72);
    sub_10000F2F0(v42);

    (*(void (**)(uint64_t, uint64_t))(v73 + 8))(v77, v75);
  }

  else
  {
    uint64_t v49 = *(void *)(v30 + 200);
    uint64_t v50 = *(void *)(v30 + 184);
    uint64_t v51 = *(void **)(v30 + 96);

    uint64_t v47 = *(uint64_t (**)(uint64_t, uint64_t))(v50 + 8);
    sub_1000460D0(v49);

    uint64_t v52 = sub_1000443F4();
    v54(v52, v53);
  }

  *(void *)(v30 + 240) = v47;
  uint64_t v55 = *(void *)(v30 + 176);
  sub_10004314C( *(void *)(v30 + 192),  enum case for ToolKitIndexingReason.Changeset.none(_:),  *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v30 + 184) + 104LL));
  sub_100040370( &qword_10006A308,  (uint64_t (*)(uint64_t))&type metadata accessor for ToolKitIndexingReason.Changeset);
  uint64_t v56 = sub_100046DA0();
  char v59 = dispatch thunk of static Equatable.== infix(_:_:)(v56, v57, v55, v58);
  uint64_t v60 = sub_100044180();
  ((void (*)(uint64_t))v47)(v60);
  if ((v59 & 1) != 0)
  {
    v47(*(void *)(v30 + 208), *(void *)(v30 + 176));
    uint64_t v61 = sub_100045DB4();
    sub_100043410(v61, v62, v63, v64);
    sub_10000F404();
    sub_10000F338();
    sub_10000F4A0();
    sub_10000F484();
    sub_10000F3FC();
    sub_10000F41C();
    os_log_type_t v65 = (uint64_t (*)(void))sub_10000F588();
    return sub_1000430B4(v65);
  }

  else
  {
    uint64_t v67 = (void *)swift_task_alloc(dword_100069D64);
    *(void *)(v30 + 248) = v67;
    void *v67 = v30;
    v67[1] = sub_1000176DC;
    return sub_100009E1C(*(void *)(v30 + 120), *(void *)(v30 + 208));
  }

uint64_t sub_1000176DC()
{
  *(void *)(v1 + 256) = v0;
  swift_task_dealloc(v2);
  sub_10000F3A0();
  return sub_10000F2D0();
}

uint64_t sub_100017728()
{
  uint64_t v1 = v0[32];
  sub_100017E28();
  uint64_t v3 = v2;
  v0[33] = v2;
  uint64_t v4 = type metadata accessor for ToolKitIndexer.SharedIndexingState();
  uint64_t v5 = sub_100042644(v4, 32LL);
  v0[34] = v5;
  sub_100016378();
  sub_10001EC80();
  v0[35] = v1;
  if (v1)
  {
    uint64_t v6 = (void (*)(uint64_t))v0[30];
    sub_100043868();
    uint64_t v7 = sub_100042E4C();
    sub_100046C34(v7, _s23IndexingPreflightResultVMa);
    uint64_t v8 = sub_100045ACC();
    v6(v8);
    sub_100043F8C(v0[26]);
    sub_10000F404();
    sub_10000F338();
    sub_10000F484();
    sub_10000F3FC();
    sub_10000F41C();
    uint64_t v9 = (uint64_t (*)(void))sub_100044674();
    return sub_1000458EC(v9);
  }

  else
  {
    uint64_t v11 = type metadata accessor for ContainerIndexer();
    uint64_t v12 = sub_100042644(v11, 32LL);
    v0[36] = v12;
    *(void *)(v12 + 16) = v5;
    *(void *)(v12 + 24) = v3;
    uint64_t v13 = type metadata accessor for TypeIndexer();
    v0[37] = swift_initStackObject(v13, v0 + 2);
    uint64_t v14 = sub_100045394();
    uint64_t v16 = sub_10000F6C4(v14, v15, v12);
    v0[38] = (uint64_t)v16;
    uint64_t v17 = dword_10006A314;
    swift_retain_n(v5, 2LL);
    sub_100009BEC();
    sub_100043D5C();
    sub_10004486C();
    uint64_t v18 = (uint64_t **)swift_task_alloc(v17);
    v0[39] = (uint64_t)v18;
    *uint64_t v18 = v0;
    v18[1] = (uint64_t *)sub_1000178B0;
    return sub_100018840((uint64_t)v18, v0[26], v0[15], (uint64_t)v16, v0[13], v3);
  }

uint64_t sub_1000178B0()
{
  uint64_t v2 = v0[39];
  uint64_t v3 = *v1;
  *uint64_t v4 = *v1;
  swift_task_dealloc(v2);
  uint64_t v5 = (void *)swift_task_alloc(dword_10006A31C);
  v0[40] = (uint64_t)v5;
  *uint64_t v5 = v3;
  v5[1] = sub_100017920;
  return sub_10001C7E0(v0[10], v0[15], v0[13], v0[33], v0[36]);
}

uint64_t sub_100017920()
{
  return sub_10000F2D0();
}

uint64_t sub_100017968()
{
  uint64_t v1 = v0[35];
  sub_100033968();
  if (v1)
  {
    uint64_t v2 = (void (*)(uint64_t))v0[30];
    swift_release(v0[38]);
    sub_100013360();
    uint64_t v3 = sub_100043C48();
    sub_100046C34(v3, _s23IndexingPreflightResultVMa);
    uint64_t v4 = sub_1000443F4();
    v2(v4);
    sub_100043F8C(v0[26]);
    sub_10000F404();
    sub_10000F338();
    sub_10000F484();
    sub_10000F3FC();
    sub_10000F41C();
    uint64_t v13 = (uint64_t (*)(void))sub_100044674();
  }

  else
  {
    sub_1000339A0();
    uint64_t v6 = ToolDatabase.Transaction.perform<A>(work:)(sub_1000340C4, 0LL, (char *)&type metadata for () + 8);
    uint64_t v7 = v0[22];
    uint64_t v8 = v0[26];
    uint64_t v9 = v0[23];
    uint64_t v10 = v0[9];
    sub_100046C34(v6, _s23IndexingPreflightResultVMa);
    sub_100043B50();
    sub_100043868();
    sub_100043C48();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 32))(v10, v8, v7);
    uint64_t v11 = sub_100045DB4();
    sub_10000848C(v11, 0LL, 1LL, v12);
    sub_10000F404();
    sub_10000F338();
    sub_10000F4A0();
    sub_10000F484();
    sub_10000F3FC();
    sub_10000F41C();
    uint64_t v13 = (uint64_t (*)(void))sub_10000F588();
  }

  return v13();
}

uint64_t sub_100017B08()
{
  return sub_100044D64(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_100017B5C()
{
  return sub_100044D64(*(uint64_t (**)(void))(v0 + 8));
}

void sub_100017BB8()
{
  uint64_t v4 = v3;
  sub_10000844C(&qword_10006A570);
  sub_100044D98();
  __chkstk_darwin(v5);
  uint64_t v6 = sub_100045E68();
  uint64_t v7 = type metadata accessor for ToolKitIndexingRequest.TestingConfig.Failure(v6);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  sub_10004586C();
  uint64_t v11 = (unint64_t *)(v9 - v10);
  __chkstk_darwin(v12);
  uint64_t v37 = (uint64_t)&v36 - v13;
  sub_10000844C(&qword_10006A578);
  sub_100044D98();
  __chkstk_darwin(v14);
  uint64_t v15 = sub_100045E4C();
  uint64_t v16 = type metadata accessor for ToolKitIndexingRequest.TestingConfig(v15);
  uint64_t v17 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  sub_100046708();
  uint64_t v36 = v4;
  ToolKitIndexingRequest.testingConfig.getter(v18);
  if (sub_1000084E0(v0, 1LL, v16) == 1)
  {
    uint64_t v19 = &qword_10006A578;
    uint64_t v20 = v0;
LABEL_5:
    sub_100041358(v20, v19);
LABEL_6:
    sub_100008D04();
    return;
  }

  uint64_t v21 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v17 + 32))(v1, v0, v16);
  ToolKitIndexingRequest.TestingConfig.failure.getter(v21);
  if (sub_1000084E0(v2, 1LL, v7) == 1)
  {
    sub_100045164();
    uint64_t v19 = &qword_10006A570;
    uint64_t v20 = v2;
    goto LABEL_5;
  }

  uint64_t v22 = v37;
  sub_10004746C(v37, v2, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 32));
  sub_10004746C((uint64_t)v11, v22, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 16));
  if ((*(unsigned int (**)(unint64_t *, uint64_t))(v8 + 88))(v11, v7) == enum case for ToolKitIndexingRequest.TestingConfig.Failure.retryingError(_:))
  {
    uint64_t v23 = sub_100045C90((uint64_t)v11, *(uint64_t (**)(uint64_t, uint64_t))(v8 + 96));
    unint64_t v24 = *v11;
    if (ToolKitIndexingRequest.retryCount.getter(v23) < v24)
    {
      uint64_t v25 = type metadata accessor for ToolKitTestingRetryingError(0LL);
      sub_100040370( &qword_10006A580,  (uint64_t (*)(uint64_t))&type metadata accessor for ToolKitTestingRetryingError);
      uint64_t v26 = sub_100047694();
      swift_allocError(v26, v27, 0LL, 0LL);
      uint64_t v29 = (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)(v25 - 8) + 104LL))( v28,  enum case for ToolKitTestingRetryingError.genericError(_:),  v25);
      swift_willThrow(v29, v30, v31, v32, v33, v34, v35);
    }

    sub_100045C90(v37, *(uint64_t (**)(uint64_t, uint64_t))(v8 + 8));
    sub_100045164();
    goto LABEL_6;
  }

  _diagnoseUnexpectedEnumCase<A>(type:)(v7, v7);
  __break(1u);
}

void sub_100017E28()
{
  uint64_t v2 = sub_100045E4C();
  uint64_t v3 = type metadata accessor for Logger(v2);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  sub_10004586C();
  uint64_t v7 = v5 - v6;
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v117 = (char *)v112 - v10;
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v13 = (uint8_t *)v112 - v12;
  uint64_t v14 = __chkstk_darwin(v11);
  uint64_t v16 = (char *)v112 - v15;
  uint64_t v17 = __chkstk_darwin(v14);
  uint64_t v19 = (char *)v112 - v18;
  v130[0] = (void *)static Locale.preferredLanguages.getter(v17);
  uint64_t v119 = WFLogCategoryToolKit;
  uint64_t v20 = static WFLog.subscript.getter(WFLogCategoryToolKit);
  uint64_t v21 = (os_log_s *)Logger.logObject.getter(v20);
  os_log_type_t v22 = static os_log_type_t.debug.getter();
  BOOL v23 = os_log_type_enabled(v21, v22);
  unint64_t v24 = &off_100059000;
  uint64_t v118 = v3;
  uint64_t v116 = v0;
  uint64_t v114 = v7;
  if (v23)
  {
    uint64_t v25 = sub_10000D524(12LL);
    uint64_t v115 = v16;
    uint64_t v26 = (uint8_t *)v25;
    uint64_t v27 = sub_10000D524(32LL);
    uint64_t v120 = (void *)v4;
    uint64_t v4 = v27;
    v128[0] = v27;
    *(_DWORD *)uint64_t v26 = 136315138;
    uint64_t v113 = v26 + 4;
    sub_100043154((uint64_t)v130, (uint64_t)&v121);
    uint64_t v28 = v130[0];
    uint64_t v29 = sub_100045814();
    uint64_t v30 = v13;
    uint64_t v31 = Array.description.getter(v29, &type metadata for String);
    uint64_t v32 = v28;
    uint64_t v3 = v118;
    swift_bridgeObjectRelease(v32);
    uint64_t v33 = v31;
    uint64_t v13 = v30;
    uint64_t v35 = sub_100044874(v33, v34, v128);
    uint64_t v36 = sub_100045798(v35);
    unint64_t v24 = &off_100059000;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v36, v37);
    sub_10004316C();
    sub_100043D54((void *)&_mh_execute_header, v21, v22, "Preferred languages: %s", v26);
    sub_100043668(v4);
    sub_10000F2F0(v4);
    uint64_t v38 = (uint64_t)v26;
    uint64_t v16 = v115;
    sub_10000F2F0(v38);

    uint64_t v39 = (void *)v120[1];
  }

  else
  {

    uint64_t v39 = *(void **)(v4 + 8);
  }

  uint64_t v120 = v39;
  ((void (*)(char *, uint64_t))v39)(v19, v3);
  id v40 = [(id)objc_opt_self(AFPreferences) sharedPreferences];
  uint64_t v41 = sub_1000403BC(v40);
  if (v42)
  {
    uint64_t v43 = v41;
    unint64_t v44 = v42;
    sub_100045128();
    uint64_t v45 = sub_100046888(v44);
    unint64_t v46 = (os_log_s *)Logger.logObject.getter(v45);
    os_log_type_t v47 = static os_log_type_t.debug.getter();
    if (sub_1000450D4(v47))
    {
      uint64_t v48 = sub_10000D524(12LL);
      uint64_t v115 = v16;
      uint64_t v49 = (uint8_t *)v48;
      uint64_t v50 = sub_10000D524(32LL);
      v128[0] = v50;
      *(_DWORD *)uint64_t v49 = *((void *)v24 + 270);
      sub_100045790();
      uint64_t v51 = sub_100038098(v43, v44, v128);
      uint64_t v52 = sub_100045798(v51);
      unint64_t v24 = &off_100059000;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v52, v53);
      sub_1000464E8(v44);
      sub_100043D54((void *)&_mh_execute_header, v46, (os_log_type_t)v4, "Siri language: %s", v49);
      sub_100043668(v50);
      sub_10000F2F0(v50);
      sub_10000F2F0((uint64_t)v49);
    }

    else
    {

      sub_100043238(v44);
    }

    sub_1000450F0();
    sub_100043154((uint64_t)v130, (uint64_t)&v122);
    if ((sub_10001FBFC(v43, v44, v130[0]) & 1) != 0)
    {
      uint64_t v41 = sub_100043908();
    }

    else
    {
      sub_100043828((uint64_t)v130, (uint64_t)v128, 33LL);
      sub_100044848();
      uint64_t v54 = v130[0][2];
      sub_10004487C(v54);
      uint64_t v55 = v130[0];
      v130[0][2] = v54 + 1;
      uint64_t v56 = &v55[2 * v54];
      v56[4] = v43;
      v56[5] = v44;
      v130[0] = v55;
      uint64_t v41 = swift_endAccess(v128);
    }
  }

  uint64_t v57 = sub_1000132F0(v41, (unint64_t *)&unk_10006A530, &OBJC_CLASS___NSString_ptr);
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v57);
  char v59 = (void *)objc_opt_self(&OBJC_CLASS___NSBundle);
  uint64_t v115 = (char *)[v59 bundleForClass:ObjCClassFromMetadata];
  uint64_t v60 = (objc_class *)[v115 localizations];
  Class isa = v60;
  if (!v60)
  {
    static Array._unconditionallyBridgeFromObjectiveC(_:)(0LL, &type metadata for String);
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    sub_100043174();
  }

  uint64_t v62 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v60, &type metadata for String);
  sub_100045128();
  uint64_t v63 = sub_1000436BC();
  uint64_t v64 = (os_log_s *)Logger.logObject.getter(v63);
  os_log_type_t v65 = static os_log_type_t.debug.getter();
  if (sub_1000450D4(v65))
  {
    uint64_t v66 = sub_10000D524(12LL);
    uint64_t v113 = v13;
    uint64_t v67 = (uint8_t *)v66;
    uint64_t v68 = sub_10000D524(32LL);
    v128[0] = v68;
    *(_DWORD *)uint64_t v67 = *((void *)v24 + 270);
    v112[1] = v67 + 4;
    uint64_t v69 = sub_1000436BC();
    uint64_t v70 = Array.description.getter(v69, &type metadata for String);
    unint64_t v72 = v71;
    sub_100043174();
    uint64_t v73 = sub_100038098(v70, v72, v128);
    uint64_t v74 = sub_100045798(v73);
    sub_100046A70(v74, v75);
    sub_100043238(v62);
    sub_1000432F0();
    sub_100043D54((void *)&_mh_execute_header, v64, (os_log_type_t)v4, "Foundation localizations: %s", v67);
    sub_100043668(v68);
    sub_10000F2F0(v68);
    sub_10000F2F0((uint64_t)v67);
  }

  else
  {

    sub_100043238(v62);
    sub_100046BE4();
  }

  sub_1000450F0();
  uint64_t v129 = &_swiftEmptySetSingleton;
  sub_100043154((uint64_t)v130, (uint64_t)v128);
  uint64_t v76 = (os_log_s *)v130[0];
  if (v130[0][2])
  {
    while (1)
    {
      sub_10004317C();
      Class v77 = Array._bridgeToObjectiveC()().super.isa;
      sub_100008D58();
      id v78 = [v59 preferredLocalizationsFromArray:isa forPreferences:v77];
      sub_1000476A0();
      static Array._unconditionallyBridgeFromObjectiveC(_:)(v76, &type metadata for String);
      sub_100047870();
      uint64_t v79 = *(void *)(v62 + 16);
      if (v79)
      {
        uint64_t v80 = (uint64_t *)(v62 + 40);
        do
        {
          uint64_t v81 = *(v80 - 1);
          uint64_t v82 = *v80;
          sub_100043E98();
          sub_10003C084(v127, v81, v82);
          swift_bridgeObjectRelease(v127[1]);
          v80 += 2;
          --v79;
        }

        while (v79);
      }

      sub_100043174();
      sub_100043828((uint64_t)v130, (uint64_t)v127, 33LL);
      uint64_t v83 = v130[0];
      if ((swift_isUniquelyReferenced_nonNull_native(v130[0]) & 1) == 0)
      {
        sub_10003FAD4((uint64_t)v83);
        uint64_t v83 = v86;
      }

      uint64_t v84 = v83[2];
      if (!v84) {
        break;
      }
      uint64_t v85 = v84 - 1;
      memmove(v83 + 4, v83 + 6, 16 * (v84 - 1));
      v83[2] = v85;
      v130[0] = v83;
      swift_endAccess(v127);
      sub_10004316C();
      uint64_t v76 = (os_log_s *)v130[0];
      if (!v130[0][2]) {
        goto LABEL_24;
      }
    }

    __break(1u);
    sub_1000435DC();
    __break(1u);
  }

  else
  {
LABEL_24:

    sub_100045128();
    sub_1000462D8();
    os_log_type_t v87 = sub_100043BF0();
    if (os_log_type_enabled(v76, v87))
    {
      uint64_t v62 = sub_10000D524(12LL);
      uint64_t v88 = sub_10000D524(32LL);
      v127[0] = v88;
      *(_DWORD *)uint64_t v62 = 136315138;
      sub_100043154((uint64_t)&v129, (uint64_t)&v123);
      uint64_t v89 = sub_1000443C8();
      Set.description.getter(v89, &type metadata for String, &protocol witness table for String);
      uint64_t v90 = sub_100043D74();
      uint64_t v124 = (void *)sub_1000472EC(v90, v91, v127);
      sub_100046A70((uint64_t)&v124, (uint64_t)&v125);
      sub_1000466D8();
      sub_100043D54((void *)&_mh_execute_header, v76, v87, "Preferred localizations: %s", (uint8_t *)v62);
      sub_100043668(v88);
      sub_10000F2F0(v88);
      sub_10000F2F0(v62);
    }

    sub_1000450F0();
    sub_100043154((uint64_t)&v129, (uint64_t)v127);
    uint64_t v92 = (uint64_t)v129;
    if (!v129[2])
    {
      sub_100045128();
      sub_100045C1C();
      os_log_type_t v93 = sub_100045978();
      if (sub_100043810(v93))
      {
        uint64_t v94 = (_WORD *)sub_10000D524(2LL);
        *uint64_t v94 = 0;
        sub_100046FE0( (void *)&_mh_execute_header,  v76,  (os_log_type_t)v62,  "No preferred localizations. Falling back to English");
        sub_10000F2F0((uint64_t)v94);
      }

      sub_1000443F4();
      sub_1000450F0();
      sub_100043828((uint64_t)&v129, (uint64_t)&v124, 33LL);
      sub_10003C084(v126, 28261LL, 0xE200000000000000LL);
      swift_endAccess(&v124);
      swift_bridgeObjectRelease(v126[1]);
      uint64_t v92 = (uint64_t)v129;
    }

    sub_100046888(v92);
    sub_10003DBDC(v92);
    uint64_t v96 = v95;
    sub_100043024();
    uint64_t v124 = v96;
    sub_10003DAF4(&v124);
    sub_100043024();
    uint64_t v97 = v124;
    uint64_t v98 = v124[2];
    if (v98)
    {
      uint64_t v124 = _swiftEmptyArrayStorage;
      specialized ContiguousArray.reserveCapacity(_:)(v98);
      uint64_t v99 = v97 + 5;
      do
      {
        uint64_t v100 = *v99;
        sub_100046888(*v99);
        uint64_t v101 = sub_100045ACC();
        Locale.init(identifier:)(v101);
        id v102 = objc_allocWithZone(&OBJC_CLASS___INStringLocalizer);
        swift_bridgeObjectRetain(v100);
        uint64_t v103 = sub_100045ACC();
        sub_100037BA0(v103, v104);
        id v105 = objc_allocWithZone(&OBJC_CLASS___WFLocalizationContext);
        uint64_t v106 = sub_1000460C4();
        id v108 = sub_100037C00(v106, v107);
        uint64_t v109 = sub_1000432F0();
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v109);
        uint64_t v110 = v124[2];
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v110);
        uint64_t v111 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v110, v108);
        specialized ContiguousArray._endMutation()(v111);
        v99 += 2;
        --v98;
      }

      while (v98);
    }

    sub_100043024();
    sub_100043678();
    sub_100047348();
    sub_1000456E0();
    sub_1000436A4();
  }

uint64_t sub_100018840(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[75] = a6;
  v6[74] = a5;
  v6[73] = a4;
  _BYTE v6[72] = a3;
  v6[71] = a2;
  uint64_t v7 = sub_100045374();
  v6[76] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v6[77] = v8;
  v6[78] = sub_100013328(v8);
  uint64_t v9 = sub_100045FDC();
  v6[79] = v9;
  v6[80] = *(void *)(v9 - 8);
  v6[81] = sub_1000421E4();
  v6[82] = sub_1000421E4();
  v6[83] = sub_1000421E4();
  uint64_t v10 = type metadata accessor for OSSignpostError(0LL);
  v6[84] = v10;
  v6[85] = *(void *)(v10 - 8);
  v6[86] = sub_1000421E4();
  v6[87] = sub_1000421E4();
  v6[88] = sub_1000421E4();
  uint64_t v11 = sub_100044E9C();
  v6[89] = v11;
  v6[90] = *(void *)(v11 - 8);
  v6[91] = sub_1000421E4();
  v6[92] = sub_1000421E4();
  v6[93] = sub_1000421E4();
  uint64_t v12 = sub_1000477A8();
  v6[94] = v12;
  uint64_t v13 = *(void *)(v12 - 8);
  v6[95] = v13;
  v6[96] = sub_100013328(v13);
  uint64_t v14 = type metadata accessor for OSSignpostID(0LL);
  v6[97] = v14;
  v6[98] = *(void *)(v14 - 8);
  v6[99] = sub_1000421E4();
  v6[100] = sub_1000421E4();
  v6[101] = sub_1000421E4();
  v6[102] = sub_1000421E4();
  v6[103] = sub_1000421E4();
  v6[104] = sub_1000421E4();
  v6[105] = sub_1000421E4();
  uint64_t v15 = sub_1000477A0();
  v6[106] = v15;
  v6[107] = *(void *)(v15 - 8);
  v6[108] = sub_1000421E4();
  v6[109] = sub_1000421E4();
  v6[110] = sub_1000421E4();
  v6[111] = sub_1000421E4();
  v6[112] = sub_1000421E4();
  v6[113] = sub_1000421E4();
  v6[114] = sub_1000421E4();
  uint64_t v16 = type metadata accessor for WFLogSignpost(0LL);
  sub_1000471A4(v16);
  v6[117] = sub_1000421E4();
  v6[118] = sub_1000421E4();
  v6[119] = sub_1000421E4();
  uint64_t v17 = sub_10000F47C();
  v6[120] = v17;
  uint64_t v18 = *(void *)(v17 - 8);
  v6[121] = v18;
  v6[122] = sub_100013328(v18);
  sub_10000F3A0();
  return sub_10000F2D0();
}

void sub_100018A3C()
{
  unint64_t v346 = (unint64_t)(v0 + 66);
  uint64_t v2 = v0[122];
  uint64_t v3 = v0[121];
  id v4 = (id)v0[120];
  uint64_t v5 = v0[71];
  v0[66] = _swiftEmptyArrayStorage;
  sub_100044408( enum case for ToolKitIndexingReason.Changeset.full(_:),  *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 104));
  LOBYTE(v5) = static ToolKitIndexingReason.Changeset.== infix(_:_:)(v5, v2);
  uint64_t v6 = sub_100043124(*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8));
  uint64_t v7 = &off_100059000;
  uint64_t v8 = &off_100059000;
  if ((v5 & 1) != 0)
  {
    uint64_t v9 = static TypeIdentifier.PrimitiveTypeIdentifier.allCases.getter(v6);
    if (*(void *)(v9 + 16))
    {
      uint64_t v305 = (uint64_t)(v0 + 67);
      uint64_t v325 = (uint64_t)(v0 + 69);
      uint64_t v332 = (uint64_t)(v0 + 68);
      uint64_t v388 = (uint64_t)(v0 + 71);
      uint64_t v461 = v0[116];
      uint64_t v484 = v0[107];
      uint64_t v10 = v0[98];
      sub_100045544();
      uint64_t v339 = v0[90];
      uint64_t v298 = v12;
      uint64_t v14 = v12 + v13;
      uint64_t v423 = v0[85];
      uint64_t v446 = *(void *)(v15 + 72);
      uint64_t v454 = v15;
      v480 = *(uint64_t (**)(void))(v15 + 16);
      uint64_t v476 = WFLogCategoryToolKit;
      int v353 = enum case for OSSignpostError.doubleEnd(_:);
      uint64_t v472 = 6LL;
      *((void *)&v16 + 1) = 6LL;
      *(void *)&__int128 v16 = 136315138LL;
      __int128 v368 = v16;
      *(void *)&__int128 v16 = 136315394LL;
      __int128 v312 = v16;
      uint64_t v514 = v10;
      do
      {
        uint64_t v492 = v14;
        uint64_t v495 = v11;
        uint64_t v17 = (os_log_s *)v0[114];
        uint64_t v18 = v0[105];
        uint64_t v19 = v480(v0[96]);
        TypeIdentifier.PrimitiveTypeIdentifier.debugDescription.getter(v19);
        sub_100044BF4();
        object = (uint64_t (**)(uint64_t))v20._object;
        String.append(_:)(v20);
        uint64_t v21 = v516;
        uint64_t v22 = v517;
        uint64_t v23 = sub_100042644((uint64_t)&unk_100066908, 32LL);
        uint64_t v506 = v21;
        *(void *)(v23 + 16) = v21;
        *(void *)(v23 + 24) = v22;
        uint64_t v24 = sub_100042644((uint64_t)&unk_100066930, 17LL);
        sub_100044FF4(v24);
        uint64_t v25 = sub_100042644((uint64_t)&unk_100066958, 17LL);
        sub_100047120(v25);
        uint64_t v26 = sub_100042644((uint64_t)&unk_100066980, 32LL);
        *(void *)(v26 + 16) = sub_1000421E0;
        *(void *)(v26 + 24) = v23;
        uint64_t v27 = sub_10000844C((uint64_t *)&unk_10006A360);
        uint64_t inited = swift_initStackObject(v27, v0 + 12);
        *(_OWORD *)(inited + 16) = xmmword_100059840;
        *(void *)(inited + 32) = sub_1000421D8;
        *(void *)(inited + 40) = v24;
        *(void *)(inited + 48) = sub_1000421D8;
        *(void *)(inited + 56) = v25;
        *(void *)(inited + 64) = sub_100042184;
        *(void *)(inited + 72) = v26;
        sub_1000443C0();
        sub_1000446A0();
        uint64_t v29 = static WFLogSignpost.signposter(for:)(v476);
        OSSignposter.logHandle.getter(v29);
        uint64_t v30 = sub_100047040();
        OSSignposter.logHandle.getter(v30);
        sub_100047710();
        if ((sub_100045C40() & 1) != 0)
        {
          sub_10004632C(*(uint64_t (**)(void))(v10 + 16));
          uint64_t v31 = (uint8_t *)sub_10000D524(12LL);
          uint64_t v32 = sub_10000D524(32LL);
          uint64_t v516 = v32;
          *(_DWORD *)uint64_t v31 = v368;
          sub_1000443C0();
          sub_100043FDC();
          v0[70] = sub_100044874(v506, v33, &v516);
          sub_100044A2C((uint64_t)(v0 + 70), v388);
          sub_100043238(v22);
          sub_1000434B8();
          sub_10000F69C();
          uint64_t v34 = sub_100043B50();
          os_signpost_id_t v35 = OSSignpostID.rawValue.getter(v34);
          sub_100044BCC( (void *)&_mh_execute_header,  v17,  (os_signpost_type_t)v18,  v35,  "IndexType",  "type=%{signpost.description:attribute}s",  v31);
          sub_100046480(v514);
          swift_arrayDestroy(v32, 1LL);
          sub_10000F2F0(v32);
          sub_10000F2F0((uint64_t)v31);

          uint64_t v36 = v509;
        }

        else
        {
          sub_10000F69C();
          sub_10004316C();
          sub_100043B50();

          uint64_t v36 = *(void (**)(void, void, void))(v10 + 16);
        }

        uint64_t v37 = v0[114];
        uint64_t v38 = v0[113];
        uint64_t v39 = v0[105];
        uint64_t v40 = v0[97];
        uint64_t v499 = v0[96];
        v509 = v36;
        v36(v0[104], v39, v40);
        uint64_t v41 = sub_10000F694();
        sub_10000F4D8(v41);
        sub_10000F324();
        sub_10000F538(v38, v37, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v484 + 16));
        sub_100043434(v38, (uint64_t)"IndexType");
        (*(void (**)(uint64_t, uint64_t))(v514 + 8))(v39, v40);
        uint64_t v42 = sub_100044174();
        v490 = v43;
        v43(v42);
        sub_1000110BC(v499);
        uint64_t v44 = v0[93];
        sub_100044BA4();
        sub_100044AC0();
        sub_100044DD4();
        sub_10004699C();
        sub_100013360();
        uint64_t v45 = sub_100043380(v44, *(uint64_t (**)(uint64_t, uint64_t))(v339 + 8));
        uint64_t v46 = WFLogSignpost.signposter.getter(v45);
        unint64_t v47 = WFLogSignpost.name.getter(v46);
        char v49 = v48;
        uint64_t v1 = WFLogSignpost.state.getter();
        uint64_t v50 = (os_log_s *)sub_100047088();
        uint64_t v51 = sub_100045D88();
        os_signpost_type_t v52 = static os_signpost_type_t.end.getter(v51);
        if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
        {
          if ((v49 & 1) != 0)
          {
            if (HIDWORD(v47)) {
              goto LABEL_123;
            }
            BOOL v53 = v47 > 0x10FFFF;
            unint64_t v47 = (unint64_t)(v0 + 67);
            if (v53) {
              goto LABEL_124;
            }
          }

          else if (!v47)
          {
            goto LABEL_122;
          }

          sub_100043FDC();
          sub_100045174();
          sub_1000434B8();
          uint64_t v54 = "[Error] Interval already ended";
          if (sub_100043124(*(uint64_t (**)(uint64_t, uint64_t))(v423 + 88)) != v353)
          {
            sub_100043820(v423);
            uint64_t v54 = "";
          }

          v509(v0[104], v0[103], v0[97]);
          uint64_t v55 = (_WORD *)sub_10000D524(2LL);
          os_signpost_id_t v56 = sub_1000442D0(v55);
          sub_1000441F0((void *)&_mh_execute_header, v50, v52, v56, (const char *)v47, v54);
          sub_100045ACC();
          sub_100045594();
          sub_10000F2F0(v38);
        }

        uint64_t v57 = v50;
        uint64_t v58 = v0[96];

        sub_1000434B8();
        sub_100045594();
        uint64_t v59 = sub_100045394();
        v490(v59);
        sub_100043124(*(uint64_t (**)(uint64_t, uint64_t))(v461 + 8));
        sub_100043D10(v58, *(uint64_t (**)(uint64_t, uint64_t))(v454 + 8));
        uint64_t v14 = v492 + v446;
        uint64_t v11 = v495 - 1;
        uint64_t v10 = v514;
      }

      while (v495 != 1);
      swift_bridgeObjectRelease(v298);
      uint64_t v8 = &off_100059000;
      uint64_t v7 = &off_100059000;
    }

    else
    {
      swift_bridgeObjectRelease(v9);
    }

    id v4 = [(id)objc_opt_self(WFContentItemRegistry) sharedRegistry];
    uint64_t v60 = WFContentItemRegistry.contentItemClasses.getter();
    sub_100015E38(v60);
  }

  v496 = v0 + 2;
  v462 = v0 + 22;
  uint64_t v424 = (uint64_t)(v0 + 40);
  uint64_t v395 = (uint64_t)(v0 + 50);
  uint64_t v402 = (uint64_t)(v0 + 53);
  uint64_t v416 = (uint64_t)(v0 + 55);
  v467 = (const char *)(v0 + 56);
  v481 = v0 + 61;
  uint64_t v61 = v0[72];
  v455 = v0 + 64;
  uint64_t v62 = *(void *)(v61 + *(int *)(sub_100047788() + 24));
  if ((v62 & 0xC000000000000001LL) != 0)
  {
    sub_1000461BC(v62);
    __CocoaSet.makeIterator()(v4);
    sub_10004535C();
    sub_10004547C((unint64_t *)&qword_100069E10);
    uint64_t v63 = sub_100045A78();
    Set.Iterator.init(_cocoa:)(v66, v63, v64, v65);
    uint64_t v67 = v0[32];
    uint64_t v61 = v0[33];
    uint64_t v68 = v0;
    uint64_t v69 = v0[34];
    int64_t v70 = v68[35];
    uint64_t v1 = v68[36];
  }

  else
  {
    sub_10004616C();
    uint64_t v68 = v0;
    uint64_t v69 = ~v71;
    sub_100046AA0();
    uint64_t v67 = swift_bridgeObjectRetain(v72);
    int64_t v70 = 0LL;
  }

  v431 = v68 + 51;
  v354 = v68 + 52;
  v485 = (id *)(v68 + 62);
  *(void *)&__int128 v368 = v68 + 63;
  v68[125] = v69;
  v68[124] = v61;
  v68[123] = v67;
  uint64_t v447 = WFLogCategoryToolKit;
  v68[126] = WFLogCategoryToolKit;
  uint64_t v409 = WFLogCategoryToolKitIndexing;
  v68[127] = WFLogCategoryToolKitIndexing;
  LODWORD(v388) = enum case for OSSignpostError.doubleEnd(_:);
  *((_DWORD *)v68 + 286) = enum case for OSSignpostError.doubleEnd(_:);
  __int128 v498 = *((_OWORD *)v7 + 132);
  int v487 = *((void *)v8 + 270);
  v361 = (char *)&type metadata for Swift.AnyObject + 8;
  uint64_t v73 = v68;
  v515 = v68;
  if (v67 < 0) {
    goto LABEL_27;
  }
LABEL_25:
  if (v1)
  {
    sub_100046A80();
    uint64_t v76 = v75 & v1;
    uint64_t v78 = v77 | (v70 << 6);
    int64_t v79 = v70;
    goto LABEL_38;
  }

  int64_t v79 = v70 + 1;
  if (__OFADD__(v70, 1LL))
  {
LABEL_130:
    __break(1u);
LABEL_131:
    __break(1u);
    return;
  }

  uint64_t v84 = v73[125];
  uint64_t v85 = v73[124];
  if (*(void *)(v85 + 8 * v79))
  {
LABEL_37:
    sub_100046720();
    uint64_t v76 = v89 & v88;
    uint64_t v78 = v90 + (v79 << 6);
LABEL_38:
    id v83 = sub_100045458(v74, v78);
    while (1)
    {
      v515[130] = v76;
      uint64_t v73 = v515;
      v515[129] = v79;
      v515[128] = v83;
      if (!v83) {
        goto LABEL_82;
      }
      uint64_t v91 = sub_100047038();
      uint64_t v92 = (void *)v346;
      sub_100015E38(v91);
      id v94 = sub_100043854(v93, "parameters");
      uint64_t v95 = sub_10000E518(0LL, &qword_10006A3C0, &OBJC_CLASS___WFParameter_ptr);
      uint64_t v96 = sub_100013354(v95);
      sub_100045F78(v96);
      if (v346 >> 62)
      {
        sub_10004317C();
        id v94 = (id)sub_100045A70();
        sub_100008D58();
      }

      else
      {
        sub_100045420();
      }

      v515[132] = v94;
      if (v94)
      {
        if (v515[75] >> 62)
        {
          sub_10004317C();
          id v94 = (id)sub_100045A70();
          uint64_t v97 = sub_100008D58();
        }

        else
        {
          sub_100045420();
        }

        uint64_t v98 = 0LL;
        v515[133] = v94;
        while (1)
        {
          uint64_t v99 = v73[131];
          if ((v99 & 0xC000000000000001LL) != 0)
          {
            uint64_t v100 = sub_100044EF8(v97, v99);
          }

          else
          {
            sub_100046C3C();
            if (v102)
            {
              __break(1u);
LABEL_117:
              __break(1u);
LABEL_118:
              __break(1u);
LABEL_119:
              __break(1u);
LABEL_120:
              __break(1u);
              goto LABEL_121;
            }

            uint64_t v100 = (uint64_t)sub_1000430AC(v101 + 8 * v98);
          }

          uint64_t v67 = sub_100046B20(v100);
          v73[135] = v103;
          if (v104)
          {
            __break(1u);
            goto LABEL_83;
          }

          uint64_t v105 = v73[126];
          uint64_t v106 = sub_100043918((uint64_t)[(id)v73[128] identifier]);
          sub_100045CA8();
          v73[48] = v106;
          v73[49] = v1;
          v107._countAndFlagsBits = 35LL;
          v107._object = (void *)0xE100000000000000LL;
          String.append(_:)(v107);
          id v109 = sub_100043854(v108, "key");
          sub_1000459D0((uint64_t)v109);
          sub_100047320();
          sub_10004544C();
          sub_10004316C();
          uint64_t v110 = (uint8_t *)v73[48];
          uint64_t v1 = v73[49];
          uint64_t v111 = sub_100042644((uint64_t)&unk_100066868, 32LL);
          *(void *)(v111 + 16) = v110;
          *(void *)(v111 + 24) = v1;
          uint64_t v112 = sub_100042644((uint64_t)&unk_100066890, 17LL);
          sub_100044FF4(v112);
          uint64_t v113 = sub_100042644((uint64_t)&unk_1000668B8, 17LL);
          sub_100047120(v113);
          uint64_t v114 = sub_100042644((uint64_t)&unk_1000668E0, 32LL);
          *(void *)(v114 + 16) = sub_100041218;
          *(void *)(v114 + 24) = v111;
          uint64_t v115 = sub_10000844C((uint64_t *)&unk_10006A360);
          uint64_t v116 = swift_initStackObject(v115, v496);
          *(_OWORD *)(v116 + 16) = v498;
          *(void *)(v116 + 32) = sub_1000421D8;
          *(void *)(v116 + 40) = v112;
          *(void *)(v116 + 48) = sub_1000421D8;
          *(void *)(v116 + 56) = v113;
          *(void *)(v116 + 64) = sub_100042184;
          *(void *)(v116 + 72) = v114;
          sub_1000443C8();
          sub_100044D54();
          uint64_t v117 = static WFLogSignpost.signposter(for:)(v105);
          uint64_t v118 = OSSignposter.logHandle.getter(v117);
          uint64_t v119 = OSSignpostID.init(log:)(v118);
          uint64_t v120 = (os_log_s *)OSSignposter.logHandle.getter(v119);
          os_signpost_type_t v121 = static os_signpost_type_t.begin.getter();
          if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
          {
            uint64_t v510 = v73[98];
            uint64_t v122 = *(void (**)(void))(v510 + 16);
            v122();
            uint64_t v488 = (uint64_t)v110;
            uint64_t v110 = (uint8_t *)sub_10000D524(12LL);
            uint64_t v504 = sub_10000D524(32LL);
            uint64_t v516 = v504;
            *(_DWORD *)uint64_t v110 = v487;
            sub_1000443C8();
            sub_1000442F4();
            v73[61] = sub_10004681C(v488, v123, &v516);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(v481, v485);
            sub_100043238(v1);
            sub_100043DD0();
            sub_100043DA4();
            uint64_t v124 = sub_100043678();
            os_signpost_id_t v125 = OSSignpostID.rawValue.getter(v124);
            sub_100044BCC( (void *)&_mh_execute_header,  v120,  v121,  v125,  "IndexType",  "type=%{signpost.description:attribute}s",  v110);
            sub_100043184(*(uint64_t (**)(uint64_t))(v510 + 8));
            uint64_t v126 = v504;
            swift_arrayDestroy(v504, 1LL);
            sub_10000F2F0(v504);
            sub_10000F2F0((uint64_t)v110);
          }

          else
          {
            uint64_t v126 = v73[98];
            sub_100043DA4();
            sub_100043D74();
            sub_100043678();

            uint64_t v122 = *(void (**)(void))(v126 + 16);
          }

          v73[136] = v122;
          uint64_t v511 = v73[133];
          sub_100045998();
          uint64_t v127 = v515[98];
          sub_1000451D4(v126);
          uint64_t v128 = sub_10000F694();
          sub_10000F4D8(v128);
          sub_10000F324();
          sub_10004314C((uint64_t)v120, (uint64_t)v110, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v114 + 16));
          uint64_t v129 = sub_100047274();
          sub_100043434(v129, (uint64_t)"IndexType");
          uint64_t v130 = *(uint64_t (**)(uint64_t, uint64_t))(v127 + 8);
          uint64_t v73 = v515;
          v515[137] = v130;
          sub_100043D10(v1, v130);
          uint64_t v131 = *(uint64_t (**)(uint64_t, uint64_t))(v114 + 8);
          v515[138] = v131;
          sub_100043380((uint64_t)v110, v131);
          if (v511) {
            break;
          }
          uint64_t v132 = sub_100045F94();
          unint64_t v133 = WFLogSignpost.name.getter(v132);
          char v135 = v134;
          WFLogSignpost.state.getter();
          uint64_t v136 = (os_log_s *)sub_100046F34();
          uint64_t v137 = sub_100045D88();
          os_signpost_type_t v138 = static os_signpost_type_t.end.getter(v137);
          if ((sub_1000462D0() & 1) != 0)
          {
            if ((v135 & 1) != 0)
            {
              if (HIDWORD(v133)) {
                goto LABEL_118;
              }
              BOOL v53 = v133 > 0x10FFFF;
              unint64_t v133 = (unint64_t)v467;
              if (v53) {
                goto LABEL_119;
              }
            }

            else if (!v133)
            {
              goto LABEL_117;
            }

            int v139 = *((_DWORD *)v515 + 286);
            uint64_t v140 = v515[87];
            uint64_t v141 = v515[85];
            sub_100043FDC();
            sub_100045174();
            sub_1000434B8();
            uint64_t v142 = "[Error] Interval already ended";
            if (sub_10000F508(v140, *(uint64_t (**)(uint64_t, uint64_t))(v141 + 88)) != v139)
            {
              sub_100043820(v515[85]);
              uint64_t v142 = "";
            }

            uint64_t v143 = (void (*)(uint64_t))v515[137];
            uint64_t v120 = (os_log_s *)v515[97];
            sub_10000F538(v515[104], v515[101], (uint64_t (*)(uint64_t, uint64_t, uint64_t))v515[136]);
            uint64_t v144 = (_WORD *)sub_10000D524(2LL);
            os_signpost_id_t v145 = sub_1000442D0(v144);
            sub_1000441F0((void *)&_mh_execute_header, v136, v138, v145, (const char *)v133, v142);
            uint64_t v146 = sub_100045ACC();
            v143(v146);
            uint64_t v73 = v515;
            sub_10000F2F0((uint64_t)v122);
          }

          uint64_t v147 = (void (*)(os_log_s *, uint64_t))v73[137];
          uint64_t v512 = v73[135];
          uint64_t v92 = (void *)v73[134];
          object = (uint64_t (**)(uint64_t))v73[138];
          uint64_t v507 = v73[132];
          uint64_t v500 = v73[118];
          uint64_t v148 = v73[116];
          sub_100046FB8();
          uint64_t v149 = v73[97];

          sub_1000434B8();
          v147(v120, v149);
          sub_100045394();
          sub_1000476F4();
          uint64_t v97 = sub_1000431A8(v500, *(uint64_t (**)(uint64_t, uint64_t))(v148 + 8));
          if (v512 == v507) {
            goto LABEL_67;
          }
          uint64_t v98 = v73[135];
        }

        uint64_t v153 = v515[75];
        v515[139] = 0LL;
        sub_10004317C();
        if ((v153 & 0xC000000000000001LL) != 0) {
          id v154 = (id)sub_100044E8C(0LL);
        }
        else {
          id v154 = *(id *)(v153 + 32);
        }
        uint64_t v155 = (uint64_t)v154;
        v515[140] = v154;
        uint64_t v156 = (void *)swift_task_alloc(dword_10006A0EC);
        v515[141] = v156;
        *uint64_t v156 = v515;
        v156[1] = sub_10001A3FC;
        sub_100010CA0(v515[92], v515[134], v515[128], v155);
        return;
      }

LABEL_67:
      sub_100045F58();
      uint64_t v1 = v73[130];
      int64_t v70 = v73[129];
      uint64_t v67 = v73[123];
      if ((v67 & 0x8000000000000000LL) == 0) {
        goto LABEL_25;
      }
LABEL_27:
      uint64_t v80 = sub_100046EB0();
      if (!v80) {
        goto LABEL_82;
      }
      *(void *)__int128 v368 = v80;
      sub_10000E518(0LL, &qword_100069E08, &OBJC_CLASS___WFAction_ptr);
      sub_10004537C();
      uint64_t v81 = sub_100044B28();
      sub_100045064(v81, v82, (uint64_t)v361);
      id v83 = *v485;
      sub_1000431C0();
      int64_t v79 = v70;
      uint64_t v76 = v1;
    }
  }

  int64_t v86 = (unint64_t)(v84 + 64) >> 6;
  int64_t v87 = v70 + 2;
  if (v70 + 2 >= v86) {
    goto LABEL_82;
  }
  if (*(void *)(v85 + 8 * v87))
  {
LABEL_36:
    int64_t v79 = v87;
    goto LABEL_37;
  }

  int64_t v87 = v70 + 3;
  if (v70 + 3 >= v86) {
    goto LABEL_82;
  }
  if (*(void *)(v85 + 8 * v87)) {
    goto LABEL_36;
  }
  int64_t v79 = v70 + 4;
  if (v70 + 4 >= v86)
  {
LABEL_82:
    uint64_t v67 = sub_100046E5C();
    goto LABEL_83;
  }

  if (*(void *)(v85 + 8 * v79)) {
    goto LABEL_37;
  }
  int64_t v151 = v70 + 5;
  while (v151 < v86)
  {
    if (*(void *)(v85 + 8 * v151++))
    {
      int64_t v79 = v151 - 1;
      goto LABEL_37;
    }
  }

LABEL_83:
  sub_1000475E4(v67);
  uint64_t v158 = *(void *)v346;
  uint64_t v491 = *(void *)(*(void *)v346 + 16LL);
  if (v491)
  {
    unint64_t v159 = 0LL;
    uint64_t v489 = v158 + 32;
    v361 = (char *)v73[90];
    v438 = (char *)&type metadata for Any + 8;
    *(void *)&__int128 v157 = 136315394LL;
    __int128 v368 = v157;
    sub_1000468D0();
    uint64_t v468 = v161;
    uint64_t v486 = v160;
    while (v159 < *(void *)(v160 + 16))
    {
      uint64_t v162 = v515;
      uint64_t v163 = (uint8_t *)v515[100];
      unint64_t v497 = v159;
      uint64_t v513 = *(void *)(v489 + 8 * v159);
      v515[64] = v513;
      uint64_t v164 = sub_10000844C(&qword_10006A108);
      uint64_t v165 = String.init<A>(describing:)(v455, v164);
      uint64_t v167 = v166;
      uint64_t v168 = sub_100042644((uint64_t)&unk_1000667C8, 32LL);
      *(void *)(v168 + 16) = v165;
      *(void *)(v168 + 24) = v167;
      uint64_t v169 = sub_100042644((uint64_t)&unk_1000667F0, 17LL);
      sub_100044FF4(v169);
      uint64_t v170 = (os_log_s *)sub_100042644((uint64_t)&unk_100066818, 17LL);
      sub_100047120((uint64_t)v170);
      uint64_t v171 = sub_100042644((uint64_t)&unk_100066840, 32LL);
      *(void *)(v171 + 16) = sub_1000421E0;
      *(void *)(v171 + 24) = v168;
      uint64_t v172 = sub_10000844C((uint64_t *)&unk_10006A360);
      unint64_t v173 = swift_initStackObject(v172, v462);
      *(_OWORD *)(v173 + 16) = v498;
      *(void *)(v173 + 32) = sub_1000421D8;
      *(void *)(v173 + 40) = v169;
      *(void *)(v173 + 48) = sub_1000421D8;
      *(void *)(v173 + 56) = v170;
      *(void *)(v173 + 64) = sub_100042184;
      *(void *)(v173 + 72) = v171;
      sub_1000443C0();
      uint64_t v174 = sub_1000446A0();
      uint64_t v182 = sub_100045DFC( v174,  v175,  v176,  v177,  v178,  v179,  v180,  v181,  v298,  v305,  v312,  *((uint64_t *)&v312 + 1),  v325,  v332,  v339,  v346,  (uint64_t)v354,  (uint64_t)v361,  v368,  *((uint64_t *)&v368 + 1),  v381,  v388,  v395,  v402,  v409,  v416,  v424,  (uint64_t)v431,  (uint64_t)v438,  v447);
      OSSignposter.logHandle.getter(v182);
      uint64_t v183 = sub_100047040();
      OSSignposter.logHandle.getter(v183);
      sub_100047710();
      if ((sub_100045C40() & 1) != 0)
      {
        sub_100045A00();
        uint64_t v169 = v165;
        uint64_t v184 = (uint8_t *)sub_10000D524(12LL);
        uint64_t v493 = sub_10000D524(32LL);
        uint64_t v516 = v493;
        os_signpost_type_t v477 = v163;
        *(_DWORD *)uint64_t v184 = v487;
        uint64_t v163 = v184 + 12;
        sub_1000443C0();
        sub_10004486C();
        v515[50] = sub_100044874(v169, v185, &v516);
        sub_100044A2C(v395, (uint64_t)v431);
        sub_100043238(v167);
        sub_100043B50();
        sub_10000F69C();
        uint64_t v186 = sub_100043868();
        os_signpost_id_t v187 = OSSignpostID.rawValue.getter(v186);
        sub_100044BCC( (void *)&_mh_execute_header,  v170,  v477,  v187,  "IndexType",  "type=%{signpost.description:attribute}s",  v184);
        sub_100043184(object[1]);
        swift_arrayDestroy(v493, 1LL);
        sub_10000F2F0(v493);
        sub_10000F2F0((uint64_t)v184);
      }

      else
      {
        sub_10000F69C();
        sub_10004316C();
        sub_100043868();
      }

      sub_10004591C();
      uint64_t v188 = v515[97];
      unint64_t v501 = v515[75];
      uint64_t v505 = v515[98];
      uint64_t v189 = v515[73];
      uint64_t v190 = sub_100046E14();
      v508 = (void (*)(void, void, void))v191;
      v191(v190);
      uint64_t v192 = sub_10000F694();
      sub_10000F4D8(v192);
      sub_10000F324();
      sub_10000F538(v169, v173, *((uint64_t (**)(uint64_t, uint64_t, uint64_t))v163 + 2));
      sub_100043434(v169, (uint64_t)"IndexType");
      object = *(uint64_t (***)(uint64_t))(v505 + 8);
      ((void (*)(uint64_t, uint64_t))object)(v168, v188);
      uint64_t v193 = *((void *)v163 + 1);
      uint64_t v194 = sub_1000443F4();
      ((void (*)(uint64_t))v193)(v194);
      sub_100043D5C();
      uint64_t v195 = v513;
      uint64_t v196 = sub_100047840(v501, v189);
      v494 = (void (*)(uint64_t))v193;
      if (v189)
      {
        uint64_t v197 = (void *)v515[81];
        static WFLog.subscript.getter(v409);
        sub_100043D64();
        uint64_t v198 = sub_100043D64();
        Logger.logObject.getter(v198);
        os_log_type_t v199 = sub_100045978();
        BOOL v200 = sub_100043F30(v199);
        uint64_t v201 = v515[81];
        uint64_t v202 = v515[80];
        uint64_t v203 = v515[79];
        if (v200)
        {
          uint64_t v502 = v515[81];
          uint64_t v204 = sub_10000D524(22LL);
          uint64_t v193 = sub_10000D524(8LL);
          uint64_t v482 = v203;
          uint64_t v205 = sub_10000D524(32LL);
          uint64_t v516 = v205;
          *(_DWORD *)uint64_t v204 = v368;
          uint64_t v206 = sub_1000446C4(v513);
          uint64_t *v354 = sub_100047090(v206, v207);
          sub_100047450((uint64_t)v354, v402);
          sub_100043908();
          *(_WORD *)(v204 + 12) = 2112;
          sub_100043D64();
          uint64_t v208 = sub_1000477E4();
          uint64_t *v431 = v208;
          sub_100047450((uint64_t)v431, (uint64_t)v354);
          *(void *)uint64_t v193 = v208;
          uint64_t v195 = v513;
          sub_100043C28();
          sub_100043C28();
          sub_100045FC8();
          sub_100043ADC(v209, v210, v211, "Failed to index content item type %s: %@", (uint8_t *)v204);
          sub_10000844C(&qword_10006A320);
          sub_100043668(v193);
          sub_10000F2F0(v193);
          sub_100043668(v205);
          sub_10000F2F0(v205);
          sub_10000F2F0(v204);

          (*(void (**)(uint64_t, uint64_t))(v202 + 8))(v502, v482);
        }

        else
        {
          sub_100043C28();
          sub_100043C28();

          (*(void (**)(uint64_t, uint64_t))(v202 + 8))(v201, v203);
        }

        unint64_t v223 = v497;
        unint64_t v173 = v515[74];
        sub_100044AC0();
        sub_100044DD4();
        sub_1000443A8();
        sub_1000456E0();
        uint64_t v516 = 0xD000000000000014LL;
        uint64_t v517 = v468;
        v518._countAndFlagsBits = sub_1000446C4(v195);
        sub_1000472C0(v518);
        sub_1000432F0();
        swift_getErrorValue(v189, v416, v424);
        uint64_t v224 = sub_100045E84();
        sub_100043CBC(v224, v225);
        sub_1000132B8();
        sub_100043D74();
        sub_100043C48();
        uint64_t v222 = sub_100043C28();
      }

      else
      {
        uint64_t v212 = v196;
        uint64_t v195 = v196[2];
        if (v195)
        {
          sub_100044AC0();
          sub_100045544();
          unint64_t v173 = (unint64_t)v212 + v213;
          uint64_t v215 = *(void *)(v214 + 72);
          uint64_t v216 = *(uint64_t (**)(uint64_t))(v214 + 16);
          uint64_t v162 = v515;
          do
          {
            uint64_t v217 = v515[91];
            uint64_t v193 = v515[90];
            uint64_t v218 = sub_1000460A8();
            uint64_t v219 = v216(v218);
            static IndexingLog.shared.getter(v219);
            uint64_t v220 = sub_1000453BC();
            IndexingLog.log(successfulIndexOfType:in:)(v220, v221);
            sub_100013360();
            sub_100043910(v217, *(uint64_t (**)(uint64_t, uint64_t))(v193 + 8));
            v173 += v215;
            --v195;
          }

          while (v195);
          uint64_t v222 = swift_bridgeObjectRelease(v212);
        }

        else
        {
          uint64_t v222 = sub_100008D58();
          uint64_t v162 = v515;
        }

        unint64_t v223 = v497;
      }

      uint64_t v226 = WFLogSignpost.signposter.getter(v222);
      WFLogSignpost.name.getter(v226);
      uint64_t v227 = sub_10004603C();
      uint64_t v228 = (os_log_s *)OSSignposter.logHandle.getter(v227);
      uint64_t v229 = OSSignpostIntervalState.signpostID.getter();
      os_signpost_type_t v230 = static os_signpost_type_t.end.getter(v229);
      if ((sub_1000462D0() & 1) != 0)
      {
        if ((v193 & 1) != 0)
        {
          if (HIDWORD(v173)) {
            goto LABEL_128;
          }
          sub_1000474B8();
          if (v231) {
            goto LABEL_131;
          }
          sub_100046FF8();
          unint64_t v173 = v402;
          if (!v231 & v102) {
            goto LABEL_129;
          }
        }

        else if (!v173)
        {
          goto LABEL_127;
        }

        uint64_t v232 = v515[85];
        sub_100043D5C();
        sub_100045174();
        sub_100043678();
        v233 = *(uint64_t (**)(uint64_t, uint64_t))(v232 + 88);
        uint64_t v162 = v515;
        v234 = "[Error] Interval already ended";
        if (sub_100043124(v233) != (_DWORD)v388)
        {
          sub_100043820(v515[85]);
          v234 = "";
        }

        v508(v515[104], v515[99], v515[97]);
        v235 = (_WORD *)sub_10000D524(2LL);
        os_signpost_id_t v236 = sub_1000442D0(v235);
        sub_1000441F0((void *)&_mh_execute_header, v228, v230, v236, (const char *)v173, v234);
        sub_100047980();
        sub_1000476F4();
        sub_10000F2F0(v195);
      }

      unint64_t v159 = v223 + 1;
      uint64_t v237 = v162[116];

      sub_100043678();
      sub_1000476F4();
      uint64_t v238 = sub_1000443F4();
      v494(v238);
      sub_100043124(*(uint64_t (**)(uint64_t, uint64_t))(v237 + 8));
      uint64_t v160 = v486;
      if (v159 == v491)
      {
        swift_bridgeObjectRelease(v486);
        uint64_t v73 = v515;
        goto LABEL_113;
      }
    }

LABEL_121:
    __break(1u);
LABEL_122:
    __break(1u);
LABEL_123:
    __break(1u);
LABEL_124:
    __break(1u);
LABEL_125:
    __break(1u);
LABEL_126:
    __break(1u);
LABEL_127:
    __break(1u);
LABEL_128:
    __break(1u);
LABEL_129:
    __break(1u);
    goto LABEL_130;
  }

  swift_bridgeObjectRelease(v158);
LABEL_113:
  uint64_t v239 = sub_100043454();
  uint64_t v439 = v241;
  uint64_t v448 = v240;
  uint64_t v456 = v73[104];
  uint64_t v463 = v73[103];
  uint64_t v469 = v73[102];
  uint64_t v478 = v73[101];
  uint64_t v483 = v73[100];
  sub_1000449B8(v239);
  sub_10000F338();
  sub_10000F4A0();
  sub_10000F484();
  sub_10000F3FC();
  sub_10000F41C();
  sub_10000F3F4();
  sub_10000F4EC();
  sub_10000F4A8();
  uint64_t v242 = sub_10000F404();
  uint64_t v250 = sub_100043624( v242,  v243,  v244,  v245,  v246,  v247,  v248,  v249,  v298,  v305,  v312,  *((uint64_t *)&v312 + 1),  v325,  v332,  v339,  v346,  (uint64_t)v354,  (uint64_t)v361,  v368,  *((uint64_t *)&v368 + 1),  v381,  v388,  v395,  v402,  v409,  v416,  v424,  (uint64_t)v431,  v439);
  uint64_t v258 = sub_100043658( v250,  v251,  v252,  v253,  v254,  v255,  v256,  v257,  v299,  v306,  v313,  v319,  v326,  v333,  v340,  v347,  v355,  v362,  v369,  v375,  v382,  v389,  v396,  v403,  v410,  v417,  v425,  v432,  v440,  v448);
  uint64_t v266 = sub_100043660( v258,  v259,  v260,  v261,  v262,  v263,  v264,  v265,  v300,  v307,  v314,  v320,  v327,  v334,  v341,  v348,  v356,  v363,  v370,  v376,  v383,  v390,  v397,  v404,  v411,  v418,  v426,  v433,  v441,  v449,  v456);
  uint64_t v274 = sub_10004361C( v266,  v267,  v268,  v269,  v270,  v271,  v272,  v273,  v301,  v308,  v315,  v321,  v328,  v335,  v342,  v349,  v357,  v364,  v371,  v377,  v384,  v391,  v398,  v405,  v412,  v419,  v427,  v434,  v442,  v450,  v457,  v463);
  uint64_t v282 = sub_100043614( v274,  v275,  v276,  v277,  v278,  v279,  v280,  v281,  v302,  v309,  v316,  v322,  v329,  v336,  v343,  v350,  v358,  v365,  v372,  v378,  v385,  v392,  v399,  v406,  v413,  v420,  v428,  v435,  v443,  v451,  v458,  v464,  v469);
  uint64_t v290 = sub_1000437F8( v282,  v283,  v284,  v285,  v286,  v287,  v288,  v289,  v303,  v310,  v317,  v323,  v330,  v337,  v344,  v351,  v359,  v366,  v373,  v379,  v386,  v393,  v400,  v407,  v414,  v421,  v429,  v436,  v444,  v452,  v459,  v465,  v470,  v472,  v474,  v478);
  sub_10004384C( v290,  v291,  v292,  v293,  v294,  v295,  v296,  v297,  v304,  v311,  v318,  v324,  v331,  v338,  v345,  v352,  v360,  v367,  v374,  v380,  v387,  v394,  v401,  v408,  v415,  v422,  v430,  v437,  v445,  v453,  v460,  v466,  v471,  v473,  v475,  v479,  v483);
  sub_100043DB4();
  sub_100043DAC();
  sub_100043E50();
  sub_1000442E4();
  sub_1000442DC();
  sub_100044938();
  sub_100044D4C();
  sub_100044948();
  sub_1000448DC();
  sub_100044FDC();
  sub_100045DD8();
  sub_100045DD0();
  ((void (*)(void))v73[1])();
}

uint64_t sub_10001A3FC()
{
  *(void *)(v1 + 1136) = v0;
  swift_task_dealloc(v2);
  sub_10000F3A0();
  return sub_10000F2D0();
}

void sub_10001A448()
{
  uint64_t v1 = *(void **)(v0 + 1120);
  uint64_t v2 = *(void *)(v0 + 736);
  uint64_t v3 = *(void *)(v0 + 720);
  uint64_t v541 = sub_100044AC0();
  sub_100044DD4();
  sub_10004699C();
  sub_100013360();

  sub_100043380(v2, *(uint64_t (**)(uint64_t, uint64_t))(v3 + 8));
  uint64_t v4 = *(void *)(v0 + 1112) + 1LL;
  if (v4 != *(void *)(v0 + 1064))
  {
    uint64_t v98 = *(void *)(v0 + 600);
LABEL_56:
    *(void *)(v0 + 1112) = v4;
    if ((v98 & 0xC000000000000001LL) != 0) {
      uint64_t v99 = sub_100044E8C(v4);
    }
    else {
      uint64_t v99 = (uint64_t)sub_1000430AC(v98 + 8 * v4);
    }
    *(void *)(v0 + 1120) = v99;
    uint64_t v100 = (void *)swift_task_alloc(dword_10006A0EC);
    *(void *)(v0 + 1128) = v100;
    uint64_t v101 = sub_1000457C0(v100);
    sub_10004463C(v101, v102, v103, v104);
    return;
  }

  uint64_t v516 = v0 + 320;
  v529 = (uint64_t *)(v0 + 408);
  uint64_t v366 = v0 + 416;
  uint64_t v463 = v0 + 424;
  uint64_t v504 = v0 + 440;
  uint64_t v394 = (char *)(v0 + 448);
  uint64_t v408 = v0 + 400;
  uint64_t v562 = v0 + 488;
  uint64_t v571 = v0 + 384;
  v592 = (id *)(v0 + 496);
  uint64_t v614 = v0 + 504;
  uint64_t v609 = *(void *)(v0 + 1136);
  uint64_t v596 = v0 + 512;
  v586 = (uint64_t *)(v0 + 528);
  uint64_t v5 = swift_bridgeObjectRelease(*(void *)(v0 + 600));
  *((void *)&v6 + 1) = 6LL;
  *(void *)&__int128 v6 = 136315138LL;
  __int128 v422 = v6;
  v552 = (char *)&type metadata for Any + 8;
  while (1)
  {
    uint64_t v7 = WFLogSignpost.signposter.getter(v5);
    unint64_t v8 = WFLogSignpost.name.getter(v7);
    char v10 = v9;
    uint64_t v11 = WFLogSignpost.state.getter();
    uint64_t v12 = (os_log_s *)OSSignposter.logHandle.getter(v11);
    uint64_t v13 = (void *)v11;
    uint64_t v14 = OSSignpostIntervalState.signpostID.getter();
    os_signpost_type_t v15 = static os_signpost_type_t.end.getter(v14);
    if ((sub_1000462D0() & 1) != 0)
    {
      if ((v10 & 1) != 0)
      {
        if (HIDWORD(v8)) {
          goto LABEL_101;
        }
        BOOL v16 = v8 > 0x10FFFF;
        unint64_t v8 = v0 + 448;
        if (v16) {
          goto LABEL_102;
        }
      }

      else if (!v8)
      {
        goto LABEL_100;
      }

      int v17 = *(_DWORD *)(v0 + 1144);
      uint64_t v18 = *(void *)(v0 + 680);
      sub_100044B34();
      sub_100045174();
      sub_100043868();
      uint64_t v19 = sub_10000F674();
      uint64_t v21 = "[Error] Interval already ended";
      if (v20(v19) != v17)
      {
        sub_100043820(*(void *)(v0 + 680));
        uint64_t v21 = "";
      }

      uint64_t v22 = *(void (**)(uint64_t))(v0 + 1096);
      uint64_t v13 = *(void **)(v0 + 832);
      sub_1000446CC( (uint64_t)v13,  *(void *)(v0 + 808),  *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 1088));
      uint64_t v23 = (_WORD *)sub_10000D524(2LL);
      os_signpost_id_t v24 = sub_1000442D0(v23);
      sub_1000441F0((void *)&_mh_execute_header, v12, v15, v24, (const char *)v8, v21);
      uint64_t v25 = sub_100047980();
      v22(v25);
      sub_10000F2F0(v18);
    }

    uint64_t v26 = *(void (**)(uint64_t, uint64_t))(v0 + 1096);
    sub_10004730C();
    v602 = v28;
    uint64_t v604 = v27;
    uint64_t v598 = *(void *)(v0 + 944);
    uint64_t v29 = *(void *)(v0 + 928);
    uint64_t v30 = *(void *)(v0 + 880);
    uint64_t v31 = *(void *)(v0 + 808);
    uint64_t v32 = *(void *)(v0 + 776);

    sub_100043868();
    v26(v31, v32);
    uint64_t v34 = sub_100044174();
    v602(v34);
    uint64_t v35 = sub_1000431A8(v598, *(uint64_t (**)(uint64_t, uint64_t))(v29 + 8));
    if (v611 == v604) {
      break;
    }
    uint64_t v57 = *(void **)(v0 + 1080);
LABEL_44:
    uint64_t v58 = *(void *)(v0 + 1048);
    if ((v58 & 0xC000000000000001LL) != 0)
    {
      uint64_t v59 = sub_100044EF8(v35, v58);
    }

    else
    {
      sub_100046C3C();
      if (v61) {
        goto LABEL_99;
      }
      uint64_t v59 = (uint64_t)sub_1000430AC(v60 + 8LL * (void)v57);
    }

    sub_100046B20(v59);
    *(void *)(v0 + 1080) = v62;
    if (v63) {
      goto LABEL_98;
    }
    uint64_t v605 = *(void *)(v0 + 1008);
    uint64_t v64 = sub_100043918((uint64_t)[*(id *)(v0 + 1024) identifier]);
    uint64_t v66 = v65;

    *(void *)(v0 + 384) = v64;
    *(void *)(v0 + 392) = v66;
    v67._countAndFlagsBits = 35LL;
    v67._object = (void *)0xE100000000000000LL;
    String.append(_:)(v67);
    id v69 = sub_100043854(v68, "key");
    sub_1000453AC((uint64_t)v69);

    sub_10004544C();
    sub_10004316C();
    uint64_t v71 = *(void *)(v0 + 384);
    unint64_t v70 = *(void *)(v0 + 392);
    uint64_t v72 = sub_100042644((uint64_t)&unk_100066868, 32LL);
    *(void *)(v72 + 16) = v71;
    *(void *)(v72 + 24) = v70;
    uint64_t v73 = sub_100042644((uint64_t)&unk_100066890, 17LL);
    sub_100044FF4(v73);
    uint64_t v74 = sub_100042644((uint64_t)&unk_1000668B8, 17LL);
    sub_100047120(v74);
    uint64_t v75 = sub_100042644((uint64_t)&unk_1000668E0, 32LL);
    *(void *)(v75 + 16) = sub_100041218;
    *(void *)(v75 + 24) = v72;
    uint64_t v76 = sub_10000844C((uint64_t *)&unk_10006A360);
    uint64_t inited = (__n128 *)swift_initStackObject(v76, v0 + 16);
    sub_1000472E0(inited);
    v78[4] = sub_1000421D8;
    v78[5] = v73;
    v78[6] = sub_1000421D8;
    v78[7] = v74;
    v78[8] = sub_100042184;
    v78[9] = v75;
    sub_100043E98();
    sub_100044D54();
    uint64_t v79 = static WFLogSignpost.signposter(for:)(v605);
    uint64_t v80 = OSSignposter.logHandle.getter(v79);
    uint64_t v81 = OSSignpostID.init(log:)(v80);
    uint64_t v82 = (os_log_s *)OSSignposter.logHandle.getter(v81);
    static os_signpost_type_t.begin.getter();
    if ((sub_1000470E0() & 1) != 0)
    {
      uint64_t v491 = *(void *)(v0 + 832);
      uint64_t v606 = *(void *)(v0 + 784);
      v612 = *(void (**)(void))(v606 + 16);
      v612();
      uint64_t v83 = v71;
      uint64_t v84 = (uint8_t *)sub_10000D524(12LL);
      uint64_t v599 = sub_10000D524(32LL);
      v615[0] = v599;
      LODWORD(v477) = v74;
      *(_DWORD *)uint64_t v84 = v422;
      sub_100043E98();
      sub_10004486C();
      *(void *)(v0 + 488) = sub_100038098(v83, v70, v615);
      sub_100044A2C(v562, (uint64_t)v592);
      sub_100043238(v70);
      sub_100043B50();
      sub_100043DA4();
      uint64_t v85 = sub_1000434B8();
      os_signpost_id_t v86 = OSSignpostID.rawValue.getter(v85);
      sub_100044BCC( (void *)&_mh_execute_header,  v82,  (os_signpost_type_t)v74,  v86,  "IndexType",  "type=%{signpost.description:attribute}s",  v84);
      sub_100043184(*(uint64_t (**)(uint64_t))(v606 + 8));
      sub_100046DF4();
      sub_10000F2F0(v599);
      sub_10000F2F0((uint64_t)v84);

      int64_t v87 = v612;
    }

    else
    {
      uint64_t v88 = *(void *)(v0 + 784);
      sub_100043DA4();
      sub_100043024();
      sub_1000434B8();

      int64_t v87 = *(void (**)(void))(v88 + 16);
    }

    *(void *)(v0 + 1088) = v87;
    uint64_t v611 = *(void *)(v0 + 1064);
    uint64_t v89 = *(void *)(v0 + 904);
    uint64_t v90 = *(void *)(v0 + 888);
    uint64_t v91 = *(void *)(v0 + 856);
    uint64_t v92 = *(void *)(v0 + 816);
    uint64_t v93 = *(void *)(v0 + 784);
    sub_100045D74();
    uint64_t v94 = sub_10000F694();
    sub_10000F4D8(v94);
    sub_10000F324();
    sub_10004314C(v89, v90, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v91 + 16));
    uint64_t v95 = sub_100047274();
    sub_100043434(v95, (uint64_t)"IndexType");
    uint64_t v96 = *(uint64_t (**)(uint64_t, uint64_t))(v93 + 8);
    *(void *)(v0 + 1096) = v96;
    sub_100043D10(v92, v96);
    uint64_t v97 = *(uint64_t (**)(uint64_t, uint64_t))(v91 + 8);
    *(void *)(v0 + 1104) = v97;
    uint64_t v5 = sub_100043380(v90, v97);
    if (v611)
    {
      uint64_t v98 = *(void *)(v0 + 600);
      sub_10004317C();
      uint64_t v4 = 0LL;
      goto LABEL_56;
    }
  }

  while (1)
  {
    sub_100045F58();

    unint64_t v36 = *(void *)(v0 + 1040);
    uint64_t v37 = *(void *)(v0 + 1032);
    uint64_t v38 = *(void *)(v0 + 984);
    if ((v38 & 0x8000000000000000LL) == 0) {
      break;
    }
    uint64_t v41 = sub_100046EB0();
    if (!v41) {
      goto LABEL_60;
    }
    uint64_t v42 = sub_1000476E0(v41);
    sub_10000E518(v42, &qword_100069E08, &OBJC_CLASS___WFAction_ptr);
    sub_10004537C();
    uint64_t v43 = sub_100047858();
    sub_100045064(v43, v44, (uint64_t)&type metadata for Swift.AnyObject + 8);
    id v45 = *v592;
    sub_1000431C0();
    int64_t v40 = v37;
    uint64_t v30 = v36;
LABEL_34:
    *(void *)(v0 + 1040) = v30;
    *(void *)(v0 + 1032) = v40;
    *(void *)(v0 + 1024) = v45;
    if (!v45) {
      goto LABEL_60;
    }
    uint64_t v52 = sub_100047038();
    uint64_t v13 = (void *)(v0 + 528);
    sub_100015E38(v52);
    id v54 = sub_100043854(v53, "parameters");
    uint64_t v55 = sub_10000E518(0LL, &qword_10006A3C0, &OBJC_CLASS___WFParameter_ptr);
    uint64_t v56 = sub_100013354(v55);
    sub_100045F78(v56);
    if ((unint64_t)v586 >> 62)
    {
      sub_10004317C();
      id v54 = (id)sub_100045A70();
      sub_100008D58();
    }

    else
    {
      sub_100045420();
    }

    *(void *)(v0 + 1056) = v54;
    if (v54)
    {
      if (*(void *)(v0 + 600) >> 62)
      {
        sub_10004317C();
        id v54 = (id)sub_100045A70();
        uint64_t v35 = sub_100008D58();
      }

      else
      {
        sub_100045420();
      }

      uint64_t v57 = 0LL;
      *(void *)(v0 + 1064) = v54;
      goto LABEL_44;
    }
  }

  if (v36)
  {
    uint64_t v30 = (v36 - 1) & v36;
    unint64_t v39 = __clz(__rbit64(v36)) | (v37 << 6);
    int64_t v40 = *(void *)(v0 + 1032);
LABEL_33:
    id v45 = sub_100045458(v38, v39);
    goto LABEL_34;
  }

  int64_t v46 = v37 + 1;
  if (__OFADD__(v37, 1LL)) {
    goto LABEL_96;
  }
  unint64_t v47 = *(void *)(v0 + 1000) + 64LL;
  if (v46 >= (uint64_t)(v47 >> 6))
  {
LABEL_60:
    uint64_t v38 = sub_100046E5C();
    goto LABEL_61;
  }

  uint64_t v48 = *(void *)(v0 + 992);
  int64_t v40 = v37 + 1;
  if (*(void *)(v48 + 8 * v46)) {
    goto LABEL_32;
  }
  int64_t v49 = v47 >> 6;
  int64_t v40 = v37 + 2;
  if (v37 + 2 >= v49) {
    goto LABEL_60;
  }
  if (*(void *)(v48 + 8 * v40)) {
    goto LABEL_32;
  }
  int64_t v40 = v37 + 3;
  if (v37 + 3 >= v49) {
    goto LABEL_60;
  }
  if (*(void *)(v48 + 8 * v40)) {
    goto LABEL_32;
  }
  int64_t v40 = v37 + 4;
  if (v37 + 4 >= v49) {
    goto LABEL_60;
  }
  if (*(void *)(v48 + 8 * v40))
  {
LABEL_32:
    sub_1000464D0();
    goto LABEL_33;
  }

  int64_t v50 = v37 + 5;
  while (v50 < v49)
  {
    if (*(void *)(v48 + 8 * v50++))
    {
      int64_t v40 = v50 - 1;
      goto LABEL_32;
    }
  }

LABEL_61:
  sub_10000E5A0(v38);
  uint64_t v106 = *v586;
  uint64_t v593 = *(void *)(*v586 + 16);
  if (!v593)
  {
LABEL_88:
    swift_bridgeObjectRelease(v106);
    uint64_t v228 = sub_100043454();
    uint64_t v519 = v230;
    uint64_t v532 = v229;
    uint64_t v544 = *(void *)(v0 + 832);
    uint64_t v555 = *(void *)(v0 + 824);
    uint64_t v565 = *(void *)(v0 + 816);
    uint64_t v574 = *(void *)(v0 + 808);
    uint64_t v582 = *(void *)(v0 + 800);
    uint64_t v589 = *(void *)(v0 + 792);
    uint64_t v594 = *(void *)(v0 + 768);
    uint64_t v597 = *(void *)(v0 + 744);
    sub_1000449B8(v228);
    sub_10000F338();
    sub_10000F4A0();
    sub_10000F484();
    sub_10000F3FC();
    sub_10000F41C();
    sub_10000F3F4();
    sub_10000F4EC();
    sub_10000F4A8();
    uint64_t v231 = sub_10000F404();
    uint64_t v239 = sub_100043EE8( v231,  v232,  v233,  v234,  v235,  v236,  v237,  v238,  v311,  v325,  v339,  *((uint64_t *)&v339 + 1),  v366,  v380,  (uint64_t)v394,  v408,  v422,  *((uint64_t *)&v422 + 1),  v449,  v463,  v477,  v491,  v504,  v519);
    uint64_t v247 = sub_100043F40( v239,  v240,  v241,  v242,  v243,  v244,  v245,  v246,  v316,  v330,  v344,  v357,  v371,  v385,  v399,  v413,  v427,  v440,  v454,  v468,  v482,  v495,  v507,  v520,  v532);
    uint64_t v255 = sub_1000436F0( v247,  v248,  v249,  v250,  v251,  v252,  v253,  v254,  v317,  v331,  v345,  v358,  v372,  v386,  v400,  v414,  v428,  v441,  v455,  v469,  v483,  v496,  v508,  v521,  v533,  v544);
    uint64_t v263 = sub_1000436E8( v255,  v256,  v257,  v258,  v259,  v260,  v261,  v262,  v318,  v332,  v346,  v359,  v373,  v387,  v401,  v415,  v429,  v442,  v456,  v470,  v484,  v497,  v509,  v522,  v534,  v545,  v555);
    uint64_t v271 = sub_1000436C4( v263,  v264,  v265,  v266,  v267,  v268,  v269,  v270,  v319,  v333,  v347,  v360,  v374,  v388,  v402,  v416,  v430,  v443,  v457,  v471,  v485,  v498,  v510,  v523,  v535,  v546,  v556,  v565);
    uint64_t v279 = sub_100043624( v271,  v272,  v273,  v274,  v275,  v276,  v277,  v278,  v320,  v334,  v348,  v361,  v375,  v389,  v403,  v417,  v431,  v444,  v458,  v472,  v486,  v499,  v511,  v524,  v536,  v547,  v557,  v566,  v574);
    uint64_t v287 = sub_100043658( v279,  v280,  v281,  v282,  v283,  v284,  v285,  v286,  v321,  v335,  v349,  v362,  v376,  v390,  v404,  v418,  v432,  v445,  v459,  v473,  v487,  v500,  v512,  v525,  v537,  v548,  v558,  v567,  v575,  v582);
    uint64_t v295 = sub_100043660( v287,  v288,  v289,  v290,  v291,  v292,  v293,  v294,  v322,  v336,  v350,  v363,  v377,  v391,  v405,  v419,  v433,  v446,  v460,  v474,  v488,  v501,  v513,  v526,  v538,  v549,  v559,  v568,  v576,  v583,  v589);
    uint64_t v303 = sub_10004361C( v295,  v296,  v297,  v298,  v299,  v300,  v301,  v302,  v323,  v337,  v351,  v364,  v378,  v392,  v406,  v420,  v434,  v447,  v461,  v475,  v489,  v502,  v514,  v527,  v539,  v550,  v560,  v569,  v577,  v584,  v590,  v594);
    sub_100043614( v303,  v304,  v305,  v306,  v307,  v308,  v309,  v310,  v324,  v338,  v352,  v365,  v379,  v393,  v407,  v421,  v435,  v448,  v462,  v476,  v490,  v503,  v515,  v528,  v540,  v551,  v561,  v570,  v578,  v585,  v591,  v595,  v597);
    sub_1000442E4();
    sub_1000442DC();
    sub_100044D4C();
    sub_100044C9C();
    sub_100044948();
    sub_1000448DC();
    sub_100044FDC();
    sub_100045DD8();
    sub_100045DD0();
    sub_100044658(*(uint64_t (**)(void))(v0 + 8));
    return;
  }

  unint64_t v107 = 0LL;
  uint64_t v587 = v106 + 32;
  uint64_t v325 = *(void *)(v0 + 720);
  uint64_t v579 = WFLogCategoryToolKit;
  uint64_t v491 = WFLogCategoryToolKitIndexing;
  HIDWORD(v380) = enum case for OSSignpostError.doubleEnd(_:);
  uint64_t v394 = (char *)&type metadata for Any + 8;
  *(void *)&__int128 v105 = 136315394LL;
  __int128 v339 = v105;
  sub_100047590();
  while (v107 < *(void *)(v106 + 16))
  {
    unint64_t v603 = v107;
    sub_100046F64( v106,  v108,  v109,  v110,  v111,  v112,  v113,  v114,  v311,  v325,  v339,  *((uint64_t *)&v339 + 1),  v366,  v380,  (uint64_t)v394,  v408,  v422,  *((uint64_t *)&v422 + 1),  v449,  v463,  v477,  v491,  v504,  v516,  (uint64_t)v529,  v541,  (uint64_t)v552,  v562,  v571,  v579,  v587);
    uint64_t v115 = sub_10000844C(&qword_10006A108);
    uint64_t v123 = (uint8_t *)sub_10004767C( v115,  v116,  v117,  v118,  v119,  v120,  v121,  v122,  v312,  v326,  v340,  v353,  v367,  v381,  v395,  v409,  v423,  v436,  v450,  v464,  v478,  v492,  v505,  v517,  v530,  v542,  v553,  v563,  v572,  v580,  v588,  v593,  v596);
    uint64_t v125 = v124;
    uint64_t v126 = sub_100042644((uint64_t)&unk_1000667C8, 32LL);
    *(void *)(v126 + 16) = v123;
    *(void *)(v126 + 24) = v125;
    uint64_t v127 = sub_100042644((uint64_t)&unk_1000667F0, 17LL);
    sub_100044FF4(v127);
    uint64_t v128 = sub_100042644((uint64_t)&unk_100066818, 17LL);
    sub_100047120(v128);
    uint64_t v129 = sub_100042644((uint64_t)&unk_100066840, 32LL);
    *(void *)(v129 + 16) = sub_1000421E0;
    *(void *)(v129 + 24) = v126;
    uint64_t v130 = sub_10000844C((uint64_t *)&unk_10006A360);
    uint64_t v131 = (__n128 *)swift_initStackObject(v130, v0 + 176);
    sub_1000472E0(v131);
    v132[4] = sub_1000421D8;
    v132[5] = v127;
    v132[6] = sub_1000421D8;
    v132[7] = v128;
    v132[8] = sub_100042184;
    v132[9] = v129;
    sub_1000443C8();
    uint64_t v133 = sub_1000442F4();
    uint64_t v141 = sub_100045DFC( v133,  v134,  v135,  v136,  v137,  v138,  v139,  v140,  v313,  v327,  v341,  v354,  v368,  v382,  v396,  v410,  v424,  v437,  v451,  v465,  v479,  v493,  v506,  v518,  v531,  v543,  v554,  v564,  v573,  v581);
    uint64_t v142 = OSSignposter.logHandle.getter(v141);
    uint64_t v143 = OSSignpostID.init(log:)(v142);
    uint64_t v144 = (os_log_s *)OSSignposter.logHandle.getter(v143);
    int v145 = static os_signpost_type_t.begin.getter();
    if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
    {
      sub_1000470CC();
      uint64_t v613 = v146;
      sub_10004632C(*(uint64_t (**)(void))(v146 + 16));
      LODWORD(v552) = v145;
      uint64_t v147 = (uint64_t)v123;
      uint64_t v123 = (uint8_t *)sub_10000D524(12LL);
      uint64_t v600 = sub_10000D524(32LL);
      v615[0] = v600;
      *(_DWORD *)uint64_t v123 = v422;
      uint64_t v128 = (uint64_t)(v123 + 12);
      sub_1000443C8();
      sub_100044AFC();
      *(void *)(v0 + 400) = sub_10004681C(v147, v148, v615);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v408, v529);
      sub_100043238(v125);
      sub_100043C48();
      sub_100043DD0();
      uint64_t v149 = sub_100043B50();
      os_signpost_id_t v150 = OSSignpostID.rawValue.getter(v149);
      sub_100044BCC( (void *)&_mh_execute_header,  v144,  (os_signpost_type_t)v552,  v150,  "IndexType",  "type=%{signpost.description:attribute}s",  v123);
      sub_100046480(v613);
      sub_100046E04();
      sub_10000F2F0(v600);
      sub_10000F2F0((uint64_t)v123);
    }

    else
    {
      sub_100043DD0();
      sub_100043D74();
      sub_100043B50();
    }

    sub_10004591C();
    uint64_t v151 = *(void *)(v0 + 776);
    unint64_t v607 = *(void *)(v0 + 600);
    uint64_t v152 = *(void *)(v0 + 584);
    uint64_t v153 = sub_100046E14();
    v154(v153);
    uint64_t v155 = sub_10000F694();
    sub_10000F4D8(v155);
    sub_10000F324();
    sub_10000F538(v128, (uint64_t)v123, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v129 + 16));
    sub_100043434(v128, (uint64_t)"IndexType");
    sub_10004557C();
    uint64_t v156 = sub_1000443F4();
    v601 = v157;
    v157(v156);
    sub_100043D5C();
    uint64_t v158 = v152;
    uint64_t v159 = v0 + 504;
    uint64_t v160 = v609;
    uint64_t v161 = sub_10001F388(v607, v158, (void *)v614);
    if (v609)
    {
      uint64_t v169 = *(os_log_s **)(v0 + 648);
      sub_100047444( (uint64_t)v161,  v162,  v163,  v164,  v165,  v166,  v167,  v168,  v311,  v325,  v339,  *((uint64_t *)&v339 + 1),  v366,  v380,  (uint64_t)v394,  v408,  v422,  *((uint64_t *)&v422 + 1),  v449,  v463,  v477,  v491);
      sub_100043D64();
      uint64_t v170 = sub_100043D64();
      Logger.logObject.getter(v170);
      os_log_type_t v171 = sub_100045978();
      BOOL v172 = sub_1000450D4(v171);
      uint64_t v173 = *(void *)(v0 + 640);
      uint64_t v174 = *(void *)(v0 + 632);
      if (v172)
      {
        uint64_t v610 = *(void *)(v0 + 648);
        uint64_t v175 = sub_10000D524(22LL);
        uint64_t v144 = (os_log_s *)sub_10000D524(8LL);
        uint64_t v608 = v174;
        uint64_t v176 = sub_10000D524(32LL);
        v615[0] = v176;
        *(_DWORD *)uint64_t v175 = v342;
        uint64_t v562 = v173;
        uint64_t v177 = sub_1000446C4(v614);
        uint64_t v179 = sub_100047090(v177, v178);
        uint64_t v186 = sub_100047260(v179, v180, v181, v175 + 12, v182, v183, v184, v185, v314, v328, v342, v355, v369);
        sub_100047450((uint64_t)v186, v187);
        sub_100043D74();
        *(_WORD *)(v175 + 12) = 2112;
        sub_100043D64();
        uint64_t v188 = sub_1000477E4();
        uint64_t *v529 = v188;
        uint64_t v159 = v0 + 504;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v529, v151);
        *(void *)uint64_t v144 = v188;
        sub_100043C28();
        sub_100043C28();
        sub_100043ADC( (void *)&_mh_execute_header,  v169,  (os_log_type_t)v123,  "Failed to index content item type %s: %@",  (uint8_t *)v175);
        sub_10000844C(&qword_10006A320);
        sub_100043668((uint64_t)v144);
        sub_10000F2F0((uint64_t)v144);
        sub_100043668(v176);
        sub_10000F2F0(v176);
        sub_10000F2F0(v175);

        (*(void (**)(uint64_t, uint64_t))(v562 + 8))(v610, v608);
      }

      else
      {
        sub_100043C28();
        sub_100043C28();

        uint64_t v192 = sub_100045A78();
        v194(v192, v193);
      }

      sub_100047240();
      sub_1000443A8();
      uint64_t v195 = sub_1000456E0();
      sub_1000467F4( v195,  v196,  v197,  v198,  v199,  v200,  v201,  v202,  v314,  v328,  v342,  v355,  (uint64_t)v369,  v383,  v397,  v411,  v425,  v438,  v452,  v466,  v480);
      v616._countAndFlagsBits = sub_1000446C4(v159);
      sub_1000472C0(v616);
      uint64_t v203 = sub_1000432F0();
      sub_1000467CC( v203,  v204,  v205,  v206,  v207,  v208,  v209,  v210,  v315,  v329,  v343,  v356,  v370,  v384,  v398,  v412,  v426,  v439,  v453,  v467,  v481,  v494,  v504,  v516);
      uint64_t v211 = sub_100045E84();
      sub_100043CBC(v211, v212);
      sub_1000132B8();
      sub_100043D74();
      sub_100043C48();
      uint64_t v191 = sub_100043C28();
    }

    else
    {
      uint64_t v189 = v161[2];
      if (v189)
      {
        sub_100045D34((uint64_t)v161);
        sub_10004724C();
        do
        {
          uint64_t v190 = sub_100044CA4();
          static IndexingLog.shared.getter(v190);
          sub_100046A18();
          sub_100013360();
          sub_10004385C(*(uint64_t (**)(uint64_t, uint64_t))(v129 + 8));
          v160 += v614;
          --v189;
        }

        while (v189);
        uint64_t v161 = 0LL;
      }

      uint64_t v191 = swift_bridgeObjectRelease(v161);
    }

    uint64_t v213 = *(void *)(v0 + 864);
    uint64_t v214 = WFLogSignpost.signposter.getter(v191);
    unint64_t v215 = WFLogSignpost.name.getter(v214);
    char v217 = v216;
    uint64_t v218 = WFLogSignpost.state.getter();
    uint64_t v219 = (os_log_s *)OSSignposter.logHandle.getter(v218);
    uint64_t v220 = sub_100045D88();
    static os_signpost_type_t.end.getter(v220);
    if ((sub_1000470E0() & 1) != 0)
    {
      if ((v217 & 1) != 0)
      {
        if (HIDWORD(v215)) {
          goto LABEL_94;
        }
        sub_1000474B8();
        if (v221) {
          goto LABEL_97;
        }
        sub_100046FF8();
        unint64_t v215 = v463;
        if (!v221 & v61) {
          goto LABEL_95;
        }
      }

      else if (!v215)
      {
        goto LABEL_93;
      }

      uint64_t v222 = *(void *)(v0 + 680);
      sub_100043FDC();
      sub_100045174();
      sub_1000434B8();
      unint64_t v223 = "[Error] Interval already ended";
      if (sub_10004798C(*(uint64_t (**)(uint64_t, uint64_t))(v222 + 88)) != HIDWORD(v380))
      {
        sub_100043820(*(void *)(v0 + 680));
        unint64_t v223 = "";
      }

      sub_100044FB4();
      uint64_t v224 = (_WORD *)sub_10000D524(2LL);
      os_signpost_id_t v225 = sub_1000442D0(v224);
      sub_1000441F0((void *)&_mh_execute_header, v219, (os_signpost_type_t)v213, v225, (const char *)v215, v223);
      sub_100045594();
      sub_10000F2F0((uint64_t)v144);
    }

    uint64_t v226 = v219;
    unint64_t v107 = v603;
    sub_100044908(v226);
    sub_1000434B8();
    sub_100045594();
    uint64_t v227 = sub_1000443F4();
    v601(v227);
    sub_100043124(*(uint64_t (**)(uint64_t, uint64_t))(v151 + 8));
    uint64_t v609 = 0LL;
    uint64_t v106 = v571;
    if (v603 == v593) {
      goto LABEL_88;
    }
  }

  __break(1u);
LABEL_93:
  __break(1u);
LABEL_94:
  __break(1u);
LABEL_95:
  __break(1u);
LABEL_96:
  __break(1u);
LABEL_97:
  __break(1u);
LABEL_98:
  __break(1u);
LABEL_99:
  __break(1u);
LABEL_100:
  __break(1u);
LABEL_101:
  __break(1u);
LABEL_102:
  __break(1u);
LABEL_103:
  __break(1u);
LABEL_104:
  __break(1u);
}

void sub_10001B3F4()
{
  v683 = v0 + 46;
  uint64_t v1 = (void *)v0[140];
  uint64_t v2 = (void *)v0[134];
  uint64_t v3 = (void *)v0[128];
  static WFLog.subscript.getter(v0[127]);
  id v4 = v2;
  id v5 = v3;
  sub_100046E54();
  id v6 = v1;
  id v7 = v4;
  id v8 = v5;
  sub_100046E54();
  id v9 = v6;
  char v10 = (os_log_s *)sub_1000462D8();
  os_log_type_t v11 = static os_log_type_t.error.getter();
  uint64_t v653 = (uint64_t)(v0 + 61);
  if (os_log_type_enabled(v10, v11))
  {
    v625 = (void *)v0[140];
    uint64_t v12 = (void *)v0[134];
    uint64_t v577 = (void *)v0[128];
    uint64_t v669 = v0[80];
    uint64_t v675 = v0[79];
    uint64_t v678 = v0[82];
    uint64_t v635 = v0[78];
    uint64_t v644 = v0[77];
    uint64_t v659 = v0[76];
    uint64_t v13 = sub_10000D524(42LL);
    uint64_t v591 = (void *)sub_10000D524(16LL);
    uint64_t v667 = sub_10000D524(64LL);
    v687[0] = v667;
    *(_DWORD *)uint64_t v13 = 138413058;
    os_log_type_t typea = v11;
    v0[57] = v12;
    id v14 = v12;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 57, v0 + 58);
    *uint64_t v591 = v12;

    *(_WORD *)(v13 + 12) = 2080;
    id v16 = sub_10004341C(v15, "identifier");
    sub_100046014((uint64_t)v16);
    sub_100045FBC();
    v0[58] = sub_100038098((uint64_t)v14, (unint64_t)(v0 + 57), v687);
    sub_10004775C((uint64_t)(v0 + 58), (uint64_t)(v0 + 59));
    sub_1000466D8();

    *(_WORD *)(v13 + 22) = 2112;
    sub_100045DE0();
    uint64_t v17 = sub_1000473DC();
    v0[59] = v17;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 59, v0 + 60);
    v591[1] = v17;
    sub_1000449B0();
    uint64_t v18 = sub_1000449B0();
    *(_WORD *)(v13 + 32) = 2080;
    id v19 = sub_100046088(v18, "locale");
    static Locale._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v20 = Locale.identifier.getter();
    (*(void (**)(uint64_t, uint64_t))(v644 + 8))(v635, v659);
    v0[60] = sub_100044874(v20, v21, v687);
    sub_100045474((uint64_t)(v0 + 60), v653);
    sub_10004316C();

    uint64_t v22 = v10;
    _os_log_impl( (void *)&_mh_execute_header,  v10,  typea,  "Failed to index parameter type: %@ in %s: %@ for locale: %s",  (uint8_t *)v13,  0x2Au);
    sub_10000844C(&qword_10006A320);
    sub_1000442BC((uint64_t)v591);
    sub_10000F2F0((uint64_t)v591);
    sub_1000442BC(v667);
    sub_10000F2F0(v667);
    sub_10000F2F0(v13);

    (*(void (**)(uint64_t, uint64_t))(v669 + 8))(v678, v675);
  }

  else
  {
    uint64_t v22 = (os_log_s *)v0[142];
    uint64_t v23 = (void *)v0[140];
    os_signpost_id_t v24 = (void *)v0[134];
    uint64_t v25 = (void *)v0[128];

    sub_100047978();
    sub_100047978();

    uint64_t v26 = sub_100044180();
    v28(v26, v27);
  }

  uint64_t v29 = v0[142];
  unint64_t v30 = v0[140];
  uint64_t v670 = v0[77];
  uint64_t v679 = v0[74];
  uint64_t v604 = sub_100044AC0();
  uint64_t v31 = sub_100044DD4();
  uint64_t v32 = sub_100037C78(40LL);
  uint64_t v34 = sub_1000456E8(v32, v33);
  v0[46] = 0x6574656D61726170LL;
  v0[47] = 0xEA00000000002072LL;
  id v35 = sub_100046088(v34, "key");
  sub_100043918((uint64_t)v35);

  v688._countAndFlagsBits = sub_1000453BC();
  sub_1000476FC(v688);
  sub_1000132B8();
  sub_100047150(0x6974636120666F20LL, 28271LL);
  id v37 = sub_100043854(v36, "identifier");
  sub_100043918((uint64_t)v37);

  v689._countAndFlagsBits = sub_100045A78();
  sub_1000476FC(v689);
  sub_1000432F0();
  v38._countAndFlagsBits = 0x636F6C20726F6620LL;
  v38._object = (void *)0xED0000203A656C61LL;
  String.append(_:)(v38);
  id v40 = sub_10004550C(v39, "locale");
  static Locale._unconditionallyBridgeFromObjectiveC(_:)();

  Locale.identifier.getter();
  sub_100044D3C(*(uint64_t (**)(uint64_t))(v670 + 8));
  v690._countAndFlagsBits = sub_100046DA0();
  sub_1000476FC(v690);
  sub_100042E4C();
  uint64_t v41 = v0[46];
  swift_getErrorValue(v29, v0 + 54, v0 + 37);
  Error.localizedDescription.getter(v0[38], v0[39]);
  uint64_t v43 = v42;
  uint64_t v44 = sub_100045A78();
  IndexingLog.log(failedIndexOfTypeWithDescription:in:metadata:)(v44, v45, v679, v46, v43);

  sub_1000132B8();
  sub_1000432F0();
  sub_1000434B8();
  sub_100043C28();
  uint64_t v47 = v0[139] + 1LL;
  uint64_t v48 = v0[75];
  if (v47 != v0[133])
  {
LABEL_90:
    v0[139] = v47;
    if ((v48 & 0xC000000000000001LL) != 0) {
      uint64_t v350 = sub_100044E8C(v47);
    }
    else {
      uint64_t v350 = (uint64_t)sub_1000430AC(v48 + 8 * v47);
    }
    v0[140] = v350;
    uint64_t v351 = (void *)swift_task_alloc(dword_10006A0EC);
    v0[141] = v351;
    uint64_t v352 = sub_1000457C0(v351);
    sub_10004463C(v352, v353, v354, v355);
    return;
  }

  uint64_t v636 = (uint64_t)(v0 + 2);
  v668 = v0 + 22;
  uint64_t v626 = (uint64_t)(v0 + 48);
  uint64_t v519 = (uint64_t)(v0 + 53);
  uint64_t v563 = (uint64_t)(v0 + 55);
  uint64_t v578 = (uint64_t)(v0 + 40);
  uint64_t v445 = (char *)(v0 + 56);
  uint64_t v460 = (uint64_t)(v0 + 50);
  v592 = v0 + 51;
  uint64_t v415 = (uint64_t)(v0 + 52);
  v660 = (id *)(v0 + 62);
  uint64_t type = (uint64_t)(v0 + 64);
  uint64_t v686 = (uint64_t)(v0 + 63);
  v645 = v0 + 66;
  sub_100008D58();
  *((void *)&v49 + 1) = 6LL;
  *(void *)&__int128 v49 = 136315138LL;
  __int128 v475 = v49;
  v615 = (void (**)(uint64_t, uint64_t))((char *)&type metadata for Any + 8);
  while (1)
  {
    uint64_t v50 = sub_100045F94();
    WFLogSignpost.name.getter(v50);
    sub_10004603C();
    uint64_t v51 = (os_log_s *)sub_100046F34();
    uint64_t v52 = sub_100045D88();
    uint64_t v53 = static os_signpost_type_t.end.getter(v52);
    id v54 = v51;
    if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
    {
      if ((v41 & 1) != 0)
      {
        if (HIDWORD(v30)) {
          goto LABEL_104;
        }
        sub_1000474B8();
        if (v55) {
          goto LABEL_106;
        }
        sub_100046FF8();
        unint64_t v30 = (unint64_t)v445;
        if (!v55 & v56) {
          goto LABEL_105;
        }
      }

      else if (!v30)
      {
        goto LABEL_103;
      }

      int v57 = *((_DWORD *)v0 + 286);
      uint64_t v58 = v0[85];
      sub_100043FDC();
      sub_100045174();
      sub_1000434B8();
      uint64_t v59 = "[Error] Interval already ended";
      if (sub_100043124(*(uint64_t (**)(uint64_t, uint64_t))(v58 + 88)) != v57)
      {
        sub_100043820(v0[85]);
        uint64_t v59 = "";
      }

      uint64_t v60 = (void (*)(uint64_t))v0[137];
      id v54 = (os_log_s *)v0[104];
      sub_10000F538((uint64_t)v54, v0[101], (uint64_t (*)(uint64_t, uint64_t, uint64_t))v0[136]);
      char v61 = (uint8_t *)sub_10000D524(2LL);
      *(_WORD *)char v61 = 0;
      os_signpost_id_t v62 = OSSignpostID.rawValue.getter(v61);
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v51,  (os_signpost_type_t)v53,  v62,  (const char *)v30,  v59,  v61,  2u);
      uint64_t v63 = sub_100045ACC();
      v60(v63);
      sub_10000F2F0((uint64_t)v61);
    }

    uint64_t v64 = (void (*)(uint64_t))v0[137];
    sub_10004730C();
    v676 = v66;
    uint64_t v680 = v65;
    uint64_t v671 = v0[118];
    uint64_t v67 = v0[116];
    sub_100046FB8();

    sub_1000434B8();
    uint64_t v69 = sub_1000453BC();
    v64(v69);
    uint64_t v70 = sub_100045394();
    v676(v70);
    uint64_t v71 = sub_1000431A8(v671, *(uint64_t (**)(uint64_t, uint64_t))(v67 + 8));
    if (v683 == (void *)v680) {
      break;
    }
    uint64_t v90 = v0[135];
LABEL_47:
    uint64_t v91 = v0[131];
    if ((v91 & 0xC000000000000001LL) != 0)
    {
      uint64_t v92 = sub_100044EF8(v71, v91);
    }

    else
    {
      sub_100046C3C();
      if (v56) {
        goto LABEL_102;
      }
      uint64_t v92 = (uint64_t)sub_1000430AC(v93 + 8 * v90);
    }

    sub_100046B20(v92);
    v0[135] = v94;
    if (v95) {
      goto LABEL_101;
    }
    uint64_t v96 = v0[126];
    uint64_t v684 = v0[102];
    uint64_t v97 = sub_100043918((uint64_t)[(id)v0[128] identifier]);
    sub_100045CA8();
    v0[48] = v97;
    v0[49] = v31;
    v98._countAndFlagsBits = 35LL;
    v98._object = (void *)0xE100000000000000LL;
    String.append(_:)(v98);
    id v100 = sub_100043854(v99, "key");
    static String._unconditionallyBridgeFromObjectiveC(_:)(v100);

    sub_10004544C();
    sub_10004316C();
    uint64_t v101 = v0[48];
    uint64_t v31 = v0[49];
    uint64_t v102 = sub_100042644((uint64_t)&unk_100066868, 32LL);
    *(void *)(v102 + 16) = v101;
    *(void *)(v102 + 24) = v31;
    uint64_t v103 = sub_100042644((uint64_t)&unk_100066890, 17LL);
    sub_100044FF4(v103);
    uint64_t v104 = sub_100042644((uint64_t)&unk_1000668B8, 17LL);
    sub_100047120(v104);
    uint64_t v105 = sub_100042644((uint64_t)&unk_1000668E0, 32LL);
    *(void *)(v105 + 16) = sub_100041218;
    *(void *)(v105 + 24) = v102;
    uint64_t v106 = sub_10000844C((uint64_t *)&unk_10006A360);
    uint64_t inited = (__n128 *)swift_initStackObject(v106, v636);
    sub_1000472E0(inited);
    v108[4] = sub_1000421D8;
    v108[5] = v103;
    v108[6] = sub_1000421D8;
    v108[7] = v104;
    v108[8] = sub_100042184;
    v108[9] = v105;
    sub_1000443C8();
    sub_1000442F4();
    uint64_t v109 = sub_100047274();
    static WFLogSignpost.signposter(for:)(v109);
    uint64_t v110 = sub_100047088();
    uint64_t v111 = OSSignpostID.init(log:)(v110);
    unint64_t v30 = OSSignposter.logHandle.getter(v111);
    uint64_t v41 = static os_signpost_type_t.begin.getter();
    if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
    {
      uint64_t v549 = v0[104];
      sub_100045A00();
      uint64_t v96 = v101;
      uint64_t v112 = (uint8_t *)sub_10000D524(12LL);
      uint64_t v672 = sub_10000D524(32LL);
      v687[0] = v672;
      LODWORD(v534) = v41;
      sub_100046314( v672,  v113,  v114,  v115,  v116,  v117,  v118,  v119,  v356,  v371,  v386,  *((uint64_t *)&v386 + 1),  v415,  v430,  (uint64_t)v445,  v460,  v120);
      sub_1000443C8();
      sub_1000446A0();
      v0[61] = sub_10004681C(v96, v121, v687);
      sub_100044A2C(v653, (uint64_t)v660);
      sub_100043238(v31);
      sub_10000F69C();
      sub_100043DD0();
      uint64_t v122 = sub_100043678();
      os_signpost_id_t v123 = OSSignpostID.rawValue.getter(v122);
      sub_100044BCC( (void *)&_mh_execute_header,  (os_log_s *)v30,  (os_signpost_type_t)v41,  v123,  "IndexType",  "type=%{signpost.description:attribute}s",  v112);
      sub_100043184(*(uint64_t (**)(uint64_t))(v680 + 8));
      sub_100046DF4();
      sub_10000F2F0(v672);
      sub_10000F2F0((uint64_t)v112);

      uint64_t v124 = v684;
    }

    else
    {
      uint64_t v125 = v0[98];
      sub_100043DD0();
      sub_100043D74();
      sub_100043678();

      uint64_t v124 = *(void *)(v125 + 16);
    }

    v0[136] = v124;
    v683 = (void *)v0[133];
    sub_100045998();
    uint64_t v126 = v0[98];
    sub_100045D74();
    uint64_t v127 = sub_10000F694();
    sub_10000F4D8(v127);
    sub_10000F324();
    sub_10004314C(v96, v41, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v102 + 16));
    uint64_t v128 = sub_100047274();
    sub_100043434(v128, (uint64_t)"IndexType");
    uint64_t v129 = *(uint64_t (**)(uint64_t, uint64_t))(v126 + 8);
    v0[137] = v129;
    sub_100043D10(v31, v129);
    uint64_t v130 = *(uint64_t (**)(uint64_t, uint64_t))(v102 + 8);
    v0[138] = v130;
    sub_100043380(v41, v130);
    if (v683)
    {
      uint64_t v48 = v0[75];
      sub_10004317C();
      uint64_t v47 = 0LL;
      goto LABEL_90;
    }
  }

  while (1)
  {
    sub_100045F58();

    unint64_t v72 = v0[130];
    uint64_t v31 = v0[129];
    uint64_t v73 = v0[123];
    if ((v73 & 0x8000000000000000LL) == 0) {
      break;
    }
    uint64_t v76 = sub_100046EB0();
    if (!v76) {
      goto LABEL_58;
    }
    uint64_t v77 = sub_1000476E0(v76);
    sub_10000E518(v77, &qword_100069E08, &OBJC_CLASS___WFAction_ptr);
    sub_10004537C();
    sub_100045064((uint64_t)v660, v53, (uint64_t)&type metadata for Swift.AnyObject + 8);
    id v78 = *v660;
    sub_1000431C0();
    uint64_t v75 = v31;
    uint64_t v53 = v72;
LABEL_37:
    v0[130] = v53;
    v0[129] = v75;
    v0[128] = v78;
    if (!v78) {
      goto LABEL_58;
    }
    uint64_t v85 = sub_100047038();
    id v54 = (os_log_s *)(v0 + 66);
    sub_100015E38(v85);
    id v87 = sub_100043854(v86, "parameters");
    uint64_t v88 = sub_10000E518(0LL, &qword_10006A3C0, &OBJC_CLASS___WFParameter_ptr);
    uint64_t v89 = sub_100013354(v88);
    sub_100045F78(v89);
    if ((unint64_t)v645 >> 62)
    {
      sub_10004317C();
      id v87 = (id)sub_100045A70();
      sub_100008D58();
    }

    else
    {
      sub_100045420();
    }

    v0[132] = v87;
    if (v87)
    {
      if (v0[75] >> 62)
      {
        sub_10004317C();
        id v87 = (id)sub_100045A70();
        uint64_t v71 = sub_100008D58();
      }

      else
      {
        sub_100045420();
      }

      uint64_t v90 = 0LL;
      v0[133] = v87;
      goto LABEL_47;
    }
  }

  if (v72)
  {
    uint64_t v53 = (v72 - 1) & v72;
    unint64_t v74 = __clz(__rbit64(v72)) | (v31 << 6);
    uint64_t v75 = v0[129];
LABEL_36:
    id v78 = sub_100045458(v73, v74);
    goto LABEL_37;
  }

  uint64_t v79 = v31 + 1;
  if (__OFADD__(v31, 1LL)) {
    goto LABEL_99;
  }
  unint64_t v80 = v0[125] + 64LL;
  if (v79 >= (uint64_t)(v80 >> 6))
  {
LABEL_58:
    uint64_t v73 = sub_100046E5C();
    goto LABEL_59;
  }

  uint64_t v81 = v0[124];
  uint64_t v75 = v31 + 1;
  if (*(void *)(v81 + 8 * v79)) {
    goto LABEL_35;
  }
  int64_t v82 = v80 >> 6;
  uint64_t v75 = v31 + 2;
  if (v31 + 2 >= v82) {
    goto LABEL_58;
  }
  if (*(void *)(v81 + 8 * v75)) {
    goto LABEL_35;
  }
  uint64_t v75 = v31 + 3;
  if (v31 + 3 >= v82) {
    goto LABEL_58;
  }
  if (*(void *)(v81 + 8 * v75)) {
    goto LABEL_35;
  }
  uint64_t v75 = v31 + 4;
  if (v31 + 4 >= v82) {
    goto LABEL_58;
  }
  if (*(void *)(v81 + 8 * v75))
  {
LABEL_35:
    sub_1000464D0();
    goto LABEL_36;
  }

  uint64_t v83 = v31 + 5;
  while (v83 < v82)
  {
    if (*(void *)(v81 + 8 * v83++))
    {
      uint64_t v75 = v83 - 1;
      goto LABEL_35;
    }
  }

LABEL_59:
  sub_10000E5A0(v73);
  uint64_t v132 = *v645;
  uint64_t v661 = *(void *)(*v645 + 16);
  if (!v661)
  {
LABEL_87:
    swift_bridgeObjectRelease(v132);
    uint64_t v259 = sub_100043454();
    uint64_t v566 = v261;
    uint64_t v581 = v260;
    uint64_t v595 = v0[104];
    uint64_t v607 = v0[103];
    uint64_t v618 = v0[102];
    uint64_t v629 = v0[101];
    uint64_t v639 = v0[100];
    uint64_t v649 = v0[99];
    uint64_t v656 = v0[96];
    uint64_t v662 = v0[93];
    uint64_t typeb = v0[92];
    swift_task_dealloc(v259);
    sub_10000F338();
    sub_10000F4A0();
    sub_10000F484();
    sub_10000F3FC();
    sub_10000F41C();
    sub_10000F3F4();
    sub_10000F4EC();
    sub_10000F4A8();
    uint64_t v262 = sub_10000F404();
    uint64_t v270 = sub_100044584( v262,  v263,  v264,  v265,  v266,  v267,  v268,  v269,  v356,  v371,  v386,  *((uint64_t *)&v386 + 1),  v415,  v430,  (uint64_t)v445,  v460,  v475,  *((uint64_t *)&v475 + 1),  v504,  v519,  v534,  v549,  v566);
    uint64_t v278 = sub_100043EE8( v270,  v271,  v272,  v273,  v274,  v275,  v276,  v277,  v361,  v376,  v391,  v405,  v420,  v435,  v450,  v465,  v480,  v494,  v509,  v524,  v539,  v553,  v567,  v581);
    uint64_t v286 = sub_100043F40( v278,  v279,  v280,  v281,  v282,  v283,  v284,  v285,  v362,  v377,  v392,  v406,  v421,  v436,  v451,  v466,  v481,  v495,  v510,  v525,  v540,  v554,  v568,  v582,  v595);
    uint64_t v294 = sub_1000436F0( v286,  v287,  v288,  v289,  v290,  v291,  v292,  v293,  v363,  v378,  v393,  v407,  v422,  v437,  v452,  v467,  v482,  v496,  v511,  v526,  v541,  v555,  v569,  v583,  v596,  v607);
    uint64_t v302 = sub_1000436E8( v294,  v295,  v296,  v297,  v298,  v299,  v300,  v301,  v364,  v379,  v394,  v408,  v423,  v438,  v453,  v468,  v483,  v497,  v512,  v527,  v542,  v556,  v570,  v584,  v597,  v608,  v618);
    uint64_t v310 = sub_1000436C4( v302,  v303,  v304,  v305,  v306,  v307,  v308,  v309,  v365,  v380,  v395,  v409,  v424,  v439,  v454,  v469,  v484,  v498,  v513,  v528,  v543,  v557,  v571,  v585,  v598,  v609,  v619,  v629);
    uint64_t v318 = sub_100043624( v310,  v311,  v312,  v313,  v314,  v315,  v316,  v317,  v366,  v381,  v396,  v410,  v425,  v440,  v455,  v470,  v485,  v499,  v514,  v529,  v544,  v558,  v572,  v586,  v599,  v610,  v620,  v630,  v639);
    uint64_t v326 = sub_100043658( v318,  v319,  v320,  v321,  v322,  v323,  v324,  v325,  v367,  v382,  v397,  v411,  v426,  v441,  v456,  v471,  v486,  v500,  v515,  v530,  v545,  v559,  v573,  v587,  v600,  v611,  v621,  v631,  v640,  v649);
    uint64_t v334 = sub_100043660( v326,  v327,  v328,  v329,  v330,  v331,  v332,  v333,  v368,  v383,  v398,  v412,  v427,  v442,  v457,  v472,  v487,  v501,  v516,  v531,  v546,  v560,  v574,  v588,  v601,  v612,  v622,  v632,  v641,  v650,  v656);
    uint64_t v342 = sub_10004361C( v334,  v335,  v336,  v337,  v338,  v339,  v340,  v341,  v369,  v384,  v399,  v413,  v428,  v443,  v458,  v473,  v488,  v502,  v517,  v532,  v547,  v561,  v575,  v589,  v602,  v613,  v623,  v633,  v642,  v651,  v657,  v662);
    sub_100043614( v342,  v343,  v344,  v345,  v346,  v347,  v348,  v349,  v370,  v385,  v400,  v414,  v429,  v444,  v459,  v474,  v489,  v503,  v518,  v533,  v548,  v562,  v576,  v590,  v603,  v614,  v624,  v634,  v643,  v652,  v658,  v663,  typeb);
    sub_1000442E4();
    sub_1000442DC();
    sub_100044C9C();
    sub_100044948();
    sub_1000448DC();
    sub_100044FDC();
    sub_100045DD8();
    sub_100045DD0();
    sub_100044658((uint64_t (*)(void))v0[1]);
    return;
  }

  unint64_t v133 = 0LL;
  uint64_t v654 = v132 + 32;
  uint64_t v371 = v0[90];
  uint64_t v646 = WFLogCategoryToolKit;
  uint64_t v549 = WFLogCategoryToolKitIndexing;
  HIDWORD(v430) = enum case for OSSignpostError.doubleEnd(_:);
  uint64_t v445 = (char *)&type metadata for Any + 8;
  *(void *)&__int128 v131 = 136315394LL;
  __int128 v386 = v131;
  sub_100047590();
  while (v133 < *(void *)(v132 + 16))
  {
    uint64_t v141 = v0[100];
    unint64_t v677 = v133;
    sub_100046F64( v132,  v134,  v135,  v136,  v137,  v138,  v139,  v140,  v356,  v371,  v386,  *((uint64_t *)&v386 + 1),  v415,  v430,  (uint64_t)v445,  v460,  v475,  *((uint64_t *)&v475 + 1),  v504,  v519,  v534,  v549,  v563,  v578,  (uint64_t)v592,  v604,  (uint64_t)v615,  v626,  v636,  v646,  v654);
    uint64_t v142 = sub_10000844C(&qword_10006A108);
    uint64_t v150 = sub_10004767C( v142,  v143,  v144,  v145,  v146,  v147,  v148,  v149,  v357,  v372,  v387,  v401,  v416,  v431,  v446,  v461,  v476,  v490,  v505,  v520,  v535,  v550,  v564,  v579,  v593,  v605,  v616,  v627,  v637,  v647,  v655,  v661,  type);
    uint64_t v152 = v151;
    uint64_t v153 = sub_100042644((uint64_t)&unk_1000667C8, 32LL);
    *(void *)(v153 + 16) = v150;
    *(void *)(v153 + 24) = v152;
    uint64_t v154 = sub_100042644((uint64_t)&unk_1000667F0, 17LL);
    sub_100044FF4(v154);
    uint64_t v155 = (os_log_s *)sub_100042644((uint64_t)&unk_100066818, 17LL);
    sub_100047120((uint64_t)v155);
    uint64_t v156 = sub_100042644((uint64_t)&unk_100066840, 32LL);
    *(void *)(v156 + 16) = sub_1000421E0;
    *(void *)(v156 + 24) = v153;
    uint64_t v157 = sub_10000844C((uint64_t *)&unk_10006A360);
    uint64_t v158 = (__n128 *)swift_initStackObject(v157, v668);
    sub_1000472E0(v158);
    v159[4] = sub_1000421D8;
    v159[5] = v154;
    v159[6] = sub_1000421D8;
    v159[7] = v155;
    v159[8] = sub_100042184;
    v159[9] = v156;
    sub_1000443C0();
    uint64_t v160 = sub_1000446A0();
    uint64_t v168 = sub_100045DFC( v160,  v161,  v162,  v163,  v164,  v165,  v166,  v167,  v358,  v373,  v388,  v402,  v417,  v432,  v447,  v462,  v477,  v491,  v506,  v521,  v536,  v551,  v565,  v580,  v594,  v606,  v617,  v628,  v638,  v648);
    OSSignposter.logHandle.getter(v168);
    uint64_t v169 = sub_100047040();
    OSSignposter.logHandle.getter(v169);
    sub_100047710();
    if ((sub_100045C40() & 1) != 0)
    {
      sub_1000470CC();
      uint64_t v685 = v170;
      sub_10004632C(*(uint64_t (**)(void))(v170 + 16));
      uint64_t v171 = v150;
      BOOL v172 = (uint8_t *)sub_10000D524(12LL);
      uint64_t v673 = sub_10000D524(32LL);
      v687[0] = v673;
      LODWORD(v615) = v141;
      sub_100046314( v673,  v173,  v174,  v175,  v176,  v177,  v178,  v179,  v356,  v371,  v386,  *((uint64_t *)&v386 + 1),  v415,  v430,  (uint64_t)v445,  v460,  v180);
      sub_1000443C0();
      sub_10004486C();
      v0[50] = sub_100044874(v171, v181, v687);
      sub_100044A2C(v460, (uint64_t)v592);
      sub_100043238(v152);
      sub_100043B50();
      sub_10000F69C();
      uint64_t v182 = sub_100043868();
      os_signpost_id_t v183 = OSSignpostID.rawValue.getter(v182);
      uint64_t v184 = v0;
      sub_100044BCC( (void *)&_mh_execute_header,  v155,  (os_signpost_type_t)v141,  v183,  "IndexType",  "type=%{signpost.description:attribute}s",  v172);
      sub_100043184(*(uint64_t (**)(uint64_t))(v685 + 8));
      sub_100046E04();
      sub_10000F2F0(v673);
      sub_10000F2F0((uint64_t)v172);
    }

    else
    {
      sub_10000F69C();
      sub_10004316C();
      sub_100043868();

      uint64_t v184 = v0;
    }

    uint64_t v185 = v184[113];
    unint64_t v186 = v184[109];
    uint64_t v187 = v184[107];
    uint64_t v188 = v184[97];
    unint64_t v681 = v184[75];
    uint64_t v189 = v184[73];
    sub_100046E14();
    sub_10004632C(v190);
    uint64_t v191 = sub_10000F694();
    sub_10000F4D8(v191);
    sub_10000F324();
    sub_10000F538(v185, v186, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v187 + 16));
    sub_100043434(v185, (uint64_t)"IndexType");
    sub_10004557C();
    uint64_t v192 = sub_1000443F4();
    v674 = v193;
    v193(v192);
    sub_100043D5C();
    uint64_t v194 = v686;
    uint64_t v195 = sub_100047840(v681, v189);
    if (v189)
    {
      uint64_t v203 = (void *)v184[81];
      sub_100047444( (uint64_t)v195,  v196,  v197,  v198,  v199,  v200,  v201,  v202,  v356,  v371,  v386,  *((uint64_t *)&v386 + 1),  v415,  v430,  (uint64_t)v445,  v460,  v475,  *((uint64_t *)&v475 + 1),  v504,  v519,  v534,  v549);
      sub_100043D64();
      uint64_t v204 = sub_100043D64();
      Logger.logObject.getter(v204);
      os_log_type_t v205 = sub_100045978();
      BOOL v206 = sub_100043F30(v205);
      uint64_t v187 = v184[81];
      uint64_t v207 = (void (**)(uint64_t, uint64_t))v184[80];
      unint64_t v186 = v184[79];
      uint64_t v0 = v184;
      if (v206)
      {
        uint64_t v682 = v184[79];
        unint64_t v186 = sub_10000D524(22LL);
        uint64_t v626 = v187;
        uint64_t v187 = sub_10000D524(8LL);
        v615 = v207;
        uint64_t v208 = sub_10000D524(32LL);
        v687[0] = v208;
        *(_DWORD *)unint64_t v186 = v389;
        uint64_t v209 = sub_1000446C4(v686);
        uint64_t v211 = sub_100047090(v209, v210);
        uint64_t v218 = sub_100047260(v211, v212, v213, v186 + 12, v214, v215, v216, v217, v359, v374, v389, v403, v418);
        sub_1000466E8((uint64_t)v218, v219);
        sub_100043908();
        *(_WORD *)(v186 + 12) = 2112;
        sub_100043D64();
        uint64_t v220 = sub_1000477E4();
        uint64_t *v592 = v220;
        sub_1000466E8((uint64_t)v592, v188);
        *(void *)uint64_t v187 = v220;
        uint64_t v194 = v686;
        sub_100043C28();
        sub_100043C28();
        sub_100045FC8();
        sub_100043ADC(v221, v222, v223, "Failed to index content item type %s: %@", (uint8_t *)v186);
        sub_10000844C(&qword_10006A320);
        sub_100043668(v187);
        sub_10000F2F0(v187);
        sub_100043668(v208);
        sub_10000F2F0(v208);
        sub_10000F2F0(v186);

        v615[1](v626, v682);
      }

      else
      {
        sub_100043C28();
        sub_100043C28();

        uint64_t v227 = sub_100044B04();
        v229(v227, v228);
      }

      sub_100047240();
      sub_1000443A8();
      uint64_t v230 = sub_1000456E0();
      sub_1000467F4( v230,  v231,  v232,  v233,  v234,  v235,  v236,  v237,  v359,  v374,  v389,  v403,  (uint64_t)v418,  v433,  v448,  v463,  v478,  v492,  v507,  v522,  v537);
      v691._countAndFlagsBits = sub_1000446C4(v194);
      sub_1000472C0(v691);
      uint64_t v238 = sub_1000432F0();
      sub_1000467CC( v238,  v239,  v240,  v241,  v242,  v243,  v244,  v245,  v360,  v375,  v390,  v404,  v419,  v434,  v449,  v464,  v479,  v493,  v508,  v523,  v538,  v552,  v563,  v578);
      uint64_t v246 = sub_100045E84();
      sub_100043CBC(v246, v247);
      sub_1000132B8();
      sub_100043D74();
      sub_100043C48();
      uint64_t v226 = sub_100043C28();
    }

    else
    {
      uint64_t v224 = v195[2];
      if (v224)
      {
        sub_100045D34((uint64_t)v195);
        uint64_t v0 = v184;
        sub_10004724C();
        do
        {
          uint64_t v225 = sub_100044CA4();
          static IndexingLog.shared.getter(v225);
          sub_100046A18();
          sub_100013360();
          sub_10004385C(*(uint64_t (**)(uint64_t, uint64_t))(v187 + 8));
          v189 += v686;
          --v224;
        }

        while (v224);
        uint64_t v226 = sub_100044BA4();
      }

      else
      {
        uint64_t v226 = swift_bridgeObjectRelease(v195);
        uint64_t v0 = v184;
      }
    }

    uint64_t v248 = WFLogSignpost.signposter.getter(v226);
    WFLogSignpost.name.getter(v248);
    uint64_t v249 = sub_10004603C();
    uint64_t v250 = (os_log_s *)OSSignposter.logHandle.getter(v249);
    uint64_t v251 = sub_100045D88();
    os_signpost_type_t v252 = static os_signpost_type_t.end.getter(v251);
    if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
    {
      if ((v187 & 1) != 0)
      {
        if (HIDWORD(v186)) {
          goto LABEL_97;
        }
        sub_1000474B8();
        if (v55) {
          goto LABEL_100;
        }
        sub_100046FF8();
        unint64_t v186 = v519;
        if (!v55 & v56) {
          goto LABEL_98;
        }
      }

      else if (!v186)
      {
        goto LABEL_96;
      }

      uint64_t v253 = v0[85];
      sub_100043FDC();
      sub_100045174();
      sub_1000434B8();
      uint64_t v254 = "[Error] Interval already ended";
      if (sub_100043124(*(uint64_t (**)(uint64_t, uint64_t))(v253 + 88)) != HIDWORD(v430))
      {
        sub_100043820(v0[85]);
        uint64_t v254 = "";
      }

      sub_100044FB4();
      uint64_t v255 = (_WORD *)sub_10000D524(2LL);
      os_signpost_id_t v256 = sub_1000442D0(v255);
      sub_1000441F0((void *)&_mh_execute_header, v250, v252, v256, (const char *)v186, v254);
      sub_100045594();
      sub_10000F2F0(v194);
    }

    uint64_t v257 = v250;
    unint64_t v133 = v677;
    sub_100044908(v257);
    sub_1000434B8();
    sub_100045594();
    uint64_t v258 = sub_1000443F4();
    v674(v258);
    sub_100043124(*(uint64_t (**)(uint64_t, uint64_t))(v188 + 8));
    uint64_t v132 = v636;
    if (v677 == v661) {
      goto LABEL_87;
    }
  }

  __break(1u);
LABEL_96:
  __break(1u);
LABEL_97:
  __break(1u);
LABEL_98:
  __break(1u);
LABEL_99:
  __break(1u);
LABEL_100:
  __break(1u);
LABEL_101:
  __break(1u);
LABEL_102:
  __break(1u);
LABEL_103:
  __break(1u);
LABEL_104:
  __break(1u);
LABEL_105:
  __break(1u);
LABEL_106:
  __break(1u);
LABEL_107:
  __break(1u);
}

uint64_t sub_10001C7E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v6[34] = a5;
  v6[35] = v5;
  v6[32] = a3;
  v6[33] = a4;
  v6[30] = a1;
  v6[31] = a2;
  uint64_t v7 = sub_100045FDC();
  v6[36] = v7;
  v6[37] = *(void *)(v7 - 8);
  v6[38] = sub_1000421E4();
  v6[39] = sub_1000421E4();
  v6[40] = sub_1000421E4();
  v6[41] = sub_1000421E4();
  v6[42] = sub_1000421E4();
  v6[43] = sub_1000421E4();
  v6[44] = sub_1000421E4();
  sub_10000F3A0();
  return sub_10000F2D0();
}

#error "10001CF10: call analysis failed (funcsize=611)"
uint64_t sub_10001D240()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  sub_10000F40C();
  uint64_t v2 = v0[55];
  v0[56] = v3;
  v0[57] = v1;
  swift_task_dealloc(v2);
  if (v1) {
    swift_bridgeObjectRelease(v0[54]);
  }
  sub_10000F3A0();
  return sub_10000F2E4();
}

#error "10001DC20: call analysis failed (funcsize=772)"
uint64_t sub_10001DF04( uint64_t a1,  uint64_t a2,  uint64_t a3,  uint64_t a4,  uint64_t a5,  uint64_t a6,  uint64_t a7,  uint64_t a8,  uint64_t a9,  uint64_t a10,  uint64_t a11,  uint64_t a12,  uint64_t a13,  uint64_t a14,  unint64_t a15,  uint64_t a16,  uint64_t a17,  uint64_t a18,  uint64_t a19,  uint64_t a20,  uint64_t a21,  uint64_t a22,  uint64_t a23,  uint64_t a24,  uint64_t a25,  uint64_t a26,  uint64_t a27,  uint64_t a28,  uint64_t a29,  uint64_t a30,  uint64_t a31,  void *a32,  uint64_t a33,  uint64_t a34)
{
  void *v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  id v41;
  id v42;
  uint64_t v43;
  os_log_type_t v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  id v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  os_log_s *v57;
  os_log_type_t v58;
  const char *v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  void (*v63)(uint64_t, uint64_t);
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  id v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char v71;
  uint64_t isUniquelyReferenced_nonNull_native;
  unint64_t v73;
  unint64_t v74;
  uint64_t v75;
  void *v76;
  uint64_t v77;
  uint64_t result;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  int64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  void *v90;
  id v91;
  uint64_t v92;
  uint64_t ObjectType;
  Swift::String v94;
  uint64_t v95;
  void *v96;
  int64_t v97;
  unint64_t v98;
  uint64_t v99;
  int64_t v100;
  int64_t v101;
  uint64_t *v103;
  uint64_t v104;
  uint64_t v105;
  void (*v106)(void *@<X8>);
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  _BYTE *v110;
  BOOL v111;
  uint64_t v112;
  unsigned __int8 *v113;
  unsigned __int8 v114;
  uint64_t *v115;
  unint64_t v116;
  char v117;
  uint64_t v118;
  uint64_t v119;
  Swift::Int v120;
  unint64_t v121;
  char v122;
  Swift::Bool v123;
  uint64_t v124;
  unint64_t v125;
  char v126;
  uint64_t v127;
  void *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  BOOL v133;
  uint64_t v134;
  void *v135;
  uint64_t *v136;
  os_log_s *v137;
  uint64_t v138;
  os_log_type_t v139;
  float *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  os_log_s *v146;
  uint64_t v147;
  uint64_t v148;
  void (*v149)(uint64_t, uint64_t);
  uint64_t v150;
  os_log_s *v151;
  os_log_type_t v152;
  float *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  os_log_s *v157;
  uint64_t v158;
  os_log_s *v159;
  os_log_type_t v160;
  BOOL v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  unint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  void *v174;
  uint64_t v175;
  uint64_t v176;
  char v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  void *v183;
  uint64_t v184;
  uint64_t v185;
  os_log_type_t v186;
  BOOL v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  unint64_t v191;
  uint64_t v192;
  uint64_t *v193;
  void (*v194)(uint64_t, uint64_t);
  __int16 v195;
  void *v196;
  os_log_s *v197;
  os_log_type_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  void (*v205)(uint64_t, uint64_t);
  void *v206;
  uint64_t v207;
  uint64_t v208;
  void *v209;
  uint64_t v210;
  void *v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t *v216;
  uint64_t v217;
  void *v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  sub_1000468F4();
  a33 = v35;
  a34 = v36;
  a32 = v34;
  id v37 = v34;
  Swift::String v38 = v34 + 7;
  uint64_t v218 = v34 + 21;
  uint64_t v39 = (void *)v34[50];
  id v40 = (void *)v34[38];
  static WFLog.subscript.getter(v34[48]);
  uint64_t v41 = v39;
  sub_100046E54();
  uint64_t v42 = v41;
  uint64_t v43 = sub_100046E54();
  Logger.logObject.getter(v43);
  uint64_t v44 = sub_100045978();
  uint64_t v45 = (uint64_t)&selRef_parameterKey;
  if (sub_100043ED8(v44))
  {
    uint64_t v46 = v34[57];
    uint64_t v47 = (void *)v34[50];
    unint64_t v210 = v34[37];
    a19 = v34[36];
    uint64_t v214 = v34[38];
    uint64_t v48 = sub_10000D524(22LL);
    BOOL v206 = (void *)sub_10000D524(8LL);
    uint64_t v208 = sub_10000D524(32LL);
    a23 = v208;
    *(_DWORD *)uint64_t v48 = 136315394;
    __int128 v49 = sub_10004550C(v208, "identifier");
    uint64_t v50 = static String._unconditionallyBridgeFromObjectiveC(_:)(v49);

    v34[23] = sub_100044874(v50, v51, &a23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v34 + 23, v34 + 24);

    sub_10004316C();
    *(_WORD *)(v48 + 12) = 2112;
    swift_errorRetain(v46);
    uint64_t v52 = _swift_stdlib_bridgeErrorToNSError(v46);
    v34[24] = v52;
    uint64_t v53 = sub_1000453BC();
    Swift::String v38 = v34 + 7;
    sub_100045D6C(v53, v54);
    char *v206 = v52;
    swift_errorRelease(v46);
    char v55 = v46;
    uint64_t v45 = 0x100069000LL;
    swift_errorRelease(v55);
    sub_100046B04();
    sub_100043ADC(v56, v57, v58, v59, (uint8_t *)v48);
    sub_10000844C(&qword_10006A320);
    sub_100043668((uint64_t)v206);
    sub_10000F2F0((uint64_t)v206);
    sub_100043668(v208);
    sub_10000F2F0(v208);
    sub_10000F2F0(v48);

    (*(void (**)(uint64_t, uint64_t))(v210 + 8))(v214, a19);
  }

  else
  {
    uint64_t v48 = v34[57];
    uint64_t v60 = (void *)v34[50];

    swift_errorRelease(v48);
    swift_errorRelease(v48);

    char v61 = sub_100044180();
    v63(v61, v62);
  }

  uint64_t v64 = v34[57];
  uint64_t v65 = v37[32];
  sub_100044AC0();
  uint64_t v66 = sub_100044DD4();
  uint64_t v67 = sub_10004416C(v66, *(const char **)(v45 + 528));
  id v68 = sub_100043918((uint64_t)v67);
  sub_100045CA8();
  swift_getErrorValue(v64, v218, v38);
  uint64_t v69 = Error.localizedDescription.getter(v37[8], v37[9]);
  IndexingLog.log(failedIndexOfToolWithDescription:in:metadata:)(v68, v48, v65, v69, v70);
  sub_100043B50();
  sub_100043D74();
  sub_1000132B8();
  swift_errorRetain(v64);
  uint64_t v71 = sub_1000460BC();
  uint64_t isUniquelyReferenced_nonNull_native = v37[49];
  if ((v71 & 1) != 0) {
    goto LABEL_5;
  }
  while (1)
  {
    sub_1000475F8(0LL, *(void *)(isUniquelyReferenced_nonNull_native + 16) + 1LL);
    uint64_t isUniquelyReferenced_nonNull_native = v201;
LABEL_5:
    unint64_t v74 = *(void *)(isUniquelyReferenced_nonNull_native + 16);
    uint64_t v73 = *(void *)(isUniquelyReferenced_nonNull_native + 24);
    if (v74 >= v73 >> 1)
    {
      sub_1000475F8(v73 > 1, v74 + 1);
      uint64_t isUniquelyReferenced_nonNull_native = v202;
    }

    uint64_t v75 = v37[57];
    uint64_t v76 = (void *)v37[50];
    *(void *)(isUniquelyReferenced_nonNull_native + 16) = v74 + 1;
    uint64_t v215 = isUniquelyReferenced_nonNull_native + 32;
    uint64_t v77 = isUniquelyReferenced_nonNull_native + 32 + 16 * v74;
    *(void *)uint64_t v77 = v75;
    *(_BYTE *)(v77 + 8) = 1;

    uint64_t result = sub_100047928();
    uint64_t v79 = v37[51];
    unint64_t v80 = v37[52];
    v37[49] = isUniquelyReferenced_nonNull_native;
    uint64_t v209 = v37;
    if ((v37[45] & 0x8000000000000000LL) != 0)
    {
      uint64_t v85 = __CocoaSet.Iterator.next()(result);
      if (!v85) {
        goto LABEL_30;
      }
      v37[29] = v85;
      uint64_t v86 = sub_1000132F0(v85, &qword_100069E08, &OBJC_CLASS___WFAction_ptr);
      sub_100045520();
      id v87 = sub_100045488();
      sub_1000452E4(v87, v88, v89, v86);
      uint64_t v84 = v37[28];
      uint64_t v83 = sub_1000431C0();
      int64_t v82 = v79;
      uint64_t v75 = v80;
      goto LABEL_13;
    }

    if (!v80) {
      break;
    }
    sub_100047610();
    int64_t v82 = v79;
LABEL_10:
    uint64_t v83 = (uint64_t)sub_1000475EC(v81);
    uint64_t v84 = v83;
LABEL_13:
    uint64_t v90 = v37;
    v37[51] = v82;
    v37[52] = v75;
    v37[50] = v84;
    if (v84)
    {
      uint64_t v91 = sub_100043854(v83, *(const char **)(v45 + 528));
      uint64_t v92 = sub_100043918((uint64_t)v91);
      sub_100046558();
      v37[16] = v92;
      v37[17] = v79;
      sub_100045D58();
      uint64_t ObjectType = swift_getObjectType(v84);
      v94._countAndFlagsBits = sub_1000446C4(ObjectType);
      String.append(_:)(v94);
      sub_100043174();
      char v95 = v37[17];
      v37[53] = v37[16];
      v37[54] = v95;
      uint64_t v96 = (void *)swift_task_alloc(dword_10006A35C);
      v37[55] = v96;
      *uint64_t v96 = v37;
      v96[1] = sub_10001D240;
      return sub_1000437C0(v84, v37[30], v37[33], v37[31], v37[34]);
    }

LABEL_57:
        if (++v108 == v104)
        {
          uint64_t v203 = (uint64_t)v106;
          sub_1000432F0();
          goto LABEL_60;
        }
      }
    }

    else
    {
      sub_1000432F0();
      uint64_t v203 = 0LL;
      id v37 = 0LL;
      unint64_t v107 = 0LL;
LABEL_60:
      uint64_t v204 = (uint64_t)v103;
      uint64_t v135 = (void *)(v105 + 152);
      uint64_t v136 = (uint64_t *)(v105 + 160);
      uint64_t v137 = *(os_log_s **)(v105 + 336);
      uint64_t v138 = sub_10000F568();
      Logger.logObject.getter(v138);
      uint64_t v139 = sub_100043BF0();
      if (sub_100043810(v139))
      {
        uint64_t v140 = (float *)sub_10000D524(12LL);
        sub_1000455B4(v140, 3.852e-34);
        *uint64_t v135 = v107;
        uint64_t v141 = sub_100046C54();
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v141, v142);
        sub_100043D54((void *)&_mh_execute_header, v137, (os_log_type_t)v75, "Indexed: %ld", (uint8_t *)v140);
        uint64_t v143 = (uint64_t)v140;
        uint64_t v105 = (uint64_t)v209;
        sub_10000F2F0(v143);
      }

      uint64_t v216 = v136;
      uint64_t v220 = v105 + 80;
      uint64_t v144 = *(void *)(v105 + 384);
      uint64_t v45 = v105;
      uint64_t v145 = *(void *)(v105 + 336);
      uint64_t v146 = *(os_log_s **)(v45 + 328);
      uint64_t v147 = *(void *)(v45 + 288);
      uint64_t isUniquelyReferenced_nonNull_native = *(void *)(v45 + 296);

      uint64_t v148 = v147;
      uint64_t v149 = *(void (**)(uint64_t, uint64_t))(isUniquelyReferenced_nonNull_native + 8);
      v149(v145, v148);
      uint64_t v150 = sub_100045A8C();
      uint64_t v151 = v146;
      Logger.logObject.getter(v150);
      uint64_t v152 = sub_100043BF0();
      if (sub_100043810(v152))
      {
        uint64_t isUniquelyReferenced_nonNull_native = 12LL;
        uint64_t v153 = (float *)sub_10000D524(12LL);
        sub_1000455B4(v153, 3.852e-34);
        *(void *)(v45 + 144) = v37;
        uint64_t v154 = sub_1000477EC();
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v154, v155);
        sub_100043D54((void *)&_mh_execute_header, v151, (os_log_type_t)v144, "Errored: %ld", (uint8_t *)v153);
        sub_10000F2F0((uint64_t)v153);
      }

      uint64_t v157 = *(os_log_s **)(v45 + 320);
      uint64_t v156 = *(void *)(v45 + 328);

      sub_100045EA4(v156);
      uint64_t v158 = sub_100045A8C();
      uint64_t v159 = v157;
      Logger.logObject.getter(v158);
      uint64_t v160 = sub_100043BF0();
      uint64_t v161 = sub_100045464(v160);
      uint64_t v162 = *(void *)(v45 + 320);
      uint64_t v163 = v45;
      uint64_t v164 = v204;
      os_log_type_t v205 = v149;
      if (v161)
      {
        uint64_t v212 = *(void *)(v45 + 288);
        a19 = *(void *)(v45 + 320);
        uint64_t v165 = v45 + 104;
        uint64_t v45 = sub_10000D524(12LL);
        uint64_t v166 = sub_10000D524(32LL);
        a23 = v166;
        *(_DWORD *)uint64_t v45 = 136315138;
        uint64_t isUniquelyReferenced_nonNull_native = v45 + 4;
        sub_100043154(v204, v165);
        uint64_t v167 = sub_1000408F4();
        uint64_t v168 = sub_1000436BC();
        uint64_t v169 = Dictionary.description.getter( v168,  &type metadata for ToolKitIndexer.IncompatibleActionReason,  &type metadata for UInt,  v167);
        uint64_t v171 = v170;
        sub_100043174();
        *uint64_t v216 = sub_100045950(v169, v172, &a23);
        uint64_t v163 = (uint64_t)v209;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v216, v218);
        uint64_t v173 = v171;
        uint64_t v149 = v205;
        uint64_t v164 = v204;
        swift_bridgeObjectRelease(v173);
        sub_100043D54((void *)&_mh_execute_header, v159, (os_log_type_t)v37, "Skipped: %s", (uint8_t *)v45);
        sub_100043668(v166);
        sub_10000F2F0(v166);
        sub_10000F2F0(v45);

        v205(a19, v212);
      }

      else
      {

        sub_1000449FC(v162);
      }

      sub_100043154(v164, v220);
      sub_100043B0C(*(void *)(v163 + 176));
      sub_100046368();
      if (v37)
      {
LABEL_68:
        sub_100044850();
        goto LABEL_87;
      }

      while (!__OFADD__(v174, 1LL))
      {
        sub_10004781C();
        if (v177 == v111) {
          goto LABEL_92;
        }
        if (!*(void *)(a15 + 8 * v176))
        {
          sub_100046048();
          if (v177 == v111) {
            goto LABEL_92;
          }
          sub_100047544();
          if (!v178)
          {
            sub_100046048();
            if (v177 == v111) {
              goto LABEL_92;
            }
            sub_100047544();
            if (!v179)
            {
              sub_10004781C();
              if (v177 == v111)
              {
LABEL_92:
                swift_release(a19);
                sub_100047354();
                sub_1000408E4(v203, 0LL);
                sub_10000F404();
                sub_10000F338();
                sub_10000F4A0();
                sub_10000F484();
                sub_10000F3FC();
                sub_10000F41C();
                sub_10000F3F4();
                return sub_1000437DC(*(uint64_t (**)(void))(v163 + 8));
              }

              if (!*(void *)(a15 + 8 * v180))
              {
                while (!__OFADD__(v180, 1LL))
                {
                  sub_100046048();
                  if (v177 == v111) {
                    goto LABEL_92;
                  }
                  __n128 v180 = v181 + 1;
                  if (*(void *)(a15 + 8 * v182)) {
                    goto LABEL_86;
                  }
                }

                goto LABEL_98;
              }
            }
          }
        }

LABEL_86:
        sub_1000447DC();
LABEL_87:
        os_signpost_id_t v183 = *(void **)(v163 + 384);
        uint64_t v184 = *(void *)(a19 + 48) + 24 * v175;
        uint64_t v185 = *(void *)v184;
        uint64_t v45 = *(unsigned __int8 *)(v184 + 16);
        uint64_t v217 = *(void *)(*(void *)(a19 + 56) + 8 * v175);
        sub_100044984(*(void *)v184);
        sub_1000450B8(v185);
        unint64_t v186 = sub_100043BF0();
        uint64_t v187 = sub_100043F30(v186);
        uint64_t v188 = *(void *)(v163 + 312);
        char v221 = *(void *)(v163 + 288);
        if (v187)
        {
          uint64_t v189 = sub_10000D524(22LL);
          uint64_t v213 = v188;
          uint64_t v190 = sub_10000D524(32LL);
          a23 = v190;
          *(_DWORD *)uint64_t v189 = a11;
          uint64_t v191 = sub_100045A48();
          sub_1000474D8();
          *(void *)(v189 + 4) = sub_100045950(v191, v192, v193);
          uint64_t v194 = v149;
          uint64_t v149 = v205;
          swift_bridgeObjectRelease(v194);
          sub_100045A18();
          *(_WORD *)(v189 + 12) = v195;
          *(void *)(v189 + 14) = v217;
          sub_100045FC8();
          sub_100043ADC(v196, v197, v198, "   %s: %lu", (uint8_t *)v189);
          sub_100045494();
          sub_10000F2F0(v190);
          uint64_t v199 = v189;
          uint64_t v163 = (uint64_t)v209;
          sub_10000F2F0(v199);

          uint64_t v200 = v213;
        }

        else
        {
          sub_1000453E4();
          uint64_t v200 = v188;
        }

        v149(v200, v221);
        uint64_t v174 = v218;
        if (v37) {
          goto LABEL_68;
        }
      }

LABEL_96:
      __break(1u);
    }

    __break(1u);
LABEL_98:
    __break(1u);
LABEL_99:
    __break(1u);
LABEL_100:
    __break(1u);
  }

  uint64_t v97 = v79 + 1;
  if (!__OFADD__(v79, 1LL))
  {
    uint64_t v90 = v37;
    Swift::String v98 = v37[47] + 64LL;
    uint64_t v99 = v37[46];
    int64_t v82 = v79 + 1;
    if (!*(void *)(v99 + 8 * v97))
    {
      id v100 = v98 >> 6;
      int64_t v82 = v79 + 2;
      if (v79 + 2 >= v100) {
        goto LABEL_30;
      }
      if (!*(void *)(v99 + 8 * v82))
      {
        int64_t v82 = v79 + 3;
        if (v79 + 3 >= v100) {
          goto LABEL_30;
        }
        if (!*(void *)(v99 + 8 * v82))
        {
          int64_t v82 = v79 + 4;
          if (v79 + 4 >= v100) {
            goto LABEL_30;
          }
          if (!*(void *)(v99 + 8 * v82))
          {
            uint64_t v101 = v79 + 5;
            while (v101 < v100)
            {
              if (*(void *)(v99 + 8 * v101++))
              {
                int64_t v82 = v101 - 1;
                goto LABEL_18;
              }
            }

    if ((v121 & 1) != 0) {
      goto LABEL_149;
    }
    uint64_t v129 = &v95[16 * v98];
    __int128 v131 = *(void *)v129;
    uint64_t v130 = *((void *)v129 + 1);
    uint64_t v109 = __OFSUB__(v130, v131);
    uint64_t v132 = v130 - v131;
    if (v109) {
      goto LABEL_151;
    }
    if (v132 < v120) {
      goto LABEL_113;
    }
LABEL_104:
    uint64_t v137 = v98 - 1;
    if (v98 - 1 >= v94)
    {
      __break(1u);
LABEL_140:
      __break(1u);
LABEL_141:
      __break(1u);
LABEL_142:
      __break(1u);
LABEL_143:
      __break(1u);
LABEL_144:
      __break(1u);
LABEL_145:
      __break(1u);
LABEL_146:
      __break(1u);
LABEL_147:
      __break(1u);
LABEL_148:
      __break(1u);
LABEL_149:
      __break(1u);
LABEL_150:
      __break(1u);
LABEL_151:
      __break(1u);
LABEL_152:
      __break(1u);
LABEL_153:
      __break(1u);
      goto LABEL_154;
    }

    if (!*v180) {
      goto LABEL_166;
    }
    uint64_t v138 = v25;
    uint64_t v139 = &v95[16 * v137];
    uint64_t v140 = *(void *)v139;
    uint64_t v141 = &v95[16 * v98];
    uint64_t v142 = *((void *)v141 + 1);
    uint64_t v143 = v170;
    sub_10003F4AC(*v180 + v181[9] * *(void *)v139, *v180 + v181[9] * *(void *)v141, *v180 + v181[9] * v142, v167);
    uint64_t v170 = v143;
    if (v143) {
      break;
    }
    if (v142 < v140) {
      goto LABEL_140;
    }
    if (v98 > *((void *)v138 + 2)) {
      goto LABEL_141;
    }
    *(void *)uint64_t v139 = v140;
    *(void *)&v95[16 * v137 + 8] = v142;
    uint64_t v144 = *((void *)v138 + 2);
    if (v98 >= v144) {
      goto LABEL_142;
    }
    uint64_t v94 = v144 - 1;
    memmove(&v95[16 * v98], v141 + 16, 16 * (v144 - 1 - v98));
    uint64_t v25 = v138;
    *((void *)v138 + 2) = v144 - 1;
    if (v144 <= 2) {
      goto LABEL_113;
    }
  }

  uint64_t v145 = v138;
LABEL_120:
  swift_bridgeObjectRelease(v145);
  if (v158 < -1)
  {
    __break(1u);
    goto LABEL_122;
  }

uint64_t sub_10001EB6C(void *a1, void *aBlock, void *a3)
{
  v3[2] = a1;
  v3[3] = a3;
  v3[4] = _Block_copy(aBlock);
  uint64_t v6 = dword_10006A12C;
  id v7 = a1;
  a3;
  id v8 = (void *)swift_task_alloc(v6);
  v3[5] = v8;
  *id v8 = v3;
  v8[1] = sub_10001EBE8;
  return ToolKitIndexer.reindex(request:)((uint64_t)v7);
}

uint64_t sub_10001EBE8()
{
  uint64_t v2 = *(void **)v1;
  id v9 = v2;
  id v4 = (void *)v2[2];
  uint64_t v3 = (void *)v2[3];
  sub_10004729C(&v9);
  swift_task_dealloc(v5);

  uint64_t v6 = v2[4];
  if (v0)
  {
    id v7 = (void *)_convertErrorToNSError(_:)(v0);
    sub_100047978();
    sub_100043380(v6, *(uint64_t (**)(uint64_t, uint64_t))(v6 + 16));
  }

  else
  {
    (*(void (**)(void, void))(v6 + 16))(v2[4], 0LL);
  }

  _Block_release((const void *)v2[4]);
  return (*(uint64_t (**)(void))(v1 + 8))();
}

void sub_10001EC80()
{
  uint64_t v61 = v0;
  uint64_t v54 = v1;
  uint64_t v2 = type metadata accessor for OSSignpostID(0LL);
  uint64_t v62 = *(void *)(v2 - 8);
  sub_100044D98();
  __chkstk_darwin(v3);
  sub_1000474A4();
  uint64_t v53 = v4;
  __chkstk_darwin(v5);
  id v7 = (char *)&v51 - v6;
  uint64_t v8 = type metadata accessor for OSSignposter(0LL);
  uint64_t v56 = *(void *)(v8 - 8);
  uint64_t v57 = v8;
  sub_100044D98();
  __chkstk_darwin(v9);
  sub_1000474A4();
  uint64_t v55 = v10;
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v51 - v12;
  uint64_t v14 = type metadata accessor for WFLogSignpost(0LL);
  uint64_t v59 = *(void *)(v14 - 8);
  uint64_t v60 = v14;
  sub_100044D98();
  __chkstk_darwin(v15);
  sub_100013318();
  uint64_t v18 = v17 - v16;
  uint64_t v19 = type metadata accessor for Logger(0LL);
  __chkstk_darwin(v19);
  sub_100013318();
  uint64_t v20 = static WFLog.subscript.getter(WFLogCategoryToolKitIndexing);
  uint64_t v21 = (os_log_s *)Logger.logObject.getter(v20);
  os_log_type_t v22 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v21, v22))
  {
    uint64_t v23 = (uint8_t *)sub_10000F2FC();
    uint64_t v52 = v7;
    uint64_t v24 = v18;
    uint64_t v25 = v2;
    uint64_t v26 = v23;
    *(_WORD *)uint64_t v23 = 0;
    _os_log_impl((void *)&_mh_execute_header, v21, v22, "Clearing database", v23, 2u);
    uint64_t v27 = (uint64_t)v26;
    uint64_t v2 = v25;
    uint64_t v18 = v24;
    id v7 = v52;
    sub_10000F2F0(v27);
  }

  uint64_t v28 = sub_100045ACC();
  v29(v28);
  uint64_t v30 = static WFLogSignpost.signposter(for:)(WFLogCategoryToolKit);
  uint64_t v31 = OSSignposter.logHandle.getter(v30);
  uint64_t v32 = OSSignpostID.init(log:)(v31);
  uint64_t v33 = (os_log_s *)OSSignposter.logHandle.getter(v32);
  os_signpost_type_t v34 = static os_signpost_type_t.begin.getter();
  char v35 = OS_os_log.signpostsEnabled.getter();
  uint64_t v58 = v18;
  if ((v35 & 1) != 0)
  {
    uint64_t v36 = v53;
    sub_10004715C(v53);
    id v37 = (uint8_t *)sub_10000F2FC();
    *(_WORD *)id v37 = 0;
    os_signpost_id_t v38 = OSSignpostID.rawValue.getter(v37);
    os_signpost_type_t v39 = v34;
    uint64_t v40 = v36;
    _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v33,  v39,  v38,  "DatabaseWipe",  "Clearing database prior to indexing",  v37,  2u);
    uint64_t v41 = sub_100047980();
    v42(v41);
    sub_10000F2F0((uint64_t)v37);
  }

  else
  {

    uint64_t v40 = v53;
  }

  uint64_t v43 = v54;
  sub_10004715C(v40);
  uint64_t v44 = type metadata accessor for OSSignpostIntervalState(0LL);
  swift_allocObject(v44, *(unsigned int *)(v44 + 48), *(unsigned __int16 *)(v44 + 52));
  uint64_t v45 = OSSignpostIntervalState.init(id:isOpen:)(v40, 1LL);
  uint64_t v47 = v55;
  uint64_t v46 = v56;
  uint64_t v48 = v57;
  (*(void (**)(uint64_t, char *, uint64_t))(v56 + 16))(v55, v13, v57);
  uint64_t v49 = v58;
  WFLogSignpost.init(_:_:_:)(v47, "DatabaseWipe", 12LL, 2LL, v45);
  (*(void (**)(char *, uint64_t))(v62 + 8))(v7, v2);
  uint64_t v50 = (*(uint64_t (**)(char *, uint64_t))(v46 + 8))(v13, v48);
  __chkstk_darwin(v50);
  *(&v51 - 2) = v43;
  ToolDatabase.Transaction.perform<A>(work:)(sub_1000403A4, &v51 - 4, (char *)&type metadata for () + 8);
  sub_1000204F0();
  (*(void (**)(uint64_t, uint64_t))(v59 + 8))(v49, v60);
  sub_100008D04();
}

void sub_10001EFF4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for ToolKitIndexingReason.Changeset(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (uint64_t *)((char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v4 + 16))(v6, a2, v3);
  int v7 = (*(uint64_t (**)(uint64_t *, uint64_t))(v4 + 88))(v6, v3);
  if (v7 == enum case for ToolKitIndexingReason.Changeset.partial(_:))
  {
    (*(void (**)(uint64_t *, uint64_t))(v4 + 96))(v6, v3);
    uint64_t v8 = *v6;
    uint64_t v9 = v6[1];
    swift_bridgeObjectRelease(v6[2]);
    uint64_t v10 = sub_10001F140(v9, v8);
    sub_10003DBDC(v10);
    v12._rawValue = v11;
    swift_bridgeObjectRelease(v10);
    ToolDatabase.Accessor.prune(bundleIdentifiers:)(v12);
    swift_release(v12._rawValue);
  }

  else if (v7 == enum case for ToolKitIndexingReason.Changeset.full(_:))
  {
    ToolDatabase.Accessor.recreate()();
  }

  else if (v7 != enum case for ToolKitIndexingReason.Changeset.none(_:))
  {
    (*(void (**)(uint64_t *, uint64_t))(v4 + 8))(v6, v3);
  }

uint64_t sub_10001F140(uint64_t result, uint64_t a2)
{
  uint64_t v2 = result;
  int64_t v3 = 0LL;
  uint64_t v18 = a2;
  uint64_t v4 = result + 56;
  uint64_t v5 = 1LL << *(_BYTE *)(result + 32);
  uint64_t v6 = -1LL;
  if (v5 < 64) {
    uint64_t v6 = ~(-1LL << v5);
  }
  unint64_t v7 = v6 & *(void *)(result + 56);
  int64_t v8 = (unint64_t)(v5 + 63) >> 6;
  if (!v7) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v9 = __clz(__rbit64(v7));
  v7 &= v7 - 1;
  for (unint64_t i = v9 | (v3 << 6); ; unint64_t i = __clz(__rbit64(v12)) + (v3 << 6))
  {
    uint64_t v14 = (uint64_t *)(*(void *)(v2 + 48) + 16 * i);
    uint64_t v15 = *v14;
    uint64_t v16 = v14[1];
    swift_bridgeObjectRetain(v16);
    sub_10003C084(v17, v15, v16);
    uint64_t result = swift_bridgeObjectRelease(v17[1]);
    if (v7) {
      goto LABEL_4;
    }
LABEL_5:
    int64_t v11 = v3 + 1;
    if (__OFADD__(v3, 1LL))
    {
      __break(1u);
      goto LABEL_25;
    }

    if (v11 >= v8) {
      goto LABEL_23;
    }
    unint64_t v12 = *(void *)(v4 + 8 * v11);
    ++v3;
    if (!v12)
    {
      int64_t v3 = v11 + 1;
      if (v11 + 1 >= v8) {
        goto LABEL_23;
      }
      unint64_t v12 = *(void *)(v4 + 8 * v3);
      if (!v12)
      {
        int64_t v3 = v11 + 2;
        if (v11 + 2 >= v8) {
          goto LABEL_23;
        }
        unint64_t v12 = *(void *)(v4 + 8 * v3);
        if (!v12)
        {
          int64_t v3 = v11 + 3;
          if (v11 + 3 >= v8) {
            goto LABEL_23;
          }
          unint64_t v12 = *(void *)(v4 + 8 * v3);
          if (!v12) {
            break;
          }
        }
      }
    }

id ToolKitIndexer.__allocating_init()()
{
  return [objc_allocWithZone(v0) init];
}

void ToolKitIndexer.init()()
{
}

id ToolKitIndexer.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ToolKitIndexer();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_10001F358(uint64_t a1, uint64_t a2)
{
  return a1;
}

void *sub_10001F388(unint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = v3;
  uint64_t v6 = a1;
  if (a1 >> 62) {
    goto LABEL_35;
  }
  uint64_t v7 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  swift_bridgeObjectRetain(a1);
  for (; v7; uint64_t v7 = _CocoaArrayWrapper.endIndex.getter(v33))
  {
    unint64_t v36 = v6 & 0xC000000000000001LL;
    int64_t v8 = _swiftEmptyArrayStorage;
    uint64_t v9 = 4LL;
    uint64_t v35 = v6;
    while (1)
    {
      id v10 = v36 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v9 - 4, v6) : *(id *)(v6 + 8 * v9);
      int64_t v11 = v10;
      uint64_t v12 = v9 - 3;
      if (__OFADD__(v9 - 4, 1LL)) {
        break;
      }
      uint64_t v13 = sub_10000F6D4(a3, v10);
      if (v4)
      {
        swift_release(a2);
        swift_bridgeObjectRelease(v8);
        swift_bridgeObjectRelease(v35);

        return v8;
      }

      uint64_t v14 = v13;

      uint64_t v15 = *(void *)(v14 + 16);
      uint64_t v16 = v8[2];
      uint64_t v6 = v16 + v15;
      if (__OFADD__(v16, v15)) {
        goto LABEL_31;
      }
      uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v8);
      if ((isUniquelyReferenced_nonNull_native & 1) == 0 || v6 > v8[3] >> 1)
      {
        if (v16 <= v6) {
          uint64_t v18 = v16 + v15;
        }
        else {
          uint64_t v18 = v16;
        }
        int64_t v8 = (void *)sub_100050A78(isUniquelyReferenced_nonNull_native, v18, 1LL, (uint64_t)v8);
      }

      if (*(void *)(v14 + 16))
      {
        uint64_t v19 = v8[2];
        uint64_t v6 = (v8[3] >> 1) - v19;
        uint64_t v20 = type metadata accessor for TypeIdentifier(0LL);
        if (v6 < v15) {
          goto LABEL_33;
        }
        uint64_t v21 = *(void *)(v20 - 8);
        unint64_t v22 = (*(unsigned __int8 *)(v21 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80);
        uint64_t v23 = *(void *)(v21 + 72);
        uint64_t v24 = (char *)v8 + v22 + v23 * v19;
        unint64_t v25 = v14 + v22;
        uint64_t v26 = v23 * v15;
        uint64_t v27 = &v24[v26];
        unint64_t v28 = v25 + v26;
        if (v25 < (unint64_t)v27 && (unint64_t)v24 < v28)
        {
          uint64_t result = (void *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
          __break(1u);
          return result;
        }

        swift_arrayInitWithCopy(v24);
        if (v15)
        {
          uint64_t v30 = v8[2];
          BOOL v31 = __OFADD__(v30, v15);
          uint64_t v32 = v30 + v15;
          if (v31) {
            goto LABEL_34;
          }
          v8[2] = v32;
        }
      }

      else if (v15)
      {
        goto LABEL_32;
      }

      swift_bridgeObjectRelease(v14);
      ++v9;
      uint64_t v6 = v35;
      if (v12 == v7)
      {
        swift_release(a2);
        swift_bridgeObjectRelease(v35);
        return v8;
      }
    }

    __break(1u);
LABEL_31:
    __break(1u);
LABEL_32:
    __break(1u);
LABEL_33:
    __break(1u);
LABEL_34:
    __break(1u);
LABEL_35:
    if (v6 < 0) {
      uint64_t v33 = v6;
    }
    else {
      uint64_t v33 = v6 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v6);
  }

  swift_release(a2);
  swift_bridgeObjectRelease(v6);
  return _swiftEmptyArrayStorage;
}

uint64_t sub_10001F608(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  swift_bridgeObjectRetain(a1);
  for (; v3; uint64_t v3 = _CocoaArrayWrapper.endIndex.getter(v34))
  {
    uint64_t v4 = _swiftEmptyArrayStorage;
    uint64_t v5 = 4LL;
    while (1)
    {
      id v6 = (a1 & 0xC000000000000001LL) != 0
         ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v5 - 4, a1)
         : *(id *)(a1 + 8 * v5);
      uint64_t v7 = v6;
      uint64_t v8 = v5 - 3;
      if (__OFADD__(v5 - 4, 1LL)) {
        break;
      }
      id v9 = [v6 actionIdentifier];
      uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
      uint64_t v12 = v11;

      uint64_t v13 = static SampleInvocationDefinition.definitions(from:typeName:parameterKey:)(a2, v10, v12, 0LL, 0LL);
      swift_bridgeObjectRelease(v12);
      uint64_t v14 = *(void *)(v13 + 16);
      uint64_t v15 = v4[2];
      uint64_t v16 = v15 + v14;
      if (__OFADD__(v15, v14)) {
        goto LABEL_29;
      }
      uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v4);
      if (!(_DWORD)isUniquelyReferenced_nonNull_native || v16 > v4[3] >> 1)
      {
        if (v15 <= v16) {
          uint64_t v18 = v15 + v14;
        }
        else {
          uint64_t v18 = v15;
        }
        uint64_t v4 = (void *)sub_100050CBC(isUniquelyReferenced_nonNull_native, v18, 1LL, (uint64_t)v4);
      }

      if (*(void *)(v13 + 16))
      {
        uint64_t v19 = v4[2];
        uint64_t v20 = (v4[3] >> 1) - v19;
        uint64_t v21 = type metadata accessor for SampleInvocationDefinition(0LL);
        if (v20 < v14) {
          goto LABEL_31;
        }
        uint64_t v22 = *(void *)(v21 - 8);
        unint64_t v23 = (*(unsigned __int8 *)(v22 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80);
        uint64_t v24 = *(void *)(v22 + 72);
        unint64_t v25 = (char *)v4 + v23 + v24 * v19;
        unint64_t v26 = v13 + v23;
        uint64_t v27 = v24 * v14;
        unint64_t v28 = &v25[v27];
        unint64_t v29 = v26 + v27;
        if (v26 < (unint64_t)v28 && (unint64_t)v25 < v29)
        {
          char v36 = 2;
          uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  v36,  1092LL,  0);
          __break(1u);
          return result;
        }

        swift_arrayInitWithCopy(v25);
        if (v14)
        {
          uint64_t v31 = v4[2];
          BOOL v32 = __OFADD__(v31, v14);
          uint64_t v33 = v31 + v14;
          if (v32) {
            goto LABEL_32;
          }
          v4[2] = v33;
        }
      }

      else if (v14)
      {
        goto LABEL_30;
      }

      swift_bridgeObjectRelease(v13);
      ++v5;
      if (v8 == v3) {
        goto LABEL_38;
      }
    }

    __break(1u);
LABEL_29:
    __break(1u);
LABEL_30:
    __break(1u);
LABEL_31:
    __break(1u);
LABEL_32:
    __break(1u);
LABEL_33:
    if (a1 < 0) {
      uint64_t v34 = a1;
    }
    else {
      uint64_t v34 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a1);
  }

  uint64_t v4 = _swiftEmptyArrayStorage;
LABEL_38:
  swift_bridgeObjectRelease(a2);
  swift_bridgeObjectRelease(a1);
  return (uint64_t)v4;
}

unint64_t sub_10001F880(uint64_t a1, uint64_t a2, char a3)
{
  if (a3)
  {
    if (a3 != 1) {
      __asm { BR              X9 }
    }

    _StringGuts.grow(_:)(27LL);
    sub_100045DA0(v3, v4, v5, v6, v7, v8, v9, v10, 0LL, 0xE000000000000000LL);
    unint64_t v11 = 0xD000000000000019LL;
  }

  else
  {
    _StringGuts.grow(_:)(30LL);
    sub_100045DA0(v12, v13, v14, v15, v16, v17, v18, v19, 0LL, 0xE000000000000000LL);
    unint64_t v11 = 0xD00000000000001CLL;
  }

  unint64_t v21 = v11;
  sub_10004544C();
  return v21;
}

void sub_10001F964()
{
}

void sub_10001F984()
{
}

void sub_10001F9A8()
{
}

uint64_t sub_10001F9CC(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  if (a4)
  {
    if (a4 != 1) {
      __asm { BR              X9 }
    }

    Swift::UInt v4 = 3LL;
  }

  else
  {
    Swift::UInt v4 = 2LL;
  }

  Hasher._combine(_:)(v4);
  sub_100046864();
  return String.hash(into:)(v5, v6, v7);
}

void sub_10001FA38()
{
}

uint64_t sub_10001FA68(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, char a6)
{
  if (!a3)
  {
    if (!a6) {
      goto LABEL_8;
    }
    return 0LL;
  }

  if (a3 != 1) {
    return ((uint64_t (*)(void))((char *)&loc_10001FAB0 + 4 * byte_1000598AA[a1]))();
  }
  if (a6 != 1) {
    return 0LL;
  }
LABEL_8:
  if (a1 == a4 && a2 == a5) {
    return 1LL;
  }
  else {
    return _stringCompareWithSmolCheck(_:_:expecting:)();
  }
}

void sub_10001FB3C(uint64_t a1, uint64_t a2, char a3)
{
}

void sub_10001FB80()
{
}

uint64_t sub_10001FB8C(uint64_t a1)
{
  return sub_10001F9CC(a1, *(void *)v1, *(void *)(v1 + 8), *(_BYTE *)(v1 + 16));
}

void sub_10001FB98(uint64_t a1, uint64_t a2)
{
  char v3 = *(_BYTE *)(v2 + 16);
  sub_100047204(a1, a2);
  sub_100046864();
  sub_10001F9CC(v4, v5, v6, v3);
  sub_100045CEC();
  sub_100044FE4();
}

unint64_t sub_10001FBD4()
{
  return sub_10001F880(*(void *)v0, *(void *)(v0 + 8), *(_BYTE *)(v0 + 16));
}

uint64_t sub_10001FBE0(uint64_t a1, uint64_t a2)
{
  return sub_10001FA68( *(void *)a1,  *(void *)(a1 + 8),  *(_BYTE *)(a1 + 16),  *(void *)a2,  *(void *)(a2 + 8),  *(_BYTE *)(a2 + 16));
}

uint64_t sub_10001FBFC(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = a3[2];
  if (!v3) {
    return 0LL;
  }
  if (a3[4] == a1 && a3[5] == a2) {
    return 1LL;
  }
  uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
  if ((result & 1) != 0) {
    return 1LL;
  }
  if (v3 == 1) {
    return 0LL;
  }
  uint64_t v9 = a3 + 7;
  for (uint64_t i = 1LL; ; ++i)
  {
    uint64_t v11 = i + 1;
    if (__OFADD__(i, 1LL)) {
      break;
    }
    BOOL v12 = *(v9 - 1) == a1 && *v9 == a2;
    if (v12 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
      return 1LL;
    }
    uint64_t result = 0LL;
    v9 += 2;
    if (v11 == v3) {
      return result;
    }
  }

  __break(1u);
  return result;
}

uint64_t sub_10001FCC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v6[29] = a5;
  v6[30] = v5;
  v6[27] = a3;
  v6[28] = a4;
  v6[25] = a1;
  v6[26] = a2;
  uint64_t v7 = type metadata accessor for OSSignpostID(0LL);
  v6[31] = v7;
  v6[32] = *(void *)(v7 - 8);
  v6[33] = sub_1000421E4();
  v6[34] = sub_1000421E4();
  uint64_t v8 = sub_1000477A0();
  v6[35] = v8;
  v6[36] = *(void *)(v8 - 8);
  v6[37] = sub_1000421E4();
  v6[38] = sub_1000421E4();
  uint64_t v9 = type metadata accessor for WFLogSignpost(0LL);
  v6[39] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v6[40] = v10;
  v6[41] = sub_100013328(v10);
  sub_10000F3A0();
  return sub_10000F2D0();
}

uint64_t sub_10001FD6C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint8_t *a10, void *a11, os_log_s *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, void *a30, uint64_t a31, uint64_t a32)
{
  a31 = v33;
  a32 = v34;
  a30 = v32;
  uint64_t v35 = v32;
  id v37 = (void *)v32[25];
  char v36 = (id *)(v32 + 25);
  uint64_t v38 = WFLogCategoryToolKit;
  uint64_t v39 = sub_100042644((uint64_t)&unk_1000663B8, 24LL);
  *(void *)(v39 + 16) = v37;
  uint64_t v40 = sub_100042644((uint64_t)&unk_1000663E0, 17LL);
  sub_100044FF4(v40);
  uint64_t v41 = sub_100042644((uint64_t)&unk_100066408, 17LL);
  sub_100047120(v41);
  uint64_t v42 = sub_100042644((uint64_t)&unk_100066430, 32LL);
  *(void *)(v42 + 16) = sub_100040980;
  *(void *)(v42 + 24) = v39;
  uint64_t v43 = sub_10000844C((uint64_t *)&unk_10006A360);
  uint64_t inited = swift_initStackObject(v43, v36 - 23);
  *(_OWORD *)(inited + 16) = xmmword_100059840;
  *(void *)(inited + 32) = sub_10004099C;
  *(void *)(inited + 40) = v40;
  *(void *)(inited + 48) = sub_1000421D8;
  *(void *)(inited + 56) = v41;
  *(void *)(inited + 64) = sub_1000409B4;
  *(void *)(inited + 72) = v42;
  id v45 = v37;
  sub_100043D5C();
  uint64_t v46 = static WFLogSignpost.signposter(for:)(v38);
  uint64_t v47 = OSSignposter.logHandle.getter(v46);
  uint64_t v48 = OSSignpostID.init(log:)(v47);
  uint64_t v49 = (os_log_s *)OSSignposter.logHandle.getter(v48);
  int v50 = static os_signpost_type_t.begin.getter();
  uint64_t v108 = v36;
  if ((sub_1000462D0() & 1) != 0)
  {
    a14 = v35[33];
    a16 = v35[31];
    a17 = v35[32];
    uint64_t v51 = (void *)v35[25];
    a11 = v51;
    uint64_t v109 = *(void (**)(void))(a17 + 16);
    v109();
    HIDWORD(a13) = v50;
    uint64_t v52 = (uint8_t *)sub_10000D524(12LL);
    a15 = sub_10000D524(32LL);
    a20 = a15;
    a12 = v49;
    *(_DWORD *)uint64_t v52 = 136315138;
    a10 = v52 + 4;
    sub_100043FDC();
    sub_100043918((uint64_t)[v51 identifier]);

    v35[24] = sub_1000472EC(v53, v54, &a20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v35 + 24, v36);
    sub_1000466D8();
    sub_1000434B8();
    sub_100043678();

    uint64_t v55 = sub_100043B50();
    os_signpost_id_t v56 = OSSignpostID.rawValue.getter(v55);
    sub_100044BCC( (void *)&_mh_execute_header,  v49,  BYTE4(a13),  v56,  "IndexTool",  "action=%{signpost.description:attribute}s",  v52);
    (*(void (**)(uint64_t, uint64_t))(a17 + 8))(a14, a16);
    sub_100043668(a15);
    sub_10000F2F0(a15);
    sub_10000F2F0((uint64_t)v52);

    uint64_t v57 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v109;
  }

  else
  {
    uint64_t v58 = v35[32];
    uint64_t v59 = (void *)v35[25];
    sub_100043678();

    sub_100043B50();
    uint64_t v57 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v58 + 16);
  }

  uint64_t v60 = v35;
  uint64_t v61 = v35[41];
  unint64_t v62 = v35[38];
  uint64_t v64 = v60[36];
  uint64_t v63 = v60[37];
  uint64_t v65 = v60[34];
  uint64_t v66 = v60[32];
  uint64_t v67 = v60[31];
  uint64_t v110 = v60[25];
  sub_100044AEC(v60[33], v65, v57);
  uint64_t v68 = sub_10000F694();
  sub_10000F4D8(v68);
  uint64_t v69 = (void *)sub_10000F324();
  uint64_t v70 = sub_100046C28();
  sub_10000F538(v70, v71, v72);
  sub_100043434(v63, (uint64_t)"IndexTool");
  sub_100043FD4(v65, *(uint64_t (**)(uint64_t, uint64_t))(v66 + 8));
  sub_10004385C(*(uint64_t (**)(uint64_t, uint64_t))(v64 + 8));
  uint64_t v73 = objc_opt_self(&OBJC_CLASS___WFControlFlowAction);
  if (swift_dynamicCastObjCClass(v110, v73))
  {
    uint64_t v74 = 1LL;
    sub_100045054();
    sub_1000469C4();
LABEL_17:
    if (v62 >= v75 >> 1)
    {
      sub_100050D20();
      uint64_t v69 = v107;
    }

    v69[2] = v61;
    int64_t v82 = (char *)&v69[3 * v62];
    *((void *)v82 + 4) = v74;
    *((void *)v82 + 5) = 0LL;
    v82[48] = 2;
    goto LABEL_20;
  }

  uint64_t v69 = *v108;
  uint64_t v76 = objc_opt_self(&OBJC_CLASS___WFMissingAction);
  if (sub_100043AF8(v76)) {
    goto LABEL_16;
  }
  unint64_t v62 = 0xEE006E6F69746341LL;
  uint64_t v77 = sub_100046014((uint64_t)[*v108 localizedName]);
  uint64_t v69 = v78;

  if (v77 == 0x206E776F6E6B6E55LL && v69 == (void *)0xEE006E6F69746341LL)
  {
    swift_bridgeObjectRelease(0xEE006E6F69746341LL);
    goto LABEL_16;
  }

  uint64_t v61 = sub_10004320C(v77, (uint64_t)v69, 0x206E776F6E6B6E55LL, 0xEE006E6F69746341LL);
  sub_100008D58();
  if ((v61 & 1) != 0)
  {
LABEL_16:
    sub_100045054();
    sub_1000469C4();
    uint64_t v74 = 2LL;
    goto LABEL_17;
  }

  uint64_t v69 = *v108;
  uint64_t v80 = objc_opt_self(&OBJC_CLASS___WFOpenUserActivityAction);
  if (sub_100043AF8(v80)
    || (v69 = *v108, uint64_t v81 = objc_opt_self(&OBJC_CLASS___WFHandleDonatedIntentAction), sub_100043AF8(v81)))
  {
    sub_100045054();
    sub_1000469C4();
    uint64_t v74 = 4LL;
    goto LABEL_17;
  }

  if (_swiftEmptyArrayStorage[2]
    || (uint64_t v61 = v60[29],
        sub_100043024(),
        uint64_t v92 = (void *)sub_100047858(),
        sub_1000041C4(v92, v93, v61, v94),
        sub_1000412F8((uint64_t)(v108 - 7), (uint64_t)(v108 - 13), &qword_100069A78),
        !v60[13]))
  {
LABEL_20:
    sub_100045670();
    sub_100043380(v61, *(uint64_t (**)(uint64_t, uint64_t))(v67 + 8));
    sub_10000F338();
    sub_10000F484();
    sub_10000F3FC();
    sub_10000F41C();
    sub_10000F3F4();
    sub_100043BC4();
    return v84( v83,  v84,  v85,  v86,  v87,  v88,  v89,  v90,  a9,  a10,  a11,  a12,  a13,  a14,  a15,  a16,  a17,  v108,  v110,  a20,  a21,  a22,  a23,  a24);
  }

  v60[42] = v60[17];
  sub_100047788();
  uint64_t v95 = sub_1000460C4();
  v60[43] = sub_100008DE0(v95, v96, v97);
  sub_100008D58();
  Swift::String v98 = (void *)swift_task_alloc(dword_10006A374);
  v60[44] = v98;
  *Swift::String v98 = v60;
  v98[1] = sub_100020390;
  sub_100043BC4();
  return sub_10002072C(v99, v100, v101, v102, v103, v104, v105, v106);
}

uint64_t sub_100020390()
{
  *(void *)(v1 + 360) = v0;
  swift_task_dealloc(v2);
  sub_10000F3A0();
  return sub_10000F2D0();
}

uint64_t sub_1000203DC()
{
  uint64_t v1 = *(void *)(v0 + 320);
  sub_1000204F0();
  sub_100043124(*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
  sub_10000F404();
  sub_10000F4A0();
  sub_10000F484();
  sub_10000F3FC();
  sub_10000F41C();
  return (*(uint64_t (**)(void))(v0 + 8))(0LL);
}

uint64_t sub_10002046C()
{
  return (*(uint64_t (**)(void))(v1 + 8))();
}

void sub_1000204E8(void *a1@<X8>)
{
  *a1 = 0LL;
}

void sub_1000204F0()
{
  uint64_t v1 = (const char *)type metadata accessor for OSSignpostError(0LL);
  uint64_t v30 = *((void *)v1 - 1);
  uint64_t v31 = v1;
  sub_100044D98();
  __chkstk_darwin(v2);
  uint64_t v3 = sub_100045E68();
  uint64_t v32 = type metadata accessor for OSSignpostID(v3);
  uint64_t v4 = *(void *)(v32 - 8);
  __chkstk_darwin(v32);
  sub_10004586C();
  uint64_t v7 = v5 - v6;
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v28 - v9;
  uint64_t v11 = sub_1000477A0();
  uint64_t v33 = *(void *)(v11 - 8);
  uint64_t v34 = v11;
  sub_100044D98();
  __chkstk_darwin(v12);
  sub_100013318();
  uint64_t v13 = WFLogSignpost.signposter.getter();
  unint64_t v14 = WFLogSignpost.name.getter(v13);
  char v16 = v15;
  WFLogSignpost.state.getter();
  uint64_t v17 = (void *)sub_100047088();
  uint64_t v18 = OSSignpostIntervalState.signpostID.getter();
  int v29 = static os_signpost_type_t.end.getter(v18);
  if ((OS_os_log.signpostsEnabled.getter() & 1) == 0)
  {
    sub_10000F69C();

    (*(void (**)(char *, uint64_t))(v4 + 8))(v10, v32);
LABEL_14:
    sub_100046D6C(*(uint64_t (**)(uint64_t))(v33 + 8));
    sub_1000436A4();
    return;
  }

  if ((v16 & 1) == 0)
  {
    if (v14)
    {
      uint64_t v20 = v30;
      uint64_t v19 = v31;
LABEL_10:
      uint64_t v21 = sub_1000446A0();
      checkForErrorAndConsumeState(state:)(v21);
      sub_10000F69C();
      if ((*(unsigned int (**)(uint64_t, const char *))(v20 + 88))(v0, v19) == enum case for OSSignpostError.doubleEnd(_:))
      {
        uint64_t v22 = "[Error] Interval already ended";
      }

      else
      {
        sub_100043AEC(*(uint64_t (**)(uint64_t, uint64_t))(v20 + 8));
        uint64_t v22 = "";
      }

      uint64_t v31 = v22;
      uint64_t v23 = v32;
      sub_1000442EC(v7, (uint64_t)v10, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 16));
      uint64_t v24 = (uint8_t *)sub_10000D524(2LL);
      *(_WORD *)uint64_t v24 = 0;
      os_signpost_id_t v25 = OSSignpostID.rawValue.getter();
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  (os_log_t)v17,  (os_signpost_type_t)v29,  v25,  (const char *)v14,  v31,  v24,  2u);
      unint64_t v26 = *(void (**)(uint64_t))(v4 + 8);
      uint64_t v27 = sub_1000453BC();
      v26(v27);
      sub_10000F2F0((uint64_t)v24);
      sub_10000F69C();

      ((void (*)(char *, uint64_t))v26)(v10, v23);
      goto LABEL_14;
    }

    __break(1u);
    goto LABEL_16;
  }

  if (HIDWORD(v14))
  {
LABEL_16:
    __break(1u);
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }

  if (v14 >> 11 != 27)
  {
    uint64_t v20 = v30;
    uint64_t v19 = v31;
    if (WORD1(v14) <= 0x10u)
    {
      unint64_t v14 = (unint64_t)&v35;
      goto LABEL_10;
    }

    goto LABEL_17;
  }

uint64_t sub_10002072C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, uint64_t a8)
{
  *(void *)(v8 + 624) = a8;
  *(void *)(v8 + 616) = a7;
  *(_BYTE *)(v8 + 2080) = a6;
  *(void *)(v8 + 608) = a5;
  *(void *)(v8 + 600) = a4;
  *(void *)(v8 + 592) = a3;
  *(void *)(v8 + 584) = a2;
  *(void *)(v8 + 576) = a1;
  uint64_t v9 = type metadata accessor for ToolSymbolIconColor(0LL);
  *(void *)(v8 + 632) = v9;
  *(void *)(v8 + 640) = *(void *)(v9 - 8);
  *(void *)(v8 + 648) = sub_1000421E4();
  *(void *)(v8 + 656) = sub_1000421E4();
  *(void *)(v8 + 664) = sub_1000421E4();
  uint64_t v10 = type metadata accessor for ToolSymbolIconStyle(0LL);
  *(void *)(v8 + 672) = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  *(void *)(v8 + 680) = v11;
  *(void *)(v8 + 688) = sub_100013328(v11);
  sub_10000844C(&qword_10006A378);
  *(void *)(v8 + 696) = sub_1000421E4();
  *(void *)(v8 + 704) = sub_1000421E4();
  *(void *)(v8 + 712) = sub_1000421E4();
  *(void *)(v8 + 720) = sub_1000421E4();
  uint64_t v12 = sub_10000844C(&qword_10006A380);
  *(void *)(v8 + 728) = sub_100013328(*(void *)(v12 - 8));
  uint64_t v13 = type metadata accessor for URL(0LL);
  *(void *)(v8 + 736) = v13;
  *(void *)(v8 + 744) = *(void *)(v13 - 8);
  *(void *)(v8 + 752) = sub_1000421E4();
  *(void *)(v8 + 760) = sub_1000421E4();
  uint64_t v14 = sub_10000844C(&qword_10006A388);
  *(void *)(v8 + 768) = sub_100013328(*(void *)(v14 - 8));
  uint64_t v15 = sub_10000844C(&qword_10006A390);
  *(void *)(v8 + 776) = sub_100013328(*(void *)(v15 - 8));
  uint64_t v16 = type metadata accessor for AssistantToolSchemaDefinition(0LL);
  *(void *)(v8 + 784) = v16;
  uint64_t v17 = *(void *)(v16 - 8);
  *(void *)(v8 + 792) = v17;
  *(void *)(v8 + 800) = sub_100013328(v17);
  uint64_t v18 = type metadata accessor for AssistantSchemaIdentifier(0LL);
  *(void *)(v8 + 808) = v18;
  uint64_t v19 = *(void *)(v18 - 8);
  *(void *)(v8 + 816) = v19;
  *(void *)(v8 + 824) = sub_100013328(v19);
  uint64_t v20 = type metadata accessor for SystemToolProtocol(0LL);
  *(void *)(v8 + 832) = v20;
  uint64_t v21 = *(void *)(v20 - 8);
  *(void *)(v8 + 840) = v21;
  *(void *)(v8 + 848) = *(void *)(v21 + 64);
  *(void *)(v8 + 856) = sub_1000421E4();
  *(void *)(v8 + 864) = sub_1000421E4();
  *(void *)(v8 + 872) = sub_1000421E4();
  sub_10000844C(&qword_10006A398);
  *(void *)(v8 + 880) = sub_1000421E4();
  *(void *)(v8 + 888) = sub_1000421E4();
  *(void *)(v8 + 896) = sub_1000421E4();
  sub_10000844C(&qword_10006A3A0);
  *(void *)(v8 + 904) = sub_1000421E4();
  *(void *)(v8 + 912) = sub_1000421E4();
  uint64_t v22 = type metadata accessor for RuntimePlatform(0LL);
  sub_1000471A4(v22);
  *(void *)(v8 + 936) = v23;
  *(void *)(v8 + 944) = sub_1000421E4();
  *(void *)(v8 + 952) = sub_1000421E4();
  *(void *)(v8 + 960) = sub_1000421E4();
  *(void *)(v8 + 968) = sub_1000421E4();
  *(void *)(v8 + 976) = sub_1000421E4();
  uint64_t v24 = type metadata accessor for WFDeviceIdiomResource.Requirement(0LL);
  *(void *)(v8 + 984) = v24;
  uint64_t v25 = *(void *)(v24 - 8);
  *(void *)(v8 + 992) = v25;
  *(void *)(v8 + 1000) = sub_100013328(v25);
  uint64_t v26 = type metadata accessor for RuntimeAvailabilityAnnotation(0LL);
  *(void *)(v8 + 1008) = v26;
  uint64_t v27 = *(void *)(v26 - 8);
  *(void *)(v8 + 1016) = v27;
  *(void *)(v8 + 1024) = *(void *)(v27 + 64);
  *(void *)(v8 + 1032) = sub_1000421E4();
  *(void *)(v8 + 1040) = sub_1000421E4();
  uint64_t v28 = type metadata accessor for RuntimeRequirement(0LL);
  *(void *)(v8 + 1048) = v28;
  *(void *)(v8 + 1056) = *(void *)(v28 - 8);
  *(void *)(v8 + 1064) = sub_1000421E4();
  *(void *)(v8 + 1072) = sub_1000421E4();
  uint64_t v29 = sub_100045FDC();
  *(void *)(v8 + 1080) = v29;
  *(void *)(v8 + 1088) = *(void *)(v29 - 8);
  *(void *)(v8 + 1096) = sub_1000421E4();
  *(void *)(v8 + 1104) = sub_1000421E4();
  *(void *)(v8 + 1112) = sub_10000844C(&qword_10006A3A8);
  *(void *)(v8 + 1120) = sub_1000421E4();
  *(void *)(v8 + 1128) = sub_1000421E4();
  *(void *)(v8 + 1136) = sub_1000421E4();
  uint64_t v30 = type metadata accessor for ToolVisibilityFlag(0LL);
  *(void *)(v8 + 1144) = v30;
  uint64_t v31 = *(void *)(v30 - 8);
  *(void *)(v8 + 1152) = v31;
  *(void *)(v8 + 1160) = *(void *)(v31 + 64);
  *(void *)(v8 + 1168) = sub_1000421E4();
  *(void *)(v8 + 1176) = sub_1000421E4();
  *(void *)(v8 + 1184) = sub_1000421E4();
  *(void *)(v8 + 1192) = sub_1000421E4();
  *(void *)(v8 + 1200) = sub_1000421E4();
  *(void *)(v8 + 1208) = sub_1000421E4();
  *(void *)(v8 + 1216) = sub_1000421E4();
  *(void *)(v8 + 1224) = sub_1000421E4();
  *(void *)(v8 + 1232) = sub_1000421E4();
  uint64_t v32 = type metadata accessor for ToolAuthenticationPolicy(0LL);
  *(void *)(v8 + 1240) = v32;
  uint64_t v33 = *(void *)(v32 - 8);
  *(void *)(v8 + 1248) = v33;
  *(void *)(v8 + 1256) = sub_100013328(v33);
  uint64_t v34 = type metadata accessor for ToolFlag(0LL);
  *(void *)(v8 + 1264) = v34;
  *(void *)(v8 + 1272) = *(void *)(v34 - 8);
  *(void *)(v8 + 1280) = sub_1000421E4();
  *(void *)(v8 + 1288) = sub_1000421E4();
  *(void *)(v8 + 1296) = sub_1000421E4();
  uint64_t v35 = type metadata accessor for ToolTypeDefinition(0LL);
  *(void *)(v8 + 1304) = v35;
  uint64_t v36 = *(void *)(v35 - 8);
  *(void *)(v8 + 1312) = v36;
  *(void *)(v8 + 1320) = sub_100013328(v36);
  *(void *)(v8 + 1328) = _s15ActionParameterVMa(0LL);
  *(void *)(v8 + 1336) = sub_1000421E4();
  *(void *)(v8 + 1344) = sub_1000421E4();
  uint64_t v37 = sub_100047798();
  *(void *)(v8 + 1352) = v37;
  uint64_t v38 = *(void *)(v37 - 8);
  *(void *)(v8 + 1360) = v38;
  *(void *)(v8 + 1368) = sub_100013328(v38);
  uint64_t v39 = type metadata accessor for ParameterRelationshipDefinition(0LL);
  *(void *)(v8 + 1376) = sub_100013328(*(void *)(v39 - 8));
  uint64_t v40 = type metadata accessor for ParameterRelationshipDefinition.Relation(0LL);
  *(void *)(v8 + 1384) = v40;
  *(void *)(v8 + 1392) = *(void *)(v40 - 8);
  *(void *)(v8 + 1400) = sub_1000421E4();
  *(void *)(v8 + 1408) = sub_1000421E4();
  uint64_t v41 = type metadata accessor for TypedValue(0LL);
  *(void *)(v8 + 1416) = v41;
  uint64_t v42 = *(void *)(v41 - 8);
  *(void *)(v8 + 1424) = v42;
  *(void *)(v8 + 1432) = *(void *)(v42 + 64);
  *(void *)(v8 + 1440) = sub_1000421E4();
  *(void *)(v8 + 1448) = sub_1000421E4();
  *(void *)(v8 + 1456) = sub_1000421E4();
  *(void *)(v8 + 1464) = sub_1000421E4();
  uint64_t v43 = sub_100044E9C();
  *(void *)(v8 + 1472) = v43;
  *(void *)(v8 + 1480) = *(void *)(v43 - 8);
  *(void *)(v8 + 1488) = sub_1000421E4();
  *(void *)(v8 + 1496) = sub_1000421E4();
  uint64_t v44 = sub_10000844C(&qword_10006A3B0);
  *(void *)(v8 + 1504) = sub_100013328(*(void *)(v44 - 8));
  uint64_t v45 = sub_100047780();
  *(void *)(v8 + 1512) = v45;
  *(void *)(v8 + 1520) = *(void *)(v45 - 8);
  *(void *)(v8 + 1528) = sub_1000421E4();
  *(void *)(v8 + 1536) = sub_1000421E4();
  *(void *)(v8 + 1544) = sub_1000421E4();
  *(void *)(v8 + 1552) = sub_1000421E4();
  uint64_t v46 = sub_100047778();
  *(void *)(v8 + 1560) = v46;
  *(void *)(v8 + 1568) = *(void *)(v46 - 8);
  *(void *)(v8 + 1576) = sub_1000421E4();
  *(void *)(v8 + 1584) = sub_1000421E4();
  *(void *)(v8 + 1592) = sub_1000421E4();
  *(void *)(v8 + 1600) = sub_1000421E4();
  uint64_t v47 = type metadata accessor for DisplayRepresentationConfiguration(0LL);
  *(void *)(v8 + 1608) = sub_100013328(*(void *)(v47 - 8));
  uint64_t v48 = type metadata accessor for WFContentItem.ToolKitTypeResolutionContext(0LL);
  *(void *)(v8 + 1616) = v48;
  uint64_t v49 = *(void *)(v48 - 8);
  *(void *)(v8 + 1624) = v49;
  *(void *)(v8 + 1632) = sub_100013328(v49);
  sub_10000F3A0();
  return sub_10000F2D0();
}

void sub_100020D08()
{
  uint64_t v1 = objc_opt_self(&OBJC_CLASS___WFAppIntentExecutionAction);
  uint64_t v2 = sub_100043AF8(v1);
  *(void *)(v0 + 1640) = v2;
  if (v2)
  {
    sub_100043240();
    id v3 = sub_100043C20();
    *(void *)(v0 + 1648) = sub_1000431DC();
    sub_100042F20();
    sub_100043160();
LABEL_3:
    sub_10004628C();
    sub_100042EB0();
    return;
  }

  uint64_t v4 = v0 + 536;
  *(_OWORD *)(v0 + 1664) = 0u;
  uint64_t v5 = *(void *)(v0 + 1608);
  uint64_t v6 = *(void **)(v0 + 576);
  v5090[3] = sub_1000459D8(0LL, &qword_100069E08);
  sub_10004547C(&qword_10006A3B8);
  v5090[4] = v7;
  v5090[0] = (uint64_t)v6;
  uint64_t v8 = v6;
  static DisplayRepresentationConfiguration.inMemoryImages.getter();
  uint64_t v9 = (void *)objc_opt_self(&OBJC_CLASS___WFLocalizationContext);
  *(void *)(v0 + 1680) = v9;
  uint64_t v10 = WFContentItem.ToolKitTypeResolutionContext.init(measurementUnitTypeProvider:outputValueType:displayRepresentationConfig:localizationContext:)( v5090,  0,  v5,  [v9 defaultContext]);
  *(void *)(v0 + 536) = &_swiftEmptySetSingleton;
  uint64_t v11 = *(void *)(WFAction.outputContentClasses.getter(v10) + 16);
  uint64_t v5089 = v0;
  if (v11)
  {
    uint64_t v12 = 0LL;
    uint64_t v13 = *(void *)(v0 + 1568);
    do
    {
      sub_100046F58();
      if (v8)
      {
        uint64_t v37 = *(void *)(v0 + 1632);
        uint64_t v38 = *(void *)(v0 + 1624);
        sub_100042E4C();
        sub_100044004();
        sub_100043C00(v37, *(uint64_t (**)(uint64_t, uint64_t))(v38 + 8));
        goto LABEL_14;
      }

      uint64_t v8 = *(uint64_t **)(v0 + 1600);
      ++v12;
      uint64_t v14 = sub_10000F674();
      sub_10000F538(v14, v15, v16);
      uint64_t v17 = sub_100046D74();
      sub_10003CB78(v17, v18);
      uint64_t v19 = *(void (**)(uint64_t))(v13 + 8);
      uint64_t v20 = sub_1000443F4();
      v19(v20);
      uint64_t v21 = sub_100044174();
      uint64_t v0 = v5089;
      v19(v21);
    }

    while (v11 != v12);
    sub_100042E4C();
    uint64_t v22 = *(void **)v4;
  }

  else
  {
    sub_100042E4C();
    uint64_t v22 = &_swiftEmptySetSingleton;
  }

  uint64_t v23 = (uint64_t)[*(id *)(v0 + 576) outputsMultipleItems];
  uint64_t v24 = sub_10004317C();
  uint64_t v25 = sub_1000478D0(v24);
  sub_100008D58();
  sub_10003441C();
  uint64_t v27 = v26;
  uint64_t v28 = *(void *)(v26 + 16);
  uint64_t v29 = &enum case for TypeInstance.type(_:);
  v5042 = (void *)v4;
  v5069 = v8;
  if (v28 == 1)
  {
    uint64_t v416 = *(void *)(v5089 + 1504);
    uint64_t v417 = *(void *)(v5089 + 1472);
    sub_100047438();
    sub_100043174();
    sub_100043DBC(v416, 1LL, v417);
    if (v533) {
      goto LABEL_313;
    }
    uint64_t v22 = *(void **)(v5089 + 1536);
    uint64_t v27 = *(void *)(v5089 + 1520);
    uint64_t v25 = *(void *)(v5089 + 1512);
    uint64_t v418 = *(void *)(v5089 + 1504);
    int64_t v34 = *(void *)(v5089 + 1480);
    unint64_t v31 = *(void *)(v5089 + 1472);
    uint64_t v419 = sub_10004793C();
    sub_100043C08(v420, v418, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v34 + 32));
    *uint64_t v22 = v419;
    uint64_t v30 = v5089;
    sub_100044408(enum case for TypeInstance.type(_:), *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v27 + 104));
  }

  else
  {
    unsigned int v5066 = v23;
    if (v28)
    {
      uint64_t v5076 = *(void *)(v5089 + 1480);
      uint64_t v5080 = *(void *)(v5089 + 1520);
      v5090[0] = (uint64_t)_swiftEmptyArrayStorage;
      sub_100037D80(v28, (uint64_t (*)(void))sub_100052388);
      int64_t v34 = sub_100041128(v27);
      unint64_t v31 = v421;
      int v423 = v422 & 1;
      uint64_t v5082 = v27 + 56;
      unsigned int v5072 = enum case for TypeInstance.type(_:);
      do
      {
        if (v34 < 0 || (sub_100045550(), v34 >= v424))
        {
LABEL_260:
          __break(1u);
LABEL_261:
          __break(1u);
LABEL_262:
          __break(1u);
LABEL_263:
          __break(1u);
          goto LABEL_264;
        }

        if (*(_DWORD *)(v27 + 36) != (_DWORD)v31) {
          goto LABEL_262;
        }
        sub_100046254();
        v5088 = (os_log_s *)v31;
        uint64_t v426 = *(void *)(v425 + 1472);
        LODWORD(v5086) = v423;
        int64_t v427 = *(void *)(v27 + 48) + *(void *)(v5076 + 72) * v34;
        uint64_t v428 = v27;
        uint64_t v429 = *(void (**)(void *, int64_t, uint64_t))(v5076 + 16);
        v429(v29, v427, v426);
        sub_100043C08(v25, (uint64_t)v29, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5076 + 32));
        uint64_t v430 = sub_10004793C();
        v429(v431, v25, v426);
        uint64_t v27 = v428;
        *uint64_t v8 = v430;
        uint64_t v29 = *(void **)(v5080 + 104);
        ((void (*)(uint64_t *, void, uint64_t *))v29)(v8, v5072, v5090);
        sub_10000F508(v25, *(uint64_t (**)(uint64_t, uint64_t))(v5076 + 8));
        sub_10003DA40((uint64_t (*)(void, uint64_t, uint64_t))sub_100052388);
        uint64_t v25 = *(void *)(v5090[0] + 16);
        uint64_t v432 = sub_100044B04();
        sub_10003DA98(v432, v433);
        sub_100044180();
        sub_10003DAC4();
        int64_t v34 = sub_1000475CC(v34, v434, v423 & 1);
        unint64_t v31 = v435;
        int v423 = v436 & 1;
        --v28;
      }

      while (v28);
      uint64_t v30 = v5089;
      uint64_t v22 = *(void **)(v5089 + 1536);
      uint64_t v25 = *(void *)(v5089 + 1512);
      uint64_t v437 = sub_100042644((uint64_t)&unk_100066458, 24LL);
      uint64_t v438 = sub_100046C28();
      sub_1000132AC(v438, v439, v423);
      sub_100043174();
      sub_10003441C();
      *(void *)(v437 + 16) = v440;
      *uint64_t v22 = v437;
      sub_100047950(v440, enum case for TypeInstance.union(_:));
    }

    else
    {
      uint64_t v30 = v5089;
      sub_100044F10();
      unint64_t v31 = sub_10004601C();
      uint64_t v33 = v32;
      int64_t v34 = sub_1000477A8();
      uint64_t v35 = swift_allocBox(v34);
      sub_1000461AC(v36, enum case for TypeIdentifier.PrimitiveTypeIdentifier.none(_:));
      *uint64_t v33 = v35;
      sub_10004314C( (uint64_t)v33,  enum case for TypeIdentifier.primitive(_:),  *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 104));
      *uint64_t v22 = v31;
      sub_100044408( enum case for TypeInstance.type(_:),  *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v27 + 104));
    }

    uint64_t v23 = v5066;
  }

  sub_100044744();
  uint64_t v441 = *(uint64_t (**)(uint64_t, uint64_t))(v30 + 8);
  *(void *)(v34 + 1688) = v441;
  sub_100043380((uint64_t)v22, v441);
  uint64_t v442 = sub_10004314C(v27, v25, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v30 + 32));
  uint64_t v443 = (uint64_t)&selRef_parameterKey;
  id v444 = sub_10004550C(v442, "parameters");
  uint64_t v417 = sub_1000132F0((uint64_t)v444, &qword_10006A3C0, &OBJC_CLASS___WFParameter_ptr);
  sub_100046870((uint64_t)v444);
  sub_100043D6C();
  uint64_t v445 = (uint64_t)_swiftEmptyArrayStorage;
  v5090[0] = (uint64_t)_swiftEmptyArrayStorage;
  if (v31 >> 62) {
    goto LABEL_296;
  }
  uint64_t v446 = *(void *)((v31 & 0xFFFFFFFFFFFFF8LL) + 0x10);
LABEL_28:
  uint64_t v447 = v5089;
  if (v446)
  {
    if (v446 < 1) {
      goto LABEL_303;
    }
    sub_1000531F0(v31);
    sub_1000449F0();
    do
    {
      if ((v5089 & 1) != 0) {
        uint64_t v448 = (uint64_t)sub_1000430AC(v31 + 8 * v445);
      }
      else {
        uint64_t v448 = sub_100047864();
      }
      uint64_t v23 = v448;
      uint64_t v449 = sub_100046890();
      if (sub_100047658(v449))
      {
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        sub_1000466F0();
        uint64_t v450 = sub_1000478F0();
        specialized ContiguousArray._endMutation()(v450);
      }

      else
      {
      }

      ++v445;
    }

    while (v446 != v445);
    sub_100043024();
    uint64_t v447 = v5089;
    uint64_t v451 = v5090[0];
    uint64_t v445 = (uint64_t)_swiftEmptyArrayStorage;
  }

  else
  {
    sub_100043024();
    uint64_t v451 = (uint64_t)_swiftEmptyArrayStorage;
  }

  uint64_t v452 = (char *)v5069;
  sub_100015A1C(v451);
  uint64_t v454 = v453;
  sub_100013360();
  uint64_t v455 = sub_10003452C(v454);
  *(void *)(v447 + 1696) = v455;
  *(void *)(v447 + 488) = v445;
  id v456 = sub_100044B20(v455, *(const char **)(v443 + 8));
  uint64_t v457 = sub_100046870((uint64_t)v456);
  sub_1000476A8(v457);
  if ((unint64_t)v451 >> 62)
  {
    if (v451 < 0) {
      uint64_t v1208 = v451;
    }
    else {
      uint64_t v1208 = v451 & 0xFFFFFFFFFFFFFF8LL;
    }
    sub_10004317C();
    uint64_t v417 = _CocoaArrayWrapper.endIndex.getter(v1208);
    sub_100008D58();
  }

  else
  {
    sub_100045420();
  }

  *(void *)(v447 + 1712) = v417;
  if (v417)
  {
    uint64_t v417 = v447 + 1664;
    char v458 = sub_1000531F0(v451);
    uint64_t v459 = 0LL;
    *(_BYTE *)(v447 + 2081) = v458 & 1;
    *(void *)(v447 + 1720) = WFParameterRelationResourceRelationEqual;
    *(void *)(v447 + 1728) = WFParameterRelationResourceRelationAny;
    *(void *)(v447 + 1736) = WFParameterRelationResourceRelationNotEqual;
    *(void *)(v447 + 1744) = WFParameterRelationResourceRelationGreaterThan;
    *(void *)(v447 + 1752) = WFParameterRelationResourceRelationGreaterThanOrEqual;
    *(void *)(v447 + 1760) = WFParameterRelationResourceRelationLessThan;
    *(void *)(v447 + 1768) = WFParameterRelationResourceRelationLessThanOrEqual;
    *(void *)(v447 + 1776) = WFParameterRelationResourceRelationContains;
    *(_DWORD *)(v447 + 2056) = enum case for ParameterRelationshipDefinition.Relation.isSome(_:);
    *(_DWORD *)(v447 + 2060) = enum case for ParameterRelationshipDefinition.Relation.contains(_:);
    *(_DWORD *)(v447 + 2064) = enum case for ParameterRelationshipDefinition.Relation.lessThan(_:);
    *(_DWORD *)(v447 + 2068) = enum case for ParameterRelationshipDefinition.Relation.greaterThan(_:);
    *(_DWORD *)(v447 + 2072) = enum case for ParameterRelationshipDefinition.Relation.notEquals(_:);
    *(_DWORD *)(v447 + 2076) = enum case for ParameterRelationshipDefinition.Relation.equals(_:);
    *(void *)(v447 + 1784) = WFLogCategoryToolKitIndexing;
    uint64_t v454 = v447 + 2081;
    while (1)
    {
      *(void *)(v447 + 1792) = v459;
      int v460 = *(unsigned __int8 *)v454;
      uint64_t v461 = sub_100046878();
      uint64_t v462 = *(void *)(v447 + 1704);
      if (v460 == 1) {
        uint64_t v463 = (uint64_t)sub_1000430AC(v462 + 8 * v459);
      }
      else {
        uint64_t v463 = sub_100044EF8(v461, v462);
      }
      uint64_t v464 = (void *)v463;
      *(void *)(v447 + 1800) = v463;
      *(void *)(v447 + 1808) = v459 + 1;
      if (__OFADD__(v459, 1LL)) {
        goto LABEL_263;
      }
      uint64_t v465 = sub_100046890();
      if (!sub_100047664(v465)) {
        break;
      }

      uint64_t v459 = *(void *)(v447 + 1808);
      if (v459 == *(void *)(v447 + 1712)) {
        goto LABEL_50;
      }
    }

    sub_100037E60(0LL);
    *(void *)(v447 + 440) = v520;
    v5049 = v464;
    id v521 = sub_100044B20(v520, "resourceManager");
    uint64_t v522 = sub_1000132F0((uint64_t)v521, &qword_10006A3C8, &OBJC_CLASS___WFParameterRelationResource_ptr);
    id v523 = [v521 resourceObjectsOfClass:swift_getObjCClassFromMetadata(v522)];

    if (!v523) {
      goto LABEL_314;
    }
    uint64_t v417 = (uint64_t)&OBJC_CLASS___WFResource_ptr;
    sub_100046B10();
    sub_100047168(&qword_10006A3D8);
    sub_100046AD4(v524);
    sub_100047870();
    sub_100013470((uint64_t)&qword_10006A3D0);
    sub_1000476C8();
    sub_100043174();
    uint64_t v5045 = sub_100046114();
    if (!v5045)
    {
LABEL_151:
      sub_100008D58();
      uint64_t v606 = sub_1000436BC();
      id v607 = sub_100014078(v606);
      sub_100043174();
      if (!v607) {
        id v607 = [*(id *)(v447 + 1680) defaultContext];
      }
      *(void *)(v447 + 1816) = v607;
      uint64_t v608 = (void *)swift_task_alloc(async function pointer to WFParameter.toolkitTypeDefinition(for:localizationContext:)[1]);
      *(void *)(v447 + 1824) = v608;
      sub_100047190(v608, (uint64_t)sub_100026940);
      sub_1000430EC();
      return;
    }

    char v5047 = sub_100046104();
    uint64_t v525 = 0LL;
    sub_1000464F0();
    while (1)
    {
      sub_10004509C();
      if ((v5047 & 1) != 0) {
        uint64_t v526 = (uint64_t)sub_100045DF0();
      }
      else {
        uint64_t v526 = sub_100044E8C(v525);
      }
      BOOL v527 = __OFADD__(v525++, 1LL);
      uint64_t v5052 = v525;
      if (v527) {
        goto LABEL_304;
      }
      uint64_t v528 = *(void *)(v447 + 1696);
      id v529 = sub_100044A64(v526, "parameterKey");
      sub_100043918((uint64_t)v529);
      sub_10004613C();
      if (!*(void *)(v528 + 16)) {
        break;
      }
      sub_100045AD8();
      sub_100045070();
      sub_100045F8C();
      sub_100044950();
      if ((v530 & 1) == 0) {
        break;
      }
      uint64_t v531 = sub_100044680();
      BOOL v533 = v533 && v532 == v417;
      if (!v533 && (sub_10004320C(v531, v532, v525, v417) & 1) == 0)
      {
        do
        {
          sub_100044090();
          if ((v534 & 1) == 0) {
            goto LABEL_101;
          }
          uint64_t v535 = sub_100044680();
          BOOL v537 = v533 && v536 == v417;
        }

        while (!v537 && (sub_10004320C(v535, v536, v525, v417) & 1) == 0);
        sub_100042E4C();
        sub_100045140();
        goto LABEL_140;
      }

      sub_100042E4C();
      sub_100045140();
LABEL_139:
      uint64_t v525 = v5052;
LABEL_140:
      if (v525 == v5045) {
        goto LABEL_151;
      }
    }

LABEL_101:
    uint64_t v538 = *(void *)(v447 + 1416);
    uint64_t v539 = sub_100042E4C();
    id v540 = sub_100044A64(v539, "comparedValues");
    uint64_t v417 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v540, (char *)&type metadata for Any + 8);

    id v541 = v5049;
    uint64_t v542 = sub_100047694();
    uint64_t v543 = v5054;
    uint64_t v545 = (uint64_t)sub_1000137AC(v542, v544);
    sub_100042E4C();
    uint64_t v546 = sub_1000479A4(v545);
    sub_100040370(&qword_10006A3E0, (uint64_t (*)(uint64_t))&type metadata accessor for TypedValue);
    sub_100044AAC(v546, v548, v547);
    if (sub_100046B30())
    {
      sub_1000469D4();
      if (v549 != v527) {
        goto LABEL_306;
      }
      uint64_t v550 = sub_100045DE8();
      sub_10004680C(v550);
      do
      {
        if ((v5072 & 1) != 0)
        {
          sub_10004332C(*(void *)(v447 + 1464), *(void *)(v447 + 1424));
        }

        else
        {
          uint64_t v551 = *(void *)(v447 + 1432);
          uint64_t v552 = sub_100046030();
          uint64_t v554 = sub_100043364(v552, v553, (uint64_t (*)(void))&type metadata accessor for TypedValue);
          if (v551 != 8) {
            goto LABEL_302;
          }
          sub_100044DDC(v554);
          sub_1000431C0();
        }

        uint64_t v538 = *(void *)(v447 + 1456);
        uint64_t v555 = *(void *)(v447 + 1416);
        sub_10004462C(*(uint64_t (**)(void))(*(void *)(v447 + 1424) + 32LL));
        uint64_t v556 = *(void *)(v417 + 40);
        sub_100009BEC();
        uint64_t v545 = sub_100044634(v556, v555) & ~(-1LL << *(_BYTE *)(v417 + 32));
        uint64_t v443 = v417 + 56;
        sub_1000435EC();
        if ((v557 & 1) != 0)
        {
          sub_100047288();
          while (1)
          {
            sub_1000444BC();
            sub_100040370(&qword_10006A3E8, (uint64_t (*)(uint64_t))&type metadata accessor for TypedValue);
            sub_100044838(v555, v559, v560, v558);
            sub_100045BAC();
            if ((v538 & 1) != 0) {
              break;
            }
            uint64_t v545 = (v545 + 1) & v447;
            sub_100043600();
            if ((v561 & 1) == 0) {
              goto LABEL_112;
            }
          }

          sub_100042E4C();
          uint64_t v447 = v5089;
        }

        else
        {
LABEL_112:
          uint64_t v562 = *(void *)(v5089 + 1456);
          uint64_t v443 = *(void *)(v5089 + 1416);
          sub_100042E4C();
          sub_1000460BC();
          sub_100045B70();
          sub_100046460();
          if (!v533 & v563)
          {
            if ((v538 & 1) == 0) {
              sub_10003AE5C();
            }
          }

          else
          {
            if ((_DWORD)v538) {
              sub_10003A578();
            }
            else {
              sub_10003B54C();
            }
            sub_100044634(*(void *)(*(void *)(v5089 + 392) + 40LL), *(void *)(v5089 + 1416));
            sub_100043388();
            if ((v565 & 1) != 0)
            {
              uint64_t v447 = ~v564;
              uint64_t v23 = *(void *)(*(void *)(v5089 + 1424) + 72LL);
              do
              {
                sub_100044534();
                sub_100040370(&qword_10006A3E8, (uint64_t (*)(uint64_t))&type metadata accessor for TypedValue);
                char v567 = sub_10004559C(v566);
                sub_1000431A8(v562, *(uint64_t (**)(uint64_t, uint64_t))(v5089 + 8));
                if ((v567 & 1) != 0)
                {
                  sub_10004626C();
                  sub_1000430D0();
                  return;
                }

                uint64_t v545 = (v545 + 1) & v447;
                sub_100043600();
              }

              while ((v568 & 1) != 0);
            }
          }

          sub_100043870();
          uint64_t v569 = *(void *)(v417 + 16);
          BOOL v527 = __OFADD__(v569, 1LL);
          uint64_t v570 = v569 + 1;
          if (v527)
          {
            __break(1u);
LABEL_302:
            __break(1u);
LABEL_303:
            __break(1u);
LABEL_304:
            __break(1u);
LABEL_305:
            __break(1u);
LABEL_306:
            __break(1u);
LABEL_307:
            __break(1u);
LABEL_308:
            __break(1u);
LABEL_309:
            __break(1u);
LABEL_310:
            __break(1u);
LABEL_311:
            __break(1u);
LABEL_312:
            __break(1u);
LABEL_313:
            __break(1u);
LABEL_314:

            __break(1u);
            JUMPOUT(0x100023A0CLL);
          }

          uint64_t v538 = *(void *)(v447 + 1424);
          *(void *)(v417 + 16) = v570;
          sub_100045D08();
          uint64_t v543 = *(void *)(v538 + 8);
        }

        sub_100047234();
        sub_1000456CC();
      }

      while (!v533);
    }

    uint64_t v571 = sub_10004515C();
    id v572 = sub_100044A64(v571, "relation");
    sub_1000476D4();
    uint64_t v573 = sub_100043F74();
    if (v443 == v573 && v543 == v574)
    {
      sub_100043238(v543);
    }

    else
    {
      char v576 = sub_10004320C(v443, v543, v573, v574);
      sub_100043908();
      sub_10004316C();
      if ((v576 & 1) == 0)
      {
        id v577 = (id)v538;
        id v578 = sub_1000431B0();
        sub_100043130((uint64_t)v578);
        sub_100044080();

        if ((v543 & 1) == 0)
        {
          id v584 = (id)v538;
          id v585 = sub_1000431B0();
          sub_100043130((uint64_t)v585);
          sub_100044080();

          id v586 = (id)v538;
          id v587 = sub_1000431B0();
          sub_100043130((uint64_t)v587);
          sub_100044080();

          id v588 = (id)v538;
          id v589 = sub_1000431B0();
          sub_100043130((uint64_t)v589);
          sub_100044080();

          id v590 = (id)v538;
          id v591 = sub_1000431B0();
          sub_100043130((uint64_t)v591);
          sub_100044080();

          id v592 = (id)v538;
          id v593 = sub_1000431B0();
          sub_100043130((uint64_t)v593);
          sub_100044080();

          id v594 = *(id *)(v447 + 1776);
          char v595 = sub_100043130((uint64_t)v594);

          uint64_t v538 = *(void *)(v447 + 1408);
          uint64_t v545 = *(void *)(v447 + 1392);
          if ((v595 & 1) != 0)
          {
            uint64_t v579 = (uint64_t)sub_1000471E4();
          }

          else
          {
            sub_100042E4C();
            uint64_t v580 = *(void (**)(uint64_t))(v545 + 104);
            uint64_t v579 = v538;
          }

          goto LABEL_138;
        }

        sub_100043444();
        sub_100042E4C();
LABEL_137:
        uint64_t v579 = sub_10004717C();
LABEL_138:
        v580(v579);
        sub_100046430();
        id v582 = sub_100047604(v581, "parameterKey");
        sub_1000465D8((uint64_t)v582);
        sub_10004772C();
        uint64_t v583 = v445;
        sub_10004314C(v538, v445, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v545 + 16));
        sub_10004517C();
        uint64_t v445 = (uint64_t)sub_100050CF8;
        sub_100046C10();
        sub_100045410(*(void *)(v447 + 440));
        sub_100046C60();
        sub_100037FF8();

        sub_100043380(v583, *(uint64_t (**)(uint64_t, uint64_t))(v545 + 8));
        goto LABEL_139;
      }
    }

    sub_100043444();
    *(void *)uint64_t v543 = v417;
    goto LABEL_137;
  }

LABEL_50:
  sub_100044D78();
  sub_100008D58();
  sub_100040370(&qword_10006A3F0, (uint64_t (*)(uint64_t))&type metadata accessor for ToolFlag);
  sub_100044FD0();
  sub_100043230();
  *(void *)(v447 + 400) = v466;
  uint64_t v467 = sub_10004601C();
  sub_100047718(v467, v468);
  sub_100044AC8();
  *(void *)(v447 + 408) = v469;
  sub_100045FD4(&qword_10006A3F8);
  uint64_t v471 = v470;
  sub_10000844C(&qword_10006A400);
  unint64_t v472 = sub_100045F70();
  uint64_t v473 = sub_100044E4C(v472);
  uint64_t v474 = static ToolVisibilityFlag.allCases.getter(v473);
  uint64_t v5046 = v443;
  if (sub_10004753C(v474))
  {
    uint64_t v5056 = *(void *)(v447 + 1160);
    uint64_t v5067 = *(void *)(v447 + 1112);
    char v5073 = sub_100052268(v5082);
    sub_1000478DC();
    v5043 = v475;
    uint64_t v5060 = v471;
    do
    {
      if ((v5073 & 1) != 0)
      {
        uint64_t v476 = sub_1000467DC();
        sub_100045E90(v476, v477);
      }

      else
      {
        uint64_t v478 = sub_100046774( (uint64_t)v452,  v5082,  (uint64_t (*)(void))&type metadata accessor for ToolVisibilityFlag);
        if (v5056 != 8)
        {
          __break(1u);
LABEL_266:
          sub_1000132B8();
          uint64_t v667 = v471;
LABEL_267:
          swift_bridgeObjectRelease(*(void *)(v667 + 464));
          sub_100046EB8();
          sub_1000432E8();
          uint64_t v701 = sub_1000448B0();
LABEL_268:
          sub_10000848C(v701, v702, v703, v704);
LABEL_269:
          uint64_t v5075 = *(void *)(v667 + 1672);
          uint64_t v5053 = *(void *)(v667 + 1552);
          id v715 = sub_100043A50();
          sub_1000453AC((uint64_t)v715);
          sub_100047750();
          uint64_t v716 = sub_100044B10();
          v717 = (void *)sub_10004691C(v716);
          v717[7] = v5053;
          v717[8] = v452;
          v718 = sub_1000446E4(v717);
          sub_100043B58((uint64_t)v718, v5075);
          sub_1000443D0(v667, v719, (uint64_t)sub_100040F80);
          sub_100043680();
          if (v452)
          {
            uint64_t v720 = *(void *)(v5089 + 1552);
            uint64_t v721 = *(void *)(v5089 + 1520);
            sub_100043E58();
            uint64_t v5059 = *(void *)(v722 + 1248);
            uint64_t v5065 = *(void *)(v5089 + 1240);
            sub_100043820(v723);
            sub_1000447AC();
            sub_100044830();
            sub_1000445E4();
            uint64_t v724 = sub_10000F3F4();
            sub_1000431B8(v724, &qword_10006A388);
            uint64_t v0 = v5089;
            sub_100043AEC(*(uint64_t (**)(uint64_t, uint64_t))(v667 + 8));
            sub_100043FD4(v720, *(uint64_t (**)(uint64_t, uint64_t))(v721 + 8));
            sub_100043B64();
            sub_1000435DC();
            sub_100008D58();
            (*(void (**)(uint64_t, uint64_t))(v5059 + 8))(v5067, v5065);
            sub_100043A38();
            sub_100046AE4();
            sub_100043B04();
LABEL_14:
            sub_1000429C4(*(void *)(v0 + 1632));
            sub_10000F338();
            sub_10000F404();
            sub_10000F4A8();
            sub_10000F4EC();
            sub_10000F3F4();
            sub_10000F41C();
            sub_10000F3FC();
            uint64_t v39 = sub_10000F484();
            uint64_t v47 = sub_1000436F0( v39,  v40,  v41,  v42,  v43,  v44,  v45,  v46,  v1209,  v1312,  v1415,  v1518,  v1621,  v1724,  v1826,  v1928,  v2030,  v2131,  v2232,  v2332,  v2431,  v2529,  v2626,  v2722,  v2817,  v2911);
            uint64_t v55 = sub_1000436E8( v47,  v48,  v49,  v50,  v51,  v52,  v53,  v54,  v1210,  v1313,  v1416,  v1519,  v1622,  v1725,  v1827,  v1929,  v2031,  v2132,  v2233,  v2333,  v2432,  v2530,  v2627,  v2723,  v2818,  v2912,  v3004);
            uint64_t v63 = sub_1000436C4( v55,  v56,  v57,  v58,  v59,  v60,  v61,  v62,  v1211,  v1314,  v1417,  v1520,  v1623,  v1726,  v1828,  v1930,  v2032,  v2133,  v2234,  v2334,  v2433,  v2531,  v2628,  v2724,  v2819,  v2913,  v3005,  v3095);
            uint64_t v71 = sub_100043624( v63,  v64,  v65,  v66,  v67,  v68,  v69,  v70,  v1212,  v1315,  v1418,  v1521,  v1624,  v1727,  v1829,  v1931,  v2033,  v2134,  v2235,  v2335,  v2434,  v2532,  v2629,  v2725,  v2820,  v2914,  v3006,  v3096,  v3184);
            uint64_t v79 = sub_100043658( v71,  v72,  v73,  v74,  v75,  v76,  v77,  v78,  v1213,  v1316,  v1419,  v1522,  v1625,  v1728,  v1830,  v1932,  v2034,  v2135,  v2236,  v2336,  v2435,  v2533,  v2630,  v2726,  v2821,  v2915,  v3007,  v3097,  v3185,  v3271);
            uint64_t v87 = sub_100043660( v79,  v80,  v81,  v82,  v83,  v84,  v85,  v86,  v1214,  v1317,  v1420,  v1523,  v1626,  v1729,  v1831,  v1933,  v2035,  v2136,  v2237,  v2337,  v2436,  v2534,  v2631,  v2727,  v2822,  v2916,  v3008,  v3098,  v3186,  v3272,  v3356);
            uint64_t v95 = sub_10004361C( v87,  v88,  v89,  v90,  v91,  v92,  v93,  v94,  v1215,  v1318,  v1421,  v1524,  v1627,  v1730,  v1832,  v1934,  v2036,  v2137,  v2238,  v2338,  v2437,  v2535,  v2632,  v2728,  v2823,  v2917,  v3009,  v3099,  v3187,  v3273,  v3357,  v3439);
            uint64_t v103 = sub_100043614( v95,  v96,  v97,  v98,  v99,  v100,  v101,  v102,  v1216,  v1319,  v1422,  v1525,  v1628,  v1731,  v1833,  v1935,  v2037,  v2138,  v2239,  v2339,  v2438,  v2536,  v2633,  v2729,  v2824,  v2918,  v3010,  v3100,  v3188,  v3274,  v3358,  v3440,  v3520);
            uint64_t v111 = sub_100043A48( v103,  v104,  v105,  v106,  v107,  v108,  v109,  v110,  v1217,  v1320,  v1423,  v1526,  v1629,  v1732,  v1834,  v1936,  v2038,  v2139,  v2240,  v2340,  v2439,  v2537,  v2634,  v2730,  v2825,  v2919,  v3011,  v3101,  v3189,  v3275,  v3359,  v3441,  v3521,  v3599);
            uint64_t v119 = sub_100043A40( v111,  v112,  v113,  v114,  v115,  v116,  v117,  v118,  v1218,  v1321,  v1424,  v1527,  v1630,  v1733,  v1835,  v1937,  v2039,  v2140,  v2241,  v2341,  v2440,  v2538,  v2635,  v2731,  v2826,  v2920,  v3012,  v3102,  v3190,  v3276,  v3360,  v3442,  v3522,  v3600,  v3676);
            uint64_t v127 = sub_1000437F8( v119,  v120,  v121,  v122,  v123,  v124,  v125,  v126,  v1219,  v1322,  v1425,  v1528,  v1631,  v1734,  v1836,  v1938,  v2040,  v2141,  v2242,  v2342,  v2441,  v2539,  v2636,  v2732,  v2827,  v2921,  v3013,  v3103,  v3191,  v3277,  v3361,  v3443,  v3523,  v3601,  v3677,  v3751);
            uint64_t v135 = sub_10004384C( v127,  v128,  v129,  v130,  v131,  v132,  v133,  v134,  v1220,  v1323,  v1426,  v1529,  v1632,  v1735,  v1837,  v1939,  v2041,  v2142,  v2243,  v2343,  v2442,  v2540,  v2637,  v2733,  v2828,  v2922,  v3014,  v3104,  v3192,  v3278,  v3362,  v3444,  v3524,  v3602,  v3678,  v3752,  v3824);
            uint64_t v143 = sub_100043A30( v135,  v136,  v137,  v138,  v139,  v140,  v141,  v142,  v1221,  v1324,  v1427,  v1530,  v1633,  v1736,  v1838,  v1940,  v2042,  v2143,  v2244,  v2344,  v2443,  v2541,  v2638,  v2734,  v2829,  v2923,  v3015,  v3105,  v3193,  v3279,  v3363,  v3445,  v3525,  v3603,  v3679,  v3753,  v3825,  v3895);
            uint64_t v151 = sub_100043A28( v143,  v144,  v145,  v146,  v147,  v148,  v149,  v150,  v1222,  v1325,  v1428,  v1531,  v1634,  v1737,  v1839,  v1941,  v2043,  v2144,  v2245,  v2345,  v2444,  v2542,  v2639,  v2735,  v2830,  v2924,  v3016,  v3106,  v3194,  v3280,  v3364,  v3446,  v3526,  v3604,  v3680,  v3754,  v3826,  v3896,  v3964);
            uint64_t v159 = sub_100043A20( v151,  v152,  v153,  v154,  v155,  v156,  v157,  v158,  v1223,  v1326,  v1429,  v1532,  v1635,  v1738,  v1840,  v1942,  v2044,  v2145,  v2246,  v2346,  v2445,  v2543,  v2640,  v2736,  v2831,  v2925,  v3017,  v3107,  v3195,  v3281,  v3365,  v3447,  v3527,  v3605,  v3681,  v3755,  v3827,  v3897,  v3965,  v4031);
            uint64_t v167 = sub_100043A18( v159,  v160,  v161,  v162,  v163,  v164,  v165,  v166,  v1224,  v1327,  v1430,  v1533,  v1636,  v1739,  v1841,  v1943,  v2045,  v2146,  v2247,  v2347,  v2446,  v2544,  v2641,  v2737,  v2832,  v2926,  v3018,  v3108,  v3196,  v3282,  v3366,  v3448,  v3528,  v3606,  v3682,  v3756,  v3828,  v3898,  v3966,  v4032,  v4096);
            uint64_t v175 = sub_100043A10( v167,  v168,  v169,  v170,  v171,  v172,  v173,  v174,  v1225,  v1328,  v1431,  v1534,  v1637,  v1740,  v1842,  v1944,  v2046,  v2147,  v2248,  v2348,  v2447,  v2545,  v2642,  v2738,  v2833,  v2927,  v3019,  v3109,  v3197,  v3283,  v3367,  v3449,  v3529,  v3607,  v3683,  v3757,  v3829,  v3899,  v3967,  v4033,  v4097,  v4159);
            uint64_t v183 = sub_100043A08( v175,  v176,  v177,  v178,  v179,  v180,  v181,  v182,  v1226,  v1329,  v1432,  v1535,  v1638,  v1741,  v1843,  v1945,  v2047,  v2148,  v2249,  v2349,  v2448,  v2546,  v2643,  v2739,  v2834,  v2928,  v3020,  v3110,  v3198,  v3284,  v3368,  v3450,  v3530,  v3608,  v3684,  v3758,  v3830,  v3900,  v3968,  v4034,  v4098,  v4160,  v4220);
            uint64_t v191 = sub_100043A00( v183,  v184,  v185,  v186,  v187,  v188,  v189,  v190,  v1227,  v1330,  v1433,  v1536,  v1639,  v1742,  v1844,  v1946,  v2048,  v2149,  v2250,  v2350,  v2449,  v2547,  v2644,  v2740,  v2835,  v2929,  v3021,  v3111,  v3199,  v3285,  v3369,  v3451,  v3531,  v3609,  v3685,  v3759,  v3831,  v3901,  v3969,  v4035,  v4099,  v4161,  v4221,  v4279);
            uint64_t v199 = sub_1000439F8( v191,  v192,  v193,  v194,  v195,  v196,  v197,  v198,  v1228,  v1331,  v1434,  v1537,  v1640,  v1743,  v1845,  v1947,  v2049,  v2150,  v2251,  v2351,  v2450,  v2548,  v2645,  v2741,  v2836,  v2930,  v3022,  v3112,  v3200,  v3286,  v3370,  v3452,  v3532,  v3610,  v3686,  v3760,  v3832,  v3902,  v3970,  v4036,  v4100,  v4162,  v4222,  v4280,  v4336);
            uint64_t v207 = sub_1000439F0( v199,  v200,  v201,  v202,  v203,  v204,  v205,  v206,  v1229,  v1332,  v1435,  v1538,  v1641,  v1744,  v1846,  v1948,  v2050,  v2151,  v2252,  v2352,  v2451,  v2549,  v2646,  v2742,  v2837,  v2931,  v3023,  v3113,  v3201,  v3287,  v3371,  v3453,  v3533,  v3611,  v3687,  v3761,  v3833,  v3903,  v3971,  v4037,  v4101,  v4163,  v4223,  v4281,  v4337,  v4391);
            uint64_t v215 = sub_1000439E8( v207,  v208,  v209,  v210,  v211,  v212,  v213,  v214,  v1230,  v1333,  v1436,  v1539,  v1642,  v1745,  v1847,  v1949,  v2051,  v2152,  v2253,  v2353,  v2452,  v2550,  v2647,  v2743,  v2838,  v2932,  v3024,  v3114,  v3202,  v3288,  v3372,  v3454,  v3534,  v3612,  v3688,  v3762,  v3834,  v3904,  v3972,  v4038,  v4102,  v4164,  v4224,  v4282,  v4338,  v4392,  v4444);
            uint64_t v223 = sub_1000439E0( v215,  v216,  v217,  v218,  v219,  v220,  v221,  v222,  v1231,  v1334,  v1437,  v1540,  v1643,  v1746,  v1848,  v1950,  v2052,  v2153,  v2254,  v2354,  v2453,  v2551,  v2648,  v2744,  v2839,  v2933,  v3025,  v3115,  v3203,  v3289,  v3373,  v3455,  v3535,  v3613,  v3689,  v3763,  v3835,  v3905,  v3973,  v4039,  v4103,  v4165,  v4225,  v4283,  v4339,  v4393,  v4445,  v4495);
            uint64_t v231 = sub_1000439D8( v223,  v224,  v225,  v226,  v227,  v228,  v229,  v230,  v1232,  v1335,  v1438,  v1541,  v1644,  v1747,  v1849,  v1951,  v2053,  v2154,  v2255,  v2355,  v2454,  v2552,  v2649,  v2745,  v2840,  v2934,  v3026,  v3116,  v3204,  v3290,  v3374,  v3456,  v3536,  v3614,  v3690,  v3764,  v3836,  v3906,  v3974,  v4040,  v4104,  v4166,  v4226,  v4284,  v4340,  v4394,  v4446,  v4496,  v4544);
            uint64_t v239 = sub_1000439D0( v231,  v232,  v233,  v234,  v235,  v236,  v237,  v238,  v1233,  v1336,  v1439,  v1542,  v1645,  v1748,  v1850,  v1952,  v2054,  v2155,  v2256,  v2356,  v2455,  v2553,  v2650,  v2746,  v2841,  v2935,  v3027,  v3117,  v3205,  v3291,  v3375,  v3457,  v3537,  v3615,  v3691,  v3765,  v3837,  v3907,  v3975,  v4041,  v4105,  v4167,  v4227,  v4285,  v4341,  v4395,  v4447,  v4497,  v4545,
                     v4591);
            uint64_t v247 = sub_1000439C8( v239,  v240,  v241,  v242,  v243,  v244,  v245,  v246,  v1234,  v1337,  v1440,  v1543,  v1646,  v1749,  v1851,  v1953,  v2055,  v2156,  v2257,  v2357,  v2456,  v2554,  v2651,  v2747,  v2842,  v2936,  v3028,  v3118,  v3206,  v3292,  v3376,  v3458,  v3538,  v3616,  v3692,  v3766,  v3838,  v3908,  v3976,  v4042,  v4106,  v4168,  v4228,  v4286,  v4342,  v4396,  v4448,  v4498,  v4546,
                     v4592,
                     v4636);
            uint64_t v255 = sub_1000439C0( v247,  v248,  v249,  v250,  v251,  v252,  v253,  v254,  v1235,  v1338,  v1441,  v1544,  v1647,  v1750,  v1852,  v1954,  v2056,  v2157,  v2258,  v2358,  v2457,  v2555,  v2652,  v2748,  v2843,  v2937,  v3029,  v3119,  v3207,  v3293,  v3377,  v3459,  v3539,  v3617,  v3693,  v3767,  v3839,  v3909,  v3977,  v4043,  v4107,  v4169,  v4229,  v4287,  v4343,  v4397,  v4449,  v4499,  v4547,
                     v4593,
                     v4637,
                     v4679);
            uint64_t v263 = sub_1000439B8( v255,  v256,  v257,  v258,  v259,  v260,  v261,  v262,  v1236,  v1339,  v1442,  v1545,  v1648,  v1751,  v1853,  v1955,  v2057,  v2158,  v2259,  v2359,  v2458,  v2556,  v2653,  v2749,  v2844,  v2938,  v3030,  v3120,  v3208,  v3294,  v3378,  v3460,  v3540,  v3618,  v3694,  v3768,  v3840,  v3910,  v3978,  v4044,  v4108,  v4170,  v4230,  v4288,  v4344,  v4398,  v4450,  v4500,  v4548,
                     v4594,
                     v4638,
                     v4680,
                     v4720);
            uint64_t v271 = sub_1000439B0( v263,  v264,  v265,  v266,  v267,  v268,  v269,  v270,  v1237,  v1340,  v1443,  v1546,  v1649,  v1752,  v1854,  v1956,  v2058,  v2159,  v2260,  v2360,  v2459,  v2557,  v2654,  v2750,  v2845,  v2939,  v3031,  v3121,  v3209,  v3295,  v3379,  v3461,  v3541,  v3619,  v3695,  v3769,  v3841,  v3911,  v3979,  v4045,  v4109,  v4171,  v4231,  v4289,  v4345,  v4399,  v4451,  v4501,  v4549,
                     v4595,
                     v4639,
                     v4681,
                     v4721,
                     v4759);
            uint64_t v279 = sub_1000439A8( v271,  v272,  v273,  v274,  v275,  v276,  v277,  v278,  v1238,  v1341,  v1444,  v1547,  v1650,  v1753,  v1855,  v1957,  v2059,  v2160,  v2261,  v2361,  v2460,  v2558,  v2655,  v2751,  v2846,  v2940,  v3032,  v3122,  v3210,  v3296,  v3380,  v3462,  v3542,  v3620,  v3696,  v3770,  v3842,  v3912,  v3980,  v4046,  v4110,  v4172,  v4232,  v4290,  v4346,  v4400,  v4452,  v4502,  v4550,
                     v4596,
                     v4640,
                     v4682,
                     v4722,
                     v4760,
                     v4796);
            uint64_t v287 = sub_1000439A0( v279,  v280,  v281,  v282,  v283,  v284,  v285,  v286,  v1239,  v1342,  v1445,  v1548,  v1651,  v1754,  v1856,  v1958,  v2060,  v2161,  v2262,  v2362,  v2461,  v2559,  v2656,  v2752,  v2847,  v2941,  v3033,  v3123,  v3211,  v3297,  v3381,  v3463,  v3543,  v3621,  v3697,  v3771,  v3843,  v3913,  v3981,  v4047,  v4111,  v4173,  v4233,  v4291,  v4347,  v4401,  v4453,  v4503,  v4551,
                     v4597,
                     v4641,
                     v4683,
                     v4723,
                     v4761,
                     v4797,
                     v4831);
            uint64_t v295 = sub_100043998( v287,  v288,  v289,  v290,  v291,  v292,  v293,  v294,  v1240,  v1343,  v1446,  v1549,  v1652,  v1755,  v1857,  v1959,  v2061,  v2162,  v2263,  v2363,  v2462,  v2560,  v2657,  v2753,  v2848,  v2942,  v3034,  v3124,  v3212,  v3298,  v3382,  v3464,  v3544,  v3622,  v3698,  v3772,  v3844,  v3914,  v3982,  v4048,  v4112,  v4174,  v4234,  v4292,  v4348,  v4402,  v4454,  v4504,  v4552,
                     v4598,
                     v4642,
                     v4684,
                     v4724,
                     v4762,
                     v4798,
                     v4832,
                     v4864);
            uint64_t v303 = sub_100043990( v295,  v296,  v297,  v298,  v299,  v300,  v301,  v302,  v1241,  v1344,  v1447,  v1550,  v1653,  v1756,  v1858,  v1960,  v2062,  v2163,  v2264,  v2364,  v2463,  v2561,  v2658,  v2754,  v2849,  v2943,  v3035,  v3125,  v3213,  v3299,  v3383,  v3465,  v3545,  v3623,  v3699,  v3773,  v3845,  v3915,  v3983,  v4049,  v4113,  v4175,  v4235,  v4293,  v4349,  v4403,  v4455,  v4505,  v4553,
                     v4599,
                     v4643,
                     v4685,
                     v4725,
                     v4763,
                     v4799,
                     v4833,
                     v4865,
                     v4895);
            uint64_t v311 = sub_100043988( v303,  v304,  v305,  v306,  v307,  v308,  v309,  v310,  v1242,  v1345,  v1448,  v1551,  v1654,  v1757,  v1859,  v1961,  v2063,  v2164,  v2265,  v2365,  v2464,  v2562,  v2659,  v2755,  v2850,  v2944,  v3036,  v3126,  v3214,  v3300,  v3384,  v3466,  v3546,  v3624,  v3700,  v3774,  v3846,  v3916,  v3984,  v4050,  v4114,  v4176,  v4236,  v4294,  v4350,  v4404,  v4456,  v4506,  v4554,
                     v4600,
                     v4644,
                     v4686,
                     v4726,
                     v4764,
                     v4800,
                     v4834,
                     v4866,
                     v4896,
                     v4924);
            uint64_t v319 = sub_100043980( v311,  v312,  v313,  v314,  v315,  v316,  v317,  v318,  v1243,  v1346,  v1449,  v1552,  v1655,  v1758,  v1860,  v1962,  v2064,  v2165,  v2266,  v2366,  v2465,  v2563,  v2660,  v2756,  v2851,  v2945,  v3037,  v3127,  v3215,  v3301,  v3385,  v3467,  v3547,  v3625,  v3701,  v3775,  v3847,  v3917,  v3985,  v4051,  v4115,  v4177,  v4237,  v4295,  v4351,  v4405,  v4457,  v4507,  v4555,
                     v4601,
                     v4645,
                     v4687,
                     v4727,
                     v4765,
                     v4801,
                     v4835,
                     v4867,
                     v4897,
                     v4925,
                     v4951);
            uint64_t v327 = sub_100043978( v319,  v320,  v321,  v322,  v323,  v324,  v325,  v326,  v1244,  v1347,  v1450,  v1553,  v1656,  v1759,  v1861,  v1963,  v2065,  v2166,  v2267,  v2367,  v2466,  v2564,  v2661,  v2757,  v2852,  v2946,  v3038,  v3128,  v3216,  v3302,  v3386,  v3468,  v3548,  v3626,  v3702,  v3776,  v3848,  v3918,  v3986,  v4052,  v4116,  v4178,  v4238,  v4296,  v4352,  v4406,  v4458,  v4508,  v4556,
                     v4602,
                     v4646,
                     v4688,
                     v4728,
                     v4766,
                     v4802,
                     v4836,
                     v4868,
                     v4898,
                     v4926,
                     v4952,
                     v4976);
            uint64_t v335 = sub_100043970( v327,  v328,  v329,  v330,  v331,  v332,  v333,  v334,  v1245,  v1348,  v1451,  v1554,  v1657,  v1760,  v1862,  v1964,  v2066,  v2167,  v2268,  v2368,  v2467,  v2565,  v2662,  v2758,  v2853,  v2947,  v3039,  v3129,  v3217,  v3303,  v3387,  v3469,  v3549,  v3627,  v3703,  v3777,  v3849,  v3919,  v3987,  v4053,  v4117,  v4179,  v4239,  v4297,  v4353,  v4407,  v4459,  v4509,  v4557,
                     v4603,
                     v4647,
                     v4689,
                     v4729,
                     v4767,
                     v4803,
                     v4837,
                     v4869,
                     v4899,
                     v4927,
                     v4953,
                     v4977,
                     v4999);
            uint64_t v343 = sub_100043968( v335,  v336,  v337,  v338,  v339,  v340,  v341,  v342,  v1246,  v1349,  v1452,  v1555,  v1658,  v1761,  v1863,  v1965,  v2067,  v2168,  v2269,  v2369,  v2468,  v2566,  v2663,  v2759,  v2854,  v2948,  v3040,  v3130,  v3218,  v3304,  v3388,  v3470,  v3550,  v3628,  v3704,  v3778,  v3850,  v3920,  v3988,  v4054,  v4118,  v4180,  v4240,  v4298,  v4354,  v4408,  v4460,  v4510,  v4558,
                     v4604,
                     v4648,
                     v4690,
                     v4730,
                     v4768,
                     v4804,
                     v4838,
                     v4870,
                     v4900,
                     v4928,
                     v4954,
                     v4978,
                     v5000,
                     v5020);
            uint64_t v351 = sub_100043960( v343,  v344,  v345,  v346,  v347,  v348,  v349,  v350,  v1247,  v1350,  v1453,  v1556,  v1659,  v1762,  v1864,  v1966,  v2068,  v2169,  v2270,  v2370,  v2469,  v2567,  v2664,  v2760,  v2855,  v2949,  v3041,  v3131,  v3219,  v3305,  v3389,  v3471,  v3551,  v3629,  v3705,  v3779,  v3851,  v3921,  v3989,  v4055,  v4119,  v4181,  v4241,  v4299,  v4355,  v4409,  v4461,  v4511,  v4559,
                     v4605,
                     v4649,
                     v4691,
                     v4731,
                     v4769,
                     v4805,
                     v4839,
                     v4871,
                     v4901,
                     v4929,
                     v4955,
                     v4979,
                     v5001,
                     v5021);
            uint64_t v359 = sub_100043958( v351,  v352,  v353,  v354,  v355,  v356,  v357,  v358,  v1248,  v1351,  v1454,  v1557,  v1660,  v1763,  v1865,  v1967,  v2069,  v2170,  v2271,  v2371,  v2470,  v2568,  v2665,  v2761,  v2856,  v2950,  v3042,  v3132,  v3220,  v3306,  v3390,  v3472,  v3552,  v3630,  v3706,  v3780,  v3852,  v3922,  v3990,  v4056,  v4120,  v4182,  v4242,  v4300,  v4356,  v4410,  v4462,  v4512,  v4560,
                     v4606,
                     v4650,
                     v4692,
                     v4732,
                     v4770,
                     v4806,
                     v4840,
                     v4872,
                     v4902,
                     v4930,
                     v4956,
                     v4980,
                     v5002,
                     v5022);
            uint64_t v367 = sub_100043950( v359,  v360,  v361,  v362,  v363,  v364,  v365,  v366,  v1249,  v1352,  v1455,  v1558,  v1661,  v1764,  v1866,  v1968,  v2070,  v2171,  v2272,  v2372,  v2471,  v2569,  v2666,  v2762,  v2857,  v2951,  v3043,  v3133,  v3221,  v3307,  v3391,  v3473,  v3553,  v3631,  v3707,  v3781,  v3853,  v3923,  v3991,  v4057,  v4121,  v4183,  v4243,  v4301,  v4357,  v4411,  v4463,  v4513,  v4561,
                     v4607,
                     v4651,
                     v4693,
                     v4733,
                     v4771,
                     v4807,
                     v4841,
                     v4873,
                     v4903,
                     v4931,
                     v4957,
                     v4981,
                     v5003,
                     v5023);
            uint64_t v375 = sub_100043948( v367,  v368,  v369,  v370,  v371,  v372,  v373,  v374,  v1250,  v1353,  v1456,  v1559,  v1662,  v1765,  v1867,  v1969,  v2071,  v2172,  v2273,  v2373,  v2472,  v2570,  v2667,  v2763,  v2858,  v2952,  v3044,  v3134,  v3222,  v3308,  v3392,  v3474,  v3554,  v3632,  v3708,  v3782,  v3854,  v3924,  v3992,  v4058,  v4122,  v4184,  v4244,  v4302,  v4358,  v4412,  v4464,  v4514,  v4562,
                     v4608,
                     v4652,
                     v4694,
                     v4734,
                     v4772,
                     v4808,
                     v4842,
                     v4874,
                     v4904,
                     v4932,
                     v4958,
                     v4982,
                     v5004,
                     v5024);
            uint64_t v383 = sub_100043940( v375,  v376,  v377,  v378,  v379,  v380,  v381,  v382,  v1251,  v1354,  v1457,  v1560,  v1663,  v1766,  v1868,  v1970,  v2072,  v2173,  v2274,  v2374,  v2473,  v2571,  v2668,  v2764,  v2859,  v2953,  v3045,  v3135,  v3223,  v3309,  v3393,  v3475,  v3555,  v3633,  v3709,  v3783,  v3855,  v3925,  v3993,  v4059,  v4123,  v4185,  v4245,  v4303,  v4359,  v4413,  v4465,  v4515,  v4563,
                     v4609,
                     v4653,
                     v4695,
                     v4735,
                     v4773,
                     v4809,
                     v4843,
                     v4875,
                     v4905,
                     v4933,
                     v4959,
                     v4983,
                     v5005,
                     v5025);
            uint64_t v391 = sub_100043E48( v383,  v384,  v385,  v386,  v387,  v388,  v389,  v390,  v1252,  v1355,  v1458,  v1561,  v1664,  v1767,  v1869,  v1971,  v2073,  v2174,  v2275,  v2375,  v2474,  v2572,  v2669,  v2765,  v2860,  v2954,  v3046,  v3136,  v3224,  v3310,  v3394,  v3476,  v3556,  v3634,  v3710,  v3784,  v3856,  v3926,  v3994,  v4060,  v4124,  v4186,  v4246,  v4304,  v4360,  v4414,  v4466,  v4516,  v4564,
                     v4610,
                     v4654,
                     v4696,
                     v4736,
                     v4774,
                     v4810,
                     v4844,
                     v4876,
                     v4906,
                     v4934,
                     v4960,
                     v4984,
                     v5006,
                     v5026);
            uint64_t v399 = sub_100043E40( v391,  v392,  v393,  v394,  v395,  v396,  v397,  v398,  v1253,  v1356,  v1459,  v1562,  v1665,  v1768,  v1870,  v1972,  v2074,  v2175,  v2276,  v2376,  v2475,  v2573,  v2670,  v2766,  v2861,  v2955,  v3047,  v3137,  v3225,  v3311,  v3395,  v3477,  v3557,  v3635,  v3711,  v3785,  v3857,  v3927,  v3995,  v4061,  v4125,  v4187,  v4247,  v4305,  v4361,  v4415,  v4467,  v4517,  v4565,
                     v4611,
                     v4655,
                     v4697,
                     v4737,
                     v4775,
                     v4811,
                     v4845,
                     v4877,
                     v4907,
                     v4935,
                     v4961,
                     v4985,
                     v5007,
                     v5027);
            uint64_t v407 = sub_100043E38( v399,  v400,  v401,  v402,  v403,  v404,  v405,  v406,  v1254,  v1357,  v1460,  v1563,  v1666,  v1769,  v1871,  v1973,  v2075,  v2176,  v2277,  v2377,  v2476,  v2574,  v2671,  v2767,  v2862,  v2956,  v3048,  v3138,  v3226,  v3312,  v3396,  v3478,  v3558,  v3636,  v3712,  v3786,  v3858,  v3928,  v3996,  v4062,  v4126,  v4188,  v4248,  v4306,  v4362,  v4416,  v4468,  v4518,  v4566,
                     v4612,
                     v4656,
                     v4698,
                     v4738,
                     v4776,
                     v4812,
                     v4846,
                     v4878,
                     v4908,
                     v4936,
                     v4962,
                     v4986,
                     v5008,
                     v5028);
            sub_100043E30( v407,  v408,  v409,  v410,  v411,  v412,  v413,  v414,  v1255,  v1358,  v1461,  v1564,  v1667,  v1770,  v1872,  v1974,  v2076,  v2177,  v2278,  v2378,  v2477,  v2575,  v2672,  v2768,  v2863,  v2957,  v3049,  v3139,  v3227,  v3313,  v3397,  v3479,  v3559,  v3637,  v3713,  v3787,  v3859,  v3929,  v3997,  v4063,  v4127,  v4189,  v4249,  v4307,  v4363,  v4417,  v4469,  v4519,  v4567,
              v4613,
              v4657,
              v4699,
              v4739,
              v4777,
              v4813,
              v4847,
              v4879,
              v4909,
              v4937,
              v4963,
              v4987,
              v5009,
              v5029);
            sub_100043E28();
            sub_100043E20();
            sub_100044828();
            sub_100045990();
            sub_100045988();
            sub_100044820();
            sub_100044818();
            sub_100044810();
            sub_100044808();
            sub_100044800();
            sub_100043938();
            sub_100043930();
            sub_100043928();
            sub_100043920();
            sub_100043D44();
            sub_100043DB4();
            sub_100043DAC();
            sub_100043EF0();
            sub_100043E50();
            uint64_t v415 = (uint64_t (*)(void))sub_100044674();
          }

          else
          {
            sub_100042F2C();
            uint64_t v725 = *(void *)(v5089 + 1272);
            uint64_t v726 = *(void *)(v5089 + 1256);
            uint64_t v727 = *(void *)(v5089 + 1248);
            sub_100042CF8(v728, v729);
            sub_1000447AC();
            sub_100044830();
            sub_1000445E4();
            uint64_t v730 = sub_10000F3F4();
            sub_1000431B8(v730, &qword_10006A388);
            uint64_t v739 = sub_100043F00(v731, v732, v733, v734, v735, v736, v737, v738, v1209, v1312, v1415, v1518, v1621);
            sub_100043F48( v739,  v740,  v741,  v742,  v743,  v744,  v745,  v746,  v1256,  v1359,  v1462,  v1565,  v1668,  v1724,  v1826,  v1928);
            sub_100043B64();
            sub_1000435DC();
            sub_100042E4C();
            sub_100043380(v726, *(uint64_t (**)(uint64_t, uint64_t))(v727 + 8));
            sub_100043A38();
            sub_100043910(v2030, *(uint64_t (**)(uint64_t, uint64_t))(v725 + 8));
            sub_100043B04();
            uint64_t v747 = sub_10000F404();
            uint64_t v755 = sub_1000435E4( v747,  v748,  v749,  v750,  v751,  v752,  v753,  v754,  v1257,  v1360,  v1463,  v1566,  v1669,  v1771,  v1873,  v1975,  v2030,  v2131);
            uint64_t v763 = sub_100043900( v755,  v756,  v757,  v758,  v759,  v760,  v761,  v762,  v1258,  v1361,  v1464,  v1567,  v1670,  v1772,  v1874,  v1976,  v2077,  v2178,  v2232);
            uint64_t v771 = sub_100043AE4( v763,  v764,  v765,  v766,  v767,  v768,  v769,  v770,  v1259,  v1362,  v1465,  v1568,  v1671,  v1773,  v1875,  v1977,  v2078,  v2179,  v2279,  v2332);
            uint64_t v779 = sub_100044AF4( v771,  v772,  v773,  v774,  v775,  v776,  v777,  v778,  v1260,  v1363,  v1466,  v1569,  v1672,  v1774,  v1876,  v1978,  v2079,  v2180,  v2280,  v2379,  v2431);
            sub_100044940( v779,  v780,  v781,  v782,  v783,  v784,  v785,  v786,  v1261,  v1364,  v1467,  v1570,  v1673,  v1775,  v1877,  v1979,  v2080,  v2181,  v2281,  v2380,  v2478,  v2529);
            uint64_t v787 = sub_10000F3F4();
            uint64_t v795 = sub_100043EE8( v787,  v788,  v789,  v790,  v791,  v792,  v793,  v794,  v1262,  v1365,  v1468,  v1571,  v1674,  v1776,  v1878,  v1980,  v2081,  v2182,  v2282,  v2381,  v2479,  v2576,  v2626,  v2722);
            uint64_t v803 = sub_100043F40( v795,  v796,  v797,  v798,  v799,  v800,  v801,  v802,  v1263,  v1366,  v1469,  v1572,  v1675,  v1777,  v1879,  v1981,  v2082,  v2183,  v2283,  v2382,  v2480,  v2577,  v2673,  v2769,  v2817);
            uint64_t v811 = sub_1000436E8( v803,  v804,  v805,  v806,  v807,  v808,  v809,  v810,  v1264,  v1367,  v1470,  v1573,  v1676,  v1778,  v1880,  v1982,  v2083,  v2184,  v2284,  v2383,  v2481,  v2578,  v2674,  v2770,  v2864,  v2911,  v3004);
            uint64_t v819 = sub_1000436C4( v811,  v812,  v813,  v814,  v815,  v816,  v817,  v818,  v1265,  v1368,  v1471,  v1574,  v1677,  v1779,  v1881,  v1983,  v2084,  v2185,  v2285,  v2384,  v2482,  v2579,  v2675,  v2771,  v2865,  v2958,  v3050,  v3095);
            uint64_t v827 = sub_100043658( v819,  v820,  v821,  v822,  v823,  v824,  v825,  v826,  v1266,  v1369,  v1472,  v1575,  v1678,  v1780,  v1882,  v1984,  v2085,  v2186,  v2286,  v2385,  v2483,  v2580,  v2676,  v2772,  v2866,  v2959,  v3051,  v3140,  v3184,  v3271);
            uint64_t v835 = sub_10004361C( v827,  v828,  v829,  v830,  v831,  v832,  v833,  v834,  v1267,  v1370,  v1473,  v1576,  v1679,  v1781,  v1883,  v1985,  v2086,  v2187,  v2287,  v2386,  v2484,  v2581,  v2677,  v2773,  v2867,  v2960,  v3052,  v3141,  v3228,  v3314,  v3356,  v3439);
            uint64_t v843 = sub_100043A48( v835,  v836,  v837,  v838,  v839,  v840,  v841,  v842,  v1268,  v1371,  v1474,  v1577,  v1680,  v1782,  v1884,  v1986,  v2087,  v2188,  v2288,  v2387,  v2485,  v2582,  v2678,  v2774,  v2868,  v2961,  v3053,  v3142,  v3229,  v3315,  v3398,  v3480,  v3520,  v3599);
            uint64_t v851 = sub_100043A40( v843,  v844,  v845,  v846,  v847,  v848,  v849,  v850,  v1269,  v1372,  v1475,  v1578,  v1681,  v1783,  v1885,  v1987,  v2088,  v2189,  v2289,  v2388,  v2486,  v2583,  v2679,  v2775,  v2869,  v2962,  v3054,  v3143,  v3230,  v3316,  v3399,  v3481,  v3560,  v3638,  v3676);
            uint64_t v859 = sub_10004384C( v851,  v852,  v853,  v854,  v855,  v856,  v857,  v858,  v1270,  v1373,  v1476,  v1579,  v1682,  v1784,  v1886,  v1988,  v2089,  v2190,  v2290,  v2389,  v2487,  v2584,  v2680,  v2776,  v2870,  v2963,  v3055,  v3144,  v3231,  v3317,  v3400,  v3482,  v3561,  v3639,  v3714,  v3751,  v3824);
            uint64_t v867 = sub_100043A28( v859,  v860,  v861,  v862,  v863,  v864,  v865,  v866,  v1271,  v1374,  v1477,  v1580,  v1683,  v1785,  v1887,  v1989,  v2090,  v2191,  v2291,  v2390,  v2488,  v2585,  v2681,  v2777,  v2871,  v2964,  v3056,  v3145,  v3232,  v3318,  v3401,  v3483,  v3562,  v3640,  v3715,  v3788,  v3860,  v3895,  v3964);
            uint64_t v875 = sub_100043A18( v867,  v868,  v869,  v870,  v871,  v872,  v873,  v874,  v1272,  v1375,  v1478,  v1581,  v1684,  v1786,  v1888,  v1990,  v2091,  v2192,  v2292,  v2391,  v2489,  v2586,  v2682,  v2778,  v2872,  v2965,  v3057,  v3146,  v3233,  v3319,  v3402,  v3484,  v3563,  v3641,  v3716,  v3789,  v3861,  v3930,  v3998,  v4031,  v4096);
            uint64_t v883 = sub_100043A08( v875,  v876,  v877,  v878,  v879,  v880,  v881,  v882,  v1273,  v1376,  v1479,  v1582,  v1685,  v1787,  v1889,  v1991,  v2092,  v2193,  v2293,  v2392,  v2490,  v2587,  v2683,  v2779,  v2873,  v2966,  v3058,  v3147,  v3234,  v3320,  v3403,  v3485,  v3564,  v3642,  v3717,  v3790,  v3862,  v3931,  v3999,  v4064,  v4128,  v4159,  v4220);
            uint64_t v891 = sub_1000439F8( v883,  v884,  v885,  v886,  v887,  v888,  v889,  v890,  v1274,  v1377,  v1480,  v1583,  v1686,  v1788,  v1890,  v1992,  v2093,  v2194,  v2294,  v2393,  v2491,  v2588,  v2684,  v2780,  v2874,  v2967,  v3059,  v3148,  v3235,  v3321,  v3404,  v3486,  v3565,  v3643,  v3718,  v3791,  v3863,  v3932,  v4000,  v4065,  v4129,  v4190,  v4250,  v4279,  v4336);
            uint64_t v899 = sub_1000439E8( v891,  v892,  v893,  v894,  v895,  v896,  v897,  v898,  v1275,  v1378,  v1481,  v1584,  v1687,  v1789,  v1891,  v1993,  v2094,  v2195,  v2295,  v2394,  v2492,  v2589,  v2685,  v2781,  v2875,  v2968,  v3060,  v3149,  v3236,  v3322,  v3405,  v3487,  v3566,  v3644,  v3719,  v3792,  v3864,  v3933,  v4001,  v4066,  v4130,  v4191,  v4251,  v4308,  v4364,  v4391,  v4444);
            uint64_t v907 = sub_1000439E0( v899,  v900,  v901,  v902,  v903,  v904,  v905,  v906,  v1276,  v1379,  v1482,  v1585,  v1688,  v1790,  v1892,  v1994,  v2095,  v2196,  v2296,  v2395,  v2493,  v2590,  v2686,  v2782,  v2876,  v2969,  v3061,  v3150,  v3237,  v3323,  v3406,  v3488,  v3567,  v3645,  v3720,  v3793,  v3865,  v3934,  v4002,  v4067,  v4131,  v4192,  v4252,  v4309,  v4365,  v4418,  v4470,  v4495);
            sub_1000439D0( v907,  v908,  v909,  v910,  v911,  v912,  v913,  v914,  v1277,  v1380,  v1483,  v1586,  v1689,  v1791,  v1893,  v1995,  v2096,  v2197,  v2297,  v2396,  v2494,  v2591,  v2687,  v2783,  v2877,  v2970,  v3062,  v3151,  v3238,  v3324,  v3407,  v3489,  v3568,  v3646,  v3721,  v3794,  v3866,  v3935,  v4003,  v4068,  v4132,  v4193,  v4253,  v4310,  v4366,  v4419,  v4471,  v4520,  v4544,
              v4591);
            sub_10000F4EC();
            uint64_t v915 = sub_10000F338();
            uint64_t v923 = sub_1000439B8( v915,  v916,  v917,  v918,  v919,  v920,  v921,  v922,  v1278,  v1381,  v1484,  v1587,  v1690,  v1792,  v1894,  v1996,  v2097,  v2198,  v2298,  v2397,  v2495,  v2592,  v2688,  v2784,  v2878,  v2971,  v3063,  v3152,  v3239,  v3325,  v3408,  v3490,  v3569,  v3647,  v3722,  v3795,  v3867,  v3936,  v4004,  v4069,  v4133,  v4194,  v4254,  v4311,  v4367,  v4420,  v4472,  v4521,  v4568,
                     v4614,
                     v4636,
                     v4679,
                     v4720);
            sub_1000439A8( v923,  v924,  v925,  v926,  v927,  v928,  v929,  v930,  v1279,  v1382,  v1485,  v1588,  v1691,  v1793,  v1895,  v1997,  v2098,  v2199,  v2299,  v2398,  v2496,  v2593,  v2689,  v2785,  v2879,  v2972,  v3064,  v3153,  v3240,  v3326,  v3409,  v3491,  v3570,  v3648,  v3723,  v3796,  v3868,  v3937,  v4005,  v4070,  v4134,  v4195,  v4255,  v4312,  v4368,  v4421,  v4473,  v4522,  v4569,
              v4615,
              v4658,
              v4700,
              v4740,
              v4759,
              v4796);
            uint64_t v931 = sub_10000F484();
            uint64_t v939 = sub_1000436F0( v931,  v932,  v933,  v934,  v935,  v936,  v937,  v938,  v1280,  v1383,  v1486,  v1589,  v1692,  v1794,  v1896,  v1998,  v2099,  v2200,  v2300,  v2399,  v2497,  v2594,  v2690,  v2786,  v2880,  v2973);
            uint64_t v947 = sub_100043624( v939,  v940,  v941,  v942,  v943,  v944,  v945,  v946,  v1281,  v1384,  v1487,  v1590,  v1693,  v1795,  v1897,  v1999,  v2100,  v2201,  v2301,  v2400,  v2498,  v2595,  v2691,  v2787,  v2881,  v2974,  v3065,  v3154,  v3241);
            uint64_t v955 = sub_100043660( v947,  v948,  v949,  v950,  v951,  v952,  v953,  v954,  v1282,  v1385,  v1488,  v1591,  v1694,  v1796,  v1898,  v2000,  v2101,  v2202,  v2302,  v2401,  v2499,  v2596,  v2692,  v2788,  v2882,  v2975,  v3066,  v3155,  v3242,  v3327,  v3410);
            uint64_t v963 = sub_100043614( v955,  v956,  v957,  v958,  v959,  v960,  v961,  v962,  v1283,  v1386,  v1489,  v1592,  v1695,  v1797,  v1899,  v2001,  v2102,  v2203,  v2303,  v2402,  v2500,  v2597,  v2693,  v2789,  v2883,  v2976,  v3067,  v3156,  v3243,  v3328,  v3411,  v3492,  v3571);
            uint64_t v971 = sub_1000437F8( v963,  v964,  v965,  v966,  v967,  v968,  v969,  v970,  v1284,  v1387,  v1490,  v1593,  v1696,  v1798,  v1900,  v2002,  v2103,  v2204,  v2304,  v2403,  v2501,  v2598,  v2694,  v2790,  v2884,  v2977,  v3068,  v3157,  v3244,  v3329,  v3412,  v3493,  v3572,  v3649,  v3724,  v3797);
            uint64_t v979 = sub_100043A30( v971,  v972,  v973,  v974,  v975,  v976,  v977,  v978,  v1285,  v1388,  v1491,  v1594,  v1697,  v1799,  v1901,  v2003,  v2104,  v2205,  v2305,  v2404,  v2502,  v2599,  v2695,  v2791,  v2885,  v2978,  v3069,  v3158,  v3245,  v3330,  v3413,  v3494,  v3573,  v3650,  v3725,  v3798,  v3869,  v3938);
            uint64_t v987 = sub_100043A20( v979,  v980,  v981,  v982,  v983,  v984,  v985,  v986,  v1286,  v1389,  v1492,  v1595,  v1698,  v1800,  v1902,  v2004,  v2105,  v2206,  v2306,  v2405,  v2503,  v2600,  v2696,  v2792,  v2886,  v2979,  v3070,  v3159,  v3246,  v3331,  v3414,  v3495,  v3574,  v3651,  v3726,  v3799,  v3870,  v3939,  v4006,  v4071);
            uint64_t v995 = sub_100043A10( v987,  v988,  v989,  v990,  v991,  v992,  v993,  v994,  v1287,  v1390,  v1493,  v1596,  v1699,  v1801,  v1903,  v2005,  v2106,  v2207,  v2307,  v2406,  v2504,  v2601,  v2697,  v2793,  v2887,  v2980,  v3071,  v3160,  v3247,  v3332,  v3415,  v3496,  v3575,  v3652,  v3727,  v3800,  v3871,  v3940,  v4007,  v4072,  v4135,  v4196);
            uint64_t v1003 = sub_100043A00( v995,  v996,  v997,  v998,  v999,  v1000,  v1001,  v1002,  v1288,  v1391,  v1494,  v1597,  v1700,  v1802,  v1904,  v2006,  v2107,  v2208,  v2308,  v2407,  v2505,  v2602,  v2698,  v2794,  v2888,  v2981,  v3072,  v3161,  v3248,  v3333,  v3416,  v3497,  v3576,  v3653,  v3728,  v3801,  v3872,  v3941,  v4008,  v4073,  v4136,  v4197,  v4256,  v4313);
            uint64_t v1011 = sub_1000439F0( v1003,  v1004,  v1005,  v1006,  v1007,  v1008,  v1009,  v1010,  v1289,  v1392,  v1495,  v1598,  v1701,  v1803,  v1905,  v2007,  v2108,  v2209,  v2309,  v2408,  v2506,  v2603,  v2699,  v2795,  v2889,  v2982,  v3073,  v3162,  v3249,  v3334,  v3417,  v3498,  v3577,  v3654,  v3729,  v3802,  v3873,  v3942,  v4009,  v4074,  v4137,  v4198,  v4257,  v4314,  v4369,  v4422);
            uint64_t v1019 = sub_1000439D8( v1011,  v1012,  v1013,  v1014,  v1015,  v1016,  v1017,  v1018,  v1290,  v1393,  v1496,  v1599,  v1702,  v1804,  v1906,  v2008,  v2109,  v2210,  v2310,  v2409,  v2507,  v2604,  v2700,  v2796,  v2890,  v2983,  v3074,  v3163,  v3250,  v3335,  v3418,  v3499,  v3578,  v3655,  v3730,  v3803,  v3874,  v3943,  v4010,  v4075,  v4138,  v4199,  v4258,  v4315,  v4370,  v4423,  v4474,  v4523,  v4570);
            uint64_t v1027 = sub_1000439C8( v1019,  v1020,  v1021,  v1022,  v1023,  v1024,  v1025,  v1026,  v1291,  v1394,  v1497,  v1600,  v1703,  v1805,  v1907,  v2009,  v2110,  v2211,  v2311,  v2410,  v2508,  v2605,  v2701,  v2797,  v2891,  v2984,  v3075,  v3164,  v3251,  v3336,  v3419,  v3500,  v3579,  v3656,  v3731,  v3804,  v3875,  v3944,  v4011,  v4076,  v4139,  v4200,  v4259,  v4316,  v4371,  v4424,  v4475,  v4524,  v4571,
                      v4616,
                      v4659);
            uint64_t v1035 = sub_1000439C0( v1027,  v1028,  v1029,  v1030,  v1031,  v1032,  v1033,  v1034,  v1292,  v1395,  v1498,  v1601,  v1704,  v1806,  v1908,  v2010,  v2111,  v2212,  v2312,  v2411,  v2509,  v2606,  v2702,  v2798,  v2892,  v2985,  v3076,  v3165,  v3252,  v3337,  v3420,  v3501,  v3580,  v3657,  v3732,  v3805,  v3876,  v3945,  v4012,  v4077,  v4140,  v4201,  v4260,  v4317,  v4372,  v4425,  v4476,  v4525,  v4572,
                      v4617,
                      v4660,
                      v4701);
            uint64_t v1043 = sub_1000439B0( v1035,  v1036,  v1037,  v1038,  v1039,  v1040,  v1041,  v1042,  v1293,  v1396,  v1499,  v1602,  v1705,  v1807,  v1909,  v2011,  v2112,  v2213,  v2313,  v2412,  v2510,  v2607,  v2703,  v2799,  v2893,  v2986,  v3077,  v3166,  v3253,  v3338,  v3421,  v3502,  v3581,  v3658,  v3733,  v3806,  v3877,  v3946,  v4013,  v4078,  v4141,  v4202,  v4261,  v4318,  v4373,  v4426,  v4477,  v4526,  v4573,
                      v4618,
                      v4661,
                      v4702,
                      v4741,
                      v4778);
            uint64_t v1051 = sub_1000439A0( v1043,  v1044,  v1045,  v1046,  v1047,  v1048,  v1049,  v1050,  v1294,  v1397,  v1500,  v1603,  v1706,  v1808,  v1910,  v2012,  v2113,  v2214,  v2314,  v2413,  v2511,  v2608,  v2704,  v2800,  v2894,  v2987,  v3078,  v3167,  v3254,  v3339,  v3422,  v3503,  v3582,  v3659,  v3734,  v3807,  v3878,  v3947,  v4014,  v4079,  v4142,  v4203,  v4262,  v4319,  v4374,  v4427,  v4478,  v4527,  v4574,
                      v4619,
                      v4662,
                      v4703,
                      v4742,
                      v4779,
                      v4814,
                      v4831);
            uint64_t v1059 = sub_100043998( v1051,  v1052,  v1053,  v1054,  v1055,  v1056,  v1057,  v1058,  v1295,  v1398,  v1501,  v1604,  v1707,  v1809,  v1911,  v2013,  v2114,  v2215,  v2315,  v2414,  v2512,  v2609,  v2705,  v2801,  v2895,  v2988,  v3079,  v3168,  v3255,  v3340,  v3423,  v3504,  v3583,  v3660,  v3735,  v3808,  v3879,  v3948,  v4015,  v4080,  v4143,  v4204,  v4263,  v4320,  v4375,  v4428,  v4479,  v4528,  v4575,
                      v4620,
                      v4663,
                      v4704,
                      v4743,
                      v4780,
                      v4815,
                      v4848,
                      v4864);
            uint64_t v1067 = sub_100043990( v1059,  v1060,  v1061,  v1062,  v1063,  v1064,  v1065,  v1066,  v1296,  v1399,  v1502,  v1605,  v1708,  v1810,  v1912,  v2014,  v2115,  v2216,  v2316,  v2415,  v2513,  v2610,  v2706,  v2802,  v2896,  v2989,  v3080,  v3169,  v3256,  v3341,  v3424,  v3505,  v3584,  v3661,  v3736,  v3809,  v3880,  v3949,  v4016,  v4081,  v4144,  v4205,  v4264,  v4321,  v4376,  v4429,  v4480,  v4529,  v4576,
                      v4621,
                      v4664,
                      v4705,
                      v4744,
                      v4781,
                      v4816,
                      v4849,
                      v4880,
                      v4895);
            uint64_t v1075 = sub_100043988( v1067,  v1068,  v1069,  v1070,  v1071,  v1072,  v1073,  v1074,  v1297,  v1400,  v1503,  v1606,  v1709,  v1811,  v1913,  v2015,  v2116,  v2217,  v2317,  v2416,  v2514,  v2611,  v2707,  v2803,  v2897,  v2990,  v3081,  v3170,  v3257,  v3342,  v3425,  v3506,  v3585,  v3662,  v3737,  v3810,  v3881,  v3950,  v4017,  v4082,  v4145,  v4206,  v4265,  v4322,  v4377,  v4430,  v4481,  v4530,  v4577,
                      v4622,
                      v4665,
                      v4706,
                      v4745,
                      v4782,
                      v4817,
                      v4850,
                      v4881,
                      v4910,
                      v4924);
            uint64_t v1083 = sub_100043980( v1075,  v1076,  v1077,  v1078,  v1079,  v1080,  v1081,  v1082,  v1298,  v1401,  v1504,  v1607,  v1710,  v1812,  v1914,  v2016,  v2117,  v2218,  v2318,  v2417,  v2515,  v2612,  v2708,  v2804,  v2898,  v2991,  v3082,  v3171,  v3258,  v3343,  v3426,  v3507,  v3586,  v3663,  v3738,  v3811,  v3882,  v3951,  v4018,  v4083,  v4146,  v4207,  v4266,  v4323,  v4378,  v4431,  v4482,  v4531,  v4578,
                      v4623,
                      v4666,
                      v4707,
                      v4746,
                      v4783,
                      v4818,
                      v4851,
                      v4882,
                      v4911,
                      v4938,
                      v4951);
            uint64_t v1091 = sub_100043978( v1083,  v1084,  v1085,  v1086,  v1087,  v1088,  v1089,  v1090,  v1299,  v1402,  v1505,  v1608,  v1711,  v1813,  v1915,  v2017,  v2118,  v2219,  v2319,  v2418,  v2516,  v2613,  v2709,  v2805,  v2899,  v2992,  v3083,  v3172,  v3259,  v3344,  v3427,  v3508,  v3587,  v3664,  v3739,  v3812,  v3883,  v3952,  v4019,  v4084,  v4147,  v4208,  v4267,  v4324,  v4379,  v4432,  v4483,  v4532,  v4579,
                      v4624,
                      v4667,
                      v4708,
                      v4747,
                      v4784,
                      v4819,
                      v4852,
                      v4883,
                      v4912,
                      v4939,
                      v4964,
                      v4976);
            uint64_t v1099 = sub_100043970( v1091,  v1092,  v1093,  v1094,  v1095,  v1096,  v1097,  v1098,  v1300,  v1403,  v1506,  v1609,  v1712,  v1814,  v1916,  v2018,  v2119,  v2220,  v2320,  v2419,  v2517,  v2614,  v2710,  v2806,  v2900,  v2993,  v3084,  v3173,  v3260,  v3345,  v3428,  v3509,  v3588,  v3665,  v3740,  v3813,  v3884,  v3953,  v4020,  v4085,  v4148,  v4209,  v4268,  v4325,  v4380,  v4433,  v4484,  v4533,  v4580,
                      v4625,
                      v4668,
                      v4709,
                      v4748,
                      v4785,
                      v4820,
                      v4853,
                      v4884,
                      v4913,
                      v4940,
                      v4965,
                      v4988,
                      v4999);
            uint64_t v1107 = sub_100043968( v1099,  v1100,  v1101,  v1102,  v1103,  v1104,  v1105,  v1106,  v1301,  v1404,  v1507,  v1610,  v1713,  v1815,  v1917,  v2019,  v2120,  v2221,  v2321,  v2420,  v2518,  v2615,  v2711,  v2807,  v2901,  v2994,  v3085,  v3174,  v3261,  v3346,  v3429,  v3510,  v3589,  v3666,  v3741,  v3814,  v3885,  v3954,  v4021,  v4086,  v4149,  v4210,  v4269,  v4326,  v4381,  v4434,  v4485,  v4534,  v4581,
                      v4626,
                      v4669,
                      v4710,
                      v4749,
                      v4786,
                      v4821,
                      v4854,
                      v4885,
                      v4914,
                      v4941,
                      v4966,
                      v4989,
                      v5010,
                      v5020);
            uint64_t v1115 = sub_100043960( v1107,  v1108,  v1109,  v1110,  v1111,  v1112,  v1113,  v1114,  v1302,  v1405,  v1508,  v1611,  v1714,  v1816,  v1918,  v2020,  v2121,  v2222,  v2322,  v2421,  v2519,  v2616,  v2712,  v2808,  v2902,  v2995,  v3086,  v3175,  v3262,  v3347,  v3430,  v3511,  v3590,  v3667,  v3742,  v3815,  v3886,  v3955,  v4022,  v4087,  v4150,  v4211,  v4270,  v4327,  v4382,  v4435,  v4486,  v4535,  v4582,
                      v4627,
                      v4670,
                      v4711,
                      v4750,
                      v4787,
                      v4822,
                      v4855,
                      v4886,
                      v4915,
                      v4942,
                      v4967,
                      v4990,
                      v5011,
                      v5030);
            uint64_t v1123 = sub_100043958( v1115,  v1116,  v1117,  v1118,  v1119,  v1120,  v1121,  v1122,  v1303,  v1406,  v1509,  v1612,  v1715,  v1817,  v1919,  v2021,  v2122,  v2223,  v2323,  v2422,  v2520,  v2617,  v2713,  v2809,  v2903,  v2996,  v3087,  v3176,  v3263,  v3348,  v3431,  v3512,  v3591,  v3668,  v3743,  v3816,  v3887,  v3956,  v4023,  v4088,  v4151,  v4212,  v4271,  v4328,  v4383,  v4436,  v4487,  v4536,  v4583,
                      v4628,
                      v4671,
                      v4712,
                      v4751,
                      v4788,
                      v4823,
                      v4856,
                      v4887,
                      v4916,
                      v4943,
                      v4968,
                      v4991,
                      v5012,
                      v5031);
            uint64_t v1131 = sub_100043950( v1123,  v1124,  v1125,  v1126,  v1127,  v1128,  v1129,  v1130,  v1304,  v1407,  v1510,  v1613,  v1716,  v1818,  v1920,  v2022,  v2123,  v2224,  v2324,  v2423,  v2521,  v2618,  v2714,  v2810,  v2904,  v2997,  v3088,  v3177,  v3264,  v3349,  v3432,  v3513,  v3592,  v3669,  v3744,  v3817,  v3888,  v3957,  v4024,  v4089,  v4152,  v4213,  v4272,  v4329,  v4384,  v4437,  v4488,  v4537,  v4584,
                      v4629,
                      v4672,
                      v4713,
                      v4752,
                      v4789,
                      v4824,
                      v4857,
                      v4888,
                      v4917,
                      v4944,
                      v4969,
                      v4992,
                      v5013,
                      v5032);
            uint64_t v1139 = sub_100043948( v1131,  v1132,  v1133,  v1134,  v1135,  v1136,  v1137,  v1138,  v1305,  v1408,  v1511,  v1614,  v1717,  v1819,  v1921,  v2023,  v2124,  v2225,  v2325,  v2424,  v2522,  v2619,  v2715,  v2811,  v2905,  v2998,  v3089,  v3178,  v3265,  v3350,  v3433,  v3514,  v3593,  v3670,  v3745,  v3818,  v3889,  v3958,  v4025,  v4090,  v4153,  v4214,  v4273,  v4330,  v4385,  v4438,  v4489,  v4538,  v4585,
                      v4630,
                      v4673,
                      v4714,
                      v4753,
                      v4790,
                      v4825,
                      v4858,
                      v4889,
                      v4918,
                      v4945,
                      v4970,
                      v4993,
                      v5014,
                      v5033);
            uint64_t v1147 = sub_100043940( v1139,  v1140,  v1141,  v1142,  v1143,  v1144,  v1145,  v1146,  v1306,  v1409,  v1512,  v1615,  v1718,  v1820,  v1922,  v2024,  v2125,  v2226,  v2326,  v2425,  v2523,  v2620,  v2716,  v2812,  v2906,  v2999,  v3090,  v3179,  v3266,  v3351,  v3434,  v3515,  v3594,  v3671,  v3746,  v3819,  v3890,  v3959,  v4026,  v4091,  v4154,  v4215,  v4274,  v4331,  v4386,  v4439,  v4490,  v4539,  v4586,
                      v4631,
                      v4674,
                      v4715,
                      v4754,
                      v4791,
                      v4826,
                      v4859,
                      v4890,
                      v4919,
                      v4946,
                      v4971,
                      v4994,
                      v5015,
                      v5034);
            uint64_t v1155 = sub_100043E48( v1147,  v1148,  v1149,  v1150,  v1151,  v1152,  v1153,  v1154,  v1307,  v1410,  v1513,  v1616,  v1719,  v1821,  v1923,  v2025,  v2126,  v2227,  v2327,  v2426,  v2524,  v2621,  v2717,  v2813,  v2907,  v3000,  v3091,  v3180,  v3267,  v3352,  v3435,  v3516,  v3595,  v3672,  v3747,  v3820,  v3891,  v3960,  v4027,  v4092,  v4155,  v4216,  v4275,  v4332,  v4387,  v4440,  v4491,  v4540,  v4587,
                      v4632,
                      v4675,
                      v4716,
                      v4755,
                      v4792,
                      v4827,
                      v4860,
                      v4891,
                      v4920,
                      v4947,
                      v4972,
                      v4995,
                      v5016,
                      v5035);
            uint64_t v1163 = sub_100043E40( v1155,  v1156,  v1157,  v1158,  v1159,  v1160,  v1161,  v1162,  v1308,  v1411,  v1514,  v1617,  v1720,  v1822,  v1924,  v2026,  v2127,  v2228,  v2328,  v2427,  v2525,  v2622,  v2718,  v2814,  v2908,  v3001,  v3092,  v3181,  v3268,  v3353,  v3436,  v3517,  v3596,  v3673,  v3748,  v3821,  v3892,  v3961,  v4028,  v4093,  v4156,  v4217,  v4276,  v4333,  v4388,  v4441,  v4492,  v4541,  v4588,
                      v4633,
                      v4676,
                      v4717,
                      v4756,
                      v4793,
                      v4828,
                      v4861,
                      v4892,
                      v4921,
                      v4948,
                      v4973,
                      v4996,
                      v5017,
                      v5036);
            uint64_t v1171 = sub_100043E38( v1163,  v1164,  v1165,  v1166,  v1167,  v1168,  v1169,  v1170,  v1309,  v1412,  v1515,  v1618,  v1721,  v1823,  v1925,  v2027,  v2128,  v2229,  v2329,  v2428,  v2526,  v2623,  v2719,  v2815,  v2909,  v3002,  v3093,  v3182,  v3269,  v3354,  v3437,  v3518,  v3597,  v3674,  v3749,  v3822,  v3893,  v3962,  v4029,  v4094,  v4157,  v4218,  v4277,  v4334,  v4389,  v4442,  v4493,  v4542,  v4589,
                      v4634,
                      v4677,
                      v4718,
                      v4757,
                      v4794,
                      v4829,
                      v4862,
                      v4893,
                      v4922,
                      v4949,
                      v4974,
                      v4997,
                      v5018,
                      v5037);
            sub_100043E30( v1171,  v1172,  v1173,  v1174,  v1175,  v1176,  v1177,  v1178,  v1310,  v1413,  v1516,  v1619,  v1722,  v1824,  v1926,  v2028,  v2129,  v2230,  v2330,  v2429,  v2527,  v2624,  v2720,  v2816,  v2910,  v3003,  v3094,  v3183,  v3270,  v3355,  v3438,  v3519,  v3598,  v3675,  v3750,  v3823,  v3894,  v3963,  v4030,  v4095,  v4158,  v4219,  v4278,  v4335,  v4390,  v4443,  v4494,  v4543,  v4590,
              v4635,
              v4678,
              v4719,
              v4758,
              v4795,
              v4830,
              v4863,
              v4894,
              v4923,
              v4950,
              v4975,
              v4998,
              v5019,
              v5038);
            sub_100043E28();
            sub_100043E20();
            sub_100044828();
            uint64_t v1179 = sub_100045990();
            sub_100044584( v1179,  v1180,  v1181,  v1182,  v1183,  v1184,  v1185,  v1186,  v1311,  v1414,  v1517,  v1620,  v1723,  v1825,  v1927,  v2029,  v2130,  v2231,  v2331,  v2430,  v2528,  v2625,  v2721);
            sub_100045988();
            sub_100044820();
            sub_100044818();
            sub_100044810();
            sub_100044808();
            sub_100044800();
            sub_100043938();
            sub_100043930();
            sub_100043928();
            sub_100043920();
            sub_100043D44();
            uint64_t v415 = (uint64_t (*)(void))sub_10000F588();
          }

          sub_10000F308(v415);
          return;
        }

        uint64_t v479 = sub_1000469E8(v478);
        ((void (*)(uint64_t, uint64_t))v445)(v479, v447 + 416);
        sub_1000431C0();
      }

      if (__OFADD__(v452, 1LL))
      {
        __break(1u);
        goto LABEL_260;
      }

      sub_100044338((uint64_t)(v452 + 1));
      sub_100046CF4();
      sub_100045D50();
      sub_100040370(&qword_10006A410, (uint64_t (*)(uint64_t))&type metadata accessor for ToolVisibilityFlag);
      uint64_t v471 = sub_1000459E8(v480);
      sub_100044AB8(v454);
      if ((v471 & 1) != 0)
      {
        sub_1000446D4();
        if (sub_100045EB4((id)v471, "visibleForUse:"))
        {
          sub_10004582C();
          sub_100046524();
          sub_100046128();
          sub_100045748();
          uint64_t v481 = sub_100043C68();
          uint64_t v482 = sub_1000449DC(v481);
          if ((v483 & 1) != 0)
          {
            uint64_t v493 = *(void *)(v447 + 1208);
            uint64_t v471 = *(void *)(v447 + 1200);
            sub_10004497C(*(void *)(v447 + 1192));
            sub_100043CDC(v417);
            sub_100043CDC(v493);
            sub_1000450AC(v493);
            uint64_t v454 = v5086;
          }

          else
          {
            sub_100044714(v482, *(void *)(v447 + 1192));
          }

          sub_100043830(*(_BYTE **)(v447 + 1128));
          sub_100044AB8(v471);
          uint64_t v492 = (uint64_t *)(v447 + 1200);
          goto LABEL_73;
        }
      }

      else
      {
        uint64_t v471 = *(void *)(v447 + 1208);
        uint64_t v454 = *(void *)(v447 + 1144);
        sub_10004652C();
        char v484 = sub_100043C50();
        sub_10004497C(v471);
        if ((v484 & 1) == 0)
        {
          sub_100046694();
          char v488 = sub_100043C50();
          sub_10004497C(v471);
          if ((v488 & 1) == 0)
          {
            sub_1000463C8();
            uint64_t v611 = sub_100045D64();
            sub_1000456E8(v611, v612);
            sub_100044C44();
            sub_100044CC4(v613);
            sub_100040370( &qword_10006A418,  (uint64_t (*)(uint64_t))&type metadata accessor for ToolVisibilityFlag);
            v5091._countAndFlagsBits = sub_100047670(v614);
            sub_100044AE0(v5091);
            sub_100043174();
            sub_100045CA0();
            sub_100043B6C();
            goto LABEL_158;
          }

          uint64_t v489 = *(void *)(v447 + 1208);
          uint64_t v471 = *(void *)(v447 + 1168);
          uint64_t v417 = *(void *)(v447 + 1144);
          sub_1000449FC(*(void *)(v447 + 1216));
          sub_100047834(v489);
          sub_100046524();
          uint64_t v490 = sub_100045488();
          uint64_t v454 = dispatch thunk of SetAlgebra.isSuperset(of:)(v490, v491, v5060);
          sub_1000449FC(v471);
          sub_1000449FC(v489);
          sub_100045E38();
          sub_100046D90();
          sub_1000449FC(v471);
          uint64_t v492 = (uint64_t *)v5041;
          goto LABEL_74;
        }

        sub_1000446D4();
        if (sub_100045E08((id)v471, "visibleForUse:"))
        {
          sub_100045E1C();
          sub_10004652C();
          sub_100046DBC();
          sub_100045748();
          uint64_t v485 = sub_100043C68();
          uint64_t v486 = sub_1000449DC(v485);
          if ((v487 & 1) != 0)
          {
            uint64_t v494 = *(void *)(v447 + 1208);
            uint64_t v471 = *(void *)(v447 + 1184);
            sub_10004497C(*(void *)(v447 + 1176));
            sub_100043CDC(v417);
            sub_100043CDC(v494);
            sub_1000450AC(v494);
            uint64_t v454 = v5086;
          }

          else
          {
            sub_100044714(v486, *(void *)(v447 + 1176));
          }

          sub_100043830(*(_BYTE **)(v447 + 1128));
          sub_100044AB8(v471);
          uint64_t v492 = v5043;
LABEL_73:
          uint64_t v443 = v5046;
LABEL_74:
          sub_100046700(*v492);
        }
      }

                __break(1u);
              }

              uint64_t v14 = v9 + 5;
            }
          }
        }
      }

LABEL_75:
      sub_100046700(*(void *)(v447 + 1224));
      ++v452;
      sub_1000465F0();
    }

    while (!v533);
  }

  uint64_t v495 = *(void **)(v447 + 576);
  sub_10004581C();
  sub_10000F568();
  uint64_t v496 = sub_100042644((uint64_t)&unk_100066638, 24LL);
  sub_1000465E0(v496);
  uint64_t v497 = sub_100042644((uint64_t)&unk_100066660, 32LL);
  *(void *)(v497 + 16) = sub_100040F24;
  *(void *)(v497 + 24) = v443;
  id v498 = v495;
  sub_100045D98(v443);
  uint64_t v499 = Logger.logObject.getter(v498);
  os_log_type_t v5061 = sub_100045C58(v499);
  uint64_t v500 = sub_100042644((uint64_t)&unk_100066688, 17LL);
  *(_BYTE *)(v500 + 16) = 32;
  uint64_t v501 = (_BYTE *)sub_100042644((uint64_t)&unk_1000666B0, 17LL);
  v501[16] = 8;
  uint64_t v443 = sub_100042644((uint64_t)&unk_1000666D8, 32LL);
  *(void *)(v443 + 16) = sub_1000421D0;
  *(void *)(v443 + 24) = v452;
  uint64_t v502 = sub_100042644((uint64_t)&unk_100066700, 32LL);
  *(void *)(v502 + 16) = sub_100040F3C;
  *(void *)(v502 + 24) = v443;
  uint64_t v503 = sub_100042644((uint64_t)&unk_100066728, 17LL);
  *(_BYTE *)(v503 + 16) = 32;
  uint64_t v504 = sub_100042644((uint64_t)&unk_100066750, 17LL);
  *(_BYTE *)(v504 + 16) = 8;
  uint64_t v505 = sub_100042644((uint64_t)&unk_100066778, 32LL);
  *(void *)(v505 + 16) = sub_100040F2C;
  *(void *)(v505 + 24) = v497;
  uint64_t v506 = sub_100042644((uint64_t)&unk_1000667A0, 32LL);
  *(void *)(v506 + 16) = sub_100042178;
  *(void *)(v506 + 24) = v505;
  uint64_t v507 = sub_10000844C((uint64_t *)&unk_10006A360);
  uint64_t v508 = sub_100047388(v507);
  *(_OWORD *)(v508 + 16) = xmmword_100059850;
  *(void *)(v508 + 32) = sub_1000421D8;
  *(void *)(v508 + 40) = v500;
  *(void *)(v508 + 48) = sub_1000421D8;
  *(void *)(v508 + 56) = v501;
  *(void *)(v508 + 64) = sub_100042184;
  *(void *)(v508 + 72) = v502;
  *(void *)(v508 + 80) = sub_1000421D8;
  *(void *)(v508 + 88) = v503;
  *(void *)(v508 + 96) = sub_1000421D8;
  *(void *)(v508 + 104) = v504;
  *(void *)(v508 + 112) = sub_100042184;
  *(void *)(v508 + 120) = v506;
  sub_100045D00();
  HIDWORD(v5069) = HIDWORD(v443);
  sub_10004735C(v443);
  uint64_t v5083 = v497;
  sub_100044B34();
  uint64_t v5077 = v505;
  sub_100044D54();
  uint64_t v509 = (char *)v500;
  sub_100044EE0();
  sub_100044AFC();
  uint64_t v510 = (os_log_s *)v502;
  sub_100043D5C();
  sub_100044400();
  sub_1000442F4();
  sub_1000446A0();
  sub_100043D74();
  if (sub_1000465B0(v5061))
  {
    sub_100046214();
    uint64_t v5048 = v511;
    uint64_t v5039 = v512;
    v5040 = *(uint64_t (***)(uint64_t, uint64_t))(v500 + 1152);
    v5044 = *(char **)(v500 + 1144);
    uint64_t v5055 = *(void *)(v500 + 1104);
    uint64_t v5057 = *(void *)(v500 + 1088);
    uint64_t v5062 = *(void *)(v500 + 1080);
    uint64_t v445 = sub_100044BAC();
    uint64_t v5051 = sub_10000D524(64LL);
    v5090[0] = v5051;
    *(_WORD *)uint64_t v445 = 514;
    *(_BYTE *)(v445 + 2) = 32;
    sub_100043B50();
    *(_BYTE *)(v445 + 3) = 8;
    sub_100043C48();
    id v513 = sub_100045778();
    sub_100046E8C((uint64_t)v513);
    sub_100047810();
    *(void *)(v500 + 528) = sub_1000460E4(v514, v515, v5090);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v5039, v5042);
    sub_1000432F0();
    sub_100043DA4();
    sub_100043BF8();
    sub_1000435DC();

    *(_BYTE *)(v445 + 12) = 32;
    sub_100043F84();
    *(_BYTE *)(v445 + 13) = 8;
    sub_100043DD0();
    sub_100043154(0x100065000LL, v5041);
    uint64_t v510 = (os_log_s *)v5040;
    uint64_t v516 = sub_100046D74();
    uint64_t v509 = v5044;
    sub_10000F538(v516, v517, v518);
    sub_100040370(&qword_10006A418, (uint64_t (*)(uint64_t))&type metadata accessor for ToolVisibilityFlag);
    sub_10004695C(v519);
    sub_10004385C(v5040[1]);
    *(void *)(v500 + 544) = sub_100046560();
    sub_100045D6C(v5048, v500 + 552);
    sub_100042E4C();
    sub_100043E18();
    sub_100045980();
    sub_1000440C4();
    sub_100044304(v5046);
    sub_100043ADC((void *)&_mh_execute_header, v5088, (os_log_type_t)v506, "%s: Visibility flags: %s", (uint8_t *)v445);
    uint64_t v501 = (_BYTE *)v5051;
    sub_1000442BC(v5051);
    sub_10000F2F0(v5051);
    sub_10000F2F0(v445);

    (*(void (**)(uint64_t, uint64_t))(v5057 + 8))(v5055, v5062);
  }

  else
  {
    uint64_t v500 = v5089;
    uint64_t v445 = *(void *)(v5089 + 1088);
    uint64_t v596 = *(void **)(v5089 + 576);
    sub_100043B50();
    sub_100043C48();
    sub_100043DA4();
    sub_100043BF8();
    sub_1000435DC();

    sub_100043F84();
    sub_100043DD0();
    sub_100043E18();
    sub_100045980();
    sub_1000440C4();
    sub_100044304(v5046);
    sub_10004593C();
    uint64_t v597 = sub_10000F674();
    v599(v597, v598);
  }

  if (*(void *)(v500 + 1672))
  {
    uint64_t v600 = sub_100043240();
    sub_100044AD4(v600);
    *(void *)(v500 + 1888) = sub_1000431DC();
    sub_100042F20();
    sub_100043160();
    goto LABEL_3;
  }

  [(id)sub_100046400() requiresUnlock];
  uint64_t v601 = sub_1000440B0();
  if (v603)
  {
    uint64_t v509 = *(char **)(v500 + 1072);
    uint64_t v604 = *(void *)(v500 + 1056);
    v602(v601, enum case for ToolAuthenticationPolicy.requiresAuthenticationOnOriginAndRemote(_:));
    uint64_t v605 = sub_1000459E0();
    sub_1000459B8(v605);
    sub_1000447A4( (uint64_t)v509,  enum case for RuntimeRequirement.deviceState(_:),  *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v604 + 104));
    sub_100044848();
    sub_100043800(*(void *)(v500 + 400));
    sub_100047944();
  }

  else
  {
    v602(v601, enum case for ToolAuthenticationPolicy.none(_:));
  }

  uint64_t v609 = *(void *)(v500 + 576);
  *(void *)(v500 + 432) = &OBJC_PROTOCOL___WFLinkActionProtocol;
  if (sub_100043D04(v609))
  {
    sub_100044604();
    sub_100044F38(v610);
  }

  else
  {
    uint64_t v501 = *(_BYTE **)(v500 + 1312);
    uint64_t v621 = objc_opt_self(&OBJC_CLASS___WFHandleIntentAction);
    sub_100043AF8(v621);
    uint64_t v622 = sub_1000457E0();
    if (v623) {
      uint64_t v624 = (unsigned int *)&enum case for ToolTypeDefinition.siriIntent(_:);
    }
    else {
      uint64_t v624 = (unsigned int *)&enum case for ToolTypeDefinition.action(_:);
    }
    sub_100045C98(v622, v624);
  }

  v625 = *(void **)(v500 + 576);
  *(void *)uint64_t v506 = 0LL;
  *(void *)(v506 + 8) = 0LL;
  if ([v625 isDiscontinued])
  {
    sub_100044264();
    sub_10004685C((char *)v445);
    uint64_t v500 = v5089;
    sub_10004418C((uint64_t)v501);
    sub_10004418C(v445);
    uint64_t v626 = objc_opt_self(&OBJC_CLASS___WFLinkAction);
    uint64_t v627 = sub_100047688(v626);
    *(void *)(v5089 + 1984) = v627;
    if (v627)
    {
      sub_100043240();
      id v628 = sub_100043C20();
      *(void *)(v5089 + 1992) = sub_1000431DC();
      sub_100042F20();
      sub_100043160();
      goto LABEL_3;
    }
  }

  uint64_t v5054 = v506;
  v5088 = v510;
  if ([*(id *)(v500 + 576) isResidentCompatible])
  {
    sub_100045000();
    sub_10004685C(v509);
    sub_10004418C((uint64_t)v501);
    sub_10004418C((uint64_t)v509);
  }

  uint64_t v629 = *(char **)(v500 + 1856);
  uint64_t v630 = sub_100043EB8();
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v630);
  id v632 = sub_10004341C(ObjCClassFromMetadata, "unevaluatedResourceObjectsOfClass:");
  uint64_t v417 = (uint64_t)&qword_10006A3D0;
  uint64_t v633 = sub_1000459D8(0LL, &qword_10006A3D0);
  sub_100047558(&qword_10006A3D8);
  uint64_t v634 = sub_100046AC8();
  static Set._unconditionallyBridgeFromObjectiveC(_:)(v634, v633, v635);
  sub_100043670();
  sub_100044C3C((uint64_t)&qword_10006A3D0);
  sub_100042E4C();
  uint64_t v636 = sub_10004492C();
  if (v636)
  {
    uint64_t v417 = v636;
    if (v636 >= 1)
    {
      char v637 = sub_100043EC4();
      uint64_t v638 = enum case for RuntimeRequirement.deviceCapability(_:);
      while (1)
      {
        if ((v637 & 1) != 0) {
          sub_1000430AC(v5086);
        }
        else {
          sub_1000445EC(0LL);
        }
        sub_1000452C8();
        sub_10004314C( (uint64_t)&type metadata accessor for WFDeviceCapabilityResource,  v638,  *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5083 + 104));
        sub_1000449A4();
        sub_1000453B4(*(void *)(*(void *)(v5089 + 400) + 16LL));
        sub_100037FF8();
      }
    }

    goto LABEL_308;
  }

  unint64_t v31 = v5089;
  sub_100044088();
  uint64_t v639 = sub_10004536C();
  uint64_t v640 = swift_getObjCClassFromMetadata(v639);
  id v641 = sub_10004341C(v640, "unevaluatedResourceObjectsOfClass:");
  sub_100043D38((uint64_t)v641);
  sub_100043670();
  sub_100044C3C((uint64_t)&qword_10006A3D0);
  *(void *)(v5089 + 2008) = v629;
  sub_100042E4C();
  uint64_t v5082 = sub_10004492C();
  if (v5082)
  {
    sub_10004635C();
    if (v549 != v527) {
      goto LABEL_309;
    }
    uint64_t v642 = sub_1000441D8();
    sub_10004751C(v642);
    unsigned int v5070 = enum case for RuntimeRequirement.featureFlag(_:);
    LOBYTE(v633) = v5089;
    do
    {
      if ((v506 & 1) != 0) {
        uint64_t v643 = (uint64_t)sub_1000430AC(v5086 + 8 * v443);
      }
      else {
        uint64_t v643 = sub_1000445EC(v443);
      }
      unint64_t v31 = v643;
      uint64_t v644 = *(uint64_t **)(v5089 + 1072);
      sub_100043F10();
      sub_100044F4C();
      uint64_t v645 = sub_10004737C();
      *uint64_t v644 = v445;
      sub_1000470EC(v645);
      sub_10004314C((uint64_t)v644, v5070, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5077 + 104));
      sub_100044848();
      uint64_t v417 = *(void *)(*(void *)(v5089 + 400) + 16LL);
      sub_10004487C(v417);
      sub_100046C60();
      sub_100037FF8();

      sub_100047138();
    }

    while (!v533);
  }

  uint64_t v646 = *(void *)(v5089 + 1672);
  sub_100044088();
  if (v646)
  {
    sub_100043240();
    sub_100043C20();
    *(void *)(v5089 + 2016) = sub_1000431DC();
    sub_100042F20();
    sub_100043160();
    goto LABEL_3;
  }

  sub_100043230();
  if (sub_100043E10())
  {
    uint64_t v647 = (void *)sub_100043EA0();
  }

  else
  {
    sub_100008D58();
    uint64_t v647 = &_swiftEmptySetSingleton;
  }

  v5090[9] = (uint64_t)v647;
  sub_100043230();
  if (sub_100043E10())
  {
    uint64_t v648 = (void *)sub_100043EA0();
  }

  else
  {
    sub_100008D58();
    uint64_t v648 = &_swiftEmptySetSingleton;
  }

  uint64_t v649 = sub_100043EA8((uint64_t)v648);
  uint64_t v650 = &type metadata accessor for WFDeviceIdiomResource;
  uint64_t v651 = swift_getObjCClassFromMetadata(v649);
  id v652 = sub_10004341C(v651, "unevaluatedResourceObjectsOfClass:");
  sub_100043D38((uint64_t)v652);
  sub_100043D6C();
  sub_100044C3C(v31);
  uint64_t v654 = v653;
  v5050 = v629;
  sub_100043024();
  uint64_t v5086 = sub_10004650C();
  if (!v5086)
  {
LABEL_206:
    uint64_t v659 = sub_100043908();
    id v660 = sub_10004341C(v659, "disabledOnPlatforms");
    sub_100043F68();
    sub_100043F5C(v661);
    sub_100043670();
    if (sub_10004542C())
    {
      sub_100044EAC();
      if (v549 != v527) {
        goto LABEL_310;
      }
      sub_100044FA8();
      sub_1000449F0();
      do
      {
        if ((v633 & 1) != 0) {
          uint64_t v662 = (uint64_t)sub_1000430AC(v417 + 8 * v445);
        }
        else {
          uint64_t v662 = sub_100043FE4();
        }
        uint64_t v663 = (void *)v662;
        sub_100043B9C(v662, v5089);
        sub_1000443E8();

        sub_100043FD4((uint64_t)v650, *(uint64_t (**)(uint64_t, uint64_t))(v443 + 8));
      }

      while (v31 != v445);
    }

    sub_100042E4C();
    sub_1000462E8();
    if (v665) {
      uint64_t v666 = sub_100009BEC();
    }
    else {
      uint64_t v666 = static RuntimePlatform.all.getter(v664);
    }
    uint64_t v667 = v5089;
    v5090[0] = v666;
    uint64_t v668 = sub_1000436BC();
    sub_100045F84(v668);
    sub_100043174();
    uint64_t v669 = v5090[0];
    uint64_t v670 = sub_10004317C();
    uint64_t v671 = sub_1000352A0(v670);
    sub_100043238(v669);
    sub_100043174();
    sub_100042E4C();
    uint64_t v5084 = sub_100046D3C();
    if (v5084)
    {
      sub_10004635C();
      if (v549 != v527) {
        goto LABEL_311;
      }
      uint64_t v5071 = *(void *)(v5089 + 1016);
      uint64_t v5074 = *(void *)(v5089 + 1056);
      uint64_t v5063 = *(void *)(v5089 + 936);
      uint64_t v5081 = *(void *)(v5089 + 928);
      uint64_t v672 = sub_100052268(v671);
      sub_100047048(v672);
      unsigned int v5068 = enum case for RuntimeRequirement.platform(_:);
      do
      {
        if ((v5077 & 1) != 0)
        {
          sub_100043F1C( *(void *)(v5089 + 944),  (*(unsigned __int8 *)(v5081 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v5081 + 80));
        }

        else
        {
          uint64_t v673 = sub_100043000(v654, v671, (uint64_t (*)(void))&type metadata accessor for RuntimePlatform);
          if (v5063 != 8) {
            goto LABEL_305;
          }
          uint64_t v674 = sub_1000469AC(v673);
          v675(v674, v5089 + 448);
          sub_1000431C0();
        }

        sub_100043A98();
        uint64_t v676 = sub_100045354();
        sub_1000434C0(v676);
        sub_10004314C(v417, v671, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5071 + 16));
        sub_1000447A4(v417, v5068, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5074 + 104));
        sub_100045148();
        sub_100044690(*(void *)(v5089 + 400));
        sub_100045488();
        sub_100037FF8();
        sub_100043380(v671, *(uint64_t (**)(uint64_t, uint64_t))(v5071 + 8));
      }

      while (v5084 != v654);
    }

    unint64_t v677 = (void *)(v5089 + 472);
    sub_100044088();
    uint64_t v678 = *(void *)(v5089 + 576);
    uint64_t v679 = sub_100046674();
    *(void *)(v5089 + 456) = v679;
    sub_100043230();
    *(void *)(v5089 + 464) = v680;
    *(void *)(v5089 + 472) = &OBJC_PROTOCOL___WFLinkActionProtocol;
    uint64_t v5067 = v679;
    if (sub_100045218(v678))
    {
      id v681 = sub_100046E7C();
      uint64_t v452 = (char *)sub_10004416C((uint64_t)v681, "backingActionIdentifiers");
      static Array._unconditionallyBridgeFromObjectiveC(_:)(v452, &type metadata for String);
      sub_100043650();
      sub_100046090();
      sub_1000461DC();
      sub_1000436BC();
      unint64_t v677 = (void *)sub_1000453D8();

      sub_100008D58();
      swift_bridgeObjectRelease(v679);
      *(void *)(v5089 + 464) = v677;
    }

    else
    {
      uint64_t v452 = v5050;
    }

    *(void *)(v5089 + 2032) = v452;
    if (!sub_100044F00() && sub_1000531E4(v679))
    {
      sub_100046E94();
      if (v549 != v527) {
        goto LABEL_312;
      }
      uint64_t v682 = *(void *)(v5089 + 840);
      uint64_t v5085 = *(void *)(v5089 + 848);
      uint64_t v5087 = *(void *)(v5089 + 816);
      uint64_t v5064 = *(void *)(v5089 + 792);
      uint64_t v417 = sub_100052268(v679);
      int v683 = enum case for SystemToolProtocol.assistantSchema(_:);
      sub_1000443C8();
      int v5078 = v683;
      unsigned int v5058 = v417;
      do
      {
        if ((v417 & 1) != 0)
        {
          uint64_t v684 = sub_100044484( *(void *)(v5089 + 872),  v679 + ((*(unsigned __int8 *)(v682 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v682 + 80)));
        }

        else
        {
          uint64_t v685 = sub_100046784( 0LL,  v679,  (uint64_t (*)(void))&type metadata accessor for SystemToolProtocol);
          if (v5085 != 8) {
            goto LABEL_307;
          }
          uint64_t v686 = sub_100046A00(v685);
          v687(v686, v5089 + 512);
          uint64_t v684 = sub_1000431C0();
        }

        unint64_t v677 = *(void **)(v5089 + 832);
        sub_100044458(v684, *(void *)(v5089 + 872));
        int v688 = sub_100044448();
        uint64_t v689 = *(void *)(v5089 + 864);
        if (v688 == v683)
        {
          uint64_t v690 = *(void *)(v5089 + 824);
          sub_100043184(*(uint64_t (**)(uint64_t))(v682 + 96));
          sub_100043C08(v690, v689, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5087 + 32));
          sub_100044E94();
          sub_100044DAC();
          uint64_t v691 = sub_100044DFC();
          sub_100044EE8();
          if (*(void *)(v691 + 16) && (unint64_t v692 = sub_100051CAC(), (v693 & 1) != 0))
          {
            sub_1000431C8(v692, *(void *)(v5089 + 776));
            uint64_t v694 = 0LL;
          }

          else
          {
            uint64_t v694 = 1LL;
          }

          unint64_t v677 = *(void **)(v5089 + 784);
          uint64_t v695 = *(void *)(v5089 + 776);
          sub_10000848C(v695, v694, 1LL, (uint64_t)v677);
          sub_100008D58();
          sub_100046D44();
          if (v533)
          {
            uint64_t v696 = *(void *)(v5089 + 776);
            sub_100043D10(v695, *(uint64_t (**)(uint64_t, uint64_t))(v5087 + 8));
            sub_100041358(v696, &qword_10006A390);
          }

          else
          {
            sub_100046EC0();
            sub_1000446CC((uint64_t)v677, v697, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5064 + 32));
            sub_1000464FC();
            sub_100015F18();
            uint64_t v452 = (char *)v417;
            uint64_t v417 = v5058;
            uint64_t v698 = v679;
            uint64_t v679 = v5067;
            (*(void (**)(void *, uint64_t))(v5064 + 8))(v677, v698);
            sub_100043D10(v695, *(uint64_t (**)(uint64_t, uint64_t))(v5087 + 8));
          }

          int v683 = v5078;
        }

        else
        {
          sub_100043184(*(uint64_t (**)(uint64_t))(v682 + 8));
        }

        sub_1000462B4();
      }

      while (!v533);
      sub_100043D74();
    }

    if (sub_100044DA4((void *)(v5089 + 464)))
    {
      unint64_t v677 = *(void **)(v5089 + 856);
      sub_100044F2C(*(void *)(v5089 + 840));
      sub_100046C6C();
      sub_100044724(*(void *)(v5089 + 456));
      sub_100045388();
    }

    if (*(void *)(v5089 + 1672))
    {
      sub_100043240();
      sub_100046C4C();
      *(void *)(v5089 + 2040) = sub_100046504();
      sub_100045294();
      sub_100043160();
      goto LABEL_3;
    }

    sub_100040428(*(void **)(v5089 + 576), (SEL *)&selRef_iconName);
    if (v699)
    {
      sub_100046000();
      sub_100046EB8();
      *unint64_t v677 = 0LL;
      v677[1] = v452;
      uint64_t v700 = sub_1000432E8();
      sub_100043084(v700);
      sub_100043BE0();
      goto LABEL_268;
    }

    sub_100040428(*(void **)(v5089 + 576), (SEL *)&selRef_iconSymbolName);
    if (!v706) {
      goto LABEL_267;
    }
    uint64_t v452 = v705;
    uint64_t v707 = v706;
    sub_100040428(*(void **)(v5089 + 576), (SEL *)&selRef_iconBackgroundColorName);
    uint64_t v471 = v5089;
    if (!v709) {
      goto LABEL_266;
    }
    uint64_t v710 = v709;
    uint64_t v5079 = v708;
    id v711 = [(id)sub_100047098() definition];
    if (v711)
    {
      uint64_t v452 = (char *)(v5089 + 272);
      id v712 = [v711 objectForKey:WFActionIconSymbolColorNameKey];
      sub_1000461FC();
      if (v5089 == -480)
      {
        sub_100044F68();
      }

      else
      {
        sub_1000448D0();
        uint64_t v713 = sub_1000460B4();
      }

      v1187 = v5042;
      sub_1000453A0(v713, v714, &qword_10006A420);
      uint64_t v1188 = v707;
      if (*(void *)(v5089 + 328))
      {
        v1189 = (uint64_t *)v5089;
        uint64_t v1192 = v5079;
        if ((sub_100044438(v5089 + 376, (uint64_t)&type metadata for String, (uint64_t)&type metadata for Any) & 1) != 0)
        {
          sub_100045F14();
          goto LABEL_279;
        }

LABEL_278:
        sub_100043410(v1189[90], v1190, v1191, v1189[79]);
LABEL_279:
        sub_100044A18();
        swift_bridgeObjectRelease(*v1187);
        BOOL v1193 = v1192 == v5089 && v710 == 0xE400000000000000LL;
        if (v1193 || (sub_100043138(v1192, v710) & 1) != 0)
        {
          uint64_t v1194 = sub_100047570();
          sub_100046390(v1194, v1195, &qword_10006A378);
          sub_100043DBC(v5089, 1LL, (uint64_t)v452);
          if (!v533)
          {
            uint64_t v1198 = sub_100045EF8();
            sub_100041358(v1198, &qword_10006A378);
            sub_1000432F0();
            sub_100045EC8();
            sub_100046B88();
            v1199 = (unsigned int *)&enum case for ToolSymbolIconStyle.tinted(_:);
LABEL_294:
            v1205 = (void *)v1189[96];
            uint64_t v452 = (char *)v1189[86];
            uint64_t v667 = v1189[85];
            sub_100043C08((uint64_t)v452, *v1199, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v667 + 104));
            uint64_t v1206 = (uint64_t)v1205 + *(int *)(sub_10000844C(&qword_10006A430) + 48);
            void *v1205 = 0LL;
            v1205[1] = v1188;
            sub_100043C08(v1206, (uint64_t)v452, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v667 + 32));
            uint64_t v1207 = sub_1000432E8();
            sub_100043084(v1207);
            sub_100046D04();
            goto LABEL_269;
          }

          sub_100041358(v1189[89], &qword_10006A378);
        }

        sub_1000451FC();
        sub_1000084E0(v5089, 1LL, (uint64_t)v452);
        uint64_t v1196 = sub_100044158();
        if (v533)
        {
          uint64_t v1197 = sub_100044A10();
          sub_100044EA4(v1197, &qword_10006A378);
        }

        else
        {
          sub_100045EBC(v1196);
        }

        uint64_t v1201 = v1189[87];
        uint64_t v1202 = v1189[79];
        sub_100046388(v1189[90], v1200, &qword_10006A378);
        sub_1000084E0(v1201, 1LL, v1202);
        uint64_t v1203 = sub_100044114();
        if (v533)
        {
          uint64_t v1204 = sub_100044F08();
          sub_100044EA4(v1204, &qword_10006A378);
        }

        else
        {
          sub_100047474(v1203);
        }

        sub_1000458C8();
        sub_10000844C(&qword_10006A428);
        sub_10004589C();
        sub_100046C18();
        v1199 = (unsigned int *)&enum case for ToolSymbolIconStyle.multicolor(_:);
        goto LABEL_294;
      }
    }

    else
    {
      *(_OWORD *)&selRef_parameterKey = 0u;
      *(_OWORD *)&selRef_path = 0u;
      v1187 = v5042;
      uint64_t v1188 = v707;
    }

    sub_100045A94((uint64_t)v711, &qword_10006A420);
    v1189 = (uint64_t *)v5089;
    uint64_t v1192 = v5079;
    goto LABEL_278;
  }

  LODWORD(v5082) = sub_10004459C();
  uint64_t v23 = 0LL;
  LODWORD(v5069) = enum case for WFDeviceIdiomResource.Requirement.notEqualTo(_:);
  LOBYTE(v5077) = enum case for RuntimePlatform.macintosh(_:);
  LOBYTE(v5072) = v654;
  while (1)
  {
    if ((v5082 & 1) != 0) {
      uint64_t v655 = (uint64_t)sub_1000430AC(v654 + 8 * v23);
    }
    else {
      uint64_t v655 = sub_100045150();
    }
    uint64_t v443 = v655;
    uint64_t v417 = v23 + 1;
    if (__OFADD__(v23, 1LL))
    {
      __break(1u);
LABEL_296:
      sub_100043E98();
      uint64_t v446 = sub_100046DEC();
      sub_100043024();
      goto LABEL_28;
    }

    uint64_t v650 = *(void **)(v5089 + 1000);
    unint64_t v31 = *(void *)(v5089 + 984);
    sub_1000450E4();
    sub_10000F508((uint64_t)v650, *(uint64_t (**)(uint64_t, uint64_t))(v445 + 88));
    sub_10004707C();
    if (v533) {
      break;
    }
    sub_1000455D4();
    if (v657)
    {
      sub_10000F508(0LL, *(uint64_t (**)(uint64_t, uint64_t))(v445 + 96));
      sub_1000432D0();
      if (!(!v533 & v563)) {
        __asm { BR              X9 }
      }

      goto LABEL_264;
    }

    sub_10000F508(0LL, *(uint64_t (**)(uint64_t, uint64_t))(v445 + 8));
    ++v23;
    if (v417 == v5086) {
      goto LABEL_206;
    }
  }

  sub_100043184(*(uint64_t (**)(uint64_t))(v445 + 96));
  sub_1000432D0();
  if (!(!v533 & v563)) {
    __asm { BR              X9 }
  }

LABEL_264:
  sub_10004318C();
  sub_100045944();
LABEL_158:
  sub_100043350( (uint64_t)"Fatal error",  v615,  v616,  v617,  v618,  (uint64_t)"BackgroundShortcutRunner/ToolKitIndexer.swift",  v619,  v620,  v1209,  v1312);
  sub_100043108();
}

uint64_t sub_100023A44()
{
  uint64_t v1 = swift_release(*(void *)(v0 + 1648));
  *(void *)(v0 + 1656) = sub_10004341C(v1, "metadata");
  sub_10000F3A0();
  return sub_10000F2D0();
}

void sub_100023A90()
{
  v5108 = v1 + 67;
  uint64_t v2 = (void *)v1[72];
  id v4 = sub_100043854(v3, "outputType");
  sub_1000469E0();

  uint64_t v5 = (void *)v1[205];
  v1[209] = v5;
  v1[208] = v0;
  uint64_t v6 = (uint64_t *)v1[204];
  uint64_t v7 = v1[201];
  uint64_t v8 = (void *)v1[72];
  v5114[3] = sub_100043C10();
  sub_1000442C4(&qword_10006A3B8);
  v5114[4] = v9;
  v5114[0] = (uint64_t)v8;
  uint64_t v10 = v0;
  v8;
  static DisplayRepresentationConfiguration.inMemoryImages.getter();
  uint64_t v11 = (void *)objc_opt_self(&OBJC_CLASS___WFLocalizationContext);
  v1[210] = v11;
  uint64_t v12 = WFContentItem.ToolKitTypeResolutionContext.init(measurementUnitTypeProvider:outputValueType:displayRepresentationConfig:localizationContext:)( v5114,  v0,  v7,  [v11 defaultContext]);
  v1[67] = &_swiftEmptySetSingleton;
  uint64_t v13 = *(void *)(WFAction.outputContentClasses.getter(v12) + 16);
  uint64_t v5113 = (uint64_t)v1;
  if (v13)
  {
    v5112 = (os_log_s *)v10;
    uint64_t v14 = 0LL;
    uint64_t v15 = v1[196];
    uint64_t v16 = (uint64_t)v1;
    do
    {
      sub_100046F58();
      if (v6)
      {
        uint64_t v40 = *(void *)(v16 + 1632);
        uint64_t v41 = v1[203];
        uint64_t v42 = v1[202];

        sub_10004593C();
        sub_100042E4C();
        sub_100046FAC();
        uint64_t v43 = *(void (**)(uint64_t, uint64_t))(v41 + 8);
        uint64_t v44 = v5113;
        v43(v40, v42);
        goto LABEL_11;
      }

      uint64_t v6 = *(uint64_t **)(v16 + 1600);
      uint64_t v17 = v1[199];
      uint64_t v18 = (char *)v1[198];
      uint64_t v19 = v1[195];
      ++v14;
      uint64_t v20 = sub_10000F674();
      sub_1000446CC(v20, v21, v22);
      sub_10003CB78(v17, v18);
      uint64_t v23 = *(void (**)(uint64_t, uint64_t))(v15 + 8);
      uint64_t v24 = v17;
      uint64_t v16 = (uint64_t)v1;
      v23(v24, v19);
      v23((uint64_t)v6, v19);
    }

    while (v13 != v14);
    sub_100042E4C();
    uint64_t v25 = (void *)*v5108;
    uint64_t v10 = (char **)v5112;
  }

  else
  {
    sub_100042E4C();
    uint64_t v25 = &_swiftEmptySetSingleton;
    uint64_t v16 = (uint64_t)v1;
  }

  unint64_t v26 = (unint64_t)[*(id *)(v16 + 576) outputsMultipleItems];
  uint64_t v27 = sub_10004317C();
  uint64_t v28 = sub_1000478D0(v27);
  sub_100008D58();
  sub_10003441C();
  uint64_t v30 = v29;
  uint64_t v31 = *(void *)(v29 + 16);
  uint64_t v32 = (void (*)(uint64_t *, void, uint64_t *))&enum case for TypeInstance.type(_:);
  uint64_t v5086 = v6;
  if (v31 == 1)
  {
    uint64_t v422 = *(void *)(v16 + 1504);
    uint64_t v423 = *(void *)(v16 + 1472);
    sub_100047438();
    sub_100043174();
    sub_100043DBC(v422, 1LL, v423);
    if (v532) {
      goto LABEL_309;
    }
    uint64_t v25 = *(void **)(v16 + 1536);
    uint64_t v30 = *(void *)(v16 + 1520);
    uint64_t v28 = *(void *)(v16 + 1512);
    uint64_t v424 = *(void *)(v16 + 1504);
    uint64_t v31 = *(void *)(v16 + 1480);
    unint64_t v33 = *(void *)(v16 + 1472);
    uint64_t v425 = sub_10004793C();
    sub_100043C08(v426, v424, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v31 + 32));
    *uint64_t v25 = v425;
    uint64_t v39 = v5113;
    sub_100044408(enum case for TypeInstance.type(_:), *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v30 + 104));
  }

  else
  {
    unsigned int v5082 = v26;
    if (v31)
    {
      uint64_t v5094 = *(void *)(v16 + 1480);
      uint64_t v5101 = *(void *)(v16 + 1520);
      v5114[0] = (uint64_t)_swiftEmptyArrayStorage;
      sub_100037D80(v31, (uint64_t (*)(void))sub_100052388);
      unint64_t v33 = sub_100041128(v30);
      uint64_t v428 = v427;
      int v430 = v429 & 1;
      unsigned int v5090 = enum case for TypeInstance.type(_:);
      do
      {
        if ((v33 & 0x8000000000000000LL) != 0 || (sub_100045550(), (uint64_t)v33 >= v431))
        {
LABEL_256:
          __break(1u);
LABEL_257:
          __break(1u);
LABEL_258:
          __break(1u);
LABEL_259:
          __break(1u);
          goto LABEL_260;
        }

        if (((*(void *)(v30 + 56 + ((v33 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v33) & 1) == 0) {
          goto LABEL_257;
        }
        if (*(_DWORD *)(v30 + 36) != (_DWORD)v428) {
          goto LABEL_258;
        }
        sub_100046254();
        uint64_t v433 = *(void *)(v432 + 1472);
        v5112 = (os_log_s *)v428;
        LODWORD(v5110) = v430;
        sub_1000456F0((uint64_t)v32, *(void *)(v30 + 48) + *(void *)(v5094 + 72) * v33);
        sub_10000F538(v28, (uint64_t)v32, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5094 + 32));
        uint64_t v434 = swift_allocBox(v433);
        sub_1000456F0(v435, v28);
        *uint64_t v6 = v434;
        uint64_t v32 = *(void (**)(uint64_t *, void, uint64_t *))(v5101 + 104);
        v32(v6, v5090, v5114);
        sub_100043C00(v28, *(uint64_t (**)(uint64_t, uint64_t))(v5094 + 8));
        sub_10003DA40((uint64_t (*)(void, uint64_t, uint64_t))sub_100052388);
        uint64_t v28 = *(void *)(v5114[0] + 16);
        sub_10003DA98(v28, (uint64_t (*)(BOOL))sub_100052388);
        sub_100044180();
        sub_10003DAC4();
        unint64_t v33 = sub_1000475CC(v33, v436, v430 & 1);
        uint64_t v428 = v437;
        int v430 = v438 & 1;
        --v31;
      }

      while (v31);
      uint64_t v39 = v5113;
      uint64_t v25 = *(void **)(v5113 + 1536);
      uint64_t v28 = *(void *)(v5113 + 1512);
      uint64_t v439 = sub_100042644((uint64_t)&unk_100066458, 24LL);
      sub_1000132AC(v33, v428, v430);
      sub_100043174();
      sub_10003441C();
      *(void *)(v439 + 16) = v440;
      *uint64_t v25 = v439;
      sub_100047950(v440, enum case for TypeInstance.union(_:));
    }

    else
    {
      sub_100044F10();
      unint64_t v33 = sub_10004601C();
      uint64_t v35 = v34;
      uint64_t v31 = sub_1000477A8();
      uint64_t v36 = swift_allocBox(v31);
      sub_1000461AC(v37, enum case for TypeIdentifier.PrimitiveTypeIdentifier.none(_:));
      uint64_t *v35 = v36;
      uint64_t v38 = (uint64_t)v35;
      uint64_t v39 = v5113;
      sub_10004314C( v38,  enum case for TypeIdentifier.primitive(_:),  (uint64_t (*)(uint64_t, uint64_t, uint64_t))v10[13]);
      *uint64_t v25 = v33;
      sub_100044408( enum case for TypeInstance.type(_:),  *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v30 + 104));
    }

    unint64_t v26 = v5082;
  }

  sub_100044744();
  uint64_t v441 = *(uint64_t (**)(uint64_t, uint64_t))(v39 + 8);
  *(void *)(v31 + 1688) = v441;
  sub_100043380((uint64_t)v25, v441);
  uint64_t v442 = sub_10004314C(v30, v28, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v39 + 32));
  uint64_t v10 = &selRef_parameterKey;
  id v443 = sub_10004550C(v442, "parameters");
  id v444 = (unint64_t *)sub_1000132F0((uint64_t)v443, &qword_10006A3C0, &OBJC_CLASS___WFParameter_ptr);
  sub_100046870((uint64_t)v443);
  sub_100043D6C();
  v5114[0] = (uint64_t)_swiftEmptyArrayStorage;
  if (v33 >> 62) {
    goto LABEL_292;
  }
  uint64_t v445 = *(void *)((v33 & 0xFFFFFFFFFFFFF8LL) + 0x10);
LABEL_25:
  uint64_t v16 = v5113;
  if (v445)
  {
    if (v445 < 1) {
      goto LABEL_299;
    }
    sub_1000531F0(v33);
    sub_1000449F0();
    do
    {
      if ((v5113 & 1) != 0) {
        uint64_t v446 = (uint64_t)sub_1000430AC(v33 + 8 * v31);
      }
      else {
        uint64_t v446 = sub_100047864();
      }
      unint64_t v26 = v446;
      uint64_t v447 = sub_100046890();
      if (sub_100047658(v447))
      {
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        sub_1000466F0();
        uint64_t v448 = sub_1000478F0();
        specialized ContiguousArray._endMutation()(v448);
      }

      else
      {
      }

      ++v31;
    }

    while (v445 != v31);
    sub_100043024();
    uint64_t v16 = v5113;
    uint64_t v449 = v5114[0];
  }

  else
  {
    sub_100043024();
    uint64_t v449 = (uint64_t)_swiftEmptyArrayStorage;
  }

  uint64_t v450 = (uint64_t)v5086;
  sub_100015A1C(v449);
  uint64_t v452 = v451;
  sub_100013360();
  uint64_t v453 = sub_10003452C(v452);
  *(void *)(v16 + 1696) = v453;
  *(void *)(v16 + 488) = _swiftEmptyArrayStorage;
  id v454 = sub_100044B20(v453, v10[1]);
  uint64_t v455 = sub_100046870((uint64_t)v454);
  sub_1000476A8(v455);
  if ((unint64_t)v449 >> 62)
  {
    if (v449 < 0) {
      uint64_t v1200 = v449;
    }
    else {
      uint64_t v1200 = v449 & 0xFFFFFFFFFFFFFF8LL;
    }
    sub_10004317C();
    id v444 = (unint64_t *)_CocoaArrayWrapper.endIndex.getter(v1200);
    sub_100008D58();
  }

  else
  {
    sub_100045420();
  }

  *(void *)(v16 + 1712) = v444;
  if (v444)
  {
    uint64_t v452 = v16 + 440;
    char v456 = sub_1000531F0(v449);
    uint64_t v457 = 0LL;
    *(_BYTE *)(v16 + 2081) = v456 & 1;
    *(void *)(v16 + 1720) = WFParameterRelationResourceRelationEqual;
    *(void *)(v16 + 1728) = WFParameterRelationResourceRelationAny;
    *(void *)(v16 + 1736) = WFParameterRelationResourceRelationNotEqual;
    *(void *)(v16 + 1744) = WFParameterRelationResourceRelationGreaterThan;
    *(void *)(v16 + 1752) = WFParameterRelationResourceRelationGreaterThanOrEqual;
    *(void *)(v16 + 1760) = WFParameterRelationResourceRelationLessThan;
    *(void *)(v16 + 1768) = WFParameterRelationResourceRelationLessThanOrEqual;
    *(void *)(v16 + 1776) = WFParameterRelationResourceRelationContains;
    *(_DWORD *)(v16 + 2056) = enum case for ParameterRelationshipDefinition.Relation.isSome(_:);
    *(_DWORD *)(v16 + 2060) = enum case for ParameterRelationshipDefinition.Relation.contains(_:);
    *(_DWORD *)(v16 + 2064) = enum case for ParameterRelationshipDefinition.Relation.lessThan(_:);
    *(_DWORD *)(v16 + 2068) = enum case for ParameterRelationshipDefinition.Relation.greaterThan(_:);
    *(_DWORD *)(v16 + 2072) = enum case for ParameterRelationshipDefinition.Relation.notEquals(_:);
    *(_DWORD *)(v16 + 2076) = enum case for ParameterRelationshipDefinition.Relation.equals(_:);
    *(void *)(v16 + 1784) = WFLogCategoryToolKitIndexing;
    id v444 = (unint64_t *)(v16 + 2081);
    while (1)
    {
      *(void *)(v16 + 1792) = v457;
      int v458 = *(unsigned __int8 *)v444;
      uint64_t v459 = sub_100046878();
      uint64_t v460 = *(void *)(v16 + 1704);
      if (v458 == 1) {
        uint64_t v461 = (uint64_t)sub_1000430AC(v460 + 8 * v457);
      }
      else {
        uint64_t v461 = sub_100044EF8(v459, v460);
      }
      uint64_t v462 = (void *)v461;
      *(void *)(v16 + 1800) = v461;
      *(void *)(v16 + 1808) = v457 + 1;
      if (__OFADD__(v457, 1LL)) {
        goto LABEL_259;
      }
      uint64_t v463 = sub_100046890();
      if (!sub_100047664(v463)) {
        break;
      }

      uint64_t v457 = *(void *)(v16 + 1808);
      if (v457 == *(void *)(v16 + 1712)) {
        goto LABEL_47;
      }
    }

    sub_100037E60(0LL);
    *(void *)uint64_t v452 = v518;
    unsigned int v5072 = v462;
    id v519 = sub_100044B20(v518, "resourceManager");
    uint64_t v520 = sub_1000132F0((uint64_t)v519, &qword_10006A3C8, &OBJC_CLASS___WFParameterRelationResource_ptr);
    id v521 = [v519 resourceObjectsOfClass:swift_getObjCClassFromMetadata(v520)];

    if (!v521) {
      goto LABEL_310;
    }
    uint64_t v522 = &OBJC_CLASS___WFResource_ptr;
    sub_100046B10();
    sub_100047168(&qword_10006A3D8);
    sub_100046AD4(v523);
    sub_100047870();
    sub_100013470((uint64_t)&qword_10006A3D0);
    sub_100043174();
    uint64_t v5067 = sub_100046114();
    if (!v5067)
    {
LABEL_148:
      sub_100008D58();
      uint64_t v605 = sub_1000436BC();
      id v606 = sub_100014078(v605);
      sub_100043174();
      if (!v606) {
        id v606 = [*(id *)(v16 + 1680) defaultContext];
      }
      *(void *)(v16 + 1816) = v606;
      id v607 = (void *)swift_task_alloc(async function pointer to WFParameter.toolkitTypeDefinition(for:localizationContext:)[1]);
      *(void *)(v16 + 1824) = v607;
      sub_100047190(v607, (uint64_t)sub_100026940);
      sub_1000430EC();
      return;
    }

    char v5070 = sub_100046104();
    uint64_t v524 = 0LL;
    sub_1000464F0();
    while (1)
    {
      sub_10004509C();
      if ((v5070 & 1) != 0) {
        uint64_t v525 = (uint64_t)sub_100045DF0();
      }
      else {
        uint64_t v525 = sub_100044E8C(v524);
      }
      BOOL v526 = __OFADD__(v524++, 1LL);
      if (v526) {
        goto LABEL_300;
      }
      uint64_t v5074 = v524;
      uint64_t v527 = *(void *)(v16 + 1696);
      id v528 = sub_100044A64(v525, "parameterKey");
      sub_100043918((uint64_t)v528);
      sub_10004613C();
      if (!*(void *)(v527 + 16)) {
        break;
      }
      sub_100045AD8();
      sub_100045070();
      sub_100045F8C();
      sub_100044950();
      if ((v529 & 1) == 0) {
        break;
      }
      uint64_t v530 = sub_100044680();
      BOOL v532 = v532 && v531 == (void)v522;
      if (!v532 && (sub_10004320C(v530, v531, v524, (uint64_t)v522) & 1) == 0)
      {
        do
        {
          sub_100044090();
          if ((v533 & 1) == 0) {
            goto LABEL_98;
          }
          uint64_t v534 = sub_100044680();
          BOOL v536 = v532 && v535 == (void)v522;
        }

        while (!v536 && (sub_10004320C(v534, v535, v524, (uint64_t)v522) & 1) == 0);
        sub_100042E4C();
        sub_100045140();
        goto LABEL_137;
      }

      sub_100042E4C();
      sub_100045140();
LABEL_136:
      uint64_t v524 = v5074;
LABEL_137:
      if (v524 == v5067) {
        goto LABEL_148;
      }
    }

LABEL_98:
    uint64_t v537 = *(void *)(v16 + 1416);
    uint64_t v538 = sub_100042E4C();
    id v539 = sub_100044A64(v538, "comparedValues");
    uint64_t v522 = (_UNKNOWN **)static Array._unconditionallyBridgeFromObjectiveC(_:)(v539, (char *)&type metadata for Any + 8);

    id v540 = v5072;
    uint64_t v541 = sub_100047694();
    uint64_t v542 = (uint64_t)v5086;
    uint64_t v544 = (uint64_t)sub_1000137AC(v541, v543);
    sub_100042E4C();
    uint64_t v545 = sub_1000479A4(v544);
    sub_100040370(&qword_10006A3E0, (uint64_t (*)(uint64_t))&type metadata accessor for TypedValue);
    sub_100044AAC(v545, v547, v546);
    if (sub_100046B30())
    {
      sub_1000469D4();
      if (v548 != v526) {
        goto LABEL_302;
      }
      uint64_t v549 = sub_100045DE8();
      sub_10004680C(v549);
      do
      {
        if ((v5094 & 1) != 0)
        {
          sub_10004332C(*(void *)(v16 + 1464), *(void *)(v16 + 1424));
        }

        else
        {
          uint64_t v550 = *(void *)(v16 + 1432);
          uint64_t v551 = sub_100046030();
          uint64_t v553 = sub_100043364(v551, v552, (uint64_t (*)(void))&type metadata accessor for TypedValue);
          if (v550 != 8) {
            goto LABEL_298;
          }
          sub_100044DDC(v553);
          sub_1000431C0();
        }

        uint64_t v537 = *(void *)(v16 + 1456);
        uint64_t v554 = *(void *)(v16 + 1416);
        sub_10004462C(*(uint64_t (**)(void))(*(void *)(v16 + 1424) + 32LL));
        uint64_t v555 = (uint64_t)v522[5];
        sub_100009BEC();
        uint64_t v544 = sub_100044634(v555, v554) & ~(-1LL << *((_BYTE *)v522 + 32));
        uint64_t v10 = (char **)(v522 + 7);
        sub_1000435EC();
        if ((v556 & 1) != 0)
        {
          sub_100047288();
          while (1)
          {
            sub_1000444BC();
            sub_100040370(&qword_10006A3E8, (uint64_t (*)(uint64_t))&type metadata accessor for TypedValue);
            sub_100044838(v554, v558, v559, v557);
            sub_100045BAC();
            if ((v537 & 1) != 0) {
              break;
            }
            uint64_t v544 = (v544 + 1) & v16;
            sub_100043600();
            if ((v560 & 1) == 0) {
              goto LABEL_109;
            }
          }

          sub_100042E4C();
          uint64_t v16 = v5113;
        }

        else
        {
LABEL_109:
          uint64_t v561 = *(void *)(v5113 + 1456);
          uint64_t v10 = *(char ***)(v5113 + 1416);
          sub_100042E4C();
          sub_1000460BC();
          sub_100045B70();
          sub_100046460();
          if (!v532 & v562)
          {
            if ((v537 & 1) == 0) {
              sub_10003AE5C();
            }
          }

          else
          {
            if ((_DWORD)v537) {
              sub_10003A578();
            }
            else {
              sub_10003B54C();
            }
            sub_100044634(*(void *)(*(void *)(v5113 + 392) + 40LL), *(void *)(v5113 + 1416));
            sub_100043388();
            if ((v564 & 1) != 0)
            {
              uint64_t v16 = ~v563;
              unint64_t v26 = *(void *)(*(void *)(v5113 + 1424) + 72LL);
              do
              {
                sub_100044534();
                sub_100040370(&qword_10006A3E8, (uint64_t (*)(uint64_t))&type metadata accessor for TypedValue);
                char v566 = sub_10004559C(v565);
                sub_1000431A8(v561, *(uint64_t (**)(uint64_t, uint64_t))(v5113 + 8));
                if ((v566 & 1) != 0)
                {
                  sub_10004626C();
                  sub_1000430D0();
                  return;
                }

                uint64_t v544 = (v544 + 1) & v16;
                sub_100043600();
              }

              while ((v567 & 1) != 0);
            }
          }

          sub_100043870();
          char v568 = (char *)v522[2];
          BOOL v526 = __OFADD__(v568, 1LL);
          uint64_t v569 = v568 + 1;
          if (v526)
          {
            __break(1u);
LABEL_298:
            __break(1u);
LABEL_299:
            __break(1u);
LABEL_300:
            __break(1u);
LABEL_301:
            __break(1u);
LABEL_302:
            __break(1u);
LABEL_303:
            __break(1u);
LABEL_304:
            __break(1u);
LABEL_305:
            __break(1u);
LABEL_306:
            __break(1u);
LABEL_307:
            __break(1u);
LABEL_308:
            __break(1u);
LABEL_309:

            __break(1u);
LABEL_310:

            __break(1u);
            JUMPOUT(0x100026908LL);
          }

          uint64_t v537 = *(void *)(v16 + 1424);
          v522[2] = v569;
          sub_100045D08();
          uint64_t v542 = *(void *)(v537 + 8);
        }

        sub_100047234();
        sub_1000456CC();
      }

      while (!v532);
    }

    uint64_t v570 = sub_10004515C();
    id v571 = sub_100044A64(v570, "relation");
    sub_1000476D4();
    uint64_t v572 = sub_100043F74();
    if (v10 == (char **)v572 && v542 == v573)
    {
      sub_100043238(v542);
    }

    else
    {
      char v575 = sub_10004320C((uint64_t)v10, v542, v572, v573);
      sub_100043908();
      sub_10004316C();
      if ((v575 & 1) == 0)
      {
        id v576 = (id)v537;
        id v577 = sub_1000431B0();
        sub_100043130((uint64_t)v577);
        sub_100044080();

        if ((v542 & 1) == 0)
        {
          id v583 = (id)v537;
          id v584 = sub_1000431B0();
          sub_100043130((uint64_t)v584);
          sub_100044080();

          id v585 = (id)v537;
          id v586 = sub_1000431B0();
          sub_100043130((uint64_t)v586);
          sub_100044080();

          id v587 = (id)v537;
          id v588 = sub_1000431B0();
          sub_100043130((uint64_t)v588);
          sub_100044080();

          id v589 = (id)v537;
          id v590 = sub_1000431B0();
          sub_100043130((uint64_t)v590);
          sub_100044080();

          id v591 = (id)v537;
          id v592 = sub_1000431B0();
          sub_100043130((uint64_t)v592);
          sub_100044080();

          id v593 = *(id *)(v16 + 1776);
          char v594 = sub_100043130((uint64_t)v593);

          uint64_t v537 = *(void *)(v16 + 1408);
          uint64_t v544 = *(void *)(v16 + 1392);
          if ((v594 & 1) != 0)
          {
            uint64_t v578 = (uint64_t)sub_1000471E4();
          }

          else
          {
            sub_100042E4C();
            uint64_t v579 = *(void (**)(uint64_t))(v544 + 104);
            uint64_t v578 = v537;
          }

          goto LABEL_135;
        }

        sub_100043444();
        sub_100042E4C();
LABEL_134:
        uint64_t v578 = sub_10004717C();
LABEL_135:
        v579(v578);
        sub_100046430();
        id v581 = sub_100047604(v580, "parameterKey");
        sub_1000465D8((uint64_t)v581);
        sub_10004772C();
        uint64_t v582 = v31;
        sub_10004314C(v537, v31, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v544 + 16));
        sub_10004517C();
        uint64_t v31 = (uint64_t)sub_100050CF8;
        sub_100046C10();
        sub_100045410(*(void *)(v16 + 440));
        sub_100046C60();
        sub_100037FF8();

        sub_100043380(v582, *(uint64_t (**)(uint64_t, uint64_t))(v544 + 8));
        goto LABEL_136;
      }
    }

    sub_100043444();
    *(void *)uint64_t v542 = v522;
    goto LABEL_134;
  }

  sub_10004318C();
  sub_100045944();
  sub_100043350( (uint64_t)"Fatal error",  v90,  v91,  v92,  v93,  (uint64_t)"BackgroundShortcutRunner/ToolKitIndexer.swift",  v94,  v95,  v968,  v1071);
  sub_100043108();
}

  sub_10004318C();
  sub_100045944();
  sub_100043350( (uint64_t)"Fatal error",  v93,  v94,  v95,  v96,  (uint64_t)"BackgroundShortcutRunner/ToolKitIndexer.swift",  v97,  v98,  v965,  v1068);
  sub_100043108();
}

LABEL_47:
  sub_100044D78();
  sub_100008D58();
  sub_100040370(&qword_10006A3F0, (uint64_t (*)(uint64_t))&type metadata accessor for ToolFlag);
  sub_100044FD0();
  sub_100043230();
  *(void *)(v16 + 400) = v464;
  uint64_t v465 = sub_10004601C();
  sub_100047718(v465, v466);
  sub_100044AC8();
  *(void *)(v16 + 408) = v467;
  sub_100045FD4(&qword_10006A3F8);
  uint64_t v469 = v468;
  sub_10000844C(&qword_10006A400);
  unint64_t v470 = sub_100045F70();
  uint64_t v471 = sub_100044E4C(v470);
  uint64_t v5104 = static ToolVisibilityFlag.allCases.getter(v471);
  uint64_t v5065 = (uint64_t)v10;
  if (sub_1000531E4(v5104))
  {
    uint64_t v5073 = *(void *)(v16 + 1160);
    unint64_t v26 = *(void *)(v16 + 1152);
    char v5091 = sub_100052268(v5104);
    sub_1000478DC();
    uint64_t v5063 = v472;
    sub_1000468D0();
    uint64_t v5077 = v469;
    uint64_t v5087 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v26;
    do
    {
      if ((v5091 & 1) != 0)
      {
        uint64_t v473 = sub_1000467DC();
        sub_100045E90(v473, v474);
      }

      else
      {
        uint64_t v475 = sub_100046030();
        uint64_t v477 = sub_100038A18(v475, v476, (uint64_t (*)(void))&type metadata accessor for ToolVisibilityFlag);
        if (v5073 != 8)
        {
          __break(1u);
LABEL_262:
          sub_1000132B8();
          uint64_t v16 = v469;
LABEL_263:
          swift_bridgeObjectRelease(*(void *)(v16 + 464));
          sub_100046EB8();
          sub_1000432E8();
          uint64_t v697 = sub_1000448B0();
LABEL_264:
          sub_10000848C(v697, v698, v699, v700);
LABEL_265:
          uint64_t v5109 = *(void *)(v16 + 2032);
          uint64_t v5100 = *(void *)(v16 + 1672);
          uint64_t v5076 = *(void *)(v16 + 1552);
          id v710 = sub_100043A50();
          sub_1000453AC((uint64_t)v710);
          sub_100047750();
          uint64_t v711 = sub_100044B10();
          id v712 = (void *)sub_10004691C(v711);
          v712[7] = v5076;
          v712[8] = v450;
          uint64_t v713 = sub_1000446E4(v712);
          sub_100043B58((uint64_t)v713, v5100);
          ToolDatabase.Rollbackable.inSavepoint<A>(name:work:)(v16, v10, sub_100040F80, v26);
          if (v5109)
          {
            uint64_t v714 = *(void *)(v5113 + 1552);
            uint64_t v715 = *(void *)(v5113 + 1520);
            sub_100043E58();
            uint64_t v717 = *(void *)(v716 + 1248);
            uint64_t v5085 = *(void *)(v5113 + 1240);
            sub_100043820(v718);
            sub_1000447AC();
            sub_100044830();
            sub_1000445E4();
            uint64_t v719 = sub_10000F3F4();
            sub_1000431B8(v719, &qword_10006A388);
            uint64_t v44 = v5113;
            sub_100043AEC(*(uint64_t (**)(uint64_t, uint64_t))(v5113 + 8));
            sub_100043FD4(v714, *(uint64_t (**)(uint64_t, uint64_t))(v715 + 8));
            swift_bridgeObjectRelease(*(void *)(v5113 + 456));
            sub_1000435DC();
            sub_100008D58();
            (*(void (**)(uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t), uint64_t))(v717 + 8))( v5087,  v5085);
            swift_bridgeObjectRelease(*(void *)(v5113 + 400));
            sub_100046AE4();
            swift_bridgeObjectRelease(*(void *)(v5113 + 488));
LABEL_11:
            sub_1000429C4(*(void *)(v44 + 1632));
            sub_10000F338();
            sub_10000F404();
            sub_10000F4A8();
            sub_10000F4EC();
            sub_10000F3F4();
            sub_10000F41C();
            sub_10000F3FC();
            uint64_t v45 = sub_10000F484();
            uint64_t v53 = sub_1000436F0( v45,  v46,  v47,  v48,  v49,  v50,  v51,  v52,  v1201,  v1304,  v1407,  v1510,  v1614,  v1718,  v1821,  v1924,  v2027,  v2129,  v2231,  v2332,  v2432,  v2531,  v2629,  v2725,  v2821,  v2916);
            uint64_t v61 = sub_1000436E8( v53,  v54,  v55,  v56,  v57,  v58,  v59,  v60,  v1202,  v1305,  v1408,  v1511,  v1615,  v1719,  v1822,  v1925,  v2028,  v2130,  v2232,  v2333,  v2433,  v2532,  v2630,  v2726,  v2822,  v2917,  v3009);
            uint64_t v69 = sub_1000436C4( v61,  v62,  v63,  v64,  v65,  v66,  v67,  v68,  v1203,  v1306,  v1409,  v1512,  v1616,  v1720,  v1823,  v1926,  v2029,  v2131,  v2233,  v2334,  v2434,  v2533,  v2631,  v2727,  v2823,  v2918,  v3010,  v3101);
            uint64_t v77 = sub_100043624( v69,  v70,  v71,  v72,  v73,  v74,  v75,  v76,  v1204,  v1307,  v1410,  v1513,  v1617,  v1721,  v1824,  v1927,  v2030,  v2132,  v2234,  v2335,  v2435,  v2534,  v2632,  v2728,  v2824,  v2919,  v3011,  v3102,  v3191);
            uint64_t v85 = sub_100043658( v77,  v78,  v79,  v80,  v81,  v82,  v83,  v84,  v1205,  v1308,  v1411,  v1514,  v1618,  v1722,  v1825,  v1928,  v2031,  v2133,  v2235,  v2336,  v2436,  v2535,  v2633,  v2729,  v2825,  v2920,  v3012,  v3103,  v3192,  v3278);
            uint64_t v93 = sub_100043660( v85,  v86,  v87,  v88,  v89,  v90,  v91,  v92,  v1206,  v1309,  v1412,  v1515,  v1619,  v1723,  v1826,  v1929,  v2032,  v2134,  v2236,  v2337,  v2437,  v2536,  v2634,  v2730,  v2826,  v2921,  v3013,  v3104,  v3193,  v3279,  v3364);
            uint64_t v101 = sub_10004361C( v93,  v94,  v95,  v96,  v97,  v98,  v99,  v100,  v1207,  v1310,  v1413,  v1516,  v1620,  v1724,  v1827,  v1930,  v2033,  v2135,  v2237,  v2338,  v2438,  v2537,  v2635,  v2731,  v2827,  v2922,  v3014,  v3105,  v3194,  v3280,  v3365,  v3447);
            uint64_t v109 = sub_100043614( v101,  v102,  v103,  v104,  v105,  v106,  v107,  v108,  v1208,  v1311,  v1414,  v1517,  v1621,  v1725,  v1828,  v1931,  v2034,  v2136,  v2238,  v2339,  v2439,  v2538,  v2636,  v2732,  v2828,  v2923,  v3015,  v3106,  v3195,  v3281,  v3366,  v3448,  v3529);
            uint64_t v117 = sub_100043A48( v109,  v110,  v111,  v112,  v113,  v114,  v115,  v116,  v1209,  v1312,  v1415,  v1518,  v1622,  v1726,  v1829,  v1932,  v2035,  v2137,  v2239,  v2340,  v2440,  v2539,  v2637,  v2733,  v2829,  v2924,  v3016,  v3107,  v3196,  v3282,  v3367,  v3449,  v3530,  v3608);
            uint64_t v125 = sub_100043A40( v117,  v118,  v119,  v120,  v121,  v122,  v123,  v124,  v1210,  v1313,  v1416,  v1519,  v1623,  v1727,  v1830,  v1933,  v2036,  v2138,  v2240,  v2341,  v2441,  v2540,  v2638,  v2734,  v2830,  v2925,  v3017,  v3108,  v3197,  v3283,  v3368,  v3450,  v3531,  v3609,  v3686);
            uint64_t v133 = sub_1000437F8( v125,  v126,  v127,  v128,  v129,  v130,  v131,  v132,  v1211,  v1314,  v1417,  v1520,  v1624,  v1728,  v1831,  v1934,  v2037,  v2139,  v2241,  v2342,  v2442,  v2541,  v2639,  v2735,  v2831,  v2926,  v3018,  v3109,  v3198,  v3284,  v3369,  v3451,  v3532,  v3610,  v3687,  v3762);
            uint64_t v141 = sub_10004384C( v133,  v134,  v135,  v136,  v137,  v138,  v139,  v140,  v1212,  v1315,  v1418,  v1521,  v1625,  v1729,  v1832,  v1935,  v2038,  v2140,  v2242,  v2343,  v2443,  v2542,  v2640,  v2736,  v2832,  v2927,  v3019,  v3110,  v3199,  v3285,  v3370,  v3452,  v3533,  v3611,  v3688,  v3763,  v3835);
            uint64_t v149 = sub_100043A30( v141,  v142,  v143,  v144,  v145,  v146,  v147,  v148,  v1213,  v1316,  v1419,  v1522,  v1626,  v1730,  v1833,  v1936,  v2039,  v2141,  v2243,  v2344,  v2444,  v2543,  v2641,  v2737,  v2833,  v2928,  v3020,  v3111,  v3200,  v3286,  v3371,  v3453,  v3534,  v3612,  v3689,  v3764,  v3836,  v3907);
            uint64_t v157 = sub_100043A28( v149,  v150,  v151,  v152,  v153,  v154,  v155,  v156,  v1214,  v1317,  v1420,  v1523,  v1627,  v1731,  v1834,  v1937,  v2040,  v2142,  v2244,  v2345,  v2445,  v2544,  v2642,  v2738,  v2834,  v2929,  v3021,  v3112,  v3201,  v3287,  v3372,  v3454,  v3535,  v3613,  v3690,  v3765,  v3837,  v3908,  v3976);
            uint64_t v165 = sub_100043A20( v157,  v158,  v159,  v160,  v161,  v162,  v163,  v164,  v1215,  v1318,  v1421,  v1524,  v1628,  v1732,  v1835,  v1938,  v2041,  v2143,  v2245,  v2346,  v2446,  v2545,  v2643,  v2739,  v2835,  v2930,  v3022,  v3113,  v3202,  v3288,  v3373,  v3455,  v3536,  v3614,  v3691,  v3766,  v3838,  v3909,  v3977,  v4044);
            uint64_t v173 = sub_100043A18( v165,  v166,  v167,  v168,  v169,  v170,  v171,  v172,  v1216,  v1319,  v1422,  v1525,  v1629,  v1733,  v1836,  v1939,  v2042,  v2144,  v2246,  v2347,  v2447,  v2546,  v2644,  v2740,  v2836,  v2931,  v3023,  v3114,  v3203,  v3289,  v3374,  v3456,  v3537,  v3615,  v3692,  v3767,  v3839,  v3910,  v3978,  v4045,  v4109);
            uint64_t v181 = sub_100043A10( v173,  v174,  v175,  v176,  v177,  v178,  v179,  v180,  v1217,  v1320,  v1423,  v1526,  v1630,  v1734,  v1837,  v1940,  v2043,  v2145,  v2247,  v2348,  v2448,  v2547,  v2645,  v2741,  v2837,  v2932,  v3024,  v3115,  v3204,  v3290,  v3375,  v3457,  v3538,  v3616,  v3693,  v3768,  v3840,  v3911,  v3979,  v4046,  v4110,  v4173);
            uint64_t v189 = sub_100043A08( v181,  v182,  v183,  v184,  v185,  v186,  v187,  v188,  v1218,  v1321,  v1424,  v1527,  v1631,  v1735,  v1838,  v1941,  v2044,  v2146,  v2248,  v2349,  v2449,  v2548,  v2646,  v2742,  v2838,  v2933,  v3025,  v3116,  v3205,  v3291,  v3376,  v3458,  v3539,  v3617,  v3694,  v3769,  v3841,  v3912,  v3980,  v4047,  v4111,  v4174,  v4234);
            uint64_t v197 = sub_100043A00( v189,  v190,  v191,  v192,  v193,  v194,  v195,  v196,  v1219,  v1322,  v1425,  v1528,  v1632,  v1736,  v1839,  v1942,  v2045,  v2147,  v2249,  v2350,  v2450,  v2549,  v2647,  v2743,  v2839,  v2934,  v3026,  v3117,  v3206,  v3292,  v3377,  v3459,  v3540,  v3618,  v3695,  v3770,  v3842,  v3913,  v3981,  v4048,  v4112,  v4175,  v4235,  v4294);
            uint64_t v205 = sub_1000439F8( v197,  v198,  v199,  v200,  v201,  v202,  v203,  v204,  v1220,  v1323,  v1426,  v1529,  v1633,  v1737,  v1840,  v1943,  v2046,  v2148,  v2250,  v2351,  v2451,  v2550,  v2648,  v2744,  v2840,  v2935,  v3027,  v3118,  v3207,  v3293,  v3378,  v3460,  v3541,  v3619,  v3696,  v3771,  v3843,  v3914,  v3982,  v4049,  v4113,  v4176,  v4236,  v4295,  v4351);
            uint64_t v213 = sub_1000439F0( v205,  v206,  v207,  v208,  v209,  v210,  v211,  v212,  v1221,  v1324,  v1427,  v1530,  v1634,  v1738,  v1841,  v1944,  v2047,  v2149,  v2251,  v2352,  v2452,  v2551,  v2649,  v2745,  v2841,  v2936,  v3028,  v3119,  v3208,  v3294,  v3379,  v3461,  v3542,  v3620,  v3697,  v3772,  v3844,  v3915,  v3983,  v4050,  v4114,  v4177,  v4237,  v4296,  v4352,  v4407);
            uint64_t v221 = sub_1000439E8( v213,  v214,  v215,  v216,  v217,  v218,  v219,  v220,  v1222,  v1325,  v1428,  v1531,  v1635,  v1739,  v1842,  v1945,  v2048,  v2150,  v2252,  v2353,  v2453,  v2552,  v2650,  v2746,  v2842,  v2937,  v3029,  v3120,  v3209,  v3295,  v3380,  v3462,  v3543,  v3621,  v3698,  v3773,  v3845,  v3916,  v3984,  v4051,  v4115,  v4178,  v4238,  v4297,  v4353,  v4408,  v4460);
            uint64_t v229 = sub_1000439E0( v221,  v222,  v223,  v224,  v225,  v226,  v227,  v228,  v1223,  v1326,  v1429,  v1532,  v1636,  v1740,  v1843,  v1946,  v2049,  v2151,  v2253,  v2354,  v2454,  v2553,  v2651,  v2747,  v2843,  v2938,  v3030,  v3121,  v3210,  v3296,  v3381,  v3463,  v3544,  v3622,  v3699,  v3774,  v3846,  v3917,  v3985,  v4052,  v4116,  v4179,  v4239,  v4298,  v4354,  v4409,  v4461,  v4512);
            uint64_t v237 = sub_1000439D8( v229,  v230,  v231,  v232,  v233,  v234,  v235,  v236,  v1224,  v1327,  v1430,  v1533,  v1637,  v1741,  v1844,  v1947,  v2050,  v2152,  v2254,  v2355,  v2455,  v2554,  v2652,  v2748,  v2844,  v2939,  v3031,  v3122,  v3211,  v3297,  v3382,  v3464,  v3545,  v3623,  v3700,  v3775,  v3847,  v3918,  v3986,  v4053,  v4117,  v4180,  v4240,  v4299,  v4355,  v4410,  v4462,  v4513,  v4562);
            uint64_t v245 = sub_1000439D0( v237,  v238,  v239,  v240,  v241,  v242,  v243,  v244,  v1225,  v1328,  v1431,  v1534,  v1638,  v1742,  v1845,  v1948,  v2051,  v2153,  v2255,  v2356,  v2456,  v2555,  v2653,  v2749,  v2845,  v2940,  v3032,  v3123,  v3212,  v3298,  v3383,  v3465,  v3546,  v3624,  v3701,  v3776,  v3848,  v3919,  v3987,  v4054,  v4118,  v4181,  v4241,  v4300,  v4356,  v4411,  v4463,  v4514,  v4563,
                     v4609);
            uint64_t v253 = sub_1000439C8( v245,  v246,  v247,  v248,  v249,  v250,  v251,  v252,  v1226,  v1329,  v1432,  v1535,  v1639,  v1743,  v1846,  v1949,  v2052,  v2154,  v2256,  v2357,  v2457,  v2556,  v2654,  v2750,  v2846,  v2941,  v3033,  v3124,  v3213,  v3299,  v3384,  v3466,  v3547,  v3625,  v3702,  v3777,  v3849,  v3920,  v3988,  v4055,  v4119,  v4182,  v4242,  v4301,  v4357,  v4412,  v4464,  v4515,  v4564,
                     v4610,
                     v4655);
            uint64_t v261 = sub_1000439C0( v253,  v254,  v255,  v256,  v257,  v258,  v259,  v260,  v1227,  v1330,  v1433,  v1536,  v1640,  v1744,  v1847,  v1950,  v2053,  v2155,  v2257,  v2358,  v2458,  v2557,  v2655,  v2751,  v2847,  v2942,  v3034,  v3125,  v3214,  v3300,  v3385,  v3467,  v3548,  v3626,  v3703,  v3778,  v3850,  v3921,  v3989,  v4056,  v4120,  v4183,  v4243,  v4302,  v4358,  v4413,  v4465,  v4516,  v4565,
                     v4611,
                     v4656,
                     v4698);
            uint64_t v269 = sub_1000439B8( v261,  v262,  v263,  v264,  v265,  v266,  v267,  v268,  v1228,  v1331,  v1434,  v1537,  v1641,  v1745,  v1848,  v1951,  v2054,  v2156,  v2258,  v2359,  v2459,  v2558,  v2656,  v2752,  v2848,  v2943,  v3035,  v3126,  v3215,  v3301,  v3386,  v3468,  v3549,  v3627,  v3704,  v3779,  v3851,  v3922,  v3990,  v4057,  v4121,  v4184,  v4244,  v4303,  v4359,  v4414,  v4466,  v4517,  v4566,
                     v4612,
                     v4657,
                     v4699,
                     v4739);
            uint64_t v277 = sub_1000439B0( v269,  v270,  v271,  v272,  v273,  v274,  v275,  v276,  v1229,  v1332,  v1435,  v1538,  v1642,  v1746,  v1849,  v1952,  v2055,  v2157,  v2259,  v2360,  v2460,  v2559,  v2657,  v2753,  v2849,  v2944,  v3036,  v3127,  v3216,  v3302,  v3387,  v3469,  v3550,  v3628,  v3705,  v3780,  v3852,  v3923,  v3991,  v4058,  v4122,  v4185,  v4245,  v4304,  v4360,  v4415,  v4467,  v4518,  v4567,
                     v4613,
                     v4658,
                     v4700,
                     v4740,
                     v4779);
            uint64_t v285 = sub_1000439A8( v277,  v278,  v279,  v280,  v281,  v282,  v283,  v284,  v1230,  v1333,  v1436,  v1539,  v1643,  v1747,  v1850,  v1953,  v2056,  v2158,  v2260,  v2361,  v2461,  v2560,  v2658,  v2754,  v2850,  v2945,  v3037,  v3128,  v3217,  v3303,  v3388,  v3470,  v3551,  v3629,  v3706,  v3781,  v3853,  v3924,  v3992,  v4059,  v4123,  v4186,  v4246,  v4305,  v4361,  v4416,  v4468,  v4519,  v4568,
                     v4614,
                     v4659,
                     v4701,
                     v4741,
                     v4780,
                     v4816);
            uint64_t v293 = sub_1000439A0( v285,  v286,  v287,  v288,  v289,  v290,  v291,  v292,  v1231,  v1334,  v1437,  v1540,  v1644,  v1748,  v1851,  v1954,  v2057,  v2159,  v2261,  v2362,  v2462,  v2561,  v2659,  v2755,  v2851,  v2946,  v3038,  v3129,  v3218,  v3304,  v3389,  v3471,  v3552,  v3630,  v3707,  v3782,  v3854,  v3925,  v3993,  v4060,  v4124,  v4187,  v4247,  v4306,  v4362,  v4417,  v4469,  v4520,  v4569,
                     v4615,
                     v4660,
                     v4702,
                     v4742,
                     v4781,
                     v4817,
                     v4852);
            uint64_t v301 = sub_100043998( v293,  v294,  v295,  v296,  v297,  v298,  v299,  v300,  v1232,  v1335,  v1438,  v1541,  v1645,  v1749,  v1852,  v1955,  v2058,  v2160,  v2262,  v2363,  v2463,  v2562,  v2660,  v2756,  v2852,  v2947,  v3039,  v3130,  v3219,  v3305,  v3390,  v3472,  v3553,  v3631,  v3708,  v3783,  v3855,  v3926,  v3994,  v4061,  v4125,  v4188,  v4248,  v4307,  v4363,  v4418,  v4470,  v4521,  v4570,
                     v4616,
                     v4661,
                     v4703,
                     v4743,
                     v4782,
                     v4818,
                     v4853,
                     v4885);
            uint64_t v309 = sub_100043990( v301,  v302,  v303,  v304,  v305,  v306,  v307,  v308,  v1233,  v1336,  v1439,  v1542,  v1646,  v1750,  v1853,  v1956,  v2059,  v2161,  v2263,  v2364,  v2464,  v2563,  v2661,  v2757,  v2853,  v2948,  v3040,  v3131,  v3220,  v3306,  v3391,  v3473,  v3554,  v3632,  v3709,  v3784,  v3856,  v3927,  v3995,  v4062,  v4126,  v4189,  v4249,  v4308,  v4364,  v4419,  v4471,  v4522,  v4571,
                     v4617,
                     v4662,
                     v4704,
                     v4744,
                     v4783,
                     v4819,
                     v4854,
                     v4886,
                     v4916);
            uint64_t v317 = sub_100043988( v309,  v310,  v311,  v312,  v313,  v314,  v315,  v316,  v1234,  v1337,  v1440,  v1543,  v1647,  v1751,  v1854,  v1957,  v2060,  v2162,  v2264,  v2365,  v2465,  v2564,  v2662,  v2758,  v2854,  v2949,  v3041,  v3132,  v3221,  v3307,  v3392,  v3474,  v3555,  v3633,  v3710,  v3785,  v3857,  v3928,  v3996,  v4063,  v4127,  v4190,  v4250,  v4309,  v4365,  v4420,  v4472,  v4523,  v4572,
                     v4618,
                     v4663,
                     v4705,
                     v4745,
                     v4784,
                     v4820,
                     v4855,
                     v4887,
                     v4917,
                     v4945);
            uint64_t v325 = sub_100043980( v317,  v318,  v319,  v320,  v321,  v322,  v323,  v324,  v1235,  v1338,  v1441,  v1544,  v1648,  v1752,  v1855,  v1958,  v2061,  v2163,  v2265,  v2366,  v2466,  v2565,  v2663,  v2759,  v2855,  v2950,  v3042,  v3133,  v3222,  v3308,  v3393,  v3475,  v3556,  v3634,  v3711,  v3786,  v3858,  v3929,  v3997,  v4064,  v4128,  v4191,  v4251,  v4310,  v4366,  v4421,  v4473,  v4524,  v4573,
                     v4619,
                     v4664,
                     v4706,
                     v4746,
                     v4785,
                     v4821,
                     v4856,
                     v4888,
                     v4918,
                     v4946,
                     v4972);
            uint64_t v333 = sub_100043978( v325,  v326,  v327,  v328,  v329,  v330,  v331,  v332,  v1236,  v1339,  v1442,  v1545,  v1649,  v1753,  v1856,  v1959,  v2062,  v2164,  v2266,  v2367,  v2467,  v2566,  v2664,  v2760,  v2856,  v2951,  v3043,  v3134,  v3223,  v3309,  v3394,  v3476,  v3557,  v3635,  v3712,  v3787,  v3859,  v3930,  v3998,  v4065,  v4129,  v4192,  v4252,  v4311,  v4367,  v4422,  v4474,  v4525,  v4574,
                     v4620,
                     v4665,
                     v4707,
                     v4747,
                     v4786,
                     v4822,
                     v4857,
                     v4889,
                     v4919,
                     v4947,
                     v4973,
                     v4997);
            uint64_t v341 = sub_100043970( v333,  v334,  v335,  v336,  v337,  v338,  v339,  v340,  v1237,  v1340,  v1443,  v1546,  v1650,  v1754,  v1857,  v1960,  v2063,  v2165,  v2267,  v2368,  v2468,  v2567,  v2665,  v2761,  v2857,  v2952,  v3044,  v3135,  v3224,  v3310,  v3395,  v3477,  v3558,  v3636,  v3713,  v3788,  v3860,  v3931,  v3999,  v4066,  v4130,  v4193,  v4253,  v4312,  v4368,  v4423,  v4475,  v4526,  v4575,
                     v4621,
                     v4666,
                     v4708,
                     v4748,
                     v4787,
                     v4823,
                     v4858,
                     v4890,
                     v4920,
                     v4948,
                     v4974,
                     v4998,
                     v5020);
            uint64_t v349 = sub_100043968( v341,  v342,  v343,  v344,  v345,  v346,  v347,  v348,  v1238,  v1341,  v1444,  v1547,  v1651,  v1755,  v1858,  v1961,  v2064,  v2166,  v2268,  v2369,  v2469,  v2568,  v2666,  v2762,  v2858,  v2953,  v3045,  v3136,  v3225,  v3311,  v3396,  v3478,  v3559,  v3637,  v3714,  v3789,  v3861,  v3932,  v4000,  v4067,  v4131,  v4194,  v4254,  v4313,  v4369,  v4424,  v4476,  v4527,  v4576,
                     v4622,
                     v4667,
                     v4709,
                     v4749,
                     v4788,
                     v4824,
                     v4859,
                     v4891,
                     v4921,
                     v4949,
                     v4975,
                     v4999,
                     v5021,
                     v5041);
            uint64_t v357 = sub_100043960( v349,  v350,  v351,  v352,  v353,  v354,  v355,  v356,  v1239,  v1342,  v1445,  v1548,  v1652,  v1756,  v1859,  v1962,  v2065,  v2167,  v2269,  v2370,  v2470,  v2569,  v2667,  v2763,  v2859,  v2954,  v3046,  v3137,  v3226,  v3312,  v3397,  v3479,  v3560,  v3638,  v3715,  v3790,  v3862,  v3933,  v4001,  v4068,  v4132,  v4195,  v4255,  v4314,  v4370,  v4425,  v4477,  v4528,  v4577,
                     v4623,
                     v4668,
                     v4710,
                     v4750,
                     v4789,
                     v4825,
                     v4860,
                     v4892,
                     v4922,
                     v4950,
                     v4976,
                     v5000,
                     v5022,
                     v5042);
            uint64_t v365 = sub_100043958( v357,  v358,  v359,  v360,  v361,  v362,  v363,  v364,  v1240,  v1343,  v1446,  v1549,  v1653,  v1757,  v1860,  v1963,  v2066,  v2168,  v2270,  v2371,  v2471,  v2570,  v2668,  v2764,  v2860,  v2955,  v3047,  v3138,  v3227,  v3313,  v3398,  v3480,  v3561,  v3639,  v3716,  v3791,  v3863,  v3934,  v4002,  v4069,  v4133,  v4196,  v4256,  v4315,  v4371,  v4426,  v4478,  v4529,  v4578,
                     v4624,
                     v4669,
                     v4711,
                     v4751,
                     v4790,
                     v4826,
                     v4861,
                     v4893,
                     v4923,
                     v4951,
                     v4977,
                     v5001,
                     v5023,
                     v5043);
            uint64_t v373 = sub_100043950( v365,  v366,  v367,  v368,  v369,  v370,  v371,  v372,  v1241,  v1344,  v1447,  v1550,  v1654,  v1758,  v1861,  v1964,  v2067,  v2169,  v2271,  v2372,  v2472,  v2571,  v2669,  v2765,  v2861,  v2956,  v3048,  v3139,  v3228,  v3314,  v3399,  v3481,  v3562,  v3640,  v3717,  v3792,  v3864,  v3935,  v4003,  v4070,  v4134,  v4197,  v4257,  v4316,  v4372,  v4427,  v4479,  v4530,  v4579,
                     v4625,
                     v4670,
                     v4712,
                     v4752,
                     v4791,
                     v4827,
                     v4862,
                     v4894,
                     v4924,
                     v4952,
                     v4978,
                     v5002,
                     v5024,
                     v5044);
            uint64_t v381 = sub_100043948( v373,  v374,  v375,  v376,  v377,  v378,  v379,  v380,  v1242,  v1345,  v1448,  v1551,  v1655,  v1759,  v1862,  v1965,  v2068,  v2170,  v2272,  v2373,  v2473,  v2572,  v2670,  v2766,  v2862,  v2957,  v3049,  v3140,  v3229,  v3315,  v3400,  v3482,  v3563,  v3641,  v3718,  v3793,  v3865,  v3936,  v4004,  v4071,  v4135,  v4198,  v4258,  v4317,  v4373,  v4428,  v4480,  v4531,  v4580,
                     v4626,
                     v4671,
                     v4713,
                     v4753,
                     v4792,
                     v4828,
                     v4863,
                     v4895,
                     v4925,
                     v4953,
                     v4979,
                     v5003,
                     v5025,
                     v5045);
            uint64_t v389 = sub_100043940( v381,  v382,  v383,  v384,  v385,  v386,  v387,  v388,  v1243,  v1346,  v1449,  v1552,  v1656,  v1760,  v1863,  v1966,  v2069,  v2171,  v2273,  v2374,  v2474,  v2573,  v2671,  v2767,  v2863,  v2958,  v3050,  v3141,  v3230,  v3316,  v3401,  v3483,  v3564,  v3642,  v3719,  v3794,  v3866,  v3937,  v4005,  v4072,  v4136,  v4199,  v4259,  v4318,  v4374,  v4429,  v4481,  v4532,  v4581,
                     v4627,
                     v4672,
                     v4714,
                     v4754,
                     v4793,
                     v4829,
                     v4864,
                     v4896,
                     v4926,
                     v4954,
                     v4980,
                     v5004,
                     v5026,
                     v5046);
            uint64_t v397 = sub_100043E48( v389,  v390,  v391,  v392,  v393,  v394,  v395,  v396,  v1244,  v1347,  v1450,  v1553,  v1657,  v1761,  v1864,  v1967,  v2070,  v2172,  v2274,  v2375,  v2475,  v2574,  v2672,  v2768,  v2864,  v2959,  v3051,  v3142,  v3231,  v3317,  v3402,  v3484,  v3565,  v3643,  v3720,  v3795,  v3867,  v3938,  v4006,  v4073,  v4137,  v4200,  v4260,  v4319,  v4375,  v4430,  v4482,  v4533,  v4582,
                     v4628,
                     v4673,
                     v4715,
                     v4755,
                     v4794,
                     v4830,
                     v4865,
                     v4897,
                     v4927,
                     v4955,
                     v4981,
                     v5005,
                     v5027,
                     v5047);
            uint64_t v405 = sub_100043E40( v397,  v398,  v399,  v400,  v401,  v402,  v403,  v404,  v1245,  v1348,  v1451,  v1554,  v1658,  v1762,  v1865,  v1968,  v2071,  v2173,  v2275,  v2376,  v2476,  v2575,  v2673,  v2769,  v2865,  v2960,  v3052,  v3143,  v3232,  v3318,  v3403,  v3485,  v3566,  v3644,  v3721,  v3796,  v3868,  v3939,  v4007,  v4074,  v4138,  v4201,  v4261,  v4320,  v4376,  v4431,  v4483,  v4534,  v4583,
                     v4629,
                     v4674,
                     v4716,
                     v4756,
                     v4795,
                     v4831,
                     v4866,
                     v4898,
                     v4928,
                     v4956,
                     v4982,
                     v5006,
                     v5028,
                     v5048);
            uint64_t v413 = sub_100043E38( v405,  v406,  v407,  v408,  v409,  v410,  v411,  v412,  v1246,  v1349,  v1452,  v1555,  v1659,  v1763,  v1866,  v1969,  v2072,  v2174,  v2276,  v2377,  v2477,  v2576,  v2674,  v2770,  v2866,  v2961,  v3053,  v3144,  v3233,  v3319,  v3404,  v3486,  v3567,  v3645,  v3722,  v3797,  v3869,  v3940,  v4008,  v4075,  v4139,  v4202,  v4262,  v4321,  v4377,  v4432,  v4484,  v4535,  v4584,
                     v4630,
                     v4675,
                     v4717,
                     v4757,
                     v4796,
                     v4832,
                     v4867,
                     v4899,
                     v4929,
                     v4957,
                     v4983,
                     v5007,
                     v5029,
                     v5049);
            sub_100043E30( v413,  v414,  v415,  v416,  v417,  v418,  v419,  v420,  v1247,  v1350,  v1453,  v1556,  v1660,  v1764,  v1867,  v1970,  v2073,  v2175,  v2277,  v2378,  v2478,  v2577,  v2675,  v2771,  v2867,  v2962,  v3054,  v3145,  v3234,  v3320,  v3405,  v3487,  v3568,  v3646,  v3723,  v3798,  v3870,  v3941,  v4009,  v4076,  v4140,  v4203,  v4263,  v4322,  v4378,  v4433,  v4485,  v4536,  v4585,
              v4631,
              v4676,
              v4718,
              v4758,
              v4797,
              v4833,
              v4868,
              v4900,
              v4930,
              v4958,
              v4984,
              v5008,
              v5030,
              v5050);
            sub_100043E28();
            sub_100043E20();
            sub_100044828();
            sub_100045990();
            sub_100045988();
            sub_100044820();
            sub_100044818();
            sub_100044810();
            sub_100044808();
            sub_100044800();
            sub_100043938();
            sub_100043930();
            sub_100043928();
            sub_100043920();
            sub_100043D44();
            sub_100043DB4();
            sub_100043DAC();
            sub_100043EF0();
            sub_100043E50();
            unint64_t v421 = (uint64_t (*)(void))sub_100044674();
          }

          else
          {
            uint64_t v2176 = *(void *)(v5113 + 1608);
            uint64_t v2278 = *(void *)(v5113 + 1600);
            uint64_t v2379 = *(void *)(v5113 + 1592);
            uint64_t v2479 = *(void *)(v5113 + 1584);
            uint64_t v2578 = *(void *)(v5113 + 1576);
            uint64_t v2772 = *(void *)(v5113 + 1544);
            uint64_t v2868 = *(void *)(v5113 + 1536);
            uint64_t v1765 = *(void *)(v5113 + 1520);
            uint64_t v1868 = *(void *)(v5113 + 1512);
            uint64_t v1971 = *(void *)(v5113 + 1552);
            uint64_t v3055 = *(void *)(v5113 + 1528);
            uint64_t v3146 = *(void *)(v5113 + 1504);
            uint64_t v3321 = *(void *)(v5113 + 1496);
            uint64_t v3488 = *(void *)(v5113 + 1488);
            uint64_t v3647 = *(void *)(v5113 + 1464);
            uint64_t v3724 = *(void *)(v5113 + 1456);
            uint64_t v3871 = *(void *)(v5113 + 1448);
            uint64_t v4010 = *(void *)(v5113 + 1440);
            uint64_t v4141 = *(void *)(v5113 + 1408);
            uint64_t v4264 = *(void *)(v5113 + 1400);
            uint64_t v4379 = *(void *)(v5113 + 1376);
            uint64_t v4486 = *(void *)(v5113 + 1368);
            uint64_t v4537 = *(void *)(v5113 + 1344);
            uint64_t v4632 = *(void *)(v5113 + 1336);
            uint64_t v1557 = *(void *)(v5113 + 1304);
            uint64_t v1661 = *(void *)(v5113 + 1320);
            uint64_t v2074 = *(void *)(v5113 + 1296);
            uint64_t v4759 = *(void *)(v5113 + 1288);
            uint64_t v4834 = *(void *)(v5113 + 1280);
            uint64_t v720 = *(void *)(v5113 + 1272);
            uint64_t v721 = *(void *)(v5113 + 1256);
            uint64_t v722 = *(void *)(v5113 + 1248);
            sub_100042CF8(*(void *)(v5113 + 1632), *(void *)(v5113 + 1616));
            sub_1000447AC();
            sub_100044830();
            sub_1000445E4();
            uint64_t v723 = sub_10000F3F4();
            sub_1000431B8(v723, &qword_10006A388);
            uint64_t v732 = sub_100043F00(v724, v725, v726, v727, v728, v729, v730, v731, v1201, v1304, v1407, v1557, v1661);
            sub_100043F48( v732,  v733,  v734,  v735,  v736,  v737,  v738,  v739,  v1248,  v1351,  v1454,  v1558,  v1662,  v1765,  v1868,  v1971);
            sub_100043B64();
            sub_1000435DC();
            sub_100042E4C();
            sub_100043380(v721, *(uint64_t (**)(uint64_t, uint64_t))(v722 + 8));
            sub_100043A38();
            sub_100043910(v2074, *(uint64_t (**)(uint64_t, uint64_t))(v720 + 8));
            sub_100043B04();
            uint64_t v740 = sub_10000F404();
            uint64_t v748 = sub_1000435E4( v740,  v741,  v742,  v743,  v744,  v745,  v746,  v747,  v1249,  v1352,  v1455,  v1559,  v1663,  v1766,  v1869,  v1972,  v2074,  v2176);
            uint64_t v756 = sub_100043900( v748,  v749,  v750,  v751,  v752,  v753,  v754,  v755,  v1250,  v1353,  v1456,  v1560,  v1664,  v1767,  v1870,  v1973,  v2075,  v2177,  v2278);
            uint64_t v764 = sub_100043AE4( v756,  v757,  v758,  v759,  v760,  v761,  v762,  v763,  v1251,  v1354,  v1457,  v1561,  v1665,  v1768,  v1871,  v1974,  v2076,  v2178,  v2279,  v2379);
            uint64_t v772 = sub_100044AF4( v764,  v765,  v766,  v767,  v768,  v769,  v770,  v771,  v1252,  v1355,  v1458,  v1562,  v1666,  v1769,  v1872,  v1975,  v2077,  v2179,  v2280,  v2380,  v2479);
            sub_100044940( v772,  v773,  v774,  v775,  v776,  v777,  v778,  v779,  v1253,  v1356,  v1459,  v1563,  v1667,  v1770,  v1873,  v1976,  v2078,  v2180,  v2281,  v2381,  v2480,  v2578);
            uint64_t v780 = sub_10000F3F4();
            uint64_t v788 = sub_100043EE8( v780,  v781,  v782,  v783,  v784,  v785,  v786,  v787,  v1254,  v1357,  v1460,  v1564,  v1668,  v1771,  v1874,  v1977,  v2079,  v2181,  v2282,  v2382,  v2481,  v2579,  v2629,  v2772);
            uint64_t v796 = sub_100043F40( v788,  v789,  v790,  v791,  v792,  v793,  v794,  v795,  v1255,  v1358,  v1461,  v1565,  v1669,  v1772,  v1875,  v1978,  v2080,  v2182,  v2283,  v2383,  v2482,  v2580,  v2676,  v2773,  v2868);
            uint64_t v804 = sub_1000436E8( v796,  v797,  v798,  v799,  v800,  v801,  v802,  v803,  v1256,  v1359,  v1462,  v1566,  v1670,  v1773,  v1876,  v1979,  v2081,  v2183,  v2284,  v2384,  v2483,  v2581,  v2677,  v2774,  v2869,  v2916,  v3055);
            uint64_t v812 = sub_1000436C4( v804,  v805,  v806,  v807,  v808,  v809,  v810,  v811,  v1257,  v1360,  v1463,  v1567,  v1671,  v1774,  v1877,  v1980,  v2082,  v2184,  v2285,  v2385,  v2484,  v2582,  v2678,  v2775,  v2870,  v2963,  v3056,  v3146);
            uint64_t v820 = sub_100043658( v812,  v813,  v814,  v815,  v816,  v817,  v818,  v819,  v1258,  v1361,  v1464,  v1568,  v1672,  v1775,  v1878,  v1981,  v2083,  v2185,  v2286,  v2386,  v2485,  v2583,  v2679,  v2776,  v2871,  v2964,  v3057,  v3147,  v3191,  v3321);
            uint64_t v828 = sub_10004361C( v820,  v821,  v822,  v823,  v824,  v825,  v826,  v827,  v1259,  v1362,  v1465,  v1569,  v1673,  v1776,  v1879,  v1982,  v2084,  v2186,  v2287,  v2387,  v2486,  v2584,  v2680,  v2777,  v2872,  v2965,  v3058,  v3148,  v3235,  v3322,  v3364,  v3488);
            uint64_t v836 = sub_100043A48( v828,  v829,  v830,  v831,  v832,  v833,  v834,  v835,  v1260,  v1363,  v1466,  v1570,  v1674,  v1777,  v1880,  v1983,  v2085,  v2187,  v2288,  v2388,  v2487,  v2585,  v2681,  v2778,  v2873,  v2966,  v3059,  v3149,  v3236,  v3323,  v3406,  v3489,  v3529,  v3647);
            uint64_t v844 = sub_100043A40( v836,  v837,  v838,  v839,  v840,  v841,  v842,  v843,  v1261,  v1364,  v1467,  v1571,  v1675,  v1778,  v1881,  v1984,  v2086,  v2188,  v2289,  v2389,  v2488,  v2586,  v2682,  v2779,  v2874,  v2967,  v3060,  v3150,  v3237,  v3324,  v3407,  v3490,  v3569,  v3648,  v3724);
            uint64_t v852 = sub_10004384C( v844,  v845,  v846,  v847,  v848,  v849,  v850,  v851,  v1262,  v1365,  v1468,  v1572,  v1676,  v1779,  v1882,  v1985,  v2087,  v2189,  v2290,  v2390,  v2489,  v2587,  v2683,  v2780,  v2875,  v2968,  v3061,  v3151,  v3238,  v3325,  v3408,  v3491,  v3570,  v3649,  v3725,  v3762,  v3871);
            uint64_t v860 = sub_100043A28( v852,  v853,  v854,  v855,  v856,  v857,  v858,  v859,  v1263,  v1366,  v1469,  v1573,  v1677,  v1780,  v1883,  v1986,  v2088,  v2190,  v2291,  v2391,  v2490,  v2588,  v2684,  v2781,  v2876,  v2969,  v3062,  v3152,  v3239,  v3326,  v3409,  v3492,  v3571,  v3650,  v3726,  v3799,  v3872,  v3907,  v4010);
            uint64_t v868 = sub_100043A18( v860,  v861,  v862,  v863,  v864,  v865,  v866,  v867,  v1264,  v1367,  v1470,  v1574,  v1678,  v1781,  v1884,  v1987,  v2089,  v2191,  v2292,  v2392,  v2491,  v2589,  v2685,  v2782,  v2877,  v2970,  v3063,  v3153,  v3240,  v3327,  v3410,  v3493,  v3572,  v3651,  v3727,  v3800,  v3873,  v3942,  v4011,  v4044,  v4141);
            uint64_t v876 = sub_100043A08( v868,  v869,  v870,  v871,  v872,  v873,  v874,  v875,  v1265,  v1368,  v1471,  v1575,  v1679,  v1782,  v1885,  v1988,  v2090,  v2192,  v2293,  v2393,  v2492,  v2590,  v2686,  v2783,  v2878,  v2971,  v3064,  v3154,  v3241,  v3328,  v3411,  v3494,  v3573,  v3652,  v3728,  v3801,  v3874,  v3943,  v4012,  v4077,  v4142,  v4173,  v4264);
            uint64_t v884 = sub_1000439F8( v876,  v877,  v878,  v879,  v880,  v881,  v882,  v883,  v1266,  v1369,  v1472,  v1576,  v1680,  v1783,  v1886,  v1989,  v2091,  v2193,  v2294,  v2394,  v2493,  v2591,  v2687,  v2784,  v2879,  v2972,  v3065,  v3155,  v3242,  v3329,  v3412,  v3495,  v3574,  v3653,  v3729,  v3802,  v3875,  v3944,  v4013,  v4078,  v4143,  v4204,  v4265,  v4294,  v4379);
            uint64_t v892 = sub_1000439E8( v884,  v885,  v886,  v887,  v888,  v889,  v890,  v891,  v1267,  v1370,  v1473,  v1577,  v1681,  v1784,  v1887,  v1990,  v2092,  v2194,  v2295,  v2395,  v2494,  v2592,  v2688,  v2785,  v2880,  v2973,  v3066,  v3156,  v3243,  v3330,  v3413,  v3496,  v3575,  v3654,  v3730,  v3803,  v3876,  v3945,  v4014,  v4079,  v4144,  v4205,  v4266,  v4323,  v4380,  v4407,  v4486);
            uint64_t v900 = sub_1000439E0( v892,  v893,  v894,  v895,  v896,  v897,  v898,  v899,  v1268,  v1371,  v1474,  v1578,  v1682,  v1785,  v1888,  v1991,  v2093,  v2195,  v2296,  v2396,  v2495,  v2593,  v2689,  v2786,  v2881,  v2974,  v3067,  v3157,  v3244,  v3331,  v3414,  v3497,  v3576,  v3655,  v3731,  v3804,  v3877,  v3946,  v4015,  v4080,  v4145,  v4206,  v4267,  v4324,  v4381,  v4434,  v4487,  v4537);
            sub_1000439D0( v900,  v901,  v902,  v903,  v904,  v905,  v906,  v907,  v1269,  v1372,  v1475,  v1579,  v1683,  v1786,  v1889,  v1992,  v2094,  v2196,  v2297,  v2397,  v2496,  v2594,  v2690,  v2787,  v2882,  v2975,  v3068,  v3158,  v3245,  v3332,  v3415,  v3498,  v3577,  v3656,  v3732,  v3805,  v3878,  v3947,  v4016,  v4081,  v4146,  v4207,  v4268,  v4325,  v4382,  v4435,  v4488,  v4538,  v4562,
              v4632);
            sub_10000F4EC();
            uint64_t v908 = sub_10000F338();
            uint64_t v916 = sub_1000439B8( v908,  v909,  v910,  v911,  v912,  v913,  v914,  v915,  v1270,  v1373,  v1476,  v1580,  v1684,  v1787,  v1890,  v1993,  v2095,  v2197,  v2298,  v2398,  v2497,  v2595,  v2691,  v2788,  v2883,  v2976,  v3069,  v3159,  v3246,  v3333,  v3416,  v3499,  v3578,  v3657,  v3733,  v3806,  v3879,  v3948,  v4017,  v4082,  v4147,  v4208,  v4269,  v4326,  v4383,  v4436,  v4489,  v4539,  v4586,
                     v4633,
                     v4655,
                     v4698,
                     v4759);
            sub_1000439A8( v916,  v917,  v918,  v919,  v920,  v921,  v922,  v923,  v1271,  v1374,  v1477,  v1581,  v1685,  v1788,  v1891,  v1994,  v2096,  v2198,  v2299,  v2399,  v2498,  v2596,  v2692,  v2789,  v2884,  v2977,  v3070,  v3160,  v3247,  v3334,  v3417,  v3500,  v3579,  v3658,  v3734,  v3807,  v3880,  v3949,  v4018,  v4083,  v4148,  v4209,  v4270,  v4327,  v4384,  v4437,  v4490,  v4540,  v4587,
              v4634,
              v4677,
              v4719,
              v4760,
              v4779,
              v4834);
            uint64_t v924 = sub_10000F484();
            uint64_t v932 = sub_1000436F0( v924,  v925,  v926,  v927,  v928,  v929,  v930,  v931,  v1272,  v1375,  v1478,  v1582,  v1686,  v1789,  v1892,  v1995,  v2097,  v2199,  v2300,  v2400,  v2499,  v2597,  v2693,  v2790,  v2885,  v2978);
            uint64_t v940 = sub_100043624( v932,  v933,  v934,  v935,  v936,  v937,  v938,  v939,  v1273,  v1376,  v1479,  v1583,  v1687,  v1790,  v1893,  v1996,  v2098,  v2200,  v2301,  v2401,  v2500,  v2598,  v2694,  v2791,  v2886,  v2979,  v3071,  v3161,  v3248);
            uint64_t v948 = sub_100043660( v940,  v941,  v942,  v943,  v944,  v945,  v946,  v947,  v1274,  v1377,  v1480,  v1584,  v1688,  v1791,  v1894,  v1997,  v2099,  v2201,  v2302,  v2402,  v2501,  v2599,  v2695,  v2792,  v2887,  v2980,  v3072,  v3162,  v3249,  v3335,  v3418);
            uint64_t v956 = sub_100043614( v948,  v949,  v950,  v951,  v952,  v953,  v954,  v955,  v1275,  v1378,  v1481,  v1585,  v1689,  v1792,  v1895,  v1998,  v2100,  v2202,  v2303,  v2403,  v2502,  v2600,  v2696,  v2793,  v2888,  v2981,  v3073,  v3163,  v3250,  v3336,  v3419,  v3501,  v3580);
            uint64_t v964 = sub_1000437F8( v956,  v957,  v958,  v959,  v960,  v961,  v962,  v963,  v1276,  v1379,  v1482,  v1586,  v1690,  v1793,  v1896,  v1999,  v2101,  v2203,  v2304,  v2404,  v2503,  v2601,  v2697,  v2794,  v2889,  v2982,  v3074,  v3164,  v3251,  v3337,  v3420,  v3502,  v3581,  v3659,  v3735,  v3808);
            uint64_t v972 = sub_100043A30( v964,  v965,  v966,  v967,  v968,  v969,  v970,  v971,  v1277,  v1380,  v1483,  v1587,  v1691,  v1794,  v1897,  v2000,  v2102,  v2204,  v2305,  v2405,  v2504,  v2602,  v2698,  v2795,  v2890,  v2983,  v3075,  v3165,  v3252,  v3338,  v3421,  v3503,  v3582,  v3660,  v3736,  v3809,  v3881,  v3950);
            uint64_t v980 = sub_100043A20( v972,  v973,  v974,  v975,  v976,  v977,  v978,  v979,  v1278,  v1381,  v1484,  v1588,  v1692,  v1795,  v1898,  v2001,  v2103,  v2205,  v2306,  v2406,  v2505,  v2603,  v2699,  v2796,  v2891,  v2984,  v3076,  v3166,  v3253,  v3339,  v3422,  v3504,  v3583,  v3661,  v3737,  v3810,  v3882,  v3951,  v4019,  v4084);
            uint64_t v988 = sub_100043A10( v980,  v981,  v982,  v983,  v984,  v985,  v986,  v987,  v1279,  v1382,  v1485,  v1589,  v1693,  v1796,  v1899,  v2002,  v2104,  v2206,  v2307,  v2407,  v2506,  v2604,  v2700,  v2797,  v2892,  v2985,  v3077,  v3167,  v3254,  v3340,  v3423,  v3505,  v3584,  v3662,  v3738,  v3811,  v3883,  v3952,  v4020,  v4085,  v4149,  v4210);
            uint64_t v996 = sub_100043A00( v988,  v989,  v990,  v991,  v992,  v993,  v994,  v995,  v1280,  v1383,  v1486,  v1590,  v1694,  v1797,  v1900,  v2003,  v2105,  v2207,  v2308,  v2408,  v2507,  v2605,  v2701,  v2798,  v2893,  v2986,  v3078,  v3168,  v3255,  v3341,  v3424,  v3506,  v3585,  v3663,  v3739,  v3812,  v3884,  v3953,  v4021,  v4086,  v4150,  v4211,  v4271,  v4328);
            uint64_t v1004 = sub_1000439F0( v996,  v997,  v998,  v999,  v1000,  v1001,  v1002,  v1003,  v1281,  v1384,  v1487,  v1591,  v1695,  v1798,  v1901,  v2004,  v2106,  v2208,  v2309,  v2409,  v2508,  v2606,  v2702,  v2799,  v2894,  v2987,  v3079,  v3169,  v3256,  v3342,  v3425,  v3507,  v3586,  v3664,  v3740,  v3813,  v3885,  v3954,  v4022,  v4087,  v4151,  v4212,  v4272,  v4329,  v4385,  v4438);
            uint64_t v1012 = sub_1000439D8( v1004,  v1005,  v1006,  v1007,  v1008,  v1009,  v1010,  v1011,  v1282,  v1385,  v1488,  v1592,  v1696,  v1799,  v1902,  v2005,  v2107,  v2209,  v2310,  v2410,  v2509,  v2607,  v2703,  v2800,  v2895,  v2988,  v3080,  v3170,  v3257,  v3343,  v3426,  v3508,  v3587,  v3665,  v3741,  v3814,  v3886,  v3955,  v4023,  v4088,  v4152,  v4213,  v4273,  v4330,  v4386,  v4439,  v4491,  v4541,  v4588);
            uint64_t v1020 = sub_1000439C8( v1012,  v1013,  v1014,  v1015,  v1016,  v1017,  v1018,  v1019,  v1283,  v1386,  v1489,  v1593,  v1697,  v1800,  v1903,  v2006,  v2108,  v2210,  v2311,  v2411,  v2510,  v2608,  v2704,  v2801,  v2896,  v2989,  v3081,  v3171,  v3258,  v3344,  v3427,  v3509,  v3588,  v3666,  v3742,  v3815,  v3887,  v3956,  v4024,  v4089,  v4153,  v4214,  v4274,  v4331,  v4387,  v4440,  v4492,  v4542,  v4589,
                      v4635,
                      v4678);
            uint64_t v1028 = sub_1000439C0( v1020,  v1021,  v1022,  v1023,  v1024,  v1025,  v1026,  v1027,  v1284,  v1387,  v1490,  v1594,  v1698,  v1801,  v1904,  v2007,  v2109,  v2211,  v2312,  v2412,  v2511,  v2609,  v2705,  v2802,  v2897,  v2990,  v3082,  v3172,  v3259,  v3345,  v3428,  v3510,  v3589,  v3667,  v3743,  v3816,  v3888,  v3957,  v4025,  v4090,  v4154,  v4215,  v4275,  v4332,  v4388,  v4441,  v4493,  v4543,  v4590,
                      v4636,
                      v4679,
                      v4720);
            uint64_t v1036 = sub_1000439B0( v1028,  v1029,  v1030,  v1031,  v1032,  v1033,  v1034,  v1035,  v1285,  v1388,  v1491,  v1595,  v1699,  v1802,  v1905,  v2008,  v2110,  v2212,  v2313,  v2413,  v2512,  v2610,  v2706,  v2803,  v2898,  v2991,  v3083,  v3173,  v3260,  v3346,  v3429,  v3511,  v3590,  v3668,  v3744,  v3817,  v3889,  v3958,  v4026,  v4091,  v4155,  v4216,  v4276,  v4333,  v4389,  v4442,  v4494,  v4544,  v4591,
                      v4637,
                      v4680,
                      v4721,
                      v4761,
                      v4798);
            uint64_t v1044 = sub_1000439A0( v1036,  v1037,  v1038,  v1039,  v1040,  v1041,  v1042,  v1043,  v1286,  v1389,  v1492,  v1596,  v1700,  v1803,  v1906,  v2009,  v2111,  v2213,  v2314,  v2414,  v2513,  v2611,  v2707,  v2804,  v2899,  v2992,  v3084,  v3174,  v3261,  v3347,  v3430,  v3512,  v3591,  v3669,  v3745,  v3818,  v3890,  v3959,  v4027,  v4092,  v4156,  v4217,  v4277,  v4334,  v4390,  v4443,  v4495,  v4545,  v4592,
                      v4638,
                      v4681,
                      v4722,
                      v4762,
                      v4799,
                      v4835,
                      v4852);
            uint64_t v1052 = sub_100043998( v1044,  v1045,  v1046,  v1047,  v1048,  v1049,  v1050,  v1051,  v1287,  v1390,  v1493,  v1597,  v1701,  v1804,  v1907,  v2010,  v2112,  v2214,  v2315,  v2415,  v2514,  v2612,  v2708,  v2805,  v2900,  v2993,  v3085,  v3175,  v3262,  v3348,  v3431,  v3513,  v3592,  v3670,  v3746,  v3819,  v3891,  v3960,  v4028,  v4093,  v4157,  v4218,  v4278,  v4335,  v4391,  v4444,  v4496,  v4546,  v4593,
                      v4639,
                      v4682,
                      v4723,
                      v4763,
                      v4800,
                      v4836,
                      v4869,
                      v4885);
            uint64_t v1060 = sub_100043990( v1052,  v1053,  v1054,  v1055,  v1056,  v1057,  v1058,  v1059,  v1288,  v1391,  v1494,  v1598,  v1702,  v1805,  v1908,  v2011,  v2113,  v2215,  v2316,  v2416,  v2515,  v2613,  v2709,  v2806,  v2901,  v2994,  v3086,  v3176,  v3263,  v3349,  v3432,  v3514,  v3593,  v3671,  v3747,  v3820,  v3892,  v3961,  v4029,  v4094,  v4158,  v4219,  v4279,  v4336,  v4392,  v4445,  v4497,  v4547,  v4594,
                      v4640,
                      v4683,
                      v4724,
                      v4764,
                      v4801,
                      v4837,
                      v4870,
                      v4901,
                      v4916);
            uint64_t v1068 = sub_100043988( v1060,  v1061,  v1062,  v1063,  v1064,  v1065,  v1066,  v1067,  v1289,  v1392,  v1495,  v1599,  v1703,  v1806,  v1909,  v2012,  v2114,  v2216,  v2317,  v2417,  v2516,  v2614,  v2710,  v2807,  v2902,  v2995,  v3087,  v3177,  v3264,  v3350,  v3433,  v3515,  v3594,  v3672,  v3748,  v3821,  v3893,  v3962,  v4030,  v4095,  v4159,  v4220,  v4280,  v4337,  v4393,  v4446,  v4498,  v4548,  v4595,
                      v4641,
                      v4684,
                      v4725,
                      v4765,
                      v4802,
                      v4838,
                      v4871,
                      v4902,
                      v4931,
                      v4945);
            uint64_t v1076 = sub_100043980( v1068,  v1069,  v1070,  v1071,  v1072,  v1073,  v1074,  v1075,  v1290,  v1393,  v1496,  v1600,  v1704,  v1807,  v1910,  v2013,  v2115,  v2217,  v2318,  v2418,  v2517,  v2615,  v2711,  v2808,  v2903,  v2996,  v3088,  v3178,  v3265,  v3351,  v3434,  v3516,  v3595,  v3673,  v3749,  v3822,  v3894,  v3963,  v4031,  v4096,  v4160,  v4221,  v4281,  v4338,  v4394,  v4447,  v4499,  v4549,  v4596,
                      v4642,
                      v4685,
                      v4726,
                      v4766,
                      v4803,
                      v4839,
                      v4872,
                      v4903,
                      v4932,
                      v4959,
                      v4972);
            uint64_t v1084 = sub_100043978( v1076,  v1077,  v1078,  v1079,  v1080,  v1081,  v1082,  v1083,  v1291,  v1394,  v1497,  v1601,  v1705,  v1808,  v1911,  v2014,  v2116,  v2218,  v2319,  v2419,  v2518,  v2616,  v2712,  v2809,  v2904,  v2997,  v3089,  v3179,  v3266,  v3352,  v3435,  v3517,  v3596,  v3674,  v3750,  v3823,  v3895,  v3964,  v4032,  v4097,  v4161,  v4222,  v4282,  v4339,  v4395,  v4448,  v4500,  v4550,  v4597,
                      v4643,
                      v4686,
                      v4727,
                      v4767,
                      v4804,
                      v4840,
                      v4873,
                      v4904,
                      v4933,
                      v4960,
                      v4985,
                      v4997);
            uint64_t v1092 = sub_100043970( v1084,  v1085,  v1086,  v1087,  v1088,  v1089,  v1090,  v1091,  v1292,  v1395,  v1498,  v1602,  v1706,  v1809,  v1912,  v2015,  v2117,  v2219,  v2320,  v2420,  v2519,  v2617,  v2713,  v2810,  v2905,  v2998,  v3090,  v3180,  v3267,  v3353,  v3436,  v3518,  v3597,  v3675,  v3751,  v3824,  v3896,  v3965,  v4033,  v4098,  v4162,  v4223,  v4283,  v4340,  v4396,  v4449,  v4501,  v4551,  v4598,
                      v4644,
                      v4687,
                      v4728,
                      v4768,
                      v4805,
                      v4841,
                      v4874,
                      v4905,
                      v4934,
                      v4961,
                      v4986,
                      v5009,
                      v5020);
            uint64_t v1100 = sub_100043968( v1092,  v1093,  v1094,  v1095,  v1096,  v1097,  v1098,  v1099,  v1293,  v1396,  v1499,  v1603,  v1707,  v1810,  v1913,  v2016,  v2118,  v2220,  v2321,  v2421,  v2520,  v2618,  v2714,  v2811,  v2906,  v2999,  v3091,  v3181,  v3268,  v3354,  v3437,  v3519,  v3598,  v3676,  v3752,  v3825,  v3897,  v3966,  v4034,  v4099,  v4163,  v4224,  v4284,  v4341,  v4397,  v4450,  v4502,  v4552,  v4599,
                      v4645,
                      v4688,
                      v4729,
                      v4769,
                      v4806,
                      v4842,
                      v4875,
                      v4906,
                      v4935,
                      v4962,
                      v4987,
                      v5010,
                      v5031,
                      v5041);
            uint64_t v1108 = sub_100043960( v1100,  v1101,  v1102,  v1103,  v1104,  v1105,  v1106,  v1107,  v1294,  v1397,  v1500,  v1604,  v1708,  v1811,  v1914,  v2017,  v2119,  v2221,  v2322,  v2422,  v2521,  v2619,  v2715,  v2812,  v2907,  v3000,  v3092,  v3182,  v3269,  v3355,  v3438,  v3520,  v3599,  v3677,  v3753,  v3826,  v3898,  v3967,  v4035,  v4100,  v4164,  v4225,  v4285,  v4342,  v4398,  v4451,  v4503,  v4553,  v4600,
                      v4646,
                      v4689,
                      v4730,
                      v4770,
                      v4807,
                      v4843,
                      v4876,
                      v4907,
                      v4936,
                      v4963,
                      v4988,
                      v5011,
                      v5032,
                      v5051);
            uint64_t v1116 = sub_100043958( v1108,  v1109,  v1110,  v1111,  v1112,  v1113,  v1114,  v1115,  v1295,  v1398,  v1501,  v1605,  v1709,  v1812,  v1915,  v2018,  v2120,  v2222,  v2323,  v2423,  v2522,  v2620,  v2716,  v2813,  v2908,  v3001,  v3093,  v3183,  v3270,  v3356,  v3439,  v3521,  v3600,  v3678,  v3754,  v3827,  v3899,  v3968,  v4036,  v4101,  v4165,  v4226,  v4286,  v4343,  v4399,  v4452,  v4504,  v4554,  v4601,
                      v4647,
                      v4690,
                      v4731,
                      v4771,
                      v4808,
                      v4844,
                      v4877,
                      v4908,
                      v4937,
                      v4964,
                      v4989,
                      v5012,
                      v5033,
                      v5052);
            uint64_t v1124 = sub_100043950( v1116,  v1117,  v1118,  v1119,  v1120,  v1121,  v1122,  v1123,  v1296,  v1399,  v1502,  v1606,  v1710,  v1813,  v1916,  v2019,  v2121,  v2223,  v2324,  v2424,  v2523,  v2621,  v2717,  v2814,  v2909,  v3002,  v3094,  v3184,  v3271,  v3357,  v3440,  v3522,  v3601,  v3679,  v3755,  v3828,  v3900,  v3969,  v4037,  v4102,  v4166,  v4227,  v4287,  v4344,  v4400,  v4453,  v4505,  v4555,  v4602,
                      v4648,
                      v4691,
                      v4732,
                      v4772,
                      v4809,
                      v4845,
                      v4878,
                      v4909,
                      v4938,
                      v4965,
                      v4990,
                      v5013,
                      v5034,
                      v5053);
            uint64_t v1132 = sub_100043948( v1124,  v1125,  v1126,  v1127,  v1128,  v1129,  v1130,  v1131,  v1297,  v1400,  v1503,  v1607,  v1711,  v1814,  v1917,  v2020,  v2122,  v2224,  v2325,  v2425,  v2524,  v2622,  v2718,  v2815,  v2910,  v3003,  v3095,  v3185,  v3272,  v3358,  v3441,  v3523,  v3602,  v3680,  v3756,  v3829,  v3901,  v3970,  v4038,  v4103,  v4167,  v4228,  v4288,  v4345,  v4401,  v4454,  v4506,  v4556,  v4603,
                      v4649,
                      v4692,
                      v4733,
                      v4773,
                      v4810,
                      v4846,
                      v4879,
                      v4910,
                      v4939,
                      v4966,
                      v4991,
                      v5014,
                      v5035,
                      v5054);
            uint64_t v1140 = sub_100043940( v1132,  v1133,  v1134,  v1135,  v1136,  v1137,  v1138,  v1139,  v1298,  v1401,  v1504,  v1608,  v1712,  v1815,  v1918,  v2021,  v2123,  v2225,  v2326,  v2426,  v2525,  v2623,  v2719,  v2816,  v2911,  v3004,  v3096,  v3186,  v3273,  v3359,  v3442,  v3524,  v3603,  v3681,  v3757,  v3830,  v3902,  v3971,  v4039,  v4104,  v4168,  v4229,  v4289,  v4346,  v4402,  v4455,  v4507,  v4557,  v4604,
                      v4650,
                      v4693,
                      v4734,
                      v4774,
                      v4811,
                      v4847,
                      v4880,
                      v4911,
                      v4940,
                      v4967,
                      v4992,
                      v5015,
                      v5036,
                      v5055);
            uint64_t v1148 = sub_100043E48( v1140,  v1141,  v1142,  v1143,  v1144,  v1145,  v1146,  v1147,  v1299,  v1402,  v1505,  v1609,  v1713,  v1816,  v1919,  v2022,  v2124,  v2226,  v2327,  v2427,  v2526,  v2624,  v2720,  v2817,  v2912,  v3005,  v3097,  v3187,  v3274,  v3360,  v3443,  v3525,  v3604,  v3682,  v3758,  v3831,  v3903,  v3972,  v4040,  v4105,  v4169,  v4230,  v4290,  v4347,  v4403,  v4456,  v4508,  v4558,  v4605,
                      v4651,
                      v4694,
                      v4735,
                      v4775,
                      v4812,
                      v4848,
                      v4881,
                      v4912,
                      v4941,
                      v4968,
                      v4993,
                      v5016,
                      v5037,
                      v5056);
            uint64_t v1156 = sub_100043E40( v1148,  v1149,  v1150,  v1151,  v1152,  v1153,  v1154,  v1155,  v1300,  v1403,  v1506,  v1610,  v1714,  v1817,  v1920,  v2023,  v2125,  v2227,  v2328,  v2428,  v2527,  v2625,  v2721,  v2818,  v2913,  v3006,  v3098,  v3188,  v3275,  v3361,  v3444,  v3526,  v3605,  v3683,  v3759,  v3832,  v3904,  v3973,  v4041,  v4106,  v4170,  v4231,  v4291,  v4348,  v4404,  v4457,  v4509,  v4559,  v4606,
                      v4652,
                      v4695,
                      v4736,
                      v4776,
                      v4813,
                      v4849,
                      v4882,
                      v4913,
                      v4942,
                      v4969,
                      v4994,
                      v5017,
                      v5038,
                      v5057);
            uint64_t v1164 = sub_100043E38( v1156,  v1157,  v1158,  v1159,  v1160,  v1161,  v1162,  v1163,  v1301,  v1404,  v1507,  v1611,  v1715,  v1818,  v1921,  v2024,  v2126,  v2228,  v2329,  v2429,  v2528,  v2626,  v2722,  v2819,  v2914,  v3007,  v3099,  v3189,  v3276,  v3362,  v3445,  v3527,  v3606,  v3684,  v3760,  v3833,  v3905,  v3974,  v4042,  v4107,  v4171,  v4232,  v4292,  v4349,  v4405,  v4458,  v4510,  v4560,  v4607,
                      v4653,
                      v4696,
                      v4737,
                      v4777,
                      v4814,
                      v4850,
                      v4883,
                      v4914,
                      v4943,
                      v4970,
                      v4995,
                      v5018,
                      v5039,
                      v5058);
            sub_100043E30( v1164,  v1165,  v1166,  v1167,  v1168,  v1169,  v1170,  v1171,  v1302,  v1405,  v1508,  v1612,  v1716,  v1819,  v1922,  v2025,  v2127,  v2229,  v2330,  v2430,  v2529,  v2627,  v2723,  v2820,  v2915,  v3008,  v3100,  v3190,  v3277,  v3363,  v3446,  v3528,  v3607,  v3685,  v3761,  v3834,  v3906,  v3975,  v4043,  v4108,  v4172,  v4233,  v4293,  v4350,  v4406,  v4459,  v4511,  v4561,  v4608,
              v4654,
              v4697,
              v4738,
              v4778,
              v4815,
              v4851,
              v4884,
              v4915,
              v4944,
              v4971,
              v4996,
              v5019,
              v5040,
              v5059);
            sub_100043E28();
            sub_100043E20();
            sub_100044828();
            uint64_t v1172 = sub_100045990();
            sub_100044584( v1172,  v1173,  v1174,  v1175,  v1176,  v1177,  v1178,  v1179,  v1303,  v1406,  v1509,  v1613,  v1717,  v1820,  v1923,  v2026,  v2128,  v2230,  v2331,  v2431,  v2530,  v2628,  v2724);
            sub_100045988();
            sub_100044820();
            sub_100044818();
            sub_100044810();
            sub_100044808();
            sub_100044800();
            sub_100043938();
            sub_100043930();
            sub_100043928();
            sub_100043920();
            sub_100043D44();
            unint64_t v421 = (uint64_t (*)(void))sub_10000F588();
          }

          sub_10000F308(v421);
          return;
        }

        uint64_t v478 = sub_1000469E8(v477);
        ((void (*)(uint64_t, uint64_t))v31)(v478, v16 + 416);
        sub_1000431C0();
      }

      if (__OFADD__(v450, 1LL))
      {
        __break(1u);
        goto LABEL_256;
      }

      sub_100044338(v450 + 1);
      sub_100046CF4();
      sub_100045D50();
      sub_100040370(&qword_10006A410, (uint64_t (*)(uint64_t))&type metadata accessor for ToolVisibilityFlag);
      uint64_t v469 = sub_1000459E8(v479);
      sub_100044AB8(v452);
      if ((v469 & 1) != 0)
      {
        sub_1000446D4();
        if (sub_100045EB4((id)v469, "visibleForUse:"))
        {
          sub_10004582C();
          sub_100046524();
          sub_100046128();
          sub_100045730();
          uint64_t v480 = sub_100043C68();
          uint64_t v481 = sub_1000449DC(v480);
          if ((v482 & 1) != 0)
          {
            uint64_t v492 = *(void *)(v16 + 1208);
            uint64_t v469 = *(void *)(v16 + 1200);
            sub_10004497C(*(void *)(v16 + 1192));
            sub_100043CDC((uint64_t)v444);
            sub_100043CDC(v492);
            sub_1000450AC(v492);
            uint64_t v452 = v5110;
          }

          else
          {
            sub_100044714(v481, *(void *)(v16 + 1192));
          }

          sub_100043830(*(_BYTE **)(v16 + 1128));
          sub_100044AB8(v469);
          uint64_t v491 = (uint64_t *)(v16 + 1200);
          goto LABEL_70;
        }
      }

      else
      {
        uint64_t v469 = *(void *)(v16 + 1208);
        uint64_t v452 = *(void *)(v16 + 1144);
        sub_10004652C();
        char v483 = sub_100043C50();
        sub_10004497C(v469);
        if ((v483 & 1) == 0)
        {
          sub_100046694();
          char v487 = sub_100043C50();
          sub_10004497C(v469);
          if ((v487 & 1) == 0)
          {
            sub_1000463C8();
            uint64_t v610 = sub_100045D64();
            sub_1000456E8(v610, v611);
            sub_100044C44();
            sub_100044CC4(v612);
            sub_100040370( &qword_10006A418,  (uint64_t (*)(uint64_t))&type metadata accessor for ToolVisibilityFlag);
            v5115._countAndFlagsBits = sub_100047670(v613);
            sub_100044AE0(v5115);
            sub_100043174();
            sub_100045CA0();
            sub_100043B6C();
            goto LABEL_155;
          }

          uint64_t v488 = *(void *)(v16 + 1208);
          uint64_t v469 = *(void *)(v16 + 1168);
          id v444 = *(unint64_t **)(v16 + 1144);
          sub_1000449FC(*(void *)(v16 + 1216));
          sub_100047834(v488);
          sub_100046524();
          uint64_t v489 = sub_100045488();
          uint64_t v452 = dispatch thunk of SetAlgebra.isSuperset(of:)(v489, v490, v5077);
          sub_1000449FC(v469);
          sub_1000449FC(v488);
          sub_100045E38();
          sub_100046D90();
          sub_1000449FC(v469);
          uint64_t v491 = (uint64_t *)v5062;
          goto LABEL_71;
        }

        sub_1000446D4();
        if (sub_100045E08((id)v469, "visibleForUse:"))
        {
          sub_100045E1C();
          sub_10004652C();
          sub_100046DBC();
          sub_100045730();
          uint64_t v484 = sub_100043C68();
          uint64_t v485 = sub_1000449DC(v484);
          if ((v486 & 1) != 0)
          {
            uint64_t v493 = *(void *)(v16 + 1208);
            uint64_t v469 = *(void *)(v16 + 1184);
            sub_10004497C(*(void *)(v16 + 1176));
            sub_100043CDC((uint64_t)v444);
            sub_100043CDC(v493);
            sub_1000450AC(v493);
            uint64_t v452 = v5110;
          }

          else
          {
            sub_100044714(v485, *(void *)(v16 + 1176));
          }

          sub_100043830(*(_BYTE **)(v16 + 1128));
          sub_100044AB8(v469);
          uint64_t v491 = v5063;
LABEL_70:
          uint64_t v10 = (char **)v5065;
LABEL_71:
          sub_100046700(*v491);
        }
      }

LABEL_72:
      sub_100046700(*(void *)(v16 + 1224));
      ++v450;
      sub_1000465F0();
      unint64_t v26 = (unint64_t)v5087;
    }

    while (!v532);
  }

  uint64_t v5095 = v16 + 144;
  uint64_t v494 = *(void **)(v16 + 576);
  sub_10004515C();
  sub_10000F568();
  uint64_t v495 = sub_100042644((uint64_t)&unk_100066638, 24LL);
  sub_1000465E0(v495);
  uint64_t v496 = sub_100042644((uint64_t)&unk_100066660, 32LL);
  *(void *)(v496 + 16) = sub_100040F24;
  *(void *)(v496 + 24) = v10;
  id v497 = v494;
  sub_100045D98((uint64_t)v10);
  uint64_t v498 = Logger.logObject.getter(v497);
  os_log_type_t v5078 = sub_100045C58(v498);
  uint64_t v499 = sub_100042644((uint64_t)&unk_100066688, 17LL);
  *(_BYTE *)(v499 + 16) = 32;
  uint64_t v500 = (_BYTE *)sub_100042644((uint64_t)&unk_1000666B0, 17LL);
  v500[16] = 8;
  uint64_t v10 = (char **)sub_100042644((uint64_t)&unk_1000666D8, 32LL);
  v10[2] = (char *)sub_1000421D0;
  v10[3] = (char *)v450;
  uint64_t v501 = sub_100042644((uint64_t)&unk_100066700, 32LL);
  *(void *)(v501 + 16) = sub_100040F3C;
  *(void *)(v501 + 24) = v10;
  uint64_t v502 = sub_100042644((uint64_t)&unk_100066728, 17LL);
  *(_BYTE *)(v502 + 16) = 32;
  uint64_t v503 = sub_100042644((uint64_t)&unk_100066750, 17LL);
  *(_BYTE *)(v503 + 16) = 8;
  uint64_t v504 = sub_100042644((uint64_t)&unk_100066778, 32LL);
  *(void *)(v504 + 16) = sub_100040F2C;
  *(void *)(v504 + 24) = v496;
  uint64_t v505 = (void *)sub_100042644((uint64_t)&unk_1000667A0, 32LL);
  v505[2] = sub_100042178;
  v505[3] = v504;
  uint64_t v506 = sub_10000844C((uint64_t *)&unk_10006A360);
  uint64_t inited = swift_initStackObject(v506, v5095);
  *(_OWORD *)(inited + 16) = xmmword_100059850;
  *(void *)(inited + 32) = sub_1000421D8;
  *(void *)(inited + 40) = v499;
  *(void *)(inited + 48) = sub_1000421D8;
  *(void *)(inited + 56) = v500;
  *(void *)(inited + 64) = sub_100042184;
  *(void *)(inited + 72) = v501;
  *(void *)(inited + 80) = sub_1000421D8;
  *(void *)(inited + 88) = v502;
  *(void *)(inited + 96) = sub_1000421D8;
  *(void *)(inited + 104) = v503;
  *(void *)(inited + 112) = sub_100042184;
  *(void *)(inited + 120) = v505;
  sub_100045D00();
  HIDWORD(v5086) = HIDWORD(v10);
  sub_10004735C((uint64_t)v10);
  sub_100044B34();
  sub_100044D54();
  uint64_t v508 = (char *)v499;
  sub_100044EE0();
  sub_100044AFC();
  unint64_t v26 = v501;
  sub_100043D5C();
  sub_100044400();
  sub_1000442F4();
  sub_1000446A0();
  sub_100043D74();
  if (sub_1000465B0(v5078))
  {
    sub_100046214();
    uint64_t v5066 = v509;
    uint64_t v5060 = v510;
    unint64_t v5061 = *(void *)(v499 + 1152);
    uint64_t v5064 = *(char **)(v499 + 1144);
    uint64_t v5071 = *(void *)(v499 + 1104);
    uint64_t v5073 = *(void *)(v499 + 1088);
    uint64_t v5079 = *(void *)(v499 + 1080);
    uint64_t v31 = sub_100044BAC();
    uint64_t v5069 = sub_10000D524(64LL);
    v5114[0] = v5069;
    *(_WORD *)uint64_t v31 = 514;
    *(_BYTE *)(v31 + 2) = 32;
    sub_100043B50();
    *(_BYTE *)(v31 + 3) = 8;
    sub_100043C48();
    id v511 = sub_100045778();
    sub_100046E8C((uint64_t)v511);
    sub_100047810();
    *(void *)(v499 + 528) = sub_1000460E4(v512, v513, v5114);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v5060, v5108);
    sub_1000432F0();
    sub_100043DA4();
    sub_100043F84();
    sub_1000435DC();

    *(_BYTE *)(v31 + 12) = 32;
    sub_1000447F8();
    *(_BYTE *)(v31 + 13) = 8;
    sub_100043DD0();
    sub_100043154(0x100065000LL, v5062);
    unint64_t v26 = v5061;
    uint64_t v514 = sub_100046D74();
    uint64_t v508 = v5064;
    sub_10000F538(v514, v515, v516);
    sub_100040370(&qword_10006A418, (uint64_t (*)(uint64_t))&type metadata accessor for ToolVisibilityFlag);
    sub_10004695C(v517);
    sub_10004385C(*(uint64_t (**)(uint64_t, uint64_t))(v5061 + 8));
    *(void *)(v499 + 544) = sub_100046560();
    sub_100045D6C(v5066, v499 + 552);
    sub_100042E4C();
    sub_100043BF8();
    sub_100043E18();
    sub_1000440CC();
    sub_100044304(v5065);
    sub_100043ADC((void *)&_mh_execute_header, v5112, (os_log_type_t)v505, "%s: Visibility flags: %s", (uint8_t *)v31);
    uint64_t v500 = (_BYTE *)v5069;
    sub_1000442BC(v5069);
    sub_10000F2F0(v5069);
    sub_10000F2F0(v31);

    (*(void (**)(uint64_t, uint64_t))(v5073 + 8))(v5071, v5079);
  }

  else
  {
    uint64_t v499 = v5113;
    uint64_t v31 = *(void *)(v5113 + 1088);
    char v595 = *(void **)(v5113 + 576);
    sub_100043B50();
    sub_100043C48();
    sub_100043DA4();
    sub_100043F84();
    sub_1000435DC();

    sub_1000447F8();
    sub_100043DD0();
    sub_100043BF8();
    sub_100043E18();
    sub_1000440CC();
    sub_100044304(v5065);
    sub_10004593C();
    uint64_t v596 = sub_10000F674();
    v598(v596, v597);
  }

  if (*(void *)(v499 + 1672))
  {
    uint64_t v599 = sub_100043240();
    sub_100044AD4(v599);
    *(void *)(v499 + 1888) = sub_1000431DC();
    sub_100042F20();
    sub_100043160();
LABEL_247:
    sub_10004628C();
    sub_100042EB0();
    return;
  }

  [(id)sub_100046400() requiresUnlock];
  uint64_t v600 = sub_1000440B0();
  if (v602)
  {
    uint64_t v508 = *(char **)(v499 + 1072);
    uint64_t v603 = *(void *)(v499 + 1056);
    v601(v600, enum case for ToolAuthenticationPolicy.requiresAuthenticationOnOriginAndRemote(_:));
    uint64_t v604 = sub_1000459E0();
    sub_1000459B8(v604);
    sub_1000447A4( (uint64_t)v508,  enum case for RuntimeRequirement.deviceState(_:),  *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v603 + 104));
    sub_100044848();
    sub_100043800(*(void *)(v499 + 400));
    sub_100047944();
  }

  else
  {
    v601(v600, enum case for ToolAuthenticationPolicy.none(_:));
  }

  uint64_t v608 = *(void *)(v499 + 576);
  *(void *)(v499 + 432) = &OBJC_PROTOCOL___WFLinkActionProtocol;
  if (sub_100043D04(v608))
  {
    sub_100044604();
    sub_100044F38(v609);
  }

  else
  {
    uint64_t v500 = *(_BYTE **)(v499 + 1312);
    uint64_t v620 = objc_opt_self(&OBJC_CLASS___WFHandleIntentAction);
    sub_100043AF8(v620);
    uint64_t v621 = sub_1000457E0();
    if (v622) {
      uint64_t v623 = (unsigned int *)&enum case for ToolTypeDefinition.siriIntent(_:);
    }
    else {
      uint64_t v623 = (unsigned int *)&enum case for ToolTypeDefinition.action(_:);
    }
    sub_100045C98(v621, v623);
  }

  uint64_t v624 = *(void **)(v499 + 576);
  *uint64_t v505 = 0LL;
  v505[1] = 0LL;
  if ([v624 isDiscontinued])
  {
    sub_100044264();
    sub_10004685C((char *)v31);
    uint64_t v499 = v5113;
    sub_10004418C((uint64_t)v500);
    sub_10004418C(v31);
    uint64_t v625 = objc_opt_self(&OBJC_CLASS___WFLinkAction);
    uint64_t v626 = sub_100047688(v625);
    *(void *)(v5113 + 1984) = v626;
    if (v626)
    {
      sub_100043240();
      id v627 = sub_100043C20();
      *(void *)(v5113 + 1992) = sub_1000431DC();
      sub_100042F20();
      sub_100043160();
      goto LABEL_247;
    }
  }

  v5112 = (os_log_s *)v26;
  if ([*(id *)(v499 + 576) isResidentCompatible])
  {
    sub_100045000();
    sub_10004685C(v508);
    sub_10004418C((uint64_t)v500);
    sub_10004418C((uint64_t)v508);
  }

  uint64_t v628 = *(void *)(v499 + 1856);
  uint64_t v629 = sub_100043EB8();
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v629);
  id v631 = sub_10004341C(ObjCClassFromMetadata, "unevaluatedResourceObjectsOfClass:");
  id v444 = &qword_10006A3D0;
  uint64_t v16 = sub_1000459D8(0LL, &qword_10006A3D0);
  sub_100047558(&qword_10006A3D8);
  uint64_t v632 = sub_100046AC8();
  static Set._unconditionallyBridgeFromObjectiveC(_:)(v632, v16, v633);
  sub_100043670();
  sub_100044C3C((uint64_t)&qword_10006A3D0);
  sub_100042E4C();
  uint64_t v634 = sub_10004492C();
  if (v634)
  {
    if (v634 >= 1)
    {
      uint64_t v5105 = *(void *)(v5113 + 1056);
      char v635 = sub_1000531F0(v5110);
      uint64_t v636 = enum case for RuntimeRequirement.deviceCapability(_:);
      while (1)
      {
        if ((v635 & 1) != 0) {
          sub_1000430AC(v5110);
        }
        else {
          sub_1000445EC(0LL);
        }
        sub_1000452C8();
        sub_10004314C( (uint64_t)&type metadata accessor for WFDeviceCapabilityResource,  v636,  *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5105 + 104));
        sub_1000449A4();
        sub_1000453B4(*(void *)(*(void *)(v5113 + 400) + 16LL));
        sub_100037FF8();
      }
    }

    goto LABEL_304;
  }

  unint64_t v33 = v5113;
  sub_100044088();
  uint64_t v637 = sub_10004536C();
  uint64_t v638 = swift_getObjCClassFromMetadata(v637);
  id v639 = sub_10004341C(v638, "unevaluatedResourceObjectsOfClass:");
  sub_10004698C((uint64_t)v639);
  sub_100043670();
  sub_100044C3C((uint64_t)&qword_10006A3D0);
  sub_1000476C8();
  *(void *)(v5113 + 2008) = v628;
  sub_100042E4C();
  if (sub_10004492C())
  {
    sub_100046910();
    if (v548 == v526)
    {
      uint64_t v5096 = *(void *)(v5113 + 1056);
      char v5092 = sub_1000531F0(v5110);
      unsigned int v5088 = enum case for RuntimeRequirement.featureFlag(_:);
      while (1)
      {
        if ((v5092 & 1) != 0) {
          uint64_t v640 = (uint64_t)sub_1000430AC(v5110);
        }
        else {
          uint64_t v640 = sub_1000445EC(0LL);
        }
        id v641 = (void *)v640;
        uint64_t v642 = *(uint64_t **)(v5113 + 1072);
        sub_100043F10();
        sub_100044F4C();
        uint64_t v643 = sub_10004737C();
        *uint64_t v642 = v31;
        sub_1000470EC(v643);
        sub_10004314C((uint64_t)v642, v5088, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5096 + 104));
        sub_100044848();
        sub_10004487C(*(void *)(*(void *)(v5113 + 400) + 16LL));
        sub_100046C60();
        sub_100037FF8();
      }
    }

    goto LABEL_305;
  }

  uint64_t v644 = *(void *)(v5113 + 1672);
  sub_100044088();
  if (v644)
  {
    sub_100043240();
    sub_100043C20();
    *(void *)(v5113 + 2016) = sub_1000431DC();
    sub_100042F20();
    sub_100043160();
    goto LABEL_247;
  }

  sub_100043230();
  if (sub_100043E10())
  {
    uint64_t v645 = (void *)sub_100043EA0();
  }

  else
  {
    sub_100008D58();
    uint64_t v645 = &_swiftEmptySetSingleton;
  }

  v5114[9] = (uint64_t)v645;
  sub_100043230();
  if (sub_100043E10())
  {
    uint64_t v646 = (void *)sub_100043EA0();
  }

  else
  {
    sub_100008D58();
    uint64_t v646 = &_swiftEmptySetSingleton;
  }

  uint64_t v647 = sub_100043EA8((uint64_t)v646);
  uint64_t v648 = &type metadata accessor for WFDeviceIdiomResource;
  uint64_t v649 = swift_getObjCClassFromMetadata(v647);
  id v650 = sub_10004341C(v649, "unevaluatedResourceObjectsOfClass:");
  sub_10004698C((uint64_t)v650);
  sub_100043D6C();
  sub_100044C3C(v5113);
  uint64_t v652 = v651;
  uint64_t v5068 = v5073;
  sub_100043024();
  uint64_t v5110 = sub_10004650C();
  if (!v5110)
  {
LABEL_200:
    uint64_t v658 = sub_100043908();
    id v659 = sub_10004341C(v658, "disabledOnPlatforms");
    sub_100043F68();
    sub_100043F5C(v660);
    sub_100043670();
    if (sub_10004542C())
    {
      sub_100044EAC();
      if (v548 != v526) {
        goto LABEL_306;
      }
      sub_100044FA8();
      sub_1000449F0();
      do
      {
        if ((v16 & 1) != 0) {
          uint64_t v661 = (uint64_t)sub_1000430AC((uint64_t)&v444[v31]);
        }
        else {
          uint64_t v661 = sub_100043FE4();
        }
        unint64_t v26 = v661;
        sub_100043B9C(v661, v5113);
        sub_1000443E8();

        sub_100043FD4((uint64_t)v648, (uint64_t (*)(uint64_t, uint64_t))v10[1]);
      }

      while (v33 != v31);
    }

    sub_100042E4C();
    sub_1000462E8();
    if (v663) {
      uint64_t v664 = sub_100009BEC();
    }
    else {
      uint64_t v664 = static RuntimePlatform.all.getter(v662);
    }
    uint64_t v16 = v5113;
    v5114[0] = v664;
    uint64_t v665 = sub_1000436BC();
    sub_100045F84(v665);
    sub_100043174();
    uint64_t v666 = v5114[0];
    uint64_t v667 = sub_10004317C();
    uint64_t v668 = sub_1000352A0(v667);
    sub_100043238(v666);
    sub_100043174();
    sub_100042E4C();
    if (sub_100046D3C())
    {
      sub_100046910();
      if (v548 != v526) {
        goto LABEL_307;
      }
      uint64_t v5089 = *(void *)(v5113 + 1016);
      uint64_t v5093 = *(void *)(v5113 + 1056);
      uint64_t v5080 = *(void *)(v5113 + 936);
      uint64_t v5103 = *(void *)(v5113 + 928);
      char v5097 = sub_100052268(v668);
      unsigned int v5083 = enum case for RuntimeRequirement.platform(_:);
      do
      {
        if ((v5097 & 1) != 0)
        {
          sub_100043F1C( *(void *)(v5113 + 944),  (*(unsigned __int8 *)(v5103 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v5103 + 80));
        }

        else
        {
          uint64_t v669 = sub_100043000(0LL, v668, (uint64_t (*)(void))&type metadata accessor for RuntimePlatform);
          if (v5080 != 8) {
            goto LABEL_301;
          }
          uint64_t v670 = sub_1000469AC(v669);
          v671(v670, v5113 + 448);
          sub_1000431C0();
        }

        sub_100043A98();
        uint64_t v672 = sub_100045354();
        sub_1000434C0(v672);
        sub_10004314C((uint64_t)v444, v668, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5089 + 16));
        sub_1000447A4((uint64_t)v444, v5083, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5093 + 104));
        unint64_t v26 = (unint64_t)sub_100050CD0;
        sub_100045148();
        sub_100044690(*(void *)(v5113 + 400));
        sub_100045488();
        sub_100037FF8();
        sub_100043380(v668, *(uint64_t (**)(uint64_t, uint64_t))(v5089 + 8));
        sub_1000475D8();
      }

      while (!v532);
    }

    uint64_t v673 = (void *)(v5113 + 472);
    sub_100044088();
    uint64_t v674 = *(void *)(v5113 + 576);
    uint64_t v675 = sub_100046674();
    *(void *)(v5113 + 456) = v675;
    sub_100043230();
    *(void *)(v5113 + 464) = v676;
    *(void *)(v5113 + 472) = &OBJC_PROTOCOL___WFLinkActionProtocol;
    uint64_t v5084 = v675;
    if (sub_100045218(v674))
    {
      id v677 = sub_100046E7C();
      id v678 = sub_10004416C((uint64_t)v677, "backingActionIdentifiers");
      static Array._unconditionallyBridgeFromObjectiveC(_:)(v678, &type metadata for String);
      sub_100043650();
      uint64_t v450 = v5068;
      sub_100013D08(v5113);
      sub_1000461DC();
      sub_1000436BC();
      uint64_t v673 = (void *)sub_1000453D8();

      sub_100008D58();
      swift_bridgeObjectRelease(v675);
      *(void *)(v5113 + 464) = v673;
    }

    else
    {
      uint64_t v450 = v5068;
    }

    uint64_t v5087 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(v5113 + 464);
    *(void *)(v5113 + 2032) = v450;
    if (!sub_100044F00() && sub_1000531E4(v675))
    {
      sub_100046E94();
      if (v548 != v526) {
        goto LABEL_308;
      }
      uint64_t v5107 = *(void *)(v5113 + 848);
      uint64_t v10 = *(char ***)(v5113 + 840);
      uint64_t v5111 = *(void *)(v5113 + 816);
      uint64_t v5081 = *(void *)(v5113 + 792);
      uint64_t v679 = sub_100052268(v675);
      unint64_t v26 = enum case for SystemToolProtocol.assistantSchema(_:);
      sub_1000443C8();
      sub_1000468D0();
      unsigned int v5098 = v26;
      unsigned int v5075 = v679;
      do
      {
        if ((v679 & 1) != 0)
        {
          uint64_t v680 = sub_100044484( *(void *)(v5113 + 872),  v675 + ((*((unsigned __int8 *)v10 + 80) + 32LL) & ~(unint64_t)*((unsigned __int8 *)v10 + 80)));
        }

        else
        {
          uint64_t v681 = sub_100038A18( 0LL,  v675,  (uint64_t (*)(void))&type metadata accessor for SystemToolProtocol);
          if (v5107 != 8) {
            goto LABEL_303;
          }
          uint64_t v682 = sub_100046A00(v681);
          v683(v682, v5113 + 512);
          uint64_t v680 = sub_1000431C0();
        }

        uint64_t v673 = *(void **)(v5113 + 832);
        sub_100044458(v680, *(void *)(v5113 + 872));
        int v684 = sub_100044448();
        uint64_t v685 = *(void *)(v5113 + 864);
        if (v684 == (_DWORD)v26)
        {
          uint64_t v686 = *(void *)(v5113 + 824);
          sub_100043184((uint64_t (*)(uint64_t))v10[12]);
          sub_100043C08(v686, v685, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5111 + 32));
          sub_100044E94();
          sub_100044DAC();
          uint64_t v687 = sub_100044DFC();
          sub_100044EE8();
          if (*(void *)(v687 + 16) && (unint64_t v688 = sub_100051CAC(), (v689 & 1) != 0))
          {
            sub_1000431C8(v688, *(void *)(v5113 + 776));
            uint64_t v690 = 0LL;
          }

          else
          {
            uint64_t v690 = 1LL;
          }

          uint64_t v673 = *(void **)(v5113 + 784);
          uint64_t v691 = *(void *)(v5113 + 776);
          sub_10000848C(v691, v690, 1LL, (uint64_t)v673);
          sub_100008D58();
          sub_100046D44();
          if (v532)
          {
            uint64_t v692 = *(void *)(v5113 + 776);
            sub_100043D10(v691, *(uint64_t (**)(uint64_t, uint64_t))(v5111 + 8));
            sub_100041358(v692, &qword_10006A390);
          }

          else
          {
            sub_100046EC0();
            sub_1000446CC((uint64_t)v673, v693, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5081 + 32));
            sub_1000464FC();
            sub_100015F18();
            uint64_t v450 = v679;
            uint64_t v679 = v5075;
            uint64_t v694 = v675;
            uint64_t v675 = v5084;
            (*(void (**)(void *, uint64_t))(v5081 + 8))(v673, v694);
            sub_100043D10(v691, *(uint64_t (**)(uint64_t, uint64_t))(v5111 + 8));
          }

          unint64_t v26 = v5098;
        }

        else
        {
          sub_100043184((uint64_t (*)(uint64_t))v10[1]);
        }

        sub_1000462B4();
      }

      while (!v532);
      sub_100043D74();
    }

    if (sub_100044DA4(v5087))
    {
      uint64_t v673 = *(void **)(v5113 + 856);
      sub_100044F2C(*(void *)(v5113 + 840));
      sub_100046C6C();
      sub_100044724(*(void *)(v5113 + 456));
      sub_100045388();
    }

    if (*(void *)(v5113 + 1672))
    {
      sub_100043240();
      sub_100046C4C();
      *(void *)(v5113 + 2040) = sub_100046504();
      sub_100045294();
      sub_100043160();
      goto LABEL_247;
    }

    sub_100040428(*(void **)(v5113 + 576), (SEL *)&selRef_iconName);
    if (v695)
    {
      sub_100046000();
      sub_100046EB8();
      *uint64_t v673 = 0LL;
      v673[1] = v450;
      uint64_t v696 = sub_1000432E8();
      sub_100043084(v696);
      sub_100043BE0();
      goto LABEL_264;
    }

    sub_100040428(*(void **)(v5113 + 576), (SEL *)&selRef_iconSymbolName);
    if (!v702) {
      goto LABEL_263;
    }
    uint64_t v450 = v701;
    unint64_t v26 = (unint64_t)v702;
    sub_100040428(*(void **)(v5113 + 576), (SEL *)&selRef_iconBackgroundColorName);
    uint64_t v469 = v5113;
    if (!v704) {
      goto LABEL_262;
    }
    uint64_t v705 = v704;
    uint64_t v5099 = v703;
    id v706 = [(id)sub_100047098() definition];
    if (v706)
    {
      uint64_t v450 = v5113 + 272;
      id v707 = [v706 objectForKey:WFActionIconSymbolColorNameKey];
      sub_1000461FC();
      if (v5113 == -480)
      {
        sub_100044F68();
      }

      else
      {
        sub_1000448D0();
        uint64_t v708 = sub_1000460B4();
      }

      uint64_t v10 = 0LL;
      sub_1000453A0(v708, v709, &qword_10006A420);
      unint64_t v1180 = v26;
      if (*(void *)(v5113 + 328))
      {
        uint64_t v1181 = (uint64_t *)v5113;
        uint64_t v1184 = v5099;
        if ((sub_100044438(v5113 + 376, (uint64_t)&type metadata for String, (uint64_t)&type metadata for Any) & 1) != 0)
        {
          sub_100045F14();
          goto LABEL_275;
        }

LABEL_274:
        sub_100043410(v1181[90], v1182, v1183, v1181[79]);
LABEL_275:
        sub_100044A38(v5087);
        sub_100044A38(v5108);
        BOOL v1185 = v1184 == 1953392980 && v705 == 0xE400000000000000LL;
        if (v1185 || (sub_100043138(v1184, v705) & 1) != 0)
        {
          uint64_t v1186 = sub_100047570();
          sub_100046390(v1186, v1187, &qword_10006A378);
          sub_100043DBC(1953392980LL, 1LL, v450);
          if (!v532)
          {
            uint64_t v1190 = sub_100045EF8();
            sub_100041358(v1190, &qword_10006A378);
            sub_1000432F0();
            sub_100045EC8();
            sub_100046B88();
            uint64_t v1191 = (unsigned int *)&enum case for ToolSymbolIconStyle.tinted(_:);
LABEL_290:
            uint64_t v1197 = (void *)v1181[96];
            uint64_t v450 = v1181[86];
            uint64_t v16 = v1181[85];
            sub_100043C08(v450, *v1191, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v16 + 104));
            uint64_t v1198 = (uint64_t)v1197 + *(int *)(sub_10000844C(&qword_10006A430) + 48);
            *uint64_t v1197 = 0LL;
            v1197[1] = v1180;
            sub_100043C08(v1198, v450, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v16 + 32));
            uint64_t v1199 = sub_1000432E8();
            sub_100043084(v1199);
            sub_100046D04();
            goto LABEL_265;
          }

          sub_100041358(v1181[89], &qword_10006A378);
        }

        sub_1000451FC();
        sub_1000084E0(1953392980LL, 1LL, v450);
        uint64_t v1188 = sub_100044158();
        if (v532)
        {
          uint64_t v1189 = sub_100044A10();
          sub_100044EA4(v1189, &qword_10006A378);
        }

        else
        {
          sub_100045EBC(v1188);
        }

        uint64_t v1193 = v1181[87];
        uint64_t v1194 = v1181[79];
        sub_100046388(v1181[90], v1192, &qword_10006A378);
        sub_1000084E0(v1193, 1LL, v1194);
        uint64_t v1195 = sub_100044114();
        if (v532)
        {
          uint64_t v1196 = sub_100044F08();
          sub_100044EA4(v1196, &qword_10006A378);
          unint64_t v26 = *(void *)(v1193 + 32);
        }

        else
        {
          sub_100047474(v1195);
        }

        sub_1000458C8();
        sub_10000844C(&qword_10006A428);
        sub_10004589C();
        sub_100046C18();
        uint64_t v1191 = (unsigned int *)&enum case for ToolSymbolIconStyle.multicolor(_:);
        goto LABEL_290;
      }
    }

    else
    {
      *(_OWORD *)&selRef_parameterKey = 0u;
      *(_OWORD *)&selRef_path = 0u;
      uint64_t v10 = 0LL;
      unint64_t v1180 = v26;
    }

    sub_100045A94((uint64_t)v706, &qword_10006A420);
    uint64_t v1181 = (uint64_t *)v5113;
    uint64_t v1184 = v5099;
    goto LABEL_274;
  }

  BOOL v5106 = sub_10004459C();
  unint64_t v26 = 0LL;
  int v5102 = enum case for WFDeviceIdiomResource.Requirement.equalTo(_:);
  LODWORD(v5086) = enum case for WFDeviceIdiomResource.Requirement.notEqualTo(_:);
  LODWORD(v5073) = enum case for RuntimePlatform.phone(_:);
  LOBYTE(v5094) = enum case for RuntimePlatform.macintosh(_:);
  while (1)
  {
    if (v5106) {
      uint64_t v653 = (uint64_t)sub_1000430AC(v652 + 8 * v26);
    }
    else {
      uint64_t v653 = sub_100045150();
    }
    uint64_t v10 = (char **)v653;
    id v444 = (unint64_t *)(v26 + 1);
    if (__OFADD__(v26, 1LL))
    {
      __break(1u);
LABEL_292:
      sub_100043E98();
      uint64_t v445 = sub_100046DEC();
      sub_100043024();
      goto LABEL_25;
    }

    uint64_t v648 = *(void **)(v5113 + 1000);
    sub_1000450E4();
    int v654 = sub_10000F508((uint64_t)v648, *(uint64_t (**)(uint64_t, uint64_t))(v31 + 88));
    if (v654 == v5102)
    {
      sub_100043184(*(uint64_t (**)(uint64_t))(v31 + 96));
      sub_1000432D0();
      if (!(!v532 & v562)) {
        __asm { BR              X9 }
      }

      goto LABEL_260;
    }

    uint64_t v656 = *(void *)(v5113 + 1000);
    unint64_t v33 = *(void *)(v5113 + 984);
    if (v654 == (_DWORD)v5086) {
      break;
    }

    sub_10000F508(v656, *(uint64_t (**)(uint64_t, uint64_t))(v31 + 8));
    ++v26;
  }

  sub_10000F508(*(void *)(v5113 + 1000), *(uint64_t (**)(uint64_t, uint64_t))(v31 + 96));
  sub_1000432D0();
  if (!(!v532 & v562)) {
    __asm { BR              X9 }
  }

LABEL_260:
  sub_10004318C();
  sub_100045944();
LABEL_155:
  sub_100043350( (uint64_t)"Fatal error",  v614,  v615,  v616,  v617,  (uint64_t)"BackgroundShortcutRunner/ToolKitIndexer.swift",  v618,  v619,  v1201,  v1304);
  sub_100043108();
}

uint64_t sub_100026940()
{
  *(void *)(v0 + 1832) = v1;
  swift_task_dealloc(v4);
  if (v1)
  {
    uint64_t v5 = *(void **)(v0 + 1816);
    swift_bridgeObjectRelease(*(void *)(v0 + 440));

    sub_10000F3A0();
    return sub_10000F2E4();
  }

  else
  {

    uint64_t v7 = (void *)swift_task_alloc(async function pointer to WFParameter.toolkitTypeInstance(for:)[1]);
    *(void *)(v0 + 1840) = v7;
    *uint64_t v7 = v2;
    v7[1] = sub_1000269DC;
    return WFParameter.toolkitTypeInstance(for:)(*(void *)(v0 + 1528), *(void *)(v0 + 576));
  }

uint64_t sub_1000269DC()
{
  *(void *)(v0 + 1848) = v1;
  swift_task_dealloc(v3);
  if (v1) {
    swift_bridgeObjectRelease(*(void *)(v0 + 440));
  }
  sub_10000F3A0();
  return sub_10000F2E4();
}

void sub_100026A30()
{
  uint64_t v5148 = v0 + 552;
  uint64_t v1 = *(char **)(v0 + 1848);
  WFParameter.toolkitParameterFlags(for:)(*(void *)(v0 + 576));
  uint64_t v5211 = v0;
  if (v1)
  {
    uint64_t v2 = *(void *)(v0 + 1568);
    (*(void (**)(void, void))(v0 + 1688))(*(void *)(v0 + 1528), *(void *)(v0 + 1512));
    sub_100043124(*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
    swift_bridgeObjectRelease(*(void *)(v0 + 440));
    uint64_t v3 = *(void **)(v0 + 1800);
    sub_10000F568();
    uint64_t v4 = sub_100042644((uint64_t)&unk_100066480, 24LL);
    *(void *)(v4 + 16) = v3;
    uint64_t v5 = v4;
    uint64_t v5203 = v4;
    v5210 = (os_log_s *)sub_100042644((uint64_t)&unk_1000664A8, 24LL);
    *((void *)v5210 + 2) = v1;
    id v6 = v3;
    sub_100043D64();
    id v7 = v6;
    v5198 = v1;
    uint64_t v8 = sub_100043D64();
    uint64_t v9 = Logger.logObject.getter(v8);
    os_log_type_t v5169 = sub_100047280(v9);
    uint64_t v10 = sub_100042644((uint64_t)&unk_1000664D0, 17LL);
    *(_BYTE *)(v10 + 16) = 64;
    uint64_t v11 = sub_100042644((uint64_t)&unk_1000664F8, 17LL);
    *(_BYTE *)(v11 + 16) = 8;
    uint64_t v12 = sub_100042644((uint64_t)&unk_100066520, 32LL);
    *(void *)(v12 + 16) = sub_100040E5C;
    *(void *)(v12 + 24) = v5;
    uint64_t v13 = sub_100042644((uint64_t)&unk_100066548, 32LL);
    *(void *)(v13 + 16) = sub_10004217C;
    *(void *)(v13 + 24) = v12;
    uint64_t v14 = sub_100042644((uint64_t)&unk_100066570, 17LL);
    *(_BYTE *)(v14 + 16) = 64;
    uint64_t v15 = sub_100042644((uint64_t)&unk_100066598, 17LL);
    *(_BYTE *)(v15 + 16) = 8;
    uint64_t v16 = sub_100042644((uint64_t)&unk_1000665C0, 32LL);
    *(void *)(v16 + 16) = sub_100040E80;
    *(void *)(v16 + 24) = v5210;
    uint64_t v17 = sub_100042644((uint64_t)&unk_1000665E8, 32LL);
    *(void *)(v17 + 16) = sub_100040EBC;
    *(void *)(v17 + 24) = v16;
    uint64_t v18 = sub_100042644((uint64_t)&unk_100066610, 32LL);
    *(void *)(v18 + 16) = sub_100040EC4;
    *(void *)(v18 + 24) = v17;
    uint64_t v19 = sub_10000844C((uint64_t *)&unk_10006A360);
    uint64_t v20 = sub_100047388(v19);
    *(_OWORD *)(v20 + 16) = xmmword_100059850;
    *(void *)(v20 + 32) = sub_1000421D8;
    *(void *)(v20 + 40) = v10;
    *(void *)(v20 + 48) = sub_1000421D8;
    *(void *)(v20 + 56) = v11;
    *(void *)(v20 + 64) = sub_100040EAC;
    *(void *)(v20 + 72) = v13;
    *(void *)(v20 + 80) = sub_1000421D8;
    *(void *)(v20 + 88) = v14;
    *(void *)(v20 + 96) = sub_1000421D8;
    *(void *)(v20 + 104) = v15;
    *(void *)(v20 + 112) = sub_100042180;
    *(void *)(v20 + 120) = v18;
    swift_retain(v5203);
    uint64_t v5175 = v12;
    sub_100044EE0();
    swift_retain(v5210);
    sub_10004486C();
    sub_100044D54();
    sub_100044B34();
    sub_1000442F4();
    sub_100043D5C();
    sub_100044AFC();
    char v5189 = v15;
    sub_100043FDC();
    unint64_t v5161 = v18;
    sub_100044400();
    sub_100043908();
    id v21 = (id)v5211;
    BOOL v22 = sub_100046EFC(v5208);
    uint64_t v23 = *(void **)(v5211 + 1800);
    if (v22)
    {
      uint64_t v24 = (uint8_t *)sub_100044BAC();
      uint64_t v25 = (void *)sub_10000D524(16LL);
      sub_1000457AC();
      sub_100043868();
      void v24[3] = 8;
      sub_100043DA4();
      *(void *)(v5211 + 552) = v23;
      id v21 = v23;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v5148, v5211 + 560);
      *uint64_t v25 = v23;
      sub_100043678();
      sub_100043F84();
      sub_1000440C4();

      v24[12] = 64;
      sub_100046A78();
      v24[13] = 8;
      sub_100043E18();
      uint64_t v26 = (uint64_t)v5198;
      sub_100045DE0();
      uint64_t v27 = sub_1000473DC();
      uint64_t v28 = (unint64_t *)v5211;
      *(void *)(v5211 + 560) = v27;
      sub_100045474(v5211 + 560, v5211 + 568);
      v25[1] = v27;
      swift_release(v18);
      sub_100043BF8();
      sub_100045980();
      swift_release(v5210);
      sub_1000449B0();
      sub_100043ADC((void *)&_mh_execute_header, v5208, v5169, "Failed to index action parameter: %@ due to %@", v24);
      sub_10000844C(&qword_10006A320);
      sub_1000442BC((uint64_t)v25);
      sub_10000F2F0((uint64_t)v25);
      sub_10000F2F0((uint64_t)v24);

      uint64_t v29 = *(os_log_s **)(v5211 + 1800);
    }

    else
    {

      swift_errorRelease(v5198);
      sub_100043868();
      sub_100043DA4();
      sub_100043678();
      uint64_t v26 = (uint64_t)v5198;
      swift_release(v5175);
      sub_1000440C4();

      sub_100046A78();
      sub_100043E18();
      swift_release(v18);
      sub_100043BF8();
      sub_100045980();
      swift_release(v5210);
      uint64_t v28 = (unint64_t *)v5211;
      uint64_t v29 = v5208;
    }

    unint64_t v50 = v28[136];
    sub_1000449B0();

    sub_100043124(*(uint64_t (**)(uint64_t, uint64_t))(v50 + 8));
  }

  else
  {
    uint64_t v30 = *(void *)(v0 + 1672);
    uint64_t v31 = *(void **)(v0 + 592);
    id v32 = *(id *)(v0 + 1800);
    uint64_t v33 = sub_100047694();
    uint64_t v35 = sub_100015B94(v33, v34);
    sub_100043230();
    uint64_t v37 = v36;
    v5204 = v35;
    v5208 = 0LL;
    if (v30)
    {
      NSString v38 = [*(id *)(v0 + 1672) identifier];
      if (!v38)
      {
        static String._unconditionallyBridgeFromObjectiveC(_:)(0LL);
        uint64_t v31 = v39;
        NSString v38 = String._bridgeToObjectiveC()();
        sub_100042E4C();
      }

      id v40 = (id)WFLinkActionIdentifierFromShortcutsActionIdentifier(v38);
      sub_100043670();
      if (v31)
      {
        uint64_t v41 = *(void *)(v0 + 624);
        uint64_t v42 = sub_1000132B8();
        id v43 = sub_100043854(v42, "actionIdentifier");
        uint64_t v44 = sub_100043918((uint64_t)v43);
        sub_100045CA8();
        id v46 = sub_10004416C(v45, "key");
        uint64_t v47 = sub_100043918((uint64_t)v46);
        uint64_t v49 = v48;

        uint64_t v5151 = static SampleInvocationDefinition.definitions(from:typeName:parameterKey:)( v41,  v44,  &selRef_parameterKey,  v47,  v49);
        sub_1000132B8();
        swift_bridgeObjectRelease(&selRef_parameterKey);
      }

      else
      {
        uint64_t v5151 = v37;
      }
    }

    else
    {
      uint64_t v5151 = v36;
    }

    uint64_t v51 = *(void **)(v0 + 1800);
    v5198 = *(char **)(v0 + 1688);
    v5210 = *(os_log_s **)(v0 + 1576);
    uint64_t v52 = *(void *)(v0 + 1568);
    char v5189 = v52;
    uint64_t v5176 = *(void *)(v0 + 1792);
    uint64_t v5182 = *(void *)(v0 + 1560);
    uint64_t v5158 = *(void *)(v0 + 1528);
    uint64_t v53 = *(void *)(v0 + 1520);
    v5155 = *(void **)(v0 + 1512);
    uint64_t v5164 = *(void *)(v0 + 1368);
    unint64_t v54 = *(void *)(v0 + 1360);
    unint64_t v5161 = v54;
    uint64_t v55 = *(void *)(v0 + 1352);
    uint64_t v56 = *(uint64_t **)(v5211 + 1344);
    uint64_t v5170 = *(void *)(v5211 + 1336);
    uint64_t v57 = *(int **)(v5211 + 1328);
    uint64_t v58 = sub_100043918((uint64_t)[v51 key]);
    sub_100045CA8();
    uint64_t v59 = *(void *)(v5211 + 440);
    sub_100043D7C( (uint64_t)v56 + v57[7],  (uint64_t)v5210,  *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v52 + 16));
    uint64_t v60 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v53 + 16);
    id v21 = v5155;
    sub_100044D44((uint64_t)v56 + v57[8], v5158, v60);
    (*(void (**)(char *, uint64_t, uint64_t))(v54 + 16))((char *)v56 + v57[9], v5164, v55);
    *uint64_t v56 = v58;
    v56[1] = (uint64_t)&selRef_parameterKey;
    v56[2] = v5176;
    v56[3] = v59;
    *(uint64_t *)((char *)v56 + v57[10]) = v5151;
    *(uint64_t *)((char *)v56 + v57[11]) = (uint64_t)v5204;
    sub_100041230((uint64_t)v56, v5170, _s15ActionParameterVMa);
    sub_100046C10();
    uint64_t v26 = *(void *)(*(void *)(v5211 + 488) + 16LL);
    sub_100037F50(v26, (uint64_t (*)(BOOL))sub_100050CE4);
    sub_100037F90(v26, v5170);
    sub_100045140();
    uint64_t v61 = (uint64_t)v56;
    uint64_t v28 = (unint64_t *)v5211;
    sub_100040FB8(v61, _s15ActionParameterVMa);
    uint64_t v62 = sub_100046C60();
    v63(v62);
    ((void (*)(uint64_t, void *))v5198)(v5158, v5155);
    (*(void (**)(os_log_s *, uint64_t))(v52 + 8))(v5210, v5182);
  }

  unint64_t v64 = v28[226];
  if (v64 != v28[214])
  {
    v5177 = v28 + 53;
    uint64_t v65 = (unsigned __int8 *)v28 + 2081;
    while (1)
    {
      v28[224] = v64;
      int v66 = *v65;
      uint64_t v67 = sub_100052278(v64, *v65, v28[213]);
      uint64_t v68 = v28[213];
      id v69 = v66 == 1 ? sub_1000430AC(v68 + 8 * v64) : (id)sub_100044EF8(v67, v68);
      uint64_t v70 = v69;
      v28[225] = (unint64_t)v69;
      v28[226] = v64 + 1;
      if (__OFADD__(v64, 1LL)) {
        break;
      }
      uint64_t v71 = objc_opt_self(&OBJC_CLASS___WFExpandingParameter);
      if (!sub_100045250(v71))
      {
        sub_100037E60(0LL);
        v28[55] = v153;
        v5157 = v70;
        id v154 = sub_100043854(v153, "resourceManager");
        uint64_t v155 = sub_1000132F0((uint64_t)v154, &qword_10006A3C8, &OBJC_CLASS___WFParameterRelationResource_ptr);
        id v156 = [v154 resourceObjectsOfClass:swift_getObjCClassFromMetadata(v155)];
        sub_1000469E0();
        if (!v64) {
          goto LABEL_274;
        }
        uint64_t v157 = &qword_10006A3D0;
        sub_10000E518(0LL, &qword_10006A3D0, &OBJC_CLASS___WFResource_ptr);
        sub_100040880(&qword_10006A3D8, &qword_10006A3D0, &OBJC_CLASS___WFResource_ptr);
        sub_100045328(v158);
        sub_100043670();
        sub_100013470((uint64_t)&qword_10006A3D0);
        sub_1000476C8();
        sub_100042E4C();
        uint64_t v5150 = sub_100046114();
        if (!v5150)
        {
LABEL_125:
          sub_100008D58();
          uint64_t v265 = sub_100009BEC();
          id v266 = sub_100014078(v265);
          sub_100042E4C();
          if (!v266) {
            id v266 = [(id)v28[210] defaultContext];
          }
          v28[227] = (unint64_t)v266;
          uint64_t v267 = (unint64_t **)swift_task_alloc(async function pointer to WFParameter.toolkitTypeDefinition(for:localizationContext:)[1]);
          v28[228] = (unint64_t)v267;
          *uint64_t v267 = v28;
          v267[1] = (unint64_t *)sub_100026940;
          sub_1000430EC();
          return;
        }

        char v5153 = sub_100046104();
        uint64_t v159 = 0LL;
        sub_1000464F0();
        while (2)
        {
          sub_10004509C();
          if ((v5153 & 1) != 0) {
            uint64_t v160 = (uint64_t)sub_100045DF0();
          }
          else {
            uint64_t v160 = sub_100044E8C(v159);
          }
          v5195 = (void *)v160;
          BOOL v161 = __OFADD__(v159++, 1LL);
          if (v161) {
            goto LABEL_266;
          }
          uint64_t v5160 = v159;
          unint64_t v162 = v28[212];
          id v163 = sub_100044A64(v160, "parameterKey");
          sub_100043918((uint64_t)v163);
          sub_10004613C();
          uint64_t v164 = (uint64_t)v28;
          if (*(void *)(v162 + 16))
          {
            unint64_t v165 = v28[212];
            sub_100045D90(*(void *)(v165 + 40));
            sub_100045070();
            Swift::Int v166 = sub_100045F8C();
            if (((*(void *)(v165
                             + (((v166 & (unint64_t)~(-1LL << *(_BYTE *)(v165 + 32))) >> 3) & 0xFFFFFFFFFFFFF8LL)
                             + 56) >> (v166 & ~(-1LL << *(_BYTE *)(v165 + 32)))) & 1) != 0)
            {
              uint64_t v167 = sub_100044680();
              BOOL v169 = v169 && v168 == (void)v157;
              if (v169 || (sub_10004320C(v167, v168, v159, (uint64_t)v157) & 1) != 0)
              {
                sub_100042E4C();
                sub_100045140();
                uint64_t v28 = (unint64_t *)v5211;
                goto LABEL_115;
              }

              do
              {
                uint64_t v164 = v5211;
                sub_100044090();
                if ((v170 & 1) == 0) {
                  goto LABEL_77;
                }
                uint64_t v171 = sub_100044680();
                BOOL v173 = v169 && v172 == (void)v157;
              }

              while (!v173 && (sub_10004320C(v171, v172, v159, (uint64_t)v157) & 1) == 0);
              sub_100042E4C();
              sub_100045140();
              uint64_t v28 = (unint64_t *)v5211;
LABEL_116:
              if (v159 == v5150) {
                goto LABEL_125;
              }
              continue;
            }
          }

          break;
        }

LABEL_77:
        uint64_t v174 = *(void *)(v164 + 1416);
        uint64_t v175 = sub_100042E4C();
        id v176 = sub_100044A64(v175, "comparedValues");
        uint64_t v177 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v176, (char *)&type metadata for Any + 8);

        unint64_t v178 = v5161;
        unint64_t v179 = (unint64_t)sub_1000137AC(v177, v5157);
        sub_1000432F0();
        uint64_t v180 = sub_1000478FC();
        sub_100040370(&qword_10006A3E0, (uint64_t (*)(uint64_t))&type metadata accessor for TypedValue);
        uint64_t v183 = sub_100044AAC(v180, v182, v181);
        uint64_t v28 = (unint64_t *)v164;
        if (sub_100045C4C())
        {
          sub_1000469D4();
          if (v184 != v161) {
            goto LABEL_268;
          }
          uint64_t v185 = sub_100045DE8();
          sub_10004680C(v185);
          do
          {
            if ((v5189 & 1) != 0)
            {
              unint64_t v186 = v28[178];
              uint64_t v187 = *(void (**)(unint64_t, char *, unint64_t))(v186 + 16);
              v187( v28[183],  &v5198[((*(unsigned __int8 *)(v186 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v186 + 80))
                     + *(void *)(v186 + 72) * v178],
                v28[177]);
            }

            else
            {
              unint64_t v179 = v28[179];
              uint64_t v188 = sub_100046030();
              uint64_t v190 = sub_100043364(v188, v189, (uint64_t (*)(void))&type metadata accessor for TypedValue);
              if (v179 != 8) {
                goto LABEL_264;
              }
              uint64_t v191 = v190;
              unint64_t v192 = v28[183];
              unint64_t v193 = v28[178];
              unint64_t v194 = v28[177];
              v28[53] = v191;
              uint64_t v187 = *(void (**)(unint64_t, char *, unint64_t))(v193 + 16);
              v187(v192, (char *)v5177, v194);
              sub_1000431C0();
            }

            uint64_t v195 = v28[177];
            sub_10004462C(*(uint64_t (**)(void))(v28[178] + 32));
            uint64_t v196 = *(void *)(v183 + 40);
            sub_100009BEC();
            unint64_t v197 = sub_100044634(v196, v195) & ~(-1LL << *(_BYTE *)(v183 + 32));
            id v21 = (id)(v183 + 56);
            sub_1000470B8();
            if ((v199 & 1) != 0)
            {
              unint64_t v179 = ~v198;
              uint64_t v200 = *(void *)(v28[178] + 72);
              while (1)
              {
                uint64_t v177 = *(void *)(v5211 + 1440);
                uint64_t v201 = *(void *)(v5211 + 1424);
                uint64_t v26 = *(void *)(v5211 + 1416);
                v187(v177, (char *)(*(void *)(v183 + 48) + v197 * v200), v26);
                sub_100040370(&qword_10006A3E8, (uint64_t (*)(uint64_t))&type metadata accessor for TypedValue);
                uint64_t v174 = sub_100044214(v202);
                unint64_t v178 = *(void *)(v201 + 8);
                uint64_t v203 = sub_1000453BC();
                ((void (*)(uint64_t))v178)(v203);
                if ((v174 & 1) != 0) {
                  break;
                }
                sub_100045C24();
                if ((v204 & 1) == 0) {
                  goto LABEL_88;
                }
              }

              sub_100042E4C();
              uint64_t v28 = (unint64_t *)v5211;
            }

            else
            {
LABEL_88:
              uint64_t v177 = *(void *)(v5211 + 1456);
              id v21 = *(id *)(v5211 + 1448);
              uint64_t v26 = *(void *)(v5211 + 1416);
              sub_100042E4C();
              int v205 = sub_1000460BC();
              v187((unint64_t)v21, (char *)v177, v26);
              sub_100046460();
              if (!v169 & v206)
              {
                if ((v205 & 1) == 0) {
                  sub_10003AE5C();
                }
              }

              else
              {
                if (v205) {
                  sub_10003A578();
                }
                else {
                  sub_10003B54C();
                }
                uint64_t v26 = *(void *)(v5211 + 392);
                unint64_t v197 = sub_100044634(*(void *)(v26 + 40), *(void *)(v5211 + 1416)) & ~(-1LL << *(_BYTE *)(v26 + 32));
                id v21 = (id)(v26 + 56);
                sub_1000470B8();
                if ((v208 & 1) != 0)
                {
                  unint64_t v179 = ~v207;
                  uint64_t v209 = *(void *)(*(void *)(v5211 + 1424) + 72LL);
                  do
                  {
                    uint64_t v210 = *(void *)(v5211 + 1440);
                    uint64_t v211 = *(void *)(v5211 + 1424);
                    uint64_t v177 = *(void *)(v5211 + 1416);
                    v187(v210, (char *)(*(void *)(v26 + 48) + v197 * v209), v177);
                    sub_100040370( &qword_10006A3E8,  (uint64_t (*)(uint64_t))&type metadata accessor for TypedValue);
                    uint64_t v212 = sub_1000460C4();
                    char v216 = sub_100047024(v212, v213, v214, v215);
                    sub_100043C00(v210, *(uint64_t (**)(uint64_t, uint64_t))(v211 + 8));
                    if ((v216 & 1) != 0)
                    {
                      sub_10004626C();
                      sub_1000430D0();
                      return;
                    }

                    sub_100045C24();
                  }

                  while ((v217 & 1) != 0);
                }
              }

              uint64_t v28 = (unint64_t *)v5211;
              uint64_t v218 = *(void *)(v5211 + 1448);
              uint64_t v219 = *(void *)(v5211 + 1424);
              uint64_t v220 = *(void *)(v5211 + 1416);
              uint64_t v183 = *(void *)(v5211 + 392);
              *(void *)(v183 + ((v197 >> 3) & 0xFFFFFFFFFFFFFF8LL) + 56) |= 1LL << v197;
              ((void (*)(unint64_t, uint64_t, uint64_t))v5208)( *(void *)(v183 + 48) + *(void *)(v219 + 72) * v197,  v218,  v220);
              uint64_t v221 = *(void *)(v183 + 16);
              BOOL v161 = __OFADD__(v221, 1LL);
              uint64_t v222 = v221 + 1;
              if (v161)
              {
                __break(1u);
LABEL_264:
                __break(1u);
LABEL_265:
                __break(1u);
LABEL_266:
                __break(1u);
LABEL_267:
                __break(1u);
LABEL_268:
                __break(1u);
LABEL_269:
                __break(1u);
LABEL_270:
                __break(1u);
LABEL_271:
                __break(1u);
LABEL_272:
                __break(1u);
LABEL_273:
                __break(1u);
LABEL_274:

                __break(1u);
                JUMPOUT(0x100029FF8LL);
              }

              uint64_t v174 = *(void *)(v5211 + 1424);
              *(void *)(v183 + 16) = v222;
              sub_100045D08();
              unint64_t v178 = *(void *)(v174 + 8);
            }

            ((void (*)(unint64_t, unint64_t))v178)(v28[182], v28[177]);
            sub_1000456CC();
          }

          while (!v169);
        }

        uint64_t v223 = v28[215];
        uint64_t v224 = sub_10004515C();
        id v225 = sub_100044A64(v224, "relation");
        sub_100045F64();
        uint64_t v226 = sub_100043F74();
        if (v21 == (id)v226 && v223 == v227)
        {
          sub_100043238(v223);
        }

        else
        {
          uint64_t v177 = v227;
          char v229 = sub_10004320C((uint64_t)v21, v223, v226, v227);
          sub_1000432F0();
          sub_10004316C();
          if ((v229 & 1) == 0)
          {
            unint64_t v179 = v28[216];
            id v230 = (id)v174;
            id v231 = sub_1000431B0();
            sub_1000430A0((uint64_t)v231);
            sub_100043650();

            if ((v177 & 1) != 0)
            {
              uint64_t v232 = *((unsigned int *)v28 + 514);
              sub_10004458C();
              sub_100042E4C();
              goto LABEL_113;
            }

            id v244 = (id)v174;
            id v245 = sub_1000431B0();
            sub_1000430A0((uint64_t)v245);
            sub_100043650();

            id v246 = (id)v174;
            id v247 = sub_1000431B0();
            sub_1000430A0((uint64_t)v247);
            sub_100043650();

            id v248 = (id)v174;
            id v249 = sub_1000431B0();
            sub_1000430A0((uint64_t)v249);
            sub_100043650();

            id v250 = (id)v174;
            id v251 = sub_1000431B0();
            sub_1000430A0((uint64_t)v251);
            sub_100043650();

            id v252 = (id)v174;
            id v253 = sub_1000431B0();
            sub_1000430A0((uint64_t)v253);
            sub_100043650();

            sub_1000430A0((uint64_t)(id)v28[222]);
            sub_100043650();

            unint64_t v254 = v28[173];
            sub_100042E4C();
            uint64_t v234 = sub_10004619C();
            uint64_t v236 = v254;
LABEL_114:
            v233(v234, v235, v236);
            uint64_t v237 = v28[176];
            unint64_t v238 = v28[174];
            id v239 = [v5195 parameterKey];
            id v21 = (id)static String._unconditionallyBridgeFromObjectiveC(_:)(v239);
            uint64_t v157 = v240;

            uint64_t v241 = sub_100047980();
            uint64_t v26 = v237;
            sub_10004314C(v241, v242, v243);
            sub_10004517C();
            sub_100046C10();
            sub_100045410(v28[55]);
            sub_100045A78();
            sub_100037FF8();

            sub_100043380(v237, *(uint64_t (**)(uint64_t, uint64_t))(v238 + 8));
LABEL_115:
            uint64_t v159 = v5160;
            goto LABEL_116;
          }
        }

        uint64_t v232 = *((unsigned int *)v28 + 519);
        sub_10004458C();
        *(void *)uint64_t v177 = v183;
LABEL_113:
        uint64_t v233 = *(void (**)(uint64_t, uint64_t, uint64_t))(v179 + 104);
        uint64_t v234 = v177;
        uint64_t v235 = v232;
        uint64_t v236 = v26;
        goto LABEL_114;
      }

      unint64_t v64 = v28[226];
      if (v64 == v28[214]) {
        goto LABEL_23;
      }
    }

LABEL_231:
    __break(1u);
LABEL_232:
    sub_10004318C();
    sub_100045944();
LABEL_129:
    sub_100043350( (uint64_t)"Fatal error",  v272,  v273,  v274,  v275,  (uint64_t)"BackgroundShortcutRunner/ToolKitIndexer.swift",  v276,  v277,  v1285,  v1387);
    sub_100043108();
    return;
  }

LABEL_176:
    uint64_t v325 = sub_1000132B8();
    id v326 = sub_10004341C(v325, "disabledOnPlatforms");
    sub_100043F68();
    sub_100043F5C(v327);
    sub_100043670();
    if (sub_10004542C())
    {
      sub_100044EAC();
      if (v184 != v161) {
        goto LABEL_271;
      }
      sub_100044F58();
      sub_1000449F0();
      do
      {
        if ((v300 & 1) != 0) {
          uint64_t v328 = (uint64_t)sub_1000430AC((uint64_t)v313 + 8 * v82);
        }
        else {
          uint64_t v328 = sub_100043FE4();
        }
        sub_100043D18(v328);
        sub_10004508C();

        sub_1000452EC();
      }

      while (v28 != (unint64_t *)v82);
    }

    sub_100042E4C();
    sub_1000462E8();
    if (v330) {
      uint64_t v331 = sub_100009BEC();
    }
    else {
      uint64_t v331 = static RuntimePlatform.all.getter(v329);
    }
    v5212[0] = v331;
    uint64_t v28 = (unint64_t *)v5212[10];
    uint64_t v332 = sub_100043E98();
    sub_100045F84(v332);
    sub_100043024();
    uint64_t v333 = v5212[0];
    uint64_t v334 = sub_10004317C();
    uint64_t v335 = (void *)sub_1000352A0(v334);
    sub_100043238(v333);
    sub_100043024();
    sub_100042E4C();
    if (sub_100045CF4())
    {
      sub_100046910();
      if (v184 != v161) {
        goto LABEL_272;
      }
      uint64_t v5186 = *(void *)(v5211 + 1016);
      uint64_t v5162 = *(void *)(v5211 + 936);
      uint64_t v5172 = *(void *)(v5211 + 928);
      uint64_t v336 = sub_100052268(v5206);
      sub_100047048(v336);
      do
      {
        if ((v5194 & 1) != 0)
        {
          sub_1000432F8();
        }

        else
        {
          uint64_t v337 = sub_100043000(v77, v5206, (uint64_t (*)(void))&type metadata accessor for RuntimePlatform);
          uint64_t v335 = (void *)v5211;
          if (v5162 != 8) {
            goto LABEL_265;
          }
          uint64_t v333 = v337;
          uint64_t v338 = *(void *)(v5211 + 944);
          uint64_t v339 = *(void *)(v5211 + 920);
          *(void *)(v5211 + 448) = v333;
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v5172 + 16))(v338, v5211 + 448, v339);
          sub_10004611C();
        }

        uint64_t v340 = v335[129];
        uint64_t v341 = v335[121];
        uint64_t v342 = v335[112];
        uint64_t v343 = v335[111];
        uint64_t v344 = v335[110];
        ++v77;
        (*(void (**)(uint64_t, void, void))(v333 + 32))(v341, v335[118], v335[115]);
        uint64_t v345 = sub_100045354();
        sub_10000848C(v342, 1LL, 1LL, v345);
        sub_10000848C(v343, 1LL, 1LL, v345);
        sub_10000848C(v344, 1LL, 1LL, v345);
        RuntimeAvailabilityAnnotation.init(platform:introducingVersion:deprecatingVersion:obsoletingVersion:)( v341,  v342,  v343,  v344);
        uint64_t v82 = v5186;
        uint64_t v346 = sub_100045A78();
        sub_10004314C(v346, v347, v348);
        sub_1000441FC();
        uint64_t v333 = (uint64_t)v5210;
        sub_100045148();
        uint64_t v28 = *(unint64_t **)(v335[50] + 16LL);
        sub_10004523C((uint64_t)v28);
        sub_100037FF8();
        sub_100043380(v340, *(uint64_t (**)(uint64_t, uint64_t))(v5186 + 8));
        sub_1000475D8();
      }

      while (!v169);
    }

    uint64_t v79 = v5211;
    sub_10004581C();
    uint64_t v349 = sub_1000471D8();
    *(void *)(v5211 + 456) = v349;
    sub_100043230();
    *(void *)(v5211 + 464) = v350;
    *(void *)(v5211 + 472) = &OBJC_PROTOCOL___WFLinkActionProtocol;
    uint64_t v5187 = v349;
    if (swift_dynamicCastObjCProtocolConditional(v28, 1LL, v5211 + 472))
    {
      uint64_t v351 = *(void *)(v5211 + 624);
      uint64_t v28 = (unint64_t *)sub_10004627C();
      id v352 = sub_10004416C((uint64_t)v28, "backingActionIdentifiers");
      uint64_t v82 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v352, &type metadata for String);

      unint64_t v353 = v5154;
      uint64_t v354 = sub_100013D08(v82);
      sub_100043D74();
      swift_bridgeObjectRetain(v351);
      uint64_t v355 = sub_10001F608((uint64_t)v354, v351);

      sub_100008D58();
      uint64_t v356 = v354;
      uint64_t v349 = v5187;
      swift_bridgeObjectRelease(v356);
      *(void *)(v5211 + 464) = v355;
    }

    else
    {
      unint64_t v353 = v5154;
    }

    v5192 = (void *)(v5211 + 464);
    *(void *)(v5211 + 2032) = v353;
    if (!sub_100044F00() && sub_1000473F0())
    {
      sub_100046E94();
      if (v184 != v161) {
        goto LABEL_273;
      }
      uint64_t v28 = (unint64_t *)(v5211 + 512);
      uint64_t v77 = *(void *)(v5211 + 840);
      uint64_t v5207 = *(void *)(v5211 + 848);
      uint64_t v5209 = *(void *)(v5211 + 816);
      v5180 = *(unint64_t **)(v5211 + 792);
      char v357 = sub_100052268(v349);
      uint64_t v82 = enum case for SystemToolProtocol.assistantSchema(_:);
      sub_100045814();
      uint64_t v358 = 0LL;
      unsigned int v5196 = v82;
      do
      {
        if ((v357 & 1) != 0)
        {
          (*(void (**)(void, unint64_t, void))(v77 + 16))( *(void *)(v79 + 872),  v349 + ((*(unsigned __int8 *)(v77 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v77 + 80))
          + *(void *)(v77 + 72) * v358,
            *(void *)(v79 + 832));
        }

        else
        {
          uint64_t v359 = sub_1000466CC();
          uint64_t v361 = sub_100046784( v359,  v360,  (uint64_t (*)(void))&type metadata accessor for SystemToolProtocol);
          if (v5207 != 8) {
            goto LABEL_267;
          }
          uint64_t v362 = sub_1000476B4(v361);
          (*(void (**)(uint64_t, unint64_t *))(v77 + 16))(v362, v28);
          sub_1000431C0();
        }

        sub_10000F538( *(void *)(v79 + 864),  *(void *)(v79 + 872),  *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v77 + 32));
        int v363 = sub_10004798C(*(uint64_t (**)(uint64_t, uint64_t))(v77 + 88));
        uint64_t v364 = *(void *)(v79 + 864);
        if (v363 == (_DWORD)v82)
        {
          uint64_t v365 = *(void *)(v79 + 824);
          sub_100043184(*(uint64_t (**)(uint64_t))(v77 + 96));
          sub_1000446CC(v365, v364, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5209 + 32));
          sub_100044E94();
          sub_100044DAC();
          uint64_t v366 = sub_100044DFC();
          sub_100043B50();
          if (*(void *)(v366 + 16) && (unint64_t v367 = sub_100051CAC(), (v368 & 1) != 0))
          {
            sub_1000431C8(v367, *(void *)(v79 + 776));
            uint64_t v369 = 0LL;
          }

          else
          {
            uint64_t v369 = 1LL;
          }

          uint64_t v370 = *(void *)(v79 + 784);
          uint64_t v371 = *(void *)(v79 + 776);
          sub_100045F20(v371, v369);
          sub_100008D58();
          int v372 = sub_1000084E0(v371, 1LL, v370);
          uint64_t v373 = *(void *)(v79 + 824);
          if (v372 == 1)
          {
            uint64_t v374 = *(void *)(v79 + 776);
            sub_100043910(*(void *)(v79 + 824), *(uint64_t (**)(uint64_t, uint64_t))(v5209 + 8));
            sub_100041358(v374, &qword_10006A390);
          }

          else
          {
            uint64_t v375 = *(void *)(v79 + 800);
            uint64_t v376 = *(void *)(v5211 + 784);
            sub_100043C08(v375, *(void *)(v5211 + 776), (uint64_t (*)(uint64_t, uint64_t, uint64_t))v5180[4]);
            sub_100047030();
            sub_100015F18();
            uint64_t v377 = v375;
            uint64_t v349 = v5187;
            uint64_t v378 = v376;
            uint64_t v28 = (unint64_t *)(v5211 + 512);
            uint64_t v79 = v5211;
            ((void (*)(uint64_t, uint64_t))v5180[1])(v377, v378);
            sub_100043910(v373, *(uint64_t (**)(uint64_t, uint64_t))(v5209 + 8));
          }

          uint64_t v82 = v5196;
        }

        else
        {
          sub_100043184(*(uint64_t (**)(uint64_t))(v77 + 8));
        }

        ++v358;
      }

      while (v353 != v358);
      sub_1000132B8();
    }

    uint64_t v379 = (os_log_s *)(v79 + 456);
    if (sub_100044DA4(v5192))
    {
      sub_10004590C();
      sub_100044F40(v380);
      sub_100044848();
      sub_100043800(*(void *)(v79 + 456));
      uint64_t v79 = v5211;
      sub_100037FF8();
    }

    uint64_t v381 = *(void **)(v79 + 1672);
    if (v381)
    {
      sub_100043240();
      id v382 = v381;
      *(void *)(v79 + 2040) = sub_1000431DC();
      sub_100042F20();
      sub_100043160();
      goto LABEL_222;
    }

    uint64_t v86 = v79 + 480;
    sub_100040428(*(void **)(v79 + 576), (SEL *)&selRef_iconName);
    v5208 = v379;
    if (v384)
    {
      uint64_t v385 = v383;
      uint64_t v386 = v384;
      uint64_t v387 = *(void **)(v5211 + 768);
      swift_bridgeObjectRelease(*(void *)(v5211 + 464));
      sub_100046FAC();
      *uint64_t v387 = v385;
      v387[1] = v386;
      uint64_t v388 = enum case for ToolIcon.workflowAsset(_:);
      uint64_t v389 = sub_1000432E8();
      sub_10004314C( (uint64_t)v387,  v388,  *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v389 - 8) + 104LL));
      uint64_t v79 = v5211;
      sub_100043BE0();
      goto LABEL_236;
    }

    sub_100040428(*(void **)(v79 + 576), (SEL *)&selRef_iconSymbolName);
    if (!v395) {
      goto LABEL_235;
    }
    uint64_t v77 = v394;
    uint64_t v396 = v395;
    sub_100040428(*(void **)(v79 + 576), (SEL *)&selRef_iconBackgroundColorName);
    if (!v398) {
      goto LABEL_234;
    }
    uint64_t v399 = v397;
    uint64_t v400 = v398;
    id v401 = [*(id *)(v79 + 576) definition];
    if (v401)
    {
      id v402 = [v401 objectForKey:WFActionIconSymbolColorNameKey];
      sub_100047644();
      if (v349)
      {
        sub_100045BC0();
        sub_100047410();
      }

      else
      {
        sub_100044F68();
      }

      uint64_t v1247 = sub_100044174();
      sub_1000412F8(v1247, v1248, v1249);
      if (*(void *)(v5211 + 328))
      {
        uint64_t v1250 = v5211;
        uint64_t v1253 = v5166;
        if ((sub_100009C04( v5211 + 376,  v79 + 304,  (uint64_t)&type metadata for Any + 8,  (uint64_t)&type metadata for String) & 1) != 0)
        {
          sub_100045F14();
          goto LABEL_247;
        }

LABEL_246:
        sub_100043410(*(void *)(v1250 + 720), v1251, v1252, *(void *)(v1250 + 632));
LABEL_247:
        sub_100044A38(v5192);
        swift_bridgeObjectRelease(*v1253);
        BOOL v1255 = v399 == 1953392980 && v400 == 0xE400000000000000LL;
        if (v1255 || (uint64_t v1256 = sub_100046C28(), (sub_100043138(v1256, v1257) & 1) != 0))
        {
          uint64_t v1258 = (void *)v5211;
          uint64_t v1259 = *(void *)(v5211 + 712);
          uint64_t v1260 = *(void *)(v5211 + 632);
          sub_100045A84(*(void *)(v5211 + 720), v1254, &qword_10006A378);
          sub_100043DBC(v1259, 1LL, v1260);
          if (!v169)
          {
            uint64_t v1267 = *(void *)(v5211 + 712);
            uint64_t v1268 = *(void *)(v5211 + 688);
            uint64_t v82 = *(void *)(v5211 + 664);
            sub_100041358(*(void *)(v5211 + 720), &qword_10006A378);
            sub_100043024();
            sub_100045824(v82, v1267);
            sub_100045824(v1268, v82);
            uint64_t v1269 = (unsigned int *)&enum case for ToolSymbolIconStyle.tinted(_:);
LABEL_262:
            uint64_t v1280 = (uint64_t *)v1258[96];
            uint64_t v1281 = v1258[86];
            uint64_t v79 = v1258[85];
            uint64_t v86 = v1258[84];
            (*(void (**)(uint64_t, void, uint64_t))(v79 + 104))(v1281, *v1269, v86);
            uint64_t v1282 = (uint64_t)v1280 + *(int *)(sub_10000844C(&qword_10006A430) + 48);
            *uint64_t v1280 = v77;
            v1280[1] = v396;
            sub_10000F538(v1282, v1281, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v79 + 32));
            uint64_t v1283 = enum case for ToolIcon.symbol(_:);
            uint64_t v1284 = sub_1000432E8();
            sub_100043C08( (uint64_t)v1280,  v1283,  *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v1284 - 8) + 104LL));
            sub_1000457F4((uint64_t)v1280);
            goto LABEL_237;
          }

          sub_100041358(*(void *)(v5211 + 712), &qword_10006A378);
        }

        uint64_t v1261 = *(void *)(v5211 + 704);
        uint64_t v1262 = *(void *)(v5211 + 632);
        uint64_t v1263 = sub_100046C28();
        ToolSymbolIconColor.init(rawValue:)(v1263, v1264);
        sub_1000084E0(v1261, 1LL, v1262);
        uint64_t v1265 = sub_100044158();
        if (v169)
        {
          uint64_t v1266 = sub_100044A10();
          sub_100044EA4(v1266, &qword_10006A378);
        }

        else
        {
          sub_100045EBC(v1265);
        }

        uint64_t v1270 = *(void *)(v5211 + 696);
        uint64_t v1271 = *(void *)(v5211 + 632);
        sub_1000412F8(*(void *)(v5211 + 720), v1270, &qword_10006A378);
        uint64_t v1258 = (void *)v5211;
        sub_1000084E0(v1270, 1LL, v1271);
        uint64_t v1272 = *(void *)(v5211 + 696);
        uint64_t v1273 = sub_100044114();
        if (v169)
        {
          uint64_t v1274 = sub_100044F08();
          sub_100044EA4(v1274, &qword_10006A378);
          uint64_t v1275 = (void (*)(uint64_t))MEMORY[0x746E6974];
        }

        else
        {
          uint64_t v1275 = (void (*)(uint64_t))MEMORY[0x746E6974];
          MEMORY[0x746E6974](v1273, v1272);
        }

        uint64_t v1276 = *(void *)(v5211 + 688);
        uint64_t v1277 = *(void *)(v5211 + 656);
        uint64_t v82 = *(void *)(v5211 + 632);
        uint64_t v1278 = v1276 + *(int *)(sub_10000844C(&qword_10006A428) + 48);
        uint64_t v1279 = sub_100044174();
        v1275(v1279);
        ((void (*)(uint64_t, uint64_t, uint64_t))v1275)(v1278, v1277, v82);
        uint64_t v1269 = (unsigned int *)&enum case for ToolSymbolIconStyle.multicolor(_:);
        goto LABEL_262;
      }
    }

    else
    {
      *(_OWORD *)(v79 + 304) = 0u;
      *(_OWORD *)(v79 + 320) = 0u;
    }

    sub_100041358(v79 + 304, &qword_10006A420);
    uint64_t v1250 = v5211;
    uint64_t v1253 = v5166;
    goto LABEL_246;
  }

  uint64_t v5165 = *(void *)(v5211 + 1160);
  uint64_t v85 = *(void *)(v5211 + 1152);
  char v5190 = sub_100052268(v5199);
  uint64_t v86 = 0LL;
  unint64_t v5161 = 0x800000010005A6D0LL;
  uint64_t v5183 = v85;
  while (1)
  {
    if ((v5190 & 1) != 0)
    {
      uint64_t v87 = *(uint64_t (**)(void))(v85 + 16);
      ((void (*)(void, unint64_t, void))v87)( v75[154],  v5199 + ((*(unsigned __int8 *)(v85 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v85 + 80))
      + *(void *)(v85 + 72) * v86,
        v75[143]);
      goto LABEL_29;
    }

    uint64_t v88 = sub_100046774(v86, v5199, (uint64_t (*)(void))&type metadata accessor for ToolVisibilityFlag);
    if (v5165 != 8) {
      break;
    }
    uint64_t v89 = v88;
    uint64_t v90 = v75[154];
    uint64_t v91 = v75[143];
    v75[52] = v89;
    uint64_t v87 = *(uint64_t (**)(void))(v85 + 16);
    ((void (*)(uint64_t, uint64_t, uint64_t))v87)(v90, v5211 + 416, v91);
    sub_1000431C0();
LABEL_29:
    if (__OFADD__(v86, 1LL))
    {
      __break(1u);
      goto LABEL_231;
    }

    v5210 = (os_log_s *)(v86 + 1);
    uint64_t v92 = v75[152];
    uint64_t v93 = v75[151];
    uint64_t v94 = v75[143];
    sub_10004462C(*(uint64_t (**)(void))(v85 + 32));
    uint64_t v95 = sub_100047858();
    uint64_t v96 = v87(v95);
    static ToolVisibilityFlag.shortcuts.getter(v96);
    sub_100040370(&qword_10006A410, (uint64_t (*)(uint64_t))&type metadata accessor for ToolVisibilityFlag);
    uint64_t v74 = v97;
    uint64_t v82 = sub_100043D4C(v93, v92, v94);
    uint64_t v98 = *(void (**)(void, void))(v85 + 8);
    sub_100044AB8(v93);
    uint64_t v99 = v75[152];
    if ((v82 & 1) != 0)
    {
      uint64_t v82 = v75[72];
      v98(v75[152], v75[143]);
      id v100 = sub_100045EB4((id)v82, "visibleForUse:");
      if ((_DWORD)v100)
      {
        uint64_t v101 = v75[151];
        uint64_t v82 = v75[150];
        uint64_t v102 = v75[149];
        uint64_t v103 = v75;
        uint64_t v104 = v75[143];
        v5155 = (void *)v103[142];
        static ToolVisibilityFlag.shortcuts.getter(v100);
        ((void (*)(uint64_t, uint64_t, uint64_t))v87)(v101, v79, v104);
        uint64_t v105 = sub_100046C28();
        sub_1000471B8(v105, v106);
        uint64_t v107 = sub_100043D4C(v102, v82, v104);
        sub_10004518C(v107);
        if ((v108 & 1) != 0)
        {
          uint64_t v126 = v103[151];
          uint64_t v104 = v103[150];
          uint64_t v82 = v103[143];
          sub_100045EA4(v103[149]);
          sub_1000466E0(v74, v104);
          sub_1000466E0(v126, v104);
          dispatch thunk of SetAlgebra.formUnion(_:)(v126, v82, v79);
        }

        else
        {
          sub_1000477F8();
        }

        uint64_t v122 = v103;
        sub_1000456A0((_BYTE *)v103[141]);
        sub_100044AB8(v104);
        uint64_t v125 = (void *)(v5211 + 1200);
LABEL_46:
        uint64_t v77 = v5152;
        goto LABEL_47;
      }
    }

    else
    {
      sub_10004623C();
      static ToolVisibilityFlag.assistant.getter();
      char v109 = sub_100043D4C((uint64_t)v75, v99, v82);
      sub_100045EA4((uint64_t)v75);
      uint64_t v110 = *(void *)(v5211 + 1216);
      if ((v109 & 1) != 0)
      {
        uint64_t v111 = *(void **)(v5211 + 576);
        v98(*(void *)(v5211 + 1216), *(void *)(v5211 + 1144));
        uint64_t v112 = v111;
        uint64_t v75 = (void *)v5211;
        uint64_t v79 = v5205;
        if (sub_100045E08(v112, "visibleForUse:"))
        {
          uint64_t v113 = *(void *)(v5211 + 1208);
          uint64_t v114 = *(void *)(v5211 + 1184);
          uint64_t v82 = *(void *)(v5211 + 1176);
          uint64_t v115 = *(void *)(v5211 + 1144);
          v5155 = *(void **)(v5211 + 1120);
          static ToolVisibilityFlag.assistant.getter();
          ((void (*)(uint64_t, uint64_t, uint64_t))v87)(v113, v5205, v115);
          sub_1000471B8(v114, v115);
          uint64_t v116 = sub_100043D4C(v82, v114, v115);
          sub_10004518C(v116);
          if ((v117 & 1) != 0)
          {
            uint64_t v127 = *(void *)(v5211 + 1208);
            uint64_t v128 = *(void *)(v5211 + 1184);
            uint64_t v82 = *(void *)(v5211 + 1144);
            sub_100045EA4(*(void *)(v5211 + 1176));
            sub_1000466E0(v74, v128);
            sub_1000466E0(v127, v128);
            dispatch thunk of SetAlgebra.formUnion(_:)(v127, v82, v5205);
          }

          else
          {
            sub_1000477F8();
          }

          uint64_t v122 = (void *)v5211;
          sub_1000456A0(*(_BYTE **)(v5211 + 1128));
          sub_100044AB8(v5211);
          uint64_t v125 = (void *)(v5211 + 1184);
          goto LABEL_46;
        }
      }

      else
      {
        sub_10004623C();
        static ToolVisibilityFlag.approved.getter();
        char v118 = sub_100043D4C((uint64_t)v75, v110, v82);
        sub_100045EA4((uint64_t)v75);
        uint64_t v74 = *(void *)(v5211 + 1144);
        if ((v118 & 1) == 0)
        {
          sub_100046054();
          uint64_t v268 = sub_100045D64();
          sub_1000456E8(v268, v269);
          sub_100044C44();
          sub_100044CC4(v270);
          sub_100040370( &qword_10006A418,  (uint64_t (*)(uint64_t))&type metadata accessor for ToolVisibilityFlag);
          v5213._countAndFlagsBits = sub_100045F4C(v271);
          sub_100044AE0(v5213);
          sub_100043174();
          sub_100045CA0();
          sub_100043B6C();
          goto LABEL_129;
        }

        uint64_t v119 = *(void *)(v5211 + 1208);
        uint64_t v120 = *(void *)(v5211 + 1168);
        sub_1000460D0(*(void *)(v5211 + 1216));
        uint64_t v79 = v5205;
        ((void (*)(uint64_t, uint64_t, uint64_t))v87)(v119, v5205, v74);
        sub_100045D50();
        uint64_t v82 = sub_1000460D8(v120);
        uint64_t v121 = v120;
        uint64_t v75 = (void *)v5211;
        sub_1000460D0(v121);
        sub_1000460D0(v119);
        if ((v82 & 1) != 0 && [*(id *)(v5211 + 576) isApprovedForPublicShortcutsDrawer])
        {
          uint64_t v74 = *(void *)(v5211 + 1168);
          uint64_t v122 = (void *)v5211;
          static ToolVisibilityFlag.approved.getter();
          uint64_t v123 = (char *)sub_100044180();
          sub_100034A90(v123, v124);
          sub_10004497C(v74);
          uint64_t v125 = (void *)(v5211 + 1208);
LABEL_47:
          v98(*v125, v122[143]);
          uint64_t v75 = v122;
          uint64_t v79 = v5205;
        }
      }
    }

    v98(v75[153], v75[143]);
    ++v86;
    sub_1000465F0();
    uint64_t v85 = v5183;
    if (v169) {
      goto LABEL_50;
    }
  }

  __break(1u);
LABEL_234:
  sub_100042E4C();
LABEL_235:
  sub_100044430();
  sub_100044004();
  sub_1000432E8();
  uint64_t v390 = sub_10004403C();
LABEL_236:
  sub_10000848C(v390, v391, v392, v393);
LABEL_237:
  uint64_t v5193 = *(void *)(v79 + 1872);
  uint64_t v5197 = *(void *)(v79 + 1672);
  uint64_t v5202 = *(void *)(v79 + 2032);
  uint64_t v5167 = *(void *)(v79 + 1552);
  uint64_t v403 = *(void *)(v79 + 1320);
  uint64_t v5173 = *(void *)(v79 + 1296);
  v5181 = *(unint64_t **)(v79 + 1256);
  uint64_t v404 = *(void *)(v79 + 768);
  uint64_t v5188 = *(void *)(v79 + 616);
  char v405 = *(_BYTE *)(v79 + 2080);
  uint64_t v406 = *(void *)(v79 + 608);
  uint64_t v407 = *(void *)(v79 + 600);
  uint64_t v5163 = *(void *)(v79 + 592);
  sub_1000462FC();
  id v409 = sub_100046088(v408, "identifier");
  sub_1000453AC((uint64_t)v409);
  sub_100046F1C();
  uint64_t v410 = sub_100044B10();
  *(void *)(v410 + 16) = v86;
  *(void *)(v410 + 24) = v403;
  *(void *)(v410 + 32) = v407;
  *(void *)(v410 + 40) = v406;
  *(_BYTE *)(v410 + 48) = v405 & 1;
  *(void *)(v410 + 56) = v5167;
  *(void *)(v410 + 64) = v404;
  *(void *)(v410 + 72) = v5155;
  *(void *)(v410 + 80) = v5173;
  *(void *)(v410 + 88) = v5210;
  *(void *)(v410 + 96) = v5181;
  *(void *)(v410 + 104) = v5193;
  *(void *)(v410 + 112) = v5163;
  *(void *)(v410 + 120) = v5188;
  *(void *)(v410 + 128) = v5208;
  sub_100043B58(v410, v5197);
  ToolDatabase.Rollbackable.inSavepoint<A>(name:work:)(v82, v77, sub_100040F80, v410);
  sub_100043680();
  if (v5202)
  {
    uint64_t v412 = *(void *)(v79 + 1552);
    uint64_t v413 = *(void *)(v79 + 1520);
    uint64_t v414 = *(void *)(v79 + 1312);
    uint64_t v5174 = *(void *)(v79 + 1256);
    uint64_t v415 = *(void *)(v79 + 1248);
    uint64_t v5168 = *(void *)(v79 + 1240);
    sub_100043820(v411);
    sub_1000447AC();
    sub_100044830();
    sub_1000445E4();
    uint64_t v416 = sub_10000F484();
    sub_1000431B8(v416, &qword_10006A388);
    sub_100043AEC(*(uint64_t (**)(uint64_t, uint64_t))(v414 + 8));
    sub_100043FD4(v412, *(uint64_t (**)(uint64_t, uint64_t))(v413 + 8));
    sub_100043B64();
    sub_1000435DC();
    sub_100008D58();
    (*(void (**)(uint64_t, uint64_t))(v415 + 8))(v5174, v5168);
    sub_100043A38();
    sub_100045534();
    sub_100043B04();
    uint64_t v2980 = *(void *)(v79 + 1504);
    uint64_t v3075 = *(void *)(v79 + 1496);
    uint64_t v3167 = *(void *)(v79 + 1488);
    uint64_t v3256 = *(void *)(v79 + 1464);
    uint64_t v3345 = *(void *)(v79 + 1456);
    uint64_t v3430 = *(void *)(v79 + 1448);
    uint64_t v3515 = *(void *)(v79 + 1440);
    uint64_t v3596 = *(void *)(v79 + 1408);
    uint64_t v3677 = *(void *)(v79 + 1400);
    uint64_t v3755 = *(void *)(v79 + 1376);
    uint64_t v3830 = *(void *)(v79 + 1368);
    uint64_t v3905 = *(void *)(v79 + 1344);
    uint64_t v3976 = *(void *)(v79 + 1336);
    uint64_t v4047 = *(void *)(v79 + 1320);
    uint64_t v4114 = *(void *)(v79 + 1296);
    uint64_t v4181 = *(void *)(v79 + 1288);
    uint64_t v4244 = *(void *)(v79 + 1280);
    uint64_t v4307 = *(void *)(v79 + 1256);
    uint64_t v4366 = *(void *)(v79 + 1232);
    uint64_t v4425 = *(void *)(v79 + 1224);
    uint64_t v4480 = *(void *)(v79 + 1216);
    uint64_t v4535 = *(void *)(v79 + 1208);
    uint64_t v4587 = *(void *)(v79 + 1200);
    uint64_t v4636 = *(void *)(v79 + 1192);
    uint64_t v4685 = *(void *)(v79 + 1184);
    uint64_t v4730 = *(void *)(v79 + 1176);
    uint64_t v4774 = *(void *)(v79 + 1168);
    uint64_t v4817 = *(void *)(v79 + 1136);
    uint64_t v4856 = *(void *)(v79 + 1128);
    uint64_t v4895 = *(void *)(v79 + 1120);
    uint64_t v4930 = *(void *)(v79 + 1104);
    uint64_t v4964 = *(void *)(v79 + 1096);
    uint64_t v4996 = *(void *)(v79 + 1072);
    uint64_t v5026 = *(void *)(v79 + 1064);
    uint64_t v5054 = *(void *)(v79 + 1040);
    uint64_t v5080 = *(void *)(v79 + 1032);
    uint64_t v5104 = *(void *)(v79 + 1000);
    uint64_t v5126 = *(void *)(v79 + 976);
    swift_task_dealloc(*(void *)(v79 + 1632));
    sub_10000F41C();
    sub_10000F4A0();
    sub_10000F3FC();
    sub_10000F484();
    sub_10000F338();
    sub_10000F404();
    sub_10000F4A8();
    sub_10000F4EC();
    uint64_t v417 = sub_10000F3F4();
    uint64_t v425 = sub_1000436F0( v417,  v418,  v419,  v420,  v421,  v422,  v423,  v424,  v1285,  v1387,  v1489,  v1591,  v1693,  v1795,  v1896,  v1997,  v2098,  v2199,  v2300,  v2400,  v2499,  v2597,  v2694,  v2791,  v2886,  v2980);
    uint64_t v433 = sub_1000436E8( v425,  v426,  v427,  v428,  v429,  v430,  v431,  v432,  v1286,  v1388,  v1490,  v1592,  v1694,  v1796,  v1897,  v1998,  v2099,  v2200,  v2301,  v2401,  v2500,  v2598,  v2695,  v2792,  v2887,  v2981,  v3075);
    uint64_t v441 = sub_1000436C4( v433,  v434,  v435,  v436,  v437,  v438,  v439,  v440,  v1287,  v1389,  v1491,  v1593,  v1695,  v1797,  v1898,  v1999,  v2100,  v2201,  v2302,  v2402,  v2501,  v2599,  v2696,  v2793,  v2888,  v2982,  v3076,  v3167);
    uint64_t v449 = sub_100043624( v441,  v442,  v443,  v444,  v445,  v446,  v447,  v448,  v1288,  v1390,  v1492,  v1594,  v1696,  v1798,  v1899,  v2000,  v2101,  v2202,  v2303,  v2403,  v2502,  v2600,  v2697,  v2794,  v2889,  v2983,  v3077,  v3168,  v3256);
    uint64_t v457 = sub_100043658( v449,  v450,  v451,  v452,  v453,  v454,  v455,  v456,  v1289,  v1391,  v1493,  v1595,  v1697,  v1799,  v1900,  v2001,  v2102,  v2203,  v2304,  v2404,  v2503,  v2601,  v2698,  v2795,  v2890,  v2984,  v3078,  v3169,  v3257,  v3345);
    uint64_t v465 = sub_100043660( v457,  v458,  v459,  v460,  v461,  v462,  v463,  v464,  v1290,  v1392,  v1494,  v1596,  v1698,  v1800,  v1901,  v2002,  v2103,  v2204,  v2305,  v2405,  v2504,  v2602,  v2699,  v2796,  v2891,  v2985,  v3079,  v3170,  v3258,  v3346,  v3430);
    uint64_t v473 = sub_10004361C( v465,  v466,  v467,  v468,  v469,  v470,  v471,  v472,  v1291,  v1393,  v1495,  v1597,  v1699,  v1801,  v1902,  v2003,  v2104,  v2205,  v2306,  v2406,  v2505,  v2603,  v2700,  v2797,  v2892,  v2986,  v3080,  v3171,  v3259,  v3347,  v3431,  v3515);
    uint64_t v481 = sub_100043614( v473,  v474,  v475,  v476,  v477,  v478,  v479,  v480,  v1292,  v1394,  v1496,  v1598,  v1700,  v1802,  v1903,  v2004,  v2105,  v2206,  v2307,  v2407,  v2506,  v2604,  v2701,  v2798,  v2893,  v2987,  v3081,  v3172,  v3260,  v3348,  v3432,  v3516,  v3596);
    uint64_t v489 = sub_100043A48( v481,  v482,  v483,  v484,  v485,  v486,  v487,  v488,  v1293,  v1395,  v1497,  v1599,  v1701,  v1803,  v1904,  v2005,  v2106,  v2207,  v2308,  v2408,  v2507,  v2605,  v2702,  v2799,  v2894,  v2988,  v3082,  v3173,  v3261,  v3349,  v3433,  v3517,  v3597,  v3677);
    uint64_t v497 = sub_100043A40( v489,  v490,  v491,  v492,  v493,  v494,  v495,  v496,  v1294,  v1396,  v1498,  v1600,  v1702,  v1804,  v1905,  v2006,  v2107,  v2208,  v2309,  v2409,  v2508,  v2606,  v2703,  v2800,  v2895,  v2989,  v3083,  v3174,  v3262,  v3350,  v3434,  v3518,  v3598,  v3678,  v3755);
    uint64_t v505 = sub_1000437F8( v497,  v498,  v499,  v500,  v501,  v502,  v503,  v504,  v1295,  v1397,  v1499,  v1601,  v1703,  v1805,  v1906,  v2007,  v2108,  v2209,  v2310,  v2410,  v2509,  v2607,  v2704,  v2801,  v2896,  v2990,  v3084,  v3175,  v3263,  v3351,  v3435,  v3519,  v3599,  v3679,  v3756,  v3830);
    uint64_t v513 = sub_10004384C( v505,  v506,  v507,  v508,  v509,  v510,  v511,  v512,  v1296,  v1398,  v1500,  v1602,  v1704,  v1806,  v1907,  v2008,  v2109,  v2210,  v2311,  v2411,  v2510,  v2608,  v2705,  v2802,  v2897,  v2991,  v3085,  v3176,  v3264,  v3352,  v3436,  v3520,  v3600,  v3680,  v3757,  v3831,  v3905);
    uint64_t v521 = sub_100043A30( v513,  v514,  v515,  v516,  v517,  v518,  v519,  v520,  v1297,  v1399,  v1501,  v1603,  v1705,  v1807,  v1908,  v2009,  v2110,  v2211,  v2312,  v2412,  v2511,  v2609,  v2706,  v2803,  v2898,  v2992,  v3086,  v3177,  v3265,  v3353,  v3437,  v3521,  v3601,  v3681,  v3758,  v3832,  v3906,  v3976);
    uint64_t v529 = sub_100043A28( v521,  v522,  v523,  v524,  v525,  v526,  v527,  v528,  v1298,  v1400,  v1502,  v1604,  v1706,  v1808,  v1909,  v2010,  v2111,  v2212,  v2313,  v2413,  v2512,  v2610,  v2707,  v2804,  v2899,  v2993,  v3087,  v3178,  v3266,  v3354,  v3438,  v3522,  v3602,  v3682,  v3759,  v3833,  v3907,  v3977,  v4047);
    uint64_t v537 = sub_100043A20( v529,  v530,  v531,  v532,  v533,  v534,  v535,  v536,  v1299,  v1401,  v1503,  v1605,  v1707,  v1809,  v1910,  v2011,  v2112,  v2213,  v2314,  v2414,  v2513,  v2611,  v2708,  v2805,  v2900,  v2994,  v3088,  v3179,  v3267,  v3355,  v3439,  v3523,  v3603,  v3683,  v3760,  v3834,  v3908,  v3978,  v4048,  v4114);
    uint64_t v545 = sub_100043A18( v537,  v538,  v539,  v540,  v541,  v542,  v543,  v544,  v1300,  v1402,  v1504,  v1606,  v1708,  v1810,  v1911,  v2012,  v2113,  v2214,  v2315,  v2415,  v2514,  v2612,  v2709,  v2806,  v2901,  v2995,  v3089,  v3180,  v3268,  v3356,  v3440,  v3524,  v3604,  v3684,  v3761,  v3835,  v3909,  v3979,  v4049,  v4115,  v4181);
    uint64_t v553 = sub_100043A10( v545,  v546,  v547,  v548,  v549,  v550,  v551,  v552,  v1301,  v1403,  v1505,  v1607,  v1709,  v1811,  v1912,  v2013,  v2114,  v2215,  v2316,  v2416,  v2515,  v2613,  v2710,  v2807,  v2902,  v2996,  v3090,  v3181,  v3269,  v3357,  v3441,  v3525,  v3605,  v3685,  v3762,  v3836,  v3910,  v3980,  v4050,  v4116,  v4182,  v4244);
    uint64_t v561 = sub_100043A08( v553,  v554,  v555,  v556,  v557,  v558,  v559,  v560,  v1302,  v1404,  v1506,  v1608,  v1710,  v1812,  v1913,  v2014,  v2115,  v2216,  v2317,  v2417,  v2516,  v2614,  v2711,  v2808,  v2903,  v2997,  v3091,  v3182,  v3270,  v3358,  v3442,  v3526,  v3606,  v3686,  v3763,  v3837,  v3911,  v3981,  v4051,  v4117,  v4183,  v4245,  v4307);
    uint64_t v569 = sub_100043A00( v561,  v562,  v563,  v564,  v565,  v566,  v567,  v568,  v1303,  v1405,  v1507,  v1609,  v1711,  v1813,  v1914,  v2015,  v2116,  v2217,  v2318,  v2418,  v2517,  v2615,  v2712,  v2809,  v2904,  v2998,  v3092,  v3183,  v3271,  v3359,  v3443,  v3527,  v3607,  v3687,  v3764,  v3838,  v3912,  v3982,  v4052,  v4118,  v4184,  v4246,  v4308,  v4366);
    uint64_t v577 = sub_1000439F8( v569,  v570,  v571,  v572,  v573,  v574,  v575,  v576,  v1304,  v1406,  v1508,  v1610,  v1712,  v1814,  v1915,  v2016,  v2117,  v2218,  v2319,  v2419,  v2518,  v2616,  v2713,  v2810,  v2905,  v2999,  v3093,  v3184,  v3272,  v3360,  v3444,  v3528,  v3608,  v3688,  v3765,  v3839,  v3913,  v3983,  v4053,  v4119,  v4185,  v4247,  v4309,  v4367,  v4425);
    uint64_t v585 = sub_1000439F0( v577,  v578,  v579,  v580,  v581,  v582,  v583,  v584,  v1305,  v1407,  v1509,  v1611,  v1713,  v1815,  v1916,  v2017,  v2118,  v2219,  v2320,  v2420,  v2519,  v2617,  v2714,  v2811,  v2906,  v3000,  v3094,  v3185,  v3273,  v3361,  v3445,  v3529,  v3609,  v3689,  v3766,  v3840,  v3914,  v3984,  v4054,  v4120,  v4186,  v4248,  v4310,  v4368,  v4426,  v4480);
    uint64_t v593 = sub_1000439E8( v585,  v586,  v587,  v588,  v589,  v590,  v591,  v592,  v1306,  v1408,  v1510,  v1612,  v1714,  v1816,  v1917,  v2018,  v2119,  v2220,  v2321,  v2421,  v2520,  v2618,  v2715,  v2812,  v2907,  v3001,  v3095,  v3186,  v3274,  v3362,  v3446,  v3530,  v3610,  v3690,  v3767,  v3841,  v3915,  v3985,  v4055,  v4121,  v4187,  v4249,  v4311,  v4369,  v4427,  v4481,  v4535);
    uint64_t v601 = sub_1000439E0( v593,  v594,  v595,  v596,  v597,  v598,  v599,  v600,  v1307,  v1409,  v1511,  v1613,  v1715,  v1817,  v1918,  v2019,  v2120,  v2221,  v2322,  v2422,  v2521,  v2619,  v2716,  v2813,  v2908,  v3002,  v3096,  v3187,  v3275,  v3363,  v3447,  v3531,  v3611,  v3691,  v3768,  v3842,  v3916,  v3986,  v4056,  v4122,  v4188,  v4250,  v4312,  v4370,  v4428,  v4482,  v4536,  v4587);
    uint64_t v609 = sub_1000439D8( v601,  v602,  v603,  v604,  v605,  v606,  v607,  v608,  v1308,  v1410,  v1512,  v1614,  v1716,  v1818,  v1919,  v2020,  v2121,  v2222,  v2323,  v2423,  v2522,  v2620,  v2717,  v2814,  v2909,  v3003,  v3097,  v3188,  v3276,  v3364,  v3448,  v3532,  v3612,  v3692,  v3769,  v3843,  v3917,  v3987,  v4057,  v4123,  v4189,  v4251,  v4313,  v4371,  v4429,  v4483,  v4537,  v4588,  v4636);
    uint64_t v617 = sub_1000439D0( v609,  v610,  v611,  v612,  v613,  v614,  v615,  v616,  v1309,  v1411,  v1513,  v1615,  v1717,  v1819,  v1920,  v2021,  v2122,  v2223,  v2324,  v2424,  v2523,  v2621,  v2718,  v2815,  v2910,  v3004,  v3098,  v3189,  v3277,  v3365,  v3449,  v3533,  v3613,  v3693,  v3770,  v3844,  v3918,  v3988,  v4058,  v4124,  v4190,  v4252,  v4314,  v4372,  v4430,  v4484,  v4538,  v4589,  v4637,
             v4685);
    uint64_t v625 = sub_1000439C8( v617,  v618,  v619,  v620,  v621,  v622,  v623,  v624,  v1310,  v1412,  v1514,  v1616,  v1718,  v1820,  v1921,  v2022,  v2123,  v2224,  v2325,  v2425,  v2524,  v2622,  v2719,  v2816,  v2911,  v3005,  v3099,  v3190,  v3278,  v3366,  v3450,  v3534,  v3614,  v3694,  v3771,  v3845,  v3919,  v3989,  v4059,  v4125,  v4191,  v4253,  v4315,  v4373,  v4431,  v4485,  v4539,  v4590,  v4638,
             v4686,
             v4730);
    uint64_t v633 = sub_1000439C0( v625,  v626,  v627,  v628,  v629,  v630,  v631,  v632,  v1311,  v1413,  v1515,  v1617,  v1719,  v1821,  v1922,  v2023,  v2124,  v2225,  v2326,  v2426,  v2525,  v2623,  v2720,  v2817,  v2912,  v3006,  v3100,  v3191,  v3279,  v3367,  v3451,  v3535,  v3615,  v3695,  v3772,  v3846,  v3920,  v3990,  v4060,  v4126,  v4192,  v4254,  v4316,  v4374,  v4432,  v4486,  v4540,  v4591,  v4639,
             v4687,
             v4731,
             v4774);
    uint64_t v641 = sub_1000439B8( v633,  v634,  v635,  v636,  v637,  v638,  v639,  v640,  v1312,  v1414,  v1516,  v1618,  v1720,  v1822,  v1923,  v2024,  v2125,  v2226,  v2327,  v2427,  v2526,  v2624,  v2721,  v2818,  v2913,  v3007,  v3101,  v3192,  v3280,  v3368,  v3452,  v3536,  v3616,  v3696,  v3773,  v3847,  v3921,  v3991,  v4061,  v4127,  v4193,  v4255,  v4317,  v4375,  v4433,  v4487,  v4541,  v4592,  v4640,
             v4688,
             v4732,
             v4775,
             v4817);
    uint64_t v649 = sub_1000439B0( v641,  v642,  v643,  v644,  v645,  v646,  v647,  v648,  v1313,  v1415,  v1517,  v1619,  v1721,  v1823,  v1924,  v2025,  v2126,  v2227,  v2328,  v2428,  v2527,  v2625,  v2722,  v2819,  v2914,  v3008,  v3102,  v3193,  v3281,  v3369,  v3453,  v3537,  v3617,  v3697,  v3774,  v3848,  v3922,  v3992,  v4062,  v4128,  v4194,  v4256,  v4318,  v4376,  v4434,  v4488,  v4542,  v4593,  v4641,
             v4689,
             v4733,
             v4776,
             v4818,
             v4856);
    uint64_t v657 = sub_1000439A8( v649,  v650,  v651,  v652,  v653,  v654,  v655,  v656,  v1314,  v1416,  v1518,  v1620,  v1722,  v1824,  v1925,  v2026,  v2127,  v2228,  v2329,  v2429,  v2528,  v2626,  v2723,  v2820,  v2915,  v3009,  v3103,  v3194,  v3282,  v3370,  v3454,  v3538,  v3618,  v3698,  v3775,  v3849,  v3923,  v3993,  v4063,  v4129,  v4195,  v4257,  v4319,  v4377,  v4435,  v4489,  v4543,  v4594,  v4642,
             v4690,
             v4734,
             v4777,
             v4819,
             v4857,
             v4895);
    uint64_t v665 = sub_1000439A0( v657,  v658,  v659,  v660,  v661,  v662,  v663,  v664,  v1315,  v1417,  v1519,  v1621,  v1723,  v1825,  v1926,  v2027,  v2128,  v2229,  v2330,  v2430,  v2529,  v2627,  v2724,  v2821,  v2916,  v3010,  v3104,  v3195,  v3283,  v3371,  v3455,  v3539,  v3619,  v3699,  v3776,  v3850,  v3924,  v3994,  v4064,  v4130,  v4196,  v4258,  v4320,  v4378,  v4436,  v4490,  v4544,  v4595,  v4643,
             v4691,
             v4735,
             v4778,
             v4820,
             v4858,
             v4896,
             v4930);
    uint64_t v673 = sub_100043998( v665,  v666,  v667,  v668,  v669,  v670,  v671,  v672,  v1316,  v1418,  v1520,  v1622,  v1724,  v1826,  v1927,  v2028,  v2129,  v2230,  v2331,  v2431,  v2530,  v2628,  v2725,  v2822,  v2917,  v3011,  v3105,  v3196,  v3284,  v3372,  v3456,  v3540,  v3620,  v3700,  v3777,  v3851,  v3925,  v3995,  v4065,  v4131,  v4197,  v4259,  v4321,  v4379,  v4437,  v4491,  v4545,  v4596,  v4644,
             v4692,
             v4736,
             v4779,
             v4821,
             v4859,
             v4897,
             v4931,
             v4964);
    uint64_t v681 = sub_100043990( v673,  v674,  v675,  v676,  v677,  v678,  v679,  v680,  v1317,  v1419,  v1521,  v1623,  v1725,  v1827,  v1928,  v2029,  v2130,  v2231,  v2332,  v2432,  v2531,  v2629,  v2726,  v2823,  v2918,  v3012,  v3106,  v3197,  v3285,  v3373,  v3457,  v3541,  v3621,  v3701,  v3778,  v3852,  v3926,  v3996,  v4066,  v4132,  v4198,  v4260,  v4322,  v4380,  v4438,  v4492,  v4546,  v4597,  v4645,
             v4693,
             v4737,
             v4780,
             v4822,
             v4860,
             v4898,
             v4932,
             v4965,
             v4996);
    uint64_t v689 = sub_100043988( v681,  v682,  v683,  v684,  v685,  v686,  v687,  v688,  v1318,  v1420,  v1522,  v1624,  v1726,  v1828,  v1929,  v2030,  v2131,  v2232,  v2333,  v2433,  v2532,  v2630,  v2727,  v2824,  v2919,  v3013,  v3107,  v3198,  v3286,  v3374,  v3458,  v3542,  v3622,  v3702,  v3779,  v3853,  v3927,  v3997,  v4067,  v4133,  v4199,  v4261,  v4323,  v4381,  v4439,  v4493,  v4547,  v4598,  v4646,
             v4694,
             v4738,
             v4781,
             v4823,
             v4861,
             v4899,
             v4933,
             v4966,
             v4997,
             v5026);
    uint64_t v697 = sub_100043980( v689,  v690,  v691,  v692,  v693,  v694,  v695,  v696,  v1319,  v1421,  v1523,  v1625,  v1727,  v1829,  v1930,  v2031,  v2132,  v2233,  v2334,  v2434,  v2533,  v2631,  v2728,  v2825,  v2920,  v3014,  v3108,  v3199,  v3287,  v3375,  v3459,  v3543,  v3623,  v3703,  v3780,  v3854,  v3928,  v3998,  v4068,  v4134,  v4200,  v4262,  v4324,  v4382,  v4440,  v4494,  v4548,  v4599,  v4647,
             v4695,
             v4739,
             v4782,
             v4824,
             v4862,
             v4900,
             v4934,
             v4967,
             v4998,
             v5027,
             v5054);
    uint64_t v705 = sub_100043978( v697,  v698,  v699,  v700,  v701,  v702,  v703,  v704,  v1320,  v1422,  v1524,  v1626,  v1728,  v1830,  v1931,  v2032,  v2133,  v2234,  v2335,  v2435,  v2534,  v2632,  v2729,  v2826,  v2921,  v3015,  v3109,  v3200,  v3288,  v3376,  v3460,  v3544,  v3624,  v3704,  v3781,  v3855,  v3929,  v3999,  v4069,  v4135,  v4201,  v4263,  v4325,  v4383,  v4441,  v4495,  v4549,  v4600,  v4648,
             v4696,
             v4740,
             v4783,
             v4825,
             v4863,
             v4901,
             v4935,
             v4968,
             v4999,
             v5028,
             v5055,
             v5080);
    uint64_t v713 = sub_100043970( v705,  v706,  v707,  v708,  v709,  v710,  v711,  v712,  v1321,  v1423,  v1525,  v1627,  v1729,  v1831,  v1932,  v2033,  v2134,  v2235,  v2336,  v2436,  v2535,  v2633,  v2730,  v2827,  v2922,  v3016,  v3110,  v3201,  v3289,  v3377,  v3461,  v3545,  v3625,  v3705,  v3782,  v3856,  v3930,  v4000,  v4070,  v4136,  v4202,  v4264,  v4326,  v4384,  v4442,  v4496,  v4550,  v4601,  v4649,
             v4697,
             v4741,
             v4784,
             v4826,
             v4864,
             v4902,
             v4936,
             v4969,
             v5000,
             v5029,
             v5056,
             v5081,
             v5104);
    uint64_t v721 = sub_100043968( v713,  v714,  v715,  v716,  v717,  v718,  v719,  v720,  v1322,  v1424,  v1526,  v1628,  v1730,  v1832,  v1933,  v2034,  v2135,  v2236,  v2337,  v2437,  v2536,  v2634,  v2731,  v2828,  v2923,  v3017,  v3111,  v3202,  v3290,  v3378,  v3462,  v3546,  v3626,  v3706,  v3783,  v3857,  v3931,  v4001,  v4071,  v4137,  v4203,  v4265,  v4327,  v4385,  v4443,  v4497,  v4551,  v4602,  v4650,
             v4698,
             v4742,
             v4785,
             v4827,
             v4865,
             v4903,
             v4937,
             v4970,
             v5001,
             v5030,
             v5057,
             v5082,
             v5105,
             v5126);
    uint64_t v729 = sub_100043960( v721,  v722,  v723,  v724,  v725,  v726,  v727,  v728,  v1323,  v1425,  v1527,  v1629,  v1731,  v1833,  v1934,  v2035,  v2136,  v2237,  v2338,  v2438,  v2537,  v2635,  v2732,  v2829,  v2924,  v3018,  v3112,  v3203,  v3291,  v3379,  v3463,  v3547,  v3627,  v3707,  v3784,  v3858,  v3932,  v4002,  v4072,  v4138,  v4204,  v4266,  v4328,  v4386,  v4444,  v4498,  v4552,  v4603,  v4651,
             v4699,
             v4743,
             v4786,
             v4828,
             v4866,
             v4904,
             v4938,
             v4971,
             v5002,
             v5031,
             v5058,
             v5083,
             v5106,
             v5127);
    uint64_t v737 = sub_100043958( v729,  v730,  v731,  v732,  v733,  v734,  v735,  v736,  v1324,  v1426,  v1528,  v1630,  v1732,  v1834,  v1935,  v2036,  v2137,  v2238,  v2339,  v2439,  v2538,  v2636,  v2733,  v2830,  v2925,  v3019,  v3113,  v3204,  v3292,  v3380,  v3464,  v3548,  v3628,  v3708,  v3785,  v3859,  v3933,  v4003,  v4073,  v4139,  v4205,  v4267,  v4329,  v4387,  v4445,  v4499,  v4553,  v4604,  v4652,
             v4700,
             v4744,
             v4787,
             v4829,
             v4867,
             v4905,
             v4939,
             v4972,
             v5003,
             v5032,
             v5059,
             v5084,
             v5107,
             v5128);
    uint64_t v745 = sub_100043950( v737,  v738,  v739,  v740,  v741,  v742,  v743,  v744,  v1325,  v1427,  v1529,  v1631,  v1733,  v1835,  v1936,  v2037,  v2138,  v2239,  v2340,  v2440,  v2539,  v2637,  v2734,  v2831,  v2926,  v3020,  v3114,  v3205,  v3293,  v3381,  v3465,  v3549,  v3629,  v3709,  v3786,  v3860,  v3934,  v4004,  v4074,  v4140,  v4206,  v4268,  v4330,  v4388,  v4446,  v4500,  v4554,  v4605,  v4653,
             v4701,
             v4745,
             v4788,
             v4830,
             v4868,
             v4906,
             v4940,
             v4973,
             v5004,
             v5033,
             v5060,
             v5085,
             v5108,
             v5129);
    uint64_t v753 = sub_100043948( v745,  v746,  v747,  v748,  v749,  v750,  v751,  v752,  v1326,  v1428,  v1530,  v1632,  v1734,  v1836,  v1937,  v2038,  v2139,  v2240,  v2341,  v2441,  v2540,  v2638,  v2735,  v2832,  v2927,  v3021,  v3115,  v3206,  v3294,  v3382,  v3466,  v3550,  v3630,  v3710,  v3787,  v3861,  v3935,  v4005,  v4075,  v4141,  v4207,  v4269,  v4331,  v4389,  v4447,  v4501,  v4555,  v4606,  v4654,
             v4702,
             v4746,
             v4789,
             v4831,
             v4869,
             v4907,
             v4941,
             v4974,
             v5005,
             v5034,
             v5061,
             v5086,
             v5109,
             v5130);
    uint64_t v761 = sub_100043940( v753,  v754,  v755,  v756,  v757,  v758,  v759,  v760,  v1327,  v1429,  v1531,  v1633,  v1735,  v1837,  v1938,  v2039,  v2140,  v2241,  v2342,  v2442,  v2541,  v2639,  v2736,  v2833,  v2928,  v3022,  v3116,  v3207,  v3295,  v3383,  v3467,  v3551,  v3631,  v3711,  v3788,  v3862,  v3936,  v4006,  v4076,  v4142,  v4208,  v4270,  v4332,  v4390,  v4448,  v4502,  v4556,  v4607,  v4655,
             v4703,
             v4747,
             v4790,
             v4832,
             v4870,
             v4908,
             v4942,
             v4975,
             v5006,
             v5035,
             v5062,
             v5087,
             v5110,
             v5131);
    uint64_t v769 = sub_100043E48( v761,  v762,  v763,  v764,  v765,  v766,  v767,  v768,  v1328,  v1430,  v1532,  v1634,  v1736,  v1838,  v1939,  v2040,  v2141,  v2242,  v2343,  v2443,  v2542,  v2640,  v2737,  v2834,  v2929,  v3023,  v3117,  v3208,  v3296,  v3384,  v3468,  v3552,  v3632,  v3712,  v3789,  v3863,  v3937,  v4007,  v4077,  v4143,  v4209,  v4271,  v4333,  v4391,  v4449,  v4503,  v4557,  v4608,  v4656,
             v4704,
             v4748,
             v4791,
             v4833,
             v4871,
             v4909,
             v4943,
             v4976,
             v5007,
             v5036,
             v5063,
             v5088,
             v5111,
             v5132);
    uint64_t v777 = sub_100043E40( v769,  v770,  v771,  v772,  v773,  v774,  v775,  v776,  v1329,  v1431,  v1533,  v1635,  v1737,  v1839,  v1940,  v2041,  v2142,  v2243,  v2344,  v2444,  v2543,  v2641,  v2738,  v2835,  v2930,  v3024,  v3118,  v3209,  v3297,  v3385,  v3469,  v3553,  v3633,  v3713,  v3790,  v3864,  v3938,  v4008,  v4078,  v4144,  v4210,  v4272,  v4334,  v4392,  v4450,  v4504,  v4558,  v4609,  v4657,
             v4705,
             v4749,
             v4792,
             v4834,
             v4872,
             v4910,
             v4944,
             v4977,
             v5008,
             v5037,
             v5064,
             v5089,
             v5112,
             v5133);
    uint64_t v785 = sub_100043E38( v777,  v778,  v779,  v780,  v781,  v782,  v783,  v784,  v1330,  v1432,  v1534,  v1636,  v1738,  v1840,  v1941,  v2042,  v2143,  v2244,  v2345,  v2445,  v2544,  v2642,  v2739,  v2836,  v2931,  v3025,  v3119,  v3210,  v3298,  v3386,  v3470,  v3554,  v3634,  v3714,  v3791,  v3865,  v3939,  v4009,  v4079,  v4145,  v4211,  v4273,  v4335,  v4393,  v4451,  v4505,  v4559,  v4610,  v4658,
             v4706,
             v4750,
             v4793,
             v4835,
             v4873,
             v4911,
             v4945,
             v4978,
             v5009,
             v5038,
             v5065,
             v5090,
             v5113,
             v5134);
    sub_100043E30( v785,  v786,  v787,  v788,  v789,  v790,  v791,  v792,  v1331,  v1433,  v1535,  v1637,  v1739,  v1841,  v1942,  v2043,  v2144,  v2245,  v2346,  v2446,  v2545,  v2643,  v2740,  v2837,  v2932,  v3026,  v3120,  v3211,  v3299,  v3387,  v3471,  v3555,  v3635,  v3715,  v3792,  v3866,  v3940,  v4010,  v4080,  v4146,  v4212,  v4274,  v4336,  v4394,  v4452,  v4506,  v4560,  v4611,  v4659,
      v4707,
      v4751,
      v4794,
      v4836,
      v4874,
      v4912,
      v4946,
      v4979,
      v5010,
      v5039,
      v5066,
      v5091,
      v5114,
      v5135);
    sub_100043E28();
    sub_100043E20();
    sub_100044828();
    sub_100045990();
    sub_100045988();
    sub_100044820();
    sub_100044818();
    sub_100044810();
    sub_100044808();
    sub_100044800();
    sub_100043938();
    sub_100043930();
    sub_100043928();
    sub_100043920();
    sub_100043DB4();
    sub_100043DAC();
    sub_100043EF0();
    sub_100043E50();
    sub_10000F308(*(uint64_t (**)(void))(v79 + 8));
  }

  else
  {
    sub_100042F2C();
    uint64_t v793 = *(void *)(v79 + 1272);
    uint64_t v794 = *(void *)(v79 + 1256);
    uint64_t v795 = *(void *)(v79 + 1248);
    uint64_t v3027 = *(void *)(v79 + 1232);
    uint64_t v3300 = *(void *)(v79 + 1224);
    uint64_t v3472 = *(void *)(v79 + 1216);
    uint64_t v3636 = *(void *)(v79 + 1208);
    uint64_t v3867 = *(void *)(v79 + 1200);
    uint64_t v4011 = *(void *)(v79 + 1192);
    uint64_t v4147 = *(void *)(v79 + 1184);
    uint64_t v4275 = *(void *)(v79 + 1176);
    uint64_t v4395 = *(void *)(v79 + 1168);
    uint64_t v4507 = *(void *)(v79 + 1136);
    uint64_t v4660 = *(void *)(v79 + 1128);
    uint64_t v4752 = *(void *)(v79 + 1120);
    uint64_t v4795 = *(void *)(v79 + 1104);
    uint64_t v4875 = *(void *)(v79 + 1096);
    uint64_t v4947 = *(void *)(v79 + 1072);
    uint64_t v4980 = *(void *)(v79 + 1064);
    uint64_t v5011 = *(void *)(v79 + 1040);
    uint64_t v5040 = *(void *)(v79 + 1032);
    uint64_t v5067 = *(void *)(v79 + 1000);
    uint64_t v5092 = *(void *)(v79 + 976);
    uint64_t v5115 = *(void *)(v79 + 968);
    uint64_t v5136 = *(void *)(v79 + 960);
    uint64_t v2741 = *(void *)(v79 + 768);
    sub_10004763C(v796);
    sub_1000447AC();
    sub_100044830();
    sub_1000445E4();
    uint64_t v797 = sub_10000F484();
    sub_1000431B8(v797, &qword_10006A388);
    sub_100043F00(v798, v799, v800, v801, v802, v803, v804, v805, v1285, v1387, v1489, v1591, v1693);
    sub_100046D6C(*(uint64_t (**)(uint64_t))(v1795 + 8));
    sub_100043B64();
    sub_1000435DC();
    sub_100042E4C();
    sub_100043F9C(v794, *(uint64_t (**)(uint64_t, uint64_t))(v795 + 8));
    sub_100043A38();
    sub_100043910(v2098, *(uint64_t (**)(uint64_t, uint64_t))(v793 + 8));
    sub_100043B04();
    uint64_t v806 = sub_10000F3F4();
    uint64_t v814 = sub_1000435E4( v806,  v807,  v808,  v809,  v810,  v811,  v812,  v813,  v1332,  v1434,  v1536,  v1638,  v1740,  v1795,  v1896,  v1997,  v2098,  v2199);
    uint64_t v822 = sub_100043900( v814,  v815,  v816,  v817,  v818,  v819,  v820,  v821,  v1333,  v1435,  v1537,  v1639,  v1741,  v1842,  v1943,  v2044,  v2145,  v2246,  v2300);
    uint64_t v830 = sub_100043AE4( v822,  v823,  v824,  v825,  v826,  v827,  v828,  v829,  v1334,  v1436,  v1538,  v1640,  v1742,  v1843,  v1944,  v2045,  v2146,  v2247,  v2347,  v2400);
    uint64_t v838 = sub_100044AF4( v830,  v831,  v832,  v833,  v834,  v835,  v836,  v837,  v1335,  v1437,  v1539,  v1641,  v1743,  v1844,  v1945,  v2046,  v2147,  v2248,  v2348,  v2447,  v2499);
    sub_100044940( v838,  v839,  v840,  v841,  v842,  v843,  v844,  v845,  v1336,  v1438,  v1540,  v1642,  v1744,  v1845,  v1946,  v2047,  v2148,  v2249,  v2349,  v2448,  v2546,  v2597);
    uint64_t v846 = sub_10000F484();
    uint64_t v854 = sub_100043EE8( v846,  v847,  v848,  v849,  v850,  v851,  v852,  v853,  v1337,  v1439,  v1541,  v1643,  v1745,  v1846,  v1947,  v2048,  v2149,  v2250,  v2350,  v2449,  v2547,  v2644,  v2741,  v2791);
    uint64_t v862 = sub_100043F40( v854,  v855,  v856,  v857,  v858,  v859,  v860,  v861,  v1338,  v1440,  v1542,  v1644,  v1746,  v1847,  v1948,  v2049,  v2150,  v2251,  v2351,  v2450,  v2548,  v2645,  v2742,  v2838,  v2886);
    uint64_t v870 = sub_1000436E8( v862,  v863,  v864,  v865,  v866,  v867,  v868,  v869,  v1339,  v1441,  v1543,  v1645,  v1747,  v1848,  v1949,  v2050,  v2151,  v2252,  v2352,  v2451,  v2549,  v2646,  v2743,  v2839,  v2933,  v3027,  v3074);
    uint64_t v878 = sub_1000436C4( v870,  v871,  v872,  v873,  v874,  v875,  v876,  v877,  v1340,  v1442,  v1544,  v1646,  v1748,  v1849,  v1950,  v2051,  v2152,  v2253,  v2353,  v2452,  v2550,  v2647,  v2744,  v2840,  v2934,  v3028,  v3121,  v3166);
    uint64_t v886 = sub_100043658( v878,  v879,  v880,  v881,  v882,  v883,  v884,  v885,  v1341,  v1443,  v1545,  v1647,  v1749,  v1850,  v1951,  v2052,  v2153,  v2254,  v2354,  v2453,  v2551,  v2648,  v2745,  v2841,  v2935,  v3029,  v3122,  v3212,  v3300,  v3344);
    uint64_t v894 = sub_10004361C( v886,  v887,  v888,  v889,  v890,  v891,  v892,  v893,  v1342,  v1444,  v1546,  v1648,  v1750,  v1851,  v1952,  v2053,  v2154,  v2255,  v2355,  v2454,  v2552,  v2649,  v2746,  v2842,  v2936,  v3030,  v3123,  v3213,  v3301,  v3388,  v3472,  v3514);
    uint64_t v902 = sub_100043A48( v894,  v895,  v896,  v897,  v898,  v899,  v900,  v901,  v1343,  v1445,  v1547,  v1649,  v1751,  v1852,  v1953,  v2054,  v2155,  v2256,  v2356,  v2455,  v2553,  v2650,  v2747,  v2843,  v2937,  v3031,  v3124,  v3214,  v3302,  v3389,  v3473,  v3556,  v3636,  v3676);
    uint64_t v910 = sub_100043A40( v902,  v903,  v904,  v905,  v906,  v907,  v908,  v909,  v1344,  v1446,  v1548,  v1650,  v1752,  v1853,  v1954,  v2055,  v2156,  v2257,  v2357,  v2456,  v2554,  v2651,  v2748,  v2844,  v2938,  v3032,  v3125,  v3215,  v3303,  v3390,  v3474,  v3557,  v3637,  v3716,  v3754);
    uint64_t v918 = sub_10004384C( v910,  v911,  v912,  v913,  v914,  v915,  v916,  v917,  v1345,  v1447,  v1549,  v1651,  v1753,  v1854,  v1955,  v2056,  v2157,  v2258,  v2358,  v2457,  v2555,  v2652,  v2749,  v2845,  v2939,  v3033,  v3126,  v3216,  v3304,  v3391,  v3475,  v3558,  v3638,  v3717,  v3793,  v3867,  v3904);
    uint64_t v926 = sub_100043A28( v918,  v919,  v920,  v921,  v922,  v923,  v924,  v925,  v1346,  v1448,  v1550,  v1652,  v1754,  v1855,  v1956,  v2057,  v2158,  v2259,  v2359,  v2458,  v2556,  v2653,  v2750,  v2846,  v2940,  v3034,  v3127,  v3217,  v3305,  v3392,  v3476,  v3559,  v3639,  v3718,  v3794,  v3868,  v3941,  v4011,  v4046);
    uint64_t v934 = sub_100043A18( v926,  v927,  v928,  v929,  v930,  v931,  v932,  v933,  v1347,  v1449,  v1551,  v1653,  v1755,  v1856,  v1957,  v2058,  v2159,  v2260,  v2360,  v2459,  v2557,  v2654,  v2751,  v2847,  v2941,  v3035,  v3128,  v3218,  v3306,  v3393,  v3477,  v3560,  v3640,  v3719,  v3795,  v3869,  v3942,  v4012,  v4081,  v4147,  v4180);
    uint64_t v942 = sub_100043A08( v934,  v935,  v936,  v937,  v938,  v939,  v940,  v941,  v1348,  v1450,  v1552,  v1654,  v1756,  v1857,  v1958,  v2059,  v2160,  v2261,  v2361,  v2460,  v2558,  v2655,  v2752,  v2848,  v2942,  v3036,  v3129,  v3219,  v3307,  v3394,  v3478,  v3561,  v3641,  v3720,  v3796,  v3870,  v3943,  v4013,  v4082,  v4148,  v4213,  v4275,  v4306);
    uint64_t v950 = sub_1000439F8( v942,  v943,  v944,  v945,  v946,  v947,  v948,  v949,  v1349,  v1451,  v1553,  v1655,  v1757,  v1858,  v1959,  v2060,  v2161,  v2262,  v2362,  v2461,  v2559,  v2656,  v2753,  v2849,  v2943,  v3037,  v3130,  v3220,  v3308,  v3395,  v3479,  v3562,  v3642,  v3721,  v3797,  v3871,  v3944,  v4014,  v4083,  v4149,  v4214,  v4276,  v4337,  v4395,  v4424);
    uint64_t v958 = sub_1000439E8( v950,  v951,  v952,  v953,  v954,  v955,  v956,  v957,  v1350,  v1452,  v1554,  v1656,  v1758,  v1859,  v1960,  v2061,  v2162,  v2263,  v2363,  v2462,  v2560,  v2657,  v2754,  v2850,  v2944,  v3038,  v3131,  v3221,  v3309,  v3396,  v3480,  v3563,  v3643,  v3722,  v3798,  v3872,  v3945,  v4015,  v4084,  v4150,  v4215,  v4277,  v4338,  v4396,  v4453,  v4507,  v4534);
    uint64_t v966 = sub_1000439E0( v958,  v959,  v960,  v961,  v962,  v963,  v964,  v965,  v1351,  v1453,  v1555,  v1657,  v1759,  v1860,  v1961,  v2062,  v2163,  v2264,  v2364,  v2463,  v2561,  v2658,  v2755,  v2851,  v2945,  v3039,  v3132,  v3222,  v3310,  v3397,  v3481,  v3564,  v3644,  v3723,  v3799,  v3873,  v3946,  v4016,  v4085,  v4151,  v4216,  v4278,  v4339,  v4397,  v4454,  v4508,  v4561,  v4586);
    sub_1000439D0( v966,  v967,  v968,  v969,  v970,  v971,  v972,  v973,  v1352,  v1454,  v1556,  v1658,  v1760,  v1861,  v1962,  v2063,  v2164,  v2265,  v2365,  v2464,  v2562,  v2659,  v2756,  v2852,  v2946,  v3040,  v3133,  v3223,  v3311,  v3398,  v3482,  v3565,  v3645,  v3724,  v3800,  v3874,  v3947,  v4017,  v4086,  v4152,  v4217,  v4279,  v4340,  v4398,  v4455,  v4509,  v4562,  v4612,  v4660,
      v4684);
    sub_10000F4EC();
    uint64_t v974 = sub_10000F404();
    uint64_t v982 = sub_1000439B8( v974,  v975,  v976,  v977,  v978,  v979,  v980,  v981,  v1353,  v1455,  v1557,  v1659,  v1761,  v1862,  v1963,  v2064,  v2165,  v2266,  v2366,  v2465,  v2563,  v2660,  v2757,  v2853,  v2947,  v3041,  v3134,  v3224,  v3312,  v3399,  v3483,  v3566,  v3646,  v3725,  v3801,  v3875,  v3948,  v4018,  v4087,  v4153,  v4218,  v4280,  v4341,  v4399,  v4456,  v4510,  v4563,  v4613,  v4661,
             v4708,
             v4752,
             v4795,
             v4816);
    sub_1000439A8( v982,  v983,  v984,  v985,  v986,  v987,  v988,  v989,  v1354,  v1456,  v1558,  v1660,  v1762,  v1863,  v1964,  v2065,  v2166,  v2267,  v2367,  v2466,  v2564,  v2661,  v2758,  v2854,  v2948,  v3042,  v3135,  v3225,  v3313,  v3400,  v3484,  v3567,  v3647,  v3726,  v3802,  v3876,  v3949,  v4019,  v4088,  v4154,  v4219,  v4281,  v4342,  v4400,  v4457,  v4511,  v4564,  v4614,  v4662,
      v4709,
      v4753,
      v4796,
      v4837,
      v4875,
      v4894);
    uint64_t v990 = sub_10000F3FC();
    uint64_t v998 = sub_1000436F0( v990,  v991,  v992,  v993,  v994,  v995,  v996,  v997,  v1355,  v1457,  v1559,  v1661,  v1763,  v1864,  v1965,  v2066,  v2167,  v2268,  v2368,  v2467,  v2565,  v2662,  v2759,  v2855,  v2949,  v3043);
    uint64_t v1006 = sub_100043624( v998,  v999,  v1000,  v1001,  v1002,  v1003,  v1004,  v1005,  v1356,  v1458,  v1560,  v1662,  v1764,  v1865,  v1966,  v2067,  v2168,  v2269,  v2369,  v2468,  v2566,  v2663,  v2760,  v2856,  v2950,  v3044,  v3136,  v3226,  v3314);
    uint64_t v1014 = sub_100043660( v1006,  v1007,  v1008,  v1009,  v1010,  v1011,  v1012,  v1013,  v1357,  v1459,  v1561,  v1663,  v1765,  v1866,  v1967,  v2068,  v2169,  v2270,  v2370,  v2469,  v2567,  v2664,  v2761,  v2857,  v2951,  v3045,  v3137,  v3227,  v3315,  v3401,  v3485);
    uint64_t v1022 = sub_100043614( v1014,  v1015,  v1016,  v1017,  v1018,  v1019,  v1020,  v1021,  v1358,  v1460,  v1562,  v1664,  v1766,  v1867,  v1968,  v2069,  v2170,  v2271,  v2371,  v2470,  v2568,  v2665,  v2762,  v2858,  v2952,  v3046,  v3138,  v3228,  v3316,  v3402,  v3486,  v3568,  v3648);
    uint64_t v1030 = sub_1000437F8( v1022,  v1023,  v1024,  v1025,  v1026,  v1027,  v1028,  v1029,  v1359,  v1461,  v1563,  v1665,  v1767,  v1868,  v1969,  v2070,  v2171,  v2272,  v2372,  v2471,  v2569,  v2666,  v2763,  v2859,  v2953,  v3047,  v3139,  v3229,  v3317,  v3403,  v3487,  v3569,  v3649,  v3727,  v3803,  v3877);
    uint64_t v1038 = sub_100043A30( v1030,  v1031,  v1032,  v1033,  v1034,  v1035,  v1036,  v1037,  v1360,  v1462,  v1564,  v1666,  v1768,  v1869,  v1970,  v2071,  v2172,  v2273,  v2373,  v2472,  v2570,  v2667,  v2764,  v2860,  v2954,  v3048,  v3140,  v3230,  v3318,  v3404,  v3488,  v3570,  v3650,  v3728,  v3804,  v3878,  v3950,  v4020);
    uint64_t v1046 = sub_100043A20( v1038,  v1039,  v1040,  v1041,  v1042,  v1043,  v1044,  v1045,  v1361,  v1463,  v1565,  v1667,  v1769,  v1870,  v1971,  v2072,  v2173,  v2274,  v2374,  v2473,  v2571,  v2668,  v2765,  v2861,  v2955,  v3049,  v3141,  v3231,  v3319,  v3405,  v3489,  v3571,  v3651,  v3729,  v3805,  v3879,  v3951,  v4021,  v4089,  v4155);
    uint64_t v1054 = sub_100043A10( v1046,  v1047,  v1048,  v1049,  v1050,  v1051,  v1052,  v1053,  v1362,  v1464,  v1566,  v1668,  v1770,  v1871,  v1972,  v2073,  v2174,  v2275,  v2375,  v2474,  v2572,  v2669,  v2766,  v2862,  v2956,  v3050,  v3142,  v3232,  v3320,  v3406,  v3490,  v3572,  v3652,  v3730,  v3806,  v3880,  v3952,  v4022,  v4090,  v4156,  v4220,  v4282);
    uint64_t v1062 = sub_100043A00( v1054,  v1055,  v1056,  v1057,  v1058,  v1059,  v1060,  v1061,  v1363,  v1465,  v1567,  v1669,  v1771,  v1872,  v1973,  v2074,  v2175,  v2276,  v2376,  v2475,  v2573,  v2670,  v2767,  v2863,  v2957,  v3051,  v3143,  v3233,  v3321,  v3407,  v3491,  v3573,  v3653,  v3731,  v3807,  v3881,  v3953,  v4023,  v4091,  v4157,  v4221,  v4283,  v4343,  v4401);
    uint64_t v1070 = sub_1000439F0( v1062,  v1063,  v1064,  v1065,  v1066,  v1067,  v1068,  v1069,  v1364,  v1466,  v1568,  v1670,  v1772,  v1873,  v1974,  v2075,  v2176,  v2277,  v2377,  v2476,  v2574,  v2671,  v2768,  v2864,  v2958,  v3052,  v3144,  v3234,  v3322,  v3408,  v3492,  v3574,  v3654,  v3732,  v3808,  v3882,  v3954,  v4024,  v4092,  v4158,  v4222,  v4284,  v4344,  v4402,  v4458,  v4512);
    uint64_t v1078 = sub_1000439D8( v1070,  v1071,  v1072,  v1073,  v1074,  v1075,  v1076,  v1077,  v1365,  v1467,  v1569,  v1671,  v1773,  v1874,  v1975,  v2076,  v2177,  v2278,  v2378,  v2477,  v2575,  v2672,  v2769,  v2865,  v2959,  v3053,  v3145,  v3235,  v3323,  v3409,  v3493,  v3575,  v3655,  v3733,  v3809,  v3883,  v3955,  v4025,  v4093,  v4159,  v4223,  v4285,  v4345,  v4403,  v4459,  v4513,  v4565,  v4615,  v4663);
    uint64_t v1086 = sub_1000439C8( v1078,  v1079,  v1080,  v1081,  v1082,  v1083,  v1084,  v1085,  v1366,  v1468,  v1570,  v1672,  v1774,  v1875,  v1976,  v2077,  v2178,  v2279,  v2379,  v2478,  v2576,  v2673,  v2770,  v2866,  v2960,  v3054,  v3146,  v3236,  v3324,  v3410,  v3494,  v3576,  v3656,  v3734,  v3810,  v3884,  v3956,  v4026,  v4094,  v4160,  v4224,  v4286,  v4346,  v4404,  v4460,  v4514,  v4566,  v4616,  v4664,
              v4710,
              v4754);
    uint64_t v1094 = sub_1000439C0( v1086,  v1087,  v1088,  v1089,  v1090,  v1091,  v1092,  v1093,  v1367,  v1469,  v1571,  v1673,  v1775,  v1876,  v1977,  v2078,  v2179,  v2280,  v2380,  v2479,  v2577,  v2674,  v2771,  v2867,  v2961,  v3055,  v3147,  v3237,  v3325,  v3411,  v3495,  v3577,  v3657,  v3735,  v3811,  v3885,  v3957,  v4027,  v4095,  v4161,  v4225,  v4287,  v4347,  v4405,  v4461,  v4515,  v4567,  v4617,  v4665,
              v4711,
              v4755,
              v4797);
    uint64_t v1102 = sub_1000439B0( v1094,  v1095,  v1096,  v1097,  v1098,  v1099,  v1100,  v1101,  v1368,  v1470,  v1572,  v1674,  v1776,  v1877,  v1978,  v2079,  v2180,  v2281,  v2381,  v2480,  v2578,  v2675,  v2772,  v2868,  v2962,  v3056,  v3148,  v3238,  v3326,  v3412,  v3496,  v3578,  v3658,  v3736,  v3812,  v3886,  v3958,  v4028,  v4096,  v4162,  v4226,  v4288,  v4348,  v4406,  v4462,  v4516,  v4568,  v4618,  v4666,
              v4712,
              v4756,
              v4798,
              v4838,
              v4876);
    uint64_t v1110 = sub_1000439A0( v1102,  v1103,  v1104,  v1105,  v1106,  v1107,  v1108,  v1109,  v1369,  v1471,  v1573,  v1675,  v1777,  v1878,  v1979,  v2080,  v2181,  v2282,  v2382,  v2481,  v2579,  v2676,  v2773,  v2869,  v2963,  v3057,  v3149,  v3239,  v3327,  v3413,  v3497,  v3579,  v3659,  v3737,  v3813,  v3887,  v3959,  v4029,  v4097,  v4163,  v4227,  v4289,  v4349,  v4407,  v4463,  v4517,  v4569,  v4619,  v4667,
              v4713,
              v4757,
              v4799,
              v4839,
              v4877,
              v4913,
              v4947);
    uint64_t v1118 = sub_100043998( v1110,  v1111,  v1112,  v1113,  v1114,  v1115,  v1116,  v1117,  v1370,  v1472,  v1574,  v1676,  v1778,  v1879,  v1980,  v2081,  v2182,  v2283,  v2383,  v2482,  v2580,  v2677,  v2774,  v2870,  v2964,  v3058,  v3150,  v3240,  v3328,  v3414,  v3498,  v3580,  v3660,  v3738,  v3814,  v3888,  v3960,  v4030,  v4098,  v4164,  v4228,  v4290,  v4350,  v4408,  v4464,  v4518,  v4570,  v4620,  v4668,
              v4714,
              v4758,
              v4800,
              v4840,
              v4878,
              v4914,
              v4948,
              v4980);
    uint64_t v1126 = sub_100043990( v1118,  v1119,  v1120,  v1121,  v1122,  v1123,  v1124,  v1125,  v1371,  v1473,  v1575,  v1677,  v1779,  v1880,  v1981,  v2082,  v2183,  v2284,  v2384,  v2483,  v2581,  v2678,  v2775,  v2871,  v2965,  v3059,  v3151,  v3241,  v3329,  v3415,  v3499,  v3581,  v3661,  v3739,  v3815,  v3889,  v3961,  v4031,  v4099,  v4165,  v4229,  v4291,  v4351,  v4409,  v4465,  v4519,  v4571,  v4621,  v4669,
              v4715,
              v4759,
              v4801,
              v4841,
              v4879,
              v4915,
              v4949,
              v4981,
              v5011);
    uint64_t v1134 = sub_100043988( v1126,  v1127,  v1128,  v1129,  v1130,  v1131,  v1132,  v1133,  v1372,  v1474,  v1576,  v1678,  v1780,  v1881,  v1982,  v2083,  v2184,  v2285,  v2385,  v2484,  v2582,  v2679,  v2776,  v2872,  v2966,  v3060,  v3152,  v3242,  v3330,  v3416,  v3500,  v3582,  v3662,  v3740,  v3816,  v3890,  v3962,  v4032,  v4100,  v4166,  v4230,  v4292,  v4352,  v4410,  v4466,  v4520,  v4572,  v4622,  v4670,
              v4716,
              v4760,
              v4802,
              v4842,
              v4880,
              v4916,
              v4950,
              v4982,
              v5012,
              v5040);
    uint64_t v1142 = sub_100043980( v1134,  v1135,  v1136,  v1137,  v1138,  v1139,  v1140,  v1141,  v1373,  v1475,  v1577,  v1679,  v1781,  v1882,  v1983,  v2084,  v2185,  v2286,  v2386,  v2485,  v2583,  v2680,  v2777,  v2873,  v2967,  v3061,  v3153,  v3243,  v3331,  v3417,  v3501,  v3583,  v3663,  v3741,  v3817,  v3891,  v3963,  v4033,  v4101,  v4167,  v4231,  v4293,  v4353,  v4411,  v4467,  v4521,  v4573,  v4623,  v4671,
              v4717,
              v4761,
              v4803,
              v4843,
              v4881,
              v4917,
              v4951,
              v4983,
              v5013,
              v5041,
              v5067);
    uint64_t v1150 = sub_100043978( v1142,  v1143,  v1144,  v1145,  v1146,  v1147,  v1148,  v1149,  v1374,  v1476,  v1578,  v1680,  v1782,  v1883,  v1984,  v2085,  v2186,  v2287,  v2387,  v2486,  v2584,  v2681,  v2778,  v2874,  v2968,  v3062,  v3154,  v3244,  v3332,  v3418,  v3502,  v3584,  v3664,  v3742,  v3818,  v3892,  v3964,  v4034,  v4102,  v4168,  v4232,  v4294,  v4354,  v4412,  v4468,  v4522,  v4574,  v4624,  v4672,
              v4718,
              v4762,
              v4804,
              v4844,
              v4882,
              v4918,
              v4952,
              v4984,
              v5014,
              v5042,
              v5068,
              v5092);
    uint64_t v1158 = sub_100043970( v1150,  v1151,  v1152,  v1153,  v1154,  v1155,  v1156,  v1157,  v1375,  v1477,  v1579,  v1681,  v1783,  v1884,  v1985,  v2086,  v2187,  v2288,  v2388,  v2487,  v2585,  v2682,  v2779,  v2875,  v2969,  v3063,  v3155,  v3245,  v3333,  v3419,  v3503,  v3585,  v3665,  v3743,  v3819,  v3893,  v3965,  v4035,  v4103,  v4169,  v4233,  v4295,  v4355,  v4413,  v4469,  v4523,  v4575,  v4625,  v4673,
              v4719,
              v4763,
              v4805,
              v4845,
              v4883,
              v4919,
              v4953,
              v4985,
              v5015,
              v5043,
              v5069,
              v5093,
              v5115);
    uint64_t v1166 = sub_100043968( v1158,  v1159,  v1160,  v1161,  v1162,  v1163,  v1164,  v1165,  v1376,  v1478,  v1580,  v1682,  v1784,  v1885,  v1986,  v2087,  v2188,  v2289,  v2389,  v2488,  v2586,  v2683,  v2780,  v2876,  v2970,  v3064,  v3156,  v3246,  v3334,  v3420,  v3504,  v3586,  v3666,  v3744,  v3820,  v3894,  v3966,  v4036,  v4104,  v4170,  v4234,  v4296,  v4356,  v4414,  v4470,  v4524,  v4576,  v4626,  v4674,
              v4720,
              v4764,
              v4806,
              v4846,
              v4884,
              v4920,
              v4954,
              v4986,
              v5016,
              v5044,
              v5070,
              v5094,
              v5116,
              v5136);
    uint64_t v1174 = sub_100043960( v1166,  v1167,  v1168,  v1169,  v1170,  v1171,  v1172,  v1173,  v1377,  v1479,  v1581,  v1683,  v1785,  v1886,  v1987,  v2088,  v2189,  v2290,  v2390,  v2489,  v2587,  v2684,  v2781,  v2877,  v2971,  v3065,  v3157,  v3247,  v3335,  v3421,  v3505,  v3587,  v3667,  v3745,  v3821,  v3895,  v3967,  v4037,  v4105,  v4171,  v4235,  v4297,  v4357,  v4415,  v4471,  v4525,  v4577,  v4627,  v4675,
              v4721,
              v4765,
              v4807,
              v4847,
              v4885,
              v4921,
              v4955,
              v4987,
              v5017,
              v5045,
              v5071,
              v5095,
              v5117,
              v5137);
    uint64_t v1182 = sub_100043958( v1174,  v1175,  v1176,  v1177,  v1178,  v1179,  v1180,  v1181,  v1378,  v1480,  v1582,  v1684,  v1786,  v1887,  v1988,  v2089,  v2190,  v2291,  v2391,  v2490,  v2588,  v2685,  v2782,  v2878,  v2972,  v3066,  v3158,  v3248,  v3336,  v3422,  v3506,  v3588,  v3668,  v3746,  v3822,  v3896,  v3968,  v4038,  v4106,  v4172,  v4236,  v4298,  v4358,  v4416,  v4472,  v4526,  v4578,  v4628,  v4676,
              v4722,
              v4766,
              v4808,
              v4848,
              v4886,
              v4922,
              v4956,
              v4988,
              v5018,
              v5046,
              v5072,
              v5096,
              v5118,
              v5138);
    uint64_t v1190 = sub_100043950( v1182,  v1183,  v1184,  v1185,  v1186,  v1187,  v1188,  v1189,  v1379,  v1481,  v1583,  v1685,  v1787,  v1888,  v1989,  v2090,  v2191,  v2292,  v2392,  v2491,  v2589,  v2686,  v2783,  v2879,  v2973,  v3067,  v3159,  v3249,  v3337,  v3423,  v3507,  v3589,  v3669,  v3747,  v3823,  v3897,  v3969,  v4039,  v4107,  v4173,  v4237,  v4299,  v4359,  v4417,  v4473,  v4527,  v4579,  v4629,  v4677,
              v4723,
              v4767,
              v4809,
              v4849,
              v4887,
              v4923,
              v4957,
              v4989,
              v5019,
              v5047,
              v5073,
              v5097,
              v5119,
              v5139);
    uint64_t v1198 = sub_100043948( v1190,  v1191,  v1192,  v1193,  v1194,  v1195,  v1196,  v1197,  v1380,  v1482,  v1584,  v1686,  v1788,  v1889,  v1990,  v2091,  v2192,  v2293,  v2393,  v2492,  v2590,  v2687,  v2784,  v2880,  v2974,  v3068,  v3160,  v3250,  v3338,  v3424,  v3508,  v3590,  v3670,  v3748,  v3824,  v3898,  v3970,  v4040,  v4108,  v4174,  v4238,  v4300,  v4360,  v4418,  v4474,  v4528,  v4580,  v4630,  v4678,
              v4724,
              v4768,
              v4810,
              v4850,
              v4888,
              v4924,
              v4958,
              v4990,
              v5020,
              v5048,
              v5074,
              v5098,
              v5120,
              v5140);
    uint64_t v1206 = sub_100043940( v1198,  v1199,  v1200,  v1201,  v1202,  v1203,  v1204,  v1205,  v1381,  v1483,  v1585,  v1687,  v1789,  v1890,  v1991,  v2092,  v2193,  v2294,  v2394,  v2493,  v2591,  v2688,  v2785,  v2881,  v2975,  v3069,  v3161,  v3251,  v3339,  v3425,  v3509,  v3591,  v3671,  v3749,  v3825,  v3899,  v3971,  v4041,  v4109,  v4175,  v4239,  v4301,  v4361,  v4419,  v4475,  v4529,  v4581,  v4631,  v4679,
              v4725,
              v4769,
              v4811,
              v4851,
              v4889,
              v4925,
              v4959,
              v4991,
              v5021,
              v5049,
              v5075,
              v5099,
              v5121,
              v5141);
    uint64_t v1214 = sub_100043E48( v1206,  v1207,  v1208,  v1209,  v1210,  v1211,  v1212,  v1213,  v1382,  v1484,  v1586,  v1688,  v1790,  v1891,  v1992,  v2093,  v2194,  v2295,  v2395,  v2494,  v2592,  v2689,  v2786,  v2882,  v2976,  v3070,  v3162,  v3252,  v3340,  v3426,  v3510,  v3592,  v3672,  v3750,  v3826,  v3900,  v3972,  v4042,  v4110,  v4176,  v4240,  v4302,  v4362,  v4420,  v4476,  v4530,  v4582,  v4632,  v4680,
              v4726,
              v4770,
              v4812,
              v4852,
              v4890,
              v4926,
              v4960,
              v4992,
              v5022,
              v5050,
              v5076,
              v5100,
              v5122,
              v5142);
    uint64_t v1222 = sub_100043E40( v1214,  v1215,  v1216,  v1217,  v1218,  v1219,  v1220,  v1221,  v1383,  v1485,  v1587,  v1689,  v1791,  v1892,  v1993,  v2094,  v2195,  v2296,  v2396,  v2495,  v2593,  v2690,  v2787,  v2883,  v2977,  v3071,  v3163,  v3253,  v3341,  v3427,  v3511,  v3593,  v3673,  v3751,  v3827,  v3901,  v3973,  v4043,  v4111,  v4177,  v4241,  v4303,  v4363,  v4421,  v4477,  v4531,  v4583,  v4633,  v4681,
              v4727,
              v4771,
              v4813,
              v4853,
              v4891,
              v4927,
              v4961,
              v4993,
              v5023,
              v5051,
              v5077,
              v5101,
              v5123,
              v5143);
    uint64_t v1230 = sub_100043E38( v1222,  v1223,  v1224,  v1225,  v1226,  v1227,  v1228,  v1229,  v1384,  v1486,  v1588,  v1690,  v1792,  v1893,  v1994,  v2095,  v2196,  v2297,  v2397,  v2496,  v2594,  v2691,  v2788,  v2884,  v2978,  v3072,  v3164,  v3254,  v3342,  v3428,  v3512,  v3594,  v3674,  v3752,  v3828,  v3902,  v3974,  v4044,  v4112,  v4178,  v4242,  v4304,  v4364,  v4422,  v4478,  v4532,  v4584,  v4634,  v4682,
              v4728,
              v4772,
              v4814,
              v4854,
              v4892,
              v4928,
              v4962,
              v4994,
              v5024,
              v5052,
              v5078,
              v5102,
              v5124,
              v5144);
    sub_100043E30( v1230,  v1231,  v1232,  v1233,  v1234,  v1235,  v1236,  v1237,  v1385,  v1487,  v1589,  v1691,  v1793,  v1894,  v1995,  v2096,  v2197,  v2298,  v2398,  v2497,  v2595,  v2692,  v2789,  v2885,  v2979,  v3073,  v3165,  v3255,  v3343,  v3429,  v3513,  v3595,  v3675,  v3753,  v3829,  v3903,  v3975,  v4045,  v4113,  v4179,  v4243,  v4305,  v4365,  v4423,  v4479,  v4533,  v4585,  v4635,  v4683,
      v4729,
      v4773,
      v4815,
      v4855,
      v4893,
      v4929,
      v4963,
      v4995,
      v5025,
      v5053,
      v5079,
      v5103,
      v5125,
      v5145);
    sub_100043E28();
    sub_100043E20();
    sub_100044828();
    uint64_t v1238 = sub_100045990();
    sub_100044584( v1238,  v1239,  v1240,  v1241,  v1242,  v1243,  v1244,  v1245,  v1386,  v1488,  v1590,  v1692,  v1794,  v1895,  v1996,  v2097,  v2198,  v2299,  v2399,  v2498,  v2596,  v2693,  v2790);
    sub_100045988();
    sub_100044820();
    sub_100044818();
    sub_100044810();
    sub_100044808();
    sub_100044800();
    sub_100043938();
    sub_100043930();
    sub_100043928();
    sub_100043920();
    sub_100043D44();
    uint64_t v1246 = (uint64_t (*)(void))sub_10000F588();
    sub_10000F308(v1246);
  }

uint64_t sub_10002A030()
{
  uint64_t v1 = sub_100044C94(*(void *)(v0 + 1888));
  *(void *)(v0 + 1896) = sub_10004341C(v1, "metadata");
  sub_10000F3A0();
  return sub_10000F2D0();
}

uint64_t sub_10002A078(uint64_t a1)
{
  switch(v1)
  {
    case 0LL:
      sub_100046060();
      uint64_t v4 = (unsigned int *)&enum case for ToolAuthenticationPolicy.none(_:);
      goto LABEL_6;
    case 2LL:
      uint64_t v5 = *(void **)(v3 + 1672);
      uint64_t v6 = *(void *)(v3 + 1072);
      uint64_t v7 = *(void *)(v3 + 1056);
      sub_100044F38(*(void *)(v3 + 1248));
      uint64_t v8 = enum case for RuntimeDeviceState.unlocked(_:);
      uint64_t v9 = sub_1000459E0();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 104LL))(v6, v8, v9);
      sub_10004314C( v6,  enum case for RuntimeRequirement.deviceState(_:),  *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 104));
      sub_100044848();
      sub_100043800(*(void *)(v3 + 400));
      sub_100045514();

      goto LABEL_8;
    case 1LL:
      sub_100046060();
      uint64_t v4 = (unsigned int *)&enum case for ToolAuthenticationPolicy.requiresAuthenticationOnOrigin(_:);
LABEL_6:
      sub_100044408(*v4, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 104));
LABEL_8:
      uint64_t v10 = *(void **)(v3 + 1672);
      sub_100044604();
      sub_100044F38(v11);
      id v12 = v10;
      *(void *)(v3 + 1904) = sub_1000431DC();
      sub_100042F20();
      sub_100043160();
      sub_100045B50();
      return swift_task_switch(v13, v14, v15);
  }

  return _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "BackgroundShortcutRunner/ToolKitIndexer.swift",  45LL,  2LL,  774LL,  0);
}

uint64_t sub_10002A23C()
{
  uint64_t v1 = sub_100044C94(*(void *)(v0 + 1904));
  *(void *)(v0 + 1912) = sub_10004341C(v1, "metadata");
  sub_10000F3A0();
  return sub_10000F2D0();
}

uint64_t sub_10002A284()
{
  uint64_t v1 = *(void **)(v0 + 1912);
  id v2 = [v1 openAppWhenRun];

  if ((_DWORD)v2)
  {
    sub_1000436CC();
    static ToolFlag.opensAppWhenRun.getter();
    sub_100043254();
    sub_100043248();
    sub_1000432E0((uint64_t)v2);
  }

  *(void *)(v0 + 1920) = sub_1000431DC();
  sub_100042F20();
  sub_100043160();
  sub_100045B50();
  return sub_100043488();
}

uint64_t sub_10002A30C()
{
  uint64_t v1 = sub_100044C94(*(void *)(v0 + 1920));
  *(void *)(v0 + 1928) = sub_10004341C(v1, "metadata");
  sub_10000F3A0();
  return sub_10000F2D0();
}

uint64_t sub_10002A354(uint64_t a1)
{
  if ((v1 & 8) != 0)
  {
    sub_1000436CC();
    static ToolFlag.doesNotImplementPerform.getter();
    sub_100043254();
    sub_100043248();
    sub_1000432E0(v1);
  }

  *(void *)(v2 + 1936) = sub_1000431DC();
  sub_100042F20();
  sub_100043160();
  sub_100045B50();
  return sub_100043488();
}

uint64_t sub_10002A3D4()
{
  uint64_t v1 = sub_100044C94(*(void *)(v0 + 1936));
  *(void *)(v0 + 1944) = sub_10004341C(v1, "metadata");
  sub_10000F3A0();
  return sub_10000F2D0();
}

uint64_t sub_10002A41C(uint64_t a1)
{
  if ((v1 & 1) != 0)
  {
    sub_1000436CC();
    static ToolFlag.showsOpenWhenRun.getter();
    sub_100043254();
    sub_100043248();
    sub_1000432E0(v1);
  }

  *(void *)(v2 + 1952) = sub_1000431DC();
  sub_100042F20();
  sub_100043160();
  sub_100045B50();
  return sub_100043488();
}

uint64_t sub_10002A49C()
{
  uint64_t v1 = sub_100044C94(*(void *)(v0 + 1952));
  *(void *)(v0 + 1960) = sub_10004341C(v1, "metadata");
  sub_10000F3A0();
  return sub_10000F2D0();
}

uint64_t sub_10002A4E4(uint64_t a1)
{
  if ((v1 & 2) != 0)
  {
    sub_1000436CC();
    static ToolFlag.outputHasSnippet.getter();
    sub_100043254();
    sub_100043248();
    sub_1000432E0(v1);
  }

  *(void *)(v2 + 1968) = sub_1000431DC();
  sub_100042F20();
  sub_100043160();
  sub_100045B50();
  return sub_100043488();
}

uint64_t sub_10002A564()
{
  uint64_t v1 = sub_100044C94(*(void *)(v0 + 1968));
  *(void *)(v0 + 1976) = sub_10004341C(v1, "metadata");
  sub_10000F3A0();
  return sub_10000F2D0();
}

void sub_10002A5AC()
{
  uint64_t v4 = v1 + 360;
  sub_10004341C(v5, "outputFlags");
  sub_100043670();
  uint64_t v6 = *(void *)(v1 + 1672);
  if ((v0 & 4) != 0)
  {
    sub_1000436CC();
    static ToolFlag.outputProvidesDialog.getter();
    sub_100043254();

    sub_100043248();
    sub_1000432E0(v0);
  }

  else
  {
  }

  id v7 = [(id)sub_100046F10() isDiscontinued];
  if ((_DWORD)v7)
  {
    uint64_t v0 = *(void *)(v1 + 1288);
    uint64_t v6 = *(void *)(v1 + 1272);
    static ToolFlag.isDiscontinued.getter(v7);
    sub_100043254();
    sub_100043248();
    sub_1000432E0(v0);
    uint64_t v8 = objc_opt_self(&OBJC_CLASS___WFLinkAction);
    uint64_t v9 = sub_100045244(v8);
    *(void *)(v1 + 1984) = v9;
    if (v9)
    {
      sub_100043240();
      id v10 = sub_100043C20();
      *(void *)(v1 + 1992) = sub_1000431DC();
      sub_100042F20();
      sub_100043160();
LABEL_90:
      sub_100042EB0();
      return;
    }
  }

  uint64_t v4799 = v1 + 360;
  uint64_t v4823 = v1 + 400;
  if ([*(id *)(v1 + 576) isResidentCompatible])
  {
    sub_10004501C();
    sub_100043254();
    sub_100043248();
    sub_1000432E0(v0);
  }

  uint64_t v11 = *(void *)(v1 + 1856);
  uint64_t v4824 = v1;
  uint64_t v12 = sub_100043EB8();
  uint64_t v13 = (uint64_t)&type metadata accessor for WFDeviceCapabilityResource;
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v12);
  id v15 = sub_10004341C(ObjCClassFromMetadata, "unevaluatedResourceObjectsOfClass:");
  uint64_t v16 = (uint64_t)&OBJC_CLASS___WFResource_ptr;
  sub_100043C10();
  sub_1000442C4(&qword_10006A3D8);
  sub_100045FA8(v17);
  sub_100043D6C();
  sub_1000442FC((uint64_t)&qword_10006A3D0);
  uint64_t v4816 = v11;
  sub_100043024();
  if (sub_100047744())
  {
    sub_100044EAC();
    if (v18 != v19)
    {
LABEL_131:
      __break(1u);
LABEL_132:
      __break(1u);
      goto LABEL_133;
    }

    uint64_t v13 = sub_100045B20();
    uint64_t v16 = 0LL;
    uint64_t v4 = enum case for RuntimeRequirement.deviceCapability(_:);
    uint64_t v2 = sub_100050CD0;
    uint64_t v6 = v1;
    do
    {
      if ((v13 & 1) != 0) {
        uint64_t v20 = (uint64_t)sub_1000430AC(v4820 + 8 * v16);
      }
      else {
        uint64_t v20 = sub_1000462F4(v16);
      }
      uint64_t v3 = v20;
      uint64_t v11 = *(void *)(v1 + 1072);
      ++v16;
      sub_1000448C4();
      sub_100045600();
      sub_100047738();
      sub_1000453B4(*(void *)(*(void *)(v1 + 400) + 16LL));
      sub_100044B28();
      sub_100037FF8();
    }

    while (&qword_10006A3D0 != (unint64_t *)v16);
  }

  sub_100044BA4();
  uint64_t v21 = sub_10004536C();
  BOOL v22 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))&type metadata accessor for WFFeatureFlagResource;
  uint64_t v23 = swift_getObjCClassFromMetadata(v21);
  id v24 = sub_10004341C(v23, "unevaluatedResourceObjectsOfClass:");
  sub_1000452BC((uint64_t)v24);
  sub_100043670();
  sub_100046CE4();
  uint64_t v4800 = v11;
  *(void *)(v1 + 2008) = v11;
  sub_100042E4C();
  if (sub_100047744())
  {
    sub_100047114();
    if (v18 == v19)
    {
      char v4811 = sub_100045BE0();
      unsigned int v4807 = enum case for RuntimeRequirement.featureFlag(_:);
      while (1)
      {
        if ((v4811 & 1) != 0) {
          uint64_t v25 = (uint64_t)sub_1000430AC(v4820);
        }
        else {
          uint64_t v25 = sub_1000462F4(0LL);
        }
        uint64_t v26 = (void *)v25;
        uint64_t v27 = *(uint64_t **)(v1 + 1072);
        sub_100043F10();
        sub_100044F4C();
        char v28 = sub_100047370();
        *uint64_t v27 = v6;
        uint64_t v1 = v4824;
        *(void *)(v4816 + 8) = v4;
        *(void *)(v4816 + 16) = v2;
        *(void *)(v4816 + 24) = v22;
        *(_BYTE *)(v4816 + 32) = v28 & 1;
        sub_10004314C((uint64_t)v27, v4807, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4813 + 104));
        BOOL v22 = sub_100050CD0;
        sub_100044EF0();
        sub_100044734(*(void *)(v4824 + 400));
        sub_100044174();
        sub_100037FF8();
      }
    }

    goto LABEL_132;
  }

  uint64_t v29 = *(void *)(v1 + 1672);
  sub_100044BA4();
  if (v29)
  {
    sub_100043240();
    sub_100043C20();
    *(void *)(v1 + 2016) = sub_1000431DC();
    sub_100042F20();
    sub_100043160();
    goto LABEL_90;
  }

  sub_100043230();
  if (sub_100043E10())
  {
    uint64_t v30 = (void *)sub_100043EA0();
  }

  else
  {
    sub_100008D58();
    uint64_t v30 = &_swiftEmptySetSingleton;
  }

  uint64_t v4825 = (uint64_t)v30;
  sub_100043230();
  if (sub_100043E10())
  {
    uint64_t v31 = (void *)sub_100043EA0();
  }

  else
  {
    sub_100008D58();
    uint64_t v31 = &_swiftEmptySetSingleton;
  }

  uint64_t v32 = sub_1000461CC((uint64_t)v31);
  uint64_t v33 = &type metadata accessor for WFDeviceIdiomResource;
  uint64_t v34 = swift_getObjCClassFromMetadata(v32);
  id v35 = sub_10004341C(v34, "unevaluatedResourceObjectsOfClass:");
  sub_1000452BC((uint64_t)v35);
  sub_100043670();
  sub_100044C3C(v13);
  uint64_t v37 = v36;
  sub_100042E4C();
  uint64_t v4821 = sub_10004650C();
  if (!v4821)
  {
LABEL_45:
    uint64_t v43 = sub_100043908();
    id v44 = sub_10004341C(v43, "disabledOnPlatforms");
    sub_100043F68();
    sub_100043F5C(v45);
    sub_100043670();
    if (sub_10004542C())
    {
      sub_100044EAC();
      if (v18 != v19)
      {
LABEL_133:
        __break(1u);
LABEL_134:
        __break(1u);
        goto LABEL_135;
      }

      sub_100044FA8();
      sub_1000449F0();
      do
      {
        if ((v16 & 1) != 0) {
          uint64_t v46 = (uint64_t)sub_1000430AC(v13 + 8 * v6);
        }
        else {
          uint64_t v46 = sub_100043FE4();
        }
        uint64_t v47 = (void *)v46;
        sub_100043B9C(v46, v4824);
        sub_1000443E8();

        sub_100043FD4((uint64_t)v33, *(uint64_t (**)(uint64_t, uint64_t))(v3 + 8));
      }

      while (v22 != (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v6);
    }

    uint64_t v48 = sub_100042E4C();
    if (*(void *)(v4825 + 16)) {
      uint64_t v49 = sub_100009BEC();
    }
    else {
      uint64_t v49 = static RuntimePlatform.all.getter(v48);
    }
    uint64_t v50 = v4824;
    uint64_t v4826 = v49;
    uint64_t v51 = sub_1000436BC();
    sub_1000393C8(v51);
    sub_100043174();
    uint64_t v52 = sub_10004317C();
    uint64_t v53 = sub_1000352A0(v52);
    sub_100043238(v4826);
    sub_100043174();
    sub_100042E4C();
    uint64_t v4822 = v53;
    if (sub_100046D3C())
    {
      sub_100047114();
      if (v18 == v19)
      {
        char v4817 = sub_1000447B4();
        unsigned int v4804 = enum case for RuntimeRequirement.platform(_:);
        while (1)
        {
          if ((v4817 & 1) != 0)
          {
            uint64_t v54 = *(void *)(v50 + 944);
            uint64_t v50 = v4813;
            sub_100043F1C( v54,  (*(unsigned __int8 *)(v50 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v50 + 80));
          }

          else
          {
            uint64_t v55 = sub_100043000(0LL, v53, (uint64_t (*)(void))&type metadata accessor for RuntimePlatform);
            uint64_t v50 = v4813;
            if (v4802 != 8) {
              goto LABEL_129;
            }
            sub_100045278(v55);
            sub_1000431C0();
          }

          sub_100043DD8();
          uint64_t v56 = sub_100045354();
          sub_100043524(v56);
          sub_10004314C(v53, v4825, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4806 + 16));
          sub_1000447A4(v53, v4804, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4810 + 104));
          sub_100045148();
          sub_100044690(*(void *)(v50 + 400));
          sub_100037FF8();
          sub_100043380(v4825, *(uint64_t (**)(uint64_t, uint64_t))(v4806 + 8));
        }
      }

      goto LABEL_134;
    }

    sub_100044BA4();
    uint64_t v57 = sub_100047584();
    *(void *)(v4824 + 456) = v57;
    sub_100043230();
    *(void *)(v4824 + 464) = v58;
    *(void *)(v4824 + 472) = &OBJC_PROTOCOL___WFLinkActionProtocol;
    uint64_t v4819 = v57;
    if (sub_100045218(v4825))
    {
      id v59 = sub_100046E6C();
      id v60 = sub_10004416C((uint64_t)v59, "backingActionIdentifiers");
      uint64_t v57 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v60, &type metadata for String);

      uint64_t v11 = v4800;
      sub_100013D08(v57);
      sub_1000461EC();
      sub_1000436BC();
      uint64_t v61 = sub_1000453D8();

      sub_100008D58();
      sub_10004784C();
      *(void *)(v4824 + 464) = v61;
    }

    uint64_t v4808 = (void *)(v4824 + 464);
    *(void *)(v4824 + 2032) = v11;
    if (!sub_100044F00() && sub_1000531E4(v57))
    {
      sub_100046E94();
      if (v18 != v19)
      {
LABEL_135:
        __break(1u);
        JUMPOUT(0x10002B96CLL);
      }

      char v62 = sub_10004430C();
      uint64_t v16 = enum case for SystemToolProtocol.assistantSchema(_:);
      sub_100043E98();
      sub_1000475B8((uint64_t)"SystemToolProtocol");
      do
      {
        if ((v62 & 1) != 0)
        {
          uint64_t v63 = sub_100044484( *(void *)(v4824 + 872),  v57 + ((*(unsigned __int8 *)(v3 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80)));
        }

        else
        {
          uint64_t v64 = sub_100046794(0LL, v57, (uint64_t (*)(void))&type metadata accessor for SystemToolProtocol);
          if (v4816 != 8) {
            goto LABEL_130;
          }
          sub_10004525C(v64);
          uint64_t v63 = sub_1000431C0();
        }

        sub_100044458(v63, *(void *)(v4824 + 872));
        int v65 = sub_100044448();
        uint64_t v66 = *(void *)(v4824 + 864);
        if (v65 == (_DWORD)v16)
        {
          uint64_t v67 = *(void *)(v4824 + 824);
          sub_100043184(*(uint64_t (**)(uint64_t))(v3 + 96));
          sub_100043D7C(v67, v66, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4822 + 32));
          sub_100044E94();
          sub_100044DAC();
          uint64_t v68 = sub_100044DFC();
          sub_100044EE8();
          if (*(void *)(v68 + 16) && (unint64_t v69 = sub_100051CAC(), (v70 & 1) != 0))
          {
            sub_1000431C8(v69, *(void *)(v4824 + 776));
            uint64_t v71 = 0LL;
          }

          else
          {
            uint64_t v71 = 1LL;
          }

          uint64_t v72 = *(void *)(v4824 + 776);
          sub_10000848C(v72, v71, 1LL, *(void *)(v4824 + 784));
          sub_100008D58();
          sub_100046C9C();
          if (v950)
          {
            uint64_t v73 = *(void *)(v4824 + 776);
            sub_10000F508(v72, *(uint64_t (**)(uint64_t, uint64_t))(v4822 + 8));
            sub_100041358(v73, &qword_10006A390);
          }

          else
          {
            sub_100044128();
            sub_1000464FC();
            sub_100015F18();
            sub_100044EB8();
            sub_10000F508(v72, *(uint64_t (**)(uint64_t, uint64_t))(v4822 + 8));
          }

          uint64_t v57 = v4819;
        }

        else
        {
          sub_100043184(*(uint64_t (**)(uint64_t))(v3 + 8));
        }

        sub_1000462B4();
      }

      while (!v950);
      sub_100043024();
    }

    if (sub_100044DA4(v4808))
    {
      sub_100044F2C(*(void *)(v4824 + 840));
      sub_100046C6C();
      sub_100044724(*(void *)(v4824 + 456));
      sub_100045388();
    }

    if (*(void *)(v4824 + 1672))
    {
      sub_100043240();
      sub_100046C4C();
      *(void *)(v4824 + 2040) = sub_100046504();
      sub_100045294();
      sub_100043160();
      goto LABEL_90;
    }

    sub_100040428(*(void **)(v4824 + 576), (SEL *)&selRef_iconName);
    if (v74)
    {
      sub_100045FEC();
      sub_100046854();
      *(void *)(v4824 + 480) = 0LL;
      *(void *)(v4824 + 488) = v11;
      uint64_t v75 = sub_1000432E8();
      sub_100043084(v75);
      sub_100043BE0();
LABEL_101:
      sub_10000848C(v76, v77, v78, v79);
      goto LABEL_102;
    }

    sub_100040428(*(void **)(v4824 + 576), (SEL *)&selRef_iconSymbolName);
    if (v81)
    {
      uint64_t v16 = v80;
      uint64_t v82 = v81;
      sub_100040428(*(void **)(v4824 + 576), (SEL *)&selRef_iconBackgroundColorName);
      if (v84)
      {
        uint64_t v85 = v84;
        uint64_t v4814 = v83;
        uint64_t v86 = (_OWORD *)(v4824 + 304);
        id v87 = [*(id *)(v4824 + 576) definition];
        if (v87)
        {
          id v88 = [v87 objectForKey:WFActionIconSymbolColorNameKey];
          sub_1000461FC();
          if (v4824)
          {
            sub_1000448D0();
            sub_1000460B4();
          }

          else
          {
            sub_100044F68();
          }

          uint64_t v945 = v16;
          sub_100045EAC(v4824 + 272, v89, &qword_10006A420);
          uint64_t v50 = v4824;
          uint64_t v16 = v82;
          if (*(void *)(v4824 + 328))
          {
            uint64_t v948 = v4814;
            if ((sub_100009C04( v4824 + 376,  (uint64_t)v86,  (uint64_t)&type metadata for Any + 8,  (uint64_t)&type metadata for String) & 1) != 0)
            {
              sub_100047498();
              goto LABEL_112;
            }

LABEL_111:
            sub_100043410(*(void *)(v50 + 720), v946, v947, *(void *)(v50 + 632));
LABEL_112:
            sub_100044A38(v4808);
            swift_bridgeObjectRelease(*(void *)(v4824 + 536));
            BOOL v950 = v948 == 1953392980 && v85 == 0xE400000000000000LL;
            if (v950 || (uint64_t v951 = sub_100045394(), (sub_100043138(v951, v952) & 1) != 0))
            {
              uint64_t v953 = *(void *)(v50 + 712);
              uint64_t v954 = *(void *)(v50 + 632);
              sub_100046390(*(void *)(v50 + 720), v949, &qword_10006A378);
              sub_100043DBC(v953, 1LL, v954);
              if (!v950)
              {
                uint64_t v959 = sub_10004584C();
                sub_100041358(v959, &qword_10006A378);
                sub_100043024();
                sub_100044D5C(v948, v953);
                sub_100044D5C(v954, v948);
                uint64_t v960 = (unsigned int *)&enum case for ToolSymbolIconStyle.tinted(_:);
LABEL_127:
                uint64_t v964 = *(uint64_t **)(v4824 + 1256);
                uint64_t v965 = *(void *)(v4824 + 1176);
                uint64_t v57 = *(void *)(v4824 + 1168);
                sub_10004314C(v965, *v960, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v57 + 104));
                uint64_t v966 = (uint64_t)v964 + *(int *)(sub_10000844C(&qword_10006A430) + 48);
                *uint64_t v964 = v945;
                v964[1] = v16;
                sub_10004314C(v966, v965, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v57 + 32));
                uint64_t v967 = sub_1000432E8();
                sub_100043084(v967);
                sub_100047904();
LABEL_102:
                uint64_t v4812 = *(void *)(v50 + 1672);
                uint64_t v4815 = *(void *)(v50 + 2032);
                uint64_t v96 = *(void *)(v50 + 1320);
                uint64_t v4801 = *(void *)(v50 + 1296);
                uint64_t v4803 = *(void *)(v50 + 1256);
                uint64_t v4805 = *(void *)(v50 + 616);
                uint64_t v4809 = *(void *)(v50 + 1872);
                sub_100044F74();
                uint64_t v4798 = v97;
                sub_100045B34();
                id v99 = sub_100044B20(v98, "identifier");
                sub_100046014((uint64_t)v99);
                sub_100045FBC();
                uint64_t v100 = sub_100044B10();
                uint64_t v101 = (void *)sub_100045958(v100);
                v101[9] = v4799;
                v101[10] = v4801;
                v101[11] = v4823;
                v101[12] = v4803;
                v101[13] = v4809;
                v101[14] = v4798;
                v101[15] = v4805;
                v101[16] = v4824 + 456;
                sub_100043B58((uint64_t)v101, v4812);
                uint64_t v102 = sub_100046BCC();
                ToolDatabase.Rollbackable.inSavepoint<A>(name:work:)(v102, v103, v104, v105);
                uint64_t v106 = sub_100043D84();
                if (v4815)
                {
                  uint64_t v108 = *(void *)(v4824 + 1552);
                  uint64_t v109 = *(void *)(v4824 + 1520);
                  sub_100043820(v107);
                  sub_100046540();
                  sub_10004630C();
                  sub_100046354();
                  uint64_t v110 = sub_10000F3F4();
                  sub_10004610C(v110, &qword_10006A388);
                  sub_100046644();
                  sub_100043910(v108, *(uint64_t (**)(uint64_t, uint64_t))(v109 + 8));
                  sub_100043B64();
                  sub_1000462E0();
                  sub_100008D58();
                  sub_100047630();
                  sub_100043A38();
                  sub_100046748();
                  sub_100043B04();
                  sub_100042810();
                  sub_10000F41C();
                  sub_10000F4A0();
                  sub_10000F3FC();
                  sub_10000F484();
                  sub_10000F338();
                  sub_10000F404();
                  sub_10000F4A8();
                  sub_10000F4EC();
                  uint64_t v111 = sub_10000F3F4();
                  uint64_t v119 = sub_1000436F0( v111,  v112,  v113,  v114,  v115,  v116,  v117,  v118,  v968,  v1071,  v1174,  v1277,  v1380,  v1483,  v1585,  v1687,  v1789,  v1890,  v1991,  v2091,  v2190,  v2288,  v2385,  v2481,  v2576,  v2670);
                  uint64_t v127 = sub_1000436E8( v119,  v120,  v121,  v122,  v123,  v124,  v125,  v126,  v969,  v1072,  v1175,  v1278,  v1381,  v1484,  v1586,  v1688,  v1790,  v1891,  v1992,  v2092,  v2191,  v2289,  v2386,  v2482,  v2577,  v2671,  v2763);
                  uint64_t v135 = sub_1000436C4( v127,  v128,  v129,  v130,  v131,  v132,  v133,  v134,  v970,  v1073,  v1176,  v1279,  v1382,  v1485,  v1587,  v1689,  v1791,  v1892,  v1993,  v2093,  v2192,  v2290,  v2387,  v2483,  v2578,  v2672,  v2764,  v2854);
                  uint64_t v143 = sub_100043624( v135,  v136,  v137,  v138,  v139,  v140,  v141,  v142,  v971,  v1074,  v1177,  v1280,  v1383,  v1486,  v1588,  v1690,  v1792,  v1893,  v1994,  v2094,  v2193,  v2291,  v2388,  v2484,  v2579,  v2673,  v2765,  v2855,  v2943);
                  uint64_t v151 = sub_100043658( v143,  v144,  v145,  v146,  v147,  v148,  v149,  v150,  v972,  v1075,  v1178,  v1281,  v1384,  v1487,  v1589,  v1691,  v1793,  v1894,  v1995,  v2095,  v2194,  v2292,  v2389,  v2485,  v2580,  v2674,  v2766,  v2856,  v2944,  v3030);
                  uint64_t v159 = sub_100043660( v151,  v152,  v153,  v154,  v155,  v156,  v157,  v158,  v973,  v1076,  v1179,  v1282,  v1385,  v1488,  v1590,  v1692,  v1794,  v1895,  v1996,  v2096,  v2195,  v2293,  v2390,  v2486,  v2581,  v2675,  v2767,  v2857,  v2945,  v3031,  v3115);
                  uint64_t v167 = sub_10004361C( v159,  v160,  v161,  v162,  v163,  v164,  v165,  v166,  v974,  v1077,  v1180,  v1283,  v1386,  v1489,  v1591,  v1693,  v1795,  v1896,  v1997,  v2097,  v2196,  v2294,  v2391,  v2487,  v2582,  v2676,  v2768,  v2858,  v2946,  v3032,  v3116,  v3198);
                  uint64_t v175 = sub_100043614( v167,  v168,  v169,  v170,  v171,  v172,  v173,  v174,  v975,  v1078,  v1181,  v1284,  v1387,  v1490,  v1592,  v1694,  v1796,  v1897,  v1998,  v2098,  v2197,  v2295,  v2392,  v2488,  v2583,  v2677,  v2769,  v2859,  v2947,  v3033,  v3117,  v3199,  v3279);
                  uint64_t v183 = sub_100043A48( v175,  v176,  v177,  v178,  v179,  v180,  v181,  v182,  v976,  v1079,  v1182,  v1285,  v1388,  v1491,  v1593,  v1695,  v1797,  v1898,  v1999,  v2099,  v2198,  v2296,  v2393,  v2489,  v2584,  v2678,  v2770,  v2860,  v2948,  v3034,  v3118,  v3200,  v3280,  v3358);
                  uint64_t v191 = sub_100043A40( v183,  v184,  v185,  v186,  v187,  v188,  v189,  v190,  v977,  v1080,  v1183,  v1286,  v1389,  v1492,  v1594,  v1696,  v1798,  v1899,  v2000,  v2100,  v2199,  v2297,  v2394,  v2490,  v2585,  v2679,  v2771,  v2861,  v2949,  v3035,  v3119,  v3201,  v3281,  v3359,  v3435);
                  uint64_t v199 = sub_1000437F8( v191,  v192,  v193,  v194,  v195,  v196,  v197,  v198,  v978,  v1081,  v1184,  v1287,  v1390,  v1493,  v1595,  v1697,  v1799,  v1900,  v2001,  v2101,  v2200,  v2298,  v2395,  v2491,  v2586,  v2680,  v2772,  v2862,  v2950,  v3036,  v3120,  v3202,  v3282,  v3360,  v3436,  v3510);
                  uint64_t v207 = sub_10004384C( v199,  v200,  v201,  v202,  v203,  v204,  v205,  v206,  v979,  v1082,  v1185,  v1288,  v1391,  v1494,  v1596,  v1698,  v1800,  v1901,  v2002,  v2102,  v2201,  v2299,  v2396,  v2492,  v2587,  v2681,  v2773,  v2863,  v2951,  v3037,  v3121,  v3203,  v3283,  v3361,  v3437,  v3511,  v3583);
                  uint64_t v215 = sub_100043A30( v207,  v208,  v209,  v210,  v211,  v212,  v213,  v214,  v980,  v1083,  v1186,  v1289,  v1392,  v1495,  v1597,  v1699,  v1801,  v1902,  v2003,  v2103,  v2202,  v2300,  v2397,  v2493,  v2588,  v2682,  v2774,  v2864,  v2952,  v3038,  v3122,  v3204,  v3284,  v3362,  v3438,  v3512,  v3584,  v3654);
                  uint64_t v223 = sub_100043A28( v215,  v216,  v217,  v218,  v219,  v220,  v221,  v222,  v981,  v1084,  v1187,  v1290,  v1393,  v1496,  v1598,  v1700,  v1802,  v1903,  v2004,  v2104,  v2203,  v2301,  v2398,  v2494,  v2589,  v2683,  v2775,  v2865,  v2953,  v3039,  v3123,  v3205,  v3285,  v3363,  v3439,  v3513,  v3585,  v3655,  v3723);
                  uint64_t v231 = sub_100043A20( v223,  v224,  v225,  v226,  v227,  v228,  v229,  v230,  v982,  v1085,  v1188,  v1291,  v1394,  v1497,  v1599,  v1701,  v1803,  v1904,  v2005,  v2105,  v2204,  v2302,  v2399,  v2495,  v2590,  v2684,  v2776,  v2866,  v2954,  v3040,  v3124,  v3206,  v3286,  v3364,  v3440,  v3514,  v3586,  v3656,  v3724,  v3790);
                  uint64_t v239 = sub_100043A18( v231,  v232,  v233,  v234,  v235,  v236,  v237,  v238,  v983,  v1086,  v1189,  v1292,  v1395,  v1498,  v1600,  v1702,  v1804,  v1905,  v2006,  v2106,  v2205,  v2303,  v2400,  v2496,  v2591,  v2685,  v2777,  v2867,  v2955,  v3041,  v3125,  v3207,  v3287,  v3365,  v3441,  v3515,  v3587,  v3657,  v3725,  v3791,  v3855);
                  uint64_t v247 = sub_100043A10( v239,  v240,  v241,  v242,  v243,  v244,  v245,  v246,  v984,  v1087,  v1190,  v1293,  v1396,  v1499,  v1601,  v1703,  v1805,  v1906,  v2007,  v2107,  v2206,  v2304,  v2401,  v2497,  v2592,  v2686,  v2778,  v2868,  v2956,  v3042,  v3126,  v3208,  v3288,  v3366,  v3442,  v3516,  v3588,  v3658,  v3726,  v3792,  v3856,  v3918);
                  uint64_t v255 = sub_100043A08( v247,  v248,  v249,  v250,  v251,  v252,  v253,  v254,  v985,  v1088,  v1191,  v1294,  v1397,  v1500,  v1602,  v1704,  v1806,  v1907,  v2008,  v2108,  v2207,  v2305,  v2402,  v2498,  v2593,  v2687,  v2779,  v2869,  v2957,  v3043,  v3127,  v3209,  v3289,  v3367,  v3443,  v3517,  v3589,  v3659,  v3727,  v3793,  v3857,  v3919,  v3979);
                  uint64_t v263 = sub_100043A00( v255,  v256,  v257,  v258,  v259,  v260,  v261,  v262,  v986,  v1089,  v1192,  v1295,  v1398,  v1501,  v1603,  v1705,  v1807,  v1908,  v2009,  v2109,  v2208,  v2306,  v2403,  v2499,  v2594,  v2688,  v2780,  v2870,  v2958,  v3044,  v3128,  v3210,  v3290,  v3368,  v3444,  v3518,  v3590,  v3660,  v3728,  v3794,  v3858,  v3920,  v3980,  v4038);
                  uint64_t v271 = sub_1000439F8( v263,  v264,  v265,  v266,  v267,  v268,  v269,  v270,  v987,  v1090,  v1193,  v1296,  v1399,  v1502,  v1604,  v1706,  v1808,  v1909,  v2010,  v2110,  v2209,  v2307,  v2404,  v2500,  v2595,  v2689,  v2781,  v2871,  v2959,  v3045,  v3129,  v3211,  v3291,  v3369,  v3445,  v3519,  v3591,  v3661,  v3729,  v3795,  v3859,  v3921,  v3981,  v4039,  v4095);
                  uint64_t v279 = sub_1000439F0( v271,  v272,  v273,  v274,  v275,  v276,  v277,  v278,  v988,  v1091,  v1194,  v1297,  v1400,  v1503,  v1605,  v1707,  v1809,  v1910,  v2011,  v2111,  v2210,  v2308,  v2405,  v2501,  v2596,  v2690,  v2782,  v2872,  v2960,  v3046,  v3130,  v3212,  v3292,  v3370,  v3446,  v3520,  v3592,  v3662,  v3730,  v3796,  v3860,  v3922,  v3982,  v4040,  v4096,  v4150);
                  uint64_t v287 = sub_1000439E8( v279,  v280,  v281,  v282,  v283,  v284,  v285,  v286,  v989,  v1092,  v1195,  v1298,  v1401,  v1504,  v1606,  v1708,  v1810,  v1911,  v2012,  v2112,  v2211,  v2309,  v2406,  v2502,  v2597,  v2691,  v2783,  v2873,  v2961,  v3047,  v3131,  v3213,  v3293,  v3371,  v3447,  v3521,  v3593,  v3663,  v3731,  v3797,  v3861,  v3923,  v3983,  v4041,  v4097,  v4151,  v4203);
                  uint64_t v295 = sub_1000439E0( v287,  v288,  v289,  v290,  v291,  v292,  v293,  v294,  v990,  v1093,  v1196,  v1299,  v1402,  v1505,  v1607,  v1709,  v1811,  v1912,  v2013,  v2113,  v2212,  v2310,  v2407,  v2503,  v2598,  v2692,  v2784,  v2874,  v2962,  v3048,  v3132,  v3214,  v3294,  v3372,  v3448,  v3522,  v3594,  v3664,  v3732,  v3798,  v3862,  v3924,  v3984,  v4042,  v4098,  v4152,  v4204,  v4254);
                  uint64_t v303 = sub_1000439D8( v295,  v296,  v297,  v298,  v299,  v300,  v301,  v302,  v991,  v1094,  v1197,  v1300,  v1403,  v1506,  v1608,  v1710,  v1812,  v1913,  v2014,  v2114,  v2213,  v2311,  v2408,  v2504,  v2599,  v2693,  v2785,  v2875,  v2963,  v3049,  v3133,  v3215,  v3295,  v3373,  v3449,  v3523,  v3595,  v3665,  v3733,  v3799,  v3863,  v3925,  v3985,  v4043,  v4099,  v4153,  v4205,  v4255,  v4303);
                  uint64_t v311 = sub_1000439D0( v303,  v304,  v305,  v306,  v307,  v308,  v309,  v310,  v992,  v1095,  v1198,  v1301,  v1404,  v1507,  v1609,  v1711,  v1813,  v1914,  v2015,  v2115,  v2214,  v2312,  v2409,  v2505,  v2600,  v2694,  v2786,  v2876,  v2964,  v3050,  v3134,  v3216,  v3296,  v3374,  v3450,  v3524,  v3596,  v3666,  v3734,  v3800,  v3864,  v3926,  v3986,  v4044,  v4100,  v4154,  v4206,  v4256,  v4304,
                           v4350);
                  uint64_t v319 = sub_1000439C8( v311,  v312,  v313,  v314,  v315,  v316,  v317,  v318,  v993,  v1096,  v1199,  v1302,  v1405,  v1508,  v1610,  v1712,  v1814,  v1915,  v2016,  v2116,  v2215,  v2313,  v2410,  v2506,  v2601,  v2695,  v2787,  v2877,  v2965,  v3051,  v3135,  v3217,  v3297,  v3375,  v3451,  v3525,  v3597,  v3667,  v3735,  v3801,  v3865,  v3927,  v3987,  v4045,  v4101,  v4155,  v4207,  v4257,  v4305,
                           v4351,
                           v4395);
                  uint64_t v327 = sub_1000439C0( v319,  v320,  v321,  v322,  v323,  v324,  v325,  v326,  v994,  v1097,  v1200,  v1303,  v1406,  v1509,  v1611,  v1713,  v1815,  v1916,  v2017,  v2117,  v2216,  v2314,  v2411,  v2507,  v2602,  v2696,  v2788,  v2878,  v2966,  v3052,  v3136,  v3218,  v3298,  v3376,  v3452,  v3526,  v3598,  v3668,  v3736,  v3802,  v3866,  v3928,  v3988,  v4046,  v4102,  v4156,  v4208,  v4258,  v4306,
                           v4352,
                           v4396,
                           v4438);
                  uint64_t v335 = sub_1000439B8( v327,  v328,  v329,  v330,  v331,  v332,  v333,  v334,  v995,  v1098,  v1201,  v1304,  v1407,  v1510,  v1612,  v1714,  v1816,  v1917,  v2018,  v2118,  v2217,  v2315,  v2412,  v2508,  v2603,  v2697,  v2789,  v2879,  v2967,  v3053,  v3137,  v3219,  v3299,  v3377,  v3453,  v3527,  v3599,  v3669,  v3737,  v3803,  v3867,  v3929,  v3989,  v4047,  v4103,  v4157,  v4209,  v4259,  v4307,
                           v4353,
                           v4397,
                           v4439,
                           v4479);
                  uint64_t v343 = sub_1000439B0( v335,  v336,  v337,  v338,  v339,  v340,  v341,  v342,  v996,  v1099,  v1202,  v1305,  v1408,  v1511,  v1613,  v1715,  v1817,  v1918,  v2019,  v2119,  v2218,  v2316,  v2413,  v2509,  v2604,  v2698,  v2790,  v2880,  v2968,  v3054,  v3138,  v3220,  v3300,  v3378,  v3454,  v3528,  v3600,  v3670,  v3738,  v3804,  v3868,  v3930,  v3990,  v4048,  v4104,  v4158,  v4210,  v4260,  v4308,
                           v4354,
                           v4398,
                           v4440,
                           v4480,
                           v4518);
                  uint64_t v351 = sub_1000439A8( v343,  v344,  v345,  v346,  v347,  v348,  v349,  v350,  v997,  v1100,  v1203,  v1306,  v1409,  v1512,  v1614,  v1716,  v1818,  v1919,  v2020,  v2120,  v2219,  v2317,  v2414,  v2510,  v2605,  v2699,  v2791,  v2881,  v2969,  v3055,  v3139,  v3221,  v3301,  v3379,  v3455,  v3529,  v3601,  v3671,  v3739,  v3805,  v3869,  v3931,  v3991,  v4049,  v4105,  v4159,  v4211,  v4261,  v4309,
                           v4355,
                           v4399,
                           v4441,
                           v4481,
                           v4519,
                           v4555);
                  uint64_t v359 = sub_1000439A0( v351,  v352,  v353,  v354,  v355,  v356,  v357,  v358,  v998,  v1101,  v1204,  v1307,  v1410,  v1513,  v1615,  v1717,  v1819,  v1920,  v2021,  v2121,  v2220,  v2318,  v2415,  v2511,  v2606,  v2700,  v2792,  v2882,  v2970,  v3056,  v3140,  v3222,  v3302,  v3380,  v3456,  v3530,  v3602,  v3672,  v3740,  v3806,  v3870,  v3932,  v3992,  v4050,  v4106,  v4160,  v4212,  v4262,  v4310,
                           v4356,
                           v4400,
                           v4442,
                           v4482,
                           v4520,
                           v4556,
                           v4590);
                  uint64_t v367 = sub_100043998( v359,  v360,  v361,  v362,  v363,  v364,  v365,  v366,  v999,  v1102,  v1205,  v1308,  v1411,  v1514,  v1616,  v1718,  v1820,  v1921,  v2022,  v2122,  v2221,  v2319,  v2416,  v2512,  v2607,  v2701,  v2793,  v2883,  v2971,  v3057,  v3141,  v3223,  v3303,  v3381,  v3457,  v3531,  v3603,  v3673,  v3741,  v3807,  v3871,  v3933,  v3993,  v4051,  v4107,  v4161,  v4213,  v4263,  v4311,
                           v4357,
                           v4401,
                           v4443,
                           v4483,
                           v4521,
                           v4557,
                           v4591,
                           v4623);
                  uint64_t v375 = sub_100043990( v367,  v368,  v369,  v370,  v371,  v372,  v373,  v374,  v1000,  v1103,  v1206,  v1309,  v1412,  v1515,  v1617,  v1719,  v1821,  v1922,  v2023,  v2123,  v2222,  v2320,  v2417,  v2513,  v2608,  v2702,  v2794,  v2884,  v2972,  v3058,  v3142,  v3224,  v3304,  v3382,  v3458,  v3532,  v3604,  v3674,  v3742,  v3808,  v3872,  v3934,  v3994,  v4052,  v4108,  v4162,  v4214,  v4264,  v4312,
                           v4358,
                           v4402,
                           v4444,
                           v4484,
                           v4522,
                           v4558,
                           v4592,
                           v4624,
                           v4654);
                  uint64_t v383 = sub_100043988( v375,  v376,  v377,  v378,  v379,  v380,  v381,  v382,  v1001,  v1104,  v1207,  v1310,  v1413,  v1516,  v1618,  v1720,  v1822,  v1923,  v2024,  v2124,  v2223,  v2321,  v2418,  v2514,  v2609,  v2703,  v2795,  v2885,  v2973,  v3059,  v3143,  v3225,  v3305,  v3383,  v3459,  v3533,  v3605,  v3675,  v3743,  v3809,  v3873,  v3935,  v3995,  v4053,  v4109,  v4163,  v4215,  v4265,  v4313,
                           v4359,
                           v4403,
                           v4445,
                           v4485,
                           v4523,
                           v4559,
                           v4593,
                           v4625,
                           v4655,
                           v4683);
                  uint64_t v391 = sub_100043980( v383,  v384,  v385,  v386,  v387,  v388,  v389,  v390,  v1002,  v1105,  v1208,  v1311,  v1414,  v1517,  v1619,  v1721,  v1823,  v1924,  v2025,  v2125,  v2224,  v2322,  v2419,  v2515,  v2610,  v2704,  v2796,  v2886,  v2974,  v3060,  v3144,  v3226,  v3306,  v3384,  v3460,  v3534,  v3606,  v3676,  v3744,  v3810,  v3874,  v3936,  v3996,  v4054,  v4110,  v4164,  v4216,  v4266,  v4314,
                           v4360,
                           v4404,
                           v4446,
                           v4486,
                           v4524,
                           v4560,
                           v4594,
                           v4626,
                           v4656,
                           v4684,
                           v4710);
                  uint64_t v399 = sub_100043978( v391,  v392,  v393,  v394,  v395,  v396,  v397,  v398,  v1003,  v1106,  v1209,  v1312,  v1415,  v1518,  v1620,  v1722,  v1824,  v1925,  v2026,  v2126,  v2225,  v2323,  v2420,  v2516,  v2611,  v2705,  v2797,  v2887,  v2975,  v3061,  v3145,  v3227,  v3307,  v3385,  v3461,  v3535,  v3607,  v3677,  v3745,  v3811,  v3875,  v3937,  v3997,  v4055,  v4111,  v4165,  v4217,  v4267,  v4315,
                           v4361,
                           v4405,
                           v4447,
                           v4487,
                           v4525,
                           v4561,
                           v4595,
                           v4627,
                           v4657,
                           v4685,
                           v4711,
                           v4735);
                  uint64_t v407 = sub_100043970( v399,  v400,  v401,  v402,  v403,  v404,  v405,  v406,  v1004,  v1107,  v1210,  v1313,  v1416,  v1519,  v1621,  v1723,  v1825,  v1926,  v2027,  v2127,  v2226,  v2324,  v2421,  v2517,  v2612,  v2706,  v2798,  v2888,  v2976,  v3062,  v3146,  v3228,  v3308,  v3386,  v3462,  v3536,  v3608,  v3678,  v3746,  v3812,  v3876,  v3938,  v3998,  v4056,  v4112,  v4166,  v4218,  v4268,  v4316,
                           v4362,
                           v4406,
                           v4448,
                           v4488,
                           v4526,
                           v4562,
                           v4596,
                           v4628,
                           v4658,
                           v4686,
                           v4712,
                           v4736,
                           v4758);
                  uint64_t v415 = sub_100043968( v407,  v408,  v409,  v410,  v411,  v412,  v413,  v414,  v1005,  v1108,  v1211,  v1314,  v1417,  v1520,  v1622,  v1724,  v1826,  v1927,  v2028,  v2128,  v2227,  v2325,  v2422,  v2518,  v2613,  v2707,  v2799,  v2889,  v2977,  v3063,  v3147,  v3229,  v3309,  v3387,  v3463,  v3537,  v3609,  v3679,  v3747,  v3813,  v3877,  v3939,  v3999,  v4057,  v4113,  v4167,  v4219,  v4269,  v4317,
                           v4363,
                           v4407,
                           v4449,
                           v4489,
                           v4527,
                           v4563,
                           v4597,
                           v4629,
                           v4659,
                           v4687,
                           v4713,
                           v4737,
                           v4759,
                           v4779);
                  uint64_t v423 = sub_100043960( v415,  v416,  v417,  v418,  v419,  v420,  v421,  v422,  v1006,  v1109,  v1212,  v1315,  v1418,  v1521,  v1623,  v1725,  v1827,  v1928,  v2029,  v2129,  v2228,  v2326,  v2423,  v2519,  v2614,  v2708,  v2800,  v2890,  v2978,  v3064,  v3148,  v3230,  v3310,  v3388,  v3464,  v3538,  v3610,  v3680,  v3748,  v3814,  v3878,  v3940,  v4000,  v4058,  v4114,  v4168,  v4220,  v4270,  v4318,
                           v4364,
                           v4408,
                           v4450,
                           v4490,
                           v4528,
                           v4564,
                           v4598,
                           v4630,
                           v4660,
                           v4688,
                           v4714,
                           v4738,
                           v4760,
                           v4780);
                  uint64_t v431 = sub_100043958( v423,  v424,  v425,  v426,  v427,  v428,  v429,  v430,  v1007,  v1110,  v1213,  v1316,  v1419,  v1522,  v1624,  v1726,  v1828,  v1929,  v2030,  v2130,  v2229,  v2327,  v2424,  v2520,  v2615,  v2709,  v2801,  v2891,  v2979,  v3065,  v3149,  v3231,  v3311,  v3389,  v3465,  v3539,  v3611,  v3681,  v3749,  v3815,  v3879,  v3941,  v4001,  v4059,  v4115,  v4169,  v4221,  v4271,  v4319,
                           v4365,
                           v4409,
                           v4451,
                           v4491,
                           v4529,
                           v4565,
                           v4599,
                           v4631,
                           v4661,
                           v4689,
                           v4715,
                           v4739,
                           v4761,
                           v4781);
                  uint64_t v439 = sub_100043950( v431,  v432,  v433,  v434,  v435,  v436,  v437,  v438,  v1008,  v1111,  v1214,  v1317,  v1420,  v1523,  v1625,  v1727,  v1829,  v1930,  v2031,  v2131,  v2230,  v2328,  v2425,  v2521,  v2616,  v2710,  v2802,  v2892,  v2980,  v3066,  v3150,  v3232,  v3312,  v3390,  v3466,  v3540,  v3612,  v3682,  v3750,  v3816,  v3880,  v3942,  v4002,  v4060,  v4116,  v4170,  v4222,  v4272,  v4320,
                           v4366,
                           v4410,
                           v4452,
                           v4492,
                           v4530,
                           v4566,
                           v4600,
                           v4632,
                           v4662,
                           v4690,
                           v4716,
                           v4740,
                           v4762,
                           v4782);
                  uint64_t v447 = sub_100043948( v439,  v440,  v441,  v442,  v443,  v444,  v445,  v446,  v1009,  v1112,  v1215,  v1318,  v1421,  v1524,  v1626,  v1728,  v1830,  v1931,  v2032,  v2132,  v2231,  v2329,  v2426,  v2522,  v2617,  v2711,  v2803,  v2893,  v2981,  v3067,  v3151,  v3233,  v3313,  v3391,  v3467,  v3541,  v3613,  v3683,  v3751,  v3817,  v3881,  v3943,  v4003,  v4061,  v4117,  v4171,  v4223,  v4273,  v4321,
                           v4367,
                           v4411,
                           v4453,
                           v4493,
                           v4531,
                           v4567,
                           v4601,
                           v4633,
                           v4663,
                           v4691,
                           v4717,
                           v4741,
                           v4763,
                           v4783);
                  uint64_t v455 = sub_100043940( v447,  v448,  v449,  v450,  v451,  v452,  v453,  v454,  v1010,  v1113,  v1216,  v1319,  v1422,  v1525,  v1627,  v1729,  v1831,  v1932,  v2033,  v2133,  v2232,  v2330,  v2427,  v2523,  v2618,  v2712,  v2804,  v2894,  v2982,  v3068,  v3152,  v3234,  v3314,  v3392,  v3468,  v3542,  v3614,  v3684,  v3752,  v3818,  v3882,  v3944,  v4004,  v4062,  v4118,  v4172,  v4224,  v4274,  v4322,
                           v4368,
                           v4412,
                           v4454,
                           v4494,
                           v4532,
                           v4568,
                           v4602,
                           v4634,
                           v4664,
                           v4692,
                           v4718,
                           v4742,
                           v4764,
                           v4784);
                  uint64_t v463 = sub_100043E48( v455,  v456,  v457,  v458,  v459,  v460,  v461,  v462,  v1011,  v1114,  v1217,  v1320,  v1423,  v1526,  v1628,  v1730,  v1832,  v1933,  v2034,  v2134,  v2233,  v2331,  v2428,  v2524,  v2619,  v2713,  v2805,  v2895,  v2983,  v3069,  v3153,  v3235,  v3315,  v3393,  v3469,  v3543,  v3615,  v3685,  v3753,  v3819,  v3883,  v3945,  v4005,  v4063,  v4119,  v4173,  v4225,  v4275,  v4323,
                           v4369,
                           v4413,
                           v4455,
                           v4495,
                           v4533,
                           v4569,
                           v4603,
                           v4635,
                           v4665,
                           v4693,
                           v4719,
                           v4743,
                           v4765,
                           v4785);
                  uint64_t v471 = sub_100043E40( v463,  v464,  v465,  v466,  v467,  v468,  v469,  v470,  v1012,  v1115,  v1218,  v1321,  v1424,  v1527,  v1629,  v1731,  v1833,  v1934,  v2035,  v2135,  v2234,  v2332,  v2429,  v2525,  v2620,  v2714,  v2806,  v2896,  v2984,  v3070,  v3154,  v3236,  v3316,  v3394,  v3470,  v3544,  v3616,  v3686,  v3754,  v3820,  v3884,  v3946,  v4006,  v4064,  v4120,  v4174,  v4226,  v4276,  v4324,
                           v4370,
                           v4414,
                           v4456,
                           v4496,
                           v4534,
                           v4570,
                           v4604,
                           v4636,
                           v4666,
                           v4694,
                           v4720,
                           v4744,
                           v4766,
                           v4786);
                  uint64_t v479 = sub_100043E38( v471,  v472,  v473,  v474,  v475,  v476,  v477,  v478,  v1013,  v1116,  v1219,  v1322,  v1425,  v1528,  v1630,  v1732,  v1834,  v1935,  v2036,  v2136,  v2235,  v2333,  v2430,  v2526,  v2621,  v2715,  v2807,  v2897,  v2985,  v3071,  v3155,  v3237,  v3317,  v3395,  v3471,  v3545,  v3617,  v3687,  v3755,  v3821,  v3885,  v3947,  v4007,  v4065,  v4121,  v4175,  v4227,  v4277,  v4325,
                           v4371,
                           v4415,
                           v4457,
                           v4497,
                           v4535,
                           v4571,
                           v4605,
                           v4637,
                           v4667,
                           v4695,
                           v4721,
                           v4745,
                           v4767,
                           v4787);
                  sub_100043E30( v479,  v480,  v481,  v482,  v483,  v484,  v485,  v486,  v1014,  v1117,  v1220,  v1323,  v1426,  v1529,  v1631,  v1733,  v1835,  v1936,  v2037,  v2137,  v2236,  v2334,  v2431,  v2527,  v2622,  v2716,  v2808,  v2898,  v2986,  v3072,  v3156,  v3238,  v3318,  v3396,  v3472,  v3546,  v3618,  v3688,  v3756,  v3822,  v3886,  v3948,  v4008,  v4066,  v4122,  v4176,  v4228,  v4278,  v4326,
                    v4372,
                    v4416,
                    v4458,
                    v4498,
                    v4536,
                    v4572,
                    v4606,
                    v4638,
                    v4668,
                    v4696,
                    v4722,
                    v4746,
                    v4768,
                    v4788);
                  sub_100043E28();
                  sub_100043E20();
                  sub_100043938();
                  sub_100043930();
                  sub_100043928();
                  sub_100043920();
                  sub_100043D44();
                  sub_100043DB4();
                  sub_100043DAC();
                  sub_100043EF0();
                  sub_100043E50();
                  sub_1000442E4();
                  sub_1000442DC();
                  sub_100044938();
                  sub_100044C9C();
                  sub_100044948();
                  sub_1000448DC();
                  sub_100044FDC();
                  sub_10000F308(*(uint64_t (**)(void))(v4824 + 8));
                }

                else
                {
                  sub_100042420(v106);
                  sub_100046540();
                  sub_10004630C();
                  sub_100046354();
                  uint64_t v487 = sub_10000F3F4();
                  sub_1000431B8(v487, &qword_10006A388);
                  uint64_t v496 = sub_100046A90(v488, v489, v490, v491, v492, v493, v494, v495, v968, v1071, v1174, v1277, v1380);
                  sub_100043F48( v496,  v497,  v498,  v499,  v500,  v501,  v502,  v503,  v1015,  v1118,  v1221,  v1324,  v1427,  v1483,  v1585,  v1687);
                  sub_100043B64();
                  sub_1000462E0();
                  sub_100042E4C();
                  sub_100043380(v16, *(uint64_t (**)(uint64_t, uint64_t))(v96 + 8));
                  sub_100043A38();
                  sub_100043910(v1789, *(uint64_t (**)(uint64_t, uint64_t))(v57 + 8));
                  sub_100043B04();
                  uint64_t v504 = sub_10000F404();
                  uint64_t v512 = sub_1000435E4( v504,  v505,  v506,  v507,  v508,  v509,  v510,  v511,  v1016,  v1119,  v1222,  v1325,  v1428,  v1530,  v1632,  v1734,  v1789,  v1890);
                  uint64_t v520 = sub_100043900( v512,  v513,  v514,  v515,  v516,  v517,  v518,  v519,  v1017,  v1120,  v1223,  v1326,  v1429,  v1531,  v1633,  v1735,  v1836,  v1937,  v1991);
                  uint64_t v528 = sub_100043AE4( v520,  v521,  v522,  v523,  v524,  v525,  v526,  v527,  v1018,  v1121,  v1224,  v1327,  v1430,  v1532,  v1634,  v1736,  v1837,  v1938,  v2038,  v2091);
                  uint64_t v536 = sub_100044AF4( v528,  v529,  v530,  v531,  v532,  v533,  v534,  v535,  v1019,  v1122,  v1225,  v1328,  v1431,  v1533,  v1635,  v1737,  v1838,  v1939,  v2039,  v2138,  v2190);
                  sub_100044940( v536,  v537,  v538,  v539,  v540,  v541,  v542,  v543,  v1020,  v1123,  v1226,  v1329,  v1432,  v1534,  v1636,  v1738,  v1839,  v1940,  v2040,  v2139,  v2237,  v2288);
                  uint64_t v544 = sub_10000F3F4();
                  uint64_t v552 = sub_100043EE8( v544,  v545,  v546,  v547,  v548,  v549,  v550,  v551,  v1021,  v1124,  v1227,  v1330,  v1433,  v1535,  v1637,  v1739,  v1840,  v1941,  v2041,  v2140,  v2238,  v2335,  v2385,  v2481);
                  uint64_t v560 = sub_100043F40( v552,  v553,  v554,  v555,  v556,  v557,  v558,  v559,  v1022,  v1125,  v1228,  v1331,  v1434,  v1536,  v1638,  v1740,  v1841,  v1942,  v2042,  v2141,  v2239,  v2336,  v2432,  v2528,  v2576);
                  uint64_t v568 = sub_1000436E8( v560,  v561,  v562,  v563,  v564,  v565,  v566,  v567,  v1023,  v1126,  v1229,  v1332,  v1435,  v1537,  v1639,  v1741,  v1842,  v1943,  v2043,  v2142,  v2240,  v2337,  v2433,  v2529,  v2623,  v2670,  v2763);
                  uint64_t v576 = sub_1000436C4( v568,  v569,  v570,  v571,  v572,  v573,  v574,  v575,  v1024,  v1127,  v1230,  v1333,  v1436,  v1538,  v1640,  v1742,  v1843,  v1944,  v2044,  v2143,  v2241,  v2338,  v2434,  v2530,  v2624,  v2717,  v2809,  v2854);
                  uint64_t v584 = sub_100043658( v576,  v577,  v578,  v579,  v580,  v581,  v582,  v583,  v1025,  v1128,  v1231,  v1334,  v1437,  v1539,  v1641,  v1743,  v1844,  v1945,  v2045,  v2144,  v2242,  v2339,  v2435,  v2531,  v2625,  v2718,  v2810,  v2899,  v2943,  v3030);
                  uint64_t v592 = sub_10004361C( v584,  v585,  v586,  v587,  v588,  v589,  v590,  v591,  v1026,  v1129,  v1232,  v1335,  v1438,  v1540,  v1642,  v1744,  v1845,  v1946,  v2046,  v2145,  v2243,  v2340,  v2436,  v2532,  v2626,  v2719,  v2811,  v2900,  v2987,  v3073,  v3115,  v3198);
                  uint64_t v600 = sub_100043A48( v592,  v593,  v594,  v595,  v596,  v597,  v598,  v599,  v1027,  v1130,  v1233,  v1336,  v1439,  v1541,  v1643,  v1745,  v1846,  v1947,  v2047,  v2146,  v2244,  v2341,  v2437,  v2533,  v2627,  v2720,  v2812,  v2901,  v2988,  v3074,  v3157,  v3239,  v3279,  v3358);
                  uint64_t v608 = sub_100043A40( v600,  v601,  v602,  v603,  v604,  v605,  v606,  v607,  v1028,  v1131,  v1234,  v1337,  v1440,  v1542,  v1644,  v1746,  v1847,  v1948,  v2048,  v2147,  v2245,  v2342,  v2438,  v2534,  v2628,  v2721,  v2813,  v2902,  v2989,  v3075,  v3158,  v3240,  v3319,  v3397,  v3435);
                  uint64_t v616 = sub_10004384C( v608,  v609,  v610,  v611,  v612,  v613,  v614,  v615,  v1029,  v1132,  v1235,  v1338,  v1441,  v1543,  v1645,  v1747,  v1848,  v1949,  v2049,  v2148,  v2246,  v2343,  v2439,  v2535,  v2629,  v2722,  v2814,  v2903,  v2990,  v3076,  v3159,  v3241,  v3320,  v3398,  v3473,  v3510,  v3583);
                  uint64_t v624 = sub_100043A28( v616,  v617,  v618,  v619,  v620,  v621,  v622,  v623,  v1030,  v1133,  v1236,  v1339,  v1442,  v1544,  v1646,  v1748,  v1849,  v1950,  v2050,  v2149,  v2247,  v2344,  v2440,  v2536,  v2630,  v2723,  v2815,  v2904,  v2991,  v3077,  v3160,  v3242,  v3321,  v3399,  v3474,  v3547,  v3619,  v3654,  v3723);
                  uint64_t v632 = sub_100043A18( v624,  v625,  v626,  v627,  v628,  v629,  v630,  v631,  v1031,  v1134,  v1237,  v1340,  v1443,  v1545,  v1647,  v1749,  v1850,  v1951,  v2051,  v2150,  v2248,  v2345,  v2441,  v2537,  v2631,  v2724,  v2816,  v2905,  v2992,  v3078,  v3161,  v3243,  v3322,  v3400,  v3475,  v3548,  v3620,  v3689,  v3757,  v3790,  v3855);
                  uint64_t v640 = sub_100043A08( v632,  v633,  v634,  v635,  v636,  v637,  v638,  v639,  v1032,  v1135,  v1238,  v1341,  v1444,  v1546,  v1648,  v1750,  v1851,  v1952,  v2052,  v2151,  v2249,  v2346,  v2442,  v2538,  v2632,  v2725,  v2817,  v2906,  v2993,  v3079,  v3162,  v3244,  v3323,  v3401,  v3476,  v3549,  v3621,  v3690,  v3758,  v3823,  v3887,  v3918,  v3979);
                  uint64_t v648 = sub_1000439F8( v640,  v641,  v642,  v643,  v644,  v645,  v646,  v647,  v1033,  v1136,  v1239,  v1342,  v1445,  v1547,  v1649,  v1751,  v1852,  v1953,  v2053,  v2152,  v2250,  v2347,  v2443,  v2539,  v2633,  v2726,  v2818,  v2907,  v2994,  v3080,  v3163,  v3245,  v3324,  v3402,  v3477,  v3550,  v3622,  v3691,  v3759,  v3824,  v3888,  v3949,  v4009,  v4038,  v4095);
                  uint64_t v656 = sub_1000439E8( v648,  v649,  v650,  v651,  v652,  v653,  v654,  v655,  v1034,  v1137,  v1240,  v1343,  v1446,  v1548,  v1650,  v1752,  v1853,  v1954,  v2054,  v2153,  v2251,  v2348,  v2444,  v2540,  v2634,  v2727,  v2819,  v2908,  v2995,  v3081,  v3164,  v3246,  v3325,  v3403,  v3478,  v3551,  v3623,  v3692,  v3760,  v3825,  v3889,  v3950,  v4010,  v4067,  v4123,  v4150,  v4203);
                  uint64_t v664 = sub_1000439E0( v656,  v657,  v658,  v659,  v660,  v661,  v662,  v663,  v1035,  v1138,  v1241,  v1344,  v1447,  v1549,  v1651,  v1753,  v1854,  v1955,  v2055,  v2154,  v2252,  v2349,  v2445,  v2541,  v2635,  v2728,  v2820,  v2909,  v2996,  v3082,  v3165,  v3247,  v3326,  v3404,  v3479,  v3552,  v3624,  v3693,  v3761,  v3826,  v3890,  v3951,  v4011,  v4068,  v4124,  v4177,  v4229,  v4254);
                  sub_1000439D0( v664,  v665,  v666,  v667,  v668,  v669,  v670,  v671,  v1036,  v1139,  v1242,  v1345,  v1448,  v1550,  v1652,  v1754,  v1855,  v1956,  v2056,  v2155,  v2253,  v2350,  v2446,  v2542,  v2636,  v2729,  v2821,  v2910,  v2997,  v3083,  v3166,  v3248,  v3327,  v3405,  v3480,  v3553,  v3625,  v3694,  v3762,  v3827,  v3891,  v3952,  v4012,  v4069,  v4125,  v4178,  v4230,  v4279,  v4303,
                    v4350);
                  sub_10000F4A8();
                  uint64_t v672 = sub_10000F338();
                  uint64_t v680 = sub_1000439B8( v672,  v673,  v674,  v675,  v676,  v677,  v678,  v679,  v1037,  v1140,  v1243,  v1346,  v1449,  v1551,  v1653,  v1755,  v1856,  v1957,  v2057,  v2156,  v2254,  v2351,  v2447,  v2543,  v2637,  v2730,  v2822,  v2911,  v2998,  v3084,  v3167,  v3249,  v3328,  v3406,  v3481,  v3554,  v3626,  v3695,  v3763,  v3828,  v3892,  v3953,  v4013,  v4070,  v4126,  v4179,  v4231,  v4280,  v4327,
                           v4373,
                           v4395,
                           v4438,
                           v4479);
                  sub_1000439A8( v680,  v681,  v682,  v683,  v684,  v685,  v686,  v687,  v1038,  v1141,  v1244,  v1347,  v1450,  v1552,  v1654,  v1756,  v1857,  v1958,  v2058,  v2157,  v2255,  v2352,  v2448,  v2544,  v2638,  v2731,  v2823,  v2912,  v2999,  v3085,  v3168,  v3250,  v3329,  v3407,  v3482,  v3555,  v3627,  v3696,  v3764,  v3829,  v3893,  v3954,  v4014,  v4071,  v4127,  v4180,  v4232,  v4281,  v4328,
                    v4374,
                    v4417,
                    v4459,
                    v4499,
                    v4518,
                    v4555);
                  uint64_t v688 = sub_10000F3FC();
                  uint64_t v696 = sub_1000436F0( v688,  v689,  v690,  v691,  v692,  v693,  v694,  v695,  v1039,  v1142,  v1245,  v1348,  v1451,  v1553,  v1655,  v1757,  v1858,  v1959,  v2059,  v2158,  v2256,  v2353,  v2449,  v2545,  v2639,  v2732);
                  uint64_t v704 = sub_100043624( v696,  v697,  v698,  v699,  v700,  v701,  v702,  v703,  v1040,  v1143,  v1246,  v1349,  v1452,  v1554,  v1656,  v1758,  v1859,  v1960,  v2060,  v2159,  v2257,  v2354,  v2450,  v2546,  v2640,  v2733,  v2824,  v2913,  v3000);
                  uint64_t v712 = sub_100043660( v704,  v705,  v706,  v707,  v708,  v709,  v710,  v711,  v1041,  v1144,  v1247,  v1350,  v1453,  v1555,  v1657,  v1759,  v1860,  v1961,  v2061,  v2160,  v2258,  v2355,  v2451,  v2547,  v2641,  v2734,  v2825,  v2914,  v3001,  v3086,  v3169);
                  uint64_t v720 = sub_100043614( v712,  v713,  v714,  v715,  v716,  v717,  v718,  v719,  v1042,  v1145,  v1248,  v1351,  v1454,  v1556,  v1658,  v1760,  v1861,  v1962,  v2062,  v2161,  v2259,  v2356,  v2452,  v2548,  v2642,  v2735,  v2826,  v2915,  v3002,  v3087,  v3170,  v3251,  v3330);
                  uint64_t v728 = sub_1000437F8( v720,  v721,  v722,  v723,  v724,  v725,  v726,  v727,  v1043,  v1146,  v1249,  v1352,  v1455,  v1557,  v1659,  v1761,  v1862,  v1963,  v2063,  v2162,  v2260,  v2357,  v2453,  v2549,  v2643,  v2736,  v2827,  v2916,  v3003,  v3088,  v3171,  v3252,  v3331,  v3408,  v3483,  v3556);
                  uint64_t v736 = sub_100043A30( v728,  v729,  v730,  v731,  v732,  v733,  v734,  v735,  v1044,  v1147,  v1250,  v1353,  v1456,  v1558,  v1660,  v1762,  v1863,  v1964,  v2064,  v2163,  v2261,  v2358,  v2454,  v2550,  v2644,  v2737,  v2828,  v2917,  v3004,  v3089,  v3172,  v3253,  v3332,  v3409,  v3484,  v3557,  v3628,  v3697);
                  uint64_t v744 = sub_100043A20( v736,  v737,  v738,  v739,  v740,  v741,  v742,  v743,  v1045,  v1148,  v1251,  v1354,  v1457,  v1559,  v1661,  v1763,  v1864,  v1965,  v2065,  v2164,  v2262,  v2359,  v2455,  v2551,  v2645,  v2738,  v2829,  v2918,  v3005,  v3090,  v3173,  v3254,  v3333,  v3410,  v3485,  v3558,  v3629,  v3698,  v3765,  v3830);
                  uint64_t v752 = sub_100043A10( v744,  v745,  v746,  v747,  v748,  v749,  v750,  v751,  v1046,  v1149,  v1252,  v1355,  v1458,  v1560,  v1662,  v1764,  v1865,  v1966,  v2066,  v2165,  v2263,  v2360,  v2456,  v2552,  v2646,  v2739,  v2830,  v2919,  v3006,  v3091,  v3174,  v3255,  v3334,  v3411,  v3486,  v3559,  v3630,  v3699,  v3766,  v3831,  v3894,  v3955);
                  uint64_t v760 = sub_100043A00( v752,  v753,  v754,  v755,  v756,  v757,  v758,  v759,  v1047,  v1150,  v1253,  v1356,  v1459,  v1561,  v1663,  v1765,  v1866,  v1967,  v2067,  v2166,  v2264,  v2361,  v2457,  v2553,  v2647,  v2740,  v2831,  v2920,  v3007,  v3092,  v3175,  v3256,  v3335,  v3412,  v3487,  v3560,  v3631,  v3700,  v3767,  v3832,  v3895,  v3956,  v4015,  v4072);
                  uint64_t v768 = sub_1000439F0( v760,  v761,  v762,  v763,  v764,  v765,  v766,  v767,  v1048,  v1151,  v1254,  v1357,  v1460,  v1562,  v1664,  v1766,  v1867,  v1968,  v2068,  v2167,  v2265,  v2362,  v2458,  v2554,  v2648,  v2741,  v2832,  v2921,  v3008,  v3093,  v3176,  v3257,  v3336,  v3413,  v3488,  v3561,  v3632,  v3701,  v3768,  v3833,  v3896,  v3957,  v4016,  v4073,  v4128,  v4181);
                  uint64_t v776 = sub_1000439D8( v768,  v769,  v770,  v771,  v772,  v773,  v774,  v775,  v1049,  v1152,  v1255,  v1358,  v1461,  v1563,  v1665,  v1767,  v1868,  v1969,  v2069,  v2168,  v2266,  v2363,  v2459,  v2555,  v2649,  v2742,  v2833,  v2922,  v3009,  v3094,  v3177,  v3258,  v3337,  v3414,  v3489,  v3562,  v3633,  v3702,  v3769,  v3834,  v3897,  v3958,  v4017,  v4074,  v4129,  v4182,  v4233,  v4282,  v4329);
                  uint64_t v784 = sub_1000439C8( v776,  v777,  v778,  v779,  v780,  v781,  v782,  v783,  v1050,  v1153,  v1256,  v1359,  v1462,  v1564,  v1666,  v1768,  v1869,  v1970,  v2070,  v2169,  v2267,  v2364,  v2460,  v2556,  v2650,  v2743,  v2834,  v2923,  v3010,  v3095,  v3178,  v3259,  v3338,  v3415,  v3490,  v3563,  v3634,  v3703,  v3770,  v3835,  v3898,  v3959,  v4018,  v4075,  v4130,  v4183,  v4234,  v4283,  v4330,
                           v4375,
                           v4418);
                  uint64_t v792 = sub_1000439C0( v784,  v785,  v786,  v787,  v788,  v789,  v790,  v791,  v1051,  v1154,  v1257,  v1360,  v1463,  v1565,  v1667,  v1769,  v1870,  v1971,  v2071,  v2170,  v2268,  v2365,  v2461,  v2557,  v2651,  v2744,  v2835,  v2924,  v3011,  v3096,  v3179,  v3260,  v3339,  v3416,  v3491,  v3564,  v3635,  v3704,  v3771,  v3836,  v3899,  v3960,  v4019,  v4076,  v4131,  v4184,  v4235,  v4284,  v4331,
                           v4376,
                           v4419,
                           v4460);
                  uint64_t v800 = sub_1000439B0( v792,  v793,  v794,  v795,  v796,  v797,  v798,  v799,  v1052,  v1155,  v1258,  v1361,  v1464,  v1566,  v1668,  v1770,  v1871,  v1972,  v2072,  v2171,  v2269,  v2366,  v2462,  v2558,  v2652,  v2745,  v2836,  v2925,  v3012,  v3097,  v3180,  v3261,  v3340,  v3417,  v3492,  v3565,  v3636,  v3705,  v3772,  v3837,  v3900,  v3961,  v4020,  v4077,  v4132,  v4185,  v4236,  v4285,  v4332,
                           v4377,
                           v4420,
                           v4461,
                           v4500,
                           v4537);
                  uint64_t v808 = sub_1000439A0( v800,  v801,  v802,  v803,  v804,  v805,  v806,  v807,  v1053,  v1156,  v1259,  v1362,  v1465,  v1567,  v1669,  v1771,  v1872,  v1973,  v2073,  v2172,  v2270,  v2367,  v2463,  v2559,  v2653,  v2746,  v2837,  v2926,  v3013,  v3098,  v3181,  v3262,  v3341,  v3418,  v3493,  v3566,  v3637,  v3706,  v3773,  v3838,  v3901,  v3962,  v4021,  v4078,  v4133,  v4186,  v4237,  v4286,  v4333,
                           v4378,
                           v4421,
                           v4462,
                           v4501,
                           v4538,
                           v4573,
                           v4590);
                  uint64_t v816 = sub_100043998( v808,  v809,  v810,  v811,  v812,  v813,  v814,  v815,  v1054,  v1157,  v1260,  v1363,  v1466,  v1568,  v1670,  v1772,  v1873,  v1974,  v2074,  v2173,  v2271,  v2368,  v2464,  v2560,  v2654,  v2747,  v2838,  v2927,  v3014,  v3099,  v3182,  v3263,  v3342,  v3419,  v3494,  v3567,  v3638,  v3707,  v3774,  v3839,  v3902,  v3963,  v4022,  v4079,  v4134,  v4187,  v4238,  v4287,  v4334,
                           v4379,
                           v4422,
                           v4463,
                           v4502,
                           v4539,
                           v4574,
                           v4607,
                           v4623);
                  uint64_t v824 = sub_100043990( v816,  v817,  v818,  v819,  v820,  v821,  v822,  v823,  v1055,  v1158,  v1261,  v1364,  v1467,  v1569,  v1671,  v1773,  v1874,  v1975,  v2075,  v2174,  v2272,  v2369,  v2465,  v2561,  v2655,  v2748,  v2839,  v2928,  v3015,  v3100,  v3183,  v3264,  v3343,  v3420,  v3495,  v3568,  v3639,  v3708,  v3775,  v3840,  v3903,  v3964,  v4023,  v4080,  v4135,  v4188,  v4239,  v4288,  v4335,
                           v4380,
                           v4423,
                           v4464,
                           v4503,
                           v4540,
                           v4575,
                           v4608,
                           v4639,
                           v4654);
                  uint64_t v832 = sub_100043988( v824,  v825,  v826,  v827,  v828,  v829,  v830,  v831,  v1056,  v1159,  v1262,  v1365,  v1468,  v1570,  v1672,  v1774,  v1875,  v1976,  v2076,  v2175,  v2273,  v2370,  v2466,  v2562,  v2656,  v2749,  v2840,  v2929,  v3016,  v3101,  v3184,  v3265,  v3344,  v3421,  v3496,  v3569,  v3640,  v3709,  v3776,  v3841,  v3904,  v3965,  v4024,  v4081,  v4136,  v4189,  v4240,  v4289,  v4336,
                           v4381,
                           v4424,
                           v4465,
                           v4504,
                           v4541,
                           v4576,
                           v4609,
                           v4640,
                           v4669,
                           v4683);
                  uint64_t v840 = sub_100043980( v832,  v833,  v834,  v835,  v836,  v837,  v838,  v839,  v1057,  v1160,  v1263,  v1366,  v1469,  v1571,  v1673,  v1775,  v1876,  v1977,  v2077,  v2176,  v2274,  v2371,  v2467,  v2563,  v2657,  v2750,  v2841,  v2930,  v3017,  v3102,  v3185,  v3266,  v3345,  v3422,  v3497,  v3570,  v3641,  v3710,  v3777,  v3842,  v3905,  v3966,  v4025,  v4082,  v4137,  v4190,  v4241,  v4290,  v4337,
                           v4382,
                           v4425,
                           v4466,
                           v4505,
                           v4542,
                           v4577,
                           v4610,
                           v4641,
                           v4670,
                           v4697,
                           v4710);
                  uint64_t v848 = sub_100043978( v840,  v841,  v842,  v843,  v844,  v845,  v846,  v847,  v1058,  v1161,  v1264,  v1367,  v1470,  v1572,  v1674,  v1776,  v1877,  v1978,  v2078,  v2177,  v2275,  v2372,  v2468,  v2564,  v2658,  v2751,  v2842,  v2931,  v3018,  v3103,  v3186,  v3267,  v3346,  v3423,  v3498,  v3571,  v3642,  v3711,  v3778,  v3843,  v3906,  v3967,  v4026,  v4083,  v4138,  v4191,  v4242,  v4291,  v4338,
                           v4383,
                           v4426,
                           v4467,
                           v4506,
                           v4543,
                           v4578,
                           v4611,
                           v4642,
                           v4671,
                           v4698,
                           v4723,
                           v4735);
                  uint64_t v856 = sub_100043970( v848,  v849,  v850,  v851,  v852,  v853,  v854,  v855,  v1059,  v1162,  v1265,  v1368,  v1471,  v1573,  v1675,  v1777,  v1878,  v1979,  v2079,  v2178,  v2276,  v2373,  v2469,  v2565,  v2659,  v2752,  v2843,  v2932,  v3019,  v3104,  v3187,  v3268,  v3347,  v3424,  v3499,  v3572,  v3643,  v3712,  v3779,  v3844,  v3907,  v3968,  v4027,  v4084,  v4139,  v4192,  v4243,  v4292,  v4339,
                           v4384,
                           v4427,
                           v4468,
                           v4507,
                           v4544,
                           v4579,
                           v4612,
                           v4643,
                           v4672,
                           v4699,
                           v4724,
                           v4747,
                           v4758);
                  uint64_t v864 = sub_100043968( v856,  v857,  v858,  v859,  v860,  v861,  v862,  v863,  v1060,  v1163,  v1266,  v1369,  v1472,  v1574,  v1676,  v1778,  v1879,  v1980,  v2080,  v2179,  v2277,  v2374,  v2470,  v2566,  v2660,  v2753,  v2844,  v2933,  v3020,  v3105,  v3188,  v3269,  v3348,  v3425,  v3500,  v3573,  v3644,  v3713,  v3780,  v3845,  v3908,  v3969,  v4028,  v4085,  v4140,  v4193,  v4244,  v4293,  v4340,
                           v4385,
                           v4428,
                           v4469,
                           v4508,
                           v4545,
                           v4580,
                           v4613,
                           v4644,
                           v4673,
                           v4700,
                           v4725,
                           v4748,
                           v4769,
                           v4779);
                  uint64_t v872 = sub_100043960( v864,  v865,  v866,  v867,  v868,  v869,  v870,  v871,  v1061,  v1164,  v1267,  v1370,  v1473,  v1575,  v1677,  v1779,  v1880,  v1981,  v2081,  v2180,  v2278,  v2375,  v2471,  v2567,  v2661,  v2754,  v2845,  v2934,  v3021,  v3106,  v3189,  v3270,  v3349,  v3426,  v3501,  v3574,  v3645,  v3714,  v3781,  v3846,  v3909,  v3970,  v4029,  v4086,  v4141,  v4194,  v4245,  v4294,  v4341,
                           v4386,
                           v4429,
                           v4470,
                           v4509,
                           v4546,
                           v4581,
                           v4614,
                           v4645,
                           v4674,
                           v4701,
                           v4726,
                           v4749,
                           v4770,
                           v4789);
                  uint64_t v880 = sub_100043958( v872,  v873,  v874,  v875,  v876,  v877,  v878,  v879,  v1062,  v1165,  v1268,  v1371,  v1474,  v1576,  v1678,  v1780,  v1881,  v1982,  v2082,  v2181,  v2279,  v2376,  v2472,  v2568,  v2662,  v2755,  v2846,  v2935,  v3022,  v3107,  v3190,  v3271,  v3350,  v3427,  v3502,  v3575,  v3646,  v3715,  v3782,  v3847,  v3910,  v3971,  v4030,  v4087,  v4142,  v4195,  v4246,  v4295,  v4342,
                           v4387,
                           v4430,
                           v4471,
                           v4510,
                           v4547,
                           v4582,
                           v4615,
                           v4646,
                           v4675,
                           v4702,
                           v4727,
                           v4750,
                           v4771,
                           v4790);
                  uint64_t v888 = sub_100043950( v880,  v881,  v882,  v883,  v884,  v885,  v886,  v887,  v1063,  v1166,  v1269,  v1372,  v1475,  v1577,  v1679,  v1781,  v1882,  v1983,  v2083,  v2182,  v2280,  v2377,  v2473,  v2569,  v2663,  v2756,  v2847,  v2936,  v3023,  v3108,  v3191,  v3272,  v3351,  v3428,  v3503,  v3576,  v3647,  v3716,  v3783,  v3848,  v3911,  v3972,  v4031,  v4088,  v4143,  v4196,  v4247,  v4296,  v4343,
                           v4388,
                           v4431,
                           v4472,
                           v4511,
                           v4548,
                           v4583,
                           v4616,
                           v4647,
                           v4676,
                           v4703,
                           v4728,
                           v4751,
                           v4772,
                           v4791);
                  uint64_t v896 = sub_100043948( v888,  v889,  v890,  v891,  v892,  v893,  v894,  v895,  v1064,  v1167,  v1270,  v1373,  v1476,  v1578,  v1680,  v1782,  v1883,  v1984,  v2084,  v2183,  v2281,  v2378,  v2474,  v2570,  v2664,  v2757,  v2848,  v2937,  v3024,  v3109,  v3192,  v3273,  v3352,  v3429,  v3504,  v3577,  v3648,  v3717,  v3784,  v3849,  v3912,  v3973,  v4032,  v4089,  v4144,  v4197,  v4248,  v4297,  v4344,
                           v4389,
                           v4432,
                           v4473,
                           v4512,
                           v4549,
                           v4584,
                           v4617,
                           v4648,
                           v4677,
                           v4704,
                           v4729,
                           v4752,
                           v4773,
                           v4792);
                  uint64_t v904 = sub_100043940( v896,  v897,  v898,  v899,  v900,  v901,  v902,  v903,  v1065,  v1168,  v1271,  v1374,  v1477,  v1579,  v1681,  v1783,  v1884,  v1985,  v2085,  v2184,  v2282,  v2379,  v2475,  v2571,  v2665,  v2758,  v2849,  v2938,  v3025,  v3110,  v3193,  v3274,  v3353,  v3430,  v3505,  v3578,  v3649,  v3718,  v3785,  v3850,  v3913,  v3974,  v4033,  v4090,  v4145,  v4198,  v4249,  v4298,  v4345,
                           v4390,
                           v4433,
                           v4474,
                           v4513,
                           v4550,
                           v4585,
                           v4618,
                           v4649,
                           v4678,
                           v4705,
                           v4730,
                           v4753,
                           v4774,
                           v4793);
                  uint64_t v912 = sub_100043E48( v904,  v905,  v906,  v907,  v908,  v909,  v910,  v911,  v1066,  v1169,  v1272,  v1375,  v1478,  v1580,  v1682,  v1784,  v1885,  v1986,  v2086,  v2185,  v2283,  v2380,  v2476,  v2572,  v2666,  v2759,  v2850,  v2939,  v3026,  v3111,  v3194,  v3275,  v3354,  v3431,  v3506,  v3579,  v3650,  v3719,  v3786,  v3851,  v3914,  v3975,  v4034,  v4091,  v4146,  v4199,  v4250,  v4299,  v4346,
                           v4391,
                           v4434,
                           v4475,
                           v4514,
                           v4551,
                           v4586,
                           v4619,
                           v4650,
                           v4679,
                           v4706,
                           v4731,
                           v4754,
                           v4775,
                           v4794);
                  uint64_t v920 = sub_100043E40( v912,  v913,  v914,  v915,  v916,  v917,  v918,  v919,  v1067,  v1170,  v1273,  v1376,  v1479,  v1581,  v1683,  v1785,  v1886,  v1987,  v2087,  v2186,  v2284,  v2381,  v2477,  v2573,  v2667,  v2760,  v2851,  v2940,  v3027,  v3112,  v3195,  v3276,  v3355,  v3432,  v3507,  v3580,  v3651,  v3720,  v3787,  v3852,  v3915,  v3976,  v4035,  v4092,  v4147,  v4200,  v4251,  v4300,  v4347,
                           v4392,
                           v4435,
                           v4476,
                           v4515,
                           v4552,
                           v4587,
                           v4620,
                           v4651,
                           v4680,
                           v4707,
                           v4732,
                           v4755,
                           v4776,
                           v4795);
                  uint64_t v928 = sub_100043E38( v920,  v921,  v922,  v923,  v924,  v925,  v926,  v927,  v1068,  v1171,  v1274,  v1377,  v1480,  v1582,  v1684,  v1786,  v1887,  v1988,  v2088,  v2187,  v2285,  v2382,  v2478,  v2574,  v2668,  v2761,  v2852,  v2941,  v3028,  v3113,  v3196,  v3277,  v3356,  v3433,  v3508,  v3581,  v3652,  v3721,  v3788,  v3853,  v3916,  v3977,  v4036,  v4093,  v4148,  v4201,  v4252,  v4301,  v4348,
                           v4393,
                           v4436,
                           v4477,
                           v4516,
                           v4553,
                           v4588,
                           v4621,
                           v4652,
                           v4681,
                           v4708,
                           v4733,
                           v4756,
                           v4777,
                           v4796);
                  sub_100043E30( v928,  v929,  v930,  v931,  v932,  v933,  v934,  v935,  v1069,  v1172,  v1275,  v1378,  v1481,  v1583,  v1685,  v1787,  v1888,  v1989,  v2089,  v2188,  v2286,  v2383,  v2479,  v2575,  v2669,  v2762,  v2853,  v2942,  v3029,  v3114,  v3197,  v3278,  v3357,  v3434,  v3509,  v3582,  v3653,  v3722,  v3789,  v3854,  v3917,  v3978,  v4037,  v4094,  v4149,  v4202,  v4253,  v4302,  v4349,
                    v4394,
                    v4437,
                    v4478,
                    v4517,
                    v4554,
                    v4589,
                    v4622,
                    v4653,
                    v4682,
                    v4709,
                    v4734,
                    v4757,
                    v4778,
                    v4797);
                  sub_100043E28();
                  sub_100043E20();
                  sub_100043938();
                  uint64_t v936 = sub_100043930();
                  sub_100044584( v936,  v937,  v938,  v939,  v940,  v941,  v942,  v943,  v1070,  v1173,  v1276,  v1379,  v1482,  v1584,  v1686,  v1788,  v1889,  v1990,  v2090,  v2189,  v2287,  v2384,  v2480);
                  sub_100043928();
                  sub_100043920();
                  sub_100043D44();
                  sub_100043DB4();
                  sub_100043DAC();
                  sub_100043EF0();
                  sub_100043E50();
                  sub_1000442E4();
                  sub_1000442DC();
                  sub_100044938();
                  sub_100044D4C();
                  uint64_t v944 = (uint64_t (*)(void))sub_10000F588();
                  sub_10000F308(v944);
                }

                return;
              }

              sub_100041358(*(void *)(v50 + 712), &qword_10006A378);
            }

            uint64_t v955 = sub_100045394();
            ToolSymbolIconColor.init(rawValue:)(v955, v956);
            uint64_t v957 = sub_1000454D8();
            if (v950)
            {
              uint64_t v958 = sub_100044A10();
              sub_1000431B8(v958, &qword_10006A378);
            }

            else
            {
              sub_100044A04(v957);
            }

            sub_100046388(*(void *)(v50 + 720), v961, &qword_10006A378);
            uint64_t v962 = sub_1000454A4();
            if (v950)
            {
              uint64_t v963 = sub_100044F08();
              sub_1000431B8(v963, &qword_10006A378);
            }

            else
            {
              sub_100047480(v962);
            }

            sub_100047458();
            sub_10000844C(&qword_10006A428);
            sub_1000451E0();
            sub_100046C00();
            uint64_t v960 = (unsigned int *)&enum case for ToolSymbolIconStyle.multicolor(_:);
            goto LABEL_127;
          }
        }

        else
        {
          _OWORD *v86 = 0u;
          *(_OWORD *)(v4824 + 320) = 0u;
          uint64_t v945 = v16;
          uint64_t v16 = v82;
        }

        sub_1000431B8((uint64_t)v87, &qword_10006A420);
        uint64_t v948 = v4814;
        goto LABEL_111;
      }

      sub_1000132B8();
    }

    swift_bridgeObjectRelease(*(void *)(v4824 + 464));
    sub_100046854();
    sub_1000432E8();
    uint64_t v76 = sub_1000448B0();
    goto LABEL_101;
  }

  BOOL v4818 = sub_10004459C();
  uint64_t v38 = 0LL;
  LODWORD(v4816) = enum case for WFDeviceIdiomResource.Requirement.equalTo(_:);
  LODWORD(v4806) = enum case for WFDeviceIdiomResource.Requirement.notEqualTo(_:);
  LODWORD(v4802) = enum case for RuntimePlatform.watch(_:);
  LODWORD(v4813) = enum case for RuntimePlatform.macintosh(_:);
  uint64_t v4810 = v37;
  while (1)
  {
    if (v4818) {
      uint64_t v39 = (uint64_t)sub_1000430AC(v37 + 8 * v38);
    }
    else {
      uint64_t v39 = sub_100045150();
    }
    uint64_t v3 = v39;
    BOOL v22 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(v38 + 1);
    if (__OFADD__(v38, 1LL))
    {
      __break(1u);
LABEL_129:
      __break(1u);
LABEL_130:
      __break(1u);
      goto LABEL_131;
    }

    uint64_t v33 = *(void **)(v4824 + 1000);
    uint64_t v13 = *(void *)(v4824 + 984);
    sub_1000450E4();
    if (sub_100046654() == (_DWORD)v4816)
    {
      sub_100043184(*(uint64_t (**)(uint64_t))(v6 + 96));
      sub_1000432D0();
      if (!(!v950 & v41)) {
        __asm { BR              X9 }
      }

      goto LABEL_98;
    }

    sub_100047068();
    if (v950) {
      break;
    }

    sub_100043124(*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8));
    ++v38;
  }

  sub_100043124(*(uint64_t (**)(uint64_t, uint64_t))(v6 + 96));
  sub_1000432D0();
  if (!(!v950 & v41)) {
    __asm { BR              X9 }
  }

            sub_100043410(*(void *)(v52 + 720), v948, v949, *(void *)(v52 + 632));
LABEL_112:
            sub_100044A38(v4805);
            swift_bridgeObjectRelease(*(void *)(v4820 + 536));
            uint64_t v951 = v87 == 1953392980 && v88 == 0xE400000000000000LL;
            if (v951 || (sub_100043138(v87, v88) & 1) != 0)
            {
              uint64_t v952 = *(void *)(v52 + 712);
              uint64_t v953 = *(void *)(v52 + 632);
              sub_100046390(*(void *)(v52 + 720), v950, &qword_10006A378);
              sub_100043DBC(v952, 1LL, v953);
              if (!v951)
              {
                uint64_t v956 = sub_10004584C();
                sub_100041358(v956, &qword_10006A378);
                sub_100043024();
                sub_100044D5C(v13, v952);
                sub_100044D5C(v953, v13);
                uint64_t v957 = (unsigned int *)&enum case for ToolSymbolIconStyle.tinted(_:);
LABEL_127:
                uint64_t v961 = *(void **)(v4820 + 1256);
                uint64_t v962 = *(void *)(v4820 + 1176);
                id v59 = *(void *)(v4820 + 1168);
                sub_10004314C(v962, *v957, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v59 + 104));
                uint64_t v963 = (uint64_t)v961 + *(int *)(sub_10000844C(&qword_10006A430) + 48);
                *uint64_t v961 = v4809;
                v961[1] = v18;
                sub_10004314C(v963, v962, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v59 + 32));
                uint64_t v964 = sub_1000432E8();
                sub_100043084(v964);
                sub_100047904();
LABEL_102:
                uint64_t v4806 = *(void *)(v52 + 1672);
                uint64_t v4810 = *(void *)(v52 + 2032);
                id v99 = *(void *)(v52 + 1320);
                uint64_t v4796 = *(void *)(v52 + 1296);
                uint64_t v4798 = *(void *)(v52 + 1256);
                uint64_t v4800 = *(void *)(v52 + 616);
                uint64_t v4802 = *(void *)(v52 + 1872);
                sub_100044F74();
                uint64_t v4795 = v100;
                sub_100045B34();
                uint64_t v102 = sub_100044B20(v101, "identifier");
                sub_100046014((uint64_t)v102);
                sub_100045FBC();
                uint64_t v103 = sub_100044B10();
                uint64_t v104 = (void *)sub_100045958(v103);
                v104[9] = v4820 + 360;
                v104[10] = v4796;
                v104[11] = v4819;
                v104[12] = v4798;
                v104[13] = v4802;
                v104[14] = v4795;
                v104[15] = v4800;
                v104[16] = v4820 + 456;
                sub_100043B58((uint64_t)v104, v4806);
                uint64_t v105 = sub_100046BCC();
                ToolDatabase.Rollbackable.inSavepoint<A>(name:work:)(v105, v106, v107, v108);
                uint64_t v109 = sub_100043D84();
                if (v4810)
                {
                  uint64_t v111 = *(void *)(v4820 + 1552);
                  uint64_t v112 = *(void *)(v4820 + 1520);
                  sub_100043820(v110);
                  sub_100046540();
                  sub_10004630C();
                  sub_100046354();
                  uint64_t v113 = sub_10000F3F4();
                  sub_10004610C(v113, &qword_10006A388);
                  sub_100046644();
                  sub_100043910(v111, *(uint64_t (**)(uint64_t, uint64_t))(v112 + 8));
                  sub_100043B64();
                  sub_1000462E0();
                  sub_100008D58();
                  sub_100047630();
                  sub_100043A38();
                  sub_100046748();
                  sub_100043B04();
                  sub_100042810();
                  sub_10000F41C();
                  sub_10000F4A0();
                  sub_10000F3FC();
                  sub_10000F484();
                  sub_10000F338();
                  sub_10000F404();
                  sub_10000F4A8();
                  sub_10000F4EC();
                  uint64_t v114 = sub_10000F3F4();
                  uint64_t v122 = sub_1000436F0( v114,  v115,  v116,  v117,  v118,  v119,  v120,  v121,  v965,  v1068,  v1171,  v1274,  v1377,  v1480,  v1582,  v1684,  v1786,  v1887,  v1988,  v2088,  v2187,  v2285,  v2382,  v2478,  v2573,  v2667);
                  uint64_t v130 = sub_1000436E8( v122,  v123,  v124,  v125,  v126,  v127,  v128,  v129,  v966,  v1069,  v1172,  v1275,  v1378,  v1481,  v1583,  v1685,  v1787,  v1888,  v1989,  v2089,  v2188,  v2286,  v2383,  v2479,  v2574,  v2668,  v2760);
                  uint64_t v138 = sub_1000436C4( v130,  v131,  v132,  v133,  v134,  v135,  v136,  v137,  v967,  v1070,  v1173,  v1276,  v1379,  v1482,  v1584,  v1686,  v1788,  v1889,  v1990,  v2090,  v2189,  v2287,  v2384,  v2480,  v2575,  v2669,  v2761,  v2851);
                  uint64_t v146 = sub_100043624( v138,  v139,  v140,  v141,  v142,  v143,  v144,  v145,  v968,  v1071,  v1174,  v1277,  v1380,  v1483,  v1585,  v1687,  v1789,  v1890,  v1991,  v2091,  v2190,  v2288,  v2385,  v2481,  v2576,  v2670,  v2762,  v2852,  v2940);
                  uint64_t v154 = sub_100043658( v146,  v147,  v148,  v149,  v150,  v151,  v152,  v153,  v969,  v1072,  v1175,  v1278,  v1381,  v1484,  v1586,  v1688,  v1790,  v1891,  v1992,  v2092,  v2191,  v2289,  v2386,  v2482,  v2577,  v2671,  v2763,  v2853,  v2941,  v3027);
                  uint64_t v162 = sub_100043660( v154,  v155,  v156,  v157,  v158,  v159,  v160,  v161,  v970,  v1073,  v1176,  v1279,  v1382,  v1485,  v1587,  v1689,  v1791,  v1892,  v1993,  v2093,  v2192,  v2290,  v2387,  v2483,  v2578,  v2672,  v2764,  v2854,  v2942,  v3028,  v3112);
                  uint64_t v170 = sub_10004361C( v162,  v163,  v164,  v165,  v166,  v167,  v168,  v169,  v971,  v1074,  v1177,  v1280,  v1383,  v1486,  v1588,  v1690,  v1792,  v1893,  v1994,  v2094,  v2193,  v2291,  v2388,  v2484,  v2579,  v2673,  v2765,  v2855,  v2943,  v3029,  v3113,  v3195);
                  uint64_t v178 = sub_100043614( v170,  v171,  v172,  v173,  v174,  v175,  v176,  v177,  v972,  v1075,  v1178,  v1281,  v1384,  v1487,  v1589,  v1691,  v1793,  v1894,  v1995,  v2095,  v2194,  v2292,  v2389,  v2485,  v2580,  v2674,  v2766,  v2856,  v2944,  v3030,  v3114,  v3196,  v3276);
                  uint64_t v186 = sub_100043A48( v178,  v179,  v180,  v181,  v182,  v183,  v184,  v185,  v973,  v1076,  v1179,  v1282,  v1385,  v1488,  v1590,  v1692,  v1794,  v1895,  v1996,  v2096,  v2195,  v2293,  v2390,  v2486,  v2581,  v2675,  v2767,  v2857,  v2945,  v3031,  v3115,  v3197,  v3277,  v3355);
                  uint64_t v194 = sub_100043A40( v186,  v187,  v188,  v189,  v190,  v191,  v192,  v193,  v974,  v1077,  v1180,  v1283,  v1386,  v1489,  v1591,  v1693,  v1795,  v1896,  v1997,  v2097,  v2196,  v2294,  v2391,  v2487,  v2582,  v2676,  v2768,  v2858,  v2946,  v3032,  v3116,  v3198,  v3278,  v3356,  v3432);
                  uint64_t v202 = sub_1000437F8( v194,  v195,  v196,  v197,  v198,  v199,  v200,  v201,  v975,  v1078,  v1181,  v1284,  v1387,  v1490,  v1592,  v1694,  v1796,  v1897,  v1998,  v2098,  v2197,  v2295,  v2392,  v2488,  v2583,  v2677,  v2769,  v2859,  v2947,  v3033,  v3117,  v3199,  v3279,  v3357,  v3433,  v3507);
                  uint64_t v210 = sub_10004384C( v202,  v203,  v204,  v205,  v206,  v207,  v208,  v209,  v976,  v1079,  v1182,  v1285,  v1388,  v1491,  v1593,  v1695,  v1797,  v1898,  v1999,  v2099,  v2198,  v2296,  v2393,  v2489,  v2584,  v2678,  v2770,  v2860,  v2948,  v3034,  v3118,  v3200,  v3280,  v3358,  v3434,  v3508,  v3580);
                  uint64_t v218 = sub_100043A30( v210,  v211,  v212,  v213,  v214,  v215,  v216,  v217,  v977,  v1080,  v1183,  v1286,  v1389,  v1492,  v1594,  v1696,  v1798,  v1899,  v2000,  v2100,  v2199,  v2297,  v2394,  v2490,  v2585,  v2679,  v2771,  v2861,  v2949,  v3035,  v3119,  v3201,  v3281,  v3359,  v3435,  v3509,  v3581,  v3651);
                  uint64_t v226 = sub_100043A28( v218,  v219,  v220,  v221,  v222,  v223,  v224,  v225,  v978,  v1081,  v1184,  v1287,  v1390,  v1493,  v1595,  v1697,  v1799,  v1900,  v2001,  v2101,  v2200,  v2298,  v2395,  v2491,  v2586,  v2680,  v2772,  v2862,  v2950,  v3036,  v3120,  v3202,  v3282,  v3360,  v3436,  v3510,  v3582,  v3652,  v3720);
                  uint64_t v234 = sub_100043A20( v226,  v227,  v228,  v229,  v230,  v231,  v232,  v233,  v979,  v1082,  v1185,  v1288,  v1391,  v1494,  v1596,  v1698,  v1800,  v1901,  v2002,  v2102,  v2201,  v2299,  v2396,  v2492,  v2587,  v2681,  v2773,  v2863,  v2951,  v3037,  v3121,  v3203,  v3283,  v3361,  v3437,  v3511,  v3583,  v3653,  v3721,  v3787);
                  uint64_t v242 = sub_100043A18( v234,  v235,  v236,  v237,  v238,  v239,  v240,  v241,  v980,  v1083,  v1186,  v1289,  v1392,  v1495,  v1597,  v1699,  v1801,  v1902,  v2003,  v2103,  v2202,  v2300,  v2397,  v2493,  v2588,  v2682,  v2774,  v2864,  v2952,  v3038,  v3122,  v3204,  v3284,  v3362,  v3438,  v3512,  v3584,  v3654,  v3722,  v3788,  v3852);
                  uint64_t v250 = sub_100043A10( v242,  v243,  v244,  v245,  v246,  v247,  v248,  v249,  v981,  v1084,  v1187,  v1290,  v1393,  v1496,  v1598,  v1700,  v1802,  v1903,  v2004,  v2104,  v2203,  v2301,  v2398,  v2494,  v2589,  v2683,  v2775,  v2865,  v2953,  v3039,  v3123,  v3205,  v3285,  v3363,  v3439,  v3513,  v3585,  v3655,  v3723,  v3789,  v3853,  v3915);
                  uint64_t v258 = sub_100043A08( v250,  v251,  v252,  v253,  v254,  v255,  v256,  v257,  v982,  v1085,  v1188,  v1291,  v1394,  v1497,  v1599,  v1701,  v1803,  v1904,  v2005,  v2105,  v2204,  v2302,  v2399,  v2495,  v2590,  v2684,  v2776,  v2866,  v2954,  v3040,  v3124,  v3206,  v3286,  v3364,  v3440,  v3514,  v3586,  v3656,  v3724,  v3790,  v3854,  v3916,  v3976);
                  uint64_t v266 = sub_100043A00( v258,  v259,  v260,  v261,  v262,  v263,  v264,  v265,  v983,  v1086,  v1189,  v1292,  v1395,  v1498,  v1600,  v1702,  v1804,  v1905,  v2006,  v2106,  v2205,  v2303,  v2400,  v2496,  v2591,  v2685,  v2777,  v2867,  v2955,  v3041,  v3125,  v3207,  v3287,  v3365,  v3441,  v3515,  v3587,  v3657,  v3725,  v3791,  v3855,  v3917,  v3977,  v4035);
                  uint64_t v274 = sub_1000439F8( v266,  v267,  v268,  v269,  v270,  v271,  v272,  v273,  v984,  v1087,  v1190,  v1293,  v1396,  v1499,  v1601,  v1703,  v1805,  v1906,  v2007,  v2107,  v2206,  v2304,  v2401,  v2497,  v2592,  v2686,  v2778,  v2868,  v2956,  v3042,  v3126,  v3208,  v3288,  v3366,  v3442,  v3516,  v3588,  v3658,  v3726,  v3792,  v3856,  v3918,  v3978,  v4036,  v4092);
                  uint64_t v282 = sub_1000439F0( v274,  v275,  v276,  v277,  v278,  v279,  v280,  v281,  v985,  v1088,  v1191,  v1294,  v1397,  v1500,  v1602,  v1704,  v1806,  v1907,  v2008,  v2108,  v2207,  v2305,  v2402,  v2498,  v2593,  v2687,  v2779,  v2869,  v2957,  v3043,  v3127,  v3209,  v3289,  v3367,  v3443,  v3517,  v3589,  v3659,  v3727,  v3793,  v3857,  v3919,  v3979,  v4037,  v4093,  v4147);
                  uint64_t v290 = sub_1000439E8( v282,  v283,  v284,  v285,  v286,  v287,  v288,  v289,  v986,  v1089,  v1192,  v1295,  v1398,  v1501,  v1603,  v1705,  v1807,  v1908,  v2009,  v2109,  v2208,  v2306,  v2403,  v2499,  v2594,  v2688,  v2780,  v2870,  v2958,  v3044,  v3128,  v3210,  v3290,  v3368,  v3444,  v3518,  v3590,  v3660,  v3728,  v3794,  v3858,  v3920,  v3980,  v4038,  v4094,  v4148,  v4200);
                  uint64_t v298 = sub_1000439E0( v290,  v291,  v292,  v293,  v294,  v295,  v296,  v297,  v987,  v1090,  v1193,  v1296,  v1399,  v1502,  v1604,  v1706,  v1808,  v1909,  v2010,  v2110,  v2209,  v2307,  v2404,  v2500,  v2595,  v2689,  v2781,  v2871,  v2959,  v3045,  v3129,  v3211,  v3291,  v3369,  v3445,  v3519,  v3591,  v3661,  v3729,  v3795,  v3859,  v3921,  v3981,  v4039,  v4095,  v4149,  v4201,  v4251);
                  uint64_t v306 = sub_1000439D8( v298,  v299,  v300,  v301,  v302,  v303,  v304,  v305,  v988,  v1091,  v1194,  v1297,  v1400,  v1503,  v1605,  v1707,  v1809,  v1910,  v2011,  v2111,  v2210,  v2308,  v2405,  v2501,  v2596,  v2690,  v2782,  v2872,  v2960,  v3046,  v3130,  v3212,  v3292,  v3370,  v3446,  v3520,  v3592,  v3662,  v3730,  v3796,  v3860,  v3922,  v3982,  v4040,  v4096,  v4150,  v4202,  v4252,  v4300);
                  uint64_t v314 = sub_1000439D0( v306,  v307,  v308,  v309,  v310,  v311,  v312,  v313,  v989,  v1092,  v1195,  v1298,  v1401,  v1504,  v1606,  v1708,  v1810,  v1911,  v2012,  v2112,  v2211,  v2309,  v2406,  v2502,  v2597,  v2691,  v2783,  v2873,  v2961,  v3047,  v3131,  v3213,  v3293,  v3371,  v3447,  v3521,  v3593,  v3663,  v3731,  v3797,  v3861,  v3923,  v3983,  v4041,  v4097,  v4151,  v4203,  v4253,  v4301,
                           v4347);
                  uint64_t v322 = sub_1000439C8( v314,  v315,  v316,  v317,  v318,  v319,  v320,  v321,  v990,  v1093,  v1196,  v1299,  v1402,  v1505,  v1607,  v1709,  v1811,  v1912,  v2013,  v2113,  v2212,  v2310,  v2407,  v2503,  v2598,  v2692,  v2784,  v2874,  v2962,  v3048,  v3132,  v3214,  v3294,  v3372,  v3448,  v3522,  v3594,  v3664,  v3732,  v3798,  v3862,  v3924,  v3984,  v4042,  v4098,  v4152,  v4204,  v4254,  v4302,
                           v4348,
                           v4392);
                  uint64_t v330 = sub_1000439C0( v322,  v323,  v324,  v325,  v326,  v327,  v328,  v329,  v991,  v1094,  v1197,  v1300,  v1403,  v1506,  v1608,  v1710,  v1812,  v1913,  v2014,  v2114,  v2213,  v2311,  v2408,  v2504,  v2599,  v2693,  v2785,  v2875,  v2963,  v3049,  v3133,  v3215,  v3295,  v3373,  v3449,  v3523,  v3595,  v3665,  v3733,  v3799,  v3863,  v3925,  v3985,  v4043,  v4099,  v4153,  v4205,  v4255,  v4303,
                           v4349,
                           v4393,
                           v4435);
                  uint64_t v338 = sub_1000439B8( v330,  v331,  v332,  v333,  v334,  v335,  v336,  v337,  v992,  v1095,  v1198,  v1301,  v1404,  v1507,  v1609,  v1711,  v1813,  v1914,  v2015,  v2115,  v2214,  v2312,  v2409,  v2505,  v2600,  v2694,  v2786,  v2876,  v2964,  v3050,  v3134,  v3216,  v3296,  v3374,  v3450,  v3524,  v3596,  v3666,  v3734,  v3800,  v3864,  v3926,  v3986,  v4044,  v4100,  v4154,  v4206,  v4256,  v4304,
                           v4350,
                           v4394,
                           v4436,
                           v4476);
                  uint64_t v346 = sub_1000439B0( v338,  v339,  v340,  v341,  v342,  v343,  v344,  v345,  v993,  v1096,  v1199,  v1302,  v1405,  v1508,  v1610,  v1712,  v1814,  v1915,  v2016,  v2116,  v2215,  v2313,  v2410,  v2506,  v2601,  v2695,  v2787,  v2877,  v2965,  v3051,  v3135,  v3217,  v3297,  v3375,  v3451,  v3525,  v3597,  v3667,  v3735,  v3801,  v3865,  v3927,  v3987,  v4045,  v4101,  v4155,  v4207,  v4257,  v4305,
                           v4351,
                           v4395,
                           v4437,
                           v4477,
                           v4515);
                  uint64_t v354 = sub_1000439A8( v346,  v347,  v348,  v349,  v350,  v351,  v352,  v353,  v994,  v1097,  v1200,  v1303,  v1406,  v1509,  v1611,  v1713,  v1815,  v1916,  v2017,  v2117,  v2216,  v2314,  v2411,  v2507,  v2602,  v2696,  v2788,  v2878,  v2966,  v3052,  v3136,  v3218,  v3298,  v3376,  v3452,  v3526,  v3598,  v3668,  v3736,  v3802,  v3866,  v3928,  v3988,  v4046,  v4102,  v4156,  v4208,  v4258,  v4306,
                           v4352,
                           v4396,
                           v4438,
                           v4478,
                           v4516,
                           v4552);
                  uint64_t v362 = sub_1000439A0( v354,  v355,  v356,  v357,  v358,  v359,  v360,  v361,  v995,  v1098,  v1201,  v1304,  v1407,  v1510,  v1612,  v1714,  v1816,  v1917,  v2018,  v2118,  v2217,  v2315,  v2412,  v2508,  v2603,  v2697,  v2789,  v2879,  v2967,  v3053,  v3137,  v3219,  v3299,  v3377,  v3453,  v3527,  v3599,  v3669,  v3737,  v3803,  v3867,  v3929,  v3989,  v4047,  v4103,  v4157,  v4209,  v4259,  v4307,
                           v4353,
                           v4397,
                           v4439,
                           v4479,
                           v4517,
                           v4553,
                           v4587);
                  uint64_t v370 = sub_100043998( v362,  v363,  v364,  v365,  v366,  v367,  v368,  v369,  v996,  v1099,  v1202,  v1305,  v1408,  v1511,  v1613,  v1715,  v1817,  v1918,  v2019,  v2119,  v2218,  v2316,  v2413,  v2509,  v2604,  v2698,  v2790,  v2880,  v2968,  v3054,  v3138,  v3220,  v3300,  v3378,  v3454,  v3528,  v3600,  v3670,  v3738,  v3804,  v3868,  v3930,  v3990,  v4048,  v4104,  v4158,  v4210,  v4260,  v4308,
                           v4354,
                           v4398,
                           v4440,
                           v4480,
                           v4518,
                           v4554,
                           v4588,
                           v4620);
                  uint64_t v378 = sub_100043990( v370,  v371,  v372,  v373,  v374,  v375,  v376,  v377,  v997,  v1100,  v1203,  v1306,  v1409,  v1512,  v1614,  v1716,  v1818,  v1919,  v2020,  v2120,  v2219,  v2317,  v2414,  v2510,  v2605,  v2699,  v2791,  v2881,  v2969,  v3055,  v3139,  v3221,  v3301,  v3379,  v3455,  v3529,  v3601,  v3671,  v3739,  v3805,  v3869,  v3931,  v3991,  v4049,  v4105,  v4159,  v4211,  v4261,  v4309,
                           v4355,
                           v4399,
                           v4441,
                           v4481,
                           v4519,
                           v4555,
                           v4589,
                           v4621,
                           v4651);
                  uint64_t v386 = sub_100043988( v378,  v379,  v380,  v381,  v382,  v383,  v384,  v385,  v998,  v1101,  v1204,  v1307,  v1410,  v1513,  v1615,  v1717,  v1819,  v1920,  v2021,  v2121,  v2220,  v2318,  v2415,  v2511,  v2606,  v2700,  v2792,  v2882,  v2970,  v3056,  v3140,  v3222,  v3302,  v3380,  v3456,  v3530,  v3602,  v3672,  v3740,  v3806,  v3870,  v3932,  v3992,  v4050,  v4106,  v4160,  v4212,  v4262,  v4310,
                           v4356,
                           v4400,
                           v4442,
                           v4482,
                           v4520,
                           v4556,
                           v4590,
                           v4622,
                           v4652,
                           v4680);
                  uint64_t v394 = sub_100043980( v386,  v387,  v388,  v389,  v390,  v391,  v392,  v393,  v999,  v1102,  v1205,  v1308,  v1411,  v1514,  v1616,  v1718,  v1820,  v1921,  v2022,  v2122,  v2221,  v2319,  v2416,  v2512,  v2607,  v2701,  v2793,  v2883,  v2971,  v3057,  v3141,  v3223,  v3303,  v3381,  v3457,  v3531,  v3603,  v3673,  v3741,  v3807,  v3871,  v3933,  v3993,  v4051,  v4107,  v4161,  v4213,  v4263,  v4311,
                           v4357,
                           v4401,
                           v4443,
                           v4483,
                           v4521,
                           v4557,
                           v4591,
                           v4623,
                           v4653,
                           v4681,
                           v4707);
                  uint64_t v402 = sub_100043978( v394,  v395,  v396,  v397,  v398,  v399,  v400,  v401,  v1000,  v1103,  v1206,  v1309,  v1412,  v1515,  v1617,  v1719,  v1821,  v1922,  v2023,  v2123,  v2222,  v2320,  v2417,  v2513,  v2608,  v2702,  v2794,  v2884,  v2972,  v3058,  v3142,  v3224,  v3304,  v3382,  v3458,  v3532,  v3604,  v3674,  v3742,  v3808,  v3872,  v3934,  v3994,  v4052,  v4108,  v4162,  v4214,  v4264,  v4312,
                           v4358,
                           v4402,
                           v4444,
                           v4484,
                           v4522,
                           v4558,
                           v4592,
                           v4624,
                           v4654,
                           v4682,
                           v4708,
                           v4732);
                  uint64_t v410 = sub_100043970( v402,  v403,  v404,  v405,  v406,  v407,  v408,  v409,  v1001,  v1104,  v1207,  v1310,  v1413,  v1516,  v1618,  v1720,  v1822,  v1923,  v2024,  v2124,  v2223,  v2321,  v2418,  v2514,  v2609,  v2703,  v2795,  v2885,  v2973,  v3059,  v3143,  v3225,  v3305,  v3383,  v3459,  v3533,  v3605,  v3675,  v3743,  v3809,  v3873,  v3935,  v3995,  v4053,  v4109,  v4163,  v4215,  v4265,  v4313,
                           v4359,
                           v4403,
                           v4445,
                           v4485,
                           v4523,
                           v4559,
                           v4593,
                           v4625,
                           v4655,
                           v4683,
                           v4709,
                           v4733,
                           v4755);
                  uint64_t v418 = sub_100043968( v410,  v411,  v412,  v413,  v414,  v415,  v416,  v417,  v1002,  v1105,  v1208,  v1311,  v1414,  v1517,  v1619,  v1721,  v1823,  v1924,  v2025,  v2125,  v2224,  v2322,  v2419,  v2515,  v2610,  v2704,  v2796,  v2886,  v2974,  v3060,  v3144,  v3226,  v3306,  v3384,  v3460,  v3534,  v3606,  v3676,  v3744,  v3810,  v3874,  v3936,  v3996,  v4054,  v4110,  v4164,  v4216,  v4266,  v4314,
                           v4360,
                           v4404,
                           v4446,
                           v4486,
                           v4524,
                           v4560,
                           v4594,
                           v4626,
                           v4656,
                           v4684,
                           v4710,
                           v4734,
                           v4756,
                           v4776);
                  uint64_t v426 = sub_100043960( v418,  v419,  v420,  v421,  v422,  v423,  v424,  v425,  v1003,  v1106,  v1209,  v1312,  v1415,  v1518,  v1620,  v1722,  v1824,  v1925,  v2026,  v2126,  v2225,  v2323,  v2420,  v2516,  v2611,  v2705,  v2797,  v2887,  v2975,  v3061,  v3145,  v3227,  v3307,  v3385,  v3461,  v3535,  v3607,  v3677,  v3745,  v3811,  v3875,  v3937,  v3997,  v4055,  v4111,  v4165,  v4217,  v4267,  v4315,
                           v4361,
                           v4405,
                           v4447,
                           v4487,
                           v4525,
                           v4561,
                           v4595,
                           v4627,
                           v4657,
                           v4685,
                           v4711,
                           v4735,
                           v4757,
                           v4777);
                  uint64_t v434 = sub_100043958( v426,  v427,  v428,  v429,  v430,  v431,  v432,  v433,  v1004,  v1107,  v1210,  v1313,  v1416,  v1519,  v1621,  v1723,  v1825,  v1926,  v2027,  v2127,  v2226,  v2324,  v2421,  v2517,  v2612,  v2706,  v2798,  v2888,  v2976,  v3062,  v3146,  v3228,  v3308,  v3386,  v3462,  v3536,  v3608,  v3678,  v3746,  v3812,  v3876,  v3938,  v3998,  v4056,  v4112,  v4166,  v4218,  v4268,  v4316,
                           v4362,
                           v4406,
                           v4448,
                           v4488,
                           v4526,
                           v4562,
                           v4596,
                           v4628,
                           v4658,
                           v4686,
                           v4712,
                           v4736,
                           v4758,
                           v4778);
                  uint64_t v442 = sub_100043950( v434,  v435,  v436,  v437,  v438,  v439,  v440,  v441,  v1005,  v1108,  v1211,  v1314,  v1417,  v1520,  v1622,  v1724,  v1826,  v1927,  v2028,  v2128,  v2227,  v2325,  v2422,  v2518,  v2613,  v2707,  v2799,  v2889,  v2977,  v3063,  v3147,  v3229,  v3309,  v3387,  v3463,  v3537,  v3609,  v3679,  v3747,  v3813,  v3877,  v3939,  v3999,  v4057,  v4113,  v4167,  v4219,  v4269,  v4317,
                           v4363,
                           v4407,
                           v4449,
                           v4489,
                           v4527,
                           v4563,
                           v4597,
                           v4629,
                           v4659,
                           v4687,
                           v4713,
                           v4737,
                           v4759,
                           v4779);
                  uint64_t v450 = sub_100043948( v442,  v443,  v444,  v445,  v446,  v447,  v448,  v449,  v1006,  v1109,  v1212,  v1315,  v1418,  v1521,  v1623,  v1725,  v1827,  v1928,  v2029,  v2129,  v2228,  v2326,  v2423,  v2519,  v2614,  v2708,  v2800,  v2890,  v2978,  v3064,  v3148,  v3230,  v3310,  v3388,  v3464,  v3538,  v3610,  v3680,  v3748,  v3814,  v3878,  v3940,  v4000,  v4058,  v4114,  v4168,  v4220,  v4270,  v4318,
                           v4364,
                           v4408,
                           v4450,
                           v4490,
                           v4528,
                           v4564,
                           v4598,
                           v4630,
                           v4660,
                           v4688,
                           v4714,
                           v4738,
                           v4760,
                           v4780);
                  uint64_t v458 = sub_100043940( v450,  v451,  v452,  v453,  v454,  v455,  v456,  v457,  v1007,  v1110,  v1213,  v1316,  v1419,  v1522,  v1624,  v1726,  v1828,  v1929,  v2030,  v2130,  v2229,  v2327,  v2424,  v2520,  v2615,  v2709,  v2801,  v2891,  v2979,  v3065,  v3149,  v3231,  v3311,  v3389,  v3465,  v3539,  v3611,  v3681,  v3749,  v3815,  v3879,  v3941,  v4001,  v4059,  v4115,  v4169,  v4221,  v4271,  v4319,
                           v4365,
                           v4409,
                           v4451,
                           v4491,
                           v4529,
                           v4565,
                           v4599,
                           v4631,
                           v4661,
                           v4689,
                           v4715,
                           v4739,
                           v4761,
                           v4781);
                  uint64_t v466 = sub_100043E48( v458,  v459,  v460,  v461,  v462,  v463,  v464,  v465,  v1008,  v1111,  v1214,  v1317,  v1420,  v1523,  v1625,  v1727,  v1829,  v1930,  v2031,  v2131,  v2230,  v2328,  v2425,  v2521,  v2616,  v2710,  v2802,  v2892,  v2980,  v3066,  v3150,  v3232,  v3312,  v3390,  v3466,  v3540,  v3612,  v3682,  v3750,  v3816,  v3880,  v3942,  v4002,  v4060,  v4116,  v4170,  v4222,  v4272,  v4320,
                           v4366,
                           v4410,
                           v4452,
                           v4492,
                           v4530,
                           v4566,
                           v4600,
                           v4632,
                           v4662,
                           v4690,
                           v4716,
                           v4740,
                           v4762,
                           v4782);
                  uint64_t v474 = sub_100043E40( v466,  v467,  v468,  v469,  v470,  v471,  v472,  v473,  v1009,  v1112,  v1215,  v1318,  v1421,  v1524,  v1626,  v1728,  v1830,  v1931,  v2032,  v2132,  v2231,  v2329,  v2426,  v2522,  v2617,  v2711,  v2803,  v2893,  v2981,  v3067,  v3151,  v3233,  v3313,  v3391,  v3467,  v3541,  v3613,  v3683,  v3751,  v3817,  v3881,  v3943,  v4003,  v4061,  v4117,  v4171,  v4223,  v4273,  v4321,
                           v4367,
                           v4411,
                           v4453,
                           v4493,
                           v4531,
                           v4567,
                           v4601,
                           v4633,
                           v4663,
                           v4691,
                           v4717,
                           v4741,
                           v4763,
                           v4783);
                  uint64_t v482 = sub_100043E38( v474,  v475,  v476,  v477,  v478,  v479,  v480,  v481,  v1010,  v1113,  v1216,  v1319,  v1422,  v1525,  v1627,  v1729,  v1831,  v1932,  v2033,  v2133,  v2232,  v2330,  v2427,  v2523,  v2618,  v2712,  v2804,  v2894,  v2982,  v3068,  v3152,  v3234,  v3314,  v3392,  v3468,  v3542,  v3614,  v3684,  v3752,  v3818,  v3882,  v3944,  v4004,  v4062,  v4118,  v4172,  v4224,  v4274,  v4322,
                           v4368,
                           v4412,
                           v4454,
                           v4494,
                           v4532,
                           v4568,
                           v4602,
                           v4634,
                           v4664,
                           v4692,
                           v4718,
                           v4742,
                           v4764,
                           v4784);
                  sub_100043E30( v482,  v483,  v484,  v485,  v486,  v487,  v488,  v489,  v1011,  v1114,  v1217,  v1320,  v1423,  v1526,  v1628,  v1730,  v1832,  v1933,  v2034,  v2134,  v2233,  v2331,  v2428,  v2524,  v2619,  v2713,  v2805,  v2895,  v2983,  v3069,  v3153,  v3235,  v3315,  v3393,  v3469,  v3543,  v3615,  v3685,  v3753,  v3819,  v3883,  v3945,  v4005,  v4063,  v4119,  v4173,  v4225,  v4275,  v4323,
                    v4369,
                    v4413,
                    v4455,
                    v4495,
                    v4533,
                    v4569,
                    v4603,
                    v4635,
                    v4665,
                    v4693,
                    v4719,
                    v4743,
                    v4765,
                    v4785);
                  sub_100043E28();
                  sub_100043E20();
                  sub_100043938();
                  sub_100043930();
                  sub_100043928();
                  sub_100043920();
                  sub_100043D44();
                  sub_100043DB4();
                  sub_100043DAC();
                  sub_100043EF0();
                  sub_100043E50();
                  sub_1000442E4();
                  sub_1000442DC();
                  sub_100044938();
                  sub_100044C9C();
                  sub_100044948();
                  sub_1000448DC();
                  sub_100044FDC();
                  sub_10000F308(*(uint64_t (**)(void))(v4820 + 8));
                }

                else
                {
                  sub_100042420(v109);
                  sub_100046540();
                  sub_10004630C();
                  sub_100046354();
                  uint64_t v490 = sub_10000F3F4();
                  sub_1000431B8(v490, &qword_10006A388);
                  uint64_t v499 = sub_100046A90(v491, v492, v493, v494, v495, v496, v497, v498, v965, v1068, v1171, v1274, v1377);
                  sub_100043F48( v499,  v500,  v501,  v502,  v503,  v504,  v505,  v506,  v1012,  v1115,  v1218,  v1321,  v1424,  v1480,  v1582,  v1684);
                  sub_100043B64();
                  sub_1000462E0();
                  sub_100042E4C();
                  sub_100043380(v18, *(uint64_t (**)(uint64_t, uint64_t))(v99 + 8));
                  sub_100043A38();
                  sub_100043910(v1786, *(uint64_t (**)(uint64_t, uint64_t))(v59 + 8));
                  sub_100043B04();
                  uint64_t v507 = sub_10000F404();
                  uint64_t v515 = sub_1000435E4( v507,  v508,  v509,  v510,  v511,  v512,  v513,  v514,  v1013,  v1116,  v1219,  v1322,  v1425,  v1527,  v1629,  v1731,  v1786,  v1887);
                  uint64_t v523 = sub_100043900( v515,  v516,  v517,  v518,  v519,  v520,  v521,  v522,  v1014,  v1117,  v1220,  v1323,  v1426,  v1528,  v1630,  v1732,  v1833,  v1934,  v1988);
                  uint64_t v531 = sub_100043AE4( v523,  v524,  v525,  v526,  v527,  v528,  v529,  v530,  v1015,  v1118,  v1221,  v1324,  v1427,  v1529,  v1631,  v1733,  v1834,  v1935,  v2035,  v2088);
                  uint64_t v539 = sub_100044AF4( v531,  v532,  v533,  v534,  v535,  v536,  v537,  v538,  v1016,  v1119,  v1222,  v1325,  v1428,  v1530,  v1632,  v1734,  v1835,  v1936,  v2036,  v2135,  v2187);
                  sub_100044940( v539,  v540,  v541,  v542,  v543,  v544,  v545,  v546,  v1017,  v1120,  v1223,  v1326,  v1429,  v1531,  v1633,  v1735,  v1836,  v1937,  v2037,  v2136,  v2234,  v2285);
                  uint64_t v547 = sub_10000F3F4();
                  uint64_t v555 = sub_100043EE8( v547,  v548,  v549,  v550,  v551,  v552,  v553,  v554,  v1018,  v1121,  v1224,  v1327,  v1430,  v1532,  v1634,  v1736,  v1837,  v1938,  v2038,  v2137,  v2235,  v2332,  v2382,  v2478);
                  uint64_t v563 = sub_100043F40( v555,  v556,  v557,  v558,  v559,  v560,  v561,  v562,  v1019,  v1122,  v1225,  v1328,  v1431,  v1533,  v1635,  v1737,  v1838,  v1939,  v2039,  v2138,  v2236,  v2333,  v2429,  v2525,  v2573);
                  uint64_t v571 = sub_1000436E8( v563,  v564,  v565,  v566,  v567,  v568,  v569,  v570,  v1020,  v1123,  v1226,  v1329,  v1432,  v1534,  v1636,  v1738,  v1839,  v1940,  v2040,  v2139,  v2237,  v2334,  v2430,  v2526,  v2620,  v2667,  v2760);
                  uint64_t v579 = sub_1000436C4( v571,  v572,  v573,  v574,  v575,  v576,  v577,  v578,  v1021,  v1124,  v1227,  v1330,  v1433,  v1535,  v1637,  v1739,  v1840,  v1941,  v2041,  v2140,  v2238,  v2335,  v2431,  v2527,  v2621,  v2714,  v2806,  v2851);
                  uint64_t v587 = sub_100043658( v579,  v580,  v581,  v582,  v583,  v584,  v585,  v586,  v1022,  v1125,  v1228,  v1331,  v1434,  v1536,  v1638,  v1740,  v1841,  v1942,  v2042,  v2141,  v2239,  v2336,  v2432,  v2528,  v2622,  v2715,  v2807,  v2896,  v2940,  v3027);
                  uint64_t v595 = sub_10004361C( v587,  v588,  v589,  v590,  v591,  v592,  v593,  v594,  v1023,  v1126,  v1229,  v1332,  v1435,  v1537,  v1639,  v1741,  v1842,  v1943,  v2043,  v2142,  v2240,  v2337,  v2433,  v2529,  v2623,  v2716,  v2808,  v2897,  v2984,  v3070,  v3112,  v3195);
                  uint64_t v603 = sub_100043A48( v595,  v596,  v597,  v598,  v599,  v600,  v601,  v602,  v1024,  v1127,  v1230,  v1333,  v1436,  v1538,  v1640,  v1742,  v1843,  v1944,  v2044,  v2143,  v2241,  v2338,  v2434,  v2530,  v2624,  v2717,  v2809,  v2898,  v2985,  v3071,  v3154,  v3236,  v3276,  v3355);
                  uint64_t v611 = sub_100043A40( v603,  v604,  v605,  v606,  v607,  v608,  v609,  v610,  v1025,  v1128,  v1231,  v1334,  v1437,  v1539,  v1641,  v1743,  v1844,  v1945,  v2045,  v2144,  v2242,  v2339,  v2435,  v2531,  v2625,  v2718,  v2810,  v2899,  v2986,  v3072,  v3155,  v3237,  v3316,  v3394,  v3432);
                  uint64_t v619 = sub_10004384C( v611,  v612,  v613,  v614,  v615,  v616,  v617,  v618,  v1026,  v1129,  v1232,  v1335,  v1438,  v1540,  v1642,  v1744,  v1845,  v1946,  v2046,  v2145,  v2243,  v2340,  v2436,  v2532,  v2626,  v2719,  v2811,  v2900,  v2987,  v3073,  v3156,  v3238,  v3317,  v3395,  v3470,  v3507,  v3580);
                  uint64_t v627 = sub_100043A28( v619,  v620,  v621,  v622,  v623,  v624,  v625,  v626,  v1027,  v1130,  v1233,  v1336,  v1439,  v1541,  v1643,  v1745,  v1846,  v1947,  v2047,  v2146,  v2244,  v2341,  v2437,  v2533,  v2627,  v2720,  v2812,  v2901,  v2988,  v3074,  v3157,  v3239,  v3318,  v3396,  v3471,  v3544,  v3616,  v3651,  v3720);
                  uint64_t v635 = sub_100043A18( v627,  v628,  v629,  v630,  v631,  v632,  v633,  v634,  v1028,  v1131,  v1234,  v1337,  v1440,  v1542,  v1644,  v1746,  v1847,  v1948,  v2048,  v2147,  v2245,  v2342,  v2438,  v2534,  v2628,  v2721,  v2813,  v2902,  v2989,  v3075,  v3158,  v3240,  v3319,  v3397,  v3472,  v3545,  v3617,  v3686,  v3754,  v3787,  v3852);
                  uint64_t v643 = sub_100043A08( v635,  v636,  v637,  v638,  v639,  v640,  v641,  v642,  v1029,  v1132,  v1235,  v1338,  v1441,  v1543,  v1645,  v1747,  v1848,  v1949,  v2049,  v2148,  v2246,  v2343,  v2439,  v2535,  v2629,  v2722,  v2814,  v2903,  v2990,  v3076,  v3159,  v3241,  v3320,  v3398,  v3473,  v3546,  v3618,  v3687,  v3755,  v3820,  v3884,  v3915,  v3976);
                  uint64_t v651 = sub_1000439F8( v643,  v644,  v645,  v646,  v647,  v648,  v649,  v650,  v1030,  v1133,  v1236,  v1339,  v1442,  v1544,  v1646,  v1748,  v1849,  v1950,  v2050,  v2149,  v2247,  v2344,  v2440,  v2536,  v2630,  v2723,  v2815,  v2904,  v2991,  v3077,  v3160,  v3242,  v3321,  v3399,  v3474,  v3547,  v3619,  v3688,  v3756,  v3821,  v3885,  v3946,  v4006,  v4035,  v4092);
                  uint64_t v659 = sub_1000439E8( v651,  v652,  v653,  v654,  v655,  v656,  v657,  v658,  v1031,  v1134,  v1237,  v1340,  v1443,  v1545,  v1647,  v1749,  v1850,  v1951,  v2051,  v2150,  v2248,  v2345,  v2441,  v2537,  v2631,  v2724,  v2816,  v2905,  v2992,  v3078,  v3161,  v3243,  v3322,  v3400,  v3475,  v3548,  v3620,  v3689,  v3757,  v3822,  v3886,  v3947,  v4007,  v4064,  v4120,  v4147,  v4200);
                  uint64_t v667 = sub_1000439E0( v659,  v660,  v661,  v662,  v663,  v664,  v665,  v666,  v1032,  v1135,  v1238,  v1341,  v1444,  v1546,  v1648,  v1750,  v1851,  v1952,  v2052,  v2151,  v2249,  v2346,  v2442,  v2538,  v2632,  v2725,  v2817,  v2906,  v2993,  v3079,  v3162,  v3244,  v3323,  v3401,  v3476,  v3549,  v3621,  v3690,  v3758,  v3823,  v3887,  v3948,  v4008,  v4065,  v4121,  v4174,  v4226,  v4251);
                  sub_1000439D0( v667,  v668,  v669,  v670,  v671,  v672,  v673,  v674,  v1033,  v1136,  v1239,  v1342,  v1445,  v1547,  v1649,  v1751,  v1852,  v1953,  v2053,  v2152,  v2250,  v2347,  v2443,  v2539,  v2633,  v2726,  v2818,  v2907,  v2994,  v3080,  v3163,  v3245,  v3324,  v3402,  v3477,  v3550,  v3622,  v3691,  v3759,  v3824,  v3888,  v3949,  v4009,  v4066,  v4122,  v4175,  v4227,  v4276,  v4300,
                    v4347);
                  sub_10000F4A8();
                  uint64_t v675 = sub_10000F338();
                  uint64_t v683 = sub_1000439B8( v675,  v676,  v677,  v678,  v679,  v680,  v681,  v682,  v1034,  v1137,  v1240,  v1343,  v1446,  v1548,  v1650,  v1752,  v1853,  v1954,  v2054,  v2153,  v2251,  v2348,  v2444,  v2540,  v2634,  v2727,  v2819,  v2908,  v2995,  v3081,  v3164,  v3246,  v3325,  v3403,  v3478,  v3551,  v3623,  v3692,  v3760,  v3825,  v3889,  v3950,  v4010,  v4067,  v4123,  v4176,  v4228,  v4277,  v4324,
                           v4370,
                           v4392,
                           v4435,
                           v4476);
                  sub_1000439A8( v683,  v684,  v685,  v686,  v687,  v688,  v689,  v690,  v1035,  v1138,  v1241,  v1344,  v1447,  v1549,  v1651,  v1753,  v1854,  v1955,  v2055,  v2154,  v2252,  v2349,  v2445,  v2541,  v2635,  v2728,  v2820,  v2909,  v2996,  v3082,  v3165,  v3247,  v3326,  v3404,  v3479,  v3552,  v3624,  v3693,  v3761,  v3826,  v3890,  v3951,  v4011,  v4068,  v4124,  v4177,  v4229,  v4278,  v4325,
                    v4371,
                    v4414,
                    v4456,
                    v4496,
                    v4515,
                    v4552);
                  uint64_t v691 = sub_10000F3FC();
                  uint64_t v699 = sub_1000436F0( v691,  v692,  v693,  v694,  v695,  v696,  v697,  v698,  v1036,  v1139,  v1242,  v1345,  v1448,  v1550,  v1652,  v1754,  v1855,  v1956,  v2056,  v2155,  v2253,  v2350,  v2446,  v2542,  v2636,  v2729);
                  uint64_t v707 = sub_100043624( v699,  v700,  v701,  v702,  v703,  v704,  v705,  v706,  v1037,  v1140,  v1243,  v1346,  v1449,  v1551,  v1653,  v1755,  v1856,  v1957,  v2057,  v2156,  v2254,  v2351,  v2447,  v2543,  v2637,  v2730,  v2821,  v2910,  v2997);
                  uint64_t v715 = sub_100043660( v707,  v708,  v709,  v710,  v711,  v712,  v713,  v714,  v1038,  v1141,  v1244,  v1347,  v1450,  v1552,  v1654,  v1756,  v1857,  v1958,  v2058,  v2157,  v2255,  v2352,  v2448,  v2544,  v2638,  v2731,  v2822,  v2911,  v2998,  v3083,  v3166);
                  uint64_t v723 = sub_100043614( v715,  v716,  v717,  v718,  v719,  v720,  v721,  v722,  v1039,  v1142,  v1245,  v1348,  v1451,  v1553,  v1655,  v1757,  v1858,  v1959,  v2059,  v2158,  v2256,  v2353,  v2449,  v2545,  v2639,  v2732,  v2823,  v2912,  v2999,  v3084,  v3167,  v3248,  v3327);
                  uint64_t v731 = sub_1000437F8( v723,  v724,  v725,  v726,  v727,  v728,  v729,  v730,  v1040,  v1143,  v1246,  v1349,  v1452,  v1554,  v1656,  v1758,  v1859,  v1960,  v2060,  v2159,  v2257,  v2354,  v2450,  v2546,  v2640,  v2733,  v2824,  v2913,  v3000,  v3085,  v3168,  v3249,  v3328,  v3405,  v3480,  v3553);
                  uint64_t v739 = sub_100043A30( v731,  v732,  v733,  v734,  v735,  v736,  v737,  v738,  v1041,  v1144,  v1247,  v1350,  v1453,  v1555,  v1657,  v1759,  v1860,  v1961,  v2061,  v2160,  v2258,  v2355,  v2451,  v2547,  v2641,  v2734,  v2825,  v2914,  v3001,  v3086,  v3169,  v3250,  v3329,  v3406,  v3481,  v3554,  v3625,  v3694);
                  uint64_t v747 = sub_100043A20( v739,  v740,  v741,  v742,  v743,  v744,  v745,  v746,  v1042,  v1145,  v1248,  v1351,  v1454,  v1556,  v1658,  v1760,  v1861,  v1962,  v2062,  v2161,  v2259,  v2356,  v2452,  v2548,  v2642,  v2735,  v2826,  v2915,  v3002,  v3087,  v3170,  v3251,  v3330,  v3407,  v3482,  v3555,  v3626,  v3695,  v3762,  v3827);
                  uint64_t v755 = sub_100043A10( v747,  v748,  v749,  v750,  v751,  v752,  v753,  v754,  v1043,  v1146,  v1249,  v1352,  v1455,  v1557,  v1659,  v1761,  v1862,  v1963,  v2063,  v2162,  v2260,  v2357,  v2453,  v2549,  v2643,  v2736,  v2827,  v2916,  v3003,  v3088,  v3171,  v3252,  v3331,  v3408,  v3483,  v3556,  v3627,  v3696,  v3763,  v3828,  v3891,  v3952);
                  uint64_t v763 = sub_100043A00( v755,  v756,  v757,  v758,  v759,  v760,  v761,  v762,  v1044,  v1147,  v1250,  v1353,  v1456,  v1558,  v1660,  v1762,  v1863,  v1964,  v2064,  v2163,  v2261,  v2358,  v2454,  v2550,  v2644,  v2737,  v2828,  v2917,  v3004,  v3089,  v3172,  v3253,  v3332,  v3409,  v3484,  v3557,  v3628,  v3697,  v3764,  v3829,  v3892,  v3953,  v4012,  v4069);
                  uint64_t v771 = sub_1000439F0( v763,  v764,  v765,  v766,  v767,  v768,  v769,  v770,  v1045,  v1148,  v1251,  v1354,  v1457,  v1559,  v1661,  v1763,  v1864,  v1965,  v2065,  v2164,  v2262,  v2359,  v2455,  v2551,  v2645,  v2738,  v2829,  v2918,  v3005,  v3090,  v3173,  v3254,  v3333,  v3410,  v3485,  v3558,  v3629,  v3698,  v3765,  v3830,  v3893,  v3954,  v4013,  v4070,  v4125,  v4178);
                  uint64_t v779 = sub_1000439D8( v771,  v772,  v773,  v774,  v775,  v776,  v777,  v778,  v1046,  v1149,  v1252,  v1355,  v1458,  v1560,  v1662,  v1764,  v1865,  v1966,  v2066,  v2165,  v2263,  v2360,  v2456,  v2552,  v2646,  v2739,  v2830,  v2919,  v3006,  v3091,  v3174,  v3255,  v3334,  v3411,  v3486,  v3559,  v3630,  v3699,  v3766,  v3831,  v3894,  v3955,  v4014,  v4071,  v4126,  v4179,  v4230,  v4279,  v4326);
                  uint64_t v787 = sub_1000439C8( v779,  v780,  v781,  v782,  v783,  v784,  v785,  v786,  v1047,  v1150,  v1253,  v1356,  v1459,  v1561,  v1663,  v1765,  v1866,  v1967,  v2067,  v2166,  v2264,  v2361,  v2457,  v2553,  v2647,  v2740,  v2831,  v2920,  v3007,  v3092,  v3175,  v3256,  v3335,  v3412,  v3487,  v3560,  v3631,  v3700,  v3767,  v3832,  v3895,  v3956,  v4015,  v4072,  v4127,  v4180,  v4231,  v4280,  v4327,
                           v4372,
                           v4415);
                  uint64_t v795 = sub_1000439C0( v787,  v788,  v789,  v790,  v791,  v792,  v793,  v794,  v1048,  v1151,  v1254,  v1357,  v1460,  v1562,  v1664,  v1766,  v1867,  v1968,  v2068,  v2167,  v2265,  v2362,  v2458,  v2554,  v2648,  v2741,  v2832,  v2921,  v3008,  v3093,  v3176,  v3257,  v3336,  v3413,  v3488,  v3561,  v3632,  v3701,  v3768,  v3833,  v3896,  v3957,  v4016,  v4073,  v4128,  v4181,  v4232,  v4281,  v4328,
                           v4373,
                           v4416,
                           v4457);
                  uint64_t v803 = sub_1000439B0( v795,  v796,  v797,  v798,  v799,  v800,  v801,  v802,  v1049,  v1152,  v1255,  v1358,  v1461,  v1563,  v1665,  v1767,  v1868,  v1969,  v2069,  v2168,  v2266,  v2363,  v2459,  v2555,  v2649,  v2742,  v2833,  v2922,  v3009,  v3094,  v3177,  v3258,  v3337,  v3414,  v3489,  v3562,  v3633,  v3702,  v3769,  v3834,  v3897,  v3958,  v4017,  v4074,  v4129,  v4182,  v4233,  v4282,  v4329,
                           v4374,
                           v4417,
                           v4458,
                           v4497,
                           v4534);
                  uint64_t v811 = sub_1000439A0( v803,  v804,  v805,  v806,  v807,  v808,  v809,  v810,  v1050,  v1153,  v1256,  v1359,  v1462,  v1564,  v1666,  v1768,  v1869,  v1970,  v2070,  v2169,  v2267,  v2364,  v2460,  v2556,  v2650,  v2743,  v2834,  v2923,  v3010,  v3095,  v3178,  v3259,  v3338,  v3415,  v3490,  v3563,  v3634,  v3703,  v3770,  v3835,  v3898,  v3959,  v4018,  v4075,  v4130,  v4183,  v4234,  v4283,  v4330,
                           v4375,
                           v4418,
                           v4459,
                           v4498,
                           v4535,
                           v4570,
                           v4587);
                  uint64_t v819 = sub_100043998( v811,  v812,  v813,  v814,  v815,  v816,  v817,  v818,  v1051,  v1154,  v1257,  v1360,  v1463,  v1565,  v1667,  v1769,  v1870,  v1971,  v2071,  v2170,  v2268,  v2365,  v2461,  v2557,  v2651,  v2744,  v2835,  v2924,  v3011,  v3096,  v3179,  v3260,  v3339,  v3416,  v3491,  v3564,  v3635,  v3704,  v3771,  v3836,  v3899,  v3960,  v4019,  v4076,  v4131,  v4184,  v4235,  v4284,  v4331,
                           v4376,
                           v4419,
                           v4460,
                           v4499,
                           v4536,
                           v4571,
                           v4604,
                           v4620);
                  uint64_t v827 = sub_100043990( v819,  v820,  v821,  v822,  v823,  v824,  v825,  v826,  v1052,  v1155,  v1258,  v1361,  v1464,  v1566,  v1668,  v1770,  v1871,  v1972,  v2072,  v2171,  v2269,  v2366,  v2462,  v2558,  v2652,  v2745,  v2836,  v2925,  v3012,  v3097,  v3180,  v3261,  v3340,  v3417,  v3492,  v3565,  v3636,  v3705,  v3772,  v3837,  v3900,  v3961,  v4020,  v4077,  v4132,  v4185,  v4236,  v4285,  v4332,
                           v4377,
                           v4420,
                           v4461,
                           v4500,
                           v4537,
                           v4572,
                           v4605,
                           v4636,
                           v4651);
                  uint64_t v835 = sub_100043988( v827,  v828,  v829,  v830,  v831,  v832,  v833,  v834,  v1053,  v1156,  v1259,  v1362,  v1465,  v1567,  v1669,  v1771,  v1872,  v1973,  v2073,  v2172,  v2270,  v2367,  v2463,  v2559,  v2653,  v2746,  v2837,  v2926,  v3013,  v3098,  v3181,  v3262,  v3341,  v3418,  v3493,  v3566,  v3637,  v3706,  v3773,  v3838,  v3901,  v3962,  v4021,  v4078,  v4133,  v4186,  v4237,  v4286,  v4333,
                           v4378,
                           v4421,
                           v4462,
                           v4501,
                           v4538,
                           v4573,
                           v4606,
                           v4637,
                           v4666,
                           v4680);
                  uint64_t v843 = sub_100043980( v835,  v836,  v837,  v838,  v839,  v840,  v841,  v842,  v1054,  v1157,  v1260,  v1363,  v1466,  v1568,  v1670,  v1772,  v1873,  v1974,  v2074,  v2173,  v2271,  v2368,  v2464,  v2560,  v2654,  v2747,  v2838,  v2927,  v3014,  v3099,  v3182,  v3263,  v3342,  v3419,  v3494,  v3567,  v3638,  v3707,  v3774,  v3839,  v3902,  v3963,  v4022,  v4079,  v4134,  v4187,  v4238,  v4287,  v4334,
                           v4379,
                           v4422,
                           v4463,
                           v4502,
                           v4539,
                           v4574,
                           v4607,
                           v4638,
                           v4667,
                           v4694,
                           v4707);
                  uint64_t v851 = sub_100043978( v843,  v844,  v845,  v846,  v847,  v848,  v849,  v850,  v1055,  v1158,  v1261,  v1364,  v1467,  v1569,  v1671,  v1773,  v1874,  v1975,  v2075,  v2174,  v2272,  v2369,  v2465,  v2561,  v2655,  v2748,  v2839,  v2928,  v3015,  v3100,  v3183,  v3264,  v3343,  v3420,  v3495,  v3568,  v3639,  v3708,  v3775,  v3840,  v3903,  v3964,  v4023,  v4080,  v4135,  v4188,  v4239,  v4288,  v4335,
                           v4380,
                           v4423,
                           v4464,
                           v4503,
                           v4540,
                           v4575,
                           v4608,
                           v4639,
                           v4668,
                           v4695,
                           v4720,
                           v4732);
                  uint64_t v859 = sub_100043970( v851,  v852,  v853,  v854,  v855,  v856,  v857,  v858,  v1056,  v1159,  v1262,  v1365,  v1468,  v1570,  v1672,  v1774,  v1875,  v1976,  v2076,  v2175,  v2273,  v2370,  v2466,  v2562,  v2656,  v2749,  v2840,  v2929,  v3016,  v3101,  v3184,  v3265,  v3344,  v3421,  v3496,  v3569,  v3640,  v3709,  v3776,  v3841,  v3904,  v3965,  v4024,  v4081,  v4136,  v4189,  v4240,  v4289,  v4336,
                           v4381,
                           v4424,
                           v4465,
                           v4504,
                           v4541,
                           v4576,
                           v4609,
                           v4640,
                           v4669,
                           v4696,
                           v4721,
                           v4744,
                           v4755);
                  uint64_t v867 = sub_100043968( v859,  v860,  v861,  v862,  v863,  v864,  v865,  v866,  v1057,  v1160,  v1263,  v1366,  v1469,  v1571,  v1673,  v1775,  v1876,  v1977,  v2077,  v2176,  v2274,  v2371,  v2467,  v2563,  v2657,  v2750,  v2841,  v2930,  v3017,  v3102,  v3185,  v3266,  v3345,  v3422,  v3497,  v3570,  v3641,  v3710,  v3777,  v3842,  v3905,  v3966,  v4025,  v4082,  v4137,  v4190,  v4241,  v4290,  v4337,
                           v4382,
                           v4425,
                           v4466,
                           v4505,
                           v4542,
                           v4577,
                           v4610,
                           v4641,
                           v4670,
                           v4697,
                           v4722,
                           v4745,
                           v4766,
                           v4776);
                  uint64_t v875 = sub_100043960( v867,  v868,  v869,  v870,  v871,  v872,  v873,  v874,  v1058,  v1161,  v1264,  v1367,  v1470,  v1572,  v1674,  v1776,  v1877,  v1978,  v2078,  v2177,  v2275,  v2372,  v2468,  v2564,  v2658,  v2751,  v2842,  v2931,  v3018,  v3103,  v3186,  v3267,  v3346,  v3423,  v3498,  v3571,  v3642,  v3711,  v3778,  v3843,  v3906,  v3967,  v4026,  v4083,  v4138,  v4191,  v4242,  v4291,  v4338,
                           v4383,
                           v4426,
                           v4467,
                           v4506,
                           v4543,
                           v4578,
                           v4611,
                           v4642,
                           v4671,
                           v4698,
                           v4723,
                           v4746,
                           v4767,
                           v4786);
                  uint64_t v883 = sub_100043958( v875,  v876,  v877,  v878,  v879,  v880,  v881,  v882,  v1059,  v1162,  v1265,  v1368,  v1471,  v1573,  v1675,  v1777,  v1878,  v1979,  v2079,  v2178,  v2276,  v2373,  v2469,  v2565,  v2659,  v2752,  v2843,  v2932,  v3019,  v3104,  v3187,  v3268,  v3347,  v3424,  v3499,  v3572,  v3643,  v3712,  v3779,  v3844,  v3907,  v3968,  v4027,  v4084,  v4139,  v4192,  v4243,  v4292,  v4339,
                           v4384,
                           v4427,
                           v4468,
                           v4507,
                           v4544,
                           v4579,
                           v4612,
                           v4643,
                           v4672,
                           v4699,
                           v4724,
                           v4747,
                           v4768,
                           v4787);
                  uint64_t v891 = sub_100043950( v883,  v884,  v885,  v886,  v887,  v888,  v889,  v890,  v1060,  v1163,  v1266,  v1369,  v1472,  v1574,  v1676,  v1778,  v1879,  v1980,  v2080,  v2179,  v2277,  v2374,  v2470,  v2566,  v2660,  v2753,  v2844,  v2933,  v3020,  v3105,  v3188,  v3269,  v3348,  v3425,  v3500,  v3573,  v3644,  v3713,  v3780,  v3845,  v3908,  v3969,  v4028,  v4085,  v4140,  v4193,  v4244,  v4293,  v4340,
                           v4385,
                           v4428,
                           v4469,
                           v4508,
                           v4545,
                           v4580,
                           v4613,
                           v4644,
                           v4673,
                           v4700,
                           v4725,
                           v4748,
                           v4769,
                           v4788);
                  uint64_t v899 = sub_100043948( v891,  v892,  v893,  v894,  v895,  v896,  v897,  v898,  v1061,  v1164,  v1267,  v1370,  v1473,  v1575,  v1677,  v1779,  v1880,  v1981,  v2081,  v2180,  v2278,  v2375,  v2471,  v2567,  v2661,  v2754,  v2845,  v2934,  v3021,  v3106,  v3189,  v3270,  v3349,  v3426,  v3501,  v3574,  v3645,  v3714,  v3781,  v3846,  v3909,  v3970,  v4029,  v4086,  v4141,  v4194,  v4245,  v4294,  v4341,
                           v4386,
                           v4429,
                           v4470,
                           v4509,
                           v4546,
                           v4581,
                           v4614,
                           v4645,
                           v4674,
                           v4701,
                           v4726,
                           v4749,
                           v4770,
                           v4789);
                  uint64_t v907 = sub_100043940( v899,  v900,  v901,  v902,  v903,  v904,  v905,  v906,  v1062,  v1165,  v1268,  v1371,  v1474,  v1576,  v1678,  v1780,  v1881,  v1982,  v2082,  v2181,  v2279,  v2376,  v2472,  v2568,  v2662,  v2755,  v2846,  v2935,  v3022,  v3107,  v3190,  v3271,  v3350,  v3427,  v3502,  v3575,  v3646,  v3715,  v3782,  v3847,  v3910,  v3971,  v4030,  v4087,  v4142,  v4195,  v4246,  v4295,  v4342,
                           v4387,
                           v4430,
                           v4471,
                           v4510,
                           v4547,
                           v4582,
                           v4615,
                           v4646,
                           v4675,
                           v4702,
                           v4727,
                           v4750,
                           v4771,
                           v4790);
                  uint64_t v915 = sub_100043E48( v907,  v908,  v909,  v910,  v911,  v912,  v913,  v914,  v1063,  v1166,  v1269,  v1372,  v1475,  v1577,  v1679,  v1781,  v1882,  v1983,  v2083,  v2182,  v2280,  v2377,  v2473,  v2569,  v2663,  v2756,  v2847,  v2936,  v3023,  v3108,  v3191,  v3272,  v3351,  v3428,  v3503,  v3576,  v3647,  v3716,  v3783,  v3848,  v3911,  v3972,  v4031,  v4088,  v4143,  v4196,  v4247,  v4296,  v4343,
                           v4388,
                           v4431,
                           v4472,
                           v4511,
                           v4548,
                           v4583,
                           v4616,
                           v4647,
                           v4676,
                           v4703,
                           v4728,
                           v4751,
                           v4772,
                           v4791);
                  uint64_t v923 = sub_100043E40( v915,  v916,  v917,  v918,  v919,  v920,  v921,  v922,  v1064,  v1167,  v1270,  v1373,  v1476,  v1578,  v1680,  v1782,  v1883,  v1984,  v2084,  v2183,  v2281,  v2378,  v2474,  v2570,  v2664,  v2757,  v2848,  v2937,  v3024,  v3109,  v3192,  v3273,  v3352,  v3429,  v3504,  v3577,  v3648,  v3717,  v3784,  v3849,  v3912,  v3973,  v4032,  v4089,  v4144,  v4197,  v4248,  v4297,  v4344,
                           v4389,
                           v4432,
                           v4473,
                           v4512,
                           v4549,
                           v4584,
                           v4617,
                           v4648,
                           v4677,
                           v4704,
                           v4729,
                           v4752,
                           v4773,
                           v4792);
                  uint64_t v931 = sub_100043E38( v923,  v924,  v925,  v926,  v927,  v928,  v929,  v930,  v1065,  v1168,  v1271,  v1374,  v1477,  v1579,  v1681,  v1783,  v1884,  v1985,  v2085,  v2184,  v2282,  v2379,  v2475,  v2571,  v2665,  v2758,  v2849,  v2938,  v3025,  v3110,  v3193,  v3274,  v3353,  v3430,  v3505,  v3578,  v3649,  v3718,  v3785,  v3850,  v3913,  v3974,  v4033,  v4090,  v4145,  v4198,  v4249,  v4298,  v4345,
                           v4390,
                           v4433,
                           v4474,
                           v4513,
                           v4550,
                           v4585,
                           v4618,
                           v4649,
                           v4678,
                           v4705,
                           v4730,
                           v4753,
                           v4774,
                           v4793);
                  sub_100043E30( v931,  v932,  v933,  v934,  v935,  v936,  v937,  v938,  v1066,  v1169,  v1272,  v1375,  v1478,  v1580,  v1682,  v1784,  v1885,  v1986,  v2086,  v2185,  v2283,  v2380,  v2476,  v2572,  v2666,  v2759,  v2850,  v2939,  v3026,  v3111,  v3194,  v3275,  v3354,  v3431,  v3506,  v3579,  v3650,  v3719,  v3786,  v3851,  v3914,  v3975,  v4034,  v4091,  v4146,  v4199,  v4250,  v4299,  v4346,
                    v4391,
                    v4434,
                    v4475,
                    v4514,
                    v4551,
                    v4586,
                    v4619,
                    v4650,
                    v4679,
                    v4706,
                    v4731,
                    v4754,
                    v4775,
                    v4794);
                  sub_100043E28();
                  sub_100043E20();
                  sub_100043938();
                  uint64_t v939 = sub_100043930();
                  sub_100044584( v939,  v940,  v941,  v942,  v943,  v944,  v945,  v946,  v1067,  v1170,  v1273,  v1376,  v1479,  v1581,  v1683,  v1785,  v1886,  v1987,  v2087,  v2186,  v2284,  v2381,  v2477);
                  sub_100043928();
                  sub_100043920();
                  sub_100043D44();
                  sub_100043DB4();
                  sub_100043DAC();
                  sub_100043EF0();
                  sub_100043E50();
                  sub_1000442E4();
                  sub_1000442DC();
                  sub_100044938();
                  sub_100044D4C();
                  uint64_t v947 = (uint64_t (*)(void))sub_10000F588();
                  sub_10000F308(v947);
                }

                return;
              }

              sub_100041358(*(void *)(v52 + 712), &qword_10006A378);
            }

            ToolSymbolIconColor.init(rawValue:)(v87, v88);
            uint64_t v954 = sub_1000454D8();
            if (v951)
            {
              uint64_t v955 = sub_100044A10();
              sub_1000431B8(v955, &qword_10006A378);
            }

            else
            {
              sub_100044A04(v954);
            }

            sub_100046388(*(void *)(v52 + 720), v958, &qword_10006A378);
            uint64_t v959 = sub_1000454A4();
            if (v951)
            {
              uint64_t v960 = sub_100044F08();
              sub_1000431B8(v960, &qword_10006A378);
            }

            else
            {
              sub_100047480(v959);
            }

            sub_100047458();
            sub_10000844C(&qword_10006A428);
            sub_1000451E0();
            sub_100046C00();
            uint64_t v957 = (unsigned int *)&enum case for ToolSymbolIconStyle.multicolor(_:);
            goto LABEL_127;
          }
        }

        else
        {
          *uint64_t v89 = 0u;
          *(_OWORD *)(v4820 + 320) = 0u;
        }

        sub_1000431B8((uint64_t)v90, &qword_10006A420);
        goto LABEL_111;
      }

      sub_1000432F0();
    }

    swift_bridgeObjectRelease(*(void *)(v4820 + 464));
    sub_100046854();
    sub_1000432E8();
    uint64_t v78 = sub_1000448B0();
    goto LABEL_101;
  }

  uint64_t v4814 = sub_10004459C();
  id v40 = 0LL;
  LODWORD(v4812) = enum case for WFDeviceIdiomResource.Requirement.equalTo(_:);
  LODWORD(v4803) = enum case for WFDeviceIdiomResource.Requirement.notEqualTo(_:);
  LODWORD(v4799) = enum case for RuntimePlatform.watch(_:);
  LODWORD(v4811) = enum case for RuntimePlatform.macintosh(_:);
  unsigned int v4807 = v39;
  while (1)
  {
    if (v4814) {
      char v41 = (uint64_t)sub_1000430AC(v39 + 8 * v40);
    }
    else {
      char v41 = sub_100045150();
    }
    id v7 = v41;
    id v24 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(v40 + 1);
    if (__OFADD__(v40, 1LL))
    {
      __break(1u);
LABEL_129:
      __break(1u);
LABEL_130:
      __break(1u);
      goto LABEL_131;
    }

    id v35 = *(void **)(v4820 + 1000);
    id v15 = *(void *)(v4820 + 984);
    sub_1000450E4();
    if (sub_100046654() == (_DWORD)v4812)
    {
      sub_100043184(*(uint64_t (**)(uint64_t))(v4 + 96));
      sub_1000432D0();
      if (!(!v951 & v43)) {
        __asm { BR              X9 }
      }

      goto LABEL_98;
    }

    sub_100047068();
    if (v951) {
      break;
    }

    sub_100043124(*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8));
    ++v40;
  }

  sub_100043124(*(uint64_t (**)(uint64_t, uint64_t))(v4 + 96));
  sub_1000432D0();
  if (!(!v951 & v43)) {
    __asm { BR              X9 }
  }

uint64_t sub_10002B9A4()
{
  uint64_t v1 = (void *)v0[72];
  uint64_t v2 = swift_release(v0[249]);
  v0[250] = sub_10004341C(v2, "metadata");

  sub_10000F3A0();
  return sub_10000F2E4();
}

void sub_10002B9F8()
{
  uint64_t v8 = *(void *)(v2 + 2000);
  id v10 = sub_100043854(v9, "deprecationMetadata");
  sub_1000469E0();
  if (v0)
  {
    id v12 = sub_10004341C(v11, "replacedByIntentIdentifier");
    if (v12)
    {
      uint64_t v8 = sub_1000453AC((uint64_t)v12);
      sub_100047320();
    }

    else
    {

      uint64_t v8 = 0LL;
      uint64_t v1 = 0LL;
    }

    swift_bridgeObjectRelease(*(void *)(v2 + 368));
    *(void *)(v2 + 360) = v8;
    *(void *)(v2 + 368) = v1;
  }

  else
  {
  }

  uint64_t v4819 = v2 + 400;
  if ([*(id *)(v2 + 576) isResidentCompatible])
  {
    sub_10004501C();
    sub_100043254();
    sub_100043248();
    sub_1000432E0(v8);
  }

  uint64_t v13 = *(void *)(v2 + 1856);
  uint64_t v4820 = v2;
  uint64_t v14 = sub_100043EB8();
  uint64_t v15 = (uint64_t)&type metadata accessor for WFDeviceCapabilityResource;
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v14);
  id v17 = sub_10004341C(ObjCClassFromMetadata, "unevaluatedResourceObjectsOfClass:");
  uint64_t v18 = (uint64_t)&OBJC_CLASS___WFResource_ptr;
  sub_100043C10();
  sub_1000442C4(&qword_10006A3D8);
  sub_100045FA8(v19);
  sub_100043D6C();
  sub_1000442FC((uint64_t)&qword_10006A3D0);
  uint64_t v4812 = v13;
  sub_100043024();
  if (sub_100047744())
  {
    sub_100044EAC();
    if (v20 != v21)
    {
LABEL_131:
      __break(1u);
LABEL_132:
      __break(1u);
      goto LABEL_133;
    }

    uint64_t v15 = sub_100045B20();
    uint64_t v18 = 0LL;
    uint64_t v5 = enum case for RuntimeRequirement.deviceCapability(_:);
    uint64_t v6 = sub_100050CD0;
    uint64_t v4 = v2;
    do
    {
      if ((v15 & 1) != 0) {
        uint64_t v22 = (uint64_t)sub_1000430AC(v4816 + 8 * v18);
      }
      else {
        uint64_t v22 = sub_1000462F4(v18);
      }
      uint64_t v7 = v22;
      uint64_t v13 = *(void *)(v2 + 1072);
      ++v18;
      sub_1000448C4();
      sub_100045600();
      sub_100047738();
      sub_1000453B4(*(void *)(*(void *)(v2 + 400) + 16LL));
      sub_100044B28();
      sub_100037FF8();
    }

    while (&qword_10006A3D0 != (unint64_t *)v18);
  }

  sub_100044BA4();
  uint64_t v23 = sub_10004536C();
  id v24 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))&type metadata accessor for WFFeatureFlagResource;
  uint64_t v25 = swift_getObjCClassFromMetadata(v23);
  id v26 = sub_10004341C(v25, "unevaluatedResourceObjectsOfClass:");
  sub_1000452BC((uint64_t)v26);
  sub_100043670();
  sub_100046CE4();
  uint64_t v4797 = v13;
  *(void *)(v2 + 2008) = v13;
  sub_100042E4C();
  if (sub_100047744())
  {
    sub_100047114();
    if (v20 == v21)
    {
      char v4808 = sub_100045BE0();
      unsigned int v4804 = enum case for RuntimeRequirement.featureFlag(_:);
      while (1)
      {
        if ((v4808 & 1) != 0) {
          uint64_t v27 = (uint64_t)sub_1000430AC(v4816);
        }
        else {
          uint64_t v27 = sub_1000462F4(0LL);
        }
        char v28 = (void *)v27;
        uint64_t v29 = *(uint64_t **)(v2 + 1072);
        sub_100043F10();
        sub_100044F4C();
        char v30 = sub_100047370();
        *uint64_t v29 = v4;
        uint64_t v2 = v4820;
        *(void *)(v4812 + 8) = v5;
        *(void *)(v4812 + 16) = v6;
        *(void *)(v4812 + 24) = v24;
        *(_BYTE *)(v4812 + 32) = v30 & 1;
        sub_10004314C((uint64_t)v29, v4804, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4811 + 104));
        id v24 = sub_100050CD0;
        sub_100044EF0();
        sub_100044734(*(void *)(v4820 + 400));
        sub_100044174();
        sub_100037FF8();
      }
    }

    goto LABEL_132;
  }

  uint64_t v31 = *(void *)(v2 + 1672);
  sub_100044BA4();
  if (v31)
  {
    sub_100043240();
    sub_100043C20();
    *(void *)(v2 + 2016) = sub_1000431DC();
    sub_100042F20();
    sub_100043160();
LABEL_90:
    sub_100042EB0();
    return;
  }

  sub_100043230();
  if (sub_100043E10())
  {
    uint64_t v32 = (void *)sub_100043EA0();
  }

  else
  {
    sub_100008D58();
    uint64_t v32 = &_swiftEmptySetSingleton;
  }

  uint64_t v4821 = (uint64_t)v32;
  sub_100043230();
  if (sub_100043E10())
  {
    uint64_t v33 = (void *)sub_100043EA0();
  }

  else
  {
    sub_100008D58();
    uint64_t v33 = &_swiftEmptySetSingleton;
  }

  uint64_t v34 = sub_1000461CC((uint64_t)v33);
  id v35 = &type metadata accessor for WFDeviceIdiomResource;
  uint64_t v36 = swift_getObjCClassFromMetadata(v34);
  id v37 = sub_10004341C(v36, "unevaluatedResourceObjectsOfClass:");
  sub_1000452BC((uint64_t)v37);
  sub_100043670();
  sub_100044C3C(v15);
  uint64_t v39 = v38;
  sub_100042E4C();
  uint64_t v4817 = sub_10004650C();
  if (!v4817)
  {
LABEL_45:
    uint64_t v45 = sub_100043908();
    id v46 = sub_10004341C(v45, "disabledOnPlatforms");
    sub_100043F68();
    sub_100043F5C(v47);
    sub_100043670();
    if (sub_10004542C())
    {
      sub_100044EAC();
      if (v20 != v21)
      {
LABEL_133:
        __break(1u);
LABEL_134:
        __break(1u);
        goto LABEL_135;
      }

      sub_100044FA8();
      sub_1000449F0();
      do
      {
        if ((v18 & 1) != 0) {
          uint64_t v48 = (uint64_t)sub_1000430AC(v15 + 8 * v4);
        }
        else {
          uint64_t v48 = sub_100043FE4();
        }
        uint64_t v49 = (void *)v48;
        sub_100043B9C(v48, v4820);
        sub_1000443E8();

        sub_100043FD4((uint64_t)v35, *(uint64_t (**)(uint64_t, uint64_t))(v7 + 8));
      }

      while (v24 != (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v4);
    }

    uint64_t v50 = sub_100042E4C();
    if (*(void *)(v4821 + 16)) {
      uint64_t v51 = sub_100009BEC();
    }
    else {
      uint64_t v51 = static RuntimePlatform.all.getter(v50);
    }
    uint64_t v52 = v4820;
    uint64_t v4822 = v51;
    uint64_t v53 = sub_1000436BC();
    sub_1000393C8(v53);
    sub_100043174();
    uint64_t v54 = sub_10004317C();
    uint64_t v55 = sub_1000352A0(v54);
    sub_100043238(v4822);
    sub_100043174();
    sub_100042E4C();
    uint64_t v4818 = v55;
    if (sub_100046D3C())
    {
      sub_100047114();
      if (v20 == v21)
      {
        char v4813 = sub_1000447B4();
        unsigned int v4801 = enum case for RuntimeRequirement.platform(_:);
        while (1)
        {
          if ((v4813 & 1) != 0)
          {
            uint64_t v56 = *(void *)(v52 + 944);
            uint64_t v52 = v4811;
            sub_100043F1C( v56,  (*(unsigned __int8 *)(v52 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v52 + 80));
          }

          else
          {
            uint64_t v57 = sub_100043000(0LL, v55, (uint64_t (*)(void))&type metadata accessor for RuntimePlatform);
            uint64_t v52 = v4811;
            if (v4799 != 8) {
              goto LABEL_129;
            }
            sub_100045278(v57);
            sub_1000431C0();
          }

          sub_100043DD8();
          uint64_t v58 = sub_100045354();
          sub_100043524(v58);
          sub_10004314C(v55, v4821, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4803 + 16));
          sub_1000447A4(v55, v4801, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4807 + 104));
          sub_100045148();
          sub_100044690(*(void *)(v52 + 400));
          sub_100037FF8();
          sub_100043380(v4821, *(uint64_t (**)(uint64_t, uint64_t))(v4803 + 8));
        }
      }

      goto LABEL_134;
    }

    sub_100044BA4();
    uint64_t v59 = sub_100047584();
    *(void *)(v4820 + 456) = v59;
    sub_100043230();
    *(void *)(v4820 + 464) = v60;
    *(void *)(v4820 + 472) = &OBJC_PROTOCOL___WFLinkActionProtocol;
    uint64_t v4815 = v59;
    if (sub_100045218(v4821))
    {
      id v61 = sub_100046E6C();
      id v62 = sub_10004416C((uint64_t)v61, "backingActionIdentifiers");
      uint64_t v59 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v62, &type metadata for String);

      uint64_t v13 = v4797;
      sub_100013D08(v59);
      sub_1000461EC();
      sub_1000436BC();
      uint64_t v63 = sub_1000453D8();

      sub_100008D58();
      sub_10004784C();
      *(void *)(v4820 + 464) = v63;
    }

    uint64_t v4805 = (void *)(v4820 + 464);
    *(void *)(v4820 + 2032) = v13;
    if (!sub_100044F00() && sub_1000531E4(v59))
    {
      sub_100046E94();
      if (v20 != v21)
      {
LABEL_135:
        __break(1u);
        JUMPOUT(0x10002CD54LL);
      }

      char v64 = sub_10004430C();
      uint64_t v18 = enum case for SystemToolProtocol.assistantSchema(_:);
      sub_100043E98();
      sub_1000475B8((uint64_t)"SystemToolProtocol");
      do
      {
        if ((v64 & 1) != 0)
        {
          uint64_t v65 = sub_100044484( *(void *)(v4820 + 872),  v59 + ((*(unsigned __int8 *)(v7 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80)));
        }

        else
        {
          uint64_t v66 = sub_100046794(0LL, v59, (uint64_t (*)(void))&type metadata accessor for SystemToolProtocol);
          if (v4812 != 8) {
            goto LABEL_130;
          }
          sub_10004525C(v66);
          uint64_t v65 = sub_1000431C0();
        }

        sub_100044458(v65, *(void *)(v4820 + 872));
        int v67 = sub_100044448();
        uint64_t v68 = *(void *)(v4820 + 864);
        if (v67 == (_DWORD)v18)
        {
          uint64_t v69 = *(void *)(v4820 + 824);
          sub_100043184(*(uint64_t (**)(uint64_t))(v7 + 96));
          sub_100043D7C(v69, v68, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4818 + 32));
          sub_100044E94();
          sub_100044DAC();
          uint64_t v70 = sub_100044DFC();
          sub_100044EE8();
          if (*(void *)(v70 + 16) && (unint64_t v71 = sub_100051CAC(), (v72 & 1) != 0))
          {
            sub_1000431C8(v71, *(void *)(v4820 + 776));
            uint64_t v73 = 0LL;
          }

          else
          {
            uint64_t v73 = 1LL;
          }

          uint64_t v74 = *(void *)(v4820 + 776);
          sub_10000848C(v74, v73, 1LL, *(void *)(v4820 + 784));
          sub_100008D58();
          sub_100046C9C();
          if (v951)
          {
            uint64_t v75 = *(void *)(v4820 + 776);
            sub_10000F508(v74, *(uint64_t (**)(uint64_t, uint64_t))(v4818 + 8));
            sub_100041358(v75, &qword_10006A390);
          }

          else
          {
            sub_100044128();
            sub_1000464FC();
            sub_100015F18();
            sub_100044EB8();
            sub_10000F508(v74, *(uint64_t (**)(uint64_t, uint64_t))(v4818 + 8));
          }

          uint64_t v59 = v4815;
        }

        else
        {
          sub_100043184(*(uint64_t (**)(uint64_t))(v7 + 8));
        }

        sub_1000462B4();
      }

      while (!v951);
      sub_100043024();
    }

    if (sub_100044DA4(v4805))
    {
      sub_100044F2C(*(void *)(v4820 + 840));
      sub_100046C6C();
      sub_100044724(*(void *)(v4820 + 456));
      sub_100045388();
    }

    if (*(void *)(v4820 + 1672))
    {
      sub_100043240();
      sub_100046C4C();
      *(void *)(v4820 + 2040) = sub_100046504();
      sub_100045294();
      sub_100043160();
      goto LABEL_90;
    }

    sub_100040428(*(void **)(v4820 + 576), (SEL *)&selRef_iconName);
    if (v76)
    {
      sub_100045FEC();
      sub_100046854();
      *(void *)(v4820 + 480) = 0LL;
      *(void *)(v4820 + 488) = v13;
      uint64_t v77 = sub_1000432E8();
      sub_100043084(v77);
      sub_100043BE0();
LABEL_101:
      sub_10000848C(v78, v79, v80, v81);
      goto LABEL_102;
    }

    sub_100040428(*(void **)(v4820 + 576), (SEL *)&selRef_iconSymbolName);
    if (v83)
    {
      uint64_t v84 = v82;
      uint64_t v18 = v83;
      sub_100040428(*(void **)(v4820 + 576), (SEL *)&selRef_iconBackgroundColorName);
      if (v86)
      {
        uint64_t v87 = v85;
        uint64_t v88 = v86;
        uint64_t v4809 = v84;
        uint64_t v89 = (_OWORD *)(v4820 + 304);
        id v90 = [*(id *)(v4820 + 576) definition];
        if (v90)
        {
          uint64_t v13 = v4820 + 272;
          id v91 = [v90 objectForKey:WFActionIconSymbolColorNameKey];
          sub_1000461FC();
          if (v4820)
          {
            sub_1000448D0();
            sub_1000460B4();
          }

          else
          {
            sub_100044F68();
          }

          sub_100045EAC(v4820 + 272, v92, &qword_10006A420);
          uint64_t v52 = v4820;
          if (*(void *)(v4820 + 328))
          {
            if ((sub_100009C04( v4820 + 376,  (uint64_t)v89,  (uint64_t)&type metadata for Any + 8,  (uint64_t)&type metadata for String) & 1) != 0)
            {
              sub_100047498();
              goto LABEL_112;
            }

uint64_t sub_10002CD8C()
{
  uint64_t v1 = sub_100044C94(*(void *)(v0 + 2016));
  *(void *)(v0 + 2024) = sub_10004341C(v1, "metadata");
  sub_10000F3A0();
  return sub_10000F2D0();
}

uint64_t sub_10002CDD4()
{
  uint64_t v4 = v0 + 400;
  uint64_t v5 = sub_100040474(*(void **)(v0 + 2024));
  if (!v5)
  {

    uint64_t v13 = *(void *)(v0 + 2008);
    goto LABEL_16;
  }

  uint64_t v1 = v5;
  uint64_t v6 = *(void *)(v0 + 2008);
  uint64_t v7 = static RuntimeAvailabilityAnnotation.expand(from:)();
  if (v6)
  {
    uint64_t v2277 = v6;
    uint64_t v8 = *(void **)(v0 + 1672);
    uint64_t v9 = *(void **)(v0 + 1664);
    uint64_t v10 = *(void *)(v0 + 1632);
    uint64_t v11 = *(void *)(v0 + 1624);
    uint64_t v4411 = *(void *)(v0 + 1520);
    uint64_t v4414 = *(void *)(v0 + 1512);
    uint64_t v4415 = *(void *)(v0 + 1552);
    uint64_t v12 = *(void *)(v0 + 1312);
    uint64_t v4422 = *(void *)(v0 + 1864);
    uint64_t v4426 = *(void *)(v0 + 1272);
    uint64_t v4428 = *(void *)(v0 + 1264);
    uint64_t v4432 = *(void *)(v0 + 1296);

    sub_100043024();
    sub_100044004();
    sub_100043910(v10, *(uint64_t (**)(uint64_t, uint64_t))(v11 + 8));
    sub_100043AEC(*(uint64_t (**)(uint64_t, uint64_t))(v12 + 8));
    (*(void (**)(uint64_t, uint64_t))(v4411 + 8))(v4415, v4414);
    swift_release(v4422);
    sub_100008D58();
    sub_1000463A8();
    sub_100043A38();
    (*(void (**)(uint64_t, uint64_t))(v4426 + 8))(v4432, v4428);
    goto LABEL_77;
  }

  uint64_t v14 = v7;
  sub_100043024();
  uint64_t v15 = sub_1000531E4(v14);
  if (!v15)
  {
    sub_100037E60(0LL);
    sub_100042E4C();
LABEL_15:
    char v28 = *(void **)(v0 + 1672);
    sub_100015F18();

    uint64_t v13 = 0LL;
LABEL_16:
    id v29 = (id)(v0 + 472);
    uint64_t v30 = sub_1000471D8();
    *(void *)(v0 + 456) = v30;
    sub_100043230();
    *(void *)(v0 + 464) = v31;
    *(void *)(v0 + 472) = &OBJC_PROTOCOL___WFLinkActionProtocol;
    if (sub_100043D04(v1))
    {
      uint64_t v32 = *(void *)(v0 + 624);
      id v29 = sub_10004627C();
      id v33 = sub_10004550C((uint64_t)v29, "backingActionIdentifiers");
      uint64_t v34 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v33, &type metadata for String);

      id v35 = sub_100013D08(v34);
      sub_1000132B8();
      sub_1000443C8();
      uint64_t v3 = sub_10001F608((uint64_t)v35, v32);

      sub_100008D58();
      sub_100043024();
      *(void *)(v0 + 464) = v3;
    }

    uint64_t v4420 = (void *)(v0 + 464);
    *(void *)(v0 + 2032) = v13;
    if (!sub_100044F00())
    {
      uint64_t result = sub_1000531E4(v30);
      if (result)
      {
        if (result < 1) {
          goto LABEL_83;
        }
        uint64_t v3 = v0 + 512;
        uint64_t v36 = *(void *)(v0 + 848);
        uint64_t v2 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 840);
        uint64_t v4430 = *(void *)(v0 + 816);
        uint64_t v4418 = *(void *)(v0 + 792);
        char v37 = sub_100052268(v30);
        int v4434 = enum case for SystemToolProtocol.assistantSchema(_:);
        swift_bridgeObjectRetain(v30);
        sub_1000468D0();
        uint64_t v4416 = v36;
        uint64_t v4413 = v0 + 512;
        char v4424 = v37;
        do
        {
          if ((v37 & 1) != 0)
          {
            sub_100045544();
            (*((void (**)(void))v2 + 2))();
          }

          else
          {
            uint64_t result = sub_100038A18( 0LL,  v30,  (uint64_t (*)(void))&type metadata accessor for SystemToolProtocol);
            if (v36 != 8) {
              goto LABEL_81;
            }
            uint64_t v38 = sub_1000476B4(result);
            (*((void (**)(uint64_t, uint64_t))v2 + 2))(v38, v3);
            sub_1000431C0();
          }

          id v29 = *(id *)(v0 + 832);
          sub_100043D7C( *(void *)(v0 + 864),  *(void *)(v0 + 872),  *((uint64_t (**)(uint64_t, uint64_t, uint64_t))v2 + 4));
          if (sub_100043124(*((uint64_t (**)(uint64_t, uint64_t))v2 + 11)) == v4434)
          {
            sub_100043184(*((uint64_t (**)(uint64_t))v2 + 12));
            uint64_t v39 = sub_1000460C4();
            sub_100043C08(v39, v40, v41);
            sub_100044E94();
            sub_100044DAC();
            uint64_t v42 = sub_100044DFC();
            sub_100043C48();
            if (*(void *)(v42 + 16) && (unint64_t v43 = sub_100051CAC(), (v44 & 1) != 0))
            {
              sub_1000431C8(v43, *(void *)(v0 + 776));
              uint64_t v45 = 0LL;
            }

            else
            {
              uint64_t v45 = 1LL;
            }

            uint64_t v46 = *(void *)(v0 + 784);
            uint64_t v47 = *(void *)(v0 + 776);
            sub_10000848C(v47, v45, 1LL, v46);
            sub_100008D58();
            int v48 = sub_1000084E0(v47, 1LL, v46);
            uint64_t v49 = *(void *)(v0 + 824);
            id v29 = *(id *)(v0 + 808);
            if (v48 == 1)
            {
              uint64_t v50 = *(void *)(v0 + 776);
              sub_1000431A8(*(void *)(v0 + 824), *(uint64_t (**)(uint64_t, uint64_t))(v4430 + 8));
              sub_100041358(v50, &qword_10006A390);
            }

            else
            {
              uint64_t v51 = *(void *)(v0 + 800);
              uint64_t v52 = v30;
              uint64_t v53 = *(void *)(v0 + 784);
              uint64_t v54 = sub_100044D44( v51,  *(void *)(v0 + 776),  *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4418 + 32));
              AssistantToolSchemaDefinition.sampleInvocations.getter(v54);
              sub_100015F18();
              uint64_t v55 = v51;
              uint64_t v56 = v53;
              uint64_t v30 = v52;
              uint64_t v3 = v0 + 512;
              uint64_t v36 = v4416;
              (*(void (**)(uint64_t, uint64_t))(v4418 + 8))(v55, v56);
              sub_1000431A8(v49, *(uint64_t (**)(uint64_t, uint64_t))(v4430 + 8));
            }

            char v37 = v4424;
          }

          else
          {
            sub_100043184(*((uint64_t (**)(uint64_t))v2 + 1));
          }

          sub_1000462B4();
        }

        while (!v79);
        sub_1000466D8();
      }
    }

    if (sub_100044DA4(v4420))
    {
      sub_10004590C();
      sub_100044F40(v57);
      sub_100044848();
      sub_100043800(*(void *)(v0 + 456));
      sub_100045514();
    }

    uint64_t v58 = *(void *)(v0 + 1672);
    if (v58)
    {
      sub_100043240();
      id v59 = (id)v58;
      *(void *)(v0 + 2040) = sub_1000431DC();
      sub_100042F20();
      sub_100043160();
      sub_100045B50();
      return sub_100042EB0();
    }

    sub_100040428(*(void **)(v0 + 576), (SEL *)&selRef_iconName);
    uint64_t v4412 = v4;
    if (v60)
    {
      sub_100043FA4();
      sub_100044004();
      *(void *)(v0 + 480) = v29;
      *(void *)(v0 + 488) = 0LL;
      uint64_t v61 = enum case for ToolIcon.workflowAsset(_:);
      uint64_t v58 = sub_1000432E8();
      sub_10004314C(v0 + 480, v61, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v58 - 8) + 104LL));
      sub_100043BE0();
LABEL_75:
      sub_10000848C(v62, v63, v64, v65);
      sub_100046184();
      uint64_t v107 = *(void *)(v0 + 1320);
      uint64_t v4409 = v108;
      uint64_t v4410 = *(void *)(v0 + 1296);
      sub_100046154();
      char v109 = *(_BYTE *)(v0 + 2080);
      uint64_t v110 = *(void *)(v0 + 608);
      uint64_t v111 = *(void *)(v0 + 600);
      uint64_t v4408 = *(void *)(v0 + 592);
      sub_1000462FC();
      id v113 = sub_100046088(v112, "identifier");
      sub_1000453AC((uint64_t)v113);
      sub_100046F1C();
      uint64_t v114 = sub_100044B10();
      *(void *)(v114 + 16) = v2;
      *(void *)(v114 + 24) = v107;
      *(void *)(v114 + 32) = v111;
      *(void *)(v114 + 40) = v110;
      *(_BYTE *)(v114 + 48) = v109 & 1;
      *(void *)(v114 + 56) = v4409;
      *(void *)(v114 + 64) = v58;
      *(void *)(v114 + 72) = v0 + 360;
      *(void *)(v114 + 80) = v4410;
      *(void *)(v114 + 88) = v4412;
      *(void *)(v114 + 96) = v4413;
      uint64_t v115 = sub_100047878((void *)v114, v4408);
      sub_100043B58((uint64_t)v115, v4418);
      ToolDatabase.Rollbackable.inSavepoint<A>(name:work:)(v3, v4, sub_100040F80, v114);
      uint64_t v4431 = *(void *)(v0 + 1864);
      uint64_t v4425 = *(void **)(v0 + 1664);
      sub_100043D84();
      if (v0 == -464)
      {
        uint64_t v1558 = MEMORY[0x478];
        uint64_t v1657 = MEMORY[0x470];
        uint64_t v1755 = MEMORY[0x468];
        uint64_t v1852 = MEMORY[0x460];
        uint64_t v1948 = MEMORY[0x458];
        uint64_t v2137 = MEMORY[0x438];
        uint64_t v2230 = MEMORY[0x430];
        uint64_t v1162 = MEMORY[0x420];
        uint64_t v1261 = MEMORY[0x418];
        uint64_t v1360 = MEMORY[0x440];
        uint64_t v2413 = MEMORY[0x428];
        uint64_t v2502 = MEMORY[0x410];
        uint64_t v2674 = MEMORY[0x408];
        uint64_t v2838 = MEMORY[0x400];
        uint64_t v2994 = MEMORY[0x3E8];
        uint64_t v3069 = MEMORY[0x3E0];
        uint64_t v3213 = MEMORY[0x3D8];
        uint64_t v3349 = MEMORY[0x3D0];
        uint64_t v3477 = MEMORY[0x3B0];
        uint64_t v3597 = MEMORY[0x3A8];
        uint64_t v3709 = MEMORY[0x390];
        uint64_t v3813 = MEMORY[0x388];
        uint64_t v3862 = MEMORY[0x370];
        uint64_t v3954 = MEMORY[0x368];
        uint64_t v483 = MEMORY[0x350];
        uint64_t v964 = MEMORY[0x348];
        uint64_t v1063 = MEMORY[0x358];
        uint64_t v1459 = MEMORY[0x340];
        uint64_t v4077 = MEMORY[0x338];
        uint64_t v4149 = MEMORY[0x330];
        sub_100045710();
        uint64_t v2322 = v484;
        uint64_t v2589 = MEMORY[0x2F8];
        uint64_t v2757 = MEMORY[0x2F0];
        uint64_t v2917 = MEMORY[0x2E8];
        uint64_t v3142 = MEMORY[0x2E0];
        uint64_t v3282 = MEMORY[0x2D8];
        uint64_t v3414 = MEMORY[0x2D0];
        uint64_t v3538 = MEMORY[0x2C8];
        uint64_t v3654 = MEMORY[0x2C0];
        uint64_t v3762 = MEMORY[0x2A0];
        uint64_t v3909 = MEMORY[0x298];
        uint64_t v3997 = MEMORY[0x290];
        uint64_t v4038 = MEMORY[0x280];
        uint64_t v4114 = MEMORY[0x278];
        uint64_t v4182 = MEMORY[0x260];
        uint64_t v4213 = MEMORY[0x258];
        uint64_t v4242 = MEMORY[0x240];
        uint64_t v4269 = MEMORY[0x238];
        uint64_t v4294 = MEMORY[0x218];
        uint64_t v4317 = MEMORY[0x200];
        uint64_t v4338 = MEMORY[0x1F8];
        uint64_t v4357 = MEMORY[0x1F0];
        uint64_t v4374 = MEMORY[0x1E8];
        uint64_t v4389 = MEMORY[0x1E0];
        uint64_t v4402 = MEMORY[0x1C0];
        uint64_t v2043 = MEMORY[0x130];
        sub_10004763C(v485);

        sub_1000465C0();
        sub_100046284();
        uint64_t v486 = sub_10000F484();
        sub_1000431B8(v486, &qword_10006A388);
        sub_100044D3C(*(uint64_t (**)(uint64_t))(v483 + 8));
        sub_100046D6C(*(uint64_t (**)(uint64_t))(v1162 + 8));
        sub_100043B64();
        swift_release(v4431);
        sub_100042E4C();
        sub_100043F9C((uint64_t)v2, MEMORY[8]);
        sub_100043A38();
        sub_100043910(v1459, *(uint64_t (**)(uint64_t, uint64_t))(v107 + 8));
        sub_100043B04();
        uint64_t v487 = sub_10000F3F4();
        uint64_t v495 = sub_100043CE8( v487,  v488,  v489,  v490,  v491,  v492,  v493,  v494,  v964,  v1063,  v1162,  v1261,  v1360,  v1459,  v1558);
        uint64_t v503 = sub_100043BBC( v495,  v496,  v497,  v498,  v499,  v500,  v501,  v502,  v965,  v1064,  v1163,  v1262,  v1361,  v1460,  v1559,  v1657);
        uint64_t v511 = sub_100043BB4( v503,  v504,  v505,  v506,  v507,  v508,  v509,  v510,  v966,  v1065,  v1164,  v1263,  v1362,  v1461,  v1560,  v1658,  v1755);
        uint64_t v519 = sub_1000435E4( v511,  v512,  v513,  v514,  v515,  v516,  v517,  v518,  v967,  v1066,  v1165,  v1264,  v1363,  v1462,  v1561,  v1659,  v1756,  v1852);
        sub_100043900( v519,  v520,  v521,  v522,  v523,  v524,  v525,  v526,  v968,  v1067,  v1166,  v1265,  v1364,  v1463,  v1562,  v1660,  v1757,  v1853,  v1948);
        uint64_t v527 = sub_10000F484();
        uint64_t v535 = sub_100044AF4( v527,  v528,  v529,  v530,  v531,  v532,  v533,  v534,  v969,  v1068,  v1167,  v1266,  v1365,  v1464,  v1563,  v1661,  v1758,  v1854,  v1949,  v2043,  v2137);
        uint64_t v543 = sub_100044940( v535,  v536,  v537,  v538,  v539,  v540,  v541,  v542,  v970,  v1069,  v1168,  v1267,  v1366,  v1465,  v1564,  v1662,  v1759,  v1855,  v1950,  v2044,  v2138,  v2230);
        uint64_t v551 = sub_100043EE8( v543,  v544,  v545,  v546,  v547,  v548,  v549,  v550,  v971,  v1070,  v1169,  v1268,  v1367,  v1466,  v1565,  v1663,  v1760,  v1856,  v1951,  v2045,  v2139,  v2231,  v2322,  v2413);
        uint64_t v559 = sub_100043F40( v551,  v552,  v553,  v554,  v555,  v556,  v557,  v558,  v972,  v1071,  v1170,  v1269,  v1368,  v1467,  v1566,  v1664,  v1761,  v1857,  v1952,  v2046,  v2140,  v2232,  v2323,  v2414,  v2502);
        uint64_t v567 = sub_1000436E8( v559,  v560,  v561,  v562,  v563,  v564,  v565,  v566,  v973,  v1072,  v1171,  v1270,  v1369,  v1468,  v1567,  v1665,  v1762,  v1858,  v1953,  v2047,  v2141,  v2233,  v2324,  v2415,  v2503,  v2589,  v2674);
        uint64_t v575 = sub_100043624( v567,  v568,  v569,  v570,  v571,  v572,  v573,  v574,  v974,  v1073,  v1172,  v1271,  v1370,  v1469,  v1568,  v1666,  v1763,  v1859,  v1954,  v2048,  v2142,  v2234,  v2325,  v2416,  v2504,  v2590,  v2675,  v2757,  v2838);
        uint64_t v583 = sub_100043660( v575,  v576,  v577,  v578,  v579,  v580,  v581,  v582,  v975,  v1074,  v1173,  v1272,  v1371,  v1470,  v1569,  v1667,  v1764,  v1860,  v1955,  v2049,  v2143,  v2235,  v2326,  v2417,  v2505,  v2591,  v2676,  v2758,  v2839,  v2917,  v2994);
        uint64_t v591 = sub_10004361C( v583,  v584,  v585,  v586,  v587,  v588,  v589,  v590,  v976,  v1075,  v1174,  v1273,  v1372,  v1471,  v1570,  v1668,  v1765,  v1861,  v1956,  v2050,  v2144,  v2236,  v2327,  v2418,  v2506,  v2592,  v2677,  v2759,  v2840,  v2918,  v2995,  v3069);
        uint64_t v599 = sub_100043A48( v591,  v592,  v593,  v594,  v595,  v596,  v597,  v598,  v977,  v1076,  v1175,  v1274,  v1373,  v1472,  v1571,  v1669,  v1766,  v1862,  v1957,  v2051,  v2145,  v2237,  v2328,  v2419,  v2507,  v2593,  v2678,  v2760,  v2841,  v2919,  v2996,  v3070,  v3142,  v3213);
        uint64_t v607 = sub_1000437F8( v599,  v600,  v601,  v602,  v603,  v604,  v605,  v606,  v978,  v1077,  v1176,  v1275,  v1374,  v1473,  v1572,  v1670,  v1767,  v1863,  v1958,  v2052,  v2146,  v2238,  v2329,  v2420,  v2508,  v2594,  v2679,  v2761,  v2842,  v2920,  v2997,  v3071,  v3143,  v3214,  v3282,  v3349);
        uint64_t v615 = sub_100043A30( v607,  v608,  v609,  v610,  v611,  v612,  v613,  v614,  v979,  v1078,  v1177,  v1276,  v1375,  v1474,  v1573,  v1671,  v1768,  v1864,  v1959,  v2053,  v2147,  v2239,  v2330,  v2421,  v2509,  v2595,  v2680,  v2762,  v2843,  v2921,  v2998,  v3072,  v3144,  v3215,  v3283,  v3350,  v3414,  v3477);
        uint64_t v623 = sub_100043A20( v615,  v616,  v617,  v618,  v619,  v620,  v621,  v622,  v980,  v1079,  v1178,  v1277,  v1376,  v1475,  v1574,  v1672,  v1769,  v1865,  v1960,  v2054,  v2148,  v2240,  v2331,  v2422,  v2510,  v2596,  v2681,  v2763,  v2844,  v2922,  v2999,  v3073,  v3145,  v3216,  v3284,  v3351,  v3415,  v3478,  v3538,  v3597);
        uint64_t v631 = sub_100043A10( v623,  v624,  v625,  v626,  v627,  v628,  v629,  v630,  v981,  v1080,  v1179,  v1278,  v1377,  v1476,  v1575,  v1673,  v1770,  v1866,  v1961,  v2055,  v2149,  v2241,  v2332,  v2423,  v2511,  v2597,  v2682,  v2764,  v2845,  v2923,  v3000,  v3074,  v3146,  v3217,  v3285,  v3352,  v3416,  v3479,  v3539,  v3598,  v3654,  v3709);
        uint64_t v639 = sub_100043A00( v631,  v632,  v633,  v634,  v635,  v636,  v637,  v638,  v982,  v1081,  v1180,  v1279,  v1378,  v1477,  v1576,  v1674,  v1771,  v1867,  v1962,  v2056,  v2150,  v2242,  v2333,  v2424,  v2512,  v2598,  v2683,  v2765,  v2846,  v2924,  v3001,  v3075,  v3147,  v3218,  v3286,  v3353,  v3417,  v3480,  v3540,  v3599,  v3655,  v3710,  v3762,  v3813);
        uint64_t v647 = sub_1000439F8( v639,  v640,  v641,  v642,  v643,  v644,  v645,  v646,  v983,  v1082,  v1181,  v1280,  v1379,  v1478,  v1577,  v1675,  v1772,  v1868,  v1963,  v2057,  v2151,  v2243,  v2334,  v2425,  v2513,  v2599,  v2684,  v2766,  v2847,  v2925,  v3002,  v3076,  v3148,  v3219,  v3287,  v3354,  v3418,  v3481,  v3541,  v3600,  v3656,  v3711,  v3763,  v3814,  v3862);
        sub_1000439E8( v647,  v648,  v649,  v650,  v651,  v652,  v653,  v654,  v984,  v1083,  v1182,  v1281,  v1380,  v1479,  v1578,  v1676,  v1773,  v1869,  v1964,  v2058,  v2152,  v2244,  v2335,  v2426,  v2514,  v2600,  v2685,  v2767,  v2848,  v2926,  v3003,  v3077,  v3149,  v3220,  v3288,  v3355,  v3419,  v3482,  v3542,  v3601,  v3657,  v3712,  v3764,  v3815,  v3863,  v3909,  v3954);
        sub_10000F4EC();
        uint64_t v655 = sub_10000F404();
        uint64_t v663 = sub_1000439D0( v655,  v656,  v657,  v658,  v659,  v660,  v661,  v662,  v985,  v1084,  v1183,  v1282,  v1381,  v1480,  v1579,  v1677,  v1774,  v1870,  v1965,  v2059,  v2153,  v2245,  v2336,  v2427,  v2515,  v2601,  v2686,  v2768,  v2849,  v2927,  v3004,  v3078,  v3150,  v3221,  v3289,  v3356,  v3420,  v3483,  v3543,  v3602,  v3658,  v3713,  v3765,  v3816,  v3864,  v3910,  v3955,  v3997,  v4038,
                 v4077);
        sub_1000439C0( v663,  v664,  v665,  v666,  v667,  v668,  v669,  v670,  v986,  v1085,  v1184,  v1283,  v1382,  v1481,  v1580,  v1678,  v1775,  v1871,  v1966,  v2060,  v2154,  v2246,  v2337,  v2428,  v2516,  v2602,  v2687,  v2769,  v2850,  v2928,  v3005,  v3079,  v3151,  v3222,  v3290,  v3357,  v3421,  v3484,  v3544,  v3603,  v3659,  v3714,  v3766,  v3817,  v3865,  v3911,  v3956,  v3998,  v4039,
          v4078,
          v4114,
          v4149);
        uint64_t v671 = sub_10000F3FC();
        uint64_t v679 = sub_100044584( v671,  v672,  v673,  v674,  v675,  v676,  v677,  v678,  v987,  v1086,  v1185,  v1284,  v1383,  v1482,  v1581,  v1679,  v1776,  v1872,  v1967,  v2061,  v2155,  v2247,  v2338);
        uint64_t v687 = sub_1000436F0( v679,  v680,  v681,  v682,  v683,  v684,  v685,  v686,  v988,  v1087,  v1186,  v1285,  v1384,  v1483,  v1582,  v1680,  v1777,  v1873,  v1968,  v2062,  v2156,  v2248,  v2339,  v2429,  v2517,  v2603);
        uint64_t v695 = sub_1000436C4( v687,  v688,  v689,  v690,  v691,  v692,  v693,  v694,  v989,  v1088,  v1187,  v1286,  v1385,  v1484,  v1583,  v1681,  v1778,  v1874,  v1969,  v2063,  v2157,  v2249,  v2340,  v2430,  v2518,  v2604,  v2688,  v2770);
        uint64_t v703 = sub_100043658( v695,  v696,  v697,  v698,  v699,  v700,  v701,  v702,  v990,  v1089,  v1188,  v1287,  v1386,  v1485,  v1584,  v1682,  v1779,  v1875,  v1970,  v2064,  v2158,  v2250,  v2341,  v2431,  v2519,  v2605,  v2689,  v2771,  v2851,  v2929);
        uint64_t v711 = sub_100043614( v703,  v704,  v705,  v706,  v707,  v708,  v709,  v710,  v991,  v1090,  v1189,  v1288,  v1387,  v1486,  v1585,  v1683,  v1780,  v1876,  v1971,  v2065,  v2159,  v2251,  v2342,  v2432,  v2520,  v2606,  v2690,  v2772,  v2852,  v2930,  v3006,  v3080,  v3152);
        uint64_t v719 = sub_100043A40( v711,  v712,  v713,  v714,  v715,  v716,  v717,  v718,  v992,  v1091,  v1190,  v1289,  v1388,  v1487,  v1586,  v1684,  v1781,  v1877,  v1972,  v2066,  v2160,  v2252,  v2343,  v2433,  v2521,  v2607,  v2691,  v2773,  v2853,  v2931,  v3007,  v3081,  v3153,  v3223,  v3291);
        uint64_t v727 = sub_10004384C( v719,  v720,  v721,  v722,  v723,  v724,  v725,  v726,  v993,  v1092,  v1191,  v1290,  v1389,  v1488,  v1587,  v1685,  v1782,  v1878,  v1973,  v2067,  v2161,  v2253,  v2344,  v2434,  v2522,  v2608,  v2692,  v2774,  v2854,  v2932,  v3008,  v3082,  v3154,  v3224,  v3292,  v3358,  v3422);
        uint64_t v735 = sub_100043A28( v727,  v728,  v729,  v730,  v731,  v732,  v733,  v734,  v994,  v1093,  v1192,  v1291,  v1390,  v1489,  v1588,  v1686,  v1783,  v1879,  v1974,  v2068,  v2162,  v2254,  v2345,  v2435,  v2523,  v2609,  v2693,  v2775,  v2855,  v2933,  v3009,  v3083,  v3155,  v3225,  v3293,  v3359,  v3423,  v3485,  v3545);
        uint64_t v743 = sub_100043A18( v735,  v736,  v737,  v738,  v739,  v740,  v741,  v742,  v995,  v1094,  v1193,  v1292,  v1391,  v1490,  v1589,  v1687,  v1784,  v1880,  v1975,  v2069,  v2163,  v2255,  v2346,  v2436,  v2524,  v2610,  v2694,  v2776,  v2856,  v2934,  v3010,  v3084,  v3156,  v3226,  v3294,  v3360,  v3424,  v3486,  v3546,  v3604,  v3660);
        uint64_t v751 = sub_100043A08( v743,  v744,  v745,  v746,  v747,  v748,  v749,  v750,  v996,  v1095,  v1194,  v1293,  v1392,  v1491,  v1590,  v1688,  v1785,  v1881,  v1976,  v2070,  v2164,  v2256,  v2347,  v2437,  v2525,  v2611,  v2695,  v2777,  v2857,  v2935,  v3011,  v3085,  v3157,  v3227,  v3295,  v3361,  v3425,  v3487,  v3547,  v3605,  v3661,  v3715,  v3767);
        uint64_t v759 = sub_1000439F0( v751,  v752,  v753,  v754,  v755,  v756,  v757,  v758,  v997,  v1096,  v1195,  v1294,  v1393,  v1492,  v1591,  v1689,  v1786,  v1882,  v1977,  v2071,  v2165,  v2257,  v2348,  v2438,  v2526,  v2612,  v2696,  v2778,  v2858,  v2936,  v3012,  v3086,  v3158,  v3228,  v3296,  v3362,  v3426,  v3488,  v3548,  v3606,  v3662,  v3716,  v3768,  v3818,  v3866,  v3912);
        uint64_t v767 = sub_1000439E0( v759,  v760,  v761,  v762,  v763,  v764,  v765,  v766,  v998,  v1097,  v1196,  v1295,  v1394,  v1493,  v1592,  v1690,  v1787,  v1883,  v1978,  v2072,  v2166,  v2258,  v2349,  v2439,  v2527,  v2613,  v2697,  v2779,  v2859,  v2937,  v3013,  v3087,  v3159,  v3229,  v3297,  v3363,  v3427,  v3489,  v3549,  v3607,  v3663,  v3717,  v3769,  v3819,  v3867,  v3913,  v3957,  v3999);
        uint64_t v775 = sub_1000439D8( v767,  v768,  v769,  v770,  v771,  v772,  v773,  v774,  v999,  v1098,  v1197,  v1296,  v1395,  v1494,  v1593,  v1691,  v1788,  v1884,  v1979,  v2073,  v2167,  v2259,  v2350,  v2440,  v2528,  v2614,  v2698,  v2780,  v2860,  v2938,  v3014,  v3088,  v3160,  v3230,  v3298,  v3364,  v3428,  v3490,  v3550,  v3608,  v3664,  v3718,  v3770,  v3820,  v3868,  v3914,  v3958,  v4000,  v4040);
        uint64_t v783 = sub_1000439C8( v775,  v776,  v777,  v778,  v779,  v780,  v781,  v782,  v1000,  v1099,  v1198,  v1297,  v1396,  v1495,  v1594,  v1692,  v1789,  v1885,  v1980,  v2074,  v2168,  v2260,  v2351,  v2441,  v2529,  v2615,  v2699,  v2781,  v2861,  v2939,  v3015,  v3089,  v3161,  v3231,  v3299,  v3365,  v3429,  v3491,  v3551,  v3609,  v3665,  v3719,  v3771,  v3821,  v3869,  v3915,  v3959,  v4001,  v4041,
                 v4079,
                 v4115);
        uint64_t v791 = sub_1000439B8( v783,  v784,  v785,  v786,  v787,  v788,  v789,  v790,  v1001,  v1100,  v1199,  v1298,  v1397,  v1496,  v1595,  v1693,  v1790,  v1886,  v1981,  v2075,  v2169,  v2261,  v2352,  v2442,  v2530,  v2616,  v2700,  v2782,  v2862,  v2940,  v3016,  v3090,  v3162,  v3232,  v3300,  v3366,  v3430,  v3492,  v3552,  v3610,  v3666,  v3720,  v3772,  v3822,  v3870,  v3916,  v3960,  v4002,  v4042,
                 v4080,
                 v4116,
                 v4150,
                 v4182);
        uint64_t v799 = sub_1000439B0( v791,  v792,  v793,  v794,  v795,  v796,  v797,  v798,  v1002,  v1101,  v1200,  v1299,  v1398,  v1497,  v1596,  v1694,  v1791,  v1887,  v1982,  v2076,  v2170,  v2262,  v2353,  v2443,  v2531,  v2617,  v2701,  v2783,  v2863,  v2941,  v3017,  v3091,  v3163,  v3233,  v3301,  v3367,  v3431,  v3493,  v3553,  v3611,  v3667,  v3721,  v3773,  v3823,  v3871,  v3917,  v3961,  v4003,  v4043,
                 v4081,
                 v4117,
                 v4151,
                 v4183,
                 v4213);
        uint64_t v807 = sub_1000439A8( v799,  v800,  v801,  v802,  v803,  v804,  v805,  v806,  v1003,  v1102,  v1201,  v1300,  v1399,  v1498,  v1597,  v1695,  v1792,  v1888,  v1983,  v2077,  v2171,  v2263,  v2354,  v2444,  v2532,  v2618,  v2702,  v2784,  v2864,  v2942,  v3018,  v3092,  v3164,  v3234,  v3302,  v3368,  v3432,  v3494,  v3554,  v3612,  v3668,  v3722,  v3774,  v3824,  v3872,  v3918,  v3962,  v4004,  v4044,
                 v4082,
                 v4118,
                 v4152,
                 v4184,
                 v4214,
                 v4242);
        uint64_t v815 = sub_1000439A0( v807,  v808,  v809,  v810,  v811,  v812,  v813,  v814,  v1004,  v1103,  v1202,  v1301,  v1400,  v1499,  v1598,  v1696,  v1793,  v1889,  v1984,  v2078,  v2172,  v2264,  v2355,  v2445,  v2533,  v2619,  v2703,  v2785,  v2865,  v2943,  v3019,  v3093,  v3165,  v3235,  v3303,  v3369,  v3433,  v3495,  v3555,  v3613,  v3669,  v3723,  v3775,  v3825,  v3873,  v3919,  v3963,  v4005,  v4045,
                 v4083,
                 v4119,
                 v4153,
                 v4185,
                 v4215,
                 v4243,
                 v4269);
        uint64_t v823 = sub_100043998( v815,  v816,  v817,  v818,  v819,  v820,  v821,  v822,  v1005,  v1104,  v1203,  v1302,  v1401,  v1500,  v1599,  v1697,  v1794,  v1890,  v1985,  v2079,  v2173,  v2265,  v2356,  v2446,  v2534,  v2620,  v2704,  v2786,  v2866,  v2944,  v3020,  v3094,  v3166,  v3236,  v3304,  v3370,  v3434,  v3496,  v3556,  v3614,  v3670,  v3724,  v3776,  v3826,  v3874,  v3920,  v3964,  v4006,  v4046,
                 v4084,
                 v4120,
                 v4154,
                 v4186,
                 v4216,
                 v4244,
                 v4270,
                 v4294);
        uint64_t v831 = sub_100043990( v823,  v824,  v825,  v826,  v827,  v828,  v829,  v830,  v1006,  v1105,  v1204,  v1303,  v1402,  v1501,  v1600,  v1698,  v1795,  v1891,  v1986,  v2080,  v2174,  v2266,  v2357,  v2447,  v2535,  v2621,  v2705,  v2787,  v2867,  v2945,  v3021,  v3095,  v3167,  v3237,  v3305,  v3371,  v3435,  v3497,  v3557,  v3615,  v3671,  v3725,  v3777,  v3827,  v3875,  v3921,  v3965,  v4007,  v4047,
                 v4085,
                 v4121,
                 v4155,
                 v4187,
                 v4217,
                 v4245,
                 v4271,
                 v4295,
                 v4317);
        uint64_t v839 = sub_100043988( v831,  v832,  v833,  v834,  v835,  v836,  v837,  v838,  v1007,  v1106,  v1205,  v1304,  v1403,  v1502,  v1601,  v1699,  v1796,  v1892,  v1987,  v2081,  v2175,  v2267,  v2358,  v2448,  v2536,  v2622,  v2706,  v2788,  v2868,  v2946,  v3022,  v3096,  v3168,  v3238,  v3306,  v3372,  v3436,  v3498,  v3558,  v3616,  v3672,  v3726,  v3778,  v3828,  v3876,  v3922,  v3966,  v4008,  v4048,
                 v4086,
                 v4122,
                 v4156,
                 v4188,
                 v4218,
                 v4246,
                 v4272,
                 v4296,
                 v4318,
                 v4338);
        uint64_t v847 = sub_100043980( v839,  v840,  v841,  v842,  v843,  v844,  v845,  v846,  v1008,  v1107,  v1206,  v1305,  v1404,  v1503,  v1602,  v1700,  v1797,  v1893,  v1988,  v2082,  v2176,  v2268,  v2359,  v2449,  v2537,  v2623,  v2707,  v2789,  v2869,  v2947,  v3023,  v3097,  v3169,  v3239,  v3307,  v3373,  v3437,  v3499,  v3559,  v3617,  v3673,  v3727,  v3779,  v3829,  v3877,  v3923,  v3967,  v4009,  v4049,
                 v4087,
                 v4123,
                 v4157,
                 v4189,
                 v4219,
                 v4247,
                 v4273,
                 v4297,
                 v4319,
                 v4339,
                 v4357);
        uint64_t v855 = sub_100043978( v847,  v848,  v849,  v850,  v851,  v852,  v853,  v854,  v1009,  v1108,  v1207,  v1306,  v1405,  v1504,  v1603,  v1701,  v1798,  v1894,  v1989,  v2083,  v2177,  v2269,  v2360,  v2450,  v2538,  v2624,  v2708,  v2790,  v2870,  v2948,  v3024,  v3098,  v3170,  v3240,  v3308,  v3374,  v3438,  v3500,  v3560,  v3618,  v3674,  v3728,  v3780,  v3830,  v3878,  v3924,  v3968,  v4010,  v4050,
                 v4088,
                 v4124,
                 v4158,
                 v4190,
                 v4220,
                 v4248,
                 v4274,
                 v4298,
                 v4320,
                 v4340,
                 v4358,
                 v4374);
        uint64_t v863 = sub_100043970( v855,  v856,  v857,  v858,  v859,  v860,  v861,  v862,  v1010,  v1109,  v1208,  v1307,  v1406,  v1505,  v1604,  v1702,  v1799,  v1895,  v1990,  v2084,  v2178,  v2270,  v2361,  v2451,  v2539,  v2625,  v2709,  v2791,  v2871,  v2949,  v3025,  v3099,  v3171,  v3241,  v3309,  v3375,  v3439,  v3501,  v3561,  v3619,  v3675,  v3729,  v3781,  v3831,  v3879,  v3925,  v3969,  v4011,  v4051,
                 v4089,
                 v4125,
                 v4159,
                 v4191,
                 v4221,
                 v4249,
                 v4275,
                 v4299,
                 v4321,
                 v4341,
                 v4359,
                 v4375,
                 v4389);
        uint64_t v871 = sub_100043968( v863,  v864,  v865,  v866,  v867,  v868,  v869,  v870,  v1011,  v1110,  v1209,  v1308,  v1407,  v1506,  v1605,  v1703,  v1800,  v1896,  v1991,  v2085,  v2179,  v2271,  v2362,  v2452,  v2540,  v2626,  v2710,  v2792,  v2872,  v2950,  v3026,  v3100,  v3172,  v3242,  v3310,  v3376,  v3440,  v3502,  v3562,  v3620,  v3676,  v3730,  v3782,  v3832,  v3880,  v3926,  v3970,  v4012,  v4052,
                 v4090,
                 v4126,
                 v4160,
                 v4192,
                 v4222,
                 v4250,
                 v4276,
                 v4300,
                 v4322,
                 v4342,
                 v4360,
                 v4376,
                 v4390,
                 v4402);
        uint64_t v879 = sub_100043960( v871,  v872,  v873,  v874,  v875,  v876,  v877,  v878,  v1012,  v1111,  v1210,  v1309,  v1408,  v1507,  v1606,  v1704,  v1801,  v1897,  v1992,  v2086,  v2180,  v2272,  v2363,  v2453,  v2541,  v2627,  v2711,  v2793,  v2873,  v2951,  v3027,  v3101,  v3173,  v3243,  v3311,  v3377,  v3441,  v3503,  v3563,  v3621,  v3677,  v3731,  v3783,  v3833,  v3881,  v3927,  v3971,  v4013,  v4053,
                 v4091,
                 v4127,
                 v4161,
                 v4193,
                 v4223,
                 v4251,
                 v4277,
                 v4301,
                 v4323,
                 v4343,
                 v4361,
                 v4377,
                 v4391,
                 v4403);
        uint64_t v887 = sub_100043958( v879,  v880,  v881,  v882,  v883,  v884,  v885,  v886,  v1013,  v1112,  v1211,  v1310,  v1409,  v1508,  v1607,  v1705,  v1802,  v1898,  v1993,  v2087,  v2181,  v2273,  v2364,  v2454,  v2542,  v2628,  v2712,  v2794,  v2874,  v2952,  v3028,  v3102,  v3174,  v3244,  v3312,  v3378,  v3442,  v3504,  v3564,  v3622,  v3678,  v3732,  v3784,  v3834,  v3882,  v3928,  v3972,  v4014,  v4054,
                 v4092,
                 v4128,
                 v4162,
                 v4194,
                 v4224,
                 v4252,
                 v4278,
                 v4302,
                 v4324,
                 v4344,
                 v4362,
                 v4378,
                 v4392,
                 v4404);
        uint64_t v895 = sub_100043950( v887,  v888,  v889,  v890,  v891,  v892,  v893,  v894,  v1014,  v1113,  v1212,  v1311,  v1410,  v1509,  v1608,  v1706,  v1803,  v1899,  v1994,  v2088,  v2182,  v2274,  v2365,  v2455,  v2543,  v2629,  v2713,  v2795,  v2875,  v2953,  v3029,  v3103,  v3175,  v3245,  v3313,  v3379,  v3443,  v3505,  v3565,  v3623,  v3679,  v3733,  v3785,  v3835,  v3883,  v3929,  v3973,  v4015,  v4055,
                 v4093,
                 v4129,
                 v4163,
                 v4195,
                 v4225,
                 v4253,
                 v4279,
                 v4303,
                 v4325,
                 v4345,
                 v4363,
                 v4379,
                 v4393,
                 v4405);
        uint64_t v903 = sub_100043948( v895,  v896,  v897,  v898,  v899,  v900,  v901,  v902,  v1015,  v1114,  v1213,  v1312,  v1411,  v1510,  v1609,  v1707,  v1804,  v1900,  v1995,  v2089,  v2183,  v2275,  v2366,  v2456,  v2544,  v2630,  v2714,  v2796,  v2876,  v2954,  v3030,  v3104,  v3176,  v3246,  v3314,  v3380,  v3444,  v3506,  v3566,  v3624,  v3680,  v3734,  v3786,  v3836,  v3884,  v3930,  v3974,  v4016,  v4056,
                 v4094,
                 v4130,
                 v4164,
                 v4196,
                 v4226,
                 v4254,
                 v4280,
                 v4304,
                 v4326,
                 v4346,
                 v4364,
                 v4380,
                 v4394,
                 v4406);
        sub_100043940( v903,  v904,  v905,  v906,  v907,  v908,  v909,  v910,  v1016,  v1115,  v1214,  v1313,  v1412,  v1511,  v1610,  v1708,  v1805,  v1901,  v1996,  v2090,  v2184,  v2276,  v2367,  v2457,  v2545,  v2631,  v2715,  v2797,  v2877,  v2955,  v3031,  v3105,  v3177,  v3247,  v3315,  v3381,  v3445,  v3507,  v3567,  v3625,  v3681,  v3735,  v3787,  v3837,  v3885,  v3931,  v3975,  v4017,  v4057,
          v4095,
          v4131,
          v4165,
          v4197,
          v4227,
          v4255,
          v4281,
          v4305,
          v4327,
          v4347,
          v4365,
          v4381,
          v4395,
          v4407);
        sub_100043938();
        sub_100043930();
        sub_100043928();
        sub_100043920();
        uint64_t v911 = sub_100043D44();
        sub_100043AE4( v911,  v912,  v913,  v914,  v915,  v916,  v917,  v918,  v1017,  v1116,  v1215,  v1314,  v1413,  v1512,  v1611,  v1709,  v1806,  v1902,  v1997,  v2091);
        sub_100043DB4();
        sub_100043DAC();
        sub_100043EF0();
        sub_100043E50();
        sub_1000442E4();
        sub_1000442DC();
        sub_100044938();
        sub_100044D4C();
        sub_100044C9C();
        sub_100044948();
        sub_1000448DC();
        uint64_t v482 = (uint64_t (*)(void))sub_10000F588();
        return sub_10000F308(v482);
      }

      uint64_t v2277 = v0 + 464;
      uint64_t v117 = *(void *)(v0 + 1552);
      uint64_t v118 = *(void *)(v0 + 1520);
      uint64_t v119 = *(void *)(v0 + 1312);
      uint64_t v4419 = *(void *)(v0 + 1264);
      uint64_t v4421 = *(void *)(v0 + 1296);
      uint64_t v4417 = *(void *)(v0 + 1272);
      sub_100043820(v116);

      sub_1000465C0();
      sub_100046284();
      uint64_t v120 = sub_10000F484();
      sub_1000431B8(v120, &qword_10006A388);
      sub_100043AEC(*(uint64_t (**)(uint64_t, uint64_t))(v119 + 8));
      sub_100043FD4(v117, *(uint64_t (**)(uint64_t, uint64_t))(v118 + 8));
      sub_100043B64();
      swift_release(v4431);
      sub_100008D58();
      sub_1000473D0();
      sub_100043A38();
      (*(void (**)(uint64_t, uint64_t))(v4417 + 8))(v4421, v4419);
LABEL_77:
      sub_100043B04();
      sub_100042B6C();
      uint64_t v4435 = *(void *)(v0 + 648);
      swift_task_dealloc(v121);
      sub_10000F3FC();
      sub_10000F484();
      sub_10000F338();
      sub_10000F404();
      sub_10000F4A8();
      sub_10000F4EC();
      sub_10000F3F4();
      sub_10000F4A0();
      uint64_t v122 = sub_10000F41C();
      uint64_t v130 = sub_100043EE8( v122,  v123,  v124,  v125,  v126,  v127,  v128,  v129,  v919,  v1018,  v1117,  v1216,  v1315,  v1414,  v1513,  v1612,  v1710,  v1807,  v1903,  v1998,  v2092,  v2185,  v2277,  v2368);
      uint64_t v138 = sub_100043F40( v130,  v131,  v132,  v133,  v134,  v135,  v136,  v137,  v920,  v1019,  v1118,  v1217,  v1316,  v1415,  v1514,  v1613,  v1711,  v1808,  v1904,  v1999,  v2093,  v2186,  v2278,  v2369,  v2458);
      uint64_t v146 = sub_1000436F0( v138,  v139,  v140,  v141,  v142,  v143,  v144,  v145,  v921,  v1020,  v1119,  v1218,  v1317,  v1416,  v1515,  v1614,  v1712,  v1809,  v1905,  v2000,  v2094,  v2187,  v2279,  v2370,  v2459,  v2546);
      uint64_t v154 = sub_1000436E8( v146,  v147,  v148,  v149,  v150,  v151,  v152,  v153,  v922,  v1021,  v1120,  v1219,  v1318,  v1417,  v1516,  v1615,  v1713,  v1810,  v1906,  v2001,  v2095,  v2188,  v2280,  v2371,  v2460,  v2547,  v2632);
      uint64_t v162 = sub_1000436C4( v154,  v155,  v156,  v157,  v158,  v159,  v160,  v161,  v923,  v1022,  v1121,  v1220,  v1319,  v1418,  v1517,  v1616,  v1714,  v1811,  v1907,  v2002,  v2096,  v2189,  v2281,  v2372,  v2461,  v2548,  v2633,  v2716);
      uint64_t v170 = sub_100043624( v162,  v163,  v164,  v165,  v166,  v167,  v168,  v169,  v924,  v1023,  v1122,  v1221,  v1320,  v1419,  v1518,  v1617,  v1715,  v1812,  v1908,  v2003,  v2097,  v2190,  v2282,  v2373,  v2462,  v2549,  v2634,  v2717,  v2798);
      uint64_t v178 = sub_100043658( v170,  v171,  v172,  v173,  v174,  v175,  v176,  v177,  v925,  v1024,  v1123,  v1222,  v1321,  v1420,  v1519,  v1618,  v1716,  v1813,  v1909,  v2004,  v2098,  v2191,  v2283,  v2374,  v2463,  v2550,  v2635,  v2718,  v2799,  v2878);
      uint64_t v186 = sub_100043660( v178,  v179,  v180,  v181,  v182,  v183,  v184,  v185,  v926,  v1025,  v1124,  v1223,  v1322,  v1421,  v1520,  v1619,  v1717,  v1814,  v1910,  v2005,  v2099,  v2192,  v2284,  v2375,  v2464,  v2551,  v2636,  v2719,  v2800,  v2879,  v2956);
      uint64_t v194 = sub_10004361C( v186,  v187,  v188,  v189,  v190,  v191,  v192,  v193,  v927,  v1026,  v1125,  v1224,  v1323,  v1422,  v1521,  v1620,  v1718,  v1815,  v1911,  v2006,  v2100,  v2193,  v2285,  v2376,  v2465,  v2552,  v2637,  v2720,  v2801,  v2880,  v2957,  v3032);
      uint64_t v202 = sub_100043614( v194,  v195,  v196,  v197,  v198,  v199,  v200,  v201,  v928,  v1027,  v1126,  v1225,  v1324,  v1423,  v1522,  v1621,  v1719,  v1816,  v1912,  v2007,  v2101,  v2194,  v2286,  v2377,  v2466,  v2553,  v2638,  v2721,  v2802,  v2881,  v2958,  v3033,  v3106);
      uint64_t v210 = sub_100043A48( v202,  v203,  v204,  v205,  v206,  v207,  v208,  v209,  v929,  v1028,  v1127,  v1226,  v1325,  v1424,  v1523,  v1622,  v1720,  v1817,  v1913,  v2008,  v2102,  v2195,  v2287,  v2378,  v2467,  v2554,  v2639,  v2722,  v2803,  v2882,  v2959,  v3034,  v3107,  v3178);
      uint64_t v218 = sub_100043A40( v210,  v211,  v212,  v213,  v214,  v215,  v216,  v217,  v930,  v1029,  v1128,  v1227,  v1326,  v1425,  v1524,  v1623,  v1721,  v1818,  v1914,  v2009,  v2103,  v2196,  v2288,  v2379,  v2468,  v2555,  v2640,  v2723,  v2804,  v2883,  v2960,  v3035,  v3108,  v3179,  v3248);
      uint64_t v226 = sub_1000437F8( v218,  v219,  v220,  v221,  v222,  v223,  v224,  v225,  v931,  v1030,  v1129,  v1228,  v1327,  v1426,  v1525,  v1624,  v1722,  v1819,  v1915,  v2010,  v2104,  v2197,  v2289,  v2380,  v2469,  v2556,  v2641,  v2724,  v2805,  v2884,  v2961,  v3036,  v3109,  v3180,  v3249,  v3316);
      uint64_t v234 = sub_10004384C( v226,  v227,  v228,  v229,  v230,  v231,  v232,  v233,  v932,  v1031,  v1130,  v1229,  v1328,  v1427,  v1526,  v1625,  v1723,  v1820,  v1916,  v2011,  v2105,  v2198,  v2290,  v2381,  v2470,  v2557,  v2642,  v2725,  v2806,  v2885,  v2962,  v3037,  v3110,  v3181,  v3250,  v3317,  v3382);
      uint64_t v242 = sub_100043A30( v234,  v235,  v236,  v237,  v238,  v239,  v240,  v241,  v933,  v1032,  v1131,  v1230,  v1329,  v1428,  v1527,  v1626,  v1724,  v1821,  v1917,  v2012,  v2106,  v2199,  v2291,  v2382,  v2471,  v2558,  v2643,  v2726,  v2807,  v2886,  v2963,  v3038,  v3111,  v3182,  v3251,  v3318,  v3383,  v3446);
      uint64_t v250 = sub_100043A28( v242,  v243,  v244,  v245,  v246,  v247,  v248,  v249,  v934,  v1033,  v1132,  v1231,  v1330,  v1429,  v1528,  v1627,  v1725,  v1822,  v1918,  v2013,  v2107,  v2200,  v2292,  v2383,  v2472,  v2559,  v2644,  v2727,  v2808,  v2887,  v2964,  v3039,  v3112,  v3183,  v3252,  v3319,  v3384,  v3447,  v3508);
      uint64_t v258 = sub_100043A20( v250,  v251,  v252,  v253,  v254,  v255,  v256,  v257,  v935,  v1034,  v1133,  v1232,  v1331,  v1430,  v1529,  v1628,  v1726,  v1823,  v1919,  v2014,  v2108,  v2201,  v2293,  v2384,  v2473,  v2560,  v2645,  v2728,  v2809,  v2888,  v2965,  v3040,  v3113,  v3184,  v3253,  v3320,  v3385,  v3448,  v3509,  v3568);
      uint64_t v266 = sub_100043A18( v258,  v259,  v260,  v261,  v262,  v263,  v264,  v265,  v936,  v1035,  v1134,  v1233,  v1332,  v1431,  v1530,  v1629,  v1727,  v1824,  v1920,  v2015,  v2109,  v2202,  v2294,  v2385,  v2474,  v2561,  v2646,  v2729,  v2810,  v2889,  v2966,  v3041,  v3114,  v3185,  v3254,  v3321,  v3386,  v3449,  v3510,  v3569,  v3626);
      uint64_t v274 = sub_100043A10( v266,  v267,  v268,  v269,  v270,  v271,  v272,  v273,  v937,  v1036,  v1135,  v1234,  v1333,  v1432,  v1531,  v1630,  v1728,  v1825,  v1921,  v2016,  v2110,  v2203,  v2295,  v2386,  v2475,  v2562,  v2647,  v2730,  v2811,  v2890,  v2967,  v3042,  v3115,  v3186,  v3255,  v3322,  v3387,  v3450,  v3511,  v3570,  v3627,  v3682);
      uint64_t v282 = sub_100043A08( v274,  v275,  v276,  v277,  v278,  v279,  v280,  v281,  v938,  v1037,  v1136,  v1235,  v1334,  v1433,  v1532,  v1631,  v1729,  v1826,  v1922,  v2017,  v2111,  v2204,  v2296,  v2387,  v2476,  v2563,  v2648,  v2731,  v2812,  v2891,  v2968,  v3043,  v3116,  v3187,  v3256,  v3323,  v3388,  v3451,  v3512,  v3571,  v3628,  v3683,  v3736);
      uint64_t v290 = sub_100043A00( v282,  v283,  v284,  v285,  v286,  v287,  v288,  v289,  v939,  v1038,  v1137,  v1236,  v1335,  v1434,  v1533,  v1632,  v1730,  v1827,  v1923,  v2018,  v2112,  v2205,  v2297,  v2388,  v2477,  v2564,  v2649,  v2732,  v2813,  v2892,  v2969,  v3044,  v3117,  v3188,  v3257,  v3324,  v3389,  v3452,  v3513,  v3572,  v3629,  v3684,  v3737,  v3788);
      uint64_t v298 = sub_1000439F8( v290,  v291,  v292,  v293,  v294,  v295,  v296,  v297,  v940,  v1039,  v1138,  v1237,  v1336,  v1435,  v1534,  v1633,  v1731,  v1828,  v1924,  v2019,  v2113,  v2206,  v2298,  v2389,  v2478,  v2565,  v2650,  v2733,  v2814,  v2893,  v2970,  v3045,  v3118,  v3189,  v3258,  v3325,  v3390,  v3453,  v3514,  v3573,  v3630,  v3685,  v3738,  v3789,  v3838);
      uint64_t v306 = sub_1000439F0( v298,  v299,  v300,  v301,  v302,  v303,  v304,  v305,  v941,  v1040,  v1139,  v1238,  v1337,  v1436,  v1535,  v1634,  v1732,  v1829,  v1925,  v2020,  v2114,  v2207,  v2299,  v2390,  v2479,  v2566,  v2651,  v2734,  v2815,  v2894,  v2971,  v3046,  v3119,  v3190,  v3259,  v3326,  v3391,  v3454,  v3515,  v3574,  v3631,  v3686,  v3739,  v3790,  v3839,  v3886);
      uint64_t v314 = sub_1000439E8( v306,  v307,  v308,  v309,  v310,  v311,  v312,  v313,  v942,  v1041,  v1140,  v1239,  v1338,  v1437,  v1536,  v1635,  v1733,  v1830,  v1926,  v2021,  v2115,  v2208,  v2300,  v2391,  v2480,  v2567,  v2652,  v2735,  v2816,  v2895,  v2972,  v3047,  v3120,  v3191,  v3260,  v3327,  v3392,  v3455,  v3516,  v3575,  v3632,  v3687,  v3740,  v3791,  v3840,  v3887,  v3932);
      uint64_t v322 = sub_1000439E0( v314,  v315,  v316,  v317,  v318,  v319,  v320,  v321,  v943,  v1042,  v1141,  v1240,  v1339,  v1438,  v1537,  v1636,  v1734,  v1831,  v1927,  v2022,  v2116,  v2209,  v2301,  v2392,  v2481,  v2568,  v2653,  v2736,  v2817,  v2896,  v2973,  v3048,  v3121,  v3192,  v3261,  v3328,  v3393,  v3456,  v3517,  v3576,  v3633,  v3688,  v3741,  v3792,  v3841,  v3888,  v3933,  v3976);
      uint64_t v330 = sub_1000439D8( v322,  v323,  v324,  v325,  v326,  v327,  v328,  v329,  v944,  v1043,  v1142,  v1241,  v1340,  v1439,  v1538,  v1637,  v1735,  v1832,  v1928,  v2023,  v2117,  v2210,  v2302,  v2393,  v2482,  v2569,  v2654,  v2737,  v2818,  v2897,  v2974,  v3049,  v3122,  v3193,  v3262,  v3329,  v3394,  v3457,  v3518,  v3577,  v3634,  v3689,  v3742,  v3793,  v3842,  v3889,  v3934,  v3977,  v4018);
      uint64_t v338 = sub_1000439D0( v330,  v331,  v332,  v333,  v334,  v335,  v336,  v337,  v945,  v1044,  v1143,  v1242,  v1341,  v1440,  v1539,  v1638,  v1736,  v1833,  v1929,  v2024,  v2118,  v2211,  v2303,  v2394,  v2483,  v2570,  v2655,  v2738,  v2819,  v2898,  v2975,  v3050,  v3123,  v3194,  v3263,  v3330,  v3395,  v3458,  v3519,  v3578,  v3635,  v3690,  v3743,  v3794,  v3843,  v3890,  v3935,  v3978,  v4019,
               v4058);
      uint64_t v346 = sub_1000439C8( v338,  v339,  v340,  v341,  v342,  v343,  v344,  v345,  v946,  v1045,  v1144,  v1243,  v1342,  v1441,  v1540,  v1639,  v1737,  v1834,  v1930,  v2025,  v2119,  v2212,  v2304,  v2395,  v2484,  v2571,  v2656,  v2739,  v2820,  v2899,  v2976,  v3051,  v3124,  v3195,  v3264,  v3331,  v3396,  v3459,  v3520,  v3579,  v3636,  v3691,  v3744,  v3795,  v3844,  v3891,  v3936,  v3979,  v4020,
               v4059,
               v4096);
      uint64_t v354 = sub_1000439C0( v346,  v347,  v348,  v349,  v350,  v351,  v352,  v353,  v947,  v1046,  v1145,  v1244,  v1343,  v1442,  v1541,  v1640,  v1738,  v1835,  v1931,  v2026,  v2120,  v2213,  v2305,  v2396,  v2485,  v2572,  v2657,  v2740,  v2821,  v2900,  v2977,  v3052,  v3125,  v3196,  v3265,  v3332,  v3397,  v3460,  v3521,  v3580,  v3637,  v3692,  v3745,  v3796,  v3845,  v3892,  v3937,  v3980,  v4021,
               v4060,
               v4097,
               v4132);
      uint64_t v362 = sub_1000439B8( v354,  v355,  v356,  v357,  v358,  v359,  v360,  v361,  v948,  v1047,  v1146,  v1245,  v1344,  v1443,  v1542,  v1641,  v1739,  v1836,  v1932,  v2027,  v2121,  v2214,  v2306,  v2397,  v2486,  v2573,  v2658,  v2741,  v2822,  v2901,  v2978,  v3053,  v3126,  v3197,  v3266,  v3333,  v3398,  v3461,  v3522,  v3581,  v3638,  v3693,  v3746,  v3797,  v3846,  v3893,  v3938,  v3981,  v4022,
               v4061,
               v4098,
               v4133,
               v4166);
      uint64_t v370 = sub_1000439B0( v362,  v363,  v364,  v365,  v366,  v367,  v368,  v369,  v949,  v1048,  v1147,  v1246,  v1345,  v1444,  v1543,  v1642,  v1740,  v1837,  v1933,  v2028,  v2122,  v2215,  v2307,  v2398,  v2487,  v2574,  v2659,  v2742,  v2823,  v2902,  v2979,  v3054,  v3127,  v3198,  v3267,  v3334,  v3399,  v3462,  v3523,  v3582,  v3639,  v3694,  v3747,  v3798,  v3847,  v3894,  v3939,  v3982,  v4023,
               v4062,
               v4099,
               v4134,
               v4167,
               v4198);
      uint64_t v378 = sub_1000439A8( v370,  v371,  v372,  v373,  v374,  v375,  v376,  v377,  v950,  v1049,  v1148,  v1247,  v1346,  v1445,  v1544,  v1643,  v1741,  v1838,  v1934,  v2029,  v2123,  v2216,  v2308,  v2399,  v2488,  v2575,  v2660,  v2743,  v2824,  v2903,  v2980,  v3055,  v3128,  v3199,  v3268,  v3335,  v3400,  v3463,  v3524,  v3583,  v3640,  v3695,  v3748,  v3799,  v3848,  v3895,  v3940,  v3983,  v4024,
               v4063,
               v4100,
               v4135,
               v4168,
               v4199,
               v4228);
      uint64_t v386 = sub_1000439A0( v378,  v379,  v380,  v381,  v382,  v383,  v384,  v385,  v951,  v1050,  v1149,  v1248,  v1347,  v1446,  v1545,  v1644,  v1742,  v1839,  v1935,  v2030,  v2124,  v2217,  v2309,  v2400,  v2489,  v2576,  v2661,  v2744,  v2825,  v2904,  v2981,  v3056,  v3129,  v3200,  v3269,  v3336,  v3401,  v3464,  v3525,  v3584,  v3641,  v3696,  v3749,  v3800,  v3849,  v3896,  v3941,  v3984,  v4025,
               v4064,
               v4101,
               v4136,
               v4169,
               v4200,
               v4229,
               v4256);
      uint64_t v394 = sub_100043998( v386,  v387,  v388,  v389,  v390,  v391,  v392,  v393,  v952,  v1051,  v1150,  v1249,  v1348,  v1447,  v1546,  v1645,  v1743,  v1840,  v1936,  v2031,  v2125,  v2218,  v2310,  v2401,  v2490,  v2577,  v2662,  v2745,  v2826,  v2905,  v2982,  v3057,  v3130,  v3201,  v3270,  v3337,  v3402,  v3465,  v3526,  v3585,  v3642,  v3697,  v3750,  v3801,  v3850,  v3897,  v3942,  v3985,  v4026,
               v4065,
               v4102,
               v4137,
               v4170,
               v4201,
               v4230,
               v4257,
               v4282);
      uint64_t v402 = sub_100043990( v394,  v395,  v396,  v397,  v398,  v399,  v400,  v401,  v953,  v1052,  v1151,  v1250,  v1349,  v1448,  v1547,  v1646,  v1744,  v1841,  v1937,  v2032,  v2126,  v2219,  v2311,  v2402,  v2491,  v2578,  v2663,  v2746,  v2827,  v2906,  v2983,  v3058,  v3131,  v3202,  v3271,  v3338,  v3403,  v3466,  v3527,  v3586,  v3643,  v3698,  v3751,  v3802,  v3851,  v3898,  v3943,  v3986,  v4027,
               v4066,
               v4103,
               v4138,
               v4171,
               v4202,
               v4231,
               v4258,
               v4283,
               v4306);
      uint64_t v410 = sub_100043988( v402,  v403,  v404,  v405,  v406,  v407,  v408,  v409,  v954,  v1053,  v1152,  v1251,  v1350,  v1449,  v1548,  v1647,  v1745,  v1842,  v1938,  v2033,  v2127,  v2220,  v2312,  v2403,  v2492,  v2579,  v2664,  v2747,  v2828,  v2907,  v2984,  v3059,  v3132,  v3203,  v3272,  v3339,  v3404,  v3467,  v3528,  v3587,  v3644,  v3699,  v3752,  v3803,  v3852,  v3899,  v3944,  v3987,  v4028,
               v4067,
               v4104,
               v4139,
               v4172,
               v4203,
               v4232,
               v4259,
               v4284,
               v4307,
               v4328);
      uint64_t v418 = sub_100043980( v410,  v411,  v412,  v413,  v414,  v415,  v416,  v417,  v955,  v1054,  v1153,  v1252,  v1351,  v1450,  v1549,  v1648,  v1746,  v1843,  v1939,  v2034,  v2128,  v2221,  v2313,  v2404,  v2493,  v2580,  v2665,  v2748,  v2829,  v2908,  v2985,  v3060,  v3133,  v3204,  v3273,  v3340,  v3405,  v3468,  v3529,  v3588,  v3645,  v3700,  v3753,  v3804,  v3853,  v3900,  v3945,  v3988,  v4029,
               v4068,
               v4105,
               v4140,
               v4173,
               v4204,
               v4233,
               v4260,
               v4285,
               v4308,
               v4329,
               v4348);
      uint64_t v426 = sub_100043978( v418,  v419,  v420,  v421,  v422,  v423,  v424,  v425,  v956,  v1055,  v1154,  v1253,  v1352,  v1451,  v1550,  v1649,  v1747,  v1844,  v1940,  v2035,  v2129,  v2222,  v2314,  v2405,  v2494,  v2581,  v2666,  v2749,  v2830,  v2909,  v2986,  v3061,  v3134,  v3205,  v3274,  v3341,  v3406,  v3469,  v3530,  v3589,  v3646,  v3701,  v3754,  v3805,  v3854,  v3901,  v3946,  v3989,  v4030,
               v4069,
               v4106,
               v4141,
               v4174,
               v4205,
               v4234,
               v4261,
               v4286,
               v4309,
               v4330,
               v4349,
               v4366);
      uint64_t v434 = sub_100043970( v426,  v427,  v428,  v429,  v430,  v431,  v432,  v433,  v957,  v1056,  v1155,  v1254,  v1353,  v1452,  v1551,  v1650,  v1748,  v1845,  v1941,  v2036,  v2130,  v2223,  v2315,  v2406,  v2495,  v2582,  v2667,  v2750,  v2831,  v2910,  v2987,  v3062,  v3135,  v3206,  v3275,  v3342,  v3407,  v3470,  v3531,  v3590,  v3647,  v3702,  v3755,  v3806,  v3855,  v3902,  v3947,  v3990,  v4031,
               v4070,
               v4107,
               v4142,
               v4175,
               v4206,
               v4235,
               v4262,
               v4287,
               v4310,
               v4331,
               v4350,
               v4367,
               v4382);
      uint64_t v442 = sub_100043968( v434,  v435,  v436,  v437,  v438,  v439,  v440,  v441,  v958,  v1057,  v1156,  v1255,  v1354,  v1453,  v1552,  v1651,  v1749,  v1846,  v1942,  v2037,  v2131,  v2224,  v2316,  v2407,  v2496,  v2583,  v2668,  v2751,  v2832,  v2911,  v2988,  v3063,  v3136,  v3207,  v3276,  v3343,  v3408,  v3471,  v3532,  v3591,  v3648,  v3703,  v3756,  v3807,  v3856,  v3903,  v3948,  v3991,  v4032,
               v4071,
               v4108,
               v4143,
               v4176,
               v4207,
               v4236,
               v4263,
               v4288,
               v4311,
               v4332,
               v4351,
               v4368,
               v4383,
               v4396);
      uint64_t v450 = sub_100043960( v442,  v443,  v444,  v445,  v446,  v447,  v448,  v449,  v959,  v1058,  v1157,  v1256,  v1355,  v1454,  v1553,  v1652,  v1750,  v1847,  v1943,  v2038,  v2132,  v2225,  v2317,  v2408,  v2497,  v2584,  v2669,  v2752,  v2833,  v2912,  v2989,  v3064,  v3137,  v3208,  v3277,  v3344,  v3409,  v3472,  v3533,  v3592,  v3649,  v3704,  v3757,  v3808,  v3857,  v3904,  v3949,  v3992,  v4033,
               v4072,
               v4109,
               v4144,
               v4177,
               v4208,
               v4237,
               v4264,
               v4289,
               v4312,
               v4333,
               v4352,
               v4369,
               v4384,
               v4397);
      uint64_t v458 = sub_100043958( v450,  v451,  v452,  v453,  v454,  v455,  v456,  v457,  v960,  v1059,  v1158,  v1257,  v1356,  v1455,  v1554,  v1653,  v1751,  v1848,  v1944,  v2039,  v2133,  v2226,  v2318,  v2409,  v2498,  v2585,  v2670,  v2753,  v2834,  v2913,  v2990,  v3065,  v3138,  v3209,  v3278,  v3345,  v3410,  v3473,  v3534,  v3593,  v3650,  v3705,  v3758,  v3809,  v3858,  v3905,  v3950,  v3993,  v4034,
               v4073,
               v4110,
               v4145,
               v4178,
               v4209,
               v4238,
               v4265,
               v4290,
               v4313,
               v4334,
               v4353,
               v4370,
               v4385,
               v4398);
      uint64_t v466 = sub_100043950( v458,  v459,  v460,  v461,  v462,  v463,  v464,  v465,  v961,  v1060,  v1159,  v1258,  v1357,  v1456,  v1555,  v1654,  v1752,  v1849,  v1945,  v2040,  v2134,  v2227,  v2319,  v2410,  v2499,  v2586,  v2671,  v2754,  v2835,  v2914,  v2991,  v3066,  v3139,  v3210,  v3279,  v3346,  v3411,  v3474,  v3535,  v3594,  v3651,  v3706,  v3759,  v3810,  v3859,  v3906,  v3951,  v3994,  v4035,
               v4074,
               v4111,
               v4146,
               v4179,
               v4210,
               v4239,
               v4266,
               v4291,
               v4314,
               v4335,
               v4354,
               v4371,
               v4386,
               v4399);
      uint64_t v474 = sub_100043948( v466,  v467,  v468,  v469,  v470,  v471,  v472,  v473,  v962,  v1061,  v1160,  v1259,  v1358,  v1457,  v1556,  v1655,  v1753,  v1850,  v1946,  v2041,  v2135,  v2228,  v2320,  v2411,  v2500,  v2587,  v2672,  v2755,  v2836,  v2915,  v2992,  v3067,  v3140,  v3211,  v3280,  v3347,  v3412,  v3475,  v3536,  v3595,  v3652,  v3707,  v3760,  v3811,  v3860,  v3907,  v3952,  v3995,  v4036,
               v4075,
               v4112,
               v4147,
               v4180,
               v4211,
               v4240,
               v4267,
               v4292,
               v4315,
               v4336,
               v4355,
               v4372,
               v4387,
               v4400);
      sub_100043940( v474,  v475,  v476,  v477,  v478,  v479,  v480,  v481,  v963,  v1062,  v1161,  v1260,  v1359,  v1458,  v1557,  v1656,  v1754,  v1851,  v1947,  v2042,  v2136,  v2229,  v2321,  v2412,  v2501,  v2588,  v2673,  v2756,  v2837,  v2916,  v2993,  v3068,  v3141,  v3212,  v3281,  v3348,  v3413,  v3476,  v3537,  v3596,  v3653,  v3708,  v3761,  v3812,  v3861,  v3908,  v3953,  v3996,  v4037,
        v4076,
        v4113,
        v4148,
        v4181,
        v4212,
        v4241,
        v4268,
        v4293,
        v4316,
        v4337,
        v4356,
        v4373,
        v4388,
        v4401);
      sub_100043938();
      sub_100043930();
      sub_100043928();
      sub_100043920();
      sub_100043D44();
      sub_100043DB4();
      sub_100043DAC();
      sub_100043EF0();
      sub_100043E50();
      sub_1000442E4();
      sub_1000442DC();
      sub_100044938();
      sub_100044D4C();
      sub_100044C9C();
      sub_100044948();
      sub_1000448DC();
      sub_100044FDC();
      sub_100045DD8();
      sub_100045DD0();
      swift_task_dealloc(v4435);
      uint64_t v482 = *(uint64_t (**)(void))(v0 + 8);
      return sub_10000F308(v482);
    }

    sub_100040428(*(void **)(v0 + 576), (SEL *)&selRef_iconSymbolName);
    if (v67)
    {
      uint64_t v2 = v67;
      uint64_t v4418 = v66;
      sub_100040428(*(void **)(v0 + 576), (SEL *)&selRef_iconBackgroundColorName);
      if (v69)
      {
        uint64_t v70 = v68;
        uint64_t v71 = v69;
        char v72 = (void *)(v0 + 536);
        id v73 = [*(id *)(v0 + 576) definition];
        if (v73)
        {
          uint64_t v74 = v73;
          id v75 = [v73 objectForKey:WFActionIconSymbolColorNameKey];

          if (v75)
          {
            sub_1000448D0();
            sub_1000460B4();
          }

          else
          {
            sub_100044F68();
          }

          sub_1000412F8(v0 + 272, v0 + 304, &qword_10006A420);
          char v72 = (void *)(v0 + 536);
          if (*(void *)(v0 + 328))
          {
            if ((sub_100009C04( v0 + 376,  v0 + 304,  (uint64_t)&type metadata for Any + 8,  (uint64_t)&type metadata for String) & 1) != 0)
            {
              sub_100045224();
              goto LABEL_59;
            }

uint64_t sub_10002DF88()
{
  uint64_t v2 = sub_100044C94(*(void *)(v1 + 2040));
  *(void *)(v1 + 2048) = sub_10004341C(v2, "metadata");

  sub_10000F3A0();
  return sub_10000F2D0();
}

uint64_t sub_10002DFD4()
{
  id v3 = *(id *)(v0 + 2048);
  id v5 = sub_100043854(v4, "descriptionMetadata");

  if (v5)
  {
    id v3 = sub_10004416C(v6, "icon");

    if (v3)
    {
      uint64_t v7 = objc_opt_self(&OBJC_CLASS___LNActionDescriptionIconNamed);
      uint64_t v8 = (void *)sub_100045250(v7);
      if (v8)
      {
        uint64_t v9 = v8;
        uint64_t v10 = (uint64_t *)[v8 bundleURL];
        if (v10)
        {
          uint64_t v1 = v10;
          uint64_t v2 = *(void *)(v0 + 752);
          uint64_t v13 = *(void *)(v0 + 744);
          uint64_t v14 = *(void *)(v0 + 736);
          uint64_t v15 = *(void *)(v0 + 728);
          static URL._unconditionallyBridgeFromObjectiveC(_:)();

          uint64_t v16 = *(void (**)(uint64_t))(v13 + 32);
          sub_100046624();
          sub_100045118(v15);
          sub_100043DBC(v15, 1LL, v14);
          if (!v856)
          {
            uint64_t v1 = *(uint64_t **)(v0 + 768);
            uint64_t v2 = *(void *)(v0 + 760);
            sub_100044430();
            sub_100044004();
            uint64_t v17 = sub_1000453BC();
            v16(v17);
            uint64_t v18 = sub_10000844C(&qword_10006A438);
            id v19 = sub_10004416C(v18, "name");
            uint64_t v20 = sub_100046E8C((uint64_t)v19);
            uint64_t v22 = v21;

            *uint64_t v1 = v20;
            v1[1] = v22;
            sub_100046624();
            uint64_t v23 = (unsigned int *)&enum case for ToolIcon.externalAsset(_:);
LABEL_12:
            uint64_t v26 = *v23;
            id v5 = (id)sub_1000432E8();
            sub_10004314C( (uint64_t)v1,  v26,  *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*((void *)v5 - 1) + 104LL));
            sub_100043BE0();
            goto LABEL_20;
          }
        }

        else
        {
          sub_100043410(*(void *)(v0 + 728), v11, v12, *(void *)(v0 + 736));
        }

        id v5 = *(id *)(v0 + 728);

        sub_100044EA4(v24, &qword_10006A380);
      }

      else
      {
      }
    }
  }

  sub_100040428(*(void **)(v0 + 576), (SEL *)&selRef_iconName);
  if (v25)
  {
    sub_100043FA4();
    sub_100044004();
    *uint64_t v1 = (uint64_t)v3;
    v1[1] = (uint64_t)v5;
    uint64_t v23 = (unsigned int *)&enum case for ToolIcon.workflowAsset(_:);
    goto LABEL_12;
  }

  sub_100040428(*(void **)(v0 + 576), (SEL *)&selRef_iconSymbolName);
  if (v32)
  {
    uint64_t v33 = v31;
    uint64_t v34 = v32;
    sub_100040428(*(void **)(v0 + 576), (SEL *)&selRef_iconBackgroundColorName);
    if (v36)
    {
      uint64_t v37 = v35;
      uint64_t v38 = v36;
      uint64_t v39 = (void *)(v0 + 464);
      uint64_t v40 = (void *)(v0 + 536);
      id v41 = [*(id *)(v0 + 576) definition];
      if (v41)
      {
        uint64_t v42 = v41;
        uint64_t v4372 = v34;
        uint64_t v43 = v33;
        id v44 = [v41 objectForKey:WFActionIconSymbolColorNameKey];

        if (v44)
        {
          _bridgeAnyObjectToAny(_:)(v44);
          swift_unknownObjectRelease(v44);
        }

        else
        {
          *(_OWORD *)(v0 + 272) = 0u;
          *(_OWORD *)(v0 + 288) = 0u;
        }

        uint64_t v33 = v43;
        sub_1000412F8(v0 + 272, v0 + 304, &qword_10006A420);
        uint64_t v40 = (void *)(v0 + 536);
        uint64_t v39 = (void *)(v0 + 464);
        if (*(void *)(v0 + 328))
        {
          if ((sub_100009C04( v0 + 376,  v0 + 304,  (uint64_t)&type metadata for Any + 8,  (uint64_t)&type metadata for String) & 1) != 0)
          {
            sub_100045224();
            goto LABEL_31;
          }

void sub_10002EC2C()
{
  uint64_t v2 = v0 + 16;
  id v3 = *(os_log_s **)(v0 + 1832);
  uint64_t v4 = *(void *)(v0 + 1800);
  uint64_t v4998 = v0;
  sub_10000F568();
  uint64_t v5 = sub_100042644((uint64_t)&unk_100066480, 24LL);
  *(void *)(v5 + 16) = v4;
  uint64_t v6 = v5;
  uint64_t v7 = sub_100042644((uint64_t)&unk_1000664A8, 24LL);
  id v8 = sub_1000464B0(v7);
  sub_100043D64();
  id v9 = v8;
  uint64_t v4997 = v3;
  uint64_t v10 = sub_100043D64();
  uint64_t v11 = Logger.logObject.getter(v10);
  os_log_type_t v4987 = sub_100047280(v11);
  uint64_t v4985 = sub_100042644((uint64_t)&unk_1000664D0, 17LL);
  *(_BYTE *)(v4985 + 16) = 64;
  uint64_t v12 = sub_100042644((uint64_t)&unk_1000664F8, 17LL);
  *(_BYTE *)(v12 + 16) = 8;
  uint64_t v13 = sub_100042644((uint64_t)&unk_100066520, 32LL);
  *(void *)(v13 + 16) = sub_100040E5C;
  *(void *)(v13 + 24) = v6;
  uint64_t v14 = sub_100042644((uint64_t)&unk_100066548, 32LL);
  *(void *)(v14 + 16) = sub_10004217C;
  *(void *)(v14 + 24) = v13;
  uint64_t v15 = sub_100042644((uint64_t)&unk_100066570, 17LL);
  *(_BYTE *)(v15 + 16) = 64;
  uint64_t v16 = (_BYTE *)sub_100042644((uint64_t)&unk_100066598, 17LL);
  v16[16] = 8;
  uint64_t v17 = sub_100042644((uint64_t)&unk_1000665C0, 32LL);
  *(void *)(v17 + 16) = sub_100040E80;
  *(void *)(v17 + 24) = v1;
  uint64_t v18 = sub_100042644((uint64_t)&unk_1000665E8, 32LL);
  *(void *)(v18 + 16) = sub_100040EBC;
  *(void *)(v18 + 24) = v17;
  uint64_t v19 = sub_100042644((uint64_t)&unk_100066610, 32LL);
  *(void *)(v19 + 16) = sub_100040EC4;
  *(void *)(v19 + 24) = v18;
  uint64_t v20 = sub_10000844C((uint64_t *)&unk_10006A360);
  uint64_t inited = swift_initStackObject(v20, v2);
  *(_OWORD *)(inited + 16) = xmmword_100059850;
  *(void *)(inited + 32) = sub_1000421D8;
  *(void *)(inited + 40) = v4985;
  *(void *)(inited + 48) = sub_1000421D8;
  *(void *)(inited + 56) = v12;
  *(void *)(inited + 64) = sub_100040EAC;
  *(void *)(inited + 72) = v14;
  *(void *)(inited + 80) = sub_1000421D8;
  *(void *)(inited + 88) = v15;
  *(void *)(inited + 96) = sub_1000421D8;
  *(void *)(inited + 104) = v16;
  *(void *)(inited + 112) = sub_100042180;
  *(void *)(inited + 120) = v19;
  swift_retain();
  sub_1000442F4();
  sub_10004735C(v4992);
  sub_100043FDC();
  uint64_t v4983 = v18;
  sub_100044EE0();
  sub_100044D54();
  sub_10004486C();
  sub_100044B34();
  uint64_t v4979 = (void *)v15;
  sub_100043D5C();
  sub_100044AFC();
  sub_100044400();
  sub_100043908();
  uint64_t v22 = v4998;
  if (os_log_type_enabled(v4994, v4987))
  {
    uint64_t v23 = *(void **)(v4998 + 1800);
    uint64_t v24 = (uint8_t *)sub_100044BAC();
    uint64_t v25 = (void *)sub_10000D524(16LL);
    sub_1000457AC();
    sub_100043DA4();
    void v24[3] = 8;
    sub_100043DD0();
    uint64_t v16 = v24 + 4;
    *(void *)(v4998 + 552) = v23;
    uint64_t v13 = v23;
    sub_100046A70(v4998 + 552, v4998 + 560);
    *uint64_t v25 = v23;
    sub_100043868();
    sub_1000463C0();
    sub_1000440CC();

    unint64_t v26 = (unint64_t)v4997;
    v24[12] = 64;
    sub_1000463A0();
    v24[13] = 8;
    sub_1000447F8();
    sub_1000472B4();
    uint64_t v27 = _swift_stdlib_bridgeErrorToNSError(v4997);
    *(void *)(v4998 + 560) = v27;
    sub_100045474(v4998 + 560, v4998 + 568);
    v25[1] = v27;
    sub_100046A78();
    sub_100043BF8();
    sub_100043F84();
    sub_1000440C4();
    sub_100047928();
    uint64_t v19 = (uint64_t)v4994;
    sub_100043ADC((void *)&_mh_execute_header, v4994, v4987, "Failed to index action parameter: %@ due to %@", v24);
    sub_10000844C(&qword_10006A320);
    sub_1000442BC((uint64_t)v25);
    sub_10000F2F0((uint64_t)v25);
    sub_10000F2F0((uint64_t)v24);

    uint64_t v28 = *(void *)(v4998 + 1800);
    uint64_t v29 = v4998;
  }

  else
  {
    unint64_t v26 = *(void *)(v4998 + 1800);

    swift_errorRelease(v4997);
    sub_100043DA4();
    sub_100043DD0();
    sub_100043868();
    sub_1000463C0();
    sub_1000440CC();

    sub_1000463A0();
    sub_1000447F8();
    sub_100046A78();
    sub_100043BF8();
    sub_100043F84();
    sub_1000440C4();
    uint64_t v29 = v4998;
    uint64_t v28 = (uint64_t)v4994;
  }

  sub_100045C7C();

  sub_100043124(*(uint64_t (**)(uint64_t, uint64_t))(v26 + 8));
  sub_100045660();
  if (v111)
  {
LABEL_13:
    sub_100044C1C();
    sub_100008D58();
    sub_100040370(&qword_10006A3F0, (uint64_t (*)(uint64_t))&type metadata accessor for ToolFlag);
    sub_100044FD0();
    sub_100043230();
    uint64_t v38 = sub_100047144(v37);
    sub_1000477D0(v38, v39);
    uint64_t v40 = &type metadata accessor for ToolVisibilityFlag;
    sub_100044AC8();
    *(void *)(v29 + 408) = v41;
    sub_100045FD4(&qword_10006A3F8);
    uint64_t v43 = v42;
    sub_10000844C(&qword_10006A400);
    unint64_t v44 = sub_100045F70();
    uint64_t v45 = sub_100044E6C(v44);
    uint64_t v46 = static ToolVisibilityFlag.allCases.getter(v45);
    uint64_t v47 = v29;
    uint64_t v4988 = (uint64_t)v16;
    uint64_t v4990 = sub_10004753C(v46);
    uint64_t v4975 = v14;
    if (v4990)
    {
      uint64_t v48 = sub_1000445AC();
      sub_1000451B0(v48);
      sub_1000468DC((uint64_t)"ToolVisibilityFlag");
      do
      {
        if ((v4985 & 1) != 0)
        {
          sub_100044238();
        }

        else
        {
          sub_100046764(v13, v4992, (uint64_t (*)(void))&type metadata accessor for ToolVisibilityFlag);
          sub_10004712C();
          if (!v111)
          {
            __break(1u);
            goto LABEL_225;
          }

          sub_1000452A0(v49);
          sub_1000431C0();
        }

        if (__OFADD__(v13, 1LL))
        {
          __break(1u);
          goto LABEL_223;
        }

        sub_100044364(v13 + 1);
        uint64_t v50 = sub_100046D80();
        static ToolVisibilityFlag.shortcuts.getter(v50);
        sub_100040370(&qword_10006A410, (uint64_t (*)(uint64_t))&type metadata accessor for ToolVisibilityFlag);
        uint64_t v28 = v51;
        sub_100043D4C(v43, v14, (uint64_t)v40);
        sub_100045B5C();
        uint64_t v40 = *(void **)(v47 + 1216);
        if ((v14 & 1) != 0)
        {
          sub_1000463E8();
          if (sub_100045EB4((id)v14, "visibleForUse:"))
          {
            sub_100044C74();
            sub_100046E34();
            sub_100045134(v14, (uint64_t)v16);
            uint64_t v40 = v16;
            uint64_t v52 = sub_100043D4C(v43, v14, (uint64_t)v16);
            uint64_t v53 = sub_10004362C(v52);
            if ((v54 & 1) != 0)
            {
              uint64_t v40 = *(void **)(v47 + 1208);
              uint64_t v14 = *(void *)(v47 + 1144);
              sub_100044D34(*(void *)(v47 + 1192));
              sub_100043CF8(v28);
              sub_100043CF8((uint64_t)v40);
              sub_100043FF0();
              sub_1000470AC();
            }

            else
            {
              sub_1000445D4(v53, *(void *)(v47 + 1192));
              uint64_t v29 = v4975;
            }

            sub_1000431E4();
            sub_100045434();
            uint64_t v62 = v4973;
            goto LABEL_37;
          }
        }

        else
        {
          sub_100046334();
          uint64_t v43 = sub_100043C30();
          sub_100044D34((uint64_t)v16);
          uint64_t v40 = *(void **)(v47 + 1216);
          if ((v43 & 1) != 0)
          {
            sub_1000463D8();
            unsigned int v55 = sub_100045E08(v16, "visibleForUse:");
            uint64_t v16 = (_BYTE *)v4988;
            if (v55)
            {
              sub_100044C54();
              sub_1000451D4((uint64_t)v40);
              sub_100045134(v4988, v43);
              uint64_t v40 = (void *)v43;
              uint64_t v56 = sub_100043D4C(v14, v4988, v43);
              uint64_t v57 = sub_10004362C(v56);
              if ((v58 & 1) != 0)
              {
                uint64_t v40 = *(void **)(v47 + 1208);
                uint64_t v14 = *(void *)(v47 + 1144);
                sub_100044D34(*(void *)(v47 + 1176));
                sub_100043CF8(v28);
                sub_100043CF8((uint64_t)v40);
                sub_100043FF0();
                sub_1000470AC();
              }

              else
              {
                sub_1000445D4(v57, *(void *)(v47 + 1176));
                uint64_t v29 = v4975;
              }

              sub_1000431E4();
              sub_100045434();
              uint64_t v62 = (uint64_t *)v4972;
              goto LABEL_37;
            }
          }

          else
          {
            sub_100046344();
            char v59 = sub_100043C30();
            sub_100044D34((uint64_t)v16);
            uint64_t v28 = *(void *)(v47 + 1144);
            if ((v59 & 1) == 0)
            {
              sub_100046054();
              uint64_t v177 = sub_100045D64();
              sub_1000456E8(v177, v178);
              sub_100044C44();
              sub_100044CC4(v179);
              sub_100040370( &qword_10006A418,  (uint64_t (*)(uint64_t))&type metadata accessor for ToolVisibilityFlag);
              v5000._countAndFlagsBits = sub_100045F4C(v180);
              sub_100044AE0(v5000);
              sub_100043174();
              sub_100045CA0();
              sub_100043B6C();
              goto LABEL_119;
            }

            uint64_t v40 = *(void **)(v47 + 1208);
            uint64_t v60 = *(void *)(v47 + 1168);
            sub_100044ED8(*(void *)(v47 + 1216));
            uint64_t v61 = sub_100046E24();
            static ToolVisibilityFlag.shortcuts.getter(v61);
            uint64_t v14 = sub_1000460D8(v60);
            sub_100044ED8(v60);
            sub_100044ED8((uint64_t)v40);
            uint64_t v16 = (_BYTE *)v4988;
            if ((v14 & 1) != 0 && [*(id *)(v47 + 576) isApprovedForPublicShortcutsDrawer])
            {
              sub_100045CB0();
              sub_100046DAC();
              sub_100044ED8(v4988);
              uint64_t v62 = v4971;
LABEL_37:
              sub_1000463F8(*v62);
              uint64_t v16 = (_BYTE *)v4988;
            }
          }
        }

        sub_1000463F8(*(void *)(v47 + 1224));
        ++v13;
        sub_1000465F0();
        uint64_t v22 = v4983;
      }

      while (!v111);
    }

    sub_100044BD4();
    sub_10000F568();
    uint64_t v63 = sub_100042644((uint64_t)&unk_100066638, 24LL);
    *(void *)(v63 + 16) = v47;
    uint64_t v64 = v63;
    uint64_t v4995 = v63;
    uint64_t v65 = sub_100042644((uint64_t)&unk_100066660, 32LL);
    *(void *)(v65 + 16) = sub_100040F24;
    *(void *)(v65 + 24) = v16;
    id v66 = (id)v47;
    sub_100045BCC();
    uint64_t v67 = Logger.logObject.getter(v16);
    sub_100045C58(v67);
    uint64_t v29 = sub_100042644((uint64_t)&unk_100066688, 17LL);
    *(_BYTE *)(v29 + 16) = 32;
    uint64_t v68 = sub_100042644((uint64_t)&unk_1000666B0, 17LL);
    *(_BYTE *)(v68 + 16) = 8;
    uint64_t v69 = sub_100042644((uint64_t)&unk_1000666D8, 32LL);
    *(void *)(v69 + 16) = sub_1000421D0;
    *(void *)(v69 + 24) = v64;
    uint64_t v70 = sub_100042644((uint64_t)&unk_100066700, 32LL);
    *(void *)(v70 + 16) = sub_100040F3C;
    *(void *)(v70 + 24) = v69;
    uint64_t v13 = sub_100042644((uint64_t)&unk_100066728, 17LL);
    *(_BYTE *)(v13 + 16) = 32;
    uint64_t v71 = (_BYTE *)sub_100042644((uint64_t)&unk_100066750, 17LL);
    v71[16] = 8;
    uint64_t v72 = sub_100042644((uint64_t)&unk_100066778, 32LL);
    *(void *)(v72 + 16) = sub_100040F2C;
    *(void *)(v72 + 24) = v65;
    uint64_t v73 = sub_100042644((uint64_t)&unk_1000667A0, 32LL);
    *(void *)(v73 + 16) = sub_100042178;
    *(void *)(v73 + 24) = v72;
    uint64_t v74 = sub_10000844C((uint64_t *)&unk_10006A360);
    uint64_t v75 = swift_initStackObject(v74, v4990);
    *(_OWORD *)(v75 + 16) = xmmword_100059850;
    *(void *)(v75 + 32) = sub_1000421D8;
    *(void *)(v75 + 40) = v29;
    *(void *)(v75 + 48) = sub_1000421D8;
    *(void *)(v75 + 56) = v68;
    *(void *)(v75 + 64) = sub_100042184;
    *(void *)(v75 + 72) = v70;
    *(void *)(v75 + 80) = sub_1000421D8;
    *(void *)(v75 + 88) = v13;
    *(void *)(v75 + 96) = sub_1000421D8;
    *(void *)(v75 + 104) = v71;
    *(void *)(v75 + 112) = sub_100042184;
    *(void *)(v75 + 120) = v73;
    sub_100045D00();
    sub_10004486C();
    sub_100044B34();
    sub_100044400();
    sub_100043FDC();
    sub_100043D5C();
    sub_1000446A0();
    uint64_t v4981 = v13;
    sub_1000442F4();
    char v4986 = (char)v71;
    sub_100044AFC();
    uint64_t v4984 = v73;
    sub_100044EE0();
    sub_1000132B8();
    if (sub_100045C08())
    {
      uint64_t v76 = (uint8_t *)sub_100043588();
      uint64_t v4974 = sub_10000D524(64LL);
      v4999[0] = v4974;
      *(_WORD *)uint64_t v76 = 514;
      v76[2] = 32;
      sub_1000434B8();
      v76[3] = 8;
      uint64_t v77 = sub_100043678();
      id v78 = sub_100043854(v77, "identifier");
      sub_1000459D0((uint64_t)v78);
      sub_100046F4C();
      uint64_t v79 = sub_100046570();
      sub_100045630( v79,  v80,  v81,  v82,  v83,  v84,  v85,  v86,  v1139,  v1242,  v1345,  v1448,  v1551,  v1654,  v1756,  v1858,  v1960,  v2061,  v2162,  v2262,  v2361,  v2459,  v2556,  v2652,  v2747,  v2841,  v2934,  v3025,  v3114,  v3201,  v3286,  v3369,  v3450,  v3529,  v3606,  v3681,  v3754,  v3825,  v3894,  v3961,  v4026,  v4089,  v4150,  v4209,  v4266,  v4321,  v4374,  v4425,  v4474,
        v4521,
        v4566,
        v4609,
        v4650,
        v4689,
        v4726,
        v4761,
        v4794,
        v4825,
        v4854,
        v4881,
        v4906,
        v4929,
        v4950);
      sub_100043024();
      sub_100013360();
      sub_100043F84();
      sub_1000435DC();

      v76[12] = 32;
      sub_1000447F8();
      v76[13] = 8;
      sub_100043E18();
      uint64_t v87 = (uint64_t)(v76 + 14);
      sub_100043154(v4975, v4970);
      sub_100043C08(6LL, v4975, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4969 + 16));
      sub_100040370(&qword_10006A418, (uint64_t (*)(uint64_t))&type metadata accessor for ToolVisibilityFlag);
      uint64_t v89 = sub_10004696C(v88);
      uint64_t v68 = v90;
      sub_10000F508(6LL, *(uint64_t (**)(uint64_t, uint64_t))(v4969 + 8));
      *(void *)(v70 + 544) = sub_100044874(v89, v91, v4999);
      sub_100045474(v4972, v70 + 552);
      sub_10004316C();
      sub_100043BF8();
      sub_1000440CC();
      sub_1000440C4();
      sub_100044304(v4988);
      sub_100043ADC((void *)&_mh_execute_header, v4997, (os_log_type_t)v13, "%s: Visibility flags: %s", v76);
      sub_1000442BC(v4974);
      sub_10000F2F0(v4974);
      sub_10000F2F0((uint64_t)v76);

      unint64_t v92 = sub_1000474C4();
    }

    else
    {
      uint64_t v70 = v4998;
      uint64_t v87 = *(void *)(v4998 + 1080);
      uint64_t v94 = *(void **)(v4998 + 576);
      sub_1000434B8();
      sub_100043678();
      sub_100013360();
      sub_100043F84();
      sub_1000435DC();

      sub_1000447F8();
      sub_100043E18();
      sub_100043BF8();
      sub_1000440CC();
      sub_1000440C4();
      sub_100044304(v4988);
      sub_10004593C();
      unint64_t v92 = sub_100045488();
    }

    v93(v92);
    uint64_t v95 = (void *)v70;
    if (*(void *)(v70 + 1672))
    {
      uint64_t v96 = sub_100043240();
      sub_100044AD4(v96);
      *(void *)(v70 + 1888) = sub_1000431DC();
      sub_100042F20();
      sub_100043160();
LABEL_214:
      sub_100042EB0();
      return;
    }

    [(id)sub_100044BB4() requiresUnlock];
    uint64_t v167 = sub_1000440B0();
    if (v169)
    {
      sub_100046418();
      v170();
      uint64_t v171 = sub_1000459E0();
      sub_100044390(v171);
      uint64_t v95 = (void *)v4998;
      sub_1000447A4( v68,  enum case for RuntimeRequirement.deviceState(_:),  *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v70 + 104));
      sub_100044EF0();
      sub_100045CD8();
      sub_10004609C();
    }

    else
    {
      v168(v167, enum case for ToolAuthenticationPolicy.none(_:));
    }

    uint64_t v172 = v95[72];
    v95[54] = &OBJC_PROTOCOL___WFLinkActionProtocol;
    if (sub_100043D04(v172))
    {
      sub_100044604();
      sub_100044F38(v173);
    }

    else
    {
      sub_100046F98();
      uint64_t v187 = objc_opt_self(&OBJC_CLASS___WFHandleIntentAction);
      sub_100043AF8(v187);
      uint64_t v188 = sub_100046598();
      if (v189) {
        uint64_t v190 = (unsigned int *)&enum case for ToolTypeDefinition.siriIntent(_:);
      }
      else {
        uint64_t v190 = (unsigned int *)&enum case for ToolTypeDefinition.action(_:);
      }
      sub_100045C98(v188, v190);
    }

    if ([(id)sub_100046F10() isDiscontinued])
    {
      uint64_t v87 = v95[161];
      sub_1000441C0();
      sub_100043254();
      uint64_t v95 = (void *)v4998;
      sub_100043248();
      sub_1000432E0(v87);
      uint64_t v191 = objc_opt_self(&OBJC_CLASS___WFLinkAction);
      uint64_t v192 = sub_100045244(v191);
      *(void *)(v4998 + 1984) = v192;
      if (v192)
      {
        sub_100043240();
        id v193 = sub_100043C20();
        *(void *)(v4998 + 1992) = sub_1000431DC();
        sub_100042F20();
        sub_100043160();
        goto LABEL_214;
      }
    }

    if ([(id)v95[72] isResidentCompatible])
    {
      sub_1000448E4();
      sub_100043254();
      uint64_t v95 = (void *)v4998;
      sub_100043248();
      sub_1000432E0(v87);
    }

    uint64_t v194 = v95[232];
    uint64_t v195 = sub_100043EB8();
    uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v195);
    id v197 = sub_10004341C(ObjCClassFromMetadata, "unevaluatedResourceObjectsOfClass:");
    uint64_t v198 = (uint64_t)&qword_10006A3D0;
    uint64_t v22 = (uint64_t)&OBJC_CLASS___WFResource_ptr;
    sub_100043C10();
    sub_1000442C4(&qword_10006A3D8);
    sub_100044A6C(v199);
    sub_100043D6C();
    sub_1000442FC((uint64_t)&qword_10006A3D0);
    sub_100043024();
    uint64_t v200 = sub_10004492C();
    if (v200)
    {
      uint64_t v22 = v200;
      if (v200 < 1)
      {
LABEL_260:
        __break(1u);
        goto LABEL_261;
      }

      uint64_t v198 = sub_100043EC4();
      uint64_t v29 = 0LL;
      uint64_t v70 = (uint64_t)sub_100050CD0;
      do
      {
        if ((v198 & 1) != 0) {
          uint64_t v201 = (uint64_t)sub_1000430AC(v4995 + 8 * v29);
        }
        else {
          uint64_t v201 = sub_1000445EC(v29);
        }
        uint64_t v13 = v201;
        ++v29;
        sub_1000448C4();
        sub_100045618();
        sub_1000449A4();
        sub_1000453B4(*(void *)(*(void *)(v4998 + 400) + 16LL));
        sub_100044180();
        sub_100037FF8();
      }

      while (v22 != v29);
    }

    sub_100044088();
    uint64_t v202 = sub_10004536C();
    uint64_t v203 = swift_getObjCClassFromMetadata(v202);
    id v204 = sub_10004341C(v203, "unevaluatedResourceObjectsOfClass:");
    sub_100043D38((uint64_t)v204);
    sub_100043D6C();
    sub_1000442FC(v198);
    *(void *)(v4998 + 2008) = v194;
    sub_100043024();
    uint64_t v4993 = sub_10004492C();
    if (v4993)
    {
      sub_10004635C();
      if (v124 != v35)
      {
LABEL_261:
        __break(1u);
        goto LABEL_262;
      }

      uint64_t v205 = sub_1000441D8();
      sub_10004751C(v205);
      LODWORD(v4984) = enum case for RuntimeRequirement.featureFlag(_:);
      do
      {
        if ((v4986 & 1) != 0) {
          uint64_t v206 = (uint64_t)sub_1000430AC(v4995 + 8 * v13);
        }
        else {
          uint64_t v206 = sub_1000445EC(v13);
        }
        uint64_t v198 = v206;
        sub_100043F10();
        sub_100045F40();
        char v207 = sub_100047174();
        sub_100044050(v207);
        uint64_t v22 = (uint64_t)sub_100050CD0;
        sub_100037F10();
        sub_100045CC4();
        sub_100044180();
        sub_100037FF8();

        sub_100047138();
      }

      while (!v111);
    }

    uint64_t v208 = *(void *)(v4998 + 1672);
    sub_100044088();
    if (v208)
    {
      sub_100043240();
      sub_100043C20();
      *(void *)(v4998 + 2016) = sub_1000431DC();
      sub_100042F20();
      sub_100043160();
      goto LABEL_214;
    }

    sub_100043230();
    if (sub_100043E10())
    {
      uint64_t v209 = (void *)sub_100043EA0();
    }

    else
    {
      sub_100008D58();
      uint64_t v209 = &_swiftEmptySetSingleton;
    }

    v4999[9] = (uint64_t)v209;
    sub_100043230();
    if (sub_100043E10())
    {
      uint64_t v210 = (void *)sub_100043EA0();
    }

    else
    {
      sub_100008D58();
      uint64_t v210 = &_swiftEmptySetSingleton;
    }

    uint64_t v211 = sub_100043EA8((uint64_t)v210);
    uint64_t v212 = &type metadata accessor for WFDeviceIdiomResource;
    uint64_t v213 = swift_getObjCClassFromMetadata(v211);
    id v214 = sub_10004341C(v213, "unevaluatedResourceObjectsOfClass:");
    sub_100043D38((uint64_t)v214);
    sub_100043D6C();
    sub_1000442FC(v198);
    uint64_t v216 = v215;
    uint64_t v4977 = v194;
    sub_100043024();
    uint64_t v4996 = sub_100047418();
    if (v4996)
    {
      LODWORD(v4993) = sub_10004622C();
      uint64_t v70 = 0LL;
      LODWORD(v4984) = enum case for WFDeviceIdiomResource.Requirement.notEqualTo(_:);
      LODWORD(v4981) = enum case for RuntimePlatform.watch(_:);
      LODWORD(v4988) = enum case for RuntimePlatform.macintosh(_:);
      while (1)
      {
        id v217 = (v4993 & 1) != 0 ? sub_1000430AC((uint64_t)v216) : (id)sub_100045DA8();
        uint64_t v212 = v217;
        sub_1000456F8();
        sub_100046664();
        sub_10004707C();
        if (v111) {
          break;
        }
        sub_1000455D4();
        if (v220)
        {
          sub_10000F508(0LL, *(uint64_t (**)(uint64_t, uint64_t))(v29 + 96));
          sub_1000432D0();
          if (!(!v111 & v219)) {
            __asm { BR              X9 }
          }

          goto LABEL_224;
        }

        sub_10000F508(0LL, *(uint64_t (**)(uint64_t, uint64_t))(v29 + 8));
        sub_1000462C0();
        if (v222) {
          goto LABEL_167;
        }
      }

      sub_100043184(*(uint64_t (**)(uint64_t))(v29 + 96));
      sub_1000432D0();
      if (!(!v111 & v219)) {
        __asm { BR              X9 }
      }

LABEL_224:
      sub_10004318C();
      sub_100045944();
LABEL_119:
      sub_100043350( (uint64_t)"Fatal error",  v181,  v182,  v183,  v184,  (uint64_t)"BackgroundShortcutRunner/ToolKitIndexer.swift",  v185,  v186,  v1139,  v1242);
      sub_100043108();
      return;
    }

      sub_10004318C();
      sub_100045944();
LABEL_119:
      sub_100043350( (uint64_t)"Fatal error",  v187,  v188,  v189,  v190,  (uint64_t)"BackgroundShortcutRunner/ToolKitIndexer.swift",  v191,  v192,  v1145,  v1248);
      sub_100043108();
      return;
    }

LABEL_167:
    uint64_t v223 = sub_1000132B8();
    id v224 = sub_10004341C(v223, "disabledOnPlatforms");
    sub_100043F68();
    sub_100043F5C(v225);
    sub_100043670();
    if (sub_10004542C())
    {
      sub_100044EAC();
      if (v124 != v35)
      {
LABEL_262:
        __break(1u);
        goto LABEL_263;
      }

      sub_100044F58();
      sub_1000449F0();
      do
      {
        if ((v22 & 1) != 0) {
          uint64_t v226 = (uint64_t)sub_1000430AC((uint64_t)v212 + 8 * v29);
        }
        else {
          uint64_t v226 = sub_100043FE4();
        }
        sub_100043D18(v226);
        sub_10004508C();

        sub_1000452EC();
      }

      while (v198 != v29);
    }

    sub_100042E4C();
    sub_1000462E8();
    if (v228) {
      uint64_t v229 = sub_100009BEC();
    }
    else {
      uint64_t v229 = static RuntimePlatform.all.getter(v227);
    }
    v4999[0] = v229;
    uint64_t v230 = v4999[10];
    uint64_t v231 = sub_100043E98();
    sub_100045F84(v231);
    sub_100043024();
    uint64_t v232 = v4999[0];
    uint64_t v233 = sub_10004317C();
    uint64_t v234 = sub_1000352A0(v233);
    sub_100043238(v232);
    sub_100043024();
    sub_100042E4C();
    uint64_t v4991 = sub_100045CF4();
    if (v4991)
    {
      sub_100046910();
      if (v124 != v35)
      {
LABEL_263:
        __break(1u);
        goto LABEL_264;
      }

      uint64_t v235 = sub_10004400C();
      sub_100047048(v235);
      do
      {
        if ((v4988 & 1) != 0)
        {
          sub_1000432F8();
        }

        else
        {
          sub_100043000(v70, v4993, (uint64_t (*)(void))&type metadata accessor for RuntimePlatform);
          sub_10004712C();
          if (!v111) {
            goto LABEL_256;
          }
          sub_100044A40(v236);
          sub_10004611C();
        }

        sub_100043C80();
        uint64_t v237 = sub_100045354();
        sub_1000436F8(v237);
        uint64_t v29 = v4984;
        sub_10004314C((uint64_t)v212, v230, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4984 + 16));
        sub_1000441FC();
        sub_100045148();
        uint64_t v22 = *(void *)(*(void *)(v234 + 400) + 16LL);
        sub_10004523C(v22);
        sub_100037FF8();
        sub_100043380(v230, *(uint64_t (**)(uint64_t, uint64_t))(v4984 + 8));
        sub_1000475D8();
      }

      while (!v111);
    }

    uint64_t v47 = v4998;
    uint64_t v238 = (uint64_t *)(v4998 + 472);
    sub_10004581C();
    uint64_t v239 = *(void *)(v4998 + 576);
    uint64_t v240 = sub_100046674();
    *(void *)(v4998 + 456) = v240;
    sub_100043230();
    *(void *)(v4998 + 464) = v241;
    *(void *)(v4998 + 472) = &OBJC_PROTOCOL___WFLinkActionProtocol;
    uint64_t v4982 = v240;
    if (sub_100043D04(v239))
    {
      uint64_t v238 = (uint64_t *)sub_10004627C();
      uint64_t v28 = (uint64_t)sub_10004416C((uint64_t)v238, "backingActionIdentifiers");
      static Array._unconditionallyBridgeFromObjectiveC(_:)(v28, &type metadata for String);
      sub_100043650();
      uint64_t v240 = (uint64_t)sub_100046090();
      sub_1000432F0();
      sub_100043E98();
      uint64_t v242 = sub_100047420();

      sub_100008D58();
      sub_1000473F8();
      *(void *)(v4998 + 464) = v242;
    }

    else
    {
      uint64_t v28 = v4977;
    }

    *(void *)(v4998 + 2032) = v28;
    if (!sub_100044F00())
    {
      uint64_t v243 = sub_1000473F0();
      if (v243)
      {
        uint64_t v29 = v243;
        if (v243 < 1)
        {
LABEL_264:
          __break(1u);
          goto LABEL_265;
        }

        uint64_t v22 = sub_100044194();
        uint64_t v28 = enum case for SystemToolProtocol.assistantSchema(_:);
        sub_100045814();
        uint64_t v13 = 0LL;
        sub_1000475A4((uint64_t)"SystemToolProtocol");
        do
        {
          if ((v22 & 1) != 0)
          {
            sub_100044290();
          }

          else
          {
            uint64_t v244 = sub_1000466CC();
            uint64_t v246 = sub_1000467A4( v244,  v245,  (uint64_t (*)(void))&type metadata accessor for SystemToolProtocol);
            if (v4996 != 8) {
              goto LABEL_258;
            }
            sub_100044E04(v246);
            sub_1000431C0();
          }

          uint64_t v247 = v238[108];
          sub_100043C08(v247, v238[109], *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4998 + 32));
          int v248 = sub_10000F508(v247, *(uint64_t (**)(uint64_t, uint64_t))(v4998 + 88));
          uint64_t v249 = v238[108];
          if (v248 == (_DWORD)v28)
          {
            uint64_t v250 = v238[103];
            sub_100043184(*(uint64_t (**)(uint64_t))(v4998 + 96));
            sub_10000F538(v250, v249, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v70 + 32));
            sub_100044E94();
            sub_100044DAC();
            uint64_t v251 = sub_100044DFC();
            sub_100043868();
            if (*(void *)(v251 + 16) && (unint64_t v252 = sub_100051CAC(), (v253 & 1) != 0))
            {
              sub_1000431C8(v252, v238[97]);
              uint64_t v254 = 0LL;
            }

            else
            {
              uint64_t v254 = 1LL;
            }

            sub_10000848C(*(void *)(v4998 + 776), v254, 1LL, *(void *)(v4998 + 784));
            sub_100008D58();
            sub_100046BA4();
            if (v111)
            {
              uint64_t v255 = *(void *)(v4998 + 776);
              uint64_t v70 = v4991;
              sub_10004385C(*(uint64_t (**)(uint64_t, uint64_t))(v4991 + 8));
              sub_100041358(v255, &qword_10006A390);
            }

            else
            {
              uint64_t v256 = *(void *)(v4998 + 800);
              uint64_t v238 = *(uint64_t **)(v4998 + 784);
              sub_100043D7C( v256,  *(void *)(v4998 + 776),  *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4981 + 32));
              sub_100047030();
              sub_100015F18();
              uint64_t v257 = v256;
              uint64_t v240 = v4982;
              sub_1000431A8(v257, *(uint64_t (**)(uint64_t, uint64_t))(v4981 + 8));
              uint64_t v70 = v4991;
              sub_10004385C(*(uint64_t (**)(uint64_t, uint64_t))(v4991 + 8));
            }

            uint64_t v29 = v4988;
          }

          else
          {
            sub_100043184(*(uint64_t (**)(uint64_t))(v4998 + 8));
          }

          ++v13;
        }

        while (v29 != v13);
        sub_1000132B8();
        uint64_t v47 = v4998;
      }
    }

    if (sub_100044DA4((void *)(v4998 + 464)))
    {
      sub_10004590C();
      sub_100044F40(v258);
      uint64_t v28 = (uint64_t)sub_100050CA8;
      sub_100044848();
      sub_100043800(*(void *)(v47 + 456));
      sub_100045514();
    }

    if (*(void *)(v47 + 1672))
    {
      sub_100043240();
      sub_100043C20();
      *(void *)(v47 + 2040) = sub_1000431DC();
      sub_100042F20();
      sub_100043160();
      goto LABEL_214;
    }

    sub_100040428(*(void **)(v47 + 576), (SEL *)&selRef_iconName);
    if (v259)
    {
      sub_100043FA4();
      sub_100044004();
      *(void *)(v47 + 488) = v238;
      *(void *)(v47 + 496) = v28;
      uint64_t v260 = enum case for ToolIcon.workflowAsset(_:);
      uint64_t v28 = sub_1000432E8();
      sub_10004314C( v47 + 488,  v260,  *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v28 - 8) + 104LL));
      sub_100043BE0();
LABEL_227:
      sub_10000848C(v261, v262, v263, v264);
      goto LABEL_228;
    }

    sub_100040428(*(void **)(v47 + 576), (SEL *)&selRef_iconSymbolName);
    if (v266)
    {
      uint64_t v28 = v265;
      uint64_t v22 = v266;
      sub_100040428(*(void **)(v47 + 576), (SEL *)&selRef_iconBackgroundColorName);
      if (v267)
      {
        id v268 = [(id)sub_100046934() definition];
        if (v268)
        {
          id v269 = [v268 objectForKey:WFActionIconSymbolColorNameKey];
          sub_100047644();
          if (v240)
          {
            sub_100045BC0();
            uint64_t v270 = sub_100047410();
          }

          else
          {
            sub_100044F68();
          }

          uint64_t v13 = v29;
          sub_1000453A0(v270, v271, &qword_10006A420);
          uint64_t v29 = v22;
          if (*(void *)(v47 + 328))
          {
            uint64_t v1116 = v4979;
            if ((sub_100044438(v47 + 376, (uint64_t)&type metadata for String, (uint64_t)&type metadata for Any) & 1) != 0)
            {
              sub_100045224();
              goto LABEL_238;
            }

    uint64_t v229 = sub_1000132B8();
    uint64_t v230 = sub_10004341C(v229, "disabledOnPlatforms");
    sub_100043F68();
    sub_100043F5C(v231);
    sub_100043670();
    if (sub_10004542C())
    {
      sub_100044EAC();
      if (v130 != v41)
      {
LABEL_262:
        __break(1u);
        goto LABEL_263;
      }

      sub_100044F58();
      sub_1000449F0();
      do
      {
        if ((v23 & 1) != 0) {
          uint64_t v232 = (uint64_t)sub_1000430AC((uint64_t)v218 + 8 * v35);
        }
        else {
          uint64_t v232 = sub_100043FE4();
        }
        sub_100043D18(v232);
        sub_10004508C();

        sub_1000452EC();
      }

      while (v204 != v35);
    }

    sub_100042E4C();
    sub_1000462E8();
    if (v234) {
      uint64_t v235 = sub_100009BEC();
    }
    else {
      uint64_t v235 = static RuntimePlatform.all.getter(v233);
    }
    v5005[0] = v235;
    uint64_t v236 = v5005[10];
    uint64_t v237 = sub_100043E98();
    sub_100045F84(v237);
    sub_100043024();
    uint64_t v238 = v5005[0];
    uint64_t v239 = sub_10004317C();
    uint64_t v240 = sub_1000352A0(v239);
    sub_100043238(v238);
    sub_100043024();
    sub_100042E4C();
    uint64_t v4997 = sub_100045CF4();
    if (v4997)
    {
      sub_100046910();
      if (v130 != v41)
      {
LABEL_263:
        __break(1u);
        goto LABEL_264;
      }

      uint64_t v241 = sub_10004400C();
      sub_100047048(v241);
      do
      {
        if ((v4994 & 1) != 0)
        {
          sub_1000432F8();
        }

        else
        {
          sub_100043000(v76, v4999, (uint64_t (*)(void))&type metadata accessor for RuntimePlatform);
          sub_10004712C();
          if (!v117) {
            goto LABEL_256;
          }
          sub_100044A40(v242);
          sub_10004611C();
        }

        sub_100043C80();
        uint64_t v243 = sub_100045354();
        sub_1000436F8(v243);
        BOOL v35 = v4990;
        sub_10004314C((uint64_t)v218, v236, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4990 + 16));
        sub_1000441FC();
        sub_100045148();
        uint64_t v23 = *(void *)(*(void *)(v240 + 400) + 16LL);
        sub_10004523C(v23);
        sub_100037FF8();
        sub_100043380(v236, *(uint64_t (**)(uint64_t, uint64_t))(v4990 + 8));
        sub_1000475D8();
      }

      while (!v117);
    }

    uint64_t v53 = v5004;
    uint64_t v244 = (uint64_t *)(v5004 + 472);
    sub_10004581C();
    uint64_t v245 = *(void *)(v5004 + 576);
    uint64_t v246 = sub_100046674();
    *(void *)(v5004 + 456) = v246;
    sub_100043230();
    *(void *)(v5004 + 464) = v247;
    *(void *)(v5004 + 472) = &OBJC_PROTOCOL___WFLinkActionProtocol;
    uint64_t v4988 = v246;
    if (sub_100043D04(v245))
    {
      uint64_t v244 = (uint64_t *)sub_10004627C();
      uint64_t v34 = (uint64_t)sub_10004416C((uint64_t)v244, "backingActionIdentifiers");
      static Array._unconditionallyBridgeFromObjectiveC(_:)(v34, &type metadata for String);
      sub_100043650();
      uint64_t v246 = (uint64_t)sub_100046090();
      sub_1000432F0();
      sub_100043E98();
      int v248 = sub_100047420();

      sub_100008D58();
      sub_1000473F8();
      *(void *)(v5004 + 464) = v248;
    }

    else
    {
      uint64_t v34 = v4983;
    }

    *(void *)(v5004 + 2032) = v34;
    if (!sub_100044F00())
    {
      uint64_t v249 = sub_1000473F0();
      if (v249)
      {
        BOOL v35 = v249;
        if (v249 < 1)
        {
LABEL_264:
          __break(1u);
          goto LABEL_265;
        }

        uint64_t v23 = sub_100044194();
        uint64_t v34 = enum case for SystemToolProtocol.assistantSchema(_:);
        sub_100045814();
        uint64_t v15 = 0LL;
        sub_1000475A4((uint64_t)"SystemToolProtocol");
        do
        {
          if ((v23 & 1) != 0)
          {
            sub_100044290();
          }

          else
          {
            uint64_t v250 = sub_1000466CC();
            unint64_t v252 = sub_1000467A4( v250,  v251,  (uint64_t (*)(void))&type metadata accessor for SystemToolProtocol);
            if (v5002 != 8) {
              goto LABEL_258;
            }
            sub_100044E04(v252);
            sub_1000431C0();
          }

          char v253 = v244[108];
          sub_100043C08(v253, v244[109], *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5004 + 32));
          uint64_t v254 = sub_10000F508(v253, *(uint64_t (**)(uint64_t, uint64_t))(v5004 + 88));
          uint64_t v255 = v244[108];
          if (v254 == (_DWORD)v34)
          {
            uint64_t v256 = v244[103];
            sub_100043184(*(uint64_t (**)(uint64_t))(v5004 + 96));
            sub_10000F538(v256, v255, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v76 + 32));
            sub_100044E94();
            sub_100044DAC();
            uint64_t v257 = sub_100044DFC();
            sub_100043868();
            if (*(void *)(v257 + 16) && (uint64_t v258 = sub_100051CAC(), (v259 & 1) != 0))
            {
              sub_1000431C8(v258, v244[97]);
              uint64_t v260 = 0LL;
            }

            else
            {
              uint64_t v260 = 1LL;
            }

            sub_10000848C(*(void *)(v5004 + 776), v260, 1LL, *(void *)(v5004 + 784));
            sub_100008D58();
            sub_100046BA4();
            if (v117)
            {
              uint64_t v261 = *(void *)(v5004 + 776);
              uint64_t v76 = v4997;
              sub_10004385C(*(uint64_t (**)(uint64_t, uint64_t))(v4997 + 8));
              sub_100041358(v261, &qword_10006A390);
            }

            else
            {
              uint64_t v262 = *(void *)(v5004 + 800);
              uint64_t v244 = *(uint64_t **)(v5004 + 784);
              sub_100043D7C( v262,  *(void *)(v5004 + 776),  *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4987 + 32));
              sub_100047030();
              sub_100015F18();
              uint64_t v263 = v262;
              uint64_t v246 = v4988;
              sub_1000431A8(v263, *(uint64_t (**)(uint64_t, uint64_t))(v4987 + 8));
              uint64_t v76 = v4997;
              sub_10004385C(*(uint64_t (**)(uint64_t, uint64_t))(v4997 + 8));
            }

            BOOL v35 = v4994;
          }

          else
          {
            sub_100043184(*(uint64_t (**)(uint64_t))(v5004 + 8));
          }

          ++v15;
        }

        while (v35 != v15);
        sub_1000132B8();
        uint64_t v53 = v5004;
      }
    }

    if (sub_100044DA4((void *)(v5004 + 464)))
    {
      sub_10004590C();
      sub_100044F40(v264);
      uint64_t v34 = (uint64_t)sub_100050CA8;
      sub_100044848();
      sub_100043800(*(void *)(v53 + 456));
      sub_100045514();
    }

    if (*(void *)(v53 + 1672))
    {
      sub_100043240();
      sub_100043C20();
      *(void *)(v53 + 2040) = sub_1000431DC();
      sub_100042F20();
      sub_100043160();
      goto LABEL_214;
    }

    sub_100040428(*(void **)(v53 + 576), (SEL *)&selRef_iconName);
    if (v265)
    {
      sub_100043FA4();
      sub_100044004();
      *(void *)(v53 + 488) = v244;
      *(void *)(v53 + 496) = v34;
      uint64_t v266 = enum case for ToolIcon.workflowAsset(_:);
      uint64_t v34 = sub_1000432E8();
      sub_10004314C( v53 + 488,  v266,  *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v34 - 8) + 104LL));
      sub_100043BE0();
LABEL_227:
      sub_10000848C(v267, v268, v269, v270);
      goto LABEL_228;
    }

    sub_100040428(*(void **)(v53 + 576), (SEL *)&selRef_iconSymbolName);
    if (v272)
    {
      uint64_t v34 = v271;
      uint64_t v23 = v272;
      sub_100040428(*(void **)(v53 + 576), (SEL *)&selRef_iconBackgroundColorName);
      if (v273)
      {
        uint64_t v274 = [(id)sub_100046934() definition];
        if (v274)
        {
          uint64_t v275 = [v274 objectForKey:WFActionIconSymbolColorNameKey];
          sub_100047644();
          if (v246)
          {
            sub_100045BC0();
            uint64_t v276 = sub_100047410();
          }

          else
          {
            sub_100044F68();
          }

          uint64_t v15 = v35;
          sub_1000453A0(v276, v277, &qword_10006A420);
          BOOL v35 = v23;
          if (*(void *)(v53 + 328))
          {
            uint64_t v1122 = v4985;
            if ((sub_100044438(v53 + 376, (uint64_t)&type metadata for String, (uint64_t)&type metadata for Any) & 1) != 0)
            {
              sub_100045224();
              goto LABEL_238;
            }

LABEL_237:
            sub_100043410(*(void *)(v47 + 720), v1114, v1115, *(void *)(v47 + 632));
LABEL_238:
            sub_100044A18();
            swift_bridgeObjectRelease(*v1116);
            BOOL v1118 = v240 == v47 && v238 == (uint64_t *)0xE400000000000000LL;
            uint64_t v1119 = (void *)v4998;
            if (v1118 || (sub_100043138(v240, (uint64_t)v238) & 1) != 0)
            {
              uint64_t v1120 = *(void *)(v4998 + 712);
              uint64_t v1121 = *(void *)(v4998 + 632);
              sub_100045A84(*(void *)(v4998 + 720), v1117, &qword_10006A378);
              sub_100043DBC(v1120, 1LL, v1121);
              if (!v111)
              {
                uint64_t v1126 = sub_100045EDC();
                sub_100041358(v1126, &qword_10006A378);
                sub_100042E4C();
                sub_100045824(v22, v1120);
                sub_100045824(v1121, v22);
                uint64_t v1127 = (unsigned int *)&enum case for ToolSymbolIconStyle.tinted(_:);
LABEL_253:
                uint64_t v1135 = (uint64_t *)v1119[96];
                uint64_t v1136 = v1119[86];
                uint64_t v47 = v1119[85];
                sub_100043C08(v1136, *v1127, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v47 + 104));
                uint64_t v1137 = (uint64_t)v1135 + *(int *)(sub_10000844C(&qword_10006A430) + 48);
                *uint64_t v1135 = v13;
                v1135[1] = v29;
                sub_100043C08(v1137, v1136, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v47 + 32));
                uint64_t v28 = enum case for ToolIcon.symbol(_:);
                uint64_t v1138 = sub_1000432E8();
                sub_100043FB8(v1138);
                sub_1000457F4((uint64_t)v1135);
LABEL_228:
                sub_100043260();
                id v273 = sub_10004550C(v272, "identifier");
                sub_1000459D0((uint64_t)v273);
                sub_100046F28();
                uint64_t v274 = sub_100044B10();
                sub_1000433B0(v274);
                sub_1000443D0(v29, v275, (uint64_t)sub_100040F80);
                uint64_t v276 = sub_100043680();
                if (v28)
                {
                  sub_100043758(v277);
                  sub_1000447AC();
                  sub_100044830();
                  sub_1000445E4();
                  uint64_t v278 = sub_10000F3F4();
                  sub_1000431B8(v278, &qword_10006A388);
                  sub_100043AEC(*(uint64_t (**)(uint64_t, uint64_t))(v22 + 8));
                  sub_100043FD4(v29, *(uint64_t (**)(uint64_t, uint64_t))(v28 + 8));
                  sub_100043B64();
                  sub_1000435DC();
                  sub_100008D58();
                  sub_100046634();
                  sub_100043A38();
                  sub_100045534();
                  sub_100043B04();
                  sub_10004264C();
                  sub_10000F41C();
                  sub_10000F4A0();
                  sub_10000F3FC();
                  sub_10000F484();
                  sub_10000F338();
                  sub_10000F404();
                  sub_10000F4A8();
                  sub_10000F4EC();
                  uint64_t v279 = sub_10000F3F4();
                  uint64_t v287 = sub_1000436F0( v279,  v280,  v281,  v282,  v283,  v284,  v285,  v286,  v1139,  v1242,  v1345,  v1448,  v1551,  v1654,  v1756,  v1858,  v1960,  v2061,  v2162,  v2262,  v2361,  v2459,  v2556,  v2652,  v2747,  v2841);
                  uint64_t v295 = sub_1000436E8( v287,  v288,  v289,  v290,  v291,  v292,  v293,  v294,  v1140,  v1243,  v1346,  v1449,  v1552,  v1655,  v1757,  v1859,  v1961,  v2062,  v2163,  v2263,  v2362,  v2460,  v2557,  v2653,  v2748,  v2842,  v2934);
                  uint64_t v303 = sub_1000436C4( v295,  v296,  v297,  v298,  v299,  v300,  v301,  v302,  v1141,  v1244,  v1347,  v1450,  v1553,  v1656,  v1758,  v1860,  v1962,  v2063,  v2164,  v2264,  v2363,  v2461,  v2558,  v2654,  v2749,  v2843,  v2935,  v3025);
                  uint64_t v311 = sub_100043624( v303,  v304,  v305,  v306,  v307,  v308,  v309,  v310,  v1142,  v1245,  v1348,  v1451,  v1554,  v1657,  v1759,  v1861,  v1963,  v2064,  v2165,  v2265,  v2364,  v2462,  v2559,  v2655,  v2750,  v2844,  v2936,  v3026,  v3114);
                  uint64_t v319 = sub_100043658( v311,  v312,  v313,  v314,  v315,  v316,  v317,  v318,  v1143,  v1246,  v1349,  v1452,  v1555,  v1658,  v1760,  v1862,  v1964,  v2065,  v2166,  v2266,  v2365,  v2463,  v2560,  v2656,  v2751,  v2845,  v2937,  v3027,  v3115,  v3201);
                  uint64_t v327 = sub_100043660( v319,  v320,  v321,  v322,  v323,  v324,  v325,  v326,  v1144,  v1247,  v1350,  v1453,  v1556,  v1659,  v1761,  v1863,  v1965,  v2066,  v2167,  v2267,  v2366,  v2464,  v2561,  v2657,  v2752,  v2846,  v2938,  v3028,  v3116,  v3202,  v3286);
                  uint64_t v335 = sub_10004361C( v327,  v328,  v329,  v330,  v331,  v332,  v333,  v334,  v1145,  v1248,  v1351,  v1454,  v1557,  v1660,  v1762,  v1864,  v1966,  v2067,  v2168,  v2268,  v2367,  v2465,  v2562,  v2658,  v2753,  v2847,  v2939,  v3029,  v3117,  v3203,  v3287,  v3369);
                  uint64_t v343 = sub_100043614( v335,  v336,  v337,  v338,  v339,  v340,  v341,  v342,  v1146,  v1249,  v1352,  v1455,  v1558,  v1661,  v1763,  v1865,  v1967,  v2068,  v2169,  v2269,  v2368,  v2466,  v2563,  v2659,  v2754,  v2848,  v2940,  v3030,  v3118,  v3204,  v3288,  v3370,  v3450);
                  uint64_t v351 = sub_100043A48( v343,  v344,  v345,  v346,  v347,  v348,  v349,  v350,  v1147,  v1250,  v1353,  v1456,  v1559,  v1662,  v1764,  v1866,  v1968,  v2069,  v2170,  v2270,  v2369,  v2467,  v2564,  v2660,  v2755,  v2849,  v2941,  v3031,  v3119,  v3205,  v3289,  v3371,  v3451,  v3529);
                  uint64_t v359 = sub_100043A40( v351,  v352,  v353,  v354,  v355,  v356,  v357,  v358,  v1148,  v1251,  v1354,  v1457,  v1560,  v1663,  v1765,  v1867,  v1969,  v2070,  v2171,  v2271,  v2370,  v2468,  v2565,  v2661,  v2756,  v2850,  v2942,  v3032,  v3120,  v3206,  v3290,  v3372,  v3452,  v3530,  v3606);
                  uint64_t v367 = sub_1000437F8( v359,  v360,  v361,  v362,  v363,  v364,  v365,  v366,  v1149,  v1252,  v1355,  v1458,  v1561,  v1664,  v1766,  v1868,  v1970,  v2071,  v2172,  v2272,  v2371,  v2469,  v2566,  v2662,  v2757,  v2851,  v2943,  v3033,  v3121,  v3207,  v3291,  v3373,  v3453,  v3531,  v3607,  v3681);
                  uint64_t v375 = sub_10004384C( v367,  v368,  v369,  v370,  v371,  v372,  v373,  v374,  v1150,  v1253,  v1356,  v1459,  v1562,  v1665,  v1767,  v1869,  v1971,  v2072,  v2173,  v2273,  v2372,  v2470,  v2567,  v2663,  v2758,  v2852,  v2944,  v3034,  v3122,  v3208,  v3292,  v3374,  v3454,  v3532,  v3608,  v3682,  v3754);
                  uint64_t v383 = sub_100043A30( v375,  v376,  v377,  v378,  v379,  v380,  v381,  v382,  v1151,  v1254,  v1357,  v1460,  v1563,  v1666,  v1768,  v1870,  v1972,  v2073,  v2174,  v2274,  v2373,  v2471,  v2568,  v2664,  v2759,  v2853,  v2945,  v3035,  v3123,  v3209,  v3293,  v3375,  v3455,  v3533,  v3609,  v3683,  v3755,  v3825);
                  uint64_t v391 = sub_100043A28( v383,  v384,  v385,  v386,  v387,  v388,  v389,  v390,  v1152,  v1255,  v1358,  v1461,  v1564,  v1667,  v1769,  v1871,  v1973,  v2074,  v2175,  v2275,  v2374,  v2472,  v2569,  v2665,  v2760,  v2854,  v2946,  v3036,  v3124,  v3210,  v3294,  v3376,  v3456,  v3534,  v3610,  v3684,  v3756,  v3826,  v3894);
                  uint64_t v399 = sub_100043A20( v391,  v392,  v393,  v394,  v395,  v396,  v397,  v398,  v1153,  v1256,  v1359,  v1462,  v1565,  v1668,  v1770,  v1872,  v1974,  v2075,  v2176,  v2276,  v2375,  v2473,  v2570,  v2666,  v2761,  v2855,  v2947,  v3037,  v3125,  v3211,  v3295,  v3377,  v3457,  v3535,  v3611,  v3685,  v3757,  v3827,  v3895,  v3961);
                  uint64_t v407 = sub_100043A18( v399,  v400,  v401,  v402,  v403,  v404,  v405,  v406,  v1154,  v1257,  v1360,  v1463,  v1566,  v1669,  v1771,  v1873,  v1975,  v2076,  v2177,  v2277,  v2376,  v2474,  v2571,  v2667,  v2762,  v2856,  v2948,  v3038,  v3126,  v3212,  v3296,  v3378,  v3458,  v3536,  v3612,  v3686,  v3758,  v3828,  v3896,  v3962,  v4026);
                  uint64_t v415 = sub_100043A10( v407,  v408,  v409,  v410,  v411,  v412,  v413,  v414,  v1155,  v1258,  v1361,  v1464,  v1567,  v1670,  v1772,  v1874,  v1976,  v2077,  v2178,  v2278,  v2377,  v2475,  v2572,  v2668,  v2763,  v2857,  v2949,  v3039,  v3127,  v3213,  v3297,  v3379,  v3459,  v3537,  v3613,  v3687,  v3759,  v3829,  v3897,  v3963,  v4027,  v4089);
                  uint64_t v423 = sub_100043A08( v415,  v416,  v417,  v418,  v419,  v420,  v421,  v422,  v1156,  v1259,  v1362,  v1465,  v1568,  v1671,  v1773,  v1875,  v1977,  v2078,  v2179,  v2279,  v2378,  v2476,  v2573,  v2669,  v2764,  v2858,  v2950,  v3040,  v3128,  v3214,  v3298,  v3380,  v3460,  v3538,  v3614,  v3688,  v3760,  v3830,  v3898,  v3964,  v4028,  v4090,  v4150);
                  uint64_t v431 = sub_100043A00( v423,  v424,  v425,  v426,  v427,  v428,  v429,  v430,  v1157,  v1260,  v1363,  v1466,  v1569,  v1672,  v1774,  v1876,  v1978,  v2079,  v2180,  v2280,  v2379,  v2477,  v2574,  v2670,  v2765,  v2859,  v2951,  v3041,  v3129,  v3215,  v3299,  v3381,  v3461,  v3539,  v3615,  v3689,  v3761,  v3831,  v3899,  v3965,  v4029,  v4091,  v4151,  v4209);
                  uint64_t v439 = sub_1000439F8( v431,  v432,  v433,  v434,  v435,  v436,  v437,  v438,  v1158,  v1261,  v1364,  v1467,  v1570,  v1673,  v1775,  v1877,  v1979,  v2080,  v2181,  v2281,  v2380,  v2478,  v2575,  v2671,  v2766,  v2860,  v2952,  v3042,  v3130,  v3216,  v3300,  v3382,  v3462,  v3540,  v3616,  v3690,  v3762,  v3832,  v3900,  v3966,  v4030,  v4092,  v4152,  v4210,  v4266);
                  uint64_t v447 = sub_1000439F0( v439,  v440,  v441,  v442,  v443,  v444,  v445,  v446,  v1159,  v1262,  v1365,  v1468,  v1571,  v1674,  v1776,  v1878,  v1980,  v2081,  v2182,  v2282,  v2381,  v2479,  v2576,  v2672,  v2767,  v2861,  v2953,  v3043,  v3131,  v3217,  v3301,  v3383,  v3463,  v3541,  v3617,  v3691,  v3763,  v3833,  v3901,  v3967,  v4031,  v4093,  v4153,  v4211,  v4267,  v4321);
                  uint64_t v455 = sub_1000439E8( v447,  v448,  v449,  v450,  v451,  v452,  v453,  v454,  v1160,  v1263,  v1366,  v1469,  v1572,  v1675,  v1777,  v1879,  v1981,  v2082,  v2183,  v2283,  v2382,  v2480,  v2577,  v2673,  v2768,  v2862,  v2954,  v3044,  v3132,  v3218,  v3302,  v3384,  v3464,  v3542,  v3618,  v3692,  v3764,  v3834,  v3902,  v3968,  v4032,  v4094,  v4154,  v4212,  v4268,  v4322,  v4374);
                  uint64_t v463 = sub_1000439E0( v455,  v456,  v457,  v458,  v459,  v460,  v461,  v462,  v1161,  v1264,  v1367,  v1470,  v1573,  v1676,  v1778,  v1880,  v1982,  v2083,  v2184,  v2284,  v2383,  v2481,  v2578,  v2674,  v2769,  v2863,  v2955,  v3045,  v3133,  v3219,  v3303,  v3385,  v3465,  v3543,  v3619,  v3693,  v3765,  v3835,  v3903,  v3969,  v4033,  v4095,  v4155,  v4213,  v4269,  v4323,  v4375,  v4425);
                  uint64_t v471 = sub_1000439D8( v463,  v464,  v465,  v466,  v467,  v468,  v469,  v470,  v1162,  v1265,  v1368,  v1471,  v1574,  v1677,  v1779,  v1881,  v1983,  v2084,  v2185,  v2285,  v2384,  v2482,  v2579,  v2675,  v2770,  v2864,  v2956,  v3046,  v3134,  v3220,  v3304,  v3386,  v3466,  v3544,  v3620,  v3694,  v3766,  v3836,  v3904,  v3970,  v4034,  v4096,  v4156,  v4214,  v4270,  v4324,  v4376,  v4426,  v4474);
                  uint64_t v479 = sub_1000439D0( v471,  v472,  v473,  v474,  v475,  v476,  v477,  v478,  v1163,  v1266,  v1369,  v1472,  v1575,  v1678,  v1780,  v1882,  v1984,  v2085,  v2186,  v2286,  v2385,  v2483,  v2580,  v2676,  v2771,  v2865,  v2957,  v3047,  v3135,  v3221,  v3305,  v3387,  v3467,  v3545,  v3621,  v3695,  v3767,  v3837,  v3905,  v3971,  v4035,  v4097,  v4157,  v4215,  v4271,  v4325,  v4377,  v4427,  v4475,
                           v4521);
                  uint64_t v487 = sub_1000439C8( v479,  v480,  v481,  v482,  v483,  v484,  v485,  v486,  v1164,  v1267,  v1370,  v1473,  v1576,  v1679,  v1781,  v1883,  v1985,  v2086,  v2187,  v2287,  v2386,  v2484,  v2581,  v2677,  v2772,  v2866,  v2958,  v3048,  v3136,  v3222,  v3306,  v3388,  v3468,  v3546,  v3622,  v3696,  v3768,  v3838,  v3906,  v3972,  v4036,  v4098,  v4158,  v4216,  v4272,  v4326,  v4378,  v4428,  v4476,
                           v4522,
                           v4566);
                  uint64_t v495 = sub_1000439C0( v487,  v488,  v489,  v490,  v491,  v492,  v493,  v494,  v1165,  v1268,  v1371,  v1474,  v1577,  v1680,  v1782,  v1884,  v1986,  v2087,  v2188,  v2288,  v2387,  v2485,  v2582,  v2678,  v2773,  v2867,  v2959,  v3049,  v3137,  v3223,  v3307,  v3389,  v3469,  v3547,  v3623,  v3697,  v3769,  v3839,  v3907,  v3973,  v4037,  v4099,  v4159,  v4217,  v4273,  v4327,  v4379,  v4429,  v4477,
                           v4523,
                           v4567,
                           v4609);
                  uint64_t v503 = sub_1000439B8( v495,  v496,  v497,  v498,  v499,  v500,  v501,  v502,  v1166,  v1269,  v1372,  v1475,  v1578,  v1681,  v1783,  v1885,  v1987,  v2088,  v2189,  v2289,  v2388,  v2486,  v2583,  v2679,  v2774,  v2868,  v2960,  v3050,  v3138,  v3224,  v3308,  v3390,  v3470,  v3548,  v3624,  v3698,  v3770,  v3840,  v3908,  v3974,  v4038,  v4100,  v4160,  v4218,  v4274,  v4328,  v4380,  v4430,  v4478,
                           v4524,
                           v4568,
                           v4610,
                           v4650);
                  uint64_t v511 = sub_1000439B0( v503,  v504,  v505,  v506,  v507,  v508,  v509,  v510,  v1167,  v1270,  v1373,  v1476,  v1579,  v1682,  v1784,  v1886,  v1988,  v2089,  v2190,  v2290,  v2389,  v2487,  v2584,  v2680,  v2775,  v2869,  v2961,  v3051,  v3139,  v3225,  v3309,  v3391,  v3471,  v3549,  v3625,  v3699,  v3771,  v3841,  v3909,  v3975,  v4039,  v4101,  v4161,  v4219,  v4275,  v4329,  v4381,  v4431,  v4479,
                           v4525,
                           v4569,
                           v4611,
                           v4651,
                           v4689);
                  uint64_t v519 = sub_1000439A8( v511,  v512,  v513,  v514,  v515,  v516,  v517,  v518,  v1168,  v1271,  v1374,  v1477,  v1580,  v1683,  v1785,  v1887,  v1989,  v2090,  v2191,  v2291,  v2390,  v2488,  v2585,  v2681,  v2776,  v2870,  v2962,  v3052,  v3140,  v3226,  v3310,  v3392,  v3472,  v3550,  v3626,  v3700,  v3772,  v3842,  v3910,  v3976,  v4040,  v4102,  v4162,  v4220,  v4276,  v4330,  v4382,  v4432,  v4480,
                           v4526,
                           v4570,
                           v4612,
                           v4652,
                           v4690,
                           v4726);
                  uint64_t v527 = sub_1000439A0( v519,  v520,  v521,  v522,  v523,  v524,  v525,  v526,  v1169,  v1272,  v1375,  v1478,  v1581,  v1684,  v1786,  v1888,  v1990,  v2091,  v2192,  v2292,  v2391,  v2489,  v2586,  v2682,  v2777,  v2871,  v2963,  v3053,  v3141,  v3227,  v3311,  v3393,  v3473,  v3551,  v3627,  v3701,  v3773,  v3843,  v3911,  v3977,  v4041,  v4103,  v4163,  v4221,  v4277,  v4331,  v4383,  v4433,  v4481,
                           v4527,
                           v4571,
                           v4613,
                           v4653,
                           v4691,
                           v4727,
                           v4761);
                  uint64_t v535 = sub_100043998( v527,  v528,  v529,  v530,  v531,  v532,  v533,  v534,  v1170,  v1273,  v1376,  v1479,  v1582,  v1685,  v1787,  v1889,  v1991,  v2092,  v2193,  v2293,  v2392,  v2490,  v2587,  v2683,  v2778,  v2872,  v2964,  v3054,  v3142,  v3228,  v3312,  v3394,  v3474,  v3552,  v3628,  v3702,  v3774,  v3844,  v3912,  v3978,  v4042,  v4104,  v4164,  v4222,  v4278,  v4332,  v4384,  v4434,  v4482,
                           v4528,
                           v4572,
                           v4614,
                           v4654,
                           v4692,
                           v4728,
                           v4762,
                           v4794);
                  uint64_t v543 = sub_100043990( v535,  v536,  v537,  v538,  v539,  v540,  v541,  v542,  v1171,  v1274,  v1377,  v1480,  v1583,  v1686,  v1788,  v1890,  v1992,  v2093,  v2194,  v2294,  v2393,  v2491,  v2588,  v2684,  v2779,  v2873,  v2965,  v3055,  v3143,  v3229,  v3313,  v3395,  v3475,  v3553,  v3629,  v3703,  v3775,  v3845,  v3913,  v3979,  v4043,  v4105,  v4165,  v4223,  v4279,  v4333,  v4385,  v4435,  v4483,
                           v4529,
                           v4573,
                           v4615,
                           v4655,
                           v4693,
                           v4729,
                           v4763,
                           v4795,
                           v4825);
                  uint64_t v551 = sub_100043988( v543,  v544,  v545,  v546,  v547,  v548,  v549,  v550,  v1172,  v1275,  v1378,  v1481,  v1584,  v1687,  v1789,  v1891,  v1993,  v2094,  v2195,  v2295,  v2394,  v2492,  v2589,  v2685,  v2780,  v2874,  v2966,  v3056,  v3144,  v3230,  v3314,  v3396,  v3476,  v3554,  v3630,  v3704,  v3776,  v3846,  v3914,  v3980,  v4044,  v4106,  v4166,  v4224,  v4280,  v4334,  v4386,  v4436,  v4484,
                           v4530,
                           v4574,
                           v4616,
                           v4656,
                           v4694,
                           v4730,
                           v4764,
                           v4796,
                           v4826,
                           v4854);
                  uint64_t v559 = sub_100043980( v551,  v552,  v553,  v554,  v555,  v556,  v557,  v558,  v1173,  v1276,  v1379,  v1482,  v1585,  v1688,  v1790,  v1892,  v1994,  v2095,  v2196,  v2296,  v2395,  v2493,  v2590,  v2686,  v2781,  v2875,  v2967,  v3057,  v3145,  v3231,  v3315,  v3397,  v3477,  v3555,  v3631,  v3705,  v3777,  v3847,  v3915,  v3981,  v4045,  v4107,  v4167,  v4225,  v4281,  v4335,  v4387,  v4437,  v4485,
                           v4531,
                           v4575,
                           v4617,
                           v4657,
                           v4695,
                           v4731,
                           v4765,
                           v4797,
                           v4827,
                           v4855,
                           v4881);
                  uint64_t v567 = sub_100043978( v559,  v560,  v561,  v562,  v563,  v564,  v565,  v566,  v1174,  v1277,  v1380,  v1483,  v1586,  v1689,  v1791,  v1893,  v1995,  v2096,  v2197,  v2297,  v2396,  v2494,  v2591,  v2687,  v2782,  v2876,  v2968,  v3058,  v3146,  v3232,  v3316,  v3398,  v3478,  v3556,  v3632,  v3706,  v3778,  v3848,  v3916,  v3982,  v4046,  v4108,  v4168,  v4226,  v4282,  v4336,  v4388,  v4438,  v4486,
                           v4532,
                           v4576,
                           v4618,
                           v4658,
                           v4696,
                           v4732,
                           v4766,
                           v4798,
                           v4828,
                           v4856,
                           v4882,
                           v4906);
                  uint64_t v575 = sub_100043970( v567,  v568,  v569,  v570,  v571,  v572,  v573,  v574,  v1175,  v1278,  v1381,  v1484,  v1587,  v1690,  v1792,  v1894,  v1996,  v2097,  v2198,  v2298,  v2397,  v2495,  v2592,  v2688,  v2783,  v2877,  v2969,  v3059,  v3147,  v3233,  v3317,  v3399,  v3479,  v3557,  v3633,  v3707,  v3779,  v3849,  v3917,  v3983,  v4047,  v4109,  v4169,  v4227,  v4283,  v4337,  v4389,  v4439,  v4487,
                           v4533,
                           v4577,
                           v4619,
                           v4659,
                           v4697,
                           v4733,
                           v4767,
                           v4799,
                           v4829,
                           v4857,
                           v4883,
                           v4907,
                           v4929);
                  uint64_t v583 = sub_100043968( v575,  v576,  v577,  v578,  v579,  v580,  v581,  v582,  v1176,  v1279,  v1382,  v1485,  v1588,  v1691,  v1793,  v1895,  v1997,  v2098,  v2199,  v2299,  v2398,  v2496,  v2593,  v2689,  v2784,  v2878,  v2970,  v3060,  v3148,  v3234,  v3318,  v3400,  v3480,  v3558,  v3634,  v3708,  v3780,  v3850,  v3918,  v3984,  v4048,  v4110,  v4170,  v4228,  v4284,  v4338,  v4390,  v4440,  v4488,
                           v4534,
                           v4578,
                           v4620,
                           v4660,
                           v4698,
                           v4734,
                           v4768,
                           v4800,
                           v4830,
                           v4858,
                           v4884,
                           v4908,
                           v4930,
                           v4950);
                  uint64_t v591 = sub_100043960( v583,  v584,  v585,  v586,  v587,  v588,  v589,  v590,  v1177,  v1280,  v1383,  v1486,  v1589,  v1692,  v1794,  v1896,  v1998,  v2099,  v2200,  v2300,  v2399,  v2497,  v2594,  v2690,  v2785,  v2879,  v2971,  v3061,  v3149,  v3235,  v3319,  v3401,  v3481,  v3559,  v3635,  v3709,  v3781,  v3851,  v3919,  v3985,  v4049,  v4111,  v4171,  v4229,  v4285,  v4339,  v4391,  v4441,  v4489,
                           v4535,
                           v4579,
                           v4621,
                           v4661,
                           v4699,
                           v4735,
                           v4769,
                           v4801,
                           v4831,
                           v4859,
                           v4885,
                           v4909,
                           v4931,
                           v4951);
                  uint64_t v599 = sub_100043958( v591,  v592,  v593,  v594,  v595,  v596,  v597,  v598,  v1178,  v1281,  v1384,  v1487,  v1590,  v1693,  v1795,  v1897,  v1999,  v2100,  v2201,  v2301,  v2400,  v2498,  v2595,  v2691,  v2786,  v2880,  v2972,  v3062,  v3150,  v3236,  v3320,  v3402,  v3482,  v3560,  v3636,  v3710,  v3782,  v3852,  v3920,  v3986,  v4050,  v4112,  v4172,  v4230,  v4286,  v4340,  v4392,  v4442,  v4490,
                           v4536,
                           v4580,
                           v4622,
                           v4662,
                           v4700,
                           v4736,
                           v4770,
                           v4802,
                           v4832,
                           v4860,
                           v4886,
                           v4910,
                           v4932,
                           v4952);
                  uint64_t v607 = sub_100043950( v599,  v600,  v601,  v602,  v603,  v604,  v605,  v606,  v1179,  v1282,  v1385,  v1488,  v1591,  v1694,  v1796,  v1898,  v2000,  v2101,  v2202,  v2302,  v2401,  v2499,  v2596,  v2692,  v2787,  v2881,  v2973,  v3063,  v3151,  v3237,  v3321,  v3403,  v3483,  v3561,  v3637,  v3711,  v3783,  v3853,  v3921,  v3987,  v4051,  v4113,  v4173,  v4231,  v4287,  v4341,  v4393,  v4443,  v4491,
                           v4537,
                           v4581,
                           v4623,
                           v4663,
                           v4701,
                           v4737,
                           v4771,
                           v4803,
                           v4833,
                           v4861,
                           v4887,
                           v4911,
                           v4933,
                           v4953);
                  uint64_t v615 = sub_100043948( v607,  v608,  v609,  v610,  v611,  v612,  v613,  v614,  v1180,  v1283,  v1386,  v1489,  v1592,  v1695,  v1797,  v1899,  v2001,  v2102,  v2203,  v2303,  v2402,  v2500,  v2597,  v2693,  v2788,  v2882,  v2974,  v3064,  v3152,  v3238,  v3322,  v3404,  v3484,  v3562,  v3638,  v3712,  v3784,  v3854,  v3922,  v3988,  v4052,  v4114,  v4174,  v4232,  v4288,  v4342,  v4394,  v4444,  v4492,
                           v4538,
                           v4582,
                           v4624,
                           v4664,
                           v4702,
                           v4738,
                           v4772,
                           v4804,
                           v4834,
                           v4862,
                           v4888,
                           v4912,
                           v4934,
                           v4954);
                  uint64_t v623 = sub_100043940( v615,  v616,  v617,  v618,  v619,  v620,  v621,  v622,  v1181,  v1284,  v1387,  v1490,  v1593,  v1696,  v1798,  v1900,  v2002,  v2103,  v2204,  v2304,  v2403,  v2501,  v2598,  v2694,  v2789,  v2883,  v2975,  v3065,  v3153,  v3239,  v3323,  v3405,  v3485,  v3563,  v3639,  v3713,  v3785,  v3855,  v3923,  v3989,  v4053,  v4115,  v4175,  v4233,  v4289,  v4343,  v4395,  v4445,  v4493,
                           v4539,
                           v4583,
                           v4625,
                           v4665,
                           v4703,
                           v4739,
                           v4773,
                           v4805,
                           v4835,
                           v4863,
                           v4889,
                           v4913,
                           v4935,
                           v4955);
                  uint64_t v631 = sub_100043E48( v623,  v624,  v625,  v626,  v627,  v628,  v629,  v630,  v1182,  v1285,  v1388,  v1491,  v1594,  v1697,  v1799,  v1901,  v2003,  v2104,  v2205,  v2305,  v2404,  v2502,  v2599,  v2695,  v2790,  v2884,  v2976,  v3066,  v3154,  v3240,  v3324,  v3406,  v3486,  v3564,  v3640,  v3714,  v3786,  v3856,  v3924,  v3990,  v4054,  v4116,  v4176,  v4234,  v4290,  v4344,  v4396,  v4446,  v4494,
                           v4540,
                           v4584,
                           v4626,
                           v4666,
                           v4704,
                           v4740,
                           v4774,
                           v4806,
                           v4836,
                           v4864,
                           v4890,
                           v4914,
                           v4936,
                           v4956);
                  uint64_t v639 = sub_100043E40( v631,  v632,  v633,  v634,  v635,  v636,  v637,  v638,  v1183,  v1286,  v1389,  v1492,  v1595,  v1698,  v1800,  v1902,  v2004,  v2105,  v2206,  v2306,  v2405,  v2503,  v2600,  v2696,  v2791,  v2885,  v2977,  v3067,  v3155,  v3241,  v3325,  v3407,  v3487,  v3565,  v3641,  v3715,  v3787,  v3857,  v3925,  v3991,  v4055,  v4117,  v4177,  v4235,  v4291,  v4345,  v4397,  v4447,  v4495,
                           v4541,
                           v4585,
                           v4627,
                           v4667,
                           v4705,
                           v4741,
                           v4775,
                           v4807,
                           v4837,
                           v4865,
                           v4891,
                           v4915,
                           v4937,
                           v4957);
                  uint64_t v647 = sub_100043E38( v639,  v640,  v641,  v642,  v643,  v644,  v645,  v646,  v1184,  v1287,  v1390,  v1493,  v1596,  v1699,  v1801,  v1903,  v2005,  v2106,  v2207,  v2307,  v2406,  v2504,  v2601,  v2697,  v2792,  v2886,  v2978,  v3068,  v3156,  v3242,  v3326,  v3408,  v3488,  v3566,  v3642,  v3716,  v3788,  v3858,  v3926,  v3992,  v4056,  v4118,  v4178,  v4236,  v4292,  v4346,  v4398,  v4448,  v4496,
                           v4542,
                           v4586,
                           v4628,
                           v4668,
                           v4706,
                           v4742,
                           v4776,
                           v4808,
                           v4838,
                           v4866,
                           v4892,
                           v4916,
                           v4938,
                           v4958);
                  sub_100043E30( v647,  v648,  v649,  v650,  v651,  v652,  v653,  v654,  v1185,  v1288,  v1391,  v1494,  v1597,  v1700,  v1802,  v1904,  v2006,  v2107,  v2208,  v2308,  v2407,  v2505,  v2602,  v2698,  v2793,  v2887,  v2979,  v3069,  v3157,  v3243,  v3327,  v3409,  v3489,  v3567,  v3643,  v3717,  v3789,  v3859,  v3927,  v3993,  v4057,  v4119,  v4179,  v4237,  v4293,  v4347,  v4399,  v4449,  v4497,
                    v4543,
                    v4587,
                    v4629,
                    v4669,
                    v4707,
                    v4743,
                    v4777,
                    v4809,
                    v4839,
                    v4867,
                    v4893,
                    v4917,
                    v4939,
                    v4959);
                  sub_100043E28();
                  sub_100043E20();
                  sub_100044828();
                  sub_100044820();
                  sub_100044818();
                  sub_100044810();
                  sub_100044808();
                  sub_100044800();
                  sub_100046398();
                  sub_1000463B8();
                  sub_100043938();
                  sub_100043930();
                  sub_100043928();
                  sub_100043920();
                  sub_100043DB4();
                  sub_100043DAC();
                  sub_100043EF0();
                  sub_100043E50();
                  sub_10000F308(*(uint64_t (**)(void))(v47 + 8));
                }

                else
                {
                  sub_1000421EC(v276);
                  sub_1000447AC();
                  sub_100044830();
                  sub_1000445E4();
                  uint64_t v655 = sub_10000F3F4();
                  sub_1000431B8(v655, &qword_10006A388);
                  uint64_t v664 = sub_100043F00( v656,  v657,  v658,  v659,  v660,  v661,  v662,  v663,  v1139,  v1242,  v1345,  v1448,  v1551);
                  sub_1000460F0( v664,  v665,  v666,  v667,  v668,  v669,  v670,  v671,  v1186,  v1289,  v1392,  v1495,  v1598,  v1654,  v1756,  v1858);
                  sub_100043B64();
                  sub_1000435DC();
                  sub_100042E4C();
                  sub_10000F508(v22, *(uint64_t (**)(uint64_t, uint64_t))(v13 + 8));
                  sub_100043A38();
                  sub_100043910(v1960, MEMORY[8]);
                  sub_100043B04();
                  uint64_t v672 = sub_10000F404();
                  uint64_t v680 = sub_1000435E4( v672,  v673,  v674,  v675,  v676,  v677,  v678,  v679,  v1187,  v1290,  v1393,  v1496,  v1599,  v1701,  v1803,  v1905,  v1960,  v2061);
                  uint64_t v688 = sub_100043900( v680,  v681,  v682,  v683,  v684,  v685,  v686,  v687,  v1188,  v1291,  v1394,  v1497,  v1600,  v1702,  v1804,  v1906,  v2007,  v2108,  v2162);
                  uint64_t v696 = sub_100043AE4( v688,  v689,  v690,  v691,  v692,  v693,  v694,  v695,  v1189,  v1292,  v1395,  v1498,  v1601,  v1703,  v1805,  v1907,  v2008,  v2109,  v2209,  v2262);
                  uint64_t v704 = sub_100044AF4( v696,  v697,  v698,  v699,  v700,  v701,  v702,  v703,  v1190,  v1293,  v1396,  v1499,  v1602,  v1704,  v1806,  v1908,  v2009,  v2110,  v2210,  v2309,  v2361);
                  sub_100044940( v704,  v705,  v706,  v707,  v708,  v709,  v710,  v711,  v1191,  v1294,  v1397,  v1500,  v1603,  v1705,  v1807,  v1909,  v2010,  v2111,  v2211,  v2310,  v2408,  v2459);
                  uint64_t v712 = sub_10000F3F4();
                  uint64_t v720 = sub_100043EE8( v712,  v713,  v714,  v715,  v716,  v717,  v718,  v719,  v1192,  v1295,  v1398,  v1501,  v1604,  v1706,  v1808,  v1910,  v2011,  v2112,  v2212,  v2311,  v2409,  v2506,  v2556,  v2652);
                  uint64_t v728 = sub_100043F40( v720,  v721,  v722,  v723,  v724,  v725,  v726,  v727,  v1193,  v1296,  v1399,  v1502,  v1605,  v1707,  v1809,  v1911,  v2012,  v2113,  v2213,  v2312,  v2410,  v2507,  v2603,  v2699,  v2747);
                  uint64_t v736 = sub_1000436E8( v728,  v729,  v730,  v731,  v732,  v733,  v734,  v735,  v1194,  v1297,  v1400,  v1503,  v1606,  v1708,  v1810,  v1912,  v2013,  v2114,  v2214,  v2313,  v2411,  v2508,  v2604,  v2700,  v2794,  v2841,  v2934);
                  uint64_t v744 = sub_1000436C4( v736,  v737,  v738,  v739,  v740,  v741,  v742,  v743,  v1195,  v1298,  v1401,  v1504,  v1607,  v1709,  v1811,  v1913,  v2014,  v2115,  v2215,  v2314,  v2412,  v2509,  v2605,  v2701,  v2795,  v2888,  v2980,  v3025);
                  uint64_t v752 = sub_100043658( v744,  v745,  v746,  v747,  v748,  v749,  v750,  v751,  v1196,  v1299,  v1402,  v1505,  v1608,  v1710,  v1812,  v1914,  v2015,  v2116,  v2216,  v2315,  v2413,  v2510,  v2606,  v2702,  v2796,  v2889,  v2981,  v3070,  v3114,  v3201);
                  uint64_t v760 = sub_10004361C( v752,  v753,  v754,  v755,  v756,  v757,  v758,  v759,  v1197,  v1300,  v1403,  v1506,  v1609,  v1711,  v1813,  v1915,  v2016,  v2117,  v2217,  v2316,  v2414,  v2511,  v2607,  v2703,  v2797,  v2890,  v2982,  v3071,  v3158,  v3244,  v3286,  v3369);
                  uint64_t v768 = sub_100043A48( v760,  v761,  v762,  v763,  v764,  v765,  v766,  v767,  v1198,  v1301,  v1404,  v1507,  v1610,  v1712,  v1814,  v1916,  v2017,  v2118,  v2218,  v2317,  v2415,  v2512,  v2608,  v2704,  v2798,  v2891,  v2983,  v3072,  v3159,  v3245,  v3328,  v3410,  v3450,  v3529);
                  uint64_t v776 = sub_100043A40( v768,  v769,  v770,  v771,  v772,  v773,  v774,  v775,  v1199,  v1302,  v1405,  v1508,  v1611,  v1713,  v1815,  v1917,  v2018,  v2119,  v2219,  v2318,  v2416,  v2513,  v2609,  v2705,  v2799,  v2892,  v2984,  v3073,  v3160,  v3246,  v3329,  v3411,  v3490,  v3568,  v3606);
                  uint64_t v784 = sub_10004384C( v776,  v777,  v778,  v779,  v780,  v781,  v782,  v783,  v1200,  v1303,  v1406,  v1509,  v1612,  v1714,  v1816,  v1918,  v2019,  v2120,  v2220,  v2319,  v2417,  v2514,  v2610,  v2706,  v2800,  v2893,  v2985,  v3074,  v3161,  v3247,  v3330,  v3412,  v3491,  v3569,  v3644,  v3681,  v3754);
                  uint64_t v792 = sub_100043A28( v784,  v785,  v786,  v787,  v788,  v789,  v790,  v791,  v1201,  v1304,  v1407,  v1510,  v1613,  v1715,  v1817,  v1919,  v2020,  v2121,  v2221,  v2320,  v2418,  v2515,  v2611,  v2707,  v2801,  v2894,  v2986,  v3075,  v3162,  v3248,  v3331,  v3413,  v3492,  v3570,  v3645,  v3718,  v3790,  v3825,  v3894);
                  uint64_t v800 = sub_100043A18( v792,  v793,  v794,  v795,  v796,  v797,  v798,  v799,  v1202,  v1305,  v1408,  v1511,  v1614,  v1716,  v1818,  v1920,  v2021,  v2122,  v2222,  v2321,  v2419,  v2516,  v2612,  v2708,  v2802,  v2895,  v2987,  v3076,  v3163,  v3249,  v3332,  v3414,  v3493,  v3571,  v3646,  v3719,  v3791,  v3860,  v3928,  v3961,  v4026);
                  uint64_t v808 = sub_100043A08( v800,  v801,  v802,  v803,  v804,  v805,  v806,  v807,  v1203,  v1306,  v1409,  v1512,  v1615,  v1717,  v1819,  v1921,  v2022,  v2123,  v2223,  v2322,  v2420,  v2517,  v2613,  v2709,  v2803,  v2896,  v2988,  v3077,  v3164,  v3250,  v3333,  v3415,  v3494,  v3572,  v3647,  v3720,  v3792,  v3861,  v3929,  v3994,  v4058,  v4089,  v4150);
                  uint64_t v816 = sub_1000439F8( v808,  v809,  v810,  v811,  v812,  v813,  v814,  v815,  v1204,  v1307,  v1410,  v1513,  v1616,  v1718,  v1820,  v1922,  v2023,  v2124,  v2224,  v2323,  v2421,  v2518,  v2614,  v2710,  v2804,  v2897,  v2989,  v3078,  v3165,  v3251,  v3334,  v3416,  v3495,  v3573,  v3648,  v3721,  v3793,  v3862,  v3930,  v3995,  v4059,  v4120,  v4180,  v4209,  v4266);
                  uint64_t v824 = sub_1000439E8( v816,  v817,  v818,  v819,  v820,  v821,  v822,  v823,  v1205,  v1308,  v1411,  v1514,  v1617,  v1719,  v1821,  v1923,  v2024,  v2125,  v2225,  v2324,  v2422,  v2519,  v2615,  v2711,  v2805,  v2898,  v2990,  v3079,  v3166,  v3252,  v3335,  v3417,  v3496,  v3574,  v3649,  v3722,  v3794,  v3863,  v3931,  v3996,  v4060,  v4121,  v4181,  v4238,  v4294,  v4321,  v4374);
                  uint64_t v832 = sub_1000439E0( v824,  v825,  v826,  v827,  v828,  v829,  v830,  v831,  v1206,  v1309,  v1412,  v1515,  v1618,  v1720,  v1822,  v1924,  v2025,  v2126,  v2226,  v2325,  v2423,  v2520,  v2616,  v2712,  v2806,  v2899,  v2991,  v3080,  v3167,  v3253,  v3336,  v3418,  v3497,  v3575,  v3650,  v3723,  v3795,  v3864,  v3932,  v3997,  v4061,  v4122,  v4182,  v4239,  v4295,  v4348,  v4400,  v4425);
                  sub_1000439D0( v832,  v833,  v834,  v835,  v836,  v837,  v838,  v839,  v1207,  v1310,  v1413,  v1516,  v1619,  v1721,  v1823,  v1925,  v2026,  v2127,  v2227,  v2326,  v2424,  v2521,  v2617,  v2713,  v2807,  v2900,  v2992,  v3081,  v3168,  v3254,  v3337,  v3419,  v3498,  v3576,  v3651,  v3724,  v3796,  v3865,  v3933,  v3998,  v4062,  v4123,  v4183,  v4240,  v4296,  v4349,  v4401,  v4450,  v4474,
                    v4521);
                  sub_10000F4EC();
                  uint64_t v840 = sub_10000F338();
                  uint64_t v848 = sub_1000439B8( v840,  v841,  v842,  v843,  v844,  v845,  v846,  v847,  v1208,  v1311,  v1414,  v1517,  v1620,  v1722,  v1824,  v1926,  v2027,  v2128,  v2228,  v2327,  v2425,  v2522,  v2618,  v2714,  v2808,  v2901,  v2993,  v3082,  v3169,  v3255,  v3338,  v3420,  v3499,  v3577,  v3652,  v3725,  v3797,  v3866,  v3934,  v3999,  v4063,  v4124,  v4184,  v4241,  v4297,  v4350,  v4402,  v4451,  v4498,
                           v4544,
                           v4566,
                           v4609,
                           v4650);
                  sub_1000439A8( v848,  v849,  v850,  v851,  v852,  v853,  v854,  v855,  v1209,  v1312,  v1415,  v1518,  v1621,  v1723,  v1825,  v1927,  v2028,  v2129,  v2229,  v2328,  v2426,  v2523,  v2619,  v2715,  v2809,  v2902,  v2994,  v3083,  v3170,  v3256,  v3339,  v3421,  v3500,  v3578,  v3653,  v3726,  v3798,  v3867,  v3935,  v4000,  v4064,  v4125,  v4185,  v4242,  v4298,  v4351,  v4403,  v4452,  v4499,
                    v4545,
                    v4588,
                    v4630,
                    v4670,
                    v4689,
                    v4726);
                  uint64_t v856 = sub_10000F3FC();
                  uint64_t v864 = sub_1000436F0( v856,  v857,  v858,  v859,  v860,  v861,  v862,  v863,  v1210,  v1313,  v1416,  v1519,  v1622,  v1724,  v1826,  v1928,  v2029,  v2130,  v2230,  v2329,  v2427,  v2524,  v2620,  v2716,  v2810,  v2903);
                  uint64_t v872 = sub_100043624( v864,  v865,  v866,  v867,  v868,  v869,  v870,  v871,  v1211,  v1314,  v1417,  v1520,  v1623,  v1725,  v1827,  v1929,  v2030,  v2131,  v2231,  v2330,  v2428,  v2525,  v2621,  v2717,  v2811,  v2904,  v2995,  v3084,  v3171);
                  uint64_t v880 = sub_100043660( v872,  v873,  v874,  v875,  v876,  v877,  v878,  v879,  v1212,  v1315,  v1418,  v1521,  v1624,  v1726,  v1828,  v1930,  v2031,  v2132,  v2232,  v2331,  v2429,  v2526,  v2622,  v2718,  v2812,  v2905,  v2996,  v3085,  v3172,  v3257,  v3340);
                  uint64_t v888 = sub_100043614( v880,  v881,  v882,  v883,  v884,  v885,  v886,  v887,  v1213,  v1316,  v1419,  v1522,  v1625,  v1727,  v1829,  v1931,  v2032,  v2133,  v2233,  v2332,  v2430,  v2527,  v2623,  v2719,  v2813,  v2906,  v2997,  v3086,  v3173,  v3258,  v3341,  v3422,  v3501);
                  uint64_t v896 = sub_1000437F8( v888,  v889,  v890,  v891,  v892,  v893,  v894,  v895,  v1214,  v1317,  v1420,  v1523,  v1626,  v1728,  v1830,  v1932,  v2033,  v2134,  v2234,  v2333,  v2431,  v2528,  v2624,  v2720,  v2814,  v2907,  v2998,  v3087,  v3174,  v3259,  v3342,  v3423,  v3502,  v3579,  v3654,  v3727);
                  uint64_t v904 = sub_100043A30( v896,  v897,  v898,  v899,  v900,  v901,  v902,  v903,  v1215,  v1318,  v1421,  v1524,  v1627,  v1729,  v1831,  v1933,  v2034,  v2135,  v2235,  v2334,  v2432,  v2529,  v2625,  v2721,  v2815,  v2908,  v2999,  v3088,  v3175,  v3260,  v3343,  v3424,  v3503,  v3580,  v3655,  v3728,  v3799,  v3868);
                  uint64_t v912 = sub_100043A20( v904,  v905,  v906,  v907,  v908,  v909,  v910,  v911,  v1216,  v1319,  v1422,  v1525,  v1628,  v1730,  v1832,  v1934,  v2035,  v2136,  v2236,  v2335,  v2433,  v2530,  v2626,  v2722,  v2816,  v2909,  v3000,  v3089,  v3176,  v3261,  v3344,  v3425,  v3504,  v3581,  v3656,  v3729,  v3800,  v3869,  v3936,  v4001);
                  uint64_t v920 = sub_100043A10( v912,  v913,  v914,  v915,  v916,  v917,  v918,  v919,  v1217,  v1320,  v1423,  v1526,  v1629,  v1731,  v1833,  v1935,  v2036,  v2137,  v2237,  v2336,  v2434,  v2531,  v2627,  v2723,  v2817,  v2910,  v3001,  v3090,  v3177,  v3262,  v3345,  v3426,  v3505,  v3582,  v3657,  v3730,  v3801,  v3870,  v3937,  v4002,  v4065,  v4126);
                  uint64_t v928 = sub_100043A00( v920,  v921,  v922,  v923,  v924,  v925,  v926,  v927,  v1218,  v1321,  v1424,  v1527,  v1630,  v1732,  v1834,  v1936,  v2037,  v2138,  v2238,  v2337,  v2435,  v2532,  v2628,  v2724,  v2818,  v2911,  v3002,  v3091,  v3178,  v3263,  v3346,  v3427,  v3506,  v3583,  v3658,  v3731,  v3802,  v3871,  v3938,  v4003,  v4066,  v4127,  v4186,  v4243);
                  uint64_t v936 = sub_1000439F0( v928,  v929,  v930,  v931,  v932,  v933,  v934,  v935,  v1219,  v1322,  v1425,  v1528,  v1631,  v1733,  v1835,  v1937,  v2038,  v2139,  v2239,  v2338,  v2436,  v2533,  v2629,  v2725,  v2819,  v2912,  v3003,  v3092,  v3179,  v3264,  v3347,  v3428,  v3507,  v3584,  v3659,  v3732,  v3803,  v3872,  v3939,  v4004,  v4067,  v4128,  v4187,  v4244,  v4299,  v4352);
                  uint64_t v944 = sub_1000439D8( v936,  v937,  v938,  v939,  v940,  v941,  v942,  v943,  v1220,  v1323,  v1426,  v1529,  v1632,  v1734,  v1836,  v1938,  v2039,  v2140,  v2240,  v2339,  v2437,  v2534,  v2630,  v2726,  v2820,  v2913,  v3004,  v3093,  v3180,  v3265,  v3348,  v3429,  v3508,  v3585,  v3660,  v3733,  v3804,  v3873,  v3940,  v4005,  v4068,  v4129,  v4188,  v4245,  v4300,  v4353,  v4404,  v4453,  v4500);
                  uint64_t v952 = sub_1000439C8( v944,  v945,  v946,  v947,  v948,  v949,  v950,  v951,  v1221,  v1324,  v1427,  v1530,  v1633,  v1735,  v1837,  v1939,  v2040,  v2141,  v2241,  v2340,  v2438,  v2535,  v2631,  v2727,  v2821,  v2914,  v3005,  v3094,  v3181,  v3266,  v3349,  v3430,  v3509,  v3586,  v3661,  v3734,  v3805,  v3874,  v3941,  v4006,  v4069,  v4130,  v4189,  v4246,  v4301,  v4354,  v4405,  v4454,  v4501,
                           v4546,
                           v4589);
                  uint64_t v960 = sub_1000439C0( v952,  v953,  v954,  v955,  v956,  v957,  v958,  v959,  v1222,  v1325,  v1428,  v1531,  v1634,  v1736,  v1838,  v1940,  v2041,  v2142,  v2242,  v2341,  v2439,  v2536,  v2632,  v2728,  v2822,  v2915,  v3006,  v3095,  v3182,  v3267,  v3350,  v3431,  v3510,  v3587,  v3662,  v3735,  v3806,  v3875,  v3942,  v4007,  v4070,  v4131,  v4190,  v4247,  v4302,  v4355,  v4406,  v4455,  v4502,
                           v4547,
                           v4590,
                           v4631);
                  uint64_t v968 = sub_1000439B0( v960,  v961,  v962,  v963,  v964,  v965,  v966,  v967,  v1223,  v1326,  v1429,  v1532,  v1635,  v1737,  v1839,  v1941,  v2042,  v2143,  v2243,  v2342,  v2440,  v2537,  v2633,  v2729,  v2823,  v2916,  v3007,  v3096,  v3183,  v3268,  v3351,  v3432,  v3511,  v3588,  v3663,  v3736,  v3807,  v3876,  v3943,  v4008,  v4071,  v4132,  v4191,  v4248,  v4303,  v4356,  v4407,  v4456,  v4503,
                           v4548,
                           v4591,
                           v4632,
                           v4671,
                           v4708);
                  uint64_t v976 = sub_1000439A0( v968,  v969,  v970,  v971,  v972,  v973,  v974,  v975,  v1224,  v1327,  v1430,  v1533,  v1636,  v1738,  v1840,  v1942,  v2043,  v2144,  v2244,  v2343,  v2441,  v2538,  v2634,  v2730,  v2824,  v2917,  v3008,  v3097,  v3184,  v3269,  v3352,  v3433,  v3512,  v3589,  v3664,  v3737,  v3808,  v3877,  v3944,  v4009,  v4072,  v4133,  v4192,  v4249,  v4304,  v4357,  v4408,  v4457,  v4504,
                           v4549,
                           v4592,
                           v4633,
                           v4672,
                           v4709,
                           v4744,
                           v4761);
                  uint64_t v984 = sub_100043998( v976,  v977,  v978,  v979,  v980,  v981,  v982,  v983,  v1225,  v1328,  v1431,  v1534,  v1637,  v1739,  v1841,  v1943,  v2044,  v2145,  v2245,  v2344,  v2442,  v2539,  v2635,  v2731,  v2825,  v2918,  v3009,  v3098,  v3185,  v3270,  v3353,  v3434,  v3513,  v3590,  v3665,  v3738,  v3809,  v3878,  v3945,  v4010,  v4073,  v4134,  v4193,  v4250,  v4305,  v4358,  v4409,  v4458,  v4505,
                           v4550,
                           v4593,
                           v4634,
                           v4673,
                           v4710,
                           v4745,
                           v4778,
                           v4794);
                  uint64_t v992 = sub_100043990( v984,  v985,  v986,  v987,  v988,  v989,  v990,  v991,  v1226,  v1329,  v1432,  v1535,  v1638,  v1740,  v1842,  v1944,  v2045,  v2146,  v2246,  v2345,  v2443,  v2540,  v2636,  v2732,  v2826,  v2919,  v3010,  v3099,  v3186,  v3271,  v3354,  v3435,  v3514,  v3591,  v3666,  v3739,  v3810,  v3879,  v3946,  v4011,  v4074,  v4135,  v4194,  v4251,  v4306,  v4359,  v4410,  v4459,  v4506,
                           v4551,
                           v4594,
                           v4635,
                           v4674,
                           v4711,
                           v4746,
                           v4779,
                           v4810,
                           v4825);
                  uint64_t v1000 = sub_100043988( v992,  v993,  v994,  v995,  v996,  v997,  v998,  v999,  v1227,  v1330,  v1433,  v1536,  v1639,  v1741,  v1843,  v1945,  v2046,  v2147,  v2247,  v2346,  v2444,  v2541,  v2637,  v2733,  v2827,  v2920,  v3011,  v3100,  v3187,  v3272,  v3355,  v3436,  v3515,  v3592,  v3667,  v3740,  v3811,  v3880,  v3947,  v4012,  v4075,  v4136,  v4195,  v4252,  v4307,  v4360,  v4411,  v4460,  v4507,
                            v4552,
                            v4595,
                            v4636,
                            v4675,
                            v4712,
                            v4747,
                            v4780,
                            v4811,
                            v4840,
                            v4854);
                  uint64_t v1008 = sub_100043980( v1000,  v1001,  v1002,  v1003,  v1004,  v1005,  v1006,  v1007,  v1228,  v1331,  v1434,  v1537,  v1640,  v1742,  v1844,  v1946,  v2047,  v2148,  v2248,  v2347,  v2445,  v2542,  v2638,  v2734,  v2828,  v2921,  v3012,  v3101,  v3188,  v3273,  v3356,  v3437,  v3516,  v3593,  v3668,  v3741,  v3812,  v3881,  v3948,  v4013,  v4076,  v4137,  v4196,  v4253,  v4308,  v4361,  v4412,  v4461,  v4508,
                            v4553,
                            v4596,
                            v4637,
                            v4676,
                            v4713,
                            v4748,
                            v4781,
                            v4812,
                            v4841,
                            v4868,
                            v4881);
                  uint64_t v1016 = sub_100043978( v1008,  v1009,  v1010,  v1011,  v1012,  v1013,  v1014,  v1015,  v1229,  v1332,  v1435,  v1538,  v1641,  v1743,  v1845,  v1947,  v2048,  v2149,  v2249,  v2348,  v2446,  v2543,  v2639,  v2735,  v2829,  v2922,  v3013,  v3102,  v3189,  v3274,  v3357,  v3438,  v3517,  v3594,  v3669,  v3742,  v3813,  v3882,  v3949,  v4014,  v4077,  v4138,  v4197,  v4254,  v4309,  v4362,  v4413,  v4462,  v4509,
                            v4554,
                            v4597,
                            v4638,
                            v4677,
                            v4714,
                            v4749,
                            v4782,
                            v4813,
                            v4842,
                            v4869,
                            v4894,
                            v4906);
                  uint64_t v1024 = sub_100043970( v1016,  v1017,  v1018,  v1019,  v1020,  v1021,  v1022,  v1023,  v1230,  v1333,  v1436,  v1539,  v1642,  v1744,  v1846,  v1948,  v2049,  v2150,  v2250,  v2349,  v2447,  v2544,  v2640,  v2736,  v2830,  v2923,  v3014,  v3103,  v3190,  v3275,  v3358,  v3439,  v3518,  v3595,  v3670,  v3743,  v3814,  v3883,  v3950,  v4015,  v4078,  v4139,  v4198,  v4255,  v4310,  v4363,  v4414,  v4463,  v4510,
                            v4555,
                            v4598,
                            v4639,
                            v4678,
                            v4715,
                            v4750,
                            v4783,
                            v4814,
                            v4843,
                            v4870,
                            v4895,
                            v4918,
                            v4929);
                  uint64_t v1032 = sub_100043968( v1024,  v1025,  v1026,  v1027,  v1028,  v1029,  v1030,  v1031,  v1231,  v1334,  v1437,  v1540,  v1643,  v1745,  v1847,  v1949,  v2050,  v2151,  v2251,  v2350,  v2448,  v2545,  v2641,  v2737,  v2831,  v2924,  v3015,  v3104,  v3191,  v3276,  v3359,  v3440,  v3519,  v3596,  v3671,  v3744,  v3815,  v3884,  v3951,  v4016,  v4079,  v4140,  v4199,  v4256,  v4311,  v4364,  v4415,  v4464,  v4511,
                            v4556,
                            v4599,
                            v4640,
                            v4679,
                            v4716,
                            v4751,
                            v4784,
                            v4815,
                            v4844,
                            v4871,
                            v4896,
                            v4919,
                            v4940,
                            v4950);
                  uint64_t v1040 = sub_100043960( v1032,  v1033,  v1034,  v1035,  v1036,  v1037,  v1038,  v1039,  v1232,  v1335,  v1438,  v1541,  v1644,  v1746,  v1848,  v1950,  v2051,  v2152,  v2252,  v2351,  v2449,  v2546,  v2642,  v2738,  v2832,  v2925,  v3016,  v3105,  v3192,  v3277,  v3360,  v3441,  v3520,  v3597,  v3672,  v3745,  v3816,  v3885,  v3952,  v4017,  v4080,  v4141,  v4200,  v4257,  v4312,  v4365,  v4416,  v4465,  v4512,
                            v4557,
                            v4600,
                            v4641,
                            v4680,
                            v4717,
                            v4752,
                            v4785,
                            v4816,
                            v4845,
                            v4872,
                            v4897,
                            v4920,
                            v4941,
                            v4960);
                  uint64_t v1048 = sub_100043958( v1040,  v1041,  v1042,  v1043,  v1044,  v1045,  v1046,  v1047,  v1233,  v1336,  v1439,  v1542,  v1645,  v1747,  v1849,  v1951,  v2052,  v2153,  v2253,  v2352,  v2450,  v2547,  v2643,  v2739,  v2833,  v2926,  v3017,  v3106,  v3193,  v3278,  v3361,  v3442,  v3521,  v3598,  v3673,  v3746,  v3817,  v3886,  v3953,  v4018,  v4081,  v4142,  v4201,  v4258,  v4313,  v4366,  v4417,  v4466,  v4513,
                            v4558,
                            v4601,
                            v4642,
                            v4681,
                            v4718,
                            v4753,
                            v4786,
                            v4817,
                            v4846,
                            v4873,
                            v4898,
                            v4921,
                            v4942,
                            v4961);
                  uint64_t v1056 = sub_100043950( v1048,  v1049,  v1050,  v1051,  v1052,  v1053,  v1054,  v1055,  v1234,  v1337,  v1440,  v1543,  v1646,  v1748,  v1850,  v1952,  v2053,  v2154,  v2254,  v2353,  v2451,  v2548,  v2644,  v2740,  v2834,  v2927,  v3018,  v3107,  v3194,  v3279,  v3362,  v3443,  v3522,  v3599,  v3674,  v3747,  v3818,  v3887,  v3954,  v4019,  v4082,  v4143,  v4202,  v4259,  v4314,  v4367,  v4418,  v4467,  v4514,
                            v4559,
                            v4602,
                            v4643,
                            v4682,
                            v4719,
                            v4754,
                            v4787,
                            v4818,
                            v4847,
                            v4874,
                            v4899,
                            v4922,
                            v4943,
                            v4962);
                  uint64_t v1064 = sub_100043948( v1056,  v1057,  v1058,  v1059,  v1060,  v1061,  v1062,  v1063,  v1235,  v1338,  v1441,  v1544,  v1647,  v1749,  v1851,  v1953,  v2054,  v2155,  v2255,  v2354,  v2452,  v2549,  v2645,  v2741,  v2835,  v2928,  v3019,  v3108,  v3195,  v3280,  v3363,  v3444,  v3523,  v3600,  v3675,  v3748,  v3819,  v3888,  v3955,  v4020,  v4083,  v4144,  v4203,  v4260,  v4315,  v4368,  v4419,  v4468,  v4515,
                            v4560,
                            v4603,
                            v4644,
                            v4683,
                            v4720,
                            v4755,
                            v4788,
                            v4819,
                            v4848,
                            v4875,
                            v4900,
                            v4923,
                            v4944,
                            v4963);
                  uint64_t v1072 = sub_100043940( v1064,  v1065,  v1066,  v1067,  v1068,  v1069,  v1070,  v1071,  v1236,  v1339,  v1442,  v1545,  v1648,  v1750,  v1852,  v1954,  v2055,  v2156,  v2256,  v2355,  v2453,  v2550,  v2646,  v2742,  v2836,  v2929,  v3020,  v3109,  v3196,  v3281,  v3364,  v3445,  v3524,  v3601,  v3676,  v3749,  v3820,  v3889,  v3956,  v4021,  v4084,  v4145,  v4204,  v4261,  v4316,  v4369,  v4420,  v4469,  v4516,
                            v4561,
                            v4604,
                            v4645,
                            v4684,
                            v4721,
                            v4756,
                            v4789,
                            v4820,
                            v4849,
                            v4876,
                            v4901,
                            v4924,
                            v4945,
                            v4964);
                  uint64_t v1080 = sub_100043E48( v1072,  v1073,  v1074,  v1075,  v1076,  v1077,  v1078,  v1079,  v1237,  v1340,  v1443,  v1546,  v1649,  v1751,  v1853,  v1955,  v2056,  v2157,  v2257,  v2356,  v2454,  v2551,  v2647,  v2743,  v2837,  v2930,  v3021,  v3110,  v3197,  v3282,  v3365,  v3446,  v3525,  v3602,  v3677,  v3750,  v3821,  v3890,  v3957,  v4022,  v4085,  v4146,  v4205,  v4262,  v4317,  v4370,  v4421,  v4470,  v4517,
                            v4562,
                            v4605,
                            v4646,
                            v4685,
                            v4722,
                            v4757,
                            v4790,
                            v4821,
                            v4850,
                            v4877,
                            v4902,
                            v4925,
                            v4946,
                            v4965);
                  uint64_t v1088 = sub_100043E40( v1080,  v1081,  v1082,  v1083,  v1084,  v1085,  v1086,  v1087,  v1238,  v1341,  v1444,  v1547,  v1650,  v1752,  v1854,  v1956,  v2057,  v2158,  v2258,  v2357,  v2455,  v2552,  v2648,  v2744,  v2838,  v2931,  v3022,  v3111,  v3198,  v3283,  v3366,  v3447,  v3526,  v3603,  v3678,  v3751,  v3822,  v3891,  v3958,  v4023,  v4086,  v4147,  v4206,  v4263,  v4318,  v4371,  v4422,  v4471,  v4518,
                            v4563,
                            v4606,
                            v4647,
                            v4686,
                            v4723,
                            v4758,
                            v4791,
                            v4822,
                            v4851,
                            v4878,
                            v4903,
                            v4926,
                            v4947,
                            v4966);
                  uint64_t v1096 = sub_100043E38( v1088,  v1089,  v1090,  v1091,  v1092,  v1093,  v1094,  v1095,  v1239,  v1342,  v1445,  v1548,  v1651,  v1753,  v1855,  v1957,  v2058,  v2159,  v2259,  v2358,  v2456,  v2553,  v2649,  v2745,  v2839,  v2932,  v3023,  v3112,  v3199,  v3284,  v3367,  v3448,  v3527,  v3604,  v3679,  v3752,  v3823,  v3892,  v3959,  v4024,  v4087,  v4148,  v4207,  v4264,  v4319,  v4372,  v4423,  v4472,  v4519,
                            v4564,
                            v4607,
                            v4648,
                            v4687,
                            v4724,
                            v4759,
                            v4792,
                            v4823,
                            v4852,
                            v4879,
                            v4904,
                            v4927,
                            v4948,
                            v4967);
                  sub_100043E30( v1096,  v1097,  v1098,  v1099,  v1100,  v1101,  v1102,  v1103,  v1240,  v1343,  v1446,  v1549,  v1652,  v1754,  v1856,  v1958,  v2059,  v2160,  v2260,  v2359,  v2457,  v2554,  v2650,  v2746,  v2840,  v2933,  v3024,  v3113,  v3200,  v3285,  v3368,  v3449,  v3528,  v3605,  v3680,  v3753,  v3824,  v3893,  v3960,  v4025,  v4088,  v4149,  v4208,  v4265,  v4320,  v4373,  v4424,  v4473,  v4520,
                    v4565,
                    v4608,
                    v4649,
                    v4688,
                    v4725,
                    v4760,
                    v4793,
                    v4824,
                    v4853,
                    v4880,
                    v4905,
                    v4928,
                    v4949,
                    v4968);
                  sub_100043E28();
                  sub_100043E20();
                  sub_100044828();
                  uint64_t v1104 = sub_100044820();
                  sub_100044584( v1104,  v1105,  v1106,  v1107,  v1108,  v1109,  v1110,  v1111,  v1241,  v1344,  v1447,  v1550,  v1653,  v1755,  v1857,  v1959,  v2060,  v2161,  v2261,  v2360,  v2458,  v2555,  v2651);
                  sub_100044818();
                  sub_100044810();
                  sub_100044808();
                  sub_100044800();
                  sub_100046398();
                  sub_1000463B8();
                  sub_100043938();
                  sub_100043930();
                  sub_100043928();
                  sub_100043920();
                  sub_100043D44();
                  uint64_t v1112 = (uint64_t (*)(void))sub_10000F588();
                  sub_10000F308(v1112);
                }

                return;
              }

              sub_100041358(*(void *)(v4998 + 712), &qword_10006A378);
            }

            uint64_t v1122 = *(void *)(v4998 + 704);
            uint64_t v1123 = *(void *)(v4998 + 632);
            sub_100044F98();
            sub_1000084E0(v1122, 1LL, v1123);
            uint64_t v1124 = sub_100044158();
            if (v111)
            {
              uint64_t v1125 = sub_100044A10();
              sub_1000431B8(v1125, &qword_10006A378);
            }

            else
            {
              sub_100044A04(v1124);
            }

            uint64_t v1129 = *(void *)(v4998 + 696);
            uint64_t v1130 = *(void *)(v4998 + 632);
            sub_100045EAC(*(void *)(v4998 + 720), v1128, &qword_10006A378);
            sub_1000084E0(v1129, 1LL, v1130);
            uint64_t v1131 = sub_100044114();
            if (v111)
            {
              uint64_t v1132 = sub_100044F08();
              sub_1000431B8(v1132, &qword_10006A378);
            }

            else
            {
              sub_100047828(v1131);
            }

            uint64_t v1119 = (void *)v4998;
            uint64_t v1133 = *(void *)(v4998 + 688);
            sub_1000458C8();
            uint64_t v1134 = v1133 + *(int *)(sub_10000844C(&qword_10006A428) + 48);
            sub_1000456F0(v1133, v1123);
            sub_1000456F0(v1134, v1130);
            uint64_t v1127 = (unsigned int *)&enum case for ToolSymbolIconStyle.multicolor(_:);
            goto LABEL_253;
          }
        }

        else
        {
          sub_100046FCC();
        }

        sub_100045A94(v1113, &qword_10006A420);
        uint64_t v1116 = v4979;
        goto LABEL_237;
      }

            sub_100043410(*(void *)(v53 + 720), v1120, v1121, *(void *)(v53 + 632));
LABEL_238:
            sub_100044A18();
            swift_bridgeObjectRelease(*v1122);
            uint64_t v1124 = v246 == v53 && v244 == (uint64_t *)0xE400000000000000LL;
            uint64_t v1125 = (void *)v5004;
            if (v1124 || (sub_100043138(v246, (uint64_t)v244) & 1) != 0)
            {
              uint64_t v1126 = *(void *)(v5004 + 712);
              uint64_t v1127 = *(void *)(v5004 + 632);
              sub_100045A84(*(void *)(v5004 + 720), v1123, &qword_10006A378);
              sub_100043DBC(v1126, 1LL, v1127);
              if (!v117)
              {
                uint64_t v1132 = sub_100045EDC();
                sub_100041358(v1132, &qword_10006A378);
                sub_100042E4C();
                sub_100045824(v23, v1126);
                sub_100045824(v1127, v23);
                uint64_t v1133 = (unsigned int *)&enum case for ToolSymbolIconStyle.tinted(_:);
LABEL_253:
                uint64_t v1141 = (uint64_t *)v1125[96];
                uint64_t v1142 = v1125[86];
                uint64_t v53 = v1125[85];
                sub_100043C08(v1142, *v1133, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v53 + 104));
                uint64_t v1143 = (uint64_t)v1141 + *(int *)(sub_10000844C(&qword_10006A430) + 48);
                *uint64_t v1141 = v15;
                v1141[1] = v35;
                sub_100043C08(v1143, v1142, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v53 + 32));
                uint64_t v34 = enum case for ToolIcon.symbol(_:);
                uint64_t v1144 = sub_1000432E8();
                sub_100043FB8(v1144);
                sub_1000457F4((uint64_t)v1141);
LABEL_228:
                sub_100043260();
                uint64_t v279 = sub_10004550C(v278, "identifier");
                sub_1000459D0((uint64_t)v279);
                sub_100046F28();
                uint64_t v280 = sub_100044B10();
                sub_1000433B0(v280);
                sub_1000443D0(v35, v281, (uint64_t)sub_100040F80);
                uint64_t v282 = sub_100043680();
                if (v34)
                {
                  sub_100043758(v283);
                  sub_1000447AC();
                  sub_100044830();
                  sub_1000445E4();
                  uint64_t v284 = sub_10000F3F4();
                  sub_1000431B8(v284, &qword_10006A388);
                  sub_100043AEC(*(uint64_t (**)(uint64_t, uint64_t))(v23 + 8));
                  sub_100043FD4(v35, *(uint64_t (**)(uint64_t, uint64_t))(v34 + 8));
                  sub_100043B64();
                  sub_1000435DC();
                  sub_100008D58();
                  sub_100046634();
                  sub_100043A38();
                  sub_100045534();
                  sub_100043B04();
                  sub_10004264C();
                  sub_10000F41C();
                  sub_10000F4A0();
                  sub_10000F3FC();
                  sub_10000F484();
                  sub_10000F338();
                  sub_10000F404();
                  sub_10000F4A8();
                  sub_10000F4EC();
                  uint64_t v285 = sub_10000F3F4();
                  uint64_t v293 = sub_1000436F0( v285,  v286,  v287,  v288,  v289,  v290,  v291,  v292,  v1145,  v1248,  v1351,  v1454,  v1557,  v1660,  v1762,  v1864,  v1966,  v2067,  v2168,  v2268,  v2367,  v2465,  v2562,  v2658,  v2753,  v2847);
                  uint64_t v301 = sub_1000436E8( v293,  v294,  v295,  v296,  v297,  v298,  v299,  v300,  v1146,  v1249,  v1352,  v1455,  v1558,  v1661,  v1763,  v1865,  v1967,  v2068,  v2169,  v2269,  v2368,  v2466,  v2563,  v2659,  v2754,  v2848,  v2940);
                  uint64_t v309 = sub_1000436C4( v301,  v302,  v303,  v304,  v305,  v306,  v307,  v308,  v1147,  v1250,  v1353,  v1456,  v1559,  v1662,  v1764,  v1866,  v1968,  v2069,  v2170,  v2270,  v2369,  v2467,  v2564,  v2660,  v2755,  v2849,  v2941,  v3031);
                  uint64_t v317 = sub_100043624( v309,  v310,  v311,  v312,  v313,  v314,  v315,  v316,  v1148,  v1251,  v1354,  v1457,  v1560,  v1663,  v1765,  v1867,  v1969,  v2070,  v2171,  v2271,  v2370,  v2468,  v2565,  v2661,  v2756,  v2850,  v2942,  v3032,  v3120);
                  uint64_t v325 = sub_100043658( v317,  v318,  v319,  v320,  v321,  v322,  v323,  v324,  v1149,  v1252,  v1355,  v1458,  v1561,  v1664,  v1766,  v1868,  v1970,  v2071,  v2172,  v2272,  v2371,  v2469,  v2566,  v2662,  v2757,  v2851,  v2943,  v3033,  v3121,  v3207);
                  uint64_t v333 = sub_100043660( v325,  v326,  v327,  v328,  v329,  v330,  v331,  v332,  v1150,  v1253,  v1356,  v1459,  v1562,  v1665,  v1767,  v1869,  v1971,  v2072,  v2173,  v2273,  v2372,  v2470,  v2567,  v2663,  v2758,  v2852,  v2944,  v3034,  v3122,  v3208,  v3292);
                  uint64_t v341 = sub_10004361C( v333,  v334,  v335,  v336,  v337,  v338,  v339,  v340,  v1151,  v1254,  v1357,  v1460,  v1563,  v1666,  v1768,  v1870,  v1972,  v2073,  v2174,  v2274,  v2373,  v2471,  v2568,  v2664,  v2759,  v2853,  v2945,  v3035,  v3123,  v3209,  v3293,  v3375);
                  uint64_t v349 = sub_100043614( v341,  v342,  v343,  v344,  v345,  v346,  v347,  v348,  v1152,  v1255,  v1358,  v1461,  v1564,  v1667,  v1769,  v1871,  v1973,  v2074,  v2175,  v2275,  v2374,  v2472,  v2569,  v2665,  v2760,  v2854,  v2946,  v3036,  v3124,  v3210,  v3294,  v3376,  v3456);
                  uint64_t v357 = sub_100043A48( v349,  v350,  v351,  v352,  v353,  v354,  v355,  v356,  v1153,  v1256,  v1359,  v1462,  v1565,  v1668,  v1770,  v1872,  v1974,  v2075,  v2176,  v2276,  v2375,  v2473,  v2570,  v2666,  v2761,  v2855,  v2947,  v3037,  v3125,  v3211,  v3295,  v3377,  v3457,  v3535);
                  uint64_t v365 = sub_100043A40( v357,  v358,  v359,  v360,  v361,  v362,  v363,  v364,  v1154,  v1257,  v1360,  v1463,  v1566,  v1669,  v1771,  v1873,  v1975,  v2076,  v2177,  v2277,  v2376,  v2474,  v2571,  v2667,  v2762,  v2856,  v2948,  v3038,  v3126,  v3212,  v3296,  v3378,  v3458,  v3536,  v3612);
                  uint64_t v373 = sub_1000437F8( v365,  v366,  v367,  v368,  v369,  v370,  v371,  v372,  v1155,  v1258,  v1361,  v1464,  v1567,  v1670,  v1772,  v1874,  v1976,  v2077,  v2178,  v2278,  v2377,  v2475,  v2572,  v2668,  v2763,  v2857,  v2949,  v3039,  v3127,  v3213,  v3297,  v3379,  v3459,  v3537,  v3613,  v3687);
                  uint64_t v381 = sub_10004384C( v373,  v374,  v375,  v376,  v377,  v378,  v379,  v380,  v1156,  v1259,  v1362,  v1465,  v1568,  v1671,  v1773,  v1875,  v1977,  v2078,  v2179,  v2279,  v2378,  v2476,  v2573,  v2669,  v2764,  v2858,  v2950,  v3040,  v3128,  v3214,  v3298,  v3380,  v3460,  v3538,  v3614,  v3688,  v3760);
                  uint64_t v389 = sub_100043A30( v381,  v382,  v383,  v384,  v385,  v386,  v387,  v388,  v1157,  v1260,  v1363,  v1466,  v1569,  v1672,  v1774,  v1876,  v1978,  v2079,  v2180,  v2280,  v2379,  v2477,  v2574,  v2670,  v2765,  v2859,  v2951,  v3041,  v3129,  v3215,  v3299,  v3381,  v3461,  v3539,  v3615,  v3689,  v3761,  v3831);
                  uint64_t v397 = sub_100043A28( v389,  v390,  v391,  v392,  v393,  v394,  v395,  v396,  v1158,  v1261,  v1364,  v1467,  v1570,  v1673,  v1775,  v1877,  v1979,  v2080,  v2181,  v2281,  v2380,  v2478,  v2575,  v2671,  v2766,  v2860,  v2952,  v3042,  v3130,  v3216,  v3300,  v3382,  v3462,  v3540,  v3616,  v3690,  v3762,  v3832,  v3900);
                  uint64_t v405 = sub_100043A20( v397,  v398,  v399,  v400,  v401,  v402,  v403,  v404,  v1159,  v1262,  v1365,  v1468,  v1571,  v1674,  v1776,  v1878,  v1980,  v2081,  v2182,  v2282,  v2381,  v2479,  v2576,  v2672,  v2767,  v2861,  v2953,  v3043,  v3131,  v3217,  v3301,  v3383,  v3463,  v3541,  v3617,  v3691,  v3763,  v3833,  v3901,  v3967);
                  uint64_t v413 = sub_100043A18( v405,  v406,  v407,  v408,  v409,  v410,  v411,  v412,  v1160,  v1263,  v1366,  v1469,  v1572,  v1675,  v1777,  v1879,  v1981,  v2082,  v2183,  v2283,  v2382,  v2480,  v2577,  v2673,  v2768,  v2862,  v2954,  v3044,  v3132,  v3218,  v3302,  v3384,  v3464,  v3542,  v3618,  v3692,  v3764,  v3834,  v3902,  v3968,  v4032);
                  uint64_t v421 = sub_100043A10( v413,  v414,  v415,  v416,  v417,  v418,  v419,  v420,  v1161,  v1264,  v1367,  v1470,  v1573,  v1676,  v1778,  v1880,  v1982,  v2083,  v2184,  v2284,  v2383,  v2481,  v2578,  v2674,  v2769,  v2863,  v2955,  v3045,  v3133,  v3219,  v3303,  v3385,  v3465,  v3543,  v3619,  v3693,  v3765,  v3835,  v3903,  v3969,  v4033,  v4095);
                  uint64_t v429 = sub_100043A08( v421,  v422,  v423,  v424,  v425,  v426,  v427,  v428,  v1162,  v1265,  v1368,  v1471,  v1574,  v1677,  v1779,  v1881,  v1983,  v2084,  v2185,  v2285,  v2384,  v2482,  v2579,  v2675,  v2770,  v2864,  v2956,  v3046,  v3134,  v3220,  v3304,  v3386,  v3466,  v3544,  v3620,  v3694,  v3766,  v3836,  v3904,  v3970,  v4034,  v4096,  v4156);
                  uint64_t v437 = sub_100043A00( v429,  v430,  v431,  v432,  v433,  v434,  v435,  v436,  v1163,  v1266,  v1369,  v1472,  v1575,  v1678,  v1780,  v1882,  v1984,  v2085,  v2186,  v2286,  v2385,  v2483,  v2580,  v2676,  v2771,  v2865,  v2957,  v3047,  v3135,  v3221,  v3305,  v3387,  v3467,  v3545,  v3621,  v3695,  v3767,  v3837,  v3905,  v3971,  v4035,  v4097,  v4157,  v4215);
                  uint64_t v445 = sub_1000439F8( v437,  v438,  v439,  v440,  v441,  v442,  v443,  v444,  v1164,  v1267,  v1370,  v1473,  v1576,  v1679,  v1781,  v1883,  v1985,  v2086,  v2187,  v2287,  v2386,  v2484,  v2581,  v2677,  v2772,  v2866,  v2958,  v3048,  v3136,  v3222,  v3306,  v3388,  v3468,  v3546,  v3622,  v3696,  v3768,  v3838,  v3906,  v3972,  v4036,  v4098,  v4158,  v4216,  v4272);
                  uint64_t v453 = sub_1000439F0( v445,  v446,  v447,  v448,  v449,  v450,  v451,  v452,  v1165,  v1268,  v1371,  v1474,  v1577,  v1680,  v1782,  v1884,  v1986,  v2087,  v2188,  v2288,  v2387,  v2485,  v2582,  v2678,  v2773,  v2867,  v2959,  v3049,  v3137,  v3223,  v3307,  v3389,  v3469,  v3547,  v3623,  v3697,  v3769,  v3839,  v3907,  v3973,  v4037,  v4099,  v4159,  v4217,  v4273,  v4327);
                  uint64_t v461 = sub_1000439E8( v453,  v454,  v455,  v456,  v457,  v458,  v459,  v460,  v1166,  v1269,  v1372,  v1475,  v1578,  v1681,  v1783,  v1885,  v1987,  v2088,  v2189,  v2289,  v2388,  v2486,  v2583,  v2679,  v2774,  v2868,  v2960,  v3050,  v3138,  v3224,  v3308,  v3390,  v3470,  v3548,  v3624,  v3698,  v3770,  v3840,  v3908,  v3974,  v4038,  v4100,  v4160,  v4218,  v4274,  v4328,  v4380);
                  uint64_t v469 = sub_1000439E0( v461,  v462,  v463,  v464,  v465,  v466,  v467,  v468,  v1167,  v1270,  v1373,  v1476,  v1579,  v1682,  v1784,  v1886,  v1988,  v2089,  v2190,  v2290,  v2389,  v2487,  v2584,  v2680,  v2775,  v2869,  v2961,  v3051,  v3139,  v3225,  v3309,  v3391,  v3471,  v3549,  v3625,  v3699,  v3771,  v3841,  v3909,  v3975,  v4039,  v4101,  v4161,  v4219,  v4275,  v4329,  v4381,  v4431);
                  uint64_t v477 = sub_1000439D8( v469,  v470,  v471,  v472,  v473,  v474,  v475,  v476,  v1168,  v1271,  v1374,  v1477,  v1580,  v1683,  v1785,  v1887,  v1989,  v2090,  v2191,  v2291,  v2390,  v2488,  v2585,  v2681,  v2776,  v2870,  v2962,  v3052,  v3140,  v3226,  v3310,  v3392,  v3472,  v3550,  v3626,  v3700,  v3772,  v3842,  v3910,  v3976,  v4040,  v4102,  v4162,  v4220,  v4276,  v4330,  v4382,  v4432,  v4480);
                  uint64_t v485 = sub_1000439D0( v477,  v478,  v479,  v480,  v481,  v482,  v483,  v484,  v1169,  v1272,  v1375,  v1478,  v1581,  v1684,  v1786,  v1888,  v1990,  v2091,  v2192,  v2292,  v2391,  v2489,  v2586,  v2682,  v2777,  v2871,  v2963,  v3053,  v3141,  v3227,  v3311,  v3393,  v3473,  v3551,  v3627,  v3701,  v3773,  v3843,  v3911,  v3977,  v4041,  v4103,  v4163,  v4221,  v4277,  v4331,  v4383,  v4433,  v4481,
                           v4527);
                  uint64_t v493 = sub_1000439C8( v485,  v486,  v487,  v488,  v489,  v490,  v491,  v492,  v1170,  v1273,  v1376,  v1479,  v1582,  v1685,  v1787,  v1889,  v1991,  v2092,  v2193,  v2293,  v2392,  v2490,  v2587,  v2683,  v2778,  v2872,  v2964,  v3054,  v3142,  v3228,  v3312,  v3394,  v3474,  v3552,  v3628,  v3702,  v3774,  v3844,  v3912,  v3978,  v4042,  v4104,  v4164,  v4222,  v4278,  v4332,  v4384,  v4434,  v4482,
                           v4528,
                           v4572);
                  uint64_t v501 = sub_1000439C0( v493,  v494,  v495,  v496,  v497,  v498,  v499,  v500,  v1171,  v1274,  v1377,  v1480,  v1583,  v1686,  v1788,  v1890,  v1992,  v2093,  v2194,  v2294,  v2393,  v2491,  v2588,  v2684,  v2779,  v2873,  v2965,  v3055,  v3143,  v3229,  v3313,  v3395,  v3475,  v3553,  v3629,  v3703,  v3775,  v3845,  v3913,  v3979,  v4043,  v4105,  v4165,  v4223,  v4279,  v4333,  v4385,  v4435,  v4483,
                           v4529,
                           v4573,
                           v4615);
                  uint64_t v509 = sub_1000439B8( v501,  v502,  v503,  v504,  v505,  v506,  v507,  v508,  v1172,  v1275,  v1378,  v1481,  v1584,  v1687,  v1789,  v1891,  v1993,  v2094,  v2195,  v2295,  v2394,  v2492,  v2589,  v2685,  v2780,  v2874,  v2966,  v3056,  v3144,  v3230,  v3314,  v3396,  v3476,  v3554,  v3630,  v3704,  v3776,  v3846,  v3914,  v3980,  v4044,  v4106,  v4166,  v4224,  v4280,  v4334,  v4386,  v4436,  v4484,
                           v4530,
                           v4574,
                           v4616,
                           v4656);
                  uint64_t v517 = sub_1000439B0( v509,  v510,  v511,  v512,  v513,  v514,  v515,  v516,  v1173,  v1276,  v1379,  v1482,  v1585,  v1688,  v1790,  v1892,  v1994,  v2095,  v2196,  v2296,  v2395,  v2493,  v2590,  v2686,  v2781,  v2875,  v2967,  v3057,  v3145,  v3231,  v3315,  v3397,  v3477,  v3555,  v3631,  v3705,  v3777,  v3847,  v3915,  v3981,  v4045,  v4107,  v4167,  v4225,  v4281,  v4335,  v4387,  v4437,  v4485,
                           v4531,
                           v4575,
                           v4617,
                           v4657,
                           v4695);
                  uint64_t v525 = sub_1000439A8( v517,  v518,  v519,  v520,  v521,  v522,  v523,  v524,  v1174,  v1277,  v1380,  v1483,  v1586,  v1689,  v1791,  v1893,  v1995,  v2096,  v2197,  v2297,  v2396,  v2494,  v2591,  v2687,  v2782,  v2876,  v2968,  v3058,  v3146,  v3232,  v3316,  v3398,  v3478,  v3556,  v3632,  v3706,  v3778,  v3848,  v3916,  v3982,  v4046,  v4108,  v4168,  v4226,  v4282,  v4336,  v4388,  v4438,  v4486,
                           v4532,
                           v4576,
                           v4618,
                           v4658,
                           v4696,
                           v4732);
                  uint64_t v533 = sub_1000439A0( v525,  v526,  v527,  v528,  v529,  v530,  v531,  v532,  v1175,  v1278,  v1381,  v1484,  v1587,  v1690,  v1792,  v1894,  v1996,  v2097,  v2198,  v2298,  v2397,  v2495,  v2592,  v2688,  v2783,  v2877,  v2969,  v3059,  v3147,  v3233,  v3317,  v3399,  v3479,  v3557,  v3633,  v3707,  v3779,  v3849,  v3917,  v3983,  v4047,  v4109,  v4169,  v4227,  v4283,  v4337,  v4389,  v4439,  v4487,
                           v4533,
                           v4577,
                           v4619,
                           v4659,
                           v4697,
                           v4733,
                           v4767);
                  uint64_t v541 = sub_100043998( v533,  v534,  v535,  v536,  v537,  v538,  v539,  v540,  v1176,  v1279,  v1382,  v1485,  v1588,  v1691,  v1793,  v1895,  v1997,  v2098,  v2199,  v2299,  v2398,  v2496,  v2593,  v2689,  v2784,  v2878,  v2970,  v3060,  v3148,  v3234,  v3318,  v3400,  v3480,  v3558,  v3634,  v3708,  v3780,  v3850,  v3918,  v3984,  v4048,  v4110,  v4170,  v4228,  v4284,  v4338,  v4390,  v4440,  v4488,
                           v4534,
                           v4578,
                           v4620,
                           v4660,
                           v4698,
                           v4734,
                           v4768,
                           v4800);
                  uint64_t v549 = sub_100043990( v541,  v542,  v543,  v544,  v545,  v546,  v547,  v548,  v1177,  v1280,  v1383,  v1486,  v1589,  v1692,  v1794,  v1896,  v1998,  v2099,  v2200,  v2300,  v2399,  v2497,  v2594,  v2690,  v2785,  v2879,  v2971,  v3061,  v3149,  v3235,  v3319,  v3401,  v3481,  v3559,  v3635,  v3709,  v3781,  v3851,  v3919,  v3985,  v4049,  v4111,  v4171,  v4229,  v4285,  v4339,  v4391,  v4441,  v4489,
                           v4535,
                           v4579,
                           v4621,
                           v4661,
                           v4699,
                           v4735,
                           v4769,
                           v4801,
                           v4831);
                  uint64_t v557 = sub_100043988( v549,  v550,  v551,  v552,  v553,  v554,  v555,  v556,  v1178,  v1281,  v1384,  v1487,  v1590,  v1693,  v1795,  v1897,  v1999,  v2100,  v2201,  v2301,  v2400,  v2498,  v2595,  v2691,  v2786,  v2880,  v2972,  v3062,  v3150,  v3236,  v3320,  v3402,  v3482,  v3560,  v3636,  v3710,  v3782,  v3852,  v3920,  v3986,  v4050,  v4112,  v4172,  v4230,  v4286,  v4340,  v4392,  v4442,  v4490,
                           v4536,
                           v4580,
                           v4622,
                           v4662,
                           v4700,
                           v4736,
                           v4770,
                           v4802,
                           v4832,
                           v4860);
                  uint64_t v565 = sub_100043980( v557,  v558,  v559,  v560,  v561,  v562,  v563,  v564,  v1179,  v1282,  v1385,  v1488,  v1591,  v1694,  v1796,  v1898,  v2000,  v2101,  v2202,  v2302,  v2401,  v2499,  v2596,  v2692,  v2787,  v2881,  v2973,  v3063,  v3151,  v3237,  v3321,  v3403,  v3483,  v3561,  v3637,  v3711,  v3783,  v3853,  v3921,  v3987,  v4051,  v4113,  v4173,  v4231,  v4287,  v4341,  v4393,  v4443,  v4491,
                           v4537,
                           v4581,
                           v4623,
                           v4663,
                           v4701,
                           v4737,
                           v4771,
                           v4803,
                           v4833,
                           v4861,
                           v4887);
                  uint64_t v573 = sub_100043978( v565,  v566,  v567,  v568,  v569,  v570,  v571,  v572,  v1180,  v1283,  v1386,  v1489,  v1592,  v1695,  v1797,  v1899,  v2001,  v2102,  v2203,  v2303,  v2402,  v2500,  v2597,  v2693,  v2788,  v2882,  v2974,  v3064,  v3152,  v3238,  v3322,  v3404,  v3484,  v3562,  v3638,  v3712,  v3784,  v3854,  v3922,  v3988,  v4052,  v4114,  v4174,  v4232,  v4288,  v4342,  v4394,  v4444,  v4492,
                           v4538,
                           v4582,
                           v4624,
                           v4664,
                           v4702,
                           v4738,
                           v4772,
                           v4804,
                           v4834,
                           v4862,
                           v4888,
                           v4912);
                  uint64_t v581 = sub_100043970( v573,  v574,  v575,  v576,  v577,  v578,  v579,  v580,  v1181,  v1284,  v1387,  v1490,  v1593,  v1696,  v1798,  v1900,  v2002,  v2103,  v2204,  v2304,  v2403,  v2501,  v2598,  v2694,  v2789,  v2883,  v2975,  v3065,  v3153,  v3239,  v3323,  v3405,  v3485,  v3563,  v3639,  v3713,  v3785,  v3855,  v3923,  v3989,  v4053,  v4115,  v4175,  v4233,  v4289,  v4343,  v4395,  v4445,  v4493,
                           v4539,
                           v4583,
                           v4625,
                           v4665,
                           v4703,
                           v4739,
                           v4773,
                           v4805,
                           v4835,
                           v4863,
                           v4889,
                           v4913,
                           v4935);
                  uint64_t v589 = sub_100043968( v581,  v582,  v583,  v584,  v585,  v586,  v587,  v588,  v1182,  v1285,  v1388,  v1491,  v1594,  v1697,  v1799,  v1901,  v2003,  v2104,  v2205,  v2305,  v2404,  v2502,  v2599,  v2695,  v2790,  v2884,  v2976,  v3066,  v3154,  v3240,  v3324,  v3406,  v3486,  v3564,  v3640,  v3714,  v3786,  v3856,  v3924,  v3990,  v4054,  v4116,  v4176,  v4234,  v4290,  v4344,  v4396,  v4446,  v4494,
                           v4540,
                           v4584,
                           v4626,
                           v4666,
                           v4704,
                           v4740,
                           v4774,
                           v4806,
                           v4836,
                           v4864,
                           v4890,
                           v4914,
                           v4936,
                           v4956);
                  uint64_t v597 = sub_100043960( v589,  v590,  v591,  v592,  v593,  v594,  v595,  v596,  v1183,  v1286,  v1389,  v1492,  v1595,  v1698,  v1800,  v1902,  v2004,  v2105,  v2206,  v2306,  v2405,  v2503,  v2600,  v2696,  v2791,  v2885,  v2977,  v3067,  v3155,  v3241,  v3325,  v3407,  v3487,  v3565,  v3641,  v3715,  v3787,  v3857,  v3925,  v3991,  v4055,  v4117,  v4177,  v4235,  v4291,  v4345,  v4397,  v4447,  v4495,
                           v4541,
                           v4585,
                           v4627,
                           v4667,
                           v4705,
                           v4741,
                           v4775,
                           v4807,
                           v4837,
                           v4865,
                           v4891,
                           v4915,
                           v4937,
                           v4957);
                  uint64_t v605 = sub_100043958( v597,  v598,  v599,  v600,  v601,  v602,  v603,  v604,  v1184,  v1287,  v1390,  v1493,  v1596,  v1699,  v1801,  v1903,  v2005,  v2106,  v2207,  v2307,  v2406,  v2504,  v2601,  v2697,  v2792,  v2886,  v2978,  v3068,  v3156,  v3242,  v3326,  v3408,  v3488,  v3566,  v3642,  v3716,  v3788,  v3858,  v3926,  v3992,  v4056,  v4118,  v4178,  v4236,  v4292,  v4346,  v4398,  v4448,  v4496,
                           v4542,
                           v4586,
                           v4628,
                           v4668,
                           v4706,
                           v4742,
                           v4776,
                           v4808,
                           v4838,
                           v4866,
                           v4892,
                           v4916,
                           v4938,
                           v4958);
                  uint64_t v613 = sub_100043950( v605,  v606,  v607,  v608,  v609,  v610,  v611,  v612,  v1185,  v1288,  v1391,  v1494,  v1597,  v1700,  v1802,  v1904,  v2006,  v2107,  v2208,  v2308,  v2407,  v2505,  v2602,  v2698,  v2793,  v2887,  v2979,  v3069,  v3157,  v3243,  v3327,  v3409,  v3489,  v3567,  v3643,  v3717,  v3789,  v3859,  v3927,  v3993,  v4057,  v4119,  v4179,  v4237,  v4293,  v4347,  v4399,  v4449,  v4497,
                           v4543,
                           v4587,
                           v4629,
                           v4669,
                           v4707,
                           v4743,
                           v4777,
                           v4809,
                           v4839,
                           v4867,
                           v4893,
                           v4917,
                           v4939,
                           v4959);
                  uint64_t v621 = sub_100043948( v613,  v614,  v615,  v616,  v617,  v618,  v619,  v620,  v1186,  v1289,  v1392,  v1495,  v1598,  v1701,  v1803,  v1905,  v2007,  v2108,  v2209,  v2309,  v2408,  v2506,  v2603,  v2699,  v2794,  v2888,  v2980,  v3070,  v3158,  v3244,  v3328,  v3410,  v3490,  v3568,  v3644,  v3718,  v3790,  v3860,  v3928,  v3994,  v4058,  v4120,  v4180,  v4238,  v4294,  v4348,  v4400,  v4450,  v4498,
                           v4544,
                           v4588,
                           v4630,
                           v4670,
                           v4708,
                           v4744,
                           v4778,
                           v4810,
                           v4840,
                           v4868,
                           v4894,
                           v4918,
                           v4940,
                           v4960);
                  uint64_t v629 = sub_100043940( v621,  v622,  v623,  v624,  v625,  v626,  v627,  v628,  v1187,  v1290,  v1393,  v1496,  v1599,  v1702,  v1804,  v1906,  v2008,  v2109,  v2210,  v2310,  v2409,  v2507,  v2604,  v2700,  v2795,  v2889,  v2981,  v3071,  v3159,  v3245,  v3329,  v3411,  v3491,  v3569,  v3645,  v3719,  v3791,  v3861,  v3929,  v3995,  v4059,  v4121,  v4181,  v4239,  v4295,  v4349,  v4401,  v4451,  v4499,
                           v4545,
                           v4589,
                           v4631,
                           v4671,
                           v4709,
                           v4745,
                           v4779,
                           v4811,
                           v4841,
                           v4869,
                           v4895,
                           v4919,
                           v4941,
                           v4961);
                  uint64_t v637 = sub_100043E48( v629,  v630,  v631,  v632,  v633,  v634,  v635,  v636,  v1188,  v1291,  v1394,  v1497,  v1600,  v1703,  v1805,  v1907,  v2009,  v2110,  v2211,  v2311,  v2410,  v2508,  v2605,  v2701,  v2796,  v2890,  v2982,  v3072,  v3160,  v3246,  v3330,  v3412,  v3492,  v3570,  v3646,  v3720,  v3792,  v3862,  v3930,  v3996,  v4060,  v4122,  v4182,  v4240,  v4296,  v4350,  v4402,  v4452,  v4500,
                           v4546,
                           v4590,
                           v4632,
                           v4672,
                           v4710,
                           v4746,
                           v4780,
                           v4812,
                           v4842,
                           v4870,
                           v4896,
                           v4920,
                           v4942,
                           v4962);
                  uint64_t v645 = sub_100043E40( v637,  v638,  v639,  v640,  v641,  v642,  v643,  v644,  v1189,  v1292,  v1395,  v1498,  v1601,  v1704,  v1806,  v1908,  v2010,  v2111,  v2212,  v2312,  v2411,  v2509,  v2606,  v2702,  v2797,  v2891,  v2983,  v3073,  v3161,  v3247,  v3331,  v3413,  v3493,  v3571,  v3647,  v3721,  v3793,  v3863,  v3931,  v3997,  v4061,  v4123,  v4183,  v4241,  v4297,  v4351,  v4403,  v4453,  v4501,
                           v4547,
                           v4591,
                           v4633,
                           v4673,
                           v4711,
                           v4747,
                           v4781,
                           v4813,
                           v4843,
                           v4871,
                           v4897,
                           v4921,
                           v4943,
                           v4963);
                  uint64_t v653 = sub_100043E38( v645,  v646,  v647,  v648,  v649,  v650,  v651,  v652,  v1190,  v1293,  v1396,  v1499,  v1602,  v1705,  v1807,  v1909,  v2011,  v2112,  v2213,  v2313,  v2412,  v2510,  v2607,  v2703,  v2798,  v2892,  v2984,  v3074,  v3162,  v3248,  v3332,  v3414,  v3494,  v3572,  v3648,  v3722,  v3794,  v3864,  v3932,  v3998,  v4062,  v4124,  v4184,  v4242,  v4298,  v4352,  v4404,  v4454,  v4502,
                           v4548,
                           v4592,
                           v4634,
                           v4674,
                           v4712,
                           v4748,
                           v4782,
                           v4814,
                           v4844,
                           v4872,
                           v4898,
                           v4922,
                           v4944,
                           v4964);
                  sub_100043E30( v653,  v654,  v655,  v656,  v657,  v658,  v659,  v660,  v1191,  v1294,  v1397,  v1500,  v1603,  v1706,  v1808,  v1910,  v2012,  v2113,  v2214,  v2314,  v2413,  v2511,  v2608,  v2704,  v2799,  v2893,  v2985,  v3075,  v3163,  v3249,  v3333,  v3415,  v3495,  v3573,  v3649,  v3723,  v3795,  v3865,  v3933,  v3999,  v4063,  v4125,  v4185,  v4243,  v4299,  v4353,  v4405,  v4455,  v4503,
                    v4549,
                    v4593,
                    v4635,
                    v4675,
                    v4713,
                    v4749,
                    v4783,
                    v4815,
                    v4845,
                    v4873,
                    v4899,
                    v4923,
                    v4945,
                    v4965);
                  sub_100043E28();
                  sub_100043E20();
                  sub_100044828();
                  sub_100044820();
                  sub_100044818();
                  sub_100044810();
                  sub_100044808();
                  sub_100044800();
                  sub_100046398();
                  sub_1000463B8();
                  sub_100043938();
                  sub_100043930();
                  sub_100043928();
                  sub_100043920();
                  sub_100043DB4();
                  sub_100043DAC();
                  sub_100043EF0();
                  sub_100043E50();
                  sub_10000F308(*(uint64_t (**)(void))(v53 + 8));
                }

                else
                {
                  sub_1000421EC(v282);
                  sub_1000447AC();
                  sub_100044830();
                  sub_1000445E4();
                  uint64_t v661 = sub_10000F3F4();
                  sub_1000431B8(v661, &qword_10006A388);
                  uint64_t v670 = sub_100043F00( v662,  v663,  v664,  v665,  v666,  v667,  v668,  v669,  v1145,  v1248,  v1351,  v1454,  v1557);
                  sub_1000460F0( v670,  v671,  v672,  v673,  v674,  v675,  v676,  v677,  v1192,  v1295,  v1398,  v1501,  v1604,  v1660,  v1762,  v1864);
                  sub_100043B64();
                  sub_1000435DC();
                  sub_100042E4C();
                  sub_10000F508(v23, *(uint64_t (**)(uint64_t, uint64_t))(v15 + 8));
                  sub_100043A38();
                  sub_100043910(v1966, MEMORY[8]);
                  sub_100043B04();
                  uint64_t v678 = sub_10000F404();
                  uint64_t v686 = sub_1000435E4( v678,  v679,  v680,  v681,  v682,  v683,  v684,  v685,  v1193,  v1296,  v1399,  v1502,  v1605,  v1707,  v1809,  v1911,  v1966,  v2067);
                  uint64_t v694 = sub_100043900( v686,  v687,  v688,  v689,  v690,  v691,  v692,  v693,  v1194,  v1297,  v1400,  v1503,  v1606,  v1708,  v1810,  v1912,  v2013,  v2114,  v2168);
                  uint64_t v702 = sub_100043AE4( v694,  v695,  v696,  v697,  v698,  v699,  v700,  v701,  v1195,  v1298,  v1401,  v1504,  v1607,  v1709,  v1811,  v1913,  v2014,  v2115,  v2215,  v2268);
                  uint64_t v710 = sub_100044AF4( v702,  v703,  v704,  v705,  v706,  v707,  v708,  v709,  v1196,  v1299,  v1402,  v1505,  v1608,  v1710,  v1812,  v1914,  v2015,  v2116,  v2216,  v2315,  v2367);
                  sub_100044940( v710,  v711,  v712,  v713,  v714,  v715,  v716,  v717,  v1197,  v1300,  v1403,  v1506,  v1609,  v1711,  v1813,  v1915,  v2016,  v2117,  v2217,  v2316,  v2414,  v2465);
                  uint64_t v718 = sub_10000F3F4();
                  uint64_t v726 = sub_100043EE8( v718,  v719,  v720,  v721,  v722,  v723,  v724,  v725,  v1198,  v1301,  v1404,  v1507,  v1610,  v1712,  v1814,  v1916,  v2017,  v2118,  v2218,  v2317,  v2415,  v2512,  v2562,  v2658);
                  uint64_t v734 = sub_100043F40( v726,  v727,  v728,  v729,  v730,  v731,  v732,  v733,  v1199,  v1302,  v1405,  v1508,  v1611,  v1713,  v1815,  v1917,  v2018,  v2119,  v2219,  v2318,  v2416,  v2513,  v2609,  v2705,  v2753);
                  uint64_t v742 = sub_1000436E8( v734,  v735,  v736,  v737,  v738,  v739,  v740,  v741,  v1200,  v1303,  v1406,  v1509,  v1612,  v1714,  v1816,  v1918,  v2019,  v2120,  v2220,  v2319,  v2417,  v2514,  v2610,  v2706,  v2800,  v2847,  v2940);
                  uint64_t v750 = sub_1000436C4( v742,  v743,  v744,  v745,  v746,  v747,  v748,  v749,  v1201,  v1304,  v1407,  v1510,  v1613,  v1715,  v1817,  v1919,  v2020,  v2121,  v2221,  v2320,  v2418,  v2515,  v2611,  v2707,  v2801,  v2894,  v2986,  v3031);
                  uint64_t v758 = sub_100043658( v750,  v751,  v752,  v753,  v754,  v755,  v756,  v757,  v1202,  v1305,  v1408,  v1511,  v1614,  v1716,  v1818,  v1920,  v2021,  v2122,  v2222,  v2321,  v2419,  v2516,  v2612,  v2708,  v2802,  v2895,  v2987,  v3076,  v3120,  v3207);
                  uint64_t v766 = sub_10004361C( v758,  v759,  v760,  v761,  v762,  v763,  v764,  v765,  v1203,  v1306,  v1409,  v1512,  v1615,  v1717,  v1819,  v1921,  v2022,  v2123,  v2223,  v2322,  v2420,  v2517,  v2613,  v2709,  v2803,  v2896,  v2988,  v3077,  v3164,  v3250,  v3292,  v3375);
                  uint64_t v774 = sub_100043A48( v766,  v767,  v768,  v769,  v770,  v771,  v772,  v773,  v1204,  v1307,  v1410,  v1513,  v1616,  v1718,  v1820,  v1922,  v2023,  v2124,  v2224,  v2323,  v2421,  v2518,  v2614,  v2710,  v2804,  v2897,  v2989,  v3078,  v3165,  v3251,  v3334,  v3416,  v3456,  v3535);
                  uint64_t v782 = sub_100043A40( v774,  v775,  v776,  v777,  v778,  v779,  v780,  v781,  v1205,  v1308,  v1411,  v1514,  v1617,  v1719,  v1821,  v1923,  v2024,  v2125,  v2225,  v2324,  v2422,  v2519,  v2615,  v2711,  v2805,  v2898,  v2990,  v3079,  v3166,  v3252,  v3335,  v3417,  v3496,  v3574,  v3612);
                  uint64_t v790 = sub_10004384C( v782,  v783,  v784,  v785,  v786,  v787,  v788,  v789,  v1206,  v1309,  v1412,  v1515,  v1618,  v1720,  v1822,  v1924,  v2025,  v2126,  v2226,  v2325,  v2423,  v2520,  v2616,  v2712,  v2806,  v2899,  v2991,  v3080,  v3167,  v3253,  v3336,  v3418,  v3497,  v3575,  v3650,  v3687,  v3760);
                  uint64_t v798 = sub_100043A28( v790,  v791,  v792,  v793,  v794,  v795,  v796,  v797,  v1207,  v1310,  v1413,  v1516,  v1619,  v1721,  v1823,  v1925,  v2026,  v2127,  v2227,  v2326,  v2424,  v2521,  v2617,  v2713,  v2807,  v2900,  v2992,  v3081,  v3168,  v3254,  v3337,  v3419,  v3498,  v3576,  v3651,  v3724,  v3796,  v3831,  v3900);
                  uint64_t v806 = sub_100043A18( v798,  v799,  v800,  v801,  v802,  v803,  v804,  v805,  v1208,  v1311,  v1414,  v1517,  v1620,  v1722,  v1824,  v1926,  v2027,  v2128,  v2228,  v2327,  v2425,  v2522,  v2618,  v2714,  v2808,  v2901,  v2993,  v3082,  v3169,  v3255,  v3338,  v3420,  v3499,  v3577,  v3652,  v3725,  v3797,  v3866,  v3934,  v3967,  v4032);
                  uint64_t v814 = sub_100043A08( v806,  v807,  v808,  v809,  v810,  v811,  v812,  v813,  v1209,  v1312,  v1415,  v1518,  v1621,  v1723,  v1825,  v1927,  v2028,  v2129,  v2229,  v2328,  v2426,  v2523,  v2619,  v2715,  v2809,  v2902,  v2994,  v3083,  v3170,  v3256,  v3339,  v3421,  v3500,  v3578,  v3653,  v3726,  v3798,  v3867,  v3935,  v4000,  v4064,  v4095,  v4156);
                  uint64_t v822 = sub_1000439F8( v814,  v815,  v816,  v817,  v818,  v819,  v820,  v821,  v1210,  v1313,  v1416,  v1519,  v1622,  v1724,  v1826,  v1928,  v2029,  v2130,  v2230,  v2329,  v2427,  v2524,  v2620,  v2716,  v2810,  v2903,  v2995,  v3084,  v3171,  v3257,  v3340,  v3422,  v3501,  v3579,  v3654,  v3727,  v3799,  v3868,  v3936,  v4001,  v4065,  v4126,  v4186,  v4215,  v4272);
                  uint64_t v830 = sub_1000439E8( v822,  v823,  v824,  v825,  v826,  v827,  v828,  v829,  v1211,  v1314,  v1417,  v1520,  v1623,  v1725,  v1827,  v1929,  v2030,  v2131,  v2231,  v2330,  v2428,  v2525,  v2621,  v2717,  v2811,  v2904,  v2996,  v3085,  v3172,  v3258,  v3341,  v3423,  v3502,  v3580,  v3655,  v3728,  v3800,  v3869,  v3937,  v4002,  v4066,  v4127,  v4187,  v4244,  v4300,  v4327,  v4380);
                  uint64_t v838 = sub_1000439E0( v830,  v831,  v832,  v833,  v834,  v835,  v836,  v837,  v1212,  v1315,  v1418,  v1521,  v1624,  v1726,  v1828,  v1930,  v2031,  v2132,  v2232,  v2331,  v2429,  v2526,  v2622,  v2718,  v2812,  v2905,  v2997,  v3086,  v3173,  v3259,  v3342,  v3424,  v3503,  v3581,  v3656,  v3729,  v3801,  v3870,  v3938,  v4003,  v4067,  v4128,  v4188,  v4245,  v4301,  v4354,  v4406,  v4431);
                  sub_1000439D0( v838,  v839,  v840,  v841,  v842,  v843,  v844,  v845,  v1213,  v1316,  v1419,  v1522,  v1625,  v1727,  v1829,  v1931,  v2032,  v2133,  v2233,  v2332,  v2430,  v2527,  v2623,  v2719,  v2813,  v2906,  v2998,  v3087,  v3174,  v3260,  v3343,  v3425,  v3504,  v3582,  v3657,  v3730,  v3802,  v3871,  v3939,  v4004,  v4068,  v4129,  v4189,  v4246,  v4302,  v4355,  v4407,  v4456,  v4480,
                    v4527);
                  sub_10000F4EC();
                  uint64_t v846 = sub_10000F338();
                  uint64_t v854 = sub_1000439B8( v846,  v847,  v848,  v849,  v850,  v851,  v852,  v853,  v1214,  v1317,  v1420,  v1523,  v1626,  v1728,  v1830,  v1932,  v2033,  v2134,  v2234,  v2333,  v2431,  v2528,  v2624,  v2720,  v2814,  v2907,  v2999,  v3088,  v3175,  v3261,  v3344,  v3426,  v3505,  v3583,  v3658,  v3731,  v3803,  v3872,  v3940,  v4005,  v4069,  v4130,  v4190,  v4247,  v4303,  v4356,  v4408,  v4457,  v4504,
                           v4550,
                           v4572,
                           v4615,
                           v4656);
                  sub_1000439A8( v854,  v855,  v856,  v857,  v858,  v859,  v860,  v861,  v1215,  v1318,  v1421,  v1524,  v1627,  v1729,  v1831,  v1933,  v2034,  v2135,  v2235,  v2334,  v2432,  v2529,  v2625,  v2721,  v2815,  v2908,  v3000,  v3089,  v3176,  v3262,  v3345,  v3427,  v3506,  v3584,  v3659,  v3732,  v3804,  v3873,  v3941,  v4006,  v4070,  v4131,  v4191,  v4248,  v4304,  v4357,  v4409,  v4458,  v4505,
                    v4551,
                    v4594,
                    v4636,
                    v4676,
                    v4695,
                    v4732);
                  uint64_t v862 = sub_10000F3FC();
                  uint64_t v870 = sub_1000436F0( v862,  v863,  v864,  v865,  v866,  v867,  v868,  v869,  v1216,  v1319,  v1422,  v1525,  v1628,  v1730,  v1832,  v1934,  v2035,  v2136,  v2236,  v2335,  v2433,  v2530,  v2626,  v2722,  v2816,  v2909);
                  uint64_t v878 = sub_100043624( v870,  v871,  v872,  v873,  v874,  v875,  v876,  v877,  v1217,  v1320,  v1423,  v1526,  v1629,  v1731,  v1833,  v1935,  v2036,  v2137,  v2237,  v2336,  v2434,  v2531,  v2627,  v2723,  v2817,  v2910,  v3001,  v3090,  v3177);
                  uint64_t v886 = sub_100043660( v878,  v879,  v880,  v881,  v882,  v883,  v884,  v885,  v1218,  v1321,  v1424,  v1527,  v1630,  v1732,  v1834,  v1936,  v2037,  v2138,  v2238,  v2337,  v2435,  v2532,  v2628,  v2724,  v2818,  v2911,  v3002,  v3091,  v3178,  v3263,  v3346);
                  uint64_t v894 = sub_100043614( v886,  v887,  v888,  v889,  v890,  v891,  v892,  v893,  v1219,  v1322,  v1425,  v1528,  v1631,  v1733,  v1835,  v1937,  v2038,  v2139,  v2239,  v2338,  v2436,  v2533,  v2629,  v2725,  v2819,  v2912,  v3003,  v3092,  v3179,  v3264,  v3347,  v3428,  v3507);
                  uint64_t v902 = sub_1000437F8( v894,  v895,  v896,  v897,  v898,  v899,  v900,  v901,  v1220,  v1323,  v1426,  v1529,  v1632,  v1734,  v1836,  v1938,  v2039,  v2140,  v2240,  v2339,  v2437,  v2534,  v2630,  v2726,  v2820,  v2913,  v3004,  v3093,  v3180,  v3265,  v3348,  v3429,  v3508,  v3585,  v3660,  v3733);
                  uint64_t v910 = sub_100043A30( v902,  v903,  v904,  v905,  v906,  v907,  v908,  v909,  v1221,  v1324,  v1427,  v1530,  v1633,  v1735,  v1837,  v1939,  v2040,  v2141,  v2241,  v2340,  v2438,  v2535,  v2631,  v2727,  v2821,  v2914,  v3005,  v3094,  v3181,  v3266,  v3349,  v3430,  v3509,  v3586,  v3661,  v3734,  v3805,  v3874);
                  uint64_t v918 = sub_100043A20( v910,  v911,  v912,  v913,  v914,  v915,  v916,  v917,  v1222,  v1325,  v1428,  v1531,  v1634,  v1736,  v1838,  v1940,  v2041,  v2142,  v2242,  v2341,  v2439,  v2536,  v2632,  v2728,  v2822,  v2915,  v3006,  v3095,  v3182,  v3267,  v3350,  v3431,  v3510,  v3587,  v3662,  v3735,  v3806,  v3875,  v3942,  v4007);
                  uint64_t v926 = sub_100043A10( v918,  v919,  v920,  v921,  v922,  v923,  v924,  v925,  v1223,  v1326,  v1429,  v1532,  v1635,  v1737,  v1839,  v1941,  v2042,  v2143,  v2243,  v2342,  v2440,  v2537,  v2633,  v2729,  v2823,  v2916,  v3007,  v3096,  v3183,  v3268,  v3351,  v3432,  v3511,  v3588,  v3663,  v3736,  v3807,  v3876,  v3943,  v4008,  v4071,  v4132);
                  uint64_t v934 = sub_100043A00( v926,  v927,  v928,  v929,  v930,  v931,  v932,  v933,  v1224,  v1327,  v1430,  v1533,  v1636,  v1738,  v1840,  v1942,  v2043,  v2144,  v2244,  v2343,  v2441,  v2538,  v2634,  v2730,  v2824,  v2917,  v3008,  v3097,  v3184,  v3269,  v3352,  v3433,  v3512,  v3589,  v3664,  v3737,  v3808,  v3877,  v3944,  v4009,  v4072,  v4133,  v4192,  v4249);
                  uint64_t v942 = sub_1000439F0( v934,  v935,  v936,  v937,  v938,  v939,  v940,  v941,  v1225,  v1328,  v1431,  v1534,  v1637,  v1739,  v1841,  v1943,  v2044,  v2145,  v2245,  v2344,  v2442,  v2539,  v2635,  v2731,  v2825,  v2918,  v3009,  v3098,  v3185,  v3270,  v3353,  v3434,  v3513,  v3590,  v3665,  v3738,  v3809,  v3878,  v3945,  v4010,  v4073,  v4134,  v4193,  v4250,  v4305,  v4358);
                  uint64_t v950 = sub_1000439D8( v942,  v943,  v944,  v945,  v946,  v947,  v948,  v949,  v1226,  v1329,  v1432,  v1535,  v1638,  v1740,  v1842,  v1944,  v2045,  v2146,  v2246,  v2345,  v2443,  v2540,  v2636,  v2732,  v2826,  v2919,  v3010,  v3099,  v3186,  v3271,  v3354,  v3435,  v3514,  v3591,  v3666,  v3739,  v3810,  v3879,  v3946,  v4011,  v4074,  v4135,  v4194,  v4251,  v4306,  v4359,  v4410,  v4459,  v4506);
                  uint64_t v958 = sub_1000439C8( v950,  v951,  v952,  v953,  v954,  v955,  v956,  v957,  v1227,  v1330,  v1433,  v1536,  v1639,  v1741,  v1843,  v1945,  v2046,  v2147,  v2247,  v2346,  v2444,  v2541,  v2637,  v2733,  v2827,  v2920,  v3011,  v3100,  v3187,  v3272,  v3355,  v3436,  v3515,  v3592,  v3667,  v3740,  v3811,  v3880,  v3947,  v4012,  v4075,  v4136,  v4195,  v4252,  v4307,  v4360,  v4411,  v4460,  v4507,
                           v4552,
                           v4595);
                  uint64_t v966 = sub_1000439C0( v958,  v959,  v960,  v961,  v962,  v963,  v964,  v965,  v1228,  v1331,  v1434,  v1537,  v1640,  v1742,  v1844,  v1946,  v2047,  v2148,  v2248,  v2347,  v2445,  v2542,  v2638,  v2734,  v2828,  v2921,  v3012,  v3101,  v3188,  v3273,  v3356,  v3437,  v3516,  v3593,  v3668,  v3741,  v3812,  v3881,  v3948,  v4013,  v4076,  v4137,  v4196,  v4253,  v4308,  v4361,  v4412,  v4461,  v4508,
                           v4553,
                           v4596,
                           v4637);
                  uint64_t v974 = sub_1000439B0( v966,  v967,  v968,  v969,  v970,  v971,  v972,  v973,  v1229,  v1332,  v1435,  v1538,  v1641,  v1743,  v1845,  v1947,  v2048,  v2149,  v2249,  v2348,  v2446,  v2543,  v2639,  v2735,  v2829,  v2922,  v3013,  v3102,  v3189,  v3274,  v3357,  v3438,  v3517,  v3594,  v3669,  v3742,  v3813,  v3882,  v3949,  v4014,  v4077,  v4138,  v4197,  v4254,  v4309,  v4362,  v4413,  v4462,  v4509,
                           v4554,
                           v4597,
                           v4638,
                           v4677,
                           v4714);
                  uint64_t v982 = sub_1000439A0( v974,  v975,  v976,  v977,  v978,  v979,  v980,  v981,  v1230,  v1333,  v1436,  v1539,  v1642,  v1744,  v1846,  v1948,  v2049,  v2150,  v2250,  v2349,  v2447,  v2544,  v2640,  v2736,  v2830,  v2923,  v3014,  v3103,  v3190,  v3275,  v3358,  v3439,  v3518,  v3595,  v3670,  v3743,  v3814,  v3883,  v3950,  v4015,  v4078,  v4139,  v4198,  v4255,  v4310,  v4363,  v4414,  v4463,  v4510,
                           v4555,
                           v4598,
                           v4639,
                           v4678,
                           v4715,
                           v4750,
                           v4767);
                  uint64_t v990 = sub_100043998( v982,  v983,  v984,  v985,  v986,  v987,  v988,  v989,  v1231,  v1334,  v1437,  v1540,  v1643,  v1745,  v1847,  v1949,  v2050,  v2151,  v2251,  v2350,  v2448,  v2545,  v2641,  v2737,  v2831,  v2924,  v3015,  v3104,  v3191,  v3276,  v3359,  v3440,  v3519,  v3596,  v3671,  v3744,  v3815,  v3884,  v3951,  v4016,  v4079,  v4140,  v4199,  v4256,  v4311,  v4364,  v4415,  v4464,  v4511,
                           v4556,
                           v4599,
                           v4640,
                           v4679,
                           v4716,
                           v4751,
                           v4784,
                           v4800);
                  uint64_t v998 = sub_100043990( v990,  v991,  v992,  v993,  v994,  v995,  v996,  v997,  v1232,  v1335,  v1438,  v1541,  v1644,  v1746,  v1848,  v1950,  v2051,  v2152,  v2252,  v2351,  v2449,  v2546,  v2642,  v2738,  v2832,  v2925,  v3016,  v3105,  v3192,  v3277,  v3360,  v3441,  v3520,  v3597,  v3672,  v3745,  v3816,  v3885,  v3952,  v4017,  v4080,  v4141,  v4200,  v4257,  v4312,  v4365,  v4416,  v4465,  v4512,
                           v4557,
                           v4600,
                           v4641,
                           v4680,
                           v4717,
                           v4752,
                           v4785,
                           v4816,
                           v4831);
                  uint64_t v1006 = sub_100043988( v998,  v999,  v1000,  v1001,  v1002,  v1003,  v1004,  v1005,  v1233,  v1336,  v1439,  v1542,  v1645,  v1747,  v1849,  v1951,  v2052,  v2153,  v2253,  v2352,  v2450,  v2547,  v2643,  v2739,  v2833,  v2926,  v3017,  v3106,  v3193,  v3278,  v3361,  v3442,  v3521,  v3598,  v3673,  v3746,  v3817,  v3886,  v3953,  v4018,  v4081,  v4142,  v4201,  v4258,  v4313,  v4366,  v4417,  v4466,  v4513,
                            v4558,
                            v4601,
                            v4642,
                            v4681,
                            v4718,
                            v4753,
                            v4786,
                            v4817,
                            v4846,
                            v4860);
                  uint64_t v1014 = sub_100043980( v1006,  v1007,  v1008,  v1009,  v1010,  v1011,  v1012,  v1013,  v1234,  v1337,  v1440,  v1543,  v1646,  v1748,  v1850,  v1952,  v2053,  v2154,  v2254,  v2353,  v2451,  v2548,  v2644,  v2740,  v2834,  v2927,  v3018,  v3107,  v3194,  v3279,  v3362,  v3443,  v3522,  v3599,  v3674,  v3747,  v3818,  v3887,  v3954,  v4019,  v4082,  v4143,  v4202,  v4259,  v4314,  v4367,  v4418,  v4467,  v4514,
                            v4559,
                            v4602,
                            v4643,
                            v4682,
                            v4719,
                            v4754,
                            v4787,
                            v4818,
                            v4847,
                            v4874,
                            v4887);
                  uint64_t v1022 = sub_100043978( v1014,  v1015,  v1016,  v1017,  v1018,  v1019,  v1020,  v1021,  v1235,  v1338,  v1441,  v1544,  v1647,  v1749,  v1851,  v1953,  v2054,  v2155,  v2255,  v2354,  v2452,  v2549,  v2645,  v2741,  v2835,  v2928,  v3019,  v3108,  v3195,  v3280,  v3363,  v3444,  v3523,  v3600,  v3675,  v3748,  v3819,  v3888,  v3955,  v4020,  v4083,  v4144,  v4203,  v4260,  v4315,  v4368,  v4419,  v4468,  v4515,
                            v4560,
                            v4603,
                            v4644,
                            v4683,
                            v4720,
                            v4755,
                            v4788,
                            v4819,
                            v4848,
                            v4875,
                            v4900,
                            v4912);
                  uint64_t v1030 = sub_100043970( v1022,  v1023,  v1024,  v1025,  v1026,  v1027,  v1028,  v1029,  v1236,  v1339,  v1442,  v1545,  v1648,  v1750,  v1852,  v1954,  v2055,  v2156,  v2256,  v2355,  v2453,  v2550,  v2646,  v2742,  v2836,  v2929,  v3020,  v3109,  v3196,  v3281,  v3364,  v3445,  v3524,  v3601,  v3676,  v3749,  v3820,  v3889,  v3956,  v4021,  v4084,  v4145,  v4204,  v4261,  v4316,  v4369,  v4420,  v4469,  v4516,
                            v4561,
                            v4604,
                            v4645,
                            v4684,
                            v4721,
                            v4756,
                            v4789,
                            v4820,
                            v4849,
                            v4876,
                            v4901,
                            v4924,
                            v4935);
                  uint64_t v1038 = sub_100043968( v1030,  v1031,  v1032,  v1033,  v1034,  v1035,  v1036,  v1037,  v1237,  v1340,  v1443,  v1546,  v1649,  v1751,  v1853,  v1955,  v2056,  v2157,  v2257,  v2356,  v2454,  v2551,  v2647,  v2743,  v2837,  v2930,  v3021,  v3110,  v3197,  v3282,  v3365,  v3446,  v3525,  v3602,  v3677,  v3750,  v3821,  v3890,  v3957,  v4022,  v4085,  v4146,  v4205,  v4262,  v4317,  v4370,  v4421,  v4470,  v4517,
                            v4562,
                            v4605,
                            v4646,
                            v4685,
                            v4722,
                            v4757,
                            v4790,
                            v4821,
                            v4850,
                            v4877,
                            v4902,
                            v4925,
                            v4946,
                            v4956);
                  uint64_t v1046 = sub_100043960( v1038,  v1039,  v1040,  v1041,  v1042,  v1043,  v1044,  v1045,  v1238,  v1341,  v1444,  v1547,  v1650,  v1752,  v1854,  v1956,  v2057,  v2158,  v2258,  v2357,  v2455,  v2552,  v2648,  v2744,  v2838,  v2931,  v3022,  v3111,  v3198,  v3283,  v3366,  v3447,  v3526,  v3603,  v3678,  v3751,  v3822,  v3891,  v3958,  v4023,  v4086,  v4147,  v4206,  v4263,  v4318,  v4371,  v4422,  v4471,  v4518,
                            v4563,
                            v4606,
                            v4647,
                            v4686,
                            v4723,
                            v4758,
                            v4791,
                            v4822,
                            v4851,
                            v4878,
                            v4903,
                            v4926,
                            v4947,
                            v4966);
                  uint64_t v1054 = sub_100043958( v1046,  v1047,  v1048,  v1049,  v1050,  v1051,  v1052,  v1053,  v1239,  v1342,  v1445,  v1548,  v1651,  v1753,  v1855,  v1957,  v2058,  v2159,  v2259,  v2358,  v2456,  v2553,  v2649,  v2745,  v2839,  v2932,  v3023,  v3112,  v3199,  v3284,  v3367,  v3448,  v3527,  v3604,  v3679,  v3752,  v3823,  v3892,  v3959,  v4024,  v4087,  v4148,  v4207,  v4264,  v4319,  v4372,  v4423,  v4472,  v4519,
                            v4564,
                            v4607,
                            v4648,
                            v4687,
                            v4724,
                            v4759,
                            v4792,
                            v4823,
                            v4852,
                            v4879,
                            v4904,
                            v4927,
                            v4948,
                            v4967);
                  uint64_t v1062 = sub_100043950( v1054,  v1055,  v1056,  v1057,  v1058,  v1059,  v1060,  v1061,  v1240,  v1343,  v1446,  v1549,  v1652,  v1754,  v1856,  v1958,  v2059,  v2160,  v2260,  v2359,  v2457,  v2554,  v2650,  v2746,  v2840,  v2933,  v3024,  v3113,  v3200,  v3285,  v3368,  v3449,  v3528,  v3605,  v3680,  v3753,  v3824,  v3893,  v3960,  v4025,  v4088,  v4149,  v4208,  v4265,  v4320,  v4373,  v4424,  v4473,  v4520,
                            v4565,
                            v4608,
                            v4649,
                            v4688,
                            v4725,
                            v4760,
                            v4793,
                            v4824,
                            v4853,
                            v4880,
                            v4905,
                            v4928,
                            v4949,
                            v4968);
                  uint64_t v1070 = sub_100043948( v1062,  v1063,  v1064,  v1065,  v1066,  v1067,  v1068,  v1069,  v1241,  v1344,  v1447,  v1550,  v1653,  v1755,  v1857,  v1959,  v2060,  v2161,  v2261,  v2360,  v2458,  v2555,  v2651,  v2747,  v2841,  v2934,  v3025,  v3114,  v3201,  v3286,  v3369,  v3450,  v3529,  v3606,  v3681,  v3754,  v3825,  v3894,  v3961,  v4026,  v4089,  v4150,  v4209,  v4266,  v4321,  v4374,  v4425,  v4474,  v4521,
                            v4566,
                            v4609,
                            v4650,
                            v4689,
                            v4726,
                            v4761,
                            v4794,
                            v4825,
                            v4854,
                            v4881,
                            v4906,
                            v4929,
                            v4950,
                            v4969);
                  uint64_t v1078 = sub_100043940( v1070,  v1071,  v1072,  v1073,  v1074,  v1075,  v1076,  v1077,  v1242,  v1345,  v1448,  v1551,  v1654,  v1756,  v1858,  v1960,  v2061,  v2162,  v2262,  v2361,  v2459,  v2556,  v2652,  v2748,  v2842,  v2935,  v3026,  v3115,  v3202,  v3287,  v3370,  v3451,  v3530,  v3607,  v3682,  v3755,  v3826,  v3895,  v3962,  v4027,  v4090,  v4151,  v4210,  v4267,  v4322,  v4375,  v4426,  v4475,  v4522,
                            v4567,
                            v4610,
                            v4651,
                            v4690,
                            v4727,
                            v4762,
                            v4795,
                            v4826,
                            v4855,
                            v4882,
                            v4907,
                            v4930,
                            v4951,
                            v4970);
                  uint64_t v1086 = sub_100043E48( v1078,  v1079,  v1080,  v1081,  v1082,  v1083,  v1084,  v1085,  v1243,  v1346,  v1449,  v1552,  v1655,  v1757,  v1859,  v1961,  v2062,  v2163,  v2263,  v2362,  v2460,  v2557,  v2653,  v2749,  v2843,  v2936,  v3027,  v3116,  v3203,  v3288,  v3371,  v3452,  v3531,  v3608,  v3683,  v3756,  v3827,  v3896,  v3963,  v4028,  v4091,  v4152,  v4211,  v4268,  v4323,  v4376,  v4427,  v4476,  v4523,
                            v4568,
                            v4611,
                            v4652,
                            v4691,
                            v4728,
                            v4763,
                            v4796,
                            v4827,
                            v4856,
                            v4883,
                            v4908,
                            v4931,
                            v4952,
                            v4971);
                  uint64_t v1094 = sub_100043E40( v1086,  v1087,  v1088,  v1089,  v1090,  v1091,  v1092,  v1093,  v1244,  v1347,  v1450,  v1553,  v1656,  v1758,  v1860,  v1962,  v2063,  v2164,  v2264,  v2363,  v2461,  v2558,  v2654,  v2750,  v2844,  v2937,  v3028,  v3117,  v3204,  v3289,  v3372,  v3453,  v3532,  v3609,  v3684,  v3757,  v3828,  v3897,  v3964,  v4029,  v4092,  v4153,  v4212,  v4269,  v4324,  v4377,  v4428,  v4477,  v4524,
                            v4569,
                            v4612,
                            v4653,
                            v4692,
                            v4729,
                            v4764,
                            v4797,
                            v4828,
                            v4857,
                            v4884,
                            v4909,
                            v4932,
                            v4953,
                            v4972);
                  uint64_t v1102 = sub_100043E38( v1094,  v1095,  v1096,  v1097,  v1098,  v1099,  v1100,  v1101,  v1245,  v1348,  v1451,  v1554,  v1657,  v1759,  v1861,  v1963,  v2064,  v2165,  v2265,  v2364,  v2462,  v2559,  v2655,  v2751,  v2845,  v2938,  v3029,  v3118,  v3205,  v3290,  v3373,  v3454,  v3533,  v3610,  v3685,  v3758,  v3829,  v3898,  v3965,  v4030,  v4093,  v4154,  v4213,  v4270,  v4325,  v4378,  v4429,  v4478,  v4525,
                            v4570,
                            v4613,
                            v4654,
                            v4693,
                            v4730,
                            v4765,
                            v4798,
                            v4829,
                            v4858,
                            v4885,
                            v4910,
                            v4933,
                            v4954,
                            v4973);
                  sub_100043E30( v1102,  v1103,  v1104,  v1105,  v1106,  v1107,  v1108,  v1109,  v1246,  v1349,  v1452,  v1555,  v1658,  v1760,  v1862,  v1964,  v2065,  v2166,  v2266,  v2365,  v2463,  v2560,  v2656,  v2752,  v2846,  v2939,  v3030,  v3119,  v3206,  v3291,  v3374,  v3455,  v3534,  v3611,  v3686,  v3759,  v3830,  v3899,  v3966,  v4031,  v4094,  v4155,  v4214,  v4271,  v4326,  v4379,  v4430,  v4479,  v4526,
                    v4571,
                    v4614,
                    v4655,
                    v4694,
                    v4731,
                    v4766,
                    v4799,
                    v4830,
                    v4859,
                    v4886,
                    v4911,
                    v4934,
                    v4955,
                    v4974);
                  sub_100043E28();
                  sub_100043E20();
                  sub_100044828();
                  uint64_t v1110 = sub_100044820();
                  sub_100044584( v1110,  v1111,  v1112,  v1113,  v1114,  v1115,  v1116,  v1117,  v1247,  v1350,  v1453,  v1556,  v1659,  v1761,  v1863,  v1965,  v2066,  v2167,  v2267,  v2366,  v2464,  v2561,  v2657);
                  sub_100044818();
                  sub_100044810();
                  sub_100044808();
                  sub_100044800();
                  sub_100046398();
                  sub_1000463B8();
                  sub_100043938();
                  sub_100043930();
                  sub_100043928();
                  sub_100043920();
                  sub_100043D44();
                  BOOL v1118 = (uint64_t (*)(void))sub_10000F588();
                  sub_10000F308(v1118);
                }

                return;
              }

              sub_100041358(*(void *)(v5004 + 712), &qword_10006A378);
            }

            uint64_t v1128 = *(void *)(v5004 + 704);
            uint64_t v1129 = *(void *)(v5004 + 632);
            sub_100044F98();
            sub_1000084E0(v1128, 1LL, v1129);
            uint64_t v1130 = sub_100044158();
            if (v117)
            {
              uint64_t v1131 = sub_100044A10();
              sub_1000431B8(v1131, &qword_10006A378);
            }

            else
            {
              sub_100044A04(v1130);
            }

            uint64_t v1135 = *(void *)(v5004 + 696);
            uint64_t v1136 = *(void *)(v5004 + 632);
            sub_100045EAC(*(void *)(v5004 + 720), v1134, &qword_10006A378);
            sub_1000084E0(v1135, 1LL, v1136);
            uint64_t v1137 = sub_100044114();
            if (v117)
            {
              uint64_t v1138 = sub_100044F08();
              sub_1000431B8(v1138, &qword_10006A378);
            }

            else
            {
              sub_100047828(v1137);
            }

            uint64_t v1125 = (void *)v5004;
            uint64_t v1139 = *(void *)(v5004 + 688);
            sub_1000458C8();
            uint64_t v1140 = v1139 + *(int *)(sub_10000844C(&qword_10006A428) + 48);
            sub_1000456F0(v1139, v1129);
            sub_1000456F0(v1140, v1136);
            uint64_t v1133 = (unsigned int *)&enum case for ToolSymbolIconStyle.multicolor(_:);
            goto LABEL_253;
          }
        }

        else
        {
          sub_100046FCC();
        }

        sub_100045A94(v1119, &qword_10006A420);
        uint64_t v1122 = v4985;
        goto LABEL_237;
      }

LABEL_225:
      sub_1000432F0();
    }

    sub_100044430();
    sub_100044004();
    sub_1000432E8();
    uint64_t v261 = sub_10004403C();
    goto LABEL_227;
  }

  sub_100045C60();
  while (1)
  {
    uint64_t v30 = sub_100045648();
    uint64_t v31 = *(void *)(v29 + 1704);
    if ((_DWORD)v16 == 1) {
      uint64_t v32 = (uint64_t)sub_1000430AC(v31 + 8 * v19);
    }
    else {
      uint64_t v32 = sub_100044EF8(v30, v31);
    }
    sub_1000477BC(v32);
    *(void *)(v34 + 1808) = v33;
    if (v35)
    {
LABEL_223:
      __break(1u);
      goto LABEL_224;
    }

    uint64_t v36 = objc_opt_self(*(void *)(v28 + 1776));
    if (!sub_100045250(v36)) {
      break;
    }

    uint64_t v29 = v4998;
    sub_100045660();
    if (v111) {
      goto LABEL_13;
    }
  }

  sub_100037E60(0LL);
  *(void *)uint64_t v14 = v97;
  uint64_t v4978 = v16;
  id v98 = sub_100043854(v97, "resourceManager");
  uint64_t v99 = sub_1000132F0((uint64_t)v98, &qword_10006A3C8, &OBJC_CLASS___WFParameterRelationResource_ptr);
  id v100 = [v98 resourceObjectsOfClass:swift_getObjCClassFromMetadata(v99)];
  sub_1000476A0();
  if (!v19)
  {
LABEL_265:
    sub_100046F8C();
    __break(1u);
    JUMPOUT(0x100031288LL);
  }

  uint64_t v101 = (uint64_t)&qword_10006A3D0;
  uint64_t v102 = &OBJC_CLASS___WFResource_ptr;
  sub_10004535C();
  sub_10004547C(&qword_10006A3D8);
  sub_100045328(v103);
  sub_100043D6C();
  sub_100047930();
  sub_100043024();
  uint64_t v104 = v4998;
  uint64_t v4976 = sub_100046114();
  if (!v4976)
  {
LABEL_115:
    sub_100008D58();
    uint64_t v174 = sub_1000443C0();
    id v175 = sub_100014078(v174);
    sub_10004316C();
    if (!v175) {
      id v175 = [*(id *)(v104 + 1680) defaultContext];
    }
    *(void *)(v104 + 1816) = v175;
    uint64_t v176 = (void *)swift_task_alloc(async function pointer to WFParameter.toolkitTypeDefinition(for:localizationContext:)[1]);
    *(void *)(v104 + 1824) = v176;
    sub_10004555C(v176);
    sub_1000430EC();
    return;
  }

  sub_100046104();
  uint64_t v105 = 0LL;
  sub_1000464F0();
  while (2)
  {
    sub_100045BF4();
    if ((v26 & 1) != 0) {
      uint64_t v106 = sub_10004742C();
    }
    else {
      uint64_t v106 = (void *)sub_100044E8C(v105);
    }
    BOOL v35 = __OFADD__(v105++, 1LL);
    if (v35) {
      goto LABEL_257;
    }
    uint64_t v4980 = v105;
    unint64_t v26 = *(void *)(v104 + 1696);
    uint64_t v107 = sub_100043918((uint64_t)[v106 parameterKey]);
    sub_100046558();
    if (*(void *)(v26 + 16))
    {
      uint64_t v102 = *(_UNKNOWN ***)(v104 + 1696);
      sub_100045D90((uint64_t)v102[5]);
      sub_100046470();
      sub_100045F8C();
      sub_100044E24();
      if ((v108 & 1) != 0)
      {
        uint64_t v109 = sub_1000455C4();
        BOOL v111 = v111 && v110 == v101;
        if (v111 || (sub_10004320C(v109, v110, v107, v101) & 1) != 0)
        {
          sub_10004316C();
          sub_100046448();
          uint64_t v104 = v4998;
          goto LABEL_105;
        }

        LOBYTE(v26) = ~(_BYTE)v26;
        do
        {
          sub_100044B5C();
          if ((v112 & 1) == 0) {
            goto LABEL_68;
          }
          uint64_t v113 = sub_1000455C4();
          BOOL v115 = v111 && v114 == v101;
        }

        while (!v115 && (sub_10004320C(v113, v114, v107, v101) & 1) == 0);
        sub_10004316C();
        sub_100046448();
        uint64_t v104 = v4998;
LABEL_106:
        if (v105 == v4976) {
          goto LABEL_115;
        }
        continue;
      }
    }

    break;
  }

      sub_1000432F0();
    }

    sub_100044430();
    sub_100044004();
    sub_1000432E8();
    uint64_t v267 = sub_10004403C();
    goto LABEL_227;
  }

  sub_100045C60();
  while (1)
  {
    uint64_t v36 = sub_100045648();
    uint64_t v37 = *(void *)(v35 + 1704);
    if ((_DWORD)v27 == 1) {
      uint64_t v38 = (uint64_t)sub_1000430AC(v37 + 8 * v12);
    }
    else {
      uint64_t v38 = sub_100044EF8(v36, v37);
    }
    sub_1000477BC(v38);
    *(void *)(v40 + 1808) = v39;
    if (v41)
    {
LABEL_223:
      __break(1u);
      goto LABEL_224;
    }

    uint64_t v42 = objc_opt_self(*(void *)(v34 + 1776));
    if (!sub_100045250(v42)) {
      break;
    }

    BOOL v35 = v5004;
    sub_100045660();
    if (v117) {
      goto LABEL_13;
    }
  }

  sub_100037E60(0LL);
  *(void *)uint64_t v20 = v103;
  uint64_t v4984 = v27;
  uint64_t v104 = sub_100043854(v103, "resourceManager");
  uint64_t v105 = sub_1000132F0((uint64_t)v104, &qword_10006A3C8, &OBJC_CLASS___WFParameterRelationResource_ptr);
  uint64_t v106 = [v104 resourceObjectsOfClass:swift_getObjCClassFromMetadata(v105)];
  sub_1000476A0();
  if (!v12)
  {
LABEL_265:
    sub_100046F8C();
    __break(1u);
    JUMPOUT(0x100033930LL);
  }

  uint64_t v107 = (uint64_t)&qword_10006A3D0;
  char v108 = &OBJC_CLASS___WFResource_ptr;
  sub_10004535C();
  sub_10004547C(&qword_10006A3D8);
  sub_100045328(v109);
  sub_100043D6C();
  sub_100047930();
  sub_100043024();
  uint64_t v110 = v5004;
  uint64_t v4982 = sub_100046114();
  if (!v4982)
  {
LABEL_115:
    sub_100008D58();
    uint64_t v180 = sub_1000443C0();
    uint64_t v181 = sub_100014078(v180);
    sub_10004316C();
    if (!v181) {
      uint64_t v181 = [*(id *)(v110 + 1680) defaultContext];
    }
    *(void *)(v110 + 1816) = v181;
    uint64_t v182 = (void *)swift_task_alloc(async function pointer to WFParameter.toolkitTypeDefinition(for:localizationContext:)[1]);
    *(void *)(v110 + 1824) = v182;
    sub_10004555C(v182);
    sub_1000430EC();
    return;
  }

  sub_100046104();
  BOOL v111 = 0LL;
  sub_1000464F0();
  while (2)
  {
    sub_100045BF4();
    if ((v28 & 1) != 0) {
      char v112 = sub_10004742C();
    }
    else {
      char v112 = (void *)sub_100044E8C(v111);
    }
    uint64_t v41 = __OFADD__(v111++, 1LL);
    if (v41) {
      goto LABEL_257;
    }
    char v4986 = v111;
    uint64_t v28 = *(void *)(v110 + 1696);
    uint64_t v113 = sub_100043918((uint64_t)[v112 parameterKey]);
    sub_100046558();
    if (*(void *)(v28 + 16))
    {
      char v108 = *(_UNKNOWN ***)(v110 + 1696);
      sub_100045D90((uint64_t)v108[5]);
      sub_100046470();
      sub_100045F8C();
      sub_100044E24();
      if ((v114 & 1) != 0)
      {
        BOOL v115 = sub_1000455C4();
        uint64_t v117 = v117 && v116 == v107;
        if (v117 || (sub_10004320C(v115, v116, v113, v107) & 1) != 0)
        {
          sub_10004316C();
          sub_100046448();
          uint64_t v110 = v5004;
          goto LABEL_105;
        }

        LOBYTE(v28) = ~(_BYTE)v28;
        do
        {
          sub_100044B5C();
          if ((v118 & 1) == 0) {
            goto LABEL_68;
          }
          uint64_t v119 = sub_1000455C4();
          uint64_t v121 = v117 && v120 == v107;
        }

        while (!v121 && (sub_10004320C(v119, v120, v113, v107) & 1) == 0);
        sub_10004316C();
        sub_100046448();
        uint64_t v110 = v5004;
LABEL_106:
        if (v111 == v4982) {
          goto LABEL_115;
        }
        continue;
      }
    }

    break;
  }

LABEL_68:
  uint64_t v116 = *(void *)(v104 + 1416);
  uint64_t v117 = sub_10004316C();
  id v118 = sub_100046A68(v117, "comparedValues");
  sub_100047998((uint64_t)v118);

  unint64_t v26 = (unint64_t)sub_10004694C(v4978);
  sub_1000132B8();
  uint64_t v119 = sub_1000478FC();
  sub_100040370(&qword_10006A3E0, (uint64_t (*)(uint64_t))&type metadata accessor for TypedValue);
  uint64_t v122 = sub_100044AAC(v119, v121, v120);
  uint64_t v123 = v104;
  if (!sub_100045C4C())
  {
LABEL_94:
    uint64_t v144 = *(void *)(v123 + 1720);
    uint64_t v145 = sub_10004515C();
    id v146 = sub_100046A68(v145, "relation");
    sub_100045F64();
    uint64_t v147 = sub_100043F74();
    if (v13 == v147 && v144 == v148)
    {
      sub_100043238(v144);
    }

    else
    {
      uint64_t v13 = sub_10004320C(v13, v144, v147, v148);
      sub_100043908();
      sub_10004316C();
      if ((v13 & 1) == 0)
      {
        unint64_t v26 = *(void *)(v123 + 1728);
        id v150 = (id)v116;
        id v151 = sub_1000431B0();
        sub_1000430A0((uint64_t)v151);
        sub_100043650();

        if ((v104 & 1) == 0)
        {
          id v157 = (id)v116;
          id v158 = sub_1000431B0();
          sub_1000430A0((uint64_t)v158);
          sub_100043650();

          id v159 = (id)v116;
          id v160 = sub_1000431B0();
          sub_1000430A0((uint64_t)v160);
          sub_100043650();

          id v161 = (id)v116;
          id v162 = sub_1000431B0();
          sub_1000430A0((uint64_t)v162);
          sub_100043650();

          id v163 = (id)v116;
          id v164 = sub_1000431B0();
          sub_1000430A0((uint64_t)v164);
          sub_100043650();

          id v165 = (id)v116;
          id v166 = sub_1000431B0();
          sub_1000430A0((uint64_t)v166);
          sub_100043650();

          sub_1000430A0((uint64_t)*(id *)(v123 + 1776));
          sub_100043650();

          uint64_t v116 = *(void *)(v123 + 1408);
          unint64_t v26 = *(void *)(v123 + 1392);
          uint64_t v101 = *(void *)(v123 + 1384);
          sub_1000132B8();
          uint64_t v152 = sub_10004619C();
LABEL_104:
          v153(v152);
          sub_10004629C();
          id v155 = sub_100047004(v154, "parameterKey");
          sub_1000465D8((uint64_t)v155);
          sub_100047704();
          uint64_t v156 = (uint64_t)v102;
          sub_1000442EC(v116, (uint64_t)v102, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v26 + 16));
          sub_100046074();
          uint64_t v102 = (_UNKNOWN **)sub_100050CF8;
          sub_100044EF0();
          sub_100044734(*(void *)(v123 + 440));
          sub_100044174();
          sub_100037FF8();

          sub_100043D10(v156, *(uint64_t (**)(uint64_t, uint64_t))(v26 + 8));
          uint64_t v104 = v123;
LABEL_105:
          uint64_t v105 = v4980;
          goto LABEL_106;
        }

        uint64_t v101 = *(unsigned int *)(v123 + 2056);
        sub_100043424();
        sub_1000132B8();
LABEL_103:
        uint64_t v152 = sub_100046ED4();
        goto LABEL_104;
      }
    }

    uint64_t v101 = *(unsigned int *)(v123 + 2076);
    sub_100043424();
    *(void *)uint64_t v104 = v122;
    goto LABEL_103;
  }

  sub_1000469D4();
  if (v124 != v35)
  {
LABEL_259:
    __break(1u);
    goto LABEL_260;
  }

  char v4989 = sub_100045DE8();
  uint64_t v125 = 0LL;
  while (2)
  {
    if ((v4989 & 1) != 0)
    {
      sub_10004332C(*(void *)(v123 + 1464), *(void *)(v123 + 1424));
    }

    else
    {
      uint64_t v126 = *(void *)(v123 + 1432);
      uint64_t v127 = sub_100046030();
      uint64_t v129 = sub_100043364(v127, v128, (uint64_t (*)(void))&type metadata accessor for TypedValue);
      if (v126 != 8) {
        goto LABEL_255;
      }
      sub_100044DB4(v129);
      sub_1000431C0();
    }

    uint64_t v116 = *(void *)(v123 + 1456);
    uint64_t v130 = *(void *)(v123 + 1416);
    sub_10004462C(*(uint64_t (**)(void))(*(void *)(v123 + 1424) + 32LL));
    uint64_t v131 = *(void *)(v122 + 40);
    sub_100045814();
    uint64_t v102 = (_UNKNOWN **)(sub_100044634(v131, v130) & ~(-1LL << *(_BYTE *)(v122 + 32)));
    uint64_t v13 = v122 + 56;
    sub_1000435EC();
    if ((v133 & 1) != 0)
    {
      unint64_t v26 = ~v132;
      uint64_t v123 = *(void *)(*(void *)(v123 + 1424) + 72LL);
      while (1)
      {
        sub_100044494();
        sub_100040370(&qword_10006A3E8, (uint64_t (*)(uint64_t))&type metadata accessor for TypedValue);
        sub_100044838(v104, v135, v136, v134);
        sub_100045B98();
        if ((v116 & 1) != 0) {
          break;
        }
        uint64_t v102 = (_UNKNOWN **)(((unint64_t)v102 + 1) & v26);
        sub_100043600();
        if ((v137 & 1) == 0) {
          goto LABEL_79;
        }
      }

      sub_1000132B8();
      uint64_t v123 = v4998;
      goto LABEL_92;
    }

  uint64_t v122 = *(void *)(v110 + 1416);
  uint64_t v123 = sub_10004316C();
  char v124 = sub_100046A68(v123, "comparedValues");
  sub_100047998((uint64_t)v124);

  uint64_t v28 = (unint64_t)sub_10004694C(v4984);
  sub_1000132B8();
  uint64_t v125 = sub_1000478FC();
  sub_100040370(&qword_10006A3E0, (uint64_t (*)(uint64_t))&type metadata accessor for TypedValue);
  uint64_t v128 = sub_100044AAC(v125, v127, v126);
  uint64_t v129 = v110;
  if (!sub_100045C4C())
  {
LABEL_94:
    id v150 = *(void *)(v129 + 1720);
    id v151 = sub_10004515C();
    uint64_t v152 = sub_100046A68(v151, "relation");
    sub_100045F64();
    uint64_t v153 = sub_100043F74();
    if (v15 == v153 && v150 == v154)
    {
      sub_100043238(v150);
    }

    else
    {
      uint64_t v15 = sub_10004320C(v15, v150, v153, v154);
      sub_100043908();
      sub_10004316C();
      if ((v15 & 1) == 0)
      {
        uint64_t v28 = *(void *)(v129 + 1728);
        uint64_t v156 = (id)v122;
        id v157 = sub_1000431B0();
        sub_1000430A0((uint64_t)v157);
        sub_100043650();

        if ((v110 & 1) == 0)
        {
          id v163 = (id)v122;
          id v164 = sub_1000431B0();
          sub_1000430A0((uint64_t)v164);
          sub_100043650();

          id v165 = (id)v122;
          id v166 = sub_1000431B0();
          sub_1000430A0((uint64_t)v166);
          sub_100043650();

          uint64_t v167 = (id)v122;
          uint64_t v168 = sub_1000431B0();
          sub_1000430A0((uint64_t)v168);
          sub_100043650();

          int v169 = (id)v122;
          uint64_t v170 = sub_1000431B0();
          sub_1000430A0((uint64_t)v170);
          sub_100043650();

          uint64_t v171 = (id)v122;
          uint64_t v172 = sub_1000431B0();
          sub_1000430A0((uint64_t)v172);
          sub_100043650();

          sub_1000430A0((uint64_t)*(id *)(v129 + 1776));
          sub_100043650();

          uint64_t v122 = *(void *)(v129 + 1408);
          uint64_t v28 = *(void *)(v129 + 1392);
          uint64_t v107 = *(void *)(v129 + 1384);
          sub_1000132B8();
          id v158 = sub_10004619C();
LABEL_104:
          v159(v158);
          sub_10004629C();
          id v161 = sub_100047004(v160, "parameterKey");
          sub_1000465D8((uint64_t)v161);
          sub_100047704();
          id v162 = (uint64_t)v108;
          sub_1000442EC(v122, (uint64_t)v108, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v28 + 16));
          sub_100046074();
          char v108 = (_UNKNOWN **)sub_100050CF8;
          sub_100044EF0();
          sub_100044734(*(void *)(v129 + 440));
          sub_100044174();
          sub_100037FF8();

          sub_100043D10(v162, *(uint64_t (**)(uint64_t, uint64_t))(v28 + 8));
          uint64_t v110 = v129;
LABEL_105:
          BOOL v111 = v4986;
          goto LABEL_106;
        }

        uint64_t v107 = *(unsigned int *)(v129 + 2056);
        sub_100043424();
        sub_1000132B8();
LABEL_103:
        id v158 = sub_100046ED4();
        goto LABEL_104;
      }
    }

    uint64_t v107 = *(unsigned int *)(v129 + 2076);
    sub_100043424();
    *(void *)uint64_t v110 = v128;
    goto LABEL_103;
  }

  sub_1000469D4();
  if (v130 != v41)
  {
LABEL_259:
    __break(1u);
    goto LABEL_260;
  }

  uint64_t v4995 = sub_100045DE8();
  uint64_t v131 = 0LL;
  while (2)
  {
    if ((v4995 & 1) != 0)
    {
      sub_10004332C(*(void *)(v129 + 1464), *(void *)(v129 + 1424));
    }

    else
    {
      uint64_t v132 = *(void *)(v129 + 1432);
      char v133 = sub_100046030();
      uint64_t v135 = sub_100043364(v133, v134, (uint64_t (*)(void))&type metadata accessor for TypedValue);
      if (v132 != 8) {
        goto LABEL_255;
      }
      sub_100044DB4(v135);
      sub_1000431C0();
    }

    uint64_t v122 = *(void *)(v129 + 1456);
    uint64_t v136 = *(void *)(v129 + 1416);
    sub_10004462C(*(uint64_t (**)(void))(*(void *)(v129 + 1424) + 32LL));
    char v137 = *(void *)(v128 + 40);
    sub_100045814();
    char v108 = (_UNKNOWN **)(sub_100044634(v137, v136) & ~(-1LL << *(_BYTE *)(v128 + 32)));
    uint64_t v15 = v128 + 56;
    sub_1000435EC();
    if ((v139 & 1) != 0)
    {
      uint64_t v28 = ~v138;
      uint64_t v129 = *(void *)(*(void *)(v129 + 1424) + 72LL);
      while (1)
      {
        sub_100044494();
        sub_100040370(&qword_10006A3E8, (uint64_t (*)(uint64_t))&type metadata accessor for TypedValue);
        sub_100044838(v110, v141, v142, v140);
        sub_100045B98();
        if ((v122 & 1) != 0) {
          break;
        }
        char v108 = (_UNKNOWN **)(((unint64_t)v108 + 1) & v28);
        sub_100043600();
        if ((v143 & 1) == 0) {
          goto LABEL_79;
        }
      }

      sub_1000132B8();
      uint64_t v129 = v5004;
      goto LABEL_92;
    }

void sub_1000312C0()
{
  uint64_t v2 = v0 + 2;
  sub_100043820(v0[196]);
  id v3 = (os_log_s *)v0[231];
  uint64_t v4 = v0[225];
  uint64_t v5004 = (uint64_t)v0;
  sub_10000F568();
  uint64_t v5 = sub_100042644((uint64_t)&unk_100066480, 24LL);
  *(void *)(v5 + 16) = v4;
  uint64_t v6 = v5;
  uint64_t v7 = sub_100042644((uint64_t)&unk_1000664A8, 24LL);
  id v8 = sub_1000464B0(v7);
  sub_100043D64();
  id v9 = v8;
  uint64_t v5003 = v3;
  uint64_t v10 = sub_100043D64();
  uint64_t v11 = Logger.logObject.getter(v10);
  os_log_type_t v4993 = sub_100047280(v11);
  uint64_t v12 = sub_100042644((uint64_t)&unk_1000664D0, 17LL);
  *(_BYTE *)(v12 + 16) = 64;
  uint64_t v13 = sub_100042644((uint64_t)&unk_1000664F8, 17LL);
  *(_BYTE *)(v13 + 16) = 8;
  uint64_t v14 = sub_100042644((uint64_t)&unk_100066520, 32LL);
  *(void *)(v14 + 16) = sub_100040E5C;
  *(void *)(v14 + 24) = v6;
  uint64_t v15 = sub_100042644((uint64_t)&unk_100066548, 32LL);
  *(void *)(v15 + 16) = sub_10004217C;
  *(void *)(v15 + 24) = v14;
  uint64_t v16 = sub_100042644((uint64_t)&unk_100066570, 17LL);
  *(_BYTE *)(v16 + 16) = 64;
  uint64_t v17 = sub_100042644((uint64_t)&unk_100066598, 17LL);
  *(_BYTE *)(v17 + 16) = 8;
  uint64_t v18 = sub_100042644((uint64_t)&unk_1000665C0, 32LL);
  *(void *)(v18 + 16) = sub_100040E80;
  *(void *)(v18 + 24) = v1;
  uint64_t v19 = sub_100042644((uint64_t)&unk_1000665E8, 32LL);
  *(void *)(v19 + 16) = sub_100040EBC;
  *(void *)(v19 + 24) = v18;
  uint64_t v20 = sub_100042644((uint64_t)&unk_100066610, 32LL);
  *(void *)(v20 + 16) = sub_100040EC4;
  *(void *)(v20 + 24) = v19;
  uint64_t v21 = sub_10000844C((uint64_t *)&unk_10006A360);
  uint64_t inited = swift_initStackObject(v21, v2);
  *(_OWORD *)(inited + 16) = xmmword_100059850;
  *(void *)(inited + 32) = sub_1000421D8;
  *(void *)(inited + 40) = v12;
  *(void *)(inited + 48) = sub_1000421D8;
  *(void *)(inited + 56) = v13;
  *(void *)(inited + 64) = sub_100040EAC;
  *(void *)(inited + 72) = v15;
  *(void *)(inited + 80) = sub_1000421D8;
  *(void *)(inited + 88) = v16;
  *(void *)(inited + 96) = sub_1000421D8;
  *(void *)(inited + 104) = v17;
  *(void *)(inited + 112) = sub_100042180;
  *(void *)(inited + 120) = v20;
  swift_retain();
  uint64_t v4989 = v14;
  sub_100044EE0();
  swift_retain();
  char v4991 = v18;
  swift_retain();
  sub_100044D54();
  sub_100044400();
  sub_100043D5C();
  uint64_t v4985 = (void *)v15;
  sub_1000442F4();
  sub_10004486C();
  sub_100044AFC();
  sub_100044B34();
  sub_100043908();
  uint64_t v23 = v4993;
  if (os_log_type_enabled((os_log_t)v5000, v4993))
  {
    uint64_t v20 = v5004;
    uint64_t v24 = *(void **)(v5004 + 1800);
    uint64_t v25 = (uint8_t *)sub_100044BAC();
    unint64_t v26 = (void *)sub_10000D524(16LL);
    sub_1000457AC();
    sub_100013360();
    void v25[3] = 8;
    sub_100043678();
    uint64_t v27 = v25 + 4;
    *(void *)(v5004 + 552) = v24;
    uint64_t v15 = v24;
    sub_100046A70(v5004 + 552, v5004 + 560);
    *unint64_t v26 = v24;
    sub_1000463A0();
    sub_100043BF8();
    sub_1000440CC();

    unint64_t v28 = (unint64_t)v5003;
    v25[12] = 64;
    sub_1000434B8();
    v25[13] = 8;
    sub_100043F84();
    sub_1000472B4();
    uint64_t v29 = _swift_stdlib_bridgeErrorToNSError(v5003);
    *(void *)(v5004 + 560) = v29;
    sub_100045474(v5004 + 560, v5004 + 568);
    v26[1] = v29;
    sub_1000447F8();
    sub_1000463C0();
    sub_100043E18();
    sub_1000440C4();
    sub_100047928();
    uint64_t v12 = (uint64_t)v5000;
    sub_100045FC8();
    sub_100043ADC(v30, v31, v32, v33, v25);
    sub_10000844C(&qword_10006A320);
    sub_1000442BC((uint64_t)v26);
    sub_10000F2F0((uint64_t)v26);
    sub_10000F2F0((uint64_t)v25);

    uint64_t v34 = *(void *)(v5004 + 1800);
    uint64_t v35 = v5004;
  }

  else
  {
    uint64_t v27 = (void *)v5004;
    unint64_t v28 = *(void *)(v5004 + 1800);

    swift_errorRelease(v5003);
    sub_100013360();
    sub_100043678();
    sub_1000463A0();
    sub_100043BF8();
    sub_1000440CC();

    sub_1000434B8();
    sub_100043F84();
    sub_1000447F8();
    sub_1000463C0();
    sub_100043E18();
    sub_1000440C4();
    uint64_t v35 = v5004;
    uint64_t v34 = (uint64_t)v5000;
  }

  sub_100045C7C();

  sub_100043124(*(uint64_t (**)(uint64_t, uint64_t))(v28 + 8));
  sub_100045660();
  if (v117)
  {
LABEL_13:
    sub_100044C1C();
    sub_100008D58();
    sub_100040370(&qword_10006A3F0, (uint64_t (*)(uint64_t))&type metadata accessor for ToolFlag);
    sub_100044FD0();
    sub_100043230();
    uint64_t v44 = sub_100047144(v43);
    sub_1000477D0(v44, v45);
    uint64_t v46 = &type metadata accessor for ToolVisibilityFlag;
    sub_100044AC8();
    *(void *)(v35 + 408) = v47;
    sub_100045FD4(&qword_10006A3F8);
    uint64_t v49 = v48;
    sub_10000844C(&qword_10006A400);
    unint64_t v50 = sub_100045F70();
    uint64_t v51 = sub_100044E6C(v50);
    uint64_t v52 = static ToolVisibilityFlag.allCases.getter(v51);
    uint64_t v53 = v35;
    uint64_t v4994 = (uint64_t)v27;
    uint64_t v4996 = sub_10004753C(v52);
    uint64_t v4981 = v20;
    if (v4996)
    {
      uint64_t v54 = sub_1000445AC();
      sub_1000451B0(v54);
      sub_1000468DC((uint64_t)"ToolVisibilityFlag");
      do
      {
        if ((v4991 & 1) != 0)
        {
          sub_100044238();
        }

        else
        {
          sub_100046764(v15, v4998, (uint64_t (*)(void))&type metadata accessor for ToolVisibilityFlag);
          sub_10004712C();
          if (!v117)
          {
            __break(1u);
            goto LABEL_225;
          }

          sub_1000452A0(v55);
          sub_1000431C0();
        }

        if (__OFADD__(v15, 1LL))
        {
          __break(1u);
          goto LABEL_223;
        }

        sub_100044364(v15 + 1);
        uint64_t v56 = sub_100046D80();
        static ToolVisibilityFlag.shortcuts.getter(v56);
        sub_100040370(&qword_10006A410, (uint64_t (*)(uint64_t))&type metadata accessor for ToolVisibilityFlag);
        uint64_t v34 = v57;
        sub_100043D4C(v49, v20, (uint64_t)v46);
        sub_100045B5C();
        uint64_t v46 = *(void **)(v53 + 1216);
        if ((v20 & 1) != 0)
        {
          sub_1000463E8();
          if (sub_100045EB4((id)v20, "visibleForUse:"))
          {
            sub_100044C74();
            sub_100046E34();
            sub_100045134(v20, (uint64_t)v27);
            uint64_t v46 = v27;
            uint64_t v58 = sub_100043D4C(v49, v20, (uint64_t)v27);
            uint64_t v59 = sub_10004362C(v58);
            if ((v60 & 1) != 0)
            {
              uint64_t v46 = *(void **)(v53 + 1208);
              uint64_t v20 = *(void *)(v53 + 1144);
              sub_100044D34(*(void *)(v53 + 1192));
              sub_100043CF8(v34);
              sub_100043CF8((uint64_t)v46);
              sub_100043FF0();
              sub_1000470AC();
            }

            else
            {
              sub_1000445D4(v59, *(void *)(v53 + 1192));
              uint64_t v35 = v4981;
            }

            sub_1000431E4();
            sub_100045434();
            uint64_t v68 = v4979;
            goto LABEL_37;
          }
        }

        else
        {
          sub_100046334();
          uint64_t v49 = sub_100043C30();
          sub_100044D34((uint64_t)v27);
          uint64_t v46 = *(void **)(v53 + 1216);
          if ((v49 & 1) != 0)
          {
            sub_1000463D8();
            unsigned int v61 = sub_100045E08(v27, "visibleForUse:");
            uint64_t v27 = (void *)v4994;
            if (v61)
            {
              sub_100044C54();
              sub_1000451D4((uint64_t)v46);
              sub_100045134(v4994, v49);
              uint64_t v46 = (void *)v49;
              uint64_t v62 = sub_100043D4C(v20, v4994, v49);
              uint64_t v63 = sub_10004362C(v62);
              if ((v64 & 1) != 0)
              {
                uint64_t v46 = *(void **)(v53 + 1208);
                uint64_t v20 = *(void *)(v53 + 1144);
                sub_100044D34(*(void *)(v53 + 1176));
                sub_100043CF8(v34);
                sub_100043CF8((uint64_t)v46);
                sub_100043FF0();
                sub_1000470AC();
              }

              else
              {
                sub_1000445D4(v63, *(void *)(v53 + 1176));
                uint64_t v35 = v4981;
              }

              sub_1000431E4();
              sub_100045434();
              uint64_t v68 = (uint64_t *)v4978;
              goto LABEL_37;
            }
          }

          else
          {
            sub_100046344();
            char v65 = sub_100043C30();
            sub_100044D34((uint64_t)v27);
            uint64_t v34 = *(void *)(v53 + 1144);
            if ((v65 & 1) == 0)
            {
              sub_100046054();
              uint64_t v183 = sub_100045D64();
              sub_1000456E8(v183, v184);
              sub_100044C44();
              sub_100044CC4(v185);
              sub_100040370( &qword_10006A418,  (uint64_t (*)(uint64_t))&type metadata accessor for ToolVisibilityFlag);
              v5006._countAndFlagsBits = sub_100045F4C(v186);
              sub_100044AE0(v5006);
              sub_100043174();
              sub_100045CA0();
              sub_100043B6C();
              goto LABEL_119;
            }

            uint64_t v46 = *(void **)(v53 + 1208);
            uint64_t v66 = *(void *)(v53 + 1168);
            sub_100044ED8(*(void *)(v53 + 1216));
            uint64_t v67 = sub_100046E24();
            static ToolVisibilityFlag.shortcuts.getter(v67);
            uint64_t v20 = sub_1000460D8(v66);
            sub_100044ED8(v66);
            sub_100044ED8((uint64_t)v46);
            uint64_t v27 = (void *)v4994;
            if ((v20 & 1) != 0 && [*(id *)(v53 + 576) isApprovedForPublicShortcutsDrawer])
            {
              sub_100045CB0();
              sub_100046DAC();
              sub_100044ED8(v4994);
              uint64_t v68 = v4977;
LABEL_37:
              sub_1000463F8(*v68);
              uint64_t v27 = (void *)v4994;
            }
          }
        }

        sub_1000463F8(*(void *)(v53 + 1224));
        ++v15;
        sub_1000465F0();
        uint64_t v23 = v4989;
      }

      while (!v117);
    }

    sub_100044BD4();
    sub_10000F568();
    uint64_t v69 = sub_100042644((uint64_t)&unk_100066638, 24LL);
    *(void *)(v69 + 16) = v53;
    uint64_t v70 = v69;
    uint64_t v5001 = v69;
    uint64_t v71 = sub_100042644((uint64_t)&unk_100066660, 32LL);
    *(void *)(v71 + 16) = sub_100040F24;
    *(void *)(v71 + 24) = v27;
    id v72 = (id)v53;
    sub_100045BCC();
    uint64_t v73 = Logger.logObject.getter(v27);
    sub_100045C58(v73);
    uint64_t v35 = sub_100042644((uint64_t)&unk_100066688, 17LL);
    *(_BYTE *)(v35 + 16) = 32;
    uint64_t v74 = sub_100042644((uint64_t)&unk_1000666B0, 17LL);
    *(_BYTE *)(v74 + 16) = 8;
    uint64_t v75 = sub_100042644((uint64_t)&unk_1000666D8, 32LL);
    *(void *)(v75 + 16) = sub_1000421D0;
    *(void *)(v75 + 24) = v70;
    uint64_t v76 = sub_100042644((uint64_t)&unk_100066700, 32LL);
    *(void *)(v76 + 16) = sub_100040F3C;
    *(void *)(v76 + 24) = v75;
    uint64_t v15 = sub_100042644((uint64_t)&unk_100066728, 17LL);
    *(_BYTE *)(v15 + 16) = 32;
    uint64_t v77 = (_BYTE *)sub_100042644((uint64_t)&unk_100066750, 17LL);
    v77[16] = 8;
    uint64_t v78 = sub_100042644((uint64_t)&unk_100066778, 32LL);
    *(void *)(v78 + 16) = sub_100040F2C;
    *(void *)(v78 + 24) = v71;
    uint64_t v79 = sub_100042644((uint64_t)&unk_1000667A0, 32LL);
    *(void *)(v79 + 16) = sub_100042178;
    *(void *)(v79 + 24) = v78;
    uint64_t v80 = sub_10000844C((uint64_t *)&unk_10006A360);
    uint64_t v81 = swift_initStackObject(v80, v4996);
    *(_OWORD *)(v81 + 16) = xmmword_100059850;
    *(void *)(v81 + 32) = sub_1000421D8;
    *(void *)(v81 + 40) = v35;
    *(void *)(v81 + 48) = sub_1000421D8;
    *(void *)(v81 + 56) = v74;
    *(void *)(v81 + 64) = sub_100042184;
    *(void *)(v81 + 72) = v76;
    *(void *)(v81 + 80) = sub_1000421D8;
    *(void *)(v81 + 88) = v15;
    *(void *)(v81 + 96) = sub_1000421D8;
    *(void *)(v81 + 104) = v77;
    *(void *)(v81 + 112) = sub_100042184;
    *(void *)(v81 + 120) = v79;
    sub_100045D00();
    sub_10004486C();
    sub_100044B34();
    sub_100044400();
    sub_100043FDC();
    sub_100043D5C();
    sub_1000446A0();
    uint64_t v4987 = v15;
    sub_1000442F4();
    char v4992 = (char)v77;
    sub_100044AFC();
    uint64_t v4990 = v79;
    sub_100044EE0();
    sub_1000132B8();
    if (sub_100045C08())
    {
      uint64_t v82 = (uint8_t *)sub_100043588();
      uint64_t v4980 = sub_10000D524(64LL);
      v5005[0] = v4980;
      *(_WORD *)uint64_t v82 = 514;
      v82[2] = 32;
      sub_1000434B8();
      v82[3] = 8;
      uint64_t v83 = sub_100043678();
      id v84 = sub_100043854(v83, "identifier");
      sub_1000459D0((uint64_t)v84);
      sub_100046F4C();
      uint64_t v85 = sub_100046570();
      sub_100045630( v85,  v86,  v87,  v88,  v89,  v90,  v91,  v92,  v1145,  v1248,  v1351,  v1454,  v1557,  v1660,  v1762,  v1864,  v1966,  v2067,  v2168,  v2268,  v2367,  v2465,  v2562,  v2658,  v2753,  v2847,  v2940,  v3031,  v3120,  v3207,  v3292,  v3375,  v3456,  v3535,  v3612,  v3687,  v3760,  v3831,  v3900,  v3967,  v4032,  v4095,  v4156,  v4215,  v4272,  v4327,  v4380,  v4431,  v4480,
        v4527,
        v4572,
        v4615,
        v4656,
        v4695,
        v4732,
        v4767,
        v4800,
        v4831,
        v4860,
        v4887,
        v4912,
        v4935,
        v4956);
      sub_100043024();
      sub_100013360();
      sub_100043F84();
      sub_1000435DC();

      v82[12] = 32;
      sub_1000447F8();
      v82[13] = 8;
      sub_100043E18();
      uint64_t v93 = (uint64_t)(v82 + 14);
      sub_100043154(v4981, v4976);
      sub_100043C08(6LL, v4981, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4975 + 16));
      sub_100040370(&qword_10006A418, (uint64_t (*)(uint64_t))&type metadata accessor for ToolVisibilityFlag);
      uint64_t v95 = sub_10004696C(v94);
      uint64_t v74 = v96;
      sub_10000F508(6LL, *(uint64_t (**)(uint64_t, uint64_t))(v4975 + 8));
      *(void *)(v76 + 544) = sub_100044874(v95, v97, v5005);
      sub_100045474(v4978, v76 + 552);
      sub_10004316C();
      sub_100043BF8();
      sub_1000440CC();
      sub_1000440C4();
      sub_100044304(v4994);
      sub_100043ADC((void *)&_mh_execute_header, v5003, (os_log_type_t)v15, "%s: Visibility flags: %s", v82);
      sub_1000442BC(v4980);
      sub_10000F2F0(v4980);
      sub_10000F2F0((uint64_t)v82);

      unint64_t v98 = sub_1000474C4();
    }

    else
    {
      uint64_t v76 = v5004;
      uint64_t v93 = *(void *)(v5004 + 1080);
      id v100 = *(void **)(v5004 + 576);
      sub_1000434B8();
      sub_100043678();
      sub_100013360();
      sub_100043F84();
      sub_1000435DC();

      sub_1000447F8();
      sub_100043E18();
      sub_100043BF8();
      sub_1000440CC();
      sub_1000440C4();
      sub_100044304(v4994);
      sub_10004593C();
      unint64_t v98 = sub_100045488();
    }

    v99(v98);
    uint64_t v101 = (void *)v76;
    if (*(void *)(v76 + 1672))
    {
      uint64_t v102 = sub_100043240();
      sub_100044AD4(v102);
      *(void *)(v76 + 1888) = sub_1000431DC();
      sub_100042F20();
      sub_100043160();
LABEL_214:
      sub_100042EB0();
      return;
    }

    [(id)sub_100044BB4() requiresUnlock];
    uint64_t v173 = sub_1000440B0();
    if (v175)
    {
      sub_100046418();
      v176();
      uint64_t v177 = sub_1000459E0();
      sub_100044390(v177);
      uint64_t v101 = (void *)v5004;
      sub_1000447A4( v74,  enum case for RuntimeRequirement.deviceState(_:),  *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v76 + 104));
      sub_100044EF0();
      sub_100045CD8();
      sub_10004609C();
    }

    else
    {
      v174(v173, enum case for ToolAuthenticationPolicy.none(_:));
    }

    uint64_t v178 = v101[72];
    v101[54] = &OBJC_PROTOCOL___WFLinkActionProtocol;
    if (sub_100043D04(v178))
    {
      sub_100044604();
      sub_100044F38(v179);
    }

    else
    {
      sub_100046F98();
      uint64_t v193 = objc_opt_self(&OBJC_CLASS___WFHandleIntentAction);
      sub_100043AF8(v193);
      uint64_t v194 = sub_100046598();
      if (v195) {
        uint64_t v196 = (unsigned int *)&enum case for ToolTypeDefinition.siriIntent(_:);
      }
      else {
        uint64_t v196 = (unsigned int *)&enum case for ToolTypeDefinition.action(_:);
      }
      sub_100045C98(v194, v196);
    }

    if ([(id)sub_100046F10() isDiscontinued])
    {
      uint64_t v93 = v101[161];
      sub_1000441C0();
      sub_100043254();
      uint64_t v101 = (void *)v5004;
      sub_100043248();
      sub_1000432E0(v93);
      uint64_t v197 = objc_opt_self(&OBJC_CLASS___WFLinkAction);
      uint64_t v198 = sub_100045244(v197);
      *(void *)(v5004 + 1984) = v198;
      if (v198)
      {
        sub_100043240();
        id v199 = sub_100043C20();
        *(void *)(v5004 + 1992) = sub_1000431DC();
        sub_100042F20();
        sub_100043160();
        goto LABEL_214;
      }
    }

    if ([(id)v101[72] isResidentCompatible])
    {
      sub_1000448E4();
      sub_100043254();
      uint64_t v101 = (void *)v5004;
      sub_100043248();
      sub_1000432E0(v93);
    }

    uint64_t v200 = v101[232];
    uint64_t v201 = sub_100043EB8();
    uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v201);
    id v203 = sub_10004341C(ObjCClassFromMetadata, "unevaluatedResourceObjectsOfClass:");
    uint64_t v204 = (uint64_t)&qword_10006A3D0;
    uint64_t v23 = (uint64_t)&OBJC_CLASS___WFResource_ptr;
    sub_100043C10();
    sub_1000442C4(&qword_10006A3D8);
    sub_100044A6C(v205);
    sub_100043D6C();
    sub_1000442FC((uint64_t)&qword_10006A3D0);
    sub_100043024();
    uint64_t v206 = sub_10004492C();
    if (v206)
    {
      uint64_t v23 = v206;
      if (v206 < 1)
      {
LABEL_260:
        __break(1u);
        goto LABEL_261;
      }

      uint64_t v204 = sub_100043EC4();
      uint64_t v35 = 0LL;
      uint64_t v76 = (uint64_t)sub_100050CD0;
      do
      {
        if ((v204 & 1) != 0) {
          uint64_t v207 = (uint64_t)sub_1000430AC(v5001 + 8 * v35);
        }
        else {
          uint64_t v207 = sub_1000445EC(v35);
        }
        uint64_t v15 = v207;
        ++v35;
        sub_1000448C4();
        sub_100045618();
        sub_1000449A4();
        sub_1000453B4(*(void *)(*(void *)(v5004 + 400) + 16LL));
        sub_100044180();
        sub_100037FF8();
      }

      while (v23 != v35);
    }

    sub_100044088();
    uint64_t v208 = sub_10004536C();
    uint64_t v209 = swift_getObjCClassFromMetadata(v208);
    id v210 = sub_10004341C(v209, "unevaluatedResourceObjectsOfClass:");
    sub_100043D38((uint64_t)v210);
    sub_100043D6C();
    sub_1000442FC(v204);
    *(void *)(v5004 + 2008) = v200;
    sub_100043024();
    uint64_t v4999 = sub_10004492C();
    if (v4999)
    {
      sub_10004635C();
      if (v130 != v41)
      {
LABEL_261:
        __break(1u);
        goto LABEL_262;
      }

      uint64_t v211 = sub_1000441D8();
      sub_10004751C(v211);
      LODWORD(v4990) = enum case for RuntimeRequirement.featureFlag(_:);
      do
      {
        if ((v4992 & 1) != 0) {
          uint64_t v212 = (uint64_t)sub_1000430AC(v5001 + 8 * v15);
        }
        else {
          uint64_t v212 = sub_1000445EC(v15);
        }
        uint64_t v204 = v212;
        sub_100043F10();
        sub_100045F40();
        char v213 = sub_100047174();
        sub_100044050(v213);
        uint64_t v23 = (uint64_t)sub_100050CD0;
        sub_100037F10();
        sub_100045CC4();
        sub_100044180();
        sub_100037FF8();

        sub_100047138();
      }

      while (!v117);
    }

    uint64_t v214 = *(void *)(v5004 + 1672);
    sub_100044088();
    if (v214)
    {
      sub_100043240();
      sub_100043C20();
      *(void *)(v5004 + 2016) = sub_1000431DC();
      sub_100042F20();
      sub_100043160();
      goto LABEL_214;
    }

    sub_100043230();
    if (sub_100043E10())
    {
      uint64_t v215 = (void *)sub_100043EA0();
    }

    else
    {
      sub_100008D58();
      uint64_t v215 = &_swiftEmptySetSingleton;
    }

    v5005[9] = (uint64_t)v215;
    sub_100043230();
    if (sub_100043E10())
    {
      uint64_t v216 = (void *)sub_100043EA0();
    }

    else
    {
      sub_100008D58();
      uint64_t v216 = &_swiftEmptySetSingleton;
    }

    uint64_t v217 = sub_100043EA8((uint64_t)v216);
    uint64_t v218 = &type metadata accessor for WFDeviceIdiomResource;
    uint64_t v219 = swift_getObjCClassFromMetadata(v217);
    id v220 = sub_10004341C(v219, "unevaluatedResourceObjectsOfClass:");
    sub_100043D38((uint64_t)v220);
    sub_100043D6C();
    sub_1000442FC(v204);
    char v222 = v221;
    uint64_t v4983 = v200;
    sub_100043024();
    uint64_t v5002 = sub_100047418();
    if (v5002)
    {
      LODWORD(v4999) = sub_10004622C();
      uint64_t v76 = 0LL;
      LODWORD(v4990) = enum case for WFDeviceIdiomResource.Requirement.notEqualTo(_:);
      LODWORD(v4987) = enum case for RuntimePlatform.watch(_:);
      LODWORD(v4994) = enum case for RuntimePlatform.macintosh(_:);
      while (1)
      {
        id v223 = (v4999 & 1) != 0 ? sub_1000430AC((uint64_t)v222) : (id)sub_100045DA8();
        uint64_t v218 = v223;
        sub_1000456F8();
        sub_100046664();
        sub_10004707C();
        if (v117) {
          break;
        }
        sub_1000455D4();
        if (v226)
        {
          sub_10000F508(0LL, *(uint64_t (**)(uint64_t, uint64_t))(v35 + 96));
          sub_1000432D0();
          if (!(!v117 & v225)) {
            __asm { BR              X9 }
          }

          goto LABEL_224;
        }

        sub_10000F508(0LL, *(uint64_t (**)(uint64_t, uint64_t))(v35 + 8));
        sub_1000462C0();
        if (v228) {
          goto LABEL_167;
        }
      }

      sub_100043184(*(uint64_t (**)(uint64_t))(v35 + 96));
      sub_1000432D0();
      if (!(!v117 & v225)) {
        __asm { BR              X9 }
      }

void sub_100033968()
{
}

void sub_1000339A0()
{
}

uint64_t sub_1000339D8(uint64_t a1, uint64_t a2)
{
  uint64_t v64 = a1;
  uint64_t v4 = type metadata accessor for UUID(0LL);
  __chkstk_darwin(v4);
  uint64_t v56 = (char *)&v52 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for ToolDatabase.LaunchServicesDatabaseVersion(0LL);
  uint64_t v52 = *(void *)(v6 - 8);
  uint64_t v53 = v6;
  __chkstk_darwin(v6);
  uint64_t v57 = (char *)&v52 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for LaunchServicesSnapshot.DatabaseVersion(0LL);
  uint64_t v59 = *(void *)(v8 - 8);
  uint64_t v60 = v8;
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v55 = (char *)&v52 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v54 = (char *)&v52 - v12;
  __chkstk_darwin(v11);
  uint64_t v58 = (char *)&v52 - v13;
  uint64_t v14 = type metadata accessor for LaunchServicesSnapshot.State(0LL);
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v18 = (char *)&v52 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = __chkstk_darwin(v16);
  uint64_t v21 = (char *)&v52 - v20;
  uint64_t v61 = a2;
  uint64_t result = LaunchServicesSnapshot.stateByBundleId.getter(v19);
  uint64_t v23 = result;
  int64_t v24 = 0LL;
  uint64_t v25 = *(void *)(result + 64);
  uint64_t v62 = result + 64;
  uint64_t v26 = 1LL << *(_BYTE *)(result + 32);
  uint64_t v27 = -1LL;
  if (v26 < 64) {
    uint64_t v27 = ~(-1LL << v26);
  }
  unint64_t v28 = v27 & v25;
  int64_t v63 = (unint64_t)(v26 + 63) >> 6;
  if ((v27 & v25) == 0) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v29 = __clz(__rbit64(v28));
  v28 &= v28 - 1;
  for (unint64_t i = v29 | (v24 << 6); ; unint64_t i = __clz(__rbit64(v32)) + (v24 << 6))
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v15 + 16))( v21,  *(void *)(v23 + 56) + *(void *)(v15 + 72) * i,  v14);
    (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v18, v21, v14);
    ToolDatabase.Accessor.indexLaunchServicesState(_:)(v18);
    if (v2)
    {
      (*(void (**)(char *, uint64_t))(v15 + 8))(v18, v14);
      return swift_release(v23);
    }

    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v18, v14);
    if (v28) {
      goto LABEL_4;
    }
LABEL_5:
    if (__OFADD__(v24++, 1LL))
    {
      __break(1u);
LABEL_30:
      __break(1u);
      return result;
    }

    if (v24 >= v63) {
      goto LABEL_26;
    }
    unint64_t v32 = *(void *)(v62 + 8 * v24);
    if (!v32) {
      break;
    }
LABEL_17:
    unint64_t v28 = (v32 - 1) & v32;
  }

  int64_t v33 = v24 + 1;
  if (v24 + 1 >= v63) {
    goto LABEL_26;
  }
  unint64_t v32 = *(void *)(v62 + 8 * v33);
  if (v32) {
    goto LABEL_16;
  }
  int64_t v33 = v24 + 2;
  if (v24 + 2 >= v63) {
    goto LABEL_26;
  }
  unint64_t v32 = *(void *)(v62 + 8 * v33);
  if (v32) {
    goto LABEL_16;
  }
  int64_t v33 = v24 + 3;
  if (v24 + 3 >= v63) {
    goto LABEL_26;
  }
  unint64_t v32 = *(void *)(v62 + 8 * v33);
  if (v32)
  {
LABEL_16:
    int64_t v24 = v33;
    goto LABEL_17;
  }

  int64_t v33 = v24 + 4;
  if (v24 + 4 < v63)
  {
    unint64_t v32 = *(void *)(v62 + 8 * v33);
    if (!v32)
    {
      while (1)
      {
        int64_t v24 = v33 + 1;
        if (__OFADD__(v33, 1LL)) {
          goto LABEL_30;
        }
        if (v24 >= v63) {
          goto LABEL_26;
        }
        unint64_t v32 = *(void *)(v62 + 8 * v24);
        ++v33;
        if (v32) {
          goto LABEL_17;
        }
      }
    }

    goto LABEL_16;
  }

LABEL_26:
  uint64_t v34 = v60;
  uint64_t v36 = v58;
  uint64_t v35 = v59;
  uint64_t v37 = swift_release(v23);
  LaunchServicesSnapshot.version.getter(v37);
  uint64_t v38 = type metadata accessor for ToolDatabase.LaunchServicesSnapshotDatabaseVersionKey(0LL);
  sub_100040370( &qword_10006A338,  (uint64_t (*)(uint64_t))&type metadata accessor for ToolDatabase.LaunchServicesSnapshotDatabaseVersionKey);
  ToolDatabase.Accessor.store<A>(_:for:)(v36, v38, v38, v39);
  if (v2) {
    return (*(uint64_t (**)(char *, uint64_t))(v35 + 8))(v36, v34);
  }
  uint64_t v40 = *(uint64_t (**)(char *, uint64_t))(v35 + 8);
  uint64_t v41 = v40(v36, v34);
  uint64_t v42 = v54;
  uint64_t v43 = LaunchServicesSnapshot.version.getter(v41);
  uint64_t v44 = v56;
  LaunchServicesSnapshot.DatabaseVersion.uuid.getter(v43);
  uint64_t v45 = v40(v42, v34);
  uint64_t v46 = v55;
  uint64_t v47 = LaunchServicesSnapshot.version.getter(v45);
  uint64_t v48 = LaunchServicesSnapshot.DatabaseVersion.sequenceNumber.getter(v47);
  v40(v46, v34);
  uint64_t v49 = v57;
  ToolDatabase.LaunchServicesDatabaseVersion.init(uuid:sequenceNumber:)(v44, v48);
  uint64_t v50 = type metadata accessor for ToolDatabase.LaunchServicesDatabaseVersionKey(0LL);
  sub_100040370( &qword_10006A340,  (uint64_t (*)(uint64_t))&type metadata accessor for ToolDatabase.LaunchServicesDatabaseVersionKey);
  ToolDatabase.Accessor.store<A>(_:for:)(v49, v50, v50, v51);
  return (*(uint64_t (**)(char *, uint64_t))(v52 + 8))(v49, v53);
}

  __break(1u);
  return result;
}

uint64_t sub_100033E70(uint64_t a1)
{
  uint64_t v24 = a1;
  uint64_t v2 = type metadata accessor for LinkSnapshot.State(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v6 = (char *)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = __chkstk_darwin(v4);
  uint64_t v9 = (char *)&v22 - v8;
  uint64_t result = LinkSnapshot.stateByContainerId.getter(v7);
  uint64_t v11 = result;
  int64_t v12 = 0LL;
  uint64_t v13 = *(void *)(result + 64);
  uint64_t v22 = result + 64;
  uint64_t v14 = 1LL << *(_BYTE *)(result + 32);
  uint64_t v15 = -1LL;
  if (v14 < 64) {
    uint64_t v15 = ~(-1LL << v14);
  }
  unint64_t v16 = v15 & v13;
  int64_t v23 = (unint64_t)(v14 + 63) >> 6;
  if ((v15 & v13) == 0) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v17 = __clz(__rbit64(v16));
  v16 &= v16 - 1;
  for (unint64_t i = v17 | (v12 << 6); ; unint64_t i = __clz(__rbit64(v20)) + (v12 << 6))
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v3 + 16))( v9,  *(void *)(v11 + 56) + *(void *)(v3 + 72) * i,  v2);
    (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v6, v9, v2);
    ToolDatabase.Accessor.indexLinkState(_:)(v6);
    if (v1)
    {
      (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
      return swift_release(v11);
    }

    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v6, v2);
    if (v16) {
      goto LABEL_4;
    }
LABEL_5:
    if (__OFADD__(v12++, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v12 >= v23) {
      return swift_release(v11);
    }
    unint64_t v20 = *(void *)(v22 + 8 * v12);
    if (!v20) {
      break;
    }
LABEL_17:
    unint64_t v16 = (v20 - 1) & v20;
  }

  int64_t v21 = v12 + 1;
  if (v12 + 1 >= v23) {
    return swift_release(v11);
  }
  unint64_t v20 = *(void *)(v22 + 8 * v21);
  if (v20) {
    goto LABEL_16;
  }
  int64_t v21 = v12 + 2;
  if (v12 + 2 >= v23) {
    return swift_release(v11);
  }
  unint64_t v20 = *(void *)(v22 + 8 * v21);
  if (v20) {
    goto LABEL_16;
  }
  int64_t v21 = v12 + 3;
  if (v12 + 3 >= v23) {
    return swift_release(v11);
  }
  unint64_t v20 = *(void *)(v22 + 8 * v21);
  if (v20) {
    goto LABEL_16;
  }
  int64_t v21 = v12 + 4;
  if (v12 + 4 >= v23) {
    return swift_release(v11);
  }
  unint64_t v20 = *(void *)(v22 + 8 * v21);
  if (v20)
  {
LABEL_16:
    int64_t v12 = v21;
    goto LABEL_17;
  }

  while (1)
  {
    int64_t v12 = v21 + 1;
    if (__OFADD__(v21, 1LL)) {
      break;
    }
    if (v12 >= v23) {
      return swift_release(v11);
    }
    unint64_t v20 = *(void *)(v22 + 8 * v12);
    ++v21;
    if (v20) {
      goto LABEL_17;
    }
  }

uint64_t sub_1000340C4()
{
  uint64_t v0 = type metadata accessor for ToolDatabase.Version(0LL);
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v2 = __chkstk_darwin(v0);
  uint64_t v4 = (char *)&v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  ToolDatabase.Version.init()(v2);
  uint64_t v5 = type metadata accessor for ToolDatabase.VersionKey(0LL);
  sub_100040370(&qword_10006A330, (uint64_t (*)(uint64_t))&type metadata accessor for ToolDatabase.VersionKey);
  ToolDatabase.Accessor.store<A>(_:for:)(v4, v5, v5, v6);
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v4, v0);
}

void sub_100034190( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  a19 = v22;
  a20 = v23;
  uint64_t v25 = v24;
  uint64_t v43 = v26;
  uint64_t v28 = v27;
  uint64_t v30 = v29(0LL);
  uint64_t v31 = *(void *)(v30 - 8);
  sub_100046B98();
  __chkstk_darwin(v32);
  uint64_t v34 = (char *)&v42 - v33;
  sub_10000844C(v25);
  sub_100044D98();
  __chkstk_darwin(v35);
  sub_100046708();
  uint64_t v36 = sub_1000466CC();
  sub_1000412CC(v36, v37, v25);
  uint64_t v38 = 1LL;
  uint64_t v39 = sub_100046BE4();
  sub_10004746C(v39, v40, v41);
  v43(v34, &a10);
  if (!v20)
  {
    sub_100045C90((uint64_t)v34, *(uint64_t (**)(uint64_t, uint64_t))(v31 + 8));
    uint64_t v38 = 0LL;
LABEL_5:
    sub_10000848C(v28, v38, 1LL, v30);
    goto LABEL_6;
  }

  sub_100045C90((uint64_t)v34, *(uint64_t (**)(uint64_t, uint64_t))(v31 + 8));
LABEL_6:
  sub_100008D04();
}

uint64_t sub_1000342AC(uint64_t a1)
{
  uint64_t v26 = Set.init(minimumCapacity:)(*(void *)(a1 + 16), &type metadata for String);
  uint64_t result = sub_100040C98(a1, v27);
  uint64_t v3 = v27[0];
  uint64_t v4 = v27[1];
  int64_t v5 = v27[3];
  unint64_t v6 = v28;
  int64_t v7 = (unint64_t)(v27[2] + 64LL) >> 6;
  if (!v28) {
    goto LABEL_3;
  }
LABEL_2:
  unint64_t v8 = __clz(__rbit64(v6));
  v6 &= v6 - 1;
  unint64_t v9 = v8 | (v5 << 6);
  while (1)
  {
    uint64_t v14 = (uint64_t *)(*(void *)(v3 + 48) + 16 * v9);
    uint64_t v15 = *v14;
    uint64_t v16 = v14[1];
    sub_1000436BC();
    uint64_t v17 = sub_10003C084(v25, v15, v16);
    uint64_t result = sub_100045DA0(v17, v18, v19, v20, v21, v22, v23, v24, v25[0], v25[1]);
    if (v6) {
      goto LABEL_2;
    }
LABEL_3:
    int64_t v10 = v5 + 1;
    if (__OFADD__(v5, 1LL)) {
      break;
    }
    if (v10 >= v7) {
      goto LABEL_21;
    }
    unint64_t v11 = *(void *)(v4 + 8 * v10);
    int64_t v12 = v5 + 1;
    if (!v11)
    {
      int64_t v12 = v5 + 2;
      if (v5 + 2 >= v7) {
        goto LABEL_21;
      }
      unint64_t v11 = *(void *)(v4 + 8 * v12);
      if (!v11)
      {
        int64_t v12 = v5 + 3;
        if (v5 + 3 >= v7) {
          goto LABEL_21;
        }
        unint64_t v11 = *(void *)(v4 + 8 * v12);
        if (!v11)
        {
          int64_t v12 = v5 + 4;
          if (v5 + 4 >= v7) {
            goto LABEL_21;
          }
          unint64_t v11 = *(void *)(v4 + 8 * v12);
          if (!v11)
          {
            int64_t v12 = v5 + 5;
            if (v5 + 5 >= v7) {
              goto LABEL_21;
            }
            unint64_t v11 = *(void *)(v4 + 8 * v12);
            if (!v11)
            {
              int64_t v13 = v5 + 6;
              while (v13 < v7)
              {
                unint64_t v11 = *(void *)(v4 + 8 * v13++);
                if (v11)
                {
                  int64_t v12 = v13 - 1;
                  goto LABEL_18;
                }
              }

LABEL_21:
              sub_100043C48();
              return v26;
            }
          }
        }
      }
    }

    unint64_t v6 = (v12 - 1) & v12;
  }

  int64_t v13 = v11 + 4;
  if (v13 >= v7) {
    return swift_release(v2);
  }
  int64_t v12 = *(void *)(v3 + 8 * v13);
  if (v12)
  {
    unint64_t v8 = v13;
    goto LABEL_21;
  }

  while (1)
  {
    unint64_t v8 = v13 + 1;
    if (__OFADD__(v13, 1LL)) {
      break;
    }
    if (v8 >= v7) {
      return swift_release(v2);
    }
    int64_t v12 = *(void *)(v3 + 8 * v8);
    ++v13;
    if (v12) {
      goto LABEL_21;
    }
  }

    uint64_t v17 = (v23 - 1) & v23;
  }

  uint64_t v24 = v22 + 4;
  if (v24 >= v18) {
    return swift_release(a1);
  }
  uint64_t v23 = *(void *)(v26 + 8 * v24);
  if (v23)
  {
    uint64_t v19 = v24;
    goto LABEL_21;
  }

  while (1)
  {
    uint64_t v19 = v24 + 1;
    if (__OFADD__(v24, 1LL)) {
      break;
    }
    if (v19 >= v18) {
      return swift_release(a1);
    }
    uint64_t v23 = *(void *)(v26 + 8 * v19);
    ++v24;
    if (v23) {
      goto LABEL_21;
    }
  }

  unint64_t v6 = v7;
LABEL_47:
  sub_100051430(v4, (v12 - v4) / 16, v6);
  return 1LL;
}

void sub_10003441C()
{
  uint64_t v2 = v1;
  uint64_t v5 = sub_1000477B0(v3, v4);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  sub_10004586C();
  uint64_t v9 = v7 - v8;
  __chkstk_darwin(v10);
  int64_t v12 = (char *)v22 - v11;
  uint64_t v13 = *(void *)(v0 + 16);
  uint64_t v14 = (unint64_t *)sub_100046BE4();
  sub_100040370(v14, v15);
  v22[1] = Set.init(minimumCapacity:)(v13, v5);
  uint64_t v16 = *(void *)(v0 + 16);
  if (v16)
  {
    sub_100045544();
    v22[0] = v0;
    uint64_t v18 = v0 + v17;
    uint64_t v19 = *(void *)(v6 + 72);
    uint64_t v20 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
    do
    {
      v20(v9, v18, v5);
      uint64_t v21 = sub_1000460A8();
      v2(v21);
      (*(void (**)(char *, uint64_t))(v6 + 8))(v12, v5);
      v18 += v19;
      --v16;
    }

    while (v16);
    sub_1000456E0();
  }

  else
  {
    sub_100042E4C();
  }

  sub_1000436A4();
}

uint64_t sub_10003452C(uint64_t a1)
{
  uint64_t v2 = Set.init(minimumCapacity:)(*(void *)(a1 + 16), &type metadata for String);
  uint64_t v10 = v2;
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3)
  {
    uint64_t v4 = (uint64_t *)(a1 + 40);
    do
    {
      uint64_t v5 = *(v4 - 1);
      uint64_t v6 = *v4;
      swift_bridgeObjectRetain(*v4);
      sub_10003C084(v9, v5, v6);
      swift_bridgeObjectRelease(v9[1]);
      v4 += 2;
      --v3;
    }

    while (v3);
    swift_bridgeObjectRelease(a1);
    return v10;
  }

  else
  {
    uint64_t v7 = v2;
    swift_bridgeObjectRelease(a1);
  }

  return v7;
}

unint64_t *sub_1000345DC(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 16) > *(void *)(a2 + 16) >> 3) {
    return sub_100039814(a1, a2);
  }
  sub_100039230(a1);
  return (unint64_t *)a2;
}

void sub_10003462C()
{
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  uint64_t v8 = v7;
  uint64_t v9 = v3(0LL);
  sub_100040370(v2, v4);
  ToolKitSeedSnapshot.adding(other:)(v8, v9, v10);
  if (v0) {
    *uint64_t v6 = v0;
  }
  sub_100008D04();
}

uint64_t sub_1000346AC@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v7 = type metadata accessor for Logger(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100009A44(a1, (uint64_t)v50);
  if ((swift_dynamicCast(v49, v50, (char *)&type metadata for Any + 8, &type metadata for String, 6LL) & 1) != 0)
  {
    uint64_t v11 = v49[0];
    uint64_t v12 = v49[1];
    uint64_t v13 = type metadata accessor for TypedValue.PrimitiveValue(0LL);
    uint64_t v14 = swift_allocBox(v13);
    uint64_t v16 = (double *)v15;
    *uint64_t v15 = v11;
    v15[1] = v12;
    uint64_t v17 = (unsigned int *)&enum case for TypedValue.PrimitiveValue.string(_:);
LABEL_5:
    (*(void (**)(double *, void, uint64_t))(*(void *)(v13 - 8) + 104LL))(v16, *v17, v13);
    *a3 = v14;
    uint64_t v20 = enum case for TypedValue.primitive(_:);
    uint64_t v21 = type metadata accessor for TypedValue(0LL);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v21 - 8) + 104LL))(a3, v20, v21);
    return sub_10000848C((uint64_t)a3, 0LL, 1LL, v21);
  }

  sub_100009A44(a1, (uint64_t)v50);
  if ((swift_dynamicCast(v49, v50, (char *)&type metadata for Any + 8, &type metadata for Int, 6LL) & 1) != 0)
  {
    uint64_t v18 = v49[0];
    uint64_t v13 = type metadata accessor for TypedValue.PrimitiveValue(0LL);
    uint64_t v14 = swift_allocBox(v13);
    uint64_t v16 = v19;
    *uint64_t v19 = (double)v18;
    uint64_t v17 = (unsigned int *)&enum case for TypedValue.PrimitiveValue.number(_:);
    goto LABEL_5;
  }

  uint64_t v47 = v3;
  static WFLog.subscript.getter(WFLogCategoryToolKitIndexing);
  sub_100009A44(a1, (uint64_t)v50);
  id v23 = a2;
  uint64_t v24 = (os_log_s *)Logger.logObject.getter(v23);
  os_log_type_t v25 = static os_log_type_t.error.getter();
  int v26 = v25;
  if (os_log_type_enabled(v24, v25))
  {
    uint64_t v27 = swift_slowAlloc(22LL, -1LL);
    int v45 = v26;
    unint64_t v28 = (uint8_t *)v27;
    uint64_t v43 = (void *)swift_slowAlloc(8LL, -1LL);
    uint64_t v46 = swift_slowAlloc(32LL, -1LL);
    uint64_t DynamicType = (uint64_t)v23;
    v49[0] = v46;
    uint64_t v42 = v28;
    *(_DWORD *)unint64_t v28 = 138412546;
    os_log_t v44 = v24;
    id v29 = v23;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&DynamicType, v49);
    uint64_t v30 = v43;
    *uint64_t v43 = v23;

    uint64_t v31 = v42;
    *((_WORD *)v42 + 6) = 2080;
    uint64_t v32 = v51;
    uint64_t v33 = sub_1000411D0(v50, v51);
    uint64_t DynamicType = swift_getDynamicType(v33, v32, 1LL);
    uint64_t v34 = sub_10000844C(&qword_10006A4B8);
    uint64_t v35 = String.init<A>(describing:)(&DynamicType, v34);
    unint64_t v37 = v36;
    uint64_t DynamicType = sub_100038098(v35, v36, v49);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&DynamicType, v49);
    swift_bridgeObjectRelease(v37);
    sub_100040830(v50);
    os_log_t v38 = v44;
    _os_log_impl( (void *)&_mh_execute_header,  v44,  (os_log_type_t)v45,  "Unhandled compared value in parameter: %@: %s",  v31,  0x16u);
    sub_10000844C(&qword_10006A320);
    swift_arrayDestroy(v30, 1LL);
    swift_slowDealloc(v30, -1LL, -1LL);
    uint64_t v39 = v46;
    swift_arrayDestroy(v46, 1LL);
    swift_slowDealloc(v39, -1LL, -1LL);
    swift_slowDealloc(v31, -1LL, -1LL);
  }

  else
  {

    sub_100040830(v50);
  }

  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  uint64_t v40 = type metadata accessor for TypedValue(0LL);
  return sub_10000848C((uint64_t)a3, 1LL, 1LL, v40);
}

uint64_t sub_100034A90(char *a1, uint64_t a2)
{
  uint64_t v31 = a1;
  uint64_t v4 = sub_10000844C(&qword_10006A3A8);
  uint64_t v5 = __chkstk_darwin(v4);
  id v29 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v26 - v7;
  uint64_t v9 = type metadata accessor for ToolVisibilityFlag(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v26 - v14;
  uint64_t v16 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
  uint64_t v28 = v2;
  v16(v13, v2, v9);
  sub_100040370(&qword_10006A3F8, (uint64_t (*)(uint64_t))&type metadata accessor for ToolVisibilityFlag);
  uint64_t v18 = v17;
  dispatch thunk of SetAlgebra.intersection(_:)(a2, v9, v17);
  sub_100040370(&qword_10006A410, (uint64_t (*)(uint64_t))&type metadata accessor for ToolVisibilityFlag);
  uint64_t v27 = a2;
  char v20 = dispatch thunk of static Equatable.== infix(_:_:)(v15, a2, v9, v19) ^ 1;
  uint64_t v30 = v4;
  uint64_t v21 = &v8[*(int *)(v4 + 48)];
  *uint64_t v8 = v20 & 1;
  if ((v20 & 1) != 0)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v15, v9);
    uint64_t v23 = v27;
    v16(v21, v27, v9);
    v16(v13, v23, v9);
    dispatch thunk of SetAlgebra.formUnion(_:)(v13, v9, v18);
    uint64_t v22 = *(void (**)(char *, char *, uint64_t))(v10 + 32);
  }

  else
  {
    uint64_t v22 = *(void (**)(char *, char *, uint64_t))(v10 + 32);
    v22(v21, v15, v9);
  }

  uint64_t v24 = &v29[*(int *)(v30 + 48)];
  v22(v24, v21, v9);
  v22(v31, v24, v9);
  return v20 & 1;
}

uint64_t sub_100034CC4(char *a1, uint64_t a2)
{
  uint64_t v31 = a1;
  uint64_t v4 = sub_10000844C(&qword_10006A448);
  uint64_t v5 = __chkstk_darwin(v4);
  id v29 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v26 - v7;
  uint64_t v9 = type metadata accessor for ToolFlag(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v26 - v14;
  uint64_t v16 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
  uint64_t v28 = v2;
  v16(v13, v2, v9);
  sub_100040370(&qword_10006A3F0, (uint64_t (*)(uint64_t))&type metadata accessor for ToolFlag);
  uint64_t v18 = v17;
  dispatch thunk of SetAlgebra.intersection(_:)(a2, v9, v17);
  sub_100040370(&qword_10006A450, (uint64_t (*)(uint64_t))&type metadata accessor for ToolFlag);
  uint64_t v27 = a2;
  char v20 = dispatch thunk of static Equatable.== infix(_:_:)(v15, a2, v9, v19) ^ 1;
  uint64_t v30 = v4;
  uint64_t v21 = &v8[*(int *)(v4 + 48)];
  *uint64_t v8 = v20 & 1;
  if ((v20 & 1) != 0)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v15, v9);
    uint64_t v23 = v27;
    v16(v21, v27, v9);
    v16(v13, v23, v9);
    dispatch thunk of SetAlgebra.formUnion(_:)(v13, v9, v18);
    uint64_t v22 = *(void (**)(char *, char *, uint64_t))(v10 + 32);
  }

  else
  {
    uint64_t v22 = *(void (**)(char *, char *, uint64_t))(v10 + 32);
    v22(v21, v15, v9);
  }

  uint64_t v24 = &v29[*(int *)(v30 + 48)];
  v22(v24, v21, v9);
  v22(v31, v24, v9);
  return v20 & 1;
}

void sub_100034EF8(void *a1)
{
  sub_10000F674();
  sub_10000F6AC();
}

uint64_t sub_100034F38@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for ToolVisibilityFlag(0LL);
  uint64_t v5 = swift_projectBox(a1);
  swift_beginAccess(v5, v7, 0LL, 0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, v5, v4);
}

uint64_t sub_100034FA8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(WFExecutionPlatformPhone);
  uint64_t v6 = v5;
  uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  if (v4 == v7 && v6 == v8) {
    goto LABEL_27;
  }
  uint64_t v10 = v8;
  char v11 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v6, v7, v8, 0LL);
  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(v10);
  if ((v11 & 1) == 0)
  {
    uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(WFExecutionPlatformPad);
    uint64_t v14 = v13;
    uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
    if (v12 == v15 && v14 == v16)
    {
      swift_bridgeObjectRelease_n(v14, 2LL);
    }

    else
    {
      uint64_t v18 = v16;
      char v19 = _stringCompareWithSmolCheck(_:_:expecting:)(v12, v14, v15, v16, 0LL);
      swift_bridgeObjectRelease(v14);
      swift_bridgeObjectRelease(v18);
      if ((v19 & 1) == 0)
      {
        uint64_t v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(WFExecutionPlatformWatch);
        uint64_t v22 = v21;
        uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
        if (v20 == v23 && v22 == v24)
        {
          swift_bridgeObjectRelease_n(v22, 2LL);
        }

        else
        {
          uint64_t v26 = v24;
          char v27 = _stringCompareWithSmolCheck(_:_:expecting:)(v20, v22, v23, v24, 0LL);
          swift_bridgeObjectRelease(v22);
          swift_bridgeObjectRelease(v26);
          if ((v27 & 1) == 0)
          {
            uint64_t v28 = static String._unconditionallyBridgeFromObjectiveC(_:)(WFExecutionPlatformDesktop);
            uint64_t v30 = v29;
            uint64_t v31 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
            if (v28 == v31 && v30 == v32)
            {
              swift_bridgeObjectRelease_n(v30, 2LL);
            }

            else
            {
              uint64_t v34 = v32;
              char v35 = _stringCompareWithSmolCheck(_:_:expecting:)(v28, v30, v31, v32, 0LL);
              swift_bridgeObjectRelease(v30);
              swift_bridgeObjectRelease(v34);
              if ((v35 & 1) == 0)
              {
                uint64_t v36 = static String._unconditionallyBridgeFromObjectiveC(_:)(WFExecutionPlatformXR);
                uint64_t v6 = v37;
                uint64_t v38 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
                if (v36 == v38 && v6 == v39)
                {
                  swift_bridgeObjectRelease_n(v6, 2LL);
                }

                else
                {
                  uint64_t v41 = v39;
                  char v42 = _stringCompareWithSmolCheck(_:_:expecting:)(v36, v6, v38, v39, 0LL);
                  swift_bridgeObjectRelease(v6);
                  swift_bridgeObjectRelease(v41);
                  if ((v42 & 1) == 0)
                  {
                    _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000003BLL,  0x800000010005A690LL,  "BackgroundShortcutRunner/ToolKitIndexer.swift",  45LL,  2LL,  1114LL,  0);
                    __break(1u);
LABEL_27:
                    swift_bridgeObjectRelease_n(v6, 2LL);
                    goto LABEL_28;
                  }
                }

                uint64_t v43 = (unsigned int *)&enum case for RuntimePlatform.vision(_:);
                goto LABEL_29;
              }
            }

            uint64_t v43 = (unsigned int *)&enum case for RuntimePlatform.macintosh(_:);
            goto LABEL_29;
          }
        }

        uint64_t v43 = (unsigned int *)&enum case for RuntimePlatform.watch(_:);
        goto LABEL_29;
      }
    }

    uint64_t v43 = (unsigned int *)&enum case for RuntimePlatform.pad(_:);
    goto LABEL_29;
  }

uint64_t sub_1000352A0(uint64_t a1)
{
  uint64_t v3 = swift_bridgeObjectRetain(a1);
  uint64_t v4 = sub_10003DC98(v3);
  swift_bridgeObjectRelease(a1);
  uint64_t v7 = v4;
  sub_10003DB5C((uint64_t *)&v7);
  uint64_t v5 = (uint64_t)v7;
  if (v1) {
    swift_release(v7);
  }
  return v5;
}

void sub_100035308( uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, __int128 a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, void *a16, uint64_t a17)
{
  LODWORD(v184) = a6;
  uint64_t v182 = a5;
  uint64_t v180 = a4;
  uint64_t v178 = a3;
  uint64_t v170 = a1;
  uint64_t v183 = a12;
  __int128 v181 = a11;
  uint64_t v179 = a9;
  uint64_t v20 = sub_10000844C(&qword_10006A3B0);
  __chkstk_darwin(v20);
  uint64_t v154 = (char *)&v147 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v151 = type metadata accessor for TypeIdentifier(0LL);
  uint64_t v156 = *(void *)(v151 - 8);
  __chkstk_darwin(v151);
  id v155 = (char *)&v147 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v157 = _s15ActionParameterVMa(0LL);
  uint64_t v150 = *(void *)(v157 - 8);
  __chkstk_darwin(v157);
  uint64_t v158 = (char *)&v147 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v153 = sub_10000844C(&qword_10006A468);
  __chkstk_darwin(v153);
  uint64_t v149 = (char *)&v147 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v25 = sub_10000844C(&qword_10006A470);
  uint64_t v26 = __chkstk_darwin(v25);
  id v152 = (unint64_t *)((char *)&v147 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  __chkstk_darwin(v26);
  uint64_t v29 = (char *)&v147 - v28;
  uint64_t v30 = type metadata accessor for ToolFlag(0LL);
  uint64_t v31 = *(void *)(v30 - 8);
  uint64_t v32 = __chkstk_darwin(v30);
  uint64_t v34 = (char *)&v147 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v32);
  uint64_t v36 = (char *)&v147 - v35;
  id v169 = a2;
  uint64_t v187 = a2;
  uint64_t v188 = v178;
  uint64_t v189 = v180;
  uint64_t v190 = v182;
  char v191 = v184 & 1;
  uint64_t v168 = a7;
  uint64_t v192 = a7;
  uint64_t v193 = a8;
  uint64_t v194 = v179;
  uint64_t v195 = a10;
  __int128 v196 = v181;
  uint64_t v197 = v183;
  uint64_t v37 = i;
  ToolDatabase.Savepoint.perform<A>(work:)(&v199, sub_100040FE0);
  uint64_t v38 = v37;
  if (!v37)
  {
    uint64_t v185 = v36;
    uint64_t v162 = v34;
    uint64_t v163 = v31;
    uint64_t v164 = v30;
    uint64_t v166 = a10;
    uint64_t v148 = (uint64_t *)v29;
    uint64_t v39 = a13;
    uint64_t v40 = v199;
    if ((unint64_t)a13 >> 62)
    {
      if (a13 < 0) {
        uint64_t v144 = a13;
      }
      else {
        uint64_t v144 = a13 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain(a13);
      uint64_t v41 = _CocoaArrayWrapper.endIndex.getter(v144);
    }

    else
    {
      uint64_t v41 = *(void *)((a13 & 0xFFFFFFFFFFFFF8LL) + 0x10);
      swift_bridgeObjectRetain(a13);
    }

    char v42 = v169;
    uint64_t v43 = v168;
    uint64_t v44 = v166;
    uint64_t v45 = v185;
    id v167 = v40;
    uint64_t v165 = a13;
    if (v41)
    {
      unint64_t v161 = a13 & 0xC000000000000001LL;
      uint64_t v46 = 4LL;
      uint64_t v160 = (char *)&type metadata for () + 8;
      uint64_t v159 = v41;
      do
      {
        if (v161) {
          id v47 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v46 - 4, v39);
        }
        else {
          id v47 = *(id *)(v39 + 8 * v46);
        }
        uint64_t v48 = v47;
        if (__OFADD__(v46 - 4, 1LL))
        {
          __break(1u);
          swift_bridgeObjectRelease(i);
          (*(void (**)(char *, uint64_t))(v156 + 8))(v45, v44);
          sub_100040FB8(v43, _s15ActionParameterVMa);
          return;
        }

        id v49 = [v42 localizedNameWithContext:v47];
        uint64_t v182 = static String._unconditionallyBridgeFromObjectiveC(_:)(v49);
        unint64_t v184 = v50;

        id v51 = [v42 localizedDescriptionSummaryWithContext:v48];
        if (v51)
        {
          uint64_t v52 = v51;
          uint64_t v180 = static String._unconditionallyBridgeFromObjectiveC(_:)(v51);
          uint64_t v183 = v53;
        }

        else
        {
          uint64_t v180 = 0LL;
          uint64_t v183 = 0LL;
        }

        id v54 = [v42 localizedDescriptionAttributionMarkdownStringWithContext:v48];
        if (v54)
        {
          uint64_t v55 = v54;
          uint64_t v178 = static String._unconditionallyBridgeFromObjectiveC(_:)(v54);
          *(void *)&__int128 v181 = v56;
        }

        else
        {
          uint64_t v178 = 0LL;
          *(void *)&__int128 v181 = 0LL;
        }

        id v57 = [v42 localizedDescriptionResultWithContext:v48];
        if (v57)
        {
          uint64_t v58 = v57;
          uint64_t v59 = static String._unconditionallyBridgeFromObjectiveC(_:)(v57);
          uint64_t v179 = v60;
        }

        else
        {
          uint64_t v59 = 0LL;
          uint64_t v179 = 0LL;
        }

        id v61 = [v42 localizedDescriptionNoteWithContext:v48];
        if (v61)
        {
          uint64_t v62 = v61;
          uint64_t v175 = static String._unconditionallyBridgeFromObjectiveC(_:)(v61);
          uint64_t v177 = v63;
        }

        else
        {
          uint64_t v175 = 0LL;
          uint64_t v177 = 0LL;
        }

        uint64_t i = v38;
        id v64 = [v42 localizedDescriptionRequiresWithContext:v48];
        uint64_t v172 = v46 - 3;
        uint64_t v173 = v59;
        if (v64)
        {
          char v65 = v64;
          uint64_t v174 = static String._unconditionallyBridgeFromObjectiveC(_:)(v64);
          uint64_t v176 = v66;
        }

        else
        {
          uint64_t v174 = 0LL;
          uint64_t v176 = 0LL;
        }

        uint64_t v67 = v163;
        id v68 = [v42 localizedDefaultOutputNameWithContext:v48];
        if (v68)
        {
          uint64_t v69 = v68;
          uint64_t v70 = static String._unconditionallyBridgeFromObjectiveC(_:)(v68);
          uint64_t v72 = v71;
        }

        else
        {
          uint64_t v70 = 0LL;
          uint64_t v72 = 0LL;
        }

        uint64_t v73 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v67 + 16);
        uint64_t v74 = v44;
        uint64_t v75 = v67;
        uint64_t v76 = v164;
        uint64_t v77 = v73(v45, v74, v164);
        uint64_t v78 = v162;
        static ToolFlag.isDiscontinued.getter(v77);
        sub_100040370(&qword_10006A3F0, (uint64_t (*)(uint64_t))&type metadata accessor for ToolFlag);
        char v80 = dispatch thunk of SetAlgebra.isSuperset(of:)(v78, v76, v79);
        uint64_t v81 = *(void (**)(char *, uint64_t))(v75 + 8);
        uint64_t v82 = v78;
        uint64_t v83 = v185;
        v81(v82, v76);
        id v84 = (id)((uint64_t (*)(char *, uint64_t))v81)(v83, v76);
        uint64_t v171 = v46;
        if ((v80 & 1) != 0)
        {
          id v84 = [v42 localizedDiscontinuedDescriptionWithContext:v48];
          uint64_t v85 = v184;
          uint64_t v86 = v175;
          if (v84)
          {
            uint64_t v87 = v84;
            uint64_t v88 = static String._unconditionallyBridgeFromObjectiveC(_:)(v84);
          }

          else
          {
            uint64_t v88 = 0LL;
          }
        }

        else
        {
          uint64_t v88 = 0LL;
          uint64_t v85 = v184;
          uint64_t v86 = v175;
        }

        unint64_t v184 = (unint64_t)&v147;
        __chkstk_darwin(v84);
        *(&v147 - 18) = (uint64_t)v167;
        *(&v147 - 17) = (uint64_t)v48;
        *(&v147 - 16) = v182;
        *(&v147 - 15) = v85;
        *(&v147 - 14) = v70;
        *(&v147 - 13) = v72;
        uint64_t v89 = v183;
        *(&v147 - 12) = v180;
        *(&v147 - 11) = v89;
        uint64_t v90 = v181;
        *(&v147 - 10) = v178;
        *(&v147 - 9) = v90;
        uint64_t v91 = v179;
        *(&v147 - 8) = v173;
        *(&v147 - 7) = v91;
        uint64_t v92 = v177;
        *(&v147 - 6) = v86;
        *(&v147 - 5) = v92;
        uint64_t v93 = v176;
        *(&v147 - 4) = v174;
        *(&v147 - 3) = v93;
        uint64_t v145 = (void *)v88;
        uint64_t v146 = v94;
        uint64_t v182 = v94;
        uint64_t v95 = i;
        ToolDatabase.Savepoint.perform<A>(work:)(&v200, sub_100041008);
        uint64_t i = v95;
        if (v95)
        {
          swift_bridgeObjectRelease(v85);

          swift_bridgeObjectRelease(v165);
          swift_bridgeObjectRelease(v72);
          swift_bridgeObjectRelease(v89);
          swift_bridgeObjectRelease(v90);
          swift_bridgeObjectRelease(v91);
          swift_bridgeObjectRelease(v92);
          swift_bridgeObjectRelease(v93);
          swift_bridgeObjectRelease(v182);
          return;
        }

        swift_bridgeObjectRelease(v85);

        swift_bridgeObjectRelease(v72);
        swift_bridgeObjectRelease(v89);
        swift_bridgeObjectRelease(v90);
        swift_bridgeObjectRelease(v91);
        swift_bridgeObjectRelease(v92);
        swift_bridgeObjectRelease(v93);
        swift_bridgeObjectRelease(v182);
        uint64_t v46 = v171 + 1;
        char v42 = v169;
        uint64_t v39 = v165;
        uint64_t v43 = v168;
        uint64_t v44 = v166;
        uint64_t v45 = v185;
        uint64_t v38 = i;
      }

      while (v172 != v159);
    }

    uint64_t v96 = swift_bridgeObjectRelease(v39);
    __chkstk_darwin(v96);
    uint64_t v97 = v167;
    uint64_t v145 = a14;
    uint64_t v146 = (uint64_t)v167;
    unint64_t v98 = ToolDatabase.Savepoint.perform<A>(work:)(&v197, sub_10004105C);
    if (!v38)
    {
      __chkstk_darwin(v98);
      id v100 = ToolDatabase.Savepoint.perform<A>(work:)(v99, sub_100041074);
      __chkstk_darwin(v100);
      uint64_t v145 = (void *)v43;
      uint64_t v146 = (uint64_t)v97;
      ToolDatabase.Savepoint.perform<A>(work:)(&v147, sub_10004108C);
      uint64_t v185 = (char *)&type metadata for () + 8;
      uint64_t v183 = a17;
      uint64_t v101 = swift_bridgeObjectRetain(*a16);
      unint64_t v102 = 0LL;
      uint64_t v103 = v151;
      uint64_t v104 = (uint64_t)v158;
      uint64_t v105 = v153;
      for (i = v101; ; uint64_t v101 = i)
      {
        unint64_t v106 = *(void *)(v101 + 16);
        uint64_t v107 = (uint64_t)v154;
        if (v102 == v106)
        {
          uint64_t v108 = 1LL;
          uint64_t v109 = (uint64_t)v152;
        }

        else
        {
          if (v102 >= v106)
          {
            __break(1u);
LABEL_73:
            __break(1u);
LABEL_74:
            __break(1u);
LABEL_75:
            sub_100041358(v107, &qword_10006A3B0);
            _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000003FLL,  0x800000010005A5E0LL,  "BackgroundShortcutRunner/ToolKitIndexer.swift",  45LL,  2LL,  997LL,  0);
            __break(1u);
            return;
          }

          unint64_t v184 = v102 + 1;
          uint64_t v110 = (uint64_t)&v149[*(int *)(v105 + 48)];
          sub_100041230( v101 + ((*(unsigned __int8 *)(v150 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v150 + 80))
          + *(void *)(v150 + 72) * v102,
            v110,
            _s15ActionParameterVMa);
          uint64_t v109 = (uint64_t)v152;
          uint64_t v111 = (uint64_t)v152 + *(int *)(v105 + 48);
          *id v152 = v102;
          sub_100041264(v110, v111, _s15ActionParameterVMa);
          uint64_t v108 = 0LL;
          unint64_t v102 = v184;
          uint64_t v107 = (uint64_t)v154;
        }

        sub_10000848C(v109, v108, 1LL, v105);
        uint64_t v112 = v109;
        uint64_t v113 = v148;
        sub_1000412F8(v112, (uint64_t)v148, &qword_10006A470);
        if (sub_1000084E0((uint64_t)v113, 1LL, v105) == 1)
        {
          uint64_t v140 = swift_bridgeObjectRelease(i);
          __chkstk_darwin(v140);
          uint64_t v141 = v167;
          uint64_t v146 = (uint64_t)v167;
          uint64_t v142 = ToolDatabase.Savepoint.perform<A>(work:)(&v197, sub_1000410A4);
          __chkstk_darwin(v142);
          *(&v147 - 4) = v143;
          *(&v147 - 3) = (uint64_t)v42;
          uint64_t v145 = v141;
          ToolDatabase.Savepoint.perform<A>(work:)(&v147, sub_1000410BC);
          return;
        }

        uint64_t v114 = v105;
        uint64_t v115 = *v113;
        sub_100041264((uint64_t)v113 + *(int *)(v114 + 48), v104, _s15ActionParameterVMa);
        uint64_t v117 = TypeInstance.typeIdentifiers.getter(v116);
        uint64_t v118 = v117;
        char v119 = *(_BYTE *)(v117 + 32);
        uint64_t v120 = 1LL << v119;
        unint64_t v121 = *(void *)(v117 + 56);
        if (v121)
        {
          uint64_t v122 = 0LL;
          uint64_t v123 = v155;
        }

        else
        {
          uint64_t v123 = v155;
          if ((v119 & 0x3Fu) < 7) {
            goto LABEL_58;
          }
          unint64_t v121 = *(void *)(v117 + 64);
          if (!v121)
          {
            uint64_t v127 = 9LL;
            while (v127 - 7 < (unint64_t)(v120 + 63) >> 6)
            {
              unint64_t v121 = *(void *)(v117 + 8 * v127++);
              if (v121)
              {
                uint64_t v122 = v127 - 8;
                goto LABEL_46;
              }
            }

LABEL_46:
        unint64_t v124 = __clz(__rbit64(v121));
        uint64_t v125 = v124 + (v122 << 6);
        if (v125 == v120) {
          goto LABEL_58;
        }
        if (v125 < 0 || v125 >= v120) {
          goto LABEL_73;
        }
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v156 + 16))( v107,  *(void *)(v117 + 48) + *(void *)(v156 + 72) * v125,  v103);
        uint64_t v126 = 0LL;
LABEL_59:
        sub_10000848C(v107, v126, 1LL, v103);
        swift_bridgeObjectRelease(v118);
        uint64_t v128 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(v156 + 32))(v123, v107, v103);
        __chkstk_darwin(v128);
        *(&v147 - 4) = (uint64_t)v167;
        *(&v147 - 3) = v104;
        uint64_t v145 = v123;
        uint64_t v146 = v115;
        uint64_t v129 = ToolDatabase.Savepoint.perform<A>(work:)(&v197, sub_1000410D8);
        uint64_t v130 = *(void *)(v104 + *(int *)(v157 + 44));
        uint64_t v131 = *(void *)(v130 + 16);
        if (v131)
        {
          unint64_t v184 = v102;
          uint64_t v132 = swift_bridgeObjectRetain(v130);
          uint64_t v133 = (uint64_t *)(v130 + 72);
          do
          {
            uint64_t v134 = *(v133 - 4);
            uint64_t v135 = *(v133 - 3);
            uint64_t v136 = *(v133 - 2);
            uint64_t v137 = *(v133 - 1);
            uint64_t v138 = *v133;
            v198[0] = *(v133 - 5);
            v198[1] = v134;
            v198[2] = v135;
            v198[3] = v136;
            v198[4] = v137;
            v198[5] = v138;
            __chkstk_darwin(v132);
            char v139 = v158;
            *(&v147 - 4) = (uint64_t)v167;
            *(&v147 - 3) = (uint64_t)v139;
            uint64_t v145 = v198;
            swift_bridgeObjectRetain(v138);
            swift_bridgeObjectRetain(v134);
            swift_bridgeObjectRetain(v136);
            ToolDatabase.Savepoint.perform<A>(work:)(&v197, sub_1000410F4);
            v133 += 6;
            swift_bridgeObjectRelease(v138);
            swift_bridgeObjectRelease(v136);
            uint64_t v132 = swift_bridgeObjectRelease(v134);
            --v131;
          }

          while (v131);
          uint64_t v129 = (void *)swift_bridgeObjectRelease(v130);
          char v42 = v169;
          uint64_t v103 = v151;
          uint64_t v104 = (uint64_t)v158;
          uint64_t v123 = v155;
          unint64_t v102 = v184;
        }

        __chkstk_darwin(v129);
        uint64_t v145 = v167;
        uint64_t v146 = v104;
        ToolDatabase.Savepoint.perform<A>(work:)(&v197, sub_100041110);
        uint64_t v105 = v153;
        (*(void (**)(void *, uint64_t))(v156 + 8))(v123, v103);
        sub_100040FB8(v104, _s15ActionParameterVMa);
      }
    }
  }

uint64_t sub_1000363C8@<X0>( uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, char a6@<W5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t *a9@<X8>, uint64_t **a10, uint64_t *a11, uint64_t *a12, uint64_t a13, char *a14)
{
  uint64_t v73 = a8;
  uint64_t v58 = a7;
  uint64_t v69 = a4;
  uint64_t v70 = a5;
  uint64_t v68 = a3;
  uint64_t v71 = a1;
  uint64_t v56 = a9;
  uint64_t v65 = a13;
  uint64_t v66 = a14;
  uint64_t v60 = a12;
  uint64_t v59 = a11;
  id v57 = a10;
  unsigned int v67 = a6 & 1;
  uint64_t v15 = type metadata accessor for ToolVisibilityFlag(0LL);
  uint64_t v76 = *(void *)(v15 - 8);
  uint64_t v77 = v15;
  __chkstk_darwin(v15);
  uint64_t v17 = (char *)&v56 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v79 = type metadata accessor for ToolAuthenticationPolicy(0LL);
  uint64_t v18 = *(void *)(v79 - 8);
  __chkstk_darwin(v79);
  uint64_t v20 = (char *)&v56 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v21 = type metadata accessor for ToolFlag(0LL);
  uint64_t v78 = *(void *)(v21 - 8);
  __chkstk_darwin(v21);
  uint64_t v23 = (char *)&v56 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v24 = type metadata accessor for TypeInstance(0LL);
  uint64_t v25 = *(void *)(v24 - 8);
  __chkstk_darwin(v24);
  uint64_t v81 = (char *)&v56 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v27 = [a2 identifier];
  uint64_t v62 = static String._unconditionallyBridgeFromObjectiveC(_:)(v27);
  uint64_t v63 = v28;

  unsigned int v29 = [a2 outputsMultipleItems];
  uint64_t v75 = v24;
  uint64_t v72 = v25;
  id v64 = a2;
  if (v29)
  {
    uint64_t v30 = v17;
    TypeInstance.asCollection()();
  }

  else
  {
    uint64_t v31 = v24;
    uint64_t v30 = v17;
    (*(void (**)(char *, uint64_t, uint64_t))(v25 + 16))(v81, v58, v31);
  }

  uint64_t v32 = v79;
  uint64_t v33 = v65;
  uint64_t v34 = v60;
  uint64_t v35 = v59;
  uint64_t v61 = v18;
  uint64_t v36 = v57[1];
  uint64_t v60 = *v57;
  uint64_t v59 = v36;
  uint64_t v37 = *(void (**)(char *, uint64_t *, uint64_t))(v78 + 16);
  uint64_t v65 = v21;
  v37(v23, v35, v21);
  uint64_t v38 = *v34;
  (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))(v20, v33, v32);
  swift_bridgeObjectRetain(v36);
  swift_bridgeObjectRetain(v38);
  id v39 = [v64 fillingProvider];
  uint64_t v40 = static String._unconditionallyBridgeFromObjectiveC(_:)(v39);
  char v42 = v41;

  uint64_t v43 = v66;
  swift_beginAccess(v66, v80, 0LL, 0LL);
  uint64_t v45 = v76;
  uint64_t v44 = v77;
  (*(void (**)(char *, char *, uint64_t))(v76 + 16))(v30, v43, v77);
  id v64 = v42;
  uint64_t v55 = v40;
  uint64_t v46 = v20;
  id v54 = v20;
  id v47 = v59;
  uint64_t v66 = v23;
  uint64_t v53 = v23;
  uint64_t v48 = v63;
  uint64_t v49 = v74;
  uint64_t v50 = ToolDatabase.Accessor.addTool(localId:toolType:sourceContainerId:attributionContainerId:outputTypeInstance:customIcon:deprecationReplacementId:flags:requirements:authenticationPolicy:sourceActionProvider:visibilityFlags:)( v62,  v63,  v68,  v69,  v70,  v67,  v81,  v73,  v60,  v59,  v53,  v38,  v54,  v55,  v42,  v30);
  if (v49)
  {
    swift_bridgeObjectRelease(v48);
    swift_bridgeObjectRelease(v47);
    swift_bridgeObjectRelease(v38);
    swift_bridgeObjectRelease(v64);
    (*(void (**)(char *, uint64_t))(v45 + 8))(v30, v44);
    (*(void (**)(char *, uint64_t))(v61 + 8))(v46, v79);
    (*(void (**)(char *, uint64_t))(v78 + 8))(v66, v65);
    return (*(uint64_t (**)(char *, uint64_t))(v72 + 8))(v81, v75);
  }

  else
  {
    uint64_t v52 = v50;
    swift_bridgeObjectRelease(v48);
    swift_bridgeObjectRelease(v47);
    swift_bridgeObjectRelease(v38);
    swift_bridgeObjectRelease(v64);
    (*(void (**)(char *, uint64_t))(v45 + 8))(v30, v44);
    (*(void (**)(char *, uint64_t))(v61 + 8))(v46, v79);
    (*(void (**)(char *, uint64_t))(v78 + 8))(v66, v65);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v72 + 8))(v81, v75);
    *uint64_t v56 = v52;
  }

  return result;
}