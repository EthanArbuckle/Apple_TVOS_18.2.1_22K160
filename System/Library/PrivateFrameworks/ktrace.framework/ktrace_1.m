uint64_t assignWithCopy for RecordInfo.Usage(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = *(void *)(a2 + 80);
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  *(void *)(a1 + 80) = v4;
  v5 = *(void *)(a2 + 96);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  *(void *)(a1 + 96) = v5;
  *(_BYTE *)(a1 + 105) = *(_BYTE *)(a2 + 105);
  *(_BYTE *)(a1 + 106) = *(_BYTE *)(a2 + 106);
  *(_BYTE *)(a1 + 107) = *(_BYTE *)(a2 + 107);
  LODWORD(v5) = *(_DWORD *)(a2 + 108);
  *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
  *(_DWORD *)(a1 + 108) = v5;
  v6 = *(void *)(a2 + 120);
  *(_BYTE *)(a1 + 128) = *(_BYTE *)(a2 + 128);
  *(void *)(a1 + 120) = v6;
  *(_BYTE *)(a1 + 129) = *(_BYTE *)(a2 + 129);
  v7 = *(void *)(a2 + 136);
  *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
  *(void *)(a1 + 136) = v7;
  *(_BYTE *)(a1 + 145) = *(_BYTE *)(a2 + 145);
  *(_BYTE *)(a1 + 146) = *(_BYTE *)(a2 + 146);
  *(_BYTE *)(a1 + 147) = *(_BYTE *)(a2 + 147);
  *(_BYTE *)(a1 + 148) = *(_BYTE *)(a2 + 148);
  *(_BYTE *)(a1 + 149) = *(_BYTE *)(a2 + 149);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v8 = *(void *)(a2 + 184);
  *(_BYTE *)(a1 + 192) = *(_BYTE *)(a2 + 192);
  *(void *)(a1 + 184) = v8;
  v9 = *(void *)(a2 + 200);
  *(_BYTE *)(a1 + 208) = *(_BYTE *)(a2 + 208);
  *(void *)(a1 + 200) = v9;
  return a1;
}

__n128 __swift_memcpy209_8(uint64_t a1, uint64_t a2)
{
  __int128 v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  __int128 v3 = *(_OWORD *)(a2 + 32);
  __int128 v4 = *(_OWORD *)(a2 + 48);
  __int128 v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  __int128 v6 = *(_OWORD *)(a2 + 96);
  __int128 v7 = *(_OWORD *)(a2 + 112);
  __int128 v8 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v8;
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 112) = v7;
  __n128 result = *(__n128 *)(a2 + 160);
  __int128 v10 = *(_OWORD *)(a2 + 176);
  __int128 v11 = *(_OWORD *)(a2 + 192);
  *(_BYTE *)(a1 + 208) = *(_BYTE *)(a2 + 208);
  *(_OWORD *)(a1 + 176) = v10;
  *(_OWORD *)(a1 + 192) = v11;
  *(__n128 *)(a1 + 160) = result;
  return result;
}

uint64_t assignWithTake for RecordInfo.Usage(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v8;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  *(_BYTE *)(a1 + 105) = *(_BYTE *)(a2 + 105);
  *(_BYTE *)(a1 + 106) = *(_BYTE *)(a2 + 106);
  *(_BYTE *)(a1 + 107) = *(_BYTE *)(a2 + 107);
  *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
  *(_DWORD *)(a1 + 108) = *(_DWORD *)(a2 + 108);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(_BYTE *)(a1 + 128) = *(_BYTE *)(a2 + 128);
  *(_BYTE *)(a1 + 129) = *(_BYTE *)(a2 + 129);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
  *(_BYTE *)(a1 + 145) = *(_BYTE *)(a2 + 145);
  *(_BYTE *)(a1 + 146) = *(_BYTE *)(a2 + 146);
  *(_BYTE *)(a1 + 147) = *(_BYTE *)(a2 + 147);
  *(_BYTE *)(a1 + 148) = *(_BYTE *)(a2 + 148);
  *(_BYTE *)(a1 + 149) = *(_BYTE *)(a2 + 149);
  uint64_t v9 = *(void *)(a2 + 160);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  *(void *)(a1 + 160) = v9;
  swift_bridgeObjectRelease();
  uint64_t v10 = *(void *)(a2 + 176);
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  *(void *)(a1 + 176) = v10;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  *(_BYTE *)(a1 + 192) = *(_BYTE *)(a2 + 192);
  *(void *)(a1 + 200) = *(void *)(a2 + 200);
  *(_BYTE *)(a1 + 208) = *(_BYTE *)(a2 + 208);
  return a1;
}

uint64_t getEnumTagSinglePayload for RecordInfo.Usage(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 209)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for RecordInfo.Usage(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 200) = 0LL;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 208) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 209) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 209) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for RecordInfo.Usage()
{
  return &type metadata for RecordInfo.Usage;
}

uint64_t storeEnumTagSinglePayload for RecordInfo.Phase(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 7 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 7) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xF9) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xF8) {
    return ((uint64_t (*)(void))((char *)&loc_186C0C534 + 4 * byte_186C5F038[v4]))();
  }
  *a1 = a2 + 7;
  return ((uint64_t (*)(void))((char *)sub_186C0C568 + 4 * byte_186C5F033[v4]))();
}

uint64_t sub_186C0C568(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_186C0C570(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x186C0C578LL);
  }
  return result;
}

uint64_t sub_186C0C584(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x186C0C58CLL);
  }
  *(_BYTE *)__n128 result = a2 + 7;
  return result;
}

uint64_t sub_186C0C590(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_186C0C598(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for RecordInfo.Phase()
{
  return &type metadata for RecordInfo.Phase;
}

__n128 __swift_memcpy48_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for RecordInfo.FileSize(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 48)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t storeEnumTagSinglePayload for RecordInfo.FileSize(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 40) = 0LL;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }

  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }

  *(_BYTE *)(result + 48) = v3;
  return result;
}

ValueMetadata *type metadata accessor for RecordInfo.FileSize()
{
  return &type metadata for RecordInfo.FileSize;
}

__n128 __swift_memcpy24_8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for RecordInfo.LostEvents(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0xFF && a1[24]) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *a1;
  BOOL v4 = v3 >= 2;
  int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for RecordInfo.LostEvents( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(void *)(result + 8) = 0LL;
    *(void *)(result + 16) = 0LL;
    *(void *)__n128 result = a2 - 255;
    if (a3 >= 0xFF) {
      *(_BYTE *)(result + 24) = 1;
    }
  }

  else
  {
    if (a3 >= 0xFF) {
      *(_BYTE *)(result + 24) = 0;
    }
    if (a2) {
      *(_BYTE *)__n128 result = a2 + 1;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for RecordInfo.LostEvents()
{
  return &type metadata for RecordInfo.LostEvents;
}

__n128 __swift_memcpy25_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for RecordInfo.EndReason(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 25)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *(void *)(a1 + 8) >> 1;
  else {
    int v3 = -1;
  }
  return (v3 + 1);
}

uint64_t storeEnumTagSinglePayload for RecordInfo.EndReason(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0LL;
    *(void *)(result + 16) = 0LL;
    *(_BYTE *)(result + 24) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 25) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = 0LL;
      *(void *)(result + 8) = 2LL * -a2;
      *(void *)(result + 16) = 0LL;
      *(_BYTE *)(result + 24) = 0;
      return result;
    }

    *(_BYTE *)(result + 25) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

uint64_t sub_186C0C7A0(uint64_t a1)
{
  unsigned int v1 = *(unsigned __int8 *)(a1 + 24);
  int v2 = (char)v1;
  unsigned int v3 = v1 >> 6;
  if (v2 >= 0) {
    return v3;
  }
  else {
    return (*(_DWORD *)a1 + 2);
  }
}

uint64_t sub_186C0C7C0(uint64_t result)
{
  *(_BYTE *)(result + 24) &= 0x3Fu;
  return result;
}

uint64_t sub_186C0C7D0(uint64_t result, unsigned int a2)
{
  if (a2 < 2)
  {
    char v2 = *(_BYTE *)(result + 24) & 1 | ((_BYTE)a2 << 6);
    *(void *)(result + 8) &= 1uLL;
    *(_BYTE *)(result + 24) = v2;
  }

  else
  {
    *(void *)(result + 8) = 0LL;
    *(void *)(result + 16) = 0LL;
    *(void *)__n128 result = a2 - 2;
    *(_BYTE *)(result + 24) = 0x80;
  }

  return result;
}

ValueMetadata *type metadata accessor for RecordInfo.EndReason()
{
  return &type metadata for RecordInfo.EndReason;
}

ValueMetadata *type metadata accessor for RecordInfo.EndReason.CodingKeys()
{
  return &type metadata for RecordInfo.EndReason.CodingKeys;
}

uint64_t destroy for Throughput()
{
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for Throughput(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v3 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v3;
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for Throughput(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy32_8(_OWORD *a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

uint64_t assignWithTake for Throughput(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v3 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v3;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for Throughput(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 32)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Throughput(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0LL;
    *(void *)(result + 24) = 0LL;
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0LL;
    if (a3 < 0) {
      *(_BYTE *)(result + 32) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 32) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for Throughput()
{
  return &type metadata for Throughput;
}

uint64_t getEnumTagSinglePayload for TimeSpan(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 24)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t storeEnumTagSinglePayload for TimeSpan(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 8) = 0LL;
    *(void *)(result + 16) = 0LL;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }

  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }

  *(_BYTE *)(result + 24) = v3;
  return result;
}

ValueMetadata *type metadata accessor for TimeSpan()
{
  return &type metadata for TimeSpan;
}

uint64_t getEnumTagSinglePayload for RecordInfo.LostEvents.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xFE) {
    goto LABEL_17;
  }
  if (a2 + 2 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 2) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 2;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }

uint64_t storeEnumTagSinglePayload for RecordInfo.LostEvents.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFD) {
    return ((uint64_t (*)(void))((char *)&loc_186C0CAD4 + 4 * byte_186C5F042[v4]))();
  }
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_186C0CB08 + 4 * byte_186C5F03D[v4]))();
}

uint64_t sub_186C0CB08(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_186C0CB10(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x186C0CB18LL);
  }
  return result;
}

uint64_t sub_186C0CB24(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x186C0CB2CLL);
  }
  *(_BYTE *)__n128 result = a2 + 2;
  return result;
}

uint64_t sub_186C0CB30(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_186C0CB38(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for RecordInfo.LostEvents.CodingKeys()
{
  return &type metadata for RecordInfo.LostEvents.CodingKeys;
}

uint64_t getEnumTagSinglePayload for StandardFile.Mode(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xFB) {
    goto LABEL_17;
  }
  if (a2 + 5 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 5) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 5;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 5;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 5;
    }
  }

uint64_t _s6ktrace10RecordInfoC9EndReasonO10CodingKeysOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFA) {
    return ((uint64_t (*)(void))((char *)&loc_186C0CC30 + 4 * byte_186C5F04C[v4]))();
  }
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_186C0CC64 + 4 * byte_186C5F047[v4]))();
}

uint64_t sub_186C0CC64(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_186C0CC6C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x186C0CC74LL);
  }
  return result;
}

uint64_t sub_186C0CC80(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x186C0CC88LL);
  }
  *(_BYTE *)__n128 result = a2 + 5;
  return result;
}

uint64_t sub_186C0CC8C(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_186C0CC94(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for RecordInfo.FileSize.CodingKeys()
{
  return &type metadata for RecordInfo.FileSize.CodingKeys;
}

uint64_t getEnumTagSinglePayload for RecordInfo.Usage.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xEA) {
    goto LABEL_17;
  }
  if (a2 + 22 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 22) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 22;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 22;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 22;
    }
  }

uint64_t storeEnumTagSinglePayload for RecordInfo.Usage.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 22 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 22) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xEA) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xE9) {
    return ((uint64_t (*)(void))((char *)&loc_186C0CD8C + 4 * byte_186C5F056[v4]))();
  }
  *a1 = a2 + 22;
  return ((uint64_t (*)(void))((char *)sub_186C0CDC0 + 4 * byte_186C5F051[v4]))();
}

uint64_t sub_186C0CDC0(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_186C0CDC8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x186C0CDD0LL);
  }
  return result;
}

uint64_t sub_186C0CDDC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x186C0CDE4LL);
  }
  *(_BYTE *)__n128 result = a2 + 22;
  return result;
}

uint64_t sub_186C0CDE8(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_186C0CDF0(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for RecordInfo.Usage.CodingKeys()
{
  return &type metadata for RecordInfo.Usage.CodingKeys;
}

unint64_t sub_186C0CE10()
{
  unint64_t result = qword_18C6A4BB0[0];
  if (!qword_18C6A4BB0[0])
  {
    unint64_t result = MEMORY[0x186E46630](&unk_186C5F4AC, &type metadata for RecordInfo.Usage.CodingKeys);
    atomic_store(result, qword_18C6A4BB0);
  }

  return result;
}

unint64_t sub_186C0CE58()
{
  unint64_t result = qword_18C6A4DC0[0];
  if (!qword_18C6A4DC0[0])
  {
    unint64_t result = MEMORY[0x186E46630](&unk_186C5F564, &type metadata for RecordInfo.FileSize.CodingKeys);
    atomic_store(result, qword_18C6A4DC0);
  }

  return result;
}

unint64_t sub_186C0CEA0()
{
  unint64_t result = qword_18C6A4FD0[0];
  if (!qword_18C6A4FD0[0])
  {
    unint64_t result = MEMORY[0x186E46630](&unk_186C5F61C, &type metadata for RecordInfo.LostEvents.CodingKeys);
    atomic_store(result, qword_18C6A4FD0);
  }

  return result;
}

unint64_t sub_186C0CEE8()
{
  unint64_t result = qword_18C6A50E0;
  if (!qword_18C6A50E0)
  {
    unint64_t result = MEMORY[0x186E46630](&unk_186C5F58C, &type metadata for RecordInfo.LostEvents.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_18C6A50E0);
  }

  return result;
}

unint64_t sub_186C0CF30()
{
  unint64_t result = qword_18C6A50E8[0];
  if (!qword_18C6A50E8[0])
  {
    unint64_t result = MEMORY[0x186E46630](&unk_186C5F5B4, &type metadata for RecordInfo.LostEvents.CodingKeys);
    atomic_store(result, qword_18C6A50E8);
  }

  return result;
}

unint64_t sub_186C0CF78()
{
  unint64_t result = qword_18C6A5170;
  if (!qword_18C6A5170)
  {
    unint64_t result = MEMORY[0x186E46630](&unk_186C5F4D4, &type metadata for RecordInfo.FileSize.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_18C6A5170);
  }

  return result;
}

unint64_t sub_186C0CFC0()
{
  unint64_t result = qword_18C6A5178;
  if (!qword_18C6A5178)
  {
    unint64_t result = MEMORY[0x186E46630](&unk_186C5F4FC, &type metadata for RecordInfo.FileSize.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_18C6A5178);
  }

  return result;
}

unint64_t sub_186C0D008()
{
  unint64_t result = qword_18C6A5200;
  if (!qword_18C6A5200)
  {
    unint64_t result = MEMORY[0x186E46630](&unk_186C5F41C, &type metadata for RecordInfo.Usage.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_18C6A5200);
  }

  return result;
}

unint64_t sub_186C0D050()
{
  unint64_t result = qword_18C6A5208[0];
  if (!qword_18C6A5208[0])
  {
    unint64_t result = MEMORY[0x186E46630](&unk_186C5F444, &type metadata for RecordInfo.Usage.CodingKeys);
    atomic_store(result, qword_18C6A5208);
  }

  return result;
}

uint64_t sub_186C0D094()
{
  return swift_release();
}

BOOL static PlanSource.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t PlanSource.hash(into:)()
{
  return sub_186C5B5A8();
}

uint64_t PlanSource.hashValue.getter()
{
  return sub_186C5B5D8();
}

uint64_t sub_186C0D120(uint64_t a1, double a2)
{
  uint64_t result = sub_186C2AB58();
  double v5 = (double)result * a2;
  if ((~*(void *)&v5 & 0x7FF0000000000000LL) == 0)
  {
    __break(1u);
    goto LABEL_8;
  }

  if (v5 <= -9.22337204e18)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }

  if (v5 >= 9.22337204e18)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }

  uint64_t result = sub_186C2ABEC();
  uint64_t v6 = result * a1;
  if ((unsigned __int128)(result * (__int128)a1) >> 64 != (result * a1) >> 63)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }

  uint64_t result = (uint64_t)v5 + v6;
  if (__OFADD__((uint64_t)v5, v6)) {
LABEL_11:
  }
    __break(1u);
  return result;
}

uint64_t sub_186C0D1BC()
{
  if (*v0) {
    return 0x654D757043726570LL;
  }
  else {
    return 0xD000000000000012LL;
  }
}

uint64_t sub_186C0D208@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_186C2115C(a1, a2);
  *a3 = result;
  return result;
}

void sub_186C0D22C(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

uint64_t sub_186C0D238()
{
  return sub_186C5B608();
}

uint64_t sub_186C0D260()
{
  return sub_186C5B614();
}

uint64_t sub_186C0D288(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C6A2650);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1895F8858](v3);
  uint64_t v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_186C0D3A4();
  sub_186C5B5F0();
  char v10 = 0;
  sub_186C5B494();
  if (!v1)
  {
    char v9 = 1;
    sub_186C5B4A0();
  }

  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

unint64_t sub_186C0D3A4()
{
  unint64_t result = qword_18C6A52A0;
  if (!qword_18C6A52A0)
  {
    unint64_t result = MEMORY[0x186E46630](&unk_186C609B8, &type metadata for KDebugBufferSize.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_18C6A52A0);
  }

  return result;
}

uint64_t sub_186C0D3E8@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = sub_186C2126C(a1);
  if (!v2)
  {
    *a2 = v5;
    a2[1] = result;
  }

  return result;
}

uint64_t sub_186C0D414(void *a1)
{
  return sub_186C0D288(a1);
}

uint64_t sub_186C0D430(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_186C0D470 + 4 * byte_186C5F774[a1]))( 0x6C61635F72657375LL,  0xEF6B636174735F6CLL);
}

unint64_t sub_186C0D470()
{
  return 0xD000000000000011LL;
}

unint64_t sub_186C0D584()
{
  return 0xD000000000000010LL;
}

uint64_t sub_186C0D5A0(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4)
{
  return sub_186C127E4(a1, a2, a3, a4, (uint64_t (*)(uint64_t))sub_186C0D430);
}

uint64_t sub_186C0D5AC(char a1, char a2)
{
  BOOL v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0) {
    uint64_t v3 = 0x696577746867696CLL;
  }
  else {
    uint64_t v3 = 0x6C616E696769726FLL;
  }
  if (v2) {
    unint64_t v4 = 0xE800000000000000LL;
  }
  else {
    unint64_t v4 = 0xEB00000000746867LL;
  }
  if ((a2 & 1) != 0) {
    uint64_t v5 = 0x696577746867696CLL;
  }
  else {
    uint64_t v5 = 0x6C616E696769726FLL;
  }
  if ((a2 & 1) != 0) {
    unint64_t v6 = 0xEB00000000746867LL;
  }
  else {
    unint64_t v6 = 0xE800000000000000LL;
  }
  if (v3 == v5 && v4 == v6) {
    char v7 = 1;
  }
  else {
    char v7 = sub_186C5B4F4();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_186C0D658(uint64_t a1, uint64_t a2)
{
  return sub_186C1287C(a1, a2, (void (*)(uint64_t))sub_186C0D430);
}

uint64_t sub_186C0D664(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_186C128EC(a1, a2, a3, (void (*)(void))sub_186C0D430);
}

uint64_t sub_186C0D670(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_186C12938(a1, a2, a3, (void (*)(uint64_t))sub_186C0D430);
}

uint64_t sub_186C0D67C@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result = sub_186C2372C();
  *a1 = result;
  return result;
}

uint64_t sub_186C0D6B0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_186C0D430(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_186C0D6D8()
{
  return sub_186C5AF00();
}

uint64_t sub_186C0D734()
{
  return sub_186C5AEF4();
}

uint64_t sub_186C0D780(uint64_t result, uint64_t a2)
{
  if (result < 1)
  {
    __break(1u);
    goto LABEL_22;
  }

  uint64_t v3 = result;
  int64_t v4 = *(void *)(a2 + 16);
  uint64_t v5 = (int8x16_t *)MEMORY[0x18961AFE8];
  if (v4)
  {
    v25 = (int8x16_t *)MEMORY[0x18961AFE8];
    swift_bridgeObjectRetain();
    sub_186C18B68(0LL, v4, 0);
    uint64_t v6 = 0LL;
    uint64_t v5 = v25;
    unint64_t v7 = v25[1].u64[0];
    do
    {
      uint64_t v8 = *(char *)(a2 + v6 + 32);
      unint64_t v9 = v25[1].u64[1];
      if (v7 >= v9 >> 1) {
        sub_186C18B68((char *)(v9 > 1), v7 + 1, 1);
      }
      ++v6;
      __int32 v10 = dword_186C60A0C[v8];
      v25[1].i64[0] = v7 + 1;
      v25[2].i32[v7++] = v10;
    }

    while (v4 != v6);
    swift_bridgeObjectRelease();
  }

  unint64_t v11 = v5[1].u64[0];
  if (v11)
  {
    if (v11 < 8)
    {
      uint64_t v12 = 0LL;
      __int32 v13 = 0;
LABEL_15:
      unint64_t v20 = v11 - v12;
      v21 = &v5[2].i32[v12];
      do
      {
        int v22 = *v21++;
        v13 |= v22;
        --v20;
      }

      while (v20);
      goto LABEL_17;
    }

    uint64_t v12 = v11 & 0x7FFFFFFFFFFFFFF8LL;
    v14 = v5 + 3;
    int8x16_t v15 = 0uLL;
    uint64_t v16 = v11 & 0x7FFFFFFFFFFFFFF8LL;
    int8x16_t v17 = 0uLL;
    do
    {
      int8x16_t v15 = vorrq_s8(v14[-1], v15);
      int8x16_t v17 = vorrq_s8(*v14, v17);
      v14 += 2;
      v16 -= 8LL;
    }

    while (v16);
    int8x16_t v18 = vorrq_s8(v17, v15);
    int8x8_t v19 = vorr_s8(*(int8x8_t *)v18.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v18, v18, 8uLL));
    __int32 v13 = v19.i32[0] | v19.i32[1];
    if (v11 != v12) {
      goto LABEL_15;
    }
  }

uint64_t sub_186C0D9B0(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = MEMORY[0x18961AFE8];
  if (!v1) {
    return v2;
  }
  uint64_t v27 = MEMORY[0x18961AFE8];
  sub_186BEF8C8(0LL, v1, 0);
  uint64_t v2 = v27;
  uint64_t result = sub_186C20724(a1);
  uint64_t v6 = result;
  uint64_t v7 = 0LL;
  uint64_t v8 = a1 + 64;
  int64_t v21 = v1;
  int v22 = v5;
  uint64_t v23 = a1 + 64;
  while ((v6 & 0x8000000000000000LL) == 0 && v6 < 1LL << *(_BYTE *)(a1 + 32))
  {
    unint64_t v11 = (unint64_t)v6 >> 6;
    if (*(_DWORD *)(a1 + 36) != v5) {
      goto LABEL_24;
    }
    uint64_t v24 = v7;
    uint64_t v12 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v6);
    uint64_t v25 = *v12;
    uint64_t v26 = v12[1];
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    sub_186C5ADD4();
    sub_186C5ADD4();
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    unint64_t v13 = *(void *)(v27 + 16);
    unint64_t v14 = *(void *)(v27 + 24);
    if (v13 >= v14 >> 1) {
      uint64_t result = (uint64_t)sub_186BEF8C8((char *)(v14 > 1), v13 + 1, 1);
    }
    *(void *)(v27 + 16) = v13 + 1;
    uint64_t v15 = v27 + 16 * v13;
    *(void *)(v15 + 32) = v25;
    *(void *)(v15 + 40) = v26;
    int64_t v9 = 1LL << *(_BYTE *)(a1 + 32);
    if (v6 >= v9) {
      goto LABEL_25;
    }
    uint64_t v8 = a1 + 64;
    uint64_t v16 = *(void *)(v23 + 8 * v11);
    if ((v16 & (1LL << v6)) == 0) {
      goto LABEL_26;
    }
    int v5 = v22;
    if (*(_DWORD *)(a1 + 36) != v22) {
      goto LABEL_27;
    }
    unint64_t v17 = v16 & (-2LL << (v6 & 0x3F));
    if (v17)
    {
      int64_t v9 = __clz(__rbit64(v17)) | v6 & 0xFFFFFFFFFFFFFFC0LL;
      int64_t v10 = v21;
    }

    else
    {
      unint64_t v18 = v11 + 1;
      unint64_t v19 = (unint64_t)(v9 + 63) >> 6;
      int64_t v10 = v21;
      if (v11 + 1 < v19)
      {
        unint64_t v20 = *(void *)(v23 + 8 * v18);
        if (v20)
        {
LABEL_20:
          int64_t v9 = __clz(__rbit64(v20)) + (v18 << 6);
        }

        else
        {
          while (v19 - 2 != v11)
          {
            unint64_t v20 = *(void *)(a1 + 80 + 8 * v11++);
            if (v20)
            {
              unint64_t v18 = v11 + 1;
              goto LABEL_20;
            }
          }
        }
      }
    }

    uint64_t v7 = v24 + 1;
    uint64_t v6 = v9;
    if (v24 + 1 == v10) {
      return v2;
    }
  }

  __break(1u);
LABEL_23:
  __break(1u);
LABEL_24:
  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
  return result;
}

uint64_t sub_186C0DC14(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = MEMORY[0x18961AFE8];
  if (!v1) {
    return v2;
  }
  uint64_t v3 = a1;
  uint64_t v67 = MEMORY[0x18961AFE8];
  sub_186BEF8C8(0LL, v1, 0);
  uint64_t v2 = v67;
  uint64_t result = sub_186C20724(v3);
  if (result < 0) {
    goto LABEL_31;
  }
  unint64_t v6 = result;
  if (result >= 1LL << *(_BYTE *)(v3 + 32)) {
    goto LABEL_31;
  }
  uint64_t v7 = v3 + 64;
  uint64_t v34 = v3 + 80;
  int64_t v35 = v1;
  uint64_t v8 = 1LL;
  int v36 = v5;
  uint64_t v37 = v3 + 64;
  while (1)
  {
    unint64_t v9 = v6 >> 6;
    if ((*(void *)(v7 + 8 * (v6 >> 6)) & (1LL << v6)) == 0) {
      break;
    }
    if (*(_DWORD *)(v3 + 36) != v5) {
      goto LABEL_27;
    }
    uint64_t v38 = v8;
    int64_t v10 = (uint64_t *)(*(void *)(v3 + 48) + 16 * v6);
    uint64_t v11 = *v10;
    uint64_t v12 = v10[1];
    uint64_t v13 = *(void *)(v3 + 56) + 200 * v6;
    __int128 v40 = *(_OWORD *)v13;
    __int128 v14 = *(_OWORD *)(v13 + 16);
    __int128 v15 = *(_OWORD *)(v13 + 32);
    __int128 v16 = *(_OWORD *)(v13 + 64);
    __int128 v43 = *(_OWORD *)(v13 + 48);
    __int128 v44 = v16;
    __int128 v41 = v14;
    __int128 v42 = v15;
    __int128 v17 = *(_OWORD *)(v13 + 80);
    __int128 v18 = *(_OWORD *)(v13 + 96);
    __int128 v19 = *(_OWORD *)(v13 + 128);
    __int128 v47 = *(_OWORD *)(v13 + 112);
    __int128 v48 = v19;
    __int128 v45 = v17;
    __int128 v46 = v18;
    __int128 v20 = *(_OWORD *)(v13 + 144);
    __int128 v21 = *(_OWORD *)(v13 + 160);
    __int128 v22 = *(_OWORD *)(v13 + 176);
    uint64_t v52 = *(void *)(v13 + 192);
    __int128 v50 = v21;
    __int128 v51 = v22;
    __int128 v49 = v20;
    uint64_t v39 = v11;
    v53[0] = v11;
    v53[1] = v12;
    __int128 v54 = v40;
    __int128 v55 = v41;
    __int128 v56 = v42;
    __int128 v57 = v43;
    __int128 v58 = v44;
    __int128 v59 = v45;
    __int128 v60 = v46;
    __int128 v61 = v47;
    __int128 v62 = v19;
    __int128 v63 = v20;
    __int128 v64 = v21;
    __int128 v65 = v22;
    uint64_t v66 = v52;
    swift_bridgeObjectRetain_n();
    sub_186C24F18((uint64_t)&v40);
    uint64_t result = sub_186C27ED0((uint64_t)v53);
    uint64_t v67 = v2;
    uint64_t v23 = v3;
    unint64_t v25 = *(void *)(v2 + 16);
    unint64_t v24 = *(void *)(v2 + 24);
    if (v25 >= v24 >> 1)
    {
      uint64_t result = (uint64_t)sub_186BEF8C8((char *)(v24 > 1), v25 + 1, 1);
      uint64_t v2 = v67;
    }

    *(void *)(v2 + 16) = v25 + 1;
    uint64_t v26 = v2 + 16 * v25;
    *(void *)(v26 + 32) = v39;
    *(void *)(v26 + 40) = v12;
    char v27 = *(_BYTE *)(v23 + 32);
    uint64_t v7 = v37;
    uint64_t v28 = *(void *)(v37 + 8 * v9);
    if ((v28 & (1LL << v6)) == 0) {
      goto LABEL_29;
    }
    uint64_t v3 = v23;
    int v5 = v36;
    if (*(_DWORD *)(v23 + 36) != v36) {
      goto LABEL_30;
    }
    unint64_t v29 = v28 & (-2LL << (v6 & 0x3F));
    if (v29)
    {
      unint64_t v6 = __clz(__rbit64(v29)) | v6 & 0xFFFFFFFFFFFFFFC0LL;
      int64_t v30 = v35;
    }

    else
    {
      unint64_t v31 = v9 + 1;
      unint64_t v32 = (unint64_t)((1LL << v27) + 63) >> 6;
      int64_t v30 = v35;
      if (v9 + 1 >= v32) {
        goto LABEL_20;
      }
      unint64_t v33 = *(void *)(v37 + 8 * v31);
      if (!v33)
      {
        while (v32 - 2 != v9)
        {
          unint64_t v33 = *(void *)(v34 + 8 * v9++);
          if (v33)
          {
            unint64_t v31 = v9 + 1;
            goto LABEL_19;
          }
        }

uint64_t sub_186C0DEE4(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = MEMORY[0x18961AFE8];
  if (!v1) {
    return v2;
  }
  uint64_t v3 = a1;
  uint64_t v67 = MEMORY[0x18961AFE8];
  sub_186BEF8C8(0LL, v1, 0);
  uint64_t v2 = v67;
  uint64_t result = sub_186C20724(v3);
  if (result < 0) {
    goto LABEL_31;
  }
  unint64_t v6 = result;
  if (result >= 1LL << *(_BYTE *)(v3 + 32)) {
    goto LABEL_31;
  }
  uint64_t v7 = v3 + 64;
  uint64_t v34 = v3 + 80;
  int64_t v35 = v1;
  uint64_t v8 = 1LL;
  int v36 = v5;
  uint64_t v37 = v3 + 64;
  while (1)
  {
    unint64_t v9 = v6 >> 6;
    if ((*(void *)(v7 + 8 * (v6 >> 6)) & (1LL << v6)) == 0) {
      break;
    }
    if (*(_DWORD *)(v3 + 36) != v5) {
      goto LABEL_27;
    }
    uint64_t v38 = v8;
    int64_t v10 = (uint64_t *)(*(void *)(v3 + 48) + 16 * v6);
    uint64_t v11 = *v10;
    uint64_t v12 = v10[1];
    uint64_t v13 = *(void *)(v3 + 56) + 200 * v6;
    __int128 v40 = *(_OWORD *)v13;
    __int128 v14 = *(_OWORD *)(v13 + 16);
    __int128 v15 = *(_OWORD *)(v13 + 32);
    __int128 v16 = *(_OWORD *)(v13 + 64);
    __int128 v43 = *(_OWORD *)(v13 + 48);
    __int128 v44 = v16;
    __int128 v41 = v14;
    __int128 v42 = v15;
    __int128 v17 = *(_OWORD *)(v13 + 80);
    __int128 v18 = *(_OWORD *)(v13 + 96);
    __int128 v19 = *(_OWORD *)(v13 + 128);
    __int128 v47 = *(_OWORD *)(v13 + 112);
    __int128 v48 = v19;
    __int128 v45 = v17;
    __int128 v46 = v18;
    __int128 v20 = *(_OWORD *)(v13 + 144);
    __int128 v21 = *(_OWORD *)(v13 + 160);
    __int128 v22 = *(_OWORD *)(v13 + 176);
    uint64_t v52 = *(void *)(v13 + 192);
    __int128 v50 = v21;
    __int128 v51 = v22;
    __int128 v49 = v20;
    uint64_t v39 = v11;
    v53[0] = v11;
    v53[1] = v12;
    __int128 v54 = v40;
    __int128 v55 = v41;
    __int128 v56 = v42;
    __int128 v57 = v43;
    __int128 v58 = v44;
    __int128 v59 = v45;
    __int128 v60 = v46;
    __int128 v61 = v47;
    __int128 v62 = v19;
    __int128 v63 = v20;
    __int128 v64 = v21;
    __int128 v65 = v22;
    uint64_t v66 = v52;
    swift_bridgeObjectRetain();
    sub_186C24F18((uint64_t)&v40);
    swift_bridgeObjectRetain();
    sub_186C24F18((uint64_t)&v40);
    sub_186C27ED0((uint64_t)v53);
    swift_bridgeObjectRetain();
    uint64_t result = sub_186C27ED0((uint64_t)v53);
    uint64_t v67 = v2;
    uint64_t v23 = v3;
    unint64_t v25 = *(void *)(v2 + 16);
    unint64_t v24 = *(void *)(v2 + 24);
    if (v25 >= v24 >> 1)
    {
      uint64_t result = (uint64_t)sub_186BEF8C8((char *)(v24 > 1), v25 + 1, 1);
      uint64_t v2 = v67;
    }

    *(void *)(v2 + 16) = v25 + 1;
    uint64_t v26 = v2 + 16 * v25;
    *(void *)(v26 + 32) = v39;
    *(void *)(v26 + 40) = v12;
    char v27 = *(_BYTE *)(v23 + 32);
    uint64_t v7 = v37;
    uint64_t v28 = *(void *)(v37 + 8 * v9);
    if ((v28 & (1LL << v6)) == 0) {
      goto LABEL_29;
    }
    uint64_t v3 = v23;
    int v5 = v36;
    if (*(_DWORD *)(v23 + 36) != v36) {
      goto LABEL_30;
    }
    unint64_t v29 = v28 & (-2LL << (v6 & 0x3F));
    if (v29)
    {
      unint64_t v6 = __clz(__rbit64(v29)) | v6 & 0xFFFFFFFFFFFFFFC0LL;
      int64_t v30 = v35;
    }

    else
    {
      unint64_t v31 = v9 + 1;
      unint64_t v32 = (unint64_t)((1LL << v27) + 63) >> 6;
      int64_t v30 = v35;
      if (v9 + 1 >= v32) {
        goto LABEL_20;
      }
      unint64_t v33 = *(void *)(v37 + 8 * v31);
      if (!v33)
      {
        while (v32 - 2 != v9)
        {
          unint64_t v33 = *(void *)(v34 + 8 * v9++);
          if (v33)
          {
            unint64_t v31 = v9 + 1;
            goto LABEL_19;
          }
        }

uint64_t sub_186C0E1D0(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = MEMORY[0x18961AFE8];
  if (!v1) {
    return v2;
  }
  uint64_t v3 = a1;
  uint64_t v69 = MEMORY[0x18961AFE8];
  sub_186BEF8C8(0LL, v1, 0);
  uint64_t v2 = v69;
  uint64_t result = sub_186C20724(v3);
  if (result < 0) {
    goto LABEL_31;
  }
  unint64_t v6 = result;
  if (result >= 1LL << *(_BYTE *)(v3 + 32)) {
    goto LABEL_31;
  }
  uint64_t v7 = v3 + 64;
  uint64_t v35 = v3 + 80;
  int64_t v36 = v1;
  uint64_t v8 = 1LL;
  int v37 = v5;
  uint64_t v38 = v3 + 64;
  uint64_t v39 = v3;
  while (1)
  {
    unint64_t v9 = v6 >> 6;
    if ((*(void *)(v7 + 8 * (v6 >> 6)) & (1LL << v6)) == 0) {
      break;
    }
    if (*(_DWORD *)(v3 + 36) != v5) {
      goto LABEL_27;
    }
    uint64_t v40 = v8;
    uint64_t v10 = *(void *)(v3 + 56);
    uint64_t v11 = (uint64_t *)(*(void *)(v3 + 48) + 16 * v6);
    uint64_t v12 = v2;
    uint64_t v14 = *v11;
    uint64_t v13 = v11[1];
    __int128 v15 = (__int128 *)(v10 + 200 * v6);
    __int128 v42 = *v15;
    __int128 v16 = v15[1];
    __int128 v17 = v15[2];
    __int128 v18 = v15[4];
    __int128 v45 = v15[3];
    __int128 v46 = v18;
    __int128 v43 = v16;
    __int128 v44 = v17;
    __int128 v19 = v15[5];
    __int128 v20 = v15[6];
    __int128 v21 = v15[8];
    __int128 v49 = v15[7];
    __int128 v50 = v21;
    __int128 v47 = v19;
    __int128 v48 = v20;
    __int128 v22 = v15[9];
    __int128 v23 = v15[10];
    __int128 v24 = v15[11];
    uint64_t v54 = *((void *)v15 + 24);
    __int128 v52 = v23;
    __int128 v53 = v24;
    __int128 v51 = v22;
    v55[0] = v14;
    v55[1] = v13;
    __int128 v56 = v42;
    __int128 v57 = v43;
    __int128 v58 = v44;
    __int128 v59 = v45;
    __int128 v60 = v46;
    __int128 v61 = v47;
    __int128 v62 = v48;
    __int128 v63 = v49;
    __int128 v64 = v21;
    __int128 v65 = v22;
    __int128 v66 = v23;
    __int128 v67 = v24;
    uint64_t v68 = v54;
    swift_bridgeObjectRetain();
    sub_186C24F18((uint64_t)&v42);
    swift_bridgeObjectRetain();
    sub_186C24F18((uint64_t)&v42);
    sub_186C27ED0((uint64_t)v55);
    uint64_t v41 = v13;
    swift_bridgeObjectRetain();
    sub_186C5ADD4();
    swift_bridgeObjectRetain();
    sub_186C5ADD4();
    uint64_t v2 = v12;
    swift_bridgeObjectRelease();
    uint64_t result = sub_186C27ED0((uint64_t)v55);
    uint64_t v69 = v12;
    unint64_t v25 = *(void *)(v12 + 16);
    unint64_t v26 = *(void *)(v2 + 24);
    if (v25 >= v26 >> 1)
    {
      uint64_t result = (uint64_t)sub_186BEF8C8((char *)(v26 > 1), v25 + 1, 1);
      uint64_t v2 = v69;
    }

    *(void *)(v2 + 16) = v25 + 1;
    uint64_t v27 = v2 + 16 * v25;
    *(void *)(v27 + 32) = v14;
    *(void *)(v27 + 40) = v41;
    uint64_t v3 = v39;
    char v28 = *(_BYTE *)(v39 + 32);
    uint64_t v7 = v38;
    uint64_t v29 = *(void *)(v38 + 8 * v9);
    if ((v29 & (1LL << v6)) == 0) {
      goto LABEL_29;
    }
    int v5 = v37;
    if (*(_DWORD *)(v39 + 36) != v37) {
      goto LABEL_30;
    }
    unint64_t v30 = v29 & (-2LL << (v6 & 0x3F));
    if (v30)
    {
      unint64_t v6 = __clz(__rbit64(v30)) | v6 & 0xFFFFFFFFFFFFFFC0LL;
      int64_t v31 = v36;
    }

    else
    {
      unint64_t v32 = v9 + 1;
      unint64_t v33 = (unint64_t)((1LL << v28) + 63) >> 6;
      int64_t v31 = v36;
      if (v9 + 1 >= v33) {
        goto LABEL_20;
      }
      unint64_t v34 = *(void *)(v38 + 8 * v32);
      if (!v34)
      {
        while (v33 - 2 != v9)
        {
          unint64_t v34 = *(void *)(v35 + 8 * v9++);
          if (v34)
          {
            unint64_t v32 = v9 + 1;
            goto LABEL_19;
          }
        }

uint64_t sub_186C0E4FC()
{
  return 0x7372656C706D6173LL;
}

uint64_t sub_186C0E514@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  if (a1 == 0x7372656C706D6173LL && a2 == 0xE800000000000000LL)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }

  else
  {
    char v5 = sub_186C5B4F4();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }

  *a3 = v7 & 1;
  return result;
}

void sub_186C0E5A8(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

uint64_t sub_186C0E5B4()
{
  return sub_186C5B608();
}

uint64_t sub_186C0E5DC()
{
  return sub_186C5B614();
}

uint64_t sub_186C0E604(void *a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C6A2658);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1895F8858](v4);
  char v7 = (char *)v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_186C213C0();
  sub_186C5B5F0();
  v9[1] = a2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C6A2660);
  sub_186C28428(&qword_18C6A2668, &qword_18C6A2660, (uint64_t (*)(void))sub_186C21404, MEMORY[0x189618448]);
  sub_186C5B4AC();
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

void *sub_186C0E728@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = sub_186C21448(a1);
  if (!v2) {
    *a2 = result;
  }
  return result;
}

uint64_t sub_186C0E750(void *a1)
{
  return sub_186C0E604(a1, *v1);
}

BOOL sub_186C0E768(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t sub_186C0E780()
{
  if (*v0) {
    return 0xD000000000000012LL;
  }
  else {
    return 0x6E496E6F69746361LL;
  }
}

uint64_t sub_186C0E7C8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_186C215D8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_186C0E7EC()
{
  return sub_186C5B608();
}

uint64_t sub_186C0E814()
{
  return sub_186C5B614();
}

uint64_t sub_186C0E83C@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_186C0F710(a1, &qword_18C6A29C8, (void (*)(void))sub_186C21594, a2);
}

uint64_t sub_186C0E868(void *a1)
{
  return sub_186C0F5C4(a1, *v1, v1[1], &qword_18C6A2678, (void (*)(void *))sub_186C21594);
}

unint64_t sub_186C0E898(uint64_t a1)
{
  BOOL v1 = __OFADD__(a1, 1LL);
  unint64_t result = a1 + 1;
  if (v1)
  {
    __break(1u);
    goto LABEL_13;
  }

  if ((result & 0x8000000000000000LL) != 0)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }

  if (!HIDWORD(result))
  {
    if ((kperf_kdebug_action_set() & 0x80000000) != 0)
    {
      int v8 = MEMORY[0x186E445C0]();
      type metadata accessor for KTraceRecordError();
      sub_186BF0CD4();
      swift_allocError();
      *(void *)uint64_t v9 = 0xD000000000000019LL;
      *(void *)(v9 + 8) = 0x8000000186C66160LL;
      *(_DWORD *)(v9 + 16) = v8;
      swift_storeEnumTagMultiPayload();
      return swift_willThrow();
    }

    uint64_t v3 = kperf_kdebug_filter_create();
    sub_186C5AD74();
    int v4 = kperf_kdebug_filter_add_desc();
    uint64_t v5 = swift_release();
    if (v4 < 0)
    {
      int v6 = MEMORY[0x186E445C0](v5);
      type metadata accessor for KTraceRecordError();
      sub_186BF0CD4();
      swift_allocError();
      *(void *)uint64_t v7 = 0xD00000000000001BLL;
      *(void *)(v7 + 8) = 0x8000000186C66180LL;
    }

    else
    {
      if ((kperf_kdebug_filter_set() & 0x80000000) == 0) {
        return MEMORY[0x186E45D54](v3);
      }
      int v6 = MEMORY[0x186E445C0]();
      type metadata accessor for KTraceRecordError();
      sub_186BF0CD4();
      swift_allocError();
      *(void *)uint64_t v7 = 0xD000000000000019LL;
      *(void *)(v7 + 8) = 0x8000000186C661A0LL;
    }

    *(_DWORD *)(v7 + 16) = v6;
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
    return MEMORY[0x186E45D54](v3);
  }

uint64_t sub_186C0EA64()
{
  if (*v0) {
    return 0x4665736963657270LL;
  }
  else {
    return 0x6E496E6F69746361LL;
  }
}

uint64_t sub_186C0EAB4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_186C21720(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_186C0EAD8()
{
  return sub_186C5B608();
}

uint64_t sub_186C0EB00()
{
  return sub_186C5B614();
}

uint64_t sub_186C0EB28(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v11[1] = a4;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C6A2680);
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1895F8858](v6);
  uint64_t v9 = (char *)v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_186C216DC();
  sub_186C5B5F0();
  char v13 = 0;
  sub_186C5B4A0();
  if (!v4)
  {
    char v12 = 1;
    sub_186C5B47C();
  }

  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t sub_186C0EC50@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_186C2184C(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
  }

  return result;
}

uint64_t sub_186C0EC7C(void *a1)
{
  return sub_186C0EB28(a1, *v1, v1[1], v1[2]);
}

uint64_t sub_186C0EC98(char a1, unint64_t a2)
{
  if ((a1 & 1) == 0) {
    sub_186C5B4F4();
  }
  swift_bridgeObjectRelease();
  uint64_t result = kperf_timer_lightweight_pet_set();
  if ((result & 0x80000000) != 0)
  {
    int v4 = MEMORY[0x186E445C0]();
    type metadata accessor for KTraceRecordError();
    sub_186BF0CD4();
    swift_allocError();
    *(void *)uint64_t v5 = 0xD000000000000018LL;
    *(void *)(v5 + 8) = 0x8000000186C661C0LL;
    goto LABEL_9;
  }

  if ((a2 & 0x8000000000000000LL) != 0)
  {
    __break(1u);
    goto LABEL_12;
  }

  if (HIDWORD(a2))
  {
LABEL_12:
    __break(1u);
    return result;
  }

  uint64_t result = kperf_timer_pet_set();
  if ((result & 0x80000000) == 0) {
    return result;
  }
  int v4 = MEMORY[0x186E445C0]();
  type metadata accessor for KTraceRecordError();
  sub_186BF0CD4();
  swift_allocError();
  strcpy((char *)v5, "set PET timer");
  *(_WORD *)(v5 + 14) = -4864;
LABEL_9:
  *(_DWORD *)(v5 + 16) = v4;
  swift_storeEnumTagMultiPayload();
  return swift_willThrow();
}

uint64_t sub_186C0EE14()
{
  if (*v0) {
    return 0x646E4972656D6974LL;
  }
  else {
    return 1701080941LL;
  }
}

uint64_t sub_186C0EE4C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_186C21A28(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_186C0EE70()
{
  return sub_186C5B608();
}

uint64_t sub_186C0EE98()
{
  return sub_186C5B614();
}

uint64_t sub_186C0EEC0(void *a1, char a2)
{
  char v4 = a2 & 1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C6A2688);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1895F8858](v5);
  uint64_t v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_186C219A0();
  sub_186C5B5F0();
  char v13 = v4;
  char v12 = 0;
  sub_186C219E4();
  sub_186C5B4AC();
  if (!v2)
  {
    char v11 = 1;
    sub_186C5B4A0();
  }

  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_186C0EFF0@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_186C21B14(a1);
  if (!v2)
  {
    *(_BYTE *)a2 = result & 1;
    *(void *)(a2 + 8) = v5;
  }

  return result;
}

uint64_t sub_186C0F020(void *a1)
{
  return sub_186C0EEC0(a1, *v1);
}

uint64_t sub_186C0F03C(char *a1, char *a2)
{
  return sub_186C0D5AC(*a1, *a2);
}

uint64_t sub_186C0F048()
{
  return sub_186C5B5D8();
}

uint64_t sub_186C0F0D0()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_186C0F134()
{
  return sub_186C5B5D8();
}

uint64_t sub_186C0F1B8@<X0>(char *a1@<X8>)
{
  uint64_t v2 = sub_186C5B3BC();
  uint64_t result = swift_bridgeObjectRelease();
  if (v2 == 1) {
    char v4 = 1;
  }
  else {
    char v4 = 2;
  }
  if (!v2) {
    char v4 = 0;
  }
  *a1 = v4;
  return result;
}

void sub_186C0F214(uint64_t *a1@<X8>)
{
  uint64_t v2 = 0x6C616E696769726FLL;
  if (*v1) {
    uint64_t v2 = 0x696577746867696CLL;
  }
  unint64_t v3 = 0xE800000000000000LL;
  if (*v1) {
    unint64_t v3 = 0xEB00000000746867LL;
  }
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_186C0F25C()
{
  return sub_186C5AF00();
}

uint64_t sub_186C0F2B8()
{
  return sub_186C5AEF4();
}

uint64_t sub_186C0F304(uint64_t result, uint64_t a2, unint64_t a3)
{
  if (a2 > 0xFFFFFFFFLL)
  {
    __break(1u);
    goto LABEL_19;
  }

  if ((_DWORD)a2 == -1)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }

  if (((a3 | a2) & 0x8000000000000000LL) != 0)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }

  if (!is_mul_ok(a3, 0x3E8uLL))
  {
LABEL_21:
    __break(1u);
    return result;
  }

  char v3 = result;
  kperf_ns_to_ticks();
  if ((v3 & 1) != 0)
  {
    if ((kperf_lazy_wait_action_set() & 0x80000000) == 0)
    {
      uint64_t result = kperf_lazy_wait_time_threshold_set();
      if ((result & 0x80000000) == 0) {
        return result;
      }
      int v4 = MEMORY[0x186E445C0]();
      type metadata accessor for KTraceRecordError();
      sub_186BF0CD4();
      swift_allocError();
      unint64_t v7 = 0xD00000000000001FLL;
      uint64_t v8 = "set up lazy wait action";
      goto LABEL_15;
    }

    int v4 = MEMORY[0x186E445C0]();
    type metadata accessor for KTraceRecordError();
    sub_186BF0CD4();
    swift_allocError();
    uint64_t v6 = "set up lazy wait action";
    unint64_t v7 = 0xD000000000000017LL;
LABEL_14:
    uint64_t v8 = v6 - 32;
LABEL_15:
    *(void *)uint64_t v5 = v7;
    *(void *)(v5 + 8) = (unint64_t)v8 | 0x8000000000000000LL;
    goto LABEL_16;
  }

  if ((kperf_lazy_cpu_action_set() & 0x80000000) == 0)
  {
    uint64_t result = kperf_lazy_cpu_time_threshold_set();
    if ((result & 0x80000000) == 0) {
      return result;
    }
    int v4 = MEMORY[0x186E445C0]();
    type metadata accessor for KTraceRecordError();
    sub_186BF0CD4();
    swift_allocError();
    uint64_t v6 = "set up lazy CPU time threshold";
    unint64_t v7 = 0xD00000000000001ELL;
    goto LABEL_14;
  }

  int v4 = MEMORY[0x186E445C0]();
  type metadata accessor for KTraceRecordError();
  sub_186BF0CD4();
  swift_allocError();
  *(void *)uint64_t v5 = 0xD000000000000016LL;
  *(void *)(v5 + 8) = 0x8000000186C66220LL;
LABEL_16:
  *(_DWORD *)(v5 + 16) = v4;
  swift_storeEnumTagMultiPayload();
  return swift_willThrow();
}

uint64_t sub_186C0F508()
{
  if (*v0) {
    return 0xD000000000000015LL;
  }
  else {
    return 0x6E496E6F69746361LL;
  }
}

uint64_t sub_186C0F550@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_186C21CC0(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_186C0F574()
{
  return sub_186C5B608();
}

uint64_t sub_186C0F59C()
{
  return sub_186C5B614();
}

uint64_t sub_186C0F5C4(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4, void (*a5)(void *))
{
  v14[0] = a3;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(a4);
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1895F8858](v7);
  uint64_t v10 = (char *)v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  char v11 = __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  a5(v11);
  sub_186C5B5F0();
  char v16 = 0;
  uint64_t v12 = v14[1];
  sub_186C5B4A0();
  if (!v12)
  {
    char v15 = 1;
    sub_186C5B4A0();
  }

  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

uint64_t sub_186C0F6E4@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_186C0F710(a1, &qword_18C6A29A8, (void (*)(void))sub_186C21C7C, a2);
}

uint64_t sub_186C0F710@<X0>(void *a1@<X0>, uint64_t *a2@<X3>, void (*a3)(void)@<X4>, uint64_t *a4@<X8>)
{
  uint64_t result = sub_186C21DC4(a1, a2, a3);
  if (!v4)
  {
    *a4 = result;
    a4[1] = v7;
  }

  return result;
}

uint64_t sub_186C0F744(void *a1)
{
  return sub_186C0F5C4(a1, *v1, v1[1], &qword_18C6A2698, (void (*)(void *))sub_186C21C7C);
}

uint64_t sub_186C0F774(uint64_t result, uint64_t a2)
{
  if (result == a2) {
    return 1LL;
  }
  uint64_t v3 = result;
  if (*(void *)(result + 16) != *(void *)(a2 + 16)) {
    return 0LL;
  }
  int64_t v4 = 0LL;
  uint64_t v5 = result + 64;
  uint64_t v6 = 1LL << *(_BYTE *)(result + 32);
  uint64_t v7 = -1LL;
  if (v6 < 64) {
    uint64_t v7 = ~(-1LL << v6);
  }
  unint64_t v8 = v7 & *(void *)(result + 64);
  int64_t v27 = (unint64_t)(v6 + 63) >> 6;
  while (1)
  {
    if (v8)
    {
      unint64_t v9 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v10 = v9 | (v4 << 6);
      goto LABEL_25;
    }

    int64_t v11 = v4 + 1;
    if (__OFADD__(v4, 1LL))
    {
      __break(1u);
      goto LABEL_36;
    }

    if (v11 >= v27) {
      return 1LL;
    }
    unint64_t v12 = *(void *)(v5 + 8 * v11);
    ++v4;
    if (!v12)
    {
      int64_t v4 = v11 + 1;
      if (v11 + 1 >= v27) {
        return 1LL;
      }
      unint64_t v12 = *(void *)(v5 + 8 * v4);
      if (!v12)
      {
        int64_t v4 = v11 + 2;
        if (v11 + 2 >= v27) {
          return 1LL;
        }
        unint64_t v12 = *(void *)(v5 + 8 * v4);
        if (!v12)
        {
          int64_t v4 = v11 + 3;
          if (v11 + 3 >= v27) {
            return 1LL;
          }
          unint64_t v12 = *(void *)(v5 + 8 * v4);
          if (!v12) {
            break;
          }
        }
      }
    }

uint64_t sub_186C0F990()
{
  uint64_t v1 = 0x736E6F6974706FLL;
  if (*v0 != 1) {
    uint64_t v1 = 0x6465726975716572LL;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 1701667182LL;
  }
}

uint64_t sub_186C0F9E4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_186C21F68(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_186C0FA08()
{
  return sub_186C5B608();
}

uint64_t sub_186C0FA30()
{
  return sub_186C5B614();
}

uint64_t sub_186C0FA58(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  int v13 = a5;
  v12[0] = a4;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C6A26A0);
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1895F8858](v7);
  unint64_t v10 = (char *)v12 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_186C21F24();
  sub_186C5B5F0();
  char v16 = 0;
  sub_186C5B47C();
  if (!v5)
  {
    v12[1] = v12[0];
    char v15 = 1;
    __swift_instantiateConcreteTypeFromMangledName(&qword_18C6A26A8);
    sub_186C28384(&qword_18C6A26B0, MEMORY[0x189617FB0], MEMORY[0x189617910]);
    sub_186C5B4AC();
    char v14 = 2;
    sub_186C5B488();
  }

  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

uint64_t sub_186C0FBEC@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_186C220AC(a1);
  if (!v2)
  {
    *(void *)a2 = result;
    *(void *)(a2 + 8) = v5;
    *(void *)(a2 + 16) = v6;
    *(_BYTE *)(a2 + 24) = v7 & 1;
  }

  return result;
}

uint64_t sub_186C0FC20(void *a1)
{
  return sub_186C0FA58(a1, *(void *)v1, *(void *)(v1 + 8), *(void *)(v1 + 16), *(unsigned __int8 *)(v1 + 24));
}

uint64_t sub_186C0FC40(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  int v3 = *(unsigned __int8 *)(a1 + 24);
  uint64_t v4 = *(void *)(a2 + 16);
  int v5 = *(unsigned __int8 *)(a2 + 24);
  BOOL v6 = *(void *)a1 == *(void *)a2 && *(void *)(a1 + 8) == *(void *)(a2 + 8);
  if (v6 || (char v7 = sub_186C5B4F4(), result = 0LL, (v7 & 1) != 0))
  {
    if ((sub_186C0F774(v2, v4) & 1) != 0) {
      return v3 ^ v5 ^ 1u;
    }
    else {
      return 0LL;
    }
  }

  return result;
}

uint64_t sub_186C0FCBC(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_186C0FCF8 + 4 * byte_186C5F77F[a1]))( 0xD000000000000010LL,  0x8000000186C66020LL);
}

uint64_t sub_186C0FCF8()
{
  return 0x694667756265646BLL;
}

unint64_t sub_186C0FD18()
{
  return 0xD000000000000013LL;
}

uint64_t sub_186C0FDB0()
{
  return 0x7A614C667265706BLL;
}

uint64_t sub_186C0FE00(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_186C0FE3C + 4 * byte_186C5F78A[a1]))( 0xD000000000000010LL,  0x8000000186C66020LL);
}

uint64_t sub_186C0FE3C()
{
  return 0x694667756265646BLL;
}

unint64_t sub_186C0FE5C()
{
  return 0xD000000000000013LL;
}

uint64_t sub_186C0FEF4()
{
  return 0x7A614C667265706BLL;
}

uint64_t sub_186C0FF44(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4)
{
  return sub_186C127E4(a1, a2, a3, a4, (uint64_t (*)(uint64_t))sub_186C0FCBC);
}

uint64_t sub_186C0FF50(uint64_t a1, uint64_t a2)
{
  return sub_186C1287C(a1, a2, (void (*)(uint64_t))sub_186C0FCBC);
}

uint64_t sub_186C0FF5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_186C128EC(a1, a2, a3, (void (*)(void))sub_186C0FCBC);
}

uint64_t sub_186C0FF68(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_186C12938(a1, a2, a3, (void (*)(uint64_t))sub_186C0FCBC);
}

uint64_t sub_186C0FF74@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result = sub_186C2372C();
  *a1 = result;
  return result;
}

uint64_t sub_186C0FFA8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_186C0FCBC(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_186C0FFD0()
{
  return sub_186C0FE00(*v0);
}

uint64_t sub_186C0FFD8@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result = sub_186C2372C();
  *a1 = result;
  return result;
}

void sub_186C10004(_BYTE *a1@<X8>)
{
  *a1 = 11;
}

uint64_t sub_186C10010()
{
  return sub_186C5B608();
}

uint64_t sub_186C10038()
{
  return sub_186C5B614();
}

uint64_t sub_186C10060(uint64_t result, uint64_t a2)
{
  uint64_t v4 = v3;
  int v5 = v2;
  uint64_t v6 = v2[4];
  if (v6)
  {
    uint64_t v7 = v2[3];
    swift_bridgeObjectRetain();
    uint64_t result = sub_186BED3BC(v7, v6);
    if (!v4)
    {
      sub_186BED654(result);
      uint64_t result = swift_bridgeObjectRelease();
      uint64_t v8 = v5[6];
      if (v8)
      {
        uint64_t v9 = v5[5];
        swift_bridgeObjectRetain();
        uint64_t v10 = sub_186BED3BC(v9, v8);
        sub_186BED654(v10);
        return swift_bridgeObjectRelease();
      }
    }
  }

  else if (v2[6])
  {
    uint64_t v12 = result;
    type metadata accessor for KTraceRecordError();
    sub_186BF0CD4();
    swift_allocError();
    *int v13 = v12;
    v13[1] = a2;
    swift_storeEnumTagMultiPayload();
    swift_bridgeObjectRetain();
    return swift_willThrow();
  }

  return result;
}

uint64_t sub_186C10170(_TtC6ktrace12ProviderList *a1, void *a2, char a3)
{
  uint64_t v5 = v4;
  uint64_t v6 = v3;
  sub_186BFA418(v6, (uint64_t)v76, &qword_18C6A26B8);
  uint64_t result = sub_186BFA418((uint64_t)v76, (uint64_t)v77, &qword_18C6A26B8);
  if ((v78 & 1) != 0) {
    return result;
  }
  uint64_t v11 = sub_186C0D120(*(uint64_t *)&v77[1], v77[0]);
  ktrace_set_buffer_size((uint64_t)a1, v11);
  ktrace_set_coprocessor_tracing_enabled((uint64_t)a1, (*(_BYTE *)(v6 + 56) == 2) | *(_BYTE *)(v6 + 56) & 1);
  uint64_t v12 = *(void *)(v6 + 64);
  if (!v12) {
    goto LABEL_42;
  }
  uint64_t result = kperf_reset();
  unint64_t v13 = *(void *)(v12 + 16);
  if (HIDWORD(v13)) {
    goto LABEL_85;
  }
  uint64_t result = kperf_action_count_set();
  if (v13)
  {
    char v14 = a1;
    swift_bridgeObjectRetain();
    uint64_t v15 = 0LL;
    do
    {
      uint64_t v16 = *(void *)(v12 + 8 * v15++ + 32);
      swift_bridgeObjectRetain();
      sub_186C0D780(v15, v16);
      swift_bridgeObjectRelease();
      if (v4) {
        return swift_bridgeObjectRelease();
      }
    }

    while (v13 != v15);
    uint64_t result = swift_bridgeObjectRelease();
    a1 = v14;
  }

  uint64_t v17 = *(void **)(v6 + 72);
  if (v17)
  {
    unint64_t v18 = v17[2];
    if (HIDWORD(v18)) {
      goto LABEL_86;
    }
    uint64_t result = kperf_timer_count_set();
    if (v18)
    {
      unint64_t v19 = v17[5];
      if ((v19 & 0x8000000000000000LL) != 0) {
        goto LABEL_87;
      }
      __int128 v67 = a2;
      if (is_mul_ok(v19, 0x3E8uLL))
      {
        uint64_t v20 = v17[4];
        swift_bridgeObjectRetain();
        kperf_ns_to_ticks();
        uint64_t result = kperf_timer_period_set();
        if ((result & 0x80000000) != 0)
        {
LABEL_29:
          int v26 = MEMORY[0x186E445C0]();
          type metadata accessor for KTraceRecordError();
          sub_186BF0CD4();
          swift_allocError();
          *(void *)uint64_t v27 = 0x6972657020746573LL;
          *(void *)(v27 + 8) = 0xEA0000000000646FLL;
          goto LABEL_30;
        }

        unint64_t v21 = v20 + 1;
        if (!__OFADD__(v20, 1LL))
        {
          if ((v21 & 0x8000000000000000LL) == 0)
          {
            if (!HIDWORD(v21))
            {
              uint64_t result = kperf_timer_action_set();
              if ((result & 0x80000000) == 0)
              {
                char v22 = v17 + 7;
                uint64_t v23 = 1LL;
                while (v18 != v23)
                {
                  if ((*v22 & 0x8000000000000000LL) != 0)
                  {
                    __break(1u);
LABEL_81:
                    __break(1u);
LABEL_82:
                    __break(1u);
LABEL_83:
                    __break(1u);
LABEL_84:
                    __break(1u);
LABEL_85:
                    __break(1u);
LABEL_86:
                    __break(1u);
LABEL_87:
                    __break(1u);
                    goto LABEL_88;
                  }

                  if (!is_mul_ok(*v22, 0x3E8uLL)) {
                    goto LABEL_81;
                  }
                  uint64_t v24 = *(v22 - 1);
                  kperf_ns_to_ticks();
                  uint64_t result = kperf_timer_period_set();
                  if ((result & 0x80000000) != 0) {
                    goto LABEL_29;
                  }
                  unint64_t v25 = v24 + 1;
                  if (__OFADD__(v24, 1LL)) {
                    goto LABEL_82;
                  }
                  if ((v25 & 0x8000000000000000LL) != 0) {
                    goto LABEL_83;
                  }
                  if (HIDWORD(v25)) {
                    goto LABEL_84;
                  }
                  uint64_t result = kperf_timer_action_set();
                  v22 += 2;
                  ++v23;
                  if ((result & 0x80000000) != 0) {
                    goto LABEL_28;
                  }
                }

                swift_bridgeObjectRelease();
                a2 = v67;
                goto LABEL_32;
              }

LABEL_90:
          __break(1u);
          goto LABEL_91;
        }
      }

      else
      {
LABEL_88:
        __break(1u);
      }

      __break(1u);
      goto LABEL_90;
    }
  }

LABEL_51:
        ++v37;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v37 == v71)
        {
          swift_bridgeObjectRelease();
          return swift_bridgeObjectRelease();
        }
      }
    }
  }

  return swift_bridgeObjectRelease();
}

        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v11 = sub_186C1CD34(0LL, v13 + 1, 1, v11);
        }
        uint64_t v6 = v7;
        uint64_t v31 = *((void *)v11 + 2);
        uint64_t v30 = *((void *)v11 + 3);
        uint64_t v7 = (char *)v58;
        if (v31 >= v30 >> 1) {
          uint64_t v11 = sub_186C1CD34((char *)(v30 > 1), v31 + 1, 1, v11);
        }
        *((void *)v11 + 2) = v31 + 1;
        uint64_t v24 = &v11[32 * v31];
        *((void *)v24 + 4) = v12;
        *((void *)v24 + 5) = v26;
        *((void *)v24 + 6) = v27;
        v24[56] = v60;
LABEL_42:
        if (++v8 == v57)
        {
          sub_186BFA370((uint64_t)v64);
          uint64_t v12 = (uint64_t *)*((void *)v7 + 19);
          uint64_t v8 = v54;
          goto LABEL_82;
        }
      }
    }

    swift_bridgeObjectRetain();
LABEL_82:
    swift_bridgeObjectRelease();
    *((void *)v7 + 19) = v11;
  }

  uint64_t v11 = *(char **)(v8 + 96);
  if (!v11)
  {
LABEL_117:
    sub_186BEE348(*(void *)(v8 + 160), *(void *)(v8 + 168));
    return;
  }

  if (!*((void *)v11 + 2))
  {
    uint64_t v40 = *((void *)v7 + 12);
    if (v40)
    {
LABEL_116:
      int v62 = v40;
      unint64_t v52 = swift_bridgeObjectRetain();
      sub_186C117AC(v52);
      *((void *)v7 + 12) = v62;
      goto LABEL_117;
    }

    goto LABEL_91;
  }

  unint64_t v13 = *((void *)v11 + 4);
  uint64_t v38 = *((void *)v11 + 5);
  uint64_t v39 = *((void *)v11 + 6);
  uint64_t v6 = (char *)*((void *)v7 + 12);
  if (!v6 || !*((void *)v6 + 2))
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_18C6A26F0);
    uint64_t v40 = swift_allocObject();
    *(_OWORD *)(v40 + 16) = xmmword_186C5E4F0;
    *(void *)(v40 + 32) = v13;
    *(void *)(v40 + 40) = v38;
    *(void *)(v40 + 48) = v39;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *((void *)v7 + 12) = v40;
LABEL_115:
    if (v40) {
      goto LABEL_116;
    }
LABEL_91:
    *((void *)v7 + 12) = v11;
    swift_bridgeObjectRetain();
    goto LABEL_117;
  }

  uint64_t v54 = v8;
  uint64_t v8 = *((void *)v6 + 4);
  if (v8 != v13)
  {
    if ((a4 & 1) != 0)
    {
      uint64_t v43 = *((void *)v7 + 8);
      if (v43)
      {
        if ((v13 & 0x8000000000000000LL) != 0) {
          goto LABEL_128;
        }
        unint64_t v44 = *(void *)(v43 + 16);
        if (v13 >= v44) {
          goto LABEL_129;
        }
        if (v8 >= v44) {
          goto LABEL_130;
        }
        uint64_t v45 = *(void *)(v43 + 32 + 8 * v13);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        __int128 v46 = swift_bridgeObjectRetain();
        BOOL v47 = sub_186C223E8(v46);
        swift_bridgeObjectRelease();
        int v62 = v47;
        unint64_t v13 = *(void *)(v45 + 16);
        if (v13)
        {
          for (unint64_t i = 0LL; i != v13; ++i)
          {
            unint64_t v49 = v45 + i;
            sub_186C1905C(&v61, *(unsigned __int8 *)(v49 + 32));
          }

          swift_bridgeObjectRelease();
        }

        else
        {
          swift_bridgeObjectRelease();
        }

        BOOL v51 = swift_bridgeObjectRetain();
        uint64_t v12 = (uint64_t *)sub_186C1E638(v51);
        swift_bridgeObjectRelease_n();
        uint64_t v7 = (char *)v58;
        uint64_t v6 = *(char **)(v58 + 64);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          goto LABEL_131;
        }
        goto LABEL_108;
      }

      goto LABEL_134;
    }

    type metadata accessor for KTraceRecordError();
    sub_186BF0CD4();
    swift_allocError();
    *__int128 v50 = 0xD000000000000048LL;
    v50[1] = 0x8000000186C66280LL;
    goto LABEL_79;
  }

  swift_bridgeObjectRetain();
  while (1)
  {
    uint64_t v8 = v54;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
    {
      if (!*((void *)v6 + 2)) {
        goto LABEL_125;
      }
    }

    else
    {
LABEL_124:
      uint64_t v6 = sub_186C1CAA4((uint64_t)v6);
      if (!*((void *)v6 + 2))
      {
LABEL_125:
        __break(1u);
        goto LABEL_126;
      }
    }

    uint64_t v12 = (uint64_t *)(v6 + 40);
    sub_186C5ADD4();
    *((void *)v7 + 12) = v6;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
    {
      if (*((void *)v6 + 2)) {
        goto LABEL_114;
      }
      goto LABEL_127;
    }

void *sub_186C109BC(uint64_t a1)
{
  uint64_t result = (void *)sub_186C20724(a1);
  if ((v4 & 1) != 0) {
    goto LABEL_8;
  }
  if (*(_DWORD *)(a1 + 36) != v3)
  {
    __break(1u);
LABEL_8:
    __break(1u);
    return result;
  }

  if (result == (void *)(1LL << *(_BYTE *)(a1 + 32))) {
    return 0LL;
  }
  else {
    return sub_186C207AC(&v5, (uint64_t)result, v3, 0LL, a1);
  }
}

uint64_t sub_186C10A44(uint64_t a1)
{
  uint64_t result = sub_186C20DF4(a1);
  if ((v4 & 1) != 0) {
    goto LABEL_8;
  }
  if (*(_DWORD *)(a1 + 36) != v3)
  {
    __break(1u);
LABEL_8:
    __break(1u);
    return result;
  }

  if (result == 1LL << *(_BYTE *)(a1 + 32)) {
    return 0LL;
  }
  uint64_t v5 = sub_186C22390(result, v3, 0LL, a1);
  swift_bridgeObjectRetain();
  return v5;
}

unint64_t sub_186C10AC0(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = (void *)MEMORY[0x18961AFF0];
    goto LABEL_9;
  }

  __swift_instantiateConcreteTypeFromMangledName(&qword_18C6A28D8);
  uint64_t v2 = (void *)sub_186C5B38C();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }

  swift_retain();
  char v4 = (uint64_t *)(a1 + 56);
  while (1)
  {
    uint64_t v5 = *(v4 - 3);
    uint64_t v6 = *(v4 - 2);
    uint64_t v8 = *(v4 - 1);
    uint64_t v7 = *v4;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t result = sub_186BF8278(v5, v6);
    if ((v10 & 1) != 0) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL) + 64) |= 1LL << result;
    uint64_t v11 = (uint64_t *)(v2[6] + 16 * result);
    *uint64_t v11 = v5;
    v11[1] = v6;
    uint64_t v12 = (void *)(v2[7] + 16 * result);
    *uint64_t v12 = v8;
    v12[1] = v7;
    uint64_t v13 = v2[2];
    BOOL v14 = __OFADD__(v13, 1LL);
    uint64_t v15 = v13 + 1;
    if (v14) {
      goto LABEL_11;
    }
    v4 += 4;
    v2[2] = v15;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }

  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

void sub_186C10BE0(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v6 = v5;
  uint64_t v7 = (char *)v4;
  uint64_t v8 = a1;
  if ((a4 & 1) == 0)
  {
    sub_186BFA418(a1 + 64, (uint64_t)v68, &qword_18C6A26D8);
    sub_186BFA418((uint64_t)v68, (uint64_t)&v69, &qword_18C6A26D8);
    if (v69 && *(void *)(v69 + 16)
      || (sub_186BFA418(v8 + 72, (uint64_t)v67, &qword_18C6A26E0),
          sub_186BFA418((uint64_t)v67, (uint64_t)&v70, &qword_18C6A26E0),
          v70)
      && *(void *)(v70 + 16)
      || (sub_186BFA418(v8 + 80, (uint64_t)v66, &qword_18C6A26C8),
          sub_186BFA418((uint64_t)v66, (uint64_t)v71, &qword_18C6A26C8),
          v71[0] != 2LL)
      || (sub_186BFA418(v8, (uint64_t)v65, &qword_18C6A26B8),
          sub_186BFA418((uint64_t)v65, (uint64_t)v72, &qword_18C6A26B8),
          (v72[16] & 1) == 0))
    {
      type metadata accessor for KTraceRecordError();
      sub_186BF0CD4();
      swift_allocError();
      uint64_t v23 = v22;
      uint64_t v62 = 0LL;
      unint64_t v63 = 0xE000000000000000LL;
      sub_186C5B260();
      sub_186C5ADD4();
      goto LABEL_78;
    }

    goto LABEL_35;
  }

  uint64_t v9 = *(char **)(v4 + 64);
  if (!v9)
  {
    uint64_t v9 = (char *)MEMORY[0x18961AFE8];
    *(void *)(v4 + 64) = MEMORY[0x18961AFE8];
    uint64_t v6 = *(char **)(v4 + 72);
    if (v6) {
      goto LABEL_4;
    }
LABEL_32:
    uint64_t v6 = (char *)MEMORY[0x18961AFE8];
    *(void *)(v4 + 72) = MEMORY[0x18961AFE8];
    goto LABEL_4;
  }

  uint64_t v6 = *(char **)(v4 + 72);
  if (!v6) {
    goto LABEL_32;
  }
LABEL_4:
  uint64_t v10 = MEMORY[0x18961AFE8];
  if (*(void *)(a1 + 72)) {
    uint64_t v10 = *(void *)(a1 + 72);
  }
  uint64_t v54 = a1;
  uint64_t v55 = v10;
  uint64_t v59 = *(void *)(v10 + 16);
  if (v59)
  {
    uint64_t v11 = *(char **)(a1 + 64);
    swift_bridgeObjectRetain();
    uint64_t v8 = 0LL;
    uint64_t v12 = (uint64_t *)(v55 + 40);
    while (1)
    {
      unint64_t v13 = *(v12 - 1);
      if (!v11) {
        break;
      }
      if ((int64_t)v13 >= *((void *)v11 + 2))
      {
        swift_bridgeObjectRelease();
LABEL_95:
        type metadata accessor for KTraceRecordError();
        sub_186BF0CD4();
        swift_allocError();
        uint64_t v42 = v41;
        sub_186C5B260();
        swift_bridgeObjectRelease();
        uint64_t v62 = 0x2072656D6974LL;
        unint64_t v63 = 0xE600000000000000LL;
        sub_186C5B4DC();
        sub_186C5ADD4();
        swift_bridgeObjectRelease();
        sub_186C5ADD4();
        sub_186C5ADD4();
        sub_186C5ADD4();
        uint64_t v61 = v13;
        sub_186C5B4DC();
        sub_186C5ADD4();
        swift_bridgeObjectRelease();
        *uint64_t v42 = 0x2072656D6974LL;
        v42[1] = 0xE600000000000000LL;
        goto LABEL_79;
      }

      if ((v13 & 0x8000000000000000LL) != 0) {
        goto LABEL_119;
      }
      if (*((void *)v9 + 2) > 0x1EuLL) {
        goto LABEL_77;
      }
      if (!v6) {
        goto LABEL_133;
      }
      if (*((void *)v6 + 2) > 7uLL)
      {
LABEL_77:
        swift_bridgeObjectRelease();
        type metadata accessor for KTraceRecordError();
        sub_186BF0CD4();
        swift_allocError();
        uint64_t v23 = v36;
        sub_186C5B260();
        swift_bridgeObjectRelease();
        uint64_t v62 = 0x2072656D6974LL;
        unint64_t v63 = 0xE600000000000000LL;
        uint64_t v61 = v8;
        sub_186C5B4DC();
        sub_186C5ADD4();
        swift_bridgeObjectRelease();
        sub_186C5ADD4();
        sub_186C5ADD4();
LABEL_78:
        sub_186C5ADD4();
        unint64_t v37 = v63;
        *uint64_t v23 = v62;
        v23[1] = v37;
LABEL_79:
        swift_storeEnumTagMultiPayload();
        swift_willThrow();
        return;
      }

      uint64_t v14 = *v12;
      uint64_t v15 = *(void *)&v11[8 * v13 + 32];
      uint64_t v9 = (char *)*((void *)v7 + 8);
      swift_bridgeObjectRetain();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v9 = sub_186C1CC34(0LL, *((void *)v9 + 2) + 1LL, 1, v9);
      }
      unint64_t v17 = *((void *)v9 + 2);
      unint64_t v16 = *((void *)v9 + 3);
      if (v17 >= v16 >> 1) {
        uint64_t v9 = sub_186C1CC34((char *)(v16 > 1), v17 + 1, 1, v9);
      }
      *((void *)v9 + 2) = v17 + 1;
      *(void *)&v9[8 * v17 + 32] = v15;
      *((void *)v7 + 8) = v9;
      uint64_t v18 = *((void *)v9 + 2);
      uint64_t v6 = (char *)*((void *)v7 + 9);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v6 = sub_186C1CE34(0LL, *((void *)v6 + 2) + 1LL, 1, v6);
      }
      unint64_t v20 = *((void *)v6 + 2);
      unint64_t v19 = *((void *)v6 + 3);
      if (v20 >= v19 >> 1) {
        uint64_t v6 = sub_186C1CE34((char *)(v19 > 1), v20 + 1, 1, v6);
      }
      ++v8;
      v12 += 2;
      *((void *)v6 + 2) = v20 + 1;
      unint64_t v21 = &v6[16 * v20];
      *((void *)v21 + 4) = v18;
      *((void *)v21 + 5) = v14;
      uint64_t v7 = (char *)v58;
      *(void *)(v58 + 72) = v6;
      if (v59 == v8) {
        goto LABEL_34;
      }
    }

    swift_bridgeObjectRelease();
    if ((v13 & 0x8000000000000000LL) != 0) {
      goto LABEL_123;
    }
    goto LABEL_95;
  }

  swift_bridgeObjectRetain();
LABEL_34:
  swift_bridgeObjectRelease();
  uint64_t v6 = v5;
  uint64_t v8 = v54;
LABEL_35:
  uint64_t v12 = &qword_18C6A26E8;
  sub_186BFA418(v8 + 152, (uint64_t)v64, &qword_18C6A26E8);
  sub_186BFA418((uint64_t)v64, (uint64_t)&v73, &qword_18C6A26E8);
  if (v73)
  {
    uint64_t v12 = (uint64_t *)*((void *)v7 + 19);
    if (v12) {
      uint64_t v11 = (char *)*((void *)v7 + 19);
    }
    else {
      uint64_t v11 = (char *)MEMORY[0x18961AFE8];
    }
    uint64_t v57 = *(void *)(v73 + 16);
    if (v57)
    {
      uint64_t v54 = v8;
      uint64_t v56 = v73 + 32;
      sub_186BFA348((uint64_t)v64);
      swift_bridgeObjectRetain();
      uint64_t v8 = 0LL;
      while (1)
      {
        uint64_t v25 = v56 + 32 * v8;
        uint64_t v12 = *(uint64_t **)v25;
        uint64_t v26 = *(void *)(v25 + 8);
        uint64_t v27 = *(void *)(v25 + 16);
        unint64_t v13 = *((void *)v11 + 2);
        char v60 = *(_BYTE *)(v25 + 24);
        if (v13)
        {
          if (*((uint64_t **)v11 + 4) == v12 && *((void *)v11 + 5) == v26)
          {
            swift_bridgeObjectRetain_n();
            swift_bridgeObjectRetain();
            unint64_t v29 = 0LL;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              goto LABEL_75;
            }
            goto LABEL_70;
          }

          if ((sub_186C5B4F4() & 1) != 0)
          {
            unint64_t v29 = 0LL;
            goto LABEL_68;
          }

          uint64_t v7 = v6;
          if (v13 != 1)
          {
            uint64_t v6 = v11 + 72;
            unint64_t v29 = 1LL;
            while (1)
            {
              BOOL v32 = *((uint64_t **)v6 - 1) == v12 && *(void *)v6 == v26;
              if (v32 || (sub_186C5B4F4() & 1) != 0) {
                break;
              }
              unint64_t v33 = v29 + 1;
              if (__OFADD__(v29, 1LL))
              {
                __break(1u);
LABEL_119:
                __break(1u);
LABEL_120:
                __break(1u);
LABEL_121:
                __break(1u);
LABEL_122:
                __break(1u);
LABEL_123:
                __break(1u);
                goto LABEL_124;
              }

              v6 += 32;
              ++v29;
              if (v33 == v13) {
                goto LABEL_51;
              }
            }

            uint64_t v6 = v7;
            uint64_t v7 = (char *)v58;
LABEL_68:
            swift_bridgeObjectRetain_n();
            swift_bridgeObjectRetain();
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
            {
              if ((v29 & 0x8000000000000000LL) != 0) {
                goto LABEL_120;
              }
            }

            else
            {
LABEL_75:
              uint64_t v11 = sub_186C1CACC((uint64_t)v11);
              if ((v29 & 0x8000000000000000LL) != 0) {
                goto LABEL_120;
              }
            }

LABEL_126:
    uint64_t v6 = sub_186C1CAA4((uint64_t)v6);
    if (*((void *)v6 + 2))
    {
LABEL_114:
      sub_186C5ADD4();
      swift_bridgeObjectRelease();
      *((void *)v7 + 12) = v6;
      uint64_t v40 = (uint64_t)v6;
      goto LABEL_115;
    }

LABEL_127:
    __break(1u);
LABEL_128:
    __break(1u);
LABEL_129:
    __break(1u);
LABEL_130:
    __break(1u);
LABEL_131:
    uint64_t v6 = sub_186C1CAB8((uint64_t)v6);
LABEL_108:
    if (v8 >= *((void *)v6 + 2)) {
      break;
    }
    *(void *)&v6[8 * v8 + 32] = v12;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    *((void *)v7 + 8) = v6;
    uint64_t v6 = (char *)*((void *)v7 + 12);
  }

  __break(1u);
LABEL_133:
  __break(1u);
LABEL_134:
  __break(1u);
LABEL_135:
  *(void *)(v13 + 16) = v62;
  swift_bridgeObjectRelease();
  __break(1u);
}

uint64_t sub_186C117AC(uint64_t result)
{
  uint64_t v2 = *(void *)(result + 16);
  uint64_t v3 = *v1;
  int64_t v4 = *(void *)(*v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }

  uint64_t v6 = result;
  unint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)result && v5 <= *(void *)(v3 + 24) >> 1)
  {
    if (*(void *)(v6 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_13;
  }

  if (v4 <= v5) {
    int64_t v10 = v4 + v2;
  }
  else {
    int64_t v10 = v4;
  }
  unint64_t result = (uint64_t)sub_186C1CB1C((char *)result, v10, 1, (char *)v3);
  uint64_t v3 = result;
  if (!*(void *)(v6 + 16))
  {
LABEL_13:
    if (!v2) {
      goto LABEL_14;
    }
    goto LABEL_16;
  }

uint64_t sub_186C11898(uint64_t result)
{
  uint64_t v2 = *(void *)(result + 16);
  uint64_t v3 = *v1;
  int64_t v4 = *(void *)(*v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }

  uint64_t v6 = result;
  unint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)result && v5 <= *(void *)(v3 + 24) >> 1)
  {
    if (*(void *)(v6 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_13;
  }

  if (v4 <= v5) {
    int64_t v10 = v4 + v2;
  }
  else {
    int64_t v10 = v4;
  }
  unint64_t result = (uint64_t)sub_186C1CD34((char *)result, v10, 1, (char *)v3);
  uint64_t v3 = result;
  if (!*(void *)(v6 + 16))
  {
LABEL_13:
    if (!v2) {
      goto LABEL_14;
    }
    goto LABEL_16;
  }

uint64_t sub_186C11980@<X0>(void *a1@<X1>, void *a2@<X8>)
{
  uint64_t v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return swift_bridgeObjectRetain();
}

uint64_t sub_186C1199C(uint64_t result)
{
  uint64_t v1 = result;
  int64_t v2 = 0LL;
  uint64_t v3 = result + 56;
  uint64_t v4 = 1LL << *(_BYTE *)(result + 32);
  uint64_t v5 = -1LL;
  if (v4 < 64) {
    uint64_t v5 = ~(-1LL << v4);
  }
  unint64_t v6 = v5 & *(void *)(result + 56);
  int64_t v7 = (unint64_t)(v4 + 63) >> 6;
  while (1)
  {
    if (v6)
    {
      unint64_t v8 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      unint64_t v9 = v8 | (v2 << 6);
      goto LABEL_5;
    }

    int64_t v10 = v2 + 1;
    if (__OFADD__(v2, 1LL))
    {
      __break(1u);
      goto LABEL_25;
    }

    if (v10 >= v7) {
      return swift_release();
    }
    unint64_t v11 = *(void *)(v3 + 8 * v10);
    ++v2;
    if (!v11)
    {
      int64_t v2 = v10 + 1;
      if (v10 + 1 >= v7) {
        return swift_release();
      }
      unint64_t v11 = *(void *)(v3 + 8 * v2);
      if (!v11)
      {
        int64_t v2 = v10 + 2;
        if (v10 + 2 >= v7) {
          return swift_release();
        }
        unint64_t v11 = *(void *)(v3 + 8 * v2);
        if (!v11)
        {
          int64_t v2 = v10 + 3;
          if (v10 + 3 >= v7) {
            return swift_release();
          }
          unint64_t v11 = *(void *)(v3 + 8 * v2);
          if (!v11) {
            break;
          }
        }
      }
    }

uint64_t sub_186C11B24(uint64_t a1)
{
  int64_t v2 = *(void **)(v1 + 72);
  if (v2 && v2[2])
  {
    uint64_t v4 = v2[4];
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) != 0)
    {
      if (v2[2])
      {
LABEL_5:
        v2[4] = v4;
        v2[5] = a1;
        *(void *)(v1 + 72) = v2;
        return result;
      }
    }

    else
    {
      uint64_t result = (uint64_t)sub_186C1CAE0((uint64_t)v2);
      int64_t v2 = (void *)result;
      if (*(void *)(result + 16)) {
        goto LABEL_5;
      }
    }

    __break(1u);
  }

  else
  {
    type metadata accessor for KTraceRecordError();
    sub_186BF0CD4();
    swift_allocError();
    swift_storeEnumTagMultiPayload();
    return swift_willThrow();
  }

  return result;
}

uint64_t sub_186C11BE4(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C6A26F8);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1895F8858](v5);
  unint64_t v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_186C22458();
  sub_186C5B5F0();
  sub_186BFA418(v3, (uint64_t)v20, &qword_18C6A26B8);
  sub_186BFA418((uint64_t)v20, (uint64_t)v12, &qword_18C6A26B8);
  char v11 = 0;
  sub_186C2249C();
  sub_186C5B458();
  if (!v2)
  {
    v12[0] = 1;
    sub_186C5B428();
    v12[0] = 2;
    sub_186C5B428();
    v12[0] = 3;
    sub_186C5B434();
    sub_186BFA418(v3 + 64, (uint64_t)v19, &qword_18C6A26D8);
    sub_186BFA418((uint64_t)v19, (uint64_t)v12, &qword_18C6A26D8);
    char v11 = 4;
    __swift_instantiateConcreteTypeFromMangledName(&qword_18C6A2710);
    sub_186C28428(&qword_18C6A2718, &qword_18C6A2710, (uint64_t (*)(void))sub_186C224E0, MEMORY[0x189618448]);
    sub_186C5B458();
    sub_186BFA418(v3 + 72, (uint64_t)v18, &qword_18C6A26E0);
    sub_186BFA418((uint64_t)v18, (uint64_t)v12, &qword_18C6A26E0);
    char v11 = 5;
    __swift_instantiateConcreteTypeFromMangledName(&qword_18C6A2728);
    sub_186C28428(&qword_18C6A2730, &qword_18C6A2728, (uint64_t (*)(void))sub_186C22524, MEMORY[0x189618448]);
    sub_186C5B458();
    sub_186BFA418(v3 + 80, (uint64_t)v17, &qword_18C6A26C8);
    sub_186BFA418((uint64_t)v17, (uint64_t)v12, &qword_18C6A26C8);
    char v11 = 6;
    sub_186C22568();
    sub_186C5B458();
    sub_186BFA418(v3 + 96, (uint64_t)v16, &qword_18C6A26C0);
    sub_186BFA418((uint64_t)v16, (uint64_t)v12, &qword_18C6A26C0);
    char v11 = 7;
    __swift_instantiateConcreteTypeFromMangledName(&qword_18C6A2748);
    sub_186C28428(&qword_18C6A2750, &qword_18C6A2748, (uint64_t (*)(void))sub_186C225AC, MEMORY[0x189618448]);
    sub_186C5B458();
    sub_186BFA418(v3 + 104, (uint64_t)v15, &qword_18C6A26D0);
    sub_186BFA418((uint64_t)v15, (uint64_t)v12, &qword_18C6A26D0);
    char v11 = 8;
    sub_186C225F0();
    sub_186C5B458();
    sub_186BFA418(v3 + 128, (uint64_t)v14, &qword_18C6A26D0);
    sub_186BFA418((uint64_t)v14, (uint64_t)v12, &qword_18C6A26D0);
    char v11 = 9;
    sub_186C5B458();
    sub_186BFA418(v3 + 152, (uint64_t)v13, &qword_18C6A26E8);
    sub_186BFA418((uint64_t)v13, (uint64_t)v12, &qword_18C6A26E8);
    char v11 = 10;
    __swift_instantiateConcreteTypeFromMangledName(&qword_18C6A2768);
    sub_186C28428(&qword_18C6A2770, &qword_18C6A2768, (uint64_t (*)(void))sub_186C22634, MEMORY[0x189618448]);
    sub_186C5B458();
  }

  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

__n128 sub_186C120D0@<Q0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  if (!v2)
  {
    __int128 v5 = v9[9];
    *(_OWORD *)(a2 + 128) = v9[8];
    *(_OWORD *)(a2 + 144) = v5;
    *(_OWORD *)(a2 + 160) = v9[10];
    __int128 v6 = v9[5];
    *(_OWORD *)(a2 + 64) = v9[4];
    *(_OWORD *)(a2 + 80) = v6;
    __int128 v7 = v9[7];
    *(_OWORD *)(a2 + 96) = v9[6];
    *(_OWORD *)(a2 + 112) = v7;
    __int128 v8 = v9[1];
    *(_OWORD *)a2 = v9[0];
    *(_OWORD *)(a2 + 16) = v8;
    __n128 result = (__n128)v9[3];
    *(_OWORD *)(a2 + 32) = v9[2];
    *(__n128 *)(a2 + 48) = result;
  }

  return result;
}

uint64_t sub_186C12130(void *a1)
{
  return sub_186C11BE4(a1);
}

uint64_t sub_186C12188()
{
  uint64_t v1 = 0x736973706F6E7973LL;
  if (*v0 != 1) {
    uint64_t v1 = 0x73676E6974746573LL;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x73657361696C61LL;
  }
}

uint64_t sub_186C121E4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_186C23240(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_186C12208()
{
  return sub_186C5B608();
}

uint64_t sub_186C12230()
{
  return sub_186C5B614();
}

uint64_t sub_186C12258(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C6A2780);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1895F8858](v5);
  __int128 v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_186C231B8();
  sub_186C5B5F0();
  sub_186BFA418(v3, (uint64_t)v18, &qword_18C6A2788);
  sub_186BFA418((uint64_t)v18, (uint64_t)v16, &qword_18C6A2788);
  char v17 = 0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C6A21A8);
  sub_186C25554(&qword_18C6A2790, MEMORY[0x189617FB0], MEMORY[0x189618448]);
  sub_186C5B458();
  if (!v2)
  {
    LOBYTE(v16[0]) = 1;
    sub_186C5B47C();
    __int128 v9 = *(_OWORD *)(v3 + 136);
    __int128 v10 = *(_OWORD *)(v3 + 168);
    _BYTE v16[8] = *(_OWORD *)(v3 + 152);
    v16[9] = v10;
    v16[10] = *(_OWORD *)(v3 + 184);
    __int128 v11 = *(_OWORD *)(v3 + 72);
    __int128 v12 = *(_OWORD *)(v3 + 104);
    v16[4] = *(_OWORD *)(v3 + 88);
    v16[5] = v12;
    v16[6] = *(_OWORD *)(v3 + 120);
    v16[7] = v9;
    __int128 v13 = *(_OWORD *)(v3 + 40);
    v16[0] = *(_OWORD *)(v3 + 24);
    __int128 v14 = *(_OWORD *)(v3 + 56);
    v16[3] = v11;
    v16[1] = v13;
    v16[2] = v14;
    char v17 = 2;
    sub_186C231FC();
    sub_186C5B4AC();
  }

  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

__n128 sub_186C12458@<Q0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  if (!v2)
  {
    __int128 v5 = v10[11];
    *(_OWORD *)(a2 + 160) = v10[10];
    *(_OWORD *)(a2 + 176) = v5;
    *(void *)(a2 + 192) = v11;
    __int128 v6 = v10[7];
    *(_OWORD *)(a2 + 96) = v10[6];
    *(_OWORD *)(a2 + 112) = v6;
    __int128 v7 = v10[9];
    *(_OWORD *)(a2 + 128) = v10[8];
    *(_OWORD *)(a2 + 144) = v7;
    __int128 v8 = v10[3];
    *(_OWORD *)(a2 + 32) = v10[2];
    *(_OWORD *)(a2 + 48) = v8;
    __int128 v9 = v10[5];
    *(_OWORD *)(a2 + 64) = v10[4];
    *(_OWORD *)(a2 + 80) = v9;
    __n128 result = (__n128)v10[1];
    *(_OWORD *)a2 = v10[0];
    *(__n128 *)(a2 + 16) = result;
  }

  return result;
}

uint64_t sub_186C124D8(void *a1)
{
  return sub_186C12258(a1);
}

uint64_t sub_186C12538(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_186C12564 + 4 * byte_186C5F795[a1]))( 1701667182LL,  0xE400000000000000LL);
}

uint64_t sub_186C12564()
{
  return 0x6E6F6973726576LL;
}

unint64_t sub_186C1257C()
{
  return 0xD000000000000010LL;
}

uint64_t sub_186C12598()
{
  return 0x4E70756F7247646FLL;
}

uint64_t sub_186C125B8()
{
  return 0x6168436B63616C73LL;
}

unint64_t sub_186C125D8()
{
  return 0xD000000000000015LL;
}

uint64_t sub_186C125FC()
{
  return 0x736973706F6E7973LL;
}

uint64_t sub_186C12614()
{
  return 0x746E656D75636F64LL;
}

uint64_t sub_186C12638()
{
  return 0x4C746C7561666564LL;
}

uint64_t sub_186C1265C()
{
  return 0x73726579616CLL;
}

uint64_t sub_186C12670()
{
  return 0x73676E6974746573LL;
}

uint64_t sub_186C12688(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_186C126B4 + 4 * byte_186C5F7A0[a1]))( 1701667182LL,  0xE400000000000000LL);
}

uint64_t sub_186C126B4()
{
  return 0x6E6F6973726576LL;
}

unint64_t sub_186C126CC()
{
  return 0xD000000000000010LL;
}

uint64_t sub_186C126E8()
{
  return 0x4E70756F7247646FLL;
}

uint64_t sub_186C12708()
{
  return 0x6168436B63616C73LL;
}

unint64_t sub_186C12728()
{
  return 0xD000000000000015LL;
}

uint64_t sub_186C1274C()
{
  return 0x736973706F6E7973LL;
}

uint64_t sub_186C12764()
{
  return 0x746E656D75636F64LL;
}

uint64_t sub_186C12788()
{
  return 0x4C746C7561666564LL;
}

uint64_t sub_186C127AC()
{
  return 0x73726579616CLL;
}

uint64_t sub_186C127C0()
{
  return 0x73676E6974746573LL;
}

uint64_t sub_186C127D8(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4)
{
  return sub_186C127E4(a1, a2, a3, a4, (uint64_t (*)(uint64_t))sub_186C12538);
}

uint64_t sub_186C127E4( unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t))
{
  uint64_t v6 = *a2;
  uint64_t v7 = a5(*a1);
  uint64_t v9 = v8;
  if (v7 == a5(v6) && v9 == v10) {
    char v12 = 1;
  }
  else {
    char v12 = sub_186C5B4F4();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v12 & 1;
}

uint64_t sub_186C12870(uint64_t a1, uint64_t a2)
{
  return sub_186C1287C(a1, a2, (void (*)(uint64_t))sub_186C12538);
}

uint64_t sub_186C1287C(uint64_t a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t v5 = *v3;
  sub_186C5B59C();
  a3(v5);
  sub_186C5ADA4();
  swift_bridgeObjectRelease();
  return sub_186C5B5D8();
}

uint64_t sub_186C128E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_186C128EC(a1, a2, a3, (void (*)(void))sub_186C12538);
}

uint64_t sub_186C128EC(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void))
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_186C1292C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_186C12938(a1, a2, a3, (void (*)(uint64_t))sub_186C12538);
}

uint64_t sub_186C12938(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t))
{
  uint64_t v6 = *v4;
  sub_186C5B59C();
  a4(v6);
  sub_186C5ADA4();
  swift_bridgeObjectRelease();
  return sub_186C5B5D8();
}

uint64_t sub_186C12998@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result = sub_186C2372C();
  *a1 = result;
  return result;
}

uint64_t sub_186C129CC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_186C12538(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_186C129F4()
{
  return sub_186C12688(*v0);
}

uint64_t sub_186C129FC@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result = sub_186C2372C();
  *a1 = result;
  return result;
}

uint64_t sub_186C12A28()
{
  return sub_186C5B608();
}

uint64_t sub_186C12A50()
{
  return sub_186C5B614();
}

void *sub_186C12A78()
{
  uint64_t v1 = swift_bridgeObjectRetain();
  uint64_t v2 = sub_186C23770(v1, (uint64_t)__dst);
  sub_186C23A98((uint64_t)__dst);
  swift_bridgeObjectRelease();
  return v2;
}

uint64_t sub_186C12AE8()
{
  uint64_t v0 = sub_186C5A8F4();
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v2 = MEMORY[0x1895F8858](v0);
  uint64_t v4 = (char *)&v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = MEMORY[0x1895F8858](v2);
  uint64_t v7 = (char *)&v13 - v6;
  uint64_t v8 = MEMORY[0x1895F8858](v5);
  uint64_t v10 = (char *)&v13 - v9;
  __swift_allocate_value_buffer(v8, qword_18C6A99F8);
  __swift_project_value_buffer(v0, (uint64_t)qword_18C6A99F8);
  sub_186C5A8C4();
  sub_186C5A8DC();
  sub_186C5A8E8();
  uint64_t v11 = *(void (**)(char *, uint64_t))(v1 + 8);
  v11(v4, v0);
  v11(v7, v0);
  sub_186C5A8D0();
  sub_186C5A8E8();
  v11(v7, v0);
  return ((uint64_t (*)(char *, uint64_t))v11)(v10, v0);
}

uint64_t sub_186C12C20()
{
  uint64_t v2 = *v0;
  uint64_t v1 = v0[1];
  char v3 = *((_BYTE *)v0 + 128);
  uint64_t v4 = v0[22];
  uint64_t v5 = v0[23];
  uint64_t v6 = v0[26];
  if (qword_18C6A5290 != -1) {
    swift_once();
  }
  uint64_t v7 = sub_186C5A8F4();
  __swift_project_value_buffer(v7, (uint64_t)qword_18C6A99F8);
  sub_186BFB8D0();
  sub_186C5B110();
  if ((v8 & 1) == 0)
  {
    type metadata accessor for KTraceRecordError();
    sub_186BF0CD4();
    swift_allocError();
    *uint64_t v9 = 1701667182LL;
    v9[1] = 0xE400000000000000LL;
    void v9[2] = v2;
    v9[3] = v1;
    swift_storeEnumTagMultiPayload();
    swift_bridgeObjectRetain();
    return swift_willThrow();
  }

  if ((v3 & 1) != 0)
  {
    type metadata accessor for KTraceRecordError();
    sub_186BF0CD4();
    swift_allocError();
    *uint64_t v10 = 0xD00000000000002FLL;
    v10[1] = 0x8000000186C66360LL;
LABEL_21:
    swift_storeEnumTagMultiPayload();
    return swift_willThrow();
  }

  if (v4 && *(void *)(v4 + 16) >= 0x20uLL)
  {
    type metadata accessor for KTraceRecordError();
    sub_186BF0CD4();
    swift_allocError();
    uint64_t v12 = 0x63615F667265706BLL;
    unint64_t v13 = 0xED0000736E6F6974LL;
LABEL_13:
    *uint64_t v11 = v12;
    v11[1] = v13;
    uint64_t v14 = 31LL;
LABEL_17:
    void v11[2] = v14;
    goto LABEL_21;
  }

  if (v5 && *(void *)(v5 + 16) >= 9uLL)
  {
    type metadata accessor for KTraceRecordError();
    sub_186BF0CD4();
    swift_allocError();
    uint64_t v12 = 0x69745F667265706BLL;
    unint64_t v13 = 0xEC0000007372656DLL;
    goto LABEL_13;
  }

  if (v6 && *(void *)(v6 + 16) >= 2uLL)
  {
    type metadata accessor for KTraceRecordError();
    sub_186BF0CD4();
    swift_allocError();
    *uint64_t v11 = 0xD000000000000015LL;
    v11[1] = 0x8000000186C66390LL;
    uint64_t v14 = 1LL;
    goto LABEL_17;
  }

  if (sub_186C5ADB0() > 79 || (uint64_t result = sub_186C5ADB0()) == 0)
  {
    type metadata accessor for KTraceRecordError();
    sub_186BF0CD4();
    swift_allocError();
    char v17 = v16;
    swift_bridgeObjectRetain();
    uint64_t v18 = sub_186C5ADB0();
    *char v17 = v2;
    v17[1] = v1;
    v17[2] = v18;
    goto LABEL_21;
  }

  return result;
}

void *sub_186C12F68@<X0>(void *a1@<X8>)
{
  uint64_t v3 = sub_186C5A84C();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1895F8858](v3);
  uint64_t v6 = &v11[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t result = (void *)sub_186C5AAA4();
  if (!v1)
  {
    uint64_t v9 = (uint64_t)result;
    unint64_t v10 = v8;
    uint64_t v14 = a1;
    sub_186C5A87C();
    swift_allocObject();
    sub_186C5A870();
    sub_186C5A840();
    (*(void (**)(_BYTE *, void, uint64_t))(v4 + 104))(v6, *MEMORY[0x189605FE8], v3);
    sub_186C5A858();
    sub_186C23BB4();
    sub_186C5A864();
    memcpy(v12, v13, 0x141uLL);
    memcpy(v11, v13, sizeof(v11));
    sub_186C23978((uint64_t)v12);
    sub_186C12C20();
    sub_186C23A98((uint64_t)v12);
    sub_186C13170();
    swift_release();
    sub_186BF06F4(v9, v10);
    return memcpy(v14, v13, 0x141uLL);
  }

  return result;
}

uint64_t sub_186C13170()
{
  uint64_t v2 = *v0;
  uint64_t v3 = v0[1];
  swift_bridgeObjectRetain();
  sub_186C10060(v2, v3);
  uint64_t result = swift_bridgeObjectRelease();
  if (v1) {
    return result;
  }
  uint64_t v5 = v0[37];
  uint64_t v6 = *(void *)(v5 + 64);
  uint64_t v29 = v5 + 64;
  uint64_t v7 = 1LL << *(_BYTE *)(v5 + 32);
  uint64_t v8 = -1LL;
  if (v7 < 64) {
    uint64_t v8 = ~(-1LL << v7);
  }
  unint64_t v9 = v8 & v6;
  int64_t v30 = (unint64_t)(v7 + 63) >> 6;
  uint64_t v34 = v0[37];
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v10 = 0LL;
  while (1)
  {
    if (v9)
    {
      unint64_t v11 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      unint64_t v12 = v11 | (v10 << 6);
      goto LABEL_24;
    }

    if (__OFADD__(v10++, 1LL))
    {
      __break(1u);
      goto LABEL_37;
    }

    if (v10 >= v30) {
      return swift_release();
    }
    unint64_t v14 = *(void *)(v29 + 8 * v10);
    if (!v14) {
      break;
    }
LABEL_23:
    unint64_t v9 = (v14 - 1) & v14;
    unint64_t v12 = __clz(__rbit64(v14)) + (v10 << 6);
LABEL_24:
    unint64_t v16 = (uint64_t *)(*(void *)(v34 + 48) + 16 * v12);
    uint64_t v18 = *v16;
    uint64_t v17 = v16[1];
    swift_bridgeObjectRetain_n();
    unint64_t v19 = sub_186C1D41C(v31, v18, v17);
    unint64_t v21 = (void *)v20;
    sub_186BFA418(v20, (uint64_t)v32, &qword_18C6A27A8);
    sub_186BFA418((uint64_t)v32, (uint64_t)v33, &qword_18C6A27A8);
    uint64_t result = sub_186C23BF8((uint64_t)v33);
    if ((_DWORD)result == 1) {
      goto LABEL_38;
    }
    uint64_t v22 = v21[7];
    if (v22)
    {
      uint64_t v23 = v21[6];
      swift_bridgeObjectRetain();
      uint64_t v24 = sub_186BED3BC(v23, v22);
      sub_186BED654(v24);
      swift_bridgeObjectRelease();
      uint64_t v25 = v21[9];
      if (v25)
      {
        uint64_t v26 = v21[8];
        swift_bridgeObjectRetain();
        uint64_t v27 = sub_186BED3BC(v26, v25);
        sub_186BED654(v27);
        swift_bridgeObjectRelease();
      }
    }

    else if (v21[9])
    {
      type metadata accessor for KTraceRecordError();
      sub_186BF0CD4();
      swift_allocError();
      *uint64_t v28 = v18;
      v28[1] = v17;
      swift_storeEnumTagMultiPayload();
      swift_willThrow();
      ((void (*)(void *, void))v19)(v31, 0LL);
      swift_release();
      return swift_bridgeObjectRelease_n();
    }

    swift_bridgeObjectRelease();
    ((void (*)(void *, void))v19)(v31, 0LL);
    uint64_t result = swift_bridgeObjectRelease_n();
  }

  int64_t v15 = v10 + 1;
  if (v10 + 1 >= v30) {
    return swift_release();
  }
  unint64_t v14 = *(void *)(v29 + 8 * v15);
  if (v14) {
    goto LABEL_22;
  }
  int64_t v15 = v10 + 2;
  if (v10 + 2 >= v30) {
    return swift_release();
  }
  unint64_t v14 = *(void *)(v29 + 8 * v15);
  if (v14) {
    goto LABEL_22;
  }
  int64_t v15 = v10 + 3;
  if (v10 + 3 >= v30) {
    return swift_release();
  }
  unint64_t v14 = *(void *)(v29 + 8 * v15);
  if (v14) {
    goto LABEL_22;
  }
  int64_t v15 = v10 + 4;
  if (v10 + 4 >= v30) {
    return swift_release();
  }
  unint64_t v14 = *(void *)(v29 + 8 * v15);
  if (v14) {
    goto LABEL_22;
  }
  int64_t v15 = v10 + 5;
  if (v10 + 5 >= v30) {
    return swift_release();
  }
  unint64_t v14 = *(void *)(v29 + 8 * v15);
  if (v14)
  {
LABEL_22:
    int64_t v10 = v15;
    goto LABEL_23;
  }

  while (1)
  {
    int64_t v10 = v15 + 1;
    if (__OFADD__(v15, 1LL)) {
      break;
    }
    if (v10 >= v30) {
      return swift_release();
    }
    unint64_t v14 = *(void *)(v29 + 8 * v10);
    ++v15;
    if (v14) {
      goto LABEL_23;
    }
  }

uint64_t sub_186C134F0(uint64_t a1, uint64_t a2, int a3, uint64_t *a4)
{
  uint64_t result = sub_186C24234(a1, a2, a3, a4);
  if (v4) {
    return v6;
  }
  return result;
}

uint64_t sub_186C13514(uint64_t a1, uint64_t a2, char a3, uint64_t *a4)
{
  uint64_t v8 = *(void *)(v4 + 296);
  uint64_t v9 = swift_bridgeObjectRetain();
  uint64_t v10 = sub_186C0DC14(v9);
  swift_bridgeObjectRelease();
  uint64_t v219 = sub_186C222FC(v10);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v11 = sub_186C24CFC(v8, a1, a2);
  uint64_t v228 = v5;
  swift_bridgeObjectRelease();
  uint64_t v213 = a1;
  swift_bridgeObjectRelease();
  uint64_t v204 = a2;
  swift_bridgeObjectRelease();
  uint64_t v224 = v11 + 64;
  uint64_t v227 = v4;
  uint64_t v12 = 1LL << *(_BYTE *)(v11 + 32);
  uint64_t v13 = -1LL;
  if (v12 < 64) {
    uint64_t v13 = ~(-1LL << v12);
  }
  unint64_t v14 = v13 & *(void *)(v11 + 64);
  int64_t v229 = (unint64_t)(v12 + 63) >> 6;
  int64_t v15 = (void *)(v4 + 112);
  uint64_t v223 = v11;
  swift_retain();
  int64_t v16 = 0LL;
  if (!v14) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v17 = __clz(__rbit64(v14));
  v14 &= v14 - 1;
  for (unint64_t i = v17 | (v16 << 6); ; unint64_t i = __clz(__rbit64(v20)) + (v16 << 6))
  {
    uint64_t v22 = (uint64_t *)(*(void *)(v223 + 48) + 16 * i);
    uint64_t v24 = *v22;
    uint64_t v23 = v22[1];
    uint64_t v25 = *(void *)(v223 + 56) + 200 * i;
    __int128 v26 = *(_OWORD *)(v25 + 16);
    __int128 v27 = *(_OWORD *)(v25 + 32);
    __int128 v28 = *(_OWORD *)(v25 + 64);
    *(_OWORD *)&v234[32] = *(_OWORD *)(v25 + 48);
    *(_OWORD *)&v234[48] = v28;
    *(_OWORD *)v234 = v26;
    *(_OWORD *)&v234[16] = v27;
    __int128 v29 = *(_OWORD *)(v25 + 80);
    __int128 v30 = *(_OWORD *)(v25 + 96);
    __int128 v31 = *(_OWORD *)(v25 + 128);
    *(_OWORD *)&v234[96] = *(_OWORD *)(v25 + 112);
    *(_OWORD *)&v234[112] = v31;
    *(_OWORD *)&v234[64] = v29;
    *(_OWORD *)&v234[80] = v30;
    __int128 v32 = *(_OWORD *)(v25 + 144);
    __int128 v33 = *(_OWORD *)(v25 + 160);
    __int128 v34 = *(_OWORD *)(v25 + 176);
    *(void *)&v234[176] = *(void *)(v25 + 192);
    *(_OWORD *)&v234[144] = v33;
    *(_OWORD *)&v234[160] = v34;
    *(_OWORD *)&v234[128] = v32;
    __int128 v233 = *(_OWORD *)v25;
    v235[8] = *(_OWORD *)&v234[136];
    v235[9] = *(_OWORD *)&v234[152];
    v235[10] = *(_OWORD *)&v234[168];
    v235[4] = *(_OWORD *)&v234[72];
    v235[5] = *(_OWORD *)&v234[88];
    v235[6] = *(_OWORD *)&v234[104];
    v235[7] = *(_OWORD *)&v234[120];
    v235[0] = *(_OWORD *)&v234[8];
    v235[1] = *(_OWORD *)&v234[24];
    v235[2] = *(_OWORD *)&v234[40];
    v235[3] = *(_OWORD *)&v234[56];
    swift_bridgeObjectRetain();
    sub_186C24F18((uint64_t)&v233);
    sub_186C10BE0((uint64_t)v235, v24, v23, a3 & 1);
    if (v5)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      sub_186C24FC0((uint64_t)&v233);
      swift_release();
      return (uint64_t)v15;
    }

    uint64_t v35 = *(char **)(v227 + 312);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v35 = sub_186C01C3C(0LL, *((void *)v35 + 2) + 1LL, 1, v35);
    }
    unint64_t v37 = *((void *)v35 + 2);
    unint64_t v36 = *((void *)v35 + 3);
    if (v37 >= v36 >> 1) {
      uint64_t v35 = sub_186C01C3C((char *)(v36 > 1), v37 + 1, 1, v35);
    }
    *((void *)v35 + 2) = v37 + 1;
    uint64_t v38 = &v35[16 * v37];
    *((void *)v38 + 4) = v24;
    *((void *)v38 + 5) = v23;
    sub_186C24FC0((uint64_t)&v233);
    *(void *)(v227 + 312) = v35;
    if (v14) {
      goto LABEL_4;
    }
LABEL_5:
    BOOL v19 = __OFADD__(v16++, 1LL);
    if (v19)
    {
LABEL_227:
      __break(1u);
LABEL_228:
      __break(1u);
LABEL_229:
      __break(1u);
LABEL_230:
      __break(1u);
LABEL_231:
      __break(1u);
LABEL_232:
      __break(1u);
      goto LABEL_233;
    }

    if (v16 >= v229) {
      goto LABEL_28;
    }
    unint64_t v20 = *(void *)(v224 + 8 * v16);
    if (!v20) {
      break;
    }
LABEL_15:
    unint64_t v14 = (v20 - 1) & v20;
  }

  int64_t v21 = v16 + 1;
  if (v16 + 1 >= v229) {
    goto LABEL_28;
  }
  unint64_t v20 = *(void *)(v224 + 8 * v21);
  if (v20) {
    goto LABEL_14;
  }
  int64_t v21 = v16 + 2;
  if (v16 + 2 >= v229) {
    goto LABEL_28;
  }
  unint64_t v20 = *(void *)(v224 + 8 * v21);
  if (v20)
  {
LABEL_14:
    int64_t v16 = v21;
    goto LABEL_15;
  }

  int64_t v21 = v16 + 3;
  if (v16 + 3 < v229)
  {
    unint64_t v20 = *(void *)(v224 + 8 * v21);
    if (!v20)
    {
      while (1)
      {
        int64_t v16 = v21 + 1;
        if (__OFADD__(v21, 1LL)) {
          break;
        }
        if (v16 >= v229) {
          goto LABEL_28;
        }
        unint64_t v20 = *(void *)(v224 + 8 * v16);
        ++v21;
        if (v20) {
          goto LABEL_15;
        }
      }

LABEL_233:
      __break(1u);
LABEL_234:
      __break(1u);
      goto LABEL_235;
    }

    goto LABEL_14;
  }

LABEL_94:
        unint64_t v98 = (v104 - 1) & v104;
        int64_t v231 = v105;
        unint64_t v102 = __clz(__rbit64(v104)) + (v105 << 6);
LABEL_95:
        uint64_t v107 = 16 * v102;
        v108 = (uint64_t *)(*(void *)(v226 + 48) + v107);
        uint64_t v110 = *v108;
        uint64_t v109 = v108[1];
        v111 = (uint64_t *)(*(void *)(v226 + 56) + v107);
        uint64_t v112 = *v111;
        uint64_t v113 = v111[1];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        unint64_t v115 = sub_186BF8278(v110, v109);
        uint64_t v116 = v15[2];
        BOOL v117 = (v114 & 1) == 0;
        uint64_t v118 = v116 + v117;
        if (__OFADD__(v116, v117))
        {
          __break(1u);
          goto LABEL_222;
        }

        char v119 = v114;
        if (v15[3] >= v118)
        {
          if ((isUniquelyReferenced_nonNull_native & 1) != 0)
          {
            int64_t v15 = (void *)v233;
            if ((v114 & 1) != 0) {
              goto LABEL_75;
            }
          }

          else
          {
            sub_186C1C4F0();
            int64_t v15 = (void *)v233;
            if ((v119 & 1) != 0) {
              goto LABEL_75;
            }
          }
        }

        else
        {
          sub_186C1BC80(v118, isUniquelyReferenced_nonNull_native & 1);
          unint64_t v120 = sub_186BF8278(v110, v109);
          if ((v119 & 1) != (v121 & 1)) {
            goto LABEL_250;
          }
          unint64_t v115 = v120;
          int64_t v15 = (void *)v233;
          if ((v119 & 1) != 0)
          {
LABEL_75:
            swift_bridgeObjectRelease();
            v100 = (void *)(v15[7] + 16 * v115);
            swift_bridgeObjectRelease();
            void *v100 = v112;
            v100[1] = v113;
            goto LABEL_76;
          }
        }

        v15[(v115 >> 6) + 8] |= 1LL << v115;
        v122 = (uint64_t *)(v15[6] + 16 * v115);
        uint64_t *v122 = v110;
        v122[1] = v109;
        v123 = (void *)(v15[7] + 16 * v115);
        void *v123 = v112;
        v123[1] = v113;
        uint64_t v124 = v15[2];
        BOOL v19 = __OFADD__(v124, 1LL);
        uint64_t v125 = v124 + 1;
        if (v19)
        {
          __break(1u);
LABEL_224:
          swift_bridgeObjectRelease();
          int64_t v15 = (void *)MEMORY[0x18961AFE8];
          goto LABEL_225;
        }

        v15[2] = v125;
LABEL_76:
        char isUniquelyReferenced_nonNull_native = 1;
      }

      uint64_t v106 = j + 5;
      if (j + 5 < v221) {
        break;
      }
LABEL_106:
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
      uint64_t v126 = *(void *)(v209 + 16);
      if (!v126) {
        goto LABEL_124;
      }
      if (*(void *)(v209 + 32) == v202 && *(void *)(v209 + 40) == v212 || (sub_186C5B4F4() & 1) != 0)
      {
        unint64_t v127 = 0LL;
        goto LABEL_111;
      }

      if (v126 == 1)
      {
LABEL_124:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0) {
          v133 = (char *)v209;
        }
        else {
          v133 = sub_186C1CD34(0LL, *(void *)(v209 + 16) + 1LL, 1, (char *)v209);
        }
        unint64_t v135 = *((void *)v133 + 2);
        unint64_t v134 = *((void *)v133 + 3);
        if (v135 >= v134 >> 1) {
          v133 = sub_186C1CD34((char *)(v134 > 1), v135 + 1, 1, v133);
        }
        *((void *)v133 + 2) = v135 + 1;
        uint64_t v209 = (uint64_t)v133;
        v81 = &v133[32 * v135];
        *((void *)v81 + 4) = v196;
        *((void *)v81 + 5) = v90;
        *((void *)v81 + 6) = v15;
        v81[56] = v195;
      }

      else
      {
        v130 = (void *)(v209 + 72);
        unint64_t v127 = 1LL;
        while (1)
        {
          BOOL v131 = *(v130 - 1) == v202 && *v130 == v212;
          if (v131 || (sub_186C5B4F4() & 1) != 0) {
            break;
          }
          unint64_t v132 = v127 + 1;
          if (__OFADD__(v127, 1LL)) {
            goto LABEL_243;
          }
          v130 += 4;
          ++v127;
          if (v132 == v126) {
            goto LABEL_124;
          }
        }

  __break(1u);
LABEL_95:
  __break(1u);
LABEL_96:
  __break(1u);
  return result;
}

LABEL_111:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
        {
          v128 = (char *)v209;
          if ((v127 & 0x8000000000000000LL) != 0) {
            goto LABEL_246;
          }
        }

        else
        {
          v128 = sub_186C1CACC(v209);
          if ((v127 & 0x8000000000000000LL) != 0) {
            goto LABEL_246;
          }
        }

        if (v127 >= *((void *)v128 + 2))
        {
LABEL_247:
          __break(1u);
LABEL_248:
          __break(1u);
LABEL_249:
          __break(1u);
LABEL_250:
          uint64_t result = sub_186C5B530();
          __break(1u);
          return result;
        }

        uint64_t v209 = (uint64_t)v128;
        v129 = &v128[32 * v127];
        *((void *)v129 + 4) = v196;
        *((void *)v129 + 5) = v90;
        *((void *)v129 + 6) = v15;
        v129[56] = v195;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }

      swift_bridgeObjectRelease();
      uint64_t v79 = v192;
      unint64_t v80 = v206;
      if (v206 == v193) {
        goto LABEL_131;
      }
    }

    unint64_t v104 = *(void *)(v215 + 8 * v106);
    if (!v104)
    {
      while (1)
      {
        int64_t v105 = v106 + 1;
        if (__OFADD__(v106, 1LL)) {
          break;
        }
        if (v105 >= v221) {
          goto LABEL_106;
        }
        unint64_t v104 = *(void *)(v215 + 8 * v105);
        ++v106;
        if (v104) {
          goto LABEL_94;
        }
      }

LABEL_235:
      __break(1u);
LABEL_236:
      __break(1u);
LABEL_237:
      __break(1u);
LABEL_238:
      __break(1u);
LABEL_239:
      __break(1u);
LABEL_240:
      __break(1u);
LABEL_241:
      __break(1u);
LABEL_242:
      __break(1u);
LABEL_243:
      __break(1u);
LABEL_244:
      __break(1u);
LABEL_245:
      __break(1u);
LABEL_246:
      __break(1u);
      goto LABEL_247;
    }

    int64_t v105 = j + 5;
    goto LABEL_94;
  }

LABEL_131:
  swift_bridgeObjectRelease();
  v136 = sub_186C109BC(*a4);
  if (v137)
  {
    int64_t v15 = v136;
    uint64_t v139 = v137;
    uint64_t v140 = v138;
    swift_bridgeObjectRelease();
    swift_release();
    type metadata accessor for KTraceRecordError();
    sub_186BF0CD4();
    swift_allocError();
    v142 = v141;
    uint64_t v143 = sub_186C10A44(v140);
    unint64_t v145 = v144;
    swift_bridgeObjectRelease();
    uint64_t v146 = 4144959LL;
    if (v145) {
      uint64_t v146 = v143;
    }
    unint64_t v147 = 0xE300000000000000LL;
    void *v142 = v15;
    v142[1] = v139;
    if (v145) {
      unint64_t v147 = v145;
    }
    v142[2] = v146;
    v142[3] = v147;
    goto LABEL_39;
  }

  uint64_t v197 = v204 + 56;
  uint64_t v148 = 1LL << *(_BYTE *)(v204 + 32);
  uint64_t v149 = -1LL;
  if (v148 < 64) {
    uint64_t v149 = ~(-1LL << v148);
  }
  unint64_t v150 = v149 & *(void *)(v204 + 56);
  int64_t v199 = (unint64_t)(v148 + 63) >> 6;
  uint64_t v151 = swift_bridgeObjectRetain();
  int64_t v152 = 0LL;
  v153 = (char *)v209;
  while (1)
  {
    v154 = v153;
    if (v150)
    {
      uint64_t v203 = (v150 - 1) & v150;
      unint64_t v155 = __clz(__rbit64(v150)) | (v152 << 6);
      goto LABEL_154;
    }

    BOOL v19 = __OFADD__(v152++, 1LL);
    if (v19) {
      goto LABEL_248;
    }
    if (v152 >= v199) {
      break;
    }
    unint64_t v156 = *(void *)(v197 + 8 * v152);
    if (!v156)
    {
      int64_t v157 = v152 + 1;
      if (v152 + 1 >= v199) {
        break;
      }
      unint64_t v156 = *(void *)(v197 + 8 * v157);
      if (!v156)
      {
        int64_t v157 = v152 + 2;
        if (v152 + 2 >= v199) {
          break;
        }
        unint64_t v156 = *(void *)(v197 + 8 * v157);
        if (!v156)
        {
          int64_t v157 = v152 + 3;
          if (v152 + 3 >= v199) {
            break;
          }
          unint64_t v156 = *(void *)(v197 + 8 * v157);
          if (!v156)
          {
            while (1)
            {
              int64_t v152 = v157 + 1;
              if (__OFADD__(v157, 1LL)) {
                goto LABEL_249;
              }
              if (v152 >= v199) {
                goto LABEL_215;
              }
              unint64_t v156 = *(void *)(v197 + 8 * v152);
              ++v157;
              if (v156) {
                goto LABEL_153;
              }
            }
          }
        }
      }

      int64_t v152 = v157;
    }

LABEL_153:
    uint64_t v203 = (v156 - 1) & v156;
    unint64_t v155 = __clz(__rbit64(v156)) + (v152 << 6);
LABEL_154:
    v158 = (uint64_t *)(*(void *)(v151 + 48) + 16 * v155);
    uint64_t v159 = *((void *)v153 + 2);
    if (!v159)
    {
      swift_bridgeObjectRetain();
      uint64_t v162 = 0LL;
      int64_t v163 = 0LL;
      goto LABEL_168;
    }

    uint64_t v160 = *v158;
    BOOL v161 = *((void *)v153 + 4) == *v158 && *((void *)v153 + 5) == v158[1];
    uint64_t v232 = v158[1];
    if (v161)
    {
      int64_t v201 = v152;
      uint64_t v162 = 0LL;
    }

    else if ((sub_186C5B4F4() & 1) != 0)
    {
      int64_t v201 = v152;
      uint64_t v162 = 0LL;
    }

    else
    {
      if (v159 == 1)
      {
        int64_t v163 = *((void *)v153 + 2);
        swift_bridgeObjectRetain();
        if (!v163) {
          goto LABEL_238;
        }
        uint64_t v162 = 1LL;
        goto LABEL_168;
      }

      v181 = v153 + 72;
      uint64_t v162 = 1LL;
      int64_t v201 = v152;
      while (*(v181 - 1) != v160 || *v181 != v232)
      {
        if ((sub_186C5B4F4() & 1) != 0)
        {
          v153 = v154;
          break;
        }

        uint64_t v183 = v162 + 1;
        if (__OFADD__(v162, 1LL)) {
          goto LABEL_242;
        }
        v153 = v154;
        v181 += 4;
        ++v162;
        if (v183 == v159)
        {
          uint64_t v162 = v159;
          goto LABEL_165;
        }
      }
    }

    uint64_t v164 = v162 + 1;
    uint64_t v165 = v232;
    if (__OFADD__(v162, 1LL)) {
      goto LABEL_244;
    }
    if (v164 != v159)
    {
      swift_bridgeObjectRetain();
      uint64_t v171 = 32 * v162 + 64;
      unint64_t v172 = v162 + 1;
      while ((v164 & 0x8000000000000000LL) == 0)
      {
        unint64_t v173 = *((void *)v153 + 2);
        if (v172 >= v173) {
          goto LABEL_229;
        }
        BOOL v174 = *(void *)&v153[v171] == v160 && *(void *)&v153[v171 + 8] == v165;
        if (!v174 && (sub_186C5B4F4() & 1) == 0)
        {
          if (v172 != v162)
          {
            if (v162 >= v173) {
              goto LABEL_236;
            }
            uint64_t v175 = (uint64_t)&v153[32 * v162 + 32];
            uint64_t v210 = *(void *)v175;
            uint64_t v176 = *(void *)(v175 + 16);
            char v207 = *(_BYTE *)(v175 + 24);
            uint64_t v222 = *(void *)&v153[v171];
            uint64_t v177 = *(void *)&v153[v171 + 8];
            uint64_t v178 = *(void *)&v153[v171 + 16];
            char v218 = v153[v171 + 24];
            uint64_t v216 = *(void *)(v175 + 8);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              v153 = sub_186C1CACC((uint64_t)v153);
            }
            v179 = &v153[32 * v162];
            *((void *)v179 + 4) = v222;
            *((void *)v179 + 5) = v177;
            *((void *)v179 + 6) = v178;
            v179[56] = v218;
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if (v172 >= *((void *)v153 + 2)) {
              goto LABEL_237;
            }
            v180 = &v153[v171];
            *(void *)v180 = v210;
            *((void *)v180 + 1) = v216;
            *((void *)v180 + 2) = v176;
            v180[24] = v207;
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t v165 = v232;
          }

          BOOL v19 = __OFADD__(v162++, 1LL);
          if (v19) {
            goto LABEL_234;
          }
        }

        ++v172;
        v171 += 32LL;
        if (v172 == *((void *)v153 + 2)) {
          goto LABEL_166;
        }
      }

      goto LABEL_228;
    }

LABEL_165:
    swift_bridgeObjectRetain();
LABEL_166:
    int64_t v163 = *((void *)v153 + 2);
    int64_t v152 = v201;
    if (v163 < v162) {
      goto LABEL_238;
    }
    if (v162 < 0) {
      goto LABEL_239;
    }
LABEL_168:
    uint64_t v166 = v162 - v163;
    if (__OFADD__(v163, v162 - v163)) {
      goto LABEL_240;
    }
    v167 = (char *)swift_isUniquelyReferenced_nonNull_native();
    if (!(_DWORD)v167 || v162 > *((void *)v153 + 3) >> 1)
    {
      if (v163 <= v162) {
        int64_t v168 = v162;
      }
      else {
        int64_t v168 = v163;
      }
      v153 = sub_186C1CD34(v167, v168, 1, v153);
    }

    swift_arrayDestroy();
    if (v163 != v162)
    {
      memmove(&v153[32 * v162 + 32], &v153[32 * v163 + 32], 32 * (*((void *)v153 + 2) - v163));
      uint64_t v169 = *((void *)v153 + 2);
      BOOL v19 = __OFADD__(v169, v166);
      uint64_t v170 = v169 + v166;
      if (v19) {
        goto LABEL_245;
      }
      *((void *)v153 + 2) = v170;
    }

    swift_bridgeObjectRelease();
    unint64_t v150 = v203;
    uint64_t v151 = v204;
  }

LABEL_215:
  swift_release();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(v227 + 264) = v153;
  int64_t v185 = *((void *)v153 + 2);
  if (!v185) {
    goto LABEL_224;
  }
  *(void *)&__int128 v233 = MEMORY[0x18961AFE8];
  swift_bridgeObjectRetain();
  sub_186BEF8C8(0LL, v185, 0);
  int64_t v15 = (void *)v233;
  v186 = (uint64_t *)(v153 + 40);
  do
  {
    uint64_t v188 = *(v186 - 1);
    uint64_t v187 = *v186;
    *(void *)&__int128 v233 = v15;
    unint64_t v190 = v15[2];
    unint64_t v189 = v15[3];
    swift_bridgeObjectRetain();
    if (v190 >= v189 >> 1)
    {
      sub_186BEF8C8((char *)(v189 > 1), v190 + 1, 1);
      int64_t v15 = (void *)v233;
    }

    v186 += 4;
    v15[2] = v190 + 1;
    v191 = &v15[2 * v190];
    v191[4] = v188;
    v191[5] = v187;
    --v185;
  }

  while (v185);
LABEL_222:
  swift_bridgeObjectRelease_n();
LABEL_225:
  sub_186C1E70C(v223);
  swift_release();
  return (uint64_t)v15;
}

uint64_t sub_186C149D0(uint64_t result, uint64_t a2)
{
  uint64_t v2 = result;
  int64_t v3 = 0LL;
  uint64_t v18 = a2;
  uint64_t v4 = result + 56;
  uint64_t v5 = 1LL << *(_BYTE *)(result + 32);
  uint64_t v6 = -1LL;
  if (v5 < 64) {
    uint64_t v6 = ~(-1LL << v5);
  }
  unint64_t v7 = v6 & *(void *)(result + 56);
  int64_t v8 = (unint64_t)(v5 + 63) >> 6;
  while (1)
  {
    if (v7)
    {
      unint64_t v9 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      unint64_t v10 = v9 | (v3 << 6);
      goto LABEL_5;
    }

    int64_t v14 = v3 + 1;
    if (__OFADD__(v3, 1LL))
    {
      __break(1u);
      goto LABEL_25;
    }

    if (v14 >= v8) {
      goto LABEL_23;
    }
    unint64_t v15 = *(void *)(v4 + 8 * v14);
    ++v3;
    if (!v15)
    {
      int64_t v3 = v14 + 1;
      if (v14 + 1 >= v8) {
        goto LABEL_23;
      }
      unint64_t v15 = *(void *)(v4 + 8 * v3);
      if (!v15)
      {
        int64_t v3 = v14 + 2;
        if (v14 + 2 >= v8) {
          goto LABEL_23;
        }
        unint64_t v15 = *(void *)(v4 + 8 * v3);
        if (!v15)
        {
          int64_t v3 = v14 + 3;
          if (v14 + 3 >= v8) {
            goto LABEL_23;
          }
          unint64_t v15 = *(void *)(v4 + 8 * v3);
          if (!v15) {
            break;
          }
        }
      }
    }

uint64_t sub_186C14B4C(_TtC6ktrace12ProviderList *a1, void *a2, char a3)
{
  return sub_186C10170(a1, a2, a3);
}

uint64_t sub_186C14BA4(uint64_t a1, uint64_t a2)
{
  int64_t v3 = v2;
  memcpy(__dst, v3, 0x141uLL);
  uint64_t v17 = (char *)__dst[36];
  swift_bridgeObjectRetain_n();
  sub_186C1F70C((uint64_t *)&v17, (uint64_t (*)(uint64_t))sub_186C0A844, sub_186C09C7C);
  swift_bridgeObjectRelease();
  uint64_t v6 = (uint64_t)v17;
  sub_186C23978((uint64_t)__dst);
  uint64_t v7 = swift_bridgeObjectRetain();
  uint64_t v8 = sub_186C0DEE4(v7);
  swift_bridgeObjectRelease();
  sub_186C23A98((uint64_t)__dst);
  uint64_t v9 = sub_186C222FC(v8);
  swift_bridgeObjectRelease();
  uint64_t v10 = sub_186C1E32C(v6, v9);
  uint64_t v11 = (char *)sub_186C09B98(v10);
  swift_release();
  uint64_t v17 = v11;
  swift_retain();
  sub_186C1F70C((uint64_t *)&v17, (uint64_t (*)(uint64_t))sub_186C0A844, sub_186C09C7C);
  swift_release();
  uint64_t v12 = (uint64_t)v17;
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C6A27C0);
  uint64_t inited = swift_initStackObject();
  *(void *)(inited + 32) = 0xD000000000000010LL;
  *(_OWORD *)(inited + 16) = xmmword_186C5F750;
  *(void *)(inited + 40) = 0x8000000186C663B0LL;
  *(void *)(inited + 48) = v6;
  strcpy((char *)(inited + 56), "Extra layers: ");
  *(_BYTE *)(inited + 71) = -18;
  *(void *)(inited + 72) = v12;
  swift_bridgeObjectRetain();
  int64_t v14 = sub_186C23FEC(inited, a1, a2);
  swift_bridgeObjectRelease();
  swift_setDeallocating();
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C6A27C8);
  swift_arrayDestroy();
  uint64_t v17 = v14;
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C6A21A8);
  sub_186C253C0((unint64_t *)&qword_18C6A21B0, &qword_18C6A21A8, MEMORY[0x189618458]);
  uint64_t v15 = sub_186C5ACD8();
  swift_bridgeObjectRelease();
  return v15;
}

uint64_t sub_186C14DF8()
{
  uint64_t v2 = *(void *)v0;
  unint64_t v1 = *(void *)(v0 + 8);
  uint64_t v3 = *(void *)(v0 + 264);
  uint64_t v4 = *(void *)(v0 + 296);
  int v5 = *(unsigned __int8 *)(v0 + 304);
  if (v5 != 1 && v5 != 4)
  {
    uint64_t v27 = 10272LL;
    unint64_t v28 = 0xE200000000000000LL;
    sub_186C5ADD4();
    swift_bridgeObjectRelease();
    sub_186C5ADD4();
  }

  unint64_t v28 = v1;
  swift_bridgeObjectRetain();
  sub_186C5ADD4();
  sub_186C5B4DC();
  sub_186C5ADD4();
  swift_bridgeObjectRelease();
  sub_186C5ADD4();
  swift_bridgeObjectRelease();
  sub_186C5ADD4();
  swift_bridgeObjectRetain();
  sub_186C5ADD4();
  swift_bridgeObjectRelease();
  uint64_t v7 = v2;
  unint64_t v8 = v1;
  uint64_t v9 = swift_bridgeObjectRetain();
  uint64_t v10 = sub_186C0E1D0(v9);
  swift_bridgeObjectRelease();
  uint64_t v27 = v10;
  swift_bridgeObjectRetain();
  sub_186C1F70C(&v27, (uint64_t (*)(uint64_t))sub_186C0A844, sub_186C09C7C);
  swift_bridgeObjectRelease();
  if (*(void *)(v4 + 16))
  {
    uint64_t v27 = 0LL;
    unint64_t v28 = 0xE000000000000000LL;
    sub_186C5B260();
    swift_bridgeObjectRelease();
    uint64_t v27 = 0xD000000000000017LL;
    unint64_t v28 = 0x8000000186C663D0LL;
    __swift_instantiateConcreteTypeFromMangledName(&qword_18C6A21A8);
    sub_186C253C0((unint64_t *)&qword_18C6A21B0, &qword_18C6A21A8, MEMORY[0x189618458]);
    sub_186C5ACD8();
    swift_release();
    sub_186C5ADD4();
    swift_bridgeObjectRelease();
    sub_186C5ADD4();
    if (!v3) {
      goto LABEL_16;
    }
  }

  else
  {
    swift_release();
    if (!v3) {
      goto LABEL_16;
    }
  }

  int64_t v11 = *(void *)(v3 + 16);
  uint64_t v12 = MEMORY[0x18961AFE8];
  if (v11)
  {
    unint64_t v24 = v8;
    uint64_t v25 = v7;
    uint64_t v26 = MEMORY[0x18961AFE8];
    sub_186BEF8C8(0LL, v11, 0);
    uint64_t v12 = v26;
    uint64_t v13 = v3 + 48;
    uint64_t v14 = MEMORY[0x189617FA8];
    do
    {
      unint64_t v15 = *(void *)(v13 - 8);
      uint64_t v27 = *(void *)(v13 - 16);
      unint64_t v28 = v15;
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      sub_186C5ADD4();
      uint64_t v16 = swift_bridgeObjectRetain();
      uint64_t v17 = sub_186C0D9B0(v16);
      swift_bridgeObjectRelease();
      MEMORY[0x186E44920](v17, v14);
      sub_186C5ADD4();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v18 = v27;
      unint64_t v19 = v28;
      unint64_t v21 = *(void *)(v26 + 16);
      unint64_t v20 = *(void *)(v26 + 24);
      if (v21 >= v20 >> 1) {
        sub_186BEF8C8((char *)(v20 > 1), v21 + 1, 1);
      }
      v13 += 32LL;
      *(void *)(v26 + 16) = v21 + 1;
      unint64_t v22 = v26 + 16 * v21;
      *(void *)(v22 + 32) = v18;
      *(void *)(v22 + 40) = v19;
      --v11;
    }

    while (v11);
    unint64_t v8 = v24;
    uint64_t v7 = v25;
  }

  uint64_t v27 = v12;
  swift_bridgeObjectRetain();
  sub_186C1F70C(&v27, (uint64_t (*)(uint64_t))sub_186C0A844, sub_186C09C7C);
  swift_bridgeObjectRelease();
  uint64_t v27 = 0LL;
  unint64_t v28 = 0xE000000000000000LL;
  sub_186C5B260();
  swift_bridgeObjectRelease();
  uint64_t v27 = 0xD00000000000001ALL;
  unint64_t v28 = 0x8000000186C663F0LL;
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C6A21A8);
  sub_186C253C0((unint64_t *)&qword_18C6A21B0, &qword_18C6A21A8, MEMORY[0x189618458]);
  sub_186C5ACD8();
  swift_release();
  sub_186C5ADD4();
  swift_bridgeObjectRelease();
  sub_186C5ADD4();
LABEL_16:
  uint64_t v27 = v7;
  unint64_t v28 = v8;
  sub_186C5ADD4();
  sub_186C5ADD4();
  swift_bridgeObjectRelease();
  sub_186C5ADD4();
  swift_bridgeObjectRelease();
  sub_186C5ADD4();
  swift_bridgeObjectRetain();
  sub_186C5ADD4();
  swift_bridgeObjectRelease();
  return v27;
}

uint64_t sub_186C153C8()
{
  uint64_t v12 = *MEMORY[0x1895F89C0];
  uint64_t v2 = sub_186C5A888();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1895F8858](v2);
  int v5 = &v10[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  memcpy(v11, v0, sizeof(v11));
  sub_186C5A8B8();
  swift_allocObject();
  sub_186C5A8AC();
  (*(void (**)(_BYTE *, void, uint64_t))(v3 + 104))(v5, *MEMORY[0x189606088], v2);
  sub_186C5A894();
  memcpy(v10, v11, sizeof(v10));
  sub_186C25400();
  sub_186C5A8A0();
  if (!v1) {
    __asm { BR              X10 }
  }

  swift_release();
  return v7 & 1;
}

uint64_t sub_186C1572C(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C6A27D8);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1895F8858](v4);
  char v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v29 = *(void *)(v2 + 16);
  uint64_t v28 = *(void *)(v2 + 24);
  uint64_t v27 = *(void *)(v2 + 32);
  uint64_t v26 = *(void *)(v2 + 40);
  uint64_t v25 = *(void *)(v2 + 48);
  uint64_t v23 = *(void *)(v2 + 56);
  uint64_t v24 = *(void *)(v2 + 64);
  uint64_t v22 = *(void *)(v2 + 72);
  uint64_t v20 = *(void *)(v2 + 80);
  uint64_t v21 = *(void *)(v2 + 88);
  uint64_t v18 = *(void *)(v2 + 96);
  uint64_t v19 = *(void *)(v2 + 104);
  uint64_t v17 = *(void *)(v2 + 288);
  uint64_t v16 = *(void *)(v2 + 296);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_186C25444();
  sub_186C5B5F0();
  LOBYTE(v31) = 0;
  uint64_t v8 = v30;
  sub_186C5B47C();
  if (!v8)
  {
    LOBYTE(v31) = 1;
    sub_186C5B4A0();
    LOBYTE(v31) = 2;
    sub_186C5B428();
    LOBYTE(v31) = 3;
    sub_186C5B428();
    LOBYTE(v31) = 4;
    sub_186C5B428();
    *(void *)&__int128 v31 = v22;
    char v42 = 5;
    __swift_instantiateConcreteTypeFromMangledName(&qword_18C6A21A8);
    sub_186C25554(&qword_18C6A2790, MEMORY[0x189617FB0], MEMORY[0x189618448]);
    sub_186C5B458();
    LOBYTE(v31) = 6;
    sub_186C5B47C();
    LOBYTE(v31) = 7;
    sub_186C5B47C();
    __int128 v9 = *(_OWORD *)(v2 + 256);
    __int128 v39 = *(_OWORD *)(v2 + 240);
    __int128 v40 = v9;
    __int128 v41 = *(_OWORD *)(v2 + 272);
    __int128 v10 = *(_OWORD *)(v2 + 192);
    __int128 v35 = *(_OWORD *)(v2 + 176);
    __int128 v36 = v10;
    __int128 v11 = *(_OWORD *)(v2 + 224);
    __int128 v37 = *(_OWORD *)(v2 + 208);
    __int128 v38 = v11;
    __int128 v12 = *(_OWORD *)(v2 + 128);
    __int128 v31 = *(_OWORD *)(v2 + 112);
    __int128 v13 = *(_OWORD *)(v2 + 144);
    __int128 v34 = *(_OWORD *)(v2 + 160);
    __int128 v32 = v12;
    __int128 v33 = v13;
    char v42 = 8;
    sub_186C231FC();
    sub_186C5B4AC();
    *(void *)&__int128 v31 = v17;
    char v42 = 9;
    sub_186C5B4AC();
    *(void *)&__int128 v31 = v16;
    char v42 = 10;
    __swift_instantiateConcreteTypeFromMangledName(&qword_18C6A27E8);
    sub_186C25680(&qword_18C6A27F0, (uint64_t (*)(void))sub_186C25488, MEMORY[0x189617FB0], MEMORY[0x189617910]);
    sub_186C5B4AC();
  }

  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t sub_186C15BA4@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C6A2800);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1895F8858](v5);
  uint64_t v8 = (char *)&v42 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  BOOL v117 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v9);
  sub_186C25444();
  sub_186C5B5E4();
  if (v2)
  {
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v117);
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }

  else
  {
    uint64_t v10 = v6;
    uint64_t v59 = a2;
    LOBYTE(v62[0]) = 0;
    uint64_t v11 = sub_186C5B3EC();
    uint64_t v13 = v12;
    LOBYTE(v62[0]) = 1;
    swift_bridgeObjectRetain();
    uint64_t v14 = sub_186C5B410();
    LOBYTE(v62[0]) = 2;
    uint64_t v57 = sub_186C5B3C8();
    uint64_t v58 = v14;
    LOBYTE(v62[0]) = 3;
    uint64_t v16 = v15;
    swift_bridgeObjectRetain();
    uint64_t v17 = sub_186C5B3C8();
    uint64_t v60 = v16;
    uint64_t v55 = v17;
    LOBYTE(v62[0]) = 4;
    uint64_t v19 = v18;
    swift_bridgeObjectRetain();
    uint64_t v20 = sub_186C5B3C8();
    uint64_t v22 = v21;
    uint64_t v52 = v20;
    uint64_t v54 = v19;
    uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C6A21A8);
    v61[0] = 5;
    uint64_t v24 = sub_186C25554(&qword_18C6A2808, MEMORY[0x189617FD8], MEMORY[0x189618478]);
    swift_bridgeObjectRetain();
    uint64_t v53 = v24;
    uint64_t v56 = v22;
    sub_186C5B3E0();
    uint64_t v47 = v23;
    uint64_t v25 = v62[0];
    LOBYTE(v62[0]) = 6;
    swift_bridgeObjectRetain();
    uint64_t v50 = 0LL;
    uint64_t v26 = sub_186C5B3EC();
    uint64_t v51 = v25;
    uint64_t v46 = v26;
    LOBYTE(v62[0]) = 7;
    uint64_t v28 = v27;
    swift_bridgeObjectRetain();
    uint64_t v29 = sub_186C5B3EC();
    uint64_t v49 = v28;
    uint64_t v45 = v29;
    char v93 = 8;
    uint64_t v31 = v30;
    sub_186C255B4();
    swift_bridgeObjectRetain();
    sub_186C5B41C();
    uint64_t v48 = v31;
    __int128 v90 = v102;
    __int128 v91 = v103;
    __int128 v92 = v104;
    __int128 v86 = v98;
    __int128 v87 = v99;
    __int128 v88 = v100;
    __int128 v89 = v101;
    __int128 v82 = v94;
    __int128 v83 = v95;
    __int128 v84 = v96;
    __int128 v85 = v97;
    __int128 v113 = v101;
    __int128 v114 = v102;
    __int128 v115 = v103;
    __int128 v116 = v104;
    __int128 v109 = v97;
    __int128 v110 = v98;
    __int128 v111 = v99;
    __int128 v112 = v100;
    __int128 v106 = v94;
    __int128 v107 = v95;
    __int128 v108 = v96;
    v61[0] = 9;
    sub_186C255F8((uint64_t)&v82);
    sub_186C5B41C();
    uint64_t v32 = v62[0];
    __swift_instantiateConcreteTypeFromMangledName(&qword_18C6A27E8);
    char v80 = 10;
    sub_186C25680(&qword_18C6A2818, (uint64_t (*)(void))sub_186C256F4, MEMORY[0x189617FD8], MEMORY[0x189617928]);
    swift_bridgeObjectRetain();
    sub_186C5B41C();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v8, v5);
    uint64_t v53 = v81;
    uint64_t v43 = v13;
    uint64_t v44 = v11;
    *(void *)uint64_t v61 = v11;
    *(void *)&v61[8] = v13;
    uint64_t v33 = v56;
    *(void *)&v61[16] = v58;
    *(void *)&v61[24] = v57;
    uint64_t v34 = v54;
    *(void *)&v61[32] = v60;
    *(void *)&v61[40] = v55;
    uint64_t v35 = v51;
    *(void *)&v61[48] = v54;
    *(void *)&v61[56] = v52;
    *(void *)&v61[64] = v56;
    *(void *)&v61[72] = v51;
    *(void *)&v61[80] = v46;
    *(void *)&v61[88] = v49;
    *(void *)&v61[96] = v45;
    *(void *)&v61[104] = v48;
    *(_OWORD *)&v61[112] = v82;
    *(_OWORD *)&v61[128] = v83;
    *(_OWORD *)&v61[192] = v87;
    *(_OWORD *)&v61[176] = v86;
    *(_OWORD *)&v61[144] = v84;
    *(_OWORD *)&v61[160] = v85;
    *(_OWORD *)&v61[272] = v92;
    *(_OWORD *)&v61[256] = v91;
    *(_OWORD *)&v61[240] = v90;
    *(_OWORD *)&v61[208] = v88;
    *(_OWORD *)&v61[224] = v89;
    *(void *)&v61[288] = v32;
    *(void *)&v61[296] = v81;
    v61[304] = 4;
    *(void *)&v61[312] = MEMORY[0x18961AFE8];
    v61[320] = 0;
    sub_186C23978((uint64_t)v61);
    swift_bridgeObjectRelease();
    sub_186C254CC((uint64_t)&v82);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v36 = v34;
    swift_bridgeObjectRelease();
    uint64_t v37 = v33;
    swift_bridgeObjectRelease();
    uint64_t v38 = v35;
    swift_bridgeObjectRelease();
    uint64_t v39 = v49;
    swift_bridgeObjectRelease();
    uint64_t v40 = v48;
    swift_bridgeObjectRelease();
    memcpy(v59, v61, 0x141uLL);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v117);
    v62[0] = v44;
    v62[1] = v43;
    v62[2] = v58;
    v62[3] = v57;
    v62[4] = v60;
    v62[5] = v55;
    v62[6] = v36;
    v62[7] = v52;
    v62[8] = v37;
    v62[9] = v38;
    v62[10] = v46;
    v62[11] = v39;
    v62[12] = v45;
    v62[13] = v40;
    __int128 v71 = v114;
    __int128 v72 = v115;
    __int128 v73 = v116;
    __int128 v67 = v110;
    __int128 v68 = v111;
    __int128 v69 = v112;
    __int128 v70 = v113;
    __int128 v63 = v106;
    __int128 v64 = v107;
    __int128 v65 = v108;
    __int128 v66 = v109;
    uint64_t v74 = v32;
    uint64_t v75 = v53;
    char v76 = 4;
    *(_DWORD *)char v77 = *(_DWORD *)v105;
    *(_DWORD *)&v77[3] = *(_DWORD *)&v105[3];
    uint64_t v78 = MEMORY[0x18961AFE8];
    char v79 = 0;
    return sub_186C23A98((uint64_t)v62);
  }

uint64_t sub_186C166C0@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return sub_186C15BA4(a1, a2);
}

uint64_t sub_186C166D4(void *a1)
{
  return sub_186C1572C(a1);
}

uint64_t sub_186C166E8()
{
  return sub_186C5B5D8();
}

uint64_t sub_186C16740()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_186C16784()
{
  return sub_186C5B5D8();
}

uint64_t sub_186C167D8(void *a1, void *a2)
{
  if (*a1 == *a2 && a1[1] == a2[1]) {
    return 1LL;
  }
  else {
    return sub_186C5B4F4();
  }
}

void *sub_186C16808(char a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v60 = a3;
  int v64 = a2;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C6A2828);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = MEMORY[0x1895F8858](v6);
  __int128 v63 = (char *)&v58 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = MEMORY[0x1895F8858](v8);
  int64_t v62 = (char *)&v58 - v11;
  uint64_t v12 = MEMORY[0x1895F8858](v10);
  uint64_t v61 = (uint64_t)&v58 - v13;
  uint64_t v14 = MEMORY[0x1895F8858](v12);
  uint64_t v16 = (char *)&v58 - v15;
  MEMORY[0x1895F8858](v14);
  uint64_t v18 = (char *)&v58 - v17;
  uint64_t v19 = sub_186C5AA8C();
  uint64_t v67 = *(void *)(v19 - 8);
  uint64_t v20 = MEMORY[0x1895F8858](v19);
  uint64_t v21 = MEMORY[0x1895F8858](v20);
  uint64_t v59 = (char *)&v58 - v22;
  uint64_t v23 = MEMORY[0x1895F8858](v21);
  uint64_t v25 = (char *)&v58 - v24;
  uint64_t v26 = MEMORY[0x1895F8858](v23);
  uint64_t v28 = (char *)&v58 - v27;
  MEMORY[0x1895F8858](v26);
  uint64_t v30 = (char *)&v58 - v29;
  uint64_t v65 = v31;
  uint64_t v66 = v6;
  if ((a1 & 1) == 0 || !getenv("TRACE_PLAN_PATH"))
  {
    uint64_t v33 = (void *)MEMORY[0x18961AFE8];
    if (!a4) {
      goto LABEL_13;
    }
    goto LABEL_8;
  }

  sub_186C5ADE0();
  sub_186C5AA08();
  swift_bridgeObjectRelease();
  uint64_t v32 = *(int *)(v6 + 48);
  (*(void (**)(char *, char *, uint64_t))(v67 + 32))(v18, v30, v19);
  v18[v32] = 3;
  uint64_t v33 = (void *)sub_186C1D188(0LL, 1LL, 1, MEMORY[0x18961AFE8]);
  unint64_t v35 = v33[2];
  unint64_t v34 = v33[3];
  if (v35 >= v34 >> 1) {
    uint64_t v33 = (void *)sub_186C1D188(v34 > 1, v35 + 1, 1, v33);
  }
  v33[2] = v35 + 1;
  sub_186BFA418( (uint64_t)v18,  (uint64_t)v33 + ((*(unsigned __int8 *)(v7 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))
  + *(void *)(v7 + 72) * v35,
    &qword_18C6A2828);
  uint64_t v6 = v66;
  if (a4)
  {
LABEL_8:
    sub_186C5AA08();
    uint64_t v36 = *(int *)(v6 + 48);
    (*(void (**)(char *, char *, uint64_t))(v67 + 32))(v16, v28, v19);
    v16[v36] = 2;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v33 = (void *)sub_186C1D188(0LL, v33[2] + 1LL, 1, v33);
    }
    unint64_t v38 = v33[2];
    unint64_t v37 = v33[3];
    if (v38 >= v37 >> 1) {
      uint64_t v33 = (void *)sub_186C1D188(v37 > 1, v38 + 1, 1, v33);
    }
    v33[2] = v38 + 1;
    sub_186BFA418( (uint64_t)v16,  (uint64_t)v33 + ((*(unsigned __int8 *)(v7 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))
    + *(void *)(v7 + 72) * v38,
      &qword_18C6A2828);
    uint64_t v6 = v66;
  }

uint64_t sub_186C16DA8( _BYTE *a1, uint64_t a2, uint64_t a3, int a4, int a5, uint64_t a6, void (*a7)(_BYTE *, uint64_t))
{
  __int128 v69 = a7;
  uint64_t v66 = sub_186C5AA8C();
  uint64_t v62 = *(void *)(v66 - 8);
  uint64_t v14 = MEMORY[0x1895F8858](v66);
  uint64_t v61 = &v53[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v16 = MEMORY[0x1895F8858](v14);
  uint64_t v65 = &v53[-v17];
  MEMORY[0x1895F8858](v16);
  int v64 = &v53[-v18];
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C6A2828);
  uint64_t v20 = *(void *)(v19 - 8);
  MEMORY[0x1895F8858](v19);
  uint64_t v60 = &v53[-((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  int v22 = a5 & a4;
  uint64_t v23 = sub_186C16808(a5 & a4 & 1, a5, a6, (uint64_t)v69);
  uint64_t v24 = v23[2];
  if (v24)
  {
    int v54 = v22;
    uint64_t v55 = v7;
    unint64_t v56 = a1;
    uint64_t v63 = a3;
    id v59 = (id)objc_opt_self();
    uint64_t v25 = (uint64_t)v23 + ((*(unsigned __int8 *)(v20 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v20 + 80));
    uint64_t v26 = *(void *)(v20 + 72);
    uint64_t v57 = v23;
    uint64_t v58 = v26;
    uint64_t v27 = v66;
    uint64_t v28 = v64;
    while (1)
    {
      uint64_t v67 = v25;
      uint64_t v68 = v24;
      uint64_t v29 = v60;
      sub_186C25738(v25, (uint64_t)v60);
      uint64_t v30 = v62;
      uint64_t v31 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v62 + 32);
      v31(v28, v29, v27);
      uint64_t v32 = v61;
      sub_186C5AA38();
      sub_186C5AA44();
      __int128 v69 = *(void (**)(_BYTE *, uint64_t))(v30 + 8);
      v69(v32, v27);
      id v33 = v59;
      id v34 = objc_msgSend(v59, sel_defaultManager);
      sub_186C5AA74();
      unint64_t v35 = (void *)sub_186C5AD08();
      swift_bridgeObjectRelease();
      unsigned int v36 = objc_msgSend(v34, sel_fileExistsAtPath_, v35);

      if (v36)
      {
        uint64_t v44 = v66;
        v69(v64, v66);
        swift_bridgeObjectRelease();
        v31(v56, v65, v44);
LABEL_12:
        char v43 = v36 ^ 1;
        return v43 & 1;
      }

      id v37 = objc_msgSend(v33, sel_defaultManager);
      uint64_t v38 = a2;
      uint64_t v39 = (void *)sub_186C5AD08();
      unsigned int v40 = objc_msgSend(v37, sel_fileExistsAtPath_, v39);

      if (v40) {
        break;
      }
      uint64_t v27 = v66;
      uint64_t v41 = v69;
      v69(v65, v66);
      uint64_t v28 = v64;
      v41(v64, v27);
      uint64_t v25 = v67 + v58;
      uint64_t v24 = v68 - 1;
      a2 = v38;
      if (v68 == 1)
      {
        swift_bridgeObjectRelease();
        a3 = v63;
        goto LABEL_8;
      }
    }

    swift_bridgeObjectRelease();
    uint64_t v45 = v65;
    if ((v54 & 1) != 0)
    {
      sub_186C5AA08();
      uint64_t v46 = v66;
      uint64_t v47 = v69;
      v69(v45, v66);
      v47(v64, v46);
      goto LABEL_12;
    }

    type metadata accessor for KTraceRecordError();
    sub_186BF0CD4();
    swift_allocError();
    uint64_t v49 = v63;
    *unint64_t v50 = v38;
    v50[1] = v49;
    swift_storeEnumTagMultiPayload();
    swift_bridgeObjectRetain();
    swift_willThrow();
    uint64_t v51 = v66;
    uint64_t v52 = v69;
    v69(v45, v66);
    v52(v64, v51);
  }

  else
  {
    swift_bridgeObjectRelease();
LABEL_8:
    type metadata accessor for KTraceRecordError();
    sub_186BF0CD4();
    swift_allocError();
    *unint64_t v42 = a2;
    v42[1] = a3;
    swift_storeEnumTagMultiPayload();
    swift_bridgeObjectRetain();
    swift_willThrow();
  }

  return v43 & 1;
}

id sub_186C171D4(char a1, int a2)
{
  uint64_t v261 = *MEMORY[0x1895F89C0];
  uint64_t v219 = type metadata accessor for KTraceRecordError();
  uint64_t v4 = MEMORY[0x1895F8858](v219);
  uint64_t v218 = (uint64_t)&v176 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v4);
  uint64_t v225 = (_DWORD **)((char *)&v176 - v6);
  uint64_t v7 = sub_186C5B2A8();
  uint64_t v224 = *(void *)(v7 - 8);
  uint64_t v8 = MEMORY[0x1895F8858](v7);
  uint64_t v223 = (char *)&v176 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v8);
  uint64_t v11 = (char *)&v176 - v10;
  uint64_t v12 = sub_186C5A84C();
  uint64_t v214 = *(void *)(v12 - 8);
  uint64_t v215 = v12;
  MEMORY[0x1895F8858](v12);
  uint64_t v213 = (char *)&v176 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = sub_186C5AA8C();
  uint64_t v231 = *(void *)(v14 - 8);
  uint64_t v15 = MEMORY[0x1895F8858](v14);
  int64_t v185 = (char *)&v176 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = MEMORY[0x1895F8858](v15);
  char v230 = (char *)&v176 - v18;
  MEMORY[0x1895F8858](v17);
  uint64_t v232 = (char *)&v176 - v19;
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C6A2828);
  uint64_t v21 = *(void *)(v20 - 8);
  MEMORY[0x1895F8858](v20);
  uint64_t v200 = (uint64_t)&v176 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v237 = MEMORY[0x18961AFF8];
  uint64_t v23 = sub_186C16808(a1, a2, 0LL, 0LL);
  uint64_t v199 = v23[2];
  if (v199)
  {
    uint64_t v198 = *(int *)(v20 + 48);
    uint64_t v24 = (void *)objc_opt_self();
    unint64_t v25 = 0LL;
    uint64_t v196 = (char *)v23 + ((*(unsigned __int8 *)(v21 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80));
    id v197 = v24;
    unsigned int v212 = *MEMORY[0x189605FE8];
    uint64_t v193 = &v255[34];
    uint64_t v209 = &v255[37];
    v182 = &v243[40];
    uint64_t v183 = &v255[14];
    v179 = v260;
    v180 = v258;
    uint64_t v177 = &v242[14];
    uint64_t v178 = &v240[14];
    uint64_t v176 = (_DWORD *)((char *)&v242[38] + 1);
    uint64_t v26 = (char *)MEMORY[0x18961AFE8];
    unint64_t v216 = 0x8000000186C664A0LL;
    unint64_t v217 = 0x8000000186C664C0LL;
    int64_t v221 = v11;
    uint64_t v222 = v7;
    uint64_t v229 = v14;
    uint64_t v194 = v23;
    uint64_t v195 = v21;
    do
    {
      if (v25 >= v23[2]) {
        goto LABEL_111;
      }
      uint64_t v27 = *(void *)(v21 + 72);
      unint64_t v204 = v25;
      uint64_t v28 = (uint64_t)&v196[v27 * v25];
      uint64_t v29 = v200;
      sub_186C25738(v28, v200);
      int v201 = *(unsigned __int8 *)(v29 + v198);
      (*(void (**)(char *, uint64_t, uint64_t))(v231 + 32))(v232, v29, v14);
      uint64_t v236 = MEMORY[0x18961AFF8];
      id v30 = objc_msgSend(v197, sel_defaultManager);
      sub_186C5AA74();
      uint64_t v31 = (void *)sub_186C5AD08();
      swift_bridgeObjectRelease();
      v255[0] = 0LL;
      id v32 = objc_msgSend(v30, sel_contentsOfDirectoryAtPath_error_, v31, v255);

      id v33 = (void *)v255[0];
      if (v32)
      {
        uint64_t v34 = sub_186C5AF18();
        id v35 = v33;
      }

      else
      {
        id v36 = (id)v255[0];
        id v37 = (void *)sub_186C5A9CC();

        swift_willThrow();
        v235 = 0LL;
        uint64_t v34 = MEMORY[0x18961AFE8];
      }

      v234 = v26;
      uint64_t v38 = *(void *)(v34 + 16);
      if (v38)
      {
        uint64_t v39 = (uint64_t *)(v34 + 40);
        uint64_t v40 = MEMORY[0x18961AFE8];
        do
        {
          uint64_t v42 = *(v39 - 1);
          uint64_t v41 = *v39;
          swift_bridgeObjectRetain();
          if ((sub_186C5AE58() & 1) != 0)
          {
            char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            v255[0] = v40;
            if ((isUniquelyReferenced_nonNull_native & 1) == 0)
            {
              sub_186BEF8C8(0LL, *(void *)(v40 + 16) + 1LL, 1);
              uint64_t v40 = v255[0];
            }

            unint64_t v45 = *(void *)(v40 + 16);
            unint64_t v44 = *(void *)(v40 + 24);
            if (v45 >= v44 >> 1)
            {
              sub_186BEF8C8((char *)(v44 > 1), v45 + 1, 1);
              uint64_t v40 = v255[0];
            }

            *(void *)(v40 + 16) = v45 + 1;
            uint64_t v46 = v40 + 16 * v45;
            *(void *)(v46 + 32) = v42;
            *(void *)(v46 + 40) = v41;
          }

          else
          {
            swift_bridgeObjectRelease();
          }

          v39 += 2;
          --v38;
        }

        while (v38);
      }

      else
      {
        uint64_t v40 = MEMORY[0x18961AFE8];
      }

      swift_bridgeObjectRelease();
      uint64_t v228 = *(void *)(v40 + 16);
      if (v228)
      {
        unint64_t v47 = 0LL;
        uint64_t v226 = v40;
        uint64_t v227 = v40 + 32;
        uint64_t v26 = v234;
        uint64_t v48 = v235;
        while (v47 < *(void *)(v40 + 16))
        {
          v234 = v26;
          uint64_t v58 = (void **)(v227 + 16 * v47);
          id v59 = *v58;
          uint64_t v60 = (void (*)(void, void))v58[1];
          swift_bridgeObjectRetain();
          sub_186C5AA38();
          uint64_t v61 = sub_186C5AAA4();
          uint64_t v63 = v48;
          id v233 = v59;
          if (v48)
          {
            int v64 = v60;
          }

          else
          {
            uint64_t v65 = v61;
            unint64_t v66 = v62;
            uint64_t v220 = v60;
            sub_186C5A87C();
            swift_allocObject();
            uint64_t v67 = sub_186C5A870();
            sub_186C5A840();
            (*(void (**)(char *, void, uint64_t))(v214 + 104))(v213, v212, v215);
            sub_186C5A858();
            sub_186C23BB4();
            sub_186C5A864();
            uint64_t v211 = v67;
            memcpy(v243, v255, 0x141uLL);
            memcpy(v242, v255, 0x141uLL);
            sub_186C23978((uint64_t)v243);
            sub_186C12C20();
            unint64_t v208 = v66;
            v235 = 0LL;
            sub_186C23A98((uint64_t)v243);
            id v203 = v243[0];
            id v86 = v243[18];
            id v87 = v243[20];
            uint64_t v205 = v65;
            __int128 v88 = v220;
            if (v243[18])
            {
              id v89 = v243[17];
              id v90 = v243[19];
              id v91 = v243[1];
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              uint64_t v92 = (uint64_t)v86;
              char v93 = v235;
              uint64_t v94 = sub_186BED3BC((uint64_t)v89, v92);
              if (v93)
              {
                swift_bridgeObjectRelease();
                uint64_t v63 = v93;
              }

              else
              {
                id v202 = v91;
                v235 = 0LL;
                sub_186BED654(v94);
                swift_bridgeObjectRelease();
                if (!v87) {
                  goto LABEL_51;
                }
                swift_bridgeObjectRetain();
                __int128 v97 = v235;
                uint64_t v98 = sub_186BED3BC((uint64_t)v90, (uint64_t)v87);
                uint64_t v63 = v97;
                if (!v97)
                {
                  v235 = 0LL;
                  sub_186BED654(v98);
                  swift_bridgeObjectRelease();
LABEL_51:
                  swift_bridgeObjectRelease();
LABEL_52:
                  uint64_t v99 = *(void *)(v255[37] + 64);
                  unint64_t v206 = (void *)(v255[37] + 64);
                  uint64_t v100 = 1LL << *(_BYTE *)(v255[37] + 32);
                  if (v100 < 64) {
                    uint64_t v101 = ~(-1LL << v100);
                  }
                  else {
                    uint64_t v101 = -1LL;
                  }
                  unint64_t v102 = v101 & v99;
                  id v207 = (id)((unint64_t)(v100 + 63) >> 6);
                  uint64_t v210 = (void *)v255[37];
                  swift_bridgeObjectRetain();
                  for (uint64_t i = 0LL; ; uint64_t i = v105)
                  {
                    if (v102)
                    {
                      unint64_t v104 = __clz(__rbit64(v102));
                      v102 &= v102 - 1;
                      uint64_t v105 = i;
                      unint64_t v106 = v104 | (i << 6);
                    }

                    else
                    {
                      BOOL v107 = __OFADD__(i, 1LL);
                      uint64_t v108 = i + 1;
                      unint64_t v109 = v208;
                      if (v107) {
                        goto LABEL_110;
                      }
                      if (v108 >= (uint64_t)v207)
                      {
LABEL_89:
                        swift_release();
                        swift_release();
                        id v190 = v243[2];
                        id v191 = v243[3];
                        id v192 = v243[4];
                        unint64_t v206 = v243[5];
                        id v207 = v243[6];
                        id v128 = v243[7];
                        id v186 = v243[8];
                        id v187 = v243[9];
                        id v129 = v243[10];
                        id v188 = v243[11];
                        id v189 = v243[12];
                        uint64_t v210 = v243[13];
                        id v233 = v243[36];
                        id v130 = v243[39];
                        int v184 = *(unsigned __int8 *)v182;
                        sub_186BF06F4(v205, v109);
                        __int128 v131 = *((_OWORD *)v183 + 9);
                        __int128 v252 = *((_OWORD *)v183 + 8);
                        __int128 v253 = v131;
                        __int128 v254 = *((_OWORD *)v183 + 10);
                        __int128 v132 = *((_OWORD *)v183 + 5);
                        __int128 v248 = *((_OWORD *)v183 + 4);
                        __int128 v249 = v132;
                        __int128 v133 = *((_OWORD *)v183 + 6);
                        __int128 v251 = *((_OWORD *)v183 + 7);
                        __int128 v250 = v133;
                        __int128 v134 = *((_OWORD *)v183 + 1);
                        __int128 v244 = *(_OWORD *)v183;
                        __int128 v245 = v134;
                        __int128 v135 = *((_OWORD *)v183 + 2);
                        __int128 v247 = *((_OWORD *)v183 + 3);
                        __int128 v246 = v135;
                        uint64_t v211 = v255[37];
                        swift_bridgeObjectRelease();
                        v136 = v185;
                        uint64_t v137 = v230;
                        sub_186C5AA2C();
                        sub_186C5AA14();
                        uint64_t v138 = v136;
                        uint64_t v139 = v229;
                        uint64_t v220 = *(void (**)(void, void))(v231 + 8);
                        v220(v138, v229);
                        char v140 = sub_186C5AE58();
                        swift_bridgeObjectRelease();
                        if ((v140 & 1) != 0)
                        {
                          __int128 v141 = v253;
                          v142 = v178;
                          *((_OWORD *)v178 + 8) = v252;
                          v142[9] = v141;
                          v142[10] = v254;
                          __int128 v143 = v249;
                          v142[4] = v248;
                          v142[5] = v143;
                          __int128 v144 = v251;
                          v142[6] = v250;
                          v142[7] = v144;
                          __int128 v145 = v245;
                          _OWORD *v142 = v244;
                          v142[1] = v145;
                          __int128 v146 = v247;
                          v142[2] = v246;
                          v142[3] = v146;
                          id v147 = v130;
                          id v181 = v130;
                          id v149 = v202;
                          id v148 = v203;
                          v240[0] = v203;
                          v240[1] = v202;
                          id v150 = v189;
                          v240[2] = v190;
                          v240[3] = v191;
                          v240[4] = v192;
                          v240[5] = v206;
                          v240[6] = v207;
                          v240[7] = v128;
                          uint64_t v205 = (uint64_t)v128;
                          id v152 = v186;
                          id v151 = v187;
                          v240[8] = v186;
                          v240[9] = v187;
                          v240[10] = v129;
                          unint64_t v208 = (unint64_t)v129;
                          id v153 = v188;
                          v240[11] = v188;
                          v240[12] = v189;
                          v240[13] = v210;
                          v240[36] = v233;
                          v240[37] = v211;
                          LOBYTE(v240[38]) = v201;
                          v240[39] = v147;
                          LOBYTE(v240[40]) = 1;
                          memcpy(v256, v240, 0x141uLL);
                          sub_186C23978((uint64_t)v240);
                          uint64_t v154 = v236;
                          char v155 = swift_isUniquelyReferenced_nonNull_native();
                          v241[0] = v154;
                          sub_186C20360(v256, v155, v239);
                          uint64_t v236 = v241[0];
                          swift_bridgeObjectRelease();
                          sub_186BFA418((uint64_t)v239, (uint64_t)v241, &qword_18C6A2838);
                          sub_186C25800((uint64_t)v241);
                          v242[0] = v148;
                          v242[1] = v149;
                          v242[2] = v190;
                          v242[3] = v191;
                          v242[4] = v192;
                          v242[5] = v206;
                          v242[6] = v207;
                          v242[7] = v205;
                          v242[8] = v152;
                          v242[9] = v151;
                          v242[10] = v208;
                          v242[11] = v153;
                          v242[12] = v150;
                          v242[13] = v210;
                          __int128 v156 = v245;
                          int64_t v157 = v177;
                          *uint64_t v177 = v244;
                          v157[1] = v156;
                          __int128 v158 = v246;
                          __int128 v159 = v247;
                          __int128 v160 = v249;
                          v157[4] = v248;
                          v157[5] = v160;
                          v157[2] = v158;
                          v157[3] = v159;
                          __int128 v161 = v250;
                          __int128 v162 = v251;
                          __int128 v163 = v254;
                          __int128 v164 = v252;
                          v157[9] = v253;
                          v157[10] = v163;
                          v157[7] = v162;
                          v157[8] = v164;
                          v157[6] = v161;
                          v242[36] = v233;
                          v242[37] = v211;
                          LOBYTE(v242[38]) = v201;
                          uint64_t v165 = v176;
                          *uint64_t v176 = *(_DWORD *)v238;
                          *(_DWORD *)((char *)v165 + 3) = *(_DWORD *)&v238[3];
                          v242[39] = v181;
                          LOBYTE(v242[40]) = 1;
                          sub_186C23A98((uint64_t)v242);
                          uint64_t v57 = v229;
                          unint64_t v56 = v230;
                        }

                        else
                        {
                          v257[0] = (uint64_t)v203;
                          v257[1] = (uint64_t)v202;
                          v257[2] = (uint64_t)v190;
                          v257[3] = (uint64_t)v191;
                          v257[4] = (uint64_t)v192;
                          v257[5] = (uint64_t)v206;
                          v257[6] = (uint64_t)v207;
                          v257[7] = (uint64_t)v128;
                          v257[8] = (uint64_t)v186;
                          v257[9] = (uint64_t)v187;
                          v257[10] = (uint64_t)v129;
                          v257[11] = (uint64_t)v188;
                          v257[12] = (uint64_t)v189;
                          v257[13] = (uint64_t)v210;
                          __int128 v49 = v253;
                          unint64_t v50 = v180;
                          *((_OWORD *)v180 + 8) = v252;
                          v50[9] = v49;
                          v50[10] = v254;
                          __int128 v51 = v249;
                          v50[4] = v248;
                          v50[5] = v51;
                          __int128 v52 = v251;
                          v50[6] = v250;
                          v50[7] = v52;
                          __int128 v53 = v245;
                          *unint64_t v50 = v244;
                          v50[1] = v53;
                          __int128 v54 = v247;
                          v50[2] = v246;
                          v50[3] = v54;
                          v258[22] = v233;
                          v258[23] = v211;
                          char v259 = v201;
                          uint64_t v55 = v179;
                          _DWORD *v179 = *(_DWORD *)v238;
                          *(_DWORD *)((char *)v55 + 3) = *(_DWORD *)&v238[3];
                          *(void *)&v260[7] = v130;
                          v260[15] = v184;
                          sub_186C23978((uint64_t)v257);
                          sub_186C1950C(v241, v257);
                          memcpy(v242, v241, 0x141uLL);
                          sub_186C23A98((uint64_t)v242);
                          sub_186C23A98((uint64_t)v257);
                          unint64_t v56 = v137;
                          uint64_t v57 = v139;
                        }

                        v220(v56, v57);
                        uint64_t v26 = v234;
                        uint64_t v48 = v235;
                        goto LABEL_25;
                      }

                      unint64_t v110 = v206[v108];
                      if (!v110)
                      {
                        uint64_t v111 = v108 + 1;
                        unint64_t v110 = v206[v111];
                        if (!v110)
                        {
                          uint64_t v111 = v108 + 2;
                          unint64_t v110 = v206[v111];
                          if (!v110)
                          {
                            uint64_t v111 = v108 + 3;
                            unint64_t v110 = v206[v111];
                            if (!v110)
                            {
                              uint64_t v111 = v108 + 4;
                              unint64_t v110 = v206[v111];
                              if (!v110)
                              {
                                uint64_t v111 = v108 + 5;
                                unint64_t v110 = v206[v111];
                                if (!v110)
                                {
                                  uint64_t v111 = v108 + 6;
                                  unint64_t v110 = v206[v111];
                                  if (!v110)
                                  {
                                    while (1)
                                    {
                                      uint64_t v108 = v111 + 1;
                                      if (__OFADD__(v111, 1LL)) {
                                        goto LABEL_112;
                                      }
                                      unint64_t v110 = v206[v108];
                                      ++v111;
                                      if (v110) {
                                        goto LABEL_76;
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }

                        uint64_t v108 = v111;
                      }

LABEL_76:
                      unint64_t v102 = (v110 - 1) & v110;
                      uint64_t v105 = v108;
                      unint64_t v106 = __clz(__rbit64(v110)) + (v108 << 6);
                    }

                    __int128 v112 = (uint64_t *)(v210[6] + 16 * v106);
                    uint64_t v113 = *v112;
                    uint64_t v114 = v112[1];
                    swift_bridgeObjectRetain_n();
                    __int128 v115 = sub_186C1D41C(v240, v113, v114);
                    BOOL v117 = (void *)v116;
                    sub_186BFA418(v116, (uint64_t)v241, &qword_18C6A27A8);
                    sub_186BFA418((uint64_t)v241, (uint64_t)v242, &qword_18C6A27A8);
                    uint64_t v118 = v117[7];
                    if (v118)
                    {
                      uint64_t v119 = v117[6];
                      swift_bridgeObjectRetain();
                      uint64_t v120 = v118;
                      char v121 = v235;
                      uint64_t v122 = sub_186BED3BC(v119, v120);
                      v235 = v121;
                      if (v121) {
                        goto LABEL_88;
                      }
                      sub_186BED654(v122);
                      swift_bridgeObjectRelease();
                      uint64_t v123 = v117[9];
                      if (v123)
                      {
                        uint64_t v124 = v117[8];
                        swift_bridgeObjectRetain();
                        uint64_t v125 = v123;
                        uint64_t v126 = v235;
                        uint64_t v127 = sub_186BED3BC(v124, v125);
                        v235 = v126;
                        if (v126)
                        {
LABEL_88:
                          swift_bridgeObjectRelease();
                          uint64_t v63 = v235;
LABEL_92:
                          ((void (*)(void *, void))v115)(v240, 0LL);
                          swift_release();
                          swift_bridgeObjectRelease_n();
                          __int128 v88 = v220;
                          goto LABEL_93;
                        }

                        sub_186BED654(v127);
                        swift_bridgeObjectRelease();
                      }
                    }

                    else if (v117[9])
                    {
                      sub_186BF0CD4();
                      uint64_t v63 = (void *)swift_allocError();
                      *uint64_t v166 = v113;
                      v166[1] = v114;
                      swift_storeEnumTagMultiPayload();
                      swift_willThrow();
                      goto LABEL_92;
                    }

                    swift_bridgeObjectRelease();
                    ((void (*)(void *, void))v115)(v240, 0LL);
                    swift_bridgeObjectRelease_n();
                  }
                }

                swift_bridgeObjectRelease();
              }
            }

            else
            {
              id v202 = v243[1];
              if (!v243[20]) {
                goto LABEL_52;
              }
              sub_186BF0CD4();
              uint64_t v63 = (void *)swift_allocError();
              id v95 = v202;
              *__int128 v96 = v203;
              v96[1] = v95;
              swift_storeEnumTagMultiPayload();
              swift_bridgeObjectRetain();
              swift_willThrow();
            }

uint64_t sub_186C186B4@<X0>(unint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v5 = *v2;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    uint64_t result = (uint64_t)sub_186C1CB08(v5);
    uint64_t v5 = result;
  }

  unint64_t v7 = *(void *)(v5 + 16);
  if (v7 <= a1)
  {
    __break(1u);
  }

  else
  {
    unint64_t v8 = v7 - 1;
    uint64_t v9 = v5 + 328 * a1;
    memcpy(a2, (const void *)(v9 + 32), 0x141uLL);
    uint64_t result = (uint64_t)memmove((void *)(v9 + 32), (const void *)(v9 + 360), 328 * (v8 - a1));
    *(void *)(v5 + 16) = v8;
    *uint64_t v2 = v5;
  }

  return result;
}

uint64_t ktrace_list_plans(_:_:_:)(uint64_t a1, uint64_t a2, unsigned int a3)
{
  __dst[47] = nullsub_1(a1);
  __dst[46] = nullsub_1(a2);
  uint64_t v6 = sub_186C171D4((a3 & 2) != 0, (a3 >> 2) & 1);
  uint64_t v7 = v5;
  uint64_t v8 = v6[2];
  if (!v8)
  {
    swift_bridgeObjectRelease();
    uint64_t v16 = *(void *)(v7 + 16);
    if (!v16) {
      goto LABEL_15;
    }
    goto LABEL_11;
  }

  uint64_t v23 = v5;
  uint64_t v9 = v8 - 1;
  uint64_t v10 = 4LL;
  uint64_t v11 = MEMORY[0x189617FA8];
  while (1)
  {
    memcpy(__dst, &v6[v10], 0x141uLL);
    sub_186C23978((uint64_t)__dst);
    if (v10 != 4) {
      sub_186C5B584();
    }
    __swift_instantiateConcreteTypeFromMangledName(&qword_18C6A2318);
    uint64_t v12 = swift_allocObject();
    *(_OWORD *)(v12 + 16) = xmmword_186C5E4F0;
    memcpy(v24, __dst, 0x141uLL);
    if ((a3 & 1) != 0)
    {
      uint64_t v14 = sub_186C14DF8();
    }

    else
    {
      sub_186C14BA4(538976288LL, 0xE400000000000000LL);
      v24[0] = __dst[0];
      v24[1] = __dst[1];
      swift_bridgeObjectRetain();
      sub_186C5ADD4();
      swift_bridgeObjectRetain();
      sub_186C5ADD4();
      swift_bridgeObjectRelease();
      v24[3] = v11;
      uint64_t v13 = (unsigned __int8 *)sub_186BFD5D8();
      sub_186BFDA24((uint64_t)v24, *v13);
      __swift_destroy_boxed_opaque_existential_0((uint64_t)v24);
      sub_186C5ADD4();
      sub_186C5ADD4();
      swift_bridgeObjectRelease();
      uint64_t v14 = 0LL;
      unint64_t v15 = 0xE000000000000000LL;
    }

    *(void *)(v12 + 56) = v11;
    *(void *)(v12 + 32) = v14;
    *(void *)(v12 + 40) = v15;
    sub_186BFB7C8();
    sub_186C5B578();
    sub_186C23A98((uint64_t)__dst);
    swift_bridgeObjectRelease();
    if (!v9) {
      break;
    }
    v10 += 41LL;
    --v9;
  }

  swift_bridgeObjectRelease();
  uint64_t v7 = v23;
  uint64_t v16 = *(void *)(v23 + 16);
  if (v16)
  {
LABEL_11:
    uint64_t v17 = (uint64_t *)(v7 + 40);
    uint64_t v18 = MEMORY[0x189617FA8];
    do
    {
      uint64_t v20 = *(v17 - 1);
      uint64_t v19 = *v17;
      __swift_instantiateConcreteTypeFromMangledName(&qword_18C6A2318);
      uint64_t v21 = swift_allocObject();
      *(_OWORD *)(v21 + 16) = xmmword_186C5E4F0;
      *(void *)(v21 + 56) = v18;
      *(void *)(v21 + 32) = v20;
      *(void *)(v21 + 40) = v19;
      sub_186BFB7C8();
      swift_bridgeObjectRetain();
      sub_186C5B578();
      swift_bridgeObjectRelease();
      v17 += 2;
      --v16;
    }

    while (v16);
  }

LABEL_15:
  swift_bridgeObjectRelease();
  return 0LL;
}

char *sub_186C18B68(char *a1, int64_t a2, char a3)
{
  uint64_t result = sub_186C18BA0(a1, a2, a3, *v3);
  *uint64_t v3 = result;
  return result;
}

char *sub_186C18B84(char *a1, int64_t a2, char a3)
{
  uint64_t result = sub_186C18C98(a1, a2, a3, *v3);
  *uint64_t v3 = result;
  return result;
}

char *sub_186C18BA0(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_18C6A29E8);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 29;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 2);
  }

  else
  {
    uint64_t v10 = (char *)MEMORY[0x18961AFE8];
  }

  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[4 * v8]) {
      memmove(v13, v14, 4 * v8);
    }
    *((void *)a4 + 2) = 0LL;
  }

  else
  {
    memcpy(v13, v14, 4 * v8);
  }

  swift_release();
  return v10;
}

char *sub_186C18C98(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_18C6A28E0);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 1;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 5);
  }

  else
  {
    uint64_t v10 = (char *)MEMORY[0x18961AFE8];
  }

  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[32 * v8]) {
      memmove(v13, v14, 32 * v8);
    }
    *((void *)a4 + 2) = 0LL;
  }

  else
  {
    swift_arrayInitWithCopy();
  }

  swift_release();
  return v10;
}

char *sub_186C18D98(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_18C6A28B0);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 328);
  }

  else
  {
    uint64_t v10 = (char *)MEMORY[0x18961AFE8];
  }

  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[328 * v8]) {
      memmove(v12, v13, 328 * v8);
    }
    *((void *)a4 + 2) = 0LL;
  }

  else
  {
    swift_arrayInitWithCopy();
  }

  swift_release();
  return v10;
}

uint64_t sub_186C18EB0(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *v3;
  sub_186C5B59C();
  swift_bridgeObjectRetain();
  sub_186C5ADA4();
  uint64_t v8 = sub_186C5B5D8();
  uint64_t v9 = -1LL << *(_BYTE *)(v7 + 32);
  unint64_t v10 = v8 & ~v9;
  if (((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v10) & 1) != 0)
  {
    uint64_t v11 = *(void *)(v7 + 48);
    uint64_t v12 = (void *)(v11 + 16 * v10);
    BOOL v13 = *v12 == a2 && v12[1] == a3;
    if (v13 || (sub_186C5B4F4() & 1) != 0)
    {
LABEL_7:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v14 = (uint64_t *)(*(void *)(*v3 + 48) + 16 * v10);
      uint64_t v15 = v14[1];
      *a1 = *v14;
      a1[1] = v15;
      swift_bridgeObjectRetain();
      return 0LL;
    }

    uint64_t v17 = ~v9;
    while (1)
    {
      unint64_t v10 = (v10 + 1) & v17;
      if (((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v10) & 1) == 0) {
        break;
      }
      uint64_t v18 = (void *)(v11 + 16 * v10);
      BOOL v19 = *v18 == a2 && v18[1] == a3;
      if (v19 || (sub_186C5B4F4() & 1) != 0) {
        goto LABEL_7;
      }
    }
  }

  swift_bridgeObjectRelease();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v21 = *v3;
  *uint64_t v3 = 0x8000000000000000LL;
  swift_bridgeObjectRetain();
  sub_186C1A17C(a2, a3, v10, isUniquelyReferenced_nonNull_native);
  *uint64_t v3 = v21;
  swift_bridgeObjectRelease();
  *a1 = a2;
  a1[1] = a3;
  return 1LL;
}

uint64_t sub_186C1905C(_BYTE *a1, uint64_t a2)
{
  uint64_t v4 = *v2;
  sub_186C5B59C();
  sub_186C0D430(a2);
  swift_bridgeObjectRetain();
  sub_186C5ADA4();
  swift_bridgeObjectRelease();
  unint64_t v5 = sub_186C5B5D8() & ~(-1LL << *(_BYTE *)(v4 + 32));
  if (((*(void *)(v4 + 56 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v5) & 1) != 0) {
    __asm { BR              X9 }
  }

  swift_bridgeObjectRelease();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v10 = *v8;
  *uint64_t v8 = 0x8000000000000000LL;
  sub_186C1A314(a2, v5, isUniquelyReferenced_nonNull_native);
  *uint64_t v8 = v10;
  swift_bridgeObjectRelease();
  uint64_t result = 1LL;
  *a1 = a2;
  return result;
}

uint64_t sub_186C1950C(void *a1, uint64_t *a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_186C5B59C();
  uint64_t v6 = *a2;
  uint64_t v7 = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_186C5ADA4();
  swift_bridgeObjectRelease();
  uint64_t v8 = sub_186C5B5D8();
  uint64_t v9 = -1LL << *(_BYTE *)(v5 + 32);
  unint64_t v10 = v8 & ~v9;
  if (((*(void *)(v5 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v10) & 1) != 0)
  {
    uint64_t v11 = *(void *)(v5 + 48);
    uint64_t v12 = 328 * v10;
    BOOL v13 = (void *)(v11 + 328 * v10);
    BOOL v14 = *v13 == v6 && v13[1] == v7;
    if (v14 || (sub_186C5B4F4() & 1) != 0)
    {
LABEL_7:
      swift_bridgeObjectRelease();
      sub_186C23A98((uint64_t)a2);
      uint64_t v15 = (const void *)(*(void *)(*v2 + 48) + v12);
      memcpy(__dst, (const void *)(*(void *)(*v3 + 48) + v12), 0x141uLL);
      memcpy(a1, v15, 0x141uLL);
      sub_186C23978((uint64_t)__dst);
      return 0LL;
    }

    uint64_t v17 = ~v9;
    while (1)
    {
      unint64_t v10 = (v10 + 1) & v17;
      if (((*(void *)(v5 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v10) & 1) == 0) {
        break;
      }
      uint64_t v12 = 328 * v10;
      uint64_t v18 = (void *)(v11 + 328 * v10);
      BOOL v19 = *v18 == v6 && v18[1] == v7;
      if (v19 || (sub_186C5B4F4() & 1) != 0) {
        goto LABEL_7;
      }
    }
  }

  swift_bridgeObjectRelease();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  __dst[0] = *v2;
  *uint64_t v2 = 0x8000000000000000LL;
  sub_186C23978((uint64_t)a2);
  sub_186C1A810(a2, v10, isUniquelyReferenced_nonNull_native);
  *uint64_t v2 = __dst[0];
  swift_bridgeObjectRelease();
  memcpy(a1, a2, 0x141uLL);
  return 1LL;
}

uint64_t sub_186C19700()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C6A28C0);
  uint64_t v3 = sub_186C5B23C();
  uint64_t v4 = v3;
  if (*(void *)(v2 + 16))
  {
    uint64_t v5 = 1LL << *(_BYTE *)(v2 + 32);
    id v30 = (void *)(v2 + 56);
    if (v5 < 64) {
      uint64_t v6 = ~(-1LL << v5);
    }
    else {
      uint64_t v6 = -1LL;
    }
    unint64_t v7 = v6 & *(void *)(v2 + 56);
    int64_t v8 = (unint64_t)(v5 + 63) >> 6;
    uint64_t v9 = v3 + 56;
    uint64_t result = swift_retain();
    int64_t v11 = 0LL;
    while (1)
    {
      if (v7)
      {
        unint64_t v14 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        unint64_t v15 = v14 | (v11 << 6);
      }

      else
      {
        int64_t v16 = v11 + 1;
        if (__OFADD__(v11, 1LL))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }

        if (v16 >= v8) {
          goto LABEL_33;
        }
        unint64_t v17 = v30[v16];
        ++v11;
        if (!v17)
        {
          int64_t v11 = v16 + 1;
          if (v16 + 1 >= v8) {
            goto LABEL_33;
          }
          unint64_t v17 = v30[v11];
          if (!v17)
          {
            int64_t v11 = v16 + 2;
            if (v16 + 2 >= v8) {
              goto LABEL_33;
            }
            unint64_t v17 = v30[v11];
            if (!v17)
            {
              int64_t v18 = v16 + 3;
              if (v18 >= v8)
              {
LABEL_33:
                swift_release();
                uint64_t v1 = v0;
                uint64_t v29 = 1LL << *(_BYTE *)(v2 + 32);
                if (v29 > 63) {
                  bzero(v30, ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
                }
                else {
                  *id v30 = -1LL << v29;
                }
                *(void *)(v2 + 16) = 0LL;
                break;
              }

              unint64_t v17 = v30[v18];
              if (!v17)
              {
                while (1)
                {
                  int64_t v11 = v18 + 1;
                  if (__OFADD__(v18, 1LL)) {
                    goto LABEL_39;
                  }
                  if (v11 >= v8) {
                    goto LABEL_33;
                  }
                  unint64_t v17 = v30[v11];
                  ++v18;
                  if (v17) {
                    goto LABEL_23;
                  }
                }
              }

              int64_t v11 = v18;
            }
          }
        }

uint64_t sub_186C199DC()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C6A2988);
  uint64_t v3 = sub_186C5B23C();
  if (!*(void *)(v2 + 16)) {
    goto LABEL_25;
  }
  uint64_t v4 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v5 = (void *)(v2 + 56);
  if (v4 < 64) {
    uint64_t v6 = ~(-1LL << v4);
  }
  else {
    uint64_t v6 = -1LL;
  }
  unint64_t v7 = v6 & *(void *)(v2 + 56);
  int64_t v8 = (unint64_t)(v4 + 63) >> 6;
  swift_retain();
  if (v7)
  {
    unint64_t v9 = __clz(__rbit64(v7));
    goto LABEL_20;
  }

  if (v8 > 1)
  {
    unint64_t v10 = *(void *)(v2 + 64);
    uint64_t v11 = 1LL;
    if (v10) {
      goto LABEL_19;
    }
    uint64_t v11 = 2LL;
    if (v8 > 2)
    {
      unint64_t v10 = *(void *)(v2 + 72);
      if (v10) {
        goto LABEL_19;
      }
      uint64_t v11 = 3LL;
      if (v8 > 3)
      {
        unint64_t v10 = *(void *)(v2 + 80);
        if (!v10)
        {
          uint64_t v12 = 4LL;
          if (v8 > 4)
          {
            unint64_t v10 = *(void *)(v2 + 88);
            if (v10)
            {
              uint64_t v11 = 4LL;
              goto LABEL_19;
            }

            while (1)
            {
              uint64_t v11 = v12 + 1;
              if (__OFADD__(v12, 1LL))
              {
                __break(1u);
                JUMPOUT(0x186C19E28LL);
              }

              if (v11 >= v8) {
                break;
              }
              unint64_t v10 = v5[v11];
              ++v12;
              if (v10) {
                goto LABEL_19;
              }
            }
          }

          goto LABEL_21;
        }

uint64_t sub_186C19E54()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C6A28A8);
  uint64_t v3 = sub_186C5B23C();
  uint64_t v4 = v3;
  if (*(void *)(v2 + 16))
  {
    uint64_t v5 = 1LL << *(_BYTE *)(v2 + 32);
    id v30 = (void *)(v2 + 56);
    if (v5 < 64) {
      uint64_t v6 = ~(-1LL << v5);
    }
    else {
      uint64_t v6 = -1LL;
    }
    unint64_t v7 = v6 & *(void *)(v2 + 56);
    int64_t v29 = (unint64_t)(v5 + 63) >> 6;
    uint64_t v8 = v3 + 56;
    uint64_t result = swift_retain();
    int64_t v10 = 0LL;
    while (1)
    {
      if (v7)
      {
        unint64_t v13 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        unint64_t v14 = v13 | (v10 << 6);
      }

      else
      {
        int64_t v15 = v10 + 1;
        if (__OFADD__(v10, 1LL))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }

        if (v15 >= v29) {
          goto LABEL_33;
        }
        unint64_t v16 = v30[v15];
        ++v10;
        if (!v16)
        {
          int64_t v10 = v15 + 1;
          if (v15 + 1 >= v29) {
            goto LABEL_33;
          }
          unint64_t v16 = v30[v10];
          if (!v16)
          {
            int64_t v10 = v15 + 2;
            if (v15 + 2 >= v29) {
              goto LABEL_33;
            }
            unint64_t v16 = v30[v10];
            if (!v16)
            {
              int64_t v17 = v15 + 3;
              if (v17 >= v29)
              {
LABEL_33:
                swift_release();
                uint64_t v1 = v0;
                uint64_t v28 = 1LL << *(_BYTE *)(v2 + 32);
                if (v28 > 63) {
                  bzero(v30, ((unint64_t)(v28 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
                }
                else {
                  *id v30 = -1LL << v28;
                }
                *(void *)(v2 + 16) = 0LL;
                break;
              }

              unint64_t v16 = v30[v17];
              if (!v16)
              {
                while (1)
                {
                  int64_t v10 = v17 + 1;
                  if (__OFADD__(v17, 1LL)) {
                    goto LABEL_39;
                  }
                  if (v10 >= v29) {
                    goto LABEL_33;
                  }
                  unint64_t v16 = v30[v10];
                  ++v17;
                  if (v16) {
                    goto LABEL_23;
                  }
                }
              }

              int64_t v10 = v17;
            }
          }
        }

uint64_t sub_186C1A17C(uint64_t result, uint64_t a2, unint64_t a3, char a4)
{
  uint64_t v5 = v4;
  uint64_t v8 = result;
  unint64_t v9 = *(void *)(*v4 + 16);
  unint64_t v10 = *(void *)(*v4 + 24);
  if (v10 > v9 && (a4 & 1) != 0) {
    goto LABEL_22;
  }
  if ((a4 & 1) != 0)
  {
    sub_186C19700();
  }

  else
  {
    if (v10 > v9)
    {
      uint64_t result = (uint64_t)sub_186C1A9F0();
      goto LABEL_22;
    }

    sub_186C1AF0C();
  }

  uint64_t v11 = *v4;
  sub_186C5B59C();
  sub_186C5ADA4();
  uint64_t result = sub_186C5B5D8();
  uint64_t v12 = -1LL << *(_BYTE *)(v11 + 32);
  a3 = result & ~v12;
  uint64_t v13 = v11 + 56;
  if (((*(void *)(v11 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a3) & 1) != 0)
  {
    uint64_t v14 = *(void *)(v11 + 48);
    int64_t v15 = (void *)(v14 + 16 * a3);
    BOOL v16 = *v15 == v8 && v15[1] == a2;
    if (v16 || (uint64_t result = sub_186C5B4F4(), (result & 1) != 0))
    {
LABEL_21:
      uint64_t result = sub_186C5B524();
      __break(1u);
    }

    else
    {
      uint64_t v17 = ~v12;
      while (1)
      {
        a3 = (a3 + 1) & v17;
        if (((*(void *)(v13 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a3) & 1) == 0) {
          break;
        }
        int64_t v18 = (void *)(v14 + 16 * a3);
        if (*v18 != v8 || v18[1] != a2)
        {
          uint64_t result = sub_186C5B4F4();
          if ((result & 1) == 0) {
            continue;
          }
        }

        goto LABEL_21;
      }
    }
  }

uint64_t sub_186C1A314(uint64_t result, unint64_t a2, char a3)
{
  unsigned __int8 v5 = result;
  unint64_t v6 = *(void *)(*v3 + 16);
  unint64_t v7 = *(void *)(*v3 + 24);
  if (v7 <= v6 || (a3 & 1) == 0)
  {
    if ((a3 & 1) != 0)
    {
      sub_186C199DC();
    }

    else
    {
      if (v7 > v6)
      {
        uint64_t result = (uint64_t)sub_186C1ABA0();
        goto LABEL_10;
      }

      sub_186C1B1B8();
    }

    uint64_t v8 = *v3;
    sub_186C5B59C();
    sub_186C0D430(v5);
    sub_186C5ADA4();
    swift_bridgeObjectRelease();
    uint64_t result = sub_186C5B5D8();
    a2 = result & ~(-1LL << *(_BYTE *)(v8 + 32));
    if (((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a2) & 1) != 0) {
      __asm { BR              X9 }
    }
  }

uint64_t sub_186C1A810(uint64_t *__src, unint64_t i, char a3)
{
  uint64_t v4 = v3;
  unint64_t v7 = *(void *)(*v3 + 16);
  unint64_t v8 = *(void *)(*v3 + 24);
  if (v8 > v7 && (a3 & 1) != 0) {
    goto LABEL_21;
  }
  if ((a3 & 1) != 0)
  {
    sub_186C19E54();
  }

  else
  {
    if (v8 > v7)
    {
      sub_186C1AD30();
      goto LABEL_21;
    }

    sub_186C1B5FC();
  }

  uint64_t v9 = *v3;
  sub_186C5B59C();
  uint64_t v10 = *__src;
  uint64_t v11 = __src[1];
  swift_bridgeObjectRetain();
  sub_186C5ADA4();
  swift_bridgeObjectRelease();
  uint64_t v12 = sub_186C5B5D8();
  uint64_t v13 = -1LL << *(_BYTE *)(v9 + 32);
  uint64_t i = v12 & ~v13;
  uint64_t v14 = v9 + 56;
  if (((*(void *)(v9 + 56 + ((i >> 3) & 0xFFFFFFFFFFFFF8LL)) >> i) & 1) != 0)
  {
    uint64_t v15 = *(void *)(v9 + 48);
    BOOL v16 = (void *)(v15 + 328 * i);
    BOOL v17 = *v16 == v10 && v16[1] == v11;
    if (v17 || (sub_186C5B4F4() & 1) != 0) {
      goto LABEL_24;
    }
    uint64_t v18 = ~v13;
    for (uint64_t i = (i + 1) & v18; ((*(void *)(v14 + ((i >> 3) & 0xFFFFFFFFFFFFF8LL)) >> i) & 1) != 0; uint64_t i = (i + 1) & v18)
    {
      uint64_t v19 = (void *)(v15 + 328 * i);
      BOOL v20 = *v19 == v10 && v19[1] == v11;
      if (v20 || (sub_186C5B4F4() & 1) != 0) {
        goto LABEL_24;
      }
    }
  }

void *sub_186C1A9F0()
{
  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C6A28C0);
  uint64_t v2 = *v0;
  uint64_t v3 = sub_186C5B230();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }

  uint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_30;
    }

    if (v20 >= v13) {
      goto LABEL_28;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21)
      {
        int64_t v9 = v20 + 2;
        if (v20 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v21 = *(void *)(v6 + 8 * v9);
        if (!v21) {
          break;
        }
      }
    }

void *sub_186C1ABA0()
{
  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C6A2988);
  uint64_t v2 = *v0;
  uint64_t v3 = sub_186C5B230();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }

  uint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v16 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_30;
    }

    if (v16 >= v13) {
      goto LABEL_28;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      int64_t v9 = v16 + 1;
      if (v16 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v17 = *(void *)(v6 + 8 * v9);
      if (!v17)
      {
        int64_t v9 = v16 + 2;
        if (v16 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v17 = *(void *)(v6 + 8 * v9);
        if (!v17) {
          break;
        }
      }
    }

void *sub_186C1AD30()
{
  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C6A28A8);
  uint64_t v2 = *v0;
  uint64_t v3 = sub_186C5B230();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }

  uint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v18 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_30;
    }

    if (v18 >= v13) {
      goto LABEL_28;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      int64_t v9 = v18 + 1;
      if (v18 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v19 = *(void *)(v6 + 8 * v9);
      if (!v19)
      {
        int64_t v9 = v18 + 2;
        if (v18 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v19 = *(void *)(v6 + 8 * v9);
        if (!v19) {
          break;
        }
      }
    }

uint64_t sub_186C1AF0C()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C6A28C0);
  uint64_t v3 = sub_186C5B23C();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *uint64_t v1 = v4;
    return result;
  }

  uint64_t v5 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v6 = v2 + 56;
  if (v5 < 64) {
    uint64_t v7 = ~(-1LL << v5);
  }
  else {
    uint64_t v7 = -1LL;
  }
  unint64_t v8 = v7 & *(void *)(v2 + 56);
  int64_t v29 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v9 = v3 + 56;
  uint64_t result = swift_retain();
  int64_t v11 = 0LL;
  while (1)
  {
    if (v8)
    {
      unint64_t v14 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v15 = v14 | (v11 << 6);
      goto LABEL_24;
    }

    int64_t v16 = v11 + 1;
    if (__OFADD__(v11, 1LL))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }

    if (v16 >= v29) {
      goto LABEL_33;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v16);
    ++v11;
    if (!v17)
    {
      int64_t v11 = v16 + 1;
      if (v16 + 1 >= v29) {
        goto LABEL_33;
      }
      unint64_t v17 = *(void *)(v6 + 8 * v11);
      if (!v17)
      {
        int64_t v11 = v16 + 2;
        if (v16 + 2 >= v29) {
          goto LABEL_33;
        }
        unint64_t v17 = *(void *)(v6 + 8 * v11);
        if (!v17) {
          break;
        }
      }
    }

uint64_t sub_186C1B1B8()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C6A2988);
  uint64_t v3 = sub_186C5B23C();
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
    goto LABEL_23;
  }

  uint64_t v4 = 1LL << *(_BYTE *)(v2 + 32);
  if (v4 < 64) {
    uint64_t v5 = ~(-1LL << v4);
  }
  else {
    uint64_t v5 = -1LL;
  }
  unint64_t v6 = v5 & *(void *)(v2 + 56);
  int64_t v7 = (unint64_t)(v4 + 63) >> 6;
  swift_retain();
  if (v6)
  {
    unint64_t v8 = __clz(__rbit64(v6));
    goto LABEL_20;
  }

  if (v7 > 1)
  {
    unint64_t v9 = *(void *)(v2 + 64);
    uint64_t v10 = 1LL;
    if (v9) {
      goto LABEL_19;
    }
    uint64_t v10 = 2LL;
    if (v7 > 2)
    {
      unint64_t v9 = *(void *)(v2 + 72);
      if (v9) {
        goto LABEL_19;
      }
      uint64_t v10 = 3LL;
      if (v7 > 3)
      {
        unint64_t v9 = *(void *)(v2 + 80);
        if (!v9)
        {
          uint64_t v11 = 4LL;
          if (v7 > 4)
          {
            unint64_t v9 = *(void *)(v2 + 88);
            if (v9)
            {
              uint64_t v10 = 4LL;
              goto LABEL_19;
            }

            while (1)
            {
              uint64_t v10 = v11 + 1;
              if (__OFADD__(v11, 1LL))
              {
                __break(1u);
                JUMPOUT(0x186C1B5D0LL);
              }

              if (v10 >= v7) {
                break;
              }
              unint64_t v9 = *(void *)(v2 + 56 + 8 * v10);
              ++v11;
              if (v9) {
                goto LABEL_19;
              }
            }
          }

          goto LABEL_21;
        }

uint64_t sub_186C1B5FC()
{
  uint64_t v1 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C6A28A8);
  uint64_t v2 = sub_186C5B23C();
  uint64_t v3 = v2;
  if (!*(void *)(v1 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    uint64_t *v0 = v3;
    return result;
  }

  uint64_t v4 = 1LL << *(_BYTE *)(v1 + 32);
  uint64_t v5 = v1 + 56;
  if (v4 < 64) {
    uint64_t v6 = ~(-1LL << v4);
  }
  else {
    uint64_t v6 = -1LL;
  }
  unint64_t v7 = v6 & *(void *)(v1 + 56);
  int64_t v24 = (unint64_t)(v4 + 63) >> 6;
  uint64_t v8 = v2 + 56;
  uint64_t result = swift_retain();
  int64_t v10 = 0LL;
  while (1)
  {
    if (v7)
    {
      unint64_t v12 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      unint64_t v13 = v12 | (v10 << 6);
      goto LABEL_24;
    }

    int64_t v14 = v10 + 1;
    if (__OFADD__(v10, 1LL))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }

    if (v14 >= v24) {
      goto LABEL_33;
    }
    unint64_t v15 = *(void *)(v5 + 8 * v14);
    ++v10;
    if (!v15)
    {
      int64_t v10 = v14 + 1;
      if (v14 + 1 >= v24) {
        goto LABEL_33;
      }
      unint64_t v15 = *(void *)(v5 + 8 * v10);
      if (!v15)
      {
        int64_t v10 = v14 + 2;
        if (v14 + 2 >= v24) {
          goto LABEL_33;
        }
        unint64_t v15 = *(void *)(v5 + 8 * v10);
        if (!v15) {
          break;
        }
      }
    }

void sub_186C1B8D0( uint64_t a1, uint64_t a2, uint64_t a3, char a4, void (*a5)(uint64_t *__return_ptr, id *, void *))
{
  uint64_t v6 = v5;
  uint64_t v8 = -1LL << *(_BYTE *)(a1 + 32);
  uint64_t v9 = ~v8;
  uint64_t v10 = *(void *)(a1 + 64);
  uint64_t v11 = -v8;
  v51[4] = a1;
  v51[5] = a1 + 64;
  if (v11 < 64) {
    uint64_t v12 = ~(-1LL << v11);
  }
  else {
    uint64_t v12 = -1LL;
  }
  v51[6] = v9;
  v51[7] = 0LL;
  v51[8] = v12 & v10;
  v51[9] = a2;
  v51[10] = a3;
  swift_bridgeObjectRetain();
  swift_retain();
  uint64_t v13 = sub_186C20FAC();
  if (!v14)
  {
LABEL_20:
    swift_release();
    swift_bridgeObjectRelease();
    sub_186C0D094();
    swift_release();
    return;
  }

  uint64_t v17 = v13;
  uint64_t v18 = v14;
  uint64_t v19 = v15;
  uint64_t v20 = v16;
  while (1)
  {
    v51[2] = v17;
    v51[3] = v18;
    v51[0] = v19;
    v51[1] = v20;
    id v30 = *(void **)v6;
    unint64_t v32 = sub_186BF8278(v17, v18);
    uint64_t v33 = v30[2];
    BOOL v34 = (v31 & 1) == 0;
    uint64_t v35 = v33 + v34;
    if (__OFADD__(v33, v34))
    {
      __break(1u);
LABEL_25:
      __break(1u);
LABEL_26:
      sub_186C5B530();
      __break(1u);
      goto LABEL_27;
    }

    char v36 = v31;
    if (v30[3] < v35) {
      break;
    }
    if ((a4 & 1) != 0)
    {
      if ((v31 & 1) != 0) {
        goto LABEL_16;
      }
    }

    else
    {
      sub_186C1C4F0();
      if ((v36 & 1) != 0) {
        goto LABEL_16;
      }
    }

uint64_t sub_186C1BC80(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C6A28D8);
  char v42 = a2;
  uint64_t v6 = sub_186C5B380();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1LL << *(_BYTE *)(v5 + 32);
  uint64_t v41 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1LL << v8);
  }
  else {
    uint64_t v9 = -1LL;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  uint64_t v39 = v2;
  int64_t v40 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0LL;
  while (1)
  {
    if (v10)
    {
      unint64_t v21 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v22 = v21 | (v13 << 6);
      goto LABEL_31;
    }

    int64_t v23 = v13 + 1;
    if (__OFADD__(v13, 1LL))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }

    if (v23 >= v40) {
      break;
    }
    uint64_t v24 = (void *)(v5 + 64);
    unint64_t v25 = *(void *)(v41 + 8 * v23);
    ++v13;
    if (!v25)
    {
      int64_t v13 = v23 + 1;
      if (v23 + 1 >= v40) {
        goto LABEL_33;
      }
      unint64_t v25 = *(void *)(v41 + 8 * v13);
      if (!v25)
      {
        int64_t v26 = v23 + 2;
        if (v26 >= v40)
        {
LABEL_33:
          swift_release();
          uint64_t v3 = v39;
          if ((v42 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }

        unint64_t v25 = *(void *)(v41 + 8 * v26);
        if (!v25)
        {
          while (1)
          {
            int64_t v13 = v26 + 1;
            if (__OFADD__(v26, 1LL)) {
              goto LABEL_42;
            }
            if (v13 >= v40) {
              goto LABEL_33;
            }
            unint64_t v25 = *(void *)(v41 + 8 * v13);
            ++v26;
            if (v25) {
              goto LABEL_30;
            }
          }
        }

        int64_t v13 = v26;
      }
    }

uint64_t sub_186C1BFA4(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C6A28E8);
  char v53 = a2;
  uint64_t v6 = sub_186C5B380();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1LL << *(_BYTE *)(v5 + 32);
  __int128 v51 = (void *)(v5 + 64);
  if (v8 < 64) {
    uint64_t v9 = ~(-1LL << v8);
  }
  else {
    uint64_t v9 = -1LL;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  uint64_t v49 = v2;
  int64_t v50 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0LL;
  for (i = v5; ; uint64_t v5 = i)
  {
    if (v10)
    {
      unint64_t v17 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v18 = v17 | (v13 << 6);
      if ((v53 & 1) != 0) {
        goto LABEL_10;
      }
      goto LABEL_23;
    }

    int64_t v26 = v13 + 1;
    if (__OFADD__(v13, 1LL))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }

    if (v26 >= v50) {
      break;
    }
    char v27 = v51;
    unint64_t v28 = v51[v26];
    ++v13;
    if (!v28)
    {
      int64_t v13 = v26 + 1;
      if (v26 + 1 >= v50) {
        goto LABEL_33;
      }
      unint64_t v28 = v51[v13];
      if (!v28)
      {
        int64_t v29 = v26 + 2;
        if (v29 >= v50)
        {
LABEL_33:
          swift_release();
          uint64_t v3 = v49;
          if ((v53 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }

        unint64_t v28 = v51[v29];
        if (!v28)
        {
          while (1)
          {
            int64_t v13 = v29 + 1;
            if (__OFADD__(v29, 1LL)) {
              goto LABEL_42;
            }
            if (v13 >= v50) {
              goto LABEL_33;
            }
            unint64_t v28 = v51[v13];
            ++v29;
            if (v28) {
              goto LABEL_22;
            }
          }
        }

        int64_t v13 = v29;
      }
    }

void *sub_186C1C4F0()
{
  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C6A28D8);
  uint64_t v2 = *v0;
  uint64_t v3 = sub_186C5B374();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }

  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v25 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v25 >= v13) {
      goto LABEL_26;
    }
    unint64_t v26 = *(void *)(v6 + 8 * v25);
    ++v9;
    if (!v26)
    {
      int64_t v9 = v25 + 1;
      if (v25 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v26 = *(void *)(v6 + 8 * v9);
      if (!v26) {
        break;
      }
    }

void *sub_186C1C6A8()
{
  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C6A28E8);
  uint64_t v2 = *v0;
  uint64_t v3 = sub_186C5B374();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }

  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v42 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v42 >= v13) {
      goto LABEL_26;
    }
    unint64_t v43 = *(void *)(v6 + 8 * v42);
    ++v9;
    if (!v43)
    {
      int64_t v9 = v42 + 1;
      if (v42 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v43 = *(void *)(v6 + 8 * v9);
      if (!v43) {
        break;
      }
    }

void *sub_186C1C8F0()
{
  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C6A28F0);
  uint64_t v2 = *v0;
  uint64_t v3 = sub_186C5B374();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }

  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }

char *sub_186C1CAA4(uint64_t a1)
{
  return sub_186C1CB1C(0LL, *(void *)(a1 + 16), 0, (char *)a1);
}

char *sub_186C1CAB8(uint64_t a1)
{
  return sub_186C1CC34(0LL, *(void *)(a1 + 16), 0, (char *)a1);
}

char *sub_186C1CACC(uint64_t a1)
{
  return sub_186C1CD34(0LL, *(void *)(a1 + 16), 0, (char *)a1);
}

char *sub_186C1CAE0(uint64_t a1)
{
  return sub_186C1CE34(0LL, *(void *)(a1 + 16), 0, (char *)a1);
}

void *sub_186C1CAF4(void *a1)
{
  return sub_186C1D068(0LL, a1[2], 0, a1);
}

char *sub_186C1CB08(uint64_t a1)
{
  return sub_186C1D304(0LL, *(void *)(a1 + 16), 0, (char *)a1);
}

char *sub_186C1CB1C(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_18C6A26F0);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 24);
  }

  else
  {
    uint64_t v10 = (char *)MEMORY[0x18961AFE8];
  }

  unint64_t v12 = v10 + 32;
  int64_t v13 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[24 * v8]) {
      memmove(v12, v13, 24 * v8);
    }
    *((void *)a4 + 2) = 0LL;
  }

  else
  {
    swift_arrayInitWithCopy();
  }

  swift_bridgeObjectRelease();
  return v10;
}

char *sub_186C1CC34(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_18C6A2978);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 25;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 3);
  }

  else
  {
    uint64_t v10 = (char *)MEMORY[0x18961AFE8];
  }

  int64_t v13 = v10 + 32;
  unint64_t v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8]) {
      memmove(v13, v14, 8 * v8);
    }
    *((void *)a4 + 2) = 0LL;
  }

  else
  {
    swift_arrayInitWithCopy();
  }

  swift_bridgeObjectRelease();
  return v10;
}

char *sub_186C1CD34(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_18C6A28E0);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 1;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 5);
  }

  else
  {
    uint64_t v10 = (char *)MEMORY[0x18961AFE8];
  }

  int64_t v13 = v10 + 32;
  unint64_t v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[32 * v8]) {
      memmove(v13, v14, 32 * v8);
    }
    *((void *)a4 + 2) = 0LL;
  }

  else
  {
    swift_arrayInitWithCopy();
  }

  swift_bridgeObjectRelease();
  return v10;
}

char *sub_186C1CE34(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_18C6A2970);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }

  else
  {
    uint64_t v10 = (char *)MEMORY[0x18961AFE8];
  }

  int64_t v13 = v10 + 32;
  unint64_t v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0LL;
  }

  else
  {
    memcpy(v13, v14, 16 * v8);
  }

  swift_bridgeObjectRelease();
  return v10;
}

void *sub_186C1CF2C(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_18C6A28F8);
    uint64_t v10 = (void *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 216);
  }

  else
  {
    uint64_t v10 = (void *)MEMORY[0x18961AFE8];
  }

  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v10 + 4 >= &a4[27 * v8 + 4]) {
      memmove(v10 + 4, a4 + 4, 216 * v8);
    }
    a4[2] = 0LL;
  }

  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_18C6A2900);
    swift_arrayInitWithCopy();
  }

  swift_bridgeObjectRelease();
  return v10;
}

void *sub_186C1D068(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_18C6A28C8);
    uint64_t v10 = (void *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    v10[2] = v8;
    v10[3] = 2 * (v12 >> 4);
  }

  else
  {
    uint64_t v10 = (void *)MEMORY[0x18961AFE8];
  }

  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v10 + 4 >= &a4[2 * v8 + 4]) {
      memmove(v10 + 4, a4 + 4, 16 * v8);
    }
    a4[2] = 0LL;
  }

  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_18C6A28D0);
    swift_arrayInitWithCopy();
  }

  swift_bridgeObjectRelease();
  return v10;
}

size_t sub_186C1D188(size_t result, int64_t a2, char a3, void *a4)
{
  char v5 = result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
LABEL_30:
        __break(1u);
        return result;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (!v9)
  {
    int64_t v13 = (void *)MEMORY[0x18961AFE8];
    goto LABEL_19;
  }

  __swift_instantiateConcreteTypeFromMangledName(&qword_18C6A28B8);
  uint64_t v10 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&qword_18C6A2828) - 8);
  uint64_t v11 = *(void *)(v10 + 72);
  unint64_t v12 = (*(unsigned __int8 *)(v10 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  int64_t v13 = (void *)swift_allocObject();
  uint64_t result = _swift_stdlib_malloc_size(v13);
  if (!v11)
  {
    __break(1u);
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }

  if (result - v12 == 0x8000000000000000LL && v11 == -1) {
    goto LABEL_29;
  }
  v13[2] = v8;
  v13[3] = 2 * ((uint64_t)(result - v12) / v11);
LABEL_19:
  uint64_t v15 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&qword_18C6A2828) - 8);
  if ((v5 & 1) != 0)
  {
    if (v13 < a4
      || (unint64_t v16 = (*(unsigned __int8 *)(v15 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80),
          (char *)v13 + v16 >= (char *)a4 + v16 + *(void *)(v15 + 72) * v8))
    {
      swift_arrayInitWithTakeFrontToBack();
    }

    else if (v13 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }

    a4[2] = 0LL;
  }

  else
  {
    swift_arrayInitWithCopy();
  }

  swift_bridgeObjectRelease();
  return (size_t)v13;
}

char *sub_186C1D304(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_18C6A28B0);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 328);
  }

  else
  {
    uint64_t v10 = (char *)MEMORY[0x18961AFE8];
  }

  unint64_t v12 = v10 + 32;
  int64_t v13 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[328 * v8]) {
      memmove(v12, v13, 328 * v8);
    }
    *((void *)a4 + 2) = 0LL;
  }

  else
  {
    swift_arrayInitWithCopy();
  }

  swift_bridgeObjectRelease();
  return v10;
}

void (*sub_186C1D41C(void *a1, uint64_t a2, uint64_t a3))(uint64_t a1)
{
  unint64_t v6 = malloc(0x58uLL);
  *a1 = v6;
  v6[8] = a3;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  swift_bridgeObjectRetain();
  v6[9] = sub_186C1D6B0(v6);
  v6[10] = sub_186C1D4FC(v6 + 4, a2, a3, isUniquelyReferenced_nonNull_native);
  return sub_186C1D4AC;
}

void sub_186C1D4AC(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  uint64_t v2 = *(void (**)(void *, void))(*(void *)a1 + 72LL);
  (*(void (**)(uint64_t, void))(*(void *)a1 + 80LL))(*(void *)a1 + 32LL, 0LL);
  swift_bridgeObjectRelease();
  v2(v1, 0LL);
  free(v1);
}

void (*sub_186C1D4FC(void *a1, uint64_t a2, uint64_t a3, char a4))(uint64_t *a1)
{
  char v5 = v4;
  uint64_t v10 = malloc(0x1B8uLL);
  *a1 = v10;
  v10[51] = a3;
  v10[52] = v5;
  v10[50] = a2;
  uint64_t v11 = *v5;
  unint64_t v13 = sub_186BF8278(a2, a3);
  *((_BYTE *)v10 + 432) = v12 & 1;
  uint64_t v14 = *(void *)(v11 + 16);
  BOOL v15 = (v12 & 1) == 0;
  uint64_t v16 = v14 + v15;
  if (__OFADD__(v14, v15))
  {
    __break(1u);
    goto LABEL_14;
  }

  char v17 = v12;
  uint64_t v18 = *(void *)(v11 + 24);
  if (v18 < v16 || (a4 & 1) == 0)
  {
    if (v18 >= v16 && (a4 & 1) == 0)
    {
      sub_186C1C6A8();
      goto LABEL_9;
    }

    sub_186C1BFA4(v16, a4 & 1);
    unint64_t v19 = sub_186BF8278(a2, a3);
    if ((v17 & 1) == (v20 & 1))
    {
      unint64_t v13 = v19;
      goto LABEL_9;
    }

void sub_186C1D654(uint64_t *a1)
{
  uint64_t v1 = (void *)*a1;
  uint64_t v2 = (void *)(*a1 + 200);
  sub_186C1D6DC( *a1,  *(_BYTE *)(*a1 + 432),  *(uint64_t **)(*a1 + 416),  *(void *)(*a1 + 424),  *(void *)(*a1 + 400),  *(void *)(*a1 + 408));
  sub_186BFA418((uint64_t)v1, (uint64_t)v2, &qword_18C6A27A8);
  sub_186C28054( v2,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_186C27FB0);
  free(v1);
}

uint64_t (*sub_186C1D6B0(void *a1))(uint64_t result)
{
  *a1 = *v1;
  a1[1] = v1;
  *uint64_t v1 = 0x8000000000000000LL;
  return sub_186C1D6D0;
}

uint64_t sub_186C1D6D0(uint64_t result)
{
  **(void **)(result + 8) = *(void *)result;
  return result;
}

void *sub_186C1D6DC(uint64_t a1, char a2, uint64_t *a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  if (sub_186C23BF8((uint64_t)v40) == 1)
  {
    if ((a2 & 1) != 0)
    {
      swift_arrayDestroy();
      sub_186C1D8B0(a4, *a3);
    }

    return sub_186C28054( v39,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_186C280C0);
  }

  uint64_t result = (void *)sub_186BFA418((uint64_t)v39, (uint64_t)__src, &qword_18C6A27A8);
  __int128 v36 = __src[10];
  __int128 v37 = __src[11];
  uint64_t v38 = v25;
  __int128 v32 = __src[6];
  __int128 v33 = __src[7];
  __int128 v34 = __src[8];
  __int128 v35 = __src[9];
  __int128 v28 = __src[2];
  __int128 v29 = __src[3];
  __int128 v30 = __src[4];
  __int128 v31 = __src[5];
  __int128 v26 = __src[0];
  __int128 v27 = __src[1];
  char v12 = (void *)*a3;
  if ((a2 & 1) != 0)
  {
    memmove((void *)(v12[7] + 200 * a4), __src, 0xC8uLL);
    return sub_186C28054( v39,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_186C280C0);
  }

  v12[(a4 >> 6) + 8] |= 1LL << a4;
  unint64_t v13 = (void *)(v12[6] + 16 * a4);
  *unint64_t v13 = a5;
  v13[1] = a6;
  uint64_t v14 = v12[7] + 200 * a4;
  __int128 v15 = v29;
  *(_OWORD *)(v14 + 32) = v28;
  *(_OWORD *)(v14 + 48) = v15;
  __int128 v16 = v33;
  *(_OWORD *)(v14 + 96) = v32;
  *(_OWORD *)(v14 + 112) = v16;
  __int128 v17 = v31;
  *(_OWORD *)(v14 + 64) = v30;
  *(_OWORD *)(v14 + 80) = v17;
  *(void *)(v14 + 192) = v38;
  __int128 v18 = v37;
  *(_OWORD *)(v14 + 160) = v36;
  *(_OWORD *)(v14 + 176) = v18;
  __int128 v19 = v35;
  *(_OWORD *)(v14 + 128) = v34;
  *(_OWORD *)(v14 + 144) = v19;
  __int128 v20 = v27;
  *(_OWORD *)uint64_t v14 = v26;
  *(_OWORD *)(v14 + 16) = v20;
  uint64_t v21 = v12[2];
  BOOL v22 = __OFADD__(v21, 1LL);
  uint64_t v23 = v21 + 1;
  if (!v22)
  {
    void v12[2] = v23;
    swift_bridgeObjectRetain();
    return sub_186C28054( v39,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_186C280C0);
  }

  __break(1u);
  return result;
}

unint64_t sub_186C1D8B0(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1LL << *(_BYTE *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1LL << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    uint64_t result = sub_186C5B200();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1LL << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        sub_186C5B59C();
        swift_bridgeObjectRetain();
        sub_186C5ADA4();
        uint64_t v9 = sub_186C5B5D8();
        uint64_t result = swift_bridgeObjectRelease();
        unint64_t v10 = v9 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v10 < v8) {
            goto LABEL_5;
          }
        }

        else if (v10 >= v8)
        {
          goto LABEL_11;
        }

        if (v3 >= (uint64_t)v10)
        {
LABEL_11:
          uint64_t v11 = *(void *)(a2 + 48);
          char v12 = (_OWORD *)(v11 + 16 * v3);
          unint64_t v13 = (_OWORD *)(v11 + 16 * v6);
          if (v3 != v6 || v12 >= v13 + 1) {
            *char v12 = *v13;
          }
          uint64_t v14 = *(void *)(a2 + 56);
          uint64_t result = v14 + 200 * v3;
          __int128 v15 = (const void *)(v14 + 200 * v6);
          if (v3 != v6 || (int64_t v3 = v6, result >= (unint64_t)v15 + 200))
          {
            uint64_t result = (unint64_t)memmove((void *)result, v15, 0xC8uLL);
            int64_t v3 = v6;
          }
        }

unint64_t sub_186C1DA90(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1LL << *(_BYTE *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1LL << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    uint64_t result = sub_186C5B200();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1LL << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        sub_186C5B59C();
        swift_bridgeObjectRetain();
        sub_186C5ADA4();
        uint64_t v9 = sub_186C5B5D8();
        uint64_t result = swift_bridgeObjectRelease();
        unint64_t v10 = v9 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v10 < v8) {
            goto LABEL_5;
          }
        }

        else if (v10 >= v8)
        {
          goto LABEL_11;
        }

        if (v3 >= (uint64_t)v10)
        {
LABEL_11:
          uint64_t v11 = *(void *)(a2 + 48);
          char v12 = (_OWORD *)(v11 + 16 * v3);
          unint64_t v13 = (_OWORD *)(v11 + 16 * v6);
          if (v3 != v6 || v12 >= v13 + 1) {
            *char v12 = *v13;
          }
          uint64_t v14 = *(void *)(a2 + 56);
          __int128 v15 = (void *)(v14 + 8 * v3);
          __int128 v16 = (void *)(v14 + 8 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v15 >= v16 + 1))
          {
            *__int128 v15 = *v16;
            int64_t v3 = v6;
          }
        }

uint64_t sub_186C1DC64(uint64_t a1, uint64_t a2)
{
  int64_t v3 = v2;
  swift_bridgeObjectRetain();
  unint64_t v6 = sub_186BF8278(a1, a2);
  LOBYTE(a2) = v7;
  swift_bridgeObjectRelease();
  if ((a2 & 1) == 0) {
    return 0LL;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v9 = *v3;
  uint64_t v12 = *v3;
  *int64_t v3 = 0x8000000000000000LL;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_186C1C8F0();
    uint64_t v9 = v12;
  }

  swift_bridgeObjectRelease();
  uint64_t v10 = *(void *)(*(void *)(v9 + 56) + 8 * v6);
  sub_186C1DA90(v6, v9);
  *int64_t v3 = v9;
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t sub_186C1DD30(uint64_t result)
{
  if (!*(void *)(*(void *)v1 + 16LL)) {
    return result;
  }
  uint64_t v2 = result;
  uint64_t v3 = result + 56;
  uint64_t v4 = 1LL << *(_BYTE *)(result + 32);
  uint64_t v5 = -1LL;
  if (v4 < 64) {
    uint64_t v5 = ~(-1LL << v4);
  }
  unint64_t v6 = v5 & *(void *)(result + 56);
  int64_t v7 = (unint64_t)(v4 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v8 = 0LL;
  while (1)
  {
    if (v6)
    {
      unint64_t v9 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      unint64_t v10 = v9 | (v8 << 6);
      goto LABEL_6;
    }

    int64_t v14 = v8 + 1;
    if (__OFADD__(v8, 1LL))
    {
      __break(1u);
      goto LABEL_27;
    }

    if (v14 >= v7) {
      return swift_release();
    }
    unint64_t v15 = *(void *)(v3 + 8 * v14);
    ++v8;
    if (!v15)
    {
      int64_t v8 = v14 + 1;
      if (v14 + 1 >= v7) {
        return swift_release();
      }
      unint64_t v15 = *(void *)(v3 + 8 * v8);
      if (!v15)
      {
        int64_t v8 = v14 + 2;
        if (v14 + 2 >= v7) {
          return swift_release();
        }
        unint64_t v15 = *(void *)(v3 + 8 * v8);
        if (!v15)
        {
          int64_t v8 = v14 + 3;
          if (v14 + 3 >= v7) {
            return swift_release();
          }
          unint64_t v15 = *(void *)(v3 + 8 * v8);
          if (!v15) {
            break;
          }
        }
      }
    }

uint64_t sub_186C1DEC4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  uint64_t v43 = *MEMORY[0x1895F89C0];
  if (*(void *)(a2 + 16))
  {
    uint64_t v4 = *(void *)(a1 + 56);
    uint64_t v37 = a1 + 56;
    uint64_t v5 = -1LL << *(_BYTE *)(a1 + 32);
    uint64_t v35 = ~v5;
    if (-v5 < 64) {
      uint64_t v6 = ~(-1LL << -(char)v5);
    }
    else {
      uint64_t v6 = -1LL;
    }
    unint64_t v7 = v6 & v4;
    int64_t v36 = (unint64_t)(63 - v5) >> 6;
    uint64_t v8 = a2 + 56;
    swift_bridgeObjectRetain();
    int64_t v9 = 0LL;
    while (1)
    {
      if (v7)
      {
        unint64_t v10 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        unint64_t v11 = v10 | (v9 << 6);
      }

      else
      {
        int64_t v12 = v9 + 1;
        if (__OFADD__(v9, 1LL))
        {
          __break(1u);
          goto LABEL_49;
        }

        if (v12 >= v36) {
          goto LABEL_47;
        }
        unint64_t v13 = *(void *)(v37 + 8 * v12);
        int64_t v14 = v9 + 1;
        if (!v13)
        {
          int64_t v14 = v9 + 2;
          if (v9 + 2 >= v36) {
            goto LABEL_47;
          }
          unint64_t v13 = *(void *)(v37 + 8 * v14);
          if (!v13)
          {
            int64_t v14 = v9 + 3;
            if (v9 + 3 >= v36) {
              goto LABEL_47;
            }
            unint64_t v13 = *(void *)(v37 + 8 * v14);
            if (!v13)
            {
              int64_t v14 = v9 + 4;
              if (v9 + 4 >= v36) {
                goto LABEL_47;
              }
              unint64_t v13 = *(void *)(v37 + 8 * v14);
              if (!v13)
              {
                int64_t v15 = v9 + 5;
                if (v9 + 5 >= v36)
                {
LABEL_47:
                  sub_186C0D094();
                  return v2;
                }

                unint64_t v13 = *(void *)(v37 + 8 * v15);
                if (!v13)
                {
                  while (1)
                  {
                    int64_t v14 = v15 + 1;
                    if (__OFADD__(v15, 1LL)) {
                      break;
                    }
                    if (v14 >= v36) {
                      goto LABEL_47;
                    }
                    unint64_t v13 = *(void *)(v37 + 8 * v14);
                    ++v15;
                    if (v13) {
                      goto LABEL_24;
                    }
                  }

LABEL_49:
                  __break(1u);
                }

                int64_t v14 = v9 + 5;
              }
            }
          }
        }

uint64_t sub_186C1E32C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  uint64_t v28 = *MEMORY[0x1895F89C0];
  if (!*(void *)(a2 + 16))
  {
    swift_release();
    return MEMORY[0x18961AFF8];
  }

  uint64_t v26 = a1;
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3)
  {
    uint64_t v4 = a2 + 56;
    v25[0] = a1 + 32;
    swift_bridgeObjectRetain();
    uint64_t v5 = 0LL;
    while (1)
    {
      uint64_t v6 = (uint64_t *)(v25[0] + 16 * v5);
      uint64_t v8 = *v6;
      uint64_t v7 = v6[1];
      ++v5;
      sub_186C5B59C();
      swift_bridgeObjectRetain();
      sub_186C5ADA4();
      uint64_t v9 = sub_186C5B5D8();
      uint64_t v10 = -1LL << *(_BYTE *)(v2 + 32);
      unint64_t v11 = v9 & ~v10;
      if (((*(void *)(v4 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v11) & 1) != 0)
      {
        uint64_t v12 = *(void *)(v2 + 48);
        unint64_t v13 = (void *)(v12 + 16 * v11);
        BOOL v14 = *v13 == v8 && v13[1] == v7;
        if (v14 || (sub_186C5B4F4() & 1) != 0)
        {
          uint64_t isStackAllocationSafe = swift_bridgeObjectRelease();
          uint64_t v27 = v5;
LABEL_19:
          char v19 = *(_BYTE *)(v2 + 32);
          unint64_t v20 = (unint64_t)((1LL << v19) + 63) >> 6;
          size_t v21 = 8 * v20;
          if ((v19 & 0x3Fu) < 0xE
            || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (_DWORD)isStackAllocationSafe))
          {
            MEMORY[0x1895F8858](isStackAllocationSafe);
            memcpy((char *)v25 - ((v21 + 15) & 0x3FFFFFFFFFFFFFF0LL), (const void *)(v2 + 56), v21);
            uint64_t v22 = sub_186C1ED50((uint64_t)v25 - ((v21 + 15) & 0x3FFFFFFFFFFFFFF0LL), v20, v2, v11, &v26);
            swift_release();
            swift_bridgeObjectRelease();
          }

          else
          {
            uint64_t v23 = (void *)swift_slowAlloc();
            memcpy(v23, (const void *)(v2 + 56), v21);
            uint64_t v22 = sub_186C1ED50((uint64_t)v23, v20, v2, v11, &v26);
            swift_release();
            swift_bridgeObjectRelease();
            MEMORY[0x186E466F0](v23, -1LL, -1LL);
          }

          return v22;
        }

        uint64_t v15 = ~v10;
        while (1)
        {
          unint64_t v11 = (v11 + 1) & v15;
          if (((*(void *)(v4 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v11) & 1) == 0) {
            break;
          }
          int64_t v16 = (void *)(v12 + 16 * v11);
          BOOL v17 = *v16 == v8 && v16[1] == v7;
          if (v17 || (sub_186C5B4F4() & 1) != 0)
          {
            uint64_t v27 = v5;
            uint64_t isStackAllocationSafe = swift_bridgeObjectRelease();
            goto LABEL_19;
          }
        }
      }

      swift_bridgeObjectRelease();
      if (v5 == v3)
      {
        swift_bridgeObjectRelease();
        return v2;
      }
    }
  }

  return v2;
}

uint64_t sub_186C1E638(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return MEMORY[0x18961AFE8];
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C6A2980);
  uint64_t v3 = swift_allocObject();
  size_t v4 = _swift_stdlib_malloc_size((const void *)v3);
  *(void *)(v3 + 16) = v1;
  *(void *)(v3 + 24) = 2 * v4 - 64;
  uint64_t v5 = sub_186C20840(&v7, (_BYTE *)(v3 + 32), v1, a1);
  swift_bridgeObjectRetain();
  sub_186C0D094();
  if (v5 != (void *)v1)
  {
    __break(1u);
    return MEMORY[0x18961AFE8];
  }

  return v3;
}

void *sub_186C1E70C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return (void *)MEMORY[0x18961AFE8];
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C6A21C0);
  uint64_t v3 = (void *)swift_allocObject();
  int64_t v4 = _swift_stdlib_malloc_size(v3);
  uint64_t v5 = v4 - 32;
  if (v4 < 32) {
    uint64_t v5 = v4 - 17;
  }
  v3[2] = v1;
  v3[3] = 2 * (v5 >> 4);
  uint64_t v6 = sub_186C209D4((uint64_t)&v8, v3 + 4, v1, a1);
  swift_bridgeObjectRetain();
  sub_186C0D094();
  if (v6 != v1)
  {
    __break(1u);
    return (void *)MEMORY[0x18961AFE8];
  }

  return v3;
}

uint64_t sub_186C1E7F0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return MEMORY[0x18961AFE8];
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C6A28B0);
  uint64_t v3 = swift_allocObject();
  size_t v4 = _swift_stdlib_malloc_size((const void *)v3);
  *(void *)(v3 + 16) = v1;
  *(void *)(v3 + 24) = 2 * ((uint64_t)(v4 - 32) / 328);
  uint64_t v5 = sub_186C20BD0(&v7, (char *)(v3 + 32), v1, a1);
  swift_bridgeObjectRetain();
  sub_186C0D094();
  if (v5 != (void *)v1)
  {
    __break(1u);
    return MEMORY[0x18961AFE8];
  }

  return v3;
}

uint64_t sub_186C1E8E8(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *v2;
  sub_186C5B59C();
  swift_bridgeObjectRetain();
  sub_186C5ADA4();
  uint64_t v6 = sub_186C5B5D8();
  uint64_t v7 = -1LL << *(_BYTE *)(v5 + 32);
  unint64_t v8 = v6 & ~v7;
  if (((*(void *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v8) & 1) == 0)
  {
LABEL_18:
    swift_bridgeObjectRelease();
    return 0LL;
  }

  uint64_t v9 = *(void *)(v5 + 48);
  uint64_t v10 = (void *)(v9 + 16 * v8);
  BOOL v11 = *v10 == a1 && v10[1] == a2;
  if (!v11 && (sub_186C5B4F4() & 1) == 0)
  {
    uint64_t v15 = ~v7;
    do
    {
      unint64_t v8 = (v8 + 1) & v15;
      if (((*(void *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v8) & 1) == 0) {
        goto LABEL_18;
      }
      int64_t v16 = (void *)(v9 + 16 * v8);
      BOOL v17 = *v16 == a1 && v16[1] == a2;
    }

    while (!v17 && (sub_186C5B4F4() & 1) == 0);
  }

  swift_bridgeObjectRelease();
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v13 = *v2;
  uint64_t v19 = *v2;
  *uint64_t v2 = 0x8000000000000000LL;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_186C1A9F0();
    uint64_t v13 = v19;
  }

  uint64_t v14 = *(void *)(*(void *)(v13 + 48) + 16 * v8);
  sub_186C1F20C(v8);
  *uint64_t v2 = v19;
  swift_bridgeObjectRelease();
  return v14;
}

uint64_t sub_186C1EA74(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, void *a5)
{
  uint64_t v7 = *(void *)(a3 + 16);
  uint64_t v38 = (unint64_t *)result;
  *(void *)(result + ((a4 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) &= (-1LL << a4) - 1;
  uint64_t v8 = v7 - 1;
  uint64_t v39 = a3 + 56;
  while (2)
  {
    uint64_t v37 = v8;
    do
    {
      while (1)
      {
        int64_t v9 = a5[3];
        unint64_t v10 = a5[4];
        if (v10)
        {
          uint64_t v11 = (v10 - 1) & v10;
          unint64_t v12 = __clz(__rbit64(v10)) | (v9 << 6);
        }

        else
        {
          int64_t v13 = v9 + 1;
          if (__OFADD__(v9, 1LL))
          {
            __break(1u);
            goto LABEL_45;
          }

          int64_t v14 = (unint64_t)(a5[2] + 64LL) >> 6;
          int64_t v15 = a5[3];
          if (v13 >= v14) {
            goto LABEL_43;
          }
          uint64_t v16 = a5[1];
          unint64_t v17 = *(void *)(v16 + 8 * v13);
          if (!v17)
          {
            int64_t v15 = v9 + 1;
            if (v9 + 2 >= v14) {
              goto LABEL_43;
            }
            unint64_t v17 = *(void *)(v16 + 8 * (v9 + 2));
            if (v17)
            {
              int64_t v13 = v9 + 2;
            }

            else
            {
              int64_t v15 = v9 + 2;
              if (v9 + 3 >= v14) {
                goto LABEL_43;
              }
              unint64_t v17 = *(void *)(v16 + 8 * (v9 + 3));
              if (v17)
              {
                int64_t v13 = v9 + 3;
              }

              else
              {
                int64_t v13 = v9 + 4;
                int64_t v15 = v9 + 3;
                if (v9 + 4 >= v14) {
                  goto LABEL_43;
                }
                unint64_t v17 = *(void *)(v16 + 8 * v13);
                if (!v17)
                {
                  int64_t v15 = v14 - 1;
                  int64_t v18 = v9 + 5;
                  while (v14 != v18)
                  {
                    unint64_t v17 = *(void *)(v16 + 8 * v18++);
                    if (v17)
                    {
                      int64_t v13 = v18 - 1;
                      goto LABEL_21;
                    }
                  }

uint64_t sub_186C1ED50(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, void *a5)
{
  uint64_t v6 = *(void *)(a3 + 16);
  *(void *)(result + ((a4 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) &= (-1LL << a4) - 1;
  unint64_t v30 = (unint64_t *)result;
  uint64_t v31 = v6 - 1;
  uint64_t v8 = *a5;
  unint64_t v7 = a5[1];
  unint64_t v9 = *(void *)(*a5 + 16LL);
  if (v7 == v9)
  {
LABEL_2:
    swift_retain();
    return sub_186C1EF78(v30, a2, v31, a3);
  }

  uint64_t v32 = a3 + 56;
  while ((v7 & 0x8000000000000000LL) == 0)
  {
    if (v7 >= v9) {
      goto LABEL_29;
    }
    uint64_t v11 = v8 + 16 * v7;
    uint64_t v13 = *(void *)(v11 + 32);
    uint64_t v12 = *(void *)(v11 + 40);
    a5[1] = v7 + 1;
    sub_186C5B59C();
    swift_bridgeObjectRetain();
    sub_186C5ADA4();
    uint64_t v14 = sub_186C5B5D8();
    uint64_t v15 = -1LL << *(_BYTE *)(a3 + 32);
    unint64_t v16 = v14 & ~v15;
    unint64_t v17 = v16 >> 6;
    uint64_t v18 = 1LL << v16;
    if (((1LL << v16) & *(void *)(v32 + 8 * (v16 >> 6))) == 0) {
      goto LABEL_4;
    }
    uint64_t v19 = *(void *)(a3 + 48);
    uint64_t v20 = (void *)(v19 + 16 * v16);
    BOOL v21 = *v20 == v13 && v20[1] == v12;
    if (!v21 && (sub_186C5B4F4() & 1) == 0)
    {
      uint64_t v24 = ~v15;
      for (unint64_t i = v16 + 1; ; unint64_t i = v26 + 1)
      {
        unint64_t v26 = i & v24;
        uint64_t v27 = (void *)(v19 + 16 * v26);
        BOOL v28 = *v27 == v13 && v27[1] == v12;
        if (v28 || (sub_186C5B4F4() & 1) != 0)
        {
          uint64_t result = swift_bridgeObjectRelease();
          unint64_t v17 = v26 >> 6;
          uint64_t v18 = 1LL << v26;
          goto LABEL_15;
        }
      }

uint64_t sub_186C1EF78(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  if (!a3)
  {
    uint64_t v8 = MEMORY[0x18961AFF8];
LABEL_36:
    swift_release();
    return v8;
  }

  uint64_t v5 = a3;
  if (*(void *)(a4 + 16) == a3) {
    return v4;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C6A28C0);
  uint64_t result = sub_186C5B248();
  uint64_t v8 = result;
  uint64_t v30 = a2;
  if (a2 < 1) {
    unint64_t v9 = 0LL;
  }
  else {
    unint64_t v9 = *a1;
  }
  uint64_t v10 = 0LL;
  uint64_t v11 = result + 56;
  while (1)
  {
    if (v9)
    {
      unint64_t v12 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      unint64_t v13 = v12 | (v10 << 6);
      goto LABEL_24;
    }

    uint64_t v14 = v10 + 1;
    if (__OFADD__(v10, 1LL)) {
      goto LABEL_39;
    }
    if (v14 >= v30) {
      goto LABEL_36;
    }
    unint64_t v15 = a1[v14];
    ++v10;
    if (!v15)
    {
      uint64_t v10 = v14 + 1;
      if (v14 + 1 >= v30) {
        goto LABEL_36;
      }
      unint64_t v15 = a1[v10];
      if (!v15)
      {
        uint64_t v10 = v14 + 2;
        if (v14 + 2 >= v30) {
          goto LABEL_36;
        }
        unint64_t v15 = a1[v10];
        if (!v15) {
          break;
        }
      }
    }

unint64_t sub_186C1F20C(unint64_t result)
{
  int64_t v2 = result;
  uint64_t v3 = *v1;
  uint64_t v4 = *v1 + 56;
  uint64_t v5 = -1LL << *(_BYTE *)(*v1 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1LL << v6) & *(void *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    swift_retain();
    uint64_t v8 = sub_186C5B200();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1LL << v6)) != 0)
    {
      unint64_t v9 = (v8 + 1) & v7;
      do
      {
        sub_186C5B59C();
        swift_bridgeObjectRetain();
        sub_186C5ADA4();
        uint64_t v10 = sub_186C5B5D8();
        swift_bridgeObjectRelease();
        unint64_t v11 = v10 & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v11 < v9) {
            goto LABEL_5;
          }
        }

        else if (v11 >= v9)
        {
          goto LABEL_11;
        }

        if (v2 >= (uint64_t)v11)
        {
LABEL_11:
          uint64_t v12 = *(void *)(v3 + 48);
          unint64_t v13 = (_OWORD *)(v12 + 16 * v2);
          uint64_t v14 = (_OWORD *)(v12 + 16 * v6);
          if (v2 != v6 || (int64_t v2 = v6, v13 >= v14 + 1))
          {
            *unint64_t v13 = *v14;
            int64_t v2 = v6;
          }
        }

uint64_t sub_186C1F3D0(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a3) {
    return MEMORY[0x18961AFF0];
  }
  uint64_t v4 = a4;
  uint64_t v5 = a3;
  if (*(void *)(a4 + 16) == a3)
  {
    swift_retain();
    return v4;
  }

  __swift_instantiateConcreteTypeFromMangledName(&qword_18C6A28E8);
  uint64_t result = sub_186C5B38C();
  uint64_t v8 = result;
  uint64_t v50 = a2;
  if (a2 < 1) {
    unint64_t v9 = 0LL;
  }
  else {
    unint64_t v9 = *a1;
  }
  uint64_t v10 = 0LL;
  uint64_t v11 = result + 64;
  while (1)
  {
    if (v9)
    {
      unint64_t v12 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      unint64_t v13 = v12 | (v10 << 6);
    }

    else
    {
      uint64_t v14 = v10 + 1;
      if (__OFADD__(v10, 1LL)) {
        goto LABEL_40;
      }
      if (v14 >= v50) {
        return v8;
      }
      unint64_t v15 = a1[v14];
      ++v10;
      if (!v15)
      {
        uint64_t v10 = v14 + 1;
        if (v14 + 1 >= v50) {
          return v8;
        }
        unint64_t v15 = a1[v10];
        if (!v15)
        {
          uint64_t v10 = v14 + 2;
          if (v14 + 2 >= v50) {
            return v8;
          }
          unint64_t v15 = a1[v10];
          if (!v15)
          {
            uint64_t v16 = v14 + 3;
            if (v16 >= v50) {
              return v8;
            }
            unint64_t v15 = a1[v16];
            if (!v15)
            {
              while (1)
              {
                uint64_t v10 = v16 + 1;
                if (__OFADD__(v16, 1LL)) {
                  goto LABEL_41;
                }
                if (v10 >= v50) {
                  return v8;
                }
                unint64_t v15 = a1[v10];
                ++v16;
                if (v15) {
                  goto LABEL_24;
                }
              }
            }

            uint64_t v10 = v16;
          }
        }
      }

uint64_t sub_186C1F70C(uint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t (*a3)(void *))
{
  uint64_t v6 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v6 = a2(v6);
  }
  uint64_t v7 = *(void *)(v6 + 16);
  v9[0] = v6 + 32;
  v9[1] = v7;
  uint64_t result = a3(v9);
  *a1 = v6;
  return result;
}

uint64_t sub_186C1F784(uint64_t *a1)
{
  uint64_t v3 = a1[1];
  uint64_t result = sub_186C5B4C4();
  if (result >= v3)
  {
    if (v3 < 0) {
      goto LABEL_156;
    }
    if (v3) {
      return sub_186C1FEBC(0LL, v3, 1LL, a1);
    }
    return result;
  }

  if (v3 >= 0) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = v3 + 1;
  }
  if (v3 < -1) {
    goto LABEL_155;
  }
  uint64_t v96 = result;
  uint64_t v97 = v3;
  uint64_t v101 = v1;
  uint64_t v92 = a1;
  if (v3 <= 1)
  {
    uint64_t v7 = MEMORY[0x18961AFE8];
    uint64_t v99 = (char *)(MEMORY[0x18961AFE8] + 32LL);
    if (v3 != 1)
    {
      unint64_t v11 = *(void *)(MEMORY[0x18961AFE8] + 16LL);
      uint64_t v10 = MEMORY[0x18961AFE8];
LABEL_121:
      uint64_t result = v10;
      uint64_t v95 = v7;
      if (v11 >= 2)
      {
        uint64_t v84 = *v92;
        do
        {
          unint64_t v85 = v11 - 2;
          if (v11 < 2) {
            goto LABEL_150;
          }
          if (!v84) {
            goto LABEL_163;
          }
          uint64_t v86 = result;
          uint64_t v87 = *(void *)(result + 32 + 16 * v85);
          uint64_t v88 = *(void *)(result + 32 + 16 * (v11 - 1) + 8);
          uint64_t v89 = v101;
          uint64_t result = sub_186C1FFB4( (char *)(v84 + 328 * v87),  (char *)(v84 + 328LL * *(void *)(result + 32 + 16 * (v11 - 1))),  v84 + 328 * v88,  v99);
          uint64_t v101 = v89;
          if (v89) {
            break;
          }
          if (v88 < v87) {
            goto LABEL_151;
          }
          uint64_t result = swift_isUniquelyReferenced_nonNull_native();
          if ((result & 1) == 0)
          {
            uint64_t result = (uint64_t)sub_186BF91FC(v86);
            uint64_t v86 = result;
          }

          if (v85 >= *(void *)(v86 + 16)) {
            goto LABEL_152;
          }
          id v90 = (void *)(v86 + 32 + 16 * v85);
          *id v90 = v87;
          v90[1] = v88;
          unint64_t v91 = *(void *)(v86 + 16);
          if (v11 > v91) {
            goto LABEL_153;
          }
          memmove((void *)(v86 + 32 + 16 * (v11 - 1)), (const void *)(v86 + 32 + 16 * v11), 16 * (v91 - v11));
          uint64_t result = v86;
          *(void *)(v86 + 16) = v91 - 1;
          unint64_t v11 = v91 - 1;
        }

        while (v91 > 2);
      }

LABEL_118:
      swift_bridgeObjectRelease();
      *(void *)(v95 + 16) = 0LL;
      return swift_bridgeObjectRelease();
    }

    uint64_t v95 = MEMORY[0x18961AFE8];
  }

  else
  {
    uint64_t v6 = v5 >> 1;
    uint64_t result = sub_186C5AF48();
    *(void *)(result + 16) = v6;
    uint64_t v3 = v97;
    uint64_t v95 = result;
    uint64_t v99 = (char *)(result + 32);
  }

  uint64_t v8 = 0LL;
  uint64_t v9 = *a1;
  uint64_t v93 = *a1 - 328;
  uint64_t v94 = *a1 + 8;
  uint64_t v10 = MEMORY[0x18961AFE8];
  uint64_t v98 = *a1;
  while (1)
  {
    uint64_t v12 = v8++;
    if (v8 >= v3)
    {
LABEL_23:
      if (v8 < v3) {
        goto LABEL_24;
      }
      goto LABEL_70;
    }

    unint64_t v13 = (uint64_t *)(v9 + 328 * v8);
    uint64_t result = *v13;
    uint64_t v14 = v13[1];
    unint64_t v15 = (void *)(v9 + 328 * v12);
    if (result == *v15 && v14 == v15[1]) {
      break;
    }
    uint64_t result = sub_186C5B4F4();
    int v17 = result;
    uint64_t v18 = v12 + 2;
    if (v12 + 2 < v3) {
      goto LABEL_45;
    }
    uint64_t v8 = v12 + 2;
    if ((result & 1) == 0) {
      goto LABEL_23;
    }
LABEL_60:
    if (v18 < v12) {
      goto LABEL_159;
    }
LABEL_61:
    if (v12 >= v18)
    {
      uint64_t v8 = v18;
      if (v18 < v3) {
        goto LABEL_24;
      }
    }

    else
    {
      __int128 v28 = (char *)(v93 + 328 * v18);
      uint64_t v29 = v18;
      uint64_t v30 = v12;
      unint64_t v31 = (char *)(v9 + 328 * v12);
      do
      {
        if (v30 != --v29)
        {
          if (!v9) {
            goto LABEL_162;
          }
          memcpy(__dst, v31, sizeof(__dst));
          memmove(v31, v28, 0x148uLL);
          uint64_t result = (uint64_t)memcpy(v28, __dst, 0x141uLL);
        }

        ++v30;
        v28 -= 328;
        v31 += 328;
      }

      while (v30 < v29);
      uint64_t v8 = v18;
      uint64_t v3 = v97;
      if (v18 < v97)
      {
LABEL_24:
        if (__OFSUB__(v8, v12)) {
          goto LABEL_154;
        }
        if (v8 - v12 < v96)
        {
          if (__OFADD__(v12, v96)) {
            goto LABEL_157;
          }
          if (v12 + v96 >= v3) {
            uint64_t v19 = v3;
          }
          else {
            uint64_t v19 = v12 + v96;
          }
          if (v19 < v12)
          {
LABEL_158:
            __break(1u);
            goto LABEL_159;
          }

          if (v8 != v19)
          {
            uint64_t v20 = (void *)(v93 + 328 * v8);
            do
            {
              uint64_t v21 = v12;
              __int128 v22 = v20;
              do
              {
                uint64_t result = v22[41];
                if (result == *v22 && v22[42] == v22[1]) {
                  break;
                }
                uint64_t result = sub_186C5B4F4();
                if ((result & 1) == 0) {
                  break;
                }
                if (!v9) {
                  goto LABEL_160;
                }
                memcpy(__dst, v22 + 41, sizeof(__dst));
                memcpy(v22 + 41, v22, 0x148uLL);
                uint64_t result = (uint64_t)memcpy(v22, __dst, 0x141uLL);
                v22 -= 41;
                ++v21;
              }

              while (v8 != v21);
              ++v8;
              v20 += 41;
            }

            while (v8 != v19);
            uint64_t v8 = v19;
          }
        }
      }
    }

LABEL_102:
        if ((v59 & 1) != 0) {
          goto LABEL_144;
        }
        __int128 v67 = (uint64_t *)(v34 + 16 * v36);
        uint64_t v69 = *v67;
        uint64_t v68 = v67[1];
        BOOL v47 = __OFSUB__(v68, v69);
        uint64_t v70 = v68 - v69;
        if (v47) {
          goto LABEL_146;
        }
        if (v70 < v58) {
          goto LABEL_15;
        }
LABEL_110:
        unint64_t v75 = v36 - 1;
        if (v36 - 1 >= v11)
        {
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
LABEL_144:
          __break(1u);
LABEL_145:
          __break(1u);
LABEL_146:
          __break(1u);
LABEL_147:
          __break(1u);
LABEL_148:
          __break(1u);
LABEL_149:
          __break(1u);
LABEL_150:
          __break(1u);
LABEL_151:
          __break(1u);
LABEL_152:
          __break(1u);
LABEL_153:
          __break(1u);
LABEL_154:
          __break(1u);
LABEL_155:
          __break(1u);
LABEL_156:
          __break(1u);
LABEL_157:
          __break(1u);
          goto LABEL_158;
        }

        if (!v9) {
          goto LABEL_161;
        }
        uint64_t v76 = v10;
        uint64_t v77 = v9;
        __int128 v78 = (uint64_t *)(v34 + 16 * v75);
        uint64_t v79 = *v78;
        __int128 v80 = (void *)(v34 + 16 * v36);
        uint64_t v81 = v80[1];
        uint64_t v82 = v101;
        uint64_t result = sub_186C1FFB4((char *)(v77 + 328 * *v78), (char *)(v77 + 328LL * *v80), v77 + 328 * v81, v99);
        uint64_t v101 = v82;
        if (v82) {
          goto LABEL_118;
        }
        if (v81 < v79) {
          goto LABEL_135;
        }
        if (v36 > *(void *)(v76 + 16)) {
          goto LABEL_136;
        }
        *__int128 v78 = v79;
        *(void *)(v34 + 16 * v75 + 8) = v81;
        unint64_t v83 = *(void *)(v76 + 16);
        if (v36 >= v83) {
          goto LABEL_137;
        }
        uint64_t v10 = v76;
        unint64_t v11 = v83 - 1;
        uint64_t result = (uint64_t)memmove((void *)(v34 + 16 * v36), v80 + 2, 16 * (v83 - 1 - v36));
        *(void *)(v76 + 16) = v83 - 1;
        BOOL v64 = v83 > 2;
        uint64_t v9 = v98;
        if (!v64) {
          goto LABEL_15;
        }
      }
    }

    unint64_t v11 = 1LL;
    uint64_t v9 = v98;
LABEL_15:
    uint64_t v3 = v97;
    if (v8 >= v97)
    {
      uint64_t v7 = v95;
      goto LABEL_121;
    }
  }

  uint64_t v18 = v12 + 2;
  if (v12 + 2 >= v3)
  {
    uint64_t v8 = v12 + 2;
    goto LABEL_70;
  }

  int v17 = 0;
LABEL_45:
  __int128 v24 = (void *)(v94 + 328 * v18);
  while (1)
  {
    uint64_t result = *(v24 - 1);
    __int128 v26 = (void *)(v9 + 328 * v8);
    if (result != *v26 || *v24 != v26[1])
    {
      uint64_t result = sub_186C5B4F4();
      goto LABEL_47;
    }

    if ((v17 & 1) != 0) {
      break;
    }
LABEL_47:
    v24 += 41;
    uint64_t v25 = v18 + 1;
    uint64_t v8 = v18;
    uint64_t v18 = v25;
    if (v25 >= v97)
    {
      uint64_t v18 = v25;
LABEL_59:
      uint64_t v3 = v97;
      uint64_t v8 = v18;
      if ((v17 & 1) == 0) {
        goto LABEL_23;
      }
      goto LABEL_60;
    }
  }

  uint64_t v3 = v97;
  if (v18 >= v12) {
    goto LABEL_61;
  }
LABEL_159:
  __break(1u);
LABEL_160:
  __break(1u);
LABEL_161:
  __break(1u);
LABEL_162:
  __break(1u);
LABEL_163:
  __break(1u);
  return result;
}

uint64_t sub_186C1FEBC(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  if (a3 != a2)
  {
    uint64_t v4 = a3;
    uint64_t v6 = result;
    uint64_t v7 = *a4;
    uint64_t v8 = *a4 + 328 * a3 - 328;
LABEL_5:
    uint64_t v9 = v6;
    uint64_t v10 = (void *)v8;
    while (1)
    {
      uint64_t result = v10[41];
      BOOL v11 = result == *v10 && v10[42] == v10[1];
      if (v11 || (uint64_t result = sub_186C5B4F4(), (result & 1) == 0))
      {
LABEL_4:
        ++v4;
        v8 += 328LL;
        if (v4 == a2) {
          return result;
        }
        goto LABEL_5;
      }

      if (!v7) {
        break;
      }
      memcpy(v12, v10 + 41, sizeof(v12));
      memcpy(v10 + 41, v10, 0x148uLL);
      uint64_t result = (uint64_t)memcpy(v10, v12, 0x141uLL);
      v10 -= 41;
      if (v4 == ++v9) {
        goto LABEL_4;
      }
    }

    __break(1u);
  }

  return result;
}

uint64_t sub_186C1FFB4(char *__dst, char *__src, unint64_t a3, char *a4)
{
  uint64_t v4 = a4;
  uint64_t v6 = __src;
  uint64_t v7 = __dst;
  int64_t v8 = __src - __dst;
  int64_t v9 = (__src - __dst) / 328;
  uint64_t v10 = a3 - (void)__src;
  uint64_t v11 = (uint64_t)(a3 - (void)__src) / 328;
  if (v9 >= v11)
  {
    uint64_t v16 = 328 * v11;
    if (a4 != __src || &__src[v16] <= a4) {
      memmove(a4, __src, 328 * v11);
    }
    unint64_t v13 = &v4[v16];
    if (v7 >= v6 || v10 < 328) {
      goto LABEL_44;
    }
    int v17 = (char *)(a3 - 328);
    while (1)
    {
      uint64_t v18 = v17 + 328;
      uint64_t v19 = v6 - 328;
      BOOL v20 = *((void *)v13 - 41) == *((void *)v6 - 41) && *((void *)v13 - 40) == *((void *)v6 - 40);
      if (v20 || (sub_186C5B4F4() & 1) == 0)
      {
        uint64_t v19 = v13 - 328;
        if (v18 != v13)
        {
          v13 -= 328;
LABEL_41:
          memmove(v17, v19, 0x148uLL);
          goto LABEL_42;
        }

        BOOL v21 = v17 >= v13;
        v13 -= 328;
        if (v21) {
          goto LABEL_41;
        }
      }

      else
      {
        if (v18 != v6)
        {
          v6 -= 328;
          goto LABEL_41;
        }

        BOOL v21 = v17 >= v6;
        v6 -= 328;
        if (v21) {
          goto LABEL_41;
        }
      }

unint64_t sub_186C20220(unint64_t result, int64_t a2, const void *a3)
{
  if ((result & 0x8000000000000000LL) != 0)
  {
    __break(1u);
    goto LABEL_21;
  }

  uint64_t v5 = *v3;
  int64_t v6 = *((void *)*v3 + 2);
  if (v6 < a2)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }

  unint64_t v7 = result;
  unint64_t v8 = a2 - result;
  if (__OFSUB__(a2, result))
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }

  unint64_t v9 = 1 - v8;
  if (__OFSUB__(1LL, v8))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }

  int64_t v10 = v6 + v9;
  if (__OFADD__(v6, v9))
  {
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }

  int isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native();
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || v10 > *((void *)v5 + 3) >> 1)
  {
    if (v6 <= v10) {
      int64_t v13 = v6 + v9;
    }
    else {
      int64_t v13 = v6;
    }
    uint64_t v5 = sub_186C1D304(isUniquelyReferenced_nonNull_native, v13, 1, v5);
  }

  BOOL v14 = &v5[328 * v7 + 32];
  uint64_t result = swift_arrayDestroy();
  if (!v9) {
    goto LABEL_19;
  }
  uint64_t v15 = *((void *)v5 + 2);
  BOOL v16 = __OFSUB__(v15, a2);
  uint64_t v17 = v15 - a2;
  if (v16) {
    goto LABEL_25;
  }
  uint64_t result = (unint64_t)(v14 + 328);
  uint64_t v18 = &v5[328 * a2 + 32];
  size_t v19 = 328 * v17;
  uint64_t v20 = *((void *)v5 + 2);
  BOOL v16 = __OFADD__(v20, v9);
  uint64_t v21 = v20 + v9;
  if (!v16)
  {
    *((void *)v5 + 2) = v21;
LABEL_19:
    uint64_t result = (unint64_t)memcpy(v14, a3, 0x141uLL);
    *uint64_t v3 = v5;
    return result;
  }

uint64_t sub_186C20360@<X0>(uint64_t *a1@<X0>, char a2@<W1>, void *a3@<X8>)
{
  uint64_t v4 = v3;
  uint64_t v8 = *v3;
  sub_186C5B59C();
  uint64_t v9 = *a1;
  uint64_t v10 = a1[1];
  __src = a1;
  swift_bridgeObjectRetain();
  sub_186C5ADA4();
  swift_bridgeObjectRelease();
  uint64_t v11 = sub_186C5B5D8();
  uint64_t v12 = -1LL << *(_BYTE *)(v8 + 32);
  unint64_t v13 = v11 & ~v12;
  uint64_t v14 = v8 + 56;
  if (((*(void *)(v8 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v13) & 1) != 0)
  {
    uint64_t v15 = *(void *)(v8 + 48);
    BOOL v16 = (void *)(v15 + 328 * v13);
    BOOL v17 = *v16 == v9 && v16[1] == v10;
    if (v17 || (sub_186C5B4F4() & 1) != 0)
    {
      uint64_t v18 = 0LL;
      int v19 = 1;
    }

    else
    {
      uint64_t v42 = a3;
      uint64_t v20 = ~v12;
      unint64_t v13 = (v13 + 1) & ~v12;
      if (((*(void *)(v14 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v13) & 1) != 0)
      {
        uint64_t v18 = 1LL;
        while (1)
        {
          uint64_t v21 = (void *)(v15 + 328 * v13);
          BOOL v22 = *v21 == v9 && v21[1] == v10;
          if (v22 || (sub_186C5B4F4() & 1) != 0) {
            break;
          }
          unint64_t v13 = (v13 + 1) & v20;
          if (((*(void *)(v14 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v13) & 1) == 0)
          {
            int v19 = 0;
            goto LABEL_20;
          }
        }

        uint64_t v18 = 0LL;
        int v19 = 1;
      }

      else
      {
        int v19 = 0;
        uint64_t v18 = 1LL;
      }

uint64_t sub_186C20724(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 64);
  if (v1)
  {
    uint64_t v2 = 0LL;
    return __clz(__rbit64(v1)) + v2;
  }

  char v5 = *(_BYTE *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  uint64_t v3 = 1LL << v5;
  if (v6 < 7) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 72);
  if (v1)
  {
    uint64_t v2 = 64LL;
    return __clz(__rbit64(v1)) + v2;
  }

  unint64_t v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 2) {
    unint64_t v7 = 2LL;
  }
  unint64_t v8 = v7 - 2;
  uint64_t v9 = (unint64_t *)(a1 + 80);
  uint64_t v2 = 64LL;
  while (v8)
  {
    unint64_t v10 = *v9++;
    unint64_t v1 = v10;
    --v8;
    v2 += 64LL;
    if (v10) {
      return __clz(__rbit64(v1)) + v2;
    }
  }

  return v3;
}

void *sub_186C207AC(void *result, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  if (a2 < 0 || 1LL << *(_BYTE *)(a5 + 32) <= a2)
  {
    __break(1u);
    goto LABEL_7;
  }

  if (((*(void *)(a5 + (((unint64_t)a2 >> 3) & 0xFFFFFFFFFFFFF8LL) + 64) >> a2) & 1) == 0)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }

  if (*(_DWORD *)(a5 + 36) == a3)
  {
    uint64_t v5 = *(void *)(*(void *)(a5 + 48) + 16 * a2);
    *uint64_t result = *(void *)(*(void *)(a5 + 56) + 8 * a2);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return (void *)v5;
  }

void *sub_186C20840(void *result, _BYTE *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4 + 56;
  uint64_t v5 = -1LL;
  uint64_t v6 = -1LL << *(_BYTE *)(a4 + 32);
  if (-v6 < 64) {
    uint64_t v5 = ~(-1LL << -(char)v6);
  }
  unint64_t v7 = v5 & *(void *)(a4 + 56);
  if (!a2)
  {
    int64_t v8 = 0LL;
    a3 = 0LL;
LABEL_35:
    *uint64_t result = a4;
    result[1] = v4;
    result[2] = ~v6;
    result[3] = v8;
    result[4] = v7;
    return (void *)a3;
  }

  if (!a3)
  {
    int64_t v8 = 0LL;
    goto LABEL_35;
  }

  if (a3 < 0)
  {
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }

  int64_t v8 = 0LL;
  uint64_t v9 = 0LL;
  int64_t v10 = (unint64_t)(63 - v6) >> 6;
  while (v7)
  {
    unint64_t v11 = __clz(__rbit64(v7));
    v7 &= v7 - 1;
    unint64_t v12 = v11 | (v8 << 6);
LABEL_8:
    ++v9;
    *a2++ = *(_BYTE *)(*(void *)(a4 + 48) + v12);
    if (v9 == a3) {
      goto LABEL_35;
    }
  }

  int64_t v13 = v8 + 1;
  if (__OFADD__(v8, 1LL))
  {
    __break(1u);
    goto LABEL_37;
  }

  if (v13 >= v10) {
    goto LABEL_30;
  }
  unint64_t v14 = *(void *)(v4 + 8 * v13);
  if (v14) {
    goto LABEL_19;
  }
  v8 += 2LL;
  if (v13 + 1 >= v10)
  {
    unint64_t v7 = 0LL;
    int64_t v8 = v13;
    goto LABEL_34;
  }

  unint64_t v14 = *(void *)(v4 + 8 * v8);
  if (v14)
  {
LABEL_15:
    int64_t v13 = v8;
LABEL_19:
    unint64_t v16 = __clz(__rbit64(v14));
    unint64_t v7 = (v14 - 1) & v14;
    unint64_t v12 = v16 + (v13 << 6);
    int64_t v8 = v13;
    goto LABEL_8;
  }

  int64_t v15 = v13 + 2;
  if (v13 + 2 >= v10) {
    goto LABEL_30;
  }
  unint64_t v14 = *(void *)(v4 + 8 * v15);
  if (v14)
  {
LABEL_18:
    int64_t v13 = v15;
    goto LABEL_19;
  }

  int64_t v8 = v13 + 3;
  if (v13 + 3 >= v10)
  {
    unint64_t v7 = 0LL;
    int64_t v8 = v13 + 2;
    goto LABEL_34;
  }

  unint64_t v14 = *(void *)(v4 + 8 * v8);
  if (v14) {
    goto LABEL_15;
  }
  int64_t v15 = v13 + 4;
  if (v13 + 4 >= v10)
  {
LABEL_30:
    unint64_t v7 = 0LL;
LABEL_34:
    a3 = v9;
    goto LABEL_35;
  }

  unint64_t v14 = *(void *)(v4 + 8 * v15);
  if (v14) {
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v13 = v15 + 1;
    if (__OFADD__(v15, 1LL)) {
      break;
    }
    if (v13 >= v10)
    {
      unint64_t v7 = 0LL;
      int64_t v8 = v10 - 1;
      goto LABEL_34;
    }

    unint64_t v14 = *(void *)(v4 + 8 * v13);
    ++v15;
    if (v14) {
      goto LABEL_19;
    }
  }

uint64_t sub_186C209D4(uint64_t result, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = (void *)result;
  uint64_t v6 = a4 + 64;
  uint64_t v7 = -1LL << *(_BYTE *)(a4 + 32);
  if (-v7 < 64) {
    uint64_t v8 = ~(-1LL << -(char)v7);
  }
  else {
    uint64_t v8 = -1LL;
  }
  unint64_t v9 = v8 & *(void *)(a4 + 64);
  if (!a2)
  {
    int64_t v12 = 0LL;
    uint64_t v10 = 0LL;
LABEL_38:
    *uint64_t v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return v10;
  }

  uint64_t v10 = a3;
  if (!a3)
  {
    int64_t v12 = 0LL;
    goto LABEL_38;
  }

  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }

  unint64_t v11 = a2;
  int64_t v12 = 0LL;
  uint64_t v13 = 0LL;
  int64_t v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  unint64_t v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    uint64_t v20 = (void *)(*(void *)(a4 + 48) + 16 * v16);
    uint64_t v21 = v20[1];
    *unint64_t v11 = *v20;
    v11[1] = v21;
    if (v13 == v10)
    {
      swift_bridgeObjectRetain();
      goto LABEL_38;
    }

    v11 += 2;
    uint64_t result = swift_bridgeObjectRetain();
    if (v9) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v17 = v12 + 1;
    if (__OFADD__(v12, 1LL))
    {
      __break(1u);
      goto LABEL_40;
    }

    if (v17 >= v14) {
      goto LABEL_33;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    if (!v18) {
      break;
    }
LABEL_18:
    unint64_t v9 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v17 << 6);
    int64_t v12 = v17;
  }

  v12 += 2LL;
  if (v17 + 1 >= v14)
  {
    unint64_t v9 = 0LL;
    int64_t v12 = v17;
    goto LABEL_37;
  }

  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18) {
    goto LABEL_14;
  }
  int64_t v19 = v17 + 2;
  if (v17 + 2 >= v14) {
    goto LABEL_33;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18) {
    goto LABEL_17;
  }
  int64_t v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    unint64_t v9 = 0LL;
    int64_t v12 = v17 + 2;
    goto LABEL_37;
  }

  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    int64_t v17 = v12;
    goto LABEL_18;
  }

  int64_t v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    unint64_t v9 = 0LL;
LABEL_37:
    uint64_t v10 = v13;
    goto LABEL_38;
  }

  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    int64_t v17 = v19;
    goto LABEL_18;
  }

  while (1)
  {
    int64_t v17 = v19 + 1;
    if (__OFADD__(v19, 1LL)) {
      break;
    }
    if (v17 >= v14)
    {
      unint64_t v9 = 0LL;
      int64_t v12 = v14 - 1;
      goto LABEL_37;
    }

    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v19;
    if (v18) {
      goto LABEL_18;
    }
  }

void *sub_186C20BD0(void *result, char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a4 + 56;
  uint64_t v6 = -1LL << *(_BYTE *)(a4 + 32);
  if (-v6 < 64) {
    uint64_t v7 = ~(-1LL << -(char)v6);
  }
  else {
    uint64_t v7 = -1LL;
  }
  unint64_t v8 = v7 & *(void *)(a4 + 56);
  if (!a2)
  {
    int64_t v11 = 0LL;
    uint64_t v9 = 0LL;
LABEL_39:
    *uint64_t result = a4;
    result[1] = v5;
    result[2] = ~v6;
    result[3] = v11;
    result[4] = v8;
    return (void *)v9;
  }

  uint64_t v9 = a3;
  if (!a3)
  {
    int64_t v11 = 0LL;
    goto LABEL_39;
  }

  if (a3 < 0) {
    goto LABEL_41;
  }
  uint64_t v10 = a2;
  uint64_t v20 = -1LL << *(_BYTE *)(a4 + 32);
  uint64_t v21 = result;
  int64_t v11 = 0LL;
  uint64_t v12 = 0LL;
  int64_t v13 = (unint64_t)(63 - v6) >> 6;
  if (!v8) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v14 = __clz(__rbit64(v8));
  v8 &= v8 - 1;
  unint64_t v15 = v14 | (v11 << 6);
  while (1)
  {
    ++v12;
    int64_t v19 = (const void *)(*(void *)(a4 + 48) + 328 * v15);
    memcpy(__dst, v19, 0x141uLL);
    memmove(v10, v19, 0x141uLL);
    if (v12 == v9)
    {
      sub_186C23978((uint64_t)__dst);
      goto LABEL_38;
    }

    v10 += 328;
    uint64_t result = (void *)sub_186C23978((uint64_t)__dst);
    if (v8) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v16 = v11 + 1;
    if (__OFADD__(v11, 1LL)) {
      break;
    }
    if (v16 >= v13) {
      goto LABEL_33;
    }
    unint64_t v17 = *(void *)(v5 + 8 * v16);
    if (!v17)
    {
      v11 += 2LL;
      if (v16 + 1 >= v13)
      {
        unint64_t v8 = 0LL;
        int64_t v11 = v16;
      }

      else
      {
        unint64_t v17 = *(void *)(v5 + 8 * v11);
        if (v17) {
          goto LABEL_14;
        }
        int64_t v18 = v16 + 2;
        if (v16 + 2 >= v13) {
          goto LABEL_33;
        }
        unint64_t v17 = *(void *)(v5 + 8 * v18);
        if (v17)
        {
LABEL_17:
          int64_t v16 = v18;
          goto LABEL_18;
        }

        int64_t v11 = v16 + 3;
        if (v16 + 3 < v13)
        {
          unint64_t v17 = *(void *)(v5 + 8 * v11);
          if (v17)
          {
LABEL_14:
            int64_t v16 = v11;
            goto LABEL_18;
          }

          int64_t v18 = v16 + 4;
          if (v16 + 4 >= v13)
          {
LABEL_33:
            unint64_t v8 = 0LL;
            goto LABEL_37;
          }

          unint64_t v17 = *(void *)(v5 + 8 * v18);
          if (!v17)
          {
            while (1)
            {
              int64_t v16 = v18 + 1;
              if (__OFADD__(v18, 1LL)) {
                goto LABEL_42;
              }
              if (v16 >= v13)
              {
                unint64_t v8 = 0LL;
                int64_t v11 = v13 - 1;
                goto LABEL_37;
              }

              unint64_t v17 = *(void *)(v5 + 8 * v16);
              ++v18;
              if (v17) {
                goto LABEL_18;
              }
            }
          }

          goto LABEL_17;
        }

        unint64_t v8 = 0LL;
        int64_t v11 = v16 + 2;
      }

uint64_t sub_186C20DF4(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 56);
  if (v1)
  {
    uint64_t v2 = 0LL;
    return __clz(__rbit64(v1)) + v2;
  }

  char v5 = *(_BYTE *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  uint64_t v3 = 1LL << v5;
  if (v6 < 7) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 64);
  if (v1)
  {
    uint64_t v2 = 64LL;
    return __clz(__rbit64(v1)) + v2;
  }

  if (v6 < 8) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 72);
  if (v1)
  {
    uint64_t v2 = 128LL;
    return __clz(__rbit64(v1)) + v2;
  }

  unint64_t v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 3) {
    unint64_t v7 = 3LL;
  }
  unint64_t v8 = v7 - 3;
  uint64_t v9 = (unint64_t *)(a1 + 80);
  uint64_t v2 = 128LL;
  while (v8)
  {
    unint64_t v10 = *v9++;
    unint64_t v1 = v10;
    --v8;
    v2 += 64LL;
    if (v10) {
      return __clz(__rbit64(v1)) + v2;
    }
  }

  return v3;
}

int64_t sub_186C20E94(int64_t result, int a2, char a3, uint64_t a4)
{
  if ((a3 & 1) != 0) {
    goto LABEL_20;
  }
  unint64_t v4 = result;
  if (result < 0 || (uint64_t result = 1LL << *(_BYTE *)(a4 + 32), result <= (uint64_t)v4))
  {
    __break(1u);
    goto LABEL_18;
  }

  unint64_t v5 = v4 >> 6;
  uint64_t v6 = a4 + 56;
  unint64_t v7 = *(void *)(a4 + 56 + 8 * (v4 >> 6));
  if (((v7 >> v4) & 1) == 0)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }

  if (*(_DWORD *)(a4 + 36) != a2)
  {
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    return result;
  }

  unint64_t v8 = v7 & (-2LL << (v4 & 0x3F));
  if (v8) {
    return __clz(__rbit64(v8)) | v4 & 0xFFFFFFFFFFFFFFC0LL;
  }
  unint64_t v9 = v5 + 1;
  unint64_t v10 = (unint64_t)(result + 63) >> 6;
  if (v5 + 1 < v10)
  {
    unint64_t v11 = *(void *)(v6 + 8 * v9);
    if (v11) {
      return __clz(__rbit64(v11)) + (v9 << 6);
    }
    unint64_t v9 = v5 + 2;
    if (v5 + 2 < v10)
    {
      unint64_t v11 = *(void *)(v6 + 8 * v9);
      if (v11) {
        return __clz(__rbit64(v11)) + (v9 << 6);
      }
      while (v10 - 3 != v5)
      {
        unint64_t v11 = *(void *)(a4 + 80 + 8 * v5++);
        if (v11)
        {
          unint64_t v9 = v5 + 2;
          return __clz(__rbit64(v11)) + (v9 << 6);
        }
      }
    }
  }

  return result;
}

uint64_t sub_186C20F78@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = a1[2];
  uint64_t v4 = a1[3];
  *a2 = *a1;
  a2[1] = v2;
  a2[2] = v3;
  a2[3] = v4;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t sub_186C20FAC()
{
  void (*v14)(uint64_t *__return_ptr, void *);
  uint64_t result;
  int64_t v16;
  int64_t v17;
  uint64_t v18;
  unint64_t v19;
  int64_t v20;
  int64_t v21;
  uint64_t v22;
  void v23[4];
  uint64_t v1 = *v0;
  int64_t v3 = v0[3];
  unint64_t v2 = v0[4];
  int64_t v4 = v3;
  if (v2)
  {
    uint64_t v5 = (v2 - 1) & v2;
    unint64_t v6 = __clz(__rbit64(v2)) | (v3 << 6);
LABEL_3:
    uint64_t v7 = 16 * v6;
    unint64_t v8 = (uint64_t *)(*(void *)(v1 + 48) + 16 * v6);
    uint64_t v9 = *v8;
    uint64_t v10 = v8[1];
    unint64_t v11 = (uint64_t *)(*(void *)(v1 + 56) + v7);
    uint64_t v12 = *v11;
    uint64_t v13 = v11[1];
    v0[3] = v4;
    v0[4] = v5;
    unint64_t v14 = (void (*)(uint64_t *__return_ptr, void *))v0[5];
    v23[0] = v9;
    v23[1] = v10;
    v23[2] = v12;
    v23[3] = v13;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v14(&v22, v23);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return v22;
  }

  int64_t v16 = v3 + 1;
  if (__OFADD__(v3, 1LL))
  {
    __break(1u);
  }

  else
  {
    unint64_t v17 = (unint64_t)(v0[2] + 64) >> 6;
    if (v16 < v17)
    {
      int64_t v18 = v0[1];
      int64_t v19 = *(void *)(v18 + 8 * v16);
      if (v19)
      {
LABEL_7:
        uint64_t v5 = (v19 - 1) & v19;
        unint64_t v6 = __clz(__rbit64(v19)) + (v16 << 6);
        int64_t v4 = v16;
        goto LABEL_3;
      }

      uint64_t v20 = v3 + 2;
      int64_t v4 = v3 + 1;
      if (v3 + 2 < v17)
      {
        int64_t v19 = *(void *)(v18 + 8 * v20);
        if (v19)
        {
LABEL_10:
          int64_t v16 = v20;
          goto LABEL_7;
        }

        int64_t v4 = v3 + 2;
        if (v3 + 3 < v17)
        {
          int64_t v19 = *(void *)(v18 + 8 * (v3 + 3));
          if (v19)
          {
            int64_t v16 = v3 + 3;
            goto LABEL_7;
          }

          uint64_t v20 = v3 + 4;
          int64_t v4 = v3 + 3;
          if (v3 + 4 < v17)
          {
            int64_t v19 = *(void *)(v18 + 8 * v20);
            if (v19) {
              goto LABEL_10;
            }
            int64_t v16 = v3 + 5;
            int64_t v4 = v3 + 4;
            if (v3 + 5 < v17)
            {
              int64_t v19 = *(void *)(v18 + 8 * v16);
              if (v19) {
                goto LABEL_7;
              }
              int64_t v4 = v17 - 1;
              uint64_t v21 = v3 + 6;
              while (v17 != v21)
              {
                int64_t v19 = *(void *)(v18 + 8 * v21++);
                if (v19)
                {
                  int64_t v16 = v21 - 1;
                  goto LABEL_7;
                }
              }
            }
          }
        }
      }
    }

    uint64_t result = 0LL;
    v0[3] = v4;
    v0[4] = 0LL;
  }

  return result;
}

char *sub_186C21148(uint64_t a1)
{
  return sub_186C18D98(0LL, *(void *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_186C2115C(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000012LL && a2 == 0x8000000186C664E0LL || (sub_186C5B4F4() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0LL;
  }

  else if (a1 == 0x654D757043726570LL && a2 == 0xEF62694D79726F6DLL)
  {
    swift_bridgeObjectRelease();
    return 1LL;
  }

  else
  {
    char v5 = sub_186C5B4F4();
    swift_bridgeObjectRelease();
    if ((v5 & 1) != 0) {
      return 1LL;
    }
    else {
      return 2LL;
    }
  }

uint64_t sub_186C2126C(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C6A29F0);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1895F8858](v3);
  unint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = (uint64_t)__swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_186C0D3A4();
  sub_186C5B5E4();
  if (!v1)
  {
    char v11 = 0;
    sub_186C5B404();
    char v10 = 1;
    uint64_t v7 = sub_186C5B410();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  }

  __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
  return v7;
}

unint64_t sub_186C213C0()
{
  unint64_t result = qword_18C6A52A8;
  if (!qword_18C6A52A8)
  {
    unint64_t result = MEMORY[0x186E46630](&unk_186C60968, &type metadata for PlanSettings.KPerfAction.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_18C6A52A8);
  }

  return result;
}

unint64_t sub_186C21404()
{
  unint64_t result = qword_18C6A2670;
  if (!qword_18C6A2670)
  {
    unint64_t result = MEMORY[0x186E46630](&unk_186C5F978, &type metadata for PlanSettings.KPerfSampler);
    atomic_store(result, (unint64_t *)&qword_18C6A2670);
  }

  return result;
}

void *sub_186C21448(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C6A29D0);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1895F8858](v3);
  unint64_t v6 = (char *)v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_186C213C0();
  sub_186C5B5E4();
  if (v1)
  {
    __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
  }

  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_18C6A2660);
    sub_186C28428(&qword_18C6A29D8, &qword_18C6A2660, (uint64_t (*)(void))sub_186C2848C, MEMORY[0x189618478]);
    sub_186C5B41C();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    uint64_t v7 = (void *)v9[1];
    __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
  }

  return v7;
}

unint64_t sub_186C21594()
{
  unint64_t result = qword_18C6A52B0;
  if (!qword_18C6A52B0)
  {
    unint64_t result = MEMORY[0x186E46630](&unk_186C60918, &type metadata for PlanSettings.KPerfTimer.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_18C6A52B0);
  }

  return result;
}

uint64_t sub_186C215D8(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6E496E6F69746361LL && a2 == 0xEB00000000786564LL;
  if (v2 || (sub_186C5B4F4() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0LL;
  }

  else if (a1 == 0xD000000000000012LL && a2 == 0x8000000186C66500LL)
  {
    swift_bridgeObjectRelease();
    return 1LL;
  }

  else
  {
    char v6 = sub_186C5B4F4();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0) {
      return 1LL;
    }
    else {
      return 2LL;
    }
  }

unint64_t sub_186C216DC()
{
  unint64_t result = qword_18C6A52B8;
  if (!qword_18C6A52B8)
  {
    unint64_t result = MEMORY[0x186E46630](&unk_186C608C8, &type metadata for PlanSettings.KPerfKDebugTrigger.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_18C6A52B8);
  }

  return result;
}

uint64_t sub_186C21720(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6E496E6F69746361LL && a2 == 0xEB00000000786564LL;
  if (v2 || (sub_186C5B4F4() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0LL;
  }

  else if (a1 == 0x4665736963657270LL && a2 == 0xED00007265746C69LL)
  {
    swift_bridgeObjectRelease();
    return 1LL;
  }

  else
  {
    char v6 = sub_186C5B4F4();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0) {
      return 1LL;
    }
    else {
      return 2LL;
    }
  }

uint64_t sub_186C2184C(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C6A29C0);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1895F8858](v3);
  char v6 = &v9[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v7 = a1[3];
  __swift_project_boxed_opaque_existential_1(a1, v7);
  sub_186C216DC();
  sub_186C5B5E4();
  if (!v1)
  {
    v9[15] = 0;
    uint64_t v7 = sub_186C5B410();
    v9[14] = 1;
    sub_186C5B3EC();
    (*(void (**)(_BYTE *, uint64_t))(v4 + 8))(v6, v3);
  }

  __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
  return v7;
}

unint64_t sub_186C219A0()
{
  unint64_t result = qword_18C6A52C0;
  if (!qword_18C6A52C0)
  {
    unint64_t result = MEMORY[0x186E46630](&unk_186C60878, &type metadata for PlanSettings.KPerfPET.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_18C6A52C0);
  }

  return result;
}

unint64_t sub_186C219E4()
{
  unint64_t result = qword_18C6A2690;
  if (!qword_18C6A2690)
  {
    unint64_t result = MEMORY[0x186E46630](&unk_186C5FBA8, &type metadata for PlanSettings.KPerfPETMode);
    atomic_store(result, (unint64_t *)&qword_18C6A2690);
  }

  return result;
}

uint64_t sub_186C21A28(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 1701080941 && a2 == 0xE400000000000000LL;
  if (v2 || (sub_186C5B4F4() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0LL;
  }

  else if (a1 == 0x646E4972656D6974LL && a2 == 0xEA00000000007865LL)
  {
    swift_bridgeObjectRelease();
    return 1LL;
  }

  else
  {
    char v6 = sub_186C5B4F4();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0) {
      return 1LL;
    }
    else {
      return 2LL;
    }
  }

uint64_t sub_186C21B14(void *a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C6A29B0);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1895F8858](v2);
  uint64_t v5 = &v8[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_186C219A0();
  sub_186C5B5E4();
  v8[14] = 0;
  sub_186C283E4();
  sub_186C5B41C();
  uint64_t v6 = v8[15];
  v8[13] = 1;
  sub_186C5B410();
  (*(void (**)(_BYTE *, uint64_t))(v3 + 8))(v5, v2);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
  return v6;
}

unint64_t sub_186C21C7C()
{
  unint64_t result = qword_18C6A52C8;
  if (!qword_18C6A52C8)
  {
    unint64_t result = MEMORY[0x186E46630](&unk_186C60828, &type metadata for PlanSettings.KPerfLazyTrigger.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_18C6A52C8);
  }

  return result;
}

uint64_t sub_186C21CC0(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6E496E6F69746361LL && a2 == 0xEB00000000786564LL;
  if (v2 || (sub_186C5B4F4() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0LL;
  }

  else if (a1 == 0xD000000000000015LL && a2 == 0x8000000186C66520LL)
  {
    swift_bridgeObjectRelease();
    return 1LL;
  }

  else
  {
    char v6 = sub_186C5B4F4();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0) {
      return 1LL;
    }
    else {
      return 2LL;
    }
  }

uint64_t sub_186C21DC4(void *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t v5 = v3;
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(a2);
  uint64_t v7 = *(void *)(v13 - 8);
  MEMORY[0x1895F8858](v13);
  uint64_t v9 = (char *)&v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  a3();
  sub_186C5B5E4();
  if (!v3)
  {
    char v15 = 0;
    uint64_t v10 = v13;
    uint64_t v5 = sub_186C5B410();
    char v14 = 1;
    sub_186C5B410();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v10);
  }

  __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
  return v5;
}

unint64_t sub_186C21F24()
{
  unint64_t result = qword_18C6A52D0;
  if (!qword_18C6A52D0)
  {
    unint64_t result = MEMORY[0x186E46630](&unk_186C607D8, &type metadata for PlanSettings.ProviderEntry.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_18C6A52D0);
  }

  return result;
}

uint64_t sub_186C21F68(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 1701667182 && a2 == 0xE400000000000000LL;
  if (v2 || (sub_186C5B4F4() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0LL;
  }

  else if (a1 == 0x736E6F6974706FLL && a2 == 0xE700000000000000LL || (sub_186C5B4F4() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1LL;
  }

  else if (a1 == 0x6465726975716572LL && a2 == 0xE800000000000000LL)
  {
    swift_bridgeObjectRelease();
    return 2LL;
  }

  else
  {
    char v6 = sub_186C5B4F4();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0) {
      return 2LL;
    }
    else {
      return 3LL;
    }
  }

uint64_t sub_186C220AC(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C6A2998);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1895F8858](v3);
  char v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_186C21F24();
  sub_186C5B5E4();
  if (v1)
  {
    __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
  }

  else
  {
    char v12 = 0;
    uint64_t v7 = sub_186C5B3EC();
    __swift_instantiateConcreteTypeFromMangledName(&qword_18C6A26A8);
    char v11 = 1;
    sub_186C28384(&qword_18C6A29A0, MEMORY[0x189617FD8], MEMORY[0x189617928]);
    swift_bridgeObjectRetain();
    sub_186C5B41C();
    char v10 = 2;
    swift_bridgeObjectRetain();
    uint64_t v9 = 0LL;
    sub_186C5B3F8();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }

  return v7;
}

uint64_t sub_186C222FC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t result = sub_186C5AF78();
  uint64_t v8 = result;
  if (v2)
  {
    uint64_t v4 = (uint64_t *)(a1 + 40);
    do
    {
      uint64_t v5 = *(v4 - 1);
      uint64_t v6 = *v4;
      swift_bridgeObjectRetain();
      sub_186C18EB0(&v7, v5, v6);
      swift_bridgeObjectRelease();
      v4 += 2;
      --v2;
    }

    while (v2);
    return v8;
  }

  return result;
}

uint64_t sub_186C22390(uint64_t result, int a2, uint64_t a3, uint64_t a4)
{
  if (result < 0 || 1LL << *(_BYTE *)(a4 + 32) <= result)
  {
    __break(1u);
    goto LABEL_7;
  }

  if (((*(void *)(a4 + (((unint64_t)result >> 3) & 0xFFFFFFFFFFFFF8LL) + 56) >> result) & 1) == 0)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }

  if (*(_DWORD *)(a4 + 36) == a2) {
    return *(void *)(*(void *)(a4 + 48) + 16 * result);
  }
LABEL_8:
  __break(1u);
  return result;
}

uint64_t sub_186C223E8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  sub_186C28340();
  uint64_t result = sub_186C5AF78();
  uint64_t v7 = result;
  if (v2)
  {
    uint64_t v4 = (unsigned __int8 *)(a1 + 32);
    do
    {
      unsigned int v5 = *v4++;
      sub_186C1905C(&v6, v5);
      --v2;
    }

    while (v2);
    return v7;
  }

  return result;
}

unint64_t sub_186C22458()
{
  unint64_t result = qword_18C6A2700;
  if (!qword_18C6A2700)
  {
    unint64_t result = MEMORY[0x186E46630](&unk_186C5FDA0, &type metadata for PlanSettings.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_18C6A2700);
  }

  return result;
}

unint64_t sub_186C2249C()
{
  unint64_t result = qword_18C6A2708;
  if (!qword_18C6A2708)
  {
    unint64_t result = MEMORY[0x186E46630](&unk_186C5F888, &type metadata for KDebugBufferSize);
    atomic_store(result, (unint64_t *)&qword_18C6A2708);
  }

  return result;
}

unint64_t sub_186C224E0()
{
  unint64_t result = qword_18C6A2720;
  if (!qword_18C6A2720)
  {
    unint64_t result = MEMORY[0x186E46630](&unk_186C5F9C8, &type metadata for PlanSettings.KPerfAction);
    atomic_store(result, (unint64_t *)&qword_18C6A2720);
  }

  return result;
}

unint64_t sub_186C22524()
{
  unint64_t result = qword_18C6A2738;
  if (!qword_18C6A2738)
  {
    unint64_t result = MEMORY[0x186E46630](&unk_186C5FA18, &type metadata for PlanSettings.KPerfTimer);
    atomic_store(result, (unint64_t *)&qword_18C6A2738);
  }

  return result;
}

unint64_t sub_186C22568()
{
  unint64_t result = qword_18C6A2740;
  if (!qword_18C6A2740)
  {
    unint64_t result = MEMORY[0x186E46630](&unk_186C5FAB8, &type metadata for PlanSettings.KPerfPET);
    atomic_store(result, (unint64_t *)&qword_18C6A2740);
  }

  return result;
}

unint64_t sub_186C225AC()
{
  unint64_t result = qword_18C6A2758;
  if (!qword_18C6A2758)
  {
    unint64_t result = MEMORY[0x186E46630](&unk_186C5FA68, &type metadata for PlanSettings.KPerfKDebugTrigger);
    atomic_store(result, (unint64_t *)&qword_18C6A2758);
  }

  return result;
}

unint64_t sub_186C225F0()
{
  unint64_t result = qword_18C6A2760;
  if (!qword_18C6A2760)
  {
    unint64_t result = MEMORY[0x186E46630](&unk_186C5FC60, &type metadata for PlanSettings.KPerfLazyTrigger);
    atomic_store(result, (unint64_t *)&qword_18C6A2760);
  }

  return result;
}

unint64_t sub_186C22634()
{
  unint64_t result = qword_18C6A2778;
  if (!qword_18C6A2778)
  {
    unint64_t result = MEMORY[0x186E46630](&unk_186C5FCB0, &type metadata for PlanSettings.ProviderEntry);
    atomic_store(result, (unint64_t *)&qword_18C6A2778);
  }

  return result;
}

uint64_t sub_186C22678@<X0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v52 = a2;
  uint64_t v54 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C6A2910);
  uint64_t v4 = *(void *)(v54 - 8);
  MEMORY[0x1895F8858](v54);
  char v6 = (char *)&v46 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  char v104 = 1;
  char v101 = 1;
  char v99 = 1;
  uint64_t v7 = sub_186BED614();
  unint64_t v9 = v8;
  uint64_t v10 = a1[3];
  uint64_t v55 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v10);
  sub_186BF06B0(v7, v9);
  sub_186C22458();
  uint64_t v53 = v6;
  sub_186C5B5E4();
  unint64_t v105 = v9;
  if (v2)
  {
    uint64_t v61 = v2;
    sub_186BF06F4(v7, v9);
    __int128 v56 = 0uLL;
    __int128 v57 = 0uLL;
    uint64_t v58 = 0LL;
    uint64_t v59 = 0LL;
    uint64_t v63 = 0LL;
    uint64_t v11 = 0LL;
    uint64_t v12 = 0LL;
    uint64_t v13 = 0LL;
    uint64_t v14 = 2LL;
    uint64_t v15 = MEMORY[0x18961AFE8];
    uint64_t v60 = MEMORY[0x18961AFE8];
    uint64_t v62 = MEMORY[0x18961AFE8];
    char v16 = 2;
    uint64_t v17 = 0LL;
LABEL_4:
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v55);
    *(void *)&__int128 v76 = v13;
    *((void *)&v76 + 1) = v12;
    unsigned __int8 v77 = v104;
    *(_DWORD *)__int128 v78 = *(_DWORD *)v103;
    *(_DWORD *)&v78[3] = *(_DWORD *)&v103[3];
    uint64_t v79 = v59;
    *(void *)&unsigned __int128 v80 = v17;
    *((void *)&v80 + 1) = v11;
    uint64_t v81 = v63;
    char v82 = v16;
    *(_DWORD *)unint64_t v83 = *(_DWORD *)v102;
    *(_DWORD *)&v83[3] = *(_DWORD *)&v102[3];
    uint64_t v84 = v62;
    uint64_t v85 = v60;
    uint64_t v86 = v14;
    uint64_t v87 = v58;
    uint64_t v88 = v15;
    __int128 v89 = v57;
    char v90 = v101;
    *(_DWORD *)unint64_t v91 = *(_DWORD *)v100;
    *(_DWORD *)&v91[3] = *(_DWORD *)&v100[3];
    __int128 v92 = v56;
    char v93 = v99;
    *(_DWORD *)uint64_t v94 = *(_DWORD *)v98;
    *(_DWORD *)&v94[3] = *(_DWORD *)&v98[3];
    uint64_t v95 = 0LL;
    uint64_t v96 = v7;
    unint64_t v97 = v105;
    return sub_186C254CC((uint64_t)&v76);
  }

  int64_t v18 = v52;
  LOBYTE(v64) = 0;
  sub_186C28164();
  int64_t v19 = v53;
  sub_186C5B3E0();
  __int128 v51 = v76;
  int v20 = v77;
  char v104 = v77;
  LOBYTE(v76) = 1;
  uint64_t v21 = sub_186C5B3C8();
  uint64_t v23 = v22;
  int v50 = v20;
  LOBYTE(v76) = 2;
  swift_bridgeObjectRetain();
  uint64_t v24 = sub_186C5B3C8();
  uint64_t v59 = v21;
  uint64_t v27 = v26;
  *(void *)&__int128 v49 = v23;
  *((void *)&v49 + 1) = v24;
  LOBYTE(v76) = 3;
  swift_bridgeObjectRetain();
  int v28 = sub_186C5B3D4();
  uint64_t v63 = v27;
  int v48 = v28;
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C6A2710);
  LOBYTE(v64) = 4;
  sub_186C28428(&qword_18C6A2920, &qword_18C6A2710, (uint64_t (*)(void))sub_186C281A8, MEMORY[0x189618478]);
  sub_186C5B3E0();
  uint64_t v29 = v76;
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C6A2728);
  LOBYTE(v64) = 5;
  sub_186C28428(&qword_18C6A2930, &qword_18C6A2728, (uint64_t (*)(void))sub_186C281EC, MEMORY[0x189618478]);
  swift_bridgeObjectRetain();
  sub_186C5B3E0();
  uint64_t v62 = v29;
  uint64_t v30 = v76;
  LOBYTE(v64) = 6;
  sub_186C28230();
  swift_bridgeObjectRetain();
  sub_186C5B3E0();
  uint64_t v60 = v30;
  uint64_t v58 = *((void *)&v76 + 1);
  uint64_t v47 = v76;
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C6A2748);
  LOBYTE(v64) = 7;
  sub_186C28428(&qword_18C6A2948, &qword_18C6A2748, (uint64_t (*)(void))sub_186C28274, MEMORY[0x189618478]);
  sub_186C5B3E0();
  uint64_t v61 = 0LL;
  uint64_t v15 = v76;
  LOBYTE(v64) = 8;
  sub_186C282B8();
  swift_bridgeObjectRetain();
  uint64_t v31 = v54;
  uint64_t v32 = v61;
  sub_186C5B3E0();
  uint64_t v61 = v32;
  if (v32)
  {
    (*(void (**)(char *, uint64_t))(v4 + 8))(v19, v31);
    sub_186BF06F4(v7, v105);
    uint64_t v17 = v49;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    __int128 v56 = 0uLL;
    __int128 v57 = 0uLL;
LABEL_9:
    uint64_t v12 = *((void *)&v51 + 1);
    uint64_t v13 = v51;
    uint64_t v11 = *((void *)&v49 + 1);
    char v16 = v48;
    uint64_t v14 = v47;
    goto LABEL_4;
  }

  __int128 v57 = v76;
  unsigned __int8 v33 = v77;
  char v101 = v77;
  LOBYTE(v64) = 9;
  sub_186C5B3E0();
  uint64_t v61 = 0LL;
  __int128 v56 = v76;
  HIDWORD(v46) = v77;
  char v99 = v77;
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C6A2768);
  char v74 = 10;
  sub_186C28428(&qword_18C6A2960, &qword_18C6A2768, (uint64_t (*)(void))sub_186C282FC, MEMORY[0x189618478]);
  uint64_t v34 = v61;
  sub_186C5B3E0();
  uint64_t v61 = v34;
  if (v34)
  {
    (*(void (**)(char *, uint64_t))(v4 + 8))(v53, v54);
    sub_186BF06F4(v7, v105);
    uint64_t v17 = v49;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_9;
  }

  (*(void (**)(char *, uint64_t))(v4 + 8))(v53, v54);
  uint64_t v35 = v75;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  __int128 v64 = v51;
  LOBYTE(v65) = v50;
  uint64_t v36 = v60;
  unint64_t v37 = v49;
  *((void *)&v65 + 1) = v59;
  __int128 v66 = v49;
  uint64_t v38 = v63;
  *(void *)&__int128 v67 = v63;
  BYTE8(v67) = v48;
  *(void *)&__int128 v68 = v62;
  *((void *)&v68 + 1) = v60;
  *(void *)&__int128 v69 = v47;
  *((void *)&v69 + 1) = v58;
  *(void *)uint64_t v70 = v15;
  *(_OWORD *)&v70[8] = v57;
  v70[24] = v33;
  __int128 v71 = v56;
  LOBYTE(v72) = BYTE4(v46);
  *((void *)&v72 + 1) = v35;
  *(void *)&__int128 v73 = v7;
  unint64_t v39 = v105;
  *((void *)&v73 + 1) = v105;
  sub_186C255F8((uint64_t)&v64);
  sub_186BF06F4(v7, v39);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v40 = v62;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v55);
  __int128 v76 = v51;
  unsigned __int8 v77 = v104;
  *(_DWORD *)__int128 v78 = *(_DWORD *)v103;
  *(_DWORD *)&v78[3] = *(_DWORD *)&v103[3];
  uint64_t v79 = v59;
  unsigned __int128 v80 = __PAIR128__(*((unint64_t *)&v49 + 1), v37);
  uint64_t v81 = v38;
  char v82 = v48;
  *(_DWORD *)unint64_t v83 = *(_DWORD *)v102;
  *(_DWORD *)&v83[3] = *(_DWORD *)&v102[3];
  uint64_t v84 = v40;
  uint64_t v85 = v36;
  uint64_t v86 = v47;
  uint64_t v87 = v58;
  uint64_t v88 = v15;
  __int128 v89 = v57;
  char v90 = v101;
  *(_DWORD *)unint64_t v91 = *(_DWORD *)v100;
  *(_DWORD *)&v91[3] = *(_DWORD *)&v100[3];
  __int128 v92 = v56;
  char v93 = v99;
  *(_DWORD *)uint64_t v94 = *(_DWORD *)v98;
  *(_DWORD *)&v94[3] = *(_DWORD *)&v98[3];
  uint64_t v95 = v35;
  uint64_t v96 = v7;
  unint64_t v97 = v105;
  uint64_t result = sub_186C254CC((uint64_t)&v76);
  __int128 v41 = v72;
  _BYTE v18[8] = v71;
  v18[9] = v41;
  v18[10] = v73;
  __int128 v42 = v69;
  v18[4] = v68;
  v18[5] = v42;
  __int128 v43 = *(_OWORD *)&v70[16];
  v18[6] = *(_OWORD *)v70;
  v18[7] = v43;
  __int128 v44 = v65;
  *int64_t v18 = v64;
  v18[1] = v44;
  __int128 v45 = v67;
  v18[2] = v66;
  v18[3] = v45;
  return result;
}

unint64_t sub_186C231B8()
{
  unint64_t result = qword_18C6A52D8[0];
  if (!qword_18C6A52D8[0])
  {
    unint64_t result = MEMORY[0x186E46630](&unk_186C60788, &type metadata for PlanLayer.CodingKeys);
    atomic_store(result, qword_18C6A52D8);
  }

  return result;
}

unint64_t sub_186C231FC()
{
  unint64_t result = qword_18C6A2798;
  if (!qword_18C6A2798)
  {
    unint64_t result = MEMORY[0x186E46630](&unk_186C5FE68, &type metadata for PlanSettings);
    atomic_store(result, (unint64_t *)&qword_18C6A2798);
  }

  return result;
}

uint64_t sub_186C23240(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x73657361696C61LL && a2 == 0xE700000000000000LL;
  if (v2 || (sub_186C5B4F4() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0LL;
  }

  else if (a1 == 0x736973706F6E7973LL && a2 == 0xE800000000000000LL || (sub_186C5B4F4() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1LL;
  }

  else if (a1 == 0x73676E6974746573LL && a2 == 0xE800000000000000LL)
  {
    swift_bridgeObjectRelease();
    return 2LL;
  }

  else
  {
    char v6 = sub_186C5B4F4();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0) {
      return 2LL;
    }
    else {
      return 3LL;
    }
  }

uint64_t sub_186C23394@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C6A2908);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1895F8858](v5);
  unint64_t v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v61 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v9);
  sub_186C231B8();
  sub_186C5B5E4();
  if (v2)
  {
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v61);
    return swift_bridgeObjectRelease();
  }

  else
  {
    uint64_t v10 = v6;
    uint64_t v23 = a2;
    __swift_instantiateConcreteTypeFromMangledName(&qword_18C6A21A8);
    LOBYTE(v24) = 0;
    sub_186C25554(&qword_18C6A2808, MEMORY[0x189617FD8], MEMORY[0x189618478]);
    sub_186C5B3E0();
    uint64_t v11 = v26[0];
    LOBYTE(v26[0]) = 1;
    swift_bridgeObjectRetain();
    uint64_t v12 = sub_186C5B3EC();
    uint64_t v14 = v13;
    char v38 = 2;
    sub_186C255B4();
    swift_bridgeObjectRetain();
    sub_186C5B41C();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v8, v5);
    *(_OWORD *)&v25[120] = v46;
    *(_OWORD *)&v25[136] = v47;
    *(_OWORD *)&v25[152] = v48;
    *(_OWORD *)&v25[168] = v49;
    *(_OWORD *)&v25[56] = v42;
    *(_OWORD *)&v25[72] = v43;
    *(_OWORD *)&v25[88] = v44;
    *(_OWORD *)&v25[104] = v45;
    *(_OWORD *)&v25[8] = v39;
    *(_OWORD *)&v25[24] = v40;
    *(_OWORD *)&v25[40] = v41;
    __int128 v58 = v47;
    __int128 v59 = v48;
    __int128 v60 = v49;
    __int128 v54 = v43;
    __int128 v55 = v44;
    __int128 v56 = v45;
    __int128 v57 = v46;
    __int128 v50 = v39;
    __int128 v51 = v40;
    __int128 v52 = v41;
    __int128 v53 = v42;
    *(void *)&__int128 v24 = v11;
    *((void *)&v24 + 1) = v12;
    *(void *)uint64_t v25 = v14;
    sub_186C24F18((uint64_t)&v24);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v61);
    __int128 v34 = v57;
    __int128 v35 = v58;
    __int128 v36 = v59;
    __int128 v37 = v60;
    __int128 v30 = v53;
    __int128 v31 = v54;
    __int128 v32 = v55;
    __int128 v33 = v56;
    __int128 v27 = v50;
    __int128 v28 = v51;
    v26[0] = v11;
    v26[1] = v12;
    v26[2] = v14;
    __int128 v29 = v52;
    uint64_t result = sub_186C24FC0((uint64_t)v26);
    __int128 v16 = *(_OWORD *)&v25[160];
    uint64_t v17 = v23;
    *(_OWORD *)(v23 + 160) = *(_OWORD *)&v25[144];
    *(_OWORD *)(v17 + 176) = v16;
    *(void *)(v17 + 192) = *(void *)&v25[176];
    __int128 v18 = *(_OWORD *)&v25[96];
    *(_OWORD *)(v17 + 96) = *(_OWORD *)&v25[80];
    *(_OWORD *)(v17 + 112) = v18;
    __int128 v19 = *(_OWORD *)&v25[128];
    *(_OWORD *)(v17 + 128) = *(_OWORD *)&v25[112];
    *(_OWORD *)(v17 + 144) = v19;
    __int128 v20 = *(_OWORD *)&v25[32];
    *(_OWORD *)(v17 + 32) = *(_OWORD *)&v25[16];
    *(_OWORD *)(v17 + 48) = v20;
    __int128 v21 = *(_OWORD *)&v25[64];
    *(_OWORD *)(v17 + 64) = *(_OWORD *)&v25[48];
    *(_OWORD *)(v17 + 80) = v21;
    __int128 v22 = *(_OWORD *)v25;
    *(_OWORD *)uint64_t v17 = v24;
    *(_OWORD *)(v17 + 16) = v22;
  }

  return result;
}

uint64_t sub_186C2372C()
{
  unint64_t v0 = sub_186C5B3BC();
  swift_bridgeObjectRelease();
  if (v0 >= 0xB) {
    return 11LL;
  }
  else {
    return v0;
  }
}

void *sub_186C23770(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2) {
    return (void *)MEMORY[0x18961AFE8];
  }
  uint64_t v3 = *(void *)(a2 + 296);
  uint64_t v4 = (uint64_t *)(swift_bridgeObjectRetain() + 40);
  uint64_t v5 = (void *)MEMORY[0x18961AFE8];
  do
  {
    if (*(void *)(v3 + 16))
    {
      uint64_t v7 = *(v4 - 1);
      uint64_t v6 = *v4;
      swift_bridgeObjectRetain_n();
      unint64_t v8 = sub_186BF8278(v7, v6);
      if ((v9 & 1) != 0)
      {
        uint64_t v10 = *(void *)(v3 + 56) + 200 * v8;
        __int128 v37 = *(_OWORD *)v10;
        __int128 v11 = *(_OWORD *)(v10 + 48);
        __int128 v12 = *(_OWORD *)(v10 + 64);
        __int128 v13 = *(_OWORD *)(v10 + 32);
        __int128 v38 = *(_OWORD *)(v10 + 16);
        __int128 v39 = v13;
        __int128 v40 = v11;
        __int128 v41 = v12;
        __int128 v14 = *(_OWORD *)(v10 + 80);
        __int128 v15 = *(_OWORD *)(v10 + 96);
        __int128 v16 = *(_OWORD *)(v10 + 128);
        __int128 v44 = *(_OWORD *)(v10 + 112);
        __int128 v45 = v16;
        __int128 v42 = v14;
        __int128 v43 = v15;
        __int128 v17 = *(_OWORD *)(v10 + 144);
        __int128 v18 = *(_OWORD *)(v10 + 160);
        __int128 v19 = *(_OWORD *)(v10 + 176);
        uint64_t v49 = *(void *)(v10 + 192);
        __int128 v47 = v18;
        __int128 v48 = v19;
        __int128 v46 = v17;
        sub_186C24F18((uint64_t)&v37);
        swift_bridgeObjectRelease();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v5 = sub_186C1CF2C(0LL, v5[2] + 1LL, 1, v5);
        }
        unint64_t v21 = v5[2];
        unint64_t v20 = v5[3];
        if (v21 >= v20 >> 1) {
          uint64_t v5 = sub_186C1CF2C((void *)(v20 > 1), v21 + 1, 1, v5);
        }
        __int128 v26 = v39;
        __int128 v27 = v40;
        __int128 v30 = v43;
        __int128 v31 = v44;
        __int128 v28 = v41;
        __int128 v29 = v42;
        uint64_t v36 = v49;
        __int128 v34 = v47;
        __int128 v35 = v48;
        __int128 v32 = v45;
        __int128 v33 = v46;
        __int128 v24 = v37;
        __int128 v25 = v38;
        v5[2] = v21 + 1;
        __int128 v22 = &v5[27 * v21];
        v22[4] = v7;
        v22[5] = v6;
        *((_OWORD *)v22 + 3) = v24;
        *((_OWORD *)v22 + 6) = v27;
        *((_OWORD *)v22 + 7) = v28;
        *((_OWORD *)v22 + 4) = v25;
        *((_OWORD *)v22 + 5) = v26;
        *((_OWORD *)v22 + 10) = v31;
        *((_OWORD *)v22 + 11) = v32;
        *((_OWORD *)v22 + 8) = v29;
        *((_OWORD *)v22 + 9) = v30;
        v22[30] = v36;
        *((_OWORD *)v22 + 13) = v34;
        *((_OWORD *)v22 + 14) = v35;
        *((_OWORD *)v22 + 12) = v33;
      }

      else
      {
        swift_bridgeObjectRelease_n();
      }
    }

    v4 += 2;
    --v2;
  }

  while (v2);
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t sub_186C23978(uint64_t a1)
{
  unint64_t v3 = *(void *)(a1 + 280);
  uint64_t v4 = *(void *)(a1 + 272);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_186BF06B0(v4, v3);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_186C23A98(uint64_t a1)
{
  unint64_t v3 = *(void *)(a1 + 280);
  uint64_t v4 = *(void *)(a1 + 272);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_186BF06F4(v4, v3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

unint64_t sub_186C23BB4()
{
  unint64_t result = qword_18C6A27A0;
  if (!qword_18C6A27A0)
  {
    unint64_t result = MEMORY[0x186E46630](&unk_186C60020, &type metadata for Plan);
    atomic_store(result, (unint64_t *)&qword_18C6A27A0);
  }

  return result;
}

uint64_t sub_186C23BF8(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 16);
  if (v1 >= 0xFFFFFFFF) {
    LODWORD(v1) = -1;
  }
  return (v1 + 1);
}

uint64_t sub_186C23C10(uint64_t a1, uint64_t a2)
{
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_186C5E4F0;
  uint64_t v5 = MEMORY[0x18961AFE8];
  *(void *)(inited + 32) = a2;
  *(void *)(inited + 40) = v5;
  uint64_t v6 = *(void *)(a1 + 16);
  if (v6)
  {
    swift_bridgeObjectRetain();
    uint64_t v7 = (uint64_t *)(a1 + 40);
    do
    {
      uint64_t v10 = *(v7 - 1);
      uint64_t v9 = *v7;
      uint64_t v11 = *(void *)(inited + 16);
      uint64_t result = swift_bridgeObjectRetain();
      if (!v11)
      {
        __break(1u);
LABEL_38:
        __break(1u);
LABEL_39:
        __break(1u);
LABEL_40:
        __break(1u);
LABEL_41:
        __break(1u);
LABEL_42:
        __break(1u);
LABEL_43:
        __break(1u);
LABEL_44:
        __break(1u);
LABEL_45:
        __break(1u);
        return result;
      }

      uint64_t v13 = *(void *)(inited + 16 * v11 + 16);
      swift_bridgeObjectRetain();
      uint64_t v14 = sub_186C5ADB0();
      uint64_t result = swift_bridgeObjectRelease();
      uint64_t v15 = v13 + v14;
      if (__OFADD__(v13, v14)) {
        goto LABEL_38;
      }
      BOOL v16 = __OFADD__(v15, 2LL);
      uint64_t v17 = v15 + 2;
      if (v16) {
        goto LABEL_39;
      }
      if (v17 < 81)
      {
        unint64_t v22 = *(void *)(inited + 16);
        uint64_t result = sub_186C5ADB0();
        uint64_t v23 = result + 2;
        if (__OFADD__(result, 2LL)) {
          goto LABEL_41;
        }
        uint64_t result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) != 0)
        {
          if (!v22) {
            goto LABEL_45;
          }
        }

        else
        {
          uint64_t result = (uint64_t)sub_186C1CAF4((void *)inited);
          uint64_t inited = result;
          if (!v22) {
            goto LABEL_45;
          }
        }

        if (v22 > *(void *)(inited + 16)) {
          goto LABEL_42;
        }
        __int128 v24 = (void *)(inited + 32 + 16 * (v22 - 1));
        if (__OFADD__(*v24, v23)) {
          goto LABEL_43;
        }
        *v24 += v23;
        uint64_t v25 = *(void *)(inited + 16);
        uint64_t result = swift_bridgeObjectRetain();
        if (!v25) {
          goto LABEL_44;
        }
        uint64_t v26 = inited + 32 + 16 * v25;
        __int128 v29 = *(char **)(v26 - 8);
        __int128 v28 = (char **)(v26 - 8);
        __int128 v27 = v29;
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *__int128 v28 = v29;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          __int128 v27 = sub_186C01C3C(0LL, *((void *)v27 + 2) + 1LL, 1, v27);
          *__int128 v28 = v27;
        }

        unint64_t v32 = *((void *)v27 + 2);
        unint64_t v31 = *((void *)v27 + 3);
        if (v32 >= v31 >> 1)
        {
          __int128 v27 = sub_186C01C3C((char *)(v31 > 1), v32 + 1, 1, v27);
          *__int128 v28 = v27;
        }

        *((void *)v27 + 2) = v32 + 1;
        __int128 v33 = &v27[16 * v32];
        *((void *)v33 + 4) = v10;
        *((void *)v33 + 5) = v9;
      }

      else
      {
        uint64_t result = sub_186C5ADB0();
        uint64_t v18 = result + 2;
        if (__OFADD__(result, 2LL)) {
          goto LABEL_40;
        }
        __swift_instantiateConcreteTypeFromMangledName(&qword_18C6A21C0);
        uint64_t v19 = swift_allocObject();
        *(_OWORD *)(v19 + 16) = xmmword_186C5E4F0;
        *(void *)(v19 + 32) = v10;
        *(void *)(v19 + 40) = v9;
        swift_bridgeObjectRetain();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t inited = (uint64_t)sub_186C1D068(0LL, *(void *)(inited + 16) + 1LL, 1, (void *)inited);
        }
        unint64_t v21 = *(void *)(inited + 16);
        unint64_t v20 = *(void *)(inited + 24);
        if (v21 >= v20 >> 1) {
          uint64_t inited = (uint64_t)sub_186C1D068((void *)(v20 > 1), v21 + 1, 1, (void *)inited);
        }
        *(void *)(inited + 16) = v21 + 1;
        uint64_t v8 = inited + 16 * v21;
        *(void *)(v8 + 32) = v18;
        *(void *)(v8 + 40) = v19;
      }

      v7 += 2;
      swift_bridgeObjectRelease();
      --v6;
    }

    while (v6);
    swift_bridgeObjectRelease();
    int64_t v34 = *(void *)(inited + 16);
    if (v34)
    {
      uint64_t v5 = MEMORY[0x18961AFE8];
      goto LABEL_30;
    }

    swift_bridgeObjectRelease();
    return MEMORY[0x18961AFE8];
  }

  else
  {
    int64_t v34 = 1LL;
LABEL_30:
    uint64_t v43 = v5;
    sub_186BEF8C8(0LL, v34, 0);
    uint64_t v35 = 40LL;
    uint64_t v36 = v43;
    do
    {
      swift_bridgeObjectRetain();
      __swift_instantiateConcreteTypeFromMangledName(&qword_18C6A21A8);
      sub_186C253C0((unint64_t *)&qword_18C6A21B0, &qword_18C6A21A8, MEMORY[0x189618458]);
      uint64_t v37 = sub_186C5ACD8();
      uint64_t v39 = v38;
      swift_bridgeObjectRelease();
      unint64_t v41 = *(void *)(v43 + 16);
      unint64_t v40 = *(void *)(v43 + 24);
      if (v41 >= v40 >> 1) {
        sub_186BEF8C8((char *)(v40 > 1), v41 + 1, 1);
      }
      *(void *)(v43 + 16) = v41 + 1;
      uint64_t v42 = v43 + 16 * v41;
      *(void *)(v42 + 32) = v37;
      *(void *)(v42 + 40) = v39;
      v35 += 16LL;
      --v34;
    }

    while (v34);
    swift_bridgeObjectRelease();
  }

  return v36;
}

char *sub_186C23FEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3) {
    return (char *)MEMORY[0x18961AFE8];
  }
  uint64_t v4 = swift_bridgeObjectRetain() + 48;
  uint64_t v5 = (char *)MEMORY[0x18961AFE8];
  do
  {
    uint64_t v7 = *(void *)v4;
    if (*(void *)(*(void *)v4 + 16LL))
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v8 = sub_186C5ADB0();
      sub_186C23C10(v7, v8);
      sub_186C5ADD4();
      uint64_t v9 = sub_186C5ADB0();
      MEMORY[0x186E44860](32LL, 0xE100000000000000LL, v9);
      sub_186C5ADD4();
      swift_bridgeObjectRelease();
      __swift_instantiateConcreteTypeFromMangledName(&qword_18C6A21A8);
      sub_186C253C0((unint64_t *)&qword_18C6A21B0, &qword_18C6A21A8, MEMORY[0x189618458]);
      sub_186C5ACD8();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      sub_186C5ADD4();
      sub_186C5ADD4();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v5 = sub_186C01C3C(0LL, *((void *)v5 + 2) + 1LL, 1, v5);
      }
      unint64_t v11 = *((void *)v5 + 2);
      unint64_t v10 = *((void *)v5 + 3);
      if (v11 >= v10 >> 1) {
        uint64_t v5 = sub_186C01C3C((char *)(v10 > 1), v11 + 1, 1, v5);
      }
      *((void *)v5 + 2) = v11 + 1;
      uint64_t v6 = &v5[16 * v11];
      *((void *)v6 + 4) = a2;
      *((void *)v6 + 5) = a3;
    }

    v4 += 24LL;
    --v3;
  }

  while (v3);
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t sub_186C24234(uint64_t a1, uint64_t a2, int a3, uint64_t *a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C6A2200);
  MEMORY[0x1895F8858](v10);
  __int128 v12 = (uint64_t *)((char *)&v81 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v85 = a2;
  uint64_t v86 = a1;
  sub_186BF1744(a1, a2, a3, v12);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  uint64_t v14 = *v12;
  if (EnumCaseMultiPayload == 1)
  {
    sub_186BFADAC(*v12, v12[1], v12[2], v12[3], *((_BYTE *)v12 + 32));
    return 0LL;
  }

  uint64_t v16 = v12[1];
  uint64_t v84 = (char *)v12 + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_18C6A2208) + 48);
  uint64_t v17 = *a4;
  if (!*(void *)(*a4 + 16))
  {
    swift_bridgeObjectRelease();
LABEL_40:
    uint64_t v69 = sub_186C5AA8C();
    uint64_t v70 = *(void (**)(char *, uint64_t))(*(void *)(v69 - 8) + 8LL);
    swift_bridgeObjectRetain();
    v70(v84, v69);
    return v86;
  }

  swift_bridgeObjectRetain();
  unint64_t v18 = sub_186BF8278(v14, v16);
  if ((v19 & 1) == 0)
  {
    swift_bridgeObjectRelease_n();
    goto LABEL_40;
  }

  uint64_t v20 = v14;
  uint64_t v21 = v16;
  uint64_t v22 = *(void *)(*(void *)(v17 + 56) + 8 * v18);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  uint64_t v82 = v20;
  sub_186C1DC64(v20, v21);
  uint64_t v83 = v21;
  swift_bridgeObjectRelease();
  uint64_t v23 = swift_bridgeObjectRelease();
  int64_t v24 = 0LL;
  uint64_t v25 = *(void *)(v22 + 56);
  uint64_t v87 = v22 + 56;
  uint64_t v89 = v22;
  uint64_t v26 = 1LL << *(_BYTE *)(v22 + 32);
  uint64_t v27 = -1LL;
  if (v26 < 64) {
    uint64_t v27 = ~(-1LL << v26);
  }
  unint64_t v28 = v27 & v25;
  __int128 v29 = (void *)MEMORY[0x18961AFF0];
  int64_t v88 = (unint64_t)(v26 + 63) >> 6;
  if ((v27 & v25) == 0) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v30 = __clz(__rbit64(v28));
  uint64_t v31 = (v28 - 1) & v28;
  for (unint64_t i = v30 | (v24 << 6); ; unint64_t i = __clz(__rbit64(v34)) + (v24 << 6))
  {
    uint64_t v36 = (uint64_t *)(*(void *)(v89 + 48) + 16 * i);
    uint64_t v37 = *v36;
    unint64_t v38 = v36[1];
    uint64_t v95 = 61LL;
    unint64_t v96 = 0xE100000000000000LL;
    MEMORY[0x1895F8858](v23);
    *(&v81 - 2) = (uint64_t)&v95;
    swift_bridgeObjectRetain_n();
    uint64_t v39 = sub_186BEE808(1LL, 1, sub_186BF0738, (uint64_t)(&v81 - 4), v37, v38);
    swift_bridgeObjectRelease();
    if (!*((void *)v39 + 2))
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      type metadata accessor for KTraceRecordError();
      sub_186BF0CD4();
      swift_allocError();
      uint64_t v72 = v71;
      uint64_t v95 = v82;
      unint64_t v96 = v83;
      sub_186C5ADD4();
      sub_186C5ADD4();
      swift_bridgeObjectRelease();
      unint64_t v73 = v96;
      *(void *)uint64_t v72 = v95;
      *(void *)(v72 + 8) = v73;
      *(_BYTE *)(v72 + 16) = 0;
LABEL_43:
      swift_storeEnumTagMultiPayload();
      swift_willThrow();
      swift_release();
      uint64_t v80 = sub_186C5AA8C();
      return (*(uint64_t (**)(char *, uint64_t))(*(void *)(v80 - 8) + 8LL))(v84, v80);
    }

    uint64_t v91 = v5;
    uint64_t v97 = *((void *)v39 + 4);
    uint64_t v40 = *((void *)v39 + 5);
    uint64_t v41 = *((void *)v39 + 7);
    uint64_t v93 = *((void *)v39 + 6);
    uint64_t v94 = v40;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    unint64_t v42 = *((void *)v39 + 2);
    int64_t v90 = v24;
    unint64_t v92 = v31;
    if (v42 > 1)
    {
      uint64_t v43 = *((void *)v39 + 8);
      uint64_t v45 = *((void *)v39 + 9);
      uint64_t v47 = *((void *)v39 + 10);
      uint64_t v49 = *((void *)v39 + 11);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }

    else
    {
      swift_bridgeObjectRelease();
      uint64_t v43 = MEMORY[0x186E44AC4](0LL, 0xE000000000000000LL);
      uint64_t v45 = v44;
      uint64_t v47 = v46;
      uint64_t v49 = v48;
    }

    uint64_t v50 = MEMORY[0x186E4477C](v43, v45, v47, v49);
    uint64_t v52 = v51;
    swift_bridgeObjectRelease();
    uint64_t v53 = MEMORY[0x186E4477C](v97, v94, v93, v41);
    uint64_t v55 = v54;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v95 = (uint64_t)v29;
    unint64_t v58 = sub_186BF8278(v53, v55);
    uint64_t v59 = v29[2];
    BOOL v60 = (v57 & 1) == 0;
    uint64_t v61 = v59 + v60;
    if (__OFADD__(v59, v60)) {
      break;
    }
    char v62 = v57;
    if (v29[3] >= v61)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
        sub_186C1C4F0();
      }
    }

    else
    {
      sub_186C1BC80(v61, isUniquelyReferenced_nonNull_native);
      unint64_t v63 = sub_186BF8278(v53, v55);
      if ((v62 & 1) != (v64 & 1)) {
        goto LABEL_49;
      }
      unint64_t v58 = v63;
    }

    unint64_t v28 = v92;
    __int128 v29 = (void *)v95;
    if ((v62 & 1) != 0)
    {
      char v74 = (uint64_t *)(*(void *)(v95 + 56) + 16 * v58);
      *char v74 = v50;
      v74[1] = v52;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      type metadata accessor for KTraceRecordError();
      sub_186BF0CD4();
      swift_allocError();
      __int128 v76 = v75;
      uint64_t v77 = MEMORY[0x186E4477C](v97, v94, v93, v41);
      uint64_t v79 = v78;
      swift_bridgeObjectRelease();
      *__int128 v76 = v77;
      v76[1] = v79;
      goto LABEL_43;
    }

    *(void *)(v95 + 8 * (v58 >> 6) + 64) |= 1LL << v58;
    __int128 v65 = (uint64_t *)(v29[6] + 16 * v58);
    *__int128 v65 = v53;
    v65[1] = v55;
    __int128 v66 = (uint64_t *)(v29[7] + 16 * v58);
    *__int128 v66 = v50;
    v66[1] = v52;
    uint64_t v67 = v29[2];
    BOOL v33 = __OFADD__(v67, 1LL);
    uint64_t v68 = v67 + 1;
    if (v33) {
      goto LABEL_46;
    }
    v29[2] = v68;
    swift_bridgeObjectRelease();
    uint64_t v23 = swift_bridgeObjectRelease();
    int64_t v24 = v90;
    uint64_t v5 = v91;
    if (v28) {
      goto LABEL_8;
    }
LABEL_9:
    BOOL v33 = __OFADD__(v24++, 1LL);
    uint64_t v23 = v83;
    if (v33) {
      goto LABEL_47;
    }
    if (v24 >= v88) {
      goto LABEL_44;
    }
    unint64_t v34 = *(void *)(v87 + 8 * v24);
    if (!v34)
    {
      int64_t v35 = v24 + 1;
      if (v24 + 1 >= v88) {
        goto LABEL_44;
      }
      unint64_t v34 = *(void *)(v87 + 8 * v35);
      if (!v34)
      {
        int64_t v35 = v24 + 2;
        if (v24 + 2 >= v88) {
          goto LABEL_44;
        }
        unint64_t v34 = *(void *)(v87 + 8 * v35);
        if (!v34)
        {
          int64_t v35 = v24 + 3;
          if (v24 + 3 >= v88)
          {
LABEL_44:
            swift_bridgeObjectRelease();
            swift_release();
            goto LABEL_40;
          }

          unint64_t v34 = *(void *)(v87 + 8 * v35);
          if (!v34)
          {
            while (1)
            {
              int64_t v24 = v35 + 1;
              if (__OFADD__(v35, 1LL)) {
                goto LABEL_48;
              }
              if (v24 >= v88) {
                goto LABEL_44;
              }
              unint64_t v34 = *(void *)(v87 + 8 * v24);
              ++v35;
              if (v34) {
                goto LABEL_19;
              }
            }
          }
        }
      }

      int64_t v24 = v35;
    }

uint64_t sub_186C248EC(uint64_t result, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = a4;
  uint64_t v49 = (unint64_t *)result;
  uint64_t v50 = 0LL;
  int64_t v6 = 0LL;
  uint64_t v9 = a3[8];
  uint64_t v7 = a3 + 8;
  uint64_t v8 = v9;
  uint64_t v10 = 1LL << *((_BYTE *)v7 - 32);
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  else {
    uint64_t v11 = -1LL;
  }
  unint64_t v12 = v11 & v8;
  uint64_t v51 = v7;
  int64_t v52 = (unint64_t)(v10 + 63) >> 6;
  uint64_t v59 = a4 + 56;
  uint64_t v56 = a5 + 56;
  while (v12)
  {
    unint64_t v13 = __clz(__rbit64(v12));
    v12 &= v12 - 1;
    unint64_t v14 = v13 | (v6 << 6);
LABEL_22:
    unint64_t v18 = (uint64_t *)(a3[6] + 16 * v14);
    uint64_t v19 = *v18;
    uint64_t v20 = v18[1];
    uint64_t v21 = a3[7] + 200 * v14;
    v57[0] = *(_OWORD *)v21;
    __int128 v22 = *(_OWORD *)(v21 + 48);
    __int128 v24 = *(_OWORD *)(v21 + 16);
    __int128 v23 = *(_OWORD *)(v21 + 32);
    v57[4] = *(_OWORD *)(v21 + 64);
    v57[2] = v23;
    v57[3] = v22;
    v57[1] = v24;
    __int128 v25 = *(_OWORD *)(v21 + 128);
    __int128 v27 = *(_OWORD *)(v21 + 80);
    __int128 v26 = *(_OWORD *)(v21 + 96);
    v57[7] = *(_OWORD *)(v21 + 112);
    v57[8] = v25;
    v57[5] = v27;
    v57[6] = v26;
    __int128 v29 = *(_OWORD *)(v21 + 160);
    __int128 v28 = *(_OWORD *)(v21 + 176);
    __int128 v30 = *(_OWORD *)(v21 + 144);
    uint64_t v58 = *(void *)(v21 + 192);
    v57[10] = v29;
    v57[11] = v28;
    v57[9] = v30;
    if (*(void *)(v5 + 16))
    {
      sub_186C5B59C();
      swift_bridgeObjectRetain();
      sub_186C24F18((uint64_t)v57);
      sub_186C5ADA4();
      uint64_t v31 = sub_186C5B5D8();
      uint64_t v32 = -1LL << *(_BYTE *)(v5 + 32);
      unint64_t v33 = v31 & ~v32;
      if (((*(void *)(v59 + ((v33 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v33) & 1) == 0) {
        goto LABEL_5;
      }
      uint64_t v34 = *(void *)(a4 + 48);
      int64_t v35 = (void *)(v34 + 16 * v33);
      if ((*v35 != v19 || v35[1] != v20) && (sub_186C5B4F4() & 1) == 0)
      {
        uint64_t v45 = ~v32;
        do
        {
          unint64_t v33 = (v33 + 1) & v45;
          if (((*(void *)(v59 + ((v33 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v33) & 1) == 0) {
            goto LABEL_5;
          }
          uint64_t v46 = (void *)(v34 + 16 * v33);
          BOOL v47 = *v46 == v19 && v46[1] == v20;
        }

        while (!v47 && (sub_186C5B4F4() & 1) == 0);
      }

      if (!*(void *)(a5 + 16)) {
        goto LABEL_50;
      }
      sub_186C5B59C();
      sub_186C5ADA4();
      uint64_t v36 = sub_186C5B5D8();
      uint64_t v37 = -1LL << *(_BYTE *)(a5 + 32);
      unint64_t v38 = v36 & ~v37;
      if (((*(void *)(v56 + ((v38 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v38) & 1) == 0) {
        goto LABEL_50;
      }
      uint64_t v39 = *(void *)(a5 + 48);
      uint64_t v40 = (void *)(v39 + 16 * v38);
      BOOL v41 = *v40 == v19 && v40[1] == v20;
      if (v41 || (sub_186C5B4F4() & 1) != 0)
      {
LABEL_5:
        sub_186C24FC0((uint64_t)v57);
        uint64_t result = swift_bridgeObjectRelease();
        uint64_t v5 = a4;
      }

      else
      {
        uint64_t v42 = ~v37;
        while (1)
        {
          unint64_t v38 = (v38 + 1) & v42;
          if (((*(void *)(v56 + ((v38 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v38) & 1) == 0) {
            break;
          }
          uint64_t v43 = (void *)(v39 + 16 * v38);
          BOOL v44 = *v43 == v19 && v43[1] == v20;
          if (v44 || (sub_186C5B4F4() & 1) != 0) {
            goto LABEL_5;
          }
        }

LABEL_54:
  __break(1u);
LABEL_55:
  __break(1u);
  return result;
}

uint64_t sub_186C24CFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v15[1] = *MEMORY[0x1895F89C0];
  char v7 = *(_BYTE *)(a1 + 32);
  unsigned int v8 = v7 & 0x3F;
  unint64_t v9 = (unint64_t)((1LL << v7) + 63) >> 6;
  size_t v10 = 8 * v9;
  swift_bridgeObjectRetain_n();
  uint64_t isStackAllocationSafe = swift_bridgeObjectRetain_n();
  if (v8 <= 0xD || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x1895F8858](isStackAllocationSafe);
    bzero((char *)v15 - ((v10 + 15) & 0x3FFFFFFFFFFFFFF0LL), v10);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v12 = sub_186C248EC((uint64_t)v15 - ((v10 + 15) & 0x3FFFFFFFFFFFFFF0LL), v9, (void *)a1, a2, a3);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v3) {
      swift_willThrow();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }

  else
  {
    unint64_t v13 = (void *)swift_slowAlloc();
    bzero(v13, v10);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v12 = sub_186C248EC((uint64_t)v13, v9, (void *)a1, a2, a3);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    MEMORY[0x186E466F0](v13, -1LL, -1LL);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v12;
}

uint64_t sub_186C24F18(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 184);
  unint64_t v3 = *(void *)(a1 + 192);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_186BF06B0(v2, v3);
  return a1;
}

uint64_t sub_186C24FC0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 184);
  unint64_t v3 = *(void *)(a1 + 192);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_186BF06F4(v2, v3);
  return a1;
}

uint64_t sub_186C25068(uint64_t result, uint64_t a2, uint64_t a3)
{
  unint64_t v3 = *(void *)(result + 16);
  if (!v3) {
    return MEMORY[0x18961AFE8];
  }
  unint64_t v5 = 0LL;
  uint64_t v36 = result + 32;
  uint64_t v40 = a3 + 56;
  uint64_t v41 = a2 + 56;
  uint64_t v35 = MEMORY[0x18961AFE8];
  do
  {
    if (v5 <= v3) {
      unint64_t v6 = v3;
    }
    else {
      unint64_t v6 = v5;
    }
    unint64_t v39 = v6;
    unint64_t v7 = v5;
    while (1)
    {
      if (v7 == v39)
      {
        __break(1u);
        return result;
      }

      unint64_t v5 = v7 + 1;
      if (*(void *)(a2 + 16)) {
        break;
      }
LABEL_9:
      unint64_t v7 = v5;
      if (v5 == v3) {
        return v35;
      }
    }

    unint64_t v8 = v3;
    uint64_t v9 = v36 + 32 * v7;
    uint64_t v11 = *(void *)v9;
    uint64_t v10 = *(void *)(v9 + 8);
    uint64_t v12 = *(void *)(v9 + 16);
    char v37 = *(_BYTE *)(v9 + 24);
    sub_186C5B59C();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_186C5ADA4();
    uint64_t v13 = sub_186C5B5D8();
    uint64_t v14 = -1LL << *(_BYTE *)(a2 + 32);
    unint64_t v15 = v13 & ~v14;
    if (((*(void *)(v41 + ((v15 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v15) & 1) == 0) {
      goto LABEL_8;
    }
    uint64_t v16 = *(void *)(a2 + 48);
    int64_t v17 = (void *)(v16 + 16 * v15);
    BOOL v18 = *v17 == v11 && v17[1] == v10;
    if (!v18 && (sub_186C5B4F4() & 1) == 0)
    {
      uint64_t v28 = ~v14;
      do
      {
        unint64_t v15 = (v15 + 1) & v28;
        if (((*(void *)(v41 + ((v15 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v15) & 1) == 0) {
          goto LABEL_8;
        }
        __int128 v29 = (void *)(v16 + 16 * v15);
        BOOL v30 = *v29 == v11 && v29[1] == v10;
      }

      while (!v30 && (sub_186C5B4F4() & 1) == 0);
    }

    if (!*(void *)(a3 + 16)) {
      goto LABEL_42;
    }
    sub_186C5B59C();
    swift_bridgeObjectRetain();
    sub_186C5ADA4();
    uint64_t v19 = sub_186C5B5D8();
    uint64_t v20 = -1LL << *(_BYTE *)(a3 + 32);
    unint64_t v21 = v19 & ~v20;
    if (((*(void *)(v40 + ((v21 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v21) & 1) == 0) {
      goto LABEL_41;
    }
    uint64_t v22 = *(void *)(a3 + 48);
    __int128 v23 = (void *)(v22 + 16 * v21);
    BOOL v24 = *v23 == v11 && v23[1] == v10;
    if (v24 || (sub_186C5B4F4() & 1) != 0)
    {
LABEL_7:
      swift_bridgeObjectRelease();
LABEL_8:
      unint64_t v3 = v8;
      swift_bridgeObjectRelease();
      uint64_t result = swift_bridgeObjectRelease();
      goto LABEL_9;
    }

    uint64_t v25 = ~v20;
    while (1)
    {
      unint64_t v21 = (v21 + 1) & v25;
      if (((*(void *)(v40 + ((v21 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v21) & 1) == 0) {
        break;
      }
      __int128 v26 = (void *)(v22 + 16 * v21);
      BOOL v27 = *v26 == v11 && v26[1] == v10;
      if (v27 || (sub_186C5B4F4() & 1) != 0) {
        goto LABEL_7;
      }
    }

uint64_t sub_186C253B4(uint64_t a1, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_186C253C0(unint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v6 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    uint64_t result = MEMORY[0x186E46630](a3, v6);
    atomic_store(result, a1);
  }

  return result;
}

unint64_t sub_186C25400()
{
  unint64_t result = qword_18C6A27D0;
  if (!qword_18C6A27D0)
  {
    unint64_t result = MEMORY[0x186E46630](&unk_186C60048, &type metadata for Plan);
    atomic_store(result, (unint64_t *)&qword_18C6A27D0);
  }

  return result;
}

unint64_t sub_186C25444()
{
  unint64_t result = qword_18C6A27E0;
  if (!qword_18C6A27E0)
  {
    unint64_t result = MEMORY[0x186E46630](&unk_186C5FF80, &type metadata for Plan.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_18C6A27E0);
  }

  return result;
}

unint64_t sub_186C25488()
{
  unint64_t result = qword_18C6A27F8;
  if (!qword_18C6A27F8)
  {
    unint64_t result = MEMORY[0x186E46630](&unk_186C5FEB8, &type metadata for PlanLayer);
    atomic_store(result, (unint64_t *)&qword_18C6A27F8);
  }

  return result;
}

uint64_t sub_186C254CC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 160);
  unint64_t v3 = *(void *)(a1 + 168);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_186BF06F4(v2, v3);
  return a1;
}

uint64_t sub_186C25554(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_18C6A21A8);
    uint64_t v8 = a2;
    uint64_t result = MEMORY[0x186E46630](a3, v7, &v8);
    atomic_store(result, a1);
  }

  return result;
}

unint64_t sub_186C255B4()
{
  unint64_t result = qword_18C6A2810;
  if (!qword_18C6A2810)
  {
    unint64_t result = MEMORY[0x186E46630](&unk_186C5FE40, &type metadata for PlanSettings);
    atomic_store(result, (unint64_t *)&qword_18C6A2810);
  }

  return result;
}

uint64_t sub_186C255F8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 160);
  unint64_t v3 = *(void *)(a1 + 168);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_186BF06B0(v2, v3);
  return a1;
}

uint64_t sub_186C25680(unint64_t *a1, uint64_t (*a2)(void), uint64_t a3, uint64_t a4)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v9 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_18C6A27E8);
    v10[0] = a3;
    v10[1] = a2();
    uint64_t result = MEMORY[0x186E46630](a4, v9, v10);
    atomic_store(result, a1);
  }

  return result;
}

unint64_t sub_186C256F4()
{
  unint64_t result = qword_18C6A2820;
  if (!qword_18C6A2820)
  {
    unint64_t result = MEMORY[0x186E46630](&unk_186C5FE90, &type metadata for PlanLayer);
    atomic_store(result, (unint64_t *)&qword_18C6A2820);
  }

  return result;
}

uint64_t sub_186C25738(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C6A2828);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_186C25780(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for KTraceRecordError();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_186C257C4(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for KTraceRecordError();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_186C25800(uint64_t a1)
{
  __int128 v5 = *(_OWORD *)(a1 + 272);
  __int128 v3 = *(_OWORD *)(a1 + 240);
  __int128 v4 = *(_OWORD *)(a1 + 256);
  sub_186C25890( *(void *)a1,  *(void *)(a1 + 8),  *(void *)(a1 + 16),  *(void *)(a1 + 24),  *(void *)(a1 + 32),  *(void *)(a1 + 40),  *(void *)(a1 + 48),  *(void *)(a1 + 56),  *(void *)(a1 + 64),  *(void *)(a1 + 72),  *(void *)(a1 + 80),  *(void *)(a1 + 88),  *(void *)(a1 + 96),  *(void *)(a1 + 104),  *(void *)(a1 + 112),  *(void *)(a1 + 120),  *(void *)(a1 + 128),  *(void *)(a1 + 136),  *(void *)(a1 + 144),  *(void *)(a1 + 152),  *(void *)(a1 + 160),  *(void *)(a1 + 168),  *(void *)(a1 + 176),  *(void *)(a1 + 184),  *(void *)(a1 + 192),  *(void *)(a1 + 200),  *(void *)(a1 + 208),  *(void *)(a1 + 216),  *(void *)(a1 + 224),  *(void *)(a1 + 232),  v3,  *((uint64_t *)&v3 + 1),  v4,  *((uint64_t *)&v4 + 1),  v5,  *((unint64_t *)&v5 + 1));
  return a1;
}

uint64_t sub_186C25890( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, unint64_t a36)
{
  if (a2)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_186BF06F4(a35, a36);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }

  return result;
}

unint64_t sub_186C259B8()
{
  unint64_t result = qword_18C6A2840;
  if (!qword_18C6A2840)
  {
    unint64_t result = MEMORY[0x186E46630](&protocol conformance descriptor for PlanSource, &type metadata for PlanSource);
    atomic_store(result, (unint64_t *)&qword_18C6A2840);
  }

  return result;
}

unint64_t sub_186C25A00()
{
  unint64_t result = qword_18C6A2848;
  if (!qword_18C6A2848)
  {
    unint64_t result = MEMORY[0x186E46630](&unk_186C5F8B0, &type metadata for PlanSettings.KPerfSampler);
    atomic_store(result, (unint64_t *)&qword_18C6A2848);
  }

  return result;
}

unint64_t sub_186C25A48()
{
  unint64_t result = qword_18C6A2850;
  if (!qword_18C6A2850)
  {
    unint64_t result = MEMORY[0x186E46630](&unk_186C5FAE0, &type metadata for PlanSettings.KPerfPETMode);
    atomic_store(result, (unint64_t *)&qword_18C6A2850);
  }

  return result;
}

unint64_t sub_186C25A90()
{
  unint64_t result = qword_18C6A2858;
  if (!qword_18C6A2858)
  {
    unint64_t result = MEMORY[0x186E46630](&unk_186C5FBD0, &type metadata for PlanSettings.KPerfLazyTrigger.KPerfLazyKind);
    atomic_store(result, (unint64_t *)&qword_18C6A2858);
  }

  return result;
}

unint64_t sub_186C25AD8()
{
  unint64_t result = qword_18C6A2860;
  if (!qword_18C6A2860)
  {
    unint64_t result = MEMORY[0x186E46630](&unk_186C5FD00, &type metadata for PlanSettings.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_18C6A2860);
  }

  return result;
}

unint64_t sub_186C25B20()
{
  unint64_t result = qword_18C6A2868;
  if (!qword_18C6A2868)
  {
    unint64_t result = MEMORY[0x186E46630](&unk_186C5FE18, &type metadata for PlanSettings.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_18C6A2868);
  }

  return result;
}

unint64_t sub_186C25B68()
{
  unint64_t result = qword_18C6A2870;
  if (!qword_18C6A2870)
  {
    unint64_t result = MEMORY[0x186E46630](&unk_186C5FDF0, &type metadata for PlanSettings.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_18C6A2870);
  }

  return result;
}

unint64_t sub_186C25BB0()
{
  unint64_t result = qword_18C6A2878;
  if (!qword_18C6A2878)
  {
    unint64_t result = MEMORY[0x186E46630](&unk_186C5FEE0, &type metadata for Plan.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_18C6A2878);
  }

  return result;
}

unint64_t sub_186C25BF8()
{
  unint64_t result = qword_18C6A2880;
  if (!qword_18C6A2880)
  {
    unint64_t result = MEMORY[0x186E46630](&unk_186C5FFF8, &type metadata for Plan.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_18C6A2880);
  }

  return result;
}

unint64_t sub_186C25C40()
{
  unint64_t result = qword_18C6A2888;
  if (!qword_18C6A2888)
  {
    unint64_t result = MEMORY[0x186E46630](&unk_186C5FFD0, &type metadata for Plan.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_18C6A2888);
  }

  return result;
}

unint64_t sub_186C25C88()
{
  unint64_t result = qword_18C6A2890;
  if (!qword_18C6A2890)
  {
    unint64_t result = MEMORY[0x186E46630](&unk_186C600B0, &type metadata for Plan);
    atomic_store(result, (unint64_t *)&qword_18C6A2890);
  }

  return result;
}

uint64_t getEnumTagSinglePayload for PlanSource(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xFD) {
    goto LABEL_17;
  }
  if (a2 + 3 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 3) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 3;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }

uint64_t storeEnumTagSinglePayload for PlanSource(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFC) {
    return ((uint64_t (*)(void))((char *)&loc_186C25DA8 + 4 * byte_186C5F7C6[v4]))();
  }
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_186C25DDC + 4 * byte_186C5F7C1[v4]))();
}

uint64_t sub_186C25DDC(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_186C25DE4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x186C25DECLL);
  }
  return result;
}

uint64_t sub_186C25DF8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x186C25E00LL);
  }
  *(_BYTE *)unint64_t result = a2 + 3;
  return result;
}

uint64_t sub_186C25E04(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_186C25E0C(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PlanSource()
{
  return &type metadata for PlanSource;
}

ValueMetadata *type metadata accessor for KDebugBufferSize()
{
  return &type metadata for KDebugBufferSize;
}

uint64_t destroy for PlanSettings(uint64_t a1)
{
  return sub_186BF06F4(*(void *)(a1 + 160), *(void *)(a1 + 168));
}

uint64_t initializeWithCopy for PlanSettings(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  uint64_t v3 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v3;
  uint64_t v4 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v4;
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  uint64_t v5 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v5;
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
  uint64_t v6 = *(void *)(a2 + 160);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  unint64_t v7 = *(void *)(a2 + 168);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_186BF06B0(v6, v7);
  *(void *)(a1 + 160) = v6;
  *(void *)(a1 + 168) = v7;
  return a1;
}

uint64_t assignWithCopy for PlanSettings(uint64_t a1, __int128 *a2)
{
  __int128 v4 = *a2;
  *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
  *(_OWORD *)a1 = v4;
  *(void *)(a1 + 24) = *((void *)a2 + 3);
  *(void *)(a1 + 32) = *((void *)a2 + 4);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 40) = *((void *)a2 + 5);
  *(void *)(a1 + 48) = *((void *)a2 + 6);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 56) = *((_BYTE *)a2 + 56);
  *(void *)(a1 + 64) = *((void *)a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 72) = *((void *)a2 + 9);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 80) = a2[5];
  *(void *)(a1 + 96) = *((void *)a2 + 12);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  __int128 v5 = *(__int128 *)((char *)a2 + 104);
  *(_BYTE *)(a1 + 120) = *((_BYTE *)a2 + 120);
  *(_OWORD *)(a1 + 104) = v5;
  char v6 = *((_BYTE *)a2 + 144);
  *(_OWORD *)(a1 + 128) = a2[8];
  *(_BYTE *)(a1 + 144) = v6;
  *(void *)(a1 + 152) = *((void *)a2 + 19);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v8 = *((void *)a2 + 20);
  unint64_t v7 = *((void *)a2 + 21);
  sub_186BF06B0(v8, v7);
  uint64_t v9 = *(void *)(a1 + 160);
  unint64_t v10 = *(void *)(a1 + 168);
  *(void *)(a1 + 160) = v8;
  *(void *)(a1 + 168) = v7;
  sub_186BF06F4(v9, v10);
  return a1;
}

__n128 __swift_memcpy176_8(uint64_t a1, __int128 *a2)
{
  __int128 v2 = *a2;
  __int128 v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  __int128 v4 = a2[3];
  __int128 v5 = a2[4];
  __int128 v6 = a2[6];
  *(_OWORD *)(a1 + 80) = a2[5];
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  __n128 result = (__n128)a2[7];
  __int128 v8 = a2[8];
  __int128 v9 = a2[10];
  *(_OWORD *)(a1 + 144) = a2[9];
  *(_OWORD *)(a1 + 160) = v9;
  *(__n128 *)(a1 + 112) = result;
  *(_OWORD *)(a1 + 128) = v8;
  return result;
}

uint64_t assignWithTake for PlanSettings(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v5;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a1 + 160);
  unint64_t v7 = *(void *)(a1 + 168);
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  sub_186BF06F4(v6, v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for PlanSettings(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 176)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 32);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for PlanSettings(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 168) = 0LL;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 176) = 1;
    }
  }

  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 176) = 0;
    }
    if (a2) {
      *(void *)(result + 32) = a2;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for PlanSettings()
{
  return &type metadata for PlanSettings;
}

ValueMetadata *type metadata accessor for PlanSettings.KPerfSampler()
{
  return &type metadata for PlanSettings.KPerfSampler;
}

ValueMetadata *type metadata accessor for PlanSettings.KPerfAction()
{
  return &type metadata for PlanSettings.KPerfAction;
}

uint64_t getEnumTagSinglePayload for PlanSettings.KPerfTimer(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t storeEnumTagSinglePayload for PlanSettings.KPerfTimer(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)__n128 result = (a2 - 1);
    *(void *)(result + 8) = 0LL;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }

  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }

  *(_BYTE *)(result + 16) = v3;
  return result;
}

ValueMetadata *type metadata accessor for PlanSettings.KPerfTimer()
{
  return &type metadata for PlanSettings.KPerfTimer;
}

uint64_t initializeBufferWithCopyOfBuffer for PlanSettings.KPerfKDebugTrigger(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t destroy for PlanSettings.KPerfKDebugTrigger()
{
  return swift_bridgeObjectRelease();
}

void *assignWithCopy for PlanSettings.KPerfKDebugTrigger(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for PlanSettings.KPerfKDebugTrigger(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for PlanSettings.KPerfKDebugTrigger(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 24)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PlanSettings.KPerfKDebugTrigger(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0LL;
    *(void *)(result + 16) = 0LL;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 24) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 16) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 24) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for PlanSettings.KPerfKDebugTrigger()
{
  return &type metadata for PlanSettings.KPerfKDebugTrigger;
}

uint64_t getEnumTagSinglePayload for PlanSettings.KPerfPET(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0xFF && a1[16]) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *a1;
  BOOL v4 = v3 >= 2;
  int v5 = v3 - 2;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for PlanSettings.KPerfPET( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(void *)__n128 result = a2 - 255;
    *(void *)(result + 8) = 0LL;
    if (a3 >= 0xFF) {
      *(_BYTE *)(result + 16) = 1;
    }
  }

  else
  {
    if (a3 >= 0xFF) {
      *(_BYTE *)(result + 16) = 0;
    }
    if (a2) {
      *(_BYTE *)__n128 result = a2 + 1;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for PlanSettings.KPerfPET()
{
  return &type metadata for PlanSettings.KPerfPET;
}

ValueMetadata *type metadata accessor for PlanSettings.KPerfPETMode()
{
  return &type metadata for PlanSettings.KPerfPETMode;
}

ValueMetadata *type metadata accessor for PlanSettings.KPerfLazyTrigger()
{
  return &type metadata for PlanSettings.KPerfLazyTrigger;
}

ValueMetadata *type metadata accessor for PlanSettings.KPerfLazyTrigger.KPerfLazyKind()
{
  return &type metadata for PlanSettings.KPerfLazyTrigger.KPerfLazyKind;
}

uint64_t destroy for PlanSettings.ProviderEntry()
{
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for PlanSettings.ProviderEntry(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for PlanSettings.ProviderEntry(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  return a1;
}

uint64_t assignWithTake for PlanSettings.ProviderEntry(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  return a1;
}

uint64_t getEnumTagSinglePayload for PlanSettings.ProviderEntry(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 25)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PlanSettings.ProviderEntry(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0LL;
    *(void *)(result + 16) = 0LL;
    *(_BYTE *)(result + 24) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 25) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 25) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for PlanSettings.ProviderEntry()
{
  return &type metadata for PlanSettings.ProviderEntry;
}

ValueMetadata *type metadata accessor for PlanSettings.CodingKeys()
{
  return &type metadata for PlanSettings.CodingKeys;
}

uint64_t destroy for PlanLayer(uint64_t a1)
{
  return sub_186BF06F4(*(void *)(a1 + 184), *(void *)(a1 + 192));
}

uint64_t initializeWithCopy for PlanLayer(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  uint64_t v4 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v4;
  uint64_t v5 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v5;
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  uint64_t v6 = *(void *)(a2 + 96);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(_BYTE *)(a1 + 168) = *(_BYTE *)(a2 + 168);
  uint64_t v7 = *(void *)(a2 + 184);
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  unint64_t v8 = *(void *)(a2 + 192);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_186BF06B0(v7, v8);
  *(void *)(a1 + 184) = v7;
  *(void *)(a1 + 192) = v8;
  return a1;
}

uint64_t assignWithCopy for PlanLayer(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  __int128 v4 = *(_OWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_OWORD *)(a1 + 24) = v4;
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  __int128 v5 = *(_OWORD *)(a2 + 128);
  *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = v5;
  char v6 = *(_BYTE *)(a2 + 168);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(_BYTE *)(a1 + 168) = v6;
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v8 = *(void *)(a2 + 184);
  unint64_t v7 = *(void *)(a2 + 192);
  sub_186BF06B0(v8, v7);
  uint64_t v9 = *(void *)(a1 + 184);
  unint64_t v10 = *(void *)(a1 + 192);
  *(void *)(a1 + 184) = v8;
  *(void *)(a1 + 192) = v7;
  sub_186BF06F4(v9, v10);
  return a1;
}

__n128 __swift_memcpy200_8(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  __int128 v2 = *(_OWORD *)(a2 + 16);
  __int128 v3 = *(_OWORD *)(a2 + 32);
  __int128 v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 32) = v3;
  __int128 v5 = *(_OWORD *)(a2 + 80);
  __int128 v6 = *(_OWORD *)(a2 + 96);
  __int128 v7 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v7;
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 96) = v6;
  __n128 result = *(__n128 *)(a2 + 144);
  __int128 v9 = *(_OWORD *)(a2 + 160);
  __int128 v10 = *(_OWORD *)(a2 + 176);
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  *(_OWORD *)(a1 + 160) = v9;
  *(_OWORD *)(a1 + 176) = v10;
  *(__n128 *)(a1 + 144) = result;
  return result;
}

uint64_t assignWithTake for PlanLayer(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v4;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  uint64_t v5 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v6;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(_BYTE *)(a1 + 168) = *(_BYTE *)(a2 + 168);
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(a1 + 184);
  unint64_t v8 = *(void *)(a1 + 192);
  *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
  sub_186BF06F4(v7, v8);
  return a1;
}

uint64_t getEnumTagSinglePayload for PlanLayer(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 200)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PlanLayer(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 200) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 16) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 200) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for PlanLayer()
{
  return &type metadata for PlanLayer;
}

uint64_t destroy for Plan(uint64_t a1)
{
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for Plan(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v5;
  uint64_t v6 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v6;
  uint64_t v7 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v7;
  uint64_t v8 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v8;
  uint64_t v9 = *(void *)(a2 + 104);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = v9;
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_BYTE *)(a1 + 128) = *(_BYTE *)(a2 + 128);
  uint64_t v10 = *(void *)(a2 + 144);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(void *)(a1 + 144) = v10;
  uint64_t v11 = *(void *)(a2 + 160);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  *(void *)(a1 + 160) = v11;
  *(_BYTE *)(a1 + 168) = *(_BYTE *)(a2 + 168);
  uint64_t v12 = *(void *)(a2 + 184);
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  *(void *)(a1 + 184) = v12;
  *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
  *(void *)(a1 + 208) = *(void *)(a2 + 208);
  *(_BYTE *)(a1 + 232) = *(_BYTE *)(a2 + 232);
  *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
  *(_BYTE *)(a1 + 256) = *(_BYTE *)(a2 + 256);
  *(_OWORD *)(a1 + 240) = *(_OWORD *)(a2 + 240);
  uint64_t v13 = *(void *)(a2 + 272);
  *(void *)(a1 + 264) = *(void *)(a2 + 264);
  unint64_t v16 = *(void *)(a2 + 280);
  uint64_t v17 = v13;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_186BF06B0(v17, v16);
  *(void *)(a1 + 272) = v17;
  *(void *)(a1 + 280) = v16;
  uint64_t v14 = *(void *)(a2 + 296);
  *(void *)(a1 + 288) = *(void *)(a2 + 288);
  *(void *)(a1 + 296) = v14;
  *(_BYTE *)(a1 + 304) = *(_BYTE *)(a2 + 304);
  *(void *)(a1 + 312) = *(void *)(a2 + 312);
  *(_BYTE *)(a1 + 320) = *(_BYTE *)(a2 + 320);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for Plan(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  __int128 v4 = *(_OWORD *)(a2 + 112);
  *(_BYTE *)(a1 + 128) = *(_BYTE *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = v4;
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 168) = *(_BYTE *)(a2 + 168);
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
  *(void *)(a1 + 208) = *(void *)(a2 + 208);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  __int128 v5 = *(_OWORD *)(a2 + 216);
  *(_BYTE *)(a1 + 232) = *(_BYTE *)(a2 + 232);
  *(_OWORD *)(a1 + 216) = v5;
  char v6 = *(_BYTE *)(a2 + 256);
  *(_OWORD *)(a1 + 240) = *(_OWORD *)(a2 + 240);
  *(_BYTE *)(a1 + 256) = v6;
  *(void *)(a1 + 264) = *(void *)(a2 + 264);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(a2 + 272);
  unint64_t v8 = *(void *)(a2 + 280);
  sub_186BF06B0(v7, v8);
  uint64_t v9 = *(void *)(a1 + 272);
  unint64_t v10 = *(void *)(a1 + 280);
  *(void *)(a1 + 272) = v7;
  *(void *)(a1 + 280) = v8;
  sub_186BF06F4(v9, v10);
  *(void *)(a1 + 288) = *(void *)(a2 + 288);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 296) = *(void *)(a2 + 296);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 304) = *(_BYTE *)(a2 + 304);
  *(void *)(a1 + 312) = *(void *)(a2 + 312);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 320) = *(_BYTE *)(a2 + 320);
  return a1;
}

void *__swift_memcpy321_8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x141uLL);
}

uint64_t assignWithTake for Plan(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v5;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(a2 + 104);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = v7;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_BYTE *)(a1 + 128) = *(_BYTE *)(a2 + 128);
  uint64_t v8 = *(void *)(a2 + 144);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(void *)(a1 + 144) = v8;
  swift_bridgeObjectRelease();
  uint64_t v9 = *(void *)(a2 + 160);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  *(void *)(a1 + 160) = v9;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 168) = *(_BYTE *)(a2 + 168);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
  *(void *)(a1 + 208) = *(void *)(a2 + 208);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
  *(_BYTE *)(a1 + 232) = *(_BYTE *)(a2 + 232);
  *(_OWORD *)(a1 + 240) = *(_OWORD *)(a2 + 240);
  *(_BYTE *)(a1 + 256) = *(_BYTE *)(a2 + 256);
  *(void *)(a1 + 264) = *(void *)(a2 + 264);
  swift_bridgeObjectRelease();
  uint64_t v10 = *(void *)(a1 + 272);
  unint64_t v11 = *(void *)(a1 + 280);
  *(_OWORD *)(a1 + 272) = *(_OWORD *)(a2 + 272);
  sub_186BF06F4(v10, v11);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 288) = *(_OWORD *)(a2 + 288);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 304) = *(_BYTE *)(a2 + 304);
  *(void *)(a1 + 312) = *(void *)(a2 + 312);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 320) = *(_BYTE *)(a2 + 320);
  return a1;
}

uint64_t getEnumTagSinglePayload for Plan(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 321)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Plan(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 312) = 0LL;
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(_BYTE *)(result + 320) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 321) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 321) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for Plan()
{
  return &type metadata for Plan;
}

uint64_t _s6ktrace12PlanSettingsV12KPerfSamplerOwet_0(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xF6) {
    goto LABEL_17;
  }
  if (a2 + 10 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 10) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 10;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 10;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 10;
    }
  }

uint64_t _s6ktrace12PlanSettingsV12KPerfSamplerOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 10 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 10) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xF6) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xF5) {
    return ((uint64_t (*)(void))((char *)&loc_186C273AC + 4 * byte_186C5F7D0[v4]))();
  }
  *a1 = a2 + 10;
  return ((uint64_t (*)(void))((char *)sub_186C273E0 + 4 * byte_186C5F7CB[v4]))();
}

uint64_t sub_186C273E0(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_186C273E8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x186C273F0LL);
  }
  return result;
}

uint64_t sub_186C273FC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x186C27404LL);
  }
  *(_BYTE *)__n128 result = a2 + 10;
  return result;
}

uint64_t sub_186C27408(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_186C27410(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Plan.CodingKeys()
{
  return &type metadata for Plan.CodingKeys;
}

ValueMetadata *type metadata accessor for PlanLayer.CodingKeys()
{
  return &type metadata for PlanLayer.CodingKeys;
}

uint64_t _s6ktrace9PlanLayerV10CodingKeysOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFD) {
    return ((uint64_t (*)(void))((char *)&loc_186C27490 + 4 * byte_186C5F7DA[v4]))();
  }
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_186C274C4 + 4 * byte_186C5F7D5[v4]))();
}

uint64_t sub_186C274C4(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_186C274CC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x186C274D4LL);
  }
  return result;
}

uint64_t sub_186C274E0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x186C274E8LL);
  }
  *(_BYTE *)__n128 result = a2 + 2;
  return result;
}

uint64_t sub_186C274EC(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_186C274F4(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PlanSettings.ProviderEntry.CodingKeys()
{
  return &type metadata for PlanSettings.ProviderEntry.CodingKeys;
}

ValueMetadata *type metadata accessor for PlanSettings.KPerfLazyTrigger.CodingKeys()
{
  return &type metadata for PlanSettings.KPerfLazyTrigger.CodingKeys;
}

ValueMetadata *type metadata accessor for PlanSettings.KPerfPET.CodingKeys()
{
  return &type metadata for PlanSettings.KPerfPET.CodingKeys;
}

ValueMetadata *type metadata accessor for PlanSettings.KPerfKDebugTrigger.CodingKeys()
{
  return &type metadata for PlanSettings.KPerfKDebugTrigger.CodingKeys;
}

_BYTE *sub_186C27540(_BYTE *result, char a2)
{
  *__n128 result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for PlanSettings.KPerfTimer.CodingKeys()
{
  return &type metadata for PlanSettings.KPerfTimer.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for PlanSettings.KPerfAction.CodingKeys(uint64_t a1, int a2, int a3)
{
  else {
    int v3 = 2;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2) {
    return ((uint64_t (*)(void))((char *)sub_186C2759C + 4 * byte_186C5F7DF[v4]))();
  }
  else {
    return ((uint64_t (*)(void))((char *)sub_186C275BC + 4 * byte_186C5F7E4[v4]))();
  }
}

_BYTE *sub_186C2759C(_BYTE *result, char a2)
{
  *__n128 result = a2;
  return result;
}

_BYTE *sub_186C275BC(_BYTE *result)
{
  *__n128 result = 0;
  return result;
}

_DWORD *sub_186C275C4(_DWORD *result, int a2)
{
  *__n128 result = a2;
  return result;
}

_WORD *sub_186C275CC(_WORD *result, __int16 a2)
{
  *__n128 result = a2;
  return result;
}

_WORD *sub_186C275D4(_WORD *result)
{
  *__n128 result = 0;
  return result;
}

_DWORD *sub_186C275DC(_DWORD *result)
{
  *__n128 result = 0;
  return result;
}

ValueMetadata *type metadata accessor for PlanSettings.KPerfAction.CodingKeys()
{
  return &type metadata for PlanSettings.KPerfAction.CodingKeys;
}

uint64_t _s6ktrace12PlanSettingsV12KPerfPETModeOwet_0(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xFF) {
    goto LABEL_17;
  }
  if (a2 + 1 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 1;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }

uint64_t _s6ktrace12PlanSettingsV12KPerfPETModeOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_186C276D4 + 4 * byte_186C5F7EE[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_186C27708 + 4 * byte_186C5F7E9[v4]))();
}

uint64_t sub_186C27708(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_186C27710(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x186C27718LL);
  }
  return result;
}

uint64_t sub_186C27724(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x186C2772CLL);
  }
  *(_BYTE *)__n128 result = a2 + 1;
  return result;
}

uint64_t sub_186C27730(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_186C27738(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for KDebugBufferSize.CodingKeys()
{
  return &type metadata for KDebugBufferSize.CodingKeys;
}

unint64_t sub_186C27758()
{
  unint64_t result = qword_18C6A6C60[0];
  if (!qword_18C6A6C60[0])
  {
    unint64_t result = MEMORY[0x186E46630](&unk_186C60258, &type metadata for KDebugBufferSize.CodingKeys);
    atomic_store(result, qword_18C6A6C60);
  }

  return result;
}

unint64_t sub_186C277A0()
{
  unint64_t result = qword_18C6A6E70[0];
  if (!qword_18C6A6E70[0])
  {
    unint64_t result = MEMORY[0x186E46630](&unk_186C60310, &type metadata for PlanSettings.KPerfAction.CodingKeys);
    atomic_store(result, qword_18C6A6E70);
  }

  return result;
}

unint64_t sub_186C277E8()
{
  unint64_t result = qword_18C6A7080[0];
  if (!qword_18C6A7080[0])
  {
    unint64_t result = MEMORY[0x186E46630](&unk_186C603C8, &type metadata for PlanSettings.KPerfTimer.CodingKeys);
    atomic_store(result, qword_18C6A7080);
  }

  return result;
}

unint64_t sub_186C27830()
{
  unint64_t result = qword_18C6A7290[0];
  if (!qword_18C6A7290[0])
  {
    unint64_t result = MEMORY[0x186E46630](&unk_186C60480, &type metadata for PlanSettings.KPerfKDebugTrigger.CodingKeys);
    atomic_store(result, qword_18C6A7290);
  }

  return result;
}

unint64_t sub_186C27878()
{
  unint64_t result = qword_18C6A74A0[0];
  if (!qword_18C6A74A0[0])
  {
    unint64_t result = MEMORY[0x186E46630](&unk_186C60538, &type metadata for PlanSettings.KPerfPET.CodingKeys);
    atomic_store(result, qword_18C6A74A0);
  }

  return result;
}

unint64_t sub_186C278C0()
{
  unint64_t result = qword_18C6A76B0[0];
  if (!qword_18C6A76B0[0])
  {
    unint64_t result = MEMORY[0x186E46630](&unk_186C605F0, &type metadata for PlanSettings.KPerfLazyTrigger.CodingKeys);
    atomic_store(result, qword_18C6A76B0);
  }

  return result;
}

unint64_t sub_186C27908()
{
  unint64_t result = qword_18C6A78C0[0];
  if (!qword_18C6A78C0[0])
  {
    unint64_t result = MEMORY[0x186E46630](&unk_186C606A8, &type metadata for PlanSettings.ProviderEntry.CodingKeys);
    atomic_store(result, qword_18C6A78C0);
  }

  return result;
}

unint64_t sub_186C27950()
{
  unint64_t result = qword_18C6A7AD0[0];
  if (!qword_18C6A7AD0[0])
  {
    unint64_t result = MEMORY[0x186E46630](&unk_186C60760, &type metadata for PlanLayer.CodingKeys);
    atomic_store(result, qword_18C6A7AD0);
  }

  return result;
}

unint64_t sub_186C27998()
{
  unint64_t result = qword_18C6A7BE0;
  if (!qword_18C6A7BE0)
  {
    unint64_t result = MEMORY[0x186E46630](&unk_186C606D0, &type metadata for PlanLayer.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_18C6A7BE0);
  }

  return result;
}

unint64_t sub_186C279E0()
{
  unint64_t result = qword_18C6A7BE8[0];
  if (!qword_18C6A7BE8[0])
  {
    unint64_t result = MEMORY[0x186E46630](&unk_186C606F8, &type metadata for PlanLayer.CodingKeys);
    atomic_store(result, qword_18C6A7BE8);
  }

  return result;
}

unint64_t sub_186C27A28()
{
  unint64_t result = qword_18C6A7C70;
  if (!qword_18C6A7C70)
  {
    unint64_t result = MEMORY[0x186E46630](&unk_186C60618, &type metadata for PlanSettings.ProviderEntry.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_18C6A7C70);
  }

  return result;
}

unint64_t sub_186C27A70()
{
  unint64_t result = qword_18C6A7C78;
  if (!qword_18C6A7C78)
  {
    unint64_t result = MEMORY[0x186E46630](&unk_186C60640, &type metadata for PlanSettings.ProviderEntry.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_18C6A7C78);
  }

  return result;
}

unint64_t sub_186C27AB8()
{
  unint64_t result = qword_18C6A7D00;
  if (!qword_18C6A7D00)
  {
    unint64_t result = MEMORY[0x186E46630](&unk_186C60560, &type metadata for PlanSettings.KPerfLazyTrigger.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_18C6A7D00);
  }

  return result;
}

unint64_t sub_186C27B00()
{
  unint64_t result = qword_18C6A7D08[0];
  if (!qword_18C6A7D08[0])
  {
    unint64_t result = MEMORY[0x186E46630](&unk_186C60588, &type metadata for PlanSettings.KPerfLazyTrigger.CodingKeys);
    atomic_store(result, qword_18C6A7D08);
  }

  return result;
}

unint64_t sub_186C27B48()
{
  unint64_t result = qword_18C6A7D90;
  if (!qword_18C6A7D90)
  {
    unint64_t result = MEMORY[0x186E46630](&unk_186C604A8, &type metadata for PlanSettings.KPerfPET.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_18C6A7D90);
  }

  return result;
}

unint64_t sub_186C27B90()
{
  unint64_t result = qword_18C6A7D98[0];
  if (!qword_18C6A7D98[0])
  {
    unint64_t result = MEMORY[0x186E46630](&unk_186C604D0, &type metadata for PlanSettings.KPerfPET.CodingKeys);
    atomic_store(result, qword_18C6A7D98);
  }

  return result;
}

unint64_t sub_186C27BD8()
{
  unint64_t result = qword_18C6A7E20;
  if (!qword_18C6A7E20)
  {
    unint64_t result = MEMORY[0x186E46630](&unk_186C603F0, &type metadata for PlanSettings.KPerfKDebugTrigger.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_18C6A7E20);
  }

  return result;
}

unint64_t sub_186C27C20()
{
  unint64_t result = qword_18C6A7E28[0];
  if (!qword_18C6A7E28[0])
  {
    unint64_t result = MEMORY[0x186E46630](&unk_186C60418, &type metadata for PlanSettings.KPerfKDebugTrigger.CodingKeys);
    atomic_store(result, qword_18C6A7E28);
  }

  return result;
}

unint64_t sub_186C27C68()
{
  unint64_t result = qword_18C6A7EB0;
  if (!qword_18C6A7EB0)
  {
    unint64_t result = MEMORY[0x186E46630](&unk_186C60338, &type metadata for PlanSettings.KPerfTimer.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_18C6A7EB0);
  }

  return result;
}

unint64_t sub_186C27CB0()
{
  unint64_t result = qword_18C6A7EB8[0];
  if (!qword_18C6A7EB8[0])
  {
    unint64_t result = MEMORY[0x186E46630](&unk_186C60360, &type metadata for PlanSettings.KPerfTimer.CodingKeys);
    atomic_store(result, qword_18C6A7EB8);
  }

  return result;
}

unint64_t sub_186C27CF8()
{
  unint64_t result = qword_18C6A7F40;
  if (!qword_18C6A7F40)
  {
    unint64_t result = MEMORY[0x186E46630](&unk_186C60280, &type metadata for PlanSettings.KPerfAction.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_18C6A7F40);
  }

  return result;
}

unint64_t sub_186C27D40()
{
  unint64_t result = qword_18C6A7F48[0];
  if (!qword_18C6A7F48[0])
  {
    unint64_t result = MEMORY[0x186E46630](&unk_186C602A8, &type metadata for PlanSettings.KPerfAction.CodingKeys);
    atomic_store(result, qword_18C6A7F48);
  }

  return result;
}

unint64_t sub_186C27D88()
{
  unint64_t result = qword_18C6A7FD0;
  if (!qword_18C6A7FD0)
  {
    unint64_t result = MEMORY[0x186E46630](&unk_186C601C8, &type metadata for KDebugBufferSize.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_18C6A7FD0);
  }

  return result;
}

unint64_t sub_186C27DD0()
{
  unint64_t result = qword_18C6A7FD8[0];
  if (!qword_18C6A7FD8[0])
  {
    unint64_t result = MEMORY[0x186E46630](&unk_186C601F0, &type metadata for KDebugBufferSize.CodingKeys);
    atomic_store(result, qword_18C6A7FD8);
  }

  return result;
}

unint64_t sub_186C27E14()
{
  unint64_t result = qword_18C6A2898;
  if (!qword_18C6A2898)
  {
    unint64_t result = MEMORY[0x186E46630](&unk_186C5FB48, &type metadata for PlanSettings.KPerfPETMode);
    atomic_store(result, (unint64_t *)&qword_18C6A2898);
  }

  return result;
}

unint64_t sub_186C27E58()
{
  unint64_t result = qword_18C6A28A0;
  if (!qword_18C6A28A0)
  {
    unint64_t result = MEMORY[0x186E46630](&unk_186C5F918, &type metadata for PlanSettings.KPerfSampler);
    atomic_store(result, (unint64_t *)&qword_18C6A28A0);
  }

  return result;
}

double sub_186C27E9C(uint64_t a1)
{
  *(_BYTE *)(a1 + 320) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

uint64_t sub_186C27ED0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 200);
  unint64_t v4 = *(void *)(a1 + 208);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_186BF06F4(v2, v4);
  return a1;
}

double sub_186C27F8C(uint64_t a1)
{
  *(void *)(a1 + 192) = 0LL;
  double result = 0.0;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

uint64_t sub_186C27FB0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, unint64_t a25)
{
  if (a3)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return sub_186BF06F4(a24, a25);
  }

  return result;
}

void *sub_186C28054( void *a1, void (*a2)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))
{
  return a1;
}

uint64_t sub_186C280C0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, unint64_t a25)
{
  if (a3)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return sub_186BF06B0(a24, a25);
  }

  return result;
}

unint64_t sub_186C28164()
{
  unint64_t result = qword_18C6A2918;
  if (!qword_18C6A2918)
  {
    unint64_t result = MEMORY[0x186E46630](&unk_186C5F860, &type metadata for KDebugBufferSize);
    atomic_store(result, (unint64_t *)&qword_18C6A2918);
  }

  return result;
}

unint64_t sub_186C281A8()
{
  unint64_t result = qword_18C6A2928;
  if (!qword_18C6A2928)
  {
    unint64_t result = MEMORY[0x186E46630](&unk_186C5F9A0, &type metadata for PlanSettings.KPerfAction);
    atomic_store(result, (unint64_t *)&qword_18C6A2928);
  }

  return result;
}

unint64_t sub_186C281EC()
{
  unint64_t result = qword_18C6A2938;
  if (!qword_18C6A2938)
  {
    unint64_t result = MEMORY[0x186E46630](&unk_186C5F9F0, &type metadata for PlanSettings.KPerfTimer);
    atomic_store(result, (unint64_t *)&qword_18C6A2938);
  }

  return result;
}

unint64_t sub_186C28230()
{
  unint64_t result = qword_18C6A2940;
  if (!qword_18C6A2940)
  {
    unint64_t result = MEMORY[0x186E46630](&unk_186C5FA90, &type metadata for PlanSettings.KPerfPET);
    atomic_store(result, (unint64_t *)&qword_18C6A2940);
  }

  return result;
}

unint64_t sub_186C28274()
{
  unint64_t result = qword_18C6A2950;
  if (!qword_18C6A2950)
  {
    unint64_t result = MEMORY[0x186E46630](&unk_186C5FA40, &type metadata for PlanSettings.KPerfKDebugTrigger);
    atomic_store(result, (unint64_t *)&qword_18C6A2950);
  }

  return result;
}

unint64_t sub_186C282B8()
{
  unint64_t result = qword_18C6A2958;
  if (!qword_18C6A2958)
  {
    unint64_t result = MEMORY[0x186E46630](&unk_186C5FC38, &type metadata for PlanSettings.KPerfLazyTrigger);
    atomic_store(result, (unint64_t *)&qword_18C6A2958);
  }

  return result;
}

unint64_t sub_186C282FC()
{
  unint64_t result = qword_18C6A2968;
  if (!qword_18C6A2968)
  {
    unint64_t result = MEMORY[0x186E46630](&unk_186C5FC88, &type metadata for PlanSettings.ProviderEntry);
    atomic_store(result, (unint64_t *)&qword_18C6A2968);
  }

  return result;
}

unint64_t sub_186C28340()
{
  unint64_t result = qword_18C6A2990;
  if (!qword_18C6A2990)
  {
    unint64_t result = MEMORY[0x186E46630](&unk_186C5F8D8, &type metadata for PlanSettings.KPerfSampler);
    atomic_store(result, (unint64_t *)&qword_18C6A2990);
  }

  return result;
}

uint64_t sub_186C28384(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_18C6A26A8);
    v8[0] = a2;
    v8[1] = a2;
    uint64_t result = MEMORY[0x186E46630](a3, v7, v8);
    atomic_store(result, a1);
  }

  return result;
}

unint64_t sub_186C283E4()
{
  unint64_t result = qword_18C6A29B8;
  if (!qword_18C6A29B8)
  {
    unint64_t result = MEMORY[0x186E46630](&unk_186C5FB80, &type metadata for PlanSettings.KPerfPETMode);
    atomic_store(result, (unint64_t *)&qword_18C6A29B8);
  }

  return result;
}

uint64_t sub_186C28428(unint64_t *a1, uint64_t *a2, uint64_t (*a3)(void), uint64_t a4)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    uint64_t v9 = a3();
    uint64_t result = MEMORY[0x186E46630](a4, v8, &v9);
    atomic_store(result, a1);
  }

  return result;
}

unint64_t sub_186C2848C()
{
  unint64_t result = qword_18C6A29E0;
  if (!qword_18C6A29E0)
  {
    unint64_t result = MEMORY[0x186E46630](&unk_186C5F950, &type metadata for PlanSettings.KPerfSampler);
    atomic_store(result, (unint64_t *)&qword_18C6A29E0);
  }

  return result;
}

uint64_t StaticString.charPtr.getter(uint64_t result, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0)
  {
    __break(1u);
    goto LABEL_5;
  }

  if (!result) {
LABEL_5:
  }
    __break(1u);
  return result;
}

uint64_t sub_186C284F8()
{
  uint64_t result = sub_186C5ABD0();
  qword_18C6A9A10 = result;
  return result;
}

uint64_t *sub_186C28514()
{
  if (qword_18C6A8060 != -1) {
    swift_once();
  }
  return &qword_18C6A9A10;
}

uint64_t sub_186C28554()
{
  uint64_t result = sub_186C5ABDC();
  qword_18C6A9A18 = result;
  return result;
}

uint64_t *sub_186C28570()
{
  if (qword_18C6A8068 != -1) {
    swift_once();
  }
  return &qword_18C6A9A18;
}

void sub_186C285B0(char *a1)
{
}

void sub_186C285BC(char a1)
{
  __asm { BR              X10 }

uint64_t sub_186C285F4(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_186C28648 + 4 * byte_186C60A5C[a2]))(11122LL);
}

uint64_t sub_186C28648(uint64_t a1)
{
  if (a1 == 11122 && v1 == 0xE200000000000000LL) {
    char v2 = 1;
  }
  else {
    char v2 = sub_186C5B4F4();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

void sub_186C286E8()
{
}

void sub_186C286F0(char a1)
{
  __asm { BR              X10 }

uint64_t sub_186C28734()
{
  return sub_186C5B5D8();
}

void sub_186C28790()
{
  __asm { BR              X10 }

uint64_t sub_186C287C0()
{
  return swift_bridgeObjectRelease();
}

void sub_186C28808(uint64_t a1)
{
}

void sub_186C28810(uint64_t a1, char a2)
{
  __asm { BR              X10 }

uint64_t sub_186C28850()
{
  return sub_186C5B5D8();
}

uint64_t sub_186C288AC@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result = sub_186C2BC00();
  *a1 = result;
  return result;
}

uint64_t sub_186C288D8()
{
  return ((uint64_t (*)(void))((char *)sub_186C288FC + 4 * byte_186C60A74[*v0]))();
}

void sub_186C288FC(void *a1@<X8>)
{
  *a1 = 11122LL;
  a1[1] = 0xE200000000000000LL;
}

void sub_186C2890C(void *a1@<X8>)
{
  *a1 = 119LL;
  a1[1] = v1;
}

void sub_186C28918(void *a1@<X8>)
{
  *a1 = 11127LL;
  a1[1] = 0xE200000000000000LL;
}

void sub_186C28928(void *a1@<X8>)
{
  *a1 = 97LL;
  a1[1] = v1;
}

void sub_186C28934(void *a1@<X8>)
{
  *a1 = 11105LL;
  a1[1] = 0xE200000000000000LL;
}

void sub_186C28944(uint64_t a1, uint64_t a2, char a3)
{
  __asm { BR              X10 }

FILE *sub_186C2897C()
{
  uint64_t v0 = sub_186C5AD74();
  swift_bridgeObjectRelease();
  uint64_t v1 = sub_186C5AD74();
  swift_bridgeObjectRelease();
  char v2 = fopen((const char *)(v0 + 32), (const char *)(v1 + 32));
  swift_release();
  swift_release();
  return v2;
}

FILE *sub_186C28A10(FILE *a1)
{
  int v1 = fileno(a1);
  int v2 = dup(v1);
  if (v2 < 0) {
    return 0LL;
  }
  uint64_t result = fdopen(v2, "a");
  if (!result) {
    __break(1u);
  }
  return result;
}

FILE *sub_186C28A4C(FILE *a1)
{
  int v2 = fileno(a1);
  int v3 = dup(v2);
  if ((v3 & 0x80000000) == 0)
  {
    int v4 = v3;
    uint64_t result = fopen("/dev/null", "a");
    if (!result) {
      return result;
    }
    int v6 = fileno(result);
    int v7 = fileno(a1);
    if ((dup2(v6, v7) & 0x80000000) == 0)
    {
      uint64_t result = fdopen(v4, "a");
      if (result) {
        return result;
      }
      __break(1u);
    }
  }

  return 0LL;
}

uint64_t sub_186C28AE4()
{
  int v1 = *v0;
  uint64_t v2 = sub_186C5AD74();
  fputs((const char *)(v2 + 32), v1);
  return swift_release();
}

uint64_t sub_186C28B1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = sub_186C2BC48(a1, a2, a3, a4);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a2 - 8) + 8LL))(a1, a2);
  return v8;
}

char *sub_186C28B98@<X0>(const char *a1@<X0>, char **a2@<X8>)
{
  uint64_t result = strdup(a1);
  *a2 = result;
  return result;
}

uint64_t sub_186C28BC4( void (*a1)(char *, char *), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v40 = a8;
  uint64_t v41 = a5;
  uint64_t v9 = v8;
  uint64_t v53 = a4;
  uint64_t v54 = a1;
  uint64_t v55 = a2;
  uint64_t v39 = *(void *)(a5 - 8);
  uint64_t v10 = MEMORY[0x1895F8858](a1);
  int64_t v52 = (char *)v37 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v10);
  uint64_t v51 = (char *)v37 - v12;
  uint64_t v45 = v13;
  unint64_t v15 = v14;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v17 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1895F8858](AssociatedTypeWitness);
  unint64_t v38 = (char *)v37 - v18;
  uint64_t v19 = sub_186C5B080();
  uint64_t v42 = *(void *)(v19 - 8);
  uint64_t v43 = v19;
  uint64_t v20 = MEMORY[0x1895F8858](v19);
  uint64_t v49 = (char *)v37 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v22 = MEMORY[0x1895F8858](v20);
  BOOL v24 = (char *)v37 - v23;
  uint64_t v25 = MEMORY[0x1895F8858](v22);
  v37[1] = (char *)v37 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v27 = MEMORY[0x1895F8858](v25);
  uint64_t v48 = *((void *)v15 - 1);
  MEMORY[0x1895F8858](v27);
  BOOL v47 = (char *)v37 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v56 = swift_getAssociatedTypeWitness();
  uint64_t v44 = *(void *)(v56 - 8);
  MEMORY[0x1895F8858](v56);
  uint64_t v46 = (char *)v37 - v29;
  BOOL v30 = v15;
  uint64_t v31 = sub_186C5AEAC();
  uint64_t v57 = sub_186C5B2D8();
  uint64_t v53 = sub_186C5B2E4();
  sub_186C5B2C0();
  (*(void (**)(char *, void, void *))(v48 + 16))(v47, v50, v15);
  unint64_t v32 = v46;
  uint64_t v50 = v30;
  uint64_t result = sub_186C5AEA0();
  if (v31 < 0)
  {
    __break(1u);
LABEL_18:
    __break(1u);
    return result;
  }

  if (v31)
  {
    swift_getAssociatedConformanceWitness();
    while (1)
    {
      sub_186C5B0E0();
      uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v17 + 48))(v24, 1LL, AssociatedTypeWitness);
      if ((_DWORD)result == 1) {
        goto LABEL_18;
      }
      v54(v24, v52);
      if (v9)
      {
        (*(void (**)(char *, uint64_t))(v44 + 8))(v32, v56);
        swift_release();
        (*(void (**)(uint64_t, char *, uint64_t))(v39 + 32))(v40, v52, v41);
        return (*(uint64_t (**)(char *, uint64_t))(v17 + 8))(v24, AssociatedTypeWitness);
      }

      uint64_t v9 = 0LL;
      (*(void (**)(char *, uint64_t))(v17 + 8))(v24, AssociatedTypeWitness);
      sub_186C5B2CC();
      if (!--v31)
      {
        uint64_t v34 = v49;
        goto LABEL_9;
      }
    }
  }

  swift_getAssociatedConformanceWitness();
  uint64_t v34 = v49;
LABEL_9:
  sub_186C5B0E0();
  int64_t v52 = *(char **)(v17 + 48);
  if (((unsigned int (*)(char *, uint64_t, uint64_t))v52)(v34, 1LL, AssociatedTypeWitness) == 1)
  {
    uint64_t v35 = v49;
LABEL_14:
    (*(void (**)(char *, uint64_t))(v44 + 8))(v32, v56);
    (*(void (**)(char *, uint64_t))(v42 + 8))(v35, v43);
    return v57;
  }

  else
  {
    uint64_t v50 = *(void (**)(char *, char *, uint64_t))(v17 + 32);
    uint64_t v36 = v38;
    uint64_t v35 = v49;
    while (1)
    {
      v50(v36, v35, AssociatedTypeWitness);
      v54(v36, v51);
      if (v9) {
        break;
      }
      uint64_t v9 = 0LL;
      (*(void (**)(char *, uint64_t))(v17 + 8))(v36, AssociatedTypeWitness);
      sub_186C5B2CC();
      sub_186C5B0E0();
    }

    (*(void (**)(char *, uint64_t))(v17 + 8))(v36, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t))(v44 + 8))(v32, v56);
    swift_release();
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v39 + 32))(v40, v51, v41);
  }

uint64_t sub_186C290D0()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void *)(v1 + 16);
  if (v2)
  {
    swift_bridgeObjectRetain();
    for (uint64_t i = 0LL; i != v2; ++i)
    {
      int v4 = *(void **)(v1 + 8 * i + 32);
      if (v4) {
        free(v4);
      }
    }

    swift_bridgeObjectRelease();
  }

  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

void sub_186C29178(void *a1@<X8>)
{
  *a1 = *v1;
}

uint64_t sub_186C29184()
{
  return 0LL;
}

uint64_t sub_186C2918C()
{
  return 2LL;
}

uint64_t *sub_186C29194()
{
  return sub_186C2AE68(*v0);
}

uint64_t **sub_186C2919C(uint64_t **a1, uint64_t a2, uint64_t a3)
{
  return sub_186C291A4(a1, a2, a3, *v3);
}

uint64_t **sub_186C291A4(uint64_t **result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  if (!a2) {
    goto LABEL_9;
  }
  if (!a3)
  {
LABEL_11:
    uint64_t v5 = a3;
    goto LABEL_12;
  }

  if ((a3 & 0x8000000000000000LL) == 0)
  {
    uint64_t v4 = *a4;
    if (*a4)
    {
      uint64_t v5 = 0LL;
      int v6 = a4 + 1;
      while (1)
      {
        *(void *)(a2 + 8 * v5) = v4;
        if (a3 - 1 == v5) {
          break;
        }
        a4 = v6;
        uint64_t v7 = *v6++;
        uint64_t v4 = v7;
        ++v5;
        if (!v7) {
          goto LABEL_12;
        }
      }

      a4 = v6;
      goto LABEL_11;
    }

uint64_t sub_186C29204()
{
  return sub_186C5AEC4();
}

void sub_186C29224(void *a1@<X8>)
{
  uint64_t v2 = **v1;
  if (v2) {
    ++*v1;
  }
  *a1 = v2;
}

uint64_t sub_186C29240()
{
  if (v6)
  {
    uint64_t v1 = v5;
    sub_186C5B260();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v4 = v1;
    sub_186C5ADD4();
  }

  else
  {
    uint64_t v2 = v5;
    sub_186C5B260();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v4 = v2;
  }

  sub_186C5ADD4();
  return v4;
}

uint64_t sub_186C293A8()
{
  return sub_186C29240();
}

unint64_t sub_186C293DC(uint64_t a1, unint64_t a2, char a3)
{
  unint64_t v5 = 115LL;
  if ((a3 & 1) == 0) {
    unint64_t v5 = 0xD000000000000010LL;
  }
  unint64_t v6 = 0x8000000186C665E0LL;
  if ((a3 & 1) != 0) {
    unint64_t v6 = 0xE100000000000000LL;
  }
  unint64_t v47 = v5;
  unint64_t v48 = v6;
  uint64_t v7 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000LL) == 0) {
    uint64_t v7 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (!v7)
  {
LABEL_23:
    sub_186C2BFE4();
    swift_allocError();
    *(void *)uint64_t v32 = a1;
    *(void *)(v32 + 8) = a2;
    *(void *)(v32 + 16) = v47;
    *(void *)(v32 + 24) = v48;
    *(_BYTE *)(v32 + 32) = 1;
    swift_bridgeObjectRetain();
    return swift_willThrow();
  }

  uint64_t v9 = 4 * v7;
  unint64_t v10 = 15LL;
  while (1)
  {
    uint64_t v11 = sub_186C5AE7C();
    uint64_t v13 = v12;
    if ((sub_186C5ACCC() & 1) == 0 && (v11 != 46 || v13 != 0xE100000000000000LL)) {
      break;
    }
    swift_bridgeObjectRelease();
LABEL_10:
    unint64_t v10 = sub_186C5ADBC();
    if (v9 == v10 >> 14) {
      goto LABEL_23;
    }
  }

  char v14 = sub_186C5B4F4();
  swift_bridgeObjectRelease();
  if ((v14 & 1) != 0) {
    goto LABEL_10;
  }
  swift_bridgeObjectRetain();
  uint64_t v15 = sub_186C5AE94();
  uint64_t v17 = v16;
  uint64_t v19 = v18;
  uint64_t v21 = v20;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  unint64_t v22 = sub_186C02870(v10, a1, a2);
  unint64_t v45 = v23;
  unint64_t v46 = v22;
  uint64_t v25 = v24;
  uint64_t v27 = v26;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  uint64_t v28 = sub_186C5AF6C();
  if ((v29 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v33 = MEMORY[0x186E4477C](v15, v17, v19, v21);
    uint64_t v35 = v34;
    swift_bridgeObjectRelease();
    sub_186C2BFE4();
    swift_allocError();
    *(void *)uint64_t v36 = v33;
    *(void *)(v36 + 8) = v35;
    *(void *)(v36 + 16) = 0LL;
    *(void *)(v36 + 24) = 0LL;
    *(_BYTE *)(v36 + 32) = 0;
    return swift_willThrow();
  }

  double v30 = *(double *)&v28;
  swift_bridgeObjectRelease();
  if ((a3 & 1) != 0 && (sub_186C2C028(v46, v45, v25, v27, 115LL, 0xE100000000000000LL) & 1) == 0)
  {
    uint64_t v38 = MEMORY[0x186E4477C](v46, v45, v25, v27);
    uint64_t v40 = v39;
    swift_bridgeObjectRelease();
    sub_186C2BFE4();
    swift_allocError();
    *(void *)uint64_t v41 = v38;
    *(void *)(v41 + 8) = v40;
    *(_OWORD *)(v41 + 16) = xmmword_186C60D60;
LABEL_33:
    *(_BYTE *)(v41 + 32) = 2;
    return swift_willThrow();
  }

  if ((sub_186C2C09C(29550LL, 0xE200000000000000LL, v46, v45, v25, v27) & 1) != 0)
  {
    swift_bridgeObjectRelease();
    unint64_t result = swift_bridgeObjectRelease();
    if ((~*(void *)&v30 & 0x7FF0000000000000LL) != 0)
    {
      if (v30 > -1.0)
      {
        if (v30 < 1.84467441e19) {
          return (unint64_t)v30;
        }
LABEL_47:
        __break(1u);
LABEL_48:
        __break(1u);
        goto LABEL_49;
      }
    }

    else
    {
      __break(1u);
    }

    __break(1u);
    goto LABEL_47;
  }

  if ((sub_186C2C09C(7583170LL, 0xA300000000000000LL, v46, v45, v25, v27) & 1) != 0
    || (sub_186C2C09C(29557LL, 0xE200000000000000LL, v46, v45, v25, v27) & 1) != 0)
  {
    swift_bridgeObjectRelease();
    unint64_t result = swift_bridgeObjectRelease();
    double v37 = v30 * 1000.0;
    if ((~COERCE__INT64(v30 * 1000.0) & 0x7FF0000000000000LL) == 0) {
      goto LABEL_48;
    }
    if (v37 <= -1.0)
    {
LABEL_49:
      __break(1u);
    }

    else if (v37 < 1.84467441e19)
    {
      return (unint64_t)v37;
    }

    __break(1u);
LABEL_51:
    __break(1u);
    goto LABEL_52;
  }

  if ((sub_186C2C09C(29549LL, 0xE200000000000000LL, v46, v45, v25, v27) & 1) == 0)
  {
LABEL_39:
    if ((sub_186C2C09C(115LL, 0xE100000000000000LL, v46, v45, v25, v27) & 1) != 0)
    {
      swift_bridgeObjectRelease();
      unint64_t result = swift_bridgeObjectRelease();
      double v37 = v30 * 1000000000.0;
      if ((~COERCE__INT64(v30 * 1000000000.0) & 0x7FF0000000000000LL) == 0)
      {
LABEL_53:
        __break(1u);
        goto LABEL_54;
      }

      if (v37 <= -1.0)
      {
LABEL_54:
        __break(1u);
        return result;
      }

      if (v37 < 1.84467441e19) {
        return (unint64_t)v37;
      }
      __break(1u);
    }

    uint64_t v42 = MEMORY[0x186E4477C](v46, v45, v25, v27);
    uint64_t v44 = v43;
    swift_bridgeObjectRelease();
    sub_186C2BFE4();
    swift_allocError();
    *(void *)uint64_t v41 = v42;
    *(void *)(v41 + 8) = v44;
    *(void *)(v41 + 16) = v47;
    *(void *)(v41 + 24) = v48;
    goto LABEL_33;
  }

  swift_bridgeObjectRelease();
  unint64_t result = swift_bridgeObjectRelease();
  double v37 = v30 * 1000000.0;
  if ((~COERCE__INT64(v30 * 1000000.0) & 0x7FF0000000000000LL) == 0) {
    goto LABEL_51;
  }
  if (v37 <= -1.0)
  {
LABEL_52:
    __break(1u);
    goto LABEL_53;
  }

  if (v37 >= 1.84467441e19)
  {
    __break(1u);
    goto LABEL_39;
  }

  return (unint64_t)v37;
}

unint64_t sub_186C29930(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000LL) == 0) {
    uint64_t v4 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (!v4)
  {
LABEL_18:
    sub_186C2BFE4();
    swift_allocError();
    *(void *)uint64_t v28 = a1;
    *(void *)(v28 + 8) = a2;
    *(_OWORD *)(v28 + 16) = xmmword_186C60D70;
    *(_BYTE *)(v28 + 32) = 1;
    swift_bridgeObjectRetain();
    return swift_willThrow();
  }

  uint64_t v5 = 4 * v4;
  unint64_t v6 = 15LL;
  while (1)
  {
    uint64_t v7 = sub_186C5AE7C();
    uint64_t v9 = v8;
    if ((sub_186C5ACCC() & 1) == 0 && (v7 != 46 || v9 != 0xE100000000000000LL)) {
      break;
    }
    swift_bridgeObjectRelease();
LABEL_6:
    unint64_t v6 = sub_186C5ADBC();
    if (v5 == v6 >> 14) {
      goto LABEL_18;
    }
  }

  char v10 = sub_186C5B4F4();
  swift_bridgeObjectRelease();
  if ((v10 & 1) != 0) {
    goto LABEL_6;
  }
  swift_bridgeObjectRetain();
  uint64_t v11 = sub_186C5AE94();
  uint64_t v13 = v12;
  uint64_t v15 = v14;
  uint64_t v17 = v16;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  unint64_t v18 = sub_186C02870(v6, a1, a2);
  unint64_t v20 = v19;
  uint64_t v38 = v21;
  uint64_t v23 = v22;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  uint64_t v24 = sub_186C5AF6C();
  if ((v25 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    uint64_t v29 = MEMORY[0x186E4477C](v11, v13, v15, v17);
    uint64_t v31 = v30;
    swift_bridgeObjectRelease();
    sub_186C2BFE4();
    swift_allocError();
    *(void *)uint64_t v32 = v29;
    *(void *)(v32 + 8) = v31;
    *(void *)(v32 + 16) = 0LL;
    *(void *)(v32 + 24) = 0LL;
    *(_BYTE *)(v32 + 32) = 0;
    return swift_willThrow();
  }

  double v26 = *(double *)&v24;
  swift_bridgeObjectRelease();
  if ((sub_186C2C09C(25197LL, 0xE200000000000000LL, v18, v20, v38, v23) & 1) != 0
    || (sub_186C2C09C(16973LL, 0xE200000000000000LL, v18, v20, v38, v23) & 1) != 0)
  {
    unint64_t result = swift_bridgeObjectRelease();
    if ((~*(void *)&v26 & 0x7FF0000000000000LL) != 0)
    {
      if (v26 > -1.0)
      {
        if (v26 < 1.84467441e19) {
          return (unint64_t)v26;
        }
LABEL_30:
        __break(1u);
LABEL_31:
        __break(1u);
        goto LABEL_32;
      }
    }

    else
    {
      __break(1u);
    }

    __break(1u);
    goto LABEL_30;
  }

  if ((sub_186C2C09C(25191LL, 0xE200000000000000LL, v18, v20, v38, v23) & 1) == 0
    && (sub_186C2C09C(16967LL, 0xE200000000000000LL, v18, v20, v38, v23) & 1) == 0)
  {
    uint64_t v34 = MEMORY[0x186E4477C](v18, v20, v38, v23);
    uint64_t v36 = v35;
    swift_bridgeObjectRelease();
    sub_186C2BFE4();
    swift_allocError();
    *(void *)uint64_t v37 = v34;
    *(void *)(v37 + 8) = v36;
    *(_OWORD *)(v37 + 16) = xmmword_186C60D70;
    *(_BYTE *)(v37 + 32) = 2;
    return swift_willThrow();
  }

  unint64_t result = swift_bridgeObjectRelease();
  double v33 = v26 * 1024.0;
  if ((~COERCE__INT64(v26 * 1024.0) & 0x7FF0000000000000LL) == 0) {
    goto LABEL_31;
  }
  if (v33 <= -1.0)
  {
LABEL_32:
    __break(1u);
  }

  else if (v33 < 1.84467441e19)
  {
    return (unint64_t)v33;
  }

  __break(1u);
  return result;
}

uint64_t sub_186C29CE8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_186C2C104(a1, a2, a3);
  uint64_t v7 = swift_bridgeObjectRelease();
  unint64_t v8 = *(void *)(v6 + 16);
  if (v8)
  {
    int64_t v9 = *(void *)(v6 + 32);
    unint64_t v10 = v8 - 1;
    if (v8 != 1)
    {
      if (v8 < 5)
      {
        unint64_t v11 = 1LL;
        goto LABEL_9;
      }

      unint64_t v11 = v10 & 0xFFFFFFFFFFFFFFFCLL | 1;
      int64x2_t v13 = vdupq_n_s64(v9);
      uint64_t v14 = (int64x2_t *)(v6 + 56);
      unint64_t v15 = v10 & 0xFFFFFFFFFFFFFFFCLL;
      int64x2_t v16 = v13;
      do
      {
        int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(v13, v14[-1]), (int8x16_t)v13, (int8x16_t)v14[-1]);
        int64x2_t v16 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(v16, *v14), (int8x16_t)v16, *(int8x16_t *)v14);
        v14 += 2;
        v15 -= 4LL;
      }

      while (v15);
      int8x16_t v17 = vbslq_s8((int8x16_t)vcgtq_s64(v13, v16), (int8x16_t)v13, (int8x16_t)v16);
      uint64_t v18 = vextq_s8(v17, v17, 8uLL).u64[0];
      int64_t v9 = (int64_t)vbsl_s8((int8x8_t)vcgtd_s64(v17.i64[0], v18), *(int8x8_t *)v17.i8, (int8x8_t)v18);
      if (v10 != (v10 & 0xFFFFFFFFFFFFFFFCLL))
      {
LABEL_9:
        unint64_t v19 = v8 - v11;
        unint64_t v20 = (int64_t *)(v6 + 8 * v11 + 32);
        do
        {
          int64_t v22 = *v20++;
          int64_t v21 = v22;
          if (v9 <= v22) {
            int64_t v9 = v21;
          }
          --v19;
        }

        while (v19);
      }
    }

    MEMORY[0x1895F8858](v7);
    swift_bridgeObjectRetain();
    uint64_t v12 = sub_186C2BD50(v6, a1, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_186C2C224);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return v12;
  }

  swift_bridgeObjectRelease();
  return MEMORY[0x18961AFE8];
}

uint64_t sub_186C29E68(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 - 8);
  MEMORY[0x1895F8858](a1);
  uint64_t v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if ((sub_186C5B158() & 1) == 0) {
    return sub_186C5AFA8();
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, v2, a2);
  sub_186C5AF84();
  return sub_186C5AF9C();
}

uint64_t sub_186C29F6C(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v38 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v5 = MEMORY[0x1895F8858](AssociatedTypeWitness);
  uint64_t v37 = (char *)&v35 - v6;
  uint64_t v43 = *(void *)(a1 - 8);
  uint64_t v7 = MEMORY[0x1895F8858](v5);
  uint64_t v41 = (char *)&v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v7);
  unint64_t v10 = (char *)&v35 - v9;
  swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v11 = swift_getAssociatedTypeWitness();
  uint64_t v35 = *(void *)(v11 - 8);
  MEMORY[0x1895F8858](v11);
  int64x2_t v13 = (char *)&v35 - v12;
  uint64_t v14 = swift_checkMetadataState();
  uint64_t v42 = *(void *)(v14 - 8);
  uint64_t v15 = MEMORY[0x1895F8858](v14);
  uint64_t v36 = (char *)&v35 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v15);
  uint64_t v18 = (char *)&v35 - v17;
  if ((sub_186C5B14C() & 1) != 0)
  {
    uint64_t v44 = 30768LL;
    unint64_t v45 = 0xE200000000000000LL;
    sub_186BFB8D0();
    sub_186C29E68((uint64_t)&v44, a1);
    swift_getAssociatedConformanceWitness();
    if ((sub_186C5AF90() & 1) == 0)
    {
      uint64_t v19 = AssociatedConformanceWitness;
      uint64_t v20 = sub_186C5B140();
      MEMORY[0x1895F8858](v20);
      *(&v35 - 4) = v14;
      *(&v35 - 3) = v19;
      *(&v35 - 2) = 16LL;
      swift_getAssociatedConformanceWitness();
      __swift_instantiateConcreteTypeFromMangledName(&qword_18C6A2A08);
      sub_186C5AEB8();
      (*(void (**)(char *, uint64_t))(v35 + 8))(v13, v11);
      uint64_t v21 = v42;
      uint64_t v22 = (uint64_t)v36;
      (*(void (**)(char *, char *, uint64_t))(v42 + 32))(v36, v18, v14);
      if ((v45 & 0x100) == 0)
      {
        char v30 = v45;
        uint64_t v31 = v44;
        (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v22, v14);
        uint64_t v46 = v31;
        if ((v30 & 1) != 0) {
          return 0LL;
        }
        return v46;
      }

      unint64_t v23 = sub_186C2C2A8();
      sub_186C2B018(v22, 16LL, MEMORY[0x189618CD8], v23, (uint64_t)&v46);
      (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v22, v14);
LABEL_8:
      if ((v47 & 1) != 0) {
        return 0LL;
      }
      return v46;
    }

    (*(void (**)(char *, uint64_t))(v42 + 8))(v18, v14);
  }

  else
  {
    uint64_t v24 = v43;
    (*(void (**)(char *, uint64_t, uint64_t))(v43 + 16))(v10, v2, a1);
    if ((sub_186C5AF90() & 1) != 0)
    {
      (*(void (**)(char *, uint64_t))(v24 + 8))(v10, a1);
    }

    else
    {
      char v25 = v37;
      uint64_t v26 = sub_186C5B140();
      MEMORY[0x1895F8858](v26);
      *(&v35 - 4) = a1;
      *(&v35 - 3) = a2;
      *(&v35 - 2) = 10LL;
      uint64_t v27 = AssociatedTypeWitness;
      swift_getAssociatedConformanceWitness();
      __swift_instantiateConcreteTypeFromMangledName(&qword_18C6A2A08);
      sub_186C5AEB8();
      (*(void (**)(char *, uint64_t))(v38 + 8))(v25, v27);
      uint64_t v28 = (uint64_t)v41;
      (*(void (**)(char *, char *, uint64_t))(v24 + 32))(v41, v10, a1);
      if ((v45 & 0x100) != 0)
      {
        unint64_t v29 = sub_186C2C2A8();
        sub_186C2B018(v28, 10LL, MEMORY[0x189618CD8], v29, (uint64_t)&v46);
        (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v28, a1);
        goto LABEL_8;
      }

      char v32 = v45;
      uint64_t v33 = v44;
      (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v28, a1);
      uint64_t v46 = v33;
      if ((v32 & 1) == 0) {
        return v46;
      }
    }
  }

  return 0LL;
}

uint64_t sub_186C2A4A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = swift_allocBox();
  sub_186C5AEDC();
  uint64_t v7 = (void *)swift_allocObject();
  v7[2] = a1;
  v7[3] = a2;
  v7[4] = a3;
  v7[5] = v6;
  uint64_t v8 = sub_186C5B20C();
  MEMORY[0x186E46630](MEMORY[0x189619118], v8);
  return sub_186C5B224();
}

uint64_t sub_186C2A56C@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v43 = a4;
  uint64_t v5 = *(void *)(*(void *)(*(void *)(a3 + 8) + 24LL) + 16LL);
  uint64_t v38 = *(void *)(a2 + 8);
  swift_getAssociatedTypeWitness();
  uint64_t v36 = v5;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1895F8858](AssociatedTypeWitness);
  uint64_t v7 = swift_checkMetadataState();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = MEMORY[0x1895F8858](v7);
  uint64_t v37 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = MEMORY[0x1895F8858](v9);
  int64x2_t v13 = (char *)&v34 - v12;
  uint64_t v14 = MEMORY[0x1895F8858](v11);
  uint64_t v40 = (char *)&v34 - v15;
  MEMORY[0x1895F8858](v14);
  uint64_t v17 = (char *)&v34 - v16;
  uint64_t v18 = swift_projectBox();
  swift_beginAccess();
  uint64_t v39 = v8;
  uint64_t v42 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
  v42(v17, v18, v7);
  char v19 = sub_186C5B1C4();
  uint64_t v41 = v18;
  if ((v19 & 1) != 0)
  {
    if (sub_186C5B1B8() < 64)
    {
      uint64_t v20 = sub_186C5B1AC();
      uint64_t v21 = *(void (**)(char *, uint64_t))(v39 + 8);
      v21(v17, v7);
      uint64_t v22 = v43;
      goto LABEL_13;
    }

    uint64_t v45 = 0LL;
    sub_186C2C9DC();
    char v25 = v40;
    sub_186C5B170();
    char v29 = sub_186C5ACFC();
    uint64_t v21 = *(void (**)(char *, uint64_t))(v39 + 8);
    v21(v25, v7);
    v21(v17, v7);
    uint64_t v22 = v43;
    if ((v29 & 1) == 0) {
      goto LABEL_18;
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a1 - 8) + 56LL))( v22,  1LL,  1LL,  a1);
  }

  uint64_t v34 = v13;
  uint64_t v35 = a1;
  char v23 = sub_186C5B1C4();
  uint64_t v24 = sub_186C5B1B8();
  if ((v23 & 1) == 0)
  {
    if (v24 < 64)
    {
      uint64_t v20 = sub_186C5B1AC();
      uint64_t v21 = *(void (**)(char *, uint64_t))(v39 + 8);
      v21(v17, v7);
      a1 = v35;
      uint64_t v22 = v43;
      uint64_t v18 = v41;
LABEL_13:
      char v25 = v40;
      if (!v20) {
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a1 - 8) + 56LL))( v22,  1LL,  1LL,  a1);
      }
      goto LABEL_18;
    }

    goto LABEL_15;
  }

  if (v24 > 64)
  {
LABEL_15:
    uint64_t v45 = 0LL;
    sub_186C2C9DC();
    char v25 = v40;
    sub_186C5B170();
    char v30 = sub_186C5ACFC();
    uint64_t v21 = *(void (**)(char *, uint64_t))(v39 + 8);
    v21(v25, v7);
    v21(v17, v7);
    a1 = v35;
    uint64_t v22 = v43;
    uint64_t v18 = v41;
    if ((v30 & 1) == 0) {
      goto LABEL_18;
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a1 - 8) + 56LL))( v22,  1LL,  1LL,  a1);
  }

  swift_getAssociatedConformanceWitness();
  sub_186C5B50C();
  char v25 = v40;
  sub_186C5B4E8();
  char v26 = sub_186C5ACF0();
  uint64_t v21 = *(void (**)(char *, uint64_t))(v39 + 8);
  v21(v25, v7);
  uint64_t v27 = v34;
  v42(v34, (uint64_t)v17, v7);
  a1 = v35;
  uint64_t v18 = v41;
  if ((v26 & 1) == 0)
  {
    v21(v27, v7);
    v21(v17, v7);
    goto LABEL_18;
  }

  uint64_t v28 = sub_186C5B1AC();
  v21(v27, v7);
  v21(v17, v7);
  uint64_t v22 = v43;
  if (!v28) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a1 - 8) + 56LL))( v22,  1LL,  1LL,  a1);
  }
LABEL_18:
  swift_beginAccess();
  v42(v25, v18, v7);
  uint64_t v32 = sub_186C5B188();
  v21(v25, v7);
  uint64_t v44 = 1LL;
  sub_186C2C9DC();
  uint64_t v33 = v37;
  sub_186C5B1D0();
  uint64_t v44 = v32;
  sub_186C5B1A0();
  v21(v33, v7);
  sub_186C5B17C();
  swift_beginAccess();
  sub_186C5B194();
  swift_endAccess();
  v21(v33, v7);
  v42(v33, (uint64_t)v25, v7);
  sub_186C5AEE8();
  return ((uint64_t (*)(char *, uint64_t))v21)(v25, v7);
}

uint64_t sub_186C2AB58()
{
  v2[1] = *MEMORY[0x1895F89C0];
  size_t v1 = 8LL;
  v2[0] = 0LL;
  sysctlbyname("hw.memsize", v2, &v1, 0LL, 0LL);
  if ((v2[0] & 0x8000000000000000LL) != 0) {
    __break(1u);
  }
  return v2[0] >> 20;
}

uint64_t sub_186C2ABD0()
{
  return os_variant_has_internal_content();
}

uint64_t sub_186C2ABEC()
{
  uint64_t v3 = *MEMORY[0x1895F89C0];
  int v2 = 0;
  size_t v1 = 4LL;
  sysctlbyname("hw.logicalcpu_max", &v2, &v1, 0LL, 0LL);
  return v2;
}

char *sub_186C2AC5C(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_18C6A2A50);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 25;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 3);
  }

  else
  {
    uint64_t v10 = (char *)MEMORY[0x18961AFE8];
  }

  int64x2_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8]) {
      memmove(v13, v14, 8 * v8);
    }
    *((void *)a4 + 2) = 0LL;
  }

  else
  {
    memcpy(v13, v14, 8 * v8);
  }

  swift_bridgeObjectRelease();
  return v10;
}

char *sub_186C2AD54(char *a1, int64_t a2, char a3)
{
  unint64_t result = sub_186C2AD70(a1, a2, a3, *v3);
  *uint64_t v3 = result;
  return result;
}

char *sub_186C2AD70(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_18C6A2A40);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 25;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 3);
  }

  else
  {
    uint64_t v10 = (char *)MEMORY[0x18961AFE8];
  }

  int64x2_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8]) {
      memmove(v13, v14, 8 * v8);
    }
    *((void *)a4 + 2) = 0LL;
  }

  else
  {
    memcpy(v13, v14, 8 * v8);
  }

  swift_release();
  return v10;
}

uint64_t *sub_186C2AE68(uint64_t *result)
{
  uint64_t v1 = *result;
  int v2 = (void *)MEMORY[0x18961AFE8];
  uint64_t v3 = 0LL;
  if (*result)
  {
    uint64_t v4 = (void *)(MEMORY[0x18961AFE8] + 32LL);
    char v5 = result + 1;
    while (1)
    {
      if (!v3)
      {
        unint64_t v6 = v2[3];
        int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
        if (v7 <= 1) {
          uint64_t v8 = 1LL;
        }
        else {
          uint64_t v8 = v7;
        }
        __swift_instantiateConcreteTypeFromMangledName(&qword_18C6A2A28);
        uint64_t v9 = (void *)swift_allocObject();
        int64_t v10 = _swift_stdlib_malloc_size(v9);
        uint64_t v11 = v10 - 32;
        if (v10 < 32) {
          uint64_t v11 = v10 - 25;
        }
        uint64_t v12 = v11 >> 3;
        void v9[2] = v8;
        v9[3] = 2 * (v11 >> 3);
        unint64_t v13 = (unint64_t)(v9 + 4);
        uint64_t v14 = v2[3] >> 1;
        if (v2[2])
        {
          void v2[2] = 0LL;
        }

        uint64_t v4 = (void *)(v13 + 8 * v14);
        uint64_t v3 = (v12 & 0x7FFFFFFFFFFFFFFFLL) - v14;
        unint64_t result = (uint64_t *)swift_release();
        int v2 = v9;
      }

      BOOL v16 = __OFSUB__(v3--, 1LL);
      if (v16) {
        break;
      }
      *v4++ = v1;
      uint64_t v17 = *v5++;
      uint64_t v1 = v17;
      if (!v17) {
        goto LABEL_21;
      }
    }

    __break(1u);
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }

unsigned __int8 *sub_186C2AFA8@<X0>( unsigned __int8 *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  int v7 = *result;
  if (v7 == 43)
  {
    BOOL v8 = a2-- < 1;
    if (v8) {
      goto LABEL_15;
    }
    if (result) {
      ++result;
    }
    else {
      unint64_t result = 0LL;
    }
LABEL_12:
    int v9 = 0;
    return (unsigned __int8 *)sub_186C2B164(result, a2, a3, v9, a4, a5, a6);
  }

  if (v7 != 45) {
    goto LABEL_12;
  }
  BOOL v8 = a2-- < 1;
  if (!v8)
  {
    if (result) {
      ++result;
    }
    else {
      unint64_t result = 0LL;
    }
    int v9 = 1;
    return (unsigned __int8 *)sub_186C2B164(result, a2, a3, v9, a4, a5, a6);
  }

  __break(1u);
LABEL_15:
  __break(1u);
  return result;
}

uint64_t sub_186C2B018@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X5>, uint64_t a5@<X8>)
{
  uint64_t v11 = sub_186C5AE88();
  unint64_t v13 = v12;
  sub_186C5B080();
  if ((v13 & 0x1000000000000000LL) == 0)
  {
    if ((v13 & 0x2000000000000000LL) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t v15 = HIBYTE(v13) & 0xF;
    v20[0] = v11;
    v20[1] = v13 & 0xFFFFFFFFFFFFFFLL;
    uint64_t v14 = (unsigned __int8 *)v20;
    goto LABEL_7;
  }

  uint64_t v11 = sub_186C2B6CC();
  unint64_t v17 = v16;
  swift_bridgeObjectRelease();
  unint64_t v13 = v17;
  if ((v17 & 0x2000000000000000LL) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v11 & 0x1000000000000000LL) != 0)
  {
    uint64_t v14 = (unsigned __int8 *)((v13 & 0xFFFFFFFFFFFFFFFLL) + 32);
    uint64_t v15 = v11 & 0xFFFFFFFFFFFFLL;
  }

  else
  {
    uint64_t v14 = (unsigned __int8 *)sub_186C5B2B4();
  }

uint64_t sub_186C2B164@<X0>( unsigned __int8 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  int v51 = a4;
  int64_t v52 = a1;
  uint64_t v53 = a7;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  MEMORY[0x1895F8858](TupleTypeMetadata2);
  uint64_t v50 = (char *)&v46 - v12;
  uint64_t v55 = a6;
  uint64_t v13 = *(void *)(a6 + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v15 = MEMORY[0x1895F8858](AssociatedTypeWitness);
  uint64_t v58 = *(void *)(a5 - 8);
  uint64_t v16 = MEMORY[0x1895F8858](v15);
  unint64_t v18 = (char *)&v46 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = MEMORY[0x1895F8858](v16);
  uint64_t v20 = MEMORY[0x1895F8858](v19);
  uint64_t v22 = (char *)&v46 - v21;
  MEMORY[0x1895F8858](v20);
  char v25 = (char *)&v46 - v24;
  if (!a2) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v58 + 56))(v53, 1LL, 1LL, a5);
  }
  uint64_t v57 = v23;
  int v26 = a3 + 48;
  int v27 = a3 + 55;
  int v28 = a3 + 87;
  if (a3 <= 10) {
    int v28 = 97;
  }
  int v46 = v28;
  if (a3 <= 10) {
    int v27 = 65;
  }
  int v47 = v27;
  uint64_t v62 = a3;
  if (a3 > 10) {
    int v26 = 58;
  }
  int v49 = v26;
  sub_186C2C9DC();
  uint64_t v56 = v25;
  uint64_t v54 = v13;
  sub_186C5B170();
  swift_getAssociatedConformanceWitness();
  sub_186C5B50C();
  sub_186C5B4E8();
  char v29 = v52;
  if (!v52)
  {
    uint64_t v33 = *(void (**)(char *, uint64_t))(v58 + 8);
    char v30 = v56;
LABEL_28:
    v33(v30, a5);
    uint64_t v41 = v58;
    uint64_t v42 = v53;
    (*(void (**)(uint64_t, char *, uint64_t))(v58 + 32))(v53, v22, a5);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v41 + 56))(v42, 0LL, 1LL, a5);
  }

  char v30 = v56;
  while (1)
  {
    unsigned int v31 = *v29;
    if (v31 >= 0x30 && v31 < v49)
    {
      uint64_t v48 = a2;
      char v59 = v31 - 48;
      sub_186C2CA20();
      sub_186C5B170();
      goto LABEL_20;
    }

    uint64_t v48 = a2;
    char v60 = v31 - 55;
    sub_186C2CA20();
LABEL_19:
    sub_186C5B170();
    char v30 = v56;
LABEL_20:
    LODWORD(v52) = sub_186C5B338();
    uint64_t v32 = v58;
    uint64_t v33 = *(void (**)(char *, uint64_t))(v58 + 8);
    v33(v22, a5);
    uint64_t v34 = *(void (**)(char *, char *, uint64_t))(v32 + 32);
    v34(v22, v18, a5);
    uint64_t v35 = v18;
    uint64_t v36 = v57;
    if ((v51 & 1) != 0) {
      int v37 = sub_186C5B344();
    }
    else {
      int v37 = sub_186C5B32C();
    }
    int v38 = v37;
    v33(v36, a5);
    v33(v22, a5);
    uint64_t v39 = v50;
    v34(v50, v35, a5);
    v34(v22, v39, a5);
    if (((v52 | v38) & 1) != 0)
    {
      v33(v22, a5);
      v33(v30, a5);
      uint64_t v40 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v58 + 56);
      return v40(v53, 1LL, 1LL, a5);
    }

    unint64_t v18 = v35;
    ++v29;
    a2 = v48 - 1;
    if (v48 == 1) {
      goto LABEL_28;
    }
  }

  if (v31 >= 0x61 && v31 < v46)
  {
    uint64_t v48 = a2;
    char v61 = v31 - 87;
    sub_186C2CA20();
    goto LABEL_19;
  }

  uint64_t v44 = v58;
  uint64_t v45 = *(void (**)(char *, uint64_t))(v58 + 8);
  v45(v22, a5);
  v45(v56, a5);
  uint64_t v40 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v44 + 56);
  return v40(v53, 1LL, 1LL, a5);
}

unsigned __int8 *sub_186C2B65C@<X0>( unsigned __int8 *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X6>, uint64_t a6@<X8>)
{
  int v6 = *result;
  if (v6 == 43)
  {
    BOOL v7 = a2-- < 1;
    if (v7) {
      goto LABEL_15;
    }
    if (result) {
      ++result;
    }
    else {
      unint64_t result = 0LL;
    }
LABEL_12:
    int v8 = 0;
    return (unsigned __int8 *)sub_186C2B164(result, a2, a3, v8, a4, a5, a6);
  }

  if (v6 != 45) {
    goto LABEL_12;
  }
  BOOL v7 = a2-- < 1;
  if (!v7)
  {
    if (result) {
      ++result;
    }
    else {
      unint64_t result = 0LL;
    }
    int v8 = 1;
    return (unsigned __int8 *)sub_186C2B164(result, a2, a3, v8, a4, a5, a6);
  }

  __break(1u);
LABEL_15:
  __break(1u);
  return result;
}

uint64_t sub_186C2B6CC()
{
  unint64_t v0 = sub_186C5AE94();
  uint64_t v4 = sub_186C2B748(v0, v1, v2, v3);
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t sub_186C2B748(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  if ((a4 & 0x1000000000000000LL) != 0)
  {
    unint64_t v9 = sub_186C2B88C(a1, a2, a3, a4);
    if (v9)
    {
      uint64_t v10 = v9;
      uint64_t v11 = sub_186BF80C8(v9, 0LL);
      unint64_t v12 = sub_186C2B978((unint64_t)v14, (uint64_t)(v11 + 4), v10, a1, a2, a3, a4);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      if (v12 != v10)
      {
        __break(1u);
        goto LABEL_9;
      }
    }

    else
    {
      uint64_t v11 = (void *)MEMORY[0x18961AFE8];
    }

    uint64_t v13 = MEMORY[0x186E44794](v11 + 4, v11[2]);
    swift_release();
    return v13;
  }

  else
  {
    if ((a4 & 0x2000000000000000LL) == 0)
    {
      if ((a3 & 0x1000000000000000LL) != 0) {
LABEL_12:
      }
        JUMPOUT(0x186E44794LL);
LABEL_9:
      sub_186C5B2B4();
      goto LABEL_12;
    }

    v14[0] = a3;
    v14[1] = a4 & 0xFFFFFFFFFFFFFFLL;
    return MEMORY[0x186E44794]((char *)v14 + (a1 >> 16), (a2 >> 16) - (a1 >> 16));
  }

unint64_t sub_186C2B88C( unint64_t result, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v7 = result;
  uint64_t v8 = (a3 >> 59) & 1;
  if ((a4 & 0x1000000000000000LL) == 0) {
    LOBYTE(v8) = 1;
  }
  uint64_t v9 = 4LL << v8;
  if ((result & 0xC) == 4LL << v8)
  {
    unint64_t result = sub_186C2BB88(result, a3, a4);
    unint64_t v7 = result;
  }

  if ((a2 & 0xC) == v9)
  {
    unint64_t result = sub_186C2BB88(a2, a3, a4);
    a2 = result;
    if ((a4 & 0x1000000000000000LL) == 0) {
      return (a2 >> 16) - (v7 >> 16);
    }
  }

  else if ((a4 & 0x1000000000000000LL) == 0)
  {
    return (a2 >> 16) - (v7 >> 16);
  }

  unint64_t v10 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000LL) == 0) {
    unint64_t v10 = a3 & 0xFFFFFFFFFFFFLL;
  }
  if (v10 < v7 >> 16)
  {
    __break(1u);
  }

  else if (v10 >= a2 >> 16)
  {
    return sub_186C5AE1C();
  }

  __break(1u);
  return result;
}

unint64_t sub_186C2B978( unint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6, unint64_t a7)
{
  uint64_t v9 = (void *)result;
  if (!a2) {
    goto LABEL_5;
  }
  if (!a3)
  {
    unint64_t v12 = a4;
    uint64_t v11 = 0LL;
    goto LABEL_33;
  }

  if (a3 < 0) {
    goto LABEL_36;
  }
  unint64_t v10 = a5 >> 14;
  unint64_t v27 = a4 >> 14;
  if (a4 >> 14 == a5 >> 14)
  {
LABEL_5:
    uint64_t v11 = 0LL;
    unint64_t v12 = a4;
LABEL_33:
    *uint64_t v9 = a4;
    v9[1] = a5;
    void v9[2] = a6;
    v9[3] = a7;
    v9[4] = v12;
    return v11;
  }

  uint64_t v11 = 0LL;
  uint64_t v14 = (a6 >> 59) & 1;
  if ((a7 & 0x1000000000000000LL) == 0) {
    LOBYTE(v14) = 1;
  }
  uint64_t v15 = 4LL << v14;
  uint64_t v21 = (a7 & 0xFFFFFFFFFFFFFFFLL) + 32;
  uint64_t v22 = a7 & 0xFFFFFFFFFFFFFFLL;
  uint64_t v16 = HIBYTE(a7) & 0xF;
  if ((a7 & 0x2000000000000000LL) == 0) {
    uint64_t v16 = a6 & 0xFFFFFFFFFFFFLL;
  }
  unint64_t v23 = v16;
  uint64_t v26 = a3 - 1;
  unint64_t v12 = a4;
  while (1)
  {
    unint64_t v17 = v12 & 0xC;
    unint64_t result = v12;
    if (v17 == v15) {
      unint64_t result = sub_186C2BB88(v12, a6, a7);
    }
    if (result >> 14 < v27 || result >> 14 >= v10) {
      break;
    }
    if ((a7 & 0x1000000000000000LL) != 0)
    {
      unint64_t result = sub_186C5AE28();
      char v19 = result;
      if (v17 != v15) {
        goto LABEL_23;
      }
    }

    else
    {
      unint64_t v18 = result >> 16;
      if ((a7 & 0x2000000000000000LL) != 0)
      {
        v28[0] = a6;
        v28[1] = v22;
        char v19 = *((_BYTE *)v28 + v18);
        if (v17 != v15) {
          goto LABEL_23;
        }
      }

      else
      {
        unint64_t result = v21;
        if ((a6 & 0x1000000000000000LL) == 0) {
          unint64_t result = sub_186C5B2B4();
        }
        char v19 = *(_BYTE *)(result + v18);
        if (v17 != v15)
        {
LABEL_23:
          if ((a7 & 0x1000000000000000LL) == 0) {
            goto LABEL_24;
          }
          goto LABEL_27;
        }
      }
    }

    unint64_t result = sub_186C2BB88(v12, a6, a7);
    unint64_t v12 = result;
    if ((a7 & 0x1000000000000000LL) == 0)
    {
LABEL_24:
      unint64_t v12 = (v12 & 0xFFFFFFFFFFFF0000LL) + 65540;
      goto LABEL_29;
    }

uint64_t sub_186C2BB88(unint64_t a1, uint64_t a2, uint64_t a3)
{
  char v3 = a1;
  uint64_t v4 = (unsigned __int16)a1 >> 14;
  if ((a3 & 0x1000000000000000LL) == 0 || (a2 & 0x800000000000000LL) != 0)
  {
    uint64_t v10 = sub_186C5AE40();
    uint64_t v11 = v10 + (v4 << 16);
    unint64_t v12 = v10 & 0xFFFFFFFFFFFFFFFCLL | v3 & 3;
    unint64_t v13 = v11 & 0xFFFFFFFFFFFF0000LL;
    if (!v4) {
      unint64_t v13 = v12;
    }
    return v13 | 4;
  }

  else
  {
    uint64_t v5 = MEMORY[0x186E4480C](15LL, a1 >> 16);
    uint64_t v6 = v5 + (v4 << 16);
    unint64_t v7 = v5 & 0xFFFFFFFFFFFFFFFCLL | v3 & 3;
    unint64_t v8 = v6 & 0xFFFFFFFFFFFF0000LL;
    if (!v4) {
      unint64_t v8 = v7;
    }
    return v8 | 8;
  }

uint64_t sub_186C2BC00()
{
  unint64_t v0 = sub_186C5B3BC();
  swift_bridgeObjectRelease();
  if (v0 >= 6) {
    return 6LL;
  }
  else {
    return v0;
  }
}

uint64_t sub_186C2BC48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  void v15[2] = a2;
  v15[3] = a3;
  v15[4] = a4;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C6A2A48);
  uint64_t v10 = sub_186C28BC4( (void (*)(char *, char *))sub_186C2CA64,  (uint64_t)v15,  a2,  v8,  MEMORY[0x18961A520],  a3,  MEMORY[0x18961A528],  v9);
  swift_bridgeObjectRetain();
  uint64_t v11 = (char *)v10;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v11 = sub_186C2AC5C(0LL, *(void *)(v10 + 16) + 1LL, 1, (char *)v10);
  }
  unint64_t v13 = *((void *)v11 + 2);
  unint64_t v12 = *((void *)v11 + 3);
  if (v13 >= v12 >> 1) {
    uint64_t v11 = sub_186C2AC5C((char *)(v12 > 1), v13 + 1, 1, v11);
  }
  *((void *)v11 + 2) = v13 + 1;
  *(void *)&v11[8 * v13 + 32] = 0LL;
  swift_bridgeObjectRelease();
  *(void *)(v5 + 16) = v11;
  return v5;
}

uint64_t sub_186C2BD50(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t))
{
  unint64_t v5 = *(void *)(a1 + 16);
  unint64_t v6 = *(void *)(a2 + 16);
  if (v6 >= v5) {
    int64_t v7 = *(void *)(a1 + 16);
  }
  else {
    int64_t v7 = *(void *)(a2 + 16);
  }
  uint64_t v40 = MEMORY[0x18961AFE8];
  sub_186BEF8C8(0LL, v7, 0);
  int64_t v32 = v7;
  uint64_t v34 = a1;
  uint64_t v35 = a2;
  unint64_t v36 = v5;
  int64_t v33 = v6;
  if (v7)
  {
    uint64_t v8 = (uint64_t *)(a1 + 32);
    swift_bridgeObjectRetain();
    uint64_t result = swift_bridgeObjectRetain();
    uint64_t v10 = (uint64_t *)(a2 + 40);
    while (v5)
    {
      if (!v6) {
        goto LABEL_26;
      }
      uint64_t v11 = *v8;
      uint64_t v12 = *(v10 - 1);
      uint64_t v13 = *v10;
      swift_bridgeObjectRetain();
      uint64_t v39 = a3(v11, v12, v13);
      uint64_t v15 = v14;
      uint64_t result = swift_bridgeObjectRelease();
      unint64_t v17 = *(void *)(v40 + 16);
      unint64_t v16 = *(void *)(v40 + 24);
      if (v17 >= v16 >> 1) {
        uint64_t result = (uint64_t)sub_186BEF8C8((char *)(v16 > 1), v17 + 1, 1);
      }
      *(void *)(v40 + 16) = v17 + 1;
      uint64_t v18 = v40 + 16 * v17;
      --v6;
      *(void *)(v18 + 32) = v39;
      *(void *)(v18 + 40) = v15;
      --v5;
      v10 += 2;
      ++v8;
      if (!--v7) {
        goto LABEL_13;
      }
    }

    __break(1u);
LABEL_26:
    __break(1u);
  }

  else
  {
    swift_bridgeObjectRetain();
    uint64_t result = swift_bridgeObjectRetain();
LABEL_13:
    if (v36 <= v33)
    {
LABEL_24:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v40;
    }

    uint64_t v19 = 0LL;
    if (v32 <= v33) {
      int64_t v20 = v33;
    }
    else {
      int64_t v20 = v32;
    }
    int64_t v37 = v20 - v32;
    unint64_t v21 = v36 - v32;
    uint64_t v22 = (uint64_t *)(v35 + 16 * v32 + 40);
    while (v21 != v19)
    {
      if (v33 - v32 == v19) {
        goto LABEL_24;
      }
      if (v37 == v19) {
        goto LABEL_28;
      }
      uint64_t v23 = *(void *)(v34 + 8 * v32 + 32 + 8 * v19);
      uint64_t v24 = *(v22 - 1);
      uint64_t v25 = *v22;
      swift_bridgeObjectRetain();
      uint64_t v26 = a3(v23, v24, v25);
      uint64_t v28 = v27;
      uint64_t result = swift_bridgeObjectRelease();
      unint64_t v30 = *(void *)(v40 + 16);
      unint64_t v29 = *(void *)(v40 + 24);
      if (v30 >= v29 >> 1) {
        uint64_t result = (uint64_t)sub_186BEF8C8((char *)(v29 > 1), v30 + 1, 1);
      }
      *(void *)(v40 + 16) = v30 + 1;
      uint64_t v31 = v40 + 16 * v30;
      *(void *)(v31 + 32) = v26;
      *(void *)(v31 + 40) = v28;
      ++v19;
      v22 += 2;
      if (v21 == v19) {
        goto LABEL_24;
      }
    }
  }

  __break(1u);
LABEL_28:
  __break(1u);
  return result;
}

unint64_t sub_186C2BFE4()
{
  unint64_t result = qword_18C6A29F8;
  if (!qword_18C6A29F8)
  {
    unint64_t result = MEMORY[0x186E46630](&unk_186C60C4C, &type metadata for SuffixedNumberError);
    atomic_store(result, (unint64_t *)&qword_18C6A29F8);
  }

  return result;
}

uint64_t sub_186C2C028( unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  if ((a6 & 0x2000000000000000LL) != 0) {
    uint64_t v6 = HIBYTE(a6) & 0xF;
  }
  else {
    uint64_t v6 = a5 & 0xFFFFFFFFFFFFLL;
  }
  if (a3 == a5 && a4 == a6 && !(a1 >> 16) && a2 >> 16 == v6) {
    return 1LL;
  }
  else {
    return sub_186C5B4D0() & 1;
  }
}

uint64_t sub_186C2C09C( uint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  if ((a2 & 0x2000000000000000LL) != 0) {
    uint64_t v7 = HIBYTE(a2) & 0xF;
  }
  else {
    uint64_t v7 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (a1 == a5 && a2 == a6 && !(a3 >> 16) && v7 == a4 >> 16) {
    return 1LL;
  }
  else {
    return sub_186C5B4D0() & 1;
  }
}

uint64_t sub_186C2C104(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = MEMORY[0x18961AFE8];
  if (v3)
  {
    uint64_t v15 = MEMORY[0x18961AFE8];
    sub_186C2AD54(0LL, v3, 0);
    uint64_t v4 = v15;
    uint64_t v8 = (unint64_t *)(a1 + 40);
    do
    {
      uint64_t v9 = *(v8 - 1);
      unint64_t v10 = *v8;
      swift_bridgeObjectRetain();
      sub_186C018DC(a2, a3, v9, v10);
      uint64_t v11 = sub_186C5AE34();
      swift_bridgeObjectRelease();
      unint64_t v13 = *(void *)(v15 + 16);
      unint64_t v12 = *(void *)(v15 + 24);
      if (v13 >= v12 >> 1) {
        sub_186C2AD54((char *)(v12 > 1), v13 + 1, 1);
      }
      v8 += 2;
      *(void *)(v15 + 16) = v13 + 1;
      *(void *)(v15 + 8 * v13 + 32) = v11;
      --v3;
    }

    while (v3);
  }

  return v4;
}

uint64_t sub_186C2C224(uint64_t result)
{
  uint64_t v2 = *(void *)(v1 + 16);
  uint64_t v3 = *(void *)(v1 + 24);
  BOOL v4 = __OFADD__(v2, v3);
  uint64_t v5 = v2 + v3;
  if (v4)
  {
    __break(1u);
  }

  else if (!__OFSUB__(v5, result))
  {
    uint64_t v6 = MEMORY[0x186E44860](32LL, 0xE100000000000000LL, v5 - result);
    sub_186C5ADD4();
    return v6;
  }

  __break(1u);
  return result;
}

unsigned __int8 *sub_186C2C294@<X0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_186C2C2EC(a1, a2, a3);
}

unint64_t sub_186C2C2A8()
{
  unint64_t result = qword_18C6A2A00;
  if (!qword_18C6A2A00)
  {
    unint64_t result = MEMORY[0x186E46630](MEMORY[0x189618D00], MEMORY[0x189618CD8]);
    atomic_store(result, (unint64_t *)&qword_18C6A2A00);
  }

  return result;
}

unsigned __int8 *sub_186C2C2EC@<X0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v7 = *(void *)(v3 + 32);
  unint64_t v8 = sub_186C2C2A8();
  return sub_186C2AFA8(a1, a2, v7, MEMORY[0x189618CD8], v8, a3);
}

uint64_t sub_186C2C364()
{
  return swift_deallocObject();
}

uint64_t sub_186C2C388@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v4 = *(void *)(v1 + 32);
  uint64_t v3 = *(void *)(v1 + 40);
  uint64_t v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = *(_OWORD *)(v1 + 16);
  *(void *)(v5 + 32) = v4;
  *(void *)(v5 + 40) = v3;
  swift_retain();
  uint64_t result = sub_186C5B218();
  *a1 = result;
  return result;
}

unint64_t sub_186C2C410()
{
  unint64_t result = qword_18C6A2A10;
  if (!qword_18C6A2A10)
  {
    unint64_t result = MEMORY[0x186E46630](&unk_186C60A8C, &type metadata for StandardFile.Mode);
    atomic_store(result, (unint64_t *)&qword_18C6A2A10);
  }

  return result;
}

unint64_t sub_186C2C458()
{
  unint64_t result = qword_18C6A2A18;
  if (!qword_18C6A2A18)
  {
    unint64_t result = MEMORY[0x186E46630](&unk_186C60BD4, &type metadata for NullTerminatedCStringArrayIterator);
    atomic_store(result, (unint64_t *)&qword_18C6A2A18);
  }

  return result;
}

void *__swift_memcpy8_8(void *result, void *a2)
{
  *unint64_t result = *a2;
  return result;
}

ValueMetadata *type metadata accessor for StandardFile()
{
  return &type metadata for StandardFile;
}

uint64_t storeEnumTagSinglePayload for StandardFile.Mode(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFA) {
    return ((uint64_t (*)(void))((char *)&loc_186C2C510 + 4 * byte_186C60A85[v4]))();
  }
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_186C2C544 + 4 * byte_186C60A80[v4]))();
}

uint64_t sub_186C2C544(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_186C2C54C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x186C2C554LL);
  }
  return result;
}

uint64_t sub_186C2C560(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x186C2C568LL);
  }
  *(_BYTE *)unint64_t result = a2 + 5;
  return result;
}

uint64_t sub_186C2C56C(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_186C2C574(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for StandardFile.Mode()
{
  return &type metadata for StandardFile.Mode;
}

uint64_t type metadata accessor for CStringArray()
{
  return objc_opt_self();
}

ValueMetadata *type metadata accessor for NullTerminatedCStringArray()
{
  return &type metadata for NullTerminatedCStringArray;
}

uint64_t _s6ktrace12StandardFileVwet_0(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 != 1 && *(_BYTE *)(a1 + 8)) {
    return (*(_DWORD *)a1 + 2);
  }
  if (*(void *)a1) {
    int v3 = -1;
  }
  else {
    int v3 = 0;
  }
  return (v3 + 1);
}

uint64_t _s6ktrace12StandardFileVwst_0(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 1)
  {
    *(void *)unint64_t result = a2 - 2;
    if (a3 >= 2) {
      *(_BYTE *)(result + 8) = 1;
    }
  }

  else
  {
    if (a3 >= 2) {
      *(_BYTE *)(result + 8) = 0;
    }
    if (a2) {
      *(void *)unint64_t result = 0LL;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for NullTerminatedCStringArrayIterator()
{
  return &type metadata for NullTerminatedCStringArrayIterator;
}

uint64_t sub_186C2C650(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 a5)
{
  uint64_t result = a2;
  if (a5 - 1 < 2)
  {
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }

  if (!a5) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t destroy for SuffixedNumberError(uint64_t a1)
{
  return sub_186C2C6A8( *(void *)a1,  *(void *)(a1 + 8),  *(void *)(a1 + 16),  *(void *)(a1 + 24),  *(_BYTE *)(a1 + 32));
}

uint64_t sub_186C2C6A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 a5)
{
  uint64_t result = a2;
  if (a5 - 1 < 2)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }

  if (!a5) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeWithCopy for SuffixedNumberError(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  unsigned __int8 v7 = *(_BYTE *)(a2 + 32);
  sub_186C2C650(*(void *)a2, v4, v5, v6, v7);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(_BYTE *)(a1 + 32) = v7;
  return a1;
}

uint64_t assignWithCopy for SuffixedNumberError(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  unsigned __int8 v7 = *(_BYTE *)(a2 + 32);
  sub_186C2C650(*(void *)a2, v4, v5, v6, v7);
  uint64_t v8 = *(void *)a1;
  uint64_t v9 = *(void *)(a1 + 8);
  uint64_t v10 = *(void *)(a1 + 16);
  uint64_t v11 = *(void *)(a1 + 24);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  unsigned __int8 v12 = *(_BYTE *)(a1 + 32);
  *(_BYTE *)(a1 + 32) = v7;
  sub_186C2C6A8(v8, v9, v10, v11, v12);
  return a1;
}

uint64_t assignWithTake for SuffixedNumberError(uint64_t a1, uint64_t a2)
{
  char v3 = *(_BYTE *)(a2 + 32);
  uint64_t v4 = *(void *)a1;
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v7 = *(void *)(a1 + 24);
  __int128 v8 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v8;
  unsigned __int8 v9 = *(_BYTE *)(a1 + 32);
  *(_BYTE *)(a1 + 32) = v3;
  sub_186C2C6A8(v4, v6, v5, v7, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for SuffixedNumberError(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 33)) {
    return (*(_DWORD *)a1 + 254);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 32);
  if (v3 <= 2) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for SuffixedNumberError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(void *)(result + 16) = 0LL;
    *(void *)(result + 24) = 0LL;
    *(_BYTE *)(result + 32) = 0;
    *(void *)uint64_t result = a2 - 254;
    *(void *)(result + 8) = 0LL;
    if (a3 >= 0xFE) {
      *(_BYTE *)(result + 33) = 1;
    }
  }

  else
  {
    if (a3 >= 0xFE) {
      *(_BYTE *)(result + 33) = 0;
    }
    if (a2) {
      *(_BYTE *)(result + 32) = -(char)a2;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for SuffixedNumberError()
{
  return &type metadata for SuffixedNumberError;
}

ValueMetadata *type metadata accessor for CurrentSystem()
{
  return &type metadata for CurrentSystem;
}

__n128 __swift_memcpy152_8(uint64_t a1, uint64_t a2)
{
  __int128 v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  __int128 v3 = *(_OWORD *)(a2 + 32);
  __int128 v4 = *(_OWORD *)(a2 + 48);
  __int128 v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  __n128 result = *(__n128 *)(a2 + 96);
  __int128 v7 = *(_OWORD *)(a2 + 112);
  __int128 v8 = *(_OWORD *)(a2 + 128);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 128) = v8;
  *(__n128 *)(a1 + 96) = result;
  return result;
}

uint64_t sub_186C2C8E8(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 152)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 56);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t sub_186C2C944(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 152) = 1;
    }
  }

  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 152) = 0;
    }
    if (a2) {
      *(void *)(result + 56) = a2;
    }
  }

  return result;
}

void type metadata accessor for __sFILE(uint64_t a1)
{
}

uint64_t sub_186C2C9D0@<X0>(uint64_t a1@<X8>)
{
  return sub_186C2A56C(v1[2], v1[3], v1[4], a1);
}

unint64_t sub_186C2C9DC()
{
  unint64_t result = qword_18C6A2A30;
  if (!qword_18C6A2A30)
  {
    unint64_t result = MEMORY[0x186E46630](MEMORY[0x189618788], MEMORY[0x189618740]);
    atomic_store(result, (unint64_t *)&qword_18C6A2A30);
  }

  return result;
}

unint64_t sub_186C2CA20()
{
  unint64_t result = qword_18C6A2A38;
  if (!qword_18C6A2A38)
  {
    unint64_t result = MEMORY[0x186E46630](MEMORY[0x18961A640], MEMORY[0x18961A610]);
    atomic_store(result, (unint64_t *)&qword_18C6A2A38);
  }

  return result;
}

uint64_t sub_186C2CA64()
{
  return sub_186C5B134();
}

void type metadata accessor for __sbuf(uint64_t a1)
{
}

unint64_t sub_186C2CB0C(unint64_t result, unint64_t a2)
{
  double v2 = (double)result * (double)HIDWORD(a2) / (double)a2;
  if ((~*(void *)&v2 & 0x7FF0000000000000LL) == 0)
  {
    __break(1u);
    goto LABEL_6;
  }

  if (v2 <= -1.0)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }

  if (v2 < 1.84467441e19) {
    return (unint64_t)v2;
  }
LABEL_7:
  __break(1u);
  return result;
}

double sub_186C2CB68(unint64_t a1, unint64_t a2)
{
  return (double)a1 * (double)a2 / (double)HIDWORD(a2) / 1000000000.0;
}

unint64_t sub_186C2CB98(unsigned int a1, uint64_t a2)
{
  return a1 | (unint64_t)(a2 << 32);
}

void *__swift_memcpy8_4(void *result, void *a2)
{
  *unint64_t result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for EventTimebase(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 8)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t storeEnumTagSinglePayload for EventTimebase(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)unint64_t result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }

  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }

  *(_BYTE *)(result + 8) = v3;
  return result;
}

ValueMetadata *type metadata accessor for EventTimebase()
{
  return &type metadata for EventTimebase;
}

void sub_186C2CC08()
{
  uint64_t v1 = sub_186C5AA8C();
  MEMORY[0x1895F8858](v1);
  uint64_t v2 = sub_186C5B29C();
  v9[1] = *(void *)(v2 - 8);
  void v9[2] = v2;
  MEMORY[0x1895F8858](v2);
  v9[0] = (char *)v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = sub_186C5B2A8();
  uint64_t v5 = MEMORY[0x1895F8858](v4);
  MEMORY[0x1895F8858](v5);
  uint64_t v6 = type metadata accessor for KTraceRecordError();
  MEMORY[0x1895F8858](v6);
  sub_186C25780(v0, (uint64_t)v9 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  __int128 v8 = (char *)&loc_186C2CD74 + *((int *)qword_186C2DFB0 + swift_getEnumCaseMultiPayload());
  __asm { BR              X10 }

uint64_t sub_186C2CD84()
{
  uint64_t v2 = v0[1];
  *(void *)(v1 - 136) = *v0;
  *(void *)(v1 - 128) = v2;
  sub_186C5ADD4();
  sub_186C5ADD4();
  swift_bridgeObjectRelease();
  return *(void *)(v1 - 136);
}

void sub_186C2DC50()
{
  *(void *)(v4 - 136) = 0LL;
  *(void *)(v4 - 128) = 0xE000000000000000LL;
  sub_186C5B260();
  swift_bridgeObjectRelease();
  *(void *)(v4 - 136) = 0xD000000000000029LL;
  *(void *)(v4 - 128) = 0x8000000186C666A0LL;
  sub_186C5AA74();
  sub_186C5ADD4();
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v0 + 8))(v2, v1);
  JUMPOUT(0x186C2DC28LL);
}

uint64_t type metadata accessor for KTraceRecordError()
{
  uint64_t result = qword_18C6A8570;
  if (!qword_18C6A8570) {
    return swift_getSingletonMetadata();
  }
  return result;
}

unint64_t sub_186C2E094()
{
  unint64_t result = qword_18C6A27B8;
  if (!qword_18C6A27B8)
  {
    uint64_t v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_18C6A27B0);
    unint64_t result = MEMORY[0x186E46630](MEMORY[0x189618708], v1);
    atomic_store(result, (unint64_t *)&qword_18C6A27B8);
  }

  return result;
}

uint64_t sub_186C2E0E0(__int128 *a1, uint64_t a2)
{
  __int128 v2 = *a1;
  __int128 v3 = a1[1];
  *(void *)(a2 + 32) = *((void *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

uint64_t sub_186C2E0F8(uint64_t a1)
{
  uint64_t v2 = sub_186C5B29C();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = MEMORY[0x1895F8858](v2);
  uint64_t v6 = (char *)v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v4);
  __int128 v8 = (char *)v20 - v7;
  uint64_t v9 = sub_186C5B284();
  if (!v9
    || (uint64_t v10 = (void *)v9,
        uint64_t v11 = (void *)sub_186C5A9C0(),
        v10,
        unsigned __int8 v12 = (void *)sub_186C5B074(),
        v11,
        !v12))
  {
    memset(v25, 0, sizeof(v25));
    uint64_t v26 = 1LL;
LABEL_11:
    sub_186BFCA44((uint64_t)v25, &qword_18C6A2B10);
LABEL_12:
    uint64_t v14 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    v14(v8, a1, v2);
LABEL_13:
    uint64_t v15 = sub_186C5B290();
    unint64_t v17 = v16;
    goto LABEL_14;
  }

  if (objc_msgSend(v12, sel_respondsToSelector_, sel___swift_objectForKeyedSubscript_))
  {
    unint64_t v21 = 0xD000000000000012LL;
    unint64_t v22 = 0x8000000186C66D10LL;
    id v13 = objc_msgSend(v12, sel___swift_objectForKeyedSubscript_, sub_186C5B518());
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    if (v13)
    {
      sub_186C5B1DC();
      swift_unknownObjectRelease();
    }

    else
    {
      memset(v20, 0, sizeof(v20));
    }

    sub_186BFA418((uint64_t)v20, (uint64_t)&v21, &qword_18C6A2350);
  }

  else
  {
    swift_unknownObjectRelease();
    unint64_t v21 = 0LL;
    unint64_t v22 = 0LL;
    uint64_t v23 = 0LL;
    uint64_t v24 = 1LL;
  }

  sub_186BFA418((uint64_t)&v21, (uint64_t)v25, &qword_18C6A2B10);
  if (v26 == 1) {
    goto LABEL_11;
  }
  sub_186BFA418((uint64_t)v25, (uint64_t)v27, &qword_18C6A2350);
  if (v28)
  {
    if ((swift_dynamicCast() & 1) == 0) {
      goto LABEL_12;
    }
    uint64_t v15 = v21;
    unint64_t v17 = v22;
    uint64_t v14 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    v14(v8, a1, v2);
    if (v17 == 1) {
      goto LABEL_13;
    }
  }

  else
  {
    sub_186BFCA44((uint64_t)v27, &qword_18C6A2350);
    uint64_t v14 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    v14(v8, a1, v2);
    uint64_t v15 = 0LL;
    unint64_t v17 = 0LL;
  }

uint64_t *sub_186C2E3D0(uint64_t *a1, char *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 - 8);
  int v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    uint64_t v10 = *(void *)a2;
    *a1 = *(void *)a2;
    a1 = (uint64_t *)(v10 + ((v6 + 16LL) & ~(unint64_t)v6));
    swift_retain();
  }

  else
  {
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        uint64_t v7 = *(void *)a2;
        uint64_t v8 = *((void *)a2 + 1);
        unsigned __int8 v9 = a2[16];
        sub_186C0332C(v7, v8, v9);
        *a1 = v7;
        a1[1] = v8;
        *((_BYTE *)a1 + 16) = v9;
        swift_storeEnumTagMultiPayload();
        break;
      case 2u:
      case 0x16u:
      case 0x23u:
        uint64_t v22 = *((void *)a2 + 1);
        *a1 = *(void *)a2;
        a1[1] = v22;
        *((_DWORD *)a1 + 4) = *((_DWORD *)a2 + 4);
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
        break;
      case 3u:
      case 5u:
      case 6u:
      case 8u:
      case 0xDu:
      case 0xEu:
      case 0x11u:
      case 0x13u:
      case 0x14u:
      case 0x18u:
      case 0x19u:
      case 0x1Au:
      case 0x1Bu:
      case 0x1Cu:
      case 0x1Du:
      case 0x1Eu:
      case 0x1Fu:
      case 0x20u:
        uint64_t v18 = *((void *)a2 + 1);
        *a1 = *(void *)a2;
        a1[1] = v18;
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
        break;
      case 4u:
      case 9u:
      case 0xAu:
      case 0x12u:
      case 0x15u:
      case 0x17u:
      case 0x22u:
        uint64_t v19 = *((void *)a2 + 1);
        *a1 = *(void *)a2;
        a1[1] = v19;
        uint64_t v20 = *((void *)a2 + 2);
        uint64_t v21 = *((void *)a2 + 3);
        a1[2] = v20;
        a1[3] = v21;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
        break;
      case 7u:
        uint64_t v12 = *((void *)a2 + 1);
        *a1 = *(void *)a2;
        a1[1] = v12;
        swift_bridgeObjectRetain();
        uint64_t v13 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_18C6A2830) + 48);
        uint64_t v14 = (char *)a1 + v13;
        uint64_t v15 = &a2[v13];
        uint64_t v16 = sub_186C5B2A8();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 16LL))(v14, v15, v16);
        swift_storeEnumTagMultiPayload();
        break;
      case 0xBu:
      case 0xFu:
        uint64_t v17 = *((void *)a2 + 1);
        *a1 = *(void *)a2;
        a1[1] = v17;
        a1[2] = *((void *)a2 + 2);
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
        break;
      case 0xCu:
        *a1 = *(void *)a2;
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
        break;
      case 0x25u:
        uint64_t v23 = sub_186C5AA8C();
        (*(void (**)(uint64_t *, char *, uint64_t))(*(void *)(v23 - 8) + 16LL))(a1, a2, v23);
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(void *)(v5 + 64));
        break;
    }
  }

  return a1;
}

uint64_t sub_186C2E9AC(uint64_t a1)
{
  uint64_t result = swift_getEnumCaseMultiPayload();
  switch((int)result)
  {
    case 0:
      return sub_186C0216C(*(void *)a1, *(void *)(a1 + 8), *(_BYTE *)(a1 + 16));
    case 2:
    case 3:
    case 5:
    case 6:
    case 8:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 17:
    case 19:
    case 20:
    case 22:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 35:
      return swift_bridgeObjectRelease();
    case 4:
    case 9:
    case 10:
    case 18:
    case 21:
    case 23:
    case 34:
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    case 7:
      swift_bridgeObjectRelease();
      a1 += *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_18C6A2830) + 48);
      uint64_t v3 = sub_186C5B2A8();
      goto LABEL_7;
    case 37:
      uint64_t v3 = sub_186C5AA8C();
LABEL_7:
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8LL))(a1, v3);
      break;
    default:
      return result;
  }

  return result;
}

uint64_t *sub_186C2EA78(uint64_t *a1, char *a2, uint64_t a3)
{
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      uint64_t v6 = *(void *)a2;
      uint64_t v7 = *((void *)a2 + 1);
      unsigned __int8 v8 = a2[16];
      sub_186C0332C(v6, v7, v8);
      *a1 = v6;
      a1[1] = v7;
      *((_BYTE *)a1 + 16) = v8;
      goto LABEL_11;
    case 2u:
    case 0x16u:
    case 0x23u:
      uint64_t v19 = *((void *)a2 + 1);
      *a1 = *(void *)a2;
      a1[1] = v19;
      *((_DWORD *)a1 + 4) = *((_DWORD *)a2 + 4);
      swift_bridgeObjectRetain();
      goto LABEL_11;
    case 3u:
    case 5u:
    case 6u:
    case 8u:
    case 0xDu:
    case 0xEu:
    case 0x11u:
    case 0x13u:
    case 0x14u:
    case 0x18u:
    case 0x19u:
    case 0x1Au:
    case 0x1Bu:
    case 0x1Cu:
    case 0x1Du:
    case 0x1Eu:
    case 0x1Fu:
    case 0x20u:
      uint64_t v15 = *((void *)a2 + 1);
      *a1 = *(void *)a2;
      a1[1] = v15;
      swift_bridgeObjectRetain();
      goto LABEL_11;
    case 4u:
    case 9u:
    case 0xAu:
    case 0x12u:
    case 0x15u:
    case 0x17u:
    case 0x22u:
      uint64_t v16 = *((void *)a2 + 1);
      *a1 = *(void *)a2;
      a1[1] = v16;
      uint64_t v17 = *((void *)a2 + 2);
      uint64_t v18 = *((void *)a2 + 3);
      a1[2] = v17;
      a1[3] = v18;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_11;
    case 7u:
      uint64_t v9 = *((void *)a2 + 1);
      *a1 = *(void *)a2;
      a1[1] = v9;
      swift_bridgeObjectRetain();
      uint64_t v10 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_18C6A2830) + 48);
      uint64_t v11 = (char *)a1 + v10;
      uint64_t v12 = &a2[v10];
      uint64_t v13 = sub_186C5B2A8();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 16LL))(v11, v12, v13);
      goto LABEL_11;
    case 0xBu:
    case 0xFu:
      uint64_t v14 = *((void *)a2 + 1);
      *a1 = *(void *)a2;
      a1[1] = v14;
      a1[2] = *((void *)a2 + 2);
      swift_bridgeObjectRetain();
      goto LABEL_11;
    case 0xCu:
      *a1 = *(void *)a2;
      swift_bridgeObjectRetain();
      goto LABEL_11;
    case 0x25u:
      uint64_t v20 = sub_186C5AA8C();
      (*(void (**)(uint64_t *, char *, uint64_t))(*(void *)(v20 - 8) + 16LL))(a1, a2, v20);
LABEL_11:
      swift_storeEnumTagMultiPayload();
      break;
    default:
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
      break;
  }

  return a1;
}

uint64_t *sub_186C2EFA8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_186C257C4((uint64_t)a1);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        uint64_t v6 = *a2;
        uint64_t v7 = a2[1];
        unsigned __int8 v8 = *((_BYTE *)a2 + 16);
        sub_186C0332C(v6, v7, v8);
        *a1 = v6;
        a1[1] = v7;
        *((_BYTE *)a1 + 16) = v8;
        goto LABEL_12;
      case 2u:
      case 0x16u:
      case 0x23u:
        *a1 = *a2;
        a1[1] = a2[1];
        *((_DWORD *)a1 + 4) = *((_DWORD *)a2 + 4);
        swift_bridgeObjectRetain();
        goto LABEL_12;
      case 3u:
      case 5u:
      case 6u:
      case 8u:
      case 0xDu:
      case 0xEu:
      case 0x11u:
      case 0x13u:
      case 0x14u:
      case 0x18u:
      case 0x19u:
      case 0x1Au:
      case 0x1Bu:
      case 0x1Cu:
      case 0x1Du:
      case 0x1Eu:
      case 0x1Fu:
      case 0x20u:
        *a1 = *a2;
        a1[1] = a2[1];
        swift_bridgeObjectRetain();
        goto LABEL_12;
      case 4u:
      case 9u:
      case 0xAu:
      case 0x12u:
      case 0x15u:
      case 0x17u:
      case 0x22u:
        *a1 = *a2;
        a1[1] = a2[1];
        a1[2] = a2[2];
        a1[3] = a2[3];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        goto LABEL_12;
      case 7u:
        *a1 = *a2;
        a1[1] = a2[1];
        swift_bridgeObjectRetain();
        uint64_t v9 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_18C6A2830) + 48);
        uint64_t v10 = (char *)a1 + v9;
        uint64_t v11 = (char *)a2 + v9;
        uint64_t v12 = sub_186C5B2A8();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16LL))(v10, v11, v12);
        goto LABEL_12;
      case 0xBu:
      case 0xFu:
        *a1 = *a2;
        a1[1] = a2[1];
        a1[2] = a2[2];
        swift_bridgeObjectRetain();
        goto LABEL_12;
      case 0xCu:
        *a1 = *a2;
        swift_bridgeObjectRetain();
        goto LABEL_12;
      case 0x25u:
        uint64_t v13 = sub_186C5AA8C();
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v13 - 8) + 16LL))(a1, a2, v13);
LABEL_12:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
        break;
    }
  }

  return a1;
}

_OWORD *sub_186C2F618(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 37)
  {
    uint64_t v11 = sub_186C5AA8C();
    (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(void *)(v11 - 8) + 32LL))(a1, a2, v11);
    swift_storeEnumTagMultiPayload();
  }

  else if (EnumCaseMultiPayload == 7)
  {
    *a1 = *a2;
    uint64_t v7 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_18C6A2830) + 48);
    unsigned __int8 v8 = (char *)a1 + v7;
    uint64_t v9 = (char *)a2 + v7;
    uint64_t v10 = sub_186C5B2A8();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 32LL))(v8, v9, v10);
    swift_storeEnumTagMultiPayload();
  }

  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
  }

  return a1;
}

_OWORD *sub_186C2F700(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_186C257C4((uint64_t)a1);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 37)
    {
      uint64_t v11 = sub_186C5AA8C();
      (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(void *)(v11 - 8) + 32LL))(a1, a2, v11);
      swift_storeEnumTagMultiPayload();
    }

    else if (EnumCaseMultiPayload == 7)
    {
      *a1 = *a2;
      uint64_t v7 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_18C6A2830) + 48);
      unsigned __int8 v8 = (char *)a1 + v7;
      uint64_t v9 = (char *)a2 + v7;
      uint64_t v10 = sub_186C5B2A8();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 32LL))(v8, v9, v10);
      swift_storeEnumTagMultiPayload();
    }

    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
    }
  }

  return a1;
}

uint64_t getEnumTagSinglePayload for TrimNote(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(void *)(a3 - 8) + 48LL))();
}

uint64_t storeEnumTagSinglePayload for TrimNote(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(*(void *)(a4 - 8) + 56LL))();
}

uint64_t sub_186C2F814()
{
  return swift_storeEnumTagMultiPayload();
}

uint64_t sub_186C2F824()
{
  uint64_t v0 = MEMORY[0x189617758] + 64LL;
  uint64_t v5 = &unk_186C60F58;
  uint64_t v6 = MEMORY[0x189617758] + 64LL;
  uint64_t v7 = &unk_186C60F70;
  unsigned __int8 v8 = &unk_186C60F88;
  uint64_t v9 = &unk_186C60FA0;
  uint64_t v10 = &unk_186C60F88;
  uint64_t v11 = &unk_186C60F88;
  uint64_t result = sub_186C5B2A8();
  if (v2 <= 0x3F)
  {
    swift_getTupleTypeLayout2();
    uint64_t v12 = &v4;
    uint64_t v13 = &unk_186C60F88;
    uint64_t v14 = &unk_186C60FA0;
    uint64_t v15 = &unk_186C60FA0;
    uint64_t v16 = &unk_186C60FB8;
    uint64_t v17 = MEMORY[0x189617748] + 64LL;
    uint64_t v18 = &unk_186C60F88;
    uint64_t v19 = &unk_186C60F88;
    uint64_t v20 = &unk_186C60FB8;
    uint64_t v21 = v0;
    uint64_t v22 = &unk_186C60F88;
    uint64_t v23 = &unk_186C60FA0;
    uint64_t v24 = &unk_186C60F88;
    uint64_t v25 = &unk_186C60F88;
    uint64_t v26 = &unk_186C60FA0;
    uint64_t v27 = &unk_186C60F70;
    uint64_t v28 = &unk_186C60FA0;
    unint64_t v29 = &unk_186C60F88;
    unint64_t v30 = &unk_186C60F88;
    uint64_t v31 = &unk_186C60F88;
    int64_t v32 = &unk_186C60F88;
    int64_t v33 = &unk_186C60F88;
    uint64_t v34 = &unk_186C60F88;
    uint64_t v35 = &unk_186C60F88;
    unint64_t v36 = &unk_186C60F88;
    int64_t v37 = &unk_186C60F88;
    uint64_t v38 = MEMORY[0x189617760] + 64LL;
    uint64_t v39 = &unk_186C60FA0;
    uint64_t v40 = &unk_186C60F70;
    uint64_t v41 = v0;
    uint64_t result = sub_186C5AA8C();
    if (v3 <= 0x3F)
    {
      uint64_t v42 = *(void *)(result - 8) + 64LL;
      uint64_t v43 = &unk_186C60FD0;
      swift_initEnumMetadataMultiPayload();
      return 0LL;
    }
  }

  return result;
}

uint64_t sub_186C2F968(uint64_t a1)
{
  uint64_t v2 = v1;
  int64_t v3 = *(void *)(a1 + 16);
  if (v3)
  {
    uint64_t v43 = MEMORY[0x18961AFE8];
    sub_186C37554(0, v3, 0);
    uint64_t v5 = v43;
    uint64_t v6 = (unint64_t *)(a1 + 40);
    while (1)
    {
      uint64_t v7 = *(v6 - 1);
      unint64_t v8 = *v6;
      swift_bridgeObjectRetain();
      v42[0] = 58LL;
      v42[1] = 0xE100000000000000LL;
      uint64_t v40 = v42;
      swift_bridgeObjectRetain();
      uint64_t v9 = sub_186BEE808(1LL, 1, sub_186BF0290, (uint64_t)v39, v7, v8);
      uint64_t v10 = *((void *)v9 + 2);
      if (!v10) {
        break;
      }
      uint64_t v37 = v2;
      uint64_t v38 = v5;
      uint64_t v11 = *((void *)v9 + 5);
      int64_t v34 = v3;
      uint64_t v35 = *((void *)v9 + 4);
      uint64_t v12 = *((void *)v9 + 6);
      uint64_t v13 = *((void *)v9 + 7);
      if (v10 == 1)
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        uint64_t v36 = MEMORY[0x186E44AC4](0LL, 0xE000000000000000LL);
        uint64_t v15 = v14;
        uint64_t v17 = v16;
        uint64_t v19 = v18;
      }

      else
      {
        uint64_t v15 = *((void *)v9 + 9);
        uint64_t v36 = *((void *)v9 + 8);
        uint64_t v17 = *((void *)v9 + 10);
        uint64_t v19 = *((void *)v9 + 11);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
      }

      uint64_t v20 = MEMORY[0x186E4477C](v35, v11, v12, v13);
      uint64_t v22 = v21;
      swift_bridgeObjectRelease();
      __swift_instantiateConcreteTypeFromMangledName(&qword_18C6A21C0);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_186C5E4F0;
      uint64_t v24 = MEMORY[0x186E4477C](v36, v15, v17, v19);
      uint64_t v26 = v25;
      swift_bridgeObjectRelease();
      *(void *)(inited + 32) = v24;
      *(void *)(inited + 40) = v26;
      uint64_t v27 = sub_186C222FC(inited);
      swift_setDeallocating();
      swift_arrayDestroy();
      uint64_t v2 = v37;
      uint64_t v5 = v38;
      if (v37) {
        goto LABEL_15;
      }
      swift_bridgeObjectRelease();
      uint64_t v43 = v38;
      unint64_t v29 = *(void *)(v38 + 16);
      unint64_t v28 = *(void *)(v38 + 24);
      if (v29 >= v28 >> 1)
      {
        sub_186C37554(v28 > 1, v29 + 1, 1);
        uint64_t v5 = v43;
      }

      v6 += 2;
      *(void *)(v5 + 16) = v29 + 1;
      unint64_t v30 = (void *)(v5 + 24 * v29);
      v30[4] = v20;
      v30[5] = v22;
      v30[6] = v27;
      int64_t v3 = v34 - 1;
      if (v34 == 1) {
        goto LABEL_13;
      }
    }

    swift_bridgeObjectRelease();
    type metadata accessor for KTraceRecordError();
    sub_186BFCB04( (unint64_t *)&qword_18C6A21E0,  (uint64_t (*)(uint64_t))type metadata accessor for KTraceRecordError,  (uint64_t)&unk_186C60EF4);
    swift_allocError();
    *(void *)uint64_t v32 = v7;
    *(void *)(v32 + 8) = v8;
    *(_BYTE *)(v32 + 16) = 0;
    swift_storeEnumTagMultiPayload();
    swift_bridgeObjectRetain();
    swift_willThrow();
LABEL_15:
    swift_release();
    return swift_bridgeObjectRelease();
  }

  else
  {
    uint64_t v5 = MEMORY[0x18961AFE8];
    if (*(void *)(MEMORY[0x18961AFE8] + 16LL))
    {
LABEL_13:
      __swift_instantiateConcreteTypeFromMangledName(&qword_18C6A28F0);
      uint64_t v31 = sub_186C5B38C();
    }

    else
    {
      uint64_t v31 = MEMORY[0x18961AFF0];
    }

    v41[0] = v31;
    sub_186C36C6C(v5, 1, v41);
    uint64_t result = v41[0];
    if (v2) {
      return swift_release();
    }
  }

  return result;
}

uint64_t sub_186C2FC9C(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(void *)(a2 + 16);
  if (!v2) {
    return 1LL;
  }
  unint64_t v3 = *(void *)(a1 + 16);
  if (!v3) {
    return 1LL;
  }
  if (v2 >= v3) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = a2;
  }
  if (v2 >= v3) {
    uint64_t v5 = a2;
  }
  else {
    uint64_t v5 = a1;
  }
  uint64_t v32 = v4;
  uint64_t v33 = v4 + 56;
  uint64_t v6 = -1LL << *(_BYTE *)(v4 + 32);
  if (-v6 < 64) {
    uint64_t v7 = ~(-1LL << -(char)v6);
  }
  else {
    uint64_t v7 = -1LL;
  }
  unint64_t v8 = v7 & *(void *)(v4 + 56);
  int64_t v31 = (unint64_t)(63 - v6) >> 6;
  uint64_t v9 = v5 + 56;
  swift_bridgeObjectRetain();
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v11 = 0LL;
  while (1)
  {
    while (1)
    {
      int64_t v12 = v11;
      if (!v8) {
        break;
      }
      unint64_t v13 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v14 = v13 | (v11 << 6);
      if (*(void *)(v5 + 16)) {
        goto LABEL_31;
      }
    }

    int64_t v15 = v11 + 1;
    if (__OFADD__(v11, 1LL))
    {
      __break(1u);
      goto LABEL_50;
    }

    if (v15 >= v31) {
      goto LABEL_48;
    }
    unint64_t v16 = *(void *)(v33 + 8 * v15);
    ++v11;
    if (!v16)
    {
      int64_t v11 = v12 + 2;
      if (v12 + 2 >= v31) {
        goto LABEL_48;
      }
      unint64_t v16 = *(void *)(v33 + 8 * v11);
      if (!v16)
      {
        int64_t v11 = v12 + 3;
        if (v12 + 3 >= v31) {
          goto LABEL_48;
        }
        unint64_t v16 = *(void *)(v33 + 8 * v11);
        if (!v16) {
          break;
        }
      }
    }

uint64_t sub_186C2FF7C@<X0>(void *a1@<X8>)
{
  unint64_t v3 = (const void *)(v1 + OBJC_IVAR____TtC6ktrace9Recording_plan);
  swift_beginAccess();
  memcpy(__dst, v3, 0x141uLL);
  memcpy(a1, v3, 0x141uLL);
  return sub_186C23978((uint64_t)__dst);
}

uint64_t sub_186C2FFF0(void *__src)
{
  unint64_t v2 = (void *)(v1 + OBJC_IVAR____TtC6ktrace9Recording_plan);
  swift_beginAccess();
  memcpy(v5, v2, 0x141uLL);
  memcpy(v2, __dst, 0x141uLL);
  sub_186C23978((uint64_t)__dst);
  sub_186C23A98((uint64_t)v5);
  return sub_186C23A98((uint64_t)__dst);
}

uint64_t (*sub_186C30078())()
{
  return j_j__swift_endAccess;
}

uint64_t sub_186C300BC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC6ktrace9Recording_inProcessFile;
  swift_beginAccess();
  return sub_186C37570(v3, a1);
}

uint64_t sub_186C3010C(uint64_t a1)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC6ktrace9Recording_inProcessFile;
  swift_beginAccess();
  sub_186C375B8(a1, v3);
  return swift_endAccess();
}

uint64_t (*sub_186C30164())()
{
  return j_j__swift_endAccess;
}

uint64_t sub_186C301A8()
{
  return *(void *)(v0 + 16);
}

uint64_t sub_186C301D8(uint64_t a1)
{
  uint64_t result = swift_beginAccess();
  *(void *)(v1 + 16) = a1;
  return result;
}

uint64_t (*sub_186C30214())()
{
  return j_j__swift_endAccess;
}

uint64_t sub_186C30250()
{
  return *(void *)(v0 + 24);
}

uint64_t sub_186C30280(uint64_t a1)
{
  uint64_t result = swift_beginAccess();
  *(void *)(v1 + 24) = a1;
  return result;
}

uint64_t (*sub_186C302BC())()
{
  return j__swift_endAccess;
}

uint64_t sub_186C302F8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = nullsub_1(a1);
  *(void *)(v4 + 24) = nullsub_1(a2);
  return v4;
}

uint64_t sub_186C30350()
{
  return swift_deallocClassInstance();
}

uint64_t sub_186C30360()
{
  uint64_t v1 = (unsigned int *)(v0 + OBJC_IVAR____TtC6ktrace9Recording_endReason);
  swift_beginAccess();
  return *v1;
}

uint64_t sub_186C303A4(int a1)
{
  uint64_t v3 = (_DWORD *)(v1 + OBJC_IVAR____TtC6ktrace9Recording_endReason);
  uint64_t result = swift_beginAccess();
  *uint64_t v3 = a1;
  return result;
}

uint64_t (*sub_186C303EC())()
{
  return j_j__swift_endAccess;
}

uint64_t sub_186C30430()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC6ktrace9Recording_primaryEndReason;
  swift_beginAccess();
  uint64_t v2 = *(void *)v1;
  sub_186C37600(*(void *)v1, *(void *)(v1 + 8), *(_BYTE *)(v1 + 16));
  return v2;
}

uint64_t sub_186C3049C(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v7 = v3 + OBJC_IVAR____TtC6ktrace9Recording_primaryEndReason;
  swift_beginAccess();
  uint64_t v8 = *(void *)v7;
  uint64_t v9 = *(void *)(v7 + 8);
  *(void *)uint64_t v7 = a1;
  *(void *)(v7 + 8) = a2;
  char v10 = *(_BYTE *)(v7 + 16);
  *(_BYTE *)(v7 + 16) = a3;
  sub_186C37600(a1, a2, a3);
  sub_186C37614(v8, v9, v10);
  return sub_186C37614(a1, a2, a3);
}

uint64_t (*sub_186C30540())()
{
  return j_j__swift_endAccess;
}

uint64_t sub_186C30584()
{
  return swift_retain();
}

uint64_t sub_186C305CC(uint64_t a1)
{
  uint64_t v3 = (void *)(v1 + OBJC_IVAR____TtC6ktrace9Recording_endWaitGroup);
  swift_beginAccess();
  *uint64_t v3 = a1;
  return swift_release();
}

uint64_t (*sub_186C3061C())()
{
  return j_j__swift_endAccess;
}

__n128 sub_186C30660@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v3 = (_OWORD *)(v1 + OBJC_IVAR____TtC6ktrace9Recording_kdebugPostprocessing);
  swift_beginAccess();
  __int128 v4 = v3[6];
  v19[0] = v3[7];
  *(_OWORD *)((char *)v19 + 9) = *(_OWORD *)((char *)v3 + 121);
  __int128 v5 = v3[3];
  __int128 v14 = v3[2];
  __int128 v15 = v5;
  __int128 v6 = v3[4];
  __int128 v17 = v3[5];
  __int128 v18 = v4;
  __int128 v16 = v6;
  __n128 v7 = *((__n128 *)v3 + 1);
  __n128 v12 = *(__n128 *)v3;
  __n128 v13 = v7;
  sub_186C37628((uint64_t)&v12);
  __int128 v8 = v19[0];
  *(_OWORD *)(a1 + 96) = v18;
  *(_OWORD *)(a1 + 112) = v8;
  *(_OWORD *)(a1 + 121) = *(_OWORD *)((char *)v19 + 9);
  __int128 v9 = v15;
  *(_OWORD *)(a1 + 32) = v14;
  *(_OWORD *)(a1 + 48) = v9;
  __int128 v10 = v17;
  *(_OWORD *)(a1 + 64) = v16;
  *(_OWORD *)(a1 + 80) = v10;
  __n128 result = v13;
  *(__n128 *)a1 = v12;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t sub_186C30710(_OWORD *a1)
{
  uint64_t v3 = (_OWORD *)(v1 + OBJC_IVAR____TtC6ktrace9Recording_kdebugPostprocessing);
  swift_beginAccess();
  __int128 v4 = v3[6];
  v14[0] = v3[7];
  *(_OWORD *)((char *)v14 + 9) = *(_OWORD *)((char *)v3 + 121);
  __int128 v5 = v3[3];
  v13[2] = v3[2];
  v13[3] = v5;
  __int128 v6 = v3[4];
  v13[5] = v3[5];
  v13[6] = v4;
  v13[4] = v6;
  __int128 v7 = v3[1];
  v13[0] = *v3;
  v13[1] = v7;
  __int128 v8 = a1[5];
  v3[4] = a1[4];
  v3[5] = v8;
  __int128 v9 = a1[3];
  v3[2] = a1[2];
  v3[3] = v9;
  __int128 v10 = a1[1];
  *uint64_t v3 = *a1;
  v3[1] = v10;
  *(_OWORD *)((char *)v3 + 121) = *(_OWORD *)((char *)a1 + 121);
  __int128 v11 = a1[7];
  v3[6] = a1[6];
  v3[7] = v11;
  sub_186C37628((uint64_t)a1);
  sub_186C0BD24((uint64_t)v13);
  return sub_186C0BD24((uint64_t)a1);
}

uint64_t (*sub_186C307CC())()
{
  return j_j__swift_endAccess;
}

uint64_t sub_186C30810(char *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = swift_allocObject();
  sub_186C30874(a1, a2, a3);
  return v6;
}

uint64_t sub_186C30874(char *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v278 = a3;
  v281 = a2;
  v309[27] = *MEMORY[0x1895F89C0];
  uint64_t v258 = sub_186C5B2A8();
  uint64_t v256 = *(void *)(v258 - 8);
  uint64_t v5 = MEMORY[0x1895F8858](v258);
  v257 = (char *)&v245 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v5);
  v255 = (char *)&v245 - v7;
  v274 = (int *)type metadata accessor for RecordingOptions.Options(0LL);
  MEMORY[0x1895F8858](v274);
  __int128 v9 = (char *)&v245 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = sub_186C5AFFC();
  uint64_t v267 = *(void *)(v10 - 8);
  uint64_t v268 = v10;
  MEMORY[0x1895F8858](v10);
  v283 = (char *)&v245 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  *(void *)&__int128 v265 = sub_186C5AFE4();
  MEMORY[0x1895F8858](v265);
  v266 = (char *)&v245 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = sub_186C5AC78();
  MEMORY[0x1895F8858](v13);
  v264 = (char *)&v245 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = sub_186C5A9E4();
  uint64_t v262 = *(void *)(v15 - 8);
  MEMORY[0x1895F8858](v15);
  uint64_t v261 = (char *)&v245 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C6A21F8);
  uint64_t v18 = MEMORY[0x1895F8858](v17);
  v263 = (char *)&v245 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v18);
  uint64_t v21 = (char *)&v245 - v20;
  uint64_t v22 = sub_186C5AA8C();
  uint64_t v23 = *(void *)(v22 - 8);
  uint64_t v24 = MEMORY[0x1895F8858](v22);
  v270 = (char *)&v245 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v26 = MEMORY[0x1895F8858](v24);
  v260 = (char *)&v245 - v27;
  uint64_t v28 = MEMORY[0x1895F8858](v26);
  uint64_t v30 = (char *)&v245 - v29;
  MEMORY[0x1895F8858](v28);
  uint64_t v32 = (char *)&v245 - v31;
  uint64_t v33 = *(void (**)(void))(v23 + 56);
  uint64_t v279 = (uint64_t)v3 + OBJC_IVAR____TtC6ktrace9Recording_inProcessFile;
  uint64_t v273 = v34;
  char v259 = v33;
  v33();
  uint64_t v35 = (uint64_t)v3 + OBJC_IVAR____TtC6ktrace9Recording_primaryEndReason;
  *(void *)uint64_t v35 = 0LL;
  *(void *)(v35 + 8) = 0LL;
  *(_BYTE *)(v35 + 16) = -1;
  uint64_t v36 = OBJC_IVAR____TtC6ktrace9Recording_endWaitGroup;
  *(char **)((char *)v3 + OBJC_IVAR____TtC6ktrace9Recording_endWaitGroup) = 0LL;
  uint64_t v37 = (char **)((char *)v3 + OBJC_IVAR____TtC6ktrace9Recording_pendingExtension);
  *uint64_t v37 = 0xD000000000000014LL;
  v37[1] = 0x8000000186C66D30LL;
  v280 = v37;
  if (!*(void *)a1) {
    goto LABEL_104;
  }
  __int128 v254 = v9;
  uint64_t v276 = v35;
  uint64_t v277 = v36;
  v272 = v32;
  uint64_t v38 = sub_186C5ADE0();
  uint64_t v39 = (uint64_t *)((char *)v3 + OBJC_IVAR____TtC6ktrace9Recording_toolName);
  *uint64_t v39 = v38;
  v39[1] = v40;
  v275 = v39;
  *(char **)((char *)v3 + OBJC_IVAR____TtC6ktrace9Recording_recording) = a1;
  uint64_t v41 = *((void *)a1 + 3);
  if (!v41)
  {
LABEL_105:
    __break(1u);
LABEL_106:
    __break(1u);
  }

  v282 = v3;
  uint64_t v42 = nullsub_1(v41);
  v269 = a1;
  uint64_t v43 = *((void *)a1 + 4);
  if (!v43) {
    goto LABEL_106;
  }
  uint64_t v44 = (FILE *)v42;
  type metadata accessor for Reporter();
  uint64_t v45 = (FILE *)nullsub_1(v43);
  uint64_t v46 = v284;
  uint64_t v47 = sub_186BFDC00(v44, v45, 0x6E6964726F636572LL, 0xE900000000000067LL, 1);
  if (v46)
  {
    swift_release();
    sub_186C392F4((uint64_t)v281, type metadata accessor for RecordingOptions);
    sub_186BFCA44(v279, &qword_18C6A21F8);
    swift_bridgeObjectRelease();
    sub_186C37614(*(void *)v276, *(void *)(v276 + 8), *(_BYTE *)(v276 + 16));
    uint64_t v48 = v282;
LABEL_87:
    swift_release();
    swift_bridgeObjectRelease();
    type metadata accessor for Recording();
    swift_deallocPartialClassInstance();
    return (uint64_t)v48;
  }

  uint64_t v49 = v47;
  uint64_t v251 = v15;
  uint64_t v271 = 0LL;
  uint64_t v50 = v282;
  uint64_t v248 = OBJC_IVAR____TtC6ktrace9Recording_reporter;
  *(char **)((char *)v282 + OBJC_IVAR____TtC6ktrace9Recording_reporter) = (char *)v47;
  uint64_t v51 = type metadata accessor for RecordingOptions(0LL);
  int64_t v52 = (char *)v50 + OBJC_IVAR____TtC6ktrace9Recording_options;
  uint64_t v249 = (uint64_t)v281 + *(int *)(v51 + 20);
  sub_186C3A868( v249,  (uint64_t)v50 + OBJC_IVAR____TtC6ktrace9Recording_options,  type metadata accessor for RecordingOptions.Options);
  uint64_t v53 = v274[5];
  __int128 v252 = v52;
  sub_186C37570((uint64_t)&v52[v53], (uint64_t)v21);
  uint64_t v54 = v273;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v21, 1LL, v273) == 1)
  {
    __break(1u);
LABEL_108:
    uint64_t v30 = sub_186C389FC((uint64_t)v30);
    *uint64_t v50 = v30;
    goto LABEL_101;
  }

  swift_retain();
  uint64_t v55 = v272;
  uint64_t v253 = v49;
  sub_186C5A9D8();
  uint64_t v56 = v21;
  uint64_t v57 = *(void (**)(char *, uint64_t))(v23 + 8);
  v57(v56, v54);
  uint64_t v58 = *(void (**)(char *, char *, uint64_t))(v23 + 16);
  v58((char *)v50 + OBJC_IVAR____TtC6ktrace9Recording_finishedFile, v55, v54);
  id v59 = objc_msgSend(objc_allocWithZone(MEMORY[0x1896078A8]), sel_init);
  char v60 = (void *)sub_186C5AA20();
  *(void *)v306 = 0LL;
  id v61 = objc_msgSend(v59, sel_URLForDirectory_inDomain_appropriateForURL_create_error_, 99, 1, v60, 1, v306);

  uint64_t v62 = *(void **)v306;
  LODWORD(v284) = v61 != 0LL;
  if (!v61)
  {
    id v76 = *(id *)v306;
    uint64_t v77 = (void *)sub_186C5A9CC();

    swift_willThrow();
    type metadata accessor for KTraceRecordError();
    sub_186BFCB04( (unint64_t *)&qword_18C6A21E0,  (uint64_t (*)(uint64_t))type metadata accessor for KTraceRecordError,  (uint64_t)&unk_186C60EF4);
    swift_allocError();
    v58((char *)v78, v55, v54);
    swift_storeEnumTagMultiPayload();
    swift_willThrow();

    swift_release();
    swift_release();
    v57(v55, v54);
    sub_186C392F4((uint64_t)v281, type metadata accessor for RecordingOptions);
    uint64_t v48 = v282;
    uint64_t v79 = v54;
    uint64_t v80 = v57;
    int v81 = v284;
    uint64_t v82 = (void *)&unk_18C6A9000;
LABEL_84:
    sub_186BFCA44(v279, &qword_18C6A21F8);
    v80((char *)v48 + v82[294], v79);
    swift_bridgeObjectRelease();
    if (v81) {

    }
    sub_186C392F4( (uint64_t)v48 + OBJC_IVAR____TtC6ktrace9Recording_options,  type metadata accessor for RecordingOptions.Options);
    sub_186C37614(*(void *)v276, *(void *)(v276 + 8), *(_BYTE *)(v276 + 16));
    swift_release();
    goto LABEL_87;
  }

  __int128 v247 = v58;
  sub_186C5AA5C();
  id v63 = v62;

  *(void *)v306 = sub_186C5AA14();
  *(void *)&v306[8] = v64;
  __int128 v66 = v261;
  uint64_t v65 = v262;
  uint64_t v67 = v251;
  (*(void (**)(char *, void, uint64_t))(v262 + 104))(v261, *MEMORY[0x189606998], v251);
  unint64_t v68 = sub_186BFB8D0();
  uint64_t v69 = v260;
  unint64_t v246 = v68;
  sub_186C5AA80();
  (*(void (**)(char *, uint64_t))(v65 + 8))(v66, v67);
  swift_bridgeObjectRelease();
  uint64_t v70 = (uint64_t)v263;
  sub_186C5AA44();
  v57(v69, v54);
  v57(v30, v54);
  ((void (*)(uint64_t, void, uint64_t, uint64_t))v259)(v70, 0LL, 1LL, v54);
  uint64_t v71 = v279;
  swift_beginAccess();
  sub_186C375B8(v70, v71);
  swift_endAccess();
  sub_186C3AA2C(0LL, &qword_18C6A2B18);
  sub_186C5AC6C();
  *(void *)v306 = MEMORY[0x18961AFE8];
  sub_186BFCB04(&qword_18C6A2B20, (uint64_t (*)(uint64_t))MEMORY[0x18961B8A8], MEMORY[0x18961B8C0]);
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C6A2B28);
  sub_186C253C0(&qword_18C6A2B30, &qword_18C6A2B28, MEMORY[0x189618470]);
  sub_186C5B1F4();
  (*(void (**)(char *, void, uint64_t))(v267 + 104))(v283, *MEMORY[0x18961B900], v268);
  *(char **)((char *)v282 + OBJC_IVAR____TtC6ktrace9Recording_waitQueue) = (char *)sub_186C5B008();
  uint64_t v72 = v269;
  uint64_t v73 = *((void *)v269 + 2);
  __int128 v250 = (void (*)(void, void))v57;
  if (v73)
  {
    v283 = (char *)sub_186C5ADE0();
    uint64_t v75 = v74;
  }

  else
  {
    v283 = 0LL;
    uint64_t v75 = 0LL;
  }

  uint64_t v83 = v271;
  int v84 = (*((_DWORD *)v72 + 12) >> 1) & 1;
  uint64_t v85 = (uint64_t *)&v252[v274[32]];
  uint64_t v86 = *v85;
  uint64_t v87 = v85[1];
  uint64_t v88 = v274[28];
  int v89 = v252[v88];
  swift_bridgeObjectRetain();
  int64_t v90 = v270;
  int v91 = sub_186C16DA8(v270, v86, v87, v89, v84, (uint64_t)v283, v75);
  uint64_t v92 = v83;
  if (v83)
  {
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v79 = v273;
    uint64_t v80 = (void (*)(char *, uint64_t))v250;
    v250(v272, v273);
    sub_186C392F4((uint64_t)v281, type metadata accessor for RecordingOptions);
    uint64_t v48 = v282;
    uint64_t v82 = (void *)&unk_18C6A9000;
    int v81 = v284;
    goto LABEL_84;
  }

  uint64_t v262 = v88;
  LODWORD(v261) = v91;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v93 = v282;
  uint64_t v94 = (char *)v282 + OBJC_IVAR____TtC6ktrace9Recording_planPath;
  v247((char *)v282 + OBJC_IVAR____TtC6ktrace9Recording_planPath, v90, v273);
  v263 = v94;
  sub_186C12F68(v306);
  uint64_t v95 = *(void *)&v306[264];
  unint64_t v96 = (char *)v93 + OBJC_IVAR____TtC6ktrace9Recording_plan;
  memcpy((char *)v93 + OBJC_IVAR____TtC6ktrace9Recording_plan, v306, 0x108uLL);
  *((void *)v96 + 33) = v95;
  __int128 v97 = *(_OWORD *)&v306[288];
  *((_OWORD *)v96 + 17) = *(_OWORD *)&v306[272];
  *((_OWORD *)v96 + 18) = v97;
  *((_OWORD *)v96 + 19) = *(_OWORD *)&v306[304];
  v96[320] = v306[320];
  uint64_t v98 = (char *)MEMORY[0x18961AFE8];
  uint64_t v271 = 0LL;
  v264 = v96;
  if (v95)
  {
    int64_t v99 = *(void *)(v95 + 16);
    if (v99)
    {
      v286 = (char *)MEMORY[0x18961AFE8];
      swift_bridgeObjectRetain();
      sub_186BEF8C8(0LL, v99, 0);
      uint64_t v98 = v286;
      uint64_t v284 = v95;
      uint64_t v100 = (uint64_t *)(v95 + 40);
      do
      {
        uint64_t v102 = *(v100 - 1);
        uint64_t v101 = *v100;
        v286 = v98;
        unint64_t v104 = *((void *)v98 + 2);
        unint64_t v103 = *((void *)v98 + 3);
        swift_bridgeObjectRetain();
        if (v104 >= v103 >> 1)
        {
          sub_186BEF8C8((char *)(v103 > 1), v104 + 1, 1);
          uint64_t v98 = v286;
        }

        v100 += 4;
        *((void *)v98 + 2) = v104 + 1;
        unint64_t v105 = &v98[16 * v104];
        *((void *)v105 + 4) = v102;
        *((void *)v105 + 5) = v101;
        --v99;
      }

      while (v99);
      swift_bridgeObjectRelease();
      uint64_t v92 = v271;
      unint64_t v96 = v264;
    }
  }

  swift_beginAccess();
  uint64_t v106 = swift_bridgeObjectRetain();
  BOOL v107 = (char *)sub_186C222FC(v106);
  swift_bridgeObjectRelease();
  uint64_t v108 = *(void (**)(void))(v249 + v274[25]);
  unint64_t v109 = *((void *)v108 + 2);
  unint64_t v110 = *((void *)v107 + 2);
  char v259 = v108;
  if (v109 <= v110 >> 3)
  {
    v286 = v107;
    sub_186C1DD30((uint64_t)v108);
    uint64_t v111 = v286;
  }

  else
  {
    uint64_t v111 = (char *)sub_186C1DEC4((uint64_t)v108, (uint64_t)v107);
  }

  uint64_t v112 = *((void *)v98 + 2);
  uint64_t v113 = *((void *)v111 + 2);
  BOOL v114 = __OFADD__(v112, v113);
  uint64_t v115 = v112 + v113;
  if (v114) {
    goto LABEL_103;
  }
  v286 = sub_186C01C3C(0LL, v115 & ~(v115 >> 63), 0, MEMORY[0x18961AFE8]);
  uint64_t v116 = swift_bridgeObjectRetain();
  sub_186C384CC(v116);
  sub_186BFFE74((uint64_t)v98);
  swift_bridgeObjectRelease();
  uint64_t v117 = swift_bridgeObjectRetain();
  sub_186C384CC(v117);
  uint64_t v118 = sub_186C222FC((uint64_t)v286);
  swift_bridgeObjectRelease();
  uint64_t v285 = v118;
  uint64_t v119 = v118 + 56;
  uint64_t v120 = 1LL << *(_BYTE *)(v118 + 32);
  uint64_t v121 = -1LL;
  if (v120 < 64) {
    uint64_t v121 = ~(-1LL << v120);
  }
  unint64_t v122 = v121 & *(void *)(v118 + 56);
  uint64_t v268 = (unint64_t)(v120 + 63) >> 6;
  swift_bridgeObjectRetain();
  uint64_t v123 = 0LL;
  v266 = (char *)v118;
  *(void *)&__int128 v265 = v118 + 56;
  while (1)
  {
    if (v122)
    {
      v283 = (char *)((v122 - 1) & v122);
      uint64_t v284 = v123;
      unint64_t v124 = __clz(__rbit64(v122)) | (v123 << 6);
      goto LABEL_46;
    }

    uint64_t v125 = v123 + 1;
    if (__OFADD__(v123, 1LL))
    {
      __break(1u);
LABEL_98:
      swift_endAccess();
      goto LABEL_99;
    }

    if (v125 >= v268) {
      goto LABEL_65;
    }
    unint64_t v126 = *(void *)(v119 + 8 * v125);
    uint64_t v127 = v123 + 1;
    if (!v126)
    {
      uint64_t v127 = v123 + 2;
      if (v123 + 2 >= v268) {
        goto LABEL_65;
      }
      unint64_t v126 = *(void *)(v119 + 8 * v127);
      if (!v126)
      {
        uint64_t v127 = v123 + 3;
        if (v123 + 3 >= v268) {
          goto LABEL_65;
        }
        unint64_t v126 = *(void *)(v119 + 8 * v127);
        if (!v126) {
          break;
        }
      }
    }

LABEL_65:
  swift_release();
  __int128 v158 = *(char **)&v252[v274[26]];
  int64_t v159 = *((void *)v158 + 2);
  uint64_t v160 = MEMORY[0x18961AFE8];
  if (v159)
  {
    v305[0] = MEMORY[0x18961AFE8];
    swift_bridgeObjectRetain();
    sub_186C37554(0, v159, 0);
    uint64_t v284 = v305[0];
    v260 = v158;
    __int128 v161 = (unint64_t *)(v158 + 40);
    __int128 v265 = xmmword_186C5E4F0;
    while (1)
    {
      uint64_t v163 = *(v161 - 1);
      unint64_t v162 = *v161;
      swift_bridgeObjectRetain();
      uint64_t v290 = 58LL;
      unint64_t v291 = 0xE100000000000000LL;
      *(void *)&__int128 v293 = &v290;
      swift_bridgeObjectRetain();
      __int128 v164 = sub_186BEE808(1LL, 1, sub_186BF0290, (uint64_t)&v292, v163, v162);
      uint64_t v165 = *((void *)v164 + 2);
      if (!v165) {
        break;
      }
      v266 = (char *)v159;
      uint64_t v271 = v92;
      uint64_t v166 = *((void *)v164 + 4);
      uint64_t v167 = *((void *)v164 + 5);
      uint64_t v168 = *((void *)v164 + 7);
      uint64_t v267 = *((void *)v164 + 6);
      uint64_t v268 = v166;
      if (v165 == 1)
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        v283 = (char *)MEMORY[0x186E44AC4](0LL, 0xE000000000000000LL);
        uint64_t v170 = v169;
        uint64_t v172 = v171;
        uint64_t v174 = v173;
      }

      else
      {
        uint64_t v170 = *((void *)v164 + 9);
        v283 = (char *)*((void *)v164 + 8);
        uint64_t v172 = *((void *)v164 + 10);
        uint64_t v174 = *((void *)v164 + 11);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
      }

      uint64_t v175 = MEMORY[0x186E4477C](v268, v167, v267, v168);
      uint64_t v177 = v176;
      swift_bridgeObjectRelease();
      __swift_instantiateConcreteTypeFromMangledName(&qword_18C6A21C0);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = v265;
      uint64_t v179 = MEMORY[0x186E4477C](v283, v170, v172, v174);
      uint64_t v181 = v180;
      swift_bridgeObjectRelease();
      *(void *)(inited + 32) = v179;
      *(void *)(inited + 40) = v181;
      uint64_t v182 = sub_186C222FC(inited);
      swift_setDeallocating();
      swift_arrayDestroy();
      uint64_t v92 = v271;
      if (v271) {
        goto LABEL_77;
      }
      swift_bridgeObjectRelease();
      uint64_t v183 = v284;
      v305[0] = v284;
      unint64_t v185 = *(void *)(v284 + 16);
      unint64_t v184 = *(void *)(v284 + 24);
      if (v185 >= v184 >> 1)
      {
        sub_186C37554(v184 > 1, v185 + 1, 1);
        uint64_t v183 = v305[0];
      }

      v161 += 2;
      *(void *)(v183 + 16) = v185 + 1;
      uint64_t v284 = v183;
      id v186 = (void *)(v183 + 24 * v185);
      v186[4] = v175;
      v186[5] = v177;
      v186[6] = v182;
      int64_t v159 = (int64_t)(v266 - 1);
      if (v266 == (char *)1)
      {
        swift_bridgeObjectRelease();
        uint64_t v160 = v284;
        goto LABEL_78;
      }
    }

    swift_bridgeObjectRelease();
    type metadata accessor for KTraceRecordError();
    sub_186BFCB04( (unint64_t *)&qword_18C6A21E0,  (uint64_t (*)(uint64_t))type metadata accessor for KTraceRecordError,  (uint64_t)&unk_186C60EF4);
    swift_allocError();
    *(void *)uint64_t v187 = v163;
    *(void *)(v187 + 8) = v162;
    *(_BYTE *)(v187 + 16) = 0;
    swift_storeEnumTagMultiPayload();
    swift_bridgeObjectRetain();
    swift_willThrow();
LABEL_77:
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    uint64_t v79 = v273;
    uint64_t v80 = (void (*)(char *, uint64_t))v250;
    uint64_t v82 = (void *)&unk_18C6A9000;
    goto LABEL_83;
  }

LABEL_78:
  uint64_t v79 = v273;
  uint64_t v80 = (void (*)(char *, uint64_t))v250;
  uint64_t v82 = &unk_18C6A9000;
  if (*(void *)(v160 + 16))
  {
    uint64_t v188 = v160;
    __swift_instantiateConcreteTypeFromMangledName(&qword_18C6A28F0);
    id v189 = (char *)sub_186C5B38C();
    uint64_t v160 = v188;
  }

  else
  {
    id v189 = (char *)MEMORY[0x18961AFF0];
  }

  uint64_t v190 = v262;
  v286 = v189;
  sub_186C36C6C(v160, 1, &v286);
  if (v92)
  {
    swift_release();
    swift_release();
    swift_release();
LABEL_83:
    swift_bridgeObjectRelease();
    v80(v270, v79);
    v80(v272, v79);
    sub_186C392F4((uint64_t)v281, type metadata accessor for RecordingOptions);
    uint64_t v48 = v282;
    v80(v263, v79);
    memcpy(v306, (char *)v48 + OBJC_IVAR____TtC6ktrace9Recording_plan, sizeof(v306));
    sub_186C23A98((uint64_t)v306);
    int v81 = 1;
    goto LABEL_84;
  }

  v289[0] = (uint64_t)v286;
  id v192 = v252;
  char v193 = v252[v190];
  uint64_t v194 = v264;
  swift_beginAccess();
  uint64_t v195 = swift_bridgeObjectRetain();
  uint64_t v196 = sub_186C13514(v195, (uint64_t)v259, v193, v289);
  v283 = v197;
  uint64_t v198 = v196;
  swift_endAccess();
  swift_bridgeObjectRelease();
  uint64_t v199 = *(uint64_t *)((char *)v282 + v248);
  v286 = 0LL;
  unint64_t v287 = 0xE000000000000000LL;
  swift_retain();
  sub_186C5B260();
  swift_bridgeObjectRelease();
  v286 = (char *)0xD00000000000001ALL;
  unint64_t v287 = 0x8000000186C66D80LL;
  uint64_t v284 = v198;
  *(void *)&__int128 v292 = v198;
  uint64_t v200 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C6A21A8);
  sub_186C253C0((unint64_t *)&qword_18C6A21B0, &qword_18C6A21A8, MEMORY[0x189618458]);
  uint64_t v268 = v200;
  sub_186C5ACD8();
  sub_186C5ADD4();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, unint64_t))(*(void *)v199 + 224LL))(v286, v287);
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v201 = *((void *)v194 + 34);
  unint64_t v202 = *((void *)v194 + 35);
  uint64_t v290 = v201;
  unint64_t v291 = v202;
  id v203 = (uint64_t *)&v192[v274[19]];
  uint64_t v204 = v203[1];
  if (v204)
  {
    uint64_t v205 = *v203;
    sub_186BF06B0(v201, v202);
    swift_bridgeObjectRetain();
    uint64_t v206 = sub_186BED3BC(v205, v204);
    uint64_t v92 = 0LL;
    sub_186BED654(v206);
    uint64_t result = swift_bridgeObjectRelease();
  }

  else
  {
    uint64_t result = sub_186BF06B0(v201, v202);
  }

  uint64_t v118 = v278;
  id v207 = v274;
  unint64_t v208 = v252;
  uint64_t v209 = (uint64_t *)&v252[v274[20]];
  uint64_t v210 = v209[1];
  if (v210)
  {
    uint64_t v211 = *v209;
    swift_bridgeObjectRetain();
    uint64_t v212 = sub_186BED3BC(v211, v210);
    sub_186BED654(v212);
    uint64_t result = swift_bridgeObjectRelease();
    id v207 = v274;
    unint64_t v208 = v252;
  }

  uint64_t v213 = &v208[v207[15]];
  if ((v213[8] & 1) == 0)
  {
    uint64_t v214 = *(void *)v213;
    if ((*(void *)v213 & 0x8000000000000000LL) == 0)
    {
      swift_beginAccess();
      sub_186C11B24(v214);
      goto LABEL_98;
    }

    __break(1u);
LABEL_110:
    __break(1u);
    return result;
  }

uint64_t sub_186C32618(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(uint64_t (**)(uint64_t))(a1 + 32);
  swift_retain();
  LOBYTE(a2) = v3(a2);
  swift_release();
  return a2 & 1;
}

void sub_186C32660(int a1, uint64_t a2, uint64_t a3)
{
  __int128 v4 = *(void **)(v3 + 40);
  if (v4)
  {
    _Block_copy(v4);
    sub_186C36658(a2, a3, a1, (void (**)(void, void, void, void))v4);
  }

uint64_t sub_186C326BC()
{
  v36[41] = *MEMORY[0x1895F89C0];
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C6A2B40);
  MEMORY[0x1895F8858](v2);
  __int128 v4 = (char *)&v31 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for KTraceRecordError();
  MEMORY[0x1895F8858](v5);
  uint64_t v7 = (char *)&v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (geteuid())
  {
    sub_186BFCB04( (unint64_t *)&qword_18C6A21E0,  (uint64_t (*)(uint64_t))type metadata accessor for KTraceRecordError,  (uint64_t)&unk_186C60EF4);
    swift_allocError();
LABEL_3:
    swift_storeEnumTagMultiPayload();
    return swift_willThrow();
  }

  sub_186C32B38((uint64_t)v4);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    sub_186C3A824( (uint64_t)v4,  (uint64_t)v7,  (uint64_t (*)(void))type metadata accessor for KTraceRecordError);
    sub_186BFCB04( (unint64_t *)&qword_18C6A21E0,  (uint64_t (*)(uint64_t))type metadata accessor for KTraceRecordError,  (uint64_t)&unk_186C60EF4);
    swift_allocError();
    sub_186C3A868((uint64_t)v7, v9, (uint64_t (*)(void))type metadata accessor for KTraceRecordError);
    swift_willThrow();
    return sub_186C392F4((uint64_t)v7, (uint64_t (*)(void))type metadata accessor for KTraceRecordError);
  }

  sub_186BFCA44((uint64_t)v4, &qword_18C6A2B40);
  uint64_t v10 = *(void **)(*(void *)(v0 + OBJC_IVAR____TtC6ktrace9Recording_recording) + 40LL);
  uint64_t v11 = v0 + OBJC_IVAR____TtC6ktrace9Recording_options;
  uint64_t v12 = type metadata accessor for RecordingOptions.Options(0LL);
  uint64_t v13 = (int *)v12;
  if (v10)
  {
    uint64_t v14 = (uint64_t *)(v11 + *(int *)(v12 + 128));
    uint64_t v16 = *v14;
    uint64_t v15 = v14[1];
    _Block_copy(v10);
    _Block_copy(v10);
    sub_186C36658(v16, v15, 0, (void (**)(void, void, void, void))v10);
    uint64_t v17 = v10;
  }

  else
  {
    uint64_t v17 = 0LL;
  }

  _Block_release(v17);
  if ((*(_BYTE *)(v11 + v13[18]) & 1) == 0)
  {
    uint64_t v19 = (uint64_t (*)(void *, void))(*(uint64_t (**)(void *))(*(void *)v0 + 240LL))(v36);
    *(_BYTE *)(v20 + 168) = 0;
    uint64_t v18 = v19(v36, 0LL);
  }

  (*(void (**)(void *__return_ptr, uint64_t))(*(void *)v0 + 224LL))(v36, v18);
  memcpy(v35, v36, sizeof(v35));
  uint64_t v21 = *(_TtC6ktrace12ProviderList **)(v0 + OBJC_IVAR____TtC6ktrace9Recording_session);
  char v22 = *(_BYTE *)(v11 + v13[28]);
  sub_186C14B4C(v21, *(void **)(v0 + OBJC_IVAR____TtC6ktrace9Recording_reporter), v22);
  uint64_t result = sub_186C23A98((uint64_t)v36);
  if (!v1)
  {
    uint64_t v23 = v11 + v13[21];
    if ((*(_BYTE *)(v23 + 8) & 1) == 0) {
      uint64_t result = ktrace_set_buffer_size((uint64_t)v21, *(void *)v23);
    }
    uint64_t v24 = v11 + v13[30];
    if ((*(_BYTE *)(v24 + 8) & 1) == 0) {
      uint64_t result = (uint64_t)ktrace_set_trailing_duration((uint64_t)v21, *(void *)v24);
    }
    if (*(_BYTE *)(v11 + v13[22]) == 1) {
      uint64_t result = ktrace_set_collection_priority((uint64_t)v21, 63);
    }
    uint64_t v25 = v11 + v13[23];
    if ((*(_BYTE *)(v25 + 4) & 1) == 0) {
      uint64_t result = ktrace_set_collection_priority((uint64_t)v21, *(_DWORD *)v25);
    }
    uint64_t v26 = v11 + v13[10];
    if ((*(_BYTE *)(v26 + 4) & 1) != 0)
    {
      uint64_t v27 = v11 + v13[11];
      if ((*(_BYTE *)(v27 + 8) & 1) != 0) {
        return result;
      }
      if ((v22 & 1) == 0)
      {
        sub_186BFCB04( (unint64_t *)&qword_18C6A21E0,  (uint64_t (*)(uint64_t))type metadata accessor for KTraceRecordError,  (uint64_t)&unk_186C60EF4);
        swift_allocError();
        unint64_t v29 = 0xD00000000000001CLL;
        uint64_t v30 = "end-after-kdebug-events-size";
LABEL_29:
        *uint64_t v28 = v29;
        v28[1] = (unint64_t)(v30 - 32) | 0x8000000000000000LL;
        goto LABEL_3;
      }
    }

    else
    {
      if ((v22 & 1) == 0)
      {
        sub_186BFCB04( (unint64_t *)&qword_18C6A21E0,  (uint64_t (*)(uint64_t))type metadata accessor for KTraceRecordError,  (uint64_t)&unk_186C60EF4);
        swift_allocError();
        unint64_t v29 = 0xD000000000000013LL;
        uint64_t v30 = "end-on-kdebug-event";
        goto LABEL_29;
      }

      *(_DWORD *)uint64_t v35 = *(_DWORD *)v26;
      memset(&v35[8], 0, 32);
      int v32 = -1;
      __int128 v33 = 0u;
      __int128 v34 = 0u;
      uint64_t result = ktrace_end_on_event_match((uint64_t)v21, (__int128 *)v35, (__int128 *)&v32);
      uint64_t v27 = v11 + v13[11];
      if ((*(_BYTE *)(v27 + 8) & 1) != 0) {
        return result;
      }
    }

    return ktrace_end_on_event_count((uint64_t)v21, *(void *)v27);
  }

  return result;
}

uint64_t sub_186C32B38@<X0>(uint64_t a1@<X8>)
{
  uint64_t v12 = *MEMORY[0x1895F89C0];
  int v11 = 0;
  size_t v10 = 4LL;
  sysctlbyname("ktrace.state", &v11, &v10, 0LL, 0LL);
  if ((v11 | 2) == 2) {
    goto LABEL_2;
  }
  int v9 = 0;
  size_t v8 = 4LL;
  sysctlbyname("ktrace.owning_pid", &v9, &v8, 0LL, 0LL);
  int v3 = v9;
  if (v9 < 1 || v3 == getpid()) {
    goto LABEL_2;
  }
  uint64_t v4 = sub_186C5AF48();
  *(void *)(v4 + 16) = 64LL;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_OWORD *)(v4 + 80) = 0u;
  *(_OWORD *)(v4 + 32) = 0u;
  if (proc_name(v3, (void *)(v4 + 32), 0x40u) > 0)
  {
LABEL_13:
    uint64_t v5 = sub_186C39414(v4);
    uint64_t v7 = v6;
    swift_bridgeObjectRelease();
    *(void *)a1 = v5;
    *(void *)(a1 + 8) = v7;
    *(_DWORD *)(a1 + 16) = v3;
    type metadata accessor for KTraceRecordError();
    swift_storeEnumTagMultiPayload();
    __swift_instantiateConcreteTypeFromMangledName(&qword_18C6A2B40);
    return swift_storeEnumTagMultiPayload();
  }

  if (MEMORY[0x186E445C0]() != 3)
  {
    if (*(void *)(sub_186C5AD74() + 16))
    {
      swift_release();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
      {
        if (*(void *)(v4 + 16))
        {
LABEL_12:
          *(_BYTE *)(v4 + 32) = 63;
          goto LABEL_13;
        }

uint64_t sub_186C32D2C()
{
  uint64_t v2 = v1;
  uint64_t v3 = v0;
  uint64_t v4 = v0 + OBJC_IVAR____TtC6ktrace9Recording_options;
  uint64_t v5 = *(void *)(v4 + *(int *)(type metadata accessor for RecordingOptions.Options(0LL) + 24));
  int64_t v6 = *(void *)(v5 + 16);
  uint64_t v7 = MEMORY[0x18961AFE8];
  if (v6)
  {
    uint64_t v35 = v1;
    v34[0] = MEMORY[0x18961AFE8];
    swift_bridgeObjectRetain();
    sub_186C37698(0, v6, 0);
    uint64_t v7 = v34[0];
    size_t v8 = (uint64_t *)(v5 + 40);
    do
    {
      uint64_t v10 = *(v8 - 1);
      uint64_t v9 = *v8;
      swift_bridgeObjectRetain();
      sub_186C048D0(v10, v9, v33);
      swift_bridgeObjectRelease();
      v34[0] = v7;
      unint64_t v12 = *(void *)(v7 + 16);
      unint64_t v11 = *(void *)(v7 + 24);
      if (v12 >= v11 >> 1)
      {
        sub_186C37698(v11 > 1, v12 + 1, 1);
        uint64_t v7 = v34[0];
      }

      v8 += 2;
      *(void *)(v7 + 16) = v12 + 1;
      sub_186C2E0E0(v33, v7 + 40 * v12 + 32);
      --v6;
    }

    while (v6);
    swift_bridgeObjectRelease();
    uint64_t v2 = v35;
  }

  if (!*(void *)(v7 + 16)) {
    return swift_bridgeObjectRelease();
  }
  uint64_t v13 = *(void *)(v3 + OBJC_IVAR____TtC6ktrace9Recording_reporter);
  char v14 = sub_186BFDA3C();
  char v15 = sub_186BFDFF4();
  uint64_t v16 = *(void (**)(unint64_t, unint64_t, uint64_t, void))(*(void *)v13 + 216LL);
  v16(0xD000000000000018LL, 0x8000000186C66E10LL, v14 & 1, v15 & 1);
  uint64_t v17 = *(void *)(v3 + OBJC_IVAR____TtC6ktrace9Recording_recording);
  uint64_t v18 = *(void (***)(void, void))(v17 + 40);
  if (v18)
  {
    _Block_copy(*(const void **)(v17 + 40));
    _Block_copy(v18);
    v33[0] = xmmword_186C60FF0;
    LODWORD(v34[0]) = 1;
    v34[1] = v33;
    ((void (**)(void, void *))v18)[2](v18, v34);
    _Block_release(v18);
    uint64_t v19 = v18;
  }

  else
  {
    uint64_t v19 = 0LL;
  }

  _Block_release(v19);
  type metadata accessor for WaitGroup();
  id v21 = *(id *)(v3 + OBJC_IVAR____TtC6ktrace9Recording_waitQueue);
  swift_retain();
  uint64_t result = sub_186C04544(v7, v21, v13);
  if (!v2)
  {
    uint64_t v22 = sub_186C04670();
    if (!v22) {
      return swift_release();
    }
    uint64_t v23 = *(void *)(v22 + 16);
    if (v23)
    {
      uint64_t v35 = 0LL;
      uint64_t v24 = (char *)(v22 + 48);
      do
      {
        uint64_t v25 = *((void *)v24 - 2);
        uint64_t v26 = *((void *)v24 - 1);
        char v27 = *v24;
        v24 += 24;
        sub_186C044C8(v25, v26, v27);
        sub_186C03F60(v25, v26, v27);
        unint64_t v29 = v28;
        unint64_t v31 = v30;
        sub_186C05718(v25, v26, v27);
        LOBYTE(v25) = sub_186BFDA3C();
        char v32 = sub_186BFDFF4();
        v16(v29, v31, v25 & 1, v32 & 1);
        swift_bridgeObjectRelease();
        --v23;
      }

      while (v23);
      swift_release();
      return swift_bridgeObjectRelease();
    }

    swift_release();
    return swift_bridgeObjectRelease();
  }

  return result;
}

uint64_t sub_186C3303C()
{
  uint64_t v1 = v0;
  uint64_t v116 = *MEMORY[0x1895F89C0];
  uint64_t v2 = sub_186C5ABB8();
  uint64_t v98 = *(void *)(v2 - 8);
  uint64_t v99 = v2;
  MEMORY[0x1895F8858](v2);
  uint64_t v102 = (char *)&v94 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C6A21F8);
  MEMORY[0x1895F8858](v4);
  int64_t v6 = (char *)&v94 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = (os_log_s *)sub_186C5AA8C();
  uint64_t v8 = *((void *)v7 - 1);
  uint64_t v9 = MEMORY[0x1895F8858](v7);
  __int128 v97 = (char *)&v94 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = MEMORY[0x1895F8858](v9);
  uint64_t v13 = (char *)&v94 - v12;
  (*(void (**)(uint64_t))(*(void *)v0 + 248LL))(v11);
  if ((*(unsigned int (**)(char *, uint64_t, os_log_s *))(v8 + 48))(v6, 1LL, v7) == 1)
  {
    sub_186BFCA44((uint64_t)v6, &qword_18C6A21F8);
    uint64_t result = sub_186C5B35C();
    __break(1u);
  }

  else
  {
    uint64_t v105 = v8;
    char v14 = *(void (**)(char *, char *, os_log_s *))(v8 + 32);
    BOOL v107 = v13;
    v14(v13, v6, v7);
    uint64_t v15 = v0 + OBJC_IVAR____TtC6ktrace9Recording_options;
    uint64_t v103 = type metadata accessor for RecordingOptions.Options(0LL);
    uint64_t v16 = *(int *)(v103 + 28);
    uint64_t v101 = v15;
    uint64_t v17 = *(void *)(v15 + v16);
    int64_t v18 = *(void *)(v17 + 16);
    uint64_t v19 = MEMORY[0x18961AFE8];
    uint64_t v106 = v1;
    if (v18)
    {
      os_log_t v100 = v7;
      *(void *)&__int128 v109 = MEMORY[0x18961AFE8];
      swift_bridgeObjectRetain();
      sub_186C37698(0, v18, 0);
      uint64_t v19 = v109;
      uint64_t v20 = (char *)(v17 + 48);
      do
      {
        uint64_t v21 = *((void *)v20 - 2);
        uint64_t v22 = *((void *)v20 - 1);
        char v23 = *v20;
        sub_186C05884(v21, v22, *v20);
        sub_186C04EE4(v21, v22, v23, (uint64_t *)&v111);
        sub_186C058AC(v21, v22, v23);
        *(void *)&__int128 v109 = v19;
        unint64_t v25 = *(void *)(v19 + 16);
        unint64_t v24 = *(void *)(v19 + 24);
        if (v25 >= v24 >> 1)
        {
          sub_186C37698(v24 > 1, v25 + 1, 1);
          uint64_t v19 = v109;
        }

        v20 += 24;
        *(void *)(v19 + 16) = v25 + 1;
        sub_186C2E0E0(&v111, v19 + 40 * v25 + 32);
        --v18;
      }

      while (v18);
      swift_bridgeObjectRelease();
      uint64_t v7 = v100;
      uint64_t v1 = v106;
    }

    __swift_instantiateConcreteTypeFromMangledName(&qword_18C6A2B48);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_186C5E4F0;
    uint64_t v27 = *(void *)(v1 + OBJC_IVAR____TtC6ktrace9Recording_kernelDisableWaiter);
    *(void *)(inited + 56) = type metadata accessor for KernelDisableWaiter();
    *(void *)(inited + 64) = &off_189F57F80;
    *(void *)(inited + 32) = v27;
    *(void *)&__int128 v111 = v19;
    swift_retain();
    sub_186C38894(inited);
    uint64_t v28 = v111;
    type metadata accessor for WaitGroup();
    uint64_t v29 = *(void *)(v1 + OBJC_IVAR____TtC6ktrace9Recording_reporter);
    id v30 = *(id *)(v1 + OBJC_IVAR____TtC6ktrace9Recording_waitQueue);
    swift_retain();
    unint64_t v31 = v30;
    uint64_t v32 = v104;
    uint64_t v33 = sub_186C04544(v28, v31, v29);
    __int128 v34 = v107;
    uint64_t v35 = v105;
    if (v32) {
      return (*(uint64_t (**)(char *, os_log_s *))(v105 + 8))(v107, v7);
    }
    (*(void (**)(uint64_t))(*(void *)v1 + 328LL))(v33);
    uint64_t v37 = *(void *)(v1 + OBJC_IVAR____TtC6ktrace9Recording_recording);
    uint64_t v95 = v37;
    uint64_t v38 = *(void (***)(void, void))(v37 + 40);
    if (v38)
    {
      _Block_copy(*(const void **)(v37 + 40));
      _Block_copy(v38);
      __int128 v111 = xmmword_186C60FF0;
      LODWORD(v109) = 2;
      *((void *)&v109 + 1) = &v111;
      ((void (**)(void, __int128 *))v38)[2](v38, &v109);
      _Block_release(v38);
      uint64_t v39 = v38;
    }

    else
    {
      uint64_t v39 = 0LL;
    }

    _Block_release(v39);
    uint64_t v40 = *(void (**)(void))(*(void *)v29 + 176LL);
    uint64_t v41 = v102;
    uint64_t v96 = v29;
    v40();
    uint64_t v42 = v97;
    (*(void (**)(char *, char *, os_log_s *))(v35 + 16))(v97, v34, v7);
    uint64_t v43 = (os_log_s *)sub_186C5ABA0();
    os_log_type_t v44 = sub_186C5AFCC();
    BOOL v45 = os_log_type_enabled(v43, v44);
    uint64_t v104 = 0LL;
    if (v45)
    {
      os_log_t v100 = v43;
      uint64_t v46 = (uint8_t *)swift_slowAlloc();
      uint64_t v47 = swift_slowAlloc();
      *(void *)&__int128 v111 = v47;
      *(_DWORD *)uint64_t v46 = 136315138;
      uint64_t v48 = sub_186C5AA74();
      *(void *)&__int128 v109 = sub_186BF7C38(v48, v49, (uint64_t *)&v111);
      sub_186C5B0EC();
      swift_bridgeObjectRelease();
      uint64_t v105 = *(void *)(v105 + 8);
      ((void (*)(char *, os_log_s *))v105)(v42, v7);
      os_log_t v50 = v100;
      _os_log_impl(&dword_186BA3000, v100, v44, "writing in-process file to %s)", v46, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x186E466F0](v47, -1LL, -1LL);
      MEMORY[0x186E466F0](v46, -1LL, -1LL);

      (*(void (**)(char *, uint64_t))(v98 + 8))(v102, v99);
    }

    else
    {
      uint64_t v105 = *(void *)(v35 + 8);
      ((void (*)(char *, os_log_s *))v105)(v42, v7);

      (*(void (**)(char *, uint64_t))(v98 + 8))(v41, v99);
    }

    uint64_t v51 = v103;
    uint64_t v52 = v106;
    uint64_t v53 = *(_DWORD **)(v106 + OBJC_IVAR____TtC6ktrace9Recording_session);
    sub_186C5AA74();
    uint64_t v54 = v101;
    else {
      int v55 = 0;
    }
    BOOL v114 = sub_186C3945C;
    uint64_t v115 = v52;
    *(void *)&__int128 v111 = MEMORY[0x1895F87A8];
    *((void *)&v111 + 1) = 1107296256LL;
    uint64_t v112 = sub_186C32614;
    uint64_t v113 = &block_descriptor_9;
    uint64_t v56 = _Block_copy(&v111);
    swift_retain();
    swift_release();
    uint64_t v57 = sub_186C5AD74();
    swift_bridgeObjectRelease();
    int started = ktrace_start_writing_file(v53, (char *)(v57 + 32), v55, v56, 0LL);
    swift_release();
    _Block_release(v56);
    if (started)
    {
      type metadata accessor for KTraceRecordError();
      sub_186BFCB04( (unint64_t *)&qword_18C6A21E0,  (uint64_t (*)(uint64_t))type metadata accessor for KTraceRecordError,  (uint64_t)&unk_186C60EF4);
      swift_allocError();
      *id v59 = started;
      swift_storeEnumTagMultiPayload();
      swift_willThrow();
      char v60 = v107;
      id v61 = v7;
    }

    else
    {
      uint64_t v62 = *(void *)(v54 + *(int *)(v103 + 32));
      int64_t v63 = *(void *)(v62 + 16);
      uint64_t v64 = MEMORY[0x18961AFE8];
      if (v63)
      {
        os_log_t v100 = v7;
        *(void *)&__int128 v109 = MEMORY[0x18961AFE8];
        swift_bridgeObjectRetain();
        sub_186C37698(0, v63, 0);
        uint64_t v64 = v109;
        uint64_t v65 = (char *)(v62 + 48);
        do
        {
          uint64_t v66 = *((void *)v65 - 2);
          uint64_t v67 = *((void *)v65 - 1);
          char v68 = *v65;
          sub_186C05884(v66, v67, *v65);
          sub_186C04EE4(v66, v67, v68, (uint64_t *)&v111);
          sub_186C058AC(v66, v67, v68);
          *(void *)&__int128 v109 = v64;
          unint64_t v70 = *(void *)(v64 + 16);
          unint64_t v69 = *(void *)(v64 + 24);
          if (v70 >= v69 >> 1)
          {
            sub_186C37698(v69 > 1, v70 + 1, 1);
            uint64_t v64 = v109;
          }

          v65 += 24;
          *(void *)(v64 + 16) = v70 + 1;
          sub_186C2E0E0(&v111, v64 + 40 * v70 + 32);
          --v63;
        }

        while (v63);
        swift_bridgeObjectRelease();
        uint64_t v7 = v100;
      }

      uint64_t v71 = (*(uint64_t (**)(void))(*(void *)v106 + 320LL))();
      uint64_t v72 = v101;
      uint64_t v73 = v103;
      if (v71)
      {
        uint64_t v74 = v104;
        sub_186C045BC(v64);
        uint64_t v104 = v74;
        if (v74)
        {
          ((void (*)(char *, os_log_s *))v105)(v107, v7);
          swift_bridgeObjectRelease();
          return swift_release();
        }

        swift_release();
      }

      swift_bridgeObjectRelease();
      *(void *)&__int128 v109 = 0LL;
      *((void *)&v109 + 1) = 0xE000000000000000LL;
      sub_186C5B260();
      __int128 v108 = v109;
      uint64_t v110 = MEMORY[0x189617FA8];
      *(void *)&__int128 v109 = 0x676E697472617473LL;
      *((void *)&v109 + 1) = 0xE800000000000000LL;
      uint64_t v75 = (unsigned __int8 *)sub_186BFD5D8();
      sub_186BFDA24((uint64_t)&v109, *v75);
      __swift_destroy_boxed_opaque_existential_0((uint64_t)&v109);
      uint64_t v76 = sub_186C5ADD4();
      (*(void (**)(__int128 *__return_ptr, uint64_t))(*(void *)v106 + 224LL))(&v111, v76);
      swift_bridgeObjectRetain();
      sub_186C23A98((uint64_t)&v111);
      sub_186C5ADD4();
      swift_bridgeObjectRelease();
      sub_186C5ADD4();
      sub_186C5AA68();
      sub_186C5ADD4();
      swift_bridgeObjectRelease();
      sub_186C5ADD4();
      __int128 v77 = v108;
      char v78 = sub_186BFDA3C();
      char v79 = sub_186BFDFF4();
      (*(void (**)(void, void, void, void))(*(void *)v96 + 216LL))( v77,  *((void *)&v77 + 1),  v78 & 1,  v79 & 1);
      swift_bridgeObjectRelease();
      uint64_t v80 = *(void (***)(void, void))(v95 + 40);
      int v81 = v7;
      if (v80)
      {
        _Block_copy(*(const void **)(v95 + 40));
        _Block_copy(v80);
        __int128 v109 = xmmword_186C60FF0;
        LODWORD(v108) = 3;
        *((void *)&v108 + 1) = &v109;
        ((void (**)(void, __int128 *))v80)[2](v80, &v108);
        _Block_release(v80);
        uint64_t v82 = v80;
      }

      else
      {
        uint64_t v82 = 0LL;
      }

      _Block_release(v82);
      uint64_t v83 = *(void *)(v72 + *(int *)(v73 + 48));
      uint64_t v84 = *(void *)(v83 + 16);
      if (v84)
      {
        uint64_t v85 = (const char *)(sub_186C5AD74() + 32);
        swift_bridgeObjectRetain();
        uint32_t v86 = notify_post(v85);
        swift_release();
        uint64_t v87 = v107;
        if (v86)
        {
LABEL_40:
          swift_bridgeObjectRelease();
          type metadata accessor for KTraceRecordError();
          sub_186BFCB04( (unint64_t *)&qword_18C6A21E0,  (uint64_t (*)(uint64_t))type metadata accessor for KTraceRecordError,  (uint64_t)&unk_186C60EF4);
          swift_allocError();
          *uint64_t v93 = v86;
          swift_storeEnumTagMultiPayload();
          swift_willThrow();
        }

        else
        {
          uint64_t v88 = 0LL;
          uint64_t v89 = v83 + 56;
          uint64_t v90 = v84 - 1;
          while (v90 != v88)
          {
            uint64_t v91 = v89 + 16;
            uint64_t v92 = sub_186C5AD74();
            uint32_t v86 = notify_post((const char *)(v92 + 32));
            uint64_t v87 = v107;
            swift_release();
            uint64_t v89 = v91;
            if (v86) {
              goto LABEL_40;
            }
          }

          swift_bridgeObjectRelease();
        }
      }

      else
      {
        uint64_t v87 = v107;
      }

      char v60 = v87;
      id v61 = v81;
    }

    return ((uint64_t (*)(char *, os_log_s *))v105)(v60, v61);
  }

  return result;
}

uint64_t sub_186C33BB0()
{
  uint64_t result = (*(uint64_t (**)(void))(*(void *)v0 + 320LL))();
  if (result)
  {
    uint64_t v2 = sub_186C04670();
    uint64_t result = swift_release();
    if (v2)
    {
      uint64_t v3 = *(void *)(v2 + 16);
      if (v3)
      {
        uint64_t v16 = *(void (**)(uint64_t, uint64_t, void))(*(void *)v0 + 304LL);
        uint64_t v12 = *(void (**)(uint64_t, unint64_t, void, uint64_t))(**(void **)(v0
                                                                                              + OBJC_IVAR____TtC6ktrace9Recording_reporter)
                                                                                + 216LL);
        uint64_t v4 = (unsigned __int8 *)(v2 + 48);
        do
        {
          uint64_t v5 = *((void *)v4 - 2);
          uint64_t v6 = *((void *)v4 - 1);
          unsigned int v7 = *v4;
          v4 += 24;
          sub_186C044C8(v5, v6, v7);
          sub_186C044C8(v5, v6, v7);
          v16(v5, v6, v7);
          uint64_t v14 = 0LL;
          unint64_t v15 = 0xE000000000000000LL;
          v13[3] = MEMORY[0x189617FA8];
          v13[0] = 0x676E69646E65LL;
          v13[1] = 0xE600000000000000LL;
          uint64_t v8 = (unsigned __int8 *)sub_186BFD5D8();
          sub_186BFDA24((uint64_t)v13, *v8);
          __swift_destroy_boxed_opaque_existential_0((uint64_t)v13);
          sub_186C5ADD4();
          sub_186C03F60(v5, v6, v7);
          sub_186C05718(v5, v6, v7);
          sub_186C5ADD4();
          swift_bridgeObjectRelease();
          uint64_t v9 = v14;
          unint64_t v10 = v15;
          char v11 = sub_186BFDA3C();
          v12(v9, v10, v11 & 1, 1LL);
          swift_bridgeObjectRelease();
          --v3;
        }

        while (v3);
        return swift_bridgeObjectRelease();
      }

      else
      {
        return swift_bridgeObjectRelease();
      }
    }
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_186C33D84(void *a1)
{
  void (*v67)(void *__return_ptr);
  void *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  uint64_t v76;
  char v77;
  char v78;
  void *v79;
  _DWORD *v80;
  void *v81;
  uint64_t v82;
  uint64_t v83;
  int v84;
  id v85;
  void *v86;
  id v87;
  void *v88;
  uint64_t v89;
  id v90;
  uint64_t v91;
  id v92;
  unint64_t v93;
  char v94;
  id v95;
  uint64_t v96;
  unint64_t v97;
  BOOL v98;
  uint64_t v99;
  unint64_t *v100;
  uint64_t v101;
  void (*v102)(void *__return_ptr);
  unint64_t v103;
  void *v104;
  void *v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  int v111;
  id v112;
  uint64_t v113;
  void *v114;
  unsigned __int8 v115;
  id v116;
  id v117;
  void *v118;
  unsigned int v119;
  id v120;
  char *v121;
  id v122;
  void *v123;
  unsigned int v124;
  id v125;
  char *v126;
  void (*v127)(char *);
  id v128;
  char *v129;
  char *v130;
  uint64_t v131;
  uint64_t v132;
  char *v133;
  uint64_t v134;
  char *v135;
  void *v136;
  void *v137;
  char *v138;
  uint64_t v139;
  char *v140;
  void (*v141)(char *, uint64_t);
  id v142;
  uint64_t v144;
  uint64_t v145;
  char *v146;
  id v147;
  id v148;
  void *v149;
  void (*v150)(uint64_t);
  uint64_t v151;
  char *v152;
  char *v153;
  void (*v154)(char *, uint64_t);
  char *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  const char *v161;
  uint32_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint32_t *v168;
  void (*v169)(char *, uint64_t);
  uint64_t v170;
  char v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  id v177;
  unint64_t v178;
  char v179;
  char v180;
  void (*v181)(id, unint64_t, void, void);
  char v182;
  void *v183;
  const void *v184;
  uint64_t v185;
  char *v186;
  char *v187;
  void (*v188)(char *, uint64_t);
  uint64_t v189;
  void (*v190)(char *, uint64_t);
  void (*v191)(void *__return_ptr);
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  char *v195;
  char *v196;
  char *v197;
  uint64_t v198;
  uint64_t v199;
  char *v200;
  uint64_t v201;
  uint64_t v202;
  char *v203;
  void (*v204)(char *, uint64_t);
  void (*v205)(uint64_t);
  uint64_t v206;
  char *v207;
  char *v208;
  char *v209;
  void *v210;
  void (*v211)(char *, uint64_t);
  void (*v212)(char *, uint64_t);
  unint64_t *v213;
  void *v214;
  void *v215;
  char *v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  char *v220;
  void (**v221)(char *, uint64_t);
  char *v222;
  uint64_t v223;
  id v224;
  unint64_t v225;
  unint64_t v226;
  _OWORD v227[3];
  uint64_t v228;
  int v229;
  __int128 *v230;
  __int128 v231;
  __int128 v232;
  void *v233;
  uint64_t v234;
  void v235[18];
  void v236[18];
  void v237[7];
  uint64_t v238;
  void v239[13];
  char v240;
  void v241[14];
  uint64_t v242;
  void v243[16];
  uint64_t v244;
  void v245[18];
  _BYTE v246[16];
  _BYTE v247[16];
  _OWORD v248[3];
  char v249;
  unint64_t v250;
  char v251;
  unint64_t v252;
  char v253;
  uint64_t v254;
  uint64_t v3 = v1;
  __int128 v254 = *MEMORY[0x1895F89C0];
  uint64_t v5 = sub_186C5AAF8();
  uint64_t v204 = *(void (**)(char *, uint64_t))(v5 - 8);
  uint64_t v205 = (void (*)(uint64_t))v5;
  MEMORY[0x1895F8858](v5);
  id v203 = (char *)&v189 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = sub_186C5AB4C();
  uint64_t v201 = *(void *)(v7 - 8);
  unint64_t v202 = v7;
  MEMORY[0x1895F8858](v7);
  uint64_t v200 = (char *)&v189 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = sub_186C5AB58();
  uint64_t v198 = *(void *)(v9 - 8);
  uint64_t v199 = v9;
  MEMORY[0x1895F8858](v9);
  id v197 = (char *)&v189 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C6A2378);
  MEMORY[0x1895F8858](v11);
  uint64_t v206 = (uint64_t)&v189 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C6A21F8);
  uint64_t v14 = MEMORY[0x1895F8858](v13);
  uint64_t v195 = (char *)&v189 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = MEMORY[0x1895F8858](v14);
  uint64_t v196 = (char *)&v189 - v17;
  MEMORY[0x1895F8858](v16);
  unint64_t v216 = (char *)&v189 - v18;
  uint64_t v19 = sub_186C5AA8C();
  int64_t v221 = *(void (***)(char *, uint64_t))(v19 - 8);
  uint64_t v20 = MEMORY[0x1895F8858](v19);
  id v207 = (char *)&v189 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v22 = MEMORY[0x1895F8858](v20);
  unint64_t v208 = (char *)&v189 - v23;
  uint64_t v24 = MEMORY[0x1895F8858](v22);
  uint64_t v209 = (char *)&v189 - v25;
  MEMORY[0x1895F8858](v24);
  uint64_t v27 = (char *)&v189 - v26;
  uint64_t v217 = sub_186C5AC60();
  uint64_t v28 = *(void *)(v217 - 8);
  MEMORY[0x1895F8858](v217);
  id v30 = (void (**)(char *, uint64_t))((char *)&v189 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v213 = (unint64_t *)sub_186C5AC78();
  uint64_t v211 = (void (*)(char *, uint64_t))*(v213 - 1);
  MEMORY[0x1895F8858](v213);
  uint64_t v32 = (uint64_t)&v189 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  ktrace_end(*(void *)(v3 + OBJC_IVAR____TtC6ktrace9Recording_session), 0);
  uint64_t v214 = *(void **)(*(void *)a1 + 256LL);
  uint64_t v215 = a1;
  ((void (*)(uint64_t, void, void, void, uint64_t))v214)(4LL, 0LL, 0LL, 0LL, 1LL);
  dispatch_semaphore_t v222 = (char *)v3;
  uint64_t v33 = *(void *)(v3 + OBJC_IVAR____TtC6ktrace9Recording_recording);
  uint64_t v218 = v33;
  __int128 v34 = *(void (***)(void, void))(v33 + 40);
  if (v34)
  {
    _Block_copy(*(const void **)(v33 + 40));
    _Block_copy(v34);
    uint64_t v231 = xmmword_186C60FF0;
    uint64_t v229 = 4;
    char v230 = &v231;
    ((void (**)(void, int *))v34)[2](v34, &v229);
    _Block_release(v34);
    uint64_t v35 = v34;
  }

  else
  {
    uint64_t v35 = 0LL;
  }

  _Block_release(v35);
  unint64_t v36 = MEMORY[0x18961AFE8];
  __int128 v226 = MEMORY[0x18961AFE8];
  char v37 = *(_BYTE *)(v218 + 48);
  uint64_t v38 = MEMORY[0x1895F87A8];
  unint64_t v219 = v19;
  uint64_t v220 = v27;
  if ((v37 & 1) == 0) {
    goto LABEL_9;
  }
  uint64_t v39 = swift_allocObject();
  id v192 = v28;
  uint64_t v40 = (void (*)(char *, uint64_t))v39;
  *(void *)(v39 + 16) = 0LL;
  uint64_t v41 = sub_186C3AA2C(0LL, (unint64_t *)&qword_18C6A24F0);
  uint64_t v27 = v222;
  char v193 = *(void *)&v222[OBJC_IVAR____TtC6ktrace9Recording_waitQueue];
  uint64_t v194 = v41;
  sub_186C5B014();
  swift_getObjectType();
  uint64_t v42 = swift_allocObject();
  *(void *)(v42 + 16) = v40;
  *(void *)(v42 + 24) = v27;
  id v233 = sub_186C395EC;
  v234 = v42;
  *(void *)&uint64_t v231 = v38;
  uint64_t v2 = 1107296256LL;
  *((void *)&v231 + 1) = 1107296256LL;
  *(void *)&uint64_t v232 = sub_186C04B7C;
  *((void *)&v232 + 1) = &block_descriptor_26;
  uint64_t v43 = _Block_copy(&v231);
  uint64_t v212 = v40;
  swift_retain();
  swift_retain();
  sub_186C5AC6C();
  sub_186C04E0C();
  sub_186C5B020();
  _Block_release(v43);
  id v192 = *(void *)(v192 + 8);
  ((void (*)(void, uint64_t))v192)(v30, v217);
  uint64_t v19 = (uint64_t)v213;
  uint64_t v211 = (void (*)(char *, uint64_t))*((void *)v211 + 1);
  v211((char *)v32, (uint64_t)v213);
  swift_release();
  sub_186C5B038();
  uint64_t v44 = swift_unknownObjectRetain();
  MEMORY[0x186E44908](v44);
  if (*(void *)((v226 & 0xFFFFFFFFFFFFFF8LL) + 0x10) >= *(void *)((v226 & 0xFFFFFFFFFFFFFF8LL) + 0x18) >> 1) {
    goto LABEL_88;
  }
  while (1)
  {
    sub_186C5AF54();
    sub_186C5AF30();
    swift_unknownObjectRelease();
    sub_186C5B014();
    swift_getObjectType();
    uint64_t v45 = swift_allocObject();
    *(void *)(v45 + 16) = v212;
    *(void *)(v45 + 24) = v27;
    id v233 = sub_186C3AE74;
    v234 = v45;
    *(void *)&uint64_t v231 = MEMORY[0x1895F87A8];
    *((void *)&v231 + 1) = v2;
    *(void *)&uint64_t v232 = sub_186C04B7C;
    *((void *)&v232 + 1) = &block_descriptor_33;
    uint64_t v46 = _Block_copy(&v231);
    swift_retain();
    swift_retain();
    sub_186C5AC6C();
    sub_186C04E0C();
    sub_186C5B020();
    _Block_release(v46);
    ((void (*)(void, uint64_t))v192)(v30, v217);
    v211((char *)v32, v19);
    swift_release();
    sub_186C5B038();
    uint64_t v47 = swift_unknownObjectRetain();
    MEMORY[0x186E44908](v47);
    if (*(void *)((v226 & 0xFFFFFFFFFFFFFF8LL) + 0x10) >= *(void *)((v226 & 0xFFFFFFFFFFFFFF8LL) + 0x18) >> 1) {
      sub_186C5AF3C();
    }
    sub_186C5AF54();
    sub_186C5AF30();
    swift_release();
    swift_unknownObjectRelease();
    unint64_t v36 = v226;
    uint64_t v19 = v219;
    uint64_t v27 = v220;
LABEL_9:
    sub_186C5B05C();
    if (v36 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v32 = sub_186C5B368();
      id v30 = v221;
      if (!v32) {
        goto LABEL_18;
      }
    }

    else
    {
      uint64_t v32 = *(void *)((v36 & 0xFFFFFFFFFFFFF8LL) + 0x10);
      swift_bridgeObjectRetain();
      id v30 = v221;
      if (!v32) {
        goto LABEL_18;
      }
    }

    if (v32 >= 1) {
      break;
    }
    __break(1u);
LABEL_88:
    sub_186C5AF3C();
  }

  uint64_t v48 = 0LL;
  do
  {
    if ((v36 & 0xC000000000000001LL) != 0) {
      MEMORY[0x186E44C74](v48, v36);
    }
    else {
      swift_unknownObjectRetain();
    }
    ++v48;
    swift_getObjectType();
    sub_186C5B02C();
    swift_unknownObjectRelease();
  }

  while (v32 != v48);
LABEL_18:
  uint64_t v49 = swift_bridgeObjectRelease();
  uint64_t v50 = (uint64_t)v216;
  (*(void (**)(uint64_t))(*(void *)v222 + 248LL))(v49);
  uint64_t v212 = v30[6];
  if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v212)(v50, 1LL, v19) == 1)
  {
LABEL_93:
    sub_186BFCA44(v50, &qword_18C6A21F8);
    sub_186C5B35C();
    __break(1u);
    JUMPOUT(0x186C3569CLL);
  }

  uint64_t v211 = v30[4];
  ((void (*)(char *, uint64_t, uint64_t))v211)(v27, v50, v19);
  uint64_t v51 = swift_allocObject();
  *(void *)(v51 + 16) = 0LL;
  uint64_t v52 = (uint64_t *)(v51 + 16);
  uint64_t v53 = swift_allocObject();
  *(void *)(v53 + 16) = 0LL;
  uint64_t v213 = (unint64_t *)(v53 + 16);
  uint64_t v54 = sub_186C5AA68();
  uint64_t v56 = v55;
  uint64_t v57 = sub_186C5AD74();
  uint64_t v58 = (void *)ktrace_file_open((const char *)(v57 + 32), 1);
  swift_release();
  uint64_t v217 = v53;
  if (!v58)
  {
    swift_bridgeObjectRelease();
    type metadata accessor for KTraceRecordError();
    sub_186BFCB04( (unint64_t *)&qword_18C6A21E0,  (uint64_t (*)(uint64_t))type metadata accessor for KTraceRecordError,  (uint64_t)&unk_186C60EF4);
    swift_allocError();
    uint64_t v83 = v82;
    uint64_t v84 = MEMORY[0x186E445C0]();
    *(void *)uint64_t v83 = v54;
    *(void *)(v83 + 8) = v56;
    *(_DWORD *)(v83 + 16) = v84;
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
LABEL_59:
    v221[1](v220, v19);
    swift_release();
    swift_release();
    return v51 & 1;
  }

  uint64_t v59 = swift_allocObject();
  *(void *)(v59 + 16) = v51;
  *(void *)(v59 + 24) = v53;
  id v233 = sub_186C39528;
  v234 = v59;
  *(void *)&uint64_t v231 = MEMORY[0x1895F87A8];
  *((void *)&v231 + 1) = 1107296256LL;
  *(void *)&uint64_t v232 = sub_186C32618;
  *((void *)&v232 + 1) = &block_descriptor_19;
  char v60 = _Block_copy(&v231);
  unint64_t v216 = (char *)v51;
  swift_retain();
  swift_retain();
  swift_release();
  ktrace_file_iterate((uint64_t)v58, 0LL, (uint64_t)v60, v61, v62, v63, v64, v65);
  _Block_release(v60);
  uint64_t v66 = (uint64_t)v222;
  uint64_t v67 = *(void (**)(void *__return_ptr))(*(void *)v222 + 344LL);
  v67(v235);
  sub_186C0BD24((uint64_t)v235);
  uint64_t v194 = v235[1];
  char v68 = v215;
  unint64_t v69 = ((uint64_t (*)(uint64_t, void, void, void, uint64_t))v214)(6LL, 0LL, 0LL, 0LL, 1LL);
  ((void (*)(void *__return_ptr, uint64_t))v67)(v236, v69);
  sub_186C0BD24((uint64_t)v236);
  unint64_t v70 = (*(uint64_t (**)(void, void, void))(*(void *)v68 + 304LL))(v236[9], v236[10], v236[11]);
  ((void (*)(void *__return_ptr, uint64_t))v67)(v237, v70);
  uint64_t v71 = v238;
  __int128 v228 = v238;
  swift_bridgeObjectRetain();
  sub_186C0BD24((uint64_t)v237);
  uint64_t v72 = *(void *)(v71 + 16);
  sub_186BFA370((uint64_t)&v228);
  (*(void (**)(BOOL))(*(void *)v68 + 328LL))(v72 != 0);
  uint64_t v73 = v66 + OBJC_IVAR____TtC6ktrace9Recording_options;
  uint64_t v74 = type metadata accessor for RecordingOptions.Options(0LL);
  uint64_t v75 = *(unsigned __int8 *)(v73 + *(int *)(v74 + 64));
  id v192 = v74;
  char v193 = v73;
  if (v75 == 1)
  {
    uint64_t v76 = *(void *)(v66 + OBJC_IVAR____TtC6ktrace9Recording_reporter);
    __int128 v77 = sub_186BFDA3C();
    char v78 = sub_186BFDFF4();
    (*(void (**)(unint64_t, unint64_t, void, void))(*(void *)v76 + 216LL))( 0xD000000000000010LL,  0x8000000186C66FF0LL,  v77 & 1,  v78 & 1);
    char v79 = ktrace_file_compress((uint64_t)v58, 2u);
    LOBYTE(v51) = (_BYTE)v216;
    uint64_t v214 = v79;
    if (!v79)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      type metadata accessor for KTraceRecordError();
      sub_186BFCB04( (unint64_t *)&qword_18C6A21E0,  (uint64_t (*)(uint64_t))type metadata accessor for KTraceRecordError,  (uint64_t)&unk_186C60EF4);
      swift_allocError();
      *uint64_t v80 = MEMORY[0x186E445C0]();
      swift_storeEnumTagMultiPayload();
      swift_willThrow();
      int v81 = v58;
LABEL_33:
      ktrace_file_close(v81);
      uint64_t v19 = v219;
      goto LABEL_59;
    }
  }

  else
  {
    uint64_t v214 = v58;
    LOBYTE(v51) = (_BYTE)v216;
  }

  uint64_t v85 = objc_msgSend(objc_allocWithZone(MEMORY[0x1896078A8]), sel_init);
  uint32_t v86 = (void *)sub_186C5AD08();
  swift_bridgeObjectRelease();
  *(void *)&uint64_t v231 = 0LL;
  uint64_t v87 = objc_msgSend(v85, sel_attributesOfItemAtPath_error_, v86, &v231);

  uint64_t v88 = (void *)v231;
  if (!v87)
  {
    uint64_t v95 = (id)v231;
    swift_bridgeObjectRelease();
    sub_186C5A9CC();

    swift_willThrow();
    int v81 = v214;
    goto LABEL_33;
  }

  type metadata accessor for FileAttributeKey(0LL);
  sub_186BFCB04( &qword_18C6A2B50,  (uint64_t (*)(uint64_t))type metadata accessor for FileAttributeKey,  (uint64_t)&unk_186C61288);
  uint64_t v89 = sub_186C5ACB4();
  uint64_t v90 = v88;

  v67(v239);
  sub_186C0BD24((uint64_t)v239);
  if (v240) {
    uint64_t v50 = 0LL;
  }
  else {
    uint64_t v50 = v239[12];
  }
  swift_beginAccess();
  uint64_t v91 = *v52;
  if (*(void *)(v89 + 16))
  {
    uint64_t v92 = (id)*MEMORY[0x189607548];
    uint64_t v93 = sub_186C3704C((uint64_t)v92);
    if ((v94 & 1) != 0)
    {
      sub_186BFB82C(*(void *)(v89 + 56) + 32 * v93, (uint64_t)&v231);
    }

    else
    {
      uint64_t v231 = 0u;
      uint64_t v232 = 0u;
    }
  }

  else
  {
    uint64_t v231 = 0u;
    uint64_t v232 = 0u;
  }

  swift_bridgeObjectRelease();
  if (*((void *)&v232 + 1))
  {
    if (swift_dynamicCast())
    {
      uint64_t v96 = (uint64_t)v224;
      goto LABEL_42;
    }
  }

  else
  {
    sub_186BFCA44((uint64_t)&v231, &qword_18C6A2350);
  }

  uint64_t v96 = 0LL;
LABEL_42:
  __int128 v97 = *v52;
  v67(v241);
  sub_186C0BD24((uint64_t)v241);
  sub_186BFA418((uint64_t)&v242, (uint64_t)v247, &qword_18C6A25E8);
  sub_186BFA418((uint64_t)v247, (uint64_t)&v250, &qword_18C6A25E8);
  if ((v251 & 1) != 0)
  {
    __break(1u);
LABEL_92:
    __break(1u);
    goto LABEL_93;
  }

  uint64_t v98 = v97 >= v250;
  uint64_t v99 = v97 - v250;
  if (!v98)
  {
    __break(1u);
LABEL_89:
    __break(1u);
LABEL_90:
    __break(1u);
    JUMPOUT(0x186C35620LL);
  }

  os_log_t v100 = v213;
  uint64_t v101 = swift_beginAccess();
  uint64_t v102 = v67;
  uint64_t v103 = *v100;
  id v191 = v102;
  ((void (*)(void *__return_ptr, uint64_t))v102)(v243, v101);
  sub_186C0BD24((uint64_t)v243);
  sub_186BFA418((uint64_t)&v244, (uint64_t)v246, &qword_18C6A25E8);
  sub_186BFA418((uint64_t)v246, (uint64_t)&v252, &qword_18C6A25E8);
  if ((v253 & 1) != 0) {
    goto LABEL_92;
  }
  LOBYTE(v51) = (_BYTE)v216;
  if (v103 < v252) {
    goto LABEL_89;
  }
  sub_186C0771C(v194, v50, v91, v96, v99, v103 - v252, v227);
  v248[0] = v227[0];
  v248[1] = v227[1];
  v248[2] = v227[2];
  uint64_t v249 = 0;
  uint64_t v104 = v215;
  (*(void (**)(_OWORD *))(*(void *)v215 + 280LL))(v248);
  sub_186C5A8B8();
  swift_allocObject();
  sub_186C5A8AC();
  uint64_t v224 = v104;
  type metadata accessor for RecordInfo();
  sub_186BFCB04( &qword_18C6A2B58,  (uint64_t (*)(uint64_t))type metadata accessor for RecordInfo,  (uint64_t)&unk_186C5F2B0);
  uint64_t v105 = v210;
  uint64_t v106 = sub_186C5A8A0();
  if (!v105)
  {
    __int128 v109 = v106;
    uint64_t v110 = v107;
    swift_release();
    sub_186BF06B0(v109, v110);
    __swift_instantiateConcreteTypeFromMangledName(&qword_18C6A2B60);
    sub_186C5AAC8();
    swift_bridgeObjectRelease();
    __asm { BR              X9 }
  }

  swift_release();
  __int128 v108 = swift_bridgeObjectRelease();
  uint64_t v213 = 0LL;
  uint64_t v210 = 0LL;
  uint64_t v19 = v219;
  __int128 v111 = (*(uint64_t (**)(uint64_t))(*(void *)v222 + 272LL))(v108);
  uint64_t v112 = objc_msgSend(objc_allocWithZone(MEMORY[0x1896078A8]), sel_init);
  uint64_t v113 = sub_186C5AA20();
  BOOL v114 = (void *)v113;
  if (v111 == 7)
  {
    uint64_t v224 = 0LL;
    uint64_t v115 = objc_msgSend(v112, sel_removeItemAtURL_error_, v113, &v224);

    uint64_t v116 = v224;
    if ((v115 & 1) == 0)
    {
LABEL_52:
      uint64_t v117 = v116;
      sub_186C5A9CC();

      swift_willThrow();
      sub_186C395D4((uint64_t)v213, 0xF000000000000000LL);
LABEL_58:
      ktrace_file_close(v214);
      goto LABEL_59;
    }
  }

  else
  {
    uint64_t v118 = (void *)sub_186C5AA20();
    uint64_t v224 = 0LL;
    uint64_t v119 = objc_msgSend(v112, sel_moveItemAtURL_toURL_error_, v114, v118, &v224);

    uint64_t v116 = v224;
    if (!v119) {
      goto LABEL_52;
    }
  }

  uint64_t v194 = 0xF000000000000000LL;
  uint64_t v120 = v116;
  uint64_t v121 = v209;
  sub_186C5AA50();
  unint64_t v122 = objc_msgSend(objc_allocWithZone(MEMORY[0x1896078A8]), sel_init);
  uint64_t v123 = (void *)sub_186C5AA20();
  uint64_t v224 = 0LL;
  unint64_t v124 = objc_msgSend(v122, sel_removeItemAtURL_error_, v123, &v224);

  uint64_t v125 = v224;
  if (!v124)
  {
    __int128 v142 = v224;
    sub_186C5A9CC();

    swift_willThrow();
    sub_186C395D4((uint64_t)v213, v194);
    v221[1](v121, v19);
    goto LABEL_58;
  }

  unint64_t v126 = v196;
  uint64_t v190 = v221[7];
  ((void (*)(char *, uint64_t, uint64_t, uint64_t))v190)(v196, 1LL, 1LL, v19);
  uint64_t v127 = *(void (**)(char *))(*(void *)v222 + 256LL);
  uint64_t v128 = v125;
  v127(v126);
  sub_186C5AA50();
  id v129 = v197;
  sub_186C5AB40();
  uint64_t v130 = v200;
  uint64_t v131 = v201;
  uint64_t v132 = v202;
  (*(void (**)(char *, void, uint64_t))(v201 + 104))(v200, *MEMORY[0x189606FA0], v202);
  unint64_t v133 = v203;
  sub_186C5AAEC();
  char v134 = v206;
  sub_186C5AB34();
  __int128 v135 = v133;
  __int128 v136 = v208;
  (*((void (**)(char *, void (*)(uint64_t)))v204 + 1))(v135, v205);
  (*(void (**)(char *, uint64_t))(v131 + 8))(v130, v132);
  (*(void (**)(char *, uint64_t))(v198 + 8))(v129, v199);
  __int128 v137 = v210;
  listFiles(in:pathExtension:olderThan:)( v136,  *(void (**)(char *, uint64_t, uint64_t))&v222[OBJC_IVAR____TtC6ktrace9Recording_pendingExtension],  *(void *)&v222[OBJC_IVAR____TtC6ktrace9Recording_pendingExtension + 8],  v134);
  __int128 v140 = v209;
  if (v137)
  {
    sub_186C395D4((uint64_t)v213, v194);
    sub_186BFCA44(v134, &qword_18C6A2378);
    __int128 v141 = v221[1];
    v141((char *)v136, v19);
    v141(v140, v19);
    goto LABEL_58;
  }

  __int128 v144 = *((void *)v138 + 2);
  if (v144)
  {
    uint64_t v145 = v139;
    int64_t v146 = v138;
    uint64_t v147 = objc_msgSend(objc_allocWithZone(MEMORY[0x189607800]), sel_init);
    id v148 = objc_msgSend(v147, sel_stringFromByteCount_, v145);

    sub_186C5AD2C();
    uint64_t v149 = *(void **)&v222[OBJC_IVAR____TtC6ktrace9Recording_reporter];
    uint64_t v224 = 0LL;
    __int128 v225 = 0xE000000000000000LL;
    sub_186C5B260();
    sub_186C5ADD4();
    uint64_t v223 = v144;
    sub_186C5B4DC();
    sub_186C5ADD4();
    swift_bridgeObjectRelease();
    sub_186C5ADD4();
    uint64_t v19 = v219;
    sub_186C5ADD4();
    swift_bridgeObjectRelease();
    sub_186C5ADD4();
    uint64_t v150 = *(void (**)(uint64_t))(*(void *)v149 + 248LL);
    uint64_t v210 = v149;
    uint64_t v205 = v150;
    ((void (*)(id, unint64_t))v150)(v224, v225);
    swift_bridgeObjectRelease();
    id v203 = v146;
    unint64_t v151 = *((void *)v146 + 2);
    unint64_t v152 = v195;
    if (v151)
    {
      uint64_t v153 = &v203[(*((unsigned __int8 *)v221 + 80) + 32LL) & ~(unint64_t)*((unsigned __int8 *)v221 + 80)];
      uint64_t v204 = v221[9];
      uint64_t v154 = v221[2];
      char v155 = v207;
      while (1)
      {
        ((void (*)(char *, char *, uint64_t))v154)(v152, v153, v19);
        ((void (*)(char *, void, uint64_t, uint64_t))v190)(v152, 0LL, 1LL, v19);
        ((void (*)(char *, char *, uint64_t))v211)(v155, v152, v19);
        uint64_t v156 = sub_186C5AA68();
        v205(v156);
        uint64_t v19 = v219;
        swift_bridgeObjectRelease();
        v221[1](v155, v19);
        uint64_t v153 = (char *)v204 + (void)v153;
        if (!--v151) {
          goto LABEL_66;
        }
      }
    }

    else
    {
LABEL_66:
      ((void (*)(char *, uint64_t, uint64_t, uint64_t))v190)(v152, 1LL, 1LL, v19);
    }

    swift_bridgeObjectRelease();
    char v134 = v206;
  }

  else
  {
    swift_bridgeObjectRelease();
  }

  uint64_t v157 = *(void *)(v193 + *(int *)(v192 + 52));
  __int128 v158 = *(void *)(v157 + 16);
  int64_t v159 = (uint64_t)v213;
  if (v158)
  {
    uint64_t v160 = v134;
    __int128 v161 = (const char *)(sub_186C5AD74() + 32);
    swift_bridgeObjectRetain();
    unint64_t v162 = notify_post(v161);
    swift_release();
    if (v162)
    {
LABEL_76:
      swift_bridgeObjectRelease();
      type metadata accessor for KTraceRecordError();
      sub_186BFCB04( (unint64_t *)&qword_18C6A21E0,  (uint64_t (*)(uint64_t))type metadata accessor for KTraceRecordError,  (uint64_t)&unk_186C60EF4);
      swift_allocError();
      *uint64_t v168 = v162;
      swift_storeEnumTagMultiPayload();
      swift_willThrow();
      sub_186C395D4(v159, v194);
      sub_186BFCA44(v160, &qword_18C6A2378);
      uint64_t v169 = v221[1];
      v169(v208, v19);
      v169(v209, v19);
      ktrace_file_close(v214);
      LOBYTE(v51) = (_BYTE)v216;
      goto LABEL_59;
    }

    uint64_t v163 = 0LL;
    __int128 v164 = v157 + 56;
    uint64_t v165 = v158 - 1;
    while (v165 != v163)
    {
      uint64_t v166 = v164 + 16;
      uint64_t v167 = sub_186C5AD74();
      unint64_t v162 = notify_post((const char *)(v167 + 32));
      swift_release();
      __int128 v164 = v166;
      uint64_t v19 = v219;
      if (v162)
      {
        uint64_t v160 = v206;
        int64_t v159 = (uint64_t)v213;
        goto LABEL_76;
      }
    }

    swift_bridgeObjectRelease();
  }

  uint64_t v170 = (uint64_t)v222;
  uint64_t v171 = sub_186C357E8((uint64_t)v222);
  uint64_t v173 = v172;
  uint64_t v175 = v174;
  if ((v171 & 1) != 0)
  {
    v191(v245);
    sub_186C0BD24((uint64_t)v245);
    if (v245[8] < 1LL)
    {
      uint64_t v176 = *(void *)(v170 + OBJC_IVAR____TtC6ktrace9Recording_reporter);
      LOBYTE(v51) = 1;
      goto LABEL_82;
    }

    swift_bridgeObjectRelease();
    uint64_t v175 = 0xEB0000000074736FLL;
    uint64_t v173 = 0x6C2073746E657665LL;
  }

  LOBYTE(v51) = 0;
  uint64_t v176 = *(void *)(v170 + OBJC_IVAR____TtC6ktrace9Recording_reporter);
LABEL_82:
  dispatch_semaphore_t v222 = (char *)v173;
  uint64_t v224 = 0LL;
  __int128 v225 = 0xE000000000000000LL;
  sub_186C5ADD4();
  swift_bridgeObjectRelease();
  sub_186C5ADD4();
  swift_bridgeObjectRetain();
  sub_186C5ADD4();
  swift_bridgeObjectRelease();
  uint64_t v177 = v224;
  uint64_t v178 = v225;
  uint64_t v179 = sub_186BFDA3C();
  uint64_t v180 = sub_186BFDFF4();
  uint64_t v181 = *(void (**)(id, unint64_t, void, void))(*(void *)v176 + 216LL);
  v181(v177, v178, v179 & 1, v180 & 1);
  swift_bridgeObjectRelease();
  LOBYTE(v177) = sub_186BFDA3C();
  uint64_t v182 = sub_186BFDFF4();
  v181((id)0xD000000000000042LL, 0x8000000186C66F70LL, v177 & 1, v182 & 1);
  uint64_t v183 = *(void **)(v218 + 40);
  if (v183)
  {
    _Block_copy(*(const void **)(v218 + 40));
    _Block_copy(v183);
    sub_186C36658((uint64_t)v222, v175, 6, (void (**)(void, void, void, void))v183);
    unint64_t v184 = v183;
  }

  else
  {
    unint64_t v184 = 0LL;
  }

  _Block_release(v184);
  unint64_t v185 = v219;
  id v186 = v220;
  uint64_t v187 = v208;
  swift_bridgeObjectRelease();
  sub_186BFCA44(v206, &qword_18C6A2378);
  uint64_t v188 = v221[1];
  v188(v187, v185);
  v188(v209, v185);
  ktrace_file_close(v214);
  v188(v186, v185);
  swift_release();
  swift_release();
  return v51 & 1;
}

uint64_t sub_186C356AC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)(a1 + 16);
  swift_beginAccess();
  uint64_t v5 = *(void *)(a1 + 16);
  if (v5 == 1)
  {
    (*(void (**)(unint64_t, unint64_t))(**(void **)(a2
                                                                             + OBJC_IVAR____TtC6ktrace9Recording_reporter)
                                                               + 248LL))( 0xD000000000000018LL,  0x8000000186C67220LL);
    ktrace_abort(*(void *)(a2 + OBJC_IVAR____TtC6ktrace9Recording_session));
  }

  else if (v5)
  {
    if (v5 >= 2) {
      (*(void (**)(unint64_t, unint64_t))(**(void **)(a2
    }
                                                                               + OBJC_IVAR____TtC6ktrace9Recording_reporter)
                                                                 + 248LL))( 0xD000000000000011LL,  0x8000000186C67200LL);
  }

  else
  {
    (*(void (**)(unint64_t, unint64_t))(**(void **)(a2
                                                                             + OBJC_IVAR____TtC6ktrace9Recording_reporter)
                                                               + 248LL))( 0xD00000000000003ELL,  0x8000000186C67240LL);
  }

  uint64_t result = swift_beginAccess();
  if (__OFADD__(*v4, 1LL)) {
    __break(1u);
  }
  else {
    ++*v4;
  }
  return result;
}

uint64_t sub_186C357E0@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t sub_186C357E8(uint64_t a1)
{
  uint64_t v2 = sub_186C5A9A8();
  MEMORY[0x1895F8858](v2);
  uint64_t v3 = sub_186C5A990();
  MEMORY[0x1895F8858](v3);
  uint64_t v4 = sub_186C5A9B4();
  uint64_t v5 = MEMORY[0x1895F8858](v4);
  (*(void (**)(uint64_t))(*(void *)a1 + 272LL))(v5);
  return 0LL;
}

uint64_t sub_186C35E20()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC6ktrace9Recording_planPath;
  uint64_t v2 = sub_186C5AA8C();
  uint64_t v3 = *(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL);
  v3(v1, v2);
  memcpy(__dst, (const void *)(v0 + OBJC_IVAR____TtC6ktrace9Recording_plan), 0x141uLL);
  sub_186C23A98((uint64_t)__dst);
  sub_186BFCA44(v0 + OBJC_IVAR____TtC6ktrace9Recording_inProcessFile, &qword_18C6A21F8);
  v3(v0 + OBJC_IVAR____TtC6ktrace9Recording_finishedFile, v2);
  swift_bridgeObjectRelease();

  sub_186C392F4(v0 + OBJC_IVAR____TtC6ktrace9Recording_options, type metadata accessor for RecordingOptions.Options);
  sub_186BF06F4( *(void *)(v0 + OBJC_IVAR____TtC6ktrace9Recording_subclassBitmap),  *(void *)(v0 + OBJC_IVAR____TtC6ktrace9Recording_subclassBitmap + 8));
  sub_186C37614( *(void *)(v0 + OBJC_IVAR____TtC6ktrace9Recording_primaryEndReason),  *(void *)(v0 + OBJC_IVAR____TtC6ktrace9Recording_primaryEndReason + 8),  *(_BYTE *)(v0 + OBJC_IVAR____TtC6ktrace9Recording_primaryEndReason + 16));

  swift_release();
  swift_release();
  swift_release();
  __int128 v4 = *(_OWORD *)(v0 + OBJC_IVAR____TtC6ktrace9Recording_kdebugPostprocessing + 112);
  v10[6] = *(_OWORD *)(v0 + OBJC_IVAR____TtC6ktrace9Recording_kdebugPostprocessing + 96);
  v11[0] = v4;
  *(_OWORD *)((char *)v11 + 9) = *(_OWORD *)(v0 + OBJC_IVAR____TtC6ktrace9Recording_kdebugPostprocessing + 121);
  __int128 v5 = *(_OWORD *)(v0 + OBJC_IVAR____TtC6ktrace9Recording_kdebugPostprocessing + 48);
  void v10[2] = *(_OWORD *)(v0 + OBJC_IVAR____TtC6ktrace9Recording_kdebugPostprocessing + 32);
  v10[3] = v5;
  __int128 v6 = *(_OWORD *)(v0 + OBJC_IVAR____TtC6ktrace9Recording_kdebugPostprocessing + 80);
  v10[4] = *(_OWORD *)(v0 + OBJC_IVAR____TtC6ktrace9Recording_kdebugPostprocessing + 64);
  v10[5] = v6;
  __int128 v7 = *(_OWORD *)(v0 + OBJC_IVAR____TtC6ktrace9Recording_kdebugPostprocessing + 16);
  v10[0] = *(_OWORD *)(v0 + OBJC_IVAR____TtC6ktrace9Recording_kdebugPostprocessing);
  v10[1] = v7;
  sub_186C0BD24((uint64_t)v10);
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_186C35FC8()
{
  return swift_deallocClassInstance();
}

uint64_t sub_186C35FEC()
{
  uint64_t v0 = sub_186C5ABB8();
  __swift_allocate_value_buffer(v0, qword_18C6A9A20);
  __swift_project_value_buffer(v0, (uint64_t)qword_18C6A9A20);
  return sub_186C5ABAC();
}

void sub_186C3605C(int a1, uint64_t a2, unint64_t a3)
{
  __int128 v6 = *(void **)(v3 + 40);
  if (v6)
  {
    _Block_copy(v6);
    sub_186C36658(a2, a3, a1, (void (**)(void, void, void, void))v6);
  }

  if (qword_18C6A8580 != -1) {
    swift_once();
  }
  uint64_t v8 = sub_186C5ABB8();
  __swift_project_value_buffer(v8, (uint64_t)qword_18C6A9A20);
  swift_bridgeObjectRetain_n();
  uint64_t v9 = (os_log_s *)sub_186C5ABA0();
  os_log_type_t v10 = sub_186C5AFC0();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = (uint8_t *)swift_slowAlloc();
    uint64_t v12 = swift_slowAlloc();
    uint64_t v13 = v12;
    *(_DWORD *)uint64_t v11 = 136315138;
    swift_bridgeObjectRetain();
    sub_186BF7C38(a2, a3, &v13);
    sub_186C5B0EC();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_186BA3000, v9, v10, "recording failed: %s", v11, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x186E466F0](v12, -1LL, -1LL);
    MEMORY[0x186E466F0](v11, -1LL, -1LL);
  }

  else
  {

    swift_bridgeObjectRelease_n();
  }

uint64_t ktrace_record(ValueMetadata *a1, uint64_t a2, uint64_t a3)
{
  return sub_186C39768(a1, a3);
}

uint64_t ktrace_record(_:_:_:)(ValueMetadata *a1, uint64_t a2, uint64_t a3)
{
  return sub_186C39768(a1, a3);
}

uint64_t sub_186C36234(void *a1, char a2, uint64_t *a3)
{
  uint64_t result = (*(uint64_t (**)(uint64_t, void, void, void, void))(*a1 + 256LL))( 7LL,  a1[2],  a1[3],  a1[4],  0LL);
  if ((a2 & 1) != 0)
  {
    unint64_t v6 = a3[1];
    if (v6 >> 60 != 15)
    {
      uint64_t v7 = *a3;
      sub_186BF06B0(v7, v6);
      sub_186C5B260();
      swift_bridgeObjectRelease();
      unint64_t aBlock = 0xD00000000000001BLL;
      unint64_t v12 = 0x8000000186C671C0LL;
      uint64_t v17 = *(void *)sub_186C05DE4();
      sub_186C5B4DC();
      sub_186C5ADD4();
      swift_bridgeObjectRelease();
      uint64_t v8 = (void *)sub_186C5AD08();
      swift_bridgeObjectRelease();
      uint64_t v9 = swift_allocObject();
      *(void *)(v9 + 16) = v7;
      *(void *)(v9 + 24) = v6;
      uint64_t v15 = sub_186C3A8F8;
      uint64_t v16 = v9;
      unint64_t aBlock = MEMORY[0x1895F87A8];
      unint64_t v12 = 1107296256LL;
      uint64_t v13 = sub_186C36790;
      uint64_t v14 = &block_descriptor_39;
      os_log_type_t v10 = _Block_copy(&aBlock);
      sub_186BF06B0(v7, v6);
      swift_release();
      AnalyticsSendEventLazy();
      _Block_release(v10);

      return sub_186C395D4(v7, v6);
    }
  }

  return result;
}

uint64_t ktrace_recording_create(const char *a1, int a2)
{
  uint64_t v4 = swift_slowAlloc();
  *(_OWORD *)(v4 + 8) = 0u;
  *(_OWORD *)(v4 + 24) = 0u;
  *(void *)(v4 + 40) = 0LL;
  *(void *)uint64_t v4 = strdup(a1);
  *(_DWORD *)(v4 + 48) = a2;
  return v4;
}

uint64_t ktrace_recording_create(_:_:)(const char *a1, int a2)
{
  uint64_t v4 = swift_slowAlloc();
  *(_OWORD *)(v4 + 8) = 0u;
  *(_OWORD *)(v4 + 24) = 0u;
  *(void *)(v4 + 40) = 0LL;
  *(void *)uint64_t v4 = strdup(a1);
  *(_DWORD *)(v4 + 48) = a2;
  return v4;
}

char *ktrace_recording_override_default_plan(uint64_t a1, const char *a2)
{
  uint64_t result = strdup(a2);
  *(void *)(a1 + 8) = result;
  return result;
}

char *ktrace_recording_override_default_plan(_:_:)(uint64_t a1, const char *a2)
{
  uint64_t result = strdup(a2);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t ktrace_recording_set_streams(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(result + 24) = a2;
  *(void *)(result + 32) = a3;
  return result;
}

uint64_t ktrace_recording_set_streams(_:_:_:)(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(result + 24) = a2;
  *(void *)(result + 32) = a3;
  return result;
}

char *ktrace_recording_override_plan_path(uint64_t a1, const char *a2)
{
  uint64_t result = strdup(a2);
  *(void *)(a1 + 16) = result;
  return result;
}

char *ktrace_recording_override_plan_path(_:_:)(uint64_t a1, const char *a2)
{
  uint64_t result = strdup(a2);
  *(void *)(a1 + 16) = result;
  return result;
}

void ktrace_recording_follow_notifications(uint64_t a1, void *aBlock)
{
  uint64_t v3 = _Block_copy(aBlock);
  uint64_t v4 = _Block_copy(v3);
  _Block_release(v4);
  __int128 v5 = _Block_copy(v4);
  unint64_t v6 = *(const void **)(a1 + 40);
  *(void *)(a1 + 40) = v5;
  _Block_copy(v5);
  _Block_release(v6);
  _Block_release(v3);
}

void ktrace_recording_follow_notifications(_:callback:)(uint64_t a1, void *aBlock)
{
  uint64_t v3 = _Block_copy(aBlock);
  _Block_release(v3);
  uint64_t v4 = _Block_copy(v3);
  __int128 v5 = *(const void **)(a1 + 40);
  *(void *)(a1 + 40) = v4;
  _Block_copy(v4);
  _Block_release(v5);
}

void ktrace_recording_destroy(_:)(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 40);
  if (v2) {
    _Block_release(v2);
  }
  JUMPOUT(0x186E466F0LL);
}

void sub_186C36658(uint64_t a1, uint64_t a2, int a3, void (**a4)(void, void, void, void))
{
  uint64_t v6 = a2;
  uint64_t v7 = a1;
  uint64_t v15 = *MEMORY[0x1895F89C0];
  int v13 = a3;
  uint64_t v14 = a4;
  if ((a2 & 0x1000000000000000LL) != 0 || !(a2 & 0x2000000000000000LL | a1 & 0x1000000000000000LL))
  {
    sub_186C5B254();
    goto LABEL_8;
  }

  if ((a2 & 0x2000000000000000LL) == 0)
  {
    if ((a1 & 0x1000000000000000LL) != 0)
    {
      uint64_t v8 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
    }

    else
    {
      uint64_t v8 = sub_186C5B2B4();
      if (!v8)
      {
        LODWORD(v11) = a3;
        uint64_t v12 = 0LL;
        goto LABEL_7;
      }
    }

    LODWORD(v11) = a3;
    uint64_t v12 = v8;
LABEL_7:
    ((void (**)(void, uint64_t *, uint64_t, uint64_t))a4)[2](a4, &v11, v7, v6);
LABEL_8:
    _Block_release(a4);
    return;
  }

  uint64_t v11 = a1;
  uint64_t v12 = a2 & 0xFFFFFFFFFFFFFFLL;
  int v9 = a3;
  os_log_type_t v10 = &v11;
  ((void (*)(void (**)(void, void, void, void), int *))a4[2])(a4, &v9);
  _Block_release(a4);
}

id sub_186C36790(uint64_t a1)
{
  uint64_t v1 = *(uint64_t (**)(uint64_t))(a1 + 32);
  uint64_t v2 = swift_retain();
  uint64_t v3 = v1(v2);
  swift_release();
  if (v3)
  {
    sub_186C3AA2C(0LL, &qword_18C6A2BA8);
    uint64_t v4 = (void *)sub_186C5ACA8();
    swift_bridgeObjectRelease();
  }

  else
  {
    uint64_t v4 = 0LL;
  }

  return v4;
}

_DWORD *sub_186C36814@<X0>(_DWORD *result@<X0>, _DWORD *a2@<X8>)
{
  *a2 = *result;
  return result;
}

void sub_186C36820(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

_DWORD *sub_186C36828@<X0>(_DWORD *result@<X0>, int *a2@<X8>)
{
  *a2 = *v2 | *result;
  return result;
}

_DWORD *sub_186C3683C@<X0>(_DWORD *result@<X0>, int *a2@<X8>)
{
  *a2 = *v2 & *result;
  return result;
}

_DWORD *sub_186C36850@<X0>(_DWORD *result@<X0>, int *a2@<X8>)
{
  *a2 = *v2 ^ *result;
  return result;
}

BOOL sub_186C36864(_DWORD *a1, int *a2)
{
  int v3 = *a2;
  int v4 = *v2 & *a2;
  if (v4 != *a2) {
    *v2 |= v3;
  }
  *a1 = v3;
  return v4 != v3;
}

_DWORD *sub_186C36894@<X0>(_DWORD *result@<X0>, uint64_t a2@<X8>)
{
  int v3 = *v2 & *result;
  if (v3) {
    *v2 &= ~*result;
  }
  *(_DWORD *)a2 = v3;
  *(_BYTE *)(a2 + 4) = v3 == 0;
  return result;
}

int *sub_186C368C0@<X0>(int *result@<X0>, uint64_t a2@<X8>)
{
  int v3 = *result;
  int v4 = *v2;
  *v2 |= *result;
  int v5 = v4 & v3;
  *(_DWORD *)a2 = v5;
  *(_BYTE *)(a2 + 4) = v5 == 0;
  return result;
}

_DWORD *sub_186C368E4(_DWORD *result)
{
  *v1 |= *result;
  return result;
}

_DWORD *sub_186C368F8(_DWORD *result)
{
  *v1 &= *result;
  return result;
}

_DWORD *sub_186C3690C(_DWORD *result)
{
  *v1 ^= *result;
  return result;
}

_DWORD *sub_186C36920@<X0>(_DWORD *result@<X0>, int *a2@<X8>)
{
  *a2 = *v2 & ~*result;
  return result;
}

BOOL sub_186C36934(_DWORD *a1)
{
  return (*v1 & ~*a1) == 0;
}

BOOL sub_186C36948(_DWORD *a1)
{
  return (*v1 & *a1) == 0;
}

BOOL sub_186C3695C(_DWORD *a1)
{
  return (*a1 & ~*v1) == 0;
}

BOOL sub_186C36970()
{
  return *v0 == 0;
}

_DWORD *sub_186C36980(_DWORD *result)
{
  *v1 &= ~*result;
  return result;
}

uint64_t sub_186C36994@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  int v3 = sub_186C39730(a1);
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v3;
  return result;
}

uint64_t sub_186C369D0()
{
  return sub_186C5B3B0();
}

char *sub_186C36A54(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    int64_t v7 = a2;
    goto LABEL_8;
  }

  unint64_t v6 = *((void *)a4 + 3);
  int64_t v7 = v6 >> 1;
  if (v7 + 0x4000000000000000LL >= 0)
  {
    int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
LABEL_8:
    int64_t v8 = *((void *)a4 + 2);
    if (v7 <= v8) {
      int64_t v9 = *((void *)a4 + 2);
    }
    else {
      int64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_18C6A2BD8);
      os_log_type_t v10 = (char *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      *((void *)v10 + 2) = v8;
      *((void *)v10 + 3) = 2 * v11 - 64;
      uint64_t v12 = v10 + 32;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[v8 + 32]) {
          memmove(v12, a4 + 32, v8);
        }
        *((void *)a4 + 2) = 0LL;
        goto LABEL_22;
      }
    }

    else
    {
      os_log_type_t v10 = (char *)MEMORY[0x18961AFE8];
      uint64_t v12 = (char *)(MEMORY[0x18961AFE8] + 32LL);
    }

    sub_186C39330(0LL, v8, v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }

  __break(1u);
  return result;
}

void *sub_186C36B4C(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }

  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if (v7 + 0x4000000000000000LL >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_18C6A2B48);
      os_log_type_t v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      void v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 40);
      uint64_t v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[5 * v8 + 4]) {
          memmove(v12, a4 + 4, 40 * v8);
        }
        a4[2] = 0LL;
        goto LABEL_22;
      }
    }

    else
    {
      os_log_type_t v10 = (void *)MEMORY[0x18961AFE8];
      uint64_t v12 = (void *)(MEMORY[0x18961AFE8] + 32LL);
    }

    sub_186C39624(0LL, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }

  __break(1u);
  return result;
}

void sub_186C36C6C(uint64_t a1, char a2, void *a3)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
    swift_bridgeObjectRelease();
    return;
  }

  for (uint64_t i = (uint64_t *)(swift_bridgeObjectRetain() + 48); ; i += 3)
  {
    uint64_t v11 = *(i - 2);
    uint64_t v10 = *(i - 1);
    uint64_t v12 = *i;
    int v13 = (void *)*a3;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t v15 = sub_186BF8278(v11, v10);
    uint64_t v16 = v13[2];
    BOOL v17 = (v14 & 1) == 0;
    uint64_t v18 = v16 + v17;
    if (__OFADD__(v16, v17))
    {
      __break(1u);
LABEL_20:
      __break(1u);
LABEL_21:
      sub_186C5B530();
      __break(1u);
      goto LABEL_22;
    }

    char v19 = v14;
    if (v13[3] >= v18)
    {
      if ((a2 & 1) == 0) {
        sub_186C1C8F0();
      }
    }

    else
    {
      sub_186C370CC(v18, a2 & 1);
      unint64_t v20 = sub_186BF8278(v11, v10);
      if ((v19 & 1) != (v21 & 1)) {
        goto LABEL_21;
      }
      unint64_t v15 = v20;
    }

    uint64_t v22 = (void *)*a3;
    if ((v19 & 1) != 0) {
      break;
    }
    v22[(v15 >> 6) + 8] |= 1LL << v15;
    unint64_t v6 = (uint64_t *)(v22[6] + 16 * v15);
    *unint64_t v6 = v11;
    v6[1] = v10;
    *(void *)(v22[7] + 8 * v15) = v12;
    uint64_t v7 = v22[2];
    BOOL v8 = __OFADD__(v7, 1LL);
    uint64_t v9 = v7 + 1;
    if (v8) {
      goto LABEL_20;
    }
    v22[2] = v9;
LABEL_5:
    a2 = 1;
    if (!--v3)
    {
      swift_bridgeObjectRelease_n();
      return;
    }
  }

  uint64_t v23 = *(void *)(v22[7] + 8 * v15);
  swift_bridgeObjectRetain();
  if ((sub_186C2FC9C(v12, v23) & 1) != 0)
  {
    uint64_t v24 = sub_186C149D0(v12, v23);
    swift_bridgeObjectRelease();
    uint64_t v25 = v22[7];
    swift_bridgeObjectRelease();
    *(void *)(v25 + 8 * v15) = v24;
    goto LABEL_5;
  }

  type metadata accessor for KTraceRecordError();
  sub_186BFCB04( (unint64_t *)&qword_18C6A21E0,  (uint64_t (*)(uint64_t))type metadata accessor for KTraceRecordError,  (uint64_t)&unk_186C60EF4);
  uint64_t v26 = (void *)swift_allocError();
  uint64_t v28 = v27;
  swift_bridgeObjectRetain();
  sub_186C379F8(v12, v23);
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C6A27B0);
  sub_186C253C0((unint64_t *)&qword_18C6A27B8, &qword_18C6A27B0, MEMORY[0x189618708]);
  sub_186BFB8D0();
  uint64_t v29 = sub_186C5AED0();
  uint64_t v31 = v30;
  swift_release();
  *uint64_t v28 = v29;
  v28[1] = v31;
  swift_storeEnumTagMultiPayload();
  swift_willThrow();
  swift_bridgeObjectRelease();
  id v32 = v26;
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C6A2280);
  if ((swift_dynamicCast() & 1) == 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    return;
  }

unint64_t sub_186C3704C(uint64_t a1)
{
  uint64_t v2 = sub_186C5B5D8();
  swift_bridgeObjectRelease();
  return sub_186C373E0(a1, v2);
}

uint64_t sub_186C370CC(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C6A28F0);
  char v36 = a2;
  uint64_t v6 = sub_186C5B380();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1LL << *(_BYTE *)(v5 + 32);
  uint64_t v35 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1LL << v8);
  }
  else {
    uint64_t v9 = -1LL;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  int64_t v34 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0LL;
  while (1)
  {
    if (v10)
    {
      unint64_t v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }

    int64_t v21 = v13 + 1;
    if (__OFADD__(v13, 1LL))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }

    if (v21 >= v34) {
      break;
    }
    uint64_t v22 = (void *)(v5 + 64);
    unint64_t v23 = *(void *)(v35 + 8 * v21);
    ++v13;
    if (!v23)
    {
      int64_t v13 = v21 + 1;
      if (v21 + 1 >= v34) {
        goto LABEL_33;
      }
      unint64_t v23 = *(void *)(v35 + 8 * v13);
      if (!v23)
      {
        int64_t v24 = v21 + 2;
        if (v24 >= v34)
        {
LABEL_33:
          swift_release();
          if ((v36 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }

        unint64_t v23 = *(void *)(v35 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            int64_t v13 = v24 + 1;
            if (__OFADD__(v24, 1LL)) {
              goto LABEL_42;
            }
            if (v13 >= v34) {
              goto LABEL_33;
            }
            unint64_t v23 = *(void *)(v35 + 8 * v13);
            ++v24;
            if (v23) {
              goto LABEL_30;
            }
          }
        }

        int64_t v13 = v24;
      }
    }

unint64_t sub_186C373E0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2 + 64;
  uint64_t v4 = -1LL << *(_BYTE *)(v2 + 32);
  unint64_t v5 = a2 & ~v4;
  if (((*(void *)(v2 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v5) & 1) != 0)
  {
    uint64_t v6 = sub_186C5AD2C();
    uint64_t v8 = v7;
    if (v6 == sub_186C5AD2C() && v8 == v9)
    {
LABEL_16:
      swift_bridgeObjectRelease_n();
      return v5;
    }

    char v11 = sub_186C5B4F4();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v11 & 1) == 0)
    {
      uint64_t v12 = ~v4;
      unint64_t v5 = (v5 + 1) & v12;
      if (((*(void *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v5) & 1) != 0)
      {
        while (1)
        {
          uint64_t v13 = sub_186C5AD2C();
          uint64_t v15 = v14;
          if (v13 == sub_186C5AD2C() && v15 == v16) {
            break;
          }
          char v18 = sub_186C5B4F4();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v18 & 1) == 0)
          {
            unint64_t v5 = (v5 + 1) & v12;
            if (((*(void *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v5) & 1) != 0) {
              continue;
            }
          }

          return v5;
        }

        goto LABEL_16;
      }
    }
  }

  return v5;
}

uint64_t sub_186C37554(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_186C376B4(a1, a2, a3, (void *)*v3);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_186C37570(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C6A21F8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_186C375B8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C6A21F8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_186C37600(uint64_t a1, uint64_t a2, char a3)
{
  if (a3 != -1) {
    return sub_186C044C8(a1, a2, a3);
  }
  return a1;
}

uint64_t sub_186C37614(uint64_t a1, uint64_t a2, char a3)
{
  if (a3 != -1) {
    return sub_186C05718(a1, a2, a3);
  }
  return a1;
}

uint64_t sub_186C37628(uint64_t a1)
{
  return a1;
}

uint64_t type metadata accessor for Recording()
{
  uint64_t result = qword_18C6A30E8;
  if (!qword_18C6A30E8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_186C37698(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_186C37858(a1, a2, a3, (void *)*v3);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_186C376B4(char a1, int64_t a2, char a3, void *a4)
{
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        goto LABEL_30;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_18C6A2BE0);
    unint64_t v10 = (void *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    void v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
  }

  else
  {
    unint64_t v10 = (void *)MEMORY[0x18961AFE8];
  }

  unint64_t v12 = (unint64_t)(v10 + 4);
  unint64_t v13 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= v13 + 24 * v8) {
      memmove(v10 + 4, a4 + 4, 24 * v8);
    }
    a4[2] = 0LL;
    goto LABEL_28;
  }

  if (v13 >= v12 + 24 * v8 || v12 >= v13 + 24 * v8)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_18C6A2BE8);
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }

uint64_t sub_186C37858(char a1, int64_t a2, char a3, void *a4)
{
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        goto LABEL_30;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_18C6A2B48);
    unint64_t v10 = (void *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    void v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 40);
  }

  else
  {
    unint64_t v10 = (void *)MEMORY[0x18961AFE8];
  }

  unint64_t v12 = (unint64_t)(v10 + 4);
  unint64_t v13 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= v13 + 40 * v8) {
      memmove(v10 + 4, a4 + 4, 40 * v8);
    }
    a4[2] = 0LL;
    goto LABEL_28;
  }

  if (v13 >= v12 + 40 * v8 || v12 >= v13 + 40 * v8)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_18C6A2BD0);
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }

uint64_t sub_186C379F8(uint64_t isStackAllocationSafe, uint64_t a2)
{
  uint64_t v3 = isStackAllocationSafe;
  v10[1] = *MEMORY[0x1895F89C0];
  char v4 = *(_BYTE *)(a2 + 32);
  unint64_t v5 = (unint64_t)((1LL << v4) + 63) >> 6;
  size_t v6 = 8 * v5;
  if ((v4 & 0x3Fu) <= 0xD
    || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x1895F8858](isStackAllocationSafe);
    bzero((char *)v10 - ((v6 + 15) & 0x3FFFFFFFFFFFFFF0LL), v6);
    uint64_t v7 = sub_186C37B78((uint64_t)v10 - ((v6 + 15) & 0x3FFFFFFFFFFFFFF0LL), v5, a2, v3);
    swift_release();
  }

  else
  {
    uint64_t v8 = (void *)swift_slowAlloc();
    bzero(v8, v6);
    uint64_t v7 = sub_186C37B78((uint64_t)v8, v5, a2, v3);
    swift_release();
    MEMORY[0x186E466F0](v8, -1LL, -1LL);
  }

  return v7;
}

uint64_t sub_186C37B78(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v5 = a3;
  uint64_t v57 = (unint64_t *)result;
  if (*(void *)(a4 + 16) < *(void *)(a3 + 16))
  {
    int64_t v6 = 0LL;
    uint64_t v58 = a4 + 56;
    uint64_t v7 = 1LL << *(_BYTE *)(a4 + 32);
    if (v7 < 64) {
      uint64_t v8 = ~(-1LL << v7);
    }
    else {
      uint64_t v8 = -1LL;
    }
    unint64_t v9 = v8 & *(void *)(a4 + 56);
    int64_t v59 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v61 = 0LL;
    uint64_t v10 = a3 + 56;
    while (1)
    {
      while (1)
      {
        if (v9)
        {
          unint64_t v11 = __clz(__rbit64(v9));
          v9 &= v9 - 1;
          int64_t v62 = v6;
          unint64_t v12 = v11 | (v6 << 6);
        }

        else
        {
          int64_t v13 = v6 + 1;
          if (__OFADD__(v6, 1LL))
          {
            __break(1u);
            goto LABEL_81;
          }

          if (v13 >= v59) {
            goto LABEL_79;
          }
          unint64_t v14 = *(void *)(v58 + 8 * v13);
          int64_t v15 = v6 + 1;
          if (!v14)
          {
            int64_t v15 = v6 + 2;
            if (v6 + 2 >= v59) {
              goto LABEL_79;
            }
            unint64_t v14 = *(void *)(v58 + 8 * v15);
            if (!v14)
            {
              int64_t v15 = v6 + 3;
              if (v6 + 3 >= v59) {
                goto LABEL_79;
              }
              unint64_t v14 = *(void *)(v58 + 8 * v15);
              if (!v14)
              {
                uint64_t v16 = v6 + 4;
                if (v6 + 4 >= v59) {
                  goto LABEL_79;
                }
                unint64_t v14 = *(void *)(v58 + 8 * v16);
                if (!v14)
                {
                  while (1)
                  {
                    int64_t v15 = v16 + 1;
                    if (__OFADD__(v16, 1LL)) {
                      goto LABEL_83;
                    }
                    if (v15 >= v59) {
                      goto LABEL_79;
                    }
                    unint64_t v14 = *(void *)(v58 + 8 * v15);
                    ++v16;
                    if (v14) {
                      goto LABEL_22;
                    }
                  }
                }

                int64_t v15 = v6 + 4;
              }
            }
          }

LABEL_62:
    unint64_t v37 = (v42 - 1) & v42;
    unint64_t v40 = __clz(__rbit64(v42)) + (v34 << 6);
LABEL_63:
    uint64_t v44 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v40);
    uint64_t v46 = *v44;
    uint64_t v45 = v44[1];
    sub_186C5B59C();
    swift_bridgeObjectRetain();
    sub_186C5ADA4();
    uint64_t v47 = sub_186C5B5D8();
    uint64_t v48 = -1LL << *(_BYTE *)(v4 + 32);
    unint64_t v49 = v47 & ~v48;
    if (((*(void *)(v38 + ((v49 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v49) & 1) == 0) {
      goto LABEL_46;
    }
    uint64_t v50 = *(void *)(a4 + 48);
    uint64_t v51 = (void *)(v50 + 16 * v49);
    BOOL v52 = *v51 == v46 && v51[1] == v45;
    if (v52 || (sub_186C5B4F4() & 1) != 0)
    {
LABEL_76:
      uint64_t result = swift_bridgeObjectRelease();
      *(unint64_t *)((char *)v57 + ((v40 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v40;
      BOOL v33 = __OFADD__(v61++, 1LL);
      uint64_t v5 = a3;
      uint64_t v4 = a4;
      if (v33)
      {
        __break(1u);
LABEL_79:
        swift_retain();
        return sub_186C1EF78(v57, a2, v61, v5);
      }
    }

    else
    {
      uint64_t v53 = ~v48;
      while (1)
      {
        unint64_t v49 = (v49 + 1) & v53;
        if (((*(void *)(v38 + ((v49 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v49) & 1) == 0) {
          break;
        }
        uint64_t v54 = (void *)(v50 + 16 * v49);
        BOOL v55 = *v54 == v46 && v54[1] == v45;
        if (v55 || (sub_186C5B4F4() & 1) != 0) {
          goto LABEL_76;
        }
      }

LABEL_84:
  __break(1u);
  return result;
}

void sub_186C380B4(uint64_t a1)
{
  __asm { BR              X11 }

uint64_t sub_186C38110@<X0>( uint64_t a1@<X8>, uint64_t a2, uint64_t aBlock, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23)
{
  uint64_t v31 = v25;
  LOWORD(v32) = a1;
  BYTE2(v32) = BYTE2(a1);
  HIBYTE(v32) = BYTE3(a1);
  unsigned __int8 v33 = BYTE4(a1);
  unsigned __int8 v34 = BYTE5(a1);
  unsigned __int8 v35 = BYTE6(a1);
  v30[4] = nullsub_1;
  v30[5] = 0LL;
  v30[0] = MEMORY[0x1895F87A8];
  v30[1] = 1107296256LL;
  v30[2] = sub_186C32614;
  v30[3] = &block_descriptor_64;
  unint64_t v26 = _Block_copy(v30);
  uint64_t v27 = ktrace_events_filter_bitmap(v24, &v31, v26);
  _Block_release(v26);
  unint64_t v28 = v32 | ((unint64_t)v33 << 32) | ((unint64_t)v34 << 40) | ((unint64_t)v35 << 48);
  *unint64_t v23 = v31;
  v23[1] = v28;
  return v27;
}

uint64_t sub_186C384CC(uint64_t result)
{
  uint64_t v3 = *(void *)(result + 16);
  uint64_t v4 = *v1;
  int64_t v5 = *((void *)*v1 + 2);
  int64_t v6 = v5 + v3;
  if (__OFADD__(v5, v3))
  {
    __break(1u);
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }

  uint64_t v7 = result;
  char isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native();
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || (int64_t v9 = *((void *)v4 + 3) >> 1, v9 < v6))
  {
    if (v5 <= v6) {
      int64_t v10 = v5 + v3;
    }
    else {
      int64_t v10 = v5;
    }
    uint64_t v4 = sub_186C01C3C(isUniquelyReferenced_nonNull_native, v10, 1, v4);
    int64_t v9 = *((void *)v4 + 3) >> 1;
  }

  uint64_t v11 = *((void *)v4 + 2);
  uint64_t v12 = v9 - v11;
  uint64_t result = sub_186C0A858((uint64_t)v38, &v4[16 * v11 + 32], v9 - v11, v7);
  if (result < v3) {
    goto LABEL_15;
  }
  if (result)
  {
    uint64_t v14 = *((void *)v4 + 2);
    BOOL v15 = __OFADD__(v14, result);
    uint64_t v16 = v14 + result;
    if (v15)
    {
      __break(1u);
      goto LABEL_48;
    }

    *((void *)v4 + 2) = v16;
  }

  if (result != v12)
  {
LABEL_13:
    uint64_t result = sub_186C0D094();
    *uint64_t v1 = v4;
    return result;
  }

LABEL_48:
  int64_t v32 = v6 + 1;
  if (__OFADD__(v6, 1LL)) {
    goto LABEL_66;
  }
  int64_t v36 = (unint64_t)(v13 + 64) >> 6;
  if (v32 >= v36) {
    goto LABEL_13;
  }
  unint64_t v33 = *(void *)(v37 + 8 * v32);
  int64_t v34 = v6 + 1;
  if (!v33)
  {
    int64_t v34 = v6 + 2;
    if (v6 + 2 >= v36) {
      goto LABEL_13;
    }
    unint64_t v33 = *(void *)(v37 + 8 * v34);
    if (!v33)
    {
      int64_t v34 = v6 + 3;
      if (v6 + 3 >= v36) {
        goto LABEL_13;
      }
      unint64_t v33 = *(void *)(v37 + 8 * v34);
      if (!v33)
      {
        int64_t v34 = v6 + 4;
        if (v6 + 4 >= v36) {
          goto LABEL_13;
        }
        unint64_t v33 = *(void *)(v37 + 8 * v34);
        if (!v33)
        {
          int64_t v34 = v6 + 5;
          if (v6 + 5 >= v36) {
            goto LABEL_13;
          }
          unint64_t v33 = *(void *)(v37 + 8 * v34);
          if (!v33)
          {
            int64_t v35 = v6 + 6;
            do
            {
              if (v36 == v35) {
                goto LABEL_13;
              }
              unint64_t v33 = *(void *)(v37 + 8 * v35++);
            }

            while (!v33);
            int64_t v34 = v35 - 1;
          }
        }
      }
    }
  }

  unint64_t v17 = (v33 - 1) & v33;
  unint64_t v18 = __clz(__rbit64(v33)) + (v34 << 6);
  int64_t v6 = v34;
LABEL_18:
  uint64_t v19 = (uint64_t *)(*(void *)(v3 + 48) + 16 * v18);
  uint64_t v21 = *v19;
  uint64_t v20 = v19[1];
  uint64_t result = swift_bridgeObjectRetain();
  while (1)
  {
    unint64_t v22 = *((void *)v4 + 3);
    int64_t v23 = v22 >> 1;
    if (v2 < v23) {
      goto LABEL_23;
    }
LABEL_20:
    *((void *)v4 + 2) = v2;
  }

  uint64_t result = (uint64_t)sub_186C01C3C((char *)(v22 > 1), v2 + 1, 1, v4);
  uint64_t v4 = (char *)result;
  int64_t v23 = *(void *)(result + 24) >> 1;
  if (v2 >= v23) {
    goto LABEL_20;
  }
  while (1)
  {
LABEL_23:
    uint64_t v24 = &v4[16 * v2 + 32];
    *(void *)uint64_t v24 = v21;
    *((void *)v24 + 1) = v20;
    ++v2;
    if (v17)
    {
      unint64_t v25 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      unint64_t v26 = v25 | (v6 << 6);
      goto LABEL_41;
    }

    int64_t v27 = v6 + 1;
    if (__OFADD__(v6, 1LL)) {
      break;
    }
    if (v27 >= v36) {
      goto LABEL_45;
    }
    unint64_t v28 = *(void *)(v37 + 8 * v27);
    int64_t v29 = v6 + 1;
    if (!v28)
    {
      int64_t v29 = v6 + 2;
      if (v6 + 2 >= v36) {
        goto LABEL_45;
      }
      unint64_t v28 = *(void *)(v37 + 8 * v29);
      if (!v28)
      {
        int64_t v29 = v6 + 3;
        if (v6 + 3 >= v36) {
          goto LABEL_45;
        }
        unint64_t v28 = *(void *)(v37 + 8 * v29);
        if (!v28)
        {
          int64_t v29 = v6 + 4;
          if (v6 + 4 >= v36) {
            goto LABEL_45;
          }
          unint64_t v28 = *(void *)(v37 + 8 * v29);
          if (!v28)
          {
            int64_t v29 = v6 + 5;
            if (v6 + 5 >= v36) {
              goto LABEL_45;
            }
            unint64_t v28 = *(void *)(v37 + 8 * v29);
            if (!v28)
            {
              int64_t v30 = v6 + 6;
              while (v36 != v30)
              {
                unint64_t v28 = *(void *)(v37 + 8 * v30++);
                if (v28)
                {
                  int64_t v29 = v30 - 1;
                  goto LABEL_40;
                }
              }

uint64_t sub_186C38894(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void **)v1;
  int64_t v4 = *(void *)(*(void *)v1 + 16LL);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }

  char isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(void *)(a1 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }

  if (v4 <= v5) {
    int64_t v14 = v4 + v2;
  }
  else {
    int64_t v14 = v4;
  }
  uint64_t v3 = sub_186C36B4C(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(void *)(a1 + 16))
  {
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }

char *sub_186C389FC(uint64_t a1)
{
  return sub_186C2AC5C(0LL, *(void *)(a1 + 16), 0, (char *)a1);
}

char *sub_186C38A10(uint64_t a1)
{
  return sub_186C36A54(0LL, *(void *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_186C38A24(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4 = a4 >> 1;
  uint64_t v5 = (a4 >> 1) - a3;
  if (!__OFSUB__(a4 >> 1, a3))
  {
    if (!v5) {
      return MEMORY[0x18961AFE8];
    }
    uint64_t v8 = 2 * v5;
    if (v5 <= 0)
    {
      unint64_t v9 = (void *)MEMORY[0x18961AFE8];
      if (v4 != a3)
      {
LABEL_7:
        if (v5 < 0) {
          goto LABEL_19;
        }
        unint64_t v12 = a2 + 16 * a3;
        swift_arrayInitWithCopy();
        return (uint64_t)v9;
      }
    }

    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_18C6A21C0);
      unint64_t v9 = (void *)swift_allocObject();
      int64_t v10 = _swift_stdlib_malloc_size(v9);
      uint64_t v11 = v10 - 32;
      if (v10 < 32) {
        uint64_t v11 = v10 - 17;
      }
      void v9[2] = v5;
      v9[3] = 2 * (v11 >> 4);
      if (v4 != a3) {
        goto LABEL_7;
      }
    }

    __break(1u);
  }

  __break(1u);
LABEL_19:
  uint64_t result = sub_186C5B398();
  __break(1u);
  return result;
}

uint64_t sub_186C38B94(uint64_t a1)
{
  return a1;
}

uint64_t sub_186C38BFC()
{
  return swift_deallocObject();
}

uint64_t sub_186C38C30()
{
  void (*v5)(void *__return_ptr, uint64_t);
  void *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t ns_from_timestamp;
  void (*v12)(void *, void);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  void __dst[41];
  void v23[18];
  void v24[18];
  void __src[42];
  uint64_t v1 = v0[2];
  uint64_t v2 = v0[3];
  uint64_t v3 = v0[4];
  uint64_t end_reason = ktrace_get_end_reason(v1);
  uint64_t v5 = *(void (**)(void *__return_ptr, uint64_t))(*(void *)v2 + 344LL);
  int64_t v6 = ((void *(*)(void *__return_ptr))v5)(v23);
  (*(void (**)(void *__return_ptr, void *))(*(void *)v2 + 224LL))(__src, v6);
  memcpy(__dst, __src, 0x141uLL);
  uint64_t v7 = sub_186C3F1D4(__dst, v2 + OBJC_IVAR____TtC6ktrace9Recording_options);
  unint64_t v9 = v8;
  sub_186C0BD24((uint64_t)v23);
  int64_t v10 = sub_186C23A98((uint64_t)__src);
  if (v9)
  {
    (*(void (**)(unint64_t, uint64_t))(**(void **)(v2 + OBJC_IVAR____TtC6ktrace9Recording_reporter)
                                                      + 232LL))( v7,  v9);
    int64_t v10 = swift_bridgeObjectRelease();
  }

  v5(v24, v10);
  sub_186C0BD24((uint64_t)v24);
  ns_from_timestamp = ktrace_get_ns_from_timestamp(v1, v24[4]);
  unint64_t v12 = (void (*)(void *, void))(*(uint64_t (**)(void *))(*(void *)v2 + 360LL))(__dst);
  *(void *)(v13 + 40) = ns_from_timestamp;
  *(_BYTE *)(v13 + 48) = 0;
  v12(__dst, 0LL);
  int64_t v14 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 280LL))(end_reason);
  BOOL v15 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 296LL))(v14);
  if (v17 != -1)
  {
    unint64_t v18 = v15;
    uint64_t v19 = v16;
    uint64_t v20 = v17;
    ((void (*)(void *__return_ptr))v5)(__dst);
    type metadata accessor for RecordingOptions.Options(0LL);
    sub_186C0841C(v18, v19, v20);
    (*(void (**)(void))(*(void *)v3 + 352LL))();
  }

  ktrace_session_destroy(v1);
  return sub_186C5B068();
}

uint64_t block_copy_helper_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_0()
{
  return swift_release();
}

uint64_t sub_186C38E08()
{
  return swift_deallocObject();
}

uint64_t sub_186C38E44(uint64_t a1)
{
  uint64_t v3 = v1[2];
  uint64_t v4 = v1[3];
  uint64_t v5 = v1[4];
  uint64_t v41 = v1[5];
  uint64_t v7 = v1[6];
  uint64_t v6 = v1[7];
  kperf_reset();
  uint64_t end_reason = ktrace_get_end_reason(v3);
  (*(void (**)(uint64_t, void, void, void, uint64_t))(*(void *)v4 + 256LL))(5LL, 0LL, 0LL, 0LL, 1LL);
  if (!a1)
  {
    __break(1u);
    goto LABEL_8;
  }

  uint64_t v39 = v7;
  uint64_t v40 = v6;
  uint64_t v38 = a1;
  uint64_t ktrace_file = ktrace_get_ktrace_file(a1);
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = 0LL;
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = 0LL;
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = 0LL;
  if (!ktrace_file)
  {
LABEL_8:
    __break(1u);
    return result;
  }

  uint64_t v13 = result;
  int64_t v14 = (void *)swift_allocObject();
  _OWORD v14[2] = v11;
  void v14[3] = v12;
  v14[4] = v13;
  uint64_t v45 = sub_186C3AB64;
  uint64_t v46 = v14;
  *(void *)&__int128 aBlock = MEMORY[0x1895F87A8];
  *((void *)&aBlock + 1) = 1107296256LL;
  int64_t v43 = sub_186C32618;
  uint64_t v44 = &block_descriptor_49;
  BOOL v15 = _Block_copy(&aBlock);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_release();
  ktrace_file_iterate(ktrace_file, 0LL, (uint64_t)v15, v16, v17, v18, v19, v20);
  _Block_release(v15);
  swift_beginAccess();
  uint64_t v21 = *(void *)(v11 + 16);
  unint64_t v22 = *(uint64_t (**)(__int128 *))(*(void *)v5 + 360LL);
  int64_t v23 = (void (*)(__int128 *, void))v22(&aBlock);
  *(void *)(v24 + 112) = v21;
  *(_BYTE *)(v24 + 120) = 0;
  v23(&aBlock, 0LL);
  swift_beginAccess();
  uint64_t v25 = *(void *)(v12 + 16);
  unint64_t v26 = (void (*)(__int128 *, void))v22(&aBlock);
  *(void *)(v27 + 128) = v25;
  *(_BYTE *)(v27 + 136) = 0;
  v26(&aBlock, 0LL);
  swift_beginAccess();
  uint64_t v28 = *(void *)(v13 + 16);
  int64_t v29 = (void (*)(__int128 *, void))v22(&aBlock);
  *(void *)(v30 + 96) = v28;
  *(_BYTE *)(v30 + 104) = 0;
  v29(&aBlock, 0LL);
  *(void *)&__int128 aBlock = v41;
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C6A21A8);
  sub_186C253C0((unint64_t *)&qword_18C6A21B0, &qword_18C6A21A8, MEMORY[0x189618458]);
  sub_186C5ACD8();
  *(void *)&__int128 aBlock = 0LL;
  *((void *)&aBlock + 1) = 0xE000000000000000LL;
  sub_186C5ADD4();
  swift_bridgeObjectRelease();
  sub_186C5ADD4();
  swift_bridgeObjectRelease();
  *(void *)&__int128 aBlock = 0LL;
  *((void *)&aBlock + 1) = 0xE000000000000000LL;
  sub_186C5B260();
  swift_bridgeObjectRelease();
  *(void *)&__int128 aBlock = 0xD000000000000018LL;
  *((void *)&aBlock + 1) = 0x8000000186C67350LL;
  sub_186C5ADD4();
  swift_bridgeObjectRelease();
  __int128 v31 = aBlock;
  char v32 = sub_186BFDA3C();
  char v33 = sub_186BFDFF4();
  (*(void (**)(void, void, void, void))(*(void *)v39 + 216LL))( v31,  *((void *)&v31 + 1),  v32 & 1,  v33 & 1);
  swift_bridgeObjectRelease();
  int64_t v34 = *(void (***)(void, void))(v40 + 40);
  if (v34)
  {
    _Block_copy(*(const void **)(v40 + 40));
    _Block_copy(v34);
    __int128 aBlock = xmmword_186C60FF0;
    int v47 = 5;
    p___int128 aBlock = &aBlock;
    ((void (**)(void, int *))v34)[2](v34, &v47);
    _Block_release(v34);
    int64_t v35 = v34;
  }

  else
  {
    int64_t v35 = 0LL;
  }

  _Block_release(v35);
  uint64_t v36 = swift_allocObject();
  *(void *)(v36 + 16) = v5;
  *(void *)(v36 + 24) = v38;
  uint64_t v45 = sub_186C3AC90;
  uint64_t v46 = (void *)v36;
  *(void *)&__int128 aBlock = MEMORY[0x1895F87A8];
  *((void *)&aBlock + 1) = 1107296256LL;
  int64_t v43 = sub_186C32614;
  uint64_t v44 = &block_descriptor_55;
  uint64_t v37 = _Block_copy(&aBlock);
  swift_retain();
  swift_release();
  ktrace_events_all(v38, v37);
  _Block_release(v37);
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t sub_186C392F4(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8LL))(a1, v3);
  return a1;
}

char *sub_186C39330(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  size_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }

  else if ((v4 & 0x8000000000000000LL) == 0)
  {
    uint64_t v5 = (char *)(a4 + a1 + 32);
    uint64_t v6 = &__dst[v4];
    if (v5 >= &__dst[v4] || &v5[v4] <= __dst)
    {
      memcpy(__dst, v5, v4);
      return v6;
    }
  }

  uint64_t result = (char *)sub_186C5B398();
  __break(1u);
  return result;
}

uint64_t sub_186C39414(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 16);
  if (v1)
  {
    uint64_t v2 = result;
    int v3 = *(unsigned __int8 *)(result + 32);
    result += 32LL;
    if (!v3) {
      return sub_186C5AD8C();
    }
    uint64_t v4 = 0LL;
    uint64_t v5 = v1 - 1;
    uint64_t v6 = v2 + 33;
    while (v5 != v4)
    {
    }

    __break(1u);
  }

  __break(1u);
  return result;
}

uint64_t sub_186C3945C(uint64_t a1)
{
  uint64_t v2 = v1;
  (*(void (**)(void *__return_ptr))(*(void *)v1 + 224LL))(__src);
  uint64_t result = (uint64_t)memcpy(__dst, __src, sizeof(__dst));
  if (a1)
  {
    char v5 = sub_186C153C8();
    uint64_t result = sub_186C23A98((uint64_t)__src);
    if ((v5 & 1) == 0) {
      return (*(uint64_t (**)(unint64_t, unint64_t))(**(void **)(v2
    }
                                                                                         + OBJC_IVAR____TtC6ktrace9Recording_reporter)
                                                                           + 248LL))( 0xD00000000000001DLL,  0x8000000186C67330LL);
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_186C39514()
{
  return swift_deallocObject();
}

uint64_t sub_186C39528(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v3 = *(void *)(v1 + 24);
  uint64_t result = swift_beginAccess();
  uint64_t v6 = *(void *)(v4 + 16);
  BOOL v7 = __CFADD__(v6, 1LL);
  uint64_t v8 = v6 + 1;
  if (v7)
  {
    __break(1u);
  }

  else
  {
    unint64_t v9 = (void *)(v3 + 16);
    *(void *)(v4 + 16) = v8;
    uint64_t v10 = ktrace_chunk_size(a1);
    uint64_t result = swift_beginAccess();
    if (!__CFADD__(*v9, v10))
    {
      *v9 += v10;
      return 1LL;
    }
  }

  __break(1u);
  return result;
}

void type metadata accessor for FileAttributeKey(uint64_t a1)
{
}

uint64_t sub_186C395D4(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return sub_186BF06F4(a1, a2);
  }
  return a1;
}

uint64_t sub_186C395EC()
{
  return sub_186C356AC(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t objectdestroy_15Tm()
{
  return swift_deallocObject();
}

uint64_t sub_186C39624(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }

  else if ((v4 & 0x8000000000000000LL) == 0)
  {
    unint64_t v5 = a4 + 40 * a1 + 32;
    unint64_t v6 = a3 + 40 * v4;
    if (v5 >= v6 || v5 + 40 * v4 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_18C6A2BD0);
      swift_arrayInitWithCopy();
      return v6;
    }
  }

  uint64_t result = sub_186C5B398();
  __break(1u);
  return result;
}

uint64_t sub_186C39730(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 16);
  if (!v1) {
    return 0LL;
  }
  uint64_t v2 = result;
  LODWORD(result) = 0;
  uint64_t v3 = (int *)(v2 + 32);
  do
  {
    int v5 = *v3++;
    int v4 = v5;
    if ((v5 & ~(_DWORD)result) == 0) {
      int v4 = 0;
    }
    uint64_t result = v4 | result;
    --v1;
  }

  while (v1);
  return result;
}

uint64_t sub_186C39768(ValueMetadata *a1, uint64_t a2)
{
  uint64_t v98 = a1;
  uint64_t v107 = *MEMORY[0x1895F89C0];
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C6A21F8);
  MEMORY[0x1895F8858](v3);
  v88[1] = (char *)v88 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = sub_186C5AA8C();
  v88[2] = *(void *)(v5 - 8);
  v88[3] = v5;
  MEMORY[0x1895F8858](v5);
  BOOL v7 = (char *)v88 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C6A2B98);
  MEMORY[0x1895F8858](v8);
  uint64_t v95 = (uint64_t)v88 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for RecordingOptions(0LL);
  uint64_t v90 = *(void *)(v10 - 8);
  uint64_t v91 = v10;
  uint64_t v11 = MEMORY[0x1895F8858](v10);
  uint64_t v13 = (void *)((char *)v88 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  MEMORY[0x1895F8858](v11);
  BOOL v15 = (char *)v88 - v14;
  uint64_t v93 = type metadata accessor for KTraceRecordError();
  MEMORY[0x1895F8858](v93);
  uint64_t v92 = (char *)v88 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = j_nullsub_1(a2);
  v103.uint64_t Kind = v17;
  sub_186C3A7B8();
  uint64_t v18 = &type metadata for NullTerminatedCStringArray;
  uint64_t v19 = sub_186C5AEAC();
  *(void *)&__int128 v102 = MEMORY[0x18961AFE8];
  sub_186BEF8C8(0LL, v19 & ~(v19 >> 63), 0);
  uint64_t v20 = v102;
  uint64_t v101 = v17;
  sub_186C5AEA0();
  if (v19 < 0)
  {
    __break(1u);
LABEL_41:
    swift_once();
LABEL_32:
    uint64_t v61 = sub_186C5ABB8();
    __swift_project_value_buffer(v61, (uint64_t)qword_18C6A9A20);
    int64_t v62 = v7;
    int64_t v63 = v7;
    uint64_t v64 = (os_log_s *)sub_186C5ABA0();
    os_log_type_t v65 = sub_186C5AFC0();
    if (os_log_type_enabled(v64, v65))
    {
      uint64_t v66 = (uint8_t *)swift_slowAlloc();
      uint64_t v67 = swift_slowAlloc();
      uint64_t v98 = v18;
      uint64_t v68 = v67;
      uint64_t v101 = v67;
      *(_DWORD *)uint64_t v66 = 136315138;
      swift_getErrorValue();
      uint64_t v69 = sub_186C5B53C();
      uint64_t v99 = sub_186BF7C38(v69, v70, &v101);
      sub_186C5B0EC();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_186BA3000, v64, v65, "recording failed: %s", v66, 0xCu);
      swift_arrayDestroy();
      uint64_t v71 = v68;
      uint64_t v18 = v98;
      MEMORY[0x186E466F0](v71, -1LL, -1LL);
      MEMORY[0x186E466F0](v66, -1LL, -1LL);
    }

    else
    {
    }

    sub_186C36234(v18, v97, (uint64_t *)&v100);
    swift_release();
    swift_release();
    uint64_t v72 = 71LL;
    goto LABEL_36;
  }

  uint64_t v89 = v13;
  v88[0] = v7;
  uint64_t v94 = v15;
  if (v19)
  {
    sub_186C2C458();
    do
    {
      sub_186C5B0E0();
      if (!v101) {
        __break(1u);
      }
      uint64_t v21 = sub_186C5ADE0();
      uint64_t v23 = v22;
      *(void *)&__int128 v102 = v20;
      unint64_t v25 = *(void *)(v20 + 16);
      unint64_t v24 = *(void *)(v20 + 24);
      if (v25 >= v24 >> 1)
      {
        sub_186BEF8C8((char *)(v24 > 1), v25 + 1, 1);
        uint64_t v20 = v102;
      }

      *(void *)(v20 + 16) = v25 + 1;
      uint64_t v26 = v20 + 16 * v25;
      *(void *)(v26 + 32) = v21;
      *(void *)(v26 + 40) = v23;
      --v19;
    }

    while (v19);
  }

  sub_186C2C458();
  sub_186C5B0E0();
  while (v101)
  {
    uint64_t v27 = sub_186C5ADE0();
    uint64_t v29 = v28;
    *(void *)&__int128 v102 = v20;
    unint64_t v31 = *(void *)(v20 + 16);
    unint64_t v30 = *(void *)(v20 + 24);
    if (v31 >= v30 >> 1)
    {
      sub_186BEF8C8((char *)(v30 > 1), v31 + 1, 1);
      uint64_t v20 = v102;
    }

    *(void *)(v20 + 16) = v31 + 1;
    uint64_t v32 = v20 + 16 * v31;
    *(void *)(v32 + 32) = v27;
    *(void *)(v32 + 40) = v29;
    sub_186C5B0E0();
  }

  uint64_t v33 = *(void *)(v20 + 16);
  uint64_t v34 = v33 != 0;
  int64_t v35 = v98;
  uint64_t Kind = v98[2].Kind;
  if (Kind)
  {
    uint64_t v37 = (FILE *)nullsub_1(Kind);
    uint64_t v96 = sub_186C28A10(v37);
  }

  else
  {
    uint64_t v96 = 0LL;
  }

  type metadata accessor for RecordInfo();
  uint64_t v38 = (ValueMetadata *)sub_186C096D4();
  __int128 v100 = xmmword_186C61000;
  if (!getenv("TRACE_NO_ANALYTICS")) {
    goto LABEL_19;
  }
  if (sub_186C5ADE0() == 48 && v39 == 0xE100000000000000LL)
  {
    swift_bridgeObjectRelease();
LABEL_19:
    int v40 = 1;
    goto LABEL_21;
  }

  int v40 = sub_186C5B4F4();
  swift_bridgeObjectRelease();
LABEL_21:
  int v97 = os_variant_has_internal_content() & v40;
  if (v33 <= v34)
  {
    ValueMetadata v51 = v35[1];
    ValueMetadata v103 = *v35;
    ValueMetadata v104 = v51;
    ValueMetadata v105 = v35[2];
    uint64_t v106 = v35[3].Kind;
    uint64_t v52 = (uint64_t)v92;
    swift_storeEnumTagMultiPayload();
    sub_186C3A7FC((uint64_t)&v103);
    sub_186BFCB04( (unint64_t *)&qword_18C6A21E0,  (uint64_t (*)(uint64_t))type metadata accessor for KTraceRecordError,  (uint64_t)&unk_186C60EF4);
    uint64_t v53 = v38;
    uint64_t v54 = sub_186C5B53C();
    unint64_t v56 = v55;
    sub_186C392F4(v52, (uint64_t (*)(void))type metadata accessor for KTraceRecordError);
    uint64_t v57 = v54;
    uint64_t v18 = v53;
    sub_186C3605C(8, v57, v56);
    swift_bridgeObjectRelease();
    sub_186C3A8AC((uint64_t)&v103);
    BOOL v7 = (char *)swift_allocError();
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
    if (v96)
    {
      uint64_t v101 = (uint64_t)v96;
      __swift_instantiateConcreteTypeFromMangledName(&qword_18C6A2318);
      uint64_t v47 = swift_allocObject();
      *(_OWORD *)(v47 + 16) = xmmword_186C5E4F0;
      swift_getErrorValue();
      uint64_t v48 = v7;
      uint64_t v49 = sub_186C5B53C();
      *(void *)(v47 + 56) = MEMORY[0x189617FA8];
      *(void *)(v47 + 32) = v49;
      *(void *)(v47 + 40) = v50;
      sub_186BFB7C8();
      sub_186C5B578();
      swift_bridgeObjectRelease();
    }

    else
    {
      uint64_t v58 = v7;
    }

    int64_t v59 = *(void (**)(char *))(v18->Kind + 376);
    uint64_t v60 = v7;
    v59(v7);
    if (qword_18C6A8580 == -1) {
      goto LABEL_32;
    }
    goto LABEL_41;
  }

  ValueMetadata v41 = v35[1];
  ValueMetadata v103 = *v35;
  ValueMetadata v104 = v41;
  ValueMetadata v105 = v35[2];
  uint64_t v106 = v35[3].Kind;
  swift_retain_n();
  sub_186C3A7FC((uint64_t)&v103);
  sub_186C5B500();
  swift_retain();
  uint64_t v42 = swift_dynamicCastClass();
  if (!v42)
  {
    swift_release();
    uint64_t v42 = MEMORY[0x18961AFE8];
  }

  uint64_t v43 = *(void *)(v42 + 16);
  swift_release();
  if (v43 == v33 - v34)
  {
    uint64_t v44 = swift_dynamicCastClass();
    uint64_t v45 = (uint64_t)v94;
    if (!v44)
    {
      swift_release();
      uint64_t v44 = MEMORY[0x18961AFE8];
    }
  }

  else
  {
    swift_release();
    uint64_t v44 = sub_186C38A24(v20, v20 + 32, v33 != 0, (2 * v33) | 1);
    uint64_t v45 = (uint64_t)v94;
  }

  swift_release();
  uint64_t v46 = v95;
  sub_186C4BBB8((uint64_t)&v103, v44, v95);
  int v74 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v90 + 48))(v46, 1LL, v91);
  if (v74 == 1)
  {
    sub_186BFCA44(v46, &qword_18C6A2B98);
    sub_186C36234(v38, v97, (uint64_t *)&v100);
    swift_release();
    swift_release();
    uint64_t v72 = 0LL;
  }

  else
  {
    sub_186C3A824(v46, v45, type metadata accessor for RecordingOptions);
    uint64_t v75 = v89;
    sub_186C3A868(v45, (uint64_t)v89, type metadata accessor for RecordingOptions);
    type metadata accessor for Recording();
    uint64_t v76 = swift_allocObject();
    swift_retain();
    sub_186C30874((char *)v35, v75, (uint64_t)v38);
    __int128 v77 = *(uint64_t (**)(uint64_t, void, void, void, uint64_t))(v38->Kind + 256);
    swift_retain();
    uint64_t v78 = v77(0LL, 0LL, 0LL, 0LL, 1LL);
    (*(void (**)(uint64_t))(*(void *)v76 + 376LL))(v78);
    uint64_t v79 = v77(1LL, 0LL, 0LL, 0LL, 1LL);
    (*(void (**)(uint64_t))(*(void *)v76 + 384LL))(v79);
    uint64_t v80 = v77(2LL, 0LL, 0LL, 0LL, 1LL);
    (*(void (**)(uint64_t))(*(void *)v76 + 392LL))(v80);
    uint64_t v81 = v77(3LL, 0LL, 0LL, 0LL, 1LL);
    (*(void (**)(uint64_t))(*(void *)v76 + 400LL))(v81);
    uint64_t v82 = v38;
    char v83 = (*(uint64_t (**)(ValueMetadata *))(*(void *)v76 + 408LL))(v38);
    uint64_t v85 = v84;
    uint64_t v87 = v86;
    swift_release_n();
    *(void *)&__int128 v100 = v85;
    *((void *)&v100 + 1) = v87;
    if ((v83 & 1) != 0) {
      uint64_t v72 = 0LL;
    }
    else {
      uint64_t v72 = 75LL;
    }
    sub_186C392F4(v45, type metadata accessor for RecordingOptions);
    sub_186C36234(v82, v97, (uint64_t *)&v100);
    swift_release();
    swift_release();
  }

uint64_t sub_186C3A4A4()
{
  return type metadata accessor for Recording();
}

void sub_186C3A4AC()
{
  if (v0 <= 0x3F)
  {
    sub_186C3A5D4();
    if (v1 <= 0x3F)
    {
      type metadata accessor for RecordingOptions.Options(319LL);
      if (v2 <= 0x3F) {
        swift_updateClassMetadata2();
      }
    }
  }

void sub_186C3A5D4()
{
  if (!qword_18C6A1DE0)
  {
    sub_186C5AA8C();
    unint64_t v0 = sub_186C5B080();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_18C6A1DE0);
    }
  }

uint64_t type metadata accessor for Recording.Diagnostics()
{
  return objc_opt_self();
}

__n128 __swift_memcpy56_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  __int128 v4 = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t sub_186C3A664(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 56)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 40);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t sub_186C3A6C0(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 56) = 1;
    }
  }

  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 56) = 0;
    }
    if (a2) {
      *(void *)(result + 40) = a2;
    }
  }

  return result;
}

void type metadata accessor for ktrace_recording(uint64_t a1)
{
}

uint64_t sub_186C3A734()
{
  return sub_186BFCB04( &qword_18C6A2B78,  (uint64_t (*)(uint64_t))type metadata accessor for FileAttributeKey,  (uint64_t)&unk_186C61158);
}

uint64_t sub_186C3A760()
{
  return sub_186BFCB04( &qword_18C6A2B80,  (uint64_t (*)(uint64_t))type metadata accessor for FileAttributeKey,  (uint64_t)&unk_186C6112C);
}

uint64_t sub_186C3A78C()
{
  return sub_186BFCB04( &qword_18C6A2B88,  (uint64_t (*)(uint64_t))type metadata accessor for FileAttributeKey,  (uint64_t)&unk_186C611C8);
}

unint64_t sub_186C3A7B8()
{
  unint64_t result = qword_18C6A2BA0;
  if (!qword_18C6A2BA0)
  {
    unint64_t result = MEMORY[0x186E46630](&unk_186C60B6C, &type metadata for NullTerminatedCStringArray);
    atomic_store(result, (unint64_t *)&qword_18C6A2BA0);
  }

  return result;
}

uint64_t sub_186C3A7FC(uint64_t a1)
{
  return a1;
}

uint64_t sub_186C3A824(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32LL))(a2, a1, v5);
  return a2;
}

uint64_t sub_186C3A868(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16LL))(a2, a1, v5);
  return a2;
}

uint64_t sub_186C3A8AC(uint64_t a1)
{
  return a1;
}

uint64_t sub_186C3A8D4()
{
  return swift_deallocObject();
}

uint64_t sub_186C3A8F8()
{
  uint64_t v0 = (void *)objc_opt_self();
  uint64_t v1 = (void *)sub_186C5AAD4();
  *(void *)&v10[0] = 0LL;
  id v2 = objc_msgSend(v0, sel_JSONObjectWithData_options_error_, v1, 0, v10);

  id v3 = *(id *)&v10[0];
  if (v2)
  {
    sub_186C5B1DC();
    swift_unknownObjectRelease();
  }

  else
  {
    int v4 = v3;
    uint64_t v5 = (void *)sub_186C5A9CC();

    swift_willThrow();
    memset(v10, 0, sizeof(v10));
  }

  sub_186BFA418((uint64_t)v10, (uint64_t)v8, &qword_18C6A2350);
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_18C6A2BB0);
    else {
      return 0LL;
    }
  }

  else
  {
    sub_186BFCA44((uint64_t)v8, &qword_18C6A2350);
    return 0LL;
  }

uint64_t sub_186C3AA2C(uint64_t a1, unint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2)
  {
    objc_opt_self();
    uint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, a2);
  }

  return result;
}

unint64_t sub_186C3AA64()
{
  unint64_t result = qword_18C6A2BB8;
  if (!qword_18C6A2BB8)
  {
    unint64_t result = MEMORY[0x186E46630](MEMORY[0x18961A8F0], MEMORY[0x18961A8C8]);
    atomic_store(result, (unint64_t *)&qword_18C6A2BB8);
  }

  return result;
}

unint64_t sub_186C3AAA8()
{
  unint64_t result = qword_18C6A2BC8;
  if (!qword_18C6A2BC8)
  {
    unint64_t result = MEMORY[0x186E46630](MEMORY[0x18961A4F0], MEMORY[0x18961A4C0]);
    atomic_store(result, (unint64_t *)&qword_18C6A2BC8);
  }

  return result;
}

uint64_t sub_186C3AAEC(uint64_t a1)
{
  uint64_t v5 = a1;
  uint64_t v2 = *(void *)(v1 + 24);
  int v4 = *(_DWORD *)(v1 + 16);
  return (*(uint64_t (**)(uint64_t, int *))(v2 + 16))(v2, &v4);
}

uint64_t sub_186C3AB30()
{
  return swift_deallocObject();
}

uint64_t sub_186C3AB64(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v3 = v1[3];
  uint64_t v5 = v1[4];
  uint64_t result = swift_beginAccess();
  uint64_t v7 = *(void *)(v4 + 16);
  BOOL v8 = __CFADD__(v7, 1LL);
  uint64_t v9 = v7 + 1;
  if (v8)
  {
    __break(1u);
    goto LABEL_10;
  }

  *(void *)(v4 + 16) = v9;
  uint64_t v10 = ktrace_chunk_size(a1);
  uint64_t result = swift_beginAccess();
  if (__CFADD__(*(void *)(v3 + 16), v10))
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }

  *(void *)(v3 + 16) += v10;
  int v11 = ktrace_chunk_tag(a1);
  if (v11 != 7680 && v11 != 20982 && v11 != 7936) {
    return 1LL;
  }
  uint64_t v12 = ktrace_chunk_size(a1);
  uint64_t result = swift_beginAccess();
  if (!__CFADD__(*(void *)(v5 + 16), v12))
  {
    *(void *)(v5 + 16) += v12;
    return 1LL;
  }

uint64_t sub_186C3AC6C()
{
  return swift_deallocObject();
}

uint64_t sub_186C3AC90(uint64_t result)
{
  if (result)
  {
    uint64_t v2 = *(void *)(v1 + 24);
    if (v2)
    {
      unint64_t v3 = result;
      uint64_t v4 = (uint64_t (*)(_BYTE *, void))(*(uint64_t (**)(_BYTE *))(**(void **)(v1 + 16) + 360LL))(v5);
      sub_186C3F0C0(v3, v2);
      return v4(v5, 0LL);
    }
  }

  else
  {
    __break(1u);
  }

  __break(1u);
  return result;
}

void type metadata accessor for ktrace_record_flags_t(uint64_t a1)
{
}

uint64_t sub_186C3AD18(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 != 1 && *(_BYTE *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 2);
  }
  if (*(void *)(a1 + 8)) {
    int v3 = -1;
  }
  else {
    int v3 = 0;
  }
  return (v3 + 1);
}

uint64_t sub_186C3AD5C(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 1)
  {
    *(void *)uint64_t result = a2 - 2;
    *(void *)(result + 8) = 0LL;
    if (a3 >= 2) {
      *(_BYTE *)(result + 16) = 1;
    }
  }

  else
  {
    if (a3 >= 2) {
      *(_BYTE *)(result + 16) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = 0LL;
    }
  }

  return result;
}

void type metadata accessor for ktrace_record_notify(uint64_t a1)
{
}

uint64_t sub_186C3ADAC()
{
  return sub_186BFCB04( &qword_18C6A2C00,  (uint64_t (*)(uint64_t))type metadata accessor for ktrace_record_flags_t,  (uint64_t)&unk_186C61344);
}

uint64_t sub_186C3ADD8()
{
  return sub_186BFCB04( &qword_18C6A2C08,  (uint64_t (*)(uint64_t))type metadata accessor for ktrace_record_flags_t,  (uint64_t)&unk_186C61310);
}

uint64_t sub_186C3AE04()
{
  return sub_186BFCB04( &qword_18C6A2C10,  (uint64_t (*)(uint64_t))type metadata accessor for ktrace_record_flags_t,  (uint64_t)&unk_186C61370);
}

uint64_t sub_186C3AE30()
{
  return sub_186BFCB04( &qword_18C6A2C18,  (uint64_t (*)(uint64_t))type metadata accessor for ktrace_record_flags_t,  (uint64_t)&unk_186C613AC);
}

void type metadata accessor for ktrace_record_note_t(uint64_t a1)
{
}

unint64_t sub_186C3AEE4()
{
  unint64_t result = sub_186C3B6D0((uint64_t)&unk_189F5AAC0);
  qword_18C6A9A38 = result;
  return result;
}

uint64_t sub_186C3AF08(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 184);
  if (v1 && *(void *)(v1 + 16))
  {
    sub_186C5B260();
    sub_186C5ADD4();
    sub_186C5B4DC();
    sub_186C5ADD4();
    swift_bridgeObjectRelease();
    sub_186C5ADD4();
    sub_186C5ADD4();
    swift_bridgeObjectRelease();
  }

  uint64_t v2 = sub_186C12A78();
  uint64_t v3 = sub_186C3B204((uint64_t)v2);
  swift_bridgeObjectRelease();
  if (*(void *)(v3 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_18C6A21A8);
    sub_186BF0620();
    sub_186C5ACD8();
    swift_bridgeObjectRelease();
    sub_186C5B260();
    sub_186C5ADD4();
    sub_186C5ADD4();
    swift_bridgeObjectRelease();
    sub_186C5ADD4();
    sub_186C5ADD4();
  }

  swift_bridgeObjectRelease();
  sub_186C5B260();
  sub_186C5ADD4();
  sub_186C5ADD4();
  swift_bridgeObjectRelease();
  return 0LL;
}

uint64_t sub_186C3B204(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return MEMORY[0x18961AFE8];
  }
  uint64_t v2 = a1 + 32;
  uint64_t v3 = swift_bridgeObjectRetain();
  __int128 v4 = *(_OWORD *)(v3 + 208);
  __int128 v55 = *(_OWORD *)(v3 + 192);
  __int128 v56 = v4;
  __int128 v57 = *(_OWORD *)(v3 + 224);
  uint64_t v58 = *(void *)(v3 + 240);
  __int128 v5 = *(_OWORD *)(v3 + 144);
  __int128 v51 = *(_OWORD *)(v3 + 128);
  __int128 v52 = v5;
  __int128 v6 = *(_OWORD *)(v3 + 176);
  __int128 v53 = *(_OWORD *)(v3 + 160);
  __int128 v54 = v6;
  __int128 v7 = *(_OWORD *)(v3 + 80);
  __int128 v47 = *(_OWORD *)(v3 + 64);
  __int128 v48 = v7;
  __int128 v8 = *(_OWORD *)(v3 + 112);
  __int128 v49 = *(_OWORD *)(v3 + 96);
  __int128 v50 = v8;
  __int128 v9 = *(_OWORD *)(v3 + 48);
  __int128 v45 = *(_OWORD *)(v3 + 32);
  __int128 v46 = v9;
  uint64_t v10 = (char *)MEMORY[0x18961AFE8];
  uint64_t v11 = 1LL;
  uint64_t v35 = v2;
  uint64_t v36 = v1;
  while (1)
  {
    __int128 v43 = v45;
    *(_OWORD *)&v60[144] = v56;
    *(_OWORD *)&v60[160] = v57;
    *(void *)&v60[176] = v58;
    *(_OWORD *)&v60[80] = v52;
    *(_OWORD *)&v60[96] = v53;
    *(_OWORD *)&v60[112] = v54;
    *(_OWORD *)&v60[128] = v55;
    *(_OWORD *)&v60[16] = v48;
    *(_OWORD *)&v60[32] = v49;
    *(_OWORD *)&v60[48] = v50;
    *(_OWORD *)&v60[64] = v51;
    __int128 v59 = v46;
    *(_OWORD *)uint64_t v60 = v47;
    sub_186C3C7A0((uint64_t)&v45);
    __int128 v74 = *(_OWORD *)&v60[136];
    __int128 v75 = *(_OWORD *)&v60[152];
    __int128 v76 = *(_OWORD *)&v60[168];
    v71[0] = *(_OWORD *)&v60[72];
    v71[1] = *(_OWORD *)&v60[88];
    __int128 v72 = *(_OWORD *)&v60[104];
    __int128 v73 = *(_OWORD *)&v60[120];
    __int128 v67 = *(_OWORD *)&v60[8];
    __int128 v68 = *(_OWORD *)&v60[24];
    __int128 v69 = *(_OWORD *)&v60[40];
    __int128 v70 = *(_OWORD *)&v60[56];
    sub_186C3EF68((uint64_t)v71, (uint64_t)v77);
    sub_186C3EF68((uint64_t)v77, (uint64_t)&v78);
    if (v78)
    {
      if ((void)v72)
      {
        uint64_t v12 = *(void *)(v72 + 16);
        if (v12) {
          break;
        }
      }
    }

uint64_t sub_186C3B6AC@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_186C3AF08(a1);
  *a2 = result;
  a2[1] = v4;
  return result;
}

unint64_t sub_186C3B6D0(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = (void *)MEMORY[0x18961AFF0];
    goto LABEL_9;
  }

  __swift_instantiateConcreteTypeFromMangledName(&qword_18C6A2CD0);
  uint64_t v2 = (void *)sub_186C5B38C();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }

  swift_retain();
  uint64_t v4 = (__int128 *)(a1 + 40);
  while (1)
  {
    uint64_t v5 = *((unsigned __int8 *)v4 - 8);
    __int128 v11 = *v4;
    swift_retain();
    unint64_t result = sub_186C3C430(v5);
    if ((v7 & 1) != 0) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL) + 64) |= 1LL << result;
    *(_BYTE *)(v2[6] + result) = v5;
    *(_OWORD *)(v2[7] + 16 * result) = v11;
    uint64_t v8 = v2[2];
    BOOL v9 = __OFADD__(v8, 1LL);
    uint64_t v10 = v8 + 1;
    if (v9) {
      goto LABEL_11;
    }
    void v2[2] = v10;
    uint64_t v4 = (__int128 *)((char *)v4 + 24);
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }

  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t type metadata accessor for KdebugAdvice()
{
  uint64_t result = qword_18C6A8B98;
  if (!qword_18C6A8B98) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_186C3B81C()
{
  void (*v16)(void *__return_ptr, void *);
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  unint64_t v35;
  unint64_t v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  char *v50;
  unsigned __int16 v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  double v64;
  uint64_t result;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  unint64_t v70;
  const void *v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t *v75;
  uint64_t *v76;
  uint64_t v77;
  void v78[2];
  void v79[44];
  _OWORD v80[21];
  uint64_t v81;
  unint64_t v82;
  uint64_t v1 = type metadata accessor for KdebugAdvice();
  MEMORY[0x1895F8858](v1);
  uint64_t v3 = (char *)&v66 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __int128 v75 = v0;
  uint64_t v4 = *v0;
  swift_bridgeObjectRetain_n();
  uint64_t v5 = sub_186C3C6BC(v4);
  swift_bridgeObjectRelease();
  *(void *)&v80[0] = v5;
  sub_186C3C654((char **)v80);
  swift_bridgeObjectRelease();
  if (*(void *)(*(void *)&v80[0] + 16LL) < 3uLL)
  {
    __break(1u);
    goto LABEL_42;
  }

  char v66 = 0LL;
  __int128 v67 = v1;
  __int128 v68 = v3;
  __int128 v69 = *(void *)&v80[0];
  uint64_t v81 = 0LL;
  uint64_t v82 = 0xE000000000000000LL;
  uint64_t v71 = v75 + 2;
  __int128 v72 = *(void *)&v80[0] + 32LL;
  swift_retain();
  uint64_t v6 = 0LL;
  char v7 = (char *)MEMORY[0x18961AFE8];
  __int128 v70 = 0x8000000186C67560LL;
  do
  {
    __int128 v77 = v6;
    uint64_t v8 = (unsigned __int16 *)(v72 + 16 * v6);
    uint64_t v9 = *v8;
    uint64_t v10 = *((void *)v8 + 1);
    uint64_t v11 = sub_186BEA588(*v8);
    if (v11 != 150)
    {
      uint64_t v12 = v11;
      if (qword_18C6A8B90 != -1) {
        swift_once();
      }
      uint64_t v13 = qword_18C6A9A38;
      if (*(void *)(qword_18C6A9A38 + 16))
      {
        unint64_t v14 = sub_186C3C430(v12);
        if ((v15 & 1) != 0)
        {
          uint64_t v16 = *(void (**)(void *__return_ptr, void *))(*(void *)(v13 + 56) + 16 * v14);
          LOBYTE(v80[0]) = v12;
          swift_retain();
          uint64_t v17 = sub_186C5AD5C();
          sub_186C03500(v17, v18, v10, v4, v75[1]);
          swift_bridgeObjectRelease();
          *(void *)&v80[0] = 8237LL;
          *((void *)&v80[0] + 1) = 0xE200000000000000LL;
          sub_186C5ADD4();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRetain();
          sub_186C5ADD4();
          swift_bridgeObjectRelease();
          sub_186C5ADD4();
          swift_bridgeObjectRelease();
          memcpy(v80, v71, 0x141uLL);
          memcpy(v79, v71, 0x141uLL);
          sub_186C23978((uint64_t)v80);
          v16(v78, v79);
          swift_release();
          sub_186C23A98((uint64_t)v80);
          v79[0] = v78[0];
          v79[1] = v78[1];
          swift_bridgeObjectRetain();
          sub_186C5ADD4();
          swift_bridgeObjectRelease();
LABEL_31:
          sub_186C5ADD4();
          goto LABEL_3;
        }
      }
    }

    memcpy(v80, v71, 0x141uLL);
    uint64_t v19 = sub_186C12A78();
    uint64_t v20 = v19;
    __int128 v76 = &v66;
    uint64_t v21 = v19[2];
    if (v21)
    {
      __int128 v73 = v10;
      __int128 v74 = v7;
      char v22 = *((_OWORD *)v19 + 13);
      v80[10] = *((_OWORD *)v19 + 12);
      v80[11] = v22;
      v80[12] = *((_OWORD *)v19 + 14);
      *(void *)&v80[13] = v19[30];
      uint64_t v23 = *((_OWORD *)v19 + 9);
      v80[6] = *((_OWORD *)v19 + 8);
      v80[7] = v23;
      char v24 = *((_OWORD *)v19 + 11);
      v80[8] = *((_OWORD *)v19 + 10);
      v80[9] = v24;
      char v25 = *((_OWORD *)v19 + 5);
      v80[2] = *((_OWORD *)v19 + 4);
      v80[3] = v25;
      unint64_t v26 = *((_OWORD *)v19 + 7);
      v80[4] = *((_OWORD *)v19 + 6);
      v80[5] = v26;
      unint64_t v27 = *((_OWORD *)v19 + 3);
      v80[0] = *((_OWORD *)v19 + 2);
      v80[1] = v27;
      uint64_t v28 = v21 - 1;
      __int128 v29 = 31LL;
      __int128 v30 = (char *)MEMORY[0x18961AFE8];
      while (1)
      {
        __int128 v31 = v80[0];
        __int128 v32 = *((void *)&v80[12] + 1);
        __int128 v33 = *(void *)&v80[13];
        sub_186C3C7A0((uint64_t)v80);
        sub_186BEDEB4(v9 | 0x10000, v32, v33);
        if ((v34 & 1) != 0)
        {
          swift_bridgeObjectRetain();
          sub_186C27ED0((uint64_t)v80);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            __int128 v30 = sub_186C01C3C(0LL, *((void *)v30 + 2) + 1LL, 1, v30);
          }
          uint64_t v36 = *((void *)v30 + 2);
          uint64_t v35 = *((void *)v30 + 3);
          if (v36 >= v35 >> 1) {
            __int128 v30 = sub_186C01C3C((char *)(v35 > 1), v36 + 1, 1, v30);
          }
          *((void *)v30 + 2) = v36 + 1;
          *(_OWORD *)&v30[16 * v36 + 32] = v31;
          if (!v28)
          {
LABEL_21:
            swift_bridgeObjectRelease();
            uint64_t v10 = v73;
            char v7 = v74;
            goto LABEL_23;
          }
        }

        else
        {
          sub_186C27ED0((uint64_t)v80);
          if (!v28) {
            goto LABEL_21;
          }
        }

        uint64_t v37 = *(_OWORD *)&v20[v29 + 2];
        v80[0] = *(_OWORD *)&v20[v29];
        v80[1] = v37;
        uint64_t v38 = *(_OWORD *)&v20[v29 + 4];
        uint64_t v39 = *(_OWORD *)&v20[v29 + 6];
        uint64_t v40 = *(_OWORD *)&v20[v29 + 10];
        v80[4] = *(_OWORD *)&v20[v29 + 8];
        v80[5] = v40;
        v80[2] = v38;
        v80[3] = v39;
        ValueMetadata v41 = *(_OWORD *)&v20[v29 + 12];
        uint64_t v42 = *(_OWORD *)&v20[v29 + 14];
        __int128 v43 = *(_OWORD *)&v20[v29 + 18];
        v80[8] = *(_OWORD *)&v20[v29 + 16];
        v80[9] = v43;
        v80[6] = v41;
        v80[7] = v42;
        uint64_t v44 = *(_OWORD *)&v20[v29 + 20];
        __int128 v45 = *(_OWORD *)&v20[v29 + 22];
        __int128 v46 = *(_OWORD *)&v20[v29 + 24];
        *(void *)&v80[13] = v20[v29 + 26];
        v80[11] = v45;
        v80[12] = v46;
        v80[10] = v44;
        v29 += 27LL;
        --v28;
      }
    }

    swift_bridgeObjectRelease();
    __int128 v30 = (char *)MEMORY[0x18961AFE8];
LABEL_23:
    if (!*((void *)v30 + 2))
    {
      __int128 v47 = v10;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        char v7 = sub_186C3C55C(0LL, *((void *)v7 + 2) + 1LL, 1, v7);
      }
      __int128 v49 = *((void *)v7 + 2);
      __int128 v48 = *((void *)v7 + 3);
      if (v49 >= v48 >> 1) {
        char v7 = sub_186C3C55C((char *)(v48 > 1), v49 + 1, 1, v7);
      }
      *((void *)v7 + 2) = v49 + 1;
      __int128 v50 = &v7[16 * v49];
      *((_WORD *)v50 + 16) = v9;
      uint64_t v10 = v47;
      *((void *)v50 + 5) = v47;
    }

    __int128 v51 = nullsub_1(v9);
    __int128 v52 = sub_186BEC548(v51);
    *(void *)&v80[0] = 8237LL;
    *((void *)&v80[0] + 1) = 0xE200000000000000LL;
    uint64_t v4 = *v75;
    sub_186C03500(v52, v53, v10, *v75, v75[1]);
    swift_bridgeObjectRelease();
    sub_186C5ADD4();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    sub_186C5ADD4();
    swift_bridgeObjectRelease();
    sub_186C5ADD4();
    swift_bridgeObjectRelease();
    if (*((void *)v30 + 2))
    {
      *(void *)&v80[0] = 0LL;
      *((void *)&v80[0] + 1) = 0xE000000000000000LL;
      sub_186C5B260();
      swift_bridgeObjectRelease();
      *(void *)&v80[0] = 0xD000000000000017LL;
      *((void *)&v80[0] + 1) = v70;
      v79[0] = v30;
      __swift_instantiateConcreteTypeFromMangledName(&qword_18C6A21A8);
      sub_186BF0620();
      sub_186C5ACD8();
      swift_bridgeObjectRelease();
      sub_186C5ADD4();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      sub_186C5ADD4();
      swift_bridgeObjectRelease();
      goto LABEL_31;
    }

LABEL_3:
    swift_bridgeObjectRelease();
    uint64_t v6 = v77 + 1;
  }

  while (v77 != 2);
  swift_release();
  if (*((void *)v7 + 2))
  {
    __int128 v54 = swift_bridgeObjectRetain();
    __int128 v55 = sub_186C3C1BC(v54);
    swift_bridgeObjectRelease();
    *(void *)&v80[0] = 0LL;
    *((void *)&v80[0] + 1) = 0xE000000000000000LL;
    sub_186C5B260();
    swift_bridgeObjectRelease();
    *(void *)&v80[0] = 8237LL;
    *((void *)&v80[0] + 1) = 0xE200000000000000LL;
    v79[0] = v55;
    __swift_instantiateConcreteTypeFromMangledName(&qword_18C6A21A8);
    sub_186BF0620();
    sub_186C5ACD8();
    swift_bridgeObjectRelease();
    sub_186C5ADD4();
    swift_bridgeObjectRelease();
    sub_186C5ADD4();
    sub_186C5ADD4();
    swift_bridgeObjectRelease();
    if ((sub_186C2ABD0() & 1) != 0)
    {
      __int128 v56 = swift_bridgeObjectRetain();
      __int128 v57 = sub_186C3C294(v56);
      swift_bridgeObjectRelease();
      *(void *)&v80[0] = 0LL;
      *((void *)&v80[0] + 1) = 0xE000000000000000LL;
      sub_186C5B260();
      sub_186C5ADD4();
      v79[0] = v57;
      sub_186C5ACD8();
      swift_bridgeObjectRelease();
      sub_186C5ADD4();
      swift_bridgeObjectRelease();
      sub_186C5ADD4();
      sub_186C5ADD4();
      swift_bridgeObjectRelease();
    }
  }

  uint64_t v58 = (uint64_t)v75;
  __int128 v59 = (char *)v75 + *(int *)(v67 + 24);
  uint64_t v60 = &v59[*(int *)(type metadata accessor for RecordingOptions.Options(0LL) + 84)];
  uint64_t v61 = *(void *)v60;
  LOBYTE(v59) = v60[8];
  uint64_t v62 = (uint64_t)v68;
  sub_186C3A868(v58, (uint64_t)v68, (uint64_t (*)(void))type metadata accessor for KdebugAdvice);
  if ((v59 & 1) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_39:
    sub_186C3C85C(v62);
    *(void *)&v80[0] = 0LL;
    *((void *)&v80[0] + 1) = 0xE000000000000000LL;
    sub_186C5B260();
    sub_186C5ADD4();
    if (!__OFADD__(v61, v61 / 4))
    {
      v79[0] = v61 + v61 / 4;
      sub_186C5B4DC();
      sub_186C5ADD4();
      swift_bridgeObjectRelease();
      sub_186C5ADD4();
      sub_186C5ADD4();
      swift_bridgeObjectRelease();
      swift_release();
      return v81;
    }

uint64_t sub_186C3C1BC(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = MEMORY[0x18961AFE8];
  if (v1)
  {
    uint64_t v14 = MEMORY[0x18961AFE8];
    sub_186BEF8C8(0LL, v1, 0);
    uint64_t v2 = v14;
    uint64_t v4 = (unsigned __int16 *)(a1 + 32);
    do
    {
      unsigned int v5 = *v4;
      v4 += 8;
      unsigned __int16 v6 = nullsub_1(v5);
      uint64_t v7 = sub_186BEC548(v6);
      uint64_t v9 = v8;
      unint64_t v11 = *(void *)(v14 + 16);
      unint64_t v10 = *(void *)(v14 + 24);
      if (v11 >= v10 >> 1) {
        sub_186BEF8C8((char *)(v10 > 1), v11 + 1, 1);
      }
      *(void *)(v14 + 16) = v11 + 1;
      uint64_t v12 = v14 + 16 * v11;
      *(void *)(v12 + 32) = v7;
      *(void *)(v12 + 40) = v9;
      --v1;
    }

    while (v1);
  }

  return v2;
}

uint64_t sub_186C3C294(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = MEMORY[0x18961AFE8];
  if (v1)
  {
    uint64_t v12 = MEMORY[0x18961AFE8];
    sub_186BEF8C8(0LL, v1, 0);
    uint64_t v2 = v12;
    uint64_t v4 = (__int16 *)(a1 + 32);
    uint64_t v5 = MEMORY[0x18961A840];
    do
    {
      __int16 v6 = *v4;
      v4 += 8;
      __swift_instantiateConcreteTypeFromMangledName(&qword_18C6A2190);
      uint64_t v7 = swift_allocObject();
      *(_OWORD *)(v7 + 16) = xmmword_186C5E4F0;
      *(void *)(v7 + 56) = MEMORY[0x18961A800];
      *(void *)(v7 + 64) = v5;
      *(_WORD *)(v7 + 32) = v6;
      sub_186C5AD38();
      sub_186C5ADD4();
      swift_bridgeObjectRelease();
      unint64_t v9 = *(void *)(v12 + 16);
      unint64_t v8 = *(void *)(v12 + 24);
      if (v9 >= v8 >> 1) {
        sub_186BEF8C8((char *)(v8 > 1), v9 + 1, 1);
      }
      *(void *)(v12 + 16) = v9 + 1;
      uint64_t v10 = v12 + 16 * v9;
      *(void *)(v10 + 32) = 7876691LL;
      *(void *)(v10 + 40) = 0xE300000000000000LL;
      --v1;
    }

    while (v1);
  }

  return v2;
}

uint64_t sub_186C3C3E8@<X0>( void *__src@<X2>, uint64_t a2@<X0>, uint64_t a3@<X1>, uint64_t a4@<X3>, void *a5@<X8>)
{
  *a5 = a2;
  a5[1] = a3;
  memcpy(a5 + 2, __src, 0x141uLL);
  uint64_t v7 = (uint64_t)a5 + *(int *)(type metadata accessor for KdebugAdvice() + 24);
  return sub_186C3C898(a4, v7);
}

unint64_t sub_186C3C430(uint64_t a1)
{
  uint64_t v2 = sub_186C5ACC0();
  return sub_186C3C498(a1, v2);
}

unint64_t sub_186C3C498(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = -1LL << *(_BYTE *)(v2 + 32);
  unint64_t v4 = a2 & ~v3;
  if (((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v4) & 1) != 0)
  {
    uint64_t v5 = ~v3;
    sub_186BECF0C();
    do
    {
      if ((sub_186C5ACFC() & 1) != 0) {
        break;
      }
      unint64_t v4 = (v4 + 1) & v5;
    }

    while (((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v4) & 1) != 0);
  }

  return v4;
}

char *sub_186C3C55C(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_18C6A2CB8);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }

  else
  {
    uint64_t v10 = (char *)MEMORY[0x18961AFE8];
  }

  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0LL;
  }

  else
  {
    memcpy(v13, v14, 16 * v8);
  }

  swift_bridgeObjectRelease();
  return v10;
}

uint64_t sub_186C3C654(char **a1)
{
  uint64_t v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = sub_186C3EF54((uint64_t)v2);
  }
  uint64_t v3 = *((void *)v2 + 2);
  v5[0] = (uint64_t)(v2 + 32);
  v5[1] = v3;
  uint64_t result = sub_186C3E408(v5);
  *a1 = v2;
  return result;
}

void *sub_186C3C6BC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return (void *)MEMORY[0x18961AFE8];
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C6A2CC0);
  uint64_t v3 = (void *)swift_allocObject();
  int64_t v4 = _swift_stdlib_malloc_size(v3);
  uint64_t v5 = v4 - 32;
  if (v4 < 32) {
    uint64_t v5 = v4 - 17;
  }
  v3[2] = v1;
  v3[3] = 2 * (v5 >> 4);
  unint64_t v6 = sub_186C3EDB4(&v8, (uint64_t)(v3 + 4), v1, a1);
  swift_bridgeObjectRetain();
  sub_186C0D094();
  if (v6 != (void *)v1)
  {
    __break(1u);
    return (void *)MEMORY[0x18961AFE8];
  }

  return v3;
}

uint64_t sub_186C3C7A0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 200);
  unint64_t v4 = *(void *)(a1 + 208);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_186BF06B0(v2, v4);
  return a1;
}

uint64_t sub_186C3C85C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for KdebugAdvice();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_186C3C898(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for RecordingOptions.Options(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_186C3C8DC(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  uint64_t v5 = *a2;
  *(void *)a1 = *a2;
  if ((v4 & 0x20000) != 0)
  {
    a1 = v5 + ((v4 + 16LL) & ~(unint64_t)v4);
    swift_retain();
  }

  else
  {
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 1);
    *(void *)(a1 + 24) = a2[3];
    *(_OWORD *)(a1 + 32) = *((_OWORD *)a2 + 2);
    uint64_t v7 = a2[7];
    *(void *)(a1 + 48) = a2[6];
    *(void *)(a1 + 56) = v7;
    uint64_t v8 = a2[9];
    *(void *)(a1 + 64) = a2[8];
    *(void *)(a1 + 72) = v8;
    uint64_t v9 = a2[11];
    *(void *)(a1 + 80) = a2[10];
    *(void *)(a1 + 88) = v9;
    uint64_t v10 = a2[13];
    *(void *)(a1 + 96) = a2[12];
    *(void *)(a1 + 104) = v10;
    uint64_t v11 = a2[15];
    *(void *)(a1 + 112) = a2[14];
    *(void *)(a1 + 120) = v11;
    *(_OWORD *)(a1 + 128) = *((_OWORD *)a2 + 8);
    *(_BYTE *)(a1 + 144) = *((_BYTE *)a2 + 144);
    uint64_t v12 = a2[20];
    *(void *)(a1 + 152) = a2[19];
    *(void *)(a1 + 160) = v12;
    uint64_t v13 = a2[22];
    *(void *)(a1 + 168) = a2[21];
    *(void *)(a1 + 176) = v13;
    *(_BYTE *)(a1 + 184) = *((_BYTE *)a2 + 184);
    uint64_t v14 = a2[25];
    *(void *)(a1 + 192) = a2[24];
    *(void *)(a1 + 200) = v14;
    *(_OWORD *)(a1 + 208) = *((_OWORD *)a2 + 13);
    *(void *)(a1 + 224) = a2[28];
    *(_BYTE *)(a1 + 248) = *((_BYTE *)a2 + 248);
    *(_OWORD *)(a1 + 232) = *(_OWORD *)(a2 + 29);
    *(_BYTE *)(a1 + 272) = *((_BYTE *)a2 + 272);
    *(_OWORD *)(a1 + 256) = *((_OWORD *)a2 + 16);
    uint64_t v15 = a2[36];
    *(void *)(a1 + 280) = a2[35];
    unint64_t v63 = a2[37];
    uint64_t v64 = v15;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_186BF06B0(v64, v63);
    *(void *)(a1 + 288) = v64;
    *(void *)(a1 + 296) = v63;
    uint64_t v16 = a2[39];
    *(void *)(a1 + 304) = a2[38];
    *(void *)(a1 + 312) = v16;
    *(_BYTE *)(a1 + 320) = *((_BYTE *)a2 + 320);
    *(void *)(a1 + 328) = a2[41];
    *(_BYTE *)(a1 + 336) = *((_BYTE *)a2 + 336);
    uint64_t v17 = *(int *)(a3 + 24);
    uint64_t v18 = a1 + v17;
    uint64_t v19 = (uint64_t)a2 + v17;
    *(void *)(a1 + v17) = *(uint64_t *)((char *)a2 + v17);
    uint64_t v20 = (int *)type metadata accessor for RecordingOptions.Options(0LL);
    uint64_t v21 = v20[5];
    __dst = (void *)(v18 + v21);
    char v22 = (const void *)(v19 + v21);
    uint64_t v23 = sub_186C5AA8C();
    uint64_t v24 = *(void *)(v23 - 8);
    char v66 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v24 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v66(v22, 1LL, v23))
    {
      uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C6A21F8);
      memcpy(__dst, v22, *(void *)(*(void *)(v25 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v24 + 16))(__dst, v22, v23);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v24 + 56))(__dst, 0LL, 1LL, v23);
    }

    *(void *)(v18 + v20[6]) = *(void *)(v19 + v20[6]);
    *(void *)(v18 + v20[7]) = *(void *)(v19 + v20[7]);
    *(void *)(v18 + v20[8]) = *(void *)(v19 + v20[8]);
    uint64_t v26 = v20[9];
    uint64_t v27 = v18 + v26;
    uint64_t v28 = v19 + v26;
    *(void *)uint64_t v27 = *(void *)v28;
    *(_BYTE *)(v27 + 8) = *(_BYTE *)(v28 + 8);
    uint64_t v29 = v20[10];
    uint64_t v30 = v18 + v29;
    uint64_t v31 = v19 + v29;
    *(_DWORD *)uint64_t v30 = *(_DWORD *)v31;
    *(_BYTE *)(v30 + 4) = *(_BYTE *)(v31 + 4);
    uint64_t v32 = v20[11];
    uint64_t v33 = v18 + v32;
    uint64_t v34 = v19 + v32;
    *(void *)uint64_t v33 = *(void *)v34;
    *(_BYTE *)(v33 + 8) = *(_BYTE *)(v34 + 8);
    *(void *)(v18 + v20[12]) = *(void *)(v19 + v20[12]);
    *(void *)(v18 + v20[13]) = *(void *)(v19 + v20[13]);
    *(_BYTE *)(v18 + v20[14]) = *(_BYTE *)(v19 + v20[14]);
    uint64_t v35 = v20[15];
    uint64_t v36 = v18 + v35;
    uint64_t v37 = v19 + v35;
    *(void *)uint64_t v36 = *(void *)v37;
    *(_BYTE *)(v36 + 8) = *(_BYTE *)(v37 + 8);
    *(_BYTE *)(v18 + v20[16]) = *(_BYTE *)(v19 + v20[16]);
    *(_BYTE *)(v18 + v20[17]) = *(_BYTE *)(v19 + v20[17]);
    *(_BYTE *)(v18 + v20[18]) = *(_BYTE *)(v19 + v20[18]);
    uint64_t v38 = v20[19];
    uint64_t v39 = (void *)(v18 + v38);
    uint64_t v40 = (void *)(v19 + v38);
    uint64_t v65 = v40[1];
    *uint64_t v39 = *v40;
    v39[1] = v65;
    uint64_t v41 = v20[20];
    uint64_t v42 = (void *)(v18 + v41);
    __int128 v43 = (void *)(v19 + v41);
    uint64_t v44 = v43[1];
    *uint64_t v42 = *v43;
    v42[1] = v44;
    uint64_t v45 = v20[21];
    uint64_t v46 = v18 + v45;
    uint64_t v47 = v19 + v45;
    *(void *)uint64_t v46 = *(void *)v47;
    *(_BYTE *)(v46 + 8) = *(_BYTE *)(v47 + 8);
    *(_BYTE *)(v18 + v20[22]) = *(_BYTE *)(v19 + v20[22]);
    uint64_t v48 = v20[23];
    uint64_t v49 = v18 + v48;
    uint64_t v50 = v19 + v48;
    *(_DWORD *)uint64_t v49 = *(_DWORD *)v50;
    *(_BYTE *)(v49 + 4) = *(_BYTE *)(v50 + 4);
    *(void *)(v18 + v20[24]) = *(void *)(v19 + v20[24]);
    *(void *)(v18 + v20[25]) = *(void *)(v19 + v20[25]);
    *(void *)(v18 + v20[26]) = *(void *)(v19 + v20[26]);
    *(_BYTE *)(v18 + v20[27]) = *(_BYTE *)(v19 + v20[27]);
    *(_BYTE *)(v18 + v20[28]) = *(_BYTE *)(v19 + v20[28]);
    *(void *)(v18 + v20[29]) = *(void *)(v19 + v20[29]);
    uint64_t v51 = v20[30];
    uint64_t v52 = v18 + v51;
    uint64_t v53 = v19 + v51;
    *(void *)uint64_t v52 = *(void *)v53;
    *(_BYTE *)(v52 + 8) = *(_BYTE *)(v53 + 8);
    uint64_t v54 = v20[31];
    __int128 v55 = (void *)(v18 + v54);
    __int128 v56 = (void *)(v19 + v54);
    uint64_t v57 = v56[1];
    *__int128 v55 = *v56;
    v55[1] = v57;
    uint64_t v58 = v20[32];
    __int128 v59 = (void *)(v18 + v58);
    uint64_t v60 = (void *)(v19 + v58);
    uint64_t v61 = v60[1];
    *__int128 v59 = *v60;
    v59[1] = v61;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }

  return a1;
}

uint64_t sub_186C3CDD4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + *(int *)(a2 + 24);
  uint64_t v5 = v4 + *(int *)(type metadata accessor for RecordingOptions.Options(0LL) + 20);
  uint64_t v6 = sub_186C5AA8C();
  uint64_t v7 = *(void *)(v6 - 8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_186C3CF90(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  uint64_t v5 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v5;
  uint64_t v6 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v6;
  uint64_t v7 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v7;
  uint64_t v8 = *(void *)(a2 + 104);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = v8;
  uint64_t v9 = *(void *)(a2 + 120);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 120) = v9;
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
  uint64_t v10 = *(void *)(a2 + 160);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  *(void *)(a1 + 160) = v10;
  uint64_t v11 = *(void *)(a2 + 176);
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  *(void *)(a1 + 176) = v11;
  *(_BYTE *)(a1 + 184) = *(_BYTE *)(a2 + 184);
  uint64_t v12 = *(void *)(a2 + 200);
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  *(void *)(a1 + 200) = v12;
  *(_OWORD *)(a1 + 208) = *(_OWORD *)(a2 + 208);
  *(void *)(a1 + 224) = *(void *)(a2 + 224);
  *(_BYTE *)(a1 + 248) = *(_BYTE *)(a2 + 248);
  *(_OWORD *)(a1 + 232) = *(_OWORD *)(a2 + 232);
  *(_BYTE *)(a1 + 272) = *(_BYTE *)(a2 + 272);
  *(_OWORD *)(a1 + 256) = *(_OWORD *)(a2 + 256);
  uint64_t v13 = *(void *)(a2 + 288);
  *(void *)(a1 + 280) = *(void *)(a2 + 280);
  unint64_t v61 = *(void *)(a2 + 296);
  uint64_t v62 = v13;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_186BF06B0(v62, v61);
  *(void *)(a1 + 288) = v62;
  *(void *)(a1 + 296) = v61;
  uint64_t v14 = *(void *)(a2 + 312);
  *(void *)(a1 + 304) = *(void *)(a2 + 304);
  *(void *)(a1 + 312) = v14;
  *(_BYTE *)(a1 + 320) = *(_BYTE *)(a2 + 320);
  *(void *)(a1 + 328) = *(void *)(a2 + 328);
  *(_BYTE *)(a1 + 336) = *(_BYTE *)(a2 + 336);
  uint64_t v15 = *(int *)(a3 + 24);
  uint64_t v16 = a1 + v15;
  uint64_t v17 = a2 + v15;
  *(void *)(a1 + v15) = *(void *)(a2 + v15);
  uint64_t v18 = (int *)type metadata accessor for RecordingOptions.Options(0LL);
  uint64_t v19 = v18[5];
  __dst = (void *)(v16 + v19);
  uint64_t v20 = (const void *)(v17 + v19);
  uint64_t v21 = sub_186C5AA8C();
  uint64_t v22 = *(void *)(v21 - 8);
  uint64_t v64 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v22 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v64(v20, 1LL, v21))
  {
    uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C6A21F8);
    memcpy(__dst, v20, *(void *)(*(void *)(v23 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v22 + 16))(__dst, v20, v21);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v22 + 56))(__dst, 0LL, 1LL, v21);
  }

  *(void *)(v16 + v18[6]) = *(void *)(v17 + v18[6]);
  *(void *)(v16 + v18[7]) = *(void *)(v17 + v18[7]);
  *(void *)(v16 + v18[8]) = *(void *)(v17 + v18[8]);
  uint64_t v24 = v18[9];
  uint64_t v25 = v16 + v24;
  uint64_t v26 = v17 + v24;
  *(void *)uint64_t v25 = *(void *)v26;
  *(_BYTE *)(v25 + 8) = *(_BYTE *)(v26 + 8);
  uint64_t v27 = v18[10];
  uint64_t v28 = v16 + v27;
  uint64_t v29 = v17 + v27;
  *(_DWORD *)uint64_t v28 = *(_DWORD *)v29;
  *(_BYTE *)(v28 + 4) = *(_BYTE *)(v29 + 4);
  uint64_t v30 = v18[11];
  uint64_t v31 = v16 + v30;
  uint64_t v32 = v17 + v30;
  *(void *)uint64_t v31 = *(void *)v32;
  *(_BYTE *)(v31 + 8) = *(_BYTE *)(v32 + 8);
  *(void *)(v16 + v18[12]) = *(void *)(v17 + v18[12]);
  *(void *)(v16 + v18[13]) = *(void *)(v17 + v18[13]);
  *(_BYTE *)(v16 + v18[14]) = *(_BYTE *)(v17 + v18[14]);
  uint64_t v33 = v18[15];
  uint64_t v34 = v16 + v33;
  uint64_t v35 = v17 + v33;
  *(void *)uint64_t v34 = *(void *)v35;
  *(_BYTE *)(v34 + 8) = *(_BYTE *)(v35 + 8);
  *(_BYTE *)(v16 + v18[16]) = *(_BYTE *)(v17 + v18[16]);
  *(_BYTE *)(v16 + v18[17]) = *(_BYTE *)(v17 + v18[17]);
  *(_BYTE *)(v16 + v18[18]) = *(_BYTE *)(v17 + v18[18]);
  uint64_t v36 = v18[19];
  uint64_t v37 = (void *)(v16 + v36);
  uint64_t v38 = (void *)(v17 + v36);
  uint64_t v63 = v38[1];
  *uint64_t v37 = *v38;
  v37[1] = v63;
  uint64_t v39 = v18[20];
  uint64_t v40 = (void *)(v16 + v39);
  uint64_t v41 = (void *)(v17 + v39);
  uint64_t v42 = v41[1];
  *uint64_t v40 = *v41;
  v40[1] = v42;
  uint64_t v43 = v18[21];
  uint64_t v44 = v16 + v43;
  uint64_t v45 = v17 + v43;
  *(void *)uint64_t v44 = *(void *)v45;
  *(_BYTE *)(v44 + 8) = *(_BYTE *)(v45 + 8);
  *(_BYTE *)(v16 + v18[22]) = *(_BYTE *)(v17 + v18[22]);
  uint64_t v46 = v18[23];
  uint64_t v47 = v16 + v46;
  uint64_t v48 = v17 + v46;
  *(_DWORD *)uint64_t v47 = *(_DWORD *)v48;
  *(_BYTE *)(v47 + 4) = *(_BYTE *)(v48 + 4);
  *(void *)(v16 + v18[24]) = *(void *)(v17 + v18[24]);
  *(void *)(v16 + v18[25]) = *(void *)(v17 + v18[25]);
  *(void *)(v16 + v18[26]) = *(void *)(v17 + v18[26]);
  *(_BYTE *)(v16 + v18[27]) = *(_BYTE *)(v17 + v18[27]);
  *(_BYTE *)(v16 + v18[28]) = *(_BYTE *)(v17 + v18[28]);
  *(void *)(v16 + v18[29]) = *(void *)(v17 + v18[29]);
  uint64_t v49 = v18[30];
  uint64_t v50 = v16 + v49;
  uint64_t v51 = v17 + v49;
  *(void *)uint64_t v50 = *(void *)v51;
  *(_BYTE *)(v50 + 8) = *(_BYTE *)(v51 + 8);
  uint64_t v52 = v18[31];
  uint64_t v53 = (void *)(v16 + v52);
  uint64_t v54 = (void *)(v17 + v52);
  uint64_t v55 = v54[1];
  *uint64_t v53 = *v54;
  v53[1] = v55;
  uint64_t v56 = v18[32];
  uint64_t v57 = (void *)(v16 + v56);
  uint64_t v58 = (void *)(v17 + v56);
  uint64_t v59 = v58[1];
  *uint64_t v57 = *v58;
  v57[1] = v59;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_186C3D464(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  __int128 v6 = *(_OWORD *)(a2 + 128);
  *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = v6;
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 184) = *(_BYTE *)(a2 + 184);
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 200) = *(void *)(a2 + 200);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 208) = *(_OWORD *)(a2 + 208);
  *(void *)(a1 + 224) = *(void *)(a2 + 224);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  __int128 v7 = *(_OWORD *)(a2 + 232);
  *(_BYTE *)(a1 + 248) = *(_BYTE *)(a2 + 248);
  *(_OWORD *)(a1 + 232) = v7;
  char v8 = *(_BYTE *)(a2 + 272);
  *(_OWORD *)(a1 + 256) = *(_OWORD *)(a2 + 256);
  *(_BYTE *)(a1 + 272) = v8;
  *(void *)(a1 + 280) = *(void *)(a2 + 280);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v9 = *(void *)(a2 + 288);
  unint64_t v10 = *(void *)(a2 + 296);
  sub_186BF06B0(v9, v10);
  uint64_t v11 = *(void *)(a1 + 288);
  unint64_t v12 = *(void *)(a1 + 296);
  *(void *)(a1 + 288) = v9;
  *(void *)(a1 + 296) = v10;
  sub_186BF06F4(v11, v12);
  *(void *)(a1 + 304) = *(void *)(a2 + 304);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 312) = *(void *)(a2 + 312);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 320) = *(_BYTE *)(a2 + 320);
  *(void *)(a1 + 328) = *(void *)(a2 + 328);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 336) = *(_BYTE *)(a2 + 336);
  uint64_t v13 = *(int *)(a3 + 24);
  uint64_t v14 = a1 + v13;
  uint64_t v15 = a2 + v13;
  *(void *)(a1 + v13) = *(void *)(a2 + v13);
  uint64_t v16 = (int *)type metadata accessor for RecordingOptions.Options(0LL);
  uint64_t v17 = v16[5];
  uint64_t v18 = (void *)(v14 + v17);
  uint64_t v19 = (void *)(v15 + v17);
  uint64_t v20 = sub_186C5AA8C();
  uint64_t v21 = *(void *)(v20 - 8);
  uint64_t v22 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v21 + 48);
  int v23 = v22(v18, 1LL, v20);
  int v24 = v22(v19, 1LL, v20);
  if (!v23)
  {
    if (!v24)
    {
      (*(void (**)(void *, void *, uint64_t))(v21 + 24))(v18, v19, v20);
      goto LABEL_7;
    }

    (*(void (**)(void *, uint64_t))(v21 + 8))(v18, v20);
    goto LABEL_6;
  }

  if (v24)
  {
LABEL_6:
    uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C6A21F8);
    memcpy(v18, v19, *(void *)(*(void *)(v25 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(void *, void *, uint64_t))(v21 + 16))(v18, v19, v20);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v21 + 56))(v18, 0LL, 1LL, v20);
LABEL_7:
  *(void *)(v14 + v16[6]) = *(void *)(v15 + v16[6]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(v14 + v16[7]) = *(void *)(v15 + v16[7]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(v14 + v16[8]) = *(void *)(v15 + v16[8]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v26 = v16[9];
  uint64_t v27 = v14 + v26;
  uint64_t v28 = (uint64_t *)(v15 + v26);
  uint64_t v29 = *v28;
  *(_BYTE *)(v27 + 8) = *((_BYTE *)v28 + 8);
  *(void *)uint64_t v27 = v29;
  uint64_t v30 = v16[10];
  uint64_t v31 = v14 + v30;
  uint64_t v32 = v15 + v30;
  LODWORD(v29) = *(_DWORD *)v32;
  *(_BYTE *)(v31 + 4) = *(_BYTE *)(v32 + 4);
  *(_DWORD *)uint64_t v31 = v29;
  uint64_t v33 = v16[11];
  uint64_t v34 = v14 + v33;
  uint64_t v35 = (uint64_t *)(v15 + v33);
  uint64_t v36 = *v35;
  *(_BYTE *)(v34 + 8) = *((_BYTE *)v35 + 8);
  *(void *)uint64_t v34 = v36;
  *(void *)(v14 + v16[12]) = *(void *)(v15 + v16[12]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(v14 + v16[13]) = *(void *)(v15 + v16[13]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(v14 + v16[14]) = *(_BYTE *)(v15 + v16[14]);
  uint64_t v37 = v16[15];
  uint64_t v38 = v14 + v37;
  uint64_t v39 = v15 + v37;
  char v40 = *(_BYTE *)(v39 + 8);
  *(void *)uint64_t v38 = *(void *)v39;
  *(_BYTE *)(v38 + 8) = v40;
  *(_BYTE *)(v14 + v16[16]) = *(_BYTE *)(v15 + v16[16]);
  *(_BYTE *)(v14 + v16[17]) = *(_BYTE *)(v15 + v16[17]);
  *(_BYTE *)(v14 + v16[18]) = *(_BYTE *)(v15 + v16[18]);
  uint64_t v41 = v16[19];
  uint64_t v42 = (void *)(v14 + v41);
  uint64_t v43 = (void *)(v15 + v41);
  *uint64_t v42 = *v43;
  v42[1] = v43[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v44 = v16[20];
  uint64_t v45 = (void *)(v14 + v44);
  uint64_t v46 = (void *)(v15 + v44);
  *uint64_t v45 = *v46;
  v45[1] = v46[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v47 = v16[21];
  uint64_t v48 = v14 + v47;
  uint64_t v49 = (uint64_t *)(v15 + v47);
  uint64_t v50 = *v49;
  *(_BYTE *)(v48 + 8) = *((_BYTE *)v49 + 8);
  *(void *)uint64_t v48 = v50;
  *(_BYTE *)(v14 + v16[22]) = *(_BYTE *)(v15 + v16[22]);
  uint64_t v51 = v16[23];
  uint64_t v52 = v14 + v51;
  uint64_t v53 = v15 + v51;
  LODWORD(v50) = *(_DWORD *)v53;
  *(_BYTE *)(v52 + 4) = *(_BYTE *)(v53 + 4);
  *(_DWORD *)uint64_t v52 = v50;
  *(void *)(v14 + v16[24]) = *(void *)(v15 + v16[24]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(v14 + v16[25]) = *(void *)(v15 + v16[25]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(v14 + v16[26]) = *(void *)(v15 + v16[26]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(v14 + v16[27]) = *(_BYTE *)(v15 + v16[27]);
  *(_BYTE *)(v14 + v16[28]) = *(_BYTE *)(v15 + v16[28]);
  *(void *)(v14 + v16[29]) = *(void *)(v15 + v16[29]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v54 = v16[30];
  uint64_t v55 = v14 + v54;
  uint64_t v56 = (uint64_t *)(v15 + v54);
  uint64_t v57 = *v56;
  *(_BYTE *)(v55 + 8) = *((_BYTE *)v56 + 8);
  *(void *)uint64_t v55 = v57;
  uint64_t v58 = v16[31];
  uint64_t v59 = (void *)(v14 + v58);
  uint64_t v60 = (void *)(v15 + v58);
  *uint64_t v59 = *v60;
  v59[1] = v60[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v61 = v16[32];
  uint64_t v62 = (void *)(v14 + v61);
  uint64_t v63 = (void *)(v15 + v61);
  *uint64_t v62 = *v63;
  v62[1] = v63[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *sub_186C3DAAC(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  memcpy(a1 + 1, a2 + 1, 0x141uLL);
  uint64_t v6 = *(int *)(a3 + 24);
  __int128 v7 = (char *)a1 + v6;
  char v8 = (char *)a2 + v6;
  *(void *)((char *)a1 + v6) = *(void *)((char *)a2 + v6);
  uint64_t v9 = (int *)type metadata accessor for RecordingOptions.Options(0LL);
  uint64_t v10 = v9[5];
  uint64_t v11 = &v7[v10];
  unint64_t v12 = &v8[v10];
  uint64_t v13 = sub_186C5AA8C();
  uint64_t v14 = *(void *)(v13 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1LL, v13))
  {
    uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C6A21F8);
    memcpy(v11, v12, *(void *)(*(void *)(v15 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v11, v12, v13);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v11, 0LL, 1LL, v13);
  }

  *(void *)&v7[v9[6]] = *(void *)&v8[v9[6]];
  *(void *)&v7[v9[7]] = *(void *)&v8[v9[7]];
  *(void *)&v7[v9[8]] = *(void *)&v8[v9[8]];
  uint64_t v16 = v9[9];
  uint64_t v17 = &v7[v16];
  uint64_t v18 = &v8[v16];
  *(void *)uint64_t v17 = *(void *)v18;
  v17[8] = v18[8];
  uint64_t v19 = v9[10];
  uint64_t v20 = &v7[v19];
  uint64_t v21 = &v8[v19];
  *(_DWORD *)uint64_t v20 = *(_DWORD *)v21;
  v20[4] = v21[4];
  uint64_t v22 = v9[11];
  int v23 = &v7[v22];
  int v24 = &v8[v22];
  *(void *)int v23 = *(void *)v24;
  v23[8] = v24[8];
  *(void *)&v7[v9[12]] = *(void *)&v8[v9[12]];
  *(void *)&v7[v9[13]] = *(void *)&v8[v9[13]];
  v7[v9[14]] = v8[v9[14]];
  uint64_t v25 = v9[15];
  uint64_t v26 = &v7[v25];
  uint64_t v27 = &v8[v25];
  *(void *)uint64_t v26 = *(void *)v27;
  v26[8] = v27[8];
  v7[v9[16]] = v8[v9[16]];
  v7[v9[17]] = v8[v9[17]];
  v7[v9[18]] = v8[v9[18]];
  *(_OWORD *)&v7[v9[19]] = *(_OWORD *)&v8[v9[19]];
  *(_OWORD *)&v7[v9[20]] = *(_OWORD *)&v8[v9[20]];
  uint64_t v28 = v9[21];
  uint64_t v29 = &v7[v28];
  uint64_t v30 = &v8[v28];
  *(void *)uint64_t v29 = *(void *)v30;
  v29[8] = v30[8];
  v7[v9[22]] = v8[v9[22]];
  uint64_t v31 = v9[23];
  uint64_t v32 = &v7[v31];
  uint64_t v33 = &v8[v31];
  *(_DWORD *)uint64_t v32 = *(_DWORD *)v33;
  v32[4] = v33[4];
  *(void *)&v7[v9[24]] = *(void *)&v8[v9[24]];
  *(void *)&v7[v9[25]] = *(void *)&v8[v9[25]];
  *(void *)&v7[v9[26]] = *(void *)&v8[v9[26]];
  v7[v9[27]] = v8[v9[27]];
  v7[v9[28]] = v8[v9[28]];
  *(void *)&v7[v9[29]] = *(void *)&v8[v9[29]];
  uint64_t v34 = v9[30];
  uint64_t v35 = &v7[v34];
  uint64_t v36 = &v8[v34];
  v35[8] = v36[8];
  *(void *)uint64_t v35 = *(void *)v36;
  *(_OWORD *)&v7[v9[31]] = *(_OWORD *)&v8[v9[31]];
  *(_OWORD *)&v7[v9[32]] = *(_OWORD *)&v8[v9[32]];
  return a1;
}

uint64_t sub_186C3DD54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(a2 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = v7;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_bridgeObjectRelease();
  uint64_t v8 = *(void *)(a2 + 104);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = v8;
  swift_bridgeObjectRelease();
  uint64_t v9 = *(void *)(a2 + 120);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 120) = v9;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
  uint64_t v10 = *(void *)(a2 + 160);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  *(void *)(a1 + 160) = v10;
  swift_bridgeObjectRelease();
  uint64_t v11 = *(void *)(a2 + 176);
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  *(void *)(a1 + 176) = v11;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 184) = *(_BYTE *)(a2 + 184);
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 200) = *(void *)(a2 + 200);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 208) = *(_OWORD *)(a2 + 208);
  *(void *)(a1 + 224) = *(void *)(a2 + 224);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 232) = *(_OWORD *)(a2 + 232);
  *(_BYTE *)(a1 + 248) = *(_BYTE *)(a2 + 248);
  *(_OWORD *)(a1 + 256) = *(_OWORD *)(a2 + 256);
  *(_BYTE *)(a1 + 272) = *(_BYTE *)(a2 + 272);
  *(void *)(a1 + 280) = *(void *)(a2 + 280);
  swift_bridgeObjectRelease();
  uint64_t v12 = *(void *)(a1 + 288);
  unint64_t v13 = *(void *)(a1 + 296);
  *(_OWORD *)(a1 + 288) = *(_OWORD *)(a2 + 288);
  sub_186BF06F4(v12, v13);
  *(void *)(a1 + 304) = *(void *)(a2 + 304);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 312) = *(void *)(a2 + 312);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 320) = *(_BYTE *)(a2 + 320);
  *(void *)(a1 + 328) = *(void *)(a2 + 328);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 336) = *(_BYTE *)(a2 + 336);
  uint64_t v14 = *(int *)(a3 + 24);
  uint64_t v15 = a1 + v14;
  uint64_t v16 = a2 + v14;
  *(void *)(a1 + v14) = *(void *)(a2 + v14);
  uint64_t v17 = (int *)type metadata accessor for RecordingOptions.Options(0LL);
  uint64_t v18 = v17[5];
  uint64_t v19 = (void *)(v15 + v18);
  uint64_t v20 = (void *)(v16 + v18);
  uint64_t v21 = sub_186C5AA8C();
  uint64_t v22 = *(void *)(v21 - 8);
  int v23 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v22 + 48);
  int v24 = v23(v19, 1LL, v21);
  int v25 = v23(v20, 1LL, v21);
  if (!v24)
  {
    if (!v25)
    {
      (*(void (**)(void *, void *, uint64_t))(v22 + 40))(v19, v20, v21);
      goto LABEL_7;
    }

    (*(void (**)(void *, uint64_t))(v22 + 8))(v19, v21);
    goto LABEL_6;
  }

  if (v25)
  {
LABEL_6:
    uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C6A21F8);
    memcpy(v19, v20, *(void *)(*(void *)(v26 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(void *, void *, uint64_t))(v22 + 32))(v19, v20, v21);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v22 + 56))(v19, 0LL, 1LL, v21);
LABEL_7:
  *(void *)(v15 + v17[6]) = *(void *)(v16 + v17[6]);
  swift_bridgeObjectRelease();
  *(void *)(v15 + v17[7]) = *(void *)(v16 + v17[7]);
  swift_bridgeObjectRelease();
  *(void *)(v15 + v17[8]) = *(void *)(v16 + v17[8]);
  swift_bridgeObjectRelease();
  uint64_t v27 = v17[9];
  uint64_t v28 = v15 + v27;
  uint64_t v29 = v16 + v27;
  *(void *)uint64_t v28 = *(void *)v29;
  *(_BYTE *)(v28 + 8) = *(_BYTE *)(v29 + 8);
  uint64_t v30 = v17[10];
  uint64_t v31 = v15 + v30;
  uint64_t v32 = v16 + v30;
  *(_BYTE *)(v31 + 4) = *(_BYTE *)(v32 + 4);
  *(_DWORD *)uint64_t v31 = *(_DWORD *)v32;
  uint64_t v33 = v17[11];
  uint64_t v34 = v15 + v33;
  uint64_t v35 = v16 + v33;
  *(void *)uint64_t v34 = *(void *)v35;
  *(_BYTE *)(v34 + 8) = *(_BYTE *)(v35 + 8);
  *(void *)(v15 + v17[12]) = *(void *)(v16 + v17[12]);
  swift_bridgeObjectRelease();
  *(void *)(v15 + v17[13]) = *(void *)(v16 + v17[13]);
  swift_bridgeObjectRelease();
  *(_BYTE *)(v15 + v17[14]) = *(_BYTE *)(v16 + v17[14]);
  uint64_t v36 = v17[15];
  uint64_t v37 = v15 + v36;
  uint64_t v38 = v16 + v36;
  *(void *)uint64_t v37 = *(void *)v38;
  *(_BYTE *)(v37 + 8) = *(_BYTE *)(v38 + 8);
  *(_BYTE *)(v15 + v17[16]) = *(_BYTE *)(v16 + v17[16]);
  *(_BYTE *)(v15 + v17[17]) = *(_BYTE *)(v16 + v17[17]);
  *(_BYTE *)(v15 + v17[18]) = *(_BYTE *)(v16 + v17[18]);
  uint64_t v39 = v17[19];
  char v40 = (void *)(v15 + v39);
  uint64_t v41 = (uint64_t *)(v16 + v39);
  uint64_t v43 = *v41;
  uint64_t v42 = v41[1];
  *char v40 = v43;
  v40[1] = v42;
  swift_bridgeObjectRelease();
  uint64_t v44 = v17[20];
  uint64_t v45 = (void *)(v15 + v44);
  uint64_t v46 = (uint64_t *)(v16 + v44);
  uint64_t v48 = *v46;
  uint64_t v47 = v46[1];
  *uint64_t v45 = v48;
  v45[1] = v47;
  swift_bridgeObjectRelease();
  uint64_t v49 = v17[21];
  uint64_t v50 = v15 + v49;
  uint64_t v51 = v16 + v49;
  *(void *)uint64_t v50 = *(void *)v51;
  *(_BYTE *)(v50 + 8) = *(_BYTE *)(v51 + 8);
  *(_BYTE *)(v15 + v17[22]) = *(_BYTE *)(v16 + v17[22]);
  uint64_t v52 = v17[23];
  uint64_t v53 = v15 + v52;
  uint64_t v54 = v16 + v52;
  *(_DWORD *)uint64_t v53 = *(_DWORD *)v54;
  *(_BYTE *)(v53 + 4) = *(_BYTE *)(v54 + 4);
  *(void *)(v15 + v17[24]) = *(void *)(v16 + v17[24]);
  swift_bridgeObjectRelease();
  *(void *)(v15 + v17[25]) = *(void *)(v16 + v17[25]);
  swift_bridgeObjectRelease();
  *(void *)(v15 + v17[26]) = *(void *)(v16 + v17[26]);
  swift_bridgeObjectRelease();
  *(_BYTE *)(v15 + v17[27]) = *(_BYTE *)(v16 + v17[27]);
  *(_BYTE *)(v15 + v17[28]) = *(_BYTE *)(v16 + v17[28]);
  *(void *)(v15 + v17[29]) = *(void *)(v16 + v17[29]);
  swift_bridgeObjectRelease();
  uint64_t v55 = v17[30];
  uint64_t v56 = v15 + v55;
  uint64_t v57 = v16 + v55;
  *(void *)uint64_t v56 = *(void *)v57;
  *(_BYTE *)(v56 + 8) = *(_BYTE *)(v57 + 8);
  uint64_t v58 = v17[31];
  uint64_t v59 = (void *)(v15 + v58);
  uint64_t v60 = (uint64_t *)(v16 + v58);
  uint64_t v62 = *v60;
  uint64_t v61 = v60[1];
  *uint64_t v59 = v62;
  v59[1] = v61;
  swift_bridgeObjectRelease();
  uint64_t v63 = v17[32];
  uint64_t v64 = (void *)(v15 + v63);
  uint64_t v65 = (uint64_t *)(v16 + v63);
  uint64_t v67 = *v65;
  uint64_t v66 = v65[1];
  *uint64_t v64 = v67;
  v64[1] = v66;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_186C3E240()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_186C3E24C(char *a1, uint64_t a2, uint64_t a3)
{
  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *(void *)a1;
    if (*(void *)a1 >= 0xFFFFFFFFuLL) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }

  else
  {
    uint64_t v8 = type metadata accessor for RecordingOptions.Options(0LL);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48LL))( &a1[*(int *)(a3 + 24)],  a2,  v8);
  }

uint64_t sub_186C3E2C8()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *sub_186C3E2D4(char *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)uint64_t result = (a2 - 1);
  }

  else
  {
    uint64_t v7 = type metadata accessor for RecordingOptions.Options(0LL);
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL))( &v5[*(int *)(a4 + 24)],  a2,  a2,  v7);
  }

  return result;
}

uint64_t sub_186C3E348()
{
  uint64_t result = type metadata accessor for RecordingOptions.Options(319LL);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0LL;
  }

  return result;
}

unint64_t sub_186C3E3C4()
{
  unint64_t result = qword_18C6A2CB0;
  if (!qword_18C6A2CB0)
  {
    unint64_t result = MEMORY[0x186E46630](&unk_186C5E3EC, &type metadata for KnownKdebugSubclass);
    atomic_store(result, (unint64_t *)&qword_18C6A2CB0);
  }

  return result;
}

uint64_t sub_186C3E408(uint64_t *a1)
{
  uint64_t v3 = a1[1];
  uint64_t result = sub_186C5B4C4();
  if (result >= v3)
  {
    if (v3 < 0) {
      goto LABEL_137;
    }
    if ((unint64_t)v3 >= 2)
    {
      uint64_t v83 = 0LL;
      uint64_t v84 = *a1;
      for (uint64_t i = 1LL; i != v3; ++i)
      {
        uint64_t v86 = *(void *)(v84 + 16 * i + 8);
        uint64_t v87 = v83;
        do
        {
          uint64_t v88 = v84 + v87;
          if (*(void *)(v84 + v87 + 8) >= v86) {
            break;
          }
          if (!v84) {
            goto LABEL_141;
          }
          __int16 v89 = *(_WORD *)(v88 + 16);
          *(_OWORD *)(v88 + 16) = *(_OWORD *)v88;
          *(_WORD *)uint64_t v88 = v89;
          *(void *)(v88 + 8) = v86;
          v87 -= 16LL;
        }

        while (v87 != -16);
        v83 += 16LL;
      }
    }
  }

  else
  {
    if (v3 >= 0) {
      uint64_t v5 = v3;
    }
    else {
      uint64_t v5 = v3 + 1;
    }
    if (v3 < -1) {
      goto LABEL_136;
    }
    uint64_t v6 = result;
    int v97 = a1;
    if (v3 > 1)
    {
      uint64_t v7 = v5 >> 1;
      __swift_instantiateConcreteTypeFromMangledName(&qword_18C6A2CC8);
      uint64_t result = sub_186C5AF48();
      *(void *)(result + 16) = v7;
      uint64_t v99 = result;
      ValueMetadata v103 = (char *)(result + 32);
LABEL_13:
      uint64_t v9 = 0LL;
      uint64_t v10 = *a1;
      uint64_t v98 = *a1 + 40;
      uint64_t v11 = MEMORY[0x18961AFE8];
      uint64_t v100 = v6;
      uint64_t v101 = v3;
      uint64_t v102 = v10;
      while (1)
      {
        uint64_t v13 = v9++;
        if (v9 < v3)
        {
          uint64_t v14 = *(void *)(v10 + 16 * v9 + 8);
          uint64_t v15 = *(void *)(v10 + 16 * v13 + 8);
          uint64_t v9 = v13 + 2;
          if (v13 + 2 < v3)
          {
            uint64_t v16 = (uint64_t *)(v98 + 16 * v13);
            uint64_t v17 = v14;
            while (1)
            {
              uint64_t v19 = *v16;
              v16 += 2;
              uint64_t v18 = v19;
              if (v15 < v14 == v17 >= v19) {
                break;
              }
              ++v9;
              uint64_t v17 = v18;
              if (v3 == v9)
              {
                uint64_t v9 = v3;
                break;
              }
            }
          }

          if (v15 < v14)
          {
            if (v9 < v13) {
              goto LABEL_138;
            }
            if (v13 < v9)
            {
              uint64_t v20 = 16 * v9;
              uint64_t v21 = 16 * v13;
              uint64_t v22 = v9;
              uint64_t v23 = v13;
              do
              {
                if (v23 != --v22)
                {
                  if (!v10) {
                    goto LABEL_144;
                  }
                  uint64_t v24 = v10 + v20;
                  __int16 v25 = *(_WORD *)(v10 + v21);
                  uint64_t v26 = *(void *)(v10 + v21 + 8);
                  *(_OWORD *)(v10 + v21) = *(_OWORD *)(v10 + v20 - 16);
                  *(_WORD *)(v24 - 16) = v25;
                  *(void *)(v24 - 8) = v26;
                }

                ++v23;
                v20 -= 16LL;
                v21 += 16LL;
              }

              while (v23 < v22);
            }
          }
        }

        if (v9 < v3)
        {
          if (__OFSUB__(v9, v13)) {
            goto LABEL_135;
          }
          if (v9 - v13 < v6)
          {
            uint64_t v27 = v13 + v6;
            if (__OFADD__(v13, v6)) {
              goto LABEL_139;
            }
            if (v27 >= v3) {
              uint64_t v27 = v3;
            }
            if (v27 < v13)
            {
LABEL_140:
              __break(1u);
LABEL_141:
              __break(1u);
LABEL_142:
              __break(1u);
LABEL_143:
              __break(1u);
LABEL_144:
              __break(1u);
LABEL_145:
              __break(1u);
              return result;
            }

            if (v9 != v27)
            {
              uint64_t v28 = (_WORD *)(v10 + 16 * v9);
              do
              {
                uint64_t v29 = *(void *)(v10 + 16 * v9 + 8);
                uint64_t v30 = v13;
                uint64_t v31 = v28;
                do
                {
                  if (*((void *)v31 - 1) >= v29) {
                    break;
                  }
                  if (!v10) {
                    goto LABEL_142;
                  }
                  __int16 v32 = *v31;
                  *(_OWORD *)uint64_t v31 = *((_OWORD *)v31 - 1);
                  *((void *)v31 - 1) = v29;
                  *(v31 - 8) = v32;
                  v31 -= 8;
                  ++v30;
                }

                while (v9 != v30);
                ++v9;
                v28 += 8;
              }

              while (v9 != v27);
              uint64_t v9 = v27;
            }
          }
        }

        if (v9 < v13) {
          goto LABEL_130;
        }
        uint64_t result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          uint64_t result = (uint64_t)sub_186BF905C(0LL, *(void *)(v11 + 16) + 1LL, 1, (char *)v11);
          uint64_t v11 = result;
        }

        unint64_t v34 = *(void *)(v11 + 16);
        unint64_t v33 = *(void *)(v11 + 24);
        unint64_t v12 = v34 + 1;
        uint64_t v10 = v102;
        if (v34 >= v33 >> 1)
        {
          uint64_t result = (uint64_t)sub_186BF905C((char *)(v33 > 1), v34 + 1, 1, (char *)v11);
          uint64_t v10 = v102;
          uint64_t v11 = result;
        }

        *(void *)(v11 + 16) = v12;
        uint64_t v35 = v11 + 32;
        uint64_t v36 = (uint64_t *)(v11 + 32 + 16 * v34);
        *uint64_t v36 = v13;
        v36[1] = v9;
        if (v34)
        {
          while (1)
          {
            unint64_t v37 = v12 - 1;
            if (v12 >= 4)
            {
              unint64_t v42 = v35 + 16 * v12;
              uint64_t v43 = *(void *)(v42 - 64);
              uint64_t v44 = *(void *)(v42 - 56);
              BOOL v48 = __OFSUB__(v44, v43);
              uint64_t v45 = v44 - v43;
              if (v48) {
                goto LABEL_119;
              }
              uint64_t v47 = *(void *)(v42 - 48);
              uint64_t v46 = *(void *)(v42 - 40);
              BOOL v48 = __OFSUB__(v46, v47);
              uint64_t v40 = v46 - v47;
              char v41 = v48;
              if (v48) {
                goto LABEL_120;
              }
              unint64_t v49 = v12 - 2;
              uint64_t v50 = (uint64_t *)(v35 + 16 * (v12 - 2));
              uint64_t v52 = *v50;
              uint64_t v51 = v50[1];
              BOOL v48 = __OFSUB__(v51, v52);
              uint64_t v53 = v51 - v52;
              if (v48) {
                goto LABEL_121;
              }
              BOOL v48 = __OFADD__(v40, v53);
              uint64_t v54 = v40 + v53;
              if (v48) {
                goto LABEL_123;
              }
              if (v54 >= v45)
              {
                __int128 v72 = (uint64_t *)(v35 + 16 * v37);
                uint64_t v74 = *v72;
                uint64_t v73 = v72[1];
                BOOL v48 = __OFSUB__(v73, v74);
                uint64_t v75 = v73 - v74;
                if (v48) {
                  goto LABEL_129;
                }
                BOOL v65 = v40 < v75;
                goto LABEL_83;
              }
            }

            else
            {
              if (v12 != 3)
              {
                uint64_t v66 = *(void *)(v11 + 32);
                uint64_t v67 = *(void *)(v11 + 40);
                BOOL v48 = __OFSUB__(v67, v66);
                uint64_t v59 = v67 - v66;
                char v60 = v48;
                goto LABEL_77;
              }

              uint64_t v39 = *(void *)(v11 + 32);
              uint64_t v38 = *(void *)(v11 + 40);
              BOOL v48 = __OFSUB__(v38, v39);
              uint64_t v40 = v38 - v39;
              char v41 = v48;
            }

            if ((v41 & 1) != 0) {
              goto LABEL_122;
            }
            unint64_t v49 = v12 - 2;
            uint64_t v55 = (uint64_t *)(v35 + 16 * (v12 - 2));
            uint64_t v57 = *v55;
            uint64_t v56 = v55[1];
            BOOL v58 = __OFSUB__(v56, v57);
            uint64_t v59 = v56 - v57;
            char v60 = v58;
            if (v58) {
              goto LABEL_124;
            }
            uint64_t v61 = (uint64_t *)(v35 + 16 * v37);
            uint64_t v63 = *v61;
            uint64_t v62 = v61[1];
            BOOL v48 = __OFSUB__(v62, v63);
            uint64_t v64 = v62 - v63;
            if (v48) {
              goto LABEL_126;
            }
            if (__OFADD__(v59, v64)) {
              goto LABEL_128;
            }
            if (v59 + v64 >= v40)
            {
              BOOL v65 = v40 < v64;
LABEL_83:
              if (v65) {
                unint64_t v37 = v49;
              }
              goto LABEL_85;
            }

LABEL_77:
            if ((v60 & 1) != 0) {
              goto LABEL_125;
            }
            __int128 v68 = (uint64_t *)(v35 + 16 * v37);
            uint64_t v70 = *v68;
            uint64_t v69 = v68[1];
            BOOL v48 = __OFSUB__(v69, v70);
            uint64_t v71 = v69 - v70;
            if (v48) {
              goto LABEL_127;
            }
            if (v71 < v59) {
              goto LABEL_15;
            }
LABEL_85:
            unint64_t v76 = v37 - 1;
            if (v37 - 1 >= v12)
            {
              __break(1u);
LABEL_116:
              __break(1u);
LABEL_117:
              __break(1u);
LABEL_118:
              __break(1u);
LABEL_119:
              __break(1u);
LABEL_120:
              __break(1u);
LABEL_121:
              __break(1u);
LABEL_122:
              __break(1u);
LABEL_123:
              __break(1u);
LABEL_124:
              __break(1u);
LABEL_125:
              __break(1u);
LABEL_126:
              __break(1u);
LABEL_127:
              __break(1u);
LABEL_128:
              __break(1u);
LABEL_129:
              __break(1u);
LABEL_130:
              __break(1u);
LABEL_131:
              __break(1u);
LABEL_132:
              __break(1u);
LABEL_133:
              __break(1u);
LABEL_134:
              __break(1u);
LABEL_135:
              __break(1u);
LABEL_136:
              __break(1u);
LABEL_137:
              __break(1u);
LABEL_138:
              __break(1u);
LABEL_139:
              __break(1u);
              goto LABEL_140;
            }

            if (!v10) {
              goto LABEL_143;
            }
            uint64_t v77 = v11;
            uint64_t v78 = (uint64_t *)(v35 + 16 * v76);
            uint64_t v79 = *v78;
            uint64_t v80 = (void *)(v35 + 16 * v37);
            uint64_t v81 = v80[1];
            uint64_t result = sub_186C3EA98((char *)(v10 + 16 * *v78), (char *)(v10 + 16LL * *v80), v10 + 16 * v81, v103);
            if (v1) {
              goto LABEL_93;
            }
            if (v81 < v79) {
              goto LABEL_116;
            }
            if (v37 > *(void *)(v77 + 16)) {
              goto LABEL_117;
            }
            *uint64_t v78 = v79;
            *(void *)(v35 + 16 * v76 + 8) = v81;
            unint64_t v82 = *(void *)(v77 + 16);
            if (v37 >= v82) {
              goto LABEL_118;
            }
            uint64_t v11 = v77;
            unint64_t v12 = v82 - 1;
            uint64_t result = (uint64_t)memmove((void *)(v35 + 16 * v37), v80 + 2, 16 * (v82 - 1 - v37));
            *(void *)(v77 + 16) = v82 - 1;
            uint64_t v10 = v102;
            if (v82 <= 2) {
              goto LABEL_15;
            }
          }
        }

        unint64_t v12 = 1LL;
LABEL_15:
        uint64_t v6 = v100;
        uint64_t v3 = v101;
        if (v9 >= v101)
        {
          uint64_t v8 = v99;
          goto LABEL_102;
        }
      }
    }

    uint64_t v8 = MEMORY[0x18961AFE8];
    ValueMetadata v103 = (char *)(MEMORY[0x18961AFE8] + 32LL);
    if (v3 == 1)
    {
      uint64_t v99 = MEMORY[0x18961AFE8];
      goto LABEL_13;
    }

    unint64_t v12 = *(void *)(MEMORY[0x18961AFE8] + 16LL);
    uint64_t v11 = MEMORY[0x18961AFE8];
LABEL_102:
    uint64_t result = v11;
    uint64_t v99 = v8;
    if (v12 >= 2)
    {
      uint64_t v90 = *v97;
      do
      {
        unint64_t v91 = v12 - 2;
        if (v12 < 2) {
          goto LABEL_131;
        }
        if (!v90) {
          goto LABEL_145;
        }
        uint64_t v92 = result;
        uint64_t v93 = *(void *)(result + 32 + 16 * v91);
        uint64_t v94 = *(void *)(result + 32 + 16 * (v12 - 1) + 8);
        uint64_t result = sub_186C3EA98( (char *)(v90 + 16 * v93),  (char *)(v90 + 16LL * *(void *)(result + 32 + 16 * (v12 - 1))),  v90 + 16 * v94,  v103);
        if (v1) {
          break;
        }
        if (v94 < v93) {
          goto LABEL_132;
        }
        uint64_t result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          uint64_t result = (uint64_t)sub_186BF91FC(v92);
          uint64_t v92 = result;
        }

        if (v91 >= *(void *)(v92 + 16)) {
          goto LABEL_133;
        }
        uint64_t v95 = (void *)(v92 + 32 + 16 * v91);
        *uint64_t v95 = v93;
        v95[1] = v94;
        unint64_t v96 = *(void *)(v92 + 16);
        if (v12 > v96) {
          goto LABEL_134;
        }
        memmove((void *)(v92 + 32 + 16 * (v12 - 1)), (const void *)(v92 + 32 + 16 * v12), 16 * (v96 - v12));
        uint64_t result = v92;
        *(void *)(v92 + 16) = v96 - 1;
        unint64_t v12 = v96 - 1;
      }

      while (v96 > 2);
    }

uint64_t sub_186C3EA98(char *__dst, char *__src, unint64_t a3, char *a4)
{
  uint64_t v4 = a4;
  uint64_t v6 = __src;
  uint64_t v7 = __dst;
  int64_t v8 = __src - __dst;
  int64_t v9 = __src - __dst + 15;
  if (__src - __dst >= 0) {
    int64_t v9 = __src - __dst;
  }
  uint64_t v10 = v9 >> 4;
  uint64_t v11 = a3 - (void)__src;
  uint64_t v12 = a3 - (void)__src + 15;
  uint64_t v13 = v12 >> 4;
  if (v10 >= v12 >> 4)
  {
    if (a4 != __src || &__src[16 * v13] <= a4) {
      memmove(a4, __src, 16 * v13);
    }
    uint64_t v14 = &v4[16 * v13];
    if (v7 >= v6 || v11 < 16) {
      goto LABEL_43;
    }
    uint64_t v18 = (char *)(a3 - 16);
    while (1)
    {
      uint64_t v19 = v18 + 16;
      if (*((void *)v6 - 1) >= *((void *)v14 - 1))
      {
        uint64_t v20 = v14 - 16;
        if (v19 != v14)
        {
          v14 -= 16;
          goto LABEL_40;
        }

        BOOL v21 = v18 >= v14;
        v14 -= 16;
        if (v21) {
          goto LABEL_40;
        }
      }

      else
      {
        uint64_t v20 = v6 - 16;
        if (v19 != v6)
        {
          v6 -= 16;
LABEL_40:
          *(_OWORD *)uint64_t v18 = *(_OWORD *)v20;
          goto LABEL_41;
        }

        BOOL v21 = v18 >= v6;
        v6 -= 16;
        if (v21) {
          goto LABEL_40;
        }
      }

char *sub_186C3ECBC(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_18C6A2CC0);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }

  else
  {
    uint64_t v10 = (char *)MEMORY[0x18961AFE8];
  }

  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0LL;
  }

  else
  {
    memcpy(v13, v14, 16 * v8);
  }

  swift_release();
  return v10;
}

void *sub_186C3EDB4(void *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4 + 64;
  uint64_t v5 = -1LL;
  uint64_t v6 = -1LL << *(_BYTE *)(a4 + 32);
  if (-v6 < 64) {
    uint64_t v5 = ~(-1LL << -(char)v6);
  }
  unint64_t v7 = v5 & *(void *)(a4 + 64);
  if (!a2)
  {
    int64_t v8 = 0LL;
    a3 = 0LL;
LABEL_35:
    *uint64_t result = a4;
    result[1] = v4;
    result[2] = ~v6;
    result[3] = v8;
    result[4] = v7;
    return (void *)a3;
  }

  if (!a3)
  {
    int64_t v8 = 0LL;
    goto LABEL_35;
  }

  if (a3 < 0)
  {
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }

  int64_t v8 = 0LL;
  uint64_t v9 = 0LL;
  int64_t v10 = (unint64_t)(63 - v6) >> 6;
  while (v7)
  {
    unint64_t v11 = __clz(__rbit64(v7));
    v7 &= v7 - 1;
    unint64_t v12 = v11 | (v8 << 6);
LABEL_8:
    ++v9;
    __int16 v13 = *(_WORD *)(*(void *)(a4 + 48) + 2 * v12);
    uint64_t v14 = *(void *)(*(void *)(a4 + 56) + 8 * v12);
    *(_WORD *)a2 = v13;
    *(void *)(a2 + 8) = v14;
    a2 += 16LL;
    if (v9 == a3) {
      goto LABEL_35;
    }
  }

  int64_t v15 = v8 + 1;
  if (__OFADD__(v8, 1LL))
  {
    __break(1u);
    goto LABEL_37;
  }

  if (v15 >= v10) {
    goto LABEL_30;
  }
  unint64_t v16 = *(void *)(v4 + 8 * v15);
  if (v16) {
    goto LABEL_19;
  }
  v8 += 2LL;
  if (v15 + 1 >= v10)
  {
    unint64_t v7 = 0LL;
    int64_t v8 = v15;
    goto LABEL_34;
  }

  unint64_t v16 = *(void *)(v4 + 8 * v8);
  if (v16)
  {
LABEL_15:
    int64_t v15 = v8;
LABEL_19:
    unint64_t v18 = __clz(__rbit64(v16));
    unint64_t v7 = (v16 - 1) & v16;
    unint64_t v12 = v18 + (v15 << 6);
    int64_t v8 = v15;
    goto LABEL_8;
  }

  int64_t v17 = v15 + 2;
  if (v15 + 2 >= v10) {
    goto LABEL_30;
  }
  unint64_t v16 = *(void *)(v4 + 8 * v17);
  if (v16)
  {
LABEL_18:
    int64_t v15 = v17;
    goto LABEL_19;
  }

  int64_t v8 = v15 + 3;
  if (v15 + 3 >= v10)
  {
    unint64_t v7 = 0LL;
    int64_t v8 = v15 + 2;
    goto LABEL_34;
  }

  unint64_t v16 = *(void *)(v4 + 8 * v8);
  if (v16) {
    goto LABEL_15;
  }
  int64_t v17 = v15 + 4;
  if (v15 + 4 >= v10)
  {
LABEL_30:
    unint64_t v7 = 0LL;
LABEL_34:
    a3 = v9;
    goto LABEL_35;
  }

  unint64_t v16 = *(void *)(v4 + 8 * v17);
  if (v16) {
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v15 = v17 + 1;
    if (__OFADD__(v17, 1LL)) {
      break;
    }
    if (v15 >= v10)
    {
      unint64_t v7 = 0LL;
      int64_t v8 = v10 - 1;
      goto LABEL_34;
    }

    unint64_t v16 = *(void *)(v4 + 8 * v15);
    ++v17;
    if (v16) {
      goto LABEL_19;
    }
  }

char *sub_186C3EF54(uint64_t a1)
{
  return sub_186C3ECBC(0LL, *(void *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_186C3EF68(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C6A26D8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_186C3EFB0()
{
  return sub_186C5B5D8();
}

uint64_t sub_186C3F00C()
{
  return sub_186C5B5C0();
}

uint64_t sub_186C3F048()
{
  return sub_186C5B5D8();
}

BOOL sub_186C3F0A0(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)a1 == *(_DWORD *)a2 && *(unsigned __int16 *)(a1 + 4) == *(unsigned __int16 *)(a2 + 4);
}

unint64_t sub_186C3F0C0(unint64_t result, uint64_t a2)
{
  uint64_t v4 = result;
  if (*(_DWORD *)(result + 48) != 117571592) {
    goto LABEL_7;
  }
  if (*(_BYTE *)(v2 + 72) == 2LL)
  {
    uint64_t result = ktrace_get_earliest_timestamp(a2);
    if (*(void *)v4 < result)
    {
LABEL_13:
      __break(1u);
      return result;
    }

    ktrace_get_ns_from_timestamp(a2, *(void *)v4 - result);
    uint64_t result = sub_186C080E0(1);
    *(void *)(v2 + 72) = result & 1;
    *(void *)(v2 + 80) = v5;
    *(void *)(v2 + 88) = v6;
  }

  uint64_t v7 = *(void *)(v2 + 64);
  BOOL v8 = __OFADD__(v7, 1LL);
  uint64_t v9 = v7 + 1;
  if (v8)
  {
    __break(1u);
    goto LABEL_13;
  }

  *(void *)(v2 + 64) = v9;
LABEL_7:
  uint64_t result = sub_186C036A4(v4);
  uint64_t v10 = *(void *)v4;
  if (*(void *)v4 < *(void *)(v2 + 32))
  {
    uint64_t result = sub_186C3F598( (uint64_t)v11,  *(unsigned int *)(v4 + 52) | ((unint64_t)(unsigned __int16)HIWORD(*(_DWORD *)(v4 + 48)) << 32));
    uint64_t v10 = *(void *)v4;
  }

  if (*(_BYTE *)(v2 + 24) == 1)
  {
    uint64_t result = ktrace_get_ns_from_timestamp(a2, v10);
    *(void *)(v2 + 16) = result;
    *(_BYTE *)(v2 + 24) = 0;
    uint64_t v10 = *(void *)v4;
  }

  *(void *)(v2 + 32) = v10;
  return result;
}

unint64_t sub_186C3F1D4(const void *a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for RecordingOptions.Options(0LL);
  MEMORY[0x1895F8858](v5);
  uint64_t v7 = (char *)&v17[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for KdebugAdvice();
  MEMORY[0x1895F8858](v8);
  uint64_t v10 = (void *)((char *)&v17[-1] - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  memcpy(v20, a1, 0x141uLL);
  uint64_t v11 = v2[8];
  if (*(void *)(v2[7] + 16)) {
    unint64_t v12 = 0xD000000000000063LL;
  }
  else {
    unint64_t v12 = 0LL;
  }
  if (v11 >= 1)
  {
    sub_186C3F6E4((uint64_t)(v2 + 9), (uint64_t)v18);
    sub_186C3F6E4((uint64_t)v18, (uint64_t)v19);
    if (v19[0] != 2LL)
    {
      uint64_t v14 = *v2;
      uint64_t v13 = v2[1];
      memcpy(v17, v20, 0x141uLL);
      sub_186C3F72C(a2, (uint64_t)v7);
      swift_bridgeObjectRetain();
      sub_186C23978((uint64_t)v20);
      sub_186C3C3E8(v17, v14, v13, (uint64_t)v7, v10);
      v17[0] = 0LL;
      v17[1] = 0xE000000000000000LL;
      sub_186C5B260();
      sub_186C5ADD4();
      sub_186C5ADD4();
      swift_bridgeObjectRelease();
      sub_186C5ADD4();
      uint64_t v16 = v11;
      sub_186C5B4DC();
      sub_186C5ADD4();
      swift_bridgeObjectRelease();
      sub_186C5ADD4();
      sub_186C5ADD4();
      swift_bridgeObjectRelease();
      sub_186C5ADD4();
      sub_186C5AF60();
      sub_186C5ADD4();
      sub_186C5ADD4();
      swift_bridgeObjectRelease();
      sub_186C5ADD4();
      sub_186C3B81C();
      sub_186C5ADD4();
      swift_bridgeObjectRelease();
      unint64_t v12 = v17[0];
      sub_186C3C85C((uint64_t)v10);
    }
  }

  return v12;
}

double sub_186C3F508@<D0>(uint64_t a1@<X8>)
{
  *(void *)a1 = sub_186C03804();
  *(void *)(a1 + 8) = v2;
  *(void *)(a1 + 16) = 0LL;
  *(_BYTE *)(a1 + 24) = 1;
  *(void *)(a1 + 32) = 0LL;
  *(void *)(a1 + 40) = 0LL;
  *(_BYTE *)(a1 + 48) = 1;
  *(void *)(a1 + 56) = MEMORY[0x18961AFF8];
  double result = 0.0;
  *(_OWORD *)(a1 + 64) = xmmword_186C61530;
  *(void *)(a1 + 88) = 0LL;
  *(void *)(a1 + 96) = 0LL;
  *(void *)(a1 + 80) = 0LL;
  *(_BYTE *)(a1 + 104) = 1;
  *(void *)(a1 + 112) = 0LL;
  *(_BYTE *)(a1 + 120) = 1;
  *(void *)(a1 + 128) = 0LL;
  *(_BYTE *)(a1 + 136) = 1;
  return result;
}

uint64_t sub_186C3F598(uint64_t a1, unint64_t a2)
{
  unint64_t v3 = a2;
  unint64_t v5 = HIDWORD(a2);
  uint64_t v6 = *v2;
  sub_186C5B59C();
  sub_186C5B5CC();
  sub_186C5B5C0();
  uint64_t v7 = sub_186C5B5D8();
  uint64_t v8 = -1LL << *(_BYTE *)(v6 + 32);
  unint64_t v9 = v7 & ~v8;
  if (((*(void *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v9) & 1) != 0)
  {
    uint64_t v10 = ~v8;
    while (1)
    {
      uint64_t v11 = *(void *)(v6 + 48) + 8 * v9;
      unint64_t v9 = (v9 + 1) & v10;
      if (((*(void *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v9) & 1) == 0) {
        goto LABEL_7;
      }
    }

    uint64_t result = 0LL;
    uint64_t v13 = *(void *)(*v2 + 48) + 8 * v9;
    LODWORD(v3) = *(_DWORD *)v13;
    LOWORD(v5) = *(_WORD *)(v13 + 4);
  }

  else
  {
LABEL_7:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v15 = *v2;
    *uint64_t v2 = 0x8000000000000000LL;
    sub_186C3FE28(v3 & 0xFFFFFFFFFFFFLL, v9, isUniquelyReferenced_nonNull_native);
    *uint64_t v2 = v15;
    swift_bridgeObjectRelease();
    uint64_t result = 1LL;
  }

  *(_DWORD *)a1 = v3;
  *(_WORD *)(a1 + 4) = v5;
  return result;
}

uint64_t sub_186C3F6E4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C6A2CD8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_186C3F72C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for RecordingOptions.Options(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

unint64_t sub_186C3F774()
{
  unint64_t result = qword_18C6A2CE0;
  if (!qword_18C6A2CE0)
  {
    unint64_t result = MEMORY[0x186E46630](&unk_186C61580, &type metadata for RetrogradeEvent);
    atomic_store(result, (unint64_t *)&qword_18C6A2CE0);
  }

  return result;
}

uint64_t __swift_memcpy6_4(uint64_t result, int *a2)
{
  int v2 = *a2;
  *(_WORD *)(result + 4) = *((_WORD *)a2 + 2);
  *(_DWORD *)unint64_t result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for RetrogradeEvent(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 6)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t storeEnumTagSinglePayload for RetrogradeEvent(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(_WORD *)(result + 4) = 0;
    *(_DWORD *)unint64_t result = a2 - 1;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }

  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }

  *(_BYTE *)(result + 6) = v3;
  return result;
}

ValueMetadata *type metadata accessor for RetrogradeEvent()
{
  return &type metadata for RetrogradeEvent;
}

uint64_t destroy for KdebugPostprocessing()
{
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for KdebugPostprocessing(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v4;
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  uint64_t v5 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  uint64_t v6 = *(void *)(a2 + 96);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = v6;
  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for KdebugPostprocessing(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  uint64_t v4 = *(void *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  uint64_t v5 = *(void *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(void *)(a1 + 40) = v5;
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  __int128 v6 = *(_OWORD *)(a2 + 72);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(_OWORD *)(a1 + 72) = v6;
  uint64_t v7 = *(void *)(a2 + 96);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  *(void *)(a1 + 96) = v7;
  uint64_t v8 = *(void *)(a2 + 112);
  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
  *(void *)(a1 + 112) = v8;
  uint64_t v9 = *(void *)(a2 + 128);
  *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
  *(void *)(a1 + 128) = v9;
  return a1;
}

__n128 __swift_memcpy137_8(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  __int128 v2 = *(_OWORD *)(a2 + 16);
  __int128 v3 = *(_OWORD *)(a2 + 32);
  __int128 v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 32) = v3;
  __n128 result = *(__n128 *)(a2 + 80);
  __int128 v6 = *(_OWORD *)(a2 + 96);
  __int128 v7 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 121) = *(_OWORD *)(a2 + 121);
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 112) = v7;
  *(__n128 *)(a1 + 80) = result;
  return result;
}

uint64_t assignWithTake for KdebugPostprocessing(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v4;
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v5;
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  uint64_t v6 = *(void *)(a2 + 96);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = v6;
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
  *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  return a1;
}

uint64_t getEnumTagSinglePayload for KdebugPostprocessing(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *((_BYTE *)a1 + 137)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for KdebugPostprocessing(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 136) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 137) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 137) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for KdebugPostprocessing()
{
  return &type metadata for KdebugPostprocessing;
}

uint64_t sub_186C3FB4C()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C6A2CE8);
  uint64_t result = sub_186C5B23C();
  uint64_t v4 = result;
  if (*(void *)(v2 + 16))
  {
    int64_t v5 = 0LL;
    uint64_t v29 = (void *)(v2 + 56);
    uint64_t v6 = 1LL << *(_BYTE *)(v2 + 32);
    if (v6 < 64) {
      uint64_t v7 = ~(-1LL << v6);
    }
    else {
      uint64_t v7 = -1LL;
    }
    unint64_t v8 = v7 & *(void *)(v2 + 56);
    int64_t v9 = (unint64_t)(v6 + 63) >> 6;
    uint64_t v10 = result + 56;
    while (1)
    {
      if (v8)
      {
        unint64_t v13 = __clz(__rbit64(v8));
        v8 &= v8 - 1;
        unint64_t v14 = v13 | (v5 << 6);
      }

      else
      {
        int64_t v15 = v5 + 1;
        if (__OFADD__(v5, 1LL))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }

        if (v15 >= v9) {
          goto LABEL_33;
        }
        unint64_t v16 = v29[v15];
        ++v5;
        if (!v16)
        {
          int64_t v5 = v15 + 1;
          if (v15 + 1 >= v9) {
            goto LABEL_33;
          }
          unint64_t v16 = v29[v5];
          if (!v16)
          {
            int64_t v5 = v15 + 2;
            if (v15 + 2 >= v9) {
              goto LABEL_33;
            }
            unint64_t v16 = v29[v5];
            if (!v16)
            {
              int64_t v17 = v15 + 3;
              if (v17 >= v9)
              {
LABEL_33:
                uint64_t v28 = 1LL << *(_BYTE *)(v2 + 32);
                if (v28 > 63) {
                  bzero(v29, ((unint64_t)(v28 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
                }
                else {
                  *uint64_t v29 = -1LL << v28;
                }
                uint64_t v1 = v0;
                *(void *)(v2 + 16) = 0LL;
                break;
              }

              unint64_t v16 = v29[v17];
              if (!v16)
              {
                while (1)
                {
                  int64_t v5 = v17 + 1;
                  if (__OFADD__(v17, 1LL)) {
                    goto LABEL_39;
                  }
                  if (v5 >= v9) {
                    goto LABEL_33;
                  }
                  unint64_t v16 = v29[v5];
                  ++v17;
                  if (v16) {
                    goto LABEL_23;
                  }
                }
              }

              int64_t v5 = v17;
            }
          }
        }

unint64_t sub_186C3FE28(unint64_t result, unint64_t a2, char a3)
{
  int v5 = result;
  unint64_t v6 = HIDWORD(result);
  unint64_t v7 = *(void *)(*v3 + 16);
  unint64_t v8 = *(void *)(*v3 + 24);
  if (v8 > v7 && (a3 & 1) != 0) {
    goto LABEL_14;
  }
  if ((a3 & 1) != 0)
  {
    sub_186C3FB4C();
  }

  else
  {
    if (v8 > v7)
    {
      uint64_t result = (unint64_t)sub_186C3FF94();
      goto LABEL_14;
    }

    sub_186C40138();
  }

  uint64_t v9 = *v3;
  sub_186C5B59C();
  sub_186C5B5CC();
  sub_186C5B5C0();
  uint64_t result = sub_186C5B5D8();
  uint64_t v10 = -1LL << *(_BYTE *)(v9 + 32);
  a2 = result & ~v10;
  if (((*(void *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a2) & 1) != 0)
  {
    uint64_t v11 = ~v10;
    while (1)
    {
      uint64_t v12 = *(void *)(v9 + 48) + 8 * a2;
      a2 = (a2 + 1) & v11;
      if (((*(void *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a2) & 1) == 0) {
        goto LABEL_14;
      }
    }

    uint64_t result = sub_186C5B524();
    __break(1u);
  }

void *sub_186C3FF94()
{
  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C6A2CE8);
  uint64_t v2 = *v0;
  uint64_t v3 = sub_186C5B230();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }

  uint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_30;
    }

    if (v20 >= v13) {
      goto LABEL_28;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21)
      {
        int64_t v9 = v20 + 2;
        if (v20 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v21 = *(void *)(v6 + 8 * v9);
        if (!v21) {
          break;
        }
      }
    }

uint64_t sub_186C40138()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C6A2CE8);
  uint64_t result = sub_186C5B23C();
  uint64_t v4 = result;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *uint64_t v1 = v4;
    return result;
  }

  int64_t v5 = 0LL;
  uint64_t v6 = v2 + 56;
  uint64_t v7 = 1LL << *(_BYTE *)(v2 + 32);
  if (v7 < 64) {
    uint64_t v8 = ~(-1LL << v7);
  }
  else {
    uint64_t v8 = -1LL;
  }
  unint64_t v9 = v8 & *(void *)(v2 + 56);
  int64_t v28 = (unint64_t)(v7 + 63) >> 6;
  uint64_t v10 = result + 56;
  while (1)
  {
    if (v9)
    {
      unint64_t v13 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      unint64_t v14 = v13 | (v5 << 6);
      goto LABEL_24;
    }

    int64_t v15 = v5 + 1;
    if (__OFADD__(v5, 1LL))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }

    if (v15 >= v28) {
      goto LABEL_33;
    }
    unint64_t v16 = *(void *)(v6 + 8 * v15);
    ++v5;
    if (!v16)
    {
      int64_t v5 = v15 + 1;
      if (v15 + 1 >= v28) {
        goto LABEL_33;
      }
      unint64_t v16 = *(void *)(v6 + 8 * v5);
      if (!v16)
      {
        int64_t v5 = v15 + 2;
        if (v15 + 2 >= v28) {
          goto LABEL_33;
        }
        unint64_t v16 = *(void *)(v6 + 8 * v5);
        if (!v16) {
          break;
        }
      }
    }

uint64_t sub_186C403E0(void *a1)
{
  return sub_186C40418(a1);
}

uint64_t sub_186C40418(void *a1)
{
  uint64_t v2 = *v1;
  __int128 v3 = *((_OWORD *)a1 + 1);
  *((_OWORD *)v1 + 1) = *(_OWORD *)a1;
  *((_OWORD *)v1 + 2) = v3;
  *((_BYTE *)v1 + 48) = *((_BYTE *)a1 + 32);
  uint64_t v4 = *((char *)a1 + 8);
  unint64_t v5 = *(void *)&asc_186C61C98[8 * v4];
  v1[7] = v5;
  uint64_t v6 = (uint64_t *)*a1;
  uint64_t v7 = ktrace_chunk_size_t(*a1);
  if (__OFSUB__(v7, v5))
  {
    __break(1u);
    JUMPOUT(0x186C404F8LL);
  }

  if (ktrace_chunk_map_data(v6, v5, v7 - v5)) {
    __asm { BR              X11 }
  }

  type metadata accessor for EventChunkData(0LL, *(void *)(v2 + 80), v8, v9);
  swift_deallocPartialClassInstance();
  return 0LL;
}

uint64_t type metadata accessor for EventChunkData(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for EventChunkData);
}

void sub_186C4051C()
{
  __asm { BR              X10 }

uint64_t sub_186C405A4()
{
  unint64_t v5 = ((uint64_t (*)(void))ktrace_chunk_size_t)(*(void *)(v2 + 16)) / 64;
  if ((uint64_t)v5 >= 1)
  {
    uint64_t v6 = 0LL;
    uint64_t v7 = *(void *)(v2 + 64);
    while (1)
    {
      uint64_t v8 = v5 >> 1;
      uint64_t v9 = v6 + (v5 >> 1);
      if (__OFADD__(v6, v5 >> 1)) {
        break;
      }
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v1, v7 + *(void *)(v3 + 72) * v9, v0);
      char v10 = (*(uint64_t (**)(uint64_t))(v4 - 88))(v1);
      (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v0);
      if ((v10 & 1) == 0)
      {
        uint64_t v6 = v9 + 1;
        if (__OFADD__(v9, 1LL)) {
          goto LABEL_11;
        }
        uint64_t v8 = v5 + ~v8;
      }

      unint64_t v5 = v8;
      if (v8 <= 0) {
        return v6;
      }
    }

    __break(1u);
LABEL_11:
    __break(1u);
    JUMPOUT(0x186C4066CLL);
  }

  return 0LL;
}

uint64_t sub_186C40680(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v46 = *MEMORY[0x1895F89C0];
  uint64_t v42 = a4;
  uint64_t v43 = a5;
  uint64_t v44 = a2;
  uint64_t v45 = a3;
  unint64_t v11 = *(uint64_t (**)(BOOL (*)(uint64_t), _BYTE *))(*v5 + 120LL);
  uint64_t v12 = v11(sub_186C48568, v41);
  char v14 = v13;
  uint64_t v37 = a4;
  uint64_t v38 = a5;
  uint64_t v39 = a2;
  uint64_t v40 = a3;
  uint64_t result = v11(sub_186C485C4, v36);
  uint64_t v17 = v5[8];
  if (!v17) {
    goto LABEL_24;
  }
  if ((v14 & 1) != 0)
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
  }

  if ((v16 & 1) != 0) {
    goto LABEL_26;
  }
  uint64_t v18 = result;
  if (v12 < result)
  {
    while (1)
    {
      uint64_t v19 = v5[2];
      int v20 = ktrace_chunk_tag(v19);
      __int16 v21 = ktrace_chunk_version_major(v19);
      __int16 v22 = ktrace_chunk_version_minor(v19);
      appended = ktrace_file_append_start(a1, v20, v21, v22);
      if (!appended)
      {
        int v29 = MEMORY[0x186E445C0]();
        sub_186C4122C();
        swift_allocError();
        *(void *)uint64_t v30 = 0xD000000000000015LL;
        *(void *)(v30 + 8) = 0x8000000186C67740LL;
        *(_DWORD *)(v30 + 16) = v29;
        *(_BYTE *)(v30 + 20) = 1;
        return swift_willThrow();
      }

      uint64_t v24 = (uint64_t)appended;
      if ((uint64_t)v5[7] > 0)
      {
        *(void *)bytes = 0LL;
        int v25 = ktrace_file_append_data(a1, (uint64_t)appended, bytes, 8LL);
        if (v25) {
          break;
        }
      }

      if (__OFSUB__(v18, v12))
      {
        __break(1u);
LABEL_22:
        __break(1u);
LABEL_23:
        __break(1u);
LABEL_24:
        __break(1u);
        goto LABEL_25;
      }

      if (v18 - v12 >= 0x1FFFFFF) {
        uint64_t v26 = 0x1FFFFFFLL;
      }
      else {
        uint64_t v26 = v18 - v12;
      }
      int v27 = ktrace_file_append_data(a1, v24, (UInt8 *)(v17 + (v12 << 6)), v26 << 6);
      if (v27)
      {
        int v31 = v27;
        sub_186C4122C();
        swift_allocError();
        unint64_t v33 = 0xD000000000000014LL;
        unint64_t v34 = "appending event data";
        goto LABEL_20;
      }

      BOOL v28 = __OFADD__(v12, v26);
      v12 += v26;
      if (v28) {
        goto LABEL_23;
      }
      uint64_t result = ktrace_file_append_finish(a1, v24);
      if (v12 >= v18) {
        return result;
      }
    }

    int v31 = v25;
    sub_186C4122C();
    swift_allocError();
    unint64_t v33 = 0xD000000000000016LL;
    unint64_t v34 = "appending event header";
LABEL_20:
    *(void *)uint64_t v32 = v33;
    *(void *)(v32 + 8) = (unint64_t)(v34 - 32) | 0x8000000000000000LL;
    *(_DWORD *)(v32 + 16) = v31;
    *(_BYTE *)(v32 + 20) = 1;
    swift_willThrow();
    return ktrace_file_append_finish(a1, v24);
  }

  return result;
}

uint64_t sub_186C40944(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v46 = *MEMORY[0x1895F89C0];
  uint64_t v42 = a4;
  uint64_t v43 = a5;
  uint64_t v44 = a2;
  uint64_t v45 = a3;
  unint64_t v11 = *(uint64_t (**)(BOOL (*)(uint64_t *), _BYTE *))(*v5 + 120LL);
  uint64_t v12 = v11(sub_186C48620, v41);
  char v14 = v13;
  uint64_t v37 = a4;
  uint64_t v38 = a5;
  uint64_t v39 = a2;
  uint64_t v40 = a3;
  uint64_t result = v11(sub_186C48674, v36);
  uint64_t v17 = v5[8];
  if (!v17) {
    goto LABEL_24;
  }
  if ((v14 & 1) != 0)
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
  }

  if ((v16 & 1) != 0) {
    goto LABEL_26;
  }
  uint64_t v18 = result;
  if (v12 < result)
  {
    while (1)
    {
      uint64_t v19 = v5[2];
      int v20 = ktrace_chunk_tag(v19);
      __int16 v21 = ktrace_chunk_version_major(v19);
      __int16 v22 = ktrace_chunk_version_minor(v19);
      appended = ktrace_file_append_start(a1, v20, v21, v22);
      if (!appended)
      {
        int v29 = MEMORY[0x186E445C0]();
        sub_186C4122C();
        swift_allocError();
        *(void *)uint64_t v30 = 0xD000000000000015LL;
        *(void *)(v30 + 8) = 0x8000000186C67740LL;
        *(_DWORD *)(v30 + 16) = v29;
        *(_BYTE *)(v30 + 20) = 1;
        return swift_willThrow();
      }

      uint64_t v24 = (uint64_t)appended;
      if ((uint64_t)v5[7] > 0)
      {
        *(void *)bytes = 0LL;
        int v25 = ktrace_file_append_data(a1, (uint64_t)appended, bytes, 8LL);
        if (v25) {
          break;
        }
      }

      if (__OFSUB__(v18, v12))
      {
        __break(1u);
LABEL_22:
        __break(1u);
LABEL_23:
        __break(1u);
LABEL_24:
        __break(1u);
        goto LABEL_25;
      }

      if (v18 - v12 >= 0x3FFFFFF) {
        uint64_t v26 = 0x3FFFFFFLL;
      }
      else {
        uint64_t v26 = v18 - v12;
      }
      int v27 = ktrace_file_append_data(a1, v24, (UInt8 *)(v17 + 32 * v12), 32 * v26);
      if (v27)
      {
        int v31 = v27;
        sub_186C4122C();
        swift_allocError();
        unint64_t v33 = 0xD000000000000014LL;
        unint64_t v34 = "appending event data";
        goto LABEL_20;
      }

      BOOL v28 = __OFADD__(v12, v26);
      v12 += v26;
      if (v28) {
        goto LABEL_23;
      }
      uint64_t result = ktrace_file_append_finish(a1, v24);
      if (v12 >= v18) {
        return result;
      }
    }

    int v31 = v25;
    sub_186C4122C();
    swift_allocError();
    unint64_t v33 = 0xD000000000000016LL;
    unint64_t v34 = "appending event header";
LABEL_20:
    *(void *)uint64_t v32 = v33;
    *(void *)(v32 + 8) = (unint64_t)(v34 - 32) | 0x8000000000000000LL;
    *(_DWORD *)(v32 + 16) = v31;
    *(_BYTE *)(v32 + 20) = 1;
    swift_willThrow();
    return ktrace_file_append_finish(a1, v24);
  }

  return result;
}

uint64_t sub_186C40C08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v46 = *MEMORY[0x1895F89C0];
  uint64_t v42 = a4;
  uint64_t v43 = a5;
  uint64_t v44 = a2;
  uint64_t v45 = a3;
  unint64_t v11 = *(uint64_t (**)(BOOL (*)(uint64_t), _BYTE *))(*v5 + 120LL);
  uint64_t v12 = v11(sub_186C486C8, v41);
  char v14 = v13;
  uint64_t v37 = a4;
  uint64_t v38 = a5;
  uint64_t v39 = a2;
  uint64_t v40 = a3;
  uint64_t result = v11(sub_186C4871C, v36);
  uint64_t v17 = v5[8];
  if (!v17) {
    goto LABEL_24;
  }
  if ((v14 & 1) != 0)
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
  }

  if ((v16 & 1) != 0) {
    goto LABEL_26;
  }
  uint64_t v18 = result;
  if (v12 < result)
  {
    while (1)
    {
      uint64_t v19 = v5[2];
      int v20 = ktrace_chunk_tag(v19);
      __int16 v21 = ktrace_chunk_version_major(v19);
      __int16 v22 = ktrace_chunk_version_minor(v19);
      appended = ktrace_file_append_start(a1, v20, v21, v22);
      if (!appended)
      {
        int v29 = MEMORY[0x186E445C0]();
        sub_186C4122C();
        swift_allocError();
        *(void *)uint64_t v30 = 0xD000000000000015LL;
        *(void *)(v30 + 8) = 0x8000000186C67740LL;
        *(_DWORD *)(v30 + 16) = v29;
        *(_BYTE *)(v30 + 20) = 1;
        return swift_willThrow();
      }

      uint64_t v24 = (uint64_t)appended;
      if ((uint64_t)v5[7] > 0)
      {
        *(void *)bytes = 0LL;
        int v25 = ktrace_file_append_data(a1, (uint64_t)appended, bytes, 8LL);
        if (v25) {
          break;
        }
      }

      if (__OFSUB__(v18, v12))
      {
        __break(1u);
LABEL_22:
        __break(1u);
LABEL_23:
        __break(1u);
LABEL_24:
        __break(1u);
        goto LABEL_25;
      }

      if (v18 - v12 >= 44739242) {
        uint64_t v26 = 44739242LL;
      }
      else {
        uint64_t v26 = v18 - v12;
      }
      int v27 = ktrace_file_append_data(a1, v24, (UInt8 *)(v17 + 48 * v12), 48 * v26);
      if (v27)
      {
        int v31 = v27;
        sub_186C4122C();
        swift_allocError();
        unint64_t v33 = 0xD000000000000014LL;
        unint64_t v34 = "appending event data";
        goto LABEL_20;
      }

      BOOL v28 = __OFADD__(v12, v26);
      v12 += v26;
      if (v28) {
        goto LABEL_23;
      }
      uint64_t result = ktrace_file_append_finish(a1, v24);
      if (v12 >= v18) {
        return result;
      }
    }

    int v31 = v25;
    sub_186C4122C();
    swift_allocError();
    unint64_t v33 = 0xD000000000000016LL;
    unint64_t v34 = "appending event header";
LABEL_20:
    *(void *)uint64_t v32 = v33;
    *(void *)(v32 + 8) = (unint64_t)(v34 - 32) | 0x8000000000000000LL;
    *(_DWORD *)(v32 + 16) = v31;
    *(_BYTE *)(v32 + 20) = 1;
    swift_willThrow();
    return ktrace_file_append_finish(a1, v24);
  }

  return result;
}

uint64_t sub_186C40ED0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v53 = *MEMORY[0x1895F89C0];
  uint64_t v11 = *v5;
  uint64_t v48 = *(void *)(*v5 + 80LL);
  uint64_t v12 = v48;
  uint64_t v49 = a4;
  uint64_t v50 = a5;
  uint64_t v51 = a2;
  uint64_t v52 = a3;
  char v13 = *(uint64_t (**)(BOOL (*)(), _BYTE *))(v11 + 120);
  uint64_t v14 = v13(sub_186C411CC, v47);
  char v37 = v15;
  uint64_t v42 = v12;
  uint64_t v43 = a4;
  uint64_t v44 = a5;
  uint64_t v45 = a2;
  uint64_t v46 = a3;
  uint64_t v16 = v13(sub_186C411FC, v41);
  char v18 = v17;
  uint64_t result = sub_186C5B08C();
  uint64_t v39 = result;
  if (!result) {
    goto LABEL_26;
  }
  uint64_t v38 = *(void *)(v12 - 8);
  uint64_t v20 = *(void *)(v38 + 64);
  if (!v20) {
    goto LABEL_25;
  }
  if ((v37 & 1) != 0)
  {
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
  }

  if ((v18 & 1) != 0) {
    goto LABEL_28;
  }
  if (v14 < v16)
  {
    while (1)
    {
      uint64_t v21 = v5[2];
      int v22 = ktrace_chunk_tag(v21);
      __int16 v23 = ktrace_chunk_version_major(v21);
      __int16 v24 = ktrace_chunk_version_minor(v21);
      appended = ktrace_file_append_start(a1, v22, v23, v24);
      if (!appended)
      {
        int v31 = MEMORY[0x186E445C0]();
        sub_186C4122C();
        swift_allocError();
        *(void *)uint64_t v32 = 0xD000000000000015LL;
        *(void *)(v32 + 8) = 0x8000000186C67740LL;
        *(_DWORD *)(v32 + 16) = v31;
        *(_BYTE *)(v32 + 20) = 1;
        return swift_willThrow();
      }

      uint64_t v26 = (uint64_t)appended;
      if ((uint64_t)v5[7] >= 1)
      {
        *(void *)bytes = 0LL;
        int v27 = ktrace_file_append_data(a1, (uint64_t)appended, bytes, 8LL);
        if (v27) {
          break;
        }
      }

      if (__OFSUB__(v16, v14))
      {
        __break(1u);
LABEL_23:
        __break(1u);
LABEL_24:
        __break(1u);
LABEL_25:
        __break(1u);
LABEL_26:
        __break(1u);
        goto LABEL_27;
      }

      if (0x7FFFFFFF / v20 >= v16 - v14) {
        uint64_t v28 = v16 - v14;
      }
      else {
        uint64_t v28 = 0x7FFFFFFF / v20;
      }
      int v29 = ktrace_file_append_data(a1, v26, (UInt8 *)(v39 + *(void *)(v38 + 72) * v14), v28 * v20);
      if (v29)
      {
        int v33 = v29;
        sub_186C4122C();
        swift_allocError();
        unint64_t v35 = 0xD000000000000014LL;
        uint64_t v36 = "appending event data";
        goto LABEL_21;
      }

      BOOL v30 = __OFADD__(v14, v28);
      v14 += v28;
      if (v30) {
        goto LABEL_24;
      }
      uint64_t result = ktrace_file_append_finish(a1, v26);
      if (v14 >= v16) {
        return result;
      }
    }

    int v33 = v27;
    sub_186C4122C();
    swift_allocError();
    unint64_t v35 = 0xD000000000000016LL;
    uint64_t v36 = "appending event header";
LABEL_21:
    *(void *)uint64_t v34 = v35;
    *(void *)(v34 + 8) = (unint64_t)(v36 - 32) | 0x8000000000000000LL;
    *(_DWORD *)(v34 + 16) = v33;
    *(_BYTE *)(v34 + 20) = 1;
    swift_willThrow();
    return ktrace_file_append_finish(a1, v26);
  }

  return result;
}

BOOL sub_186C411CC()
{
  unint64_t v1 = *(void *)(v0 + 40);
  return (*(uint64_t (**)(void))(v0 + 24))() > v1;
}

BOOL sub_186C411FC()
{
  unint64_t v1 = *(void *)(v0 + 48);
  return (*(uint64_t (**)(void))(v0 + 24))() > v1;
}

unint64_t sub_186C4122C()
{
  unint64_t result = qword_18C6A2CF0;
  if (!qword_18C6A2CF0)
  {
    unint64_t result = MEMORY[0x186E46630](&unk_186C61694, &type metadata for EventChunk.Err);
    atomic_store(result, (unint64_t *)&qword_18C6A2CF0);
  }

  return result;
}

unint64_t sub_186C41270()
{
  uint64_t v1 = *(void *)(v0 + 16);
  unint64_t result = ktrace_chunk_size_t(v1);
  uint64_t v3 = *(void *)(v0 + 56);
  uint64_t v4 = result - v3;
  if (__OFSUB__(result, v3))
  {
    __break(1u);
  }

  else
  {
    unint64_t result = sub_186C5B08C();
    if (result)
    {
      ktrace_chunk_unmap_data(v1, result, v4);
      return v0;
    }
  }

  __break(1u);
  return result;
}

uint64_t sub_186C412D8()
{
  return swift_deallocClassInstance();
}

uint64_t sub_186C412F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((a3 & 0x100000000LL) != 0)
  {
    sub_186C5B260();
    swift_bridgeObjectRelease();
    strcpy((char *)v4, "file I/O for ");
    HIWORD(v4[1]) = -4864;
    sub_186C5ADD4();
    sub_186C5ADD4();
    sub_186C5B4DC();
    sub_186C5ADD4();
    swift_bridgeObjectRelease();
  }

  else
  {
    sub_186C5B260();
    swift_bridgeObjectRelease();
    v4[0] = 0xD000000000000018LL;
    v4[1] = 0x8000000186C677A0LL;
    sub_186C5ADD4();
  }

  return v4[0];
}

uint64_t sub_186C41420()
{
  return sub_186C412F8( *(void *)v0,  *(void *)(v0 + 8),  *(unsigned int *)(v0 + 16) | ((unint64_t)*(unsigned __int8 *)(v0 + 20) << 32));
}

uint64_t sub_186C41444(uint64_t a1)
{
  return a1;
}

uint64_t sub_186C414F8()
{
  return sub_186C41444(*v0);
}

uint64_t sub_186C41504( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v21[1] = *MEMORY[0x1895F89C0];
  v21[0] = 0LL;
  int v9 = ktrace_file_earliest_timestamp(a1, v21, a3, a4, a5, a6, a7, a8);
  if (v9)
  {
    int v16 = v9;
    sub_186C453B0();
    swift_allocError();
    *(void *)uint64_t v17 = 0xD000000000000012LL;
    *(void *)(v17 + 8) = 0x8000000186C677E0LL;
LABEL_5:
    *(_DWORD *)(v17 + 16) = v16;
    return swift_willThrow();
  }

  uint64_t v20 = 0LL;
  int v18 = ktrace_file_latest_timestamp(a1, &v20, v10, v11, v12, v13, v14, v15);
  if (v18)
  {
    int v16 = v18;
    sub_186C453B0();
    swift_allocError();
    *(void *)uint64_t v17 = 0xD000000000000010LL;
    *(void *)(v17 + 8) = 0x8000000186C67800LL;
    goto LABEL_5;
  }

  return v21[0];
}

void sub_186C41624(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  __asm { BR              X10 }

unint64_t sub_186C41660(uint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v6 = sub_186C2CB0C(v3, a3);
  unint64_t v7 = v4 + v6;
  if (__CFADD__(v4, v6))
  {
    __break(1u);
    JUMPOUT(0x186C417A8LL);
  }

  if (v7 > v5)
  {
    type metadata accessor for TrimError(0LL);
    sub_186BFCB04(&qword_18C6A2D08, type metadata accessor for TrimError, (uint64_t)&unk_186C6185C);
    swift_allocError();
    *uint64_t v8 = 0xD00000000000001FLL;
    v8[1] = 0x8000000186C67850LL;
    void v8[2] = v7;
    v8[3] = v5;
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
  }

  return v7;
}

void sub_186C417BC(uint64_t a1, char a2)
{
  __asm { BR              X10 }

uint64_t sub_186C417EC()
{
  return 64LL;
}

void sub_186C418C4(uint64_t a1, char a2)
{
  __asm { BR              X10 }

unint64_t sub_186C418F4()
{
  return 0xD000000000000010LL;
}

void sub_186C41A54()
{
}

uint64_t sub_186C41A60(uint64_t a1)
{
  return sub_186C45BBC(*(void *)a1, *(_BYTE *)(a1 + 8));
}

void sub_186C41A78()
{
  uint64_t v1 = sub_186C5AC48();
  MEMORY[0x1895F8858](v1);
  uint64_t v2 = type metadata accessor for TrimError(0LL);
  MEMORY[0x1895F8858](v2);
  sub_186C3A868(v0, (uint64_t)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL), v4);
  unint64_t v5 = (char *)sub_186C41B44 + 4 * word_186C615EE[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }

uint64_t sub_186C41B44()
{
  int v5 = *(_DWORD *)(v1 + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_18C6A2D18) + 48));
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v2, v1, v0);
  *(void *)(v4 - 80) = 0LL;
  *(void *)(v4 - 72) = 0xE000000000000000LL;
  sub_186C5B260();
  sub_186BFCB04(&qword_18C6A2D10, (uint64_t (*)(uint64_t))MEMORY[0x18961BBF0], MEMORY[0x18961BC00]);
  uint64_t v6 = sub_186C5B4DC();
  uint64_t v8 = v7;
  swift_bridgeObjectRelease();
  *(void *)(v4 - 80) = v6;
  *(void *)(v4 - 72) = v8;
  sub_186C5ADD4();
  *(_DWORD *)(v4 - 88) = v5;
  sub_186C5B4DC();
  sub_186C5ADD4();
  swift_bridgeObjectRelease();
  uint64_t v9 = *(void *)(v4 - 80);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v0);
  return v9;
}

uint64_t sub_186C42024@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v91 = a3;
  uint64_t v89 = a6;
  uint64_t v84 = sub_186C5AC48();
  uint64_t v86 = *(void *)(v84 - 8);
  uint64_t v10 = MEMORY[0x1895F8858](v84);
  unint64_t v82 = (char *)v78 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v10);
  uint64_t v83 = (char *)v78 - v12;
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C6A2D20);
  MEMORY[0x1895F8858](v13);
  uint64_t v85 = (char *)v78 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = type metadata accessor for TrimOptions(0LL);
  uint64_t v88 = *(void *)(v15 - 8);
  uint64_t v16 = MEMORY[0x1895F8858](v15);
  int v18 = (char *)v78 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v90 = v16;
  uint64_t v19 = *(int *)(v16 + 32);
  uint64_t v87 = v18;
  v18[v19] = 0;
  uint64_t v20 = swift_allocObject();
  *(void *)(v20 + 16) = a4;
  *(void *)(v20 + 24) = a5;
  uint64_t v115 = a5;
  swift_retain();
  uint64_t v21 = sub_186C019C8();
  uint64_t v22 = sub_186C019D4();
  uint64_t v23 = sub_186C019D4();
  v77.n128_u64[1] = v22;
  *((void *)&v76 + 1) = v20;
  v77.n128_u64[0] = (unint64_t)v21;
  *(void *)&__int128 v76 = sub_186C45C78;
  *(void *)&__int128 v75 = 0xD000000000000049LL;
  *((void *)&v75 + 1) = 0x8000000186C67AD0LL;
  sub_186C019E0( a1,  a2,  (uint64_t)sub_186C42D7C,  0LL,  0xD000000000000024LL,  0x8000000186C679E0LL,  0xD0000000000000BFLL,  0x8000000186C67A10LL,  (uint64_t)&v104,  v75,  0,  v76,  v77,  v23);
  uint64_t v24 = swift_allocObject();
  *(void *)(v24 + 16) = 0LL;
  *(_BYTE *)(v24 + 24) = 3;
  swift_retain();
  char v25 = sub_186BFDFF4();
  sub_186BFF3C4( 1836020326LL,  0xE400000000000000LL,  0xD00000000000001FLL,  0x8000000186C67B20LL,  0LL,  0LL,  v25 & 1,  (uint64_t)sub_186C45CA8,  v24);
  swift_release();
  uint64_t v26 = swift_allocObject();
  *(void *)(v26 + 16) = 1LL;
  *(_BYTE *)(v26 + 24) = 3;
  swift_retain();
  char v27 = sub_186BFDFF4();
  sub_186BFF3C4( 28532LL,  0xE200000000000000LL,  0xD000000000000020LL,  0x8000000186C67B40LL,  0LL,  0LL,  v27 & 1,  (uint64_t)sub_186C45CA8,  v26);
  swift_release();
  uint64_t v28 = swift_allocObject();
  *(void *)(v28 + 16) = 0LL;
  *(void *)(v28 + 24) = 0LL;
  swift_retain();
  char v29 = sub_186BFDFF4();
  sub_186BFF3C4( 0x74757074756FLL,  0xE600000000000000LL,  0xD00000000000001CLL,  0x8000000186C67B70LL,  111LL,  0xE100000000000000LL,  v29 & 1,  (uint64_t)sub_186C45D54,  v28);
  swift_release();
  v113[6] = v110;
  v113[7] = v111;
  uint64_t v114 = v112;
  v113[2] = v106;
  v113[3] = v107;
  v113[4] = v108;
  v113[5] = v109;
  v113[0] = v104;
  v113[1] = v105;
  sub_186C45DB4(v113);
  uint64_t v30 = v92;
  unint64_t v31 = sub_186C0026C(v91);
  if (v30)
  {
    swift_bridgeObjectRelease();
    sub_186C45E80(v113);
    swift_release();
    sub_186C45E80(v113);
    swift_release();
    swift_release();
    return swift_release();
  }

  uint64_t v80 = (void *)(v26 + 16);
  uint64_t v81 = v28;
  uint64_t v92 = v26;
  unint64_t v33 = v31;
  swift_bridgeObjectRelease();
  sub_186C45E80(v113);
  if (!v33)
  {
    swift_release();
    sub_186C45E80(v113);
    swift_release();
    swift_release();
    swift_release();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v88 + 56))(v89, 1LL, 1LL, v90);
  }

  uint64_t v91 = 0LL;
  unint64_t v34 = *(void *)(v33 + 16);
  if (!v34)
  {
    swift_bridgeObjectRelease();
    type metadata accessor for TrimError(0LL);
    sub_186BFCB04(&qword_18C6A2D08, type metadata accessor for TrimError, (uint64_t)&unk_186C6185C);
    swift_allocError();
    *char v37 = 0xD000000000000020LL;
    v37[1] = 0x8000000186C67BF0LL;
    goto LABEL_14;
  }

  uint64_t v79 = v24;
  if (v34 == 1)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    swift_beginAccess();
    unint64_t v35 = v80;
    if (*(unsigned __int8 *)(v24 + 24) >= 3u && !*(void *)(v24 + 16))
    {
      swift_beginAccess();
      if (*(unsigned __int8 *)(v92 + 24) >= 3u)
      {
        if (*v35)
        {
          swift_bridgeObjectRelease();
          type metadata accessor for TrimError(0LL);
          sub_186BFCB04(&qword_18C6A2D08, type metadata accessor for TrimError, (uint64_t)&unk_186C6185C);
          swift_allocError();
          *uint64_t v36 = 0xD00000000000001FLL;
          v36[1] = 0x8000000186C67BD0LL;
LABEL_14:
          swift_storeEnumTagMultiPayload();
          swift_willThrow();
          swift_release();
          __int128 v101 = v110;
          __int128 v102 = v111;
          uint64_t v103 = v112;
          __int128 v97 = v106;
          __int128 v98 = v107;
          __int128 v99 = v108;
          __int128 v100 = v109;
          __int128 v95 = v104;
          __int128 v96 = v105;
          sub_186C45E80(&v95);
          swift_release();
          swift_release();
          return swift_release();
        }
      }
    }

    uint64_t v41 = (uint64_t)v87;
    sub_186C5AC54();
    char v42 = *(_BYTE *)(v24 + 24);
    uint64_t v43 = v90;
    uint64_t v44 = v41 + *(int *)(v90 + 24);
    *(void *)uint64_t v44 = *(void *)(v24 + 16);
    *(_BYTE *)(v44 + 8) = v42;
    swift_beginAccess();
    uint64_t v45 = v92;
    char v46 = *(_BYTE *)(v92 + 24);
    uint64_t v47 = v41 + *(int *)(v43 + 28);
    *(void *)uint64_t v47 = *(void *)(v92 + 16);
    *(_BYTE *)(v47 + 8) = v46;
    swift_beginAccess();
    if (*(void *)(v81 + 24))
    {
      swift_bridgeObjectRetain();
      sub_186C5AC54();
      swift_release();
      sub_186C45E80(v113);
      swift_release();
      swift_release();
LABEL_19:
      uint64_t v49 = v88;
      uint64_t v48 = v89;
      swift_release();
      sub_186C3A868(v41, v48, type metadata accessor for TrimOptions);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v49 + 56))(v48, 0LL, 1LL, v43);
      return sub_186C392F4(v41, type metadata accessor for TrimOptions);
    }

    sub_186C5AC3C();
    if (v50)
    {
      *(void *)&__int128 v95 = 46LL;
      *((void *)&v95 + 1) = 0xE100000000000000LL;
      sub_186C5ADD4();
      swift_bridgeObjectRelease();
      uint64_t v51 = v95;
    }

    else
    {
      uint64_t v51 = 0LL;
    }

    uint64_t v52 = v85;
    sub_186C5ABF4();
    uint64_t v53 = (uint64_t)v52;
    uint64_t v54 = sub_186C5AC24();
    uint64_t v55 = *(void *)(v54 - 8);
    LODWORD(v80) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v55 + 48))(v53, 1LL, v54);
    if ((_DWORD)v80 == 1)
    {
      swift_bridgeObjectRelease();
      sub_186BFCA44(v53, &qword_18C6A2D20);
      uint64_t v89 = type metadata accessor for TrimError(0LL);
      sub_186BFCB04(&qword_18C6A2D08, type metadata accessor for TrimError, (uint64_t)&unk_186C6185C);
      uint64_t v91 = swift_allocError();
      uint64_t v57 = v56;
      *(void *)&__int128 v95 = 0LL;
      *((void *)&v95 + 1) = 0xE000000000000000LL;
      sub_186C5B260();
      sub_186BFCB04(&qword_18C6A2D10, (uint64_t (*)(uint64_t))MEMORY[0x18961BBF0], MEMORY[0x18961BC00]);
      uint64_t v58 = v84;
      uint64_t v59 = sub_186C5B4DC();
      uint64_t v60 = v41;
      uint64_t v62 = v61;
      swift_bridgeObjectRelease();
      *(void *)&__int128 v95 = v59;
      *((void *)&v95 + 1) = v62;
      sub_186C5ADD4();
      uint64_t v63 = *((void *)&v95 + 1);
      *uint64_t v57 = v95;
      v57[1] = v63;
      swift_storeEnumTagMultiPayload();
      swift_willThrow();
      swift_release();
      __int128 v101 = v110;
      __int128 v102 = v111;
      uint64_t v103 = v112;
      __int128 v97 = v106;
      __int128 v98 = v107;
      __int128 v99 = v108;
      __int128 v100 = v109;
      __int128 v95 = v104;
      __int128 v96 = v105;
      sub_186C45E80(&v95);
      swift_release();
      swift_release();
    }

    else
    {
      uint64_t v64 = sub_186C5AC18();
      v78[1] = v51;
      uint64_t v65 = v64;
      uint64_t v67 = v66;
      (*(void (**)(uint64_t, uint64_t))(v55 + 8))(v53, v54);
      *(void *)&__int128 v95 = v65;
      *((void *)&v95 + 1) = v67;
      sub_186C5ADD4();
      sub_186C417BC(*(void *)(v79 + 16), *(_BYTE *)(v79 + 24));
      sub_186C5ADD4();
      swift_bridgeObjectRelease();
      sub_186C5ADD4();
      sub_186C417BC(*(void *)(v45 + 16), *(_BYTE *)(v45 + 24));
      sub_186C5ADD4();
      swift_bridgeObjectRelease();
      sub_186C5ADD4();
      swift_bridgeObjectRelease();
      __int128 v68 = v87;
      uint64_t v58 = v84;
      uint64_t v85 = *(char **)(v86 + 16);
      ((void (*)(char *, char *, uint64_t))v85)(v82, v87, v84);
      sub_186C5AC00();
      uint64_t v69 = &v68[*(int *)(v90 + 20)];
      sub_186C5AC30();
      id v70 = objc_msgSend(objc_allocWithZone(MEMORY[0x1896078A8]), sel_init);
      sub_186C5AC0C();
      uint64_t v71 = (void *)sub_186C5AD08();
      swift_bridgeObjectRelease();
      unsigned int v72 = objc_msgSend(v70, sel_fileExistsAtPath_, v71);

      if (!v72)
      {
        swift_release();
        __int128 v101 = v110;
        __int128 v102 = v111;
        uint64_t v103 = v112;
        __int128 v97 = v106;
        __int128 v98 = v107;
        __int128 v99 = v108;
        __int128 v100 = v109;
        __int128 v95 = v104;
        __int128 v96 = v105;
        sub_186C45E80(&v95);
        swift_release();
        swift_release();
        uint64_t v43 = v90;
        uint64_t v41 = (uint64_t)v87;
        goto LABEL_19;
      }

      type metadata accessor for TrimError(0LL);
      sub_186BFCB04(&qword_18C6A2D08, type metadata accessor for TrimError, (uint64_t)&unk_186C6185C);
      swift_allocError();
      ((void (*)(uint64_t, char *, uint64_t))v85)(v73, v69, v58);
      swift_storeEnumTagMultiPayload();
      swift_willThrow();
      swift_release();
      __int128 v101 = v110;
      __int128 v102 = v111;
      uint64_t v103 = v112;
      __int128 v97 = v106;
      __int128 v98 = v107;
      __int128 v99 = v108;
      __int128 v100 = v109;
      __int128 v95 = v104;
      __int128 v96 = v105;
      sub_186C45E80(&v95);
      swift_release();
      swift_release();
      uint64_t v60 = (uint64_t)v87;
    }

    swift_release();
    uint64_t v74 = *(uint64_t (**)(uint64_t, uint64_t))(v86 + 8);
    uint64_t result = v74(v60, v58);
    if ((_DWORD)v80 != 1) {
      return v74(v60 + *(int *)(v90 + 20), v58);
    }
  }

  else
  {
    type metadata accessor for TrimError(0LL);
    sub_186BFCB04(&qword_18C6A2D08, type metadata accessor for TrimError, (uint64_t)&unk_186C6185C);
    swift_allocError();
    uint64_t v39 = v38;
    *(void *)&__int128 v95 = 0LL;
    *((void *)&v95 + 1) = 0xE000000000000000LL;
    sub_186C5B260();
    uint64_t result = swift_bridgeObjectRelease();
    unint64_t v93 = 0xD000000000000011LL;
    unint64_t v94 = 0x8000000186C67B90LL;
    if (*(void *)(v33 + 16) < v34)
    {
      __break(1u);
    }

    else
    {
      *(void *)&__int128 v95 = v33;
      *((void *)&v95 + 1) = v33 + 32;
      *(void *)&__int128 v96 = 1LL;
      *((void *)&v96 + 1) = (2 * v34) | 1;
      __swift_instantiateConcreteTypeFromMangledName(&qword_18C6A2D28);
      sub_186C45F4C();
      sub_186C5ACD8();
      swift_bridgeObjectRelease();
      sub_186C5ADD4();
      swift_bridgeObjectRelease();
      unint64_t v40 = v94;
      *uint64_t v39 = v93;
      v39[1] = v40;
      swift_storeEnumTagMultiPayload();
      swift_willThrow();
      swift_release();
      __int128 v101 = v110;
      __int128 v102 = v111;
      uint64_t v103 = v112;
      __int128 v97 = v106;
      __int128 v98 = v107;
      __int128 v99 = v108;
      __int128 v100 = v109;
      __int128 v95 = v104;
      __int128 v96 = v105;
      sub_186C45E80(&v95);
      swift_release();
      swift_release();
      return swift_release();
    }
  }

  return result;
}

unint64_t sub_186C42D7C()
{
  return 0xD000000000000021LL;
}

uint64_t sub_186C42D98@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v36 = *MEMORY[0x1895F89C0];
  uint64_t v4 = sub_186C5AB28();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1895F8858](v4);
  uint64_t v7 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_186C5AB1C();
  uint64_t v27 = sub_186C5AB10();
  char v28 = v8;
  char v29 = v9;
  char v30 = v10;
  char v31 = v11;
  char v32 = v12;
  char v33 = v13;
  char v34 = v14;
  char v35 = v15;
  int v22 = ktrace_file_uuid(a1, (uint64_t)&v27, v16, v17, v18, v19, v20, v21);
  if (v22)
  {
    int v23 = v22;
    sub_186C4122C();
    swift_allocError();
    *(_OWORD *)uint64_t v24 = xmmword_186C61CC0;
    *(_DWORD *)(v24 + 16) = v23;
    *(_BYTE *)(v24 + 20) = 1;
    swift_willThrow();
    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }

  else
  {
    (*(void (**)(uint64_t, char *, uint64_t))(v5 + 32))(a2, v7, v4);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v5 + 56))(a2, 0LL, 1LL, v4);
  }

uint64_t sub_186C42F54()
{
  return 0x6946656372756F73LL;
}

uint64_t sub_186C42F78@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  if (a1 == 0x6946656372756F73LL && a2 == 0xEE0044495555656CLL)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }

  else
  {
    char v5 = sub_186C5B4F4();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }

  *a3 = v7 & 1;
  return result;
}

uint64_t sub_186C43030()
{
  return sub_186C5B608();
}

uint64_t sub_186C43058()
{
  return sub_186C5B614();
}

uint64_t sub_186C43080(void *a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C6A2D40);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1895F8858](v2);
  char v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_186C45F98();
  sub_186C5B5F0();
  sub_186C5B47C();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t Trimming.toolName.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t Trimming.interactive.getter()
{
  return *(unsigned __int8 *)(v0 + 16);
}

uint64_t Trimming.notify.getter()
{
  uint64_t v1 = *(void *)(v0 + 24);
  swift_retain();
  return v1;
}

uint64_t Trimming.init(toolName:interactive:notify:)@<X0>( uint64_t result@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  *(void *)a6 = result;
  *(void *)(a6 + 8) = a2;
  *(_BYTE *)(a6 + 16) = a3;
  *(void *)(a6 + 24) = a4;
  *(void *)(a6 + 32) = a5;
  return result;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> Trimming.trim(arguments:)( Swift::OpaquePointer arguments)
{
  rawValue = arguments._rawValue;
  uint64_t v2 = v1;
  uint64_t v199 = *MEMORY[0x1895F89C0];
  uint64_t v175 = sub_186C5A888();
  uint64_t v174 = *(void *)(v175 - 8);
  MEMORY[0x1895F8858](v175);
  uint64_t v173 = (char *)&v160 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C6A2D38);
  MEMORY[0x1895F8858](v4);
  uint64_t v178 = (char *)&v160 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v177 = sub_186C5AB28();
  uint64_t v176 = *(void *)(v177 - 8);
  MEMORY[0x1895F8858](v177);
  uint64_t v172 = (char *)&v160 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v184 = type metadata accessor for TrimNote(0LL);
  MEMORY[0x1895F8858](v184);
  unint64_t v185 = (uint64_t *)((char *)&v160 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v179 = sub_186C5AD50();
  uint64_t v181 = *(void (**)(void **, uint64_t))(v179 - 8);
  MEMORY[0x1895F8858](v179);
  uint64_t v180 = (void **)((char *)&v160 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v182 = (void *)type metadata accessor for TrimOptions(0LL);
  uint64_t v183 = *(v182 - 1);
  char v9 = *(void **)(v183 + 64);
  uint64_t v10 = MEMORY[0x1895F8858](v182);
  MEMORY[0x1895F8858](v10);
  char v12 = (char *)&v160 - v11;
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C6A2D48);
  uint64_t v14 = MEMORY[0x1895F8858](v13);
  uint64_t v16 = (char *)&v160 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v14);
  uint64_t v18 = (char *)&v160 - v17;
  __int128 v19 = v2[1];
  __int128 v188 = *v2;
  __int128 v189 = v19;
  uint64_t v190 = *((void *)v2 + 4);
  __int128 v20 = v188;
  uint64_t v21 = swift_allocObject();
  __int128 v22 = v2[1];
  *(_OWORD *)(v21 + 16) = *v2;
  *(_OWORD *)(v21 + 32) = v22;
  *(void *)(v21 + 48) = *((void *)v2 + 4);
  swift_bridgeObjectRetain();
  uint64_t v23 = (uint64_t)rawValue;
  swift_bridgeObjectRetain();
  sub_186C46058((uint64_t)&v188);
  uint64_t v24 = (uint64_t)v187;
  sub_186C42024(v20, *((uint64_t *)&v20 + 1), v23, (uint64_t)sub_186C46050, v21, (uint64_t)v18);
  char v25 = (void *)v24;
  if (v24) {
    goto LABEL_14;
  }
  uint64_t v26 = v181;
  uint64_t v27 = v180;
  rawValue = v9;
  uint64_t v170 = (uint64_t)&v160 - (((unint64_t)v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v171 = v12;
  sub_186C4608C((uint64_t)v18, (uint64_t)v16);
  char v28 = v182;
  if ((*(unsigned int (**)(char *, uint64_t, void *))(v183 + 48))(v16, 1LL, v182) == 1)
  {
    sub_186BFCA44((uint64_t)v18, &qword_18C6A2D48);
    uint64_t v29 = (uint64_t)v16;
LABEL_4:
    sub_186BFCA44(v29, &qword_18C6A2D48);
    return;
  }

  uint64_t v187 = v18;
  uint64_t v30 = (uint64_t)v16;
  uint64_t v31 = (uint64_t)v171;
  sub_186C460D4(v30, (uint64_t)v171);
  uint64_t aBlock = sub_186C5AC0C();
  uint64_t v194 = v32;
  sub_186C5AD44();
  unint64_t v169 = sub_186BFB8D0();
  uint64_t v33 = sub_186C5B11C();
  char v34 = (void (*)(void **, uint64_t))*((void *)v26 + 1);
  v34(v27, v179);
  swift_bridgeObjectRelease();
  if (!v33)
  {
    __break(1u);
LABEL_66:
    __break(1u);
LABEL_67:
    __break(1u);
LABEL_68:
    __break(1u);
LABEL_69:
    __break(1u);
    goto LABEL_70;
  }

  uint64_t v35 = ktrace_file_open((const char *)(v33 + 32), 0);
  swift_bridgeObjectRelease();
  if (!v35)
  {
    type metadata accessor for TrimError(0LL);
    sub_186BFCB04(&qword_18C6A2D08, type metadata accessor for TrimError, (uint64_t)&unk_186C6185C);
    char v25 = (void *)swift_allocError();
    uint64_t v52 = v51;
    uint64_t v53 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_18C6A2D18) + 48);
    uint64_t v54 = sub_186C5AC48();
    uint64_t v55 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v54 - 8) + 16LL))(v52, v31, v54);
    *(_DWORD *)(v52 + v53) = MEMORY[0x186E445C0](v55);
LABEL_11:
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
    uint64_t v50 = v31;
    goto LABEL_12;
  }

  uint64_t v43 = sub_186C41504(v35, v36, v37, v38, v39, v40, v41, v42);
  uint64_t v181 = v34;
  unint64_t v45 = v44;
  unint64_t v46 = v43;
  LODWORD(aBlock) = 0;
  unsigned int v192 = 0;
  int v47 = ktrace_file_timebase(v35, &aBlock, &v192);
  if (v47)
  {
    int v48 = v47;
    sub_186C453B0();
    char v25 = (void *)swift_allocError();
    *(void *)uint64_t v49 = 0x65736162656D6974LL;
    *(void *)(v49 + 8) = 0xE800000000000000LL;
    *(_DWORD *)(v49 + 16) = v48;
    swift_willThrow();
    goto LABEL_9;
  }

  uint64_t v161 = v35;
  uint64_t v166 = 0LL;
  uint64_t v60 = sub_186C2CB98(aBlock, v192);
  unint64_t v168 = v45;
  uint64_t v167 = v46;
  if (v45 < v46)
  {
    __break(1u);
    JUMPOUT(0x186C446B0LL);
  }

  uint64_t v163 = v60;
  double v61 = sub_186C2CB68(v45 - v46, v60);
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C6A2190);
  uint64_t v62 = swift_allocObject();
  uint64_t v63 = MEMORY[0x189618560];
  *(_OWORD *)(v62 + 16) = xmmword_186C5E4F0;
  uint64_t v64 = MEMORY[0x1896185C0];
  *(void *)(v62 + 56) = v63;
  *(void *)(v62 + 64) = v64;
  *(double *)(v62 + 32) = v61;
  sub_186C5AD38();
  uint64_t v165 = (void (*)(uint64_t *))*((void *)&v189 + 1);
  uint64_t v164 = v190;
  uint64_t v65 = sub_186C5AC48();
  sub_186BFCB04(&qword_18C6A2D10, (uint64_t (*)(uint64_t))MEMORY[0x18961BBF0], MEMORY[0x18961BC00]);
  uint64_t v66 = (uint64_t)v171;
  uint64_t v160 = v65;
  uint64_t aBlock = sub_186C5B4DC();
  uint64_t v194 = v67;
  sub_186C5ADD4();
  sub_186C5ADD4();
  swift_bridgeObjectRelease();
  sub_186C5ADD4();
  uint64_t v68 = aBlock;
  uint64_t v162 = v194;
  uint64_t v69 = v66 + *((int *)v28 + 6);
  sub_186C418C4(*(void *)v69, *(_BYTE *)(v69 + 8));
  uint64_t v71 = v70;
  unsigned int v72 = v28;
  uint64_t v74 = v73;
  __int128 v75 = v72;
  uint64_t v76 = v66 + *((int *)v72 + 7);
  sub_186C418C4(*(void *)v76, *(_BYTE *)(v76 + 8));
  __n128 v77 = v185;
  uint64_t v78 = v162;
  *unint64_t v185 = v68;
  v77[1] = v78;
  double v77[2] = v71;
  v77[3] = v74;
  v77[4] = v79;
  v77[5] = v80;
  swift_storeEnumTagMultiPayload();
  v165(v77);
  sub_186C392F4((uint64_t)v77, type metadata accessor for TrimNote);
  uint64_t v81 = v163;
  unint64_t v82 = v166;
  sub_186C41624(v167, v168, v163, *(void *)v69, *(_BYTE *)(v69 + 8));
  char v25 = v82;
  if (v82)
  {
    uint64_t v50 = v66;
    goto LABEL_12;
  }

  uint64_t v84 = (void (*)(void **, uint64_t))v83;
  sub_186C41624(v167, v168, v81, *(void *)v76, *(_BYTE *)(v76 + 8));
  uint64_t v86 = (uint64_t)v187;
  unint64_t v87 = v85;
  if ((unint64_t)v84 >= v85)
  {
    type metadata accessor for TrimError(0LL);
    sub_186BFCB04(&qword_18C6A2D08, type metadata accessor for TrimError, (uint64_t)&unk_186C6185C);
    char v25 = (void *)swift_allocError();
    *__int128 v97 = 0xD000000000000028LL;
    v97[1] = 0x8000000186C67C20LL;
    v97[2] = v84;
    v97[3] = v87;
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
    sub_186C392F4(v66, type metadata accessor for TrimOptions);
    uint64_t v56 = v86;
    goto LABEL_13;
  }

  unint64_t v168 = v85;
  uint64_t v88 = *((int *)v75 + 5);
  uint64_t v31 = v66;
  uint64_t v89 = v66 + v88;
  uint64_t aBlock = sub_186C5AC0C();
  uint64_t v194 = v90;
  sub_186C5AD44();
  uint64_t v91 = sub_186C5B11C();
  v181(v27, v179);
  swift_bridgeObjectRelease();
  if (!v91)
  {
    __break(1u);
    JUMPOUT(0x186C44860LL);
  }

  uint64_t v92 = v161;
  unint64_t v93 = ktrace_file_create(v161, (char *)(v91 + 32));
  swift_bridgeObjectRelease();
  uint64_t v94 = v160;
  uint64_t v95 = v170;
  if (!v93)
  {
    type metadata accessor for TrimError(0LL);
    sub_186BFCB04(&qword_18C6A2D08, type metadata accessor for TrimError, (uint64_t)&unk_186C6185C);
    char v25 = (void *)swift_allocError();
    uint64_t v99 = v98;
    uint64_t v100 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_18C6A2D18) + 48);
    uint64_t v101 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v94 - 8) + 16LL))(v99, v89, v94);
    *(_DWORD *)(v99 + v100) = MEMORY[0x186E445C0](v101);
    goto LABEL_11;
  }

  uint64_t v96 = (uint64_t)v178;
  sub_186C42D98(v92, (uint64_t)v178);
  uint64_t v102 = v176;
  uint64_t v103 = v177;
  int v104 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v176 + 48))(v96, 1LL, v177);
  uint64_t v181 = v84;
  uint64_t v182 = v93;
  uint64_t v167 = v89;
  if (v104 != 1)
  {
    uint64_t v123 = v172;
    (*(void (**)(char *, uint64_t, uint64_t))(v102 + 32))(v172, v96, v103);
    uint64_t v124 = sub_186C5AB04();
    uint64_t v126 = v125;
    (*(void (**)(char *, uint64_t))(v102 + 8))(v123, v103);
    sub_186C5A8B8();
    swift_allocObject();
    sub_186C5A8AC();
    (*(void (**)(char *, void, uint64_t))(v174 + 104))(v173, *MEMORY[0x189606088], v175);
    sub_186C5A894();
    uint64_t aBlock = v124;
    uint64_t v194 = v126;
    sub_186C46518();
    sub_186C5A8A0();
    uint64_t v136 = v135;
    uint64_t v166 = 0LL;
    swift_bridgeObjectRelease();
    __asm { BR              X10 }
  }

  uint64_t v166 = 0LL;
  sub_186BFCA44(v96, &qword_18C6A2D38);
  uint64_t v105 = swift_allocObject();
  *(void *)(v105 + 16) = 0LL;
  uint64_t v180 = (void **)(v105 + 16);
  uint64_t v106 = swift_allocObject();
  *(void *)(v106 + 16) = MEMORY[0x18961AFE8];
  uint64_t v179 = v106 + 16;
  uint64_t v107 = swift_allocObject();
  *(_BYTE *)(v107 + 16) = 0;
  uint64_t v178 = (_BYTE *)(v107 + 16);
  sub_186C3A868(v31, v95, type metadata accessor for TrimOptions);
  unint64_t v108 = (*(unsigned __int8 *)(v183 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v183 + 80);
  unint64_t v109 = ((unint64_t)rawValue + v108 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v110 = (v109 + 15) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v111 = v31;
  uint64_t v112 = swift_allocObject();
  *(void *)(v112 + 16) = v168;
  *(void *)(v112 + 24) = v106;
  sub_186C460D4(v170, v112 + v108);
  *(void *)(v112 + v109) = v107;
  uint64_t v113 = (void **)v106;
  uint64_t v114 = v182;
  *(void *)(v112 + v110) = v182;
  *(void *)(v112 + ((v110 + 15) & 0xFFFFFFFFFFFFFFF8LL)) = v105;
  id v197 = sub_186C46244;
  uint64_t v198 = v112;
  uint64_t aBlock = MEMORY[0x1895F87A8];
  uint64_t v194 = 1107296256LL;
  uint64_t v195 = sub_186C32618;
  uint64_t v196 = &block_descriptor_1;
  uint64_t v115 = _Block_copy(&aBlock);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_release();
  ktrace_file_iterate(v161, 0LL, (uint64_t)v115, v116, v117, v118, v119, v120);
  _Block_release(v115);
  uint64_t v121 = v180;
  swift_beginAccess();
  char v25 = *v121;
  if (*v121)
  {
    id v122 = v25;
    swift_willThrow();
    swift_release();
    swift_release();
    swift_release();
    ktrace_file_close(v114);
    uint64_t v50 = v111;
    goto LABEL_12;
  }

  uint64_t v177 = v105;
  uint64_t v180 = v113;
  uint64_t v183 = v107;
  uint64_t v127 = v178;
  swift_beginAccess();
  if ((*v127 & 1) == 0)
  {
    uint64_t v191 = v168;
    ktrace_file_append_chunk((uint64_t)v114, 32775, 0, 1, (UInt8 *)&v191, 8LL);
  }

  uint64_t v128 = (void *)v179;
  swift_beginAccess();
  rawValue = (void *)*v128;
  unint64_t v129 = rawValue[2];
  unint64_t v130 = 0LL;
  uint64_t v131 = rawValue + 11;
  uint64_t v132 = 1LL;
  while (1)
  {
    unint64_t v133 = *v131;
    v131 += 5;
    uint64_t v134 = v132 + 1;
    if (__OFADD__(v132, 1LL)) {
      goto LABEL_67;
    }
    ++v132;
    if (v134 == v129) {
      goto LABEL_41;
    }
  }

  if (!v132) {
    goto LABEL_41;
  }
  unint64_t v130 = v132 - 1;
  if ((uint64_t)v129 < v132 - 1)
  {
LABEL_70:
    __break(1u);
    JUMPOUT(0x186C44848LL);
  }

  if (v132 < 1)
  {
    __break(1u);
LABEL_41:
    unint64_t v130 = 0LL;
  }

uint64_t sub_186C44880(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for TrimNote(0LL);
  MEMORY[0x1895F8858](v6);
  uint64_t v8 = (uint64_t *)((char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  char v9 = *(void (**)(void *))(a3 + 24);
  *uint64_t v8 = a1;
  v8[1] = a2;
  swift_storeEnumTagMultiPayload();
  swift_bridgeObjectRetain();
  v9(v8);
  return sub_186C392F4((uint64_t)v8, type metadata accessor for TrimNote);
}

uint64_t sub_186C44930(uint64_t a1)
{
  return *(void *)a1;
}

uint64_t sub_186C44938(void *a1)
{
  return *a1 & 0xFFFFFFFFFFFFFFLL;
}

char *sub_186C44944(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_18C6A2F58);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 40);
  }

  else
  {
    uint64_t v10 = (char *)MEMORY[0x18961AFE8];
  }

  char v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  size_t v14 = 40 * v8;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[v14]) {
      memmove(v12, v13, v14);
    }
    *((void *)a4 + 2) = 0LL;
  }

  else
  {
    memcpy(v12, v13, v14);
  }

  swift_bridgeObjectRelease();
  return v10;
}

unsigned __int8 *sub_186C44A48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int64_t a5)
{
  uint64_t v15 = a1;
  uint64_t v16 = a2;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  sub_186C48770();
  swift_bridgeObjectRetain();
  uint64_t v7 = sub_186C5AE88();
  unint64_t v8 = v6;
  if ((v6 & 0x1000000000000000LL) == 0)
  {
    if ((v6 & 0x2000000000000000LL) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t v10 = HIBYTE(v8) & 0xF;
    uint64_t v15 = v7;
    uint64_t v16 = v8 & 0xFFFFFFFFFFFFFFLL;
    uint64_t v9 = (unsigned __int8 *)&v15;
    goto LABEL_7;
  }

  uint64_t v7 = sub_186C2B6CC();
  unint64_t v12 = v11;
  swift_bridgeObjectRelease();
  unint64_t v8 = v12;
  if ((v12 & 0x2000000000000000LL) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v7 & 0x1000000000000000LL) != 0)
  {
    uint64_t v9 = (unsigned __int8 *)((v8 & 0xFFFFFFFFFFFFFFFLL) + 32);
    uint64_t v10 = v7 & 0xFFFFFFFFFFFFLL;
  }

  else
  {
    uint64_t v9 = (unsigned __int8 *)sub_186C5B2B4();
  }

unsigned __int8 *sub_186C44B38(unsigned __int8 *result, uint64_t a2, int64_t a3)
{
  uint64_t v3 = a2;
  int v4 = *result;
  if (v4 != 43)
  {
    if (v4 == 45)
    {
      if (a2 >= 1)
      {
        uint64_t v5 = a2 - 1;
        if (a2 != 1)
        {
          unsigned __int8 v6 = a3 + 48;
          unsigned __int8 v7 = a3 + 55;
          unsigned __int8 v8 = a3 + 87;
          if (a3 > 10)
          {
            unsigned __int8 v6 = 58;
          }

          else
          {
            unsigned __int8 v8 = 97;
            unsigned __int8 v7 = 65;
          }

          if (result)
          {
            unint64_t v9 = 0LL;
            for (uint64_t i = result + 1; ; ++i)
            {
              unsigned int v11 = *i;
              if (v11 < 0x30 || v11 >= v6)
              {
                if (v11 < 0x41 || v11 >= v7)
                {
                  uint64_t v13 = 0LL;
                  if (v11 < 0x61 || v11 >= v8) {
                    return (unsigned __int8 *)v13;
                  }
                  char v12 = -87;
                }

                else
                {
                  char v12 = -55;
                }
              }

              else
              {
                char v12 = -48;
              }

              if (!is_mul_ok(v9, a3)) {
                return 0LL;
              }
              unint64_t v14 = v9 * a3;
              unsigned __int8 v15 = v11 + v12;
              BOOL v16 = v14 >= v15;
              unint64_t v9 = v14 - v15;
              if (!v16) {
                return 0LL;
              }
              if (!--v5) {
                return (unsigned __int8 *)v9;
              }
            }
          }

          return 0LL;
        }

        return 0LL;
      }

      __break(1u);
      goto LABEL_67;
    }

    if (a2)
    {
      unsigned __int8 v26 = a3 + 48;
      unsigned __int8 v27 = a3 + 55;
      unsigned __int8 v28 = a3 + 87;
      if (a3 > 10)
      {
        unsigned __int8 v26 = 58;
      }

      else
      {
        unsigned __int8 v28 = 97;
        unsigned __int8 v27 = 65;
      }

      if (result)
      {
        unint64_t v29 = 0LL;
        do
        {
          unsigned int v30 = *result;
          if (v30 < 0x30 || v30 >= v26)
          {
            if (v30 < 0x41 || v30 >= v27)
            {
              uint64_t v13 = 0LL;
              if (v30 < 0x61 || v30 >= v28) {
                return (unsigned __int8 *)v13;
              }
              char v31 = -87;
            }

            else
            {
              char v31 = -55;
            }
          }

          else
          {
            char v31 = -48;
          }

          if (!is_mul_ok(v29, a3)) {
            return 0LL;
          }
          unint64_t v32 = v29 * a3;
          unsigned __int8 v33 = v30 + v31;
          BOOL v16 = __CFADD__(v32, v33);
          unint64_t v29 = v32 + v33;
          if (v16) {
            return 0LL;
          }
          ++result;
          --v3;
        }

        while (v3);
        return (unsigned __int8 *)v29;
      }

      return 0LL;
    }

    return 0LL;
  }

  if (a2 < 1)
  {
LABEL_67:
    __break(1u);
    return result;
  }

  uint64_t v17 = a2 - 1;
  if (a2 == 1) {
    return 0LL;
  }
  unsigned __int8 v18 = a3 + 48;
  unsigned __int8 v19 = a3 + 55;
  unsigned __int8 v20 = a3 + 87;
  if (a3 > 10)
  {
    unsigned __int8 v18 = 58;
  }

  else
  {
    unsigned __int8 v20 = 97;
    unsigned __int8 v19 = 65;
  }

  if (!result) {
    return 0LL;
  }
  unint64_t v9 = 0LL;
  uint64_t v21 = result + 1;
  do
  {
    unsigned int v22 = *v21;
    if (v22 < 0x30 || v22 >= v18)
    {
      if (v22 < 0x41 || v22 >= v19)
      {
        uint64_t v13 = 0LL;
        if (v22 < 0x61 || v22 >= v20) {
          return (unsigned __int8 *)v13;
        }
        char v23 = -87;
      }

      else
      {
        char v23 = -55;
      }
    }

    else
    {
      char v23 = -48;
    }

    if (!is_mul_ok(v9, a3)) {
      return 0LL;
    }
    unint64_t v24 = v9 * a3;
    unsigned __int8 v25 = v22 + v23;
    BOOL v16 = __CFADD__(v24, v25);
    unint64_t v9 = v24 + v25;
    if (v16) {
      return 0LL;
    }
    ++v21;
    --v17;
  }

  while (v17);
  return (unsigned __int8 *)v9;
}

uint64_t sub_186C44DB4( unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4, int64_t a5)
{
  if ((a4 & 0x1000000000000000LL) != 0)
  {
    uint64_t result = 0LL;
    goto LABEL_8;
  }

  if ((a4 & 0x2000000000000000LL) != 0)
  {
    v14[0] = a3;
    v14[1] = a4 & 0xFFFFFFFFFFFFFFLL;
    unsigned int v11 = v14;
  }

  else if ((a3 & 0x1000000000000000LL) != 0)
  {
    unsigned int v11 = (void *)((a4 & 0xFFFFFFFFFFFFFFFLL) + 32);
  }

  else
  {
    unsigned int v11 = (void *)sub_186C5B2B4();
  }

  uint64_t result = sub_186C453F4((uint64_t)v11, a1, a2, a3, a4, a5);
  if (!v5)
  {
    char v15 = v13 & 1;
LABEL_8:
    LOBYTE(v14[0]) = (a4 & 0x1000000000000000LL) != 0;
  }

  return result;
}

unint64_t sub_186C44E84@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = (uint64_t *)a1;
  uint64_t v39 = *MEMORY[0x1895F89C0];
  unint64_t result = ktrace_chunk_tag(a1);
  int v5 = result;
  if ((_DWORD)result != 20982 && (_DWORD)result != 7936)
  {
    if ((_DWORD)result == 7680)
    {
      unsigned int is_64_bit = ktrace_chunk_is_64_bit((uint64_t)v2);
      size_t v7 = is_64_bit ? 64LL : 32LL;
      unint64_t result = ktrace_chunk_size((uint64_t)v2);
      if (result >= (v7 | 8))
      {
        __int128 v37 = 0u;
        __int128 v38 = 0u;
        __int128 v35 = 0u;
        __int128 v36 = 0u;
        int v8 = ktrace_chunk_copy_data(v2, 8LL, &v35, v7);
        if (v8)
        {
          int v9 = v8;
          sub_186C4122C();
          swift_allocError();
          unint64_t v11 = 0xD000000000000017LL;
          char v12 = "copying first raw event";
LABEL_30:
          *(void *)uint64_t v10 = v11;
          *(void *)(v10 + 8) = (unint64_t)(v12 - 32) | 0x8000000000000000LL;
          *(_DWORD *)(v10 + 16) = v9;
LABEL_41:
          *(_BYTE *)(v10 + 20) = 1;
          return swift_willThrow();
        }

        uint64_t v19 = is_64_bit;
        if (is_64_bit) {
          uint64_t v20 = v35;
        }
        else {
          uint64_t v20 = v35 & 0xFFFFFFFFFFFFFFLL;
        }
        uint64_t v27 = ktrace_chunk_size_t(v2);
        if (!__OFSUB__(v27, v7))
        {
          unint64_t result = ktrace_chunk_copy_data(v2, v27 - v7, &v35, v7);
          if ((_DWORD)result)
          {
            int v14 = result;
            sub_186C4122C();
            swift_allocError();
            unint64_t v15 = 0xD000000000000016LL;
            BOOL v16 = "copying last raw event";
            goto LABEL_40;
          }

          char v22 = 0;
          uint64_t v21 = v35;
          if (!(_DWORD)v19) {
            uint64_t v21 = v35 & 0xFFFFFFFFFFFFFFLL;
          }
LABEL_23:
          *(void *)a2 = v2;
          *(void *)(a2 + 8) = v19;
          *(void *)(a2 + 16) = v20;
          *(void *)(a2 + 24) = v21;
          *(_BYTE *)(a2 + 32) = v22;
          return result;
        }

        goto LABEL_55;
      }
    }

uint64_t sub_186C45368(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C6A2CF8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

unint64_t sub_186C453B0()
{
  unint64_t result = qword_18C6A2D00;
  if (!qword_18C6A2D00)
  {
    unint64_t result = MEMORY[0x186E46630](&unk_186C61784, &_s3ErrON);
    atomic_store(result, (unint64_t *)&qword_18C6A2D00);
  }

  return result;
}

uint64_t sub_186C453F4( uint64_t result, unint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5, int64_t a6)
{
  unint64_t v10 = a2;
  uint64_t v11 = result;
  uint64_t v12 = (a4 >> 59) & 1;
  if ((a5 & 0x1000000000000000LL) == 0) {
    LOBYTE(v12) = 1;
  }
  uint64_t v13 = 4LL << v12;
  unint64_t v14 = a2 & 0xC;
  if (v14 == 4LL << v12)
  {
    unint64_t result = sub_186C2BB88(a2, a4, a5);
    a2 = result;
    if ((a5 & 0x1000000000000000LL) == 0)
    {
LABEL_5:
      int64_t v15 = a2 >> 16;
      if (v14 != v13) {
        goto LABEL_6;
      }
      goto LABEL_14;
    }
  }

  else if ((a5 & 0x1000000000000000LL) == 0)
  {
    goto LABEL_5;
  }

  unint64_t v16 = a4 & 0xFFFFFFFFFFFFLL;
  if ((a5 & 0x2000000000000000LL) != 0) {
    unint64_t v16 = HIBYTE(a5) & 0xF;
  }
  if (v16 < a2 >> 16) {
    goto LABEL_96;
  }
  unint64_t result = sub_186C5AE1C();
  int64_t v15 = result;
  if (v14 == v13)
  {
LABEL_14:
    unint64_t result = sub_186C2BB88(v10, a4, a5);
    unint64_t v10 = result;
  }

unsigned __int8 *sub_186C45810(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = v2;
  if ((sub_186C5AE4C() & 1) != 0)
  {
    unint64_t v6 = sub_186C027D4(1uLL, a1, a2);
    uint64_t v8 = v7;
    uint64_t v10 = v9;
    uint64_t v12 = v11;
    swift_bridgeObjectRelease();
    uint64_t v13 = MEMORY[0x186E4477C](v6, v8, v10, v12);
    unint64_t v15 = v14;
    swift_bridgeObjectRelease();
    char v16 = sub_186BFDFF4();
    unint64_t v17 = sub_186C293DC(v13, v15, v16 & 1);
    if (!v2) {
      uint64_t v3 = (unsigned __int8 *)v17;
    }
    goto LABEL_7;
  }

  if ((sub_186C5AE4C() & 1) != 0)
  {
    unint64_t v18 = sub_186C027D4(1uLL, a1, a2);
    uint64_t v20 = v19;
    uint64_t v22 = v21;
    uint64_t v24 = v23;
    swift_bridgeObjectRelease();
    uint64_t v25 = MEMORY[0x186E4477C](v18, v20, v22, v24);
    unint64_t v27 = v26;
    swift_bridgeObjectRelease();
    char v28 = sub_186BFDFF4();
    unint64_t v29 = sub_186C293DC(v25, v27, v28 & 1);
    if (!v2) {
      uint64_t v3 = (unsigned __int8 *)v29;
    }
    goto LABEL_7;
  }

  if ((sub_186C5AE4C() & 1) == 0)
  {
    type metadata accessor for TrimError(0LL);
    sub_186BFCB04(&qword_18C6A2D08, type metadata accessor for TrimError, (uint64_t)&unk_186C6185C);
    swift_allocError();
    unsigned __int8 v41 = v40;
    uint64_t v47 = 0LL;
    unint64_t v48 = 0xE000000000000000LL;
    sub_186C5B260();
    sub_186C5ADD4();
    swift_bridgeObjectRelease();
    uint64_t v3 = (unsigned __int8 *)&v47;
LABEL_18:
    sub_186C5ADD4();
    unint64_t v45 = v48;
    *unsigned __int8 v41 = v47;
    v41[1] = v45;
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
    return v3;
  }

  swift_bridgeObjectRetain();
  unint64_t v30 = sub_186C027D4(1uLL, a1, a2);
  unint64_t v32 = v31;
  unint64_t v34 = v33;
  unint64_t v36 = v35;
  swift_bridgeObjectRelease();
  if (!((v30 ^ v32) >> 14))
  {
    swift_bridgeObjectRelease();
    goto LABEL_17;
  }

  uint64_t v37 = sub_186C44DB4(v30, v32, v34, v36, 10LL);
  if ((v38 & 0x100) != 0)
  {
    uint64_t v3 = sub_186C44A48(v30, v32, v34, v36, 10LL);
    char v43 = v42;
    swift_bridgeObjectRelease();
    if ((v43 & 1) == 0) {
      goto LABEL_7;
    }
LABEL_17:
    type metadata accessor for TrimError(0LL);
    sub_186BFCB04(&qword_18C6A2D08, type metadata accessor for TrimError, (uint64_t)&unk_186C6185C);
    swift_allocError();
    unsigned __int8 v41 = v44;
    sub_186C5B260();
    swift_bridgeObjectRelease();
    uint64_t v47 = a1;
    unint64_t v48 = a2;
    uint64_t v3 = (unsigned __int8 *)&v47;
    goto LABEL_18;
  }

  uint64_t v3 = (unsigned __int8 *)v37;
  char v39 = v38;
  swift_bridgeObjectRelease();
  if ((v39 & 1) != 0) {
    goto LABEL_17;
  }
LABEL_7:
  swift_bridgeObjectRelease();
  return v3;
}

uint64_t type metadata accessor for TrimError(uint64_t a1)
{
  return sub_186C45FF0(a1, (uint64_t *)&unk_18C6A92C0);
}

uint64_t sub_186C45BBC(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(void))((char *)sub_186C45BD8 + 4 * byte_186C61600[a2]))();
}

BOOL sub_186C45BD8(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  return !a4 && a1 == a3;
}

uint64_t type metadata accessor for TrimOptions(uint64_t a1)
{
  return sub_186C45FF0(a1, qword_18C6A92E0);
}

uint64_t sub_186C45C54()
{
  return swift_deallocObject();
}

uint64_t sub_186C45C78()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_186C45C98()
{
  return swift_deallocObject();
}

uint64_t sub_186C45CA8(uint64_t a1, unint64_t a2)
{
  return sub_186C45CBC(a1, a2);
}

uint64_t sub_186C45CBC(uint64_t a1, unint64_t a2)
{
  uint64_t result = (uint64_t)sub_186C45810(a1, a2);
  if (!v3)
  {
    uint64_t v8 = result;
    char v9 = v7;
    uint64_t result = swift_beginAccess();
    *(void *)(v2 + 16) = v8;
    *(_BYTE *)(v2 + 24) = v9;
  }

  return result;
}

uint64_t sub_186C45D30()
{
  return swift_deallocObject();
}

uint64_t sub_186C45D54(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRetain();
}

void *sub_186C45DB4(void *a1)
{
  uint64_t v2 = a1[2];
  uint64_t v3 = a1[10];
  uint64_t v4 = a1[12];
  swift_bridgeObjectRetain();
  sub_186BFF16C(v2);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_186BFF16C(v3);
  sub_186BFF16C(v4);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *sub_186C45E80(void *a1)
{
  uint64_t v2 = a1[2];
  uint64_t v3 = a1[10];
  uint64_t v4 = a1[12];
  swift_bridgeObjectRelease();
  sub_186BFF17C(v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_186BFF17C(v3);
  sub_186BFF17C(v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

unint64_t sub_186C45F4C()
{
  unint64_t result = qword_18C6A2D30;
  if (!qword_18C6A2D30)
  {
    uint64_t v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_18C6A2D28);
    unint64_t result = MEMORY[0x186E46630](MEMORY[0x189618F88], v1);
    atomic_store(result, (unint64_t *)&qword_18C6A2D30);
  }

  return result;
}

unint64_t sub_186C45F98()
{
  unint64_t result = qword_18C6A8CB0[0];
  if (!qword_18C6A8CB0[0])
  {
    unint64_t result = MEMORY[0x186E46630](&unk_186C61BB4, &type metadata for TraceFileProvenance.CodingKeys);
    atomic_store(result, qword_18C6A8CB0);
  }

  return result;
}

uint64_t type metadata accessor for TrimNote(uint64_t a1)
{
  return sub_186C45FF0(a1, (uint64_t *)&unk_18C6A92D0);
}

uint64_t sub_186C45FF0(uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_186C46024()
{
  return swift_deallocObject();
}

uint64_t sub_186C46050(uint64_t a1, uint64_t a2)
{
  return sub_186C44880(a1, a2, v2 + 16);
}

uint64_t sub_186C46058(uint64_t a1)
{
  return a1;
}

uint64_t sub_186C4608C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C6A2D48);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_186C460D4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for TrimOptions(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_186C46118()
{
  return swift_deallocObject();
}

uint64_t sub_186C4613C()
{
  return swift_deallocObject();
}

uint64_t sub_186C46160()
{
  return swift_deallocObject();
}

uint64_t sub_186C46170()
{
  uint64_t v1 = type metadata accessor for TrimOptions(0LL);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)(v1 - 8) + 80LL);
  uint64_t v3 = (v2 + 32) & ~v2;
  swift_release();
  uint64_t v4 = v0 + v3;
  uint64_t v5 = sub_186C5AC48();
  unint64_t v6 = *(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8LL);
  v6(v4, v5);
  v6(v4 + *(int *)(v1 + 20), v5);
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_186C46244(uint64_t *a1)
{
  uint64_t v3 = type metadata accessor for TrimOptions(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  unint64_t v6 = (*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v7 = (v6 + 15) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v8 = *(void *)(v1 + 24);
  unint64_t v31 = *(void *)(v1 + 16);
  uint64_t v9 = *(void *)(v1 + v6);
  uint64_t v10 = *(void *)(v1 + v7);
  uint64_t v11 = *(void *)(v1 + ((v7 + 15) & 0xFFFFFFFFFFFFF8LL));
  sub_186C44E84((uint64_t)a1, (uint64_t)v32);
  sub_186C45368((uint64_t)v32, (uint64_t)&v33);
  if (BYTE8(v33) == 5LL)
  {
    int v14 = ktrace_chunk_tag((uint64_t)a1);
    unint64_t v15 = v1 + v5 + *(int *)(v3 + 28);
    if (*(unsigned __int8 *)(v15 + 8) >= 3u)
    {
      if (*(void *)v15) {
        BOOL v25 = 0;
      }
      else {
        BOOL v25 = v14 == 32775;
      }
      if (v25) {
        goto LABEL_6;
      }
    }

    else if (v14 == 32775)
    {
LABEL_6:
      uint64_t v16 = 1LL;
      swift_beginAccess();
      *(_BYTE *)(v9 + 16) = 1;
      return v16;
    }

    if (!ktrace_file_append(v10, a1))
    {
      type metadata accessor for TrimError(0LL);
      sub_186BFCB04(&qword_18C6A2D08, type metadata accessor for TrimError, (uint64_t)&unk_186C6185C);
      uint64_t v26 = swift_allocError();
      char v28 = v27;
      int v29 = ktrace_chunk_tag((uint64_t)a1);
      int v30 = MEMORY[0x186E445C0]();
      *char v28 = v29;
      v28[1] = v30;
      swift_storeEnumTagMultiPayload();
      swift_willThrow();
      swift_beginAccess();
      uint64_t v12 = *(void **)(v11 + 16);
      *(void *)(v11 + 16) = v26;

      return 0LL;
    }

    return 1LL;
  }

  __int128 v39 = v33;
  unint64_t v17 = v34;
  uint64_t v37 = v35;
  char v38 = v36;
  if (v34 > v31) {
    return 1LL;
  }
  unint64_t v18 = (char **)(v8 + 16);
  swift_beginAccess();
  uint64_t v19 = *v18;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *unint64_t v18 = v19;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    uint64_t v19 = sub_186C44944(0LL, *((void *)v19 + 2) + 1LL, 1, v19);
    *unint64_t v18 = v19;
  }

  unint64_t v22 = *((void *)v19 + 2);
  unint64_t v21 = *((void *)v19 + 3);
  if (v22 >= v21 >> 1)
  {
    uint64_t v19 = sub_186C44944((char *)(v21 > 1), v22 + 1, 1, v19);
    *unint64_t v18 = v19;
  }

  *((void *)v19 + 2) = v22 + 1;
  uint64_t v23 = &v19[40 * v22];
  *((_OWORD *)v23 + 2) = v39;
  *((void *)v23 + 6) = v17;
  uint64_t v24 = v37;
  v23[64] = v38;
  *((void *)v23 + 7) = v24;
  return 1LL;
}

uint64_t block_copy_helper_1(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_1()
{
  return swift_release();
}

unint64_t sub_186C46518()
{
  unint64_t result = qword_18C6A2D68;
  if (!qword_18C6A2D68)
  {
    unint64_t result = MEMORY[0x186E46630](&unk_186C6189C, &type metadata for TraceFileProvenance);
    atomic_store(result, (unint64_t *)&qword_18C6A2D68);
  }

  return result;
}

unint64_t sub_186C46564()
{
  unint64_t result = qword_18C6A2D70;
  if (!qword_18C6A2D70)
  {
    unint64_t result = MEMORY[0x186E46630](&unk_186C616D4, &type metadata for EventChunk.Kind);
    atomic_store(result, (unint64_t *)&qword_18C6A2D70);
  }

  return result;
}

uint64_t sub_186C465AC()
{
  return sub_186BFCB04(&qword_18C6A2D08, type metadata accessor for TrimError, (uint64_t)&unk_186C6185C);
}

uint64_t sub_186C465DC()
{
  return swift_initClassMetadata2();
}

uint64_t getEnumTagSinglePayload for EventChunk(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0xFC && *(_BYTE *)(a1 + 33)) {
    return (*(_DWORD *)a1 + 252);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 8);
  BOOL v4 = v3 >= 5;
  int v5 = v3 - 5;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for EventChunk(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFB)
  {
    *(void *)(result + 16) = 0LL;
    *(void *)(result + 24) = 0LL;
    *(_BYTE *)(result + 32) = 0;
    *(void *)unint64_t result = a2 - 252;
    *(void *)(result + 8) = 0LL;
    if (a3 >= 0xFC) {
      *(_BYTE *)(result + 33) = 1;
    }
  }

  else
  {
    if (a3 >= 0xFC) {
      *(_BYTE *)(result + 33) = 0;
    }
    if (a2) {
      *(_BYTE *)(result + 8) = a2 + 4;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for EventChunk()
{
  return &type metadata for EventChunk;
}

uint64_t sub_186C466D4()
{
  return swift_bridgeObjectRetain();
}

uint64_t destroy for EventChunk.Err()
{
  return sub_186C466F0();
}

uint64_t sub_186C466F0()
{
  return swift_bridgeObjectRelease();
}

uint64_t _s6ktrace10EventChunkV3ErrOwCP_0(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  int v5 = *((_DWORD *)a2 + 4);
  char v6 = *((_BYTE *)a2 + 20);
  sub_186C466D4();
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 16) = v5;
  *(_BYTE *)(a1 + 20) = v6;
  return a1;
}

uint64_t assignWithCopy for EventChunk.Err(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  int v5 = *((_DWORD *)a2 + 4);
  char v6 = *((_BYTE *)a2 + 20);
  sub_186C466D4();
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 16) = v5;
  *(_BYTE *)(a1 + 20) = v6;
  sub_186C466F0();
  return a1;
}

__n128 __swift_memcpy21_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  *(void *)(a1 + 13) = *(void *)(a2 + 13);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for EventChunk.Err(uint64_t a1, uint64_t a2)
{
  int v3 = *(_DWORD *)(a2 + 16);
  char v4 = *(_BYTE *)(a2 + 20);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_DWORD *)(a1 + 16) = v3;
  *(_BYTE *)(a1 + 20) = v4;
  sub_186C466F0();
  return a1;
}

uint64_t getEnumTagSinglePayload for EventChunk.Err(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 21)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 20);
  if (v3 <= 1) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for EventChunk.Err(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_BYTE *)(result + 20) = 0;
    *(_DWORD *)(result + 16) = 0;
    *(void *)__n128 result = a2 - 255;
    *(void *)(result + 8) = 0LL;
    if (a3 >= 0xFF) {
      *(_BYTE *)(result + 21) = 1;
    }
  }

  else
  {
    if (a3 >= 0xFF) {
      *(_BYTE *)(result + 21) = 0;
    }
    if (a2) {
      *(_BYTE *)(result + 20) = -(char)a2;
    }
  }

  return result;
}

uint64_t sub_186C468B4(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 20);
}

uint64_t sub_186C468BC(uint64_t result, char a2)
{
  *(_BYTE *)(result + 20) = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for EventChunk.Err()
{
  return &type metadata for EventChunk.Err;
}

uint64_t getEnumTagSinglePayload for EventChunk.Kind(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xFC) {
    goto LABEL_17;
  }
  if (a2 + 4 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 4) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 4;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 4;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 4;
    }
  }

uint64_t storeEnumTagSinglePayload for EventChunk.Kind(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFB) {
    return ((uint64_t (*)(void))((char *)&loc_186C469B4 + 4 * byte_186C61609[v4]))();
  }
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_186C469E8 + 4 * byte_186C61604[v4]))();
}

uint64_t sub_186C469E8(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_186C469F0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x186C469F8LL);
  }
  return result;
}

uint64_t sub_186C46A04(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x186C46A0CLL);
  }
  *(_BYTE *)__n128 result = a2 + 4;
  return result;
}

uint64_t sub_186C46A10(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_186C46A18(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for EventChunk.Kind()
{
  return &type metadata for EventChunk.Kind;
}

uint64_t sub_186C46A38(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t _s3ErrOwca(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  return a1;
}

__n128 __swift_memcpy20_8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u32[0] = a2[1].n128_u32[0];
  *a1 = result;
  return result;
}

uint64_t _s3ErrOwta(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  return a1;
}

uint64_t _s3ErrOwet(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 20)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t _s3ErrOwst(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_DWORD *)(result + 16) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0LL;
    if (a3 < 0) {
      *(_BYTE *)(result + 20) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 20) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *_s3ErrOMa()
{
  return &_s3ErrON;
}

uint64_t __swift_memcpy9_8(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(_BYTE *)(result + 8) = *((_BYTE *)a2 + 8);
  *(void *)__n128 result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for TrimLocation(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0xFD && *(_BYTE *)(a1 + 9)) {
    return (*(_DWORD *)a1 + 253);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 3) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for TrimLocation(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(_BYTE *)(result + 8) = 0;
    *(void *)__n128 result = a2 - 253;
    if (a3 >= 0xFD) {
      *(_BYTE *)(result + 9) = 1;
    }
  }

  else
  {
    if (a3 >= 0xFD) {
      *(_BYTE *)(result + 9) = 0;
    }
    if (a2) {
      *(_BYTE *)(result + 8) = -(char)a2;
    }
  }

  return result;
}

uint64_t sub_186C46C48(uint64_t a1)
{
  else {
    return (*(_DWORD *)a1 + 3);
  }
}

uint64_t sub_186C46C60(uint64_t result, unsigned int a2)
{
  if (a2 >= 3)
  {
    *(void *)__n128 result = a2 - 3;
    LOBYTE(a2) = 3;
  }

  *(_BYTE *)(result + 8) = a2;
  return result;
}

ValueMetadata *type metadata accessor for TrimLocation()
{
  return &type metadata for TrimLocation;
}

void *sub_186C46C88(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 - 8);
  int v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (void *)(v9 + ((v6 + 16LL) & ~(unint64_t)v6));
    swift_retain();
  }

  else
  {
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
      case 3u:
        uint64_t v7 = sub_186C5AC48();
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16LL))(a1, a2, v7);
        uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C6A2D18);
        *(_DWORD *)((char *)a1 + *(int *)(v8 + 4sub_186C418C4(*(void *)v0, *(_BYTE *)(v0 + 8)) = *(_DWORD *)((char *)a2 + *(int *)(v8 + 48));
        swift_storeEnumTagMultiPayload();
        break;
      case 4u:
      case 5u:
        uint64_t v11 = a2[1];
        *a1 = *a2;
        a1[1] = v11;
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
        break;
      case 6u:
        uint64_t v12 = a2[1];
        *a1 = *a2;
        a1[1] = v12;
        *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
        break;
      case 8u:
        uint64_t v13 = sub_186C5AC48();
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v13 - 8) + 16LL))(a1, a2, v13);
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(void *)(v5 + 64));
        break;
    }
  }

  return a1;
}

uint64_t sub_186C46E58(uint64_t a1)
{
  uint64_t result = swift_getEnumCaseMultiPayload();
  switch((int)result)
  {
    case 0:
    case 3:
    case 8:
      uint64_t v3 = sub_186C5AC48();
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8LL))(a1, v3);
      break;
    case 4:
    case 5:
    case 6:
      uint64_t result = swift_bridgeObjectRelease();
      break;
    default:
      return result;
  }

  return result;
}

void *sub_186C46ED0(void *a1, void *a2, uint64_t a3)
{
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
    case 3u:
      uint64_t v6 = sub_186C5AC48();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, a2, v6);
      uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C6A2D18);
      *(_DWORD *)((char *)a1 + *(int *)(v7 + 4sub_186C418C4(*(void *)v0, *(_BYTE *)(v0 + 8)) = *(_DWORD *)((char *)a2 + *(int *)(v7 + 48));
      goto LABEL_7;
    case 4u:
    case 5u:
      uint64_t v8 = a2[1];
      *a1 = *a2;
      a1[1] = v8;
      swift_bridgeObjectRetain();
      goto LABEL_7;
    case 6u:
      uint64_t v9 = a2[1];
      *a1 = *a2;
      a1[1] = v9;
      *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
      swift_bridgeObjectRetain();
      goto LABEL_7;
    case 8u:
      uint64_t v10 = sub_186C5AC48();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v10 - 8) + 16LL))(a1, a2, v10);
LABEL_7:
      swift_storeEnumTagMultiPayload();
      break;
    default:
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
      break;
  }

  return a1;
}

void *sub_186C47064(void *a1, void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_186C392F4((uint64_t)a1, type metadata accessor for TrimError);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
      case 3u:
        uint64_t v6 = sub_186C5AC48();
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, a2, v6);
        uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C6A2D18);
        *(_DWORD *)((char *)a1 + *(int *)(v7 + 4sub_186C418C4(*(void *)v0, *(_BYTE *)(v0 + 8)) = *(_DWORD *)((char *)a2 + *(int *)(v7 + 48));
        goto LABEL_8;
      case 4u:
      case 5u:
        *a1 = *a2;
        a1[1] = a2[1];
        swift_bridgeObjectRetain();
        goto LABEL_8;
      case 6u:
        *a1 = *a2;
        a1[1] = a2[1];
        a1[2] = a2[2];
        a1[3] = a2[3];
        swift_bridgeObjectRetain();
        goto LABEL_8;
      case 8u:
        uint64_t v8 = sub_186C5AC48();
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v8 - 8) + 16LL))(a1, a2, v8);
LABEL_8:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
        break;
    }
  }

  return a1;
}

char *sub_186C47230(char *a1, char *a2, uint64_t a3)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 8)
  {
    uint64_t v9 = sub_186C5AC48();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32LL))(a1, a2, v9);
    swift_storeEnumTagMultiPayload();
  }

  else if (EnumCaseMultiPayload != 3 && EnumCaseMultiPayload)
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
  }

  else
  {
    uint64_t v7 = sub_186C5AC48();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32LL))(a1, a2, v7);
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C6A2D18);
    *(_DWORD *)&a1[*(int *)(v8 + 48)] = *(_DWORD *)&a2[*(int *)(v8 + 48)];
    swift_storeEnumTagMultiPayload();
  }

  return a1;
}

char *sub_186C47360(char *a1, char *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_186C392F4((uint64_t)a1, type metadata accessor for TrimError);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 8)
    {
      uint64_t v9 = sub_186C5AC48();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32LL))(a1, a2, v9);
      swift_storeEnumTagMultiPayload();
    }

    else if (EnumCaseMultiPayload != 3 && EnumCaseMultiPayload)
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
    }

    else
    {
      uint64_t v7 = sub_186C5AC48();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32LL))(a1, a2, v7);
      uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C6A2D18);
      *(_DWORD *)&a1[*(int *)(v8 + 48)] = *(_DWORD *)&a2[*(int *)(v8 + 48)];
      swift_storeEnumTagMultiPayload();
    }
  }

  return a1;
}

uint64_t sub_186C474A8()
{
  uint64_t result = sub_186C5AC48();
  if (v1 <= 0x3F)
  {
    uint64_t v2 = *(void *)(result - 8) + 64LL;
    swift_getTupleTypeLayout2();
    uint64_t v5 = &v4;
    uint64_t v6 = "\b";
    uint64_t v7 = "\b";
    swift_getTupleTypeLayout2();
    uint64_t v8 = &v3;
    uint64_t v9 = &unk_186C619A0;
    uint64_t v10 = &unk_186C619A0;
    uint64_t v11 = &unk_186C619B8;
    uint64_t v12 = &unk_186C619D0;
    uint64_t v13 = v2;
    swift_initEnumMetadataMultiPayload();
    return 0LL;
  }

  return result;
}

char *initializeBufferWithCopyOfBuffer for TrimNote(char *a1, char **a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 - 8);
  int v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    uint64_t v8 = *a2;
    *(void *)a1 = *a2;
    a1 = &v8[(v6 + 16LL) & ~(unint64_t)v6];
    swift_retain();
  }

  else
  {
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        uint64_t v7 = a2[1];
        *(void *)a1 = *a2;
        *((void *)a1 + 1) = v7;
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
        break;
      case 1u:
        uint64_t v10 = *a2;
        uint64_t v11 = v10;
        *(void *)a1 = v10;
        swift_storeEnumTagMultiPayload();
        break;
      case 2u:
        uint64_t v12 = a2[1];
        *(void *)a1 = *a2;
        *((void *)a1 + 1) = v12;
        uint64_t v13 = a2[3];
        *((void *)a1 + 2) = a2[2];
        *((void *)a1 + 3) = v13;
        int v14 = a2[4];
        unint64_t v15 = a2[5];
        *((void *)a1 + 4) = v14;
        *((void *)a1 + 5) = v15;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
        break;
      case 3u:
        uint64_t v16 = sub_186C5AC48();
        (*(void (**)(char *, char **, uint64_t))(*(void *)(v16 - 8) + 16LL))(a1, a2, v16);
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(void *)(v5 + 64));
        break;
    }
  }

  return a1;
}

void destroy for TrimNote(id *a1)
{
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      goto LABEL_4;
    case 1u:

      break;
    case 2u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_4:
      swift_bridgeObjectRelease();
      break;
    case 3u:
      uint64_t v2 = sub_186C5AC48();
      (*(void (**)(id *, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
      break;
    default:
      return;
  }

void *initializeWithCopy for TrimNote(void *a1, void *a2, uint64_t a3)
{
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      uint64_t v6 = a2[1];
      *a1 = *a2;
      a1[1] = v6;
      swift_bridgeObjectRetain();
      goto LABEL_7;
    case 1u:
      uint64_t v7 = (void *)*a2;
      id v8 = v7;
      *a1 = v7;
      goto LABEL_7;
    case 2u:
      uint64_t v9 = a2[1];
      *a1 = *a2;
      a1[1] = v9;
      uint64_t v10 = a2[3];
      a1[2] = a2[2];
      a1[3] = v10;
      uint64_t v11 = a2[4];
      uint64_t v12 = a2[5];
      a1[4] = v11;
      a1[5] = v12;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_7;
    case 3u:
      uint64_t v13 = sub_186C5AC48();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v13 - 8) + 16LL))(a1, a2, v13);
LABEL_7:
      swift_storeEnumTagMultiPayload();
      break;
    default:
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
      break;
  }

  return a1;
}

void *assignWithCopy for TrimNote(void *a1, void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_186C392F4((uint64_t)a1, type metadata accessor for TrimNote);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        *a1 = *a2;
        a1[1] = a2[1];
        swift_bridgeObjectRetain();
        goto LABEL_8;
      case 1u:
        uint64_t v6 = (void *)*a2;
        id v7 = v6;
        *a1 = v6;
        goto LABEL_8;
      case 2u:
        *a1 = *a2;
        a1[1] = a2[1];
        a1[2] = a2[2];
        a1[3] = a2[3];
        a1[4] = a2[4];
        a1[5] = a2[5];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        goto LABEL_8;
      case 3u:
        uint64_t v8 = sub_186C5AC48();
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v8 - 8) + 16LL))(a1, a2, v8);
LABEL_8:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
        break;
    }
  }

  return a1;
}

void *initializeWithTake for TrimNote(void *a1, const void *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload() == 3)
  {
    uint64_t v6 = sub_186C5AC48();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
    swift_storeEnumTagMultiPayload();
  }

  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
  }

  return a1;
}

void *assignWithTake for TrimNote(void *a1, const void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_186C392F4((uint64_t)a1, type metadata accessor for TrimNote);
    if (swift_getEnumCaseMultiPayload() == 3)
    {
      uint64_t v6 = sub_186C5AC48();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
      swift_storeEnumTagMultiPayload();
    }

    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
    }
  }

  return a1;
}

uint64_t sub_186C47B14()
{
  uint64_t result = sub_186C5AC48();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0LL;
  }

  return result;
}

void *sub_186C47B98(void *a1, void *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v15 = *a2;
    *a1 = *a2;
    a1 = (void *)(v15 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain();
  }

  else
  {
    uint64_t v7 = sub_186C5AC48();
    uint64_t v8 = *(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16LL);
    v8(a1, a2, v7);
    v8((void *)((char *)a1 + a3[5]), (void *)((char *)a2 + a3[5]), v7);
    uint64_t v9 = a3[6];
    uint64_t v10 = a3[7];
    uint64_t v11 = (char *)a1 + v9;
    uint64_t v12 = (char *)a2 + v9;
    *(void *)uint64_t v11 = *(void *)v12;
    _BYTE v11[8] = v12[8];
    uint64_t v13 = (char *)a1 + v10;
    int v14 = (char *)a2 + v10;
    *(void *)uint64_t v13 = *(void *)v14;
    _BYTE v13[8] = v14[8];
    *((_BYTE *)a1 + a3[8]) = *((_BYTE *)a2 + a3[8]);
  }

  return a1;
}

uint64_t sub_186C47C74(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_186C5AC48();
  uint64_t v6 = *(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8LL);
  v6(a1, v4);
  return ((uint64_t (*)(uint64_t, uint64_t))v6)(a1 + *(int *)(a2 + 20), v4);
}

uint64_t sub_186C47CDC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_186C5AC48();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL);
  v7(a1, a2, v6);
  v7(a1 + a3[5], a2 + a3[5], v6);
  uint64_t v8 = a3[6];
  uint64_t v9 = a3[7];
  uint64_t v10 = a1 + v8;
  uint64_t v11 = a2 + v8;
  *(void *)uint64_t v10 = *(void *)v11;
  *(_BYTE *)(v10 + 8) = *(_BYTE *)(v11 + 8);
  uint64_t v12 = a1 + v9;
  uint64_t v13 = a2 + v9;
  *(void *)uint64_t v12 = *(void *)v13;
  *(_BYTE *)(v12 + 8) = *(_BYTE *)(v13 + 8);
  *(_BYTE *)(a1 + a3[8]) = *(_BYTE *)(a2 + a3[8]);
  return a1;
}

uint64_t sub_186C47D8C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_186C5AC48();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24LL);
  v7(a1, a2, v6);
  v7(a1 + a3[5], a2 + a3[5], v6);
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v8;
  uint64_t v10 = (uint64_t *)(a2 + v8);
  uint64_t v11 = *v10;
  *(_BYTE *)(v9 + 8) = *((_BYTE *)v10 + 8);
  *(void *)uint64_t v9 = v11;
  uint64_t v12 = a3[7];
  uint64_t v13 = a1 + v12;
  uint64_t v14 = a2 + v12;
  LOBYTE(v11) = *(_BYTE *)(v14 + 8);
  *(void *)uint64_t v13 = *(void *)v14;
  *(_BYTE *)(v13 + 8) = v11;
  *(_BYTE *)(a1 + a3[8]) = *(_BYTE *)(a2 + a3[8]);
  return a1;
}

uint64_t sub_186C47E40(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_186C5AC48();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32LL);
  v7(a1, a2, v6);
  v7(a1 + a3[5], a2 + a3[5], v6);
  uint64_t v8 = a3[6];
  uint64_t v9 = a3[7];
  uint64_t v10 = a1 + v8;
  uint64_t v11 = a2 + v8;
  *(void *)uint64_t v10 = *(void *)v11;
  *(_BYTE *)(v10 + 8) = *(_BYTE *)(v11 + 8);
  uint64_t v12 = a1 + v9;
  uint64_t v13 = a2 + v9;
  *(void *)uint64_t v12 = *(void *)v13;
  *(_BYTE *)(v12 + 8) = *(_BYTE *)(v13 + 8);
  *(_BYTE *)(a1 + a3[8]) = *(_BYTE *)(a2 + a3[8]);
  return a1;
}

uint64_t sub_186C47EF0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_186C5AC48();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40LL);
  v7(a1, a2, v6);
  v7(a1 + a3[5], a2 + a3[5], v6);
  uint64_t v8 = a3[6];
  uint64_t v9 = a3[7];
  uint64_t v10 = a1 + v8;
  uint64_t v11 = a2 + v8;
  *(void *)uint64_t v10 = *(void *)v11;
  *(_BYTE *)(v10 + 8) = *(_BYTE *)(v11 + 8);
  uint64_t v12 = a1 + v9;
  uint64_t v13 = a2 + v9;
  *(void *)uint64_t v12 = *(void *)v13;
  *(_BYTE *)(v12 + 8) = *(_BYTE *)(v13 + 8);
  *(_BYTE *)(a1 + a3[8]) = *(_BYTE *)(a2 + a3[8]);
  return a1;
}

uint64_t sub_186C47FA0()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_186C47FAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_186C5AC48();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  }
  unsigned int v9 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 32));
  if (v9 >= 2) {
    return ((v9 + 2147483646) & 0x7FFFFFFF) + 1;
  }
  else {
    return 0LL;
  }
}

uint64_t sub_186C48038()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_186C48044(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = sub_186C5AC48();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  }
  *(_BYTE *)(a1 + *(int *)(a4 + 32)) = a2 + 1;
  return result;
}

uint64_t sub_186C480BC()
{
  uint64_t result = sub_186C5AC48();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0LL;
  }

  return result;
}

ValueMetadata *type metadata accessor for TraceFileProvenance()
{
  return &type metadata for TraceFileProvenance;
}

uint64_t destroy for Trimming()
{
  return swift_release();
}

uint64_t initializeWithCopy for Trimming(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v4;
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for Trimming(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v4;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for Trimming(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for Trimming()
{
  return &type metadata for Trimming;
}

__n128 __swift_memcpy112_8(uint64_t a1, __int128 *a2)
{
  __int128 v2 = *a2;
  __int128 v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  __n128 result = (__n128)a2[3];
  __int128 v5 = a2[4];
  __int128 v6 = a2[6];
  *(_OWORD *)(a1 + 80) = a2[5];
  *(_OWORD *)(a1 + 96) = v6;
  *(__n128 *)(a1 + 48) = result;
  *(_OWORD *)(a1 + 64) = v5;
  return result;
}

uint64_t sub_186C482A4(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 != 1 && *(_BYTE *)(a1 + 112)) {
    return (*(_DWORD *)a1 + 2);
  }
  if (*(void *)a1) {
    int v3 = -1;
  }
  else {
    int v3 = 0;
  }
  return (v3 + 1);
}

uint64_t sub_186C482E8(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 1)
  {
    *(void *)(result + 104) = 0LL;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 - 2;
    if (a3 >= 2) {
      *(_BYTE *)(result + 112) = 1;
    }
  }

  else
  {
    if (a3 >= 2) {
      *(_BYTE *)(result + 112) = 0;
    }
    if (a2) {
      *(void *)__n128 result = 0LL;
    }
  }

  return result;
}

void type metadata accessor for ktrace_chunk(uint64_t a1)
{
}

void type metadata accessor for ktrace_point_64(uint64_t a1)
{
}

uint64_t sub_186C4836C(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 32)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t sub_186C4838C(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 16) = 0LL;
    *(void *)(result + 24) = 0LL;
    *(void *)__n128 result = (a2 - 1);
    *(void *)(result + 8) = 0LL;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }

  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }

  *(_BYTE *)(result + 32) = v3;
  return result;
}

void type metadata accessor for ktrace_point_32(uint64_t a1)
{
}

__n128 __swift_memcpy48_1(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

void type metadata accessor for artrace_ktrace_file_tracepoint64(uint64_t a1)
{
}

uint64_t storeEnumTagSinglePayload for TraceFileProvenance.CodingKeys(uint64_t a1, int a2, int a3)
{
  else {
    int v3 = 2;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2) {
    return ((uint64_t (*)(void))((char *)sub_186C48434 + 4 * byte_186C61642[v4]))();
  }
  else {
    return ((uint64_t (*)(void))((char *)sub_186C48454 + 4 * byte_186C61647[v4]))();
  }
}

_BYTE *sub_186C48434(_BYTE *result, char a2)
{
  *__n128 result = a2;
  return result;
}

_BYTE *sub_186C48454(_BYTE *result)
{
  *__n128 result = 0;
  return result;
}

_DWORD *sub_186C4845C(_DWORD *result, int a2)
{
  *__n128 result = a2;
  return result;
}

_WORD *sub_186C48464(_WORD *result, __int16 a2)
{
  *__n128 result = a2;
  return result;
}

_WORD *sub_186C4846C(_WORD *result)
{
  *__n128 result = 0;
  return result;
}

_DWORD *sub_186C48474(_DWORD *result)
{
  *__n128 result = 0;
  return result;
}

ValueMetadata *type metadata accessor for TraceFileProvenance.CodingKeys()
{
  return &type metadata for TraceFileProvenance.CodingKeys;
}

unint64_t sub_186C48494()
{
  unint64_t result = qword_18C6A93F0[0];
  if (!qword_18C6A93F0[0])
  {
    unint64_t result = MEMORY[0x186E46630](&unk_186C61B8C, &type metadata for TraceFileProvenance.CodingKeys);
    atomic_store(result, qword_18C6A93F0);
  }

  return result;
}

unint64_t sub_186C484DC()
{
  unint64_t result = qword_18C6A9500;
  if (!qword_18C6A9500)
  {
    unint64_t result = MEMORY[0x186E46630](&unk_186C61AFC, &type metadata for TraceFileProvenance.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_18C6A9500);
  }

  return result;
}

unint64_t sub_186C48524()
{
  unint64_t result = qword_18C6A9508[0];
  if (!qword_18C6A9508[0])
  {
    unint64_t result = MEMORY[0x186E46630](&unk_186C61B24, &type metadata for TraceFileProvenance.CodingKeys);
    atomic_store(result, qword_18C6A9508);
  }

  return result;
}

BOOL sub_186C48568(uint64_t a1)
{
  __int128 v2 = *(uint64_t (**)(_OWORD *))(v1 + 16);
  unint64_t v3 = *(void *)(v1 + 32);
  uint64_t v4 = *(void *)(a1 + 56);
  __int128 v5 = *(_OWORD *)(a1 + 16);
  v7[0] = *(_OWORD *)a1;
  v7[1] = v5;
  v7[2] = *(_OWORD *)(a1 + 32);
  uint64_t v8 = *(void *)(a1 + 48);
  uint64_t v9 = v4;
  return v2(v7) > v3;
}

BOOL sub_186C485C4(uint64_t a1)
{
  __int128 v2 = *(uint64_t (**)(_OWORD *))(v1 + 16);
  unint64_t v3 = *(void *)(v1 + 40);
  uint64_t v4 = *(void *)(a1 + 56);
  __int128 v5 = *(_OWORD *)(a1 + 16);
  v7[0] = *(_OWORD *)a1;
  v7[1] = v5;
  v7[2] = *(_OWORD *)(a1 + 32);
  uint64_t v8 = *(void *)(a1 + 48);
  uint64_t v9 = v4;
  return v2(v7) > v3;
}

BOOL sub_186C48620(uint64_t *a1)
{
  __int128 v2 = *(uint64_t (**)(uint64_t *))(v1 + 16);
  unint64_t v3 = *(void *)(v1 + 32);
  uint64_t v5 = *a1;
  __int128 v6 = *(_OWORD *)(a1 + 1);
  uint64_t v7 = a1[3];
  return v2(&v5) > v3;
}

BOOL sub_186C48674(uint64_t *a1)
{
  __int128 v2 = *(uint64_t (**)(uint64_t *))(v1 + 16);
  unint64_t v3 = *(void *)(v1 + 40);
  uint64_t v5 = *a1;
  __int128 v6 = *(_OWORD *)(a1 + 1);
  uint64_t v7 = a1[3];
  return v2(&v5) > v3;
}

BOOL sub_186C486C8(uint64_t a1)
{
  __int128 v2 = *(uint64_t (**)(void *))(v1 + 16);
  unint64_t v3 = *(void *)(v1 + 32);
  v6[0] = *(void *)a1;
  v6[1] = *(void *)(a1 + 8);
  __int128 v4 = *(_OWORD *)(a1 + 32);
  __int128 v7 = *(_OWORD *)(a1 + 16);
  __int128 v8 = v4;
  return v2(v6) > v3;
}

BOOL sub_186C4871C(uint64_t a1)
{
  __int128 v2 = *(uint64_t (**)(void *))(v1 + 16);
  unint64_t v3 = *(void *)(v1 + 40);
  v6[0] = *(void *)a1;
  v6[1] = *(void *)(a1 + 8);
  __int128 v4 = *(_OWORD *)(a1 + 32);
  __int128 v7 = *(_OWORD *)(a1 + 16);
  __int128 v8 = v4;
  return v2(v6) > v3;
}

unint64_t sub_186C48770()
{
  unint64_t result = qword_18C6A2F60;
  if (!qword_18C6A2F60)
  {
    unint64_t result = MEMORY[0x186E46630](MEMORY[0x189618C60], MEMORY[0x189618C50]);
    atomic_store(result, (unint64_t *)&qword_18C6A2F60);
  }

  return result;
}

void type metadata accessor for ktrace_point(uint64_t a1)
{
}

uint64_t __swift_instantiateGenericMetadata(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v6[0] = a2;
  v6[1] = a3;
  void v6[2] = a4;
  return MEMORY[0x186E465C4](a1, v6, a5);
}

uint64_t sub_186C487F4(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 64)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t sub_186C48814(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 56) = 0LL;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)unint64_t result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }

  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }

  *(_BYTE *)(result + 64) = v3;
  return result;
}

void type metadata accessor for ktrace_chunk.__Unnamed_union___Anonymous_field9(uint64_t a1)
{
}

uint64_t sub_186C48864(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 56)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t sub_186C48884(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)unint64_t result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }

  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }

  *(_BYTE *)(result + 56) = v3;
  return result;
}

void type metadata accessor for ktrace_chunk_array(uint64_t a1)
{
}

void type metadata accessor for ktrace_chunk.__Unnamed_union___Anonymous_field2(uint64_t a1)
{
}

void AmendmentError.errorDescription.getter()
{
  __asm { BR              X10 }

unint64_t sub_186C48928()
{
  return 0xD000000000000013LL;
}

void sub_186C48AEC(void *a1, id a2, char a3)
{
  switch(a3)
  {
    case 0:
    case 1:
    case 2:
    case 4:
      swift_bridgeObjectRelease();
      break;
    case 3:

      break;
    default:
      return;
  }

uint64_t Amending.toolName.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t Amending.interactive.getter()
{
  return *(unsigned __int8 *)(v0 + 16);
}

uint64_t Amending.notify.getter()
{
  uint64_t v1 = *(void *)(v0 + 24);
  swift_retain();
  return v1;
}

uint64_t Amending.init(toolName:interactive:notify:)@<X0>( uint64_t result@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  *(void *)a6 = result;
  *(void *)(a6 + 8) = a2;
  *(_BYTE *)(a6 + 16) = a3;
  *(void *)(a6 + 24) = a4;
  *(void *)(a6 + 32) = a5;
  *(void *)(a6 + 40) = 0LL;
  return result;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> Amending.amend(arguments:)( Swift::OpaquePointer arguments)
{
  rawValue = (unsigned __int8 *)arguments._rawValue;
  uint64_t v3 = sub_186C5AC60();
  uint64_t v131 = *(void *)(v3 - 8);
  uint64_t v132 = v3;
  MEMORY[0x1895F8858](v3);
  unint64_t v130 = (char *)&v120 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = (dispatch_semaphore_s *)sub_186C5AFFC();
  uint64_t v135 = *((void *)v5 - 1);
  uint64_t v136 = v5;
  MEMORY[0x1895F8858](v5);
  uint64_t v137 = (dispatch_queue_s *)((char *)&v120 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v133 = sub_186C5AFE4();
  MEMORY[0x1895F8858](v133);
  uint64_t v134 = (char *)&v120 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = sub_186C5AC78();
  uint64_t v128 = *(void *)(v8 - 8);
  uint64_t v129 = v8;
  MEMORY[0x1895F8858](v8);
  unint64_t v138 = (char *)&v120 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __int128 v10 = v1[1];
  __int128 v167 = *v1;
  __int128 v168 = v10;
  __int128 v169 = v1[2];
  uint64_t v11 = (char *)swift_allocObject();
  *((void *)v11 + 2) = MEMORY[0x18961AFF8];
  *((void *)v11 + 3) = MEMORY[0x18961AFE8];
  v11[32] = 0;
  uint64_t v13 = *((void *)&v167 + 1);
  uint64_t v12 = v167;
  uint64_t v14 = (_OWORD *)swift_allocObject();
  __int128 v15 = v1[1];
  v14[1] = *v1;
  void v14[2] = v15;
  void v14[3] = v1[2];
  swift_bridgeObjectRetain();
  swift_retain();
  sub_186C46058((uint64_t)&v167);
  uint64_t v16 = sub_186C019C8();
  uint64_t v17 = sub_186C019D4();
  uint64_t v18 = sub_186C019D4();
  v119.n128_u64[1] = v17;
  *((void *)&v118 + 1) = v14;
  v119.n128_u64[0] = (unint64_t)v16;
  *(void *)&__int128 v118 = sub_186C4A644;
  *(void *)&__int128 v117 = 0xD000000000000049LL;
  *((void *)&v117 + 1) = 0x8000000186C67AD0LL;
  sub_186C019E0( v12,  v13,  (uint64_t)sub_186C4A410,  (uint64_t)v11,  0xD000000000000039LL,  0x8000000186C67E60LL,  0LL,  0LL,  (uint64_t)&v158,  v117,  0,  v118,  v119,  v18);
  swift_retain();
  char v19 = sub_186BFDFF4();
  sub_186BFF3C4( 6579297LL,  0xE300000000000000LL,  0xD000000000000017LL,  0x8000000186C67EA0LL,  0LL,  0LL,  v19 & 1,  (uint64_t)sub_186C4A690,  (uint64_t)v11);
  swift_release();
  swift_retain();
  char v20 = sub_186BFDFF4();
  sub_186BFF2A4( 0x656D697265707865LL,  0xEC0000006C61746ELL,  0xD000000000000026LL,  0x8000000186C67EC0LL,  0LL,  0LL,  v20 & 1,  (uint64_t)sub_186C4A864,  (uint64_t)v11);
  swift_release();
  uint64_t v21 = v163;
  swift_retain();
  sub_186BFF17C(v21);
  *(void *)&__int128 v163 = sub_186C4A8A8;
  *((void *)&v163 + 1) = v11;
  v179[0] = v158;
  v179[1] = v159;
  v179[2] = v160;
  v179[3] = v161;
  v179[4] = v162;
  *(void *)&__int128 v180 = sub_186C4A8A8;
  *((void *)&v180 + 1) = v11;
  __int128 v181 = v164;
  __int128 v182 = v165;
  uint64_t v183 = v166;
  __int128 v172 = v160;
  __int128 v173 = v161;
  __int128 v170 = v158;
  __int128 v171 = v159;
  uint64_t v178 = v166;
  __int128 v176 = v164;
  __int128 v177 = v165;
  __int128 v174 = v162;
  __int128 v175 = v180;
  sub_186C45DB4(v179);
  unint64_t v22 = v140;
  unint64_t v23 = sub_186C0026C((uint64_t)rawValue);
  uint64_t v24 = v22;
  if (v22)
  {
    sub_186C45E80(v179);
    BOOL v25 = v179;
LABEL_3:
    sub_186C45E80(v25);
    swift_release();
    uint64_t v26 = 0LL;
LABEL_4:
    unint64_t v27 = (void (*)(__int128 *))*((void *)&v168 + 1);
    __int128 v158 = (unint64_t)v24;
    LOBYTE(v159) = 1;
    id v28 = v24;
    v27(&v158);

    swift_willThrow();
    int v29 = v26;
LABEL_5:
    sub_186BFF17C((uint64_t)v29);
    return;
  }

  int v30 = (void *)v23;
  int v140 = (void (*)(void))(v11 + 16);
  sub_186C45E80(v179);
  if (!v30)
  {
    sub_186C45E80(v179);
    swift_release();
    int v29 = 0LL;
    goto LABEL_5;
  }

  unint64_t v31 = v30[2];
  if (!v31)
  {
    swift_bridgeObjectRelease();
    sub_186C4AA40();
    uint64_t v24 = (void *)swift_allocError();
    *(void *)uint64_t v38 = 0xD000000000000024LL;
    *(void *)(v38 + 8) = 0x8000000186C680D0LL;
    *(_BYTE *)(v38 + 16) = 0;
    swift_willThrow();
    __int128 v155 = v164;
    __int128 v156 = v165;
    uint64_t v157 = v166;
    __int128 v151 = v160;
    __int128 v152 = v161;
    __int128 v153 = v162;
    __int128 v154 = v163;
    __int128 v149 = v158;
    __int128 v150 = v159;
    BOOL v25 = &v149;
    goto LABEL_3;
  }

  rawValue = (unsigned __int8 *)v11;
  __int128 v33 = v30 + 4;
  unint64_t v32 = v30[4];
  if (v31 != 1)
  {
    *(void *)&__int128 v149 = 0LL;
    *((void *)&v149 + 1) = 0xE000000000000000LL;
    sub_186C5B260();
    swift_bridgeObjectRelease();
    unint64_t v146 = 0xD000000000000011LL;
    unint64_t v147 = 0x8000000186C67B90LL;
    if (v30[2] < v31)
    {
      __break(1u);
      goto LABEL_49;
    }

    *(void *)&__int128 v149 = v30;
    *((void *)&v149 + 1) = v30 + 4;
    *(void *)&__int128 v150 = 1LL;
    *((void *)&v150 + 1) = (2 * v31) | 1;
    __swift_instantiateConcreteTypeFromMangledName(&qword_18C6A2D28);
    sub_186C253C0((unint64_t *)&qword_18C6A2D30, &qword_18C6A2D28, MEMORY[0x189618F88]);
    sub_186C5ACD8();
    swift_bridgeObjectRelease();
    sub_186C5ADD4();
    swift_bridgeObjectRelease();
    unint64_t v39 = v146;
    unint64_t v40 = v147;
    sub_186C4AA40();
    uint64_t v24 = (void *)swift_allocError();
    *(void *)uint64_t v41 = v39;
    *(void *)(v41 + 8) = v40;
    *(_BYTE *)(v41 + 16) = 0;
LABEL_15:
    swift_willThrow();
LABEL_21:
    __int128 v155 = v164;
    __int128 v156 = v165;
    uint64_t v157 = v166;
    __int128 v151 = v160;
    __int128 v152 = v161;
    __int128 v153 = v162;
    __int128 v154 = v163;
    __int128 v149 = v158;
    __int128 v150 = v159;
    BOOL v25 = &v149;
    goto LABEL_3;
  }

  unint64_t v34 = v30[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v35 = (void *)*((void *)&v169 + 1);
  if (*((void *)&v169 + 1))
  {
    unint64_t v36 = v32;
    uint64_t v37 = (uint64_t)v140;
    goto LABEL_17;
  }

  unint64_t v36 = v32;
  uint64_t v42 = sub_186C5AD74();
  uint64_t v35 = (void *)ktrace_file_open((const char *)(v42 + 32), 1);
  swift_release();
  uint64_t v37 = (uint64_t)v140;
  if (!v35)
  {
    *(void *)&__int128 v149 = 0LL;
    *((void *)&v149 + 1) = 0xE000000000000000LL;
    sub_186C5B260();
    swift_bridgeObjectRelease();
    unint64_t v146 = v32;
    unint64_t v147 = v34;
    uint64_t v48 = sub_186C5ADD4();
    int v49 = MEMORY[0x186E445C0](v48);
    if (!strerror(v49))
    {
LABEL_60:
      __break(1u);
LABEL_61:
      __break(1u);
      goto LABEL_62;
    }

    sub_186C5ADE0();
    sub_186C5ADD4();
    swift_bridgeObjectRelease();
    unint64_t v50 = v146;
    unint64_t v51 = v147;
    sub_186C4AA40();
    uint64_t v24 = (void *)swift_allocError();
    *(void *)uint64_t v52 = v50;
    *(void *)(v52 + 8) = v51;
    *(_BYTE *)(v52 + 16) = 1;
    goto LABEL_15;
  }

LABEL_64:
  __break(1u);
}

uint64_t sub_186C4A164(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = v3;
  int64_t v5 = *(void *)(a1 + 16);
  uint64_t v6 = MEMORY[0x18961AFE8];
  if (!v5) {
    return v6;
  }
  uint64_t v8 = a1;
  uint64_t v42 = MEMORY[0x18961AFE8];
  sub_186C18B84(0LL, v5, 0);
  uint64_t v6 = v42;
  int64_t v9 = sub_186C20DF4(v8);
  int v11 = v10;
  char v13 = v12 & 1;
  uint64_t v37 = v8 + 56;
  uint64_t result = swift_beginAccess();
  uint64_t v35 = v8;
  uint64_t v36 = a2;
  while ((v9 & 0x8000000000000000LL) == 0 && v9 < 1LL << *(_BYTE *)(v8 + 32))
  {
    if (*(_DWORD *)(v8 + 36) != v11) {
      goto LABEL_18;
    }
    char v39 = v13;
    int v40 = v11;
    int64_t v41 = v5;
    uint64_t v15 = v6;
    uint64_t v16 = (uint64_t *)(*(void *)(v8 + 48) + 16 * v9);
    uint64_t v6 = *v16;
    uint64_t v17 = v16[1];
    int v18 = *(unsigned __int8 *)(a2 + 16);
    swift_bridgeObjectRetain();
    int v19 = v18;
    uint64_t v20 = v4;
    uint64_t v21 = sub_186C134F0(v6, v17, v19, a3);
    if (v4)
    {
      swift_release();
      swift_bridgeObjectRelease();
      return v6;
    }

    uint64_t v25 = v22;
    if (!v22)
    {
      sub_186C4AA40();
      swift_allocError();
      *(void *)uint64_t v34 = v6;
      *(void *)(v34 + 8) = v17;
      *(_BYTE *)(v34 + 16) = 4;
      swift_willThrow();
      swift_release();
      return v6;
    }

    uint64_t v26 = v21;
    uint64_t v27 = v23;
    char v28 = v24;
    swift_bridgeObjectRelease();
    uint64_t v6 = v15;
    unint64_t v30 = *(void *)(v15 + 16);
    unint64_t v29 = *(void *)(v15 + 24);
    if (v30 >= v29 >> 1)
    {
      sub_186C18B84((char *)(v29 > 1), v30 + 1, 1);
      uint64_t v6 = v15;
    }

    *(void *)(v6 + 16) = v30 + 1;
    uint64_t v31 = v6 + 32 * v30;
    *(void *)(v31 + 32) = v26;
    *(void *)(v31 + 40) = v25;
    *(void *)(v31 + 48) = v27;
    *(_BYTE *)(v31 + 56) = v28 & 1;
    uint64_t v8 = v35;
    uint64_t result = sub_186C20E94(v9, v40, v39 & 1, v35);
    int64_t v9 = result;
    int v11 = v32;
    char v13 = v33 & 1;
    int64_t v5 = v41 - 1;
    uint64_t v4 = v20;
    a2 = v36;
    if (v41 == 1)
    {
      sub_186C253B4(result, v32, v33 & 1);
      return v6;
    }
  }

  __break(1u);
LABEL_17:
  __break(1u);
LABEL_18:
  __break(1u);
  return result;
}

uint64_t sub_186C4A3BC(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(a1 + 32))(a2) & 1;
}

uint64_t sub_186C4A3E4()
{
  return swift_deallocObject();
}

unint64_t sub_186C4A410()
{
  uint64_t v1 = sub_186BF1224(*(_BYTE *)(v0 + 32));
  uint64_t v2 = *(void *)(v1 + 16);
  if (v2)
  {
    uint64_t v3 = (void *)(v1 + 64);
    uint64_t v4 = (char *)MEMORY[0x18961AFE8];
    do
    {
      if (*v3) {
        sub_186C5ADD4();
      }
      swift_bridgeObjectRetain();
      sub_186C5ADD4();
      swift_bridgeObjectRelease();
      sub_186C5ADD4();
      swift_bridgeObjectRelease();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v4 = sub_186C01C3C(0LL, *((void *)v4 + 2) + 1LL, 1, v4);
      }
      unint64_t v6 = *((void *)v4 + 2);
      unint64_t v5 = *((void *)v4 + 3);
      if (v6 >= v5 >> 1) {
        uint64_t v4 = sub_186C01C3C((char *)(v5 > 1), v6 + 1, 1, v4);
      }
      *((void *)v4 + 2) = v6 + 1;
      uint64_t v7 = &v4[16 * v6];
      *((void *)v7 + 4) = 9LL;
      *((void *)v7 + 5) = 0xE100000000000000LL;
      v3 += 8;
      --v2;
    }

    while (v2);
  }

  swift_bridgeObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C6A21A8);
  sub_186C253C0((unint64_t *)&qword_18C6A21B0, &qword_18C6A21A8, MEMORY[0x189618458]);
  sub_186C5ACD8();
  swift_bridgeObjectRelease();
  sub_186C5B260();
  swift_bridgeObjectRelease();
  sub_186C5ADD4();
  swift_bridgeObjectRelease();
  return 0xD00000000000002DLL;
}

uint64_t sub_186C4A63C()
{
  return objectdestroy_2Tm();
}

uint64_t sub_186C4A644(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void (**)(void *))(v2 + 40);
  v5[0] = a1;
  v5[1] = a2;
  char v6 = 0;
  swift_bridgeObjectRetain();
  v3(v5);
  return swift_bridgeObjectRelease();
}

uint64_t sub_186C4A690(uint64_t a1, unint64_t a2)
{
  v27[0] = 44LL;
  v27[1] = 0xE100000000000000LL;
  uint64_t v25 = v27;
  swift_bridgeObjectRetain();
  unint64_t v5 = sub_186BEE808(0x7FFFFFFFFFFFFFFFLL, 1, sub_186BF0738, (uint64_t)v24, a1, a2);
  int64_t v6 = *((void *)v5 + 2);
  if (v6)
  {
    v27[4] = v2;
    v27[0] = MEMORY[0x18961AFE8];
    sub_186BEF8C8(0LL, v6, 0);
    uint64_t v7 = (void *)v27[0];
    uint64_t v8 = (uint64_t *)(v5 + 56);
    do
    {
      uint64_t v10 = *(v8 - 3);
      uint64_t v9 = *(v8 - 2);
      uint64_t v11 = *(v8 - 1);
      uint64_t v12 = *v8;
      swift_bridgeObjectRetain();
      uint64_t v13 = MEMORY[0x186E4477C](v10, v9, v11, v12);
      uint64_t v15 = v14;
      swift_bridgeObjectRelease();
      v27[0] = v7;
      unint64_t v17 = v7[2];
      unint64_t v16 = v7[3];
      if (v17 >= v16 >> 1)
      {
        sub_186BEF8C8((char *)(v16 > 1), v17 + 1, 1);
        uint64_t v7 = (void *)v27[0];
      }

      v7[2] = v17 + 1;
      int v18 = &v7[2 * v17];
      v18[4] = v13;
      v18[5] = v15;
      v8 += 4;
      --v6;
    }

    while (v6);
    swift_bridgeObjectRelease();
  }

  else
  {
    swift_bridgeObjectRelease();
    uint64_t v7 = (void *)MEMORY[0x18961AFE8];
  }

  swift_beginAccess();
  uint64_t v19 = v7[2];
  if (v19)
  {
    uint64_t v20 = v7 + 5;
    do
    {
      uint64_t v22 = *(v20 - 1);
      uint64_t v21 = *v20;
      swift_bridgeObjectRetain();
      sub_186C18EB0(&v26, v22, v21);
      swift_bridgeObjectRelease();
      v20 += 2;
      --v19;
    }

    while (v19);
  }

  swift_bridgeObjectRelease();
  return swift_endAccess();
}

uint64_t sub_186C4A864()
{
  uint64_t result = swift_beginAccess();
  *(_BYTE *)(v0 + 32) = 1;
  return result;
}

uint64_t sub_186C4A8A8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  sub_186BFB8D0();
  if ((sub_186C5B128() & 1) != 0)
  {
    swift_beginAccess();
    uint64_t v6 = *(void *)(v2 + 24);
    swift_bridgeObjectRetain();
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    *(void *)(v3 + 24) = v6;
    if ((result & 1) == 0)
    {
      uint64_t result = (uint64_t)sub_186C01C3C(0LL, *(void *)(v6 + 16) + 1LL, 1, (char *)v6);
      uint64_t v6 = result;
      *(void *)(v3 + 24) = result;
    }

    unint64_t v9 = *(void *)(v6 + 16);
    unint64_t v8 = *(void *)(v6 + 24);
    if (v9 >= v8 >> 1)
    {
      uint64_t result = (uint64_t)sub_186C01C3C((char *)(v8 > 1), v9 + 1, 1, (char *)v6);
      uint64_t v6 = result;
      *(void *)(v3 + 24) = result;
    }

    *(void *)(v6 + 16) = v9 + 1;
    unint64_t v10 = v6 + 16 * v9;
    *(void *)(v10 + 32) = a1;
    *(void *)(v10 + 40) = a2;
  }

  else
  {
    sub_186C5B260();
    swift_bridgeObjectRelease();
    sub_186C5ADD4();
    sub_186C4AA40();
    swift_allocError();
    *(void *)uint64_t v11 = 0xD000000000000010LL;
    *(void *)(v11 + 8) = 0x8000000186C68100LL;
    *(_BYTE *)(v11 + 16) = 0;
    return swift_willThrow();
  }

  return result;
}

unint64_t sub_186C4AA40()
{
  unint64_t result = qword_18C6A2F88;
  if (!qword_18C6A2F88)
  {
    unint64_t result = MEMORY[0x186E46630](&protocol conformance descriptor for AmendmentError, &type metadata for AmendmentError);
    atomic_store(result, (unint64_t *)&qword_18C6A2F88);
  }

  return result;
}

uint64_t sub_186C4AA84()
{
  return swift_deallocObject();
}

BOOL sub_186C4AA94(uint64_t *a1)
{
  uint64_t v2 = *(uint64_t **)(v1 + 16);
  uint64_t v3 = ktrace_machine_create(a1);
  *uint64_t v2 = v3;
  return v3 == 0;
}

uint64_t sub_186C4AAC0()
{
  return swift_deallocObject();
}

uint64_t sub_186C4AAD0()
{
  return (*(uint64_t (**)(void))(v0 + 16))() & 1;
}

uint64_t block_copy_helper_2(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_2()
{
  return swift_release();
}

uint64_t sub_186C4AB0C()
{
  return swift_deallocObject();
}

uint64_t sub_186C4AB40()
{
  uint64_t v1 = *(void *)(v0 + 64);
  uint64_t v2 = *(void (**)(void *))(v0 + 40);
  v4[0] = 0LL;
  v4[1] = 0LL;
  char v5 = 3;
  v2(v4);
  ktrace_session_destroy(v1);
  return sub_186C5B068();
}

uint64_t sub_186C4AB94()
{
  return objectdestroy_2Tm();
}

uint64_t objectdestroy_2Tm()
{
  return swift_deallocObject();
}

void sub_186C4ABD4()
{
  uint64_t v1 = *(void *)(v0 + 64);
  uint64_t v2 = *(void (**)(__int128 *))(v0 + 40);
  __int128 v3 = xmmword_186C61DF0;
  char v4 = 3;
  v2(&v3);
  ktrace_end(v1, 0);
}

uint64_t initializeBufferWithCopyOfBuffer for AmendmentError(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  return sub_186C058C4(a1, a2, a3, (void (*)(void, uint64_t, uint64_t))sub_186C4AC30);
}

id sub_186C4AC30(id result, id a2, char a3)
{
  switch(a3)
  {
    case 0:
    case 1:
    case 2:
    case 4:
      unint64_t result = (id)swift_bridgeObjectRetain();
      break;
    case 3:
      unint64_t result = result;
      break;
    default:
      return result;
  }

  return result;
}

void destroy for AmendmentError(uint64_t a1)
{
}

uint64_t *assignWithCopy for AmendmentError(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return sub_186C05920( a1,  a2,  a3,  (void (*)(void, uint64_t, uint64_t))sub_186C4AC30,  (void (*)(uint64_t, uint64_t, uint64_t))sub_186C48AEC);
}

uint64_t *assignWithTake for AmendmentError(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return sub_186C0598C(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t))sub_186C48AEC);
}

uint64_t getEnumTagSinglePayload for AmendmentError(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0xFC && *(_BYTE *)(a1 + 17)) {
    return (*(_DWORD *)a1 + 252);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 4) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for AmendmentError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFB)
  {
    *(_BYTE *)(result + 16) = 0;
    *(void *)unint64_t result = a2 - 252;
    *(void *)(result + 8) = 0LL;
    if (a3 >= 0xFC) {
      *(_BYTE *)(result + 17) = 1;
    }
  }

  else
  {
    if (a3 >= 0xFC) {
      *(_BYTE *)(result + 17) = 0;
    }
    if (a2) {
      *(_BYTE *)(result + 16) = -(char)a2;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for AmendmentError()
{
  return &type metadata for AmendmentError;
}

uint64_t initializeBufferWithCopyOfBuffer for AmendmentNote(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  return sub_186C058C4(a1, a2, a3, (void (*)(void, uint64_t, uint64_t))sub_186C4AD40);
}

id sub_186C4AD40(id result, id a2, char a3)
{
  if (a3 == 2) {
    return (id)swift_bridgeObjectRetain();
  }
  if (a3 != 1)
  {
    if (a3) {
      return result;
    }
    return (id)swift_bridgeObjectRetain();
  }

  return result;
}

void destroy for AmendmentNote(uint64_t a1)
{
}

void sub_186C4AD78(void *a1, id a2, char a3)
{
  if (a3 == 2)
  {
LABEL_4:
    swift_bridgeObjectRelease();
    return;
  }

  if (a3 != 1)
  {
    if (a3) {
      return;
    }
    goto LABEL_4;
  }
}

uint64_t *assignWithCopy for AmendmentNote(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return sub_186C05920( a1,  a2,  a3,  (void (*)(void, uint64_t, uint64_t))sub_186C4AD40,  (void (*)(uint64_t, uint64_t, uint64_t))sub_186C4AD78);
}

uint64_t *assignWithTake for AmendmentNote(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return sub_186C0598C(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t))sub_186C4AD78);
}

ValueMetadata *type metadata accessor for AmendmentNote()
{
  return &type metadata for AmendmentNote;
}

uint64_t destroy for AmendingOptions()
{
  return swift_bridgeObjectRelease();
}

uint64_t _s6ktrace15AmendingOptionsVwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for AmendingOptions(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  return a1;
}

uint64_t assignWithTake for AmendingOptions(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for AmendingOptions(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *((_BYTE *)a1 + 17)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AmendingOptions(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_BYTE *)(result + 16) = 0;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0LL;
    if (a3 < 0) {
      *(_BYTE *)(result + 17) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)unint64_t result = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 17) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for AmendingOptions()
{
  return &type metadata for AmendingOptions;
}

uint64_t initializeWithCopy for Amending(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v4;
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for Amending(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v4;
  swift_retain();
  swift_release();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  return a1;
}

uint64_t assignWithTake for Amending(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_release();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  return a1;
}

uint64_t getEnumTagSinglePayload for Amending(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 48)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Amending(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 40) = 0LL;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 48) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 48) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for Amending()
{
  return &type metadata for Amending;
}

void *sub_186C4B140@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *result;
  return result;
}

void sub_186C4B14C(void *a1@<X8>)
{
  *a1 = 0LL;
}

void *sub_186C4B154@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 | *result;
  return result;
}

void *sub_186C4B168@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 & *result;
  return result;
}

void *sub_186C4B17C@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 ^ *result;
  return result;
}

BOOL sub_186C4B190(void *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *v2 & *a2;
  if (v4 != *a2) {
    *v2 |= v3;
  }
  *a1 = v3;
  return v4 != v3;
}

void *sub_186C4B1C0@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *v2 & *result;
  if (v3) {
    *v2 &= ~*result;
  }
  *(void *)a2 = v3;
  *(_BYTE *)(a2 + 8) = v3 == 0;
  return result;
}

uint64_t *sub_186C4B1EC@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *result;
  uint64_t v4 = *v2;
  *v2 |= *result;
  uint64_t v5 = v4 & v3;
  *(void *)a2 = v5;
  *(_BYTE *)(a2 + 8) = v5 == 0;
  return result;
}

void *sub_186C4B210(void *result)
{
  *v1 |= *result;
  return result;
}

void *sub_186C4B224(void *result)
{
  *v1 &= *result;
  return result;
}

void *sub_186C4B238(void *result)
{
  *v1 ^= *result;
  return result;
}

void *sub_186C4B24C@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 & ~*result;
  return result;
}

BOOL sub_186C4B260(void *a1)
{
  return (*v1 & ~*a1) == 0LL;
}

BOOL sub_186C4B274(void *a1)
{
  return (*v1 & *a1) == 0LL;
}

BOOL sub_186C4B288(void *a1)
{
  return (*a1 & ~*v1) == 0LL;
}

BOOL sub_186C4B29C()
{
  return *v0 == 0LL;
}

void *sub_186C4B2AC(void *result)
{
  *v1 &= ~*result;
  return result;
}

void *sub_186C4B2C0@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = *result;
  *(_BYTE *)(a2 + 8) = 0;
  return result;
}

BOOL sub_186C4B2D0(void *a1, void *a2)
{
  return *a1 == *a2;
}

uint64_t sub_186C4B2E4@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = sub_186C4D8B0(a1);
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v3;
  return result;
}

uint64_t type metadata accessor for RecordingOptions.Options(uint64_t a1)
{
  return sub_186C45FF0(a1, (uint64_t *)&unk_18C6A3090);
}

void sub_186C4B334(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v30 = a2;
  uint64_t v31 = a3;
  uint64_t v29 = a1;
  uint64_t v24 = a4;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C6A21F8);
  uint64_t v5 = MEMORY[0x1895F8858](v4);
  uint64_t v25 = (uint64_t)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = MEMORY[0x1895F8858](v5);
  unint64_t v9 = (char *)&v24 - v8;
  uint64_t v10 = MEMORY[0x1895F8858](v7);
  uint64_t v12 = (char *)&v24 - v11;
  MEMORY[0x1895F8858](v10);
  uint64_t v14 = (char *)&v24 - v13;
  uint64_t v15 = sub_186C5AA8C();
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = 1LL;
  char v28 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v16 + 56);
  v28(v14, 1LL, 1LL, v15);
  id v27 = (id)objc_opt_self();
  __int128 v26 = xmmword_186C5E4F0;
  do
  {
    if (v17 == 1000)
    {
      __break(1u);
LABEL_8:
      __break(1u);
      goto LABEL_9;
    }

    uint64_t v32 = v30;
    uint64_t v33 = v31;
    swift_bridgeObjectRetain();
    sub_186C5ADD4();
    __swift_instantiateConcreteTypeFromMangledName(&qword_18C6A2190);
    uint64_t v18 = swift_allocObject();
    *(_OWORD *)(v18 + 16) = v26;
    *(void *)(v18 + 56) = MEMORY[0x189618740];
    *(void *)(v18 + 64) = MEMORY[0x1896187B0];
    *(void *)(v18 + 32) = v17;
    sub_186C5AD38();
    sub_186C5ADD4();
    swift_bridgeObjectRelease();
    sub_186C5ADD4();
    sub_186C5AA38();
    swift_bridgeObjectRelease();
    sub_186C4B62C((uint64_t)v14);
    v28(v12, 0LL, 1LL, v15);
    sub_186BFA418((uint64_t)v12, (uint64_t)v14, &qword_18C6A21F8);
    id v19 = objc_msgSend(v27, sel_defaultManager);
    sub_186C37570((uint64_t)v14, (uint64_t)v9);
    uint64_t v20 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48);
    if (v20(v9, 1LL, v15) == 1) {
      goto LABEL_8;
    }
    sub_186C5AA74();
    uint64_t v21 = (void *)sub_186C5AD08();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v16 + 8))(v9, v15);
    unsigned __int8 v22 = objc_msgSend(v19, sel_fileExistsAtPath_, v21);

    ++v17;
  }

  while ((v22 & 1) != 0);
  uint64_t v23 = v25;
  sub_186C37570((uint64_t)v14, v25);
  if (v20((char *)v23, 1LL, v15) != 1)
  {
    sub_186C4B62C((uint64_t)v14);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 32))(v24, v23, v15);
    return;
  }

uint64_t sub_186C4B62C(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C6A21F8);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_186C4B66C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v37 = a1;
  uint64_t v2 = v1;
  uint64_t v40 = *MEMORY[0x1895F89C0];
  uint64_t v3 = type metadata accessor for RecordingOptions.Options(0LL);
  MEMORY[0x1895F8858](v3);
  uint64_t v5 = (uint64_t *)((char *)&v36 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v6 = sub_186C5AA8C();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = MEMORY[0x1895F8858](v6);
  uint64_t v10 = (char *)&v36 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = MEMORY[0x1895F8858](v8);
  uint64_t v13 = (char *)&v36 - v12;
  MEMORY[0x1895F8858](v11);
  uint64_t v15 = (char *)&v36 - v14;
  uint64_t v16 = (uint64_t *)(v2 + *(int *)(v3 + 124));
  uint64_t v17 = v16[1];
  if (!v17) {
    __break(1u);
  }
  uint64_t v18 = *v16;
  swift_bridgeObjectRetain();
  sub_186C5AA08();
  char v19 = sub_186C5AE58();
  uint64_t v38 = v7;
  if ((v19 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    uint64_t v23 = sub_186C5AA14();
    uint64_t v25 = v24;
    sub_186C5AA50();
    if (sub_186C5AA74()) {
      BOOL v27 = 0;
    }
    else {
      BOOL v27 = v26 == 0xE000000000000000LL;
    }
    if (v27)
    {
      swift_bridgeObjectRelease();
    }

    else
    {
      char v28 = sub_186C5B4F4();
      swift_bridgeObjectRelease();
      if ((v28 & 1) == 0)
      {
        uint64_t v29 = v38;
        (*(void (**)(char *, char *, uint64_t))(v38 + 16))(v10, v13, v6);
LABEL_16:
        sub_186C4B334((uint64_t)v10, v23, v25, v37);
        swift_bridgeObjectRelease();
        uint64_t v35 = *(void (**)(char *, uint64_t))(v29 + 8);
        v35(v10, v6);
        v35(v13, v6);
        return ((uint64_t (*)(char *, uint64_t))v35)(v15, v6);
      }
    }

    id v33 = objc_msgSend((id)objc_opt_self(), sel_defaultManager);
    id v34 = objc_msgSend(v33, sel_currentDirectoryPath);

    sub_186C5AD2C();
    sub_186C5AA08();
    swift_bridgeObjectRelease();
    uint64_t v29 = v38;
    goto LABEL_16;
  }

  char v39 = 0;
  id v20 = objc_msgSend((id)objc_opt_self(), sel_defaultManager);
  uint64_t v21 = (void *)sub_186C5AD08();
  unsigned int v22 = objc_msgSend(v20, sel_fileExistsAtPath_isDirectory_, v21, &v39);

  if (v39 == 1) {
    goto LABEL_13;
  }
  sub_186C3A868(v2, (uint64_t)v5, type metadata accessor for RecordingOptions.Options);
  if (v22)
  {
    uint64_t v30 = *v5;
    sub_186C392F4((uint64_t)v5, type metadata accessor for RecordingOptions.Options);
    if ((v30 & 1) == 0)
    {
LABEL_13:
      type metadata accessor for KTraceRecordError();
      sub_186BFCB04( (unint64_t *)&qword_18C6A21E0,  (uint64_t (*)(uint64_t))type metadata accessor for KTraceRecordError,  (uint64_t)&unk_186C60EF4);
      swift_allocError();
      *uint64_t v31 = v18;
      v31[1] = v17;
      swift_storeEnumTagMultiPayload();
      swift_willThrow();
      return (*(uint64_t (**)(char *, uint64_t))(v38 + 8))(v15, v6);
    }

    swift_bridgeObjectRelease();
  }

  else
  {
    swift_bridgeObjectRelease();
    sub_186C392F4((uint64_t)v5, type metadata accessor for RecordingOptions.Options);
  }

  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v38 + 32))(v37, v15, v6);
}

uint64_t type metadata accessor for RecordingOptions(uint64_t a1)
{
  return sub_186C45FF0(a1, (uint64_t *)&unk_18C6A9910);
}

uint64_t sub_186C4BAD4(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = a3[2];
  if (!v3) {
    return 0LL;
  }
  BOOL v7 = a3[4] == a1 && a3[5] == a2;
  if (v7 || (sub_186C5B4F4() & 1) != 0) {
    return 0LL;
  }
  uint64_t v9 = 0LL;
  uint64_t v10 = a3 + 7;
  uint64_t v11 = 1LL;
  while (1)
  {
    if (v3 == v11) {
      return 0LL;
    }
    ++v9;
    if (*(v10 - 1) == a1 && *v10 == a2) {
      break;
    }
    char v13 = sub_186C5B4F4();
    uint64_t result = v11++;
    v10 += 2;
    if ((v13 & 1) != 0) {
      return result;
    }
  }

  return v9;
}

uint64_t sub_186C4BBB8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v117 = a3;
  uint64_t v5 = (int *)type metadata accessor for RecordingOptions.Options(0LL);
  MEMORY[0x1895F8858](v5);
  uint64_t v113 = (uint64_t)&v110 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C6A21F8);
  MEMORY[0x1895F8858](v7);
  uint64_t v112 = (uint64_t)&v110 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for RecordingOptions(0LL);
  uint64_t v115 = *(void *)(v9 - 8);
  uint64_t v116 = v9;
  MEMORY[0x1895F8858](v9);
  uint64_t v125 = (uint64_t *)((char *)&v110 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v11 = swift_allocBox();
  uint64_t v13 = (uint64_t)v12;
  *uint64_t v12 = 0LL;
  uint64_t v14 = (char *)v12 + v5[5];
  uint64_t v15 = sub_186C5AA8C();
  unint64_t v110 = *(void (**)(char *, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56LL);
  uint64_t v111 = v15;
  v110(v14, 1LL, 1LL);
  uint64_t v16 = MEMORY[0x18961AFE8];
  *(void *)(v13 + v5[6]) = MEMORY[0x18961AFE8];
  __int128 v118 = (void *)(v13 + v5[7]);
  *__int128 v118 = v16;
  *(void *)(v13 + v5[8]) = v16;
  uint64_t v17 = v13 + v5[9];
  *(void *)uint64_t v17 = 0LL;
  *(_BYTE *)(v17 + 8) = 1;
  uint64_t v18 = v13 + v5[10];
  *(_DWORD *)uint64_t v18 = 0;
  *(_BYTE *)(v18 + 4) = 1;
  uint64_t v19 = v13 + v5[11];
  *(void *)uint64_t v19 = 0LL;
  *(_BYTE *)(v19 + 8) = 1;
  *(void *)(v13 + v5[12]) = v16;
  *(void *)(v13 + v5[13]) = v16;
  *(_BYTE *)(v13 + v5[14]) = 0;
  uint64_t v20 = v13 + v5[15];
  *(void *)uint64_t v20 = 0LL;
  *(_BYTE *)(v20 + 8) = 1;
  *(_BYTE *)(v13 + v5[16]) = 0;
  *(_BYTE *)(v13 + v5[17]) = 0;
  *(_BYTE *)(v13 + v5[18]) = 1;
  uint64_t v21 = (void *)(v13 + v5[19]);
  void *v21 = 0LL;
  v21[1] = 0LL;
  unsigned int v22 = (void *)(v13 + v5[20]);
  *unsigned int v22 = 0LL;
  v22[1] = 0LL;
  uint64_t v23 = v13 + v5[21];
  *(void *)uint64_t v23 = 0LL;
  *(_BYTE *)(v23 + 8) = 1;
  *(_BYTE *)(v13 + v5[22]) = 0;
  uint64_t v24 = v13 + v5[23];
  *(_DWORD *)uint64_t v24 = 0;
  *(_BYTE *)(v24 + 4) = 1;
  uint64_t v25 = MEMORY[0x18961AFF8];
  *(void *)(v13 + v5[24]) = MEMORY[0x18961AFF8];
  *(void *)(v13 + v5[25]) = v25;
  *(void *)(v13 + v5[26]) = v16;
  *(_BYTE *)(v13 + v5[27]) = 0;
  *(_BYTE *)(v13 + v5[28]) = 0;
  *(void *)(v13 + v5[29]) = v16;
  uint64_t v26 = v13 + v5[30];
  *(void *)uint64_t v26 = 0LL;
  *(_BYTE *)(v26 + 8) = 1;
  BOOL v27 = (void *)(v13 + v5[31]);
  *BOOL v27 = 0LL;
  v27[1] = 0LL;
  char v28 = (void *)(v13 + v5[32]);
  *char v28 = 0x746C7561666564LL;
  v28[1] = 0xE700000000000000LL;
  uint64_t v29 = swift_allocObject();
  uint64_t v124 = v29;
  *(_BYTE *)(v29 + 16) = 0;
  uint64_t v114 = (_BYTE *)(v29 + 16);
  sub_186BFA418(a1, (uint64_t)v148, &qword_18C6A2A48);
  sub_186BFA418((uint64_t)v148, (uint64_t)&v151, &qword_18C6A2A48);
  uint64_t result = v151;
  if (v151)
  {
    uint64_t v31 = sub_186C5ADE0();
    uint64_t v119 = v32;
    uint64_t v120 = v31;
    uint64_t v33 = swift_allocObject();
    *(void *)(v33 + 16) = a2;
    __int128 v34 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)(v33 + 24) = *(_OWORD *)a1;
    *(_OWORD *)(v33 + 40) = v34;
    *(_OWORD *)(v33 + 56) = *(_OWORD *)(a1 + 32);
    *(void *)(v33 + 72) = *(void *)(a1 + 48);
    uint64_t v35 = swift_allocObject();
    __int128 v36 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)(v35 + 16) = *(_OWORD *)a1;
    *(_OWORD *)(v35 + 32) = v36;
    *(_OWORD *)(v35 + 48) = *(_OWORD *)(a1 + 32);
    *(void *)(v35 + 64) = *(void *)(a1 + 48);
    sub_186C3A7FC(a1);
    sub_186C3A7FC(a1);
    swift_bridgeObjectRetain();
    uint64_t v37 = sub_186C019C8();
    uint64_t v123 = a1;
    unint64_t v38 = (unint64_t)v37;
    v108.n128_u64[1] = sub_186C019D4();
    uint64_t v109 = sub_186C019D4();
    *((void *)&v107 + 1) = v35;
    v108.n128_u64[0] = v38;
    *(void *)&__int128 v107 = sub_186C4DE28;
    *(void *)&__int128 v106 = 0xD000000000000049LL;
    *((void *)&v106 + 1) = 0x8000000186C67AD0LL;
    uint64_t v39 = v120;
    uint64_t v120 = 0xD000000000000010LL;
    sub_186C019E0( v39,  v119,  (uint64_t)sub_186C4DDF8,  v33,  0xD000000000000010LL,  0x8000000186C68150LL,  0LL,  0LL,  (uint64_t)&v139,  v106,  0,  v107,  v108,  v109);
    *uint64_t v125 = a2;
    char v40 = *(_BYTE *)(v123 + 48);
    uint64_t v121 = a2;
    if ((v40 & 1) != 0)
    {
      *(void *)&__int128 v130 = MEMORY[0x18961AFE8];
      swift_bridgeObjectRetain();
      sub_186C4D11C(0LL, 2LL, 0);
      uint64_t v41 = v130;
      unint64_t v43 = *(void *)(v130 + 16);
      unint64_t v42 = *(void *)(v130 + 24);
      unint64_t v44 = v42 >> 1;
      unint64_t v45 = v43 + 1;
      if (v42 >> 1 <= v43)
      {
        sub_186C4D11C((char *)(v42 > 1), v43 + 1, 1);
        uint64_t v41 = v130;
        unint64_t v42 = *(void *)(v130 + 24);
        unint64_t v44 = v42 >> 1;
      }

      *(void *)(v41 + 16) = v45;
      uint64_t v46 = v41 + 24 * v43;
      *(_OWORD *)(v46 + 32) = xmmword_186C60A40;
      *(_BYTE *)(v46 + 48) = 0;
      int64_t v47 = v43 + 2;
      if (v44 <= v45)
      {
        sub_186C4D11C((char *)(v42 > 1), v47, 1);
        uint64_t v41 = v130;
      }

      *(void *)(v41 + 16) = v47;
      uint64_t v48 = v41 + 24 * v45;
      *(_OWORD *)(v48 + 32) = xmmword_186C61E00;
      *(_BYTE *)(v48 + 48) = 0;
      sub_186C4D24C(v41);
    }

    else
    {
      swift_bridgeObjectRetain();
    }

    swift_retain();
    sub_186BFF18C((uint64_t)sub_186C4DF24, v11);
    swift_release();
    swift_retain();
    sub_186BFF18C((uint64_t)sub_186C4DFB0, v11);
    swift_release();
    swift_retain();
    char v49 = sub_186BFDFF4();
    sub_186BFF3C4( 1851878512LL,  0xE400000000000000LL,  0xD000000000000023LL,  0x8000000186C68170LL,  0LL,  0LL,  v49 & 1,  (uint64_t)sub_186C4E03C,  v11);
    swift_release();
    swift_retain();
    char v50 = sub_186BFDFF4();
    sub_186BFF3C4( 6579297LL,  0xE300000000000000LL,  0xD00000000000002ALL,  0x8000000186C681A0LL,  0LL,  0LL,  v50 & 1,  (uint64_t)sub_186C4E0C4,  v11);
    swift_release();
    swift_retain();
    char v51 = sub_186BFDFF4();
    sub_186BFF3C4( 1953066351LL,  0xE400000000000000LL,  0xD00000000000002CLL,  0x8000000186C681D0LL,  0LL,  0LL,  v51 & 1,  (uint64_t)sub_186C4E2BC,  v11);
    swift_release();
    uint64_t v52 = swift_allocObject();
    *(void *)(v52 + 16) = v124;
    *(void *)(v52 + 24) = v11;
    uint64_t v53 = v144;
    swift_retain();
    swift_retain();
    sub_186BFF17C(v53);
    *(void *)&__int128 v144 = sub_186C4E4E0;
    *((void *)&v144 + 1) = v52;
    swift_retain();
    char v54 = sub_186BFDFF4();
    sub_186BFF3C4( 0xD000000000000012LL,  0x8000000186C68200LL,  0xD00000000000003BLL,  0x8000000186C68220LL,  0LL,  0LL,  v54 & 1,  (uint64_t)sub_186C4E6F8,  v11);
    swift_release();
    swift_retain();
    char v55 = sub_186BFDFF4();
    sub_186BFF3C4( v120,  0x8000000186C68260LL,  0xD00000000000003ELL,  0x8000000186C68280LL,  0LL,  0LL,  v55 & 1,  (uint64_t)sub_186C4E7F0,  v11);
    swift_release();
    swift_retain();
    char v56 = sub_186BFDFF4();
    sub_186BFF3C4( 0xD000000000000012LL,  0x8000000186C682C0LL,  0xD000000000000032LL,  0x8000000186C682E0LL,  0LL,  0LL,  v56 & 1,  (uint64_t)sub_186C4E8E8,  v11);
    swift_release();
    swift_retain();
    char v57 = sub_186BFDFF4();
    uint64_t v120 = 0xD000000000000013LL;
    sub_186BFF3C4( 0xD000000000000013LL,  0x8000000186C68320LL,  0xD000000000000038LL,  0x8000000186C68340LL,  0LL,  0LL,  v57 & 1,  (uint64_t)sub_186C4EB00,  v11);
    swift_release();
    swift_retain();
    char v58 = sub_186BFDFF4();
    sub_186BFF3C4( 0xD000000000000013LL,  0x8000000186C66DC0LL,  0xD00000000000002FLL,  0x8000000186C68380LL,  0LL,  0LL,  v58 & 1,  (uint64_t)sub_186C4EC18,  v11);
    swift_release();
    swift_retain();
    char v59 = sub_186BFDFF4();
    sub_186BFF3C4( 0xD00000000000001CLL,  0x8000000186C66DA0LL,  0xD000000000000041LL,  0x8000000186C683B0LL,  0LL,  0LL,  v59 & 1,  (uint64_t)sub_186C4ED48,  v11);
    swift_release();
    swift_retain();
    char v60 = sub_186BFDFF4();
    sub_186BFF3C4( 0xD000000000000015LL,  0x8000000186C68400LL,  0xD000000000000037LL,  0x8000000186C68420LL,  0LL,  0LL,  v60 & 1,  (uint64_t)sub_186C4EEF8,  v11);
    swift_release();
    swift_retain();
    char v61 = sub_186BFDFF4();
    sub_186BFF2A4( 0x746972777265766FLL,  0xE900000000000065LL,  0xD000000000000023LL,  0x8000000186C68460LL,  0LL,  0LL,  v61 & 1,  (uint64_t)sub_186C4EFF0,  v11);
    swift_release();
    swift_retain();
    char v62 = sub_186BFDFF4();
    sub_186BFF3C4( 0xD000000000000012LL,  0x8000000186C68490LL,  0xD000000000000026LL,  0x8000000186C684B0LL,  0LL,  0LL,  v62 & 1,  (uint64_t)sub_186C4F04C,  v11);
    swift_release();
    swift_retain();
    char v63 = sub_186BFDFF4();
    sub_186BFF2A4( 0x73736572706D6F63LL,  0xE800000000000000LL,  0xD000000000000021LL,  0x8000000186C684E0LL,  0LL,  0LL,  v63 & 1,  (uint64_t)sub_186C4F270,  v11);
    swift_release();
    swift_retain();
    char v64 = sub_186BFDFF4();
    sub_186BFF2A4( 0x73736572706D6F63LL,  0xEF676E697275642DLL,  0xD000000000000022LL,  0x8000000186C68510LL,  0LL,  0LL,  v64 & 1,  (uint64_t)sub_186C4F2D4,  v11);
    swift_release();
    swift_retain();
    char v65 = sub_186BFDFF4();
    uint64_t v119 = 0xD000000000000011LL;
    sub_186BFF3C4( 0xD000000000000011LL,  0x8000000186C68540LL,  0xD000000000000040LL,  0x8000000186C68560LL,  0LL,  0LL,  v65 & 1,  (uint64_t)sub_186C4F338,  v11);
    swift_release();
    swift_retain();
    char v66 = sub_186BFDFF4();
    sub_186BFF2A4( 0x656D697265707865LL,  0xEC0000006C61746ELL,  0xD000000000000019LL,  0x8000000186C685B0LL,  0LL,  0LL,  v66 & 1,  (uint64_t)sub_186C4F4D8,  v11);
    swift_release();
    uint64_t v67 = (uint64_t *)sub_186BFF158();
    swift_beginAccess();
    uint64_t v68 = *v67;
    uint64_t v69 = v67[1];
    swift_retain();
    swift_bridgeObjectRetain();
    char v70 = sub_186BFDFF4();
    sub_186BFF2A4(v68, v69, 0xD000000000000015LL, 0x8000000186C685D0LL, 0LL, 0LL, v70 & 1, (uint64_t)sub_186C4F53C, v11);
    swift_bridgeObjectRelease();
    swift_release();
    swift_retain();
    sub_186BFF3C4( 0xD000000000000012LL,  0x8000000186C685F0LL,  0xD000000000000028LL,  0x8000000186C68610LL,  0LL,  0LL,  1,  (uint64_t)sub_186C4F5A0,  v11);
    swift_release();
    swift_retain();
    sub_186BFF3C4( 0xD000000000000015LL,  0x8000000186C68640LL,  0xD00000000000002BLL,  0x8000000186C68660LL,  0LL,  0LL,  1,  (uint64_t)sub_186C4F740,  v11);
    swift_release();
    swift_retain();
    sub_186BFF3C4( 0xD000000000000015LL,  0x8000000186C68690LL,  0xD000000000000025LL,  0x8000000186C686B0LL,  0LL,  0LL,  1,  (uint64_t)sub_186C4F7C8,  v11);
    swift_release();
    swift_retain();
    sub_186BFF2A4( 0xD000000000000015LL,  0x8000000186C686E0LL,  0xD000000000000089LL,  0x8000000186C68700LL,  0LL,  0LL,  1,  (uint64_t)sub_186C4F850,  v11);
    swift_release();
    swift_retain();
    sub_186BFF3C4( v120,  0x8000000186C68790LL,  0xD000000000000049LL,  0x8000000186C687B0LL,  0LL,  0LL,  1,  (uint64_t)sub_186C4F8B4,  v11);
    swift_release();
    swift_retain();
    sub_186BFF2A4( 0xD000000000000016LL,  0x8000000186C68800LL,  0xD000000000000025LL,  0x8000000186C68820LL,  0LL,  0LL,  1,  (uint64_t)sub_186C4FCA4,  v11);
    swift_release();
    v149[6] = v145;
    v149[7] = v146;
    uint64_t v150 = v147;
    v149[2] = v141;
    v149[3] = v142;
    v149[4] = v143;
    v149[5] = v144;
    v149[0] = v139;
    v149[1] = v140;
    sub_186C45DB4(v149);
    uint64_t v71 = v122;
    unint64_t v72 = sub_186C0026C(v121);
    uint64_t v73 = v71;
    if (v71)
    {
      swift_bridgeObjectRelease();
      sub_186C45E80(v149);
LABEL_11:
      id v126 = v73;
      id v74 = v73;
      __swift_instantiateConcreteTypeFromMangledName(&qword_18C6A2280);
      if (swift_dynamicCast())
      {

        uint64_t v75 = v127;
        uint64_t v76 = v128;
        char v77 = v129;
        type metadata accessor for KTraceRecordError();
        sub_186BFCB04( (unint64_t *)&qword_18C6A21E0,  (uint64_t (*)(uint64_t))type metadata accessor for KTraceRecordError,  (uint64_t)&unk_186C60EF4);
        swift_allocError();
        *(void *)uint64_t v78 = v75;
        *(void *)(v78 + 8) = v76;
        *(_BYTE *)(v78 + 16) = v77;
        swift_storeEnumTagMultiPayload();
        swift_willThrow();
      }

      sub_186C3A8AC(v123);

      goto LABEL_14;
    }

    uint64_t v79 = v119;
    swift_bridgeObjectRelease();
    sub_186C45E80(v149);
    if (v72)
    {
      if (*(void *)(v72 + 16))
      {
        type metadata accessor for KTraceRecordError();
        sub_186BFCB04( (unint64_t *)&qword_18C6A21E0,  (uint64_t (*)(uint64_t))type metadata accessor for KTraceRecordError,  (uint64_t)&unk_186C60EF4);
        uint64_t v73 = (void *)swift_allocError();
        uint64_t v81 = v80;
        *(void *)&__int128 v130 = v72;
        __swift_instantiateConcreteTypeFromMangledName(&qword_18C6A21A8);
        sub_186BF0620();
        uint64_t v82 = sub_186C5ACD8();
        uint64_t v84 = v83;
        swift_bridgeObjectRelease();
        uint64_t *v81 = v82;
        v81[1] = v84;
        swift_storeEnumTagMultiPayload();
        swift_willThrow();
        goto LABEL_11;
      }

      swift_bridgeObjectRelease();
      swift_beginAccess();
      if ((*(_BYTE *)(v13 + v5[28]) & 1) == 0 && *(_BYTE *)(v13 + v5[17]) == 1)
      {
        type metadata accessor for KTraceRecordError();
        sub_186BFCB04( (unint64_t *)&qword_18C6A21E0,  (uint64_t (*)(uint64_t))type metadata accessor for KTraceRecordError,  (uint64_t)&unk_186C60EF4);
        swift_allocError();
        *unint64_t v85 = v79;
        v85[1] = 0x8000000186C68880LL;
LABEL_32:
        swift_storeEnumTagMultiPayload();
        swift_willThrow();
        sub_186C3A8AC(v123);
LABEL_14:
        __int128 v136 = v145;
        __int128 v137 = v146;
        uint64_t v138 = v147;
        __int128 v132 = v141;
        __int128 v133 = v142;
        __int128 v134 = v143;
        __int128 v135 = v144;
        __int128 v130 = v139;
        __int128 v131 = v140;
        sub_186C45E80(&v130);
        swift_release();
        swift_release();
        return swift_bridgeObjectRelease();
      }

      uint64_t v86 = (uint64_t *)(v13 + v5[31]);
      uint64_t v87 = v86[1];
      if (!v87)
      {
        type metadata accessor for KTraceRecordError();
        sub_186BFCB04( (unint64_t *)&qword_18C6A21E0,  (uint64_t (*)(uint64_t))type metadata accessor for KTraceRecordError,  (uint64_t)&unk_186C60EF4);
        swift_allocError();
        *uint64_t v95 = 0xD00000000000002ELL;
        v95[1] = 0x8000000186C68850LL;
        goto LABEL_32;
      }

      uint64_t v88 = *v86;
      uint64_t v89 = v114;
      swift_beginAccess();
      if (*v89 == 1)
      {
        swift_bridgeObjectRetain();
        if ((sub_186C5AE58() & 1) == 0)
        {
          type metadata accessor for KTraceRecordError();
          sub_186BFCB04( (unint64_t *)&qword_18C6A21E0,  (uint64_t (*)(uint64_t))type metadata accessor for KTraceRecordError,  (uint64_t)&unk_186C60EF4);
          swift_allocError();
          *uint64_t v101 = v88;
          v101[1] = v87;
          goto LABEL_32;
        }

        swift_bridgeObjectRelease();
      }

      uint64_t v90 = *(void *)(v13 + v5[24]);
      swift_bridgeObjectRetain();
      uint64_t v91 = swift_bridgeObjectRetain();
      char v92 = sub_186C2FC9C(v91, v90);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v92 & 1) == 0)
      {
        type metadata accessor for KTraceRecordError();
        sub_186BFCB04( (unint64_t *)&qword_18C6A21E0,  (uint64_t (*)(uint64_t))type metadata accessor for KTraceRecordError,  (uint64_t)&unk_186C60EF4);
        swift_allocError();
        uint64_t v97 = v96;
        uint64_t v98 = *(void *)(v13 + v5[24]);
        swift_bridgeObjectRetain();
        uint64_t v99 = swift_bridgeObjectRetain();
        uint64_t v100 = sub_186C379F8(v99, v98);
        swift_bridgeObjectRelease();
        *uint64_t v97 = v100;
        goto LABEL_32;
      }

      uint64_t v93 = v113;
      sub_186C3A868(v13, v113, type metadata accessor for RecordingOptions.Options);
      uint64_t v94 = v112;
      sub_186C4B66C(v112);
      sub_186C392F4(v93, type metadata accessor for RecordingOptions.Options);
      ((void (*)(uint64_t, void, uint64_t, uint64_t))v110)(v94, 0LL, 1LL, v111);
      sub_186C375B8(v94, v13 + v5[5]);
      uid_t v102 = geteuid();
      uint64_t v103 = (uint64_t)v125;
      if (v102)
      {
        type metadata accessor for KTraceRecordError();
        sub_186BFCB04( (unint64_t *)&qword_18C6A21E0,  (uint64_t (*)(uint64_t))type metadata accessor for KTraceRecordError,  (uint64_t)&unk_186C60EF4);
        swift_allocError();
        swift_storeEnumTagMultiPayload();
        swift_willThrow();
        sub_186C3A8AC(v123);
        __int128 v136 = v145;
        __int128 v137 = v146;
        uint64_t v138 = v147;
        __int128 v132 = v141;
        __int128 v133 = v142;
        __int128 v134 = v143;
        __int128 v135 = v144;
        __int128 v130 = v139;
        __int128 v131 = v140;
        sub_186C45E80(&v130);
        swift_release();
        swift_release();
        return swift_bridgeObjectRelease();
      }

      sub_186C3A8AC(v123);
      uint64_t v104 = v116;
      sub_186C3A868(v13, v103 + *(int *)(v116 + 20), type metadata accessor for RecordingOptions.Options);
      __int128 v136 = v145;
      __int128 v137 = v146;
      uint64_t v138 = v147;
      __int128 v132 = v141;
      __int128 v133 = v142;
      __int128 v134 = v143;
      __int128 v135 = v144;
      __int128 v130 = v139;
      __int128 v131 = v140;
      sub_186C45E80(&v130);
      swift_release();
      swift_release();
      uint64_t v105 = v117;
      sub_186C3A868(v103, v117, type metadata accessor for RecordingOptions);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v115 + 56))(v105, 0LL, 1LL, v104);
      return sub_186C392F4(v103, type metadata accessor for RecordingOptions);
    }

    else
    {
      sub_186C3A8AC(v123);
      sub_186C45E80(v149);
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v115 + 56))(v117, 1LL, 1LL, v116);
    }
  }

  else
  {
    __break(1u);
  }

  return result;
}

char *sub_186C4D11C(char *a1, int64_t a2, char a3)
{
  uint64_t result = sub_186C4D138(a1, a2, a3, *v3);
  *uint64_t v3 = result;
  return result;
}

char *sub_186C4D138(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_18C6A3030);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 24);
  }

  else
  {
    uint64_t v10 = (char *)MEMORY[0x18961AFE8];
  }

  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[24 * v8]) {
      memmove(v12, v13, 24 * v8);
    }
    *((void *)a4 + 2) = 0LL;
  }

  else
  {
    swift_arrayInitWithCopy();
  }

  swift_release();
  return v10;
}

uint64_t sub_186C4D24C(uint64_t result)
{
  uint64_t v2 = *(void *)(result + 16);
  uint64_t v3 = *v1;
  int64_t v4 = *(void *)(*v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }

  uint64_t v6 = result;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)result && v5 <= *(void *)(v3 + 24) >> 1)
  {
    if (*(void *)(v6 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_13;
  }

  if (v4 <= v5) {
    int64_t v10 = v4 + v2;
  }
  else {
    int64_t v10 = v4;
  }
  uint64_t result = (uint64_t)sub_186C4D338((char *)result, v10, 1, (char *)v3);
  uint64_t v3 = result;
  if (!*(void *)(v6 + 16))
  {
LABEL_13:
    if (!v2) {
      goto LABEL_14;
    }
    goto LABEL_16;
  }

char *sub_186C4D338(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_18C6A3030);
    int64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 24);
  }

  else
  {
    int64_t v10 = (char *)MEMORY[0x18961AFE8];
  }

  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[24 * v8]) {
      memmove(v12, v13, 24 * v8);
    }
    *((void *)a4 + 2) = 0LL;
  }

  else
  {
    swift_arrayInitWithCopy();
  }

  swift_bridgeObjectRelease();
  return v10;
}

char *sub_186C4D44C(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_18C6A3038);
    int64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }

  else
  {
    int64_t v10 = (char *)MEMORY[0x18961AFE8];
  }

  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0LL;
  }

  else
  {
    swift_arrayInitWithCopy();
  }

  swift_bridgeObjectRelease();
  return v10;
}

uint64_t sub_186C4D54C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v13 = a1;
  uint64_t v14 = a2;
  swift_bridgeObjectRetain();
  uint64_t v5 = sub_186C5AE88();
  unint64_t v6 = v4;
  if ((v4 & 0x1000000000000000LL) == 0)
  {
    if ((v4 & 0x2000000000000000LL) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t v8 = HIBYTE(v6) & 0xF;
    uint64_t v13 = v5;
    uint64_t v14 = v6 & 0xFFFFFFFFFFFFFFLL;
    int64_t v7 = (unsigned __int8 *)&v13;
    goto LABEL_7;
  }

  uint64_t v5 = sub_186C2B6CC();
  unint64_t v10 = v9;
  swift_bridgeObjectRelease();
  unint64_t v6 = v10;
  if ((v10 & 0x2000000000000000LL) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v5 & 0x1000000000000000LL) != 0)
  {
    int64_t v7 = (unsigned __int8 *)((v6 & 0xFFFFFFFFFFFFFFFLL) + 32);
    uint64_t v8 = v5 & 0xFFFFFFFFFFFFLL;
  }

  else
  {
    int64_t v7 = (unsigned __int8 *)sub_186C5B2B4();
  }

unsigned __int8 *sub_186C4D630(unsigned __int8 *result, uint64_t a2, uint64_t a3)
{
  int v3 = *result;
  if (v3 == 43)
  {
    if (a2 >= 1)
    {
      uint64_t v16 = a2 - 1;
      if (a2 != 1)
      {
        unsigned __int8 v17 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v18 = a3 + 55;
        }

        else
        {
          unsigned __int8 v17 = 97;
          unsigned __int8 v18 = 65;
        }

        if (a3 <= 10) {
          unsigned __int8 v19 = a3 + 48;
        }
        else {
          unsigned __int8 v19 = 58;
        }
        if (result)
        {
          unsigned int v8 = 0;
          uint64_t v20 = result + 1;
          do
          {
            unsigned int v21 = *v20;
            if (v21 < 0x30 || v21 >= v19)
            {
              if (v21 < 0x41 || v21 >= v18)
              {
                unsigned int v12 = 0;
                unsigned __int8 v13 = 1;
                if (v21 < 0x61 || v21 >= v17) {
                  return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
                }
                char v22 = -87;
              }

              else
              {
                char v22 = -55;
              }
            }

            else
            {
              char v22 = -48;
            }

            uint64_t v23 = (int)v8 * (uint64_t)(int)a3;
            unsigned __int8 v24 = v21 + v22;
            unsigned int v8 = v23 + v24;
            if (__OFADD__((_DWORD)v23, v24)) {
              goto LABEL_72;
            }
            ++v20;
            --v16;
          }

          while (v16);
LABEL_48:
          unsigned __int8 v13 = 0;
          unsigned int v12 = v8;
          return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
        }

        goto LABEL_71;
      }

LABEL_72:
      unsigned int v12 = 0;
      unsigned __int8 v13 = 1;
      return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
    }
  }

  else
  {
    if (v3 != 45)
    {
      if (a2)
      {
        unsigned __int8 v25 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v26 = a3 + 55;
        }

        else
        {
          unsigned __int8 v25 = 97;
          unsigned __int8 v26 = 65;
        }

        if (a3 <= 10) {
          unsigned __int8 v27 = a3 + 48;
        }
        else {
          unsigned __int8 v27 = 58;
        }
        if (result)
        {
          unsigned int v28 = 0;
          do
          {
            unsigned int v29 = *result;
            if (v29 < 0x30 || v29 >= v27)
            {
              if (v29 < 0x41 || v29 >= v26)
              {
                unsigned int v12 = 0;
                unsigned __int8 v13 = 1;
                if (v29 < 0x61 || v29 >= v25) {
                  return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
                }
                char v30 = -87;
              }

              else
              {
                char v30 = -55;
              }
            }

            else
            {
              char v30 = -48;
            }

            uint64_t v31 = (int)v28 * (uint64_t)(int)a3;
            unsigned __int8 v32 = v29 + v30;
            unsigned int v28 = v31 + v32;
            if (__OFADD__((_DWORD)v31, v32)) {
              goto LABEL_72;
            }
            ++result;
            --a2;
          }

          while (a2);
          unsigned __int8 v13 = 0;
          unsigned int v12 = v28;
          return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
        }

        goto LABEL_71;
      }

      goto LABEL_72;
    }

    if (a2 >= 1)
    {
      uint64_t v4 = a2 - 1;
      if (a2 != 1)
      {
        unsigned __int8 v5 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v6 = a3 + 55;
        }

        else
        {
          unsigned __int8 v5 = 97;
          unsigned __int8 v6 = 65;
        }

        if (a3 <= 10) {
          unsigned __int8 v7 = a3 + 48;
        }
        else {
          unsigned __int8 v7 = 58;
        }
        if (result)
        {
          unsigned int v8 = 0;
          unint64_t v9 = result + 1;
          while (1)
          {
            unsigned int v10 = *v9;
            if (v10 < 0x30 || v10 >= v7)
            {
              if (v10 < 0x41 || v10 >= v6)
              {
                unsigned int v12 = 0;
                unsigned __int8 v13 = 1;
                if (v10 < 0x61 || v10 >= v5) {
                  return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
                }
                char v11 = -87;
              }

              else
              {
                char v11 = -55;
              }
            }

            else
            {
              char v11 = -48;
            }

            uint64_t v14 = (int)v8 * (uint64_t)(int)a3;
            unsigned __int8 v15 = v10 + v11;
            unsigned int v8 = v14 - v15;
            if (__OFSUB__((_DWORD)v14, v15)) {
              goto LABEL_72;
            }
            ++v9;
            if (!--v4) {
              goto LABEL_48;
            }
          }
        }

uint64_t sub_186C4D8B0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return 0LL;
  }
  uint64_t result = 0LL;
  uint64_t v4 = (uint64_t *)(a1 + 32);
  do
  {
    uint64_t v6 = *v4++;
    uint64_t v5 = v6;
    if ((v6 & ~result) == 0) {
      uint64_t v5 = 0LL;
    }
    result |= v5;
    --v1;
  }

  while (v1);
  return result;
}

uint64_t sub_186C4D8E8(void *a1, int a2)
{
  int v3 = v2;
  uint64_t v6 = 0x746C7561666564LL;
  uint64_t v7 = sub_186C5AA8C();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1895F8858](v7);
  unsigned int v10 = (char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_186C4BAD4(0x6972657078652D2DLL, 0xEE006C61746E656DLL, a1);
  int v12 = v11;
  uint64_t v13 = sub_186C4BAD4(0x6E616C702D2DLL, 0xE600000000000000LL, a1);
  if ((v14 & 1) != 0) {
    goto LABEL_6;
  }
  uint64_t v15 = v13 + 1;
  if (__OFADD__(v13, 1LL))
  {
    __break(1u);
    goto LABEL_21;
  }

  if (v15 >= a1[2])
  {
LABEL_6:
    uint64_t v17 = 0xE700000000000000LL;
LABEL_7:
    unsigned __int8 v18 = sub_186C171D4((v12 & 1) == 0, a2 & 1);
    int v19 = v12;
    uint64_t v20 = v2;
    if (!v2)
    {
      int v3 = v18;
      int v41 = v19;
      uint64_t v37 = v6;
      int v42 = a2;
      swift_bridgeObjectRelease();
      int64_t v21 = v3[2];
      if (v21)
      {
        uint64_t v31 = v17;
        unsigned __int8 v32 = 0LL;
        uint64_t v33 = v10;
        uint64_t v34 = v8;
        uint64_t v35 = v7;
        v40[0] = MEMORY[0x18961AFE8];
        __int128 v36 = v3;
        sub_186BEF8C8(0LL, v21, 0);
        int v3 = v36;
        uint64_t v22 = v40[0];
        uint64_t v23 = v36 + 5;
        do
        {
          uint64_t v24 = *(v23 - 1);
          uint64_t v25 = *v23;
          v40[0] = v22;
          unint64_t v27 = *(void *)(v22 + 16);
          unint64_t v26 = *(void *)(v22 + 24);
          swift_bridgeObjectRetain();
          if (v27 >= v26 >> 1)
          {
            sub_186BEF8C8((char *)(v26 > 1), v27 + 1, 1);
            int v3 = v36;
            uint64_t v22 = v40[0];
          }

          v23 += 41;
          *(void *)(v22 + 16) = v27 + 1;
          uint64_t v28 = v22 + 16 * v27;
          *(void *)(v28 + 32) = v24;
          *(void *)(v28 + 40) = v25;
          --v21;
        }

        while (v21);
        swift_bridgeObjectRelease();
        uint64_t v8 = v34;
        uint64_t v7 = v35;
        uint64_t v20 = v32;
        unsigned int v10 = v33;
        uint64_t v17 = v31;
      }

      else
      {
        swift_bridgeObjectRelease();
        uint64_t v22 = MEMORY[0x18961AFE8];
      }

      sub_186C16DA8(v10, v37, v17, (v41 & 1) == 0, v42 & 1, 0LL, 0LL);
      if (!v20)
      {
        swift_bridgeObjectRelease();
        sub_186C12F68(v40);
        memcpy(v39, v40, 0x141uLL);
        v38[0] = 0LL;
        v38[1] = 0xE000000000000000LL;
        sub_186C5B260();
        swift_bridgeObjectRelease();
        v38[0] = 0x6020202020LL;
        v38[1] = 0xE500000000000000LL;
        swift_bridgeObjectRetain();
        sub_186C5ADD4();
        swift_bridgeObjectRelease();
        sub_186C5ADD4();
        swift_bridgeObjectRetain();
        sub_186C5ADD4();
        swift_bridgeObjectRelease();
        sub_186C5ADD4();
        v38[41] = v38[0];
        v38[42] = v38[1];
        memcpy(v38, v39, 0x141uLL);
        sub_186C14BA4(0x2020202020202020LL, 0xE800000000000000LL);
        sub_186C5ADD4();
        swift_bridgeObjectRelease();
        sub_186C5ADD4();
        sub_186C23A98((uint64_t)v39);
        v40[0] = 0LL;
        v40[1] = 0xE000000000000000LL;
        sub_186C5B260();
        swift_bridgeObjectRelease();
        v40[0] = 0xD00000000000002FLL;
        v40[1] = 0x8000000186C68980LL;
        sub_186C5ADD4();
        swift_bridgeObjectRelease();
        sub_186C5ADD4();
        v39[0] = (char *)v22;
        swift_bridgeObjectRetain();
        sub_186C09B30(v39);
        swift_bridgeObjectRelease();
        __swift_instantiateConcreteTypeFromMangledName(&qword_18C6A21A8);
        sub_186BF0620();
        sub_186C5ACD8();
        swift_release();
        sub_186C5ADD4();
        swift_bridgeObjectRelease();
        int v3 = (void *)v40[0];
        (*(void (**)(_BYTE *, uint64_t))(v8 + 8))(v10, v7);
        return (uint64_t)v3;
      }

      swift_bridgeObjectRelease();
    }

    swift_bridgeObjectRelease();
    return (uint64_t)v3;
  }

  if ((v15 & 0x8000000000000000LL) == 0)
  {
    uint64_t v16 = &a1[2 * v15];
    uint64_t v6 = v16[4];
    uint64_t v17 = v16[5];
    swift_bridgeObjectRetain();
    goto LABEL_7;
  }

uint64_t sub_186C4DDC4()
{
  return swift_deallocObject();
}

uint64_t sub_186C4DDD4()
{
  return swift_deallocObject();
}

uint64_t sub_186C4DDF8()
{
  return sub_186C4D8E8(*(void **)(v0 + 16), (*(_DWORD *)(v0 + 72) >> 1) & 1);
}

uint64_t sub_186C4DE18()
{
  return swift_deallocObject();
}

uint64_t sub_186C4DE28(uint64_t a1, uint64_t a2)
{
  uint64_t result = v8;
  if (v8)
  {
    nullsub_1(v8);
    __swift_instantiateConcreteTypeFromMangledName(&qword_18C6A2318);
    uint64_t v6 = swift_allocObject();
    *(_OWORD *)(v6 + 16) = xmmword_186C5E4F0;
    *(void *)(v6 + 56) = MEMORY[0x189617FA8];
    *(void *)(v6 + 32) = a1;
    *(void *)(v6 + 40) = a2;
    sub_186BFB7C8();
    swift_bridgeObjectRetain();
    sub_186C5B578();
    return swift_bridgeObjectRelease();
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_186C4DF24(uint64_t a1, uint64_t a2)
{
  uint64_t result = type metadata accessor for RecordingOptions.Options(0LL);
  if (a2)
  {
    uint64_t v5 = result;
    uint64_t v6 = swift_projectBox();
    swift_beginAccess();
    uint64_t v7 = (void *)(v6 + *(int *)(v5 + 124));
    *uint64_t v7 = a1;
    v7[1] = a2;
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRelease();
  }

  return result;
}

uint64_t sub_186C4DFB0(uint64_t a1, uint64_t a2)
{
  uint64_t result = type metadata accessor for RecordingOptions.Options(0LL);
  if (a2)
  {
    uint64_t v5 = result;
    uint64_t v6 = swift_projectBox();
    swift_beginAccess();
    uint64_t v7 = (void *)(v6 + *(int *)(v5 + 128));
    *uint64_t v7 = a1;
    v7[1] = a2;
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRelease();
  }

  return result;
}

uint64_t sub_186C4E03C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for RecordingOptions.Options(0LL);
  uint64_t v5 = swift_projectBox();
  swift_beginAccess();
  uint64_t v6 = (void *)(v5 + *(int *)(v4 + 128));
  *uint64_t v6 = a1;
  v6[1] = a2;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRelease();
}

uint64_t sub_186C4E0C4(uint64_t a1, unint64_t a2)
{
  v27[0] = 44LL;
  v27[1] = 0xE100000000000000LL;
  uint64_t v25 = v27;
  swift_bridgeObjectRetain();
  uint64_t v5 = sub_186BEE808(0x7FFFFFFFFFFFFFFFLL, 1, sub_186BF0290, (uint64_t)v24, a1, a2);
  int64_t v6 = *((void *)v5 + 2);
  if (v6)
  {
    v27[4] = v2;
    v27[0] = MEMORY[0x18961AFE8];
    sub_186BEF8C8(0LL, v6, 0);
    uint64_t v7 = (void *)v27[0];
    uint64_t v8 = (uint64_t *)(v5 + 56);
    do
    {
      uint64_t v10 = *(v8 - 3);
      uint64_t v9 = *(v8 - 2);
      uint64_t v12 = *(v8 - 1);
      uint64_t v11 = *v8;
      swift_bridgeObjectRetain();
      uint64_t v13 = MEMORY[0x186E4477C](v10, v9, v12, v11);
      uint64_t v15 = v14;
      swift_bridgeObjectRelease();
      v27[0] = v7;
      unint64_t v17 = v7[2];
      unint64_t v16 = v7[3];
      if (v17 >= v16 >> 1)
      {
        sub_186BEF8C8((char *)(v16 > 1), v17 + 1, 1);
        uint64_t v7 = (void *)v27[0];
      }

      v7[2] = v17 + 1;
      unsigned __int8 v18 = &v7[2 * v17];
      v18[4] = v13;
      v18[5] = v15;
      v8 += 4;
      --v6;
    }

    while (v6);
    swift_bridgeObjectRelease();
  }

  else
  {
    swift_bridgeObjectRelease();
    uint64_t v7 = (void *)MEMORY[0x18961AFE8];
  }

  swift_beginAccess();
  uint64_t v19 = v7[2];
  if (v19)
  {
    uint64_t v20 = v7 + 5;
    do
    {
      uint64_t v22 = *(v20 - 1);
      uint64_t v21 = *v20;
      swift_bridgeObjectRetain();
      sub_186C18EB0(&v26, v22, v21);
      swift_bridgeObjectRelease();
      v20 += 2;
      --v19;
    }

    while (v19);
  }

  swift_bridgeObjectRelease();
  return swift_endAccess();
}

uint64_t sub_186C4E2BC(uint64_t a1, unint64_t a2)
{
  v27[0] = 44LL;
  v27[1] = 0xE100000000000000LL;
  uint64_t v25 = v27;
  swift_bridgeObjectRetain();
  uint64_t v5 = sub_186BEE808(0x7FFFFFFFFFFFFFFFLL, 1, sub_186BF0290, (uint64_t)v24, a1, a2);
  int64_t v6 = *((void *)v5 + 2);
  if (v6)
  {
    v27[4] = v2;
    v27[0] = MEMORY[0x18961AFE8];
    sub_186BEF8C8(0LL, v6, 0);
    uint64_t v7 = (void *)v27[0];
    uint64_t v8 = (uint64_t *)(v5 + 56);
    do
    {
      uint64_t v10 = *(v8 - 3);
      uint64_t v9 = *(v8 - 2);
      uint64_t v12 = *(v8 - 1);
      uint64_t v11 = *v8;
      swift_bridgeObjectRetain();
      uint64_t v13 = MEMORY[0x186E4477C](v10, v9, v12, v11);
      uint64_t v15 = v14;
      swift_bridgeObjectRelease();
      v27[0] = v7;
      unint64_t v17 = v7[2];
      unint64_t v16 = v7[3];
      if (v17 >= v16 >> 1)
      {
        sub_186BEF8C8((char *)(v16 > 1), v17 + 1, 1);
        uint64_t v7 = (void *)v27[0];
      }

      v7[2] = v17 + 1;
      unsigned __int8 v18 = &v7[2 * v17];
      v18[4] = v13;
      v18[5] = v15;
      v8 += 4;
      --v6;
    }

    while (v6);
    swift_bridgeObjectRelease();
  }

  else
  {
    swift_bridgeObjectRelease();
    uint64_t v7 = (void *)MEMORY[0x18961AFE8];
  }

  swift_beginAccess();
  uint64_t v19 = v7[2];
  if (v19)
  {
    uint64_t v20 = v7 + 5;
    do
    {
      uint64_t v22 = *(v20 - 1);
      uint64_t v21 = *v20;
      swift_bridgeObjectRetain();
      sub_186C18EB0(&v26, v22, v21);
      swift_bridgeObjectRelease();
      v20 += 2;
      --v19;
    }

    while (v19);
  }

  swift_bridgeObjectRelease();
  return swift_endAccess();
}

uint64_t sub_186C4E4B4()
{
  return swift_deallocObject();
}

uint64_t sub_186C4E4E0(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(v2 + 16);
  uint64_t v6 = type metadata accessor for RecordingOptions.Options(0LL);
  uint64_t v7 = swift_projectBox();
  if (a1 == 0x687461702D6F74LL && a2 == 0xE700000000000000LL || (sub_186C5B4F4() & 1) != 0)
  {
    uint64_t result = swift_beginAccess();
    *(_BYTE *)(v5 + 16) = 1;
  }

  else
  {
    sub_186BFB8D0();
    if ((sub_186C5B128() & 1) != 0)
    {
      swift_beginAccess();
      uint64_t v9 = *(int *)(v6 + 104);
      uint64_t v10 = *(void *)(v7 + v9);
      swift_bridgeObjectRetain();
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      *(void *)(v7 + v9) = v10;
      if ((result & 1) == 0)
      {
        uint64_t result = (uint64_t)sub_186C01C3C(0LL, *(void *)(v10 + 16) + 1LL, 1, (char *)v10);
        uint64_t v10 = result;
        *(void *)(v7 + v9) = result;
      }

      unint64_t v11 = *(void *)(v10 + 16);
      unint64_t v12 = *(void *)(v10 + 24);
      unint64_t v13 = v11 + 1;
      if (v11 >= v12 >> 1)
      {
        unint64_t v16 = (char *)v10;
        unint64_t v17 = *(void *)(v10 + 16);
        uint64_t result = (uint64_t)sub_186C01C3C((char *)(v12 > 1), v11 + 1, 1, v16);
        unint64_t v11 = v17;
        uint64_t v10 = result;
        *(void *)(v7 + v9) = result;
      }

      *(void *)(v10 + 16) = v13;
      unint64_t v14 = v10 + 16 * v11;
      *(void *)(v14 + 32) = a1;
      *(void *)(v14 + 40) = a2;
    }

    else
    {
      type metadata accessor for KTraceRecordError();
      sub_186BFCB04( (unint64_t *)&qword_18C6A21E0,  (uint64_t (*)(uint64_t))type metadata accessor for KTraceRecordError,  (uint64_t)&unk_186C60EF4);
      swift_allocError();
      *(void *)uint64_t v15 = a1;
      *(void *)(v15 + 8) = a2;
      *(_BYTE *)(v15 + 16) = 0;
      swift_storeEnumTagMultiPayload();
      swift_bridgeObjectRetain();
      return swift_willThrow();
    }
  }

  return result;
}

uint64_t sub_186C4E6F8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for RecordingOptions.Options(0LL);
  uint64_t v5 = swift_projectBox();
  swift_beginAccess();
  uint64_t v6 = *(int *)(v4 + 48);
  uint64_t v7 = *(void *)(v5 + v6);
  swift_bridgeObjectRetain();
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  *(void *)(v5 + v6) = v7;
  if ((result & 1) == 0)
  {
    uint64_t result = (uint64_t)sub_186C01C3C(0LL, *(void *)(v7 + 16) + 1LL, 1, (char *)v7);
    uint64_t v7 = result;
    *(void *)(v5 + v6) = result;
  }

  unint64_t v10 = *(void *)(v7 + 16);
  unint64_t v9 = *(void *)(v7 + 24);
  if (v10 >= v9 >> 1)
  {
    uint64_t result = (uint64_t)sub_186C01C3C((char *)(v9 > 1), v10 + 1, 1, (char *)v7);
    uint64_t v7 = result;
    *(void *)(v5 + v6) = result;
  }

  *(void *)(v7 + 16) = v10 + 1;
  unint64_t v11 = v7 + 16 * v10;
  *(void *)(v11 + 32) = a1;
  *(void *)(v11 + 40) = a2;
  return result;
}

uint64_t sub_186C4E7F0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for RecordingOptions.Options(0LL);
  uint64_t v5 = swift_projectBox();
  swift_beginAccess();
  uint64_t v6 = *(int *)(v4 + 52);
  uint64_t v7 = *(void *)(v5 + v6);
  swift_bridgeObjectRetain();
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  *(void *)(v5 + v6) = v7;
  if ((result & 1) == 0)
  {
    uint64_t result = (uint64_t)sub_186C01C3C(0LL, *(void *)(v7 + 16) + 1LL, 1, (char *)v7);
    uint64_t v7 = result;
    *(void *)(v5 + v6) = result;
  }

  unint64_t v10 = *(void *)(v7 + 16);
  unint64_t v9 = *(void *)(v7 + 24);
  if (v10 >= v9 >> 1)
  {
    uint64_t result = (uint64_t)sub_186C01C3C((char *)(v9 > 1), v10 + 1, 1, (char *)v7);
    uint64_t v7 = result;
    *(void *)(v5 + v6) = result;
  }

  *(void *)(v7 + 16) = v10 + 1;
  unint64_t v11 = v7 + 16 * v10;
  *(void *)(v11 + 32) = a1;
  *(void *)(v11 + 40) = a2;
  return result;
}

void sub_186C4E8E8(uint64_t a1, unint64_t a2)
{
  uint64_t v5 = type metadata accessor for RecordingOptions.Options(0LL);
  uint64_t v6 = swift_projectBox();
  unint64_t v7 = sub_186C293DC(a1, a2, 1);
  if (v2)
  {
    id v24 = v2;
    id v8 = v2;
    __swift_instantiateConcreteTypeFromMangledName(&qword_18C6A2280);
    if ((swift_dynamicCast() & 1) == 0)
    {
LABEL_5:

      return;
    }

    sub_186BF0D98(&v22, (uint64_t)v23);
    type metadata accessor for KTraceRecordError();
    sub_186BFCB04( (unint64_t *)&qword_18C6A21E0,  (uint64_t (*)(uint64_t))type metadata accessor for KTraceRecordError,  (uint64_t)&unk_186C60EF4);
    unint64_t v9 = (void *)swift_allocError();
    unint64_t v11 = v10;
    uint64_t v12 = sub_186C29240();
    uint64_t v14 = v13;
    sub_186C5242C((uint64_t)v23);
    if (v14)
    {
      *unint64_t v11 = 0xD000000000000014LL;
      v11[1] = 0x8000000186C68960LL;
      _OWORD v11[2] = v12;
      v11[3] = v14;
      swift_storeEnumTagMultiPayload();
      swift_willThrow();
      goto LABEL_5;
    }

    __break(1u);
  }

  else
  {
    unint64_t v15 = v7;
    swift_beginAccess();
    uint64_t v16 = *(int *)(v5 + 32);
    unint64_t v17 = *(char **)(v6 + v16);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(void *)(v6 + v16) = v17;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      unint64_t v17 = sub_186C4D338(0LL, *((void *)v17 + 2) + 1LL, 1, v17);
      *(void *)(v6 + v16) = v17;
    }

    unint64_t v20 = *((void *)v17 + 2);
    unint64_t v19 = *((void *)v17 + 3);
    if (v20 >= v19 >> 1)
    {
      unint64_t v17 = sub_186C4D338((char *)(v19 > 1), v20 + 1, 1, v17);
      *(void *)(v6 + v16) = v17;
    }

    *((void *)v17 + 2) = v20 + 1;
    uint64_t v21 = &v17[24 * v20];
    *((void *)v21 + 4) = v15;
    *((void *)v21 + 5) = 0LL;
    v21[48] = 1;
  }

uint64_t sub_186C4EB00(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for RecordingOptions.Options(0LL);
  uint64_t v5 = swift_projectBox();
  swift_beginAccess();
  uint64_t v6 = *(int *)(v4 + 28);
  uint64_t v7 = *(void *)(v5 + v6);
  swift_bridgeObjectRetain();
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  *(void *)(v5 + v6) = v7;
  if ((result & 1) == 0)
  {
    uint64_t result = (uint64_t)sub_186C4D338(0LL, *(void *)(v7 + 16) + 1LL, 1, (char *)v7);
    uint64_t v7 = result;
    *(void *)(v5 + v6) = result;
  }

  unint64_t v10 = *(void *)(v7 + 16);
  unint64_t v9 = *(void *)(v7 + 24);
  if (v10 >= v9 >> 1)
  {
    uint64_t result = (uint64_t)sub_186C4D338((char *)(v9 > 1), v10 + 1, 1, (char *)v7);
    uint64_t v7 = result;
    *(void *)(v5 + v6) = result;
  }

  *(void *)(v7 + 16) = v10 + 1;
  unint64_t v11 = v7 + 24 * v10;
  *(void *)(v11 + 32) = a1;
  *(void *)(v11 + 40) = a2;
  *(_BYTE *)(v11 + 48) = 2;
  *(_BYTE *)(v5 + *(int *)(v4 + 56)) = 1;
  return result;
}

unint64_t sub_186C4EC18(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for RecordingOptions.Options(0LL);
  uint64_t v5 = swift_projectBox();
  unint64_t v6 = sub_186BFB8D0();
  unint64_t result = sub_186C29F6C(MEMORY[0x189617FA8], v6);
  if ((v8 & 1) != 0)
  {
    type metadata accessor for KTraceRecordError();
    sub_186BFCB04( (unint64_t *)&qword_18C6A21E0,  (uint64_t (*)(uint64_t))type metadata accessor for KTraceRecordError,  (uint64_t)&unk_186C60EF4);
    swift_allocError();
    *unint64_t v11 = 0xD000000000000015LL;
    v11[1] = 0x8000000186C68940LL;
    _OWORD v11[2] = a1;
    v11[3] = a2;
    swift_storeEnumTagMultiPayload();
    swift_bridgeObjectRetain();
    return swift_willThrow();
  }

  else
  {
    int v9 = result;
    if (HIDWORD(result))
    {
      __break(1u);
    }

    else
    {
      unint64_t result = swift_beginAccess();
      uint64_t v10 = v5 + *(int *)(v4 + 40);
      *(_DWORD *)uint64_t v10 = v9;
      *(_BYTE *)(v10 + 4) = 0;
    }
  }

  return result;
}

void sub_186C4ED48(uint64_t a1, unint64_t a2)
{
  int v3 = v2;
  uint64_t v6 = type metadata accessor for RecordingOptions.Options(0LL);
  uint64_t v7 = swift_projectBox();
  unint64_t v8 = sub_186C29930(a1, a2);
  if (v2)
  {
    id v19 = v2;
    id v9 = v2;
    __swift_instantiateConcreteTypeFromMangledName(&qword_18C6A2280);
    if ((swift_dynamicCast() & 1) == 0)
    {
LABEL_5:

      return;
    }

    sub_186BF0D98(&v17, (uint64_t)v18);
    type metadata accessor for KTraceRecordError();
    sub_186BFCB04( (unint64_t *)&qword_18C6A21E0,  (uint64_t (*)(uint64_t))type metadata accessor for KTraceRecordError,  (uint64_t)&unk_186C60EF4);
    int v3 = (void *)swift_allocError();
    unint64_t v11 = v10;
    uint64_t v12 = sub_186C29240();
    uint64_t v14 = v13;
    sub_186C5242C((uint64_t)v18);
    if (v14)
    {
      *unint64_t v11 = 0xD00000000000001ELL;
      v11[1] = 0x8000000186C68920LL;
      _OWORD v11[2] = v12;
      v11[3] = v14;
      swift_storeEnumTagMultiPayload();
      swift_willThrow();
      goto LABEL_5;
    }
  }

  else
  {
    if (v8 >> 54)
    {
      __break(1u);
    }

    else if ((v8 & 0x3FF00000000000LL) == 0)
    {
      uint64_t v15 = (v8 & 0xFFFFFFFFFFFLL) << 14;
      swift_beginAccess();
      uint64_t v16 = v7 + *(int *)(v6 + 44);
      *(void *)uint64_t v16 = v15;
      *(_BYTE *)(v16 + 8) = 0;
      return;
    }

    __break(1u);
  }

  __break(1u);
}

uint64_t sub_186C4EEF8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for RecordingOptions.Options(0LL);
  uint64_t v5 = swift_projectBox();
  swift_beginAccess();
  uint64_t v6 = *(int *)(v4 + 24);
  uint64_t v7 = *(void *)(v5 + v6);
  swift_bridgeObjectRetain();
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  *(void *)(v5 + v6) = v7;
  if ((result & 1) == 0)
  {
    uint64_t result = (uint64_t)sub_186C4D44C(0LL, *(void *)(v7 + 16) + 1LL, 1, (char *)v7);
    uint64_t v7 = result;
    *(void *)(v5 + v6) = result;
  }

  unint64_t v10 = *(void *)(v7 + 16);
  unint64_t v9 = *(void *)(v7 + 24);
  if (v10 >= v9 >> 1)
  {
    uint64_t result = (uint64_t)sub_186C4D44C((char *)(v9 > 1), v10 + 1, 1, (char *)v7);
    uint64_t v7 = result;
    *(void *)(v5 + v6) = result;
  }

  *(void *)(v7 + 16) = v10 + 1;
  unint64_t v11 = v7 + 16 * v10;
  *(void *)(v11 + 32) = a1;
  *(void *)(v11 + 40) = a2;
  return result;
}

uint64_t sub_186C4EFF0()
{
  uint64_t v0 = (void *)swift_projectBox();
  uint64_t result = swift_beginAccess();
  if ((*v0 & 1) == 0) {
    *v0 |= 1uLL;
  }
  return result;
}

void sub_186C4F04C(uint64_t a1, unint64_t a2)
{
  int v3 = v2;
  uint64_t v6 = type metadata accessor for RecordingOptions.Options(0LL);
  uint64_t v7 = swift_projectBox();
  char v8 = sub_186BFDFF4();
  unint64_t v9 = sub_186C293DC(a1, a2, v8 & 1);
  if (!v2)
  {
    unint64_t v10 = v9;
    if (v9 >> 4 > 0xC34)
    {
      swift_beginAccess();
      uint64_t v19 = v7 + *(int *)(v6 + 60);
      *(void *)uint64_t v19 = v10 / 0x3E8;
      *(_BYTE *)(v19 + 8) = 0;
      return;
    }

    type metadata accessor for KTraceRecordError();
    sub_186BFCB04( (unint64_t *)&qword_18C6A21E0,  (uint64_t (*)(uint64_t))type metadata accessor for KTraceRecordError,  (uint64_t)&unk_186C60EF4);
    int v3 = (void *)swift_allocError();
    *unint64_t v11 = v10;
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
  }

  id v21 = v3;
  id v12 = v3;
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C6A2280);
  if (!swift_dynamicCast())
  {
LABEL_7:

    return;
  }

  sub_186BF0D98(&v20, (uint64_t)v22);
  type metadata accessor for KTraceRecordError();
  sub_186BFCB04( (unint64_t *)&qword_18C6A21E0,  (uint64_t (*)(uint64_t))type metadata accessor for KTraceRecordError,  (uint64_t)&unk_186C60EF4);
  uint64_t v13 = (void *)swift_allocError();
  uint64_t v15 = v14;
  uint64_t v16 = sub_186C29240();
  uint64_t v18 = v17;
  sub_186C5242C((uint64_t)v22);
  if (v18)
  {
    *uint64_t v15 = 0xD000000000000014LL;
    v15[1] = 0x8000000186C68900LL;
    void v15[2] = v16;
    v15[3] = v18;
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
    goto LABEL_7;
  }

  __break(1u);
}

uint64_t sub_186C4F270()
{
  uint64_t v0 = type metadata accessor for RecordingOptions.Options(0LL);
  uint64_t v1 = swift_projectBox();
  uint64_t result = swift_beginAccess();
  *(_BYTE *)(v1 + *(int *)(v0 + 64)) = 1;
  return result;
}

uint64_t sub_186C4F2D4()
{
  uint64_t v0 = type metadata accessor for RecordingOptions.Options(0LL);
  uint64_t v1 = swift_projectBox();
  uint64_t result = swift_beginAccess();
  *(_BYTE *)(v1 + *(int *)(v0 + 6sub_186C418C4(*(void *)v0, *(_BYTE *)(v0 + 8)) = 1;
  return result;
}

void sub_186C4F338(uint64_t a1, unint64_t a2)
{
  uint64_t v5 = type metadata accessor for RecordingOptions.Options(0LL);
  uint64_t v6 = swift_projectBox();
  char v7 = sub_186BFDFF4();
  unint64_t v8 = sub_186C293DC(a1, a2, v7 & 1);
  if (v2)
  {
    id v20 = v2;
    id v9 = v2;
    __swift_instantiateConcreteTypeFromMangledName(&qword_18C6A2280);
    if ((swift_dynamicCast() & 1) == 0)
    {
LABEL_5:

      return;
    }

    sub_186BF0D98(&v18, (uint64_t)v19);
    type metadata accessor for KTraceRecordError();
    sub_186BFCB04( (unint64_t *)&qword_18C6A21E0,  (uint64_t (*)(uint64_t))type metadata accessor for KTraceRecordError,  (uint64_t)&unk_186C60EF4);
    unint64_t v10 = (void *)swift_allocError();
    id v12 = v11;
    uint64_t v13 = sub_186C29240();
    uint64_t v15 = v14;
    sub_186C5242C((uint64_t)v19);
    if (v15)
    {
      *id v12 = 0xD000000000000013LL;
      v12[1] = 0x8000000186C688E0LL;
      void v12[2] = v13;
      v12[3] = v15;
      swift_storeEnumTagMultiPayload();
      swift_willThrow();
      goto LABEL_5;
    }

    __break(1u);
  }

  else
  {
    unint64_t v16 = v8;
    swift_beginAccess();
    uint64_t v17 = v6 + *(int *)(v5 + 120);
    *(void *)uint64_t v17 = v16;
    *(_BYTE *)(v17 + 8) = 0;
  }

uint64_t sub_186C4F4D8()
{
  uint64_t v0 = type metadata accessor for RecordingOptions.Options(0LL);
  uint64_t v1 = swift_projectBox();
  uint64_t result = swift_beginAccess();
  *(_BYTE *)(v1 + *(int *)(v0 + 112)) = 1;
  return result;
}

uint64_t sub_186C4F53C()
{
  uint64_t v0 = type metadata accessor for RecordingOptions.Options(0LL);
  uint64_t v1 = swift_projectBox();
  uint64_t result = swift_beginAccess();
  *(_BYTE *)(v1 + *(int *)(v0 + 10sub_186C418C4(*(void *)v0, *(_BYTE *)(v0 + 8)) = 1;
  return result;
}

void sub_186C4F5A0(uint64_t a1, unint64_t a2)
{
  int v3 = v2;
  uint64_t v6 = type metadata accessor for RecordingOptions.Options(0LL);
  uint64_t v7 = swift_projectBox();
  unint64_t v8 = sub_186C29930(a1, a2);
  if (v2)
  {
    id v19 = v2;
    id v9 = v2;
    __swift_instantiateConcreteTypeFromMangledName(&qword_18C6A2280);
    if ((swift_dynamicCast() & 1) == 0)
    {
LABEL_5:

      return;
    }

    sub_186BF0D98(&v17, (uint64_t)v18);
    type metadata accessor for KTraceRecordError();
    sub_186BFCB04( (unint64_t *)&qword_18C6A21E0,  (uint64_t (*)(uint64_t))type metadata accessor for KTraceRecordError,  (uint64_t)&unk_186C60EF4);
    int v3 = (void *)swift_allocError();
    unint64_t v11 = v10;
    uint64_t v12 = sub_186C29240();
    uint64_t v14 = v13;
    sub_186C5242C((uint64_t)v18);
    if (v14)
    {
      *unint64_t v11 = 0xD000000000000014LL;
      v11[1] = 0x8000000186C688C0LL;
      _OWORD v11[2] = v12;
      v11[3] = v14;
      swift_storeEnumTagMultiPayload();
      swift_willThrow();
      goto LABEL_5;
    }
  }

  else
  {
    unint64_t v15 = v8;
    if ((v8 & 0x8000000000000000LL) == 0)
    {
      swift_beginAccess();
      uint64_t v16 = v7 + *(int *)(v6 + 84);
      *(void *)uint64_t v16 = v15;
      *(_BYTE *)(v16 + 8) = 0;
      return;
    }

    __break(1u);
  }

  __break(1u);
}

uint64_t sub_186C4F740(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for RecordingOptions.Options(0LL);
  uint64_t v5 = swift_projectBox();
  swift_beginAccess();
  uint64_t v6 = (void *)(v5 + *(int *)(v4 + 76));
  *uint64_t v6 = a1;
  v6[1] = a2;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRelease();
}

uint64_t sub_186C4F7C8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for RecordingOptions.Options(0LL);
  uint64_t v5 = swift_projectBox();
  swift_beginAccess();
  uint64_t v6 = (void *)(v5 + *(int *)(v4 + 80));
  *uint64_t v6 = a1;
  v6[1] = a2;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRelease();
}

uint64_t sub_186C4F850()
{
  uint64_t v0 = type metadata accessor for RecordingOptions.Options(0LL);
  uint64_t v1 = swift_projectBox();
  uint64_t result = swift_beginAccess();
  *(_BYTE *)(v1 + *(int *)(v0 + 8sub_186C418C4(*(void *)v0, *(_BYTE *)(v0 + 8)) = 1;
  return result;
}

uint64_t sub_186C4F8B4(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = type metadata accessor for RecordingOptions.Options(0LL);
  uint64_t result = swift_projectBox();
  uint64_t v6 = HIBYTE(a2) & 0xF;
  uint64_t v7 = a1 & 0xFFFFFFFFFFFFLL;
  if ((a2 & 0x2000000000000000LL) != 0) {
    uint64_t v8 = HIBYTE(a2) & 0xF;
  }
  else {
    uint64_t v8 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (!v8) {
    goto LABEL_56;
  }
  uint64_t v9 = result;
  if ((a2 & 0x1000000000000000LL) != 0)
  {
    swift_bridgeObjectRetain();
    uint64_t v12 = sub_186C4D54C(a1, a2, 10LL);
    swift_bridgeObjectRelease();
    if ((v12 & 0x100000000LL) == 0) {
      goto LABEL_36;
    }
    goto LABEL_56;
  }

  if ((a2 & 0x2000000000000000LL) == 0)
  {
    if ((a1 & 0x1000000000000000LL) != 0) {
      unint64_t v10 = (unsigned __int8 *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
    }
    else {
      unint64_t v10 = (unsigned __int8 *)sub_186C5B2B4();
    }
    unint64_t v11 = sub_186C4D630(v10, v7, 10LL);
    char v30 = BYTE4(v11) & 1;
    if ((BYTE4(v11) & 1) == 0)
    {
      LODWORD(v12) = (_DWORD)v11;
LABEL_36:
      if ((v12 - 64) >= 0xFFFFFFC4)
      {
        uint64_t result = swift_beginAccess();
        uint64_t v19 = v9 + *(int *)(v4 + 92);
        *(_DWORD *)uint64_t v19 = v12;
        *(_BYTE *)(v19 + 4) = 0;
        return result;
      }

      type metadata accessor for KTraceRecordError();
      sub_186BFCB04( (unint64_t *)&qword_18C6A21E0,  (uint64_t (*)(uint64_t))type metadata accessor for KTraceRecordError,  (uint64_t)&unk_186C60EF4);
      swift_allocError();
      *(_DWORD *)uint64_t v18 = v12;
      *(void *)(v18 + 4) = 0x3F00000004LL;
      swift_storeEnumTagMultiPayload();
      return swift_willThrow();
    }

uint64_t sub_186C4FCA4()
{
  uint64_t v0 = type metadata accessor for RecordingOptions.Options(0LL);
  uint64_t v1 = swift_projectBox();
  uint64_t result = swift_beginAccess();
  *(_BYTE *)(v1 + *(int *)(v0 + 72)) = 0;
  return result;
}

unint64_t sub_186C4FD08()
{
  unint64_t result = qword_18C6A2F90;
  if (!qword_18C6A2F90)
  {
    unint64_t result = MEMORY[0x186E46630](&unk_186C61F20, &type metadata for RecordingOptions.Options.Requests);
    atomic_store(result, (unint64_t *)&qword_18C6A2F90);
  }

  return result;
}

unint64_t sub_186C4FD50()
{
  unint64_t result = qword_18C6A2F98;
  if (!qword_18C6A2F98)
  {
    unint64_t result = MEMORY[0x186E46630](&unk_186C61E58, &type metadata for RecordingOptions.Options.Requests);
    atomic_store(result, (unint64_t *)&qword_18C6A2F98);
  }

  return result;
}

unint64_t sub_186C4FD98()
{
  unint64_t result = qword_18C6A2FA0;
  if (!qword_18C6A2FA0)
  {
    unint64_t result = MEMORY[0x186E46630](&unk_186C61F58, &type metadata for RecordingOptions.Options.Requests);
    atomic_store(result, (unint64_t *)&qword_18C6A2FA0);
  }

  return result;
}

unint64_t sub_186C4FDE0()
{
  unint64_t result = qword_18C6A2FA8;
  if (!qword_18C6A2FA8)
  {
    unint64_t result = MEMORY[0x186E46630](&unk_186C61F80, &type metadata for RecordingOptions.Options.Requests);
    atomic_store(result, (unint64_t *)&qword_18C6A2FA8);
  }

  return result;
}

uint64_t *sub_186C4FE24(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  uint64_t v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v16 = v4 + ((v3 + 16LL) & ~(unint64_t)v3);
    swift_retain();
  }

  else
  {
    uint64_t v5 = *(int *)(a3 + 20);
    uint64_t v6 = (char *)a1 + v5;
    uint64_t v7 = (char *)a2 + v5;
    *(uint64_t *)((char *)a1 + v5) = *(uint64_t *)((char *)a2 + v5);
    uint64_t v8 = (int *)type metadata accessor for RecordingOptions.Options(0LL);
    uint64_t v9 = v8[5];
    unint64_t v10 = &v6[v9];
    unint64_t v11 = &v7[v9];
    uint64_t v12 = sub_186C5AA8C();
    uint64_t v13 = *(void *)(v12 - 8);
    uint64_t v14 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48);
    swift_bridgeObjectRetain();
    if (v14(v11, 1LL, v12))
    {
      uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C6A21F8);
      memcpy(v10, v11, *(void *)(*(void *)(v15 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v10, v11, v12);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v10, 0LL, 1LL, v12);
    }

    *(void *)&v6[v8[6]] = *(void *)&v7[v8[6]];
    *(void *)&v6[v8[7]] = *(void *)&v7[v8[7]];
    *(void *)&v6[v8[8]] = *(void *)&v7[v8[8]];
    uint64_t v17 = v8[9];
    uint64_t v18 = &v6[v17];
    uint64_t v19 = &v7[v17];
    *(void *)uint64_t v18 = *(void *)v19;
    _BYTE v18[8] = v19[8];
    uint64_t v20 = v8[10];
    id v21 = &v6[v20];
    unsigned int v22 = &v7[v20];
    *(_DWORD *)id v21 = *(_DWORD *)v22;
    v21[4] = v22[4];
    uint64_t v23 = v8[11];
    uint64_t v24 = &v6[v23];
    uint64_t v25 = &v7[v23];
    *(void *)uint64_t v24 = *(void *)v25;
    v24[8] = v25[8];
    *(void *)&v6[v8[12]] = *(void *)&v7[v8[12]];
    *(void *)&v6[v8[13]] = *(void *)&v7[v8[13]];
    v6[v8[14]] = v7[v8[14]];
    uint64_t v26 = v8[15];
    uint64_t v27 = &v6[v26];
    uint64_t v28 = &v7[v26];
    *(void *)uint64_t v27 = *(void *)v28;
    v27[8] = v28[8];
    v6[v8[16]] = v7[v8[16]];
    v6[v8[17]] = v7[v8[17]];
    v6[v8[18]] = v7[v8[18]];
    uint64_t v29 = v8[19];
    char v30 = &v6[v29];
    uint64_t v31 = &v7[v29];
    uint64_t v32 = *((void *)v31 + 1);
    *(void *)char v30 = *(void *)v31;
    *((void *)v30 + 1) = v32;
    uint64_t v33 = v8[20];
    uint64_t v34 = &v6[v33];
    uint64_t v35 = &v7[v33];
    uint64_t v36 = *((void *)v35 + 1);
    *(void *)uint64_t v34 = *(void *)v35;
    *((void *)v34 + 1) = v36;
    uint64_t v37 = v8[21];
    unint64_t v38 = &v6[v37];
    uint64_t v39 = &v7[v37];
    *(void *)unint64_t v38 = *(void *)v39;
    v38[8] = v39[8];
    v6[v8[22]] = v7[v8[22]];
    uint64_t v40 = v8[23];
    int v41 = &v6[v40];
    int v42 = &v7[v40];
    *(_DWORD *)int v41 = *(_DWORD *)v42;
    v41[4] = v42[4];
    *(void *)&v6[v8[24]] = *(void *)&v7[v8[24]];
    *(void *)&v6[v8[25]] = *(void *)&v7[v8[25]];
    *(void *)&v6[v8[26]] = *(void *)&v7[v8[26]];
    v6[v8[27]] = v7[v8[27]];
    v6[v8[28]] = v7[v8[28]];
    *(void *)&v6[v8[29]] = *(void *)&v7[v8[29]];
    uint64_t v43 = v8[30];
    unint64_t v44 = &v6[v43];
    unint64_t v45 = &v7[v43];
    *(void *)unint64_t v44 = *(void *)v45;
    v44[8] = v45[8];
    uint64_t v46 = v8[31];
    int64_t v47 = &v6[v46];
    uint64_t v48 = &v7[v46];
    uint64_t v49 = *((void *)v48 + 1);
    *(void *)int64_t v47 = *(void *)v48;
    *((void *)v47 + 1) = v49;
    uint64_t v50 = v8[32];
    char v51 = &v6[v50];
    uint64_t v52 = &v7[v50];
    uint64_t v53 = *((void *)v52 + 1);
    *(void *)char v51 = *(void *)v52;
    *((void *)v51 + 1) = v53;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return a1;
  }

  return (uint64_t *)v16;
}

uint64_t sub_186C50194(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = v4 + *(int *)(type metadata accessor for RecordingOptions.Options(0LL) + 20);
  uint64_t v6 = sub_186C5AA8C();
  uint64_t v7 = *(void *)(v6 - 8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void *sub_186C502C8(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v3 = *(int *)(a3 + 20);
  uint64_t v4 = (char *)a1 + v3;
  uint64_t v5 = (char *)a2 + v3;
  *(void *)((char *)a1 + v3) = *(void *)((char *)a2 + v3);
  uint64_t v6 = (int *)type metadata accessor for RecordingOptions.Options(0LL);
  uint64_t v7 = v6[5];
  uint64_t v8 = &v4[v7];
  uint64_t v9 = &v5[v7];
  uint64_t v10 = sub_186C5AA8C();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48);
  swift_bridgeObjectRetain();
  if (v12(v9, 1LL, v10))
  {
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C6A21F8);
    memcpy(v8, v9, *(void *)(*(void *)(v13 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v8, v9, v10);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0LL, 1LL, v10);
  }

  *(void *)&v4[v6[6]] = *(void *)&v5[v6[6]];
  *(void *)&v4[v6[7]] = *(void *)&v5[v6[7]];
  *(void *)&v4[v6[8]] = *(void *)&v5[v6[8]];
  uint64_t v14 = v6[9];
  uint64_t v15 = &v4[v14];
  uint64_t v16 = &v5[v14];
  *(void *)uint64_t v15 = *(void *)v16;
  v15[8] = v16[8];
  uint64_t v17 = v6[10];
  uint64_t v18 = &v4[v17];
  uint64_t v19 = &v5[v17];
  *(_DWORD *)uint64_t v18 = *(_DWORD *)v19;
  v18[4] = v19[4];
  uint64_t v20 = v6[11];
  id v21 = &v4[v20];
  unsigned int v22 = &v5[v20];
  *(void *)id v21 = *(void *)v22;
  v21[8] = v22[8];
  *(void *)&v4[v6[12]] = *(void *)&v5[v6[12]];
  *(void *)&v4[v6[13]] = *(void *)&v5[v6[13]];
  v4[v6[14]] = v5[v6[14]];
  uint64_t v23 = v6[15];
  uint64_t v24 = &v4[v23];
  uint64_t v25 = &v5[v23];
  *(void *)uint64_t v24 = *(void *)v25;
  v24[8] = v25[8];
  v4[v6[16]] = v5[v6[16]];
  v4[v6[17]] = v5[v6[17]];
  v4[v6[18]] = v5[v6[18]];
  uint64_t v26 = v6[19];
  uint64_t v27 = &v4[v26];
  uint64_t v28 = &v5[v26];
  uint64_t v29 = *((void *)v28 + 1);
  *(void *)uint64_t v27 = *(void *)v28;
  *((void *)v27 + 1) = v29;
  uint64_t v30 = v6[20];
  uint64_t v31 = &v4[v30];
  uint64_t v32 = &v5[v30];
  uint64_t v33 = *((void *)v32 + 1);
  *(void *)uint64_t v31 = *(void *)v32;
  *((void *)v31 + 1) = v33;
  uint64_t v34 = v6[21];
  uint64_t v35 = &v4[v34];
  uint64_t v36 = &v5[v34];
  *(void *)uint64_t v35 = *(void *)v36;
  v35[8] = v36[8];
  v4[v6[22]] = v5[v6[22]];
  uint64_t v37 = v6[23];
  unint64_t v38 = &v4[v37];
  uint64_t v39 = &v5[v37];
  *(_DWORD *)unint64_t v38 = *(_DWORD *)v39;
  v38[4] = v39[4];
  *(void *)&v4[v6[24]] = *(void *)&v5[v6[24]];
  *(void *)&v4[v6[25]] = *(void *)&v5[v6[25]];
  *(void *)&v4[v6[26]] = *(void *)&v5[v6[26]];
  v4[v6[27]] = v5[v6[27]];
  v4[v6[28]] = v5[v6[28]];
  *(void *)&v4[v6[29]] = *(void *)&v5[v6[29]];
  uint64_t v40 = v6[30];
  int v41 = &v4[v40];
  int v42 = &v5[v40];
  *(void *)int v41 = *(void *)v42;
  v41[8] = v42[8];
  uint64_t v43 = v6[31];
  unint64_t v44 = &v4[v43];
  unint64_t v45 = &v5[v43];
  uint64_t v46 = *((void *)v45 + 1);
  *(void *)unint64_t v44 = *(void *)v45;
  *((void *)v44 + 1) = v46;
  uint64_t v47 = v6[32];
  uint64_t v48 = &v4[v47];
  uint64_t v49 = &v5[v47];
  uint64_t v50 = *((void *)v49 + 1);
  *(void *)uint64_t v48 = *(void *)v49;
  *((void *)v48 + 1) = v50;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *sub_186C5060C(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  *(void *)((char *)a1 + v6) = *(void *)((char *)a2 + v6);
  uint64_t v9 = (int *)type metadata accessor for RecordingOptions.Options(0LL);
  uint64_t v10 = v9[5];
  uint64_t v11 = &v7[v10];
  uint64_t v12 = &v8[v10];
  uint64_t v13 = sub_186C5AA8C();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48);
  int v16 = v15(v11, 1LL, v13);
  int v17 = v15(v12, 1LL, v13);
  if (!v16)
  {
    if (!v17)
    {
      (*(void (**)(char *, char *, uint64_t))(v14 + 24))(v11, v12, v13);
      goto LABEL_7;
    }

    (*(void (**)(char *, uint64_t))(v14 + 8))(v11, v13);
    goto LABEL_6;
  }

  if (v17)
  {
LABEL_6:
    uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C6A21F8);
    memcpy(v11, v12, *(void *)(*(void *)(v18 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v11, v12, v13);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v11, 0LL, 1LL, v13);
LABEL_7:
  *(void *)&v7[v9[6]] = *(void *)&v8[v9[6]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)&v7[v9[7]] = *(void *)&v8[v9[7]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)&v7[v9[8]] = *(void *)&v8[v9[8]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v19 = v9[9];
  uint64_t v20 = &v7[v19];
  id v21 = &v8[v19];
  uint64_t v22 = *(void *)v21;
  v20[8] = v21[8];
  *(void *)uint64_t v20 = v22;
  uint64_t v23 = v9[10];
  uint64_t v24 = &v7[v23];
  uint64_t v25 = &v8[v23];
  LODWORD(v22) = *(_DWORD *)v25;
  v24[4] = v25[4];
  *(_DWORD *)uint64_t v24 = v22;
  uint64_t v26 = v9[11];
  uint64_t v27 = &v7[v26];
  uint64_t v28 = &v8[v26];
  uint64_t v29 = *(void *)v28;
  v27[8] = v28[8];
  *(void *)uint64_t v27 = v29;
  *(void *)&v7[v9[12]] = *(void *)&v8[v9[12]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)&v7[v9[13]] = *(void *)&v8[v9[13]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v7[v9[14]] = v8[v9[14]];
  uint64_t v30 = v9[15];
  uint64_t v31 = &v7[v30];
  uint64_t v32 = &v8[v30];
  char v33 = v32[8];
  *(void *)uint64_t v31 = *(void *)v32;
  v31[8] = v33;
  v7[v9[16]] = v8[v9[16]];
  v7[v9[17]] = v8[v9[17]];
  v7[v9[18]] = v8[v9[18]];
  uint64_t v34 = v9[19];
  uint64_t v35 = &v7[v34];
  uint64_t v36 = &v8[v34];
  *(void *)uint64_t v35 = *(void *)v36;
  *((void *)v35 + 1) = *((void *)v36 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v37 = v9[20];
  unint64_t v38 = &v7[v37];
  uint64_t v39 = &v8[v37];
  *(void *)unint64_t v38 = *(void *)v39;
  *((void *)v38 + 1) = *((void *)v39 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v40 = v9[21];
  int v41 = &v7[v40];
  int v42 = &v8[v40];
  uint64_t v43 = *(void *)v42;
  v41[8] = v42[8];
  *(void *)int v41 = v43;
  v7[v9[22]] = v8[v9[22]];
  uint64_t v44 = v9[23];
  unint64_t v45 = &v7[v44];
  uint64_t v46 = &v8[v44];
  LODWORD(v43) = *(_DWORD *)v46;
  v45[4] = v46[4];
  *(_DWORD *)unint64_t v45 = v43;
  *(void *)&v7[v9[24]] = *(void *)&v8[v9[24]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)&v7[v9[25]] = *(void *)&v8[v9[25]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)&v7[v9[26]] = *(void *)&v8[v9[26]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v7[v9[27]] = v8[v9[27]];
  v7[v9[28]] = v8[v9[28]];
  *(void *)&v7[v9[29]] = *(void *)&v8[v9[29]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v47 = v9[30];
  uint64_t v48 = &v7[v47];
  uint64_t v49 = &v8[v47];
  uint64_t v50 = *(void *)v49;
  v48[8] = v49[8];
  *(void *)uint64_t v48 = v50;
  uint64_t v51 = v9[31];
  uint64_t v52 = &v7[v51];
  uint64_t v53 = &v8[v51];
  *(void *)uint64_t v52 = *(void *)v53;
  *((void *)v52 + 1) = *((void *)v53 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v54 = v9[32];
  char v55 = &v7[v54];
  char v56 = &v8[v54];
  *(void *)char v55 = *(void *)v56;
  *((void *)v55 + 1) = *((void *)v56 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *sub_186C50A18(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  *(void *)((char *)a1 + v4) = *(void *)((char *)a2 + v4);
  uint64_t v7 = (int *)type metadata accessor for RecordingOptions.Options(0LL);
  uint64_t v8 = v7[5];
  uint64_t v9 = &v5[v8];
  uint64_t v10 = &v6[v8];
  uint64_t v11 = sub_186C5AA8C();
  uint64_t v12 = *(void *)(v11 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1LL, v11))
  {
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C6A21F8);
    memcpy(v9, v10, *(void *)(*(void *)(v13 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v9, v10, v11);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0LL, 1LL, v11);
  }

  *(void *)&v5[v7[6]] = *(void *)&v6[v7[6]];
  *(void *)&v5[v7[7]] = *(void *)&v6[v7[7]];
  *(void *)&v5[v7[8]] = *(void *)&v6[v7[8]];
  uint64_t v14 = v7[9];
  uint64_t v15 = &v5[v14];
  int v16 = &v6[v14];
  *(void *)uint64_t v15 = *(void *)v16;
  v15[8] = v16[8];
  uint64_t v17 = v7[10];
  uint64_t v18 = &v5[v17];
  uint64_t v19 = &v6[v17];
  *(_DWORD *)uint64_t v18 = *(_DWORD *)v19;
  v18[4] = v19[4];
  uint64_t v20 = v7[11];
  id v21 = &v5[v20];
  uint64_t v22 = &v6[v20];
  *(void *)id v21 = *(void *)v22;
  v21[8] = v22[8];
  *(void *)&v5[v7[12]] = *(void *)&v6[v7[12]];
  *(void *)&v5[v7[13]] = *(void *)&v6[v7[13]];
  v5[v7[14]] = v6[v7[14]];
  uint64_t v23 = v7[15];
  uint64_t v24 = &v5[v23];
  uint64_t v25 = &v6[v23];
  *(void *)uint64_t v24 = *(void *)v25;
  v24[8] = v25[8];
  v5[v7[16]] = v6[v7[16]];
  v5[v7[17]] = v6[v7[17]];
  v5[v7[18]] = v6[v7[18]];
  *(_OWORD *)&v5[v7[19]] = *(_OWORD *)&v6[v7[19]];
  *(_OWORD *)&v5[v7[20]] = *(_OWORD *)&v6[v7[20]];
  uint64_t v26 = v7[21];
  uint64_t v27 = &v5[v26];
  uint64_t v28 = &v6[v26];
  *(void *)uint64_t v27 = *(void *)v28;
  v27[8] = v28[8];
  v5[v7[22]] = v6[v7[22]];
  uint64_t v29 = v7[23];
  uint64_t v30 = &v5[v29];
  uint64_t v31 = &v6[v29];
  *(_DWORD *)uint64_t v30 = *(_DWORD *)v31;
  v30[4] = v31[4];
  *(void *)&v5[v7[24]] = *(void *)&v6[v7[24]];
  *(void *)&v5[v7[25]] = *(void *)&v6[v7[25]];
  *(void *)&v5[v7[26]] = *(void *)&v6[v7[26]];
  v5[v7[27]] = v6[v7[27]];
  v5[v7[28]] = v6[v7[28]];
  *(void *)&v5[v7[29]] = *(void *)&v6[v7[29]];
  uint64_t v32 = v7[30];
  char v33 = &v5[v32];
  uint64_t v34 = &v6[v32];
  v33[8] = v34[8];
  *(void *)char v33 = *(void *)v34;
  *(_OWORD *)&v5[v7[31]] = *(_OWORD *)&v6[v7[31]];
  *(_OWORD *)&v5[v7[32]] = *(_OWORD *)&v6[v7[32]];
  return a1;
}

void *sub_186C50CB0(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  *(void *)((char *)a1 + v6) = *(void *)((char *)a2 + v6);
  uint64_t v9 = (int *)type metadata accessor for RecordingOptions.Options(0LL);
  uint64_t v10 = v9[5];
  uint64_t v11 = &v7[v10];
  uint64_t v12 = &v8[v10];
  uint64_t v13 = sub_186C5AA8C();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48);
  int v16 = v15(v11, 1LL, v13);
  int v17 = v15(v12, 1LL, v13);
  if (!v16)
  {
    if (!v17)
    {
      (*(void (**)(char *, char *, uint64_t))(v14 + 40))(v11, v12, v13);
      goto LABEL_7;
    }

    (*(void (**)(char *, uint64_t))(v14 + 8))(v11, v13);
    goto LABEL_6;
  }

  if (v17)
  {
LABEL_6:
    uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C6A21F8);
    memcpy(v11, v12, *(void *)(*(void *)(v18 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v11, v12, v13);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v11, 0LL, 1LL, v13);
LABEL_7:
  *(void *)&v7[v9[6]] = *(void *)&v8[v9[6]];
  swift_bridgeObjectRelease();
  *(void *)&v7[v9[7]] = *(void *)&v8[v9[7]];
  swift_bridgeObjectRelease();
  *(void *)&v7[v9[8]] = *(void *)&v8[v9[8]];
  swift_bridgeObjectRelease();
  uint64_t v19 = v9[9];
  uint64_t v20 = &v7[v19];
  id v21 = &v8[v19];
  *(void *)uint64_t v20 = *(void *)v21;
  v20[8] = v21[8];
  uint64_t v22 = v9[10];
  uint64_t v23 = &v7[v22];
  uint64_t v24 = &v8[v22];
  v23[4] = v24[4];
  *(_DWORD *)uint64_t v23 = *(_DWORD *)v24;
  uint64_t v25 = v9[11];
  uint64_t v26 = &v7[v25];
  uint64_t v27 = &v8[v25];
  *(void *)uint64_t v26 = *(void *)v27;
  v26[8] = v27[8];
  *(void *)&v7[v9[12]] = *(void *)&v8[v9[12]];
  swift_bridgeObjectRelease();
  *(void *)&v7[v9[13]] = *(void *)&v8[v9[13]];
  swift_bridgeObjectRelease();
  v7[v9[14]] = v8[v9[14]];
  uint64_t v28 = v9[15];
  uint64_t v29 = &v7[v28];
  uint64_t v30 = &v8[v28];
  *(void *)uint64_t v29 = *(void *)v30;
  v29[8] = v30[8];
  v7[v9[16]] = v8[v9[16]];
  v7[v9[17]] = v8[v9[17]];
  v7[v9[18]] = v8[v9[18]];
  uint64_t v31 = v9[19];
  uint64_t v32 = &v7[v31];
  char v33 = &v8[v31];
  uint64_t v35 = *(void *)v33;
  uint64_t v34 = *((void *)v33 + 1);
  *(void *)uint64_t v32 = v35;
  *((void *)v32 + 1) = v34;
  swift_bridgeObjectRelease();
  uint64_t v36 = v9[20];
  uint64_t v37 = &v7[v36];
  unint64_t v38 = &v8[v36];
  uint64_t v40 = *(void *)v38;
  uint64_t v39 = *((void *)v38 + 1);
  *(void *)uint64_t v37 = v40;
  *((void *)v37 + 1) = v39;
  swift_bridgeObjectRelease();
  uint64_t v41 = v9[21];
  int v42 = &v7[v41];
  uint64_t v43 = &v8[v41];
  *(void *)int v42 = *(void *)v43;
  v42[8] = v43[8];
  v7[v9[22]] = v8[v9[22]];
  uint64_t v44 = v9[23];
  unint64_t v45 = &v7[v44];
  uint64_t v46 = &v8[v44];
  *(_DWORD *)unint64_t v45 = *(_DWORD *)v46;
  v45[4] = v46[4];
  *(void *)&v7[v9[24]] = *(void *)&v8[v9[24]];
  swift_bridgeObjectRelease();
  *(void *)&v7[v9[25]] = *(void *)&v8[v9[25]];
  swift_bridgeObjectRelease();
  *(void *)&v7[v9[26]] = *(void *)&v8[v9[26]];
  swift_bridgeObjectRelease();
  v7[v9[27]] = v8[v9[27]];
  v7[v9[28]] = v8[v9[28]];
  *(void *)&v7[v9[29]] = *(void *)&v8[v9[29]];
  swift_bridgeObjectRelease();
  uint64_t v47 = v9[30];
  uint64_t v48 = &v7[v47];
  uint64_t v49 = &v8[v47];
  *(void *)uint64_t v48 = *(void *)v49;
  v48[8] = v49[8];
  uint64_t v50 = v9[31];
  uint64_t v51 = &v7[v50];
  uint64_t v52 = &v8[v50];
  uint64_t v54 = *(void *)v52;
  uint64_t v53 = *((void *)v52 + 1);
  *(void *)uint64_t v51 = v54;
  *((void *)v51 + 1) = v53;
  swift_bridgeObjectRelease();
  uint64_t v55 = v9[32];
  char v56 = &v7[v55];
  char v57 = &v8[v55];
  uint64_t v59 = *(void *)v57;
  uint64_t v58 = *((void *)v57 + 1);
  *(void *)char v56 = v59;
  *((void *)v56 + 1) = v58;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_186C5102C()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_186C51038(char *a1, uint64_t a2, uint64_t a3)
{
  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *(void *)a1;
    if (*(void *)a1 >= 0xFFFFFFFFuLL) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }

  else
  {
    uint64_t v8 = type metadata accessor for RecordingOptions.Options(0LL);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48LL))( &a1[*(int *)(a3 + 20)],  a2,  v8);
  }

uint64_t sub_186C510B4()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *sub_186C510C0(char *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)unint64_t result = (a2 - 1);
  }

  else
  {
    uint64_t v7 = type metadata accessor for RecordingOptions.Options(0LL);
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL))( &v5[*(int *)(a4 + 20)],  a2,  a2,  v7);
  }

  return result;
}

uint64_t sub_186C51134()
{
  uint64_t result = type metadata accessor for RecordingOptions.Options(319LL);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0LL;
  }

  return result;
}

void *sub_186C511AC(void *a1, void *a2, int *a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v13 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (void *)(v13 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain();
  }

  else
  {
    *a1 = *a2;
    uint64_t v7 = a3[5];
    uint64_t v8 = (char *)a1 + v7;
    uint64_t v9 = (char *)a2 + v7;
    uint64_t v10 = sub_186C5AA8C();
    uint64_t v11 = *(void *)(v10 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1LL, v10))
    {
      uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C6A21F8);
      memcpy(v8, v9, *(void *)(*(void *)(v12 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v8, v9, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0LL, 1LL, v10);
    }

    uint64_t v14 = a3[7];
    *(void *)((char *)v4 + a3[6]) = *(void *)((char *)a2 + a3[6]);
    *(void *)((char *)v4 + v14) = *(void *)((char *)a2 + v14);
    uint64_t v15 = a3[9];
    *(void *)((char *)v4 + a3[8]) = *(void *)((char *)a2 + a3[8]);
    int v16 = (char *)v4 + v15;
    int v17 = (char *)a2 + v15;
    *(void *)int v16 = *(void *)v17;
    _BYTE v16[8] = v17[8];
    uint64_t v18 = a3[10];
    uint64_t v19 = a3[11];
    uint64_t v20 = (char *)v4 + v18;
    id v21 = (char *)a2 + v18;
    *(_DWORD *)uint64_t v20 = *(_DWORD *)v21;
    v20[4] = v21[4];
    uint64_t v22 = (char *)v4 + v19;
    uint64_t v23 = (char *)a2 + v19;
    *(void *)uint64_t v22 = *(void *)v23;
    v22[8] = v23[8];
    uint64_t v24 = a3[13];
    *(void *)((char *)v4 + a3[12]) = *(void *)((char *)a2 + a3[12]);
    *(void *)((char *)v4 + v24) = *(void *)((char *)a2 + v24);
    uint64_t v25 = a3[15];
    *((_BYTE *)v4 + a3[14]) = *((_BYTE *)a2 + a3[14]);
    uint64_t v26 = (char *)v4 + v25;
    uint64_t v27 = (char *)a2 + v25;
    *(void *)uint64_t v26 = *(void *)v27;
    v26[8] = v27[8];
    uint64_t v28 = a3[17];
    *((_BYTE *)v4 + a3[16]) = *((_BYTE *)a2 + a3[16]);
    *((_BYTE *)v4 + v28) = *((_BYTE *)a2 + v28);
    uint64_t v29 = a3[19];
    *((_BYTE *)v4 + a3[18]) = *((_BYTE *)a2 + a3[18]);
    uint64_t v30 = (void *)((char *)v4 + v29);
    uint64_t v31 = (void *)((char *)a2 + v29);
    uint64_t v32 = v31[1];
    *uint64_t v30 = *v31;
    v30[1] = v32;
    uint64_t v33 = a3[20];
    uint64_t v34 = a3[21];
    uint64_t v35 = (void *)((char *)v4 + v33);
    uint64_t v36 = (void *)((char *)a2 + v33);
    uint64_t v37 = v36[1];
    *uint64_t v35 = *v36;
    v35[1] = v37;
    unint64_t v38 = (char *)v4 + v34;
    uint64_t v39 = (char *)a2 + v34;
    *(void *)unint64_t v38 = *(void *)v39;
    v38[8] = v39[8];
    uint64_t v40 = a3[23];
    *((_BYTE *)v4 + a3[22]) = *((_BYTE *)a2 + a3[22]);
    uint64_t v41 = (char *)v4 + v40;
    int v42 = (char *)a2 + v40;
    *(_DWORD *)uint64_t v41 = *(_DWORD *)v42;
    v41[4] = v42[4];
    uint64_t v43 = a3[25];
    *(void *)((char *)v4 + a3[24]) = *(void *)((char *)a2 + a3[24]);
    *(void *)((char *)v4 + v43) = *(void *)((char *)a2 + v43);
    uint64_t v44 = a3[27];
    *(void *)((char *)v4 + a3[26]) = *(void *)((char *)a2 + a3[26]);
    *((_BYTE *)v4 + v44) = *((_BYTE *)a2 + v44);
    uint64_t v45 = a3[29];
    *((_BYTE *)v4 + a3[28]) = *((_BYTE *)a2 + a3[28]);
    *(void *)((char *)v4 + v45) = *(void *)((char *)a2 + v45);
    uint64_t v46 = a3[30];
    uint64_t v47 = a3[31];
    uint64_t v48 = (char *)v4 + v46;
    uint64_t v49 = (char *)a2 + v46;
    *(void *)uint64_t v48 = *(void *)v49;
    v48[8] = v49[8];
    uint64_t v50 = (void *)((char *)v4 + v47);
    uint64_t v51 = (void *)((char *)a2 + v47);
    uint64_t v52 = v51[1];
    *uint64_t v50 = *v51;
    v50[1] = v52;
    uint64_t v53 = a3[32];
    uint64_t v54 = (void *)((char *)v4 + v53);
    uint64_t v55 = (void *)((char *)a2 + v53);
    uint64_t v56 = v55[1];
    *uint64_t v54 = *v55;
    v54[1] = v56;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }

  return v4;
}

uint64_t sub_186C514C4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1 + *(int *)(a2 + 20);
  uint64_t v3 = sub_186C5AA8C();
  uint64_t v4 = *(void *)(v3 - 8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void *sub_186C515DC(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = sub_186C5AA8C();
  uint64_t v10 = *(void *)(v9 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1LL, v9))
  {
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C6A21F8);
    memcpy(v7, v8, *(void *)(*(void *)(v11 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v7, v8, v9);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0LL, 1LL, v9);
  }

  uint64_t v12 = a3[7];
  *(void *)((char *)a1 + a3[6]) = *(void *)((char *)a2 + a3[6]);
  *(void *)((char *)a1 + v12) = *(void *)((char *)a2 + v12);
  uint64_t v13 = a3[9];
  *(void *)((char *)a1 + a3[8]) = *(void *)((char *)a2 + a3[8]);
  uint64_t v14 = (char *)a1 + v13;
  uint64_t v15 = (char *)a2 + v13;
  *(void *)uint64_t v14 = *(void *)v15;
  v14[8] = v15[8];
  uint64_t v16 = a3[10];
  uint64_t v17 = a3[11];
  uint64_t v18 = (char *)a1 + v16;
  uint64_t v19 = (char *)a2 + v16;
  *(_DWORD *)uint64_t v18 = *(_DWORD *)v19;
  v18[4] = v19[4];
  uint64_t v20 = (char *)a1 + v17;
  id v21 = (char *)a2 + v17;
  *(void *)uint64_t v20 = *(void *)v21;
  v20[8] = v21[8];
  uint64_t v22 = a3[13];
  *(void *)((char *)a1 + a3[12]) = *(void *)((char *)a2 + a3[12]);
  *(void *)((char *)a1 + v22) = *(void *)((char *)a2 + v22);
  uint64_t v23 = a3[15];
  *((_BYTE *)a1 + a3[14]) = *((_BYTE *)a2 + a3[14]);
  uint64_t v24 = (char *)a1 + v23;
  uint64_t v25 = (char *)a2 + v23;
  *(void *)uint64_t v24 = *(void *)v25;
  v24[8] = v25[8];
  uint64_t v26 = a3[17];
  *((_BYTE *)a1 + a3[16]) = *((_BYTE *)a2 + a3[16]);
  *((_BYTE *)a1 + v26) = *((_BYTE *)a2 + v26);
  uint64_t v27 = a3[19];
  *((_BYTE *)a1 + a3[18]) = *((_BYTE *)a2 + a3[18]);
  uint64_t v28 = (void *)((char *)a1 + v27);
  uint64_t v29 = (void *)((char *)a2 + v27);
  uint64_t v30 = v29[1];
  *uint64_t v28 = *v29;
  v28[1] = v30;
  uint64_t v31 = a3[20];
  uint64_t v32 = a3[21];
  uint64_t v33 = (void *)((char *)a1 + v31);
  uint64_t v34 = (void *)((char *)a2 + v31);
  uint64_t v35 = v34[1];
  *uint64_t v33 = *v34;
  v33[1] = v35;
  uint64_t v36 = (char *)a1 + v32;
  uint64_t v37 = (char *)a2 + v32;
  *(void *)uint64_t v36 = *(void *)v37;
  v36[8] = v37[8];
  uint64_t v38 = a3[23];
  *((_BYTE *)a1 + a3[22]) = *((_BYTE *)a2 + a3[22]);
  uint64_t v39 = (char *)a1 + v38;
  uint64_t v40 = (char *)a2 + v38;
  *(_DWORD *)uint64_t v39 = *(_DWORD *)v40;
  v39[4] = v40[4];
  uint64_t v41 = a3[25];
  *(void *)((char *)a1 + a3[24]) = *(void *)((char *)a2 + a3[24]);
  *(void *)((char *)a1 + v41) = *(void *)((char *)a2 + v41);
  uint64_t v42 = a3[27];
  *(void *)((char *)a1 + a3[26]) = *(void *)((char *)a2 + a3[26]);
  *((_BYTE *)a1 + v42) = *((_BYTE *)a2 + v42);
  uint64_t v43 = a3[29];
  *((_BYTE *)a1 + a3[28]) = *((_BYTE *)a2 + a3[28]);
  *(void *)((char *)a1 + v43) = *(void *)((char *)a2 + v43);
  uint64_t v44 = a3[30];
  uint64_t v45 = a3[31];
  uint64_t v46 = (char *)a1 + v44;
  uint64_t v47 = (char *)a2 + v44;
  *(void *)uint64_t v46 = *(void *)v47;
  v46[8] = v47[8];
  uint64_t v48 = (void *)((char *)a1 + v45);
  uint64_t v49 = (void *)((char *)a2 + v45);
  uint64_t v50 = v49[1];
  *uint64_t v48 = *v49;
  v48[1] = v50;
  uint64_t v51 = a3[32];
  uint64_t v52 = (void *)((char *)a1 + v51);
  uint64_t v53 = (void *)((char *)a2 + v51);
  uint64_t v54 = v53[1];
  *uint64_t v52 = *v53;
  v52[1] = v54;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *sub_186C518C8(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = sub_186C5AA8C();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48);
  int v12 = v11(v7, 1LL, v9);
  int v13 = v11(v8, 1LL, v9);
  if (!v12)
  {
    if (!v13)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 24))(v7, v8, v9);
      goto LABEL_7;
    }

    (*(void (**)(char *, uint64_t))(v10 + 8))(v7, v9);
    goto LABEL_6;
  }

  if (v13)
  {
LABEL_6:
    uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C6A21F8);
    memcpy(v7, v8, *(void *)(*(void *)(v14 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v7, v8, v9);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0LL, 1LL, v9);
LABEL_7:
  *(void *)((char *)a1 + a3[6]) = *(void *)((char *)a2 + a3[6]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)((char *)a1 + a3[7]) = *(void *)((char *)a2 + a3[7]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)((char *)a1 + a3[8]) = *(void *)((char *)a2 + a3[8]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v15 = a3[9];
  uint64_t v16 = (char *)a1 + v15;
  uint64_t v17 = (char *)a2 + v15;
  uint64_t v18 = *(void *)v17;
  _BYTE v16[8] = v17[8];
  *(void *)uint64_t v16 = v18;
  uint64_t v19 = a3[10];
  uint64_t v20 = (char *)a1 + v19;
  id v21 = (char *)a2 + v19;
  LODWORD(v18) = *(_DWORD *)v21;
  v20[4] = v21[4];
  *(_DWORD *)uint64_t v20 = v18;
  uint64_t v22 = a3[11];
  uint64_t v23 = (char *)a1 + v22;
  uint64_t v24 = (char *)a2 + v22;
  uint64_t v25 = *(void *)v24;
  v23[8] = v24[8];
  *(void *)uint64_t v23 = v25;
  *(void *)((char *)a1 + a3[12]) = *(void *)((char *)a2 + a3[12]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)((char *)a1 + a3[13]) = *(void *)((char *)a2 + a3[13]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_BYTE *)a1 + a3[14]) = *((_BYTE *)a2 + a3[14]);
  uint64_t v26 = a3[15];
  uint64_t v27 = (char *)a1 + v26;
  uint64_t v28 = (char *)a2 + v26;
  char v29 = v28[8];
  *(void *)uint64_t v27 = *(void *)v28;
  v27[8] = v29;
  *((_BYTE *)a1 + a3[16]) = *((_BYTE *)a2 + a3[16]);
  *((_BYTE *)a1 + a3[17]) = *((_BYTE *)a2 + a3[17]);
  *((_BYTE *)a1 + a3[18]) = *((_BYTE *)a2 + a3[18]);
  uint64_t v30 = a3[19];
  uint64_t v31 = (void *)((char *)a1 + v30);
  uint64_t v32 = (void *)((char *)a2 + v30);
  *uint64_t v31 = *v32;
  v31[1] = v32[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v33 = a3[20];
  uint64_t v34 = (void *)((char *)a1 + v33);
  uint64_t v35 = (void *)((char *)a2 + v33);
  *uint64_t v34 = *v35;
  v34[1] = v35[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v36 = a3[21];
  uint64_t v37 = (char *)a1 + v36;
  uint64_t v38 = (char *)a2 + v36;
  uint64_t v39 = *(void *)v38;
  v37[8] = v38[8];
  *(void *)uint64_t v37 = v39;
  *((_BYTE *)a1 + a3[22]) = *((_BYTE *)a2 + a3[22]);
  uint64_t v40 = a3[23];
  uint64_t v41 = (char *)a1 + v40;
  uint64_t v42 = (char *)a2 + v40;
  LODWORD(v39) = *(_DWORD *)v42;
  v41[4] = v42[4];
  *(_DWORD *)uint64_t v41 = v39;
  *(void *)((char *)a1 + a3[24]) = *(void *)((char *)a2 + a3[24]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)((char *)a1 + a3[25]) = *(void *)((char *)a2 + a3[25]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)((char *)a1 + a3[26]) = *(void *)((char *)a2 + a3[26]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_BYTE *)a1 + a3[27]) = *((_BYTE *)a2 + a3[27]);
  *((_BYTE *)a1 + a3[28]) = *((_BYTE *)a2 + a3[28]);
  *(void *)((char *)a1 + a3[29]) = *(void *)((char *)a2 + a3[29]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v43 = a3[30];
  uint64_t v44 = (char *)a1 + v43;
  uint64_t v45 = (char *)a2 + v43;
  uint64_t v46 = *(void *)v45;
  v44[8] = v45[8];
  *(void *)uint64_t v44 = v46;
  uint64_t v47 = a3[31];
  uint64_t v48 = (void *)((char *)a1 + v47);
  uint64_t v49 = (void *)((char *)a2 + v47);
  *uint64_t v48 = *v49;
  v48[1] = v49[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v50 = a3[32];
  uint64_t v51 = (void *)((char *)a1 + v50);
  uint64_t v52 = (void *)((char *)a2 + v50);
  *uint64_t v51 = *v52;
  v51[1] = v52[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *sub_186C51CA4(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = sub_186C5AA8C();
  uint64_t v10 = *(void *)(v9 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1LL, v9))
  {
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C6A21F8);
    memcpy(v7, v8, *(void *)(*(void *)(v11 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v7, v8, v9);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0LL, 1LL, v9);
  }

  uint64_t v12 = a3[7];
  *(void *)((char *)a1 + a3[6]) = *(void *)((char *)a2 + a3[6]);
  *(void *)((char *)a1 + v12) = *(void *)((char *)a2 + v12);
  uint64_t v13 = a3[9];
  *(void *)((char *)a1 + a3[8]) = *(void *)((char *)a2 + a3[8]);
  uint64_t v14 = (char *)a1 + v13;
  uint64_t v15 = (char *)a2 + v13;
  *(void *)uint64_t v14 = *(void *)v15;
  v14[8] = v15[8];
  uint64_t v16 = a3[10];
  uint64_t v17 = a3[11];
  uint64_t v18 = (char *)a1 + v16;
  uint64_t v19 = (char *)a2 + v16;
  *(_DWORD *)uint64_t v18 = *(_DWORD *)v19;
  v18[4] = v19[4];
  uint64_t v20 = (char *)a1 + v17;
  id v21 = (char *)a2 + v17;
  *(void *)uint64_t v20 = *(void *)v21;
  v20[8] = v21[8];
  uint64_t v22 = a3[13];
  *(void *)((char *)a1 + a3[12]) = *(void *)((char *)a2 + a3[12]);
  *(void *)((char *)a1 + v22) = *(void *)((char *)a2 + v22);
  uint64_t v23 = a3[15];
  *((_BYTE *)a1 + a3[14]) = *((_BYTE *)a2 + a3[14]);
  uint64_t v24 = (char *)a1 + v23;
  uint64_t v25 = (char *)a2 + v23;
  *(void *)uint64_t v24 = *(void *)v25;
  v24[8] = v25[8];
  uint64_t v26 = a3[17];
  *((_BYTE *)a1 + a3[16]) = *((_BYTE *)a2 + a3[16]);
  *((_BYTE *)a1 + v26) = *((_BYTE *)a2 + v26);
  uint64_t v27 = a3[19];
  *((_BYTE *)a1 + a3[18]) = *((_BYTE *)a2 + a3[18]);
  *(_OWORD *)((char *)a1 + v27) = *(_OWORD *)((char *)a2 + v27);
  uint64_t v28 = a3[21];
  *(_OWORD *)((char *)a1 + a3[20]) = *(_OWORD *)((char *)a2 + a3[20]);
  char v29 = (char *)a1 + v28;
  uint64_t v30 = (char *)a2 + v28;
  *(void *)char v29 = *(void *)v30;
  v29[8] = v30[8];
  uint64_t v31 = a3[23];
  *((_BYTE *)a1 + a3[22]) = *((_BYTE *)a2 + a3[22]);
  uint64_t v32 = (char *)a1 + v31;
  uint64_t v33 = (char *)a2 + v31;
  *(_DWORD *)uint64_t v32 = *(_DWORD *)v33;
  v32[4] = v33[4];
  uint64_t v34 = a3[25];
  *(void *)((char *)a1 + a3[24]) = *(void *)((char *)a2 + a3[24]);
  *(void *)((char *)a1 + v34) = *(void *)((char *)a2 + v34);
  uint64_t v35 = a3[27];
  *(void *)((char *)a1 + a3[26]) = *(void *)((char *)a2 + a3[26]);
  *((_BYTE *)a1 + v35) = *((_BYTE *)a2 + v35);
  uint64_t v36 = a3[29];
  *((_BYTE *)a1 + a3[28]) = *((_BYTE *)a2 + a3[28]);
  *(void *)((char *)a1 + v36) = *(void *)((char *)a2 + v36);
  uint64_t v37 = a3[30];
  uint64_t v38 = a3[31];
  uint64_t v39 = (char *)a1 + v37;
  uint64_t v40 = (char *)a2 + v37;
  *(void *)uint64_t v39 = *(void *)v40;
  v39[8] = v40[8];
  *(_OWORD *)((char *)a1 + v38) = *(_OWORD *)((char *)a2 + v38);
  *(_OWORD *)((char *)a1 + a3[32]) = *(_OWORD *)((char *)a2 + a3[32]);
  return a1;
}

void *sub_186C51EF0(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = sub_186C5AA8C();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48);
  int v12 = v11(v7, 1LL, v9);
  int v13 = v11(v8, 1LL, v9);
  if (!v12)
  {
    if (!v13)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 40))(v7, v8, v9);
      goto LABEL_7;
    }

    (*(void (**)(char *, uint64_t))(v10 + 8))(v7, v9);
    goto LABEL_6;
  }

  if (v13)
  {
LABEL_6:
    uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C6A21F8);
    memcpy(v7, v8, *(void *)(*(void *)(v14 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v7, v8, v9);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0LL, 1LL, v9);
LABEL_7:
  *(void *)((char *)a1 + a3[6]) = *(void *)((char *)a2 + a3[6]);
  swift_bridgeObjectRelease();
  *(void *)((char *)a1 + a3[7]) = *(void *)((char *)a2 + a3[7]);
  swift_bridgeObjectRelease();
  *(void *)((char *)a1 + a3[8]) = *(void *)((char *)a2 + a3[8]);
  swift_bridgeObjectRelease();
  uint64_t v15 = a3[9];
  uint64_t v16 = a3[10];
  uint64_t v17 = (char *)a1 + v15;
  uint64_t v18 = (char *)a2 + v15;
  *(void *)uint64_t v17 = *(void *)v18;
  v17[8] = v18[8];
  uint64_t v19 = (char *)a1 + v16;
  uint64_t v20 = (char *)a2 + v16;
  *(_DWORD *)uint64_t v19 = *(_DWORD *)v20;
  v19[4] = v20[4];
  uint64_t v21 = a3[11];
  uint64_t v22 = a3[12];
  uint64_t v23 = (char *)a1 + v21;
  uint64_t v24 = (char *)a2 + v21;
  *(void *)uint64_t v23 = *(void *)v24;
  v23[8] = v24[8];
  *(void *)((char *)a1 + v22) = *(void *)((char *)a2 + v22);
  swift_bridgeObjectRelease();
  *(void *)((char *)a1 + a3[13]) = *(void *)((char *)a2 + a3[13]);
  swift_bridgeObjectRelease();
  uint64_t v25 = a3[15];
  *((_BYTE *)a1 + a3[14]) = *((_BYTE *)a2 + a3[14]);
  uint64_t v26 = (char *)a1 + v25;
  uint64_t v27 = (char *)a2 + v25;
  *(void *)uint64_t v26 = *(void *)v27;
  v26[8] = v27[8];
  uint64_t v28 = a3[17];
  *((_BYTE *)a1 + a3[16]) = *((_BYTE *)a2 + a3[16]);
  *((_BYTE *)a1 + v28) = *((_BYTE *)a2 + v28);
  uint64_t v29 = a3[19];
  *((_BYTE *)a1 + a3[18]) = *((_BYTE *)a2 + a3[18]);
  uint64_t v30 = (void *)((char *)a1 + v29);
  uint64_t v31 = (void *)((char *)a2 + v29);
  uint64_t v33 = *v31;
  uint64_t v32 = v31[1];
  *uint64_t v30 = v33;
  v30[1] = v32;
  swift_bridgeObjectRelease();
  uint64_t v34 = a3[20];
  uint64_t v35 = (void *)((char *)a1 + v34);
  uint64_t v36 = (void *)((char *)a2 + v34);
  uint64_t v38 = *v36;
  uint64_t v37 = v36[1];
  *uint64_t v35 = v38;
  v35[1] = v37;
  swift_bridgeObjectRelease();
  uint64_t v39 = a3[21];
  uint64_t v40 = a3[22];
  uint64_t v41 = (char *)a1 + v39;
  uint64_t v42 = (char *)a2 + v39;
  v41[8] = v42[8];
  *(void *)uint64_t v41 = *(void *)v42;
  *((_BYTE *)a1 + v40) = *((_BYTE *)a2 + v40);
  uint64_t v43 = a3[23];
  uint64_t v44 = a3[24];
  uint64_t v45 = (char *)a1 + v43;
  uint64_t v46 = (char *)a2 + v43;
  v45[4] = v46[4];
  *(_DWORD *)uint64_t v45 = *(_DWORD *)v46;
  *(void *)((char *)a1 + v44) = *(void *)((char *)a2 + v44);
  swift_bridgeObjectRelease();
  *(void *)((char *)a1 + a3[25]) = *(void *)((char *)a2 + a3[25]);
  swift_bridgeObjectRelease();
  *(void *)((char *)a1 + a3[26]) = *(void *)((char *)a2 + a3[26]);
  swift_bridgeObjectRelease();
  uint64_t v47 = a3[28];
  *((_BYTE *)a1 + a3[27]) = *((_BYTE *)a2 + a3[27]);
  *((_BYTE *)a1 + v47) = *((_BYTE *)a2 + v47);
  *(void *)((char *)a1 + a3[29]) = *(void *)((char *)a2 + a3[29]);
  swift_bridgeObjectRelease();
  uint64_t v48 = a3[30];
  uint64_t v49 = a3[31];
  uint64_t v50 = (char *)a1 + v48;
  uint64_t v51 = (char *)a2 + v48;
  *(void *)uint64_t v50 = *(void *)v51;
  v50[8] = v51[8];
  uint64_t v52 = (void *)((char *)a1 + v49);
  uint64_t v53 = (void *)((char *)a2 + v49);
  uint64_t v55 = *v53;
  uint64_t v54 = v53[1];
  *uint64_t v52 = v55;
  v52[1] = v54;
  swift_bridgeObjectRelease();
  uint64_t v56 = a3[32];
  char v57 = (void *)((char *)a1 + v56);
  uint64_t v58 = (void *)((char *)a2 + v56);
  uint64_t v60 = *v58;
  uint64_t v59 = v58[1];
  *char v57 = v60;
  v57[1] = v59;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_186C52220()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_186C5222C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C6A21F8);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + *(int *)(a3 + 20), a2, v6);
  }
  unint64_t v9 = *(void *)(a1 + *(int *)(a3 + 24));
  if (v9 >= 0xFFFFFFFF) {
    LODWORD(v9) = -1;
  }
  return (v9 + 1);
}

uint64_t sub_186C522B0()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_186C522BC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = __swift_instantiateConcreteTypeFromMangledName(&qword_18C6A21F8);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))( a1 + *(int *)(a4 + 20),  a2,  a2,  result);
  }
  *(void *)(a1 + *(int *)(a4 + sub_186BF06F4(*(void *)(v0 + 16), *(void *)(v0 + 24)) = (a2 - 1);
  return result;
}

void sub_186C5233C()
{
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

ValueMetadata *type metadata accessor for RecordingOptions.Options.Requests()
{
  return &type metadata for RecordingOptions.Options.Requests;
}

uint64_t sub_186C5242C(uint64_t a1)
{
  return a1;
}

void ktrace_postprocessing_set_completed_handler_cold_1()
{
}

void ktrace_postprocess_file_internal_cold_1()
{
}

void ktrace_postprocess_file_internal_cold_2( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void ktrace_postprocess_file_internal_cold_3(int a1, os_log_s *a2)
{
  uint64_t v3 = *MEMORY[0x1895F89C0];
  v2[0] = 67109120;
  v2[1] = a1;
  _os_log_error_impl( &dword_186BA3000,  a2,  OS_LOG_TYPE_ERROR,  "failed to start ktrace session to postprocess file (%{errno}d)",  (uint8_t *)v2,  8u);
  OUTLINED_FUNCTION_1();
}

void ktrace_postprocess_file_internal_cold_4( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void ktariadne_read_times_cold_1(int a1, os_log_s *a2)
{
  uint64_t v3 = *MEMORY[0x1895F89C0];
  v2[0] = 67109120;
  v2[1] = a1;
  _os_log_error_impl( &dword_186BA3000,  a2,  OS_LOG_TYPE_ERROR,  "unable to decode artrace traceinfo extended chunk (%{errno}d)",  (uint8_t *)v2,  8u);
}

void kttimesync_init_cold_1()
{
}

void kttimesync_init_cold_2()
{
}

void kttimesync_init_cold_3()
{
}

void __kttimesync_init_block_invoke_2_cold_1()
{
}

void __kttimesync_init_block_invoke_2_cold_2()
{
}

void ktrace_remotetime_update_params_cold_1()
{
}

void ktrace_set_remotetime_conversion_enabled_cold_2()
{
}

void _session_process_events_cold_1()
{
}

void sysctlbyname_string_cold_3()
{
}

void sysctlbyname_string_cold_7()
{
  OUTLINED_FUNCTION_0_1(&dword_186BA3000, v0, v1, "sysctlbyname(%s) size returned got larger (%{errno}d)");
  OUTLINED_FUNCTION_3_0();
}

void sysctl_number_internal_cold_5()
{
}

void sysctl_number_internal_cold_6()
{
}

void create_dict_cold_1()
{
}

void create_dict_cold_2()
{
}

void create_dict_cold_3()
{
}

void dict_string_cold_5()
{
}

void dict_number_internal_cold_4()
{
}

void dict_number_internal_cold_5()
{
}

void dict_BOOL_cold_4()
{
}

void dict_BOOL_cold_5()
{
}

void dict_data_cold_2()
{
}

void dict_number_arr_internal_cold_5()
{
}

void dict_number_arr_internal_cold_6()
{
}

void dict_set_string_cold_3()
{
}

void dict_set_cfstring_cold_3()
{
}

void dict_set_number_cold_4()
{
}

void dict_set_number_arr_cold_3()
{
}

void dict_set_number_arr_cold_4(int a1, uint64_t a2, os_log_s *a3)
{
  LODWORD(v3) = 67109376;
  HIDWORD(v3) = a1;
  LOWORD(v4) = 1024;
  *(_DWORD *)((char *)&v4 + 2) = a2;
  OUTLINED_FUNCTION_5(&dword_186BA3000, a2, a3, "could not create number at index %u (%{errno}d)", v3, v4);
  OUTLINED_FUNCTION_3_0();
}

void ktrace_chunk_map_data_cold_2()
{
}

void ktrace_chunk_map_data_cold_3()
{
}

void ktrace_chunk_map_data_cold_6()
{
  __assert_rtn("ktrace_chunk_map_data", "chunk.c", 157, "n <= to_read");
}

void ktrace_chunk_unmap_data_internal_cold_1()
{
}

void ktrace_chunk_copy_plist_cold_1()
{
}

void ktrace_chunk_copy_plist_cold_2(__CFError **a1, int a2, os_log_s *a3)
{
  uint64_t v10 = *MEMORY[0x1895F89C0];
  uint64_t v5 = utf8_cferror(*a1);
  int v6 = 136315394;
  uint64_t v7 = v5;
  __int16 v8 = 1024;
  int v9 = a2;
  _os_log_error_impl( &dword_186BA3000,  a3,  OS_LOG_TYPE_ERROR,  "failed to decode plist chunk: %s (%{errno}d)",  (uint8_t *)&v6,  0x12u);
}

void ktrace_chunk_iterate_subchunks_cold_2(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_debug_impl(&dword_186BA3000, log, OS_LOG_TYPE_DEBUG, "no chunks to iterate", v1, 2u);
  OUTLINED_FUNCTION_1();
}

void ktrace_chunk_iterate_subchunks_cold_3()
{
}

void append_eventnames_from_path_cold_1(uint64_t a1, int a2, os_log_t log)
{
  uint64_t v7 = *MEMORY[0x1895F89C0];
  int v3 = 136315394;
  uint64_t v4 = a1;
  __int16 v5 = 1024;
  int v6 = a2;
  _os_log_error_impl( &dword_186BA3000,  log,  OS_LOG_TYPE_ERROR,  "failed to append codes file: %s (%{errno}d)",  (uint8_t *)&v3,  0x12u);
}

void ktrace_callback_list_add_cold_4()
{
}

void safe_encode_cold_3()
{
}

void ktrace_config_create_current_cold_2()
{
}

void ktrace_config_create_current_cold_3()
{
}

void config_current_kperf_cold_6()
{
}

void config_current_kperf_cold_7()
{
}

void config_current_kperf_cold_8()
{
}

void config_current_kperf_cold_9()
{
}

void config_current_kperf_cold_10()
{
}

void config_current_kperf_cold_11()
{
}

void config_current_kperf_cold_12()
{
}

void config_current_kperf_cold_13()
{
}

void config_current_kperf_cold_14()
{
}

void config_current_kperf_cold_15()
{
}

void config_current_kperf_cold_16()
{
}

void config_current_kperf_cold_17()
{
}

void config_current_kperf_cold_18()
{
}

void config_current_kperf_cold_19()
{
}

void config_current_kperf_cold_20()
{
}

void config_current_kpc_cold_4()
{
}

void config_current_kpc_cold_5()
{
}

void config_current_kpc_cold_6()
{
}

void ktrace_config_serialize_cold_2()
{
}

void ktrace_config_serialize_cold_3(uint64_t *a1, int a2, os_log_t log)
{
  uint64_t v8 = *MEMORY[0x1895F89C0];
  uint64_t v3 = *a1;
  int v4 = 138412546;
  uint64_t v5 = v3;
  __int16 v6 = 1024;
  int v7 = a2;
  _os_log_error_impl( &dword_186BA3000,  log,  OS_LOG_TYPE_ERROR,  "error reading config dictionary: %@ (%{errno}d)",  (uint8_t *)&v4,  0x12u);
  OUTLINED_FUNCTION_3_0();
}

void ktrace_config_serialize_cold_4()
{
}

void state_name_cold_1()
{
}

void owner_kind_name_cold_1()
{
}

void context_kind_name_cold_1()
{
}

void trigger_kind_name_cold_1()
{
}

void ktrace_config_kdebug_pid_included_cold_2()
{
}

void ktrace_file_append_local_log_content_cold_1()
{
}

void ktrace_file_append_log_content_from_store_cold_1()
{
  uint64_t v4 = *MEMORY[0x1895F89C0];
  OUTLINED_FUNCTION_4();
  int v3 = v0;
  OUTLINED_FUNCTION_3_1( &dword_186BA3000,  v1,  (uint64_t)v1,  "exception occurred while setting logging predicate: %@ (%{errno}d)",  v2);
}

void __ktrace_file_append_log_content_from_store_block_invoke_cold_1()
{
}

void __ktrace_file_append_log_content_from_store_block_invoke_cold_2(void *a1, int a2, os_log_s *a3)
{
  uint64_t v8 = *MEMORY[0x1895F89C0];
  [a1 localizedDescription];
  OUTLINED_FUNCTION_4();
  int v7 = a2;
  OUTLINED_FUNCTION_3_1(&dword_186BA3000, a3, v5, "failed to prepare log source: %@ (%{errno}d)", v6);
}

void __ktrace_file_append_log_content_from_store_block_invoke_2_cold_1()
{
}

void __ktrace_file_append_log_content_from_store_block_invoke_4_cold_1()
{
}

void __ktrace_file_append_log_content_from_store_block_invoke_4_cold_2()
{
}

void __ktrace_file_append_log_content_from_store_block_invoke_4_cold_3()
{
}

void __ktrace_file_append_log_content_from_store_block_invoke_4_cold_4()
{
}

void __ktrace_file_append_log_content_from_store_block_invoke_4_cold_5()
{
}

void __ktrace_file_append_log_content_from_store_block_invoke_4_cold_6()
{
}

void __ktrace_file_append_log_content_from_store_block_invoke_4_cold_7()
{
}

void __ktrace_file_append_log_content_from_store_block_invoke_4_cold_8()
{
}

void __ktrace_file_append_log_content_from_store_block_invoke_4_cold_9()
{
}

void ktrace_print_trace_point_cold_1()
{
}

void escape_string_cold_1()
{
  __assert_rtn("escape_string", "event_printing.c", 32, "written >= 1");
}

void thread_cputime_map_update_cold_1()
{
}

void ktrace_set_thread_cputime_enabled_cold_4()
{
}

void fd_size_cold_2()
{
}

void ktrace_file_open_internal_cold_1()
{
}

void ktrace_file_open_internal_cold_2()
{
  uint64_t v4 = *MEMORY[0x1895F89C0];
  int v2 = 134218240;
  uint64_t v3 = 4LL;
  OUTLINED_FUNCTION_12();
  OUTLINED_FUNCTION_3_1( &dword_186BA3000,  v0,  v1,  "cannot read %zu bytes at offset 0 to parse version 0 header (%{errno}d)",  (uint8_t *)&v2);
  OUTLINED_FUNCTION_3_0();
}

void ktrace_file_open_internal_cold_3()
{
}

void ktrace_file_open_internal_cold_4()
{
}

void ktrace_file_open_internal_cold_5()
{
}

void ktrace_file_open_internal_cold_6()
{
}

void ktrace_file_open_internal_cold_7()
{
  uint64_t v4 = *MEMORY[0x1895F89C0];
  int v2 = 134218240;
  uint64_t v3 = 288LL;
  OUTLINED_FUNCTION_12();
  OUTLINED_FUNCTION_3_1(&dword_186BA3000, v0, v1, "failed to read V2 header of %zu bytes (%{errno}d)", (uint8_t *)&v2);
  OUTLINED_FUNCTION_3_0();
}

void ktrace_file_open_internal_cold_8()
{
}

void ktrace_chunk_array_next_cold_5()
{
}

void ktrace_chunk_array_next_cold_6(int *a1, uint64_t a2, os_log_t log)
{
  uint64_t v11 = *MEMORY[0x1895F89C0];
  int v3 = *a1;
  int v4 = a1[1];
  int v5 = 134218496;
  uint64_t v6 = a2;
  __int16 v7 = 1024;
  int v8 = v3;
  __int16 v9 = 1024;
  int v10 = v4;
  _os_log_debug_impl( &dword_186BA3000,  log,  OS_LOG_TYPE_DEBUG,  "found chunk with header at offset %lld, tag 0x%08x size %u",  (uint8_t *)&v5,  0x18u);
  OUTLINED_FUNCTION_3_0();
}

void ktrace_chunk_array_next_cold_8()
{
}

void ktrace_chunk_array_next_cold_9()
{
}

void ktrace_chunk_array_next_cold_10()
{
}

void ktrace_chunk_array_next_cold_11()
{
}

void ktrace_chunk_array_next_cold_12( uint64_t a1, os_log_s *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_14( &dword_186BA3000,  a2,  a3,  "no more chunks to return from file, next position %zu",  a5,  a6,  a7,  a8,  0);
  OUTLINED_FUNCTION_3_0();
}

void ktrace_file_iterate_cold_3()
{
}

void ktrace_file_iterate_cold_4()
{
  _os_log_fault_impl(&dword_186BA3000, v0, OS_LOG_TYPE_FAULT, "ktrace_chunk_next returned the same chunk", v1, 2u);
  OUTLINED_FUNCTION_1();
}

void ktrace_file_iterate_cold_5()
{
}

void ktrace_file_append_data_cold_5()
{
}

void ktrace_file_append_data_cold_6()
{
}

void ktrace_file_append_file_cold_1()
{
}

void ktrace_file_append_file_cold_2()
{
}

void ktrace_file_append_file_cold_3()
{
}

void ktrace_file_append_file_cold_4()
{
}

void ktrace_file_append_start_internal_cold_2()
{
}

void ktrace_file_append_start_internal_cold_3()
{
}

void ktrace_file_append_start_internal_cold_4( uint64_t a1, os_log_s *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void ktrace_file_append_start_internal_cold_5()
{
}

void ktrace_file_append_start_internal_cold_6()
{
}

void ktrace_file_append_finish_internal_cold_4()
{
}

void ktrace_file_append_finish_internal_cold_5()
{
}

void ktrace_file_align_next_cold_3()
{
}

void ktrace_file_align_next_cold_4()
{
}

void ktrace_file_align_next_cold_5()
{
}

void ktrace_file_update_header_size_cold_1()
{
}

void ktrace_file_header_append_chunk_cold_1()
{
}

void ktrace_file_header_append_chunk_cold_2()
{
}

void ktrace_file_header_append_chunk_cold_3()
{
}

void ktrace_file_header_append_live_cpu_map_cold_1()
{
}

void ktrace_file_append_live_thread_map_cold_1()
{
}

void ktrace_file_append_live_ktrace_cold_2()
{
}

void ktrace_file_append_live_ktrace_cold_3()
{
}

void ktrace_file_append_live_ktrace_cold_4(int a1, os_log_s *a2)
{
  uint64_t v7 = *MEMORY[0x1895F89C0];
  __error();
  OUTLINED_FUNCTION_19();
  int v6 = a1;
  OUTLINED_FUNCTION_18(&dword_186BA3000, a2, v4, "cannot seek to end of file after writing events %d (%{errno}d)", v5);
}

void ktrace_file_append_live_ktrace_cold_5()
{
}

void ktrace_file_append_live_ktrace_transformed_cold_3()
{
}

void ktrace_file_append_live_ktrace_transformed_cold_4()
{
}

void ktrace_file_append_live_ktrace_transformed_cold_5()
{
}

void ktrace_file_append_live_ktrace_transformed_cold_6()
{
}

void ktrace_file_append_live_ktrace_transformed_cold_7()
{
  uint64_t v2 = *MEMORY[0x1895F89C0];
  OUTLINED_FUNCTION_2();
  _os_log_debug_impl(&dword_186BA3000, v0, OS_LOG_TYPE_DEBUG, "starting to read for %u ms", v1, 8u);
  OUTLINED_FUNCTION_1();
}

void ktrace_file_append_live_ktrace_transformed_cold_8()
{
}

void ktrace_file_append_live_filtered_ktrace_cold_2()
{
}

void ktrace_file_compress_cold_2()
{
}

void ktrace_file_compress_cold_3()
{
}

void ktrace_file_compress_cold_4()
{
}

void ktrace_file_compress_cold_5()
{
}

void append_transformed_events_cold_1()
{
}

void ktrace_capture_live_stackshot_cold_1()
{
}

void ktrace_capture_live_stackshot_cold_2()
{
}

void ktrace_capture_live_stackshot_cold_3()
{
}

void ktrace_file_walltime_offset_cold_3()
{
}

void ktrace_file_earliest_timestamp_cold_3()
{
}

void ktrace_file_earliest_timestamp_cold_4()
{
}

void ktrace_file_earliest_timestamp_cold_5()
{
}

void ktrace_file_latest_timestamp_cold_3()
{
}

void ktrace_file_write_header_system_default_cold_2()
{
}

void ktrace_file_write_header_system_default_cold_3()
{
}

void ktrace_file_write_header_system_default_cold_4()
{
}

void ktrace_file_write_header_internal_cold_4()
{
}

void __ktrace_file_iterate_subfiles_block_invoke_cold_1()
{
}

void __ktrace_file_iterate_subfiles_block_invoke_cold_2()
{
}

void __ktrace_file_iterate_subfiles_block_invoke_2_cold_1()
{
}

void __ktrace_file_iterate_subfiles_block_invoke_2_cold_2()
{
}

void __ktrace_file_iterate_subfiles_block_invoke_2_cold_3()
{
}

void parse_v1_file_cold_1()
{
}

void parse_v1_file_cold_2()
{
}

void parse_v1_file_cold_3()
{
}

void parse_v1_file_cold_4()
{
  uint64_t v4 = *MEMORY[0x1895F89C0];
  OUTLINED_FUNCTION_19();
  int v3 = v0;
  OUTLINED_FUNCTION_18(&dword_186BA3000, v1, (uint64_t)v1, "value at CPU count was %u (%{errno}d)", v2);
  OUTLINED_FUNCTION_3_0();
}

void parse_v1_file_cold_5()
{
}

void parse_v1_file_cold_6()
{
}

void parse_v1_file_cold_7()
{
}

void parse_v1_file_cold_8(uint64_t a1, uint64_t a2, os_log_s *a3)
{
  LOWORD(OUTLINED_FUNCTION_9( &dword_186BA3000,  v0,  v1,  "no initial chunk and asked to iterate from current offset %lld, starting with offset %lld",  v2, v3) = 2048;
  *(void *)((char *)&v3 + 2) = a2;
  OUTLINED_FUNCTION_11(&dword_186BA3000, a2, a3, "CPU map found with %u CPUs, of size %llu", 67109376, (void)v3);
  OUTLINED_FUNCTION_3_0();
}

void parse_v1_file_cold_9()
{
}

void parse_v1_file_cold_10()
{
}

void parse_v1_file_cold_11()
{
}

void parse_v1_file_cold_12()
{
}

void parse_v1_file_cold_13()
{
}

void parse_v3_header_cold_1()
{
}

void parse_v3_header_cold_2()
{
}

void parse_v3_header_cold_3(uint64_t a1, uint64_t a2, os_log_s *a3)
{
  uint64_t v3 = "active";
  if (!*(_DWORD *)(a1 + 184)) {
    uint64_t v3 = "inactive";
  }
  LOWORD(v4) = 2080;
  *(void *)((char *)&v4 + 2) = v3;
  OUTLINED_FUNCTION_11( &dword_186BA3000,  a2,  a3,  "file has timezone of %u minutes west, DST %s",  67109378,  (const char *)v4);
  OUTLINED_FUNCTION_3_0();
}

void __parse_artrace_file_block_invoke_cold_3()
{
}

void __parse_artrace_file_block_invoke_cold_6()
{
  uint64_t v4 = *MEMORY[0x1895F89C0];
  int v2 = 134218240;
  uint64_t v3 = 0LL;
  OUTLINED_FUNCTION_12();
  OUTLINED_FUNCTION_3_1( &dword_186BA3000,  v0,  v1,  "size of artrace extended trace info block is %llu (%{errno}d)",  (uint8_t *)&v2);
  OUTLINED_FUNCTION_3_0();
}

void __parse_artrace_file_block_invoke_cold_7()
{
}

void __parse_artrace_file_block_invoke_cold_8()
{
}

void __parse_artrace_file_block_invoke_cold_9()
{
}

void __parse_artrace_file_block_invoke_cold_10()
{
}

void synthesize_thread_map_chunk_cold_1()
{
}

void synthesize_thread_map_chunk_cold_2()
{
}

void synthesize_thread_map_chunk_cold_3()
{
}

void synthesize_thread_map_chunk_cold_4()
{
}

void synthesize_thread_map_chunk_cold_5()
{
}

void synthesize_thread_map_chunk_cold_6()
{
}

void synthesize_thread_map_chunk_cold_7()
{
}

void synthesize_thread_map_chunk_cold_8()
{
}

void synthesize_events_chunk_cold_1()
{
}

void synthesize_events_chunk_cold_2()
{
}

void synthesize_events_chunk_cold_3()
{
}

void synthesize_events_chunk_cold_4(uint64_t a1, uint64_t a2, os_log_s *a3)
{
  *(_DWORD *)uint64_t v3 = 134218240;
  *(void *)&v3[4] = a2;
  *(_WORD *)&v3[12] = 2048;
  *(void *)&v3[14] = *(void *)(a1 + 280) - a2;
  OUTLINED_FUNCTION_9( &dword_186BA3000,  a2,  a3,  "creating synthetic events chunk at offset %lld of size %lld",  *(void *)v3,  *(void *)&v3[8]);
  OUTLINED_FUNCTION_3_0();
}

void synthesize_events_chunk_cold_5()
{
}

void synthesize_events_chunk_cold_6()
{
}

void __ktrace_file_iterate_subfile_block_invoke_2_cold_1()
{
}

void __ktrace_file_iterate_subfile_block_invoke_2_cold_2()
{
}

void setup_events_chunk_cold_1()
{
}

void setup_events_chunk_cold_2()
{
}

void finish_events_chunk_cold_1()
{
}

void finish_events_chunk_cold_2()
{
}

void flatbuffers::FlatBufferBuilder::GetBufferPointer()
{
}

{
  __assert_rtn("data", "flatbuffers.h", 1020, "cur_");
}

void flatbuffers::Allocator::reallocate_downward()
{
}

void flatbuffers::FlatBufferBuilder::NotNested()
{
}

{
  __assert_rtn("NotNested", "flatbuffers.h", 1434, "!nested");
}

void flatbuffers::vector_downward::ensure_space()
{
  __assert_rtn("ensure_space", "flatbuffers.h", 992, "cur_ >= scratch_ && scratch_ >= buf_");
}

{
  __assert_rtn("ensure_space", "flatbuffers.h", 996, "size() < FLATBUFFERS_MAX_BUFFER_SIZE");
}

void flatbuffers::FlatBufferBuilder::ReferTo()
{
  __assert_rtn("ReferTo", "flatbuffers.h", 1421, "off && off <= GetSize()");
}

void flatbuffers::FlatBufferBuilder::EndTable()
{
}

{
  __assert_rtn("EndTable", "flatbuffers.h", 1467, "table_object_size < 0x10000");
}

{
  __assert_rtn("scratch_end", "flatbuffers.h", 1030, "scratch_");
}

{
  __assert_rtn("scratch_data", "flatbuffers.h", 1025, "buf_");
}

{
  __assert_rtn("EndTable", "flatbuffers.h", 1478, "!ReadScalar<voffset_t>(buf_.data() + field_location->id)");
}

void flatbuffers::FlatBufferBuilder::EndVector()
{
}

void flatbuffers::FlatBufferBuilder::Finish()
{
  __assert_rtn("Finish", "flatbuffers.h", 2155, "strlen(file_identifier) == kFileIdentifierLength");
}

void _session_start_file_cold_4(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_debug_impl( &dword_186BA3000,  log,  OS_LOG_TYPE_DEBUG,  "no timebase found in the file; using current system timebase",
    v1,
    2u);
}

void _session_start_file_cold_5(int *a1, int *a2, os_log_t log)
{
  uint64_t v8 = *MEMORY[0x1895F89C0];
  int v3 = *a1;
  int v4 = *a2;
  v5[0] = 67109376;
  v5[1] = v3;
  __int16 v6 = 1024;
  int v7 = v4;
  _os_log_debug_impl( &dword_186BA3000,  log,  OS_LOG_TYPE_DEBUG,  "no timebase found in the file; using supplemental timebase (%d / %d)",
    (uint8_t *)v5,
    0xEu);
}

void _session_start_live_cold_1()
{
}

void _session_start_live_cold_2()
{
}

void _session_start_live_cold_4()
{
}

void _session_start_live_cold_7( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void _session_start_live_cold_8( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void _session_start_live_cold_9(uint64_t *a1, int a2, os_log_s *a3)
{
  uint64_t v8 = *MEMORY[0x1895F89C0];
  uint64_t v3 = *a1;
  int v4 = 138412546;
  uint64_t v5 = v3;
  __int16 v6 = 1024;
  int v7 = a2;
  OUTLINED_FUNCTION_3_1( &dword_186BA3000,  a3,  (uint64_t)a3,  "failed to start tracing with providers: %@ (%{errno}d)",  (uint8_t *)&v4);
}

void _session_start_live_cold_10()
{
}

void _session_start_live_cold_11()
{
}

void _session_start_live_cold_12()
{
}

void _session_start_live_cold_13()
{
}

void _session_start_live_cold_14()
{
}

void _session_start_live_cold_15()
{
}

void _session_start_live_cold_16(int a1, os_log_s *a2)
{
  uint64_t v7 = *MEMORY[0x1895F89C0];
  geteuid();
  OUTLINED_FUNCTION_6();
  int v6 = a1;
  OUTLINED_FUNCTION_18(&dword_186BA3000, a2, v4, "cannot live trace with euid %d (%{errno}d)", v5);
  OUTLINED_FUNCTION_5_1();
}

void ktrace_reset_existing_cold_1()
{
}

void __drain_events_block_block_invoke_cold_1()
{
}

void __drain_events_block_block_invoke_cold_4(int a1, int a2, os_log_s *a3)
{
  uint64_t v10 = *MEMORY[0x1895F89C0];
  int v6 = 136315394;
  uint64_t v7 = strerror(a1);
  __int16 v8 = 1024;
  int v9 = a2;
  OUTLINED_FUNCTION_3_1(&dword_186BA3000, a3, v5, "trace collection failed: %s (%{errno}d)", (uint8_t *)&v6);
  OUTLINED_FUNCTION_5_1();
}

void __drain_events_block_block_invoke_cold_6( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_186BA3000, a1, a3, "trace returned empty", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

void __drain_events_block_block_invoke_cold_7()
{
  uint64_t v4 = *MEMORY[0x1895F89C0];
  OUTLINED_FUNCTION_6();
  int v3 = v0;
  OUTLINED_FUNCTION_18(&dword_186BA3000, v1, (uint64_t)v1, "trace collection failed: %d (%{errno}d)", v2);
}

void kdebug_wait_cold_1()
{
}

void kdebug_read_events_cold_1()
{
}

void kdebug_write_events_cold_1()
{
}

void kdebug_get_bufinfo_cold_1()
{
}

void kdebug_alloc_current_cpu_map_cold_4()
{
}

void kdebug_alloc_current_cpu_map_cold_5()
{
}

void kdebug_alloc_current_thread_map_cold_3()
{
}

void kdebug_alloc_thread_map_cold_4()
{
}

void ktrace::RingBufferImpl::handleTracepoint()
{
}

{
  os_log_s *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0_0( &dword_186BA3000,  v0,  v1,  "WARNING: The maximum ring buffer size has been reached. The trace will not be able to cover the full requested ring buffer time. (%{errno}d)",  v2,  v3,  v4,  v5,  v6);
  OUTLINED_FUNCTION_1();
}

void ktrace::RingBufferImpl::handlerSupportCheckTimeTruncation()
{
}

void ktrace::RingBufferImpl::handlerSupportCheckTimeBackwards(uint64_t a1, uint64_t a2, os_log_s *a3)
{
  LODWORD(OUTLINED_FUNCTION_9(&dword_186BA3000, v0, v1, "V3 file has header with size %llu, header size %llu", v2, v3) = 67109376;
  HIDWORD(OUTLINED_FUNCTION_9(&dword_186BA3000, v0, v1, "V3 file has header with size %llu, header size %llu", v2, v3) = *(unsigned __int8 *)(a1 + 3);
  LOWORD(v4) = 1024;
  *(_DWORD *)((char *)&v4 + 2) = a2;
  OUTLINED_FUNCTION_5( &dword_186BA3000,  a2,  a3,  "ERROR: Timestamps out of order for class 0x%x. Trace file will probably be corrupted and unreadable. Please file a b ug against Purple Ariadne with this trace. (%{errno}d)",  v3,  v4);
  OUTLINED_FUNCTION_3_0();
}

void ktrace::RingBufferImpl::handleCompletion()
{
}

{
  os_log_s *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0_0( &dword_186BA3000,  v0,  v1,  "ERROR: The trace buffer has lost samples. This is currently not supported by the UI. Run with --help-dropped-events for additional help. (%{errno}d)",  v2,  v3,  v4,  v5,  v6);
  OUTLINED_FUNCTION_1();
}

void ktrace::RingBufferImpl::handleCompletion(uint64_t a1, int a2, os_log_t log)
{
  uint64_t v7 = *MEMORY[0x1895F89C0];
  int v3 = 134218240;
  uint64_t v4 = a1;
  __int16 v5 = 1024;
  int v6 = a2;
  _os_log_error_impl( &dword_186BA3000,  log,  OS_LOG_TYPE_ERROR,  "ERROR: Failed to write %ld kdebug events into chunk in output file (%{errno}d)",  (uint8_t *)&v3,  0x12u);
  OUTLINED_FUNCTION_3_0();
}

void ktrace::RingBufferImpl::RingBufferImpl()
{
}

{
  uint64_t v0;
  os_log_t v1;
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_5(&dword_186BA3000, v0, v1, "ERROR: Couldn't get total memory size: %{darwin.errno}d (%{errno}d)");
  OUTLINED_FUNCTION_3_0();
}

void ktrace::MemoryPool<ktrace::RingBufferHeader>::reapMemory()
{
}

void _session_end_internal_cold_3()
{
}

void _session_teardown_cold_2()
{
}

void _session_teardown_cold_4(int a1, os_log_s *a2)
{
  uint64_t v3 = *MEMORY[0x1895F89C0];
  v2[0] = 67109120;
  v2[1] = a1;
  _os_log_error_impl( &dword_186BA3000,  a2,  OS_LOG_TYPE_ERROR,  "could not find last timestamp, not writing summary chunk (%{errno}d)",  (uint8_t *)v2,  8u);
}

void ktrace_start_cold_4()
{
}

void ktrace_start_cold_6()
{
}

void ktrace_start_cold_9()
{
}

void ktrace_start_cold_11()
{
}

void ktrace_start_cold_12(unsigned __int8 *a1)
{
}

void ktrace_file_append_ioreg_cold_1(int a1, os_log_s *a2)
{
  uint64_t v3 = *MEMORY[0x1895F89C0];
  v2[0] = 67109120;
  v2[1] = a1;
  _os_log_error_impl( &dword_186BA3000,  a2,  OS_LOG_TYPE_ERROR,  "error writing ioreg plist (%{errno}d)",  (uint8_t *)v2,  8u);
}

void ktrace_machine_create_current_cold_2()
{
}

void ktrace_machine_create_current_cold_3()
{
}

void ktrace_machine_create_current_cold_4()
{
}

void ktrace_machine_create_current_cold_5()
{
}

void ktrace_machine_create_current_cold_6()
{
}

void ktrace_machine_create_current_cold_7(uint8_t *a1, _BYTE *a2, os_log_s *a3)
{
  *a1 = 0;
  *a2 = 0;
  OUTLINED_FUNCTION_5_2(&dword_186BA3000, a3, (uint64_t)a3, "ignoring CPU due to missing logical-cpu-id property", a1);
}

void ktrace_machine_create_current_cold_8()
{
}

void ktrace_machine_create_current_cold_9()
{
}

void ktrace_machine_create_current_cold_10()
{
}

void ktrace_machine_fill_name_cold_1(void *a1, uint64_t a2, os_log_s *a3)
{
  *(_DWORD *)uint64_t v3 = 138412546;
  *(void *)&v3[4] = *a1;
  *(_WORD *)&v3[12] = 1024;
  *(_DWORD *)&v3[14] = a2;
  OUTLINED_FUNCTION_0_1( &dword_186BA3000,  a2,  a3,  "cannot determine if current task is entitled to user-assigned device name: %@ (%{errno}d)",  *(void *)v3,  *(void *)&v3[8],  *(_WORD *)&v3[16],  *MEMORY[0x1895F89C0]);
}

void ktrace_machine_fill_name_cold_2(os_log_s *a1, uint64_t a2, uint64_t a3)
{
  *(_WORD *)uint64_t v3 = 0;
  OUTLINED_FUNCTION_5_2(&dword_186BA3000, a1, a3, "cannot access user-assigned device name without entitlement", v3);
  OUTLINED_FUNCTION_1();
}

void ktrace_machine_fill_volume_size_cold_1()
{
}

void ktrace_machine_fill_volume_size_cold_2()
{
}

void ktrace_machine_fill_volume_size_cold_3()
{
}

void ktrace_machine_create_cold_3(uint64_t a1, uint64_t a2, os_log_s *a3)
{
  *(_DWORD *)uint64_t v3 = 136315394;
  *(void *)&v3[4] = a1;
  *(_WORD *)&v3[12] = 1024;
  *(_DWORD *)&v3[14] = a2;
}

void ktrace_machine_v1_2_cold_1()
{
}

void ktrace_machine_v1_3_cold_1()
{
}

void ktrace_machine_v1_3_cold_2()
{
}

void ktrace_machine_v1_4_cold_1()
{
}

void ktrace_machine_v1_4_cold_2()
{
}

void ktrace_start_writing_fd_cold_3( uint64_t a1, os_log_s *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void ktrace_start_writing_file_cold_4( uint64_t a1, os_log_s *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void _session_ensure_uuidmap_cold_1(int a1, os_log_s *a2)
{
  uint64_t v3 = *MEMORY[0x1895F89C0];
  v2[0] = 67109120;
  v2[1] = a1;
  _os_log_error_impl( &dword_186BA3000,  a2,  OS_LOG_TYPE_ERROR,  "failed to get ktrace_machine_t for session. (%{errno}d)",  (uint8_t *)v2,  8u);
}

void ktrace_stream_iterate_group_cold_4()
{
}

void convert_events_cold_5(uint64_t a1, os_log_s *a2)
{
  uint64_t v4 = *MEMORY[0x1895F89C0];
  int v2 = 134217984;
  uint64_t v3 = a1;
  _os_log_debug_impl( &dword_186BA3000,  a2,  OS_LOG_TYPE_DEBUG,  "did not convert data, provided data with size %zu",  (uint8_t *)&v2,  0xCu);
}

void ktrace_iter_init_chunk_cold_2(const __CFData *a1, uint64_t *a2, os_log_s *a3)
{
  uint64_t v11 = *MEMORY[0x1895F89C0];
  CFIndex Length = CFDataGetLength(a1);
  uint64_t v6 = *a2;
  int v7 = 134218240;
  CFIndex v8 = Length;
  __int16 v9 = 2048;
  uint64_t v10 = v6;
  _os_log_debug_impl( &dword_186BA3000,  a3,  OS_LOG_TYPE_DEBUG,  "decompressed %zu bytes, but expected %zu",  (uint8_t *)&v7,  0x16u);
}

void kthmap_update_stackshot_cold_2(_BYTE *a1, _BYTE *a2)
{
}

void kthmap_update_cold_1()
{
}

void kthmap_update_cold_2(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_debug_impl(&dword_186BA3000, log, OS_LOG_TYPE_DEBUG, "task unique ID's aren't consistent", v1, 2u);
  OUTLINED_FUNCTION_1();
}

void ktrace_thread_map_update_prepass_cold_1()
{
}

void create_dictionary_cold_1()
{
}

void create_dictionary_cold_2()
{
}

void create_dictionary_cold_3()
{
}

void ariadne_thread_dict_apply_cold_3()
{
}

void ariadne_thread_dict_apply_cold_4()
{
}

void _ariadne_process_dict_apply_cold_3()
{
}

void ktrace_uuid_map_create_cold_1(char a1, uint64_t a2, os_log_s *a3)
{
  if ((a1 & 1) != 0) {
    LOWORD(OUTLINED_FUNCTION_9(&dword_186BA3000, v0, v1, "V3 file has header with size %llu, header size %llu", v2, v3) = 0;
  }
  else {
    int v3 = *(_DWORD *)(a2 + 196);
  }
  LOWORD(OUTLINED_FUNCTION_3_2(&dword_186BA3000, v2, v3, "invalid stackshot", v4) = 1024;
  HIWORD(OUTLINED_FUNCTION_3_2(&dword_186BA3000, v2, v3, "invalid stackshot", v4) = v3;
  OUTLINED_FUNCTION_5(&dword_186BA3000, a2, a3, "unknown arch: type = %#x, subtype = %#x", 67109376, v4);
  OUTLINED_FUNCTION_3_0();
}

void ktrace_address_space_append()
{
}

{
  uint64_t v0;
  os_log_s *v1;
  uint8_t v2[12];
  __int16 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v5 = *MEMORY[0x1895F89C0];
  OUTLINED_FUNCTION_24();
  uint64_t v3 = 2048;
  uint64_t v4 = v0;
  OUTLINED_FUNCTION_17( &dword_186BA3000,  v1,  (uint64_t)v1,  "refusing to append a second shared cache to address space!\nold start address = %llx\nnew start address = %llx\n",  v2);
  OUTLINED_FUNCTION_3_0();
}

void ktrace_address_space_from_stackshot()
{
}

{
  os_log_s *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;
  OUTLINED_FUNCTION_10();
  OUTLINED_FUNCTION_5_4( &dword_186BA3000,  v0,  v1,  "bad stackshot: no STACKSHOT_KCTYPE_TASK_SNAPSHOT or pid is -1",  v2,  v3,  v4,  v5,  v6);
  OUTLINED_FUNCTION_1();
}

void ktrace_address_space_from_stackshot(_BYTE *a1, _BYTE *a2)
{
}

void ktrace_uuid_map_update_with_stackshot_cold_1()
{
  __assert_rtn("ktrace_address_space_merge", "trace_symbolicate.mm", 1201, "owner->start <= old_owner.start");
}

void ktrace_address_space_deep_iterate_symbol_owners()
{
}

void ktrace_uuid_map_learn_tailspin_process_info_with_chunk_cold_1()
{
}

void ktrace_uuid_map_learn_tailspin_process_info_with_chunk_cold_2()
{
}

void ktrace_uuid_map_learn_tailspin_process_info_with_chunk_cold_4()
{
  uint64_t v3 = *MEMORY[0x1895F89C0];
  OUTLINED_FUNCTION_24();
  OUTLINED_FUNCTION_13_0(&dword_186BA3000, v0, v1, "tailspin process info chunk invalid pid (%ld), ignoring", v2);
  OUTLINED_FUNCTION_3_0();
}

void ktrace_uuid_map_learn_tailspin_process_info_with_chunk_cold_5()
{
}

void ktrace_uuid_map_learn_tailspin_process_info_with_chunk_cold_6()
{
}

void ktrace_uuid_map_learn_tailspin_symbols_with_chunk_cold_1()
{
}

void ktrace_uuid_map_learn_tailspin_symbols_with_chunk_cold_3()
{
}

void ktrace_uuid_map_learn_tailspin_symbols_with_chunk_cold_4()
{
}

void ktrace_uuid_map_learn_tailspin_symbols_with_chunk_cold_5()
{
}

void ktrace_uuid_map_learn_tailspin_symbols_with_chunk_cold_6()
{
}

void ktrace_uuid_map_learn_ariadne_process_dict_with_chunk_cold_1()
{
}

void __ktrace_uuid_map_learn_ariadne_process_dict_with_chunk_block_invoke_cold_1()
{
}

void __ktrace_uuid_map_learn_ariadne_process_dict_with_chunk_block_invoke_cold_6(_BYTE *a1, _BYTE *a2)
{
}

void __ktrace_uuid_map_learn_ariadne_process_dict_with_chunk_block_invoke_cold_8(_BYTE *a1, _BYTE *a2)
{
}

void __ktrace_uuid_map_learn_ariadne_process_dict_with_chunk_block_invoke_cold_10(_BYTE *a1, _BYTE *a2)
{
}

void __ktrace_uuid_map_learn_ariadne_process_dict_with_chunk_block_invoke_cold_11()
{
}

void ktrace_uuid_map_learn_inodes_with_chunk_cold_1()
{
}

void ktrace_uuid_map_learn_inodes_with_chunk_cold_2(__CFError **a1)
{
}

void ktrace_uuid_map_learn_inodes_with_chunk_cold_4()
{
}

void ktrace_uuid_map_read_process_info_dict()
{
}

{
  os_log_s *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;
  OUTLINED_FUNCTION_10();
  OUTLINED_FUNCTION_5_4(&dword_186BA3000, v0, v1, "process info dict image has no uuid", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_1();
}

{
  os_log_s *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;
  OUTLINED_FUNCTION_10();
  OUTLINED_FUNCTION_5_4(&dword_186BA3000, v0, v1, "process info dict segment has no name", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_1();
}

{
  os_log_s *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;
  OUTLINED_FUNCTION_10();
  OUTLINED_FUNCTION_5_4(&dword_186BA3000, v0, v1, "process info dict segment has no address", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_1();
}

{
  os_log_s *v0;
  uint64_t v1;
  uint8_t v2[24];
  uint64_t v3;
  uint64_t v3 = *MEMORY[0x1895F89C0];
  OUTLINED_FUNCTION_10_0();
  OUTLINED_FUNCTION_13_0(&dword_186BA3000, v0, v1, "process info dict segment has invalid address: %@", v2);
  OUTLINED_FUNCTION_3_0();
}

{
  os_log_s *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;
  OUTLINED_FUNCTION_10();
  OUTLINED_FUNCTION_5_4(&dword_186BA3000, v0, v1, "process info dict segment has no length", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_1();
}

{
  os_log_s *v0;
  uint64_t v1;
  uint8_t v2[24];
  uint64_t v3;
  uint64_t v3 = *MEMORY[0x1895F89C0];
  OUTLINED_FUNCTION_10_0();
  OUTLINED_FUNCTION_13_0(&dword_186BA3000, v0, v1, "process info dict segment has invalid length: %@", v2);
  OUTLINED_FUNCTION_3_0();
}

{
  os_log_s *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;
  OUTLINED_FUNCTION_10();
  OUTLINED_FUNCTION_5_4(&dword_186BA3000, v0, v1, "process info dict has invalid uuid", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_1();
}

{
  os_log_s *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;
  OUTLINED_FUNCTION_10();
  OUTLINED_FUNCTION_5_4(&dword_186BA3000, v0, v1, "process info dict has no pid", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_1();
}

void ktrace_uuid_map_read_process_info_dict(_BYTE *a1, _BYTE *a2)
{
}

void ktrace_uuid_map_learn_kernelmap_with_chunk_cold_1()
{
}

void ktrace_uuid_map_learn_process_info_with_chunk_cold_1()
{
}

void dyldtp_decode_window_update()
{
  uint64_t v3 = *MEMORY[0x1895F89C0];
  OUTLINED_FUNCTION_24();
  OUTLINED_FUNCTION_14_0( &dword_186BA3000,  v0,  v1,  "ignoring DBG_DYLD tracepoint with a threadid of -1, at time %llu",  v2);
  OUTLINED_FUNCTION_3_0();
}

{
  os_log_s *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;
  OUTLINED_FUNCTION_10();
  OUTLINED_FUNCTION_0_2( &dword_186BA3000,  v0,  v1,  "DBG_DYLD decode error.  UUID high bits cut off.  rdar://problem/53183775",  v2,  v3,  v4,  v5,  v6);
  OUTLINED_FUNCTION_1();
}

void ___Z31ktrace_uuid_map_update_internalP15ktrace_uuid_mapP14ktrace_sessionP12ktrace_pointbbU13block_pointerFv12PrepassOpRefE_block_invoke_2_cold_1( uint64_t a1, uint64_t a2, uint64_t a3, os_log_s *a4)
{
  uint64_t v4 = *(void *)(a2 + 48);
  *(_DWORD *)a3 = 136315394;
  *(void *)(a3 + 4) = a1;
  *(_WORD *)(a3 + 12) = 2048;
  *(void *)(a3 + 14) = v4;
  OUTLINED_FUNCTION_19_0( &dword_186BA3000,  "missing dyld unload event for uuid %s at address %llx rdar://problem/54088896",  (uint8_t *)a3,  a4);
}

void ___Z31ktrace_uuid_map_update_internalP15ktrace_uuid_mapP14ktrace_sessionP12ktrace_pointbbU13block_pointerFv12PrepassOpRefE_block_invoke_2_cold_2( uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void ___Z31ktrace_uuid_map_update_internalP15ktrace_uuid_mapP14ktrace_sessionP12ktrace_pointbbU13block_pointerFv12PrepassOpRefE_block_invoke_2_cold_3()
{
}

void ktrace_address_space_merge_owner()
{
}

void ___Z31ktrace_uuid_map_update_internalP15ktrace_uuid_mapP14ktrace_sessionP12ktrace_pointbbU13block_pointerFv12PrepassOpRefE_block_invoke_2_58_cold_1()
{
}

void make_image_summary(uint64_t a1, uint64_t a2, os_log_s *a3)
{
  uint64_t v9 = *MEMORY[0x1895F89C0];
  int v5 = 136315394;
  uint64_t Path = CSSymbolOwnerGetPath();
  __int16 v7 = 2080;
  uint64_t Name = CSSymbolOwnerGetName();
  OUTLINED_FUNCTION_17(&dword_186BA3000, a3, v4, "null uuid found for symbol owner (%s, %s)", (uint8_t *)&v5);
}

uint64_t make_image_summary(void *a1, const char *a2, uint64_t a3, uint64_t a4, void *a5)
{
  size_t v8 = strlen(a2);
  uint64_t v9 = 1024LL;
  if (v8 < 0x400) {
    uint64_t v9 = v8;
  }
  if (v9)
  {
    uint64_t v10 = 2 * v9;
    size_t v11 = 2049LL;
    int v12 = (char *)a1;
    do
    {
      int v13 = *a2++;
      snprintf(v12, v11, "%0hhx", v13);
      v11 -= 2LL;
      v12 += 2;
    }

    while (v10 + v11 != 2049);
  }

  CSSymbolOwnerGetSymbolicator();
  if ((CSIsNull() & 1) != 0) {
    int Pid = -1;
  }
  else {
    int Pid = CSSymbolicatorGetPid();
  }
  bzero(a5, 0xC00uLL);
  uint64_t result = snprintf((char *)a5, 0xC00uLL, "non-UTF-8 path: %s, pid: %d", (const char *)a1, Pid);
  qword_18C6A3050 = (uint64_t)a5;
  __break(1u);
  return result;
}

void ktrace_uuid_map_postprocess_file_cold_2()
{
  uint64_t v2 = *MEMORY[0x1895F89C0];
  OUTLINED_FUNCTION_24();
  _os_log_debug_impl(&dword_186BA3000, v0, OS_LOG_TYPE_DEBUG, "no CPU count found in file, using %llu", v1, 0xCu);
  OUTLINED_FUNCTION_3_0();
}

void __ktrace_uuid_map_postprocess_file_block_invoke_7_cold_4()
{
}

void __ktrace_uuid_map_postprocess_file_block_invoke_7_cold_5()
{
}

void __ktrace_symbolicate_file_block_invoke_cold_1()
{
}

void __ktrace_symbolicate_file_block_invoke_cold_2()
{
}

void ktrace_make_symbolicator(uint64_t a1, unsigned __int8 *a2)
{
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint8_t v8;
  OUTLINED_FUNCTION_16_0(a1, a2);
  OUTLINED_FUNCTION_10_0();
  OUTLINED_FUNCTION_8_0( &dword_186BA3000,  v2,  v3,  "failed to set up symbolicator for %s: expected 1 symbol owner\n",  v4,  v5,  v6,  v7,  v8);
  OUTLINED_FUNCTION_5_1();
}

void ktrace_symboilcator_learn_ariadne_chunk()
{
}

void ktrace_symboilcator_learn_tailspin_chunk()
{
}

void ktrace_copy_symbolicator_from_chunk_cold_5()
{
}

void ktrace_copy_symbolicator_from_chunk_cold_6()
{
}

void ktrace_address_space_create_cssymbolicator()
{
}

void ktrace_dsym_search_configuration_create_with_plist_cold_1()
{
}

void __ktrace_dsym_search_configuration_create_with_plist_block_invoke_cold_1(const __CFString *a1)
{
}

void ktrace_symbols_buffer_to_text_cold_1()
{
}

void ___ZL42ktrace_uuid_map_learn_inodes_with_chunk_v0P15ktrace_uuid_mapPK14__CFDictionary_block_invoke_cold_2()
{
}

void CSRegionGetSegmentName(const char *a1, uint64_t a2, os_log_s *a3)
{
  uint64_t v8 = *MEMORY[0x1895F89C0];
  uint64_t v3 = "<unknown>";
  if (a1) {
    uint64_t v3 = a1;
  }
  int v4 = 136315394;
  uint64_t v5 = a2;
  __int16 v6 = 2080;
  uint8_t v7 = v3;
  OUTLINED_FUNCTION_17( &dword_186BA3000,  a3,  (uint64_t)a3,  "malformed segment name: '%s', from macho: '%s'",  (uint8_t *)&v4);
  OUTLINED_FUNCTION_3_0();
}

void ktrace_collect_uuid_offset()
{
}

void ___ZL27ktrace_add_symbols_for_uuidP21symbolication_contextP11UUIDContext_block_invoke_cold_1( uint64_t *a1, unsigned __int8 **a2)
{
}

void ___ZL27ktrace_add_symbols_for_uuidP21symbolication_contextP11UUIDContext_block_invoke_164_cold_1()
{
}

void ___ZL27ktrace_add_symbols_for_uuidP21symbolication_contextP11UUIDContext_block_invoke_164_cold_2( uint64_t *a1, unsigned __int8 **a2)
{
}

void ktrace_find_executable(uint64_t a1, unsigned __int8 *a2)
{
}

void ktrace_find_executable()
{
}

{
  os_log_s *v0;
  uint64_t v1;
  uint8_t v2[24];
  uint64_t v3;
  uint64_t v3 = *MEMORY[0x1895F89C0];
  OUTLINED_FUNCTION_10_0();
  OUTLINED_FUNCTION_14_0(&dword_186BA3000, v0, v1, "failed to parse output from command: %s\n", v2);
  OUTLINED_FUNCTION_3_0();
}

{
  int v0;
  os_log_t v1;
  uint8_t v2[12];
  __int16 v3;
  int v4;
  uint64_t v5;
  uint64_t v5 = *MEMORY[0x1895F89C0];
  OUTLINED_FUNCTION_10_0();
  uint64_t v3 = 1024;
  uint64_t v4 = v0;
  _os_log_error_impl(&dword_186BA3000, v1, OS_LOG_TYPE_ERROR, "command failed: %s (exit status %d)\n", v2, 0x12u);
  OUTLINED_FUNCTION_3_0();
}

{
  int *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint8_t v7;
  uint64_t v0 = __error();
  OUTLINED_FUNCTION_25(v0);
  OUTLINED_FUNCTION_10_0();
  OUTLINED_FUNCTION_11_0(&dword_186BA3000, v1, v2, "pipe failed: %s\n", v3, v4, v5, v6, v7);
  OUTLINED_FUNCTION_5_1();
}

void ktrace_find_executable(FILE *a1, os_log_s *a2)
{
  uint64_t v6 = *MEMORY[0x1895F89C0];
  int v3 = ferror(a1);
  strerror(v3);
  OUTLINED_FUNCTION_10_0();
  OUTLINED_FUNCTION_13_0(&dword_186BA3000, a2, v4, "error reading from pipe! %s\n", v5);
  OUTLINED_FUNCTION_5_1();
}

void ktrace_find_executable(const __CFString *a1, uint64_t a2, os_log_s *a3)
{
  uint64_t v9 = *MEMORY[0x1895F89C0];
  utf8(a1);
  OUTLINED_FUNCTION_10_0();
  __int16 v7 = 2080;
  uint64_t v8 = a2;
  OUTLINED_FUNCTION_23(&dword_186BA3000, a3, v5, "found executable: %s\n\tusing command: %s\n", v6);
  OUTLINED_FUNCTION_5_1();
}

void ktrace_find_executable(os_log_s *a1)
{
  uint64_t v5 = *MEMORY[0x1895F89C0];
  uint64_t v2 = __error();
  OUTLINED_FUNCTION_25(v2);
  OUTLINED_FUNCTION_10_0();
  OUTLINED_FUNCTION_13_0(&dword_186BA3000, a1, v3, "waitpid failed! %s\n", v4);
  OUTLINED_FUNCTION_5_1();
}

void ktrace_find_executable(int *a1)
{
}

void ktrace_find_arch_with_default(uint64_t a1, unsigned __int8 *a2)
{
}

void ktrace_find_segment_count(uint64_t a1, unsigned __int8 *a2)
{
}

void ktrace_find_image_type(uint64_t a1, unsigned __int8 *a2)
{
}

void ___ZL42ktrace_address_space_create_cssymbolicatorP21symbolication_contextP20ktrace_address_space_block_invoke_2_cold_2( uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void ktrace_iterate_segments(uint64_t a1, uint64_t a2, os_log_s *a3)
{
  *(_DWORD *)a2 = 136315138;
  *(void *)(a2 + 4) = a1;
  OUTLINED_FUNCTION_13_0(&dword_186BA3000, a3, (uint64_t)a3, "invalid image summary for %s", (uint8_t *)a2);
}

void ktrace_find_base_address(uint64_t a1, unsigned __int8 *a2)
{
}

void flatbuffers::IntToStringHex()
{
  __assert_rtn("IntToStringHex", "util.h", 208, "i >= 0");
}

void flatbuffers::IterateObject()
{
}

{
  __assert_rtn("InlineSize", "minireflect.h", 99, "false");
}

void flatbuffers::IterateValue()
{
}

{
  __assert_rtn("Get", "flatbuffers.h", 279, "i < size()");
}

{
  __assert_rtn("IterateValue", "minireflect.h", 227, "false");
}

void trace_set_enable_cold_1()
{
}

void trace_get_bufinfo_cold_1()
{
}

void trace_readtrace_cold_1()
{
}

void trace_set_filter_cold_1()
{
}

void trace_parse_filter_cold_1()
{
}

void trace_parse_filter_cold_2()
{
}

void trace_parse_filter_cold_3()
{
}

void trace_parse_filter_cold_4()
{
}

void trace_parse_filter_cold_5()
{
}

void trace_parse_filter_cold_6()
{
}

void trace_parse_filter_cold_7()
{
}

void trace_parse_filter_cold_8()
{
}

void trace_set_pid_filter_cold_1()
{
}

void trace_initialize_bufs_cold_1()
{
}

void trace_initialize_bufs_cold_2()
{
}

void trace_set_flags_cold_1()
{
}

void trace_set_event_match_disable_cold_1()
{
}

void trace_readcurthreadmap_cold_4()
{
}

void vfs_trace_paths_cold_1()
{
}

uint64_t sub_186C5A834()
{
  return MEMORY[0x189605FD8]();
}

uint64_t sub_186C5A840()
{
  return MEMORY[0x189605FE0]();
}

uint64_t sub_186C5A84C()
{
  return MEMORY[0x189605FF0]();
}

uint64_t sub_186C5A858()
{
  return MEMORY[0x189605FF8]();
}

uint64_t sub_186C5A864()
{
  return MEMORY[0x189606000]();
}

uint64_t sub_186C5A870()
{
  return MEMORY[0x189606018]();
}

uint64_t sub_186C5A87C()
{
  return MEMORY[0x189606028]();
}

uint64_t sub_186C5A888()
{
  return MEMORY[0x189606090]();
}

uint64_t sub_186C5A894()
{
  return MEMORY[0x189606098]();
}

uint64_t sub_186C5A8A0()
{
  return MEMORY[0x1896060A8]();
}

uint64_t sub_186C5A8AC()
{
  return MEMORY[0x1896060C0]();
}

uint64_t sub_186C5A8B8()
{
  return MEMORY[0x1896060D0]();
}

uint64_t sub_186C5A8C4()
{
  return MEMORY[0x1896060F8]();
}

uint64_t sub_186C5A8D0()
{
  return MEMORY[0x189606100]();
}

uint64_t sub_186C5A8DC()
{
  return MEMORY[0x189606110]();
}

uint64_t sub_186C5A8E8()
{
  return MEMORY[0x189606118]();
}

uint64_t sub_186C5A8F4()
{
  return MEMORY[0x189606128]();
}

uint64_t sub_186C5A900()
{
  return MEMORY[0x1896061F0]();
}

uint64_t sub_186C5A90C()
{
  return MEMORY[0x189606208]();
}

uint64_t sub_186C5A918()
{
  return MEMORY[0x189606218]();
}

uint64_t sub_186C5A924()
{
  return MEMORY[0x189606230]();
}

uint64_t sub_186C5A930()
{
  return MEMORY[0x189606240]();
}

uint64_t sub_186C5A93C()
{
  return MEMORY[0x189606260]();
}

uint64_t sub_186C5A948()
{
  return MEMORY[0x189606290]();
}

uint64_t sub_186C5A954()
{
  return MEMORY[0x1896062A0]();
}

uint64_t sub_186C5A960()
{
  return MEMORY[0x1896062B0]();
}

uint64_t sub_186C5A96C()
{
  return MEMORY[0x189606360]();
}

uint64_t sub_186C5A978()
{
  return MEMORY[0x189606370]();
}

uint64_t sub_186C5A984()
{
  return MEMORY[0x189606380]();
}

uint64_t sub_186C5A990()
{
  return MEMORY[0x1896063F8]();
}

uint64_t sub_186C5A99C()
{
  return MEMORY[0x189606400]();
}

uint64_t sub_186C5A9A8()
{
  return MEMORY[0x189606408]();
}

uint64_t sub_186C5A9B4()
{
  return MEMORY[0x189606418]();
}

uint64_t sub_186C5A9C0()
{
  return MEMORY[0x189606928]();
}

uint64_t sub_186C5A9CC()
{
  return MEMORY[0x189606940]();
}

uint64_t sub_186C5A9D8()
{
  return MEMORY[0x189606978]();
}

uint64_t sub_186C5A9E4()
{
  return MEMORY[0x1896069A0]();
}

uint64_t sub_186C5A9F0()
{
  return MEMORY[0x1896069A8]();
}

uint64_t sub_186C5A9FC()
{
  return MEMORY[0x1896069C8]();
}

uint64_t sub_186C5AA08()
{
  return MEMORY[0x1896069D8]();
}

uint64_t sub_186C5AA14()
{
  return MEMORY[0x1896069E0]();
}

uint64_t sub_186C5AA20()
{
  return MEMORY[0x1896069E8]();
}

uint64_t sub_186C5AA2C()
{
  return MEMORY[0x1896069F8]();
}

uint64_t sub_186C5AA38()
{
  return MEMORY[0x189606A08]();
}

uint64_t sub_186C5AA44()
{
  return MEMORY[0x189606A10]();
}

uint64_t sub_186C5AA50()
{
  return MEMORY[0x189606A18]();
}

uint64_t sub_186C5AA5C()
{
  return MEMORY[0x189606A48]();
}

uint64_t sub_186C5AA68()
{
  return MEMORY[0x189606A50]();
}

uint64_t sub_186C5AA74()
{
  return MEMORY[0x189606A60]();
}

uint64_t sub_186C5AA80()
{
  return MEMORY[0x189606A80]();
}

uint64_t sub_186C5AA8C()
{
  return MEMORY[0x189606A90]();
}

uint64_t sub_186C5AA98()
{
  return MEMORY[0x189606AF8]();
}

uint64_t sub_186C5AAA4()
{
  return MEMORY[0x189606B18]();
}

uint64_t sub_186C5AAB0()
{
  return MEMORY[0x189606B60]();
}

uint64_t sub_186C5AABC()
{
  return MEMORY[0x189606BA8]();
}

uint64_t sub_186C5AAC8()
{
  return MEMORY[0x189606C38]();
}

uint64_t sub_186C5AAD4()
{
  return MEMORY[0x189606C58]();
}

uint64_t sub_186C5AAE0()
{
  return MEMORY[0x189606DE8]();
}

uint64_t sub_186C5AAEC()
{
  return MEMORY[0x189606E50]();
}

uint64_t sub_186C5AAF8()
{
  return MEMORY[0x189606E60]();
}

uint64_t sub_186C5AB04()
{
  return MEMORY[0x189606EC8]();
}

uint64_t sub_186C5AB10()
{
  return MEMORY[0x189606F08]();
}

uint64_t sub_186C5AB1C()
{
  return MEMORY[0x189606F10]();
}

uint64_t sub_186C5AB28()
{
  return MEMORY[0x189606F20]();
}

uint64_t sub_186C5AB34()
{
  return MEMORY[0x189606F90]();
}

uint64_t sub_186C5AB40()
{
  return MEMORY[0x189606F98]();
}

uint64_t sub_186C5AB4C()
{
  return MEMORY[0x189606FA8]();
}

uint64_t sub_186C5AB58()
{
  return MEMORY[0x189606FB0]();
}

uint64_t sub_186C5AB64()
{
  return MEMORY[0x18961D160]();
}

uint64_t sub_186C5AB70()
{
  return MEMORY[0x18961D168]();
}

uint64_t sub_186C5AB7C()
{
  return MEMORY[0x18961D170]();
}

uint64_t sub_186C5AB88()
{
  return MEMORY[0x18961D180]();
}

uint64_t sub_186C5AB94()
{
  return MEMORY[0x18961D190]();
}

uint64_t sub_186C5ABA0()
{
  return MEMORY[0x18961D1D8]();
}

uint64_t sub_186C5ABAC()
{
  return MEMORY[0x18961D1E0]();
}

uint64_t sub_186C5ABB8()
{
  return MEMORY[0x18961D1F0]();
}

uint64_t sub_186C5ABC4()
{
  return MEMORY[0x18961D120]();
}

uint64_t sub_186C5ABD0()
{
  return MEMORY[0x18961D138]();
}

uint64_t sub_186C5ABDC()
{
  return MEMORY[0x18961D140]();
}

uint64_t sub_186C5ABE8()
{
  return MEMORY[0x18961D130]();
}

uint64_t sub_186C5ABF4()
{
  return MEMORY[0x18961BBA0]();
}

uint64_t sub_186C5AC00()
{
  return MEMORY[0x18961BBB8]();
}

uint64_t sub_186C5AC0C()
{
  return MEMORY[0x18961BBC0]();
}

uint64_t sub_186C5AC18()
{
  return MEMORY[0x18961BBC8]();
}

uint64_t sub_186C5AC24()
{
  return MEMORY[0x18961BBD0]();
}

uint64_t sub_186C5AC30()
{
  return MEMORY[0x18961BBE0]();
}

uint64_t sub_186C5AC3C()
{
  return MEMORY[0x18961BBE8]();
}

uint64_t sub_186C5AC48()
{
  return MEMORY[0x18961BBF0]();
}

uint64_t sub_186C5AC54()
{
  return MEMORY[0x18961BC08]();
}

uint64_t sub_186C5AC60()
{
  return MEMORY[0x18961B6A0]();
}

uint64_t sub_186C5AC6C()
{
  return MEMORY[0x18961B6E8]();
}

uint64_t sub_186C5AC78()
{
  return MEMORY[0x18961B708]();
}

uint64_t sub_186C5AC84()
{
  return MEMORY[0x18961B778]();
}

uint64_t sub_186C5AC90()
{
  return MEMORY[0x18961B788]();
}

uint64_t sub_186C5AC9C()
{
  return MEMORY[0x18961B820]();
}

uint64_t sub_186C5ACA8()
{
  return MEMORY[0x189607050]();
}

uint64_t sub_186C5ACB4()
{
  return MEMORY[0x189607078]();
}

uint64_t sub_186C5ACC0()
{
  return MEMORY[0x1896179F8]();
}

uint64_t sub_186C5ACCC()
{
  return MEMORY[0x189617AA0]();
}

uint64_t sub_186C5ACD8()
{
  return MEMORY[0x189617B30]();
}

uint64_t sub_186C5ACE4()
{
  return MEMORY[0x189617B40]();
}

uint64_t sub_186C5ACF0()
{
  return MEMORY[0x189617B48]();
}

uint64_t sub_186C5ACFC()
{
  return MEMORY[0x189617C20]();
}

uint64_t sub_186C5AD08()
{
  return MEMORY[0x1896070D8]();
}

uint64_t sub_186C5AD14()
{
  return MEMORY[0x1896070E8]();
}

uint64_t sub_186C5AD20()
{
  return MEMORY[0x1896070F8]();
}

uint64_t sub_186C5AD2C()
{
  return MEMORY[0x189607100]();
}

uint64_t sub_186C5AD38()
{
  return MEMORY[0x189607138]();
}

uint64_t sub_186C5AD44()
{
  return MEMORY[0x189607150]();
}

uint64_t sub_186C5AD50()
{
  return MEMORY[0x189607178]();
}

uint64_t sub_186C5AD5C()
{
  return MEMORY[0x189617C90]();
}

uint64_t sub_186C5AD68()
{
  return MEMORY[0x189617C98]();
}

uint64_t sub_186C5AD74()
{
  return MEMORY[0x189617CB0]();
}

uint64_t sub_186C5AD80()
{
  return MEMORY[0x189617CE0]();
}

uint64_t sub_186C5AD8C()
{
  return MEMORY[0x189617D78]();
}

uint64_t sub_186C5AD98()
{
  return MEMORY[0x189617D80]();
}

uint64_t sub_186C5ADA4()
{
  return MEMORY[0x189617DD8]();
}

uint64_t sub_186C5ADB0()
{
  return MEMORY[0x189617E20]();
}

uint64_t sub_186C5ADBC()
{
  return MEMORY[0x189617E28]();
}

uint64_t sub_186C5ADC8()
{
  return MEMORY[0x189617E38]();
}

uint64_t sub_186C5ADD4()
{
  return MEMORY[0x189617E70]();
}

uint64_t sub_186C5ADE0()
{
  return MEMORY[0x189617E90]();
}

uint64_t sub_186C5ADEC()
{
  return MEMORY[0x189617EA8]();
}

uint64_t sub_186C5ADF8()
{
  return MEMORY[0x189617EB0]();
}

uint64_t sub_186C5AE04()
{
  return MEMORY[0x189617EB8]();
}

uint64_t sub_186C5AE10()
{
  return MEMORY[0x189617ED0]();
}

uint64_t sub_186C5AE1C()
{
  return MEMORY[0x189617ED8]();
}

uint64_t sub_186C5AE28()
{
  return MEMORY[0x189617EE0]();
}

uint64_t sub_186C5AE34()
{
  return MEMORY[0x189617F08]();
}

uint64_t sub_186C5AE40()
{
  return MEMORY[0x189617F48]();
}

uint64_t sub_186C5AE4C()
{
  return MEMORY[0x189617F78]();
}

uint64_t sub_186C5AE58()
{
  return MEMORY[0x189617F80]();
}

uint64_t sub_186C5AE64()
{
  return MEMORY[0x189617F90]();
}

uint64_t sub_186C5AE70()
{
  return MEMORY[0x189617FF8]();
}

uint64_t sub_186C5AE7C()
{
  return MEMORY[0x189618040]();
}

uint64_t sub_186C5AE88()
{
  return MEMORY[0x189618070]();
}

uint64_t sub_186C5AE94()
{
  return MEMORY[0x189618078]();
}

uint64_t sub_186C5AEA0()
{
  return MEMORY[0x189618080]();
}

uint64_t sub_186C5AEAC()
{
  return MEMORY[0x189618090]();
}

uint64_t sub_186C5AEB8()
{
  return MEMORY[0x1896180A8]();
}

uint64_t sub_186C5AEC4()
{
  return MEMORY[0x1896180F8]();
}

uint64_t sub_186C5AED0()
{
  return MEMORY[0x1896181A0]();
}

uint64_t sub_186C5AEDC()
{
  return MEMORY[0x189618220]();
}

uint64_t sub_186C5AEE8()
{
  return MEMORY[0x189618230]();
}

uint64_t sub_186C5AEF4()
{
  return MEMORY[0x189618248]();
}

uint64_t sub_186C5AF00()
{
  return MEMORY[0x1896182A8]();
}

uint64_t sub_186C5AF0C()
{
  return MEMORY[0x189618308]();
}

uint64_t sub_186C5AF18()
{
  return MEMORY[0x1896071E0]();
}

uint64_t sub_186C5AF24()
{
  return MEMORY[0x189618318]();
}

uint64_t sub_186C5AF30()
{
  return MEMORY[0x189618320]();
}

uint64_t sub_186C5AF3C()
{
  return MEMORY[0x189618358]();
}

uint64_t sub_186C5AF48()
{
  return MEMORY[0x189618390]();
}

uint64_t sub_186C5AF54()
{
  return MEMORY[0x1896183C8]();
}

uint64_t sub_186C5AF60()
{
  return MEMORY[0x189618530]();
}

uint64_t sub_186C5AF6C()
{
  return MEMORY[0x1896185C8]();
}

uint64_t sub_186C5AF78()
{
  return MEMORY[0x189618668]();
}

uint64_t sub_186C5AF84()
{
  return MEMORY[0x189618848]();
}

uint64_t sub_186C5AF90()
{
  return MEMORY[0x189618878]();
}

uint64_t sub_186C5AF9C()
{
  return MEMORY[0x189618910]();
}

uint64_t sub_186C5AFA8()
{
  return MEMORY[0x189618920]();
}

uint64_t sub_186C5AFB4()
{
  return MEMORY[0x1896072B0]();
}

uint64_t sub_186C5AFC0()
{
  return MEMORY[0x18961D228]();
}

uint64_t sub_186C5AFCC()
{
  return MEMORY[0x18961D248]();
}

uint64_t sub_186C5AFD8()
{
  return MEMORY[0x18961B888]();
}

uint64_t sub_186C5AFE4()
{
  return MEMORY[0x18961B8A8]();
}

uint64_t sub_186C5AFF0()
{
  return MEMORY[0x18961B8D0]();
}

uint64_t sub_186C5AFFC()
{
  return MEMORY[0x18961B920]();
}

uint64_t sub_186C5B008()
{
  return MEMORY[0x18961B958]();
}

uint64_t sub_186C5B014()
{
  return MEMORY[0x18961B9C8]();
}

uint64_t sub_186C5B020()
{
  return MEMORY[0x18961B9D8]();
}

uint64_t sub_186C5B02C()
{
  return MEMORY[0x18961B9F0]();
}

uint64_t sub_186C5B038()
{
  return MEMORY[0x18961BA10]();
}

uint64_t sub_186C5B044()
{
  return MEMORY[0x18961D258]();
}

uint64_t sub_186C5B050()
{
  return MEMORY[0x18961D260]();
}

uint64_t sub_186C5B05C()
{
  return MEMORY[0x18961BA20]();
}

uint64_t sub_186C5B068()
{
  return MEMORY[0x18961BA28]();
}

uint64_t sub_186C5B074()
{
  return MEMORY[0x1896072E8]();
}

uint64_t sub_186C5B080()
{
  return MEMORY[0x189618AC0]();
}

uint64_t sub_186C5B08C()
{
  return MEMORY[0x189618AD0]();
}

uint64_t sub_186C5B098()
{
  return MEMORY[0x189618AE0]();
}

uint64_t sub_186C5B0A4()
{
  return MEMORY[0x189618BD0]();
}

uint64_t sub_186C5B0B0()
{
  return MEMORY[0x189618BE0]();
}

uint64_t sub_186C5B0BC()
{
  return MEMORY[0x189618C90]();
}

uint64_t sub_186C5B0C8()
{
  return MEMORY[0x189618C98]();
}

uint64_t sub_186C5B0D4()
{
  return MEMORY[0x189618CA0]();
}

uint64_t sub_186C5B0E0()
{
  return MEMORY[0x189618CB0]();
}

uint64_t sub_186C5B0EC()
{
  return MEMORY[0x189618D30]();
}

uint64_t sub_186C5B0F8()
{
  return MEMORY[0x189618D50]();
}

uint64_t sub_186C5B104()
{
  return MEMORY[0x189607320]();
}

uint64_t sub_186C5B110()
{
  return MEMORY[0x189607328]();
}

uint64_t sub_186C5B11C()
{
  return MEMORY[0x189607358]();
}

uint64_t sub_186C5B128()
{
  return MEMORY[0x189607368]();
}

uint64_t sub_186C5B134()
{
  return MEMORY[0x189618D98]();
}

uint64_t sub_186C5B140()
{
  return MEMORY[0x189618DB0]();
}

uint64_t sub_186C5B14C()
{
  return MEMORY[0x189618DD0]();
}

uint64_t sub_186C5B158()
{
  return MEMORY[0x189618E10]();
}

uint64_t sub_186C5B164()
{
  return MEMORY[0x189607370]();
}

uint64_t sub_186C5B170()
{
  return MEMORY[0x189618E20]();
}

uint64_t sub_186C5B17C()
{
  return MEMORY[0x189618E48]();
}

uint64_t sub_186C5B188()
{
  return MEMORY[0x189618E50]();
}

uint64_t sub_186C5B194()
{
  return MEMORY[0x189618E58]();
}

uint64_t sub_186C5B1A0()
{
  return MEMORY[0x189618E70]();
}

uint64_t sub_186C5B1AC()
{
  return MEMORY[0x189618EA0]();
}

uint64_t sub_186C5B1B8()
{
  return MEMORY[0x189618EA8]();
}

uint64_t sub_186C5B1C4()
{
  return MEMORY[0x189618EB8]();
}

uint64_t sub_186C5B1D0()
{
  return MEMORY[0x189618ED8]();
}

uint64_t sub_186C5B1DC()
{
  return MEMORY[0x189618EE0]();
}

uint64_t sub_186C5B1E8()
{
  return MEMORY[0x189619010]();
}

uint64_t sub_186C5B1F4()
{
  return MEMORY[0x189619018]();
}

uint64_t sub_186C5B200()
{
  return MEMORY[0x189619020]();
}

uint64_t sub_186C5B20C()
{
  return MEMORY[0x189619108]();
}

uint64_t sub_186C5B218()
{
  return MEMORY[0x189619110]();
}

uint64_t sub_186C5B224()
{
  return MEMORY[0x189619120]();
}

uint64_t sub_186C5B230()
{
  return MEMORY[0x189619188]();
}

uint64_t sub_186C5B23C()
{
  return MEMORY[0x189619190]();
}

uint64_t sub_186C5B248()
{
  return MEMORY[0x1896191A0]();
}

uint64_t sub_186C5B254()
{
  return MEMORY[0x1896191C0]();
}

uint64_t sub_186C5B260()
{
  return MEMORY[0x1896191E8]();
}

uint64_t sub_186C5B26C()
{
  return MEMORY[0x1896191F0]();
}

uint64_t sub_186C5B278()
{
  return MEMORY[0x189619300]();
}

uint64_t sub_186C5B284()
{
  return MEMORY[0x189619370]();
}

uint64_t sub_186C5B290()
{
  return MEMORY[0x189619388]();
}

uint64_t sub_186C5B29C()
{
  return MEMORY[0x189619390]();
}

uint64_t sub_186C5B2A8()
{
  return MEMORY[0x1896193A0]();
}

uint64_t sub_186C5B2B4()
{
  return MEMORY[0x189619440]();
}

uint64_t sub_186C5B2C0()
{
  return MEMORY[0x1896194D0]();
}

uint64_t sub_186C5B2CC()
{
  return MEMORY[0x189619510]();
}

uint64_t sub_186C5B2D8()
{
  return MEMORY[0x189619530]();
}

uint64_t sub_186C5B2E4()
{
  return MEMORY[0x189619538]();
}

uint64_t sub_186C5B2F0()
{
  return MEMORY[0x189619630]();
}

uint64_t sub_186C5B2FC()
{
  return MEMORY[0x189619660]();
}

uint64_t sub_186C5B308()
{
  return MEMORY[0x1896196C0]();
}

uint64_t sub_186C5B314()
{
  return MEMORY[0x1896196C8]();
}

uint64_t sub_186C5B320()
{
  return MEMORY[0x1896196D0]();
}

uint64_t sub_186C5B32C()
{
  return MEMORY[0x189619768]();
}

uint64_t sub_186C5B338()
{
  return MEMORY[0x189619780]();
}

uint64_t sub_186C5B344()
{
  return MEMORY[0x189619788]();
}

uint64_t sub_186C5B350()
{
  return MEMORY[0x1896198A0]();
}

uint64_t sub_186C5B35C()
{
  return MEMORY[0x1896198A8]();
}

uint64_t sub_186C5B368()
{
  return MEMORY[0x189619930]();
}

uint64_t sub_186C5B374()
{
  return MEMORY[0x189619948]();
}

uint64_t sub_186C5B380()
{
  return MEMORY[0x189619950]();
}

uint64_t sub_186C5B38C()
{
  return MEMORY[0x189619960]();
}

uint64_t sub_186C5B398()
{
  return MEMORY[0x189619978]();
}

uint64_t sub_186C5B3A4()
{
  return MEMORY[0x189619990]();
}

uint64_t sub_186C5B3B0()
{
  return MEMORY[0x189619A08]();
}

uint64_t sub_186C5B3BC()
{
  return MEMORY[0x189619A40]();
}

uint64_t sub_186C5B3C8()
{
  return MEMORY[0x189619A80]();
}

uint64_t sub_186C5B3D4()
{
  return MEMORY[0x189619A88]();
}

uint64_t sub_186C5B3E0()
{
  return MEMORY[0x189619AB0]();
}

uint64_t sub_186C5B3EC()
{
  return MEMORY[0x189619AF8]();
}

uint64_t sub_186C5B3F8()
{
  return MEMORY[0x189619B00]();
}

uint64_t sub_186C5B404()
{
  return MEMORY[0x189619B08]();
}

uint64_t sub_186C5B410()
{
  return MEMORY[0x189619B18]();
}

uint64_t sub_186C5B41C()
{
  return MEMORY[0x189619B28]();
}

uint64_t sub_186C5B428()
{
  return MEMORY[0x189619BB0]();
}

uint64_t sub_186C5B434()
{
  return MEMORY[0x189619BB8]();
}

uint64_t sub_186C5B440()
{
  return MEMORY[0x189619BC0]();
}

uint64_t sub_186C5B44C()
{
  return MEMORY[0x189619BC8]();
}

uint64_t sub_186C5B458()
{
  return MEMORY[0x189619BD8]();
}

uint64_t sub_186C5B464()
{
  return MEMORY[0x189619BE0]();
}

uint64_t sub_186C5B470()
{
  return MEMORY[0x189619BE8]();
}

uint64_t sub_186C5B47C()
{
  return MEMORY[0x189619BF0]();
}

uint64_t sub_186C5B488()
{
  return MEMORY[0x189619BF8]();
}

uint64_t sub_186C5B494()
{
  return MEMORY[0x189619C00]();
}

uint64_t sub_186C5B4A0()
{
  return MEMORY[0x189619C10]();
}

uint64_t sub_186C5B4AC()
{
  return MEMORY[0x189619C20]();
}

uint64_t sub_186C5B4B8()
{
  return MEMORY[0x189619C60]();
}

uint64_t sub_186C5B4C4()
{
  return MEMORY[0x189619CA8]();
}

uint64_t sub_186C5B4D0()
{
  return MEMORY[0x189619CB0]();
}

uint64_t sub_186C5B4DC()
{
  return MEMORY[0x189619CC8]();
}

uint64_t sub_186C5B4E8()
{
  return MEMORY[0x18961A010]();
}

uint64_t sub_186C5B4F4()
{
  return MEMORY[0x18961A050]();
}

uint64_t sub_186C5B500()
{
  return MEMORY[0x18961A120]();
}

uint64_t sub_186C5B50C()
{
  return MEMORY[0x18961A310]();
}

uint64_t sub_186C5B518()
{
  return MEMORY[0x18961A318]();
}

uint64_t sub_186C5B524()
{
  return MEMORY[0x18961A398]();
}

uint64_t sub_186C5B530()
{
  return MEMORY[0x18961A3A0]();
}

uint64_t sub_186C5B53C()
{
  return MEMORY[0x1896073C8]();
}

uint64_t sub_186C5B548()
{
  return MEMORY[0x18961A3C0]();
}

uint64_t sub_186C5B554()
{
  return MEMORY[0x18961A3C8]();
}

uint64_t sub_186C5B560()
{
  return MEMORY[0x18961A3D0]();
}

uint64_t sub_186C5B56C()
{
  return MEMORY[0x18961A3D8]();
}

uint64_t sub_186C5B578()
{
  return MEMORY[0x18961A660]();
}

uint64_t sub_186C5B584()
{
  return MEMORY[0x18961A668]();
}

uint64_t sub_186C5B590()
{
  return MEMORY[0x18961A670]();
}

uint64_t sub_186C5B59C()
{
  return MEMORY[0x18961A680]();
}

uint64_t sub_186C5B5A8()
{
  return MEMORY[0x18961A690]();
}

uint64_t sub_186C5B5B4()
{
  return MEMORY[0x18961A698]();
}

uint64_t sub_186C5B5C0()
{
  return MEMORY[0x18961A6A0]();
}

uint64_t sub_186C5B5CC()
{
  return MEMORY[0x18961A6A8]();
}

uint64_t sub_186C5B5D8()
{
  return MEMORY[0x18961A6C0]();
}

uint64_t sub_186C5B5E4()
{
  return MEMORY[0x18961A950]();
}

uint64_t sub_186C5B5F0()
{
  return MEMORY[0x18961A978]();
}

uint64_t sub_186C5B5FC()
{
  return MEMORY[0x18961AF48]();
}

uint64_t sub_186C5B608()
{
  return MEMORY[0x18961AF60]();
}

uint64_t sub_186C5B614()
{
  return MEMORY[0x18961AF68]();
}

uint64_t sub_186C5B620()
{
  return MEMORY[0x18961AF88]();
}

uint64_t AnalyticsSendEventLazy()
{
  return MEMORY[0x18960DAA0]();
}

CFAllocatorRef CFAllocatorCreate(CFAllocatorRef allocator, CFAllocatorContext *context)
{
  return (CFAllocatorRef)MEMORY[0x1896025E0](allocator, context);
}

void CFArrayAppendArray(CFMutableArrayRef theArray, CFArrayRef otherArray, CFRange otherRange)
{
}

void CFArrayAppendValue(CFMutableArrayRef theArray, const void *value)
{
}

void CFArrayApplyFunction(CFArrayRef theArray, CFRange range, CFArrayApplierFunction applier, void *context)
{
}

CFIndex CFArrayBSearchValues( CFArrayRef theArray, CFRange range, const void *value, CFComparatorFunction comparator, void *context)
{
  return MEMORY[0x189602628](theArray, range.location, range.length, value, comparator, context);
}

CFMutableArrayRef CFArrayCreateMutable( CFAllocatorRef allocator, CFIndex capacity, const CFArrayCallBacks *callBacks)
{
  return (CFMutableArrayRef)MEMORY[0x189602648](allocator, capacity, callBacks);
}

CFMutableArrayRef CFArrayCreateMutableCopy(CFAllocatorRef allocator, CFIndex capacity, CFArrayRef theArray)
{
  return (CFMutableArrayRef)MEMORY[0x189602658](allocator, capacity, theArray);
}

CFIndex CFArrayGetCount(CFArrayRef theArray)
{
  return MEMORY[0x189602660](theArray);
}

CFTypeID CFArrayGetTypeID(void)
{
  return MEMORY[0x189602690]();
}

const void *__cdecl CFArrayGetValueAtIndex(CFArrayRef theArray, CFIndex idx)
{
  return (const void *)MEMORY[0x189602698](theArray, idx);
}

void CFArraySortValues( CFMutableArrayRef theArray, CFRange range, CFComparatorFunction comparator, void *context)
{
}

CFTypeRef CFAutorelease(CFTypeRef arg)
{
  return (CFTypeRef)MEMORY[0x189602730](arg);
}

CFTypeID CFBooleanGetTypeID(void)
{
  return MEMORY[0x1896027C8]();
}

Boolean CFBooleanGetValue(CFBooleanRef BOOLean)
{
  return MEMORY[0x1896027D0](BOOLean);
}

void CFDataAppendBytes(CFMutableDataRef theData, const UInt8 *bytes, CFIndex length)
{
}

CFDataRef CFDataCreate(CFAllocatorRef allocator, const UInt8 *bytes, CFIndex length)
{
  return (CFDataRef)MEMORY[0x189602A58](allocator, bytes, length);
}

CFMutableDataRef CFDataCreateMutable(CFAllocatorRef allocator, CFIndex capacity)
{
  return (CFMutableDataRef)MEMORY[0x189602A68](allocator, capacity);
}

CFDataRef CFDataCreateWithBytesNoCopy( CFAllocatorRef allocator, const UInt8 *bytes, CFIndex length, CFAllocatorRef bytesDeallocator)
{
  return (CFDataRef)MEMORY[0x189602A80](allocator, bytes, length, bytesDeallocator);
}

const UInt8 *__cdecl CFDataGetBytePtr(CFDataRef theData)
{
  return (const UInt8 *)MEMORY[0x189602A98](theData);
}

void CFDataGetBytes(CFDataRef theData, CFRange range, UInt8 *buffer)
{
}

CFIndex CFDataGetLength(CFDataRef theData)
{
  return MEMORY[0x189602AB0](theData);
}

UInt8 *__cdecl CFDataGetMutableBytePtr(CFMutableDataRef theData)
{
  return (UInt8 *)MEMORY[0x189602AC0](theData);
}

CFTypeID CFDataGetTypeID(void)
{
  return MEMORY[0x189602AC8]();
}

void CFDataSetLength(CFMutableDataRef theData, CFIndex length)
{
}

void CFDictionaryAddValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
}

void CFDictionaryApplyFunction(CFDictionaryRef theDict, CFDictionaryApplierFunction applier, void *context)
{
}

Boolean CFDictionaryContainsKey(CFDictionaryRef theDict, const void *key)
{
  return MEMORY[0x189602B90](theDict, key);
}

CFMutableDictionaryRef CFDictionaryCreateMutable( CFAllocatorRef allocator, CFIndex capacity, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return (CFMutableDictionaryRef)MEMORY[0x189602BB8](allocator, capacity, keyCallBacks, valueCallBacks);
}

CFIndex CFDictionaryGetCount(CFDictionaryRef theDict)
{
  return MEMORY[0x189602BD0](theDict);
}

void CFDictionaryGetKeysAndValues(CFDictionaryRef theDict, const void **keys, const void **values)
{
}

CFTypeID CFDictionaryGetTypeID(void)
{
  return MEMORY[0x189602BF0]();
}

const void *__cdecl CFDictionaryGetValue(CFDictionaryRef theDict, const void *key)
{
  return (const void *)MEMORY[0x189602C00](theDict, key);
}

Boolean CFDictionaryGetValueIfPresent(CFDictionaryRef theDict, const void *key, const void **value)
{
  return MEMORY[0x189602C08](theDict, key, value);
}

void CFDictionaryRemoveAllValues(CFMutableDictionaryRef theDict)
{
}

void CFDictionaryRemoveValue(CFMutableDictionaryRef theDict, const void *key)
{
}

void CFDictionarySetValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
}

Boolean CFEqual(CFTypeRef cf1, CFTypeRef cf2)
{
  return MEMORY[0x189602C38](cf1, cf2);
}

CFStringRef CFErrorCopyDescription(CFErrorRef err)
{
  return (CFStringRef)MEMORY[0x189602C48](err);
}

CFIndex CFGetRetainCount(CFTypeRef cf)
{
  return MEMORY[0x189602D20](cf);
}

CFTypeID CFGetTypeID(CFTypeRef cf)
{
  return MEMORY[0x189602D30](cf);
}

uint64_t CFHashBytes()
{
  return MEMORY[0x189602D58]();
}

CFNumberRef CFNumberCreate(CFAllocatorRef allocator, CFNumberType theType, const void *valuePtr)
{
  return (CFNumberRef)MEMORY[0x189602EA0](allocator, theType, valuePtr);
}

CFTypeID CFNumberGetTypeID(void)
{
  return MEMORY[0x189602F08]();
}

Boolean CFNumberGetValue(CFNumberRef number, CFNumberType theType, void *valuePtr)
{
  return MEMORY[0x189602F10](number, theType, valuePtr);
}

CFDataRef CFPropertyListCreateData( CFAllocatorRef allocator, CFPropertyListRef propertyList, CFPropertyListFormat format, CFOptionFlags options, CFErrorRef *error)
{
  return (CFDataRef)MEMORY[0x189602FD0](allocator, propertyList, format, options, error);
}

CFPropertyListRef CFPropertyListCreateWithData( CFAllocatorRef allocator, CFDataRef data, CFOptionFlags options, CFPropertyListFormat *format, CFErrorRef *error)
{
  return (CFPropertyListRef)MEMORY[0x189602FF0](allocator, data, options, format, error);
}

void CFRelease(CFTypeRef cf)
{
}

CFTypeRef CFRetain(CFTypeRef cf)
{
  return (CFTypeRef)MEMORY[0x1896030F0](cf);
}

void CFSetAddValue(CFMutableSetRef theSet, const void *value)
{
}

void CFSetApplyFunction(CFSetRef theSet, CFSetApplierFunction applier, void *context)
{
}

Boolean CFSetContainsValue(CFSetRef theSet, const void *value)
{
  return MEMORY[0x189603248](theSet, value);
}

CFMutableSetRef CFSetCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFSetCallBacks *callBacks)
{
  return (CFMutableSetRef)MEMORY[0x189603260](allocator, capacity, callBacks);
}

CFTypeID CFSetGetTypeID(void)
{
  return MEMORY[0x189603278]();
}

const void *__cdecl CFSetGetValue(CFSetRef theSet, const void *value)
{
  return (const void *)MEMORY[0x189603280](theSet, value);
}

void CFStringAppend(CFMutableStringRef theString, CFStringRef appendedString)
{
}

void CFStringAppendCString(CFMutableStringRef theString, const char *cStr, CFStringEncoding encoding)
{
}

CFComparisonResult CFStringCompare( CFStringRef theString1, CFStringRef theString2, CFStringCompareFlags compareOptions)
{
  return MEMORY[0x1896033C0](theString1, theString2, compareOptions);
}

CFMutableStringRef CFStringCreateMutable(CFAllocatorRef alloc, CFIndex maxLength)
{
  return (CFMutableStringRef)MEMORY[0x189603430](alloc, maxLength);
}

CFStringRef CFStringCreateWithBytes( CFAllocatorRef alloc, const UInt8 *bytes, CFIndex numBytes, CFStringEncoding encoding, Boolean isExternalRepresentation)
{
  return (CFStringRef)MEMORY[0x189603450](alloc, bytes, numBytes, *(void *)&encoding, isExternalRepresentation);
}

CFStringRef CFStringCreateWithBytesNoCopy( CFAllocatorRef alloc, const UInt8 *bytes, CFIndex numBytes, CFStringEncoding encoding, Boolean isExternalRepresentation, CFAllocatorRef contentsDeallocator)
{
  return (CFStringRef)MEMORY[0x189603458]( alloc,  bytes,  numBytes,  *(void *)&encoding,  isExternalRepresentation,  contentsDeallocator);
}

CFStringRef CFStringCreateWithCString(CFAllocatorRef alloc, const char *cStr, CFStringEncoding encoding)
{
  return (CFStringRef)MEMORY[0x189603468](alloc, cStr, *(void *)&encoding);
}

CFStringRef CFStringCreateWithCStringNoCopy( CFAllocatorRef alloc, const char *cStr, CFStringEncoding encoding, CFAllocatorRef contentsDeallocator)
{
  return (CFStringRef)MEMORY[0x189603470](alloc, cStr, *(void *)&encoding, contentsDeallocator);
}

Boolean CFStringGetCString(CFStringRef theString, char *buffer, CFIndex bufferSize, CFStringEncoding encoding)
{
  return MEMORY[0x1896034F8](theString, buffer, bufferSize, *(void *)&encoding);
}

const char *__cdecl CFStringGetCStringPtr(CFStringRef theString, CFStringEncoding encoding)
{
  return (const char *)MEMORY[0x189603500](theString, *(void *)&encoding);
}

CFIndex CFStringGetLength(CFStringRef theString)
{
  return MEMORY[0x189603548](theString);
}

CFIndex CFStringGetMaximumSizeForEncoding(CFIndex length, CFStringEncoding encoding)
{
  return MEMORY[0x189603558](length, *(void *)&encoding);
}

CFTypeID CFStringGetTypeID(void)
{
  return MEMORY[0x189603590]();
}

CFURLRef CFURLCreateWithFileSystemPath( CFAllocatorRef allocator, CFStringRef filePath, CFURLPathStyle pathStyle, Boolean isDirectory)
{
  return (CFURLRef)MEMORY[0x1896037C0](allocator, filePath, pathStyle, isDirectory);
}

CFStringRef CFURLGetString(CFURLRef anURL)
{
  return (CFStringRef)MEMORY[0x189603828](anURL);
}

Boolean CFURLResourceIsReachable(CFURLRef url, CFErrorRef *error)
{
  return MEMORY[0x189603848](url, error);
}

uint64_t CSAddressSetAdd()
{
  return MEMORY[0x18960E050]();
}

uint64_t CSAddressSetCreate()
{
  return MEMORY[0x18960E060]();
}

uint64_t CSArchitectureGetArchitectureForName()
{
  return MEMORY[0x18960E078]();
}

uint64_t CSArchitectureGetFamilyName()
{
  return MEMORY[0x18960E090]();
}

uint64_t CSArchitectureIsArm()
{
  return MEMORY[0x18960E0B0]();
}

uint64_t CSArchitectureIsArm64()
{
  return MEMORY[0x18960E0C0]();
}

uint64_t CSArchitectureIsX86_64()
{
  return MEMORY[0x18960E0D8]();
}

uint64_t CSIsNull()
{
  return MEMORY[0x18960E0F0]();
}

uint64_t CSRegionGetName()
{
  return MEMORY[0x18960E128]();
}

uint64_t CSRegionGetRange()
{
  return MEMORY[0x18960E130]();
}

uint64_t CSRegionGetSymbolOwner()
{
  return MEMORY[0x18960E140]();
}

uint64_t CSRelease()
{
  return MEMORY[0x18960E148]();
}

uint64_t CSRetain()
{
  return MEMORY[0x18960E160]();
}

uint64_t CSSourceInfoGetFilename()
{
  return MEMORY[0x18960E180]();
}

uint64_t CSSourceInfoGetLineNumber()
{
  return MEMORY[0x18960E190]();
}

uint64_t CSSymbolGetName()
{
  return MEMORY[0x18960E1D8]();
}

uint64_t CSSymbolOwnerCreateSparseSignature()
{
  return MEMORY[0x18960E210]();
}

uint64_t CSSymbolOwnerForeachSegment()
{
  return MEMORY[0x18960E238]();
}

uint64_t CSSymbolOwnerGetArchitecture()
{
  return MEMORY[0x18960E248]();
}

uint64_t CSSymbolOwnerGetBaseAddress()
{
  return MEMORY[0x18960E260]();
}

uint64_t CSSymbolOwnerGetCFUUIDBytes()
{
  return MEMORY[0x18960E268]();
}

uint64_t CSSymbolOwnerGetFlags()
{
  return MEMORY[0x18960E280]();
}

uint64_t CSSymbolOwnerGetName()
{
  return MEMORY[0x18960E290]();
}

uint64_t CSSymbolOwnerGetPath()
{
  return MEMORY[0x18960E298]();
}

uint64_t CSSymbolOwnerGetSymbolicator()
{
  return MEMORY[0x18960E2F0]();
}

uint64_t CSSymbolOwnerIsAOut()
{
  return MEMORY[0x18960E300]();
}

uint64_t CSSymbolOwnerIsDyld()
{
  return MEMORY[0x18960E318]();
}

uint64_t CSSymbolOwnerIsDyldSharedCache()
{
  return MEMORY[0x18960E328]();
}

uint64_t CSSymbolicatorCreateWithBinaryImageListCountPidFlagsAndNotification()
{
  return MEMORY[0x18960E370]();
}

uint64_t CSSymbolicatorCreateWithMachKernel()
{
  return MEMORY[0x18960E390]();
}

uint64_t CSSymbolicatorCreateWithPid()
{
  return MEMORY[0x18960E3B8]();
}

uint64_t CSSymbolicatorCreateWithSignature()
{
  return MEMORY[0x18960E3E0]();
}

uint64_t CSSymbolicatorCreateWithURLAndArchitecture()
{
  return MEMORY[0x18960E400]();
}

uint64_t CSSymbolicatorForeachSymbolOwnerAtTime()
{
  return MEMORY[0x18960E438]();
}

uint64_t CSSymbolicatorForeachSymbolicatorWithPath()
{
  return MEMORY[0x18960E450]();
}

uint64_t CSSymbolicatorForeachSymbolicatorWithURL()
{
  return MEMORY[0x18960E460]();
}

uint64_t CSSymbolicatorGetArchitecture()
{
  return MEMORY[0x18960E470]();
}

uint64_t CSSymbolicatorGetPid()
{
  return MEMORY[0x18960E498]();
}

uint64_t CSSymbolicatorGetSourceInfoWithAddressAtTime()
{
  return MEMORY[0x18960E4B8]();
}

uint64_t CSSymbolicatorGetSymbolOwner()
{
  return MEMORY[0x18960E4C8]();
}

uint64_t CSSymbolicatorGetSymbolOwnerCountAtTime()
{
  return MEMORY[0x18960E4E0]();
}

uint64_t CSSymbolicatorGetSymbolWithAddressAtTime()
{
  return MEMORY[0x18960E500]();
}

io_object_t IOIteratorNext(io_iterator_t iterator)
{
  return MEMORY[0x1896082F0](*(void *)&iterator);
}

kern_return_t IOObjectRelease(io_object_t object)
{
  return MEMORY[0x189608398](*(void *)&object);
}

kern_return_t IORegistryEntryCreateCFProperties( io_registry_entry_t entry, CFMutableDictionaryRef *properties, CFAllocatorRef allocator, IOOptionBits options)
{
  return MEMORY[0x189608458](*(void *)&entry, properties, allocator, *(void *)&options);
}

kern_return_t IORegistryEntryGetChildIterator( io_registry_entry_t entry, const io_name_t plane, io_iterator_t *iterator)
{
  return MEMORY[0x189608498](*(void *)&entry, plane, iterator);
}

kern_return_t IORegistryEntryGetLocationInPlane( io_registry_entry_t entry, const io_name_t plane, io_name_t location)
{
  return MEMORY[0x1896084A8](*(void *)&entry, plane, location);
}

kern_return_t IORegistryEntryGetNameInPlane(io_registry_entry_t entry, const io_name_t plane, io_name_t name)
{
  return MEMORY[0x1896084B8](*(void *)&entry, plane, name);
}

kern_return_t IORegistryEntryGetRegistryEntryID(io_registry_entry_t entry, uint64_t *entryID)
{
  return MEMORY[0x189608500](*(void *)&entry, entryID);
}

io_registry_entry_t IORegistryGetRootEntry(mach_port_t mainPort)
{
  return MEMORY[0x189608530](*(void *)&mainPort);
}

io_service_t IOServiceGetMatchingService(mach_port_t mainPort, CFDictionaryRef matching)
{
  return MEMORY[0x189608560](*(void *)&mainPort, matching);
}

kern_return_t IOServiceGetMatchingServices( mach_port_t mainPort, CFDictionaryRef matching, io_iterator_t *existing)
{
  return MEMORY[0x189608578](*(void *)&mainPort, matching, existing);
}

CFMutableDictionaryRef IOServiceMatching(const char *name)
{
  return (CFMutableDictionaryRef)MEMORY[0x189608580](name);
}

CFMutableDictionaryRef IOServiceNameMatching(const char *name)
{
  return (CFMutableDictionaryRef)MEMORY[0x189608590](name);
}

uint64_t MGCopyAnswer()
{
  return MEMORY[0x1896136F0]();
}

uint64_t OSLogLookupPathWithUUID()
{
  return MEMORY[0x189610850]();
}

CFTypeRef SecTaskCopyValueForEntitlement(SecTaskRef task, CFStringRef entitlement, CFErrorRef *error)
{
  return (CFTypeRef)MEMORY[0x18960B640](task, entitlement, error);
}

SecTaskRef SecTaskCreateFromSelf(CFAllocatorRef allocator)
{
  return (SecTaskRef)MEMORY[0x18960B658](allocator);
}

void *__cdecl _Block_copy(const void *aBlock)
{
  return (void *)MEMORY[0x1895F8720](aBlock);
}

void _Block_object_assign(void *a1, const void *a2, const int a3)
{
}

void _Block_object_dispose(const void *a1, const int a2)
{
}

void _Block_release(const void *aBlock)
{
}

uint64_t _CFCopySupplementalVersionDictionary()
{
  return MEMORY[0x189604230]();
}

uint64_t _CFRuntimeCreateInstance()
{
  return MEMORY[0x189604550]();
}

uint64_t _CFRuntimeRegisterClass()
{
  return MEMORY[0x189604568]();
}

uint64_t _IOObjectGetClass()
{
  return MEMORY[0x189608668]();
}

char ***_NSGetEnviron(void)
{
  return (char ***)MEMORY[0x1895F87C8]();
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
}

std::stringbuf::string_type *__cdecl std::stringbuf::str( std::stringbuf::string_type *__return_ptr retstr, const std::stringbuf *this)
{
  return (std::stringbuf::string_type *)MEMORY[0x189614198](retstr, this);
}

const std::locale::facet *__cdecl std::locale::use_facet(const std::locale *this, std::locale::id *a2)
{
  return (const std::locale::facet *)MEMORY[0x1896141C8](this, a2);
}

std::locale std::ios_base::getloc(const std::ios_base *this)
{
  return (std::locale)MEMORY[0x1896141D0](this);
}

std::logic_error *__cdecl std::logic_error::logic_error(std::logic_error *this, const char *a2)
{
  return (std::logic_error *)MEMORY[0x1896141E0](this, a2);
}

std::bad_array_new_length *__cdecl std::bad_array_new_length::bad_array_new_length(std::bad_array_new_length *this)
{
  return (std::bad_array_new_length *)MEMORY[0x189614268](this);
}

size_t std::__next_prime(size_t __n)
{
  return MEMORY[0x1896142A0](__n);
}

std::string *__cdecl std::string::append(std::string *this, const std::string::value_type *__s)
{
  return (std::string *)MEMORY[0x1896142D0](this, __s);
}

std::string *__cdecl std::string::append( std::string *this, const std::string::value_type *__s, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x1896142D8](this, __s, __n);
}

void std::string::resize(std::string *this, std::string::size_type __n, std::string::value_type __c)
{
}

void std::string::push_back(std::string *this, std::string::value_type __c)
{
}

uint64_t std::ostream::operator<<()
{
  return MEMORY[0x1896143F0]();
}

{
  return MEMORY[0x1896143F8]();
}

{
  return MEMORY[0x189614400]();
}

{
  return MEMORY[0x189614408]();
}

{
  return MEMORY[0x189614420]();
}

{
  return MEMORY[0x189614428]();
}

{
  return MEMORY[0x189614430]();
}

{
  return MEMORY[0x189614438]();
}

uint64_t std::iostream::~basic_iostream()
{
  return MEMORY[0x189614448]();
}

uint64_t std::streambuf::basic_streambuf()
{
  return MEMORY[0x189614470]();
}

uint64_t std::streambuf::~streambuf()
{
  return MEMORY[0x189614478]();
}

void std::locale::~locale(std::locale *this)
{
}

void std::ios_base::init(std::ios_base *this, void *__sb)
{
}

uint64_t std::ios::~ios()
{
  return MEMORY[0x189614638]();
}

void std::terminate(void)
{
}

void operator delete[](void *__p)
{
}

void operator delete(void *__p)
{
}

void *__cdecl operator new[](size_t __sz)
{
  return (void *)off_189F541F0(__sz);
}

void *__cdecl operator new(size_t __sz)
{
  return (void *)off_189F541F8(__sz);
}

void __assert_rtn(const char *a1, const char *a2, int a3, const char *a4)
{
}

void *__cxa_allocate_exception(size_t thrown_size)
{
  return (void *)MEMORY[0x1896147A0](thrown_size);
}

void *__cxa_begin_catch(void *a1)
{
  return (void *)MEMORY[0x1896147B8](a1);
}

void __cxa_free_exception(void *a1)
{
}

void __cxa_throw(void *a1, struct type_info *lptinfo, void (*a3)(void *))
{
}

int *__error(void)
{
  return (int *)MEMORY[0x1895F8898]();
}

uint64_t __memcpy_chk()
{
  return MEMORY[0x1895F8930]();
}

int __sprintf_chk(char *a1, int a2, size_t a3, const char *a4, ...)
{
  return MEMORY[0x1895F89A0](a1, *(void *)&a2, a3, a4);
}

uint64_t __strlcpy_chk()
{
  return MEMORY[0x1895F8A08]();
}

uint64_t _os_assert_log()
{
  return MEMORY[0x1895F8D68]();
}

uint64_t _os_assumes_log()
{
  return MEMORY[0x1895F8D70]();
}

uint64_t _os_crash()
{
  return MEMORY[0x1895F8D78]();
}

void _os_log_debug_impl( void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_error_impl( void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_fault_impl( void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_signpost_emit_with_name_impl( void *dso, os_log_t log, os_signpost_type_t type, os_signpost_id_t spid, const char *name, const char *format, uint8_t *buf, uint32_t size)
{
}

uint64_t _swift_stdlib_reportUnimplementedInitializer()
{
  return MEMORY[0x18961B058]();
}

void abort(void)
{
}

int atoi(const char *a1)
{
  return MEMORY[0x1895F95A0](a1);
}

char *__cdecl basename_r(const char *a1, char *a2)
{
  return (char *)MEMORY[0x1895F95F8](a1, a2);
}

void *__cdecl bsearch( const void *__key, const void *__base, size_t __nel, size_t __width, int (__cdecl *__compar)(const void *, const void *))
{
  return (void *)MEMORY[0x1895F9650](__key, __base, __nel, __width, __compar);
}

void bzero(void *a1, size_t a2)
{
}

void *__cdecl calloc(size_t __count, size_t __size)
{
  return (void *)MEMORY[0x1895F9710](__count, __size);
}

__uint64_t clock_gettime_nsec_np(clockid_t __clock_id)
{
  return MEMORY[0x1895FA578](*(void *)&__clock_id);
}

int close(int a1)
{
  return MEMORY[0x1895FA590](*(void *)&a1);
}

int closedir(DIR *a1)
{
  return MEMORY[0x1895FA5A8](a1);
}

void dispatch_activate(dispatch_object_t object)
{
}

void dispatch_assert_queue_V2(dispatch_queue_t queue)
{
}

void dispatch_async(dispatch_queue_t queue, dispatch_block_t block)
{
}

dispatch_queue_global_t dispatch_get_global_queue(uint64_t identifier, unint64_t flags)
{
  return (dispatch_queue_global_t)MEMORY[0x1895FAC40](identifier, flags);
}

void dispatch_group_async(dispatch_group_t group, dispatch_queue_t queue, dispatch_block_t block)
{
}

dispatch_group_t dispatch_group_create(void)
{
  return (dispatch_group_t)MEMORY[0x1895FAC60]();
}

void dispatch_group_enter(dispatch_group_t group)
{
}

void dispatch_group_leave(dispatch_group_t group)
{
}

uint64_t dispatch_group_wait(dispatch_group_t group, dispatch_time_t timeout)
{
  return MEMORY[0x1895FAC80](group, timeout);
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
}

dispatch_queue_attr_t dispatch_queue_attr_make_with_autorelease_frequency( dispatch_queue_attr_t attr, dispatch_autorelease_frequency_t frequency)
{
  return (dispatch_queue_attr_t)MEMORY[0x1895FAD68](attr, frequency);
}

dispatch_queue_attr_t dispatch_queue_attr_make_with_qos_class( dispatch_queue_attr_t attr, dispatch_qos_class_t qos_class, int relative_priority)
{
  return (dispatch_queue_attr_t)MEMORY[0x1895FAD78](attr, *(void *)&qos_class, *(void *)&relative_priority);
}

dispatch_queue_t dispatch_queue_create(const char *label, dispatch_queue_attr_t attr)
{
  return (dispatch_queue_t)MEMORY[0x1895FAD80](label, attr);
}

dispatch_queue_t dispatch_queue_create_with_target_V2( const char *label, dispatch_queue_attr_t attr, dispatch_queue_t target)
{
  return (dispatch_queue_t)MEMORY[0x1895FAD90](label, attr, target);
}

void dispatch_release(dispatch_object_t object)
{
}

dispatch_semaphore_t dispatch_semaphore_create(uint64_t value)
{
  return (dispatch_semaphore_t)MEMORY[0x1895FADF0](value);
}

uint64_t dispatch_semaphore_signal(dispatch_semaphore_t dsema)
{
  return MEMORY[0x1895FAE00](dsema);
}

uint64_t dispatch_semaphore_wait(dispatch_semaphore_t dsema, dispatch_time_t timeout)
{
  return MEMORY[0x1895FAE08](dsema, timeout);
}

void dispatch_set_context(dispatch_object_t object, void *context)
{
}

void dispatch_set_finalizer_f(dispatch_object_t object, dispatch_function_t finalizer)
{
}

uint64_t dispatch_source_cancel_and_wait()
{
  return MEMORY[0x1895FAE48]();
}

dispatch_source_t dispatch_source_create( dispatch_source_type_t type, uintptr_t handle, unint64_t mask, dispatch_queue_t queue)
{
  return (dispatch_source_t)MEMORY[0x1895FAE50](type, handle, mask, queue);
}

void dispatch_source_set_event_handler(dispatch_source_t source, dispatch_block_t handler)
{
}

void dispatch_sync(dispatch_queue_t queue, dispatch_block_t block)
{
}

dispatch_workloop_t dispatch_workloop_create_inactive(const char *label)
{
  return (dispatch_workloop_t)MEMORY[0x1895FAF08](label);
}

uint64_t dispatch_workloop_set_scheduler_priority()
{
  return MEMORY[0x1895FAF30]();
}

uint64_t dscsym_iterate_buffer()
{
  return MEMORY[0x1896151B8]();
}

uint64_t dscsym_mmap_dscsym_for_uuid()
{
  return MEMORY[0x1896151C0]();
}

int dup(int a1)
{
  return MEMORY[0x1895FAFA8](*(void *)&a1);
}

int dup2(int a1, int a2)
{
  return MEMORY[0x1895FAFB8](*(void *)&a1, *(void *)&a2);
}

void exit(int a1)
{
}

int fclose(FILE *a1)
{
  return MEMORY[0x1895FB208](a1);
}

int fcntl(int a1, int a2, ...)
{
  return MEMORY[0x1895FB210](*(void *)&a1, *(void *)&a2);
}

int fcopyfile(int from_fd, int to_fd, copyfile_state_t a3, copyfile_flags_t flags)
{
  return MEMORY[0x1895FB218](*(void *)&from_fd, *(void *)&to_fd, a3, *(void *)&flags);
}

FILE *__cdecl fdopen(int a1, const char *a2)
{
  return (FILE *)MEMORY[0x1895FB228](*(void *)&a1, a2);
}

int feof(FILE *a1)
{
  return MEMORY[0x1895FB248](a1);
}

int ferror(FILE *a1)
{
  return MEMORY[0x1895FB250](a1);
}

int fileno(FILE *a1)
{
  return MEMORY[0x1895FB2A0](a1);
}

FILE *__cdecl fmemopen(void *__buf, size_t __size, const char *__mode)
{
  return (FILE *)MEMORY[0x1895FB320](__buf, __size, __mode);
}

FILE *__cdecl fopen(const char *__filename, const char *__mode)
{
  return (FILE *)MEMORY[0x1895FB348](__filename, __mode);
}

int fprintf(FILE *a1, const char *a2, ...)
{
  return MEMORY[0x1895FB360](a1, a2);
}

int fputc(int a1, FILE *a2)
{
  return MEMORY[0x1895FB370](*(void *)&a1, a2);
}

int fputs(const char *a1, FILE *a2)
{
  return MEMORY[0x1895FB378](a1, a2);
}

size_t fread(void *__ptr, size_t __size, size_t __nitems, FILE *__stream)
{
  return MEMORY[0x1895FB388](__ptr, __size, __nitems, __stream);
}

void free(void *a1)
{
}

ssize_t fsgetpath(char *a1, size_t a2, fsid_t *a3, uint64_t a4)
{
  return MEMORY[0x1895FB440](a1, a2, a3, a4);
}

int fstat(int a1, stat *a2)
{
  return MEMORY[0x1895FB448](*(void *)&a1, a2);
}

int fstatfs(int a1, statfs *a2)
{
  return MEMORY[0x1895FB460](*(void *)&a1, a2);
}

int ftruncate(int a1, off_t a2)
{
  return MEMORY[0x1895FB480](*(void *)&a1, a2);
}

size_t fwrite(const void *__ptr, size_t __size, size_t __nitems, FILE *__stream)
{
  return MEMORY[0x1895FB4C8](__ptr, __size, __nitems, __stream);
}

char *__cdecl getenv(const char *a1)
{
  return (char *)MEMORY[0x1895FB538](a1);
}

uid_t geteuid(void)
{
  return MEMORY[0x1895FB540]();
}

int getfsstat(statfs *a1, int a2, int a3)
{
  return MEMORY[0x1895FB548](a1, *(void *)&a2, *(void *)&a3);
}

int gethostuuid(uuid_t a1, const timespec *a2)
{
  return MEMORY[0x1895FB598](a1, a2);
}

ssize_t getline(char **__linep, size_t *__linecapp, FILE *__stream)
{
  return MEMORY[0x1895FB5B8](__linep, __linecapp, __stream);
}

int getopt(int a1, char *const a2[], const char *a3)
{
  return MEMORY[0x1895FB5F8](*(void *)&a1, a2, a3);
}

int getpagesize(void)
{
  return MEMORY[0x1895FB608]();
}

pid_t getpid(void)
{
  return MEMORY[0x1895FB628]();
}

int gettimeofday(timeval *a1, void *a2)
{
  return MEMORY[0x1895FB6E0](a1, a2);
}

uint64_t kdebug_typefilter()
{
  return MEMORY[0x1895FB8D0]();
}

uint64_t kpc_get_actionid()
{
  return MEMORY[0x189612C58]();
}

uint64_t kpc_get_config()
{
  return MEMORY[0x189612C60]();
}

uint64_t kpc_get_config_count()
{
  return MEMORY[0x189612C68]();
}

uint64_t kpc_get_counter_count()
{
  return MEMORY[0x189612C70]();
}

uint64_t kpc_get_counting()
{
  return MEMORY[0x189612C78]();
}

uint64_t kpc_get_period()
{
  return MEMORY[0x189612C80]();
}

uint64_t kpc_get_thread_counting()
{
  return MEMORY[0x189612C88]();
}

uint64_t kpdecode_cursor_clearchunk()
{
  return MEMORY[0x189612DB8]();
}

uint64_t kpdecode_cursor_create()
{
  return MEMORY[0x189612DC0]();
}

uint64_t kpdecode_cursor_free()
{
  return MEMORY[0x189612DC8]();
}

uint64_t kpdecode_cursor_next_record()
{
  return MEMORY[0x189612DD0]();
}

uint64_t kpdecode_cursor_set_option()
{
  return MEMORY[0x189612DD8]();
}

uint64_t kpdecode_cursor_setchunk()
{
  return MEMORY[0x189612DE0]();
}

uint64_t kpdecode_record_free()
{
  return MEMORY[0x189612DE8]();
}

uint64_t kperf_action_count_get()
{
  return MEMORY[0x189612C98]();
}

uint64_t kperf_action_count_set()
{
  return MEMORY[0x189612CA0]();
}

uint64_t kperf_action_filter_get()
{
  return MEMORY[0x189612CA8]();
}

uint64_t kperf_action_samplers_get()
{
  return MEMORY[0x189612CB0]();
}

uint64_t kperf_action_samplers_set()
{
  return MEMORY[0x189612CB8]();
}

uint64_t kperf_action_userdata_get()
{
  return MEMORY[0x189612CC0]();
}

uint64_t kperf_kdebug_action_get()
{
  return MEMORY[0x189612CC8]();
}

uint64_t kperf_kdebug_action_set()
{
  return MEMORY[0x189612CD0]();
}

uint64_t kperf_kdebug_filter_add_desc()
{
  return MEMORY[0x189612CD8]();
}

uint64_t kperf_kdebug_filter_create()
{
  return MEMORY[0x189612CE0]();
}

uint64_t kperf_kdebug_filter_create_desc()
{
  return MEMORY[0x189612CE8]();
}

uint64_t kperf_kdebug_filter_destroy()
{
  return MEMORY[0x189612CF0]();
}

uint64_t kperf_kdebug_filter_get()
{
  return MEMORY[0x189612CF8]();
}

uint64_t kperf_kdebug_filter_set()
{
  return MEMORY[0x189612D00]();
}

uint64_t kperf_lazy_cpu_action_get()
{
  return MEMORY[0x189612D08]();
}

uint64_t kperf_lazy_cpu_action_set()
{
  return MEMORY[0x189612D10]();
}

uint64_t kperf_lazy_cpu_time_threshold_get()
{
  return MEMORY[0x189612D18]();
}

uint64_t kperf_lazy_cpu_time_threshold_set()
{
  return MEMORY[0x189612D20]();
}

uint64_t kperf_lazy_wait_action_get()
{
  return MEMORY[0x189612D28]();
}

uint64_t kperf_lazy_wait_action_set()
{
  return MEMORY[0x189612D30]();
}

uint64_t kperf_lazy_wait_time_threshold_get()
{
  return MEMORY[0x189612D38]();
}

uint64_t kperf_lazy_wait_time_threshold_set()
{
  return MEMORY[0x189612D40]();
}

uint64_t kperf_ns_to_ticks()
{
  return MEMORY[0x189612D48]();
}

uint64_t kperf_reset()
{
  return MEMORY[0x189612D50]();
}

uint64_t kperf_sample_get()
{
  return MEMORY[0x189612D58]();
}

uint64_t kperf_sample_set()
{
  return MEMORY[0x189612D60]();
}

uint64_t kperf_ticks_to_ns()
{
  return MEMORY[0x189612D68]();
}

uint64_t kperf_timer_action_get()
{
  return MEMORY[0x189612D70]();
}

uint64_t kperf_timer_action_set()
{
  return MEMORY[0x189612D78]();
}

uint64_t kperf_timer_count_get()
{
  return MEMORY[0x189612D80]();
}

uint64_t kperf_timer_count_set()
{
  return MEMORY[0x189612D88]();
}

uint64_t kperf_timer_lightweight_pet_set()
{
  return MEMORY[0x189612D90]();
}

uint64_t kperf_timer_period_get()
{
  return MEMORY[0x189612D98]();
}

uint64_t kperf_timer_period_set()
{
  return MEMORY[0x189612DA0]();
}

uint64_t kperf_timer_pet_get()
{
  return MEMORY[0x189612DA8]();
}

uint64_t kperf_timer_pet_set()
{
  return MEMORY[0x189612DB0]();
}

tm *__cdecl localtime_r(const time_t *a1, tm *a2)
{
  return (tm *)MEMORY[0x1895FBA20](a1, a2);
}

off_t lseek(int a1, off_t a2, int a3)
{
  return MEMORY[0x1895FBA80](*(void *)&a1, a2, *(void *)&a3);
}

uint64_t mach_absolute_time(void)
{
  return MEMORY[0x1895FBA98]();
}

uint64_t mach_continuous_time(void)
{
  return MEMORY[0x1895FBAB0]();
}

uint64_t mach_get_times()
{
  return MEMORY[0x1895FBAC8]();
}

kern_return_t mach_timebase_info(mach_timebase_info_t info)
{
  return MEMORY[0x1895FBBF8](info);
}

int madvise(void *a1, size_t a2, int a3)
{
  return MEMORY[0x1895FBC80](a1, a2, *(void *)&a3);
}

void *__cdecl malloc(size_t __size)
{
  return (void *)MEMORY[0x1895FBC88](__size);
}

size_t malloc_size(const void *ptr)
{
  return MEMORY[0x1895FBCE0](ptr);
}

int memcmp(const void *__s1, const void *__s2, size_t __n)
{
  return MEMORY[0x1895FBE08](__s1, __s2, __n);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x1895FBE18](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x1895FBE30](__dst, __src, __len);
}

void *__cdecl memset(void *__b, int __c, size_t __len)
{
  return (void *)MEMORY[0x1895FBE48](__b, *(void *)&__c, __len);
}

int mkstemp(char *a1)
{
  return MEMORY[0x1895FBF38](a1);
}

void *__cdecl mmap(void *a1, size_t a2, int a3, int a4, int a5, off_t a6)
{
  return (void *)MEMORY[0x1895FBF70](a1, a2, *(void *)&a3, *(void *)&a4, *(void *)&a5, a6);
}

double modf(double a1, double *a2)
{
  return result;
}

int munmap(void *a1, size_t a2)
{
  return MEMORY[0x1895FBF98](a1, a2);
}

uint32_t notify_post(const char *name)
{
  return MEMORY[0x1895FC1B0](name);
}

uint32_t notify_register_dispatch( const char *name, int *out_token, dispatch_queue_t queue, notify_handler_t handler)
{
  return MEMORY[0x1895FC1C0](name, out_token, queue, handler);
}

id objc_alloc(Class a1)
{
  return (id)MEMORY[0x1896165B0](a1);
}

id objc_allocWithZone(Class a1)
{
  return (id)MEMORY[0x1896165B8](a1);
}

uint64_t objc_alloc_init()
{
  return MEMORY[0x1896165C0]();
}

id objc_autorelease(id a1)
{
  return (id)MEMORY[0x1896165D8](a1);
}

void objc_autoreleasePoolPop(void *context)
{
}

void *objc_autoreleasePoolPush(void)
{
  return (void *)MEMORY[0x1896165E8]();
}

id objc_autoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x1896165F0](a1);
}

id objc_begin_catch(void *exc_buf)
{
  return (id)MEMORY[0x1896165F8](exc_buf);
}

void objc_end_catch(void)
{
}

void objc_enumerationMutation(id obj)
{
}

id objc_msgSend(id a1, SEL a2, ...)
{
  return (id)MEMORY[0x189616718](a1, a2);
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return (id)MEMORY[0x189616728](a1, a2);
}

uint64_t objc_opt_class()
{
  return MEMORY[0x189616730]();
}

uint64_t objc_opt_isKindOfClass()
{
  return MEMORY[0x189616738]();
}

uint64_t objc_opt_respondsToSelector()
{
  return MEMORY[0x189616748]();
}

uint64_t objc_opt_self()
{
  return MEMORY[0x189616750]();
}

void objc_release(id a1)
{
}

id objc_retain(id a1)
{
  return (id)MEMORY[0x189616818](a1);
}

id objc_retainAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x189616830](a1);
}

void objc_setProperty_nonatomic(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
}

int open(const char *a1, int a2, ...)
{
  return MEMORY[0x1895FC248](a1, *(void *)&a2);
}

FILE *__cdecl open_memstream(char **__bufp, size_t *__sizep)
{
  return (FILE *)MEMORY[0x1895FC260](__bufp, __sizep);
}

DIR *__cdecl opendir(const char *a1)
{
  return (DIR *)MEMORY[0x1895FC278](a1);
}

os_log_t os_log_create(const char *subsystem, const char *category)
{
  return (os_log_t)MEMORY[0x1895FC440](subsystem, category);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x1895FC470](oslog, type);
}

void os_unfair_lock_lock(os_unfair_lock_t lock)
{
}

void os_unfair_lock_unlock(os_unfair_lock_t lock)
{
}

uint64_t os_variant_has_internal_content()
{
  return MEMORY[0x1895FC6C0]();
}

void perror(const char *a1)
{
}

int pipe(int a1[2])
{
  return MEMORY[0x1895FC7B0](a1);
}

int posix_spawn( pid_t *a1, const char *a2, const posix_spawn_file_actions_t *a3, const posix_spawnattr_t *a4, char *const __argv[], char *const __envp[])
{
  return MEMORY[0x1895FC7E0](a1, a2, a3, a4, __argv, __envp);
}

int posix_spawn_file_actions_addclose(posix_spawn_file_actions_t *a1, int a2)
{
  return MEMORY[0x1895FC7E8](a1, *(void *)&a2);
}

int posix_spawn_file_actions_adddup2(posix_spawn_file_actions_t *a1, int a2, int a3)
{
  return MEMORY[0x1895FC7F0](a1, *(void *)&a2, *(void *)&a3);
}

int posix_spawn_file_actions_destroy(posix_spawn_file_actions_t *a1)
{
  return MEMORY[0x1895FC808](a1);
}

int posix_spawn_file_actions_init(posix_spawn_file_actions_t *a1)
{
  return MEMORY[0x1895FC810](a1);
}

ssize_t pread(int __fd, void *__buf, size_t __nbyte, off_t a4)
{
  return MEMORY[0x1895FC880](*(void *)&__fd, __buf, __nbyte, a4);
}

int printf(const char *a1, ...)
{
  return MEMORY[0x1895FC890](a1);
}

int proc_listpids(uint32_t type, uint32_t typeinfo, void *buffer, int buffersize)
{
  return MEMORY[0x1895FC8C0](*(void *)&type, *(void *)&typeinfo, buffer, *(void *)&buffersize);
}

int proc_name(int pid, void *buffer, uint32_t buffersize)
{
  return MEMORY[0x1895FC8C8](*(void *)&pid, buffer, *(void *)&buffersize);
}

int proc_pid_rusage(int pid, int flavor, rusage_info_t *buffer)
{
  return MEMORY[0x1895FC8D0](*(void *)&pid, *(void *)&flavor, buffer);
}

int pthread_cond_signal(pthread_cond_t *a1)
{
  return MEMORY[0x1895FC9B0](a1);
}

int pthread_cond_wait(pthread_cond_t *a1, pthread_mutex_t *a2)
{
  return MEMORY[0x1895FC9C8](a1, a2);
}

int pthread_create(pthread_t *a1, const pthread_attr_t *a2, void *(__cdecl *a3)(void *), void *a4)
{
  return MEMORY[0x1895FC9D8](a1, a2, a3, a4);
}

int pthread_join(pthread_t a1, void **a2)
{
  return MEMORY[0x1895FCA58](a1, a2);
}

int pthread_mutex_init(pthread_mutex_t *a1, const pthread_mutexattr_t *a2)
{
  return MEMORY[0x1895FCA90](a1, a2);
}

int pthread_mutex_lock(pthread_mutex_t *a1)
{
  return MEMORY[0x1895FCA98](a1);
}

int pthread_mutex_unlock(pthread_mutex_t *a1)
{
  return MEMORY[0x1895FCAA8](a1);
}

int puts(const char *a1)
{
  return MEMORY[0x1895FCB98](a1);
}

ssize_t pwrite(int __fd, const void *__buf, size_t __nbyte, off_t a4)
{
  return MEMORY[0x1895FCBA0](*(void *)&__fd, __buf, __nbyte, a4);
}

void qsort_b(void *__base, size_t __nel, size_t __width, void *__compar)
{
}

dirent *__cdecl readdir(DIR *a1)
{
  return (dirent *)MEMORY[0x1895FCC40](a1);
}

void *__cdecl realloc(void *__ptr, size_t __size)
{
  return (void *)MEMORY[0x1895FCC68](__ptr, __size);
}

int rename(const char *__old, const char *__new)
{
  return MEMORY[0x1895FCD50](__old, __new);
}

void (__cdecl *__cdecl signal(int a1, void (__cdecl *a2)(int)))(int)
{
  return (void (__cdecl *)(int))MEMORY[0x1895FCF50](*(void *)&a1, a2);
}

int snprintf(char *__str, size_t __size, const char *__format, ...)
{
  return MEMORY[0x1895FCF90](__str, __size, __format);
}

int sscanf(const char *a1, const char *a2, ...)
{
  return MEMORY[0x1895FCFD0](a1, a2);
}

uint64_t stackshot_capture_with_config()
{
  return MEMORY[0x1895FCFE0]();
}

uint64_t stackshot_config_create()
{
  return MEMORY[0x1895FCFE8]();
}

uint64_t stackshot_config_dealloc()
{
  return MEMORY[0x1895FCFF0]();
}

uint64_t stackshot_config_get_stackshot_buffer()
{
  return MEMORY[0x1895FCFF8]();
}

uint64_t stackshot_config_get_stackshot_size()
{
  return MEMORY[0x1895FD000]();
}

uint64_t stackshot_config_set_flags()
{
  return MEMORY[0x1895FD008]();
}

int stat(const char *a1, stat *a2)
{
  return MEMORY[0x1895FD010](a1, a2);
}

int statfs(const char *a1, statfs *a2)
{
  return MEMORY[0x1895FD018](a1, a2);
}

char *__cdecl strchr(const char *__s, int __c)
{
  return (char *)MEMORY[0x1895FD048](__s, *(void *)&__c);
}

int strcmp(const char *__s1, const char *__s2)
{
  return MEMORY[0x1895FD050](__s1, __s2);
}

char *__cdecl strdup(const char *__s1)
{
  return (char *)MEMORY[0x1895FD078](__s1);
}

char *__cdecl strerror(int __errnum)
{
  return (char *)MEMORY[0x1895FD080](*(void *)&__errnum);
}

size_t strftime(char *a1, size_t a2, const char *a3, const tm *a4)
{
  return MEMORY[0x1895FD090](a1, a2, a3, a4);
}

size_t strlcpy(char *__dst, const char *__source, size_t __size)
{
  return MEMORY[0x1895FD0B0](__dst, __source, __size);
}

size_t strlen(const char *__s)
{
  return MEMORY[0x1895FD0B8](__s);
}

int strncmp(const char *__s1, const char *__s2, size_t __n)
{
  return MEMORY[0x1895FD0E8](__s1, __s2, __n);
}

char *__cdecl strndup(const char *__s1, size_t __n)
{
  return (char *)MEMORY[0x1895FD0F8](__s1, __n);
}

size_t strnlen(const char *__s1, size_t __n)
{
  return MEMORY[0x1895FD100](__s1, __n);
}

char *__cdecl strnstr(const char *__big, const char *__little, size_t __len)
{
  return (char *)MEMORY[0x1895FD108](__big, __little, __len);
}

char *__cdecl strrchr(const char *__s, int __c)
{
  return (char *)MEMORY[0x1895FD120](__s, *(void *)&__c);
}

char *__cdecl strsep(char **__stringp, const char *__delim)
{
  return (char *)MEMORY[0x1895FD128](__stringp, __delim);
}

char *__cdecl strsignal(int __sig)
{
  return (char *)MEMORY[0x1895FD130](*(void *)&__sig);
}

int strsnvisx(char *a1, size_t a2, const char *a3, size_t a4, int a5, const char *a6)
{
  return MEMORY[0x1895FD138](a1, a2, a3, a4, *(void *)&a5, a6);
}

uint64_t strtol(const char *__str, char **__endptr, int __base)
{
  return MEMORY[0x1895FD180](__str, __endptr, *(void *)&__base);
}

unint64_t strtoul(const char *__str, char **__endptr, int __base)
{
  return MEMORY[0x1895FD1B8](__str, __endptr, *(void *)&__base);
}

unint64_t strtoull(const char *__str, char **__endptr, int __base)
{
  return MEMORY[0x1895FD1C8](__str, __endptr, *(void *)&__base);
}

uint64_t swift_allocBox()
{
  return MEMORY[0x18961B0A0]();
}

uint64_t swift_allocError()
{
  return MEMORY[0x18961B0A8]();
}

uint64_t swift_allocObject()
{
  return MEMORY[0x18961B0B0]();
}

uint64_t swift_allocateGenericClassMetadata()
{
  return MEMORY[0x18961B0B8]();
}

uint64_t swift_arrayDestroy()
{
  return MEMORY[0x18961B0D8]();
}

uint64_t swift_arrayInitWithCopy()
{
  return MEMORY[0x18961B0E0]();
}

uint64_t swift_arrayInitWithTakeBackToFront()
{
  return MEMORY[0x18961B0E8]();
}

uint64_t swift_arrayInitWithTakeFrontToBack()
{
  return MEMORY[0x18961B0F0]();
}

uint64_t swift_beginAccess()
{
  return MEMORY[0x18961B0F8]();
}

uint64_t swift_bridgeObjectRelease()
{
  return MEMORY[0x18961B108]();
}

uint64_t swift_bridgeObjectRelease_n()
{
  return MEMORY[0x18961B110]();
}

uint64_t swift_bridgeObjectRetain()
{
  return MEMORY[0x18961B118]();
}

uint64_t swift_bridgeObjectRetain_n()
{
  return MEMORY[0x18961B120]();
}

uint64_t swift_checkMetadataState()
{
  return MEMORY[0x18961B128]();
}

uint64_t swift_deallocClassInstance()
{
  return MEMORY[0x18961B150]();
}

uint64_t swift_deallocObject()
{
  return MEMORY[0x18961B158]();
}

uint64_t swift_deallocPartialClassInstance()
{
  return MEMORY[0x18961B160]();
}

uint64_t swift_dynamicCast()
{
  return MEMORY[0x18961B180]();
}

uint64_t swift_dynamicCastClass()
{
  return MEMORY[0x18961B188]();
}

uint64_t swift_dynamicCastObjCClass()
{
  return MEMORY[0x18961B1A8]();
}

uint64_t swift_dynamicCastTypeToObjCProtocolConditional()
{
  return MEMORY[0x18961B1C0]();
}

uint64_t swift_endAccess()
{
  return MEMORY[0x18961B1D8]();
}

uint64_t swift_errorRelease()
{
  return MEMORY[0x18961B1E8]();
}

uint64_t swift_errorRetain()
{
  return MEMORY[0x18961B1F0]();
}

uint64_t swift_getAssociatedConformanceWitness()
{
  return MEMORY[0x18961B218]();
}

uint64_t swift_getAssociatedTypeWitness()
{
  return MEMORY[0x18961B220]();
}

uint64_t swift_getEnumCaseMultiPayload()
{
  return MEMORY[0x18961B250]();
}

uint64_t swift_getEnumTagSinglePayloadGeneric()
{
  return MEMORY[0x18961B258]();
}

uint64_t swift_getErrorValue()
{
  return MEMORY[0x18961B260]();
}

uint64_t swift_getForeignTypeMetadata()
{
  return MEMORY[0x18961B270]();
}

uint64_t swift_getGenericMetadata()
{
  return MEMORY[0x18961B290]();
}

uint64_t swift_getObjCClassFromMetadata()
{
  return MEMORY[0x18961B2A8]();
}

uint64_t swift_getObjCClassMetadata()
{
  return MEMORY[0x18961B2B8]();
}

uint64_t swift_getObjectType()
{
  return MEMORY[0x18961B2C0]();
}

uint64_t swift_getSingletonMetadata()
{
  return MEMORY[0x18961B2D0]();
}

uint64_t swift_getTupleTypeLayout2()
{
  return MEMORY[0x18961B2E0]();
}

uint64_t swift_getTupleTypeMetadata2()
{
  return MEMORY[0x18961B2F8]();
}

uint64_t swift_getTypeByMangledNameInContext2()
{
  return MEMORY[0x18961B310]();
}

uint64_t swift_getTypeByMangledNameInContextInMetadataState2()
{
  return MEMORY[0x18961B318]();
}

uint64_t swift_getWitnessTable()
{
  return MEMORY[0x18961B328]();
}

uint64_t swift_initClassMetadata2()
{
  return MEMORY[0x18961B330]();
}

uint64_t swift_initEnumMetadataMultiPayload()
{
  return MEMORY[0x18961B338]();
}

uint64_t swift_initStackObject()
{
  return MEMORY[0x18961B348]();
}

uint64_t swift_initStructMetadata()
{
  return MEMORY[0x18961B358]();
}

uint64_t swift_isEscapingClosureAtFileLocation()
{
  return MEMORY[0x18961B368]();
}

uint64_t swift_isUniquelyReferenced_nonNull_native()
{
  return MEMORY[0x18961B390]();
}

uint64_t swift_lookUpClassMethod()
{
  return MEMORY[0x18961B3A0]();
}

uint64_t swift_once()
{
  return MEMORY[0x18961B3B8]();
}

uint64_t swift_projectBox()
{
  return MEMORY[0x18961B3C0]();
}

uint64_t swift_release()
{
  return MEMORY[0x18961B3C8]();
}

uint64_t swift_release_n()
{
  return MEMORY[0x18961B3D0]();
}

uint64_t swift_retain()
{
  return MEMORY[0x18961B3E0]();
}

uint64_t swift_retain_n()
{
  return MEMORY[0x18961B3E8]();
}

uint64_t swift_setDeallocating()
{
  return MEMORY[0x18961B408]();
}

uint64_t swift_slowAlloc()
{
  return MEMORY[0x18961B410]();
}

uint64_t swift_slowDealloc()
{
  return MEMORY[0x18961B418]();
}

uint64_t swift_stdlib_isStackAllocationSafe()
{
  return MEMORY[0x18961B420]();
}

uint64_t swift_storeEnumTagMultiPayload()
{
  return MEMORY[0x18961B430]();
}

uint64_t swift_storeEnumTagSinglePayloadGeneric()
{
  return MEMORY[0x18961B438]();
}

uint64_t swift_unknownObjectRelease()
{
  return MEMORY[0x18961B458]();
}

uint64_t swift_unknownObjectRelease_n()
{
  return MEMORY[0x18961B460]();
}

uint64_t swift_unknownObjectRetain()
{
  return MEMORY[0x18961B468]();
}

uint64_t swift_unknownObjectRetain_n()
{
  return MEMORY[0x18961B470]();
}

uint64_t swift_updateClassMetadata2()
{
  return MEMORY[0x18961B4D0]();
}

uint64_t swift_willThrow()
{
  return MEMORY[0x18961B518]();
}

uint64_t swift_willThrowTypedImpl()
{
  return MEMORY[0x18961B520]();
}

int sysctl(int *a1, u_int a2, void *a3, size_t *a4, void *a5, size_t a6)
{
  return MEMORY[0x1895FD2B0](a1, *(void *)&a2, a3, a4, a5, a6);
}

int sysctlbyname(const char *a1, void *a2, size_t *a3, void *a4, size_t a5)
{
  return MEMORY[0x1895FD2B8](a1, a2, a3, a4, a5);
}

int unlink(const char *a1)
{
  return MEMORY[0x1895FD468](a1);
}

int uuid_compare(const uuid_t uu1, const uuid_t uu2)
{
  return MEMORY[0x1895FD4B8](uu1, uu2);
}

void uuid_copy(uuid_t dst, const uuid_t src)
{
}

void uuid_generate_random(uuid_t out)
{
}

int uuid_is_null(const uuid_t uu)
{
  return MEMORY[0x1895FD4E0](uu);
}

int uuid_parse(const uuid_string_t in, uuid_t uu)
{
  return MEMORY[0x1895FD4E8](in, uu);
}

void uuid_unparse(const uuid_t uu, uuid_string_t out)
{
}

void uuid_unparse_upper(const uuid_t uu, uuid_string_t out)
{
}

void *__cdecl valloc(size_t a1)
{
  return (void *)MEMORY[0x1895FD508](a1);
}

int vasprintf(char **a1, const char *a2, va_list a3)
{
  return MEMORY[0x1895FD510](a1, a2, a3);
}

pid_t waitpid(pid_t a1, int *a2, int a3)
{
  return MEMORY[0x1895FD638](*(void *)&a1, a2, *(void *)&a3);
}

ssize_t write(int __fd, const void *__buf, size_t __nbyte)
{
  return MEMORY[0x1895FD750](*(void *)&__fd, __buf, __nbyte);
}