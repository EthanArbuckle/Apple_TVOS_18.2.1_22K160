uint64_t ktrace_only_do_time_sensitive_postprocess(uint64_t a1)
{
  return HIBYTE(*(unsigned __int16 *)(a1 + 224)) & 1;
}

uint64_t ktrace_set_only_do_time_sensitive_postprocess(uint64_t result, int a2)
{
  if (a2) {
    __int16 v2 = 256;
  }
  else {
    __int16 v2 = 0;
  }
  *(_WORD *)(result + 224) = *(_WORD *)(result + 224) & 0xFEFF | v2;
  return result;
}

void *ktrace_postprocessing_set_completed_handler(uint64_t *a1, const void *a2)
{
  uint64_t v3 = *a1;
  if ((*(_WORD *)(v3 + 224) & 3) != 0) {
    ktrace_postprocessing_set_completed_handler_cold_1();
  }
  v5 = ktrace_callback_list_add(v3, (uint64_t)(a1 + 2));
  v5[4] = 5;
  result = _Block_copy(a2);
  *((void *)v5 + 3) = result;
  _DWORD *v5 = 2;
  return result;
}

uint64_t ktrace_postprocessing_get_processing_queue(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t ktrace_postprocess_file_internal(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  int v10 = dup(*(_DWORD *)(a2 + 196));
  if (v10 < 0) {
    return *__error();
  }
  int v11 = v10;
  uint64_t v12 = ktrace_file_open_fd(v10, 0);
  if (v12)
  {
    uint64_t v13 = v12;
    v14 = dispatch_semaphore_create(0LL);
    v15 = (dispatch_object_s *)ktrace_session_create_with_flags(0);
    *(_OWORD *)object = 0u;
    __int128 v54 = 0u;
    uint64_t v21 = ktrace_set_ktrace_file((uint64_t)v15, v13, 1, v16, v17, v18, v19, v20);
    if (!(_DWORD)v21)
    {
      if (!v15) {
        ktrace_postprocess_file_internal_cold_1();
      }
      *(_BYTE *)(*((void *)v15 + 37) + 96LL) &= ~1u;
      if (a1)
      {
        uint64_t v22 = *(void *)(a1 + 72);
        if (v22) {
          (*(void (**)(uint64_t, dispatch_object_s *))(v22 + 16))(v22, v15);
        }
        [*(id *)(a1 + 600) configurePostprocessingWithSession:v15];
      }

      object[0] = v15;
      object[1] = dispatch_queue_create("com.apple.libktrace.postprocessing", 0LL);
      if (!a3) {
        ktrace_catalog_postprocess_file((uint64_t)v15, a2, (uint64_t *)object, v23, v24, v25, v26, v27);
      }
      ktrace_uuid_map_postprocess_file((uint64_t)v15, a2, a3, a4, (uint64_t)object);
      aBlock[0] = MEMORY[0x1895F87A8];
      aBlock[1] = 3221225472LL;
      aBlock[2] = __ktrace_postprocess_file_internal_block_invoke;
      aBlock[3] = &unk_189F54DA0;
      aBlock[5] = a5;
      aBlock[6] = v15;
      aBlock[4] = v14;
      ktrace_set_completion_handler((uint64_t)v15, aBlock);
      if (!a1 || (unsigned __int8 v28 = atomic_load((unsigned __int8 *)(a1 + 158)), (v28 & 1) == 0))
      {
        ktrace_log_init();
        v29 = (os_log_s *)ktrace_log;
        if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_DEBUG)) {
          ktrace_postprocess_file_internal_cold_4(v29, v30, v31, v32, v33, v34, v35, v36);
        }
        uint64_t v37 = ktrace_start((unint64_t)v15, (dispatch_queue_s *)object[1]);
        if ((_DWORD)v37)
        {
          uint64_t v21 = v37;
          *__error() = v37;
          int v38 = *__error();
          ktrace_log_init();
          v39 = (os_log_s *)ktrace_log;
          if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
            ktrace_postprocess_file_internal_cold_3(v38, v39);
          }
          *__error() = v38;
          goto LABEL_31;
        }

        if (a1) {
          *(void *)(a1 + 80) = v15;
        }
        dispatch_semaphore_wait(v14, 0xFFFFFFFFFFFFFFFFLL);
        ktrace_log_init();
        v40 = (os_log_s *)ktrace_log;
        if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_DEBUG)) {
          ktrace_postprocess_file_internal_cold_2(v40, v41, v42, v43, v44, v45, v46, v47);
        }
        if ((int)v54 >= 1)
        {
          uint64_t v48 = 0LL;
          v49 = (uint64_t *)(*((void *)&v54 + 1) + 24LL);
          do
          {
            uint64_t v50 = *v49;
            v49 += 4;
            (*(void (**)(void))(v50 + 16))();
            ++v48;
          }

          while (v48 < (int)v54);
        }

        if (a1) {
          [*(id *)(a1 + 600) postprocessingCompleteWithFile:a2];
        }
      }

      uint64_t v21 = 0LL;
    }

LABEL_31:
    ktrace_session_destroy((uint64_t)v15);
    dispatch_release(v14);
    ktrace_callback_list_reset((int *)&v54);
    dispatch_release(object[1]);
    return v21;
  }

  uint64_t v21 = *__error();
  close(v11);
  return v21;
}

          v32[2] = v39;
          v32[3] = v40;
          v32[4] = v41;
          *(_OWORD *)cf = v42;
          v32[0] = v37;
          v32[1] = v38;
          if ((void)v42) {
            CFRetain((CFTypeRef)v42);
          }
          ktrace_address_space_append(v3, (uint64_t)v32);
          SymbolOwner::~SymbolOwner((SymbolOwner *)v32);
          goto LABEL_36;
        }

        uint64_t v24 = (os_log_s *)ktrace_log;
        if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
        {
          uint64_t v25 = uuid_string(*v6, v6[1]);
          ___Z31ktrace_uuid_map_update_internalP15ktrace_uuid_mapP14ktrace_sessionP12ktrace_pointbbU13block_pointerFv12PrepassOpRefE_block_invoke_2_cold_1( (uint64_t)v25,  (uint64_t)v6,  (uint64_t)v44,  v24);
        }

        ktrace_address_space_delete(v3, *v6, v6[1], v6[6]);
        v6 = (uint64_t *)ktrace_address_space_symbol_owner_for_address(v3, v40, v26);
      }
    }

    if (!v6) {
      goto LABEL_31;
    }
    goto LABEL_27;
  }

                    uint64_t v24 = 0;
                    goto LABEL_32;
                  }

                  if (*(void *)a1) {
                    fprintf(*(FILE **)a1, "failed to parse output from command: %s\n", v13);
                  }
                  if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
                    ktrace_find_executable();
                  }
                }
              }

              else
              {
                uint64_t v37 = *(FILE **)a1;
                if (*(void *)a1)
                {
                  int v38 = __error();
                  v39 = strerror(*v38);
                  fprintf(v37, "waitpid failed! %s\n", v39);
                }

                v40 = (os_log_s *)ktrace_log;
                if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_FAULT)) {
                  ktrace_find_executable(v40);
                }
              }
            }

            else
            {
              uint64_t v33 = *(FILE **)a1;
              if (*(void *)a1)
              {
                uint64_t v34 = ferror(v23);
                uint64_t v35 = strerror(v34);
                fprintf(v33, "error reading from pipe! %s\n", v35);
              }

              uint64_t v36 = (os_log_s *)ktrace_log;
              if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_FAULT)) {
                ktrace_find_executable(v23, v36);
              }
            }

            uint64_t v21 = 0LL;
            goto LABEL_31;
          }

          if (*(void *)a1) {
            fwrite("fdopen failed!\n", 0xFuLL, 1uLL, *(FILE **)a1);
          }
          if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_FAULT)) {
            ktrace_find_executable();
          }
        }
      }

      uint64_t v21 = 0LL;
      uint64_t v22 = 0LL;
      uint64_t v23 = 0LL;
      goto LABEL_31;
    }
  }

  uint64_t v23 = sub_186BF8278(0x6E6564646948LL, 0xE600000000000000LL);
  if ((v24 & 1) == 0) {
    goto LABEL_34;
  }
  sub_186BFB82C(*(void *)(v46 + 56) + 32 * v23, (uint64_t)&v48);
  uint64_t v16 = v46;
LABEL_35:
  uint64_t v45 = v16;
  if (*(void *)(v46 + 16) && (uint64_t v25 = sub_186BF8278(0x736E6F6974704FLL, 0xE700000000000000LL), (v26 & 1) != 0))
  {
    sub_186BFB82C(*(void *)(v46 + 56) + 32 * v25, (uint64_t)&v48);
  }

  else
  {
    uint64_t v48 = 0u;
    v49 = 0u;
  }

  swift_bridgeObjectRelease();
  if (*((void *)&v49 + 1))
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_18C6A2360);
    result = swift_dynamicCast();
    if ((result & 1) != 0)
    {
      uint64_t v44 = *(void *)(v46 + 16);
      if (!v44)
      {
        result = swift_bridgeObjectRelease();
        uint64_t v19 = (void *)MEMORY[0x18961AFE8];
        goto LABEL_19;
      }

      swift_bridgeObjectRetain();
      uint64_t v27 = v46;
      unsigned __int8 v28 = 0LL;
      uint64_t v19 = (void *)MEMORY[0x18961AFE8];
      while (1)
      {
        v29 = *(void *)(v27 + 8 * v28 + 32);
        if (*(void *)(v29 + 16))
        {
          uint64_t v30 = sub_186BF8278(0x6E6F6974704FLL, 0xE600000000000000LL);
          uint64_t v27 = v46;
          if ((v31 & 1) != 0)
          {
            sub_186BFB82C(*(void *)(v29 + 56) + 32 * v30, (uint64_t)&v48);
            if ((swift_dynamicCast() & 1) != 0)
            {
              if (*(void *)(v29 + 16)
                && (uint64_t v32 = sub_186BF8278(0x7470697263736544LL, 0xEB000000006E6F69LL), (v33 & 1) != 0)
                && (sub_186BFB82C(*(void *)(v29 + 56) + 32 * v32, (uint64_t)&v48), (swift_dynamicCast() & 1) != 0))
              {
                if (*(void *)(v29 + 16))
                {
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  uint64_t v34 = sub_186BF8278(0xD000000000000011LL, 0x8000000186C65770LL);
                  if ((v35 & 1) != 0
                    && (sub_186BFB82C(*(void *)(v29 + 56) + 32 * v34, (uint64_t)&v48),
                        __swift_instantiateConcreteTypeFromMangledName(&qword_18C6A21A8),
                        (swift_dynamicCast() & 1) != 0))
                  {
                    uint64_t v36 = v47;
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    uint64_t v37 = v46;
                  }

                  else
                  {
                    uint64_t v36 = v47;
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    uint64_t v37 = MEMORY[0x18961AFE8];
                  }
                }

                else
                {
                  uint64_t v37 = MEMORY[0x18961AFE8];
                  uint64_t v36 = v47;
                }

                if (v36)
                {
                  uint64_t v43 = v37;
                  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                    uint64_t v19 = sub_186BF76E4(0LL, v19[2] + 1LL, 1, v19);
                  }
                  v39 = v19[2];
                  int v38 = v19[3];
                  v40 = v39 + 1;
                  uint64_t v27 = v46;
                  if (v39 >= v38 >> 1)
                  {
                    uint64_t v42 = sub_186BF76E4((void *)(v38 > 1), v39 + 1, 1, v19);
                    v40 = v39 + 1;
                    uint64_t v27 = v46;
                    uint64_t v19 = v42;
                  }

                  v19[2] = v40;
                  uint64_t v41 = &v19[5 * v39];
                  v41[4] = v46;
                  v41[5] = v47;
                  v41[6] = v46;
                  v41[7] = v47;
                  v41[8] = v43;
                  goto LABEL_45;
                }
              }

              else
              {
                swift_bridgeObjectRelease();
              }
            }

            uint64_t v27 = v46;
          }
        }

uint64_t __ktrace_postprocess_file_internal_block_invoke(uint64_t a1)
{
  if (*(void *)(a1 + 40)) {
    **(void **)(a1 + 40) = ktrace_get_current_timestamp(*(void *)(a1 + 48));
  }
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

uint64_t ktrace_postprocess_file(uint64_t a1)
{
  return ktrace_postprocess_file_internal(0LL, a1, 0LL, 2, 0LL);
}

void OUTLINED_FUNCTION_0( void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

  ;
}

void ktrace_client_destroy()
{
}

void ktrace_client_start_tracing()
{
}

void ktrace_client_stop_tracing()
{
}

void ktrace_client_get_subfile()
{
}

void ktrace_client_get_live_kernel_map()
{
}

void ktrace_client_copy_dscsym()
{
}

void ktrace_client_get_mounts()
{
}

void ktrace_client_get_dscsym()
{
}

void ktrace_client_get_file_info()
{
}

uint64_t ktrace_client_open_bridge()
{
  *__error() = 45;
  return 0LL;
}

uint64_t deserializeSignpostSpecs(uint64_t a1)
{
  v8[1] = *MEMORY[0x1895F89C0];
  uint64_t v2 = [MEMORY[0x189603F18] arrayWithContentsOfFile:a1];
  if (!v2)
  {
    uint64_t v3 = [MEMORY[0x189603F68] dictionaryWithContentsOfFile:a1];
    if (v3)
    {
      v8[0] = v3;
      v4 = v8;
    }

    else
    {
      uint64_t v5 = [MEMORY[0x189603F48] dataWithContentsOfFile:a1];
      if (!v5) {
        return 0LL;
      }
      uint64_t v2 = [MEMORY[0x1896078D8] JSONObjectWithData:v5 options:0 error:0];
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0) {
        return v2;
      }
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0) {
        return 0LL;
      }
      uint64_t v7 = v2;
      v4 = &v7;
    }

    return [MEMORY[0x189603F18] arrayWithObjects:v4 count:1];
  }

  return v2;
}

uint64_t signpostSpecPathsForURL(void *a1)
{
  v23[1] = *MEMORY[0x1895F89C0];
  if (!a1) {
    return MEMORY[0x189604A58];
  }
  char v21 = 0;
  uint64_t v2 = (void *)[MEMORY[0x1896078A8] defaultManager];
  uint64_t v3 = [a1 path];
  if (!v21)
  {
    v23[0] = v3;
    return [MEMORY[0x189603F18] arrayWithObjects:v23 count:1];
  }

  uint64_t v20 = 0LL;
  v4 = (void *)[v2 contentsOfDirectoryAtURL:a1 includingPropertiesForKeys:0 options:0 error:&v20];
  if (!v4 || v20 != 0) {
    return MEMORY[0x189604A58];
  }
  v6 = v4;
  if (![v4 count]) {
    return MEMORY[0x189604A58];
  }
  uint64_t v7 = (void *)[MEMORY[0x189603FA8] array];
  __int128 v16 = 0u;
  __int128 v17 = 0u;
  __int128 v18 = 0u;
  __int128 v19 = 0u;
  uint64_t v8 = [v6 countByEnumeratingWithState:&v16 objects:v22 count:16];
  if (v8)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)v17;
    do
    {
      for (uint64_t i = 0LL; i != v9; ++i)
      {
        if (*(void *)v17 != v10) {
          objc_enumerationMutation(v6);
        }
        uint64_t v12 = *(void **)(*((void *)&v16 + 1) + 8 * i);
        uint64_t v13 = (void *)[v12 pathExtension];
        if (([v13 isEqualToString:@"plist"] & 1) != 0
          || [v13 isEqualToString:@"json"])
        {
          v14 = (void *)[MEMORY[0x189604030] URLByResolvingAliasFileAtURL:v12 options:768 error:0];
          if (v14) {
            objc_msgSend(v7, "addObject:", objc_msgSend(v14, "path"));
          }
        }
      }

      uint64_t v9 = [v6 countByEnumeratingWithState:&v16 objects:v22 count:16];
    }

    while (v9);
  }

  return (uint64_t)v7;
}

void *ktariadne_append_live_signpost_specs(uint64_t a1)
{
  uint64_t v18 = *MEMORY[0x1895F89C0];
  uint64_t v2 = (void *)[MEMORY[0x189603FC8] dictionary];
  __int128 v13 = 0u;
  __int128 v14 = 0u;
  __int128 v15 = 0u;
  __int128 v16 = 0u;
  uint64_t v3 = (void *)signpostSpecPathsForURL((void *)[MEMORY[0x189604030] fileURLWithPath:@"/AppleInternal/Library/Ariadne/Plists/"]);
  uint64_t v4 = [v3 countByEnumeratingWithState:&v13 objects:v17 count:16];
  if (v4)
  {
    uint64_t v5 = v4;
    uint64_t v6 = *(void *)v14;
    do
    {
      for (uint64_t i = 0LL; i != v5; ++i)
      {
        if (*(void *)v14 != v6) {
          objc_enumerationMutation(v3);
        }
        uint64_t v8 = *(void *)(*((void *)&v13 + 1) + 8 * i);
        uint64_t v9 = deserializeSignpostSpecs(v8);
        objc_msgSend(v2, "setObject:forKeyedSubscript:", v9, v8, (void)v13);
      }

      uint64_t v5 = [v3 countByEnumeratingWithState:&v13 objects:v17 count:16];
    }

    while (v5);
  }

  uint64_t v10 = (void *)objc_msgSend( MEMORY[0x1896079E8],  "dataWithPropertyList:format:options:error:",  v2,  200,  0,  0,  (void)v13);
  if (v10) {
    return ktrace_file_append_chunk(a1, 20986, 0, 0, (UInt8 *)[v10 bytes], objc_msgSend(v10, "length"));
  }
  uint64_t v12 = __error();
  result = 0LL;
  *uint64_t v12 = 79;
  return result;
}

void *ktariadne_append_live_device_tree(uint64_t a1)
{
  uint64_t v2 = (void *)MEMORY[0x186E45FA0]();
  uint64_t RootEntry = IORegistryGetRootEntry(0);
  io_object_t v4 = RootEntry;
  uint64_t v5 = serializeServiceRecursively(RootEntry);
  if (v5)
  {
    uint64_t v6 = v5;
    IOObjectRelease(v4);
    uint64_t v7 = (void *)[MEMORY[0x1896079E8] dataWithPropertyList:v6 format:200 options:0 error:0];
    appended = ktrace_file_append_chunk(a1, 20991, 0, 0, (UInt8 *)[v7 bytes], objc_msgSend(v7, "length"));
  }

  else
  {
    appended = 0LL;
  }

  objc_autoreleasePoolPop(v2);
  return appended;
}

void *serializeServiceRecursively(uint64_t a1)
{
  io_registry_entry_t v1 = a1;
  uint64_t v14 = *MEMORY[0x1895F89C0];
  io_iterator_t iterator = 0;
  uint64_t v3 = IOIteratorNext(iterator);
  memset(v13, 0, 128);
  memset(v12, 0, sizeof(v12));
  memset(v11, 0, sizeof(v11));
  uint64_t entryID = 0LL;
  uint64_t v2 = (void *)[MEMORY[0x189603FC8] dictionary];
  if (!IORegistryEntryGetNameInPlane(v1, "IODeviceTree", v13)) {
    objc_msgSend( v2,  "setObject:forKeyedSubscript:",  objc_msgSend(NSString, "stringWithUTF8String:", v13),  @"IORegistryEntryName");
  }
  if (!IORegistryEntryGetLocationInPlane(v1, "IODeviceTree", v12)) {
    objc_msgSend( v2,  "setObject:forKeyedSubscript:",  objc_msgSend(NSString, "stringWithUTF8String:", v12),  @"IORegistryEntryLocation");
  }
  if (!IORegistryEntryGetRegistryEntryID(v1, &entryID)) {
    objc_msgSend( v2,  "setObject:forKeyedSubscript:",  objc_msgSend(MEMORY[0x189607968], "numberWithUnsignedLongLong:", entryID),  @"IORegistryEntryID");
  }
  if (!_IOObjectGetClass()) {
    objc_msgSend( v2,  "setObject:forKeyedSubscript:",  objc_msgSend(NSString, "stringWithUTF8String:", v11),  @"IOObjectClass");
  }
  CFMutableDictionaryRef properties = 0LL;
  IORegistryEntryCreateCFProperties(v1, &properties, (CFAllocatorRef)*MEMORY[0x189604DB0], 0);
  if (properties)
  {
    [v2 setObject:properties forKeyedSubscript:@"IORegistryEntryProperties"];
    CFRelease(properties);
  }

  if ((_DWORD)v3)
  {
    io_object_t v4 = (void *)[MEMORY[0x189603FA8] array];
    do
    {
      uint64_t v5 = (void *)MEMORY[0x186E45FA0]();
      [v4 addObject:serializeServiceRecursively(v3)];
      uint64_t v6 = IOIteratorNext(iterator);
      IOObjectRelease(v3);
      objc_autoreleasePoolPop(v5);
      uint64_t v3 = v6;
    }

    while ((_DWORD)v6);
    [v2 setObject:v4 forKeyedSubscript:@"IORegistryEntryChildren"];
  }

  IOObjectRelease(iterator);
  return v2;
}

uint64_t ktariadne_read_times(uint64_t a1, void *a2, void *a3, void *a4, _DWORD *a5, _DWORD *a6)
{
  uint64_t v12 = (const __CFDictionary *)ktrace_chunk_copy_plist(a1);
  if (v12)
  {
    __int128 v13 = v12;
    Value = (const __CFNumber *)CFDictionaryGetValue(v12, @"MachAbsoluteTime");
    if (Value)
    {
      CFNumberGetValue(Value, kCFNumberSInt64Type, a2);
      if (!a3) {
        goto LABEL_14;
      }
    }

    else
    {
      *a6 = 45;
      if (!a3) {
        goto LABEL_14;
      }
    }

    __int128 v19 = (const __CFNumber *)CFDictionaryGetValue(v13, @"ContinuousTimeOffset");
    if (!v19)
    {
      *a6 = 45;
      if (a4)
      {
LABEL_15:
        uint64_t v20 = (const __CFNumber *)CFDictionaryGetValue(v13, @"SecondsSinceEpoch");
        if (v20)
        {
          double valuePtr = 0.0;
          CFNumberGetValue(v20, kCFNumberDoubleType, &valuePtr);
          double v23 = 0.0;
          double v21 = modf(valuePtr, &v23);
          *a4 = (uint64_t)v23;
          a4[1] = (uint64_t)(v21 * 1000000000.0);
        }

        else
        {
          *a6 = 45;
        }
      }

LABEL_20:
      if (a5)
      {
        uint64_t v22 = (const __CFNumber *)CFDictionaryGetValue(v13, @"SecondsFromGMT");
        if (v22)
        {
          double valuePtr = 0.0;
          CFNumberGetValue(v22, kCFNumberDoubleType, &valuePtr);
          *a5 = (int)(valuePtr / -60.0);
        }

        else
        {
          *a6 = 45;
        }
      }

      CFRelease(v13);
      return 1LL;
    }

    CFNumberGetValue(v19, kCFNumberSInt64Type, a3);
LABEL_14:
    if (a4) {
      goto LABEL_15;
    }
    goto LABEL_20;
  }

  int v16 = *__error();
  ktrace_log_init();
  __int128 v17 = (os_log_s *)ktrace_file_log;
  if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR)) {
    ktariadne_read_times_cold_1(v16, v17);
  }
  uint64_t v18 = __error();
  uint64_t result = 0LL;
  *uint64_t v18 = v16;
  return result;
}

    uint64_t v10 = 22LL;
    goto LABEL_21;
  }

  return 22LL;
}

        __break(1u);
        uint64_t result = swift_release();
        __break(1u);
        return result;
      }

        uint64_t v6 = 1LL << v27;
        goto LABEL_21;
      }

        uint64_t v6 = 1LL << v27;
        goto LABEL_21;
      }

        uint64_t v6 = 1LL << v28;
        goto LABEL_21;
      }

      a3 = v42;
    }
  }

  else
  {
    __int128 v19 = 0;
    uint64_t v18 = 1LL;
  }

  double v23 = *(void *)(v8 + 16);
  uint64_t v24 = v23 + v18;
  if (__OFADD__(v23, v18))
  {
    __break(1u);
LABEL_51:
    __break(1u);
    goto LABEL_52;
  }

  uint64_t v25 = *(void *)(v8 + 24);
  if (v25 >= v24 && (a2 & 1) != 0)
  {
    if (!v19) {
      goto LABEL_48;
    }
    goto LABEL_39;
  }

  if ((a2 & 1) != 0)
  {
    uint64_t v26 = a3;
    sub_186C19E54();
  }

  else
  {
    if (v25 >= v24)
    {
      sub_186C1AD30();
      if (!v19)
      {
LABEL_48:
        int v38 = *v4;
        *(void *)(*v4 + 8 * (v13 >> 6) + 56) |= 1LL << v13;
        memcpy((void *)(*(void *)(v38 + 48) + 328 * v13), __src, 0x141uLL);
        v39 = *(void *)(v38 + 16);
        v40 = __OFADD__(v39, 1LL);
        uint64_t v41 = v39 + 1;
        if (!v40)
        {
          *(void *)(v38 + 16) = v41;
          sub_186C27E9C((uint64_t)v44);
          return sub_186BFA418((uint64_t)v44, (uint64_t)a3, &qword_18C6A2838);
        }

        goto LABEL_51;
      }

uint64_t kttimesync_init(uint64_t a1, uint64_t a2, BOOL a3)
{
  uint64_t v47 = 0LL;
  uint64_t v48 = &v47;
  uint64_t v49 = 0x2000000000LL;
  char v50 = 0;
  uint64_t v43 = 0LL;
  uint64_t v44 = &v43;
  uint64_t v45 = 0x2000000000LL;
  char v46 = 0;
  if (a2)
  {
    ktrace_file_timebase(a2, (_DWORD *)(a1 + 16), (_DWORD *)(a1 + 20));
    uint64_t v39 = 0LL;
    v40 = &v39;
    uint64_t v41 = 0x2000000000LL;
    int v42 = 0;
    uint64_t v35 = 0LL;
    uint64_t v36 = &v35;
    uint64_t v37 = 0x2000000000LL;
    char v38 = 0;
    uint64_t v6 = MEMORY[0x1895F87A8];
    v34[0] = MEMORY[0x1895F87A8];
    v34[1] = 0x40000000LL;
    v34[2] = __kttimesync_init_block_invoke;
    v34[3] = &unk_189F54DC8;
    v34[4] = &v39;
    v34[5] = &v35;
    v34[7] = &v47;
    v34[8] = a1;
    v34[6] = &v43;
    uint64_t v12 = ktrace_file_iterate(a2, 0LL, (uint64_t)v34, v7, v8, v9, v10, v11);
    if (*((_DWORD *)v40 + 6))
    {
      int v18 = 1;
      uint64_t v19 = *((unsigned int *)v40 + 6);
      goto LABEL_11;
    }

    uint64_t v19 = v12;
    if (!(_DWORD)v12)
    {
      if (!*((_BYTE *)v36 + 24))
      {
        v33[0] = v6;
        v33[1] = 0x40000000LL;
        v33[2] = __kttimesync_init_block_invoke_2;
        v33[3] = &__block_descriptor_tmp_4;
        v33[4] = a1;
        ktrace_file_header_iterate(a2, 0LL, (uint64_t)v33, v13, v14, v15, v16, v17);
        uint64_t v31 = 0LL;
        uint64_t v32 = 0LL;
        if (ktrace_file_walltime_offset( a2,  (void *)a1,  (uint64_t)&v31,  (void *)(a1 + 40),  v26,  v27,  v28,  v29))
        {
          int v18 = 1;
        }

        else
        {
          int v18 = 0;
          *(_BYTE *)(a1 + 48) |= 2u;
          uint64_t v30 = 1000LL * (int)v32;
          *(void *)(a1 + 24) = v31;
          *(void *)(a1 + 32) = v30;
        }

        uint64_t v19 = 45LL;
LABEL_11:
        _Block_object_dispose(&v35, 8);
        _Block_object_dispose(&v39, 8);
        if (v18) {
          goto LABEL_22;
        }
        goto LABEL_12;
      }

      uint64_t v19 = 0LL;
    }

    int v18 = 1;
    goto LABEL_11;
  }

  uint64_t v39 = 0LL;
  uint64_t v35 = 0LL;
  if (mach_get_times())
  {
    int v20 = *__error();
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
      kttimesync_init_cold_3();
    }
LABEL_21:
    *__error() = v20;
    uint64_t v19 = 22LL;
    goto LABEL_22;
  }

  char v22 = *(_BYTE *)(a1 + 48);
  uint64_t v23 = v35 - v39;
  *(void *)a1 = v39;
  *(void *)(a1 + 8) = v23;
  *(_BYTE *)(a1 + 48) = v22 | 3;
  if (mach_timebase_info((mach_timebase_info_t)(a1 + 16)))
  {
    int v20 = *__error();
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
      kttimesync_init_cold_2();
    }
    goto LABEL_21;
  }

  if (!gettimeofday(0LL, (void *)(a1 + 40)))
  {
    *(_BYTE *)(a1 + 48) |= 4u;
LABEL_12:
    if (*((_BYTE *)v48 + 24)) {
      a3 = *((_BYTE *)v44 + 24) != 0;
    }
    uint64_t v19 = 0LL;
    if (a3) {
      char v21 = 8;
    }
    else {
      char v21 = 0;
    }
    *(_BYTE *)(a1 + 48) = *(_BYTE *)(a1 + 48) & 0xF7 | v21;
    goto LABEL_22;
  }

  int v25 = *__error();
  ktrace_log_init();
  if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
    kttimesync_init_cold_1();
  }
  *__error() = v25;
  uint64_t v19 = *__error();
LABEL_22:
  _Block_object_dispose(&v43, 8);
  _Block_object_dispose(&v47, 8);
  return v19;
}

uint64_t __kttimesync_init_block_invoke(uint64_t a1, uint64_t *a2)
{
  if (ktrace_chunk_tag((uint64_t)a2) == 32787)
  {
    if (ktrace_chunk_version_major((uint64_t)a2) == 1)
    {
      __int128 v12 = 0u;
      __int128 v13 = 0u;
      __int128 v11 = 0u;
      int v4 = ktrace_chunk_copy_data(a2, 0LL, &v11, 0x30uLL);
      if (v4)
      {
        *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = v4;
      }

      else
      {
        *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = 1;
        uint64_t v8 = *(void *)(a1 + 64);
        *(_OWORD *)uint64_t v8 = v11;
        *(_OWORD *)(v8 + 16) = v12;
        *(void *)(v8 + 32) = v13;
        *(void *)(v8 + 40) = *(void *)((char *)&v13 + 4);
        *(_BYTE *)(v8 + 48) = *(_BYTE *)(v8 + 48) & 0xF0 | (8 * (BYTE12(v13) & 1)) | 7;
      }
    }

    return 1LL;
  }

  if (ktrace_chunk_tag((uint64_t)a2) == 32774)
  {
    uint64_t v5 = (void **)ktrace_config_create(a2);
    *(_BYTE *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL) = ktrace_config_kdebug_using_mach_continuous_time((uint64_t)v5);
    uint64_t v6 = *(void *)(*(void *)(a1 + 56) + 8LL);
    uint64_t v7 = 1LL;
    *(_BYTE *)(v6 + 24) = 1;
    ktrace_config_destroy(v5);
  }

  else
  {
    if (!ktariadne_read_times( (uint64_t)a2,  *(void **)(a1 + 64),  (void *)(*(void *)(a1 + 64) + 8LL),  (void *)(*(void *)(a1 + 64) + 24LL),  (_DWORD *)(*(void *)(a1 + 64) + 40LL),  (_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL))) {
      return 1LL;
    }
    if (*(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL))
    {
      return 0LL;
    }

    else
    {
      *(_BYTE *)(*(void *)(a1 + 64) + 48LL) |= 2u;
      *(_BYTE *)(*(void *)(a1 + 64) + 48LL) |= 1u;
      *(_BYTE *)(*(void *)(a1 + 64) + 48LL) |= 4u;
      uint64_t v10 = *(void *)(*(void *)(a1 + 40) + 8LL);
      uint64_t v7 = 1LL;
      *(_BYTE *)(v10 + 24) = 1;
    }
  }

  return v7;
}

BOOL __kttimesync_init_block_invoke_2(uint64_t a1, uint64_t a2)
{
  int v4 = ktrace_chunk_tag(a2);
  if (v4 == 36874)
  {
    uint64_t v5 = (const __CFDictionary *)ktrace_chunk_copy_plist(a2);
    if (v5)
    {
      uint64_t v6 = v5;
      if (dict_uint64(v5, @"mach_abs_time", &v12))
      {
        int v7 = *__error();
        ktrace_log_init();
        if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR)) {
          __kttimesync_init_block_invoke_2_cold_2();
        }
        *__error() = v7;
      }

      else
      {
        **(void **)(a1 + 32) = v12;
        uint64_t v11 = 0LL;
        if (!dict_uint64(v6, @"mach_cont_time", &v11))
        {
          uint64_t v9 = *(void *)(a1 + 32);
          *(void *)(v9 + 8) = v11 - *(void *)v9;
          *(_BYTE *)(v9 + 48) |= 1u;
        }
      }

      CFRelease(v6);
    }

    else
    {
      int v8 = *__error();
      ktrace_log_init();
      if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR)) {
        __kttimesync_init_block_invoke_2_cold_1();
      }
      *__error() = v8;
    }
  }

  return v4 != 36874;
}

  ;
}

void *kttimesync_append(__int128 *a1, uint64_t a2)
{
  uint64_t v2 = *((void *)a1 + 4);
  uint64_t v6 = *((void *)a1 + 3);
  __int128 v4 = *a1;
  uint64_t v5 = *((void *)a1 + 2);
  int v7 = v2;
  uint64_t v8 = *((void *)a1 + 5);
  int v9 = (*((unsigned __int8 *)a1 + 48) >> 3) & 1;
  return ktrace_file_append_chunk(a2, 32787, 1, 0, (UInt8 *)&v4, 48LL);
}

uint64_t kttimesync_update_kdebug( uint64_t result, int a2, uint64_t a3, unsigned int a4, uint64_t a5, unsigned int a6)
{
  if (a2 == 25165824)
  {
    unint64_t v6 = a4 | ((unint64_t)a6 << 32);
    unint64_t v7 = v6 - *(void *)(result + 8);
    *(void *)(result + 8) = v6;
    uint64_t v8 = *(unsigned int *)(result + 16);
    unint64_t v9 = *(unsigned int *)(result + 20);
    if ((_DWORD)v8 != (_DWORD)v9) {
      unint64_t v7 = v7 * v8 / v9;
    }
    unint64_t v10 = *(void *)(result + 24) + v7 / 0x3B9ACA00;
    unint64_t v11 = *(void *)(result + 32) + v7 % 0x3B9ACA00;
    *(void *)(result + 24) = v10;
    *(void *)(result + 32) = v11;
  }

  return result;
}

unint64_t machtime_to_timespec(unsigned int *a1, unint64_t a2)
{
  if (a1)
  {
    uint64_t v2 = *a1;
    unint64_t v3 = a1[1];
    if ((_DWORD)v2 != (_DWORD)v3) {
      a2 = v2 * a2 / v3;
    }
    return a2 / 0x3B9ACA00;
  }

  else
  {
    _os_assert_log();
    unint64_t result = _os_crash();
    __break(1u);
  }

  return result;
}

uint64_t kttimesync_update_kdebug_prepass( uint64_t result, int a2, unsigned int a3, uint64_t a4, unsigned int a5)
{
  if (a2 == 25165824)
  {
    unint64_t v5 = a3 | ((unint64_t)a5 << 32);
    *(void *)(result + 8) -= v5;
    uint64_t v6 = *(unsigned int *)(result + 16);
    unint64_t v7 = *(unsigned int *)(result + 20);
    if ((_DWORD)v6 != (_DWORD)v7) {
      unint64_t v5 = v5 * v6 / v7;
    }
    unint64_t v8 = *(void *)(result + 32) + 1000000000 * (v5 / 0x3B9ACA00) - v5;
    *(void *)(result + 24) -= v5 / 0x3B9ACA00;
    *(void *)(result + 32) = v8;
  }

  return result;
}

double kttimesync_frequency(uint64_t a1, double a2, double a3)
{
  LODWORD(a2) = *(_DWORD *)(a1 + 16);
  LODWORD(a3) = *(_DWORD *)(a1 + 20);
  return (double)*(unint64_t *)&a2 / (double)*(unint64_t *)&a3;
}

unint64_t kttimesync_ns_from_mach(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(unsigned int *)(a1 + 16);
  unint64_t v3 = *(unsigned int *)(a1 + 20);
  if ((_DWORD)v2 != (_DWORD)v3) {
    return v2 * a2 / v3;
  }
  return a2;
}

uint64_t kttimesync_cont_from_abs(uint64_t a1, uint64_t a2)
{
  return *(void *)(a1 + 8) + a2;
}

unint64_t kttimesync_abs_from_cont(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = *(void *)(a1 + 8);
  BOOL v3 = a2 >= v2;
  unint64_t v4 = a2 - v2;
  if (v3) {
    return v4;
  }
  else {
    return 0LL;
  }
}

unint64_t kttimesync_ns_from_timestamp(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(unsigned int *)(a1 + 16);
  unint64_t v3 = *(unsigned int *)(a1 + 20);
  if ((_DWORD)v2 != (_DWORD)v3) {
    return v2 * a2 / v3;
  }
  return a2;
}

unint64_t kttimesync_timestamp_from_ns(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(unsigned int *)(a1 + 16);
  uint64_t v3 = *(unsigned int *)(a1 + 20);
  if ((_DWORD)v2 != (_DWORD)v3) {
    return v3 * a2 / v2;
  }
  return a2;
}

unint64_t kttimesync_abs_from_timestamp(uint64_t a1, unint64_t a2)
{
  if ((*(_BYTE *)(a1 + 48) & 8) == 0) {
    return a2;
  }
  unint64_t v3 = *(void *)(a1 + 8);
  BOOL v4 = a2 >= v3;
  unint64_t v5 = a2 - v3;
  if (v4) {
    return v5;
  }
  else {
    return 0LL;
  }
}

uint64_t kttimesync_cont_from_timestamp(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(a1 + 48) & 8) == 0) {
    a2 += *(void *)(a1 + 8);
  }
  return a2;
}

unint64_t kttimesync_wall_from_timestamp(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = *(unsigned int *)(a1 + 16);
  unint64_t v3 = *(unsigned int *)(a1 + 20);
  unint64_t v4 = *(void *)a1 - a2;
  if (*(void *)a1 <= a2)
  {
    unint64_t v6 = a2 - *(void *)a1;
    if ((_DWORD)v2 != (_DWORD)v3) {
      unint64_t v6 = v6 * v2 / v3;
    }
    if (*(void *)(a1 + 32) + v6 % 0x3B9ACA00 <= 0x3B9AC9FF) {
      return *(void *)(a1 + 24) + v6 / 0x3B9ACA00;
    }
    else {
      return *(void *)(a1 + 24) + v6 / 0x3B9ACA00 + 1;
    }
  }

  else
  {
    if ((_DWORD)v2 != (_DWORD)v3) {
      unint64_t v4 = v4 * v2 / v3;
    }
    return *(void *)(a1 + 24)
         - v4 / 0x3B9ACA00
         + ((uint64_t)(*(void *)(a1 + 32) + 1000000000 * (v4 / 0x3B9ACA00) - v4) >> 63);
  }
}

uint64_t timespec_subtract(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a1 - a3 + ((a2 - a4) >> 63);
}

uint64_t timespec_add(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  else {
    return a3 + a1 + 1;
  }
}

uint64_t kttimesync_can_convert_continuous(uint64_t a1)
{
  return *(_BYTE *)(a1 + 48) & 1;
}

double ktrace_remotetime_update_params(uint64_t a1, uint64_t a2)
{
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  *(void *)(a1 + 536) = *(void *)(a2 + 8);
  *(void *)(a1 + 544) = *(void *)(a2 + 16);
  double result = *(double *)(a2 + 24);
  *(double *)(a1 + 528) = result;
  return result;
}

uint64_t ktrace_get_remotetime_for_localtime(uint64_t a1, uint64_t a2)
{
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  ktrace_convert_timestamp_to_nanoseconds(a1, a2, &v7);
  double v3 = *(double *)(a1 + 528);
  if (v3 == 0.0) {
    return 0LL;
  }
  double v5 = v3 * (double)(uint64_t)(v7 - *(void *)(a1 + 536));
  uint64_t v6 = *(void *)(a1 + 544);
  else {
    return v6 + (uint64_t)v5;
  }
}

uint64_t ktrace_set_remotetime_conversion_enabled(uint64_t result, int a2)
{
  if (!result) {
    ktrace_remotetime_update_params_cold_1();
  }
  if ((*(_WORD *)(result + 224) & 3) != 0) {
    ktrace_set_remotetime_conversion_enabled_cold_2();
  }
  *(_DWORD *)(result + 288) = a2;
  return result;
}

uint64_t ktrace_get_remotetime_conversion_enabled(uint64_t a1)
{
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  return *(unsigned int *)(a1 + 288);
}

  ;
}

uint64_t timeval_subtract(uint64_t a1, int a2, uint64_t a3, int a4)
{
  return a1 - a3 + ((a2 - a4) >> 31);
}

uint64_t timeval_add(uint64_t a1, int a2, uint64_t a3, int a4)
{
  else {
    return a3 + a1 + 1;
  }
}

unint64_t machtime_to_timeval(unsigned int *a1, unint64_t a2)
{
  if (a1)
  {
    uint64_t v2 = *a1;
    unint64_t v3 = a1[1];
    if ((_DWORD)v2 != (_DWORD)v3) {
      a2 = v2 * a2 / v3;
    }
    return a2 / 0x3B9ACA00;
  }

  else
  {
    _os_assert_log();
    unint64_t result = _os_crash();
    __break(1u);
  }

  return result;
}

void OUTLINED_FUNCTION_0_0( void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

  ;
}

uint64_t OUTLINED_FUNCTION_3()
{
  return _os_assert_log();
}

void _session_process_events(uint64_t a1, uint64_t a2, unint64_t a3, int a4)
{
  if (*(_DWORD *)(a1 + 4)) {
    ktrace_remotetime_update_params_cold_1();
  }
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 232));
  uint64_t v8 = *(unsigned int *)(a1 + 24);
  uint64_t v9 = *(void *)(a1 + 32);
  uint64_t v54 = *(unsigned int *)(a1 + 40);
  uint64_t v10 = *(void *)(a1 + 48);
  uint64_t v52 = *(void *)(a1 + 8);
  uint64_t i = tracepoint_timestamp(a2, a4);
  if (!*(void *)(a1 + 488)) {
    *(void *)(a1 + 488) = i;
  }
  uint64_t v12 = 32LL;
  if (a4) {
    uint64_t v12 = 64LL;
  }
  uint64_t v58 = v12;
  char v13 = 5;
  if (a4) {
    char v13 = 6;
  }
  unint64_t v51 = a3 >> v13;
  if (a3 >> v13)
  {
    uint64_t v14 = 0LL;
    uint64_t v15 = 0LL;
    uint64_t v50 = a1 + 432;
    v55 = (void **)(a1 + 248);
    uint64_t v53 = v10 + 24;
    int v56 = a4;
    do
    {
      if (v15) {
        objc_autoreleasePoolPop(v15);
      }
      uint64_t v15 = (void *)MEMORY[0x186E45FA0](i);
      unsigned __int8 v16 = atomic_load((unsigned __int8 *)(a1 + 157));
      if ((v16 & 1) != 0) {
        break;
      }
      if (a4) {
        uint64_t v17 = 48LL;
      }
      else {
        uint64_t v17 = 28LL;
      }
      unint64_t v18 = *(unsigned int *)(a2 + v17);
      uint64_t i = tracepoint_timestamp(a2, a4);
      *(void *)(a1 + 496) = i;
      int v59 = 1 << (BYTE2(v18) & 7);
      if ((v59 & *(_BYTE *)(v52 + (v18 >> 19))) != 0)
      {
        unint64_t v19 = i;
        v57 = v15;
        int v20 = v18 & 0xFFFFFFFC;
        if ((v18 & 0xFFFFFFFC) == 0x7020008)
        {
          clear_events(*(void *)(a1 + 240), v55);
          *(void *)(a1 + 488) = v19;
          if (*(_DWORD *)(a1 + 272)) {
            thread_cputime_map_dropped_events(a1, *(void *)(a1 + 408));
          }
          uint64_t v21 = *(void *)(a1 + 64);
          if (v21) {
            (*(void (**)(void))(v21 + 16))();
          }
        }

        else if ((_DWORD)v18 == 25165824)
        {
          if (a4)
          {
            uint64_t v22 = *(void *)(a2 + 8);
            uint64_t v23 = *(void *)(a2 + 16);
            uint64_t v24 = *(void *)(a2 + 24);
            uint64_t v25 = *(void *)(a2 + 32);
          }

          else
          {
            uint64_t v22 = *(unsigned int *)(a2 + 8);
            LODWORD(v23) = *(_DWORD *)(a2 + 12);
            uint64_t v24 = *(unsigned int *)(a2 + 16);
            LODWORD(v25) = *(_DWORD *)(a2 + 20);
          }

          kttimesync_update_kdebug(v50, *(_DWORD *)(a2 + v17), v22, v23, v24, v25);
        }

        if (*(_DWORD *)(a1 + 260) || *(_DWORD *)(a1 + 280) || *(_DWORD *)(a1 + 276)) {
          kthmap_update(*(void *)(a1 + 296), a2, a4);
        }
        uint64_t v26 = *(void *)(a1 + 304);
        if (v26 && (BYTE3(v18) == 31 || v20 == 67174404 || v20 == 117571592 || v20 == 117440520)) {
          ktrace_uuid_map_update(v26, a1, (uint64_t *)a2, a4);
        }
        if (v20 == 117440524)
        {
          uint64_t v27 = *(void *)(a1 + 88);
          if (v27)
          {
            if (v56) {
              uint64_t v28 = *(const void **)(a2 + 8);
            }
            else {
              uint64_t v28 = (const void *)*(unsigned int *)(a2 + 8);
            }
            uint64_t v29 = kthmap_process_name_for_tid(*(void *)(a1 + 296), v28);
            (*(void (**)(uint64_t, const void *, uint64_t))(v27 + 16))(v27, v28, v29);
          }
        }

        a4 = v56;
        if (*(_DWORD *)(a1 + 268) && (v18 & 0xFFFFFFF8 | 4) == 0x3010094) {
          vnode_path_map_update(*(CFDictionaryRef **)(a1 + 400), v18, a2, v56);
        }
        if (*(_DWORD *)(a1 + 272)
          && ((v20 - 20971520) <= 0x24 && ((1LL << v20) & 0x1000000101LL) != 0 || v20 == 117440524))
        {
          thread_cputime_map_update(a1, *(void *)(a1 + 408), v18, a2, v56);
        }

        _session_handle_stackshot(a1, v19);
        if (*(_DWORD *)(a1 + 288) && (_DWORD)v18 == 25165840) {
          inserted.n128_f64[0] = ktrace_remotetime_update_params(a1, a2);
        }
        ++*(void *)(a1 + 160);
        uint64_t v15 = v57;
        if (*(void *)(a1 + 520) <= v19)
        {
          if ((int)v8 >= 1)
          {
            uint64_t v31 = 0LL;
            char v32 = 0;
            do
            {
              int v33 = *(_DWORD *)(v9 + 32 * v31);
              if (v33 == 1)
              {
              }

              else if (!v33)
              {
                uint64_t v34 = v9 + 32 * v31;
                unsigned int v36 = *(_DWORD *)(v34 + 8);
                uint64_t v35 = v34 + 8;
              }

              int v37 = *(_DWORD *)(v9 + 32 * v31 + 16);
              if (v37 == 2)
              {
                v60[0] = 0LL;
                if (!*(void *)(a1 + 416))
                {
                  uint64_t v40 = kpdecode_cursor_create();
                  *(void *)(a1 + 416) = v40;
                  if (!v40) {
                    ktrace_remotetime_update_params_cold_1();
                  }
                  uint64_t v41 = (char *)valloc(0x1000uLL);
                  if (!v41) {
                    ktrace_remotetime_update_params_cold_1();
                  }
                  uint64_t v44 = v41;
                  uint64_t v45 = *(void *)(a1 + 608);
                  if (v45) {
                    int is_64_bit = ktrace_file_is_64_bit(v45);
                  }
                  else {
                    int is_64_bit = 1;
                  }
                  double v49 = kttimesync_frequency(v50, v42, v43);
                  *(_DWORD *)uint64_t v44 = 1437204992;
                  *(void *)(v44 + 12) = 0LL;
                  *(void *)(v44 + 4) = 0LL;
                  *((_DWORD *)v44 + 5) = is_64_bit;
                  *((void *)v44 + 3) = (unint64_t)((double)(unint64_t)v49 * 1000000000.0);
                  *((_OWORD *)v44 + 2) = 0u;
                  *((_OWORD *)v44 + 3) = 0u;
                  *((_OWORD *)v44 + 4) = 0u;
                  *((_OWORD *)v44 + 5) = 0u;
                  *((_OWORD *)v44 + 6) = 0u;
                  *((_OWORD *)v44 + 7) = 0u;
                  *((_OWORD *)v44 + 8) = 0u;
                  *((_OWORD *)v44 + 9) = 0u;
                  *((_OWORD *)v44 + 10) = 0u;
                  *((_OWORD *)v44 + 11) = 0u;
                  *((_OWORD *)v44 + 12) = 0u;
                  *((_OWORD *)v44 + 13) = 0u;
                  *((_OWORD *)v44 + 14) = 0u;
                  *((_OWORD *)v44 + 15) = 0u;
                  *((_OWORD *)v44 + 16) = 0u;
                  *((_OWORD *)v44 + 17) = 0u;
                  free(v44);
                  a4 = v56;
                  if (*(_BYTE *)(a1 + 16)) {
                    kpdecode_cursor_set_option();
                  }
                }

                kpdecode_cursor_clearchunk();
                v60[0] = 0LL;
                for (uint64_t i = kpdecode_cursor_next_record(); !(_DWORD)i; uint64_t i = kpdecode_cursor_next_record())
                  (*(void (**)(void))(*(void *)(v9 + 32 * v31 + 24) + 16LL))();
                goto LABEL_102;
              }

              if (v37 == 1)
              {
                if ((v18 & 1) != 0)
                {
                  __n128 inserted = insert_start_event(*(void *)(a1 + 240), v55, a2);
                  goto LABEL_102;
                }

                if ((v18 & 2) == 0) {
                  goto LABEL_102;
                }
                uint64_t i = match_end_event(*(void *)(a1 + 240), (__int128 **)v55, a2, v61);
                if (!(_DWORD)i) {
                  goto LABEL_102;
                }
                uint64_t i = process_tracepoint(a1, (uint64_t)v61, (uint64_t)v60, a4);
                if (!(_DWORD)i) {
                  goto LABEL_102;
                }
                if ((v32 & 1) == 0) {
                  process_tracepoint(a1, a2, (uint64_t)v62, a4);
                }
                uint64_t v47 = v53;
                uint64_t v48 = v54;
                if ((int)v54 >= 1)
                {
                  do
                  {
                    if (*(_DWORD *)(v47 - 8) == 1) {
                      (*(void (**)(void))(*(void *)v47 + 16LL))();
                    }
                    v47 += 32LL;
                    --v48;
                  }

                  while (v48);
                }

                uint64_t i = (*(uint64_t (**)(void))(*(void *)(v9 + 32 * v31 + 24) + 16LL))();
              }

              else
              {
                if (v37) {
                  _session_process_events_cold_1();
                }
                if ((v32 & 1) == 0)
                {
                  uint64_t i = process_tracepoint(a1, a2, (uint64_t)v62, a4);
                  if (!(_DWORD)i)
                  {
                    char v32 = 0;
                    goto LABEL_102;
                  }
                }

                uint64_t v38 = v53;
                uint64_t v39 = v54;
                if ((int)v54 >= 1)
                {
                  do
                  {
                    if (!*(_DWORD *)(v38 - 8)) {
                      (*(void (**)(__n128))(*(void *)v38 + 16LL))(inserted);
                    }
                    v38 += 32LL;
                    --v39;
                  }

                  while (v39);
                }

                uint64_t i = (*(uint64_t (**)(__n128))(*(void *)(v9 + 32 * v31 + 24) + 16LL))(inserted);
              }

              char v32 = 1;
LABEL_102:
              ++v31;
            }

            while (v31 != v8);
          }

          uint64_t v15 = v57;
        }
      }

      ++v14;
      a2 += v58;
    }

    while (v14 != v51);
    if (v15) {
      objc_autoreleasePoolPop(v15);
    }
  }

uint64_t process_tracepoint(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v8 = *(void *)a2;
  if (a4)
  {
    *(void *)a3 = v8;
    *(_DWORD *)(a3 + 48) = *(_DWORD *)(a2 + 48);
    *(void *)(a3 + 8) = *(void *)(a2 + 8);
    *(void *)(a3 + 16) = *(void *)(a2 + 16);
    *(void *)(a3 + 24) = *(void *)(a2 + 24);
    *(void *)(a3 + 32) = *(void *)(a2 + 32);
    *(void *)(a3 + 40) = *(void *)(a2 + 40);
    int v9 = *(_DWORD *)(a2 + 52);
  }

  else
  {
    v8 &= 0xFFFFFFFFFFFFFFuLL;
    *(void *)a3 = v8;
    *(_DWORD *)(a3 + 48) = *(_DWORD *)(a2 + 28);
    *(void *)(a3 + 8) = *(unsigned int *)(a2 + 8);
    *(void *)(a3 + 16) = *(unsigned int *)(a2 + 12);
    *(void *)(a3 + 24) = *(unsigned int *)(a2 + 16);
    *(void *)(a3 + 32) = *(unsigned int *)(a2 + 20);
    *(void *)(a3 + 40) = *(unsigned int *)(a2 + 24);
    int v9 = *(unsigned __int8 *)(a2 + 7);
  }

  *(_DWORD *)(a3 + 52) = v9;
  if ((*(_WORD *)(a1 + 224) & 0x80) != 0)
  {
    uint64_t v8 = kttimesync_cont_from_timestamp(a1 + 432, v8);
    *(void *)a3 = v8;
  }

  if (*(_DWORD *)(a1 + 264))
  {
    _session_convert_walltime(a1, v8);
    *(void *)(a3 + 64) = v11;
  }

  else
  {
    uint64_t v10 = 0LL;
    *(_DWORD *)(a3 + 64) = 0;
  }

  *(void *)(a3 + 56) = v10;
  if (*(_DWORD *)(a1 + 260) != 1 && !*(_DWORD *)(a1 + 560) && !*(_DWORD *)(a1 + 576))
  {
    *(_DWORD *)(a3 + 88) = -1;
    *(void *)(a3 + 80) = 0LL;
    goto LABEL_41;
  }

  *(void *)(a3 + 80) = 0LL;
  *(_DWORD *)(a3 + 88) = kthmap_pid_name_for_tid(*(void *)(a1 + 296), *(const void **)(a3 + 40), (void *)(a3 + 80));
  uint64_t v12 = *(const void **)(a3 + 80);
  if (*(_DWORD *)(a1 + 260) == 2) {
    *(void *)(a3 + 80) = 0LL;
  }
  if (!*(_BYTE *)(a1 + 580)
    || !CFSetContainsValue(*(CFSetRef *)(a1 + 584), (const void *)(*(_DWORD *)(a3 + 48) & 0xFFFFFFFC)))
  {
    if (!*(_DWORD *)(a1 + 268)
      || *(_DWORD *)(a3 + 48) >> 2 != 12599332
      || (int v13 = *(_DWORD *)(a3 + 88), v13 != getpid()))
    {
      if (*(_DWORD *)(a1 + 560) == 1)
      {
        uint64_t v14 = (const void *)*(int *)(a3 + 88);
        if ((_DWORD)v14 != -1)
        {
          if (CFSetContainsValue(*(CFSetRef *)(a1 + 552), v14)) {
            return 0LL;
          }
        }
      }

      if (*(_DWORD *)(a1 + 576) == 1 && v12 && CFSetContainsValue(*(CFSetRef *)(a1 + 568), v12)) {
        return 0LL;
      }
      if (*(_DWORD *)(a1 + 560) == 2 || *(_DWORD *)(a1 + 576) == 2)
      {
        uint64_t v15 = (const void *)*(int *)(a3 + 88);
        if ((_DWORD)v15 == -1)
        {
          BOOL v16 = 1;
          if (v12) {
            goto LABEL_29;
          }
        }

        else
        {
          BOOL v16 = CFSetContainsValue(*(CFSetRef *)(a1 + 552), v15) == 0;
          if (v12)
          {
LABEL_29:
            BOOL v17 = CFSetContainsValue(*(CFSetRef *)(a1 + 568), v12) == 0;
LABEL_33:
            int v18 = *(_DWORD *)(a1 + 560) != 2 || v16;
            if (v18 == 1)
            {
              if (*(_DWORD *)(a1 + 576) != 2) {
                BOOL v17 = 1;
              }
              if (v17) {
                return 0LL;
              }
            }

            goto LABEL_41;
          }
        }

        BOOL v17 = 1;
        goto LABEL_33;
      }
    }
  }

LABEL_41:
  if (*(_DWORD *)(a1 + 256) == 1) {
    int v20 = ktrace_name_for_eventid(a1, (void *)(*(_DWORD *)(a3 + 48) & 0xFFFFFFFC));
  }
  else {
    int v20 = 0LL;
  }
  *(void *)(a3 + 72) = v20;
  return 1LL;
}

    *__error() = v4;
    uint64_t v11 = *__error();
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
      ktrace_machine_create_current_cold_2();
    }
    goto LABEL_43;
  }

  return v1;
}

        if (a3)
        {
          new_thread_group(a1, *(const void **)(a2 + 8), (_BYTE *)(a2 + 16));
          return;
        }

        int v13 = *__error();
        ktrace_log_init();
        if (!os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
          goto LABEL_71;
        }
        goto LABEL_70;
      }

      if (v27 > a3) {
        goto LABEL_120;
      }
      uint64_t v29 = *(_DWORD *)v5;
      if (*(_DWORD *)v5 != 17 && (v29 & 0xFFFFFFF0) != 0x20) {
        goto LABEL_120;
      }
      uint64_t v30 = *(void *)(v5 + 8);
      if (!(_DWORD)v30)
      {
        if (!(_DWORD)v26 && (v30 & 0xFFFFFFFF00000000LL) == 0x3100000000LL && v29 == 17) {
          uint64_t v6 = 1;
        }
        goto LABEL_120;
      }

      if (v29 == 17)
      {
        if (SHIDWORD(v30) <= 2310)
        {
          switch(HIDWORD(v30))
          {
            case 0x30:
              uint64_t v31 = 20;
              break;
            case 0x31:
              uint64_t v31 = 24;
              break;
            case 0x81A:
LABEL_83:
              uint64_t v31 = 8;
              break;
            default:
              goto LABEL_120;
          }
        }

        else
        {
          switch(HIDWORD(v30))
          {
            case 0x907:
              uint64_t v31 = 4;
              break;
            case 0x908:
            case 0x909:
              goto LABEL_120;
            case 0x90A:
            case 0x90C:
              goto LABEL_83;
            case 0x90B:
            case 0x90D:
              uint64_t v31 = 16;
              break;
            default:
              if (HIDWORD(v30) != 2369) {
                goto LABEL_120;
              }
              uint64_t v31 = 48;
              break;
          }
        }

        if (v26 / v31 >= v30
          && HIDWORD(v30) == 49
          && v26 % v30 < 0x10)
        {
          goto LABEL_99;
        }
      }

      else
      {
        uint64_t v34 = *(_DWORD *)v5 & 0xF;
        unsigned int v36 = v26 >= v34;
        uint64_t v35 = v26 - v34;
        if (v36 && v35 >= v30 && HIDWORD(v30) == 49)
        {
          unsigned int v36 = !(v35 % v30) && v35 / v30 >= 0x18;
          if (v36)
          {
LABEL_99:
            uint64_t v48 = v10;
            uint64_t v40 = 0;
            uint64_t v6 = 1;
            do
            {
              if (*(_DWORD *)v5 == 17)
              {
                if (SHIDWORD(v30) <= 2310)
                {
                  switch(HIDWORD(v30))
                  {
                    case 0x30:
                      uint64_t v41 = 20;
                      break;
                    case 0x31:
                      uint64_t v41 = 24;
                      break;
                    case 0x81A:
LABEL_108:
                      uint64_t v41 = 8;
                      break;
                    default:
LABEL_111:
                      uint64_t v41 = 0;
                      break;
                  }
                }

                else
                {
                  switch(HIDWORD(v30))
                  {
                    case 0x907:
                      uint64_t v41 = 4;
                      break;
                    case 0x908:
                    case 0x909:
                      goto LABEL_111;
                    case 0x90A:
                    case 0x90C:
                      goto LABEL_108;
                    case 0x90B:
                    case 0x90D:
                      uint64_t v41 = 16;
                      break;
                    default:
                      if (HIDWORD(v30) != 2369) {
                        goto LABEL_111;
                      }
                      uint64_t v41 = 48;
                      break;
                  }
                }
              }

              else
              {
                uint64_t v41 = (*(_DWORD *)(v5 + 4) - (*(_DWORD *)v5 & 0xFu)) / v30;
              }

              double v42 = (const unsigned __int8 *)(v41 * v40 + v5 + 16 + 8);
              if (uuid_is_null(v42))
              {
                uint64_t v6 = 0;
              }

              else
              {
                block = *(_OWORD *)v42;
                std::__hash_table<CFUUIDBytes,std::hash<CFUUIDBytes>,std::equal_to<CFUUIDBytes>,std::allocator<CFUUIDBytes>>::__emplace_unique_key_args<CFUUIDBytes,CFUUIDBytes const&>( v9,  &block,  &block);
              }

              ++v40;
              uint64_t v30 = *(void *)(v5 + 8);
            }

            while (v40 < v30);
            uint64_t v27 = v3 + *(unsigned int *)(v5 + 4);
            uint64_t v10 = v48;
          }
        }
      }

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

    swift_bridgeObjectRelease();
LABEL_42:
    uint64_t v31 = v35;
    unint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      unint64_t result = (uint64_t)sub_186C18B84(0LL, *(void *)(v35 + 16) + 1LL, 1);
      uint64_t v31 = v35;
    }

    unint64_t v3 = v8;
    int v33 = *(void *)(v31 + 16);
    char v32 = *(void *)(v31 + 24);
    if (v33 >= v32 >> 1)
    {
      unint64_t result = (uint64_t)sub_186C18B84((char *)(v32 > 1), v33 + 1, 1);
      uint64_t v31 = v35;
    }

    *(void *)(v31 + 16) = v33 + 1;
    uint64_t v35 = v31;
    uint64_t v34 = v31 + 32 * v33;
    *(void *)(v34 + 32) = v11;
    *(void *)(v34 + 40) = v10;
    *(void *)(v34 + 48) = v12;
    *(_BYTE *)(v34 + 56) = v37;
  }

  while (v5 != v3);
  return v35;
}

      if (v6 > v7)
      {
        v18 -= 16;
        if (v14 > v4) {
          continue;
        }
      }

      goto LABEL_43;
    }
  }

  if (a4 != __dst || &__dst[16 * v10] <= a4) {
    memmove(a4, __dst, 16 * v10);
  }
  uint64_t v14 = &v4[16 * v10];
  if ((unint64_t)v6 < a3 && v8 >= 16)
  {
    while (1)
    {
      if (*((void *)v4 + 1) >= *((void *)v6 + 1))
      {
        BOOL v17 = v4 + 16;
        BOOL v16 = v4;
        uint64_t v15 = v6;
        if (v7 == v4)
        {
          v4 += 16;
          if (v7 < v17) {
            goto LABEL_20;
          }
        }

        else
        {
          v4 += 16;
        }
      }

      else
      {
        uint64_t v15 = v6 + 16;
        BOOL v16 = v6;
        if (v7 == v6 && v7 < v15) {
          goto LABEL_20;
        }
      }

      *(_OWORD *)unint64_t v7 = *(_OWORD *)v16;
LABEL_20:
      v7 += 16;
      if (v4 < v14)
      {
        uint64_t v6 = v15;
      }

      break;
    }
  }

  uint64_t v6 = v7;
LABEL_43:
  uint64_t v22 = v14 - v4 + (v14 - v4 < 0 ? 0xFuLL : 0);
  if (v6 != v4 || v6 >= &v4[v22 & 0xFFFFFFFFFFFFFFF0LL]) {
    memmove(v6, v4, 16 * (v22 >> 4));
  }
  return 1LL;
}

BOOL int_equal_callback(int a1, int a2)
{
  return a1 == a2;
}

uint64_t int_hash_callback(uint64_t result)
{
  return result;
}

BOOL str_equal_callback(const char *a1, const char *a2)
{
  return strcmp(a1, a2) == 0;
}

uint64_t str_hash_callback(const char *a1)
{
  return CFHashBytes();
}

BOOL proc_name_equal_callback(const char *a1, const char *a2)
{
  return strncmp(a1, a2, 0x10uLL) == 0;
}

uint64_t proc_name_hash_callback(const char *a1)
{
  return CFHashBytes();
}

void free_callback(int a1, void *a2)
{
}

BOOL ptr_equal_callback(uint64_t a1, uint64_t a2)
{
  return a1 == a2;
}

BOOL long_equal_callback(uint64_t a1, uint64_t a2)
{
  return a1 == a2;
}

CFStringRef str_desc_copy_callback(char *cStr)
{
  return CFStringCreateWithCStringNoCopy(0LL, cStr, 0x600u, (CFAllocatorRef)*MEMORY[0x189604DC8]);
}

uint64_t sysctlbyname_string(__CFDictionary *a1, const void *a2, char *a3, char **a4, size_t __count)
{
  uint64_t v26 = *MEMORY[0x1895F89C0];
  size_t v19 = __count;
  if (!a4) {
    ktrace_remotetime_update_params_cold_1();
  }
  if (!a3) {
    ktrace_remotetime_update_params_cold_1();
  }
  if (__count)
  {
LABEL_11:
    uint64_t v11 = (char *)calloc(__count, 1uLL);
    if (!v11) {
      ktrace_remotetime_update_params_cold_1();
    }
    uint64_t v12 = v11;
    size_t v18 = v19;
    if (sysctlbyname(a3, v11, &v18, 0LL, 0LL) < 0)
    {
      int v15 = *__error();
      ktrace_log_init();
      if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
        sysctlbyname_string_cold_3();
      }
    }

    else if (v18 >= v19)
    {
      int v15 = *__error();
      ktrace_log_init();
      if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
        sysctlbyname_string_cold_7();
      }
    }

    else
    {
      v12[v18] = 0;
      if (!a1)
      {
LABEL_18:
        uint64_t result = 0LL;
        *a4 = v12;
        return result;
      }

      if (!a2) {
        ktrace_remotetime_update_params_cold_1();
      }
      CFStringRef v13 = CFStringCreateWithCString(0LL, v12, 0x600u);
      if (v13)
      {
        CFStringRef v14 = v13;
        CFDictionarySetValue(a1, a2, v13);
        CFRelease(v14);
        goto LABEL_18;
      }

      int v15 = *__error();
      ktrace_log_init();
      BOOL v17 = (os_log_s *)ktrace_log;
      if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        uint64_t v21 = a3;
        __int16 v22 = 2080;
        uint64_t v23 = v12;
        __int16 v24 = 1024;
        int v25 = v15;
        _os_log_error_impl( &dword_186BA3000,  v17,  OS_LOG_TYPE_ERROR,  "could not create string from sysctlbyname(%s) result '%s' (%{errno}d)",  buf,  0x1Cu);
      }
    }

    *__error() = v15;
    unsigned int v16 = *__error();
    free(v12);
    if (v16) {
      return v16;
    }
    else {
      return 22LL;
    }
  }

  if ((sysctlbyname(a3, 0LL, &v19, 0LL, 0LL) & 0x80000000) == 0 || v19)
  {
    __count = ++v19;
    goto LABEL_11;
  }

  int v9 = *__error();
  ktrace_log_init();
  if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
    sysctlbyname_string_cold_3();
  }
  *__error() = v9;
  if (*__error()) {
    return *__error();
  }
  else {
    return 22LL;
  }
}

uint64_t sysctlbyname_uint64(__CFDictionary *a1, const void *a2, const char *a3, void *a4)
{
  return sysctlbyname_number_internal(a1, a2, a3, a4, 8uLL, kCFNumberSInt64Type);
}

uint64_t sysctlbyname_number_internal( __CFDictionary *a1, const void *a2, const char *a3, void *a4, size_t a5, CFNumberType a6)
{
  uint64_t v30 = *MEMORY[0x1895F89C0];
  if (!a3) {
    ktrace_remotetime_update_params_cold_1();
  }
  if (!a4) {
    ktrace_remotetime_update_params_cold_1();
  }
  MEMORY[0x1895F8858]();
  CFStringRef v13 = (char *)&v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  bzero(v13, v12);
  size_t v24 = a5;
  int v14 = sysctlbyname(a3, v13, &v24, 0LL, 0LL);
  if (v14 < 0)
  {
    int v18 = v14;
    int v19 = *__error();
    ktrace_log_init();
    int v20 = (os_log_s *)ktrace_log;
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      uint64_t v26 = a3;
      __int16 v27 = 1024;
      *(_DWORD *)uint64_t v28 = v18;
      *(_WORD *)&v28[4] = 1024;
      *(_DWORD *)&v28[6] = v19;
      _os_log_error_impl( &dword_186BA3000,  v20,  OS_LOG_TYPE_ERROR,  "sysctlbyname(%s) returned %d (%{errno}d)",  buf,  0x18u);
    }

    *__error() = v19;
    return *__error();
  }

  else
  {
    if (v24 <= a5)
    {
      if (a1)
      {
        if (!a2) {
          ktrace_remotetime_update_params_cold_1();
        }
        CFNumberRef v21 = CFNumberCreate(0LL, a6, v13);
        if (!v21) {
          return 12LL;
        }
        CFNumberRef v22 = v21;
        CFDictionarySetValue(a1, a2, v21);
        CFRelease(v22);
      }

      memcpy(a4, v13, a5);
      return 0LL;
    }

    int v15 = *__error();
    ktrace_log_init();
    unsigned int v16 = (os_log_s *)ktrace_log;
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      uint64_t v26 = a3;
      __int16 v27 = 2048;
      *(void *)uint64_t v28 = v24;
      *(_WORD *)&v28[8] = 1024;
      int v29 = v15;
      _os_log_error_impl( &dword_186BA3000,  v16,  OS_LOG_TYPE_ERROR,  "sysctlbyname(%s) needs too much space %zu (%{errno}d)",  buf,  0x1Cu);
    }

    *__error() = v15;
    return 22LL;
  }

uint64_t sysctlbyname_uint32(__CFDictionary *a1, const void *a2, const char *a3, void *a4)
{
  return sysctlbyname_number_internal(a1, a2, a3, a4, 4uLL, kCFNumberSInt32Type);
}

uint64_t sysctlbyname_uint(__CFDictionary *a1, const void *a2, const char *a3, void *a4)
{
  return sysctlbyname_number_internal(a1, a2, a3, a4, 4uLL, kCFNumberIntType);
}

uint64_t sysctlbyname_int(__CFDictionary *a1, const void *a2, const char *a3, void *a4)
{
  return sysctlbyname_number_internal(a1, a2, a3, a4, 4uLL, kCFNumberIntType);
}

uint64_t sysctl_string(__CFDictionary *a1, const void *a2, int *a3, u_int a4, void *a5)
{
  size_t v15 = 0LL;
  if (!a5) {
    ktrace_remotetime_update_params_cold_1();
  }
  if (!a2) {
    ktrace_remotetime_update_params_cold_1();
  }
  if (!a3) {
    ktrace_remotetime_update_params_cold_1();
  }
  if (sysctl(a3, a4, 0LL, &v15, 0LL, 0LL) < 0 && (*__error() == 2 || *__error() == 1)) {
    return *__error();
  }
  uint64_t v10 = malloc(++v15);
  if (v10)
  {
    uint64_t v11 = v10;
    if (sysctl(a3, a4, v10, &v15, 0LL, 0LL) < 0)
    {
      free(v11);
      return *__error();
    }

    *((_BYTE *)v11 + v15) = 0;
    CFStringRef v12 = CFStringCreateWithCString(0LL, (const char *)v11, 0x600u);
    if (v12)
    {
      CFStringRef v13 = v12;
      CFDictionarySetValue(a1, a2, v12);
      CFRelease(v13);
      uint64_t result = 0LL;
      *a5 = v11;
      return result;
    }

    free(v11);
  }

  return 12LL;
}

uint64_t sysctl_uint(__CFDictionary *a1, const void *a2, int *a3, u_int a4, void *a5)
{
  return sysctl_number_internal(a1, a2, a3, a4, a5, 4uLL, kCFNumberIntType);
}

uint64_t sysctl_number_internal( __CFDictionary *a1, const void *a2, int *a3, u_int a4, void *a5, size_t a6, CFNumberType a7)
{
  v21[1] = *MEMORY[0x1895F89C0];
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  if (!a2) {
    ktrace_remotetime_update_params_cold_1();
  }
  if (!a3) {
    ktrace_remotetime_update_params_cold_1();
  }
  if (!a5) {
    ktrace_remotetime_update_params_cold_1();
  }
  MEMORY[0x1895F8858]();
  size_t v15 = (char *)v21 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  bzero(v15, v14);
  v21[0] = a6;
  if (sysctl(a3, a4, v15, v21, 0LL, 0LL) < 0)
  {
    int v18 = *__error();
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
      sysctl_number_internal_cold_5();
    }
    *__error() = v18;
    return *__error();
  }

  else if (v21[0] <= a6)
  {
    CFNumberRef v19 = CFNumberCreate(0LL, a7, v15);
    if (v19)
    {
      CFNumberRef v20 = v19;
      CFDictionarySetValue(a1, a2, v19);
      CFRelease(v20);
      memcpy(a5, v15, a6);
      return 0LL;
    }

    else
    {
      return 12LL;
    }
  }

  else
  {
    int v16 = *__error();
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
      sysctl_number_internal_cold_6();
    }
    *__error() = v16;
    return 22LL;
  }

uint64_t sysctl_uint64(__CFDictionary *a1, const void *a2, int *a3, u_int a4, void *a5)
{
  return sysctl_number_internal(a1, a2, a3, a4, a5, 8uLL, kCFNumberSInt64Type);
}

const void *create_dict(UInt8 *bytes, CFIndex length)
{
  CFErrorRef error = 0LL;
  uint64_t v2 = CFDataCreateWithBytesNoCopy(0LL, bytes, length, (CFAllocatorRef)*MEMORY[0x189604DC8]);
  if (!v2) {
    return 0LL;
  }
  unint64_t v3 = v2;
  CFPropertyListRef v4 = CFPropertyListCreateWithData(0LL, v2, 0LL, 0LL, &error);
  if (v4)
  {
    double v5 = v4;
    CFTypeID v6 = CFGetTypeID(v4);
    if (v6 != CFDictionaryGetTypeID())
    {
      int v7 = *__error();
      ktrace_log_init();
      if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
        create_dict_cold_3();
      }
      *__error() = v7;
      CFRelease(v5);
      double v5 = 0LL;
    }
  }

  else
  {
    CFErrorRef v8 = error;
    int v9 = *__error();
    ktrace_log_init();
    BOOL v10 = os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR);
    if (v8)
    {
      if (v10) {
        create_dict_cold_2();
      }
    }

    else if (v10)
    {
      create_dict_cold_1();
    }

    double v5 = 0LL;
    *__error() = v9;
  }

  CFRelease(v3);
  if (error) {
    CFRelease(error);
  }
  return v5;
}

uint64_t dict_string(const __CFDictionary *a1, void *key, __CFDictionary *a3, const void *a4, char **a5)
{
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  if (!key) {
    ktrace_remotetime_update_params_cold_1();
  }
  if (!a5) {
    ktrace_remotetime_update_params_cold_1();
  }
  Value = (const __CFString *)CFDictionaryGetValue(a1, key);
  if (!Value) {
    return 22LL;
  }
  int v9 = Value;
  CFTypeID v10 = CFGetTypeID(Value);
  if (v10 != CFStringGetTypeID())
  {
    int v16 = *__error();
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
      dict_string_cold_5();
    }
    *__error() = v16;
    return 22LL;
  }

  if (a3)
  {
    if (!a4) {
      ktrace_remotetime_update_params_cold_1();
    }
    CFDictionarySetValue(a3, a4, v9);
  }

  CFIndex Length = CFStringGetLength(v9);
  CFIndex v12 = CFStringGetMaximumSizeForEncoding(Length, 0x8000100u) + 1;
  CFStringRef v13 = (char *)malloc(v12);
  if (v13)
  {
    size_t v14 = v13;
    if (CFStringGetCString(v9, v13, v12, 0x8000100u))
    {
      uint64_t result = 0LL;
      *a5 = v14;
      return result;
    }

    free(v14);
    return 22LL;
  }

  return 12LL;
}

uint64_t dict_uint64(const __CFDictionary *a1, void *a2, void *a3)
{
  return dict_number_internal(a1, a2, a3, kCFNumberSInt64Type);
}

uint64_t dict_number_internal(const __CFDictionary *a1, void *key, void *a3, CFNumberType a4)
{
  uint64_t v21 = *MEMORY[0x1895F89C0];
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  if (!key) {
    ktrace_remotetime_update_params_cold_1();
  }
  if (!a3) {
    ktrace_remotetime_update_params_cold_1();
  }
  Value = (const __CFNumber *)CFDictionaryGetValue(a1, key);
  if (!Value) {
    return 22LL;
  }
  CFErrorRef v8 = Value;
  CFTypeID v9 = CFGetTypeID(Value);
  if (v9 == CFNumberGetTypeID())
  {
    if (!CFNumberGetValue(v8, a4, a3))
    {
      int v10 = *__error();
      ktrace_log_init();
      uint64_t v11 = (os_log_s *)ktrace_log;
      if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
      {
        int v15 = 138412802;
        int v16 = v8;
        __int16 v17 = 2112;
        int v18 = key;
        __int16 v19 = 1024;
        int v20 = v10;
        _os_log_error_impl( &dword_186BA3000,  v11,  OS_LOG_TYPE_ERROR,  "dictionary number %@ at key '%@' is not the right type (%{errno}d)",  (uint8_t *)&v15,  0x1Cu);
      }

      *__error() = v10;
      return 22LL;
    }

    return 0LL;
  }

  if (v9 != CFDataGetTypeID())
  {
    int v13 = *__error();
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
      dict_number_internal_cold_5();
    }
    *__error() = v13;
    return 22LL;
  }

  if (CFDataGetLength(v8) == 4)
  {
    v22.location = 0LL;
    v22.length = 4LL;
    CFDataGetBytes(v8, v22, (UInt8 *)a3);
    return 0LL;
  }

  *__error() = 34;
  int v14 = *__error();
  ktrace_log_init();
  if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
    dict_number_internal_cold_4();
  }
  *__error() = v14;
  return 34LL;
}

uint64_t dict_uint32(const __CFDictionary *a1, void *a2, void *a3)
{
  return dict_number_internal(a1, a2, a3, kCFNumberSInt32Type);
}

uint64_t dict_int(const __CFDictionary *a1, void *a2, void *a3)
{
  return dict_number_internal(a1, a2, a3, kCFNumberIntType);
}

uint64_t dict_BOOL(const __CFDictionary *a1, void *key, BOOL *a3)
{
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  if (!key) {
    ktrace_remotetime_update_params_cold_1();
  }
  if (!a3) {
    ktrace_remotetime_update_params_cold_1();
  }
  Value = (const __CFBoolean *)CFDictionaryGetValue(a1, key);
  if (Value)
  {
    double v5 = Value;
    CFTypeID v6 = CFGetTypeID(Value);
    if (v6 == CFBooleanGetTypeID())
    {
      int v7 = CFBooleanGetValue(v5);
      uint64_t result = 0LL;
      *a3 = v7 != 0;
      return result;
    }

    int v9 = *__error();
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
      dict_BOOL_cold_5();
    }
  }

  else
  {
    int v9 = *__error();
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
      dict_BOOL_cold_4();
    }
  }

  *__error() = v9;
  return 22LL;
}

uint64_t dict_data(const __CFDictionary *a1, const void *a2, UInt8 **a3, CFIndex *a4)
{
  Value = (const __CFData *)CFDictionaryGetValue(a1, a2);
  if (!Value)
  {
    int v14 = *__error();
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
      dict_BOOL_cold_4();
    }
    goto LABEL_11;
  }

  int v7 = Value;
  CFTypeID v8 = CFGetTypeID(Value);
  if (v8 != CFDataGetTypeID())
  {
    int v14 = *__error();
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
      dict_data_cold_2();
    }
LABEL_11:
    *__error() = v14;
    return 22LL;
  }

  size_t Length = CFDataGetLength(v7);
  if (!Length)
  {
    *a3 = 0LL;
    if (a4)
    {
      uint64_t result = 0LL;
      *a4 = 0LL;
      return result;
    }

    return 0LL;
  }

  CFIndex v10 = Length;
  uint64_t v11 = (UInt8 *)malloc(Length);
  if (v11)
  {
    CFIndex v12 = v11;
    v15.location = 0LL;
    v15.length = v10;
    CFDataGetBytes(v7, v15, v11);
    *a3 = v12;
    if (a4)
    {
      uint64_t result = 0LL;
      *a4 = v10;
      return result;
    }

    return 0LL;
  }

  return *__error();
}

CFIndex dict_uint64_arr(const __CFDictionary *a1, void *a2, void *a3, _DWORD *a4)
{
  return dict_number_arr_internal(a1, a2, a3, a4, kCFNumberSInt64Type, 8LL);
}

CFIndex dict_number_arr_internal( const __CFDictionary *a1, void *key, void *a3, _DWORD *a4, CFNumberType a5, uint64_t a6)
{
  uint64_t v31 = *MEMORY[0x1895F89C0];
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  if (!key) {
    ktrace_remotetime_update_params_cold_1();
  }
  if (!a3) {
    ktrace_remotetime_update_params_cold_1();
  }
  Value = (const __CFArray *)CFDictionaryGetValue(a1, key);
  if (!Value)
  {
    int v20 = *__error();
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
      dict_BOOL_cold_4();
    }
    goto LABEL_19;
  }

  uint64_t v11 = Value;
  CFTypeID v12 = CFGetTypeID(Value);
  if (v12 != CFArrayGetTypeID())
  {
    int v20 = *__error();
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
      dict_number_arr_internal_cold_6();
    }
LABEL_19:
    *__error() = v20;
    return 22LL;
  }

  CFIndex result = CFArrayGetCount(v11);
  if (result)
  {
    uint64_t v14 = result;
    uint64_t v26 = (char *)malloc(result * a6);
    if (v26)
    {
      if (v14 < 1)
      {
LABEL_14:
        CFIndex result = 0LL;
        *a3 = v26;
        *a4 = v14;
        return result;
      }

      CFIndex v15 = 0LL;
      unsigned int v16 = 0;
      while (1)
      {
        ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(v11, v15);
        if (!ValueAtIndex)
        {
          int v21 = *__error();
          ktrace_log_init();
          uint64_t v22 = ktrace_log;
          if (!os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
            goto LABEL_28;
          }
          *(_DWORD *)buf = 67109634;
          *(_DWORD *)uint64_t v28 = v16;
          *(_WORD *)&v28[4] = 2112;
          *(void *)&v28[6] = v11;
          __int16 v29 = 1024;
          int v30 = v21;
          uint64_t v23 = "element %u missing from array: %@ (%{errno}d)";
          size_t v24 = (os_log_s *)v22;
LABEL_30:
          _os_log_error_impl(&dword_186BA3000, v24, OS_LOG_TYPE_ERROR, v23, buf, 0x18u);
          goto LABEL_28;
        }

        int v18 = ValueAtIndex;
        CFTypeID v19 = CFGetTypeID(ValueAtIndex);
        if (v19 != CFNumberGetTypeID()) {
          break;
        }
        if (!CFNumberGetValue(v18, a5, &v26[v15 * a6]))
        {
          int v21 = *__error();
          ktrace_log_init();
          uint64_t v25 = ktrace_log;
          if (!os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
            goto LABEL_28;
          }
          *(_DWORD *)buf = 138412802;
          *(void *)uint64_t v28 = v18;
          *(_WORD *)&v28[8] = 1024;
          *(_DWORD *)&_BYTE v28[10] = v16;
          __int16 v29 = 1024;
          int v30 = v21;
          uint64_t v23 = "array number '%@' at index %u is not the right type (%{errno}d)";
          size_t v24 = (os_log_s *)v25;
          goto LABEL_30;
        }

        CFIndex v15 = ++v16;
        if (v14 <= v16) {
          goto LABEL_14;
        }
      }

      int v21 = *__error();
      ktrace_log_init();
      if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
        dict_number_arr_internal_cold_5();
      }
LABEL_28:
      *__error() = v21;
      free(v26);
      return 22LL;
    }

    return *__error();
  }

  else
  {
    *a3 = 0LL;
    *a4 = 0;
  }

  return result;
}

CFIndex dict_uint32_arr(const __CFDictionary *a1, void *a2, void *a3, _DWORD *a4)
{
  return dict_number_arr_internal(a1, a2, a3, a4, kCFNumberSInt32Type, 4LL);
}

CFIndex dict_int_arr(const __CFDictionary *a1, void *a2, void *a3, _DWORD *a4)
{
  return dict_number_arr_internal(a1, a2, a3, a4, kCFNumberIntType, 4LL);
}

uint64_t dict_set_string(__CFDictionary *a1, const void *a2, char *cStr)
{
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  if (!a2) {
    ktrace_remotetime_update_params_cold_1();
  }
  if (cStr) {
    CFStringRef Mutable = CFStringCreateWithCString(0LL, cStr, 0x600u);
  }
  else {
    CFStringRef Mutable = CFStringCreateMutable(0LL, 1LL);
  }
  CFStringRef v6 = Mutable;
  if (Mutable)
  {
    CFDictionarySetValue(a1, a2, Mutable);
    CFRelease(v6);
    return 0LL;
  }

  else
  {
    int v8 = *__error();
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
      dict_set_string_cold_3();
    }
    *__error() = v8;
    return 12LL;
  }

uint64_t dict_set_cfstring(__CFDictionary *a1, const void *a2, CFStringRef theString, char **a4)
{
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  if (!a2) {
    ktrace_remotetime_update_params_cold_1();
  }
  CFIndex Length = CFStringGetLength(theString);
  CFIndex v9 = CFStringGetMaximumSizeForEncoding(Length, 0x8000100u) + 1;
  CFIndex v10 = (char *)malloc(v9);
  if (v10)
  {
    uint64_t v11 = v10;
    if (CFStringGetCString(theString, v10, v9, 0x8000100u))
    {
      if (a4) {
        *a4 = v11;
      }
      else {
        free(v11);
      }
      CFDictionarySetValue(a1, a2, theString);
      return 0LL;
    }

    else
    {
      free(v11);
      return 22LL;
    }
  }

  else
  {
    int v12 = *__error();
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
      dict_set_cfstring_cold_3();
    }
    *__error() = v12;
    return 12LL;
  }

uint64_t dict_set_uint64(__CFDictionary *a1, const void *a2, uint64_t a3)
{
  uint64_t v4 = a3;
  return dict_set_number(a1, a2, &v4, kCFNumberSInt64Type);
}

uint64_t dict_set_number(__CFDictionary *a1, const void *a2, const void *a3, CFNumberType theType)
{
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  if (!a2) {
    ktrace_remotetime_update_params_cold_1();
  }
  if (!a3) {
    ktrace_remotetime_update_params_cold_1();
  }
  CFNumberRef v6 = CFNumberCreate(0LL, theType, a3);
  if (v6)
  {
    CFNumberRef v7 = v6;
    CFDictionarySetValue(a1, a2, v6);
    CFRelease(v7);
    return 0LL;
  }

  else
  {
    int v9 = *__error();
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
      dict_set_number_cold_4();
    }
    *__error() = v9;
    return 22LL;
  }

uint64_t dict_set_uint32(__CFDictionary *a1, const void *a2, int a3)
{
  int v4 = a3;
  return dict_set_number(a1, a2, &v4, kCFNumberSInt32Type);
}

uint64_t dict_set_int(__CFDictionary *a1, const void *a2, int a3)
{
  int v4 = a3;
  return dict_set_number(a1, a2, &v4, kCFNumberIntType);
}

uint64_t dict_set_BOOL(__CFDictionary *a1, const void *a2, int a3)
{
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  if (!a2) {
    ktrace_remotetime_update_params_cold_1();
  }
  unint64_t v3 = (const void **)MEMORY[0x189604DE8];
  if (!a3) {
    unint64_t v3 = (const void **)MEMORY[0x189604DE0];
  }
  CFDictionarySetValue(a1, a2, *v3);
  return 0LL;
}

uint64_t dict_set_data(__CFDictionary *a1, const void *a2, UInt8 *bytes, CFIndex length)
{
  CFDataRef v6 = CFDataCreate(0LL, bytes, length);
  if (!v6) {
    return 12LL;
  }
  CFDataRef v7 = v6;
  CFDictionarySetValue(a1, a2, v6);
  CFRelease(v7);
  return 0LL;
}

uint64_t dict_set_uint64_arr(__CFDictionary *a1, const void *a2, char *a3, CFIndex a4)
{
  return dict_set_number_arr(a1, a2, a3, a4, 8LL, kCFNumberSInt64Type);
}

uint64_t dict_set_number_arr( __CFDictionary *a1, const void *a2, char *a3, CFIndex capacity, uint64_t a5, CFNumberType a6)
{
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  if (!a2) {
    ktrace_remotetime_update_params_cold_1();
  }
  int v9 = capacity;
  uint64_t v12 = capacity;
  CFMutableArrayRef Mutable = CFArrayCreateMutable(0LL, capacity, MEMORY[0x189605228]);
  if (Mutable)
  {
    uint64_t v14 = Mutable;
    if (a3 && v9)
    {
      uint64_t v15 = 0LL;
      while (1)
      {
        CFNumberRef v16 = CFNumberCreate(0LL, a6, a3);
        if (!v16) {
          break;
        }
        CFNumberRef v17 = v16;
        CFArrayAppendValue(v14, v16);
        CFRelease(v17);
        ++v15;
        a3 += a5;
        if (v12 == v15) {
          goto LABEL_9;
        }
      }

      uint64_t v20 = *__error();
      ktrace_log_init();
      int v21 = (os_log_s *)ktrace_log;
      if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
        dict_set_number_arr_cold_4(v15, v20, v21);
      }
      *__error() = v20;
      uint64_t v18 = 22LL;
    }

    else
    {
LABEL_9:
      CFDictionarySetValue(a1, a2, v14);
      uint64_t v18 = 0LL;
    }

    CFRelease(v14);
  }

  else
  {
    int v19 = *__error();
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
      dict_set_number_arr_cold_3();
    }
    *__error() = v19;
    return 22LL;
  }

  return v18;
}

uint64_t dict_set_uint32_arr(__CFDictionary *a1, const void *a2, char *a3, CFIndex a4)
{
  return dict_set_number_arr(a1, a2, a3, a4, 4LL, kCFNumberSInt32Type);
}

uint64_t dict_set_int_arr(__CFDictionary *a1, const void *a2, char *a3, CFIndex a4)
{
  return dict_set_number_arr(a1, a2, a3, a4, 4LL, kCFNumberIntType);
}

UInt8 *aasprintf(char *a1, ...)
{
  bytes[0] = 0LL;
  va_copy((va_list)&bytes[1], va);
  vasprintf((char **)bytes, a1, va);
  if (!bytes[0]) {
    ktrace_remotetime_update_params_cold_1();
  }
  CFDataRef v1 = CFDataCreateWithBytesNoCopy(0LL, bytes[0], 1LL, (CFAllocatorRef)*MEMORY[0x189604DB8]);
  CFAutorelease(v1);
  return bytes[0];
}

CFStringRef cfaasprintf(char *a1, ...)
{
  __s[0] = 0LL;
  va_copy((va_list)&__s[1], va);
  vasprintf(__s, a1, va);
  if (!__s[0]) {
    ktrace_remotetime_update_params_cold_1();
  }
  size_t v1 = strlen(__s[0]);
  CFStringRef v2 = CFStringCreateWithBytesNoCopy( 0LL,  (const UInt8 *)__s[0],  v1,  0x8000100u,  0,  (CFAllocatorRef)*MEMORY[0x189604DB8]);
  if (!v2) {
    ktrace_remotetime_update_params_cold_1();
  }
  CFStringRef v3 = v2;
  CFAutorelease(v2);
  return v3;
}

char *utf8_nullable(const __CFString *a1)
{
  if (a1) {
    return utf8(a1);
  }
  else {
    return "<null>";
  }
}

char *utf8(const __CFString *a1)
{
  CStringPtr = (char *)CFStringGetCStringPtr(a1, 0x8000100u);
  if (!CStringPtr)
  {
    CFIndex v3 = CFStringGetLength(a1) + 1;
    int v4 = (char *)malloc(v3);
    if (!v4) {
      ktrace_remotetime_update_params_cold_1();
    }
    CStringPtr = v4;
    if (!CFStringGetCString(a1, v4, v3, 0x8000100u))
    {
      CFIndex Length = CFStringGetLength(a1);
      CFIndex v6 = CFStringGetMaximumSizeForEncoding(Length, 0x8000100u) + 1;
      free(CStringPtr);
      CFDataRef v7 = (char *)malloc(v6);
      if (!v7) {
        ktrace_remotetime_update_params_cold_1();
      }
      CStringPtr = v7;
      if (!CFStringGetCString(a1, v7, v6, 0x8000100u)) {
        ktrace_remotetime_update_params_cold_1();
      }
    }

    CFDataRef v8 = CFDataCreateWithBytesNoCopy(0LL, (const UInt8 *)CStringPtr, 1LL, (CFAllocatorRef)*MEMORY[0x189604DB8]);
    CFAutorelease(v8);
  }

  return CStringPtr;
}

char *uuid_string(uint64_t a1, uint64_t a2)
{
  v5[0] = a1;
  v5[1] = a2;
  CFStringRef v2 = (char *)calloc(1uLL, 0x25uLL);
  uuid_unparse((const unsigned __int8 *)v5, v2);
  CFDataRef v3 = CFDataCreateWithBytesNoCopy(0LL, (const UInt8 *)v2, 1LL, (CFAllocatorRef)*MEMORY[0x189604DB8]);
  CFAutorelease(v3);
  return v2;
}

uint64_t CFSetApplierTrampoline(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 16))(a2, a1);
}

uint64_t CFDictionaryApplierTrampoline(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a3 + 16))(a3, a1, a2);
}

uint64_t CFArrayApplierTrampoline(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 16))(a2, a1);
}

void OUTLINED_FUNCTION_0_1(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
}

  ;
}

  ;
}

void OUTLINED_FUNCTION_5(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
}

  ;
}

uint64_t ktrace_chunk_tag(uint64_t a1)
{
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  return *(unsigned int *)(a1 + 32);
}

uint64_t ktrace_chunk_version_major(uint64_t a1)
{
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  return *(_WORD *)(a1 + 36) & 0x7FFF;
}

uint64_t ktrace_chunk_version_minor(uint64_t a1)
{
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  return *(unsigned __int16 *)(a1 + 38);
}

uint64_t ktrace_chunk_size(uint64_t a1)
{
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  return *(void *)(a1 + 8);
}

uint64_t ktrace_chunk_is_64_bit(uint64_t a1)
{
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  if (*(void *)a1) {
    return *(unsigned __int8 *)(*(void *)a1 + 298LL);
  }
  else {
    return current_system_is_64_bit();
  }
}

uint64_t ktrace_chunk_copy_data(uint64_t *a1, uint64_t a2, void *a3, size_t a4)
{
  uint64_t v16 = *MEMORY[0x1895F89C0];
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  if (!a3) {
    ktrace_remotetime_update_params_cold_1();
  }
  if (!a4) {
    ktrace_remotetime_update_params_cold_1();
  }
  size_t v6 = a1[1];
  if (v6 < a4) {
    ktrace_remotetime_update_params_cold_1();
  }
  if (a2 < 0) {
    ktrace_remotetime_update_params_cold_1();
  }
  if (a4 + a2 > v6) {
    ktrace_remotetime_update_params_cold_1();
  }
  uint64_t v8 = *a1;
  if (!*a1) {
    return 45LL;
  }
  ktrace_log_init();
  int v9 = (os_log_s *)ktrace_file_log;
  if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v11 = a1[2] + a2;
    int v12 = 134218240;
    size_t v13 = a4;
    __int16 v14 = 2048;
    uint64_t v15 = v11;
    _os_log_debug_impl( &dword_186BA3000,  v9,  OS_LOG_TYPE_DEBUG,  "cannot read %zu bytes at offset %lld",  (uint8_t *)&v12,  0x16u);
  }

  return *__error();
}

const UInt8 *ktrace_chunk_map_data(uint64_t *a1, unint64_t a2, unint64_t a3)
{
  uint64_t v36 = *MEMORY[0x1895F89C0];
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  uint64_t v4 = *a1;
  if (!*a1)
  {
    *__error() = 45;
    int v12 = *__error();
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR)) {
      ktrace_chunk_map_data_cold_2();
    }
    goto LABEL_17;
  }

  if (!a3)
  {
    *__error() = 22;
    int v12 = *__error();
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR)) {
      ktrace_chunk_map_data_cold_3();
    }
LABEL_17:
    size_t v13 = __error();
    CFIndex result = 0LL;
    *size_t v13 = v12;
    return result;
  }

  if ((a2 & 0x8000000000000000LL) != 0) {
    ktrace_remotetime_update_params_cold_1();
  }
  unint64_t v7 = a1[1];
  if (v7 <= a2) {
    ktrace_remotetime_update_params_cold_1();
  }
  if (v7 < a3) {
    ktrace_remotetime_update_params_cold_1();
  }
  if (a3 + a2 > v7) {
    ktrace_remotetime_update_params_cold_1();
  }
  if (v4 == -1) {
    return CFDataGetBytePtr((CFDataRef)a1[2]);
  }
  uint64_t v8 = a1[2] + a2;
  uint64_t v9 = *(void *)(v4 + 240);
  if (v9)
  {
    unint64_t v10 = *(void *)(v4 + 280);
    if (v8 + a3 > v10) {
      ktrace_remotetime_update_params_cold_1();
    }
    return (const UInt8 *)(v9 + v8);
  }

  int v14 = getpagesize();
  if (v14 <= 0) {
    ktrace_remotetime_update_params_cold_1();
  }
  uint64_t v15 = v8 & (v14 - 1);
  off_t v16 = v8 & -v14;
  if (*(_BYTE *)(v4 + 301))
  {
    CFNumberRef v17 = (char *)mmap(0LL, v15 + a3, 1, 1, *(_DWORD *)(v4 + 196), v16);
LABEL_22:
  }

  else
  {
    uint64_t v18 = (char *)mmap(0LL, v15 + a3, 3, 4098, -1, 0LL);
    if (v18 != (char *)-1LL)
    {
      CFNumberRef v17 = v18;
      if (!(v15 + a3)) {
        return (const UInt8 *)&v17[v15];
      }
      off_t v19 = v16;
      uint64_t v20 = v18;
      size_t v21 = v15 + a3;
      while (1)
      {
        ssize_t v22 = pread(*(_DWORD *)(*a1 + 196), v20, v21, v19);
        if (!v22) {
          break;
        }
        if (v22 <= 0) {
          goto LABEL_33;
        }
        if (v21 < v22) {
          ktrace_chunk_map_data_cold_6();
        }
        v20 += v22;
        v19 += v22;
        v21 -= v22;
        if (!v21) {
          goto LABEL_22;
        }
      }

      *__error() = 5;
LABEL_33:
      munmap(v17, v15 + a3);
    }
  }

  int v23 = *__error();
  ktrace_log_init();
  size_t v24 = (os_log_s *)ktrace_file_log;
  if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR))
  {
    int v26 = 134219008;
    uint64_t v27 = v15 + a3;
    __int16 v28 = 2048;
    unint64_t v29 = a3;
    __int16 v30 = 2048;
    off_t v31 = v16;
    __int16 v32 = 2048;
    unint64_t v33 = a2;
    __int16 v34 = 1024;
    int v35 = v23;
    _os_log_error_impl( &dword_186BA3000,  v24,  OS_LOG_TYPE_ERROR,  "failed to map %zu (%zu) bytes chunk data at offset %lld (%lld) (%{errno}d)",  (uint8_t *)&v26,  0x30u);
  }

  uint64_t v25 = __error();
  CFIndex result = 0LL;
  *uint64_t v25 = v23;
  return result;
}

uint64_t ktrace_chunk_unmap_data(uint64_t result, unint64_t a2, uint64_t a3)
{
  if (!result) {
    ktrace_remotetime_update_params_cold_1();
  }
  return result;
}

uint64_t ktrace_chunk_unmap_data_internal(unint64_t a1, uint64_t a2)
{
  int v4 = getpagesize();
  if (v4 <= 0) {
    ktrace_remotetime_update_params_cold_1();
  }
  uint64_t result = munmap((void *)(-v4 & a1), ((v4 - 1) & a1) + a2);
  if ((_DWORD)result) {
    ktrace_chunk_unmap_data_internal_cold_1();
  }
  return result;
}

CFDataRef ktrace_chunk_copy_cfdata(uint64_t a1, unint64_t a2, void *a3)
{
  if (*(void *)a1 == -1LL)
  {
    CFRetain(*(CFTypeRef *)(a1 + 16));
    return *(CFDataRef *)(a1 + 16);
  }

  else
  {
    double v5 = ktrace_chunk_map_data((uint64_t *)a1, a2, (unint64_t)a3);
    if (v5)
    {
      size_t v6 = v5;
      v11.version = 0LL;
      memset(&v11.retain, 0, 40);
      v11.info = a3;
      v11.deallocate = (CFAllocatorDeallocateCallBack)callback_unmap_chunk;
      v11.preferredSize = 0LL;
      unint64_t v7 = CFAllocatorCreate(0LL, &v11);
      if (!v7) {
        ktrace_remotetime_update_params_cold_1();
      }
      uint64_t v8 = v7;
      CFDataRef v9 = CFDataCreateWithBytesNoCopy(0LL, v6, (CFIndex)a3, v7);
      CFRelease(v8);
    }

    else
    {
      return 0LL;
    }
  }

  return v9;
}

CFPropertyListRef ktrace_chunk_copy_plist(uint64_t a1)
{
  CFStringRef v2 = (void *)ktrace_chunk_size(a1);
  CFDataRef v3 = ktrace_chunk_copy_cfdata(a1, 0LL, v2);
  if (v3)
  {
    int v4 = v3;
    CFErrorRef error = 0LL;
    CFPropertyListRef v5 = CFPropertyListCreateWithData(0LL, v3, 0LL, 0LL, &error);
    CFRelease(v4);
    if (!v5)
    {
      int v6 = *__error();
      ktrace_log_init();
      unint64_t v7 = (os_log_s *)ktrace_log;
      if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
        ktrace_chunk_copy_plist_cold_2(&error, v6, v7);
      }
      *__error() = v6;
      CFRelease(error);
    }
  }

  else
  {
    int v8 = *__error();
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
      ktrace_chunk_copy_plist_cold_1();
    }
    CFPropertyListRef v5 = 0LL;
    *__error() = v8;
  }

  return v5;
}

const char *utf8_cferror(__CFError *a1)
{
  if (!a1) {
    return "unknown error";
  }
  size_t v1 = CFErrorCopyDescription(a1);
  if (!v1) {
    return "unknown error";
  }
  CFStringRef v2 = v1;
  CFDataRef v3 = utf8(v1);
  CFRelease(v2);
  return v3;
}

uint64_t ktrace_chunk_overwrite(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  uint64_t v17 = *MEMORY[0x1895F89C0];
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  if (!a3) {
    ktrace_remotetime_update_params_cold_1();
  }
  if (!a4) {
    ktrace_remotetime_update_params_cold_1();
  }
  if (a4 + a2 > *(void *)(a1 + 8)) {
    return 34LL;
  }
  uint64_t v9 = *(void *)a1;
  if (!*(void *)a1) {
    return 45LL;
  }
  if (v9 == -1)
  {
    BytePtr = CFDataGetBytePtr(*(CFDataRef *)(a1 + 16));
    memcpy((void *)&BytePtr[a2], a3, a4);
    return 0LL;
  }

  if (ktrace_file_write(v9, a3, a4, *(void *)(a1 + 16) + a2) >= a4) {
    return 0LL;
  }
  ktrace_log_init();
  CFAllocatorContext v11 = (os_log_s *)ktrace_file_log;
  if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v12 = *(void *)(a1 + 16) + a2;
    int v13 = 134218240;
    size_t v14 = a4;
    __int16 v15 = 2048;
    uint64_t v16 = v12;
    _os_log_debug_impl( &dword_186BA3000,  v11,  OS_LOG_TYPE_DEBUG,  "cannot write %zu bytes at offset %lld",  (uint8_t *)&v13,  0x16u);
  }

  return *__error();
}

uint64_t ktrace_chunk_has_subchunks(uint64_t a1)
{
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  return *(unsigned __int16 *)(a1 + 36) >> 15;
}

uint64_t ktrace_chunk_iterate_subchunks(uint64_t *a1, void *a2, uint64_t a3)
{
  uint64_t v12 = a2;
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  uint64_t v5 = (uint64_t)(a1 + 6);
  uint64_t v6 = ktrace_chunk_array_validate_chunk(*a1, (uint64_t)(a1 + 6), &v12);
  if ((_DWORD)v6)
  {
    uint64_t v7 = v6;
    int v8 = *__error();
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR)) {
      ktrace_chunk_iterate_subchunks_cold_3();
    }
    *__error() = v8;
  }

  else
  {
    if (v12)
    {
      do
      {
      }

      while (!ktrace_chunk_array_next(*a1, v5, &v12) && v12 != 0LL);
    }

    else
    {
      ktrace_log_init();
      unint64_t v10 = (os_log_s *)ktrace_file_log;
      if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_DEBUG)) {
        ktrace_chunk_iterate_subchunks_cold_2(v10);
      }
    }

    return 0LL;
  }

  return v7;
}

void ktrace_chunk_destroy(void *a1)
{
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  if (*a1 != -1LL) {
    ktrace_remotetime_update_params_cold_1();
  }
  CFStringRef v2 = (const void *)a1[2];
  if (v2) {
    CFRelease(v2);
  }
  free(a1);
}

void kteventnames_append(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(a1 + 32) & 1) == 0) {
    ktrace_remotetime_update_params_cold_1();
  }
  if ((*(_BYTE *)(a1 + 32) & 2) != 0 || (byte_18C6A3218 & 6) == 6)
  {
    append_eventnames_from_dir(a2, "/usr/share/misc");
    append_eventnames_from_dir(a2, "/usr/local/share/misc");
  }

  int v4 = *(const __CFArray **)(a1 + 16);
  v9.length = CFArrayGetCount(v4);
  uint64_t v5 = MEMORY[0x1895F87A8];
  context[0] = MEMORY[0x1895F87A8];
  context[1] = 3221225472LL;
  context[2] = __kteventnames_append_block_invoke;
  context[3] = &__block_descriptor_40_e9_v16__0_v8l;
  context[4] = a2;
  v9.location = 0LL;
  CFArrayApplyFunction(v4, v9, (CFArrayApplierFunction)CFArrayApplierTrampoline, context);
  uint64_t v6 = *(const __CFArray **)(a1 + 24);
  v10.length = CFArrayGetCount(v6);
  v7[0] = v5;
  v7[1] = 3221225472LL;
  v7[2] = __kteventnames_append_block_invoke_2;
  v7[3] = &__block_descriptor_40_e9_v16__0_v8l;
  v7[4] = a2;
  v10.location = 0LL;
  CFArrayApplyFunction(v6, v10, (CFArrayApplierFunction)CFArrayApplierTrampoline, v7);
}

uint64_t kteventnames_using_default(uint64_t a1)
{
  else {
    return 1LL;
  }
}

DIR *__kteventnames_append_block_invoke(uint64_t a1, char *a2)
{
  return append_eventnames_from_dir(*(void *)(a1 + 32), a2);
}

DIR *append_eventnames_from_dir(uint64_t a1, char *a2)
{
  uint64_t v9 = *MEMORY[0x1895F89C0];
  uint64_t result = opendir(a2);
  if (result)
  {
    uint64_t v5 = result;
    for (uint64_t i = readdir(result); i; uint64_t i = readdir(v5))
    {
      d_name = i->d_name;
      if (issuffix(i->d_name, ".codes"))
      {
        snprintf(__str, 0x400uLL, "%s/%s", a2, d_name);
        append_eventnames_from_path(a1, __str);
      }
    }

    return (DIR *)closedir(v5);
  }

  return result;
}

_DWORD *__kteventnames_append_block_invoke_2(uint64_t a1, char *a2)
{
  return append_eventnames_from_path(*(void *)(a1 + 32), a2);
}

_DWORD *append_eventnames_from_path(uint64_t a1, char *a2)
{
  uint64_t result = ktrace_file_append_file(a1, 32783, 0, 0, a2, 0LL, 0x7FFFFFFFFFFFFFFFLL);
  if (!result)
  {
    int v4 = *__error();
    ktrace_log_init();
    uint64_t v5 = (os_log_s *)ktrace_log;
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
      append_eventnames_from_path_cold_1((uint64_t)a2, v4, v5);
    }
    uint64_t result = __error();
    _DWORD *result = v4;
  }

  return result;
}

uint64_t kteventnames_add_path(CFMutableDictionaryRef *a1, char *a2)
{
  uint64_t v4 = kteventnames_add_path_locked(a1, a2);
  if (!(_DWORD)v4)
  {
    uint64_t v5 = strdup(a2);
    if (!v5) {
      ktrace_remotetime_update_params_cold_1();
    }
    CFArrayAppendValue(a1[3], v5);
  }

  os_unfair_lock_unlock((os_unfair_lock_t)&global);
  return v4;
}

uint64_t kteventnames_add_path_locked(CFMutableDictionaryRef *a1, char *__filename)
{
  CFDataRef v3 = fopen(__filename, "r");
  if (!v3) {
    return *__error();
  }
  uint64_t v4 = v3;
  kteventnames_add_stream(a1, v3);
  fclose(v4);
  return 0LL;
}

BOOL kteventnames_add_chunks(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(a1 + 32) & 6) != 2) {
    return 0LL;
  }
  os_unfair_lock_lock((os_unfair_lock_t)&global);
  uint64_t v12 = 0LL;
  int v13 = &v12;
  uint64_t v14 = 0x2020000000LL;
  int v15 = 0;
  v11[0] = MEMORY[0x1895F87A8];
  v11[1] = 3221225472LL;
  v11[2] = __kteventnames_add_chunks_block_invoke;
  v11[3] = &unk_189F54E30;
  v11[4] = &v12;
  v11[5] = a1;
  LODWORD(a2) = ktrace_file_iterate(a2, 0LL, (uint64_t)v11, v4, v5, v6, v7, v8);
  os_unfair_lock_unlock((os_unfair_lock_t)&global);
  if ((_DWORD)a2) {
    BOOL v9 = 1LL;
  }
  else {
    BOOL v9 = *((_DWORD *)v13 + 6) != 0;
  }
  _Block_object_dispose(&v12, 8);
  return v9;
}

void sub_186BA9F4C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

uint64_t __kteventnames_add_chunks_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v38 = *MEMORY[0x1895F89C0];
  if (ktrace_chunk_tag(a2) == 20986)
  {
    uint64_t v4 = *(CFMutableDictionaryRef **)(a1 + 40);
    uint64_t v5 = (void *)ktrace_chunk_copy_plist(a2);
    context = (void *)MEMORY[0x186E45FA0]();
    uint64_t v27 = v5;
    if (v5)
    {
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
      {
        __int128 v34 = 0u;
        __int128 v35 = 0u;
        __int128 v32 = 0u;
        __int128 v33 = 0u;
        uint64_t v6 = (void *)objc_msgSend(v5, "allValues", context);
        uint64_t v7 = [v6 countByEnumeratingWithState:&v32 objects:v37 count:16];
        if (v7)
        {
          uint64_t v8 = v7;
          uint64_t v9 = *(void *)v33;
          do
          {
            for (uint64_t i = 0LL; i != v8; ++i)
            {
              if (*(void *)v33 != v9) {
                objc_enumerationMutation(v6);
              }
              CFAllocatorContext v11 = *(void **)(*((void *)&v32 + 1) + 8 * i);
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0)
              {
                __int128 v30 = 0u;
                __int128 v31 = 0u;
                __int128 v28 = 0u;
                __int128 v29 = 0u;
                uint64_t v12 = [v11 countByEnumeratingWithState:&v28 objects:v36 count:16];
                if (v12)
                {
                  uint64_t v13 = v12;
                  uint64_t v14 = *(void *)v29;
                  do
                  {
                    for (uint64_t j = 0LL; j != v13; ++j)
                    {
                      if (*(void *)v29 != v14) {
                        objc_enumerationMutation(v11);
                      }
                      kteventnames_add_track(v4, 0LL, *(void **)(*((void *)&v28 + 1) + 8 * j));
                    }

                    uint64_t v13 = [v11 countByEnumeratingWithState:&v28 objects:v36 count:16];
                  }

                  while (v13);
                }
              }
            }

            uint64_t v8 = [v6 countByEnumeratingWithState:&v32 objects:v37 count:16];
          }

          while (v8);
        }
      }
    }

    objc_autoreleasePoolPop(context);
  }

  else if (ktrace_chunk_tag(a2) == 32783 && !ktrace_chunk_version_major(a2))
  {
    uint64_t v16 = (void *)ktrace_chunk_size_t(a2);
    uint64_t v17 = ktrace_chunk_copy_cfdata(a2, 0LL, v16);
    if (!v17)
    {
      uint64_t v25 = __error();
      uint64_t result = 0LL;
      *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = *v25;
      return result;
    }

    uint64_t v18 = v17;
    off_t v19 = *(CFMutableDictionaryRef **)(a1 + 40);
    BytePtr = (UInt8 *)CFDataGetBytePtr(v17);
    size_t Length = CFDataGetLength(v18);
    ssize_t v22 = fmemopen(BytePtr, Length, "r");
    if (!v22) {
      ktrace_remotetime_update_params_cold_1();
    }
    int v23 = v22;
    kteventnames_add_stream(v19, v22);
    fclose(v23);
    CFRelease(v18);
    *(_BYTE *)(*(void *)(a1 + 40) + 32LL) |= 4u;
  }

  return 1LL;
}

BOOL kteventnames_from_system(uint64_t a1)
{
  return (*(_BYTE *)(a1 + 32) & 4) == 0;
}

uint64_t kteventnames_use_default(uint64_t result, int a2)
{
  if ((*(_BYTE *)(result + 32) & 1) != 0) {
    ktrace_remotetime_update_params_cold_1();
  }
  if (a2) {
    char v2 = 2;
  }
  else {
    char v2 = 0;
  }
  *(_BYTE *)(result + 32) = *(_BYTE *)(result + 32) & 0xFD | v2;
  return result;
}

uint64_t kteventnames_using_global(uint64_t a1)
{
  unsigned int v1 = *(unsigned __int8 *)(a1 + 32);
  if ((v1 & 4) != 0) {
    return 0LL;
  }
  unsigned int v2 = (v1 >> 1) & 1;
  else {
    return 1LL;
  }
}

CFMutableArrayRef kteventnames_init(uint64_t a1)
{
  *(void *)(a1 + 32) = 0LL;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_BYTE *)(a1 + 32) = 2;
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0LL, 0LL, &str_no_free_key_callbacks, &int_value_callbacks);
  *(void *)a1 = Mutable;
  if (!Mutable) {
    ktrace_remotetime_update_params_cold_1();
  }
  CFMutableDictionaryRef v3 = CFDictionaryCreateMutable(0LL, 0LL, &int_key_callbacks, &str_no_free_value_callbacks);
  *(void *)(a1 + _Block_object_dispose(va, 8) = v3;
  if (!v3) {
    ktrace_remotetime_update_params_cold_1();
  }
  CFMutableArrayRef v4 = CFArrayCreateMutable(0LL, 0LL, &free_array_callbacks);
  *(void *)(a1 + 16) = v4;
  if (!v4) {
    ktrace_remotetime_update_params_cold_1();
  }
  CFMutableArrayRef result = CFArrayCreateMutable(0LL, 0LL, &free_array_callbacks);
  *(void *)(a1 + 24) = result;
  if (!result) {
    ktrace_remotetime_update_params_cold_1();
  }
  return result;
}

void kteventnames_freeze(uint64_t *a1)
{
  char v2 = *((_BYTE *)a1 + 32);
  if ((v2 & 4) == 0 && ((a1[4] & 2) != 0 || (byte_18C6A3218 & 6) == 6))
  {
    ensure_global_names_locked();
    uint64_t v3 = *a1;
    uint64_t v4 = MEMORY[0x1895F87A8];
    uint64_t context = MEMORY[0x1895F87A8];
    uint64_t v7 = 3221225472LL;
    uint64_t v8 = __copy_cfdict_block_invoke;
    uint64_t v9 = &__block_descriptor_40_e15_v24__0r_v8r_v16l;
    uint64_t v10 = v3;
    CFDictionaryApplyFunction( (CFDictionaryRef)qword_18C6A31F0,  (CFDictionaryApplierFunction)CFDictionaryApplierTrampoline,  &context);
    uint64_t v5 = a1[1];
    uint64_t context = v4;
    uint64_t v7 = 3221225472LL;
    uint64_t v8 = __copy_cfdict_block_invoke;
    uint64_t v9 = &__block_descriptor_40_e15_v24__0r_v8r_v16l;
    uint64_t v10 = v5;
    CFDictionaryApplyFunction( (CFDictionaryRef)qword_18C6A31F8,  (CFDictionaryApplierFunction)CFDictionaryApplierTrampoline,  &context);
    char v2 = *((_BYTE *)a1 + 32);
  }

  *((_BYTE *)a1 + 32) = v2 | 1;
  os_unfair_lock_unlock((os_unfair_lock_t)&global);
}

const void *kteventnames_name_from_id(uint64_t a1, void *key)
{
  unint64_t v3 = key;
  CFMutableArrayRef result = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 8), (const void *)key);
  if (!result)
  {
    if ((*(_BYTE *)(a1 + 32) & 5) == 0 && ((*(_BYTE *)(a1 + 32) & 2) != 0 || (byte_18C6A3218 & 6) == 6))
    {
      os_unfair_lock_lock((os_unfair_lock_t)&global);
      ensure_global_names_locked();
      Value = CFDictionaryGetValue((CFDictionaryRef)qword_18C6A31F8, (const void *)v3);
      os_unfair_lock_unlock((os_unfair_lock_t)&global);
      return Value;
    }

    else
    {
      return 0LL;
    }
  }

  return result;
}

void ensure_global_names_locked()
{
  v31[1] = *MEMORY[0x1895F89C0];
  if ((byte_18C6A3218 & 1) != 0) {
    return;
  }
  kteventnames_init((uint64_t)&qword_18C6A31F0);
  v0 = opendir("/AppleInternal/Library/Ariadne/Plists/");
  if (!v0) {
    goto LABEL_26;
  }
  unsigned int v1 = v0;
  while (1)
  {
    char v2 = readdir(v1);
    if (!v2) {
      break;
    }
    d_name = v2->d_name;
    if (issuffix(v2->d_name, ".plist"))
    {
      snprintf(__str, 0x400uLL, "%s/%s", "/AppleInternal/Library/Ariadne/Plists/", d_name);
      id v23 = 0LL;
      uint64_t v4 = (void *)[NSString stringWithUTF8String:__str];
      if ([v4 hasSuffix:@".plist"])
      {
        uint64_t v5 = (void *)[MEMORY[0x189603F80] inputStreamWithFileAtPath:v4];
        if (!v5)
        {
          *__error() = 2;
          int v12 = *__error();
          ktrace_log_init();
          uint64_t v13 = ktrace_log;
          if (!os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
            goto LABEL_22;
          }
          *(_DWORD *)buf = 136315394;
          int v26 = __str;
          __int16 v27 = 1024;
          LODWORD(v2_Block_object_dispose(va, 8) = v12;
          uint64_t v14 = (os_log_s *)v13;
          int v15 = "failed to open file at %s (%{errno}d)";
          uint32_t v16 = 18;
          goto LABEL_24;
        }

        uint64_t v6 = v5;
        [v5 open];
        uint64_t v7 = (void *)[MEMORY[0x1896079E8] propertyListWithStream:v6 options:0 format:0 error:&v23];
        [v6 close];
        if (v7)
        {
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) != 0)
          {
            v31[0] = v7;
            uint64_t v7 = (void *)[MEMORY[0x189603F18] arrayWithObjects:v31 count:1];
          }

          __int128 v21 = 0u;
          __int128 v22 = 0u;
          __int128 v19 = 0u;
          __int128 v20 = 0u;
          uint64_t v8 = [v7 countByEnumeratingWithState:&v19 objects:buf count:16];
          if (v8)
          {
            uint64_t v9 = v8;
            uint64_t v10 = *(void *)v20;
            do
            {
              for (uint64_t i = 0LL; i != v9; ++i)
              {
                if (*(void *)v20 != v10) {
                  objc_enumerationMutation(v7);
                }
                kteventnames_add_track( (CFMutableDictionaryRef *)&qword_18C6A31F0,  0LL,  *(void **)(*((void *)&v19 + 1) + 8 * i));
              }

              uint64_t v9 = [v7 countByEnumeratingWithState:&v19 objects:buf count:16];
            }

            while (v9);
          }
        }

        else
        {
          *__error() = 79;
          int v12 = *__error();
          ktrace_log_init();
          uint64_t v17 = ktrace_log;
          if (!os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
            goto LABEL_22;
          }
          uint64_t v18 = objc_msgSend((id)objc_msgSend(v23, "localizedDescription"), "UTF8String");
          *(_DWORD *)buf = 136315650;
          int v26 = __str;
          __int16 v27 = 2080;
          uint64_t v28 = v18;
          __int16 v29 = 1024;
          int v30 = v12;
          uint64_t v14 = (os_log_s *)v17;
          int v15 = "failed to read Ariadne signpost file at %s as plist: %s (%{errno}d)";
          uint32_t v16 = 28;
LABEL_24:
          _os_log_error_impl(&dword_186BA3000, v14, OS_LOG_TYPE_ERROR, v15, buf, v16);
LABEL_22:
          *__error() = v12;
          __error();
        }
      }
    }
  }

  closedir(v1);
LABEL_26:
  kteventnames_add_dir("/usr/share/misc");
  kteventnames_add_dir("/usr/local/share/misc");
  byte_18C6A3218 |= 1u;
}

const void *kteventnames_id_from_name(uint64_t a1, const void *a2)
{
  Value = CFDictionaryGetValue(*(CFDictionaryRef *)a1, a2);
  if (!(_DWORD)Value)
  {
    if ((*(_BYTE *)(a1 + 32) & 5) == 0 && ((*(_BYTE *)(a1 + 32) & 2) != 0 || (byte_18C6A3218 & 6) == 6))
    {
      os_unfair_lock_lock((os_unfair_lock_t)&global);
      ensure_global_names_locked();
      Value = CFDictionaryGetValue((CFDictionaryRef)qword_18C6A31F0, a2);
      os_unfair_lock_unlock((os_unfair_lock_t)&global);
    }

    else
    {
      return 0LL;
    }
  }

  return Value;
}

void kteventnames_destroy(CFTypeRef *a1)
{
}

void ktrace_set_default_event_names_enabled(int a1)
{
  if (a1 == 1) {
    char v2 = 6;
  }
  else {
    char v2 = 2;
  }
  byte_18C6A3218 = v2 | byte_18C6A3218 & 0xF9;
  os_unfair_lock_unlock((os_unfair_lock_t)&global);
}

BOOL ktrace_get_default_event_names_enabled()
{
  return (~byte_18C6A3218 & 6) == 0;
}

uint64_t ktrace_add_codes_file(char *a1)
{
  return kteventnames_add_path((CFMutableDictionaryRef *)&qword_18C6A31F0, a1);
}

char *issuffix(const char *a1, const char *a2)
{
  CFMutableArrayRef result = strrchr(a1, *a2);
  if (result) {
    return (char *)(strcmp(result, a2) == 0);
  }
  return result;
}

void kteventnames_add_stream(CFMutableDictionaryRef *a1, FILE *__stream)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  size_t __linecapp = 0LL;
  __linep = 0LL;
  if (getline(&__linep, &__linecapp, __stream) >= 1)
  {
    do
    {
      uint64_t v4 = __linep;
      uint64_t v5 = strchr(__linep, 35);
      if (v5)
      {
        char *v5 = 0;
        uint64_t v4 = __linep;
      }

      if (*v4)
      {
        key = 0LL;
        if (sscanf(v4, "%x%127s", &key, __s2) == 2)
        {
          __s2[127] = 0;
          Value = (const char *)CFDictionaryGetValue(a1[1], key);
          if (Value)
          {
            uint64_t v7 = Value;
            if (strcmp(Value, __s2))
            {
              ktrace_log_init();
              uint64_t v8 = (os_log_s *)ktrace_log;
              if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)buf = 134218498;
                uint64_t v14 = key;
                __int16 v15 = 2080;
                uint32_t v16 = v7;
                __int16 v17 = 2080;
                uint64_t v18 = __s2;
                _os_log_debug_impl( &dword_186BA3000,  v8,  OS_LOG_TYPE_DEBUG,  "conflicting names for debugid %#lx: %s and %s",  buf,  0x20u);
              }
            }
          }

          else
          {
            uint64_t v9 = name_intern(__s2);
            CFDictionarySetValue(*a1, v9, key);
            CFDictionarySetValue(a1[1], key, v9);
          }
        }
      }
    }

    while (getline(&__linep, &__linecapp, __stream) > 0);
  }

  free(__linep);
}

const void *name_intern(void *value)
{
  char v2 = CFSetGetValue((CFSetRef)name_intern_nameset, value);
  if (!v2)
  {
    size_t v3 = strlen((const char *)value) + 1;
    if (v3 >= 0x8000) {
      ktrace_remotetime_update_params_cold_1();
    }
    size_t v4 = name_intern_namebuf_left;
    if (v3 >= name_intern_namebuf_left)
    {
      uint64_t v5 = (char *)malloc(0x8000uLL);
      name_intern_namebuf_pos = (uint64_t)v5;
      if (!v5) {
        ktrace_remotetime_update_params_cold_1();
      }
      size_t v4 = 0x8000LL;
      name_intern_namebuf_left = 0x8000LL;
    }

    else
    {
      uint64_t v5 = (char *)name_intern_namebuf_pos;
    }

    size_t v6 = strlcpy(v5, (const char *)value, v4);
    char v2 = (const void *)name_intern_namebuf_pos;
    name_intern_namebuf_pos += v6 + 1;
    name_intern_namebuf_left -= v6 + 1;
    CFSetAddValue((CFMutableSetRef)name_intern_nameset, v2);
  }

  return v2;
}

CFMutableSetRef __name_intern_block_invoke()
{
  CFMutableSetRef result = CFSetCreateMutable(0LL, 0LL, &str_no_free_set_callbacks);
  name_intern_nameset = (uint64_t)result;
  return result;
}

void kteventnames_add_track(CFMutableDictionaryRef *a1, uint64_t a2, void *a3)
{
  uint64_t v41 = *MEMORY[0x1895F89C0];
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    size_t v6 = (void *)MEMORY[0x186E45FA0]();
    uint64_t v7 = (void *)[a3 objectForKeyedSubscript:@"Name"];
    if (v7)
    {
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0) {
        uint64_t v7 = (void *)[v7 stringByReplacingOccurrencesOfString:@" " withString:@"_"];
      }
      else {
        uint64_t v7 = 0LL;
      }
    }

    uint64_t v8 = [a3 objectForKeyedSubscript:@"Children"];
    if (v8 && (uint64_t v9 = (void *)v8, objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
    {
      __int128 v31 = 0u;
      __int128 v32 = 0u;
      __int128 v29 = 0u;
      __int128 v30 = 0u;
      uint64_t v10 = [v9 countByEnumeratingWithState:&v29 objects:v39 count:16];
      if (v10)
      {
        uint64_t v11 = v10;
        uint64_t v12 = *(void *)v30;
        do
        {
          for (uint64_t i = 0LL; i != v11; ++i)
          {
            if (*(void *)v30 != v12) {
              objc_enumerationMutation(v9);
            }
            kteventnames_add_track(a1, v7, *(void *)(*((void *)&v29 + 1) + 8 * i));
          }

          uint64_t v11 = [v9 countByEnumeratingWithState:&v29 objects:v39 count:16];
        }

        while (v11);
      }
    }

    else if (v7)
    {
      if (a2) {
        uint64_t v7 = (void *)[NSString stringWithFormat:@"%@.%@", a2, v7];
      }
      uint64_t v14 = name_intern((void *)[v7 UTF8String]);
      __int128 v34 = 0u;
      __int128 v35 = 0u;
      __int128 v36 = 0u;
      __int128 v37 = 0u;
      uint64_t v15 = [&unk_189F5E708 countByEnumeratingWithState:&v34 objects:v40 count:16];
      if (v15)
      {
        uint64_t v16 = v15;
        uint64_t v17 = *(void *)v35;
        do
        {
          for (uint64_t j = 0LL; j != v16; ++j)
          {
            if (*(void *)v35 != v17) {
              objc_enumerationMutation(&unk_189F5E708);
            }
            __int128 v19 = (void *)[a3 objectForKeyedSubscript:*(void *)(*((void *)&v34 + 1) + 8 * j)];
            if (v19)
            {
              value = 0LL;
              uint64_t v20 = value;
              CFDictionarySetValue(*a1, v14, value);
              CFDictionarySetValue(a1[1], v20, v14);
            }
          }

          uint64_t v16 = [&unk_189F5E708 countByEnumeratingWithState:&v34 objects:v40 count:16];
        }

        while (v16);
      }

LABEL_29:
      __int128 v21 = (void *)[a3 objectForKeyedSubscript:@"Component"];
      value = 0LL;
      if (_to_integer(v21, (unint64_t *)&value))
      {
        __int128 v36 = 0u;
        __int128 v37 = 0u;
        __int128 v34 = 0u;
        __int128 v35 = 0u;
        uint64_t v22 = [&unk_189F5E720 countByEnumeratingWithState:&v34 objects:v40 count:16];
        if (v22)
        {
          uint64_t v23 = v22;
          uint64_t v24 = *(void *)v35;
          unint64_t v25 = ((unint64_t)value << 16) | 0x2B000000;
          do
          {
            for (uint64_t k = 0LL; k != v23; ++k)
            {
              if (*(void *)v35 != v24) {
                objc_enumerationMutation(&unk_189F5E720);
              }
              __int16 v27 = (void *)[a3 objectForKeyedSubscript:*(void *)(*((void *)&v34 + 1) + 8 * k)];
              unint64_t v33 = 0LL;
              if (_to_integer(v27, &v33))
              {
                uint64_t v28 = (const void *)(v25 | (4 * (v33 & 0x3FFF)));
                CFDictionarySetValue(*a1, v14, v28);
                CFDictionarySetValue(a1[1], v28, v14);
              }
            }

            uint64_t v23 = [&unk_189F5E720 countByEnumeratingWithState:&v34 objects:v40 count:16];
          }

          while (v23);
        }
      }
    }

    objc_autoreleasePoolPop(v6);
  }

  __int16 v27 = kperf_kdebug_action_get();
  if ((_DWORD)v27)
  {
    size_t v4 = v27;
    uint64_t v5 = *__error();
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
      config_current_kperf_cold_14();
    }
    goto LABEL_4;
  }

  if (*(_DWORD *)(a1 + 152))
  {
    uint64_t v28 = kperf_kdebug_filter_get();
    if (v28)
    {
      __int128 v29 = v28;
      *(void *)(a1 + 120) = kperf_kdebug_filter_create_desc();
      MEMORY[0x186E45D54](v29);
    }
  }

  __int128 v30 = kperf_timer_pet_get();
  if ((_DWORD)v30)
  {
    size_t v4 = v30;
    uint64_t v5 = *__error();
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
      config_current_kperf_cold_13();
    }
    goto LABEL_4;
  }

  if (*(int *)(a1 + 144) > 15)
  {
    *(void *)(a1 + 140) = 0xFFFFFFFF00000000LL;
  }

  else
  {
    uint64_t v39 = 0;
    uint64_t v40 = 4LL;
    if (sysctlbyname("kperf.lightweight_pet", &v39, &v40, 0LL, 0LL) == -1)
    {
      unint64_t v33 = *__error();
      ktrace_log_init();
      if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
        config_current_kperf_cold_6();
      }
LABEL_65:
      *__error() = v33;
      if (!*__error()) {
        return 22LL;
      }
      return *__error();
    }

    if (v39) {
      __int128 v31 = 2;
    }
    else {
      __int128 v31 = 1;
    }
    *(_DWORD *)(a1 + 140) = v31;
  }

  uint64_t v40 = 4LL;
  if (sysctlbyname("kperf.pet_idle_rate", (void *)(a1 + 148), &v40, 0LL, 0LL) == -1)
  {
    unint64_t v33 = *__error();
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
      config_current_kperf_cold_7();
    }
    goto LABEL_65;
  }

  __int128 v32 = kperf_lazy_wait_time_threshold_get();
  if ((_DWORD)v32)
  {
    size_t v4 = v32;
    uint64_t v5 = *__error();
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
      config_current_kperf_cold_12();
    }
  }

  else
  {
    *(void *)(a1 + 160) = kperf_ticks_to_ns();
    __int128 v34 = kperf_lazy_wait_action_get();
    if ((_DWORD)v34)
    {
      size_t v4 = v34;
      uint64_t v5 = *__error();
      ktrace_log_init();
      if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
        config_current_kperf_cold_11();
      }
    }

    else
    {
      __int128 v35 = kperf_lazy_cpu_time_threshold_get();
      if ((_DWORD)v35)
      {
        size_t v4 = v35;
        uint64_t v5 = *__error();
        ktrace_log_init();
        if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
          config_current_kperf_cold_10();
        }
      }

      else
      {
        *(void *)(a1 + 176) = kperf_ticks_to_ns();
        __int128 v36 = kperf_lazy_cpu_action_get();
        if ((_DWORD)v36)
        {
          size_t v4 = v36;
          uint64_t v5 = *__error();
          ktrace_log_init();
          if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
            config_current_kperf_cold_9();
          }
        }

        else
        {
          __int128 v37 = kperf_sample_get();
          if (!(_DWORD)v37)
          {
            if (v39)
            {
              size_t v4 = 0LL;
              uint64_t v38 = 3;
            }

            else
            {
              size_t v4 = 0LL;
              if ((v13 & 1) == 0)
              {
                *(_DWORD *)(a1 + 136) = 0;
                return v4;
              }

              uint64_t v38 = 1;
            }

            *(_DWORD *)(a1 + 136) = v38;
            return v4;
          }

          size_t v4 = v37;
          uint64_t v5 = *__error();
          ktrace_log_init();
          if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
            config_current_kperf_cold_8();
          }
        }
      }
    }
  }

    v10[1] = v7;
    updated = ktrace_file_append_finish_internal(a1, v8, (uint64_t)v10);
    if ((_DWORD)updated) {
      return updated;
    }
    if (*(_BYTE *)(a1 + 299))
    {
      updated = ktrace_file_update_header_size(a1);
      if (!(_DWORD)updated) {
        return updated;
      }
LABEL_32:
      ftruncate(*(_DWORD *)(a1 + 196), v10[2] - 16LL);
      free(v10);
      return updated;
    }

    return 0LL;
  }

  return *__error();
}

      v12[10].i16[0] |= 1u;
LABEL_72:
      _Block_object_dispose(&v53, 8);
      __int128 v19 = &v57;
      goto LABEL_73;
    }
  }

BOOL _to_integer(void *a1, unint64_t *a2)
{
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    *a2 = [a1 unsignedLongValue];
    return 1LL;
  }

  else
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      __endptr = 0LL;
      *a2 = strtoul((const char *)[a1 UTF8String], &__endptr, 0);
      return *__endptr == 0;
    }

    else
    {
      return 0LL;
    }
  }

void __copy_cfdict_block_invoke(uint64_t a1, const void *a2, const void *a3)
{
}

void kteventnames_add_dir(const char *a1)
{
  uint64_t v11 = *MEMORY[0x1895F89C0];
  char v2 = opendir(a1);
  if (v2)
  {
    size_t v3 = v2;
    int v4 = 0;
    while (1)
    {
      uint64_t v5 = readdir(v3);
      if (!v5) {
        break;
      }
      d_name = v5->d_name;
      if (issuffix(v5->d_name, ".codes"))
      {
        snprintf(__str, 0x400uLL, "%s/%s", a1, d_name);
        int v7 = kteventnames_add_path_locked((CFMutableDictionaryRef *)&qword_18C6A31F0, __str);
        if (v4) {
          BOOL v8 = 1;
        }
        else {
          BOOL v8 = v7 == 0;
        }
        if (!v8) {
          int v4 = v7;
        }
      }
    }

    closedir(v3);
    if (!v4)
    {
      uint64_t v9 = strdup(a1);
      if (!v9) {
        ktrace_remotetime_update_params_cold_1();
      }
      CFArrayAppendValue((CFMutableArrayRef)qword_18C6A3200, v9);
    }
  }

uint64_t ktrace_events_all(uint64_t a1, const void *a2)
{
  uint64_t result = ktrace_events_range(a1, 0, -1, a2);
  if (!(_DWORD)result) {
    *(_BYTE *)(a1 + 16) = 1;
  }
  return result;
}

uint64_t ktrace_events_range(uint64_t a1, int a2, int a3, const void *a4)
{
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  int v7 = ktrace_callback_list_add(a1, a1 + 24);
  if (!v7) {
    return 12LL;
  }
  BOOL v8 = v7;
  *int v7 = 0;
  v7[2] = a2;
  v7[3] = a3;
  v7[4] = 0;
  uint64_t v9 = _Block_copy(a4);
  uint64_t result = 0LL;
  *((void *)v8 + 3) = v9;
  return result;
}

uint64_t ktrace_events_all_paired(uint64_t a1, const void *a2)
{
  uint64_t result = ktrace_events_range_paired(a1, 0, 0xFFFFFFFF, a2);
  if (!(_DWORD)result) {
    *(_BYTE *)(a1 + 16) = 1;
  }
  return result;
}

uint64_t ktrace_events_range_paired(uint64_t a1, int a2, unsigned int a3, const void *a4)
{
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  int v7 = ktrace_callback_list_add(a1, a1 + 24);
  if (!v7) {
    return 12LL;
  }
  BOOL v8 = v7;
  *int v7 = 0;
  unsigned int v9 = (a3 + 3) & 0xFFFFFFFC;
  if (a3 > 0xFFFFFFFB) {
    unsigned int v9 = -1;
  }
  v7[2] = a2 & 0xFFFFFFFC;
  v7[3] = v9;
  v7[4] = 1;
  uint64_t v10 = _Block_copy(a4);
  uint64_t result = 0LL;
  *((void *)v8 + 3) = v10;
  return result;
}

uint64_t ktrace_events_any(uint64_t a1, const void *a2)
{
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  size_t v3 = ktrace_callback_list_add(a1, a1 + 40);
  if (!v3) {
    return 12LL;
  }
  int v4 = v3;
  *size_t v3 = 2;
  v3[4] = 0;
  uint64_t v5 = _Block_copy(a2);
  uint64_t result = 0LL;
  *((void *)v4 + 3) = v5;
  return result;
}

uint64_t ktrace_events_any_paired(uint64_t a1, const void *a2)
{
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  size_t v3 = ktrace_callback_list_add(a1, a1 + 40);
  if (!v3) {
    return 12LL;
  }
  int v4 = v3;
  *size_t v3 = 2;
  v3[4] = 1;
  uint64_t v5 = _Block_copy(a2);
  uint64_t result = 0LL;
  *((void *)v4 + 3) = v5;
  return result;
}

uint64_t ktrace_events_single(uint64_t a1, int a2, const void *a3)
{
  return ktrace_events_range(a1, a2, a2 + 4, a3);
}

uint64_t ktrace_events_single_paired(uint64_t a1, int a2, const void *a3)
{
  return ktrace_events_range_paired(a1, a2, a2 + 4, a3);
}

uint64_t ktrace_events_filter_bitmap(uint64_t a1, const void *a2, const void *a3)
{
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  if (!a2) {
    ktrace_remotetime_update_params_cold_1();
  }
  size_t v6 = malloc(0x2000uLL);
  if (!v6) {
    return 12LL;
  }
  int v7 = v6;
  memcpy(v6, a2, 0x2000uLL);
  uint64_t v8 = ktrace_events_filter_bitmap_internal(a1, (uint64_t)v7, a3);
  if ((_DWORD)v8) {
    free(v7);
  }
  return v8;
}

uint64_t ktrace_events_filter_bitmap_internal(uint64_t a1, uint64_t a2, const void *a3)
{
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  uint64_t v5 = ktrace_callback_list_add(a1, a1 + 24);
  if (!v5) {
    return 12LL;
  }
  size_t v6 = v5;
  *(_DWORD *)uint64_t v5 = 1;
  v5[1] = a2;
  *((_DWORD *)v5 + 4) = 0;
  int v7 = _Block_copy(a3);
  uint64_t result = 0LL;
  v6[3] = v7;
  return result;
}

uint64_t ktrace_events_filter_bitmap_paired(uint64_t a1, const void *a2, const void *a3)
{
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  if (!a2) {
    ktrace_remotetime_update_params_cold_1();
  }
  size_t v6 = malloc(0x2000uLL);
  if (!v6) {
    return 12LL;
  }
  int v7 = v6;
  memcpy(v6, a2, 0x2000uLL);
  uint64_t v8 = ktrace_events_filter_bitmap_internal_paired(a1, (uint64_t)v7, a3);
  if ((_DWORD)v8) {
    free(v7);
  }
  return v8;
}

uint64_t ktrace_events_filter_bitmap_internal_paired(uint64_t a1, uint64_t a2, const void *a3)
{
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  uint64_t v5 = ktrace_callback_list_add(a1, a1 + 24);
  if (!v5) {
    return 12LL;
  }
  size_t v6 = v5;
  *(_DWORD *)uint64_t v5 = 1;
  v5[1] = a2;
  *((_DWORD *)v5 + 4) = 1;
  int v7 = _Block_copy(a3);
  uint64_t result = 0LL;
  v6[3] = v7;
  return result;
}

uint64_t ktrace_events_filter(uint64_t a1, const char *a2, const void *a3)
{
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  size_t v6 = calloc(0x2000uLL, 1uLL);
  if (!v6) {
    return 12LL;
  }
  int v7 = v6;
  if (trace_parse_filter(a2, v6))
  {
    uint64_t v8 = 22LL;
LABEL_7:
    free(v7);
    return v8;
  }

  uint64_t v8 = ktrace_events_filter_bitmap_internal(a1, (uint64_t)v7, a3);
  if ((_DWORD)v8) {
    goto LABEL_7;
  }
  return v8;
}

uint64_t ktrace_events_filter_paired(uint64_t a1, const char *a2, const void *a3)
{
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  size_t v6 = calloc(0x2000uLL, 1uLL);
  if (!v6) {
    return 12LL;
  }
  int v7 = v6;
  if (trace_parse_filter(a2, v6))
  {
    uint64_t v8 = 22LL;
LABEL_7:
    free(v7);
    return v8;
  }

  uint64_t v8 = ktrace_events_filter_bitmap_internal_paired(a1, (uint64_t)v7, a3);
  if ((_DWORD)v8) {
    goto LABEL_7;
  }
  return v8;
}

BOOL ktrace_session_has_callbacks(int *a1)
{
  return a1[6] > 0 || a1[28] > 0 || a1[24] > 0;
}

void *ktrace_callback_list_add(uint64_t a1, uint64_t a2)
{
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  if (!a2) {
    ktrace_remotetime_update_params_cold_1();
  }
  if ((*(_WORD *)(a1 + 224) & 1) != 0) {
    ktrace_callback_list_add_cold_4();
  }
  int v3 = *(_DWORD *)a2;
  int v4 = *(_DWORD *)(a2 + 4);
  int v5 = *(_DWORD *)a2 + 1;
  *(_DWORD *)a2 = v5;
  if (v3 < v4) {
    goto LABEL_10;
  }
  if (v4) {
    v4 *= 2;
  }
  else {
    int v4 = 1;
  }
  uint64_t result = realloc(*(void **)(a2 + 8), 32LL * v4);
  if (result)
  {
    *(_DWORD *)(a2 + 4) = v4;
    *(void *)(a2 + _Block_object_dispose(va, 8) = result;
    int v5 = *(_DWORD *)a2;
LABEL_10:
    if (v5 > v4) {
      ktrace_remotetime_update_params_cold_1();
    }
    return (void *)(*(void *)(a2 + 8) + 32LL * (v5 - 1));
  }

  return result;
}

void ktrace_callback_list_sort(int *a1)
{
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  char v2 = (void *)*((void *)a1 + 1);
  if (v2) {
    qsort_b(v2, *a1, 0x20uLL, &__block_literal_global_0);
  }
}

uint64_t __ktrace_callback_list_sort_block_invoke(uint64_t a1, _DWORD *a2, int *a3)
{
  int v3 = *a3;
  if (*a2 == 1)
  {
    if (v3 != 1) {
      return 0xFFFFFFFFLL;
    }
  }

  else
  {
    if (v3 == 1) {
      return 1LL;
    }
    if (*a2 == 3)
    {
      if (v3 != 3) {
        return 0xFFFFFFFFLL;
      }
    }

    else if (v3 == 3)
    {
      return 1LL;
    }
  }

  int v4 = a3[4];
  if (a2[4] == 1)
  {
    if (v4 != 1) {
      return 0xFFFFFFFFLL;
    }
    goto LABEL_14;
  }

  if (v4 == 1) {
    return 1LL;
  }
LABEL_14:
  unsigned int v6 = a2[2];
  unsigned int v7 = a3[2];
  BOOL v8 = v6 >= v7;
  BOOL v9 = v6 != v7;
  if (v8) {
    return v9;
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

void ktrace_callback_list_reset(int *a1)
{
  if (*a1 >= 1)
  {
    uint64_t v2 = 0LL;
    uint64_t v3 = 0LL;
    do
    {
      uint64_t v4 = *((void *)a1 + 1);
      if (*(_DWORD *)(v4 + v2) == 1) {
        free(*(void **)(v4 + v2 + 8));
      }
      _Block_release(*(const void **)(v4 + v2 + 24));
      ++v3;
      v2 += 32LL;
    }

    while (v3 < *a1);
  }

  free(*((void **)a1 + 1));
  *(void *)a1 = 0LL;
  *((void *)a1 + 1) = 0LL;
}

void ktrace_compressor_init(_DWORD *a1, int a2)
{
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  bzero(a1, 0x388uLL);
  a1[1] = a2;
}

void ktrace_compressor_reset(_DWORD *a1)
{
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  int v2 = a1[1];
  bzero(a1, 0x388uLL);
  a1[1] = v2;
}

char *ktrace_compressor_commit(int *a1, void *a2, unint64_t a3)
{
  uint64_t v7 = *MEMORY[0x1895F89C0];
  if (a3 >= 0x41) {
    return safe_encode(a1, (uint64_t)a2, a3);
  }
  int v5 = safe_encode(a1, (uint64_t)__src, a3);
  if (v5) {
    memcpy(a2, __src, (size_t)v5);
  }
  return v5;
}

char *safe_encode(int *a1, uint64_t a2, unint64_t a3)
{
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  if (!a2) {
    ktrace_remotetime_update_params_cold_1();
  }
  uint64_t v6 = *((void *)a1 + 2) - *((void *)a1 + 1);
  uint64_t v7 = (void *)(a2 + 2);
  unsigned int v8 = __clz(v6 | 1);
  unsigned int v9 = (9 * v8) >> 6;
  if (v8 >= 8)
  {
    *uint64_t v7 = ((2 * v6) | 1) << (8 - v9);
  }

  else
  {
    *(_BYTE *)(a2 + 2) = 0;
    *(void *)(a2 + 3) = v6;
  }

  uint64_t v10 = (void *)((char *)v7 + 9 - v9);
  unsigned int v11 = a1[1];
  if (v11 == 2)
  {
    uint64_t v25 = 0LL;
    unsigned int v26 = 0;
    unint64_t v13 = 0LL;
    unsigned int v27 = *a1;
    uint64_t v28 = (unsigned int *)&a1[12 * *a1];
    unsigned int v29 = -1;
    while (1)
    {
      uint64_t v30 = 0LL;
      unsigned int v31 = 0;
      unint64_t v32 = 0LL;
      if (v27 + 1 <= 0x10) {
        ++v27;
      }
      else {
        unsigned int v27 = 0;
      }
      uint64_t v33 = 6LL;
      do
      {
        uint64_t v34 = *(void *)&v28[v33];
        if (!v34) {
          goto LABEL_35;
        }
        uint64_t v35 = *(void *)&a1[12 * v27 + v33];
        if ((v35 ^ v34) == 3)
        {
          uint64_t v36 = (2 << v30);
LABEL_33:
          v32 |= v36;
          goto LABEL_35;
        }

        if (v34 == v35)
        {
          uint64_t v36 = (1 << v30);
          goto LABEL_33;
        }

        uint64_t v37 = 9 - ((9 * __cls(v34 - v35)) >> 6);
        v32 |= (v37 << ((v33 * 4) - 8)) | (3 << v30);
        v31 += v37;
LABEL_35:
        v33 += 2LL;
        v30 += 2LL;
      }

      while (v30 != 12);
      if (v31 < v29)
      {
        unint64_t v13 = v32 | (v25 << 12);
        unsigned int v26 = v27;
        unsigned int v29 = v31;
      }

      if (++v25 == 16)
      {
        uint64_t v10 = (void *)encode_row((uint64_t)v10, (uint64_t)&a1[12 * v26 + 6], (uint64_t)(v28 + 6), v13);
        goto LABEL_60;
      }
    }
  }

  if (v11 == 3)
  {
    int v38 = *a1;
    uint64_t v39 = (unsigned int *)&a1[12 * *a1];
    uint64_t v40 = (uint64_t)(v39 + 6);
    uint64_t v41 = 3999999939LL * ((*((void *)v39 + 7) << 30) | (*((void *)v39 + 8) >> 2));
    double v42 = (char *)a1 + ((BYTE5(v41) ^ BYTE3(v41)) & 0x3F);
    int v43 = v42[840];
    v42[840] = *a1;
    unsigned int v44 = v43 + ~v38;
    if (v44 <= 0x11) {
      unsigned int v45 = v43 + ~v38;
    }
    else {
      unsigned int v45 = v44 + 17;
    }
    if (v45 <= 0xF && (char v46 = (unsigned int *)&a1[12 * v43], *((void *)v46 + 7) == *(void *)(v40 + 32)))
    {
      uint64_t v47 = (uint64_t)(v46 + 6);
    }

    else
    {
      LOWORD(v45) = 0;
      else {
        int v48 = 0;
      }
      uint64_t v47 = (uint64_t)&a1[12 * v48 + 6];
    }

    uint64_t v49 = 0LL;
    uint64_t v50 = 0LL;
    unint64_t v13 = 0LL;
    while (1)
    {
      uint64_t v51 = *(void *)(v40 + v50);
      if (v51)
      {
        uint64_t v52 = *(void *)(v47 + v50);
        if ((v52 ^ v51) == 3)
        {
          uint64_t v53 = (2 << v49);
        }

        else
        {
          if (v51 != v52)
          {
            v13 |= ((unint64_t)(9 - ((9 * __cls(v51 - v52)) >> 6)) << (v50 + 16)) | (3 << v49);
            goto LABEL_58;
          }

          uint64_t v53 = (1 << v49);
        }

        v13 |= v53;
      }

LABEL_58:
      v50 += 8LL;
      v49 += 2LL;
      if (v49 == 12)
      {
        uint64_t v10 = (void *)encode_row((uint64_t)v10, v47, v40, v13);
        LOWORD(v13) = v13 | ((_WORD)v45 << 12);
        goto LABEL_60;
      }
    }
  }

  if (v11 != 4) {
    safe_encode_cold_3();
  }
  uint64_t v12 = 0LL;
  LOWORD(v13) = 0;
  uint64_t v14 = (unsigned int *)&a1[12 * *a1 + 6];
  else {
    unsigned int v15 = 0;
  }
  uint64_t v16 = (unsigned int *)&a1[12 * v15 + 6];
  do
  {
    uint64_t v18 = *(void *)v14;
    v14 += 2;
    uint64_t v17 = v18;
    uint64_t v20 = *(void *)v16;
    v16 += 2;
    uint64_t v19 = v20;
    if (v17)
    {
      if (v17 == v19)
      {
        int v21 = 1 << v12;
      }

      else
      {
        unint64_t v22 = v17 - v19;
        unsigned int v23 = __cls(v22);
        unsigned int v24 = (9 * v23) >> 6;
        if (v23 >= 8)
        {
          *uint64_t v10 = ((2 * v22) | 1) << (8 - v24);
        }

        else
        {
          *(_BYTE *)uint64_t v10 = 0;
          *(void *)((char *)v10 + 1) = v22;
        }

        uint64_t v10 = (void *)((char *)v10 + 9 - v24);
        int v21 = 3 << v12;
      }

      LOWORD(v13) = v13 | v21;
    }

    v12 += 2LL;
  }

  while (v12 != 12);
LABEL_60:
  *(_WORD *)a2 = v13;
  uint64_t result = (char *)v10 - a2;
  if (*a1) {
    int v55 = *a1 - 1;
  }
  else {
    int v55 = 16;
  }
  *a1 = v55;
  *((void *)a1 + 1) = *((void *)a1 + 2);
  return result;
}

void ktrace_compressor_decompress(uint64_t a1, char *a2, unint64_t a3)
{
  uint64_t v4 = *MEMORY[0x1895F89C0];
  if (a3 <= 0x40)
  {
    __memcpy_chk();
    a2 = &v3;
  }

  __asm { BR              X16 }

unint64_t sub_186BABF48(unint64_t result)
{
  *(void *)(v5 + v3) = *(void *)(v4 + v3);
  if (v3 != 40) {
    JUMPOUT(0x186BABF34LL);
  }
  if (result >= 0x42) {
    ktrace_remotetime_update_params_cold_1();
  }
  if (result > v7) {
    return 0LL;
  }
  *(_DWORD *)uint64_t v6 = v2;
  uint64_t v8 = *(void *)(v6 + 16);
  *(void *)(v6 + _Block_object_dispose(va, 8) = v8;
  *(void *)(v6 + 16) = v8 + v1;
  return result;
}

uint64_t ktrace_compressor_read_first_timestamp(char *a1, unint64_t a2, void *a3)
{
  uint64_t v10 = *MEMORY[0x1895F89C0];
  if (!a3) {
    ktrace_remotetime_update_params_cold_1();
  }
  bzero(v8, 0x388uLL);
  v8[1] = 1;
  ktrace_compressor_decompress((uint64_t)v8, a1, a2);
  if (!v6) {
    return 22LL;
  }
  uint64_t result = 0LL;
  *a3 = v9;
  return result;
}

unint64_t decompress_32( unsigned int *a1, uint64_t a2, unint64_t *a3, uint64_t a4, unint64_t a5)
{
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  if (!a2) {
    ktrace_remotetime_update_params_cold_1();
  }
  if (!a3) {
    ktrace_remotetime_update_params_cold_1();
  }
  if (!a4) {
    ktrace_remotetime_update_params_cold_1();
  }
  unint64_t v8 = 0LL;
  unint64_t v9 = *a3;
  if (*a3)
  {
    unint64_t v11 = 0LL;
    if (a5)
    {
      unint64_t v11 = 0LL;
      unint64_t v8 = 0LL;
      do
      {
        ktrace_compressor_decompress((uint64_t)a1, (char *)(a2 + v11), v9 - v11);
        if (!v13) {
          break;
        }
        uint64_t v14 = a4 + v8;
        unsigned int v15 = &a1[12 * *a1];
        *(void *)uint64_t v14 = *((void *)a1 + 2) & 0xFFFFFFFFFFFFFFLL | ((unint64_t)BYTE4(*((void *)v15 + 8)) << 56);
        *(int32x4_t *)(v14 + _Block_object_dispose(va, 8) = vuzp1q_s32(*(int32x4_t *)(v15 + 6), *(int32x4_t *)(v15 + 10));
        *(int32x2_t *)(v14 + 24) = vmovn_s64(*(int64x2_t *)(v15 + 14));
        v11 += v13;
        v8 += 32LL;
        if (v11 >= v9) {
          break;
        }
      }

      while (v8 < a5);
    }
  }

  else
  {
    unint64_t v11 = 0LL;
  }

  *a3 = v11;
  return v8;
}

unint64_t decompress_64( unsigned int *a1, uint64_t a2, unint64_t *a3, uint64_t a4, unint64_t a5)
{
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  if (!a2) {
    ktrace_remotetime_update_params_cold_1();
  }
  if (!a3) {
    ktrace_remotetime_update_params_cold_1();
  }
  if (!a4) {
    ktrace_remotetime_update_params_cold_1();
  }
  unint64_t v8 = 0LL;
  unint64_t v9 = *a3;
  if (*a3)
  {
    unint64_t v11 = 0LL;
    if (a5)
    {
      unint64_t v11 = 0LL;
      unint64_t v8 = 0LL;
      do
      {
        ktrace_compressor_decompress((uint64_t)a1, (char *)(a2 + v11), v9 - v11);
        if (!v13) {
          break;
        }
        uint64_t v14 = a4 + v8;
        *(void *)uint64_t v14 = *((void *)a1 + 2);
        unsigned int v15 = &a1[12 * *a1];
        unsigned int v16 = v15[17];
        *(void *)(v14 + _Block_object_dispose(va, 8) = *((void *)v15 + 3);
        *(void *)(v14 + 16) = *((void *)v15 + 4);
        *(void *)(v14 + 24) = *((void *)v15 + 5);
        *(void *)(v14 + 32) = *((void *)v15 + 6);
        *(void *)(v14 + 40) = *((void *)v15 + 7);
        *(_DWORD *)(v14 + 4_Block_object_dispose(va, 8) = *((void *)v15 + 8);
        *(_DWORD *)(v14 + 52) = v16;
        v11 += v13;
        v8 += 64LL;
        if (v11 >= v9) {
          break;
        }
      }

      while (v8 < a5);
    }
  }

  else
  {
    unint64_t v11 = 0LL;
  }

  *a3 = v11;
  return v8;
}

uint64_t encode_row(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v4 = 0LL;
  unint64_t v5 = a4 >> 16;
  do
  {
    if ((_BYTE)v5)
    {
      uint64_t v6 = *(void *)(a3 + v4) - *(void *)(a2 + v4);
      if (v5 > 8u)
      {
        *(_BYTE *)uint64_t result = 0;
        *(void *)(result + 1) = v6;
      }

      else
      {
        *(void *)uint64_t result = ((2 * v6) | 1) << (v5 - 1);
      }
    }

    result += v5;
    v5 >>= 8;
    v4 += 8LL;
  }

  while (v4 != 48);
  return result;
}

uint64_t config_init_v1_0(const __CFDictionary *a1, char **a2)
{
  uint64_t v4 = (_DWORD *)a2 + 63;
  uint64_t result = dict_uint32(a1, @"owner_kind", (char *)a2 + 252);
  if (!(_DWORD)result)
  {
    if (!*v4) {
      return 0LL;
    }
    uint64_t result = dict_string(a1, @"owner_name", 0LL, 0LL, a2);
    if (!(_DWORD)result) {
      return 0LL;
    }
  }

  return result;
}

uint64_t config_init_v1_1(const __CFDictionary *a1, char **a2)
{
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  if (!a2) {
    ktrace_remotetime_update_params_cold_1();
  }
  uint64_t result = dict_uint32(a1, @"context_kind", a2 + 32);
  if (!(_DWORD)result)
  {
    dict_string(a1, @"reason", 0LL, 0LL, a2 + 1);
    dict_string(a1, @"command", 0LL, 0LL, a2 + 2);
    return dict_uint32(a1, @"trigger_kind", (char *)a2 + 260);
  }

  return result;
}

uint64_t config_init_v1_2(const __CFDictionary *a1, uint64_t a2)
{
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  if (!a2) {
    ktrace_remotetime_update_params_cold_1();
  }
  dict_uint64(a1, @"kperf_lazy_wait_threshold", (void *)(a2 + 160));
  dict_uint32(a1, @"kperf_lazy_wait_action", (void *)(a2 + 168));
  dict_uint64(a1, @"kperf_lazy_cpu_threshold", (void *)(a2 + 176));
  dict_uint32(a1, @"kperf_lazy_cpu_action", (void *)(a2 + 184));
  return 0LL;
}

uint64_t config_init_v1_3(const __CFDictionary *a1, uint64_t a2)
{
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  if (!a2) {
    ktrace_remotetime_update_params_cold_1();
  }
  dict_BOOL(a1, @"kdebug_continuous_time", (BOOL *)(a2 + 77));
  dict_BOOL(a1, @"kdebug_coprocessor_tracing", (BOOL *)(a2 + 78));
  return 0LL;
}

uint64_t config_init_v1_4(const __CFDictionary *a1, uint64_t a2)
{
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  if (!a2) {
    ktrace_remotetime_update_params_cold_1();
  }
  int v5 = 0;
  dict_uint64_arr(a1, @"kdebug_disabling_event_match", (void *)(a2 + 40), &v5);
  dict_uint64_arr(a1, @"kdebug_disabling_event_mask", (void *)(a2 + 48), &v5);
  return 0LL;
}

_BYTE *ktrace_config_create(uint64_t *a1)
{
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  int v2 = ktrace_chunk_tag((uint64_t)a1);
  if (v2 != 20995)
  {
    int v16 = v2;
    uint64_t v12 = 0LL;
    unint64_t v5 = 0LL;
    uint64_t v3 = 0LL;
    uint64_t v17 = a1;
    goto LABEL_8;
  }

  uint64_t v3 = ktrace_chunk_size_t(a1);
  uint64_t v4 = ktrace_chunk_map_data(a1, 0LL, v3);
  if (!v4)
  {
    int inited = *__error();
    if (inited)
    {
LABEL_27:
      unsigned int v15 = 0LL;
      *__error() = inited;
      return v15;
    }

    return 0LL;
  }

  unint64_t v5 = (unint64_t)v4;
  uint64_t v6 = ktrace_file_open_memory((uint64_t)v4, v3, 0LL, 0LL);
  if (v6)
  {
    uint64_t v12 = v6;
    uint64_t v28 = 0LL;
    unsigned int v29 = &v28;
    uint64_t v30 = 0x2000000000LL;
    uint64_t v31 = 0LL;
    v27[0] = MEMORY[0x1895F87A8];
    v27[1] = 0x40000000LL;
    v27[2] = __ktrace_config_create_block_invoke;
    v27[3] = &unk_189F54EF8;
    v27[4] = &v28;
    int v13 = ktrace_file_iterate((uint64_t)v6, 0LL, (uint64_t)v27, v7, v8, v9, v10, v11);
    if (v13)
    {
      int inited = v13;
      _Block_object_dispose(&v28, 8);
      unsigned int v15 = 0LL;
LABEL_12:
      ktrace_file_close(v12);
LABEL_13:
      if (!v5)
      {
        if (!inited) {
          return v15;
        }
        goto LABEL_25;
      }

      goto LABEL_24;
    }

    uint64_t v17 = (uint64_t *)v29[3];
    int v16 = ktrace_chunk_tag((uint64_t)v17);
    _Block_object_dispose(&v28, 8);
LABEL_8:
    if (v16 != 32774 || ktrace_chunk_version_major((uint64_t)v17) > 1)
    {
      unsigned int v15 = 0LL;
      int inited = 79;
      goto LABEL_11;
    }

    uint64_t v18 = ktrace_chunk_size((uint64_t)v17);
    uint64_t v19 = (UInt8 *)ktrace_chunk_map_data(v17, 0LL, v18);
    if (!v19)
    {
      unsigned int v15 = 0LL;
      int inited = *__error();
      goto LABEL_11;
    }

    unint64_t v20 = (unint64_t)v19;
    dict = (const __CFDictionary *)create_dict(v19, v18);
    if (!dict)
    {
      unsigned int v15 = 0LL;
      int inited = 12;
LABEL_52:
      ktrace_chunk_unmap_data((uint64_t)v17, v20, v18);
LABEL_11:
      if (!v12) {
        goto LABEL_13;
      }
      goto LABEL_12;
    }

    unint64_t v22 = dict;
    unsigned int v23 = (char *)calloc(1uLL, 0x110uLL);
    if (!v23) {
      ktrace_remotetime_update_params_cold_1();
    }
    unsigned int v15 = v23;
    v23[78] = 1;
    unsigned int v24 = (BOOL *)(v23 + 78);
    unsigned int v25 = ktrace_chunk_version_minor((uint64_t)v17);
    if (v25 < 4)
    {
      if (v25 != 3)
      {
        if (v25 < 2)
        {
          if (!v25) {
            goto LABEL_36;
          }
          goto LABEL_35;
        }

LABEL_34:
        config_init_v1_2(v22, (uint64_t)v15);
LABEL_35:
        int inited = config_init_v1_1(v22, (char **)v15);
        if (inited)
        {
LABEL_51:
          CFRelease(v22);
          goto LABEL_52;
        }

  ktrace_log_init();
  uint64_t v14 = (os_log_s *)ktrace_log;
  if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_INFO))
  {
    unint64_t v22 = "";
    unsigned int v23 = " immediately";
    if ((a2 & 1) == 0) {
      unsigned int v23 = "";
    }
    unsigned int v24 = _end_reason_names[a3];
    unsigned int v25 = " from draining";
    if ((a2 & 2) == 0) {
      unsigned int v25 = "";
    }
    *(_DWORD *)buf = 136315906;
    uint64_t v31 = v23;
    unint64_t v32 = 2080;
    uint64_t v33 = v25;
    uint64_t v34 = 2080;
    uint64_t v35 = v24;
    if (v9) {
      unint64_t v22 = ", was active";
    }
    uint64_t v36 = 2080;
    uint64_t v37 = v22;
    _os_log_impl(&dword_186BA3000, v14, OS_LOG_TYPE_INFO, "ending tracing%s%s due to %s%s", buf, 0x2Au);
  }

  unsigned int v26 = *(_DWORD *)(a1 + 4);
  if (v26 >= 3)
  {
    if (v26 != 4) {
      _session_end_internal_cold_3();
    }
    if (v9) {
      _session_teardown(a1, v15, v16, v17, v18, v19, v20, v21);
    }
  }

  else if ((a2 & 1) != 0 || *(_DWORD *)a1 == 1)
  {
    unsigned int v27 = *(dispatch_queue_s **)(a1 + 128);
    v28[0] = MEMORY[0x1895F87A8];
    v28[1] = 3221225472LL;
    v28[2] = ___session_end_internal_block_invoke_13;
    v28[3] = &__block_descriptor_40_e5_v8__0l;
    v28[4] = a1;
    dispatch_async(v27, v28);
  }

    unsigned int v27 = 0LL;
LABEL_35:
    uint64_t v30 = a3[3];
    uint64_t v40 = a3[2];
    uint64_t v41 = v30;
    double v42 = a3[4];
    uint64_t v31 = a3[1];
    *(_OWORD *)uu = *a3;
    uint64_t v39 = v31;
    return ktrace_uuid_offset_get_description_internal(a1, uu, v27);
  }

  uint64_t v9 = CSIsNull();
  CSSymbolOwnerGetName();
  CSSymbolGetName();
  if (v9) {
  CSSourceInfoGetFilename();
  }
  CSSourceInfoGetLineNumber();
}

LABEL_36:
        int inited = config_init_v1_0(v22, (char **)v15);
        if (!inited)
        {
          int inited = dict_uint32(v22, @"kdebug_state", v15 + 68);
          if (!inited && ((v15[68] & 1) == 0 || (int inited = config_kdebug_init((uint64_t)v15, v22)) == 0))
          {
            int inited = dict_uint32(v22, @"kperf_state", v15 + 136);
            if (!inited && ((v15[136] & 1) == 0 || (int inited = config_kperf_init((uint64_t)v15, v22)) == 0))
            {
              int inited = dict_uint32(v22, @"kpc_state", v15 + 216);
              if (!inited)
              {
                if ((v15[216] & 1) != 0) {
                  int inited = config_kpc_init((uint64_t)v15, v22);
                }
                else {
                  int inited = 0;
                }
              }
            }
          }
        }

        goto LABEL_51;
      }
    }

    else
    {
      LODWORD(v2_Block_object_dispose(va, 8) = 0;
      dict_uint64_arr(v22, @"kdebug_disabling_event_match", (void *)v15 + 5, &v28);
      dict_uint64_arr(v22, @"kdebug_disabling_event_mask", (void *)v15 + 6, &v28);
    }

    dict_BOOL(v22, @"kdebug_continuous_time", v15 + 77);
    dict_BOOL(v22, @"kdebug_coprocessor_tracing", v24);
    goto LABEL_34;
  }

  unsigned int v15 = 0LL;
  int inited = *__error();
LABEL_24:
  ktrace_chunk_unmap_data((uint64_t)a1, v5, v3);
  if (inited)
  {
LABEL_25:
    if (v15) {
      ktrace_config_destroy((void **)v15);
    }
    goto LABEL_27;
  }

  return v15;
}

      unsigned int v24 = v134;
      unsigned int v25 = flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)v36, v37 - v38 + v39);
      int v55 = v24[8];
      unsigned int v27 = (char *)v24[7];
      if ((unint64_t)v27 < v55)
      {
LABEL_49:
        *(_DWORD *)unsigned int v27 = v25;
        v63 = v27 + 4;
      }

      else
      {
        uint64_t v28 = (char *)v24[6];
        int v56 = (v27 - v28) >> 2;
        v57 = v55 - (void)v28;
        uint64_t v58 = (uint64_t)(v55 - (void)v28) >> 1;
        if (v58 <= v56 + 1) {
          uint64_t v58 = v56 + 1;
        }
        if (v57 >= 0x7FFFFFFFFFFFFFFCLL) {
          int v59 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          int v59 = v58;
        }
        if (v59)
        {
          v60 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<flatbuffers::Offset<KernelTraceCatalog::Thread>>>( (uint64_t)(v24 + 8),  v59);
          uint64_t v28 = (char *)v24[6];
          unsigned int v27 = (char *)v24[7];
        }

        else
        {
          v60 = 0LL;
        }

        v69 = &v60[4 * v56];
        v70 = &v60[4 * v59];
        *(_DWORD *)v69 = v25;
        v63 = v69 + 4;
        while (v27 != v28)
        {
          v72 = *((_DWORD *)v27 - 1);
          v27 -= 4;
          *((_DWORD *)v69 - 1) = v72;
          v69 -= 4;
        }

  __break(1u);
  return result;
}

  sub_186C395D4(v100, *((unint64_t *)&v100 + 1));
  return v72;
}

BOOL __ktrace_config_create_block_invoke(uint64_t a1, uint64_t a2)
{
  int v4 = ktrace_chunk_tag(a2);
  if (v4 == 32774) {
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = a2;
  }
  return v4 != 32774;
}

uint64_t config_kdebug_init(uint64_t a1, const __CFDictionary *a2)
{
  uint64_t result = dict_uint64(a2, @"kdebug_buffer_size", (void *)(a1 + 56));
  if (!(_DWORD)result)
  {
    uint64_t result = dict_data(a2, @"kdebug_typefilter", (UInt8 **)(a1 + 24), 0LL);
    if (!(_DWORD)result)
    {
      uint64_t result = dict_uint32(a2, @"kdebug_procfilt_mode", (void *)(a1 + 72));
      if (!(_DWORD)result)
      {
        uint64_t result = dict_int_arr(a2, @"kdebug_procfilt", (void *)(a1 + 32), (_DWORD *)(a1 + 64));
        if (!(_DWORD)result) {
          return dict_BOOL(a2, @"kdebug_wrapping", (BOOL *)(a1 + 76));
        }
      }
    }
  }

  return result;
}

CFIndex config_kperf_init(uint64_t a1, const __CFDictionary *a2)
{
  int v4 = (_DWORD *)(a1 + 128);
  CFIndex result = dict_uint64_arr(a2, @"kperf_actions_sampler", (void *)(a1 + 80), (_DWORD *)(a1 + 128));
  if (!(_DWORD)result)
  {
    CFIndex result = dict_uint64_arr(a2, @"kperf_actions_user_data", (void *)(a1 + 88), &v7);
    if (!(_DWORD)result)
    {
      if (*v4 != v7) {
        return 79LL;
      }
      CFIndex result = dict_int_arr(a2, @"kperf_actions_pid_filter", (void *)(a1 + 96), &v7);
      if ((_DWORD)result) {
        return result;
      }
      if (*v4 != v7) {
        return 79LL;
      }
      CFIndex result = dict_uint32_arr(a2, @"kperf_timers_action_id", (void *)(a1 + 104), (_DWORD *)(a1 + 132));
      if ((_DWORD)result) {
        return result;
      }
      CFIndex result = dict_uint64_arr(a2, @"kperf_timers_period_ns", (void *)(a1 + 112), &v6);
      if ((_DWORD)result) {
        return result;
      }
      if (*(_DWORD *)(a1 + 132) != v6) {
        return 79LL;
      }
      CFIndex result = dict_uint32(a2, @"kperf_pet_mode", (void *)(a1 + 140));
      if (!(_DWORD)result)
      {
        CFIndex result = dict_int(a2, @"kperf_pet_timer_id", (void *)(a1 + 144));
        if (!(_DWORD)result)
        {
          CFIndex result = dict_uint32(a2, @"kperf_pet_idle_rate", (void *)(a1 + 148));
          if (!(_DWORD)result)
          {
            CFIndex result = dict_uint32(a2, @"kperf_kdebug_action_id", (void *)(a1 + 152));
            if (!(_DWORD)result) {
              return dict_string(a2, @"kperf_kdebug_filter", 0LL, 0LL, (char **)(a1 + 120));
            }
          }
        }
      }
    }
  }

  return result;
}

CFIndex config_kpc_init(uint64_t a1, const __CFDictionary *a2)
{
  CFIndex result = dict_uint64_arr(a2, @"kpc_config", (void *)(a1 + 192), (_DWORD *)(a1 + 240));
  if (!(_DWORD)result)
  {
    CFIndex result = dict_uint64(a2, @"kpc_classes", (void *)(a1 + 224));
    if (!(_DWORD)result)
    {
      CFIndex result = dict_uint64(a2, @"kpc_thread_classes", (void *)(a1 + 232));
      if (!(_DWORD)result)
      {
        CFIndex result = dict_uint64_arr(a2, @"kpc_periods", (void *)(a1 + 200), (_DWORD *)(a1 + 244));
        if (!(_DWORD)result)
        {
          CFIndex result = dict_uint32_arr(a2, @"kpc_action_ids", (void *)(a1 + 208), &v5);
          if (!(_DWORD)result)
          {
            if (*(_DWORD *)(a1 + 244) == v5) {
              return 0LL;
            }
            else {
              return 22LL;
            }
          }
        }
      }
    }
  }

  return result;
}

void ktrace_config_destroy(void **a1)
{
  if (a1)
  {
    free(*a1);
    free(a1[1]);
    free(a1[2]);
    free(a1[3]);
    free(a1[4]);
    free(a1[5]);
    free(a1[6]);
    free(a1[10]);
    free(a1[11]);
    free(a1[12]);
    free(a1[13]);
    free(a1[14]);
    free(a1[15]);
    free(a1[24]);
    free(a1[26]);
    free(a1[25]);
    free(a1);
  }

uint64_t ktrace_config_create_current()
{
  uint64_t v33 = *MEMORY[0x1895F89C0];
  v0 = (char **)calloc(1uLL, 0x110uLL);
  if (!v0) {
    ktrace_remotetime_update_params_cold_1();
  }
  uint64_t v1 = (uint64_t)v0;
  int v2 = sysctlbyname_string(0LL, 0LL, "ktrace.configured_by", v0, 0x20uLL);
  if (v2) {
    goto LABEL_35;
  }
  int v2 = sysctlbyname_int(0LL, 0LL, "ktrace.state", (void *)(v1 + 252));
  if (v2) {
    goto LABEL_35;
  }
  int v2 = sysctlbyname_int(0LL, 0LL, "ktrace.owning_pid", (void *)(v1 + 248));
  if (v2) {
    goto LABEL_35;
  }
  int bufinfo = kdebug_get_bufinfo(v22);
  if (bufinfo)
  {
    int v2 = bufinfo;
LABEL_35:
    ktrace_config_destroy((void **)v1);
    uint64_t v1 = 0LL;
    *__error() = v2;
    return v1;
  }

  int v4 = v22[0];
  if (v22[0])
  {
    if (v22[1]) {
      int v5 = 1;
    }
    else {
      int v5 = 3;
    }
    *(_DWORD *)(v1 + 6_Block_object_dispose(va, 8) = v5;
    if ((v24 & 0x40) != 0)
    {
      int v6 = malloc(0x2000uLL);
      *(void *)(v1 + 24) = v6;
      if (!v6) {
        ktrace_remotetime_update_params_cold_1();
      }
      int v7 = v6;
      uint64_t v8 = (const void *)kdebug_typefilter();
      memcpy(v7, v8, 0x2000uLL);
      int v4 = v22[0];
    }

    uint64_t v9 = v4;
    int is_64_bit = current_system_is_64_bit();
    char v11 = 5;
    if (is_64_bit) {
      char v11 = 6;
    }
    *(void *)(v1 + 56) = v9 << v11;
    __int16 v12 = v23;
    *(_BYTE *)(v1 + 76) = (v23 & 2) == 0;
    if ((v12 & 0x10) != 0)
    {
      int v13 = 1;
    }

    else
    {
      if ((v12 & 0x40) == 0)
      {
        *(_DWORD *)(v1 + 72) = 0;
        goto LABEL_24;
      }

      int v13 = 2;
    }

    *(_DWORD *)(v1 + 72) = v13;
    int v14 = proc_listpids(7u, 0, 0LL, 0);
    unsigned int v15 = calloc(1uLL, v14);
    if (!v15) {
      ktrace_remotetime_update_params_cold_1();
    }
    int v16 = v15;
    *(_DWORD *)(v1 + 64) = proc_listpids(7u, 0, v15, v14) >> 2;
    *(void *)(v1 + 32) = v16;
    __int16 v12 = v23;
LABEL_24:
    if ((v12 & 0x800) == 0)
    {
LABEL_32:
      *(_BYTE *)(v1 + 77) = (v12 & 0x200) != 0;
      *(_BYTE *)(v1 + 7_Block_object_dispose(va, 8) = (v12 & 0x400) == 0;
      goto LABEL_33;
    }

    int v32 = 27;
    *(void *)uint64_t v31 = 0x1800000001LL;
    __int128 v29 = 0u;
    __int128 v30 = 0u;
    __int128 v27 = 0u;
    __int128 v28 = 0u;
    __int128 v26 = 0u;
    size_t v25 = 80LL;
    if (sysctl(v31, 3u, &v26, &v25, 0LL, 0LL))
    {
      int v17 = *__error();
      ktrace_log_init();
      if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
        ktrace_config_create_current_cold_3();
      }
    }

    else
    {
      uint64_t v18 = calloc(5uLL, 8uLL);
      if (v18)
      {
        uint64_t v19 = v18;
        unint64_t v20 = (char *)calloc(5uLL, 8uLL);
        *uint64_t v19 = v26;
        v19[1] = *((void *)&v26 + 1);
        *((_OWORD *)v19 + 1) = v27;
        v19[4] = v28;
        *(void *)unint64_t v20 = DWORD2(v28);
        *(_OWORD *)(v20 + _Block_object_dispose(va, 8) = v29;
        *(_OWORD *)(v20 + 24) = v30;
        *(void *)(v1 + 40) = v19;
        *(void *)(v1 + 4_Block_object_dispose(va, 8) = v20;
        goto LABEL_31;
      }

      int v17 = *__error();
      ktrace_log_init();
      if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
        ktrace_config_create_current_cold_2();
      }
    }

    *__error() = v17;
LABEL_31:
    __int16 v12 = v23;
    goto LABEL_32;
  }

  *(_DWORD *)(v1 + 6_Block_object_dispose(va, 8) = 0;
LABEL_33:
  int v2 = config_current_kperf(v1);
  if (v2) {
    goto LABEL_35;
  }
  int v2 = config_current_kpc(v1);
  if (v2) {
    goto LABEL_35;
  }
  return v1;
}

uint64_t config_current_kperf(uint64_t a1)
{
  int v2 = (unsigned int *)(a1 + 128);
  uint64_t v3 = kperf_action_count_get();
  if ((_DWORD)v3)
  {
    uint64_t v4 = v3;
    int v5 = *__error();
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
      config_current_kperf_cold_20();
    }
    goto LABEL_4;
  }

  uint64_t v7 = *(unsigned int *)(a1 + 128);
  uint64_t v8 = malloc(8 * v7);
  *(void *)(a1 + 80) = v8;
  if (!v8) {
    ktrace_remotetime_update_params_cold_1();
  }
  uint64_t v9 = malloc(8 * v7);
  *(void *)(a1 + 8_Block_object_dispose(va, 8) = v9;
  if (!v9) {
    ktrace_remotetime_update_params_cold_1();
  }
  uint64_t v10 = malloc(4 * v7);
  *(void *)(a1 + 96) = v10;
  if (!v10) {
    ktrace_remotetime_update_params_cold_1();
  }
  if ((_DWORD)v7)
  {
    uint64_t v11 = 0LL;
    uint64_t v12 = 0LL;
    char v13 = 0;
    while (1)
    {
      unint64_t v14 = v12 + 1;
      uint64_t v15 = kperf_action_samplers_get();
      if ((_DWORD)v15) {
        break;
      }
      BOOL v16 = (_DWORD)v40 != 0;
      *(void *)(*(void *)(a1 + 80) + 8 * v12) = v40;
      uint64_t v17 = kperf_action_userdata_get();
      if ((_DWORD)v17)
      {
        uint64_t v4 = v17;
        int v5 = *__error();
        ktrace_log_init();
        if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
          config_current_kperf_cold_18();
        }
        goto LABEL_4;
      }

      *(void *)(*(void *)(a1 + 88) + 8 * v12) = v40;
      uint64_t v18 = kperf_action_filter_get();
      if ((_DWORD)v18)
      {
        uint64_t v4 = v18;
        goto LABEL_5;
      }

      v13 |= v16;
      v11 += 4LL;
      ++v12;
      if (v14 >= *v2) {
        goto LABEL_19;
      }
    }

    uint64_t v4 = v15;
    int v5 = *__error();
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
      config_current_kperf_cold_19();
    }
    goto LABEL_4;
  }

  char v13 = 0;
LABEL_19:
  uint64_t v19 = kperf_timer_count_get();
  if ((_DWORD)v19)
  {
    uint64_t v4 = v19;
    int v5 = *__error();
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
      config_current_kperf_cold_17();
    }
    goto LABEL_4;
  }

  uint64_t v20 = *(unsigned int *)(a1 + 132);
  int v21 = malloc(4 * v20);
  *(void *)(a1 + 104) = v21;
  if (!v21) {
    ktrace_remotetime_update_params_cold_1();
  }
  unint64_t v22 = malloc(8 * v20);
  *(void *)(a1 + 112) = v22;
  if (!v22) {
    ktrace_remotetime_update_params_cold_1();
  }
  if ((_DWORD)v20)
  {
    uint64_t v23 = 0LL;
    unint64_t v24 = 0LL;
    while (1)
    {
      uint64_t v25 = kperf_timer_action_get();
      if ((_DWORD)v25) {
        break;
      }
      uint64_t v26 = kperf_timer_period_get();
      if ((_DWORD)v26)
      {
        uint64_t v4 = v26;
        int v5 = *__error();
        ktrace_log_init();
        if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
          config_current_kperf_cold_15();
        }
        goto LABEL_4;
      }

      *(void *)(*(void *)(a1 + 112) + 8 * v24++) = kperf_ticks_to_ns();
      v23 += 4LL;
    }

    uint64_t v4 = v25;
    int v5 = *__error();
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
      config_current_kperf_cold_16();
    }
    goto LABEL_4;
  }

LABEL_4:
  *__error() = v5;
LABEL_5:
  if (*__error()) {
    return *__error();
  }
  return v4;
}

  _Block_object_dispose(&v40, 8);
}

      uint64_t v8 = v70;
      uint64_t v7 = v71;
LABEL_5:
      v8 += 5;
      if (!--v7) {
        return swift_bridgeObjectRelease();
      }
    }
  }

  return result;
}

      CFIndex result = swift_bridgeObjectRelease();
      goto LABEL_5;
    }

    CFIndex result = swift_bridgeObjectRelease();
LABEL_15:
    unint64_t v22 = v30[v17];
    v30[v17] = v22 & ~v18;
    if ((v18 & v22) != 0)
    {
      uint64_t v23 = v31 - 1;
      if (__OFSUB__(v31, 1LL)) {
        goto LABEL_30;
      }
      --v31;
      if (!v23) {
        return MEMORY[0x18961AFF8];
      }
    }

uint64_t config_current_kpc(uint64_t a1)
{
  unsigned int counting = kpc_get_counting();
  *(void *)(a1 + 224) = counting;
  if (!counting)
  {
    uint64_t period = 0LL;
    *(_DWORD *)(a1 + 216) = 0;
    return period;
  }

  *(_DWORD *)(a1 + 216) = 3;
  *(void *)(a1 + 232) = kpc_get_thread_counting();
  *(_DWORD *)(a1 + 240) = kpc_get_config_count();
  int counter_count = kpc_get_counter_count();
  *(_DWORD *)(a1 + 244) = counter_count;
  size_t v4 = *(unsigned int *)(a1 + 240);
  if (!(_DWORD)v4 || !counter_count)
  {
    uint64_t period = 0LL;
    *(void *)(a1 + 240) = 0LL;
    return period;
  }

  int v5 = calloc(v4, 8uLL);
  *(void *)(a1 + 192) = v5;
  if (!v5) {
    ktrace_remotetime_update_params_cold_1();
  }
  uint64_t config = kpc_get_config();
  if ((_DWORD)config)
  {
    uint64_t period = config;
    int v8 = *__error();
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
      config_current_kpc_cold_6();
    }
LABEL_18:
    *__error() = v8;
    if (*__error()) {
      return *__error();
    }
    return period;
  }

  uint64_t v9 = malloc(4LL * *(unsigned int *)(a1 + 244));
  *(void *)(a1 + 20_Block_object_dispose(va, 8) = v9;
  if (!v9) {
    ktrace_remotetime_update_params_cold_1();
  }
  uint64_t actionid = kpc_get_actionid();
  if ((_DWORD)actionid)
  {
    uint64_t period = actionid;
    int v8 = *__error();
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
      config_current_kpc_cold_5();
    }
    goto LABEL_18;
  }

  uint64_t v11 = malloc(8LL * *(unsigned int *)(a1 + 244));
  *(void *)(a1 + 200) = v11;
  if (!v11) {
    ktrace_remotetime_update_params_cold_1();
  }
  uint64_t period = kpc_get_period();
  if ((_DWORD)period)
  {
    int v8 = *__error();
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
      config_current_kpc_cold_4();
    }
    goto LABEL_18;
  }

  return period;
}

_DWORD *ktrace_config_enable_configured(_DWORD *result)
{
  if (!result) {
    ktrace_remotetime_update_params_cold_1();
  }
  if (result[17] == 1) {
    result[17] = 3;
  }
  if (result[34] == 1) {
    result[34] = 3;
  }
  if (result[54] == 1) {
    result[54] = 3;
  }
  return result;
}

uint64_t ktrace_config_kdebug_get_state(uint64_t a1)
{
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  return *(unsigned int *)(a1 + 68);
}

uint64_t ktrace_config_kperf_get_state(uint64_t a1)
{
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  return *(unsigned int *)(a1 + 136);
}

uint64_t ktrace_config_kpc_get_state(uint64_t a1)
{
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  return *(unsigned int *)(a1 + 216);
}

void *ktrace_config_append(uint64_t a1, uint64_t a2)
{
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  if (!a2) {
    ktrace_remotetime_update_params_cold_1();
  }
  CFIndex v8 = 0LL;
  uint64_t v9 = 0LL;
  int v3 = ktrace_config_serialize(a1, &v9, &v8);
  if (v3)
  {
    int v4 = v3;
    appended = 0LL;
  }

  else
  {
    int v6 = v9;
    if (!v9) {
      ktrace_remotetime_update_params_cold_1();
    }
    if (!v8) {
      ktrace_remotetime_update_params_cold_1();
    }
    appended = ktrace_file_append_chunk(a2, 32774, 1, 4, v9, v8);
    int v4 = *__error();
    free(v6);
  }

  *__error() = v4;
  return appended;
}

uint64_t ktrace_config_serialize(uint64_t a1, UInt8 **a2, CFIndex *a3)
{
  CFErrorRef error = 0LL;
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0LL, 0LL, MEMORY[0x189605240], MEMORY[0x189605250]);
  if (!Mutable) {
    return 12LL;
  }
  uint64_t v7 = Mutable;
  uint64_t v8 = dict_set_string(Mutable, @"owner_name", *(char **)a1);
  if (!(_DWORD)v8)
  {
    uint64_t v8 = dict_set_uint32(v7, @"owner_kind", *(_DWORD *)(a1 + 252));
    if (!(_DWORD)v8)
    {
      uint64_t v8 = dict_set_int(v7, @"owner_pid", *(_DWORD *)(a1 + 248));
      if (!(_DWORD)v8)
      {
        uint64_t v8 = dict_set_uint32(v7, @"context_kind", *(_DWORD *)(a1 + 256));
        if (!(_DWORD)v8)
        {
          uint64_t v8 = dict_set_string(v7, @"reason", *(char **)(a1 + 8));
          if (!(_DWORD)v8)
          {
            uint64_t v8 = dict_set_string(v7, @"command", *(char **)(a1 + 16));
            if (!(_DWORD)v8)
            {
              uint64_t v8 = dict_set_uint32(v7, @"trigger_kind", *(_DWORD *)(a1 + 260));
              if (!(_DWORD)v8)
              {
                uint64_t v8 = dict_set_uint32(v7, @"kdebug_state", *(_DWORD *)(a1 + 68));
                if (!(_DWORD)v8)
                {
                  uint64_t v8 = dict_set_uint64(v7, @"kdebug_buffer_size", *(void *)(a1 + 56));
                  if (!(_DWORD)v8)
                  {
                    uint64_t v8 = dict_set_data( v7,  @"kdebug_typefilter",  *(UInt8 **)(a1 + 24),  (unint64_t)(*(void *)(a1 + 24) != 0LL) << 13);
                    if (!(_DWORD)v8)
                    {
                      uint64_t v8 = dict_set_uint32(v7, @"kdebug_procfilt_mode", *(_DWORD *)(a1 + 72));
                      if (!(_DWORD)v8)
                      {
                        uint64_t v8 = dict_set_int_arr( v7,  @"kdebug_procfilt",  *(char **)(a1 + 32),  *(unsigned int *)(a1 + 64));
                        if (!(_DWORD)v8)
                        {
                          uint64_t v8 = dict_set_BOOL(v7, @"kdebug_wrapping", *(unsigned __int8 *)(a1 + 76));
                          if (!(_DWORD)v8)
                          {
                            uint64_t v8 = dict_set_BOOL(v7, @"kdebug_continuous_time", *(unsigned __int8 *)(a1 + 77));
                            if (!(_DWORD)v8)
                            {
                              uint64_t v8 = dict_set_BOOL(v7, @"kdebug_coprocessor_tracing", *(unsigned __int8 *)(a1 + 78));
                              if (!(_DWORD)v8)
                              {
                                uint64_t v8 = dict_set_uint64_arr( v7,  @"kdebug_disabling_event_match",  *(char **)(a1 + 40),  5LL);
                                if (!(_DWORD)v8)
                                {
                                  uint64_t v8 = dict_set_uint64_arr( v7,  @"kdebug_disabling_event_mask",  *(char **)(a1 + 48),  5LL);
                                  if (!(_DWORD)v8)
                                  {
                                    uint64_t v8 = dict_set_uint32(v7, @"kperf_state", *(_DWORD *)(a1 + 136));
                                    if (!(_DWORD)v8)
                                    {
                                      uint64_t v8 = dict_set_uint64_arr( v7,  @"kperf_actions_sampler",  *(char **)(a1 + 80),  *(unsigned int *)(a1 + 128));
                                      if (!(_DWORD)v8)
                                      {
                                        uint64_t v8 = dict_set_uint64_arr( v7,  @"kperf_actions_user_data",  *(char **)(a1 + 88),  *(unsigned int *)(a1 + 128));
                                        if (!(_DWORD)v8)
                                        {
                                          uint64_t v8 = dict_set_int_arr( v7,  @"kperf_actions_pid_filter",  *(char **)(a1 + 96),  *(unsigned int *)(a1 + 128));
                                          if (!(_DWORD)v8)
                                          {
                                            uint64_t v8 = dict_set_uint32_arr( v7,  @"kperf_timers_action_id",  *(char **)(a1 + 104),  *(unsigned int *)(a1 + 132));
                                            if (!(_DWORD)v8)
                                            {
                                              uint64_t v8 = dict_set_uint64_arr( v7,  @"kperf_timers_period_ns",  *(char **)(a1 + 112),  *(unsigned int *)(a1 + 132));
                                              if (!(_DWORD)v8)
                                              {
                                                uint64_t v8 = dict_set_uint32( v7,  @"kperf_kdebug_action_id",  *(_DWORD *)(a1 + 152));
                                                if (!(_DWORD)v8)
                                                {
                                                  uint64_t v8 = dict_set_string( v7,  @"kperf_kdebug_filter",  *(char **)(a1 + 120));
                                                  if (!(_DWORD)v8)
                                                  {
                                                    uint64_t v8 = dict_set_uint32( v7,  @"kperf_pet_mode",  *(_DWORD *)(a1 + 140));
                                                    if (!(_DWORD)v8)
                                                    {
                                                      uint64_t v8 = dict_set_int( v7,  @"kperf_pet_timer_id",  *(_DWORD *)(a1 + 144));
                                                      if (!(_DWORD)v8)
                                                      {
                                                        uint64_t v8 = dict_set_uint32( v7,  @"kperf_pet_idle_rate",  *(_DWORD *)(a1 + 148));
                                                        if (!(_DWORD)v8)
                                                        {
                                                          uint64_t v8 = dict_set_uint64( v7,  @"kperf_lazy_wait_threshold",  *(void *)(a1 + 160));
                                                          if (!(_DWORD)v8)
                                                          {
                                                            uint64_t v8 = dict_set_uint32( v7,  @"kperf_lazy_wait_action",  *(_DWORD *)(a1 + 168));
                                                            if (!(_DWORD)v8)
                                                            {
                                                              uint64_t v8 = dict_set_uint64( v7,  @"kperf_lazy_cpu_threshold",  *(void *)(a1 + 176));
                                                              if (!(_DWORD)v8)
                                                              {
                                                                uint64_t v8 = dict_set_uint32( v7,  @"kperf_lazy_cpu_action",  *(_DWORD *)(a1 + 184));
                                                                if (!(_DWORD)v8)
                                                                {
                                                                  uint64_t v8 = dict_set_uint32( v7,  @"kpc_state",  *(_DWORD *)(a1 + 216));
                                                                  if (!(_DWORD)v8)
                                                                  {
                                                                    uint64_t v8 = dict_set_uint64_arr( v7,  @"kpc_config",  *(char **)(a1 + 192),  *(unsigned int *)(a1 + 240));
                                                                    if (!(_DWORD)v8)
                                                                    {
                                                                      uint64_t v8 = dict_set_uint64( v7,  @"kpc_classes",  *(void *)(a1 + 224));
                                                                      if (!(_DWORD)v8)
                                                                      {
                                                                        uint64_t v8 = dict_set_uint64( v7,  @"kpc_thread_classes",  *(void *)(a1 + 232));
                                                                        if (!(_DWORD)v8)
                                                                        {
                                                                          uint64_t v8 = dict_set_uint64_arr( v7,  @"kpc_periods",  *(char **)(a1 + 200),  *(unsigned int *)(a1 + 244));
                                                                          if (!(_DWORD)v8)
                                                                          {
                                                                            uint64_t v8 = dict_set_uint32_arr( v7,  @"kpc_action_ids",  *(char **)(a1 + 208),  *(unsigned int *)(a1 + 244));
                                                                            if (!(_DWORD)v8)
                                                                            {
                                                                              uint64_t v11 = CFPropertyListCreateData( 0LL,  v7,  kCFPropertyListBinaryFormat_v1_0,  0LL,  &error);
                                                                              if (v11)
                                                                              {
                                                                                uint64_t v12 = v11;
                                                                                size_t Length = CFDataGetLength(v11);
                                                                                CFIndex v14 = Length;
                                                                                if (Length)
                                                                                {
                                                                                  uint64_t v15 = (UInt8 *)malloc(Length);
                                                                                  if (v15)
                                                                                  {
                                                                                    v22.location = 0LL;
                                                                                    v22.length = v14;
                                                                                    CFDataGetBytes(v12, v22, v15);
                                                                                    uint64_t v8 = 0LL;
                                                                                  }

                                                                                  else
                                                                                  {
                                                                                    uint64_t v8 = *__error();
                                                                                  }
                                                                                }

                                                                                else
                                                                                {
                                                                                  *__error() = 22;
                                                                                  int v20 = *__error();
                                                                                  ktrace_log_init();
                                                                                  if (os_log_type_enabled( (os_log_t)ktrace_log,  OS_LOG_TYPE_ERROR))
                                                                                  {
                                                                                    ktrace_config_serialize_cold_4();
                                                                                  }

                                                                                  uint64_t v15 = 0LL;
                                                                                  *__error() = v20;
                                                                                  uint64_t v8 = 22LL;
                                                                                }

                                                                                CFRelease(v12);
                                                                                CFRelease(v7);
                                                                                if (!(_DWORD)v8)
                                                                                {
                                                                                  *a2 = v15;
                                                                                  *a3 = v14;
                                                                                  return v8;
                                                                                }

                                                                                uint64_t v9 = v15;
                                                                                goto LABEL_42;
                                                                              }

                                                                              CFErrorRef v16 = error;
                                                                              int v17 = *__error();
                                                                              ktrace_log_init();
                                                                              uint64_t v18 = (os_log_s *)ktrace_log;
                                                                              BOOL v19 = os_log_type_enabled( (os_log_t)ktrace_log,  OS_LOG_TYPE_ERROR);
                                                                              if (v16)
                                                                              {
                                                                                if (v19) {
                                                                                  ktrace_config_serialize_cold_3( (uint64_t *)&error,  v17,  v18);
                                                                                }
                                                                              }

                                                                              else if (v19)
                                                                              {
                                                                                ktrace_config_serialize_cold_2();
                                                                              }

                                                                              *__error() = v17;
                                                                              uint64_t v8 = 22LL;
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }

  CFRelease(v7);
  uint64_t v9 = 0LL;
LABEL_42:
  free(v9);
  return v8;
}

const char *state_name(int a1)
{
  if (a1 > 2)
  {
    if (a1 == 3)
    {
      return "enabled";
    }

    else
    {
      if (a1 != 0x8000000) {
        goto LABEL_10;
      }
      return "unknown";
    }
  }

  else
  {
    if (a1)
    {
      if (a1 == 1) {
        return "configured";
      }
LABEL_10:
      state_name_cold_1();
    }

    return "off";
  }

char *owner_kind_name(unsigned int a1)
{
  if (a1 >= 3) {
    owner_kind_name_cold_1();
  }
  return off_189F54F18[a1];
}

char *context_kind_name(unsigned int a1)
{
  if (a1 >= 5) {
    context_kind_name_cold_1();
  }
  return off_189F54F30[a1];
}

char *trigger_kind_name(unsigned int a1)
{
  if (a1 >= 4) {
    trigger_kind_name_cold_1();
  }
  return off_189F54F58[a1];
}

FILE *print_typefilter(FILE *result, const char *a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a3 + 24);
  if (v3)
  {
    int v5 = result;
    uint64_t v6 = 0LL;
    char v7 = 0;
    uint64_t v8 = v3 + 1;
    uint64_t v9 = *(void *)(a3 + 24);
    uint64_t v18 = v9;
    do
    {
      if (*(_BYTE *)(v3 + 32 * v6))
      {
LABEL_4:
        if ((v7 & 1) == 0)
        {
          uint64_t v10 = kdebug_alloc_filter_description(v3);
          uint64_t v11 = v10;
          if (v10) {
            uint64_t v12 = v10;
          }
          else {
            uint64_t v12 = "";
          }
          fprintf(v5, "%stypefilter: %s\n", a2, v12);
          free(v11);
          fprintf(v5, "%s%8s  ", a2, "");
          for (int i = 0; i != 256; i += 8)
            fprintf(v5, "%02x ", i);
          fputc(10, v5);
          fprintf(v5, "%s%8s  ", a2, "");
          int v14 = 32;
          do
          {
            fwrite("---", 3uLL, 1uLL, v5);
            --v14;
          }

          while (v14);
          fputc(10, v5);
          uint64_t v3 = v18;
        }

        fprintf(v5, "%s%6s%02x: ", a2, "", v6);
        for (uint64_t j = 0LL; j != 32; ++j)
          fprintf(v5, "%02X ", *(unsigned __int8 *)(v9 + j));
        CFIndex result = (FILE *)fputc(10, v5);
        char v7 = 1;
      }

      else
      {
        uint64_t v16 = 0LL;
        while (v16 != 31)
        {
          if (*(unsigned __int8 *)(v8 + v16++))
          {
            break;
          }
        }
      }

      ++v6;
      v8 += 32LL;
      v9 += 32LL;
    }

    while (v6 != 256);
  }

  return result;
}

FILE *ktrace_config_copy_description(uint64_t a1)
{
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  size_t v4 = 0LL;
  __bufp = 0LL;
  CFIndex result = open_memstream(&__bufp, &v4);
  if (result)
  {
    uint64_t v3 = result;
    ktrace_config_print_description(a1, result);
    fclose(v3);
    return (FILE *)__bufp;
  }

  return result;
}

uint64_t ktrace_config_print_description(uint64_t a1, FILE *__stream)
{
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  if (!__stream) {
    ktrace_remotetime_update_params_cold_1();
  }
  int v4 = *(_DWORD *)(a1 + 252);
  if (v4)
  {
    if (v4 == 1)
    {
      int v5 = "foreground";
    }

    else
    {
      if (v4 != 2) {
        owner_kind_name_cold_1();
      }
      int v5 = "background";
    }

    fprintf(__stream, "owner: %s[%d] (%s)\n", *(const char **)a1, *(_DWORD *)(a1 + 248), v5);
  }

  else
  {
    fwrite("unowned\n", 8uLL, 1uLL, __stream);
  }

  unsigned int v6 = *(_DWORD *)(a1 + 256);
  if (v6)
  {
    char v7 = context_kind_name(v6);
    fprintf(__stream, "context: %s\n", v7);
  }

  unsigned int v8 = *(_DWORD *)(a1 + 260);
  if (v8)
  {
    uint64_t v9 = trigger_kind_name(v8);
    fprintf(__stream, "trigger: %s\n", v9);
  }

  uint64_t v10 = *(_BYTE **)(a1 + 8);
  if (v10 && *v10) {
    fprintf(__stream, "reason: %s\n", *(const char **)(a1 + 8));
  }
  if (*(void *)(a1 + 16)) {
    fprintf(__stream, "command: %s\n", *(const char **)(a1 + 16));
  }
  uint64_t v11 = state_name(*(_DWORD *)(a1 + 68));
  fprintf(__stream, "kdebug: %s\n", v11);
  if (*(_DWORD *)(a1 + 68))
  {
    if (*(_BYTE *)(a1 + 77)) {
      uint64_t v12 = "continuous";
    }
    else {
      uint64_t v12 = "absolute";
    }
    fprintf(__stream, "\ttimestamps: %s\n", v12);
    fprintf(__stream, "\tbuffer size: %llu bytes\n", *(void *)(a1 + 56));
    if (*(_BYTE *)(a1 + 76)) {
      char v13 = "YES";
    }
    else {
      char v13 = "NO";
    }
    fprintf(__stream, "\twrapping: %s\n", v13);
    if (*(_BYTE *)(a1 + 78)) {
      int v14 = "YES";
    }
    else {
      int v14 = "NO";
    }
    fprintf(__stream, "\tcoprocessors: %s\n", v14);
    int v15 = *(_DWORD *)(a1 + 72);
    if (v15)
    {
      if (v15 == 1) {
        uint64_t v16 = "in";
      }
      else {
        uint64_t v16 = "ex";
      }
      fprintf(__stream, "\tprocesses %scluded:\n", v16);
      fwrite("\t\t", 2uLL, 1uLL, __stream);
      if (*(_DWORD *)(a1 + 64))
      {
        unint64_t v17 = 0LL;
        do
        {
          if (v17) {
            uint64_t v18 = ", ";
          }
          else {
            uint64_t v18 = "";
          }
          fprintf(__stream, "%s%d", v18, *(_DWORD *)(*(void *)(a1 + 32) + 4 * v17++));
        }

        while (v17 < *(unsigned int *)(a1 + 64));
      }

      fputc(10, __stream);
    }

    if (*(void *)(a1 + 40)) {
      BOOL v19 = "YES";
    }
    else {
      BOOL v19 = "NO";
    }
    fprintf(__stream, "\tend event matching: %s\n", v19);
    int v20 = *(void **)(a1 + 40);
    if (v20)
    {
      fprintf(__stream, "\t\tdebugid: 0x%08x & 0x%08x\n", *v20, **(void **)(a1 + 48));
      fwrite("\t\targs:\n", 8uLL, 1uLL, __stream);
      int v21 = *(void **)(a1 + 40);
      fprintf( __stream,  "\t\t\t0x%016llx & 0x%016llx\n \t\t\t0x%016llx & 0x%016llx\n \t\t\t0x%016llx & 0x%016llx\n \t\t\t0x%016llx & 0x%016llx\n",  v21[1],  *(void *)(*(void *)(a1 + 48) + 8LL),  v21[2],  *(void *)(*(void *)(a1 + 48) + 16LL),  v21[3],  *(void *)(*(void *)(a1 + 48) + 24LL),  v21[4],  *(void *)(*(void *)(a1 + 48) + 32LL));
    }

    print_typefilter(__stream, "\t", a1);
  }

  CFRange v22 = state_name(*(_DWORD *)(a1 + 136));
  fprintf(__stream, "kperf: %s\n", v22);
  if (*(_DWORD *)(a1 + 136))
  {
    fprintf(__stream, "\t%u actions:\n", *(_DWORD *)(a1 + 128));
    if (*(_DWORD *)(a1 + 128))
    {
      unint64_t v23 = 0LL;
      do
      {
        unint64_t v24 = v23 + 1;
        fprintf( __stream,  "\t\t%u: samplers = %#llx, user data = %#llx, pid filter = %d\n",  v23 + 1,  *(void *)(*(void *)(a1 + 80) + 8 * v23),  *(void *)(*(void *)(a1 + 88) + 8 * v23),  *(_DWORD *)(*(void *)(a1 + 96) + 4 * v23));
        unint64_t v23 = v24;
      }

      while (v24 < *(unsigned int *)(a1 + 128));
    }

    fprintf(__stream, "\t%u timers:\n", *(_DWORD *)(a1 + 132));
    if (*(_DWORD *)(a1 + 132))
    {
      unint64_t v25 = 0LL;
      do
      {
        fprintf( __stream,  "\t\t%u: uint64_t period = %llu ns, action = %u\n",  v25,  *(void *)(*(void *)(a1 + 112) + 8 * v25),  *(_DWORD *)(*(void *)(a1 + 104) + 4 * v25));
        ++v25;
      }

      while (v25 < *(unsigned int *)(a1 + 132));
    }

    uint64_t v26 = *(const char **)(a1 + 120);
    if (v26) {
      fprintf(__stream, "\tkdebug filter: %d: %s\n", *(_DWORD *)(a1 + 152), v26);
    }
    if (*(_DWORD *)(a1 + 140))
    {
      fprintf(__stream, "\tPET: %d: ", *(_DWORD *)(a1 + 144));
      if (*(_DWORD *)(a1 + 140) == 1) {
        fprintf(__stream, "original (%d idle rate)", *(_DWORD *)(a1 + 148));
      }
      else {
        fwrite("lightweight", 0xBuLL, 1uLL, __stream);
      }
      fputc(10, __stream);
    }

    if (*(_DWORD *)(a1 + 168)) {
      fprintf(__stream, "\tlazy wait: %u: %llu ns\n", *(_DWORD *)(a1 + 168), *(void *)(a1 + 160));
    }
    if (*(_DWORD *)(a1 + 184)) {
      fprintf(__stream, "\tlazy CPU: %u: %llu ns\n", *(_DWORD *)(a1 + 184), *(void *)(a1 + 176));
    }
  }

  uint64_t v27 = state_name(*(_DWORD *)(a1 + 136));
  fprintf(__stream, "kpc: %s\n", v27);
  if (*(_DWORD *)(a1 + 216))
  {
    if (*(void *)(a1 + 224)) {
      fprintf(__stream, "\tclasses: %#llx\n", *(void *)(a1 + 224));
    }
    if (*(void *)(a1 + 232)) {
      fprintf(__stream, "\tthread classes: %#llx\n", *(void *)(a1 + 232));
    }
    fprintf(__stream, "\t%u counters\n", *(_DWORD *)(a1 + 244));
    unint64_t v28 = *(unsigned int *)(a1 + 244);
    if ((_DWORD)v28)
    {
      for (unint64_t i = 0LL; i < v28; ++i)
      {
        int v30 = *(_DWORD *)(*(void *)(a1 + 208) + 4 * i);
        if (v30)
        {
          fprintf(__stream, "\t\tCTR%u: %llu triggering %u\n", i, *(void *)(*(void *)(a1 + 200) + 8 * i), v30);
          unint64_t v28 = *(unsigned int *)(a1 + 244);
        }
      }
    }

    fprintf(__stream, "\t%u configurations\n", *(_DWORD *)(a1 + 240));
    if (*(_DWORD *)(a1 + 240))
    {
      unint64_t v31 = 0LL;
      do
      {
        fprintf(__stream, "\t\tCFG%u: %#llx\n", v31, *(void *)(*(void *)(a1 + 192) + 8 * v31));
        ++v31;
      }

      while (v31 < *(unsigned int *)(a1 + 240));
    }
  }

  return 0LL;
}

uint64_t ktrace_config_get_owner_name(uint64_t a1)
{
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  return *(void *)a1;
}

uint64_t ktrace_config_get_owner_kind(uint64_t a1)
{
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  return *(unsigned int *)(a1 + 252);
}

uint64_t ktrace_config_get_owner_pid(uint64_t a1)
{
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  return *(unsigned int *)(a1 + 248);
}

uint64_t ktrace_config_get_context_kind(uint64_t a1)
{
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  return *(unsigned int *)(a1 + 256);
}

uint64_t ktrace_config_set_context_kind(uint64_t result, unsigned int a2)
{
  if (!result) {
    ktrace_remotetime_update_params_cold_1();
  }
  if (a2 >= 5) {
    ktrace_remotetime_update_params_cold_1();
  }
  *(_DWORD *)(result + 256) = a2;
  return result;
}

uint64_t ktrace_config_get_reason(uint64_t a1)
{
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  return *(void *)(a1 + 8);
}

char *ktrace_config_set_reason(uint64_t a1, char *__s1)
{
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  int v4 = *(void **)(a1 + 8);
  if (v4) {
    free(v4);
  }
  if (__s1) {
    CFIndex result = strdup(__s1);
  }
  else {
    CFIndex result = 0LL;
  }
  *(void *)(a1 + _Block_object_dispose(va, 8) = result;
  return result;
}

uint64_t ktrace_config_get_command(uint64_t a1)
{
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  return *(void *)(a1 + 16);
}

char *ktrace_config_set_command(uint64_t a1, char *__s1)
{
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  int v4 = *(void **)(a1 + 16);
  if (v4) {
    free(v4);
  }
  if (__s1) {
    CFIndex result = strdup(__s1);
  }
  else {
    CFIndex result = 0LL;
  }
  *(void *)(a1 + 16) = result;
  return result;
}

uint64_t ktrace_config_get_trigger_kind(uint64_t a1)
{
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  return *(unsigned int *)(a1 + 260);
}

uint64_t ktrace_config_set_trigger_kind(uint64_t result, unsigned int a2)
{
  if (!result) {
    ktrace_remotetime_update_params_cold_1();
  }
  if (a2 >= 4) {
    ktrace_remotetime_update_params_cold_1();
  }
  *(_DWORD *)(result + 260) = a2;
  return result;
}

BOOL ktrace_config_kdebug_get_filtering_events(uint64_t a1)
{
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  return *(void *)(a1 + 24) != 0LL;
}

uint64_t ktrace_config_kdebug_get_typefilter(uint64_t a1)
{
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  *__error() = 0;
  return *(void *)(a1 + 24);
}

uint64_t ktrace_config_kdebug_get_debugid_enabled(uint64_t a1, unsigned int a2)
{
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  if (*(_DWORD *)(a1 + 68) != 3) {
    return 0LL;
  }
  uint64_t v2 = *(void *)(a1 + 24);
  if (v2) {
    return (*(unsigned __int8 *)(v2 + ((unint64_t)a2 >> 19)) >> (BYTE2(a2) & 7)) & 1;
  }
  else {
    return 1LL;
  }
}

uint64_t ktrace_config_kdebug_get_buffer_size(uint64_t a1)
{
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  return *(void *)(a1 + 56);
}

uint64_t ktrace_config_kdebug_get_procfilt_mode(uint64_t a1)
{
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  return *(unsigned int *)(a1 + 72);
}

uint64_t ktrace_config_kdebug_get_procfilt(uint64_t a1, void *a2)
{
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  if (!a2) {
    ktrace_remotetime_update_params_cold_1();
  }
  *a2 = *(unsigned int *)(a1 + 64);
  return *(void *)(a1 + 32);
}

uint64_t ktrace_config_kdebug_pid_included(uint64_t a1, int a2)
{
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  int v3 = *(_DWORD *)(a1 + 72);
  uint64_t result = 1LL;
  if (v3)
  {
    if (v3 != 1)
    {
      if (v3 != 2) {
        ktrace_config_kdebug_pid_included_cold_2();
      }
      LODWORD(result) = 0;
    }

    unint64_t v5 = *(unsigned int *)(a1 + 64);
    if ((_DWORD)v5)
    {
      unsigned int v6 = *(_DWORD **)(a1 + 32);
      if (*v6 == a2)
      {
        BOOL v7 = 0;
      }

      else
      {
        uint64_t v8 = 1LL;
        do
        {
          unint64_t v9 = v8;
          if (v5 == v8) {
            break;
          }
          int v10 = v6[v8++];
        }

        while (v10 != a2);
        BOOL v7 = v9 >= v5;
      }
    }

    else
    {
      BOOL v7 = 1;
    }

    return result ^ v7;
  }

  return result;
}

uint64_t ktrace_config_kdebug_get_wrapping(uint64_t a1)
{
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  return *(unsigned __int8 *)(a1 + 76);
}

uint64_t ktrace_config_kdebug_using_mach_continuous_time(uint64_t a1)
{
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  return *(unsigned __int8 *)(a1 + 77);
}

uint64_t ktrace_config_kdebug_get_coprocessor_tracing(uint64_t a1)
{
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  return *(unsigned __int8 *)(a1 + 78);
}

uint64_t ktrace_config_kdebug_get_disabling_event_matching(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  int v3 = *(void **)(a1 + 40);
  if (!v3) {
    return 0LL;
  }
  int v4 = *(void **)(a1 + 48);
  if (!v4) {
    return 0LL;
  }
  uint64_t v5 = v3[1];
  *(_DWORD *)a2 = *v3;
  *(void *)(a2 + _Block_object_dispose(va, 8) = v5;
  *(void *)(a2 + 16) = v3[2];
  *(void *)(a2 + 24) = v3[3];
  *(void *)(a2 + 32) = v3[4];
  uint64_t v6 = v4[1];
  *(_DWORD *)a3 = *v4;
  *(void *)(a3 + _Block_object_dispose(va, 8) = v6;
  *(void *)(a3 + 16) = v4[2];
  *(void *)(a3 + 24) = v4[3];
  *(void *)(a3 + 32) = v4[4];
  return 1LL;
}

uint64_t ktrace_config_kperf_get_action_count(uint64_t a1)
{
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  return *(unsigned int *)(a1 + 128);
}

uint64_t ktrace_config_kperf_get_action_samplers(uint64_t a1, unsigned int a2)
{
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  if (a2 && *(_DWORD *)(a1 + 128) >= a2) {
    return *(void *)(*(void *)(a1 + 80) + 8LL * (a2 - 1));
  }
  else {
    return 0LL;
  }
}

uint64_t ktrace_config_kperf_get_action_user_data(uint64_t a1, unsigned int a2)
{
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  if (a2 && *(_DWORD *)(a1 + 128) >= a2) {
    return *(void *)(*(void *)(a1 + 88) + 8LL * (a2 - 1));
  }
  else {
    return 0LL;
  }
}

uint64_t ktrace_config_kperf_get_action_pid_only(uint64_t a1, unsigned int a2)
{
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  if (a2 && *(_DWORD *)(a1 + 128) >= a2) {
    return *(unsigned int *)(*(void *)(a1 + 96) + 4LL * (a2 - 1));
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

uint64_t ktrace_config_kperf_get_timer_count(uint64_t a1)
{
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  return *(unsigned int *)(a1 + 132);
}

uint64_t ktrace_config_kperf_get_timer_action_id(uint64_t a1, unsigned int a2)
{
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  if (*(_DWORD *)(a1 + 132) <= a2) {
    return 0LL;
  }
  else {
    return *(unsigned int *)(*(void *)(a1 + 104) + 4LL * a2);
  }
}

uint64_t ktrace_config_kperf_get_timer_period_ns(uint64_t a1, unsigned int a2)
{
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  if (*(_DWORD *)(a1 + 132) <= a2) {
    return 0LL;
  }
  else {
    return *(void *)(*(void *)(a1 + 112) + 8LL * a2);
  }
}

uint64_t ktrace_config_kperf_get_pet_mode(uint64_t a1)
{
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  return *(unsigned int *)(a1 + 140);
}

uint64_t ktrace_config_kperf_get_pet_timer_id(uint64_t a1)
{
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  return *(unsigned int *)(a1 + 144);
}

uint64_t ktrace_config_kperf_get_pet_idle_rate(uint64_t a1)
{
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  return *(unsigned int *)(a1 + 148);
}

uint64_t ktrace_config_kperf_get_kdebug_action_id(uint64_t a1)
{
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  return *(unsigned int *)(a1 + 152);
}

uint64_t ktrace_config_kperf_get_kdebug_filter_desc(uint64_t a1)
{
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  return *(void *)(a1 + 120);
}

BOOL ktrace_config_kperf_get_lazy_wait_enabled(uint64_t a1)
{
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  return *(_DWORD *)(a1 + 168) != 0;
}

uint64_t ktrace_config_kperf_get_lazy_wait_time_threshold(uint64_t a1)
{
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  if (*(_DWORD *)(a1 + 168)) {
    return *(void *)(a1 + 160);
  }
  else {
    return 0LL;
  }
}

BOOL ktrace_config_kperf_get_lazy_cpu_enabled(uint64_t a1)
{
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  return *(_DWORD *)(a1 + 184) != 0;
}

uint64_t ktrace_config_kperf_get_lazy_cpu_time_threshold(uint64_t a1)
{
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  if (*(_DWORD *)(a1 + 184)) {
    return *(void *)(a1 + 176);
  }
  else {
    return 0LL;
  }
}

uint64_t ktrace_config_kpc_get_classes(uint64_t a1)
{
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  return *(void *)(a1 + 224);
}

uint64_t ktrace_config_kpc_get_thread_classes(uint64_t a1)
{
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  return *(void *)(a1 + 232);
}

uint64_t ktrace_config_kpc_get_config(uint64_t a1, void *a2)
{
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  if (!a2) {
    ktrace_remotetime_update_params_cold_1();
  }
  *a2 = *(unsigned int *)(a1 + 240);
  return *(void *)(a1 + 192);
}

uint64_t ktrace_config_kpc_get_action_id(uint64_t a1, unsigned int a2)
{
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  if (*(_DWORD *)(a1 + 216) == 3 && (uint64_t v2 = *(void *)(a1 + 208)) != 0 && *(_DWORD *)(a1 + 244) > a2) {
    return *(unsigned int *)(v2 + 4LL * a2);
  }
  else {
    return 0LL;
  }
}

uint64_t ktrace_config_kpc_get_period(uint64_t a1, unsigned int a2)
{
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  if (*(_DWORD *)(a1 + 216) == 3 && (uint64_t v2 = *(void *)(a1 + 200)) != 0 && *(_DWORD *)(a1 + 244) > a2) {
    return *(void *)(v2 + 8LL * a2);
  }
  else {
    return 0LL;
  }
}

  ;
}

uint64_t ktrace_file_append_local_log_content(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (void *)[MEMORY[0x189610828] localStore];
  if (v8) {
    return ktrace_file_append_log_content_from_store(a1, v8, a2, a3, 0LL, a4, 0LL);
  }
  int v10 = *__error();
  ktrace_log_init();
  if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
    ktrace_file_append_local_log_content_cold_1();
  }
  *__error() = v10;
  return 22LL;
}

uint64_t ktrace_file_append_log_content_from_store( uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v32 = 0LL;
  int v33 = &v32;
  uint64_t v34 = 0x2020000000LL;
  int v35 = 0;
  int v14 = (void *)MEMORY[0x186E45FA0]();
  uint64_t v26 = 0LL;
  uint64_t v27 = &v26;
  uint64_t v28 = 0x3052000000LL;
  uint64_t v29 = __Block_byref_object_copy_;
  int v30 = __Block_byref_object_dispose_;
  uint64_t v15 = MEMORY[0x1895F87A8];
  uint64_t v31 = 0LL;
  v25[0] = MEMORY[0x1895F87A8];
  v25[1] = 3221225472LL;
  v25[2] = __ktrace_file_append_log_content_from_store_block_invoke;
  v25[3] = &unk_189F54F80;
  v25[4] = &v26;
  [a2 prepareWithCompletionHandler:v25];
  uint64_t v16 = v27[5];
  if (v16)
  {
    unint64_t v17 = dispatch_semaphore_create(0LL);
    id v18 = objc_alloc(MEMORY[0x189610820]);
    uint64_t v19 = v27[5];
    v23[6] = a1;
    v24[0] = v15;
    v24[1] = 3221225472LL;
    v24[2] = __ktrace_file_append_log_content_from_store_block_invoke_2;
    v24[3] = &__block_descriptor_40_e16_v16__0__NSData_8l;
    v24[4] = a1;
    v23[0] = v15;
    v23[1] = 3221225472LL;
    v23[2] = __ktrace_file_append_log_content_from_store_block_invoke_4;
    void v23[3] = &unk_189F54FC8;
    v23[4] = v17;
    v23[5] = &v32;
    int v20 = (void *)[v18 initWithSource:v19 dataProcessingBlock:v24 completionBlock:v23];
    [v20 setFlags:a3];
    [v20 setArgumentRedactionBlock:a5];
    [v20 setFilterPredicate:a4];
    [v20 serializeFromDate:a6 toDate:a7];
    dispatch_semaphore_wait(v17, 0xFFFFFFFFFFFFFFFFLL);

    dispatch_release(v17);
  }

  _Block_object_dispose(&v26, 8);
  objc_autoreleasePoolPop(v14);
  if (v16) {
    uint64_t v21 = *((unsigned int *)v33 + 6);
  }
  else {
    uint64_t v21 = 22LL;
  }
  _Block_object_dispose(&v32, 8);
  return v21;
}

void sub_186BAF428(_Unwind_Exception *a1)
{
}

void __Block_byref_object_copy_(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_dispose_(uint64_t a1)
{
}

int *__ktrace_file_append_log_content_from_store_block_invoke(uint64_t a1, void *a2, void *a3)
{
  if (a3)
  {
    uint64_t v4 = [a3 localizedDescription];
    int v5 = *__error();
    ktrace_log_init();
    uint64_t v6 = (os_log_s *)ktrace_log;
    BOOL v7 = os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR);
    if (v4)
    {
      if (v7) {
        __ktrace_file_append_log_content_from_store_block_invoke_cold_2(a3, v5, v6);
      }
    }

    else if (v7)
    {
      __ktrace_file_append_log_content_from_store_block_invoke_cold_1();
    }

    uint64_t result = __error();
    int *result = v5;
  }

  else
  {
    uint64_t result = a2;
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 40LL) = result;
  }

  return result;
}

_DWORD *__ktrace_file_append_log_content_from_store_block_invoke_2(uint64_t a1, void *a2)
{
  uint64_t result = ktrace_file_append_chunk( *(void *)(a1 + 32),  32785,  *MEMORY[0x189610848],  0,  (UInt8 *)[a2 bytes],  objc_msgSend(a2, "length"));
  if (!result)
  {
    int v3 = *__error();
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
      __ktrace_file_append_log_content_from_store_block_invoke_2_cold_1();
    }
    uint64_t result = __error();
    _DWORD *result = v3;
  }

  return result;
}

uint64_t __ktrace_file_append_log_content_from_store_block_invoke_4(uint64_t a1, void *a2, uint64_t a3)
{
  switch(a3)
  {
    case 1LL:
      int v5 = *__error();
      ktrace_log_init();
      if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
        __ktrace_file_append_log_content_from_store_block_invoke_4_cold_2();
      }
      int v6 = 57;
      goto LABEL_26;
    case 2LL:
      int v5 = *__error();
      ktrace_log_init();
      if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
        __ktrace_file_append_log_content_from_store_block_invoke_4_cold_3();
      }
      int v6 = 55;
      goto LABEL_26;
    case 3LL:
      int v5 = *__error();
      ktrace_log_init();
      if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
        __ktrace_file_append_log_content_from_store_block_invoke_4_cold_4();
      }
      int v6 = 6;
      goto LABEL_26;
    case 4LL:
      int v5 = *__error();
      ktrace_log_init();
      if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
        __ktrace_file_append_log_content_from_store_block_invoke_4_cold_5();
      }
      int v6 = 89;
      goto LABEL_26;
    case 6LL:
      int v5 = *__error();
      ktrace_log_init();
      if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
        __ktrace_file_append_log_content_from_store_block_invoke_4_cold_6();
      }
      int v6 = 45;
      goto LABEL_26;
    case 7LL:
      int v5 = *__error();
      ktrace_log_init();
      if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
        __ktrace_file_append_log_content_from_store_block_invoke_4_cold_7();
      }
      int v6 = 1;
      goto LABEL_26;
    case 8LL:
      int v5 = *__error();
      ktrace_log_init();
      if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
        __ktrace_file_append_log_content_from_store_block_invoke_4_cold_8();
      }
      int v6 = 22;
      goto LABEL_26;
    case 9LL:
      int v5 = *__error();
      ktrace_log_init();
      if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
        __ktrace_file_append_log_content_from_store_block_invoke_4_cold_9();
      }
      int v6 = 70;
LABEL_26:
      *__error() = v5;
      *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = v6;
      break;
    default:
      break;
  }

  if (a2
    && !ktrace_file_append_chunk( *(void *)(a1 + 48),  32786,  *MEMORY[0x189610848],  0,  (UInt8 *)[a2 bytes],  objc_msgSend(a2, "length")))
  {
    int v7 = *__error();
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
      __ktrace_file_append_log_content_from_store_block_invoke_4_cold_1();
    }
    *__error() = v7;
  }

  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

BOOL ktrace_file_contains_log_content( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  uint64_t v15 = 0LL;
  uint64_t v16 = &v15;
  uint64_t v17 = 0x2020000000LL;
  char v18 = 0;
  uint64_t v11 = 0LL;
  uint64_t v12 = &v11;
  uint64_t v13 = 0x2020000000LL;
  char v14 = 0;
  v10[0] = MEMORY[0x1895F87A8];
  v10[1] = 3221225472LL;
  v10[2] = __ktrace_file_contains_log_content_block_invoke;
  v10[3] = &unk_189F54FF0;
  v10[4] = &v15;
  v10[5] = &v11;
  ktrace_file_iterate(a1, 0LL, (uint64_t)v10, a4, a5, a6, a7, a8);
  if (*((_BYTE *)v16 + 24)) {
    BOOL v8 = *((_BYTE *)v12 + 24) != 0;
  }
  else {
    BOOL v8 = 0LL;
  }
  _Block_object_dispose(&v11, 8);
  _Block_object_dispose(&v15, 8);
  return v8;
}

void sub_186BAFA00( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

BOOL __ktrace_file_contains_log_content_block_invoke(uint64_t a1, uint64_t a2)
{
  int v3 = ktrace_chunk_tag(a2);
  if (v3 == 32785)
  {
    uint64_t v4 = *(void *)(a1 + 40);
  }

  else
  {
    if (v3 != 32786) {
      return !*(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL)
    }
          || *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) == 0;
    uint64_t v4 = *(void *)(a1 + 32);
  }

  *(_BYTE *)(*(void *)(v4 + 8) + 24LL) = 1;
  return !*(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL)
      || *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) == 0;
}

void sub_186BAFD00( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void OUTLINED_FUNCTION_3_1(void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
}

  ;
}

unsigned int *ktrace_cpus_create(uint64_t *a1)
{
  if (ktrace_chunk_tag((uint64_t)a1) != 7168 || ktrace_chunk_version_major((uint64_t)a1) >= 2)
  {
    uint64_t v2 = 0LL;
    *__error() = 0;
    return v2;
  }

  size_t __count = 0LL;
  if ((unint64_t)ktrace_chunk_size((uint64_t)a1) <= 7)
  {
LABEL_6:
    uint64_t v2 = 0LL;
    *__error() = 79;
    return v2;
  }

  int v4 = ktrace_chunk_copy_data(a1, 0LL, &__count, 8uLL);
  if (v4)
  {
    uint64_t v2 = 0LL;
    *__error() = v4;
    return v2;
  }

  if ((_DWORD)__count != 1)
  {
    if ((_DWORD)__count == 1437204737) {
      return _create_from_legacy_cpu_map(a1, HIDWORD(__count));
    }
    goto LABEL_6;
  }

  int v5 = calloc(HIDWORD(__count), 0x28uLL);
  if (!v5) {
    ktrace_remotetime_update_params_cold_1();
  }
  int v6 = v5;
  int v7 = ktrace_chunk_copy_data(a1, 8LL, v5, 40LL * HIDWORD(__count));
  if (v7)
  {
    int v8 = v7;
    uint64_t v2 = 0LL;
  }

  else
  {
    uint64_t v2 = _create_from_cpu_map(HIDWORD(__count), (uint64_t)v6);
    int v8 = *__error();
  }

  free(v6);
  *__error() = v8;
  return v2;
}

unsigned int *_create_from_legacy_cpu_map(uint64_t *a1, unsigned int a2)
{
  uint64_t v25 = *MEMORY[0x1895F89C0];
  unint64_t v4 = ktrace_chunk_size_t(a1);
  uint64_t v5 = a2;
  if (v4 < ((16LL * a2) | 8uLL))
  {
    unint64_t v6 = v4;
    *__error() = 79;
    int v7 = *__error();
    ktrace_log_init();
    int v8 = (os_log_s *)ktrace_log;
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
    {
      int v17 = 134218752;
      unint64_t v18 = v6;
      __int16 v19 = 2048;
      uint64_t v20 = (16LL * a2) | 8;
      __int16 v21 = 1024;
      unsigned int v22 = a2;
      __int16 v23 = 1024;
      int v24 = v7;
      _os_log_error_impl( &dword_186BA3000,  v8,  OS_LOG_TYPE_ERROR,  "legacy CPU map chunk is too small %zu, expected %zu for %u CPUs (%{errno}d)",  (uint8_t *)&v17,  0x22u);
    }

    goto LABEL_8;
  }

  unint64_t v9 = (unsigned int *)malloc(33LL * a2 + 4);
  if (!v9) {
    ktrace_remotetime_update_params_cold_1();
  }
  int v10 = v9;
  uint64_t v11 = (char *)malloc(16LL * a2);
  if (!v11) {
    ktrace_remotetime_update_params_cold_1();
  }
  uint64_t v12 = v11;
  int v13 = ktrace_chunk_copy_data(a1, 8LL, v11, 16LL * a2);
  if (v13)
  {
    int v7 = v13;
    free(v10);
    free(v12);
LABEL_8:
    int v10 = 0LL;
    *__error() = v7;
    return v10;
  }

  *int v10 = a2;
  if (a2)
  {
    uint64_t v15 = v12 + 8;
    do
    {
      uint64_t v16 = (char *)v10 + 33 * *((unsigned int *)v15 - 2);
      __strlcpy_chk();
      v16[36] = *(v15 - 4) & 1;
      v15 += 16;
      --v5;
    }

    while (v5);
  }

  free(v12);
  return v10;
}

_DWORD *_create_from_cpu_map(unsigned int a1, uint64_t a2)
{
  LODWORD(v3) = a1;
  unint64_t v4 = malloc(33LL * a1 + 4);
  if (!v4) {
    ktrace_remotetime_update_params_cold_1();
  }
  uint64_t v5 = v4;
  _DWORD *v4 = v3;
  if ((_DWORD)v3)
  {
    uint64_t v3 = v3;
    uint64_t v6 = a2 + 8;
    do
    {
      int v7 = (char *)v5 + 33 * *(unsigned int *)(v6 - 8);
      __strlcpy_chk();
      v7[36] = *(_BYTE *)(v6 - 4) & 1;
      v6 += 40LL;
      --v3;
    }

    while (v3);
  }

  return v5;
}

_DWORD *ktrace_cpus_create_current()
{
  size_t v3 = 0LL;
  unint64_t v4 = 0LL;
  int v0 = kdebug_alloc_current_cpu_map(&v4, &v3);
  if (v0)
  {
    uint64_t v1 = 0LL;
    *__error() = v0;
  }

  else
  {
    uint64_t v1 = _create_from_cpu_map(*((_DWORD *)v4 + 1), (uint64_t)v4 + 8);
    free(v4);
  }

  return v1;
}

uint64_t ktrace_cpus_get_count(unsigned int *a1)
{
  return *a1;
}

uint64_t ktrace_cpus_get_cpu_name(uint64_t a1, unsigned int a2)
{
  return a1 + 33LL * a2 + 4;
}

uint64_t ktrace_cpus_get_cpu_is_coproc(uint64_t a1, unsigned int a2)
{
  return *(unsigned __int8 *)(a1 + 33LL * a2 + 36);
}

uint64_t ktrace_print_trace_point(FILE *a1, uint64_t a2, uint64_t *a3, uint64_t a4, char a5)
{
  uint64_t v48 = *MEMORY[0x1895F89C0];
  unint64_t v24 = 0LL;
  uint64_t v10 = *a3;
  unint64_t earliest_timestamp = ktrace_get_earliest_timestamp(a2);
  int v12 = ktrace_convert_timestamp_to_nanoseconds(a2, v10 - earliest_timestamp, &v24);
  if (v12)
  {
    *__error() = v12;
    return 0xFFFFFFFFLL;
  }

  bzero(v47, 0x400uLL);
  if ((a5 & 1) != 0)
  {
    memset(v31, 0, 56);
    if (!localtime_r(a3 + 7, (tm *)v31)) {
      return 0xFFFFFFFFLL;
    }
    if (!strftime((char *)v46, 0x400uLL, "%FT%T", (const tm *)v31)
      || !strftime((char *)v45, 0x400uLL, "%Z", (const tm *)v31))
    {
      *__error() = 22;
      return 0xFFFFFFFFLL;
    }

    snprintf(v47, 0x400uLL, "%s.%06u%s", (const char *)v46, *((_DWORD *)a3 + 16), (const char *)v45);
    char v14 = ", walltime: ";
  }

  else
  {
    char v14 = "";
  }

  __int128 v15 = 0uLL;
  memset(__str, 0, sizeof(__str));
  if ((a5 & 4) != 0 && *((_DWORD *)a3 + 22) != -1)
  {
    snprintf((char *)__str, 0x20uLL, "%d", *((_DWORD *)a3 + 22));
    __int128 v15 = 0uLL;
  }

  v45[14] = v15;
  v45[15] = v15;
  v45[12] = v15;
  v45[13] = v15;
  v45[10] = v15;
  v45[11] = v15;
  v45[8] = v15;
  v45[9] = v15;
  v45[6] = v15;
  v45[7] = v15;
  v45[4] = v15;
  v45[5] = v15;
  v45[2] = v15;
  v45[3] = v15;
  v45[0] = v15;
  v45[1] = v15;
  if ((a5 & 2) != 0)
  {
    name_for_thread = (char *)ktrace_get_name_for_thread(a2, (const void *)a3[5]);
    if (name_for_thread) {
      escape_string(a4, v45, 0x100uLL, name_for_thread);
    }
  }

  __int128 v17 = 0uLL;
  memset(v46, 0, 512);
  if ((a5 & 8) != 0)
  {
    escape_string(a4, v46, 0x200uLL, (char *)a3[9]);
    __int128 v17 = 0uLL;
    unint64_t v18 = ", eventname: ";
  }

  else
  {
    unint64_t v18 = "";
  }

  __int16 v23 = v18;
  __int128 v42 = v17;
  __int128 v43 = v17;
  __int128 v40 = v17;
  __int128 v41 = v17;
  __int128 v38 = v17;
  __int128 v39 = v17;
  __int128 v36 = v17;
  __int128 v37 = v17;
  __int128 v34 = v17;
  __int128 v35 = v17;
  __int128 v32 = v17;
  __int128 v33 = v17;
  *(_OWORD *)&v31[32] = v17;
  *(_OWORD *)&v31[48] = v17;
  *(_OWORD *)uint64_t v31 = v17;
  *(_OWORD *)&v31[16] = v17;
  if ((a5 & 0x10) != 0)
  {
    __int16 v19 = (char *)a3[10];
    if (v19) {
      escape_string(a4, v31, 0x100uLL, v19);
    }
  }

  if ((_DWORD)a4)
  {
    uint64_t v20 = "%llu";
    snprintf(v30, 0x20uLL, "%llu");
  }

  else
  {
    uint64_t v20 = "%llu";
    snprintf(v30, 0x20uLL, "%llu");
  }

  snprintf(v29, 0x20uLL, v20, a3[1]);
  snprintf(v28, 0x20uLL, v20, a3[2]);
  snprintf(v27, 0x20uLL, v20, a3[3]);
  snprintf(v26, 0x20uLL, v20, a3[4]);
  snprintf(v25, 0x20uLL, v20, a3[5]);
  if (a4 < 2) {
    return fprintf( a1,  "{ timestampns: %s%s%s%s%s, debugid: %u, args: [ %s, %s, %s, %s ], cpuid: %u, threadid: %s%s%s%s%s%s%s }",  v30,  v14,  v47,  v23,  v46,  *((unsigned int *)a3 + 12),  v29,  v28,  v27,  v26,  *((unsigned int *)a3 + 13),  v25);
  }
  if ((_DWORD)a4 != 2) {
    ktrace_print_trace_point_cold_1();
  }
  if ((a5 & 1) != 0) {
    __int16 v21 = ",";
  }
  else {
    __int16 v21 = "";
  }
  if ((a5 & 8) != 0) {
    unsigned int v22 = ",";
  }
  else {
    unsigned int v22 = "";
  }
  return fprintf( a1,  "%s%s%s%s%s,%u,%s,%s,%s,%s,%u,%s%s%s%s%s%s%s",  v30,  v21,  v47,  v22,  v46,  *((unsigned int *)a3 + 12),  v29,  v28,  v27,  v26,  *((unsigned int *)a3 + 13),  v25);
}

uint64_t escape_string(uint64_t result, _BYTE *a2, unint64_t a3, char *__s)
{
  *a2 = 34;
  if (!__s)
  {
LABEL_7:
    int v10 = 1;
    goto LABEL_20;
  }

  if ((_DWORD)result == 2)
  {
    unint64_t v7 = a3 - 2;
    int v8 = *__s;
    if (*__s) {
      BOOL v9 = v7 >= 2;
    }
    else {
      BOOL v9 = 0;
    }
    if (!v9) {
      goto LABEL_7;
    }
    int v13 = __s + 1;
    uint64_t v14 = 1LL;
    int v15 = 1;
    do
    {
      if (v8 == 34)
      {
        ++v15;
        a2[v14] = 34;
        LOBYTE(v_Block_object_dispose(va, 8) = *(v13 - 1);
      }

      int v10 = v15 + 1;
      a2[v15] = v8;
      int v16 = *v13++;
      int v8 = v16;
      uint64_t v14 = v15 + 1;
      if (v16) {
        BOOL v17 = v7 > v10;
      }
      else {
        BOOL v17 = 0;
      }
      ++v15;
    }

    while (v17);
  }

  else
  {
    size_t v11 = strlen(__s);
    if (v11 >= a3 >> 2) {
      size_t v12 = a3 >> 2;
    }
    else {
      size_t v12 = v11;
    }
    uint64_t result = strsnvisx(a2 + 1, a3 - 2, __s, v12, 34, "\\\b\f\n\r\t");
    int v10 = result + 1;
  }

  if (v10 <= 0) {
    escape_string_cold_1();
  }
LABEL_20:
  *(_WORD *)&a2[v10] = 34;
  return result;
}

uint64_t ktrace_print_csv_header(FILE *a1, uint64_t a2, char a3)
{
  size_t v3 = ",walltime";
  unint64_t v4 = "";
  if ((a3 & 1) == 0) {
    size_t v3 = "";
  }
  uint64_t v5 = ",eventname";
  if ((a3 & 8) == 0) {
    uint64_t v5 = "";
  }
  uint64_t v6 = ",threadname";
  if ((a3 & 2) == 0) {
    uint64_t v6 = "";
  }
  unint64_t v7 = ",pid";
  if ((a3 & 4) == 0) {
    unint64_t v7 = "";
  }
  if ((a3 & 0x10) != 0) {
    unint64_t v4 = ",execname";
  }
  return fprintf(a1, "timestampns%s%s,debugid,arg1,arg2,arg3,arg4,cpuid,threadid%s%s%s", v3, v5, v6, v7, v4);
}

void thread_cputime_map_update(uint64_t a1, uint64_t a2, int a3, uint64_t a4, int a5)
{
  unsigned int v10 = a3 & 0xFFFFFFFC;
  if ((int)(a3 & 0xFFFFFFFC) <= 20971555)
  {
    if (v10 == 20971520 || v10 == 20971528)
    {
      if (a5)
      {
        size_t v11 = *(const void **)(a4 + 16);
        size_t v12 = *(const void **)(a4 + 40);
        uint64_t v13 = *(void *)a4;
      }

      else
      {
        size_t v11 = (const void *)*(unsigned int *)(a4 + 12);
        size_t v12 = (const void *)*(unsigned int *)(a4 + 24);
        uint64_t v13 = *(void *)a4 & 0xFFFFFFFFFFFFFFLL;
      }

      state = thread_cputime_get_state((CFDictionaryRef *)a2, v12);
      uint64_t v16 = state[1];
      if (!v16)
      {
        if (*(_BYTE *)(a2 + 16))
        {
          uint64_t v16 = *(void *)(a1 + 488);
        }

        else
        {
          uint64_t v16 = v13;
        }
      }

      if (*state != -1LL) {
        void *state = *state + v13 - v16;
      }
      state[1] = 0LL;
      *((void *)thread_cputime_get_state((CFDictionaryRef *)a2, v11) + 1) = v13;
      return;
    }

LABEL_28:
    thread_cputime_map_update_cold_1();
  }

  if (v10 == 20971556)
  {
    if (a5) {
      BOOL v17 = *(const void **)(a4 + 40);
    }
    else {
      BOOL v17 = (const void *)*(unsigned int *)(a4 + 24);
    }
    __int16 v21 = thread_cputime_get_state((CFDictionaryRef *)a2, v17);
    if (*v21 != -1LL) {
      *__int16 v21 = -1LL;
    }
  }

  else
  {
    if (v10 != 117440524) {
      goto LABEL_28;
    }
    if (a5) {
      uint64_t v14 = *(const void **)(a4 + 8);
    }
    else {
      uint64_t v14 = (const void *)*(unsigned int *)(a4 + 8);
    }
    Value = (uint64_t *)CFDictionaryGetValue(*(CFDictionaryRef *)a2, v14);
    if (Value)
    {
      uint64_t v19 = *Value;
      uint64_t v20 = *(__CFDictionary **)a2;
      *(void *)(a2 + 8) += v19;
      CFDictionaryRemoveValue(v20, v14);
    }
  }

  uint64_t v14 = (void *)trace_buffer_cache[v13];
  trace_buffer_cache[v13] = 0LL;
  if (pthread_mutex_unlock(&trace_buffer_mutex)) {
    ktrace_remotetime_update_params_cold_1();
  }
  if (!v14) {
    ktrace_remotetime_update_params_cold_1();
  }
  *a1 = v14;
  return trace_readtrace(v14, a2);
}

  __break(1u);
  return result;
}

              uint64_t v26 = MEMORY[0x186E445C0]();
              type metadata accessor for KTraceRecordError();
              sub_186BF0CD4();
              swift_allocError();
              *(void *)uint64_t v27 = 0xD000000000000010LL;
              *(void *)(v27 + _Block_object_dispose(va, 8) = 0x8000000186C66140LL;
LABEL_30:
              *(_DWORD *)(v27 + 16) = v26;
              swift_storeEnumTagMultiPayload();
              swift_willThrow();
              return swift_bridgeObjectRelease();
            }

  swift_release();
  __int128 v39 = *(void *)(v227 + 264);
  if (v39)
  {
    __int128 v40 = *(void *)(v39 + 16);
    __int128 v41 = MEMORY[0x18961AFE8];
    if (v40)
    {
      *(void *)&v233 = MEMORY[0x18961AFE8];
      swift_bridgeObjectRetain();
      sub_186BEF8C8(0LL, v40, 0);
      __int128 v41 = v233;
      __int128 v42 = (uint64_t *)(v39 + 40);
      do
      {
        unsigned int v44 = *(v42 - 1);
        __int128 v43 = *v42;
        *(void *)&v233 = v41;
        char v46 = *(void *)(v41 + 16);
        unsigned int v45 = *(void *)(v41 + 24);
        swift_bridgeObjectRetain();
        if (v46 >= v45 >> 1)
        {
          sub_186BEF8C8((char *)(v45 > 1), v46 + 1, 1);
          __int128 v41 = v233;
        }

        v42 += 4;
        *(void *)(v41 + 16) = v46 + 1;
        uint64_t v47 = v41 + 16 * v46;
        *(void *)(v47 + 32) = v44;
        *(void *)(v47 + 40) = v43;
        --v40;
      }

      while (v40);
      swift_bridgeObjectRelease();
    }
  }

  else
  {
    __int128 v41 = MEMORY[0x18961AFE8];
  }

  uint64_t v48 = sub_186C222FC(v41);
  swift_bridgeObjectRelease();
  uint64_t v49 = v204;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v50 = swift_bridgeObjectRetain();
  uint64_t v51 = sub_186C149D0(v50, v219);
  if (*(void *)(v51 + 16) <= *(void *)(v204 + 16) >> 3)
  {
    *(void *)&v233 = v204;
    sub_186C1DD30(v51);
    uint64_t v49 = v204;
    swift_bridgeObjectRelease();
    uint64_t v52 = v233;
    if (!*(void *)(v233 + 16)) {
      goto LABEL_42;
    }
LABEL_38:
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    type metadata accessor for KTraceRecordError();
    sub_186BF0CD4();
    swift_allocError();
    uint64_t v54 = v53;
    *(void *)&v233 = v52;
    __swift_instantiateConcreteTypeFromMangledName(&qword_18C6A27B0);
    sub_186C253C0((unint64_t *)&qword_18C6A27B8, &qword_18C6A27B0, MEMORY[0x189618708]);
    sub_186BFB8D0();
    int v15 = (void *)sub_186C5AED0();
    int v56 = v55;
    swift_bridgeObjectRelease();
    *uint64_t v54 = v15;
    v54[1] = v56;
LABEL_39:
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
    return (uint64_t)v15;
  }

  uint64_t v52 = sub_186C1DEC4(v51, v204);
  swift_bridgeObjectRelease();
  if (*(void *)(v52 + 16)) {
    goto LABEL_38;
  }
LABEL_42:
  swift_bridgeObjectRelease();
  uint64_t v58 = MEMORY[0x18961AFE8];
  if (v39)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    int v59 = swift_bridgeObjectRetain();
    uint64_t v58 = sub_186C25068(v59, v213, v49);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }

  swift_bridgeObjectRetain();
  v60 = sub_186C149D0(v219, v48);
  v211 = v39;
  if (*(void *)(v60 + 16) <= *(void *)(v213 + 16) >> 3)
  {
    *(void *)&v233 = v213;
    sub_186C1DD30(v60);
    swift_bridgeObjectRelease();
    v61 = v233;
  }

  else
  {
    v61 = sub_186C1DEC4(v60, v213);
    swift_bridgeObjectRelease();
  }

  v62 = *(void *)(v61 + 16);
  if (v62)
  {
    v208 = v58;
    *(void *)&v233 = MEMORY[0x18961AFE8];
    v214 = v61;
    sub_186C18B84(0LL, v62, 0);
    v63 = v233;
    v64 = sub_186C20DF4(v61);
    v66 = v65;
    v68 = v67 & 1;
    v220 = v61 + 56;
    do
    {
      if (v64 < 0 || v64 >= 1LL << *(_BYTE *)(v61 + 32)) {
        goto LABEL_230;
      }
      if (*(_DWORD *)(v61 + 36) != v66) {
        goto LABEL_232;
      }
      v230 = v68;
      v69 = (uint64_t *)(*(void *)(v61 + 48) + 16 * v64);
      v70 = v69[1];
      v225 = *v69;
      swift_bridgeObjectRetain();
      v71 = sub_186C10AC0(MEMORY[0x18961AFE8]);
      *(void *)&v233 = v63;
      v73 = *(void *)(v63 + 16);
      v72 = *(void *)(v63 + 24);
      if (v73 >= v72 >> 1)
      {
        sub_186C18B84((char *)(v72 > 1), v73 + 1, 1);
        v61 = v214;
        v63 = v233;
      }

      *(void *)(v63 + 16) = v73 + 1;
      v74 = v63 + 32 * v73;
      *(void *)(v74 + 32) = v225;
      *(void *)(v74 + 40) = v70;
      *(void *)(v74 + 4_Block_object_dispose(va, 8) = v71;
      *(_BYTE *)(v74 + 56) = 0;
      v75 = sub_186C20E94(v64, v66, v230 & 1, v61);
      v64 = v75;
      v66 = v76;
      v68 = v77 & 1;
      --v62;
    }

    while (v62);
    sub_186C253B4(v75, v76, v68);
    swift_bridgeObjectRelease();
    uint64_t v58 = v208;
  }

  else
  {
    swift_bridgeObjectRelease();
    v63 = MEMORY[0x18961AFE8];
  }

  v78 = MEMORY[0x18961AFE8];
  if (v211) {
    v78 = v211;
  }
  v209 = v78;
  *(void *)&v233 = v58;
  swift_bridgeObjectRetain();
  sub_186C11898(v63);
  v79 = v233;
  v193 = *(void *)(v233 + 16);
  if (v193)
  {
    v80 = 0LL;
    v194 = v233 + 32;
    v192 = v233;
    while (1)
    {
      if (v80 >= *(void *)(v79 + 16)) {
        goto LABEL_241;
      }
      v82 = (uint64_t *)(v194 + 32 * v80);
      v84 = *v82;
      v83 = v82[1];
      int v15 = (void *)v82[2];
      swift_bridgeObjectRetain();
      v200 = v15;
      swift_bridgeObjectRetain();
      v202 = v84;
      v212 = v83;
      v85 = sub_186C24234(v84, v83, a3 & 1, a4);
      v226 = v88;
      if (v228)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        swift_bridgeObjectRelease();
LABEL_214:
        swift_bridgeObjectRelease();
        return (uint64_t)v15;
      }

      if (!v86)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        type metadata accessor for KTraceRecordError();
        sub_186BF0CD4();
        swift_allocError();
        *v184 = v84;
        v184[1] = v83;
        swift_storeEnumTagMultiPayload();
        swift_willThrow();
        goto LABEL_214;
      }

      v89 = v87;
      v196 = v85;
      v228 = 0LL;
      v90 = v86;
      v91 = *(char **)(v227 + 312);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v205 = v80;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        v91 = sub_186C01C3C(0LL, *((void *)v91 + 2) + 1LL, 1, v91);
      }
      v93 = *((void *)v91 + 2);
      v92 = *((void *)v91 + 3);
      if (v93 >= v92 >> 1) {
        v91 = sub_186C01C3C((char *)(v92 > 1), v93 + 1, 1, v91);
      }
      v206 = v205 + 1;
      v195 = v89 & 1;
      *((void *)v91 + 2) = v93 + 1;
      v94 = &v91[16 * v93];
      int v15 = v200;
      *((void *)v94 + 4) = v202;
      *((void *)v94 + 5) = v212;
      *(void *)(v227 + 312) = v91;
      swift_bridgeObjectRetain();
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *(void *)&v233 = v200;
      v215 = v226 + 64;
      v96 = 1LL << *(_BYTE *)(v226 + 32);
      v97 = v96 < 64 ? ~(-1LL << v96) : -1LL;
      v98 = v97 & *(void *)(v226 + 64);
      v221 = (unint64_t)(v96 + 63) >> 6;
      swift_bridgeObjectRetain();
      for (uint64_t j = 0LL; ; uint64_t j = v231)
      {
        if (v98)
        {
          v101 = __clz(__rbit64(v98));
          v98 &= v98 - 1;
          v231 = j;
          v102 = v101 | (j << 6);
          goto LABEL_95;
        }

        v103 = j + 1;
        if (__OFADD__(j, 1LL))
        {
          __break(1u);
          goto LABEL_227;
        }

        if (v103 >= v221) {
          goto LABEL_106;
        }
        v104 = *(void *)(v215 + 8 * v103);
        v105 = j + 1;
        if (!v104)
        {
          v105 = j + 2;
          if (j + 2 >= v221) {
            goto LABEL_106;
          }
          v104 = *(void *)(v215 + 8 * v105);
          if (!v104)
          {
            v105 = j + 3;
            if (j + 3 >= v221) {
              goto LABEL_106;
            }
            v104 = *(void *)(v215 + 8 * v105);
            if (!v104)
            {
              v105 = j + 4;
              if (j + 4 >= v221) {
                goto LABEL_106;
              }
              v104 = *(void *)(v215 + 8 * v105);
              if (!v104) {
                break;
              }
            }
          }
        }

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

const void *thread_cputime_get_state(CFDictionaryRef *a1, const void *a2)
{
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  Value = CFDictionaryGetValue(*a1, a2);
  if (!Value)
  {
    uint64_t v5 = calloc(1uLL, 0x10uLL);
    if (!v5) {
      ktrace_remotetime_update_params_cold_1();
    }
    Value = v5;
    CFDictionarySetValue(*a1, a2, v5);
  }

  return Value;
}

void thread_cputime_map_destroy(const void **a1)
{
  if (a1)
  {
    uint64_t v2 = *a1;
    if (v2) {
      CFRelease(v2);
    }
    free(a1);
  }

void thread_cputime_map_dropped_events(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(a2 + 16) = 1;
  if (!*(void *)a2) {
    ktrace_remotetime_update_params_cold_1();
  }
  CFDictionaryApplyFunction(*(CFDictionaryRef *)a2, (CFDictionaryApplierFunction)apply_clear_oncore, 0LL);
}

void apply_clear_oncore(uint64_t a1, void *a2)
{
  if (a2[1])
  {
    if (*a2 != -1LL) {
      a2[1] = 0LL;
    }
  }

CFMutableDictionaryRef ktrace_set_thread_cputime_enabled(CFMutableDictionaryRef result, int a2)
{
  if (!result) {
    ktrace_remotetime_update_params_cold_1();
  }
  CFMutableDictionaryRef v2 = result;
  if ((*((_WORD *)result + 112) & 3) != 0) {
    ktrace_set_thread_cputime_enabled_cold_4();
  }
  if (a2 && !*((_DWORD *)result + 68))
  {
    *((_DWORD *)result + 6_Block_object_dispose(va, 8) = 1;
    *(_OWORD *)&v5.version = xmmword_189F55060;
    *(_OWORD *)&v5.release = *(_OWORD *)&off_189F55070;
    v5.equal = (CFDictionaryEqualCallBack)ptr_equal_callback;
    size_t v3 = (CFMutableDictionaryRef *)calloc(1uLL, 0x18uLL);
    *((void *)v2 + 51) = v3;
    if (!v3) {
      ktrace_remotetime_update_params_cold_1();
    }
    unint64_t v4 = v3;
    uint64_t result = CFDictionaryCreateMutable(0LL, 0LL, &long_key_callbacks, &v5);
    CFMutableDictionaryRef *v4 = result;
    if (!result) {
      ktrace_remotetime_update_params_cold_1();
    }
  }

  return result;
}

uint64_t ktrace_get_thread_cputime_enabled(uint64_t a1)
{
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  return *(unsigned int *)(a1 + 272);
}

void *ktrace_get_cputime_for_thread(uint64_t a1, const void *a2)
{
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  if (!*(_DWORD *)(a1 + 272)) {
    return 0LL;
  }
  uint64_t result = CFDictionaryGetValue(**(CFDictionaryRef **)(a1 + 408), a2);
  if (result)
  {
    unint64_t v4 = result;
    uint64_t result = (void *)*result;
    uint64_t v5 = v4[1];
    if (v5) {
      return (void *)((char *)result + *(void *)(a1 + 496) - v5);
    }
  }

  return result;
}

uint64_t ktrace_get_cputime_total(uint64_t a1)
{
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  if (!*(_DWORD *)(a1 + 272)) {
    return 0LL;
  }
  uint64_t v1 = *(void *)(a1 + 408);
  CFMutableDictionaryRef v2 = *(const __CFDictionary **)v1;
  if (!*(void *)v1) {
    ktrace_remotetime_update_params_cold_1();
  }
  uint64_t v3 = *(void *)(v1 + 8);
  uint64_t v5 = a1;
  uint64_t v6 = v3;
  CFDictionaryApplyFunction(v2, (CFDictionaryApplierFunction)apply_sum_time, &v5);
  return v6;
}

void apply_sum_time(uint64_t a1, void *a2, void *a3)
{
  if (!a3) {
    ktrace_remotetime_update_params_cold_1();
  }
  if (*a2 != -1LL)
  {
    uint64_t v3 = a3[1] + *a2;
    a3[1] = v3;
    uint64_t v4 = a2[1];
    if (v4) {
      a3[1] = v3 - v4 + *(void *)(*a3 + 496LL);
    }
  }

uint64_t clear_events(uint64_t result, void *a2)
{
  for (uint64_t i = 0LL; i != 1024; ++i)
  {
    uint64_t v3 = *(void *)(result + 8 * i);
    if (v3)
    {
      uint64_t v4 = *(void *)(v3 + 56);
      for (j = *(void *)(result + 8 * i); v4; uint64_t v4 = *(void *)(v4 + 56))
        uint64_t j = v4;
      *(void *)(j + 56) = *a2;
      *a2 = v3;
      *(void *)(result + 8 * i) = 0LL;
    }
  }

  return result;
}

__n128 insert_start_event(uint64_t a1, void **a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 40);
  uint64_t v6 = v5 & 0x3FF;
  unint64_t v7 = *(void **)(a1 + 8 * v6);
  if (!v7) {
    goto LABEL_9;
  }
  if (*((void *)v7 + 5) == v5 && *((_DWORD *)v7 + 12) == *(_DWORD *)(a3 + 48))
  {
    *(void *)(a1 + 8 * v6) = *((void *)v7 + 7);
    goto LABEL_13;
  }

  uint64_t v8 = *((void *)v7 + 7);
  if (!v8)
  {
LABEL_9:
    unint64_t v7 = *a2;
    if (*a2) {
      *a2 = (void *)*((void *)v7 + 7);
    }
    else {
      unint64_t v7 = malloc(0x40uLL);
    }
    goto LABEL_13;
  }

  while (*(void *)(v8 + 40) != v5 || *(_DWORD *)(v8 + 48) != *(_DWORD *)(a3 + 48))
  {
    uint64_t v8 = *(void *)(v8 + 56);
    if (!v8) {
      goto LABEL_9;
    }
  }

  BOOL v9 = *(void **)(v8 + 56);
  *((void *)v7 + 7) = v9;
  BOOL v10 = v7 == v9;
  unint64_t v7 = (void *)v8;
  if (v10) {
    ktrace_remotetime_update_params_cold_1();
  }
LABEL_13:
  __n128 result = *(__n128 *)a3;
  __int128 v12 = *(_OWORD *)(a3 + 16);
  __int128 v13 = *(_OWORD *)(a3 + 48);
  *((_OWORD *)v7 + 2) = *(_OWORD *)(a3 + 32);
  *((_OWORD *)v7 + 3) = v13;
  *(__n128 *)unint64_t v7 = result;
  *((_OWORD *)v7 + 1) = v12;
  *((_DWORD *)v7 + 12) &= 0xFFFFFFFC;
  uint64_t v14 = *(void **)(a1 + 8 * v6);
  *((void *)v7 + 7) = v14;
  *(void *)(a1 + 8 * v6) = v7;
  if (v7 == v14) {
    ktrace_remotetime_update_params_cold_1();
  }
  return result;
}

uint64_t match_end_event(uint64_t a1, __int128 **a2, uint64_t a3, _OWORD *a4)
{
  uint64_t v4 = *(void *)(a3 + 40);
  uint64_t v5 = *(__int128 **)(a1 + 8 * (v4 & 0x3FF));
  if (!v5) {
    return 0LL;
  }
  unsigned int v6 = *(_DWORD *)(a3 + 48) & 0xFFFFFFFC;
  if (*((void *)v5 + 5) != v4 || *((_DWORD *)v5 + 12) != v6)
  {
    unint64_t v7 = (__int128 *)*((void *)v5 + 7);
    if (v7)
    {
      while (*((void *)v7 + 5) != v4 || *((_DWORD *)v7 + 12) != v6)
      {
        unint64_t v7 = (__int128 *)*((void *)v7 + 7);
        if (!v7) {
          return 0LL;
        }
      }

      BOOL v9 = (__int128 *)*((void *)v7 + 7);
      *((void *)v5 + 7) = v9;
      BOOL v10 = v5 == v9;
      uint64_t v5 = v7;
      if (v10) {
        ktrace_remotetime_update_params_cold_1();
      }
      goto LABEL_11;
    }

    return 0LL;
  }

  *(void *)(a1 + 8 * (v4 & 0x3FF)) = *((void *)v5 + 7);
LABEL_11:
  __int128 v11 = *v5;
  __int128 v12 = v5[1];
  __int128 v13 = v5[3];
  a4[2] = v5[2];
  a4[3] = v13;
  *a4 = v11;
  a4[1] = v12;
  *((void *)v5 + 7) = *a2;
  *a2 = v5;
  return 1LL;
}

void *ktrace_file_create(uint64_t a1, char *a2)
{
  if (a1 && *(_DWORD *)(a1 + 16) == 4) {
    ktrace_remotetime_update_params_cold_1();
  }
  if (!a2) {
    ktrace_remotetime_update_params_cold_1();
  }
  int v3 = open(a2, 1538, 438LL);
  if (v3 == -1) {
    return 0LL;
  }
  else {
    return ktrace_file_create_fd(a1, v3);
  }
}

void *ktrace_file_create_fd(uint64_t a1, int a2)
{
  if (a2 < 0) {
    ktrace_remotetime_update_params_cold_1();
  }
  uint64_t v4 = ktrace_file_alloc_fd(a2, 1);
  if (!v4)
  {
    int v7 = *__error();
    close(a2);
    goto LABEL_6;
  }

  uint64_t v5 = (void *)v4;
  int internal = ktrace_file_create_internal(v4, a1);
  if (internal)
  {
    int v7 = internal;
    ktrace_file_close(v5);
LABEL_6:
    uint64_t v5 = 0LL;
    *__error() = v7;
  }

  return v5;
}

void *ktrace_file_create_memory(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!a2) {
    ktrace_remotetime_update_params_cold_1();
  }
  if (!a3) {
    ktrace_remotetime_update_params_cold_1();
  }
  uint64_t v4 = ktrace_file_alloc_memory(0LL, 0LL, a2, a3);
  uint64_t v5 = v4;
  if (v4 && ktrace_file_create_internal((uint64_t)v4, a1))
  {
    ktrace_file_close(v5);
    return 0LL;
  }

  return v5;
}

void *ktrace_file_alloc_memory(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  double v9 = ktrace_file_alloc();
  BOOL v10 = (void *)v8;
  if (v8)
  {
    *(_DWORD *)(v8 + 16) = 2;
    *(_DWORD *)(v8 + 196) = -1;
    *(void *)(v8 + 256) = a3;
    *(void *)(v8 + 264) = a4;
    if (a1)
    {
      *(void *)(v8 + 280) = a2;
      *(void *)(v8 + 240) = a1;
      *(void *)(v8 + 24_Block_object_dispose(va, 8) = a2;
      if (a3)
      {
        *(_BYTE *)(v8 + 296) = 1;
      }

      else if (!a2)
      {
        ktrace_remotetime_update_params_cold_1();
      }
    }

    else
    {
      if (!a3) {
        ktrace_remotetime_update_params_cold_1();
      }
      *(_BYTE *)(v8 + 296) = 1;
      uint64_t v11 = (*(uint64_t (**)(uint64_t, void, void, uint64_t, double))(a3 + 16))(a3, 0LL, 0LL, 0x2000LL, v9);
      v10[30] = v11;
      if (v11)
      {
        v10[31] = 0x2000LL;
      }

      else
      {
        *__error() = 12;
        ktrace_file_close(v10);
        return 0LL;
      }
    }
  }

  return v10;
}

uint64_t ktrace_file_create_internal(uint64_t a1, uint64_t a2)
{
  uint64_t v26 = *MEMORY[0x1895F89C0];
  if (!a2)
  {
    uint64_t v10 = ktrace_file_write_header_system_default(a1);
    if ((_DWORD)v10) {
      return v10;
    }
    goto LABEL_10;
  }

  *(void *)uuid_t out = 0x155AA0300LL;
  *(void *)&out[8] = 40LL;
  uint64_t v21 = *(void *)(a2 + 188);
  __int128 v22 = *(_OWORD *)(a2 + 160);
  uint64_t v23 = *(void *)(a2 + 176);
  int v24 = *(_DWORD *)(a2 + 184);
  BOOL v25 = *(_BYTE *)(a2 + 298) != 0;
  ktrace_file_write_header_internal(a1, (uint64_t)out);
  uint64_t v10 = v9;
  if (!(_DWORD)v9)
  {
    *(_DWORD *)(a1 + 20) = 4;
    uint64_t v16 = 0LL;
    BOOL v17 = &v16;
    uint64_t v18 = 0x2000000000LL;
    int v19 = 0;
    v15[0] = MEMORY[0x1895F87A8];
    v15[1] = 0x40000000LL;
    v15[2] = __ktrace_file_write_header_template_block_invoke;
    v15[3] = &unk_189F55330;
    v15[4] = &v16;
    v15[5] = a1;
    unsigned int v11 = ktrace_file_header_iterate(a2, 0LL, (uint64_t)v15, v4, v5, v6, v7, v8);
    unsigned int v12 = *((_DWORD *)v17 + 6);
    if (v12) {
      uint64_t v10 = v12;
    }
    else {
      uint64_t v10 = v11;
    }
    _Block_object_dispose(&v16, 8);
  }

  if (!(_DWORD)v10)
  {
LABEL_10:
    uuid_generate_random(out);
    if (ktrace_file_header_append_chunk(a1, 35841, 0, 0, out, 16LL) || (uint64_t v10 = *__error(), !(_DWORD)v10))
    {
      uint64_t v10 = 0LL;
      uint64_t v13 = *(void *)(a1 + 288);
      *(void *)(a1 + 56) = 16LL;
      *(void *)(a1 + 64) = v13;
      *(void *)(a1 + 72) = v13;
    }
  }

  return v10;
}

void ktrace_file_close(void *cf)
{
  if (!cf) {
    ktrace_remotetime_update_params_cold_1();
  }
  if (cf[25]) {
    ktrace_remotetime_update_params_cold_1();
  }
  if (CFGetRetainCount(cf) != 1) {
    ktrace_remotetime_update_params_cold_1();
  }
  CFRelease(cf);
}

uint64_t ktrace_file_alloc_fd(int a1, char a2)
{
  uint64_t v9 = *MEMORY[0x1895F89C0];
  if (a1 == -1) {
    ktrace_remotetime_update_params_cold_1();
  }
  if (fstat(a1, &v7) < 0) {
    return 0LL;
  }
  if ((v7.st_mode & 0xF000) == 0x4000)
  {
    uint64_t v4 = 0LL;
    *__error() = 21;
  }

  else
  {
    ktrace_file_alloc();
    uint64_t v4 = v5;
    if (v5)
    {
      bzero(&v8, 0x878uLL);
      if (!fstatfs(a1, &v8) && (v8.f_flags & 0x1000) != 0) {
        *(_BYTE *)(v4 + 301) = 1;
      }
      *(_DWORD *)(v4 + 16) = 1;
      *(_DWORD *)(v4 + 196) = a1;
      *(_BYTE *)(v4 + 296) = a2;
    }
  }

  return v4;
}

uint64_t ktrace_file_create_chunk_sink(const void *a1)
{
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  ktrace_file_alloc();
  uint64_t v3 = v2;
  if (v2)
  {
    *(_DWORD *)(v2 + 196) = -1;
    *(_DWORD *)(v2 + 16) = 4;
    *(void *)(v2 + 272) = _Block_copy(a1);
    *(_BYTE *)(v3 + 299) = 1;
    *(_BYTE *)(v3 + 296) = 1;
  }

  return v3;
}

uint64_t ktrace_file_open(const char *a1, int a2)
{
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  if (a2) {
    int v3 = open(a1, 2);
  }
  else {
    int v3 = open(a1, 0);
  }
  if (v3 == -1) {
    return 0LL;
  }
  else {
    return ktrace_file_open_fd(v3, a2);
  }
}

uint64_t ktrace_file_open_fd(int a1, int a2)
{
  if (a1 == -1) {
    ktrace_remotetime_update_params_cold_1();
  }
  uint64_t v4 = ktrace_file_alloc_fd(a1, a2);
  uint64_t v5 = v4;
  if (v4)
  {
    off_t v6 = fd_size(*(_DWORD *)(v4 + 196));
    *(void *)(v5 + 280) = v6;
    if (v6 < 0)
    {
      close(a1);
      *(_DWORD *)(v5 + 196) = -1;
      ktrace_file_close((void *)v5);
      uint64_t v5 = 0LL;
      *__error() = 79;
    }

    else
    {
      int v7 = ktrace_file_open_internal(v5, a2);
      if (v7)
      {
        int v8 = v7;
        ktrace_file_close((void *)v5);
        uint64_t v5 = 0LL;
        *__error() = v8;
      }
    }
  }

  else
  {
    close(a1);
  }

  return v5;
}

off_t fd_size(int a1)
{
  if (a1 == -1) {
    ktrace_remotetime_update_params_cold_1();
  }
  if (!fstat(a1, &v3)) {
    return v3.st_size;
  }
  int v1 = *__error();
  ktrace_log_init();
  if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR)) {
    fd_size_cold_2();
  }
  *__error() = v1;
  return -1LL;
}

uint64_t ktrace_file_open_internal(uint64_t a1, int a2)
{
  int v37 = 0;
  if (ktrace_file_read(a1, &v37, 4uLL, 0LL) <= 3)
  {
    int v9 = *__error();
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR)) {
      ktrace_file_open_internal_cold_1();
    }
LABEL_4:
    *__error() = v9;
LABEL_5:
    unsigned int v10 = *__error();
    goto LABEL_67;
  }

  if (v37 <= 1437204736)
  {
    if (v37 != 4096)
    {
      if (v37 == 1095914544)
      {
        *(_DWORD *)(a1 + 20) = 5;
        uint64_t v38 = 0LL;
        __int128 v39 = &v38;
        uint64_t v40 = 0x2000000000LL;
        int v41 = 0;
        *(_BYTE *)(a1 + 296) = 0;
        if (*(uint64_t *)(a1 + 280) <= 4096)
        {
LABEL_23:
          uint64_t v42 = MEMORY[0x1895F87A8];
          uint64_t v43 = 0x40000000LL;
          unsigned int v44 = __parse_artrace_file_block_invoke;
          unint64_t v45 = (unint64_t)&unk_189F55358;
          char v46 = &v38;
          uint64_t v47 = a1;
          else {
            unsigned int v10 = *((_DWORD *)v39 + 6) != 0;
          }
        }

        else
        {
          int64_t v15 = 4096LL;
          while (ktrace_file_read(a1, &v42, 8uLL, v15) == 8)
          {
            uint64_t v16 = v15 + 8;
            uint64_t v17 = HIDWORD(v42);
            uint64_t v18 = ktrace_chunk_create(a1, (int)v42 + 20480, 0, 0, HIDWORD(v42), v16);
            if (!v18)
            {
              int v34 = *__error();
              ktrace_log_init();
              if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR)) {
                ktrace_file_open_internal_cold_3();
              }
              *__error() = v34;
              int v33 = *__error();
              goto LABEL_65;
            }

            int v19 = v18;
            int appended = ktrace_chunk_array_append_internal(a1 + 24, v18);
            if (appended)
            {
              int v35 = appended;
              free(v19);
              *__error() = v35;
              int v33 = *__error();
              ktrace_log_init();
              if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR)) {
                ktrace_file_open_internal_cold_4();
              }
              goto LABEL_65;
            }

            *(void *)(a1 + 72) = *(void *)(a1 + 64);
            *(void *)(a1 + 32) = v19;
            int64_t v15 = v16 + v17;
            if (v15 >= *(void *)(a1 + 280)) {
              goto LABEL_23;
            }
          }

          int v32 = *__error();
          ktrace_log_init();
          if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR)) {
            ktrace_file_open_internal_cold_5();
          }
          *__error() = v32;
          __error();
          int v33 = 0;
LABEL_65:
          *__error() = v33;
          unsigned int v10 = *__error();
        }

        _Block_object_dispose(&v38, 8);
        goto LABEL_67;
      }

      if (v37 == 1437204736)
      {
        int v11 = 1;
LABEL_26:
        *(_DWORD *)(a1 + 20) = v11;
        unsigned int v14 = parse_v1_file(a1);
        goto LABEL_27;
      }

      goto LABEL_38;
    }

    *(_DWORD *)(a1 + 20) = 4;
    uint64_t v12 = a1;
    int v13 = 1;
LABEL_16:
    unsigned int v14 = parse_v3_header(v12, v13);
LABEL_27:
    unsigned int v10 = v14;
    goto LABEL_67;
  }

  switch(v37)
  {
    case 1437204737:
      int v11 = 2;
      goto LABEL_26;
    case 1437204992:
      *(_DWORD *)(a1 + 20) = 3;
      ktrace_log_init();
      if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_DEBUG)) {
        ktrace_file_open_internal_cold_8();
      }
      *(_BYTE *)(a1 + 296) = 0;
      if (ktrace_file_read(a1, &v42, 0x120uLL, 0LL) != 288)
      {
        int v9 = *__error();
        ktrace_log_init();
        if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR)) {
          ktrace_file_open_internal_cold_7();
        }
        goto LABEL_4;
      }

      *(void *)(a1 + 16_Block_object_dispose(va, 8) = v43;
      *(_DWORD *)(a1 + 176) = (_DWORD)v44;
      unint64_t v21 = 1000000000LL;
      if (v45)
      {
        unint64_t v22 = 1000000000LL;
        unint64_t v23 = v45;
        do
        {
          unint64_t v21 = v23;
          unint64_t v23 = v22 % v23;
          unint64_t v22 = v21;
        }

        while (v23);
      }

      unint64_t v24 = v45 / v21;
      *(_DWORD *)(a1 + 18_Block_object_dispose(va, 8) = 0x3B9ACA00 / v21;
      *(_DWORD *)(a1 + 192) = v24;
      if ((BYTE4(v44) & 1) != 0)
      {
        *(_BYTE *)(a1 + 29_Block_object_dispose(va, 8) = 1;
        int v25 = 32;
      }

      else
      {
        int v25 = 32;
        if (!*(_BYTE *)(a1 + 298)) {
          int v25 = 28;
        }
      }

      unint64_t v28 = (-(v25 * HIDWORD(v42)) & 0xFFCLL) + v25 * (uint64_t)SHIDWORD(v42);
      if (*(void *)(a1 + 280) >= v28)
      {
        int v30 = ktrace_chunk_create(a1, 7424, 1, 0, v28 - 288, 288LL);
        if (!v30) {
          goto LABEL_5;
        }
        uint64_t v31 = v30;
        unsigned int v10 = ktrace_chunk_array_append_internal(a1 + 24, v30);
        if (v10)
        {
          free(v31);
        }

        else
        {
          *(void *)(a1 + 72) = *(void *)(a1 + 64);
          *(void *)(a1 + 32) = v31;
        }

        goto LABEL_67;
      }

      int v29 = *__error();
      ktrace_log_init();
      if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR)) {
        ktrace_file_open_internal_cold_6();
      }
      *__error() = v29;
LABEL_52:
      unsigned int v10 = 22;
      goto LABEL_67;
    case 1437205248:
      *(_DWORD *)(a1 + 20) = 4;
      uint64_t v12 = a1;
      int v13 = 0;
      goto LABEL_16;
  }

LABEL_38:
  *(_DWORD *)(a1 + 20) = 0;
  LODWORD(v42) = 0;
  *(_BYTE *)(a1 + 296) = 0;
  if ((unint64_t)ktrace_file_read(a1, &v42, 4uLL, 0LL) <= 3)
  {
    int v9 = *__error();
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR)) {
      ktrace_file_open_internal_cold_2();
    }
    goto LABEL_4;
  }

  if ((_DWORD)v42)
  {
    uint64_t v26 = synthesize_thread_map_chunk(a1, 4uLL, v42);
    if (!v26) {
      goto LABEL_5;
    }
    unint64_t v27 = v26[1] + v26[2];
  }

  else
  {
    unint64_t v27 = 4LL;
  }

  if (!synthesize_events_chunk(a1, v27)) {
    goto LABEL_5;
  }
  unsigned int v10 = 0;
LABEL_67:
  else {
    return 79LL;
  }
}

    if (a3)
    {
      uint64_t v8 = *(void **)(a2 + 16);
    }

    else
    {
      uint64_t v8 = (void *)*(unsigned int *)(a2 + 12);
    }

    unsigned int v14 = a1;
    int v9 = -1LL;
LABEL_61:
    set_task_jetsam_coalition(v14, v8, v9);
    return;
  }

  if (v7 <= 27721731)
  {
    if (v7 <= 27656207) {
      goto LABEL_27;
    }
    if (v7 == 27656208) {
      goto LABEL_41;
    }
    if (v7 == 27656212) {
      goto LABEL_43;
    }
    if (v7 != 27721728) {
      return;
    }
    goto LABEL_45;
  }

  if (v7 > 27721739)
  {
    if (v7 != 27721740)
    {
      if (v7 == 117506060)
      {
        if (a3) {
          uint64_t v16 = 32LL;
        }
        else {
          uint64_t v16 = 16LL;
        }
        rename_task_copy(a1, v5, (const char *)(a2 + 8), v16);
      }

      else if (v7 == 117440528)
      {
        new_thread((CFDictionaryRef *)a1, v5, *(_DWORD *)(a2 + 8), (const void *)0xFFFFFFFFFFFFFFFFLL);
      }

      return;
    }

    goto LABEL_33;
  }

  if (v7 != 27721732)
  {
    if (v7 != 27721736) {
      return;
    }
    goto LABEL_38;
  }

  a3 = v26;
  if ((v19 & 1) != 0) {
    goto LABEL_39;
  }
LABEL_52:
  __n128 result = sub_186C5B524();
  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

void *ktrace_file_open_memory(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = ktrace_file_alloc_memory(a1, a2, a3, a4);
  uint64_t v5 = v4;
  if (v4)
  {
    int v6 = ktrace_file_open_internal((uint64_t)v4, *((unsigned __int8 *)v4 + 296));
    if (v6)
    {
      int v7 = v6;
      ktrace_file_close(v5);
      uint64_t v5 = 0LL;
      *__error() = v7;
    }
  }

  return v5;
}

uint64_t ktrace_file_get_memory(uint64_t a1, void *a2, void *a3)
{
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  if (!a2) {
    ktrace_remotetime_update_params_cold_1();
  }
  if (!a3) {
    ktrace_remotetime_update_params_cold_1();
  }
  uint64_t v3 = *(void *)(a1 + 240);
  if (!v3) {
    return 79LL;
  }
  uint64_t v4 = 0LL;
  *a2 = v3;
  *a3 = *(void *)(a1 + 280);
  return v4;
}

uint64_t ktrace_file_get_format(uint64_t a1)
{
  return *(unsigned int *)(a1 + 20);
}

uint64_t ktrace_file_read(uint64_t a1, void *a2, size_t a3, unint64_t a4)
{
  *__error() = 0;
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  if (!a2) {
    ktrace_remotetime_update_params_cold_1();
  }
  uint64_t v8 = *(void *)(a1 + 240);
  if (v8)
  {
    unint64_t v9 = *(void *)(a1 + 248);
    if (v9 < a4 || a4 + a3 > v9)
    {
      int v11 = __error();
      int v12 = 22;
LABEL_12:
      *int v11 = v12;
      return -1LL;
    }

    else
    {
      memcpy(a2, (const void *)(v8 + a4), a3);
    }
  }

  else
  {
    while (1)
    {
      unint64_t v10 = pread(*(_DWORD *)(a1 + 196), a2, a3, a4);
      if (v10 < a3)
      {
        int v11 = __error();
        int v12 = 79;
        goto LABEL_12;
      }

      if (v10 != -1LL) {
        return v10;
      }
      if (*__error() != 4) {
        return -1LL;
      }
    }
  }

  return a3;
}

uint64_t ktrace_file_write(uint64_t a1, const void *a2, size_t a3, off_t a4)
{
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  if (!a2) {
    ktrace_remotetime_update_params_cold_1();
  }
  if (*(_DWORD *)(a1 + 16) == 4) {
    ktrace_remotetime_update_params_cold_1();
  }
  off_t v6 = a4;
  if (*(_DWORD *)(a1 + 196) != -1)
  {
    while (1)
    {
      *__error() = 0;
      int v8 = *(_DWORD *)(a1 + 196);
      if (v6 == -1)
      {
        unint64_t v9 = write(v8, a2, a3);
        *(void *)(a1 + 280) = fd_size(*(_DWORD *)(a1 + 196));
      }

      else
      {
        unint64_t v9 = pwrite(v8, a2, a3, v6);
      }

      if (v9 < a3) {
        break;
      }
      if (v9 != -1LL) {
        return v9;
      }
      if (*__error() != 4) {
        return -1LL;
      }
    }

    *__error() = 79;
    return -1LL;
  }

  if (a4 == -1) {
    off_t v6 = *(void *)(a1 + 280);
  }
  size_t v10 = v6 + a3;
  int v11 = ktrace_file_ensure_space((void *)a1, v6 + a3);
  if (v11)
  {
    *__error() = v11;
    return -1LL;
  }

  memcpy((void *)(*(void *)(a1 + 240) + v6), a2, a3);
  if (*(void *)(a1 + 280) < v10) {
    *(void *)(a1 + 280) = v10;
  }
  return a3;
}

uint64_t ktrace_file_ensure_space(void *a1, unint64_t a2)
{
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  if (!a2) {
    ktrace_remotetime_update_params_cold_1();
  }
  if (!a1[30]) {
    ktrace_remotetime_update_params_cold_1();
  }
  unint64_t v3 = a1[31];
  if (v3 >= a2) {
    return 0LL;
  }
  unint64_t v4 = a1[31];
  while (v4 >= v3)
  {
    unint64_t v4 = 2 * v4 - 1;
    if (v4 >= a2) {
      goto LABEL_11;
    }
  }

  unint64_t v4 = a2;
LABEL_11:
  uint64_t v6 = (*(uint64_t (**)(void))(a1[32] + 16LL))();
  if (!v6) {
    return 12LL;
  }
  uint64_t v7 = v6;
  uint64_t result = 0LL;
  a1[30] = v7;
  a1[31] = v4;
  return result;
}

uint64_t current_system_is_64_bit()
{
  return 1LL;
}

uint64_t ktrace_chunk_array_validate_chunk(uint64_t a1, uint64_t a2, void **a3)
{
  uint64_t v16 = *MEMORY[0x1895F89C0];
  if (!a3) {
    ktrace_remotetime_update_params_cold_1();
  }
  unint64_t v4 = *a3;
  if (!*a3) {
    return ktrace_chunk_array_next(a1, a2, a3);
  }
  if (v4[3] < *(void *)(a2 + 16)) {
    return 0LL;
  }
  int v6 = *__error();
  ktrace_log_init();
  uint64_t v7 = (os_log_s *)ktrace_file_log;
  if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR))
  {
    uint64_t v8 = v4[3];
    uint64_t v9 = *(void *)(a2 + 16);
    int v10 = 134218496;
    uint64_t v11 = v8;
    __int16 v12 = 2048;
    uint64_t v13 = v9;
    __int16 v14 = 1024;
    int v15 = v6;
    _os_log_error_impl( &dword_186BA3000,  v7,  OS_LOG_TYPE_ERROR,  "attempt to iterate chunk at position %zu with only %zu chunks (%{errno}d)",  (uint8_t *)&v10,  0x1Cu);
  }

  *__error() = v6;
  return 79LL;
}

uint64_t ktrace_chunk_array_next(uint64_t a1, uint64_t a2, void **a3)
{
  uint64_t v62 = *MEMORY[0x1895F89C0];
  uint64_t v52 = 0LL;
  uint64_t v53 = 0LL;
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  if (!a2) {
    ktrace_remotetime_update_params_cold_1();
  }
  if (!a3) {
    ktrace_remotetime_update_params_cold_1();
  }
  int v6 = *a3;
  *a3 = 0LL;
  if (v6)
  {
    unint64_t v7 = v6[3] + 1LL;
    unint64_t v8 = *(void *)(a2 + 16);
    if (v7 < v8)
    {
      uint64_t appended = 0LL;
      int v10 = *(void **)(*(void *)a2 + 8 * v7);
LABEL_9:
      *a3 = v10;
      return appended;
    }

    if (v7 == v8 && *(void *)(a2 + 8) != 0LL)
    {
      ktrace_log_init();
      uint64_t v17 = (os_log_s *)ktrace_file_log;
      if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_DEBUG)) {
        ktrace_chunk_array_next_cold_12(v7, v17, v19, v20, v21, v22, v23, v24);
      }
LABEL_29:
      uint64_t appended = 0LL;
      *a3 = 0LL;
      return appended;
    }

    uint64_t v12 = v6[1] + v6[2];
    unint64_t v13 = (-(int)v12 & 7LL) + v12;
    ktrace_log_init();
    __int16 v14 = (os_log_s *)ktrace_file_log;
    if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v16 = v6[1];
      uint64_t v15 = v6[2];
      *(_DWORD *)buf = 134218496;
      unint64_t v55 = v13;
      __int16 v56 = 2048;
      *(void *)v57 = v15;
      *(_WORD *)&v57[8] = 2048;
      *(void *)&v57[10] = v16;
      _os_log_debug_impl( &dword_186BA3000,  v14,  OS_LOG_TYPE_DEBUG,  "calculating new offset %lld from %lld base data offset and %llu size",  buf,  0x20u);
    }
  }

  else
  {
    if (*(void *)(a2 + 16))
    {
      uint64_t appended = 0LL;
      int v10 = **(void ***)a2;
      goto LABEL_9;
    }

    unint64_t v13 = (-*(_BYTE *)(a2 + 40) & 7) + *(void *)(a2 + 40);
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_DEBUG)) {
      ktrace_chunk_array_next_cold_11();
    }
  }

  int v25 = (void *)(a2 + 48);
  size_t v26 = *(void *)(a2 + 32);
  if (v26 + v13 >= *(void *)(a2 + 48))
  {
LABEL_27:
    ktrace_log_init();
    int v30 = (os_log_s *)ktrace_file_log;
    if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_DEBUG))
    {
      unint64_t v44 = *(void *)(a2 + 32) + v13;
      uint64_t v45 = *(void *)(a2 + 48);
      *(_DWORD *)buf = 134218496;
      unint64_t v55 = v13;
      __int16 v56 = 2048;
      *(void *)v57 = v44;
      *(_WORD *)&v57[8] = 2048;
      *(void *)&v57[10] = v45;
      _os_log_debug_impl( &dword_186BA3000,  v30,  OS_LOG_TYPE_DEBUG,  "next chunk header is at offset %lld (data at %lld), max offset is %lld",  buf,  0x20u);
    }

    goto LABEL_29;
  }

  while (1)
  {
    unint64_t v27 = ktrace_file_read(a1, &v52, v26, v13);
    unint64_t v28 = *(void *)(a2 + 32);
    if (v27 < v28)
    {
      uint64_t appended = *__error();
      if (!(_DWORD)appended) {
        ktrace_remotetime_update_params_cold_1();
      }
      int v33 = *__error();
      ktrace_log_init();
      int v34 = (os_log_s *)ktrace_file_log;
      if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR))
      {
        unint64_t v48 = *(void *)(a2 + 32);
        *(_DWORD *)buf = 134218496;
        unint64_t v55 = v48;
        __int16 v56 = 2048;
        *(void *)v57 = v13;
        *(_WORD *)&v57[8] = 1024;
        *(_DWORD *)&v57[10] = v33;
        _os_log_error_impl( &dword_186BA3000,  v34,  OS_LOG_TYPE_ERROR,  "cannot read %zu bytes at offset %lld for next chunk header (%{errno}d)",  buf,  0x1Cu);
      }

      *__error() = v33;
      return appended;
    }

    if ((_DWORD)v52 != 0x2000) {
      break;
    }
    v13 += (-((_DWORD)v28 + (_DWORD)v13 + (_DWORD)v53) & 7LL) + v28 + v53;
    ktrace_log_init();
    int v29 = (os_log_s *)ktrace_file_log;
    if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 134217984;
      unint64_t v55 = v13;
      _os_log_debug_impl(&dword_186BA3000, v29, OS_LOG_TYPE_DEBUG, "skipping null chunk to offset %lld", buf, 0xCu);
    }

    size_t v26 = *(void *)(a2 + 32);
    if (v26 + v13 >= *(void *)(a2 + 48)) {
      goto LABEL_27;
    }
  }

  if ((_DWORD)v52 == -1)
  {
    int v32 = *__error();
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR)) {
      ktrace_chunk_array_next_cold_10();
    }
    *__error() = v32;
    return 79LL;
  }

  if (v53 != -1)
  {
    if (v53 + v13 + v28 > *v25)
    {
      int v35 = *__error();
      ktrace_log_init();
      __int128 v36 = (os_log_s *)ktrace_file_log;
      if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR))
      {
        unint64_t v49 = *(void *)(a2 + 16);
        unint64_t v50 = *(void *)(a2 + 32) + v13;
        uint64_t v51 = *(void *)(a2 + 48);
        *(_DWORD *)buf = 134219008;
        unint64_t v55 = v49;
        __int16 v56 = 2048;
        *(void *)v57 = v53;
        *(_WORD *)&v57[8] = 2048;
        *(void *)&v57[10] = v50;
        __int16 v58 = 2048;
        uint64_t v59 = v51;
        __int16 v60 = 1024;
        int v61 = v35;
        _os_log_error_impl( &dword_186BA3000,  v36,  OS_LOG_TYPE_ERROR,  "chunk %zu would extend beyond file: chunk header shows size %llu, data starts at offset %lld, but max offset i n file is %lld (%{errno}d)",  buf,  0x30u);
      }

      *__error() = v35;
      return 79LL;
    }

LABEL_50:
    if (v28 == 8)
    {
      ktrace_log_init();
      char v46 = (os_log_s *)ktrace_file_log;
      if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_DEBUG)) {
        ktrace_chunk_array_next_cold_6((int *)&v52, v13, v46);
      }
      int v38 = v52;
      uint64_t v41 = HIDWORD(v52);
      uint64_t v42 = *(void *)(a2 + 32) + v13;
      uint64_t v43 = a1;
      __int16 v39 = 0;
      __int16 v40 = 0;
LABEL_58:
      int v6 = ktrace_chunk_create(v43, v38, v39, v40, v41, v42);
    }

    else if (v28 == 16)
    {
      ktrace_log_init();
      int v37 = (os_log_s *)ktrace_file_log;
      if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 134218496;
        unint64_t v55 = v13;
        __int16 v56 = 1024;
        *(_DWORD *)v57 = v52;
        *(_WORD *)&v57[4] = 2048;
        *(void *)&v57[6] = v53;
        _os_log_debug_impl( &dword_186BA3000,  v37,  OS_LOG_TYPE_DEBUG,  "found chunk with header at offset %lld, tag 0x%08x size %llu",  buf,  0x1Cu);
      }

      int v38 = v52;
      __int16 v39 = WORD2(v52);
      __int16 v40 = HIWORD(v52);
      uint64_t v41 = v53;
      uint64_t v42 = *(void *)(a2 + 32) + v13;
      uint64_t v43 = a1;
      goto LABEL_58;
    }

    if (!v6) {
      return *__error();
    }
    *a3 = v6;
    uint64_t appended = ktrace_chunk_array_append_internal(a2, v6);
    if (!(_DWORD)appended)
    {
      if (*(void *)(a2 + 40) >= *(void *)(a2 + 48))
      {
        ktrace_log_init();
        if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_DEBUG)) {
          ktrace_chunk_array_next_cold_5();
        }
        uint64_t appended = 0LL;
        *(void *)(a2 + _Block_object_dispose(va, 8) = v6;
      }

      else
      {
        return 0LL;
      }
    }

    return appended;
  }

  uint64_t v53 = *v25 - (v13 + v28);
  if (!*(_BYTE *)(a1 + 296)) {
    goto LABEL_50;
  }
  ktrace_log_init();
  if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_DEBUG)) {
    ktrace_chunk_array_next_cold_9();
  }
  if (ktrace_file_write(a1, &v53, 8uLL, v13 + 8) == 8)
  {
    unint64_t v28 = *(void *)(a2 + 32);
    goto LABEL_50;
  }

  uint64_t appended = *__error();
  if (!(_DWORD)appended) {
    ktrace_remotetime_update_params_cold_1();
  }
  int v47 = *__error();
  ktrace_log_init();
  if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR)) {
    ktrace_chunk_array_next_cold_8();
  }
  *__error() = v47;
  return appended;
}

  uint64_t v20 = 0LL;
LABEL_51:
  a5 = v35;
  a4 = v34;
LABEL_52:
  free(v40);
  free(v39);
  if (v43)
  {
    int v33 = finish_events_chunk(a1, v43, a4 > 1, v16);
    uint64_t v20 = v33;
    if (a5)
    {
      if (!(_DWORD)v33) {
        *a5 = v43;
      }
    }
  }

  return v20;
}

  if (a3)
  {
    if (*(void *)(a2 + 16) != 1LL) {
      return;
    }
    uint64_t v11 = *(const void **)(a2 + 8);
    uint64_t v12 = *(void *)(a2 + 24);
  }

  else
  {
    if (*(_DWORD *)(a2 + 12) != 1) {
      return;
    }
    uint64_t v12 = *(unsigned int *)(a2 + 16);
    uint64_t v11 = (const void *)*(unsigned int *)(a2 + 8);
  }

  Value = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 80), v11);
  if (Value)
  {
    const void *Value = v11;
    Value[1] = 0LL;
    Value[2] = v12;
    Value[3] = 0LL;
  }

    sub_186BF9154((void **)&v39, (const void **)&v38, &v37);
    return 1LL;
  }

  uint64_t result = sub_186C5B398();
  __break(1u);
  return result;
}

        sub_186C24FC0((uint64_t)v57);
        uint64_t result = swift_bridgeObjectRelease();
        *(unint64_t *)((char *)v49 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v14;
        if (__OFADD__(v50, 1LL)) {
          goto LABEL_55;
        }
        ++v50;
        uint64_t v5 = a4;
      }
    }
  }

  uint64_t v15 = v6 + 1;
  if (__OFADD__(v6, 1LL))
  {
    __break(1u);
    goto LABEL_54;
  }

  if (v15 >= v52) {
    return sub_186C1F3D0(v49, a2, v50, (uint64_t)a3);
  }
  uint64_t v16 = v51[v15];
  ++v6;
  if (v16) {
    goto LABEL_21;
  }
  int v6 = v15 + 1;
  if (v15 + 1 >= v52) {
    return sub_186C1F3D0(v49, a2, v50, (uint64_t)a3);
  }
  uint64_t v16 = v51[v6];
  if (v16) {
    goto LABEL_21;
  }
  int v6 = v15 + 2;
  if (v15 + 2 >= v52) {
    return sub_186C1F3D0(v49, a2, v50, (uint64_t)a3);
  }
  uint64_t v16 = v51[v6];
  if (v16)
  {
LABEL_21:
    uint64_t v12 = (v16 - 1) & v16;
    __int16 v14 = __clz(__rbit64(v16)) + (v6 << 6);
    goto LABEL_22;
  }

  uint64_t v17 = v15 + 3;
  if (v17 >= v52) {
    return sub_186C1F3D0(v49, a2, v50, (uint64_t)a3);
  }
  uint64_t v16 = v51[v17];
  if (v16)
  {
    int v6 = v17;
    goto LABEL_21;
  }

  while (1)
  {
    int v6 = v17 + 1;
    if (__OFADD__(v17, 1LL)) {
      break;
    }
    if (v6 >= v52) {
      return sub_186C1F3D0(v49, a2, v50, (uint64_t)a3);
    }
    uint64_t v16 = v51[v6];
    ++v17;
    if (v16) {
      goto LABEL_21;
    }
  }

  __break(1u);
  return result;
}

void *ktrace_chunk_create(uint64_t a1, int a2, __int16 a3, __int16 a4, uint64_t a5, uint64_t a6)
{
  if (a1 != -1)
  {
    if (!a1) {
      ktrace_remotetime_update_params_cold_1();
    }
    if (*(_DWORD *)(a1 + 16) == 4) {
      ktrace_remotetime_update_params_cold_1();
    }
  }

  uint64_t v12 = calloc(1uLL, 0x70uLL);
  unint64_t v13 = v12;
  if (v12)
  {
    *((_DWORD *)v12 + _Block_object_dispose(va, 8) = a2;
    *((_WORD *)v12 + 1_Block_object_dispose(va, 8) = a3;
    *((_WORD *)v12 + 19) = a4;
    *uint64_t v12 = a1;
    v12[1] = a5;
    v12[2] = a6;
    if (ktrace_chunk_has_subchunks((uint64_t)v12))
    {
      uint64_t v14 = v13[2];
      uint64_t v15 = v13[1] + v14;
      v13[10] = 16LL;
      v13[11] = v14;
      v13[12] = v15;
    }
  }

  return v13;
}

uint64_t ktrace_file_iterate( uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v18 = a2;
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  if (*(_DWORD *)(a1 + 16) == 4) {
    ktrace_remotetime_update_params_cold_1();
  }
  uint64_t v10 = *(void *)(a1 + 200);
  if (v10) {
    return ktrace_file_iterate_subfile(v10, *(_DWORD *)(a1 + 216), 0, a3, a5, a6, a7, a8);
  }
  uint64_t v12 = ktrace_chunk_array_validate_chunk(a1, a1 + 24, &v18);
  if ((_DWORD)v12)
  {
    uint64_t v13 = v12;
    int v14 = *__error();
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR)) {
      ktrace_file_iterate_cold_5();
    }
    *__error() = v14;
  }

  else
  {
    if (v18)
    {
      uint64_t v17 = v18;
      while ((*(unsigned int (**)(uint64_t))(a3 + 16))(a3))
      {
        uint64_t v15 = v17;
        uint64_t v16 = ktrace_chunk_array_next(a1, a1 + 24, &v17);
        if (v17 == v15)
        {
          if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_FAULT)) {
            ktrace_file_iterate_cold_4();
          }
          return 5LL;
        }

        uint64_t v13 = v16;
        if ((_DWORD)v16 || !v17) {
          return v13;
        }
      }
    }

    else
    {
      ktrace_log_init();
      if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_DEBUG)) {
        ktrace_file_iterate_cold_3();
      }
    }

    return 0LL;
  }

  return v13;
}

uint64_t ktrace_file_iterate_subfile( uint64_t a1, int a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*(_DWORD *)(a1 + 16) == 4) {
    ktrace_remotetime_update_params_cold_1();
  }
  v27[0] = 0LL;
  v27[1] = v27;
  if (a3) {
    int v8 = 32778;
  }
  else {
    int v8 = 32779;
  }
  v27[2] = 0x2000000000LL;
  char v28 = 1;
  uint64_t v23 = 0LL;
  uint64_t v24 = &v23;
  uint64_t v25 = 0x2000000000LL;
  char v26 = 0;
  uint64_t v19 = 0LL;
  uint64_t v20 = &v19;
  uint64_t v21 = 0x2000000000LL;
  int v22 = 0;
  uint64_t v15 = 0LL;
  uint64_t v16 = &v15;
  uint64_t v17 = 0x2000000000LL;
  int v18 = 0;
  v12[0] = MEMORY[0x1895F87A8];
  v12[1] = 0x40000000LL;
  v12[2] = __ktrace_file_iterate_subfile_block_invoke;
  v12[3] = &unk_189F553A8;
  int v13 = v8;
  int v14 = a2;
  v12[6] = &v19;
  v12[7] = &v23;
  v12[8] = v27;
  v12[4] = a4;
  v12[5] = &v15;
  uint64_t v9 = ((uint64_t (*)(uint64_t, void, void *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))ktrace_file_iterate)( a1,  0LL,  v12,  a4,  a5,  a6,  a7,  a8);
  *((_DWORD *)v16 + 6) = v9;
  uint64_t v10 = *((unsigned int *)v20 + 6);
  if (!(_DWORD)v10)
  {
    *((_DWORD *)v20 + 6) = v9;
    uint64_t v10 = v9;
    if (!(_DWORD)v9) {
      uint64_t v10 = 2 * (*((_BYTE *)v24 + 24) == 0);
    }
  }

  _Block_object_dispose(&v15, 8);
  _Block_object_dispose(&v19, 8);
  _Block_object_dispose(&v23, 8);
  _Block_object_dispose(v27, 8);
  return v10;
}

void *ktrace_file_append_chunk(uint64_t a1, int a2, __int16 a3, __int16 a4, UInt8 *a5, CFIndex a6)
{
  if (a1 != -1)
  {
    if (!a1) {
      ktrace_remotetime_update_params_cold_1();
    }
    if (*(void *)(a1 + 152))
    {
      int v9 = 22;
LABEL_10:
      uint64_t appended = 0LL;
      *__error() = v9;
      return appended;
    }
  }

  uint64_t appended = ktrace_file_append_start(a1, a2, a3, a4);
  if (appended)
  {
    if (a5)
    {
      if (a6)
      {
        int v9 = ktrace_file_append_data(a1, (uint64_t)appended, a5, a6);
        if (v9) {
          goto LABEL_10;
        }
      }
    }

    int v9 = ktrace_file_append_finish(a1, (uint64_t)appended);
    if (v9) {
      goto LABEL_10;
    }
  }

  return appended;
}

void *ktrace_file_append_start(uint64_t a1, int a2, __int16 a3, __int16 a4)
{
  if (a1 == -1) {
    return ktrace_file_append_start_internal(a1, a2, a3, a4);
  }
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  uint64_t v8 = *(void *)(a1 + 200);
  if (!v8) {
    return ktrace_file_append_start_internal(a1, a2, a3, a4);
  }
  uint64_t v9 = *(void *)(a1 + 232);
  if (v9 && *(void *)(v8 + 152) == v9) {
    return ktrace_file_append_start_subchunk(v8, v9, a2, a3, a4);
  }
  uint64_t appended = ktrace_file_append_start();
  *(void *)(a1 + 232) = appended;
  if (appended && ktrace_file_append_subchunk(*(void *)(a1 + 200), appended, 32780, 0, 0, (UInt8 *)(a1 + 216), 4LL))
  {
    uint64_t v8 = *(void *)(a1 + 200);
    uint64_t v9 = *(void *)(a1 + 232);
    return ktrace_file_append_start_subchunk(v8, v9, a2, a3, a4);
  }

  return 0LL;
}

uint64_t ktrace_file_append_data(uint64_t a1, uint64_t a2, UInt8 *bytes, CFIndex length)
{
  while (1)
  {
    if (!a1) {
      ktrace_remotetime_update_params_cold_1();
    }
    if (!a2) {
      ktrace_remotetime_update_params_cold_1();
    }
    if (!bytes) {
      ktrace_remotetime_update_params_cold_1();
    }
    if (!length) {
      ktrace_remotetime_update_params_cold_1();
    }
    if (a1 == -1 || *(_DWORD *)(a1 + 16) == 4)
    {
      CFDataAppendBytes(*(CFMutableDataRef *)(a2 + 16), bytes, length);
      goto LABEL_11;
    }

    uint64_t v8 = *(void *)(a1 + 200);
    if (!v8) {
      break;
    }
    a1 = *(void *)(a1 + 200);
    if (*(void *)(v8 + 152) != a2) {
      ktrace_remotetime_update_params_cold_1();
    }
  }

  if (*(void *)(a1 + 152) == a2)
  {
    int v10 = *(_DWORD *)(a1 + 196);
    if (v10 != -1 && lseek(v10, 0LL, 2) == -1)
    {
      uint64_t v9 = *__error();
      int v12 = *__error();
      ktrace_log_init();
      if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR)) {
        ktrace_file_append_data_cold_6();
      }
      *__error() = v12;
      goto LABEL_23;
    }

    if (ktrace_file_write(a1, bytes, length, -1LL) < length)
    {
      uint64_t v9 = *__error();
      int v11 = *__error();
      ktrace_log_init();
      if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR)) {
        ktrace_file_append_data_cold_5();
      }
      *__error() = v11;
LABEL_23:
      *(void *)(a1 + 152) = 0LL;
      free((void *)a2);
      return v9;
    }

LABEL_11:
    uint64_t v9 = 0LL;
    *(void *)(a2 + 8) += length;
    return v9;
  }

  return 22LL;
}

  _Block_object_dispose(&v25, 8);
  _Block_object_dispose(&v29, 8);
  _Block_object_dispose(&v33, 8);
  return v11;
}

    int v10 = 0LL;
LABEL_12:
    int v11 = v8[2];
    if (v11)
    {
      int v12 = *((unsigned __int8 *)this + v11);
      if (v12 == 3)
      {
        if (v10)
        {
          uint64_t result = FlatbufferSymbols::DyldSharedCacheMetadata::Verify(v10, a2);
          if (!result) {
            return result;
          }
        }
      }

      else if (v12 == 2)
      {
        if (v10 && !FlatbufferSymbols::MachoMetadata::Verify(v10, a2)) {
          return 0LL;
        }
      }

      else
      {
        int v13 = v12 != 1 || v10 == 0LL;
        if (!v13 && !FlatbufferSymbols::ProcessMetadata::Verify(v10, a2)) {
          return 0LL;
        }
      }
    }

    goto LABEL_26;
  }

  if (v9 >= 5) {
    goto LABEL_11;
  }
LABEL_26:
  uint64_t result = flatbuffers::Table::VerifyOffset(this, a2, 8u);
  if (!result) {
    return result;
  }
  int v14 = *(int *)this;
  uint64_t v15 = -v14;
  uint64_t v16 = (unsigned __int16 *)((char *)this - v14);
  if (*v16 >= 9u)
  {
    uint64_t v17 = v16[4];
    if (v17)
    {
      uint64_t result = flatbuffers::Verifier::VerifyVectorOrString( a2,  (const unsigned __int8 *)this + v17 + *(unsigned int *)((char *)this + v17),  4uLL,  0LL);
      if (!result) {
        return result;
      }
      uint64_t v15 = -(uint64_t)*(int *)this;
    }
  }

  int v18 = (unsigned __int16 *)((char *)this + v15);
  if (*v18 >= 9u && (uint64_t v19 = v18[4]) != 0) {
    uint64_t v20 = (_DWORD *)((char *)this + v19 + *(unsigned int *)((char *)this + v19));
  }
  else {
    uint64_t v20 = 0LL;
  }
  uint64_t result = flatbuffers::Verifier::VerifyVectorOfTables<FlatbufferSymbols::SymbolOwner>(a2, v20);
  if (result)
  {
    uint64_t result = flatbuffers::Table::VerifyOffset(this, a2, 0xAu);
    if (result)
    {
      uint64_t v21 = *(int *)this;
      int v22 = -v21;
      uint64_t v23 = (unsigned __int16 *)((char *)this - v21);
      if (*v23 >= 0xBu)
      {
        uint64_t v24 = v23[5];
        if (v24)
        {
          uint64_t result = flatbuffers::Verifier::VerifyVectorOrString( a2,  (const unsigned __int8 *)this + v24 + *(unsigned int *)((char *)this + v24),  4uLL,  0LL);
          if (!result) {
            return result;
          }
          int v22 = -(uint64_t)*(int *)this;
        }
      }

      uint64_t v25 = (unsigned __int16 *)((char *)this + v22);
      if (*v25 >= 0xBu && (char v26 = v25[5]) != 0) {
        unint64_t v27 = (_DWORD *)((char *)this + v26 + *(unsigned int *)((char *)this + v26));
      }
      else {
        unint64_t v27 = 0LL;
      }
      uint64_t result = flatbuffers::Verifier::VerifyVectorOfTables<FlatbufferSymbols::SharedCache>(a2, v27);
      if (result)
      {
        --*((_DWORD *)a2 + 4);
        return 1LL;
      }
    }
  }

  return result;
}

    int v10 = 0LL;
    goto LABEL_12;
  }

  if (v9 >= 5) {
    goto LABEL_11;
  }
LABEL_16:
  uint64_t result = flatbuffers::Table::VerifyOffset(this, a2, 8u);
  if (!result) {
    return result;
  }
  int v12 = *(int *)this;
  int v13 = -v12;
  int v14 = (unsigned __int16 *)((char *)this - v12);
  if (*v14 >= 9u)
  {
    uint64_t v15 = v14[4];
    if (v15)
    {
      uint64_t result = flatbuffers::Verifier::VerifyVectorOrString( a2,  (const unsigned __int8 *)this + v15 + *(unsigned int *)((char *)this + v15),  4uLL,  0LL);
      if (!result) {
        return result;
      }
      int v13 = -(uint64_t)*(int *)this;
    }
  }

  uint64_t v16 = (unsigned __int16 *)((char *)this + v13);
  if (*v16 >= 9u && (uint64_t v17 = v16[4]) != 0) {
    int v18 = (_DWORD *)((char *)this + v17 + *(unsigned int *)((char *)this + v17));
  }
  else {
    int v18 = 0LL;
  }
  uint64_t result = flatbuffers::Verifier::VerifyVectorOfTables<FlatbufferSymbols::Segment>(a2, v18);
  if (result)
  {
    uint64_t v19 = (unsigned __int16 *)((char *)this - *(int *)this);
    uint64_t v20 = *v19;
    if (v20 < 0xB
      || (!v19[5]
       || (result = 0LL, uint64_t v21 = *((void *)a2 + 1), v21 >= 9)
       && v21 - 8 >= (unint64_t)this + v19[5] - *(void *)a2)
      && (v20 < 0xD
       || (!v19[6]
        || (result = 0LL, int v22 = *((void *)a2 + 1), v22 >= 2)
        && v22 - 1 >= (unint64_t)this + v19[6] - *(void *)a2)
       && (v20 < 0xF
        || (uint64_t v23 = v19[7]) == 0
        || (result = 0LL, uint64_t v24 = *((void *)a2 + 1), v24 >= 2)
        && v24 - 1 >= (unint64_t)this + v23 - *(void *)a2)))
    {
      --*((_DWORD *)a2 + 4);
      return 1LL;
    }
  }

  return result;
}

          int v34 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,SymbolOwner *,BOOL (*&)(SymbolOwner const&,SymbolOwner const&)>( a1,  a2,  a3);
          if ((v35 & 1) == 0) {
            goto LABEL_14;
          }
          __int128 v36 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(SymbolOwner const&,SymbolOwner const&),SymbolOwner*>( a1,  v34,  a3);
          int v11 = v34 + 6;
          if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(SymbolOwner const&,SymbolOwner const&),SymbolOwner*>( v34 + 6,  a2,  a3))
          {
            int v12 = v13 + 1;
            if ((v36 & 1) != 0) {
              continue;
            }
LABEL_14:
            std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(SymbolOwner const&,SymbolOwner const&),SymbolOwner*,false>( a1,  v34,  a3,  -v13,  a5 & 1);
            int v11 = v34 + 6;
LABEL_16:
            a5 = 0;
            a4 = -v13;
            goto LABEL_2;
          }

          a4 = -v13;
          a2 = v34;
          if ((v36 & 1) != 0) {
            return;
          }
          goto LABEL_1;
        }

        if (v11 != a2) {
          std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(SymbolOwner const&,SymbolOwner const&),SymbolOwner*,SymbolOwner*>( (char *)v11,  (char *)a2,  (char *)a2,  (unsigned int (**)(uint64_t, __int128 *))a3,  a6);
        }
        return;
    }
  }

          uint64_t v19 = (unint64_t *)std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,PrepassOp *,std::__less<void,void> &>( v9,  a2);
          if ((v20 & 1) == 0) {
            goto LABEL_14;
          }
          uint64_t v21 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PrepassOp *>( v9,  v19);
          uint64_t v9 = v19 + 2;
          if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PrepassOp *>( v19 + 2,  a2))
          {
            int v10 = v11 + 1;
            if ((v21 & 1) != 0) {
              continue;
            }
LABEL_14:
            std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,PrepassOp *,false>( a1,  v19,  a3,  -v11,  a5 & 1);
            uint64_t v9 = v19 + 2;
LABEL_16:
            a5 = 0;
            a4 = -v11;
            goto LABEL_2;
          }

          a4 = -v11;
          a2 = v19;
          if ((v21 & 1) != 0) {
            return;
          }
          goto LABEL_1;
        }

        if (v9 != a2) {
          std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PrepassOp *,PrepassOp *>( v9,  a2,  a2,  a3);
        }
        return;
    }
  }

  __break(1u);
LABEL_12:
  *(double *)&a3 = COERCE_DOUBLE(sub_186C0A618(0LL, *((void *)a3 + 2) + 1LL, 1, a3));
  *a2 = a3;
LABEL_8:
  uint64_t v24 = *((void *)a3 + 2);
  uint64_t v23 = *((void *)a3 + 3);
  if (v24 >= v23 >> 1)
  {
    *(double *)&a3 = COERCE_DOUBLE(sub_186C0A618((char *)(v23 > 1), v24 + 1, 1, a3));
    *a2 = a3;
  }

  *((void *)a3 + 2) = v24 + 1;
  uint64_t v25 = &a3[32 * v24];
  char v25[32] = a1;
  *((double *)v25 + 5) = v16 - v6;
  *((double *)v25 + 6) = v17 - v7;
  *((void *)v25 + 7) = v19;
  ((void (*)(_BYTE *, void))v5)(v27, 0LL);
  return v19;
}

  __break(1u);
  return result;
}

uint64_t ktrace_file_append_finish(uint64_t a1, uint64_t a2)
{
  if (a1 == -1) {
    return 0LL;
  }
  uint64_t v3 = *(void *)(a1 + 200);
  if (v3)
  {
    if (*(void *)(v3 + 152) != a2) {
      ktrace_remotetime_update_params_cold_1();
    }
    if (!*(void *)(a1 + 232)) {
      ktrace_remotetime_update_params_cold_1();
    }
    uint64_t result = ((uint64_t (*)(void))ktrace_file_append_finish)();
    if (!(_DWORD)result)
    {
      uint64_t result = ktrace_file_append_finish(*(void *)(a1 + 200), *(void *)(a1 + 232));
      *(void *)(a1 + 232) = 0LL;
    }
  }

  else
  {
    uint64_t result = ktrace_file_append_finish_internal(a1, (void *)(a1 + 24), a2);
    if (!(_DWORD)result) {
      *(_BYTE *)(a1 + 299) = 0;
    }
  }

  return result;
}

void *ktrace_file_append_file( uint64_t a1, int a2, __int16 a3, __int16 a4, char *a5, unint64_t a6, off_t a7)
{
  uint64_t v32 = *MEMORY[0x1895F89C0];
  int v13 = open(a5, 0);
  if ((v13 & 0x80000000) == 0)
  {
    int v14 = v13;
    if (fstat(v13, &v25) == -1)
    {
      int v21 = *__error();
      ktrace_log_init();
      if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR)) {
        ktrace_file_append_file_cold_2();
      }
    }

    else
    {
      off_t st_size = v25.st_size;
      size_t v16 = v25.st_size - a6;
      if (v25.st_size <= a6)
      {
        *__error() = 34;
        int v21 = *__error();
        ktrace_log_init();
        uint64_t v23 = (os_log_s *)ktrace_file_log;
        if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 134218496;
          unint64_t v27 = a6;
          __int16 v28 = 2048;
          off_t v29 = st_size;
          __int16 v30 = 1024;
          int v31 = v21;
          _os_log_error_impl( &dword_186BA3000,  v23,  OS_LOG_TYPE_ERROR,  "invalid file size to append, offset = %jd, filesize = %jd (%{errno}d)",  buf,  0x1Cu);
        }
      }

      else
      {
        uint64_t v17 = (UInt8 *)mmap(0LL, v25.st_size - a6, 1, 1, v14, a6);
        if (v17 != (UInt8 *)-1LL)
        {
          int v18 = v17;
          if (st_size >= a7) {
            CFIndex v19 = a7;
          }
          else {
            CFIndex v19 = st_size;
          }
          uint64_t appended = ktrace_file_append_chunk(a1, a2, a3, a4, v17, v19);
          if (munmap(v18, v16) != -1) {
            goto LABEL_22;
          }
          int v21 = *__error();
          ktrace_log_init();
          if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR)) {
            ktrace_file_append_file_cold_4();
          }
LABEL_21:
          *__error() = v21;
LABEL_22:
          close(v14);
          return appended;
        }

        int v21 = *__error();
        ktrace_log_init();
        if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR)) {
          ktrace_file_append_file_cold_3();
        }
      }
    }

    uint64_t appended = 0LL;
    goto LABEL_21;
  }

  int v22 = *__error();
  ktrace_log_init();
  if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR)) {
    ktrace_file_append_file_cold_1();
  }
  uint64_t appended = 0LL;
  *__error() = v22;
  return appended;
}

void *ktrace_file_append_subchunk( uint64_t a1, uint64_t a2, int a3, __int16 a4, __int16 a5, UInt8 *a6, CFIndex a7)
{
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  if (!a2) {
    ktrace_remotetime_update_params_cold_1();
  }
  if (*(void *)(a1 + 152) == a2)
  {
    uint64_t appended = ktrace_file_append_start_subchunk(a1, a2, a3, a4, a5);
    if (appended
      && (ktrace_file_append_data(a1, (uint64_t)appended, a6, a7)
       || a1 != -1 && ktrace_file_append_finish(a1, (uint64_t)appended)))
    {
      return 0LL;
    }
  }

  else
  {
    uint64_t appended = 0LL;
    *__error() = 22;
  }

  return appended;
}

void *ktrace_file_append_start_subchunk(uint64_t a1, uint64_t a2, int a3, __int16 a4, __int16 a5)
{
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  if (!a2) {
    ktrace_remotetime_update_params_cold_1();
  }
  if (*(void *)(a1 + 152) == a2)
  {
    uint64_t result = ktrace_file_append_start_internal(a1, a3, a4, a5);
    if (result)
    {
      *(_WORD *)(a2 + 36) |= 0x8000u;
      result[5] = a2;
      *(void *)(a1 + 152) = result;
    }
  }

  else
  {
    unint64_t v7 = __error();
    uint64_t result = 0LL;
    *unint64_t v7 = 22;
  }

  return result;
}

void *ktrace_file_append_start_internal(uint64_t a1, int a2, __int16 a3, __int16 a4)
{
  uint64_t v26 = *MEMORY[0x1895F89C0];
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  if (a3 < 0)
  {
    *__error() = 22;
    int v9 = *__error();
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR)) {
      ktrace_file_append_start_internal_cold_6();
    }
    goto LABEL_8;
  }

  if (a1 != -1 && *(_DWORD *)(a1 + 16) != 4)
  {
    if (*(_BYTE *)(a1 + 296))
    {
      int v11 = *(_DWORD *)(a1 + 196);
      if (v11 == -1)
      {
        off_t v12 = *(void *)(a1 + 280);
      }

      else
      {
        off_t v12 = lseek(v11, 0LL, 2);
        if (v12 == -1)
        {
          int v9 = *__error();
          ktrace_log_init();
          if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR)) {
            ktrace_file_append_start_internal_cold_5();
          }
LABEL_8:
          uint64_t v8 = 0LL;
          *__error() = v9;
          return v8;
        }
      }

      ktrace_chunk_array_read_all(a1, a1 + 80);
      ktrace_chunk_array_read_all(a1, a1 + 24);
      unint64_t v13 = -(int)v12 & 7LL;
      if (!v13) {
        goto LABEL_24;
      }
      ktrace_log_init();
      int v14 = (os_log_s *)ktrace_file_log;
      if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_DEBUG)) {
        ktrace_file_append_start_internal_cold_4(v13, v14, v15, v16, v17, v18, v19, v20);
      }
      MEMORY[0x1895F8858]();
      int v22 = (char *)&v25 - v21;
      bzero((char *)&v25 - v21, v13);
      if (ktrace_file_write(a1, v22, v13, -1LL) >= v13)
      {
LABEL_24:
        uint64_t v8 = ktrace_chunk_create(a1, a2, a3, a4, 0LL, v12 + v13 + 16);
        if (!v8) {
          return v8;
        }
        __int128 v25 = xmmword_186C5D090;
        if (ktrace_file_write(a1, &v25, 0x10uLL, -1LL) == 16)
        {
          *(void *)(a1 + 152) = v8;
          return v8;
        }

        int v24 = *__error();
        ktrace_log_init();
        if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR)) {
          ktrace_file_append_start_internal_cold_2();
        }
        *__error() = v24;
        int v9 = *__error();
        free(v8);
        goto LABEL_8;
      }

      int v23 = *__error();
      ktrace_log_init();
      if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR)) {
        ktrace_file_append_start_internal_cold_3();
      }
      *__error() = v23;
    }

    return 0LL;
  }

  uint64_t v8 = ktrace_chunk_create(-1LL, a2, a3, a4, 0LL, 0LL);
  void v8[2] = CFDataCreateMutable(0LL, 0LL);
  return v8;
}

uint64_t ktrace_file_append_finish_internal(uint64_t a1, void *a2, uint64_t a3)
{
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  if (!a3) {
    ktrace_remotetime_update_params_cold_1();
  }
  if (a1 == -1) {
    ktrace_remotetime_update_params_cold_1();
  }
  int v6 = *(_DWORD *)(a1 + 16);
  if (v6 != 4 && *(void *)(a1 + 152) != a3) {
    return 22LL;
  }
  uint64_t v8 = *(void *)(a3 + 40);
  *(void *)(a1 + 152) = v8;
  if (v8)
  {
    uint64_t v9 = *(void *)(v8 + 16);
    unint64_t v10 = *(void *)(a3 + 8) + *(void *)(v8 + 8) + 16LL;
    *(void *)(v8 + _Block_object_dispose(va, 8) = v10;
    unint64_t v11 = *(void *)(a3 + 8) + *(void *)(a3 + 16) - v9;
    if (v11 > v10) {
      *(void *)(v8 + _Block_object_dispose(va, 8) = v11;
    }
  }

  if (v6 == 4)
  {
    (*(void (**)(void, BOOL, uint64_t))(*(void *)(a1 + 272) + 16LL))( *(void *)(a1 + 272),  a1 + 80 == (void)a2,  a3);
    ktrace_chunk_destroy((void *)a3);
    return 0LL;
  }

  int v12 = *(_DWORD *)(a3 + 36);
  v22[0] = *(_DWORD *)(a3 + 32);
  v22[1] = v12;
  uint64_t v13 = *(void *)(a3 + 16);
  uint64_t v23 = *(void *)(a3 + 8);
  off_t v14 = v13 - 16;
  if ((unint64_t)ktrace_file_write(a1, v22, 0x10uLL, v13 - 16) > 0xF)
  {
    uint64_t v17 = ktrace_chunk_array_append(a2, (void *)a3);
    if (!(_DWORD)v17)
    {
      if (ktrace_chunk_has_subchunks(a3) && *(void *)a3 != -1LL)
      {
        uint64_t v7 = 0LL;
        uint64_t v20 = *(void *)(a3 + 16);
        uint64_t v21 = *(void *)(a3 + 8) + v20;
        *(void *)(a3 + 80) = 16LL;
        *(void *)(a3 + 8_Block_object_dispose(va, 8) = v20;
        *(void *)(a3 + 96) = v21;
        return v7;
      }

      return 0LL;
    }

    uint64_t v7 = v17;
    int v16 = *__error();
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR)) {
      ktrace_file_append_finish_internal_cold_5();
    }
  }

  else
  {
    unsigned int v15 = *__error();
    if (v15) {
      uint64_t v7 = v15;
    }
    else {
      uint64_t v7 = 22LL;
    }
    int v16 = *__error();
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR)) {
      ktrace_file_append_finish_internal_cold_4();
    }
  }

  *__error() = v16;
  int v18 = *(_DWORD *)(a1 + 196);
  if (v18 != -1) {
    ftruncate(v18, v14);
  }
  free((void *)a3);
  return v7;
}

uint64_t ktrace_file_appending_chunk(uint64_t a1)
{
  return *(void *)(a1 + 152);
}

void *ktrace_file_append(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = ktrace_chunk_size((uint64_t)a2);
  if (v4)
  {
    uint64_t v5 = (UInt8 *)ktrace_chunk_map_data(a2, 0LL, v4);
    if (!v5) {
      return 0LL;
    }
  }

  else
  {
    uint64_t v5 = 0LL;
  }

  int v7 = ktrace_chunk_tag((uint64_t)a2);
  __int16 v8 = ktrace_chunk_version_major((uint64_t)a2);
  __int16 v9 = ktrace_chunk_version_minor((uint64_t)a2);
  uint64_t appended = ktrace_file_append_chunk(a1, v7, v8, v9, v5, v4);
  if (v5) {
    ktrace_chunk_unmap_data((uint64_t)a2, (unint64_t)v5, v4);
  }
  return appended;
}

uint64_t ktrace_file_align_next(uint64_t a1, unint64_t a2)
{
  if (a2 <= 8) {
    ktrace_remotetime_update_params_cold_1();
  }
  if ((a2 & 7) != 0) {
    ktrace_remotetime_update_params_cold_1();
  }
  if (*(_DWORD *)(a1 + 16) == 4) {
    return 0LL;
  }
  int v4 = *(_DWORD *)(a1 + 196);
  if (v4 == -1)
  {
    off_t v5 = *(void *)(a1 + 280);
  }

  else
  {
    off_t v5 = lseek(v4, 0LL, 2);
    if (v5 < 0)
    {
      int v6 = *__error();
      ktrace_log_init();
      if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR)) {
        ktrace_file_align_next_cold_5();
      }
      *__error() = v6;
      return *__error();
    }
  }

  if (((-16 - v5) & (a2 - 1)) == 0) {
    return 0LL;
  }
  size_t v7 = (-32 - v5) & (a2 - 1);
  if (!v7) {
    return 0LL;
  }
  if (*(_BYTE *)(a1 + 299)) {
    __int16 v8 = (void *)(a1 + 80);
  }
  else {
    __int16 v8 = (void *)(a1 + 24);
  }
  uint64_t appended = ktrace_file_append_start_internal(a1, 0x2000, 0, 0);
  if (appended)
  {
    if (!*(_BYTE *)(a1 + 296)) {
      ktrace_remotetime_update_params_cold_1();
    }
    unint64_t v10 = appended;
    int v11 = *(_DWORD *)(a1 + 196);
    if (v11 == -1)
    {
      if (!*(void *)(a1 + 240)) {
        ktrace_remotetime_update_params_cold_1();
      }
      uint64_t updated = ktrace_file_ensure_space((void *)a1, *(void *)(a1 + 248) + v7);
      if ((_DWORD)updated) {
        goto LABEL_32;
      }
      bzero((void *)(*(void *)(a1 + 240) + *(void *)(a1 + 280)), v7);
      *(void *)(a1 + 280) += v7;
    }

    else
    {
      char v15 = 0;
      if (lseek(v11, v7 - 1, 2) < 0)
      {
        int v12 = *__error();
        ktrace_log_init();
        if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR)) {
          ktrace_file_align_next_cold_3();
        }
      }

      else
      {
        if (ktrace_file_write(a1, &v15, 1uLL, -1LL)) {
          goto LABEL_29;
        }
        int v12 = *__error();
        ktrace_log_init();
        if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR)) {
          ktrace_file_align_next_cold_4();
        }
      }

      *__error() = v12;
      uint64_t updated = *__error();
      if ((_DWORD)updated) {
        goto LABEL_32;
      }
    }

uint64_t ktrace_file_update_header_size(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 16) == 4) {
    return 0LL;
  }
  uint64_t v3 = *(void *)(a1 + 280);
  *(void *)(a1 + 28_Block_object_dispose(va, 8) = v3;
  uint64_t v6 = v3 - 16;
  if ((unint64_t)ktrace_file_write(a1, &v6, 8uLL, 8LL) > 7)
  {
    uint64_t result = 0LL;
    uint64_t v5 = *(void *)(a1 + 288);
    *(void *)(a1 + 56) = 16LL;
    *(void *)(a1 + 64) = v5;
    *(void *)(a1 + 72) = v5;
  }

  else
  {
    int v4 = *__error();
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR)) {
      ktrace_file_update_header_size_cold_1();
    }
    *__error() = v4;
    return *__error();
  }

  return result;
}

uint64_t ktrace_file_header_iterate( uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v15 = a2;
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  uint64_t v10 = *(void *)(a1 + 200);
  if (v10) {
    return ktrace_file_iterate_subfile(v10, *(_DWORD *)(a1 + 216), 1, a3, a5, a6, a7, a8);
  }
  uint64_t v12 = ktrace_chunk_array_validate_chunk(a1, a1 + 80, &v15);
  if ((_DWORD)v12)
  {
    uint64_t v13 = v12;
    int v14 = *__error();
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR)) {
      ktrace_file_iterate_cold_5();
    }
    *__error() = v14;
  }

  else
  {
    if (v15)
    {
      while ((*(unsigned int (**)(uint64_t))(a3 + 16))(a3))
      {
        uint64_t v13 = ktrace_chunk_array_next(a1, a1 + 80, &v15);
        if ((_DWORD)v13 || !v15) {
          return v13;
        }
      }
    }

    else
    {
      ktrace_log_init();
      if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_DEBUG)) {
        ktrace_file_iterate_cold_3();
      }
    }

    return 0LL;
  }

  return v13;
}

void *ktrace_file_header_append_chunk(uint64_t a1, int a2, __int16 a3, __int16 a4, UInt8 *a5, CFIndex a6)
{
  if (!*(_BYTE *)(a1 + 299))
  {
    int v14 = *__error();
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR)) {
      ktrace_file_header_append_chunk_cold_1();
    }
    goto LABEL_12;
  }

  uint64_t v10 = *(void *)(a1 + 200);
  if (v10)
  {
    uint64_t result = ktrace_file_append_start(v10, 32778, 0, 0);
    if (result)
    {
      uint64_t v12 = (uint64_t)result;
      uint64_t result = ktrace_file_append_subchunk( *(void *)(a1 + 200),  (uint64_t)result,  32780,  0,  0,  (UInt8 *)(a1 + 216),  4LL);
      if (result)
      {
        uint64_t appended = ktrace_file_append_subchunk(*(void *)(a1 + 200), v12, a2, 0, 0, a5, a6);
        ktrace_file_append_finish(*(void *)(a1 + 200), v12);
        return appended;
      }
    }

    return result;
  }

  if (*(void *)(a1 + 152))
  {
    int v14 = *__error();
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR)) {
      ktrace_file_header_append_chunk_cold_2();
    }
LABEL_12:
    *__error() = v14;
    char v15 = __error();
    uint64_t result = 0LL;
    int *v15 = 22;
    return result;
  }

  uint64_t result = ktrace_file_append_start_internal(a1, a2, a3, a4);
  if (result)
  {
    uint64_t v16 = (uint64_t)result;
    if (a5 && a6 && ktrace_file_append_data(a1, (uint64_t)result, a5, a6)
      || ktrace_file_append_finish_internal(a1, (void *)(a1 + 80), v16))
    {
      return 0LL;
    }

    else if (ktrace_file_update_header_size(a1))
    {
      return 0LL;
    }

    else
    {
      return (void *)v16;
    }
  }

  return result;
}

void *ktrace_file_header_append_live_cpu_map(uint64_t a1)
{
  __int16 v8 = 0LL;
  int v2 = kdebug_alloc_current_cpu_map(&v8, (size_t *)&v7);
  if (v2)
  {
    int v3 = v2;
    int v4 = *__error();
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
      ktrace_file_header_append_live_cpu_map_cold_1();
    }
    uint64_t appended = 0LL;
    *__error() = v4;
  }

  else
  {
    uint64_t appended = ktrace_file_header_append_chunk(a1, 7168, 1, 0, (UInt8 *)v8, v7);
    if (appended) {
      int v3 = 0;
    }
    else {
      int v3 = *__error();
    }
  }

  free(v8);
  *__error() = v3;
  return appended;
}

void *ktrace_file_append_live_thread_map(uint64_t a1)
{
  CFIndex v7 = 0LL;
  __int16 v8 = 0LL;
  int v2 = kdebug_alloc_thread_map(&v8, (size_t *)&v7);
  if (!v2)
  {
    uint64_t appended = ktrace_file_append_chunk(a1, 7424, 0, 0, (UInt8 *)v8, v7);
    if (appended) {
      int v3 = 0;
    }
    else {
      int v3 = *__error();
    }
LABEL_10:
    free(v8);
    goto LABEL_11;
  }

  int v3 = v2;
  if (v2 != 2)
  {
    int v5 = *__error();
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
      ktrace_file_append_live_thread_map_cold_1();
    }
    uint64_t appended = 0LL;
    *__error() = v5;
    goto LABEL_10;
  }

  int v3 = 0;
  uint64_t appended = 0LL;
LABEL_11:
  *__error() = v3;
  return appended;
}

uint64_t ktrace_file_append_live_ktrace( uint64_t a1, unint64_t a2, unsigned int a3, unsigned int a4, uint64_t *a5)
{
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  LODWORD(v6) = a3;
  if (a4 - 2 < 3) {
    return ktrace_file_append_live_ktrace_transformed(a1, a2, a3, a4, a5, 0LL);
  }
  if (a4 > 1)
  {
    int v10 = *__error();
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR)) {
      ktrace_file_append_live_ktrace_cold_2();
    }
    *__error() = v10;
    *__error() = 22;
    return *__error();
  }

  if (a2)
  {
    *__error() = 22;
    int v9 = *__error();
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR)) {
      ktrace_file_append_live_ktrace_cold_5();
    }
    *__error() = v9;
    return *__error();
  }

  if (*(_BYTE *)(a1 + 296))
  {
    v23[0] = 0LL;
    v23[1] = 0LL;
    int v24 = 0;
    uint64_t result = kdebug_get_bufinfo(v23);
    if ((_DWORD)result) {
      return result;
    }
    int v11 = setup_events_chunk(a1, 0);
    if (v11)
    {
      uint64_t v12 = (uint64_t)v11;
      unint64_t v13 = (uint64_t)SLODWORD(v23[0]) << 6;
      uint64_t v6 = v6;
      __uint64_t v14 = clock_gettime_nsec_np(_CLOCK_MONOTONIC_RAW);
      while (1)
      {
        int v15 = *(_DWORD *)(a1 + 196);
        if (v15 == -1)
        {
          size_t v22 = v13;
          if (ktrace_file_ensure_space((void *)a1, v13)
            || kdebug_wait_and_read_events( (void *)(*(void *)(a1 + 240) + *(void *)(a1 + 280)),  &v22,  v6))
          {
LABEL_25:
            int v17 = *(_DWORD *)(a1 + 196);
            if (v17 == -1)
            {
              off_t v18 = *(void *)(a1 + 280);
            }

            else
            {
              off_t v18 = lseek(v17, 0LL, 2);
              if (v18 == -1)
              {
                int v19 = *__error();
                ktrace_log_init();
                uint64_t v20 = (os_log_s *)ktrace_file_log;
                if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR)) {
                  ktrace_file_append_live_ktrace_cold_4(v19, v20);
                }
                *__error() = v19;
                off_t v18 = -1LL;
              }
            }

            *(void *)(v12 + _Block_object_dispose(va, 8) = v18 - *(void *)(v12 + 16);
            uint64_t result = finish_events_chunk(a1, v12, 0, 0);
            if (a5 && !(_DWORD)result) {
              *a5 = v12;
            }
            return result;
          }

          *(void *)(a1 + 280) += v22;
        }

        else if (kdebug_write_events(v15, v6))
        {
          goto LABEL_25;
        }

        __uint64_t v16 = clock_gettime_nsec_np(_CLOCK_MONOTONIC_RAW);
        v6 -= (v16 - v14) / 0xF4240;
        __uint64_t v14 = v16;
        if (v6 <= 0) {
          goto LABEL_25;
        }
      }
    }

    return *__error();
  }

  int v21 = *__error();
  ktrace_log_init();
  if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR)) {
    ktrace_file_append_live_ktrace_cold_3();
  }
  *__error() = v21;
  return 22LL;
}

uint64_t ktrace_file_append_live_ktrace_transformed( uint64_t a1, unint64_t a2, unsigned int a3, unsigned int a4, void *a5, uint64_t a6)
{
  uint64_t v49 = *MEMORY[0x1895F89C0];
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  if (!*(_BYTE *)(a1 + 296))
  {
    *__error() = 22;
    int v12 = *__error();
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR)) {
      ktrace_file_append_live_ktrace_cold_3();
    }
    goto LABEL_35;
  }

  bzero(v48, 0x388uLL);
  if (a4 <= 1 && !a6)
  {
    *__error() = 22;
    int v12 = *__error();
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR)) {
      ktrace_file_append_live_ktrace_transformed_cold_8();
    }
LABEL_35:
    *__error() = v12;
    return *__error();
  }

  if (a4 < 2)
  {
    int v38 = 0LL;
  }

  else
  {
    int v38 = v48;
    ktrace_compressor_init(v48, a4);
  }

  uint64_t v43 = 0LL;
  __int16 v40 = calloc(1uLL, 0x400000uLL);
  if (!v40)
  {
    int v12 = *__error();
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR)) {
      ktrace_file_append_live_ktrace_transformed_cold_3();
    }
    goto LABEL_35;
  }

  __int16 v39 = (UInt8 *)calloc(1uLL, 0x400000uLL);
  if (!v39)
  {
    uint64_t v20 = *__error();
    int v26 = *__error();
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR)) {
      ktrace_file_append_live_ktrace_transformed_cold_4();
    }
    int v16 = 0;
    *__error() = v26;
    goto LABEL_52;
  }

  uint64_t v37 = a6;
  unsigned int v34 = a4;
  int v35 = a5;
  unint64_t v13 = 1000000LL * a3;
  ktrace_log_init();
  if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_DEBUG)) {
    ktrace_file_append_live_ktrace_transformed_cold_7();
  }
  uint64_t v14 = mach_absolute_time();
  unint64_t v15 = ktrace_current_timebase();
  int v16 = 0;
  unint64_t v17 = HIDWORD(v15);
  uint64_t v18 = v15;
  uint64_t v36 = v14 + v13 / v15 * HIDWORD(v15);
  while (1)
  {
    size_t v42 = 0x400000LL;
    if (v13) {
      uint64_t v19 = kdebug_wait_and_read_events(v40, &v42, v13 / 0xF4240);
    }
    else {
      uint64_t v19 = kdebug_read_events(v40, &v42);
    }
    uint64_t v20 = v19;
    if ((_DWORD)v19)
    {
      *__error() = v19;
      int v27 = *__error();
      ktrace_log_init();
      if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR)) {
        ktrace_file_append_live_ktrace_transformed_cold_6();
      }
      goto LABEL_46;
    }

    if (!v42) {
      break;
    }
    unint64_t v21 = tracepoint_timestamp((uint64_t)v40 + v42 - 64, 1);
    unint64_t v22 = v21;
    if (!a2 || v43 || v21 >= a2)
    {
      uint64_t v41 = 0LL;
      uint64_t appended = append_transformed_events_internal(a1, &v43, (uint64_t)v40, v42, v39, 1, &v41, (uint64_t)v38, v37);
      if ((_DWORD)appended)
      {
        uint64_t v20 = appended;
        *__error() = appended;
        int v27 = *__error();
        ktrace_log_init();
        if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR)) {
          ktrace_file_append_live_ktrace_transformed_cold_5();
        }
LABEL_46:
        *__error() = v27;
        goto LABEL_51;
      }

      v16 += v41;
      if (v22 > v36)
      {
        ktrace_log_init();
        uint64_t v32 = ktrace_file_log;
        if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 134218240;
          uint64_t v45 = v36;
          __int16 v46 = 2048;
          unint64_t v47 = v22;
          off_t v29 = "ending transformed append: cutoff timestamp was %llu, newest event is %llu\n";
          __int16 v30 = (os_log_s *)v32;
          uint32_t v31 = 22;
LABEL_49:
          _os_log_impl(&dword_186BA3000, v30, OS_LOG_TYPE_INFO, v29, buf, v31);
        }

        goto LABEL_50;
      }
    }

    if (a3)
    {
LABEL_31:
      uint64_t v24 = mach_absolute_time();
      v13 -= (v24 - v14) * v18 / v17;
      uint64_t v14 = v24;
      if ((v13 & 0x8000000000000000LL) != 0) {
        goto LABEL_50;
      }
    }

    else if ((v13 & 0x8000000000000000LL) != 0)
    {
      goto LABEL_50;
    }
  }

  if (a3) {
    goto LABEL_31;
  }
  ktrace_log_init();
  uint64_t v28 = ktrace_file_log;
  if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    off_t v29 = "ending transformed append: no more events";
    __int16 v30 = (os_log_s *)v28;
    uint32_t v31 = 2;
    goto LABEL_49;
  }

uint64_t ktrace_file_append_live_filtered_ktrace( uint64_t a1, unsigned int a2, unsigned int a3, void *a4, uint64_t a5)
{
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  if (a3 < 5) {
    return ktrace_file_append_live_ktrace_transformed(a1, 0LL, a2, a3, a4, a5);
  }
  int v5 = *__error();
  ktrace_log_init();
  if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR)) {
    ktrace_file_append_live_filtered_ktrace_cold_2();
  }
  *__error() = v5;
  return 22LL;
}

void *ktrace_file_compress(uint64_t a1, unsigned int a2)
{
  uint64_t v36 = *MEMORY[0x1895F89C0];
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  if (a2 <= 1 || *(_DWORD *)(a1 + 20) != 4)
  {
    fd = 0LL;
    *__error() = 45;
    return fd;
  }

  bzero(__old, 0x400uLL);
  bzero(__new, 0x400uLL);
  int v4 = *(_DWORD *)(a1 + 196);
  if (v4 != -1)
  {
    if (fcntl(v4, 50, __new) < 0)
    {
      int v17 = *__error();
      ktrace_log_init();
      if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR)) {
        ktrace_file_compress_cold_3();
      }
    }

    else
    {
      __sprintf_chk(__old, 0, 0x400uLL, "%s.XXXXXX", __new);
      int v5 = mkstemp(__old);
      if (v5 < 0)
      {
        int v17 = *__error();
        ktrace_log_init();
        if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR)) {
          ktrace_file_compress_cold_4();
        }
      }

      else
      {
        int v6 = v5;
        if ((fcopyfile(v4, v5, 0LL, 7u) & 0x80000000) == 0)
        {
          fd = ktrace_file_create_fd(a1, v6);
          goto LABEL_12;
        }

        int v19 = *__error();
        ktrace_log_init();
        if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR)) {
          ktrace_file_compress_cold_5();
        }
        *__error() = v19;
        int v17 = *__error();
        close(v6);
      }
    }

    fd = 0LL;
    *__error() = v17;
    return fd;
  }

  fd = ktrace_file_create_memory(a1, *(void *)(a1 + 256), *(void *)(a1 + 264));
  int v6 = -1;
LABEL_12:
  if (fd)
  {
    uint64_t v24 = 0LL;
    __int128 v25 = &v24;
    uint64_t v26 = 0x2000000000LL;
    int v27 = 0;
    int v9 = malloc(0x400000uLL);
    if (v9)
    {
      unint64_t v15 = v9;
      v22[0] = MEMORY[0x1895F87A8];
      v22[1] = 0x40000000LL;
      _DWORD v22[2] = __ktrace_file_compress_block_invoke;
      v22[3] = &unk_189F55090;
      v22[5] = fd;
      v22[6] = v9;
      unsigned int v23 = a2;
      v22[4] = &v24;
      int v16 = ktrace_file_iterate(a1, 0LL, (uint64_t)v22, v10, v11, v12, v13, v14);
      if (v16)
      {
        *((_DWORD *)v25 + 6) = v16;
      }

      else if (!*((_DWORD *)v25 + 6) && (*(_DWORD *)(a1 + 196) & 0x80000000) == 0 && rename(__old, __new) < 0)
      {
        *((_DWORD *)v25 + 6) = *__error();
        int v20 = *__error();
        ktrace_log_init();
        unint64_t v21 = (os_log_s *)ktrace_file_log;
        if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315650;
          off_t v29 = __old;
          __int16 v30 = 2080;
          uint32_t v31 = __new;
          __int16 v32 = 1024;
          int v33 = v20;
          _os_log_error_impl( &dword_186BA3000,  v21,  OS_LOG_TYPE_ERROR,  "failed to rename %s to %s (%{errno}d)",  buf,  0x1Cu);
        }

        *__error() = v20;
      }

      free(v15);
      if (!*((_DWORD *)v25 + 6))
      {
        ktrace_file_close((void *)a1);
        goto LABEL_33;
      }

      if ((v6 & 0x80000000) == 0) {
        unlink(__old);
      }
      ktrace_file_close(fd);
      int v18 = *((_DWORD *)v25 + 6);
    }

    else
    {
      int v18 = *__error();
      ktrace_log_init();
      if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR)) {
        ktrace_file_compress_cold_2();
      }
    }

    fd = 0LL;
    *__error() = v18;
LABEL_33:
    _Block_object_dispose(&v24, 8);
  }

  return fd;
}

uint64_t __ktrace_file_compress_block_invoke(uint64_t a1, uint64_t *a2)
{
  if (ktrace_chunk_tag((uint64_t)a2) == 7680)
  {
    if ((unint64_t)ktrace_chunk_size((uint64_t)a2) >= 9
      && !append_transformed_events(*(void *)(a1 + 40), a2, *(UInt8 **)(a1 + 48), *(_DWORD *)(a1 + 56), 0LL))
    {
      goto LABEL_4;
    }
  }

  else if (!ktrace_file_append(*(void *)(a1 + 40), a2))
  {
LABEL_4:
    int v4 = __error();
    uint64_t result = 0LL;
    *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = *v4;
    return result;
  }

  return 1LL;
}

uint64_t append_transformed_events(uint64_t a1, uint64_t *a2, UInt8 *a3, unsigned int a4, uint64_t a5)
{
  uint64_t v26 = *MEMORY[0x1895F89C0];
  unint64_t v10 = ktrace_chunk_size((uint64_t)a2);
  unint64_t v11 = v10 - 8;
  if (v10 > 8)
  {
    uint64_t v14 = v10;
    unint64_t v15 = ktrace_chunk_map_data(a2, 0LL, v10);
    if (v15)
    {
      unint64_t v16 = (unint64_t)v15;
      bzero(v25, 0x388uLL);
      ktrace_compressor_init(v25, a4);
      uint64_t v23 = 0LL;
      uint64_t v24 = 0LL;
      int is_64_bit = ktrace_file_is_64_bit(a1);
      if (a4 <= 1) {
        int v18 = 0LL;
      }
      else {
        int v18 = v25;
      }
      int appended = append_transformed_events_internal(a1, &v24, v16 + 8, v11, a3, is_64_bit, &v23, (uint64_t)v18, a5);
      if (appended || (int appended = finish_events_chunk(a1, v24, 1, v23)) != 0) {
        *__error() = appended;
      }
      int v20 = *__error();
      ktrace_chunk_unmap_data((uint64_t)a2, v16, v14);
      *__error() = v20;
      return v24;
    }

    else
    {
      int v21 = *__error();
      ktrace_log_init();
      if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR)) {
        append_transformed_events_cold_1();
      }
      unint64_t v22 = __error();
      uint64_t result = 0LL;
      *unint64_t v22 = v21;
    }
  }

  else
  {
    uint64_t v12 = __error();
    uint64_t result = 0LL;
    *uint64_t v12 = 22;
  }

  return result;
}

uint64_t ktrace_file_append_filtered_kdebug_events(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  if (!a2) {
    ktrace_remotetime_update_params_cold_1();
  }
  int v6 = ktrace_chunk_tag((uint64_t)a2);
  if (v6 == 7680)
  {
    int v9 = (UInt8 *)malloc(0x400000uLL);
    if (!v9) {
      return 0LL;
    }
    unint64_t v10 = v9;
    uint64_t appended = append_transformed_events(a1, a2, v9, 1u, a3);
    int v7 = *__error();
    free(v10);
  }

  else
  {
    if (v6 == 7936) {
      int v7 = 45;
    }
    else {
      int v7 = 22;
    }
    uint64_t appended = 0LL;
  }

  *__error() = v7;
  return appended;
}

uint64_t ktrace_capture_live_stackshot()
{
  uint64_t v0 = stackshot_config_create();
  if (!v0)
  {
    *__error() = 12;
    int v3 = *__error();
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
      ktrace_capture_live_stackshot_cold_1();
    }
    goto LABEL_10;
  }

  uint64_t v1 = v0;
  int v2 = stackshot_config_set_flags();
  if (v2)
  {
    int v3 = v2;
    stackshot_config_dealloc();
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
      ktrace_capture_live_stackshot_cold_3();
    }
LABEL_10:
    uint64_t v1 = 0LL;
    *__error() = v3;
    return v1;
  }

  int v4 = stackshot_capture_with_config();
  if (v4)
  {
    int v5 = v4;
    stackshot_config_dealloc();
    *__error() = v5;
    int v3 = *__error();
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
      ktrace_capture_live_stackshot_cold_2();
    }
    goto LABEL_10;
  }

  return v1;
}

void *ktrace_file_append_stackshot(uint64_t a1, uint64_t a2)
{
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  if (!a2) {
    ktrace_remotetime_update_params_cold_1();
  }
  uint64_t appended = ktrace_file_append_start(a1, 32770, 1, 0);
  if (appended)
  {
    stackshot_buffer = (UInt8 *)stackshot_config_get_stackshot_buffer();
    unsigned int stackshot_size = stackshot_config_get_stackshot_size();
    int v6 = ktrace_file_append_data(a1, (uint64_t)appended, stackshot_buffer, stackshot_size);
    if (v6 || (int v6 = ktrace_file_append_finish(a1, (uint64_t)appended)) != 0)
    {
      uint64_t appended = 0LL;
      *__error() = v6;
    }
  }

  return appended;
}

uint64_t ktrace_file_append_live_stackshot(uint64_t a1)
{
  return ktrace_file_append_live_stackshot_internal(a1);
}

uint64_t ktrace_file_append_live_stackshot_internal(uint64_t a1)
{
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  uint64_t result = ktrace_capture_live_stackshot();
  if (result)
  {
    uint64_t appended = ktrace_file_append_stackshot(a1, result);
    stackshot_config_dealloc();
    return (uint64_t)appended;
  }

  return result;
}

uint64_t ktrace_file_walltime_offset( uint64_t a1, void *a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  if (!a2) {
    ktrace_remotetime_update_params_cold_1();
  }
  if (*(_DWORD *)(a1 + 20) != 5)
  {
    *a2 = *(void *)(a1 + 160);
    if (a3)
    {
      uint64_t v11 = *(void *)(a1 + 168);
      if (!v11) {
        return 79LL;
      }
      *(void *)a3 = v11;
      *(_DWORD *)(a3 + _Block_object_dispose(va, 8) = *(_DWORD *)(a1 + 176);
    }

    if (a4)
    {
      if (*(_BYTE *)(a1 + 297))
      {
        uint64_t v10 = 0LL;
        *a4 = *(void *)(a1 + 180);
        return v10;
      }

      ktrace_log_init();
      if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_DEBUG)) {
        ktrace_file_walltime_offset_cold_3();
      }
      if (gettimeofday(0LL, a4)) {
        return *__error();
      }
    }

    return 0LL;
  }

  uint64_t v18 = 0LL;
  int v19 = &v18;
  uint64_t v20 = 0x2000000000LL;
  int v21 = 0;
  uint64_t v14 = 0LL;
  unint64_t v15 = &v14;
  uint64_t v16 = 0x2000000000LL;
  char v17 = 0;
  v13[0] = MEMORY[0x1895F87A8];
  v13[1] = 0x40000000LL;
  v13[2] = __ktrace_file_walltime_offset_block_invoke;
  v13[3] = &unk_189F550B8;
  v13[6] = a2;
  v13[7] = a3;
  v13[8] = a4;
  v13[4] = &v14;
  v13[5] = &v18;
  int v9 = ktrace_file_iterate(a1, 0LL, (uint64_t)v13, (uint64_t)a4, a5, a6, a7, a8);
  if (*((_BYTE *)v15 + 24))
  {
    if (v9) {
      uint64_t v10 = 1LL;
    }
    else {
      uint64_t v10 = *((_DWORD *)v19 + 6) != 0;
    }
  }

  else
  {
    uint64_t v10 = 79LL;
  }

  _Block_object_dispose(&v14, 8);
  _Block_object_dispose(&v18, 8);
  return v10;
}

BOOL __ktrace_file_walltime_offset_block_invoke(uint64_t a1, uint64_t a2)
{
  v8[0] = 0LL;
  v8[1] = 0LL;
  if (*(void *)(a1 + 56)) {
    int v3 = v8;
  }
  else {
    int v3 = 0LL;
  }
  *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = ktariadne_read_times( a2,  *(void **)(a1 + 48),  0LL,  v3,  *(_DWORD **)(a1 + 64),  (_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8LL)
                                                                          + 24LL));
  if (!*(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL)) {
    return 1LL;
  }
  int v4 = *(void **)(a1 + 56);
  if (!v4) {
    return 0LL;
  }
  timespec_to_timeval();
  void *v4 = v5;
  v4[1] = v6;
  return *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) == 0;
}

uint64_t ktrace_file_machtime_to_walltime( uint64_t a1, void *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  if (!a2) {
    ktrace_remotetime_update_params_cold_1();
  }
  uint64_t result = ktrace_file_walltime_offset(a1, &v29, (uint64_t)&v28, 0LL, a5, a6, a7, a8);
  if (!(_DWORD)result)
  {
    unsigned int v12 = *(_DWORD *)(a1 + 192);
    if (v12)
    {
      v27[0] = *(_DWORD *)(a1 + 188);
      v27[1] = v12;
      timeval_to_timespec();
      uint64_t v14 = v13;
      uint64_t v16 = v15;
      unint64_t v17 = machtime_to_timespec(v27, v29);
      uint64_t v19 = timespec_subtract(v14, v16, v17, v18);
      uint64_t v21 = v20;
      unint64_t v22 = machtime_to_timespec(v27, a3);
      timespec_add(v22, v23, v19, v21);
      timespec_to_timeval();
      uint64_t v25 = v24;
      uint64_t result = 0LL;
      *a2 = v25;
      a2[1] = v26;
    }

    else
    {
      return 79LL;
    }
  }

  return result;
}

uint64_t ktrace_file_timebase(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  if (!a2) {
    ktrace_remotetime_update_params_cold_1();
  }
  if (!a3) {
    ktrace_remotetime_update_params_cold_1();
  }
  if (!*(_DWORD *)(a1 + 192)) {
    return 79LL;
  }
  uint64_t v3 = 0LL;
  *a2 = *(_DWORD *)(a1 + 188);
  *a3 = *(_DWORD *)(a1 + 192);
  return v3;
}

uint64_t ktrace_file_earliest_walltime( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a2) {
    ktrace_remotetime_update_params_cold_1();
  }
  *(void *)a2 = 0LL;
  *(_DWORD *)(a2 + _Block_object_dispose(va, 8) = 0;
  uint64_t result = ktrace_file_earliest_timestamp(a1, &v16, a3, a4, a5, a6, a7, a8);
  if (!(_DWORD)result) {
    return ktrace_file_machtime_to_walltime(a1, (void *)a2, v16, v11, v12, v13, v14, v15);
  }
  return result;
}

uint64_t ktrace_file_earliest_timestamp( uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  if (!a2) {
    ktrace_remotetime_update_params_cold_1();
  }
  uint64_t v25 = 0LL;
  uint64_t v26 = &v25;
  uint64_t v27 = 0x2000000000LL;
  int v28 = 0;
  uint64_t v21 = 0LL;
  unint64_t v22 = &v21;
  uint64_t v23 = 0x2000000000LL;
  char v24 = 0;
  uint64_t v17 = 0LL;
  uint64_t v18 = &v17;
  uint64_t v19 = 0x2000000000LL;
  uint64_t v20 = 0LL;
  v16[0] = MEMORY[0x1895F87A8];
  v16[1] = 0x40000000LL;
  v16[2] = __ktrace_file_earliest_timestamp_block_invoke;
  v16[3] = &unk_189F550E0;
  v16[4] = &v25;
  v16[5] = &v17;
  v16[6] = &v21;
  v16[7] = a1;
  uint64_t v9 = ktrace_file_iterate(a1, 0LL, (uint64_t)v16, a4, a5, a6, a7, a8);
  if ((_DWORD)v9)
  {
    uint64_t v10 = v9;
    *__error() = v9;
    int v11 = *__error();
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR)) {
      ktrace_file_earliest_timestamp_cold_5();
    }
    *__error() = v11;
  }

  else
  {
    int v12 = *((_DWORD *)v26 + 6);
    if (v12)
    {
      *__error() = v12;
      int v13 = *__error();
      ktrace_log_init();
      if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR)) {
        ktrace_file_earliest_timestamp_cold_4();
      }
      *__error() = v13;
      uint64_t v10 = *((unsigned int *)v26 + 6);
    }

    else if (*((_BYTE *)v22 + 24))
    {
      uint64_t v10 = 0LL;
      *a2 = v18[3];
    }

    else
    {
      *__error() = 22;
      int v14 = *__error();
      ktrace_log_init();
      if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR)) {
        ktrace_file_earliest_timestamp_cold_3();
      }
      *__error() = v14;
      uint64_t v10 = 22LL;
    }
  }

  _Block_object_dispose(&v17, 8);
  _Block_object_dispose(&v21, 8);
  _Block_object_dispose(&v25, 8);
  return v10;
}

uint64_t __ktrace_file_earliest_timestamp_block_invoke(void *a1, uint64_t *a2)
{
  uint64_t v18 = *MEMORY[0x1895F89C0];
  int v4 = ktrace_chunk_tag((uint64_t)a2);
  int v5 = v4;
  if (v4 != 7680 && v4 != 20982 && v4 != 7936 || !ktrace_stream_estimate_events(a2)) {
    return 1LL;
  }
  int is_64_bit = ktrace_file_is_64_bit(a1[7]);
  memset(v15, 0, sizeof(v15));
  if (is_64_bit) {
    size_t v7 = 64LL;
  }
  else {
    size_t v7 = 32LL;
  }
  if (v5 == 20982)
  {
    memset(v16, 0, 48);
    *(_DWORD *)(*(void *)(a1[4] + 8LL) + 24LL) = ktrace_chunk_copy_data(a2, 0LL, v16, 0x30uLL);
    uint64_t v11 = *(void *)&v16[0] & 0xFFFFFFFFFFFFFFLL;
    goto LABEL_18;
  }

  int v8 = is_64_bit;
  if (v5 == 7936)
  {
    size_t v12 = (unint64_t)(ktrace_chunk_size((uint64_t)a2) - 77) >= 0xFFFFFFFFFFFFFFBFLL
        ? ktrace_chunk_size((uint64_t)a2) - 12
        : 64LL;
    *(_DWORD *)(*(void *)(a1[4] + 8LL) + 24LL) = ktrace_chunk_copy_data(a2, 12LL, v17, v12);
    if (*(_DWORD *)(*(void *)(a1[4] + 8LL) + 24LL)) {
      return 1LL;
    }
    bzero(v16, 0x388uLL);
    ktrace_compressor_reset(v16);
    int v13 = decompress_32;
    if (v8) {
      int v13 = decompress_64;
    }
    uint64_t v14 = 64LL;
    if (v13((unsigned int *)v16, (uint64_t)v17, (unint64_t *)&v14, (uint64_t)v15, v7) != v7)
    {
      *(_DWORD *)(*(void *)(a1[4] + 8LL) + 24LL) = 79;
      return 1LL;
    }

    uint64_t v11 = *(void *)&v15[0];
    if (!v8) {
      uint64_t v11 = *(void *)&v15[0] & 0xFFFFFFFFFFFFFFLL;
    }
LABEL_18:
    *(void *)(*(void *)(a1[5] + 8LL) + 24LL) = v11;
    *(_BYTE *)(*(void *)(a1[6] + 8LL) + 24LL) = 1;
    return 0LL;
  }

  if (v5 != 7680) {
    return 0LL;
  }
  if (ktrace_chunk_size((uint64_t)a2) >= (v7 | 8))
  {
    *(_DWORD *)(*(void *)(a1[4] + 8LL) + 24LL) = ktrace_chunk_copy_data(a2, 8LL, v15, v7);
    uint64_t result = 1LL;
    if (*(_DWORD *)(*(void *)(a1[4] + 8LL) + 24LL)) {
      return result;
    }
    uint64_t v10 = *(void *)&v15[0];
    if (!v8) {
      uint64_t v10 = *(void *)&v15[0] & 0xFFFFFFFFFFFFFFLL;
    }
    *(void *)(*(void *)(a1[5] + 8LL) + 24LL) = v10;
    *(_BYTE *)(*(void *)(a1[6] + 8LL) + 24LL) = 1;
    return 0LL;
  }

  return 1LL;
}

uint64_t ktrace_file_is_64_bit(uint64_t a1)
{
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  return *(unsigned __int8 *)(a1 + 298);
}

uint64_t ktrace_file_latest_timestamp( uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  if (!a2) {
    ktrace_remotetime_update_params_cold_1();
  }
  uint64_t v33 = 0LL;
  unsigned int v34 = &v33;
  uint64_t v35 = 0x2000000000LL;
  uint64_t v36 = 0LL;
  uint64_t v29 = 0LL;
  __int16 v30 = &v29;
  uint64_t v31 = 0x2000000000LL;
  uint64_t v32 = 0LL;
  uint64_t v25 = 0LL;
  uint64_t v26 = &v25;
  uint64_t v27 = 0x2000000000LL;
  int v28 = 0;
  uint64_t v10 = MEMORY[0x1895F87A8];
  v24[0] = MEMORY[0x1895F87A8];
  v24[1] = 0x40000000LL;
  v24[2] = __ktrace_file_latest_timestamp_block_invoke;
  v24[3] = &unk_189F55108;
  v24[4] = &v33;
  void v24[5] = &v25;
  v24[6] = &v29;
  uint64_t v11 = ktrace_file_iterate(a1, 0LL, (uint64_t)v24, a4, a5, a6, a7, a8);
  int v12 = v11;
  if ((_DWORD)v11 || (int v12 = *((_DWORD *)v26 + 6)) != 0)
  {
    *__error() = v12;
    int v13 = *__error();
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR)) {
      ktrace_file_latest_timestamp_cold_3();
    }
    *__error() = v13;
    if (!(_DWORD)v11) {
LABEL_8:
    }
      uint64_t v11 = *((unsigned int *)v26 + 6);
  }

  else
  {
    uint64_t v14 = v30[3];
    if (v14)
    {
      uint64_t v11 = 0LL;
      *a2 = v14;
      goto LABEL_11;
    }

    if (!v34[3])
    {
      uint64_t v11 = 45LL;
      goto LABEL_11;
    }

    uint64_t v16 = ktrace_stream_create(0, *(_BYTE *)(a1 + 298), 1);
    if (!v16)
    {
      uint64_t v11 = *__error();
      goto LABEL_11;
    }

    uint64_t v17 = (void *)v16;
    uint64_t v11 = ktrace_stream_add(v16, v34[3]);
    if (!(_DWORD)v11)
    {
      if (ktrace_chunk_tag(v34[3]) == 7936)
      {
        uint64_t v18 = dispatch_queue_attr_make_with_autorelease_frequency(0LL, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
        uint64_t v19 = dispatch_queue_create("com.apple.ktrace.latest_timestamp", v18);
        uint64_t v20 = dispatch_group_create();
        v23[0] = v10;
        v23[1] = 0x40000000LL;
        void v23[2] = __ktrace_file_latest_timestamp_block_invoke_5;
        void v23[3] = &unk_189F55158;
        v23[4] = &v29;
        v23[5] = a1;
        uint64_t v11 = ktrace_stream_iterate_group((uint64_t)v17, 0x400000uLL, v19, v20, (uint64_t)v23);
        dispatch_group_wait(v20, 0xFFFFFFFFFFFFFFFFLL);
        dispatch_release(v19);
      }

      else
      {
        end_io_iterator_t iterator = ktrace_stream_create_end_iterator(v17);
        if (end_iterator)
        {
          ktrace_iter_get_event((uint64_t)end_iterator, (uint64_t)v22);
          uint64_t v11 = 0LL;
          v30[3] = v22[0];
        }

        else
        {
          uint64_t v11 = *__error();
        }
      }

      ktrace_stream_destroy(v17);
      *a2 = v30[3];
      if (!(_DWORD)v11) {
        goto LABEL_8;
      }
    }
  }

uint64_t __ktrace_file_latest_timestamp_block_invoke(void *a1, uint64_t *a2)
{
  if ((ktrace_chunk_tag((uint64_t)a2) == 7680
     || ktrace_chunk_tag((uint64_t)a2) == 7936
     || ktrace_chunk_tag((uint64_t)a2) == 20982)
    && ktrace_stream_estimate_events(a2))
  {
    *(void *)(*(void *)(a1[4] + 8LL) + 24LL) = a2;
  }

  if (ktrace_chunk_tag((uint64_t)a2) == 32775
    && !ktrace_chunk_version_major((uint64_t)a2)
    && (unint64_t)ktrace_chunk_size((uint64_t)a2) >= 8)
  {
    *(_DWORD *)(*(void *)(a1[5] + 8LL) + 24LL) = ktrace_chunk_copy_data(a2, 0LL, &v5, 8uLL);
    if (!*(_DWORD *)(*(void *)(a1[5] + 8LL) + 24LL)) {
      *(void *)(*(void *)(a1[6] + 8LL) + 24LL) = v5;
    }
  }

  return 1LL;
}

BOOL __ktrace_file_latest_timestamp_block_invoke_5(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v5 = *(void *)(a1 + 32);
  uint64_t v4 = *(void *)(a1 + 40);
  int v6 = *(unsigned __int8 *)(v4 + 298);
  v8[0] = MEMORY[0x1895F87A8];
  v8[1] = 0x40000000LL;
  void v8[2] = __ktrace_file_latest_timestamp_block_invoke_2;
  v8[3] = &unk_189F55130;
  _DWORD v8[4] = v5;
  v8[5] = v4;
  return trace_enumerate(a2, a3, v6, (uint64_t)v8);
}

uint64_t __ktrace_file_latest_timestamp_block_invoke_2(uint64_t a1, uint64_t a2)
{
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = tracepoint_timestamp( a2,  *(unsigned __int8 *)(*(void *)(a1 + 40) + 298LL));
  return 0LL;
}

uint64_t ktrace_file_earliest_continuous_time(uint64_t a1, uint64_t *a2)
{
  uint64_t v14 = 0LL;
  memset(v13, 0, sizeof(v13));
  uint64_t v10 = kttimesync_init((uint64_t)v13, a1, 0);
  if (!(_DWORD)v10)
  {
    uint64_t v12 = 0LL;
    uint64_t v10 = ktrace_file_earliest_timestamp(a1, &v12, v4, v5, v6, v7, v8, v9);
    if (!(_DWORD)v10) {
      *a2 = kttimesync_cont_from_timestamp((uint64_t)v13, v12);
    }
  }

  return v10;
}

uint64_t ktrace_file_latest_continuous_time(uint64_t a1, uint64_t *a2)
{
  uint64_t v14 = 0LL;
  memset(v13, 0, sizeof(v13));
  uint64_t v10 = kttimesync_init((uint64_t)v13, a1, 0);
  if (!(_DWORD)v10)
  {
    uint64_t v12 = 0LL;
    uint64_t v10 = ktrace_file_latest_timestamp(a1, &v12, v4, v5, v6, v7, v8, v9);
    if (!(_DWORD)v10) {
      *a2 = kttimesync_cont_from_timestamp((uint64_t)v13, v12);
    }
  }

  return v10;
}

uint64_t ktrace_file_latest_walltime( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a2) {
    ktrace_remotetime_update_params_cold_1();
  }
  *(void *)a2 = 0LL;
  *(_DWORD *)(a2 + _Block_object_dispose(va, 8) = 0;
  unint64_t v16 = 0LL;
  uint64_t result = ktrace_file_latest_timestamp(a1, &v16, a3, a4, a5, a6, a7, a8);
  if (!(_DWORD)result) {
    return ktrace_file_machtime_to_walltime(a1, (void *)a2, v16, v11, v12, v13, v14, v15);
  }
  return result;
}

uint64_t ktrace_file_supports_continuous_time(uint64_t a1)
{
  uint64_t v4 = 0LL;
  memset(v3, 0, sizeof(v3));
  int v1 = kttimesync_init((uint64_t)v3, a1, 0);
  uint64_t result = 0LL;
  if (!v1) {
    return kttimesync_can_convert_continuous((uint64_t)v3);
  }
  return result;
}

uint64_t ktrace_file_uuid( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v16 = 0LL;
  uint64_t v17 = &v16;
  uint64_t v18 = 0x2000000000LL;
  char v19 = 0;
  uint64_t v12 = 0LL;
  uint64_t v13 = &v12;
  uint64_t v14 = 0x2000000000LL;
  int v15 = 0;
  v11[0] = MEMORY[0x1895F87A8];
  v11[1] = 0x40000000LL;
  v11[2] = __ktrace_file_uuid_block_invoke;
  v11[3] = &unk_189F55180;
  v11[5] = &v16;
  void v11[6] = a2;
  v11[4] = &v12;
  int v8 = ktrace_file_header_iterate(a1, 0LL, (uint64_t)v11, a4, a5, a6, a7, a8);
  if (*((_BYTE *)v17 + 24))
  {
    if (v8) {
      uint64_t v9 = 1LL;
    }
    else {
      uint64_t v9 = *((_DWORD *)v13 + 6) != 0;
    }
  }

  else
  {
    uint64_t v9 = 22LL;
  }

  _Block_object_dispose(&v12, 8);
  _Block_object_dispose(&v16, 8);
  return v9;
}

uint64_t __ktrace_file_uuid_block_invoke(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = 1LL;
  if (!ktrace_chunk_version_major((uint64_t)a2))
  {
    *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = ktrace_chunk_copy_data( a2,  0LL,  *(void **)(a1 + 48),  0x10uLL);
    *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = 1;
    return 0LL;
  }

  return v4;
}

uint64_t ktrace_file_ktrace_event_count( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  uint64_t v12 = 0LL;
  uint64_t v13 = &v12;
  uint64_t v14 = 0x2000000000LL;
  uint64_t v15 = 0LL;
  v11[0] = MEMORY[0x1895F87A8];
  v11[1] = 0x40000000LL;
  v11[2] = __ktrace_file_ktrace_event_count_block_invoke;
  v11[3] = &unk_189F551A8;
  v11[4] = &v12;
  int v8 = ktrace_file_iterate(a1, 0LL, (uint64_t)v11, a4, a5, a6, a7, a8);
  if (v8)
  {
    *__error() = v8;
    uint64_t v9 = -1LL;
  }

  else
  {
    uint64_t v9 = v13[3];
  }

  _Block_object_dispose(&v12, 8);
  return v9;
}

uint64_t __ktrace_file_ktrace_event_count_block_invoke(uint64_t a1, uint64_t *a2)
{
  int v4 = ktrace_chunk_tag((uint64_t)a2);
  if (v4 == 7680 || v4 == 20982 || v4 == 7936) {
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) += ktrace_stream_estimate_events(a2);
  }
  return 1LL;
}

uint64_t ktrace_file_write_header_system_default(uint64_t a1)
{
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  v18[0] = 0x155AA0300LL;
  v18[1] = 40LL;
  v18[2] = ktrace_current_timebase();
  v18[3] = mach_absolute_time();
  if (!gettimeofday(&v17, &v16))
  {
    v18[4] = v17.tv_sec;
    __darwin_suseconds_t tv_usec = v17.tv_usec;
    uint64_t v20 = v16;
    int v21 = 1;
    ktrace_file_write_header_internal(a1, (uint64_t)v18);
    uint64_t v2 = v3;
    if ((_DWORD)v3) {
      return v2;
    }
    *(_DWORD *)(a1 + 20) = 4;
    uint64_t current = ktrace_machine_create_current();
    if (!current) {
      return 0LL;
    }
    uint64_t v5 = current;
    CFErrorRef error = 0LL;
    uint64_t v6 = CFPropertyListCreateData( 0LL,  *(CFPropertyListRef *)(current + 216),  kCFPropertyListBinaryFormat_v1_0,  0LL,  &error);
    if (!v6)
    {
      CFErrorRef v11 = error;
      int v12 = *__error();
      ktrace_log_init();
      BOOL v13 = os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR);
      if (v11)
      {
        if (v13) {
          ktrace_file_write_header_system_default_cold_3();
        }
      }

      else if (v13)
      {
        ktrace_file_write_header_system_default_cold_2();
      }

      *__error() = v12;
      uint64_t v2 = 22LL;
      goto LABEL_24;
    }

    uint64_t v7 = v6;
    size_t Length = CFDataGetLength(v6);
    if (Length)
    {
      CFIndex v9 = Length;
      uint64_t v10 = (UInt8 *)malloc(Length);
      if (v10)
      {
        v23.location = 0LL;
        v23.length = v9;
        CFDataGetBytes(v7, v23, v10);
        if (ktrace_file_header_append_chunk(a1, 35840, 1, 6, v10, v9))
        {
          uint64_t v2 = 0LL;
LABEL_23:
          CFRelease(v7);
          free(v10);
LABEL_24:
          ktrace_machine_destroy(v5);
          return v2;
        }

        int v14 = *__error();
        ktrace_log_init();
        if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR)) {
          ktrace_file_write_header_system_default_cold_4();
        }
        *__error() = v14;
      }

      uint64_t v2 = *__error();
      goto LABEL_23;
    }

    uint64_t v10 = 0LL;
    uint64_t v2 = 22LL;
    goto LABEL_23;
  }

  return *__error();
}

double ktrace_file_write_header_internal(uint64_t a1, uint64_t a2)
{
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  if (!a2) {
    ktrace_remotetime_update_params_cold_1();
  }
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 176) = *(_DWORD *)(a2 + 40);
  *(void *)&__int128 v3 = *(void *)(a2 + 44);
  *((void *)&v3 + 1) = *(void *)(a2 + 16);
  *(_OWORD *)(a1 + 180) = v3;
  *(_BYTE *)(a1 + 29_Block_object_dispose(va, 8) = *(_BYTE *)(a2 + 52) & 1;
  if (*(_DWORD *)(a1 + 16) == 4)
  {
    uint64_t appended = ktrace_file_append_chunk(-1LL, 36863, 0, 0, (UInt8 *)a2, 56LL);
    if (!appended) {
      ktrace_remotetime_update_params_cold_1();
    }
    uint64_t v5 = appended;
    (*(void (**)(void))(*(void *)(a1 + 272) + 16LL))();
    ktrace_chunk_destroy(v5);
    goto LABEL_10;
  }

  if ((unint64_t)ktrace_file_write(a1, (const void *)a2, 0x38uLL, -1LL) > 0x37)
  {
LABEL_10:
    *(_BYTE *)(a1 + 297) = 1;
    *(_BYTE *)(a1 + 299) = 1;
    *(void *)(a1 + 28_Block_object_dispose(va, 8) = 56LL;
    *(void *)&double result = 16LL;
    *(_OWORD *)(a1 + 112) = xmmword_186C5D080;
    *(void *)(a1 + 12_Block_object_dispose(va, 8) = 56LL;
    return result;
  }

  int v6 = *__error();
  ktrace_log_init();
  if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR)) {
    ktrace_file_write_header_internal_cold_4();
  }
  *__error() = v6;
  __error();
  return result;
}

void *ktrace_file_create_iterator(uint64_t a1)
{
  uint64_t v2 = ktrace_stream_create(0, *(_BYTE *)(a1 + 298), 0);
  if (!v2) {
    return 0LL;
  }
  int v8 = (void *)v2;
  v12[0] = MEMORY[0x1895F87A8];
  v12[1] = 0x40000000LL;
  v12[2] = __ktrace_file_create_iterator_block_invoke;
  v12[3] = &__block_descriptor_tmp_12;
  v12[4] = v2;
  int v9 = ktrace_file_iterate(a1, 0LL, (uint64_t)v12, v3, v4, v5, v6, v7);
  io_iterator_t iterator = 0LL;
  if (!v9) {
    io_iterator_t iterator = ktrace_stream_create_iterator(v8);
  }
  ktrace_stream_destroy(v8);
  return iterator;
}

uint64_t __ktrace_file_create_iterator_block_invoke(uint64_t a1, uint64_t a2)
{
  return 1LL;
}

CFDictionaryRef ktrace_file_relationship_type(const __CFDictionary *result)
{
  if (result)
  {
    Value = (const __CFString *)CFDictionaryGetValue(result, @"type");
    return Value && CFStringCompare(Value, @"bridge", 0LL == kCFCompareEqualTo);
  }

  return result;
}

uint64_t ktrace_file_iterate_subfiles( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v17 = 0LL;
  uint64_t v18 = &v17;
  uint64_t v19 = 0x2000000000LL;
  int v20 = 0;
  uint64_t v13 = 0LL;
  int v14 = &v13;
  uint64_t v15 = 0x2000000000LL;
  int v16 = 0;
  v12[0] = MEMORY[0x1895F87A8];
  v12[1] = 0x40000000LL;
  v12[2] = __ktrace_file_iterate_subfiles_block_invoke;
  v12[3] = &unk_189F55218;
  v12[6] = &v17;
  v12[7] = a1;
  v12[4] = a2;
  void v12[5] = &v13;
  unsigned int v8 = ktrace_file_iterate(a1, 0LL, (uint64_t)v12, a4, a5, a6, a7, a8);
  *((_DWORD *)v14 + 6) = v8;
  unsigned int v9 = *((_DWORD *)v18 + 6);
  if (v9) {
    uint64_t v10 = v9;
  }
  else {
    uint64_t v10 = v8;
  }
  *((_DWORD *)v18 + 6) = v10;
  _Block_object_dispose(&v13, 8);
  _Block_object_dispose(&v17, 8);
  return v10;
}

uint64_t __ktrace_file_iterate_subfiles_block_invoke(void *a1, uint64_t *a2)
{
  if (ktrace_chunk_tag((uint64_t)a2) == 32778)
  {
    uint64_t v34 = 0LL;
    uint64_t v35 = &v34;
    uint64_t v36 = 0x2000000000LL;
    int v37 = -1;
    uint64_t v30 = 0LL;
    uint64_t v31 = &v30;
    uint64_t v32 = 0x2000000000LL;
    uint64_t v33 = 0LL;
    uint64_t v23 = 0LL;
    char v24 = &v23;
    uint64_t v25 = 0x5000000000LL;
    __int128 v26 = 0u;
    __int128 v27 = 0u;
    __int128 v28 = 0u;
    uint64_t v29 = 0LL;
    uint64_t v19 = 0LL;
    int v20 = &v19;
    uint64_t v21 = 0x2000000000LL;
    char v22 = 0;
    v18[0] = MEMORY[0x1895F87A8];
    v18[1] = 0x40000000LL;
    v18[2] = __ktrace_file_iterate_subfiles_block_invoke_2;
    v18[3] = &unk_189F551F0;
    v18[4] = a1[6];
    void v18[5] = &v34;
    v18[6] = &v19;
    v18[7] = &v23;
    v18[8] = &v30;
    *(_DWORD *)(*(void *)(a1[5] + 8LL) + 24LL) = ktrace_chunk_iterate_subchunks(a2, 0LL, (uint64_t)v18);
    uint64_t v4 = *(void *)(a1[6] + 8LL);
    int v5 = *(_DWORD *)(v4 + 24);
    if (!v5) {
      int v5 = *(_DWORD *)(*(void *)(a1[5] + 8LL) + 24LL);
    }
    *(_DWORD *)(v4 + 24) = v5;
    if (*(_DWORD *)(*(void *)(a1[6] + 8LL) + 24LL)) {
      goto LABEL_5;
    }
    if (*((_BYTE *)v20 + 24))
    {
      unsigned int v7 = *((_DWORD *)v35 + 6);
      if (v7 != -1)
      {
        if (*((_WORD *)v24 + 14) == 1)
        {
          unsigned int v8 = *(const __CFDictionary **)(a1[7] + 208LL);
          if (!v8)
          {
            *(void *)(a1[7] + 208LL) = CFDictionaryCreateMutable(0LL, 1LL, &long_key_callbacks, MEMORY[0x189605250]);
            unsigned int v8 = *(const __CFDictionary **)(a1[7] + 208LL);
            if (!v8) {
              ktrace_remotetime_update_params_cold_1();
            }
            unsigned int v7 = *((_DWORD *)v35 + 6);
          }

          Value = CFDictionaryGetValue(v8, (const void *)v7);
          if (!Value)
          {
            ktrace_file_alloc();
            Value = (void *)v10;
            *(_DWORD *)(v10 + 196) = -1;
            *(_DWORD *)(v10 + 16) = 3;
            *(void *)(v10 + 200) = a1[7];
            CFErrorRef v11 = v35;
            *(_DWORD *)(v10 + 216) = *((_DWORD *)v35 + 6);
            int v12 = v24;
            *(_BYTE *)(v10 + 29_Block_object_dispose(va, 8) = *((_BYTE *)v24 + 76) & 1;
            *(void *)(v10 + 160) = v12[6];
            *(void *)&__int128 v13 = *(uint64_t *)((char *)v12 + 68);
            *((void *)&v13 + 1) = v12[5];
            *(_OWORD *)(v10 + 180) = v13;
            *(_BYTE *)(v10 + 297) = 1;
            CFDictionarySetValue( *(CFMutableDictionaryRef *)(a1[7] + 208LL),  (const void *)*((unsigned int *)v11 + 6),  (const void *)v10);
            CFRelease(Value);
          }

          uint64_t v14 = v31[3];
          if (!v14 || Value[28]) {
            goto LABEL_19;
          }
          CFPropertyListRef v15 = ktrace_chunk_copy_plist(v14);
          if (v15)
          {
            Value[28] = v15;
LABEL_19:
            (*(void (**)(void))(a1[4] + 16LL))();
LABEL_5:
            uint64_t v6 = 1LL;
LABEL_28:
            _Block_object_dispose(&v19, 8);
            _Block_object_dispose(&v23, 8);
            _Block_object_dispose(&v30, 8);
            _Block_object_dispose(&v34, 8);
            return v6;
          }

          uint64_t v6 = 0LL;
LABEL_27:
          *(_DWORD *)(*(void *)(a1[6] + 8LL) + 24LL) = 79;
          goto LABEL_28;
        }

        goto LABEL_22;
      }
    }

    else
    {
      if (!v31[3]) {
        goto LABEL_5;
      }
      if (*((_DWORD *)v35 + 6) != -1)
      {
LABEL_22:
        int v16 = *__error();
        ktrace_log_init();
        if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
          __ktrace_file_iterate_subfiles_block_invoke_cold_2();
        }
LABEL_26:
        uint64_t v6 = 0LL;
        *__error() = v16;
        goto LABEL_27;
      }
    }

    int v16 = *__error();
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
      __ktrace_file_iterate_subfiles_block_invoke_cold_1();
    }
    goto LABEL_26;
  }

  return 1LL;
}

BOOL __ktrace_file_iterate_subfiles_block_invoke_2(void *a1, uint64_t a2)
{
  int v4 = ktrace_chunk_tag(a2);
  if (v4 == 32777)
  {
    if (*(void *)(*(void *)(a1[8] + 8LL) + 24LL) || ktrace_chunk_version_major(a2))
    {
      *(_DWORD *)(*(void *)(a1[4] + 8LL) + 24LL) = 79;
      int v5 = *__error();
      ktrace_log_init();
      if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
        __ktrace_file_iterate_subfiles_block_invoke_2_cold_3();
      }
      goto LABEL_17;
    }

    *(void *)(*(void *)(a1[8] + 8LL) + 24LL) = a2;
    return 1LL;
  }

  if (v4 == 32781)
  {
    if (*(_BYTE *)(*(void *)(a1[6] + 8LL) + 24LL)
      || (unint64_t)ktrace_chunk_size(a2) < 0x38
      || ktrace_chunk_version_major(a2))
    {
      *(_DWORD *)(*(void *)(a1[4] + 8LL) + 24LL) = 79;
      int v5 = *__error();
      ktrace_log_init();
      if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
        __ktrace_file_iterate_subfiles_block_invoke_2_cold_2();
      }
      goto LABEL_17;
    }

    *(_BYTE *)(*(void *)(a1[6] + 8LL) + 24LL) = 1;
    unsigned int v8 = (void *)(*(void *)(a1[7] + 8LL) + 24LL);
    unsigned int v9 = (uint64_t *)a2;
    size_t v10 = 56LL;
    goto LABEL_22;
  }

  if (v4 != 32780) {
    return 1LL;
  }
  if ((unint64_t)ktrace_chunk_size(a2) < 4 || ktrace_chunk_version_major(a2))
  {
    *(_DWORD *)(*(void *)(a1[4] + 8LL) + 24LL) = 79;
    int v5 = *__error();
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
      __ktrace_file_iterate_subfiles_block_invoke_2_cold_1();
    }
LABEL_17:
    uint64_t v6 = __error();
    BOOL result = 0LL;
    int *v6 = v5;
    return result;
  }

  unsigned int v8 = (void *)(*(void *)(a1[5] + 8LL) + 24LL);
  unsigned int v9 = (uint64_t *)a2;
  size_t v10 = 4LL;
LABEL_22:
  *(_DWORD *)(*(void *)(a1[4] + 8LL) + 24LL) = ktrace_chunk_copy_data(v9, 0LL, v8, v10);
  return *(_DWORD *)(*(void *)(a1[4] + 8LL) + 24LL) == 0;
}

uint64_t ktrace_file_create_subfile( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, const void *a8)
{
  int v9 = a7;
  int v11 = a5;
  uint64_t v38 = 0LL;
  __int16 v39 = &v38;
  uint64_t v40 = 0x2000000000LL;
  uint64_t v41 = 0LL;
  int v42 = 1;
  uint64_t v16 = MEMORY[0x1895F87A8];
  v43[0] = MEMORY[0x1895F87A8];
  v43[1] = 0x40000000LL;
  v43[2] = __find_unused_subfile_id_block_invoke;
  v43[3] = &__block_descriptor_tmp_34;
  v43[4] = &v42;
  int v17 = ktrace_file_iterate_subfiles(a1, (uint64_t)v43, a3, a4, a5, a6, a7, (uint64_t)a8);
  if (v17) {
    goto LABEL_16;
  }
  uint64_t appended = ktrace_file_append_start(a1, 32778, 0, 0);
  if (!appended) {
    goto LABEL_13;
  }
  uint64_t v19 = (uint64_t)appended;
  v34[0] = 0x155AA0300LL;
  v34[1] = 40LL;
  v34[2] = a2;
  v34[3] = a3;
  v34[4] = a4;
  int v35 = v11;
  uint64_t v36 = a6;
  int v37 = v9;
  if (!ktrace_file_append_subchunk(a1, v19, 32781, 0, 0, (UInt8 *)v34, 56LL))
  {
LABEL_13:
    if (*__error())
    {
      int v17 = *__error();
      goto LABEL_16;
    }

    goto LABEL_15;
  }

  if (!a8) {
    goto LABEL_9;
  }
  Data = CFPropertyListCreateData(0LL, a8, kCFPropertyListBinaryFormat_v1_0, 0LL, 0LL);
  if (!Data)
  {
LABEL_15:
    int v17 = 5;
    goto LABEL_16;
  }

  uint64_t v21 = Data;
  BytePtr = (UInt8 *)CFDataGetBytePtr(Data);
  CFIndex Length = CFDataGetLength(v21);
  if (!ktrace_file_append_subchunk(a1, v19, 32777, 0, 0, BytePtr, Length))
  {
    __error();
    CFRelease(v21);
    goto LABEL_13;
  }

  CFRelease(v21);
LABEL_9:
  int v17 = ktrace_file_append_finish(a1, v19);
  if (v17)
  {
LABEL_16:
    uint64_t v30 = 0LL;
    *__error() = v17;
    goto LABEL_17;
  }

  v32[0] = v16;
  v32[1] = 0x40000000LL;
  v32[2] = __ktrace_file_create_subfile_block_invoke;
  v32[3] = &unk_189F55240;
  int v33 = v42;
  v32[4] = &v38;
  ktrace_file_iterate_subfiles(a1, (uint64_t)v32, v24, v25, v26, v27, v28, v29);
  uint64_t v30 = v39[3];
  if (!v30) {
    ktrace_remotetime_update_params_cold_1();
  }
  *(_BYTE *)(v30 + 299) = 1;
LABEL_17:
  _Block_object_dispose(&v38, 8);
  return v30;
}

uint64_t __ktrace_file_create_subfile_block_invoke(uint64_t result, uint64_t a2)
{
  if (*(_DWORD *)(a2 + 216) == *(_DWORD *)(result + 40)) {
    *(void *)(*(void *)(*(void *)(result + 32) + 8LL) + 24LL) = a2;
  }
  return result;
}

uint64_t ktrace_file_append_subfile( uint64_t a1, uint64_t a2, const void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v45 = 0LL;
  __int16 v46 = &v45;
  uint64_t v47 = 0x2000000000LL;
  int v49 = 1;
  uint64_t v11 = MEMORY[0x1895F87A8];
  uint64_t v34 = MEMORY[0x1895F87A8];
  uint64_t v35 = 0x40000000LL;
  uint64_t v36 = __find_unused_subfile_id_block_invoke;
  *(void *)&__int128 v37 = &__block_descriptor_tmp_34;
  *((void *)&v37 + 1) = &v49;
  int v48 = ktrace_file_iterate_subfiles(a1, (uint64_t)&v34, (uint64_t)a3, a4, a5, a6, a7, a8);
  uint64_t v12 = *((unsigned int *)v46 + 6);
  if (!(_DWORD)v12)
  {
    uint64_t v41 = 0LL;
    int v42 = &v41;
    uint64_t v43 = 0x2000000000LL;
    uint64_t appended = ktrace_file_append_start(a1, 32778, 0, 0);
    uint64_t v13 = v42[3];
    if (v13)
    {
      if (ktrace_file_append_subchunk(a1, v13, 32780, 0, 0, (UInt8 *)&v49, 4LL))
      {
        uint64_t v34 = 0x155AA0300LL;
        uint64_t v35 = 40LL;
        uint64_t v36 = *(uint64_t (**)(uint64_t, uint64_t))(a2 + 188);
        __int128 v37 = *(_OWORD *)(a2 + 160);
        uint64_t v38 = *(void *)(a2 + 176);
        int v14 = *(unsigned __int8 *)(a2 + 298);
        int v39 = *(_DWORD *)(a2 + 184);
        int v40 = v14;
        if (ktrace_file_append_subchunk(a1, v42[3], 32781, 0, 0, (UInt8 *)&v34, 56LL))
        {
          if (a3)
          {
            Data = CFPropertyListCreateData(0LL, a3, kCFPropertyListBinaryFormat_v1_0, 0LL, 0LL);
            if (!Data) {
              goto LABEL_19;
            }
            uint64_t v21 = Data;
            uint64_t v22 = v42[3];
            BytePtr = (UInt8 *)CFDataGetBytePtr(Data);
            CFIndex Length = CFDataGetLength(v21);
            if (!ktrace_file_append_subchunk(a1, v22, 32777, 0, 0, BytePtr, Length))
            {
              *((_DWORD *)v46 + 6) = *__error();
              CFRelease(v21);
              unsigned int v32 = *((_DWORD *)v46 + 6);
              if (v32) {
                uint64_t v12 = v32;
              }
              else {
                uint64_t v12 = 5LL;
              }
              goto LABEL_20;
            }

            CFRelease(v21);
          }

          v33[0] = v11;
          v33[1] = 0x40000000LL;
          v33[2] = __ktrace_file_append_subfile_block_invoke;
          v33[3] = &unk_189F55268;
          v33[4] = &v45;
          void v33[5] = &v41;
          v33[6] = a1;
          uint64_t v12 = ktrace_file_header_iterate(a2, 0LL, (uint64_t)v33, v15, v16, v17, v18, v19);
          if ((_DWORD)v12) {
            goto LABEL_20;
          }
          uint64_t v12 = *((unsigned int *)v46 + 6);
          if ((_DWORD)v12) {
            goto LABEL_20;
          }
          uint64_t v12 = ktrace_file_append_finish(a1, v42[3]);
          *((_DWORD *)v46 + 6) = v12;
          if ((_DWORD)v12) {
            goto LABEL_20;
          }
          uint64_t v25 = ktrace_file_append_start(a1, 32779, 0, 0);
          v42[3] = (uint64_t)v25;
          if (v25 && ktrace_file_append_subchunk(a1, (uint64_t)v25, 32780, 0, 0, (UInt8 *)&v49, 4LL))
          {
            uint64_t v12 = ktrace_file_iterate(a2, 0LL, (uint64_t)v33, v26, v27, v28, v29, v30);
            if (!(_DWORD)v12)
            {
              uint64_t v12 = *((unsigned int *)v46 + 6);
              if (!(_DWORD)v12)
              {
                uint64_t v12 = ktrace_file_append_finish(a1, v42[3]);
                *((_DWORD *)v46 + 6) = v12;
              }
            }

            goto LABEL_20;
          }
        }
      }
    }

    if (*__error())
    {
      uint64_t v12 = *__error();
LABEL_20:
      _Block_object_dispose(&v41, 8);
      goto LABEL_21;
    }

LABEL_19:
    uint64_t v12 = 5LL;
    goto LABEL_20;
  }

    uint64_t v18 = (const __CFArray *)CFDictionaryGetValue(v11, @"__TEXT*");
    if (!v18) {
      goto LABEL_34;
    }
    uint64_t v16 = v18;
    uint64_t v19 = CFGetTypeID(v18);
    if (v19 != CFArrayGetTypeID())
    {
      ktrace_log_init();
      if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
        __ktrace_uuid_map_learn_ariadne_process_dict_with_chunk_block_invoke_cold_11();
      }
      goto LABEL_34;
    }

      __break(1u);
      goto LABEL_20;
    }

      uint64_t v6 = __clz(__rbit64(v33)) + (v31 << 6);
    }

      uint64_t v6 = __clz(__rbit64(v33)) + (v31 << 6);
    }

      uint64_t v6 = __clz(__rbit64(v34)) + (v32 << 6);
    }

        int v9 = __clz(__rbit64(v10)) + (v11 << 6);
LABEL_20:
        uint64_t v13 = *(unsigned __int8 *)(*(void *)(v2 + 48) + v9);
        sub_186C5B59C();
        __asm { BR              X8 }
      }
    }
  }

        unsigned int v8 = __clz(__rbit64(v9)) + (v10 << 6);
LABEL_20:
        uint64_t v12 = *(unsigned __int8 *)(*(void *)(v2 + 48) + v8);
        sub_186C5B59C();
        __asm { BR              X8 }
      }
    }
  }

  uint64_t v6 = v7;
LABEL_44:
  uint64_t v22 = 328 * ((v13 - v4) / 328);
  if (v6 != v4 || v6 >= &v4[v22]) {
    memmove(v6, v4, v22);
  }
  return 1LL;
}

    uint64_t v31 = (v34 - 1) & v34;
  }

  __break(1u);
LABEL_46:
  __break(1u);
LABEL_47:
  __break(1u);
LABEL_48:
  __break(1u);
LABEL_49:
  BOOL result = sub_186C5B530();
  __break(1u);
  return result;
}

LABEL_21:
  _Block_object_dispose(&v45, 8);
  return v12;
}

  if (v17 == (_DWORD)v16 + (_DWORD)v15 - (_DWORD)v8)
  {
    flatbuffers::vector_downward::ensure_space(this, 4uLL);
    uint64_t v22 = (_DWORD *)*((void *)this + 7);
    *uint64_t v22 = v17;
    *((void *)this + 7) = v22 + 1;
    uint64_t v16 = *((void *)this + 4);
    uint64_t v15 = *((void *)this + 5);
  }

  *(_DWORD *)(v15 + v16 - v4) = v17 - v4;
  *((_BYTE *)this + 70) = 0;
  return v4;
}

    int v20 = *((void *)a3 + 5);
    int v33 = 0LL;
    value = v20;
    Count = CFArrayGetCount(v16);
    v45.location = 0LL;
    v45.length = Count;
    uint64_t v22 = CFArrayBSearchValues(v16, v45, &value, (CFComparatorFunction)cmp_symbol, 0LL);
    if (v22 >= Count) {
      uint64_t v23 = Count - 1;
    }
    else {
      uint64_t v23 = v22;
    }
    if ((v23 & 0x8000000000000000LL) == 0)
    {
      uint64_t v24 = 1LL;
      while (1)
      {
        ValueAtIndex = CFArrayGetValueAtIndex(v16, v23);
        uint64_t v26 = *((void *)a3 + 5);
        if (v26 >= *(void *)ValueAtIndex && v26 < *((void *)ValueAtIndex + 1) + *(void *)ValueAtIndex) {
          break;
        }
        uint64_t v27 = 0LL;
        if (v23-- >= 1 && v24++ < 2) {
          continue;
        }
        goto LABEL_35;
      }

      uint64_t v27 = utf8(*((const __CFString **)ValueAtIndex + 2));
      goto LABEL_35;
    }

      CFSetAddValue((CFMutableSetRef)Value, *(const void **)(a2 + 40));
      break;
  }

  uint64_t v12 = *v3;
  *(void *)(*v3 + 8 * (a2 >> 6) + 56) |= 1LL << a2;
  uint64_t v13 = *(void *)(v12 + 48) + 4 * a2;
  *(_WORD *)uint64_t v13 = v5;
  *(_BYTE *)(v13 + 2) = BYTE2(v5) & 1;
  int v14 = *(void *)(v12 + 16);
  uint64_t v15 = __OFADD__(v14, 1LL);
  uint64_t v16 = v14 + 1;
  if (v15) {
    __break(1u);
  }
  else {
    *(void *)(v12 + 16) = v16;
  }
  return result;
}

    *((_OWORD *)a1 + 6) = *((_OWORD *)a2 + 6);
    goto LABEL_22;
  }

  if (!v10)
  {
    swift_release();
    goto LABEL_21;
  }

  uint64_t v11 = a2[13];
  a1[12] = v10;
  a1[13] = v11;
  swift_retain();
  swift_release();
LABEL_22:
  a1[14] = a2[14];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[15] = a2[15];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[16] = a2[16];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
    goto LABEL_22;
  }

  if (!v14)
  {
    swift_release();
    goto LABEL_21;
  }

  uint64_t v15 = *(void *)(a2 + 104);
  *(void *)(a1 + 96) = v14;
  *(void *)(a1 + 104) = v15;
  swift_release();
LABEL_22:
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 12_Block_object_dispose(va, 8) = *(void *)(a2 + 128);
  swift_bridgeObjectRelease();
  return a1;
}

        uint64_t v12 = (v19 - 1) & v19;
        uint64_t v17 = __clz(__rbit64(v19)) + (v8 << 6);
      }

      uint64_t v21 = *(_WORD *)(*(void *)(v5 + 48) + 2 * v17);
      uint64_t v22 = *(void *)(*(void *)(v5 + 56) + 8 * v17);
      BOOL result = MEMORY[0x186E44F8C](*(void *)(v7 + 40), v21, 2LL);
      uint64_t v23 = -1LL << *(_BYTE *)(v7 + 32);
      uint64_t v24 = result & ~v23;
      uint64_t v25 = v24 >> 6;
      if (((-1LL << v24) & ~*(void *)(v14 + 8 * (v24 >> 6))) != 0)
      {
        uint64_t v15 = __clz(__rbit64((-1LL << v24) & ~*(void *)(v14 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0LL;
      }

      else
      {
        uint64_t v26 = 0;
        uint64_t v27 = (unint64_t)(63 - v23) >> 6;
        do
        {
          if (++v25 == v27 && (v26 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }

          uint64_t v28 = v25 == v27;
          if (v25 == v27) {
            uint64_t v25 = 0LL;
          }
          v26 |= v28;
          uint64_t v29 = *(void *)(v14 + 8 * v25);
        }

        while (v29 == -1);
        uint64_t v15 = __clz(__rbit64(~v29)) + (v25 << 6);
      }

      *(void *)(v14 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v15;
      *(_WORD *)(*(void *)(v7 + 48) + 2 * v15) = v21;
      *(void *)(*(void *)(v7 + 56) + 8 * v15) = v22;
      ++*(void *)(v7 + 16);
    }
  }

  BOOL result = swift_release();
LABEL_38:
  *uint64_t v3 = v7;
  return result;
}

    if (v38 == v30) {
      return v2;
    }
    if ((v6 & 0x8000000000000000LL) == 0)
    {
      unsigned int v8 = v38 + 1;
    }

    goto LABEL_31;
  }

  __break(1u);
LABEL_27:
  __break(1u);
LABEL_28:
  __break(1u);
LABEL_29:
  __break(1u);
LABEL_30:
  __break(1u);
LABEL_31:
  __break(1u);
  return result;
}

    if (v38 == v30) {
      return v2;
    }
    if ((v6 & 0x8000000000000000LL) == 0)
    {
      unsigned int v8 = v38 + 1;
    }

    goto LABEL_31;
  }

  __break(1u);
LABEL_27:
  __break(1u);
LABEL_28:
  __break(1u);
LABEL_29:
  __break(1u);
LABEL_30:
  __break(1u);
LABEL_31:
  __break(1u);
  return result;
}

    if (v40 == v31) {
      return v2;
    }
    if ((v6 & 0x8000000000000000LL) == 0)
    {
      unsigned int v8 = v40 + 1;
    }

    goto LABEL_31;
  }

  __break(1u);
LABEL_27:
  __break(1u);
LABEL_28:
  __break(1u);
LABEL_29:
  __break(1u);
LABEL_30:
  __break(1u);
LABEL_31:
  __break(1u);
  return result;
}

  swift_release();
  int v1 = v0;
  int v14 = 1LL << *(_BYTE *)(v2 + 32);
  if (v14 > 63) {
    bzero((void *)(v2 + 56), ((unint64_t)(v14 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    void *v5 = -1LL << v14;
  }
  *(void *)(v2 + 16) = 0LL;
LABEL_25:
  BOOL result = swift_release();
  *int v1 = v3;
  return result;
}

  uint64_t v21 = *v4;
  *(void *)(*v4 + 8 * (i >> 6) + 56) |= 1LL << i;
  BOOL result = (uint64_t)memcpy((void *)(*(void *)(v21 + 48) + 328 * i), __src, 0x141uLL);
  uint64_t v23 = *(void *)(v21 + 16);
  uint64_t v24 = __OFADD__(v23, 1LL);
  uint64_t v25 = v23 + 1;
  if (!v24)
  {
    *(void *)(v21 + 16) = v25;
    return result;
  }

  __break(1u);
LABEL_24:
  BOOL result = sub_186C5B524();
  __break(1u);
  return result;
}

  BOOL result = swift_release_n();
  int v1 = v0;
LABEL_23:
  *int v1 = v3;
  return result;
}

          uint64_t v11 = (v17 - 1) & v17;
          uint64_t v12 = __clz(__rbit64(v17)) + (v13 << 6);
          int v9 = v13;
        }

        uint64_t v19 = (uint64_t *)(*(void *)(*a5 + 48LL) + 16 * v12);
        uint64_t v21 = *v19;
        int v20 = v19[1];
        a5[3] = v9;
        a5[4] = v11;
        sub_186C5B59C();
        swift_bridgeObjectRetain();
        sub_186C5ADA4();
        uint64_t v22 = sub_186C5B5D8();
        uint64_t v23 = -1LL << *(_BYTE *)(a3 + 32);
        uint64_t v24 = v22 & ~v23;
        uint64_t v25 = v24 >> 6;
        uint64_t v26 = 1LL << v24;
        if (((1LL << v24) & *(void *)(v39 + 8 * (v24 >> 6))) != 0) {
          break;
        }
LABEL_3:
        BOOL result = swift_bridgeObjectRelease();
      }

      uint64_t v27 = *(void *)(a3 + 48);
      uint64_t v28 = (void *)(v27 + 16 * v24);
      uint64_t v29 = *v28 == v21 && v28[1] == v20;
      if (!v29 && (sub_186C5B4F4() & 1) == 0)
      {
        uint64_t v31 = ~v23;
        for (uint64_t i = v24 + 1; ; uint64_t i = v33 + 1)
        {
          int v33 = i & v31;
          uint64_t v34 = (void *)(v27 + 16 * v33);
          uint64_t v35 = *v34 == v21 && v34[1] == v20;
          if (v35 || (sub_186C5B4F4() & 1) != 0)
          {
            BOOL result = swift_bridgeObjectRelease();
            uint64_t v25 = v33 >> 6;
            uint64_t v26 = 1LL << v33;
            goto LABEL_29;
          }
        }

        goto LABEL_3;
      }

      BOOL result = swift_bridgeObjectRelease();
LABEL_29:
      uint64_t v30 = v38[v25];
      v38[v25] = v30 & ~v26;
    }

    while ((v26 & v30) == 0);
    unsigned int v8 = v37 - 1;
    if (__OFSUB__(v37, 1LL))
    {
LABEL_45:
      __break(1u);
      return result;
    }

    if (v37 != 1) {
      continue;
    }
    return MEMORY[0x18961AFF8];
  }

  uint64_t v18 = v2[3];
  if (v18 < 2) {
    return v2;
  }
  uint64_t v19 = v18 >> 1;
  uint64_t v16 = __OFSUB__(v19, v3);
  int v20 = v19 - v3;
  if (!v16)
  {
    v2[2] = v20;
    return v2;
  }

  __break(1u);
  BOOL result = swift_release();
  __break(1u);
  return result;
}

uint64_t __ktrace_file_append_subfile_block_invoke(void *a1, uint64_t *a2)
{
  unint64_t v4 = ktrace_chunk_size_t(a2);
  int v5 = ktrace_chunk_map_data(a2, 0LL, v4);
  if (v5)
  {
    uint64_t v6 = (UInt8 *)v5;
    uint64_t v7 = a1[6];
    uint64_t v8 = *(void *)(*(void *)(a1[5] + 8LL) + 24LL);
    int v9 = ktrace_chunk_tag((uint64_t)a2);
    __int16 v10 = ktrace_chunk_version_major((uint64_t)a2);
    __int16 v11 = ktrace_chunk_version_minor((uint64_t)a2);
    CFIndex v12 = ktrace_chunk_size_t(a2);
    if (ktrace_file_append_subchunk(v7, v8, v9, v10, v11, v6, v12))
    {
      uint64_t v13 = ktrace_chunk_size_t(a2);
      ktrace_chunk_unmap_data((uint64_t)a2, (unint64_t)v6, v13);
      return 1LL;
    }

    *(_DWORD *)(*(void *)(a1[4] + 8LL) + 24LL) = *__error();
    uint64_t v16 = ktrace_chunk_size_t(a2);
    ktrace_chunk_unmap_data((uint64_t)a2, (unint64_t)v6, v16);
    uint64_t v17 = *(void *)(a1[4] + 8LL);
    if (*(_DWORD *)(v17 + 24)) {
      return 0LL;
    }
    uint64_t result = 0LL;
    *(_DWORD *)(v17 + 24) = 5;
  }

  else
  {
    if (*(_DWORD *)(*(void *)(a1[4] + 8LL) + 24LL)) {
      return 0LL;
    }
    if (*__error()) {
      int v15 = *__error();
    }
    else {
      int v15 = 5;
    }
    uint64_t result = 0LL;
    *(_DWORD *)(*(void *)(a1[4] + 8LL) + 24LL) = v15;
  }

  return result;
}

double ktrace_file_alloc()
{
  if (ktrace_file_alloc_once != -1) {
    dispatch_once(&ktrace_file_alloc_once, &__block_literal_global_1);
  }
  uint64_t Instance = _CFRuntimeCreateInstance();
  if (Instance)
  {
    double result = 0.0;
    *(_OWORD *)(Instance + 272) = 0u;
    *(_OWORD *)(Instance + 28_Block_object_dispose(va, 8) = 0u;
    *(_OWORD *)(Instance + 240) = 0u;
    *(_OWORD *)(Instance + 256) = 0u;
    *(_OWORD *)(Instance + 20_Block_object_dispose(va, 8) = 0u;
    *(_OWORD *)(Instance + 224) = 0u;
    *(_OWORD *)(Instance + 176) = 0u;
    *(_OWORD *)(Instance + 192) = 0u;
    *(_OWORD *)(Instance + 144) = 0u;
    *(_OWORD *)(Instance + 160) = 0u;
    *(_OWORD *)(Instance + 112) = 0u;
    *(_OWORD *)(Instance + 12_Block_object_dispose(va, 8) = 0u;
    *(_OWORD *)(Instance + 80) = 0u;
    *(_OWORD *)(Instance + 96) = 0u;
    *(_OWORD *)(Instance + 4_Block_object_dispose(va, 8) = 0u;
    *(_OWORD *)(Instance + 64) = 0u;
    *(_OWORD *)(Instance + 16) = 0u;
    *(_OWORD *)(Instance + 32) = 0u;
    *(_DWORD *)(Instance + 196) = -1;
  }

  return result;
}

uint64_t __ktrace_file_alloc_block_invoke()
{
  uint64_t result = _CFRuntimeRegisterClass();
  ktrace_file_typeid = result;
  return result;
}

void ktrace_file_dealloc(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 196);
  if (v2 == -1)
  {
    if (*(void *)(a1 + 240))
    {
      uint64_t v3 = *(void *)(a1 + 264);
      if (v3) {
        (*(void (**)(void))(v3 + 16))();
      }
    }
  }

  else
  {
    close(v2);
  }

  unint64_t v4 = *(const void **)(a1 + 208);
  if (v4) {
    CFRelease(v4);
  }
  int v5 = *(const void **)(a1 + 224);
  if (v5) {
    CFRelease(v5);
  }
  uint64_t v6 = *(const void **)(a1 + 272);
  if (v6) {
    CFRelease(v6);
  }
}

void ktrace_chunk_array_destroy(uint64_t a1)
{
  if (a1)
  {
    int v2 = *(void **)a1;
    if (v2)
    {
      if (*(void *)(a1 + 16))
      {
        unint64_t v3 = 0LL;
        do
        {
          unint64_t v4 = *(void **)(*(void *)a1 + 8 * v3);
          if (v4[8])
          {
            ktrace_chunk_array_destroy(v4 + 6);
            unint64_t v4 = *(void **)(*(void *)a1 + 8 * v3);
          }

          free(v4);
          ++v3;
        }

        while (v3 < *(void *)(a1 + 16));
        int v2 = *(void **)a1;
      }

      free(v2);
    }

    *(void *)a1 = 0LL;
  }

uint64_t __ktrace_file_write_header_template_block_invoke(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = ktrace_chunk_size((uint64_t)a2);
  int v5 = ktrace_chunk_map_data(a2, 0LL, v4);
  if (v5)
  {
    uint64_t v6 = (UInt8 *)v5;
    uint64_t v7 = *(void *)(a1 + 40);
    int v8 = ktrace_chunk_tag((uint64_t)a2);
    __int16 v9 = ktrace_chunk_version_major((uint64_t)a2);
    __int16 v10 = ktrace_chunk_version_minor((uint64_t)a2);
    uint64_t appended = ktrace_file_header_append_chunk(v7, v8, v9, v10, v6, v4);
    ktrace_chunk_unmap_data((uint64_t)a2, (unint64_t)v6, v4);
    if (appended) {
      return 1LL;
    }
  }

  uint64_t v13 = __error();
  uint64_t result = 0LL;
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = *v13;
  return result;
}

uint64_t parse_v1_file(uint64_t a1)
{
  uint64_t v32 = *MEMORY[0x1895F89C0];
  ktrace_log_init();
  if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_DEBUG)) {
    parse_v1_file_cold_13();
  }
  *(_BYTE *)(a1 + 296) = 0;
  if (ktrace_file_read(a1, v21, 0x14uLL, 0LL) != 20)
  {
    int v7 = *__error();
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR)) {
      parse_v1_file_cold_12();
    }
    *__error() = v7;
    return *__error();
  }

  int v2 = v23;
  *(void *)(a1 + 16_Block_object_dispose(va, 8) = v23;
  if (!v2)
  {
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_DEBUG)) {
      parse_v1_file_cold_11();
    }
    *(void *)(a1 + 16_Block_object_dispose(va, 8) = *(unsigned int *)(a1 + 172);
  }

  uint64_t v3 = v22;
  *(_DWORD *)(a1 + 176) = v24;
  if (!(_DWORD)v3)
  {
    *(_BYTE *)(a1 + 29_Block_object_dispose(va, 8) = 1;
    uint64_t v6 = 24LL;
    goto LABEL_17;
  }

  uint64_t v4 = synthesize_thread_map_chunk(a1, 0x14uLL, v3);
  if (v4)
  {
    int v5 = v4;
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_DEBUG)) {
      parse_v1_file_cold_10();
    }
    uint64_t v6 = v5[1] + v5[2];
LABEL_17:
    if ((unint64_t)ktrace_file_read(a1, &v25, 4uLL, v6) > 3)
    {
      if (v25 == 1437204737)
      {
        if ((unint64_t)ktrace_file_read(a1, buf, 4uLL, v6 + 4) > 3)
        {
          if (*(_DWORD *)buf < 0x3E9u)
          {
            uint64_t v12 = (16LL * *(unsigned int *)buf) | 8;
            ktrace_log_init();
            uint64_t v13 = (os_log_s *)ktrace_file_log;
            if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_DEBUG)) {
              parse_v1_file_cold_8((uint64_t)buf, v12, v13);
            }
            int v14 = ktrace_chunk_create(a1, 7168, 1, 0, v12, v6);
            if (v14)
            {
              int v15 = v14;
              int appended = ktrace_chunk_array_append_internal(a1 + 80, v14);
              if (!appended)
              {
                *(void *)(a1 + 12_Block_object_dispose(va, 8) = *(void *)(a1 + 120);
                *(void *)(a1 + 8_Block_object_dispose(va, 8) = v15;
                v6 += v15[1];
                ktrace_log_init();
                if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_DEBUG)) {
                  parse_v1_file_cold_6();
                }
LABEL_50:
                uint64_t v18 = synthesize_events_chunk(a1, (-(int)v6 & 0xFFFLL) + v6);
                uint64_t result = 0LL;
                if (v18) {
                  return result;
                }
                return *__error();
              }

              int v17 = appended;
              free(v15);
              *__error() = v17;
              int v8 = *__error();
              ktrace_log_init();
              if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR)) {
                parse_v1_file_cold_7();
              }
            }

            else
            {
              int v8 = *__error();
              ktrace_log_init();
              if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR)) {
                parse_v1_file_cold_5();
              }
            }
          }

          else
          {
            *__error() = 79;
            int v8 = *__error();
            ktrace_log_init();
            if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR)) {
              parse_v1_file_cold_4();
            }
          }
        }

        else
        {
          int v8 = *__error();
          ktrace_log_init();
          if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR)) {
            parse_v1_file_cold_3();
          }
        }
      }

      else
      {
        *__error() = 79;
        int v8 = *__error();
        ktrace_log_init();
        __int16 v11 = (os_log_s *)ktrace_file_log;
        if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 134218496;
          uint64_t v27 = v6;
          __int16 v28 = 1024;
          int v29 = v25;
          __int16 v30 = 1024;
          int v31 = v8;
          _os_log_error_impl( &dword_186BA3000,  v11,  OS_LOG_TYPE_ERROR,  "value at CPU map magic number (offset %lld) was %#x (%{errno}d)",  buf,  0x18u);
        }
      }
    }

    else
    {
      int v8 = *__error();
      ktrace_log_init();
      if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR)) {
        parse_v1_file_cold_2();
      }
    }

    *__error() = v8;
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_DEBUG)) {
      parse_v1_file_cold_1();
    }
    goto LABEL_50;
  }

  if (*__error()) {
    return *__error();
  }
  uint64_t v9 = 28 * v3;
  if (((28 * (_WORD)v3 + 4088) & 0xFFC) == 0)
  {
    uint64_t v6 = v9 + 20;
LABEL_45:
    *(_BYTE *)(a1 + 29_Block_object_dispose(va, 8) = 0;
    goto LABEL_17;
  }

  if ((((_WORD)v9 + 4092) & 0xFFC) == 0)
  {
    uint64_t v6 = v9 + 24;
    goto LABEL_45;
  }

  uint64_t v6 = (32 * v3) | 0x18;
  if (v6 <= 0) {
    unint64_t v10 = -(-v6 & 0xFFF);
  }
  else {
    unint64_t v10 = (32 * v3) & 0xFE7 | 0x18;
  }
  if (v10 <= 0x1F)
  {
    *(_BYTE *)(a1 + 29_Block_object_dispose(va, 8) = 1;
    goto LABEL_17;
  }

  *__error() = 79;
  int v20 = *__error();
  ktrace_log_init();
  if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR)) {
    parse_v1_file_cold_9();
  }
  *__error() = v20;
  return 79LL;
}

uint64_t parse_v3_header(uint64_t a1, int a2)
{
  uint64_t v24 = *MEMORY[0x1895F89C0];
  memset(v17, 0, 56);
  if ((unint64_t)ktrace_file_read(a1, v17, 0x38uLL, 0LL) <= 0x37)
  {
    int v4 = *__error();
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR)) {
      parse_v3_header_cold_1();
    }
    *__error() = v4;
    return *__error();
  }

  if (a2) {
    unsigned int v6 = 14;
  }
  else {
    unsigned int v6 = 1;
  }
  if (v6 < WORD2(v17[0])) {
    return 79LL;
  }
  else {
    uint64_t v7 = 16LL;
  }
  __int128 v8 = *(_OWORD *)((char *)&v17[1] + 8);
  *(void *)&__int128 v9 = *(void *)((char *)&v17[2] + 12);
  *((void *)&v9 + 1) = *(void *)&v17[1];
  *(_OWORD *)(a1 + 180) = v9;
  *(_OWORD *)(a1 + 160) = v8;
  *(_DWORD *)(a1 + 176) = DWORD2(v17[2]);
  ktrace_log_init();
  unint64_t v10 = (os_log_s *)ktrace_file_log;
  if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_DEBUG)) {
    parse_v3_header_cold_3(a1, a1 + 180, v10);
  }
  if ((BYTE4(v17[3]) & 1) != 0) {
    *(_BYTE *)(a1 + 29_Block_object_dispose(va, 8) = 1;
  }
  *(_BYTE *)(a1 + 297) = 1;
  *(void *)(a1 + 28_Block_object_dispose(va, 8) = *((void *)&v17[0] + 1) + 16LL;
  ktrace_log_init();
  if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_DEBUG)) {
    parse_v3_header_cold_2();
  }
  *(void *)(a1 + 112) = v7;
  *(void *)(a1 + 120) = 56LL;
  uint64_t v12 = *(void *)(a1 + 280);
  uint64_t v11 = *(void *)(a1 + 288);
  *(void *)(a1 + 12_Block_object_dispose(va, 8) = v11;
  *(void *)(a1 + 56) = 16LL;
  *(void *)(a1 + 64) = v11;
  *(void *)(a1 + 72) = v12;
  if (v11 > v12)
  {
    int v13 = *__error();
    ktrace_log_init();
    int v14 = (os_log_s *)ktrace_file_log;
    if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR))
    {
      uint64_t v15 = *(void *)(a1 + 280);
      uint64_t v16 = *(void *)(a1 + 288);
      *(_DWORD *)buf = 134218496;
      uint64_t v19 = v15;
      __int16 v20 = 2048;
      uint64_t v21 = v16;
      __int16 v22 = 1024;
      int v23 = v13;
      _os_log_error_impl( &dword_186BA3000,  v14,  OS_LOG_TYPE_ERROR,  "file is smaller (%lld) than indicated in the file header chunk (%lld) (%{errno}d)",  buf,  0x1Cu);
    }

    *__error() = v13;
    return 79LL;
  }

  uint64_t result = 0LL;
  if (v11 == v12) {
    *(_BYTE *)(a1 + 299) = 1;
  }
  return result;
}

uint64_t __parse_artrace_file_block_invoke(uint64_t a1, uint64_t *a2)
{
  value[6] = *(void **)MEMORY[0x1895F89C0];
  int v4 = ktrace_chunk_tag((uint64_t)a2);
  if (v4 == 20482)
  {
    uint64_t v8 = *(void *)(a1 + 40);
    if (!v8) {
      ktrace_remotetime_update_params_cold_1();
    }
    if (!a2) {
      ktrace_remotetime_update_params_cold_1();
    }
    size_t v9 = ktrace_chunk_size((uint64_t)a2);
    if (v9)
    {
      size_t v10 = v9;
      uint64_t v11 = (UInt8 *)malloc(v9);
      if (v11)
      {
        uint64_t v12 = v11;
        int v13 = ktrace_chunk_copy_data(a2, 0LL, v11, v10);
        if (!v13)
        {
          dict = (const __CFDictionary *)create_dict(v12, v10);
          if (dict)
          {
            uint64_t v15 = dict;
            if (CFDictionaryGetValueIfPresent(dict, @"Kernel64bit", (const void **)value))
            {
              CFTypeID v16 = CFGetTypeID(value[0]);
              if (v16 == CFNumberGetTypeID())
              {
                if (CFNumberGetValue((CFNumberRef)value[0], kCFNumberSInt32Type, &valuePtr))
                {
                  int v13 = 0;
                  BOOL v17 = valuePtr == 0;
LABEL_32:
                  char v20 = !v17;
                  *(_BYTE *)(v8 + 29_Block_object_dispose(va, 8) = v20;
                  goto LABEL_41;
                }

                int v19 = *__error();
                ktrace_log_init();
                if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR)) {
                  __parse_artrace_file_block_invoke_cold_9();
                }
              }

              else
              {
                if (v16 == CFBooleanGetTypeID())
                {
                  int v13 = 0;
                  BOOL v17 = CFBooleanGetValue((CFBooleanRef)value[0]) == 0;
                  goto LABEL_32;
                }

                int v19 = *__error();
                ktrace_log_init();
                if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR)) {
                  __parse_artrace_file_block_invoke_cold_10();
                }
              }
            }

            else
            {
              int v19 = *__error();
              ktrace_log_init();
              if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR)) {
                __parse_artrace_file_block_invoke_cold_8();
              }
            }

            *__error() = v19;
            int v13 = 79;
LABEL_41:
            CFRelease(v15);
            goto LABEL_42;
          }

          int v13 = *__error();
        }

LABEL_42:
        free(v12);
        goto LABEL_43;
      }

      int v18 = *__error();
      ktrace_log_init();
      if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR)) {
        __parse_artrace_file_block_invoke_cold_7();
      }
    }

    else
    {
      int v18 = *__error();
      ktrace_log_init();
      if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR)) {
        __parse_artrace_file_block_invoke_cold_6();
      }
    }

    *__error() = v18;
    int v13 = 79;
LABEL_43:
    *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = v13;
    return !*(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
  }

  if (v4 != 20481) {
    return 1LL;
  }
  uint64_t v5 = *(void *)(a1 + 40);
  if (!v5) {
    ktrace_remotetime_update_params_cold_1();
  }
  if (!a2) {
    ktrace_remotetime_update_params_cold_1();
  }
  if ((unint64_t)ktrace_chunk_size((uint64_t)a2) > 0x2B)
  {
    int v7 = ktrace_chunk_copy_data(a2, 0LL, value, 0x2CuLL);
    if (!v7) {
      *(void **)(v5 + 18_Block_object_dispose(va, 8) = *(void **)((char *)&value[4] + 4);
    }
  }

  else
  {
    int v6 = *__error();
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR)) {
      __parse_artrace_file_block_invoke_cold_3();
    }
    *__error() = v6;
    int v7 = 79;
  }

  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = v7;
  return !*(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
}

  __break(1u);
LABEL_43:
  size_t v10 = sub_186BEF7AC(0LL, *((void *)v10 + 2) + 1LL, 1, v10);
LABEL_34:
  uint64_t v35 = *((void *)v10 + 2);
  uint64_t v34 = *((void *)v10 + 3);
  if (v35 >= v34 >> 1) {
    size_t v10 = sub_186BEF7AC((char *)(v34 > 1), v35 + 1, 1, v10);
  }
  *((void *)v10 + 2) = v35 + 1;
  uint64_t v36 = &v10[32 * v35];
  *((void *)v36 + 4) = v6;
  *((void *)v36 + 5) = v8;
  *((void *)v36 + 6) = v9;
  *((void *)v36 + 7) = v11;
  *(void *)(v39 + 16) = v10;
LABEL_37:
  swift_bridgeObjectRetain();
  swift_release();
LABEL_38:
  swift_release();
  return v10;
}

  int v29 = sub_186C5AD74() + 32;
  swift_bridgeObjectRetain();
  int v33 = ktrace_session_provide(_:_:_:_:_:)(a1, v29, MEMORY[0x18961AFF0], a2, 2LL, v30, v31, v32);
  swift_release();
  if (v33)
  {
    swift_arrayDestroy();
    type metadata accessor for KTraceRecordError();
    sub_186BF0CD4();
    swift_allocError();
    *uint64_t v34 = 0x6465726975716552LL;
    v34[1] = 0xE800000000000000LL;
LABEL_44:
    swift_storeEnumTagMultiPayload();
    return swift_willThrow();
  }

  swift_bridgeObjectRelease();
  uint64_t v35 = sub_186C222FC((uint64_t)&unk_189F58DF8);
  swift_arrayDestroy();
  uint64_t v36 = *(void *)(v6 + 152);
  if (v36)
  {
    v71 = *(void *)(v36 + 16);
    if (v71)
    {
      v66 = a1;
      v68 = a2;
      v65 = a3 & 1;
      v69 = v35 + 56;
      v70 = v36 + 32;
      swift_bridgeObjectRetain();
      __int128 v37 = 0LL;
      while (1)
      {
        uint64_t v38 = (uint64_t *)(v70 + 32 * v37);
        int v39 = *v38;
        int v40 = v38[1];
        uint64_t v41 = (void *)v38[2];
        if (*(void *)(v35 + 16))
        {
          sub_186C5B59C();
          swift_bridgeObjectRetain_n();
          swift_bridgeObjectRetain();
          sub_186C5ADA4();
          int v42 = sub_186C5B5D8();
          uint64_t v43 = -1LL << *(_BYTE *)(v35 + 32);
          unint64_t v44 = v42 & ~v43;
          if (((*(void *)(v69 + ((v44 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v44) & 1) != 0)
          {
            uint64_t v45 = *(void *)(v35 + 48);
            __int16 v46 = (void *)(v45 + 16 * v44);
            uint64_t v47 = *v46 == v39 && v46[1] == v40;
            if (v47 || (sub_186C5B4F4() & 1) != 0)
            {
LABEL_50:
              swift_bridgeObjectRelease();
              goto LABEL_51;
            }

            int v48 = ~v43;
            int v49 = (v44 + 1) & v48;
            if (((*(void *)(v69 + ((v49 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v49) & 1) != 0)
            {
              unint64_t v50 = (void *)(v45 + 16 * v49);
              uint64_t v51 = *v50 == v39 && v50[1] == v40;
              if (v51 || (sub_186C5B4F4() & 1) != 0) {
                goto LABEL_50;
              }
              uint64_t v52 = v49 + 1;
              uint64_t v53 = v48;
              for (uint64_t i = v52 & v48; ((*(void *)(v69 + ((i >> 3) & 0xFFFFFFFFFFFFF8LL)) >> i) & 1) != 0; uint64_t i = (i + 1) & v53)
              {
                unint64_t v55 = (void *)(v45 + 16 * i);
                __int16 v56 = *v55 == v39 && v55[1] == v40;
                if (v56 || (sub_186C5B4F4() & 1) != 0) {
                  goto LABEL_50;
                }
              }
            }
          }

          swift_bridgeObjectRelease();
        }

        else
        {
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }

        v57 = sub_186C5AD74();
        int v61 = ktrace_session_provide(_:_:_:_:_:)(v66, v57 + 32, v41, v68, v65, v58, v59, v60);
        swift_release();
        if (v61)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          type metadata accessor for KTraceRecordError();
          sub_186BF0CD4();
          swift_allocError();
          *v64 = v39;
          v64[1] = v40;
          swift_storeEnumTagMultiPayload();
          swift_willThrow();
          return swift_bridgeObjectRelease();
        }

      if (v6 > v7)
      {
        v17 -= 328;
        if (v13 > v4) {
          continue;
        }
      }

      goto LABEL_44;
    }
  }

  uint64_t v12 = 328 * v9;
  if (a4 != __dst || &__dst[v12] <= a4) {
    memmove(a4, __dst, v12);
  }
  int v13 = &v4[v12];
  if ((unint64_t)v6 < a3 && v8 >= 328)
  {
    while (1)
    {
      int v14 = *(void *)v6 == *(void *)v4 && *((void *)v6 + 1) == *((void *)v4 + 1);
      if (v14 || (sub_186C5B4F4() & 1) == 0) {
        break;
      }
      uint64_t v15 = v6;
      int v14 = v7 == v6;
      v6 += 328;
      if (!v14) {
        goto LABEL_16;
      }
LABEL_17:
      v7 += 328;
    }

    uint64_t v15 = v4;
    int v14 = v7 == v4;
    v4 += 328;
    if (v14) {
      goto LABEL_17;
    }
LABEL_16:
    memmove(v7, v15, 0x148uLL);
    goto LABEL_17;
  }

    __break(1u);
    goto LABEL_43;
  }

  if ((*(_BYTE *)(v62 + 144) & 1) == 0)
  {
    v63 = *(void *)(v62 + 136);
    v64 = *(double *)(v62 + 128);
    swift_bridgeObjectRelease();
    int v61 = sub_186C0D120(v63, v64);
    goto LABEL_39;
  }

  if (v130 == v129)
  {
LABEL_59:
    v156 = (uint64_t)v185;
    (*(void (**)(uint64_t *, uint64_t))(*(void *)(v160 - 8) + 16LL))(v185, v167);
    swift_storeEnumTagMultiPayload();
    v165((uint64_t *)v156);
    sub_186C392F4(v156, type metadata accessor for TrimNote);
    swift_release();
    swift_release();
    swift_release();
    ktrace_file_close(v182);
    sub_186C392F4((uint64_t)v171, type metadata accessor for TrimOptions);
    int v29 = (uint64_t)v187;
    goto LABEL_4;
  }

  swift_bridgeObjectRetain();
  v137 = 5 * v130;
  v138 = v129;
  while (1)
  {
    if (v130 >= v138) {
      goto LABEL_66;
    }
    v139 = (uint64_t *)rawValue[v137 + 4];
    v140 = LOBYTE(rawValue[v137 + 5]);
    v141 = rawValue[v137 + 6];
    v142 = rawValue[v137 + 7];
    v143 = rawValue[v137 + 8];
    if (LOBYTE(rawValue[v137 + 5])) {
      break;
    }
    __swift_instantiateConcreteTypeFromMangledName(&qword_18C6A2D58);
    v149 = swift_allocObject();
    *(void *)(v149 + 16) = v139;
    *(_BYTE *)(v149 + 24) = 0;
    *(void *)(v149 + 32) = v141;
    *(void *)(v149 + 40) = v142;
    *(_BYTE *)(v149 + 4_Block_object_dispose(va, 8) = v143;
    *(void *)(v149 + 56) = 8LL;
    v150 = ktrace_chunk_size_t(v139);
    v151 = v150 - 8;
    if (__OFSUB__(v150, 8LL)) {
      goto LABEL_69;
    }
    v152 = ktrace_chunk_map_data(v139, 8uLL, v151);
    if (!v152)
    {
LABEL_60:
      swift_deallocPartialClassInstance();
      type metadata accessor for TrimError(0LL);
      sub_186BFCB04(&qword_18C6A2D08, type metadata accessor for TrimError, (uint64_t)&unk_186C6185C);
      int v25 = (void *)swift_allocError();
      v158 = v157;
      *v157 = ktrace_chunk_tag((uint64_t)v139);
      v158[1] = 0;
      goto LABEL_64;
    }

    *(void *)(v149 + 64) = v152;
    *(void *)(v149 + 72) = v151 / 32;
    v148 = v166;
    sub_186C40944((uint64_t)v182, (uint64_t)v181, v168, (uint64_t)sub_186C44938, 0LL);
LABEL_56:
    v166 = v148;
    if (v148)
    {
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      ktrace_file_close(v182);
      sub_186C392F4((uint64_t)v171, type metadata accessor for TrimOptions);
      sub_186BFCA44((uint64_t)v187, &qword_18C6A2D48);
      int v25 = v166;
      goto LABEL_14;
    }

    v138 = v129;
    ++v130;
    swift_release();
    v137 += 5LL;
    if (v129 == v130)
    {
      swift_bridgeObjectRelease();
      goto LABEL_59;
    }
  }

  if (v140 == 4)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_18C6A2D50);
    v153 = swift_allocObject();
    *(void *)(v153 + 16) = v139;
    *(_BYTE *)(v153 + 24) = 4;
    *(void *)(v153 + 32) = v141;
    *(void *)(v153 + 40) = v142;
    *(_BYTE *)(v153 + 4_Block_object_dispose(va, 8) = v143;
    *(void *)(v153 + 56) = 0LL;
    v154 = ktrace_chunk_size_t(v139);
    v155 = ktrace_chunk_map_data(v139, 0LL, v154);
    if (!v155) {
      goto LABEL_60;
    }
    *(void *)(v153 + 64) = v155;
    *(void *)(v153 + 72) = v154 / 48;
    v148 = v166;
    sub_186C40C08((uint64_t)v182, (uint64_t)v181, v168, (uint64_t)sub_186C44938, 0LL);
    goto LABEL_56;
  }

  if (v140 == 1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_18C6A2D60);
    v144 = swift_allocObject();
    *(void *)(v144 + 16) = v139;
    *(_BYTE *)(v144 + 24) = 1;
    *(void *)(v144 + 32) = v141;
    *(void *)(v144 + 40) = v142;
    *(_BYTE *)(v144 + 4_Block_object_dispose(va, 8) = v143;
    *(void *)(v144 + 56) = 8LL;
    v145 = ktrace_chunk_size_t(v139);
    v146 = v145 - 8;
    if (__OFSUB__(v145, 8LL)) {
      goto LABEL_68;
    }
    v147 = ktrace_chunk_map_data(v139, 8uLL, v146);
    if (!v147) {
      goto LABEL_60;
    }
    *(void *)(v144 + 64) = v147;
    *(void *)(v144 + 72) = v146 / 64;
    v148 = v166;
    sub_186C40680((uint64_t)v182, (uint64_t)v181, v168, (uint64_t)sub_186C44930, 0LL);
    goto LABEL_56;
  }

  type metadata accessor for TrimError(0LL);
  sub_186BFCB04(&qword_18C6A2D08, type metadata accessor for TrimError, (uint64_t)&unk_186C6185C);
  int v25 = (void *)swift_allocError();
  *v159 = v140;
LABEL_64:
  swift_storeEnumTagMultiPayload();
  swift_willThrow();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  ktrace_file_close(v182);
LABEL_9:
  unint64_t v50 = (uint64_t)v171;
LABEL_12:
  sub_186C392F4(v50, type metadata accessor for TrimOptions);
  __int16 v56 = (uint64_t)v187;
LABEL_13:
  sub_186BFCA44(v56, &qword_18C6A2D48);
LABEL_14:
  v57 = (void (*)(uint64_t))*((void *)&v189 + 1);
  __int16 v58 = (uint64_t)v185;
  *v185 = (uint64_t)v25;
  swift_storeEnumTagMultiPayload();
  uint64_t v59 = v25;
  v57(v58);
  sub_186C392F4(v58, type metadata accessor for TrimNote);
  swift_willThrow();
}

uint64_t ktrace_chunk_array_append(void *a1, void *a2)
{
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  if (!a2) {
    ktrace_remotetime_update_params_cold_1();
  }
  uint64_t result = ktrace_chunk_array_append_internal((uint64_t)a1, a2);
  if (!(_DWORD)result)
  {
    a1[6] = a1[5];
    a1[1] = a2;
  }

  return result;
}

uint64_t ktrace_chunk_array_append_internal(uint64_t a1, void *a2)
{
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  if (!a2) {
    ktrace_remotetime_update_params_cold_1();
  }
  int v4 = *(void **)a1;
  if (!v4)
  {
    int v4 = malloc(0x38uLL);
    *(void *)a1 = v4;
    if (v4)
    {
      *(void *)(a1 + 24) = 7LL;
      goto LABEL_9;
    }

    return *__error();
  }

  uint64_t v5 = *(void *)(a1 + 24);
  if (v5 == *(void *)(a1 + 16))
  {
    uint64_t v6 = (2 * v5) | 1;
    int v4 = realloc(v4, 8 * v6);
    if (v4)
    {
      *(void *)a1 = v4;
      *(void *)(a1 + 24) = v6;
      goto LABEL_9;
    }

    return *__error();
  }

LABEL_9:
  uint64_t v7 = 0LL;
  uint64_t v8 = *(void *)(a1 + 16);
  a2[3] = v8;
  *(void *)(a1 + 40) = a2[1] + a2[2];
  *(void *)(a1 + 16) = v8 + 1;
  *((void *)v4 + v_Block_object_dispose(va, 8) = a2;
  return v7;
}

  int v18 = ktrace_chunk_create(a1, 7424, 1, 0, v16, v15);
  int v19 = ktrace_chunk_array_append((void *)(a1 + 24), v18);
  if (v19)
  {
    *__error() = v19;
    char v20 = *__error();
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR)) {
      synthesize_thread_map_chunk_cold_1();
    }
    *__error() = v20;
    free(v18);
    return 0LL;
  }

  return v18;
}

    int v19 = v23;
    int v18 = v24;
    *(void *)(v5 + 16) = a1;
    *(void *)(v5 + 24) = v17;
    sub_186C5AAEC();
    (*(void (**)(uint64_t, char *, uint64_t))(v19 + 32))( v5 + OBJC_IVAR____TtC6ktrace8Reporter_creationDate,  v10,  v18);
    char v20 = objc_msgSend(objc_allocWithZone(MEMORY[0x1896078C0]), sel_init);
    *(void *)(v5 + OBJC_IVAR____TtC6ktrace8Reporter_initialFormatter) = v20;
    uint64_t v21 = objc_msgSend(objc_allocWithZone(MEMORY[0x189607840]), sel_init);
    objc_msgSend(v21, sel_setUnitsStyle_, 1);
    objc_msgSend(v21, sel_setZeroFormattingBehavior_, 14);
    objc_msgSend(v21, sel_setAllowedUnits_, 192);
    *(void *)(v5 + OBJC_IVAR____TtC6ktrace8Reporter_updateFormatter) = v21;
    return v5;
  }

  v10[53] = v13;
  if ((v17 & 1) != 0)
  {
    memmove(v10 + 25, (const void *)(*(void *)(*v5 + 56) + 200 * v13), 0xC8uLL);
    nullsub_1(v10 + 25);
  }

  else
  {
    sub_186C27F8C((uint64_t)(v10 + 25));
  }

  sub_186BFA418((uint64_t)(v10 + 25), (uint64_t)v10, &qword_18C6A27A8);
  return sub_186C1D654;
}

    uint64_t v5 = 0LL;
LABEL_12:
    void *result = a4;
    return (uint64_t **)v5;
  }

  __break(1u);
  return result;
}

  __break(1u);
}

void *synthesize_thread_map_chunk(uint64_t a1, unint64_t a2, int a3)
{
  uint64_t v39 = *MEMORY[0x1895F89C0];
  size_t v6 = (32LL * a3) | 4;
  uint64_t v7 = malloc(v6);
  if (!v7)
  {
    int v17 = *__error();
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR)) {
      synthesize_thread_map_chunk_cold_2();
    }
    *__error() = v17;
    uint64_t v15 = 0LL;
    uint64_t v16 = 0LL;
    if (*__error()) {
      goto LABEL_23;
    }
    goto LABEL_9;
  }

  uint64_t v8 = v7;
  size_t v9 = 28LL * a3 + 4;
  unint64_t v10 = ktrace_file_read(a1, v7, v9, a2);
  if (v10 < v9)
  {
    unint64_t v11 = v10;
    int v12 = *__error();
    int v13 = *__error();
    ktrace_log_init();
    int v14 = (os_log_s *)ktrace_file_log;
    if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR))
    {
      int v33 = 134218496;
      unint64_t v34 = v11;
      __int16 v35 = 2048;
      size_t v36 = v9;
      __int16 v37 = 1024;
      int v38 = v13;
      _os_log_error_impl( &dword_186BA3000,  v14,  OS_LOG_TYPE_ERROR,  "only read %zu bytes of expected %zu bytes for 32-bit V1 thread map (%{errno}d)",  (uint8_t *)&v33,  0x1Cu);
    }

    uint64_t v15 = 0LL;
    uint64_t v16 = 0LL;
    *__error() = v13;
    goto LABEL_22;
  }

  if (thread_map_entries_valid(v8, a3, 0))
  {
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_DEBUG)) {
      synthesize_thread_map_chunk_cold_3();
    }
    uint64_t v21 = 0LL;
LABEL_21:
    int v12 = 0;
    uint64_t v15 = v21 + a2;
    uint64_t v16 = v9 - v21;
    goto LABEL_22;
  }

  BOOL v22 = thread_map_entries_valid(v8 + 1, a3, 0);
  ktrace_log_init();
  BOOL v23 = os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_DEBUG);
  if (v22)
  {
    if (v23) {
      synthesize_thread_map_chunk_cold_4();
    }
    uint64_t v21 = 4LL;
    goto LABEL_21;
  }

  if (v23) {
    synthesize_thread_map_chunk_cold_8();
  }
  size_t v25 = v6 - v9;
  unint64_t v26 = ktrace_file_read(a1, (char *)v8 + v9, v25, v9 + a2);
  if (v26 >= v25)
  {
    BOOL v30 = thread_map_entries_valid(v8 + 1, a3, 1);
    ktrace_log_init();
    BOOL v31 = os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_DEBUG);
    if (v30)
    {
      uint64_t v16 = 32LL * a3;
      if (v31) {
        synthesize_thread_map_chunk_cold_5();
      }
      int v12 = 0;
      *(_BYTE *)(a1 + 29_Block_object_dispose(va, 8) = 1;
      uint64_t v15 = a2 + 4;
    }

    else
    {
      if (v31) {
        synthesize_thread_map_chunk_cold_7();
      }
      int v32 = *__error();
      ktrace_log_init();
      if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR)) {
        synthesize_thread_map_chunk_cold_6();
      }
      uint64_t v15 = 0LL;
      uint64_t v16 = 0LL;
      *__error() = v32;
      int v12 = 22;
    }
  }

  else
  {
    unint64_t v27 = v26;
    int v12 = *__error();
    int v28 = *__error();
    ktrace_log_init();
    int v29 = (os_log_s *)ktrace_file_log;
    if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR))
    {
      int v33 = 134218496;
      unint64_t v34 = v27;
      __int16 v35 = 2048;
      size_t v36 = v25;
      __int16 v37 = 1024;
      int v38 = v28;
      _os_log_error_impl( &dword_186BA3000,  v29,  OS_LOG_TYPE_ERROR,  "only read %zu bytes of expected %zu bytes in 64-bit V1 thread map (%{errno}d)",  (uint8_t *)&v33,  0x1Cu);
    }

    uint64_t v15 = 0LL;
    uint64_t v16 = 0LL;
    *__error() = v28;
  }

LABEL_22:
  free(v8);
  if (v12)
  {
LABEL_23:
    int v18 = 0LL;
    *__error() = 0;
    return v18;
  }

    size_t v6 = (v11 - 1) & v11;
    size_t v9 = __clz(__rbit64(v11)) + (v2 << 6);
LABEL_5:
    memcpy(__dst, (const void *)(*(void *)(v1 + 48) + 328 * v9), 0x141uLL);
    sub_186C23978((uint64_t)__dst);
    sub_186C1950C(__src, __dst);
    memcpy(v14, __src, 0x141uLL);
    uint64_t result = sub_186C23A98((uint64_t)v14);
  }

  int v12 = v10 + 4;
  if (v12 >= v7) {
    return swift_release();
  }
  unint64_t v11 = *(void *)(v3 + 8 * v12);
  if (v11)
  {
    int v2 = v12;
    goto LABEL_22;
  }

  while (1)
  {
    int v2 = v12 + 1;
    if (__OFADD__(v12, 1LL)) {
      break;
    }
    if (v2 >= v7) {
      return swift_release();
    }
    unint64_t v11 = *(void *)(v3 + 8 * v2);
    ++v12;
    if (v11) {
      goto LABEL_22;
    }
  }

    uint64_t v7 = (v15 - 1) & v15;
    unint64_t v10 = __clz(__rbit64(v15)) + (v3 << 6);
LABEL_5:
    unint64_t v11 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v10);
    int v12 = *v11;
    int v13 = v11[1];
    swift_bridgeObjectRetain();
    sub_186C18EB0(&v17, v12, v13);
    uint64_t result = swift_bridgeObjectRelease();
  }

  uint64_t v16 = v14 + 4;
  if (v16 >= v8)
  {
LABEL_23:
    swift_release();
    return v18;
  }

  uint64_t v15 = *(void *)(v4 + 8 * v16);
  if (v15)
  {
    uint64_t v3 = v16;
    goto LABEL_22;
  }

  while (1)
  {
    uint64_t v3 = v16 + 1;
    if (__OFADD__(v16, 1LL)) {
      break;
    }
    if (v3 >= v8) {
      goto LABEL_23;
    }
    uint64_t v15 = *(void *)(v4 + 8 * v3);
    ++v16;
    if (v15) {
      goto LABEL_22;
    }
  }

  int v20 = *v5;
  *(void *)(*v5 + 8 * (a3 >> 6) + 56) |= 1LL << a3;
  uint64_t v21 = (uint64_t *)(*(void *)(v20 + 48) + 16 * a3);
  *uint64_t v21 = v8;
  v21[1] = a2;
  BOOL v22 = *(void *)(v20 + 16);
  BOOL v23 = __OFADD__(v22, 1LL);
  uint64_t v24 = v22 + 1;
  if (v23) {
    __break(1u);
  }
  else {
    *(void *)(v20 + 16) = v24;
  }
  return result;
}

    unint64_t v10 = (v28 - 1) & v28;
    int v18 = __clz(__rbit64(v28)) + (v13 << 6);
    if ((v53 & 1) != 0)
    {
LABEL_10:
      int v19 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v18);
      int v20 = *v19;
      uint64_t v21 = v19[1];
      BOOL v22 = *(void *)(v5 + 56) + 200 * v18;
      v72 = *(_OWORD *)v22;
      uint64_t v54 = *(void *)(v22 + 32);
      BOOL v23 = *(_BYTE *)(v22 + 40);
      __int16 v58 = *(void *)(v22 + 48);
      uint64_t v59 = *(void *)(v22 + 16);
      unint64_t v55 = *(void *)(v22 + 56);
      __int16 v56 = *(void *)(v22 + 72);
      v57 = *(void *)(v22 + 24);
      __int16 v60 = *(_BYTE *)(v22 + 80);
      int v61 = *(void *)(v22 + 64);
      uint64_t v62 = *(void *)(v22 + 88);
      v63 = *(void *)(v22 + 112);
      v64 = *(void *)(v22 + 96);
      v65 = *(void *)(v22 + 120);
      v66 = *(void *)(v22 + 104);
      v67 = *(_OWORD *)(v22 + 128);
      uint64_t v24 = *(_BYTE *)(v22 + 144);
      size_t v25 = *(_BYTE *)(v22 + 168);
      v70 = *(_OWORD *)(v22 + 176);
      v71 = *(void *)(v22 + 152);
      v68 = *(void *)(v22 + 160);
      v69 = *(void *)(v22 + 192);
      goto LABEL_24;
    }

  sub_186C5B260();
  sub_186C5ADD4();
  sub_186C5B2FC();
  sub_186C5ADD4();
  sub_186C5B35C();
  __break(1u);
}

          size_t v9 = (v14 - 1) & v14;
          uint64_t v62 = v15;
          int v12 = __clz(__rbit64(v14)) + (v15 << 6);
        }

        int v17 = (uint64_t *)(*(void *)(v4 + 48) + 16 * v12);
        int v19 = *v17;
        int v18 = v17[1];
        sub_186C5B59C();
        swift_bridgeObjectRetain();
        sub_186C5ADA4();
        int v20 = sub_186C5B5D8();
        uint64_t v21 = -1LL << *(_BYTE *)(v5 + 32);
        BOOL v22 = v20 & ~v21;
        BOOL v23 = v22 >> 6;
        uint64_t v24 = 1LL << v22;
        if (((1LL << v22) & *(void *)(v10 + 8 * (v22 >> 6))) != 0) {
          break;
        }
LABEL_6:
        uint64_t result = swift_bridgeObjectRelease();
        size_t v6 = v62;
        uint64_t v5 = a3;
        int v4 = a4;
      }

      size_t v25 = *(void *)(a3 + 48);
      unint64_t v26 = (void *)(v25 + 16 * v22);
      unint64_t v27 = *v26 == v19 && v26[1] == v18;
      if (!v27 && (sub_186C5B4F4() & 1) == 0)
      {
        int v28 = ~v21;
        for (uint64_t i = v22 + 1; ; uint64_t i = v30 + 1)
        {
          BOOL v30 = i & v28;
          BOOL v31 = (void *)(v25 + 16 * v30);
          int v32 = *v31 == v19 && v31[1] == v18;
          if (v32 || (sub_186C5B4F4() & 1) != 0)
          {
            uint64_t result = swift_bridgeObjectRelease();
            BOOL v23 = v30 >> 6;
            uint64_t v24 = 1LL << v30;
            goto LABEL_38;
          }
        }

        goto LABEL_6;
      }

      uint64_t result = swift_bridgeObjectRelease();
LABEL_38:
      size_t v6 = v62;
      uint64_t v5 = a3;
      v57[v23] |= v24;
      int v33 = __OFADD__(v61++, 1LL);
      int v4 = a4;
      if (v33) {
        goto LABEL_82;
      }
    }
  }

  unint64_t v34 = 0LL;
  __int16 v60 = a3 + 56;
  int v61 = 0LL;
  __int16 v35 = 1LL << *(_BYTE *)(a3 + 32);
  if (v35 < 64) {
    size_t v36 = ~(-1LL << v35);
  }
  else {
    size_t v36 = -1LL;
  }
  __int16 v37 = v36 & *(void *)(a3 + 56);
  v63 = (unint64_t)(v35 + 63) >> 6;
  int v38 = a4 + 56;
  while (1)
  {
    if (v37)
    {
      uint64_t v39 = __clz(__rbit64(v37));
      v37 &= v37 - 1;
      int v40 = v39 | (v34 << 6);
      goto LABEL_63;
    }

    uint64_t v41 = v34 + 1;
    if (__OFADD__(v34, 1LL))
    {
LABEL_81:
      __break(1u);
LABEL_82:
      __break(1u);
LABEL_83:
      __break(1u);
      goto LABEL_84;
    }

    if (v41 >= v63) {
      goto LABEL_79;
    }
    int v42 = *(void *)(v60 + 8 * v41);
    ++v34;
    if (!v42)
    {
      unint64_t v34 = v41 + 1;
      if (v41 + 1 >= v63) {
        goto LABEL_79;
      }
      int v42 = *(void *)(v60 + 8 * v34);
      if (!v42)
      {
        unint64_t v34 = v41 + 2;
        if (v41 + 2 >= v63) {
          goto LABEL_79;
        }
        int v42 = *(void *)(v60 + 8 * v34);
        if (!v42) {
          break;
        }
      }
    }

    int v2 = 0LL;
    int v20 = 0LL;
    uint64_t v21 = 0LL;
    BOOL v22 = 0;
    int v19 = 5LL;
    goto LABEL_23;
  }

  uint64_t result = ktrace_chunk_is_64_bit((uint64_t)v2);
  if (v5 != 7936)
  {
    if (v5 == 20982)
    {
      uint64_t result = ktrace_chunk_size((uint64_t)v2);
      if (result >= 0x30)
      {
        size_t v36 = 0u;
        __int16 v37 = 0u;
        __int16 v35 = 0u;
        int v13 = ktrace_chunk_copy_data(v2, 0LL, &v35, 0x30uLL);
        if (v13)
        {
          int v14 = v13;
          sub_186C4122C();
          swift_allocError();
          uint64_t v15 = 0xD00000000000001BLL;
          uint64_t v16 = "copying first artrace event";
LABEL_40:
          *(void *)unint64_t v10 = v15;
          *(void *)(v10 + _Block_object_dispose(va, 8) = (unint64_t)(v16 - 32) | 0x8000000000000000LL;
          *(_DWORD *)(v10 + 16) = v14;
          goto LABEL_41;
        }

        int v28 = v35;
        memset(v34, 0, sizeof(v34));
        int v29 = ktrace_chunk_size_t(v2);
        if (!__OFSUB__(v29, 48LL))
        {
          uint64_t result = ktrace_chunk_copy_data(v2, v29 - 48, v34, 0x30uLL);
          if ((_DWORD)result)
          {
            int v14 = result;
            sub_186C4122C();
            swift_allocError();
            uint64_t v15 = 0xD00000000000001ALL;
            uint64_t v16 = "copying last artrace event";
            goto LABEL_40;
          }

          BOOL v22 = 0;
          int v20 = v28 & 0xFFFFFFFFFFFFFFLL;
          uint64_t v21 = *(void *)&v34[0] & 0xFFFFFFFFFFFFFFLL;
          int v19 = 4LL;
          goto LABEL_23;
        }

        goto LABEL_56;
      }
    }

    goto LABEL_22;
  }

  int v17 = result;
  if ((_DWORD)result) {
    int v18 = 64LL;
  }
  else {
    int v18 = 32LL;
  }
  if ((_DWORD)result) {
    int v19 = 3LL;
  }
  else {
    int v19 = 2LL;
  }
  uint64_t result = ktrace_chunk_size((uint64_t)v2);
  if (result < 0xC) {
    goto LABEL_22;
  }
  BOOL v23 = (void *)swift_slowAlloc();
  uint64_t v24 = ktrace_chunk_size_t(v2);
  if (__OFSUB__(v24, 12LL))
  {
    __break(1u);
LABEL_55:
    __break(1u);
LABEL_56:
    __break(1u);
    goto LABEL_57;
  }

  if (v24 - 12 >= 64) {
    size_t v25 = 64LL;
  }
  else {
    size_t v25 = v24 - 12;
  }
  *(void *)&v34[0] = v25;
  unint64_t v26 = ktrace_chunk_copy_data(v2, 12LL, v23, v25);
  if (v26)
  {
    size_t v9 = v26;
    sub_186C4122C();
    swift_allocError();
    unint64_t v11 = 0xD00000000000001ELL;
    int v12 = "copying first compressed event";
    goto LABEL_30;
  }

  bzero(&v35, 0x388uLL);
  ktrace_compressor_reset(&v35);
  type metadata accessor for ktrace_point(0LL);
  BOOL v30 = sub_186C5AF48();
  *(void *)(v30 + 16) = 1LL;
  *(_OWORD *)(v30 + 64) = 0u;
  *(_OWORD *)(v30 + 80) = 0u;
  *(_OWORD *)(v30 + 4_Block_object_dispose(va, 8) = 0u;
  *(_OWORD *)(v30 + 32) = 0u;
  if (decompress_64((unsigned int *)&v35, (uint64_t)v23, (unint64_t *)v34, v30 + 32, v18) == v18)
  {
    BOOL v31 = *(void *)(v30 + 16);
    if (v17)
    {
      if (!v31)
      {
LABEL_57:
        __break(1u);
LABEL_58:
        __break(1u);
      }

      int v20 = *(void *)(v30 + 32);
      uint64_t result = swift_bridgeObjectRelease();
    }

    else
    {
      if (!v31) {
        goto LABEL_58;
      }
      int v33 = *(void *)(v30 + 32);
      uint64_t result = swift_bridgeObjectRelease();
      int v20 = v33 & 0xFFFFFFFFFFFFFFLL;
    }

    uint64_t v21 = 0LL;
    BOOL v22 = 1;
    goto LABEL_23;
  }

  sub_186C4122C();
  swift_allocError();
  *(void *)int v32 = 0xD000000000000022LL;
  *(void *)(v32 + _Block_object_dispose(va, 8) = 0x8000000186C67D50LL;
  *(_DWORD *)(v32 + 16) = 0;
  *(_BYTE *)(v32 + 20) = 0;
  swift_willThrow();
  return swift_bridgeObjectRelease();
}

void *synthesize_events_chunk(uint64_t a1, unint64_t a2)
{
  if ((unint64_t)ktrace_file_read(a1, (void *)(a1 + 160), 8uLL, a2) <= 7)
  {
    int v4 = *__error();
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR)) {
      synthesize_events_chunk_cold_1();
    }
LABEL_21:
    uint64_t v7 = 0LL;
    *__error() = v4;
    return v7;
  }

  if (!*(_BYTE *)(a1 + 298))
  {
    if ((unint64_t)ktrace_file_read(a1, &v11, 8uLL, a2 + 56) <= 7)
    {
      int v4 = *__error();
      ktrace_log_init();
      if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR)) {
        synthesize_events_chunk_cold_6();
      }
      goto LABEL_21;
    }

    if (!v11)
    {
      ktrace_log_init();
      if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_DEBUG)) {
        synthesize_events_chunk_cold_5();
      }
      *(_BYTE *)(a1 + 29_Block_object_dispose(va, 8) = 1;
    }
  }

  ktrace_log_init();
  uint64_t v5 = (os_log_s *)ktrace_file_log;
  if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_DEBUG)) {
    synthesize_events_chunk_cold_4(a1, a2, v5);
  }
  size_t v6 = ktrace_chunk_create(a1, 7680, 1, 0, *(void *)(a1 + 280) - (a2 - 8), a2 - 8);
  if (!v6)
  {
    int v4 = *__error();
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR)) {
      synthesize_events_chunk_cold_2();
    }
    goto LABEL_21;
  }

  uint64_t v7 = v6;
  int appended = ktrace_chunk_array_append_internal(a1 + 24, v6);
  if (appended)
  {
    int v9 = appended;
    free(v7);
    *__error() = v9;
    int v4 = *__error();
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR)) {
      synthesize_events_chunk_cold_3();
    }
    goto LABEL_21;
  }

  *(void *)(a1 + 72) = *(void *)(a1 + 64);
  *(void *)(a1 + 32) = v7;
  return v7;
}

BOOL thread_map_entries_valid(_DWORD *a1, int a2, int a3)
{
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  if (a2 >= 100) {
    int v3 = 100;
  }
  else {
    int v3 = a2;
  }
  if (a3) {
    uint64_t v4 = 3LL;
  }
  else {
    uint64_t v4 = 2LL;
  }
  if (!a3)
  {
    if (*a1) {
      goto LABEL_10;
    }
    return 0LL;
  }

  if (!*(void *)a1) {
    return 0LL;
  }
LABEL_10:
  int v5 = 0;
  if (v3)
  {
    size_t v6 = &a1[v4];
    uint64_t v7 = v4 * 4 + 20;
    do
    {
      uint64_t v8 = 0LL;
      --v3;
      do
      {
        if (!*((_BYTE *)v6 + v8)) {
          break;
        }
        ++v8;
      }

      while (v8 != 20);
      size_t v6 = (_DWORD *)((char *)v6 + v7);
    }

    while (v3);
  }

  return v5 == 0;
}

BOOL __ktrace_file_iterate_subfile_block_invoke(uint64_t a1, uint64_t *a2)
{
  BOOL v4 = 1LL;
  if (ktrace_chunk_tag((uint64_t)a2) == *(_DWORD *)(a1 + 72))
  {
    v12[0] = 0LL;
    v12[1] = v12;
    v12[2] = 0x2000000000LL;
    char v13 = 1;
    v8[0] = MEMORY[0x1895F87A8];
    v8[1] = 0x40000000LL;
    void v8[2] = __ktrace_file_iterate_subfile_block_invoke_2;
    v8[3] = &unk_189F55380;
    int v11 = *(_DWORD *)(a1 + 76);
    __int128 v9 = *(_OWORD *)(a1 + 48);
    uint64_t v10 = *(void *)(a1 + 64);
    _DWORD v8[4] = *(void *)(a1 + 32);
    v8[5] = v12;
    *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = ktrace_chunk_iterate_subchunks(a2, 0LL, (uint64_t)v8);
    uint64_t v5 = *(void *)(*(void *)(a1 + 48) + 8LL);
    int v6 = *(_DWORD *)(v5 + 24);
    if (!v6) {
      int v6 = *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL);
    }
    *(_DWORD *)(v5 + 24) = v6;
    if (*(_BYTE *)(*(void *)(*(void *)(a1 + 64) + 8LL) + 24LL)) {
      BOOL v4 = *(_DWORD *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL) == 0;
    }
    else {
      BOOL v4 = 0LL;
    }
    _Block_object_dispose(v12, 8);
  }

  return v4;
}

BOOL __ktrace_file_iterate_subfile_block_invoke_2(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *(void *)(*(void *)(a1 + 40) + 8LL);
  int v5 = *(unsigned __int8 *)(v4 + 24);
  *(_BYTE *)(v4 + 24) = 0;
  int v6 = ktrace_chunk_tag((uint64_t)a2);
  BOOL result = 1LL;
  if (v6 != 32777 && v6 != 32781)
  {
    if (v6 != 32780)
    {
      if (!*(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL))
      {
        *(_BYTE *)(*(void *)(*(void *)(a1 + 64) + 8LL) + 24LL) = (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
        return *(_BYTE *)(*(void *)(*(void *)(a1 + 64) + 8LL) + 24LL) != 0;
      }

      *(_DWORD *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL) = 79;
      int v8 = *__error();
      ktrace_log_init();
      if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
        __ktrace_file_iterate_subfile_block_invoke_2_cold_1();
      }
      goto LABEL_12;
    }

    if (!v5
      || (unint64_t)ktrace_chunk_size((uint64_t)a2) < 4
      || ktrace_chunk_version_major((uint64_t)a2))
    {
      *(_DWORD *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL) = 79;
      int v8 = *__error();
      ktrace_log_init();
      if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
        __ktrace_file_iterate_subfile_block_invoke_2_cold_2();
      }
LABEL_12:
      __int128 v9 = __error();
      BOOL result = 0LL;
      *__int128 v9 = v8;
      return result;
    }

    *(_DWORD *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL) = ktrace_chunk_copy_data(a2, 0LL, &v10, 4uLL);
    if (*(_DWORD *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL) || v10 != *(_DWORD *)(a1 + 72))
    {
      return 0LL;
    }

    else
    {
      BOOL result = 1LL;
      *(_BYTE *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 24LL) = 1;
    }
  }

  return result;
}

uint64_t ktrace_chunk_array_read_all(uint64_t result, uint64_t a2)
{
  if (!result) {
    ktrace_remotetime_update_params_cold_1();
  }
  if (!a2) {
    ktrace_remotetime_update_params_cold_1();
  }
  if (!*(void *)(a2 + 8))
  {
    uint64_t v3 = result;
    uint64_t v4 = 0LL;
    do
      BOOL result = ktrace_chunk_array_next(v3, a2, &v4);
    while (!(_DWORD)result && v4);
  }

  return result;
}

void *setup_events_chunk(uint64_t a1, int a2)
{
  uint64_t v12 = 0LL;
  uint64_t v13 = 0LL;
  int v14 = 0;
  if (a2) {
    CFIndex v3 = 12LL;
  }
  else {
    CFIndex v3 = 8LL;
  }
  if (a2) {
    uint64_t v4 = (UInt8 *)&v13;
  }
  else {
    uint64_t v4 = (UInt8 *)&v12;
  }
  if ((a2 & 1) != 0)
  {
    int v5 = 7936;
  }

  else
  {
    int v6 = ktrace_file_align_next(a1, 0xFF8uLL);
    *__error() = v6;
    if (*__error()) {
      return 0LL;
    }
    int v5 = 7680;
  }

  int appended = ktrace_file_append_start(a1, v5, 0, 0);
  if (!appended)
  {
    int v10 = *__error();
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR)) {
      setup_events_chunk_cold_1();
    }
    goto LABEL_18;
  }

  uint64_t v7 = appended;
  int v9 = ktrace_file_append_data(a1, (uint64_t)appended, v4, v3);
  if (v9)
  {
    *__error() = v9;
    int v10 = *__error();
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR)) {
      setup_events_chunk_cold_2();
    }
LABEL_18:
    uint64_t v7 = 0LL;
    *__error() = v10;
  }

  return v7;
}

uint64_t finish_events_chunk(uint64_t a1, uint64_t a2, int a3, int a4)
{
  if (a3)
  {
    int v10 = a4;
    uint64_t v6 = ktrace_chunk_overwrite(a2, 8LL, &v10, 4uLL);
    if ((_DWORD)v6)
    {
      uint64_t appended = v6;
      *__error() = v6;
      int v8 = *__error();
      ktrace_log_init();
      if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR)) {
        finish_events_chunk_cold_2();
      }
LABEL_8:
      *__error() = v8;
      return appended;
    }
  }

  uint64_t appended = ktrace_file_append_finish(a1, a2);
  if ((_DWORD)appended)
  {
    *__error() = appended;
    int v8 = *__error();
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR)) {
      finish_events_chunk_cold_1();
    }
    goto LABEL_8;
  }

  return appended;
}

uint64_t append_transformed_events_internal( uint64_t a1, uint64_t *a2, uint64_t a3, unint64_t a4, UInt8 *a5, int a6, void *a7, uint64_t a8, uint64_t a9)
{
  if (!a2) {
    ktrace_remotetime_update_params_cold_1();
  }
  uint64_t v29 = 0LL;
  BOOL v30 = &v29;
  uint64_t v31 = 0x2000000000LL;
  int v32 = 0;
  uint64_t v10 = 32LL;
  if (a6) {
    uint64_t v10 = 64LL;
  }
  if (!a4) {
    ktrace_remotetime_update_params_cold_1();
  }
  if (!a5) {
    ktrace_remotetime_update_params_cold_1();
  }
  uint64_t v25 = 0LL;
  unint64_t v26 = &v25;
  uint64_t v27 = 0x2000000000LL;
  uint64_t v28 = 0LL;
  uint64_t v21 = 0LL;
  BOOL v22 = &v21;
  uint64_t v23 = 0x2000000000LL;
  uint64_t v24 = 0LL;
  v18[0] = MEMORY[0x1895F87A8];
  v18[1] = 0x40000000LL;
  v18[2] = __append_transformed_events_internal_block_invoke;
  v18[3] = &unk_189F553D0;
  char v19 = a6;
  v18[4] = a9;
  void v18[5] = &v25;
  BOOL v20 = a8 != 0;
  v18[8] = 0x400000LL;
  void v18[9] = a8;
  v18[10] = a5;
  v18[11] = a1;
  v18[12] = a2;
  v18[13] = v10;
  v18[6] = &v29;
  v18[7] = &v21;
  trace_enumerate(a3, a4, a6, (uint64_t)v18);
  uint64_t v15 = *((unsigned int *)v30 + 6);
  if (!(_DWORD)v15)
  {
    CFIndex v16 = v26[3];
    if (v16)
    {
      uint64_t v15 = lazy_chunk_write(a1, a2, a8 != 0, a5, v16);
      *((_DWORD *)v30 + 6) = v15;
    }

    else
    {
      uint64_t v15 = 0LL;
    }
  }

  *a7 = v22[3];
  _Block_object_dispose(&v21, 8);
  _Block_object_dispose(&v25, 8);
  _Block_object_dispose(&v29, 8);
  return v15;
}

uint64_t __append_transformed_events_internal_block_invoke(uint64_t a1, char *__src)
{
  unint64_t v4 = *(void *)__src;
  if (*(_BYTE *)(a1 + 112))
  {
    unint64_t v5 = *((unsigned int *)__src + 13);
    uint64_t v6 = __src + 48;
    uint64_t v7 = *((void *)__src + 1);
    uint64_t v8 = *((void *)__src + 2);
    uint64_t v9 = *((void *)__src + 3);
    uint64_t v10 = *((void *)__src + 4);
    uint64_t v11 = *((void *)__src + 5);
  }

  else
  {
    unint64_t v5 = HIBYTE(v4);
    v4 &= 0xFFFFFFFFFFFFFFuLL;
    uint64_t v6 = __src + 28;
    uint64_t v7 = *((unsigned int *)__src + 2);
    uint64_t v8 = *((unsigned int *)__src + 3);
    uint64_t v9 = *((unsigned int *)__src + 4);
    uint64_t v10 = *((unsigned int *)__src + 5);
    uint64_t v11 = *((unsigned int *)__src + 6);
  }

  uint64_t v12 = *(unsigned int *)v6;
  uint64_t v13 = *(void *)(a1 + 32);
  if (!v13
    || (uint64_t result = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _DWORD))(v13 + 16))( v13,  v4,  v12,  v7,  v8,  v9,  v10,  v11,  v5),  (_DWORD)result))
  {
    CFIndex v15 = *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL);
    unint64_t v16 = *(void *)(a1 + 64) - v15;
    if (*(_BYTE *)(a1 + 113))
    {
      int v17 = *(unsigned int **)(a1 + 72);
      uint64_t v18 = *(void *)(a1 + 80);
      char v19 = &v17[12 * *v17];
      *((void *)v17 + 2) = v4;
      *((void *)v19 + 3) = v7;
      *((void *)v19 + 4) = v8;
      *((void *)v19 + 5) = v9;
      *((void *)v19 + 6) = v10;
      *((void *)v19 + 7) = v11;
      *((void *)v19 + _Block_object_dispose(va, 8) = v12 | (v5 << 32);
      BOOL v20 = ktrace_compressor_commit( (int *)v17,  (void *)(v18 + *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL)),  v16);
      if (!v20)
      {
        *(_DWORD *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL) = lazy_chunk_write( *(void *)(a1 + 88),  *(uint64_t **)(a1 + 96),  *(unsigned __int8 *)(a1 + 113),  *(UInt8 **)(a1 + 80),  *(void *)(*(void *)(*(void *)(a1 + 40)
                                                                                              + 8LL)
                                                                                  + 24LL));
        uint64_t result = *(unsigned int *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL);
        if ((_DWORD)result) {
          return result;
        }
        *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = 0LL;
        BOOL v20 = ktrace_compressor_commit(*(int **)(a1 + 72), *(void **)(a1 + 80), *(void *)(a1 + 64));
        if (!v20) {
          ktrace_remotetime_update_params_cold_1();
        }
      }
    }

    else
    {
      size_t v21 = *(void *)(a1 + 104);
      if (v21 > v16)
      {
        *(_DWORD *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL) = lazy_chunk_write( *(void *)(a1 + 88),  *(uint64_t **)(a1 + 96),  0,  *(UInt8 **)(a1 + 80),  v15);
        *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = 0LL;
        CFIndex v15 = *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL);
        size_t v21 = *(void *)(a1 + 104);
      }

      memcpy((void *)(*(void *)(a1 + 80) + v15), __src, v21);
      BOOL v20 = *(char **)(a1 + 104);
    }

    uint64_t result = 0LL;
    ++*(void *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 24LL);
    *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) += v20;
  }

  return result;
}

uint64_t lazy_chunk_write(uint64_t a1, uint64_t *a2, int a3, UInt8 *bytes, CFIndex length)
{
  if (!a2) {
    ktrace_remotetime_update_params_cold_1();
  }
  uint64_t v9 = *a2;
  if (!v9)
  {
    uint64_t v10 = setup_events_chunk(a1, a3);
    if (!v10) {
      return *__error();
    }
    uint64_t v9 = (uint64_t)v10;
    *a2 = (uint64_t)v10;
  }

  uint64_t result = ktrace_file_append_data(a1, v9, bytes, length);
  if ((_DWORD)result) {
    *a2 = 0LL;
  }
  return result;
}

uint64_t __find_unused_subfile_id_block_invoke(uint64_t result, uint64_t a2)
{
  unsigned int v2 = *(_DWORD *)(a2 + 216);
  CFIndex v3 = *(unsigned int **)(result + 32);
  if (v2 >= *v3) {
    *CFIndex v3 = v2 + 1;
  }
  return result;
}

void OUTLINED_FUNCTION_9(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
}

  ;
}

void OUTLINED_FUNCTION_11(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
}

  ;
}

void OUTLINED_FUNCTION_13(uint64_t a1@<X8>)
{
  *(void *)(v1 - _Block_object_dispose(va, 8) = a1;
}

void OUTLINED_FUNCTION_14( void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

  ;
}

  ;
}

void OUTLINED_FUNCTION_18(void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
}

  ;
}

void ktrace_catalog_internal::IterateProcesses(uint64_t a1, unsigned int **a2, unsigned int **a3, uint64_t a4)
{
  for (uint64_t i = *a2; i != *a3; *a2 = i)
  {
    uint64_t i = *a2 + 1;
  }

void ktrace_catalog_internal::IterateThreads(uint64_t a1, unsigned int **a2, unsigned int **a3, uint64_t a4)
{
  for (uint64_t i = *a2; i != *a3; *a2 = i)
  {
    uint64_t i = *a2 + 1;
  }

void *ktrace_catalog_internal::IterateLostEvents(void *result, uint64_t a2)
{
  unsigned int v2 = (unsigned int *)(*result + *(unsigned __int16 *)(*result - *(int *)*result + 10LL));
  CFIndex v3 = (unsigned int *)((char *)v2 + *v2);
  unsigned int v6 = *v3;
  unint64_t v4 = v3 + 1;
  uint64_t v5 = v6;
  if (v6)
  {
    uint64_t v8 = 4 * v5 - 4;
    uint64_t v9 = v4;
    do
    {
      unsigned int v10 = *v9++;
      uint64_t result = (void *)(*(uint64_t (**)(uint64_t, char *))(a2 + 16))(a2, (char *)v4 + v10);
      if ((_DWORD)result) {
        BOOL v11 = v8 == 0;
      }
      else {
        BOOL v11 = 1;
      }
      v8 -= 4LL;
      unint64_t v4 = v9;
    }

    while (!v11);
  }

  return result;
}

unsigned int **ktrace_catalog_internal::IterateProcesses(unsigned int **result, uint64_t a2)
{
  CFIndex v3 = *result;
  uint64_t v4 = (int)**result;
  uint64_t v5 = *(unsigned __int16 *)((char *)*result - v4 + 6);
  if (*(_WORD *)((char *)*result - v4 + 6))
  {
    uint64_t v6 = *(unsigned int *)((char *)v3 + v5);
    uint64_t v7 = (char *)v3 + v5 + v6;
  }

  else
  {
    uint64_t v5 = 0LL;
    uint64_t v7 = 0LL;
    uint64_t v6 = **result;
  }

  uint64_t v8 = (uint64_t)&v3[*(unsigned int *)((char *)v3 + v5 + v6)] + v5 + v6;
  if (v7 != (char *)v8)
  {
    uint64_t v9 = v7 + 4;
    unsigned int v10 = (unsigned int *)(v8 + 4);
    BOOL v11 = (unsigned int *)(v7 + 4);
    do
    {
      unsigned int v12 = *v11++;
      uint64_t result = (unsigned int **)(*(uint64_t (**)(uint64_t, char *))(a2 + 16))(a2, &v9[v12]);
      if ((_DWORD)result) {
        BOOL v13 = v11 == v10;
      }
      else {
        BOOL v13 = 1;
      }
      uint64_t v9 = (char *)v11;
    }

    while (!v13);
  }

  return result;
}

unsigned int **ktrace_catalog_internal::IterateThreads(unsigned int **result, uint64_t a2)
{
  CFIndex v3 = *result;
  uint64_t v4 = (int)**result;
  uint64_t v5 = *(unsigned __int16 *)((char *)*result - v4 + 8);
  if (*(_WORD *)((char *)*result - v4 + 8))
  {
    uint64_t v6 = *(unsigned int *)((char *)v3 + v5);
    uint64_t v7 = (char *)v3 + v5 + v6;
  }

  else
  {
    uint64_t v5 = 0LL;
    uint64_t v7 = 0LL;
    uint64_t v6 = **result;
  }

  uint64_t v8 = (uint64_t)&v3[*(unsigned int *)((char *)v3 + v5 + v6)] + v5 + v6;
  if (v7 != (char *)v8)
  {
    uint64_t v9 = v7 + 4;
    unsigned int v10 = (unsigned int *)(v8 + 4);
    BOOL v11 = (unsigned int *)(v7 + 4);
    do
    {
      unsigned int v12 = *v11++;
      uint64_t result = (unsigned int **)(*(uint64_t (**)(uint64_t, char *))(a2 + 16))(a2, &v9[v12]);
      if ((_DWORD)result) {
        BOOL v13 = v11 == v10;
      }
      else {
        BOOL v13 = 1;
      }
      uint64_t v9 = (char *)v11;
    }

    while (!v13);
  }

  return result;
}

uint64_t ktrace_catalog_internal::GetProcessFromTid(ktrace_catalog_internal *this, unint64_t a2)
{
  unint64_t v20 = a2;
  uint64_t v16 = 0LL;
  int v17 = &v16;
  uint64_t v18 = 0x2000000000LL;
  size_t v21 = &v20;
  uint64_t v19 = std::__hash_table<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>( (uint64_t)this + 8,  &v20,  (uint64_t)&std::piecewise_construct,  &v21)[3];
  uint64_t v3 = v17[3];
  if (!v3)
  {
    uint64_t v4 = (unsigned int *)*((void *)this + 6);
    uint64_t v5 = (unsigned int *)(*(void *)this + *(unsigned __int16 *)(*(void *)this - **(int **)this + 6LL));
    uint64_t v6 = (uint64_t)&v5[*(unsigned int *)((char *)v5 + *v5) + 1] + *v5;
    v10[0] = MEMORY[0x1895F87A8];
    v10[1] = 0x40000000LL;
    BOOL v11 = ___ZN23ktrace_catalog_internal17GetProcessFromTidEy_block_invoke;
    unsigned int v12 = &unk_189F55418;
    int v14 = this;
    unint64_t v15 = v20;
    BOOL v13 = &v16;
    if (v4 == (unsigned int *)v6)
    {
      uint64_t v3 = 0LL;
    }

    else
    {
      do
      {
        char v7 = v11(v10, (int *)((char *)v4 + *v4));
        else {
          char v8 = v7;
        }
      }

      while ((v8 & 1) != 0);
      uint64_t v3 = v17[3];
    }
  }

  _Block_object_dispose(&v16, 8);
  return v3;
}

void sub_186BB98B4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
}

uint64_t ___ZN23ktrace_catalog_internal17GetProcessFromTidEy_block_invoke(void *a1, int *a2)
{
  uint64_t v2 = *(unsigned __int16 *)((char *)a2 - *a2 + 10);
  uint64_t v3 = *(unsigned int *)((char *)a2 + v2);
  uint64_t v4 = *(unsigned int *)((char *)a2 + v2 + v3);
  if (!(_DWORD)v4) {
    return 1LL;
  }
  uint64_t v7 = 4 * v4;
  uint64_t v8 = a1[5] + 8LL;
  for (uint64_t i = v2 + v3; ; i += 4LL)
  {
    uint64_t v10 = *(unsigned int *)((char *)a2 + i + 4);
    BOOL v11 = (char *)a2 + i + v10;
    unsigned int v12 = (char *)a2 + i + v10 - *((int *)v11 + 1);
    if (*((unsigned __int16 *)v12 + 2) < 5u)
    {
      unint64_t v13 = 0LL;
    }

    else
    {
      unint64_t v13 = *((unsigned __int16 *)v12 + 4);
      if (v13) {
        unint64_t v13 = *(void *)((char *)a2 + i + v10 + v13 + 4);
      }
    }

    v17[0] = v13;
    v17[1] = (unint64_t)a2;
    std::__hash_table<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>>>::__emplace_unique_key_args<unsigned long long,std::pair<unsigned long long,KernelTraceCatalog::Process const*>>( v8,  v17,  v17);
    uint64_t v14 = v10 - *((int *)v11 + 1);
    if (*(unsigned __int16 *)((char *)a2 + i + v14 + 4) < 5u)
    {
      uint64_t v15 = 0LL;
    }

    else
    {
      uint64_t v15 = *(unsigned __int16 *)((char *)a2 + i + v14 + 8);
      if (v15) {
        uint64_t v15 = *(void *)((char *)a2 + i + v10 + v15 + 4);
      }
    }

    if (v15 == a1[6]) {
      break;
    }
    v7 -= 4LL;
    if (!v7) {
      return 1LL;
    }
  }

  uint64_t result = 0LL;
  *(void *)(*(void *)(a1[4] + 8LL) + 24LL) = a2;
  return result;
}

unsigned int *ktrace_catalog_internal::GetThreadFromTid(ktrace_catalog_internal *this, uint64_t a2)
{
  uint64_t v2 = (unsigned int *)(*(void *)this + *(unsigned __int16 *)(*(void *)this - **(int **)this + 8LL));
  uint64_t v3 = (unsigned int *)((char *)v2 + *v2);
  uint64_t __key = a2;
  uint64_t result = (unsigned int *)bsearch( &__key,  v3 + 1,  *v3,  4uLL,  (int (__cdecl *)(const void *, const void *))flatbuffers::Vector<flatbuffers::Offset<KernelTraceCatalog::Thread>>::KeyCompare<unsigned long long>);
  if (result) {
    return (unsigned int *)((char *)result + *result);
  }
  return result;
}

char *ktrace_catalog_internal::GetProcessFromUniqueID(ktrace_catalog_internal *this, unint64_t *a2)
{
  uint64_t v3 = (unsigned int *)(*(void *)this + *(unsigned __int16 *)(*(void *)this - **(int **)this + 6LL));
  uint64_t v4 = (unsigned int *)((char *)v3 + *v3);
  uint64_t __key = a2;
  uint64_t v5 = (unsigned int *)bsearch( &__key,  v4 + 1,  *v4,  4uLL,  (int (__cdecl *)(const void *, const void *))flatbuffers::Vector<flatbuffers::Offset<KernelTraceCatalog::Process>>::KeyCompare<unsigned long long>);
  if (!v5) {
    return 0LL;
  }
  uint64_t v6 = *v5;
  uint64_t v7 = (char *)v5 + v6;
  uint64_t v8 = *(unsigned __int16 *)((char *)v5 + v6 - *(int *)((char *)v5 + v6) + 10);
  uint64_t v9 = (unsigned int *)((char *)v5 + v6 + v8);
  uint64_t v10 = *v9;
  uint64_t v11 = *(unsigned int *)((char *)v9 + v10);
  if ((_DWORD)v11)
  {
    uint64_t v12 = 0LL;
    uint64_t v13 = 4 * v11;
    uint64_t v14 = (char *)this + 8;
    uint64_t v15 = (char *)v5 + v8 + v6 + v10;
    do
    {
      uint64_t v16 = *(unsigned int *)&v15[v12 + 4];
      int v17 = &v15[v12 + v16 - *(int *)&v15[v12 + 4 + v16]];
      else {
        unint64_t v19 = 0LL;
      }
      unint64_t v21 = v19;
      uint64_t __key = &v21;
      std::__hash_table<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>( (uint64_t)v14,  &v21,  (uint64_t)&std::piecewise_construct,  &__key)[3] = v7;
      v12 += 4LL;
    }

    while (v13 != v12);
  }

  return v7;
}

void *ktrace_catalog_open( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v24 = 0LL;
  uint64_t v25 = &v24;
  uint64_t v26 = 0x2000000000LL;
  uint64_t v27 = 0LL;
  v23[0] = MEMORY[0x1895F87A8];
  v23[1] = 0x40000000LL;
  void v23[2] = __ktrace_catalog_open_block_invoke;
  void v23[3] = &unk_189F55440;
  v23[4] = &v24;
  int v8 = ktrace_file_iterate(a1, 0LL, (uint64_t)v23, a4, a5, a6, a7, a8);
  if (v8)
  {
    uint64_t v9 = 0LL;
    *__error() = v8;
    goto LABEL_10;
  }

  uint64_t v10 = v25[3];
  if (!v10)
  {
    uint64_t v15 = __error();
    uint64_t v9 = 0LL;
    int v16 = 45;
LABEL_9:
    int *v15 = v16;
    goto LABEL_10;
  }

  size_t v11 = ktrace_chunk_size_t(v10);
  uint64_t v12 = (unsigned int *)malloc(v11);
  if (!v12)
  {
    uint64_t v15 = __error();
    uint64_t v9 = 0LL;
    int v16 = 12;
    goto LABEL_9;
  }

  uint64_t v13 = v12;
  int v14 = ktrace_chunk_copy_data((uint64_t *)v25[3], 0LL, v12, v11);
  if (v14)
  {
    free(v13);
    uint64_t v9 = 0LL;
    *__error() = v14;
  }

  else
  {
    uint64_t v9 = operator new(0x10uLL);
    *uint64_t v9 = v13;
    v9[1] = 0LL;
    uint64_t v18 = (char *)operator new(0x38uLL);
    unint64_t v19 = (int *)((char *)v13 + *v13);
    *(void *)uint64_t v18 = v19;
    *(_OWORD *)(v18 + _Block_object_dispose(va, 8) = 0u;
    *(_OWORD *)(v18 + 24) = 0u;
    *((_DWORD *)v18 + 10) = 1065353216;
    unint64_t v20 = (unsigned __int16 *)((char *)v19 - *v19);
    if (*v20 >= 7u && (uint64_t v21 = v20[3]) != 0) {
      BOOL v22 = (char *)v19 + v21 + *(unsigned int *)((char *)v19 + v21);
    }
    else {
      BOOL v22 = 0LL;
    }
    *((void *)v18 + 6) = v22 + 4;
    v9[1] = v18;
  }

LABEL_10:
  _Block_object_dispose(&v24, 8);
  return v9;
}

  uint64_t v9 = *v13;
  *(void *)(*v13 + 8 * (a2 >> 6) + 56) |= 1LL << a2;
  *(_BYTE *)(*(void *)(v9 + 48) + a2) = v14;
  uint64_t v10 = *(void *)(v9 + 16);
  size_t v11 = __OFADD__(v10, 1LL);
  uint64_t v12 = v10 + 1;
  if (v11)
  {
    __break(1u);
    JUMPOUT(0x186C1A79CLL);
  }

  *(void *)(v9 + 16) = v12;
  return result;
}

void sub_186BB9D34( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

uint64_t __ktrace_catalog_open_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result = 0LL;
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = a2;
  return result;
}

void ktrace_catalog_create(uint64_t a1@<X0>, uint64_t **a2@<X1>, unint64_t a3@<X8>)
{
  *(void *)a3 = 0LL;
  *(_BYTE *)(a3 + _Block_object_dispose(va, 8) = 0;
  *(_OWORD *)(a3 + 16) = xmmword_186C5D0C0;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 4_Block_object_dispose(va, 8) = 0u;
  *(void *)(a3 + 64) = 0LL;
  *(void *)(a3 + 72) = 1LL;
  *(_WORD *)(a3 + 80) = 256;
  *(void *)(a3 + 8_Block_object_dispose(va, 8) = 0LL;
  __p = 0LL;
  uint64_t v52 = 0LL;
  uint64_t v53 = 0LL;
  int v48 = 0LL;
  int v49 = 0LL;
  uint64_t v50 = 0LL;
  uint64_t v45 = 0LL;
  __int16 v46 = 0LL;
  uint64_t v47 = 0LL;
  uint64_t v6 = *(void *)(a1 + 296);
  uint64_t i = 0LL;
  __int16 v56 = &i;
  uint64_t v57 = 0x4002000000LL;
  __int16 v58 = __Block_byref_object_copy__22;
  uint64_t v59 = __Block_byref_object_dispose__23;
  v61[0] = 0LL;
  v61[1] = 0LL;
  __int16 v60 = v61;
  v54[0] = MEMORY[0x1895F87A8];
  v54[1] = 0x40000000LL;
  v54[2] = ___ZL30ktrace_catalog_read_thread_mapP6kthmapRN11flatbuffers17FlatBufferBuilderERNSt3__16vectorINS1_6OffsetIN18KernelTraceCatalog7ProcessEEENS4_9allocatorIS9_EEEERNS5_INS6_INS7_6ThreadEEENSA_ISF_EEEE_block_invoke;
  v54[3] = &unk_189F55590;
  v54[6] = a3;
  v54[7] = &v48;
  v54[4] = &i;
  v54[5] = v6;
  kthmap_iterate_threads(v6, (uint64_t)v54);
  uint64_t v44 = a1;
  uint64_t v7 = v56[5];
  int v8 = v56 + 6;
  if (v7 != (void **)(v56 + 6))
  {
    do
    {
      int v9 = *((_DWORD *)v7 + 8);
      uint64_t v10 = (uint64_t)v7[5];
      size_t v11 = (char *)kthmap_name_for_pid(v6, v9);
      int ProcessDirect = KernelTraceCatalog::CreateProcessDirect( (flatbuffers::FlatBufferBuilder *)a3,  v10,  v9,  v11,  v7 + 6);
      int v13 = ProcessDirect;
      int v14 = v52;
      if (v52 >= v53)
      {
        int v16 = (char *)__p;
        uint64_t v17 = (v52 - (_BYTE *)__p) >> 2;
        unint64_t v18 = v17 + 1;
        uint64_t v19 = v53 - (_BYTE *)__p;
        if ((v53 - (_BYTE *)__p) >> 1 > v18) {
          unint64_t v18 = v19 >> 1;
        }
        else {
          unint64_t v20 = v18;
        }
        if (v20)
        {
          uint64_t v21 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<flatbuffers::Offset<KernelTraceCatalog::Thread>>>( (uint64_t)&v53,  v20);
          int v16 = (char *)__p;
          int v14 = v52;
        }

        else
        {
          uint64_t v21 = 0LL;
        }

        BOOL v22 = &v21[4 * v17];
        *(_DWORD *)BOOL v22 = v13;
        uint64_t v15 = v22 + 4;
        while (v14 != v16)
        {
          int v23 = *((_DWORD *)v14 - 1);
          v14 -= 4;
          *((_DWORD *)v22 - 1) = v23;
          v22 -= 4;
        }

        __p = v22;
        uint64_t v52 = v15;
        uint64_t v53 = &v21[4 * v20];
        if (v16) {
          operator delete(v16);
        }
      }

      else
      {
        *(_DWORD *)uint64_t v52 = ProcessDirect;
        uint64_t v15 = v14 + 4;
      }

      uint64_t v52 = v15;
      uint64_t v24 = (void **)v7[1];
      if (v24)
      {
        do
        {
          uint64_t v25 = v24;
          uint64_t v24 = (void **)*v24;
        }

        while (v24);
      }

      else
      {
        do
        {
          uint64_t v25 = (void **)v7[2];
          BOOL v26 = *v25 == v7;
          uint64_t v7 = v25;
        }

        while (!v26);
      }

      uint64_t v7 = v25;
    }

    while (v25 != (void **)v8);
  }

  _Block_object_dispose(&i, 8);
  std::__tree<std::__value_type<std::pair<int,unsigned long long>,std::vector<flatbuffers::Offset<KernelTraceCatalog::Thread>>>,std::__map_value_compare<std::pair<int,unsigned long long>,std::__value_type<std::pair<int,unsigned long long>,std::vector<flatbuffers::Offset<KernelTraceCatalog::Thread>>>,std::less<std::pair<int,unsigned long long>>,true>,std::allocator<std::__value_type<std::pair<int,unsigned long long>,std::vector<flatbuffers::Offset<KernelTraceCatalog::Thread>>>>>::destroy( (uint64_t)&v60,  v61[0]);
  uint64_t v27 = *a2;
  uint64_t v28 = a2[1];
  for (uint64_t i = &v45; v27 != v28; ++v27)
  {
    uint64_t v29 = *v27;
    flatbuffers::FlatBufferBuilder::NotNested(a3);
    *(_BYTE *)(a3 + 70) = 1;
    uint64_t v30 = *(void *)(a3 + 40);
    uint64_t v31 = *(void *)(a3 + 48);
    uint64_t v32 = *(void *)(a3 + 32);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>(a3, 4LL, v29, 0LL);
    LODWORD(v54[0]) = flatbuffers::FlatBufferBuilder::EndTable( (flatbuffers::FlatBufferBuilder *)a3,  (int)v32 - (int)v31 + (int)v30);
    std::back_insert_iterator<std::vector<flatbuffers::Offset<KernelTraceCatalog::LostEvent>>>::operator=[abi:ne180100]( (uint64_t *)&i,  v54);
  }

  uint64_t v33 = *(void *)(v44 + 496);
  if (v52 == __p) {
    unint64_t v34 = &flatbuffers::data<flatbuffers::Offset<KernelTraceCatalog::Process>,std::allocator<flatbuffers::Offset<KernelTraceCatalog::Process>>>(std::vector<flatbuffers::Offset<KernelTraceCatalog::Process>> &)::t;
  }
  else {
    unint64_t v34 = __p;
  }
  unsigned int v35 = flatbuffers::FlatBufferBuilder::CreateVectorOfSortedTables<KernelTraceCatalog::Process>( (flatbuffers::FlatBufferBuilder *)a3,  (uint64_t)v34,  (v52 - (_BYTE *)__p) >> 2);
  if (v49 == v48) {
    size_t v36 = &flatbuffers::data<flatbuffers::Offset<KernelTraceCatalog::Thread>,std::allocator<flatbuffers::Offset<KernelTraceCatalog::Thread>>>(std::vector<flatbuffers::Offset<KernelTraceCatalog::Thread>> &)::t;
  }
  else {
    size_t v36 = v48;
  }
  unsigned int v37 = flatbuffers::FlatBufferBuilder::CreateVectorOfSortedTables<KernelTraceCatalog::Thread>( (flatbuffers::FlatBufferBuilder *)a3,  (uint64_t)v36,  (v49 - (_BYTE *)v48) >> 2);
  if (v46 == v45) {
    int v38 = &flatbuffers::data<flatbuffers::Offset<KernelTraceCatalog::LostEvent>,std::allocator<flatbuffers::Offset<KernelTraceCatalog::LostEvent>>>(std::vector<flatbuffers::Offset<KernelTraceCatalog::LostEvent>> const&)::t;
  }
  else {
    int v38 = v45;
  }
  unsigned int v39 = flatbuffers::FlatBufferBuilder::CreateVector<KernelTraceCatalog::Thread>( (flatbuffers::FlatBufferBuilder *)a3,  (uint64_t)v38,  (v46 - (_BYTE *)v45) >> 2);
  flatbuffers::FlatBufferBuilder::NotNested(a3);
  *(_BYTE *)(a3 + 70) = 1;
  int v40 = *(_DWORD *)(a3 + 32);
  int v41 = *(_DWORD *)(a3 + 48);
  int v42 = *(_DWORD *)(a3 + 40);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>(a3, 4LL, v33, 0LL);
  flatbuffers::FlatBufferBuilder::AddOffset<flatbuffers::String>((flatbuffers::FlatBufferBuilder *)a3, 10LL, v39);
  flatbuffers::FlatBufferBuilder::AddOffset<flatbuffers::String>((flatbuffers::FlatBufferBuilder *)a3, 8LL, v37);
  flatbuffers::FlatBufferBuilder::AddOffset<flatbuffers::String>((flatbuffers::FlatBufferBuilder *)a3, 6LL, v35);
  unsigned int v43 = flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)a3, v40 - v41 + v42);
  flatbuffers::FlatBufferBuilder::Finish((flatbuffers::FlatBufferBuilder *)a3, v43, "KTCA", 0);
  if (v45)
  {
    __int16 v46 = v45;
    operator delete(v45);
  }

  if (v48)
  {
    int v49 = v48;
    operator delete(v48);
  }

  if (__p)
  {
    uint64_t v52 = (char *)__p;
    operator delete(__p);
  }

void sub_186BBA1BC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, char a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, void *a34)
{
  if (__p) {
    operator delete(__p);
  }
  if (a14) {
    operator delete(a14);
  }
  if (a17) {
    operator delete(a17);
  }
  flatbuffers::FlatBufferBuilder::~FlatBufferBuilder(v34);
  _Unwind_Resume(a1);
}

uint64_t ktrace_catalog_postprocess_file( uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v16[0] = 0LL;
  v16[1] = v16;
  v16[2] = 0x4002000000LL;
  v16[3] = __Block_byref_object_copy__0;
  v16[4] = __Block_byref_object_dispose__0;
  unint64_t v18 = 0LL;
  uint64_t v19 = 0LL;
  __p = 0LL;
  uint64_t v21 = 0LL;
  BOOL v22 = &v21;
  uint64_t v23 = 0x2000000000LL;
  uint64_t v11 = MEMORY[0x1895F87A8];
  char v24 = 0;
  v20[0] = MEMORY[0x1895F87A8];
  v20[1] = 0x40000000LL;
  v20[2] = ___ZL36ktrace_catalog_file_contains_catalogP11ktrace_file_block_invoke;
  v20[3] = &unk_189F555B8;
  v20[4] = &v21;
  ktrace_file_iterate(a2, 0LL, (uint64_t)v20, a4, a5, a6, a7, a8);
  int v12 = *((unsigned __int8 *)v22 + 24);
  _Block_object_dispose(&v21, 8);
  if (!v12)
  {
    ktrace_set_execnames_enabled(a1, 1);
    v15[0] = v11;
    v15[1] = 0x40000000LL;
    v15[2] = __ktrace_catalog_postprocess_file_block_invoke;
    v15[3] = &unk_189F55468;
    _OWORD v15[4] = v16;
    ktrace_events_single(a1, 117571592, v15);
    v14[0] = v11;
    v14[1] = 0x40000000LL;
    v14[2] = __ktrace_catalog_postprocess_file_block_invoke_2;
    v14[3] = &unk_189F55490;
    v14[4] = v16;
    v14[5] = a1;
    v14[6] = a2;
    ktrace_postprocessing_set_completed_handler(a3, v14);
  }

  _Block_object_dispose(v16, 8);
  if (__p)
  {
    unint64_t v18 = __p;
    operator delete(__p);
  }

  return 0LL;
}

void sub_186BBA3A8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, char a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, void *__p, uint64_t a28)
{
  if (__p)
  {
    a28 = (uint64_t)__p;
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__0(void *a1, uint64_t a2)
{
  a1[5] = 0LL;
  a1[6] = 0LL;
  a1[7] = 0LL;
  __n128 result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 5) = result;
  a1[7] = *(void *)(a2 + 56);
  *(void *)(a2 + 40) = 0LL;
  *(void *)(a2 + 4_Block_object_dispose(va, 8) = 0LL;
  *(void *)(a2 + 56) = 0LL;
  return result;
}

void __Block_byref_object_dispose__0(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(void *)(a1 + 4_Block_object_dispose(va, 8) = v2;
    operator delete(v2);
  }

void __ktrace_catalog_postprocess_file_block_invoke(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void **)(*(void *)(a1 + 32) + 8LL);
  uint64_t v4 = (char *)v3[6];
  unint64_t v5 = v3[7];
  if ((unint64_t)v4 >= v5)
  {
    uint64_t v7 = (char *)v3[5];
    uint64_t v8 = (v4 - v7) >> 3;
    unint64_t v9 = v5 - (void)v7;
    unint64_t v10 = (uint64_t)(v5 - (void)v7) >> 2;
    if (v10 <= v8 + 1) {
      unint64_t v10 = v8 + 1;
    }
    if (v9 >= 0x7FFFFFFFFFFFFFF8LL) {
      unint64_t v11 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    if (v11)
    {
      int v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)(v3 + 7), v11);
      uint64_t v7 = (char *)v3[5];
      uint64_t v4 = (char *)v3[6];
    }

    else
    {
      int v12 = 0LL;
    }

    int v13 = &v12[8 * v8];
    int v14 = &v12[8 * v11];
    *(void *)int v13 = *a2;
    uint64_t v6 = v13 + 8;
    while (v4 != v7)
    {
      uint64_t v15 = *((void *)v4 - 1);
      v4 -= 8;
      *((void *)v13 - 1) = v15;
      v13 -= 8;
    }

    v3[5] = v13;
    v3[6] = v6;
    v3[7] = v14;
    if (v7) {
      operator delete(v7);
    }
  }

  else
  {
    *(void *)uint64_t v4 = *a2;
    uint64_t v6 = v4 + 8;
  }

  v3[6] = v6;
}

void __ktrace_catalog_postprocess_file_block_invoke_2(void *a1)
{
  BufferPointer = (UInt8 *)flatbuffers::FlatBufferBuilder::GetBufferPointer((flatbuffers::FlatBufferBuilder *)v3);
  flatbuffers::FlatBufferBuilder::~FlatBufferBuilder((flatbuffers::FlatBufferBuilder *)v3);
}

void sub_186BBA588( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t flatbuffers::FlatBufferBuilder::GetBufferPointer(flatbuffers::FlatBufferBuilder *this)
{
  if (!*((_BYTE *)this + 71)) {
    flatbuffers::FlatBufferBuilder::GetBufferPointer();
  }
  uint64_t result = *((void *)this + 6);
  if (!result) {
    flatbuffers::FlatBufferBuilder::GetBufferPointer();
  }
  return result;
}

uint64_t ktrace_process_unique_id(void *a1)
{
  uint64_t v1 = (unsigned __int16 *)(*a1 - *(int *)*a1);
  if (*v1 >= 5u && (uint64_t v2 = v1[2]) != 0) {
    return *(void *)(*a1 + v2);
  }
  else {
    return 0LL;
  }
}

uint64_t ktrace_process_id(void *a1)
{
  uint64_t v1 = (unsigned __int16 *)(*a1 - *(int *)*a1);
  if (*v1 >= 7u && (uint64_t v2 = v1[3]) != 0) {
    return *(unsigned int *)(*a1 + v2);
  }
  else {
    return 0LL;
  }
}

uint64_t ktrace_process_last_name(void *a1)
{
  uint64_t v1 = (unsigned __int16 *)(*a1 - *(int *)*a1);
  if (*v1 >= 9u && (uint64_t v2 = v1[4]) != 0) {
    return *a1 + v2 + *(unsigned int *)(*a1 + v2) + 4;
  }
  else {
    return 0LL;
  }
}

uint64_t ktrace_process_main_thread(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

void ktrace_catalog_iterate_threads(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(unsigned int ***)(a1 + 8);
  v6[0] = 0LL;
  v6[1] = v6;
  v6[2] = 0x3802000000LL;
  v6[3] = __Block_byref_object_copy__8;
  v6[4] = __Block_byref_object_dispose__9;
  v5[0] = 0LL;
  v5[1] = v5;
  void v5[2] = 0x3802000000LL;
  v5[3] = __Block_byref_object_copy__10;
  v5[4] = __Block_byref_object_dispose__11;
  v4[0] = 0LL;
  v4[1] = v4;
  v4[2] = 0x3802000000LL;
  v4[3] = __Block_byref_object_copy__10;
  v4[4] = __Block_byref_object_dispose__11;
  v4[6] = v7;
  v5[6] = v7;
  v3[0] = MEMORY[0x1895F87A8];
  v3[1] = 0x40000000LL;
  v3[2] = __ktrace_catalog_iterate_threads_block_invoke;
  _OWORD v3[3] = &unk_189F554B8;
  v3[7] = v5;
  v3[8] = v2;
  v3[5] = v6;
  v3[6] = v4;
  v3[4] = a2;
  ktrace_catalog_internal::IterateThreads(v2, (uint64_t)v3);
  _Block_object_dispose(v4, 8);
  _Block_object_dispose(v5, 8);
  _Block_object_dispose(v6, 8);
}

void sub_186BBA758( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  uint64_t v12 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  uint64_t v19 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose((const void *)(v10 - 72), 8);
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 40) = result;
  return result;
}

__n128 __Block_byref_object_copy__10(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 40) = result;
  return result;
}

uint64_t __ktrace_catalog_iterate_threads_block_invoke(void *a1, int *a2)
{
  uint64_t v4 = (ktrace_catalog_internal *)a1[8];
  unint64_t v5 = (unsigned __int16 *)((char *)a2 - *a2);
  if (*v5 >= 5u && (uint64_t v6 = v5[2]) != 0) {
    unint64_t v7 = *(void *)((char *)a2 + v6);
  }
  else {
    unint64_t v7 = 0LL;
  }
  ProcessFromTid = (int *)ktrace_catalog_internal::GetProcessFromTid(v4, v7);
  unint64_t v9 = (unsigned __int16 *)((char *)a2 - *a2);
  unsigned int v10 = *v9;
  if (v10 >= 9 && (uint64_t v11 = v9[4]) != 0 && *((_BYTE *)a2 + v11))
  {
    uint64_t v12 = a1 + 5;
    *(void *)(*(void *)(a1[5] + 8LL) + 40LL) = ProcessFromTid;
    int v13 = a1 + 6;
    *(void *)(*(void *)(a1[6] + 8LL) + 40LL) = a2;
    uint64_t v14 = (uint64_t)a2;
  }

  else
  {
    uint64_t v15 = *(unsigned __int16 *)((char *)ProcessFromTid - *ProcessFromTid + 10);
    uint64_t v16 = *(unsigned int *)((char *)ProcessFromTid + v15);
    uint64_t v17 = (unsigned int *)((char *)ProcessFromTid + v15 + v16);
    uint64_t v18 = *v17;
    if ((_DWORD)v18)
    {
      unint64_t v19 = 0LL;
      uint64_t v20 = 4 * v18;
      uint64_t v21 = (char *)ProcessFromTid + v15 + v16;
      while (1)
      {
        uint64_t v22 = *(unsigned int *)&v21[v19 + 4];
        uint64_t v23 = (char *)&v17[v19 / 4] + v22 - *(int *)((char *)&v17[v19 / 4 + 1] + v22);
        if (*((unsigned __int16 *)v23 + 2) >= 9u)
        {
          uint64_t v24 = *((unsigned __int16 *)v23 + 6);
          if (v24)
          {
            if (*((_BYTE *)&v17[v19 / 4 + 1] + v22 + v24)) {
              break;
            }
          }
        }

        v19 += 4LL;
        if (v20 == v19) {
          goto LABEL_15;
        }
      }

      uint64_t v14 = (uint64_t)v17 + v22 + v19 + 4;
    }

    else
    {
LABEL_15:
      uint64_t v14 = 0LL;
    }

    uint64_t v12 = a1 + 5;
    *(void *)(*(void *)(a1[5] + 8LL) + 40LL) = ProcessFromTid;
    int v13 = a1 + 6;
    *(void *)(*(void *)(a1[6] + 8LL) + 40LL) = a2;
    if (v10 < 9) {
      goto LABEL_20;
    }
    LODWORD(v11) = v9[4];
    if (!v9[4]) {
      goto LABEL_20;
    }
  }

  if (!*((_BYTE *)a2 + v11))
  {
LABEL_20:
    *(void *)(*(void *)(a1[5] + 8LL) + 48LL) = *(void *)(a1[7] + 8LL) + 40LL;
    *(void *)(*(void *)(a1[7] + 8LL) + 40LL) = v14;
    return (*(uint64_t (**)(void))(a1[4] + 16LL))();
  }

  *(void *)(*(void *)(*v12 + 8LL) + 48LL) = *(void *)(*v13 + 8LL) + 40LL;
  return (*(uint64_t (**)(void))(a1[4] + 16LL))();
}

void ktrace_catalog_iterate_processes(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(unsigned int ***)(a1 + 8);
  v6[0] = 0LL;
  v6[1] = v6;
  v6[2] = 0x3802000000LL;
  v6[3] = __Block_byref_object_copy__8;
  v6[4] = __Block_byref_object_dispose__9;
  v4[0] = 0LL;
  v4[1] = v4;
  v4[2] = 0x3802000000LL;
  v4[3] = __Block_byref_object_copy__10;
  v4[4] = __Block_byref_object_dispose__11;
  v7[1] = v5;
  v5[1] = v7;
  v3[0] = MEMORY[0x1895F87A8];
  v3[1] = 0x40000000LL;
  v3[2] = __ktrace_catalog_iterate_processes_block_invoke;
  _OWORD v3[3] = &unk_189F554E0;
  v3[5] = v6;
  v3[6] = v4;
  v3[4] = a2;
  ktrace_catalog_internal::IterateProcesses(v2, (uint64_t)v3);
  _Block_object_dispose(v4, 8);
  _Block_object_dispose(v6, 8);
}

void sub_186BBAA34( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

uint64_t __ktrace_catalog_iterate_processes_block_invoke(void *a1, int *a2)
{
  uint64_t v2 = *(unsigned __int16 *)((char *)a2 - *a2 + 10);
  uint64_t v3 = *(unsigned int *)((char *)a2 + v2);
  uint64_t v4 = *(unsigned int *)((char *)a2 + v2 + v3);
  if ((_DWORD)v4)
  {
    uint64_t v5 = 4 * v4;
    uint64_t v6 = v2 + v3;
    while (1)
    {
      uint64_t v7 = *(unsigned int *)((char *)a2 + v6 + 4);
      uint64_t v8 = (char *)a2 + v6 + v7 - *(int *)((char *)a2 + v6 + v7 + 4);
      if (*((unsigned __int16 *)v8 + 2) >= 9u)
      {
        uint64_t v9 = *((unsigned __int16 *)v8 + 6);
        if (v9)
        {
          if (*((_BYTE *)a2 + v6 + v7 + v9 + 4)) {
            break;
          }
        }
      }

      v6 += 4LL;
      v5 -= 4LL;
      if (!v5) {
        goto LABEL_7;
      }
    }

    *(void *)(*(void *)(a1[5] + 8LL) + 40LL) = a2;
    *(void *)(*(void *)(a1[6] + 8LL) + 40LL) = (char *)a2 + v7 + v6 + 4;
  }

  else
  {
LABEL_7:
    *(void *)(*(void *)(a1[5] + 8LL) + 40LL) = a2;
    *(void *)(*(void *)(a1[5] + 8LL) + 48LL) = 0LL;
  }

  return (*(uint64_t (**)(void, uint64_t))(a1[4] + 16LL))(a1[4], *(void *)(a1[5] + 8LL) + 40LL);
}

void *ktrace_process_iterate_threads(void *result, uint64_t a2)
{
  v11[1] = result;
  uint64_t v2 = (unsigned int *)(*result + *(unsigned __int16 *)(*result - *(int *)*result + 10LL));
  uint64_t v3 = (unsigned int *)((char *)v2 + *v2);
  unsigned int v6 = *v3;
  uint64_t v4 = v3 + 1;
  uint64_t v5 = v6;
  if (v6)
  {
    uint64_t v8 = 4 * v5;
    uint64_t v9 = v4;
    do
    {
      unsigned int v10 = *v9++;
      v11[0] = (char *)v4 + v10;
      __n128 result = (void *)(*(uint64_t (**)(uint64_t, void *))(a2 + 16))(a2, v11);
      uint64_t v4 = v9;
      v8 -= 4LL;
    }

    while (v8);
  }

  return result;
}

void ktrace_catalog_iterate_lostevents(uint64_t a1, uint64_t a2)
{
  v15[0] = 0LL;
  v15[1] = v15;
  v15[2] = 0x3002000000LL;
  v15[3] = __Block_byref_object_copy__15;
  _OWORD v15[4] = __Block_byref_object_dispose__16;
  uint64_t v2 = *(void **)(a1 + 8);
  v10[0] = MEMORY[0x1895F87A8];
  v10[1] = 0x40000000LL;
  uint64_t v11 = __ktrace_catalog_iterate_lostevents_block_invoke;
  uint64_t v12 = &unk_189F55508;
  uint64_t v13 = a2;
  uint64_t v14 = v15;
  uint64_t v3 = (unsigned int *)(*v2 + *(unsigned __int16 *)(*v2 - *(int *)*v2 + 10LL));
  uint64_t v4 = *v3;
  unsigned int v6 = (unsigned int *)((char *)v3 + v4 + 4);
  uint64_t v5 = *(unsigned int *)((char *)v3 + v4);
  if ((_DWORD)v5)
  {
    uint64_t v7 = 4 * v5 - 4;
    do
    {
      char v8 = v11((uint64_t)v10, (uint64_t)v6 + *v6);
      ++v6;
      if (v7) {
        char v9 = v8;
      }
      else {
        char v9 = 0;
      }
      v7 -= 4LL;
    }

    while ((v9 & 1) != 0);
  }

  _Block_object_dispose(v15, 8);
}

void sub_186BBAC80( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

uint64_t __Block_byref_object_copy__15(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  return result;
}

uint64_t __ktrace_catalog_iterate_lostevents_block_invoke(uint64_t a1, uint64_t a2)
{
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL) = a2;
  return (*(uint64_t (**)(void, uint64_t))(*(void *)(a1 + 32) + 16LL))( *(void *)(a1 + 32),  *(void *)(*(void *)(a1 + 40) + 8LL) + 40LL);
}

uint64_t ktrace_lostevent_get_timestamp(void *a1)
{
  uint64_t v1 = (unsigned __int16 *)(*a1 - *(int *)*a1);
  if (*v1 >= 5u && (uint64_t v2 = v1[2]) != 0) {
    return *(void *)(*a1 + v2);
  }
  else {
    return 0LL;
  }
}

uint64_t ktrace_catalog_get_timestamp(uint64_t a1)
{
  uint64_t v1 = **(int ***)(a1 + 8);
  uint64_t v2 = (unsigned __int16 *)((char *)v1 - *v1);
  if (*v2 >= 5u && (uint64_t v3 = v2[2]) != 0) {
    return *(void *)((char *)v1 + v3);
  }
  else {
    return 0LL;
  }
}

uint64_t ktrace_thread_id(void *a1)
{
  uint64_t v1 = (unsigned __int16 *)(*a1 - *(int *)*a1);
  if (*v1 >= 5u && (uint64_t v2 = v1[2]) != 0) {
    return *(void *)(*a1 + v2);
  }
  else {
    return 0LL;
  }
}

uint64_t ktrace_thread_last_name(void *a1)
{
  uint64_t v1 = (unsigned __int16 *)(*a1 - *(int *)*a1);
  if (*v1 >= 7u && (uint64_t v2 = v1[3]) != 0) {
    return *a1 + v2 + *(unsigned int *)(*a1 + v2) + 4;
  }
  else {
    return 0LL;
  }
}

BOOL ktrace_thread_is_main(void *a1)
{
  uint64_t v1 = (unsigned __int16 *)(*a1 - *(int *)*a1);
  return *v1 >= 9u && (uint64_t v2 = v1[4]) != 0 && *(_BYTE *)(*a1 + v2) != 0;
}

uint64_t ktrace_thread_process(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

void ktrace_catalog_close(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 8);
  if (v2)
  {
    std::__hash_table<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>>>::~__hash_table((uint64_t)v2 + 8);
    operator delete(v2);
  }

  free(*(void **)a1);
  free((void *)a1);
}

void __clang_call_terminate(void *a1)
{
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>>>::~__hash_table( uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      uint64_t v3 = (void *)*v2;
      operator delete(v2);
      uint64_t v2 = v3;
    }

    while (v3);
  }

  uint64_t v4 = *(void **)a1;
  *(void *)a1 = 0LL;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

void flatbuffers::vector_downward::~vector_downward(flatbuffers::vector_downward *this)
{
  if (*((_BYTE *)this + 8) && *(void *)this) {
    (*(void (**)(void))(**(void **)this + 8LL))(*(void *)this);
  }
  *(void *)this = 0LL;
  *((_BYTE *)this + _Block_object_dispose(va, 8) = 0;
}

void flatbuffers::vector_downward::clear_buffer(flatbuffers::vector_downward *this)
{
  uint64_t v2 = (void *)*((void *)this + 5);
  if (v2)
  {
    uint64_t v3 = *(void *)this;
    if (*(void *)this) {
      (*(void (**)(uint64_t))(*(void *)v3 + 24LL))(v3);
    }
    else {
      operator delete[](v2);
    }
  }

  *((void *)this + 5) = 0LL;
}

void flatbuffers::DefaultAllocator::deallocate(flatbuffers::DefaultAllocator *this, unsigned __int8 *__p)
{
  if (__p) {
    operator delete[](__p);
  }
}

void *flatbuffers::DefaultAllocator::allocate(flatbuffers::DefaultAllocator *this, size_t __sz)
{
  return operator new[](__sz);
}

char *flatbuffers::Allocator::reallocate_downward( flatbuffers::Allocator *this, unsigned __int8 *a2, unint64_t a3, unint64_t a4, size_t a5, size_t a6)
{
  if (a4 <= a3) {
    flatbuffers::Allocator::reallocate_downward();
  }
  uint64_t v12 = (char *)(*(uint64_t (**)(flatbuffers::Allocator *, unint64_t))(*(void *)this + 16LL))( this,  a4);
  memcpy(&v12[a4 - a5], &a2[a3 - a5], a5);
  memcpy(v12, a2, a6);
  (*(void (**)(flatbuffers::Allocator *, unsigned __int8 *, unint64_t))(*(void *)this + 24LL))( this,  a2,  a3);
  return v12;
}

void *__Block_byref_object_copy__22(void *result, void *a2)
{
  result[5] = a2[5];
  uint64_t v2 = a2 + 6;
  uint64_t v3 = a2[6];
  result[6] = v3;
  uint64_t v4 = result + 6;
  uint64_t v5 = a2[7];
  result[7] = v5;
  if (v5)
  {
    *(void *)(v3 + 16) = v4;
    a2[5] = v2;
    *uint64_t v2 = 0LL;
    a2[7] = 0LL;
  }

  else
  {
    result[5] = v4;
  }

  return result;
}

void __Block_byref_object_dispose__23(uint64_t a1)
{
}

void ___ZL30ktrace_catalog_read_thread_mapP6kthmapRN11flatbuffers17FlatBufferBuilderERNSt3__16vectorINS1_6OffsetIN18KernelTraceCatalog7ProcessEEENS4_9allocatorIS9_EEEERNS5_INS6_INS7_6ThreadEEENSA_ISF_EEEE_block_invoke( void *a1, unsigned int a2, uint64_t a3, const void *a4)
{
  char v8 = (const char *)kthmap_thread_name_for_tid(a1[5], a4);
  BOOL is_main_thread = kthmap_tid_is_main_thread(a1[5], a4);
  unint64_t v10 = a1[6];
  if (v8)
  {
    size_t v11 = strlen(v8);
    LODWORD(v_Block_object_dispose(va, 8) = flatbuffers::FlatBufferBuilder::CreateString((flatbuffers::FlatBufferBuilder *)v10, v8, v11);
  }

  flatbuffers::FlatBufferBuilder::NotNested(v10);
  *(_BYTE *)(v10 + 70) = 1;
  int v12 = *(_DWORD *)(v10 + 32) - *(_DWORD *)(v10 + 48) + *(_DWORD *)(v10 + 40);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>(v10, 4LL, (uint64_t)a4, 0LL);
  flatbuffers::FlatBufferBuilder::AddOffset<flatbuffers::String>( (flatbuffers::FlatBufferBuilder *)v10,  6LL,  v8);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(v10, 8LL, is_main_thread, 0);
  int v13 = flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)v10, v12);
  int v14 = v13;
  uint64_t v15 = a1[7];
  uint64_t v16 = *(_DWORD **)(v15 + 8);
  unint64_t v17 = *(void *)(v15 + 16);
  if ((unint64_t)v16 >= v17)
  {
    unint64_t v19 = *(_DWORD **)v15;
    uint64_t v20 = ((uint64_t)v16 - *(void *)v15) >> 2;
    unint64_t v21 = v20 + 1;
    uint64_t v22 = v17 - (void)v19;
    if (v22 >> 1 > v21) {
      unint64_t v21 = v22 >> 1;
    }
    else {
      unint64_t v23 = v21;
    }
    if (v23)
    {
      uint64_t v24 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<flatbuffers::Offset<KernelTraceCatalog::Thread>>>( v15 + 16,  v23);
      unint64_t v19 = *(_DWORD **)v15;
      uint64_t v16 = *(_DWORD **)(v15 + 8);
    }

    else
    {
      uint64_t v24 = 0LL;
    }

    uint64_t v25 = &v24[4 * v20];
    BOOL v26 = &v24[4 * v23];
    *(_DWORD *)uint64_t v25 = v14;
    uint64_t v18 = v25 + 4;
    while (v16 != v19)
    {
      int v27 = *--v16;
      *((_DWORD *)v25 - 1) = v27;
      v25 -= 4;
    }

    *(void *)uint64_t v15 = v25;
    *(void *)(v15 + _Block_object_dispose(va, 8) = v18;
    *(void *)(v15 + 16) = v26;
    if (v19) {
      operator delete(v19);
    }
  }

  else
  {
    *uint64_t v16 = v13;
    uint64_t v18 = v16 + 1;
  }

  *(void *)(v15 + _Block_object_dispose(va, 8) = v18;
  uint64_t v28 = (uint64_t **)(*(void *)(a1[4] + 8LL) + 40LL);
  v44[0] = a2;
  v44[1] = a3;
  uint64_t v45 = v44;
  uint64_t v29 = std::__tree<std::__value_type<std::pair<int,unsigned long long>,std::vector<flatbuffers::Offset<KernelTraceCatalog::Thread>>>,std::__map_value_compare<std::pair<int,unsigned long long>,std::__value_type<std::pair<int,unsigned long long>,std::vector<flatbuffers::Offset<KernelTraceCatalog::Thread>>>,std::less<std::pair<int,unsigned long long>>,true>,std::allocator<std::__value_type<std::pair<int,unsigned long long>,std::vector<flatbuffers::Offset<KernelTraceCatalog::Thread>>>>>::__emplace_unique_key_args<std::pair<int,unsigned long long>,std::piecewise_construct_t const&,std::tuple<std::pair<int,unsigned long long>&&>,std::tuple<>>( v28,  (int *)v44,  (uint64_t)&std::piecewise_construct,  &v45);
  uint64_t v30 = v29;
  uint64_t v31 = (char *)v29[7];
  uint64_t v32 = (uint64_t)(v29 + 8);
  unint64_t v33 = v29[8];
  if ((unint64_t)v31 >= v33)
  {
    unsigned int v35 = (char *)v29[6];
    uint64_t v36 = (v31 - v35) >> 2;
    unint64_t v37 = v33 - (void)v35;
    unint64_t v38 = (uint64_t)(v33 - (void)v35) >> 1;
    if (v38 <= v36 + 1) {
      unint64_t v38 = v36 + 1;
    }
    if (v37 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v39 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v39 = v38;
    }
    if (v39)
    {
      int v40 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<flatbuffers::Offset<KernelTraceCatalog::Thread>>>( v32,  v39);
      unsigned int v35 = (char *)v30[6];
      uint64_t v31 = (char *)v30[7];
    }

    else
    {
      int v40 = 0LL;
    }

    int v41 = &v40[4 * v36];
    int v42 = &v40[4 * v39];
    *(_DWORD *)int v41 = v14;
    unint64_t v34 = v41 + 4;
    while (v31 != v35)
    {
      int v43 = *((_DWORD *)v31 - 1);
      v31 -= 4;
      *((_DWORD *)v41 - 1) = v43;
      v41 -= 4;
    }

    v30[6] = v41;
    v30[7] = v34;
    v30[8] = v42;
    if (v35) {
      operator delete(v35);
    }
  }

  else
  {
    *(_DWORD *)uint64_t v31 = v14;
    unint64_t v34 = v31 + 4;
  }

  v30[7] = v34;
}

uint64_t KernelTraceCatalog::CreateProcessDirect( flatbuffers::FlatBufferBuilder *this, uint64_t a2, int a3, char *__s, void **a5)
{
  unsigned int v6 = __s;
  if (__s)
  {
    size_t v10 = strlen(__s);
    LODWORD(v6) = flatbuffers::FlatBufferBuilder::CreateString(this, v6, v10);
  }

  if (a5)
  {
    uint64_t v11 = (_BYTE *)a5[1] - (_BYTE *)*a5;
    if (v11) {
      int v12 = *a5;
    }
    else {
      int v12 = &flatbuffers::data<flatbuffers::Offset<KernelTraceCatalog::Thread>,std::allocator<flatbuffers::Offset<KernelTraceCatalog::Thread>>>(std::vector<flatbuffers::Offset<KernelTraceCatalog::Thread>> &)::t;
    }
    LODWORD(a5) = flatbuffers::FlatBufferBuilder::CreateVectorOfSortedTables<KernelTraceCatalog::Thread>( this,  (uint64_t)v12,  v11 >> 2);
  }

  flatbuffers::FlatBufferBuilder::NotNested((uint64_t)this);
  *((_BYTE *)this + 70) = 1;
  int v13 = *((_DWORD *)this + 8) - *((_DWORD *)this + 12) + *((_DWORD *)this + 10);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>((unint64_t)this, 4LL, a2, 0LL);
  flatbuffers::FlatBufferBuilder::AddOffset<flatbuffers::String>(this, 10LL, a5);
  flatbuffers::FlatBufferBuilder::AddOffset<flatbuffers::String>(this, 8LL, v6);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>((unint64_t)this, 6LL, a3, 0);
  return flatbuffers::FlatBufferBuilder::EndTable(this, v13);
}

void std::__tree<std::__value_type<std::pair<int,unsigned long long>,std::vector<flatbuffers::Offset<KernelTraceCatalog::Thread>>>,std::__map_value_compare<std::pair<int,unsigned long long>,std::__value_type<std::pair<int,unsigned long long>,std::vector<flatbuffers::Offset<KernelTraceCatalog::Thread>>>,std::less<std::pair<int,unsigned long long>>,true>,std::allocator<std::__value_type<std::pair<int,unsigned long long>,std::vector<flatbuffers::Offset<KernelTraceCatalog::Thread>>>>>::destroy( uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::pair<int,unsigned long long>,std::vector<flatbuffers::Offset<KernelTraceCatalog::Thread>>>,std::__map_value_compare<std::pair<int,unsigned long long>,std::__value_type<std::pair<int,unsigned long long>,std::vector<flatbuffers::Offset<KernelTraceCatalog::Thread>>>,std::less<std::pair<int,unsigned long long>>,true>,std::allocator<std::__value_type<std::pair<int,unsigned long long>,std::vector<flatbuffers::Offset<KernelTraceCatalog::Thread>>>>>::destroy( a1,  *a2);
    std::__tree<std::__value_type<std::pair<int,unsigned long long>,std::vector<flatbuffers::Offset<KernelTraceCatalog::Thread>>>,std::__map_value_compare<std::pair<int,unsigned long long>,std::__value_type<std::pair<int,unsigned long long>,std::vector<flatbuffers::Offset<KernelTraceCatalog::Thread>>>,std::less<std::pair<int,unsigned long long>>,true>,std::allocator<std::__value_type<std::pair<int,unsigned long long>,std::vector<flatbuffers::Offset<KernelTraceCatalog::Thread>>>>>::destroy( a1,  a2[1]);
    uint64_t v4 = (void *)a2[6];
    if (v4)
    {
      a2[7] = v4;
      operator delete(v4);
    }

    operator delete(a2);
  }

uint64_t flatbuffers::FlatBufferBuilder::CreateString( flatbuffers::FlatBufferBuilder *this, const char *a2, unint64_t a3)
{
  unsigned int v6 = (_BYTE *)(*((void *)this + 6) - flatbuffers::vector_downward::ensure_space(this, 1uLL));
  *((void *)this + 6) = v6;
  _BYTE *v6 = 0;
  if (a3)
  {
    uint64_t v7 = (void *)(*((void *)this + 6) - flatbuffers::vector_downward::ensure_space(this, a3));
    *((void *)this + 6) = v7;
    memcpy(v7, a2, a3);
  }

  flatbuffers::FlatBufferBuilder::PushElement<unsigned int>((uint64_t)this, a3);
  return (*((_DWORD *)this + 8) - *((_DWORD *)this + 12) + *((_DWORD *)this + 10));
}

uint64_t flatbuffers::FlatBufferBuilder::NotNested(uint64_t this)
{
  if (*(_BYTE *)(this + 70)) {
    flatbuffers::FlatBufferBuilder::NotNested();
  }
  if (*(_DWORD *)(this + 64)) {
    flatbuffers::FlatBufferBuilder::NotNested();
  }
  return this;
}

unint64_t flatbuffers::vector_downward::fill(flatbuffers::vector_downward *this, unint64_t a2)
{
  unint64_t result = flatbuffers::vector_downward::ensure_space(this, a2);
  *((void *)this + 6) -= result;
  if (a2)
  {
    uint64_t v5 = 0LL;
    do
      *(_BYTE *)(*((void *)this + 6) + v5++) = 0;
    while (a2 != v5);
  }

  return result;
}

uint64_t flatbuffers::FlatBufferBuilder::PushElement<unsigned int>(uint64_t a1, int a2)
{
  uint64_t v4 = (_DWORD *)(*(void *)(a1 + 48)
                - flatbuffers::vector_downward::ensure_space((flatbuffers::vector_downward *)a1, 4uLL));
  *(void *)(a1 + 4_Block_object_dispose(va, 8) = v4;
  _DWORD *v4 = a2;
  return (*(_DWORD *)(a1 + 32) - (_DWORD)v4 + *(_DWORD *)(a1 + 40));
}

unint64_t flatbuffers::FlatBufferBuilder::PreAlign( flatbuffers::FlatBufferBuilder *this, uint64_t a2, unint64_t a3)
{
  if (*((void *)this + 9) < a3) {
    *((void *)this + 9) = a3;
  }
  return flatbuffers::vector_downward::fill( this,  (a3 - 1) & (-a2 - (*((_DWORD *)this + 8) - *((_DWORD *)this + 12) + *((_DWORD *)this + 10))));
}

unint64_t flatbuffers::vector_downward::ensure_space( flatbuffers::vector_downward *this, unint64_t a2)
{
  unint64_t v2 = *((void *)this + 6);
  unint64_t v3 = *((void *)this + 7);
  if (v2 < v3 || (unint64_t v5 = *((void *)this + 5), v3 < v5)) {
    flatbuffers::vector_downward::ensure_space();
  }
  if (v2 - v3 < a2)
  {
    flatbuffers::vector_downward::reallocate(this, a2);
    unint64_t v5 = *((void *)this + 5);
    unint64_t v2 = *((void *)this + 6);
  }

  return a2;
}

char *flatbuffers::vector_downward::reallocate(flatbuffers::vector_downward *this, unint64_t a2)
{
  unint64_t v5 = *((void *)this + 4);
  uint64_t v4 = (unsigned __int8 *)*((void *)this + 5);
  unsigned int v6 = &v4[v5 - *((void *)this + 6)];
  uint64_t v7 = *((void *)this + 7) - (void)v4;
  if (v5) {
    unint64_t v8 = v5 >> 1;
  }
  else {
    unint64_t v8 = *((void *)this + 2);
  }
  if (v8 > a2) {
    a2 = v8;
  }
  uint64_t v9 = *((void *)this + 3);
  uint64_t v10 = v9 + v5 + a2 - 1;
  uint64_t v11 = -v9;
  unint64_t v12 = v10 & v11;
  *((void *)this + 4) = v10 & v11;
  uint64_t v13 = *(void *)this;
  if (v4)
  {
    if (v13)
    {
      unint64_t result = (char *)(*(uint64_t (**)(uint64_t))(*(void *)v13 + 32LL))(v13);
    }

    else
    {
      uint64_t v16 = &unk_189F55538;
      unint64_t result = flatbuffers::Allocator::reallocate_downward( (flatbuffers::Allocator *)&v16,  v4,  v5,  v12,  v6,  v7);
    }
  }

  else if (v13)
  {
    unint64_t result = (char *)(*(uint64_t (**)(uint64_t, unint64_t))(*(void *)v13 + 16LL))(v13, v12);
  }

  else
  {
    unint64_t result = (char *)operator new[](v10 & v11);
  }

  uint64_t v15 = (uint64_t)&result[*((void *)this + 4) - v6];
  *((void *)this + 5) = result;
  *((void *)this + 6) = v15;
  *((void *)this + 7) = &result[v7];
  return result;
}

unint64_t flatbuffers::FlatBufferBuilder::Align( flatbuffers::FlatBufferBuilder *this, unint64_t a2)
{
  if (*((void *)this + 9) < a2) {
    *((void *)this + 9) = a2;
  }
  return flatbuffers::vector_downward::fill( this,  (a2 - 1) & -(uint64_t)(*((_DWORD *)this + 8) - *((_DWORD *)this + 12) + *((_DWORD *)this + 10)));
}

unint64_t flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>( unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v5 = result;
  if (a3 != a4 || *(_BYTE *)(result + 80))
  {
    unsigned int v6 = flatbuffers::FlatBufferBuilder::PushElement<unsigned long long>(result, a3);
    unint64_t result = flatbuffers::vector_downward::ensure_space((flatbuffers::vector_downward *)v5, 8uLL);
    **(void **)(v5 + 56) = v6 | (unint64_t)(a2 << 32);
    *(void *)(v5 + 56) += 8LL;
    ++*(_DWORD *)(v5 + 64);
    unsigned int v7 = *(unsigned __int16 *)(v5 + 68);
    *(_WORD *)(v5 + 6_Block_object_dispose(va, 8) = v7;
  }

  return result;
}

uint64_t flatbuffers::FlatBufferBuilder::PushElement<unsigned long long>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)(*(void *)(a1 + 48)
                - flatbuffers::vector_downward::ensure_space((flatbuffers::vector_downward *)a1, 8uLL));
  *(void *)(a1 + 4_Block_object_dispose(va, 8) = v4;
  void *v4 = a2;
  return (*(_DWORD *)(a1 + 32) - (_DWORD)v4 + *(_DWORD *)(a1 + 40));
}

flatbuffers::FlatBufferBuilder *flatbuffers::FlatBufferBuilder::AddOffset<flatbuffers::String>( flatbuffers::FlatBufferBuilder *result, uint64_t a2, unsigned int a3)
{
  if (a3)
  {
    unint64_t v4 = (unint64_t)result;
    int v5 = flatbuffers::FlatBufferBuilder::ReferTo(result, a3);
    return (flatbuffers::FlatBufferBuilder *)flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v4, a2, v5, 0);
  }

  return result;
}

unint64_t flatbuffers::FlatBufferBuilder::AddElement<unsigned int>( unint64_t result, uint64_t a2, int a3, int a4)
{
  unint64_t v5 = result;
  if (a3 != a4 || *(_BYTE *)(result + 80))
  {
    unsigned int v6 = flatbuffers::FlatBufferBuilder::PushElement<unsigned int>(result, a3);
    unint64_t result = flatbuffers::vector_downward::ensure_space((flatbuffers::vector_downward *)v5, 8uLL);
    **(void **)(v5 + 56) = v6 | (unint64_t)(a2 << 32);
    *(void *)(v5 + 56) += 8LL;
    ++*(_DWORD *)(v5 + 64);
    unsigned int v7 = *(unsigned __int16 *)(v5 + 68);
    *(_WORD *)(v5 + 6_Block_object_dispose(va, 8) = v7;
  }

  return result;
}

uint64_t flatbuffers::FlatBufferBuilder::ReferTo(flatbuffers::FlatBufferBuilder *this, unsigned int a2)
{
  if (!a2
    || (v4 = *((_DWORD *)this + 8) - *((_DWORD *)this + 12) + *((_DWORD *)this + 10), BOOL v5 = v4 >= a2, v6 = v4 - a2, !v5))
  {
    flatbuffers::FlatBufferBuilder::ReferTo();
  }

  return v6 + 4;
}

unint64_t flatbuffers::FlatBufferBuilder::AddElement<unsigned char>( unint64_t result, uint64_t a2, int a3, int a4)
{
  unint64_t v5 = result;
  if (a3 != a4 || *(_BYTE *)(result + 80))
  {
    unsigned int v6 = flatbuffers::FlatBufferBuilder::PushElement<unsigned char>(result, a3);
    unint64_t result = flatbuffers::vector_downward::ensure_space((flatbuffers::vector_downward *)v5, 8uLL);
    **(void **)(v5 + 56) = v6 | (unint64_t)(a2 << 32);
    *(void *)(v5 + 56) += 8LL;
    ++*(_DWORD *)(v5 + 64);
    unsigned int v7 = *(unsigned __int16 *)(v5 + 68);
    *(_WORD *)(v5 + 6_Block_object_dispose(va, 8) = v7;
  }

  return result;
}

uint64_t flatbuffers::FlatBufferBuilder::PushElement<unsigned char>(uint64_t a1, char a2)
{
  unsigned int v4 = (_BYTE *)(*(void *)(a1 + 48)
               - flatbuffers::vector_downward::ensure_space((flatbuffers::vector_downward *)a1, 1uLL));
  *(void *)(a1 + 4_Block_object_dispose(va, 8) = v4;
  _BYTE *v4 = a2;
  return (*(_DWORD *)(a1 + 32) - *(_DWORD *)(a1 + 48) + *(_DWORD *)(a1 + 40));
}

uint64_t flatbuffers::FlatBufferBuilder::EndTable(flatbuffers::FlatBufferBuilder *this, int a2)
{
  if (!*((_BYTE *)this + 70)) {
    flatbuffers::FlatBufferBuilder::EndTable();
  }
  uint64_t v4 = flatbuffers::FlatBufferBuilder::PushElement<unsigned int>((uint64_t)this, 0);
  else {
    unint64_t v5 = (unsigned __int16)(*((_WORD *)this + 34) + 2);
  }
  *((_WORD *)this + 34) = v5;
  unsigned int v6 = (void *)(*((void *)this + 6) - flatbuffers::vector_downward::ensure_space(this, v5));
  *((void *)this + 6) = v6;
  bzero(v6, v5);
  unsigned __int16 v7 = v4 - a2;
  unint64_t v8 = (unsigned __int16 *)*((void *)this + 6);
  if (!v8) {
    flatbuffers::FlatBufferBuilder::GetBufferPointer();
  }
  v8[1] = v7;
  *unint64_t v8 = *((_WORD *)this + 34);
  unint64_t v9 = *((void *)this + 7);
  if (!v9) {
    flatbuffers::FlatBufferBuilder::EndTable();
  }
  uint64_t v10 = *((unsigned int *)this + 16);
  unint64_t v11 = v9 - 8 * v10;
  if ((_DWORD)v10)
  {
    unint64_t v12 = (int *)(v9 - 8 * v10);
    do
    {
      uint64_t v13 = *((unsigned __int16 *)v12 + 2);
      int v14 = *v12;
      v12 += 2;
      *(unsigned __int16 *)((char *)v8 + v13) = v4 - v14;
    }

    while ((unint64_t)v12 < v9);
  }

  *((void *)this + 7) = v11;
  *((_DWORD *)this + 16) = 0;
  *((_WORD *)this + 34) = 0;
  uint64_t v16 = *((void *)this + 4);
  unint64_t v15 = *((void *)this + 5);
  int v17 = v16 - (_DWORD)v8 + v15;
  if (*((_BYTE *)this + 81))
  {
    if (!v15) {
      flatbuffers::FlatBufferBuilder::EndTable();
    }
    if (v15 < v11)
    {
      size_t v18 = *v8;
      uint64_t v19 = v15 + v16;
      uint64_t v20 = (unsigned int *)*((void *)this + 5);
      while (1)
      {
        uint64_t v21 = *v20;
        if ((unint64_t)++v20 >= v11)
        {
          int v17 = v16 - (_DWORD)v8 + v15;
          goto LABEL_21;
        }
      }

      unint64_t v8 = (unsigned __int16 *)((char *)v8 + (v16 - (_DWORD)v8 + v15 - v4));
      *((void *)this + 6) = v8;
      int v17 = v21;
    }
  }

void std::vector<flatbuffers::Offset<KernelTraceCatalog::Thread>>::__throw_length_error[abi:ne180100]()
{
}

void std::__throw_length_error[abi:ne180100](const char *a1)
{
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::length_error::length_error[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_189F54170, MEMORY[0x1896141F8]);
}

void sub_186BBBC4C(_Unwind_Exception *a1)
{
}

std::logic_error *std::length_error::length_error[abi:ne180100](std::logic_error *a1, const char *a2)
{
  unint64_t result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x189614778] + 16LL);
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<flatbuffers::Offset<KernelTraceCatalog::Thread>>>( uint64_t a1, unint64_t a2)
{
  if (a2 >> 62) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(4 * a2);
}

void std::__throw_bad_array_new_length[abi:ne180100]()
{
  exception = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  uint64_t v1 = std::bad_array_new_length::bad_array_new_length(exception);
  __cxa_throw(v1, MEMORY[0x189614700], MEMORY[0x189614270]);
}

_OWORD *std::__tree<std::__value_type<std::pair<int,unsigned long long>,std::vector<flatbuffers::Offset<KernelTraceCatalog::Thread>>>,std::__map_value_compare<std::pair<int,unsigned long long>,std::__value_type<std::pair<int,unsigned long long>,std::vector<flatbuffers::Offset<KernelTraceCatalog::Thread>>>,std::less<std::pair<int,unsigned long long>>,true>,std::allocator<std::__value_type<std::pair<int,unsigned long long>,std::vector<flatbuffers::Offset<KernelTraceCatalog::Thread>>>>>::__emplace_unique_key_args<std::pair<int,unsigned long long>,std::piecewise_construct_t const&,std::tuple<std::pair<int,unsigned long long>&&>,std::tuple<>>( uint64_t **a1, int *a2, uint64_t a3, _OWORD **a4)
{
  unsigned int v6 = (void **)std::__tree<std::__value_type<std::pair<int,unsigned long long>,std::vector<flatbuffers::Offset<KernelTraceCatalog::Thread>>>,std::__map_value_compare<std::pair<int,unsigned long long>,std::__value_type<std::pair<int,unsigned long long>,std::vector<flatbuffers::Offset<KernelTraceCatalog::Thread>>>,std::less<std::pair<int,unsigned long long>>,true>,std::allocator<std::__value_type<std::pair<int,unsigned long long>,std::vector<flatbuffers::Offset<KernelTraceCatalog::Thread>>>>>::__find_equal<std::pair<int,unsigned long long>>( (uint64_t)a1,  &v10,  a2);
  unsigned __int16 v7 = *v6;
  if (!*v6)
  {
    unint64_t v8 = (uint64_t **)v6;
    unsigned __int16 v7 = operator new(0x48uLL);
    void v7[2] = **a4;
    *((void *)v7 + 7) = 0LL;
    *((void *)v7 + _Block_object_dispose(va, 8) = 0LL;
    *((void *)v7 + 6) = 0LL;
    std::__tree<std::__value_type<std::pair<int,unsigned long long>,std::vector<flatbuffers::Offset<KernelTraceCatalog::Thread>>>,std::__map_value_compare<std::pair<int,unsigned long long>,std::__value_type<std::pair<int,unsigned long long>,std::vector<flatbuffers::Offset<KernelTraceCatalog::Thread>>>,std::less<std::pair<int,unsigned long long>>,true>,std::allocator<std::__value_type<std::pair<int,unsigned long long>,std::vector<flatbuffers::Offset<KernelTraceCatalog::Thread>>>>>::__insert_node_at( a1,  v10,  v8,  (uint64_t *)v7);
  }

  return v7;
}

void *std::__tree<std::__value_type<std::pair<int,unsigned long long>,std::vector<flatbuffers::Offset<KernelTraceCatalog::Thread>>>,std::__map_value_compare<std::pair<int,unsigned long long>,std::__value_type<std::pair<int,unsigned long long>,std::vector<flatbuffers::Offset<KernelTraceCatalog::Thread>>>,std::less<std::pair<int,unsigned long long>>,true>,std::allocator<std::__value_type<std::pair<int,unsigned long long>,std::vector<flatbuffers::Offset<KernelTraceCatalog::Thread>>>>>::__find_equal<std::pair<int,unsigned long long>>( uint64_t a1, void *a2, int *a3)
{
  uint64_t v5 = *(void *)(a1 + 8);
  unint64_t result = (void *)(a1 + 8);
  uint64_t v4 = v5;
  if (v5)
  {
    int v6 = *a3;
    unint64_t v7 = *((void *)a3 + 1);
    while (1)
    {
      while (1)
      {
        unint64_t v8 = (void *)v4;
        int v9 = *(_DWORD *)(v4 + 32);
        if (v6 >= v9) {
          break;
        }
LABEL_4:
        uint64_t v4 = *v8;
        unint64_t result = v8;
        if (!*v8) {
          goto LABEL_12;
        }
      }

      if (v9 >= v6)
      {
        unint64_t v10 = v8[5];
        if (v7 < v10) {
          goto LABEL_4;
        }
        if (v10 >= v7) {
          goto LABEL_12;
        }
      }

      unint64_t result = v8 + 1;
      uint64_t v4 = v8[1];
      if (!v4) {
        goto LABEL_12;
      }
    }
  }

  unint64_t v8 = result;
LABEL_12:
  *a2 = v8;
  return result;
}

uint64_t *std::__tree<std::__value_type<std::pair<int,unsigned long long>,std::vector<flatbuffers::Offset<KernelTraceCatalog::Thread>>>,std::__map_value_compare<std::pair<int,unsigned long long>,std::__value_type<std::pair<int,unsigned long long>,std::vector<flatbuffers::Offset<KernelTraceCatalog::Thread>>>,std::less<std::pair<int,unsigned long long>>,true>,std::allocator<std::__value_type<std::pair<int,unsigned long long>,std::vector<flatbuffers::Offset<KernelTraceCatalog::Thread>>>>>::__insert_node_at( uint64_t **a1, uint64_t a2, uint64_t **a3, uint64_t *a4)
{
  *a4 = 0LL;
  a4[1] = 0LL;
  a4[2] = a2;
  *a3 = a4;
  uint64_t v5 = (uint64_t *)**a1;
  if (v5)
  {
    *a1 = v5;
    a4 = *a3;
  }

  unint64_t result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], a4);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return result;
}

uint64_t *std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>( uint64_t *result, uint64_t *a2)
{
  *((_BYTE *)a2 + 24) = a2 == result;
  if (a2 != result)
  {
    do
    {
      unint64_t v2 = (uint64_t *)a2[2];
      if (*((_BYTE *)v2 + 24)) {
        return result;
      }
      unint64_t v3 = (uint64_t *)v2[2];
      uint64_t v4 = (uint64_t *)*v3;
      if ((uint64_t *)*v3 == v2)
      {
        uint64_t v7 = v3[1];
        if (!v7 || (v8 = *(unsigned __int8 *)(v7 + 24), uint64_t v5 = (_BYTE *)(v7 + 24), v8))
        {
          if ((uint64_t *)*v2 == a2)
          {
            int v9 = (uint64_t **)a2[2];
          }

          else
          {
            int v9 = (uint64_t **)v2[1];
            unint64_t v10 = *v9;
            v2[1] = (uint64_t)*v9;
            if (v10)
            {
              void v10[2] = (uint64_t)v2;
              unint64_t v3 = (uint64_t *)v2[2];
            }

            v9[2] = v3;
            *(void *)(v2[2] + 8LL * (*(void *)v2[2] != (void)v2)) = v9;
            *int v9 = v2;
            v2[2] = (uint64_t)v9;
            unint64_t v3 = v9[2];
            unint64_t v2 = (uint64_t *)*v3;
          }

          *((_BYTE *)v9 + 24) = 1;
          *((_BYTE *)v3 + 24) = 0;
          uint64_t v13 = v2[1];
          *unint64_t v3 = v13;
          if (v13) {
            *(void *)(v13 + 16) = v3;
          }
          v2[2] = v3[2];
          *(void *)(v3[2] + 8LL * (*(void *)v3[2] != (void)v3)) = v2;
          v2[1] = (uint64_t)v3;
          goto LABEL_27;
        }
      }

      else if (!v4 || (v6 = *((unsigned __int8 *)v4 + 24), uint64_t v5 = v4 + 3, v6))
      {
        if ((uint64_t *)*v2 == a2)
        {
          uint64_t v11 = a2[1];
          *unint64_t v2 = v11;
          if (v11)
          {
            *(void *)(v11 + 16) = v2;
            unint64_t v3 = (uint64_t *)v2[2];
          }

          a2[2] = (uint64_t)v3;
          *(void *)(v2[2] + 8LL * (*(void *)v2[2] != (void)v2)) = a2;
          a2[1] = (uint64_t)v2;
          v2[2] = (uint64_t)a2;
          unint64_t v3 = (uint64_t *)a2[2];
        }

        else
        {
          a2 = (uint64_t *)a2[2];
        }

        *((_BYTE *)a2 + 24) = 1;
        *((_BYTE *)v3 + 24) = 0;
        unint64_t v2 = (uint64_t *)v3[1];
        uint64_t v12 = *v2;
        v3[1] = *v2;
        if (v12) {
          *(void *)(v12 + 16) = v3;
        }
        v2[2] = v3[2];
        *(void *)(v3[2] + 8LL * (*(void *)v3[2] != (void)v3)) = v2;
        *unint64_t v2 = (uint64_t)v3;
LABEL_27:
        v3[2] = (uint64_t)v2;
        return result;
      }

      *((_BYTE *)v2 + 24) = 1;
      a2 = v3;
      *((_BYTE *)v3 + 24) = v3 == result;
      _BYTE *v5 = 1;
    }

    while (v3 != result);
  }

  return result;
}

uint64_t flatbuffers::FlatBufferBuilder::CreateVectorOfSortedTables<KernelTraceCatalog::Thread>( flatbuffers::FlatBufferBuilder *a1, uint64_t a2, unint64_t a3)
{
  int v6 = (unsigned int *)(a2 + 4 * a3);
  unint64_t v10 = a1;
  unint64_t v7 = 126 - 2 * __clz(a3);
  if (a3) {
    uint64_t v8 = v7;
  }
  else {
    uint64_t v8 = 0LL;
  }
  std::__introsort<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<KernelTraceCatalog::Thread> &,flatbuffers::Offset<KernelTraceCatalog::Thread> *,false>( a2,  v6,  (uint64_t)&v10,  v8,  1);
  return flatbuffers::FlatBufferBuilder::CreateVector<KernelTraceCatalog::Thread>(a1, a2, a3);
}

uint64_t flatbuffers::FlatBufferBuilder::CreateVector<KernelTraceCatalog::Thread>( flatbuffers::FlatBufferBuilder *a1, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    uint64_t v6 = a2 - 4;
    uint64_t v7 = a3;
    do
    {
      uint64_t v8 = v7 - 1;
      int v9 = flatbuffers::FlatBufferBuilder::ReferTo(a1, *(_DWORD *)(v6 + 4 * v7));
      flatbuffers::FlatBufferBuilder::PushElement<unsigned int>((uint64_t)a1, v9);
      uint64_t v7 = v8;
    }

    while (v8);
  }

  return flatbuffers::FlatBufferBuilder::EndVector(a1, a3);
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<KernelTraceCatalog::Thread> &,flatbuffers::Offset<KernelTraceCatalog::Thread> *,false>( uint64_t result, unsigned int *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v8 = (unsigned int *)result;
LABEL_2:
  int v9 = v8;
LABEL_3:
  uint64_t v10 = 1 - a4;
  while (2)
  {
    uint64_t v8 = v9;
    uint64_t v11 = v10;
    uint64_t v12 = (char *)a2 - (char *)v9;
    unint64_t v13 = a2 - v9;
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        uint64_t v21 = *(void *)(*(void *)a3 + 40LL) + *(void *)(*(void *)a3 + 32LL);
        unint64_t result = KernelTraceCatalog::Thread::KeyCompareLessThan((int *)(v21 - *(a2 - 1)), (int *)(v21 - *v9));
        if ((_DWORD)result)
        {
          unsigned int v22 = *v9;
          *int v9 = *(a2 - 1);
          *(a2 - 1) = v22;
        }

        return result;
      case 3uLL:
        return std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<KernelTraceCatalog::Thread> &,flatbuffers::Offset<KernelTraceCatalog::Thread> *>( v9,  v9 + 1,  a2 - 1,  a3);
      case 4uLL:
        return std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<KernelTraceCatalog::Thread> &,flatbuffers::Offset<KernelTraceCatalog::Thread> *>( v9,  v9 + 1,  v9 + 2,  a2 - 1,  a3);
      case 5uLL:
        return std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<KernelTraceCatalog::Thread> &,flatbuffers::Offset<KernelTraceCatalog::Thread> *>( v9,  v9 + 1,  v9 + 2,  v9 + 3,  a2 - 1,  a3);
      default:
        if (v12 <= 95)
        {
          if ((a5 & 1) != 0) {
            return (uint64_t)std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<KernelTraceCatalog::Thread> &,flatbuffers::Offset<KernelTraceCatalog::Thread> *>( v9,  a2,  a3);
          }
          else {
            return (uint64_t)std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<KernelTraceCatalog::Thread> &,flatbuffers::Offset<KernelTraceCatalog::Thread> *>( v9,  a2,  a3);
          }
        }

        if (v11 != 1)
        {
          unint64_t v14 = v13 >> 1;
          unint64_t v15 = &v9[v13 >> 1];
          if ((unint64_t)v12 < 0x201)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<KernelTraceCatalog::Thread> &,flatbuffers::Offset<KernelTraceCatalog::Thread> *>( &v9[v13 >> 1],  v9,  a2 - 1,  a3);
            if ((a5 & 1) != 0) {
              goto LABEL_12;
            }
          }

          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<KernelTraceCatalog::Thread> &,flatbuffers::Offset<KernelTraceCatalog::Thread> *>( v9,  &v9[v13 >> 1],  a2 - 1,  a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<KernelTraceCatalog::Thread> &,flatbuffers::Offset<KernelTraceCatalog::Thread> *>( v9 + 1,  v15 - 1,  a2 - 2,  a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<KernelTraceCatalog::Thread> &,flatbuffers::Offset<KernelTraceCatalog::Thread> *>( v9 + 2,  &v9[v14 + 1],  a2 - 3,  a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<KernelTraceCatalog::Thread> &,flatbuffers::Offset<KernelTraceCatalog::Thread> *>( v15 - 1,  v15,  &v9[v14 + 1],  a3);
            unsigned int v16 = *v9;
            *int v9 = *v15;
            unsigned int *v15 = v16;
            if ((a5 & 1) != 0) {
              goto LABEL_12;
            }
          }

          uint64_t v17 = *(void *)(*(void *)a3 + 40LL) + *(void *)(*(void *)a3 + 32LL);
          if (!KernelTraceCatalog::Thread::KeyCompareLessThan((int *)(v17 - *(v9 - 1)), (int *)(v17 - *v9)))
          {
            unint64_t result = (uint64_t)std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,flatbuffers::Offset<KernelTraceCatalog::Thread> *,flatbuffers::FlatBufferBuilder::TableKeyComparator<KernelTraceCatalog::Thread> &>( v9,  a2,  a3);
            int v9 = (unsigned int *)result;
            goto LABEL_17;
          }

LABEL_12:
          size_t v18 = (unsigned int *)std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,flatbuffers::Offset<KernelTraceCatalog::Thread> *,flatbuffers::FlatBufferBuilder::TableKeyComparator<KernelTraceCatalog::Thread> &>( (int *)v9,  (int *)a2,  a3);
          if ((v19 & 1) == 0) {
            goto LABEL_15;
          }
          BOOL v20 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<KernelTraceCatalog::Thread> &,flatbuffers::Offset<KernelTraceCatalog::Thread> *>( v9,  v18,  a3);
          int v9 = v18 + 1;
          unint64_t result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<KernelTraceCatalog::Thread> &,flatbuffers::Offset<KernelTraceCatalog::Thread> *>( v18 + 1,  a2,  a3);
          if (!(_DWORD)result)
          {
            uint64_t v10 = v11 + 1;
            if (v20) {
              continue;
            }
LABEL_15:
            unint64_t result = std::__introsort<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<KernelTraceCatalog::Thread> &,flatbuffers::Offset<KernelTraceCatalog::Thread> *,false>( v8,  v18,  a3,  -v11,  a5 & 1);
            int v9 = v18 + 1;
LABEL_17:
            a5 = 0;
            a4 = -v11;
            goto LABEL_3;
          }

          a4 = -v11;
          a2 = v18;
          if (v20) {
            return result;
          }
          goto LABEL_2;
        }

        if (v9 != a2) {
          return (uint64_t)std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<KernelTraceCatalog::Thread> &,flatbuffers::Offset<KernelTraceCatalog::Thread> *,flatbuffers::Offset<KernelTraceCatalog::Thread> *>( v9,  a2,  a2,  a3);
        }
        return result;
    }
  }

          size_t v18 = (unsigned int *)std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,flatbuffers::Offset<KernelTraceCatalog::Thread> *,flatbuffers::FlatBufferBuilder::TableKeyComparator<KernelTraceCatalog::Thread> &>( (int *)v9,  (int *)a2,  a3);
          if ((v19 & 1) == 0) {
            goto LABEL_15;
          }
          BOOL v20 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<KernelTraceCatalog::Process> &,flatbuffers::Offset<KernelTraceCatalog::Process> *>( v9,  v18,  a3);
          int v9 = v18 + 1;
          unint64_t result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<KernelTraceCatalog::Process> &,flatbuffers::Offset<KernelTraceCatalog::Process> *>( v18 + 1,  a2,  a3);
          if (!(_DWORD)result)
          {
            uint64_t v10 = v11 + 1;
            if (v20) {
              continue;
            }
LABEL_15:
            unint64_t result = std::__introsort<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<KernelTraceCatalog::Process> &,flatbuffers::Offset<KernelTraceCatalog::Process> *,false>( v8,  v18,  a3,  -v11,  a5 & 1);
            int v9 = v18 + 1;
LABEL_17:
            a5 = 0;
            a4 = -v11;
            goto LABEL_3;
          }

          a4 = -v11;
          a2 = v18;
          if (v20) {
            return result;
          }
          goto LABEL_2;
        }

        if (v9 != a2) {
          return (uint64_t)std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<KernelTraceCatalog::Thread> &,flatbuffers::Offset<KernelTraceCatalog::Thread> *,flatbuffers::Offset<KernelTraceCatalog::Thread> *>( v9,  a2,  a2,  a3);
        }
        return result;
    }
  }

  unint64_t result = __error();
  uint64_t *result = v5;
  return result;
}

unsigned int *std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<KernelTraceCatalog::Thread> &,flatbuffers::Offset<KernelTraceCatalog::Thread> *>( unsigned int *result, unsigned int *a2, uint64_t a3)
{
  if (result != a2)
  {
    uint64_t v4 = result;
    uint64_t v5 = result + 1;
    if (result + 1 != a2)
    {
      uint64_t v7 = 0LL;
      uint64_t v8 = result;
      do
      {
        uint64_t v10 = *v8;
        uint64_t v9 = v8[1];
        uint64_t v8 = v5;
        uint64_t v11 = *(void *)(*(void *)a3 + 40LL) + *(void *)(*(void *)a3 + 32LL);
        unint64_t result = (unsigned int *)KernelTraceCatalog::Thread::KeyCompareLessThan((int *)(v11 - v9), (int *)(v11 - v10));
        if ((_DWORD)result)
        {
          uint64_t v12 = *v8;
          uint64_t v13 = v7;
          while (1)
          {
            *(_DWORD *)((char *)v4 + v13 + 4) = *(_DWORD *)((char *)v4 + v13);
            if (!v13) {
              break;
            }
            uint64_t v14 = *(void *)(*(void *)a3 + 40LL) + *(void *)(*(void *)a3 + 32LL);
            unint64_t result = (unsigned int *)KernelTraceCatalog::Thread::KeyCompareLessThan( (int *)(v14 - v12),  (int *)(v14 - *(unsigned int *)((char *)v4 + v13 - 4)));
            v13 -= 4LL;
            if ((result & 1) == 0)
            {
              unint64_t v15 = (_DWORD *)((char *)v4 + v13 + 4);
              goto LABEL_10;
            }
          }

          unint64_t v15 = v4;
LABEL_10:
          _DWORD *v15 = v12;
        }

        uint64_t v5 = v8 + 1;
        v7 += 4LL;
      }

      while (v8 + 1 != a2);
    }
  }

  return result;
}

unsigned int *std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<KernelTraceCatalog::Thread> &,flatbuffers::Offset<KernelTraceCatalog::Thread> *>( unsigned int *result, unsigned int *a2, uint64_t a3)
{
  if (result != a2)
  {
    uint64_t v4 = result;
    for (uint64_t i = result + 1; v4 + 1 != a2; uint64_t i = v4 + 1)
    {
      uint64_t v8 = *v4;
      uint64_t v7 = v4[1];
      uint64_t v4 = i;
      uint64_t v9 = *(void *)(*(void *)a3 + 40LL) + *(void *)(*(void *)a3 + 32LL);
      unint64_t result = (unsigned int *)KernelTraceCatalog::Thread::KeyCompareLessThan((int *)(v9 - v7), (int *)(v9 - v8));
      if ((_DWORD)result)
      {
        uint64_t v10 = *v4;
        uint64_t v11 = v4;
        do
        {
          uint64_t v12 = v11;
          unsigned int v13 = *--v11;
          *uint64_t v12 = v13;
          uint64_t v14 = *(void *)(*(void *)a3 + 40LL) + *(void *)(*(void *)a3 + 32LL);
          unint64_t result = (unsigned int *)KernelTraceCatalog::Thread::KeyCompareLessThan( (int *)(v14 - v10),  (int *)(v14 - *(v12 - 2)));
        }

        while ((result & 1) != 0);
        *uint64_t v11 = v10;
      }
    }
  }

  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<KernelTraceCatalog::Thread> &,flatbuffers::Offset<KernelTraceCatalog::Thread> *>( unsigned int *a1, unsigned int *a2, unsigned int *a3, uint64_t a4)
{
  uint64_t v8 = *(void *)(*(void *)a4 + 40LL) + *(void *)(*(void *)a4 + 32LL);
  BOOL v9 = KernelTraceCatalog::Thread::KeyCompareLessThan((int *)(v8 - *a2), (int *)(v8 - *a1));
  uint64_t v10 = *(void *)(*(void *)a4 + 40LL) + *(void *)(*(void *)a4 + 32LL);
  uint64_t result = KernelTraceCatalog::Thread::KeyCompareLessThan((int *)(v10 - *a3), (int *)(v10 - *a2));
  if (!v9)
  {
    if (!(_DWORD)result) {
      return result;
    }
    unsigned int v13 = *a2;
    *a2 = *a3;
    *a3 = v13;
    uint64_t v14 = *(void *)(*(void *)a4 + 40LL) + *(void *)(*(void *)a4 + 32LL);
    unsigned int v15 = *a1;
    *a1 = *a2;
    *a2 = v15;
    return 2LL;
  }

  uint64_t v12 = *a1;
  if (!(_DWORD)result)
  {
    *a1 = *a2;
    *a2 = v12;
    uint64_t v16 = *(void *)(*(void *)a4 + 40LL) + *(void *)(*(void *)a4 + 32LL);
    unsigned int v17 = *a2;
    *a2 = *a3;
    *a3 = v17;
    return 2LL;
  }

  *a1 = *a3;
  *a3 = v12;
  return 1LL;
}

unsigned int *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,flatbuffers::Offset<KernelTraceCatalog::Thread> *,flatbuffers::FlatBufferBuilder::TableKeyComparator<KernelTraceCatalog::Thread> &>( unsigned int *a1, unsigned int *a2, uint64_t a3)
{
  uint64_t v4 = a2;
  uint64_t v6 = *a1;
  uint64_t v7 = *(void *)(*(void *)a3 + 40LL) + *(void *)(*(void *)a3 + 32LL);
  if (KernelTraceCatalog::Thread::KeyCompareLessThan((int *)(v7 - v6), (int *)(v7 - *(a2 - 1))))
  {
    uint64_t v8 = a1;
    do
    {
      unsigned int v9 = v8[1];
      ++v8;
      uint64_t v10 = *(void *)(*(void *)a3 + 40LL) + *(void *)(*(void *)a3 + 32LL);
    }

    while (!KernelTraceCatalog::Thread::KeyCompareLessThan((int *)(v10 - v6), (int *)(v10 - v9)));
  }

  else
  {
    uint64_t v11 = a1 + 1;
    do
    {
      uint64_t v8 = v11;
      if (v11 >= v4) {
        break;
      }
      uint64_t v12 = *(void *)(*(void *)a3 + 40LL) + *(void *)(*(void *)a3 + 32LL);
      ++v11;
    }

    while (!KernelTraceCatalog::Thread::KeyCompareLessThan((int *)(v12 - v6), (int *)(v12 - *v8)));
  }

  if (v8 < v4)
  {
    do
    {
      unsigned int v13 = *--v4;
      uint64_t v14 = *(void *)(*(void *)a3 + 40LL) + *(void *)(*(void *)a3 + 32LL);
    }

    while (KernelTraceCatalog::Thread::KeyCompareLessThan((int *)(v14 - v6), (int *)(v14 - v13)));
  }

  while (v8 < v4)
  {
    unsigned int v15 = *v8;
    *uint64_t v8 = *v4;
    unsigned int *v4 = v15;
    do
    {
      unsigned int v16 = v8[1];
      ++v8;
      uint64_t v17 = *(void *)(*(void *)a3 + 40LL) + *(void *)(*(void *)a3 + 32LL);
    }

    while (!KernelTraceCatalog::Thread::KeyCompareLessThan((int *)(v17 - v6), (int *)(v17 - v16)));
    do
    {
      unsigned int v18 = *--v4;
      uint64_t v19 = *(void *)(*(void *)a3 + 40LL) + *(void *)(*(void *)a3 + 32LL);
    }

    while (KernelTraceCatalog::Thread::KeyCompareLessThan((int *)(v19 - v6), (int *)(v19 - v18)));
  }

  if (v8 - 1 != a1) {
    *a1 = *(v8 - 1);
  }
  *(v8 - 1) = v6;
  return v8;
}

int *std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,flatbuffers::Offset<KernelTraceCatalog::Thread> *,flatbuffers::FlatBufferBuilder::TableKeyComparator<KernelTraceCatalog::Thread> &>( int *a1, int *a2, uint64_t a3)
{
  uint64_t v6 = 0LL;
  uint64_t v7 = *a1;
  do
    uint64_t v8 = *(void *)(*(void *)a3 + 40LL) + *(void *)(*(void *)a3 + 32LL);
  while (KernelTraceCatalog::Thread::KeyCompareLessThan((int *)(v8 - a1[++v6]), (int *)(v8 - v7)));
  uint64_t v10 = &a1[v6];
  uint64_t v11 = &a1[v6 - 1];
  if (v6 == 1)
  {
    do
    {
      if (v10 >= a2) {
        break;
      }
      unsigned int v14 = *--a2;
      uint64_t v15 = *(void *)(*(void *)a3 + 40LL) + *(void *)(*(void *)a3 + 32LL);
    }

    while (!KernelTraceCatalog::Thread::KeyCompareLessThan((int *)(v15 - v14), (int *)(v15 - v7)));
  }

  else
  {
    do
    {
      unsigned int v12 = *--a2;
      uint64_t v13 = *(void *)(*(void *)a3 + 40LL) + *(void *)(*(void *)a3 + 32LL);
    }

    while (!KernelTraceCatalog::Thread::KeyCompareLessThan((int *)(v13 - v12), (int *)(v13 - v7)));
  }

  if (v10 < a2)
  {
    unsigned int v16 = &a1[v6];
    uint64_t v17 = a2;
    do
    {
      int v18 = *v16;
      *unsigned int v16 = *v17;
      *uint64_t v17 = v18;
      do
      {
        unsigned int v19 = v16[1];
        ++v16;
        uint64_t v20 = *(void *)(*(void *)a3 + 40LL) + *(void *)(*(void *)a3 + 32LL);
      }

      while (KernelTraceCatalog::Thread::KeyCompareLessThan((int *)(v20 - v19), (int *)(v20 - v7)));
      do
      {
        unsigned int v21 = *--v17;
        uint64_t v22 = *(void *)(*(void *)a3 + 40LL) + *(void *)(*(void *)a3 + 32LL);
      }

      while (!KernelTraceCatalog::Thread::KeyCompareLessThan((int *)(v22 - v21), (int *)(v22 - v7)));
    }

    while (v16 < v17);
    uint64_t v11 = v16 - 1;
  }

  if (v11 != a1) {
    *a1 = *v11;
  }
  *uint64_t v11 = v7;
  return v11;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<KernelTraceCatalog::Thread> &,flatbuffers::Offset<KernelTraceCatalog::Thread> *>( unsigned int *a1, unsigned int *a2, uint64_t a3)
{
  uint64_t v6 = a2 - a1;
  BOOL result = 1LL;
  switch(v6)
  {
    case 0LL:
    case 1LL:
      return result;
    case 2LL:
      uint64_t v8 = *(void *)(*(void *)a3 + 40LL) + *(void *)(*(void *)a3 + 32LL);
      if (KernelTraceCatalog::Thread::KeyCompareLessThan((int *)(v8 - *(a2 - 1)), (int *)(v8 - *a1)))
      {
        unsigned int v9 = *a1;
        *a1 = *(a2 - 1);
        *(a2 - 1) = v9;
      }

      return 1LL;
    case 3LL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<KernelTraceCatalog::Thread> &,flatbuffers::Offset<KernelTraceCatalog::Thread> *>( a1,  a1 + 1,  a2 - 1,  a3);
      return 1LL;
    case 4LL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<KernelTraceCatalog::Thread> &,flatbuffers::Offset<KernelTraceCatalog::Thread> *>( a1,  a1 + 1,  a1 + 2,  a2 - 1,  a3);
      return 1LL;
    case 5LL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<KernelTraceCatalog::Thread> &,flatbuffers::Offset<KernelTraceCatalog::Thread> *>( a1,  a1 + 1,  a1 + 2,  a1 + 3,  a2 - 1,  a3);
      return 1LL;
    default:
      uint64_t v10 = a1 + 2;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<KernelTraceCatalog::Thread> &,flatbuffers::Offset<KernelTraceCatalog::Thread> *>( a1,  a1 + 1,  a1 + 2,  a3);
      uint64_t v11 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1LL;
      }
      uint64_t v12 = 0LL;
      int v13 = 0;
      break;
  }

  while (1)
  {
    uint64_t v14 = *(void *)(*(void *)a3 + 40LL) + *(void *)(*(void *)a3 + 32LL);
    if (KernelTraceCatalog::Thread::KeyCompareLessThan((int *)(v14 - *v11), (int *)(v14 - *v10)))
    {
      uint64_t v15 = *v11;
      uint64_t v16 = v12;
      while (1)
      {
        *(unsigned int *)((char *)a1 + v16 + 12) = *(unsigned int *)((char *)a1 + v16 + 8);
        if (v16 == -8) {
          break;
        }
        uint64_t v17 = *(void *)(*(void *)a3 + 40LL) + *(void *)(*(void *)a3 + 32LL);
        BOOL v18 = KernelTraceCatalog::Thread::KeyCompareLessThan( (int *)(v17 - v15),  (int *)(v17 - *(unsigned int *)((char *)a1 + v16 + 4)));
        v16 -= 4LL;
        if (!v18)
        {
          unsigned int v19 = (unsigned int *)((char *)a1 + v16 + 12);
          goto LABEL_12;
        }
      }

      unsigned int v19 = a1;
LABEL_12:
      *unsigned int v19 = v15;
      if (++v13 == 8) {
        return v11 + 1 == a2;
      }
    }

    uint64_t v10 = v11;
    v12 += 4LL;
    if (++v11 == a2) {
      return 1LL;
    }
  }

BOOL KernelTraceCatalog::Thread::KeyCompareLessThan(int *a1, int *a2)
{
  unint64_t v2 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v2 < 5u)
  {
    unint64_t v3 = 0LL;
  }

  else
  {
    unint64_t v3 = v2[2];
    if (v3) {
      unint64_t v3 = *(void *)((char *)a1 + v3);
    }
  }

  uint64_t v4 = (unsigned __int16 *)((char *)a2 - *a2);
  if (*v4 < 5u)
  {
    unint64_t v5 = 0LL;
  }

  else
  {
    unint64_t v5 = v4[2];
    if (v5) {
      unint64_t v5 = *(void *)((char *)a2 + v5);
    }
  }

  return v3 < v5;
}

BOOL std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<KernelTraceCatalog::Thread> &,flatbuffers::Offset<KernelTraceCatalog::Thread> *>( unsigned int *a1, unsigned int *a2, unsigned int *a3, unsigned int *a4, uint64_t a5)
{
  uint64_t v10 = *(void *)(*(void *)a5 + 40LL) + *(void *)(*(void *)a5 + 32LL);
  BOOL result = KernelTraceCatalog::Thread::KeyCompareLessThan((int *)(v10 - *a4), (int *)(v10 - *a3));
  if (result)
  {
    unsigned int v12 = *a3;
    *a3 = *a4;
    *a4 = v12;
    uint64_t v13 = *(void *)(*(void *)a5 + 40LL) + *(void *)(*(void *)a5 + 32LL);
    BOOL result = KernelTraceCatalog::Thread::KeyCompareLessThan((int *)(v13 - *a3), (int *)(v13 - *a2));
    if (result)
    {
      unsigned int v14 = *a2;
      *a2 = *a3;
      *a3 = v14;
      uint64_t v15 = *(void *)(*(void *)a5 + 40LL) + *(void *)(*(void *)a5 + 32LL);
      BOOL result = KernelTraceCatalog::Thread::KeyCompareLessThan((int *)(v15 - *a2), (int *)(v15 - *a1));
      if (result)
      {
        unsigned int v16 = *a1;
        *a1 = *a2;
        *a2 = v16;
      }
    }
  }

  return result;
}

BOOL std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<KernelTraceCatalog::Thread> &,flatbuffers::Offset<KernelTraceCatalog::Thread> *>( unsigned int *a1, unsigned int *a2, unsigned int *a3, unsigned int *a4, unsigned int *a5, uint64_t a6)
{
  uint64_t v12 = *(void *)(*(void *)a6 + 40LL) + *(void *)(*(void *)a6 + 32LL);
  BOOL result = KernelTraceCatalog::Thread::KeyCompareLessThan((int *)(v12 - *a5), (int *)(v12 - *a4));
  if (result)
  {
    unsigned int v14 = *a4;
    *a4 = *a5;
    *a5 = v14;
    uint64_t v15 = *(void *)(*(void *)a6 + 40LL) + *(void *)(*(void *)a6 + 32LL);
    BOOL result = KernelTraceCatalog::Thread::KeyCompareLessThan((int *)(v15 - *a4), (int *)(v15 - *a3));
    if (result)
    {
      unsigned int v16 = *a3;
      *a3 = *a4;
      *a4 = v16;
      uint64_t v17 = *(void *)(*(void *)a6 + 40LL) + *(void *)(*(void *)a6 + 32LL);
      BOOL result = KernelTraceCatalog::Thread::KeyCompareLessThan((int *)(v17 - *a3), (int *)(v17 - *a2));
      if (result)
      {
        unsigned int v18 = *a2;
        *a2 = *a3;
        *a3 = v18;
        uint64_t v19 = *(void *)(*(void *)a6 + 40LL) + *(void *)(*(void *)a6 + 32LL);
        BOOL result = KernelTraceCatalog::Thread::KeyCompareLessThan((int *)(v19 - *a2), (int *)(v19 - *a1));
        if (result)
        {
          unsigned int v20 = *a1;
          *a1 = *a2;
          *a2 = v20;
        }
      }
    }
  }

  return result;
}

unsigned int *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<KernelTraceCatalog::Thread> &,flatbuffers::Offset<KernelTraceCatalog::Thread> *,flatbuffers::Offset<KernelTraceCatalog::Thread> *>( unsigned int *a1, unsigned int *a2, unsigned int *a3, uint64_t a4)
{
  if (a1 != a2)
  {
    uint64_t v8 = (char *)a2 - (char *)a1;
    uint64_t v9 = a2 - a1;
    if ((char *)a2 - (char *)a1 >= 5)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      uint64_t v12 = &a1[v10];
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<KernelTraceCatalog::Thread> &,flatbuffers::Offset<KernelTraceCatalog::Thread> *>( (BOOL)a1,  a4,  v9,  v12--);
        --v11;
      }

      while (v11);
    }

    uint64_t v13 = a2;
    if (a2 != a3)
    {
      unsigned int v14 = a2;
      do
      {
        uint64_t v15 = *(void *)(*(void *)a4 + 40LL) + *(void *)(*(void *)a4 + 32LL);
        if (KernelTraceCatalog::Thread::KeyCompareLessThan((int *)(v15 - *v14), (int *)(v15 - *a1)))
        {
          unsigned int v16 = *v14;
          unsigned int *v14 = *a1;
          *a1 = v16;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<KernelTraceCatalog::Thread> &,flatbuffers::Offset<KernelTraceCatalog::Thread> *>( (BOOL)a1,  a4,  v9,  a1);
        }

        ++v14;
      }

      while (v14 != a3);
      uint64_t v13 = a3;
    }

    if (v8 >= 5)
    {
      uint64_t v17 = (unint64_t)v8 >> 2;
      unsigned int v18 = a2 - 1;
      do
      {
        unsigned int v19 = *a1;
        unsigned int v20 = std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<KernelTraceCatalog::Thread> &,flatbuffers::Offset<KernelTraceCatalog::Thread> *>( a1,  a4,  v17);
        if (v18 == v20)
        {
          *unsigned int v20 = v19;
        }

        else
        {
          *unsigned int v20 = *v18;
          *unsigned int v18 = v19;
          std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<KernelTraceCatalog::Thread> &,flatbuffers::Offset<KernelTraceCatalog::Thread> *>( (BOOL)a1,  (uint64_t)(v20 + 1),  a4,  v20 + 1 - a1);
        }

        --v18;
      }

      while (v17-- > 2);
    }

    return v13;
  }

  return a3;
}

BOOL std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<KernelTraceCatalog::Thread> &,flatbuffers::Offset<KernelTraceCatalog::Thread> *>( BOOL result, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  unint64_t v4 = a3 - 2;
  if (a3 >= 2)
  {
    unint64_t v5 = a4;
    BOOL v6 = result;
    int64_t v7 = v4 >> 1;
    if ((uint64_t)(v4 >> 1) >= ((uint64_t)a4 - result) >> 2)
    {
      uint64_t v10 = ((uint64_t)a4 - result) >> 1;
      uint64_t v11 = v10 + 1;
      uint64_t v12 = (unsigned int *)(result + 4 * (v10 + 1));
      uint64_t v13 = v10 + 2;
      if (v10 + 2 < a3)
      {
        uint64_t v14 = *(void *)(*(void *)a2 + 40LL) + *(void *)(*(void *)a2 + 32LL);
        if (KernelTraceCatalog::Thread::KeyCompareLessThan((int *)(v14 - *v12), (int *)(v14 - v12[1])))
        {
          ++v12;
          uint64_t v11 = v13;
        }
      }

      uint64_t v15 = *(void *)(*(void *)a2 + 40LL) + *(void *)(*(void *)a2 + 32LL);
      BOOL result = KernelTraceCatalog::Thread::KeyCompareLessThan((int *)(v15 - *v12), (int *)(v15 - *v5));
      if (!result)
      {
        uint64_t v21 = *v5;
        do
        {
          unsigned int v16 = v5;
          unint64_t v5 = v12;
          *unsigned int v16 = *v12;
          if (v7 < v11) {
            break;
          }
          uint64_t v17 = (2 * v11) | 1;
          uint64_t v12 = (unsigned int *)(v6 + 4 * v17);
          uint64_t v18 = 2 * v11 + 2;
          if (v18 < a3)
          {
            uint64_t v19 = *(void *)(*(void *)a2 + 40LL) + *(void *)(*(void *)a2 + 32LL);
            if (KernelTraceCatalog::Thread::KeyCompareLessThan((int *)(v19 - *v12), (int *)(v19 - v12[1])))
            {
              ++v12;
              uint64_t v17 = v18;
            }
          }

          uint64_t v20 = *(void *)(*(void *)a2 + 40LL) + *(void *)(*(void *)a2 + 32LL);
          BOOL result = KernelTraceCatalog::Thread::KeyCompareLessThan((int *)(v20 - *v12), (int *)(v20 - v21));
          uint64_t v11 = v17;
        }

        while (!result);
        _DWORD *v5 = v21;
      }
    }
  }

  return result;
}

unsigned int *std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<KernelTraceCatalog::Thread> &,flatbuffers::Offset<KernelTraceCatalog::Thread> *>( _DWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = 0LL;
  uint64_t v7 = a3 - 2;
  if (a3 < 2) {
    uint64_t v7 = a3 - 1;
  }
  uint64_t v8 = v7 >> 1;
  do
  {
    uint64_t v9 = &a1[v6 + 1];
    uint64_t v10 = (2 * v6) | 1;
    uint64_t v11 = 2 * v6 + 2;
    if (v11 < a3)
    {
      uint64_t v12 = *(void *)(*(void *)a2 + 40LL) + *(void *)(*(void *)a2 + 32LL);
      if (KernelTraceCatalog::Thread::KeyCompareLessThan((int *)(v12 - *v9), (int *)(v12 - v9[1])))
      {
        ++v9;
        uint64_t v10 = v11;
      }
    }

    *a1 = *v9;
    a1 = v9;
    uint64_t v6 = v10;
  }

  while (v10 <= v8);
  return v9;
}

BOOL std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<KernelTraceCatalog::Thread> &,flatbuffers::Offset<KernelTraceCatalog::Thread> *>( BOOL result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = a4 - 2;
  if (a4 >= 2)
  {
    BOOL v6 = result;
    unint64_t v7 = v4 >> 1;
    uint64_t v8 = (_DWORD *)(result + 4 * (v4 >> 1));
    uint64_t v9 = (_DWORD *)(a2 - 4);
    uint64_t v10 = *(void *)(*(void *)a3 + 40LL) + *(void *)(*(void *)a3 + 32LL);
    BOOL result = KernelTraceCatalog::Thread::KeyCompareLessThan( (int *)(v10 - *v8),  (int *)(v10 - *(unsigned int *)(a2 - 4)));
    if (result)
    {
      uint64_t v11 = *v9;
      do
      {
        uint64_t v12 = v9;
        uint64_t v9 = v8;
        *uint64_t v12 = *v8;
        if (!v7) {
          break;
        }
        unint64_t v7 = (v7 - 1) >> 1;
        uint64_t v8 = (_DWORD *)(v6 + 4 * v7);
        uint64_t v13 = *(void *)(*(void *)a3 + 40LL) + *(void *)(*(void *)a3 + 32LL);
        BOOL result = KernelTraceCatalog::Thread::KeyCompareLessThan((int *)(v13 - *v8), (int *)(v13 - v11));
      }

      while (result);
      *uint64_t v9 = v11;
    }
  }

  return result;
}

unint64_t flatbuffers::FlatBufferBuilder::StartVector( flatbuffers::FlatBufferBuilder *this, uint64_t a2, unint64_t a3)
{
  *((_BYTE *)this + 70) = 1;
  uint64_t v6 = a3 * a2;
  flatbuffers::FlatBufferBuilder::PreAlign(this, v6, 4uLL);
  return flatbuffers::FlatBufferBuilder::PreAlign(this, v6, a3);
}

uint64_t flatbuffers::FlatBufferBuilder::EndVector(flatbuffers::FlatBufferBuilder *this, int a2)
{
  if (!*((_BYTE *)this + 70)) {
    flatbuffers::FlatBufferBuilder::EndVector();
  }
  *((_BYTE *)this + 70) = 0;
  return flatbuffers::FlatBufferBuilder::PushElement<unsigned int>((uint64_t)this, a2);
}

uint64_t flatbuffers::FlatBufferBuilder::CreateVectorOfSortedTables<KernelTraceCatalog::Process>( flatbuffers::FlatBufferBuilder *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v6 = (unsigned int *)(a2 + 4 * a3);
  uint64_t v10 = a1;
  unint64_t v7 = 126 - 2 * __clz(a3);
  if (a3) {
    uint64_t v8 = v7;
  }
  else {
    uint64_t v8 = 0LL;
  }
  std::__introsort<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<KernelTraceCatalog::Process> &,flatbuffers::Offset<KernelTraceCatalog::Process> *,false>( a2,  v6,  (uint64_t)&v10,  v8,  1);
  return flatbuffers::FlatBufferBuilder::CreateVector<KernelTraceCatalog::Thread>(a1, a2, a3);
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<KernelTraceCatalog::Process> &,flatbuffers::Offset<KernelTraceCatalog::Process> *,false>( uint64_t result, unsigned int *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v8 = (unsigned int *)result;
LABEL_2:
  uint64_t v9 = v8;
LABEL_3:
  uint64_t v10 = 1 - a4;
  while (2)
  {
    uint64_t v8 = v9;
    uint64_t v11 = v10;
    uint64_t v12 = (char *)a2 - (char *)v9;
    unint64_t v13 = a2 - v9;
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        uint64_t v21 = *(void *)(*(void *)a3 + 40LL) + *(void *)(*(void *)a3 + 32LL);
        BOOL result = KernelTraceCatalog::Thread::KeyCompareLessThan((int *)(v21 - *(a2 - 1)), (int *)(v21 - *v9));
        if ((_DWORD)result)
        {
          unsigned int v22 = *v9;
          *uint64_t v9 = *(a2 - 1);
          *(a2 - 1) = v22;
        }

        return result;
      case 3uLL:
        return std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<KernelTraceCatalog::Thread> &,flatbuffers::Offset<KernelTraceCatalog::Thread> *>( v9,  v9 + 1,  a2 - 1,  a3);
      case 4uLL:
        return std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<KernelTraceCatalog::Thread> &,flatbuffers::Offset<KernelTraceCatalog::Thread> *>( v9,  v9 + 1,  v9 + 2,  a2 - 1,  a3);
      case 5uLL:
        return std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<KernelTraceCatalog::Thread> &,flatbuffers::Offset<KernelTraceCatalog::Thread> *>( v9,  v9 + 1,  v9 + 2,  v9 + 3,  a2 - 1,  a3);
      default:
        if (v12 <= 95)
        {
          if ((a5 & 1) != 0) {
            return (uint64_t)std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<KernelTraceCatalog::Thread> &,flatbuffers::Offset<KernelTraceCatalog::Thread> *>( v9,  a2,  a3);
          }
          else {
            return (uint64_t)std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<KernelTraceCatalog::Thread> &,flatbuffers::Offset<KernelTraceCatalog::Thread> *>( v9,  a2,  a3);
          }
        }

        if (v11 != 1)
        {
          unint64_t v14 = v13 >> 1;
          uint64_t v15 = &v9[v13 >> 1];
          if ((unint64_t)v12 < 0x201)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<KernelTraceCatalog::Thread> &,flatbuffers::Offset<KernelTraceCatalog::Thread> *>( &v9[v13 >> 1],  v9,  a2 - 1,  a3);
            if ((a5 & 1) != 0) {
              goto LABEL_12;
            }
          }

          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<KernelTraceCatalog::Thread> &,flatbuffers::Offset<KernelTraceCatalog::Thread> *>( v9,  &v9[v13 >> 1],  a2 - 1,  a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<KernelTraceCatalog::Thread> &,flatbuffers::Offset<KernelTraceCatalog::Thread> *>( v9 + 1,  v15 - 1,  a2 - 2,  a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<KernelTraceCatalog::Thread> &,flatbuffers::Offset<KernelTraceCatalog::Thread> *>( v9 + 2,  &v9[v14 + 1],  a2 - 3,  a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<KernelTraceCatalog::Thread> &,flatbuffers::Offset<KernelTraceCatalog::Thread> *>( v15 - 1,  v15,  &v9[v14 + 1],  a3);
            unsigned int v16 = *v9;
            *uint64_t v9 = *v15;
            unsigned int *v15 = v16;
            if ((a5 & 1) != 0) {
              goto LABEL_12;
            }
          }

          uint64_t v17 = *(void *)(*(void *)a3 + 40LL) + *(void *)(*(void *)a3 + 32LL);
          if (!KernelTraceCatalog::Thread::KeyCompareLessThan((int *)(v17 - *(v9 - 1)), (int *)(v17 - *v9)))
          {
            BOOL result = (uint64_t)std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,flatbuffers::Offset<KernelTraceCatalog::Thread> *,flatbuffers::FlatBufferBuilder::TableKeyComparator<KernelTraceCatalog::Thread> &>( v9,  a2,  a3);
            uint64_t v9 = (unsigned int *)result;
            goto LABEL_17;
          }

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<KernelTraceCatalog::Process> &,flatbuffers::Offset<KernelTraceCatalog::Process> *>( unsigned int *a1, unsigned int *a2, uint64_t a3)
{
  uint64_t v6 = a2 - a1;
  BOOL result = 1LL;
  switch(v6)
  {
    case 0LL:
    case 1LL:
      return result;
    case 2LL:
      uint64_t v8 = *(void *)(*(void *)a3 + 40LL) + *(void *)(*(void *)a3 + 32LL);
      if (KernelTraceCatalog::Thread::KeyCompareLessThan((int *)(v8 - *(a2 - 1)), (int *)(v8 - *a1)))
      {
        unsigned int v9 = *a1;
        *a1 = *(a2 - 1);
        *(a2 - 1) = v9;
      }

      return 1LL;
    case 3LL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<KernelTraceCatalog::Thread> &,flatbuffers::Offset<KernelTraceCatalog::Thread> *>( a1,  a1 + 1,  a2 - 1,  a3);
      return 1LL;
    case 4LL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<KernelTraceCatalog::Thread> &,flatbuffers::Offset<KernelTraceCatalog::Thread> *>( a1,  a1 + 1,  a1 + 2,  a2 - 1,  a3);
      return 1LL;
    case 5LL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<KernelTraceCatalog::Thread> &,flatbuffers::Offset<KernelTraceCatalog::Thread> *>( a1,  a1 + 1,  a1 + 2,  a1 + 3,  a2 - 1,  a3);
      return 1LL;
    default:
      uint64_t v10 = a1 + 2;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<KernelTraceCatalog::Thread> &,flatbuffers::Offset<KernelTraceCatalog::Thread> *>( a1,  a1 + 1,  a1 + 2,  a3);
      uint64_t v11 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1LL;
      }
      uint64_t v12 = 0LL;
      int v13 = 0;
      break;
  }

  while (1)
  {
    uint64_t v14 = *(void *)(*(void *)a3 + 40LL) + *(void *)(*(void *)a3 + 32LL);
    if (KernelTraceCatalog::Thread::KeyCompareLessThan((int *)(v14 - *v11), (int *)(v14 - *v10)))
    {
      uint64_t v15 = *v11;
      uint64_t v16 = v12;
      while (1)
      {
        *(unsigned int *)((char *)a1 + v16 + 12) = *(unsigned int *)((char *)a1 + v16 + 8);
        if (v16 == -8) {
          break;
        }
        uint64_t v17 = *(void *)(*(void *)a3 + 40LL) + *(void *)(*(void *)a3 + 32LL);
        BOOL v18 = KernelTraceCatalog::Thread::KeyCompareLessThan( (int *)(v17 - v15),  (int *)(v17 - *(unsigned int *)((char *)a1 + v16 + 4)));
        v16 -= 4LL;
        if (!v18)
        {
          char v19 = (unsigned int *)((char *)a1 + v16 + 12);
          goto LABEL_12;
        }
      }

      char v19 = a1;
LABEL_12:
      *char v19 = v15;
      if (++v13 == 8) {
        return v11 + 1 == a2;
      }
    }

    uint64_t v10 = v11;
    v12 += 4LL;
    if (++v11 == a2) {
      return 1LL;
    }
  }

uint64_t flatbuffers::FlatBufferBuilder::Finish( flatbuffers::FlatBufferBuilder *this, unsigned int a2, const char *a3, int a4)
{
  BOOL v8 = a3 != 0LL;
  flatbuffers::FlatBufferBuilder::NotNested((uint64_t)this);
  *((void *)this + 7) = *((void *)this + 5);
  uint64_t v9 = 4LL;
  if (a4) {
    uint64_t v9 = 8LL;
  }
  flatbuffers::FlatBufferBuilder::PreAlign(this, v9 + 4LL * v8, *((void *)this + 9));
  if (a3)
  {
    if (strlen(a3) != 4) {
      flatbuffers::FlatBufferBuilder::Finish();
    }
    uint64_t v10 = (_DWORD *)(*((void *)this + 6) - flatbuffers::vector_downward::ensure_space(this, 4uLL));
    *((void *)this + 6) = v10;
    *uint64_t v10 = *(_DWORD *)a3;
  }

  int v11 = flatbuffers::FlatBufferBuilder::ReferTo(this, a2);
  uint64_t result = flatbuffers::FlatBufferBuilder::PushElement<unsigned int>((uint64_t)this, v11);
  if (a4) {
    uint64_t result = flatbuffers::FlatBufferBuilder::PushElement<unsigned int>( (uint64_t)this,  *((_DWORD *)this + 8) - *((_DWORD *)this + 12) + *((_DWORD *)this + 10));
  }
  *((_BYTE *)this + 71) = 1;
  return result;
}

void flatbuffers::FlatBufferBuilder::~FlatBufferBuilder(flatbuffers::FlatBufferBuilder *this)
{
  unint64_t v2 = (void **)*((void *)this + 11);
  if (v2)
  {
    std::__tree<flatbuffers::Offset<flatbuffers::String>,flatbuffers::FlatBufferBuilder::StringOffsetCompare,std::allocator<flatbuffers::Offset<flatbuffers::String>>>::destroy( *((void *)this + 11),  v2[1]);
    operator delete(v2);
  }

  flatbuffers::vector_downward::~vector_downward(this);
}

void std::__tree<flatbuffers::Offset<flatbuffers::String>,flatbuffers::FlatBufferBuilder::StringOffsetCompare,std::allocator<flatbuffers::Offset<flatbuffers::String>>>::destroy( uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<flatbuffers::Offset<flatbuffers::String>,flatbuffers::FlatBufferBuilder::StringOffsetCompare,std::allocator<flatbuffers::Offset<flatbuffers::String>>>::destroy( a1,  *a2);
    std::__tree<flatbuffers::Offset<flatbuffers::String>,flatbuffers::FlatBufferBuilder::StringOffsetCompare,std::allocator<flatbuffers::Offset<flatbuffers::String>>>::destroy( a1,  a2[1]);
    operator delete(a2);
  }

BOOL ___ZL36ktrace_catalog_file_contains_catalogP11ktrace_file_block_invoke(uint64_t a1, uint64_t a2)
{
  int v3 = ktrace_chunk_tag(a2);
  if (v3 == 32788) {
    *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = 1;
  }
  return v3 != 32788;
}

void *std::__hash_table<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>( uint64_t a1, unint64_t *a2, uint64_t a3, void **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
    }

    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }

    uint64_t v10 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      for (uint64_t i = *v10; i; uint64_t i = (void *)*i)
      {
        unint64_t v12 = i[1];
        if (v12 == v7)
        {
          if (i[2] == v7) {
            return i;
          }
        }

        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8) {
              v12 %= v8;
            }
          }

          else
          {
            v12 &= v8 - 1;
          }

          if (v12 != v4) {
            break;
          }
        }
      }
    }
  }

  uint64_t i = operator new(0x20uLL);
  *uint64_t i = 0LL;
  i[1] = v7;
  i[2] = **a4;
  i[3] = 0LL;
  float v13 = (float)(unint64_t)(*(void *)(a1 + 24) + 1LL);
  float v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    BOOL v15 = 1LL;
    if (v8 >= 3) {
      BOOL v15 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v8);
    unint64_t v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17) {
      size_t v18 = v17;
    }
    else {
      size_t v18 = v16;
    }
    std::__hash_table<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>>>::__rehash<true>( a1,  v18);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }

    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }

  uint64_t v19 = *(void *)a1;
  BOOL v20 = *(void **)(*(void *)a1 + 8 * v4);
  if (v20)
  {
    *uint64_t i = *v20;
LABEL_38:
    *BOOL v20 = i;
    goto LABEL_39;
  }

  *uint64_t i = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(v19 + 8 * v4) = a1 + 16;
  if (*i)
  {
    unint64_t v21 = *(void *)(*i + 8LL);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v21 >= v8) {
        v21 %= v8;
      }
    }

    else
    {
      v21 &= v8 - 1;
    }

    BOOL v20 = (void *)(*(void *)a1 + 8 * v21);
    goto LABEL_38;
  }

LABEL_39:
  ++*(void *)(a1 + 24);
  return i;
}

  ++*(void *)(a1 + 24);
  return i;
}

  ++*(void *)(a1 + 24);
  return v11;
}

  ++*(void *)(a1 + 24);
  return i;
}

  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

      unint64_t v34 = (void *)(*(void *)(*v4 + 48LL) + 328 * v13);
      memmove(a3, v34, 0x141uLL);
      memcpy(v34, __src, 0x141uLL);
      return nullsub_1(a3);
    }

    BOOL v26 = a3;
    sub_186C1B5FC();
  }

  int v27 = *v4;
  sub_186C5B59C();
  swift_bridgeObjectRetain();
  sub_186C5ADA4();
  swift_bridgeObjectRelease();
  uint64_t v28 = sub_186C5B5D8();
  uint64_t v29 = -1LL << *(_BYTE *)(v27 + 32);
  float v13 = v28 & ~v29;
  uint64_t v30 = v27 + 56;
  if (((*(void *)(v27 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v13) & 1) == 0) {
    goto LABEL_47;
  }
  uint64_t v31 = *(void *)(v27 + 48);
  uint64_t v32 = (void *)(v31 + 328 * v13);
  unint64_t v33 = *v32 == v9 && v32[1] == v10;
  if (v33 || (sub_186C5B4F4() & 1) != 0) {
    goto LABEL_38;
  }
  float v13 = (v13 + 1) & ~v29;
  if (((*(void *)(v30 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v13) & 1) == 0)
  {
LABEL_47:
    a3 = v26;
    if ((v19 & 1) == 0) {
      goto LABEL_48;
    }
    goto LABEL_52;
  }

  while (1)
  {
    uint64_t v36 = (void *)(v31 + 328 * v13);
    unint64_t v37 = *v36 == v9 && v36[1] == v10;
    if (v37 || (sub_186C5B4F4() & 1) != 0) {
      break;
    }
    float v13 = (v13 + 1) & ~v29;
    if (((*(void *)(v30 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v13) & 1) == 0) {
      goto LABEL_47;
    }
  }

void sub_186BBDBD0(_Unwind_Exception *a1)
{
}

void std::__hash_table<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>>>::__rehash<true>( uint64_t a1, size_t __n)
{
  if (__n == 1)
  {
    size_t prime = 2LL;
  }

  else
  {
    size_t prime = __n;
    if ((__n & (__n - 1)) != 0) {
      size_t prime = std::__next_prime(__n);
    }
  }

  int8x8_t v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(void *)&v4) {
    goto LABEL_16;
  }
  if (prime < *(void *)&v4)
  {
    unint64_t v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v4 < 3uLL || (uint8x8_t v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      unint64_t v5 = std::__next_prime(v5);
    }

    else
    {
      uint64_t v7 = 1LL << -(char)__clz(v5 - 1);
      if (v5 >= 2) {
        unint64_t v5 = v7;
      }
    }

    if (prime <= v5) {
      size_t prime = v5;
    }
    if (prime < *(void *)&v4) {
LABEL_16:
    }
      std::__hash_table<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>>>::__do_rehash<true>( a1,  prime);
  }

void std::__hash_table<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>>>::__do_rehash<true>( uint64_t a1, unint64_t a2)
{
  if (a2)
  {
    if (a2 >> 61) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    int8x8_t v4 = operator new(8 * a2);
    unint64_t v5 = *(void **)a1;
    *(void *)a1 = v4;
    if (v5) {
      operator delete(v5);
    }
    uint64_t v6 = 0LL;
    *(void *)(a1 + _Block_object_dispose(va, 8) = a2;
    do
      *(void *)(*(void *)a1 + 8 * v6++) = 0LL;
    while (a2 != v6);
    uint64_t v7 = *(void **)(a1 + 16);
    if (v7)
    {
      unint64_t v8 = v7[1];
      uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      if (v9.u32[0] > 1uLL)
      {
        if (v8 >= a2) {
          v8 %= a2;
        }
      }

      else
      {
        v8 &= a2 - 1;
      }

      *(void *)(*(void *)a1 + 8 * v_Block_object_dispose(va, 8) = a1 + 16;
      int v11 = (void *)*v7;
      if (*v7)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= a2) {
              v12 %= a2;
            }
          }

          else
          {
            v12 &= a2 - 1;
          }

          if (v12 != v8)
          {
            if (!*(void *)(*(void *)a1 + 8 * v12))
            {
              *(void *)(*(void *)a1 + 8 * v12) = v7;
              goto LABEL_24;
            }

            *uint64_t v7 = *v11;
            *int v11 = **(void **)(*(void *)a1 + 8 * v12);
            **(void **)(*(void *)a1 + 8 * v12) = v11;
            int v11 = v7;
          }

          unint64_t v12 = v8;
LABEL_24:
          uint64_t v7 = v11;
          int v11 = (void *)*v11;
          unint64_t v8 = v12;
        }

        while (v11);
      }
    }
  }

  else
  {
    uint64_t v10 = *(void **)a1;
    *(void *)a1 = 0LL;
    if (v10) {
      operator delete(v10);
    }
    *(void *)(a1 + _Block_object_dispose(va, 8) = 0LL;
  }

void *std::__hash_table<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>>>::__emplace_unique_key_args<unsigned long long,std::pair<unsigned long long,KernelTraceCatalog::Process const*>>( uint64_t a1, unint64_t *a2, void *a3)
{
  unint64_t v6 = *a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = *a2;
      if (v6 >= v7) {
        unint64_t v3 = v6 % v7;
      }
    }

    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }

    uint8x8_t v9 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      for (uint64_t i = *v9; i; uint64_t i = (void *)*i)
      {
        unint64_t v11 = i[1];
        if (v11 == v6)
        {
          if (i[2] == v6) {
            return i;
          }
        }

        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7) {
              v11 %= v7;
            }
          }

          else
          {
            v11 &= v7 - 1;
          }

          if (v11 != v3) {
            break;
          }
        }
      }
    }
  }

  uint64_t i = operator new(0x20uLL);
  *uint64_t i = 0LL;
  i[1] = v6;
  uint64_t v12 = a3[1];
  i[2] = *a3;
  i[3] = v12;
  float v13 = (float)(unint64_t)(*(void *)(a1 + 24) + 1LL);
  float v14 = *(float *)(a1 + 32);
  if (!v7 || (float)(v14 * (float)v7) < v13)
  {
    BOOL v15 = 1LL;
    if (v7 >= 3) {
      BOOL v15 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v7);
    unint64_t v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17) {
      size_t v18 = v17;
    }
    else {
      size_t v18 = v16;
    }
    std::__hash_table<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>>>::__rehash<true>( a1,  v18);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7) {
        unint64_t v3 = v6 % v7;
      }
      else {
        unint64_t v3 = v6;
      }
    }

    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
  }

  uint64_t v19 = *(void *)a1;
  BOOL v20 = *(void **)(*(void *)a1 + 8 * v3);
  if (v20)
  {
    *uint64_t i = *v20;
LABEL_38:
    *BOOL v20 = i;
    goto LABEL_39;
  }

  *uint64_t i = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(v19 + 8 * v3) = a1 + 16;
  if (*i)
  {
    unint64_t v21 = *(void *)(*i + 8LL);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v21 >= v7) {
        v21 %= v7;
      }
    }

    else
    {
      v21 &= v7 - 1;
    }

    BOOL v20 = (void *)(*(void *)a1 + 8 * v21);
    goto LABEL_38;
  }

void sub_186BBE01C(_Unwind_Exception *a1)
{
}

uint64_t flatbuffers::Vector<flatbuffers::Offset<KernelTraceCatalog::Thread>>::KeyCompare<unsigned long long>( unint64_t *a1, unsigned int *a2)
{
  unint64_t v2 = (int *)((char *)a2 + *a2);
  unint64_t v3 = *a1;
  int8x8_t v4 = (unsigned __int16 *)((char *)v2 - *v2);
  if (*v4 < 5u)
  {
    unsigned int v6 = 0;
    unint64_t v5 = 0LL;
  }

  else
  {
    unint64_t v5 = v4[2];
    if (v5)
    {
      unint64_t v5 = *(void *)((char *)v2 + v5);
      if (v5 <= v3) {
        unsigned int v6 = 0;
      }
      else {
        unsigned int v6 = -1;
      }
    }

    else
    {
      unsigned int v6 = 0;
    }
  }

  if (v5 >= v3) {
    return v6;
  }
  else {
    return v6 + 1;
  }
}

uint64_t flatbuffers::Vector<flatbuffers::Offset<KernelTraceCatalog::Process>>::KeyCompare<unsigned long long>( unint64_t *a1, unsigned int *a2)
{
  unint64_t v2 = (int *)((char *)a2 + *a2);
  unint64_t v3 = *a1;
  int8x8_t v4 = (unsigned __int16 *)((char *)v2 - *v2);
  if (*v4 < 5u)
  {
    unsigned int v6 = 0;
    unint64_t v5 = 0LL;
  }

  else
  {
    unint64_t v5 = v4[2];
    if (v5)
    {
      unint64_t v5 = *(void *)((char *)v2 + v5);
      if (v5 <= v3) {
        unsigned int v6 = 0;
      }
      else {
        unsigned int v6 = -1;
      }
    }

    else
    {
      unsigned int v6 = 0;
    }
  }

  if (v5 >= v3) {
    return v6;
  }
  else {
    return v6 + 1;
  }
}

uint64_t *std::back_insert_iterator<std::vector<flatbuffers::Offset<KernelTraceCatalog::LostEvent>>>::operator=[abi:ne180100]( uint64_t *a1, _DWORD *a2)
{
  uint64_t v4 = *a1;
  unint64_t v5 = *(_DWORD **)(*a1 + 8);
  unsigned int v6 = (void *)(*a1 + 16);
  if ((unint64_t)v5 >= *v6)
  {
    uint8x8_t v8 = *(_DWORD **)v4;
    uint64_t v9 = ((uint64_t)v5 - *(void *)v4) >> 2;
    unint64_t v10 = v9 + 1;
    uint64_t v11 = *v6 - (void)v8;
    if (v11 >> 1 > v10) {
      unint64_t v10 = v11 >> 1;
    }
    else {
      unint64_t v12 = v10;
    }
    if (v12)
    {
      float v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<flatbuffers::Offset<KernelTraceCatalog::Thread>>>( (uint64_t)v6,  v12);
      uint8x8_t v8 = *(_DWORD **)v4;
      unint64_t v5 = *(_DWORD **)(v4 + 8);
    }

    else
    {
      float v13 = 0LL;
    }

    float v14 = &v13[4 * v9];
    BOOL v15 = &v13[4 * v12];
    *(_DWORD *)float v14 = *a2;
    unint64_t v7 = v14 + 4;
    while (v5 != v8)
    {
      int v16 = *--v5;
      *((_DWORD *)v14 - 1) = v16;
      v14 -= 4;
    }

    *(void *)uint64_t v4 = v14;
    *(void *)(v4 + _Block_object_dispose(va, 8) = v7;
    *(void *)(v4 + 16) = v15;
    if (v8) {
      operator delete(v8);
    }
  }

  else
  {
    _DWORD *v5 = *a2;
    unint64_t v7 = v5 + 1;
  }

  *(void *)(v4 + _Block_object_dispose(va, 8) = v7;
  return a1;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>( uint64_t a1, unint64_t a2)
{
  if (a2 >> 61) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(8 * a2);
}

uint64_t ktrace_set_file(uint64_t a1, const char *a2)
{
  uint64_t v3 = ktrace_file_open(a2, 0);
  if (!v3) {
    return *__error();
  }
  ktrace_set_ktrace_file(a1, v3, 1, v4, v5, v6, v7, v8);
  return 0LL;
}

uint64_t ktrace_set_ktrace_file( uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a2) {
    ktrace_remotetime_update_params_cold_1();
  }
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  if (*(void *)(a1 + 608)) {
    ktrace_remotetime_update_params_cold_1();
  }
  if (*(_DWORD *)a1 == 1) {
    ktrace_remotetime_update_params_cold_1();
  }
  if (a3 && *(void *)(a2 + 200)) {
    ktrace_remotetime_update_params_cold_1();
  }
  if ((*(_WORD *)(a1 + 224) & 3) != 0) {
    ktrace_set_remotetime_conversion_enabled_cold_2();
  }
  v14[0] = MEMORY[0x1895F87A8];
  v14[1] = 0x40000000LL;
  v14[2] = __ktrace_set_ktrace_file_block_invoke;
  v14[3] = &__block_descriptor_tmp_4;
  v14[4] = a1;
  ktrace_file_header_iterate(a2, 0LL, (uint64_t)v14, a4, a5, a6, a7, a8);
  *(void *)(a1 + 60_Block_object_dispose(va, 8) = a2;
  if (*(_DWORD *)a1 == 3) {
    int v11 = 4;
  }
  else {
    int v11 = 1;
  }
  *(_DWORD *)a1 = v11;
  if (*(_DWORD *)(a1 + 256)) {
    kteventnames_add_chunks(a1 + 360, a2);
  }
  if (a3) {
    __int16 v12 = 4;
  }
  else {
    __int16 v12 = 0;
  }
  *(_WORD *)(a1 + 224) = *(_WORD *)(a1 + 224) & 0xFFFB | v12;
  return 0LL;
}

BOOL __ktrace_set_ktrace_file_block_invoke(uint64_t a1, uint64_t *a2)
{
  *(void *)(*(void *)(a1 + 32) + 352LL) = ktrace_cpus_create(a2);
  return *(void *)(*(void *)(a1 + 32) + 352LL) == 0LL;
}

uint64_t ktrace_get_ktrace_file(uint64_t a1)
{
  return *(void *)(a1 + 608);
}

void _session_chunk_callbacks(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(unsigned int *)(a1 + 112);
  uint64_t v5 = *(void *)(a1 + 120);
  unsigned int v6 = ktrace_chunk_tag(a2);
  if ((int)v4 >= 1)
  {
    unsigned int v7 = v6;
    uint64_t v8 = 0LL;
    uint64_t v9 = (unsigned int *)(v5 + 12);
    uint64_t v10 = MEMORY[0x1895F87A8];
    do
    {
      if (v7 < *(v9 - 1)) {
        break;
      }
      if (v7 < *v9)
      {
        int v11 = *(dispatch_queue_s **)(a1 + 232);
        block[0] = v10;
        block[1] = 0x40000000LL;
        block[2] = ___session_chunk_callbacks_block_invoke;
        block[3] = &__block_descriptor_tmp_3_1;
        int v13 = v8;
        block[4] = v5;
        block[5] = a2;
        dispatch_async(v11, block);
      }

      ++v8;
      v9 += 8;
    }

    while (v4 != v8);
  }

uint64_t ___session_chunk_callbacks_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(*(void *)(a1 + 32) + 32LL * *(int *)(a1 + 48) + 24) + 16LL))();
}

uint64_t *_session_read_stackshot_chunk(uint64_t a1, uint64_t *a2)
{
  uint64_t result = (uint64_t *)ktrace_chunk_tag((uint64_t)a2);
  switch((_DWORD)result)
  {
    case 0x51FE:
      goto LABEL_7;
    case 0x8002:
      uint64_t result = (uint64_t *)ktrace_chunk_version_major((uint64_t)a2);
LABEL_7:
      uint64_t result = (uint64_t *)ktrace_stackshot_chunk_timestamp(a2);
      uint64_t v5 = result;
      uint64_t result = *(uint64_t **)(a1 + 320);
      if (result)
      {
        unsigned int v6 = (uint64_t **)(a1 + 320);
        do
        {
          uint64_t result = (uint64_t *)ktrace_stackshot_chunk_timestamp(result);
          if (v5 <= result) {
            break;
          }
          uint64_t v7 = (uint64_t)*v6;
          uint64_t v8 = *(uint64_t **)(v7 + 104);
          unsigned int v6 = (uint64_t **)(v7 + 104);
          uint64_t result = v8;
        }

        while (v8);
      }

      else
      {
        unsigned int v6 = (uint64_t **)(a1 + 320);
      }

      *(void *)(a1 + 32_Block_object_dispose(va, 8) = v5;
LABEL_16:
      a2[13] = (uint64_t)*v6;
      void *v6 = a2;
      return result;
    case 0x9000:
      uint64_t result = (uint64_t *)ktrace_chunk_version_major((uint64_t)a2);
      if (!(_DWORD)result) {
        goto LABEL_7;
      }
      break;
  }

  return result;
}

uint64_t ktrace_chunks_range(uint64_t a1, int a2, int a3, const void *a4)
{
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  uint64_t v7 = ktrace_callback_list_add(a1, a1 + 112);
  if (!v7) {
    return 12LL;
  }
  uint64_t v8 = v7;
  *uint64_t v7 = 3;
  void v7[2] = a2;
  v7[3] = a3;
  v7[4] = 3;
  uint64_t v9 = _Block_copy(a4);
  uint64_t result = 0LL;
  *((void *)v8 + 3) = v9;
  return result;
}

uint64_t ktrace_chunks(uint64_t a1, int a2, const void *a3)
{
  return ktrace_chunks_range(a1, a2, a2 + 1, a3);
}

uint64_t _session_start_file( uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v67 = 0LL;
  v68 = &v67;
  uint64_t v69 = 0x2000000000LL;
  char v70 = 0;
  v65[0] = 0LL;
  v65[1] = v65;
  v65[2] = 0x2000000000LL;
  char v66 = 0;
  uint64_t v61 = 0LL;
  uint64_t v62 = &v61;
  uint64_t v63 = 0x2000000000LL;
  char v64 = 0;
  v59[0] = 0LL;
  v59[1] = v59;
  v59[2] = 0x2000000000LL;
  char v60 = 0;
  uint64_t v55 = 0LL;
  __int16 v56 = &v55;
  uint64_t v57 = 0x2000000000LL;
  int v58 = 0;
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  uint64_t v9 = *(void *)(a1 + 608);
  if (!v9) {
    ktrace_remotetime_update_params_cold_1();
  }
  uint64_t v51 = 0LL;
  uint64_t v52 = &v51;
  uint64_t v53 = 0x2000000000LL;
  char v54 = 0;
  uint64_t v47 = 0LL;
  int v48 = &v47;
  uint64_t v49 = 0x2000000000LL;
  char v50 = 0;
  v46[0] = MEMORY[0x1895F87A8];
  v46[1] = 0x40000000LL;
  v46[2] = ___session_start_file_block_invoke;
  v46[3] = &unk_189F55620;
  v46[4] = &v51;
  v46[5] = &v47;
  v46[6] = &v61;
  v46[7] = v65;
  v46[8] = v59;
  v46[9] = &v67;
  v46[10] = &v55;
  v46[11] = a1;
  if (ktrace_file_iterate(v9, 0LL, (uint64_t)v46, a4, a5, a6, a7, a8) || *((_DWORD *)v56 + 6))
  {
    uint64_t started = 1LL;
    goto LABEL_6;
  }

  kttimesync_init(a1 + 432, *(void *)(a1 + 608), *((unsigned __int8 *)v52 + 24));
  if (!*(_DWORD *)(a1 + 452))
  {
    int v20 = *(_DWORD *)(a1 + 428);
    ktrace_log_init();
    unint64_t v21 = (os_log_s *)ktrace_log;
    BOOL v22 = os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_DEBUG);
    if (v20)
    {
      if (v22) {
        _session_start_file_cold_5((int *)(a1 + 424), (int *)(a1 + 428), v21);
      }
      *(void *)(a1 + 44_Block_object_dispose(va, 8) = *(void *)(a1 + 424);
    }

    else
    {
      if (v22) {
        _session_start_file_cold_4(v21);
      }
      if (mach_timebase_info((mach_timebase_info_t)(a1 + 448))) {
        ktrace_remotetime_update_params_cold_1();
      }
    }
  }

  uint64_t started = _session_machine_init(a1, v13, v14, v15, v16, v17, v18, v19);
  if (!(_DWORD)started)
  {
    uint64_t started = _session_cpus_init(a1, v23, v24, v25, v26, v27, v28, v29);
    if (!(_DWORD)started)
    {
      int v36 = ktrace_file_earliest_timestamp(*(void *)(a1 + 608), (void *)(a1 + 504), v30, v31, v32, v33, v34, v35);
      uint64_t v37 = *(void *)(a1 + 504);
      *(void *)(a1 + 520) = kttimesync_timestamp_from_ns(a1 + 432, *(void *)(a1 + 512)) + v37;
      if (*((_BYTE *)v62 + 24))
      {
        ktrace_start_file_ariadne_prepass(a1);
      }

      else
      {
        if (!v36 && !v37 || !*((_BYTE *)v68 + 24) && !*((_BYTE *)v48 + 24))
        {
          char v45 = 1;
LABEL_26:
          uint64_t started = ktrace_start_file_internal(a1, v45, a2);
          goto LABEL_6;
        }

        ktrace_start_file_prepass(a1, v38, v39, v40, v41, v42, v43, v44);
      }

      char v45 = 0;
      goto LABEL_26;
    }
  }

LABEL_6:
  _Block_object_dispose(&v47, 8);
  _Block_object_dispose(&v51, 8);
  _Block_object_dispose(&v55, 8);
  _Block_object_dispose(v59, 8);
  _Block_object_dispose(&v61, 8);
  _Block_object_dispose(v65, 8);
  _Block_object_dispose(&v67, 8);
  return started;
}

  __int16 v12 = *(void *)(a2 + 48);
  v19[0] = xmmword_186C5D380;
  v19[1] = xmmword_186C5D390;
  v19[2] = xmmword_186C5D3A0;
  uint64_t v13 = *(unint64_t **)(a1 + 280);
  if (!v13) {
    uint64_t v13 = (unint64_t *)v19;
  }
  uint64_t v14 = *v13;
  if (*v13)
  {
    uint64_t v15 = v13 + 1;
    uint64_t v16 = -1LL;
    do
    {
      uint64_t v17 = v12 - v14;
      if (v12 - v14 >= v16) {
        uint64_t v17 = v16;
      }
      if (v12 >= v14) {
        uint64_t v16 = v17;
      }
      uint64_t v18 = *v15++;
      uint64_t v14 = v18;
    }

    while (v18);
    uint64_t v8 = v16 + 1;
  }

  else
  {
    uint64_t v8 = 0LL;
  }

    unint64_t v21 = *(void **)v6;
    *(void *)(*(void *)v6 + 8 * (v32 >> 6) + 64) |= 1LL << v32;
    BOOL v22 = (uint64_t *)(v21[6] + 16 * v32);
    *BOOL v22 = v17;
    v22[1] = v18;
    uint64_t v23 = (void *)(v21[7] + 16 * v32);
    *uint64_t v23 = v19;
    v23[1] = v20;
    uint64_t v24 = v21[2];
    uint64_t v25 = __OFADD__(v24, 1LL);
    uint64_t v26 = v24 + 1;
    if (v25) {
      goto LABEL_25;
    }
    size_t v21[2] = v26;
LABEL_8:
    uint64_t v17 = sub_186C20FAC();
    uint64_t v18 = v27;
    uint64_t v19 = v28;
    int v20 = v29;
    a4 = 1;
    if (!v27) {
      goto LABEL_20;
    }
  }

  sub_186C1BC80(v35, a4 & 1);
  uint64_t v37 = sub_186BF8278(v17, v18);
  if ((v36 & 1) != (v38 & 1)) {
    goto LABEL_26;
  }
  uint64_t v32 = v37;
  if ((v36 & 1) == 0) {
    goto LABEL_6;
  }
LABEL_16:
  uint64_t v39 = *(void **)v6;
  uint64_t v40 = *(void *)(*(void *)v6 + 56LL) + 16 * v32;
  uint64_t v41 = *(void **)(v40 + 8);
  v48[0] = *(id *)v40;
  v48[1] = v41;
  swift_bridgeObjectRetain();
  uint64_t v42 = v52;
  a5(&v49, v48, v51);
  if (!v42)
  {
    uint64_t v52 = 0LL;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v43 = (void *)(v39[7] + 16 * v32);
    uint64_t v44 = v49;
    char v45 = v50;
    swift_bridgeObjectRelease();
    *uint64_t v43 = v44;
    v43[1] = v45;
    goto LABEL_8;
  }

  swift_bridgeObjectRelease();
  v48[0] = v42;
  __int16 v46 = v42;
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C6A2280);
  if ((swift_dynamicCast() & 1) == 0)
  {
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_186C0D094();
    swift_release();

    return;
  }

  if ((a3 & 0xC) == v13)
  {
    uint64_t result = sub_186C2BB88(a3, a4, a5);
    a3 = result;
    if ((a5 & 0x1000000000000000LL) == 0) {
      goto LABEL_8;
    }
  }

  else if ((a5 & 0x1000000000000000LL) == 0)
  {
LABEL_8:
    uint64_t result = (a3 >> 16) - (v10 >> 16);
    goto LABEL_21;
  }

  uint64_t v17 = HIBYTE(a5) & 0xF;
  if ((a5 & 0x2000000000000000LL) == 0) {
    uint64_t v17 = a4 & 0xFFFFFFFFFFFFLL;
  }
  if (v17 < v10 >> 16) {
    goto LABEL_92;
  }
  if (v17 < a3 >> 16)
  {
LABEL_93:
    __break(1u);
    goto LABEL_94;
  }

  uint64_t result = sub_186C5AE1C();
LABEL_21:
  uint64_t v18 = v15 + result;
  if (__OFADD__(v15, result))
  {
    __break(1u);
    goto LABEL_91;
  }

  if (v18 < v15)
  {
LABEL_91:
    __break(1u);
LABEL_92:
    __break(1u);
    goto LABEL_93;
  }

  uint64_t v19 = (unsigned __int8 *)(v11 + v15);
  if (!v11) {
    uint64_t v19 = 0LL;
  }
  int v20 = *v19;
  if (v20 == 43)
  {
    if (result >= 1)
    {
      if (result != 1)
      {
        uint64_t v33 = a6 + 48;
        uint64_t v34 = a6 + 55;
        uint64_t v35 = a6 + 87;
        if (a6 > 10)
        {
          uint64_t v33 = 58;
        }

        else
        {
          uint64_t v35 = 97;
          uint64_t v34 = 65;
        }

        if (v19)
        {
          uint64_t v24 = 0LL;
          int v36 = v19 + 1;
          uint64_t v37 = result - 1;
          do
          {
            uint64_t v38 = *v36;
            if (v38 < 0x30 || v38 >= v33)
            {
              if (v38 < 0x41 || v38 >= v34)
              {
                uint64_t v29 = 0LL;
                if (v38 < 0x61 || v38 >= v35) {
                  return v29;
                }
                uint64_t v39 = -87;
              }

              else
              {
                uint64_t v39 = -55;
              }
            }

            else
            {
              uint64_t v39 = -48;
            }

            if (!is_mul_ok(v24, a6)) {
              return 0LL;
            }
            uint64_t v40 = v24 * a6;
            uint64_t v41 = v38 + v39;
            uint64_t v32 = __CFADD__(v40, v41);
            uint64_t v24 = v40 + v41;
            if (v32) {
              return 0LL;
            }
            ++v36;
            --v37;
          }

          while (v37);
          return v24;
        }

        return 0LL;
      }

      return 0LL;
    }

    goto LABEL_95;
  }

  if (v20 != 45)
  {
    if (v18 != v15)
    {
      uint64_t v42 = a6 + 48;
      uint64_t v43 = a6 + 55;
      uint64_t v44 = a6 + 87;
      if (a6 > 10)
      {
        uint64_t v42 = 58;
      }

      else
      {
        uint64_t v44 = 97;
        uint64_t v43 = 65;
      }

      if (v19)
      {
        uint64_t v24 = 0LL;
        while (1)
        {
          char v45 = *v19;
          if (v45 < 0x30 || v45 >= v42)
          {
            if (v45 < 0x41 || v45 >= v43)
            {
              uint64_t v29 = 0LL;
              if (v45 < 0x61 || v45 >= v44) {
                return v29;
              }
              __int16 v46 = -87;
            }

            else
            {
              __int16 v46 = -55;
            }
          }

          else
          {
            __int16 v46 = -48;
          }

          if (!is_mul_ok(v24, a6)) {
            return 0LL;
          }
          uint64_t v47 = v24 * a6;
          int v48 = v45 + v46;
          uint64_t v32 = __CFADD__(v47, v48);
          uint64_t v24 = v47 + v48;
          if (v32) {
            return 0LL;
          }
          ++v19;
          if (!--result) {
            return v24;
          }
        }
      }

      return 0LL;
    }

    return 0LL;
  }

  if (result >= 1)
  {
    if (result != 1)
    {
      unint64_t v21 = a6 + 48;
      BOOL v22 = a6 + 55;
      uint64_t v23 = a6 + 87;
      if (a6 > 10)
      {
        unint64_t v21 = 58;
      }

      else
      {
        uint64_t v23 = 97;
        BOOL v22 = 65;
      }

      if (v19)
      {
        uint64_t v24 = 0LL;
        uint64_t v25 = v19 + 1;
        uint64_t v26 = result - 1;
        while (1)
        {
          uint64_t v27 = *v25;
          if (v27 < 0x30 || v27 >= v21)
          {
            if (v27 < 0x41 || v27 >= v22)
            {
              uint64_t v29 = 0LL;
              if (v27 < 0x61 || v27 >= v23) {
                return v29;
              }
              uint64_t v28 = -87;
            }

            else
            {
              uint64_t v28 = -55;
            }
          }

          else
          {
            uint64_t v28 = -48;
          }

          if (!is_mul_ok(v24, a6)) {
            return 0LL;
          }
          uint64_t v30 = v24 * a6;
          uint64_t v31 = v27 + v28;
          uint64_t v32 = v30 >= v31;
          uint64_t v24 = v30 - v31;
          if (!v32) {
            return 0LL;
          }
          ++v25;
          if (!--v26) {
            return v24;
          }
        }
      }

      return 0LL;
    }

    return 0LL;
  }

uint64_t ___session_start_file_block_invoke(void *a1, uint64_t *a2)
{
  uint64_t v4 = (void **)ktrace_config_create(a2);
  if (v4)
  {
    uint64_t v5 = v4;
    *(_BYTE *)(*(void *)(a1[4] + 8LL) + 24LL) = ktrace_config_kdebug_using_mach_continuous_time((uint64_t)v4);
    *(_BYTE *)(*(void *)(a1[5] + 8LL) + 24LL) = ktrace_config_get_context_kind((uint64_t)v5) == 2;
    ktrace_config_destroy(v5);
  }

  int v6 = ktrace_chunk_tag((uint64_t)a2);
  if (v6 <= 7935)
  {
    if (v6 == 7424)
    {
      uint64_t v7 = a1[7];
      goto LABEL_19;
    }

    if (v6 != 7680) {
      return 1LL;
    }
LABEL_12:
    if (!*(_BYTE *)(*(void *)(a1[7] + 8LL) + 24LL) && !*(_BYTE *)(*(void *)(a1[8] + 8LL) + 24LL)) {
      *(_BYTE *)(*(void *)(a1[9] + 8LL) + 24LL) = 1;
    }
    uint64_t v7 = a1[8];
    goto LABEL_19;
  }

  switch(v6)
  {
    case 7936:
      *(_WORD *)(a1[11] + 224LL) |= 0x40u;
      goto LABEL_12;
    case 32782:
      uint64_t v8 = a1[11];
      if (*(_DWORD *)(v8 + 288)) {
        *(_DWORD *)(*(void *)(a1[10] + 8LL) + 24LL) = ktrace_chunk_copy_data(a2, 0LL, (void *)(v8 + 528), 0x18uLL);
      }
      break;
    case 20982:
      uint64_t v7 = a1[6];
LABEL_19:
      *(_BYTE *)(*(void *)(v7 + 8) + 24LL) = 1;
      break;
  }

  return 1LL;
}

void ktrace_start_file_ariadne_prepass(uint64_t a1)
{
  uint64_t v1 = *(dispatch_queue_s **)(a1 + 128);
  block[0] = MEMORY[0x1895F87A8];
  block[1] = 0x40000000LL;
  block[2] = __ktrace_start_file_ariadne_prepass_block_invoke;
  block[3] = &__block_descriptor_tmp_7_1;
  block[4] = a1;
  dispatch_async(v1, block);
}

void ktrace_start_file_prepass( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = MEMORY[0x1895F87A8];
  if (*(_DWORD *)(a1 + 284))
  {
    _session_ensure_uuidmap(a1, a2, a3, a4, a5, a6, a7, a8);
    uint64_t v10 = *(dispatch_queue_s **)(a1 + 232);
    block[0] = v9;
    block[1] = 0x40000000LL;
    block[2] = __ktrace_start_file_prepass_block_invoke;
    block[3] = &__block_descriptor_tmp_8;
    block[4] = a1;
    dispatch_async(v10, block);
  }

  int v11 = *(dispatch_queue_s **)(a1 + 128);
  v14[0] = v9;
  v14[1] = 0x40000000LL;
  v14[2] = __ktrace_start_file_prepass_block_invoke_2;
  v14[3] = &__block_descriptor_tmp_9_0;
  v14[4] = a1;
  dispatch_async(v11, v14);
  __int16 v12 = *(dispatch_queue_s **)(a1 + 128);
  v13[0] = v9;
  v13[1] = 0x40000000LL;
  v13[2] = __ktrace_start_file_prepass_block_invoke_3;
  _OWORD v13[3] = &__block_descriptor_tmp_16_0;
  v13[4] = a1;
  dispatch_async(v12, v13);
}

uint64_t ktrace_start_file_internal(uint64_t a1, char a2, int a3)
{
  char is_64_bit = ktrace_file_is_64_bit(*(void *)(a1 + 608));
  int v7 = *(_DWORD *)(a1 + 24);
  if (v7)
  {
    BOOL v8 = a3 == 0;
  }

  else
  {
    a2 = 0;
    BOOL v8 = 1;
  }

  uint64_t v9 = MEMORY[0x1895F87A8];
  if (!v8)
  {
    uint64_t v10 = *(dispatch_queue_s **)(a1 + 128);
    block[0] = MEMORY[0x1895F87A8];
    block[1] = 0x40000000LL;
    block[2] = __ktrace_start_file_internal_block_invoke;
    block[3] = &__block_descriptor_tmp_29;
    block[4] = a1;
    dispatch_async(v10, block);
    int v7 = *(_DWORD *)(a1 + 24);
  }

  if (v7 >= 1)
  {
    uint64_t v11 = ktrace_stream_create(0, is_64_bit, (*(unsigned __int16 *)(a1 + 224) >> 6) & 1);
    *(void *)(a1 + 616) = v11;
    if (!v11) {
      return *__error();
    }
  }

  __int16 v12 = *(dispatch_queue_s **)(a1 + 128);
  v14[0] = v9;
  v14[1] = 0x40000000LL;
  v14[2] = __ktrace_start_file_internal_block_invoke_9;
  v14[3] = &__block_descriptor_tmp_35;
  v14[4] = a1;
  char v15 = a2;
  char v16 = is_64_bit;
  dispatch_async(v12, v14);
  return 0LL;
}

uint64_t __ktrace_start_file_ariadne_prepass_block_invoke( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *(void *)(a1 + 32);
  uint64_t v9 = *(void *)(v8 + 608);
  v11[0] = MEMORY[0x1895F87A8];
  v11[1] = 0x40000000LL;
  void v11[2] = __ktrace_start_file_ariadne_prepass_block_invoke_2;
  v11[3] = &__block_descriptor_tmp_6;
  v11[4] = v8;
  return ktrace_file_iterate(v9, 0LL, (uint64_t)v11, a4, a5, a6, a7, a8);
}

uint64_t __ktrace_start_file_ariadne_prepass_block_invoke_2(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(dispatch_queue_s **)(v2 + 232);
  v5[0] = MEMORY[0x1895F87A8];
  v5[1] = 0x40000000LL;
  void v5[2] = __ktrace_start_file_ariadne_prepass_block_invoke_3;
  v5[3] = &__block_descriptor_tmp_5_0;
  v5[4] = v2;
  v5[5] = a2;
  dispatch_async(v3, v5);
  return 1LL;
}

uint64_t __ktrace_start_file_ariadne_prepass_block_invoke_3(uint64_t a1)
{
  return kthmap_read_chunk(*(_BYTE **)(*(void *)(a1 + 32) + 296LL), *(uint64_t **)(a1 + 40));
}

void *__ktrace_start_file_prepass_block_invoke(uint64_t a1)
{
  return ktrace_prepass_uuid_map_init(*(void *)(a1 + 32));
}

void __ktrace_start_file_prepass_block_invoke_2( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *(void *)(a1 + 32);
  if (*(void *)(v8 + 296) && (*(_DWORD *)(v8 + 260) || *(_DWORD *)(v8 + 280)))
  {
    uint64_t v10 = ktrace_catalog_open(*(void *)(v8 + 608), a2, a3, a4, a5, a6, a7, a8);
    if (v10)
    {
      uint64_t v11 = (uint64_t)v10;
      kthmap_read_catalog(*(void *)(*(void *)(a1 + 32) + 296LL), (uint64_t)v10);
      ktrace_catalog_close(v11);
    }
  }

void __ktrace_start_file_prepass_block_invoke_3( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = *(void *)(a1 + 32);
  uint64_t v10 = MEMORY[0x1895F87A8];
  if (*(void *)(v9 + 296) && (*(_DWORD *)(v9 + 260) || *(_DWORD *)(v9 + 280)))
  {
    uint64_t v11 = *(void *)(v9 + 608);
    v17[0] = MEMORY[0x1895F87A8];
    v17[1] = 0x40000000LL;
    unint64_t v17[2] = __ktrace_start_file_prepass_block_invoke_4;
    v17[3] = &__block_descriptor_tmp_13_0;
    _OWORD v17[4] = v9;
    ktrace_file_iterate(v11, 0LL, (uint64_t)v17, a4, a5, a6, a7, a8);
    uint64_t v9 = *(void *)(a1 + 32);
  }

  uint64_t v12 = *(void *)(v9 + 608);
  v16[0] = v10;
  v16[1] = 0x40000000LL;
  v16[2] = __ktrace_start_file_prepass_block_invoke_7;
  v16[3] = &__block_descriptor_tmp_14_0;
  v16[4] = v9;
  ktrace_file_iterate(v12, 0LL, (uint64_t)v16, a4, a5, a6, a7, a8);
  uint64_t v13 = *(void *)(a1 + 32);
  uint64_t v14 = *(dispatch_queue_s **)(v13 + 232);
  block[0] = v10;
  block[1] = 0x40000000LL;
  block[2] = __ktrace_start_file_prepass_block_invoke_8;
  block[3] = &__block_descriptor_tmp_15;
  block[4] = v13;
  dispatch_async(v14, block);
}

uint64_t __ktrace_start_file_prepass_block_invoke_4(uint64_t a1, uint64_t a2)
{
  int v4 = ktrace_chunk_tag(a2);
  if (v4 == 20990) {
    goto LABEL_7;
  }
  if (v4 == 32770)
  {
    if (ktrace_chunk_version_major(a2) <= 1)
    {
LABEL_7:
      uint64_t v5 = *(void *)(a1 + 32);
      int v6 = *(dispatch_queue_s **)(v5 + 232);
      v8[0] = MEMORY[0x1895F87A8];
      v8[1] = 0x40000000LL;
      void v8[2] = __ktrace_start_file_prepass_block_invoke_5;
      v8[3] = &__block_descriptor_tmp_12_0;
      _DWORD v8[4] = a2;
      v8[5] = v5;
      dispatch_async(v6, v8);
    }
  }

  else if (v4 == 36864 && !ktrace_chunk_version_major(a2))
  {
    goto LABEL_7;
  }

  return 1LL;
}

uint64_t __ktrace_start_file_prepass_block_invoke_5(uint64_t a1)
{
  v3[0] = MEMORY[0x1895F87A8];
  v3[1] = 0x40000000LL;
  v3[2] = __ktrace_start_file_prepass_block_invoke_6;
  _OWORD v3[3] = &__block_descriptor_tmp_11_0;
  uint64_t v1 = *(uint64_t **)(a1 + 32);
  v3[4] = *(void *)(a1 + 40);
  return ktrace_stackshot_chunk_unwrap(v1, (uint64_t)v3);
}

void __ktrace_start_file_prepass_block_invoke_6(uint64_t a1, uint64_t a2, unint64_t a3)
{
}

uint64_t __ktrace_start_file_prepass_block_invoke_7(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void *)(v2 + 296);
  if (!v3) {
    ktrace_remotetime_update_params_cold_1();
  }
  if (!a2) {
    ktrace_remotetime_update_params_cold_1();
  }
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(v2 + 128));
  char is_64_bit = ktrace_chunk_is_64_bit(a2);
  if (!*(void *)(v2 + 624)) {
    *(void *)(v2 + 624) = ktrace_stream_create(0, is_64_bit, (*(unsigned __int16 *)(v2 + 224) >> 6) & 1);
  }
  int v6 = *(dispatch_queue_s **)(v2 + 232);
  uint64_t v7 = MEMORY[0x1895F87A8];
  block[0] = MEMORY[0x1895F87A8];
  block[1] = 0x40000000LL;
  block[2] = __ktrace_prepass_chunk_block_invoke;
  block[3] = &__block_descriptor_tmp_17_0;
  block[4] = v3;
  void block[5] = a2;
  void block[6] = v2;
  dispatch_async(v6, block);
  if (!ktrace_stream_add(*(void *)(v2 + 624), a2))
  {
    uint64_t v8 = *(void *)(v2 + 624);
    uint64_t v9 = *(dispatch_queue_s **)(v2 + 232);
    v11[0] = v7;
    v11[1] = 0x40000000LL;
    void v11[2] = __ktrace_prepass_chunk_block_invoke_2;
    v11[3] = &__block_descriptor_tmp_21;
    char v12 = is_64_bit;
    v11[4] = v2;
    void v11[5] = v3;
    ktrace_stream_iterate_group(v8, 0x800000uLL, v9, 0LL, (uint64_t)v11);
  }

  return 1LL;
}

void __ktrace_start_file_prepass_block_invoke_8(uint64_t a1)
{
}

void __ktrace_prepass_chunk_block_invoke(uint64_t a1)
{
}

BOOL __ktrace_prepass_chunk_block_invoke_2(BOOL result, uint64_t a2, unint64_t a3)
{
  unsigned __int8 v3 = atomic_load((unsigned __int8 *)(*(void *)(result + 32) + 157LL));
  if ((v3 & 1) == 0)
  {
    int v4 = *(unsigned __int8 *)(result + 48);
    v5[0] = MEMORY[0x1895F87A8];
    v5[1] = 0x40000000LL;
    void v5[2] = __ktrace_prepass_chunk_block_invoke_3;
    v5[3] = &__block_descriptor_tmp_19_0;
    char v7 = v4;
    __int128 v6 = *(_OWORD *)(result + 32);
    return trace_enumerate(a2, a3, v4, (uint64_t)v5);
  }

  return result;
}

uint64_t __ktrace_prepass_chunk_block_invoke_3(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = 48LL;
  if (*(_BYTE *)(a1 + 48))
  {
    uint64_t v5 = *(void *)(a2 + 8);
    uint64_t v6 = *(void *)(a2 + 16);
    uint64_t v7 = *(void *)(a2 + 24);
  }

  else
  {
    uint64_t v4 = 28LL;
    LODWORD(v5) = *(_DWORD *)(a2 + 8);
    uint64_t v6 = *(unsigned int *)(a2 + 12);
    LODWORD(v7) = *(_DWORD *)(a2 + 16);
  }

  kttimesync_update_kdebug_prepass(*(void *)(a1 + 32) + 432LL, *(_DWORD *)(a2 + v4), v5, v6, v7);
  return 0LL;
}

uint64_t __ktrace_start_file_internal_block_invoke( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *(void *)(a1 + 32);
  uint64_t v9 = *(void *)(v8 + 608);
  v11[0] = MEMORY[0x1895F87A8];
  v11[1] = 0x40000000LL;
  void v11[2] = __ktrace_start_file_internal_block_invoke_2;
  v11[3] = &__block_descriptor_tmp_28;
  v11[4] = v8;
  return ktrace_file_iterate(v9, 0LL, (uint64_t)v11, a4, a5, a6, a7, a8);
}

BOOL __ktrace_start_file_internal_block_invoke_2(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v2 = atomic_load((unsigned __int8 *)(*(void *)(a1 + 32) + 156LL));
  if ((v2 & 1) != 0) {
    return (v2 & 1) == 0;
  }
  int v5 = ktrace_chunk_tag(a2);
  if (v5 > 32772)
  {
    if (v5 <= 32799)
    {
      if (v5 == 32773)
      {
        if (!ktrace_chunk_version_major(a2))
        {
          uint64_t v11 = *(void *)(a1 + 32);
          uint64_t v7 = *(dispatch_queue_s **)(v11 + 232);
          v17[0] = MEMORY[0x1895F87A8];
          v17[1] = 0x40000000LL;
          unint64_t v17[2] = __ktrace_start_file_internal_block_invoke_6;
          v17[3] = &__block_descriptor_tmp_25_1;
          _OWORD v17[4] = v11;
          void v17[5] = a2;
          uint64_t v8 = v17;
          goto LABEL_23;
        }
      }

      else if (v5 == 32784 && !ktrace_chunk_version_major(a2))
      {
        uint64_t v6 = *(void *)(a1 + 32);
        uint64_t v7 = *(dispatch_queue_s **)(v6 + 232);
        v16[0] = MEMORY[0x1895F87A8];
        v16[1] = 0x40000000LL;
        v16[2] = __ktrace_start_file_internal_block_invoke_7;
        v16[3] = &__block_descriptor_tmp_26;
        v16[4] = v6;
        void v16[5] = a2;
        uint64_t v8 = v16;
LABEL_23:
        dispatch_async(v7, v8);
        return (v2 & 1) == 0;
      }

      return (v2 & 1) == 0;
    }

    if (v5 == 32800)
    {
      if (!ktrace_chunk_version_major(a2))
      {
        uint64_t v13 = *(void *)(a1 + 32);
        uint64_t v7 = *(dispatch_queue_s **)(v13 + 232);
        v15[0] = MEMORY[0x1895F87A8];
        v15[1] = 0x40000000LL;
        v15[2] = __ktrace_start_file_internal_block_invoke_8;
        v15[3] = &__block_descriptor_tmp_27;
        _OWORD v15[4] = v13;
        void v15[5] = a2;
        uint64_t v8 = v15;
        goto LABEL_23;
      }

      return (v2 & 1) == 0;
    }

    if (v5 != 36869) {
      return (v2 & 1) == 0;
    }
LABEL_15:
    if (!ktrace_chunk_version_major(a2))
    {
      uint64_t v10 = *(void *)(a1 + 32);
      uint64_t v7 = *(dispatch_queue_s **)(v10 + 232);
      v20[0] = MEMORY[0x1895F87A8];
      v20[1] = 0x40000000LL;
      v20[2] = __ktrace_start_file_internal_block_invoke_3;
      v20[3] = &__block_descriptor_tmp_22_0;
      v20[4] = v10;
      void v20[5] = a2;
      uint64_t v8 = v20;
      goto LABEL_23;
    }

    return (v2 & 1) == 0;
  }

  if (v5 == 20530)
  {
    if (!ktrace_chunk_version_major(a2))
    {
      uint64_t v12 = *(void *)(a1 + 32);
      uint64_t v7 = *(dispatch_queue_s **)(v12 + 232);
      v19[0] = MEMORY[0x1895F87A8];
      v19[1] = 0x40000000LL;
      v19[2] = __ktrace_start_file_internal_block_invoke_4;
      v19[3] = &__block_descriptor_tmp_23;
      v19[4] = v12;
      v19[5] = a2;
      uint64_t v8 = v19;
      goto LABEL_23;
    }

    return (v2 & 1) == 0;
  }

  if (v5 == 32769) {
    goto LABEL_15;
  }
  if (v5 == 32772 && ktrace_chunk_version_major(a2) <= 1)
  {
    uint64_t v9 = *(void *)(a1 + 32);
    uint64_t v7 = *(dispatch_queue_s **)(v9 + 232);
    v18[0] = MEMORY[0x1895F87A8];
    v18[1] = 0x40000000LL;
    v18[2] = __ktrace_start_file_internal_block_invoke_5;
    v18[3] = &__block_descriptor_tmp_24_0;
    v18[4] = v9;
    void v18[5] = a2;
    uint64_t v8 = v18;
    goto LABEL_23;
  }

  return (v2 & 1) == 0;
}

uint64_t __ktrace_start_file_internal_block_invoke_3( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return ktrace_uuid_map_learn_sharedcache_with_chunk(*(void *)(*(void *)(a1 + 32) + 304LL), *(uint64_t **)(a1 + 40));
}

void __ktrace_start_file_internal_block_invoke_4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void __ktrace_start_file_internal_block_invoke_5( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void __ktrace_start_file_internal_block_invoke_6( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void __ktrace_start_file_internal_block_invoke_7( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

uint64_t __ktrace_start_file_internal_block_invoke_8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return ktrace_uuid_map_learn_aot_translations_with_chunk( *(void *)(*(void *)(a1 + 32) + 304LL),  *(void *)(a1 + 40));
}

void __ktrace_start_file_internal_block_invoke_9( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = *(void *)(a1 + 32);
  uint64_t v10 = *(void *)(v9 + 608);
  uint64_t v11 = MEMORY[0x1895F87A8];
  v17[0] = MEMORY[0x1895F87A8];
  v17[1] = 0x40000000LL;
  unint64_t v17[2] = __ktrace_start_file_internal_block_invoke_10;
  v17[3] = &__block_descriptor_tmp_32_0;
  _OWORD v17[4] = v9;
  __int16 v18 = *(_WORD *)(a1 + 40);
  ktrace_file_iterate(v10, 0LL, (uint64_t)v17, a4, a5, a6, a7, a8);
  uint64_t v12 = *(void *)(a1 + 32);
  if (*(int *)(v12 + 96) >= 1)
  {
    uint64_t v13 = *(dispatch_queue_s **)(v12 + 232);
    block[0] = v11;
    block[1] = 0x40000000LL;
    block[2] = __ktrace_start_file_internal_block_invoke_13;
    block[3] = &__block_descriptor_tmp_33;
    block[4] = v12;
    dispatch_async(v13, block);
    uint64_t v12 = *(void *)(a1 + 32);
  }

  uint64_t v14 = *(dispatch_queue_s **)(v12 + 128);
  v15[0] = v11;
  v15[1] = 0x40000000LL;
  v15[2] = __ktrace_start_file_internal_block_invoke_14;
  v15[3] = &__block_descriptor_tmp_34_0;
  _OWORD v15[4] = v12;
  dispatch_async(v14, v15);
}

BOOL __ktrace_start_file_internal_block_invoke_10(uint64_t a1, uint64_t *a2)
{
  unsigned __int8 v2 = atomic_load((unsigned __int8 *)(*(void *)(a1 + 32) + 156LL));
  if ((v2 & 1) == 0)
  {
    if (*(_BYTE *)(a1 + 40))
    {
      uint64_t v5 = *(void *)(a1 + 32);
      uint64_t v6 = *(dispatch_queue_s **)(v5 + 232);
      block[0] = MEMORY[0x1895F87A8];
      block[1] = 0x40000000LL;
      block[2] = __ktrace_start_file_internal_block_invoke_11;
      block[3] = &__block_descriptor_tmp_30_0;
      block[4] = v5;
      void block[5] = a2;
      dispatch_async(v6, block);
    }

    _session_read_stackshot_chunk(*(void *)(a1 + 32), a2);
    _session_chunk_callbacks(*(void *)(a1 + 32), (uint64_t)a2);
    uint64_t v7 = *(void *)(a1 + 32);
    if (*(int *)(v7 + 24) >= 1 && !ktrace_stream_add(*(void *)(v7 + 616), (uint64_t)a2))
    {
      uint64_t v8 = *(void *)(a1 + 32);
      uint64_t v9 = *(void *)(v8 + 616);
      uint64_t v10 = *(dispatch_queue_s **)(v8 + 232);
      v12[0] = MEMORY[0x1895F87A8];
      v12[1] = 0x40000000LL;
      v12[2] = __ktrace_start_file_internal_block_invoke_12;
      void v12[3] = &__block_descriptor_tmp_31_0;
      v12[4] = v8;
      char v13 = *(_BYTE *)(a1 + 41);
      ktrace_stream_iterate_group(v9, 0x800000uLL, v10, 0LL, (uint64_t)v12);
    }
  }

  return (v2 & 1) == 0;
}

uint64_t __ktrace_start_file_internal_block_invoke_11(uint64_t a1)
{
  return kthmap_read_chunk(*(_BYTE **)(*(void *)(a1 + 32) + 296LL), *(uint64_t **)(a1 + 40));
}

void __ktrace_start_file_internal_block_invoke_12(uint64_t a1, uint64_t a2, unint64_t a3)
{
  unsigned __int8 v3 = atomic_load((unsigned __int8 *)(*(void *)(a1 + 32) + 157LL));
  if ((v3 & 1) == 0) {
    _session_process_events(*(void *)(a1 + 32), a2, a3, *(unsigned __int8 *)(a1 + 40));
  }
}

void __ktrace_start_file_internal_block_invoke_13(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (*(void *)(v1 + 320)) {
    _session_handle_stackshot(v1, 0xFFFFFFFFFFFFFFFFLL);
  }
}

void __ktrace_start_file_internal_block_invoke_14(uint64_t a1)
{
}

void trace_end(int a1)
{
  if (trace_end_get_global_once != -1) {
    dispatch_once(&trace_end_get_global_once, &__block_literal_global_2);
  }
  ktrace_end(trace_end_s, a1);
}

void __trace_end_block_invoke()
{
  trace_end_s = global_session;
  global_session = 0LL;
}

void *trace_set_dropped_events_handler(void *aBlock)
{
  if (allocated_once != -1) {
    dispatch_once(&allocated_once, &__block_literal_global_3);
  }
  return ktrace_set_dropped_events_handler(global_session, aBlock);
}

void *trace_set_thread_exit_handler(void *aBlock)
{
  if (allocated_once != -1) {
    dispatch_once(&allocated_once, &__block_literal_global_3);
  }
  return ktrace_set_thread_exit_handler(global_session, aBlock);
}

uint64_t trace_set_walltime_enabled(int a1)
{
  if (allocated_once != -1) {
    dispatch_once(&allocated_once, &__block_literal_global_3);
  }
  return ktrace_set_walltimes_enabled(global_session, a1);
}

uint64_t trace_set_raw_file(const char *a1)
{
  if (allocated_once != -1) {
    dispatch_once(&allocated_once, &__block_literal_global_3);
  }
  return ktrace_set_file(global_session, a1);
}

uint64_t trace_set_use_existing()
{
  if (allocated_once != -1) {
    dispatch_once(&allocated_once, &__block_literal_global_3);
  }
  return ktrace_set_use_existing(global_session);
}

uint64_t trace_filter(const char *a1, const void *a2)
{
  if (allocated_once != -1) {
    dispatch_once(&allocated_once, &__block_literal_global_3);
  }
  return ktrace_events_filter(global_session, a1, a2);
}

uint64_t trace_exclude_process(const char *a1)
{
  if (allocated_once != -1) {
    dispatch_once(&allocated_once, &__block_literal_global_3);
  }
  return ktrace_exclude_process(global_session, a1);
}

uint64_t trace_exclude_pid(int a1)
{
  if (allocated_once != -1) {
    dispatch_once(&allocated_once, &__block_literal_global_3);
  }
  return ktrace_exclude_pid(global_session, a1);
}

uint64_t trace_filter_pid(int a1)
{
  if (allocated_once != -1) {
    dispatch_once(&allocated_once, &__block_literal_global_3);
  }
  return ktrace_filter_pid(global_session, a1);
}

uint64_t trace_set_command_map_enabled(int a1)
{
  if (allocated_once != -1) {
    dispatch_once(&allocated_once, &__block_literal_global_3);
  }
  return ktrace_set_execnames_enabled(global_session, a1);
}

uint64_t trace_codename_add_default_files()
{
  return 0LL;
}

uint64_t trace_add_code_file(char *a1)
{
  return ktrace_session_add_codes_file(global_session, a1);
}

void *trace_set_completion_handler(void *aBlock)
{
  if (allocated_once != -1) {
    dispatch_once(&allocated_once, &__block_literal_global_3);
  }
  return ktrace_set_completion_handler(global_session, aBlock);
}

uint64_t trace_all(const void *a1)
{
  if (allocated_once != -1) {
    dispatch_once(&allocated_once, &__block_literal_global_3);
  }
  return ktrace_events_all(global_session, a1);
}

uint64_t trace_single(int a1, const void *a2)
{
  if (allocated_once != -1) {
    dispatch_once(&allocated_once, &__block_literal_global_3);
  }
  return ktrace_events_single(global_session, a1, a2);
}

uint64_t trace_single_paired(int a1, const void *a2)
{
  if (allocated_once != -1) {
    dispatch_once(&allocated_once, &__block_literal_global_3);
  }
  return ktrace_events_single_paired(global_session, a1, a2);
}

uint64_t trace_range(int a1, int a2, const void *a3)
{
  if (allocated_once != -1) {
    dispatch_once(&allocated_once, &__block_literal_global_3);
  }
  return ktrace_events_range(global_session, a1, a2, a3);
}

uint64_t trace_range_paired(int a1, unsigned int a2, const void *a3)
{
  if (allocated_once != -1) {
    dispatch_once(&allocated_once, &__block_literal_global_3);
  }
  return ktrace_events_range_paired(global_session, a1, a2, a3);
}

uint64_t trace_start(dispatch_queue_s *a1)
{
  if (allocated_once != -1) {
    dispatch_once(&allocated_once, &__block_literal_global_3);
  }
  uint64_t result = ktrace_start(global_session, a1);
  if ((_DWORD)result == 1)
  {
    fwrite("libktrace: cannot trace in a live mode unless root\n", 0x33uLL, 1uLL, (FILE *)*MEMORY[0x1895F89D0]);
    exit(1);
  }

  return result;
}

uint64_t trace_get_command_for_thread(const void *a1)
{
  if (allocated_once != -1) {
    dispatch_once(&allocated_once, &__block_literal_global_3);
  }
  return ktrace_get_execname_for_thread(global_session, a1);
}

uint64_t trace_get_pid_for_thread(const void *a1)
{
  return ktrace_get_pid_for_thread(global_session, a1);
}

uint64_t trace_set_buffer_size(uint64_t a1)
{
  if (allocated_once != -1) {
    dispatch_once(&allocated_once, &__block_literal_global_3);
  }
  return ktrace_set_buffer_size(global_session, a1);
}

uint64_t trace_set_mode(unsigned int a1)
{
  if (allocated_once != -1) {
    dispatch_once(&allocated_once, &__block_literal_global_3);
  }
  return ktrace_set_mode(global_session, a1);
}

void trace_set_signal_handler()
{
  if (allocated_once != -1) {
    dispatch_once(&allocated_once, &__block_literal_global_3);
  }
  ktrace_set_signal_handler(global_session);
}

uint64_t trace_parse_arg(int a1, uint64_t a2, int a3)
{
  if (allocated_once != -1) {
    dispatch_once(&allocated_once, &__block_literal_global_3);
  }
  return ktrace_parse_arg(global_session, a1, a2, a3);
}

uint64_t trace_parse_args(int a1, char **a2)
{
  if (allocated_once != -1) {
    dispatch_once(&allocated_once, &__block_literal_global_3);
  }
  return ktrace_parse_args(global_session, a1, a2);
}

const void *trace_codename_for_debugid(int a1)
{
  return ktrace_name_for_eventid(global_session, (void *)(a1 & 0xFFFFFFFC));
}

const void *trace_codename_to_debugid(const void *a1)
{
  return ktrace_eventid_for_name(global_session, a1);
}

uint64_t trace_enable()
{
  return 1LL;
}

uint64_t trace_disable()
{
  return 1LL;
}

uint64_t trace_setup()
{
  return 1LL;
}

uint64_t trace_reset()
{
  return 1LL;
}

uint64_t trace_collect_and_process()
{
  return 1LL;
}

void *__initialize_global_session_block_invoke()
{
  uint64_t result = ktrace_session_create();
  global_session = (uint64_t)result;
  return result;
}

void _session_drain_finish( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = (unint64_t *)(a1 + 56);
  uint64_t v10 = *(void (***)(void))(a1 + 56);
  do
  {
    unint64_t v11 = __ldaxr(v9);
    if ((void (**)(void))v11 != v10)
    {
      __clrex();
      return;
    }
  }

  while (__stlxr(0LL, v9));
  _session_teardown(a1, a2, a3, a4, a5, a6, a7, a8);
  if (v10)
  {
    if (*(_DWORD *)(a1 + 4))
    {
      v10[2](v10);
      _Block_release(v10);
    }

    else
    {
      uint64_t v12 = *(dispatch_queue_s **)(a1 + 232);
      block[0] = MEMORY[0x1895F87A8];
      block[1] = 3221225472LL;
      block[2] = ___session_drain_finish_block_invoke;
      block[3] = &unk_189F55A48;
      block[4] = v10;
      dispatch_async(v12, block);
    }
  }

void ___session_drain_finish_block_invoke(uint64_t a1)
{
}

uint64_t _session_start_live(unint64_t a1)
{
  uint64_t v78 = *MEMORY[0x1895F89C0];
  *(_OWORD *)v77 = xmmword_186C5D0F8;
  size_t v73 = 648LL;
  if ((buf[32] & 4) == 0) {
    _session_start_live_cold_2();
  }
  ktrace_log_init();
  unsigned __int8 v2 = (os_log_s *)ktrace_log;
  if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_186BA3000, v2, OS_LOG_TYPE_INFO, "starting to trace live", buf, 2u);
  }

  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  if ((*(_DWORD *)a1 | 2) != 2) {
    _session_start_live_cold_4();
  }
  CFIndex v71 = 0LL;
  v72 = 0LL;
  if (geteuid())
  {
    int v3 = *__error();
    ktrace_log_init();
    uint64_t v4 = (os_log_s *)ktrace_log;
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
      _session_start_live_cold_16(v3, v4);
    }
    *__error() = v3;
    return 1LL;
  }

  int v75 = 0;
  v77[0] = 4LL;
  if (sysctlbyname("ktrace.state", &v75, v77, 0LL, 0LL)) {
    goto LABEL_12;
  }
  if (v75 == 1)
  {
    int pid = -1;
    size_t v73 = 4LL;
    if (sysctlbyname("ktrace.owning_pid", &pid, &v73, 0LL, 0LL))
    {
LABEL_12:
      unsigned int v13 = *__error();
      if (v13) {
        uint64_t v5 = v13;
      }
      else {
        uint64_t v5 = 22LL;
      }
      goto LABEL_15;
    }

    int v16 = pid;
    if (pid >= 1 && v16 != getpid())
    {
      memset(&buf[3], 0, 61);
      memset(buf, 63, 3);
      if (proc_name(pid, buf, 0x40u) > 0)
      {
        uint64_t v5 = 16LL;
LABEL_15:
        *__error() = v5;
        int v14 = *__error();
        ktrace_log_init();
        if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
          _session_start_live_cold_15();
        }
        *__error() = v14;
        return v5;
      }
    }
  }

  uint64_t v5 = _session_machine_init(a1, v6, v7, v8, v9, v10, v11, v12);
  if ((_DWORD)v5) {
    return v5;
  }
  do
  {
    if (__ldaxr(&live_session))
    {
      __clrex();
      if (*(_DWORD *)a1 == 2)
      {
        unint64_t v18 = atomic_load(&live_session);
        while (1)
        {
          unint64_t v19 = __ldaxr(&live_session);
          if (v19 != v18) {
            break;
          }
          if (!__stlxr(a1, &live_session)) {
            goto LABEL_33;
          }
        }

        __clrex();
        int v22 = *__error();
        ktrace_log_init();
        if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
          _session_start_live_cold_13();
        }
      }

      else
      {
        int v22 = *__error();
        ktrace_log_init();
        if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
          _session_start_live_cold_14();
        }
      }

      *__error() = v22;
      return 22LL;
    }
  }

  while (__stlxr(a1, &live_session));
LABEL_33:
  if ((*(_WORD *)(a1 + 224) & 0x80) != 0) {
    uint64_t v20 = mach_continuous_time();
  }
  else {
    uint64_t v20 = mach_absolute_time();
  }
  *(void *)(a1 + 504) = v20;
  if (!*(_DWORD *)a1)
  {
    *(void *)(a1 + 520) = kttimesync_timestamp_from_ns(a1 + 432, *(void *)(a1 + 512)) + v20;
    uint64_t v23 = trace_initialize(*(void *)(a1 + 336));
    if ((_DWORD)v23)
    {
      uint64_t v5 = v23;
      int v24 = *__error();
      ktrace_log_init();
      if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
        _session_start_live_cold_12();
      }
LABEL_46:
      *__error() = v24;
      goto LABEL_47;
    }

    unsigned int v28 = *(unsigned __int8 *)(a1 + 828);
    int v29 = *(unsigned __int16 *)(a1 + 224);
    if ((v29 & 0x200) != 0) {
      int v30 = ((4 * v29) | (v28 >> 1)) & 0x202;
    }
    else {
      int v30 = ((4 * v29) | (v28 >> 1)) & 0x202 | 0x400;
    }
    if ((v28 & 2) != 0)
    {
      uint64_t matched = trace_set_event_match_disable(a1 + 728, a1 + 768);
      if ((_DWORD)matched)
      {
        uint64_t v5 = matched;
        int v24 = *__error();
        ktrace_log_init();
        if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
          _session_start_live_cold_11();
        }
        goto LABEL_46;
      }

      v30 |= 0x800u;
    }

    else if (!v30)
    {
LABEL_69:
      uint64_t v5 = apply_kernel_typefilter_and_pid_filter(a1);
      if ((_DWORD)v5) {
        goto LABEL_47;
      }
      goto LABEL_70;
    }

    uint64_t v5 = trace_set_flags(v30);
    if ((_DWORD)v5) {
      goto LABEL_47;
    }
    goto LABEL_69;
  }

  if (*(_DWORD *)a1 != 2)
  {
LABEL_70:
    uint64_t v21 = 0LL;
    goto LABEL_71;
  }

  if (*(_DWORD *)(a1 + 4) == 1)
  {
    uint64_t v21 = ktrace_capture_live_stackshot();
    if (!v21)
    {
      uint64_t v5 = *__error();
      do
LABEL_47:
        __ldaxr(&live_session);
      while (__stlxr(0LL, &live_session));
LABEL_142:
      free(v72);
      return v5;
    }
  }

  else
  {
    uint64_t v21 = 0LL;
  }

  uint64_t v25 = trace_set_enable(0);
  if ((_DWORD)v25)
  {
    uint64_t v5 = v25;
    int v26 = *__error();
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
      _session_start_live_cold_10();
    }
    uint64_t v27 = 0LL;
    *__error() = v26;
    goto LABEL_119;
  }

LABEL_71:
  if ((*(_DWORD *)(a1 + 4) - 1) <= 1)
  {
    uint64_t current = (void **)ktrace_config_create_current();
    if (current)
    {
      uint64_t v27 = current;
      ktrace_config_enable_configured(current);
      uint64_t v33 = *(char **)(a1 + 696);
      if (v33) {
        ktrace_config_set_reason((uint64_t)v27, v33);
      }
      uint64_t v34 = *(char **)(a1 + 704);
      if (v34) {
        ktrace_config_set_command((uint64_t)v27, v34);
      }
      unsigned int v35 = *(_DWORD *)(a1 + 712);
      if (v35) {
        ktrace_config_set_trigger_kind((uint64_t)v27, v35);
      }
      if (*(_DWORD *)a1 == 2 || *(_DWORD *)(a1 + 4) == 2) {
        ktrace_config_set_context_kind((uint64_t)v27, 2u);
      }
      int v36 = *(void **)(a1 + 600);
      if (v36)
      {
        *(void *)buf = 0LL;
        if (!objc_msgSend(v36, "shouldStartTracingWithConfiguration:error:", v27, buf, v71))
        {
          int v38 = *__error();
          ktrace_log_init();
          uint64_t v39 = (os_log_s *)ktrace_log;
          if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
            _session_start_live_cold_9((uint64_t *)buf, v38, v39);
          }
          *__error() = v38;
          uint64_t v5 = 45LL;
          goto LABEL_119;
        }
      }

      uint64_t v37 = ktrace_config_serialize((uint64_t)v27, (UInt8 **)&v72, &v71);
      if ((_DWORD)v37)
      {
        uint64_t v5 = v37;
LABEL_119:
        if (v21) {
          stackshot_config_dealloc();
        }
        do
          __ldaxr(&live_session);
        while (__stlxr(0LL, &live_session));
        if (v27) {
          ktrace_config_destroy(v27);
        }
        goto LABEL_142;
      }

      ktrace_config_destroy(v27);
    }
  }

  if (!*(_DWORD *)a1)
  {
    [*(id *)(a1 + 600) willStartTracingWithFile:*(void *)(a1 + 648)];
    ktrace_log_init();
    char v45 = (os_log_s *)ktrace_log;
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_DEBUG)) {
      _session_start_live_cold_8(v45, v46, v47, v48, v49, v50, v51, v52);
    }
    uint64_t v53 = trace_set_enable(1);
    if ((_DWORD)v53)
    {
      uint64_t v5 = v53;
      uint64_t v27 = 0LL;
      goto LABEL_119;
    }

    int v61 = *(_DWORD *)(a1 + 4);
    if (v61 == 2)
    {
      ktrace_time_ringbuffer_tracing_started(*(void *)(a1 + 640));
      int v61 = *(_DWORD *)(a1 + 4);
    }

    if (v61 != 1) {
      goto LABEL_135;
    }
    ktrace_log_init();
    uint64_t v62 = (os_log_s *)ktrace_log;
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_DEBUG)) {
      _session_start_live_cold_7(v62, v63, v64, v65, v66, v67, v68, v69);
    }
    uint64_t v21 = ktrace_capture_live_stackshot();
    if (v21)
    {
LABEL_135:
      objc_msgSend(*(id *)(a1 + 600), "didStartTracingWithFile:", *(void *)(a1 + 648), v71);
      if (*(_DWORD *)(a1 + 268))
      {
        dispatch_queue_global_t global_queue = dispatch_get_global_queue(25LL, 0LL);
        dispatch_async(global_queue, &__block_literal_global_3);
      }

      goto LABEL_91;
    }

    goto LABEL_137;
  }

        uint64_t v12 = 0;
        unsigned int v13 = 0;
        return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
      }

      goto LABEL_72;
    }

    __break(1u);
  }

  __break(1u);
  return result;
}

LABEL_91:
  kttimesync_init(a1 + 432, 0LL, (*(unsigned __int16 *)(a1 + 224) >> 7) & 1);
  if (*(_DWORD *)(a1 + 288))
  {
    memset(buf, 0, 24);
    v77[0] = 24LL;
    if (!sysctlbyname("machdep.remotetime.conversion_params", buf, v77, 0LL, 0LL))
    {
      *(_OWORD *)(a1 + 52_Block_object_dispose(va, 8) = *(_OWORD *)buf;
      *(void *)(a1 + 544) = *(void *)&buf[16];
    }
  }

  int v40 = *(_DWORD *)(a1 + 4);
  if (!v40)
  {
    populate_threadmap(a1, 0);
    uint64_t v5 = _session_cpus_init(a1, v54, v55, v56, v57, v58, v59, v60);
    if ((_DWORD)v5) {
      return v5;
    }
    int v40 = *(_DWORD *)(a1 + 4);
  }

  if ((v40 - 1) <= 1)
  {
    uint64_t v41 = *(void *)(a1 + 648);
    if (!v41) {
      ktrace_remotetime_update_params_cold_1();
    }
    if (!ktrace_file_header_append_live_cpu_map(v41)) {
      goto LABEL_139;
    }
    uint64_t v42 = *(void *)(a1 + 664);
    if (v42) {
      (*(void (**)(uint64_t, void))(v42 + 16))(v42, *(void *)(a1 + 648));
    }
    if (!v72) {
      goto LABEL_104;
    }
    if (!ktrace_file_append_chunk(*(void *)(a1 + 648), 32774, 1, 4, (UInt8 *)v72, v71)) {
      goto LABEL_139;
    }
    free(v72);
    v72 = 0LL;
LABEL_104:
    if ((objc_msgSend(*(id *)(a1 + 600), "containsWithName:", @"Required", v71) & 1) == 0) {
      ktrace_file_append_ioreg(*(void *)(a1 + 648));
    }
    if (*(_DWORD *)(a1 + 4) == 1)
    {
      if (!v21) {
        ktrace_remotetime_update_params_cold_1();
      }
      uint64_t appended = ktrace_file_append_stackshot(*(void *)(a1 + 648), v21);
      stackshot_config_dealloc();
      if (appended)
      {
        uint64_t v21 = 0LL;
        goto LABEL_110;
      }

            __break(1u);
            return result;
          }

LABEL_137:
      uint64_t v5 = *__error();
LABEL_141:
      _session_end_internal(a1, 1, 1);
      goto LABEL_142;
    }

  if (!v145)
  {
    swift_bridgeObjectRelease();
LABEL_159:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_186BFFF5C(v180, v123);
    swift_bridgeObjectRelease();
    return v213;
  }

  swift_bridgeObjectRetain();
  v149 = v4 + 9;
  v204 = v123;
  while (2)
  {
    v151 = *(v149 - 4);
    uint64_t result = *(v149 - 2);
    v152 = (void (*)(uint64_t))v149[2];
    if (!(v209 & 1 | ((v149[1] & 1) == 0)))
    {
      v159 = *(v149 - 5);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_186BFF164();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_186C02184();
      swift_allocError();
      *(void *)v160 = v159;
      *(void *)(v160 + _Block_object_dispose(va, 8) = v151;
      *(_BYTE *)(v160 + 16) = 5;
      swift_bridgeObjectRetain();
      swift_willThrow();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_157;
    }

    v153 = v149[6];
    if ((v149[4] & 1) != 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_186BFF164();
      swift_bridgeObjectRetain();
      sub_186BFF164();
      v150 = swift_bridgeObjectRelease();
      v152(v150);
      if (v138)
      {
        sub_186C01E90();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_162;
      }

      goto LABEL_140;
    }

    if (!v153) {
      goto LABEL_168;
    }
    v201 = v149[5];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_186BFF164();
    swift_bridgeObjectRetain();
    sub_186BFF164();
    ((void (*)(uint64_t, uint64_t))v152)(v201, v153);
    if (!v138)
    {
      swift_bridgeObjectRelease();
LABEL_140:
      v149 += 12;
      sub_186C01E90();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_186C01E90();
      --v145;
      v123 = v204;
      if (!v145)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_159;
      }

      continue;
    }

    break;
  }

  swift_bridgeObjectRelease();
  sub_186C01E90();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_162:
  sub_186C01E90();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  return swift_bridgeObjectRelease();
}

LABEL_110:
    if (!ktrace_file_append_live_thread_map(*(void *)(a1 + 648)) && *__error()
      || *(_DWORD *)(a1 + 288)
      && !ktrace_file_append_chunk(*(void *)(a1 + 648), 32782, 1, 0, (UInt8 *)(a1 + 528), 24LL))
    {
LABEL_139:
      uint64_t v5 = *__error();
      if (v21) {
        stackshot_config_dealloc();
      }
      goto LABEL_141;
    }
  }

  uint64_t v44 = drain_events_block(a1);
  dispatch_async(*(dispatch_queue_t *)(a1 + 128), v44);
  _Block_release(v44);
  if (*(void *)(a1 + 592)) {
    ktrace_client_start_tracing();
  }
  if (v21) {
    stackshot_config_dealloc();
  }
  return 0LL;
}

uint64_t apply_kernel_typefilter_and_pid_filter(uint64_t a1)
{
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  if (!*(_DWORD *)(a1 + 560)
    || *(_DWORD *)(a1 + 576) == 2
    || (uint64_t v3 = a1,
        unsigned int v4 = 0,
        CFSetApplyFunction(*(CFSetRef *)(a1 + 552), (CFSetApplierFunction)pid_set_applier, &v3),
        (uint64_t result = v4) == 0))
  {
    if (*(_BYTE *)(a1 + 16)) {
      return 0LL;
    }
    uint64_t result = trace_set_filter(*(void **)(a1 + 8));
    if (!(_DWORD)result) {
      return 0LL;
    }
  }

  return result;
}

void populate_threadmap(uint64_t a1, int a2)
{
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  if ((*(_DWORD *)a1 | 2) != 2) {
    _session_start_live_cold_4();
  }
  if (*(void *)(a1 + 232) && *(_DWORD *)(a1 + 260))
  {
    size_t v6 = 0LL;
    uint64_t v7 = 0LL;
    if (a2) {
      kdebug_alloc_current_thread_map((uint64_t)&v7, &v6);
    }
    else {
      kdebug_alloc_thread_map(&v7, &v6);
    }
    if (v7)
    {
      uint64_t v3 = *(dispatch_queue_s **)(a1 + 232);
      v4[0] = MEMORY[0x1895F87A8];
      v4[1] = 3221225472LL;
      v4[2] = __populate_threadmap_block_invoke;
      v4[3] = &__block_descriptor_57_e5_v8__0l;
      v4[4] = a1;
      void v4[5] = v7;
      v4[6] = v6;
      char v5 = 1;
      dispatch_async(v3, v4);
    }
  }

void *drain_events_block(uint64_t a1)
{
  uint64_t v4 = 0LL;
  char v5 = &v4;
  uint64_t v6 = 0x3052000000LL;
  uint64_t v7 = __Block_byref_object_copy__1;
  uint64_t v8 = __Block_byref_object_dispose__1;
  v3[0] = MEMORY[0x1895F87A8];
  v3[1] = 3221225472LL;
  v3[2] = __drain_events_block_block_invoke;
  _OWORD v3[3] = &unk_189F55AB0;
  v3[4] = &v4;
  void v3[5] = a1;
  uint64_t v1 = _Block_copy(v3);
  v5[5] = (uint64_t)v1;
  _Block_object_dispose(&v4, 8);
  return v1;
}

uint64_t _session_end_live(uint64_t a1)
{
  while (1)
  {
    unint64_t v1 = __ldaxr(&live_session);
    if (v1 != a1) {
      break;
    }
    if (!__stlxr(0LL, &live_session)) {
      return 1LL;
    }
  }

  uint64_t result = 0LL;
  __clrex();
  return result;
}

uint64_t ktrace_configure( unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  if (*(_DWORD *)a1 == 1) {
    ktrace_remotetime_update_params_cold_1();
  }
  if (*(_DWORD *)a1 == 3) {
    ktrace_remotetime_update_params_cold_1();
  }
  if ((*(_WORD *)(a1 + 224) & 1) != 0) {
    ktrace_callback_list_add_cold_4();
  }
  unint64_t v9 = atomic_load(&live_session);
  if (v9 && (*(_WORD *)(v9 + 224) & 1) != 0) {
    return 22LL;
  }
  do
  {
    unint64_t v10 = __ldaxr(&live_session);
    if (v10 != v9)
    {
      __clrex();
      return 22LL;
    }
  }

  while (__stlxr(a1, &live_session));
  _session_machine_init(a1, a2, a3, a4, a5, a6, a7, a8);
  *(_WORD *)(a1 + 224) |= 2u;
  *(_DWORD *)(a1 + 4) = 4;
  uint64_t v11 = trace_initialize(*(void *)(a1 + 336));
  if ((_DWORD)v11
    || (ktrace_compute_filter(a1),
        _session_cpus_init(a1, v12, v13, v14, v15, v16, v17, v18),
        uint64_t v11 = apply_kernel_typefilter_and_pid_filter(a1),
        (_DWORD)v11)
    || (uint64_t v11 = trace_set_enable(1), (_DWORD)v11))
  {
    _session_end_internal(a1, 1, 1);
  }

  return v11;
}

uint64_t ktrace_reset_existing()
{
  unint64_t v0 = atomic_load(&live_session);
  if (!v0) {
    return trace_remove_internal();
  }
  if ((*(_WORD *)(v0 + 224) & 2) == 0) {
    ktrace_reset_existing_cold_1();
  }
  while (1)
  {
    unint64_t v1 = __ldaxr(&live_session);
    if (v1 != v0) {
      break;
    }
    if (!__stlxr(0LL, &live_session)) {
      return trace_remove_internal();
    }
  }

  __clrex();
  return 22LL;
}

uint64_t ktrace_disable_configured(uint64_t a1)
{
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  if ((*(_WORD *)(a1 + 224) & 2) == 0) {
    return 22LL;
  }
  while (1)
  {
    unint64_t v2 = __ldaxr(&live_session);
    if (v2 != a1) {
      break;
    }
    if (!__stlxr(0LL, &live_session)) {
      return trace_set_enable(0);
    }
  }

  __clrex();
  return 48LL;
}

uint64_t pid_set_applier(uint64_t result, _DWORD *a2)
{
  if (!a2[2])
  {
    uint64_t result = trace_set_pid_filter(*(_DWORD *)(*(void *)a2 + 560LL) == 2, result);
    a2[2] = result;
  }

  return result;
}

void __populate_threadmap_block_invoke(uint64_t a1)
{
}

void __Block_byref_object_copy__1(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_dispose__1(uint64_t a1)
{
}

void __drain_events_block_block_invoke(uint64_t a1)
{
  uint64_t v67 = *MEMORY[0x1895F89C0];
  uint64_t v2 = *(void *)(a1 + 40);
  int v3 = *(_DWORD *)v2;
  int v4 = atomic_load((unsigned __int8 *)(v2 + 156));
  int v5 = v4 | (v3 == 2);
  if (v4 & 1 | (v3 == 2)) {
    unsigned int v6 = 0;
  }
  else {
    unsigned int v6 = *(_DWORD *)(v2 + 152);
  }
  unsigned __int8 v7 = atomic_load((unsigned __int8 *)(v2 + 157));
  if ((v7 & 1) != 0) {
    return;
  }
  int v8 = *(_DWORD *)(v2 + 4);
  if (v8 == 2)
  {
    unsigned __int8 v16 = atomic_load((unsigned __int8 *)(v2 + 159));
    if ((v16 & 1) != 0)
    {
LABEL_46:
      int v20 = 0;
      goto LABEL_63;
    }

    if (v6 && (kdebug_wait(v6) & 0x80000000) != 0) {
      goto LABEL_32;
    }
    size_t v59 = 0LL;
    uint64_t v60 = 0LL;
    int v58 = 0;
    if (trace_collect(&v60, &v59, &v58))
    {
      int v14 = *__error();
      ktrace_log_init();
      if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
        __drain_events_block_block_invoke_cold_7();
      }
      goto LABEL_24;
    }

    if (!v60) {
      ktrace_remotetime_update_params_cold_1();
    }
    if (!v59)
    {
      trace_free(v60);
      if ((v5 & 1) != 0)
      {
        ktrace_log_init();
        uint64_t v50 = (os_log_s *)ktrace_log;
        if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_DEBUG)) {
          __drain_events_block_block_invoke_cold_6(v50, v51, v52, v53, v54, v55, v56, v57);
        }
        int v20 = 1;
        goto LABEL_63;
      }

      goto LABEL_46;
    }

    uint64_t v27 = *(dispatch_queue_s **)(v2 + 232);
    *(void *)&__int128 buf = MEMORY[0x1895F87A8];
    *((void *)&buf + ktrace_session_set_default_event_names_enabled(global_session, 1) = 3221225472LL;
    uint64_t v62 = __drain_trailing_duration_block_invoke;
    uint64_t v63 = &__block_descriptor_56_e5_v8__0l;
    uint64_t v64 = v2;
    uint64_t v65 = v60;
    uint64_t v66 = (void *)v59;
    int v26 = v27;
LABEL_45:
    dispatch_async(v26, &buf);
    goto LABEL_46;
  }

  if (v8 == 1)
  {
    uint64_t v60 = 0LL;
    uint64_t v17 = *(void *)(v2 + 680);
    uint64_t v18 = *(void *)(v2 + 648);
    if (v17) {
      int appended = ktrace_file_append_live_filtered_ktrace(v18, v6, *(_DWORD *)(v2 + 656), &v60, v17);
    }
    else {
      int appended = ktrace_file_append_live_ktrace(v18, 0LL, v6, *(_DWORD *)(v2 + 656), (uint64_t *)&v60);
    }
    int v21 = appended;
    if (appended)
    {
      ktrace_log_init();
      int v22 = (os_log_s *)ktrace_log;
      if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_INFO))
      {
        uint64_t v23 = strerror(v21);
        LODWORD(buf) = 136315138;
        *(void *)((char *)&buf + 4) = v23;
        _os_log_impl( &dword_186BA3000,  v22,  OS_LOG_TYPE_INFO,  "ending draining to file due to error: %s",  (uint8_t *)&buf,  0xCu);
      }

      goto LABEL_32;
    }

    uint64_t v24 = (uint64_t)v60;
    if (v60)
    {
      BOOL v25 = (unint64_t)ktrace_chunk_size((uint64_t)v60) < 9;
      uint64_t v24 = (uint64_t)v60;
    }

    else
    {
      BOOL v25 = 0;
    }

    if (v24) {
      int v28 = v25;
    }
    else {
      int v28 = 1;
    }
    if ((v5 & v28) == 1)
    {
      ktrace_log_init();
      uint64_t v29 = ktrace_log;
      int v20 = 1;
      if (!os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_INFO)) {
        goto LABEL_63;
      }
      int v30 = "";
      if (v25) {
        int v30 = ", undersized chunk";
      }
      LODWORD(buf) = 136315138;
      *(void *)((char *)&buf + 4) = v30;
      uint64_t v31 = "ending draining to file, out of events%s";
      uint64_t v32 = (os_log_s *)v29;
      uint32_t v33 = 12;
      goto LABEL_56;
    }

    unint64_t v34 = *(void *)(v2 + 160) + ((unint64_t)ktrace_chunk_size(v24) >> 6);
    *(void *)(v2 + 160) = v34;
    unint64_t v35 = *(void *)(v2 + 720);
    if (v34 <= v35 || v35 == 0) {
      int v20 = 0;
    }
    else {
      int v20 = 2;
    }
  }

  else
  {
    if (v8) {
      __drain_events_block_block_invoke_cold_1();
    }
    unsigned __int8 v9 = atomic_load((unsigned __int8 *)(v2 + 159));
    if ((v9 & 1) != 0)
    {
      int v20 = 3;
      goto LABEL_63;
    }

    if (!*(void *)(v2 + 320))
    {
      __int16 v10 = *(_WORD *)(v2 + 224);
      if ((v10 & 0x20) == 0)
      {
        *(_WORD *)(v2 + 224) = v10 | 0x20;
        uint64_t v11 = (uint64_t *)ktrace_file_append_live_stackshot_internal(-1LL);
        if (v11) {
          _session_read_stackshot_chunk(v2, v11);
        }
      }
    }

    if (v6 && (kdebug_wait(v6) & 0x80000000) != 0) {
      goto LABEL_32;
    }
    size_t v59 = 0LL;
    uint64_t v60 = 0LL;
    int v58 = 0;
    int v12 = trace_collect(&v60, &v59, &v58);
    if (v12)
    {
      int v13 = v12;
      int v14 = *__error();
      ktrace_log_init();
      uint64_t v15 = (os_log_s *)ktrace_log;
      if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
        __drain_events_block_block_invoke_cold_4(v13, v14, v15);
      }
LABEL_24:
      *__error() = v14;
LABEL_32:
      int v20 = 4;
      goto LABEL_63;
    }

    if (!v60) {
      ktrace_remotetime_update_params_cold_1();
    }
    if ((*(_BYTE *)(v2 + 828) & 4) == 0 && (v58 & 8) != 0 && !*(_DWORD *)v2) {
      populate_threadmap(v2, 1);
    }
    if (v59)
    {
      int v26 = *(dispatch_queue_s **)(v2 + 232);
      *(void *)&__int128 buf = MEMORY[0x1895F87A8];
      *((void *)&buf + ktrace_session_set_default_event_names_enabled(global_session, 1) = 3221225472LL;
      uint64_t v62 = __drain_callbacks_block_invoke;
      uint64_t v63 = &__block_descriptor_56_e5_v8__0l;
      uint64_t v64 = v2;
      uint64_t v65 = (void *)v59;
      uint64_t v66 = v60;
      goto LABEL_45;
    }

    trace_free(v60);
    if ((v5 & 1) == 0) {
      goto LABEL_46;
    }
    ktrace_log_init();
    uint64_t v49 = ktrace_log;
    int v20 = 1;
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_INFO))
    {
      LOWORD(buf) = 0;
      uint64_t v31 = "ending after empty trace collection";
      uint64_t v32 = (os_log_s *)v49;
      uint32_t v33 = 2;
LABEL_56:
      _os_log_impl(&dword_186BA3000, v32, OS_LOG_TYPE_INFO, v31, (uint8_t *)&buf, v33);
    }
  }

LABEL_63:
  switch(v20)
  {
    case 0:
      unsigned __int8 v47 = atomic_load((unsigned __int8 *)(v2 + 157));
      if ((v47 & 1) != 0) {
        return;
      }
      unsigned __int8 v48 = atomic_load((unsigned __int8 *)(v2 + 156));
      if ((v48 & 1) != 0
        || v3 == 2
        || (__int128 buf = 0uLL, LODWORD(v62) = 0, trace_get_bufinfo(&buf))
        || !DWORD1(buf))
      {
        dispatch_async( *(dispatch_queue_t *)(*(void *)(a1 + 40) + 128LL),  *(dispatch_block_t *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 40LL));
      }

      else
      {
        if ((BYTE8(buf) & 8) != 0) {
          int v39 = 5;
        }
        else {
          int v39 = 4;
        }
        uint64_t v37 = v2;
        char v38 = 3;
LABEL_67:
        _session_end_internal(v37, v38, v39);
        _session_drain_finish(v2, v40, v41, v42, v43, v44, v45, v46);
      }

      break;
    case 1:
      uint64_t v37 = v2;
      char v38 = 2;
      int v39 = 2;
      goto LABEL_67;
    case 2:
      uint64_t v37 = v2;
      char v38 = 2;
      int v39 = 6;
      goto LABEL_67;
    case 3:
      return;
    case 4:
      uint64_t v37 = v2;
      char v38 = 3;
      int v39 = 1;
      goto LABEL_67;
    default:
      ktrace_remotetime_update_params_cold_1();
  }

void __drain_callbacks_block_invoke(uint64_t a1)
{
  unsigned __int8 v2 = atomic_load((unsigned __int8 *)(*(void *)(a1 + 32) + 157LL));
  if ((v2 & 1) == 0)
  {
    uint64_t v4 = *(void *)(a1 + 32);
    unint64_t v3 = *(void *)(a1 + 40);
    unint64_t v5 = *(void *)(v4 + 720);
    if (v5)
    {
      unint64_t v6 = *(void *)(v4 + 160);
      BOOL v7 = v5 > v6;
      unint64_t v8 = v5 - v6;
      if (!v7) {
        ktrace_remotetime_update_params_cold_1();
      }
      if (v3 >= v8 << 6) {
        unint64_t v3 = v8 << 6;
      }
    }

    uint64_t v9 = *(void *)(a1 + 48);
    int is_64_bit = current_system_is_64_bit();
    _session_process_events(v4, v9, v3, is_64_bit);
  }

  trace_free(*(void **)(a1 + 48));
  uint64_t v11 = *(void *)(a1 + 32);
  uint64_t v12 = *(void *)(v11 + 720);
  if (v12)
  {
    if (*(void *)(v11 + 160) == v12) {
      _session_end_internal(v11, 1, 6);
    }
  }

uint64_t __drain_trailing_duration_block_invoke(void *a1)
{
  unsigned __int8 v2 = atomic_load((unsigned __int8 *)(a1[4] + 157LL));
  if ((v2 & 1) == 0)
  {
    unint64_t v3 = a1[6];
    if (v3 >= 0x40)
    {
      uint64_t v5 = a1[4];
      uint64_t v4 = a1[5];
      unint64_t v6 = v3 >> 6;
      do
      {
        ktrace_time_ringbuffer_handle_tracepoint(*(uint64_t **)(v5 + 640), v4);
        v4 += 64LL;
        --v6;
      }

      while (v6);
    }
  }

  return trace_free((void *)a1[5]);
}

  ;
}

  ;
}

uint64_t OUTLINED_FUNCTION_7()
{
  return _os_assert_log();
}

uint64_t ktrace_exclude_process(uint64_t a1, const char *a2)
{
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  uint64_t result = validate_filter(a1, 1);
  if (!(_DWORD)result)
  {
    uint64_t v5 = strdup(a2);
    if (v5)
    {
      *(_DWORD *)(a1 + 576) = 1;
      CFSetAddValue(*(CFMutableSetRef *)(a1 + 568), v5);
      return 0LL;
    }

    else
    {
      return 12LL;
    }
  }

  return result;
}

uint64_t validate_filter(uint64_t a1, int a2)
{
  if ((*(_WORD *)(a1 + 224) & 1) != 0) {
    ktrace_callback_list_add_cold_4();
  }
  if (a2) {
    int v2 = 2;
  }
  else {
    int v2 = 1;
  }
  if (*(_DWORD *)(a1 + 560) == v2 || *(_DWORD *)(a1 + 576) == v2) {
    return 22LL;
  }
  uint64_t v3 = *(unsigned int *)(a1 + 260);
  if ((_DWORD)v3) {
    return 0LL;
  }
  *(_DWORD *)(a1 + 260) = 2;
  return v3;
}

uint64_t ktrace_filter_process(uint64_t a1, const char *a2)
{
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  uint64_t result = validate_filter(a1, 0);
  if (!(_DWORD)result)
  {
    uint64_t v5 = strdup(a2);
    if (v5)
    {
      *(_DWORD *)(a1 + 576) = 2;
      CFSetAddValue(*(CFMutableSetRef *)(a1 + 568), v5);
      return 0LL;
    }

    else
    {
      return 12LL;
    }
  }

  return result;
}

uint64_t ktrace_exclude_pid(uint64_t a1, int a2)
{
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  uint64_t v4 = validate_filter(a1, 1);
  if (!(_DWORD)v4)
  {
    *(_DWORD *)(a1 + 560) = 1;
    CFSetAddValue(*(CFMutableSetRef *)(a1 + 552), (const void *)a2);
  }

  return v4;
}

uint64_t ktrace_filter_pid(uint64_t a1, int a2)
{
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  uint64_t v4 = validate_filter(a1, 0);
  if (!(_DWORD)v4)
  {
    *(_DWORD *)(a1 + 560) = 2;
    CFSetAddValue(*(CFMutableSetRef *)(a1 + 552), (const void *)a2);
  }

  return v4;
}

uint64_t ktrace_ignore_process_filter_for_event(uint64_t a1, void *value)
{
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  *(_BYTE *)(a1 + 580) = 1;
  CFSetAddValue(*(CFMutableSetRef *)(a1 + 584), (const void *)value);
  return 0LL;
}

uint64_t ktrace_current_timebase()
{
  if (ktrace_current_timebase_once != -1) {
    dispatch_once(&ktrace_current_timebase_once, &__block_literal_global_4);
  }
  return ktrace_current_timebase_mtb;
}

uint64_t __ktrace_current_timebase_block_invoke()
{
  uint64_t result = mach_timebase_info((mach_timebase_info_t)&ktrace_current_timebase_mtb);
  if ((_DWORD)result) {
    ktrace_postprocess_file_internal_cold_1();
  }
  return result;
}

uint64_t kdebug_wait(unsigned int a1)
{
  uint64_t v6 = *MEMORY[0x1895F89C0];
  int v5 = 23;
  *(void *)uint64_t v4 = 0x1800000001LL;
  size_t v3 = a1;
  if ((sysctl(v4, 3u, 0LL, &v3, 0LL, 0LL) & 0x80000000) == 0) {
    return 0LL;
  }
  int v2 = *__error();
  ktrace_log_init();
  if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
    kdebug_wait_cold_1();
  }
  *__error() = v2;
  if (*__error()) {
    return *__error();
  }
  else {
    return 22LL;
  }
}

uint64_t kdebug_read_events(void *a1, size_t *a2)
{
  uint64_t v7 = *MEMORY[0x1895F89C0];
  int v6 = 10;
  *(void *)int v5 = 0x1800000001LL;
  if (sysctl(v5, 3u, a1, a2, 0LL, 0LL) < 0)
  {
    int v4 = *__error();
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
      kdebug_read_events_cold_1();
    }
    *__error() = v4;
    if (*__error()) {
      return *__error();
    }
    else {
      return 22LL;
    }
  }

  else
  {
    uint64_t result = 0LL;
    *a2 <<= 6;
  }

  return result;
}

uint64_t kdebug_wait_and_read_events(void *a1, size_t *a2, unsigned int a3)
{
  uint64_t result = kdebug_wait(a3);
  if (!(_DWORD)result) {
    return kdebug_read_events(a1, a2);
  }
  return result;
}

uint64_t kdebug_write_events(int a1, unsigned int a2)
{
  uint64_t v9 = *MEMORY[0x1895F89C0];
  *(void *)int v6 = 0x1800000001LL;
  int v7 = 17;
  int v8 = a1;
  if (a2 <= 1) {
    size_t v2 = 1LL;
  }
  else {
    size_t v2 = a2;
  }
  size_t v5 = v2;
  if ((sysctl(v6, 4u, 0LL, &v5, 0LL, 0LL) & 0x80000000) == 0) {
    return 0LL;
  }
  int v4 = *__error();
  ktrace_log_init();
  if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
    kdebug_write_events_cold_1();
  }
  *__error() = v4;
  if (*__error()) {
    return *__error();
  }
  else {
    return 22LL;
  }
}

uint64_t kdebug_get_bufinfo(void *a1)
{
  uint64_t v6 = *MEMORY[0x1895F89C0];
  int v5 = 5;
  *(void *)int v4 = 0x1800000001LL;
  size_t v3 = 20LL;
  if ((sysctl(v4, 3u, a1, &v3, 0LL, 0LL) & 0x80000000) == 0) {
    return 0LL;
  }
  int v2 = *__error();
  ktrace_log_init();
  if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
    kdebug_get_bufinfo_cold_1();
  }
  *__error() = v2;
  if (*__error()) {
    return *__error();
  }
  else {
    return 22LL;
  }
}

uint64_t kdebug_get_flags()
{
  else {
    return v2;
  }
}

uint64_t kdebug_alloc_current_cpu_map(void *a1, size_t *a2)
{
  uint64_t v14 = *MEMORY[0x1895F89C0];
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  if (!a2) {
    ktrace_remotetime_update_params_cold_1();
  }
  int v13 = 25;
  size_t __size = 0LL;
  *(void *)uint64_t v12 = 0x1800000001LL;
  if (sysctl(v12, 3u, 0LL, &__size, 0LL, 0LL))
  {
    int v4 = *__error();
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
      kdebug_alloc_current_cpu_map_cold_5();
    }
    *__error() = v4;
    unsigned int v5 = *__error();
    if (v5) {
      return v5;
    }
    else {
      return 22LL;
    }
  }

  else
  {
    int v7 = malloc(__size);
    if (!v7) {
      ktrace_remotetime_update_params_cold_1();
    }
    int v8 = v7;
    uint64_t result = sysctl(v12, 3u, v7, &__size, 0LL, 0LL);
    if ((_DWORD)result)
    {
      unsigned int v9 = *__error();
      free(v8);
      int v10 = *__error();
      ktrace_log_init();
      if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
        kdebug_alloc_current_cpu_map_cold_4();
      }
      *__error() = v10;
      if (v9) {
        return v9;
      }
      else {
        return 22LL;
      }
    }

    else
    {
      *a1 = v8;
      *a2 = __size;
    }
  }

  return result;
}

uint64_t kdebug_alloc_current_thread_map(uint64_t a1, size_t *a2)
{
  uint64_t v10 = *MEMORY[0x1895F89C0];
  if (!a2) {
    ktrace_remotetime_update_params_cold_1();
  }
  *a2 = 36000LL;
  size_t v3 = malloc(0x8CA0uLL);
  if (!v3) {
    ktrace_remotetime_update_params_cold_1();
  }
  int v4 = v3;
  int v9 = 21;
  *(void *)int v8 = 0x1800000001LL;
  if ((sysctl(v8, 3u, v3, a2, 0LL, 0LL) & 0x80000000) == 0) {
    return 0LL;
  }
  int v6 = *__error();
  ktrace_log_init();
  if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
    kdebug_alloc_current_thread_map_cold_3();
  }
  *__error() = v6;
  unsigned int v7 = *__error();
  free(v4);
  if (v7) {
    return v7;
  }
  else {
    return 22LL;
  }
}

uint64_t kdebug_alloc_thread_map(void *a1, size_t *a2)
{
  uint64_t v16 = *MEMORY[0x1895F89C0];
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  if (!a2) {
    ktrace_remotetime_update_params_cold_1();
  }
  uint64_t v11 = 0LL;
  uint64_t v12 = 0LL;
  int v13 = 0;
  uint64_t result = kdebug_get_bufinfo(&v11);
  if (!(_DWORD)result)
  {
    if (HIDWORD(v12))
    {
      size_t v5 = 32LL * SHIDWORD(v12);
      *a2 = v5;
      int v6 = malloc(v5);
      if (!v6) {
        ktrace_remotetime_update_params_cold_1();
      }
      unsigned int v7 = v6;
      int v15 = 12;
      *(void *)uint64_t v14 = 0x1800000001LL;
      if (sysctl(v14, 3u, v6, a2, 0LL, 0LL) < 0)
      {
        unsigned int v8 = *__error();
        free(v7);
        if (v8 == 22)
        {
          return kdebug_alloc_current_thread_map(v9, a2);
        }

        else
        {
          int v10 = *__error();
          ktrace_log_init();
          if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
            kdebug_alloc_thread_map_cold_4();
          }
          *__error() = v10;
          if (v8) {
            return v8;
          }
          else {
            return 22LL;
          }
        }
      }

      else
      {
        uint64_t result = 0LL;
        *a1 = v7;
      }
    }

    else
    {
      return 2LL;
    }
  }

  return result;
}

char *kdebug_alloc_filter_description(uint64_t a1)
{
  unsigned int v2 = malloc(0x200uLL);
  if (!v2) {
    ktrace_remotetime_update_params_cold_1();
  }
  size_t v3 = v2;
  uint64_t v4 = 0LL;
  int v5 = 0;
  char v6 = 1;
  size_t v7 = 512LL;
LABEL_3:
  while (2)
  {
    int v8 = 0;
    unsigned int v9 = v5 << 8;
    while (((*(unsigned __int8 *)(a1 + ((unint64_t)(v8 & 0xF8 | v9) >> 3)) >> (v8 & 7)) & 1) != 0)
    {
      if (++v8 == 256)
      {
        if (v4 + 8 > v7)
        {
          v7 *= 2LL;
          int v10 = realloc(v3, v7);
          if (!v10) {
            ktrace_remotetime_update_params_cold_1();
          }
          size_t v3 = v10;
        }

        if (v4)
        {
          uint64_t v11 = v4 + 1;
          *((_BYTE *)v3 + v4) = 44;
        }

        else
        {
          uint64_t v11 = 0LL;
        }

        uint64_t v4 = v11 + snprintf((char *)v3 + v11, 8uLL, "C0x%02x", v5++);
        if (v5 != 256) {
          goto LABEL_3;
        }
        if ((v6 & 1) != 0)
        {
          free(v3);
          return strdup("ALL");
        }

        goto LABEL_27;
      }
    }

    for (int i = 0; i != 256; ++i)
    {
      if (((*(unsigned __int8 *)(a1 + ((unint64_t)(i & 0xF8 | v9) >> 3)) >> (i & 7)) & 1) != 0)
      {
        if (v4 + 10 > v7)
        {
          v7 *= 2LL;
          int v13 = realloc(v3, v7);
          if (!v13) {
            ktrace_remotetime_update_params_cold_1();
          }
          size_t v3 = v13;
        }

        if (v4)
        {
          uint64_t v14 = v4 + 1;
          *((_BYTE *)v3 + v4) = 44;
        }

        else
        {
          uint64_t v14 = 0LL;
        }

        uint64_t v4 = v14 + snprintf((char *)v3 + v14, 0xAuLL, "S0x%02x%02x", v5, i);
      }
    }

    char v6 = 0;
    if (++v5 != 256) {
      continue;
    }
    break;
  }

LABEL_27:
  *((_BYTE *)v3 + v4) = 0;
  return (char *)v3;
}

      if (v7 == 27656192)
      {
        if (a3)
        {
          delete_thread_group(a1, *(const void **)(a2 + 8));
          return;
        }

        int v13 = *__error();
        ktrace_log_init();
        if (!os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
          goto LABEL_71;
        }
      }

      else
      {
        if (v7 != 27656200) {
          return;
        }
        if (a3)
        {
          set_thread_thread_group(a1, *(const void **)(a2 + 24), *(void **)(a2 + 8));
          return;
        }

        int v13 = *__error();
        ktrace_log_init();
        if (!os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
          goto LABEL_71;
        }
      }

    v19.length = CFArrayGetCount((CFArrayRef)cf);
    v19.location = 0LL;
    CFArrayAppendArray(v16, (CFArrayRef)cf, v19);
    return;
  }

  int v8 = CFGetTypeID(cf);
  if (v8 == CFStringGetTypeID() && CFStringCompare(a2, @"dsymForUUID", 0LL) == kCFCompareEqualTo)
  {
    CFRetain(cf);
    *(void *)(*(void *)(a1 + 32) + 16LL) = cf;
  }

  else
  {
    unsigned int v9 = CFGetTypeID(cf);
    if (v9 == CFBooleanGetTypeID() && CFStringCompare(a2, @"debugsymbols_defaults", 0LL) == kCFCompareEqualTo)
    {
      *(_BYTE *)(*(void *)(a1 + 32) + 24LL) = CFBooleanGetValue((CFBooleanRef)cf) != 0;
    }

    else
    {
      int v10 = CFGetTypeID(cf);
      if (v10 == CFBooleanGetTypeID() && CFStringCompare(a2, @"assumeSystemArch", 0LL) == kCFCompareEqualTo)
      {
        *(_BYTE *)(*(void *)(a1 + 32) + 25LL) = CFBooleanGetValue((CFBooleanRef)cf) != 0;
      }

      else
      {
        uint64_t v11 = CFGetTypeID(cf);
        if (v11 == CFBooleanGetTypeID() && CFStringCompare(a2, @"allowArchUnknown", 0LL) == kCFCompareEqualTo)
        {
          *(_BYTE *)(*(void *)(a1 + 32) + 26LL) = CFBooleanGetValue((CFBooleanRef)cf) != 0;
        }

        else
        {
          uint64_t v12 = CFGetTypeID(cf);
          if (v12 == CFBooleanGetTypeID()
            && CFStringCompare(a2, @"allowImageTypeUnknown", 0LL) == kCFCompareEqualTo)
          {
            *(_BYTE *)(*(void *)(a1 + 32) + 27LL) = CFBooleanGetValue((CFBooleanRef)cf) != 0;
          }

          else
          {
            int v13 = CFGetTypeID(cf);
            if (v13 == CFBooleanGetTypeID()
              && CFStringCompare(a2, @"inferAoutFlagFromAddresses", 0LL) == kCFCompareEqualTo)
            {
              *(_BYTE *)(*(void *)(a1 + 32) + 45LL) = CFBooleanGetValue((CFBooleanRef)cf) != 0;
            }

            else
            {
              uint64_t v14 = CFGetTypeID(cf);
              if (v14 == CFBooleanGetTypeID()
                && CFStringCompare(a2, @"inferDyldFlagFromFilename", 0LL) == kCFCompareEqualTo)
              {
                *(_BYTE *)(*(void *)(a1 + 32) + 46LL) = CFBooleanGetValue((CFBooleanRef)cf) != 0;
              }

              else
              {
                int v15 = CFGetTypeID(cf);
                if (v15 == CFStringGetTypeID()
                  && CFStringCompare(a2, @"kernelTextSegmentName", 0LL) == kCFCompareEqualTo)
                {
                  uint64_t v17 = (char *)(*(void *)(a1 + 32) + 28LL);
                  uint64_t v18 = utf8(cf);
                  strlcpy(v17, v18, 0x11uLL);
                }

                else if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
                {
                  __ktrace_dsym_search_configuration_create_with_plist_block_invoke_cold_1(a2);
                }
              }
            }
          }
        }
      }
    }
  }

                  uint64_t v17 = (int *)((char *)v17 + v19);
                  if (v16 == ++v18) {
                    break;
                  }
                  continue;
                default:
                  flatbuffers::IterateObject();
              }

              break;
            }
          }

          int v5 = (*(uint64_t (**)(uint64_t))(*(void *)a3 + 144LL))(a3);
          size_t v7 = v24;
        }

        else
        {
          int v5 = flatbuffers::IterateValue(v9 & 0xF, v13, v10, v6, 0xFFFFFFFF, a3);
        }
      }

      ++v8;
      char v6 = (unsigned int *)v13;
    }

    while (v8 < *(void *)(a2 + 8));
  }

  return (*(uint64_t (**)(uint64_t))(*(void *)a3 + 8LL))(a3);
}

    uint64_t v12 = (v21 - 1) & v21;
    int v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 4 * v15;
    uint64_t v17 = *(void *)(v2 + 48) + v16;
    uint64_t v18 = *(_WORD *)v17;
    LOBYTE(v17) = *(_BYTE *)(v17 + 2);
    unint64_t v19 = *(void *)(v4 + 48) + v16;
    *(_WORD *)unint64_t v19 = v18;
    *(_BYTE *)(v19 + 2) = v17;
  }

  int v22 = v20 + 3;
  if (v22 >= v13) {
    goto LABEL_28;
  }
  int v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    unsigned int v9 = v22;
    goto LABEL_27;
  }

  while (1)
  {
    unsigned int v9 = v22 + 1;
    if (__OFADD__(v22, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    int v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_27;
    }
  }

    uint64_t v12 = (v19 - 1) & v19;
    int v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = *(void **)(*(void *)(v2 + 48) + v16);
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    uint64_t result = v17;
  }

  int v20 = v18 + 3;
  if (v20 >= v13) {
    goto LABEL_28;
  }
  unint64_t v19 = *(void *)(v6 + 8 * v20);
  if (v19)
  {
    unsigned int v9 = v20;
    goto LABEL_27;
  }

  while (1)
  {
    unsigned int v9 = v20 + 1;
    if (__OFADD__(v20, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v9);
    ++v20;
    if (v19) {
      goto LABEL_27;
    }
  }

    uint64_t v12 = (v21 - 1) & v21;
    int v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (void *)(*(void *)(v2 + 48) + v16);
    uint64_t v18 = v17[1];
    unint64_t v19 = (void *)(*(void *)(v4 + 48) + v16);
    *unint64_t v19 = *v17;
    v19[1] = v18;
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }

  int v22 = v20 + 3;
  if (v22 >= v13) {
    goto LABEL_28;
  }
  int v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    unsigned int v9 = v22;
    goto LABEL_27;
  }

  while (1)
  {
    unsigned int v9 = v22 + 1;
    if (__OFADD__(v22, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    int v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_27;
    }
  }

    uint64_t v12 = (v17 - 1) & v17;
    int v15 = __clz(__rbit64(v17)) + (v9 << 6);
LABEL_12:
    *(_BYTE *)(*(void *)(v4 + 48) + v15) = *(_BYTE *)(*(void *)(v2 + 48) + v15);
  }

  uint64_t v18 = v16 + 3;
  if (v18 >= v13) {
    goto LABEL_28;
  }
  uint64_t v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    unsigned int v9 = v18;
    goto LABEL_27;
  }

  while (1)
  {
    unsigned int v9 = v18 + 1;
    if (__OFADD__(v18, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    uint64_t v17 = *(void *)(v6 + 8 * v9);
    ++v18;
    if (v17) {
      goto LABEL_27;
    }
  }

    uint64_t v12 = (v19 - 1) & v19;
    int v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 328 * v15;
    uint64_t v17 = (const void *)(*(void *)(v2 + 48) + 328 * v15);
    memcpy(v21, v17, 0x141uLL);
    memmove((void *)(*(void *)(v4 + 48) + v16), v17, 0x141uLL);
    uint64_t result = (void *)sub_186C23978((uint64_t)v21);
  }

  int v20 = v18 + 3;
  if (v20 >= v13) {
    goto LABEL_28;
  }
  unint64_t v19 = *(void *)(v6 + 8 * v20);
  if (v19)
  {
    unsigned int v9 = v20;
    goto LABEL_27;
  }

  while (1)
  {
    unsigned int v9 = v20 + 1;
    if (__OFADD__(v20, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v9);
    ++v20;
    if (v19) {
      goto LABEL_27;
    }
  }

  uint64_t v49 = 0LL;
  uint64_t v50 = 0xE000000000000000LL;
  sub_186C5B260();
  sub_186C5ADD4();
  sub_186C5B2FC();
  sub_186C5ADD4();
  sub_186C5B35C();
  __break(1u);
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

    if (v23 <= v12 >> 16) {
      goto LABEL_35;
    }
    uint64_t v12 = sub_186C5AE04();
LABEL_29:
    *(_BYTE *)(a2 + v1ktrace_session_set_default_event_names_enabled(global_session, 1) = v19;
    if (v26 == v11)
    {
      uint64_t v11 = a3;
      goto LABEL_33;
    }

    ++v11;
    if (v10 == v12 >> 14) {
      goto LABEL_33;
    }
  }

  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
  return result;
}

    uint64_t v12 = (v21 - 1) & v21;
    int v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = *(void *)(v2 + 48) + v16;
    uint64_t v18 = *(_DWORD *)v17;
    LOWORD(v17) = *(_WORD *)(v17 + 4);
    unint64_t v19 = *(void *)(v4 + 48) + v16;
    *(_DWORD *)unint64_t v19 = v18;
    *(_WORD *)(v19 + 4) = v17;
  }

  int v22 = v20 + 3;
  if (v22 >= v13) {
    goto LABEL_28;
  }
  int v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    unsigned int v9 = v22;
    goto LABEL_27;
  }

  while (1)
  {
    unsigned int v9 = v22 + 1;
    if (__OFADD__(v22, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    int v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_27;
    }
  }

uint64_t ktrace_end_on_event_match(uint64_t a1, __int128 *a2, __int128 *a3)
{
  __int128 v3 = *a2;
  __int128 v4 = a2[1];
  *(void *)(a1 + 760) = *((void *)a2 + 4);
  *(_OWORD *)(a1 + 72_Block_object_dispose(va, 8) = v3;
  *(_OWORD *)(a1 + 744) = v4;
  __int128 v6 = *a3;
  __int128 v5 = a3[1];
  *(void *)(a1 + 800) = *((void *)a3 + 4);
  *(_OWORD *)(a1 + 76_Block_object_dispose(va, 8) = v6;
  *(_OWORD *)(a1 + 784) = v5;
  *(_BYTE *)(a1 + 828) |= 2u;
  return 0LL;
}

uint64_t ktrace_end_on_dropped_events(uint64_t a1)
{
  *(_BYTE *)(a1 + 828) |= 4u;
  return 0LL;
}

uint64_t ktrace_end_on_event_count(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 720) = a2;
  return 0LL;
}

void ktrace_iterate_threads(uint64_t a1, uint64_t a2)
{
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  kthmap_iterate_threads(*(void *)(a1 + 296), a2);
}

uint64_t ktrace_set_execnames_enabled(uint64_t result, int a2)
{
  if (!result) {
    ktrace_remotetime_update_params_cold_1();
  }
  if ((*(_WORD *)(result + 224) & 3) != 0) {
    ktrace_set_remotetime_conversion_enabled_cold_2();
  }
  if (!a2)
  {
    if (*(_DWORD *)(result + 560) || *(_DWORD *)(result + 576)) {
      a2 = 2;
    }
    else {
      a2 = 0;
    }
  }

  *(_DWORD *)(result + 260) = a2;
  return result;
}

uint64_t ktrace_get_execnames_enabled(uint64_t a1)
{
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  return *(unsigned int *)(a1 + 260);
}

uint64_t ktrace_get_execname_for_thread(uint64_t a1, const void *a2)
{
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  return kthmap_process_name_for_tid(*(void *)(a1 + 296), a2);
}

uint64_t ktrace_get_execname_for_pid(uint64_t a1, int a2)
{
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  return kthmap_name_for_pid(*(void *)(a1 + 296), a2);
}

uint64_t ktrace_get_pid_for_thread(uint64_t a1, const void *a2)
{
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  return kthmap_pid_for_tid(*(void *)(a1 + 296), a2);
}

uint64_t ktrace_get_task_uniqueid_for_thread(uint64_t a1, const void *a2)
{
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  return kthmap_uniqueid_for_tid(*(void *)(a1 + 296), a2);
}

const void *ktrace_get_name_for_thread(uint64_t a1, const void *a2)
{
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  return kthmap_thread_name_for_tid(*(void *)(a1 + 296), a2);
}

uint64_t ktrace_get_name_for_cpu(uint64_t a1, unsigned int a2)
{
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  uint64_t result = *(void *)(a1 + 352);
  if (result) {
    return ktrace_cpus_get_cpu_name(result, a2);
  }
  return result;
}

uint64_t ktrace_get_cpu_is_coproc(uint64_t a1, unsigned int a2)
{
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  uint64_t result = *(void *)(a1 + 352);
  if (result) {
    return ktrace_cpus_get_cpu_is_coproc(result, a2);
  }
  return result;
}

uint64_t ktrace_session_add_codes_file(uint64_t a1, char *a2)
{
  return kteventnames_add_path((CFMutableDictionaryRef *)(a1 + 360), a2);
}

uint64_t ktrace_session_set_default_event_names_enabled(uint64_t a1, int a2)
{
  return kteventnames_use_default(a1 + 360, a2);
}

uint64_t ktrace_session_get_default_event_names_enabled(uint64_t a1)
{
  return kteventnames_using_default(a1 + 360);
}

BOOL ktrace_session_getting_event_names_from_system(uint64_t a1)
{
  return kteventnames_from_system(a1 + 360);
}

uint64_t ktrace_session_set_event_names_enabled(uint64_t result, int a2)
{
  if (!result) {
    ktrace_remotetime_update_params_cold_1();
  }
  *(_DWORD *)(result + 256) = a2;
  if (!a2) {
    return kteventnames_use_default(result + 360, 0);
  }
  return result;
}

uint64_t ktrace_session_get_event_names_enabled(uint64_t a1)
{
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  return *(unsigned int *)(a1 + 256);
}

const void *ktrace_name_for_eventid(uint64_t a1, void *a2)
{
  if (*(_DWORD *)(a1 + 256)) {
    return kteventnames_name_from_id(a1 + 360, a2);
  }
  else {
    return 0LL;
  }
}

const void *ktrace_eventid_for_name(uint64_t a1, const void *a2)
{
  if (*(_DWORD *)(a1 + 256)) {
    return kteventnames_id_from_name(a1 + 360, a2);
  }
  else {
    return 0LL;
  }
}

uint64_t ktrace_set_uuid_map_enabled(uint64_t result, int a2)
{
  if (!result) {
    ktrace_remotetime_update_params_cold_1();
  }
  if ((*(_WORD *)(result + 224) & 3) != 0) {
    ktrace_set_thread_cputime_enabled_cold_4();
  }
  if (a2 == 2) {
    ktrace_remotetime_update_params_cold_1();
  }
  *(_DWORD *)(result + 284) = a2;
  return result;
}

uint64_t ktrace_get_uuid_map_enabled(uint64_t a1)
{
  return *(unsigned int *)(a1 + 284);
}

uint64_t ktrace_get_jetsam_coalitions_enabled(uint64_t a1)
{
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  return *(unsigned int *)(a1 + 276);
}

uint64_t ktrace_dump_address_space(uint64_t a1, unint64_t a2, FILE *a3)
{
  return ktrace_uuid_map_dump_address_space(*(ktrace_uuid_map **)(a1 + 304), a2, a3);
}

uint64_t ktrace_dump_address_space_pid(uint64_t a1, int a2, FILE *a3)
{
  return ktrace_uuid_map_dump_address_space_pid(*(ktrace_uuid_map **)(a1 + 304), a2, a3);
}

uint64_t ktrace_get_thread_group_flags(uint64_t a1, const void *a2, uint64_t *a3)
{
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  return kthmap_flags_for_thread_group(*(void *)(a1 + 296), a2, a3);
}

uint64_t ktrace_set_dsc_unslid_base_addresses( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return ktrace_uuid_map_set_dsc_unslid_base_addresses(*(void *)(a1 + 304), a2);
}

uint64_t ktrace_enable_symbolication( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return ktrace_symbolicator_enable_symbolication();
}

void ktrace_get_symbolicator( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = *(void *)(a1 + 312);
  if (!v9)
  {
    ktrace_symbolicator_create();
    *(void *)(a1 + 312) = v9;
    if (!v9) {
      ktrace_remotetime_update_params_cold_1();
    }
  }

  if ((*(_WORD *)(a1 + 224) & 0x10) == 0)
  {
    uint64_t v10 = *(void *)(a1 + 608);
    if (v10)
    {
      ktrace_symbolicator_read_file(v9, v10, a3, a4, a5, a6, a7, a8);
      *(_WORD *)(a1 + 224) |= 0x10u;
    }
  }

double ktrace_get_uuid_offset_for@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  __int128 v5 = *(ktrace_uuid_map **)(a1 + 304);
  if (v5)
  {
    uint64_t v7 = *(void *)(a2 + 16);
    switch(v7)
    {
      case 2LL:
        unint64_t v10 = *(void *)(a2 + 8);
        break;
      case 1LL:
        uint64_t v11 = *(const void **)(a2 + 8);
        uint64_t v12 = kthmap_uniqueid_for_tid(*(void *)(a1 + 296), v11);
        if (v12 == -1)
        {
          int v13 = kthmap_pid_for_tid(*(void *)(a1 + 296), v11);
          if ((v13 & 0x80000000) == 0)
          {
            int v8 = v13;
            __int128 v5 = *(ktrace_uuid_map **)(a1 + 304);
            return ktrace_uuid_map_get_offset_for_pid_address(v5, v8, *(void *)a2, *(_BYTE *)(a2 + 24) & 1, a3);
          }

          goto LABEL_14;
        }

        unint64_t v10 = v12;
        __int128 v5 = *(ktrace_uuid_map **)(a1 + 304);
        break;
      case 0LL:
        int v8 = *(_DWORD *)(a2 + 8);
        return ktrace_uuid_map_get_offset_for_pid_address(v5, v8, *(void *)a2, *(_BYTE *)(a2 + 24) & 1, a3);
      default:
        goto LABEL_14;
    }

    return ktrace_uuid_map_get_offset_for_address(v5, v10, *(void *)a2, *(_BYTE *)(a2 + 24) & 1, a3);
  }

LABEL_14:
  double result = 0.0;
  a3[3] = 0u;
  a3[4] = 0u;
  a3[1] = 0u;
  a3[2] = 0u;
  *a3 = 0u;
  return result;
}

  __break(1u);
  return result;
}

    double result = (void (*)(uint64_t *))sub_186C5B530();
    __break(1u);
    return result;
  }

  uint64_t v18 = *(void (**)(char *, uint64_t))(v3 + 8);
  v18(v8, v2);
  v14(v6, a1, v2);
  if (!v17) {
    uint64_t v15 = sub_186C5B290();
  }
  v18(v6, v2);
  return v15;
}

  int v13 = *v3;
  *(void *)(*v3 + 8 * (a2 >> 6) + 56) |= 1LL << a2;
  uint64_t v14 = *(void *)(v13 + 48) + 8 * a2;
  *(_DWORD *)uint64_t v14 = v5;
  *(_WORD *)(v14 + 4) = v6;
  uint64_t v15 = *(void *)(v13 + 16);
  uint64_t v16 = __OFADD__(v15, 1LL);
  uint64_t v17 = v15 + 1;
  if (v16) {
    __break(1u);
  }
  else {
    *(void *)(v13 + 16) = v17;
  }
  return result;
}

double ktrace_get_uuid_offset_for_task_address@<D0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _OWORD *a4@<X8>)
{
  v5[0] = a3;
  v5[1] = a2;
  int v5[2] = 2LL;
  char v6 = 0;
  return ktrace_get_uuid_offset_for (a1, (uint64_t)v5, a4);
}

double ktrace_get_uuid_offset_for_pid_address@<D0>( uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, _OWORD *a4@<X8>)
{
  v5[0] = a3;
  v5[1] = a2;
  int v5[2] = 0LL;
  char v6 = 0;
  return ktrace_get_uuid_offset_for (a1, (uint64_t)v5, a4);
}

double ktrace_get_uuid_offset_for_thread_address@<D0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _OWORD *a4@<X8>)
{
  v5[0] = a3;
  v5[1] = a2;
  int v5[2] = 1LL;
  char v6 = 0;
  return ktrace_get_uuid_offset_for (a1, (uint64_t)v5, a4);
}

uint64_t ktrace_create_cssymbolicator_for_pid(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  return ktrace_uuid_map_create_cssymbolicator_for_pid(*(ktrace_uuid_map **)(a1 + 304), a2, a3, a4);
}

uint64_t ktrace_create_cssymbolicator_for_task(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  return ktrace_uuid_map_create_cssymbolicator_for_task(*(ktrace_uuid_map **)(a1 + 304), a2, a3, a4);
}

uint64_t ktrace_create_cssymbolicator_for_thread(uint64_t a1, uint64_t a2, uint64_t a3, const void *a4)
{
  unint64_t task_uniqueid_for_thread = ktrace_get_task_uniqueid_for_thread(a1, a4);
  if (task_uniqueid_for_thread != -1LL) {
    return ktrace_uuid_map_create_cssymbolicator_for_task( *(ktrace_uuid_map **)(a1 + 304),  a2,  a3,  task_uniqueid_for_thread);
  }
  int pid_for_thread = ktrace_get_pid_for_thread(a1, a4);
  if (pid_for_thread < 0) {
    return 0LL;
  }
  else {
    return ktrace_uuid_map_create_cssymbolicator_for_pid(*(ktrace_uuid_map **)(a1 + 304), a2, a3, pid_for_thread);
  }
}

UInt8 *ktrace_describe_uuid_offset( uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v21 = *MEMORY[0x1895F89C0];
  if (a1)
  {
    uint64_t v9 = *(void *)(a1 + 304);
    ktrace_get_symbolicator(a1, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
    __int128 v10 = a2[3];
    __int128 v18 = a2[2];
    __int128 v19 = v10;
    __int128 v20 = a2[4];
    __int128 v11 = a2[1];
    __int128 v16 = *a2;
    __int128 v17 = v11;
    return ktrace_symbolicator_get_description(v9, v12, &v16);
  }

  else
  {
    __int128 v14 = a2[3];
    __int128 v18 = a2[2];
    __int128 v19 = v14;
    __int128 v20 = a2[4];
    __int128 v15 = a2[1];
    __int128 v16 = *a2;
    __int128 v17 = v15;
    return ktrace_uuid_offset_get_description(0LL, &v16);
  }

BOOL ktrace_symbolicate_uuid_offset( uint64_t a1, _OWORD *a2, _BYTE *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, uint64_t a7, uint64_t a8)
{
  uint64_t v18 = *MEMORY[0x1895F89C0];
  ktrace_get_symbolicator(a1, (uint64_t)a2, (uint64_t)a3, (uint64_t)a4, (uint64_t)a5, (uint64_t)a6, a7, a8);
  __int128 v13 = a2[3];
  unint64_t v17[2] = a2[2];
  v17[3] = v13;
  _OWORD v17[4] = a2[4];
  __int128 v14 = a2[1];
  v17[0] = *a2;
  v17[1] = v14;
  return ktrace_symbolicator_symbolicate(v15, (uint64_t)v17, a3, a4, a5, a6);
}

BOOL ktrace_plausible_kernel_address(uint64_t a1, unint64_t a2)
{
  return ktrace_uuid_map_plausible_kernel_address(*(void *)(a1 + 304), a2);
}

uint64_t ktrace_set_jetsam_coalitions_enabled(uint64_t result, int a2)
{
  if (!result) {
    ktrace_remotetime_update_params_cold_1();
  }
  if ((*(_WORD *)(result + 224) & 3) != 0) {
    ktrace_set_remotetime_conversion_enabled_cold_2();
  }
  *(_DWORD *)(result + 276) = a2;
  return result;
}

uint64_t ktrace_get_jetsam_coalition_for_thread(uint64_t a1, const void *a2)
{
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  return kthmap_jetsam_coalition_for_tid(*(void *)(a1 + 296), a2);
}

uint64_t ktrace_get_jetsam_coalition_for_pid(uint64_t a1, int a2)
{
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  return kthmap_jetsam_coalition_for_pid(*(void *)(a1 + 296), a2);
}

uint64_t ktrace_set_thread_groups_enabled(uint64_t result, int a2)
{
  if (!result) {
    ktrace_remotetime_update_params_cold_1();
  }
  if ((*(_WORD *)(result + 224) & 3) != 0) {
    ktrace_set_remotetime_conversion_enabled_cold_2();
  }
  *(_DWORD *)(result + 280) = a2;
  return result;
}

uint64_t ktrace_get_thread_groups_enabled(uint64_t a1)
{
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  return *(unsigned int *)(a1 + 280);
}

uint64_t ktrace_get_thread_group_for_thread(uint64_t a1, const void *a2)
{
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  return kthmap_thread_group_for_tid(*(void *)(a1 + 296), a2);
}

char *ktrace_get_thread_group_name(uint64_t a1, const void *a2)
{
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  return kthmap_name_for_thread_group(*(void *)(a1 + 296), a2);
}

uint64_t ktrace::RingBufferImpl::handleTracepoint(uint64_t result, uint64_t a2)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  if (*(void *)a2 >= *(void *)(result + 72))
  {
    uint64_t v3 = result;
    ktrace::RingBufferImpl::handlerSupportCheckTimeTruncation((int *)result, a2);
    double result = (uint64_t)ktrace::RingBufferImpl::handlerSupportCheckTimeBackwards((int *)v3, a2);
    unsigned int v4 = *(_DWORD *)(v3 + 56);
    uint64_t v5 = *(void *)(v3 + 48) + 48LL * v4;
    uint64_t v6 = *(void *)a2;
    *(void *)uint64_t v5 = *(void *)a2 & 0xFFFFFFFFFFFFFFLL | ((unint64_t)*(_DWORD *)(a2 + 52) << 56);
    int v7 = *(_DWORD *)(a2 + 48);
    *(_DWORD *)(v5 + _Block_object_dispose(va, 8) = v7;
    *(_DWORD *)(v5 + 12) = *(void *)(a2 + 40);
    *(_OWORD *)(v5 + 16) = *(_OWORD *)(a2 + 8);
    *(_OWORD *)(v5 + 32) = *(_OWORD *)(a2 + 24);
    *(_DWORD *)(v3 + 56) = v4 + 1;
    *(void *)(v3 + 80) = v6;
    if (v7 == 117571592) {
      *(_BYTE *)(*(void *)(v3 + 32) + 16LL) = 1;
    }
    if (v4 + 1 == *(_DWORD *)(v3 + 40))
    {
      uint64_t v8 = *(void *)(v3 + 24);
      if (v8 != *(void *)(v3 + 32))
      {
        uint64_t v9 = 0LL;
        __int128 v10 = (FILE **)MEMORY[0x1895F89D0];
        while (*(void *)(v3 + 80) - *(void *)(v8 + 8) >= *(void *)v3)
        {
          *(void *)(v3 + 24) = *(void *)v8;
          if (v9)
          {
            double result = ktrace::MemoryPool<ktrace::RingBufferHeader>::freeToMemoryPool(*(void *)(v3 + 112), (void *)v8);
            uint64_t v8 = v9;
          }

          else
          {
            *(_BYTE *)(v8 + 16) = 0;
            if (!*(_BYTE *)(v3 + 16))
            {
              fwrite( "WARNING: The ring buffer size now covers the full requested ring buffer time.\n",  0x4EuLL,  1uLL,  *v10);
              int v11 = *__error();
              ktrace_log_init();
              uint64_t v12 = (os_log_s *)ktrace_log;
              if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)__int128 buf = 67109120;
                int v18 = v11;
                _os_log_error_impl( &dword_186BA3000,  v12,  OS_LOG_TYPE_ERROR,  "WARNING: The ring buffer size now covers the full requested ring buffer time. (%{errno}d)",  buf,  8u);
              }

              double result = (uint64_t)__error();
              *(_DWORD *)double result = v11;
              *(_BYTE *)(v3 + 16) = 1;
            }
          }

          uint64_t v9 = v8;
          uint64_t v8 = *(void *)(v3 + 24);
          if (v8 == *(void *)(v3 + 32)) {
            goto LABEL_25;
          }
        }

        if (v9) {
          goto LABEL_25;
        }
      }

      double result = (uint64_t)ktrace::MemoryPool<ktrace::RingBufferHeader>::allocateFromMemoryPool(*(void *)(v3 + 112));
      if (result)
      {
        uint64_t v9 = result;
        __int128 v13 = (_BYTE *)(result + 16);
      }

      else
      {
        uint64_t v9 = *(void *)(v3 + 24);
        if (v9 == *(void *)(v3 + 32)) {
          ktrace::RingBufferImpl::handleTracepoint();
        }
        __int128 v13 = (_BYTE *)(v3 + 16);
        int v14 = *(unsigned __int8 *)(v3 + 16);
        *(void *)(v3 + 24) = *(void *)v9;
        *(_BYTE *)(v9 + 16) = 0;
        if (!v14) {
          goto LABEL_25;
        }
        fwrite( "WARNING: The maximum ring buffer size has been reached. The trace will not be able to cover the full requested ring buffer time.\n",  0x81uLL,  1uLL,  (FILE *)*MEMORY[0x1895F89D0]);
        int v15 = *__error();
        ktrace_log_init();
        if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
          ktrace::RingBufferImpl::handleTracepoint();
        }
        double result = (uint64_t)__error();
        *(_DWORD *)double result = v15;
      }

      *__int128 v13 = 0;
LABEL_25:
      __int128 v16 = *(uint64_t **)(v3 + 32);
      *__int128 v16 = v9;
      v16[1] = *(void *)(v3 + 80);
      *(void *)uint64_t v9 = 0LL;
      *(void *)(v3 + 32) = v9;
      *(void *)(v3 + 4_Block_object_dispose(va, 8) = v9 + 24;
      *(_DWORD *)(v3 + 56) = 0;
    }
  }

  return result;
}

int *ktrace::RingBufferImpl::handlerSupportCheckTimeTruncation(int *result, uint64_t a2)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  if (*(_BYTE *)(a2 + 7))
  {
    uint64_t v3 = result;
    int v4 = result[23];
    if (!v4)
    {
      fwrite( "ERROR: Timestamp size exceeded. Trace file will probably be corrupted and unreadable. You can fix this by rebooting.\n",  0x75uLL,  1uLL,  (FILE *)*MEMORY[0x1895F89D0]);
      int v5 = *__error();
      ktrace_log_init();
      if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
        ktrace::RingBufferImpl::handlerSupportCheckTimeTruncation();
      }
      double result = __error();
      void *result = v5;
      *((_BYTE *)v3 + 96) = 1;
      int v4 = v3[23];
    }

    v3[23] = v4 + 1;
  }

  unint64_t v6 = *(void *)(a2 + 40);
  if (HIDWORD(v6))
  {
    fprintf( (FILE *)*MEMORY[0x1895F89D0],  "WARNING: Thread id size exceeded for debugid: 0x%08x cpuid: %-2u tid: 0x%llx\n",  *(_DWORD *)(a2 + 48),  *(_DWORD *)(a2 + 52),  v6);
    int v7 = *__error();
    ktrace_log_init();
    uint64_t v8 = (os_log_s *)ktrace_log;
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
    {
      int v9 = *(_DWORD *)(a2 + 48);
      int v10 = *(_DWORD *)(a2 + 52);
      uint64_t v11 = *(void *)(a2 + 40);
      *(_DWORD *)__int128 buf = 67109888;
      int v13 = v9;
      __int16 v14 = 1024;
      int v15 = v10;
      __int16 v16 = 2048;
      uint64_t v17 = v11;
      __int16 v18 = 1024;
      int v19 = v7;
      _os_log_error_impl( &dword_186BA3000,  v8,  OS_LOG_TYPE_ERROR,  "WARNING: Thread id size exceeded for debugid: 0x%08x cpuid: %-2u tid: 0x%llx (%{errno}d)",  buf,  0x1Eu);
    }

    double result = __error();
    void *result = v7;
  }

  return result;
}

int *ktrace::RingBufferImpl::handlerSupportCheckTimeBackwards(int *result, uint64_t a2)
{
  if (*((void *)result + 10) > *(void *)a2)
  {
    unsigned int v2 = result;
    int v3 = result[22];
    if (!v3)
    {
      fprintf( (FILE *)*MEMORY[0x1895F89D0],  "ERROR: Timestamps out of order for class 0x%x. Trace file will probably be corrupted and unreadable. Please file a bug against Purple Ariadne with this trace.\n",  *(unsigned __int8 *)(a2 + 51));
      uint64_t v5 = *__error();
      ktrace_log_init();
      unint64_t v6 = (os_log_s *)ktrace_log;
      if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
        ktrace::RingBufferImpl::handlerSupportCheckTimeBackwards(a2 + 48, v5, v6);
      }
      double result = __error();
      void *result = v5;
      *((_BYTE *)v2 + 96) = 1;
      int v3 = v2[22];
    }

    v2[22] = v3 + 1;
  }

  return result;
}

uint64_t ktrace::MemoryPool<ktrace::RingBufferHeader>::freeToMemoryPool(uint64_t a1, void *a2)
{
  int v4 = (pthread_mutex_t *)(a1 + 48);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 48));
  *a2 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = a2;
  ++*(_DWORD *)(a1 + 8);
  ktrace::MemoryPool<ktrace::RingBufferHeader>::checkPinnedThresholds(a1);
  return pthread_mutex_unlock(v4);
}

void *ktrace::MemoryPool<ktrace::RingBufferHeader>::allocateFromMemoryPool(uint64_t a1)
{
  unsigned int v2 = (pthread_mutex_t *)(a1 + 48);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 48));
  int v3 = *(void **)(a1 + 16);
  if (v3)
  {
    *(void *)(a1 + 16) = *v3;
    --*(_DWORD *)(a1 + 8);
    ktrace::MemoryPool<ktrace::RingBufferHeader>::checkPinnedThresholds(a1);
  }

  pthread_mutex_unlock(v2);
  return v3;
}

int *ktrace::RingBufferImpl::handleCompletion(ktrace::RingBufferImpl *this, ktrace_file *a2)
{
  uint64_t v26 = *MEMORY[0x1895F89C0];
  int v4 = (uint64_t *)*((void *)this + 3);
  int appended = ktrace_file_append_start((uint64_t)a2, 20982, 0, 0);
  if (appended)
  {
    uint64_t v6 = (uint64_t)appended;
    if (v4 != *((uint64_t **)this + 4))
    {
      int v7 = (FILE **)MEMORY[0x1895F89D0];
      do
      {
        if (*((_BYTE *)v4 + 16))
        {
          int v8 = *((_DWORD *)this + 25);
          if (!v8)
          {
            fwrite( "ERROR: The trace buffer has lost samples. This is currently not supported by the UI. Run with --help-dropp ed-events for additional help.\n",  0x89uLL,  1uLL,  *v7);
            int v9 = *__error();
            ktrace_log_init();
            int v10 = (os_log_s *)ktrace_log;
            if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)__int128 buf = 67109120;
              LODWORD(v23) = v9;
              _os_log_error_impl( &dword_186BA3000,  v10,  OS_LOG_TYPE_ERROR,  "ERROR: The trace buffer has lost samples. This is currently not supported by the UI. Run with --help-dro pped-events for additional help. (%{errno}d)",  buf,  8u);
            }

            *__error() = v9;
            int v8 = *((_DWORD *)this + 25);
          }

          *((_DWORD *)this + 25) = v8 + 1;
          *((_BYTE *)this + 96) = 1;
        }

        unint64_t v11 = 48LL * *((int *)this + 10);
        if (ktrace_file_append_data((uint64_t)a2, v6, (UInt8 *)v4 + 24, v11))
        {
          unint64_t v12 = v11 / 0x30;
          fprintf(*v7, "ERROR: Failed to write %ld kdebug events into chunk in output file\n", v11 / 0x30);
          int v13 = *__error();
          ktrace_log_init();
          __int16 v14 = (os_log_s *)ktrace_log;
          if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)__int128 buf = 134218240;
            unint64_t v23 = v12;
            __int16 v24 = 1024;
            int v25 = v13;
            _os_log_error_impl( &dword_186BA3000,  v14,  OS_LOG_TYPE_ERROR,  "ERROR: Failed to write %ld kdebug events into chunk in output file (%{errno}d)",  buf,  0x12u);
          }

          *__error() = v13;
        }

        int v4 = (uint64_t *)*v4;
      }

      while (v4 != *((uint64_t **)this + 4));
    }

    if (*((_BYTE *)v4 + 16))
    {
      int v15 = *((_DWORD *)this + 25);
      if (!v15)
      {
        fwrite( "ERROR: The trace buffer has lost samples. This is currently not supported by the UI. Run with --help-dropped-e vents for additional help.\n",  0x89uLL,  1uLL,  (FILE *)*MEMORY[0x1895F89D0]);
        int v16 = *__error();
        ktrace_log_init();
        if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
          ktrace::RingBufferImpl::handleCompletion();
        }
        *__error() = v16;
        int v15 = *((_DWORD *)this + 25);
        int v4 = (uint64_t *)*((void *)this + 4);
      }

      *((_DWORD *)this + 25) = v15 + 1;
      *((_BYTE *)this + 96) = 1;
    }

    uint64_t v17 = *((unsigned int *)this + 14);
    if (ktrace_file_append_data((uint64_t)a2, v6, (UInt8 *)v4 + 24, 48 * v17))
    {
      fprintf((FILE *)*MEMORY[0x1895F89D0], "ERROR: Failed to write %ld kdebug events into chunk in output file\n", v17);
      int v18 = *__error();
      ktrace_log_init();
      int v19 = (os_log_s *)ktrace_log;
      if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
        ktrace::RingBufferImpl::handleCompletion(v17, v18, v19);
      }
      *__error() = v18;
    }

    return (int *)ktrace_file_append_finish((uint64_t)a2, v6);
  }

  else
  {
    fwrite("ERROR: Failed to create kdebug events chunk in output file\n", 0x3BuLL, 1uLL, (FILE *)*MEMORY[0x1895F89D0]);
    int v21 = *__error();
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
      ktrace::RingBufferImpl::handleCompletion();
    }
    double result = __error();
    int *result = v21;
  }

  return result;
}

ktrace::RingBufferImpl *ktrace::RingBufferImpl::RingBufferImpl(ktrace::RingBufferImpl *this, uint64_t a2)
{
  *(void *)this = 0LL;
  *((void *)this + ktrace_session_set_default_event_names_enabled(global_session, 1) = 0LL;
  *((_BYTE *)this + 16) = 1;
  *((_DWORD *)this + 10) = 50000;
  *((void *)this + 6) = 0LL;
  *((_DWORD *)this + 14) = 0;
  *((_DWORD *)this + 25) = 0;
  *((_DWORD *)this + 26) = 0;
  *((void *)this + 14) = 0LL;
  int v4 = (uint64_t *)((char *)this + 112);
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_BYTE *)this + 96) = 0;
  unint64_t v17 = 0LL;
  size_t v18 = 8LL;
  if (sysctlbyname("hw.memsize", &v17, &v18, 0LL, 0LL))
  {
    __error();
    perror("ERROR: Couldn't get total memory size");
    int v13 = *__error();
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
      ktrace::RingBufferImpl::RingBufferImpl();
    }
    *__error() = v13;
    exit(1);
  }

  unint64_t v5 = v17 >> 20;
  unsigned int v6 = *((_DWORD *)this + 3);
  if (!v6)
  {
    unsigned int v6 = (int)v5 >> 3;
    *((_DWORD *)this + 3) = (int)v5 >> 3;
  }

  unsigned int v7 = 3 * (int)v5 / 4;
  if (v7 < v6) {
    unsigned int v6 = v7;
  }
  if (v6 >= 0xFF8) {
    unsigned int v6 = 4088;
  }
  if (v6 <= 2) {
    unsigned int v6 = 2;
  }
  *((_DWORD *)this + 2) = v6;
  mach_timebase_info(&info);
  *(void *)this = (unint64_t)info.denom * a2 / info.numer;
  ktrace::MemoryPool<ktrace::RingBufferHeader>::create(0x100000, *((_DWORD *)this + 2), &__p);
  int v8 = __p;
  __p = 0LL;
  int v9 = (void *)*v4;
  uint64_t *v4 = (uint64_t)v8;
  if (v9)
  {
    std::default_delete<ktrace::MemoryPool<ktrace::RingBufferHeader>>::operator()[abi:ne180100]((int)v4, v9);
    int v10 = __p;
    __p = 0LL;
    if (v10) {
      std::default_delete<ktrace::MemoryPool<ktrace::RingBufferHeader>>::operator()[abi:ne180100]((int)&__p, v10);
    }
  }

  unint64_t v11 = ktrace::MemoryPool<ktrace::RingBufferHeader>::allocateFromMemoryPool(*v4);
  *((void *)this + 3) = v11;
  *((void *)this + 4) = v11;
  if (!v11)
  {
    fwrite("ERROR: Couldn't allocate ring buffer.\n", 0x26uLL, 1uLL, (FILE *)*MEMORY[0x1895F89D0]);
    int v14 = *__error();
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
      ktrace::RingBufferImpl::RingBufferImpl();
    }
    *__error() = v14;
    exit(1);
  }

  *((_BYTE *)v11 + 16) = 0;
  *unint64_t v11 = 0LL;
  *((_DWORD *)this + 10) = 21844;
  *((void *)this + 6) = v11 + 3;
  return this;
}

void sub_186BC365C(_Unwind_Exception *exception_object)
{
  int v3 = *v1;
  *unint64_t v1 = 0LL;
  if (v3) {
    std::default_delete<ktrace::MemoryPool<ktrace::RingBufferHeader>>::operator()[abi:ne180100]((int)v1, v3);
  }
  _Unwind_Resume(exception_object);
}

void ktrace::MemoryPool<ktrace::RingBufferHeader>::create(int a1@<W0>, int a2@<W1>, void *a3@<X8>)
{
  unsigned int v6 = operator new(0x80uLL);
  *(_OWORD *)(v6 + 26) = 0u;
  *(_OWORD *)(v6 + 2) = 0u;
  *(_OWORD *)(v6 + 6) = 0u;
  *(_OWORD *)(v6 + 10) = 0u;
  *(_OWORD *)(v6 + 14) = 0u;
  *(_OWORD *)(v6 + 1_Block_object_dispose(va, 8) = 0u;
  *(_OWORD *)(v6 + 22) = 0u;
  *((void *)v6 + 15) = 0LL;
  *((_BYTE *)v6 + 112) = 1;
  __p = v6;
  _DWORD *v6 = a1;
  v6[1] = a2;
  dispatch_queue_global_t global_queue = dispatch_get_global_queue(21LL, 0LL);
  *((void *)v6 + 15) = dispatch_queue_create_with_target_V2( "com.apple.ktrace.memorypool.reaper_queue",  0LL,  global_queue);
  pthread_mutex_init((pthread_mutex_t *)(v6 + 12), 0LL);
  int v8 = __p;
  *((_DWORD *)__p + 2) = 0;
  int v9 = a2 / 10;
  *((void *)v8 + 2) = 0LL;
  *((void *)v8 + 3) = 0LL;
  int v10 = 0x800000 / a1 + a2 / 10;
  if (v10 >= a2) {
    int v10 = a2;
  }
  *((_DWORD *)v8 + _Block_object_dispose(va, 8) = v9;
  *((_DWORD *)v8 + 9) = v10;
  *((void *)v8 + 5) = 0LL;
  if (a2 < 1)
  {
    int v12 = 0;
LABEL_8:
    BOOL v13 = __OFADD__(v10, v9);
    int v14 = v10 + v9;
    if (v14 < 0 != v13) {
      ++v14;
    }
    if (v12 < v14 >> 1)
    {
      int v15 = v14 >> 1;
      int v16 = (void *)*((void *)v8 + 2);
      do
      {
        unint64_t v17 = (void *)*((void *)v8 + 3);
        *((void *)v8 + 3) = *v17;
        *unint64_t v17 = v16;
        int v8 = __p;
        *((void *)__p + 2) = v17;
        int v18 = *((_DWORD *)v8 + 2) + 1;
        *((_DWORD *)v8 + 2) = v18;
        int v16 = v17;
      }

      while (v18 < v15);
    }

    *a3 = v8;
  }

  else
  {
    while (1)
    {
      unint64_t v11 = mmap(0LL, a1, 3, 4098, -1, 0LL);
      if (v11 == (void *)-1LL) {
        break;
      }
      *unint64_t v11 = *((void *)__p + 3);
      int v8 = __p;
      *((void *)__p + 3) = v11;
      if (!--a2)
      {
        int v9 = *((_DWORD *)v8 + 8);
        int v10 = *((_DWORD *)v8 + 9);
        int v12 = *((_DWORD *)v8 + 2);
        goto LABEL_8;
      }
    }

    *a3 = 0LL;
    int v19 = __p;
    __p = 0LL;
    if (v19) {
      std::default_delete<ktrace::MemoryPool<ktrace::RingBufferHeader>>::operator()[abi:ne180100]((int)&__p, v19);
    }
  }

void sub_186BC3838( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  unint64_t v11 = __p;
  __p = 0LL;
  if (v11) {
    std::default_delete<ktrace::MemoryPool<ktrace::RingBufferHeader>>::operator()[abi:ne180100]((int)&__p, v11);
  }
  _Unwind_Resume(exception_object);
}

ktrace_time_ringbuffer *ktrace_time_ringbuffer_create(uint64_t a1)
{
  unsigned int v2 = (ktrace_time_ringbuffer *)operator new(0x10uLL);
  ktrace_time_ringbuffer::ktrace_time_ringbuffer(v2, a1);
  return v2;
}

void sub_186BC3894(_Unwind_Exception *a1)
{
}

uint64_t ktrace_time_ringbuffer_null()
{
  return 0LL;
}

void ktrace_time_ringbuffer_destroy(void *a1)
{
  if (a1)
  {
    unsigned int v2 = (void *)*a1;
    *a1 = 0LL;
    if (v2) {
      std::default_delete<ktrace::RingBufferImpl>::operator()[abi:ne180100]((int)a1, v2);
    }
    operator delete(a1);
  }

uint64_t ktrace_time_ringbuffer_tracing_started(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    double result = mach_absolute_time();
    *(void *)(*(void *)v1 + 72LL) = result;
  }

  return result;
}

uint64_t *ktrace_time_ringbuffer_handle_tracepoint(uint64_t *result, uint64_t a2)
{
  if (result)
  {
    if (a2) {
      return (uint64_t *)ktrace::RingBufferImpl::handleTracepoint(*result, a2);
    }
  }

  return result;
}

int *ktrace_time_ringbuffer_tracing_stopped(int *result, ktrace_file *a2)
{
  if (result) {
    return ktrace::RingBufferImpl::handleCompletion(*(ktrace::RingBufferImpl **)result, a2);
  }
  return result;
}

void ktrace_time_ringbuffer::ktrace_time_ringbuffer(ktrace_time_ringbuffer *this, uint64_t a2)
{
  *(void *)this = 0LL;
  int v4 = (ktrace::RingBufferImpl *)operator new(0x78uLL);
  ktrace::RingBufferImpl::RingBufferImpl(v4, a2);
  unint64_t v5 = *(void **)this;
  *(void *)this = v4;
  if (v5) {
    std::default_delete<ktrace::RingBufferImpl>::operator()[abi:ne180100]((int)this, v5);
  }
}

void sub_186BC3994(_Unwind_Exception *a1)
{
  int v4 = *v1;
  *uint64_t v1 = 0LL;
  if (v4) {
    std::default_delete<ktrace::RingBufferImpl>::operator()[abi:ne180100]((int)v1, v4);
  }
  _Unwind_Resume(a1);
}

void std::default_delete<ktrace::RingBufferImpl>::operator()[abi:ne180100](int a1, void *__p)
{
  if (__p)
  {
    int v3 = __p + 14;
    int v4 = (void *)__p[14];
    *int v3 = 0LL;
    if (v4) {
      std::default_delete<ktrace::MemoryPool<ktrace::RingBufferHeader>>::operator()[abi:ne180100]((int)v3, v4);
    }
    operator delete(__p);
  }

void ktrace::MemoryPool<ktrace::RingBufferHeader>::checkPinnedThresholds(uint64_t a1)
{
  if (!*(_DWORD *)(a1 + 44))
  {
    if ((int v1 = *(_DWORD *)(a1 + 8), v1 < *(_DWORD *)(a1 + 32)) && *(void *)(a1 + 24) || *(_DWORD *)(a1 + 36) < v1)
    {
      unsigned int v2 = *(dispatch_queue_s **)(a1 + 120);
      if (v2)
      {
        block[0] = MEMORY[0x1895F87A8];
        block[1] = 0x40000000LL;
        block[2] = ___ZN6ktrace10MemoryPoolINS_16RingBufferHeaderEE21checkPinnedThresholdsEv_block_invoke;
        block[3] = &__block_descriptor_tmp_7;
        block[4] = a1;
        dispatch_async(v2, block);
      }
    }
  }

uint64_t ___ZN6ktrace10MemoryPoolINS_16RingBufferHeaderEE21checkPinnedThresholdsEv_block_invoke(uint64_t a1)
{
  return ktrace::MemoryPool<ktrace::RingBufferHeader>::reapMemory(*(int **)(a1 + 32));
}

uint64_t ktrace::MemoryPool<ktrace::RingBufferHeader>::reapMemory(int *a1)
{
  unsigned int v2 = (pthread_mutex_t *)(a1 + 12);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 12));
  int v3 = a1[2];
  int v5 = a1[8];
  int v4 = a1[9];
  if (v3 >= v5)
  {
    if (v4 >= v3) {
      return pthread_mutex_unlock(v2);
    }
    BOOL v6 = __OFADD__(v4, v5);
    int v10 = v4 + v5;
    if (v10 < 0 != v6) {
      ++v10;
    }
    int v8 = v3 - (v10 >> 1);
    int v9 = a1 + 4;
  }

  else
  {
    BOOL v6 = __OFADD__(v4, v5);
    int v7 = v4 + v5;
    if (v7 < 0 != v6) {
      ++v7;
    }
    int v8 = (v7 >> 1) - v3;
    int v9 = a1 + 6;
  }

  unint64_t v11 = (void *)*v9;
  if (*v9)
  {
    if (v8 < 1) {
      ktrace::MemoryPool<ktrace::RingBufferHeader>::reapMemory();
    }
    int v12 = 1;
    BOOL v13 = (void *)*v9;
    if (v8 != 1)
    {
      while (1)
      {
        int v14 = (void *)*v13;
        if (!*v13) {
          break;
        }
        ++v12;
        BOOL v13 = (void *)*v13;
        if (v8 == v12)
        {
          BOOL v13 = v14;
          int v12 = v8;
          break;
        }
      }
    }

    int v15 = (void *)*v13;
    if (v3 >= v5)
    {
      *((void *)a1 + 2) = v15;
      a1[2] = v3 - v12;
    }

    else
    {
      *((void *)a1 + 3) = v15;
    }

    *BOOL v13 = 0LL;
    a1[11] = 1;
    pthread_mutex_unlock(v2);
    int v16 = v11;
    do
    {
      if (v3 >= v5) {
        madvise(v16, *a1, 5);
      }
      int v16 = (void *)*v16;
    }

    while (v16);
    pthread_mutex_lock(v2);
    a1[11] = 0;
    if (v3 >= v5)
    {
      *BOOL v13 = *((void *)a1 + 3);
      *((void *)a1 + 3) = v11;
    }

    else
    {
      *BOOL v13 = *((void *)a1 + 2);
      *((void *)a1 + 2) = v11;
      a1[2] += v12;
    }
  }

  return pthread_mutex_unlock(v2);
}

void std::default_delete<ktrace::MemoryPool<ktrace::RingBufferHeader>>::operator()[abi:ne180100]( int a1, void *__p)
{
  if (__p)
  {
    int v3 = (dispatch_queue_s *)__p[15];
    if (v3) {
      dispatch_sync(v3, &__block_literal_global_5);
    }
    operator delete(__p);
  }

void *ktrace_session_create_with_flags(char a1)
{
  unsigned int v2 = malloc(0x340uLL);
  bzero(v2, 0x340uLL);
  int v3 = kthmap_create();
  v2[37] = v3;
  if (v3)
  {
    kteventnames_init((uint64_t)(v2 + 45));
    int v4 = calloc(0x400uLL, 8uLL);
    v2[30] = v4;
    if (v4)
    {
      memset(&callBacks, 0, sizeof(callBacks));
      v2[69] = CFSetCreateMutable(0LL, 0LL, &callBacks);
      v2[73] = CFSetCreateMutable(0LL, 0LL, &callBacks);
      CFSetCallBacks v9 = *(CFSetCallBacks *)byte_189F55BD8;
      v2[71] = CFSetCreateMutable(0LL, 0LL, &v9);
      *((_WORD *)v2 + 112) &= 0xFFFCu;
      v2[38] = 0LL;
      v2[63] = -1LL;
      v2[102] = dispatch_group_create();
      *((_DWORD *)v2 + 206) = 0;
      *((_DWORD *)v2 + 36) = 25;
      *((_DWORD *)v2 + 3_Block_object_dispose(va, 8) = 5000;
      int v12 = 0;
      size_t v11 = 4LL;
      if (sysctlbyname("hw.logicalcpu_max", &v12, &v11, 0LL, 0LL) == -1) {
        ktrace_remotetime_update_params_cold_1();
      }
      if (!v12) {
        ktrace_remotetime_update_params_cold_1();
      }
      v2[42] = (uint64_t)v12 << 6;
      *unsigned int v2 = 0LL;
      *((_DWORD *)v2 + 164) = 0;
      *(void *)((char *)v2 + 276) = 0LL;
      *((_DWORD *)v2 + 66) = 1;
      *((_DWORD *)v2 + 7ktrace_session_set_default_event_names_enabled(global_session, 1) = a1 & 1;
      *((_DWORD *)v2 + 64) = a1 & 1;
      *((_BYTE *)v2 + 392) = v2[49] & 0xFD | (2 * (a1 & 1));
      *((_WORD *)v2 + 112) = v2[28] & 0xFDFF | ((a1 & 1) << 9);
      *((_DWORD *)v2 + 65) = a1 & 1;
      *((_DWORD *)v2 + 72) = a1 & 1;
      return v2;
    }

    int v3 = (void *)v2[37];
  }

  v2[30] = 0LL;
  free(v3);
  v2[37] = 0LL;
  int v5 = (const void *)v2[69];
  if (v5) {
    CFRelease(v5);
  }
  BOOL v6 = (const void *)v2[73];
  if (v6) {
    CFRelease(v6);
  }
  int v7 = (const void *)v2[71];
  if (v7) {
    CFRelease(v7);
  }
  free(v2);
  return 0LL;
}

void *ktrace_session_create()
{
  return ktrace_session_create_with_flags(1);
}

void _session_end_internal(uint64_t a1, char a2, int a3)
{
  uint64_t v38 = *MEMORY[0x1895F89C0];
  int v6 = *(_DWORD *)a1;
  int v7 = *(_DWORD *)(a1 + 4);
  if ((a2 & 2) != 0) {
    dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 128));
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 824));
  if ((*(_WORD *)(a1 + 224) & 3) == 0)
  {
    atomic_store(1u, (unsigned __int8 *)(a1 + 156));
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 824));
    ktrace_log_init();
    int v10 = (os_log_s *)ktrace_log;
    if (!os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_INFO)) {
      return;
    }
    *(_WORD *)__int128 buf = 0;
    size_t v11 = "ending before starting/configuration";
    goto LABEL_16;
  }

  unsigned __int8 v8 = atomic_load((unsigned __int8 *)(a1 + 157));
  if ((v8 & 1) != 0)
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 824));
    ktrace_log_init();
    int v10 = (os_log_s *)ktrace_log;
    if (!os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_INFO)) {
      return;
    }
    *(_WORD *)__int128 buf = 0;
    size_t v11 = "ending while already ended immediately";
LABEL_16:
    _os_log_impl(&dword_186BA3000, v10, OS_LOG_TYPE_INFO, v11, buf, 2u);
    return;
  }

  if ((v6 | 2) == 2)
  {
    int v9 = _session_end_live(a1);
    if (a3) {
      goto LABEL_7;
    }
LABEL_29:
    ktrace_remotetime_update_params_cold_1();
  }

  int v9 = 0;
  if (!a3) {
    goto LABEL_29;
  }
LABEL_7:
  if ((a2 & 1) != 0) {
    atomic_store(1u, (unsigned __int8 *)(a1 + 157));
  }
  if ((a2 & 4) != 0)
  {
    atomic_store(1u, (unsigned __int8 *)(a1 + 158));
    atomic_store(1u, (unsigned __int8 *)(a1 + 156));
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 824));
    if (!v9)
    {
      uint64_t v13 = *(void *)(a1 + 80);
      if (v13) {
        _session_end_internal(v13, 1LL, 3LL);
      }
      *(_DWORD *)(a1 + 80_Block_object_dispose(va, 8) = 7;
      goto LABEL_34;
    }

    goto LABEL_18;
  }

  atomic_store(1u, (unsigned __int8 *)(a1 + 156));
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 824));
  if ((v9 & 1) != 0)
  {
LABEL_18:
    if (*(_DWORD *)(a1 + 4) == 2)
    {
      *(_WORD *)(a1 + 224) |= 0x20u;
      ktrace_file_append_live_stackshot_internal(*(void *)(a1 + 648));
    }

    *(_DWORD *)(a1 + 80_Block_object_dispose(va, 8) = a3;
    trace_set_enable(0);
    if (*(void *)(a1 + 592)) {
      ktrace_client_stop_tracing();
    }
    if ((v7 - 1) <= 1)
    {
      int v12 = *(dispatch_queue_s **)(a1 + 128);
      if (!v12) {
        ktrace_remotetime_update_params_cold_1();
      }
      if ((a2 & 2) != 0)
      {
        [*(id *)(a1 + 600) didEndTracingWithFile:*(void *)(a1 + 648)];
      }

      else
      {
        block[0] = MEMORY[0x1895F87A8];
        block[1] = 3221225472LL;
        block[2] = ___session_end_internal_block_invoke;
        block[3] = &__block_descriptor_40_e5_v8__0l;
        block[4] = a1;
        dispatch_async(v12, block);
      }
    }
  }

uint64_t ___session_end_internal_block_invoke(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 600) didEndTracingWithFile:*(void *)(*(void *)(a1 + 32) + 648)];
}

void ktrace_end(uint64_t a1, int a2)
{
  _session_end_internal(a1, a2 != 0, 3);
}

void _session_teardown( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  if (*(_DWORD *)(a1 + 4) != 4) {
    dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 128));
  }
  unsigned __int8 v9 = atomic_load((unsigned __int8 *)(a1 + 159));
  if ((v9 & 1) == 0)
  {
    atomic_store(1u, (unsigned __int8 *)(a1 + 159));
    switch(*(_DWORD *)a1)
    {
      case 0:
        trace_remove_internal();
        break;
      case 1:
      case 3:
        break;
      case 2:
        trace_set_enable(1);
        break;
      default:
        _session_teardown_cold_2();
    }

    unsigned __int8 v10 = atomic_load((unsigned __int8 *)(a1 + 158));
    if ((v10 & 1) == 0)
    {
      int v11 = *(_DWORD *)(a1 + 4);
      if ((v11 - 1) <= 1)
      {
        int v12 = *(ktrace_file **)(a1 + 648);
        if (!v12) {
          ktrace_remotetime_update_params_cold_1();
        }
        if (v11 == 2) {
          ktrace_time_ringbuffer_tracing_stopped(*(int **)(a1 + 640), v12);
        }
        uint64_t v13 = *(void *)(a1 + 672);
        if (v13) {
          (*(void (**)(uint64_t, void))(v13 + 16))(v13, *(void *)(a1 + 648));
        }
        if ((*(_BYTE *)(a1 + 828) & 1) == 0)
        {
          int v12 = *(ktrace_file **)(a1 + 648);
          if (v12->var1 != 4)
          {
            kteventnames_append(a1 + 360, (uint64_t)v12);
            uint64_t v27 = 0LL;
            if ((*(_WORD *)(a1 + 224) & 0x100) != 0) {
              unsigned int v14 = 1;
            }
            else {
              unsigned int v14 = 3;
            }
            if (*(_DWORD *)(a1 + 656) >= 2u) {
              uint64_t v15 = v14 | 4;
            }
            else {
              uint64_t v15 = v14;
            }
            ktrace_postprocess_file_internal(a1, *(void *)(a1 + 648), 0LL, v15, &v27);
            if (*(void *)(a1 + 592)) {
              ktrace_client_get_subfile();
            }
            if (v27) {
              goto LABEL_31;
            }
            int v22 = ktrace_file_latest_timestamp(*(void *)(a1 + 648), &v27, v16, v17, v18, v19, v20, v21);
            if (v22)
            {
              *__error() = v22;
              int v23 = *__error();
              ktrace_log_init();
              __int16 v24 = (os_log_s *)ktrace_log;
              if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
                _session_teardown_cold_4(v23, v24);
              }
              *__error() = v23;
            }

            if (v27) {
LABEL_31:
            }
              ktrace_file_append_chunk(*(void *)(a1 + 648), 32775, 0, 1, (UInt8 *)&v27, 8LL);
          }
        }

        if (*(void *)(a1 + 592)) {
          ktrace_client_destroy();
        }
        uint64_t v25 = *(void *)(a1 + 648);
        if (v25)
        {
          unsigned int v26 = ktrace_catalog_open(v25, (uint64_t)v12, a3, a4, a5, a6, a7, a8);
          [*(id *)(a1 + 600) willFinishWithCatalog:v26 file:*(void *)(a1 + 648)];
          if (v26) {
            ktrace_catalog_close((uint64_t)v26);
          }
        }

        else
        {
          [*(id *)(a1 + 600) willFinishWithCatalog:0 file:0];
        }

        ktrace_file_close(*(void **)(a1 + 648));
        *(void *)(a1 + 64_Block_object_dispose(va, 8) = 0LL;
      }
    }
  }

void ___session_end_internal_block_invoke_13( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void *ktrace_set_cleanup_handler(uint64_t a1, void *aBlock)
{
  if (*(void *)(a1 + 688)) {
    ktrace_remotetime_update_params_cold_1();
  }
  double result = _Block_copy(aBlock);
  *(void *)(a1 + 68_Block_object_dispose(va, 8) = result;
  return result;
}

void ktrace_session_free(uint64_t a1)
{
  if ((*(_DWORD *)a1 | 2) == 2) {
    _session_end_live(a1);
  }
  unsigned int v2 = *(const void **)(a1 + 56);
  if (v2) {
    _Block_release(v2);
  }
  int v3 = *(const void **)(a1 + 64);
  if (v3) {
    _Block_release(v3);
  }
  int v4 = *(void **)(a1 + 608);
  if (v4 && (*(_WORD *)(a1 + 224) & 4) != 0) {
    ktrace_file_close(v4);
  }
  if (*(void *)(a1 + 592) && (*(_WORD *)(a1 + 224) & 8) != 0) {
    ktrace_client_destroy();
  }
  ktrace_callback_list_reset((int *)(a1 + 24));
  ktrace_callback_list_reset((int *)(a1 + 40));
  ktrace_callback_list_reset((int *)(a1 + 112));
  ktrace_callback_list_reset((int *)(a1 + 96));
  kthmap_destroy(*(CFTypeRef **)(a1 + 296));
  ktrace_machine_destroy(*(void *)(a1 + 344));
  vnode_path_map_destroy(*(CFDictionaryRef **)(a1 + 400));
  thread_cputime_map_destroy(*(const void ***)(a1 + 408));
  clear_events(*(void *)(a1 + 240), (void *)(a1 + 248));
  free(*(void **)(a1 + 240));
  int v5 = *(const void **)(a1 + 552);
  if (v5) {
    CFRelease(v5);
  }
  int v6 = *(const void **)(a1 + 584);
  if (v6) {
    CFRelease(v6);
  }
  int v7 = *(const void **)(a1 + 568);
  if (v7) {
    CFRelease(v7);
  }
  kteventnames_destroy((CFTypeRef *)(a1 + 360));
  if (*(void *)(a1 + 176))
  {
    dispatch_source_cancel_and_wait();
    dispatch_release(*(dispatch_object_t *)(a1 + 176));
  }

  if (*(void *)(a1 + 184))
  {
    dispatch_source_cancel_and_wait();
    dispatch_release(*(dispatch_object_t *)(a1 + 184));
  }

  if (*(void *)(a1 + 200))
  {
    dispatch_source_cancel_and_wait();
    dispatch_release(*(dispatch_object_t *)(a1 + 200));
  }

  if (*(void *)(a1 + 192))
  {
    dispatch_source_cancel_and_wait();
    dispatch_release(*(dispatch_object_t *)(a1 + 192));
  }

  if (*(void *)(a1 + 208))
  {
    dispatch_source_cancel_and_wait();
    dispatch_release(*(dispatch_object_t *)(a1 + 208));
  }

  if (*(void *)(a1 + 216))
  {
    dispatch_source_cancel_and_wait();
    dispatch_release(*(dispatch_object_t *)(a1 + 216));
  }

  unsigned __int8 v8 = *(const void **)(a1 + 664);
  if (v8) {
    _Block_release(v8);
  }
  unsigned __int8 v9 = *(const void **)(a1 + 672);
  if (v9) {
    _Block_release(v9);
  }
  unsigned __int8 v10 = *(const void **)(a1 + 88);
  if (v10) {
    _Block_release(v10);
  }
  int v11 = *(const void **)(a1 + 72);
  if (v11) {
    _Block_release(v11);
  }
  if (*(void *)(a1 + 416)) {
    MEMORY[0x186E45C94]();
  }
  int v12 = *(const void **)(a1 + 624);
  if (v12) {
    ktrace_stream_destroy(v12);
  }
  uint64_t v13 = *(const void **)(a1 + 616);
  if (v13) {
    ktrace_stream_destroy(v13);
  }
  unsigned int v14 = *(const void **)(a1 + 304);
  if (v14) {
    CFRelease(v14);
  }
  if (!*(_DWORD *)a1)
  {
    uint64_t v15 = *(void **)(a1 + 320);
    if (v15)
    {
      if (v15[13]) {
        ktrace_remotetime_update_params_cold_1();
      }
      ktrace_chunk_destroy(v15);
    }
  }

  uint64_t v16 = *(KtraceSymbolicator **)(a1 + 312);
  if (v16) {
    ktrace_symbolicator_destroy(v16);
  }
  uint64_t v17 = *(void **)(a1 + 640);
  if (v17) {
    ktrace_time_ringbuffer_destroy(v17);
  }
  uint64_t v18 = *(void **)(a1 + 352);
  if (v18) {
    ktrace_cpus_destroy(v18);
  }
  free(*(void **)(a1 + 8));
  free(*(void **)(a1 + 696));
  free(*(void **)(a1 + 704));
  dispatch_release(*(dispatch_object_t *)(a1 + 816));
  uint64_t v19 = *(void *)(a1 + 688);
  if (v19)
  {
    (*(void (**)(void))(v19 + 16))();
    _Block_release(*(const void **)(a1 + 688));
  }

  uint64_t v20 = *(const void **)(a1 + 680);
  if (v20) {
    _Block_release(v20);
  }

  free((void *)a1);
}

void ktrace_session_destroy(uint64_t a1)
{
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  _session_end_internal(a1, 1, 3);
  unsigned int v2 = *(dispatch_object_s **)(a1 + 128);
  if (v2)
  {
    dispatch_release(v2);
    int v3 = *(dispatch_object_s **)(a1 + 136);
    if (v3) {
      dispatch_release(v3);
    }
  }

  else
  {
    ktrace_session_free(a1);
  }

uint64_t ktrace_start(unint64_t a1, dispatch_queue_s *a2)
{
  uint64_t v42 = *MEMORY[0x1895F89C0];
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  int v3 = (unsigned __int8 *)(a1 + 156);
  unsigned __int8 v4 = atomic_load(v3);
  if ((v4 & 1) != 0) {
    ktrace_start_cold_12(v3);
  }
  if ((*(_WORD *)(a1 + 224) & 3) != 0) {
    ktrace_start_cold_11();
  }
  int v6 = *(_DWORD *)(a1 + 4);
  if ((v6 - 1) <= 1)
  {
    if (*(_DWORD *)a1) {
      goto LABEL_8;
    }
    [*(id *)(a1 + 600) configureWithSession:a1];
    int v6 = *(_DWORD *)(a1 + 4);
  }

LABEL_8:
  ktrace_compute_filter(a1);
  if (*(_DWORD *)a1 == 4)
  {
    uint64_t v13 = *(void *)(a1 + 608);
    if (!v13) {
      ktrace_remotetime_update_params_cold_1();
    }
    *(void *)__str = 0LL;
    int v39 = __str;
    uint64_t v40 = 0x2020000000LL;
    char v41 = 0;
    v37[0] = MEMORY[0x1895F87A8];
    v37[1] = 3221225472LL;
    v37[2] = __ktrace_start_block_invoke;
    v37[3] = &unk_189F55BB8;
    v37[4] = __str;
    uint64_t v12 = ktrace_file_iterate(v13, 0LL, (uint64_t)v37, v7, v8, v9, v10, v11);
    if (!(_DWORD)v12) {
      uint64_t v12 = v39[24] == 0;
    }
    _Block_object_dispose(__str, 8);
  }

  else if (*(_DWORD *)a1 == 3)
  {
    print_filter(*(void *)(a1 + 8));
    return 0LL;
  }

  else
  {
    snprintf(__str, 0x80uLL, "com.apple.libktrace.collection.%p", (const void *)a1);
    if (*(_DWORD *)(a1 + 148))
    {
      *(void *)(a1 + 136) = dispatch_workloop_create_inactive(__str);
      dispatch_workloop_set_scheduler_priority();
      dispatch_activate(*(dispatch_object_t *)(a1 + 136));
    }

    unsigned int v14 = dispatch_queue_attr_make_with_autorelease_frequency(0LL, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
    uint64_t v15 = dispatch_queue_attr_make_with_qos_class(v14, (dispatch_qos_class_t)*(_DWORD *)(a1 + 144), -1);
    dispatch_queue_t v16 = dispatch_queue_create_with_target_V2(__str, v15, *(dispatch_queue_t *)(a1 + 136));
    *(void *)(a1 + 12_Block_object_dispose(va, 8) = v16;
    if (!v16) {
      ktrace_remotetime_update_params_cold_1();
    }
    dispatch_set_context(v16, (void *)a1);
    dispatch_set_finalizer_f(*(dispatch_object_t *)(a1 + 128), (dispatch_function_t)collection_queue_finalizer);
    if (!*(void *)(a1 + 128)) {
      ktrace_remotetime_update_params_cold_1();
    }
    int v17 = *(_DWORD *)(a1 + 284);
    kteventnames_freeze((uint64_t *)(a1 + 360));
    int v18 = *(_DWORD *)(a1 + 4);
    if ((v18 - 1) >= 2)
    {
      if (v18) {
        ktrace_start_cold_4();
      }
      uint64_t v19 = *(void *)(a1 + 32);
      if (*(_DWORD *)a1 == 1)
      {
        if (!v19 && !*(void *)(a1 + 120)) {
          ktrace_remotetime_update_params_cold_1();
        }
      }

      else if (!v19)
      {
        ktrace_remotetime_update_params_cold_1();
      }

      snprintf(__str, 0x80uLL, "com.apple.libktrace.processing.%p", (const void *)a1);
      uint64_t v20 = dispatch_queue_attr_make_with_autorelease_frequency(0LL, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
      dispatch_queue_t v21 = dispatch_queue_create_with_target_V2(__str, v20, a2);
      *(void *)(a1 + 232) = v21;
      dispatch_set_context(v21, (void *)a1);
      dispatch_set_finalizer_f(*(dispatch_object_t *)(a1 + 232), (dispatch_function_t)processing_queue_finalizer);
      ktrace_callback_list_sort((int *)(a1 + 24));
      if (*(_DWORD *)a1 == 1) {
        ktrace_callback_list_sort((int *)(a1 + 112));
      }
    }

    else
    {
      if (!*(void *)(a1 + 648)) {
        ktrace_remotetime_update_params_cold_1();
      }
      if ((*(_DWORD *)a1 | 2) != 2) {
        ktrace_start_cold_9();
      }
    }

    *(_WORD *)(a1 + 224) |= 1u;
    int v22 = *(dispatch_object_s **)(a1 + 176);
    if (v22) {
      dispatch_activate(v22);
    }
    int v23 = *(dispatch_object_s **)(a1 + 184);
    if (v23) {
      dispatch_activate(v23);
    }
    __int16 v24 = *(dispatch_object_s **)(a1 + 200);
    if (v24) {
      dispatch_activate(v24);
    }
    uint64_t v25 = *(dispatch_object_s **)(a1 + 192);
    if (v25) {
      dispatch_activate(v25);
    }
    unsigned int v26 = *(dispatch_object_s **)(a1 + 208);
    if (v26) {
      dispatch_activate(v26);
    }
    uint64_t v27 = *(dispatch_object_s **)(a1 + 216);
    if (v27) {
      dispatch_activate(v27);
    }
    uint64_t v12 = 0LL;
    switch(*(_DWORD *)a1)
    {
      case 0:
      case 2:
        uint64_t started = _session_start_live(a1);
        goto LABEL_51;
      case 1:
        ktrace_log_init();
        uint64_t v29 = (os_log_s *)ktrace_log;
        if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)__str = 0;
          _os_log_impl(&dword_186BA3000, v29, OS_LOG_TYPE_INFO, "starting to trace from file", (uint8_t *)__str, 2u);
        }

        uint64_t started = _session_start_file(a1, v17 != 0, v30, v31, v32, v33, v34, v35);
LABEL_51:
        uint64_t v12 = started;
        if ((_DWORD)started) {
          *(_WORD *)(a1 + 224) &= ~1u;
        }
        break;
      case 4:
        return v12;
      default:
        ktrace_start_cold_6();
    }
  }

  return v12;
}

    v20[0] = (void (*)(void, void))MEMORY[0x1895F87A8];
    v20[1] = (void (*)(void, void))3221225472LL;
    v20[2] = (void (*)(void, void))___Z43ktrace_uuid_offset_get_description_internalP15ktrace_uuid_map18ktrace_uuid_offsetPKc_block_invoke;
    v20[3] = (void (*)(void, void))&unk_189F561C0;
    v20[4] = (void (*)(void, void))&v21;
    void v20[5] = (void (*)(void, void))v26;
    ktrace_uuid_map_iterate_associated_paths(a1, (__int128 *)uu, v20);
    uint64_t v12 = v22;
LABEL_10:
    uint64_t v10 = (char **)(v12 + 3);
    goto LABEL_11;
  }

  uint64_t v7 = utf8(v6);
  uint64_t v8 = basename_r(v7, v26);
  uint64_t v9 = v22;
  v22[3] = (uint64_t)v8;
  uint64_t v10 = (char **)(v9 + 3);
  if (a1 && !v8) {
    goto LABEL_8;
  }
LABEL_11:
  if (!*v10)
  {
    *uint64_t v10 = out;
    if (a3) {
      goto LABEL_13;
    }
LABEL_17:
    a3 = __str;
    snprintf(__str, 0x14uLL, "0x%llx", *((void *)uu + 5));
    goto LABEL_13;
  }

  if (!a3) {
    goto LABEL_17;
  }
LABEL_13:
  switch(*((_DWORD *)uu + 12))
  {
    case 1:
    case 5:
      goto LABEL_14;
    case 2:
      int v17 = (const char *)(uu + 16);
      if (!strcmp(v17, "__TEXT"))
      {
LABEL_14:
        unsigned int v14 = v22;
LABEL_15:
        goto LABEL_20;
      }

      int v18 = strcmp(v17, "__TEXT_EXEC");
      unsigned int v14 = v22;
      if (!v18) {
        goto LABEL_15;
      }
LABEL_20:
      uint64_t v11 = v15;
      _Block_object_dispose(&v21, 8);
      return v11;
    case 3:
      goto LABEL_19;
    case 4:
LABEL_19:
      uint64_t v15 = aasprintf(v13, out, a3);
      goto LABEL_20;
    default:
      uint64_t v19 = _os_crash();
      ktrace_uuid_map_learn_tailspin_symbols_with_chunk_cold_2(v19);
  }

        if ((v13 - 32) <= 0x5E)
        {
          std::string::push_back(this, *(_BYTE *)(a1 + v8));
LABEL_16:
          uint64_t v8 = ++v9;
          if (v9 >= a2) {
            goto LABEL_78;
          }
          continue;
        }

        dispatch_queue_t v16 = v11;
        int v17 = v10;
        int v18 = 0;
        uint64_t v19 = (flatbuffers *)*(unsigned __int8 *)(a1 + v8);
        uint64_t v20 = 128;
        dispatch_queue_t v21 = -1;
        while ((v20 & v19) != 0)
        {
          ++v18;
          v20 >>= 1;
          ++v21;
          if (v18 == 6) {
            goto LABEL_23;
          }
        }

        if ((((_DWORD)v19 << v18) & 0x80) == 0)
        {
          if (v18)
          {
            if (v18 == 1 || v18 > 4) {
              goto LABEL_23;
            }
            __int16 v24 = (char *)(v12 + 1);
            LODWORD(v13) = v13 & ~(-1 << (7 - v18));
            do
            {
              uint64_t v25 = *v24;
              if ((*v24 & 0xC0) != 0x80) {
                goto LABEL_23;
              }
              ++v24;
              uint64_t v13 = v25 & 0x3Fu | ((_DWORD)v13 << 6);
              --v21;
            }

            while (v21);
            unsigned int v26 = a1 + 2 + v8 + v18 - 2;
            if (v18 == 4)
            {
            }

            else if (v18 == 3)
            {
            }

            else if ((v13 - 2048) < 0xFFFFF880)
            {
              goto LABEL_23;
            }
          }

          else
          {
            unsigned int v26 = (uint64_t)(v12 + 1);
            if ((v13 & 0x80000000) != 0) {
              goto LABEL_23;
            }
          }

          if (a5)
          {
            std::string::append(this, v12, v26 - (v8 + a1));
            uint64_t v11 = v16;
          }

          else
          {
            uint64_t v11 = v16;
            if (WORD1(v13))
            {
              if (WORD1(v13) > 0x10u) {
                goto LABEL_73;
              }
              std::string::append(this, "\\u");
              flatbuffers::IntToStringHex((flatbuffers *)(((v13 - 0x10000) >> 10) + 55296), 4, &__p);
              if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
                p_p = &__p;
              }
              else {
                p_p = (std::stringbuf::string_type *)__p.__r_.__value_.__r.__words[0];
              }
              if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
                size = __p.__r_.__value_.__s.__size_;
              }
              else {
                size = __p.__r_.__value_.__l.__size_;
              }
              std::string::append(this, (const std::string::value_type *)p_p, size);
              std::string::append(this, "\\u");
              flatbuffers::IntToStringHex((flatbuffers *)(v13 & 0x3FF | 0xDC00), 4, &__p);
              uint64_t v31 = (__p.__r_.__value_.__s.__size_ & 0x80u) == 0
                  ? &__p
                  : (std::stringbuf::string_type *)__p.__r_.__value_.__r.__words[0];
              uint64_t v32 = (__p.__r_.__value_.__s.__size_ & 0x80u) == 0
                  ? __p.__r_.__value_.__s.__size_
                  : __p.__r_.__value_.__l.__size_;
              std::string::append(this, (const std::string::value_type *)v31, v32);
              uint64_t v11 = v16;
            }

            else
            {
              std::string::append(this, "\\u");
              flatbuffers::IntToStringHex((flatbuffers *)v13, 4, &__p);
              if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
                uint64_t v27 = &__p;
              }
              else {
                uint64_t v27 = (std::stringbuf::string_type *)__p.__r_.__value_.__r.__words[0];
              }
              if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
                int v28 = __p.__r_.__value_.__s.__size_;
              }
              else {
                int v28 = __p.__r_.__value_.__l.__size_;
              }
              std::string::append(this, (const std::string::value_type *)v27, v28);
            }

            operator delete(__p.__r_.__value_.__l.__data_);
          }

  int v18 = 0;
  sub_186C5B47C();
  (*(void (**)(char *, uint64_t))(v13 + 8))(v10, v8);
  return swift_bridgeObjectRelease();
}

  __break(1u);
  return result;
}

void sub_186BC4B3C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void print_filter(uint64_t a1)
{
  if (a1)
  {
    unsigned int v2 = kdebug_alloc_filter_description(a1);
    if (!v2) {
      ktrace_remotetime_update_params_cold_1();
    }
    int v3 = v2;
    puts(v2);
    free(v3);
  }

  else
  {
    puts("ALL");
  }

BOOL __ktrace_start_block_invoke(uint64_t a1, uint64_t *a2)
{
  int v3 = (void **)ktrace_config_create(a2);
  unsigned __int8 v4 = v3;
  if (v3)
  {
    *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = 1;
    uint64_t typefilter = ktrace_config_kdebug_get_typefilter((uint64_t)v3);
    print_filter(typefilter);
    ktrace_config_destroy(v4);
  }

  return v4 == 0LL;
}

void ktrace_abort(uint64_t a1)
{
}

void collection_queue_finalizer(uint64_t a1)
{
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  int v1 = *(dispatch_queue_s **)(a1 + 232);
  if (v1)
  {
    block[0] = MEMORY[0x1895F87A8];
    block[1] = 3221225472LL;
    block[2] = __collection_queue_finalizer_block_invoke;
    block[3] = &__block_descriptor_40_e5_v8__0l;
    block[4] = a1;
    dispatch_async(v1, block);
  }

  else
  {
    ktrace_session_free(a1);
  }

void __collection_queue_finalizer_block_invoke(uint64_t a1)
{
}

void processing_queue_finalizer(uint64_t a1)
{
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  ktrace_session_free(a1);
}

uint64_t ktrace_convert_timestamp_to_nanoseconds(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  if (!a3) {
    ktrace_remotetime_update_params_cold_1();
  }
  if (!*(_DWORD *)(a1 + 452)) {
    return 45LL;
  }
  unint64_t v4 = kttimesync_ns_from_timestamp(a1 + 432, a2);
  uint64_t result = 0LL;
  *a3 = v4;
  return result;
}

uint64_t ktrace_convert_timestamp_to_walltime(uint64_t a1, unint64_t a2, unint64_t *a3)
{
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  if (!a3) {
    ktrace_remotetime_update_params_cold_1();
  }
  if ((*(_BYTE *)(a1 + 480) & 2) == 0) {
    return 45LL;
  }
  unint64_t v5 = kttimesync_wall_from_timestamp(a1 + 432, a2);
  uint64_t result = 0LL;
  *a3 = v5;
  a3[1] = v6;
  return result;
}

uint64_t ktrace_convert_absolute_to_walltime(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  if (!a3) {
    ktrace_remotetime_update_params_cold_1();
  }
  char v5 = *(_BYTE *)(a1 + 480);
  if ((v5 & 8) != 0)
  {
    a2 = kttimesync_cont_from_abs(a1 + 432, a2);
    char v5 = *(_BYTE *)(a1 + 480);
  }

  if ((v5 & 2) == 0) {
    return 45LL;
  }
  unint64_t v7 = kttimesync_wall_from_timestamp(a1 + 432, a2);
  uint64_t result = 0LL;
  *a3 = v7;
  a3[1] = v8;
  return result;
}

uint64_t ktrace_get_continuous_from_absolute(uint64_t a1, uint64_t a2)
{
  return kttimesync_cont_from_abs(a1 + 432, a2);
}

uint64_t ktrace_convert_continuous_to_walltime(uint64_t a1, unint64_t a2, unint64_t *a3)
{
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  if (!a3) {
    ktrace_remotetime_update_params_cold_1();
  }
  char v5 = *(_BYTE *)(a1 + 480);
  if ((v5 & 8) == 0)
  {
    a2 = kttimesync_abs_from_cont(a1 + 432, a2);
    char v5 = *(_BYTE *)(a1 + 480);
  }

  if ((v5 & 2) == 0) {
    return 45LL;
  }
  unint64_t v7 = kttimesync_wall_from_timestamp(a1 + 432, a2);
  uint64_t result = 0LL;
  *a3 = v7;
  a3[1] = v8;
  return result;
}

unint64_t ktrace_get_absolute_from_continuous(uint64_t a1, unint64_t a2)
{
  return kttimesync_abs_from_cont(a1 + 432, a2);
}

unint64_t ktrace_get_current_timestamp(uint64_t a1)
{
  __int16 v2 = *(_WORD *)(a1 + 224);
  uint64_t v3 = a1 + 432;
  unint64_t v4 = *(void *)(a1 + 496);
  if ((v2 & 0x80) != 0) {
    return kttimesync_cont_from_timestamp(v3, v4);
  }
  else {
    return kttimesync_abs_from_timestamp(v3, v4);
  }
}

uint64_t ktrace_set_walltimes_enabled(uint64_t result, int a2)
{
  if ((*(_WORD *)(result + 224) & 3) != 0) {
    ktrace_set_remotetime_conversion_enabled_cold_2();
  }
  *(_DWORD *)(result + 264) = a2;
  return result;
}

uint64_t ktrace_get_walltimes_enabled(uint64_t a1)
{
  return *(unsigned int *)(a1 + 264);
}

void _session_convert_walltime(uint64_t a1, unint64_t a2)
{
}

uint64_t ktrace_get_continuous_from_timestamp(uint64_t a1, uint64_t a2)
{
  if ((*(_WORD *)(a1 + 224) & 0x80) != 0) {
    return a2;
  }
  else {
    return kttimesync_cont_from_timestamp(a1 + 432, a2);
  }
}

unint64_t ktrace_get_absolute_from_timestamp(uint64_t a1, unint64_t a2)
{
  if ((*(_WORD *)(a1 + 224) & 0x80) != 0) {
    return kttimesync_abs_from_timestamp(a1 + 432, a2);
  }
  else {
    return a2;
  }
}

unint64_t ktrace_get_ns_from_timestamp(uint64_t a1, uint64_t a2)
{
  return kttimesync_ns_from_timestamp(a1 + 432, a2);
}

unint64_t ktrace_get_earliest_timestamp(uint64_t a1)
{
  __int16 v2 = *(_WORD *)(a1 + 224);
  uint64_t v3 = a1 + 432;
  unint64_t v4 = *(void *)(a1 + 504);
  if ((v2 & 0x80) != 0) {
    return kttimesync_cont_from_timestamp(v3, v4);
  }
  else {
    return kttimesync_abs_from_timestamp(v3, v4);
  }
}

uint64_t ktrace_set_continuous_timestamps(uint64_t result, int a2)
{
  if (!result) {
    ktrace_remotetime_update_params_cold_1();
  }
  __int16 v2 = *(_WORD *)(result + 224);
  if ((v2 & 3) != 0) {
    ktrace_set_remotetime_conversion_enabled_cold_2();
  }
  if (a2) {
    __int16 v3 = 128;
  }
  else {
    __int16 v3 = 0;
  }
  *(_WORD *)(result + 224) = v2 & 0xFF7F | v3;
  return result;
}

uint64_t ktrace_set_callbacks_after_elapsed(uint64_t result, uint64_t a2)
{
  *(void *)(result + 512) = a2;
  return result;
}

uint64_t tracepoint_timestamp(uint64_t a1, int a2)
{
  if (a2) {
    return *(void *)a1;
  }
  else {
    return *(void *)a1 & 0xFFFFFFFFFFFFFFLL;
  }
}

uint64_t ktrace_file_append_ioreg(uint64_t a1)
{
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0LL, 0LL, MEMORY[0x189605240], MEMORY[0x189605250]);
  ktrace_merge_ioreg_service(Mutable, "IOMobileFramebuffer");
  ktrace_merge_ioreg_service(Mutable, "AGXAccelerator");
  if (!Mutable) {
    return 1LL;
  }
  Data = CFPropertyListCreateData(0LL, Mutable, kCFPropertyListBinaryFormat_v1_0, 0LL, 0LL);
  CFRelease(Mutable);
  if (Data)
  {
    BytePtr = (UInt8 *)CFDataGetBytePtr(Data);
    CFIndex Length = CFDataGetLength(Data);
    int appended = ktrace_file_append_chunk(a1, 32776, 0, 0, BytePtr, Length);
    CFRelease(Data);
    return appended != 0LL;
  }

  else
  {
    int v8 = *__error();
    ktrace_log_init();
    uint64_t v9 = (os_log_s *)ktrace_log;
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
      ktrace_file_append_ioreg_cold_1(v8, v9);
    }
    *__error() = v8;
    return 22LL;
  }

void ktrace_merge_ioreg_service(__CFDictionary *a1, char *name)
{
  io_iterator_t existing = 0;
  unint64_t v4 = IOServiceMatching(name);
  if (IOServiceGetMatchingServices(0, v4, &existing))
  {
    char v5 = 0LL;
LABEL_8:
    CFMutableDictionaryRef Mutable = 0LL;
  }

  else
  {
    CFMutableDictionaryRef Mutable = CFArrayCreateMutable(0LL, 0LL, MEMORY[0x189605228]);
    while (1)
    {
      io_registry_entry_t v7 = IOIteratorNext(existing);
      if (!v7)
      {
        char v5 = Mutable;
        goto LABEL_8;
      }

      value = 0LL;
      if (IORegistryEntryCreateCFProperties(v7, (CFMutableDictionaryRef *)&value, 0LL, 0)) {
        break;
      }
      CFArrayAppendValue(Mutable, value);
      CFRelease(value);
    }

    char v5 = 0LL;
  }

  if (existing) {
    IOObjectRelease(existing);
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
  if (v5)
  {
    CFStringRef v8 = CFStringCreateWithCString(0LL, name, 0x8000100u);
    if (!v8) {
      ktrace_postprocess_file_internal_cold_1();
    }
    CFStringRef v9 = v8;
    CFAutorelease(v8);
    CFDictionarySetValue(a1, v9, v5);
    CFRelease(v5);
  }

void ktrace_log_init()
{
  if (ktrace_log_init_ktrace_log_once != -1) {
    dispatch_once(&ktrace_log_init_ktrace_log_once, &__block_literal_global_6);
  }
}

os_log_t __ktrace_log_init_block_invoke()
{
  ktrace_log = (uint64_t)os_log_create("com.apple.libktrace", "ktrace");
  os_log_t result = os_log_create("com.apple.libktrace", "ktrace_file");
  ktrace_file_log = (uint64_t)result;
  return result;
}

uint64_t ktrace_machine_create_current()
{
  v57[2] = *MEMORY[0x1895F89C0];
  timespec v46 = (timespec)xmmword_186C5D150;
  unint64_t v0 = calloc(1uLL, 0xE0uLL);
  uint64_t v1 = (uint64_t)v0;
  if (v0)
  {
    v0[2] = -1LL;
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0LL, 0LL, MEMORY[0x189605240], MEMORY[0x189605250]);
    if (!Mutable)
    {
      int v4 = 12;
LABEL_46:
      ktrace_machine_destroy(v1);
      uint64_t v1 = 0LL;
      *__error() = v4;
      return v1;
    }

    __int16 v3 = Mutable;
    *(void *)__int128 buf = 0x400000001LL;
    v57[0] = 4LL;
    int v4 = sysctl_string(Mutable, @"kern_version", (int *)buf, 2u, (void *)(v1 + 40));
    if (v4) {
      goto LABEL_41;
    }
    int v4 = sysctlbyname_string(v3, @"boot_args", "kern.bootargs", (char **)(v1 + 48), 0LL);
    if (v4) {
      goto LABEL_41;
    }
    *(void *)__int128 buf = 0x1800000006LL;
    int v4 = sysctl_uint64(v3, @"hw_memsize", (int *)buf, 2u, (void *)(v1 + 8));
    if (v4) {
      goto LABEL_41;
    }
    *(void *)__int128 buf = 0x700000006LL;
    int v4 = sysctl_uint(v3, @"hw_pagesize", (int *)buf, 2u, (void *)(v1 + 168));
    if (v4) {
      goto LABEL_41;
    }
    int v4 = sysctlbyname_uint(v3, @"vm_pagesize", "vm.pagesize", (void *)(v1 + 172));
    if (v4) {
      goto LABEL_41;
    }
    int v4 = sysctlbyname_int(v3, @"cpu_type", "hw.cputype", (void *)(v1 + 192));
    if (v4) {
      goto LABEL_41;
    }
    int v4 = sysctlbyname_int(v3, @"cpu_subtype", "hw.cpusubtype", (void *)(v1 + 196));
    if (v4) {
      goto LABEL_41;
    }
    int v4 = sysctlbyname_int(v3, @"cpu_family", "hw.cpufamily", (void *)(v1 + 200));
    if (v4) {
      goto LABEL_41;
    }
    *(void *)__int128 buf = 0x200000006LL;
    int v4 = sysctl_string(v3, @"hw_model", (int *)buf, 2u, (void *)(v1 + 88));
    if (v4) {
      goto LABEL_41;
    }
    *(void *)__int128 buf = 0x1B00000006LL;
    int v4 = sysctl_string(v3, @"hw_product", (int *)buf, 2u, (void *)(v1 + 96));
    if (v4) {
      goto LABEL_41;
    }
    int v4 = sysctlbyname_int(v3, @"active_cpus", "hw.activecpu", &v47);
    if (v4) {
      goto LABEL_41;
    }
    if ((v47 & 0x80000000) != 0) {
      goto LABEL_40;
    }
    *(_DWORD *)(v1 + 176) = v47;
    int v4 = sysctlbyname_int(v3, @"max_cpus", "hw.logicalcpu_max", &v47);
    if (v4) {
      goto LABEL_41;
    }
    if ((v47 & 0x80000000) != 0)
    {
LABEL_40:
      int v4 = 22;
    }

    else
    {
      *(_DWORD *)(v1 + 180) = v47;
      int v4 = sysctlbyname_string(v3, @"boot_uuid", "kern.bootsessionuuid", (char **)(v1 + 120), 0LL);
      if (!v4)
      {
        int v4 = sysctlbyname_uint64(v3, @"min_kern_vaddr", "vm.vm_min_kernel_address", (void *)(v1 + 16));
        if (!v4)
        {
          int v4 = sysctlbyname_uint64(v3, @"max_kern_vaddr", "vm.vm_max_kernel_address", (void *)(v1 + 24));
          if (!v4)
          {
            BOOL v5 = sysctlbyname("hw.cputhreadtype", &iterator, v57, 0LL, 0LL) || (int)iterator <= 0;
            BOOL v6 = !v5;
            int v4 = dict_set_BOOL(v3, @"hyperthreading", v6);
            if (!v4)
            {
              *(_BYTE *)(v1 + 207) = v6;
              *(void *)v1 |= 2uLL;
              int v4 = sysctlbyname_uint32(v3, @"physical_cpus", "hw.physicalcpu_max", (void *)(v1 + 188));
              if (!v4)
              {
                int v4 = sysctlbyname_uint32(v3, @"vm_pages", "vm.pages", (void *)(v1 + 184));
                if (!v4)
                {
                  v57[0] = 4LL;
                  BOOL v7 = sysctlbyname("kern.thread_groups_supported", &iterator, v57, 0LL, 0LL) || (int)iterator <= 0;
                  BOOL v8 = !v7;
                  int v4 = dict_set_BOOL(v3, @"thread_groups", v8);
                  if (!v4)
                  {
                    *(_BYTE *)(v1 + 20_Block_object_dispose(va, 8) = v8;
                    *(void *)v1 |= 4uLL;
                    CFStringRef v9 = (const __CFDictionary *)_CFCopySupplementalVersionDictionary();
                    if (dict_string( v9,  (void *)*MEMORY[0x189604B78],  v3,  @"os_version",  (char **)(v1 + 64)))
                    {
                      int v10 = *__error();
                      ktrace_log_init();
                      if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR)) {
                        ktrace_machine_create_current_cold_10();
                      }
                    }

                    else if (dict_string( v9,  (void *)*MEMORY[0x189604B68],  v3,  @"os_name",  (char **)(v1 + 56)))
                    {
                      int v10 = *__error();
                      ktrace_log_init();
                      if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR)) {
                        ktrace_machine_create_current_cold_9();
                      }
                    }

                    else
                    {
                      if (!dict_string( v9,  (void *)*MEMORY[0x189604B60],  v3,  @"os_build",  (char **)(v1 + 80)))
                      {
                        dict_string(v9, (void *)*MEMORY[0x189604B70], v3, @"os_version_extra", (char **)(v1 + 72));
                        if (!v9) {
                          goto LABEL_57;
                        }
                        goto LABEL_56;
                      }

                      int v10 = *__error();
                      ktrace_log_init();
                      if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR)) {
                        ktrace_machine_create_current_cold_8();
                      }
                    }

                    *__error() = v10;
                    if (!v9)
                    {
LABEL_57:
                      io_iterator_t iterator = 0;
                      uint64_t v13 = calloc(*(unsigned int *)(v1 + 180), 8uLL);
                      if (!v13) {
                        goto LABEL_109;
                      }
                      unsigned int v14 = calloc(*(unsigned int *)(v1 + 180), 4uLL);
                      *(void *)(v1 + 136) = v14;
                      if (!v14) {
                        goto LABEL_109;
                      }
                      uint64_t v15 = calloc(*(unsigned int *)(v1 + 180), 4uLL);
                      *(void *)(v1 + 152) = v15;
                      if (!v15) {
                        goto LABEL_109;
                      }
                      dispatch_queue_t v16 = IOServiceNameMatching("cpus");
                      uint64_t MatchingService = IOServiceGetMatchingService(0, v16);
                      if (!(_DWORD)MatchingService
                        || MEMORY[0x186E45598](MatchingService, "IODeviceTree", &iterator))
                      {
                        int v18 = *__error();
                        ktrace_log_init();
                        if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
                          ktrace_machine_create_current_cold_6();
                        }
                        *__error() = v18;
                        int v4 = 22;
                        goto LABEL_112;
                      }

                      io_registry_entry_t v19 = IOIteratorNext(iterator);
                      if (v19)
                      {
                        unsigned int v20 = 0;
                        unsigned int v21 = 0;
                        int v22 = (const __CFAllocator *)*MEMORY[0x189604DB0];
                        while (1)
                        {
                          v57[0] = 0LL;
                          if (!IORegistryEntryCreateCFProperties(v19, (CFMutableDictionaryRef *)v57, v22, 0)) {
                            break;
                          }
LABEL_93:
                          io_registry_entry_t v19 = IOIteratorNext(iterator);
                          if (!v19) {
                            goto LABEL_98;
                          }
                        }

                        if (!v57[0])
                        {
                          *__error() = 0;
                          int v24 = *__error();
                          ktrace_log_init();
                          uint64_t v25 = (os_log_s *)ktrace_log;
                          if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
                          {
                            *(_DWORD *)__int128 buf = 67109120;
                            *(_DWORD *)&uint8_t buf[4] = v24;
                            _os_log_error_impl( &dword_186BA3000,  v25,  OS_LOG_TYPE_ERROR,  "CPU properties are NULL on IOKit success (%{errno}d)",  buf,  8u);
                          }

                          *__error() = v24;
                          goto LABEL_93;
                        }

                        unsigned int v52 = 0;
                        if (dict_uint32((const __CFDictionary *)v57[0], @"logical-cpu-id", &v52))
                        {
                          ktrace_log_init();
                          int v23 = (os_log_s *)ktrace_log;
                          if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_DEBUG)) {
                            ktrace_machine_create_current_cold_7(&v50, v51, v23);
                          }
                          goto LABEL_92;
                        }

                        if (v52 >= *(_DWORD *)(v1 + 180)) {
                          goto LABEL_92;
                        }
                        unsigned int v49 = 0;
                        int v26 = dict_uint32((const __CFDictionary *)v57[0], @"logical-cluster-id", &v49);
                        if (v26)
                        {
                          *__error() = v26;
                          int v44 = *__error();
                          ktrace_log_init();
                          uint64_t v45 = (os_log_s *)ktrace_log;
                          if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
                          {
                            *(_DWORD *)__int128 buf = 67109376;
                            *(_DWORD *)&uint8_t buf[4] = v52;
                            __int16 v55 = 1024;
                            int v56 = v44;
                            _os_log_error_impl( &dword_186BA3000,  v45,  OS_LOG_TYPE_ERROR,  "failed to get logical-cluster-id property for CPU %u (%{errno}d)",  buf,  0xEu);
                          }

                          *__error() = v44;
                          int v4 = *__error();
                          goto LABEL_112;
                        }

                        *(_DWORD *)(*(void *)(v1 + 136) + 4LL * v52) = v49;
                        if (v20 <= v49) {
                          unsigned int v20 = v49;
                        }
                        unsigned int v48 = 0;
                        if (dict_uint32((const __CFDictionary *)v57[0], @"die-id", &v48))
                        {
                          unsigned int v27 = 0;
                          unsigned int v48 = 0;
                        }

                        else
                        {
                          unsigned int v27 = v48;
                        }

                        *(_DWORD *)(*(void *)(v1 + 152) + 4LL * v52) = v27;
                        if (v21 <= v48) {
                          unsigned int v21 = v48;
                        }
                        *(void *)__int128 buf = 0LL;
                        CFIndex v47 = 0LL;
                        int v28 = dict_data((const __CFDictionary *)v57[0], @"cluster-type", (UInt8 **)buf, &v47);
                        uint64_t v29 = v52;
                        v13[v52] = 0LL;
                        if (v28) {
                          goto LABEL_92;
                        }
                        uint64_t v30 = *(void **)buf;
                        if (v47)
                        {
                          int v31 = **(_BYTE **)buf;
                          if (v31 == 80)
                          {
                            uint64_t v32 = 2LL;
                            goto LABEL_90;
                          }

                          if (v31 == 69)
                          {
                            uint64_t v32 = 1LL;
LABEL_90:
                            v13[v29] = v32;
                          }
                        }

                        free(v30);
LABEL_92:
                        CFRelease((CFTypeRef)v57[0]);
                        goto LABEL_93;
                      }

                      unsigned int v21 = 0;
                      unsigned int v20 = 0;
LABEL_98:
                      *(_DWORD *)(v1 + 160) = v20 + 1;
                      int v4 = dict_set_uint32(v3, @"max_clusters", v20 + 1);
                      if (!v4)
                      {
                        uint64_t v33 = (char *)calloc(*(unsigned int *)(v1 + 160), 8uLL);
                        *(void *)(v1 + 144) = v33;
                        if (v33)
                        {
                          uint64_t v34 = *(unsigned int *)(v1 + 180);
                          if ((_DWORD)v34)
                          {
                            uint64_t v35 = *(unsigned int **)(v1 + 136);
                            __int16 v36 = v13;
                            do
                            {
                              unsigned int v38 = *v35++;
                              uint64_t v37 = v38;
                              if (!*(void *)&v33[8 * v38]) {
                                *(void *)&v33[8 * v37] = *v36;
                              }
                              ++v36;
                              --v34;
                            }

                            while (v34);
                          }

                          int v4 = dict_set_uint64_arr(v3, @"cluster_flags", v33, *(unsigned int *)(v1 + 160));
                          if (!v4)
                          {
                            int v4 = dict_set_uint32_arr( v3,  @"cluster_by_cpu",  *(char **)(v1 + 136),  *(unsigned int *)(v1 + 180));
                            if (!v4)
                            {
                              *(_DWORD *)(v1 + 164) = v21 + 1;
                              int v4 = dict_set_uint32(v3, @"max_dies", v21 + 1);
                              if (!v4) {
                                int v4 = dict_set_uint32_arr( v3,  @"die_by_cpu",  *(char **)(v1 + 152),  *(unsigned int *)(v1 + 180));
                              }
                            }
                          }

                          goto LABEL_112;
                        }

LABEL_109:
                        int v39 = *__error();
                        if (v39) {
                          int v4 = v39;
                        }
                        else {
                          int v4 = 12;
                        }
                      }

LABEL_112:
                      if (iterator) {
                        IOObjectRelease(iterator);
                      }
                      free(v13);
                      if (v4)
                      {
                        *__error() = v4;
                        int v11 = *__error();
                        ktrace_log_init();
                        if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
                          ktrace_machine_create_current_cold_5();
                        }
                      }

                      else
                      {
                        int has_internal_content = os_variant_has_internal_content();
                        int v41 = dict_set_BOOL(v3, @"apple_internal", has_internal_content);
                        int v42 = dict_set_BOOL(v3, @"internal_content", has_internal_content);
                        if (!(v42 | v41))
                        {
                          *(_BYTE *)(v1 + 205) = has_internal_content;
                          *(_BYTE *)(v1 + 206) = has_internal_content;
                          *(void *)v1 |= 1uLL;
                          if (!gethostuuid((unsigned __int8 *)v57, &v46))
                          {
                            if (uuid_is_null((const unsigned __int8 *)v57))
                            {
                              int v11 = *__error();
                              ktrace_log_init();
                              if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
                                ktrace_machine_create_current_cold_3();
                              }
                              int v4 = 22;
                              goto LABEL_43;
                            }

                            uuid_unparse((const unsigned __int8 *)v57, (char *)buf);
                            int v4 = dict_set_string(v3, @"device_uuid", (char *)buf);
                            if (v4) {
                              goto LABEL_44;
                            }
                            *(void *)(v1 + 12_Block_object_dispose(va, 8) = strdup((const char *)buf);
                          }

                          ktrace_machine_fill_name(v1, v3);
                          ktrace_machine_fill_volume_size(v1, v3);
                          *(_BYTE *)(v1 + 204) = current_system_is_64_bit();
                          *(void *)(v1 + 216) = v3;
                          return v1;
                        }

                        int v43 = v42 | v41;
                        int v11 = *__error();
                        ktrace_log_init();
                        if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
                          ktrace_machine_create_current_cold_4();
                        }
                        int v4 = v43;
                      }

LABEL_43:
                      *__error() = v11;
LABEL_44:
                      if (*(void *)(v1 + 216)) {
                        ktrace_remotetime_update_params_cold_1();
                      }
                      CFRelease(v3);
                      goto LABEL_46;
                    }

  ++*(void *)(a1 + 24);
  return i;
}

  ++*(void *)(a1 + 24);
  return v11;
}

                  a5[3] = v15;
                  a5[4] = 0LL;
                  swift_retain();
                  return sub_186C1EF78(v38, a2, v37, a3);
                }
              }
            }
          }

  __break(1u);
  os_log_t result = swift_release();
  __break(1u);
  return result;
}

LABEL_56:
                    CFRelease(v9);
                    goto LABEL_57;
                  }
                }
              }
            }
          }
        }
      }
    }

      if (a3)
      {
        int v17 = *(void **)(a2 + 16);
      }

      else
      {
        int v17 = (void *)*(unsigned int *)(a2 + 12);
      }

      int v31 = a1;
      int v18 = -1LL;
      goto LABEL_87;
    }
  }

  if (v9 != 27721728)
  {
    if (v9 != 27721736) {
      goto LABEL_116;
    }
    if (a3)
    {
      int v18 = *(void *)(a2 + 8);
      int v17 = *(void **)(a2 + 16);
    }

    else
    {
      int v18 = *(unsigned int *)(a2 + 8);
      int v17 = (void *)*(unsigned int *)(a2 + 12);
    }

    int v31 = a1;
LABEL_87:
    set_task_jetsam_coalition(v31, v17, v18);
    goto LABEL_116;
  }

  if (a3)
  {
    if (*(void *)(a2 + 16) != 1LL) {
      goto LABEL_116;
    }
    int v28 = *(const void **)(a2 + 8);
    uint64_t v29 = *(void *)(a2 + 24);
  }

  else
  {
    if (*(_DWORD *)(a2 + 12) != 1) {
      goto LABEL_116;
    }
    uint64_t v29 = *(unsigned int *)(a2 + 16);
    int v28 = (const void *)*(unsigned int *)(a2 + 8);
  }

  new_jetsam_coalition(a1, v28, 0LL, v29, 0LL);
LABEL_116:
  if ((*(_BYTE *)(a1 + 96) & 1) == 0) {
    return;
  }
  if (v9 == 27656196)
  {
    if (a3) {
      int v39 = *(const void **)(a2 + 8);
    }
    else {
      int v39 = (const void *)*(unsigned int *)(a2 + 8);
    }
    delete_thread_group(a1, v39);
  }

  else
  {
    if (v9 == 27721732)
    {
      if (a3)
      {
        if (*(void *)(a2 + 16) != 1LL) {
          return;
        }
        uint64_t v40 = *(const void **)(a2 + 8);
      }

      else
      {
        if (*(_DWORD *)(a2 + 12) != 1) {
          return;
        }
        uint64_t v40 = (const void *)*(unsigned int *)(a2 + 8);
      }

      delete_jetsam_coalition(a1, v40);
      return;
    }

    if (v9 == 117440524 && (*(_BYTE *)(a1 + 96) & 2) != 0)
    {
      if (a3) {
        unsigned int v38 = *(const void **)(a2 + 8);
      }
      else {
        unsigned int v38 = (const void *)*(unsigned int *)(a2 + 8);
      }
      CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a1 + 32), v38);
      CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a1 + 40), v38);
      CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a1 + 56), v38);
      CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a1 + 48), v38);
    }
  }

    type metadata accessor for KTraceRecordError();
    sub_186BFCB04( (unint64_t *)&qword_18C6A21E0,  (uint64_t (*)(uint64_t))type metadata accessor for KTraceRecordError,  (uint64_t)&unk_186C60EF4);
    swift_allocError();
    *int v28 = 0xD000000000000015LL;
    v28[1] = 0x8000000186C688A0LL;
    v28[2] = a1;
    v28[3] = a2;
    swift_storeEnumTagMultiPayload();
    swift_bridgeObjectRetain();
    return swift_willThrow();
  }

  v29[0] = a1;
  v29[1] = a2 & 0xFFFFFFFFFFFFFFLL;
  if (a1 == 43)
  {
    if (!v6) {
      goto LABEL_61;
    }
    if (v6 == 1) {
      goto LABEL_59;
    }
    LODWORD(v12) = (BYTE1(a1) - 48);
    if (v12 <= 9)
    {
      if (v6 == 2) {
        goto LABEL_34;
      }
      if ((BYTE2(a1) - 48) <= 9u)
      {
        LODWORD(v12) = 10 * v12 + (BYTE2(a1) - 48);
        unsigned int v14 = v6 - 3;
        if (v6 != 3)
        {
          uint64_t v15 = (unsigned __int8 *)v29 + 3;
          while (1)
          {
            dispatch_queue_t v16 = *v15 - 48;
            if (v16 > 9) {
              goto LABEL_32;
            }
            int v17 = 10LL * (int)v12;
            LODWORD(v12) = v17 + v16;
            LOBYTE(v6) = 0;
            ++v15;
            if (!--v14) {
              goto LABEL_35;
            }
          }
        }

        goto LABEL_34;
      }
    }

void ktrace_machine_fill_name(uint64_t a1, __CFDictionary *a2)
{
  int v4 = SecTaskCreateFromSelf(0LL);
  CFErrorRef error = 0LL;
  CFTypeRef v5 = SecTaskCopyValueForEntitlement( v4,  @"com.apple.developer.device-information.user-assigned-device-name",  &error);
  CFRelease(v4);
  if (v5)
  {
    CFTypeID v6 = CFGetTypeID(v5);
    if (v6 == CFBooleanGetTypeID())
    {
      int Value = CFBooleanGetValue((CFBooleanRef)v5);
      CFRelease(v5);
      if (Value)
      {
        BOOL v8 = (const __CFString *)MGCopyAnswer();
        if (v8)
        {
          CFStringRef v9 = v8;
          dict_set_cfstring(a2, @"name", v8, (char **)(a1 + 104));
          CFRelease(v9);
        }

        return;
      }
    }

    else
    {
      CFRelease(v5);
    }

    ktrace_log_init();
    uint64_t v12 = (os_log_s *)ktrace_log;
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_DEBUG)) {
      ktrace_machine_fill_name_cold_2(v12, v13, v14);
    }
  }

  else
  {
    uint64_t v10 = *__error();
    ktrace_log_init();
    int v11 = (os_log_s *)ktrace_log;
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
      ktrace_machine_fill_name_cold_1(&error, v10, v11);
    }
    *__error() = v10;
  }

_DWORD *ktrace_machine_fill_volume_size(uint64_t a1, __CFDictionary *a2)
{
  uint64_t v8 = *MEMORY[0x1895F89C0];
  if (statfs("/", &v7))
  {
    int v4 = *__error();
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
      ktrace_machine_fill_volume_size_cold_3();
    }
LABEL_10:
    os_log_t result = __error();
    _DWORD *result = v4;
    return result;
  }

  if (!is_mul_ok(v7.f_bsize, v7.f_blocks))
  {
    int v4 = *__error();
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
      ktrace_machine_fill_volume_size_cold_1();
    }
    goto LABEL_10;
  }

  uint64_t v5 = v7.f_bsize * v7.f_blocks;
  os_log_t result = (_DWORD *)dict_set_uint64(a2, @"root_vol_size", v5);
  if ((_DWORD)result)
  {
    int v4 = *__error();
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
      ktrace_machine_fill_volume_size_cold_2();
    }
    goto LABEL_10;
  }

  *(void *)(a1 + 32) = v5;
  return result;
}

void ktrace_machine_destroy(uint64_t a1)
{
  if (a1)
  {
    free(*(void **)(a1 + 40));
    free(*(void **)(a1 + 48));
    free(*(void **)(a1 + 56));
    free(*(void **)(a1 + 64));
    free(*(void **)(a1 + 72));
    free(*(void **)(a1 + 80));
    free(*(void **)(a1 + 88));
    free(*(void **)(a1 + 96));
    free(*(void **)(a1 + 104));
    free(*(void **)(a1 + 112));
    free(*(void **)(a1 + 120));
    free(*(void **)(a1 + 128));
    free(*(void **)(a1 + 144));
    free(*(void **)(a1 + 136));
    free(*(void **)(a1 + 152));
    __int16 v2 = *(const void **)(a1 + 216);
    if (v2) {
      CFRelease(v2);
    }
    free((void *)a1);
  }

uint64_t ktrace_machine_create(uint64_t *a1)
{
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  if (!*a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  int v2 = ktrace_chunk_tag((uint64_t)a1);
  if (v2 != 20995)
  {
    int v17 = v2;
    unint64_t v5 = 0LL;
    uint64_t v12 = 0LL;
    uint64_t v3 = 0LL;
    int v18 = a1;
LABEL_9:
    if (v17 != 35840) {
      goto LABEL_36;
    }
    if (ktrace_chunk_version_major((uint64_t)v18) > 1)
    {
      uint64_t v16 = 0LL;
      dict = 0LL;
      int v14 = 45;
      if (v12) {
        goto LABEL_37;
      }
LABEL_38:
      if (!v5)
      {
        if (!v14) {
          return v16;
        }
        goto LABEL_43;
      }

      goto LABEL_42;
    }

    unsigned int v19 = ktrace_chunk_version_minor((uint64_t)v18);
    uint64_t v20 = ktrace_chunk_size((uint64_t)v18);
    unsigned int v21 = (UInt8 *)ktrace_chunk_map_data(v18, 0LL, v20);
    if (!v21)
    {
LABEL_36:
      uint64_t v16 = 0LL;
      dict = 0LL;
      int v14 = 0;
      if (!v12) {
        goto LABEL_38;
      }
      goto LABEL_37;
    }

    unint64_t v22 = (unint64_t)v21;
    dict = (const __CFDictionary *)create_dict(v21, v20);
    if (!dict)
    {
      int v14 = 0;
      uint64_t v16 = 0LL;
      goto LABEL_80;
    }

    int v23 = calloc(1uLL, 0xE0uLL);
    uint64_t v16 = (uint64_t)v23;
    if (!v23)
    {
      int v14 = 12;
      goto LABEL_80;
    }

    unsigned int v31 = v19;
    void v23[2] = -1LL;
    *((_BYTE *)v23 + 204) = ktrace_file_is_64_bit(*v18);
    *(void *)(v16 + 216) = dict;
    if (!dict_string(dict, @"kern_version", 0LL, 0LL, (char **)(v16 + 40))
      && !dict_string(dict, @"boot_args", 0LL, 0LL, (char **)(v16 + 48))
      && !dict_uint64(dict, @"hw_memsize", (void *)(v16 + 8))
      && !dict_uint32(dict, @"hw_pagesize", (void *)(v16 + 168))
      && !dict_uint32(dict, @"vm_pagesize", (void *)(v16 + 172))
      && !dict_string(dict, @"os_name", 0LL, 0LL, (char **)(v16 + 56))
      && !dict_string(dict, @"os_version", 0LL, 0LL, (char **)(v16 + 64))
      && !dict_string(dict, @"os_build", 0LL, 0LL, (char **)(v16 + 80))
      && !dict_string(dict, @"hw_model", 0LL, 0LL, (char **)(v16 + 88))
      && !dict_int(dict, @"cpu_type", (void *)(v16 + 192))
      && !dict_int(dict, @"cpu_subtype", (void *)(v16 + 196))
      && !dict_int(dict, @"cpu_family", (void *)(v16 + 200))
      && !dict_uint32(dict, @"active_cpus", (void *)(v16 + 176))
      && !dict_uint32(dict, @"max_cpus", (void *)(v16 + 180)))
    {
      dict_BOOL(dict, @"apple_internal", (BOOL *)(v16 + 205));
    }

    if (!v19)
    {
LABEL_79:
      int v14 = 0;
LABEL_80:
      ktrace_chunk_unmap_data((uint64_t)v18, v22, v20);
      if (v12) {
        goto LABEL_37;
      }
      goto LABEL_38;
    }

    int v24 = *(const __CFDictionary **)(v16 + 216);
    dict_string(v24, @"name", 0LL, 0LL, (char **)(v16 + 104));
    dict_string(v24, @"hostname", 0LL, 0LL, (char **)(v16 + 112));
    uint64_t v30 = v20;
    if (dict_string(v24, @"device_uuid", 0LL, 0LL, (char **)(v16 + 128)))
    {
      uint64_t v25 = "device UUID";
    }

    else if (dict_string(v24, @"boot_uuid", 0LL, 0LL, (char **)(v16 + 120)))
    {
      uint64_t v25 = "boot UUID";
    }

    else if (dict_uint32(v24, @"vm_pages", (void *)(v16 + 184)))
    {
      uint64_t v25 = "VM pages";
    }

    else if (dict_uint64(v24, @"min_kern_vaddr", (void *)(v16 + 16)))
    {
      uint64_t v25 = "minimum kernel address";
    }

    else if (dict_uint64(v24, @"root_vol_size", (void *)(v16 + 32)))
    {
      uint64_t v25 = "root volume size";
    }

    else if (dict_uint32(v24, @"physical_cpus", (void *)(v16 + 188)))
    {
      uint64_t v25 = "physical CPUs";
    }

    else if (dict_BOOL(v24, @"internal_content", (BOOL *)(v16 + 206)))
    {
      uint64_t v25 = "internal content";
    }

    else
    {
      *(void *)v16 |= 1uLL;
      if (dict_BOOL(v24, @"hyperthreading", (BOOL *)(v16 + 207)))
      {
        uint64_t v25 = "hyperthreading";
      }

      else
      {
        *(void *)v16 |= 2uLL;
        if (!dict_BOOL(v24, @"thread_groups", (BOOL *)(v16 + 208)))
        {
          *(void *)v16 |= 4uLL;
LABEL_73:
          uint64_t v20 = v30;
          if (v31 >= 2)
          {
            ktrace_machine_v1_2(v16);
            if (v31 != 2)
            {
              ktrace_machine_v1_3(v16);
              if (v31 >= 4)
              {
                ktrace_machine_v1_4(v16);
                if (v31 != 4)
                {
                  dict_string( *(const __CFDictionary **)(v16 + 216),  @"os_version_extra",  0LL,  0LL,  (char **)(v16 + 72));
                  if (v31 >= 6) {
                    dict_string( *(const __CFDictionary **)(v16 + 216),  @"hw_product",  0LL,  0LL,  (char **)(v16 + 96));
                  }
                }
              }
            }
          }

          goto LABEL_79;
        }

        uint64_t v25 = "thread groups";
      }
    }

    uint64_t v29 = (uint64_t)v25;
    uint64_t v27 = *__error();
    ktrace_log_init();
    int v28 = (os_log_s *)ktrace_log;
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
      ktrace_machine_create_cold_3(v29, v27, v28);
    }
    *__error() = v27;
    goto LABEL_73;
  }

  uint64_t v3 = ktrace_chunk_size_t(a1);
  int v4 = ktrace_chunk_map_data(a1, 0LL, v3);
  if (!v4)
  {
    int v14 = *__error();
    if (v14)
    {
LABEL_47:
      uint64_t v16 = 0LL;
      *__error() = v14;
      return v16;
    }

    return 0LL;
  }

  unint64_t v5 = (unint64_t)v4;
  CFTypeID v6 = ktrace_file_open_memory((uint64_t)v4, v3, 0LL, 0LL);
  if (v6)
  {
    uint64_t v12 = v6;
    uint64_t v33 = 0LL;
    uint64_t v34 = &v33;
    uint64_t v35 = 0x2000000000LL;
    uint64_t v36 = 0LL;
    v32[0] = MEMORY[0x1895F87A8];
    v32[1] = 0x40000000LL;
    v32[2] = __ktrace_machine_create_block_invoke;
    v32[3] = &unk_189F55C50;
    v32[4] = &v33;
    int v13 = ktrace_file_header_iterate((uint64_t)v6, 0LL, (uint64_t)v32, v7, v8, v9, v10, v11);
    if (v13)
    {
      int v14 = v13;
      _Block_object_dispose(&v33, 8);
      dict = 0LL;
      uint64_t v16 = 0LL;
LABEL_37:
      ktrace_file_close(v12);
      goto LABEL_38;
    }

    int v18 = (uint64_t *)v34[3];
    int v17 = ktrace_chunk_tag((uint64_t)v18);
    _Block_object_dispose(&v33, 8);
    goto LABEL_9;
  }

  uint64_t v16 = 0LL;
  dict = 0LL;
  int v14 = *__error();
LABEL_42:
  ktrace_chunk_unmap_data((uint64_t)a1, v5, v3);
  if (v14)
  {
LABEL_43:
    if (v16) {
      ktrace_machine_destroy(v16);
    }
    if (dict) {
      CFRelease(dict);
    }
    goto LABEL_47;
  }

  return v16;
}

BOOL __ktrace_machine_create_block_invoke(uint64_t a1, uint64_t a2)
{
  int v4 = ktrace_chunk_tag(a2);
  if (v4 == 35840) {
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = a2;
  }
  return v4 != 35840;
}

_DWORD *ktrace_machine_v1_2(uint64_t a1)
{
  os_log_t result = (_DWORD *)dict_uint64(*(const __CFDictionary **)(a1 + 216), @"max_kern_vaddr", (void *)(a1 + 24));
  if ((_DWORD)result)
  {
    int v2 = *__error();
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
      ktrace_machine_v1_2_cold_1();
    }
    os_log_t result = __error();
    _DWORD *result = v2;
  }

  return result;
}

_DWORD *ktrace_machine_v1_3(uint64_t a1)
{
  uint64_t v22 = *MEMORY[0x1895F89C0];
  int v2 = *(const __CFDictionary **)(a1 + 216);
  uint64_t v3 = (int *)(a1 + 160);
  int v4 = dict_uint32(v2, @"max_clusters", (void *)(a1 + 160));
  if (v4)
  {
    *__error() = v4;
    int v5 = *__error();
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
      ktrace_machine_v1_3_cold_2();
    }
    goto LABEL_12;
  }

  int v15 = 0;
  int v6 = dict_uint32_arr(v2, @"cluster_by_cpu", (void *)(a1 + 136), &v15);
  if (v6)
  {
    *__error() = v6;
    int v5 = *__error();
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
      ktrace_machine_v1_3_cold_1();
    }
    goto LABEL_12;
  }

  if (v15 == *(_DWORD *)(a1 + 180))
  {
    int v14 = 0;
    os_log_t result = (_DWORD *)dict_uint64_arr(v2, @"cluster_flags", (void *)(a1 + 144), &v14);
    if (v14 == *(_DWORD *)(a1 + 160)) {
      return result;
    }
    *__error() = 22;
    int v5 = *__error();
    ktrace_log_init();
    uint64_t v8 = ktrace_log;
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
    {
      int v9 = *v3;
      *(_DWORD *)__int128 buf = 67109632;
      int v17 = v9;
      __int16 v18 = 1024;
      int v19 = v14;
      __int16 v20 = 1024;
      int v21 = v5;
      uint64_t v10 = "mismatched number of clusters, %u in machine and %u inarray (%{errno}d)";
      uint64_t v11 = (os_log_s *)v8;
LABEL_15:
      _os_log_error_impl(&dword_186BA3000, v11, OS_LOG_TYPE_ERROR, v10, buf, 0x14u);
    }
  }

  else
  {
    *__error() = 22;
    int v5 = *__error();
    ktrace_log_init();
    uint64_t v12 = ktrace_log;
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
    {
      int v13 = *(_DWORD *)(a1 + 180);
      *(_DWORD *)__int128 buf = 67109632;
      int v17 = v13;
      __int16 v18 = 1024;
      int v19 = v15;
      __int16 v20 = 1024;
      int v21 = v5;
      uint64_t v10 = "mismatched number of CPUs for clusters, %u in machine and %u in array (%{errno}d)";
      uint64_t v11 = (os_log_s *)v12;
      goto LABEL_15;
    }
  }

_DWORD *ktrace_machine_v1_4(uint64_t a1)
{
  uint64_t v15 = *MEMORY[0x1895F89C0];
  int v2 = *(const __CFDictionary **)(a1 + 216);
  int v3 = dict_uint32(v2, @"max_dies", (void *)(a1 + 164));
  if (v3)
  {
    *__error() = v3;
    int v4 = *__error();
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
      ktrace_machine_v1_4_cold_2();
    }
  }

  else
  {
    int v8 = 0;
    os_log_t result = (_DWORD *)dict_uint32_arr(v2, @"die_by_cpu", (void *)(a1 + 152), &v8);
    if ((_DWORD)result)
    {
      *__error() = (int)result;
      int v4 = *__error();
      ktrace_log_init();
      if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
        ktrace_machine_v1_4_cold_1();
      }
    }

    else
    {
      if (v8 == *(_DWORD *)(a1 + 180)) {
        return result;
      }
      *__error() = 22;
      int v4 = *__error();
      ktrace_log_init();
      int v6 = (os_log_s *)ktrace_log;
      if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
      {
        int v7 = *(_DWORD *)(a1 + 180);
        *(_DWORD *)__int128 buf = 67109632;
        int v10 = v7;
        __int16 v11 = 1024;
        int v12 = v8;
        __int16 v13 = 1024;
        int v14 = v4;
        _os_log_error_impl( &dword_186BA3000,  v6,  OS_LOG_TYPE_ERROR,  "mismatched number of CPUs for dies, %u in machine and %u in array (%{errno}d)",  buf,  0x14u);
      }
    }
  }

  os_log_t result = __error();
  _DWORD *result = v4;
  return result;
}

uint64_t ktrace_machine_kernel_version(uint64_t a1)
{
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  return *(void *)(a1 + 40);
}

uint64_t ktrace_machine_boot_args(uint64_t a1)
{
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  return *(void *)(a1 + 48);
}

uint64_t ktrace_machine_memory_size(uint64_t a1)
{
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  return *(void *)(a1 + 8);
}

uint64_t ktrace_machine_hw_page_size(uint64_t a1)
{
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  return *(unsigned int *)(a1 + 168);
}

uint64_t ktrace_machine_vm_page_size(uint64_t a1)
{
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  return *(unsigned int *)(a1 + 172);
}

uint64_t ktrace_machine_os_name(uint64_t a1)
{
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  return *(void *)(a1 + 56);
}

uint64_t ktrace_machine_os_version(uint64_t a1)
{
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  return *(void *)(a1 + 64);
}

uint64_t ktrace_machine_os_version_extra(uint64_t a1)
{
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  return *(void *)(a1 + 72);
}

uint64_t ktrace_machine_os_build(uint64_t a1)
{
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  return *(void *)(a1 + 80);
}

uint64_t ktrace_machine_model(uint64_t a1)
{
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  return *(void *)(a1 + 88);
}

uint64_t ktrace_machine_product(uint64_t a1)
{
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  return *(void *)(a1 + 96);
}

uint64_t ktrace_machine_cpu_type(uint64_t a1)
{
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  return *(unsigned int *)(a1 + 192);
}

uint64_t ktrace_machine_cpu_subtype(uint64_t a1)
{
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  return *(unsigned int *)(a1 + 196);
}

uint64_t ktrace_machine_cpu_family(uint64_t a1)
{
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  return *(unsigned int *)(a1 + 200);
}

uint64_t ktrace_machine_active_cpus(uint64_t a1)
{
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  return *(unsigned int *)(a1 + 176);
}

uint64_t ktrace_machine_max_cpus(uint64_t a1)
{
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  return *(unsigned int *)(a1 + 180);
}

uint64_t ktrace_machine_max_clusters(uint64_t a1)
{
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  return *(unsigned int *)(a1 + 160);
}

uint64_t ktrace_machine_cpu_cluster(uint64_t a1, unsigned int a2, _DWORD *a3)
{
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  uint64_t v3 = *(void *)(a1 + 136);
  if (!v3) {
    return 45LL;
  }
  if (*(_DWORD *)(a1 + 180) <= a2) {
    return 34LL;
  }
  uint64_t result = 0LL;
  *a3 = *(_DWORD *)(v3 + 4LL * a2);
  return result;
}

uint64_t ktrace_machine_cluster_flags(uint64_t a1, unsigned int a2, void *a3)
{
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  uint64_t v3 = *(void *)(a1 + 144);
  if (!v3) {
    return 45LL;
  }
  if (*(_DWORD *)(a1 + 160) <= a2) {
    return 34LL;
  }
  uint64_t result = 0LL;
  *a3 = *(void *)(v3 + 8LL * a2);
  return result;
}

uint64_t ktrace_machine_max_dies(uint64_t a1)
{
  return *(unsigned int *)(a1 + 164);
}

uint64_t ktrace_machine_cpu_die(uint64_t a1, unsigned int a2, _DWORD *a3)
{
  uint64_t v3 = *(void *)(a1 + 152);
  if (!v3) {
    return 45LL;
  }
  if (*(_DWORD *)(a1 + 180) <= a2) {
    return 34LL;
  }
  uint64_t result = 0LL;
  *a3 = *(_DWORD *)(v3 + 4LL * a2);
  return result;
}

uint64_t ktrace_machine_name(uint64_t a1)
{
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  return *(void *)(a1 + 104);
}

uint64_t ktrace_machine_hostname(uint64_t a1)
{
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  return *(void *)(a1 + 112);
}

uint64_t ktrace_machine_device_uuid(uint64_t a1)
{
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  return *(void *)(a1 + 128);
}

uint64_t ktrace_machine_boot_uuid(uint64_t a1)
{
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  return *(void *)(a1 + 120);
}

unint64_t ktrace_machine_vm_size(uint64_t a1)
{
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  return *(unsigned int *)(a1 + 184) * (unint64_t)*(unsigned int *)(a1 + 172);
}

uint64_t ktrace_machine_physical_cpus(uint64_t a1)
{
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  return *(unsigned int *)(a1 + 188);
}

uint64_t ktrace_machine_root_volume_size(uint64_t a1)
{
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  return *(void *)(a1 + 32);
}

uint64_t ktrace_machine_vm_pages(uint64_t a1)
{
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  return *(unsigned int *)(a1 + 184);
}

uint64_t ktrace_machine_apple_internal(uint64_t a1)
{
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  return *(unsigned __int8 *)(a1 + 205);
}

uint64_t ktrace_machine_has_internal_content(_BYTE *a1, _BYTE *a2)
{
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  if (!a2) {
    ktrace_remotetime_update_params_cold_1();
  }
  if ((*a1 & 1) == 0) {
    return 45LL;
  }
  uint64_t result = 0LL;
  *a2 = a1[206];
  return result;
}

uint64_t ktrace_machine_has_hyperthreading(_BYTE *a1, _BYTE *a2)
{
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  if (!a2) {
    ktrace_remotetime_update_params_cold_1();
  }
  if ((*a1 & 2) == 0) {
    return 45LL;
  }
  uint64_t result = 0LL;
  *a2 = a1[207];
  return result;
}

uint64_t ktrace_machine_has_thread_groups(_BYTE *a1, _BYTE *a2)
{
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  if (!a2) {
    ktrace_remotetime_update_params_cold_1();
  }
  if ((*a1 & 4) == 0) {
    return 45LL;
  }
  uint64_t result = 0LL;
  *a2 = a1[208];
  return result;
}

uint64_t ktrace_machine_min_kernel_vaddr(uint64_t a1, void *a2)
{
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  if (!a2) {
    ktrace_remotetime_update_params_cold_1();
  }
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 == -1) {
    return 45LL;
  }
  uint64_t result = 0LL;
  *a2 = v2;
  return result;
}

uint64_t ktrace_machine_max_kernel_vaddr(uint64_t a1, void *a2)
{
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  if (!a2) {
    ktrace_remotetime_update_params_cold_1();
  }
  uint64_t v2 = *(void *)(a1 + 24);
  if (!v2) {
    return 45LL;
  }
  uint64_t result = 0LL;
  *a2 = v2;
  return result;
}

uint64_t ktrace_machine_print_description(uint64_t a1, FILE *a2)
{
  int v4 = (const char *)ktrace_machine_kernel_version(a1);
  fprintf(a2, "kernel version: %s\n", v4);
  int v5 = (const char *)ktrace_machine_boot_args(a1);
  fprintf(a2, "boot-args: %s\n", v5);
  int v6 = (const char *)ktrace_machine_os_name(a1);
  int v7 = (const char *)ktrace_machine_os_version(a1);
  int v8 = (const char *)ktrace_machine_os_build(a1);
  fprintf(a2, "OS: %s %s (%s)", v6, v7, v8);
  int v9 = (const char *)ktrace_machine_os_version_extra(a1);
  if (v9) {
    fprintf(a2, " [%s]", v9);
  }
  fputc(10, a2);
  int v10 = (const char *)ktrace_machine_model(a1);
  fprintf(a2, "HW model: %s\n", v10);
  __int16 v11 = (const char *)ktrace_machine_product(a1);
  fprintf(a2, "HW product: %s\n", v11);
  uint64_t v12 = ktrace_machine_memory_size(a1);
  fprintf(a2, "memory size: %'llu\n", v12);
  unint64_t v13 = ktrace_machine_vm_size(a1);
  if (v13)
  {
    fprintf(a2, "VM size: %'llu", v13);
    uint64_t v14 = ktrace_machine_vm_pages(a1);
    if (v14) {
      fprintf(a2, " (%'llu pages)", v14);
    }
    fputc(10, a2);
  }

  int v15 = ktrace_machine_hw_page_size(a1);
  fprintf(a2, "HW page size: %u\n", v15);
  int v16 = ktrace_machine_vm_page_size(a1);
  fprintf(a2, "VM page size: %u\n", v16);
  int active = ktrace_machine_active_cpus(a1);
  fprintf(a2, "active CPUS: %u\n", active);
  int v18 = ktrace_machine_max_cpus(a1);
  fprintf(a2, "max CPUS: %u\n", v18);
  int v19 = ktrace_machine_physical_cpus(a1);
  if (v19) {
    fprintf(a2, "physical CPUS: %u\n", v19);
  }
  int v20 = ktrace_machine_cpu_type(a1);
  fprintf(a2, "CPU type: %#x\n", v20);
  int v21 = ktrace_machine_cpu_subtype(a1);
  fprintf(a2, "CPU subtype: %#x\n", v21);
  int v22 = ktrace_machine_cpu_family(a1);
  fprintf(a2, "CPU family: %#x\n", v22);
  unsigned int v23 = *(_DWORD *)(a1 + 164);
  if (v23 >= 2) {
    fprintf(a2, "max dies: %u\n", *(_DWORD *)(a1 + 164));
  }
  unsigned int v24 = ktrace_machine_max_clusters(a1);
  if (v24)
  {
    unsigned int v25 = v24;
    fprintf(a2, "max clusters: %u\n", v24);
    if (v18)
    {
      for (unint64_t i = 0LL; i != v18; ++i)
      {
        fprintf(a2, "\tCPU %u: cluster ", i);
        LODWORD(v45) = 0;
        else {
          fprintf(a2, "%u", v45);
        }
        if (v23 < 2)
        {
          fputc(10, a2);
        }

        else
        {
          fwrite(", die ", 6uLL, 1uLL, a2);
          uint64_t v27 = *(void *)(a1 + 152);
          else {
            fwrite("???\n", 4uLL, 1uLL, a2);
          }
        }
      }
    }

    unsigned int v28 = 0;
    if (v25 <= 1) {
      int v29 = 1;
    }
    else {
      int v29 = v25;
    }
    do
    {
      fprintf(a2, "\tcluster %u:", v28);
      uint64_t v45 = 0LL;
      int v30 = ktrace_machine_cluster_flags(a1, v28, &v45);
      if (v30)
      {
        unsigned int v31 = strerror(v30);
        fprintf(a2, " ??? (%s)", v31);
      }

      else
      {
        char v32 = v45;
        if ((v45 & 1) != 0) {
          fwrite(" EFFICIENT", 0xAuLL, 1uLL, a2);
        }
        if ((v32 & 2) != 0) {
          fwrite(" PERFORMANT", 0xBuLL, 1uLL, a2);
        }
      }

      fputc(10, a2);
      ++v28;
    }

    while (v29 != v28);
  }

  char v44 = 0;
  if (ktrace_machine_has_internal_content((_BYTE *)a1, &v44))
  {
    ktrace_machine_apple_internal(a1);
    fprintf(a2, "Apple Internal: %s\n");
  }

  else
  {
    fprintf(a2, "Apple Internal content: %s\n");
  }

  uint64_t v33 = (const char *)ktrace_machine_name(a1);
  if (v33) {
    fprintf(a2, "name: %s\n", v33);
  }
  uint64_t v34 = (const char *)ktrace_machine_hostname(a1);
  if (v34) {
    fprintf(a2, "hostname: %s\n", v34);
  }
  uint64_t v35 = (const char *)ktrace_machine_device_uuid(a1);
  if (v35) {
    fprintf(a2, "device UUID: %s\n", v35);
  }
  uint64_t v36 = (const char *)ktrace_machine_boot_uuid(a1);
  if (v36) {
    fprintf(a2, "boot UUID: %s\n", v36);
  }
  uint64_t v45 = -1LL;
  uint64_t v43 = -1LL;
  uint64_t v37 = ktrace_machine_root_volume_size(a1);
  if (v37) {
    fprintf(a2, "root volume size: %'llu\n", v37);
  }
  char v42 = 0;
  if (!ktrace_machine_has_hyperthreading((_BYTE *)a1, &v42))
  {
    if (v42) {
      unsigned int v38 = "YES";
    }
    else {
      unsigned int v38 = "NO";
    }
    fprintf(a2, "hyperthreading: %s\n", v38);
  }

  char v41 = 0;
  if (!ktrace_machine_has_thread_groups((_BYTE *)a1, &v41))
  {
    if (v41) {
      int v39 = "YES";
    }
    else {
      int v39 = "NO";
    }
    fprintf(a2, "thread groups: %s\n", v39);
  }

  return 0LL;
}

FILE *ktrace_machine_copy_description(uint64_t a1)
{
  size_t v4 = 0LL;
  __bufp = 0LL;
  uint64_t result = open_memstream(&__bufp, &v4);
  if (result)
  {
    uint64_t v3 = result;
    ktrace_machine_print_description(a1, result);
    fclose(v3);
    return (FILE *)__bufp;
  }

  return result;
}

void OUTLINED_FUNCTION_5_2(void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
}

uint64_t ktrace_start_writing_fd(unint64_t a1, int a2, int a3, const void *a4, const void *a5)
{
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  if (a2 <= 0) {
    ktrace_remotetime_update_params_cold_1();
  }
  if ((*(_DWORD *)a1 | 2) != 2) {
    _session_start_live_cold_4();
  }
  fd = ktrace_file_create_fd(0LL, a2);
  *(void *)(a1 + 64_Block_object_dispose(va, 8) = fd;
  if (fd)
  {
    if (a4) {
      *(void *)(a1 + 664) = _Block_copy(a4);
    }
    if (a5) {
      *(void *)(a1 + 672) = _Block_copy(a5);
    }
    *(_DWORD *)(a1 + 656) = a3;
    if (*(_DWORD *)(a1 + 4) != 2) {
      *(_DWORD *)(a1 + 4) = 1;
    }
    return ktrace_start(a1, 0LL);
  }

  else
  {
    uint64_t v11 = *__error();
    ktrace_log_init();
    uint64_t v12 = (os_log_s *)ktrace_log;
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
      ktrace_start_writing_fd_cold_3(v11, v12, v13, v14, v15, v16, v17, v18);
    }
    *__error() = v11;
    return *__error();
  }

uint64_t ktrace_start_writing_ktrace_file(unint64_t a1, uint64_t a2, int a3, void *aBlock, void *a5)
{
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  if (!a2) {
    ktrace_remotetime_update_params_cold_1();
  }
  if ((*(_DWORD *)a1 | 2) != 2) {
    _session_start_live_cold_4();
  }
  *(void *)(a1 + 64_Block_object_dispose(va, 8) = a2;
  if (aBlock) {
    *(void *)(a1 + 664) = _Block_copy(aBlock);
  }
  if (a5) {
    *(void *)(a1 + 672) = _Block_copy(a5);
  }
  *(_DWORD *)(a1 + 656) = a3;
  if (*(_DWORD *)(a1 + 4) != 2) {
    *(_DWORD *)(a1 + 4) = 1;
  }
  if (*(_DWORD *)(a2 + 16) == 4) {
    ktrace_file_write_header_system_default(a2);
  }
  return ktrace_start(a1, 0LL);
}

uint64_t ktrace_start_writing_path(_DWORD *a1, char *a2, unsigned int a3)
{
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  if (!a2) {
    ktrace_remotetime_update_params_cold_1();
  }
  if ((*a1 | 2) != 2) {
    _session_start_live_cold_4();
  }
  int v4 = open(a2, 1538, a3);
  if (v4 == -1) {
    return *__error();
  }
  else {
    return ktrace_start_writing_fd((unint64_t)a1, v4, 0, 0LL, 0LL);
  }
}

uint64_t ktrace_start_writing_file(_DWORD *a1, char *a2, int a3, const void *a4, const void *a5)
{
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  if (!a2) {
    ktrace_remotetime_update_params_cold_1();
  }
  if ((*a1 | 2) != 2) {
    _session_start_live_cold_4();
  }
  int v9 = open(a2, 1538, 438LL);
  if (v9 != -1) {
    return ktrace_start_writing_fd((unint64_t)a1, v9, a3, a4, a5);
  }
  uint64_t v11 = *__error();
  ktrace_log_init();
  uint64_t v12 = (os_log_s *)ktrace_log;
  if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
    ktrace_start_writing_file_cold_4(v11, v12, v13, v14, v15, v16, v17, v18);
  }
  *__error() = v11;
  if (*__error()) {
    return *__error();
  }
  else {
    return 22LL;
  }
}

uint64_t ktrace_stackshot(uint64_t a1, const void *a2)
{
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  if ((*(_WORD *)(a1 + 224) & 3) != 0) {
    ktrace_postprocessing_set_completed_handler_cold_1();
  }
  uint64_t v3 = ktrace_callback_list_add(a1, a1 + 96);
  if (!v3) {
    return 12LL;
  }
  int v4 = v3;
  v3[4] = 4;
  int v5 = _Block_copy(a2);
  uint64_t result = 0LL;
  *((void *)v4 + 3) = v5;
  _DWORD *v4 = 2;
  return result;
}

uint64_t ktrace_kperf(uint64_t a1, void *a2)
{
  return ktrace_kpdecode(a1, 0, a2);
}

uint64_t ktrace_kpdecode(uint64_t a1, char a2, void *a3)
{
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  int v6 = ktrace_callback_list_add(a1, a1 + 24);
  if (!v6) {
    return 12LL;
  }
  int v7 = v6;
  if ((a2 & 2) != 0)
  {
    v6[1] = 0xFFFFFFFF00000000LL;
    *(_BYTE *)(a1 + 16) = 1;
    int v8 = 2;
  }

  else
  {
    int v8 = 0;
    v6[1] = 0x2600000025000000LL;
  }

  *(_DWORD *)int v6 = v8;
  *((_DWORD *)v6 + 4) = 2;
  if ((a2 & 1) != 0)
  {
    int v10 = a3;
  }

  else
  {
    v12[0] = MEMORY[0x1895F87A8];
    v12[1] = 3221225472LL;
    int v12[2] = __ktrace_kpdecode_block_invoke;
    void v12[3] = &unk_189F55C78;
    v12[4] = a3;
    int v10 = v12;
  }

  uint64_t v11 = _Block_copy(v10);
  uint64_t result = 0LL;
  v7[3] = v11;
  return result;
}

uint64_t __ktrace_kpdecode_block_invoke(uint64_t a1)
{
  return kpdecode_record_free();
}

uint64_t _session_ensure_uuidmap( uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!*(void *)(result + 304))
  {
    int v8 = (void *)result;
    if (_session_machine_init(result, a2, a3, a4, a5, a6, a7, a8))
    {
      int v9 = *__error();
      ktrace_log_init();
      int v10 = (os_log_s *)ktrace_log;
      if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
        _session_ensure_uuidmap_cold_1(v9, v10);
      }
      *__error() = v9;
    }

    uint64_t result = ktrace_uuid_map_create(v8[43], v8[76]);
    v8[38] = result;
  }

  return result;
}

uint64_t _session_machine_init( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  if (*(void *)(a1 + 344)) {
    return 0LL;
  }
  uint64_t v10 = *(void *)(a1 + 608);
  if (v10)
  {
    uint64_t v11 = MEMORY[0x1895F87A8];
    v20[0] = MEMORY[0x1895F87A8];
    v20[1] = 3221225472LL;
    v20[2] = ___session_machine_init_block_invoke;
    v20[3] = &__block_descriptor_40_e149_B16__0__ktrace_chunk___ktrace_file_Q___q____CFData__QISS__ktrace_chunk__ktrace_chunk_array____ktrace_chunk___ktrace_chunk_QQQqq______ktrace_chunk___8l;
    v20[4] = a1;
    uint64_t result = ktrace_file_header_iterate(v10, 0LL, (uint64_t)v20, a4, a5, a6, a7, a8);
    if (!(_DWORD)result)
    {
      if (!*(void *)(a1 + 344))
      {
        uint64_t v17 = *(void *)(a1 + 608);
        v19[0] = v11;
        v19[1] = 3221225472LL;
        v19[2] = ___session_machine_init_block_invoke_2;
        v19[3] = &__block_descriptor_40_e149_B16__0__ktrace_chunk___ktrace_file_Q___q____CFData__QISS__ktrace_chunk__ktrace_chunk_array____ktrace_chunk___ktrace_chunk_QQQqq______ktrace_chunk___8l;
        v19[4] = a1;
        return ktrace_file_iterate(v17, 0LL, (uint64_t)v19, v12, v13, v14, v15, v16);
      }

      return 0LL;
    }
  }

  else
  {
    uint64_t current = ktrace_machine_create_current();
    *(void *)(a1 + 344) = current;
    if (current) {
      return 0LL;
    }
    else {
      return 22LL;
    }
  }

  return result;
}

_TtC6ktrace12ProviderList *_session_ensure_providers( _TtC6ktrace12ProviderList *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!result[25].super.isa)
  {
    int v8 = result;
    _session_machine_init((uint64_t)result, a2, a3, a4, a5, a6, a7, a8);
    uint64_t result = -[ProviderList initWithMachine:]( objc_alloc(&OBJC_CLASS____TtC6ktrace12ProviderList),  "initWithMachine:",  *(void *)v8[14].providers);
    v8[25].super.isa = (Class)result;
  }

  return result;
}

void _session_handle_stackshot(uint64_t a1, unint64_t a2)
{
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  uint64_t v3 = *(uint64_t **)(a1 + 320);
  if (v3)
  {
    unint64_t v5 = *(void *)(a1 + 328);
    uint64_t v6 = MEMORY[0x1895F87A8];
    while (v5 <= a2)
    {
      uint64_t v7 = *(void *)(a1 + 496);
      *(void *)(a1 + 496) = v5;
      if ((*(_DWORD *)(a1 + 260) || *(_DWORD *)(a1 + 280)) && *(void *)(a1 + 296))
      {
        v15[0] = v6;
        v15[1] = 3221225472LL;
        v15[2] = ___session_handle_stackshot_block_invoke;
        v15[3] = &__block_descriptor_40_e37_v24__0_kcdata_iter___kcdata_item__v_8l;
        _OWORD v15[4] = a1;
        ktrace_stackshot_chunk_unwrap(v3, (uint64_t)v15);
      }

      if (*(_DWORD *)(a1 + 284))
      {
        int v8 = *(uint64_t **)(a1 + 320);
        v14[0] = v6;
        v14[1] = 3221225472LL;
        int v14[2] = ___session_handle_stackshot_block_invoke_2;
        v14[3] = &__block_descriptor_40_e37_v24__0_kcdata_iter___kcdata_item__v_8l;
        v14[4] = a1;
        ktrace_stackshot_chunk_unwrap(v8, (uint64_t)v14);
      }

      if (*(_DWORD *)(a1 + 96))
      {
        uint64_t v9 = 0LL;
        unint64_t v10 = 0LL;
        do
        {
          uint64_t v11 = *(void *)(a1 + 104) + v9;
          if (*(_DWORD *)(v11 + 16) != 4) {
            ktrace_remotetime_update_params_cold_1();
          }
          ktrace_stackshot_chunk_unwrap(*(uint64_t **)(a1 + 320), *(void *)(v11 + 24));
          *(void *)(a1 + 496) = v7;
          ++v10;
          v9 += 32LL;
        }

        while (v10 < *(unsigned int *)(a1 + 96));
      }

      uint64_t v12 = *(void **)(a1 + 320);
      uint64_t v13 = (uint64_t *)v12[13];
      if (!*(_DWORD *)a1) {
        ktrace_chunk_destroy(v12);
      }
      *(void *)(a1 + 320) = v13;
      if (!v13)
      {
        *(void *)(a1 + 32_Block_object_dispose(va, 8) = -1LL;
        return;
      }

      unint64_t v5 = ktrace_stackshot_chunk_timestamp(v13);
      uint64_t v3 = *(uint64_t **)(a1 + 320);
      *(void *)(a1 + 32_Block_object_dispose(va, 8) = v5;
      if (!v3) {
        return;
      }
    }
  }

void ___session_handle_stackshot_block_invoke(uint64_t a1, uint64_t a2, unint64_t a3)
{
}

void ___session_handle_stackshot_block_invoke_2( uint64_t a1, kcdata_item *a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v11.item = a2;
  v11.end = a3;
  ktrace_uuid_map_update_with_stackshot(*(void *)(*(void *)(a1 + 32) + 304LL), v11, *(void *)(a1 + 32));
}

_BYTE *ktrace_compute_filter(uint64_t a1)
{
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  uint64_t v2 = *(_BYTE **)(a1 + 8);
  if (!v2)
  {
    uint64_t v2 = malloc(0x2000uLL);
    *(void *)(a1 + _Block_object_dispose(va, 8) = v2;
  }

  bzero(v2, 0x2000uLL);
  if (*(_DWORD *)(a1 + 260) || *(_DWORD *)(a1 + 280) || *(void *)(a1 + 88))
  {
    v2[224] |= 3u;
    if (*(_DWORD *)(a1 + 280)) {
      v2[52] |= 0x40u;
    }
  }

  if (*(_DWORD *)(a1 + 276)) {
    v2[52] |= 0x80u;
  }
  if (*(_DWORD *)(a1 + 268)) {
    v2[96] |= 2u;
  }
  if (*(_DWORD *)(a1 + 272)) {
    v2[40] |= 1u;
  }
  if (*(_DWORD *)(a1 + 284)) {
    v2[992] |= 0x20u;
  }
  if (*(_DWORD *)(a1 + 288)) {
    v2[48] |= 1u;
  }
  uint64_t v3 = *(unsigned int *)(a1 + 24);
  if ((int)v3 >= 1)
  {
    uint64_t v4 = 0LL;
    uint64_t v5 = *(void *)(a1 + 32);
    do
    {
      uint64_t v6 = (int *)(v5 + 32 * v4);
      int v8 = *v6;
      uint64_t v7 = v6 + 2;
      if (v8 == 1)
      {
        for (uint64_t i = 0LL; i != 0x2000; i += 8LL)
          *(void *)&v2[i] |= *(void *)(*(void *)v7 + i);
      }

      else
      {
        unsigned int v10 = v7[1] - 1;
        unsigned int v11 = HIWORD(*v7);
        if (v11 <= HIWORD(v10))
        {
          int v12 = HIWORD(v10) + 1;
          do
          {
            v2[(unint64_t)v11 >> 3] |= 1 << (v11 & 7);
            ++v11;
          }

          while (v12 != v11);
        }
      }

      ++v4;
    }

    while (v4 != v3);
  }

  return v2;
}

uint64_t ktrace_set_use_existing(uint64_t a1)
{
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  if (*(_DWORD *)a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  if ((*(_WORD *)(a1 + 224) & 3) != 0) {
    ktrace_set_remotetime_conversion_enabled_cold_2();
  }
  if (!v3[0]) {
    return 55LL;
  }
  uint64_t result = 0LL;
  *(_DWORD *)a1 = 2;
  return result;
}

char *ktrace_set_reason(uint64_t a1, char *__s1)
{
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  if ((*(_WORD *)(a1 + 224) & 1) != 0) {
    ktrace_callback_list_add_cold_4();
  }
  uint64_t result = strdup(__s1);
  *(void *)(a1 + 696) = result;
  return result;
}

uint64_t ktrace_set_trigger_kind(uint64_t result, int a2)
{
  if (!result) {
    ktrace_remotetime_update_params_cold_1();
  }
  if ((*(_WORD *)(result + 224) & 1) != 0) {
    ktrace_callback_list_add_cold_4();
  }
  *(_DWORD *)(result + 712) = a2;
  return result;
}

void ktrace_set_command_argv(uint64_t a1, const char **a2)
{
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  if (!a2) {
    ktrace_remotetime_update_params_cold_1();
  }
  uint64_t v4 = *a2;
  if (!*a2)
  {
    uint64_t v9 = (char *)malloc(1uLL);
LABEL_15:
    *(void *)(a1 + 704) = v9;
    return;
  }

  uint64_t v5 = 0LL;
  uint64_t v6 = a2 + 1;
  uint64_t v7 = *a2;
  do
  {
    v5 += strlen(v7) + 1;
    int v8 = *v6++;
    uint64_t v7 = v8;
  }

  while (v8);
  uint64_t v9 = (char *)malloc(v5 + 1);
  if (!v4) {
    goto LABEL_15;
  }
  uint64_t v10 = 0LL;
  unsigned int v11 = a2 + 1;
  while (1)
  {
    int v12 = v10 ? " " : "";
    unsigned int v13 = snprintf(&v9[v10], v5 - v10, "%s%s", v12, v4);
    if ((v13 & 0x80000000) != 0) {
      break;
    }
    v10 += v13;
    uint64_t v14 = *v11++;
    uint64_t v4 = v14;
    if (!v14) {
      goto LABEL_15;
    }
  }

  free(v9);
}

uint64_t ktrace_set_buffer_size(uint64_t result, uint64_t a2)
{
  if (!result) {
    ktrace_remotetime_update_params_cold_1();
  }
  if ((*(_WORD *)(result + 224) & 1) != 0) {
    ktrace_callback_list_add_cold_4();
  }
  *(void *)(result + 336) = a2;
  return result;
}

uint64_t ktrace_get_buffer_size(uint64_t a1)
{
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  return *(void *)(a1 + 336);
}

uint64_t ktrace_set_collection_interval(uint64_t result, int a2)
{
  if (!result) {
    ktrace_remotetime_update_params_cold_1();
  }
  if ((*(_WORD *)(result + 224) & 1) != 0) {
    ktrace_callback_list_add_cold_4();
  }
  *(_DWORD *)(result + 152) = a2;
  return result;
}

uint64_t ktrace_get_collection_interval(uint64_t a1)
{
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  return *(unsigned int *)(a1 + 152);
}

uint64_t ktrace_set_collection_qos(uint64_t result, int a2)
{
  if (!result) {
    ktrace_remotetime_update_params_cold_1();
  }
  if ((*(_WORD *)(result + 224) & 1) != 0) {
    ktrace_callback_list_add_cold_4();
  }
  *(_DWORD *)(result + 144) = a2;
  return result;
}

uint64_t ktrace_set_collection_priority(uint64_t result, int a2)
{
  if (!result) {
    ktrace_remotetime_update_params_cold_1();
  }
  if ((*(_WORD *)(result + 224) & 1) != 0) {
    ktrace_callback_list_add_cold_4();
  }
  *(_DWORD *)(result + 14_Block_object_dispose(va, 8) = a2;
  return result;
}

uint64_t ktrace_get_collection_qos(uint64_t a1)
{
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  return *(unsigned int *)(a1 + 144);
}

uint64_t ktrace_get_collection_priority(uint64_t a1)
{
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  return *(unsigned int *)(a1 + 148);
}

uint64_t ktrace_set_no_postprocessing(uint64_t result)
{
  if (!result) {
    ktrace_remotetime_update_params_cold_1();
  }
  *(_BYTE *)(result + 828) |= 1u;
  return result;
}

void *ktrace_set_writing_filter(uint64_t a1, void *aBlock)
{
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  uint64_t v4 = *(const void **)(a1 + 680);
  if (v4) {
    _Block_release(v4);
  }
  uint64_t result = _Block_copy(aBlock);
  *(void *)(a1 + 680) = result;
  return result;
}

uint64_t ktrace_add_stackshot_flags(uint64_t result, uint64_t a2)
{
  if (!result) {
    ktrace_remotetime_update_params_cold_1();
  }
  *(void *)(result + 168) |= a2;
  return result;
}

uint64_t ktrace_is_kernel_64_bit(uint64_t a1)
{
  uint64_t v6 = *MEMORY[0x1895F89C0];
  if (*(_DWORD *)a1 == 1) {
    return ktrace_file_is_64_bit(*(void *)(a1 + 608));
  }
  *(_OWORD *)uint64_t v5 = xmmword_186C5D168;
  size_t v2 = 648LL;
  if (sysctl(v5, 4u, v3, &v2, 0LL, 0LL) == -1) {
    return 0LL;
  }
  else {
    return (v4 >> 2) & 1;
  }
}

BOOL ___session_machine_init_block_invoke(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = ktrace_machine_create(a2);
  if (v3) {
    *(void *)(*(void *)(a1 + 32) + 344LL) = v3;
  }
  return v3 == 0;
}

BOOL ___session_machine_init_block_invoke_2(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = ktrace_machine_create(a2);
  if (v3) {
    *(void *)(*(void *)(a1 + 32) + 344LL) = v3;
  }
  return v3 == 0;
}

uint64_t ktrace_get_machine( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  int v9 = _session_machine_init(a1, a2, a3, a4, a5, a6, a7, a8);
  *__error() = v9;
  return *(void *)(a1 + 344);
}

uint64_t _session_cpus_init( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  if (*(void *)(a1 + 352)) {
    return 0LL;
  }
  uint64_t v10 = *(void *)(a1 + 608);
  if (v10)
  {
    v12[0] = MEMORY[0x1895F87A8];
    v12[1] = 3221225472LL;
    int v12[2] = ___session_cpus_init_block_invoke;
    void v12[3] = &__block_descriptor_40_e149_B16__0__ktrace_chunk___ktrace_file_Q___q____CFData__QISS__ktrace_chunk__ktrace_chunk_array____ktrace_chunk___ktrace_chunk_QQQqq______ktrace_chunk___8l;
    v12[4] = a1;
    return ktrace_file_header_iterate(v10, 0LL, (uint64_t)v12, a4, a5, a6, a7, a8);
  }

  else
  {
    uint64_t current = ktrace_cpus_create_current();
    *(void *)(a1 + 352) = current;
    if (current) {
      return 0LL;
    }
    else {
      return 22LL;
    }
  }

BOOL ___session_cpus_init_block_invoke(uint64_t a1, uint64_t *a2)
{
  *(void *)(*(void *)(a1 + 32) + 352LL) = ktrace_cpus_create(a2);
  return *(void *)(*(void *)(a1 + 32) + 352LL) == 0LL;
}

uint64_t ktrace_get_cpus(uint64_t a1)
{
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  return *(void *)(a1 + 352);
}

void *ktrace_set_thread_exit_handler(uint64_t a1, void *aBlock)
{
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  if ((*(_WORD *)(a1 + 224) & 3) != 0) {
    ktrace_set_remotetime_conversion_enabled_cold_2();
  }
  unsigned int v4 = *(const void **)(a1 + 88);
  if (v4) {
    _Block_release(v4);
  }
  if (aBlock) {
    uint64_t result = _Block_copy(aBlock);
  }
  else {
    uint64_t result = 0LL;
  }
  *(void *)(a1 + 8_Block_object_dispose(va, 8) = result;
  return result;
}

void *ktrace_set_completion_handler(uint64_t a1, void *aBlock)
{
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  if ((*(_WORD *)(a1 + 224) & 3) != 0) {
    ktrace_set_remotetime_conversion_enabled_cold_2();
  }
  unsigned int v4 = *(const void **)(a1 + 56);
  if (v4) {
    _Block_release(v4);
  }
  if (aBlock) {
    uint64_t result = _Block_copy(aBlock);
  }
  else {
    uint64_t result = 0LL;
  }
  *(void *)(a1 + 56) = result;
  return result;
}

void *ktrace_set_dropped_events_handler(uint64_t a1, void *aBlock)
{
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  if ((*(_WORD *)(a1 + 224) & 3) != 0) {
    ktrace_set_remotetime_conversion_enabled_cold_2();
  }
  unsigned int v4 = *(const void **)(a1 + 64);
  if (v4) {
    _Block_release(v4);
  }
  if (aBlock) {
    uint64_t result = _Block_copy(aBlock);
  }
  else {
    uint64_t result = 0LL;
  }
  *(void *)(a1 + 64) = result;
  return result;
}

void *ktrace_set_post_processing_handler(uint64_t a1, void *aBlock)
{
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  if ((*(_WORD *)(a1 + 224) & 3) != 0) {
    ktrace_set_remotetime_conversion_enabled_cold_2();
  }
  unsigned int v4 = *(const void **)(a1 + 72);
  if (v4) {
    _Block_release(v4);
  }
  if (aBlock) {
    uint64_t result = _Block_copy(aBlock);
  }
  else {
    uint64_t result = 0LL;
  }
  *(void *)(a1 + 72) = result;
  return result;
}

double ktrace_set_supplemental_timebase(uint64_t a1, double *a2)
{
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  if (!a2) {
    ktrace_remotetime_update_params_cold_1();
  }
  double result = *a2;
  *(double *)(a1 + 424) = *a2;
  return result;
}

uint64_t ktrace_parse_arg(uint64_t a1, int a2, uint64_t a3, int a4)
{
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  if (!a3) {
    ktrace_remotetime_update_params_cold_1();
  }
  uint64_t v5 = 1LL;
  if (a4 <= 81)
  {
    if (a4 != 67)
    {
      if (a4 != 69)
      {
        if (a4 == 70)
        {
          if ((*(_WORD *)(a1 + 224) & 3) != 0) {
            ktrace_set_remotetime_conversion_enabled_cold_2();
          }
          uint64_t v5 = 0LL;
          if (*(_DWORD *)a1 == 1) {
            int v6 = 4;
          }
          else {
            int v6 = 3;
          }
          *(_DWORD *)a1 = v6;
        }

        return v5;
      }

      if (ktrace_set_use_existing(a1))
      {
        int v9 = (FILE *)*MEMORY[0x1895F89D0];
        uint64_t v10 = "Unable to use existing trace buffer.\n";
        uint64_t v5 = 1LL;
        size_t v11 = 37LL;
        goto LABEL_31;
      }

      return 0LL;
    }

    int v12 = (_DWORD *)MEMORY[0x1895FC2A0];
    ktrace_session_add_codes_file(a1, *(char **)(a3 + 8LL * (int)*MEMORY[0x1895FC2A0]));
    uint64_t v5 = 0LL;
    ++*v12;
    return v5;
  }

  if (a4 != 120)
  {
    if (a4 != 112)
    {
      if (a4 == 82)
      {
        uint64_t v7 = (int)*MEMORY[0x1895FC2A0];
        int v8 = *(const char **)(a3 + 8 * v7);
        *MEMORY[0x1895FC2A0] = v7 + 1;
        if (!v8)
        {
          uint64_t v5 = 1LL;
          fwrite("No trace file specified.\n", 0x19uLL, 1uLL, (FILE *)*MEMORY[0x1895F89D0]);
          return v5;
        }

        if (ktrace_set_file(a1, v8))
        {
          int v9 = (FILE *)*MEMORY[0x1895F89D0];
          uint64_t v10 = "Unable to use trace file.\n";
          uint64_t v5 = 1LL;
          size_t v11 = 26LL;
LABEL_31:
          fwrite(v10, v11, 1uLL, v9);
          return v5;
        }

        return 0LL;
      }

      return v5;
    }

    uint64_t v17 = (int)*MEMORY[0x1895FC2A0];
    if ((int)v17 < a2)
    {
      uint64_t v18 = *(const char **)(a3 + 8 * v17);
      *MEMORY[0x1895FC2A0] = v17 + 1;
      int v19 = atoi(v18);
      return ktrace_filter_pid(a1, v19);
    }

    int v9 = (FILE *)*MEMORY[0x1895F89D0];
    uint64_t v10 = "-p requires an argument\n";
LABEL_30:
    uint64_t v5 = 1LL;
    size_t v11 = 24LL;
    goto LABEL_31;
  }

  uint64_t v13 = (int)*MEMORY[0x1895FC2A0];
  if ((int)v13 >= a2)
  {
    int v9 = (FILE *)*MEMORY[0x1895F89D0];
    uint64_t v10 = "-x requires an argument\n";
    goto LABEL_30;
  }

  uint64_t v14 = *(const char **)(a3 + 8 * v13);
  *MEMORY[0x1895FC2A0] = v13 + 1;
  int v15 = atoi(v14);
  return ktrace_exclude_pid(a1, v15);
}

uint64_t ktrace_set_mode(uint64_t a1, unsigned int a2)
{
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  if ((*(_WORD *)(a1 + 224) & 3) != 0) {
    ktrace_set_remotetime_conversion_enabled_cold_2();
  }
  if (a2 >= 5) {
    _session_teardown_cold_2();
  }
  if (a2 == 3)
  {
    if (*(_DWORD *)a1 == 1) {
      a2 = 4;
    }
    else {
      a2 = 3;
    }
  }

  *(_DWORD *)a1 = a2;
  return 0LL;
}

uint64_t ktrace_parse_args(uint64_t a1, int a2, char **a3)
{
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  if (!a3) {
    ktrace_remotetime_update_params_cold_1();
  }
  *MEMORY[0x1895FC298] = 0;
  int v6 = (char *)MEMORY[0x1895FC2A8];
  while (getopt(a2, a3, "") != -1)
  {
  }

  return 0LL;
}

uint64_t ktrace_set_interactive(uint64_t result)
{
  *(_DWORD *)(result + 152) = 500;
  return result;
}

void ktrace_set_signal_handler(uint64_t a1)
{
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  *(_DWORD *)(a1 + 152) = 500;
  if (ktrace_set_signal_handler_signal_queue_once != -1) {
    dispatch_once(&ktrace_set_signal_handler_signal_queue_once, &__block_literal_global_7);
  }
  if ((*(_WORD *)(a1 + 224) & 3) != 0) {
    ktrace_set_remotetime_conversion_enabled_cold_2();
  }
  uint64_t v2 = MEMORY[0x1895F87A8];
  v13[0] = MEMORY[0x1895F87A8];
  v13[1] = 3221225472LL;
  v13[2] = __ktrace_set_signal_handler_block_invoke_2;
  _OWORD v13[3] = &__block_descriptor_40_e5_v8__0l;
  v13[4] = a1;
  uint64_t v3 = dispatch_source_create(MEMORY[0x1895F8B68], 2uLL, 0LL, (dispatch_queue_t)ktrace_set_signal_handler_signal_queue);
  *(void *)(a1 + 176) = v3;
  v11[0] = 0LL;
  v11[1] = v11;
  void v11[2] = 0x2020000000LL;
  int v12 = 0;
  handler[0] = v2;
  handler[1] = 3221225472LL;
  handler[2] = __ktrace_set_signal_handler_block_invoke_3;
  handler[3] = &unk_189F55AB0;
  handler[4] = v11;
  handler[5] = a1;
  dispatch_source_set_event_handler(v3, handler);
  signal(2, (void (__cdecl *)(int))1);
  unsigned int v4 = dispatch_source_create(MEMORY[0x1895F8B68], 1uLL, 0LL, (dispatch_queue_t)ktrace_set_signal_handler_signal_queue);
  *(void *)(a1 + 184) = v4;
  dispatch_source_set_event_handler(v4, v13);
  signal(1, (void (__cdecl *)(int))1);
  uint64_t v5 = dispatch_source_create( MEMORY[0x1895F8B68],  0xDuLL,  0LL,  (dispatch_queue_t)ktrace_set_signal_handler_signal_queue);
  *(void *)(a1 + 200) = v5;
  dispatch_source_set_event_handler(v5, v13);
  signal(13, (void (__cdecl *)(int))1);
  int v6 = dispatch_source_create( MEMORY[0x1895F8B68],  0xFuLL,  0LL,  (dispatch_queue_t)ktrace_set_signal_handler_signal_queue);
  *(void *)(a1 + 192) = v6;
  dispatch_source_set_event_handler(v6, v13);
  signal(15, (void (__cdecl *)(int))1);
  uint64_t v7 = dispatch_source_create(MEMORY[0x1895F8B68], 3uLL, 0LL, (dispatch_queue_t)ktrace_set_signal_handler_signal_queue);
  *(void *)(a1 + 20_Block_object_dispose(va, 8) = v7;
  dispatch_source_set_event_handler(v7, v13);
  signal(3, (void (__cdecl *)(int))1);
  v9[0] = v2;
  v9[1] = 3221225472LL;
  v9[2] = __ktrace_set_signal_handler_block_invoke_4;
  v9[3] = &__block_descriptor_40_e5_v8__0l;
  v9[4] = a1;
  int v8 = dispatch_source_create( MEMORY[0x1895F8B68],  0x1DuLL,  0LL,  (dispatch_queue_t)ktrace_set_signal_handler_signal_queue);
  *(void *)(a1 + 216) = v8;
  dispatch_source_set_event_handler(v8, v9);
  signal(29, (void (__cdecl *)(int))1);
  _Block_object_dispose(v11, 8);
}

void sub_186BC8F48( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
}

dispatch_queue_t __ktrace_set_signal_handler_block_invoke()
{
  unint64_t v0 = dispatch_queue_attr_make_with_qos_class(0LL, QOS_CLASS_USER_INITIATED, -1);
  dispatch_queue_t result = dispatch_queue_create("com.apple.libktrace.signals", v0);
  ktrace_set_signal_handler_signal_queue = (uint64_t)result;
  if (!result) {
    ktrace_remotetime_update_params_cold_1();
  }
  return result;
}

void __ktrace_set_signal_handler_block_invoke_2(uint64_t a1)
{
}

void __ktrace_set_signal_handler_block_invoke_3(uint64_t a1)
{
  uint64_t v2 = *(_DWORD **)(a1 + 40);
  if (*v2 == 1)
  {
    BOOL v3 = 1;
  }

  else
  {
    uint64_t v4 = *(void *)(*(void *)(a1 + 32) + 8LL);
    int v5 = *(_DWORD *)(v4 + 24);
    *(_DWORD *)(v4 + 24) = v5 + 1;
    BOOL v3 = v5 != 0;
  }

  ktrace_end((uint64_t)v2, v3);
}

uint64_t __ktrace_set_signal_handler_block_invoke_4(uint64_t a1)
{
  return printf("%llu events seen\n", *(void *)(*(void *)(a1 + 32) + 160LL));
}

uint64_t ktrace_get_coprocessor_tracing_enabled(uint64_t a1)
{
  return (*(unsigned __int16 *)(a1 + 224) >> 9) & 1;
}

uint64_t ktrace_set_coprocessor_tracing_enabled(uint64_t result, int a2)
{
  if (a2) {
    __int16 v2 = 512;
  }
  else {
    __int16 v2 = 0;
  }
  *(_WORD *)(result + 224) = *(_WORD *)(result + 224) & 0xFDFF | v2;
  return result;
}

dispatch_queue_t ktrace_set_trailing_duration(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 4) == 2) {
    ktrace_remotetime_update_params_cold_1();
  }
  *(void *)(a1 + 640) = ktrace_time_ringbuffer_create(a2);
  *(_DWORD *)(a1 + 4) = 2;
  dispatch_queue_t result = dispatch_queue_create("com.apple.ktrace.trailing_processing", 0LL);
  *(void *)(a1 + 232) = result;
  return result;
}

uint64_t ktrace_get_mode(unsigned int *a1)
{
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  return *a1;
}

uint64_t ktrace_add_client(uint64_t a1, uint64_t a2, int a3)
{
  if (*(_DWORD *)a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  if (*(void *)(a1 + 592)) {
    return 22LL;
  }
  uint64_t result = 0LL;
  *(void *)(a1 + 592) = a2;
  if (a3) {
    __int16 v5 = 8;
  }
  else {
    __int16 v5 = 0;
  }
  *(_WORD *)(a1 + 224) = *(_WORD *)(a1 + 224) & 0xFFF7 | v5;
  return result;
}

uint64_t ktrace_get_end_reason(uint64_t a1)
{
  return *(unsigned int *)(a1 + 808);
}

uint64_t _session_providers(uint64_t a1)
{
  return *(void *)(a1 + 600);
}

uint64_t ktrace_stream_create(int a1, char a2, int a3)
{
  if (ktrace_stream_create_once != -1) {
    dispatch_once(&ktrace_stream_create_once, &__block_literal_global_8);
  }
  uint64_t Instance = _CFRuntimeCreateInstance();
  uint64_t v7 = Instance;
  if (Instance)
  {
    *(void *)(Instance + 16) = 0LL;
    bzero((void *)(Instance + 32), 0x398uLL);
    *(void *)(v7 + 952) = 0LL;
    *(_DWORD *)(v7 + 24) = a1;
    *(_BYTE *)(v7 + 972) = a2;
    if ((a3 & 1) != 0) {
      uint64_t v8 = 2LL;
    }
    else {
      uint64_t v8 = 32LL;
    }
    *(void *)(v7 + 960) = dispatch_semaphore_create(v8);
    *(_DWORD *)(v7 + 96_Block_object_dispose(va, 8) = a3;
  }

  return v7;
}

uint64_t __ktrace_stream_create_block_invoke()
{
  uint64_t result = _CFRuntimeRegisterClass();
  ktrace_stream_typeid = result;
  if (!result) {
    ktrace_remotetime_update_params_cold_1();
  }
  return result;
}

uint64_t ktrace_stream_add(uint64_t a1, uint64_t a2)
{
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  if (!a2) {
    ktrace_remotetime_update_params_cold_1();
  }
  int v4 = *(unsigned __int8 *)(a1 + 972);
  int v5 = ktrace_chunk_tag(a2);
  switch(v5)
  {
    case 7680:
      unint64_t v6 = 8LL;
      break;
    case 20982:
      unint64_t v6 = 0LL;
      break;
    case 7936:
      unint64_t v6 = 12LL;
      break;
    default:
      return 22LL;
  }

  if (ktrace_chunk_size(a2) <= v6) {
    return 55LL;
  }
  uint64_t v7 = malloc(0x20uLL);
  if (!v7) {
    return 12LL;
  }
  uint64_t v8 = *(void *)(a1 + 40);
  void v7[2] = 0LL;
  v7[3] = v8;
  *uint64_t v7 = a2;
  v7[1] = 0LL;
  if (v8) {
    *(void *)(v8 + 16) = v7;
  }
  if (!*(void *)(a1 + 32)) {
    *(void *)(a1 + 32) = v7;
  }
  uint64_t v9 = 0LL;
  *(void *)(a1 + 40) = v7;
  return v9;
}

uint64_t ktrace_stream_iterate_group( uint64_t a1, size_t a2, dispatch_queue_s *a3, dispatch_group_s *a4, uint64_t a5)
{
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  if (!a5) {
    ktrace_remotetime_update_params_cold_1();
  }
  uint64_t v8 = a1 + 32;
  uint64_t v7 = *(uint64_t **)(a1 + 32);
  if (v7)
  {
    uint64_t v31 = a1 + 48;
    while (1)
    {
      int v12 = (uint64_t *)*v7;
      if (!*v7) {
        return 0LL;
      }
      int v13 = ktrace_chunk_tag(*v7);
      unint64_t v14 = ktrace_chunk_size((uint64_t)v12);
      unint64_t v15 = *(void *)(*(void *)v8 + 8LL);
      if (v15 > v14) {
        ktrace_remotetime_update_params_cold_1();
      }
      unint64_t v16 = v14;
      dispatch_semaphore_wait(*(dispatch_semaphore_t *)(a1 + 960), 0xFFFFFFFFFFFFFFFFLL);
      if (v13 == 20982) {
        break;
      }
      if (v13 == 7936)
      {
        if (v16 < 0xD) {
          goto LABEL_47;
        }
        if (!*(void *)(*(void *)v8 + 8LL)) {
          *(void *)(*(void *)v8 + 8LL) = 12LL;
        }
        unint64_t v25 = 0x200000LL;
        if ((*(_DWORD *)(a1 + 968) & 1) == 0) {
          unint64_t v25 = 0x400000LL;
        }
        if (v25 >= a2) {
          size_t v20 = a2;
        }
        else {
          size_t v20 = v25;
        }
        if (*(_BYTE *)(a1 + 972)) {
          uint64_t v18 = (uint64_t (*)(const UInt8 *, uint64_t *, char *, size_t *, uint64_t))stream_decompress_64;
        }
        else {
          uint64_t v18 = (uint64_t (*)(const UInt8 *, uint64_t *, char *, size_t *, uint64_t))stream_decompress_32;
        }
        uint64_t v19 = a1;
        int v21 = a3;
        int v22 = a4;
        uint64_t v23 = a5;
        uint64_t v24 = v31;
LABEL_31:
        uint64_t v26 = convert_events(v19, v20, v21, v22, v23, v18, v24);
        if ((_DWORD)v26)
        {
          uint64_t v29 = v26;
          goto LABEL_49;
        }

        goto LABEL_32;
      }

      if (v13 != 7680) {
        ktrace_stream_iterate_group_cold_4();
      }
      if (v16 < 8)
      {
LABEL_47:
        uint64_t v29 = 79LL;
LABEL_49:
        dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 960));
        return v29;
      }

      unint64_t v17 = 72LL;
      if (!*(_BYTE *)(a1 + 972)) {
        unint64_t v17 = 40LL;
      }
      if (v16 < v17)
      {
        ktrace_chunk_queue_dequeue(v8);
        dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 960));
LABEL_32:
        uint64_t v7 = *(uint64_t **)v8;
        goto LABEL_33;
      }

      if (!v15) {
        unint64_t v15 = 8LL;
      }
      if (v16 - v15 >= a2) {
        unint64_t v27 = a2;
      }
      else {
        unint64_t v27 = v16 - v15;
      }
      unsigned int v28 = ktrace_chunk_map_data(v12, v15, v27);
      if (!v28)
      {
        uint64_t v29 = *__error();
        goto LABEL_49;
      }

      block[0] = MEMORY[0x1895F87A8];
      block[1] = 0x40000000LL;
      block[2] = __ktrace_stream_iterate_group_block_invoke;
      block[3] = &unk_189F55DA0;
      block[4] = a5;
      void block[5] = v28;
      void block[6] = v27;
      void block[7] = v12;
      block[8] = a1;
      if (a4) {
        dispatch_group_async(a4, a3, block);
      }
      else {
        dispatch_async(a3, block);
      }
      uint64_t v7 = *(uint64_t **)v8;
      *(void *)(*(void *)v8 + 8LL) = v27 + v15;
      if (v27 + v15 == v16)
      {
        ktrace_chunk_queue_dequeue(v8);
        goto LABEL_32;
      }

LABEL_33:
      if (!v7) {
        return 0LL;
      }
    }

    if (*(_BYTE *)(a1 + 972)) {
      uint64_t v18 = (uint64_t (*)(const UInt8 *, uint64_t *, char *, size_t *, uint64_t))convert_artrace_events_64;
    }
    else {
      uint64_t v18 = (uint64_t (*)(const UInt8 *, uint64_t *, char *, size_t *, uint64_t))convert_artrace_events_32;
    }
    uint64_t v19 = a1;
    size_t v20 = a2;
    int v21 = a3;
    int v22 = a4;
    uint64_t v23 = a5;
    uint64_t v24 = 0LL;
    goto LABEL_31;
  }

  return 0LL;
}

    sub_186C27ED0((uint64_t)&v45);
    if (v11 == v1) {
      goto LABEL_35;
    }
LABEL_34:
    unsigned int v28 = (__int128 *)(v2 + 216 * v11);
    uint64_t v29 = v28[11];
    __int16 v55 = v28[10];
    int v56 = v29;
    uint64_t v57 = v28[12];
    int v58 = *((void *)v28 + 26);
    int v30 = v28[7];
    uint64_t v51 = v28[6];
    unsigned int v52 = v30;
    uint64_t v31 = v28[9];
    uint64_t v53 = v28[8];
    uint64_t v54 = v31;
    char v32 = v28[3];
    CFIndex v47 = v28[2];
    unsigned int v48 = v32;
    uint64_t v33 = v28[5];
    unsigned int v49 = v28[4];
    uint8_t v50 = v33;
    uint64_t v34 = v28[1];
    ++v11;
    uint64_t v45 = *v28;
    timespec v46 = v34;
  }

  char v41 = v10;
  int v13 = v72 + 32;
  unint64_t v14 = *(void *)(v78 + 16);
  unint64_t v15 = v78 + 32;
  uint64_t result = swift_bridgeObjectRetain();
  unint64_t v17 = 0LL;
  char v42 = v11;
  int v39 = v13;
  uint64_t v40 = v12;
  uint64_t v37 = v15;
  unsigned int v38 = v14;
  while (1)
  {
    uint64_t v18 = *(void *)(v13 + 24 * v17);
    if (v18 < v14)
    {
      if (v18 < 0)
      {
        __break(1u);
        return result;
      }

      char v44 = *(void *)(*(void *)(v15 + 8 * v18) + 16LL);
      if (v44) {
        break;
      }
    }

void ktrace_chunk_queue_dequeue(uint64_t a1)
{
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  __int16 v2 = *(void **)a1;
  if (v2)
  {
    uint64_t v3 = v2[2];
    *(void *)a1 = v3;
    if (v2 == *(void **)(a1 + 8)) {
      *(void *)(a1 + _Block_object_dispose(va, 8) = 0LL;
    }
    if (v3) {
      *(void *)(v3 + 24) = 0LL;
    }
    free(v2);
    ktrace_compressor_reset((_DWORD *)(a1 + 16));
  }

uint64_t __ktrace_stream_iterate_group_block_invoke(void *a1)
{
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1[8] + 960LL));
}

uint64_t convert_events( uint64_t a1, size_t a2, dispatch_queue_s *a3, dispatch_group_s *a4, uint64_t a5, uint64_t (*a6)(const UInt8 *, uint64_t *, char *, size_t *, uint64_t), uint64_t a7)
{
  uint64_t v50 = *MEMORY[0x1895F89C0];
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  if (!a3) {
    ktrace_remotetime_update_params_cold_1();
  }
  if (!a5) {
    ktrace_remotetime_update_params_cold_1();
  }
  if (!a6) {
    ktrace_remotetime_update_params_cold_1();
  }
  uint64_t v12 = a1;
  uint64_t v14 = a1 + 32;
  uint64_t v13 = *(void *)(a1 + 32);
  if (v13) {
    unint64_t v15 = *(uint64_t **)v13;
  }
  else {
    unint64_t v15 = 0LL;
  }
  unint64_t v16 = *(void *)(v13 + 8);
  unint64_t v17 = ktrace_chunk_size((uint64_t)v15);
  if (v16 >= v17) {
    return 0LL;
  }
  unint64_t v18 = v17;
  uint64_t v37 = (char *)malloc(a2);
  if (!v37) {
    return 12LL;
  }
  if (!a2)
  {
    uint64_t v24 = 0LL;
LABEL_35:
    free(v37);
    dispatch_semaphore_signal(*(dispatch_semaphore_t *)(v12 + 960));
    return v24;
  }

  uint64_t v35 = v12;
  uint64_t v36 = a6;
  uint64_t v33 = a5;
  uint64_t v34 = a4;
  queue = a3;
  uint64_t v19 = 0LL;
  while (1)
  {
    if (v18 - v16 >= 0x400000) {
      uint64_t v20 = 0x400000LL;
    }
    else {
      uint64_t v20 = v18 - v16;
    }
    unint64_t v21 = v18 - v16;
    if (v18 == v16)
    {
LABEL_25:
      ktrace_chunk_queue_dequeue(v14);
LABEL_26:
      uint64_t v24 = 0LL;
      goto LABEL_32;
    }

    int v22 = ktrace_chunk_map_data(v15, v16, v20);
    if (!v22)
    {
      uint64_t v24 = *__error();
      goto LABEL_32;
    }

    unint64_t v23 = (unint64_t)v22;
    size_t v40 = a2;
    uint64_t v41 = v20;
    uint64_t v24 = v36(v22, &v41, &v37[v19], &v40, a7);
    ktrace_chunk_unmap_data((uint64_t)v15, v23, v20);
    if ((_DWORD)v24) {
      goto LABEL_32;
    }
    size_t v25 = v40;
    if (!v40) {
      break;
    }
    v19 += v40;
    uint64_t v26 = v41;
    v16 += v41;
    *(void *)(*(void *)v14 + 8LL) = v16;
    if (v21 == v26) {
      goto LABEL_25;
    }
    a2 -= v25;
    if (!a2) {
      goto LABEL_26;
    }
  }

  if (v21 > 0x400000)
  {
    ktrace_log_init();
    int v30 = (os_log_s *)ktrace_file_log;
    if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_DEBUG)) {
      convert_events_cold_5(v20, v30);
    }
    goto LABEL_26;
  }

  *__error() = 79;
  int v27 = *__error();
  ktrace_log_init();
  unsigned int v28 = (os_log_s *)ktrace_file_log;
  if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_ERROR))
  {
    int v31 = ktrace_chunk_tag((uint64_t)v15);
    *(_DWORD *)__int128 buf = 67109888;
    int v43 = v31;
    __int16 v44 = 2048;
    unint64_t v45 = v16;
    __int16 v46 = 2048;
    unint64_t v47 = v18 - v16;
    __int16 v48 = 1024;
    int v49 = v27;
    _os_log_error_impl( &dword_186BA3000,  v28,  OS_LOG_TYPE_ERROR,  "truncated events chunk (tag = 0x%x, offset = %llu, left = %zu) (%{errno}d)",  buf,  0x22u);
  }

  *__error() = v27;
  uint64_t v24 = 79LL;
LABEL_32:
  uint64_t v12 = v35;
  if (!v19) {
    goto LABEL_35;
  }
  block[0] = MEMORY[0x1895F87A8];
  block[1] = 0x40000000LL;
  block[2] = __convert_events_block_invoke;
  block[3] = &unk_189F55DC8;
  block[4] = v33;
  void block[5] = v37;
  void block[6] = v19;
  void block[7] = v35;
  if (v34) {
    dispatch_group_async(v34, queue, block);
  }
  else {
    dispatch_async(queue, block);
  }
  return v24;
}

uint64_t stream_decompress_64( uint64_t a1, unint64_t *a2, uint64_t a3, unint64_t *a4, unsigned int *a5)
{
  *a4 = decompress_64(a5, a1, a2, a3, *a4);
  return 0LL;
}

uint64_t stream_decompress_32( uint64_t a1, unint64_t *a2, uint64_t a3, unint64_t *a4, unsigned int *a5)
{
  *a4 = decompress_32(a5, a1, a2, a3, *a4);
  return 0LL;
}

uint64_t convert_artrace_events_64(uint64_t a1, void *a2, uint64_t a3, unint64_t *a4)
{
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  if (!a2) {
    ktrace_remotetime_update_params_cold_1();
  }
  if (!a3) {
    ktrace_remotetime_update_params_cold_1();
  }
  if (*a2 >= 0x30uLL)
  {
    unint64_t v5 = 0LL;
    unint64_t v4 = 0LL;
    unint64_t v6 = *a2 / 0x30uLL;
    unint64_t v7 = *a4;
    uint64_t v8 = (_OWORD *)(a1 + 16);
    while (1)
    {
      unint64_t v9 = v4 + 64;
      if (v4 + 64 > v7) {
        break;
      }
      unint64_t v10 = *((void *)v8 - 2);
      uint64_t v11 = a3 + v4;
      *(void *)uint64_t v11 = v10 & 0xFFFFFFFFFFFFFFLL;
      uint64_t v12 = *((unsigned int *)v8 - 1);
      *(_DWORD *)(v11 + 4_Block_object_dispose(va, 8) = *((_DWORD *)v8 - 2);
      *(_DWORD *)(v11 + 52) = HIBYTE(v10);
      *(_OWORD *)(v11 + _Block_object_dispose(va, 8) = *v8;
      *(_OWORD *)(v11 + 24) = v8[1];
      *(void *)(v11 + 40) = v12;
      ++v5;
      v8 += 3;
      unint64_t v4 = v9;
      if (v6 == v5)
      {
        unint64_t v4 = v6 << 6;
        unint64_t v5 = v6;
        break;
      }
    }
  }

  else
  {
    unint64_t v4 = 0LL;
    unint64_t v5 = 0LL;
  }

  *a2 = 48 * v5;
  *a4 = v4;
  return 0LL;
}

uint64_t convert_artrace_events_32(int32x4_t *a1, void *a2, uint64_t a3, uint64_t *a4)
{
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  if (!a2) {
    ktrace_remotetime_update_params_cold_1();
  }
  if (!a3) {
    ktrace_remotetime_update_params_cold_1();
  }
  if (*a2 >= 0x30uLL)
  {
    unint64_t v5 = 0LL;
    uint64_t v4 = 0LL;
    unint64_t v6 = *a2 / 0x30uLL;
    unint64_t v7 = *a4;
    uint64_t v8 = a1 + 1;
    while (1)
    {
      uint64_t v9 = v4 + 32;
      if (v4 + 32 > v7) {
        break;
      }
      uint64_t v10 = a3 + v4;
      *(void *)uint64_t v10 = v8[-1].i64[0];
      *(int32x4_t *)(v10 + _Block_object_dispose(va, 8) = vuzp1q_s32(*v8, v8[1]);
      *(int32x2_t *)(v10 + 24) = vrev64_s32((int32x2_t)v8[-1].u64[1]);
      ++v5;
      v8 += 3;
      uint64_t v4 = v9;
      if (v6 == v5)
      {
        uint64_t v4 = 32 * v6;
        unint64_t v5 = v6;
        break;
      }
    }
  }

  else
  {
    uint64_t v4 = 0LL;
    unint64_t v5 = 0LL;
  }

  *a2 = 48 * v5;
  *a4 = v4;
  return 0LL;
}

uint64_t ktrace_stream_out_compressed(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4)
{
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  if (!a2) {
    ktrace_remotetime_update_params_cold_1();
  }
  if (a2 >= 5) {
    ktrace_remotetime_update_params_cold_1();
  }
  if (!a3) {
    ktrace_remotetime_update_params_cold_1();
  }
  if (!a4) {
    ktrace_remotetime_update_params_cold_1();
  }
  return 22LL;
}

unint64_t ktrace_stream_estimate_events(uint64_t *a1)
{
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  int v2 = ktrace_chunk_tag((uint64_t)a1);
  unint64_t v3 = ktrace_chunk_size((uint64_t)a1);
  int is_64_bit = ktrace_chunk_is_64_bit((uint64_t)a1);
  if (v2 == 20982) {
    return v3 / 0x30;
  }
  if (v2 == 7936)
  {
    else {
      return v7;
    }
  }

  else
  {
    unint64_t v5 = (v3 - 8) >> 6;
    if (!is_64_bit) {
      unint64_t v5 = (v3 - 8) >> 5;
    }
    if (v2 == 7680) {
      return v5;
    }
    else {
      return 0LL;
    }
  }

void ktrace_iter_destroy(void **a1)
{
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  int v2 = *a1;
  if (*a1)
  {
    unint64_t v3 = (const void *)v2[1];
    if (v3) {
      CFRelease(v3);
    }
    uint64_t v4 = (const void *)v2[6];
    if (v4) {
      CFRelease(v4);
    }
    free(v2);
    *a1 = 0LL;
  }

void *ktrace_stream_create_iterator(void *a1)
{
  if (!a1[4]) {
    return 0LL;
  }
  CFRetain(a1);
  int v2 = malloc(0x40uLL);
  unsigned int v7 = v2;
  if (!v2) {
    ktrace_remotetime_update_params_cold_1();
  }
  unint64_t v3 = v2;
  *((_OWORD *)v2 + 2) = 0u;
  *((_OWORD *)v2 + 3) = 0u;
  *((_OWORD *)v2 + ktrace_session_set_default_event_names_enabled(global_session, 1) = 0u;
  *int v2 = a1[4];
  v2[1] = a1;
  int inited = ktrace_iter_init_chunk((uint64_t)v2);
  if (inited)
  {
    int v5 = inited;
    ktrace_iter_destroy(&v7);
    *__error() = v5;
    return v7;
  }

  return v3;
}

uint64_t ktrace_iter_init_chunk(uint64_t a1)
{
  uint64_t v34 = *MEMORY[0x1895F89C0];
  if (*(_DWORD *)(a1 + 56)) {
    return 0LL;
  }
  unint64_t v3 = **(uint64_t ***)a1;
  int v4 = ktrace_chunk_tag((uint64_t)v3);
  if (v4 == 20982)
  {
    if ((unint64_t)ktrace_chunk_size((uint64_t)v3) >= 0x30)
    {
      uint64_t v10 = (void *)ktrace_chunk_size_t(v3);
      uint64_t v11 = ktrace_chunk_copy_cfdata((uint64_t)v3, 0LL, v10);
      *(void *)(a1 + 4_Block_object_dispose(va, 8) = v11;
      if (v11)
      {
        *(void *)(a1 + 24) = CFDataGetBytePtr(v11);
        CFIndex Length = CFDataGetLength(*(CFDataRef *)(a1 + 48));
        *(void *)(a1 + 16) = 0LL;
        uint64_t v9 = 48LL;
        *(void *)(a1 + 32) = Length;
LABEL_16:
        *(void *)(a1 + 40) = v9;
LABEL_17:
        int v13 = ktrace_chunk_tag((uint64_t)v3);
        uint64_t result = 0LL;
        *(_DWORD *)(a1 + 56) = v13;
        return result;
      }

      return 12LL;
    }

    return 107LL;
  }

  if (v4 != 7936)
  {
    if (v4 != 7680) {
      ktrace_stream_iterate_group_cold_4();
    }
    unint64_t v5 = ktrace_chunk_size((uint64_t)v3);
    unint64_t v6 = 72LL;
    if (!*(_BYTE *)(*(void *)(a1 + 8) + 972LL)) {
      unint64_t v6 = 40LL;
    }
    if (v5 >= v6)
    {
      unsigned int v7 = (void *)ktrace_chunk_size_t(v3);
      uint64_t v8 = ktrace_chunk_copy_cfdata((uint64_t)v3, 0LL, v7);
      *(void *)(a1 + 4_Block_object_dispose(va, 8) = v8;
      if (v8)
      {
        *(void *)(a1 + 24) = CFDataGetBytePtr(v8);
        *(void *)(a1 + 32) = CFDataGetLength(*(CFDataRef *)(a1 + 48));
        *(void *)(a1 + 16) = 8LL;
        uint64_t v9 = 64LL;
        if (!*(_BYTE *)(*(void *)(a1 + 8) + 972LL)) {
          uint64_t v9 = 32LL;
        }
        goto LABEL_16;
      }

      return 12LL;
    }

    return 107LL;
  }

  unint64_t v14 = ktrace_stream_estimate_events(v3);
  if (!v14) {
    return 107LL;
  }
  unint64_t v15 = v14;
  unint64_t v16 = ktrace_chunk_size_t(v3);
  unint64_t v17 = ktrace_chunk_map_data(v3, 0LL, v16);
  if (!v17) {
    return *__error();
  }
  unint64_t v18 = (unint64_t)v17;
  BOOL v19 = *(_BYTE *)(*(void *)(a1 + 8) + 972LL) == 0;
  uint64_t v20 = 64LL;
  if (!*(_BYTE *)(*(void *)(a1 + 8) + 972LL)) {
    uint64_t v20 = 32LL;
  }
  *(void *)(a1 + 40) = v20;
  char v21 = 5;
  if (!v19) {
    char v21 = 6;
  }
  CFMutableDictionaryRef Mutable = CFDataCreateMutable(0LL, v15 << v21);
  if (!Mutable)
  {
    uint64_t v31 = ktrace_chunk_size_t(v3);
    ktrace_chunk_unmap_data((uint64_t)v3, v18, v31);
    return 12LL;
  }

  unint64_t v23 = Mutable;
  CFDataSetLength(Mutable, *(void *)(a1 + 40) * v15);
  bzero(v33, 0x388uLL);
  ktrace_compressor_reset(v33);
  uint64_t v32 = ktrace_chunk_size_t(v3) - 12;
  if (*(_BYTE *)(*(void *)(a1 + 8) + 972LL)) {
    uint64_t v24 = decompress_64;
  }
  else {
    uint64_t v24 = decompress_32;
  }
  MutableBytePtr = CFDataGetMutableBytePtr(v23);
  CFIndex v26 = CFDataGetLength(v23);
  *(void *)(a1 + 32) = v24(v33, v18 + 12, (unint64_t *)&v32, (uint64_t)MutableBytePtr, v26);
  uint64_t v27 = ktrace_chunk_size_t(v3);
  ktrace_chunk_unmap_data((uint64_t)v3, v18, v27);
  if (*(void *)(a1 + 32))
  {
    uint64_t v28 = *(void *)(a1 + 32);
    if (v28 != CFDataGetLength(v23))
    {
      ktrace_log_init();
      uint64_t v29 = (os_log_s *)ktrace_file_log;
      if (os_log_type_enabled((os_log_t)ktrace_file_log, OS_LOG_TYPE_DEBUG)) {
        ktrace_iter_init_chunk_cold_2(v23, (uint64_t *)(a1 + 32), v29);
      }
      *(void *)(a1 + 32) = CFDataGetLength(v23);
    }

    BytePtr = CFDataGetBytePtr(v23);
    *(void *)(a1 + 4_Block_object_dispose(va, 8) = v23;
    *(void *)(a1 + 16) = 0LL;
    *(void *)(a1 + 24) = BytePtr;
    goto LABEL_17;
  }

  CFRelease(v23);
  return 9LL;
}

void *ktrace_stream_create_end_iterator(void *a1)
{
  if (!a1[4]) {
    return 0LL;
  }
  CFRetain(a1);
  int v2 = malloc(0x40uLL);
  uint64_t v11 = v2;
  if (!v2) {
    ktrace_remotetime_update_params_cold_1();
  }
  unint64_t v3 = v2;
  *((_OWORD *)v2 + ktrace_session_set_default_event_names_enabled(global_session, 1) = 0u;
  int v4 = v2 + 2;
  *((_OWORD *)v2 + 2) = 0u;
  *((_OWORD *)v2 + 3) = 0u;
  *int v2 = a1[5];
  v2[1] = a1;
  int inited = ktrace_iter_init_chunk((uint64_t)v2);
  if (inited)
  {
    int v6 = inited;
    ktrace_iter_destroy(&v11);
    unint64_t v3 = 0LL;
    *__error() = v6;
  }

  else
  {
    uint64_t v7 = v3[2];
    unint64_t v8 = v3[5];
    unint64_t v9 = (v3[4] - v7) / v8;
    if ((v9 & 0x8000000000000000LL) != 0) {
      ktrace_remotetime_update_params_cold_1();
    }
    void *v4 = v7 + (v9 - 1) * v8;
  }

  return v3;
}

__n128 ktrace_iter_copy(uint64_t a1)
{
  int v2 = *(const void **)(a1 + 8);
  if (v2) {
    CFRetain(v2);
  }
  unint64_t v3 = *(const void **)(a1 + 48);
  if (v3) {
    CFRetain(v3);
  }
  int v4 = malloc(0x40uLL);
  if (!v4) {
    ktrace_remotetime_update_params_cold_1();
  }
  __int128 v5 = *(_OWORD *)(a1 + 16);
  _OWORD *v4 = *(_OWORD *)a1;
  v4[1] = v5;
  __n128 result = *(__n128 *)(a1 + 32);
  __int128 v7 = *(_OWORD *)(a1 + 48);
  int v4[2] = result;
  v4[3] = v7;
  return result;
}

uint64_t ktrace_iter_prev(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t inited = ktrace_iter_init_chunk(*a1);
  if ((_DWORD)inited) {
    goto LABEL_2;
  }
  int v5 = *(_DWORD *)(v2 + 56);
  if (v5 != 7680 && v5 != 20982 && v5 != 7936) {
    ktrace_stream_iterate_group_cold_4();
  }
  if (!*(void *)(v2 + 48)) {
    ktrace_remotetime_update_params_cold_1();
  }
  unint64_t v8 = *(void *)(v2 + 16);
  unint64_t v9 = *(void *)(v2 + 40);
  BOOL v10 = v8 >= v9;
  unint64_t v11 = v8 - v9;
  if (v10)
  {
    uint64_t inited = 0LL;
    *(void *)(v2 + 16) = v11;
    return inited;
  }

  ktrace_iter_fini_chunk(v2);
  uint64_t v12 = *(void *)v2;
  if (!*(void *)(*(void *)v2 + 24LL))
  {
LABEL_17:
    uint64_t inited = 0LL;
LABEL_2:
    ktrace_iter_destroy((void **)a1);
    return inited;
  }

  while (1)
  {
    *(void *)uint64_t v2 = *(void *)(v12 + 24);
    uint64_t v13 = ktrace_iter_init_chunk(v2);
    if ((_DWORD)v13 != 107) {
      break;
    }
    uint64_t v12 = *(void *)v2;
    if (!*(void *)v2) {
      goto LABEL_17;
    }
  }

  uint64_t inited = v13;
  if ((_DWORD)v13 || !*(void *)v2) {
    goto LABEL_2;
  }
  return inited;
}

void ktrace_iter_fini_chunk(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 48);
  if (!v2) {
    ktrace_remotetime_update_params_cold_1();
  }
  CFRelease(v2);
  *(void *)(a1 + 24) = 0LL;
  *(void *)(a1 + 4_Block_object_dispose(va, 8) = 0LL;
  *(_DWORD *)(a1 + 56) = 0;
}

uint64_t ktrace_iter_next(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t inited = ktrace_iter_init_chunk(*a1);
  if ((_DWORD)inited) {
    goto LABEL_2;
  }
  int v5 = *(_DWORD *)(v2 + 56);
  if (v5 != 7680 && v5 != 20982 && v5 != 7936) {
    ktrace_stream_iterate_group_cold_4();
  }
  if (!*(void *)(v2 + 48)) {
    ktrace_remotetime_update_params_cold_1();
  }
  uint64_t v8 = *(void *)(v2 + 40);
  uint64_t v9 = v8 + *(void *)(v2 + 16);
  if ((unint64_t)(v9 + v8) <= *(void *)(v2 + 32))
  {
    uint64_t inited = 0LL;
    *(void *)(v2 + 16) = v9;
    return inited;
  }

  ktrace_iter_fini_chunk(v2);
  uint64_t v10 = *(void *)v2;
  if (!*(void *)(*(void *)v2 + 16LL))
  {
LABEL_17:
    uint64_t inited = 0LL;
LABEL_2:
    ktrace_iter_destroy((void **)a1);
    return inited;
  }

  while (1)
  {
    *(void *)uint64_t v2 = *(void *)(v10 + 16);
    uint64_t v11 = ktrace_iter_init_chunk(v2);
    if ((_DWORD)v11 != 107) {
      break;
    }
    uint64_t v10 = *(void *)v2;
    if (!*(void *)v2) {
      goto LABEL_17;
    }
  }

  uint64_t inited = v11;
  if ((_DWORD)v11 || !*(void *)v2) {
    goto LABEL_2;
  }
  return inited;
}

uint64_t ktrace_iter_next_until(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  uint64_t result = ktrace_iter_init_chunk(*a1);
  if (!(_DWORD)result)
  {
    if (!*(void *)(v4 + 48)) {
      ktrace_remotetime_update_params_cold_1();
    }
    int v6 = *(unsigned __int8 *)(*(void *)(v4 + 8) + 972LL);
    *(void *)(v4 + 16) += *(void *)(v4 + 40);
    do
    {
      int v7 = *(_DWORD *)(v4 + 56);
      if (v7 == 7680 || v7 == 7936)
      {
        uint64_t v9 = *(void *)(v4 + 16);
        unint64_t v11 = *(void *)(v4 + 32);
        uint64_t v10 = *(void *)(v4 + 40);
        while (v10 + v9 <= v11)
        {
          uint64_t v12 = *(void *)(v4 + 24) + v9;
          if (v6) {
            uint64_t v13 = 48LL;
          }
          else {
            uint64_t v13 = 28LL;
          }
          unint64_t v11 = *(void *)(v4 + 32);
          uint64_t v10 = *(void *)(v4 + 40);
          uint64_t v9 = *(void *)(v4 + 16) + v10;
          *(void *)(v4 + 16) = v9;
        }
      }

      else
      {
        if (v7 != 20982) {
          ktrace_stream_iterate_group_cold_4();
        }
        uint64_t v14 = *(void *)(v4 + 16);
        unint64_t v16 = *(void *)(v4 + 32);
        uint64_t v15 = *(void *)(v4 + 40);
        while (v15 + v14 <= v16)
        {
          if ((*(unsigned int (**)(uint64_t, void))(a2 + 16))( a2,  *(unsigned int *)(*(void *)(v4 + 24) + v14 + 8)))
          {
            return 0LL;
          }

          unint64_t v16 = *(void *)(v4 + 32);
          uint64_t v15 = *(void *)(v4 + 40);
          uint64_t v14 = *(void *)(v4 + 16) + v15;
          *(void *)(v4 + 16) = v14;
        }
      }

      uint64_t result = ktrace_iter_next(a1);
    }

    while (*a1);
  }

  return result;
}

__n128 ktrace_iter_get_event(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a1 + 56);
  if (v2 != 7680)
  {
    if (v2 == 20982)
    {
      int v6 = (__n128 *)(*(void *)(a1 + 24) + *(void *)(a1 + 16));
      unint64_t v7 = v6->n128_u64[0];
      *(void *)a2 = v6->n128_u64[0] & 0xFFFFFFFFFFFFFFLL;
      uint64_t v8 = v6->n128_u32[3];
      *(_DWORD *)(a2 + 4_Block_object_dispose(va, 8) = v6->n128_u32[2];
      *(_DWORD *)(a2 + 52) = HIBYTE(v7);
      *(__n128 *)(a2 + _Block_object_dispose(va, 8) = v6[1];
      __n128 result = v6[2];
      *(__n128 *)(a2 + 24) = result;
      *(void *)(a2 + 40) = v8;
      return result;
    }

    if (v2 != 7936) {
      ktrace_stream_iterate_group_cold_4();
    }
  }

  if (!*(void *)(a1 + 48)) {
    ktrace_remotetime_update_params_cold_1();
  }
  unint64_t v3 = (uint64_t *)(*(void *)(a1 + 24) + *(void *)(a1 + 16));
  uint64_t v4 = *v3;
  if (*(_BYTE *)(*(void *)(a1 + 8) + 972LL))
  {
    *(void *)a2 = v4;
    *(_DWORD *)(a2 + 4_Block_object_dispose(va, 8) = *((_DWORD *)v3 + 12);
    *(void *)(a2 + _Block_object_dispose(va, 8) = v3[1];
    *(void *)(a2 + 16) = v3[2];
    *(void *)(a2 + 24) = v3[3];
    *(void *)(a2 + 32) = v3[4];
    *(void *)(a2 + 40) = v3[5];
    int v5 = *((_DWORD *)v3 + 13);
  }

  else
  {
    *(void *)a2 = v4 & 0xFFFFFFFFFFFFFFLL;
    *(_DWORD *)(a2 + 4_Block_object_dispose(va, 8) = *((_DWORD *)v3 + 7);
    *(void *)(a2 + _Block_object_dispose(va, 8) = *((unsigned int *)v3 + 2);
    *(void *)(a2 + 16) = *((unsigned int *)v3 + 3);
    *(void *)(a2 + 24) = *((unsigned int *)v3 + 4);
    *(void *)(a2 + 32) = *((unsigned int *)v3 + 5);
    *(void *)(a2 + 40) = *((unsigned int *)v3 + 6);
    int v5 = *((unsigned __int8 *)v3 + 7);
  }

  *(_DWORD *)(a2 + 52) = v5;
  return result;
}

BOOL ktrace_iter_equal(unint64_t a1, unint64_t a2)
{
  if (!(a1 | a2)) {
    return 1LL;
  }
  BOOL result = 0LL;
  if (a1 && a2) {
    return *(void *)a1 == *(void *)a2 && *(void *)(a1 + 16) == *(void *)(a2 + 16);
  }
  return result;
}

void ktrace_stream_dealloc(uint64_t a1)
{
  if (a1)
  {
    unint64_t v3 = (void *)(a1 + 32);
    int v2 = *(void **)(a1 + 32);
    if (v2)
    {
      do
      {
        if (!*v2) {
          break;
        }
        ktrace_chunk_queue_dequeue((uint64_t)v3);
        int v2 = (void *)*v3;
      }

      while (*v3);
    }

    dispatch_release(*(dispatch_object_t *)(a1 + 960));
  }

uint64_t __convert_events_block_invoke(uint64_t a1)
{
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(*(void *)(a1 + 56) + 960LL));
}

void *kthmap_create()
{
  unint64_t v0 = calloc(1uLL, 0x68uLL);
  uint64_t v1 = v0;
  if (v0)
  {
    *((_BYTE *)v0 + 96) |= 3u;
    *(_OWORD *)&valueCallBacks.version = xmmword_189F55DE8;
    *(_OWORD *)&valueCallBacks.release = *(_OWORD *)&off_189F55DF8;
    valueCallBacks.equal = (CFDictionaryEqualCallBack)task_equal;
    *(_OWORD *)&v23.version = xmmword_189F55E10;
    *(_OWORD *)&v23.release = *(_OWORD *)&off_189F55E20;
    v23.equal = (CFDictionaryEqualCallBack)jetsam_coalition_equal;
    *(_OWORD *)&v22.version = xmmword_189F55E38;
    *(_OWORD *)&v22.release = *(_OWORD *)&off_189F55E48;
    v22.equal = (CFDictionaryEqualCallBack)thread_group_equal;
    CFMutableDictionaryRef v2 = CFDictionaryCreateMutable(0LL, 0LL, &int_key_callbacks, &valueCallBacks);
    v1[2] = v2;
    if (!v2) {
      goto LABEL_12;
    }
    valueCallBacks.release = 0LL;
    CFMutableDictionaryRef v3 = CFDictionaryCreateMutable(0LL, 0LL, &long_key_callbacks, &valueCallBacks);
    v1[3] = v3;
    if (!v3) {
      goto LABEL_12;
    }
    CFMutableDictionaryRef v4 = CFDictionaryCreateMutable(0LL, 0LL, &long_key_callbacks, &valueCallBacks);
    v1[4] = v4;
    if (!v4) {
      goto LABEL_12;
    }
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0LL, 0LL, &long_key_callbacks, &str_value_callbacks);
    v1[5] = Mutable;
    if (!Mutable) {
      goto LABEL_12;
    }
    CFMutableDictionaryRef v6 = CFDictionaryCreateMutable(0LL, 0LL, &long_key_callbacks, &long_value_callbacks);
    v1[6] = v6;
    if (!v6) {
      goto LABEL_12;
    }
    CFMutableDictionaryRef v7 = CFDictionaryCreateMutable(0LL, 0LL, &long_key_callbacks, &int_value_callbacks);
    v1[7] = v7;
    if (!v7) {
      goto LABEL_12;
    }
    CFMutableDictionaryRef v8 = CFDictionaryCreateMutable(0LL, 0LL, &long_key_callbacks, &v22);
    _BYTE v1[8] = v8;
    if (!v8
      || (v22.release = 0LL, CFMutableDictionaryRef v9 = CFDictionaryCreateMutable(0LL, 0LL, &long_key_callbacks, &v22), (v1[9] = v9) == 0LL)
      || (CFMutableDictionaryRef v10 = CFDictionaryCreateMutable(0LL, 0LL, &long_key_callbacks, &v23), (v1[10] = v10) == 0LL)
      || (CFMutableSetRef v11 = CFSetCreateMutable(0LL, 0LL, &long_value_set_callbacks), (v1[11] = v11) == 0LL))
    {
LABEL_12:
      uint64_t v12 = (const void *)v1[9];
      if (v12) {
        CFRelease(v12);
      }
      uint64_t v13 = (const void *)v1[8];
      if (v13) {
        CFRelease(v13);
      }
      uint64_t v14 = (const void *)v1[7];
      if (v14) {
        CFRelease(v14);
      }
      uint64_t v15 = (const void *)v1[6];
      if (v15) {
        CFRelease(v15);
      }
      unint64_t v16 = (const void *)v1[5];
      if (v16) {
        CFRelease(v16);
      }
      unint64_t v17 = (const void *)v1[4];
      if (v17) {
        CFRelease(v17);
      }
      unint64_t v18 = (const void *)v1[2];
      if (v18) {
        CFRelease(v18);
      }
      BOOL v19 = (const void *)v1[3];
      if (v19) {
        CFRelease(v19);
      }
      uint64_t v20 = (const void *)v1[10];
      if (v20) {
        CFRelease(v20);
      }
      free(v1);
      return 0LL;
    }
  }

  return v1;
}

void task_release(int a1, void *a2)
{
  if (a2)
  {
    CFMutableDictionaryRef v3 = (void *)a2[3];
    if (v3) {
      free(v3);
    }
    free(a2);
  }

BOOL task_equal(void *a1, void *a2)
{
  return *a1 == *a2;
}

void jetsam_coalition_release(int a1, void *a2)
{
  if (a2) {
    free(a2);
  }
}

BOOL jetsam_coalition_equal(void *a1, void *a2)
{
  return *a1 == *a2;
}

void thread_group_release(int a1, void *a2)
{
  if (a2) {
    free(a2);
  }
}

BOOL thread_group_equal(void *a1, void *a2)
{
  return *a1 == *a2;
}

void kthmap_destroy(CFTypeRef *a1)
{
  if (a1)
  {
    CFRelease(a1[2]);
    CFRelease(a1[3]);
    CFRelease(a1[4]);
    CFRelease(a1[5]);
    CFRelease(a1[6]);
    CFRelease(a1[7]);
    CFRelease(a1[8]);
    CFRelease(a1[9]);
    CFRelease(a1[10]);
    CFRelease(a1[11]);
    free(a1);
  }

uint64_t kthmap_read_chunk(_BYTE *a1, uint64_t *a2)
{
  int v4 = ktrace_chunk_tag((uint64_t)a2);
  if ((v4 - 20530) < 2 || v4 == 7424)
  {
    int v6 = v4;
    uint64_t v7 = ktrace_chunk_size((uint64_t)a2);
    int is_64_bit = ktrace_chunk_is_64_bit((uint64_t)a2);
    unsigned int v9 = ktrace_chunk_version_major((uint64_t)a2);
    CFMutableDictionaryRef v10 = (UInt8 *)ktrace_chunk_map_data(a2, 0LL, v7);
    if (!v10) {
      return *__error();
    }
    unint64_t v11 = (unint64_t)v10;
    if (v6 == 20531)
    {
      if ((a1[96] & 2) == 0)
      {
LABEL_19:
        uint64_t kdebug_map = 0LL;
LABEL_22:
        ktrace_chunk_unmap_data((uint64_t)a2, v11, v7);
        return kdebug_map;
      }

      dictionary = create_dictionary(v10, v7);
      if (dictionary)
      {
        uint64_t v14 = dictionary;
        uint64_t v15 = (void (__cdecl *)(const void *, const void *, void *))ariadne_thread_dict_apply;
LABEL_18:
        CFDictionaryApplyFunction(v14, v15, a1);
        CFRelease(v14);
        goto LABEL_19;
      }
    }

    else
    {
      if (v6 != 20530)
      {
        if (v6 == 7424) {
          uint64_t kdebug_map = kthmap_read_kdebug_map((uint64_t)a1, (uint64_t)v10, v7, v9 > 1, is_64_bit);
        }
        else {
          uint64_t kdebug_map = 22LL;
        }
        goto LABEL_22;
      }

      if ((a1[96] & 2) == 0) {
        goto LABEL_19;
      }
      unint64_t v16 = create_dictionary(v10, v7);
      if (v16)
      {
        uint64_t v14 = v16;
        uint64_t v15 = (void (__cdecl *)(const void *, const void *, void *))_ariadne_process_dict_apply;
        goto LABEL_18;
      }
    }

    uint64_t kdebug_map = 79LL;
    goto LABEL_22;
  }

  return 22LL;
}

uint64_t kthmap_read_kdebug_map(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5)
{
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  if (!a2) {
    ktrace_remotetime_update_params_cold_1();
  }
  if ((*(_BYTE *)(a1 + 96) & 2) == 0) {
    return 0LL;
  }
  if (!a4)
  {
    if (a5) {
      uint64_t v25 = 32LL;
    }
    else {
      uint64_t v25 = 28LL;
    }
    if (!a3) {
      return 0LL;
    }
    unint64_t v26 = 0LL;
    while (1)
    {
      if (a5)
      {
        uint64_t v27 = *(const void **)(a2 + v26);
        if (v27)
        {
          int v28 = *(_DWORD *)(a2 + v26 + 8);
          uint64_t v29 = (char *)(a2 + v26 + 12);
          goto LABEL_30;
        }
      }

      else
      {
        uint64_t v27 = (const void *)*(unsigned int *)(a2 + v26);
        if ((_DWORD)v27)
        {
          int v28 = *(_DWORD *)(a2 + v26 + 4);
          uint64_t v29 = (char *)(a2 + v26 + 8);
LABEL_30:
          uint64_t result = insert_legacy_entry_internal(a1, v27, v28, v29);
          if ((_DWORD)result) {
            return result;
          }
        }
      }

      v26 += v25;
      if (v26 >= a3) {
        return 0LL;
      }
    }
  }

  if (a3 >= 33)
  {
    size_t v9 = a2 + a3;
    size_t v10 = a2 + 32;
    *(_OWORD *)a1 = *(_OWORD *)a2;
    if (*(_DWORD *)(a2 + 16))
    {
      int v11 = 0;
      do
      {
        uint64_t v12 = (const char *)(v10 + *(unsigned int *)(a2 + 20));
        uint64_t v13 = malloc(0x28uLL);
        if (!v13) {
          return 1LL;
        }
        uint64_t v14 = v13;
        int v15 = *(_DWORD *)(v10 + 12);
        unint64_t v16 = (const void *)*(int *)(v10 + 8);
        *((_DWORD *)v13 + 2) = (_DWORD)v16;
        *((_DWORD *)v13 + 4) = v15;
        unint64_t v17 = *(const void **)v10;
        *uint64_t v13 = *(void *)v10;
        unint64_t v18 = strdup(v12);
        v14[3] = v18;
        size_t v10 = (size_t)&v12[strlen(v18) + 1];
        if (v10 >= v9)
        {
          free(v14);
          return 1LL;
        }

        CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 16), v16, v14);
        CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 24), v17, v14);
      }

      while (++v11 < *(_DWORD *)(a2 + 16));
    }

    if (*(_DWORD *)(a2 + 24))
    {
      unsigned int v19 = 0;
      while (1)
      {
        uint64_t v20 = (const char *)(v10 + *(unsigned int *)(a2 + 28));
        char v21 = *(const void **)v10;
        int Value = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 16), (const void *)*(int *)(v10 + 8));
        if (Value)
        {
          CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 32), v21, Value);
          CFDictionaryValueCallBacks v23 = strdup(v20);
          CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 40), v21, v23);
          v20 += strlen(v23) + 1;
        }

        uint64_t result = 0LL;
        ++v19;
        size_t v10 = (size_t)v20;
        if (v19 >= *(_DWORD *)(a2 + 24)) {
          return result;
        }
      }

      return 1LL;
    }

    return 0LL;
  }

  return 1LL;
}

uint64_t kthmap_prepass_stackshot(uint64_t result, uint64_t *a2)
{
  if (result)
  {
    uint64_t v3 = result;
    uint64_t result = ktrace_chunk_tag((uint64_t)a2);
    switch((_DWORD)result)
    {
      case 0x51FE:
        goto LABEL_8;
      case 0x8002:
        uint64_t result = ktrace_chunk_version_major((uint64_t)a2);
        goto LABEL_8;
      case 0x9000:
        uint64_t result = ktrace_chunk_version_major((uint64_t)a2);
        if (!(_DWORD)result)
        {
LABEL_8:
          v4[0] = MEMORY[0x1895F87A8];
          v4[1] = 0x40000000LL;
          int v4[2] = __kthmap_prepass_stackshot_block_invoke;
          v4[3] = &__block_descriptor_tmp_11;
          v4[4] = v3;
          return ktrace_stackshot_chunk_unwrap(a2, (uint64_t)v4);
        }

        break;
    }
  }

  return result;
}

void __kthmap_prepass_stackshot_block_invoke(uint64_t a1, uint64_t a2, unint64_t a3)
{
}

void kthmap_update_stackshot(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  if ((*(_BYTE *)(a1 + 96) & 2) != 0) {
    CFDictionaryRemoveAllValues(*(CFMutableDictionaryRef *)(a1 + 32));
  }
  uint64_t v6 = a2 + 16;
  if (a2 + 16 <= a3)
  {
    uint64_t v7 = 0LL;
    int v37 = 0;
    uint64_t v8 = -1LL;
    size_t v9 = (os_log_t *)&ktrace_log;
    uint64_t v10 = -1LL;
    while (1)
    {
      uint64_t v11 = *(unsigned int *)(a2 + 4);
      if (v6 + v11 > a3) {
        return;
      }
      int v12 = *(_DWORD *)a2;
      unsigned int v13 = *(_DWORD *)a2 & 0xFFFFFFF0;
      if (v13 == 32) {
        int v14 = 17;
      }
      else {
        int v14 = *(_DWORD *)a2;
      }
      if (v14 > 2309)
      {
        if (v14 > 2334)
        {
          if (v14 == 2335)
          {
            set_thread_thread_group(a1, (const void *)v10, *(void **)(a2 + 16));
          }

          else if (v14 == 2337 && v7)
          {
            v7[4] = *(void *)(a2 + 16);
          }
        }

        else if (v14 == 2310)
        {
          if ((*(_BYTE *)(a2 + 81) & 0x20) != 0 && v7) {
            CFSetAddValue(*(CFMutableSetRef *)(a1 + 88), *(const void **)(a2 + 16));
          }
        }

        else if (v14 == 2313)
        {
          BOOL v16 = v11 >= (*(_DWORD *)(a2 + 8) & 0xFu);
          int v17 = v11 - (*(_DWORD *)(a2 + 8) & 0xF);
          if (!v16) {
            int v17 = 0;
          }
          if (*(_BYTE *)(a2 + 16 + (v17 - 1)))
          {
            ktrace_log_init();
            if (os_log_type_enabled(*v9, OS_LOG_TYPE_DEBUG)) {
              kthmap_update_stackshot_cold_2(&v40, v41);
            }
          }

          else if (v10 != -1 && (*(_BYTE *)(a1 + 96) & 2) != 0)
          {
            rename_thread(a1, (const void *)v10);
          }
        }

        goto LABEL_93;
      }

      if (v14 <= 19) {
        break;
      }
      if (v14 == 20)
      {
        int v24 = v37;
        if (v37 == 2) {
          uint64_t v10 = -1LL;
        }
        --v37;
        if (v24 == 1)
        {
          uint64_t v8 = -1LL;
          uint64_t v7 = 0LL;
        }

        goto LABEL_93;
      }

      if (v14 == 2309 && v8 != -1)
      {
        BOOL v16 = v11 >= (*(_DWORD *)(a2 + 8) & 0xFu);
        unsigned int v18 = v11 - (*(_DWORD *)(a2 + 8) & 0xF);
        if (!v16) {
          unsigned int v18 = 0;
        }
        if (v18 <= 0x77)
        {
          ktrace_log_init();
          if (os_log_type_enabled(*v9, OS_LOG_TYPE_DEBUG)) {
            kthmap_update_stackshot_cold_2(&v44, v45);
          }
          goto LABEL_93;
        }

        if (*(void *)(a2 + 16) != v8)
        {
          ktrace_log_init();
          if (os_log_type_enabled(*v9, OS_LOG_TYPE_DEBUG)) {
            kthmap_update_stackshot_cold_2(&v42, v43);
          }
          goto LABEL_93;
        }

        int Value = (uint64_t *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 16), (const void *)*(int *)(a2 + 100));
        uint64_t v7 = Value;
        if ((*(_BYTE *)(a1 + 96) & 2) != 0)
        {
          if (!Value)
          {
            int v30 = task_alloc(*(void *)(a2 + 16), *(_DWORD *)(a2 + 100), (const char *)(a2 + 104), 0x20uLL);
            if (!v30) {
              ktrace_remotetime_update_params_cold_1();
            }
            uint64_t v7 = v30;
            CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 16), (const void *)*(int *)(a2 + 100), v30);
          }

          uint64_t v36 = v10;
          uint64_t v31 = *v7;
          if (*v7 == -1)
          {
            *uint64_t v7 = v8;
            CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 24), (const void *)v8, v7);
            uint64_t v31 = *v7;
          }

          uint64_t v32 = (char *)v7[3];
          if (v31 == v8)
          {
            *((_DWORD *)v7 + 2) = *(_DWORD *)(a2 + 100);
            if (!v32) {
              goto LABEL_91;
            }
            size_t v33 = strlen(v32);
            if (v33 < strnlen((const char *)(a2 + 104), 0x20uLL))
            {
              free(v32);
              v7[3] = 0LL;
              goto LABEL_91;
            }
          }

          else
          {
            if (v32)
            {
              free((void *)v7[3]);
              v7[3] = 0LL;
            }

            *(uint64_t *)((char *)v7 + 12) = -1LL;
            *((_DWORD *)v7 + 2) = *(_DWORD *)(a2 + 100);
LABEL_91:
            v7[3] = (uint64_t)strndup((const char *)(a2 + 104), 0x20uLL);
          }

LABEL_92:
          uint64_t v10 = v36;
        }
      }

LABEL_93:
      a2 = v6 + *(unsigned int *)(a2 + 4);
      uint64_t v6 = a2 + 16;
      if (a2 + 16 > a3) {
        return;
      }
    }

    if (v14 != 17)
    {
      if (v14 == 19)
      {
        if (v12 != 19 || v11 < 4 || v13 == 32)
        {
          ktrace_log_init();
          if (os_log_type_enabled(*v9, OS_LOG_TYPE_DEBUG)) {
            kthmap_update_stackshot_cold_2(&v38, v39);
          }
        }

        else
        {
          int v15 = *(_DWORD *)(a2 + 16);
          ++v37;
          if (v15 == 2308)
          {
            uint64_t v10 = *(void *)(a2 + 8);
            if (v7 && (*(_BYTE *)(a1 + 96) & 2) != 0) {
              CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 32), *(const void **)(a2 + 8), v7);
            }
          }

          else if (v15 == 2307)
          {
            uint64_t v8 = *(void *)(a2 + 8);
          }
        }
      }

      goto LABEL_93;
    }

    uint64_t v19 = *(void *)(a2 + 8);
    if (HIDWORD(v19) != 2334)
    {
      if (HIDWORD(v19) == 2336 && (_DWORD)v19)
      {
        uint64_t v20 = v8;
        char v21 = v9;
        unint64_t v22 = 0LL;
        CFDictionaryValueCallBacks v23 = (uint64_t *)(a2 + 40);
        do
        {
          new_jetsam_coalition(a1, (const void *)*(v23 - 3), *(v23 - 2), *(v23 - 1), *v23);
          ++v22;
          v23 += 4;
        }

        while (v22 < *(unsigned int *)(a2 + 8));
        size_t v9 = v21;
        uint64_t v8 = v20;
      }

      goto LABEL_93;
    }

    if (v12 == 17 || !(_DWORD)v19 || (v11 - (*(_DWORD *)a2 & 0xF)) / v19 < 0x20)
    {
      if ((_DWORD)v19)
      {
        unint64_t v34 = 0LL;
        uint64_t v35 = (const void **)(a2 + 24);
        do
        {
          new_thread_group(a1, *(v35 - 1), v35);
          ++v34;
          v35 += 3;
        }

        while (v34 < *(unsigned int *)(a2 + 8));
      }

      size_t v9 = (os_log_t *)&ktrace_log;
      goto LABEL_93;
    }

    uint64_t v36 = v10;
    unint64_t v25 = 0LL;
    uint64_t v26 = a2 + 24;
    do
    {
      new_thread_group(a1, *(const void **)(v26 - 8), (_BYTE *)v26);
      uint64_t v27 = *(void *)(v26 + 16);
      int v28 = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 64), *(const void **)(v26 - 8));
      if (v28) {
        v28[3] = v27 | 0x8000000000000000LL;
      }
      v26 += 32LL;
      ++v25;
    }

    while (v25 < *(unsigned int *)(a2 + 8));
    size_t v9 = (os_log_t *)&ktrace_log;
    goto LABEL_92;
  }

            uint64_t v64 = v88;
            memcpy(v242, v255, 0x141uLL);
            sub_186C23A98((uint64_t)v242);
            swift_release();
            sub_186BF06F4(v205, v208);
          }

          v235 = 0LL;
          v243[0] = v63;
          uint64_t v68 = v63;
          __swift_instantiateConcreteTypeFromMangledName(&qword_18C6A2280);
          uint64_t v69 = v221;
          char v70 = v222;
          if ((swift_dynamicCast() & 1) != 0)
          {

            v72 = v223;
            CFIndex v71 = v224;
            (*(void (**)(char *, char *, uint64_t))(v224 + 32))(v223, v69, v70);
            size_t v73 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C6A2830);
            v74 = v225;
            int v75 = (char *)v225 + *(int *)(v73 + 48);
            *v225 = v233;
            v74[1] = v64;
            (*(void (**)(char *, char *, uint64_t))(v71 + 16))(v75, v72, v70);
            swift_storeEnumTagMultiPayload();
            v255[0] = 0LL;
            v255[1] = 0xE000000000000000LL;
            sub_186C5B260();
            swift_bridgeObjectRelease();
            v255[0] = 0x203A726F727265LL;
            v255[1] = 0xE700000000000000LL;
            sub_186C5AA74();
            sub_186C5ADD4();
            swift_bridgeObjectRelease();
            sub_186C5ADD4();
            sub_186C25780((uint64_t)v74, v218);
            sub_186C5AD5C();
            sub_186C5ADD4();
            swift_bridgeObjectRelease();
            v76 = v255[0];
            v77 = v255[1];
            uint64_t v26 = v234;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              uint64_t v26 = sub_186C01C3C(0LL, *((void *)v26 + 2) + 1LL, 1, v26);
            }
            v79 = *((void *)v26 + 2);
            uint64_t v78 = *((void *)v26 + 3);
            if (v79 >= v78 >> 1) {
              uint64_t v26 = sub_186C01C3C((char *)(v78 > 1), v79 + 1, 1, v26);
            }
            *((void *)v26 + 2) = v79 + 1;
            v80 = &v26[16 * v79];
            *((void *)v80 + 4) = v76;
            *((void *)v80 + 5) = v77;
            sub_186C257C4((uint64_t)v225);
            (*(void (**)(char *, uint64_t))(v224 + 8))(v223, v70);
            (*(void (**)(char *, uint64_t))(v231 + 8))(v230, v229);

            __int16 v48 = v235;
          }

          else
          {
            swift_bridgeObjectRelease();

            v255[0] = 0LL;
            v255[1] = 0xE000000000000000LL;
            sub_186C5B260();
            swift_bridgeObjectRelease();
            v255[0] = 0x203A726F727265LL;
            v255[1] = 0xE700000000000000LL;
            sub_186C5AA74();
            sub_186C5ADD4();
            swift_bridgeObjectRelease();
            sub_186C5ADD4();
            v81 = v255[0];
            v82 = v255[1];
            uint64_t v26 = v234;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              uint64_t v26 = sub_186C01C3C(0LL, *((void *)v26 + 2) + 1LL, 1, v26);
            }
            v84 = *((void *)v26 + 2);
            v83 = *((void *)v26 + 3);
            if (v84 >= v83 >> 1) {
              uint64_t v26 = sub_186C01C3C((char *)(v83 > 1), v84 + 1, 1, v26);
            }
            *((void *)v26 + 2) = v84 + 1;
            v85 = &v26[16 * v84];
            *((void *)v85 + 4) = v81;
            *((void *)v85 + 5) = v82;

            (*(void (**)(char *, uint64_t))(v231 + 8))(v230, v229);
            __int16 v48 = v235;
          }

    swift_bridgeObjectRelease();
    *(void *)(v99 + 16) = 0LL;
    return swift_bridgeObjectRelease();
  }

  return result;
}

void kthmap_update(uint64_t a1, uint64_t a2, int a3)
{
  if (a3) {
    uint64_t v6 = *(const void **)(a2 + 40);
  }
  else {
    uint64_t v6 = (const void *)*(unsigned int *)(a2 + 24);
  }
  uint64_t v7 = 28LL;
  if (a3) {
    uint64_t v7 = 48LL;
  }
  int v8 = *(_DWORD *)(a2 + v7);
  signed int v9 = v8 & 0xFFFFFFFC;
  if ((*(_BYTE *)(a1 + 96) & 2) != 0)
  {
    if (v9 > 27721739)
    {
      if (v9 > 117440519)
      {
        if (v9 > 117506055)
        {
          if (v9 == 117506056)
          {
            if (a3) {
              size_t v33 = 32LL;
            }
            else {
              size_t v33 = 16LL;
            }
            rename_task_copy(a1, v6, (const char *)(a2 + 8), v33);
          }

          else if (v9 == 117506064)
          {
            if (a3) {
              uint64_t v30 = 32LL;
            }
            else {
              uint64_t v30 = 16LL;
            }
            if ((v8 & 1) != 0) {
              rename_thread(a1, v6);
            }
            else {
              extend_thread_name(a1, v6, (const char *)(a2 + 8), v30);
            }
          }
        }

        else if (v9 == 117440520)
        {
          CFSetAddValue(*(CFMutableSetRef *)(a1 + 88), v6);
        }

        else if (v9 == 117506052)
        {
          uint64_t v41 = v6;
          value = (void *)-1LL;
          CFDictionaryGetValueIfPresent(*(CFDictionaryRef *)(a1 + 56), v6, (const void **)&value);
          int v10 = (int)value;
          if (value != 0xFFFFFFFFLL)
          {
            value = 0LL;
            CFDictionaryGetValueIfPresent(*(CFDictionaryRef *)(a1 + 16), (const void *)v10, (const void **)&value);
            uint64_t v11 = value;
            if (value)
            {
              if (!*(_BYTE *)(a2 + 8)) {
                goto LABEL_116;
              }
              int v12 = (void *)*((void *)value + 3);
              if (v12) {
                free(v12);
              }
              if (a3) {
                size_t v13 = 32LL;
              }
              else {
                size_t v13 = 16LL;
              }
              void v11[3] = strndup((const char *)(a2 + 8), v13);
            }

            CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a1 + 56), &v41);
          }
        }

        goto LABEL_116;
      }

      if (v9 != 27721740)
      {
        if (v9 != 27721744)
        {
          if (v9 == 117440516)
          {
            if (a3)
            {
              int v14 = *(const void **)(a2 + 8);
              int v15 = *(_DWORD *)(a2 + 16);
              BOOL v16 = *(char **)(a2 + 32);
            }

            else
            {
              int v14 = (const void *)*(unsigned int *)(a2 + 8);
              int v15 = *(_DWORD *)(a2 + 12);
              BOOL v16 = (char *)*(unsigned int *)(a2 + 20);
            }

            new_thread((CFDictionaryRef *)a1, v14, v15, v6);
            if ((unint64_t)(v16 - 1) <= 0xFFFFFFFFFFFFFFFDLL)
            {
              unint64_t v34 = (void **)ktrace_thread_map_task_for_thread(a1, v14);
              if (v34)
              {
                uint64_t v35 = v34;
                if (v16 != *v35)
                {
                  ktrace_log_init();
                  uint64_t v36 = (os_log_s *)ktrace_log;
                  if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_DEBUG)) {
                    kthmap_update_cold_2(v36);
                  }
                }
              }

              else
              {
                int v37 = *__error();
                ktrace_log_init();
                if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
                  kthmap_update_cold_1();
                }
                *__error() = v37;
              }
            }
          }

          goto LABEL_116;
        }

        goto LABEL_59;
      }

      goto LABEL_56;
    }

    if (v9 <= 27656211)
    {
      if (v9 == 27656192)
      {
LABEL_50:
        if (a3) {
          uint64_t v19 = *(const void **)(a2 + 8);
        }
        else {
          uint64_t v19 = (const void *)*(unsigned int *)(a2 + 8);
        }
        new_thread_group(a1, v19, "");
        goto LABEL_116;
      }

      if (v9 == 27656200)
      {
LABEL_52:
        if (a3)
        {
          char v21 = *(void **)(a2 + 16);
          uint64_t v20 = *(const void **)(a2 + 24);
        }

        else
        {
          char v21 = (void *)*(unsigned int *)(a2 + 12);
          uint64_t v20 = (const void *)*(unsigned int *)(a2 + 16);
        }

        set_thread_thread_group(a1, v20, v21);
        goto LABEL_116;
      }

      if (v9 != 27656204) {
        goto LABEL_116;
      }
LABEL_54:
      if (a3) {
        unint64_t v22 = *(const void **)(a2 + 8);
      }
      else {
        unint64_t v22 = (const void *)*(unsigned int *)(a2 + 8);
      }
      if (CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 64), v22)) {
        __strlcpy_chk();
      }
      goto LABEL_116;
    }

    if (v9 == 27656212)
    {
LABEL_62:
      if (a3)
      {
        uint64_t v26 = *(const void **)(a2 + 8);
        uint64_t v27 = *(void *)(a2 + 16);
      }

      else
      {
        uint64_t v26 = (const void *)*(unsigned int *)(a2 + 8);
        uint64_t v27 = *(unsigned int *)(a2 + 12);
      }

      thread_group_set_flags(a1, v26, v27);
      goto LABEL_116;
    }
  }

  else
  {
    if (v9 <= 27721727)
    {
      if (v9 <= 27656203)
      {
        if (v9 != 27656192)
        {
          if (v9 != 27656200) {
            goto LABEL_116;
          }
          goto LABEL_52;
        }

        goto LABEL_50;
      }

      if (v9 != 27656204)
      {
        if (v9 != 27656212) {
          goto LABEL_116;
        }
        goto LABEL_62;
      }

      goto LABEL_54;
    }

    if (v9 > 27721739)
    {
      if (v9 != 27721740)
      {
        if (v9 != 27721744) {
          goto LABEL_116;
        }
LABEL_59:
        if (a3)
        {
          CFDictionaryValueCallBacks v23 = (CFDictionaryRef *)(a1 + 80);
          int v24 = *(const void **)(a2 + 8);
          uint64_t v25 = *(void *)(a2 + 24);
        }

        else
        {
          CFDictionaryValueCallBacks v23 = (CFDictionaryRef *)(a1 + 80);
          int v24 = (const void *)*(unsigned int *)(a2 + 8);
          uint64_t v25 = *(unsigned int *)(a2 + 16);
        }

        uint64_t v32 = CFDictionaryGetValue(*v23, v24);
        if (v32) {
          v32[2] = v25;
        }
        goto LABEL_116;
      }

void new_thread(CFDictionaryRef *a1, const void *a2, int a3, const void *a4)
{
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  int v8 = (const void *)a3;
  int Value = CFDictionaryGetValue(a1[2], (const void *)a3);
  if (!Value)
  {
    int v10 = (char *)malloc(0x28uLL);
    if (!v10) {
      return;
    }
    int Value = v10;
    *(void *)int v10 = -1LL;
    *((_DWORD *)v10 + 2) = a3;
    *(void *)(v10 + 12) = -1LL;
    *((void *)v10 + 3) = 0LL;
    *((void *)v10 + 4) = -1LL;
    CFDictionarySetValue(a1[2], v8, v10);
  }

  CFDictionarySetValue(a1[4], a2, Value);
  if (a4 != (const void *)-1LL)
  {
    CFDictionarySetValue(a1[7], a4, v8);
    CFDictionarySetValue(a1[6], a2, a4);
  }

void *ktrace_thread_map_task_for_thread(uint64_t a1, const void *a2)
{
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  value = 0LL;
  CFDictionaryGetValueIfPresent(*(CFDictionaryRef *)(a1 + 32), a2, (const void **)&value);
  return value;
}

void set_task_unique_id(uint64_t a1, void *a2, void *key)
{
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  if (*a2 != -1LL) {
    ktrace_remotetime_update_params_cold_1();
  }
  *a2 = key;
  CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 24), key, a2);
}

uint64_t get_jetsam_coalition_for_tid(uint64_t a1, const void *a2)
{
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  value = 0LL;
  CFDictionaryGetValueIfPresent(*(CFDictionaryRef *)(a1 + 32), a2, (const void **)&value);
  if (value) {
    return *((void *)value + 4);
  }
  else {
    return -1LL;
  }
}

char *rename_task_copy(uint64_t a1, const void *a2, const char *a3, size_t a4)
{
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  if (!a3) {
    ktrace_remotetime_update_params_cold_1();
  }
  value = 0LL;
  uint64_t result = (char *)CFDictionaryGetValueIfPresent(*(CFDictionaryRef *)(a1 + 32), a2, (const void **)&value);
  uint64_t v7 = value;
  if (value)
  {
    int v8 = (void *)*((void *)value + 3);
    if (v8) {
      free(v8);
    }
    uint64_t result = strndup(a3, a4);
    v7[3] = result;
  }

  return result;
}

void rename_thread(uint64_t a1, const void *a2)
{
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  int v4 = malloc(0x40uLL);
  __strlcpy_chk();
  CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 40), a2, v4);
}

const char *extend_thread_name(uint64_t a1, const void *a2, const char *a3, uint64_t a4)
{
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  uint64_t result = (const char *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 40), a2);
  if (result)
  {
    uint64_t v7 = result;
    uint64_t result = (const char *)strlen(result);
    else {
      uint64_t v8 = 63LL - (void)result;
    }
    if (v8) {
      return (const char *)strlcpy((char *)&result[(void)v7], a3, v8 + 1);
    }
  }

  return result;
}

void new_jetsam_coalition(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  if (CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 80), a2))
  {
    int Value = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 80), a2);
    if (Value)
    {
      void *Value = a2;
      Value[1] = a3;
      Value[2] = a4;
      Value[3] = a5;
    }
  }

  else
  {
    uint64_t v11 = malloc(0x20uLL);
    if (!v11) {
      ktrace_remotetime_update_params_cold_1();
    }
    *uint64_t v11 = a2;
    v11[1] = a3;
    void v11[2] = a4;
    void v11[3] = a5;
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 80), a2, v11);
  }

void set_task_jetsam_coalition(uint64_t a1, void *key, uint64_t a3)
{
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  if (key != (void *)-1LL)
  {
    value = 0LL;
    CFDictionaryGetValueIfPresent(*(CFDictionaryRef *)(a1 + 24), key, (const void **)&value);
    if (value)
    {
      *((void *)value + 4) = a3;
    }

    else
    {
      uint64_t v6 = malloc(0x28uLL);
      if (v6)
      {
        v6[3] = 0LL;
        void *v6 = key;
        v6[1] = -1LL;
        *((_DWORD *)v6 + 4) = -1;
      }

      v6[4] = a3;
      CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 24), key, v6);
    }
  }

void *new_thread_group(uint64_t a1, const void *a2, _BYTE *a3)
{
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  if (!a3) {
    ktrace_remotetime_update_params_cold_1();
  }
  int Value = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 64), a2);
  if (Value)
  {
    uint64_t v7 = Value;
    void *Value = a2;
    if (*a3) {
      __strlcpy_chk();
    }
  }

  else
  {
    uint64_t v8 = calloc(1uLL, 0x20uLL);
    if (!v8) {
      ktrace_remotetime_update_params_cold_1();
    }
    uint64_t v7 = v8;
    *uint64_t v8 = a2;
    __strlcpy_chk();
    v7[3] = 0LL;
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 64), a2, v7);
  }

  return v7;
}

void set_thread_thread_group(uint64_t a1, const void *a2, void *key)
{
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  int Value = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 64), key);
  if (Value || (int Value = new_thread_group(a1, key, "")) != 0LL) {
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 72), a2, Value);
  }
}

void *thread_group_set_flags(uint64_t a1, const void *a2, uint64_t a3)
{
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  uint64_t result = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 64), a2);
  if (result) {
    result[3] = a3 | 0x8000000000000000LL;
  }
  return result;
}

void delete_jetsam_coalition(uint64_t a1, const void *a2)
{
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a1 + 80), a2);
}

void delete_thread_group(uint64_t a1, const void *a2)
{
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a1 + 64), a2);
}

uint64_t ktrace_thread_map_pid_for_parent_tid(uint64_t a1, const void *a2)
{
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  value = (void *)-1LL;
  CFDictionaryGetValueIfPresent(*(CFDictionaryRef *)(a1 + 56), a2, (const void **)&value);
  return value;
}

void *ktrace_thread_map_task_for_pid(uint64_t a1, int a2)
{
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  value = 0LL;
  CFDictionaryGetValueIfPresent(*(CFDictionaryRef *)(a1 + 16), (const void *)a2, (const void **)&value);
  return value;
}

uint64_t kthmap_name_for_pid(uint64_t a1, int a2)
{
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  value = 0LL;
  CFDictionaryGetValueIfPresent(*(CFDictionaryRef *)(a1 + 16), (const void *)a2, (const void **)&value);
  if (value) {
    return *((void *)value + 3);
  }
  else {
    return 0LL;
  }
}

uint64_t kthmap_jetsam_coalition_for_tid(uint64_t a1, const void *a2)
{
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  value = 0LL;
  CFDictionaryGetValueIfPresent(*(CFDictionaryRef *)(a1 + 32), a2, (const void **)&value);
  if (value) {
    return *((void *)value + 4);
  }
  else {
    return -1LL;
  }
}

uint64_t kthmap_jetsam_coalition_for_pid(uint64_t a1, int a2)
{
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  value = 0LL;
  CFDictionaryGetValueIfPresent(*(CFDictionaryRef *)(a1 + 16), (const void *)a2, (const void **)&value);
  if (value) {
    return *((void *)value + 4);
  }
  else {
    return -1LL;
  }
}

const void *kthmap_thread_name_for_tid(uint64_t a1, const void *a2)
{
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  return CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 40), a2);
}

uint64_t kthmap_thread_group_for_tid(uint64_t a1, const void *a2)
{
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  int Value = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 72), a2);
  if (Value) {
    return *(void *)Value;
  }
  else {
    return -1LL;
  }
}

char *kthmap_name_for_thread_group(uint64_t a1, const void *a2)
{
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  int Value = (char *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 64), a2);
  if (Value) {
    return Value + 8;
  }
  else {
    return 0LL;
  }
}

uint64_t kthmap_flags_for_thread_group(uint64_t a1, const void *a2, uint64_t *a3)
{
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  int Value = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 64), a2);
  if (!Value) {
    return 2LL;
  }
  uint64_t v5 = Value[3];
  if ((v5 & 0x8000000000000000LL) == 0) {
    return 91LL;
  }
  uint64_t result = 0LL;
  if (a3) {
    *a3 = v5 & 0x7FFFFFFFFFFFFFFFLL;
  }
  return result;
}

uint64_t kthmap_pid_for_tid(uint64_t a1, const void *a2)
{
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  value = 0LL;
  CFDictionaryGetValueIfPresent(*(CFDictionaryRef *)(a1 + 32), a2, (const void **)&value);
  if (value) {
    return *((unsigned int *)value + 2);
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

uint64_t kthmap_uniqueid_for_tid(uint64_t a1, const void *a2)
{
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  value = 0LL;
  CFDictionaryGetValueIfPresent(*(CFDictionaryRef *)(a1 + 32), a2, (const void **)&value);
  if (value) {
    return *(void *)value;
  }
  else {
    return -1LL;
  }
}

uint64_t kthmap_pid_name_for_tid(uint64_t a1, const void *a2, void *a3)
{
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  if (!a3) {
    ktrace_remotetime_update_params_cold_1();
  }
  value = 0LL;
  CFDictionaryGetValueIfPresent(*(CFDictionaryRef *)(a1 + 32), a2, (const void **)&value);
  if (value)
  {
    uint64_t v4 = *((void *)value + 3);
    uint64_t result = *((unsigned int *)value + 2);
  }

  else
  {
    uint64_t v4 = 0LL;
    uint64_t result = 0xFFFFFFFFLL;
  }

  *a3 = v4;
  return result;
}

uint64_t kthmap_process_name_for_tid(uint64_t a1, const void *a2)
{
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  value = 0LL;
  CFDictionaryGetValueIfPresent(*(CFDictionaryRef *)(a1 + 32), a2, (const void **)&value);
  if (value) {
    return *((void *)value + 3);
  }
  else {
    return 0LL;
  }
}

void ktrace_thread_map_update_prepass(uint64_t a1, uint64_t a2, int a3)
{
  if (a3) {
    uint64_t v5 = *(const void **)(a2 + 40);
  }
  else {
    uint64_t v5 = (const void *)*(unsigned int *)(a2 + 24);
  }
  uint64_t v6 = 28LL;
  if (a3) {
    uint64_t v6 = 48LL;
  }
  signed int v7 = *(_DWORD *)(a2 + v6) & 0xFFFFFFFC;
  if ((*(_BYTE *)(a1 + 96) & 2) == 0)
  {
    if (v7 <= 27721727)
    {
      if (v7 > 27656207)
      {
        if (v7 != 27656208)
        {
          if (v7 != 27656212) {
            return;
          }
LABEL_43:
          if (a3)
          {
            thread_group_set_flags(a1, *(const void **)(a2 + 8), *(void *)(a2 + 24));
            return;
          }

          int v13 = *__error();
          ktrace_log_init();
          if (!os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
            goto LABEL_71;
          }
          goto LABEL_70;
        }

LABEL_70:
      ktrace_thread_map_update_prepass_cold_1();
LABEL_71:
      *__error() = v13;
      return;
    }

    if (v7 <= 27721735)
    {
      if (v7 != 27721728)
      {
        if (v7 != 27721732) {
          return;
        }
        goto LABEL_50;
      }

        v24[6] = (uint64_t)v69;
        void v24[7] = (uint64_t)v63;
        v24[8] = (uint64_t)v70;
        if (v28) {
          operator delete(v28);
        }
      }

      void v24[7] = (uint64_t)v63;
LABEL_73:
      *(void *)&v125 = 0LL;
      *((void *)&v125 + ktrace_session_set_default_event_names_enabled(global_session, 1) = &v125;
      v126 = 0x3812000000LL;
      v127 = __Block_byref_object_copy__302;
      v128 = __Block_byref_object_dispose__303;
      v129 = "";
      v130 = 0;
      if (*(_OWORD *)a2 == 0LL)
      {
        v76 = 0;
      }

      else
      {
        v74 = *(flatbuffers::FlatBufferBuilder **)(a1 + 56);
        int v75 = uuid_string(*(void *)a2, *(void *)(a2 + 8));
        v76 = flatbuffers::FlatBufferBuilder::CreateString(v74, v75, 0x24uLL);
      }

      v77 = *(const __CFString **)(a2 + 80);
      if (v77)
      {
        uint64_t v78 = *(flatbuffers::FlatBufferBuilder **)(a1 + 56);
        v79 = utf8(v77);
        v80 = strlen(v79);
        v81 = flatbuffers::FlatBufferBuilder::CreateString(v78, v79, v80);
LABEL_78:
        *(_DWORD *)(*((void *)&v125 + 1) + 48LL) = v81;
        goto LABEL_79;
      }

      v108 = (fsid)*((void *)uuid + 18);
      v109 = (fsobj_id)*((void *)uuid + 19);
      v110 = (const __CFDictionary *)lookup_inode( *(const __CFDictionary **)(*(void *)(*(void *)(a1 + 48) + 80LL) + 224LL),  v108,  v109);
      if (v110)
      {
        int Value = (const __CFString *)CFDictionaryGetValue(v110, @"Path");
        v112 = Value;
        if (Value)
        {
          v113 = CFGetTypeID(Value);
          if (v113 == CFStringGetTypeID())
          {
            v114 = *(flatbuffers::FlatBufferBuilder **)(a1 + 56);
            v115 = utf8(v112);
            v116 = strlen(v115);
            v81 = flatbuffers::FlatBufferBuilder::CreateString(v114, v115, v116);
            goto LABEL_78;
          }

          ktrace_log_init();
          if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
            ktrace_uuid_map_learn_tailspin_symbols_with_chunk_cold_6();
          }
        }
      }

      else
      {
        v120 = *(void (**)(void, void))(a1 + 56);
        v121 = *(void *)(*(void *)(a1 + 48) + 80LL);
        v124[0] = (void (*)(void, void))MEMORY[0x1895F87A8];
        v124[1] = (void (*)(void, void))3221225472LL;
        v124[2] = (void (*)(void, void))___ZL32ktrace_address_space_buildbufferP14ktrace_sessionP21symbolication_contextP20ktrace_address_spaceN17FlatbufferSymbols20AddressSpaceMetadataEN11flatbuffers6OffsetIvEERNS7_17FlatBufferBuilderERNSt3__113unordered_mapI11CFUUIDBytesNS8_INS5_12SymbolicatorEEENSC_4hashISE_EENSC_8equal_toISE_EENSC_9allocatorINSC_4pairIKSE_SG_EEEEEEy_block_invoke_2;
        v124[3] = (void (*)(void, void))&unk_189F561C0;
        v124[4] = (void (*)(void, void))&v125;
        v124[5] = v120;
        ktrace_uuid_map_iterate_associated_paths(v121, (__int128 *)a2, v124);
      }

            if (v29 >= *((void *)v11 + 2)) {
              goto LABEL_121;
            }
            unint64_t v34 = &v11[32 * v29];
            int v13 = (unint64_t)(v34 + 32);
            isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            uint64_t v62 = *((void *)v34 + 6);
            *((void *)v34 + 6) = 0x8000000000000000LL;
            uint64_t v12 = &v62;
            sub_186C1B8D0( v27,  (uint64_t)sub_186C20F78,  0LL,  isUniquelyReferenced_nonNull_native,  (void (*)(uint64_t *__return_ptr, id *, void *))sub_186C11980);
            if (v6) {
              goto LABEL_135;
            }
            uint64_t v6 = 0LL;
            *(void *)(v13 + 16) = v62;
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if ((v60 & 1) != 0)
            {
              if (v29 >= *((void *)v11 + 2)) {
                goto LABEL_122;
              }
              *(_BYTE *)(v13 + 24) = 1;
            }

            goto LABEL_42;
          }
        }

        else
        {
          signed int v7 = v6;
        }

    if (v8 < v12) {
      goto LABEL_149;
    }
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      uint64_t result = (uint64_t)sub_186BF905C(0LL, *(void *)(v10 + 16) + 1LL, 1, (char *)v10);
      int v10 = result;
    }

    size_t v33 = *(void *)(v10 + 16);
    uint64_t v32 = *(void *)(v10 + 24);
    uint64_t v11 = v33 + 1;
    if (v33 >= v32 >> 1)
    {
      uint64_t result = (uint64_t)sub_186BF905C((char *)(v32 > 1), v33 + 1, 1, (char *)v10);
      int v10 = result;
    }

    *(void *)(v10 + 16) = v11;
    unint64_t v34 = v10 + 32;
    uint64_t v35 = (uint64_t *)(v10 + 32 + 16 * v33);
    *uint64_t v35 = v12;
    v35[1] = v8;
    if (v33)
    {
      uint64_t v9 = v98;
      while (1)
      {
        uint64_t v36 = v11 - 1;
        if (v11 >= 4)
        {
          uint64_t v41 = v34 + 16 * v11;
          char v42 = *(void *)(v41 - 64);
          int v43 = *(void *)(v41 - 56);
          unint64_t v47 = __OFSUB__(v43, v42);
          char v44 = v43 - v42;
          if (v47) {
            goto LABEL_138;
          }
          __int16 v46 = *(void *)(v41 - 48);
          unint64_t v45 = *(void *)(v41 - 40);
          unint64_t v47 = __OFSUB__(v45, v46);
          int v39 = v45 - v46;
          char v40 = v47;
          if (v47) {
            goto LABEL_139;
          }
          __int16 v48 = v11 - 2;
          int v49 = (uint64_t *)(v34 + 16 * (v11 - 2));
          uint64_t v51 = *v49;
          uint64_t v50 = v49[1];
          unint64_t v47 = __OFSUB__(v50, v51);
          unsigned int v52 = v50 - v51;
          if (v47) {
            goto LABEL_140;
          }
          unint64_t v47 = __OFADD__(v39, v52);
          uint64_t v53 = v39 + v52;
          if (v47) {
            goto LABEL_142;
          }
          if (v53 >= v44)
          {
            CFIndex v71 = (uint64_t *)(v34 + 16 * v36);
            size_t v73 = *v71;
            v72 = v71[1];
            unint64_t v47 = __OFSUB__(v72, v73);
            v74 = v72 - v73;
            if (v47) {
              goto LABEL_148;
            }
            uint64_t v64 = v39 < v74;
            goto LABEL_108;
          }
        }

        else
        {
          if (v11 != 3)
          {
            uint64_t v65 = *(void *)(v10 + 32);
            uint64_t v66 = *(void *)(v10 + 40);
            unint64_t v47 = __OFSUB__(v66, v65);
            int v58 = v66 - v65;
            size_t v59 = v47;
            goto LABEL_102;
          }

          char v38 = *(void *)(v10 + 32);
          int v37 = *(void *)(v10 + 40);
          unint64_t v47 = __OFSUB__(v37, v38);
          int v39 = v37 - v38;
          char v40 = v47;
        }

        if ((v40 & 1) != 0) {
          goto LABEL_141;
        }
        __int16 v48 = v11 - 2;
        uint64_t v54 = (uint64_t *)(v34 + 16 * (v11 - 2));
        int v56 = *v54;
        __int16 v55 = v54[1];
        uint64_t v57 = __OFSUB__(v55, v56);
        int v58 = v55 - v56;
        size_t v59 = v57;
        if (v57) {
          goto LABEL_143;
        }
        uint64_t v60 = (uint64_t *)(v34 + 16 * v36);
        uint64_t v62 = *v60;
        int v61 = v60[1];
        unint64_t v47 = __OFSUB__(v61, v62);
        uint64_t v63 = v61 - v62;
        if (v47) {
          goto LABEL_145;
        }
        if (__OFADD__(v58, v63)) {
          goto LABEL_147;
        }
        if (v58 + v63 >= v39)
        {
          uint64_t v64 = v39 < v63;
LABEL_108:
          if (v64) {
            uint64_t v36 = v48;
          }
          goto LABEL_110;
        }

LABEL_45:
      if (a3)
      {
        if (*(void *)(a2 + 16) != 1LL) {
          return;
        }
        int v10 = *(const void **)(a2 + 8);
      }

      else
      {
        if (*(_DWORD *)(a2 + 12) != 1) {
          return;
        }
        int v10 = (const void *)*(unsigned int *)(a2 + 8);
      }

      delete_jetsam_coalition(a1, v10);
      return;
    }

    if (v7 != 27721736)
    {
      if (v7 != 27721740) {
        return;
      }
LABEL_33:
      if (a3)
      {
        uint64_t v9 = *(void *)(a2 + 8);
        uint64_t v8 = *(void **)(a2 + 16);
      }

      else
      {
        uint64_t v9 = *(unsigned int *)(a2 + 8);
        uint64_t v8 = (void *)*(unsigned int *)(a2 + 12);
      }

      uint64_t v14 = a1;
      goto LABEL_61;
    }

      uint64_t v9 = v20;
    }

        if (v44 == ++v28)
        {
          uint64_t result = swift_bridgeObjectRelease_n();
          size_t v16 = v45;
          goto LABEL_19;
        }
      }
    }
  }

  else
  {
    uint64_t result = sub_186BFB964((uint64_t)&v48);
  }

    if (v8 < v3)
    {
      if (__OFSUB__(v8, v12)) {
        goto LABEL_150;
      }
      if (v8 - v12 < v101) {
        break;
      }
    }

    v283 = (char *)((v126 - 1) & v126);
    v284 = v127;
    v124 = __clz(__rbit64(v126)) + (v127 << 6);
LABEL_46:
    v129 = (uint64_t *)(*(void *)(v118 + 48) + 16 * v124);
    v131 = *v129;
    v130 = v129[1];
    swift_beginAccess();
    v132 = *((void *)v96 + 37);
    if (*(void *)(v132 + 16))
    {
      swift_bridgeObjectRetain_n();
      v133 = sub_186BF8278(v131, v130);
      if ((v134 & 1) != 0)
      {
        v135 = (_OWORD *)(*(void *)(v132 + 56) + 200 * v133);
        v292 = *v135;
        v136 = v135[3];
        v137 = v135[4];
        v138 = v135[2];
        v293 = v135[1];
        v294 = v138;
        v295 = v136;
        v296 = v137;
        v139 = v135[5];
        v140 = v135[6];
        v141 = v135[7];
        v300 = v135[8];
        v299 = v141;
        v298 = v140;
        v297 = v139;
        v142 = v135[9];
        v143 = v135[10];
        v144 = v135[11];
        v304 = *((void *)v135 + 24);
        v303 = v144;
        v302 = v143;
        v301 = v142;
        memmove(&v286, v135, 0xC8uLL);
        nullsub_1(&v286);
        sub_186C24F18((uint64_t)&v292);
        swift_bridgeObjectRelease();
      }

      else
      {
        swift_bridgeObjectRelease();
        sub_186C27F8C((uint64_t)&v292);
        sub_186BFA418((uint64_t)&v292, (uint64_t)&v286, &qword_18C6A27A8);
      }
    }

    else
    {
      sub_186C27F8C((uint64_t)&v292);
      sub_186BFA418((uint64_t)&v292, (uint64_t)&v286, &qword_18C6A27A8);
      swift_bridgeObjectRetain();
    }

    sub_186BFA418((uint64_t)&v286, (uint64_t)&v290, &qword_18C6A27A8);
    sub_186BFA418((uint64_t)&v290, (uint64_t)&v292, &qword_18C6A27A8);
    if (sub_186C23BF8((uint64_t)&v292) == 1)
    {
      swift_endAccess();
      swift_bridgeObjectRelease();
    }

    else
    {
      v145 = v288;
      sub_186BFA418((uint64_t)&v286, (uint64_t)v289, &qword_18C6A27A8);
      swift_endAccess();
      swift_bridgeObjectRetain();
      sub_186C38B94((uint64_t)v289);
      swift_bridgeObjectRelease();
      if (v145)
      {
        v146 = *(void *)(v145 + 16);
        if (v146)
        {
          v305[0] = MEMORY[0x18961AFE8];
          sub_186BEF8C8(0LL, v146, 0);
          v147 = v305[0];
          v267 = v145;
          v148 = (uint64_t *)(v145 + 40);
          do
          {
            v149 = *(v148 - 1);
            v150 = *v148;
            v305[0] = v147;
            v152 = *(void *)(v147 + 16);
            v151 = *(void *)(v147 + 24);
            swift_bridgeObjectRetain();
            if (v152 >= v151 >> 1)
            {
              sub_186BEF8C8((char *)(v151 > 1), v152 + 1, 1);
              v147 = v305[0];
            }

            v148 += 4;
            *(void *)(v147 + 16) = v152 + 1;
            v153 = v147 + 16 * v152;
            *(void *)(v153 + 32) = v149;
            *(void *)(v153 + 40) = v150;
            --v146;
          }

          while (v146);
          swift_bridgeObjectRelease();
          v92 = v271;
          v96 = v264;
        }

        else
        {
          swift_bridgeObjectRelease();
          v147 = MEMORY[0x18961AFE8];
        }

        v154 = *(void *)(v147 + 16);
        v119 = v265;
        if (v154)
        {
          v155 = (uint64_t *)(v147 + 40);
          do
          {
            v156 = *(v155 - 1);
            v157 = *v155;
            swift_bridgeObjectRetain();
            sub_186C18EB0(v305, v156, v157);
            swift_bridgeObjectRelease();
            v155 += 2;
            --v154;
          }

          while (v154);
        }

        swift_bridgeObjectRelease();
        v118 = (uint64_t)v266;
      }
    }

    v122 = (unint64_t)v283;
    v123 = v284;
  }

  v128 = v123 + 4;
  if (v123 + 4 < v268)
  {
    v126 = *(void *)(v119 + 8 * v128);
    if (!v126)
    {
      while (1)
      {
        v127 = v128 + 1;
        if (__OFADD__(v128, 1LL)) {
          break;
        }
        if (v127 >= v268) {
          goto LABEL_65;
        }
        v126 = *(void *)(v119 + 8 * v127);
        ++v128;
        if (v126) {
          goto LABEL_45;
        }
      }

      __break(1u);
LABEL_103:
      __break(1u);
LABEL_104:
      __break(1u);
      goto LABEL_105;
    }

    v127 = v123 + 4;
    goto LABEL_45;
  }

              *((void *)v4 + 2) = v2;
              goto LABEL_13;
            }
          }
        }
      }
    }

unint64_t ktrace_thread_map_estimate_threads(uint64_t a1)
{
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  unint64_t v2 = ktrace_chunk_size(a1);
  else {
    return v2 / 0x1C;
  }
}

BOOL kthmap_tid_is_main_thread(uint64_t a1, const void *a2)
{
  return CFSetGetValue(*(CFSetRef *)(a1 + 88), a2) != 0LL;
}

void *task_alloc(uint64_t a1, int a2, const char *a3, size_t a4)
{
  uint64_t v8 = malloc(0x28uLL);
  uint64_t v9 = v8;
  if (v8)
  {
    if (a3)
    {
      int v10 = strndup(a3, a4);
      v9[3] = v10;
      if (!v10)
      {
        free(v9);
        return 0LL;
      }
    }

    else
    {
      v8[3] = 0LL;
    }

    *uint64_t v9 = a1;
    *((_DWORD *)v9 + 2) = a2;
    *(void *)((char *)v9 + 12) = -1LL;
    v9[4] = -1LL;
  }

  return v9;
}

void kthmap_iterate_threads(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(const __CFDictionary **)(a1 + 32);
  context[0] = MEMORY[0x1895F87A8];
  context[1] = 0x40000000LL;
  context[2] = __kthmap_iterate_threads_block_invoke;
  context[3] = &unk_189F55E88;
  context[4] = a2;
  CFDictionaryApplyFunction(v2, (CFDictionaryApplierFunction)CFDictionaryApplierTrampoline, context);
}

uint64_t __kthmap_iterate_threads_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

uint64_t kthmap_read_catalog(uint64_t a1, uint64_t a2)
{
  v4[0] = MEMORY[0x1895F87A8];
  v4[1] = 0x40000000LL;
  int v4[2] = __kthmap_read_catalog_block_invoke;
  v4[3] = &__block_descriptor_tmp_7_2;
  v4[4] = a1;
  ktrace_catalog_iterate_processes(a2, (uint64_t)v4);
  *(_BYTE *)(a1 + 96) &= ~2u;
  return a1;
}

uint64_t __kthmap_read_catalog_block_invoke(uint64_t a1, void *a2)
{
  name = (const char *)ktrace_process_last_name(a2);
  if (name)
  {
    uint64_t v5 = name;
    size_t v6 = strlen(name);
    int v7 = ktrace_process_id(a2);
    uint64_t v8 = (const void *)ktrace_process_unique_id(a2);
    int Value = (const void **)CFDictionaryGetValue(*(CFDictionaryRef *)(*(void *)(a1 + 32) + 16LL), (const void *)v7);
    if (!Value)
    {
      int v10 = (const void **)task_alloc((uint64_t)v8, v7, v5, v6);
      if (!v10) {
        ktrace_remotetime_update_params_cold_1();
      }
      int Value = v10;
      CFDictionarySetValue(*(CFMutableDictionaryRef *)(*(void *)(a1 + 32) + 16LL), (const void *)v7, v10);
    }

    uint64_t v11 = *Value;
    if (*Value == (const void *)-1LL)
    {
      void *Value = v8;
      CFDictionarySetValue(*(CFMutableDictionaryRef *)(*(void *)(a1 + 32) + 24LL), v8, Value);
      uint64_t v11 = *Value;
    }

    uint64_t v12 = (char *)Value[3];
    if (v11 == v8)
    {
      *((_DWORD *)Value + 2) = v7;
      if (v12)
      {
        if (strlen(v12) >= v6)
        {
LABEL_15:
          v14[0] = MEMORY[0x1895F87A8];
          v14[1] = 0x40000000LL;
          int v14[2] = __kthmap_read_catalog_block_invoke_2;
          v14[3] = &__block_descriptor_tmp_5_1;
          v14[4] = *(void *)(a1 + 32);
          void v14[5] = Value;
          ktrace_process_iterate_threads(a2, (uint64_t)v14);
          return 1LL;
        }

        free(v12);
        Value[3] = 0LL;
      }
    }

    else
    {
      if (v12)
      {
        free((void *)Value[3]);
        Value[3] = 0LL;
      }

      *(const void **)((char *)Value + 12) = (const void *)-1LL;
      *((_DWORD *)Value + 2) = v7;
    }

    Value[3] = strdup(v5);
    goto LABEL_15;
  }

  return 1LL;
}

uint64_t __kthmap_read_catalog_block_invoke_2(uint64_t a1, void *a2)
{
  name = (const char *)ktrace_thread_last_name(a2);
  if (name)
  {
    strlen(name);
    uint64_t v5 = *(void *)(a1 + 32);
    size_t v6 = (const void *)ktrace_thread_id(a2);
    rename_thread(v5, v6);
  }

  int v7 = *(__CFDictionary **)(*(void *)(a1 + 32) + 32LL);
  uint64_t v8 = (const void *)ktrace_thread_id(a2);
  CFDictionarySetValue(v7, v8, *(const void **)(a1 + 40));
  return 1LL;
}

CFDataRef create_dictionary(UInt8 *bytes, CFIndex length)
{
  unint64_t v2 = CFDataCreateWithBytesNoCopy(0LL, bytes, length, (CFAllocatorRef)*MEMORY[0x189604DC8]);
  if (v2)
  {
    uint64_t v3 = v2;
    uint64_t v4 = (const __CFData *)CFPropertyListCreateWithData(0LL, v2, 0LL, 0LL, 0LL);
    if (v4)
    {
      uint64_t v5 = v4;
      CFTypeID v6 = CFGetTypeID(v4);
      if (v6 == CFDictionaryGetTypeID())
      {
        CFRelease(v3);
        return v5;
      }

      int v10 = *__error();
      ktrace_log_init();
      if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
        create_dictionary_cold_3();
      }
      *__error() = v10;
      CFRelease(v3);
      uint64_t v9 = v5;
    }

    else
    {
      int v8 = *__error();
      ktrace_log_init();
      if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
        create_dictionary_cold_2();
      }
      *__error() = v8;
      uint64_t v9 = v3;
    }

    CFRelease(v9);
    return 0LL;
  }

  int v7 = *__error();
  ktrace_log_init();
  if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
    create_dictionary_cold_1();
  }
  uint64_t v5 = 0LL;
  *__error() = v7;
  return v5;
}

void ariadne_thread_dict_apply(const __CFString *a1, const __CFDictionary *a2, CFDictionaryRef *a3)
{
  uint64_t v22 = *MEMORY[0x1895F89C0];
  CStringPtr = CFStringGetCStringPtr(a1, 0x8000100u);
  int v7 = (char *)CStringPtr;
  if (!CStringPtr)
  {
    CFIndex v8 = CFStringGetLength(a1) + 1;
    uint64_t v9 = (char *)malloc(v8);
    if (!v9) {
      ktrace_remotetime_update_params_cold_1();
    }
    int v7 = v9;
    if (!CFStringGetCString(a1, v9, v8, 0x8000100u)) {
      ktrace_remotetime_update_params_cold_1();
    }
  }

  unint64_t v10 = strtoull(v7, __endptr, 0);
  if (v7 == __endptr[0])
  {
    int v12 = *__error();
    uint64_t v11 = -1LL;
    if (CStringPtr)
    {
LABEL_6:
      if (v12) {
        goto LABEL_7;
      }
      goto LABEL_13;
    }
  }

  else
  {
    uint64_t v11 = v10;
    int v12 = 0;
    if (CStringPtr) {
      goto LABEL_6;
    }
  }

  free(v7);
  if (v12)
  {
LABEL_7:
    int v13 = *__error();
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
      ariadne_thread_dict_apply_cold_4();
    }
LABEL_9:
    *__error() = v13;
    return;
  }

LABEL_13:
  if (v11 == -1) {
    _os_assumes_log();
  }
  if (!CFDictionaryGetValueIfPresent(a2, @"PID", (const void **)&value))
  {
    int v13 = *__error();
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
      ariadne_thread_dict_apply_cold_3();
    }
    goto LABEL_9;
  }

  if (CFNumberGetValue((CFNumberRef)value, kCFNumberSInt32Type, &valuePtr))
  {
    new_thread(a3, (const void *)v11, valuePtr, (const void *)0xFFFFFFFFFFFFFFFFLL);
    if (CFDictionaryGetValueIfPresent(a2, @"Name", (const void **)&theString))
    {
      char v21 = 0;
      __int128 v19 = 0u;
      __int128 v20 = 0u;
      *(_OWORD *)__endptr = 0u;
      __int128 v18 = 0u;
      if (CFStringGetCString(theString, (char *)__endptr, 65LL, 0x8000100u))
      {
        strlen((const char *)__endptr);
        rename_thread((uint64_t)a3, (const void *)v11);
      }
    }
  }

  swift_bridgeObjectRelease();
  return v15;
}

  uint64_t result = 0LL;
  int v12 = *(void *)(*v2 + 48) + 4 * v8;
  LOWORD(a2) = *(_WORD *)v12;
  LOBYTE(v13) = *(_BYTE *)(v12 + 2);
LABEL_15:
  *(_WORD *)a1 = a2;
  *(_BYTE *)(a1 + 2) = v13;
  return result;
}

    uint64_t result = sub_186BF7EC0(a5, a6);
    *a1 = v12;
    return result;
  }

  if ((a6 & 0x1000000000000000LL) != 0) {
    goto LABEL_13;
  }
  if ((a5 & 0x1000000000000000LL) != 0)
  {
    CFIndex v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }

  CFIndex v8 = sub_186C5B2B4();
  if (!v8)
  {
    sub_186C5B350();
    __break(1u);
LABEL_17:
    uint64_t result = sub_186C5B398();
    __break(1u);
    return result;
  }

  if ((v64 & 1) != 0)
  {
    sub_186C5AA08();
    int v39 = *(int *)(v6 + 48);
    char v40 = *(void (**)(uint64_t, char *, uint64_t))(v67 + 32);
    uint64_t v41 = v61;
    v40(v61, v25, v19);
    *(_BYTE *)(v41 + v39) = 0;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      size_t v33 = (void *)sub_186C1D188(0LL, v33[2] + 1LL, 1, v33);
    }
    int v43 = v33[2];
    char v42 = v33[3];
    if (v43 >= v42 >> 1) {
      size_t v33 = (void *)sub_186C1D188(v42 > 1, v43 + 1, 1, v33);
    }
    v33[2] = v43 + 1;
    char v44 = (*(unsigned __int8 *)(v7 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
    unint64_t v45 = *(void *)(v7 + 72);
    sub_186BFA418(v61, (uint64_t)v33 + v44 + v45 * v43, &qword_18C6A2828);
    __int16 v46 = v59;
    sub_186C5AA08();
    unint64_t v47 = *(int *)(v66 + 48);
    __int16 v48 = v62;
    v40((uint64_t)v62, v46, v19);
    v48[v47] = 0;
    uint64_t v50 = v33[2];
    int v49 = v33[3];
    if (v50 >= v49 >> 1) {
      size_t v33 = (void *)sub_186C1D188(v49 > 1, v50 + 1, 1, v33);
    }
    uint64_t v51 = (uint64_t)v62;
    unsigned int v52 = (uint64_t)v63;
    v33[2] = v50 + 1;
    sub_186BFA418(v51, (uint64_t)v33 + v44 + v50 * v45, &qword_18C6A2828);
    CFTypeID v6 = v66;
  }

  else
  {
    unsigned int v52 = (uint64_t)v63;
  }

  uint64_t v53 = v65;
  sub_186C5AA08();
  uint64_t v54 = *(int *)(v6 + 48);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v67 + 32))(v52, v53, v19);
  *(_BYTE *)(v52 + v54) = 1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    size_t v33 = (void *)sub_186C1D188(0LL, v33[2] + 1LL, 1, v33);
  }
  int v56 = v33[2];
  __int16 v55 = v33[3];
  if (v56 >= v55 >> 1) {
    size_t v33 = (void *)sub_186C1D188(v55 > 1, v56 + 1, 1, v33);
  }
  v33[2] = v56 + 1;
  sub_186BFA418( v52,  (uint64_t)v33 + ((*(unsigned __int8 *)(v7 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))
  + *(void *)(v7 + 72) * v56,
    &qword_18C6A2828);
  return v33;
}

void _ariadne_process_dict_apply(const __CFString *a1, const __CFDictionary *a2, uint64_t a3)
{
  CStringPtr = CFStringGetCStringPtr(a1, 0x8000100u);
  int v7 = (char *)CStringPtr;
  if (!CStringPtr)
  {
    CFIndex v8 = CFStringGetLength(a1) + 1;
    uint64_t v9 = (char *)malloc(v8);
    if (!v9) {
      ktrace_remotetime_update_params_cold_1();
    }
    int v7 = v9;
    if (!CFStringGetCString(a1, v9, v8, 0x8000100u)) {
      ktrace_remotetime_update_params_cold_1();
    }
  }

  uint64_t v10 = strtol(v7, &__endptr, 0);
  if (v7 == __endptr)
  {
    int v12 = *__error();
    int v11 = -1;
    if (CStringPtr) {
      goto LABEL_12;
    }
  }

  else
  {
    else {
      int v11 = -1;
    }
    else {
      int v12 = 34;
    }
    if (CStringPtr)
    {
LABEL_12:
      if (v12) {
        return;
      }
      goto LABEL_16;
    }
  }

  free(v7);
  if (v12) {
    return;
  }
LABEL_16:
  if (v11 == -1) {
    _os_assumes_log();
  }
  if (CFDictionaryGetValueIfPresent(a2, @"Name", (const void **)&__endptr))
  {
    CFIndex v13 = CFStringGetLength((CFStringRef)__endptr) + 1;
    uint64_t v14 = (char *)malloc(v13);
    if (!v14) {
      return;
    }
    int v15 = v14;
    if (CFStringGetCString((CFStringRef)__endptr, v14, v13, 0x8000100u))
    {
      if (!a3) {
        ktrace_remotetime_update_params_cold_1();
      }
      int Value = CFDictionaryGetValue(*(CFDictionaryRef *)(a3 + 16), (const void *)v11);
      if (Value) {
        goto LABEL_25;
      }
      int v17 = malloc(0x28uLL);
      if (v17)
      {
        int Value = v17;
        *int v17 = -1LL;
        *((_DWORD *)v17 + 2) = v11;
        *(void *)((char *)v17 + 12) = -1LL;
        v17[3] = 0LL;
        _OWORD v17[4] = -1LL;
LABEL_25:
        if (v11) {
          uint64_t v18 = -1LL;
        }
        else {
          uint64_t v18 = 0LL;
        }
        void *Value = v18;
        Value[3] = v15;
        Value[4] = 0LL;
        CFDictionarySetValue(*(CFMutableDictionaryRef *)(a3 + 16), (const void *)v11, Value);
        return;
      }
    }

    free(v15);
    return;
  }

  int v19 = *__error();
  ktrace_log_init();
  if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
    _ariadne_process_dict_apply_cold_3();
  }
  *__error() = v19;
}

uint64_t insert_legacy_entry_internal(uint64_t a1, const void *a2, BOOL a3, char *__s1)
{
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  if (a3) {
    a3 = strcmp(__s1, "kernel_task") != 0;
  }
  BOOL v7 = a3;
  int Value = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 16), (const void *)a3);
  if (Value)
  {
    uint64_t v9 = Value;
    if (!*((void *)Value + 3)) {
      *((void *)Value + 3) = strndup(__s1, 0x14uLL);
    }
    goto LABEL_9;
  }

  uint64_t v10 = task_alloc(-1LL, v7, __s1, 0x14uLL);
  if (v10)
  {
    uint64_t v9 = v10;
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 16), (const void *)v7, v10);
LABEL_9:
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 32), a2, v9);
    return 0LL;
  }

  return 12LL;
}

void OUTLINED_FUNCTION_3_2(void *a1, int a2, os_log_t log, const char *a4, uint8_t *a5)
{
}

_BYTE *OUTLINED_FUNCTION_5_3(_BYTE *result, _BYTE *a2)
{
  void *result = 0;
  *a2 = 0;
  return result;
}

uint64_t ktrace_address_space_create(int a1)
{
  uint64_t Instance = _CFRuntimeCreateInstance();
  if (!Instance) {
    ktrace_remotetime_update_params_cold_1();
  }
  uint64_t v3 = Instance;
  *(_OWORD *)(Instance + 16) = 0u;
  *(_OWORD *)(Instance + 32) = 0u;
  *(_OWORD *)(Instance + 4_Block_object_dispose(va, 8) = 0u;
  *(_DWORD *)(Instance + 32) = a1;
  *(void *)(Instance + 24) = 0LL;
  uint64_t v4 = operator new(0x18uLL);
  v4[1] = 0LL;
  int v4[2] = 0LL;
  void *v4 = 0LL;
  *(void *)(v3 + 16) = v4;
  return v3;
}

uint64_t ktrace_uuid_map_create(uint64_t a1, uint64_t a2)
{
  uint64_t Instance = _CFRuntimeCreateInstance();
  uint64_t v10 = Instance;
  if (Instance)
  {
    unint64_t v11 = 4294901759LL;
    unint64_t v12 = 0xFFFFFF8000000000LL;
    uint64_t v13 = -4097LL;
    if (a2)
    {
      v23[0] = MEMORY[0x1895F87A8];
      v23[1] = 3221225472LL;
      void v23[2] = __ktrace_uuid_map_create_block_invoke;
      void v23[3] = &__block_descriptor_40_e149_B16__0__ktrace_chunk___ktrace_file_Q___q____CFData__QISS__ktrace_chunk__ktrace_chunk_array____ktrace_chunk___ktrace_chunk_QQQqq______ktrace_chunk___8l;
      v23[4] = Instance;
      ktrace_file_iterate(a2, 0LL, (uint64_t)v23, v5, v6, v7, v8, v9);
      if (!*(_BYTE *)(a2 + 298))
      {
        uint64_t v13 = 4294901759LL;
        unint64_t v12 = 0x80000000LL;
      }
    }

    *(void *)(v10 + 272) = 0LL;
    if (a1)
    {
      *(void *)(v10 + 272) = *(_DWORD *)(a1 + 192) | (*(unsigned __int8 *)(a1 + 204) << 24) | ((unint64_t)*(unsigned int *)(a1 + 196) << 32);
    }

    else
    {
      uint64_t v25 = 0LL;
      uint64_t v26 = &v25;
      uint64_t v27 = 0x2020000000LL;
      char v28 = 0;
      if (!a2)
      {
        _Block_object_dispose(&v25, 8);
        goto LABEL_25;
      }

      v24[0] = MEMORY[0x1895F87A8];
      v24[1] = 3221225472LL;
      v24[2] = ___ZL15figure_out_archP15_CSArchitectureP14ktrace_machineP11ktrace_file_block_invoke;
      v24[3] = &unk_189F54E30;
      v24[4] = &v25;
      void v24[5] = v10 + 272;
      ktrace_file_iterate(a2, 0LL, (uint64_t)v24, v5, v6, v7, v8, v9);
      int v16 = *((unsigned __int8 *)v26 + 24);
      _Block_object_dispose(&v25, 8);
      if (!v16)
      {
LABEL_25:
        *(void *)(v10 + 256) = v12;
        unint64_t v11 = v13;
LABEL_26:
        unint64_t v15 = v11;
LABEL_27:
        *(void *)(v10 + 264) = v15;
        *(void *)(v10 + 16) = 0LL;
        int v17 = operator new(0x28uLL);
        *int v17 = 0u;
        v17[1] = 0u;
        *((_DWORD *)v17 + _Block_object_dispose(va, 8) = 1065353216;
        *(void *)(v10 + 24) = v17;
        uint64_t v18 = operator new(0x28uLL);
        *uint64_t v18 = 0u;
        v18[1] = 0u;
        *((_DWORD *)v18 + _Block_object_dispose(va, 8) = 1065353216;
        *(void *)(v10 + 32) = v18;
        int v19 = operator new(0x28uLL);
        *int v19 = 0u;
        v19[1] = 0u;
        *((_DWORD *)v19 + _Block_object_dispose(va, 8) = 1065353216;
        *(void *)(v10 + 40) = v19;
        __int128 v20 = operator new(0x28uLL);
        *__int128 v20 = 0u;
        v20[1] = 0u;
        *((_DWORD *)v20 + _Block_object_dispose(va, 8) = 1065353216;
        *(void *)(v10 + 216) = v20;
        std::__optional_destruct_base<DyldDecodeWindow,false>::reset[abi:ne180100](v10 + 48);
        *(_OWORD *)(v10 + 80) = 0u;
        *(_OWORD *)(v10 + 96) = 0u;
        *(_OWORD *)(v10 + 112) = 0u;
        *(_OWORD *)(v10 + 12_Block_object_dispose(va, 8) = 0u;
        *(_OWORD *)(v10 + 144) = 0u;
        *(_OWORD *)(v10 + 160) = 0u;
        *(_OWORD *)(v10 + 176) = 0u;
        *(_OWORD *)(v10 + 192) = 0u;
        *(_OWORD *)(v10 + 4_Block_object_dispose(va, 8) = 0u;
        *(_OWORD *)(v10 + 64) = 0u;
        *(_DWORD *)(v10 + 80) = 1065353216;
        *(void *)(v10 + 96) = 0LL;
        *(void *)(v10 + 104) = 0LL;
        *(void *)(v10 + 8_Block_object_dispose(va, 8) = 0LL;
        *(_DWORD *)(v10 + 112) = 0;
        *(void *)(v10 + 12_Block_object_dispose(va, 8) = 0LL;
        *(void *)(v10 + 136) = 0LL;
        *(void *)(v10 + 120) = 0LL;
        *(_BYTE *)(v10 + 144) = 0;
        *(void *)(v10 + 152) = -1LL;
        *(_OWORD *)(v10 + 160) = 0u;
        *(_OWORD *)(v10 + 176) = 0u;
        *(_DWORD *)(v10 + 192) = 1065353216;
        *(_DWORD *)(v10 + 200) = 1;
        *(_BYTE *)(v10 + 20_Block_object_dispose(va, 8) = 1;
        return v10;
      }
    }

    if ((CSArchitectureIsArm64() & 1) != 0)
    {
      unint64_t v12 = 0xFFFFFFE000000000LL;
      unint64_t v11 = 0xFFFFFFF27FFFFFFFLL;
      if (!a1) {
        goto LABEL_23;
      }
LABEL_14:
      unint64_t v14 = *(void *)(a1 + 16);
      if (v14 == -1LL) {
        unint64_t v14 = v12;
      }
      *(void *)(v10 + 256) = v14;
      unint64_t v15 = *(void *)(a1 + 24);
      if (v15) {
        goto LABEL_27;
      }
      goto LABEL_26;
    }

    if ((CSArchitectureIsArm() & 1) != 0)
    {
      unint64_t v12 = 0x80000000LL;
      if (a1) {
        goto LABEL_14;
      }
      goto LABEL_23;
    }

    if ((CSArchitectureIsX86_64() & 1) != 0)
    {
      unint64_t v12 = 0xFFFFFF8000000000LL;
      unint64_t v11 = -4097LL;
      if (a1) {
        goto LABEL_14;
      }
LABEL_23:
      uint64_t v13 = v11;
      goto LABEL_25;
    }

    uint64_t v22 = (os_log_s *)ktrace_log;
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
      ktrace_uuid_map_create_cold_1(a1 == 0, a1, v22);
    }
    CFRelease((CFTypeRef)v10);
    return 0LL;
  }

  return v10;
}

void sub_186BCD674( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
}

uint64_t __ktrace_uuid_map_create_block_invoke(uint64_t a1, uint64_t a2)
{
  return 1LL;
}

BOOL ktrace_uuid_map_plausible_kernel_address(BOOL result, unint64_t a2)
{
  if (result) {
    return *(void *)(result + 256) <= a2 && *(void *)(result + 264) >= a2;
  }
  return result;
}

void ktrace_address_space_append(uint64_t a1, uint64_t a2)
{
  if (*(_OWORD *)a2 == 0LL)
  {
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_FAULT)) {
      ktrace_address_space_append();
    }
  }

  else
  {
    if (*(_DWORD *)(a2 + 16) == 3)
    {
      if ((*(_BYTE *)(a1 + 36) & 2) != 0)
      {
        uint64_t v6 = *(uint64_t **)(a1 + 16);
        uint64_t v8 = *v6;
        uint64_t v7 = v6[1];
        while (v8 != v7)
        {
          if (*(_DWORD *)(v8 + 16) == 3)
          {
            if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_FAULT)) {
              ktrace_address_space_append();
            }
            return;
          }

          v8 += 96LL;
        }
      }

      *(_BYTE *)(a1 + 36) |= 2u;
    }

    uint64_t v3 = *(uint64_t **)(a1 + 16);
    unint64_t v4 = v3[1];
    if (v4 >= v3[2])
    {
      uint64_t v5 = std::vector<SymbolOwner>::__push_back_slow_path<SymbolOwner const&>(v3, (_OWORD *)a2);
    }

    else
    {
      std::vector<SymbolOwner>::__construct_one_at_end[abi:ne180100]<SymbolOwner const&>((uint64_t)v3, (_OWORD *)a2);
      uint64_t v5 = v4 + 96;
    }

    v3[1] = v5;
    *(_BYTE *)(a1 + 36) &= ~1u;
  }

void ktrace_address_space_sort(uint64_t a1, __n128 a2)
{
  if ((*(_BYTE *)(a1 + 36) & 1) == 0)
  {
    uint64_t v3 = *(__int128 ***)(a1 + 16);
    unint64_t v4 = *v3;
    uint64_t v5 = v3[1];
    unint64_t v6 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (((char *)v5 - (char *)*v3) >> 5));
    uint64_t v8 = ktrace_compare_symbol_owners;
    if (v5 == v4) {
      uint64_t v7 = 0LL;
    }
    else {
      uint64_t v7 = v6;
    }
    std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(SymbolOwner const&,SymbolOwner const&),SymbolOwner*,false>( v4,  v5,  (uint64_t (**)(__int128 *, __int128 *))&v8,  v7,  1,  a2);
    *(_BYTE *)(a1 + 36) |= 1u;
  }

BOOL ktrace_compare_symbol_owners(uint64_t a1, uint64_t a2)
{
  return *(void *)(a1 + 48) < *(void *)(a2 + 48);
}

uint64_t ktrace_address_space_symbol_owner_for_address(uint64_t a1, unint64_t a2, __n128 a3)
{
  uint64_t v5 = *(uint64_t **)(a1 + 16);
  uint64_t v7 = *v5;
  uint64_t v6 = v5[1];
  while (1)
  {
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 5);
    if (!v8) {
      return 0LL;
    }
    if (v8 == 1) {
      break;
    }
    if (*(void *)(v7 + 96 * ((v6 - v7) / 192) + 48) <= a2) {
      v7 += 96 * ((v6 - v7) / 192);
    }
    else {
      uint64_t v6 = v7 + 96 * ((v6 - v7) / 192);
    }
  }

  unint64_t v9 = *(void *)(v7 + 48);
  BOOL v10 = a2 >= v9;
  unint64_t v11 = a2 - v9;
  if (!v10) {
    return 0LL;
  }
  if (*(void *)(v7 + 56))
  {
    return 0LL;
  }

  if (HIDWORD(v11) && *(_DWORD *)(v7 + 16) != 4) {
    return 0LL;
  }
  return v7;
}

uint64_t optional_uint64::value(optional_uint64 *this)
{
  if (!*(void *)this) {
    ktrace_remotetime_update_params_cold_1();
  }
  return *(void *)this - 1LL;
}

_DWORD *ktrace_address_space_from_stackshot(kcdata_iter a1)
{
  end = (kcdata_item *)a1.end;
  kcdata_item_t item = a1.item;
  uint64_t v3 = ktrace_address_space_create(-1);
  unint64_t v4 = (_DWORD *)v3;
  if (!v3) {
    return v4;
  }
  *(void *)(v3 + 24) = item->flags + 1;
  uint64_t v5 = (optional_uint64 *)(v3 + 24);
  kcdata_item_t v6 = item + 1;
  if (&item[1] <= end)
  {
    unsigned int v8 = 0;
    unint64_t v9 = v83;
    do
    {
      uint64_t size = item->size;
      uint32_t type = item->type;
      unsigned int v12 = item->type & 0xFFFFFFF0;
      if (v12 == 32) {
        int v13 = 17;
      }
      else {
        int v13 = item->type;
      }
      switch(v13)
      {
        case 2309:
          unsigned int v14 = item->flags & 0xF;
          BOOL v15 = size >= v14;
          unsigned int v16 = size - v14;
          if (!v15) {
            unsigned int v16 = 0;
          }
          if (v16 >= 0x78)
          {
            v4[8] = item[6].size;
            goto LABEL_214;
          }

          break;
        case 20:
          if (v8 < 2)
          {
            if (v4[8] != -1) {
              return v4;
            }
            if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_FAULT)) {
              ktrace_address_space_from_stackshot();
            }
            goto LABEL_5;
          }

          --v8;
          goto LABEL_214;
        case 19:
          ++v8;
          goto LABEL_214;
      }

      BOOL v17 = type == 17;
      if (v12 != 32 && type != 17) {
        goto LABEL_196;
      }
      uint64_t flags = item->flags;
      if ((_DWORD)flags)
      {
        if (type == 17)
        {
          BOOL v17 = 1;
          if (SHIDWORD(flags) <= 2310)
          {
            switch(HIDWORD(flags))
            {
              case 0x30:
                unsigned int v20 = 20;
                break;
              case 0x31:
                unsigned int v20 = 24;
                break;
              case 0x81A:
LABEL_46:
                unsigned int v20 = 8;
                break;
              default:
                goto LABEL_60;
            }
          }

          else
          {
            switch(HIDWORD(flags))
            {
              case 0x907:
                unsigned int v20 = 4;
                break;
              case 0x908:
              case 0x909:
                goto LABEL_60;
              case 0x90A:
              case 0x90C:
                goto LABEL_46;
              case 0x90B:
              case 0x90D:
                unsigned int v20 = 16;
                break;
              default:
                if (HIDWORD(flags) != 2369) {
                  goto LABEL_60;
                }
                unsigned int v20 = 48;
                break;
            }
          }

          if (size / v20 >= flags
            && size % flags <= 0xF
            && (flags & 0xFFFFFFFF00000000LL) == 0x3000000000LL)
          {
            goto LABEL_79;
          }

          BOOL v17 = 1;
        }

        else
        {
          unsigned int v21 = size - (item->type & 0xF);
          if (size >= (item->type & 0xF)
            && v21 >= flags
            && !(v21 % flags)
            && (flags & 0xFFFFFFFF00000000LL) == 0x3000000000LL)
          {
            if (v21 / flags < 0x14)
            {
LABEL_34:
              if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_FAULT)) {
                ktrace_address_space_from_stackshot(&v82, v9);
              }
              goto LABEL_214;
            }

LABEL_79:
            int v56 = v9;
            uint64_t v57 = v5;
            unsigned int v28 = 0;
            do
            {
              if (item->type == 17)
              {
                if (SHIDWORD(flags) <= 2310)
                {
                  switch(HIDWORD(flags))
                  {
                    case 0x30:
                      unsigned int v29 = 20;
                      break;
                    case 0x31:
                      unsigned int v29 = 24;
                      break;
                    case 0x81A:
LABEL_88:
                      unsigned int v29 = 8;
                      break;
                    default:
LABEL_91:
                      unsigned int v29 = 0;
                      break;
                  }
                }

                else
                {
                  switch(HIDWORD(flags))
                  {
                    case 0x907:
                      unsigned int v29 = 4;
                      break;
                    case 0x908:
                    case 0x909:
                      goto LABEL_91;
                    case 0x90A:
                    case 0x90C:
                      goto LABEL_88;
                    case 0x90B:
                    case 0x90D:
                      unsigned int v29 = 16;
                      break;
                    default:
                      if (HIDWORD(flags) != 2369) {
                        goto LABEL_91;
                      }
                      unsigned int v29 = 48;
                      break;
                  }
                }
              }

              else
              {
                unsigned int v29 = (item->size - (item->type & 0xF)) / flags;
              }

              uint64_t v30 = (const unsigned __int8 *)&item[1] + v29 * v28;
              if (!uuid_is_null(v30 + 4))
              {
                uint64_t v31 = *(unsigned int *)v30;
                if ((_DWORD)v31)
                {
                  __int128 v80 = 0u;
                  __int128 v81 = 0u;
                  __int128 v79 = 0u;
                  __int128 v77 = 0u;
                  memset(v78, 0, sizeof(v78));
                  LODWORD(v78[0]) = 1;
                  *(void *)&__int128 v79 = v31;
                  __int128 v77 = *(_OWORD *)(v30 + 4);
                  v76[2] = v78[1];
                  v76[3] = v79;
                  v76[4] = v80;
                  v76[5] = v81;
                  v76[0] = v77;
                  v76[1] = v78[0];
                  __int128 v77 = 0u;
                  memset(v78, 0, sizeof(v78));
                  __int128 v79 = 0u;
                  __int128 v80 = 0u;
                  __int128 v81 = 0u;
                  ktrace_address_space_append((uint64_t)v4, (uint64_t)v76);
                  SymbolOwner::~SymbolOwner((SymbolOwner *)v76);
                  SymbolOwner::~SymbolOwner((SymbolOwner *)&v77);
                }
              }

              ++v28;
              uint64_t flags = item->flags;
            }

            while (v28 < flags);
LABEL_181:
            uint64_t v5 = v57;
            unint64_t v9 = v56;
            goto LABEL_214;
          }
        }
      }

      else if (!(_DWORD)size && (flags & 0xFFFFFFFF00000000LL) == 0x3000000000LL)
      {
        if (type != 17) {
          goto LABEL_34;
        }
        goto LABEL_214;
      }

      char v82 = v134[7] - v134[6];
      if (v82) {
        v83 = (void *)v134[6];
      }
      else {
        v83 = &flatbuffers::data<flatbuffers::Offset<FlatbufferSymbols::Segment>,std::allocator<flatbuffers::Offset<FlatbufferSymbols::Segment>>>(std::vector<flatbuffers::Offset<FlatbufferSymbols::Segment>> const&)::t;
      }
      v84 = flatbuffers::FlatBufferBuilder::CreateVector<KernelTraceCatalog::Thread>( *(flatbuffers::FlatBufferBuilder **)(a1 + 56),  (uint64_t)v83,  v82 >> 2);
      v85 = *(void *)(a1 + 56);
      flatbuffers::FlatBufferBuilder::NotNested(v85);
      *(_BYTE *)(v85 + 70) = 1;
      v86 = *(_DWORD *)(v85 + 32);
      v87 = *(_DWORD *)(v85 + 48);
      v88 = *(_DWORD *)(v85 + 40);
      if (v76) {
        flatbuffers::FlatBufferBuilder::AddOffset<flatbuffers::String>((flatbuffers::FlatBufferBuilder *)v85, 4LL, v76);
      }
      v89 = *(_DWORD *)(*((void *)&v125 + 1) + 48LL);
      if (v89) {
        flatbuffers::FlatBufferBuilder::AddOffset<flatbuffers::String>((flatbuffers::FlatBufferBuilder *)v85, 6LL, v89);
      }
      flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>(v85, 8LL, *(void *)(a2 + 64), 0LL);
      flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>(v85, 10LL, *(void *)(a2 + 72), 0LL);
      v90 = flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)v85, v86 - v87 + v88);
      v91 = *(void *)(a1 + 56);
      flatbuffers::FlatBufferBuilder::NotNested(v91);
      *(_BYTE *)(v91 + 70) = 1;
      v92 = *(_DWORD *)(v91 + 32);
      v93 = *(_DWORD *)(v91 + 48);
      v94 = *(_DWORD *)(v91 + 40);
      flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(v91, 4LL, 1, 0);
      flatbuffers::FlatBufferBuilder::AddOffset<flatbuffers::String>((flatbuffers::FlatBufferBuilder *)v91, 6LL, v90);
      v95 = *(_DWORD *)(a2 + 16);
      if (v95 == 5)
      {
        flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>(v91, 10LL, v7, -1LL);
        v95 = *(_DWORD *)(a2 + 16);
      }

      if (v95 == 1) {
        flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(v91, 12LL, 1, 0);
      }
      flatbuffers::FlatBufferBuilder::AddOffset<flatbuffers::String>((flatbuffers::FlatBufferBuilder *)v91, 8LL, v84);
      v96 = *(void **)(*(void *)(a1 + 40) + 8LL);
      v97 = flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)v91, v92 - v93 + v94);
      v98 = v97;
      v99 = v96[8];
      v100 = (char *)v96[7];
      if ((unint64_t)v100 >= v99)
      {
        v102 = (char *)v96[6];
        v103 = (v100 - v102) >> 2;
        v104 = v99 - (void)v102;
        v105 = (uint64_t)(v99 - (void)v102) >> 1;
        if (v105 <= v103 + 1) {
          v105 = v103 + 1;
        }
        if (v104 >= 0x7FFFFFFFFFFFFFFCLL) {
          v106 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          v106 = v105;
        }
        if (v106)
        {
          v107 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<flatbuffers::Offset<KernelTraceCatalog::Thread>>>( (uint64_t)(v96 + 8),  v106);
          v102 = (char *)v96[6];
          v100 = (char *)v96[7];
        }

        else
        {
          v107 = 0LL;
        }

        v117 = &v107[4 * v103];
        v118 = &v107[4 * v106];
        *(_DWORD *)v117 = v98;
        v101 = v117 + 4;
        if (v100 == v102)
        {
          unsigned int v54 = (void *)v123;
        }

        else
        {
          unsigned int v54 = (void *)v123;
          do
          {
            v119 = *((_DWORD *)v100 - 1);
            v100 -= 4;
            *((_DWORD *)v117 - ktrace_session_set_default_event_names_enabled(global_session, 1) = v119;
            v117 -= 4;
          }

          while (v100 != v102);
        }

        v96[6] = v117;
        v96[7] = v101;
        v96[8] = v118;
        if (v102) {
          operator delete(v102);
        }
      }

      else
      {
        *(_DWORD *)v100 = v97;
        v101 = v100 + 4;
        unsigned int v54 = (void *)v123;
      }

      v96[7] = v101;
      _Block_object_dispose(&v125, 8);
LABEL_113:
      _Block_object_dispose(&v133, 8);
      if (__p)
      {
        v140 = __p;
        operator delete(__p);
      }

      objc_autoreleasePoolPop(v54);
      return;
    case 3:
      get_sc_and_slide(*(void *)(*(void *)(a1 + 48) + 80LL), a2, (uint64_t *)a3, &v132);
      if (*(_OWORD *)a2 == 0LL)
      {
        BOOL v17 = 0;
      }

      else
      {
        BOOL v15 = *(flatbuffers::FlatBufferBuilder **)(a1 + 56);
        unsigned int v16 = uuid_string(*(void *)a2, *(void *)(a2 + 8));
        BOOL v17 = flatbuffers::FlatBufferBuilder::CreateString(v15, v16, 0x24uLL);
      }

      uint64_t v41 = *(void *)(a1 + 56);
      flatbuffers::FlatBufferBuilder::NotNested(v41);
      *(_BYTE *)(v41 + 70) = 1;
      unsigned int v42 = *(_DWORD *)(v41 + 32);
      unsigned int v43 = *(_DWORD *)(v41 + 48);
      uint64_t v44 = *(_DWORD *)(v41 + 40);
      v125 = *(_OWORD *)a2;
      if (v125 != 0) {
        flatbuffers::FlatBufferBuilder::AddOffset<flatbuffers::String>((flatbuffers::FlatBufferBuilder *)v41, 4LL, v17);
      }
      uint64_t v45 = flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)v41, v42 - v43 + v44);
      unsigned int v46 = *(void *)(a1 + 56);
      flatbuffers::FlatBufferBuilder::NotNested(v46);
      *(_BYTE *)(v46 + 70) = 1;
      unint64_t v47 = *(_DWORD *)(v46 + 32);
      __int16 v48 = *(_DWORD *)(v46 + 48);
      unsigned int v49 = *(_DWORD *)(v46 + 40);
      flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(v46, 4LL, 1, 0);
      flatbuffers::FlatBufferBuilder::AddOffset<flatbuffers::String>((flatbuffers::FlatBufferBuilder *)v46, 6LL, v45);
      if (*(void *)a3)
      {
        unint64_t v50 = optional_uint64::value(a3);
        flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>(v46, 8LL, v50, -1LL);
      }

      *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 48LL) = flatbuffers::FlatBufferBuilder::EndTable( (flatbuffers::FlatBufferBuilder *)v46,  v47 - v48 + v49);
      if ((*(_BYTE *)(a1 + 64) & 1) != 0)
      {
        uint64_t v51 = (int)v132;
        if (v132)
        {
          if (!std::__hash_table<CFUUIDBytes,std::hash<CFUUIDBytes>,std::equal_to<CFUUIDBytes>,std::allocator<CFUUIDBytes>>::find<CFUUIDBytes>( *(void **)(a1 + 72),  (void *)a2))
          {
            uint64_t v52 = ktrace_address_space_buildbuffer( *(void *)(a1 + 80),  *(void *)(a1 + 48),  v51,  3,  v45,  *(flatbuffers::FlatBufferBuilder **)(a1 + 56));
            unsigned int v53 = *(void *)(a1 + 72);
            *(void *)&v125 = a2;
            *((_DWORD *)std::__hash_table<std::__hash_value_type<CFUUIDBytes,flatbuffers::Offset<FlatbufferSymbols::Symbolicator>>,std::__unordered_map_hasher<CFUUIDBytes,std::__hash_value_type<CFUUIDBytes,flatbuffers::Offset<FlatbufferSymbols::Symbolicator>>,std::hash<CFUUIDBytes>,std::equal_to<CFUUIDBytes>,true>,std::__unordered_map_equal<CFUUIDBytes,std::__hash_value_type<CFUUIDBytes,flatbuffers::Offset<FlatbufferSymbols::Symbolicator>>,std::equal_to<CFUUIDBytes>,std::hash<CFUUIDBytes>,true>,std::allocator<std::__hash_value_type<CFUUIDBytes,flatbuffers::Offset<FlatbufferSymbols::Symbolicator>>>>::__emplace_unique_key_args<CFUUIDBytes,std::piecewise_construct_t const&,std::tuple<CFUUIDBytes const&>,std::tuple<>>( v53,  (void *)a2,  (uint64_t)&std::piecewise_construct,  (_OWORD **)&v125)
            + _Block_object_dispose(va, 8) = v52;
          }
        }
      }

      unsigned int v54 = (void *)v123;
      goto LABEL_113;
    case 5:
      uint64_t v18 = *(void *)(a1 + 56);
      flatbuffers::FlatBufferBuilder::NotNested(v18);
      *(_BYTE *)(v18 + 70) = 1;
      int v19 = *(_DWORD *)(v18 + 32);
      unsigned int v20 = *(_DWORD *)(v18 + 48);
      unsigned int v21 = *(_DWORD *)(v18 + 40);
      flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>(v18, 6LL, v7, -1LL);
      if (*(void *)(a2 + 56))
      {
        uint64_t v22 = optional_uint64::value((optional_uint64 *)(a2 + 56));
        flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>(v18, 8LL, v22, 0LL);
      }

      CFDictionaryValueCallBacks v23 = v19 - v20 + v21;
      uint64_t v24 = v134;
      unsigned int v25 = flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)v18, v23);
      unsigned int v26 = v24[8];
      uint64_t v27 = (char *)v24[7];
      unsigned int v28 = (char *)v24[6];
      unsigned int v29 = (v27 - v28) >> 2;
      uint64_t v30 = v26 - (void)v28;
      uint64_t v31 = (uint64_t)(v26 - (void)v28) >> 1;
      if (v31 <= v29 + 1) {
        uint64_t v31 = v29 + 1;
      }
      if (v30 >= 0x7FFFFFFFFFFFFFFCLL) {
        uint64_t v32 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        uint64_t v32 = v31;
      }
      if (v32)
      {
        uint64_t v33 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<flatbuffers::Offset<KernelTraceCatalog::Thread>>>( (uint64_t)(v24 + 8),  v32);
        unsigned int v28 = (char *)v24[6];
        uint64_t v27 = (char *)v24[7];
      }

      else
      {
        uint64_t v33 = 0LL;
      }

      __int128 v69 = &v33[4 * v29];
      char v70 = &v33[4 * v32];
      *(_DWORD *)__int128 v69 = v25;
      __int128 v63 = v69 + 4;
      while (v27 != v28)
      {
        char v71 = *((_DWORD *)v27 - 1);
        v27 -= 4;
        *((_DWORD *)v69 - ktrace_session_set_default_event_names_enabled(global_session, 1) = v71;
        v69 -= 4;
      }

      goto LABEL_70;
    default:
      v122 = _os_crash();
      ktrace_uuid_map_learn_tailspin_symbols_with_chunk_cold_2(v122);
  }

LABEL_60:
      uint64_t v24 = item->flags;
      if ((_DWORD)v24)
      {
        if (v17)
        {
          if (SHIDWORD(v24) <= 2310)
          {
            switch(HIDWORD(v24))
            {
              case 0x30:
                unsigned int v25 = 20;
                break;
              case 0x31:
                unsigned int v25 = 24;
                break;
              case 0x81A:
LABEL_106:
                unsigned int v25 = 8;
                break;
              default:
                goto LABEL_117;
            }
          }

          else
          {
            switch(HIDWORD(v24))
            {
              case 0x907:
                unsigned int v25 = 4;
                break;
              case 0x908:
              case 0x909:
                goto LABEL_117;
              case 0x90A:
              case 0x90C:
                goto LABEL_106;
              case 0x90B:
              case 0x90D:
                unsigned int v25 = 16;
                break;
              default:
                if (HIDWORD(v24) != 2369) {
                  goto LABEL_117;
                }
                unsigned int v25 = 48;
                break;
            }
          }

          if (size / v25 >= v24
            && size % v24 <= 0xF
            && (v24 & 0xFFFFFFFF00000000LL) == 0x3100000000LL)
          {
            goto LABEL_158;
          }
        }

        else
        {
          unsigned int v26 = size - (item->type & 0xF);
          if (size >= (item->type & 0xF)
            && v26 >= v24
            && !(v26 % v24)
            && (v24 & 0xFFFFFFFF00000000LL) == 0x3100000000LL)
          {
            if (v26 / v24 < 0x18)
            {
LABEL_68:
              if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_FAULT)) {
                ktrace_address_space_from_stackshot(&v74, v75);
              }
              goto LABEL_214;
            }

LABEL_158:
            int v56 = v9;
            uint64_t v57 = v5;
            unsigned int v42 = 0;
            do
            {
              if (item->type == 17)
              {
                if (SHIDWORD(v24) <= 2310)
                {
                  switch(HIDWORD(v24))
                  {
                    case 0x30:
                      unsigned int v43 = 20;
                      break;
                    case 0x31:
                      unsigned int v43 = 24;
                      break;
                    case 0x81A:
LABEL_167:
                      unsigned int v43 = 8;
                      break;
                    default:
LABEL_170:
                      unsigned int v43 = 0;
                      break;
                  }
                }

                else
                {
                  switch(HIDWORD(v24))
                  {
                    case 0x907:
                      unsigned int v43 = 4;
                      break;
                    case 0x908:
                    case 0x909:
                      goto LABEL_170;
                    case 0x90A:
                    case 0x90C:
                      goto LABEL_167;
                    case 0x90B:
                    case 0x90D:
                      unsigned int v43 = 16;
                      break;
                    default:
                      if (HIDWORD(v24) != 2369) {
                        goto LABEL_170;
                      }
                      unsigned int v43 = 48;
                      break;
                  }
                }
              }

              else
              {
                unsigned int v43 = (item->size - (item->type & 0xF)) / v24;
              }

              uint64_t v44 = (uint64_t)&item[1] + v43 * v42;
              if (!uuid_is_null((const unsigned __int8 *)(v44 + 8)))
              {
                uint64_t v45 = *(void *)v44;
                if (*(void *)v44)
                {
                  __int128 v80 = 0u;
                  __int128 v81 = 0u;
                  __int128 v79 = 0u;
                  __int128 v77 = 0u;
                  memset(v78, 0, sizeof(v78));
                  LODWORD(v78[0]) = 1;
                  *(void *)&__int128 v79 = v45;
                  __int128 v77 = *(_OWORD *)(v44 + 8);
                  v73[2] = v78[1];
                  v73[3] = v79;
                  v73[4] = v80;
                  v73[5] = v81;
                  v73[0] = v77;
                  v73[1] = v78[0];
                  __int128 v77 = 0u;
                  memset(v78, 0, sizeof(v78));
                  __int128 v79 = 0u;
                  __int128 v80 = 0u;
                  __int128 v81 = 0u;
                  ktrace_address_space_append((uint64_t)v4, (uint64_t)v73);
                  SymbolOwner::~SymbolOwner((SymbolOwner *)v73);
                  SymbolOwner::~SymbolOwner((SymbolOwner *)&v77);
                }
              }

              ++v42;
              uint64_t v24 = item->flags;
            }

            while (v42 < v24);
            goto LABEL_181;
          }
        }
      }

      else if (!(_DWORD)size && (v24 & 0xFFFFFFFF00000000LL) == 0x3100000000LL)
      {
        if (!v17) {
          goto LABEL_68;
        }
        goto LABEL_214;
      }

LABEL_117:
      uint64_t v33 = item->flags;
      if ((_DWORD)v33)
      {
        if (type != 17)
        {
          unsigned int v35 = item->type & 0xF;
          BOOL v15 = size >= v35;
          unsigned int v36 = size - v35;
          if (v15
            && v36 >= v33
            && !(v36 % v33)
            && (v33 & 0xFFFFFFFF00000000LL) == 0x92E00000000LL)
          {
            int v56 = v9;
            uint64_t v57 = v5;
            unsigned int v38 = 0;
            do
            {
              if (item->type == 17)
              {
                if (SHIDWORD(v33) <= 2310)
                {
                  switch(HIDWORD(v33))
                  {
                    case 0x30:
                      unsigned int v39 = 20;
                      break;
                    case 0x31:
                      unsigned int v39 = 24;
                      break;
                    case 0x81A:
LABEL_143:
                      unsigned int v39 = 8;
                      break;
                    default:
LABEL_146:
                      unsigned int v39 = 0;
                      break;
                  }
                }

                else
                {
                  switch(HIDWORD(v33))
                  {
                    case 0x907:
                      unsigned int v39 = 4;
                      break;
                    case 0x908:
                    case 0x909:
                      goto LABEL_146;
                    case 0x90A:
                    case 0x90C:
                      goto LABEL_143;
                    case 0x90B:
                    case 0x90D:
                      unsigned int v39 = 16;
                      break;
                    default:
                      if (HIDWORD(v33) != 2369) {
                        goto LABEL_146;
                      }
                      unsigned int v39 = 48;
                      break;
                  }
                }
              }

              else
              {
                unsigned int v39 = (item->size - (item->type & 0xF)) / v33;
              }

              uint64_t v40 = (uint64_t)&item[1] + v39 * v38;
              if (!uuid_is_null((const unsigned __int8 *)(v40 + 8)))
              {
                uint64_t v41 = *(void *)v40;
                if (*(void *)v40)
                {
                  __int128 v80 = 0u;
                  __int128 v81 = 0u;
                  __int128 v79 = 0u;
                  __int128 v77 = 0u;
                  memset(v78, 0, sizeof(v78));
                  LODWORD(v78[0]) = 2;
                  *(void *)&__int128 v79 = v41;
                  __int128 v77 = *(_OWORD *)(v40 + 8);
                  strcpy((char *)v78 + 8, "__TEXT_EXEC");
                  v70[2] = v78[1];
                  v70[3] = v79;
                  v70[4] = v80;
                  v70[5] = v81;
                  v70[0] = v77;
                  v70[1] = v78[0];
                  __int128 v77 = 0u;
                  memset(v78, 0, sizeof(v78));
                  __int128 v79 = 0u;
                  __int128 v80 = 0u;
                  __int128 v81 = 0u;
                  ktrace_address_space_append((uint64_t)v4, (uint64_t)v70);
                  SymbolOwner::~SymbolOwner((SymbolOwner *)v70);
                  SymbolOwner::~SymbolOwner((SymbolOwner *)&v77);
                }
              }

              ++v38;
              uint64_t v33 = item->flags;
            }

            while (v38 < v33);
            goto LABEL_181;
          }

          goto LABEL_196;
        }

        if (SHIDWORD(v33) > 2310)
        {
          switch(HIDWORD(v33))
          {
            case 0x907:
              unsigned int v34 = 4;
              break;
            case 0x908:
            case 0x909:
              goto LABEL_196;
            case 0x90A:
            case 0x90C:
              goto LABEL_185;
            case 0x90B:
            case 0x90D:
              unsigned int v34 = 16;
              break;
            default:
              if (HIDWORD(v33) != 2369) {
                goto LABEL_196;
              }
              unsigned int v34 = 48;
              break;
          }

LABEL_191:
          if (size / v34 >= v33)
          {
            unsigned int v46 = size % v33;
            unint64_t v47 = v33 & 0xFFFFFFFF00000000LL;
            if (v46 <= 0xF && v47 == 0x92E00000000LL)
            {
LABEL_212:
              if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_FAULT)) {
                ktrace_address_space_from_stackshot(&v71, v72);
              }
              goto LABEL_214;
            }
          }

          goto LABEL_196;
        }

        switch(HIDWORD(v33))
        {
          case 0x30:
            unsigned int v34 = 20;
            goto LABEL_191;
          case 0x31:
            unsigned int v34 = 24;
            goto LABEL_191;
          case 0x81A:
LABEL_185:
            unsigned int v34 = 8;
            goto LABEL_191;
        }
      }

      else if (!(_DWORD)size && (v33 & 0xFFFFFFFF00000000LL) == 0x92E00000000LL)
      {
        goto LABEL_212;
      }

LABEL_196:
      if (v13 == 2312)
      {
        uint64_t v52 = item->flags;
        if ((_DWORD)size == 32 && (v52 & 0x8F) == 0) {
          goto LABEL_214;
        }
        unsigned int v53 = v52 & 0xF;
        BOOL v15 = size >= v53;
        unsigned int v54 = size - v53;
        if (!v15) {
          unsigned int v54 = 0;
        }
        __int128 v62 = 0u;
        __int128 v63 = 0u;
        __int128 v60 = 0u;
        __int128 v61 = 0u;
        __int128 v59 = 0u;
        LODWORD(v59) = 3;
        uint64_t v55 = item[2].flags;
        *((void *)&v59 + ktrace_session_set_default_event_names_enabled(global_session, 1) = *(void *)&item[1].type + 1LL;
        *(void *)&__int128 v61 = v55;
        __int128 v58 = *(_OWORD *)&item[1].flags;
        ktrace_address_space_append((uint64_t)v4, (uint64_t)&v58);
        uint64_t v51 = (SymbolOwner *)&v58;
      }

      else
      {
        if (v13 != 2332) {
          goto LABEL_214;
        }
        BOOL v15 = size >= (item->flags & 0xF);
        unsigned int v49 = size - (item->flags & 0xF);
        if (!v15) {
          unsigned int v49 = 0;
        }
        if (v49 < 0x18) {
          goto LABEL_214;
        }
        unint64_t v50 = *(void *)&item[1].type;
        if (!v50) {
          goto LABEL_214;
        }
        __int128 v68 = 0u;
        __int128 v69 = 0u;
        __int128 v66 = 0u;
        __int128 v65 = 0u;
        LODWORD(v65) = 4;
        __int128 v67 = v50;
        __int128 v64 = *(_OWORD *)&item[1].flags;
        ktrace_address_space_append((uint64_t)v4, (uint64_t)&v64);
        uint64_t v51 = (SymbolOwner *)&v64;
      }

      SymbolOwner::~SymbolOwner(v51);
LABEL_214:
      kcdata_item_t item = (kcdata_item_t)((char *)v6 + item->size);
      kcdata_item_t v6 = item + 1;
    }

    while (&item[1] <= end);
  }

  if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_FAULT)) {
    ktrace_address_space_from_stackshot();
  }
LABEL_5:
  CFRelease(v4);
  return 0LL;
}

void sub_186BCE488(_Unwind_Exception *a1)
{
}

void ktrace_uuid_map_update_with_stackshot(uint64_t a1, kcdata_iter a2, uint64_t a3)
{
  uint64_t v64 = *MEMORY[0x1895F89C0];
  kcdata_item_t v3 = a2.item + 1;
  if (&a2.item[1] > a2.end) {
    return;
  }
  if (!a1) {
    return;
  }
  end = (kcdata_item *)a2.end;
  kcdata_item_t item = a2.item;
  kcdata_item_t v49 = 0LL;
  int v7 = 0;
  do
  {
    uint64_t size = item->size;
    uint32_t type = item->type;
    unsigned int v10 = item->type & 0xFFFFFFF0;
    if (v10 == 32) {
      int v11 = 17;
    }
    else {
      int v11 = item->type;
    }
    if (v11 == 19)
    {
      BOOL v12 = __CFADD__(v7++, 1);
      char v13 = v12;
    }

    else
    {
      v7 -= v11 == 20;
      if (v7)
      {
        char v13 = 0;
      }

      else
      {
        if (v11 != 51) {
          goto LABEL_21;
        }
        unsigned int v14 = item->flags & 0xF;
        BOOL v12 = size >= v14;
        unsigned int v15 = size - v14;
        if (!v12) {
          unsigned int v15 = 0;
        }
        if (v15 >= 8)
        {
          int v7 = 0;
          *(void *)(a1 + 16) = *(void *)&item[1].type;
        }

        else
        {
LABEL_21:
          int v7 = 0;
        }

        char v13 = 1;
      }
    }

    if (item->flags != -1LL)
    {
      v65.kcdata_item_t item = item;
      v65.end = end;
      unsigned int v16 = ktrace_address_space_from_stackshot(v65);
      if (!v16) {
        return;
      }
      BOOL v17 = address_space_for_taskid((ktrace_uuid_map *)a1, item->flags);
      if (v17) {
        goto LABEL_30;
      }
      unint64_t v37 = v16[8];
      if ((v37 & 0x80000000) == 0)
      {
        unsigned int v38 = address_space_for_pid((ktrace_uuid_map *)a1, v37);
        BOOL v17 = v38;
        if (v38)
        {
          if (!v38[3]) {
            goto LABEL_30;
          }
          if (optional_uint64::value((optional_uint64 *)(v38 + 3)) == item->flags)
          {
            unsigned int v39 = (os_log_s *)ktrace_log;
            if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_FAULT))
            {
              uint64_t v48 = *((int *)v17 + 8);
              uint64_t v40 = optional_uint64::value((optional_uint64 *)(v17 + 3));
              *(_DWORD *)__int128 buf = 134218240;
              *(void *)&uint8_t buf[4] = v48;
              *(_WORD *)&buf[12] = 2048;
              *(void *)&buf[14] = v40;
              _os_log_fault_impl( &dword_186BA3000,  v39,  OS_LOG_TYPE_FAULT,  "found address space for pid %ld with taskid=%llx, but couldn't find by taskid",  buf,  0x16u);
            }

LABEL_30:
            int v19 = (uint64_t *)v17[2];
            uint64_t v20 = *v19;
            uint64_t v21 = v19[1];
            while (v20 != v21)
            {
              uint64_t v22 = (SymbolOwner *)ktrace_address_space_symbol_owner_for_address( (uint64_t)v16,  *(void *)(v20 + 48),  v18);
              CFDictionaryValueCallBacks v23 = v22;
              if (v22)
              {
                if (*((void *)v22 + 6) > *(void *)(v20 + 48)) {
                  ktrace_uuid_map_update_with_stackshot_cold_1();
                }
                *(void *)&__int128 v58 = SymbolOwner::min_range(v22);
                *((void *)&v58 + ktrace_session_set_default_event_names_enabled(global_session, 1) = v24;
                *(void *)&__int128 v57 = SymbolOwner::min_range((SymbolOwner *)v20);
                *((void *)&v57 + ktrace_session_set_default_event_names_enabled(global_session, 1) = v25;
                if (Range::intersects((unint64_t *)&v58, (unint64_t *)&v57))
                {
                  if (a3)
                  {
                    uint64_t v26 = *(void *)(a3 + 304);
                    if (v26) {
                      LOBYTE(v26) = *(_BYTE *)(v26 + 288) != 0;
                    }
                  }

                  else
                  {
                    LOBYTE(v26) = 0;
                  }

                  goto LABEL_55;
                }

                __int128 v58 = *(_OWORD *)v23;
                __int128 v57 = *(_OWORD *)v20;
                if ((void)v58 != (void)v57 || *((void *)&v58 + 1) != *((void *)&v57 + 1))
                {
                  __int128 v33 = *(_OWORD *)(v20 + 32);
                  __int128 v34 = *(_OWORD *)(v20 + 48);
                  __int128 v35 = *(_OWORD *)(v20 + 64);
                  *(_OWORD *)__int128 v63 = *(_OWORD *)(v20 + 80);
                  __int128 v36 = *(_OWORD *)(v20 + 16);
                  *(_OWORD *)__int128 buf = *(_OWORD *)v20;
                  *(_OWORD *)&buf[16] = v36;
                  __int128 v61 = v34;
                  __int128 v62 = v35;
                  __int128 v60 = v33;
                  if (v63[0]) {
                    CFRetain(v63[0]);
                  }
                  ktrace_address_space_append((uint64_t)v16, (uint64_t)buf);
                  uint64_t v31 = (SymbolOwner *)buf;
                  goto LABEL_48;
                }

                if (a3)
                {
                  uint64_t v26 = *(void *)(a3 + 304);
                  if (v26) {
                    LOBYTE(v26) = *(_BYTE *)(v26 + 288) != 0;
                  }
                }

                else
                {
                  LOBYTE(v26) = 0;
                }

  __break(1u);
  return result;
}

  uint64_t result = sub_186C5B398();
  __break(1u);
  return result;
}

  BOOL v17 = 0LL;
  __n128 v18 = 0LL;
  if (!*(void *)(v46 + 16))
  {
LABEL_34:
    unsigned int v16 = 0;
    goto LABEL_35;
  }

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

    unsigned int v10 = (v25 - 1) & v25;
    uint64_t v22 = __clz(__rbit64(v25)) + (v13 << 6);
LABEL_31:
    uint64_t v31 = 16 * v22;
    uint64_t v32 = (uint64_t *)(*(void *)(v5 + 48) + v31);
    __int128 v34 = *v32;
    __int128 v33 = v32[1];
    __int128 v35 = (uint64_t *)(*(void *)(v5 + 56) + v31);
    __int128 v36 = *v35;
    unint64_t v37 = v35[1];
    if ((v42 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }

    sub_186C5B59C();
    sub_186C5ADA4();
    uint64_t result = sub_186C5B5D8();
    unsigned int v14 = -1LL << *(_BYTE *)(v7 + 32);
    unsigned int v15 = result & ~v14;
    unsigned int v16 = v15 >> 6;
    if (((-1LL << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      BOOL v17 = __clz(__rbit64((-1LL << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      __int128 v27 = 0;
      __int128 v28 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }

        __int128 v29 = v16 == v28;
        if (v16 == v28) {
          unsigned int v16 = 0LL;
        }
        v27 |= v29;
        __int128 v30 = *(void *)(v11 + 8 * v16);
      }

      while (v30 == -1);
      BOOL v17 = __clz(__rbit64(~v30)) + (v16 << 6);
    }

    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v17;
    __n128 v18 = 16 * v17;
    int v19 = (void *)(*(void *)(v7 + 48) + v18);
    *int v19 = v34;
    v19[1] = v33;
    uint64_t v20 = (void *)(*(void *)(v7 + 56) + v18);
    *uint64_t v20 = v36;
    v20[1] = v37;
    ++*(void *)(v7 + 16);
  }

  swift_release();
  kcdata_item_t v3 = v39;
  uint64_t v24 = (void *)(v5 + 64);
  if ((v42 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  unsigned int v38 = 1LL << *(_BYTE *)(v5 + 32);
  if (v38 >= 64) {
    bzero(v24, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    *uint64_t v24 = -1LL << v38;
  }
  *(void *)(v5 + 16) = 0LL;
LABEL_40:
  uint64_t result = swift_release();
  *kcdata_item_t v3 = v7;
  return result;
}

    unsigned int v8 = (v16 - 1) & v16;
    unsigned int v14 = __clz(__rbit64(v16)) + (v11 << 6);
    if (*(void *)(v5 + 16))
    {
LABEL_31:
      __n128 v18 = (uint64_t *)(*(void *)(v32 + 48) + 16 * v14);
      uint64_t v20 = *v18;
      int v19 = v18[1];
      sub_186C5B59C();
      swift_bridgeObjectRetain();
      sub_186C5ADA4();
      uint64_t v21 = sub_186C5B5D8();
      uint64_t v22 = -1LL << *(_BYTE *)(v5 + 32);
      CFDictionaryValueCallBacks v23 = v21 & ~v22;
      if (((*(void *)(v9 + ((v23 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v23) & 1) != 0)
      {
        uint64_t v24 = *(void *)(v5 + 48);
        uint64_t v25 = (void *)(v24 + 16 * v23);
        uint64_t v26 = *v25 == v20 && v25[1] == v19;
        if (v26 || (sub_186C5B4F4() & 1) != 0)
        {
LABEL_44:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          __int128 v30 = 0LL;
LABEL_45:
          sub_186C0D094();
          return v30;
        }

        __int128 v27 = ~v22;
        while (1)
        {
          CFDictionaryValueCallBacks v23 = (v23 + 1) & v27;
          if (((*(void *)(v9 + ((v23 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v23) & 1) == 0) {
            break;
          }
          __int128 v28 = (void *)(v24 + 16 * v23);
          __int128 v29 = *v28 == v20 && v28[1] == v19;
          if (v29 || (sub_186C5B4F4() & 1) != 0) {
            goto LABEL_44;
          }
        }
      }

      uint64_t result = swift_bridgeObjectRelease();
    }
  }

  BOOL v17 = v12 + 4;
  if (v12 + 4 >= v31)
  {
LABEL_48:
    swift_bridgeObjectRelease();
    __int128 v30 = 1LL;
    goto LABEL_45;
  }

  unsigned int v16 = *(void *)(v33 + 8 * v17);
  if (v16)
  {
    int v11 = v12 + 4;
    goto LABEL_30;
  }

  while (1)
  {
    int v11 = v17 + 1;
    if (__OFADD__(v17, 1LL)) {
      break;
    }
    if (v11 >= v31) {
      goto LABEL_48;
    }
    unsigned int v16 = *(void *)(v33 + 8 * v11);
    ++v17;
    if (v16) {
      goto LABEL_30;
    }
  }

    unsigned int v10 = (v23 - 1) & v23;
    uint64_t v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    __int128 v29 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v20);
    uint64_t v31 = *v29;
    __int128 v30 = v29[1];
    uint64_t v32 = *(void *)(*(void *)(v5 + 56) + 8 * v20);
    if ((v36 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }

    sub_186C5B59C();
    sub_186C5ADA4();
    uint64_t result = sub_186C5B5D8();
    unsigned int v14 = -1LL << *(_BYTE *)(v7 + 32);
    unsigned int v15 = result & ~v14;
    unsigned int v16 = v15 >> 6;
    if (((-1LL << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      BOOL v17 = __clz(__rbit64((-1LL << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      uint64_t v25 = 0;
      uint64_t v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }

        __int128 v27 = v16 == v26;
        if (v16 == v26) {
          unsigned int v16 = 0LL;
        }
        v25 |= v27;
        __int128 v28 = *(void *)(v11 + 8 * v16);
      }

      while (v28 == -1);
      BOOL v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }

    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v17;
    __n128 v18 = (void *)(*(void *)(v7 + 48) + 16 * v17);
    *__n128 v18 = v31;
    v18[1] = v30;
    *(void *)(*(void *)(v7 + 56) + 8 * v17) = v32;
    ++*(void *)(v7 + 16);
  }

  swift_release();
  uint64_t v22 = (void *)(v5 + 64);
  if ((v36 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  __int128 v33 = 1LL << *(_BYTE *)(v5 + 32);
  if (v33 >= 64) {
    bzero(v22, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    *uint64_t v22 = -1LL << v33;
  }
  *(void *)(v5 + 16) = 0LL;
LABEL_40:
  uint64_t result = swift_release();
  *kcdata_item_t v3 = v7;
  return result;
}

  uint64_t result = sub_186C5B398();
  __break(1u);
  return result;
}

  uint64_t result = sub_186C5B398();
  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

LABEL_55:
                ktrace_address_space_merge_owner((uint64_t)v16, v23, v20, v26);
              }

              else
              {
                __int128 v27 = *(_OWORD *)(v20 + 32);
                __int128 v28 = *(_OWORD *)(v20 + 48);
                __int128 v29 = *(_OWORD *)(v20 + 64);
                *(_OWORD *)cf = *(_OWORD *)(v20 + 80);
                __int128 v30 = *(_OWORD *)(v20 + 16);
                __int128 v51 = *(_OWORD *)v20;
                __int128 v52 = v30;
                __int128 v54 = v28;
                __int128 v55 = v29;
                __int128 v53 = v27;
                if (cf[0]) {
                  CFRetain(cf[0]);
                }
                ktrace_address_space_append((uint64_t)v16, (uint64_t)&v51);
                uint64_t v31 = (SymbolOwner *)&v51;
LABEL_48:
                SymbolOwner::~SymbolOwner(v31);
              }

              v20 += 96LL;
              continue;
            }
          }
        }
      }

      set_address_space_for_taskid(a1, item->flags, v16);
      set_address_space_for_pid(a1, (int)v16[8], v16);
      CFRelease(v16);
LABEL_64:
      if ((v13 & 1) != 0)
      {
        LODWORD(size) = item->size;
        if (item->type == 2312)
        {
          uint64_t flags = item->flags;
          if ((_DWORD)size != 32 || (flags & 0x8F) != 0)
          {
            unsigned int v42 = flags & 0xF;
            BOOL v12 = size >= v42;
            unsigned int v43 = size - v42;
            if (!v12) {
              unsigned int v43 = 0;
            }
            BOOL v44 = v43 > 0x1F;
            kcdata_item_t v45 = v49;
            if (v44) {
              kcdata_item_t v45 = item + 1;
            }
            kcdata_item_t v49 = v45;
          }

          else
          {
            LODWORD(size) = 32;
          }
        }
      }

      else
      {
        LODWORD(size) = item->size;
      }
    }

    kcdata_item_t item = (kcdata_item_t)((char *)v3 + size);
    kcdata_item_t v3 = item + 1;
  }

  while (&item[1] <= end);
  if (v49 && !uuid_is_null((const unsigned __int8 *)&v49->flags))
  {
    __int128 v55 = 0u;
    *(_OWORD *)cf = 0u;
    __int128 v53 = 0u;
    __int128 v54 = 0u;
    __int128 v51 = 0u;
    __int128 v52 = 0u;
    LODWORD(v52) = 3;
    *((void *)&v52 + ktrace_session_set_default_event_names_enabled(global_session, 1) = *(void *)&v49->type + 1LL;
    *(void *)&__int128 v54 = v49[1].flags;
    __int128 v51 = *(_OWORD *)&v49->flags;
    for (uint64_t i = *(void **)(*(void *)(a1 + 24) + 16LL); i; uint64_t i = (void *)*i)
    {
      uint64_t v47 = i[3];
      if (*(_DWORD *)(v47 + 32) && (*(_BYTE *)(v47 + 36) & 2) == 0)
      {
        __int128 v60 = v53;
        __int128 v61 = v54;
        __int128 v62 = v55;
        *(_OWORD *)__int128 v63 = *(_OWORD *)cf;
        *(_OWORD *)__int128 buf = v51;
        *(_OWORD *)&buf[16] = v52;
        if (cf[0]) {
          CFRetain(cf[0]);
        }
        ktrace_address_space_append(v47, (uint64_t)buf);
        SymbolOwner::~SymbolOwner((SymbolOwner *)buf);
      }
    }

    SymbolOwner::~SymbolOwner((SymbolOwner *)&v51);
  }

void sub_186BCEA10( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void *address_space_for_taskid(ktrace_uuid_map *a1, unint64_t a2)
{
  unint64_t v3 = a2;
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  if (a2 == -1LL) {
    ktrace_remotetime_update_params_cold_1();
  }
  uint64_t result = std::__hash_table<std::__hash_value_type<unsigned long long,CF::TypeRef>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CF::TypeRef>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CF::TypeRef>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CF::TypeRef>>>::find<unsigned long long>( *((void **)a1 + 3),  &v3);
  if (result) {
    return (void *)result[3];
  }
  return result;
}

void *address_space_for_pid(ktrace_uuid_map *a1, unint64_t a2)
{
  unint64_t v3 = a2;
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  if (a2 == -1LL) {
    ktrace_remotetime_update_params_cold_1();
  }
  uint64_t result = std::__hash_table<std::__hash_value_type<unsigned long long,CF::TypeRef>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CF::TypeRef>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CF::TypeRef>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CF::TypeRef>>>::find<unsigned long long>( *((void **)a1 + 4),  &v3);
  if (result) {
    return (void *)result[3];
  }
  return result;
}

void set_address_space_for_taskid(uint64_t a1, unint64_t a2, CFTypeRef cf)
{
  unint64_t v8 = a2;
  if (a2 == -1LL) {
    ktrace_remotetime_update_params_cold_1();
  }
  if (cf)
  {
    int v7 = cf;
    CFRetain(cf);
    uint64_t v4 = *(void *)(a1 + 24);
    unint64_t v9 = &v8;
    uint64_t v5 = std::__hash_table<std::__hash_value_type<unsigned long long,CF::TypeRef>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CF::TypeRef>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CF::TypeRef>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CF::TypeRef>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>( v4,  &v8,  (uint64_t)&std::piecewise_construct,  &v9);
    kcdata_item_t v6 = (const void *)v5[3];
    if (v6) {
      CFRelease(v6);
    }
    void v5[3] = v7;
    int v7 = 0LL;
    CF::TypeRef::~TypeRef(&v7);
  }

  else
  {
    std::__hash_table<std::__hash_value_type<unsigned long long,CF::TypeRef>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CF::TypeRef>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CF::TypeRef>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CF::TypeRef>>>::__erase_unique<unsigned long long>( *(void **)(a1 + 24),  &v8);
  }

void sub_186BCEB70( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
}

void set_address_space_for_pid(uint64_t a1, unint64_t a2, CFTypeRef cf)
{
  unint64_t v8 = a2;
  if (a2 == -1LL) {
    ktrace_remotetime_update_params_cold_1();
  }
  if (cf)
  {
    int v7 = cf;
    CFRetain(cf);
    uint64_t v4 = *(void *)(a1 + 32);
    unint64_t v9 = &v8;
    uint64_t v5 = std::__hash_table<std::__hash_value_type<unsigned long long,CF::TypeRef>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CF::TypeRef>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CF::TypeRef>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CF::TypeRef>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>( v4,  &v8,  (uint64_t)&std::piecewise_construct,  &v9);
    kcdata_item_t v6 = (const void *)v5[3];
    if (v6) {
      CFRelease(v6);
    }
    void v5[3] = v7;
    int v7 = 0LL;
    CF::TypeRef::~TypeRef(&v7);
  }

  else
  {
    std::__hash_table<std::__hash_value_type<unsigned long long,CF::TypeRef>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CF::TypeRef>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CF::TypeRef>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CF::TypeRef>>>::__erase_unique<unsigned long long>( *(void **)(a1 + 32),  &v8);
  }

void sub_186BCEC24( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
}

uint64_t ktrace_address_space_from_dscsym(void *a1)
{
  v4[0] = 0LL;
  v4[1] = v4;
  int v4[2] = 0x5812000000LL;
  v4[3] = __Block_byref_object_copy__2;
  v4[4] = __Block_byref_object_dispose__2;
  memset(&v4[5], 0, 40);
  int v5 = 1065353216;
  uint64_t v1 = ktrace_address_space_create(-1);
  dscsym_iterate_buffer();
  ktrace_address_space_sort(v1, v2);
  _Block_object_dispose(v4, 8);
  std::__hash_table<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>>>::~__hash_table((uint64_t)&v4[6]);
  return v1;
}

void sub_186BCED48( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
}

uint64_t __Block_byref_object_copy__2(uint64_t a1, uint64_t a2)
{
  return std::__hash_table<std::__hash_value_type<unsigned long long,dyld_trace_point>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,dyld_trace_point>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,dyld_trace_point>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,dyld_trace_point>>>::__hash_table( a1 + 48,  (uint64_t *)(a2 + 48));
}

uint64_t __Block_byref_object_dispose__2(uint64_t a1)
{
  return std::__hash_table<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>>>::~__hash_table(a1 + 48);
}

uint64_t ___Z32ktrace_address_space_from_dscsymPvm_block_invoke( uint64_t a1, __int128 *a2, char *cStr, const char *a4, unint64_t a5, uint64_t a6)
{
  unint64_t v24 = a5;
  if (cStr) {
    CFStringRef v11 = CFStringCreateWithCString(0LL, cStr, 0x8000100u);
  }
  else {
    CFStringRef v11 = 0LL;
  }
  __int128 v12 = *a2;
  __int128 v19 = 0u;
  __int128 v20 = 0u;
  __int128 v22 = 0u;
  *(_OWORD *)cf = 0u;
  LODWORD(v19) = 2;
  *(void *)&__int128 v21 = a5;
  *((void *)&v21 + ktrace_session_set_default_event_names_enabled(global_session, 1) = a6 + 1;
  __int128 v18 = v12;
  strlcpy((char *)&v19 + 8, a4, 0x11uLL);
  BOOL v17 = v11;
  if (cf[0])
  {
    CFRelease(cf[0]);
    CFStringRef v11 = v17;
  }

  BOOL v17 = 0LL;
  cf[0] = v11;
  CF::TypeRef::~TypeRef((const void **)&v17);
  if (!std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::find<unsigned long long>( (void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 48LL),  &v24))
  {
    uint64_t v13 = *(void *)(a1 + 40);
    v15[2] = v20;
    v15[3] = v21;
    _OWORD v15[4] = v22;
    *(_OWORD *)unsigned int v16 = *(_OWORD *)cf;
    v15[0] = v18;
    v15[1] = v19;
    if (cf[0]) {
      CFRetain(cf[0]);
    }
    ktrace_address_space_append(v13, (uint64_t)v15);
    SymbolOwner::~SymbolOwner((SymbolOwner *)v15);
  }

  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__emplace_unique_key_args<unsigned long long,unsigned long long const&>( *(void *)(*(void *)(a1 + 32) + 8LL) + 48LL,  &v24,  &v24);
  SymbolOwner::~SymbolOwner((SymbolOwner *)&v18);
  return 0LL;
}

void sub_186BCEECC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, char a22, int a23, __int16 a24, char a25, char a26)
{
}

void ktrace_uuid_map_learn_sharedcache_with_buffer(ktrace_uuid_map *a1, CFUUIDBytes a2, void *a3)
{
  CFUUIDBytes v11 = a2;
  uint64_t v4 = ktrace_address_space_from_dscsym(a3);
  if (!v4) {
    ktrace_remotetime_update_params_cold_1();
  }
  int v5 = (const void *)v4;
  v10[0] = MEMORY[0x1895F87A8];
  v10[1] = 3221225472LL;
  void v10[2] = ___Z45ktrace_uuid_map_learn_sharedcache_with_bufferP15ktrace_uuid_map11CFUUIDBytesPvm_block_invoke;
  v10[3] = &__block_descriptor_40_e244_v24__0__SymbolOwner____CCCCCCCCCCCCCCCC__SymbolOwnerTypeProperty_i_____17c__optional_uint64_Q_____optional_uint64_Q__optional_uint64_Q__optional_uint64_Q___3Q__Q_optional_uint64_Q__fsid__2i___fsobj_id_II_____CFString_b1b1_8_optional_uint64_Q_16l;
  v10[4] = a1;
  ktrace_address_space_deep_iterate_symbol_owners((uint64_t)a1, v4, (uint64_t)v10);
  unint64_t v9 = v5;
  uint64_t v6 = *((void *)a1 + 5);
  __int128 v12 = &v11;
  int v7 = std::__hash_table<std::__hash_value_type<CFUUIDBytes,CF::TypeRef>,std::__unordered_map_hasher<CFUUIDBytes,std::__hash_value_type<CFUUIDBytes,CF::TypeRef>,std::hash<CFUUIDBytes>,std::equal_to<CFUUIDBytes>,true>,std::__unordered_map_equal<CFUUIDBytes,std::__hash_value_type<CFUUIDBytes,CF::TypeRef>,std::equal_to<CFUUIDBytes>,std::hash<CFUUIDBytes>,true>,std::allocator<std::__hash_value_type<CFUUIDBytes,CF::TypeRef>>>::__emplace_unique_key_args<CFUUIDBytes,std::piecewise_construct_t const&,std::tuple<CFUUIDBytes const&>,std::tuple<>>( v6,  &v11,  (uint64_t)&std::piecewise_construct,  (_OWORD **)&v12);
  uint64_t v8 = (const void *)v7[4];
  if (v8) {
    CFRelease(v8);
  }
  v7[4] = v9;
  unint64_t v9 = 0LL;
  CF::TypeRef::~TypeRef(&v9);
}

void sub_186BCEFCC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
}

uint64_t ktrace_address_space_deep_iterate_symbol_owners(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (!result) {
    ktrace_remotetime_update_params_cold_1();
  }
  unint64_t v3 = *(uint64_t **)(a2 + 16);
  uint64_t v4 = *v3;
  uint64_t v5 = v3[1];
  if (*v3 != v5)
  {
    uint64_t v7 = result;
    do
    {
      switch(*(_DWORD *)(v4 + 16))
      {
        case 1:
        case 2:
        case 5:
          uint64_t v16 = 0LL;
          uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *))(a3 + 16))(a3, v4, &v16);
          break;
        case 3:
          uint64_t v20 = 0LL;
          get_sc_and_slide(v7, v4, &v20, &v21);
          uint64_t v19 = 0LL;
          uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *))(a3 + 16))(a3, v4, &v19);
          if (v21)
          {
            uint64_t v8 = v20;
            if (v20)
            {
              unint64_t v9 = *(uint64_t **)(v21 + 16);
              uint64_t v10 = *v9;
              uint64_t v11 = v9[1];
              while (v10 != v11)
              {
                uint64_t v18 = v8;
                uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *))(a3 + 16))(a3, v10, &v18);
                v10 += 96LL;
              }
            }
          }

          break;
        case 4:
          uint64_t v12 = *(void *)(v7 + 248);
          if (v12)
          {
            uint64_t v13 = *(uint64_t **)(v12 + 16);
            uint64_t v14 = *v13;
            uint64_t v15 = v13[1];
            while (v14 != v15)
            {
              uint64_t v17 = 0LL;
              uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *))(a3 + 16))(a3, v14, &v17);
              v14 += 96LL;
            }
          }

          break;
        default:
          ktrace_address_space_deep_iterate_symbol_owners();
      }

      v4 += 96LL;
    }

    while (v4 != v5);
  }

  return result;
}

void ___Z45ktrace_uuid_map_learn_sharedcache_with_bufferP15ktrace_uuid_map11CFUUIDBytesPvm_block_invoke( uint64_t a1, uint64_t a2)
{
}

void ktrace_uuid_map_associate_path_with_uuid(ktrace_uuid_map *a1, CFUUIDBytes a2, CFUUIDBytes *a3)
{
  CFUUIDBytes v14 = a2;
  if (a3)
  {
    uint64_t v4 = *((void *)a1 + 27);
    uint64_t v15 = &v14;
    uint64_t v5 = std::__hash_table<std::__hash_value_type<CFUUIDBytes,CF::TypeRef>,std::__unordered_map_hasher<CFUUIDBytes,std::__hash_value_type<CFUUIDBytes,CF::TypeRef>,std::hash<CFUUIDBytes>,std::equal_to<CFUUIDBytes>,true>,std::__unordered_map_equal<CFUUIDBytes,std::__hash_value_type<CFUUIDBytes,CF::TypeRef>,std::equal_to<CFUUIDBytes>,std::hash<CFUUIDBytes>,true>,std::allocator<std::__hash_value_type<CFUUIDBytes,CF::TypeRef>>>::__emplace_unique_key_args<CFUUIDBytes,std::piecewise_construct_t const&,std::tuple<CFUUIDBytes const&>,std::tuple<>>( v4,  &v14,  (uint64_t)&std::piecewise_construct,  (_OWORD **)&v15);
    uint64_t v6 = (const void *)v5[4];
    if (!v6)
    {
      uint64_t v15 = a3;
      CFRetain(a3);
      uint64_t v10 = (const void *)v5[4];
      if (v10) {
        CFRelease(v10);
      }
      void v5[4] = v15;
      goto LABEL_13;
    }

    CFTypeID v7 = CFGetTypeID(v6);
    CFTypeID TypeID = CFSetGetTypeID();
    unint64_t v9 = (__CFSet *)v5[4];
    if (v7 == TypeID)
    {
      CFSetAddValue(v9, a3);
      return;
    }

    CFTypeID v11 = CFGetTypeID(v9);
    if (v11 != CFStringGetTypeID()) {
      ktrace_remotetime_update_params_cold_1();
    }
    if (!CFEqual(a3, (CFTypeRef)v5[4]))
    {
      CFMutableDictionaryRef Mutable = CFSetCreateMutable(0LL, 0LL, MEMORY[0x189605258]);
      CFSetAddValue(Mutable, (const void *)v5[4]);
      CFSetAddValue(Mutable, a3);
      uint64_t v15 = (CFUUIDBytes *)Mutable;
      uint64_t v13 = (const void *)v5[4];
      if (v13)
      {
        CFRelease(v13);
        CFMutableDictionaryRef Mutable = (__CFSet *)v15;
      }

      void v5[4] = Mutable;
LABEL_13:
      uint64_t v15 = 0LL;
      CF::TypeRef::~TypeRef((const void **)&v15);
    }
  }

void sub_186BCF270(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
}

uint64_t ktrace_uuid_map_learn_sharedcache_with_chunk(uint64_t result, uint64_t *a2)
{
  uint64_t v12 = *MEMORY[0x1895F89C0];
  if (result)
  {
    unint64_t v3 = (ktrace_uuid_map *)result;
    if (ktrace_chunk_tag((uint64_t)a2) == 32769
      || (uint64_t result = ktrace_chunk_tag((uint64_t)a2), (_DWORD)result == 36869))
    {
      uint64_t result = ktrace_chunk_version_major((uint64_t)a2);
      if (!(_DWORD)result)
      {
        uint64_t v4 = ktrace_chunk_size((uint64_t)a2);
        uint64_t result = (uint64_t)ktrace_chunk_map_data(a2, 0LL, v4);
        if (result)
        {
          uint64_t v5 = (void *)result;
          uint64_t v7 = 0LL;
          uint64_t v8 = &v7;
          uint64_t v9 = 0x2020000000LL;
          char v10 = 0;
          *(void *)&v11.byte0 = 0LL;
          *(void *)&v11.byte8 = 0LL;
          dscsym_iterate_buffer();
          int v6 = *((unsigned __int8 *)v8 + 24);
          _Block_object_dispose(&v7, 8);
          if (v6) {
            ktrace_uuid_map_learn_sharedcache_with_buffer(v3, v11, v5);
          }
          return ktrace_chunk_unmap_data((uint64_t)a2, (unint64_t)v5, v4);
        }
      }
    }
  }

  return result;
}

void sub_186BCF3EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
}

void ktrace_uuid_map_learn_tailspin_process_info_with_chunk(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (const __CFDictionary *)ktrace_chunk_copy_plist(a2);
  if (v4)
  {
    uint64_t v5 = v4;
    CFAutorelease(v4);
    int Value = (const __CFNumber *)CFDictionaryGetValue(v5, @"Pid");
    uint64_t v7 = Value;
    if (Value)
    {
      CFTypeID v8 = CFGetTypeID(Value);
      if (v8 != CFNumberGetTypeID())
      {
        ktrace_log_init();
        if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
          ktrace_uuid_map_learn_tailspin_process_info_with_chunk_cold_6();
        }
        uint64_t v7 = 0LL;
      }
    }

    uint64_t v9 = (const __CFDictionary *)CFDictionaryGetValue(v5, @"LoadInfos");
    if (v9)
    {
      char v10 = v9;
      CFTypeID v11 = CFGetTypeID(v9);
      if (v11 == CFDictionaryGetTypeID())
      {
        if (v7)
        {
          uint64_t valuePtr = 0LL;
          if (!CFNumberGetValue(v7, kCFNumberLongLongType, &valuePtr)) {
            ktrace_remotetime_update_params_cold_1();
          }
          unsigned int v12 = valuePtr;
          if ((valuePtr & 0x80000000) != 0)
          {
            if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_FAULT)) {
              ktrace_uuid_map_learn_tailspin_process_info_with_chunk_cold_4();
            }
          }

          else
          {
            uint64_t v13 = ktrace_address_space_create(valuePtr);
            uint64_t v14 = v13;
            if (!v12) {
              *(void *)(v13 + 24) = 1LL;
            }
            context[0] = MEMORY[0x1895F87A8];
            context[1] = 3221225472LL;
            context[2] = __ktrace_uuid_map_learn_tailspin_process_info_with_chunk_block_invoke;
            context[3] = &__block_descriptor_44_e37_v24__0____CFString__8____CFNumber__16l;
            unsigned int v17 = v12;
            context[4] = v13;
            CFDictionaryApplyFunction(v10, (CFDictionaryApplierFunction)CFDictionaryApplierTrampoline, context);
            set_address_space_for_pid(a1, v12, (CFTypeRef)v14);
            if (*(void *)(v14 + 24))
            {
              unint64_t v15 = optional_uint64::value((optional_uint64 *)(v14 + 24));
              set_address_space_for_taskid(a1, v15, (CFTypeRef)v14);
            }

            CFRelease((CFTypeRef)v14);
          }

          return;
        }
      }

      else
      {
        ktrace_log_init();
        if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
          ktrace_uuid_map_learn_tailspin_process_info_with_chunk_cold_5();
        }
      }
    }

    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
      ktrace_uuid_map_learn_tailspin_process_info_with_chunk_cold_2();
    }
  }

  else if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
  {
    ktrace_uuid_map_learn_tailspin_process_info_with_chunk_cold_1();
  }

const void *cfdict_get_dictionary(const __CFDictionary *a1, const void *a2)
{
  int Value = CFDictionaryGetValue(a1, a2);
  unint64_t v3 = Value;
  if (Value)
  {
    CFTypeID v4 = CFGetTypeID(Value);
    if (v4 != CFDictionaryGetTypeID())
    {
      ktrace_log_init();
      if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
        ktrace_uuid_map_learn_tailspin_process_info_with_chunk_cold_5();
      }
      return 0LL;
    }
  }

  return v3;
}

void __ktrace_uuid_map_learn_tailspin_process_info_with_chunk_block_invoke( uint64_t a1, const __CFString *a2, const __CFNumber *a3)
{
  uint64_t v21 = *MEMORY[0x1895F89C0];
  uint64_t v5 = utf8(a2);
  if (!uuid_parse(v5, uu))
  {
    if (*(_DWORD *)(a1 + 40))
    {
      uint64_t valuePtr = 0LL;
      if (a3)
      {
        if (!CFNumberGetValue(a3, kCFNumberLongLongType, &valuePtr)) {
          ktrace_remotetime_update_params_cold_1();
        }
        uint64_t v6 = valuePtr;
      }

      else
      {
        uint64_t v6 = 0LL;
      }

      __int128 v15 = 0u;
      __int128 v16 = 0u;
      __int128 v17 = 0u;
      __int128 v18 = 0u;
      *(void *)&__int128 v16 = v6;
      __int128 v13 = *(_OWORD *)uu;
      __int128 v14 = 0u;
      LODWORD(v14) = 2;
      DWORD2(v14) = 1163157343;
      *(_DWORD *)((char *)&v14 + 1ktrace_session_set_default_event_names_enabled(global_session, 1) = 5527621;
      BYTE8(v1_Block_object_dispose(va, 8) = 1;
      uint64_t v8 = *(void *)(a1 + 32);
      v11[0] = *(_OWORD *)uu;
      v11[1] = v14;
      v11[4] = 0u;
      void v11[5] = v18;
      void v11[2] = 0u;
      void v11[3] = v16;
      __int128 v13 = 0u;
      __int128 v14 = 0u;
      __int128 v17 = 0u;
      __int128 v18 = 0u;
      __int128 v15 = 0u;
      __int128 v16 = 0u;
      ktrace_address_space_append(v8, (uint64_t)v11);
      uint64_t v9 = (SymbolOwner *)v11;
    }

    else
    {
      uint64_t valuePtr = 0LL;
      if (a3)
      {
        if (!CFNumberGetValue(a3, kCFNumberLongLongType, &valuePtr)) {
          ktrace_remotetime_update_params_cold_1();
        }
        uint64_t v7 = valuePtr;
      }

      else
      {
        uint64_t v7 = 0LL;
      }

      __int128 v15 = 0u;
      __int128 v16 = 0u;
      __int128 v17 = 0u;
      __int128 v18 = 0u;
      __int128 v13 = *(_OWORD *)uu;
      __int128 v14 = 0u;
      LODWORD(v14) = 5;
      *(void *)&__int128 v16 = v7;
      BYTE8(v1_Block_object_dispose(va, 8) = 1;
      uint64_t v10 = *(void *)(a1 + 32);
      int v12[2] = 0u;
      void v12[3] = v16;
      v12[4] = 0u;
      void v12[5] = v18;
      v12[0] = *(_OWORD *)uu;
      v12[1] = v14;
      __int128 v13 = 0u;
      __int128 v14 = 0u;
      __int128 v17 = 0u;
      __int128 v18 = 0u;
      __int128 v15 = 0u;
      __int128 v16 = 0u;
      ktrace_address_space_append(v10, (uint64_t)v12);
      uint64_t v9 = (SymbolOwner *)v12;
    }

    SymbolOwner::~SymbolOwner(v9);
    SymbolOwner::~SymbolOwner((SymbolOwner *)&v13);
  }

void sub_186BCF884( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
}

void ktrace_uuid_map_learn_tailspin_symbols_with_chunk(uint64_t a1, uint64_t a2)
{
  uint64_t v40 = 0LL;
  uint64_t v41 = &v40;
  uint64_t v42 = 0x2020000000LL;
  uint64_t v43 = 0LL;
  CFTypeID v4 = (const __CFDictionary *)ktrace_chunk_copy_plist(a2);
  uint64_t v5 = v4;
  if (v4)
  {
    CFAutorelease(v4);
    int Value = (__CFString *)CFDictionaryGetValue(v5, @"Path");
    uint64_t v7 = Value;
    if (Value)
    {
      CFTypeID v8 = CFGetTypeID(Value);
      if (v8 == CFStringGetTypeID())
      {
        if (!CFStringGetLength(v7)) {
          uint64_t v7 = 0LL;
        }
      }

      else
      {
        ktrace_log_init();
        if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
          ktrace_uuid_map_learn_tailspin_symbols_with_chunk_cold_6();
        }
        uint64_t v7 = 0LL;
      }
    }

    uint64_t v9 = (const __CFNumber *)CFDictionaryGetValue(v5, @"Size");
    uint64_t v10 = v9;
    if (v9)
    {
      CFTypeID v11 = CFGetTypeID(v9);
      if (v11 != CFNumberGetTypeID())
      {
        ktrace_log_init();
        if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
          ktrace_uuid_map_learn_tailspin_process_info_with_chunk_cold_6();
        }
        uint64_t v10 = 0LL;
      }
    }

    unsigned int v12 = (const __CFString *)CFDictionaryGetValue(v5, @"UUID_String");
    uint64_t v13 = v12;
    if (v12)
    {
      CFTypeID v14 = CFGetTypeID(v12);
      if (v14 != CFStringGetTypeID())
      {
        ktrace_log_init();
        if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
          ktrace_uuid_map_learn_tailspin_symbols_with_chunk_cold_6();
        }
        uint64_t v13 = 0LL;
      }
    }

    __int128 v15 = (const __CFBoolean *)CFDictionaryGetValue(v5, @"TEXT_EXEC");
    __int128 v16 = v15;
    if (v15)
    {
      CFTypeID v17 = CFGetTypeID(v15);
      if (v17 != CFBooleanGetTypeID())
      {
        ktrace_log_init();
        if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
          ktrace_uuid_map_learn_tailspin_symbols_with_chunk_cold_5();
        }
        __int128 v16 = 0LL;
      }
    }

    memset(&uu, 0, sizeof(uu));
    __int128 v18 = utf8(v13);
    if (!uuid_parse(v18, &uu.byte0) && v10 && v13 && v16)
    {
      *(void *)&__int128 valuePtr = 0LL;
      if (!CFNumberGetValue(v10, kCFNumberLongLongType, &valuePtr))
      {
        _os_assert_log();
        uint64_t v37 = _os_crash();
        ktrace_uuid_map_learn_tailspin_symbols_with_chunk_cold_2(v37);
      }

      v41[3] = valuePtr;
      int v19 = CFBooleanGetValue(v16);
      if (!v41[3])
      {
        if (!*(_BYTE *)(a1 + 290))
        {
          if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
            ktrace_uuid_map_learn_tailspin_symbols_with_chunk_cold_3();
          }
          *(_BYTE *)(a1 + 290) = 1;
        }

        dictionary = (const __CFDictionary *)cfdict_get_dictionary(v5, @"Symbols");
        if (dictionary)
        {
          context[0] = MEMORY[0x1895F87A8];
          context[1] = 3221225472LL;
          context[2] = __ktrace_uuid_map_learn_tailspin_symbols_with_chunk_block_invoke;
          context[3] = &unk_189F55F58;
          context[4] = &v40;
          CFDictionaryApplyFunction(dictionary, (CFDictionaryApplierFunction)CFDictionaryApplierTrampoline, context);
        }
      }

      if (v7) {
        ktrace_uuid_map_associate_path_with_uuid((ktrace_uuid_map *)a1, uu, (CFUUIDBytes *)v7);
      }
      CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0LL, 0LL, MEMORY[0x189605240], MEMORY[0x189605250]);
      CFDictionarySetValue(Mutable, @"UUID_String", v13);
      if (!v19)
      {
        CFNumberRef v22 = cfnumber(v41[3]);
        CFDictionarySetValue(Mutable, @"TextSize", v22);
      }

      if (v7)
      {
        CFDictionaryValueCallBacks v23 = CFDictionaryCreateMutable(0LL, 0LL, MEMORY[0x189605240], MEMORY[0x189605250]);
        CFDictionarySetValue(v23, @"unknown", Mutable);
        CFRelease(Mutable);
        unint64_t v24 = CFDictionaryCreateMutable(0LL, 0LL, MEMORY[0x189605240], MEMORY[0x189605250]);
        CFDictionarySetValue(v24, @"Path", v7);
        CFDictionarySetValue(v24, @"Images", v23);
        CFRelease(v23);
        uint64_t v25 = *(__CFDictionary **)(a1 + 232);
        if (!v25)
        {
          uint64_t v25 = CFDictionaryCreateMutable(0LL, 0LL, MEMORY[0x189605240], MEMORY[0x189605250]);
          *(void *)(a1 + 232) = v25;
        }

        CFDictionarySetValue(v25, v7, v24);
        CFRelease(v24);
      }

      else
      {
        uint64_t v26 = *(_OWORD **)(a1 + 240);
        if (!v26)
        {
          uint64_t v26 = operator new(0x28uLL);
          *uint64_t v26 = 0u;
          v26[1] = 0u;
          *((_DWORD *)v26 + _Block_object_dispose(va, 8) = 1065353216;
          *(void *)(a1 + 240) = v26;
        }

        *(void *)&v44.byte0 = Mutable;
        *(void *)&__int128 valuePtr = &uu;
        __int128 v27 = std::__hash_table<std::__hash_value_type<CFUUIDBytes,CF::TypeRef>,std::__unordered_map_hasher<CFUUIDBytes,std::__hash_value_type<CFUUIDBytes,CF::TypeRef>,std::hash<CFUUIDBytes>,std::equal_to<CFUUIDBytes>,true>,std::__unordered_map_equal<CFUUIDBytes,std::__hash_value_type<CFUUIDBytes,CF::TypeRef>,std::equal_to<CFUUIDBytes>,std::hash<CFUUIDBytes>,true>,std::allocator<std::__hash_value_type<CFUUIDBytes,CF::TypeRef>>>::__emplace_unique_key_args<CFUUIDBytes,std::piecewise_construct_t const&,std::tuple<CFUUIDBytes const&>,std::tuple<>>( (uint64_t)v26,  &uu,  (uint64_t)&std::piecewise_construct,  (_OWORD **)&valuePtr);
        __int128 v28 = (const void *)v27[4];
        if (v28) {
          CFRelease(v28);
        }
        v27[4] = *(void *)&v44.byte0;
        *(void *)&v44.byte0 = 0LL;
        CF::TypeRef::~TypeRef((const void **)&v44);
      }

      __int128 v29 = *(void **)(*(void *)(a1 + 32) + 16LL);
      if (v29)
      {
        if (v19) {
          __int128 v30 = "__TEXT_EXEC";
        }
        else {
          __int128 v30 = "__TEXT";
        }
        do
        {
          uint64_t v31 = *(__int128 ***)(v29[3] + 16LL);
          uint64_t v32 = *v31;
          __int128 v33 = v31[1];
          while (v32 != v33)
          {
            __int128 v34 = *v32;
            CFUUIDBytes v44 = uu;
            __int128 valuePtr = v34;
            if ((void)v34 == *(void *)&uu.byte0 && *((void *)&v34 + 1) == *(void *)&uu.byte8)
            {
              int v36 = *((_DWORD *)v32 + 4);
              if (v36 == 5)
              {
                *((void *)v32 + 3) = 0LL;
                *((void *)v32 + 4) = 0LL;
                *((void *)v32 + 5) = 0LL;
                *((_DWORD *)v32 + 4) = 2;
                strlcpy((char *)v32 + 24, v30, 0x11uLL);
                int v36 = *((_DWORD *)v32 + 4);
              }

              if (v36 == 2 && !*((void *)v32 + 7))
              {
                *((void *)v32 + 7) = v41[3] + 1;
                if (!v7) {
                  goto LABEL_68;
                }
              }

              else if (!v7)
              {
                goto LABEL_68;
              }

              if (!*((void *)v32 + 10)) {
                SymbolOwner::set_path((SymbolOwner *)v32, v7);
              }
            }

LABEL_68:
            v32 += 6;
          }

          __int128 v29 = (void *)*v29;
        }

        while (v29);
      }
    }

    else if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_FAULT))
    {
      ktrace_uuid_map_learn_tailspin_symbols_with_chunk_cold_4();
    }
  }

  else if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
  {
    ktrace_uuid_map_learn_tailspin_symbols_with_chunk_cold_1();
  }

void sub_186BCFEB0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
}

const void *cfdict_get_string(const __CFDictionary *a1, const void *a2)
{
  int Value = CFDictionaryGetValue(a1, a2);
  unint64_t v3 = Value;
  if (Value)
  {
    CFTypeID v4 = CFGetTypeID(Value);
    if (v4 != CFStringGetTypeID())
    {
      ktrace_log_init();
      if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
        ktrace_uuid_map_learn_tailspin_symbols_with_chunk_cold_6();
      }
      return 0LL;
    }
  }

  return v3;
}

void __ktrace_uuid_map_learn_tailspin_symbols_with_chunk_block_invoke( uint64_t a1, const __CFString *a2, const __CFDictionary *a3)
{
  uint64_t v5 = utf8(a2);
  int v6 = sscanf(v5, "%lld", &v12);
  int Value = (const __CFNumber *)CFDictionaryGetValue(a3, @"Length");
  if (Value)
  {
    CFTypeID v8 = Value;
    CFTypeID v9 = CFGetTypeID(Value);
    if (v9 == CFNumberGetTypeID())
    {
      if (v6 == 1)
      {
        uint64_t v10 = v12;
        uint64_t valuePtr = 0LL;
        if (!CFNumberGetValue(v8, kCFNumberLongLongType, &valuePtr)) {
          ktrace_remotetime_update_params_cold_1();
        }
        uint64_t v11 = *(void *)(*(void *)(a1 + 32) + 8LL);
      }
    }

    else
    {
      ktrace_log_init();
      if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
        ktrace_uuid_map_learn_tailspin_process_info_with_chunk_cold_6();
      }
    }
  }

CFNumberRef cfnumber(uint64_t a1)
{
  uint64_t valuePtr = a1;
  CFNumberRef v1 = CFNumberCreate(0LL, kCFNumberLongLongType, &valuePtr);
  if (!v1) {
    ktrace_remotetime_update_params_cold_1();
  }
  CFNumberRef v2 = v1;
  CFAutorelease(v1);
  return v2;
}

void SymbolOwner::set_path(SymbolOwner *this, CFTypeRef cf)
{
  CFTypeID v4 = (const void *)*((void *)this + 10);
  if (v4) {
    CFRelease(v4);
  }
  *((void *)this + 10) = cf;
  if (cf) {
    CFRetain(cf);
  }
}

void ktrace_uuid_map_learn_ariadne_process_dict_with_chunk(uint64_t a1, uint64_t a2)
{
  if (a1 && ktrace_chunk_tag(a2) == 20530 && !ktrace_chunk_version_major(a2))
  {
    CFTypeID v4 = (const __CFDictionary *)ktrace_chunk_copy_plist(a2);
    if (v4)
    {
      uint64_t v5 = v4;
      context[0] = MEMORY[0x1895F87A8];
      context[1] = 3221225472LL;
      context[2] = __ktrace_uuid_map_learn_ariadne_process_dict_with_chunk_block_invoke;
      context[3] = &__block_descriptor_40_e41_v24__0____CFString__8____CFDictionary__16l;
      context[4] = a1;
      CFDictionaryApplyFunction(v4, (CFDictionaryApplierFunction)CFDictionaryApplierTrampoline, context);
      CFRelease(v5);
    }

    else if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_FAULT))
    {
      ktrace_uuid_map_learn_ariadne_process_dict_with_chunk_cold_1();
    }
  }

void __ktrace_uuid_map_learn_ariadne_process_dict_with_chunk_block_invoke( uint64_t a1, const __CFString *a2, const __CFDictionary *a3)
{
  uint64_t v61 = *MEMORY[0x1895F89C0];
  CFTypeID v4 = utf8(a2);
  int v5 = sscanf(v4, "%ld", v44);
  int Value = (const __CFArray *)CFDictionaryGetValue(a3, @"Library");
  uint64_t v7 = Value;
  if (!Value) {
    goto LABEL_62;
  }
  CFTypeID v8 = CFGetTypeID(Value);
  if (v8 != CFArrayGetTypeID())
  {
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
      __ktrace_uuid_map_learn_ariadne_process_dict_with_chunk_block_invoke_cold_11();
    }
    goto LABEL_62;
  }

  if (v5 != 1 || *(void *)v44 >> 31)
  {
LABEL_62:
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_FAULT)) {
      __ktrace_uuid_map_learn_ariadne_process_dict_with_chunk_block_invoke_cold_1();
    }
    return;
  }

  uint64_t v9 = ktrace_address_space_create(v44[0]);
  uint64_t v10 = v9;
  if (!*(void *)v44) {
    *(void *)(v9 + 24) = 1LL;
  }
  CFIndex Count = CFArrayGetCount(v7);
  if (Count >= 1)
  {
    for (CFIndex i = 0LL; i != Count; ++i)
    {
      ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v7, i);
      CFTypeID v14 = ValueAtIndex;
      if (ValueAtIndex)
      {
        CFTypeID v15 = CFGetTypeID(ValueAtIndex);
        if (v15 != CFDictionaryGetTypeID())
        {
          ktrace_log_init();
          if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
            __ktrace_uuid_map_learn_ariadne_process_dict_with_chunk_block_invoke_cold_10(&v45, v46);
          }
          CFTypeID v14 = 0LL;
        }
      }

      __int128 v16 = (const __CFNumber *)CFDictionaryGetValue(v14, @"Address");
      CFTypeID v17 = v16;
      if (v16)
      {
        CFTypeID v18 = CFGetTypeID(v16);
        if (v18 != CFNumberGetTypeID())
        {
          ktrace_log_init();
          if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
            __ktrace_uuid_map_learn_ariadne_process_dict_with_chunk_block_invoke_cold_8(&v47, v48);
          }
          CFTypeID v17 = 0LL;
        }
      }

      int v19 = (const __CFNumber *)CFDictionaryGetValue(v14, @"Length");
      uint64_t v20 = v19;
      if (v19)
      {
        CFTypeID v21 = CFGetTypeID(v19);
        if (v21 != CFNumberGetTypeID())
        {
          ktrace_log_init();
          if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
            __ktrace_uuid_map_learn_ariadne_process_dict_with_chunk_block_invoke_cold_8(&v49, v50);
          }
          uint64_t v20 = 0LL;
        }
      }

      CFNumberRef v22 = CFDictionaryGetValue(v14, @"Name");
      CFDictionaryValueCallBacks v23 = v22;
      if (v22)
      {
        CFTypeID v24 = CFGetTypeID(v22);
        if (v24 != CFStringGetTypeID())
        {
          ktrace_log_init();
          if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
            __ktrace_uuid_map_learn_ariadne_process_dict_with_chunk_block_invoke_cold_6(&v51, v52);
          }
          CFDictionaryValueCallBacks v23 = 0LL;
        }
      }

      uint64_t v25 = (const __CFString *)CFDictionaryGetValue(v14, @"UUID");
      uint64_t v26 = v25;
      if (v25)
      {
        CFTypeID v27 = CFGetTypeID(v25);
        if (v27 == CFStringGetTypeID())
        {
          __int128 v28 = utf8(v26);
          strcpy(in, "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx");
          char v29 = *v28;
          if (*v28)
          {
            unint64_t v30 = 0LL;
            uint64_t v31 = in;
            do
            {
              do
                int v32 = *v31++;
              while (v32 == 45);
              *(v31 - ktrace_session_set_default_event_names_enabled(global_session, 1) = v29;
              if (v30 > 0x1E) {
                break;
              }
              char v29 = v28[++v30];
            }

            while (v29);
          }

          int v33 = uuid_parse(in, uu);
          if (!v17) {
            continue;
          }
LABEL_41:
          if (v20 && v23 && !v33)
          {
            if (*(void *)v44)
            {
              uint64_t valuePtr = 0LL;
              if (!CFNumberGetValue(v17, kCFNumberLongLongType, &valuePtr)) {
                ktrace_remotetime_update_params_cold_1();
              }
              uint64_t v34 = valuePtr;
              uint64_t valuePtr = 0LL;
              if (!CFNumberGetValue(v20, kCFNumberLongLongType, &valuePtr)) {
                ktrace_remotetime_update_params_cold_1();
              }
              __int128 v58 = 0u;
              __int128 v59 = 0u;
              memset(&in[16], 0, 32);
              *(_DWORD *)&in[16] = 2;
              *(void *)&__int128 v57 = v34;
              *((void *)&v57 + ktrace_session_set_default_event_names_enabled(global_session, 1) = valuePtr + 1;
              *(_OWORD *)in = *(_OWORD *)uu;
              strcpy(&in[24], "__TEXT");
              *(void *)&__int128 v59 = v23;
              CFRetain(v23);
              v40[2] = *(_OWORD *)&in[32];
              v40[3] = v57;
              v40[4] = v58;
              *(_OWORD *)cf = v59;
              v40[0] = *(_OWORD *)in;
              v40[1] = *(_OWORD *)&in[16];
              if ((void)v59) {
                CFRetain((CFTypeRef)v59);
              }
              ktrace_address_space_append(v10, (uint64_t)v40);
              __int128 v35 = (SymbolOwner *)v40;
            }

            else
            {
              uint64_t valuePtr = 0LL;
              if (!CFNumberGetValue(v17, kCFNumberLongLongType, &valuePtr)) {
                ktrace_remotetime_update_params_cold_1();
              }
              uint64_t v36 = valuePtr;
              uint64_t valuePtr = 0LL;
              if (!CFNumberGetValue(v20, kCFNumberLongLongType, &valuePtr)) {
                ktrace_remotetime_update_params_cold_1();
              }
              __int128 v58 = 0u;
              __int128 v59 = 0u;
              memset(&in[16], 0, 32);
              *(_DWORD *)&in[16] = 5;
              *(void *)&__int128 v57 = v36;
              *((void *)&v57 + ktrace_session_set_default_event_names_enabled(global_session, 1) = valuePtr + 1;
              *(_OWORD *)in = *(_OWORD *)uu;
              *(void *)&__int128 v59 = v23;
              CFRetain(v23);
              v42[2] = *(_OWORD *)&in[32];
              v42[3] = v57;
              v42[4] = v58;
              *(_OWORD *)uint64_t v43 = v59;
              v42[0] = *(_OWORD *)in;
              v42[1] = *(_OWORD *)&in[16];
              if ((void)v59) {
                CFRetain((CFTypeRef)v59);
              }
              ktrace_address_space_append(v10, (uint64_t)v42);
              __int128 v35 = (SymbolOwner *)v42;
            }

            SymbolOwner::~SymbolOwner(v35);
            SymbolOwner::~SymbolOwner((SymbolOwner *)in);
          }

          continue;
        }

        ktrace_log_init();
        if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
          __ktrace_uuid_map_learn_ariadne_process_dict_with_chunk_block_invoke_cold_6(&v53, v54);
        }
      }

      int v33 = 1;
      if (v17) {
        goto LABEL_41;
      }
    }
  }

  set_address_space_for_pid(*(void *)(a1 + 32), *(unint64_t *)v44, (CFTypeRef)v10);
  if (*(void *)(v10 + 24))
  {
    uint64_t v37 = *(void *)(a1 + 32);
    unint64_t v38 = optional_uint64::value((optional_uint64 *)(v10 + 24));
    set_address_space_for_taskid(v37, v38, (CFTypeRef)v10);
  }

  CFRelease((CFTypeRef)v10);
}

void sub_186BD07B0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, char a29)
{
}

void ktrace_uuid_map_learn_inodes_with_chunk(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    if (*(void *)(a1 + 224))
    {
      if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_FAULT)) {
        ktrace_uuid_map_learn_inodes_with_chunk_cold_4();
      }
      return;
    }

    int v5 = (void *)ktrace_chunk_size_t(a2);
    int v6 = ktrace_chunk_copy_cfdata(a2, 0LL, v5);
    if (v6)
    {
      uint64_t v7 = v6;
      CFErrorRef error = 0LL;
      CFTypeID v8 = (const __CFDictionary *)CFPropertyListCreateWithData(0LL, v6, 0LL, 0LL, &error);
      CFRelease(v7);
      if (v8)
      {
        if (ktrace_chunk_version_major(a2))
        {
          *(void *)(a1 + 224) = v8;
          if (!*(void *)(a1 + 232))
          {
            *(void *)(a1 + 232) = CFDictionaryCreateMutable(0LL, 0LL, MEMORY[0x189605240], MEMORY[0x189605250]);
            CFTypeID v8 = *(const __CFDictionary **)(a1 + 224);
          }

          v11[0] = MEMORY[0x1895F87A8];
          v11[1] = 3221225472LL;
          void v11[2] = __ktrace_uuid_map_learn_inodes_with_chunk_block_invoke;
          void v11[3] = &__block_descriptor_40_e41_v24__0____CFString__8____CFDictionary__16l;
          v11[4] = a1;
          CFDictionaryApplyFunction(v8, (CFDictionaryApplierFunction)CFDictionaryApplierTrampoline, v11);
          return;
        }

        CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0LL, 0LL, MEMORY[0x189605240], MEMORY[0x189605250]);
        if (!Mutable) {
          ktrace_remotetime_update_params_cold_1();
        }
        *(void *)(a1 + 224) = Mutable;
        *(void *)__int128 buf = MEMORY[0x1895F87A8];
        uint64_t v14 = 3221225472LL;
        CFTypeID v15 = ___ZL42ktrace_uuid_map_learn_inodes_with_chunk_v0P15ktrace_uuid_mapPK14__CFDictionary_block_invoke;
        __int128 v16 = &__block_descriptor_48_e41_v24__0____CFString__8____CFDictionary__16l;
        CFMutableDictionaryRef v17 = Mutable;
        uint64_t v18 = a1;
        CFDictionaryApplyFunction(v8, (CFDictionaryApplierFunction)CFDictionaryApplierTrampoline, buf);
        CFErrorRef v9 = v8;
      }

      else
      {
        if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
          ktrace_uuid_map_learn_inodes_with_chunk_cold_2(&error);
        }
        CFErrorRef v9 = error;
      }

      CFRelease(v9);
      return;
    }

    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
      ktrace_uuid_map_learn_inodes_with_chunk_cold_1();
    }
  }

  else
  {
    unint64_t v3 = (os_log_s *)ktrace_log;
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( &dword_186BA3000,  v3,  OS_LOG_TYPE_INFO,  "skipping ktrace_uuid_map_learn_inodes_with_chunk(), uuid map was NULL.",  buf,  2u);
    }
  }

void __ktrace_uuid_map_learn_inodes_with_chunk_block_invoke(uint64_t a1, int a2, CFDictionaryRef theDict)
{
  context[0] = MEMORY[0x1895F87A8];
  context[1] = 3221225472LL;
  context[2] = __ktrace_uuid_map_learn_inodes_with_chunk_block_invoke_2;
  context[3] = &__block_descriptor_40_e41_v24__0____CFString__8____CFDictionary__16l;
  context[4] = *(void *)(a1 + 32);
  CFDictionaryApplyFunction(theDict, (CFDictionaryApplierFunction)CFDictionaryApplierTrampoline, context);
}

void __ktrace_uuid_map_learn_inodes_with_chunk_block_invoke_2(uint64_t a1, int a2, CFDictionaryRef theDict)
{
  int Value = CFDictionaryGetValue(theDict, @"Path");
  if (Value)
  {
    int v6 = Value;
    CFTypeID v7 = CFGetTypeID(Value);
    if (v7 == CFStringGetTypeID())
    {
      CFDictionarySetValue(*(CFMutableDictionaryRef *)(*(void *)(a1 + 32) + 232LL), v6, theDict);
      CFTypeID v8 = (const __CFDictionary *)CFDictionaryGetValue(theDict, @"Images");
      if (v8)
      {
        CFErrorRef v9 = v8;
        CFTypeID v10 = CFGetTypeID(v8);
        if (v10 == CFDictionaryGetTypeID())
        {
          v11[0] = MEMORY[0x1895F87A8];
          v11[1] = 3221225472LL;
          void v11[2] = __ktrace_uuid_map_learn_inodes_with_chunk_block_invoke_3;
          void v11[3] = &__block_descriptor_48_e41_v24__0____CFString__8____CFDictionary__16l;
          v11[4] = *(void *)(a1 + 32);
          void v11[5] = v6;
          CFDictionaryApplyFunction(v9, (CFDictionaryApplierFunction)CFDictionaryApplierTrampoline, v11);
        }

        else
        {
          ktrace_log_init();
          if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
            ktrace_uuid_map_learn_tailspin_process_info_with_chunk_cold_5();
          }
        }
      }
    }

    else
    {
      ktrace_log_init();
      if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
        ktrace_uuid_map_learn_tailspin_symbols_with_chunk_cold_6();
      }
    }
  }

void __ktrace_uuid_map_learn_inodes_with_chunk_block_invoke_3(uint64_t a1, int a2, CFDictionaryRef theDict)
{
  int Value = (const __CFString *)CFDictionaryGetValue(theDict, @"UUID_String");
  if (Value)
  {
    int v5 = Value;
    CFTypeID v6 = CFGetTypeID(Value);
    if (v6 == CFStringGetTypeID())
    {
      *(void *)&v8.byte0 = 0LL;
      *(void *)&v8.byte8 = 0LL;
      CFTypeID v7 = utf8(v5);
      if (!uuid_parse(v7, &v8.byte0)) {
        ktrace_uuid_map_associate_path_with_uuid(*(ktrace_uuid_map **)(a1 + 32), v8, *(CFUUIDBytes **)(a1 + 40));
      }
    }

    else
    {
      ktrace_log_init();
      if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
        ktrace_uuid_map_learn_tailspin_symbols_with_chunk_cold_6();
      }
    }
  }

const void *ktrace_uuid_map_read_process_info_dict(ktrace_uuid_map *a1, CFDictionaryRef theDict, char a3)
{
  uint64_t v62 = *MEMORY[0x1895F89C0];
  if ((a3 & 1) != 0)
  {
    int v4 = 0;
    goto LABEL_7;
  }

  int Value = (const __CFNumber *)CFDictionaryGetValue(theDict, @"PID");
  if (!Value)
  {
LABEL_57:
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_FAULT)) {
      ktrace_uuid_map_read_process_info_dict();
    }
    return 0LL;
  }

  CFTypeID v6 = Value;
  CFTypeID v7 = CFGetTypeID(Value);
  if (v7 != CFNumberGetTypeID())
  {
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
      ktrace_uuid_map_learn_tailspin_process_info_with_chunk_cold_6();
    }
    goto LABEL_57;
  }

  *(void *)&__int128 valuePtr = 0LL;
  if (!CFNumberGetValue(v6, kCFNumberLongLongType, &valuePtr)) {
    ktrace_remotetime_update_params_cold_1();
  }
  int v4 = valuePtr;
LABEL_7:
  CFUUIDBytes v8 = (const void *)ktrace_address_space_create(v4);
  CFErrorRef v9 = (const __CFArray *)CFDictionaryGetValue(theDict, @"Binaries");
  CFTypeID v10 = v9;
  if (!v9)
  {
LABEL_51:
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_FAULT)) {
      ktrace_uuid_map_read_process_info_dict();
    }
    goto LABEL_53;
  }

  CFTypeID v11 = CFGetTypeID(v9);
  if (v11 != CFArrayGetTypeID())
  {
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
      __ktrace_uuid_map_learn_ariadne_process_dict_with_chunk_block_invoke_cold_11();
    }
    goto LABEL_51;
  }

  if (CFArrayGetCount(v10) < 1) {
    return v8;
  }
  CFIndex v12 = 0LL;
  while (1)
  {
    CFIndex v42 = v12;
    ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v10, v12);
    uint64_t v14 = ValueAtIndex;
    if (ValueAtIndex)
    {
      CFTypeID v15 = CFGetTypeID(ValueAtIndex);
      if (v15 != CFDictionaryGetTypeID())
      {
        ktrace_log_init();
        if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
          __ktrace_uuid_map_learn_ariadne_process_dict_with_chunk_block_invoke_cold_10(&v53, v54);
        }
        uint64_t v14 = 0LL;
      }
    }

    __int128 v16 = (const __CFString *)CFDictionaryGetValue(v14, @"UUID_String");
    CFMutableDictionaryRef v17 = v16;
    if (!v16) {
      goto LABEL_79;
    }
    CFTypeID v18 = CFGetTypeID(v16);
    if (v18 != CFStringGetTypeID())
    {
      ktrace_log_init();
      if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
        ktrace_uuid_map_learn_tailspin_symbols_with_chunk_cold_6();
      }
LABEL_79:
      if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_FAULT)) {
        ktrace_uuid_map_read_process_info_dict();
      }
      goto LABEL_53;
    }

    int v19 = utf8(v17);
    if (uuid_parse(v19, uu))
    {
      if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_FAULT)) {
        ktrace_uuid_map_read_process_info_dict();
      }
      goto LABEL_53;
    }

    uint64_t v20 = CFDictionaryGetValue(v14, @"Path");
    CFTypeID v21 = v20;
    if (v20)
    {
      CFTypeID v22 = CFGetTypeID(v20);
      if (v22 != CFStringGetTypeID())
      {
        ktrace_log_init();
        if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
          __ktrace_uuid_map_learn_ariadne_process_dict_with_chunk_block_invoke_cold_6(&v55, v56);
        }
        CFTypeID v21 = 0LL;
      }
    }

    CFDictionaryValueCallBacks v23 = (const __CFArray *)CFDictionaryGetValue(v14, @"Segments");
    CFTypeID v24 = v23;
    if (v23)
    {
      CFTypeID v25 = CFGetTypeID(v23);
      if (v25 != CFArrayGetTypeID())
      {
        ktrace_log_init();
        if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
          ktrace_uuid_map_read_process_info_dict(&v57, v58);
        }
        CFTypeID v24 = 0LL;
      }
    }

    if (CFArrayGetCount(v24) >= 1) {
      break;
    }
LABEL_47:
    CFIndex Count = CFArrayGetCount(v10);
    CFIndex v12 = v42 + 1;
    if (Count <= v42 + 1) {
      return v8;
    }
  }

  CFIndex v26 = 0LL;
  while (1)
  {
    CFTypeID v27 = (const __CFDictionary *)CFArrayGetValueAtIndex(v24, v26);
    __int128 v28 = v27;
    if (v27)
    {
      CFTypeID v29 = CFGetTypeID(v27);
      if (v29 != CFDictionaryGetTypeID())
      {
        ktrace_log_init();
        if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
          __ktrace_uuid_map_learn_ariadne_process_dict_with_chunk_block_invoke_cold_10(&v59, v60);
        }
        __int128 v28 = 0LL;
      }
    }

    unint64_t v30 = (const __CFString *)CFDictionaryGetValue(v28, @"Name");
    uint64_t v31 = v30;
    if (!v30) {
      goto LABEL_63;
    }
    CFTypeID v32 = CFGetTypeID(v30);
    if (v32 != CFStringGetTypeID())
    {
      ktrace_log_init();
      if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
        ktrace_uuid_map_learn_tailspin_symbols_with_chunk_cold_6();
      }
LABEL_63:
      if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_FAULT)) {
        ktrace_uuid_map_read_process_info_dict();
      }
      goto LABEL_53;
    }

    int v33 = (const __CFNumber *)CFDictionaryGetValue(v28, @"Address");
    uint64_t v34 = v33;
    if (!v33) {
      goto LABEL_67;
    }
    CFTypeID v35 = CFGetTypeID(v33);
    if (v35 != CFNumberGetTypeID()) {
      break;
    }
    if (!CFNumberGetValue(v34, kCFNumberLongLongType, &v52))
    {
      if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_FAULT)) {
        ktrace_uuid_map_read_process_info_dict();
      }
      goto LABEL_53;
    }

    uint64_t v36 = (const __CFNumber *)CFDictionaryGetValue(v28, @"Size");
    uint64_t v37 = v36;
    if (!v36) {
      goto LABEL_73;
    }
    CFTypeID v38 = CFGetTypeID(v36);
    if (v38 != CFNumberGetTypeID())
    {
      ktrace_log_init();
      if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
        ktrace_uuid_map_learn_tailspin_process_info_with_chunk_cold_6();
      }
LABEL_73:
      if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_FAULT)) {
        ktrace_uuid_map_read_process_info_dict();
      }
      goto LABEL_53;
    }

    if (!CFNumberGetValue(v37, kCFNumberLongLongType, &v51))
    {
      if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_FAULT)) {
        ktrace_uuid_map_read_process_info_dict();
      }
      goto LABEL_53;
    }

    unsigned int v39 = utf8(v31);
    __int128 v46 = 0u;
    __int128 v47 = 0u;
    __int128 v49 = 0u;
    __int128 v50 = 0u;
    LODWORD(v46) = 2;
    *(void *)&__int128 v48 = v52;
    *((void *)&v48 + ktrace_session_set_default_event_names_enabled(global_session, 1) = v51 + 1;
    __int128 valuePtr = *(_OWORD *)uu;
    strlcpy((char *)&v46 + 8, v39, 0x11uLL);
    SymbolOwner::set_path((SymbolOwner *)&valuePtr, v21);
    CFTypeRef v43[2] = v47;
    v43[3] = v48;
    v43[4] = v49;
    *(_OWORD *)cf = v50;
    v43[0] = valuePtr;
    v43[1] = v46;
    if ((void)v50) {
      CFRetain((CFTypeRef)v50);
    }
    ktrace_address_space_append((uint64_t)v8, (uint64_t)v43);
    SymbolOwner::~SymbolOwner((SymbolOwner *)v43);
    SymbolOwner::~SymbolOwner((SymbolOwner *)&valuePtr);
    if (CFArrayGetCount(v24) <= ++v26) {
      goto LABEL_47;
    }
  }

  ktrace_log_init();
  if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
    ktrace_uuid_map_learn_tailspin_process_info_with_chunk_cold_6();
  }
LABEL_67:
  if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_FAULT)) {
    ktrace_uuid_map_read_process_info_dict();
  }
LABEL_53:
  if (v8)
  {
    CFRelease(v8);
    return 0LL;
  }

  return v8;
}

void sub_186BD13A8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, char a27)
{
}

void ktrace_uuid_map_learn_kernelmap_with_chunk(uint64_t a1, uint64_t *a2)
{
  if (a1)
  {
    uint64_t v4 = ktrace_chunk_size((uint64_t)a2);
    if (ktrace_chunk_tag((uint64_t)a2) == 32773 && !ktrace_chunk_version_major((uint64_t)a2))
    {
      if (*(void *)(a1 + 248)) {
        return;
      }
      CFTypeID v6 = ktrace_chunk_map_data(a2, 0LL, v4);
      if (v6)
      {
        CFTypeID v7 = CFDataCreateWithBytesNoCopy(0LL, v6, v4, (CFAllocatorRef)*MEMORY[0x189604DC8]);
        int v5 = (const __CFDictionary *)CFPropertyListCreateWithData(0LL, v7, 0LL, 0LL, 0LL);
        CFRelease(v7);
        if (v5)
        {
          process_info_dict = ktrace_uuid_map_read_process_info_dict(v8, v5, 1);
          *(void *)(a1 + 24_Block_object_dispose(va, 8) = process_info_dict;
          if (process_info_dict)
          {
LABEL_8:
            CFRelease(v5);
LABEL_9:
            if (v6) {
              ktrace_chunk_unmap_data((uint64_t)a2, (unint64_t)v6, v4);
            }
            return;
          }
        }
      }

      else
      {
        int v5 = 0LL;
      }
    }

    else
    {
      int v5 = 0LL;
      CFTypeID v6 = 0LL;
    }

    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_FAULT)) {
      ktrace_uuid_map_learn_kernelmap_with_chunk_cold_1();
    }
    *(void *)(a1 + 24_Block_object_dispose(va, 8) = 0LL;
    if (!v5) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }

ktrace_uuid_map *ktrace_uuid_map_learn_live_kernelmap(ktrace_uuid_map *result)
{
  if (result)
  {
    CFNumberRef v1 = result;
    if (!*((void *)result + 31))
    {
      uint64_t result = (ktrace_uuid_map *)ktrace_get_live_kernel_map();
      if (result)
      {
        uint64_t result = (ktrace_uuid_map *)ktrace_uuid_map_read_process_info_dict(result, (CFDictionaryRef)result, 1);
        *((void *)v1 + 3ktrace_session_set_default_event_names_enabled(global_session, 1) = result;
      }
    }
  }

  return result;
}

__CFDictionary *ktrace_get_live_kernel_map()
{
  if ((CSIsNull() & 1) != 0) {
    return 0LL;
  }
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0LL, 0LL, MEMORY[0x189605240], MEMORY[0x189605250]);
  if (!Mutable) {
    ktrace_remotetime_update_params_cold_1();
  }
  unint64_t v0 = Mutable;
  CFMutableArrayRef v2 = CFArrayCreateMutable(0LL, 0LL, MEMORY[0x189605228]);
  if (!v2) {
    ktrace_remotetime_update_params_cold_1();
  }
  CFMutableArrayRef v3 = v2;
  CSSymbolicatorForeachSymbolOwnerAtTime();
  CFDictionarySetValue(v0, @"Binaries", v3);
  CFRelease(v3);
  CFAutorelease(v0);
  CSRelease();
  return v0;
}

void ktrace_uuid_map_learn_process_info_with_chunk(uint64_t a1, uint64_t *a2)
{
  if (a1)
  {
    uint64_t v4 = ktrace_chunk_size((uint64_t)a2);
    if (ktrace_chunk_tag((uint64_t)a2) == 32784 && !ktrace_chunk_version_major((uint64_t)a2))
    {
      CFTypeID v7 = ktrace_chunk_map_data(a2, 0LL, v4);
      if (v7)
      {
        CFUUIDBytes v8 = CFDataCreateWithBytesNoCopy(0LL, v7, v4, (CFAllocatorRef)*MEMORY[0x189604DC8]);
        CFTypeID v6 = (const __CFDictionary *)CFPropertyListCreateWithData(0LL, v8, 0LL, 0LL, 0LL);
        CFRelease(v8);
        int Value = (const __CFArray *)CFDictionaryGetValue(v6, @"Processes");
        CFTypeID v10 = Value;
        if (Value)
        {
          CFTypeID v11 = CFGetTypeID(Value);
          if (v11 != CFArrayGetTypeID())
          {
            ktrace_log_init();
            if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
              __ktrace_uuid_map_learn_ariadne_process_dict_with_chunk_block_invoke_cold_11();
            }
            CFTypeID v10 = 0LL;
          }
        }

        if (CFArrayGetCount(v10) < 1)
        {
LABEL_9:
          ktrace_chunk_unmap_data((uint64_t)a2, (unint64_t)v7, v4);
LABEL_10:
          if (v6) {
            CFRelease(v6);
          }
          return;
        }

        CFIndex v12 = 0LL;
        while (1)
        {
          CFTypeID ValueAtIndex = (CFTypeID)CFArrayGetValueAtIndex(v10, v12);
          uint64_t v14 = (const __CFDictionary *)ValueAtIndex;
          if (ValueAtIndex)
          {
            CFTypeID v15 = CFGetTypeID((CFTypeRef)ValueAtIndex);
            CFTypeID ValueAtIndex = CFDictionaryGetTypeID();
            if (v15 != ValueAtIndex)
            {
              ktrace_log_init();
              CFTypeID ValueAtIndex = os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR);
              if ((_DWORD)ValueAtIndex) {
                __ktrace_uuid_map_learn_ariadne_process_dict_with_chunk_block_invoke_cold_10(&v18, v19);
              }
              uint64_t v14 = 0LL;
            }
          }

          process_info_dict = (int *)ktrace_uuid_map_read_process_info_dict((ktrace_uuid_map *)ValueAtIndex, v14, 0);
          int v5 = process_info_dict;
          if (!process_info_dict) {
            break;
          }
          unint64_t v17 = process_info_dict[8];
          if (!(_DWORD)v17) {
            break;
          }
          set_address_space_for_pid(a1, v17, process_info_dict);
          CFRelease(v5);
          if (CFArrayGetCount(v10) <= ++v12) {
            goto LABEL_8;
          }
        }
      }

      else
      {
        int v5 = 0LL;
        CFTypeID v6 = 0LL;
      }
    }

    else
    {
      int v5 = 0LL;
      CFTypeID v6 = 0LL;
      CFTypeID v7 = 0LL;
    }

    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_FAULT))
    {
      ktrace_uuid_map_learn_process_info_with_chunk_cold_1();
      if (!v5)
      {
LABEL_8:
        if (!v7) {
          goto LABEL_10;
        }
        goto LABEL_9;
      }
    }

    else if (!v5)
    {
      goto LABEL_8;
    }

    CFRelease(v5);
    goto LABEL_8;
  }

BOOL ktrace_uuid_map_learn_sharedcache(ktrace_uuid_map *a1, CFUUIDBytes a2)
{
  int v3 = dscsym_mmap_dscsym_for_uuid();
  if (!v3)
  {
    ktrace_uuid_map_learn_sharedcache_with_buffer(a1, a2, 0LL);
    munmap(0LL, 0LL);
  }

  return v3 == 0;
}

void *ktrace_uuid_map_get_shared_cache(ktrace_uuid_map *a1, CFUUIDBytes a2)
{
  CFUUIDBytes v4 = a2;
  uint64_t result = std::__hash_table<std::__hash_value_type<CFUUIDBytes,UUIDContext>,std::__unordered_map_hasher<CFUUIDBytes,std::__hash_value_type<CFUUIDBytes,UUIDContext>,std::hash<CFUUIDBytes>,std::equal_to<CFUUIDBytes>,true>,std::__unordered_map_equal<CFUUIDBytes,std::__hash_value_type<CFUUIDBytes,UUIDContext>,std::equal_to<CFUUIDBytes>,std::hash<CFUUIDBytes>,true>,std::allocator<std::__hash_value_type<CFUUIDBytes,UUIDContext>>>::find<CFUUIDBytes>( *((void **)a1 + 5),  &v4);
  if (result) {
    return (void *)result[4];
  }
  ktrace_uuid_map_learn_sharedcache(a1, v4);
  uint64_t result = std::__hash_table<std::__hash_value_type<CFUUIDBytes,UUIDContext>,std::__unordered_map_hasher<CFUUIDBytes,std::__hash_value_type<CFUUIDBytes,UUIDContext>,std::hash<CFUUIDBytes>,std::equal_to<CFUUIDBytes>,true>,std::__unordered_map_equal<CFUUIDBytes,std::__hash_value_type<CFUUIDBytes,UUIDContext>,std::equal_to<CFUUIDBytes>,std::hash<CFUUIDBytes>,true>,std::allocator<std::__hash_value_type<CFUUIDBytes,UUIDContext>>>::find<CFUUIDBytes>( *((void **)a1 + 5),  &v4);
  if (result) {
    return (void *)result[4];
  }
  return result;
}

uint64_t ktrace_stackshot_chunk_unwrap(uint64_t *a1, uint64_t a2)
{
  if (!a1) {
    return 22LL;
  }
  unint64_t v4 = ktrace_chunk_size((uint64_t)a1);
  int v5 = ktrace_chunk_tag((uint64_t)a1);
  if (v5 != 20990)
  {
    if (v5 == 32770)
    {
    }

    else if (v5 != 36864 || ktrace_chunk_version_major((uint64_t)a1))
    {
      return 22LL;
    }
  }

  CFTypeID v6 = ktrace_chunk_map_data(a1, 0LL, v4);
  if (v6)
  {
    CFTypeID v7 = v6;
    if (ktrace_chunk_tag((uint64_t)a1) == 20990 || ktrace_chunk_version_major((uint64_t)a1))
    {
      unint64_t v8 = (unint64_t)&v7[v4];
      CFErrorRef v9 = v7;
    }

    else
    {
      if (v4 < 0x10 || *(void *)v7 > v4 - 16) {
        goto LABEL_20;
      }
      CFErrorRef v9 = v7 + 16;
      unint64_t v8 = (unint64_t)&v7[*(void *)v7 + 16];
    }

    if ((unint64_t)(v9 + 16) <= v8 && (unint64_t)&v9[*((unsigned int *)v9 + 1) + 16] <= v8)
    {
      (*(void (**)(uint64_t))(a2 + 16))(a2);
      uint64_t v10 = 0LL;
LABEL_21:
      ktrace_chunk_unmap_data((uint64_t)a1, (unint64_t)v7, v4);
      return v10;
    }

uint64_t ktrace_stackshot_chunk_timestamp(uint64_t *a1)
{
  uint64_t v4 = 0LL;
  int v5 = &v4;
  uint64_t v6 = 0x2020000000LL;
  uint64_t v7 = -1LL;
  v3[0] = MEMORY[0x1895F87A8];
  v3[1] = 3221225472LL;
  v3[2] = __ktrace_stackshot_chunk_timestamp_block_invoke;
  _OWORD v3[3] = &unk_189F55FC0;
  v3[4] = &v4;
  ktrace_stackshot_chunk_unwrap(a1, (uint64_t)v3);
  uint64_t v1 = v5[3];
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_186BD1B3C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

uint64_t __ktrace_stackshot_chunk_timestamp_block_invoke( uint64_t result, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a2 + 16;
  if (a2 + 16 <= a3)
  {
    do
    {
      unint64_t v7 = v3 + *(unsigned int *)(a2 + 4);
      if (v7 > a3 || *(_DWORD *)a2 == -242132755) {
        break;
      }
      if (*(_DWORD *)a2 == 51) {
        goto LABEL_3;
      }
      unint64_t v3 = v7 + 16;
      a2 = v7;
    }

    while (v7 + 16 <= a3);
  }

  a2 = 0LL;
  a3 = 0LL;
LABEL_3:
  if (a2 + 16 <= a3)
  {
    uint64_t v4 = *(unsigned int *)(a2 + 4);
    if (a2 + 16 + v4 <= a3)
    {
      int v5 = *(_DWORD *)a2;
      if ((*(_DWORD *)a2 & 0xFFFFFFF0) == 0x20) {
        int v5 = 17;
      }
      if (v5 <= 2309)
      {
        if (v5 == 17 || v5 == 19)
        {
LABEL_26:
          goto LABEL_27;
        }

LABEL_24:
        BOOL v8 = v4 >= (*(_DWORD *)(a2 + 8) & 0xFu);
        LODWORD(v4) = v4 - (*(_DWORD *)(a2 + 8) & 0xF);
        if (!v8) {
          LODWORD(v4) = 0;
        }
        goto LABEL_26;
      }

      if (v5 == 2312)
      {
        if ((_DWORD)v4 != 32) {
          goto LABEL_24;
        }
      }

      else if (v5 != 2310 || (_DWORD)v4 != 112)
      {
        goto LABEL_24;
      }

      if ((*(_BYTE *)(a2 + 8) & 0x8F) == 0)
      {
LABEL_27:
        *(void *)(*(void *)(*(void *)(result + 32) + 8LL) + 24LL) = *(void *)(a2 + 16);
        return result;
      }

      goto LABEL_24;
    }
  }

  return result;
}

    BOOL v8 = (v12 - 1) & v12;
    uint64_t v10 = __clz(__rbit64(v12)) + (v4 << 6);
LABEL_25:
    uint64_t v14 = 16 * v10;
    CFTypeID v15 = (uint64_t *)(*(void *)(v3 + 48) + v14);
    __int128 v16 = *v15;
    unint64_t v17 = v15[1];
    char v18 = (uint64_t *)(*(void *)(v3 + 56) + v14);
    uint64_t v20 = *v18;
    int v19 = v18[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    CFTypeID v21 = sub_186BF8278(v16, v17);
    CFDictionaryValueCallBacks v23 = v22;
    swift_bridgeObjectRelease();
    if ((v23 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      return 0LL;
    }

    CFTypeID v24 = (void *)(*(void *)(a2 + 56) + 16 * v21);
    if (*v24 == v20 && v24[1] == v19)
    {
      uint64_t result = swift_bridgeObjectRelease();
    }

    else
    {
      CFIndex v26 = sub_186C5B4F4();
      uint64_t result = swift_bridgeObjectRelease();
      if ((v26 & 1) == 0) {
        return 0LL;
      }
    }
  }

  uint64_t v13 = v11 + 4;
  if (v13 >= v27) {
    return 1LL;
  }
  CFIndex v12 = *(void *)(v5 + 8 * v13);
  if (v12)
  {
    uint64_t v4 = v13;
    goto LABEL_24;
  }

  while (1)
  {
    uint64_t v4 = v13 + 1;
    if (__OFADD__(v13, 1LL)) {
      break;
    }
    if (v4 >= v27) {
      return 1LL;
    }
    CFIndex v12 = *(void *)(v5 + 8 * v4);
    ++v13;
    if (v12) {
      goto LABEL_24;
    }
  }

        unint64_t v7 = (v13 - 1) & v13;
        CFTypeID v11 = __clz(__rbit64(v13)) + (v14 << 6);
        CFErrorRef v9 = v14;
      }

      __int128 v16 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v11);
      char v18 = *v16;
      unint64_t v17 = v16[1];
      sub_186C5B59C();
      swift_bridgeObjectRetain();
      sub_186C5ADA4();
      int v19 = sub_186C5B5D8();
      uint64_t v20 = -1LL << *(_BYTE *)(v2 + 32);
      CFTypeID v21 = v19 & ~v20;
      if (((*(void *)(v8 + ((v21 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v21) & 1) != 0) {
        break;
      }
LABEL_6:
      swift_bridgeObjectRelease();
    }

    CFTypeID v22 = *(void *)(v2 + 48);
    CFDictionaryValueCallBacks v23 = (void *)(v22 + 16 * v21);
    CFTypeID v24 = *v23 == v18 && v23[1] == v17;
    if (v24 || (sub_186C5B4F4() & 1) != 0)
    {
      isStackAllocationSafe = swift_bridgeObjectRelease();
      CFTypeID v38 = a1;
      unsigned int v39 = v37;
      uint64_t v40 = v35;
      uint64_t v41 = v9;
      CFIndex v42 = v7;
    }

    else
    {
      CFTypeID v25 = ~v20;
      do
      {
        CFTypeID v21 = (v21 + 1) & v25;
        if (((*(void *)(v8 + ((v21 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v21) & 1) == 0) {
          goto LABEL_6;
        }
        CFIndex v26 = (void *)(v22 + 16 * v21);
        CFTypeID v27 = *v26 == v18 && v26[1] == v17;
      }

      while (!v27 && (sub_186C5B4F4() & 1) == 0);
      CFTypeID v38 = a1;
      unsigned int v39 = v37;
      uint64_t v40 = v35;
      uint64_t v41 = v9;
      CFIndex v42 = v7;
      isStackAllocationSafe = swift_bridgeObjectRelease();
    }

    CFTypeID v29 = *(_BYTE *)(v2 + 32);
    unint64_t v30 = (unint64_t)((1LL << v29) + 63) >> 6;
    uint64_t v31 = 8 * v30;
    if ((v29 & 0x3Fu) < 0xE
      || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (_DWORD)isStackAllocationSafe))
    {
      MEMORY[0x1895F8858](isStackAllocationSafe);
      memcpy((char *)&v35 - ((v31 + 15) & 0x3FFFFFFFFFFFFFF0LL), (const void *)(v2 + 56), v31);
      CFTypeID v32 = sub_186C1EA74((uint64_t)&v35 - ((v31 + 15) & 0x3FFFFFFFFFFFFFF0LL), v30, v2, v21, &v38);
      swift_release();
      sub_186C0D094();
    }

    else
    {
      int v33 = (void *)swift_slowAlloc();
      memcpy(v33, (const void *)(v2 + 56), v31);
      CFTypeID v32 = sub_186C1EA74((uint64_t)v33, v30, v2, v21, &v38);
      swift_release();
      sub_186C0D094();
      MEMORY[0x186E466F0](v33, -1LL, -1LL);
    }

    return v32;
  }

  else
  {
    swift_release();
    return MEMORY[0x18961AFF8];
  }

      CFErrorRef v9 = (v15 - 1) & v15;
      uint64_t v13 = __clz(__rbit64(v15)) + (v10 << 6);
    }

    unint64_t v17 = (uint64_t *)(*(void *)(v4 + 48) + 16 * v13);
    int v19 = *v17;
    char v18 = v17[1];
    uint64_t v20 = *(void *)(v4 + 56) + 200 * v13;
    CFTypeID v21 = *(_OWORD *)(v20 + 16);
    CFTypeID v22 = *(_OWORD *)(v20 + 32);
    CFDictionaryValueCallBacks v23 = *(_OWORD *)(v20 + 48);
    int v56 = *(_OWORD *)(v20 + 64);
    __int128 v54 = v22;
    char v55 = v23;
    CFTypeID v24 = *(_OWORD *)(v20 + 128);
    CFIndex v26 = *(_OWORD *)(v20 + 80);
    CFTypeID v25 = *(_OWORD *)(v20 + 96);
    char v59 = *(_OWORD *)(v20 + 112);
    __int128 v60 = v24;
    char v57 = v26;
    __int128 v58 = v25;
    __int128 v28 = *(_OWORD *)(v20 + 160);
    CFTypeID v27 = *(_OWORD *)(v20 + 176);
    CFTypeID v29 = *(_OWORD *)(v20 + 144);
    uint64_t v64 = *(void *)(v20 + 192);
    uint64_t v62 = v28;
    __int128 v63 = v27;
    uint64_t v61 = v29;
    uint64_t v52 = *(_OWORD *)v20;
    char v53 = v21;
    sub_186C5B59C();
    swift_bridgeObjectRetain();
    sub_186C24F18((uint64_t)&v52);
    sub_186C5ADA4();
    uint64_t result = sub_186C5B5D8();
    unint64_t v30 = -1LL << *(_BYTE *)(v8 + 32);
    uint64_t v31 = result & ~v30;
    CFTypeID v32 = v31 >> 6;
    if (((-1LL << v31) & ~*(void *)(v11 + 8 * (v31 >> 6))) != 0)
    {
      int v33 = __clz(__rbit64((-1LL << v31) & ~*(void *)(v11 + 8 * (v31 >> 6)))) | v31 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      uint64_t v34 = 0;
      CFTypeID v35 = (unint64_t)(63 - v30) >> 6;
      do
      {
        if (++v32 == v35 && (v34 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }

        uint64_t v36 = v32 == v35;
        if (v32 == v35) {
          CFTypeID v32 = 0LL;
        }
        v34 |= v36;
        uint64_t v37 = *(void *)(v11 + 8 * v32);
      }

      while (v37 == -1);
      int v33 = __clz(__rbit64(~v37)) + (v32 << 6);
    }

    *(void *)(v11 + ((v33 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v33;
    CFTypeID v38 = (void *)(*(void *)(v8 + 48) + 16 * v33);
    *CFTypeID v38 = v19;
    v38[1] = v18;
    unsigned int v39 = *(void *)(v8 + 56) + 200 * v33;
    *(_OWORD *)unsigned int v39 = v52;
    uint64_t v40 = v53;
    uint64_t v41 = v54;
    CFIndex v42 = v56;
    *(_OWORD *)(v39 + 4_Block_object_dispose(va, 8) = v55;
    *(_OWORD *)(v39 + 64) = v42;
    *(_OWORD *)(v39 + 16) = v40;
    *(_OWORD *)(v39 + 32) = v41;
    uint64_t v43 = v57;
    CFUUIDBytes v44 = v58;
    char v45 = v60;
    *(_OWORD *)(v39 + 112) = v59;
    *(_OWORD *)(v39 + 12_Block_object_dispose(va, 8) = v45;
    *(_OWORD *)(v39 + 80) = v43;
    *(_OWORD *)(v39 + 96) = v44;
    __int128 v46 = v61;
    __int128 v47 = v62;
    __int128 v48 = v63;
    *(void *)(v39 + 192) = v64;
    *(_OWORD *)(v39 + 160) = v47;
    *(_OWORD *)(v39 + 176) = v48;
    *(_OWORD *)(v39 + 144) = v46;
    ++*(void *)(v8 + 16);
    if (__OFSUB__(v5--, 1LL)) {
      break;
    }
    if (!v5) {
      return v8;
    }
  }

void ktrace_address_space_get_offset_for_address( uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, _OWORD *a4@<X8>)
{
  uint64_t v29 = *MEMORY[0x1895F89C0];
  memset(v28, 0, sizeof(v28));
  __int128 v26 = 0u;
  __int128 v27 = 0u;
  *(_OWORD *)uuid_t dst = 0u;
  uint64_t v7 = ktrace_address_space_symbol_owner_for_address(a2, a3, (__n128)0);
  if (v7)
  {
    uint64_t v8 = v7;
    if (!*(void *)(v7 + 56)) {
      BYTE4(v28[0]) = 1;
    }
    *(_OWORD *)src = *(_OWORD *)v7;
    uuid_copy(dst, src);
    LODWORD(v28[0]) = *(_DWORD *)(v8 + 16);
    *((void *)&v28[1] + ktrace_session_set_default_event_names_enabled(global_session, 1) = *(void *)(v8 + 80);
    *(_OWORD *)((char *)v28 + _Block_object_dispose(va, 8) = *(_OWORD *)(v8 + 64);
    switch(LODWORD(v28[0]))
    {
      case 1:
        unint64_t v12 = a3 - *(void *)(v8 + 48);
        *((void *)&v27 + ktrace_session_set_default_event_names_enabled(global_session, 1) = v12;
        if (BYTE4(v28[0]))
        {
          uint64_t v14 = *(void *)(v8 + 24);
          uint64_t v13 = (optional_uint64 *)(v8 + 24);
          if (v14) {
            BYTE4(v28[0]) = v12 >= optional_uint64::value(v13);
          }
        }

        goto LABEL_6;
      case 2:
      case 5:
        *((void *)&v27 + ktrace_session_set_default_event_names_enabled(global_session, 1) = a3 - *(void *)(v8 + 48);
        char v9 = *(_BYTE *)(v8 + 40);
        __int128 v26 = *(_OWORD *)(v8 + 24);
        LOBYTE(v27) = v9;
        goto LABEL_6;
      case 3:
        uint64_t v19 = 0LL;
        get_sc_and_slide(a1, v8, &v19, &v18);
        if (!v19) {
          goto LABEL_14;
        }
        *((void *)&v27 + ktrace_session_set_default_event_names_enabled(global_session, 1) = a3 - optional_uint64::value((optional_uint64 *)&v19);
        CFTypeID v15 = v18;
        if (v18)
        {
          uint64_t v16 = optional_uint64::value((optional_uint64 *)&v19);
          ktrace_address_space_get_offset_for_address(a1, v15, a3 - v16);
          if ((_DWORD)v23)
          {
            __int128 v27 = v22;
            v28[0] = v23;
            v28[1] = v24;
            *(_OWORD *)uuid_t dst = *(_OWORD *)src;
            __int128 v26 = v21;
          }
        }

        goto LABEL_6;
      case 4:
        uint64_t v17 = *(void *)(a1 + 248);
        if (v17)
        {
          ktrace_address_space_get_offset_for_address(a1, v17, a3);
        }

        else
        {
          *((void *)&v27 + ktrace_session_set_default_event_names_enabled(global_session, 1) = a3;
LABEL_6:
          __int128 v10 = v28[0];
          a4[2] = v27;
          a4[3] = v10;
          a4[4] = v28[1];
          __int128 v11 = v26;
          *a4 = *(_OWORD *)dst;
          a4[1] = v11;
        }

        break;
      default:
        ktrace_address_space_deep_iterate_symbol_owners();
    }
  }

  else
  {
LABEL_14:
    a4[3] = 0u;
    a4[4] = 0u;
    a4[1] = 0u;
    a4[2] = 0u;
    *a4 = 0u;
  }

optional_uint64 *get_sc_and_slide(uint64_t a1, uint64_t a2, uint64_t *a3, optional_uint64 **a4)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  uint64_t v8 = *(void *)(a2 + 24);
  uint64_t result = (optional_uint64 *)ktrace_uuid_map_get_shared_cache((ktrace_uuid_map *)a1, *(CFUUIDBytes *)a2);
  __int128 v10 = result;
  if (!result)
  {
LABEL_5:
    if (v8) {
      goto LABEL_17;
    }
    goto LABEL_6;
  }

  if (v8) {
    goto LABEL_17;
  }
  uint64_t result = (optional_uint64 *)((char *)result + 56);
  if (*((void *)v10 + 7))
  {
    uint64_t v11 = *(void *)(a2 + 48);
    uint64_t result = (optional_uint64 *)optional_uint64::value(result);
    uint64_t v8 = v11 - (void)result + 1;
    goto LABEL_5;
  }

LABEL_17:
  *a3 = v8;
  *a4 = v10;
  return result;
}

  dispatch_group_wait(*(dispatch_group_t *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 104LL), 0xFFFFFFFFFFFFFFFFLL);
  dispatch_release(*(dispatch_object_t *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 104LL));
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 104LL) = 0LL;
  if (CFArrayGetCount(*(CFArrayRef *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 88LL)))
  {
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0LL, 0LL, MEMORY[0x189605240], MEMORY[0x189605250]);
    CFDictionarySetValue(Mutable, @"Processes", *(const void **)(*(void *)(*(void *)(a1 + 32) + 8LL) + 88LL));
    Data = CFPropertyListCreateData(0LL, Mutable, kCFPropertyListBinaryFormat_v1_0, 0LL, 0LL);
    CFRelease(Mutable);
    if (!Data) {
      ktrace_remotetime_update_params_cold_1();
    }
    uint64_t v8 = *(void *)(a1 + 48);
    BytePtr = (UInt8 *)CFDataGetBytePtr(Data);
    CFIndex Length = CFDataGetLength(Data);
    ktrace_file_append_chunk(v8, 32784, 0, 0, BytePtr, Length);
    CFRelease(Data);
  }

  if ((*(_BYTE *)(a1 + 72) & 2) != 0)
  {
    uint64_t v11 = CFPropertyListCreateData(0LL, *(CFPropertyListRef *)(a1 + 56), kCFPropertyListBinaryFormat_v1_0, 0LL, 0LL);
    unint64_t v12 = v11;
    if (!v11) {
      ktrace_remotetime_update_params_cold_1();
    }
    uint64_t v13 = *(void *)(a1 + 48);
    unint64_t v14 = (UInt8 *)CFDataGetBytePtr(v11);
    CFTypeID v15 = CFDataGetLength(v12);
    ktrace_file_append_chunk(v13, 32772, 1, 0, v14, v15);
    CFRelease(v12);
    if (*(void *)(a1 + 40)) {
      ktrace_client_get_live_kernel_map();
    }
    live_kernel_map = ktrace_get_live_kernel_map();
    if (live_kernel_map)
    {
      unint64_t v17 = CFPropertyListCreateData(0LL, live_kernel_map, kCFPropertyListXMLFormat_v1_0, 0LL, 0LL);
      unint64_t v18 = v17;
      if (!v17) {
        ktrace_remotetime_update_params_cold_1();
      }
      uint64_t v19 = *(void *)(a1 + 48);
      uint64_t v20 = (UInt8 *)CFDataGetBytePtr(v17);
      __int128 v21 = CFDataGetLength(v18);
      ktrace_file_append_chunk(v19, 32773, 0, 0, v20, v21);
      CFRelease(v18);
    }
  }

  __int128 v22 = *(void **)(*(void *)(a1 + 32) + 8LL);
  __int128 v23 = (void *)v22[7];
  if (v23) {
    free(v23);
  }
  __int128 v24 = (const void *)v22[9];
  if (v24) {
    CFRelease(v24);
  }
  CFTypeID v25 = (const void *)v22[11];
  if (v25) {
    CFRelease(v25);
  }
  *(_OWORD *)__int128 v26 = 0u;
  __int128 v27 = 0u;
  __int128 v28 = 1065353216;
  std::__hash_table<std::__hash_value_type<unsigned long long,dyld_trace_point>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,dyld_trace_point>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,dyld_trace_point>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,dyld_trace_point>>>::__move_assign( *(void *)(*(void *)(a1 + 32) + 8LL) + 272LL,  (uint64_t *)v26);
  std::__hash_table<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>>>::~__hash_table((uint64_t)v26);
  *(_OWORD *)__int128 v26 = 0u;
  __int128 v27 = 0u;
  __int128 v28 = 1065353216;
  std::__hash_table<std::__hash_value_type<unsigned long long,dyld_trace_point>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,dyld_trace_point>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,dyld_trace_point>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,dyld_trace_point>>>::__move_assign( *(void *)(*(void *)(a1 + 32) + 8LL) + 312LL,  (uint64_t *)v26);
  std::__hash_table<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>>>::~__hash_table((uint64_t)v26);
  free(*(void **)(a1 + 64));
  CFRelease(*(CFTypeRef *)(a1 + 56));
}

  uint64_t v6 = *a1;
  uint64_t v7 = v6 >= 0x2F;
  uint64_t v8 = v6 - 47;
  if (!v7) {
    uint64_t v8 = -1;
  }
  return (v8 + 1);
}

  uint64_t v6 = *a1;
  uint64_t v7 = v6 >= 0x96;
  uint64_t v8 = v6 - 150;
  if (!v7) {
    uint64_t v8 = -1;
  }
  return (v8 + 1);
}

  uint64_t v6 = *a1;
  uint64_t v7 = v6 >= 8;
  uint64_t v8 = v6 - 8;
  if (!v7) {
    uint64_t v8 = -1;
  }
  return (v8 + 1);
}

  uint64_t v6 = *a1;
  uint64_t v7 = v6 >= 3;
  uint64_t v8 = v6 - 3;
  if (!v7) {
    uint64_t v8 = -1;
  }
  return (v8 + 1);
}

  uint64_t v6 = *a1;
  uint64_t v7 = v6 >= 6;
  uint64_t v8 = v6 - 6;
  if (!v7) {
    uint64_t v8 = -1;
  }
  return (v8 + 1);
}

  uint64_t v6 = *a1;
  uint64_t v7 = v6 >= 0x17;
  uint64_t v8 = v6 - 23;
  if (!v7) {
    uint64_t v8 = -1;
  }
  return (v8 + 1);
}

  uint64_t result = swift_bridgeObjectRelease();
  if (v3 > 0xFFFFFFFFLL)
  {
LABEL_22:
    __break(1u);
    return result;
  }

  uint64_t result = kperf_action_samplers_set();
  if ((result & 0x80000000) != 0)
  {
    __int128 v23 = MEMORY[0x186E445C0]();
    type metadata accessor for KTraceRecordError();
    sub_186BF0CD4();
    swift_allocError();
    strcpy(v24, "set samplers");
    v24[13] = 0;
    *((_WORD *)v24 + 7) = -5120;
    *((_DWORD *)v24 + 4) = v23;
    swift_storeEnumTagMultiPayload();
    return swift_willThrow();
  }

  return result;
}

  uint64_t v6 = *a1;
  uint64_t v7 = v6 >= 4;
  uint64_t v8 = v6 - 4;
  if (!v7) {
    uint64_t v8 = -1;
  }
  return (v8 + 1);
}

  uint64_t v6 = *a1;
  uint64_t v7 = v6 >= 0xB;
  uint64_t v8 = v6 - 11;
  if (!v7) {
    uint64_t v8 = -1;
  }
  return (v8 + 1);
}

  uint64_t v6 = *a1;
  uint64_t v7 = v6 >= 2;
  uint64_t v8 = v6 - 2;
  if (!v7) {
    uint64_t v8 = -1;
  }
  return (v8 + 1);
}

  uint64_t v6 = *a1;
  uint64_t v7 = v6 >= 5;
  uint64_t v8 = v6 - 5;
  if (!v7) {
    uint64_t v8 = -1;
  }
  return (v8 + 1);
}

  if (ktrace_file_get_format((uint64_t)v35) != 4)
  {
    *(void *)&v149 = 0LL;
    *((void *)&v149 + ktrace_session_set_default_event_names_enabled(global_session, 1) = 0xE000000000000000LL;
    sub_186C5B260();
    swift_bridgeObjectRelease();
    *(void *)&v149 = v36;
    *((void *)&v149 + ktrace_session_set_default_event_names_enabled(global_session, 1) = v34;
    sub_186C5ADD4();
    CFUUIDBytes v44 = v149;
    sub_186C4AA40();
    __int128 v24 = (void *)swift_allocError();
    *(_OWORD *)char v45 = v44;
    *(_BYTE *)(v45 + 16) = 1;
    swift_willThrow();
LABEL_20:
    ktrace_file_close(v35);
    goto LABEL_21;
  }

  swift_bridgeObjectRelease();
  swift_beginAccess();
  uint64_t v43 = swift_bridgeObjectRetain();
  __int128 v46 = sub_186C2F968(v43);
  swift_bridgeObjectRelease();
  v148 = v46;
  __int128 v47 = swift_bridgeObjectRetain();
  char v53 = sub_186C4A164(v47, v37, &v148);
  swift_bridgeObjectRelease();
  if (!*(void *)(v53 + 16))
  {
    swift_bridgeObjectRelease();
    sub_186C4AA40();
    __int128 v24 = (void *)swift_allocError();
    *(void *)__int128 v67 = 0xD000000000000024LL;
    *(void *)(v67 + _Block_object_dispose(va, 8) = 0x8000000186C680A0LL;
    *(_BYTE *)(v67 + 16) = 0;
    swift_willThrow();
    swift_bridgeObjectRelease();
    goto LABEL_20;
  }

  v126 = v53;
  v145 = 0LL;
  __int128 v54 = swift_allocObject();
  *(void *)(v54 + 16) = &v145;
  char v55 = swift_allocObject();
  *(void *)(v55 + 16) = sub_186C4AA94;
  *(void *)(v55 + 24) = v54;
  *(void *)&v151 = sub_186C4AAD0;
  *((void *)&v151 + ktrace_session_set_default_event_names_enabled(global_session, 1) = v55;
  int v56 = v35;
  int v33 = (void *)MEMORY[0x1895F87A8];
  *(void *)&v149 = MEMORY[0x1895F87A8];
  CFMutableArrayRef v2 = 1107296256LL;
  *((void *)&v149 + ktrace_session_set_default_event_names_enabled(global_session, 1) = 1107296256LL;
  *(void *)&v150 = sub_186C4A3BC;
  *((void *)&v150 + ktrace_session_set_default_event_names_enabled(global_session, 1) = &block_descriptor_2;
  char v57 = (uint64_t)_Block_copy(&v149);
  swift_retain();
  swift_release();
  v127._rawint Value = v56;
  __int128 v63 = ktrace_file_header_iterate((uint64_t)v56, 0LL, v57, v58, v59, v60, v61, v62);
  _Block_release((const void *)v57);
  LOBYTE(v57) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if ((v57 & 1) != 0)
  {
    __break(1u);
    goto LABEL_60;
  }

  if (v63)
  {
    swift_bridgeObjectRelease();
    *(void *)&v149 = 0LL;
    *((void *)&v149 + ktrace_session_set_default_event_names_enabled(global_session, 1) = 0xE000000000000000LL;
    sub_186C5B260();
    swift_bridgeObjectRelease();
    v141 = 0xD00000000000001DLL;
    v142 = 0x8000000186C67F40LL;
    if (strerror(v63))
    {
      sub_186C5ADE0();
      sub_186C5ADD4();
      swift_bridgeObjectRelease();
      uint64_t v64 = v141;
      kcdata_iter v65 = v142;
      sub_186C4AA40();
      __int128 v24 = (void *)swift_allocError();
      *(void *)__int128 v66 = v64;
      *(void *)(v66 + _Block_object_dispose(va, 8) = v65;
LABEL_29:
      *(_BYTE *)(v66 + 16) = 2;
      swift_willThrow();
LABEL_41:
      swift_bridgeObjectRelease();
      ktrace_file_close(v127._rawValue);
      v155 = v164;
      v156 = v165;
      v157 = v166;
      v151 = v160;
      v152 = v161;
      v153 = v162;
      v154 = v163;
      v149 = v158;
      v150 = v159;
      sub_186C45E80(&v149);
      swift_release();
      __int128 v26 = sub_186C4AA94;
      goto LABEL_4;
    }

    goto LABEL_61;
  }

  __int128 v68 = v145;
  if (!v145)
  {
    swift_bridgeObjectRelease();
    sub_186C4AA40();
    __int128 v24 = (void *)swift_allocError();
    *(void *)__int128 v66 = 0xD000000000000024LL;
    *(void *)(v66 + _Block_object_dispose(va, 8) = 0x8000000186C67F60LL;
    goto LABEL_29;
  }

  __int128 v69 = (int *)ktrace_session_create_with_flags(0);
  if (!v69)
  {
    swift_bridgeObjectRelease();
    *(void *)&v149 = 0LL;
    *((void *)&v149 + ktrace_session_set_default_event_names_enabled(global_session, 1) = 0xE000000000000000LL;
    sub_186C5B260();
    char v82 = swift_bridgeObjectRelease();
    v141 = 0xD00000000000002ALL;
    v142 = 0x8000000186C67F90LL;
    v83 = MEMORY[0x186E445C0](v82);
    if (!strerror(v83))
    {
LABEL_63:
      __break(1u);
      goto LABEL_64;
    }

    sub_186C5ADE0();
    sub_186C5ADD4();
    swift_bridgeObjectRelease();
    v84 = v141;
    v85 = v142;
    sub_186C4AA40();
    __int128 v24 = (void *)swift_allocError();
    *(void *)v86 = v84;
    *(void *)(v86 + _Block_object_dispose(va, 8) = v85;
    *(_BYTE *)(v86 + 16) = 2;
    swift_willThrow();
    __int128 v81 = v68;
LABEL_40:
    ktrace_machine_destroy(v81);
    goto LABEL_41;
  }

  int v75 = v69;
  v125 = v68;
  v76 = ktrace_set_ktrace_file((uint64_t)v69, (uint64_t)v127._rawValue, 0, v70, v71, v72, v73, v74);
  if (v76)
  {
    __int128 v77 = v76;
    swift_bridgeObjectRelease();
    *(void *)&v149 = 0LL;
    *((void *)&v149 + ktrace_session_set_default_event_names_enabled(global_session, 1) = 0xE000000000000000LL;
    sub_186C5B260();
    swift_bridgeObjectRelease();
    v141 = 0xD000000000000023LL;
    v142 = 0x8000000186C67FC0LL;
    if (!strerror(v77))
    {
LABEL_62:
      __break(1u);
      goto LABEL_63;
    }

    sub_186C5ADE0();
    sub_186C5ADD4();
    swift_bridgeObjectRelease();
    uint64_t v78 = v141;
    __int128 v79 = v142;
    sub_186C4AA40();
    __int128 v24 = (void *)swift_allocError();
    *(void *)__int128 v80 = v78;
    *(void *)(v80 + _Block_object_dispose(va, 8) = v79;
    goto LABEL_36;
  }

  sub_186C28944(0x6C756E2F7665642FLL, 0xE90000000000006CLL, 4);
  if (!v87)
  {
    swift_bridgeObjectRelease();
    sub_186C4AA40();
    __int128 v24 = (void *)swift_allocError();
    *(void *)__int128 v80 = 0xD000000000000019LL;
    *(void *)(v80 + _Block_object_dispose(va, 8) = 0x8000000186C67FF0LL;
LABEL_36:
    *(_BYTE *)(v80 + 16) = 2;
    swift_willThrow();
    __int128 v81 = v125;
    goto LABEL_40;
  }

  v120 = v75;
  v122 = v54;
  if ((v168 & 1) != 0)
  {
    v90 = sub_186C28570();
    swift_beginAccess();
    v89 = (FILE *)*v90;
    v91 = sub_186C28514();
    swift_beginAccess();
    v88 = (FILE *)*v91;
  }

  else
  {
    v88 = v87;
    v89 = v87;
  }

  type metadata accessor for Reporter();
  v121 = sub_186BFDC00(v89, v88, 0x676E69646E656D41LL, 0xE800000000000000LL, 1);
LABEL_49:
  type metadata accessor for ProviderList();
  v124 = ProviderList.__allocating_init(machine:)(v125);
  v92 = *(void *)(v126 + 16);
  if (v92)
  {
    v123 = rawValue[32];
    v93 = (void **)(v126 + 48);
    v94 = (void *)v121;
    do
    {
      v96 = (uint64_t)*(v93 - 1);
      v95 = *v93;
      v97 = (uint64_t)*(v93 - 2);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_retain();
      sub_186BF2E4C(v97, v96, v95, v94, v123);
      v93 += 4;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      --v92;
    }

    while (v92);
  }

  swift_bridgeObjectRelease();
  sub_186BF39D4((uint64_t)v127._rawValue);
  sub_186C3AA2C(0LL, &qword_18C6A2B18);
  sub_186C5AC6C();
  *(void *)&v149 = MEMORY[0x18961AFE8];
  sub_186BFCB04(&qword_18C6A2B20, (uint64_t (*)(uint64_t))MEMORY[0x18961B8A8], MEMORY[0x18961B8C0]);
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C6A2B28);
  sub_186C253C0(&qword_18C6A2B30, &qword_18C6A2B28, MEMORY[0x189618470]);
  sub_186C5B1F4();
  (*(void (**)(dispatch_queue_s *, void, dispatch_semaphore_s *))(v135 + 104))( v137,  *MEMORY[0x18961B900],  v136);
  v137 = (dispatch_queue_s *)sub_186C5B008();
  v98 = dispatch_semaphore_create(0LL);
  v99 = swift_allocObject();
  v100 = v168;
  *(_OWORD *)(v99 + 16) = v167;
  *(_OWORD *)(v99 + 32) = v100;
  *(_OWORD *)(v99 + 4_Block_object_dispose(va, 8) = v169;
  v101 = v120;
  *(void *)(v99 + 64) = v120;
  *(void *)(v99 + 72) = v98;
  *(void *)&v151 = sub_186C4AB40;
  *((void *)&v151 + ktrace_session_set_default_event_names_enabled(global_session, 1) = v99;
  *(void *)&v149 = v33;
  *((void *)&v149 + ktrace_session_set_default_event_names_enabled(global_session, 1) = v2;
  *(void *)&v150 = sub_186C04B7C;
  *((void *)&v150 + ktrace_session_set_default_event_names_enabled(global_session, 1) = &block_descriptor_15;
  v102 = _Block_copy(&v149);
  sub_186C46058((uint64_t)&v167);
  v136 = v98;
  swift_release();
  ktrace_set_completion_handler((uint64_t)v101, v102);
  _Block_release(v102);
  ProviderList.configurePostprocessing(session:)((Swift::OpaquePointer)v101);
  v103 = (void (*)(void))*((void *)&v168 + 1);
  v104 = swift_bridgeObjectRetain();
  v105 = sub_186C09B98(v104);
  swift_bridgeObjectRelease();
  v149 = (unint64_t)v105;
  LOBYTE(v150) = 2;
  v140 = v103;
  v103(&v149);
  swift_release();
  if (!ktrace_session_has_callbacks(v101))
  {
    (*(void (**)(unint64_t, unint64_t))(*(void *)v121 + 224LL))( 0xD000000000000029LL,  0x8000000186C68040LL);
LABEL_58:
    v115 = v127._rawValue;
    v116 = v124;
    ProviderList.postprocessingComplete(file:)(v127);
    v149 = xmmword_186C60A40;
    LOBYTE(v150) = 3;
    v140(&v149);

    swift_release();
    ktrace_machine_destroy(v125);
    swift_bridgeObjectRelease();
    ktrace_file_close(v115);
    v155 = v164;
    v156 = v165;
    v157 = v166;
    v151 = v160;
    v152 = v161;
    v153 = v162;
    v154 = v163;
    v149 = v158;
    v150 = v159;
    sub_186C45E80(&v149);
    swift_release();
    uint64_t v29 = sub_186C4AA94;
    goto LABEL_5;
  }

  sub_186C3AA2C(0LL, (unint64_t *)&qword_18C6A24F0);
  sub_186C5B014();
  swift_getObjectType();
  v106 = swift_allocObject();
  v107 = v168;
  *(_OWORD *)(v106 + 16) = v167;
  *(_OWORD *)(v106 + 32) = v107;
  *(_OWORD *)(v106 + 4_Block_object_dispose(va, 8) = v169;
  v108 = (unint64_t)v120;
  *(void *)(v106 + 64) = v120;
  *(void *)&v151 = sub_186C4ABD4;
  *((void *)&v151 + ktrace_session_set_default_event_names_enabled(global_session, 1) = v106;
  *(void *)&v149 = v33;
  *((void *)&v149 + ktrace_session_set_default_event_names_enabled(global_session, 1) = v2;
  *(void *)&v150 = sub_186C04B7C;
  *((void *)&v150 + ktrace_session_set_default_event_names_enabled(global_session, 1) = &block_descriptor_21;
  v109 = _Block_copy(&v149);
  sub_186C46058((uint64_t)&v167);
  v110 = v138;
  sub_186C5AC6C();
  v111 = v130;
  sub_186C04E0C();
  sub_186C5B020();
  _Block_release(v109);
  (*(void (**)(char *, uint64_t))(v131 + 8))(v111, v132);
  (*(void (**)(char *, uint64_t))(v128 + 8))(v110, v129);
  swift_release();
  sub_186C5B038();
  if (!ktrace_start(v108, v137))
  {
    sub_186C5B05C();
    sub_186C5B02C();
    swift_unknownObjectRelease();
    goto LABEL_58;
  }

  *(void *)&v149 = 0LL;
  *((void *)&v149 + ktrace_session_set_default_event_names_enabled(global_session, 1) = 0xE000000000000000LL;
  sub_186C5B260();
  swift_bridgeObjectRelease();
  v143 = 0xD000000000000024LL;
  v144 = 0x8000000186C68070LL;
  if (strerror(0))
  {
    sub_186C5ADE0();
    sub_186C5ADD4();
    swift_bridgeObjectRelease();
    v112 = v143;
    v113 = v144;
    sub_186C4AA40();
    __int128 v24 = (void *)swift_allocError();
    *(void *)v114 = v112;
    *(void *)(v114 + _Block_object_dispose(va, 8) = v113;
    *(_BYTE *)(v114 + 16) = 2;
    swift_willThrow();
    swift_release();

    swift_unknownObjectRelease();
    ktrace_machine_destroy(v125);
    swift_bridgeObjectRelease();
    ktrace_file_close(v127._rawValue);
    v155 = v164;
    v156 = v165;
    v157 = v166;
    v151 = v160;
    v152 = v161;
    v153 = v162;
    v154 = v163;
    v149 = v158;
    v150 = v159;
    sub_186C45E80(&v149);
    swift_release();
    __int128 v26 = sub_186C4AA94;
    goto LABEL_4;
  }

uint64_t ktrace_uuid_map_dump_address_space(ktrace_uuid_map *a1, unint64_t a2, FILE *a3)
{
  if (!a1) {
    return 22LL;
  }
  int v5 = address_space_for_taskid(a1, a2);
  return ktrace_address_space_dump((uint64_t)a1, (uint64_t)v5, a3);
}

uint64_t ktrace_address_space_dump(uint64_t a1, uint64_t a2, FILE *a3)
{
  if (!a2) {
    return 22LL;
  }
  if (a3) {
    int v5 = a3;
  }
  else {
    int v5 = (FILE *)*MEMORY[0x1895F89E0];
  }
  fprintf(v5, "Address space:  pid=%d task_unique_id=%llx\n", *(_DWORD *)(a2 + 32), *(void *)(a2 + 24) - 1LL);
  v7[0] = MEMORY[0x1895F87A8];
  v7[1] = 3221225472LL;
  void v7[2] = ___ZL25ktrace_address_space_dumpP15ktrace_uuid_mapP20ktrace_address_spaceP7__sFILE_block_invoke;
  v7[3] = &__block_descriptor_48_e244_v24__0__SymbolOwner____CCCCCCCCCCCCCCCC__SymbolOwnerTypeProperty_i_____17c__optional_uint64_Q_____optional_uint64_Q__optional_uint64_Q__optional_uint64_Q___3Q__Q_optional_uint64_Q__fsid__2i___fsobj_id_II_____CFString_b1b1_8_optional_uint64_Q_16l;
  v7[4] = v5;
  void v7[5] = a1;
  ktrace_address_space_deep_iterate_symbol_owners(a1, a2, (uint64_t)v7);
  return 0LL;
}

uint64_t ktrace_uuid_map_dump_address_space_pid(ktrace_uuid_map *a1, int a2, FILE *a3)
{
  if (!a1) {
    return 22LL;
  }
  int v5 = address_space_for_pid(a1, a2);
  return ktrace_address_space_dump((uint64_t)a1, (uint64_t)v5, a3);
}

double ktrace_uuid_map_get_offset_for_address@<D0>( ktrace_uuid_map *a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, int a4@<W3>, _OWORD *a5@<X8>)
{
  if (a1
    && (!a2 && a4 && (uint64_t v8 = (void *)*((void *)a1 + 31)) != 0LL || (uint64_t v8 = address_space_for_taskid(a1, a2)) != 0LL))
  {
    ktrace_address_space_get_offset_for_address((uint64_t)a1, (uint64_t)v8, a3, a5);
  }

  else
  {
    double result = 0.0;
    a5[3] = 0u;
    a5[4] = 0u;
    a5[1] = 0u;
    a5[2] = 0u;
    *a5 = 0u;
  }

  return result;
}

double ktrace_uuid_map_get_offset_for_pid_address@<D0>( ktrace_uuid_map *a1@<X0>, int a2@<W1>, unint64_t a3@<X2>, int a4@<W3>, _OWORD *a5@<X8>)
{
  if (a1 && (!a2 && a4 && (uint64_t v8 = (void *)*((void *)a1 + 31)) != 0LL || (uint64_t v8 = address_space_for_pid(a1, a2)) != 0LL))
  {
    ktrace_address_space_get_offset_for_address((uint64_t)a1, (uint64_t)v8, a3, a5);
  }

  else
  {
    double result = 0.0;
    a5[3] = 0u;
    a5[4] = 0u;
    a5[1] = 0u;
    a5[2] = 0u;
    *a5 = 0u;
  }

  return result;
}

uint64_t ktrace_uuid_map_update_internal(uint64_t result, uint64_t a2, uint64_t *a3, int a4, int a5, uint64_t a6)
{
  uint64_t v64 = *MEMORY[0x1895F89C0];
  if (!result) {
    return result;
  }
  uint64_t v11 = result;
  if (a4)
  {
    unint64_t v12 = a3[5];
    uint64_t v13 = a3 + 6;
    __int128 v14 = *(_OWORD *)(a3 + 1);
    __int128 v15 = *(_OWORD *)(a3 + 3);
  }

  else
  {
    unint64_t v12 = *((unsigned int *)a3 + 6);
    uint64_t v13 = (_DWORD *)a3 + 7;
    uint64_t v16 = a3[1];
    uint64_t v17 = a3[2];
    *(void *)&__int128 v18 = v16;
    *((void *)&v18 + ktrace_session_set_default_event_names_enabled(global_session, 1) = HIDWORD(v16);
    __int128 v14 = v18;
    *(void *)&__int128 v18 = v17;
    *((void *)&v18 + ktrace_session_set_default_event_names_enabled(global_session, 1) = HIDWORD(v17);
    __int128 v15 = v18;
  }

  signed int v19 = *v13 & 0xFFFFFFFC;
  uint64_t v20 = *a3;
  uint64_t v35 = *a3;
  __int128 v36 = v14;
  __int128 v37 = v15;
  unint64_t v38 = v12;
  signed int v39 = v19;
  uint64_t v41 = 0LL;
  uint64_t v40 = 0LL;
  uint64_t v42 = 0LL;
  uint64_t v43 = 0LL;
  int v44 = 0;
  if (!*(_BYTE *)(result + 208)) {
    std::__throw_bad_optional_access[abi:ne180100]();
  }
  double result = (uint64_t)dyldtp_decode_window_update(a4, v12, (DyldDecodeWindow *)(result + 48), (uint64_t)&v35);
  __int128 v62 = 0u;
  __int128 v63 = 0u;
  __int128 v60 = 0u;
  __int128 v61 = 0u;
  if (result)
  {
    __int128 v21 = *(_OWORD *)(result + 48);
    __int128 v23 = *(_OWORD *)result;
    __int128 v22 = *(_OWORD *)(result + 16);
    __int128 v62 = *(_OWORD *)(result + 32);
    __int128 v63 = v21;
    __int128 v60 = v23;
    __int128 v61 = v22;
    HIDWORD(v25) = v23;
    LODWORD(v25) = v23 - 520421376;
    unsigned int v24 = v25 >> 2;
    if (v24 > 0xC) {
      goto LABEL_11;
    }
    if (((1 << v24) & 5) != 0)
    {
      if ((a5 & 1) != 0)
      {
LABEL_22:
        v55[0] = MEMORY[0x1895F87A8];
        v55[1] = 3221225472LL;
        v55[2] = ___Z31ktrace_uuid_map_update_internalP15ktrace_uuid_mapP14ktrace_sessionP12ktrace_pointbbU13block_pointerFv12PrepassOpRefE_block_invoke_2;
        v55[3] = &__block_descriptor_120_e5_v8__0l;
        v55[4] = v11;
        v55[5] = a2;
        v55[6] = v12;
        __int128 v56 = v60;
        __int128 v57 = v61;
        uint64_t v29 = v55;
        __int128 v58 = v62;
        __int128 v59 = v63;
        return (*(uint64_t (**)(uint64_t, uint64_t, void *))(a6 + 16))(a6, v20, v29);
      }

      goto LABEL_31;
    }

    int v26 = 520421416;
    if (((1 << v24) & 0xA0) != 0)
    {
      int v28 = 520421396;
      int v26 = 520421376;
    }

    else
    {
      int v27 = 1 << v24;
      int v28 = 520421416;
      if ((v27 & 0x1400) == 0) {
LABEL_11:
      }
        abort();
    }

    if (a5) {
      signed int v19 = v28;
    }
    else {
      signed int v19 = v26;
    }
  }

  if (v19 > 520421395)
  {
    if (v19 != 520421396)
    {
      if (v19 == 520421416)
      {
        if (result)
        {
          double result = uuid_is_null((const unsigned __int8 *)((unint64_t)&v60 | 0xC));
          if (!(_DWORD)result)
          {
            v45[1] = 3221225472LL;
            __int128 v46 = v60;
            __int128 v47 = v61;
            __int128 v48 = v62;
            v45[0] = MEMORY[0x1895F87A8];
            v45[2] = ___Z31ktrace_uuid_map_update_internalP15ktrace_uuid_mapP14ktrace_sessionP12ktrace_pointbbU13block_pointerFv12PrepassOpRefE_block_invoke_2_58;
            v45[3] = &__block_descriptor_120_e5_v8__0l;
            v45[4] = v11;
            v45[5] = a2;
            v45[6] = v12;
            uint64_t v29 = v45;
            __int128 v49 = v63;
            return (*(uint64_t (**)(uint64_t, uint64_t, void *))(a6 + 16))(a6, v20, v29);
          }
        }
      }

      return result;
    }

    if (!result) {
      return result;
    }
LABEL_31:
    v50[1] = 3221225472LL;
    __int128 v51 = v60;
    __int128 v52 = v61;
    __int128 v53 = v62;
    v50[0] = MEMORY[0x1895F87A8];
    v50[2] = ___Z31ktrace_uuid_map_update_internalP15ktrace_uuid_mapP14ktrace_sessionP12ktrace_pointbbU13block_pointerFv12PrepassOpRefE_block_invoke_57;
    v50[3] = &__block_descriptor_120_e5_v8__0l;
    v50[4] = v11;
    v50[5] = a2;
    v50[6] = v12;
    uint64_t v29 = v50;
    __int128 v54 = v63;
    return (*(uint64_t (**)(uint64_t, uint64_t, void *))(a6 + 16))(a6, v20, v29);
  }

  if (v19 == 117440520)
  {
    if (a4) {
      uint64_t v30 = a3[1];
    }
    else {
      uint64_t v30 = *((unsigned int *)a3 + 2);
    }
    if (v30 == (int)v30)
    {
      v31[0] = MEMORY[0x1895F87A8];
      v31[1] = 3221225472LL;
      int v31[2] = ___Z31ktrace_uuid_map_update_internalP15ktrace_uuid_mapP14ktrace_sessionP12ktrace_pointbbU13block_pointerFv12PrepassOpRefE_block_invoke;
      v31[3] = &__block_descriptor_70_e5_v8__0l;
      int v32 = v30;
      void v31[4] = v11;
      v31[5] = a2;
      char v33 = a5;
      char v34 = a4;
      uint64_t v29 = v31;
      v31[6] = v12;
      v31[7] = a3;
      return (*(uint64_t (**)(uint64_t, uint64_t, void *))(a6 + 16))(a6, v20, v29);
    }
  }

  else if (v19 == 520421376 && result)
  {
    goto LABEL_22;
  }

  return result;
}

__int128 *dyldtp_decode_window_update(int a1, unint64_t a2, DyldDecodeWindow *this, uint64_t a4)
{
  unint64_t v29 = a2;
  unsigned int v5 = *(_DWORD *)(a4 + 48);
  if (v5 >> 2 == 29392898)
  {
    DyldDecodeWindow::reset(this);
    return 0LL;
  }

  if (HIBYTE(v5) != 31) {
    return 0LL;
  }
  if (a2 == -1LL)
  {
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
      dyldtp_decode_window_update();
    }
    return 0LL;
  }

  uint64_t v8 = (void *)((char *)this + 104);
  if (*((void *)this + 13) == a2)
  {
    char v9 = (char *)this + 40;
  }

  else
  {
    unint64_t v12 = std::__hash_table<std::__hash_value_type<unsigned long long,CF::TypeRef>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CF::TypeRef>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CF::TypeRef>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CF::TypeRef>>>::find<unsigned long long>( this,  &v29);
    if (v12)
    {
      char v9 = (char *)(v12 + 3);
    }

    else
    {
      char v9 = (char *)this + 40;
      if (*((_DWORD *)this + 12) && !dyldtp_complete((uint64_t)this + 40))
      {
        if (*v8 == -1LL) {
          ktrace_remotetime_update_params_cold_1();
        }
        uint64_t v30 = (void *)((char *)this + 104);
        uint64_t v13 = std::__hash_table<std::__hash_value_type<unsigned long long,dyld_trace_point>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,dyld_trace_point>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,dyld_trace_point>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,dyld_trace_point>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>( (uint64_t)this,  (unint64_t *)this + 13,  (uint64_t)&std::piecewise_construct,  &v30);
        __int128 v14 = *(_OWORD *)v9;
        __int128 v15 = *(_OWORD *)((char *)this + 56);
        __int128 v16 = *(_OWORD *)((char *)this + 72);
        *(_OWORD *)(v13 + 72) = *(_OWORD *)((char *)this + 88);
        *(_OWORD *)(v13 + 56) = v16;
        *(_OWORD *)(v13 + 40) = v15;
        *(_OWORD *)(v13 + 24) = v14;
      }

      *(_OWORD *)((char *)this + 72) = 0u;
      *(_OWORD *)((char *)this + 8_Block_object_dispose(va, 8) = 0u;
      *(_OWORD *)char v9 = 0u;
      *(_OWORD *)((char *)this + 56) = 0u;
      *uint64_t v8 = v29;
    }
  }

  uint64_t v17 = std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::find<unsigned long long>( (void *)this + 14,  &v29);
  if (!v17) {
    std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__emplace_unique_key_args<unsigned long long,unsigned long long const&>( (uint64_t)this + 112,  &v29,  &v29);
  }
  unsigned int v18 = *(_DWORD *)(a4 + 48) & 0xFFFFFFFC;
  if (dyldtp_complete((uint64_t)v9))
  {
    *((_OWORD *)v9 + 2) = 0u;
    *((_OWORD *)v9 + 3) = 0u;
    *(_OWORD *)char v9 = 0u;
    *((_OWORD *)v9 + ktrace_session_set_default_event_names_enabled(global_session, 1) = 0u;
  }

  switch((v18 - 520421376) >> 2)
  {
    case 0u:
    case 5u:
    case 0xAu:
      if (!a1) {
        goto LABEL_59;
      }
      unint64_t v19 = *(void *)(a4 + 8);
      if (!HIDWORD(v19) && !*(_DWORD *)(a4 + 20))
      {
        if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
          dyldtp_decode_window_update();
        }
        v9[56] |= 2u;
        unint64_t v19 = *(void *)(a4 + 8);
      }

      *(void *)(v9 + 12) = v19;
      *(void *)(v9 + 20) = *(void *)(a4 + 16);
      *((void *)v9 + 4) = *(void *)(a4 + 24);
      *((void *)v9 + 5) = *(void *)(a4 + 32);
      goto LABEL_36;
    case 1u:
    case 6u:
    case 0xBu:
      if (!a1 || !v17 && !*((_DWORD *)v9 + 2) || (v9[56] & 2) != 0) {
        goto LABEL_59;
      }
      unsigned int v20 = v18 - 4;
      *((void *)v9 + 6) = *(void *)(a4 + 8);
      break;
    case 2u:
    case 7u:
    case 0xCu:
      *(int32x4_t *)(v9 + 12) = vuzp1q_s32(*(int32x4_t *)(a4 + 8), *(int32x4_t *)(a4 + 24));
LABEL_36:
      unsigned int v20 = v18;
      break;
    case 3u:
    case 8u:
    case 0xDu:
      if (!v17 && !*((_DWORD *)v9 + 2)) {
        v9[56] |= 1u;
      }
      unsigned int v20 = v18 - 4;
      *((void *)v9 + 4) = *(void *)(a4 + 8);
      *((int32x2_t *)v9 + 5) = vmovn_s64(*(int64x2_t *)(a4 + 16));
      *((_DWORD *)v9 + 12) = *(void *)(a4 + 32);
      break;
    case 4u:
    case 9u:
    case 0xEu:
      if ((v9[56] & 1) != 0 || !v17 && !*((_DWORD *)v9 + 2)) {
        goto LABEL_59;
      }
      unsigned int v20 = v18 - 8;
      *((_DWORD *)v9 + 13) = *(void *)(a4 + 8);
      break;
    default:
      if (!*((_DWORD *)v9 + 2)) {
        return 0LL;
      }
      goto LABEL_59;
  }

  if ((v9[56] & 1) != 0)
  {
LABEL_59:
    __int128 v10 = 0LL;
    *((_OWORD *)v9 + 2) = 0u;
    *((_OWORD *)v9 + 3) = 0u;
    *(_OWORD *)char v9 = 0u;
    *((_OWORD *)v9 + ktrace_session_set_default_event_names_enabled(global_session, 1) = 0u;
    return v10;
  }

  if (*(_DWORD *)v9)
  {
    if (v20 != *(_DWORD *)v9) {
      goto LABEL_59;
    }
    if (v20 != *((_DWORD *)v9 + 1)) {
      goto LABEL_59;
    }
    int v21 = *((_DWORD *)v9 + 2);
    if (v18 != v20 + 4 * v21) {
      goto LABEL_59;
    }
  }

  else
  {
    *(_DWORD *)char v9 = v20;
    *((_DWORD *)v9 + ktrace_session_set_default_event_names_enabled(global_session, 1) = v18;
    int v21 = *((_DWORD *)v9 + 2);
  }

  *((_DWORD *)v9 + 2) = v21 + 1;
  __int128 v10 = (__int128 *)((char *)this + 40);
  if (v9 != (char *)this + 40)
  {
    if (*((_DWORD *)this + 12) && !dyldtp_complete((uint64_t)this + 40))
    {
      uint64_t v30 = (void *)((char *)this + 104);
      __int128 v22 = std::__hash_table<std::__hash_value_type<unsigned long long,dyld_trace_point>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,dyld_trace_point>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,dyld_trace_point>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,dyld_trace_point>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>( (uint64_t)this,  (unint64_t *)this + 13,  (uint64_t)&std::piecewise_construct,  &v30);
      __int128 v23 = *v10;
      __int128 v24 = *(_OWORD *)((char *)this + 56);
      __int128 v25 = *(_OWORD *)((char *)this + 72);
      *(_OWORD *)(v22 + 72) = *(_OWORD *)((char *)this + 88);
      *(_OWORD *)(v22 + 56) = v25;
      *(_OWORD *)(v22 + 40) = v24;
      *(_OWORD *)(v22 + 24) = v23;
    }

    __int128 v26 = *(_OWORD *)v9;
    __int128 v27 = *((_OWORD *)v9 + 1);
    __int128 v28 = *((_OWORD *)v9 + 3);
    *(_OWORD *)((char *)this + 72) = *((_OWORD *)v9 + 2);
    *(_OWORD *)((char *)this + 8_Block_object_dispose(va, 8) = v28;
    *__int128 v10 = v26;
    *(_OWORD *)((char *)this + 56) = v27;
    *((void *)this + 13) = v29;
    std::__hash_table<std::__hash_value_type<unsigned long long,dyld_trace_point>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,dyld_trace_point>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,dyld_trace_point>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,dyld_trace_point>>>::__erase_unique<unsigned long long>( this,  &v29);
  }

  return v10;
}

void *___Z31ktrace_uuid_map_update_internalP15ktrace_uuid_mapP14ktrace_sessionP12ktrace_pointbbU13block_pointerFv12PrepassOpRefE_block_invoke( uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (!v1) {
    ktrace_remotetime_update_params_cold_1();
  }
  unint64_t v3 = *(int *)(a1 + 64);
  uint64_t v4 = address_space_for_pid(*(ktrace_uuid_map **)(a1 + 32), v3);
  if (v4)
  {
    uint64_t v6 = v4[3];
    unsigned int v5 = (optional_uint64 *)(v4 + 3);
    if (v6)
    {
      unint64_t v7 = optional_uint64::value(v5);
      set_address_space_for_taskid(v1, v7, 0LL);
    }
  }

  set_address_space_for_pid(v1, v3, 0LL);
  double result = ktrace_uuid_map_ensure_address_space_for_tid( *(ktrace_uuid_map **)(a1 + 32),  *(ktrace_session **)(a1 + 40),  *(const void **)(a1 + 48));
  if (result && *(_BYTE *)(a1 + 68))
  {
    uint64_t v9 = *(void *)(a1 + 56);
    if (*(_BYTE *)(a1 + 69)) {
      uint64_t v10 = *(void *)(v9 + 16);
    }
    else {
      uint64_t v10 = *(unsigned int *)(v9 + 12);
    }
    result[5] = v10;
    uint64_t v11 = *(void *)(a1 + 56);
    if (*(_BYTE *)(a1 + 69)) {
      uint64_t v12 = *(void *)(v11 + 24);
    }
    else {
      uint64_t v12 = *(unsigned int *)(v11 + 16);
    }
    result[6] = v12;
  }

  return result;
}

void *ktrace_uuid_map_ensure_address_space_for_tid( ktrace_uuid_map *a1, ktrace_session *a2, const void *a3)
{
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  unint64_t task_uniqueid_for_thread = ktrace_get_task_uniqueid_for_thread((uint64_t)a2, a3);
  if (task_uniqueid_for_thread == -1LL || (unint64_t v7 = address_space_for_taskid(a1, task_uniqueid_for_thread)) == 0LL)
  {
    unsigned int pid_for_thread = ktrace_get_pid_for_thread((uint64_t)a2, a3);
    if ((pid_for_thread & 0x80000000) != 0)
    {
      return 0LL;
    }

    else
    {
      int v9 = pid_for_thread;
      unint64_t v10 = pid_for_thread;
      unint64_t v7 = address_space_for_pid(a1, pid_for_thread);
      if (!v7)
      {
        unint64_t v7 = (void *)ktrace_address_space_create(v9);
        if (v7)
        {
          set_address_space_for_pid((uint64_t)a1, v10, v7);
          if (task_uniqueid_for_thread != -1LL)
          {
            v7[3] = task_uniqueid_for_thread + 1;
            set_address_space_for_taskid((uint64_t)a1, task_uniqueid_for_thread, v7);
          }

          CFRelease(v7);
        }
      }
    }
  }

  return v7;
}

void ___Z31ktrace_uuid_map_update_internalP15ktrace_uuid_mapP14ktrace_sessionP12ktrace_pointbbU13block_pointerFv12PrepassOpRefE_block_invoke_2( uint64_t a1)
{
  uint64_t v46 = *MEMORY[0x1895F89C0];
  CFMutableArrayRef v2 = ktrace_uuid_map_ensure_address_space_for_tid( *(ktrace_uuid_map **)(a1 + 32),  *(ktrace_session **)(a1 + 40),  *(const void **)(a1 + 48));
  if (v2)
  {
    uint64_t v3 = (uint64_t)v2;
    if (uuid_is_null((const unsigned __int8 *)(a1 + 68)))
    {
      if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
        ___Z31ktrace_uuid_map_update_internalP15ktrace_uuid_mapP14ktrace_sessionP12ktrace_pointbbU13block_pointerFv12PrepassOpRefE_block_invoke_2_cold_3();
      }
      return;
    }

    unint64_t v4 = *(void *)(a1 + 88);
    __int128 v39 = 0u;
    __int128 v40 = v4;
    __int128 v37 = *(_OWORD *)(a1 + 68);
    __int128 v38 = 0u;
    *(_DWORD *)((char *)&v38 + 1ktrace_session_set_default_event_names_enabled(global_session, 1) = 5527621;
    LODWORD(v3_Block_object_dispose(va, 8) = 2;
    DWORD2(v3_Block_object_dispose(va, 8) = 1163157343;
    __int128 v41 = *(_OWORD *)(a1 + 96);
    __int128 v42 = 0u;
    uint64_t v5 = ktrace_address_space_symbol_owner_for_address(v3, v4, (__n128)0);
    uint64_t v6 = (uint64_t *)v5;
    if (v5)
    {
      if (*(_DWORD *)(v5 + 16) == 3)
      {
        unint64_t v7 = (optional_uint64 *)(v5 + 56);
        if (v6[7])
        {
          uint64_t v8 = v6[6];
          if ((uint64_t)v40 - v8 <= (unint64_t)optional_uint64::value(v7))
          {
LABEL_36:
            SymbolOwner::~SymbolOwner((SymbolOwner *)&v37);
            return;
          }
        }

        else
        {
          v44[0] = 0LL;
          get_sc_and_slide(*(void *)(a1 + 32), (uint64_t)v6, v44, (optional_uint64 **)&v43);
          uint64_t v10 = v43;
          if ((void)v43 && v44[0])
          {
            uint64_t v11 = **(void **)(v43 + 16);
            uint64_t v12 = *(void *)(*(void *)(v43 + 16) + 8LL);
            uint64_t v13 = v12 - v11;
            if (v12 != v11)
            {
              ktrace_address_space_sort(v43, v9);
              uint64_t v14 = *(void *)(**(void **)(v10 + 16) + 48LL);
              uint64_t v15 = optional_uint64::value((optional_uint64 *)v44);
              uint64_t v16 = *(void *)(**(void **)(v10 + 16) + 32 * (v13 >> 5) - 48);
              uint64_t v17 = optional_uint64::value((optional_uint64 *)v44);
            }
          }

          else if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
          {
            unsigned int v18 = uuid_string(v37, *((uint64_t *)&v37 + 1));
            unint64_t v19 = uuid_string(*v6, v6[1]);
            ___Z31ktrace_uuid_map_update_internalP15ktrace_uuid_mapP14ktrace_sessionP12ktrace_pointbbU13block_pointerFv12PrepassOpRefE_block_invoke_2_cold_2( (uint64_t)v18,  (uint64_t)v19,  (uint64_t)v45);
          }
        }
      }

      __int128 v20 = *(_OWORD *)v6;
      __int128 v43 = v37;
      *(_OWORD *)int v44 = v20;
      if ((void)v20 != (void)v37 || *((void *)&v20 + 1) != *((void *)&v37 + 1))
      {
        uint64_t v35 = SymbolOwner::min_range((SymbolOwner *)v6);
        uint64_t v36 = v22;
        v34[0] = SymbolOwner::min_range((SymbolOwner *)&v37);
        v34[1] = v23;
        if (!Range::intersects((unint64_t *)&v35, v34))
        {
LABEL_27:
          *(void *)&__int128 v43 = SymbolOwner::min_range((SymbolOwner *)v6);
          *((void *)&v43 + ktrace_session_set_default_event_names_enabled(global_session, 1) = v27;
          uint64_t v35 = SymbolOwner::min_range((SymbolOwner *)&v37);
          uint64_t v36 = v28;
          if (Range::intersects((unint64_t *)&v43, (unint64_t *)&v35))
          {
            uint64_t v29 = *(void *)(a1 + 40);
            if (v29 && (uint64_t v30 = *(void *)(v29 + 304)) != 0) {
              char v31 = *(_BYTE *)(v30 + 288);
            }
            else {
              char v31 = 0;
            }
            ktrace_address_space_merge_owner(v3, (SymbolOwner *)v6, (uint64_t)&v37, v31);
            goto LABEL_36;
          }

void sub_186BD2DE0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
}

uint64_t SymbolOwner::min_range(SymbolOwner *this)
{
  uint64_t v1 = (SymbolOwner *)((char *)this + 56);
  if (!*((void *)this + 7))
  {
    if (*((_DWORD *)this + 4) != 1) {
      return *((void *)this + 6);
    }
    uint64_t v3 = (SymbolOwner *)((char *)this + 40);
    if (*((void *)this + 5) && *((void *)this + 4))
    {
      uint64_t v2 = *((void *)this + 6);
      optional_uint64::value((SymbolOwner *)((char *)this + 32));
      optional_uint64::value(v3);
      return v2;
    }

    uint64_t v1 = (SymbolOwner *)((char *)this + 24);
    if (!*((void *)this + 3)) {
      return *((void *)this + 6);
    }
  }

  uint64_t v2 = *((void *)this + 6);
  optional_uint64::value(v1);
  return v2;
}

BOOL Range::intersects(unint64_t *a1, unint64_t *a2)
{
  unint64_t v2 = *a2;
  unint64_t v3 = *a1;
  if (*a1 <= *a2 && v2 - v3 < a1[1]) {
    return 1LL;
  }
  unint64_t v4 = a2[1];
  unint64_t v5 = v2 + v4 - 1;
  BOOL v7 = v5 >= v3;
  unint64_t v6 = v5 - v3;
  if (v7 && v6 < a1[1]) {
    return 1LL;
  }
  BOOL v7 = v3 < v2 || v3 - v2 >= v4;
  if (!v7) {
    return 1LL;
  }
  unint64_t v8 = v3 + a1[1] - 1;
  BOOL v7 = v8 >= v2;
  unint64_t v9 = v8 - v2;
  return v7 && v9 < v4;
}

void ktrace_address_space_delete(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v5 = *(void **)(a1 + 16);
  BOOL v7 = (_OWORD *)*v5;
  unint64_t v6 = (_OWORD *)v5[1];
  if ((_OWORD *)*v5 != v6)
  {
    uint64_t v8 = 0LL;
    while (1)
    {
      __int128 v13 = v7[v8];
      BOOL v9 = (void)v13 == a2 && *((void *)&v13 + 1) == a3;
      if (v9 && *(void *)&v7[v8 + 3] == a4) {
        break;
      }
      v8 += 6LL;
      if (&v7[v8] == v6) {
        return;
      }
    }

    std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,SymbolOwner *,SymbolOwner *,SymbolOwner *,0>( &v7[v8 + 6],  v6,  (uint64_t)&v7[v8]);
    uint64_t v11 = v10;
    uint64_t v12 = v5[1];
    if (v12 != v10)
    {
      do
        SymbolOwner::~SymbolOwner((SymbolOwner *)(v12 - 96));
      while (v12 != v11);
    }

    v5[1] = v11;
  }

void ktrace_address_space_merge_owner(uint64_t a1, SymbolOwner *this, uint64_t a3, char a4)
{
  if (*(void *)this != *(void *)a3 || *((void *)this + 1) != *(void *)(a3 + 8))
  {
    if (a4 && !*(_DWORD *)(a1 + 32))
    {
      if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
        ktrace_address_space_merge_owner();
      }
    }

    else if ((*((_BYTE *)this + 88) & 1) != 0)
    {
      SymbolOwner::operator=((uint64_t)this, (_OWORD *)a3);
    }

    return;
  }

  if ((*((_BYTE *)this + 88) & 1) != 0) {
    char v8 = *(_BYTE *)(a3 + 88) & 1;
  }
  else {
    char v8 = 0;
  }
  *((_BYTE *)this + 8_Block_object_dispose(va, 8) = *((_BYTE *)this + 88) & 0xFE | v8;
  if (!*((void *)this + 10))
  {
    BOOL v9 = *(const void **)(a3 + 80);
    if (v9) {
      SymbolOwner::set_path(this, v9);
    }
  }

  if (!*((void *)this + 8))
  {
    uint64_t v10 = *(void *)(a3 + 64);
    if (v10) {
      *((void *)this + _Block_object_dispose(va, 8) = v10;
    }
  }

  if (!*((void *)this + 9))
  {
    uint64_t v11 = *(void *)(a3 + 72);
    if (v11) {
      *((void *)this + 9) = v11;
    }
  }

  uint64_t v12 = *((void *)this + 7);
  if (!v12)
  {
    uint64_t v12 = *(void *)(a3 + 56);
    if (v12)
    {
      if (*((_DWORD *)this + 4) == *(_DWORD *)(a3 + 16)) {
        *((void *)this + 7) = v12;
      }
      else {
        uint64_t v12 = 0LL;
      }
    }
  }

  int v13 = *(_DWORD *)(a3 + 16);
  if (v13 != 1)
  {
    if (v13 == 2 || v13 == 5)
    {
      int v14 = *((_DWORD *)this + 4);
      if (v14 == 1)
      {
        unint64_t v15 = *((void *)this + 6);
        unint64_t v16 = *(void *)(a3 + 48);
        BOOL v17 = v16 >= v15;
        unint64_t v18 = v16 - v15;
        if (v18 != 0 && v17 && !*(_DWORD *)(a1 + 32) && (v13 == 5 || !strcmp((const char *)(a3 + 24), "__TEXT_EXEC")))
        {
          if (!*((void *)this + 4)) {
            *((void *)this + 4) = v18 + 1;
          }
          if (!*((void *)this + 5)) {
            *((void *)this + 5) = *(void *)(a3 + 56);
          }
        }

        return;
      }

      int v19 = 0;
    }

    else
    {
      int v19 = 0;
      int v14 = *((_DWORD *)this + 4);
    }

    goto LABEL_55;
  }

  int v14 = *((_DWORD *)this + 4);
  if (v14 != 1)
  {
    int v19 = 1;
LABEL_55:
    if ((v14 == 5 || v14 == 2)
      && v19
      && *((void *)this + 6) == *(void *)(a3 + 48)
      && (v14 == 5 || !strcmp((const char *)this + 24, "__TEXT")))
    {
      *((void *)this + 3) = 0LL;
      *((void *)this + 4) = 0LL;
      *((void *)this + 5) = 0LL;
      *((_DWORD *)this + 4) = 1;
      if (!v12) {
        uint64_t v12 = *(void *)(a3 + 24);
      }
      *((void *)this + 3) = v12;
      *((void *)this + 7) = *(void *)(a3 + 56);
    }

    return;
  }

  if (!*((void *)this + 3)) {
    *((void *)this + 3) = *(void *)(a3 + 24);
  }
  if (!*((void *)this + 5)) {
    *((void *)this + 5) = *(void *)(a3 + 40);
  }
  if (!*((void *)this + 4)) {
    *((void *)this + 4) = *(void *)(a3 + 32);
  }
}

void ___Z31ktrace_uuid_map_update_internalP15ktrace_uuid_mapP14ktrace_sessionP12ktrace_pointbbU13block_pointerFv12PrepassOpRefE_block_invoke_57( uint64_t a1)
{
  unint64_t v2 = ktrace_uuid_map_ensure_address_space_for_tid( *(ktrace_uuid_map **)(a1 + 32),  *(ktrace_session **)(a1 + 40),  *(const void **)(a1 + 48));
  if (v2) {
    ktrace_address_space_delete((uint64_t)v2, *(void *)(a1 + 68), *(void *)(a1 + 76), *(void *)(a1 + 88));
  }
}

void ___Z31ktrace_uuid_map_update_internalP15ktrace_uuid_mapP14ktrace_sessionP12ktrace_pointbbU13block_pointerFv12PrepassOpRefE_block_invoke_2_58( uint64_t a1)
{
  unint64_t v2 = ktrace_uuid_map_ensure_address_space_for_tid( *(ktrace_uuid_map **)(a1 + 32),  *(ktrace_session **)(a1 + 40),  *(const void **)(a1 + 48));
  if (v2)
  {
    uint64_t v3 = (uint64_t)v2;
    if (uuid_is_null((const unsigned __int8 *)(a1 + 68)))
    {
      if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
        ___Z31ktrace_uuid_map_update_internalP15ktrace_uuid_mapP14ktrace_sessionP12ktrace_pointbbU13block_pointerFv12PrepassOpRefE_block_invoke_2_58_cold_1();
      }
    }

    else if ((*(_BYTE *)(v3 + 36) & 2) == 0)
    {
      uint64_t v4 = *(void *)(a1 + 88);
      __int128 v7 = 0u;
      __int128 v8 = 0u;
      __int128 v9 = 0u;
      __int128 v10 = 0u;
      __int128 v5 = *(_OWORD *)(a1 + 68);
      __int128 v6 = 0u;
      LODWORD(v6) = 3;
      *(void *)&__int128 v8 = v4;
      ktrace_address_space_append(v3, (uint64_t)&v5);
      SymbolOwner::~SymbolOwner((SymbolOwner *)&v5);
    }
  }

void sub_186BD33B8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t ktrace_uuid_map_update(uint64_t a1, uint64_t a2, uint64_t *a3, int a4)
{
  return ktrace_uuid_map_update_internal(a1, a2, a3, a4, 1, (uint64_t)&__block_literal_global_9);
}

uint64_t __ktrace_uuid_map_update_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t))(a3 + 16))(a3);
}

uint64_t ktrace_visit_uuid(unint64_t a1, uint64_t *a2)
{
  _OWORD v3[3] = 0u;
  memset(v3, 0, 32);
  v3[2] = a1;
  return visit_uuid(v3, *a2, a2[1]);
}

uint64_t visit_uuid(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *MEMORY[0x1895F89C0];
  if (*a1) {
    ktrace_client_get_file_info();
  }
  *(void *)src = a2;
  uint64_t v5 = a3;
  uuid_copy(dst, src);
  return OSLogLookupPathWithUUID();
}

void ktrace_visit_inode(unint64_t a1, uint64_t a2, uint64_t a3)
{
  _OWORD v3[3] = 0u;
  memset(v3, 0, 32);
  v3[2] = a1;
  visit_inode_while_locked((uint64_t)v3, a2, a3);
}

void visit_inode_while_locked(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v32 = *MEMORY[0x1895F89C0];
  __int128 v6 = *(dispatch_queue_s **)(a1 + 48);
  if (v6) {
    dispatch_assert_queue_V2(v6);
  }
  CFStringRef v7 = cfaasprintf("%llx", a2);
  CFStringRef v8 = cfaasprintf("%llx", a3);
  int Value = (const __CFDictionary *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 32), v7);
  if (!Value || !CFDictionaryContainsKey(Value, v8))
  {
    if (!*(void *)a1)
    {
LABEL_13:
      CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0LL, 0LL, MEMORY[0x189605240], MEMORY[0x189605250]);
      fsid_t v22 = (fsid_t)a2;
      if (fsgetpath(cStr, 0x400uLL, &v22, a3) < 0)
      {
        if (Mutable) {
          CFRelease(Mutable);
        }
      }

      else
      {
        CFStringRef v13 = CFStringCreateWithCString(0LL, cStr, 0x8000100u);
        int v14 = v13;
        if (!v13) {
          ktrace_remotetime_update_params_cold_1();
        }
        CFAutorelease(v13);
        CFDictionarySetValue(Mutable, @"Path", v14);
        utf8(v14);
        fsid_t v22 = 0LL;
        unint64_t v23 = &v22;
        uint64_t v24 = 0x2020000000LL;
        CFMutableDictionaryRef v25 = CFDictionaryCreateMutable(0LL, 0LL, MEMORY[0x189605240], MEMORY[0x189605250]);
        unint64_t v15 = (const void *)v23[3];
        if (!v15)
        {
          _os_assert_log();
          uint64_t v17 = _os_crash();
          ktrace_uuid_map_learn_tailspin_symbols_with_chunk_cold_2(v17);
        }

        CFAutorelease(v15);
        uint64_t v18 = 0LL;
        int v19 = &v18;
        uint64_t v20 = 0x2020000000LL;
        char v21 = 1;
        *(void *)cStr = MEMORY[0x1895F87A8];
        uint64_t v27 = 3221225472LL;
        uint64_t v28 = ___ZL22get_summary_from_machoPKc_block_invoke;
        uint64_t v29 = &unk_189F56440;
        uint64_t v30 = &v22;
        char v31 = &v18;
        CSSymbolicatorForeachSymbolicatorWithPath();
        if (*((_BYTE *)v19 + 24)) {
          unint64_t v16 = 0LL;
        }
        else {
          unint64_t v16 = (const void *)v23[3];
        }
        _Block_object_dispose(&v18, 8);
        _Block_object_dispose(&v22, 8);
        if (v16) {
          CFDictionarySetValue(Mutable, @"Images", v16);
        }
        if (Mutable)
        {
          merge_info_while_locked(a1, a2, a3, Mutable);
          CFRelease(Mutable);
        }
      }

      return;
    }

    __int128 v10 = *(const __CFDictionary **)(a1 + 24);
    if (!v10)
    {
      __int128 v10 = CFDictionaryCreateMutable(0LL, 0LL, MEMORY[0x189605240], MEMORY[0x189605250]);
      *(void *)(a1 + 24) = v10;
    }

    uint64_t v11 = CFDictionaryGetValue(v10, v7);
    if (!v11)
    {
      uint64_t v11 = CFSetCreateMutable(0LL, 0LL, MEMORY[0x189605258]);
      CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 24), v7, v11);
      CFRelease(v11);
    }

    if (!CFSetContainsValue((CFSetRef)v11, v8))
    {
      if (*(void *)a1) {
        ktrace_client_get_file_info();
      }
      goto LABEL_13;
    }
  }

void sub_186BD38B4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v9 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void __ktrace_get_live_kernel_map_block_invoke(uint64_t a1)
{
  image_summary = (const void *)make_image_summary();
  if (image_summary) {
    CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 32), image_summary);
  }
}

uint64_t make_image_summary()
{
  uint64_t v0 = MEMORY[0x1895F8858]();
  int v2 = v1;
  uint64_t v4 = v3;
  uint64_t v5 = v0;
  uint64_t v24 = *MEMORY[0x1895F89C0];
  uint64_t CFUUIDBytes = CSSymbolOwnerGetCFUUIDBytes();
  if (!CFUUIDBytes)
  {
    int v19 = (os_log_s *)ktrace_log;
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_FAULT)) {
      make_image_summary(v5, v4, v19);
    }
    return 0LL;
  }

  CFStringRef v7 = (const unsigned __int8 *)CFUUIDBytes;
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0LL, 0LL, MEMORY[0x189605240], MEMORY[0x189605250]);
  if (!Mutable) {
    ktrace_remotetime_update_params_cold_1();
  }
  uint64_t v9 = Mutable;
  uuid_unparse(v7, out);
  CFStringRef v10 = CFStringCreateWithCString(0LL, out, 0x8000100u);
  if (!v10) {
    ktrace_remotetime_update_params_cold_1();
  }
  CFStringRef v11 = v10;
  CFAutorelease(v10);
  CFDictionarySetValue(v9, @"UUID_String", v11);
  if (!v2)
  {
LABEL_7:
    CFMutableArrayRef v15 = CFArrayCreateMutable(0LL, 0LL, MEMORY[0x189605228]);
    if (!v15) {
      ktrace_remotetime_update_params_cold_1();
    }
    CFMutableArrayRef v16 = v15;
    CSSymbolOwnerForeachSegment();
    CFDictionarySetValue(v9, @"Segments", v16);
    CFRelease(v16);
    *(void *)uuid_t out = CSSymbolOwnerGetFlags();
    CFNumberRef v17 = CFNumberCreate(0LL, kCFNumberLongLongType, out);
    if (!v17) {
      ktrace_remotetime_update_params_cold_1();
    }
    CFNumberRef v18 = v17;
    CFAutorelease(v17);
    CFDictionarySetValue(v9, @"Flags", v18);
    CFAutorelease(v9);
    return (uint64_t)v9;
  }

  Path = (const char *)CSSymbolOwnerGetPath();
  CFStringRef v13 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x189604DB0], Path, 0x8000100u);
  if (v13)
  {
    CFStringRef v14 = v13;
    CFAutorelease(v13);
    CFDictionarySetValue(v9, @"Path", v14);
    goto LABEL_7;
  }

  uint64_t image_summary = make_image_summary(v23, Path, v5, v4, out);
  return ktrace_uuid_map_postprocess_file(image_summary);
}

uint64_t ktrace_uuid_map_postprocess_file(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  uint64_t v60 = *MEMORY[0x1895F89C0];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0LL, 0LL, MEMORY[0x189605240], MEMORY[0x189605250]);
  if (!Mutable) {
    ktrace_remotetime_update_params_cold_1();
  }
  CFMutableDictionaryRef v11 = Mutable;
  v41[0] = 0LL;
  v41[1] = v41;
  v41[2] = 0x16012000000LL;
  v41[3] = __Block_byref_object_copy__62;
  v41[4] = __Block_byref_object_dispose__63;
  v41[5] = "%6";
  v41[6] = a3;
  memset(&v41[7], 0, 24);
  v41[10] = Mutable;
  v41[11] = CFArrayCreateMutable(0LL, 0LL, MEMORY[0x189605228]);
  __n128 v26 = (uint64_t *)a5;
  v41[12] = ktrace_postprocessing_get_processing_queue(a5);
  v41[13] = dispatch_group_create();
  memset(v42, 0, sizeof(v42));
  int v43 = 1065353216;
  uint64_t v46 = 0LL;
  uint64_t v44 = 0LL;
  uint64_t v45 = 0LL;
  int v47 = 0;
  uint64_t v50 = 0LL;
  uint64_t v48 = 0LL;
  uint64_t v49 = 0LL;
  v51 &= 0xFCu;
  uint64_t v52 = -1LL;
  memset(v53, 0, sizeof(v53));
  int v54 = 1065353216;
  int v55 = 1;
  memset(v56, 0, sizeof(v56));
  int v57 = 1065353216;
  memset(v58, 0, sizeof(v58));
  int v59 = 1065353216;
  v40[0] = 0LL;
  v40[1] = 0LL;
  char is_64_bit = ktrace_file_is_64_bit(a2);
  uint64_t v36 = 0LL;
  __int128 v37 = &v36;
  uint64_t v38 = 0x2020000000LL;
  uint64_t v13 = MEMORY[0x1895F87A8];
  uint64_t v39 = 0LL;
  v35[0] = MEMORY[0x1895F87A8];
  v35[1] = 3221225472LL;
  v35[2] = __ktrace_uuid_map_postprocess_file_block_invoke;
  v35[3] = &unk_189F55BB8;
  v35[4] = &v36;
  ktrace_file_header_iterate(a2, 0LL, (uint64_t)v35, v14, v15, v16, v17, v18);
  if (!v37[3])
  {
    v37[3] = 64LL;
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_DEBUG)) {
      ktrace_uuid_map_postprocess_file_cold_2();
    }
  }

  v33[0] = v13;
  v33[1] = 3221225472LL;
  v33[2] = __ktrace_uuid_map_postprocess_file_block_invoke_65;
  v33[3] = &unk_189F560B0;
  v33[4] = v41;
  int v34 = a4;
  ktrace_file_iterate(a2, 0LL, (uint64_t)v33, v19, v20, v21, v22, v23);
  uint64_t v24 = calloc(v37[3], 0x18uLL);
  v32[0] = v13;
  v32[1] = 3221225472LL;
  v32[2] = __ktrace_uuid_map_postprocess_file_block_invoke_3;
  v32[3] = &unk_189F560D8;
  v32[4] = v41;
  ktrace_events_single(a1, 117440520, v32);
  v31[0] = v13;
  v31[1] = 3221225472LL;
  int v31[2] = __ktrace_uuid_map_postprocess_file_block_invoke_4;
  v31[3] = &unk_189F560D8;
  void v31[4] = v41;
  ktrace_events_single(a1, 117571592, v31);
  v29[0] = v13;
  v29[1] = 3221225472LL;
  v29[2] = __ktrace_uuid_map_postprocess_file_block_invoke_5;
  v29[3] = &unk_189F56128;
  char v30 = is_64_bit;
  v29[4] = v41;
  v29[5] = a2;
  v29[6] = v40;
  ktrace_events_range(a1, 520421376, 520486912, v29);
  v27[0] = v13;
  v27[1] = 3221225472LL;
  unsigned int v27[2] = __ktrace_uuid_map_postprocess_file_block_invoke_7;
  void v27[3] = &unk_189F56178;
  int v28 = a4;
  v27[4] = v41;
  void v27[5] = a3;
  v27[6] = a2;
  v27[7] = v11;
  v27[8] = v24;
  ktrace_postprocessing_set_completed_handler(v26, v27);
  _Block_object_dispose(&v36, 8);
  _Block_object_dispose(v41, 8);
  std::__hash_table<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>>>::~__hash_table((uint64_t)v58);
  std::__hash_table<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>>>::~__hash_table((uint64_t)v56);
  std::__hash_table<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>>>::~__hash_table((uint64_t)v53);
  std::__hash_table<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>>>::~__hash_table((uint64_t)v42);
  return 0LL;
}

void sub_186BD3F44( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
}

uint64_t __Block_byref_object_copy__62(uint64_t a1, uint64_t a2)
{
  __int128 v4 = *(_OWORD *)(a2 + 48);
  __int128 v5 = *(_OWORD *)(a2 + 64);
  __int128 v6 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 4_Block_object_dispose(va, 8) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  std::__hash_table<std::__hash_value_type<unsigned long long,dyld_trace_point>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,dyld_trace_point>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,dyld_trace_point>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,dyld_trace_point>>>::__hash_table( a1 + 112,  (uint64_t *)(a2 + 112));
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  __int128 v7 = *(_OWORD *)(a2 + 168);
  __int128 v8 = *(_OWORD *)(a2 + 184);
  __int128 v9 = *(_OWORD *)(a2 + 200);
  *(void *)(a1 + 216) = *(void *)(a2 + 216);
  *(_OWORD *)(a1 + 200) = v9;
  *(_OWORD *)(a1 + 184) = v8;
  *(_OWORD *)(a1 + 16_Block_object_dispose(va, 8) = v7;
  std::__hash_table<std::__hash_value_type<unsigned long long,dyld_trace_point>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,dyld_trace_point>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,dyld_trace_point>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,dyld_trace_point>>>::__hash_table( a1 + 224,  (uint64_t *)(a2 + 224));
  *(_DWORD *)(a1 + 264) = *(_DWORD *)(a2 + 264);
  std::__hash_table<std::__hash_value_type<unsigned long long,dyld_trace_point>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,dyld_trace_point>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,dyld_trace_point>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,dyld_trace_point>>>::__hash_table( a1 + 272,  (uint64_t *)(a2 + 272));
  return std::__hash_table<std::__hash_value_type<unsigned long long,dyld_trace_point>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,dyld_trace_point>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,dyld_trace_point>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,dyld_trace_point>>>::__hash_table( a1 + 312,  (uint64_t *)(a2 + 312));
}

uint64_t __Block_byref_object_dispose__63(uint64_t a1)
{
  return std::__hash_table<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>>>::~__hash_table(a1 + 112);
}

void postprocess_data::~postprocess_data(postprocess_data *this)
{
}

BOOL __ktrace_uuid_map_postprocess_file_block_invoke(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = ktrace_machine_create(a2);
  uint64_t v4 = v3;
  if (v3)
  {
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = ktrace_machine_max_cpus(v3);
    ktrace_machine_destroy(v4);
  }

  return v4 == 0;
}

uint64_t __ktrace_uuid_map_postprocess_file_block_invoke_65(uint64_t a1, uint64_t *a2)
{
  int v4 = ktrace_chunk_tag((uint64_t)a2);
  if (v4 == 20990) {
    goto LABEL_7;
  }
  if (v4 == 32770)
  {
    if (ktrace_chunk_version_major((uint64_t)a2) <= 1)
    {
LABEL_7:
      v6[0] = MEMORY[0x1895F87A8];
      v6[1] = 3221225472LL;
      int v6[2] = __ktrace_uuid_map_postprocess_file_block_invoke_2;
      v6[3] = &unk_189F56088;
      v6[4] = *(void *)(a1 + 32);
      int v7 = *(_DWORD *)(a1 + 40);
      ktrace_stackshot_chunk_unwrap(a2, (uint64_t)v6);
    }
  }

  else if (v4 == 36864 && !ktrace_chunk_version_major((uint64_t)a2))
  {
    goto LABEL_7;
  }

  return 1LL;
}

void __ktrace_uuid_map_postprocess_file_block_invoke_2(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a2 + 16;
  if (a2 + 16 <= a3)
  {
    unint64_t v5 = a2;
    char v6 = 0;
    int v51 = 0;
    int v7 = 0;
    __s1 = 0LL;
    __int128 v8 = *(void **)(*(void *)(a1 + 32) + 8LL);
    uint64_t v46 = (uint64_t)(v8 + 34);
    int v47 = v8;
    uint64_t v9 = (uint64_t)(v8 + 39);
    int v10 = *(_DWORD *)(a1 + 40);
    do
    {
      int v11 = *(_DWORD *)v5;
      unsigned int v12 = *(_DWORD *)v5 & 0xFFFFFFF0;
      if (v12 == 32) {
        int v13 = 17;
      }
      else {
        int v13 = *(_DWORD *)v5;
      }
      if (v13 == 19) {
        ++v7;
      }
      if (v13 == 20 && !--v7)
      {
        if ((v10 & 1) == 0 || (v51 == 0) | v6 & 1)
        {
          __s1 = 0LL;
          int v51 = 0;
          char v6 = 0;
        }

        else if (!strcmp(__s1, "watchdogd") || !strcmp(__s1, "notifyd") || !strncmp(__s1, "launchd", 7uLL))
        {
          __s1 = 0LL;
          int v7 = 0;
          int v51 = 0;
          char v6 = 0;
        }

        else
        {
          if (!v47[6])
          {
            v61[0] = 0LL;
            v61[1] = v61;
            v61[2] = 0x3052000000LL;
            v61[3] = __Block_byref_object_copy__154;
            _OWORD v61[4] = __Block_byref_object_dispose__155;
            uint64_t v15 = v47[11];
            uint64_t v14 = v47[12];
            v60[4] = __Block_byref_object_dispose__155;
            v60[5] = v14;
            __int128 v62 = (dispatch_group_s *)v47[13];
            uint64_t v16 = v62;
            v60[0] = 0LL;
            v60[1] = v60;
            v60[2] = 0x3052000000LL;
            v60[3] = __Block_byref_object_copy__154;
            v59[0] = 0LL;
            v59[1] = v59;
            v59[2] = 0x2020000000LL;
            void v59[3] = v15;
            dispatch_queue_global_t global_queue = dispatch_get_global_queue(25LL, 0LL);
            *(void *)&blocuint64_t k = MEMORY[0x1895F87A8];
            *((void *)&block + ktrace_session_set_default_event_names_enabled(global_session, 1) = 3221225472LL;
            __int128 v53 = ___ZL13visit_processP16operating_systemj_block_invoke;
            int v54 = &unk_189F56468;
            int v58 = v51;
            int v55 = v61;
            __int128 v56 = v60;
            int v57 = v59;
            dispatch_group_async(v16, global_queue, &block);
            _Block_object_dispose(v59, 8);
            _Block_object_dispose(v60, 8);
            _Block_object_dispose(v61, 8);
          }

          __s1 = 0LL;
          int v7 = 0;
          int v51 = 0;
          char v6 = 0;
          int v11 = *(_DWORD *)v5;
          unsigned int v12 = *(_DWORD *)v5 & 0xFFFFFFF0;
        }
      }

      if (v12 == 32) {
        int v18 = 17;
      }
      else {
        int v18 = v11;
      }
      if (v18 == 2312)
      {
        unsigned int v22 = *(_DWORD *)(v5 + 4);
        uint64_t v23 = *(void *)(v5 + 8);
        if (v22 != 32 || (v23 & 0x8F) != 0)
        {
          unsigned int v24 = v23 & 0xF;
          BOOL v36 = v22 >= v24;
          unsigned int v25 = v22 - v24;
          if (!v36) {
            unsigned int v25 = 0;
          }
          if (v25 >= 0x20 && !uuid_is_null((const unsigned __int8 *)(v5 + 24)))
          {
            blocuint64_t k = *(_OWORD *)(v5 + 24);
            std::__hash_table<CFUUIDBytes,std::hash<CFUUIDBytes>,std::equal_to<CFUUIDBytes>,std::allocator<CFUUIDBytes>>::__emplace_unique_key_args<CFUUIDBytes,CFUUIDBytes const&>( v46,  &block,  &block);
          }
        }
      }

      else if (v18 == 2309)
      {
        unsigned int v19 = *(_DWORD *)(v5 + 4);
        unsigned int v20 = *(_DWORD *)(v5 + 8) & 0xF;
        BOOL v36 = v19 >= v20;
        unsigned int v21 = v19 - v20;
        if (!v36) {
          unsigned int v21 = 0;
        }
        if (v21 >= 0x78)
        {
          int v51 = *(_DWORD *)(v5 + 100);
          __s1 = (char *)(v5 + 104);
        }
      }

      uint64_t v26 = *(unsigned int *)(v5 + 4);
      unint64_t v27 = v3 + v26;
      if (v3 + v26 <= a3)
      {
        int v28 = *(_DWORD *)v5;
        if (*(_DWORD *)v5 == 17 || (v28 & 0xFFFFFFF0) == 0x20)
        {
          unint64_t v32 = *(void *)(v5 + 8);
          if ((_DWORD)v32)
          {
            if (v28 != 17)
            {
              unsigned int v37 = *(_DWORD *)v5 & 0xF;
              BOOL v36 = v26 >= v37;
              unsigned int v38 = v26 - v37;
LABEL_127:
              int v49 = v10;
              unsigned int v43 = 0;
              char v6 = 1;
              do
              {
                if (*(_DWORD *)v5 == 17)
                {
                  if (SHIDWORD(v32) <= 2310)
                  {
                    switch(HIDWORD(v32))
                    {
                      case 0x30:
                        unsigned int v44 = 20;
                        break;
                      case 0x31:
                        unsigned int v44 = 24;
                        break;
                      case 0x81A:
LABEL_136:
                        unsigned int v44 = 8;
                        break;
                      default:
LABEL_139:
                        unsigned int v44 = 0;
                        break;
                    }
                  }

                  else
                  {
                    switch(HIDWORD(v32))
                    {
                      case 0x907:
                        unsigned int v44 = 4;
                        break;
                      case 0x908:
                      case 0x909:
                        goto LABEL_139;
                      case 0x90A:
                      case 0x90C:
                        goto LABEL_136;
                      case 0x90B:
                      case 0x90D:
                        unsigned int v44 = 16;
                        break;
                      default:
                        if (HIDWORD(v32) != 2369) {
                          goto LABEL_139;
                        }
                        unsigned int v44 = 48;
                        break;
                    }
                  }
                }

                else
                {
                  unsigned int v44 = (*(_DWORD *)(v5 + 4) - (*(_DWORD *)v5 & 0xFu)) / v32;
                }

                uint64_t v45 = (const unsigned __int8 *)(v44 * v43 + v5 + 16 + 4);
                if (uuid_is_null(v45))
                {
                  char v6 = 0;
                }

                else
                {
                  blocuint64_t k = *(_OWORD *)v45;
                  std::__hash_table<CFUUIDBytes,std::hash<CFUUIDBytes>,std::equal_to<CFUUIDBytes>,std::allocator<CFUUIDBytes>>::__emplace_unique_key_args<CFUUIDBytes,CFUUIDBytes const&>( v9,  &block,  &block);
                }

                ++v43;
                unint64_t v32 = *(void *)(v5 + 8);
              }

              while (v43 < v32);
              uint64_t v26 = *(unsigned int *)(v5 + 4);
              unint64_t v27 = v3 + v26;
              int v10 = v49;
              goto LABEL_41;
            }

            if (SHIDWORD(v32) <= 2310)
            {
              switch(HIDWORD(v32))
              {
                case 0x30:
                  unsigned int v33 = 20;
                  break;
                case 0x31:
                  unsigned int v33 = 24;
                  break;
                case 0x81A:
LABEL_87:
                  unsigned int v33 = 8;
                  break;
                default:
                  goto LABEL_41;
              }
            }

            else
            {
              switch(HIDWORD(v32))
              {
                case 0x907:
                  unsigned int v33 = 4;
                  break;
                case 0x908:
                case 0x909:
                  goto LABEL_41;
                case 0x90A:
                case 0x90C:
                  goto LABEL_87;
                case 0x90B:
                case 0x90D:
                  unsigned int v33 = 16;
                  break;
                default:
                  if (HIDWORD(v32) != 2369) {
                    goto LABEL_41;
                  }
                  unsigned int v33 = 48;
                  break;
              }
            }

            if (v26 / v33 >= v32
              && HIDWORD(v32) == 48
              && v26 % v32 < 0x10)
            {
              goto LABEL_127;
            }
          }

          else if (!(_DWORD)v26 && v28 == 17 && (v32 & 0xFFFFFFFF00000000LL) == 0x3000000000LL)
          {
            char v6 = 1;
          }
        }
      }

LABEL_120:
      unint64_t v3 = v27 + 16;
      unint64_t v5 = v27;
    }

    while (v27 + 16 <= a3);
  }

void __ktrace_uuid_map_postprocess_file_block_invoke_3(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v3 | v4) {
    visit_inode_while_locked(*(void *)(*(void *)(a1 + 32) + 8LL) + 48LL, v3, v4);
  }
}

uint64_t __ktrace_uuid_map_postprocess_file_block_invoke_4(uint64_t a1)
{
  return DyldDecodeWindow::reset((DyldDecodeWindow *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 112LL));
}

uint64_t DyldDecodeWindow::reset(DyldDecodeWindow *this)
{
  uint64_t v13 = *MEMORY[0x1895F89C0];
  memset(v3, 0, sizeof(v3));
  int v4 = 1065353216;
  *(void *)&__int128 v6 = 0LL;
  __int128 v5 = 0uLL;
  DWORD2(v6) = 0;
  *(void *)&__int128 v8 = 0LL;
  __int128 v7 = 0uLL;
  BYTE8(v_Block_object_dispose(va, 8) = 0;
  uint64_t v9 = -1LL;
  memset(v10, 0, sizeof(v10));
  int v11 = 1065353216;
  int v12 = 1;
  std::__hash_table<std::__hash_value_type<unsigned long long,dyld_trace_point>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,dyld_trace_point>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,dyld_trace_point>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,dyld_trace_point>>>::__move_assign( (uint64_t)this,  (uint64_t *)v3);
  *(_OWORD *)((char *)this + 56) = v6;
  *(_OWORD *)((char *)this + 72) = v7;
  *(_OWORD *)((char *)this + 8_Block_object_dispose(va, 8) = v8;
  *((void *)this + 13) = v9;
  *(_OWORD *)((char *)this + 40) = v5;
  std::__hash_table<std::__hash_value_type<unsigned long long,dyld_trace_point>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,dyld_trace_point>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,dyld_trace_point>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,dyld_trace_point>>>::__move_assign( (uint64_t)this + 112,  (uint64_t *)v10);
  *((_DWORD *)this + 3_Block_object_dispose(va, 8) = v12;
  std::__hash_table<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>>>::~__hash_table((uint64_t)v10);
  return std::__hash_table<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>>>::~__hash_table((uint64_t)v3);
}

void __ktrace_uuid_map_postprocess_file_block_invoke_5(uint64_t a1, uint64_t a2)
{
  HIDWORD(v3) = *(_DWORD *)(a2 + 48);
  LODWORD(v3) = HIDWORD(v3) - 520421376;
  unsigned int v2 = v3 >> 2;
  if (v2 <= 0xC)
  {
    int v6 = 1 << v2;
    if ((v6 & 0xA5) == 0)
    {
      if ((v6 & 0x1400) == 0) {
        return;
      }
      uint64_t v13 = dyldtp_decode_window_update( *(unsigned __int8 *)(a1 + 56),  *(void *)(a2 + 40),  (DyldDecodeWindow *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 112LL),  a2);
      if (!v13) {
        return;
      }
      uint64_t v14 = (const unsigned __int8 *)v13 + 12;
      uuid_copy(*(unsigned __int8 **)(a1 + 48), v14);
      if (!uuid_is_null(v14))
      {
        uint64_t v15 = *(void *)(*(void *)(a1 + 32) + 8LL) + 272LL;
        __int128 valuePtr = *(_OWORD *)v14;
        std::__hash_table<CFUUIDBytes,std::hash<CFUUIDBytes>,std::equal_to<CFUUIDBytes>,std::allocator<CFUUIDBytes>>::__emplace_unique_key_args<CFUUIDBytes,CFUUIDBytes const&>( v15,  &valuePtr,  &valuePtr);
      }
    }

    __int128 v7 = dyldtp_decode_window_update( *(unsigned __int8 *)(a1 + 56),  *(void *)(a2 + 40),  (DyldDecodeWindow *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 112LL),  a2);
    if (v7)
    {
      __int128 v8 = v7;
      uint64_t v9 = (__int128 *)((char *)v7 + 12);
      if (!uuid_is_null((const unsigned __int8 *)v7 + 12))
      {
        uint64_t v10 = *(void *)(*(void *)(a1 + 32) + 8LL) + 312LL;
        __int128 valuePtr = *v9;
        std::__hash_table<CFUUIDBytes,std::hash<CFUUIDBytes>,std::equal_to<CFUUIDBytes>,std::allocator<CFUUIDBytes>>::__emplace_unique_key_args<CFUUIDBytes,CFUUIDBytes const&>( v10,  &valuePtr,  &valuePtr);
      }

      if (*((_DWORD *)v8 + 12))
      {
        uint64_t v11 = *(void *)(a1 + 32);
        int v12 = *(void **)(v11 + 8);
        if (*((_DWORD *)v8 + 10))
        {
          visit_inode_while_locked((uint64_t)(v12 + 6), *((void *)v8 + 5), *((void *)v8 + 6));
          return;
        }

        v25[0] = MEMORY[0x1895F87A8];
        v25[1] = 3221225472LL;
        uint64_t v26 = __ktrace_uuid_map_postprocess_file_block_invoke_6;
        unint64_t v27 = &unk_189F56100;
        uint64_t v28 = v11;
        int v29 = v8;
        uint64_t v16 = v12[8];
        if (v16) {
          goto LABEL_21;
        }
        if (v12[6]) {
          ktrace_client_get_mounts();
        }
        int v17 = getfsstat(0LL, 0, 2);
        if (v17 >= 1)
        {
          int v18 = v17;
          uint64_t v19 = v17;
          int v20 = 2168 * v17;
          unsigned int v21 = (statfs *)malloc(2168 * v17);
          v12[7] = v21;
          void v12[8] = v19;
          if (!v21) {
            ktrace_remotetime_update_params_cold_1();
          }
          if (getfsstat(v21, v20, 2) != v18) {
            ktrace_remotetime_update_params_cold_1();
          }
          uint64_t v16 = v12[8];
LABEL_21:
          if (v16 >= 1)
          {
            uint64_t v22 = 0LL;
            for (uint64_t i = 0LL; i < v16; ++i)
            {
              uint64_t v24 = v12[7] + v22;
              if ((*(_BYTE *)(v24 + 65) & 0x10) != 0)
              {
                v26((uint64_t)v25, *(void *)(v24 + 48));
                uint64_t v16 = v12[8];
              }

              v22 += 2168LL;
            }
          }
        }
      }
    }
  }

void __ktrace_uuid_map_postprocess_file_block_invoke_6(uint64_t a1, uint64_t a2)
{
}

void __ktrace_uuid_map_postprocess_file_block_invoke_7(uint64_t a1)
{
  uint64_t v32 = *MEMORY[0x1895F89C0];
  if ((*(_BYTE *)(a1 + 72) & 2) != 0)
  {
    uint64_t v2 = *(void *)(a1 + 32);
    unint64_t v3 = *(uint64_t **)(*(void *)(v2 + 8) + 288LL);
    if (v3)
    {
      do
      {
        *(_OWORD *)uint64_t v26 = *((_OWORD *)v3 + 1);
        uuid_copy(dst, (const unsigned __int8 *)v26);
        if (*(void *)(a1 + 40)) {
          ktrace_client_get_dscsym();
        }
        v26[0] = 0LL;
        size_t v30 = 0LL;
        if (!dscsym_mmap_dscsym_for_uuid())
        {
          ktrace_file_append_chunk(*(void *)(a1 + 48), 32769, 0, 0, (UInt8 *)v26[0], v30);
          munmap(v26[0], v30);
        }

        unint64_t v3 = (uint64_t *)*v3;
      }

      while (v3);
      uint64_t v2 = *(void *)(a1 + 32);
    }

    v29[0] = MEMORY[0x1895F87A8];
    v29[1] = 3221225472LL;
    v29[2] = __ktrace_uuid_map_postprocess_file_block_invoke_8;
    v29[3] = &unk_189F56150;
    v29[4] = v2;
    v26[0] = 0LL;
    if (pthread_create(v26, 0LL, (void *(__cdecl *)(void *))_block_trampoline, v29))
    {
      int v4 = *__error();
      ktrace_log_init();
      if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
        __ktrace_uuid_map_postprocess_file_block_invoke_7_cold_5();
      }
      *__error() = v4;
    }

    else if (!pthread_join(v26[0], 0LL))
    {
      goto LABEL_17;
    }

    int v5 = *__error();
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
      __ktrace_uuid_map_postprocess_file_block_invoke_7_cold_4();
    }
    *__error() = v5;
  }

uint64_t __ktrace_uuid_map_postprocess_file_block_invoke_8(uint64_t result)
{
  int v1 = *(void **)(*(void *)(*(void *)(result + 32) + 8LL) + 328LL);
  if (v1)
  {
    uint64_t v2 = result;
    do
    {
      double result = visit_uuid((void *)(*(void *)(*(void *)(v2 + 32) + 8LL) + 48LL), v1[2], v1[3]);
      int v1 = (void *)*v1;
    }

    while (v1);
  }

  return result;
}

uint64_t symbolication_context::symbolication_context( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(_OWORD *)(a1 + 2_Block_object_dispose(va, 8) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(void *)(a1 + 56) = 0LL;
  *(void *)(a1 + std::__hash_table<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>>>::~__hash_table((uint64_t)this + 64) = 0LL;
  *(void *)(a1 + 4_Block_object_dispose(va, 8) = 0LL;
  *(_BYTE *)(a1 + 72) = 0;
  *(void *)(a1 + 8_Block_object_dispose(va, 8) = 0LL;
  *(void *)(a1 + 96) = 0LL;
  *(void *)(a1 + 80) = 0LL;
  ktrace_log_init();
  uint64_t v10 = operator new(0x28uLL);
  *uint64_t v10 = 0u;
  v10[1] = 0u;
  *((_DWORD *)v10 + _Block_object_dispose(va, 8) = 1065353216;
  *(void *)(a1 + 24) = v10;
  *(void *)(a1 + _Block_object_dispose(va, 8) = a3;
  *(void *)(a1 + 4_Block_object_dispose(va, 8) = a4;
  *(void *)(a1 + 80) = a5;
  uint64_t v11 = operator new(0x28uLL);
  *uint64_t v11 = 0u;
  v11[1] = 0u;
  *((_DWORD *)v11 + _Block_object_dispose(va, 8) = 1065353216;
  *(void *)(a1 + 16) = v11;
  *(void *)a1 = a2;
  return a1;
}

void symbolication_context::~symbolication_context(symbolication_context *this)
{
  uint64_t v2 = *((void *)this + 2);
  if (v2)
  {
    unint64_t v3 = (void *)std::__hash_table<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>>>::~__hash_table(v2);
    operator delete(v3);
  }

  uint64_t v4 = *((void *)this + 3);
  if (v4)
  {
    int v5 = (void *)std::__hash_table<std::__hash_value_type<CFUUIDBytes,UUIDContext>,std::__unordered_map_hasher<CFUUIDBytes,std::__hash_value_type<CFUUIDBytes,UUIDContext>,std::hash<CFUUIDBytes>,std::equal_to<CFUUIDBytes>,true>,std::__unordered_map_equal<CFUUIDBytes,std::__hash_value_type<CFUUIDBytes,UUIDContext>,std::equal_to<CFUUIDBytes>,std::hash<CFUUIDBytes>,true>,std::allocator<std::__hash_value_type<CFUUIDBytes,UUIDContext>>>::~__hash_table(v4);
    operator delete(v5);
  }

  uint64_t v6 = *((void *)this + 4);
  if (v6)
  {
    __int128 v7 = (void *)std::__hash_table<std::__hash_value_type<CFUUIDBytes,CF::TypeRef>,std::__unordered_map_hasher<CFUUIDBytes,std::__hash_value_type<CFUUIDBytes,CF::TypeRef>,std::hash<CFUUIDBytes>,std::equal_to<CFUUIDBytes>,true>,std::__unordered_map_equal<CFUUIDBytes,std::__hash_value_type<CFUUIDBytes,CF::TypeRef>,std::equal_to<CFUUIDBytes>,std::hash<CFUUIDBytes>,true>,std::allocator<std::__hash_value_type<CFUUIDBytes,CF::TypeRef>>>::~__hash_table(v6);
    operator delete(v7);
  }

uint64_t ktrace_symbolicate_file(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = operator new(0x68uLL);
  symbolication_context::symbolication_context((uint64_t)v6, a1, a2, a3, 0LL);
  uint64_t v7 = MEMORY[0x1895F87A8];
  v30[0] = MEMORY[0x1895F87A8];
  v30[1] = 3221225472LL;
  v30[2] = __ktrace_symbolicate_file_block_invoke;
  v30[3] = &__block_descriptor_40_e149_B16__0__ktrace_chunk___ktrace_file_Q___q____CFData__QISS__ktrace_chunk__ktrace_chunk_array____ktrace_chunk___ktrace_chunk_QQQqq______ktrace_chunk___8l;
  v30[4] = v6;
  ktrace_file_iterate(a3, 0LL, (uint64_t)v30, v8, v9, v10, v11, v12);
  while (!*((_BYTE *)v6 + 56))
  {
    if (*(void *)(*((void *)v6 + 3) + 24LL)) {
      ktrace_remotetime_update_params_cold_1();
    }
    uint64_t v13 = ktrace_session_create();
    uint64_t v14 = dispatch_semaphore_create(0LL);
    CFIndex v15 = dispatch_queue_create("ktrace_add_symbols_for_some_uuids", 0LL);
    dispatch_queue_global_t global_queue = dispatch_get_global_queue(25LL, 0LL);
    *((_BYTE *)v6 + 56) = 1;
    uint64_t v22 = ktrace_set_ktrace_file((uint64_t)v13, *((void *)v6 + 6), 0, v16, v17, v18, v19, v20);
    if (!(_DWORD)v22)
    {
      v33[0] = v7;
      v33[1] = 3221225472LL;
      v33[2] = ___ZL33ktrace_add_symbols_for_some_uuidsP21symbolication_contexti_block_invoke;
      v33[3] = &__block_descriptor_48_e45_v16__0__trace_point_QQQQQQII_timeval_qi___i_8l;
      v33[4] = v6;
      void v33[5] = v13;
      ktrace_events_all((uint64_t)v13, v33);
      aBlock[0] = v7;
      aBlock[1] = 3221225472LL;
      aBlock[2] = ___ZL33ktrace_add_symbols_for_some_uuidsP21symbolication_contexti_block_invoke_2;
      aBlock[3] = &unk_189F564B0;
      aBlock[4] = v14;
      ktrace_set_completion_handler((uint64_t)v13, aBlock);
      uint64_t v22 = ktrace_start((unint64_t)v13, v15);
      if (!(_DWORD)v22)
      {
        dispatch_semaphore_wait(v14, 0xFFFFFFFFFFFFFFFFLL);
        *((void *)v6 + 1ktrace_session_set_default_event_names_enabled(global_session, 1) = v15;
        uint64_t v23 = dispatch_group_create();
        *((void *)v6 + 12) = v23;
        uint64_t v24 = *(uint64_t ***)(*((void *)v6 + 3) + 16LL);
        if (v24)
        {
          do
          {
            if (((_WORD)v24[24] & 1) == 0)
            {
              unsigned int v25 = (dispatch_group_s *)*((void *)v6 + 12);
              block[0] = v7;
              block[1] = 3221225472LL;
              block[2] = ___ZL33ktrace_add_symbols_for_some_uuidsP21symbolication_contexti_block_invoke_3;
              block[3] = &__block_descriptor_48_e5_v8__0l;
              block[4] = v6;
              void block[5] = v24 + 4;
              dispatch_group_async(v25, global_queue, block);
            }

            uint64_t v24 = (uint64_t **)*v24;
          }

          while (v24);
          uint64_t v23 = (dispatch_group_s *)*((void *)v6 + 12);
        }

        dispatch_group_wait(v23, 0xFFFFFFFFFFFFFFFFLL);
        dispatch_release(*((dispatch_object_t *)v6 + 12));
        *((void *)v6 + 1ktrace_session_set_default_event_names_enabled(global_session, 1) = 0LL;
        *((void *)v6 + 12) = 0LL;
        uint64_t v26 = *((void *)v6 + 3);
        __int128 v27 = *(void **)(v26 + 16);
        if (v27)
        {
          do
          {
            std::__hash_table<CFUUIDBytes,std::hash<CFUUIDBytes>,std::equal_to<CFUUIDBytes>,std::allocator<CFUUIDBytes>>::__emplace_unique_key_args<CFUUIDBytes,CFUUIDBytes const&>( *((void *)v6 + 2),  v27 + 2,  (_OWORD *)v27 + 1);
            __int128 v27 = (void *)*v27;
          }

          while (v27);
          uint64_t v26 = *((void *)v6 + 3);
        }

        std::__hash_table<std::__hash_value_type<CFUUIDBytes,UUIDContext>,std::__unordered_map_hasher<CFUUIDBytes,std::__hash_value_type<CFUUIDBytes,UUIDContext>,std::hash<CFUUIDBytes>,std::equal_to<CFUUIDBytes>,true>,std::__unordered_map_equal<CFUUIDBytes,std::__hash_value_type<CFUUIDBytes,UUIDContext>,std::equal_to<CFUUIDBytes>,std::hash<CFUUIDBytes>,true>,std::allocator<std::__hash_value_type<CFUUIDBytes,UUIDContext>>>::clear(v26);
        uint64_t v22 = 0LL;
        if (!v15) {
          goto LABEL_10;
        }
LABEL_9:
        dispatch_release(v15);
        goto LABEL_10;
      }
    }

    if (v15) {
      goto LABEL_9;
    }
LABEL_10:
    if (v14) {
      dispatch_release(v14);
    }
    if (v13) {
      ktrace_session_destroy((uint64_t)v13);
    }
    if ((_DWORD)v22) {
      goto LABEL_27;
    }
  }

  uint64_t v22 = 0LL;
LABEL_27:
  symbolication_context::~symbolication_context((symbolication_context *)v6);
  operator delete(v28);
  return v22;
}

void sub_186BD5624(_Unwind_Exception *a1)
{
}

uint64_t __ktrace_symbolicate_file_block_invoke(uint64_t a1, uint64_t *a2)
{
  if (ktrace_chunk_tag((uint64_t)a2) == 32771 && !ktrace_chunk_version_major((uint64_t)a2))
  {
    if ((unint64_t)ktrace_chunk_size((uint64_t)a2) > 0x18)
    {
      uint64_t v4 = ktrace_chunk_map_data(a2, 0LL, 0x18uLL);
      if (v4)
      {
        int v5 = v4;
        uint64_t v6 = *(void *)(*(void *)(a1 + 32) + 16LL);
        __int128 v8 = *(_OWORD *)v5;
        std::__hash_table<CFUUIDBytes,std::hash<CFUUIDBytes>,std::equal_to<CFUUIDBytes>,std::allocator<CFUUIDBytes>>::__emplace_unique_key_args<CFUUIDBytes,CFUUIDBytes const&>( v6,  &v8,  &v8);
        ktrace_chunk_unmap_data((uint64_t)a2, (unint64_t)v5, 24LL);
      }

      else if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
      {
        __ktrace_symbolicate_file_block_invoke_cold_2();
      }
    }

    else if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
    {
      __ktrace_symbolicate_file_block_invoke_cold_1();
    }
  }

  return 1LL;
}

uint64_t ktrace_symbolicate_path(uint64_t a1, uint64_t a2, const char *a3)
{
  uint64_t v5 = ktrace_file_open(a3, 1);
  if (!v5) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v6 = (void *)v5;
  uint64_t v7 = ktrace_symbolicate_file(a1, a2, v5);
  ktrace_file_close(v6);
  return v7;
}

double ktrace_symbolicator_create()
{
  uint64_t v0 = operator new(0x58uLL);
  double result = 0.0;
  _OWORD *v0 = 0u;
  v0[1] = 0u;
  *((void *)v0 + 4) = 0LL;
  *((_DWORD *)v0 + 10) = 1065353216;
  v0[3] = 0u;
  v0[4] = 0u;
  *((_DWORD *)v0 + 20) = 1065353216;
  return result;
}

void ktrace_symbolicator_destroy(KtraceSymbolicator *a1)
{
  if (a1)
  {
    KtraceSymbolicator::~KtraceSymbolicator(a1);
    operator delete(v1);
  }

BOOL KtraceSymbolicator::enable_symbolication(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = *a1;
  if (!*a1)
  {
    uint64_t v11 = operator new(0x68uLL);
    symbolication_context::symbolication_context((uint64_t)v11, a2, a3, a5, a4);
    *a1 = (uint64_t)v11;
    v11[10] = 0x7FFFFFFF;
  }

  return v5 == 0;
}

void sub_186BD586C(_Unwind_Exception *a1)
{
}

BOOL ktrace_symbolicator_symbolicate( uint64_t a1, uint64_t a2, _BYTE *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6)
{
  uint64_t v29 = *MEMORY[0x1895F89C0];
  if (a3) {
    *a3 = 0;
  }
  uint64_t v12 = a1 + 8;
  v28[0] = *(__n128 *)a2;
  if (!std::__hash_table<std::__hash_value_type<CFUUIDBytes,UUIDContext>,std::__unordered_map_hasher<CFUUIDBytes,std::__hash_value_type<CFUUIDBytes,UUIDContext>,std::hash<CFUUIDBytes>,std::equal_to<CFUUIDBytes>,true>,std::__unordered_map_equal<CFUUIDBytes,std::__hash_value_type<CFUUIDBytes,UUIDContext>,std::equal_to<CFUUIDBytes>,std::hash<CFUUIDBytes>,true>,std::allocator<std::__hash_value_type<CFUUIDBytes,UUIDContext>>>::find<CFUUIDBytes>( (void *)(a1 + 8),  v28))
  {
    uint64_t v13 = *(FILE ***)a1;
    if (*(void *)a1)
    {
      UUIDContext::UUIDContext((uint64_t)v28, a2);
      uuid = find_or_create_uuid((uint64_t)v13, (__int128 *)v28);
      UUIDContext::~UUIDContext((UUIDContext *)v28);
      if (uuid)
      {
        if (ktrace_make_symbolicator(*(FILE ***)a1, (UUIDContext *)uuid))
        {
          CS::TypeRef::retain(uuid[11], uuid[12], v28);
          __n128 v25 = *(__n128 *)a2;
          uint64_t v26 = &v25;
          CFIndex v15 = (__n128 *)std::__hash_table<std::__hash_value_type<CFUUIDBytes,CS::TypeRef>,std::__unordered_map_hasher<CFUUIDBytes,std::__hash_value_type<CFUUIDBytes,CS::TypeRef>,std::hash<CFUUIDBytes>,std::equal_to<CFUUIDBytes>,true>,std::__unordered_map_equal<CFUUIDBytes,std::__hash_value_type<CFUUIDBytes,CS::TypeRef>,std::equal_to<CFUUIDBytes>,std::hash<CFUUIDBytes>,true>,std::allocator<std::__hash_value_type<CFUUIDBytes,CS::TypeRef>>>::__emplace_unique_key_args<CFUUIDBytes,std::piecewise_construct_t const&,std::tuple<CFUUIDBytes&&>,std::tuple<>>( v12,  &v25,  (uint64_t)&std::piecewise_construct,  (_OWORD **)&v26);
          CS::TypeRef::operator=(v15 + 2, v28);
          CS::TypeRef::~TypeRef((CS::TypeRef *)v28);
        }
      }
    }
  }

  if ((CSIsNull() & 1) != 0) {
    return 0LL;
  }
  uint64_t SymbolOwner = CSSymbolicatorGetSymbolOwner();
  uint64_t v19 = v18;
  v28[0].n128_u64[0] = 0LL;
  __int128 v20 = *(_OWORD *)(a2 + 48);
  unsigned int v27[2] = *(_OWORD *)(a2 + 32);
  void v27[3] = v20;
  v27[4] = *(_OWORD *)(a2 + 64);
  __int128 v21 = *(_OWORD *)(a2 + 16);
  v27[0] = *(_OWORD *)a2;
  v27[1] = v21;
  BOOL v16 = translate_offset(SymbolOwner, v19, v27, v28, (uint64_t)a3);
  if (v16)
  {
    if (a4)
    {
      *a4 = SymbolOwner;
      a4[1] = v19;
    }

    if (a5)
    {
      *a5 = CSSymbolicatorGetSymbolWithAddressAtTime();
      a5[1] = v22;
      if (*(_DWORD *)(a2 + 48) != 1 || !CSIsNull())
      {
LABEL_22:
        if (a6)
        {
          *a6 = CSSymbolicatorGetSourceInfoWithAddressAtTime();
          a6[1] = v23;
        }

        return v16;
      }
    }

    else if (*(_DWORD *)(a2 + 48) != 1)
    {
      goto LABEL_22;
    }

    if (a3 && *(_BYTE *)(a2 + 52))
    {
      *a3 = 1;
      CSSymbolOwnerForeachSegment();
    }

    goto LABEL_22;
  }

  return v16;
}

void sub_186BD5B10( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, char a29)
{
}

void *find_or_create_uuid(uint64_t a1, __int128 *a2)
{
  __int128 v8 = *a2;
  uint64_t v4 = std::__hash_table<std::__hash_value_type<CFUUIDBytes,UUIDContext>,std::__unordered_map_hasher<CFUUIDBytes,std::__hash_value_type<CFUUIDBytes,UUIDContext>,std::hash<CFUUIDBytes>,std::equal_to<CFUUIDBytes>,true>,std::__unordered_map_equal<CFUUIDBytes,std::__hash_value_type<CFUUIDBytes,UUIDContext>,std::equal_to<CFUUIDBytes>,std::hash<CFUUIDBytes>,true>,std::allocator<std::__hash_value_type<CFUUIDBytes,UUIDContext>>>::find<CFUUIDBytes>( *(void **)(a1 + 24),  &v8);
  if (!v4)
  {
    uint64_t v5 = *(void *)(a1 + 24);
    if (*(void *)(v5 + 24) >= *(int *)(a1 + 40))
    {
      double result = 0LL;
      *(_BYTE *)(a1 + 56) = 0;
      return result;
    }

    uint64_t v4 = std::__hash_table<std::__hash_value_type<CFUUIDBytes,UUIDContext>,std::__unordered_map_hasher<CFUUIDBytes,std::__hash_value_type<CFUUIDBytes,UUIDContext>,std::hash<CFUUIDBytes>,std::equal_to<CFUUIDBytes>,true>,std::__unordered_map_equal<CFUUIDBytes,std::__hash_value_type<CFUUIDBytes,UUIDContext>,std::equal_to<CFUUIDBytes>,std::hash<CFUUIDBytes>,true>,std::allocator<std::__hash_value_type<CFUUIDBytes,UUIDContext>>>::__emplace_unique_key_args<CFUUIDBytes,CFUUIDBytes&,UUIDContext>( v5,  &v8,  &v8,  a2);
    if (!v6) {
      ktrace_remotetime_update_params_cold_1();
    }
  }

  return v4 + 4;
}

uint64_t ktrace_make_symbolicator(FILE **a1, UUIDContext *a2)
{
  if (ktrace_find_executable((symbolication_context *)a1, a2)
    && ktrace_find_arch_with_default((symbolication_context *)a1, (uint64_t)a2, 0LL))
  {
    *((void *)a2 + 1ktrace_session_set_default_event_names_enabled(global_session, 1) = CSSymbolicatorCreateWithURLAndArchitecture();
    *((void *)a2 + 12) = v4;
    if (CSIsNull())
    {
      uint64_t v5 = *a1;
      if (*a1)
      {
        char v6 = describe2((uint64_t)a1, (unsigned __int8 *)a2);
        fprintf(v5, "failed to create a symbolicator for %s\n", (const char *)v6);
        ktrace_log_init();
        if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_DEBUG)) {
          ktrace_make_symbolicator((uint64_t)a1, (unsigned __int8 *)a2);
        }
      }
    }

    else
    {
      uint64_t result = CSSymbolicatorGetSymbolOwnerCountAtTime();
      if (result == 1) {
        return result;
      }
      __int128 v8 = *a1;
      if (*a1)
      {
        uint64_t v9 = describe2((uint64_t)a1, (unsigned __int8 *)a2);
        fprintf(v8, "failed to set up symbolicator for %s: expected 1 symbol owner\n", (const char *)v9);
        ktrace_log_init();
        if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_DEBUG)) {
          ktrace_make_symbolicator((uint64_t)a1, (unsigned __int8 *)a2);
        }
      }
    }
  }

  uint64_t result = 0LL;
  *((_WORD *)a2 + 80) |= 1u;
  return result;
}

uint64_t CS::TypeRef::retain@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *a3 = a1;
  a3[1] = a2;
  return CSRetain();
}

void sub_186BD5D3C(_Unwind_Exception *a1)
{
}

__n128 CS::TypeRef::operator=(__n128 *a1, __n128 *a2)
{
  if ((CSIsNull() & 1) == 0) {
    CSRelease();
  }
  __n128 result = *a2;
  *a1 = *a2;
  a2->n128_u64[0] = 0LL;
  a2->n128_u64[1] = 0LL;
  return result;
}

BOOL translate_offset(uint64_t a1, uint64_t a2, __int128 *a3, void *a4, uint64_t a5)
{
  uint64_t v41 = *MEMORY[0x1895F89C0];
  uint64_t v15 = 0LL;
  BOOL v16 = &v15;
  uint64_t v17 = 0x2020000000LL;
  char v18 = 0;
  BOOL v8 = 0LL;
  switch(*((_DWORD *)a3 + 12))
  {
    case 0:
    case 3:
    case 4:
      goto LABEL_8;
    case 1:
      *a4 = *((void *)a3 + 5) + CSSymbolOwnerGetBaseAddress();
      BOOL v8 = 1LL;
      *((_BYTE *)v16 + 24) = 1;
      goto LABEL_8;
    case 2:
      goto LABEL_7;
    case 5:
      *((_DWORD *)a3 + 12) = 2;
      uint64_t v24 = 0LL;
      __n128 v25 = &v24;
      uint64_t v26 = 0x2020000000LL;
      char v27 = 0;
      uint64_t v19 = MEMORY[0x1895F87A8];
      uint64_t v20 = 3221225472LL;
      uint64_t v21 = (uint64_t)___ZL18owner_is_text_exec10_CSTypeRef_block_invoke;
      uint64_t v22 = &unk_189F565C8;
      uint64_t v23 = &v24;
      CSSymbolOwnerForeachSegment();
      int v9 = *((unsigned __int8 *)v25 + 24);
      _Block_object_dispose(&v24, 8);
      if (v9) {
        uint64_t v10 = "__TEXT_EXEC";
      }
      else {
        uint64_t v10 = "__TEXT";
      }
      strlcpy((char *)a3 + 16, v10, 0x11uLL);
LABEL_7:
      uint64_t v19 = 0LL;
      uint64_t v20 = (uint64_t)&v19;
      uint64_t v21 = 0x2020000000LL;
      LOBYTE(v22) = 0;
      uint64_t v28 = MEMORY[0x1895F87A8];
      uint64_t v29 = 3221225472LL;
      size_t v30 = ___ZL16translate_offset10_CSTypeRef18ktrace_uuid_offsetPyPb_block_invoke;
      unsigned int v31 = &unk_189F565A0;
      __int128 v11 = a3[3];
      __int128 v36 = a3[2];
      __int128 v37 = v11;
      __int128 v38 = a3[4];
      __int128 v12 = a3[1];
      __int128 v34 = *a3;
      __int128 v35 = v12;
      uint64_t v32 = &v19;
      unsigned int v33 = &v15;
      uint64_t v39 = a4;
      uint64_t v40 = a5;
      CSSymbolOwnerForeachSegment();
      _Block_object_dispose(&v19, 8);
      BOOL v8 = *((_BYTE *)v16 + 24) != 0;
LABEL_8:
      _Block_object_dispose(&v15, 8);
      return v8;
    default:
      uint64_t v14 = _os_crash();
      ktrace_uuid_map_learn_tailspin_symbols_with_chunk_cold_2(v14);
  }

void sub_186BD5FC0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
}

uint64_t __ktrace_symbolicator_symbolicate_block_invoke(uint64_t a1)
{
  uint64_t result = CSRegionGetRange();
  if (*(void *)(a1 + 32) - result < v3) {
    **(_BYTE **)(a1 + 40) = 0;
  }
  return result;
}

void free_symbol_callback(const __CFAllocator *a1, void *a2)
{
  unint64_t v3 = (const void *)a2[2];
  if (v3) {
    CFRelease(v3);
  }
  free(a2);
}

void ktrace_symboilcator_learn_ariadne_chunk(KtraceSymbolicator *a1, ktrace_chunk *a2)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  char v17 = 0;
  memset(v16, 0, sizeof(v16));
  if (ktrace_chunk_copy_data((uint64_t *)a2, 0LL, v16, 0x20uLL))
  {
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
      ktrace_symboilcator_learn_ariadne_chunk();
    }
    return;
  }

  strcpy(in, "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx");
  char v4 = v16[0];
  if (LOBYTE(v16[0]))
  {
    unint64_t v5 = 0LL;
    char v6 = in;
    do
    {
      do
        int v7 = *v6++;
      while (v7 == 45);
      *(v6 - ktrace_session_set_default_event_names_enabled(global_session, 1) = v4;
      if (v5 > 0x1E) {
        break;
      }
      ++v5;
      char v4 = *((_BYTE *)v16 + v5);
    }

    while (v4);
  }

  if (uuid_parse(in, uu))
  {
    if (!os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
      return;
    }
    goto LABEL_21;
  }

  uint64_t v8 = ktrace_chunk_size_t(a2);
  int v9 = ktrace_chunk_copy_cfdata((uint64_t)a2, 0x20uLL, (void *)(v8 - 32));
  if (!v9)
  {
    if (!os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
      return;
    }
LABEL_21:
    ktrace_symboilcator_learn_ariadne_chunk();
    return;
  }

  uint64_t v10 = (const __CFDictionary *)CFPropertyListCreateWithData(0LL, v9, 0LL, 0LL, 0LL);
  CFRelease(v9);
  if (v10)
  {
    CFMutableDictionaryRef Mutable = CFArrayCreateMutable(0LL, 0LL, &symbol_array_callbacks);
    context[0] = MEMORY[0x1895F87A8];
    context[1] = 3221225472LL;
    context[2] = ___Z39ktrace_symboilcator_learn_ariadne_chunkP18KtraceSymbolicatorP12ktrace_chunk_block_invoke;
    context[3] = &__block_descriptor_40_e41_v24__0____CFString__8____CFDictionary__16l;
    context[4] = Mutable;
    CFDictionaryApplyFunction(v10, (CFDictionaryApplierFunction)CFDictionaryApplierTrampoline, context);
    CFRelease(v10);
    v20.length = CFArrayGetCount(Mutable);
    v20.location = 0LL;
    CFArraySortValues(Mutable, v20, (CFComparatorFunction)cmp_symbol, 0LL);
    __int128 v12 = CFDictionaryCreateMutable(0LL, 0LL, MEMORY[0x189605240], MEMORY[0x189605250]);
    CFDictionarySetValue(v12, @"__TEXT*", Mutable);
    CFRelease(Mutable);
    *(_OWORD *)in = *(_OWORD *)uu;
    uint64_t v13 = v12;
    std::__hash_table<std::__hash_value_type<CFUUIDBytes,CF::TypeRef>,std::__unordered_map_hasher<CFUUIDBytes,std::__hash_value_type<CFUUIDBytes,CF::TypeRef>,std::hash<CFUUIDBytes>,std::equal_to<CFUUIDBytes>,true>,std::__unordered_map_equal<CFUUIDBytes,std::__hash_value_type<CFUUIDBytes,CF::TypeRef>,std::equal_to<CFUUIDBytes>,std::hash<CFUUIDBytes>,true>,std::allocator<std::__hash_value_type<CFUUIDBytes,CF::TypeRef>>>::__emplace_unique_key_args<CFUUIDBytes,CFUUIDBytes,CF::TypeRef>( (uint64_t)a1 + 48,  in,  in,  &v13);
    CF::TypeRef::~TypeRef((const void **)&v13);
    return;
  }

  if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
    goto LABEL_21;
  }
}

void sub_186BD6340( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
}

void ___Z39ktrace_symboilcator_learn_ariadne_chunkP18KtraceSymbolicatorP12ktrace_chunk_block_invoke( uint64_t a1, const __CFString *a2, const __CFDictionary *a3)
{
  unint64_t v5 = utf8(a2);
  int v6 = sscanf(v5, "%lld", &v11);
  int Value = CFDictionaryGetValue(a3, @"Name");
  if (Value)
  {
    uint64_t v8 = Value;
    CFTypeID v9 = CFGetTypeID(Value);
    if (v9 == CFStringGetTypeID())
    {
      if (v6 == 1)
      {
        uint64_t v10 = malloc(0x18uLL);
        _OWORD v10[2] = v8;
        CFRetain(v8);
        *uint64_t v10 = v11;
        v10[1] = 1LL;
        CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 32), v10);
      }
    }

    else
    {
      ktrace_log_init();
      if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
        ktrace_uuid_map_learn_tailspin_symbols_with_chunk_cold_6();
      }
    }
  }

uint64_t cmp_symbol(void *a1, void *a2, void *a3)
{
  if (*a1 < *a2) {
    return -1LL;
  }
  else {
    return *a1 != *a2;
  }
}

void ktrace_symboilcator_learn_tailspin_chunk(KtraceSymbolicator *a1, ktrace_chunk *a2)
{
  uint64_t v24 = *MEMORY[0x1895F89C0];
  if (ktrace_chunk_tag((uint64_t)a2) == 36870 && !ktrace_chunk_version_major((uint64_t)a2))
  {
    char v4 = (const __CFDictionary *)ktrace_chunk_copy_plist((uint64_t)a2);
    if (v4)
    {
      unint64_t v5 = v4;
      CFAutorelease(v4);
      int Value = (const __CFString *)CFDictionaryGetValue(v5, @"UUID_String");
      int v7 = Value;
      if (Value)
      {
        CFTypeID v8 = CFGetTypeID(Value);
        if (v8 != CFStringGetTypeID())
        {
          ktrace_log_init();
          if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
            ktrace_uuid_map_learn_tailspin_symbols_with_chunk_cold_6();
          }
          int v7 = 0LL;
        }
      }

      CFTypeID v9 = (const __CFBoolean *)CFDictionaryGetValue(v5, @"TEXT_EXEC");
      uint64_t v10 = v9;
      if (v9)
      {
        CFTypeID v11 = CFGetTypeID(v9);
        if (v11 != CFBooleanGetTypeID())
        {
          ktrace_log_init();
          if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
            ktrace_uuid_map_learn_tailspin_symbols_with_chunk_cold_5();
          }
          uint64_t v10 = 0LL;
        }
      }

      __int128 v12 = (const __CFDictionary *)CFDictionaryGetValue(v5, @"Symbols");
      uint64_t v13 = v12;
      if (v12)
      {
        CFTypeID v14 = CFGetTypeID(v12);
        if (v14 != CFDictionaryGetTypeID())
        {
          ktrace_log_init();
          if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
            ktrace_uuid_map_learn_tailspin_process_info_with_chunk_cold_5();
          }
          uint64_t v13 = 0LL;
        }
      }

      memset(uu, 0, 16);
      uint64_t v15 = utf8(v7);
      int v16 = uuid_parse(v15, uu);
      if (v13 && v10 && v7 && !v16)
      {
        CFMutableDictionaryRef Mutable = CFArrayCreateMutable(0LL, 0LL, &symbol_array_callbacks);
        context[0] = MEMORY[0x1895F87A8];
        context[1] = 3221225472LL;
        context[2] = ___Z40ktrace_symboilcator_learn_tailspin_chunkP18KtraceSymbolicatorP12ktrace_chunk_block_invoke;
        context[3] = &__block_descriptor_40_e41_v24__0____CFString__8____CFDictionary__16l;
        context[4] = Mutable;
        CFDictionaryApplyFunction(v13, (CFDictionaryApplierFunction)CFDictionaryApplierTrampoline, context);
        v25.length = CFArrayGetCount(Mutable);
        v25.location = 0LL;
        CFArraySortValues(Mutable, v25, (CFComparatorFunction)cmp_symbol, 0LL);
        char v18 = CFDictionaryCreateMutable(0LL, 0LL, MEMORY[0x189605240], MEMORY[0x189605250]);
        if (CFBooleanGetValue(v10)) {
          uint64_t v19 = @"__TEXT_EXEC";
        }
        else {
          uint64_t v19 = @"__TEXT";
        }
        CFDictionarySetValue(v18, v19, Mutable);
        CFRelease(Mutable);
        __int128 v21 = *(_OWORD *)uu;
        CFRange v20 = v18;
        std::__hash_table<std::__hash_value_type<CFUUIDBytes,CF::TypeRef>,std::__unordered_map_hasher<CFUUIDBytes,std::__hash_value_type<CFUUIDBytes,CF::TypeRef>,std::hash<CFUUIDBytes>,std::equal_to<CFUUIDBytes>,true>,std::__unordered_map_equal<CFUUIDBytes,std::__hash_value_type<CFUUIDBytes,CF::TypeRef>,std::equal_to<CFUUIDBytes>,std::hash<CFUUIDBytes>,true>,std::allocator<std::__hash_value_type<CFUUIDBytes,CF::TypeRef>>>::__emplace_unique_key_args<CFUUIDBytes,CFUUIDBytes,CF::TypeRef>( (uint64_t)a1 + 48,  &v21,  &v21,  &v20);
        CF::TypeRef::~TypeRef((const void **)&v20);
      }

      else if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
      {
        ktrace_symboilcator_learn_tailspin_chunk();
      }
    }

    else if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
    {
      ktrace_uuid_map_learn_tailspin_symbols_with_chunk_cold_1();
    }
  }

void sub_186BD6778(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void ___Z40ktrace_symboilcator_learn_tailspin_chunkP18KtraceSymbolicatorP12ktrace_chunk_block_invoke( uint64_t a1, const __CFString *a2, const __CFDictionary *a3)
{
  unint64_t v5 = utf8(a2);
  int v6 = sscanf(v5, "%lld", &v14);
  int Value = CFDictionaryGetValue(a3, @"Name");
  CFTypeID v8 = Value;
  if (Value)
  {
    CFTypeID v9 = CFGetTypeID(Value);
    if (v9 != CFStringGetTypeID())
    {
      ktrace_log_init();
      if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
        ktrace_uuid_map_learn_tailspin_symbols_with_chunk_cold_6();
      }
      CFTypeID v8 = 0LL;
    }
  }

  uint64_t v10 = (const __CFNumber *)CFDictionaryGetValue(a3, @"Length");
  if (v10)
  {
    CFTypeID v11 = v10;
    CFTypeID v12 = CFGetTypeID(v10);
    if (v12 == CFNumberGetTypeID())
    {
      if (v6 == 1 && v8)
      {
        uint64_t v13 = malloc(0x18uLL);
        v13[2] = v8;
        CFRetain(v8);
        *uint64_t v13 = v14;
        uint64_t valuePtr = 0LL;
        if (!CFNumberGetValue(v11, kCFNumberLongLongType, &valuePtr)) {
          ktrace_remotetime_update_params_cold_1();
        }
        v13[1] = valuePtr;
        CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 32), v13);
      }
    }

    else
    {
      ktrace_log_init();
      if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
        ktrace_uuid_map_learn_tailspin_process_info_with_chunk_cold_6();
      }
    }
  }

CFDataRef ktrace_copy_cs_signature_data(uint64_t *a1)
{
  uint64_t v8 = *MEMORY[0x1895F89C0];
  int v3 = ktrace_chunk_copy_data(a1, 0LL, &v5, 0x18uLL);
  CFDataRef result = 0LL;
  if (!v3)
  {
    unint64_t v4 = v7 + (unint64_t)v6;
    return 0LL;
  }

  return result;
}

uint64_t ktrace_copy_symbolicator_from_chunk(uint64_t *a1, _OWORD *a2)
{
  uint64_t v13 = *MEMORY[0x1895F89C0];
  if ((unint64_t)ktrace_chunk_size((uint64_t)a1) <= 0x18)
  {
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
      __ktrace_symbolicate_file_block_invoke_cold_1();
    }
    return 0LL;
  }

  if (ktrace_chunk_copy_data(a1, 0LL, &v10, 0x18uLL))
  {
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
      ktrace_copy_symbolicator_from_chunk_cold_6();
    }
    return 0LL;
  }

  unint64_t v4 = v12 + (unint64_t)v11;
  if (v4 > ktrace_chunk_size((uint64_t)a1))
  {
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
      __ktrace_symbolicate_file_block_invoke_cold_1();
    }
    return 0LL;
  }

  uint64_t v5 = (void *)ktrace_chunk_size((uint64_t)a1);
  CFDataRef v6 = ktrace_chunk_copy_cfdata((uint64_t)a1, 0LL, v5);
  if (!v6)
  {
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
      __ktrace_symbolicate_file_block_invoke_cold_2();
    }
    return 0LL;
  }

  CFDataRef v7 = v6;
  if (!-[__CFData subdataWithRange:](v6, "subdataWithRange:", v11, v12)) {
    ktrace_remotetime_update_params_cold_1();
  }
  uint64_t v8 = CSSymbolicatorCreateWithSignature();

  if (CSIsNull() && os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR))
  {
    ktrace_copy_symbolicator_from_chunk_cold_5();
    if (!a2) {
      return v8;
    }
    goto LABEL_17;
  }

  if (a2) {
LABEL_17:
  }
    *a2 = v10;
  return v8;
}

uint64_t ktrace_symbolicator_read_file( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v9[0] = MEMORY[0x1895F87A8];
  v9[1] = 3221225472LL;
  v9[2] = __ktrace_symbolicator_read_file_block_invoke;
  v9[3] = &__block_descriptor_40_e149_B16__0__ktrace_chunk___ktrace_file_Q___q____CFData__QISS__ktrace_chunk__ktrace_chunk_array____ktrace_chunk___ktrace_chunk_QQQqq______ktrace_chunk___8l;
  v9[4] = a1;
  return ktrace_file_iterate(a2, 0LL, (uint64_t)v9, a4, a5, a6, a7, a8);
}

uint64_t __ktrace_symbolicator_read_file_block_invoke(uint64_t a1, ktrace_chunk *a2)
{
  uint64_t v4 = ktrace_copy_symbolicator_from_chunk((uint64_t *)a2, &v10);
  uint64_t v6 = v5;
  if ((CSIsNull() & 1) == 0)
  {
    uint64_t v7 = *(void *)(a1 + 32) + 8LL;
    *(void *)&__int128 v9 = v4;
    *((void *)&v9 + ktrace_session_set_default_event_names_enabled(global_session, 1) = v6;
    std::__hash_table<std::__hash_value_type<CFUUIDBytes,CS::TypeRef>,std::__unordered_map_hasher<CFUUIDBytes,std::__hash_value_type<CFUUIDBytes,CS::TypeRef>,std::hash<CFUUIDBytes>,std::equal_to<CFUUIDBytes>,true>,std::__unordered_map_equal<CFUUIDBytes,std::__hash_value_type<CFUUIDBytes,CS::TypeRef>,std::equal_to<CFUUIDBytes>,std::hash<CFUUIDBytes>,true>,std::allocator<std::__hash_value_type<CFUUIDBytes,CS::TypeRef>>>::__emplace_unique_key_args<CFUUIDBytes,CFUUIDBytes&,CS::TypeRef>( v7,  &v10,  &v10,  &v9);
    CS::TypeRef::~TypeRef((CS::TypeRef *)&v9);
  }

  return 1LL;
}

void sub_186BD6C90( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

UInt8 *ktrace_uuid_offset_get_description_internal(uint64_t a1, unsigned __int8 *uu, char *a3)
{
  uint64_t v28 = *MEMORY[0x1895F89C0];
  if (!*((_DWORD *)uu + 12)) {
    return 0LL;
  }
  uuid_unparse(uu, out);
  uint64_t v21 = 0LL;
  uint64_t v22 = &v21;
  uint64_t v23 = 0x2020000000LL;
  uint64_t v24 = 0LL;
  uint64_t v6 = (const __CFString *)*((void *)uu + 9);
  if (!v6)
  {
    if (!a1)
    {
      unsigned int v12 = &v21;
      goto LABEL_10;
    }

void sub_186BD6ECC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
}

void ktrace_uuid_map_iterate_associated_paths( uint64_t a1, __int128 *a2, void (**a3)(void, void))
{
  if (a1)
  {
    __int128 v11 = *a2;
    uint64_t v4 = *(void *)(a1 + 216);
    unsigned int v12 = &v11;
    uint64_t v5 = std::__hash_table<std::__hash_value_type<CFUUIDBytes,CF::TypeRef>,std::__unordered_map_hasher<CFUUIDBytes,std::__hash_value_type<CFUUIDBytes,CF::TypeRef>,std::hash<CFUUIDBytes>,std::equal_to<CFUUIDBytes>,true>,std::__unordered_map_equal<CFUUIDBytes,std::__hash_value_type<CFUUIDBytes,CF::TypeRef>,std::equal_to<CFUUIDBytes>,std::hash<CFUUIDBytes>,true>,std::allocator<std::__hash_value_type<CFUUIDBytes,CF::TypeRef>>>::__emplace_unique_key_args<CFUUIDBytes,std::piecewise_construct_t const&,std::tuple<CFUUIDBytes const&>,std::tuple<>>( v4,  &v11,  (uint64_t)&std::piecewise_construct,  &v12);
    uint64_t v6 = (const void *)v5[4];
    if (v6)
    {
      CFTypeID v7 = CFGetTypeID(v6);
      CFTypeID TypeID = CFSetGetTypeID();
      __int128 v9 = (const __CFSet *)v5[4];
      if (v7 == TypeID)
      {
        CFSetApplyFunction(v9, (CFSetApplierFunction)CFSetApplierTrampoline, a3);
      }

      else
      {
        CFTypeID v10 = CFGetTypeID(v9);
        if (v10 != CFStringGetTypeID()) {
          ktrace_remotetime_update_params_cold_1();
        }
        a3[2](a3, v5[4]);
      }
    }
  }

char *___Z43ktrace_uuid_offset_get_description_internalP15ktrace_uuid_map18ktrace_uuid_offsetPKc_block_invoke( char *result, const __CFString *a2)
{
  if (!*(void *)(*(void *)(*((void *)result + 4) + 8LL) + 24LL))
  {
    uint64_t v2 = result;
    int v3 = utf8(a2);
    CFDataRef result = basename_r(v3, *((char **)v2 + 5));
    *(void *)(*(void *)(*((void *)v2 + 4) + 8LL) + 24LL) = result;
  }

  return result;
}

UInt8 *ktrace_uuid_offset_get_description(uint64_t a1, _OWORD *a2)
{
  uint64_t v6 = *MEMORY[0x1895F89C0];
  __int128 v2 = a2[3];
  int v5[2] = a2[2];
  void v5[3] = v2;
  void v5[4] = a2[4];
  __int128 v3 = a2[1];
  v5[0] = *a2;
  v5[1] = v3;
  return ktrace_uuid_offset_get_description_internal(a1, (unsigned __int8 *)v5, 0LL);
}

UInt8 *ktrace_symbolicator_get_description(uint64_t a1, uint64_t a2, __int128 *a3)
{
  uint64_t v44 = *MEMORY[0x1895F89C0];
  v36[0] = 0LL;
  v36[1] = 0LL;
  v35[0] = 0LL;
  v35[1] = 0LL;
  v34[0] = 0LL;
  v34[1] = 0LL;
  __int128 v6 = a3[3];
  CFTypeRef v43[2] = a3[2];
  v43[3] = v6;
  v43[4] = a3[4];
  __int128 v7 = a3[1];
  v43[0] = *a3;
  v43[1] = v7;
  ktrace_symbolicator_symbolicate(a2, (uint64_t)v43, &v37, v34, v35, v36);
  if ((CSIsNull() & 1) != 0)
  {
    if (v37) {
      return 0LL;
    }
    __int128 value = *a3;
    CFTypeID v10 = std::__hash_table<std::__hash_value_type<CFUUIDBytes,UUIDContext>,std::__unordered_map_hasher<CFUUIDBytes,std::__hash_value_type<CFUUIDBytes,UUIDContext>,std::hash<CFUUIDBytes>,std::equal_to<CFUUIDBytes>,true>,std::__unordered_map_equal<CFUUIDBytes,std::__hash_value_type<CFUUIDBytes,UUIDContext>,std::equal_to<CFUUIDBytes>,std::hash<CFUUIDBytes>,true>,std::allocator<std::__hash_value_type<CFUUIDBytes,UUIDContext>>>::find<CFUUIDBytes>( (void *)(a2 + 48),  &value);
    if (!v10) {
      goto LABEL_34;
    }
    __int128 v11 = (const __CFDictionary *)v10[4];
    int v12 = *((_DWORD *)a3 + 12);
    switch(v12)
    {
      case 1:
        uint64_t v14 = @"__TEXT";
        break;
      case 5:
        uint64_t v14 = @"__TEXT*";
        break;
      case 2:
        CFStringRef v13 = CFStringCreateWithCString(0LL, (const char *)a3 + 16, 0x8000100u);
        if (!v13) {
          ktrace_remotetime_update_params_cold_1();
        }
        uint64_t v14 = v13;
        CFAutorelease(v13);
        break;
      default:
        goto LABEL_19;
    }

    uint64_t v15 = (const __CFArray *)CFDictionaryGetValue(v11, v14);
    if (v15)
    {
      int v16 = v15;
      CFTypeID v17 = CFGetTypeID(v15);
      if (v17 == CFArrayGetTypeID()) {
        goto LABEL_21;
      }
      ktrace_log_init();
      if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
        __ktrace_uuid_map_learn_ariadne_process_dict_with_chunk_block_invoke_cold_11();
      }
    }

CFStringRef cfstring(const char *cStr)
{
  CFStringRef v1 = CFStringCreateWithCString(0LL, cStr, 0x8000100u);
  if (!v1) {
    ktrace_remotetime_update_params_cold_1();
  }
  CFStringRef v2 = v1;
  CFAutorelease(v1);
  return v2;
}

uint64_t ktrace_uuid_map_create_cssymbolicator_for_task( ktrace_uuid_map *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (!a1) {
    return 0LL;
  }
  uint64_t v8 = (symbolication_context *)operator new(0x68uLL);
  symbolication_context::symbolication_context((uint64_t)v8, a2, a3, 0LL, (uint64_t)a1);
  int v9 = address_space_for_taskid(a1, a4);
  if (v9) {
    uint64_t cssymbolicator = ktrace_address_space_create_cssymbolicator((uint64_t)v8, (uint64_t)v9);
  }
  else {
    uint64_t cssymbolicator = 0LL;
  }
  symbolication_context::~symbolication_context(v8);
  operator delete(v11);
  return cssymbolicator;
}

void sub_186BD7460(_Unwind_Exception *a1)
{
}

uint64_t ktrace_address_space_create_cssymbolicator(uint64_t a1, uint64_t a2)
{
  CFStringRef v2 = *(void **)(a2 + 16);
  if (!v2) {
    return 0LL;
  }
  uint64_t v52 = 0LL;
  __int128 v53 = &v52;
  uint64_t v54 = 0x2020000000LL;
  unint64_t v3 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v2[1] - *v2) >> 5);
  int v55 = v3;
  if (HIDWORD(v3))
  {
    _os_assert_log();
    uint64_t v33 = _os_crash();
    ktrace_uuid_map_learn_tailspin_symbols_with_chunk_cold_2(v33);
  }

  uint64_t v6 = MEMORY[0x1895F87A8];
  uint64_t v7 = *(void *)(a1 + 80);
  v51[0] = MEMORY[0x1895F87A8];
  v51[1] = 3221225472LL;
  v51[2] = ___ZL42ktrace_address_space_create_cssymbolicatorP21symbolication_contextP20ktrace_address_space_block_invoke;
  v51[3] = &unk_189F565F0;
  v51[4] = &v52;
  ktrace_address_space_deep_iterate_symbol_owners(v7, a2, (uint64_t)v51);
  if (!*(_DWORD *)(a1 + 40)) {
    *(_DWORD *)(a1 + 40) = *((_DWORD *)v53 + 6);
  }
  uint64_t v47 = 0LL;
  int v48 = &v47;
  uint64_t v49 = 0x2020000000LL;
  uint64_t v50 = 0LL;
  v46[0] = 0LL;
  v46[1] = v46;
  v46[2] = 0x3812000000LL;
  v46[3] = __Block_byref_object_copy__201;
  v46[4] = __Block_byref_object_dispose__202;
  v46[5] = "";
  v46[6] = 0LL;
  uint64_t v8 = *(void *)(a1 + 80);
  v45[0] = v6;
  v45[1] = 3221225472LL;
  v45[2] = ___ZL42ktrace_address_space_create_cssymbolicatorP21symbolication_contextP20ktrace_address_space_block_invoke_204;
  v45[3] = &unk_189F56618;
  v45[5] = v46;
  v45[6] = a1;
  v45[4] = &v47;
  ktrace_address_space_deep_iterate_symbol_owners(v8, a2, (uint64_t)v45);
  int v9 = calloc(0x40uLL, *((unsigned int *)v53 + 6));
  uint64_t v41 = 0LL;
  __int128 v42 = &v41;
  uint64_t v43 = 0x2020000000LL;
  uint64_t v44 = v9;
  CFTypeID v10 = calloc(0x28uLL, v48[3]);
  uint64_t v37 = 0LL;
  __int128 v38 = &v37;
  uint64_t v39 = 0x2020000000LL;
  __int128 v40 = v10;
  uint64_t v11 = *(void *)(a1 + 80);
  v36[0] = v6;
  v36[1] = 3221225472LL;
  uint64_t v36[2] = ___ZL42ktrace_address_space_create_cssymbolicatorP21symbolication_contextP20ktrace_address_space_block_invoke_2;
  v36[3] = &unk_189F56640;
  v36[4] = &v41;
  v36[5] = &v37;
  v36[6] = v46;
  v36[7] = a1;
  v36[8] = a2;
  ktrace_address_space_deep_iterate_symbol_owners(v11, a2, (uint64_t)v36);
  unint64_t v12 = v42[3] - (void)v9;
  if (v12 >> 38)
  {
    _os_assert_log();
    uint64_t v34 = _os_crash();
    ktrace_uuid_map_learn_tailspin_symbols_with_chunk_cold_2(v34);
  }

  if (0xCCCCCCCCCCCCCCCDLL * ((v38[3] - (uint64_t)v10) >> 3) > v48[3])
  {
    _os_assert_log();
    uint64_t v35 = _os_crash();
    ktrace_uuid_map_learn_tailspin_symbols_with_chunk_cold_2(v35);
  }

  if ((v12 >> 6))
  {
    uint64_t v13 = *(void *)(a1 + 80);
    if (v13 && (*(_BYTE *)(v13 + 288) || *(_BYTE *)(v13 + 289))
      || (uint64_t v14 = *(void *)(a1 + 8)) != 0 && *(_BYTE *)(v14 + 45))
    {
      uint64_t v15 = 0LL;
      unint64_t v16 = 0LL;
      LODWORD(v17) = 0;
      unsigned int v18 = 0;
      uint64_t v19 = (v12 >> 6);
      unint64_t v20 = -1LL;
      while (1)
      {
        uint64_t v21 = (char *)&v9[8 * v15];
        if ((v21[60] & 0x10) != 0) {
          break;
        }
        uint64_t v22 = *((unsigned int *)v21 + 14);
        if ((_DWORD)v22)
        {
          CFIndex v23 = (unint64_t *)v9[8 * v15 + 6];
          do
          {
            unint64_t v25 = *v23;
            v23 += 5;
            unint64_t v24 = v25;
            if (v25 < v20)
            {
              unsigned int v18 = v15;
              unint64_t v20 = v24;
            }

            if (v24 > v16)
            {
              LODWORD(v17) = v15;
              unint64_t v16 = v24;
            }

            --v22;
          }

          while (v22);
        }

        if (++v15 == v19)
        {
          if (HIDWORD(v16)) {
            BOOL v26 = *(_DWORD *)(a2 + 32) == 0;
          }
          else {
            BOOL v26 = 0;
          }
          if (v26) {
            uint64_t v17 = v17;
          }
          else {
            uint64_t v17 = v18;
          }
          char v27 = (char *)&v9[8 * v17];
          int v30 = *((_DWORD *)v27 + 15);
          uint64_t v28 = (int *)(v27 + 60);
          int v29 = v30;
          if ((v30 & 0x40) == 0) {
            *uint64_t v28 = v29 | 0x10;
          }
          break;
        }
      }
    }
  }

  else if (*(void *)a1)
  {
    fwrite("Couldn't find any binary image infos.  Symbolicator will be NULL\n", 0x41uLL, 1uLL, *(FILE **)a1);
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_DEBUG)) {
      ktrace_address_space_create_cssymbolicator();
    }
  }

  uint64_t v31 = CSSymbolicatorCreateWithBinaryImageListCountPidFlagsAndNotification();
  free(v10);
  free(v9);
  _Block_object_dispose(&v37, 8);
  _Block_object_dispose(&v41, 8);
  _Block_object_dispose(v46, 8);
  _Block_object_dispose(&v47, 8);
  _Block_object_dispose(&v52, 8);
  return v31;
}

void sub_186BD7840( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20, uint64_t a21, char a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, char a33)
{
}

uint64_t ktrace_uuid_map_create_cssymbolicator_for_pid(ktrace_uuid_map *a1, uint64_t a2, uint64_t a3, int a4)
{
  if (!a1) {
    return 0LL;
  }
  uint64_t v8 = (symbolication_context *)operator new(0x68uLL);
  symbolication_context::symbolication_context((uint64_t)v8, a2, a3, 0LL, (uint64_t)a1);
  int v9 = address_space_for_pid(a1, a4);
  if (v9) {
    uint64_t cssymbolicator = ktrace_address_space_create_cssymbolicator((uint64_t)v8, (uint64_t)v9);
  }
  else {
    uint64_t cssymbolicator = 0LL;
  }
  symbolication_context::~symbolication_context(v8);
  operator delete(v11);
  return cssymbolicator;
}

void sub_186BD795C(_Unwind_Exception *a1)
{
}

void *ktrace_create_dsym_search_configuration(uint64_t a1)
{
  CFStringRef v2 = calloc(1uLL, 0x30uLL);
  if (!v2) {
    ktrace_remotetime_update_params_cold_1();
  }
  unint64_t v3 = v2;
  if (a1)
  {
    if (*(void *)a1) {
      *CFStringRef v2 = CFArrayCreateMutableCopy(0LL, 0LL, *(CFArrayRef *)a1);
    }
    *((_BYTE *)v3 + 24) = *(_BYTE *)(a1 + 8);
  }

  return v3;
}

void ktrace_dsym_search_configuration_add_dstroot_path(__CFArray **a1, char *cStr)
{
  CFMutableDictionaryRef Mutable = *a1;
  if (!*a1)
  {
    CFMutableDictionaryRef Mutable = CFArrayCreateMutable(0LL, 0LL, MEMORY[0x189605228]);
    *a1 = Mutable;
  }

  CFStringRef v5 = CFStringCreateWithCString(0LL, cStr, 0x8000100u);
  if (!v5) {
    ktrace_remotetime_update_params_cold_1();
  }
  CFStringRef v6 = v5;
  CFAutorelease(v5);
  CFArrayAppendValue(Mutable, v6);
}

void ktrace_dsym_search_configuration_add_recursive_search_path(uint64_t a1, char *cStr)
{
  CFMutableDictionaryRef Mutable = *(__CFArray **)(a1 + 8);
  if (!Mutable)
  {
    CFMutableDictionaryRef Mutable = CFArrayCreateMutable(0LL, 0LL, MEMORY[0x189605228]);
    *(void *)(a1 + _Block_object_dispose((const void *)(v33 - 112), 8) = Mutable;
  }

  CFStringRef v5 = CFStringCreateWithCString(0LL, cStr, 0x8000100u);
  if (!v5) {
    ktrace_remotetime_update_params_cold_1();
  }
  CFStringRef v6 = v5;
  CFAutorelease(v5);
  CFArrayAppendValue(Mutable, v6);
}

uint64_t ktrace_dsym_search_configuration_set_use_debugsymbols_defaults(uint64_t result, char a2)
{
  *(_BYTE *)(result + 24) = a2;
  return result;
}

CFTypeRef ktrace_dsym_search_configuration_set_dsymForUUID(uint64_t a1, CFTypeRef cf)
{
  CFTypeRef result = CFRetain(cf);
  *(void *)(a1 + 16) = cf;
  return result;
}

uint64_t ktrace_dsym_search_configuration_set_assume_system_arch(uint64_t result, char a2)
{
  *(_BYTE *)(result + 25) = a2;
  return result;
}

uint64_t ktrace_dsym_search_configuration_set_allow_arch_unknown(uint64_t result, char a2)
{
  *(_BYTE *)(result + 26) = a2;
  return result;
}

uint64_t ktrace_dsym_search_configuration_set_allow_image_type_unknown(uint64_t result, char a2)
{
  *(_BYTE *)(result + 27) = a2;
  return result;
}

uint64_t ktrace_dsym_search_configuration_set_infer_aout_flag_from_addresses(uint64_t result, char a2)
{
  *(_BYTE *)(result + 45) = a2;
  return result;
}

uint64_t ktrace_dsym_search_configuration_set_infer_dyld_flag_from_filename(uint64_t result, char a2)
{
  *(_BYTE *)(result + 46) = a2;
  return result;
}

size_t ktrace_dsym_search_configuration_set_kernel_text_segment_name(uint64_t a1, const char *a2)
{
  return strlcpy((char *)(a1 + 28), a2, 0x11uLL);
}

void *ktrace_dsym_search_configuration_create_with_plist(const void *a1)
{
  CFTypeID v2 = CFGetTypeID(a1);
  if (v2 == CFDictionaryGetTypeID())
  {
    dsym_search_configuration = ktrace_create_dsym_search_configuration(0LL);
    context[0] = MEMORY[0x1895F87A8];
    context[1] = 3221225472LL;
    context[2] = __ktrace_dsym_search_configuration_create_with_plist_block_invoke;
    context[3] = &__block_descriptor_40_e25_v24__0____CFString__8_v16l;
    context[4] = dsym_search_configuration;
    CFDictionaryApplyFunction((CFDictionaryRef)a1, (CFDictionaryApplierFunction)CFDictionaryApplierTrampoline, context);
  }

  else
  {
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_FAULT)) {
      ktrace_dsym_search_configuration_create_with_plist_cold_1();
    }
    return 0LL;
  }

  return dsym_search_configuration;
}

void __ktrace_dsym_search_configuration_create_with_plist_block_invoke( uint64_t a1, const __CFString *a2, const __CFString *cf)
{
  CFTypeID v6 = CFGetTypeID(cf);
  if (v6 == CFArrayGetTypeID() && CFStringCompare(a2, @"dstroots", 0LL) == kCFCompareEqualTo)
  {
    unint64_t v16 = **(__CFArray ***)(a1 + 32);
    if (!v16)
    {
      **(void **)(a1 + 32) = CFArrayCreateMutable(0LL, 0LL, MEMORY[0x189605228]);
      unint64_t v16 = **(__CFArray ***)(a1 + 32);
    }

    goto LABEL_27;
  }

  CFTypeID v7 = CFGetTypeID(cf);
  if (v7 == CFArrayGetTypeID() && CFStringCompare(a2, @"recursive_search_dirs", 0LL) == kCFCompareEqualTo)
  {
    unint64_t v16 = *(__CFArray **)(*(void *)(a1 + 32) + 8LL);
    if (!v16)
    {
      *(void *)(*(void *)(a1 + 32) + 8LL) = CFArrayCreateMutable(0LL, 0LL, MEMORY[0x189605228]);
      unint64_t v16 = *(__CFArray **)(*(void *)(a1 + 32) + 8LL);
    }

__CFDictionary *ktrace_dsym_search_configuration_copy_plist(uint64_t a1)
{
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0LL, 0LL, MEMORY[0x189605240], MEMORY[0x189605250]);
  if (!Mutable) {
    ktrace_remotetime_update_params_cold_1();
  }
  unint64_t v3 = Mutable;
  if (*(void *)a1) {
    CFDictionarySetValue(Mutable, @"dstroots", *(const void **)a1);
  }
  uint64_t v4 = *(const void **)(a1 + 8);
  if (v4)
  {
    CFDictionarySetValue(v3, @"recursive_search_dirs", v4);
  }

  else
  {
    CFMutableArrayRef v5 = CFArrayCreateMutable(0LL, 0LL, 0LL);
    CFDictionarySetValue(v3, @"recursive_search_dirs", v5);
    CFRelease(v5);
  }

  CFTypeID v6 = *(const void **)(a1 + 16);
  if (v6) {
    CFDictionarySetValue(v3, @"dsymForUUID", v6);
  }
  CFTypeID v7 = (const void *)*MEMORY[0x189604DE8];
  CFTypeID v8 = (const void *)*MEMORY[0x189604DE0];
  if (*(_BYTE *)(a1 + 24)) {
    CFTypeID v9 = (const void *)*MEMORY[0x189604DE8];
  }
  else {
    CFTypeID v9 = (const void *)*MEMORY[0x189604DE0];
  }
  CFDictionarySetValue(v3, @"debugsymbols_defaults", v9);
  if (*(_BYTE *)(a1 + 25)) {
    CFTypeID v10 = v7;
  }
  else {
    CFTypeID v10 = v8;
  }
  CFDictionarySetValue(v3, @"assumeSystemArch", v10);
  if (*(_BYTE *)(a1 + 26)) {
    CFTypeID v11 = v7;
  }
  else {
    CFTypeID v11 = v8;
  }
  CFDictionarySetValue(v3, @"allowArchUnknown", v11);
  if (*(_BYTE *)(a1 + 27)) {
    CFTypeID v12 = v7;
  }
  else {
    CFTypeID v12 = v8;
  }
  CFDictionarySetValue(v3, @"allowImageTypeUnknown", v12);
  if (*(_BYTE *)(a1 + 45)) {
    CFTypeID v13 = v7;
  }
  else {
    CFTypeID v13 = v8;
  }
  CFDictionarySetValue(v3, @"inferAoutFlagFromAddresses", v13);
  if (*(_BYTE *)(a1 + 46)) {
    CFTypeID v14 = v7;
  }
  else {
    CFTypeID v14 = v8;
  }
  CFDictionarySetValue(v3, @"inferDyldFlagFromFilename", v14);
  int v16 = *(unsigned __int8 *)(a1 + 28);
  CFTypeID v15 = (const char *)(a1 + 28);
  if (v16)
  {
    CFStringRef v17 = CFStringCreateWithCString(0LL, v15, 0x8000100u);
    if (!v17) {
      ktrace_remotetime_update_params_cold_1();
    }
    CFStringRef v18 = v17;
    CFAutorelease(v17);
    CFDictionarySetValue(v3, @"kernelTextSegmentName", v18);
  }

  return v3;
}

void ktrace_free_dsym_search_configuration(const void **a1)
{
  if (a1)
  {
    CFTypeID v2 = *a1;
    if (v2) {
      CFRelease(v2);
    }
    unint64_t v3 = a1[1];
    if (v3) {
      CFRelease(v3);
    }
    uint64_t v4 = a1[2];
    if (v4) {
      CFRelease(v4);
    }
    free(a1);
  }

uint64_t ktrace_uuid_map_event_prepass(uint64_t result, uint64_t a2, uint64_t *a3, int a4)
{
  uint64_t v4 = *(void *)(a2 + 632);
  if (v4)
  {
    v5[0] = MEMORY[0x1895F87A8];
    v5[1] = 3221225472LL;
    int v5[2] = __ktrace_uuid_map_event_prepass_block_invoke;
    void v5[3] = &__block_descriptor_40_e25_v24__0_PrepassOpRef_Q___8l;
    void v5[4] = v4;
    return ktrace_uuid_map_update_internal(result, a2, a3, a4, 0, (uint64_t)v5);
  }

  return result;
}

void __ktrace_uuid_map_event_prepass_block_invoke(uint64_t a1, uint64_t a2, void *aBlock)
{
  uint64_t v3 = a2;
  uint64_t v4 = *(uint64_t **)(a1 + 32);
  uint64_t v15 = a2;
  CFMutableArrayRef v5 = _Block_copy(aBlock);
  int v16 = v5;
  CFTypeID v6 = (void *)v4[1];
  unint64_t v7 = v4[2];
  if ((unint64_t)v6 >= v7)
  {
    uint64_t v9 = ((uint64_t)v6 - *v4) >> 4;
    unint64_t v10 = v9 + 1;
    uint64_t v11 = v7 - *v4;
    if (v11 >> 3 > v10) {
      unint64_t v10 = v11 >> 3;
    }
    else {
      unint64_t v12 = v10;
    }
    _OWORD v17[4] = v4 + 2;
    if (v12)
    {
      CFTypeID v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<PrepassOp>>((uint64_t)(v4 + 2), v12);
      uint64_t v3 = v15;
      CFMutableArrayRef v5 = v16;
    }

    else
    {
      CFTypeID v13 = 0LL;
    }

    CFTypeID v14 = &v13[16 * v9];
    v17[0] = v13;
    v17[1] = v14;
    v17[3] = &v13[16 * v12];
    *(void *)CFTypeID v14 = v3;
    *((void *)v14 + ktrace_session_set_default_event_names_enabled(global_session, 1) = v5;
    int v16 = 0LL;
    unint64_t v17[2] = v14 + 16;
    std::vector<PrepassOp>::__swap_out_circular_buffer(v4, v17);
    CFTypeID v8 = (void *)v4[1];
    std::__split_buffer<PrepassOp>::~__split_buffer((uint64_t)v17);
  }

  else
  {
    void *v6 = v3;
    v6[1] = v5;
    int v16 = 0LL;
    CFTypeID v8 = v6 + 2;
    v4[1] = (uint64_t)(v6 + 2);
  }

  v4[1] = (uint64_t)v8;
  PrepassOp::~PrepassOp((PrepassOp *)&v15);
}

void sub_186BD8308(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  std::__split_buffer<PrepassOp>::~__split_buffer((uint64_t)va1);
  PrepassOp::~PrepassOp((PrepassOp *)va);
  _Unwind_Resume(a1);
}

void ktrace_uuid_map_chunk_prepass(uint64_t a1, uint64_t *a2)
{
  CFTypeID v2 = *(uint64_t **)(a1 + 632);
  if (v2)
  {
    int v5 = ktrace_chunk_tag((uint64_t)a2);
    if (v5 != 20990)
    {
      if (v5 == 32770)
      {
      }

      else if (v5 != 36864 || ktrace_chunk_version_major((uint64_t)a2))
      {
        return;
      }
    }

    uint64_t v6 = ktrace_stackshot_chunk_timestamp(a2);
    if (v6 != -1)
    {
      uint64_t v7 = v6;
      aBlock[0] = MEMORY[0x1895F87A8];
      aBlock[1] = 3221225472LL;
      aBlock[2] = __ktrace_uuid_map_chunk_prepass_block_invoke;
      aBlock[3] = &__block_descriptor_48_e5_v8__0l;
      aBlock[4] = a2;
      void aBlock[5] = a1;
      uint64_t v18 = v6;
      CFTypeID v8 = _Block_copy(aBlock);
      uint64_t v19 = (uint64_t)v8;
      unint64_t v9 = v2[2];
      unint64_t v10 = (uint64_t *)v2[1];
      if ((unint64_t)v10 >= v9)
      {
        uint64_t v12 = ((uint64_t)v10 - *v2) >> 4;
        uint64_t v13 = v9 - *v2;
        uint64_t v14 = v13 >> 3;
        else {
          unint64_t v15 = v14;
        }
        _BYTE v21[4] = v2 + 2;
        if (v15) {
          int v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<PrepassOp>>((uint64_t)(v2 + 2), v15);
        }
        else {
          int v16 = 0LL;
        }
        CFStringRef v17 = (uint64_t *)&v16[16 * v12];
        v21[0] = v16;
        v21[1] = v17;
        v21[3] = &v16[16 * v15];
        *CFStringRef v17 = 0LL;
        v17[1] = 0LL;
        *CFStringRef v17 = v18;
        v17[1] = v19;
        uint64_t v19 = 0LL;
        size_t v21[2] = v17 + 2;
        std::vector<PrepassOp>::__swap_out_circular_buffer(v2, v21);
        uint64_t v11 = (void *)v2[1];
        std::__split_buffer<PrepassOp>::~__split_buffer((uint64_t)v21);
      }

      else
      {
        *unint64_t v10 = v7;
        v10[1] = (uint64_t)v8;
        uint64_t v19 = 0LL;
        uint64_t v11 = v10 + 2;
        v2[1] = (uint64_t)(v10 + 2);
      }

      v2[1] = (uint64_t)v11;
      PrepassOp::~PrepassOp((PrepassOp *)&v18);
    }
  }

void sub_186BD84D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  std::__split_buffer<PrepassOp>::~__split_buffer((uint64_t)va1);
  PrepassOp::~PrepassOp((PrepassOp *)va);
  _Unwind_Resume(a1);
}

uint64_t __ktrace_uuid_map_chunk_prepass_block_invoke(uint64_t a1)
{
  v3[0] = MEMORY[0x1895F87A8];
  v3[1] = 3221225472LL;
  _OWORD v3[2] = __ktrace_uuid_map_chunk_prepass_block_invoke_2;
  _OWORD v3[3] = &__block_descriptor_40_e37_v24__0_kcdata_iter___kcdata_item__v_8l;
  CFStringRef v1 = *(uint64_t **)(a1 + 32);
  _OWORD v3[4] = *(void *)(a1 + 40);
  return ktrace_stackshot_chunk_unwrap(v1, (uint64_t)v3);
}

void __ktrace_uuid_map_chunk_prepass_block_invoke_2(uint64_t a1, kcdata_iter a2)
{
}

void *ktrace_prepass_uuid_map_init(uint64_t a1)
{
  if (*(void *)(a1 + 632)) {
    ktrace_remotetime_update_params_cold_1();
  }
  CFTypeRef result = operator new(0x18uLL);
  result[1] = 0LL;
  result[2] = 0LL;
  void *result = 0LL;
  *(void *)(a1 + 632) = result;
  return result;
}

void ktrace_prepass_uuid_map_finish(uint64_t a1)
{
  CFStringRef v1 = *(unint64_t ***)(a1 + 632);
  if (v1)
  {
    uint64_t v3 = v1[1];
    unint64_t v4 = 126 - 2 * __clz(((char *)v3 - (char *)*v1) >> 4);
    if (v3 == *v1) {
      uint64_t v5 = 0LL;
    }
    else {
      uint64_t v5 = v4;
    }
    std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,PrepassOp *,false>(*v1, v3, (uint64_t)&v10, v5, 1);
    uint64_t v7 = *v1;
    uint64_t v6 = v1[1];
    if (v6 != *v1)
    {
      do
      {
        uint64_t v8 = v6 - 2;
        (*(void (**)(void))(*(v6 - 1) + 16))();
        uint64_t v6 = v8;
      }

      while (v8 != v7);
    }

    uint64_t v11 = (void **)v1;
    std::vector<PrepassOp>::__destroy_vector::operator()[abi:ne180100](&v11);
    operator delete(v1);
    *(void *)(a1 + 632) = 0LL;
    uint64_t v9 = *(void *)(a1 + 304);
    if (v9)
    {
      if (!*(_BYTE *)(v9 + 208)) {
        std::__throw_bad_optional_access[abi:ne180100]();
      }
      DyldDecodeWindow::reset((DyldDecodeWindow *)(v9 + 48));
    }
  }

uint64_t ktrace_uuid_map_set_dsc_unslid_base_addresses(uint64_t result, uint64_t a2)
{
  *(void *)(result + 280) = a2;
  return result;
}

CFStringRef ktrace_symbols_buffer_to_text(const __CFData *a1, int a2)
{
  BytePtr = CFDataGetBytePtr(a1);
  unint64_t Length = CFDataGetLength(a1);
  __int128 v27 = xmmword_186C5D3B0;
  uint64_t v28 = 0LL;
  char v29 = 1;
  if (Length >= 0x7FFFFFFF) {
    ktrace_symbols_buffer_to_text_cold_1();
  }
  CFStringRef v4 = 0LL;
  if (flatbuffers::Verifier::VerifyBufferFromStart<FlatbufferSymbols::SymbolsBuffer>( (flatbuffers::Verifier *)&BytePtr,  "SYMB",  0LL))
  {
    if (a2)
    {
      std::string::basic_string[abi:ne180100]<0>(&v16, "\n");
      std::string::basic_string[abi:ne180100]<0>(__p, " ");
      flatbuffers::ToStringVisitor::ToStringVisitor((uint64_t)&v18, &v16, 1, (__int128 *)__p, 1);
      if (v15 < 0) {
        operator delete(__p[0]);
      }
      if ((v17 & 0x80000000) == 0) {
        goto LABEL_13;
      }
      uint64_t v5 = &v16;
    }

    else
    {
      std::string::basic_string[abi:ne180100]<0>(&v12, " ");
      std::string::basic_string[abi:ne180100]<0>(v10, "");
      flatbuffers::ToStringVisitor::ToStringVisitor((uint64_t)&v18, &v12, 1, (__int128 *)v10, 1);
      if (v11 < 0) {
        operator delete(v10[0]);
      }
      if ((v13 & 0x80000000) == 0) {
        goto LABEL_13;
      }
      uint64_t v5 = &v12;
    }

    operator delete(*(void **)v5);
LABEL_13:
    uint64_t v6 = CFDataGetBytePtr(a1);
    flatbuffers::IterateObject( (int *)&v6[*(unsigned int *)v6],  (uint64_t)&FlatbufferSymbols::SymbolsBufferTypeTable(void)::tt,  (uint64_t)&v18);
    if ((v20 & 0x80u) == 0) {
      uint64_t v7 = v19;
    }
    else {
      uint64_t v7 = (void **)v19[0];
    }
    if ((v20 & 0x80u) == 0) {
      CFIndex v8 = v20;
    }
    else {
      CFIndex v8 = (CFIndex)v19[1];
    }
    CFStringRef v4 = CFStringCreateWithBytes(0LL, (const UInt8 *)v7, v8, 0x8000100u, 0);
    uint64_t v18 = &unk_189F56788;
    if (v24 < 0) {
      operator delete(v23);
    }
    if (v22 < 0) {
      operator delete(v21);
    }
  }

  return v4;
}

void sub_186BD8840( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21, void *a22, uint64_t a23, int a24, __int16 a25, char a26, char a27, uint64_t a28, uint64_t a29, int a30, __int16 a31, char a32, char a33, char a34)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

void flatbuffers::ToStringVisitor::~ToStringVisitor(void **this)
{
  *this = &unk_189F56788;
}

{
  *this = &unk_189F56788;
  operator delete(this);
}

CFDataRef ktrace_dumpbuffer_address_space(uint64_t a1, unint64_t a2, uint64_t a3)
{
  if (!a1) {
    return 0LL;
  }
  uint64_t v4 = *(void *)(a1 + 304);
  if (!v4) {
    return 0LL;
  }
  __p = 0LL;
  uint64_t v31 = 0LL;
  uint64_t v32 = 0LL;
  if ((a3 & 2) != 0)
  {
    CFIndex v8 = *(void **)(*(void *)(v4 + 32) + 16LL);
    if (v8)
    {
      uint64_t v9 = 0LL;
      do
      {
        uint64_t v10 = v8[3];
        if (v9 >= v32)
        {
          uint64_t v11 = (v9 - (_BYTE *)__p) >> 3;
          unint64_t v12 = (v32 - (_BYTE *)__p) >> 2;
          if (v12 <= v11 + 1) {
            unint64_t v12 = v11 + 1;
          }
          else {
            unint64_t v13 = v12;
          }
          if (v13) {
            uint64_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v32, v13);
          }
          else {
            uint64_t v14 = 0LL;
          }
          char v15 = &v14[8 * v11];
          *(void *)char v15 = v10;
          uint64_t v9 = v15 + 8;
          char v17 = (char *)__p;
          __int128 v16 = v31;
          if (v31 != __p)
          {
            do
            {
              uint64_t v18 = *((void *)v16 - 1);
              v16 -= 8;
              *((void *)v15 - ktrace_session_set_default_event_names_enabled(global_session, 1) = v18;
              v15 -= 8;
            }

            while (v16 != v17);
            __int128 v16 = (char *)__p;
          }

          __p = v15;
          uint64_t v31 = v9;
          uint64_t v32 = &v14[8 * v13];
          if (v16) {
            operator delete(v16);
          }
        }

        else
        {
          *(void *)uint64_t v9 = v10;
          v9 += 8;
        }

        uint64_t v31 = v9;
        CFIndex v8 = (void *)*v8;
      }

      while (v8);
    }
  }

  else
  {
    uint64_t v6 = address_space_for_taskid((ktrace_uuid_map *)v4, a2);
    if (!v6)
    {
      CFDataRef v7 = 0LL;
      goto LABEL_44;
    }

    uint64_t v19 = (v31 - (_BYTE *)__p) >> 3;
    unint64_t v20 = (v32 - (_BYTE *)__p) >> 2;
    if (v20 <= v19 + 1) {
      unint64_t v20 = v19 + 1;
    }
    else {
      unint64_t v21 = v20;
    }
    if (v21) {
      char v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v32, v21);
    }
    else {
      char v22 = 0LL;
    }
    CFIndex v23 = &v22[8 * v19];
    char v24 = &v22[8 * v21];
    *(void *)CFIndex v23 = v6;
    unint64_t v25 = v23 + 8;
    __int128 v27 = (char *)__p;
    BOOL v26 = v31;
    if (v31 != __p)
    {
      do
      {
        uint64_t v28 = *((void *)v26 - 1);
        v26 -= 8;
        *((void *)v23 - ktrace_session_set_default_event_names_enabled(global_session, 1) = v28;
        v23 -= 8;
      }

      while (v26 != v27);
      BOOL v26 = (char *)__p;
    }

    __p = v23;
    uint64_t v31 = v25;
    uint64_t v32 = v24;
    if (v26) {
      operator delete(v26);
    }
    uint64_t v31 = v25;
  }

  CFDataRef v7 = ktrace_dumpbuffer(a1, v4, (uint64_t **)&__p, a3);
LABEL_44:
  if (__p)
  {
    uint64_t v31 = (char *)__p;
    operator delete(__p);
  }

  return v7;
}

void sub_186BD8B50( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

CFDataRef ktrace_dumpbuffer(uint64_t a1, uint64_t a2, uint64_t **a3, uint64_t a4)
{
  uint64_t v87 = *MEMORY[0x1895F89C0];
  symbolication_context::symbolication_context((uint64_t)v84, 0LL, 0LL, 0LL, a2);
  int v85 = 0x7FFFFFFF;
  uint64_t v69 = 0LL;
  char v70 = &v69;
  uint64_t v71 = 0x9012000000LL;
  v72 = __Block_byref_object_copy__299;
  size_t v73 = __Block_byref_object_dispose__300;
  char v74 = "";
  uint64_t v75 = 0LL;
  char v76 = 0;
  __int128 v77 = xmmword_186C5D0C0;
  __int128 v78 = 0u;
  __int128 v79 = 0u;
  uint64_t v80 = 0LL;
  uint64_t v81 = 1LL;
  __int16 v82 = 256;
  uint64_t v83 = 0LL;
  __int128 v66 = 0u;
  __int128 v67 = 0u;
  int v68 = 1065353216;
  __p = 0LL;
  uint64_t v64 = 0LL;
  kcdata_iter v65 = 0LL;
  CFDataRef v7 = *a3;
  uint64_t v6 = a3[1];
  if (*a3 == v6) {
    goto LABEL_47;
  }
  do
  {
    uint64_t v8 = *v7;
    execname_for_int pid = (const char *)ktrace_get_execname_for_pid(a1, *(_DWORD *)(*v7 + 32));
    uint64_t v10 = execname_for_pid;
    if (execname_for_pid)
    {
      size_t v11 = strlen(execname_for_pid);
      LODWORD(v10) = flatbuffers::FlatBufferBuilder::CreateString((flatbuffers::FlatBufferBuilder *)(v70 + 6), v10, v11);
    }

    context.version = 0LL;
    context.mach_timebase_info info = &context;
    context.retain = (CFAllocatorRetainCallBack)0x3812000000LL;
    context.release = (CFAllocatorReleaseCallBack)__Block_byref_object_copy__302;
    context.copyDescription = (CFAllocatorCopyDescriptionCallBack)__Block_byref_object_dispose__303;
    context.allocate = (CFAllocatorAllocateCallBack)"";
    LODWORD(context.reallocate) = 0;
    v62[0] = MEMORY[0x1895F87A8];
    v62[1] = 3221225472LL;
    v62[2] = ___ZL17ktrace_dumpbufferP14ktrace_sessionP15ktrace_uuid_mapRNSt3__16vectorIP20ktrace_address_spaceNS3_9allocatorIS6_EEEEy_block_invoke;
    v62[3] = &unk_189F56E70;
    v62[4] = &context;
    v62[5] = &v69;
    ktrace_address_space_iterate_symbol_owners(v86, v8, (uint64_t)v62);
    unint64_t v12 = v70;
    unint64_t v13 = (flatbuffers::FlatBufferBuilder *)(v70 + 6);
    flatbuffers::FlatBufferBuilder::NotNested((uint64_t)(v70 + 6));
    *((_BYTE *)v12 + 11_Block_object_dispose((const void *)(v33 - 112), 8) = 1;
    int v14 = *((_DWORD *)v12 + 20);
    int v15 = *((_DWORD *)v12 + 24);
    int v16 = *((_DWORD *)v12 + 22);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>((unint64_t)v13, 6LL, *(int *)(v8 + 32), -1LL);
    if (*(void *)(v8 + 24))
    {
      uint64_t v17 = optional_uint64::value((optional_uint64 *)(v8 + 24));
      flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>((unint64_t)v13, 8LL, v17, -1LL);
    }

    if ((_DWORD)v10) {
      flatbuffers::FlatBufferBuilder::AddOffset<flatbuffers::String>(v13, 4LL, v10);
    }
    unsigned int v18 = *((_DWORD *)context.info + 12);
    if (v18) {
      flatbuffers::FlatBufferBuilder::AddOffset<flatbuffers::String>(v13, 10LL, v18);
    }
    unsigned int v19 = flatbuffers::FlatBufferBuilder::EndTable(v13, v14 - v15 + v16);
    int v20 = ktrace_address_space_buildbuffer( a1,  (uint64_t)v84,  v8,  1,  v19,  (flatbuffers::FlatBufferBuilder *)(v70 + 6),  (uint64_t)&v66,  a4);
    int v21 = v20;
    char v22 = v64;
    if (v64 >= v65)
    {
      char v24 = (char *)__p;
      uint64_t v25 = (v64 - (_BYTE *)__p) >> 2;
      unint64_t v26 = v25 + 1;
      uint64_t v27 = v65 - (_BYTE *)__p;
      if ((v65 - (_BYTE *)__p) >> 1 > v26) {
        unint64_t v26 = v27 >> 1;
      }
      else {
        unint64_t v28 = v26;
      }
      if (v28)
      {
        char v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<flatbuffers::Offset<KernelTraceCatalog::Thread>>>( (uint64_t)&v65,  v28);
        char v24 = (char *)__p;
        char v22 = v64;
      }

      else
      {
        char v29 = 0LL;
      }

      int v30 = &v29[4 * v25];
      *(_DWORD *)int v30 = v21;
      CFIndex v23 = v30 + 4;
      while (v22 != v24)
      {
        int v31 = *((_DWORD *)v22 - 1);
        v22 -= 4;
        *((_DWORD *)v30 - ktrace_session_set_default_event_names_enabled(global_session, 1) = v31;
        v30 -= 4;
      }

      __p = v30;
      uint64_t v64 = v23;
      kcdata_iter v65 = &v29[4 * v28];
      if (v24) {
        operator delete(v24);
      }
    }

    else
    {
      *(_DWORD *)uint64_t v64 = v20;
      CFIndex v23 = v22 + 4;
    }

    uint64_t v64 = v23;
    _Block_object_dispose(&context, 8);
    ++v7;
  }

  while (v7 != v6);
  uint64_t v32 = (uint64_t *)v67;
  if (!(void)v67)
  {
LABEL_47:
    uint64_t v34 = v64;
  }

  else
  {
    uint64_t v33 = v64;
    do
    {
      if (v33 >= v65)
      {
        uint64_t v35 = (char *)__p;
        uint64_t v36 = (v33 - (_BYTE *)__p) >> 2;
        unint64_t v37 = v36 + 1;
        uint64_t v38 = v65 - (_BYTE *)__p;
        if ((v65 - (_BYTE *)__p) >> 1 > v37) {
          unint64_t v37 = v38 >> 1;
        }
        else {
          unint64_t v39 = v37;
        }
        if (v39)
        {
          __int128 v40 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<flatbuffers::Offset<KernelTraceCatalog::Thread>>>( (uint64_t)&v65,  v39);
          uint64_t v35 = (char *)__p;
          uint64_t v33 = v64;
        }

        else
        {
          __int128 v40 = 0LL;
        }

        uint64_t v41 = &v40[4 * v36];
        *(_DWORD *)uint64_t v41 = *((_DWORD *)v32 + 8);
        uint64_t v34 = v41 + 4;
        while (v33 != v35)
        {
          int v42 = *((_DWORD *)v33 - 1);
          v33 -= 4;
          *((_DWORD *)v41 - ktrace_session_set_default_event_names_enabled(global_session, 1) = v42;
          v41 -= 4;
        }

        __p = v41;
        uint64_t v64 = v34;
        kcdata_iter v65 = &v40[4 * v39];
        if (v35) {
          operator delete(v35);
        }
      }

      else
      {
        *(_DWORD *)uint64_t v33 = *((_DWORD *)v32 + 8);
        uint64_t v34 = v33 + 4;
      }

      uint64_t v64 = v34;
      uint64_t v32 = (uint64_t *)*v32;
      uint64_t v33 = v34;
    }

    while (v32);
  }

  if (v34 == __p) {
    uint64_t v43 = &flatbuffers::data<flatbuffers::Offset<FlatbufferSymbols::Symbolicator>,std::allocator<flatbuffers::Offset<FlatbufferSymbols::Symbolicator>>>(std::vector<flatbuffers::Offset<FlatbufferSymbols::Symbolicator>> const&)::t;
  }
  else {
    uint64_t v43 = __p;
  }
  unsigned int v44 = flatbuffers::FlatBufferBuilder::CreateVector<KernelTraceCatalog::Thread>( (flatbuffers::FlatBufferBuilder *)(v70 + 6),  (uint64_t)v43,  (v34 - (_BYTE *)__p) >> 2);
  CFRange v45 = v70;
  uint64_t v46 = (flatbuffers::FlatBufferBuilder *)(v70 + 6);
  flatbuffers::FlatBufferBuilder::NotNested((uint64_t)(v70 + 6));
  *((_BYTE *)v45 + 11_Block_object_dispose((const void *)(v33 - 112), 8) = 1;
  uint64_t v47 = v45[10];
  uint64_t v50 = v45 + 11;
  uint64_t v48 = v45[11];
  uint64_t v49 = v50[1];
  flatbuffers::FlatBufferBuilder::AddOffset<flatbuffers::String>(v46, 4LL, v44);
  unsigned int v51 = flatbuffers::FlatBufferBuilder::EndTable(v46, (int)v47 - (int)v49 + (int)v48);
  flatbuffers::FlatBufferBuilder::Finish((flatbuffers::FlatBufferBuilder *)(v70 + 6), v51, "SYMB", 0);
  uint64_t v52 = v70;
  if (!*((_BYTE *)v70 + 119)) {
    __assert_rtn("Finished", "flatbuffers.h", 1321, "finished");
  }
  uint64_t v54 = v70[10];
  uint64_t v53 = v70[11];
  int v55 = (void *)(v70[12] - v53);
  *((_OWORD *)v70 + 5) = 0u;
  *((_OWORD *)v52 + 6) = 0u;
  context.version = 0LL;
  memset(&context.retain, 0, 40);
  context.mach_timebase_info info = v55;
  context.deallocate = (CFAllocatorDeallocateCallBack)callback_deallocate_buffer;
  context.preferredSize = 0LL;
  __int128 v56 = CFAllocatorCreate(0LL, &context);
  if (!v56)
  {
    _os_assert_log();
    uint64_t v59 = _os_crash();
    ktrace_uuid_map_learn_tailspin_symbols_with_chunk_cold_2(v59);
  }

  CFDataRef v57 = CFDataCreateWithBytesNoCopy(0LL, (const UInt8 *)v55 + v53, v54 - (void)v55, v56);
  CFRelease(v56);
  if (__p)
  {
    uint64_t v64 = (char *)__p;
    operator delete(__p);
  }

  std::__hash_table<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>>>::~__hash_table((uint64_t)&v66);
  _Block_object_dispose(&v69, 8);
  flatbuffers::FlatBufferBuilder::~FlatBufferBuilder((flatbuffers::FlatBufferBuilder *)&v75);
  symbolication_context::~symbolication_context((symbolication_context *)v84);
  return v57;
}

void sub_186BD913C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, flatbuffers::FlatBufferBuilder *a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, void *__p, uint64_t a29, uint64_t a30, char a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, char a36)
{
  if (__p) {
    operator delete(__p);
  }
  std::__hash_table<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>>>::~__hash_table((uint64_t)&a31);
  _Block_object_dispose(&a36, 8);
  flatbuffers::FlatBufferBuilder::~FlatBufferBuilder(a10);
  symbolication_context::~symbolication_context((symbolication_context *)(v36 - 216));
  _Unwind_Resume(a1);
}

CFDataRef ktrace_dumpbuffer_address_space_pid(uint64_t a1, int a2, uint64_t a3)
{
  if (!a1) {
    return 0LL;
  }
  uint64_t v4 = *(void *)(a1 + 304);
  if (!v4) {
    return 0LL;
  }
  __p = 0LL;
  int v31 = 0LL;
  uint64_t v32 = 0LL;
  if ((a3 & 2) != 0)
  {
    uint64_t v8 = *(void **)(*(void *)(v4 + 32) + 16LL);
    if (v8)
    {
      uint64_t v9 = 0LL;
      do
      {
        uint64_t v10 = v8[3];
        if (v9 >= v32)
        {
          uint64_t v11 = (v9 - (_BYTE *)__p) >> 3;
          unint64_t v12 = (v32 - (_BYTE *)__p) >> 2;
          if (v12 <= v11 + 1) {
            unint64_t v12 = v11 + 1;
          }
          else {
            unint64_t v13 = v12;
          }
          if (v13) {
            int v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v32, v13);
          }
          else {
            int v14 = 0LL;
          }
          int v15 = &v14[8 * v11];
          *(void *)int v15 = v10;
          uint64_t v9 = v15 + 8;
          uint64_t v17 = (char *)__p;
          int v16 = v31;
          if (v31 != __p)
          {
            do
            {
              uint64_t v18 = *((void *)v16 - 1);
              v16 -= 8;
              *((void *)v15 - ktrace_session_set_default_event_names_enabled(global_session, 1) = v18;
              v15 -= 8;
            }

            while (v16 != v17);
            int v16 = (char *)__p;
          }

          __p = v15;
          int v31 = v9;
          uint64_t v32 = &v14[8 * v13];
          if (v16) {
            operator delete(v16);
          }
        }

        else
        {
          *(void *)uint64_t v9 = v10;
          v9 += 8;
        }

        int v31 = v9;
        uint64_t v8 = (void *)*v8;
      }

      while (v8);
    }
  }

  else
  {
    uint64_t v6 = address_space_for_pid((ktrace_uuid_map *)v4, a2);
    if (!v6)
    {
      CFDataRef v7 = 0LL;
      goto LABEL_44;
    }

    uint64_t v19 = (v31 - (_BYTE *)__p) >> 3;
    unint64_t v20 = (v32 - (_BYTE *)__p) >> 2;
    if (v20 <= v19 + 1) {
      unint64_t v20 = v19 + 1;
    }
    else {
      unint64_t v21 = v20;
    }
    if (v21) {
      char v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v32, v21);
    }
    else {
      char v22 = 0LL;
    }
    CFIndex v23 = &v22[8 * v19];
    char v24 = &v22[8 * v21];
    *(void *)CFIndex v23 = v6;
    uint64_t v25 = v23 + 8;
    uint64_t v27 = (char *)__p;
    unint64_t v26 = v31;
    if (v31 != __p)
    {
      do
      {
        uint64_t v28 = *((void *)v26 - 1);
        v26 -= 8;
        *((void *)v23 - ktrace_session_set_default_event_names_enabled(global_session, 1) = v28;
        v23 -= 8;
      }

      while (v26 != v27);
      unint64_t v26 = (char *)__p;
    }

    __p = v23;
    int v31 = v25;
    uint64_t v32 = v24;
    if (v26) {
      operator delete(v26);
    }
    int v31 = v25;
  }

  CFDataRef v7 = ktrace_dumpbuffer(a1, v4, (uint64_t **)&__p, a3);
LABEL_44:
  if (__p)
  {
    int v31 = (char *)__p;
    operator delete(__p);
  }

  return v7;
}

void sub_186BD9418( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ___ZL21ktrace_register_typesv_block_invoke()
{
  ktrace_uuid_map_typeid = _CFRuntimeRegisterClass();
  uint64_t result = _CFRuntimeRegisterClass();
  ktrace_address_space_typeid = result;
  return result;
}

void ktrace_uuid_map_dealloc(void *a1)
{
  if (a1)
  {
    uint64_t v2 = a1[3];
    if (v2)
    {
      uint64_t v3 = (void *)std::__hash_table<std::__hash_value_type<unsigned long long,CF::TypeRef>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CF::TypeRef>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CF::TypeRef>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CF::TypeRef>>>::~__hash_table(v2);
      operator delete(v3);
    }

    uint64_t v4 = a1[4];
    if (v4)
    {
      uint64_t v5 = (void *)std::__hash_table<std::__hash_value_type<unsigned long long,CF::TypeRef>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CF::TypeRef>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CF::TypeRef>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CF::TypeRef>>>::~__hash_table(v4);
      operator delete(v5);
    }

    uint64_t v6 = a1[5];
    if (v6)
    {
      CFDataRef v7 = (void *)std::__hash_table<std::__hash_value_type<CFUUIDBytes,CF::TypeRef>,std::__unordered_map_hasher<CFUUIDBytes,std::__hash_value_type<CFUUIDBytes,CF::TypeRef>,std::hash<CFUUIDBytes>,std::equal_to<CFUUIDBytes>,true>,std::__unordered_map_equal<CFUUIDBytes,std::__hash_value_type<CFUUIDBytes,CF::TypeRef>,std::equal_to<CFUUIDBytes>,std::hash<CFUUIDBytes>,true>,std::allocator<std::__hash_value_type<CFUUIDBytes,CF::TypeRef>>>::~__hash_table(v6);
      operator delete(v7);
    }

    std::__optional_destruct_base<DyldDecodeWindow,false>::reset[abi:ne180100]((uint64_t)(a1 + 6));
    uint64_t v8 = (const void *)a1[31];
    if (v8) {
      CFRelease(v8);
    }
    uint64_t v9 = a1[27];
    if (v9)
    {
      uint64_t v10 = (void *)std::__hash_table<std::__hash_value_type<CFUUIDBytes,CF::TypeRef>,std::__unordered_map_hasher<CFUUIDBytes,std::__hash_value_type<CFUUIDBytes,CF::TypeRef>,std::hash<CFUUIDBytes>,std::equal_to<CFUUIDBytes>,true>,std::__unordered_map_equal<CFUUIDBytes,std::__hash_value_type<CFUUIDBytes,CF::TypeRef>,std::equal_to<CFUUIDBytes>,std::hash<CFUUIDBytes>,true>,std::allocator<std::__hash_value_type<CFUUIDBytes,CF::TypeRef>>>::~__hash_table(v9);
      operator delete(v10);
    }

    uint64_t v11 = (const void *)a1[28];
    if (v11) {
      CFRelease(v11);
    }
    uint64_t v12 = a1[30];
    if (v12)
    {
      unint64_t v13 = (void *)std::__hash_table<std::__hash_value_type<CFUUIDBytes,CF::TypeRef>,std::__unordered_map_hasher<CFUUIDBytes,std::__hash_value_type<CFUUIDBytes,CF::TypeRef>,std::hash<CFUUIDBytes>,std::equal_to<CFUUIDBytes>,true>,std::__unordered_map_equal<CFUUIDBytes,std::__hash_value_type<CFUUIDBytes,CF::TypeRef>,std::equal_to<CFUUIDBytes>,std::hash<CFUUIDBytes>,true>,std::allocator<std::__hash_value_type<CFUUIDBytes,CF::TypeRef>>>::~__hash_table(v12);
      operator delete(v13);
    }

    int v14 = (const void *)a1[29];
    if (v14) {
      CFRelease(v14);
    }
  }

uint64_t std::__optional_destruct_base<DyldDecodeWindow,false>::reset[abi:ne180100](uint64_t result)
{
  if (*(_BYTE *)(result + 160))
  {
    uint64_t v1 = result;
    std::__hash_table<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>>>::~__hash_table(result + 112);
    uint64_t result = std::__hash_table<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>>>::~__hash_table(v1);
    *(_BYTE *)(v1 + 160) = 0;
  }

  return result;
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned long long,CF::TypeRef>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CF::TypeRef>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CF::TypeRef>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CF::TypeRef>>>::~__hash_table( uint64_t a1)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0LL;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<unsigned long long,CF::TypeRef>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CF::TypeRef>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CF::TypeRef>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CF::TypeRef>>>::__deallocate_node( uint64_t a1, const void **a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = (const void **)*v2;
      CF::TypeRef::~TypeRef(v2 + 3);
      operator delete(v2);
      uint64_t v2 = v3;
    }

    while (v3);
  }

void ktrace_address_space_dealloc(void *a1)
{
  if (a1)
  {
    uint64_t v1 = (void *)a1[2];
    if (v1)
    {
      uint64_t v2 = (void **)a1[2];
      std::vector<SymbolOwner>::__destroy_vector::operator()[abi:ne180100](&v2);
      operator delete(v1);
    }
  }

void std::vector<SymbolOwner>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v4 = (char *)v1[1];
    uint64_t v5 = v2;
    if (v4 != v2)
    {
      do
        SymbolOwner::~SymbolOwner((SymbolOwner *)(v4 - 96));
      while (v4 != v2);
      uint64_t v5 = **a1;
    }

    v1[1] = v2;
    operator delete(v5);
  }

BOOL ___ZL15figure_out_archP15_CSArchitectureP14ktrace_machineP11ktrace_file_block_invoke( uint64_t a1, uint64_t *a2)
{
  int v4 = ktrace_chunk_tag((uint64_t)a2);
  if (v4 == 20990) {
    goto LABEL_7;
  }
  if (v4 == 32770)
  {
    if (ktrace_chunk_version_major((uint64_t)a2) <= 1)
    {
LABEL_7:
      v6[0] = MEMORY[0x1895F87A8];
      v6[1] = 3221225472LL;
      int v6[2] = ___ZL15figure_out_archP15_CSArchitectureP14ktrace_machineP11ktrace_file_block_invoke_2;
      v6[3] = &unk_189F56328;
      __int128 v7 = *(_OWORD *)(a1 + 32);
      ktrace_stackshot_chunk_unwrap(a2, (uint64_t)v6);
    }
  }

  else if (v4 == 36864 && !ktrace_chunk_version_major((uint64_t)a2))
  {
    goto LABEL_7;
  }

  return *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) == 0;
}

uint64_t ___ZL15figure_out_archP15_CSArchitectureP14ktrace_machineP11ktrace_file_block_invoke_2( uint64_t result, uint64_t a2, unint64_t a3)
{
  uint64_t v3 = a2 + 16;
  if (a2 + 16 <= a3)
  {
    uint64_t v4 = a2;
    uint64_t v5 = result;
    while (1)
    {
      uint64_t v6 = *(unsigned int *)(v4 + 4);
      uint64_t v7 = v3 + v6;
      if (v3 + v6 > a3) {
        return result;
      }
      if (*(_DWORD *)v4 == 2319) {
        break;
      }
      uint64_t v3 = v7 + 16;
      uint64_t v4 = v7;
      if (v7 + 16 > a3) {
        return result;
      }
    }

    BOOL v8 = v6 >= (*(_DWORD *)(v4 + 8) & 0xFu);
    unsigned int v9 = v6 - (*(_DWORD *)(v4 + 8) & 0xF);
    if (v8) {
      size_t v10 = v9;
    }
    else {
      size_t v10 = 0LL;
    }
    int v11 = *(_DWORD *)v4;
    if ((*(_DWORD *)v4 & 0xFFFFFFF0) == 0x20) {
      int v11 = 17;
    }
    if (v11 > 2309)
    {
      if (v11 == 2310)
      {
        unsigned int v13 = *(_DWORD *)(v4 + 4);
        uint64_t v14 = *(void *)(v4 + 8);
        if (v13 == 112)
        {
          if ((v14 & 0x8F) == 0)
          {
            unsigned int v12 = 104;
            goto LABEL_28;
          }

          unsigned int v13 = 112;
        }

LABEL_26:
        unsigned int v15 = v14 & 0xF;
        BOOL v8 = v13 >= v15;
        unsigned int v12 = v13 - v15;
        if (!v8) {
          unsigned int v12 = 0;
        }
LABEL_28:
        if (!strnstr((const char *)(v4 + 16), "ARM64", v12))
        {
          int v16 = *(_DWORD *)v4;
          if ((*(_DWORD *)v4 & 0xFFFFFFF0) == 0x20) {
            int v16 = 17;
          }
          if (v16 > 2309)
          {
            if (v16 == 2310)
            {
              unsigned int v18 = *(_DWORD *)(v4 + 4);
              uint64_t v19 = *(void *)(v4 + 8);
              if (v18 == 112)
              {
                if ((v19 & 0x8F) == 0)
                {
                  unsigned int v17 = 104;
                  goto LABEL_46;
                }

                unsigned int v18 = 112;
              }

  type metadata accessor for URLResourceKey();
  uint64_t result = sub_186C5B524();
  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

LABEL_44:
              unsigned int v20 = v19 & 0xF;
              BOOL v8 = v18 >= v20;
              unsigned int v17 = v18 - v20;
              if (!v8) {
                unsigned int v17 = 0;
              }
LABEL_46:
              uint64_t result = (uint64_t)strnstr((const char *)(v4 + 16), "ARM", v17);
              if (!result) {
                return result;
              }
              goto LABEL_47;
            }

            if (v16 == 2312)
            {
              unsigned int v18 = *(_DWORD *)(v4 + 4);
              uint64_t v19 = *(void *)(v4 + 8);
              if (v18 == 32)
              {
                if ((v19 & 0x8F) == 0)
                {
                  unsigned int v17 = 24;
                  goto LABEL_46;
                }

                unsigned int v18 = 32;
              }

              goto LABEL_44;
            }
          }

          else if (v16 == 17 || v16 == 19)
          {
            unsigned int v17 = *(_DWORD *)(v4 + 4);
            goto LABEL_46;
          }

          unsigned int v18 = *(_DWORD *)(v4 + 4);
          uint64_t v19 = *(void *)(v4 + 8);
          goto LABEL_44;
        }

  *((_WORD *)uu + 80) |= 0x400u;
  unint64_t v26 = *(FILE **)a1;
  if (*(void *)a1)
  {
    uint64_t v27 = describe2((uint64_t)a1, (unsigned __int8 *)uu);
    fprintf(v26, "could not find executable for %s\n", (const char *)v27);
    ktrace_log_init();
    uint64_t result = os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_DEBUG);
    if (!result) {
      return result;
    }
    ktrace_find_executable((uint64_t)a1, (unsigned __int8 *)uu);
  }

  return 0LL;
}

      BOOL v8 = v18;
    }

LABEL_47:
        uint64_t result = CSArchitectureGetArchitectureForName();
        **(void **)(v5 + 40) = result;
        *(_BYTE *)(*(void *)(*(void *)(v5 + 32) + 8LL) + 24LL) = 1;
        return result;
      }

      if (v11 == 2312)
      {
        unsigned int v13 = *(_DWORD *)(v4 + 4);
        uint64_t v14 = *(void *)(v4 + 8);
        if (v13 == 32)
        {
          if ((v14 & 0x8F) == 0)
          {
            unsigned int v12 = 24;
            goto LABEL_28;
          }

          unsigned int v13 = 32;
        }

        goto LABEL_26;
      }
    }

    else if (v11 == 17 || v11 == 19)
    {
      unsigned int v12 = *(_DWORD *)(v4 + 4);
      goto LABEL_28;
    }

    unsigned int v13 = *(_DWORD *)(v4 + 4);
    uint64_t v14 = *(void *)(v4 + 8);
    goto LABEL_26;
  }

  return result;
}

void SymbolOwner::~SymbolOwner(SymbolOwner *this)
{
  uint64_t v1 = (const void *)*((void *)this + 10);
  if (v1) {
    CFRelease(v1);
  }
}

void *std::__hash_table<std::__hash_value_type<unsigned long long,CF::TypeRef>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CF::TypeRef>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CF::TypeRef>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CF::TypeRef>>>::find<unsigned long long>( void *a1, unint64_t *a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0LL;
  }
  unint64_t v3 = *a2;
  uint8x8_t v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    unint64_t v5 = *a2;
    if (v3 >= *(void *)&v2) {
      unint64_t v5 = v3 % *(void *)&v2;
    }
  }

  else
  {
    unint64_t v5 = (*(void *)&v2 - 1LL) & v3;
  }

  uint64_t v6 = *(void **)(*a1 + 8 * v5);
  if (!v6) {
    return 0LL;
  }
  uint64_t result = (void *)*v6;
  if (*v6)
  {
    do
    {
      unint64_t v8 = result[1];
      if (v8 == v3)
      {
        if (result[2] == v3) {
          return result;
        }
      }

      else
      {
        if (v4.u32[0] > 1uLL)
        {
          if (v8 >= *(void *)&v2) {
            v8 %= *(void *)&v2;
          }
        }

        else
        {
          v8 &= *(void *)&v2 - 1LL;
        }

        if (v8 != v5) {
          return 0LL;
        }
      }

      uint64_t result = (void *)*result;
    }

    while (result);
  }

  return result;
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned long long,CF::TypeRef>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CF::TypeRef>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CF::TypeRef>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CF::TypeRef>>>::__erase_unique<unsigned long long>( void *a1, unint64_t *a2)
{
  uint64_t result = (uint64_t)std::__hash_table<std::__hash_value_type<unsigned long long,CF::TypeRef>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CF::TypeRef>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CF::TypeRef>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CF::TypeRef>>>::find<unsigned long long>( a1,  a2);
  if (result)
  {
    std::__hash_table<std::__hash_value_type<unsigned long long,CF::TypeRef>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CF::TypeRef>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CF::TypeRef>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CF::TypeRef>>>::remove( a1,  (void *)result,  (uint64_t)v4);
    std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long long,CF::TypeRef>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,CF::TypeRef>,void *>>>>::reset[abi:ne180100]( (uint64_t)v4,  0LL);
    return 1LL;
  }

  return result;
}

void *std::__hash_table<std::__hash_value_type<unsigned long long,CF::TypeRef>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CF::TypeRef>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CF::TypeRef>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CF::TypeRef>>>::remove@<X0>( void *result@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  int8x8_t v3 = (int8x8_t)result[1];
  unint64_t v4 = a2[1];
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    if (v4 >= *(void *)&v3) {
      v4 %= *(void *)&v3;
    }
  }

  else
  {
    v4 &= *(void *)&v3 - 1LL;
  }

  uint64_t v6 = *(void **)(*result + 8 * v4);
  do
  {
    uint64_t v7 = v6;
    uint64_t v6 = (void *)*v6;
  }

  while (v6 != a2);
  if (v7 == result + 2) {
    goto LABEL_18;
  }
  unint64_t v8 = v7[1];
  if (v5.u32[0] > 1uLL)
  {
    if (v8 >= *(void *)&v3) {
      v8 %= *(void *)&v3;
    }
  }

  else
  {
    v8 &= *(void *)&v3 - 1LL;
  }

  if (v8 != v4)
  {
LABEL_18:
    if (!*a2) {
      goto LABEL_19;
    }
    unint64_t v9 = *(void *)(*a2 + 8LL);
    if (v5.u32[0] > 1uLL)
    {
      if (v9 >= *(void *)&v3) {
        v9 %= *(void *)&v3;
      }
    }

    else
    {
      v9 &= *(void *)&v3 - 1LL;
    }

    if (v9 != v4) {
LABEL_19:
    }
      *(void *)(*result + 8 * v4) = 0LL;
  }

  uint64_t v10 = *a2;
  if (*a2)
  {
    unint64_t v11 = *(void *)(v10 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v11 >= *(void *)&v3) {
        v11 %= *(void *)&v3;
      }
    }

    else
    {
      v11 &= *(void *)&v3 - 1LL;
    }

    if (v11 != v4)
    {
      *(void *)(*result + 8 * v1ktrace_session_set_default_event_names_enabled(global_session, 1) = v7;
      uint64_t v10 = *a2;
    }
  }

  *uint64_t v7 = v10;
  *a2 = 0LL;
  --result[3];
  *(void *)a3 = a2;
  *(void *)(a3 + _Block_object_dispose((const void *)(v33 - 112), 8) = result + 2;
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long long,CF::TypeRef>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,CF::TypeRef>,void *>>>>::reset[abi:ne180100]( uint64_t a1, uint64_t a2)
{
  int8x8_t v2 = *(const void ***)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16)) {
      CF::TypeRef::~TypeRef(v2 + 3);
    }
    operator delete(v2);
  }

void *std::__hash_table<std::__hash_value_type<unsigned long long,CF::TypeRef>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CF::TypeRef>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CF::TypeRef>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CF::TypeRef>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>( uint64_t a1, unint64_t *a2, uint64_t a3, void **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
    }

    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }

    uint64_t v10 = *(void **)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      unint64_t v11 = (void *)*v10;
      if (*v10)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v12 == v7)
          {
            if (v11[2] == v7) {
              return v11;
            }
          }

          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8) {
                v12 %= v8;
              }
            }

            else
            {
              v12 &= v8 - 1;
            }

            if (v12 != v4) {
              break;
            }
          }

          unint64_t v11 = (void *)*v11;
        }

        while (v11);
      }
    }
  }

  uint64_t v13 = a1 + 16;
  uint64_t v14 = operator new(0x20uLL);
  v24[0] = v14;
  v24[1] = a1 + 16;
  void *v14 = 0LL;
  v14[1] = v7;
  int v14[2] = **a4;
  v14[3] = 0LL;
  char v25 = 1;
  float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1LL);
  float v16 = *(float *)(a1 + 32);
  if (!v8 || (float)(v16 * (float)v8) < v15)
  {
    BOOL v17 = 1LL;
    if (v8 >= 3) {
      BOOL v17 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v8);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      size_t v20 = v19;
    }
    else {
      size_t v20 = v18;
    }
    std::__hash_table<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>>>::__rehash<true>( a1,  v20);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }

    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }

  unint64_t v21 = *(void **)(*(void *)a1 + 8 * v4);
  if (v21)
  {
    *(void *)v24[0] = *v21;
    *unint64_t v21 = v24[0];
  }

  else
  {
    *(void *)v24[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v24[0];
    *(void *)(*(void *)a1 + 8 * v4) = v13;
    if (*(void *)v24[0])
    {
      unint64_t v22 = *(void *)(*(void *)v24[0] + 8LL);
      if ((v8 & (v8 - 1)) != 0)
      {
        if (v22 >= v8) {
          v22 %= v8;
        }
      }

      else
      {
        v22 &= v8 - 1;
      }

      *(void *)(*(void *)a1 + 8 * v22) = v24[0];
    }
  }

  unint64_t v11 = (void *)v24[0];
  v24[0] = 0LL;
  ++*(void *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long long,CF::TypeRef>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,CF::TypeRef>,void *>>>>::reset[abi:ne180100]( (uint64_t)v24,  0LL);
  return v11;
}

void sub_186BD9E80(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void CF::TypeRef::~TypeRef(const void **this)
{
  uint64_t v1 = *this;
  if (v1) {
    CFRelease(v1);
  }
}

uint64_t ___ZL22dscsym_buffer_get_uuidPKvmPA16_h_block_invoke(uint64_t a1)
{
  *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = 1;
  return 1LL;
}

void ___ZL42ktrace_uuid_map_learn_inodes_with_chunk_v0P15ktrace_uuid_mapPK14__CFDictionary_block_invoke( uint64_t a1, const __CFString *a2, const __CFDictionary *a3)
{
  uint8x8_t v5 = utf8(a2);
  if (sscanf(v5, "%x:%x", &v12, &v11) == 2)
  {
    CFStringRef v6 = cfaasprintf("%llx", v12 | ((unint64_t)v11 << 32));
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0LL, 0LL, MEMORY[0x189605240], MEMORY[0x189605250]);
    if (!Mutable) {
      ktrace_remotetime_update_params_cold_1();
    }
    CFMutableDictionaryRef v8 = Mutable;
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 32), v6, Mutable);
    CFRelease(v8);
    context[0] = MEMORY[0x1895F87A8];
    context[1] = 3221225472LL;
    context[2] = ___ZL42ktrace_uuid_map_learn_inodes_with_chunk_v0P15ktrace_uuid_mapPK14__CFDictionary_block_invoke_124;
    context[3] = &__block_descriptor_48_e41_v24__0____CFString__8____CFDictionary__16l;
    uint64_t v9 = *(void *)(a1 + 40);
    context[4] = v8;
    void context[5] = v9;
    CFDictionaryApplyFunction(a3, (CFDictionaryApplierFunction)CFDictionaryApplierTrampoline, context);
  }

  else if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_FAULT))
  {
    ___ZL42ktrace_uuid_map_learn_inodes_with_chunk_v0P15ktrace_uuid_mapPK14__CFDictionary_block_invoke_cold_2();
  }

void ___ZL42ktrace_uuid_map_learn_inodes_with_chunk_v0P15ktrace_uuid_mapPK14__CFDictionary_block_invoke_124( uint64_t a1, const void *a2, const __CFDictionary *a3)
{
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0LL, 0LL, MEMORY[0x189605240], MEMORY[0x189605250]);
  if (!Mutable) {
    ktrace_remotetime_update_params_cold_1();
  }
  CFMutableDictionaryRef v7 = Mutable;
  CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 32), a2, Mutable);
  CFRelease(v7);
  int Value = CFDictionaryGetValue(a3, @"path");
  uint64_t v9 = Value;
  if (Value)
  {
    CFTypeID v10 = CFGetTypeID(Value);
    if (v10 != CFStringGetTypeID())
    {
      ktrace_log_init();
      if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
        ktrace_uuid_map_learn_tailspin_symbols_with_chunk_cold_6();
      }
      uint64_t v9 = 0LL;
    }
  }

  unsigned int v11 = (const __CFDictionary *)CFDictionaryGetValue(a3, @"uuids");
  unsigned int v12 = v11;
  if (v11)
  {
    CFTypeID v13 = CFGetTypeID(v11);
    if (v13 != CFDictionaryGetTypeID())
    {
      ktrace_log_init();
      if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
        ktrace_uuid_map_learn_tailspin_process_info_with_chunk_cold_5();
      }
      unsigned int v12 = 0LL;
    }
  }

  if (v9)
  {
    CFDictionarySetValue(v7, @"Path", v9);
    if (v12)
    {
      v14[0] = MEMORY[0x1895F87A8];
      v14[1] = 3221225472LL;
      int v14[2] = ___ZL42ktrace_uuid_map_learn_inodes_with_chunk_v0P15ktrace_uuid_mapPK14__CFDictionary_block_invoke_2;
      v14[3] = &__block_descriptor_48_e37_v24__0____CFString__8____CFString__16l;
      v14[4] = *(void *)(a1 + 40);
      void v14[5] = v9;
      CFDictionaryApplyFunction(v12, (CFDictionaryApplierFunction)CFDictionaryApplierTrampoline, v14);
    }
  }

void ___ZL42ktrace_uuid_map_learn_inodes_with_chunk_v0P15ktrace_uuid_mapPK14__CFDictionary_block_invoke_2( uint64_t a1, uint64_t a2, const __CFString *a3)
{
  *(void *)&v5.byte0 = 0LL;
  *(void *)&v5.byte8 = 0LL;
  unint64_t v4 = utf8(a3);
  if (!uuid_parse(v4, &v5.byte0)) {
    ktrace_uuid_map_associate_path_with_uuid(*(ktrace_uuid_map **)(a1 + 32), v5, *(CFUUIDBytes **)(a1 + 40));
  }
}

uint64_t ___ZL25ktrace_address_space_dumpP15ktrace_uuid_mapP20ktrace_address_spaceP7__sFILE_block_invoke( uint64_t a1, uint64_t a2, optional_uint64 *a3)
{
  CFStringRef v6 = uuid_string(*(void *)a2, *(void *)(a2 + 8));
  uint64_t v7 = *(void *)(a2 + 48);
  if (*(void *)a3) {
    v7 += optional_uint64::value(a3);
  }
  if (*(void *)(a2 + 56)) {
    uint64_t v8 = optional_uint64::value((optional_uint64 *)(a2 + 56)) + v7;
  }
  else {
    uint64_t v8 = -1LL;
  }
  uint64_t v9 = *(const __CFString **)(a2 + 80);
  if (v9) {
    CFTypeID v10 = utf8(v9);
  }
  else {
    CFTypeID v10 = "<unknown>";
  }
  switch(*(_DWORD *)(a2 + 16))
  {
    case 1:
      unsigned int v11 = *(FILE **)(a1 + 32);
      uint64_t v18 = v8;
      uint64_t v19 = (uint64_t)v10;
      float v16 = v6;
      uint64_t v17 = v7;
      unsigned int v12 = "\t <%s> %16llx-%16llx %s\n";
      goto LABEL_16;
    case 2:
      unsigned int v11 = *(FILE **)(a1 + 32);
      uint64_t v19 = a2 + 24;
      size_t v20 = v10;
      uint64_t v17 = v7;
      uint64_t v18 = v8;
      float v16 = v6;
      unsigned int v12 = "\t <%s> %16llx-%16llx %s %s\n";
      goto LABEL_16;
    case 3:
      uint64_t v21 = 0LL;
      get_sc_and_slide(*(void *)(a1 + 40), a2, &v21, &v22);
      CFTypeID v13 = *(FILE **)(a1 + 32);
      if (v21)
      {
        uint64_t v18 = v8;
        uint64_t v19 = optional_uint64::value((optional_uint64 *)&v21);
        float v16 = v6;
        uint64_t v17 = v7;
        unsigned int v12 = "\t <%s> %16llx-%16llx SHARED_CACHE slide=%llx\n";
      }

      else
      {
        uint64_t v17 = v7;
        uint64_t v18 = v8;
        float v16 = v6;
        unsigned int v12 = "\t <%s> %16llx-%16llx SHARED_CACHE slide=?\n";
      }

      float v15 = v13;
      return fprintf(v15, v12, v16, v17, v18, v19, v20);
    case 4:
      return fprintf(*(FILE **)(a1 + 32), "\t <%s> %16llx-%16llx KERNEL_CACHE\n");
    case 5:
      unsigned int v11 = *(FILE **)(a1 + 32);
      uint64_t v18 = v8;
      uint64_t v19 = (uint64_t)v10;
      float v16 = v6;
      uint64_t v17 = v7;
      unsigned int v12 = "\t <%s> %16llx-%16llx __TEXT* %s\n";
LABEL_16:
      float v15 = v11;
      return fprintf(v15, v12, v16, v17, v18, v19, v20);
    default:
      abort();
  }

BOOL dyldtp_complete(uint64_t a1)
{
  if ((*(_DWORD *)a1 - 520421376) <= 0x30)
  {
    if (((1LL << *(_BYTE *)a1) & 0x10000100001LL) != 0)
    {
      int v1 = 2;
      return *(_DWORD *)(a1 + 8) == v1;
    }

    if (((1LL << *(_BYTE *)a1) & 0x1000010000100LL) != 0)
    {
      int v1 = 3;
      return *(_DWORD *)(a1 + 8) == v1;
    }
  }

  if (*(_DWORD *)a1) {
    abort();
  }
  return 0LL;
}

char *std::__hash_table<std::__hash_value_type<unsigned long long,dyld_trace_point>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,dyld_trace_point>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,dyld_trace_point>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,dyld_trace_point>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>( uint64_t a1, unint64_t *a2, uint64_t a3, void **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
    }

    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }

    CFTypeID v10 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      unsigned int v11 = (char *)*v10;
      if (*v10)
      {
        do
        {
          unint64_t v12 = *((void *)v11 + 1);
          if (v12 == v7)
          {
            if (*((void *)v11 + 2) == v7) {
              return v11;
            }
          }

          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8) {
                v12 %= v8;
              }
            }

            else
            {
              v12 &= v8 - 1;
            }

            if (v12 != v4) {
              break;
            }
          }

          unsigned int v11 = *(char **)v11;
        }

        while (v11);
      }
    }
  }

  unsigned int v11 = (char *)operator new(0x58uLL);
  *(void *)unsigned int v11 = 0LL;
  *((void *)v11 + ktrace_session_set_default_event_names_enabled(global_session, 1) = v7;
  *((void *)v11 + 2) = **a4;
  *(_OWORD *)(v11 + 72) = 0u;
  *(_OWORD *)(v11 + 56) = 0u;
  *(_OWORD *)(v11 + 40) = 0u;
  *(_OWORD *)(v11 + 24) = 0u;
  float v13 = (float)(unint64_t)(*(void *)(a1 + 24) + 1LL);
  float v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    BOOL v15 = 1LL;
    if (v8 >= 3) {
      BOOL v15 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v8);
    unint64_t v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17) {
      size_t v18 = v17;
    }
    else {
      size_t v18 = v16;
    }
    std::__hash_table<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>>>::__rehash<true>( a1,  v18);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }

    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }

  uint64_t v19 = *(void *)a1;
  size_t v20 = *(void **)(*(void *)a1 + 8 * v4);
  if (v20)
  {
    *(void *)unsigned int v11 = *v20;
LABEL_38:
    *size_t v20 = v11;
    goto LABEL_39;
  }

  *(void *)unsigned int v11 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v11;
  *(void *)(v19 + 8 * v4) = a1 + 16;
  if (*(void *)v11)
  {
    unint64_t v21 = *(void *)(*(void *)v11 + 8LL);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v21 >= v8) {
        v21 %= v8;
      }
    }

    else
    {
      v21 &= v8 - 1;
    }

    size_t v20 = (void *)(*(void *)a1 + 8 * v21);
    goto LABEL_38;
  }

void sub_186BDA614(_Unwind_Exception *a1)
{
}

uint64_t *std::__hash_table<std::__hash_value_type<unsigned long long,dyld_trace_point>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,dyld_trace_point>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,dyld_trace_point>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,dyld_trace_point>>>::__erase_unique<unsigned long long>( void *a1, unint64_t *a2)
{
  uint64_t result = std::__hash_table<std::__hash_value_type<unsigned long long,CF::TypeRef>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CF::TypeRef>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CF::TypeRef>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CF::TypeRef>>>::find<unsigned long long>( a1,  a2);
  if (result)
  {
    std::__hash_table<std::__hash_value_type<unsigned long long,dyld_trace_point>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,dyld_trace_point>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,dyld_trace_point>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,dyld_trace_point>>>::erase( a1,  result);
    return (uint64_t *)1;
  }

  return result;
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned long long,dyld_trace_point>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,dyld_trace_point>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,dyld_trace_point>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,dyld_trace_point>>>::erase( void *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  std::__hash_table<std::__hash_value_type<unsigned long long,CF::TypeRef>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CF::TypeRef>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CF::TypeRef>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CF::TypeRef>>>::remove( a1,  a2,  (uint64_t)&__p);
  int8x8_t v3 = __p;
  __p = 0LL;
  if (v3) {
    operator delete(v3);
  }
  return v2;
}

void std::__throw_bad_optional_access[abi:ne180100]()
{
  exception = __cxa_allocate_exception(8uLL);
  void *exception = MEMORY[0x189614798] + 16LL;
  __cxa_throw(exception, MEMORY[0x1896146F8], MEMORY[0x189614260]);
}

_OWORD *std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,SymbolOwner *,SymbolOwner *,SymbolOwner *,0>( _OWORD *a1, _OWORD *a2, uint64_t a3)
{
  unint64_t v4 = a1;
  if (a1 != a2)
  {
    do
    {
      CFStringRef v6 = *(const void **)(a3 + 80);
      if (v6) {
        CFRelease(v6);
      }
      __int128 v7 = v4[1];
      *(_OWORD *)a3 = *v4;
      *(_OWORD *)(a3 + 16) = v7;
      __int128 v8 = v4[2];
      __int128 v9 = v4[3];
      __int128 v10 = v4[5];
      *(_OWORD *)(a3 + std::__hash_table<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>>>::~__hash_table((uint64_t)this + 64) = v4[4];
      *(_OWORD *)(a3 + 80) = v10;
      *(_OWORD *)(a3 + 32) = v8;
      *(_OWORD *)(a3 + 4_Block_object_dispose((const void *)(v33 - 112), 8) = v9;
      int v4[2] = 0u;
      v4[3] = 0u;
      v4[4] = 0u;
      void v4[5] = 0u;
      _OWORD *v4 = 0u;
      v4[1] = 0u;
      v4 += 6;
      a3 += 96LL;
    }

    while (v4 != a2);
    return a2;
  }

  return v4;
}

uint64_t SymbolOwner::operator=(uint64_t a1, _OWORD *a2)
{
  unint64_t v4 = *(const void **)(a1 + 80);
  if (v4) {
    CFRelease(v4);
  }
  __int128 v5 = a2[2];
  __int128 v6 = a2[3];
  __int128 v7 = a2[4];
  *(_OWORD *)(a1 + 80) = a2[5];
  __int128 v8 = a2[1];
  *(_OWORD *)a1 = *a2;
  *(_OWORD *)(a1 + 16) = v8;
  *(_OWORD *)(a1 + 4_Block_object_dispose((const void *)(v33 - 112), 8) = v6;
  *(_OWORD *)(a1 + std::__hash_table<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>>>::~__hash_table((uint64_t)this + 64) = v7;
  *(_OWORD *)(a1 + 32) = v5;
  __int128 v9 = *(const void **)(a1 + 80);
  if (v9) {
    CFRetain(v9);
  }
  return a1;
}

void ___ZL10visit_uuidP16operating_system11CFUUIDBytes_block_invoke( uint64_t a1, uint64_t a2, uint64_t a3, const void *a4)
{
}

void merge_info_while_locked(uint64_t a1, uint64_t a2, uint64_t a3, const void *a4)
{
  if (a4)
  {
    __int128 v8 = *(dispatch_queue_s **)(a1 + 48);
    if (v8) {
      dispatch_assert_queue_V2(v8);
    }
    CFStringRef v9 = cfaasprintf("%llx", a2);
    CFStringRef v10 = cfaasprintf("%llx", a3);
    int Value = (const __CFDictionary *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 32), v9);
    if (Value)
    {
      unint64_t v12 = Value;
      if (CFDictionaryContainsKey(Value, v10)) {
        return;
      }
    }

    else
    {
      CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0LL, 0LL, MEMORY[0x189605240], MEMORY[0x189605250]);
      if (!Mutable) {
        ktrace_remotetime_update_params_cold_1();
      }
      unint64_t v12 = Mutable;
      CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 32), v9, Mutable);
      CFRelease(v12);
    }

    CFDictionarySetValue(v12, v10, a4);
  }

uint64_t ___ZL10visit_uuidP16operating_system11CFUUIDBytes_block_invoke_2(uint64_t a1, char *a2)
{
  if (a2)
  {
    uint64_t v2 = *(void **)(a1 + 32);
    if (*v2) {
      ktrace_remotetime_update_params_cold_1();
    }
    if (!stat(a2, &v8))
    {
      unint64_t v4 = (dispatch_queue_s *)v2[6];
      int8x8_t v3 = (dispatch_group_s *)v2[7];
      block[1] = 3221225472LL;
      stat v7 = v8;
      block[0] = MEMORY[0x1895F87A8];
      block[2] = ___ZL10visit_pathP16operating_systemPKc_block_invoke;
      block[3] = &__block_descriptor_184_e5_v8__0l;
      block[4] = v2;
      if (v3 && v4) {
        dispatch_group_async(v3, v4, block);
      }
      else {
        visit_inode_while_locked((uint64_t)v2, v7.st_dev, v7.st_ino);
      }
    }
  }

  return 1LL;
}

void ___ZL10visit_pathP16operating_systemPKc_block_invoke(uint64_t a1)
{
}

void ___ZL24visit_inode_while_lockedP16operating_system4fsid8fsobj_id_block_invoke( uint64_t a1, uint64_t a2, uint64_t a3, const void *a4)
{
}

uint64_t ___ZL22get_summary_from_machoPKc_block_invoke()
{
  FamilyName = (const char *)CSArchitectureGetFamilyName();
  CFStringRef v1 = CFStringCreateWithCString(0LL, FamilyName, 0x8000100u);
  if (!v1) {
    ktrace_remotetime_update_params_cold_1();
  }
  CFAutorelease(v1);
  if (CSSymbolicatorGetSymbolOwnerCountAtTime() != 1) {
    ktrace_remotetime_update_params_cold_1();
  }
  return CSSymbolicatorForeachSymbolOwnerAtTime();
}

void ___ZL22get_summary_from_machoPKc_block_invoke_2(uint64_t a1)
{
  uint64_t image_summary = (const void *)make_image_summary();
  if (image_summary)
  {
    CFDictionaryAddValue( *(CFMutableDictionaryRef *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL),  *(const void **)(a1 + 48),  image_summary);
    *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = 0;
  }

void ___ZL18make_image_summary10_CSTypeRefb_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v16 = *MEMORY[0x1895F89C0];
  CSRegionGetSegmentName(a2, a3, cStr);
  if (*(void *)cStr != 0x455A454741505F5FLL || *(void *)&cStr[3] != 0x4F52455A454741LL)
  {
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0LL, 0LL, MEMORY[0x189605240], MEMORY[0x189605250]);
    if (!Mutable) {
      ktrace_remotetime_update_params_cold_1();
    }
    __int128 v6 = Mutable;
    CFStringRef v7 = CFStringCreateWithCString(0LL, cStr, 0x8000100u);
    if (!v7) {
      ktrace_remotetime_update_params_cold_1();
    }
    CFStringRef v8 = v7;
    CFAutorelease(v7);
    CFDictionarySetValue(v6, @"Name", v8);
    uint64_t valuePtr = CSRegionGetRange();
    CFNumberRef v9 = CFNumberCreate(0LL, kCFNumberLongLongType, &valuePtr);
    if (!v9) {
      ktrace_remotetime_update_params_cold_1();
    }
    CFNumberRef v10 = v9;
    CFAutorelease(v9);
    CFDictionarySetValue(v6, @"Address", v10);
    CSRegionGetRange();
    uint64_t valuePtr = v11;
    CFNumberRef v12 = CFNumberCreate(0LL, kCFNumberLongLongType, &valuePtr);
    if (!v12) {
      ktrace_remotetime_update_params_cold_1();
    }
    CFNumberRef v13 = v12;
    CFAutorelease(v12);
    CFDictionarySetValue(v6, @"Size", v13);
    CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 32), v6);
    CFRelease(v6);
  }

void CSRegionGetSegmentName(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  Name = (const char *)CSRegionGetName();
  if (Name)
  {
    __int128 v5 = Name;
    if (*Name)
    {
      size_t v6 = strlen(Name) - 8;
      if (v6 <= 0x10 && !strcmp(" SEGMENT", &v5[v6]))
      {
        memcpy(a3, v5, v6);
        a3 += v6;
      }

      else
      {
        CSRegionGetSymbolOwner();
        if ((CSIsNull() & 1) != 0)
        {
          Path = 0LL;
        }

        else
        {
          Path = (const char *)CSSymbolOwnerGetPath();
          if (!Path) {
            Path = (const char *)CSSymbolOwnerGetName();
          }
        }

        CFStringRef v8 = (os_log_s *)ktrace_log;
        if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_FAULT)) {
          CSRegionGetSegmentName(Path, (uint64_t)v5, v8);
        }
      }
    }
  }

  *a3 = 0;
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned long long,dyld_trace_point>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,dyld_trace_point>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,dyld_trace_point>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,dyld_trace_point>>>::__hash_table( uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a2 = 0LL;
  *(void *)uint64_t result = v2;
  *(void *)(result + _Block_object_dispose((const void *)(v33 - 112), 8) = a2[1];
  a2[1] = 0LL;
  uint64_t v5 = a2[2];
  int8x8_t v3 = a2 + 2;
  uint64_t v4 = v5;
  *(void *)(result + 16) = v5;
  uint64_t v6 = v3[1];
  *(void *)(result + 24) = v6;
  *(_DWORD *)(result + 32) = *((_DWORD *)v3 + 4);
  if (v6)
  {
    unint64_t v7 = *(void *)(v4 + 8);
    unint64_t v8 = *(void *)(result + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        v7 %= v8;
      }
    }

    else
    {
      v7 &= v8 - 1;
    }

    *(void *)(v2 + 8 * v7) = result + 16;
    *int8x8_t v3 = 0LL;
    v3[1] = 0LL;
  }

  return result;
}

void __Block_byref_object_copy__154(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_dispose__155(uint64_t a1)
{
}

void ___ZL13visit_processP16operating_systemj_block_invoke(uint64_t a1)
{
  if ((CSIsNull() & 1) == 0)
  {
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0LL, 0LL, MEMORY[0x189605240], MEMORY[0x189605250]);
    if (!Mutable) {
      ktrace_remotetime_update_params_cold_1();
    }
    int8x8_t v3 = Mutable;
    CFMutableArrayRef v4 = CFArrayCreateMutable(0LL, 0LL, MEMORY[0x189605228]);
    if (!v4) {
      ktrace_remotetime_update_params_cold_1();
    }
    CFMutableArrayRef v5 = v4;
    uint64_t v6 = MEMORY[0x1895F87A8];
    void v11[6] = MEMORY[0x1895F87A8];
    void v11[7] = 3221225472LL;
    _OWORD v11[8] = ___ZL13visit_processP16operating_systemj_block_invoke_2;
    v11[9] = &__block_descriptor_40_e22_v24__0__CSTypeRef_QQ_8l;
    v11[10] = v4;
    CSSymbolicatorForeachSymbolOwnerAtTime();
    CFDictionarySetValue(v3, @"Binaries", v5);
    uint64_t valuePtr = *(unsigned int *)(a1 + 56);
    CFNumberRef v7 = CFNumberCreate(0LL, kCFNumberLongLongType, &valuePtr);
    if (!v7) {
      ktrace_remotetime_update_params_cold_1();
    }
    CFNumberRef v8 = v7;
    CFAutorelease(v7);
    CFDictionarySetValue(v3, @"PID", v8);
    CFRelease(v5);
    CSRelease();
    CFNumberRef v9 = *(dispatch_group_s **)(*(void *)(*(void *)(a1 + 32) + 8LL) + 40LL);
    CFNumberRef v10 = *(dispatch_queue_s **)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL);
    v11[0] = v6;
    v11[1] = 3221225472LL;
    void v11[2] = ___ZL13visit_processP16operating_systemj_block_invoke_3;
    void v11[3] = &unk_189F55AB0;
    v11[4] = *(void *)(a1 + 48);
    void v11[5] = v3;
    dispatch_group_async(v9, v10, v11);
  }

void ___ZL13visit_processP16operating_systemj_block_invoke_2(uint64_t a1)
{
  if ((CSSymbolOwnerIsDyldSharedCache() & 1) == 0)
  {
    uint64_t image_summary = (const void *)make_image_summary();
    if (image_summary) {
      CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 32), image_summary);
    }
  }

void ___ZL13visit_processP16operating_systemj_block_invoke_3(uint64_t a1)
{
}

void std::__hash_table<std::__hash_value_type<unsigned long long,dyld_trace_point>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,dyld_trace_point>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,dyld_trace_point>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,dyld_trace_point>>>::__move_assign( uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *a2 = 0LL;
  CFMutableArrayRef v5 = *(void **)a1;
  *(void *)a1 = v4;
  if (v5) {
    operator delete(v5);
  }
  uint64_t v8 = a2[2];
  CFNumberRef v7 = a2 + 2;
  uint64_t v6 = v8;
  uint64_t v9 = *(v7 - 1);
  *(void *)(a1 + 16) = v8;
  *(void *)(a1 + _Block_object_dispose((const void *)(v33 - 112), 8) = v9;
  *(v7 - ktrace_session_set_default_event_names_enabled(global_session, 1) = 0LL;
  uint64_t v10 = v7[1];
  *(void *)(a1 + 24) = v10;
  *(_DWORD *)(a1 + 32) = *((_DWORD *)v7 + 4);
  if (v10)
  {
    unint64_t v11 = *(void *)(v6 + 8);
    unint64_t v12 = *(void *)(a1 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12) {
        v11 %= v12;
      }
    }

    else
    {
      v11 &= v12 - 1;
    }

    *(void *)(*(void *)a1 + 8 * v1ktrace_session_set_default_event_names_enabled(global_session, 1) = a1 + 16;
    *CFNumberRef v7 = 0LL;
    v7[1] = 0LL;
  }

void *std::__hash_table<std::__hash_value_type<unsigned long long,dyld_trace_point>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,dyld_trace_point>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,dyld_trace_point>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,dyld_trace_point>>>::clear( void *result)
{
  if (result[3])
  {
    CFStringRef v1 = result;
    uint64_t result = (void *)result[2];
    if (result)
    {
      do
      {
        uint64_t v2 = (void *)*result;
        operator delete(result);
        uint64_t result = v2;
      }

      while (v2);
    }

    v1[2] = 0LL;
    uint64_t v3 = v1[1];
    if (v3)
    {
      for (uint64_t i = 0LL; i != v3; ++i)
        *(void *)(*v1 + 8 * i) = 0LL;
    }

    v1[3] = 0LL;
  }

  return result;
}

uint64_t _block_trampoline(void (**a1)(void))
{
  return 0LL;
}

void ___ZL33ktrace_add_symbols_for_some_uuidsP21symbolication_contexti_block_invoke( uint64_t a1, unint64_t *a2)
{
  *(void *)(*(void *)(a1 + 32) + 8std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long long,CF::TypeRef>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,CF::TypeRef>,void *>>>>::reset[abi:ne180100]( (uint64_t)va, 0LL) = *(void *)(*(void *)(a1 + 40) + 304LL);
  ktrace_collect_address(*(void *)(a1 + 32), *(void *)(a1 + 40), (uint64_t)a2, a2[1]);
  ktrace_collect_address(*(void *)(a1 + 32), *(void *)(a1 + 40), (uint64_t)a2, a2[2]);
  ktrace_collect_address(*(void *)(a1 + 32), *(void *)(a1 + 40), (uint64_t)a2, a2[3]);
  ktrace_collect_address(*(void *)(a1 + 32), *(void *)(a1 + 40), (uint64_t)a2, a2[4]);
}

void ktrace_collect_address(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  ktrace_get_uuid_offset_for_thread_address(a2, *(void *)(a3 + 40), a4, &v15);
  int v14[2] = v17;
  v14[3] = v18;
  v14[4] = v19;
  v14[0] = v15;
  v14[1] = v16;
  ktrace_collect_uuid_offset(a1, (uint64_t)v14);
  if (ktrace_plausible_kernel_address(a2, a4))
  {
    if (ktrace_get_pid_for_thread(a2, *(const void **)(a3 + 40)))
    {
      ktrace_get_uuid_offset_for_pid_address(a2, 0, a4, &v9);
      __int128 v18 = v12;
      __int128 v19 = v13;
      __int128 v16 = v10;
      __int128 v17 = v11;
      __int128 v15 = v9;
      int v8[2] = v11;
      v8[3] = v12;
      _DWORD v8[4] = v13;
      v8[0] = v9;
      v8[1] = v10;
      ktrace_collect_uuid_offset(a1, (uint64_t)v8);
    }
  }

uint64_t ___ZL33ktrace_add_symbols_for_some_uuidsP21symbolication_contexti_block_invoke_2(uint64_t a1)
{
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void ___ZL33ktrace_add_symbols_for_some_uuidsP21symbolication_contexti_block_invoke_3(uint64_t a1)
{
  uint64_t v35 = *MEMORY[0x1895F89C0];
  uint64_t v3 = *(FILE ***)(a1 + 32);
  uint64_t v2 = *(void *)(a1 + 40);
  if (CSIsNull())
  {
    *(void *)(v2 + 16) = CSAddressSetCreate();
    *(void *)(v2 + 24) = v4;
  }

  if (ktrace_make_symbolicator(v3, (UUIDContext *)v2))
  {
    uint64_t SymbolOwner = CSSymbolicatorGetSymbolOwner();
    CFNumberRef v7 = v6;
    uint64_t v8 = *(const __CFSet **)(v2 + 32);
    if (v8)
    {
      uint64_t context = MEMORY[0x1895F87A8];
      uint64_t v27 = 3221225472LL;
      uint64_t v28 = ___ZL24ktrace_translate_offsetsP21symbolication_contextP11UUIDContext_block_invoke;
      char v29 = &__block_descriptor_56_e8_v16__0Q8l;
      uint64_t v30 = SymbolOwner;
      int v31 = v7;
      uint64_t v32 = v2;
      CFSetApplyFunction(v8, (CFSetApplierFunction)CFSetApplierTrampoline, &context);
      CFRelease(*(CFTypeRef *)(v2 + 32));
      *(void *)(v2 + 32) = 0LL;
    }

    __int128 v9 = *(const __CFDictionary **)(v2 + 40);
    if (v9)
    {
      *(void *)&__int128 v20 = MEMORY[0x1895F87A8];
      *((void *)&v20 + ktrace_session_set_default_event_names_enabled(global_session, 1) = 3221225472LL;
      unint64_t v21 = ___ZL24ktrace_translate_offsetsP21symbolication_contextP11UUIDContext_block_invoke_2;
      unint64_t v22 = &__block_descriptor_56_e34_v24__0____CFString__8____CFSet__16l;
      uint64_t v23 = SymbolOwner;
      char v24 = v7;
      uint64_t v25 = v2;
      CFDictionaryApplyFunction(v9, (CFDictionaryApplierFunction)CFDictionaryApplierTrampoline, &v20);
      CFRelease(*(CFTypeRef *)(v2 + 40));
      *(void *)(v2 + 40) = 0LL;
    }
  }

  uint64_t v11 = *(void *)(a1 + 32);
  uint64_t v10 = *(void *)(a1 + 40);
  if (ktrace_make_symbolicator((FILE **)v11, (UUIDContext *)v10))
  {
    uint64_t v12 = CSSymbolicatorGetSymbolOwner();
    uint64_t v14 = v13;
    __int128 v15 = (const __CFData *)MEMORY[0x186E4543C](v12, v14, *(void *)(v10 + 16), *(void *)(v10 + 24));
    if (v15)
    {
      __int128 v16 = v15;
      __int128 v20 = 0uLL;
      LODWORD(v2ktrace_session_set_default_event_names_enabled(global_session, 1) = 24;
      HIDWORD(v2ktrace_session_set_default_event_names_enabled(global_session, 1) = CFDataGetLength(v15);
      uuid_copy((unsigned __int8 *)&v20, (const unsigned __int8 *)v10);
      uint64_t v17 = HIDWORD(v21);
      if (CFDataGetLength(v16) != v17) {
        ktrace_remotetime_update_params_cold_1();
      }
      __int128 v19 = *(dispatch_queue_s **)(v11 + 88);
      __int128 v18 = *(dispatch_group_s **)(v11 + 96);
      uint64_t context = MEMORY[0x1895F87A8];
      uint64_t v27 = 3221225472LL;
      uint64_t v28 = ___ZL27ktrace_add_symbols_for_uuidP21symbolication_contextP11UUIDContext_block_invoke_164;
      char v29 = &__block_descriptor_80_e5_v8__0l;
      __int128 v33 = v20;
      uint64_t v34 = v21;
      uint64_t v30 = v11;
      int v31 = v16;
      uint64_t v32 = v10;
    }

    else
    {
      __int128 v19 = *(dispatch_queue_s **)(v11 + 88);
      __int128 v18 = *(dispatch_group_s **)(v11 + 96);
      uint64_t context = MEMORY[0x1895F87A8];
      uint64_t v27 = 3221225472LL;
      uint64_t v28 = ___ZL27ktrace_add_symbols_for_uuidP21symbolication_contextP11UUIDContext_block_invoke;
      char v29 = &__block_descriptor_48_e5_v8__0l;
      uint64_t v30 = v11;
      int v31 = (const __CFData *)v10;
    }

    dispatch_group_async(v18, v19, &context);
  }

void ktrace_collect_uuid_offset(uint64_t a1, uint64_t a2)
{
  uint64_t v15 = *MEMORY[0x1895F89C0];
  unsigned int v2 = *(_DWORD *)(a2 + 48);
  if (v2 > 5) {
    ktrace_collect_uuid_offset();
  }
  if (((1 << v2) & 0x19) != 0) {
    return;
  }
  CFMutableArrayRef v5 = *(void **)(a1 + 16);
  v14[0] = *(_OWORD *)a2;
  if (std::__hash_table<CFUUIDBytes,std::hash<CFUUIDBytes>,std::equal_to<CFUUIDBytes>,std::allocator<CFUUIDBytes>>::find<CFUUIDBytes>( v5,  v14)
    || !uuid_is_null((const unsigned __int8 *)(a1 + 57))
    && uuid_compare((const unsigned __int8 *)a2, (const unsigned __int8 *)(a1 + 57)))
  {
    return;
  }

  __int128 v6 = *(_OWORD *)(a2 + 48);
  v13[2] = *(_OWORD *)(a2 + 32);
  _OWORD v13[3] = v6;
  v13[4] = *(_OWORD *)(a2 + 64);
  __int128 v7 = *(_OWORD *)(a2 + 16);
  v13[0] = *(_OWORD *)a2;
  v13[1] = v7;
  UUIDContext::UUIDContext((uint64_t)v14, (uint64_t)v13);
  uuid = find_or_create_uuid(a1, v14);
  UUIDContext::~UUIDContext((UUIDContext *)v14);
  if (!uuid || (uuid[20] & 1) != 0) {
    return;
  }
  int v9 = *(_DWORD *)(a2 + 48);
  switch(v9)
  {
    case 5:
      CFStringRef v11 = @"__TEXT*";
      goto LABEL_17;
    case 2:
      CFStringRef v11 = cfstring((const char *)(a2 + 16));
LABEL_17:
      CFMutableDictionaryRef Mutable = (const __CFDictionary *)uuid[5];
      if (!Mutable)
      {
        CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0LL, 0LL, MEMORY[0x189605240], MEMORY[0x189605250]);
        uuid[5] = Mutable;
      }

      int Value = (void *)CFDictionaryGetValue(Mutable, v11);
      if (!Value)
      {
        int Value = CFSetCreateMutable(0LL, 0LL, &long_set_callbacks);
        CFDictionarySetValue((CFMutableDictionaryRef)uuid[5], v11, Value);
        CFRelease(Value);
      }

      goto LABEL_21;
    case 1:
      int Value = (void *)uuid[4];
      if (!Value)
      {
        int Value = CFSetCreateMutable(0LL, 0LL, &long_set_callbacks);
        uuid[4] = Value;
      }

void sub_186BDB6FC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

void *std::__hash_table<CFUUIDBytes,std::hash<CFUUIDBytes>,std::equal_to<CFUUIDBytes>,std::allocator<CFUUIDBytes>>::find<CFUUIDBytes>( void *a1, void *a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0LL;
  }
  unint64_t v3 = a2[1] ^ *a2;
  uint8x8_t v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    unint64_t v5 = a2[1] ^ *a2;
    if (v3 >= *(void *)&v2) {
      unint64_t v5 = v3 % *(void *)&v2;
    }
  }

  else
  {
    unint64_t v5 = (*(void *)&v2 - 1LL) & v3;
  }

  __int128 v6 = *(void **)(*a1 + 8 * v5);
  if (!v6) {
    return 0LL;
  }
  uint64_t result = (void *)*v6;
  if (*v6)
  {
    do
    {
      unint64_t v8 = result[1];
      if (v3 == v8)
      {
        if (result[2] == *a2 && result[3] == a2[1]) {
          return result;
        }
      }

      else
      {
        if (v4.u32[0] > 1uLL)
        {
          if (v8 >= *(void *)&v2) {
            v8 %= *(void *)&v2;
          }
        }

        else
        {
          v8 &= *(void *)&v2 - 1LL;
        }

        if (v8 != v5) {
          return 0LL;
        }
      }

      uint64_t result = (void *)*result;
    }

    while (result);
  }

  return result;
}

uint64_t ___ZL24ktrace_translate_offsetsP21symbolication_contextP11UUIDContext_block_invoke( uint64_t a1, uint64_t a2)
{
  uint64_t v15 = *MEMORY[0x1895F89C0];
  memset(v7, 0, sizeof(v7));
  uint64_t v11 = 0LL;
  uint64_t v13 = 0LL;
  uint64_t v12 = 0LL;
  int v14 = 0;
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = *(void *)(a1 + 40);
  uint64_t v8 = 0LL;
  uint64_t v9 = a2;
  int v10 = 1;
  uint64_t result = translate_offset(v3, v4, v7, &v6, 0LL);
  if ((_DWORD)result) {
    return CSAddressSetAdd();
  }
  return result;
}

void ___ZL24ktrace_translate_offsetsP21symbolication_contextP11UUIDContext_block_invoke_2( uint64_t a1, CFStringRef theString1, const __CFSet *a3)
{
  uint64_t v6 = CFStringCompare(theString1, @"__TEXT*", 0LL);
  if (v6)
  {
    uint64_t v6 = (uint64_t)utf8(theString1);
    int v7 = 2;
  }

  else
  {
    int v7 = 5;
  }

  context[0] = MEMORY[0x1895F87A8];
  context[1] = 3221225472LL;
  context[2] = ___ZL24ktrace_translate_offsetsP21symbolication_contextP11UUIDContext_block_invoke_3;
  context[3] = &__block_descriptor_68_e8_v16__0Q8l;
  int v11 = v7;
  context[4] = v6;
  __int128 v9 = *(_OWORD *)(a1 + 32);
  uint64_t v10 = *(void *)(a1 + 48);
  CFSetApplyFunction(a3, (CFSetApplierFunction)CFSetApplierTrampoline, context);
}

uint64_t ___ZL24ktrace_translate_offsetsP21symbolication_contextP11UUIDContext_block_invoke_3( uint64_t a1, uint64_t a2)
{
  uint64_t v14 = *MEMORY[0x1895F89C0];
  __int128 v10 = 0u;
  *(void *)&__int128 v11 = 0LL;
  __int128 v12 = 0u;
  __int128 v13 = 0u;
  __int128 v9 = 0u;
  *((void *)&v11 + ktrace_session_set_default_event_names_enabled(global_session, 1) = a2;
  LODWORD(v12) = *(_DWORD *)(a1 + 64);
  uint64_t v3 = *(const char **)(a1 + 32);
  if (v3) {
    strlcpy((char *)&v10, v3, 0x11uLL);
  }
  uint64_t v4 = *(void *)(a1 + 40);
  uint64_t v5 = *(void *)(a1 + 48);
  int v8[2] = v11;
  v8[3] = v12;
  _DWORD v8[4] = v13;
  v8[0] = v9;
  v8[1] = v10;
  uint64_t result = translate_offset(v4, v5, v8, &v7, 0LL);
  if ((_DWORD)result) {
    return CSAddressSetAdd();
  }
  return result;
}

void ___ZL27ktrace_add_symbols_for_uuidP21symbolication_contextP11UUIDContext_block_invoke(uint64_t a1)
{
  uint64_t v3 = (uint64_t *)(a1 + 32);
  int8x8_t v2 = *(FILE ***)(a1 + 32);
  uint64_t v4 = *v2;
  if (*v2)
  {
    uint64_t v6 = *(unsigned __int8 **)(a1 + 40);
    uint64_t v5 = (unsigned __int8 **)(a1 + 40);
    uint64_t v7 = describe2((uint64_t)v2, v6);
    fprintf(v4, "failed to create signature for %s\n", (const char *)v7);
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_DEBUG)) {
      ___ZL27ktrace_add_symbols_for_uuidP21symbolication_contextP11UUIDContext_block_invoke_cold_1(v3, v5);
    }
  }

UInt8 *describe2(uint64_t a1, unsigned __int8 *uu)
{
  uint64_t v16 = *MEMORY[0x1895F89C0];
  uuid_unparse(uu, out);
  uint64_t v4 = (const __CFString *)*((void *)uu + 17);
  if (!v4)
  {
    if (*(void *)(a1 + 80))
    {
      CFMutableStringRef Mutable = CFStringCreateMutable(0LL, 0LL);
      CFStringAppendCString(Mutable, out, 0x8000100u);
      v13[0] = 0LL;
      v13[1] = v13;
      v13[2] = 0x2020000000LL;
      char v14 = 1;
      uint64_t v9 = *(void *)(a1 + 80);
      v12[0] = (void (*)(void, void))MEMORY[0x1895F87A8];
      v12[1] = (void (*)(void, void))3221225472LL;
      int v12[2] = (void (*)(void, void))___ZL9describe2P21symbolication_contextP11UUIDContext_block_invoke;
      void v12[3] = (void (*)(void, void))&unk_189F561C0;
      v12[4] = (void (*)(void, void))v13;
      void v12[5] = (void (*)(void, void))Mutable;
      ktrace_uuid_map_iterate_associated_paths(v9, (__int128 *)uu, v12);
      CFAutorelease(Mutable);
      uint64_t v7 = utf8(Mutable);
      _Block_object_dispose(v13, 8);
      return (UInt8 *)v7;
    }

    if (*((void *)uu + 18))
    {
      uint64_t v11 = *((void *)uu + 19);
      if (v11) {
        return aasprintf("%s /.vol/%lld/%lld", out, *((void *)uu + 18), v11);
      }
    }

    else if (*((_DWORD *)uu + 38))
    {
      return aasprintf("%s /.vol/?/%lld", out, *((void *)uu + 19));
    }

    return aasprintf("%s", out);
  }

  uint64_t v5 = utf8(v4);
  return aasprintf("%s %s", out, v5);
}

void sub_186BDBC24( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

void ___ZL27ktrace_add_symbols_for_uuidP21symbolication_contextP11UUIDContext_block_invoke_164(uint64_t a1)
{
  int8x8_t v2 = (uint64_t *)(a1 + 32);
  int appended = ktrace_file_append_start(*(void *)(*(void *)(a1 + 32) + 48LL), 32771, 0, 0);
  if (!appended
    || (uint64_t v4 = (uint64_t)appended,
        ktrace_file_append_data( *(void *)(*(void *)(a1 + 32) + 48LL),  (uint64_t)appended,  (UInt8 *)(a1 + 56),  24LL))
    || (uint64_t v5 = *(void *)(*(void *)(a1 + 32) + 48LL),
        BytePtr = (UInt8 *)CFDataGetBytePtr(*(CFDataRef *)(a1 + 40)),
        CFIndex Length = CFDataGetLength(*(CFDataRef *)(a1 + 40)),
        ktrace_file_append_data(v5, v4, BytePtr, Length)))
  {
    uint64_t v8 = *(FILE **)*v2;
    if (v8)
    {
      fwrite("failed to write symbols chunk\n", 0x1EuLL, 1uLL, v8);
      ktrace_log_init();
      if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_DEBUG)) {
        ___ZL27ktrace_add_symbols_for_uuidP21symbolication_contextP11UUIDContext_block_invoke_164_cold_1();
      }
    }
  }

  else
  {
    ktrace_file_append_finish(*(void *)(*v2 + 48), v4);
    __int128 v10 = *(FILE **)*v2;
    if (v10)
    {
      uint64_t v11 = describe2(*v2, *(unsigned __int8 **)(a1 + 48));
      fprintf(v10, "added symbols for %s\n", (const char *)v11);
      ktrace_log_init();
      if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_DEBUG)) {
        ___ZL27ktrace_add_symbols_for_uuidP21symbolication_contextP11UUIDContext_block_invoke_164_cold_2( v2,  (unsigned __int8 **)(a1 + 48));
      }
    }
  }

  uint64_t v9 = *(const void **)(a1 + 40);
  if (v9) {
    CFRelease(v9);
  }
}

void ___ZL9describe2P21symbolication_contextP11UUIDContext_block_invoke(uint64_t a1, const __CFString *a2)
{
  uint64_t v4 = *(void *)(*(void *)(a1 + 32) + 8LL);
  if (*(_BYTE *)(v4 + 24))
  {
    *(_BYTE *)(v4 + 24) = 0;
    uint64_t v5 = " ";
  }

  else
  {
    uint64_t v5 = ", ";
  }

  CFStringAppendCString(*(CFMutableStringRef *)(a1 + 40), v5, 0x8000100u);
  CFStringAppend(*(CFMutableStringRef *)(a1 + 40), a2);
}

void *std::__hash_table<CFUUIDBytes,std::hash<CFUUIDBytes>,std::equal_to<CFUUIDBytes>,std::allocator<CFUUIDBytes>>::__emplace_unique_key_args<CFUUIDBytes,CFUUIDBytes const&>( uint64_t a1, void *a2, _OWORD *a3)
{
  unint64_t v6 = a2[1] ^ *a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = a2[1] ^ *a2;
      if (v6 >= v7) {
        unint64_t v3 = v6 % v7;
      }
    }

    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }

    uint64_t v9 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      for (uint64_t i = *v9; i; uint64_t i = (void *)*i)
      {
        unint64_t v11 = i[1];
        if (v11 == v6)
        {
          if (i[2] == *a2 && i[3] == a2[1]) {
            return i;
          }
        }

        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7) {
              v11 %= v7;
            }
          }

          else
          {
            v11 &= v7 - 1;
          }

          if (v11 != v3) {
            break;
          }
        }
      }
    }
  }

  uint64_t i = operator new(0x20uLL);
  *uint64_t i = 0LL;
  i[1] = v6;
  *((_OWORD *)i + ktrace_session_set_default_event_names_enabled(global_session, 1) = *a3;
  float v13 = (float)(unint64_t)(*(void *)(a1 + 24) + 1LL);
  float v14 = *(float *)(a1 + 32);
  if (!v7 || (float)(v14 * (float)v7) < v13)
  {
    BOOL v15 = 1LL;
    if (v7 >= 3) {
      BOOL v15 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v7);
    unint64_t v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17) {
      size_t v18 = v17;
    }
    else {
      size_t v18 = v16;
    }
    std::__hash_table<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>>>::__rehash<true>( a1,  v18);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7) {
        unint64_t v3 = v6 % v7;
      }
      else {
        unint64_t v3 = v6;
      }
    }

    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
  }

  uint64_t v19 = *(void *)a1;
  __int128 v20 = *(void **)(*(void *)a1 + 8 * v3);
  if (v20)
  {
    *uint64_t i = *v20;
LABEL_42:
    *__int128 v20 = i;
    goto LABEL_43;
  }

  *uint64_t i = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(v19 + 8 * v3) = a1 + 16;
  if (*i)
  {
    unint64_t v21 = *(void *)(*i + 8LL);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v21 >= v7) {
        v21 %= v7;
      }
    }

    else
    {
      v21 &= v7 - 1;
    }

    __int128 v20 = (void *)(*(void *)a1 + 8 * v21);
    goto LABEL_42;
  }

void sub_186BDC020(_Unwind_Exception *a1)
{
}

void std::__hash_table<std::__hash_value_type<CFUUIDBytes,UUIDContext>,std::__unordered_map_hasher<CFUUIDBytes,std::__hash_value_type<CFUUIDBytes,UUIDContext>,std::hash<CFUUIDBytes>,std::equal_to<CFUUIDBytes>,true>,std::__unordered_map_equal<CFUUIDBytes,std::__hash_value_type<CFUUIDBytes,UUIDContext>,std::equal_to<CFUUIDBytes>,std::hash<CFUUIDBytes>,true>,std::allocator<std::__hash_value_type<CFUUIDBytes,UUIDContext>>>::clear( uint64_t a1)
{
  if (*(void *)(a1 + 24))
  {
    std::__hash_table<std::__hash_value_type<CFUUIDBytes,UUIDContext>,std::__unordered_map_hasher<CFUUIDBytes,std::__hash_value_type<CFUUIDBytes,UUIDContext>,std::hash<CFUUIDBytes>,std::equal_to<CFUUIDBytes>,true>,std::__unordered_map_equal<CFUUIDBytes,std::__hash_value_type<CFUUIDBytes,UUIDContext>,std::equal_to<CFUUIDBytes>,std::hash<CFUUIDBytes>,true>,std::allocator<std::__hash_value_type<CFUUIDBytes,UUIDContext>>>::__deallocate_node( a1,  *(void **)(a1 + 16));
    *(void *)(a1 + 16) = 0LL;
    uint64_t v2 = *(void *)(a1 + 8);
    if (v2)
    {
      for (uint64_t i = 0LL; i != v2; ++i)
        *(void *)(*(void *)a1 + 8 * i) = 0LL;
    }

    *(void *)(a1 + 24) = 0LL;
  }

void std::__hash_table<std::__hash_value_type<CFUUIDBytes,UUIDContext>,std::__unordered_map_hasher<CFUUIDBytes,std::__hash_value_type<CFUUIDBytes,UUIDContext>,std::hash<CFUUIDBytes>,std::equal_to<CFUUIDBytes>,true>,std::__unordered_map_equal<CFUUIDBytes,std::__hash_value_type<CFUUIDBytes,UUIDContext>,std::equal_to<CFUUIDBytes>,std::hash<CFUUIDBytes>,true>,std::allocator<std::__hash_value_type<CFUUIDBytes,UUIDContext>>>::__deallocate_node( uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      unint64_t v3 = (void *)*v2;
      UUIDContext::~UUIDContext((UUIDContext *)(v2 + 4));
      operator delete(v2);
      uint64_t v2 = v3;
    }

    while (v3);
  }

void KtraceSymbolicator::~KtraceSymbolicator(KtraceSymbolicator *this)
{
  uint64_t v2 = *(symbolication_context **)this;
  if (v2)
  {
    symbolication_context::~symbolication_context(v2);
    operator delete(v3);
  }

  std::__hash_table<std::__hash_value_type<CFUUIDBytes,CF::TypeRef>,std::__unordered_map_hasher<CFUUIDBytes,std::__hash_value_type<CFUUIDBytes,CF::TypeRef>,std::hash<CFUUIDBytes>,std::equal_to<CFUUIDBytes>,true>,std::__unordered_map_equal<CFUUIDBytes,std::__hash_value_type<CFUUIDBytes,CF::TypeRef>,std::equal_to<CFUUIDBytes>,std::hash<CFUUIDBytes>,true>,std::allocator<std::__hash_value_type<CFUUIDBytes,CF::TypeRef>>>::~__hash_table((uint64_t)this + 48);
  std::__hash_table<std::__hash_value_type<CFUUIDBytes,CS::TypeRef>,std::__unordered_map_hasher<CFUUIDBytes,std::__hash_value_type<CFUUIDBytes,CS::TypeRef>,std::hash<CFUUIDBytes>,std::equal_to<CFUUIDBytes>,true>,std::__unordered_map_equal<CFUUIDBytes,std::__hash_value_type<CFUUIDBytes,CS::TypeRef>,std::equal_to<CFUUIDBytes>,std::hash<CFUUIDBytes>,true>,std::allocator<std::__hash_value_type<CFUUIDBytes,CS::TypeRef>>>::~__hash_table((uint64_t)this + 8);
}

uint64_t std::__hash_table<std::__hash_value_type<CFUUIDBytes,CS::TypeRef>,std::__unordered_map_hasher<CFUUIDBytes,std::__hash_value_type<CFUUIDBytes,CS::TypeRef>,std::hash<CFUUIDBytes>,std::equal_to<CFUUIDBytes>,true>,std::__unordered_map_equal<CFUUIDBytes,std::__hash_value_type<CFUUIDBytes,CS::TypeRef>,std::equal_to<CFUUIDBytes>,std::hash<CFUUIDBytes>,true>,std::allocator<std::__hash_value_type<CFUUIDBytes,CS::TypeRef>>>::~__hash_table( uint64_t a1)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0LL;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<CFUUIDBytes,CS::TypeRef>,std::__unordered_map_hasher<CFUUIDBytes,std::__hash_value_type<CFUUIDBytes,CS::TypeRef>,std::hash<CFUUIDBytes>,std::equal_to<CFUUIDBytes>,true>,std::__unordered_map_equal<CFUUIDBytes,std::__hash_value_type<CFUUIDBytes,CS::TypeRef>,std::equal_to<CFUUIDBytes>,std::hash<CFUUIDBytes>,true>,std::allocator<std::__hash_value_type<CFUUIDBytes,CS::TypeRef>>>::__deallocate_node( uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      unint64_t v3 = (void *)*v2;
      CS::TypeRef::~TypeRef((CS::TypeRef *)(v2 + 4));
      operator delete(v2);
      uint64_t v2 = v3;
    }

    while (v3);
  }

void *std::__hash_table<std::__hash_value_type<CFUUIDBytes,UUIDContext>,std::__unordered_map_hasher<CFUUIDBytes,std::__hash_value_type<CFUUIDBytes,UUIDContext>,std::hash<CFUUIDBytes>,std::equal_to<CFUUIDBytes>,true>,std::__unordered_map_equal<CFUUIDBytes,std::__hash_value_type<CFUUIDBytes,UUIDContext>,std::equal_to<CFUUIDBytes>,std::hash<CFUUIDBytes>,true>,std::allocator<std::__hash_value_type<CFUUIDBytes,UUIDContext>>>::find<CFUUIDBytes>( void *a1, void *a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0LL;
  }
  unint64_t v3 = a2[1] ^ *a2;
  uint8x8_t v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    unint64_t v5 = a2[1] ^ *a2;
    if (v3 >= *(void *)&v2) {
      unint64_t v5 = v3 % *(void *)&v2;
    }
  }

  else
  {
    unint64_t v5 = (*(void *)&v2 - 1LL) & v3;
  }

  unint64_t v6 = *(void **)(*a1 + 8 * v5);
  if (!v6) {
    return 0LL;
  }
  uint64_t result = (void *)*v6;
  if (*v6)
  {
    do
    {
      unint64_t v8 = result[1];
      if (v8 == v3)
      {
        if (result[2] == *a2 && result[3] == a2[1]) {
          return result;
        }
      }

      else
      {
        if (v4.u32[0] > 1uLL)
        {
          if (v8 >= *(void *)&v2) {
            v8 %= *(void *)&v2;
          }
        }

        else
        {
          v8 &= *(void *)&v2 - 1LL;
        }

        if (v8 != v5) {
          return 0LL;
        }
      }

      uint64_t result = (void *)*result;
    }

    while (result);
  }

  return result;
}

void *std::__hash_table<std::__hash_value_type<CFUUIDBytes,UUIDContext>,std::__unordered_map_hasher<CFUUIDBytes,std::__hash_value_type<CFUUIDBytes,UUIDContext>,std::hash<CFUUIDBytes>,std::equal_to<CFUUIDBytes>,true>,std::__unordered_map_equal<CFUUIDBytes,std::__hash_value_type<CFUUIDBytes,UUIDContext>,std::equal_to<CFUUIDBytes>,std::hash<CFUUIDBytes>,true>,std::allocator<std::__hash_value_type<CFUUIDBytes,UUIDContext>>>::__emplace_unique_key_args<CFUUIDBytes,CFUUIDBytes&,UUIDContext>( uint64_t a1, void *a2, __int128 *a3, __int128 *a4)
{
  unint64_t v8 = a2[1] ^ *a2;
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v4 = a2[1] ^ *a2;
      if (v8 >= v9) {
        unint64_t v4 = v8 % v9;
      }
    }

    else
    {
      unint64_t v4 = (v9 - 1) & v8;
    }

    unint64_t v11 = *(void **)(*(void *)a1 + 8 * v4);
    if (v11)
    {
      __int128 v12 = (void *)*v11;
      if (*v11)
      {
        do
        {
          unint64_t v13 = v12[1];
          if (v13 == v8)
          {
            if (v12[2] == *a2 && v12[3] == a2[1]) {
              return v12;
            }
          }

          else
          {
            if (v10.u32[0] > 1uLL)
            {
              if (v13 >= v9) {
                v13 %= v9;
              }
            }

            else
            {
              v13 &= v9 - 1;
            }

            if (v13 != v4) {
              break;
            }
          }

          __int128 v12 = (void *)*v12;
        }

        while (v12);
      }
    }
  }

  uint64_t v15 = a1 + 16;
  unint64_t v16 = operator new(0xC8uLL);
  __int128 v17 = a4[8];
  __int128 v18 = a4[9];
  __int128 v19 = a4[6];
  v16[9] = a4[7];
  v16[10] = v17;
  v16[11] = v18;
  __int128 v20 = a4[4];
  __int128 v21 = a4[5];
  __int128 v22 = a4[2];
  void v16[5] = a4[3];
  void v16[6] = v20;
  __int128 v23 = *a3;
  v16[7] = v21;
  void v16[8] = v19;
  __int128 v24 = *a4;
  __int128 v25 = a4[1];
  v16[1] = v23;
  _OWORD v16[2] = v24;
  v35[0] = (uint64_t)v16;
  v35[1] = a1 + 16;
  *(void *)unint64_t v16 = 0LL;
  *((void *)v16 + ktrace_session_set_default_event_names_enabled(global_session, 1) = v8;
  *((void *)v16 + 24) = *((void *)a4 + 20);
  v16[3] = v25;
  v16[4] = v22;
  *((void *)a4 + 20) = 0LL;
  a4[8] = 0u;
  a4[9] = 0u;
  a4[6] = 0u;
  a4[7] = 0u;
  a4[4] = 0u;
  a4[5] = 0u;
  a4[2] = 0u;
  a4[3] = 0u;
  *a4 = 0u;
  a4[1] = 0u;
  char v36 = 1;
  float v26 = (float)(unint64_t)(*(void *)(a1 + 24) + 1LL);
  float v27 = *(float *)(a1 + 32);
  if (!v9 || (float)(v27 * (float)v9) < v26)
  {
    BOOL v28 = 1LL;
    if (v9 >= 3) {
      BOOL v28 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v29 = v28 | (2 * v9);
    unint64_t v30 = vcvtps_u32_f32(v26 / v27);
    if (v29 <= v30) {
      size_t v31 = v30;
    }
    else {
      size_t v31 = v29;
    }
    std::__hash_table<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>>>::__rehash<true>( a1,  v31);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v4 = v8 % v9;
      }
      else {
        unint64_t v4 = v8;
      }
    }

    else
    {
      unint64_t v4 = (v9 - 1) & v8;
    }
  }

  uint64_t v32 = *(void **)(*(void *)a1 + 8 * v4);
  if (v32)
  {
    *(void *)v35[0] = *v32;
    *uint64_t v32 = v35[0];
  }

  else
  {
    *(void *)v35[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v35[0];
    *(void *)(*(void *)a1 + 8 * v4) = v15;
    if (*(void *)v35[0])
    {
      unint64_t v33 = *(void *)(*(void *)v35[0] + 8LL);
      if ((v9 & (v9 - 1)) != 0)
      {
        if (v33 >= v9) {
          v33 %= v9;
        }
      }

      else
      {
        v33 &= v9 - 1;
      }

      *(void *)(*(void *)a1 + 8 * v33) = v35[0];
    }
  }

  __int128 v12 = (void *)v35[0];
  v35[0] = 0LL;
  ++*(void *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<CFUUIDBytes,UUIDContext>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<CFUUIDBytes,UUIDContext>,void *>>>>::reset[abi:ne180100]( v35,  0LL);
  return v12;
}

void sub_186BDC4D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<CFUUIDBytes,UUIDContext>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<CFUUIDBytes,UUIDContext>,void *>>>>::reset[abi:ne180100]( uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  *a1 = a2;
  if (v2)
  {
    if (*((_BYTE *)a1 + 16)) {
      UUIDContext::~UUIDContext((UUIDContext *)(v2 + 32));
    }
    operator delete((void *)v2);
  }

uint64_t UUIDContext::UUIDContext(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 160) = 0LL;
  *(_OWORD *)(a1 + 12_Block_object_dispose(va, 8) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + std::__hash_table<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>>>::~__hash_table((uint64_t)this + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 4_Block_object_dispose(va, 8) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  uuid_copy((unsigned __int8 *)a1, (const unsigned __int8 *)a2);
  unint64_t v4 = *(const void **)(a2 + 72);
  *(void *)(a1 + 136) = v4;
  *(void *)(a1 + 144) = *(void *)(a2 + 56);
  *(void *)(a1 + 152) = *(void *)(a2 + 64);
  if (v4) {
    CFRetain(v4);
  }
  return a1;
}

void UUIDContext::~UUIDContext(UUIDContext *this)
{
  uint64_t v2 = (const void *)*((void *)this + 4);
  if (v2) {
    CFRelease(v2);
  }
  unint64_t v3 = (const void *)*((void *)this + 5);
  if (v3) {
    CFRelease(v3);
  }
  if ((CSIsNull() & 1) == 0) {
    CSRelease();
  }
  if ((CSIsNull() & 1) == 0) {
    CSRelease();
  }
  unint64_t v4 = (const void *)*((void *)this + 14);
  if (v4) {
    CFRelease(v4);
  }
  unint64_t v5 = (const void *)*((void *)this + 13);
  if (v5) {
    CFRelease(v5);
  }
  unint64_t v6 = (const void *)*((void *)this + 17);
  if (v6) {
    CFRelease(v6);
  }
  unint64_t v7 = (const void *)*((void *)this + 16);
  if (v7) {
    CFRelease(v7);
  }
}

BOOL ktrace_find_executable(symbolication_context *a1, UUIDContext *uu)
{
  uint64_t v60 = *MEMORY[0x1895F89C0];
  if ((*((_WORD *)uu + 80) & 2) != 0) {
    return 1LL;
  }
  if ((*((_WORD *)uu + 80) & 0x400) != 0) {
    return 0LL;
  }
  unint64_t v3 = (void *)*((void *)a1 + 1);
  if (!v3) {
    return 0LL;
  }
  if (*v3)
  {
    v52[0] = MEMORY[0x1895F87A8];
    v52[1] = 3221225472LL;
    v52[2] = ___ZL22ktrace_find_executableP21symbolication_contextP11UUIDContext_block_invoke;
    v52[3] = &__block_descriptor_48_e21_v16__0____CFString__8l;
    v52[4] = v3;
    v52[5] = uu;
    unint64_t v5 = (const __CFString *)*((void *)uu + 17);
    if (v5)
    {
      ___ZL22ktrace_find_executableP21symbolication_contextP11UUIDContext_block_invoke((CFIndex)v52, v5);
    }

    else
    {
      uint64_t v6 = *((void *)a1 + 10);
      if (v6)
      {
        v51[0] = (void (*)(void, void))MEMORY[0x1895F87A8];
        v51[1] = (void (*)(void, void))3221225472LL;
        v51[2] = (void (*)(void, void))___ZL22ktrace_find_executableP21symbolication_contextP11UUIDContext_block_invoke_4;
        v51[3] = (void (*)(void, void))&unk_189F56578;
        v51[4] = (void (*)(void, void))v52;
        void v51[5] = (void (*)(void, void))uu;
        ktrace_uuid_map_iterate_associated_paths(v6, (__int128 *)uu, v51);
      }
    }

    if ((*((_WORD *)uu + 80) & 2) != 0) {
      return 1LL;
    }
  }

  unint64_t v7 = (const __CFArray *)v3[1];
  if (v7 && CFArrayGetCount(v7))
  {
    unint64_t v8 = (void *)*((void *)a1 + 4);
    if (!v8)
    {
      pthread_mutex_lock(&ktrace_find_executable(symbolication_context *,UUIDContext *)::lock);
      if (!*((void *)a1 + 4)) {
        *((void *)a1 + 4) = calculateRecursiveSearchCache((uint64_t)v3);
      }
      pthread_mutex_unlock(&ktrace_find_executable(symbolication_context *,UUIDContext *)::lock);
      unint64_t v8 = (void *)*((void *)a1 + 4);
    }

    *(_OWORD *)__ptr = *(_OWORD *)uu;
    unint64_t v9 = std::__hash_table<std::__hash_value_type<CFUUIDBytes,UUIDContext>,std::__unordered_map_hasher<CFUUIDBytes,std::__hash_value_type<CFUUIDBytes,UUIDContext>,std::hash<CFUUIDBytes>,std::equal_to<CFUUIDBytes>,true>,std::__unordered_map_equal<CFUUIDBytes,std::__hash_value_type<CFUUIDBytes,UUIDContext>,std::equal_to<CFUUIDBytes>,std::hash<CFUUIDBytes>,true>,std::allocator<std::__hash_value_type<CFUUIDBytes,UUIDContext>>>::find<CFUUIDBytes>( v8,  __ptr);
    if (v9)
    {
      uint8x8_t v10 = (const void *)v9[4];
      *((void *)uu + 13) = v10;
      CFRetain(v10);
      *((_WORD *)uu + 80) |= 2u;
      return 1LL;
    }
  }

  if (v3[2])
  {
    uint64_t v11 = *((void *)a1 + 1);
    if (v11)
    {
      *(void *)uint64_t v59 = -1LL;
      posix_spawn_file_actions_init(&v55);
      uuid_unparse_upper((const unsigned __int8 *)uu, out);
      __int128 v12 = utf8(*(const __CFString **)(v11 + 16));
      unint64_t v13 = (char *)aasprintf("%s %s", v12, out);
      pid_t v54 = -1;
      int v53 = pipe(v59);
      if (v53)
      {
        float v14 = *(FILE **)a1;
        if (*(void *)a1)
        {
          uint64_t v15 = __error();
          unint64_t v16 = strerror(*v15);
          fprintf(v14, "pipe failed: %s\n", v16);
        }

        if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
          ktrace_find_executable();
        }
      }

      else
      {
        __argv[0] = "sh";
        __argv[1] = "-c";
        __argv[2] = v13;
        __argv[3] = 0LL;
        posix_spawn_file_actions_addclose(&v55, 1);
        posix_spawn_file_actions_addclose(&v55, v59[0]);
        posix_spawn_file_actions_adddup2(&v55, v59[1], 1);
        __int128 v17 = _NSGetEnviron();
        int v18 = posix_spawn(&v54, "/bin/sh", &v55, 0LL, __argv, *v17);
        int v53 = v18;
        if (v18)
        {
          __int128 v19 = *(FILE **)a1;
          if (*(void *)a1)
          {
            __int128 v20 = strerror(v18);
            fprintf(v19, "posix_spawn failed: %s\n", v20);
          }

          if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
            ktrace_find_executable(&v53);
          }
        }

        else
        {
          close(v59[1]);
          v59[1] = -1;
          BOOL v28 = fdopen(v59[0], "r");
          if (v28)
          {
            __int128 v23 = v28;
            CFMutableDataRef Mutable = CFDataCreateMutable(0LL, 0LL);
            if (!Mutable) {
              ktrace_remotetime_update_params_cold_1();
            }
            __int128 v22 = Mutable;
            size_t v30 = fread(__ptr, 1uLL, 0x200uLL, v23);
            if (v30)
            {
              size_t v31 = v30;
              do
              {
                CFDataAppendBytes(v22, __ptr, v31);
                size_t v31 = fread(__ptr, 1uLL, 0x200uLL, v23);
              }

              while (v31);
            }

            if (feof(v23))
            {
              pid_t v32 = waitpid(v54, &v53, 0);
              if (v32 == v54)
              {
                if (v53)
                {
                  if (*(void *)a1) {
                    fprintf(*(FILE **)a1, "command failed: %s (exit status %d)\n", v13, v53);
                  }
                  if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
                    ktrace_find_executable();
                  }
                }

                else
                {
                  uint64_t v41 = (const __CFDictionary *)CFPropertyListCreateWithData(0LL, v22, 0LL, 0LL, 0LL);
                  if (v41)
                  {
                    __int128 v21 = v41;
                    CFStringRef v42 = cfstring(out);
                    dictionary = (const __CFDictionary *)cfdict_get_dictionary(v21, v42);
                    if (dictionary)
                    {
                      string = (const __CFString *)cfdict_get_string(dictionary, @"DBGSymbolRichExecutable");
                      if (string)
                      {
                        CFRange v45 = string;
                        uint64_t v46 = *(FILE **)a1;
                        if (*(void *)a1)
                        {
                          filePath = string;
                          uint64_t v47 = utf8(string);
                          fprintf(v46, "found executable: %s\n\tusing command: %s\n", v47, v13);
                          ktrace_log_init();
                          uint64_t v48 = (os_log_s *)ktrace_log;
                          BOOL v49 = os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_DEBUG);
                          CFRange v45 = filePath;
                          if (v49)
                          {
                            ktrace_find_executable(filePath, (uint64_t)v13, v48);
                            CFRange v45 = filePath;
                          }
                        }

                        *((void *)uu + 13) = CFURLCreateWithFileSystemPath(0LL, v45, kCFURLPOSIXPathStyle, 0);
                        *((_WORD *)uu + 80) |= 2u;
                        char v24 = 1;
LABEL_32:
                        posix_spawn_file_actions_destroy(&v55);
                        if (v59[0] != -1) {
                          close(v59[0]);
                        }
                        if (v59[1] != -1) {
                          close(v59[1]);
                        }
                        if (v23) {
                          fclose(v23);
                        }
                        if (v22) {
                          CFRelease(v22);
                        }
                        if (v21) {
                          CFRelease(v21);
                        }
                        if ((v24 & 1) != 0) {
                          return 1LL;
                        }
                        goto LABEL_44;
                      }
                    }

CFIndex ___ZL22ktrace_find_executableP21symbolication_contextP11UUIDContext_block_invoke( CFIndex result, CFStringRef theString)
{
  if (theString)
  {
    uint64_t v3 = result;
    BOOL result = CFStringGetLength(theString);
    if (result)
    {
      BOOL result = CFArrayGetCount(**(CFArrayRef **)(v3 + 32));
      if (result >= 1)
      {
        for (CFIndex i = 0LL; i < result; ++i)
        {
          CFTypeID ValueAtIndex = (void *)CFArrayGetValueAtIndex(**(CFArrayRef **)(v3 + 32), i);
          if (ValueAtIndex)
          {
            uint64_t v6 = ValueAtIndex;
            CFTypeID v7 = CFGetTypeID(ValueAtIndex);
            if (v7 != CFStringGetTypeID())
            {
              ktrace_log_init();
              if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
                __ktrace_uuid_map_learn_ariadne_process_dict_with_chunk_block_invoke_cold_6(&v12, v13);
              }
            }

            if ([v6 length])
            {
              if ([v6 characterAtIndex:0] == 47)
              {
                unint64_t v8 = (const __CFString *)[NSString stringWithFormat:@"%@/%@", v6, theString, v11];
              }

              else
              {
                uint64_t v10 = [objc_alloc_init(MEMORY[0x1896078A8]) currentDirectoryPath];
                unint64_t v8 = (const __CFString *)[NSString stringWithFormat:@"%@/%@/%@", v10, v6, theString];
              }

              unint64_t v9 = CFURLCreateWithFileSystemPath(0LL, v8, kCFURLPOSIXPathStyle, 0);
              if (CFURLResourceIsReachable(v9, 0LL)) {
                CSSymbolicatorForeachSymbolicatorWithURL();
              }
              CFRelease(v9);
            }
          }

          BOOL result = CFArrayGetCount(**(CFArrayRef **)(v3 + 32));
        }
      }
    }
  }

  return result;
}

uint64_t ___ZL22ktrace_find_executableP21symbolication_contextP11UUIDContext_block_invoke_2()
{
  return CSSymbolicatorForeachSymbolOwnerAtTime();
}

void *___ZL22ktrace_find_executableP21symbolication_contextP11UUIDContext_block_invoke_3( uint64_t a1, uint64_t a2, uint64_t a3)
{
  BOOL result = (void *)owner_matches_uuid(a2, a3, *(const unsigned __int8 **)(a1 + 32));
  if ((_DWORD)result)
  {
    if ((*(_WORD *)(*(void *)(a1 + 32) + 160LL) & 2) == 0)
    {
      BOOL result = (void *)CFRetain(*(CFTypeRef *)(a1 + 40));
      *(void *)(*(void *)(a1 + 32) + 104LL) = *(void *)(a1 + 40);
      *(_WORD *)(*(void *)(a1 + 32) + 160LL) |= 2u;
    }
  }

  return result;
}

const unsigned __int8 *owner_matches_uuid(uint64_t a1, uint64_t a2, const unsigned __int8 *a3)
{
  BOOL result = (const unsigned __int8 *)CSSymbolOwnerGetCFUUIDBytes();
  if (result) {
    return (const unsigned __int8 *)(uuid_compare(result, a3) == 0);
  }
  return result;
}

uint64_t ___ZL22ktrace_find_executableP21symbolication_contextP11UUIDContext_block_invoke_4(uint64_t result)
{
  if ((*(_WORD *)(*(void *)(result + 40) + 160LL) & 2) == 0) {
    return (*(uint64_t (**)(void))(*(void *)(result + 32) + 16LL))();
  }
  return result;
}

_OWORD *calculateRecursiveSearchCache(uint64_t a1)
{
  uint64_t v2 = operator new(0x28uLL);
  *uint64_t v2 = 0u;
  v2[1] = 0u;
  *((_DWORD *)v2 + _Block_object_dispose(va, 8) = 1065353216;
  id v13 = objc_alloc_init(MEMORY[0x1896078A8]);
  if (CFArrayGetCount(*(CFArrayRef *)(a1 + 8)) >= 1)
  {
    CFIndex v3 = 0LL;
    do
    {
      uint64_t v4 = a1;
      CFTypeID ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 8), v3);
      uint64_t v6 = ValueAtIndex;
      if (ValueAtIndex)
      {
        CFTypeID v7 = CFGetTypeID(ValueAtIndex);
        if (v7 != CFStringGetTypeID())
        {
          ktrace_log_init();
          if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
            __ktrace_uuid_map_learn_ariadne_process_dict_with_chunk_block_invoke_cold_6(&v15, v16);
          }
        }
      }

      unint64_t v8 = (void *)[v13 enumeratorAtPath:v6];
      if (v8)
      {
        unint64_t v9 = v8;
        uint64_t v10 = [v8 nextObject];
        if (v10)
        {
          uint64_t v11 = (void *)v10;
          do
          {
            if ([v11 hasSuffix:@".dSYM"])
            {
              [v9 skipDescendants];
            }

            else
            {
              float v14 = CFURLCreateWithFileSystemPath( 0,  (CFStringRef)[NSString stringWithFormat:@"%@/%@", v6, v11],  kCFURLPOSIXPathStyle,  0);
              if (CFURLResourceIsReachable(v14, 0LL)) {
                CSSymbolicatorForeachSymbolicatorWithURL();
              }
              CF::TypeRef::~TypeRef((const void **)&v14);
            }

            uint64_t v11 = (void *)[v9 nextObject];
          }

          while (v11);
        }
      }

      ++v3;
      a1 = v4;
    }

    while (v3 < CFArrayGetCount(*(CFArrayRef *)(v4 + 8)));
  }

  return v2;
}

void sub_186BDD1D4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
}

uint64_t ___ZL29calculateRecursiveSearchCacheP32ktrace_dsym_search_configuration_block_invoke()
{
  return CSSymbolicatorForeachSymbolOwnerAtTime();
}

void ___ZL29calculateRecursiveSearchCacheP32ktrace_dsym_search_configuration_block_invoke_2(uint64_t a1)
{
  uint64_t CFUUIDBytes = CSSymbolOwnerGetCFUUIDBytes();
  if (CFUUIDBytes)
  {
    CFIndex v3 = (_OWORD *)CFUUIDBytes;
    CFTypeID v7 = *(const void **)(a1 + 40);
    CFRetain(v7);
    uint64_t v4 = *(void *)(a1 + 32);
    unint64_t v8 = v3;
    unint64_t v5 = std::__hash_table<std::__hash_value_type<CFUUIDBytes,CF::TypeRef>,std::__unordered_map_hasher<CFUUIDBytes,std::__hash_value_type<CFUUIDBytes,CF::TypeRef>,std::hash<CFUUIDBytes>,std::equal_to<CFUUIDBytes>,true>,std::__unordered_map_equal<CFUUIDBytes,std::__hash_value_type<CFUUIDBytes,CF::TypeRef>,std::equal_to<CFUUIDBytes>,std::hash<CFUUIDBytes>,true>,std::allocator<std::__hash_value_type<CFUUIDBytes,CF::TypeRef>>>::__emplace_unique_key_args<CFUUIDBytes,std::piecewise_construct_t const&,std::tuple<CFUUIDBytes const&>,std::tuple<>>( v4,  v3,  (uint64_t)&std::piecewise_construct,  &v8);
    uint64_t v6 = (const void *)v5[4];
    if (v6) {
      CFRelease(v6);
    }
    void v5[4] = v7;
    CFTypeID v7 = 0LL;
    CF::TypeRef::~TypeRef(&v7);
  }

void sub_186BDD2D0(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t ktrace_find_arch_with_default(symbolication_context *a1, uint64_t a2, uint64_t a3)
{
  if ((*(_WORD *)(a2 + 160) & 4) != 0) {
    return 1LL;
  }
  ktrace_find_summary(a1, (UUIDContext *)a2);
  LOWORD(v6) = *(_WORD *)(a2 + 160);
  if ((v6 & 4) != 0) {
    return 1LL;
  }
  uint64_t v7 = *((void *)a1 + 1);
  if (v7)
  {
    if (*(_BYTE *)(v7 + 25))
    {
      uint64_t v8 = *((void *)a1 + 10);
      if (v8)
      {
        uint64_t v9 = *(void *)(v8 + 272);
        if (v9)
        {
          *(void *)(a2 + 120) = v9;
LABEL_10:
          *(_WORD *)(a2 + 160) = v6 | 4;
          return 1LL;
        }
      }
    }
  }

  ktrace_analyze_executable((FILE **)a1, (CFURLRef *)a2);
  if (a3)
  {
    *(void *)(a2 + 120) = a3;
    LOWORD(v6) = *(_WORD *)(a2 + 160);
    goto LABEL_10;
  }

  if ((*(_WORD *)(a2 + 160) & 4) == 0)
  {
    uint64_t v11 = *(FILE **)a1;
    if (*(void *)a1)
    {
      char v12 = describe2((uint64_t)a1, (unsigned __int8 *)a2);
      fprintf(v11, "could not figure out arch for %s\n", (const char *)v12);
      ktrace_log_init();
      if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_DEBUG)) {
        ktrace_find_arch_with_default((uint64_t)a1, (unsigned __int8 *)a2);
      }
    }
  }

  uint64_t v13 = *((void *)a1 + 1);
  if (v13)
  {
    int v14 = *(unsigned __int8 *)(v13 + 26);
    unsigned int v6 = *(unsigned __int16 *)(a2 + 160);
    if (v14)
    {
      *(void *)(a2 + 120) = 0LL;
      goto LABEL_10;
    }
  }

  else
  {
    unsigned int v6 = *(unsigned __int16 *)(a2 + 160);
  }

  return (v6 >> 2) & 1;
}

void ktrace_find_summary(symbolication_context *a1, UUIDContext *a2)
{
  uint64_t v2 = *((void *)a1 + 10);
  if (v2 && !*((void *)a2 + 16))
  {
    unint64_t v5 = *(void **)(v2 + 240);
    if (v5)
    {
      __int128 v17 = *(_OWORD *)a2;
      unsigned int v6 = std::__hash_table<std::__hash_value_type<CFUUIDBytes,UUIDContext>,std::__unordered_map_hasher<CFUUIDBytes,std::__hash_value_type<CFUUIDBytes,UUIDContext>,std::hash<CFUUIDBytes>,std::equal_to<CFUUIDBytes>,true>,std::__unordered_map_equal<CFUUIDBytes,std::__hash_value_type<CFUUIDBytes,UUIDContext>,std::equal_to<CFUUIDBytes>,std::hash<CFUUIDBytes>,true>,std::allocator<std::__hash_value_type<CFUUIDBytes,UUIDContext>>>::find<CFUUIDBytes>( v5,  &v17);
      if (v6)
      {
        uint64_t v7 = (const void *)v6[4];
        *((void *)a2 + 16) = v7;
        if (v7)
        {
          CFRetain(v7);
          return;
        }
      }
    }

    fsid v8 = (fsid)*((void *)a2 + 18);
    fsobj_id v9 = (fsobj_id)*((void *)a2 + 19);
    uint64_t v10 = (const __CFDictionary *)lookup_inode(*(const __CFDictionary **)(*((void *)a1 + 10) + 224LL), v8, v9);
    ktrace_find_summary_in_fat_summary(a2, v10);
    if (!*((void *)a2 + 16))
    {
      uint64_t v11 = (const void *)*((void *)a2 + 17);
      uint64_t v12 = *((void *)a1 + 10);
      if (!v11 || !*(void *)(v12 + 232)) {
        goto LABEL_17;
      }
      int Value = (const __CFDictionary *)CFDictionaryGetValue(*(CFDictionaryRef *)(v12 + 232), v11);
      int v14 = Value;
      if (Value)
      {
        CFTypeID v15 = CFGetTypeID(Value);
        if (v15 != CFDictionaryGetTypeID())
        {
          ktrace_log_init();
          if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
            ktrace_uuid_map_learn_tailspin_process_info_with_chunk_cold_5();
          }
          int v14 = 0LL;
        }
      }

      ktrace_find_summary_in_fat_summary(a2, v14);
      if (!*((void *)a2 + 16))
      {
        uint64_t v12 = *((void *)a1 + 10);
LABEL_17:
        if (*(void *)(v12 + 232))
        {
          v16[0] = (void (*)(void, void))MEMORY[0x1895F87A8];
          v16[1] = (void (*)(void, void))3221225472LL;
          _OWORD v16[2] = (void (*)(void, void))___ZL19ktrace_find_summaryP21symbolication_contextP11UUIDContext_block_invoke;
          v16[3] = (void (*)(void, void))&__block_descriptor_48_e21_v16__0____CFString__8l;
          v16[4] = (void (*)(void, void))a2;
          void v16[5] = (void (*)(void, void))a1;
          ktrace_uuid_map_iterate_associated_paths(v12, (__int128 *)a2, v16);
        }
      }
    }
  }

void ktrace_analyze_executable(FILE **a1, CFURLRef *a2)
{
  uint64_t v14 = *MEMORY[0x1895F89C0];
  if (ktrace_find_executable((symbolication_context *)a1, (UUIDContext *)a2))
  {
    CSSymbolicatorForeachSymbolicatorWithURL();
    if (((_WORD)a2[20] & 4) == 0)
    {
      uint64_t v4 = *a1;
      if (*a1)
      {
        unint64_t v5 = CFURLGetString(a2[13]);
        unsigned int v6 = utf8(v5);
        uint64_t v7 = describe2((uint64_t)a1, (unsigned __int8 *)a2);
        fprintf(v4, "failed to analyze executable at %s for %s\n", v6, (const char *)v7);
        ktrace_log_init();
        fsid v8 = (os_log_s *)ktrace_log;
        if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_DEBUG))
        {
          fsobj_id v9 = CFURLGetString(a2[13]);
          *(_DWORD *)__int128 buf = 136315394;
          uint64_t v11 = utf8(v9);
          __int16 v12 = 2080;
          uint64_t v13 = describe2((uint64_t)a1, (unsigned __int8 *)a2);
          _os_log_debug_impl( &dword_186BA3000,  v8,  OS_LOG_TYPE_DEBUG,  "failed to analyze executable at %s for %s\n",  buf,  0x16u);
        }
      }
    }
  }

const void *lookup_inode(const __CFDictionary *a1, fsid a2, fsobj_id a3)
{
  if (!a1) {
    return 0LL;
  }
  CFStringRef v5 = cfaasprintf("%llx", a2);
  int Value = (const __CFDictionary *)CFDictionaryGetValue(a1, v5);
  if (!Value) {
    return 0LL;
  }
  uint64_t v7 = Value;
  CFTypeID v8 = CFGetTypeID(Value);
  if (v8 != CFDictionaryGetTypeID())
  {
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
LABEL_9:
    }
      ktrace_uuid_map_learn_tailspin_process_info_with_chunk_cold_5();
    return 0LL;
  }

  CFStringRef v9 = cfaasprintf("%llx", a3);
  uint64_t v10 = CFDictionaryGetValue(v7, v9);
  uint64_t v11 = v10;
  if (v10)
  {
    CFTypeID v12 = CFGetTypeID(v10);
    if (v12 != CFDictionaryGetTypeID())
    {
      ktrace_log_init();
      if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
        goto LABEL_9;
      }
      return 0LL;
    }
  }

  return v11;
}

void ktrace_find_summary_in_fat_summary(UUIDContext *a1, CFDictionaryRef theDict)
{
  if (theDict)
  {
    int Value = (const __CFDictionary *)CFDictionaryGetValue(theDict, @"Images");
    if (Value)
    {
      uint64_t v4 = Value;
      CFTypeID v5 = CFGetTypeID(Value);
      if (v5 == CFDictionaryGetTypeID())
      {
        context[0] = MEMORY[0x1895F87A8];
        context[1] = 3221225472LL;
        context[2] = ___ZL34ktrace_find_summary_in_fat_summaryP11UUIDContextPK14__CFDictionary_block_invoke;
        context[3] = &__block_descriptor_40_e41_v24__0____CFString__8____CFDictionary__16l;
        context[4] = a1;
        CFDictionaryApplyFunction(v4, (CFDictionaryApplierFunction)CFDictionaryApplierTrampoline, context);
      }

      else
      {
        ktrace_log_init();
        if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
          ktrace_uuid_map_learn_tailspin_process_info_with_chunk_cold_5();
        }
      }
    }
  }

void ___ZL19ktrace_find_summaryP21symbolication_contextP11UUIDContext_block_invoke( uint64_t a1, const void *a2)
{
  if (!*(void *)(*(void *)(a1 + 32) + 128LL))
  {
    int Value = (const __CFDictionary *)CFDictionaryGetValue( *(CFDictionaryRef *)(*(void *)(*(void *)(a1 + 40) + 80LL) + 232LL),  a2);
    uint64_t v4 = Value;
    if (Value)
    {
      CFTypeID v5 = CFGetTypeID(Value);
      if (v5 != CFDictionaryGetTypeID())
      {
        ktrace_log_init();
        if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
          ktrace_uuid_map_learn_tailspin_process_info_with_chunk_cold_5();
        }
        uint64_t v4 = 0LL;
      }
    }

    ktrace_find_summary_in_fat_summary(*(UUIDContext **)(a1 + 32), v4);
  }

uint64_t ___ZL34ktrace_find_summary_in_fat_summaryP11UUIDContextPK14__CFDictionary_block_invoke( uint64_t result, const __CFString *a2, CFDictionaryRef theDict)
{
  uint64_t v11 = *MEMORY[0x1895F89C0];
  if (!*(void *)(*(void *)(result + 32) + 128LL))
  {
    uint64_t v5 = result;
    memset(uu, 0, sizeof(uu));
    int Value = (const __CFString *)CFDictionaryGetValue(theDict, @"UUID_String");
    uint64_t v7 = Value;
    if (Value)
    {
      CFTypeID v8 = CFGetTypeID(Value);
      if (v8 != CFStringGetTypeID())
      {
        ktrace_log_init();
        if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
          ktrace_uuid_map_learn_tailspin_symbols_with_chunk_cold_6();
        }
        uint64_t v7 = 0LL;
      }
    }

    CFStringRef v9 = utf8(v7);
    uuid_parse(v9, uu);
    BOOL result = uuid_compare(uu, *(const unsigned __int8 **)(v5 + 32));
    if (!(_DWORD)result)
    {
      if ((*(_WORD *)(*(void *)(v5 + 32) + 160LL) & 4) == 0)
      {
        utf8(a2);
        *(void *)(*(void *)(v5 + 32) + 12std::unique_ptr<std::__hash_node<std::__hash_value_type<CFUUIDBytes,UUIDContext>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<CFUUIDBytes,UUIDContext>,void *>>>>::reset[abi:ne180100]( (uint64_t *)va, 0LL) = CSArchitectureGetArchitectureForName();
        *(_WORD *)(*(void *)(v5 + 32) + 16std::unique_ptr<std::__hash_node<std::__hash_value_type<CFUUIDBytes,UUIDContext>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<CFUUIDBytes,UUIDContext>,void *>>>>::reset[abi:ne180100]( (uint64_t *)va, 0LL) = *(_WORD *)(*(void *)(v5 + 32) + 160LL) & 0xFFFB | (4 * (*(void *)(*(void *)(v5 + 32) + 120LL) != 0LL));
      }

      BOOL result = (uint64_t)CFRetain(theDict);
      *(void *)(*(void *)(v5 + 32) + 128LL) = theDict;
    }
  }

  return result;
}

uint64_t ___ZL25ktrace_analyze_executableP21symbolication_contextP11UUIDContext_block_invoke()
{
  return CSSymbolicatorForeachSymbolOwnerAtTime();
}

uint64_t ___ZL25ktrace_analyze_executableP21symbolication_contextP11UUIDContext_block_invoke_2( uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = (uint64_t)owner_matches_uuid(a2, a3, *(const unsigned __int8 **)(a1 + 32));
  if ((_DWORD)result)
  {
    *(void *)(*(void *)(a1 + 32) + 12std::unique_ptr<std::__hash_node<std::__hash_value_type<CFUUIDBytes,UUIDContext>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<CFUUIDBytes,UUIDContext>,void *>>>>::reset[abi:ne180100]( (uint64_t *)va, 0LL) = CSSymbolOwnerGetArchitecture();
    *(_WORD *)(*(void *)(a1 + 32) + 160LL) |= 4u;
    *(_DWORD *)(*(void *)(a1 + 32) + 8std::unique_ptr<std::__hash_node<std::__hash_value_type<CFUUIDBytes,UUIDContext>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<CFUUIDBytes,UUIDContext>,void *>>>>::reset[abi:ne180100]( (uint64_t *)va, 0LL) = 0;
    CSSymbolOwnerForeachSegment();
    *(_WORD *)(*(void *)(a1 + 32) + 160LL) |= 0x20u;
    uint64_t BaseAddress = CSSymbolOwnerGetBaseAddress();
    uint64_t v6 = *(void *)(a1 + 32);
    *(void *)(v6 + 4_Block_object_dispose(va, 8) = BaseAddress;
    *(_WORD *)(v6 + 160) = *(_WORD *)(v6 + 160) & 0xFFBF | ((BaseAddress != -1) << 6);
    else {
      __int16 v7 = 0;
    }
    *(_WORD *)(*(void *)(a1 + 32) + 16std::unique_ptr<std::__hash_node<std::__hash_value_type<CFUUIDBytes,UUIDContext>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<CFUUIDBytes,UUIDContext>,void *>>>>::reset[abi:ne180100]( (uint64_t *)va, 0LL) = *(_WORD *)(*(void *)(a1 + 32) + 160LL) & 0xFEFF | v7;
    uint64_t result = CSSymbolOwnerIsDyld();
    if ((_DWORD)result) {
      __int16 v8 = 512;
    }
    else {
      __int16 v8 = 0;
    }
    *(_WORD *)(*(void *)(a1 + 32) + 16std::unique_ptr<std::__hash_node<std::__hash_value_type<CFUUIDBytes,UUIDContext>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<CFUUIDBytes,UUIDContext>,void *>>>>::reset[abi:ne180100]( (uint64_t *)va, 0LL) = *(_WORD *)(*(void *)(a1 + 32) + 160LL) & 0xFDFF | v8;
    *(_WORD *)(*(void *)(a1 + 32) + 160LL) |= 0x80u;
  }

  return result;
}

uint64_t ___ZL25ktrace_analyze_executableP21symbolication_contextP11UUIDContext_block_invoke_3(uint64_t a1)
{
  uint64_t result = CSRegionGetName();
  if (result)
  {
    uint64_t result = strcmp("__TEXT SEGMENT", (const char *)result);
    if (!(_DWORD)result)
    {
      *(_WORD *)(*(void *)(a1 + 32) + 160LL) |= 8u;
      uint64_t result = CSRegionGetRange();
      *(void *)(*(void *)(a1 + 32) + 56LL) = v3;
    }
  }

  return result;
}

void CS::TypeRef::~TypeRef(CS::TypeRef *this)
{
  if ((CSIsNull() & 1) == 0) {
    CSRelease();
  }
}

uint64_t ___ZL16translate_offset10_CSTypeRef18ktrace_uuid_offsetPyPb_block_invoke(uint64_t a1)
{
  Name = (const char *)CSRegionGetName();
  size_t v3 = (int)strnlen((const char *)(a1 + 64), 0x10uLL);
  uint64_t result = strncmp(Name, (const char *)(a1 + 64), v3);
  if (!(_DWORD)result)
  {
    uint64_t result = (uint64_t)&Name[v3];
    if (Name[v3] == 32)
    {
      uint64_t v5 = *(void *)(*(void *)(a1 + 32) + 8LL);
      if (*(_BYTE *)(v5 + 24)) {
        ktrace_remotetime_update_params_cold_1();
      }
      *(_BYTE *)(v5 + 24) = 1;
      unint64_t v6 = *(void *)(a1 + 88);
      uint64_t result = CSRegionGetRange();
      if (v6 >= v7)
      {
        __int16 v8 = *(_BYTE **)(a1 + 136);
        if (v8)
        {
          if (*(_BYTE *)(a1 + 100)) {
            *__int16 v8 = 1;
          }
        }
      }

      else
      {
        uint64_t result = CSRegionGetRange();
        **(void **)(a1 + 12_Block_object_dispose(va, 8) = result + *(void *)(a1 + 88);
        *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = 1;
      }
    }
  }

  return result;
}

void ___ZL18owner_is_text_exec10_CSTypeRef_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *MEMORY[0x1895F89C0];
  CSRegionGetSegmentName(a2, a3, &v5);
  if (v5 == 0x455F545845545F5FLL && v6 == 4408664) {
    *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = 1;
  }
}

uint64_t ___ZL42ktrace_address_space_create_cssymbolicatorP21symbolication_contextP20ktrace_address_space_block_invoke( uint64_t result)
{
  return result;
}

uint64_t __Block_byref_object_copy__201(uint64_t result, uint64_t a2)
{
  *(void *)(result + 4_Block_object_dispose(va, 8) = *(void *)(a2 + 48);
  return result;
}

const __CFDictionary **___ZL42ktrace_address_space_create_cssymbolicatorP21symbolication_contextP20ktrace_address_space_block_invoke_204( uint64_t a1, SymbolOwner *a2)
{
  uint64_t result = (const __CFDictionary **)find_or_create_uuid(*(symbolication_context **)(a1 + 48), a2);
  if (!result) {
    ktrace_remotetime_update_params_cold_1();
  }
  int v5 = *((_DWORD *)a2 + 4);
  if (v5 != 1)
  {
    if (v5 == 5 || v5 == 2) {
      ++*(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
    }
    return result;
  }

  uint64_t v7 = (uint64_t)result;
  ktrace_find_segment_count(*(symbolication_context **)(a1 + 48), result);
  if ((*(_WORD *)(v7 + 160) & 0x20) != 0)
  {
    uint64_t v9 = *(int *)(v7 + 80);
  }

  else
  {
    ktrace_find_text_size(*(symbolication_context **)(a1 + 48), (UUIDContext *)v7);
    __int16 v8 = *(_WORD *)(v7 + 160);
    if ((v8 & 8) != 0)
    {
      ++*(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
      __int16 v8 = *(_WORD *)(v7 + 160);
    }

    if ((v8 & 0x10) == 0) {
      goto LABEL_17;
    }
    uint64_t v9 = 1LL;
  }

  *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) += v9;
LABEL_17:
  ktrace_find_image_type(*(symbolication_context **)(a1 + 48), (UUIDContext *)v7);
  uint64_t result = (const __CFDictionary **)ktrace_find_arch_with_default(*(symbolication_context **)(a1 + 48), v7, 0LL);
  if ((*(_WORD *)(v7 + 160) & 4) != 0)
  {
    uint64_t v10 = *(void *)(*(void *)(a1 + 40) + 8LL);
    if ((*(_WORD *)(v7 + 160) & 0x100) != 0 || !*(void *)(v10 + 48)) {
      *(void *)(v10 + 4_Block_object_dispose(va, 8) = *(void *)(v7 + 120);
    }
  }

  return result;
}

void *find_or_create_uuid(symbolication_context *a1, SymbolOwner *a2)
{
  uint64_t v6 = *MEMORY[0x1895F89C0];
  UUIDContext::UUIDContext((UUIDContext *)v5, a2);
  uuid = find_or_create_uuid((uint64_t)a1, v5);
  UUIDContext::~UUIDContext((UUIDContext *)v5);
  return uuid;
}

void sub_186BDE050( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void ktrace_find_segment_count(symbolication_context *a1, const __CFDictionary **a2)
{
  if (((_WORD)a2[20] & 0x20) == 0)
  {
    ktrace_find_summary(a1, (UUIDContext *)a2);
    uint64_t v4 = a2[16];
    if (v4)
    {
      int Value = (const __CFArray *)CFDictionaryGetValue(v4, @"Segments");
      if (Value)
      {
        uint64_t v6 = Value;
        CFTypeID v7 = CFGetTypeID(Value);
        if (v7 == CFArrayGetTypeID())
        {
          *((_DWORD *)a2 + 20) = CFArrayGetCount(v6);
          *((_WORD *)a2 + 80) |= 0x20u;
          return;
        }

        ktrace_log_init();
        if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
          __ktrace_uuid_map_learn_ariadne_process_dict_with_chunk_block_invoke_cold_11();
        }
      }
    }

    ktrace_analyze_executable((FILE **)a1, a2);
    if (!*((_DWORD *)a2 + 20))
    {
      __int16 v8 = *(FILE **)a1;
      if (*(void *)a1)
      {
        uint64_t v9 = describe2((uint64_t)a1, (unsigned __int8 *)a2);
        fprintf(v8, "could not figure segment count for %s\n", (const char *)v9);
        ktrace_log_init();
        if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_DEBUG)) {
          ktrace_find_segment_count((uint64_t)a1, (unsigned __int8 *)a2);
        }
      }
    }
  }

void ktrace_find_text_size(symbolication_context *a1, UUIDContext *a2)
{
  if ((*((_WORD *)a2 + 80) & 8) != 0) {
    return;
  }
  v8[0] = MEMORY[0x1895F87A8];
  v8[1] = 3221225472LL;
  int v8[2] = ___ZL21ktrace_find_text_sizeP21symbolication_contextP11UUIDContext_block_invoke;
  v8[3] = &__block_descriptor_40_e24_v32__0r_8__CSRange_QQ_16l;
  _DWORD v8[4] = a2;
  ktrace_iterate_segments(a1, a2, (uint64_t)v8);
  if ((*((_WORD *)a2 + 80) & 8) != 0) {
    return;
  }
  ktrace_find_summary(a1, a2);
  uint64_t v4 = (const __CFDictionary *)*((void *)a2 + 16);
  if (!v4 || (int Value = (const __CFNumber *)CFDictionaryGetValue(v4, @"TextSize")) == 0LL)
  {
LABEL_10:
    ktrace_analyze_executable((FILE **)a1, (CFURLRef *)a2);
    return;
  }

  uint64_t v6 = Value;
  CFTypeID v7 = CFGetTypeID(Value);
  if (v7 != CFNumberGetTypeID())
  {
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
      ktrace_uuid_map_learn_tailspin_process_info_with_chunk_cold_6();
    }
    goto LABEL_10;
  }

  uint64_t valuePtr = 0LL;
  if (!CFNumberGetValue(v6, kCFNumberLongLongType, &valuePtr)) {
    ktrace_remotetime_update_params_cold_1();
  }
  *((void *)a2 + 7) = valuePtr;
  *((_WORD *)a2 + 80) |= 8u;
}

uint64_t ktrace_find_image_type(symbolication_context *a1, UUIDContext *a2)
{
  if ((*((_WORD *)a2 + 80) & 0x80) != 0) {
    return 1LL;
  }
  ktrace_find_summary(a1, a2);
  uint64_t v4 = (const __CFDictionary *)*((void *)a2 + 16);
  if (v4)
  {
    int Value = (const __CFNumber *)CFDictionaryGetValue(v4, @"Flags");
    if (Value)
    {
      uint64_t v6 = Value;
      CFTypeID v7 = CFGetTypeID(Value);
      if (v7 == CFNumberGetTypeID())
      {
        uint64_t valuePtr = 0LL;
        if (!CFNumberGetValue(v6, kCFNumberLongLongType, &valuePtr)) {
          ktrace_remotetime_update_params_cold_1();
        }
        unsigned int v8 = (unsigned __int16)valuePtr;
        goto LABEL_17;
      }

      ktrace_log_init();
      if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
        ktrace_uuid_map_learn_tailspin_process_info_with_chunk_cold_6();
      }
    }

    unsigned int v8 = 0;
LABEL_17:
    *((_WORD *)a2 + 80) = (16 * v8) & 0x100 | (((v8 >> 6) & 1) << 9) | *((_WORD *)a2 + 80) & 0xFCFF | 0x80;
    return 1LL;
  }

  ktrace_analyze_executable((FILE **)a1, (CFURLRef *)a2);
  if ((*((_WORD *)a2 + 80) & 0x80) == 0)
  {
    uint64_t v9 = *(FILE **)a1;
    if (*(void *)a1)
    {
      uint64_t v10 = describe2((uint64_t)a1, (unsigned __int8 *)a2);
      fprintf(v9, "could not figure out image type for %s\n", (const char *)v10);
      ktrace_log_init();
      if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_DEBUG)) {
        ktrace_find_image_type((uint64_t)a1, (unsigned __int8 *)a2);
      }
    }
  }

  uint64_t v11 = *((void *)a1 + 1);
  if (v11)
  {
    int v12 = *(unsigned __int8 *)(v11 + 27);
    unsigned int v13 = *((unsigned __int16 *)a2 + 80);
    if (v12)
    {
      v13 |= 0x80u;
      *((_WORD *)a2 + 80) = v13;
    }
  }

  else
  {
    unsigned int v13 = *((unsigned __int16 *)a2 + 80);
  }

  return (v13 >> 7) & 1;
}

void ___ZL42ktrace_address_space_create_cssymbolicatorP21symbolication_contextP20ktrace_address_space_block_invoke_2( void *a1, __int128 *a2, uint64_t *a3)
{
  v68[7] = *(void (**)(void, void))MEMORY[0x1895F89C0];
  uint64_t v3 = *(void *)(a1[4] + 8LL);
  uint64_t v4 = *(void *)(a1[5] + 8LL);
  int v5 = (symbolication_context *)a1[7];
  uint64_t v43 = *a3;
  unsigned int v6 = *((_DWORD *)a2 + 4);
  if (v6 > 5) {
    goto LABEL_10;
  }
  int v7 = 1 << v6;
  if ((v7 & 0x26) == 0)
  {
    if ((v7 & 0x18) != 0) {
      return;
    }
LABEL_10:
    ktrace_address_space_deep_iterate_symbol_owners();
  }

  unsigned int v8 = a2;
  uint64_t v9 = *(void *)(*(void *)(a1[6] + 8LL) + 48LL);
  int v10 = *(_DWORD *)(a1[8] + 32LL);
  uuid = (int64x2_t *)find_or_create_uuid(v5, (SymbolOwner *)a2);
  if (uuid)
  {
    int v12 = uuid;
    if ((uuid[10].i16[0] & 1) == 0)
    {
      if (*((_DWORD *)v8 + 4) == 5)
      {
        uint64_t v13 = *((void *)v5 + 1);
        if (v13 && *(_BYTE *)(v13 + 28))
        {
          *((void *)v8 + 3) = 0LL;
          *((void *)v8 + 4) = 0LL;
          *((void *)v8 + 5) = 0LL;
          *((_DWORD *)v8 + 4) = 2;
          strlcpy((char *)v8 + 24, (const char *)(*((void *)v5 + 1) + 28LL), 0x11uLL);
        }

        else
        {
          *(void *)&__int128 v47 = 0LL;
          *((void *)&v47 + ktrace_session_set_default_event_names_enabled(global_session, 1) = &v47;
          *(void *)&__int128 v48 = 0x2020000000LL;
          BYTE8(v4_Block_object_dispose(va, 8) = 0;
          *(void *)__int128 v61 = MEMORY[0x1895F87A8];
          uint64_t v62 = 3221225472LL;
          uint64_t v63 = (uint64_t)___ZL23fix_tailspin_kext_ownerP11SymbolOwnerP21symbolication_contextP11UUIDContext_block_invoke;
          uint64_t v64 = (uint64_t (*)(uint64_t, uint64_t))&unk_189F56758;
          kcdata_iter v65 = (uint64_t (*)())&v47;
          if (!ktrace_iterate_segments(v5, (UUIDContext *)uuid, (uint64_t)v61))
          {
            __int128 v19 = (uint64_t *)&v47;
LABEL_73:
            _Block_object_dispose(v19, 8);
            return;
          }

          if (*((_DWORD *)v8 + 4) != 2)
          {
            *((void *)v8 + 3) = 0LL;
            *((void *)v8 + 4) = 0LL;
            *((void *)v8 + 5) = 0LL;
            *((_DWORD *)v8 + 4) = 2;
          }

          if (*(_BYTE *)(*((void *)&v47 + 1) + 24LL)) {
            uint64_t v14 = "__TEXT_EXEC";
          }
          else {
            uint64_t v14 = "__TEXT";
          }
          strlcpy((char *)v8 + 24, v14, 0x11uLL);
          _Block_object_dispose(&v47, 8);
        }
      }

      uint64_t v57 = 0LL;
      int v58 = &v57;
      uint64_t v59 = 0x2020000000LL;
      uint64_t v60 = 0LL;
      uint64_t v53 = 0LL;
      pid_t v54 = &v53;
      uint64_t v55 = 0x2020000000LL;
      int v56 = 0;
      int arch_with_default = ktrace_find_arch_with_default(v5, (uint64_t)v12, v9);
      if (!v43)
      {
        if (!arch_with_default) {
          goto LABEL_29;
        }
        LOBYTE(arch_with_default) = ktrace_find_image_type(v5, (UUIDContext *)v12);
      }

      if ((arch_with_default & 1) != 0)
      {
        __int128 v51 = 0u;
        __int128 v52 = 0u;
        __int128 v49 = 0u;
        int64x2_t v50 = 0u;
        __int128 v47 = 0u;
        __int128 v48 = 0u;
        if (*((_DWORD *)v8 + 4) == 1)
        {
          ktrace_find_segment_count(v5, (const __CFDictionary **)v12);
          if ((v12[10].i16[0] & 0x20) == 0)
          {
            ktrace_find_text_size(v5, (UUIDContext *)v12);
            __int16 v16 = v12[10].i16[0];
            if ((v16 & 8) != 0)
            {
              SymbolOwner::operator=((uint64_t)&v47, v8);
              if ((_DWORD)v48 != 2)
              {
                *((void *)&v48 + ktrace_session_set_default_event_names_enabled(global_session, 1) = 0LL;
                __int128 v49 = 0uLL;
                LODWORD(v4_Block_object_dispose(va, 8) = 2;
              }

              v50.i64[1] = v12[3].i64[1] + 1;
              int v18 = "__TEXT";
            }

            else
            {
              if ((v16 & 0x10) == 0) {
                goto LABEL_35;
              }
              SymbolOwner::operator=((uint64_t)&v47, v8);
              if ((_DWORD)v48 != 2)
              {
                *((void *)&v48 + ktrace_session_set_default_event_names_enabled(global_session, 1) = 0LL;
                __int128 v49 = 0uLL;
                LODWORD(v4_Block_object_dispose(va, 8) = 2;
              }

              int64x2_t v17 = vdupq_n_s64(1uLL);
              v17.i64[0] = v50.i64[0];
              int64x2_t v50 = vaddq_s64(v12[4], v17);
              int v18 = "__TEXT_EXEC";
            }

            unsigned int v8 = &v47;
            strlcpy((char *)&v48 + 8, v18, 0x11uLL);
          }
        }

LABEL_35:
        int v20 = *((_DWORD *)v8 + 4);
        if (v20 == 1)
        {
          __int16 v21 = v12[10].i16[0];
          if ((v21 & 0x20) == 0)
          {
            v12[10].i16[0] = v21 | 1;
LABEL_71:
            SymbolOwner::~SymbolOwner((SymbolOwner *)&v47);
            goto LABEL_72;
          }

          v58[3] = *(void *)(v4 + 24);
          *(void *)(v4 + 24) += 40LL * v12[5].i32[0];
          *(void *)__int128 v61 = 0LL;
          uint64_t v62 = (uint64_t)v61;
          uint64_t v63 = 0x2020000000LL;
          LODWORD(vstd::__hash_table<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>>>::~__hash_table((uint64_t)this + 64) = 0;
          if ((ktrace_find_base_address(v5, (UUIDContext *)v12) & 1) == 0) {
            goto LABEL_48;
          }
          v45[0] = MEMORY[0x1895F87A8];
          v45[1] = 3321888768LL;
          v45[2] = ___ZL9fill_infoPP25_CSBinaryImageInformationPP30_CSBinaryRelocationInformationP21symbolication_contextP11SymbolOwner15optional_uint6415_CSArchitecturei_block_invoke;
          v45[3] = &unk_189F566D8;
          int v46 = v10;
          v45[4] = &v57;
          v45[5] = v61;
          v45[8] = v5;
          v45[9] = v8;
          v45[10] = v43;
          v45[6] = &v53;
          void v45[7] = v12;
          if (!ktrace_iterate_segments(v5, (UUIDContext *)v12, (uint64_t)v45))
          {
LABEL_48:
            v12[10].i16[0] |= 1u;
            _Block_object_dispose(v61, 8);
            goto LABEL_71;
          }

          _Block_object_dispose(v61, 8);
          int v20 = *((_DWORD *)v8 + 4);
        }

        if (v20 == 2)
        {
          *(void *)__int128 v61 = 0LL;
          uint64_t v62 = (uint64_t)v61;
          uint64_t v63 = 0x3812000000LL;
          uint64_t v64 = __Block_byref_object_copy__212;
          kcdata_iter v65 = __Block_byref_object_dispose__213;
          uint64_t v22 = *((void *)v8 + 7);
          __int128 v66 = "";
          uint64_t v67 = v22;
          if (!v22)
          {
            __int128 v23 = (char *)v8 + 24;
            if (strcmp((const char *)v8 + 24, "__TEXT")
              || ((ktrace_find_text_size(v5, (UUIDContext *)v12), (v12[10].i16[0] & 8) != 0)
                ? (uint64_t v27 = v12[3].i64[1] + 1, *(void *)(v62 + 48) = v27)
                : (uint64_t v27 = *(void *)(v62 + 48)),
                  !v27))
            {
              v44[0] = MEMORY[0x1895F87A8];
              v44[1] = 3221225472LL;
              int v44[2] = ___ZL9fill_infoPP25_CSBinaryImageInformationPP30_CSBinaryRelocationInformationP21symbolication_contextP11SymbolOwner15optional_uint6415_CSArchitecturei_block_invoke_215;
              v44[3] = &unk_189F56710;
              uint64_t v44[4] = v61;
              v44[5] = v8;
              ktrace_iterate_segments(v5, (UUIDContext *)v12, (uint64_t)v44);
              if (!*(void *)(v62 + 48))
              {
                char v24 = *(FILE **)v5;
                if (*(void *)v5)
                {
                  __int128 v25 = describe2((uint64_t)v5, (unsigned __int8 *)v12);
                  fprintf(v24, "coulnd't figure out segment length for %s of %s\n", v23, (const char *)v25);
                  ktrace_log_init();
                  if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_DEBUG))
                  {
                    float v26 = describe2((uint64_t)v5, (unsigned __int8 *)v12);
                    ___ZL42ktrace_address_space_create_cssymbolicatorP21symbolication_contextP20ktrace_address_space_block_invoke_2_cold_2( (uint64_t)v23,  (uint64_t)v26,  (uint64_t)v68);
                  }
                }

                goto LABEL_48;
              }
            }
          }

          BOOL v28 = *(void **)(v4 + 24);
          unint64_t v29 = v58;
          *BOOL v28 = *((void *)v8 + 6);
          *(void *)(v4 + 24) = v28 + 5;
          v29[3] = (uint64_t)v28;
          if (v43)
          {
            uint64_t v30 = optional_uint64::value((optional_uint64 *)&v43);
            *(void *)v58[3] += v30;
          }

          uint64_t v31 = *(void *)v58[3];
          uint64_t v32 = optional_uint64::value((optional_uint64 *)(v62 + 48));
          *(void *)(v58[3] + _Block_object_dispose(va, 8) = v32 + v31;
          uint64_t v33 = v58[3];
          char v34 = *((_BYTE *)v8 + 40);
          *(_OWORD *)(v33 + 16) = *(__int128 *)((char *)v8 + 24);
          *(_BYTE *)(v33 + 32) = v34;
          ++*((_DWORD *)v54 + 6);
          _Block_object_dispose(v61, 8);
        }

        uint64_t v35 = *(void *)(v3 + 24);
        *(void *)(v3 + 24) = v35 + 64;
        *(_OWORD *)(v35 + 16) = *v8;
        *(void *)(v35 + 32) = v12[7].i64[1];
        char v36 = (const __CFString *)v12[8].i64[1];
        if (v36)
        {
          unint64_t v37 = utf8(v36);
        }

        else
        {
          uint64_t v38 = *((void *)v5 + 10);
          v68[0] = (void (*)(void, void))MEMORY[0x1895F87A8];
          v68[1] = (void (*)(void, void))3221225472LL;
          v68[2] = (void (*)(void, void))___ZL9fill_infoPP25_CSBinaryImageInformationPP30_CSBinaryRelocationInformationP21symbolication_contextP11SymbolOwner15optional_uint6415_CSArchitecturei_block_invoke_217;
          v68[3] = (void (*)(void, void))&__block_descriptor_56_e21_v16__0____CFString__8l;
          v68[4] = (void (*)(void, void))v35;
          v68[5] = (void (*)(void, void))v12;
          v68[6] = (void (*)(void, void))v5;
          ktrace_uuid_map_iterate_associated_paths(v38, (__int128 *)v12->i8, v68);
          unint64_t v37 = *(char **)(v35 + 40);
          if (v37) {
            goto LABEL_60;
          }
          unint64_t v37 = "<unknown>";
        }

        *(void *)(v35 + 40) = v37;
LABEL_60:
        *(_DWORD *)(v35 + 60) = 0;
        int v39 = (v12[10].u16[0] >> 4) & 0x10;
        *(_DWORD *)(v35 + 60) = v39;
        if ((v12[10].i16[0] & 0x200) != 0) {
          *(_DWORD *)(v35 + 60) = v39 | 0x40;
        }
        uint64_t v40 = *((void *)v5 + 10);
        if (v40 && (*(_BYTE *)(v40 + 288) || *(_BYTE *)(v40 + 289))
          || (uint64_t v41 = *((void *)v5 + 1)) != 0 && *(_BYTE *)(v41 + 46))
        {
          if (v37)
          {
            CFStringRef v42 = basename_r(v37, v61);
            if (!strcmp("dyld", v42)) {
              *(_DWORD *)(v35 + 60) |= 0x40u;
            }
          }
        }

        *(void *)(v35 + 4_Block_object_dispose(va, 8) = v58[3];
        *(_DWORD *)(v35 + 56) = *((_DWORD *)v54 + 6);
        goto LABEL_71;
      }

void sub_186BDEB70( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, char a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, char a43, uint64_t a44, uint64_t a45, uint64_t a46, char a47, uint64_t a48, uint64_t a49, uint64_t a50,char a51)
{
}

void UUIDContext::UUIDContext(UUIDContext *this, SymbolOwner *a2)
{
  *((void *)this + 20) = 0LL;
  *((_OWORD *)this + _Block_object_dispose(va, 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + ktrace_session_set_default_event_names_enabled(global_session, 1) = 0u;
  __int128 v8 = *(_OWORD *)a2;
  uuid_copy((unsigned __int8 *)this, (const unsigned __int8 *)&v8);
  uint64_t v4 = (const void *)*((void *)a2 + 10);
  *((void *)this + 17) = v4;
  *((void *)this + 1_Block_object_dispose(va, 8) = *((void *)a2 + 8);
  *((void *)this + 19) = *((void *)a2 + 9);
  if (v4) {
    CFRetain(v4);
  }
  if (*((_DWORD *)a2 + 4) == 1)
  {
    if (*((void *)a2 + 3))
    {
      *((void *)this + 7) = optional_uint64::value((SymbolOwner *)((char *)a2 + 24));
      *((_WORD *)this + 80) |= 8u;
    }

    int v5 = (SymbolOwner *)((char *)a2 + 32);
    if (*((void *)a2 + 4))
    {
      uint64_t v7 = *((void *)a2 + 5);
      unsigned int v6 = (SymbolOwner *)((char *)a2 + 40);
      if (v7)
      {
        *((void *)this + 9) = optional_uint64::value(v6);
        *((void *)this + _Block_object_dispose(va, 8) = optional_uint64::value(v5);
        *((_WORD *)this + 80) |= 0x10u;
      }
    }
  }

BOOL ktrace_iterate_segments(symbolication_context *a1, UUIDContext *a2, uint64_t a3)
{
  valuePtr[2] = *MEMORY[0x1895F89C0];
  uint64_t v35 = 0LL;
  char v36 = &v35;
  uint64_t v37 = 0x2020000000LL;
  ktrace_find_summary(a1, a2);
  int v5 = (const __CFDictionary *)*((void *)a2 + 16);
  if (!v5 || (Value = (const __CFArray *)CFDictionaryGetValue(v5, @"Segments"), (uint64_t v7 = Value) == 0LL))
  {
LABEL_36:
    *((_BYTE *)v36 + 24) = 0;
    BOOL executable = ktrace_find_executable(a1, a2);
    BOOL v28 = v36;
    *((_BYTE *)v36 + 24) = executable;
    if (executable)
    {
      *((_BYTE *)v28 + 24) = 0;
      CSSymbolicatorForeachSymbolicatorWithURL();
      BOOL v26 = *((_BYTE *)v36 + 24) != 0;
    }

    else
    {
      BOOL v26 = 0LL;
    }

    goto LABEL_43;
  }

  CFTypeID v8 = CFGetTypeID(Value);
  if (v8 != CFArrayGetTypeID())
  {
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
      __ktrace_uuid_map_learn_ariadne_process_dict_with_chunk_block_invoke_cold_11();
    }
    goto LABEL_36;
  }

  CFIndex Count = CFArrayGetCount(v7);
  if (Count < 1)
  {
LABEL_33:
    BOOL v26 = 1LL;
  }

  else
  {
    CFIndex v10 = 0LL;
    while (1)
    {
      CFTypeID ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v7, v10);
      int v12 = ValueAtIndex;
      if (ValueAtIndex)
      {
        CFTypeID v13 = CFGetTypeID(ValueAtIndex);
        if (v13 != CFDictionaryGetTypeID())
        {
          ktrace_log_init();
          if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
            __ktrace_uuid_map_learn_ariadne_process_dict_with_chunk_block_invoke_cold_10(&v39, v40);
          }
          int v12 = 0LL;
        }
      }

      uint64_t v14 = (const __CFString *)CFDictionaryGetValue(v12, @"Name");
      CFTypeID v15 = v14;
      if (v14)
      {
        CFTypeID v16 = CFGetTypeID(v14);
        if (v16 != CFStringGetTypeID())
        {
          ktrace_log_init();
          if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
            __ktrace_uuid_map_learn_ariadne_process_dict_with_chunk_block_invoke_cold_6(&v41, v42);
          }
          CFTypeID v15 = 0LL;
        }
      }

      int64x2_t v17 = (const __CFNumber *)CFDictionaryGetValue(v12, @"Address");
      int v18 = v17;
      if (v17)
      {
        CFTypeID v19 = CFGetTypeID(v17);
        if (v19 != CFNumberGetTypeID())
        {
          ktrace_log_init();
          if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
            __ktrace_uuid_map_learn_ariadne_process_dict_with_chunk_block_invoke_cold_8(&v43, v44);
          }
          int v18 = 0LL;
        }
      }

      int v20 = (const __CFNumber *)CFDictionaryGetValue(v12, @"Size");
      __int16 v21 = v20;
      if (v20)
      {
        CFTypeID v22 = CFGetTypeID(v20);
        if (v22 != CFNumberGetTypeID())
        {
          ktrace_log_init();
          if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
            __ktrace_uuid_map_learn_ariadne_process_dict_with_chunk_block_invoke_cold_8(&v45, v46);
          }
          __int16 v21 = 0LL;
        }
      }

      if (!v12 || !v15 || !v18 || !v21) {
        break;
      }
      if (!CFNumberGetValue(v18, kCFNumberLongLongType, valuePtr))
      {
        _os_assert_log();
        uint64_t v32 = _os_crash();
        ktrace_uuid_map_learn_tailspin_symbols_with_chunk_cold_2(v32);
      }

      if (!CFNumberGetValue(v21, kCFNumberLongLongType, &v38))
      {
        _os_assert_log();
        uint64_t v33 = _os_crash();
        ktrace_uuid_map_learn_tailspin_symbols_with_chunk_cold_2(v33);
      }

      uint64_t v23 = valuePtr[0];
      uint64_t v24 = v38;
      __int128 v25 = utf8(v15);
      (*(void (**)(uint64_t, char *, uint64_t, uint64_t))(a3 + 16))(a3, v25, v23, v24);
      if (Count == ++v10) {
        goto LABEL_33;
      }
    }

    unint64_t v29 = (os_log_s *)ktrace_log;
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_FAULT))
    {
      uint64_t v30 = describe2((uint64_t)a1, (unsigned __int8 *)a2);
      ktrace_iterate_segments((uint64_t)v30, (uint64_t)valuePtr, v29);
    }

    BOOL v26 = 0LL;
  }

  *((_BYTE *)v36 + 24) = v26;
LABEL_43:
  _Block_object_dispose(&v35, 8);
  return v26;
}

void sub_186BDF0E8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
}

uint64_t ___ZL21ktrace_find_text_sizeP21symbolication_contextP11UUIDContext_block_invoke( uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = strcmp("__TEXT", a2);
  if (!(_DWORD)result)
  {
    uint64_t v7 = *(void *)(a1 + 32);
    *(void *)(v7 + 56) = a4;
    *(_WORD *)(v7 + 160) |= 8u;
  }

  return result;
}

uint64_t ___ZL23ktrace_iterate_segmentsP21symbolication_contextP11UUIDContextU13block_pointerFvPKc8_CSRangeE_block_invoke()
{
  return CSSymbolicatorForeachSymbolOwnerAtTime();
}

const unsigned __int8 *___ZL23ktrace_iterate_segmentsP21symbolication_contextP11UUIDContextU13block_pointerFvPKc8_CSRangeE_block_invoke_2( uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = owner_matches_uuid(a2, a3, *(const unsigned __int8 **)(a1 + 48));
  if ((_DWORD)result)
  {
    *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + ++*(_DWORD *)(*(void *)(*(void *)(result + 32) + 8LL) + 24LL) = 1;
    return (const unsigned __int8 *)CSSymbolOwnerForeachSegment();
  }

  return result;
}

uint64_t ___ZL23ktrace_iterate_segmentsP21symbolication_contextP11UUIDContextU13block_pointerFvPKc8_CSRangeE_block_invoke_3( uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v9 = *MEMORY[0x1895F89C0];
  CSRegionGetSegmentName(a2, a3, v8);
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t Range = CSRegionGetRange();
  return (*(uint64_t (**)(uint64_t, _BYTE *, uint64_t, uint64_t))(v4 + 16))(v4, v8, Range, v6);
}

uint64_t ktrace_find_base_address(symbolication_context *a1, UUIDContext *a2)
{
  if ((*((_WORD *)a2 + 80) & 0x40) != 0) {
    return 1LL;
  }
  ktrace_find_summary(a1, a2);
  if (*((void *)a2 + 16))
  {
    uint64_t v4 = MEMORY[0x1895F87A8];
    *((void *)a2 + 6) = -1LL;
    v8[0] = v4;
    v8[1] = 3221225472LL;
    int v8[2] = ___ZL24ktrace_find_base_addressP21symbolication_contextP11UUIDContext_block_invoke;
    v8[3] = &__block_descriptor_40_e24_v32__0r_8__CSRange_QQ_16l;
    _DWORD v8[4] = a2;
    if (ktrace_iterate_segments(a1, a2, (uint64_t)v8) && *((void *)a2 + 6) != -1LL)
    {
      *((_WORD *)a2 + 80) |= 0x40u;
      return 1LL;
    }
  }

  ktrace_analyze_executable((FILE **)a1, (CFURLRef *)a2);
  if ((*((_WORD *)a2 + 80) & 0x40) == 0)
  {
    uint64_t v6 = *(FILE **)a1;
    if (*(void *)a1)
    {
      uint64_t v7 = describe2((uint64_t)a1, (unsigned __int8 *)a2);
      fprintf(v6, "could not figure out base address for %s\n", (const char *)v7);
      ktrace_log_init();
      if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_DEBUG)) {
        ktrace_find_base_address((uint64_t)a1, (unsigned __int8 *)a2);
      }
    }
  }

  return (*((unsigned __int16 *)a2 + 80) >> 6) & 1;
}

void ___ZL9fill_infoPP25_CSBinaryImageInformationPP30_CSBinaryRelocationInformationP21symbolication_contextP11SymbolOwner15optional_uint6415_CSArchitecturei_block_invoke( uint64_t a1, char *__source, unint64_t a3, uint64_t a4)
{
  uint64_t v28 = *MEMORY[0x1895F89C0];
  if (*(_DWORD *)(a1 + 88) || strcmp(__source, "__LINKEDIT"))
  {
    uint64_t v8 = *(void *)(a1 + 56);
    unint64_t v9 = *(void *)(v8 + 48);
    BOOL v10 = a3 >= v9;
    unint64_t v11 = a3 - v9;
    if (v10)
    {
      uint64_t v17 = *(void *)(a1 + 80);
      uint64_t v18 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
      uint64_t v19 = *(void *)(*(void *)(a1 + 40) + 8LL);
      int v20 = *(_DWORD *)(v19 + 24);
      __int16 v21 = (uint64_t *)(v18 + 40LL * v20);
      *(_DWORD *)(v19 + 24) = v20 + 1;
      uint64_t v22 = v11 + *(void *)(*(void *)(a1 + 72) + 48LL);
      *__int16 v21 = v22;
      if (v17)
      {
        uint64_t v22 = *v21 + optional_uint64::value((optional_uint64 *)(a1 + 80));
        *__int16 v21 = v22;
      }

      uint64_t v23 = v18 + 40LL * v20;
      *(void *)(v23 + _Block_object_dispose(va, 8) = v22 + a4;
      strlcpy((char *)(v23 + 16), __source, 0x11uLL);
      ++*(_DWORD *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL);
    }

    else if (strcmp(__source, "__PAGEZERO"))
    {
      int v12 = *(FILE ***)(a1 + 64);
      CFTypeID v13 = *v12;
      if (*v12)
      {
        uint64_t v14 = describe2((uint64_t)v12, (unsigned __int8 *)v8);
        fprintf(v13, "WARNING: ignoring segment %s below base address for %s\n", __source, (const char *)v14);
        ktrace_log_init();
        CFTypeID v15 = (os_log_s *)ktrace_log;
        if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_DEBUG))
        {
          CFTypeID v16 = describe2(*(void *)(a1 + 64), *(unsigned __int8 **)(a1 + 56));
          *(_DWORD *)__int128 buf = 136315394;
          __int128 v25 = __source;
          __int16 v26 = 2080;
          uint64_t v27 = v16;
          _os_log_debug_impl( &dword_186BA3000,  v15,  OS_LOG_TYPE_DEBUG,  "WARNING: ignoring segment %s below base address for %s\n",  buf,  0x16u);
        }
      }
    }
  }

uint64_t __copy_helper_block_e8_80c21_ZTS15optional_uint64(uint64_t result, uint64_t a2)
{
  *(void *)(result + 80) = *(void *)(a2 + 80);
  return result;
}

uint64_t __Block_byref_object_copy__212(uint64_t result, uint64_t a2)
{
  *(void *)(result + 4_Block_object_dispose(va, 8) = *(void *)(a2 + 48);
  return result;
}

uint64_t ___ZL9fill_infoPP25_CSBinaryImageInformationPP30_CSBinaryRelocationInformationP21symbolication_contextP11SymbolOwner15optional_uint6415_CSArchitecturei_block_invoke_215( uint64_t a1, char *__s1, uint64_t a3, uint64_t a4)
{
  uint64_t result = strncmp(__s1, (const char *)(*(void *)(a1 + 40) + 24LL), 0x10uLL);
  if (!(_DWORD)result) {
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 48LL) = a4 + 1;
  }
  return result;
}

void ___ZL9fill_infoPP25_CSBinaryImageInformationPP30_CSBinaryRelocationInformationP21symbolication_contextP11SymbolOwner15optional_uint6415_CSArchitecturei_block_invoke_217( uint64_t a1, const __CFString *a2)
{
  uint64_t v16 = *MEMORY[0x1895F89C0];
  if (*(void *)(*(void *)(a1 + 32) + 40LL))
  {
    uuid_unparse(*(const unsigned __int8 **)(a1 + 40), out);
    uint64_t v4 = **(FILE ***)(a1 + 48);
    if (v4)
    {
      int v5 = *(const char **)(*(void *)(a1 + 32) + 40LL);
      uint64_t v6 = utf8(a2);
      fprintf(v4, "WARNING: %s associated with multiple locations: %s AND %s\n", out, v5, v6);
      ktrace_log_init();
      uint64_t v7 = (os_log_s *)ktrace_log;
      if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v8 = *(void *)(*(void *)(a1 + 32) + 40LL);
        *(_DWORD *)__int128 buf = 136315650;
        BOOL v10 = out;
        __int16 v11 = 2080;
        uint64_t v12 = v8;
        __int16 v13 = 2080;
        uint64_t v14 = utf8(a2);
        _os_log_debug_impl( &dword_186BA3000,  v7,  OS_LOG_TYPE_DEBUG,  "WARNING: %s associated with multiple locations: %s AND %s\n",  buf,  0x20u);
      }
    }
  }

  else
  {
    *(void *)(*(void *)(a1 + 32) + 4std::unique_ptr<std::__hash_node<std::__hash_value_type<CFUUIDBytes,UUIDContext>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<CFUUIDBytes,UUIDContext>,void *>>>>::reset[abi:ne180100]( (uint64_t *)va, 0LL) = utf8(a2);
  }

uint64_t ___ZL23fix_tailspin_kext_ownerP11SymbolOwnerP21symbolication_contextP11UUIDContext_block_invoke( uint64_t a1, char *__s1)
{
  uint64_t result = strcmp(__s1, "__TEXT_EXEC");
  if (!(_DWORD)result) {
    *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + ++*(_DWORD *)(*(void *)(*(void *)(result + 32) + 8LL) + 24LL) = 1;
  }
  return result;
}

uint64_t ___ZL24ktrace_find_base_addressP21symbolication_contextP11UUIDContext_block_invoke( uint64_t a1, char *__s1, unint64_t a3)
{
  uint64_t result = strcmp(__s1, "__PAGEZERO");
  if ((_DWORD)result)
  {
    uint64_t v6 = *(void *)(a1 + 32);
    if (a3 < *(void *)(v6 + 48)) {
      *(void *)(v6 + 4_Block_object_dispose(va, 8) = a3;
    }
  }

  return result;
}

void PrepassOp::~PrepassOp(PrepassOp *this)
{
  CFStringRef v1 = (const void *)*((void *)this + 1);
  if (v1) {
    _Block_release(v1);
  }
}

BOOL flatbuffers::Verifier::VerifyBufferFromStart<FlatbufferSymbols::SymbolsBuffer>( flatbuffers::Verifier *this, const char *a2, unint64_t a3)
{
  return (!a2 || *((void *)this + 1) >= 8uLL && !strncmp((const char *)(*(void *)this + a3 + 4), a2, 4uLL))
      && (unsigned int v5 = flatbuffers::Verifier::VerifyOffset(this, a3)) != 0
      && FlatbufferSymbols::SymbolsBuffer::Verify((FlatbufferSymbols::SymbolsBuffer *)(*(void *)this + a3 + v5), this);
}

uint64_t flatbuffers::Verifier::VerifyOffset(flatbuffers::Verifier *this, unint64_t a2)
{
  if ((a2 & 3) != 0 && *((_BYTE *)this + 40)) {
    return 0LL;
  }
  unint64_t v2 = *((void *)this + 1);
  if (v2 < 5 || v2 - 4 < a2) {
    return 0LL;
  }
  uint64_t v4 = *(unsigned int *)(*(void *)this + a2);
  if (v2 - 1 >= v4 + a2) {
    return v4;
  }
  return 0LL;
}

BOOL FlatbufferSymbols::SymbolsBuffer::Verify( FlatbufferSymbols::SymbolsBuffer *this, flatbuffers::Verifier *a2)
{
  BOOL result = flatbuffers::Verifier::VerifyTableStart(a2, (const unsigned __int8 *)this);
  if (result)
  {
    BOOL result = flatbuffers::Table::VerifyOffset(this, a2, 4u);
    if (result)
    {
      uint64_t v5 = *(int *)this;
      uint64_t v6 = -v5;
      uint64_t v7 = (unsigned __int16 *)((char *)this - v5);
      if (*v7 >= 5u)
      {
        uint64_t v8 = v7[2];
        if (v8)
        {
          BOOL result = flatbuffers::Verifier::VerifyVectorOrString( a2,  (const unsigned __int8 *)this + v8 + *(unsigned int *)((char *)this + v8),  4uLL,  0LL);
          if (!result) {
            return result;
          }
          uint64_t v6 = -(uint64_t)*(int *)this;
        }
      }

      unint64_t v9 = (unsigned __int16 *)((char *)this + v6);
      if (*v9 >= 5u && (uint64_t v10 = v9[2]) != 0) {
        __int16 v11 = (_DWORD *)((char *)this + v10 + *(unsigned int *)((char *)this + v10));
      }
      else {
        __int16 v11 = 0LL;
      }
      BOOL result = flatbuffers::Verifier::VerifyVectorOfTables<FlatbufferSymbols::Symbolicator>(a2, v11);
      if (result)
      {
        BOOL result = flatbuffers::Table::VerifyOffset(this, a2, 6u);
        if (result)
        {
          uint64_t v12 = *(int *)this;
          uint64_t v13 = -v12;
          uint64_t v14 = (unsigned __int16 *)((char *)this - v12);
          if (*v14 >= 7u)
          {
            uint64_t v15 = v14[3];
            if (v15)
            {
              BOOL result = flatbuffers::Verifier::VerifyVectorOrString( a2,  (const unsigned __int8 *)this + v15 + *(unsigned int *)((char *)this + v15),  4uLL,  0LL);
              if (!result) {
                return result;
              }
              uint64_t v13 = -(uint64_t)*(int *)this;
            }
          }

          uint64_t v16 = (unsigned __int16 *)((char *)this + v13);
          if (*v16 >= 7u && (uint64_t v17 = v16[3]) != 0) {
            uint64_t v18 = (_DWORD *)((char *)this + v17 + *(unsigned int *)((char *)this + v17));
          }
          else {
            uint64_t v18 = 0LL;
          }
          BOOL result = flatbuffers::Verifier::VerifyVectorOfTables<FlatbufferSymbols::StringEntry>(a2, v18);
          if (result)
          {
            --*((_DWORD *)a2 + 4);
            return 1LL;
          }
        }
      }
    }
  }

  return result;
}

BOOL flatbuffers::Table::VerifyOffset( flatbuffers::Table *this, const flatbuffers::Verifier *a2, unsigned int a3)
{
  uint64_t v3 = (unsigned __int16 *)((char *)this - *(int *)this);
  return *v3 <= a3
      || (uint64_t v4 = *(unsigned __int16 *)((char *)v3 + a3)) == 0
      || flatbuffers::Verifier::VerifyOffset(a2, (unint64_t)this + v4 - *(void *)a2) != 0;
}

BOOL flatbuffers::Verifier::VerifyVectorOfTables<FlatbufferSymbols::Symbolicator>( flatbuffers::Verifier *a1, _DWORD *a2)
{
  if (!a2) {
    return 1LL;
  }
  if (!*a2) {
    return 1LL;
  }
  unint64_t v4 = 0LL;
  uint64_t v5 = a2 + 1;
  do
  {
    BOOL result = FlatbufferSymbols::Symbolicator::Verify((FlatbufferSymbols::Symbolicator *)((char *)v5 + *v5), a1);
    if (!result) {
      break;
    }
    ++v4;
    ++v5;
  }

  while (v4 < *a2);
  return result;
}

BOOL flatbuffers::Verifier::VerifyVectorOfTables<FlatbufferSymbols::StringEntry>( flatbuffers::Verifier *a1, _DWORD *a2)
{
  if (!a2) {
    return 1LL;
  }
  if (!*a2) {
    return 1LL;
  }
  unint64_t v4 = 0LL;
  uint64_t v5 = a2 + 1;
  do
  {
    BOOL result = FlatbufferSymbols::StringEntry::Verify((FlatbufferSymbols::StringEntry *)((char *)v5 + *v5), a1);
    if (!result) {
      break;
    }
    ++v4;
    ++v5;
  }

  while (v4 < *a2);
  return result;
}

BOOL flatbuffers::Verifier::VerifyTableStart(flatbuffers::Verifier *this, const unsigned __int8 *a2)
{
  uint64_t v2 = *(void *)this;
  unint64_t v3 = (unint64_t)&a2[-*(void *)this];
  if ((v3 & 3) != 0 && *((_BYTE *)this + 40)) {
    return 0LL;
  }
  unint64_t v4 = *((void *)this + 1);
  BOOL v5 = v4 >= 5 && v4 - 4 >= v3;
  if (!v5) {
    return 0LL;
  }
  uint64_t v6 = *(int *)a2;
  unsigned int v7 = *((_DWORD *)this + 5);
  unsigned int v8 = *((_DWORD *)this + 4) + 1;
  *((_DWORD *)this + 4) = v8;
  unsigned int v9 = *((_DWORD *)this + 6) + 1;
  *((_DWORD *)this + 6) = v9;
  if (v8 > v7 || v9 > *((_DWORD *)this + 7)) {
    return 0LL;
  }
  unint64_t v10 = v3 - v6;
  if ((v10 & 1) != 0)
  {
    uint64_t v11 = 0LL;
    if (*((_BYTE *)this + 40) || v4 - 2 < v10) {
      return v11;
    }
  }

  else if (v4 - 2 < v10)
  {
    return 0LL;
  }

  unint64_t v12 = *(unsigned __int16 *)(v2 + v10);
  if ((v12 & 1) != 0 && *((_BYTE *)this + 40)) {
    return 0LL;
  }
  BOOL v5 = v4 >= v12;
  unint64_t v14 = v4 - v12;
  return v14 != 0 && v5 && v14 >= v10;
}

BOOL flatbuffers::Verifier::VerifyVectorOrString( flatbuffers::Verifier *this, const unsigned __int8 *a2, unint64_t a3, unint64_t *a4)
{
  unint64_t v4 = (unint64_t)&a2[-*(void *)this];
  if ((v4 & 3) != 0 && *((_BYTE *)this + 40)) {
    return 0LL;
  }
  unint64_t v5 = *((void *)this + 1);
  if (v5 < 5 || v5 - 4 < v4) {
    return 0LL;
  }
  unint64_t v7 = *(unsigned int *)a2;
  if (0x7FFFFFFF / a3 <= v7) {
    return 0LL;
  }
  unint64_t v8 = v7 * a3 + 4;
  if (a4)
  {
    *a4 = v8 + v4;
    unint64_t v5 = *((void *)this + 1);
  }

  BOOL v9 = v5 > v8;
  unint64_t v10 = v5 - v8;
  return v9 && v10 >= v4;
}

BOOL FlatbufferSymbols::Symbolicator::Verify( FlatbufferSymbols::Symbolicator *this, flatbuffers::Verifier *a2)
{
  BOOL result = flatbuffers::Verifier::VerifyTableStart(a2, (const unsigned __int8 *)this);
  if (!result) {
    return result;
  }
  unint64_t v5 = (unsigned __int16 *)((char *)this - *(int *)this);
  if (*v5 >= 5u)
  {
    uint64_t v6 = v5[2];
    if (v6)
    {
      BOOL result = 0LL;
      unint64_t v7 = *((void *)a2 + 1);
    }
  }

  BOOL result = flatbuffers::Table::VerifyOffset(this, a2, 6u);
  if (!result) {
    return result;
  }
  unint64_t v8 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v9 = *v8;
  if (v9 >= 7)
  {
    if (v8[3])
    {
      unint64_t v10 = (FlatbufferSymbols::Symbolicator *)((char *)this + v8[3] + *(unsigned int *)((char *)this + v8[3]));
      goto LABEL_12;
    }

BOOL flatbuffers::Verifier::VerifyVectorOfTables<FlatbufferSymbols::SymbolOwner>( flatbuffers::Verifier *a1, _DWORD *a2)
{
  if (!a2) {
    return 1LL;
  }
  if (!*a2) {
    return 1LL;
  }
  unint64_t v4 = 0LL;
  unint64_t v5 = a2 + 1;
  do
  {
    BOOL result = FlatbufferSymbols::SymbolOwner::Verify((FlatbufferSymbols::SymbolOwner *)((char *)v5 + *v5), a1);
    if (!result) {
      break;
    }
    ++v4;
    ++v5;
  }

  while (v4 < *a2);
  return result;
}

BOOL flatbuffers::Verifier::VerifyVectorOfTables<FlatbufferSymbols::SharedCache>( flatbuffers::Verifier *a1, _DWORD *a2)
{
  if (!a2) {
    return 1LL;
  }
  if (!*a2) {
    return 1LL;
  }
  unint64_t v4 = 0LL;
  unint64_t v5 = a2 + 1;
  do
  {
    BOOL result = FlatbufferSymbols::SharedCache::Verify((FlatbufferSymbols::SharedCache *)((char *)v5 + *v5), a1);
    if (!result) {
      break;
    }
    ++v4;
    ++v5;
  }

  while (v4 < *a2);
  return result;
}

BOOL FlatbufferSymbols::ProcessMetadata::Verify( FlatbufferSymbols::ProcessMetadata *this, flatbuffers::Verifier *a2)
{
  BOOL result = flatbuffers::Verifier::VerifyTableStart(a2, (const unsigned __int8 *)this);
  if (result)
  {
    BOOL result = flatbuffers::Table::VerifyOffset(this, a2, 4u);
    if (result)
    {
      unint64_t v5 = (unsigned __int16 *)((char *)this - *(int *)this);
      if (*v5 >= 5u && (uint64_t v6 = v5[2]) != 0) {
        unint64_t v7 = (const unsigned __int8 *)this + v6 + *(unsigned int *)((char *)this + v6);
      }
      else {
        unint64_t v7 = 0LL;
      }
      BOOL result = flatbuffers::Verifier::VerifyString(a2, v7);
      if (result)
      {
        unint64_t v8 = (unsigned __int16 *)((char *)this - *(int *)this);
        unsigned int v9 = *v8;
        if (v9 < 7
          || (!v8[3]
           || (result = 0LL, unint64_t v10 = *((void *)a2 + 1), v10 >= 9)
           && v10 - 8 >= (unint64_t)this + v8[3] - *(void *)a2)
          && (v9 < 9
           || (uint64_t v11 = v8[4]) == 0
           || (result = 0LL, unint64_t v12 = *((void *)a2 + 1), v12 >= 9)
           && v12 - 8 >= (unint64_t)this + v11 - *(void *)a2))
        {
          BOOL result = flatbuffers::Table::VerifyOffset(this, a2, 0xAu);
          if (result)
          {
            BOOL v13 = (unsigned __int16 *)((char *)this - *(int *)this);
            if (*v13 >= 0xBu && (uint64_t v14 = v13[5]) != 0) {
              uint64_t v15 = (const unsigned __int8 *)this + v14 + *(unsigned int *)((char *)this + v14);
            }
            else {
              uint64_t v15 = 0LL;
            }
            BOOL result = flatbuffers::Verifier::VerifyString(a2, v15);
            if (result)
            {
              --*((_DWORD *)a2 + 4);
              return 1LL;
            }
          }
        }
      }
    }
  }

  return result;
}

BOOL flatbuffers::Verifier::VerifyString(flatbuffers::Verifier *a1, const unsigned __int8 *a2)
{
  if (!a2) {
    return 1LL;
  }
  BOOL result = flatbuffers::Verifier::VerifyVectorOrString(a1, a2, 1uLL, &v6);
  if (result)
  {
    unint64_t v4 = *((void *)a1 + 1);
    return v4 >= 2 && v4 - 1 >= v6 && *(_BYTE *)(*(void *)a1 + v6) == 0;
  }

  return result;
}

BOOL FlatbufferSymbols::MachoMetadata::Verify( FlatbufferSymbols::MachoMetadata *this, flatbuffers::Verifier *a2)
{
  BOOL result = flatbuffers::Verifier::VerifyTableStart(a2, (const unsigned __int8 *)this);
  if (result)
  {
    BOOL result = flatbuffers::Table::VerifyOffset(this, a2, 4u);
    if (result)
    {
      unint64_t v5 = (unsigned __int16 *)((char *)this - *(int *)this);
      if (*v5 >= 5u && (uint64_t v6 = v5[2]) != 0) {
        unint64_t v7 = (const unsigned __int8 *)this + v6 + *(unsigned int *)((char *)this + v6);
      }
      else {
        unint64_t v7 = 0LL;
      }
      BOOL result = flatbuffers::Verifier::VerifyString(a2, v7);
      if (result)
      {
        BOOL result = flatbuffers::Table::VerifyOffset(this, a2, 6u);
        if (result)
        {
          unint64_t v8 = (unsigned __int16 *)((char *)this - *(int *)this);
          if (*v8 >= 7u && (uint64_t v9 = v8[3]) != 0) {
            unint64_t v10 = (const unsigned __int8 *)this + v9 + *(unsigned int *)((char *)this + v9);
          }
          else {
            unint64_t v10 = 0LL;
          }
          BOOL result = flatbuffers::Verifier::VerifyString(a2, v10);
          if (result)
          {
            uint64_t v11 = (unsigned __int16 *)((char *)this - *(int *)this);
            unsigned int v12 = *v11;
            if (v12 < 9
              || (!v11[4]
               || (result = 0LL, unint64_t v13 = *((void *)a2 + 1), v13 >= 9)
               && v13 - 8 >= (unint64_t)this + v11[4] - *(void *)a2)
              && (v12 < 0xB
               || (uint64_t v14 = v11[5]) == 0
               || (result = 0LL, unint64_t v15 = *((void *)a2 + 1), v15 >= 9)
               && v15 - 8 >= (unint64_t)this + v14 - *(void *)a2))
            {
              BOOL result = flatbuffers::Table::VerifyOffset(this, a2, 0xCu);
              if (result)
              {
                uint64_t v16 = (unsigned __int16 *)((char *)this - *(int *)this);
                if (*v16 < 0xDu
                  || (uint64_t v17 = v16[6]) == 0
                  || (BOOL result = FlatbufferSymbols::CPUArchitecture::Verify( (FlatbufferSymbols::MachoMetadata *)((char *)this + v17 + *(unsigned int *)((char *)this + v17)),  a2)))
                {
                  BOOL result = flatbuffers::Table::VerifyOffset(this, a2, 0xEu);
                  if (result)
                  {
                    uint64_t v18 = (unsigned __int16 *)((char *)this - *(int *)this);
                    if (*v18 >= 0xFu && (uint64_t v19 = v18[7]) != 0) {
                      int v20 = (const unsigned __int8 *)this + v19 + *(unsigned int *)((char *)this + v19);
                    }
                    else {
                      int v20 = 0LL;
                    }
                    BOOL result = flatbuffers::Verifier::VerifyString(a2, v20);
                    if (result)
                    {
                      BOOL result = flatbuffers::Table::VerifyOffset(this, a2, 0x10u);
                      if (result)
                      {
                        uint64_t v21 = (unsigned __int16 *)((char *)this - *(int *)this);
                        if (*v21 >= 0x11u && (uint64_t v22 = v21[8]) != 0) {
                          uint64_t v23 = (const unsigned __int8 *)this + v22 + *(unsigned int *)((char *)this + v22);
                        }
                        else {
                          uint64_t v23 = 0LL;
                        }
                        BOOL result = flatbuffers::Verifier::VerifyString(a2, v23);
                        if (result)
                        {
                          BOOL result = flatbuffers::Table::VerifyOffset(this, a2, 0x12u);
                          if (result)
                          {
                            uint64_t v24 = (unsigned __int16 *)((char *)this - *(int *)this);
                            if (*v24 >= 0x13u && (uint64_t v25 = v24[9]) != 0) {
                              uint64_t v26 = (const unsigned __int8 *)this + v25 + *(unsigned int *)((char *)this + v25);
                            }
                            else {
                              uint64_t v26 = 0LL;
                            }
                            BOOL result = flatbuffers::Verifier::VerifyString(a2, v26);
                            if (result)
                            {
                              BOOL result = flatbuffers::Table::VerifyOffset(this, a2, 0x14u);
                              if (result)
                              {
                                uint64_t v27 = (unsigned __int16 *)((char *)this - *(int *)this);
                                if (*v27 >= 0x15u && (uint64_t v28 = v27[10]) != 0) {
                                  unint64_t v29 = (const unsigned __int8 *)this + v28 + *(unsigned int *)((char *)this + v28);
                                }
                                else {
                                  unint64_t v29 = 0LL;
                                }
                                BOOL result = flatbuffers::Verifier::VerifyString(a2, v29);
                                if (result)
                                {
                                  --*((_DWORD *)a2 + 4);
                                  return 1LL;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }

  return result;
}

BOOL FlatbufferSymbols::CPUArchitecture::Verify( FlatbufferSymbols::CPUArchitecture *this, flatbuffers::Verifier *a2)
{
  BOOL result = flatbuffers::Verifier::VerifyTableStart(a2, (const unsigned __int8 *)this);
  if (result)
  {
    unint64_t v5 = (unsigned __int16 *)((char *)this - *(int *)this);
    unsigned int v6 = *v5;
    if (v6 < 5
      || (!v5[2]
       || (result = 0LL, unint64_t v7 = *((void *)a2 + 1), v7 >= 5) && v7 - 4 >= (unint64_t)this + v5[2] - *(void *)a2)
      && (v6 < 7
       || (!v5[3]
        || (result = 0LL, unint64_t v8 = *((void *)a2 + 1), v8 >= 5) && v8 - 4 >= (unint64_t)this + v5[3] - *(void *)a2)
       && (v6 < 9
        || (uint64_t v9 = v5[4]) == 0
        || (result = 0LL, unint64_t v10 = *((void *)a2 + 1), v10 >= 5) && v10 - 4 >= (unint64_t)this + v9 - *(void *)a2)))
    {
      --*((_DWORD *)a2 + 4);
      return 1LL;
    }
  }

  return result;
}

BOOL FlatbufferSymbols::DyldSharedCacheMetadata::Verify( FlatbufferSymbols::DyldSharedCacheMetadata *this, flatbuffers::Verifier *a2)
{
  BOOL result = flatbuffers::Verifier::VerifyTableStart(a2, (const unsigned __int8 *)this);
  if (result)
  {
    BOOL result = flatbuffers::Table::VerifyOffset(this, a2, 4u);
    if (result)
    {
      unint64_t v5 = (unsigned __int16 *)((char *)this - *(int *)this);
      if (*v5 >= 5u && (uint64_t v6 = v5[2]) != 0) {
        unint64_t v7 = (const unsigned __int8 *)this + v6 + *(unsigned int *)((char *)this + v6);
      }
      else {
        unint64_t v7 = 0LL;
      }
      BOOL result = flatbuffers::Verifier::VerifyString(a2, v7);
      if (result)
      {
        BOOL result = flatbuffers::Table::VerifyOffset(this, a2, 6u);
        if (result)
        {
          unint64_t v8 = (unsigned __int16 *)((char *)this - *(int *)this);
          if (*v8 >= 7u && (uint64_t v9 = v8[3]) != 0) {
            unint64_t v10 = (const unsigned __int8 *)this + v9 + *(unsigned int *)((char *)this + v9);
          }
          else {
            unint64_t v10 = 0LL;
          }
          BOOL result = flatbuffers::Verifier::VerifyString(a2, v10);
          if (result)
          {
            uint64_t v11 = (unsigned __int16 *)((char *)this - *(int *)this);
            unsigned int v12 = *v11;
            if (v12 < 9
              || (!v11[4]
               || (result = 0LL, unint64_t v13 = *((void *)a2 + 1), v13 >= 9)
               && v13 - 8 >= (unint64_t)this + v11[4] - *(void *)a2)
              && (v12 < 0xB
               || (uint64_t v14 = v11[5]) == 0
               || (result = 0LL, unint64_t v15 = *((void *)a2 + 1), v15 >= 9)
               && v15 - 8 >= (unint64_t)this + v14 - *(void *)a2))
            {
              BOOL result = flatbuffers::Table::VerifyOffset(this, a2, 0xCu);
              if (result)
              {
                uint64_t v16 = (unsigned __int16 *)((char *)this - *(int *)this);
                if (*v16 < 0xDu
                  || (uint64_t v17 = v16[6]) == 0
                  || (BOOL result = FlatbufferSymbols::CPUArchitecture::Verify( (FlatbufferSymbols::DyldSharedCacheMetadata *)((char *)this + v17 + *(unsigned int *)((char *)this + v17)),  a2)))
                {
                  BOOL result = flatbuffers::Table::VerifyOffset(this, a2, 0xEu);
                  if (result)
                  {
                    uint64_t v18 = (unsigned __int16 *)((char *)this - *(int *)this);
                    if (*v18 >= 0xFu && (uint64_t v19 = v18[7]) != 0) {
                      int v20 = (const unsigned __int8 *)this + v19 + *(unsigned int *)((char *)this + v19);
                    }
                    else {
                      int v20 = 0LL;
                    }
                    BOOL result = flatbuffers::Verifier::VerifyString(a2, v20);
                    if (result)
                    {
                      BOOL result = flatbuffers::Table::VerifyOffset(this, a2, 0x10u);
                      if (result)
                      {
                        uint64_t v21 = (unsigned __int16 *)((char *)this - *(int *)this);
                        if (*v21 >= 0x11u && (uint64_t v22 = v21[8]) != 0) {
                          uint64_t v23 = (const unsigned __int8 *)this + v22 + *(unsigned int *)((char *)this + v22);
                        }
                        else {
                          uint64_t v23 = 0LL;
                        }
                        BOOL result = flatbuffers::Verifier::VerifyString(a2, v23);
                        if (result)
                        {
                          BOOL result = flatbuffers::Table::VerifyOffset(this, a2, 0x12u);
                          if (result)
                          {
                            uint64_t v24 = (unsigned __int16 *)((char *)this - *(int *)this);
                            if (*v24 >= 0x13u && (uint64_t v25 = v24[9]) != 0) {
                              uint64_t v26 = (const unsigned __int8 *)this + v25 + *(unsigned int *)((char *)this + v25);
                            }
                            else {
                              uint64_t v26 = 0LL;
                            }
                            BOOL result = flatbuffers::Verifier::VerifyString(a2, v26);
                            if (result)
                            {
                              uint64_t v27 = (unsigned __int16 *)((char *)this - *(int *)this);
                              if (*v27 < 0x15u
                                || (uint64_t v28 = v27[10]) == 0
                                || (BOOL result = 0LL, v29 = *((void *)a2 + 1), v29 >= 9)
                                && v29 - 8 >= (unint64_t)this + v28 - *(void *)a2)
                              {
                                --*((_DWORD *)a2 + 4);
                                return 1LL;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }

  return result;
}

BOOL FlatbufferSymbols::SymbolOwner::Verify(FlatbufferSymbols::SymbolOwner *this, flatbuffers::Verifier *a2)
{
  BOOL result = flatbuffers::Verifier::VerifyTableStart(a2, (const unsigned __int8 *)this);
  if (!result) {
    return result;
  }
  unint64_t v5 = (unsigned __int16 *)((char *)this - *(int *)this);
  if (*v5 >= 5u)
  {
    uint64_t v6 = v5[2];
    if (v6)
    {
      BOOL result = 0LL;
      unint64_t v7 = *((void *)a2 + 1);
    }
  }

  BOOL result = flatbuffers::Table::VerifyOffset(this, a2, 6u);
  if (!result) {
    return result;
  }
  unint64_t v8 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v9 = *v8;
  if (v9 >= 7)
  {
    if (v8[3])
    {
      unint64_t v10 = (FlatbufferSymbols::SymbolOwner *)((char *)this + v8[3] + *(unsigned int *)((char *)this + v8[3]));
LABEL_12:
      uint64_t v11 = v8[2];
      if (v11)
      {
        if (v10)
        {
          if (*((_BYTE *)this + v11) == 1)
          {
            BOOL result = FlatbufferSymbols::MachoMetadata::Verify(v10, a2);
            if (!result) {
              return result;
            }
          }
        }
      }

      goto LABEL_16;
    }

BOOL flatbuffers::Verifier::VerifyVectorOfTables<FlatbufferSymbols::Segment>( flatbuffers::Verifier *a1, _DWORD *a2)
{
  if (!a2) {
    return 1LL;
  }
  if (!*a2) {
    return 1LL;
  }
  unint64_t v4 = 0LL;
  unint64_t v5 = a2 + 1;
  do
  {
    BOOL result = FlatbufferSymbols::Segment::Verify((FlatbufferSymbols::Segment *)((char *)v5 + *v5), a1);
    if (!result) {
      break;
    }
    ++v4;
    ++v5;
  }

  while (v4 < *a2);
  return result;
}

BOOL FlatbufferSymbols::Segment::Verify(FlatbufferSymbols::Segment *this, flatbuffers::Verifier *a2)
{
  BOOL result = flatbuffers::Verifier::VerifyTableStart(a2, (const unsigned __int8 *)this);
  if (result)
  {
    BOOL result = flatbuffers::Table::VerifyOffset(this, a2, 4u);
    if (result)
    {
      unint64_t v5 = (unsigned __int16 *)((char *)this - *(int *)this);
      if (*v5 >= 5u && (uint64_t v6 = v5[2]) != 0) {
        unint64_t v7 = (const unsigned __int8 *)this + v6 + *(unsigned int *)((char *)this + v6);
      }
      else {
        unint64_t v7 = 0LL;
      }
      BOOL result = flatbuffers::Verifier::VerifyString(a2, v7);
      if (result)
      {
        unint64_t v8 = (unsigned __int16 *)((char *)this - *(int *)this);
        unsigned int v9 = *v8;
        if (v9 < 7
          || (!v8[3]
           || (result = 0LL, unint64_t v10 = *((void *)a2 + 1), v10 >= 9)
           && v10 - 8 >= (unint64_t)this + v8[3] - *(void *)a2)
          && (v9 < 9
           || (uint64_t v11 = v8[4]) == 0
           || (result = 0LL, unint64_t v12 = *((void *)a2 + 1), v12 >= 9)
           && v12 - 8 >= (unint64_t)this + v11 - *(void *)a2))
        {
          BOOL result = flatbuffers::Table::VerifyOffset(this, a2, 0xAu);
          if (result)
          {
            uint64_t v13 = *(int *)this;
            uint64_t v14 = -v13;
            uint64_t v15 = (unsigned __int16 *)((char *)this - v13);
            if (*v15 >= 0xBu)
            {
              uint64_t v16 = v15[5];
              if (v16)
              {
                BOOL result = flatbuffers::Verifier::VerifyVectorOrString( a2,  (const unsigned __int8 *)this + v16 + *(unsigned int *)((char *)this + v16),  4uLL,  0LL);
                if (!result) {
                  return result;
                }
                uint64_t v14 = -(uint64_t)*(int *)this;
              }
            }

            uint64_t v17 = (unsigned __int16 *)((char *)this + v14);
            if (*v17 >= 0xBu && (uint64_t v18 = v17[5]) != 0) {
              uint64_t v19 = (_DWORD *)((char *)this + v18 + *(unsigned int *)((char *)this + v18));
            }
            else {
              uint64_t v19 = 0LL;
            }
            BOOL result = flatbuffers::Verifier::VerifyVectorOfTables<FlatbufferSymbols::Symbol>(a2, v19);
            if (result)
            {
              BOOL result = flatbuffers::Table::VerifyOffset(this, a2, 0xCu);
              if (result)
              {
                uint64_t v20 = *(int *)this;
                uint64_t v21 = -v20;
                unint64_t v22 = (unsigned __int16 *)((char *)this - v20);
                if (*v22 >= 0xDu)
                {
                  uint64_t v23 = v22[6];
                  if (v23)
                  {
                    BOOL result = flatbuffers::Verifier::VerifyVectorOrString( a2,  (const unsigned __int8 *)this + v23 + *(unsigned int *)((char *)this + v23),  1uLL,  0LL);
                    if (!result) {
                      return result;
                    }
                    uint64_t v21 = -(uint64_t)*(int *)this;
                  }
                }

                unint64_t v24 = (unsigned __int16 *)((char *)this + v21);
                unsigned int v25 = *v24;
                if (v25 < 0xF) {
                  goto LABEL_47;
                }
                if (!v24[7]
                  || (result = 0LL, unint64_t v26 = *((void *)a2 + 1), v26 >= 9)
                  && v26 - 8 >= (unint64_t)this + v24[7] - *(void *)a2)
                {
                  if (v25 < 0x11
                    || (!v24[8]
                     || (result = 0LL, unint64_t v27 = *((void *)a2 + 1), v27 >= 2)
                     && v27 - 1 >= (unint64_t)this + v24[8] - *(void *)a2)
                    && (v25 < 0x13
                     || (!v24[9]
                      || (result = 0LL, unint64_t v28 = *((void *)a2 + 1), v28 >= 2)
                      && v28 - 1 >= (unint64_t)this + v24[9] - *(void *)a2)
                     && (v25 < 0x15
                      || (uint64_t v29 = v24[10]) == 0
                      || (result = 0LL, unint64_t v30 = *((void *)a2 + 1), v30 >= 2)
                      && v30 - 1 >= (unint64_t)this + v29 - *(void *)a2)))
                  {
LABEL_47:
                    --*((_DWORD *)a2 + 4);
                    return 1LL;
                  }
                }
              }
            }
          }
        }
      }
    }
  }

  return result;
}

BOOL flatbuffers::Verifier::VerifyVectorOfTables<FlatbufferSymbols::Symbol>( flatbuffers::Verifier *a1, _DWORD *a2)
{
  if (!a2) {
    return 1LL;
  }
  if (!*a2) {
    return 1LL;
  }
  unint64_t v4 = 0LL;
  unint64_t v5 = a2 + 1;
  do
  {
    BOOL result = FlatbufferSymbols::Symbol::Verify((FlatbufferSymbols::Symbol *)((char *)v5 + *v5), a1);
    if (!result) {
      break;
    }
    ++v4;
    ++v5;
  }

  while (v4 < *a2);
  return result;
}

BOOL FlatbufferSymbols::Symbol::Verify(FlatbufferSymbols::Symbol *this, flatbuffers::Verifier *a2)
{
  BOOL result = flatbuffers::Verifier::VerifyTableStart(a2, (const unsigned __int8 *)this);
  if (result)
  {
    unint64_t v5 = (unsigned __int16 *)((char *)this - *(int *)this);
    unsigned int v6 = *v5;
    if (v6 < 5
      || (!v5[2]
       || (result = 0LL, unint64_t v7 = *((void *)a2 + 1), v7 >= 9) && v7 - 8 >= (unint64_t)this + v5[2] - *(void *)a2)
      && (v6 < 7
       || (uint64_t v8 = v5[3]) == 0
       || (result = 0LL, unint64_t v9 = *((void *)a2 + 1), v9 >= 9) && v9 - 8 >= (unint64_t)this + v8 - *(void *)a2))
    {
      BOOL result = flatbuffers::Table::VerifyOffset(this, a2, 8u);
      if (result)
      {
        unint64_t v10 = (unsigned __int16 *)((char *)this - *(int *)this);
        if (*v10 >= 9u && (uint64_t v11 = v10[4]) != 0) {
          unint64_t v12 = (const unsigned __int8 *)this + v11 + *(unsigned int *)((char *)this + v11);
        }
        else {
          unint64_t v12 = 0LL;
        }
        BOOL result = flatbuffers::Verifier::VerifyString(a2, v12);
        if (result)
        {
          BOOL result = flatbuffers::Table::VerifyOffset(this, a2, 0xAu);
          if (result)
          {
            uint64_t v13 = (unsigned __int16 *)((char *)this - *(int *)this);
            if (*v13 >= 0xBu && (uint64_t v14 = v13[5]) != 0) {
              uint64_t v15 = (const unsigned __int8 *)this + v14 + *(unsigned int *)((char *)this + v14);
            }
            else {
              uint64_t v15 = 0LL;
            }
            BOOL result = flatbuffers::Verifier::VerifyString(a2, v15);
            if (result)
            {
              BOOL result = flatbuffers::Table::VerifyOffset(this, a2, 0xCu);
              if (result)
              {
                uint64_t v16 = *(int *)this;
                uint64_t v17 = -v16;
                uint64_t v18 = (unsigned __int16 *)((char *)this - v16);
                if (*v18 >= 0xDu)
                {
                  uint64_t v19 = v18[6];
                  if (v19)
                  {
                    BOOL result = flatbuffers::Verifier::VerifyVectorOrString( a2,  (const unsigned __int8 *)this + v19 + *(unsigned int *)((char *)this + v19),  4uLL,  0LL);
                    if (!result) {
                      return result;
                    }
                    uint64_t v17 = -(uint64_t)*(int *)this;
                  }
                }

                uint64_t v20 = (unsigned __int16 *)((char *)this + v17);
                if (*v20 >= 0xDu && (uint64_t v21 = v20[6]) != 0) {
                  unint64_t v22 = (_DWORD *)((char *)this + v21 + *(unsigned int *)((char *)this + v21));
                }
                else {
                  unint64_t v22 = 0LL;
                }
                BOOL result = flatbuffers::Verifier::VerifyVectorOfTables<FlatbufferSymbols::SourceInfo>(a2, v22);
                if (result)
                {
                  BOOL result = flatbuffers::Table::VerifyOffset(this, a2, 0xEu);
                  if (result)
                  {
                    uint64_t v23 = (unsigned __int16 *)((char *)this - *(int *)this);
                    if (*v23 < 0xFu
                      || (uint64_t v24 = v23[7]) == 0
                      || (BOOL result = flatbuffers::Verifier::VerifyVectorOrString( a2,  (const unsigned __int8 *)this + v24 + *(unsigned int *)((char *)this + v24),  1uLL,  0LL)))
                    {
                      --*((_DWORD *)a2 + 4);
                      return 1LL;
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }

  return result;
}

BOOL flatbuffers::Verifier::VerifyVectorOfTables<FlatbufferSymbols::SourceInfo>( flatbuffers::Verifier *a1, _DWORD *a2)
{
  if (!a2) {
    return 1LL;
  }
  if (!*a2) {
    return 1LL;
  }
  unint64_t v4 = 0LL;
  unint64_t v5 = a2 + 1;
  do
  {
    BOOL result = FlatbufferSymbols::SourceInfo::Verify((FlatbufferSymbols::SourceInfo *)((char *)v5 + *v5), a1);
    if (!result) {
      break;
    }
    ++v4;
    ++v5;
  }

  while (v4 < *a2);
  return result;
}

BOOL FlatbufferSymbols::SourceInfo::Verify(FlatbufferSymbols::SourceInfo *this, flatbuffers::Verifier *a2)
{
  BOOL result = flatbuffers::Verifier::VerifyTableStart(a2, (const unsigned __int8 *)this);
  if (result)
  {
    BOOL result = flatbuffers::Table::VerifyOffset(this, a2, 4u);
    if (result)
    {
      unint64_t v5 = (unsigned __int16 *)((char *)this - *(int *)this);
      if (*v5 >= 5u && (uint64_t v6 = v5[2]) != 0) {
        unint64_t v7 = (const unsigned __int8 *)this + v6 + *(unsigned int *)((char *)this + v6);
      }
      else {
        unint64_t v7 = 0LL;
      }
      BOOL result = flatbuffers::Verifier::VerifyString(a2, v7);
      if (result)
      {
        uint64_t v8 = (unsigned __int16 *)((char *)this - *(int *)this);
        unsigned int v9 = *v8;
        if (v9 < 7) {
          goto LABEL_28;
        }
        if (!v8[3]
          || (result = 0LL, unint64_t v10 = *((void *)a2 + 1), v10 >= 5)
          && v10 - 4 >= (unint64_t)this + v8[3] - *(void *)a2)
        {
          if (v9 < 9) {
            goto LABEL_28;
          }
          if (!v8[4]
            || (result = 0LL, unint64_t v11 = *((void *)a2 + 1), v11 >= 5)
            && v11 - 4 >= (unint64_t)this + v8[4] - *(void *)a2)
          {
            if (v9 < 0xB
              || (!v8[5]
               || (result = 0LL, unint64_t v12 = *((void *)a2 + 1), v12 >= 5)
               && v12 - 4 >= (unint64_t)this + v8[5] - *(void *)a2)
              && (v9 < 0xD
               || (!v8[6]
                || (result = 0LL, unint64_t v13 = *((void *)a2 + 1), v13 >= 9)
                && v13 - 8 >= (unint64_t)this + v8[6] - *(void *)a2)
               && (v9 < 0xF
                || (uint64_t v14 = v8[7]) == 0
                || (result = 0LL, unint64_t v15 = *((void *)a2 + 1), v15 >= 5)
                && v15 - 4 >= (unint64_t)this + v14 - *(void *)a2)))
            {
LABEL_28:
              --*((_DWORD *)a2 + 4);
              return 1LL;
            }
          }
        }
      }
    }
  }

  return result;
}

BOOL FlatbufferSymbols::SharedCache::Verify(FlatbufferSymbols::SharedCache *this, flatbuffers::Verifier *a2)
{
  BOOL result = flatbuffers::Verifier::VerifyTableStart(a2, (const unsigned __int8 *)this);
  if (result)
  {
    unint64_t v5 = (unsigned __int16 *)((char *)this - *(int *)this);
    if (*v5 < 5u
      || (uint64_t v6 = v5[2]) == 0
      || (result = 0LL, unint64_t v7 = *((void *)a2 + 1), v7 >= 2) && v7 - 1 >= (unint64_t)this + v6 - *(void *)a2)
    {
      BOOL result = flatbuffers::Table::VerifyOffset(this, a2, 6u);
      if (result)
      {
        uint64_t v8 = *(int *)this;
        uint64_t v9 = -v8;
        unint64_t v10 = (unsigned __int16 *)((char *)this - v8);
        unsigned int v11 = *v10;
        if (v11 < 7)
        {
          if (v11 < 5)
          {
LABEL_17:
            uint64_t v14 = (unsigned __int16 *)((char *)this + v9);
            if (*v14 < 9u
              || (uint64_t v15 = v14[4]) == 0
              || (result = 0LL, unint64_t v16 = *((void *)a2 + 1), v16 >= 9)
              && v16 - 8 >= (unint64_t)this + v15 - *(void *)a2)
            {
              --*((_DWORD *)a2 + 4);
              return 1LL;
            }

            return result;
          }
        }

        else if (v10[3])
        {
          unint64_t v12 = (FlatbufferSymbols::SharedCache *)((char *)this + v10[3] + *(unsigned int *)((char *)this + v10[3]));
LABEL_12:
          uint64_t v13 = v10[2];
          if (v13 && v12 && *((_BYTE *)this + v13) == 1)
          {
            BOOL result = FlatbufferSymbols::DyldSharedCacheMetadata::Verify(v12, a2);
            if (!result) {
              return result;
            }
            uint64_t v9 = -(uint64_t)*(int *)this;
          }

          goto LABEL_17;
        }

        unint64_t v12 = 0LL;
        goto LABEL_12;
      }
    }
  }

  return result;
}

BOOL FlatbufferSymbols::StringEntry::Verify(FlatbufferSymbols::StringEntry *this, flatbuffers::Verifier *a2)
{
  BOOL result = flatbuffers::Verifier::VerifyTableStart(a2, (const unsigned __int8 *)this);
  if (result)
  {
    unint64_t v5 = (unsigned __int16 *)((char *)this - *(int *)this);
    if (*v5 < 5u
      || (uint64_t v6 = v5[2]) == 0
      || (result = 0LL, unint64_t v7 = *((void *)a2 + 1), v7 >= 5) && v7 - 4 >= (unint64_t)this + v6 - *(void *)a2)
    {
      BOOL result = flatbuffers::Table::VerifyOffset(this, a2, 6u);
      if (result)
      {
        uint64_t v8 = (unsigned __int16 *)((char *)this - *(int *)this);
        if (*v8 >= 7u && (uint64_t v9 = v8[3]) != 0) {
          unint64_t v10 = (const unsigned __int8 *)this + v9 + *(unsigned int *)((char *)this + v9);
        }
        else {
          unint64_t v10 = 0LL;
        }
        BOOL result = flatbuffers::Verifier::VerifyString(a2, v10);
        if (result)
        {
          --*((_DWORD *)a2 + 4);
          return 1LL;
        }
      }
    }
  }

  return result;
}

uint64_t flatbuffers::ToStringVisitor::ToStringVisitor( uint64_t a1, __int128 *a2, char a3, __int128 *a4, char a5)
{
  *(void *)a1 = &unk_189F56788;
  *(void *)(a1 + _Block_object_dispose(va, 8) = 0LL;
  *(void *)(a1 + 16) = 0LL;
  *(void *)(a1 + 24) = 0LL;
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external( (std::string *)(a1 + 32),  *(const std::string::value_type **)a2,  *((void *)a2 + 1));
  }

  else
  {
    __int128 v9 = *a2;
    *(void *)(a1 + 4_Block_object_dispose(va, 8) = *((void *)a2 + 2);
    *(_OWORD *)(a1 + 32) = v9;
  }

  *(_BYTE *)(a1 + 56) = a3;
  unint64_t v10 = (std::string *)(a1 + 64);
  if (*((char *)a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v10, *(const std::string::value_type **)a4, *((void *)a4 + 1));
  }

  else
  {
    __int128 v11 = *a4;
    *(void *)(a1 + 80) = *((void *)a4 + 2);
    *(_OWORD *)&v10->__r_.__value_.__l.__data_ = v11;
  }

  *(void *)(a1 + 8_Block_object_dispose(va, 8) = 0LL;
  *(_BYTE *)(a1 + 96) = a5;
  return a1;
}

void sub_186BE15DC(_Unwind_Exception *exception_object)
{
}

std::string *flatbuffers::ToStringVisitor::StartSequence(flatbuffers::ToStringVisitor *this)
{
  uint64_t v2 = (std::string *)((char *)this + 8);
  std::string::append((std::string *)((char *)this + 8), "{");
  unint64_t v5 = (const std::string::value_type *)*((void *)this + 4);
  unint64_t v4 = (char *)this + 32;
  unint64_t v3 = v5;
  int v6 = v4[23];
  if (v6 >= 0) {
    unint64_t v7 = v4;
  }
  else {
    unint64_t v7 = v3;
  }
  if (v6 >= 0) {
    std::string::size_type v8 = v4[23];
  }
  else {
    std::string::size_type v8 = *((void *)v4 + 1);
  }
  BOOL result = std::string::append(v2, v7, v8);
  ++*((void *)v4 + 7);
  return result;
}

std::string *flatbuffers::ToStringVisitor::EndSequence(std::string *this)
{
  uint64_t v2 = (std::string *)&this->__r_.__value_.__r.__words[1];
  int v3 = this[2].__r_.__value_.__s.__data_[7];
  if (v3 >= 0) {
    uint64_t size = &this[1].__r_.__value_.__s.__data_[8];
  }
  else {
    uint64_t size = (const std::string::value_type *)this[1].__r_.__value_.__l.__size_;
  }
  if (v3 >= 0) {
    std::string::size_type cap = this[2].__r_.__value_.__s.__data_[7];
  }
  else {
    std::string::size_type cap = this[1].__r_.__value_.__l.__cap_;
  }
  std::string::append((std::string *)&this->__r_.__value_.__r.__words[1], size, cap);
  --this[3].__r_.__value_.__l.__cap_;
  flatbuffers::ToStringVisitor::append_indent(this);
  return std::string::append(v2, "}");
}

std::string *flatbuffers::ToStringVisitor::Field( std::string *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, const std::string::value_type *a7, uint64_t a8)
{
  if (a8)
  {
    uint64_t v9 = (uint64_t)this;
    if (a3)
    {
      std::string::append((std::string *)&this->__r_.__value_.__r.__words[1], ",");
      int v10 = *(char *)(v9 + 55);
      if (v10 >= 0) {
        __int128 v11 = (const std::string::value_type *)(v9 + 32);
      }
      else {
        __int128 v11 = *(const std::string::value_type **)(v9 + 32);
      }
      if (v10 >= 0) {
        std::string::size_type v12 = *(unsigned __int8 *)(v9 + 55);
      }
      else {
        std::string::size_type v12 = *(void *)(v9 + 40);
      }
      std::string::append((std::string *)(v9 + 8), v11, v12);
    }

    this = flatbuffers::ToStringVisitor::append_indent((std::string *)v9);
    if (a7)
    {
      if (*(_BYTE *)(v9 + 56)) {
        std::string::append((std::string *)(v9 + 8), "");
      }
      std::string::append((std::string *)(v9 + 8), a7);
      if (*(_BYTE *)(v9 + 56)) {
        std::string::append((std::string *)(v9 + 8), "");
      }
      return std::string::append((std::string *)(v9 + 8), ": ");
    }
  }

  return this;
}

std::string *flatbuffers::ToStringVisitor::Bool(flatbuffers::ToStringVisitor *this, int a2)
{
  if (a2) {
    uint64_t v2 = "true";
  }
  else {
    uint64_t v2 = "false";
  }
  return std::string::append((std::string *)((char *)this + 8), v2);
}

void flatbuffers::ToStringVisitor::Long(flatbuffers::ToStringVisitor *this)
{
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::stringbuf::string_type *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    std::string::size_type size = __p.__r_.__value_.__s.__size_;
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  std::string::append((std::string *)((char *)this + 8), (const std::string::value_type *)p_p, size);
}

void sub_186BE184C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void flatbuffers::ToStringVisitor::ULong(flatbuffers::ToStringVisitor *this)
{
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::stringbuf::string_type *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    std::string::size_type size = __p.__r_.__value_.__s.__size_;
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  std::string::append((std::string *)((char *)this + 8), (const std::string::value_type *)p_p, size);
}

void sub_186BE18CC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void flatbuffers::ToStringVisitor::Float(flatbuffers::ToStringVisitor *this, float a2)
{
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    std::string::size_type size = __p.__r_.__value_.__s.__size_;
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  std::string::append((std::string *)((char *)this + 8), (const std::string::value_type *)p_p, size);
}

void sub_186BE194C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void flatbuffers::ToStringVisitor::Double(flatbuffers::ToStringVisitor *this, double a2)
{
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    std::string::size_type size = __p.__r_.__value_.__s.__size_;
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  std::string::append((std::string *)((char *)this + 8), (const std::string::value_type *)p_p, size);
}

void sub_186BE19CC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t flatbuffers::ToStringVisitor::String(uint64_t a1, unsigned int *a2)
{
  return flatbuffers::EscapeString((uint64_t)(a2 + 1), *a2, (std::string *)(a1 + 8), 1, 0);
}

std::string *flatbuffers::ToStringVisitor::Unknown( flatbuffers::ToStringVisitor *this, const unsigned __int8 *a2)
{
  return std::string::append((std::string *)((char *)this + 8), "(?)");
}

std::string *flatbuffers::ToStringVisitor::StartVector(std::string *this)
{
  uint64_t v2 = (std::string *)&this->__r_.__value_.__r.__words[1];
  std::string::append((std::string *)&this->__r_.__value_.__r.__words[1], "[");
  if (!this[4].__r_.__value_.__s.__data_[0]) {
    return std::string::append(v2, " ");
  }
  int v3 = this[2].__r_.__value_.__s.__data_[7];
  if (v3 >= 0) {
    std::string::size_type size = &this[1].__r_.__value_.__s.__data_[8];
  }
  else {
    std::string::size_type size = (const std::string::value_type *)this[1].__r_.__value_.__l.__size_;
  }
  if (v3 >= 0) {
    std::string::size_type cap = this[2].__r_.__value_.__s.__data_[7];
  }
  else {
    std::string::size_type cap = this[1].__r_.__value_.__l.__cap_;
  }
  std::string::append(v2, size, cap);
  ++this[3].__r_.__value_.__l.__cap_;
  return flatbuffers::ToStringVisitor::append_indent(this);
}

std::string *flatbuffers::ToStringVisitor::EndVector(std::string *this)
{
  if (this[4].__r_.__value_.__s.__data_[0])
  {
    uint64_t v2 = (std::string *)&this->__r_.__value_.__r.__words[1];
    int v3 = this[2].__r_.__value_.__s.__data_[7];
    if (v3 >= 0) {
      std::string::size_type size = &this[1].__r_.__value_.__s.__data_[8];
    }
    else {
      std::string::size_type size = (const std::string::value_type *)this[1].__r_.__value_.__l.__size_;
    }
    if (v3 >= 0) {
      std::string::size_type cap = this[2].__r_.__value_.__s.__data_[7];
    }
    else {
      std::string::size_type cap = this[1].__r_.__value_.__l.__cap_;
    }
    std::string::append(v2, size, cap);
    --this[3].__r_.__value_.__l.__cap_;
    flatbuffers::ToStringVisitor::append_indent(this);
  }

  else
  {
    std::string::append((std::string *)&this->__r_.__value_.__r.__words[1], " ");
  }

  return std::string::append((std::string *)&this->__r_.__value_.__r.__words[1], "]");
}

std::string *flatbuffers::ToStringVisitor::Element(std::string *result, uint64_t a2)
{
  if (a2)
  {
    uint64_t v2 = result;
    int v3 = (std::string *)&result->__r_.__value_.__r.__words[1];
    std::string::append((std::string *)&result->__r_.__value_.__r.__words[1], ",");
    if (v2[4].__r_.__value_.__s.__data_[0])
    {
      int v4 = v2[2].__r_.__value_.__s.__data_[7];
      if (v4 >= 0) {
        std::string::size_type size = &v2[1].__r_.__value_.__s.__data_[8];
      }
      else {
        std::string::size_type size = (const std::string::value_type *)v2[1].__r_.__value_.__l.__size_;
      }
      if (v4 >= 0) {
        std::string::size_type cap = v2[2].__r_.__value_.__s.__data_[7];
      }
      else {
        std::string::size_type cap = v2[1].__r_.__value_.__l.__cap_;
      }
      std::string::append(v3, size, cap);
      return flatbuffers::ToStringVisitor::append_indent(v2);
    }

    else
    {
      return std::string::append(v3, " ");
    }
  }

  return result;
}

void std::string::__init_copy_ctor_external( std::string *this, const std::string::value_type *__s, std::string::size_type __sz)
{
  unint64_t v5 = this;
  if (__sz > 0x16)
  {
    if (__sz >= 0x7FFFFFFFFFFFFFF8LL) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    std::string::size_type v6 = (__sz & 0xFFFFFFFFFFFFFFF8LL) + 8;
    if ((__sz | 7) != 0x17) {
      std::string::size_type v6 = __sz | 7;
    }
    std::string::size_type v7 = v6 + 1;
    std::string::size_type v8 = (std::string *)operator new(v6 + 1);
    v5->__r_.__value_.__l.__size_ = __sz;
    v5->__r_.__value_.__l.__cap_ = v7 | 0x8000000000000000LL;
    v5->__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
    unint64_t v5 = v8;
  }

  else
  {
    this->__r_.__value_.__s.__size_ = __sz;
  }

  memmove(v5, __s, __sz + 1);
}

void std::string::__throw_length_error[abi:ne180100]()
{
}

std::string *flatbuffers::ToStringVisitor::append_indent(std::string *this)
{
  if (this[3].__r_.__value_.__l.__cap_)
  {
    uint64_t v1 = (uint64_t)this;
    unint64_t v2 = 0LL;
    int v3 = &this[2].__r_.__value_.__s.__data_[16];
    int v4 = (std::string *)&this->__r_.__value_.__r.__words[1];
    do
    {
      int v5 = *(char *)(v1 + 87);
      if (v5 >= 0) {
        std::string::size_type v6 = v3;
      }
      else {
        std::string::size_type v6 = *(const std::string::value_type **)(v1 + 64);
      }
      if (v5 >= 0) {
        std::string::size_type v7 = *(unsigned __int8 *)(v1 + 87);
      }
      else {
        std::string::size_type v7 = *(void *)(v1 + 72);
      }
      this = std::string::append(v4, v6, v7);
      ++v2;
    }

    while (v2 < *(void *)(v1 + 88));
  }

  return this;
}

void flatbuffers::ToStringVisitor::Named<unsigned char>(uint64_t a1, int a2, std::string::value_type *__s)
{
  if (__s)
  {
    if (*(_BYTE *)(a1 + 56)) {
      std::string::append((std::string *)(a1 + 8), "");
    }
    std::string::append((std::string *)(a1 + 8), __s);
    if (*(_BYTE *)(a1 + 56)) {
      std::string::append((std::string *)(a1 + 8), "");
    }
  }

  else
  {
    flatbuffers::NumToString<int>(&__p);
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::stringbuf::string_type *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      std::string::size_type size = __p.__r_.__value_.__s.__size_;
    }
    else {
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
    }
    std::string::append((std::string *)(a1 + 8), (const std::string::value_type *)p_p, size);
  }

void sub_186BE1DD4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t flatbuffers::NumToString<int>@<X0>(std::stringbuf::string_type *a1@<X8>)
{
  v4[0] = *MEMORY[0x189614728];
  uint64_t v2 = *(void *)(MEMORY[0x189614728] + 72LL);
  *(void *)((char *)v4 + *(void *)(v4[0] - 24LL)) = *(void *)(MEMORY[0x189614728] + 64LL);
  int v4[2] = v2;
  v5.__vftable = (std::stringbuf_vtbl *)(MEMORY[0x189614750] + 16LL);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x186E457C0](&v6);
}

void sub_186BE1EA4(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]( uint64_t a1)
{
  uint64_t v2 = MEMORY[0x189614758];
  uint64_t v3 = MEMORY[0x189614758] + 104LL;
  *(void *)(a1 + 12_Block_object_dispose(va, 8) = MEMORY[0x189614758] + 104LL;
  *(void *)(a1 + 16) = v2 + 64;
  uint64_t v4 = a1 + 16;
  std::stringbuf v5 = (void *)MEMORY[0x189614728];
  uint64_t v6 = *(void *)(MEMORY[0x189614728] + 16LL);
  uint64_t v7 = *(void *)(MEMORY[0x189614728] + 24LL);
  *(void *)a1 = v6;
  *(void *)(a1 + *(void *)(v6 - 24)) = v7;
  *(void *)(a1 + _Block_object_dispose(va, 8) = 0LL;
  std::string::size_type v8 = (std::ios_base *)(a1 + *(void *)(*(void *)a1 - 24LL));
  std::ios_base::init(v8, (void *)(a1 + 24));
  v8[1].__vftable = 0LL;
  v8[1].__fmtflags_ = -1;
  uint64_t v9 = v5[4];
  uint64_t v10 = v5[5];
  *(void *)(a1 + 16) = v9;
  *(void *)(v4 + *(void *)(v9 - 24)) = v10;
  uint64_t v11 = v5[1];
  *(void *)a1 = v11;
  *(void *)(a1 + *(void *)(v11 - 24)) = v5[6];
  *(void *)a1 = v2 + 24;
  *(void *)(a1 + 12_Block_object_dispose(va, 8) = v3;
  *(void *)(a1 + 16) = v2 + 64;
  std::streambuf::basic_streambuf();
  *(void *)(a1 + 24) = MEMORY[0x189614750] + 16LL;
  *(_OWORD *)(a1 + 8_Block_object_dispose(va, 8) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 120) = 24;
  return a1;
}

void sub_186BE1FBC(_Unwind_Exception *a1)
{
}

uint64_t std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream( uint64_t a1)
{
  uint64_t v2 = MEMORY[0x189614728];
  uint64_t v3 = *MEMORY[0x189614728];
  *(void *)a1 = *MEMORY[0x189614728];
  uint64_t v4 = *(void *)(v2 + 72);
  *(void *)(a1 + *(void *)(v3 - 24)) = *(void *)(v2 + 64);
  *(void *)(a1 + 24) = MEMORY[0x189614750] + 16LL;
  *(void *)(a1 + 16) = v4;
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x186E457C0](a1 + 128);
  return a1;
}

void flatbuffers::ToStringVisitor::Named<signed char>(uint64_t a1, int a2, std::string::value_type *__s)
{
  if (__s)
  {
    if (*(_BYTE *)(a1 + 56)) {
      std::string::append((std::string *)(a1 + 8), "");
    }
    std::string::append((std::string *)(a1 + 8), __s);
    if (*(_BYTE *)(a1 + 56)) {
      std::string::append((std::string *)(a1 + 8), "");
    }
  }

  else
  {
    flatbuffers::NumToString<int>(&__p);
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::stringbuf::string_type *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      std::string::size_type size = __p.__r_.__value_.__s.__size_;
    }
    else {
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
    }
    std::string::append((std::string *)(a1 + 8), (const std::string::value_type *)p_p, size);
  }

void sub_186BE2130( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void flatbuffers::ToStringVisitor::Named<short>(uint64_t a1, int a2, std::string::value_type *__s)
{
  if (__s)
  {
    if (*(_BYTE *)(a1 + 56)) {
      std::string::append((std::string *)(a1 + 8), "");
    }
    std::string::append((std::string *)(a1 + 8), __s);
    if (*(_BYTE *)(a1 + 56)) {
      std::string::append((std::string *)(a1 + 8), "");
    }
  }

  else
  {
    flatbuffers::NumToString<short>(&__p);
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::stringbuf::string_type *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      std::string::size_type size = __p.__r_.__value_.__s.__size_;
    }
    else {
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
    }
    std::string::append((std::string *)(a1 + 8), (const std::string::value_type *)p_p, size);
  }

void sub_186BE2210( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t flatbuffers::NumToString<short>@<X0>(std::stringbuf::string_type *a1@<X8>)
{
  v4[0] = *MEMORY[0x189614728];
  uint64_t v2 = *(void *)(MEMORY[0x189614728] + 72LL);
  *(void *)((char *)v4 + *(void *)(v4[0] - 24LL)) = *(void *)(MEMORY[0x189614728] + 64LL);
  int v4[2] = v2;
  v5.__vftable = (std::stringbuf_vtbl *)(MEMORY[0x189614750] + 16LL);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x186E457C0](&v6);
}

void sub_186BE22E0(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void flatbuffers::ToStringVisitor::Named<unsigned short>(uint64_t a1, int a2, std::string::value_type *__s)
{
  if (__s)
  {
    if (*(_BYTE *)(a1 + 56)) {
      std::string::append((std::string *)(a1 + 8), "");
    }
    std::string::append((std::string *)(a1 + 8), __s);
    if (*(_BYTE *)(a1 + 56)) {
      std::string::append((std::string *)(a1 + 8), "");
    }
  }

  else
  {
    flatbuffers::NumToString<unsigned short>(&__p);
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::stringbuf::string_type *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      std::string::size_type size = __p.__r_.__value_.__s.__size_;
    }
    else {
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
    }
    std::string::append((std::string *)(a1 + 8), (const std::string::value_type *)p_p, size);
  }

void sub_186BE23B8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t flatbuffers::NumToString<unsigned short>@<X0>(std::stringbuf::string_type *a1@<X8>)
{
  v4[0] = *MEMORY[0x189614728];
  uint64_t v2 = *(void *)(MEMORY[0x189614728] + 72LL);
  *(void *)((char *)v4 + *(void *)(v4[0] - 24LL)) = *(void *)(MEMORY[0x189614728] + 64LL);
  int v4[2] = v2;
  v5.__vftable = (std::stringbuf_vtbl *)(MEMORY[0x189614750] + 16LL);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x186E457C0](&v6);
}

void sub_186BE2488(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void flatbuffers::ToStringVisitor::Named<int>(uint64_t a1, int a2, std::string::value_type *__s)
{
  if (__s)
  {
    if (*(_BYTE *)(a1 + 56)) {
      std::string::append((std::string *)(a1 + 8), "");
    }
    std::string::append((std::string *)(a1 + 8), __s);
    if (*(_BYTE *)(a1 + 56)) {
      std::string::append((std::string *)(a1 + 8), "");
    }
  }

  else
  {
    flatbuffers::NumToString<int>(&__p);
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::stringbuf::string_type *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      std::string::size_type size = __p.__r_.__value_.__s.__size_;
    }
    else {
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
    }
    std::string::append((std::string *)(a1 + 8), (const std::string::value_type *)p_p, size);
  }

void sub_186BE2560( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void flatbuffers::ToStringVisitor::Named<unsigned int>(uint64_t a1, int a2, std::string::value_type *__s)
{
  if (__s)
  {
    if (*(_BYTE *)(a1 + 56)) {
      std::string::append((std::string *)(a1 + 8), "");
    }
    std::string::append((std::string *)(a1 + 8), __s);
    if (*(_BYTE *)(a1 + 56)) {
      std::string::append((std::string *)(a1 + 8), "");
    }
  }

  else
  {
    flatbuffers::NumToString<unsigned int>(&__p);
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::stringbuf::string_type *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      std::string::size_type size = __p.__r_.__value_.__s.__size_;
    }
    else {
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
    }
    std::string::append((std::string *)(a1 + 8), (const std::string::value_type *)p_p, size);
  }

void sub_186BE2640( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t flatbuffers::NumToString<unsigned int>@<X0>(std::stringbuf::string_type *a1@<X8>)
{
  v4[0] = *MEMORY[0x189614728];
  uint64_t v2 = *(void *)(MEMORY[0x189614728] + 72LL);
  *(void *)((char *)v4 + *(void *)(v4[0] - 24LL)) = *(void *)(MEMORY[0x189614728] + 64LL);
  int v4[2] = v2;
  v5.__vftable = (std::stringbuf_vtbl *)(MEMORY[0x189614750] + 16LL);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x186E457C0](&v6);
}

void sub_186BE2710(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t flatbuffers::NumToString<long long>@<X0>(std::stringbuf::string_type *a1@<X8>)
{
  v4[0] = *MEMORY[0x189614728];
  uint64_t v2 = *(void *)(MEMORY[0x189614728] + 72LL);
  *(void *)((char *)v4 + *(void *)(v4[0] - 24LL)) = *(void *)(MEMORY[0x189614728] + 64LL);
  int v4[2] = v2;
  v5.__vftable = (std::stringbuf_vtbl *)(MEMORY[0x189614750] + 16LL);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x186E457C0](&v6);
}

void sub_186BE27D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t flatbuffers::NumToString<unsigned long long>@<X0>(std::stringbuf::string_type *a1@<X8>)
{
  v4[0] = *MEMORY[0x189614728];
  uint64_t v2 = *(void *)(MEMORY[0x189614728] + 72LL);
  *(void *)((char *)v4 + *(void *)(v4[0] - 24LL)) = *(void *)(MEMORY[0x189614728] + 64LL);
  int v4[2] = v2;
  v5.__vftable = (std::stringbuf_vtbl *)(MEMORY[0x189614750] + 16LL);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x186E457C0](&v6);
}

void sub_186BE28A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t flatbuffers::FloatToString<float>@<X0>(int a1@<W0>, std::string *a2@<X8>)
{
  uint64_t v4 = v13;
  *(_DWORD *)((char *)&v13 + *(void *)(v13 - 24) + _Block_object_dispose(va, 8) = *(_DWORD *)((_BYTE *)&v13 + *(void *)(v13 - 24) + 8) & 0xFFFFFEFB | 4;
  *(std::locale::__imp **)((char *)&v14.__loc_.__locale_ + *(void *)(v4 - 24)) = (std::locale::__imp *)a1;
  std::ostream::operator<<();
  std::stringbuf::str(a2, &v14);
  std::string::size_type size = a2->__r_.__value_.__s.__size_;
  if ((size & 0x80u) == 0LL) {
    uint64_t v6 = a2;
  }
  else {
    uint64_t v6 = (std::string *)a2->__r_.__value_.__r.__words[0];
  }
  if ((size & 0x80u) != 0LL) {
    std::string::size_type size = a2->__r_.__value_.__l.__size_;
  }
  while (size)
  {
    int v7 = v6->__r_.__value_.__s.__data_[--size];
    if (v7 != 48)
    {
      if (size != -1LL)
      {
        BOOL v8 = v6->__r_.__value_.__s.__data_[size] == 46;
        uint64_t v9 = 1LL;
        if (v8) {
          uint64_t v9 = 2LL;
        }
        std::string::resize(a2, v9 + size, 0);
      }

      break;
    }
  }

  v12[0] = *MEMORY[0x189614728];
  uint64_t v10 = *(void *)(MEMORY[0x189614728] + 72LL);
  *(void *)((char *)v12 + *(void *)(v12[0] - 24LL)) = *(void *)(MEMORY[0x189614728] + 64LL);
  uint64_t v13 = v10;
  v14.__vftable = (std::stringbuf_vtbl *)(MEMORY[0x189614750] + 16LL);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x186E457C0](&v15);
}

void sub_186BE29F8(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t flatbuffers::FloatToString<double>@<X0>(int a1@<W0>, std::string *a2@<X8>)
{
  uint64_t v4 = v13;
  *(_DWORD *)((char *)&v13 + *(void *)(v13 - 24) + _Block_object_dispose(va, 8) = *(_DWORD *)((_BYTE *)&v13 + *(void *)(v13 - 24) + 8) & 0xFFFFFEFB | 4;
  *(std::locale::__imp **)((char *)&v14.__loc_.__locale_ + *(void *)(v4 - 24)) = (std::locale::__imp *)a1;
  std::ostream::operator<<();
  std::stringbuf::str(a2, &v14);
  std::string::size_type size = a2->__r_.__value_.__s.__size_;
  if ((size & 0x80u) == 0LL) {
    uint64_t v6 = a2;
  }
  else {
    uint64_t v6 = (std::string *)a2->__r_.__value_.__r.__words[0];
  }
  if ((size & 0x80u) != 0LL) {
    std::string::size_type size = a2->__r_.__value_.__l.__size_;
  }
  while (size)
  {
    int v7 = v6->__r_.__value_.__s.__data_[--size];
    if (v7 != 48)
    {
      if (size != -1LL)
      {
        BOOL v8 = v6->__r_.__value_.__s.__data_[size] == 46;
        uint64_t v9 = 1LL;
        if (v8) {
          uint64_t v9 = 2LL;
        }
        std::string::resize(a2, v9 + size, 0);
      }

      break;
    }
  }

  v12[0] = *MEMORY[0x189614728];
  uint64_t v10 = *(void *)(MEMORY[0x189614728] + 72LL);
  *(void *)((char *)v12 + *(void *)(v12[0] - 24LL)) = *(void *)(MEMORY[0x189614728] + 64LL);
  uint64_t v13 = v10;
  v14.__vftable = (std::stringbuf_vtbl *)(MEMORY[0x189614750] + 16LL);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x186E457C0](&v15);
}

void sub_186BE2B68(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t flatbuffers::EscapeString(uint64_t a1, unint64_t a2, std::string *this, int a4, int a5)
{
  if (!a2)
  {
LABEL_78:
    std::string::append(this, "");
    return 1LL;
  }

  uint64_t v8 = 0LL;
  unsigned int v9 = 0;
  uint64_t v10 = "\\b";
  uint64_t v11 = "\\f";
  while (2)
  {
    std::string::size_type v12 = (const std::string::value_type *)(a1 + v8);
    unint64_t v13 = *(char *)(a1 + v8);
    switch(*(_BYTE *)(a1 + v8))
    {
      case 8:
        std::stringbuf v14 = this;
        uint64_t v15 = v10;
        goto LABEL_15;
      case 9:
        std::stringbuf v14 = this;
        uint64_t v15 = "\\t";
        goto LABEL_15;
      case 0xA:
        std::stringbuf v14 = this;
        uint64_t v15 = "\\n";
        goto LABEL_15;
      case 0xB:
        goto LABEL_8;
      case 0xC:
        std::stringbuf v14 = this;
        uint64_t v15 = v11;
        goto LABEL_15;
      case 0xD:
        std::stringbuf v14 = this;
        uint64_t v15 = "\\r";
        goto LABEL_15;
      default:
        if ((_DWORD)v13 == 34)
        {
          std::stringbuf v14 = this;
          uint64_t v15 = "\\";
          goto LABEL_15;
        }

        if ((_DWORD)v13 == 92)
        {
          std::stringbuf v14 = this;
          uint64_t v15 = "\\\\"";
LABEL_15:
          std::string::append(v14, v15);
          goto LABEL_16;
        }

LABEL_73:
          unsigned int v9 = v26 + ~(_DWORD)a1;
          uint64_t v10 = v17;
          goto LABEL_16;
        }

LABEL_23:
        if (a4)
        {
          std::string::append(this, "\\x");
          flatbuffers::IntToStringHex(v19, 2, &__p);
          if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
            unint64_t v22 = &__p;
          }
          else {
            unint64_t v22 = (std::stringbuf::string_type *)__p.__r_.__value_.__r.__words[0];
          }
          if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
            std::string::size_type v23 = __p.__r_.__value_.__s.__size_;
          }
          else {
            std::string::size_type v23 = __p.__r_.__value_.__l.__size_;
          }
          std::string::append(this, (const std::string::value_type *)v22, v23);
          uint64_t v10 = v17;
          uint64_t v11 = v16;
          goto LABEL_16;
        }

        return 0LL;
    }
  }

        uint64_t v8 = (v16 - 1) & v16;
        std::stringbuf v14 = __clz(__rbit64(v16)) + (v5 << 6);
      }

      unsigned int v18 = *(void *)(v2 + 48) + 4 * v14;
      uint64_t v19 = *(_WORD *)v18;
      unsigned int v20 = *(_BYTE *)(v18 + 2);
      sub_186C5B59C();
      sub_186C5B5A8();
      if ((v20 & 1) != 0) {
        sub_186C5B5C0();
      }
      else {
        sub_186C5B5B4();
      }
      BOOL result = sub_186C5B5D8();
      int v21 = -1LL << *(_BYTE *)(v4 + 32);
      unint64_t v22 = result & ~v21;
      std::string::size_type v23 = v22 >> 6;
      if (((-1LL << v22) & ~*(void *)(v10 + 8 * (v22 >> 6))) != 0)
      {
        uint64_t v11 = __clz(__rbit64((-1LL << v22) & ~*(void *)(v10 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0LL;
      }

      else
      {
        uint64_t v24 = 0;
        char v25 = (unint64_t)(63 - v21) >> 6;
        do
        {
          if (++v23 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }

          uint64_t v26 = v23 == v25;
          if (v23 == v25) {
            std::string::size_type v23 = 0LL;
          }
          v24 |= v26;
          unint64_t v27 = *(void *)(v10 + 8 * v23);
        }

        while (v27 == -1);
        uint64_t v11 = __clz(__rbit64(~v27)) + (v23 << 6);
      }

      *(void *)(v10 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v11;
      std::string::size_type v12 = *(void *)(v4 + 48) + 4 * v11;
      *(_WORD *)std::string::size_type v12 = v19;
      *(_BYTE *)(v12 + 2) = v20;
      ++*(void *)(v4 + 16);
    }
  }

  BOOL result = swift_release();
  *uint64_t v1 = v4;
  return result;
}

    unsigned int v9 = (v16 - 1) & v16;
    std::stringbuf v14 = __clz(__rbit64(v16)) + (v5 << 6);
LABEL_24:
    unsigned int v18 = *(void *)(v2 + 48) + 4 * v14;
    uint64_t v19 = *(_WORD *)v18;
    unsigned int v20 = *(_BYTE *)(v18 + 2);
    sub_186C5B59C();
    sub_186C5B5A8();
    if ((v20 & 1) != 0) {
      sub_186C5B5C0();
    }
    else {
      sub_186C5B5B4();
    }
    BOOL result = sub_186C5B5D8();
    int v21 = -1LL << *(_BYTE *)(v4 + 32);
    unint64_t v22 = result & ~v21;
    std::string::size_type v23 = v22 >> 6;
    if (((-1LL << v22) & ~*(void *)(v10 + 8 * (v22 >> 6))) != 0)
    {
      uint64_t v11 = __clz(__rbit64((-1LL << v22) & ~*(void *)(v10 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      uint64_t v24 = 0;
      char v25 = (unint64_t)(63 - v21) >> 6;
      do
      {
        if (++v23 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }

        uint64_t v26 = v23 == v25;
        if (v23 == v25) {
          std::string::size_type v23 = 0LL;
        }
        v24 |= v26;
        unint64_t v27 = *(void *)(v10 + 8 * v23);
      }

      while (v27 == -1);
      uint64_t v11 = __clz(__rbit64(~v27)) + (v23 << 6);
    }

    *(void *)(v10 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v11;
    std::string::size_type v12 = *(void *)(v4 + 48) + 4 * v11;
    *(_WORD *)std::string::size_type v12 = v19;
    *(_BYTE *)(v12 + 2) = v20;
    ++*(void *)(v4 + 16);
  }

  uint64_t v17 = v15 + 3;
  if (v17 >= v28)
  {
LABEL_36:
    BOOL result = swift_release();
    uint64_t v1 = v0;
    goto LABEL_38;
  }

  unint64_t v16 = *(void *)(v6 + 8 * v17);
  if (v16)
  {
    std::stringbuf v5 = v17;
    goto LABEL_23;
  }

  while (1)
  {
    std::stringbuf v5 = v17 + 1;
    if (__OFADD__(v17, 1LL)) {
      break;
    }
    if (v5 >= v28) {
      goto LABEL_36;
    }
    unint64_t v16 = *(void *)(v6 + 8 * v5);
    ++v17;
    if (v16) {
      goto LABEL_23;
    }
  }

  __break(1u);
LABEL_24:
  BOOL result = sub_186C5B398();
  __break(1u);
  return result;
}

        int v7 = (v15 - 1) & v15;
        unint64_t v13 = __clz(__rbit64(v15)) + (v10 << 6);
      }

      uint64_t v17 = *(void *)(*(void *)(v2 + 48) + 8 * v13);
      sub_186C5AD2C();
      sub_186C5B59C();
      sub_186C5ADA4();
      unsigned int v18 = sub_186C5B5D8();
      BOOL result = swift_bridgeObjectRelease();
      uint64_t v19 = -1LL << *(_BYTE *)(v4 + 32);
      unsigned int v20 = v18 & ~v19;
      int v21 = v20 >> 6;
      if (((-1LL << v20) & ~*(void *)(v8 + 8 * (v20 >> 6))) != 0)
      {
        uint64_t v11 = __clz(__rbit64((-1LL << v20) & ~*(void *)(v8 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0LL;
      }

      else
      {
        unint64_t v22 = 0;
        std::string::size_type v23 = (unint64_t)(63 - v19) >> 6;
        do
        {
          if (++v21 == v23 && (v22 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }

          uint64_t v24 = v21 == v23;
          if (v21 == v23) {
            int v21 = 0LL;
          }
          v22 |= v24;
          char v25 = *(void *)(v8 + 8 * v21);
        }

        while (v25 == -1);
        uint64_t v11 = __clz(__rbit64(~v25)) + (v21 << 6);
      }

      *(void *)(v8 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v11;
      *(void *)(*(void *)(v4 + 48) + 8 * v1ktrace_session_set_default_event_names_enabled(global_session, 1) = v17;
      ++*(void *)(v4 + 16);
    }
  }

  BOOL result = swift_release();
  *uint64_t v1 = v4;
  return result;
}

    int v7 = (v15 - 1) & v15;
    unint64_t v13 = __clz(__rbit64(v15)) + (v10 << 6);
LABEL_24:
    uint64_t v17 = *(void **)(*(void *)(v2 + 48) + 8 * v13);
    sub_186C5AD2C();
    sub_186C5B59C();
    unsigned int v18 = v17;
    sub_186C5ADA4();
    uint64_t v19 = sub_186C5B5D8();
    BOOL result = swift_bridgeObjectRelease();
    unsigned int v20 = -1LL << *(_BYTE *)(v4 + 32);
    int v21 = v19 & ~v20;
    unint64_t v22 = v21 >> 6;
    if (((-1LL << v21) & ~*(void *)(v8 + 8 * (v21 >> 6))) != 0)
    {
      uint64_t v11 = __clz(__rbit64((-1LL << v21) & ~*(void *)(v8 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      std::string::size_type v23 = 0;
      uint64_t v24 = (unint64_t)(63 - v20) >> 6;
      do
      {
        if (++v22 == v24 && (v23 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }

        char v25 = v22 == v24;
        if (v22 == v24) {
          unint64_t v22 = 0LL;
        }
        v23 |= v25;
        uint64_t v26 = *(void *)(v8 + 8 * v22);
      }

      while (v26 == -1);
      uint64_t v11 = __clz(__rbit64(~v26)) + (v22 << 6);
    }

    *(void *)(v8 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v11;
    *(void *)(*(void *)(v4 + 48) + 8 * v1ktrace_session_set_default_event_names_enabled(global_session, 1) = v18;
    ++*(void *)(v4 + 16);
  }

  unint64_t v16 = v14 + 3;
  if (v16 >= v29)
  {
LABEL_33:
    BOOL result = swift_release_n();
    uint64_t v1 = v27;
    goto LABEL_35;
  }

  uint64_t v15 = *(void *)(v28 + 8 * v16);
  if (v15)
  {
    uint64_t v10 = v16;
    goto LABEL_23;
  }

  while (1)
  {
    uint64_t v10 = v16 + 1;
    if (__OFADD__(v16, 1LL)) {
      break;
    }
    if (v10 >= v29) {
      goto LABEL_33;
    }
    uint64_t v15 = *(void *)(v28 + 8 * v10);
    ++v16;
    if (v15) {
      goto LABEL_23;
    }
  }

  uint64_t v6 = v7;
LABEL_48:
  if (v6 != v4 || v6 >= &v4[(v14 - v4 + (v14 - v4 < 0 ? 0xFuLL : 0)) & 0xFFFFFFFFFFFFFFF0LL]) {
    memmove(v6, v4, 16 * ((v14 - v4) / 16));
  }
  return 1LL;
}

        int v7 = (v17 - 1) & v17;
        uint64_t v15 = __clz(__rbit64(v17)) + (v11 << 6);
      }

      uint64_t v19 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
      unsigned int v20 = *v19;
      int v21 = v19[1];
      sub_186C5B59C();
      sub_186C5ADA4();
      BOOL result = sub_186C5B5D8();
      unint64_t v22 = -1LL << *(_BYTE *)(v4 + 32);
      std::string::size_type v23 = result & ~v22;
      uint64_t v24 = v23 >> 6;
      if (((-1LL << v23) & ~*(void *)(v9 + 8 * (v23 >> 6))) != 0)
      {
        std::string::size_type v12 = __clz(__rbit64((-1LL << v23) & ~*(void *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0LL;
      }

      else
      {
        char v25 = 0;
        uint64_t v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }

          unint64_t v27 = v24 == v26;
          if (v24 == v26) {
            uint64_t v24 = 0LL;
          }
          v25 |= v27;
          std::string::size_type v28 = *(void *)(v9 + 8 * v24);
        }

        while (v28 == -1);
        std::string::size_type v12 = __clz(__rbit64(~v28)) + (v24 << 6);
      }

      *(void *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v12;
      unint64_t v13 = (void *)(*(void *)(v4 + 48) + 16 * v12);
      *unint64_t v13 = v20;
      v13[1] = v21;
      ++*(void *)(v4 + 16);
    }
  }

  BOOL result = swift_release();
  *uint64_t v1 = v4;
  return result;
}

        int v7 = (v16 - 1) & v16;
        std::stringbuf v14 = __clz(__rbit64(v16)) + (v10 << 6);
      }

      unsigned int v18 = (uint64_t *)(*(void *)(v2 + 48) + 328 * v14);
      uint64_t v19 = *v18;
      unsigned int v20 = v18[1];
      memcpy(__src, v18 + 2, sizeof(__src));
      sub_186C5B59C();
      swift_bridgeObjectRetain();
      sub_186C5ADA4();
      swift_bridgeObjectRelease();
      BOOL result = sub_186C5B5D8();
      int v21 = -1LL << *(_BYTE *)(v4 + 32);
      unint64_t v22 = result & ~v21;
      std::string::size_type v23 = v22 >> 6;
      if (((-1LL << v22) & ~*(void *)(v8 + 8 * (v22 >> 6))) != 0)
      {
        uint64_t v11 = __clz(__rbit64((-1LL << v22) & ~*(void *)(v8 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0LL;
      }

      else
      {
        uint64_t v24 = 0;
        char v25 = (unint64_t)(63 - v21) >> 6;
        do
        {
          if (++v23 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }

          uint64_t v26 = v23 == v25;
          if (v23 == v25) {
            std::string::size_type v23 = 0LL;
          }
          v24 |= v26;
          unint64_t v27 = *(void *)(v8 + 8 * v23);
        }

        while (v27 == -1);
        uint64_t v11 = __clz(__rbit64(~v27)) + (v23 << 6);
      }

      *(void *)(v8 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v11;
      std::string::size_type v12 = (void *)(*(void *)(v4 + 48) + 328 * v11);
      *std::string::size_type v12 = v19;
      v12[1] = v20;
      BOOL result = (uint64_t)memcpy(v12 + 2, __src, 0x131uLL);
      ++*(void *)(v4 + 16);
    }
  }

  BOOL result = swift_release();
  *uint64_t v1 = v4;
  return result;
}

    uint64_t v8 = (v17 - 1) & v17;
    uint64_t v15 = __clz(__rbit64(v17)) + (v11 << 6);
LABEL_24:
    uint64_t v19 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    unsigned int v20 = *v19;
    int v21 = v19[1];
    sub_186C5B59C();
    swift_bridgeObjectRetain();
    sub_186C5ADA4();
    BOOL result = sub_186C5B5D8();
    unint64_t v22 = -1LL << *(_BYTE *)(v4 + 32);
    std::string::size_type v23 = result & ~v22;
    uint64_t v24 = v23 >> 6;
    if (((-1LL << v23) & ~*(void *)(v9 + 8 * (v23 >> 6))) != 0)
    {
      std::string::size_type v12 = __clz(__rbit64((-1LL << v23) & ~*(void *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      char v25 = 0;
      uint64_t v26 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (++v24 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }

        unint64_t v27 = v24 == v26;
        if (v24 == v26) {
          uint64_t v24 = 0LL;
        }
        v25 |= v27;
        std::string::size_type v28 = *(void *)(v9 + 8 * v24);
      }

      while (v28 == -1);
      std::string::size_type v12 = __clz(__rbit64(~v28)) + (v24 << 6);
    }

    *(void *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v12;
    unint64_t v13 = (void *)(*(void *)(v4 + 48) + 16 * v12);
    *unint64_t v13 = v20;
    v13[1] = v21;
    ++*(void *)(v4 + 16);
  }

  unsigned int v18 = v16 + 3;
  if (v18 >= v29)
  {
LABEL_33:
    BOOL result = swift_release_n();
    uint64_t v1 = v0;
    goto LABEL_35;
  }

  uint64_t v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    uint64_t v11 = v18;
    goto LABEL_23;
  }

  while (1)
  {
    uint64_t v11 = v18 + 1;
    if (__OFADD__(v18, 1LL)) {
      break;
    }
    if (v11 >= v29) {
      goto LABEL_33;
    }
    uint64_t v17 = *(void *)(v6 + 8 * v11);
    ++v18;
    if (v17) {
      goto LABEL_23;
    }
  }

    int v7 = (v15 - 1) & v15;
    unint64_t v13 = __clz(__rbit64(v15)) + (v10 << 6);
LABEL_24:
    memcpy(__src, (const void *)(*(void *)(v1 + 48) + 328 * v13), 0x141uLL);
    sub_186C5B59C();
    sub_186C23978((uint64_t)__src);
    swift_bridgeObjectRetain();
    sub_186C5ADA4();
    swift_bridgeObjectRelease();
    BOOL result = sub_186C5B5D8();
    uint64_t v17 = -1LL << *(_BYTE *)(v3 + 32);
    unsigned int v18 = result & ~v17;
    uint64_t v19 = v18 >> 6;
    if (((-1LL << v18) & ~*(void *)(v8 + 8 * (v18 >> 6))) != 0)
    {
      uint64_t v11 = __clz(__rbit64((-1LL << v18) & ~*(void *)(v8 + 8 * (v18 >> 6)))) | v18 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      unsigned int v20 = 0;
      int v21 = (unint64_t)(63 - v17) >> 6;
      do
      {
        if (++v19 == v21 && (v20 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }

        unint64_t v22 = v19 == v21;
        if (v19 == v21) {
          uint64_t v19 = 0LL;
        }
        v20 |= v22;
        std::string::size_type v23 = *(void *)(v8 + 8 * v19);
      }

      while (v23 == -1);
      uint64_t v11 = __clz(__rbit64(~v23)) + (v19 << 6);
    }

    *(void *)(v8 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v11;
    BOOL result = (uint64_t)memcpy((void *)(*(void *)(v3 + 48) + 328 * v11), __src, 0x141uLL);
    ++*(void *)(v3 + 16);
  }

  unint64_t v16 = v14 + 3;
  if (v16 >= v24)
  {
LABEL_33:
    BOOL result = swift_release_n();
    goto LABEL_35;
  }

  uint64_t v15 = *(void *)(v5 + 8 * v16);
  if (v15)
  {
    uint64_t v10 = v16;
    goto LABEL_23;
  }

  while (1)
  {
    uint64_t v10 = v16 + 1;
    if (__OFADD__(v16, 1LL)) {
      break;
    }
    if (v10 >= v24) {
      goto LABEL_33;
    }
    uint64_t v15 = *(void *)(v5 + 8 * v10);
    ++v16;
    if (v15) {
      goto LABEL_23;
    }
  }

    unint64_t v30 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v18);
    unsigned int v20 = *v30;
    int v21 = v30[1];
    uint64_t v31 = *(void *)(v5 + 56) + 200 * v18;
    size_t v73 = *(_OWORD *)v31;
    std::string::size_type v32 = *(_OWORD *)(v31 + 64);
    char v34 = *(_OWORD *)(v31 + 16);
    uint64_t v33 = *(_OWORD *)(v31 + 32);
    char v76 = *(_OWORD *)(v31 + 48);
    __int128 v77 = v32;
    char v74 = v34;
    uint64_t v75 = v33;
    uint64_t v35 = *(_OWORD *)(v31 + 128);
    uint64_t v37 = *(_OWORD *)(v31 + 80);
    char v36 = *(_OWORD *)(v31 + 96);
    uint64_t v80 = *(_OWORD *)(v31 + 112);
    uint64_t v81 = v35;
    __int128 v78 = v37;
    __int128 v79 = v36;
    char v39 = *(_OWORD *)(v31 + 160);
    uint64_t v38 = *(_OWORD *)(v31 + 176);
    uint64_t v40 = *(_OWORD *)(v31 + 144);
    int v85 = *(void *)(v31 + 192);
    uint64_t v83 = v39;
    v84 = v38;
    __int16 v82 = v40;
    v72 = v73;
    uint64_t v69 = v85;
    char v70 = v38;
    uint64_t v71 = *((void *)&v40 + 1);
    char v25 = BYTE8(v39);
    int v68 = v39;
    uint64_t v24 = v40;
    __int128 v66 = *((void *)&v79 + 1);
    uint64_t v67 = v81;
    uint64_t v64 = v79;
    kcdata_iter v65 = *((void *)&v80 + 1);
    uint64_t v62 = *((void *)&v37 + 1);
    uint64_t v63 = v80;
    uint64_t v60 = v37;
    __int128 v61 = v77;
    uint64_t v55 = *((void *)&v76 + 1);
    int v56 = *((void *)&v77 + 1);
    int v58 = v76;
    uint64_t v57 = *((void *)&v74 + 1);
    uint64_t v59 = v74;
    pid_t v54 = v75;
    std::string::size_type v23 = BYTE8(v75);
    swift_bridgeObjectRetain();
    sub_186C24F18((uint64_t)&v73);
LABEL_24:
    sub_186C5B59C();
    sub_186C5ADA4();
    BOOL result = sub_186C5B5D8();
    char v41 = -1LL << *(_BYTE *)(v7 + 32);
    CFStringRef v42 = result & ~v41;
    char v43 = v42 >> 6;
    if (((-1LL << v42) & ~*(void *)(v11 + 8 * (v42 >> 6))) != 0)
    {
      std::stringbuf v14 = __clz(__rbit64((-1LL << v42) & ~*(void *)(v11 + 8 * (v42 >> 6)))) | v42 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      unsigned int v44 = 0;
      char v45 = (unint64_t)(63 - v41) >> 6;
      do
      {
        if (++v43 == v45 && (v44 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }

        int v46 = v43 == v45;
        if (v43 == v45) {
          char v43 = 0LL;
        }
        v44 |= v46;
        __int128 v47 = *(void *)(v11 + 8 * v43);
      }

      while (v47 == -1);
      std::stringbuf v14 = __clz(__rbit64(~v47)) + (v43 << 6);
    }

    LOBYTE(v73) = v23;
    *(void *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v14;
    uint64_t v15 = (void *)(*(void *)(v7 + 48) + 16 * v14);
    const std::string::value_type *v15 = v20;
    v15[1] = v21;
    unint64_t v16 = *(void *)(v7 + 56) + 200 * v14;
    *(_OWORD *)unint64_t v16 = v72;
    *(void *)(v16 + 16) = v59;
    *(void *)(v16 + 24) = v57;
    *(void *)(v16 + 32) = v54;
    *(_BYTE *)(v16 + 40) = v23;
    *(void *)(v16 + 4_Block_object_dispose(va, 8) = v58;
    *(void *)(v16 + 56) = v55;
    *(void *)(v16 + std::__hash_table<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>>>::~__hash_table((uint64_t)this + 64) = v61;
    *(void *)(v16 + 72) = v56;
    *(_BYTE *)(v16 + 80) = v60;
    *(void *)(v16 + 8_Block_object_dispose(va, 8) = v62;
    *(void *)(v16 + 96) = v64;
    *(void *)(v16 + 104) = v66;
    *(void *)(v16 + 112) = v63;
    *(void *)(v16 + 120) = v65;
    *(_OWORD *)(v16 + 12_Block_object_dispose(va, 8) = v67;
    *(_BYTE *)(v16 + 144) = v24;
    *(void *)(v16 + 152) = v71;
    *(void *)(v16 + 160) = v68;
    *(_OWORD *)(v16 + std::__hash_table<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>>>::~__hash_table((uint64_t)this + 176) = v70;
    *(void *)(v16 + 192) = v69;
    *(_BYTE *)(v16 + 16_Block_object_dispose(va, 8) = v25;
    ++*(void *)(v7 + 16);
  }

  swift_release();
  uint64_t v3 = v49;
  unint64_t v27 = v51;
  if ((v53 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  __int128 v48 = 1LL << *(_BYTE *)(v5 + 32);
  if (v48 >= 64) {
    bzero(v27, ((unint64_t)(v48 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    *unint64_t v27 = -1LL << v48;
  }
  *(void *)(v5 + 16) = 0LL;
LABEL_40:
  BOOL result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

    uint64_t v6 = (v15 - 1) & v15;
    uint64_t v10 = __clz(__rbit64(v15)) + (v8 << 6);
LABEL_6:
    uint64_t v11 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v10);
    std::string::size_type v12 = *v11;
    unint64_t v13 = v11[1];
    swift_bridgeObjectRetain();
    sub_186C1E8E8(v12, v13);
    swift_bridgeObjectRelease();
    BOOL result = swift_bridgeObjectRelease();
  }

  unint64_t v16 = v14 + 4;
  if (v16 >= v7) {
    return swift_release();
  }
  uint64_t v15 = *(void *)(v3 + 8 * v16);
  if (v15)
  {
    uint64_t v8 = v16;
    goto LABEL_23;
  }

  while (1)
  {
    uint64_t v8 = v16 + 1;
    if (__OFADD__(v16, 1LL)) {
      break;
    }
    if (v8 >= v7) {
      return swift_release();
    }
    uint64_t v15 = *(void *)(v3 + 8 * v8);
    ++v16;
    if (v15) {
      goto LABEL_23;
    }
  }

    unsigned int v9 = (v15 - 1) & v15;
    unint64_t v13 = __clz(__rbit64(v15)) + (v10 << 6);
LABEL_24:
    uint64_t v17 = (uint64_t *)(*(void *)(v4 + 48) + 16 * v13);
    unsigned int v18 = *v17;
    uint64_t v19 = v17[1];
    sub_186C5B59C();
    swift_bridgeObjectRetain();
    sub_186C5ADA4();
    BOOL result = sub_186C5B5D8();
    unsigned int v20 = -1LL << *(_BYTE *)(v8 + 32);
    int v21 = result & ~v20;
    unint64_t v22 = v21 >> 6;
    if (((-1LL << v21) & ~*(void *)(v11 + 8 * (v21 >> 6))) != 0)
    {
      std::string::size_type v23 = __clz(__rbit64((-1LL << v21) & ~*(void *)(v11 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      uint64_t v24 = 0;
      char v25 = (unint64_t)(63 - v20) >> 6;
      do
      {
        if (++v22 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }

        uint64_t v26 = v22 == v25;
        if (v22 == v25) {
          unint64_t v22 = 0LL;
        }
        v24 |= v26;
        unint64_t v27 = *(void *)(v11 + 8 * v22);
      }

      while (v27 == -1);
      std::string::size_type v23 = __clz(__rbit64(~v27)) + (v22 << 6);
    }

    *(void *)(v11 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v23;
    std::string::size_type v28 = (void *)(*(void *)(v8 + 48) + 16 * v23);
    *std::string::size_type v28 = v18;
    v28[1] = v19;
    ++*(void *)(v8 + 16);
    if (__OFSUB__(v5--, 1LL))
    {
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }

    if (!v5) {
      goto LABEL_36;
    }
  }

  unint64_t v16 = v14 + 3;
  if (v16 >= v30) {
    goto LABEL_36;
  }
  uint64_t v15 = a1[v16];
  if (v15)
  {
    uint64_t v10 = v16;
    goto LABEL_23;
  }

  while (1)
  {
    uint64_t v10 = v16 + 1;
    if (__OFADD__(v16, 1LL)) {
      break;
    }
    if (v10 >= v30) {
      goto LABEL_36;
    }
    uint64_t v15 = a1[v10];
    ++v16;
    if (v15) {
      goto LABEL_23;
    }
  }

  __break(1u);
LABEL_24:
  BOOL result = sub_186C5B398();
  __break(1u);
  return result;
}

        uint64_t v8 = (v16 - 1) & v16;
        std::stringbuf v14 = __clz(__rbit64(v16)) + (v5 << 6);
      }

      unsigned int v18 = *(void *)(v2 + 48) + 8 * v14;
      uint64_t v19 = *(_DWORD *)v18;
      unsigned int v20 = *(_WORD *)(v18 + 4);
      sub_186C5B59C();
      sub_186C5B5CC();
      sub_186C5B5C0();
      BOOL result = sub_186C5B5D8();
      int v21 = -1LL << *(_BYTE *)(v4 + 32);
      unint64_t v22 = result & ~v21;
      std::string::size_type v23 = v22 >> 6;
      if (((-1LL << v22) & ~*(void *)(v10 + 8 * (v22 >> 6))) != 0)
      {
        uint64_t v11 = __clz(__rbit64((-1LL << v22) & ~*(void *)(v10 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0LL;
      }

      else
      {
        uint64_t v24 = 0;
        char v25 = (unint64_t)(63 - v21) >> 6;
        do
        {
          if (++v23 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }

          uint64_t v26 = v23 == v25;
          if (v23 == v25) {
            std::string::size_type v23 = 0LL;
          }
          v24 |= v26;
          unint64_t v27 = *(void *)(v10 + 8 * v23);
        }

        while (v27 == -1);
        uint64_t v11 = __clz(__rbit64(~v27)) + (v23 << 6);
      }

      *(void *)(v10 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v11;
      std::string::size_type v12 = *(void *)(v4 + 48) + 8 * v11;
      *(_DWORD *)std::string::size_type v12 = v19;
      *(_WORD *)(v12 + 4) = v20;
      ++*(void *)(v4 + 16);
    }
  }

  BOOL result = swift_release();
  *uint64_t v1 = v4;
  return result;
}

    unsigned int v9 = (v16 - 1) & v16;
    std::stringbuf v14 = __clz(__rbit64(v16)) + (v5 << 6);
LABEL_24:
    unsigned int v18 = *(void *)(v2 + 48) + 8 * v14;
    uint64_t v19 = *(_DWORD *)v18;
    unsigned int v20 = *(_WORD *)(v18 + 4);
    sub_186C5B59C();
    sub_186C5B5CC();
    sub_186C5B5C0();
    BOOL result = sub_186C5B5D8();
    int v21 = -1LL << *(_BYTE *)(v4 + 32);
    unint64_t v22 = result & ~v21;
    std::string::size_type v23 = v22 >> 6;
    if (((-1LL << v22) & ~*(void *)(v10 + 8 * (v22 >> 6))) != 0)
    {
      uint64_t v11 = __clz(__rbit64((-1LL << v22) & ~*(void *)(v10 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      uint64_t v24 = 0;
      char v25 = (unint64_t)(63 - v21) >> 6;
      do
      {
        if (++v23 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }

        uint64_t v26 = v23 == v25;
        if (v23 == v25) {
          std::string::size_type v23 = 0LL;
        }
        v24 |= v26;
        unint64_t v27 = *(void *)(v10 + 8 * v23);
      }

      while (v27 == -1);
      uint64_t v11 = __clz(__rbit64(~v27)) + (v23 << 6);
    }

    *(void *)(v10 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v11;
    std::string::size_type v12 = *(void *)(v4 + 48) + 8 * v11;
    *(_DWORD *)std::string::size_type v12 = v19;
    *(_WORD *)(v12 + 4) = v20;
    ++*(void *)(v4 + 16);
  }

  uint64_t v17 = v15 + 3;
  if (v17 >= v28)
  {
LABEL_33:
    BOOL result = swift_release();
    uint64_t v1 = v0;
    goto LABEL_35;
  }

  unint64_t v16 = *(void *)(v6 + 8 * v17);
  if (v16)
  {
    std::stringbuf v5 = v17;
    goto LABEL_23;
  }

  while (1)
  {
    std::stringbuf v5 = v17 + 1;
    if (__OFADD__(v17, 1LL)) {
      break;
    }
    if (v5 >= v28) {
      goto LABEL_33;
    }
    unint64_t v16 = *(void *)(v6 + 8 * v5);
    ++v17;
    if (v16) {
      goto LABEL_23;
    }
  }

void sub_186BE2FF0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t flatbuffers::IntToStringHex@<X0>( flatbuffers *this@<X0>, int a2@<W1>, std::stringbuf::string_type *a3@<X8>)
{
  *(std::streambuf::char_type **)((char *)&v12.__binp_ + *(void *)(v11 - 24)) = (std::streambuf::char_type *)a2;
  char v9 = 48;
  std::stringbuf v5 = std::operator<<[abi:ne180100]<std::char_traits<char>>(&v11, &v9);
  uint64_t v6 = *v5;
  *(_DWORD *)((char *)v5 + *(void *)(*v5 - 24) + _Block_object_dispose(va, 8) = *(_DWORD *)((_BYTE *)v5 + *(void *)(*v5 - 24) + 8) & 0xFFFFFFB5 | 8;
  *(_DWORD *)((char *)v5 + *(void *)(v6 - 24) + 8) |= 0x4000u;
  std::ostream::operator<<();
  std::stringbuf::str(a3, &v12);
  v10[0] = *MEMORY[0x189614728];
  uint64_t v7 = *(void *)(MEMORY[0x189614728] + 72LL);
  *(void *)((char *)v10 + *(void *)(v10[0] - 24LL)) = *(void *)(MEMORY[0x189614728] + 64LL);
  uint64_t v11 = v7;
  v12.__vftable = (std::stringbuf_vtbl *)(MEMORY[0x189614750] + 16LL);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x186E457C0](&v13);
}

void sub_186BE313C(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void *std::operator<<[abi:ne180100]<std::char_traits<char>>(void *a1, char *a2)
{
  uint64_t v3 = (char *)a1 + *(void *)(*a1 - 24LL);
  int v4 = *a2;
  if (*((_DWORD *)v3 + 36) == -1)
  {
    std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(void *)(*a1 - 24LL)));
    std::stringbuf v5 = std::locale::use_facet(&v8, MEMORY[0x189614558]);
    int v6 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 32LL);
    std::locale::~locale(&v8);
    *((_DWORD *)v3 + 36) = v6;
  }

  *((_DWORD *)v3 + 36) = v4;
  return a1;
}

void sub_186BE31E0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
}

uint64_t flatbuffers::IterateObject(int *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = (**(uint64_t (***)(uint64_t))a3)(a3);
  if (*(void *)(a2 + 8))
  {
    int v6 = 0LL;
    uint64_t v7 = 0LL;
    uint64_t v23 = 0LL;
    unint64_t v8 = 0LL;
    do
    {
      int v9 = *(__int16 *)(*(void *)(a2 + 16) + 2 * v8);
      if (v9 < 0) {
        uint64_t v10 = 0LL;
      }
      else {
      uint64_t v11 = *(void *)(a2 + 48);
      }
      if (v11) {
        uint64_t v12 = *(void *)(v11 + 8 * v8);
      }
      else {
        uint64_t v12 = 0LL;
      }
      if (*(_DWORD *)a2)
      {
        uint64_t v13 = (int *)((char *)a1 + *(void *)(*(void *)(a2 + 40) + 8 * v8));
      }

      else
      {
        std::stringbuf v14 = (unsigned __int16 *)((char *)a1 - *a1);
        if (*v14 > ((2 * (_WORD)v8 + 4) & 0xFFFEu)
          && *(unsigned __int16 *)((char *)v14 + (unsigned __int16)(2 * v8 + 4)))
        {
          uint64_t v13 = (int *)((char *)a1 + *(unsigned __int16 *)((char *)v14 + (unsigned __int16)(2 * v8 + 4)));
        }

        else
        {
          uint64_t v13 = 0LL;
        }
      }

      uint64_t v15 = v9 & 0xF;
      uint64_t v5 = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t, uint64_t, void, void *, uint64_t, int *))(*(void *)a3 + 16LL))( a3,  v8,  v7,  v15,  ((unsigned __int16)v9 >> 4) & 1,  v10,  v12,  v13);
      if (v13)
      {
        ++v7;
        if ((v9 & 0x10) != 0)
        {
          uint64_t v24 = v7;
          if (*(_DWORD *)a2)
          {
            uint64_t v16 = *(__int16 *)(*(void *)(a2 + 32) + 2 * v23++);
            uint64_t v17 = v13;
          }

          else
          {
            uint64_t v13 = (int *)((char *)v13 + *v13);
            uint64_t v17 = v13 + 1;
            uint64_t v16 = *v13;
          }

          (*(void (**)(uint64_t))(*(void *)a3 + 136LL))(a3);
          if (v16)
          {
            uint64_t v18 = 0LL;
            while (2)
            {
              (*(void (**)(uint64_t, uint64_t, uint64_t, void *, int *))(*(void *)a3 + 152LL))( a3,  v18,  v15,  v10,  v17);
              flatbuffers::IterateValue(v15, v17, v10, v6, v18, a3);
              uint64_t v19 = 1LL;
              switch((int)v15)
              {
                case 0:
                case 1:
                case 2:
                case 3:
                  goto LABEL_27;
                case 4:
                case 5:
                  uint64_t v19 = 2LL;
                  goto LABEL_27;
                case 6:
                case 7:
                case 10:
                case 12:
                  goto LABEL_24;
                case 8:
                case 9:
                case 11:
                  uint64_t v19 = 8LL;
                  goto LABEL_27;
                case 13:
                  int v20 = *(_DWORD *)v10;
                  if (*(_DWORD *)v10) {
                    BOOL v21 = v20 == 2;
                  }
                  else {
                    BOOL v21 = 1;
                  }
                  if (v21)
                  {
LABEL_24:
                    uint64_t v19 = 4LL;
                  }

                  else
                  {
                    if (v20 != 1) {
                      flatbuffers::IterateObject();
                    }
                    uint64_t v19 = *(void *)(v10[5] + 8LL * v10[1]);
                  }

uint64_t flatbuffers::IterateValue( uint64_t result, int *a2, void *a3, unsigned int *a4, unsigned int a5, uint64_t a6)
{
  switch((int)result)
  {
    case 0:
      uint64_t v7 = *(unsigned __int8 *)a2;
      uint64_t v8 = flatbuffers::EnumName<unsigned char>(*(unsigned __int8 *)a2, a3);
      int v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a6 + 24LL);
      return v9(a6, v7, v8);
    case 1:
      return (*(uint64_t (**)(uint64_t, BOOL))(*(void *)a6 + 32LL))(a6, *(_BYTE *)a2 != 0);
    case 2:
      uint64_t v7 = *(char *)a2;
      uint64_t v8 = flatbuffers::EnumName<signed char>(*(char *)a2, a3);
      int v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a6 + 40LL);
      return v9(a6, v7, v8);
    case 3:
      uint64_t v7 = *(unsigned __int8 *)a2;
      uint64_t v8 = flatbuffers::EnumName<unsigned char>(*(unsigned __int8 *)a2, a3);
      int v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a6 + 48LL);
      return v9(a6, v7, v8);
    case 4:
      uint64_t v7 = *(__int16 *)a2;
      uint64_t v8 = flatbuffers::EnumName<signed char>(*(__int16 *)a2, a3);
      int v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a6 + 56LL);
      return v9(a6, v7, v8);
    case 5:
      uint64_t v7 = *(unsigned __int16 *)a2;
      uint64_t v8 = flatbuffers::EnumName<unsigned char>(*(unsigned __int16 *)a2, a3);
      int v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a6 + 64LL);
      return v9(a6, v7, v8);
    case 6:
      uint64_t v7 = *a2;
      uint64_t v8 = flatbuffers::EnumName<signed char>(*a2, a3);
      int v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a6 + 72LL);
      return v9(a6, v7, v8);
    case 7:
      uint64_t v7 = *a2;
      uint64_t v8 = flatbuffers::EnumName<unsigned char>(*a2, a3);
      int v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a6 + 80LL);
      return v9(a6, v7, v8);
    case 8:
      a2 = *(int **)a2;
      uint64_t v10 = *(uint64_t (**)(uint64_t, int *))(*(void *)a6 + 88LL);
      goto LABEL_19;
    case 9:
      a2 = *(int **)a2;
      uint64_t v10 = *(uint64_t (**)(uint64_t, int *))(*(void *)a6 + 96LL);
      goto LABEL_19;
    case 10:
      return (*(uint64_t (**)(uint64_t, float))(*(void *)a6 + 104LL))(a6, *(float *)a2);
    case 11:
      return (*(uint64_t (**)(uint64_t, double))(*(void *)a6 + 112LL))(a6, *(double *)a2);
    case 12:
      a2 = (int *)((char *)a2 + *a2);
      uint64_t v10 = *(uint64_t (**)(uint64_t, int *))(*(void *)a6 + 120LL);
      goto LABEL_19;
    case 13:
      switch(*(_DWORD *)a3)
      {
        case 0:
          uint64_t v11 = (int *)((char *)a2 + *a2);
          goto LABEL_22;
        case 1:
          uint64_t v11 = a2;
LABEL_22:
          uint64_t v13 = (uint64_t)a3;
          return flatbuffers::IterateObject(v11, v13, a6);
        case 2:
          if (!a4) {
            flatbuffers::IterateValue();
          }
          if ((a5 & 0x80000000) == 0)
          {
            if (*a4 <= a5) {
              flatbuffers::IterateValue();
            }
            a4 = (unsigned int *)((char *)a4 + a5 + 4);
          }

          std::stringbuf v14 = (int *)((char *)a2 + *a2);
          uint64_t v15 = a3[5];
          uint64_t v16 = a3[1];
          if (v15)
          {
            if (!v16) {
              goto LABEL_40;
            }
            uint64_t v17 = 0LL;
            while (*(void *)(v15 + 8 * v17) != *(unsigned __int8 *)a4)
            {
              if (v16 == ++v17) {
                goto LABEL_40;
              }
            }

            if (v17 < 0) {
              goto LABEL_40;
            }
          }

          else
          {
            uint64_t v17 = *(unsigned __int8 *)a4;
          }

          __int16 v18 = *(_WORD *)(a3[2] + 2 * v17);
          if ((v18 & 0xF) == 0xC)
          {
            uint64_t v10 = *(uint64_t (**)(uint64_t, int *))(*(void *)a6 + 120LL);
            goto LABEL_41;
          }

          if ((v18 & 0xF) != 0xD)
          {
LABEL_40:
            uint64_t v10 = *(uint64_t (**)(uint64_t, int *))(*(void *)a6 + 128LL);
LABEL_41:
            uint64_t v12 = a6;
            a2 = (int *)((char *)a2 + *a2);
            return v10(v12, a2);
          }

          uint64_t v13 = (*(uint64_t (**)(void))(a3[3] + 8LL * (v18 >> 5)))();
          uint64_t v11 = v14;
          return flatbuffers::IterateObject(v11, v13, a6);
        case 3:
          flatbuffers::IterateValue();
        default:
          return result;
      }

    default:
      uint64_t v10 = *(uint64_t (**)(uint64_t, int *))(*(void *)a6 + 128LL);
LABEL_19:
      uint64_t v12 = a6;
      return v10(v12, a2);
  }

uint64_t flatbuffers::EnumName<unsigned char>(unsigned int a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2[6];
    if (v2)
    {
      uint64_t v3 = a2[5];
      uint64_t v4 = a2[1];
      if (v3)
      {
        if (!v4) {
          return 0LL;
        }
        uint64_t v5 = 0LL;
        while (*(void *)(v3 + 8 * v5) != a1)
        {
          if (v4 == ++v5) {
            return 0LL;
          }
        }

        if (v5 < 0) {
          return 0LL;
        }
      }

      else
      {
        uint64_t v5 = a1;
      }

      if (v5 < v4) {
        return *(void *)(v2 + 8 * v5);
      }
    }
  }

  return 0LL;
}

uint64_t flatbuffers::EnumName<signed char>(int a1, void *a2)
{
  if (!a2) {
    return 0LL;
  }
  uint64_t v2 = a2[6];
  if (!v2) {
    return 0LL;
  }
  uint64_t v3 = a2[5];
  uint64_t v4 = a2[1];
  if (v3)
  {
    if (v4)
    {
      uint64_t v5 = 0LL;
      while (*(void *)(v3 + 8 * v5) != a1)
      {
        if (v4 == ++v5) {
          return 0LL;
        }
      }

      goto LABEL_11;
    }

    return 0LL;
  }

  uint64_t v5 = a1;
LABEL_11:
  uint64_t result = 0LL;
  if ((v5 & 0x8000000000000000LL) == 0 && v5 < v4) {
    return *(void *)(v2 + 8 * v5);
  }
  return result;
}

void *FlatbufferSymbols::SymbolicatorTypeTable(FlatbufferSymbols *this)
{
  return &FlatbufferSymbols::SymbolicatorTypeTable(void)::tt;
}

void *FlatbufferSymbols::StringEntryTypeTable(FlatbufferSymbols *this)
{
  return &FlatbufferSymbols::StringEntryTypeTable(void)::tt;
}

void *FlatbufferSymbols::AddressSpaceMetadataTypeTable(FlatbufferSymbols *this)
{
  return &FlatbufferSymbols::AddressSpaceMetadataTypeTable(void)::tt;
}

void *FlatbufferSymbols::SymbolOwnerTypeTable(FlatbufferSymbols *this)
{
  return &FlatbufferSymbols::SymbolOwnerTypeTable(void)::tt;
}

void *FlatbufferSymbols::SharedCacheTypeTable(FlatbufferSymbols *this)
{
  return &FlatbufferSymbols::SharedCacheTypeTable(void)::tt;
}

void *FlatbufferSymbols::ProcessMetadataTypeTable(FlatbufferSymbols *this)
{
  return &FlatbufferSymbols::ProcessMetadataTypeTable(void)::tt;
}

void *FlatbufferSymbols::MachoMetadataTypeTable(FlatbufferSymbols *this)
{
  return &FlatbufferSymbols::MachoMetadataTypeTable(void)::tt;
}

void *FlatbufferSymbols::DyldSharedCacheMetadataTypeTable(FlatbufferSymbols *this)
{
  return &FlatbufferSymbols::DyldSharedCacheMetadataTypeTable(void)::tt;
}

void *FlatbufferSymbols::CPUArchitectureTypeTable(FlatbufferSymbols *this)
{
  return &FlatbufferSymbols::CPUArchitectureTypeTable(void)::tt;
}

void *FlatbufferSymbols::SymbolOwnerMetadataTypeTable(FlatbufferSymbols *this)
{
  return &FlatbufferSymbols::SymbolOwnerMetadataTypeTable(void)::tt;
}

void *FlatbufferSymbols::SegmentTypeTable(FlatbufferSymbols *this)
{
  return &FlatbufferSymbols::SegmentTypeTable(void)::tt;
}

void *FlatbufferSymbols::SymbolTypeTable(FlatbufferSymbols *this)
{
  return &FlatbufferSymbols::SymbolTypeTable(void)::tt;
}

void *FlatbufferSymbols::SourceInfoTypeTable(FlatbufferSymbols *this)
{
  return &FlatbufferSymbols::SourceInfoTypeTable(void)::tt;
}

void *FlatbufferSymbols::SharedCacheMetadataTypeTable(FlatbufferSymbols *this)
{
  return &FlatbufferSymbols::SharedCacheMetadataTypeTable(void)::tt;
}

uint64_t __Block_byref_object_copy__299(uint64_t a1, uint64_t a2)
{
  return flatbuffers::FlatBufferBuilder::FlatBufferBuilder(a1 + 48, (flatbuffers::FlatBufferBuilder *)(a2 + 48));
}

void __Block_byref_object_dispose__300(uint64_t a1)
{
}

uint64_t __Block_byref_object_copy__302(uint64_t result, uint64_t a2)
{
  *(_DWORD *)(result + 4_Block_object_dispose(va, 8) = *(_DWORD *)(a2 + 48);
  return result;
}

uint64_t ktrace_address_space_iterate_symbol_owners(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (!result) {
    ktrace_remotetime_update_params_cold_1();
  }
  uint64_t v3 = *(uint64_t **)(a2 + 16);
  uint64_t v4 = *v3;
  uint64_t v5 = v3[1];
  if (*v3 != v5)
  {
    uint64_t v7 = result;
    do
    {
      switch(*(_DWORD *)(v4 + 16))
      {
        case 1:
        case 2:
        case 5:
          uint64_t v13 = 0LL;
          uint64_t v8 = &v13;
          goto LABEL_7;
        case 3:
          uint64_t v15 = 0LL;
          uint64_t v8 = &v15;
LABEL_7:
          uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *))(a3 + 16))(a3, v4, v8);
          break;
        case 4:
          uint64_t v9 = *(void *)(v7 + 248);
          if (v9)
          {
            uint64_t v10 = *(uint64_t **)(v9 + 16);
            uint64_t v11 = *v10;
            uint64_t v12 = v10[1];
            while (v11 != v12)
            {
              uint64_t v14 = 0LL;
              uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *))(a3 + 16))(a3, v11, &v14);
              v11 += 96LL;
            }
          }

          break;
        default:
          ktrace_address_space_deep_iterate_symbol_owners();
      }

      v4 += 96LL;
    }

    while (v4 != v5);
  }

  return result;
}

uint64_t ___ZL17ktrace_dumpbufferP14ktrace_sessionP15ktrace_uuid_mapRNSt3__16vectorIP20ktrace_address_spaceNS3_9allocatorIS6_EEEEy_block_invoke( uint64_t result, uint64_t a2)
{
  if ((*(_BYTE *)(a2 + 88) & 2) != 0)
  {
    uint64_t v2 = result;
    uint64_t result = *(void *)a2;
    uint64_t v3 = *(void *)(a2 + 8);
    if (result | v3)
    {
      uint64_t v4 = (flatbuffers::FlatBufferBuilder *)(*(void *)(*(void *)(v2 + 40) + 8LL) + 48LL);
      uint64_t v5 = uuid_string(result, v3);
      uint64_t result = flatbuffers::FlatBufferBuilder::CreateString(v4, v5, 0x24uLL);
      *(_DWORD *)(*(void *)(*(void *)(v2 + 32) + 8LL) + 48LL) = result;
    }
  }

  return result;
}

uint64_t ktrace_address_space_buildbuffer( uint64_t a1, uint64_t a2, uint64_t a3, int a4, unsigned int a5, flatbuffers::FlatBufferBuilder *this, uint64_t a7, uint64_t a8)
{
  int String = flatbuffers::FlatBufferBuilder::CreateString(this, "__TEXT", 6uLL);
  uint64_t v37 = 0LL;
  uint64_t v38 = &v37;
  uint64_t v39 = 0x4812000000LL;
  uint64_t v40 = __Block_byref_object_copy__317;
  char v41 = __Block_byref_object_dispose__318;
  CFStringRef v42 = "";
  std::stringbuf::string_type __p = 0LL;
  unsigned int v44 = 0LL;
  uint64_t v45 = 0LL;
  uint64_t v30 = 0LL;
  uint64_t v31 = &v30;
  uint64_t v32 = 0x3812000000LL;
  uint64_t v33 = __Block_byref_object_copy__320;
  char v34 = __Block_byref_object_dispose__321;
  uint64_t v35 = "";
  uint64_t v17 = ktrace_address_space_deep_iterate_symbol_owners;
  int v36 = 0;
  if ((a8 & 1) != 0) {
    uint64_t v17 = ktrace_address_space_iterate_symbol_owners;
  }
  uint64_t v18 = *(void *)(a2 + 80);
  v28[0] = MEMORY[0x1895F87A8];
  v28[1] = 3221225472LL;
  _OWORD v28[2] = ___ZL32ktrace_address_space_buildbufferP14ktrace_sessionP21symbolication_contextP20ktrace_address_spaceN17FlatbufferSymbols20AddressSpaceMetadataEN11flatbuffers6OffsetIvEERNS7_17FlatBufferBuilderERNSt3__113unordered_mapI11CFUUIDBytesNS8_INS5_12SymbolicatorEEENSC_4hashISE_EENSC_8equal_toISE_EENSC_9allocatorINSC_4pairIKSE_SG_EEEEEEy_block_invoke;
  v28[3] = &unk_189F56EC0;
  v28[6] = a2;
  v28[7] = this;
  v28[8] = a8;
  v28[9] = a7;
  _BYTE v28[10] = a1;
  int v29 = String;
  v28[4] = &v30;
  void v28[5] = &v37;
  v17(v18, a3, (uint64_t)v28);
  uint64_t v19 = v38[7] - v38[6];
  if (v19) {
    int v20 = (void *)v38[6];
  }
  else {
    int v20 = &flatbuffers::data<flatbuffers::Offset<FlatbufferSymbols::SymbolOwner>,std::allocator<flatbuffers::Offset<FlatbufferSymbols::SymbolOwner>>>(std::vector<flatbuffers::Offset<FlatbufferSymbols::SymbolOwner>> const&)::t;
  }
  unsigned int v21 = flatbuffers::FlatBufferBuilder::CreateVector<KernelTraceCatalog::Thread>(this, (uint64_t)v20, v19 >> 2);
  if (*((_DWORD *)v31 + 12)) {
    unsigned int v22 = flatbuffers::FlatBufferBuilder::CreateVector<KernelTraceCatalog::Thread>(this, (uint64_t)(v31 + 6), 1LL);
  }
  else {
    unsigned int v22 = 0;
  }
  flatbuffers::FlatBufferBuilder::NotNested((uint64_t)this);
  *((_BYTE *)this + 70) = 1;
  int v23 = *((_DWORD *)this + 8);
  int v24 = *((_DWORD *)this + 12);
  int v25 = *((_DWORD *)this + 10);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((unint64_t)this, 4LL, a4, 0);
  flatbuffers::FlatBufferBuilder::AddOffset<flatbuffers::String>(this, 6LL, a5);
  flatbuffers::FlatBufferBuilder::AddOffset<flatbuffers::String>(this, 8LL, v21);
  if (v22) {
    flatbuffers::FlatBufferBuilder::AddOffset<flatbuffers::String>(this, 10LL, v22);
  }
  uint64_t v26 = flatbuffers::FlatBufferBuilder::EndTable(this, v23 - v24 + v25);
  _Block_object_dispose(&v30, 8);
  _Block_object_dispose(&v37, 8);
  if (__p)
  {
    unsigned int v44 = __p;
    operator delete(__p);
  }

  return v26;
}

void sub_186BE3CB8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, char a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, char a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, void *__p, uint64_t a35)
{
  if (__p)
  {
    a35 = (uint64_t)__p;
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void callback_deallocate_buffer(_BYTE *a1, _BYTE *a2)
{
  if (a1) {
    operator delete[]((void *)(a1 - a2));
  }
}

uint64_t flatbuffers::FlatBufferBuilder::FlatBufferBuilder(uint64_t a1, flatbuffers::FlatBufferBuilder *a2)
{
  *(void *)a1 = 0LL;
  *(_BYTE *)(a1 + _Block_object_dispose(va, 8) = 0;
  *(_OWORD *)(a1 + 16) = xmmword_186C5D0C0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 4_Block_object_dispose(va, 8) = 0u;
  *(void *)(a1 + std::__hash_table<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>>>::~__hash_table((uint64_t)this + 64) = 0LL;
  *(void *)(a1 + 72) = 1LL;
  *(_WORD *)(a1 + 80) = 256;
  *(void *)(a1 + 8_Block_object_dispose(va, 8) = 0LL;
  flatbuffers::FlatBufferBuilder::Swap((flatbuffers::FlatBufferBuilder *)a1, a2);
  return a1;
}

void sub_186BE3D5C(_Unwind_Exception *a1)
{
}

uint64_t *flatbuffers::FlatBufferBuilder::Swap( flatbuffers::FlatBufferBuilder *this, flatbuffers::FlatBufferBuilder *a2)
{
  uint64_t result = flatbuffers::vector_downward::swap((uint64_t *)this, a2);
  int v5 = *((_DWORD *)this + 16);
  *((_DWORD *)this + 16) = *((_DWORD *)a2 + 16);
  *((_DWORD *)a2 + 16) = v5;
  LOWORD(v5) = *((_WORD *)this + 34);
  *((_WORD *)this + 34) = *((_WORD *)a2 + 34);
  *((_WORD *)a2 + 34) = v5;
  LOBYTE(v5) = *((_BYTE *)this + 70);
  *((_BYTE *)this + 70) = *((_BYTE *)a2 + 70);
  *((_BYTE *)a2 + 70) = v5;
  LOBYTE(v5) = *((_BYTE *)this + 71);
  *((_BYTE *)this + 7ktrace_session_set_default_event_names_enabled(global_session, 1) = *((_BYTE *)a2 + 71);
  *((_BYTE *)a2 + 7ktrace_session_set_default_event_names_enabled(global_session, 1) = v5;
  uint64_t v6 = *((void *)this + 9);
  *((void *)this + 9) = *((void *)a2 + 9);
  *((void *)a2 + 9) = v6;
  LOBYTE(v6) = *((_BYTE *)this + 80);
  *((_BYTE *)this + 80) = *((_BYTE *)a2 + 80);
  *((_BYTE *)a2 + 80) = v6;
  LOBYTE(v6) = *((_BYTE *)this + 81);
  *((_BYTE *)this + 8ktrace_session_set_default_event_names_enabled(global_session, 1) = *((_BYTE *)a2 + 81);
  *((_BYTE *)a2 + 8ktrace_session_set_default_event_names_enabled(global_session, 1) = v6;
  uint64_t v7 = *((void *)this + 11);
  *((void *)this + 1ktrace_session_set_default_event_names_enabled(global_session, 1) = *((void *)a2 + 11);
  *((void *)a2 + 1ktrace_session_set_default_event_names_enabled(global_session, 1) = v7;
  return result;
}

uint64_t *flatbuffers::vector_downward::swap(uint64_t *this, flatbuffers::vector_downward *a2)
{
  uint64_t v2 = *this;
  *this = *(void *)a2;
  *(void *)a2 = v2;
  LOBYTE(v2) = *((_BYTE *)this + 8);
  *((_BYTE *)this + _Block_object_dispose(va, 8) = *((_BYTE *)a2 + 8);
  *((_BYTE *)a2 + _Block_object_dispose(va, 8) = v2;
  uint64_t v3 = this[2];
  this[2] = *((void *)a2 + 2);
  *((void *)a2 + 2) = v3;
  uint64_t v4 = this[3];
  this[3] = *((void *)a2 + 3);
  *((void *)a2 + 3) = v4;
  uint64_t v5 = this[4];
  uint64_t v6 = this[5];
  uint64_t v7 = *((void *)a2 + 5);
  this[4] = *((void *)a2 + 4);
  this[5] = v7;
  *((void *)a2 + 4) = v5;
  *((void *)a2 + 5) = v6;
  uint64_t v8 = this[6];
  this[6] = *((void *)a2 + 6);
  *((void *)a2 + 6) = v8;
  uint64_t v9 = this[7];
  this[7] = *((void *)a2 + 7);
  *((void *)a2 + 7) = v9;
  return this;
}

__n128 __Block_byref_object_copy__317(__n128 *a1, __n128 *a2)
{
  a1[3].n128_u64[0] = 0LL;
  a1[3].n128_u64[1] = 0LL;
  a1[4].n128_u64[0] = 0LL;
  __n128 result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0LL;
  a2[3].n128_u64[1] = 0LL;
  a2[4].n128_u64[0] = 0LL;
  return result;
}

void __Block_byref_object_dispose__318(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(void *)(a1 + 56) = v2;
    operator delete(v2);
  }

uint64_t __Block_byref_object_copy__320(uint64_t result, uint64_t a2)
{
  *(_DWORD *)(result + 4_Block_object_dispose(va, 8) = *(_DWORD *)(a2 + 48);
  return result;
}

void ___ZL32ktrace_address_space_buildbufferP14ktrace_sessionP21symbolication_contextP20ktrace_address_spaceN17FlatbufferSymbols20AddressSpaceMetadataEN11flatbuffers6OffsetIvEERNS7_17FlatBufferBuilderERNSt3__113unordered_mapI11CFUUIDBytesNS8_INS5_12SymbolicatorEEENSC_4hashISE_EENSC_8equal_toISE_EENSC_9allocatorINSC_4pairIKSE_SG_EEEEEEy_block_invoke( uint64_t a1, uint64_t a2, optional_uint64 *a3)
{
  uint64_t v123 = MEMORY[0x186E45FA0]();
  uuid = (UUIDContext *)find_or_create_uuid(*(symbolication_context **)(a1 + 48), (SymbolOwner *)a2);
  uint64_t v7 = *(void *)(a2 + 48);
  if (*(void *)a3) {
    v7 += optional_uint64::value(a3);
  }
  uint64_t v133 = 0LL;
  v134 = &v133;
  uint64_t v135 = 0x4812000000LL;
  v136 = __Block_byref_object_copy__323;
  v137 = __Block_byref_object_dispose__324;
  v138 = "";
  std::stringbuf::string_type __p = 0LL;
  v140 = 0LL;
  uint64_t v141 = 0LL;
  switch(*(_DWORD *)(a2 + 16))
  {
    case 1:
      if (ktrace_find_base_address(*(symbolication_context **)(a1 + 48), uuid))
      {
        v131[0] = MEMORY[0x1895F87A8];
        v131[1] = 3221225472LL;
        v131[2] = ___ZL32ktrace_address_space_buildbufferP14ktrace_sessionP21symbolication_contextP20ktrace_address_spaceN17FlatbufferSymbols20AddressSpaceMetadataEN11flatbuffers6OffsetIvEERNS7_17FlatBufferBuilderERNSt3__113unordered_mapI11CFUUIDBytesNS8_INS5_12SymbolicatorEEENSC_4hashISE_EENSC_8equal_toISE_EENSC_9allocatorINSC_4pairIKSE_SG_EEEEEEy_block_invoke_326;
        v131[3] = &unk_189F56E98;
        uint64_t v8 = *(symbolication_context **)(a1 + 48);
        uint64_t v9 = *(void *)(a1 + 56);
        v131[6] = uuid;
        v131[7] = a2;
        v131[4] = &v133;
        v131[5] = v9;
      }

      unint64_t v10 = *(void *)(a1 + 56);
      flatbuffers::FlatBufferBuilder::NotNested(v10);
      *(_BYTE *)(v10 + 70) = 1;
      int v11 = *(_DWORD *)(v10 + 32);
      int v12 = *(_DWORD *)(v10 + 48);
      int v13 = *(_DWORD *)(v10 + 40);
      flatbuffers::FlatBufferBuilder::AddOffset<flatbuffers::String>( (flatbuffers::FlatBufferBuilder *)v10,  4LL,  *(_DWORD *)(a1 + 88));
      flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>(v10, 6LL, v7, -1LL);
      if (*(void *)(a2 + 56))
      {
        uint64_t v14 = optional_uint64::value((optional_uint64 *)(a2 + 56));
      }

      else
      {
        ktrace_find_text_size(*(symbolication_context **)(a1 + 48), uuid);
        if ((*((_WORD *)uuid + 80) & 8) == 0) {
          goto LABEL_48;
        }
        uint64_t v14 = *((void *)uuid + 7);
      }

      flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>(v10, 8LL, v14, 0LL);
LABEL_48:
      int v61 = v11 - v12 + v13;
      int v24 = v134;
      int v25 = flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)v10, v61);
      unint64_t v62 = v24[8];
      unint64_t v27 = (char *)v24[7];
      std::string::size_type v28 = (char *)v24[6];
      uint64_t v64 = (v27 - v28) >> 2;
      unint64_t v65 = v62 - (void)v28;
      unint64_t v66 = (uint64_t)(v62 - (void)v28) >> 1;
      if (v66 <= v64 + 1) {
        unint64_t v66 = v64 + 1;
      }
      if (v65 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v67 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v67 = v66;
      }
      if (v67)
      {
        int v68 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<flatbuffers::Offset<KernelTraceCatalog::Thread>>>( (uint64_t)(v24 + 8),  v67);
        std::string::size_type v28 = (char *)v24[6];
        unint64_t v27 = (char *)v24[7];
      }

      else
      {
        int v68 = 0LL;
      }

      uint64_t v69 = &v68[4 * v64];
      char v70 = &v68[4 * v67];
      *(_DWORD *)uint64_t v69 = v25;
      uint64_t v63 = v69 + 4;
      while (v27 != v28)
      {
        int v73 = *((_DWORD *)v27 - 1);
        v27 -= 4;
        *((_DWORD *)v69 - ktrace_session_set_default_event_names_enabled(global_session, 1) = v73;
        v69 -= 4;
      }

      goto LABEL_70;
    case 2:
      size_t v34 = strlen((const char *)(a2 + 24));
      unsigned int String = flatbuffers::FlatBufferBuilder::CreateString( *(flatbuffers::FlatBufferBuilder **)(a1 + 56),  (const char *)(a2 + 24),  v34);
      unint64_t v36 = *(void *)(a1 + 56);
      flatbuffers::FlatBufferBuilder::NotNested(v36);
      *(_BYTE *)(v36 + 70) = 1;
      int v37 = *(_DWORD *)(v36 + 32);
      int v38 = *(_DWORD *)(v36 + 48);
      int v39 = *(_DWORD *)(v36 + 40);
      flatbuffers::FlatBufferBuilder::AddOffset<flatbuffers::String>((flatbuffers::FlatBufferBuilder *)v36, 4LL, String);
      flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>(v36, 6LL, v7, -1LL);
      if (*(void *)(a2 + 56))
      {
        uint64_t v40 = optional_uint64::value((optional_uint64 *)(a2 + 56));
LABEL_23:
        flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>(v36, 8LL, v40, 0LL);
        goto LABEL_36;
      }

      if (!strcmp((const char *)(a2 + 24), "__TEXT"))
      {
        ktrace_find_text_size(*(symbolication_context **)(a1 + 48), uuid);
        if ((*((_WORD *)uuid + 80) & 8) != 0)
        {
          uint64_t v40 = *((void *)uuid + 7);
          goto LABEL_23;
        }
      }

void sub_186BE4964( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, char a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, void *__p, uint64_t a41)
{
  if (__p)
  {
    a41 = (uint64_t)__p;
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__323(__n128 *a1, __n128 *a2)
{
  a1[3].n128_u64[0] = 0LL;
  a1[3].n128_u64[1] = 0LL;
  a1[4].n128_u64[0] = 0LL;
  __n128 result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0LL;
  a2[3].n128_u64[1] = 0LL;
  a2[4].n128_u64[0] = 0LL;
  return result;
}

void __Block_byref_object_dispose__324(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(void *)(a1 + 56) = v2;
    operator delete(v2);
  }

void ___ZL32ktrace_address_space_buildbufferP14ktrace_sessionP21symbolication_contextP20ktrace_address_spaceN17FlatbufferSymbols20AddressSpaceMetadataEN11flatbuffers6OffsetIvEERNS7_17FlatBufferBuilderERNSt3__113unordered_mapI11CFUUIDBytesNS8_INS5_12SymbolicatorEEENSC_4hashISE_EENSC_8equal_toISE_EENSC_9allocatorINSC_4pairIKSE_SG_EEEEEEy_block_invoke_326( uint64_t a1, char *__s1, uint64_t a3, uint64_t a4)
{
  if (strcmp(__s1, "__LINKEDIT") && strcmp(__s1, "__PAGEZERO"))
  {
    size_t v8 = strlen(__s1);
    unsigned int String = flatbuffers::FlatBufferBuilder::CreateString(*(flatbuffers::FlatBufferBuilder **)(a1 + 40), __s1, v8);
    unint64_t v10 = *(void *)(a1 + 40);
    flatbuffers::FlatBufferBuilder::NotNested(v10);
    *(_BYTE *)(v10 + 70) = 1;
    int v11 = *(_DWORD *)(v10 + 32) - *(_DWORD *)(v10 + 48) + *(_DWORD *)(v10 + 40);
    flatbuffers::FlatBufferBuilder::AddOffset<flatbuffers::String>((flatbuffers::FlatBufferBuilder *)v10, 4LL, String);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>( v10,  6LL,  a3 - *(void *)(*(void *)(a1 + 48) + 48LL) + *(void *)(*(void *)(a1 + 56) + 48LL),  -1LL);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>(v10, 8LL, a4, 0LL);
    int v12 = *(void **)(*(void *)(a1 + 32) + 8LL);
    int v13 = flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)v10, v11);
    int v14 = v13;
    uint64_t v15 = (char *)v12[7];
    unint64_t v16 = v12[8];
    if ((unint64_t)v15 >= v16)
    {
      unint64_t v18 = (char *)v12[6];
      uint64_t v19 = (v15 - v18) >> 2;
      unint64_t v20 = v16 - (void)v18;
      unint64_t v21 = (uint64_t)(v16 - (void)v18) >> 1;
      if (v21 <= v19 + 1) {
        unint64_t v21 = v19 + 1;
      }
      if (v20 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v22 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v22 = v21;
      }
      if (v22)
      {
        int v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<flatbuffers::Offset<KernelTraceCatalog::Thread>>>( (uint64_t)(v12 + 8),  v22);
        unint64_t v18 = (char *)v12[6];
        uint64_t v15 = (char *)v12[7];
      }

      else
      {
        int v23 = 0LL;
      }

      int v24 = &v23[4 * v19];
      int v25 = &v23[4 * v22];
      *(_DWORD *)int v24 = v14;
      unsigned int v17 = v24 + 4;
      while (v15 != v18)
      {
        int v26 = *((_DWORD *)v15 - 1);
        v15 -= 4;
        *((_DWORD *)v24 - ktrace_session_set_default_event_names_enabled(global_session, 1) = v26;
        v24 -= 4;
      }

      _OWORD v12[6] = v24;
      v12[7] = v17;
      void v12[8] = v25;
      if (v18) {
        operator delete(v18);
      }
    }

    else
    {
      *(_DWORD *)uint64_t v15 = v13;
      unsigned int v17 = v15 + 4;
    }

    v12[7] = v17;
  }

uint64_t ___ZL32ktrace_address_space_buildbufferP14ktrace_sessionP21symbolication_contextP20ktrace_address_spaceN17FlatbufferSymbols20AddressSpaceMetadataEN11flatbuffers6OffsetIvEERNS7_17FlatBufferBuilderERNSt3__113unordered_mapI11CFUUIDBytesNS8_INS5_12SymbolicatorEEENSC_4hashISE_EENSC_8equal_toISE_EENSC_9allocatorINSC_4pairIKSE_SG_EEEEEEy_block_invoke_2( uint64_t result, const __CFString *a2)
{
  if (!*(_DWORD *)(*(void *)(*(void *)(result + 32) + 8LL) + 48LL))
  {
    uint64_t v2 = result;
    uint64_t v3 = *(flatbuffers::FlatBufferBuilder **)(result + 40);
    uint64_t v4 = utf8(a2);
    size_t v5 = strlen(v4);
    __n128 result = flatbuffers::FlatBufferBuilder::CreateString(v3, v4, v5);
    *(_DWORD *)(*(void *)(*(void *)(v2 + 32) + 8LL) + 48LL) = result;
  }

  return result;
}

void *std::__hash_table<std::__hash_value_type<CFUUIDBytes,flatbuffers::Offset<FlatbufferSymbols::Symbolicator>>,std::__unordered_map_hasher<CFUUIDBytes,std::__hash_value_type<CFUUIDBytes,flatbuffers::Offset<FlatbufferSymbols::Symbolicator>>,std::hash<CFUUIDBytes>,std::equal_to<CFUUIDBytes>,true>,std::__unordered_map_equal<CFUUIDBytes,std::__hash_value_type<CFUUIDBytes,flatbuffers::Offset<FlatbufferSymbols::Symbolicator>>,std::equal_to<CFUUIDBytes>,std::hash<CFUUIDBytes>,true>,std::allocator<std::__hash_value_type<CFUUIDBytes,flatbuffers::Offset<FlatbufferSymbols::Symbolicator>>>>::__emplace_unique_key_args<CFUUIDBytes,std::piecewise_construct_t const&,std::tuple<CFUUIDBytes const&>,std::tuple<>>( uint64_t a1, void *a2, uint64_t a3, _OWORD **a4)
{
  unint64_t v7 = a2[1] ^ *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = a2[1] ^ *a2;
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
    }

    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }

    unint64_t v10 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      int v11 = *v10;
      if (*v10)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v12 == v7)
          {
            if (v11[2] == *a2 && v11[3] == a2[1]) {
              return v11;
            }
          }

          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8) {
                v12 %= v8;
              }
            }

            else
            {
              v12 &= v8 - 1;
            }

            if (v12 != v4) {
              break;
            }
          }

          int v11 = (void *)*v11;
        }

        while (v11);
      }
    }
  }

  int v11 = operator new(0x28uLL);
  *int v11 = 0LL;
  v11[1] = v7;
  *((_OWORD *)v11 + ktrace_session_set_default_event_names_enabled(global_session, 1) = **a4;
  *((_DWORD *)v11 + _Block_object_dispose(va, 8) = 0;
  float v14 = (float)(unint64_t)(*(void *)(a1 + 24) + 1LL);
  float v15 = *(float *)(a1 + 32);
  if (!v8 || (float)(v15 * (float)v8) < v14)
  {
    BOOL v16 = 1LL;
    if (v8 >= 3) {
      BOOL v16 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v17 = v16 | (2 * v8);
    unint64_t v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18) {
      size_t v19 = v18;
    }
    else {
      size_t v19 = v17;
    }
    std::__hash_table<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>>>::__rehash<true>( a1,  v19);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }

    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }

  uint64_t v20 = *(void *)a1;
  unint64_t v21 = *(void **)(*(void *)a1 + 8 * v4);
  if (v21)
  {
    *int v11 = *v21;
LABEL_42:
    *unint64_t v21 = v11;
    goto LABEL_43;
  }

  *int v11 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v11;
  *(void *)(v20 + 8 * v4) = a1 + 16;
  if (*v11)
  {
    unint64_t v22 = *(void *)(*v11 + 8LL);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v22 >= v8) {
        v22 %= v8;
      }
    }

    else
    {
      v22 &= v8 - 1;
    }

    unint64_t v21 = (void *)(*(void *)a1 + 8 * v22);
    goto LABEL_42;
  }

void sub_186BE4E78(_Unwind_Exception *a1)
{
}

void *std::string::basic_string[abi:ne180100]<0>(void *a1, char *__s)
{
  size_t v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8LL) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v5 = v4;
  if (v4 >= 0x17)
  {
    uint64_t v7 = (v4 & 0xFFFFFFFFFFFFFFF8LL) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v7 = v4 | 7;
    }
    uint64_t v8 = v7 + 1;
    uint64_t v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000LL;
    *a1 = v6;
  }

  else
  {
    *((_BYTE *)a1 + 23) = v4;
    uint64_t v6 = a1;
    if (!v4) {
      goto LABEL_9;
    }
  }

  memmove(v6, __s, v5);
LABEL_9:
  *((_BYTE *)v6 + v5) = 0;
  return a1;
}

uint64_t std::__hash_table<std::__hash_value_type<CFUUIDBytes,CF::TypeRef>,std::__unordered_map_hasher<CFUUIDBytes,std::__hash_value_type<CFUUIDBytes,CF::TypeRef>,std::hash<CFUUIDBytes>,std::equal_to<CFUUIDBytes>,true>,std::__unordered_map_equal<CFUUIDBytes,std::__hash_value_type<CFUUIDBytes,CF::TypeRef>,std::equal_to<CFUUIDBytes>,std::hash<CFUUIDBytes>,true>,std::allocator<std::__hash_value_type<CFUUIDBytes,CF::TypeRef>>>::~__hash_table( uint64_t a1)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0LL;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<CFUUIDBytes,CF::TypeRef>,std::__unordered_map_hasher<CFUUIDBytes,std::__hash_value_type<CFUUIDBytes,CF::TypeRef>,std::hash<CFUUIDBytes>,std::equal_to<CFUUIDBytes>,true>,std::__unordered_map_equal<CFUUIDBytes,std::__hash_value_type<CFUUIDBytes,CF::TypeRef>,std::equal_to<CFUUIDBytes>,std::hash<CFUUIDBytes>,true>,std::allocator<std::__hash_value_type<CFUUIDBytes,CF::TypeRef>>>::__deallocate_node( uint64_t a1, const void **a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = (const void **)*v2;
      CF::TypeRef::~TypeRef(v2 + 4);
      operator delete(v2);
      uint64_t v2 = v3;
    }

    while (v3);
  }

void *std::__hash_table<std::__hash_value_type<CFUUIDBytes,CF::TypeRef>,std::__unordered_map_hasher<CFUUIDBytes,std::__hash_value_type<CFUUIDBytes,CF::TypeRef>,std::hash<CFUUIDBytes>,std::equal_to<CFUUIDBytes>,true>,std::__unordered_map_equal<CFUUIDBytes,std::__hash_value_type<CFUUIDBytes,CF::TypeRef>,std::equal_to<CFUUIDBytes>,std::hash<CFUUIDBytes>,true>,std::allocator<std::__hash_value_type<CFUUIDBytes,CF::TypeRef>>>::__emplace_unique_key_args<CFUUIDBytes,std::piecewise_construct_t const&,std::tuple<CFUUIDBytes const&>,std::tuple<>>( uint64_t a1, void *a2, uint64_t a3, _OWORD **a4)
{
  unint64_t v7 = a2[1] ^ *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = a2[1] ^ *a2;
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
    }

    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }

    unint64_t v10 = *(void **)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      int v11 = (void *)*v10;
      if (*v10)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v12 == v7)
          {
            if (v11[2] == *a2 && v11[3] == a2[1]) {
              return v11;
            }
          }

          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8) {
                v12 %= v8;
              }
            }

            else
            {
              v12 &= v8 - 1;
            }

            if (v12 != v4) {
              break;
            }
          }

          int v11 = (void *)*v11;
        }

        while (v11);
      }
    }
  }

  uint64_t v14 = a1 + 16;
  float v15 = operator new(0x28uLL);
  v25[0] = v15;
  v25[1] = a1 + 16;
  void *v15 = 0LL;
  v15[1] = v7;
  *((_OWORD *)v15 + ktrace_session_set_default_event_names_enabled(global_session, 1) = **a4;
  _OWORD v15[4] = 0LL;
  char v26 = 1;
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1LL);
  float v17 = *(float *)(a1 + 32);
  if (!v8 || (float)(v17 * (float)v8) < v16)
  {
    BOOL v18 = 1LL;
    if (v8 >= 3) {
      BOOL v18 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v8);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    std::__hash_table<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>>>::__rehash<true>( a1,  v21);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }

    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }

  unint64_t v22 = *(void **)(*(void *)a1 + 8 * v4);
  if (v22)
  {
    *(void *)v25[0] = *v22;
    *unint64_t v22 = v25[0];
  }

  else
  {
    *(void *)v25[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v25[0];
    *(void *)(*(void *)a1 + 8 * v4) = v14;
    if (*(void *)v25[0])
    {
      unint64_t v23 = *(void *)(*(void *)v25[0] + 8LL);
      if ((v8 & (v8 - 1)) != 0)
      {
        if (v23 >= v8) {
          v23 %= v8;
        }
      }

      else
      {
        v23 &= v8 - 1;
      }

      *(void *)(*(void *)a1 + 8 * v23) = v25[0];
    }
  }

  int v11 = (void *)v25[0];
  v25[0] = 0LL;
  ++*(void *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<CFUUIDBytes,CF::TypeRef>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<CFUUIDBytes,CF::TypeRef>,void *>>>>::reset[abi:ne180100]( (uint64_t)v25,  0LL);
  return v11;
}

void sub_186BE5200(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<CFUUIDBytes,CF::TypeRef>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<CFUUIDBytes,CF::TypeRef>,void *>>>>::reset[abi:ne180100]( uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(const void ***)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16)) {
      CF::TypeRef::~TypeRef(v2 + 4);
    }
    operator delete(v2);
  }

CFTypeRef std::vector<SymbolOwner>::__construct_one_at_end[abi:ne180100]<SymbolOwner const&>( uint64_t a1, _OWORD *a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  *(_DWORD *)(v3 + 16) = 0;
  *(void *)(v3 + 56) = 0LL;
  __int128 v5 = a2[2];
  __int128 v4 = a2[3];
  __int128 v6 = a2[5];
  *(_OWORD *)(v3 + std::__hash_table<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>>>::~__hash_table((uint64_t)this + 64) = a2[4];
  *(_OWORD *)(v3 + 80) = v6;
  *(_OWORD *)(v3 + 32) = v5;
  *(_OWORD *)(v3 + 4_Block_object_dispose(va, 8) = v4;
  __int128 v7 = a2[1];
  *(_OWORD *)uint64_t v3 = *a2;
  *(_OWORD *)(v3 + 16) = v7;
  CFTypeRef result = *(CFTypeRef *)(v3 + 80);
  if (result) {
    CFTypeRef result = CFRetain(result);
  }
  *(void *)(a1 + _Block_object_dispose(va, 8) = v3 + 96;
  return result;
}

void sub_186BE52B0(_Unwind_Exception *a1)
{
  *(void *)(v1 + _Block_object_dispose(va, 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<SymbolOwner>::__push_back_slow_path<SymbolOwner const&>(uint64_t *a1, _OWORD *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 5);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x2AAAAAAAAAAAAAALL) {
    std::vector<flatbuffers::Offset<KernelTraceCatalog::Thread>>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 5);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x155555555555555LL) {
    unint64_t v9 = 0x2AAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  unint64_t v23 = a1 + 2;
  unint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<SymbolOwner>>(v7, v9);
  int v11 = &v10[96 * v4];
  v20[0] = v10;
  v20[1] = v11;
  size_t v21 = v11;
  unint64_t v22 = &v10[96 * v12];
  *((_DWORD *)v11 + 4) = 0;
  *((void *)v11 + 7) = 0LL;
  __int128 v14 = a2[2];
  __int128 v13 = a2[3];
  __int128 v15 = a2[4];
  *((_OWORD *)v11 + 5) = a2[5];
  __int128 v16 = a2[1];
  *(_OWORD *)int v11 = *a2;
  *((_OWORD *)v11 + ktrace_session_set_default_event_names_enabled(global_session, 1) = v16;
  *((_OWORD *)v11 + 3) = v13;
  *((_OWORD *)v11 + 4) = v15;
  *((_OWORD *)v11 + 2) = v14;
  float v17 = (const void *)*((void *)v11 + 10);
  if (v17)
  {
    CFRetain(v17);
    int v11 = v21;
  }

  size_t v21 = v11 + 96;
  std::vector<SymbolOwner>::__swap_out_circular_buffer(a1, v20);
  uint64_t v18 = a1[1];
  std::__split_buffer<SymbolOwner>::~__split_buffer((uint64_t)v20);
  return v18;
}

void sub_186BE53C0(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t std::vector<SymbolOwner>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<SymbolOwner>,std::reverse_iterator<SymbolOwner*>,std::reverse_iterator<SymbolOwner*>,std::reverse_iterator<SymbolOwner*>>( (uint64_t)(a1 + 2),  a1[1],  a1[1],  *a1,  *a1,  a2[1],  a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<SymbolOwner>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x2AAAAAAAAAAAAABLL) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(96 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<SymbolOwner>,std::reverse_iterator<SymbolOwner*>,std::reverse_iterator<SymbolOwner*>,std::reverse_iterator<SymbolOwner*>>( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (a3 != a5)
  {
    uint64_t v11 = 0LL;
    do
    {
      uint64_t v12 = a7 + v11;
      *(_DWORD *)(v12 - 80) = 0;
      *(void *)(v12 - 40) = 0LL;
      __int128 v13 = *(_OWORD *)(a3 + v11 - 64);
      __int128 v14 = *(_OWORD *)(a3 + v11 - 48);
      __int128 v15 = *(_OWORD *)(a3 + v11 - 32);
      *(_OWORD *)(v12 - 16) = *(_OWORD *)(a3 + v11 - 16);
      __int128 v16 = *(_OWORD *)(a3 + v11 - 80);
      *(_OWORD *)(v12 - 96) = *(_OWORD *)(a3 + v11 - 96);
      *(_OWORD *)(v12 - 80) = v16;
      *(_OWORD *)(v12 - 4_Block_object_dispose(va, 8) = v14;
      *(_OWORD *)(v12 - 32) = v15;
      *(_OWORD *)(v12 - std::__hash_table<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>>>::~__hash_table((uint64_t)this + 64) = v13;
      float v17 = *(const void **)(a7 + v11 - 16);
      if (v17) {
        CFRetain(v17);
      }
      v11 -= 96LL;
    }

    while (a3 + v11 != a5);
  }

  return a6;
}

void sub_186BE5524(_Unwind_Exception *exception_object)
{
  for (; v2; v2 += 96LL)
    SymbolOwner::~SymbolOwner((SymbolOwner *)(v1 + v2));
  _Unwind_Resume(exception_object);
}

uint64_t std::__split_buffer<SymbolOwner>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 96;
    SymbolOwner::~SymbolOwner((SymbolOwner *)(i - 96));
  }

  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(SymbolOwner const&,SymbolOwner const&),SymbolOwner*,false>( __int128 *a1, __int128 *a2, uint64_t (**a3)(__int128 *, __int128 *), uint64_t a4, char a5, __n128 a6)
{
LABEL_1:
  unint64_t v10 = a2 - 6;
  uint64_t v11 = a1;
LABEL_2:
  uint64_t v12 = 1 - a4;
  while (2)
  {
    a1 = v11;
    uint64_t v13 = v12;
    uint64_t v14 = (char *)a2 - (char *)v11;
    unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * (((char *)a2 - (char *)v11) >> 5);
    switch(v15)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        if ((*a3)(a2 - 6, v11))
        {
          __int128 v37 = v11[1];
          __int128 v49 = *v11;
          __int128 v50 = v37;
          __int128 v38 = v11[2];
          __int128 v39 = v11[3];
          __int128 v40 = v11[5];
          __int128 v53 = v11[4];
          __int128 v54 = v40;
          __int128 v51 = v38;
          __int128 v52 = v39;
          void v11[2] = 0u;
          void v11[3] = 0u;
          v11[4] = 0u;
          void v11[5] = 0u;
          *uint64_t v11 = 0u;
          v11[1] = 0u;
          __int128 v41 = *(a2 - 5);
          *uint64_t v11 = *v10;
          v11[1] = v41;
          __int128 v42 = *(a2 - 4);
          __int128 v43 = *(a2 - 3);
          __int128 v44 = *(a2 - 1);
          v11[4] = *(a2 - 2);
          void v11[5] = v44;
          void v11[2] = v42;
          void v11[3] = v43;
          __int128 v45 = v54;
          __int128 v47 = v51;
          __int128 v46 = v52;
          *(a2 - 2) = v53;
          *(a2 - ktrace_session_set_default_event_names_enabled(global_session, 1) = v45;
          *(a2 - 4) = v47;
          *(a2 - 3) = v46;
          __int128 v48 = v50;
          *unint64_t v10 = v49;
          *(a2 - 5) = v48;
          __int128 v51 = 0u;
          __int128 v52 = 0u;
          __int128 v53 = 0u;
          __int128 v54 = 0u;
          __int128 v49 = 0u;
          __int128 v50 = 0u;
          SymbolOwner::~SymbolOwner((SymbolOwner *)&v49);
        }

        return;
      case 3uLL:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(SymbolOwner const&,SymbolOwner const&),SymbolOwner*>( v11,  v11 + 6,  a2 - 6,  a3);
        return;
      case 4uLL:
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(SymbolOwner const&,SymbolOwner const&),SymbolOwner*>( v11,  v11 + 6,  v11 + 12,  a2 - 6,  a3);
        return;
      case 5uLL:
        std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(SymbolOwner const&,SymbolOwner const&),SymbolOwner*>( v11,  v11 + 6,  v11 + 12,  v11 + 18,  a2 - 6,  a3);
        return;
      default:
        if (v14 <= 2303)
        {
          if ((a5 & 1) != 0) {
            std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(SymbolOwner const&,SymbolOwner const&),SymbolOwner*>( v11,  a2,  (uint64_t (**)(__int128 *, uint64_t))a3);
          }
          else {
            std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(SymbolOwner const&,SymbolOwner const&),SymbolOwner*>( v11,  a2,  a3);
          }
          return;
        }

        if (v13 != 1)
        {
          unint64_t v16 = v15 >> 1;
          float v17 = &v11[6 * (v15 >> 1)];
          if ((unint64_t)v14 <= 0x3000)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(SymbolOwner const&,SymbolOwner const&),SymbolOwner*>( &v11[6 * v16],  v11,  a2 - 6,  a3);
            if ((a5 & 1) != 0) {
              goto LABEL_11;
            }
          }

          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(SymbolOwner const&,SymbolOwner const&),SymbolOwner*>( v11,  &v11[6 * v16],  a2 - 6,  a3);
            uint64_t v18 = 3 * v16;
            unint64_t v19 = &v11[6 * v16 - 6];
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(SymbolOwner const&,SymbolOwner const&),SymbolOwner*>( v11 + 6,  v19,  a2 - 12,  a3);
            unint64_t v20 = v11 + 12;
            size_t v21 = &v11[2 * v18 + 6];
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(SymbolOwner const&,SymbolOwner const&),SymbolOwner*>( v20,  v21,  a2 - 18,  a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(SymbolOwner const&,SymbolOwner const&),SymbolOwner*>( v19,  v17,  v21,  a3);
            __int128 v22 = a1[1];
            __int128 v49 = *a1;
            __int128 v50 = v22;
            __int128 v23 = a1[2];
            __int128 v24 = a1[3];
            __int128 v25 = a1[5];
            __int128 v53 = a1[4];
            __int128 v54 = v25;
            __int128 v51 = v23;
            __int128 v52 = v24;
            a1[2] = 0u;
            a1[3] = 0u;
            a1[4] = 0u;
            a1[5] = 0u;
            *a1 = 0u;
            a1[1] = 0u;
            __int128 v26 = v17[1];
            *a1 = *v17;
            a1[1] = v26;
            __int128 v27 = v17[2];
            __int128 v28 = v17[3];
            __int128 v29 = v17[5];
            a1[4] = v17[4];
            a1[5] = v29;
            a1[2] = v27;
            a1[3] = v28;
            __int128 v30 = v54;
            __int128 v32 = v51;
            __int128 v31 = v52;
            _OWORD v17[4] = v53;
            void v17[5] = v30;
            unint64_t v17[2] = v32;
            v17[3] = v31;
            __int128 v33 = v50;
            *float v17 = v49;
            v17[1] = v33;
            __int128 v51 = 0u;
            __int128 v52 = 0u;
            __int128 v53 = 0u;
            __int128 v54 = 0u;
            __int128 v49 = 0u;
            __int128 v50 = 0u;
            SymbolOwner::~SymbolOwner((SymbolOwner *)&v49);
            if ((a5 & 1) != 0) {
              goto LABEL_11;
            }
          }

          if (((*a3)(a1 - 6, a1) & 1) == 0)
          {
            uint64_t v11 = std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,SymbolOwner *,BOOL (*&)(SymbolOwner const&,SymbolOwner const&)>( a1,  a2,  a3);
            goto LABEL_16;
          }

void std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(SymbolOwner const&,SymbolOwner const&),SymbolOwner*>( _OWORD *a1, _OWORD *a2, uint64_t (**a3)(__int128 *, uint64_t))
{
  if (a1 != a2)
  {
    uint64_t v5 = a1 + 6;
    if (a1 + 6 != a2)
    {
      uint64_t v7 = 0LL;
      uint64_t v8 = a1;
      do
      {
        unint64_t v9 = v8;
        uint64_t v8 = v5;
        if ((*a3)(v5, (uint64_t)v9))
        {
          __int128 v10 = v8[3];
          __int128 v27 = v8[2];
          __int128 v28 = v10;
          __int128 v11 = v8[5];
          __int128 v29 = v8[4];
          __int128 v30 = v11;
          __int128 v12 = v8[1];
          __int128 v25 = *v8;
          __int128 v26 = v12;
          *uint64_t v8 = 0u;
          v8[1] = 0u;
          int v8[2] = 0u;
          v8[3] = 0u;
          uint64_t v13 = v7;
          _DWORD v8[4] = 0u;
          void v8[5] = 0u;
          while (1)
          {
            uint64_t v14 = (_OWORD *)((char *)a1 + v13);
            unint64_t v15 = *(const void **)((char *)a1 + v13 + 176);
            if (v15) {
              CFRelease(v15);
            }
            __int128 v16 = v14[3];
            v14[8] = v14[2];
            v14[9] = v16;
            __int128 v17 = v14[5];
            __int128 v14[10] = v14[4];
            v14[11] = v17;
            __int128 v18 = v14[1];
            void v14[6] = *v14;
            void v14[7] = v18;
            _OWORD *v14 = 0u;
            v14[1] = 0u;
            int v14[2] = 0u;
            v14[3] = 0u;
            v14[4] = 0u;
            _OWORD v14[5] = 0u;
            if (!v13) {
              break;
            }
            char v19 = (*a3)(&v25, (uint64_t)a1 + v13 - 96);
            v13 -= 96LL;
            if ((v19 & 1) == 0)
            {
              uint64_t v20 = (uint64_t)a1 + v13 + 96;
              goto LABEL_12;
            }
          }

          uint64_t v20 = (uint64_t)a1;
LABEL_12:
          size_t v21 = *(const void **)(v20 + 80);
          if (v21) {
            CFRelease(v21);
          }
          __int128 v22 = v28;
          *(_OWORD *)(v20 + 32) = v27;
          *(_OWORD *)(v20 + 4_Block_object_dispose(va, 8) = v22;
          __int128 v23 = v30;
          *(_OWORD *)(v20 + std::__hash_table<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>>>::~__hash_table((uint64_t)this + 64) = v29;
          *(_OWORD *)(v20 + 80) = v23;
          __int128 v24 = v26;
          *(_OWORD *)uint64_t v20 = v25;
          *(_OWORD *)(v20 + 16) = v24;
          __int128 v25 = 0u;
          __int128 v26 = 0u;
          __int128 v27 = 0u;
          __int128 v28 = 0u;
          __int128 v29 = 0u;
          __int128 v30 = 0u;
          SymbolOwner::~SymbolOwner((SymbolOwner *)&v25);
        }

        uint64_t v5 = v8 + 6;
        v7 += 96LL;
      }

      while (v8 + 6 != a2);
    }
  }

void sub_186BE5A74( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(SymbolOwner const&,SymbolOwner const&),SymbolOwner*>( _OWORD *a1, _OWORD *a2, uint64_t (**a3)(__int128 *, _OWORD *))
{
  if (a1 != a2)
  {
    unint64_t v4 = a1;
    uint64_t v5 = a1 + 6;
    if (a1 + 6 != a2)
    {
      uint64_t v7 = a1 - 6;
      do
      {
        uint64_t v8 = v4;
        unint64_t v4 = v5;
        if ((*a3)(v5, v8))
        {
          __int128 v9 = v4[3];
          __int128 v24 = v4[2];
          __int128 v25 = v9;
          __int128 v10 = v4[5];
          __int128 v26 = v4[4];
          __int128 v27 = v10;
          __int128 v11 = v4[1];
          __int128 v22 = *v4;
          __int128 v23 = v11;
          _OWORD *v4 = 0u;
          v4[1] = 0u;
          int v4[2] = 0u;
          void v4[3] = 0u;
          __int128 v12 = v7;
          v4[4] = 0u;
          void v4[5] = 0u;
          do
          {
            uint64_t v13 = (const void *)*((void *)v12 + 34);
            if (v13) {
              CFRelease(v13);
            }
            __int128 v14 = v12[9];
            v12[14] = v12[8];
            v12[15] = v14;
            __int128 v15 = v12[11];
            v12[16] = v12[10];
            v12[17] = v15;
            __int128 v16 = v12[7];
            v12[12] = v12[6];
            v12[13] = v16;
            _OWORD v12[6] = 0u;
            v12[7] = 0u;
            void v12[8] = 0u;
            void v12[9] = 0u;
            v12[10] = 0u;
            v12[11] = 0u;
            char v17 = (*a3)(&v22, v12);
            v12 -= 6;
          }

          while ((v17 & 1) != 0);
          __int128 v18 = (const void *)*((void *)v12 + 34);
          if (v18) {
            CFRelease(v18);
          }
          __int128 v19 = v25;
          v12[14] = v24;
          v12[15] = v19;
          __int128 v20 = v27;
          v12[16] = v26;
          v12[17] = v20;
          __int128 v21 = v23;
          v12[12] = v22;
          v12[13] = v21;
          __int128 v22 = 0u;
          __int128 v23 = 0u;
          __int128 v24 = 0u;
          __int128 v25 = 0u;
          __int128 v26 = 0u;
          __int128 v27 = 0u;
          SymbolOwner::~SymbolOwner((SymbolOwner *)&v22);
        }

        uint64_t v5 = v4 + 6;
        v7 += 6;
      }

      while (v4 + 6 != a2);
    }
  }

void sub_186BE5BC8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(SymbolOwner const&,SymbolOwner const&),SymbolOwner*>( __int128 *a1, __int128 *a2, __int128 *a3, uint64_t (**a4)(__int128 *, __int128 *))
{
  char v8 = (*a4)(a2, a1);
  uint64_t result = (*a4)(a3, a2);
  if ((v8 & 1) == 0)
  {
    if (!(_DWORD)result) {
      return result;
    }
    __int128 v20 = a2[3];
    __int128 v63 = a2[2];
    __int128 v64 = v20;
    __int128 v21 = a2[5];
    __int128 v65 = a2[4];
    __int128 v66 = v21;
    __int128 v22 = a2[1];
    __int128 v61 = *a2;
    __int128 v62 = v22;
    *a2 = 0u;
    a2[1] = 0u;
    a2[2] = 0u;
    a2[3] = 0u;
    a2[4] = 0u;
    a2[5] = 0u;
    __int128 v23 = a3[2];
    __int128 v24 = a3[3];
    __int128 v25 = a3[5];
    a2[4] = a3[4];
    a2[5] = v25;
    a2[2] = v23;
    a2[3] = v24;
    __int128 v26 = a3[1];
    *a2 = *a3;
    a2[1] = v26;
    __int128 v27 = v64;
    a3[2] = v63;
    a3[3] = v27;
    __int128 v28 = v66;
    a3[4] = v65;
    a3[5] = v28;
    __int128 v29 = v62;
    *a3 = v61;
    a3[1] = v29;
    __int128 v65 = 0u;
    __int128 v66 = 0u;
    __int128 v63 = 0u;
    __int128 v64 = 0u;
    __int128 v61 = 0u;
    __int128 v62 = 0u;
    SymbolOwner::~SymbolOwner((SymbolOwner *)&v61);
    __int128 v30 = a1[3];
    __int128 v63 = a1[2];
    __int128 v64 = v30;
    __int128 v31 = a1[5];
    __int128 v65 = a1[4];
    __int128 v66 = v31;
    __int128 v32 = a1[1];
    __int128 v61 = *a1;
    __int128 v62 = v32;
    __int128 v33 = 0uLL;
    *a1 = 0u;
    a1[1] = 0u;
    a1[2] = 0u;
    a1[3] = 0u;
    a1[4] = 0u;
    a1[5] = 0u;
    __int128 v34 = a2[2];
    __int128 v35 = a2[3];
    __int128 v36 = a2[5];
    a1[4] = a2[4];
    a1[5] = v36;
    a1[2] = v34;
    a1[3] = v35;
    __int128 v37 = a2[1];
    *a1 = *a2;
    a1[1] = v37;
    __int128 v38 = v64;
    a2[2] = v63;
    a2[3] = v38;
    __int128 v39 = v66;
    a2[4] = v65;
    a2[5] = v39;
    __int128 v40 = v62;
    *a2 = v61;
    a2[1] = v40;
    goto LABEL_9;
  }

  if (!(_DWORD)result)
  {
    __int128 v41 = a1[3];
    __int128 v63 = a1[2];
    __int128 v64 = v41;
    __int128 v42 = a1[5];
    __int128 v65 = a1[4];
    __int128 v66 = v42;
    __int128 v43 = a1[1];
    __int128 v61 = *a1;
    __int128 v62 = v43;
    *a1 = 0u;
    a1[1] = 0u;
    a1[2] = 0u;
    a1[3] = 0u;
    a1[4] = 0u;
    a1[5] = 0u;
    __int128 v44 = a2[2];
    __int128 v45 = a2[3];
    __int128 v46 = a2[5];
    a1[4] = a2[4];
    a1[5] = v46;
    a1[2] = v44;
    a1[3] = v45;
    __int128 v47 = a2[1];
    *a1 = *a2;
    a1[1] = v47;
    __int128 v48 = v64;
    a2[2] = v63;
    a2[3] = v48;
    __int128 v49 = v66;
    a2[4] = v65;
    a2[5] = v49;
    __int128 v50 = v62;
    *a2 = v61;
    a2[1] = v50;
    __int128 v65 = 0u;
    __int128 v66 = 0u;
    __int128 v63 = 0u;
    __int128 v64 = 0u;
    __int128 v61 = 0u;
    __int128 v62 = 0u;
    SymbolOwner::~SymbolOwner((SymbolOwner *)&v61);
    __int128 v51 = a2[3];
    __int128 v63 = a2[2];
    __int128 v64 = v51;
    __int128 v52 = a2[5];
    __int128 v65 = a2[4];
    __int128 v66 = v52;
    __int128 v53 = a2[1];
    __int128 v61 = *a2;
    __int128 v62 = v53;
    __int128 v33 = 0uLL;
    *a2 = 0u;
    a2[1] = 0u;
    a2[2] = 0u;
    a2[3] = 0u;
    a2[4] = 0u;
    a2[5] = 0u;
    __int128 v54 = a3[2];
    __int128 v55 = a3[3];
    __int128 v56 = a3[5];
    a2[4] = a3[4];
    a2[5] = v56;
    a2[2] = v54;
    a2[3] = v55;
    __int128 v57 = a3[1];
    *a2 = *a3;
    a2[1] = v57;
    __int128 v58 = v64;
    a3[2] = v63;
    a3[3] = v58;
    __int128 v59 = v66;
    a3[4] = v65;
    a3[5] = v59;
    __int128 v60 = v62;
    *a3 = v61;
    a3[1] = v60;
LABEL_9:
    __int128 v65 = v33;
    __int128 v66 = v33;
    __int128 v63 = v33;
    __int128 v64 = v33;
    __int128 v61 = v33;
    __int128 v62 = v33;
    SymbolOwner::~SymbolOwner((SymbolOwner *)&v61);
    return 2LL;
  }

  __int128 v10 = a1[3];
  __int128 v63 = a1[2];
  __int128 v64 = v10;
  __int128 v11 = a1[5];
  __int128 v65 = a1[4];
  __int128 v66 = v11;
  __int128 v12 = a1[1];
  __int128 v61 = *a1;
  __int128 v62 = v12;
  *a1 = 0u;
  a1[1] = 0u;
  a1[2] = 0u;
  a1[3] = 0u;
  a1[4] = 0u;
  a1[5] = 0u;
  __int128 v13 = a3[2];
  __int128 v14 = a3[3];
  __int128 v15 = a3[5];
  a1[4] = a3[4];
  a1[5] = v15;
  a1[2] = v13;
  a1[3] = v14;
  __int128 v16 = a3[1];
  *a1 = *a3;
  a1[1] = v16;
  __int128 v17 = v64;
  a3[2] = v63;
  a3[3] = v17;
  __int128 v18 = v66;
  a3[4] = v65;
  a3[5] = v18;
  __int128 v19 = v62;
  *a3 = v61;
  a3[1] = v19;
  __int128 v65 = 0u;
  __int128 v66 = 0u;
  __int128 v63 = 0u;
  __int128 v64 = 0u;
  __int128 v61 = 0u;
  __int128 v62 = 0u;
  SymbolOwner::~SymbolOwner((SymbolOwner *)&v61);
  return 1LL;
}

_OWORD *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,SymbolOwner *,BOOL (*&)(SymbolOwner const&,SymbolOwner const&)>( _OWORD *a1, _OWORD *a2, uint64_t (**a3)(__int128 *, _OWORD *))
{
  unint64_t v4 = a2;
  __int128 v6 = a1[3];
  __int128 v38 = a1[2];
  __int128 v39 = v6;
  __int128 v7 = a1[5];
  __int128 v40 = a1[4];
  __int128 v41 = v7;
  __int128 v8 = a1[1];
  __int128 v36 = *a1;
  __int128 v37 = v8;
  *a1 = 0u;
  a1[1] = 0u;
  a1[2] = 0u;
  a1[3] = 0u;
  a1[4] = 0u;
  a1[5] = 0u;
  if (((*a3)(&v36, a2 - 6) & 1) != 0)
  {
    __int128 v9 = a1;
    do
      v9 += 6;
    while (((*a3)(&v36, v9) & 1) == 0);
  }

  else
  {
    __int128 v10 = a1 + 6;
    do
    {
      __int128 v9 = v10;
      if (v10 >= v4) {
        break;
      }
      int v11 = (*a3)(&v36, v10);
      __int128 v10 = v9 + 6;
    }

    while (!v11);
  }

  if (v9 < v4)
  {
    do
      v4 -= 6;
    while (((*a3)(&v36, v4) & 1) != 0);
  }

  while (v9 < v4)
  {
    __int128 v12 = v9[1];
    __int128 v42 = *v9;
    __int128 v43 = v12;
    __int128 v13 = v9[2];
    __int128 v14 = v9[3];
    __int128 v15 = v9[5];
    __int128 v46 = v9[4];
    __int128 v47 = v15;
    __int128 v44 = v13;
    __int128 v45 = v14;
    v9[2] = 0u;
    v9[3] = 0u;
    v9[4] = 0u;
    void v9[5] = 0u;
    *__int128 v9 = 0u;
    v9[1] = 0u;
    __int128 v16 = v4[1];
    *__int128 v9 = *v4;
    v9[1] = v16;
    __int128 v17 = v4[2];
    __int128 v18 = v4[3];
    __int128 v19 = v4[5];
    v9[4] = v4[4];
    void v9[5] = v19;
    v9[2] = v17;
    v9[3] = v18;
    __int128 v20 = v47;
    __int128 v22 = v44;
    __int128 v21 = v45;
    v4[4] = v46;
    void v4[5] = v20;
    int v4[2] = v22;
    void v4[3] = v21;
    __int128 v23 = v43;
    _OWORD *v4 = v42;
    v4[1] = v23;
    __int128 v44 = 0u;
    __int128 v45 = 0u;
    __int128 v46 = 0u;
    __int128 v47 = 0u;
    __int128 v42 = 0u;
    __int128 v43 = 0u;
    SymbolOwner::~SymbolOwner((SymbolOwner *)&v42);
    do
      v9 += 6;
    while (!(*a3)(&v36, v9));
    do
      v4 -= 6;
    while (((*a3)(&v36, v4) & 1) != 0);
  }

  __int128 v24 = v9 - 6;
  if (v9 - 6 == a1)
  {
    __int128 v30 = (const void *)*((void *)v9 - 2);
    if (v30) {
      CFRelease(v30);
    }
  }

  else
  {
    __int128 v25 = (const void *)*((void *)a1 + 10);
    if (v25) {
      CFRelease(v25);
    }
    __int128 v26 = *(v9 - 5);
    *a1 = *v24;
    a1[1] = v26;
    __int128 v27 = *(v9 - 4);
    __int128 v28 = *(v9 - 3);
    __int128 v29 = *(v9 - 1);
    a1[4] = *(v9 - 2);
    a1[5] = v29;
    a1[2] = v27;
    a1[3] = v28;
    *(v9 - 4) = 0u;
    *(v9 - 3) = 0u;
    *(v9 - 2) = 0u;
    *(v9 - ktrace_session_set_default_event_names_enabled(global_session, 1) = 0u;
    *__int128 v24 = 0u;
    *(v9 - 5) = 0u;
  }

  __int128 v31 = v37;
  *__int128 v24 = v36;
  *(v9 - 5) = v31;
  __int128 v32 = v38;
  __int128 v33 = v39;
  __int128 v34 = v41;
  *(v9 - 2) = v40;
  *(v9 - ktrace_session_set_default_event_names_enabled(global_session, 1) = v34;
  *(v9 - 4) = v32;
  *(v9 - 3) = v33;
  __int128 v38 = 0u;
  __int128 v39 = 0u;
  __int128 v40 = 0u;
  __int128 v41 = 0u;
  __int128 v36 = 0u;
  __int128 v37 = 0u;
  SymbolOwner::~SymbolOwner((SymbolOwner *)&v36);
  return v9;
}

void sub_186BE6098( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

_OWORD *std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,SymbolOwner *,BOOL (*&)(SymbolOwner const&,SymbolOwner const&)>( _OWORD *a1, _OWORD *a2, uint64_t (**a3)(_OWORD *, __int128 *))
{
  uint64_t v6 = 0LL;
  __int128 v7 = a1[3];
  __int128 v39 = a1[2];
  __int128 v40 = v7;
  __int128 v8 = a1[5];
  __int128 v41 = a1[4];
  __int128 v42 = v8;
  __int128 v9 = a1[1];
  __int128 v37 = *a1;
  __int128 v38 = v9;
  *a1 = 0u;
  a1[1] = 0u;
  a1[2] = 0u;
  a1[3] = 0u;
  a1[4] = 0u;
  a1[5] = 0u;
  do
  {
    char v10 = (*a3)(&a1[v6 + 6], &v37);
    v6 += 6LL;
  }

  while ((v10 & 1) != 0);
  int v11 = &a1[v6];
  if (v6 == 6)
  {
    do
    {
      if (v11 >= a2) {
        break;
      }
      a2 -= 6;
    }

    while (((*a3)(a2, &v37) & 1) == 0);
  }

  else
  {
    do
      a2 -= 6;
    while (!(*a3)(a2, &v37));
  }

  __int128 v12 = &a1[v6];
  if (v11 < a2)
  {
    __int128 v13 = a2;
    do
    {
      __int128 v14 = v12[3];
      __int128 v45 = v12[2];
      __int128 v46 = v14;
      __int128 v15 = v12[5];
      __int128 v47 = v12[4];
      __int128 v48 = v15;
      __int128 v16 = v12[1];
      __int128 v43 = *v12;
      __int128 v44 = v16;
      *__int128 v12 = 0u;
      v12[1] = 0u;
      void v12[2] = 0u;
      void v12[3] = 0u;
      v12[4] = 0u;
      void v12[5] = 0u;
      __int128 v17 = v13[1];
      *__int128 v12 = *v13;
      v12[1] = v17;
      __int128 v18 = v13[2];
      __int128 v19 = v13[3];
      __int128 v20 = v13[5];
      v12[4] = v13[4];
      void v12[5] = v20;
      void v12[2] = v18;
      void v12[3] = v19;
      __int128 v21 = v44;
      *__int128 v13 = v43;
      v13[1] = v21;
      __int128 v22 = v45;
      __int128 v23 = v46;
      __int128 v24 = v48;
      v13[4] = v47;
      _OWORD v13[5] = v24;
      v13[2] = v22;
      void v13[3] = v23;
      __int128 v45 = 0u;
      __int128 v46 = 0u;
      __int128 v47 = 0u;
      __int128 v48 = 0u;
      __int128 v43 = 0u;
      __int128 v44 = 0u;
      SymbolOwner::~SymbolOwner((SymbolOwner *)&v43);
      do
        v12 += 6;
      while (((*a3)(v12, &v37) & 1) != 0);
      do
        v13 -= 6;
      while (!(*a3)(v13, &v37));
    }

    while (v12 < v13);
  }

  __int128 v25 = v12 - 6;
  if (v12 - 6 == a1)
  {
    __int128 v31 = (const void *)*((void *)v12 - 2);
    if (v31) {
      CFRelease(v31);
    }
  }

  else
  {
    __int128 v26 = (const void *)*((void *)a1 + 10);
    if (v26) {
      CFRelease(v26);
    }
    __int128 v27 = *(v12 - 5);
    *a1 = *v25;
    a1[1] = v27;
    __int128 v28 = *(v12 - 4);
    __int128 v29 = *(v12 - 3);
    __int128 v30 = *(v12 - 1);
    a1[4] = *(v12 - 2);
    a1[5] = v30;
    a1[2] = v28;
    a1[3] = v29;
    *(v12 - 4) = 0u;
    *(v12 - 3) = 0u;
    *(v12 - 2) = 0u;
    *(v12 - ktrace_session_set_default_event_names_enabled(global_session, 1) = 0u;
    *__int128 v25 = 0u;
    *(v12 - 5) = 0u;
  }

  __int128 v32 = v38;
  *__int128 v25 = v37;
  *(v12 - 5) = v32;
  __int128 v33 = v39;
  __int128 v34 = v40;
  __int128 v35 = v42;
  *(v12 - 2) = v41;
  *(v12 - ktrace_session_set_default_event_names_enabled(global_session, 1) = v35;
  *(v12 - 4) = v33;
  *(v12 - 3) = v34;
  __int128 v39 = 0u;
  __int128 v40 = 0u;
  __int128 v41 = 0u;
  __int128 v42 = 0u;
  __int128 v37 = 0u;
  __int128 v38 = 0u;
  SymbolOwner::~SymbolOwner((SymbolOwner *)&v37);
  return v12 - 6;
}

void sub_186BE62DC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(SymbolOwner const&,SymbolOwner const&),SymbolOwner*>( __int128 *a1, __int128 *a2, uint64_t (**a3)(__int128 *, __int128 *))
{
  BOOL v6 = 1LL;
  switch(0xAAAAAAAAAAAAAAABLL * (((char *)a2 - (char *)a1) >> 5))
  {
    case 0uLL:
    case 1uLL:
      return v6;
    case 2uLL:
      __int128 v7 = a2 - 6;
      if ((*a3)(a2 - 6, a1))
      {
        __int128 v8 = a1[3];
        __int128 v40 = a1[2];
        __int128 v41 = v8;
        __int128 v9 = a1[5];
        __int128 v42 = a1[4];
        __int128 v43 = v9;
        __int128 v10 = a1[1];
        __int128 v38 = *a1;
        __int128 v39 = v10;
        *a1 = 0u;
        a1[1] = 0u;
        a1[2] = 0u;
        a1[3] = 0u;
        a1[4] = 0u;
        a1[5] = 0u;
        __int128 v11 = *(a2 - 4);
        __int128 v12 = *(a2 - 3);
        __int128 v13 = *(a2 - 1);
        a1[4] = *(a2 - 2);
        a1[5] = v13;
        a1[2] = v11;
        a1[3] = v12;
        __int128 v14 = *(a2 - 5);
        *a1 = *v7;
        a1[1] = v14;
        __int128 v15 = v41;
        *(a2 - 4) = v40;
        *(a2 - 3) = v15;
        __int128 v16 = v43;
        *(a2 - 2) = v42;
        *(a2 - ktrace_session_set_default_event_names_enabled(global_session, 1) = v16;
        __int128 v17 = v39;
        *__int128 v7 = v38;
        *(a2 - 5) = v17;
        __int128 v42 = 0u;
        __int128 v43 = 0u;
        __int128 v40 = 0u;
        __int128 v41 = 0u;
        __int128 v38 = 0u;
        __int128 v39 = 0u;
        goto LABEL_24;
      }

      return v6;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(SymbolOwner const&,SymbolOwner const&),SymbolOwner*>( a1,  a1 + 6,  a2 - 6,  a3);
      return v6;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(SymbolOwner const&,SymbolOwner const&),SymbolOwner*>( a1,  a1 + 6,  a1 + 12,  a2 - 6,  a3);
      return v6;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(SymbolOwner const&,SymbolOwner const&),SymbolOwner*>( a1,  a1 + 6,  a1 + 12,  a1 + 18,  a2 - 6,  a3);
      return v6;
    default:
      __int128 v18 = a1 + 12;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(SymbolOwner const&,SymbolOwner const&),SymbolOwner*>( a1,  a1 + 6,  a1 + 12,  a3);
      __int128 v19 = a1 + 18;
      if (a1 + 18 == a2) {
        return 1LL;
      }
      uint64_t v20 = 0LL;
      int v21 = 0;
      break;
  }

  while (!(*a3)(v19, v18))
  {
LABEL_18:
    __int128 v18 = v19;
    v20 += 96LL;
    v19 += 6;
    if (v19 == a2) {
      return 1LL;
    }
  }

  __int128 v22 = v19[3];
  __int128 v40 = v19[2];
  __int128 v41 = v22;
  __int128 v23 = v19[5];
  __int128 v42 = v19[4];
  __int128 v43 = v23;
  __int128 v24 = v19[1];
  __int128 v38 = *v19;
  __int128 v39 = v24;
  *__int128 v19 = 0u;
  v19[1] = 0u;
  v19[2] = 0u;
  _OWORD v19[3] = 0u;
  uint64_t v25 = v20;
  v19[4] = 0u;
  void v19[5] = 0u;
  while (1)
  {
    __int128 v26 = (__int128 *)((char *)a1 + v25);
    __int128 v27 = *(const void **)((char *)a1 + v25 + 368);
    if (v27) {
      CFRelease(v27);
    }
    __int128 v28 = v26[15];
    v26[20] = v26[14];
    v26[21] = v28;
    __int128 v29 = v26[17];
    v26[22] = v26[16];
    v26[23] = v29;
    __int128 v30 = v26[13];
    v26[18] = v26[12];
    v26[19] = v30;
    v26[12] = 0u;
    v26[13] = 0u;
    v26[14] = 0u;
    v26[15] = 0u;
    v26[16] = 0u;
    v26[17] = 0u;
    if (v25 == -192) {
      break;
    }
    char v31 = (*a3)(&v38, (__int128 *)((char *)a1 + v25 + 96));
    v25 -= 96LL;
    if ((v31 & 1) == 0)
    {
      uint64_t v32 = (uint64_t)a1 + v25 + 288;
      goto LABEL_14;
    }
  }

  uint64_t v32 = (uint64_t)a1;
LABEL_14:
  __int128 v33 = *(const void **)(v32 + 80);
  if (v33) {
    CFRelease(v33);
  }
  __int128 v34 = v41;
  *(_OWORD *)(v32 + 32) = v40;
  *(_OWORD *)(v32 + 4_Block_object_dispose(va, 8) = v34;
  __int128 v35 = v43;
  *(_OWORD *)(v32 + std::__hash_table<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>>>::~__hash_table((uint64_t)this + 64) = v42;
  *(_OWORD *)(v32 + 80) = v35;
  __int128 v36 = v39;
  *(_OWORD *)uint64_t v32 = v38;
  *(_OWORD *)(v32 + 16) = v36;
  __int128 v38 = 0u;
  __int128 v39 = 0u;
  __int128 v40 = 0u;
  __int128 v41 = 0u;
  ++v21;
  __int128 v42 = 0u;
  __int128 v43 = 0u;
  if (v21 != 8)
  {
    SymbolOwner::~SymbolOwner((SymbolOwner *)&v38);
    goto LABEL_18;
  }

  BOOL v6 = v19 + 6 == a2;
LABEL_24:
  SymbolOwner::~SymbolOwner((SymbolOwner *)&v38);
  return v6;
}

void sub_186BE65B4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(SymbolOwner const&,SymbolOwner const&),SymbolOwner*>( __int128 *a1, __int128 *a2, __int128 *a3, __int128 *a4, uint64_t (**a5)(__int128 *, __int128 *))
{
  if ((*a5)(a4, a3))
  {
    __int128 v10 = a3[3];
    __int128 v42 = a3[2];
    __int128 v43 = v10;
    __int128 v11 = a3[5];
    __int128 v44 = a3[4];
    __int128 v45 = v11;
    __int128 v12 = a3[1];
    __int128 v40 = *a3;
    __int128 v41 = v12;
    *a3 = 0u;
    a3[1] = 0u;
    a3[2] = 0u;
    a3[3] = 0u;
    a3[4] = 0u;
    a3[5] = 0u;
    __int128 v13 = a4[2];
    __int128 v14 = a4[3];
    __int128 v15 = a4[5];
    a3[4] = a4[4];
    a3[5] = v15;
    a3[2] = v13;
    a3[3] = v14;
    __int128 v16 = a4[1];
    *a3 = *a4;
    a3[1] = v16;
    __int128 v17 = v43;
    a4[2] = v42;
    a4[3] = v17;
    __int128 v18 = v45;
    a4[4] = v44;
    a4[5] = v18;
    __int128 v19 = v41;
    *a4 = v40;
    a4[1] = v19;
    __int128 v44 = 0u;
    __int128 v45 = 0u;
    __int128 v42 = 0u;
    __int128 v43 = 0u;
    __int128 v40 = 0u;
    __int128 v41 = 0u;
    SymbolOwner::~SymbolOwner((SymbolOwner *)&v40);
    if ((*a5)(a3, a2))
    {
      __int128 v20 = a2[3];
      __int128 v42 = a2[2];
      __int128 v43 = v20;
      __int128 v21 = a2[5];
      __int128 v44 = a2[4];
      __int128 v45 = v21;
      __int128 v22 = a2[1];
      __int128 v40 = *a2;
      __int128 v41 = v22;
      *a2 = 0u;
      a2[1] = 0u;
      a2[2] = 0u;
      a2[3] = 0u;
      a2[4] = 0u;
      a2[5] = 0u;
      __int128 v23 = a3[2];
      __int128 v24 = a3[3];
      __int128 v25 = a3[5];
      a2[4] = a3[4];
      a2[5] = v25;
      a2[2] = v23;
      a2[3] = v24;
      __int128 v26 = a3[1];
      *a2 = *a3;
      a2[1] = v26;
      __int128 v27 = v43;
      a3[2] = v42;
      a3[3] = v27;
      __int128 v28 = v45;
      a3[4] = v44;
      a3[5] = v28;
      __int128 v29 = v41;
      *a3 = v40;
      a3[1] = v29;
      __int128 v44 = 0u;
      __int128 v45 = 0u;
      __int128 v42 = 0u;
      __int128 v43 = 0u;
      __int128 v40 = 0u;
      __int128 v41 = 0u;
      SymbolOwner::~SymbolOwner((SymbolOwner *)&v40);
      if ((*a5)(a2, a1))
      {
        __int128 v30 = a1[3];
        __int128 v42 = a1[2];
        __int128 v43 = v30;
        __int128 v31 = a1[5];
        __int128 v44 = a1[4];
        __int128 v45 = v31;
        __int128 v32 = a1[1];
        __int128 v40 = *a1;
        __int128 v41 = v32;
        *a1 = 0u;
        a1[1] = 0u;
        a1[2] = 0u;
        a1[3] = 0u;
        a1[4] = 0u;
        a1[5] = 0u;
        __int128 v33 = a2[2];
        __int128 v34 = a2[3];
        __int128 v35 = a2[5];
        a1[4] = a2[4];
        a1[5] = v35;
        a1[2] = v33;
        a1[3] = v34;
        __int128 v36 = a2[1];
        *a1 = *a2;
        a1[1] = v36;
        __int128 v37 = v43;
        a2[2] = v42;
        a2[3] = v37;
        __int128 v38 = v45;
        a2[4] = v44;
        a2[5] = v38;
        __int128 v39 = v41;
        *a2 = v40;
        a2[1] = v39;
        __int128 v44 = 0u;
        __int128 v45 = 0u;
        __int128 v42 = 0u;
        __int128 v43 = 0u;
        __int128 v40 = 0u;
        __int128 v41 = 0u;
        SymbolOwner::~SymbolOwner((SymbolOwner *)&v40);
      }
    }
  }

__n128 std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(SymbolOwner const&,SymbolOwner const&),SymbolOwner*>( __int128 *a1, __int128 *a2, __int128 *a3, __int128 *a4, __int128 *a5, uint64_t (**a6)(__int128 *, __int128 *))
{
  if ((*a6)(a5, a4))
  {
    __int128 v13 = a4[3];
    __int128 v55 = a4[2];
    __int128 v56 = v13;
    __int128 v14 = a4[5];
    __int128 v57 = a4[4];
    __int128 v58 = v14;
    __int128 v15 = a4[1];
    __int128 v53 = *a4;
    __int128 v54 = v15;
    *a4 = 0u;
    a4[1] = 0u;
    a4[2] = 0u;
    a4[3] = 0u;
    a4[4] = 0u;
    a4[5] = 0u;
    __int128 v16 = a5[2];
    __int128 v17 = a5[3];
    __int128 v18 = a5[5];
    a4[4] = a5[4];
    a4[5] = v18;
    a4[2] = v16;
    a4[3] = v17;
    __int128 v19 = a5[1];
    *a4 = *a5;
    a4[1] = v19;
    __int128 v20 = v56;
    a5[2] = v55;
    a5[3] = v20;
    __int128 v21 = v58;
    a5[4] = v57;
    a5[5] = v21;
    __int128 v22 = v54;
    *a5 = v53;
    a5[1] = v22;
    __int128 v57 = 0u;
    __int128 v58 = 0u;
    __int128 v55 = 0u;
    __int128 v56 = 0u;
    __int128 v53 = 0u;
    __int128 v54 = 0u;
    SymbolOwner::~SymbolOwner((SymbolOwner *)&v53);
    if ((*a6)(a4, a3))
    {
      __int128 v23 = a3[3];
      __int128 v55 = a3[2];
      __int128 v56 = v23;
      __int128 v24 = a3[5];
      __int128 v57 = a3[4];
      __int128 v58 = v24;
      __int128 v25 = a3[1];
      __int128 v53 = *a3;
      __int128 v54 = v25;
      *a3 = 0u;
      a3[1] = 0u;
      a3[2] = 0u;
      a3[3] = 0u;
      a3[4] = 0u;
      a3[5] = 0u;
      __int128 v26 = a4[2];
      __int128 v27 = a4[3];
      __int128 v28 = a4[5];
      a3[4] = a4[4];
      a3[5] = v28;
      a3[2] = v26;
      a3[3] = v27;
      __int128 v29 = a4[1];
      *a3 = *a4;
      a3[1] = v29;
      __int128 v30 = v56;
      a4[2] = v55;
      a4[3] = v30;
      __int128 v31 = v58;
      a4[4] = v57;
      a4[5] = v31;
      __int128 v32 = v54;
      *a4 = v53;
      a4[1] = v32;
      __int128 v57 = 0u;
      __int128 v58 = 0u;
      __int128 v55 = 0u;
      __int128 v56 = 0u;
      __int128 v53 = 0u;
      __int128 v54 = 0u;
      SymbolOwner::~SymbolOwner((SymbolOwner *)&v53);
      if ((*a6)(a3, a2))
      {
        __int128 v33 = a2[3];
        __int128 v55 = a2[2];
        __int128 v56 = v33;
        __int128 v34 = a2[5];
        __int128 v57 = a2[4];
        __int128 v58 = v34;
        __int128 v35 = a2[1];
        __int128 v53 = *a2;
        __int128 v54 = v35;
        *a2 = 0u;
        a2[1] = 0u;
        a2[2] = 0u;
        a2[3] = 0u;
        a2[4] = 0u;
        a2[5] = 0u;
        __int128 v36 = a3[2];
        __int128 v37 = a3[3];
        __int128 v38 = a3[5];
        a2[4] = a3[4];
        a2[5] = v38;
        a2[2] = v36;
        a2[3] = v37;
        __int128 v39 = a3[1];
        *a2 = *a3;
        a2[1] = v39;
        __int128 v40 = v56;
        a3[2] = v55;
        a3[3] = v40;
        __int128 v41 = v58;
        a3[4] = v57;
        a3[5] = v41;
        __int128 v42 = v54;
        *a3 = v53;
        a3[1] = v42;
        __int128 v57 = 0u;
        __int128 v58 = 0u;
        __int128 v55 = 0u;
        __int128 v56 = 0u;
        __int128 v53 = 0u;
        __int128 v54 = 0u;
        SymbolOwner::~SymbolOwner((SymbolOwner *)&v53);
        if ((*a6)(a2, a1))
        {
          __int128 v43 = a1[3];
          __int128 v55 = a1[2];
          __int128 v56 = v43;
          __int128 v44 = a1[5];
          __int128 v57 = a1[4];
          __int128 v58 = v44;
          __int128 v45 = a1[1];
          __int128 v53 = *a1;
          __int128 v54 = v45;
          *a1 = 0u;
          a1[1] = 0u;
          a1[2] = 0u;
          a1[3] = 0u;
          a1[4] = 0u;
          a1[5] = 0u;
          __int128 v46 = a2[2];
          __int128 v47 = a2[3];
          __int128 v48 = a2[5];
          a1[4] = a2[4];
          a1[5] = v48;
          a1[2] = v46;
          a1[3] = v47;
          __int128 v49 = a2[1];
          *a1 = *a2;
          a1[1] = v49;
          __int128 v50 = v56;
          a2[2] = v55;
          a2[3] = v50;
          __int128 v51 = v58;
          a2[4] = v57;
          a2[5] = v51;
          __int128 v52 = v54;
          *a2 = v53;
          a2[1] = v52;
          __int128 v57 = 0u;
          __int128 v58 = 0u;
          __int128 v55 = 0u;
          __int128 v56 = 0u;
          __int128 v53 = 0u;
          __int128 v54 = 0u;
          SymbolOwner::~SymbolOwner((SymbolOwner *)&v53);
        }
      }
    }
  }

  return result;
}

char *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(SymbolOwner const&,SymbolOwner const&),SymbolOwner*,SymbolOwner*>( char *a1, char *a2, char *a3, unsigned int (**a4)(uint64_t, __int128 *), __n128 a5)
{
  if (a1 != a2)
  {
    uint64_t v9 = a2 - a1;
    uint64_t v10 = (a2 - a1) / 96;
    if (a2 - a1 >= 97)
    {
      unint64_t v11 = (unint64_t)(v10 - 2) >> 1;
      unint64_t v12 = v11 + 1;
      __int128 v13 = &a1[96 * v11];
      do
      {
        a5 = std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(SymbolOwner const&,SymbolOwner const&),SymbolOwner*>( (uint64_t)a1,  a4,  v10,  v13);
        v13 -= 96;
        --v12;
      }

      while (v12);
    }

    __int128 v14 = a2;
    if (a2 != a3)
    {
      __int128 v15 = a2;
      do
      {
        if (((unsigned int (*)(char *, char *, __n128))*a4)(v15, a1, a5))
        {
          __int128 v16 = *((_OWORD *)v15 + 3);
          __int128 v48 = *((_OWORD *)v15 + 2);
          __int128 v49 = v16;
          __int128 v17 = *((_OWORD *)v15 + 5);
          __int128 v50 = *((_OWORD *)v15 + 4);
          __int128 v51 = v17;
          __int128 v18 = *((_OWORD *)v15 + 1);
          __int128 v46 = *(_OWORD *)v15;
          __int128 v47 = v18;
          *(_OWORD *)__int128 v15 = 0u;
          *((_OWORD *)v15 + ktrace_session_set_default_event_names_enabled(global_session, 1) = 0u;
          *((_OWORD *)v15 + 2) = 0u;
          *((_OWORD *)v15 + 3) = 0u;
          *((_OWORD *)v15 + 4) = 0u;
          *((_OWORD *)v15 + 5) = 0u;
          __int128 v19 = *((_OWORD *)a1 + 2);
          __int128 v20 = *((_OWORD *)a1 + 3);
          __int128 v21 = *((_OWORD *)a1 + 5);
          *((_OWORD *)v15 + 4) = *((_OWORD *)a1 + 4);
          *((_OWORD *)v15 + 5) = v21;
          *((_OWORD *)v15 + 2) = v19;
          *((_OWORD *)v15 + 3) = v20;
          __int128 v22 = *((_OWORD *)a1 + 1);
          *(_OWORD *)__int128 v15 = *(_OWORD *)a1;
          *((_OWORD *)v15 + ktrace_session_set_default_event_names_enabled(global_session, 1) = v22;
          __int128 v23 = v49;
          *((_OWORD *)a1 + 2) = v48;
          *((_OWORD *)a1 + 3) = v23;
          __int128 v24 = v51;
          *((_OWORD *)a1 + 4) = v50;
          *((_OWORD *)a1 + 5) = v24;
          __int128 v25 = v47;
          *(_OWORD *)a1 = v46;
          *((_OWORD *)a1 + ktrace_session_set_default_event_names_enabled(global_session, 1) = v25;
          __int128 v50 = 0u;
          __int128 v51 = 0u;
          __int128 v48 = 0u;
          __int128 v49 = 0u;
          __int128 v46 = 0u;
          __int128 v47 = 0u;
          SymbolOwner::~SymbolOwner((SymbolOwner *)&v46);
          a5 = std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(SymbolOwner const&,SymbolOwner const&),SymbolOwner*>( (uint64_t)a1,  a4,  v10,  a1);
        }

        v15 += 96;
      }

      while (v15 != a3);
      __int128 v14 = a3;
    }

    if (v9 >= 97)
    {
      int64_t v26 = v9 / 0x60uLL;
      __int128 v27 = a2 - 96;
      do
      {
        __int128 v28 = *((_OWORD *)a1 + 3);
        __int128 v48 = *((_OWORD *)a1 + 2);
        __int128 v49 = v28;
        __int128 v29 = *((_OWORD *)a1 + 5);
        __int128 v50 = *((_OWORD *)a1 + 4);
        __int128 v51 = v29;
        __int128 v30 = *((_OWORD *)a1 + 1);
        __int128 v46 = *(_OWORD *)a1;
        __int128 v47 = v30;
        *(_OWORD *)a1 = 0u;
        *((_OWORD *)a1 + ktrace_session_set_default_event_names_enabled(global_session, 1) = 0u;
        *((_OWORD *)a1 + 2) = 0u;
        *((_OWORD *)a1 + 3) = 0u;
        *((_OWORD *)a1 + 4) = 0u;
        *((_OWORD *)a1 + 5) = 0u;
        __int128 v31 = (char *)std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(SymbolOwner const&,SymbolOwner const&),SymbolOwner*>( a1,  (unsigned int (**)(_OWORD *, uint64_t))a4,  v26);
        __int128 v32 = (const void *)*((void *)v31 + 10);
        if (v27 == v31)
        {
          if (v32) {
            CFRelease(v32);
          }
          __int128 v40 = v47;
          *(_OWORD *)__int128 v31 = v46;
          *((_OWORD *)v31 + ktrace_session_set_default_event_names_enabled(global_session, 1) = v40;
          __int128 v41 = v48;
          __int128 v42 = v49;
          __int128 v43 = v51;
          *((_OWORD *)v31 + 4) = v50;
          *((_OWORD *)v31 + 5) = v43;
          *((_OWORD *)v31 + 2) = v41;
          *((_OWORD *)v31 + 3) = v42;
          __int128 v48 = 0u;
          __int128 v49 = 0u;
          __int128 v50 = 0u;
          __int128 v51 = 0u;
          __int128 v46 = 0u;
          __int128 v47 = 0u;
        }

        else
        {
          if (v32) {
            CFRelease(v32);
          }
          __int128 v33 = *((_OWORD *)v27 + 1);
          *(_OWORD *)__int128 v31 = *(_OWORD *)v27;
          *((_OWORD *)v31 + ktrace_session_set_default_event_names_enabled(global_session, 1) = v33;
          __int128 v34 = *((_OWORD *)v27 + 2);
          __int128 v35 = *((_OWORD *)v27 + 3);
          __int128 v36 = *((_OWORD *)v27 + 5);
          *((_OWORD *)v31 + 4) = *((_OWORD *)v27 + 4);
          *((_OWORD *)v31 + 5) = v36;
          *((_OWORD *)v31 + 2) = v34;
          *((_OWORD *)v31 + 3) = v35;
          __int128 v37 = v49;
          *((_OWORD *)v27 + 2) = v48;
          *((_OWORD *)v27 + 3) = v37;
          __int128 v38 = v51;
          *((_OWORD *)v27 + 4) = v50;
          *((_OWORD *)v27 + 5) = v38;
          __int128 v39 = v47;
          *(_OWORD *)__int128 v27 = v46;
          *((_OWORD *)v27 + ktrace_session_set_default_event_names_enabled(global_session, 1) = v39;
          __int128 v48 = 0u;
          __int128 v49 = 0u;
          __int128 v50 = 0u;
          __int128 v51 = 0u;
          __int128 v46 = 0u;
          __int128 v47 = 0u;
          std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(SymbolOwner const&,SymbolOwner const&),SymbolOwner*>( (uint64_t)a1,  (uint64_t)(v31 + 96),  (uint64_t (**)(_OWORD *, __int128 *))a4,  0xAAAAAAAAAAAAAAABLL * ((v31 + 96 - a1) >> 5));
        }

        SymbolOwner::~SymbolOwner((SymbolOwner *)&v46);
        v27 -= 96;
      }

      while (v26-- > 2);
    }

    return v14;
  }

  return a3;
}

void sub_186BE6C64( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

__n128 std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(SymbolOwner const&,SymbolOwner const&),SymbolOwner*>( uint64_t a1, unsigned int (**a2)(uint64_t, __int128 *), uint64_t a3, _OWORD *a4)
{
  unint64_t v4 = a3 - 2;
  if (a3 >= 2)
  {
    uint64_t v5 = a4;
    uint64_t v7 = v4 >> 1;
    if ((uint64_t)(v4 >> 1) >= (uint64_t)(0xAAAAAAAAAAAAAAABLL * (((uint64_t)a4 - a1) >> 5)))
    {
      uint64_t v10 = (0x5555555555555556LL * (((uint64_t)a4 - a1) >> 5)) | 1;
      unint64_t v11 = (_OWORD *)(a1 + 96 * v10);
      uint64_t v12 = 0x5555555555555556LL * (((uint64_t)a4 - a1) >> 5) + 2;
      if (v12 < a3 && (*a2)(a1 + 96 * v10, v11 + 6))
      {
        v11 += 6;
        uint64_t v10 = v12;
      }

      if ((((uint64_t (*)(_OWORD *, _OWORD *))*a2)(v11, v5) & 1) == 0)
      {
        __int128 v14 = v5[3];
        __int128 v31 = v5[2];
        __int128 v32 = v14;
        __int128 v15 = v5[5];
        __int128 v33 = v5[4];
        __int128 v34 = v15;
        __int128 v16 = v5[1];
        __int128 v29 = *v5;
        __int128 v30 = v16;
        _OWORD *v5 = 0u;
        v5[1] = 0u;
        int v5[2] = 0u;
        void v5[3] = 0u;
        void v5[4] = 0u;
        void v5[5] = 0u;
        while (1)
        {
          __int128 v17 = v11;
          __int128 v18 = (const void *)*((void *)v5 + 10);
          if (v18) {
            CFRelease(v18);
          }
          __int128 v19 = v11[1];
          _OWORD *v5 = *v11;
          v5[1] = v19;
          __int128 v20 = v11[2];
          __int128 v21 = v11[3];
          __int128 v22 = v11[5];
          void v5[4] = v11[4];
          void v5[5] = v22;
          int v5[2] = v20;
          void v5[3] = v21;
          void v11[2] = 0u;
          void v11[3] = 0u;
          v11[4] = 0u;
          void v11[5] = 0u;
          *unint64_t v11 = 0u;
          v11[1] = 0u;
          if (v7 < v10) {
            break;
          }
          uint64_t v23 = (2 * v10) | 1;
          unint64_t v11 = (_OWORD *)(a1 + 96 * v23);
          uint64_t v10 = 2 * v10 + 2;
          if (v10 >= a3)
          {
            uint64_t v10 = v23;
          }

          else if ((*a2)(a1 + 96 * v23, v11 + 6))
          {
            v11 += 6;
          }

          else
          {
            uint64_t v10 = v23;
          }

          uint64_t v5 = v17;
          if ((*a2)((uint64_t)v11, &v29))
          {
            __int128 v24 = (const void *)*((void *)v17 + 10);
            if (v24) {
              CFRelease(v24);
            }
            break;
          }
        }

        __int128 v25 = v30;
        *__int128 v17 = v29;
        v17[1] = v25;
        __int128 v26 = v31;
        __int128 v27 = v32;
        __int128 v28 = v34;
        _OWORD v17[4] = v33;
        void v17[5] = v28;
        unint64_t v17[2] = v26;
        v17[3] = v27;
        __int128 v31 = 0u;
        __int128 v32 = 0u;
        __int128 v33 = 0u;
        __int128 v34 = 0u;
        __int128 v29 = 0u;
        __int128 v30 = 0u;
        SymbolOwner::~SymbolOwner((SymbolOwner *)&v29);
      }
    }
  }

  return result;
}

void sub_186BE6E48( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

_OWORD *std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(SymbolOwner const&,SymbolOwner const&),SymbolOwner*>( _OWORD *a1, unsigned int (**a2)(_OWORD *, uint64_t), uint64_t a3)
{
  uint64_t v6 = 0LL;
  uint64_t v7 = a3 - 2;
  if (a3 < 2) {
    uint64_t v7 = a3 - 1;
  }
  uint64_t v8 = v7 >> 1;
  do
  {
    uint64_t v9 = &a1[6 * v6 + 6];
    uint64_t v10 = 2 * v6;
    uint64_t v6 = (2 * v6) | 1;
    uint64_t v11 = v10 + 2;
    if (v10 + 2 < a3 && (*a2)(v9, (uint64_t)(v9 + 6)))
    {
      v9 += 6;
      uint64_t v6 = v11;
    }

    uint64_t v12 = (const void *)*((void *)a1 + 10);
    if (v12) {
      CFRelease(v12);
    }
    __int128 v13 = v9[1];
    *a1 = *v9;
    a1[1] = v13;
    __int128 v14 = v9[2];
    __int128 v15 = v9[3];
    __int128 v16 = v9[5];
    a1[4] = v9[4];
    a1[5] = v16;
    a1[2] = v14;
    a1[3] = v15;
    v9[2] = 0u;
    v9[3] = 0u;
    v9[4] = 0u;
    void v9[5] = 0u;
    *uint64_t v9 = 0u;
    v9[1] = 0u;
    a1 = v9;
  }

  while (v6 <= v8);
  return v9;
}

void std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(SymbolOwner const&,SymbolOwner const&),SymbolOwner*>( uint64_t a1, uint64_t a2, uint64_t (**a3)(_OWORD *, __int128 *), uint64_t a4)
{
  unint64_t v4 = a4 - 2;
  if (a4 >= 2)
  {
    unint64_t v7 = v4 >> 1;
    uint64_t v8 = (_OWORD *)(a1 + 96 * (v4 >> 1));
    uint64_t v9 = (_OWORD *)(a2 - 96);
    if ((*a3)(v8, (__int128 *)(a2 - 96)))
    {
      __int128 v10 = v9[3];
      __int128 v25 = v9[2];
      __int128 v26 = v10;
      __int128 v11 = v9[5];
      __int128 v27 = v9[4];
      __int128 v28 = v11;
      __int128 v12 = v9[1];
      __int128 v23 = *v9;
      __int128 v24 = v12;
      *uint64_t v9 = 0u;
      v9[1] = 0u;
      v9[2] = 0u;
      v9[3] = 0u;
      v9[4] = 0u;
      void v9[5] = 0u;
      while (1)
      {
        __int128 v13 = v8;
        __int128 v14 = (const void *)*((void *)v9 + 10);
        if (v14) {
          CFRelease(v14);
        }
        __int128 v15 = v8[1];
        *uint64_t v9 = *v8;
        v9[1] = v15;
        __int128 v16 = v8[2];
        __int128 v17 = v8[3];
        __int128 v18 = v8[5];
        v9[4] = v8[4];
        void v9[5] = v18;
        v9[2] = v16;
        v9[3] = v17;
        int v8[2] = 0u;
        v8[3] = 0u;
        _DWORD v8[4] = 0u;
        void v8[5] = 0u;
        *uint64_t v8 = 0u;
        v8[1] = 0u;
        if (!v7) {
          break;
        }
        unint64_t v7 = (v7 - 1) >> 1;
        uint64_t v8 = (_OWORD *)(a1 + 96 * v7);
        uint64_t v9 = v13;
        if (((*a3)(v8, &v23) & 1) == 0)
        {
          __int128 v19 = (const void *)*((void *)v13 + 10);
          if (v19) {
            CFRelease(v19);
          }
          break;
        }
      }

      __int128 v20 = v26;
      v13[2] = v25;
      void v13[3] = v20;
      __int128 v21 = v28;
      v13[4] = v27;
      _OWORD v13[5] = v21;
      __int128 v22 = v24;
      *__int128 v13 = v23;
      v13[1] = v22;
      __int128 v23 = 0u;
      __int128 v24 = 0u;
      __int128 v25 = 0u;
      __int128 v26 = 0u;
      __int128 v27 = 0u;
      __int128 v28 = 0u;
      SymbolOwner::~SymbolOwner((SymbolOwner *)&v23);
    }
  }

void sub_186BE7078( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::find<unsigned long long>( void *a1, unint64_t *a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0LL;
  }
  unint64_t v3 = *a2;
  uint8x8_t v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    unint64_t v5 = *a2;
    if (v3 >= *(void *)&v2) {
      unint64_t v5 = v3 % *(void *)&v2;
    }
  }

  else
  {
    unint64_t v5 = (*(void *)&v2 - 1LL) & v3;
  }

  uint64_t v6 = *(void **)(*a1 + 8 * v5);
  if (!v6) {
    return 0LL;
  }
  __n128 result = (void *)*v6;
  if (*v6)
  {
    do
    {
      unint64_t v8 = result[1];
      if (v3 == v8)
      {
        if (result[2] == v3) {
          return result;
        }
      }

      else
      {
        if (v4.u32[0] > 1uLL)
        {
          if (v8 >= *(void *)&v2) {
            v8 %= *(void *)&v2;
          }
        }

        else
        {
          v8 &= *(void *)&v2 - 1LL;
        }

        if (v8 != v5) {
          return 0LL;
        }
      }

      __n128 result = (void *)*result;
    }

    while (result);
  }

  return result;
}

void *std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__emplace_unique_key_args<unsigned long long,unsigned long long const&>( uint64_t a1, unint64_t *a2, void *a3)
{
  unint64_t v6 = *a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = *a2;
      if (v6 >= v7) {
        unint64_t v3 = v6 % v7;
      }
    }

    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }

    uint64_t v9 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      for (uint64_t i = *v9; i; uint64_t i = (void *)*i)
      {
        unint64_t v11 = i[1];
        if (v11 == v6)
        {
          if (i[2] == v6) {
            return i;
          }
        }

        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7) {
              v11 %= v7;
            }
          }

          else
          {
            v11 &= v7 - 1;
          }

          if (v11 != v3) {
            break;
          }
        }
      }
    }
  }

  uint64_t i = operator new(0x18uLL);
  *uint64_t i = 0LL;
  i[1] = v6;
  i[2] = *a3;
  float v12 = (float)(unint64_t)(*(void *)(a1 + 24) + 1LL);
  float v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    BOOL v14 = 1LL;
    if (v7 >= 3) {
      BOOL v14 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v15 = v14 | (2 * v7);
    unint64_t v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16) {
      size_t v17 = v16;
    }
    else {
      size_t v17 = v15;
    }
    std::__hash_table<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>>>::__rehash<true>( a1,  v17);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7) {
        unint64_t v3 = v6 % v7;
      }
      else {
        unint64_t v3 = v6;
      }
    }

    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
  }

  uint64_t v18 = *(void *)a1;
  __int128 v19 = *(void **)(*(void *)a1 + 8 * v3);
  if (v19)
  {
    *uint64_t i = *v19;
LABEL_38:
    *__int128 v19 = i;
    goto LABEL_39;
  }

  *uint64_t i = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(v18 + 8 * v3) = a1 + 16;
  if (*i)
  {
    unint64_t v20 = *(void *)(*i + 8LL);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v20 >= v7) {
        v20 %= v7;
      }
    }

    else
    {
      v20 &= v7 - 1;
    }

    __int128 v19 = (void *)(*(void *)a1 + 8 * v20);
    goto LABEL_38;
  }

void sub_186BE7348(_Unwind_Exception *a1)
{
}

uint64_t std::__hash_table<std::__hash_value_type<CFUUIDBytes,UUIDContext>,std::__unordered_map_hasher<CFUUIDBytes,std::__hash_value_type<CFUUIDBytes,UUIDContext>,std::hash<CFUUIDBytes>,std::equal_to<CFUUIDBytes>,true>,std::__unordered_map_equal<CFUUIDBytes,std::__hash_value_type<CFUUIDBytes,UUIDContext>,std::equal_to<CFUUIDBytes>,std::hash<CFUUIDBytes>,true>,std::allocator<std::__hash_value_type<CFUUIDBytes,UUIDContext>>>::~__hash_table( uint64_t a1)
{
  int8x8_t v2 = *(void **)a1;
  *(void *)a1 = 0LL;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void *std::__hash_table<std::__hash_value_type<CFUUIDBytes,CS::TypeRef>,std::__unordered_map_hasher<CFUUIDBytes,std::__hash_value_type<CFUUIDBytes,CS::TypeRef>,std::hash<CFUUIDBytes>,std::equal_to<CFUUIDBytes>,true>,std::__unordered_map_equal<CFUUIDBytes,std::__hash_value_type<CFUUIDBytes,CS::TypeRef>,std::equal_to<CFUUIDBytes>,std::hash<CFUUIDBytes>,true>,std::allocator<std::__hash_value_type<CFUUIDBytes,CS::TypeRef>>>::__emplace_unique_key_args<CFUUIDBytes,std::piecewise_construct_t const&,std::tuple<CFUUIDBytes&&>,std::tuple<>>( uint64_t a1, void *a2, uint64_t a3, _OWORD **a4)
{
  unint64_t v7 = a2[1] ^ *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = a2[1] ^ *a2;
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
    }

    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }

    __int128 v10 = *(void **)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      unint64_t v11 = (void *)*v10;
      if (*v10)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v12 == v7)
          {
            if (v11[2] == *a2 && v11[3] == a2[1]) {
              return v11;
            }
          }

          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8) {
                v12 %= v8;
              }
            }

            else
            {
              v12 &= v8 - 1;
            }

            if (v12 != v4) {
              break;
            }
          }

          unint64_t v11 = (void *)*v11;
        }

        while (v11);
      }
    }
  }

  uint64_t v14 = a1 + 16;
  unint64_t v15 = operator new(0x30uLL);
  v25[0] = (uint64_t)v15;
  v25[1] = a1 + 16;
  void *v15 = 0LL;
  v15[1] = v7;
  *((_OWORD *)v15 + ktrace_session_set_default_event_names_enabled(global_session, 1) = **a4;
  _OWORD v15[4] = 0LL;
  _OWORD v15[5] = 0LL;
  char v26 = 1;
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1LL);
  float v17 = *(float *)(a1 + 32);
  if (!v8 || (float)(v17 * (float)v8) < v16)
  {
    BOOL v18 = 1LL;
    if (v8 >= 3) {
      BOOL v18 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v8);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    std::__hash_table<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>>>::__rehash<true>( a1,  v21);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }

    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }

  __int128 v22 = *(void **)(*(void *)a1 + 8 * v4);
  if (v22)
  {
    *(void *)v25[0] = *v22;
    *__int128 v22 = v25[0];
  }

  else
  {
    *(void *)v25[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v25[0];
    *(void *)(*(void *)a1 + 8 * v4) = v14;
    if (*(void *)v25[0])
    {
      unint64_t v23 = *(void *)(*(void *)v25[0] + 8LL);
      if ((v8 & (v8 - 1)) != 0)
      {
        if (v23 >= v8) {
          v23 %= v8;
        }
      }

      else
      {
        v23 &= v8 - 1;
      }

      *(void *)(*(void *)a1 + 8 * v23) = v25[0];
    }
  }

  unint64_t v11 = (void *)v25[0];
  v25[0] = 0LL;
  ++*(void *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<CFUUIDBytes,CS::TypeRef>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<CFUUIDBytes,CS::TypeRef>,void *>>>>::reset[abi:ne180100]( v25,  0LL);
  return v11;
}

void sub_186BE75E4(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<CFUUIDBytes,CS::TypeRef>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<CFUUIDBytes,CS::TypeRef>,void *>>>>::reset[abi:ne180100]( uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  *a1 = a2;
  if (v2)
  {
    if (*((_BYTE *)a1 + 16)) {
      CS::TypeRef::~TypeRef((CS::TypeRef *)(v2 + 32));
    }
    operator delete((void *)v2);
  }

void *std::__hash_table<std::__hash_value_type<CFUUIDBytes,CF::TypeRef>,std::__unordered_map_hasher<CFUUIDBytes,std::__hash_value_type<CFUUIDBytes,CF::TypeRef>,std::hash<CFUUIDBytes>,std::equal_to<CFUUIDBytes>,true>,std::__unordered_map_equal<CFUUIDBytes,std::__hash_value_type<CFUUIDBytes,CF::TypeRef>,std::equal_to<CFUUIDBytes>,std::hash<CFUUIDBytes>,true>,std::allocator<std::__hash_value_type<CFUUIDBytes,CF::TypeRef>>>::__emplace_unique_key_args<CFUUIDBytes,CFUUIDBytes,CF::TypeRef>( uint64_t a1, void *a2, _OWORD *a3, void *a4)
{
  unint64_t v8 = a2[1] ^ *a2;
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v4 = a2[1] ^ *a2;
      if (v8 >= v9) {
        unint64_t v4 = v8 % v9;
      }
    }

    else
    {
      unint64_t v4 = (v9 - 1) & v8;
    }

    unint64_t v11 = *(void **)(*(void *)a1 + 8 * v4);
    if (v11)
    {
      unint64_t v12 = (void *)*v11;
      if (*v11)
      {
        do
        {
          unint64_t v13 = v12[1];
          if (v13 == v8)
          {
            if (v12[2] == *a2 && v12[3] == a2[1]) {
              return v12;
            }
          }

          else
          {
            if (v10.u32[0] > 1uLL)
            {
              if (v13 >= v9) {
                v13 %= v9;
              }
            }

            else
            {
              v13 &= v9 - 1;
            }

            if (v13 != v4) {
              break;
            }
          }

          unint64_t v12 = (void *)*v12;
        }

        while (v12);
      }
    }
  }

  uint64_t v15 = a1 + 16;
  float v16 = operator new(0x28uLL);
  v26[0] = v16;
  v26[1] = a1 + 16;
  *float v16 = 0LL;
  v16[1] = v8;
  *((_OWORD *)v16 + ktrace_session_set_default_event_names_enabled(global_session, 1) = *a3;
  v16[4] = *a4;
  *a4 = 0LL;
  char v27 = 1;
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1LL);
  float v18 = *(float *)(a1 + 32);
  if (!v9 || (float)(v18 * (float)v9) < v17)
  {
    BOOL v19 = 1LL;
    if (v9 >= 3) {
      BOOL v19 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v9);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    std::__hash_table<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>>>::__rehash<true>( a1,  v22);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v4 = v8 % v9;
      }
      else {
        unint64_t v4 = v8;
      }
    }

    else
    {
      unint64_t v4 = (v9 - 1) & v8;
    }
  }

  unint64_t v23 = *(void **)(*(void *)a1 + 8 * v4);
  if (v23)
  {
    *(void *)v26[0] = *v23;
    *unint64_t v23 = v26[0];
  }

  else
  {
    *(void *)v26[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v26[0];
    *(void *)(*(void *)a1 + 8 * v4) = v15;
    if (*(void *)v26[0])
    {
      unint64_t v24 = *(void *)(*(void *)v26[0] + 8LL);
      if ((v9 & (v9 - 1)) != 0)
      {
        if (v24 >= v9) {
          v24 %= v9;
        }
      }

      else
      {
        v24 &= v9 - 1;
      }

      *(void *)(*(void *)a1 + 8 * v24) = v26[0];
    }
  }

  unint64_t v12 = (void *)v26[0];
  v26[0] = 0LL;
  ++*(void *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<CFUUIDBytes,CF::TypeRef>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<CFUUIDBytes,CF::TypeRef>,void *>>>>::reset[abi:ne180100]( (uint64_t)v26,  0LL);
  return v12;
}

void sub_186BE78A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void *std::__hash_table<std::__hash_value_type<CFUUIDBytes,CS::TypeRef>,std::__unordered_map_hasher<CFUUIDBytes,std::__hash_value_type<CFUUIDBytes,CS::TypeRef>,std::hash<CFUUIDBytes>,std::equal_to<CFUUIDBytes>,true>,std::__unordered_map_equal<CFUUIDBytes,std::__hash_value_type<CFUUIDBytes,CS::TypeRef>,std::equal_to<CFUUIDBytes>,std::hash<CFUUIDBytes>,true>,std::allocator<std::__hash_value_type<CFUUIDBytes,CS::TypeRef>>>::__emplace_unique_key_args<CFUUIDBytes,CFUUIDBytes&,CS::TypeRef>( uint64_t a1, void *a2, _OWORD *a3, __int128 *a4)
{
  unint64_t v8 = a2[1] ^ *a2;
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v4 = a2[1] ^ *a2;
      if (v8 >= v9) {
        unint64_t v4 = v8 % v9;
      }
    }

    else
    {
      unint64_t v4 = (v9 - 1) & v8;
    }

    unint64_t v11 = *(void **)(*(void *)a1 + 8 * v4);
    if (v11)
    {
      unint64_t v12 = (void *)*v11;
      if (*v11)
      {
        do
        {
          unint64_t v13 = v12[1];
          if (v13 == v8)
          {
            if (v12[2] == *a2 && v12[3] == a2[1]) {
              return v12;
            }
          }

          else
          {
            if (v10.u32[0] > 1uLL)
            {
              if (v13 >= v9) {
                v13 %= v9;
              }
            }

            else
            {
              v13 &= v9 - 1;
            }

            if (v13 != v4) {
              break;
            }
          }

          unint64_t v12 = (void *)*v12;
        }

        while (v12);
      }
    }
  }

  uint64_t v15 = a1 + 16;
  float v16 = operator new(0x30uLL);
  v27[0] = (uint64_t)v16;
  v27[1] = a1 + 16;
  *float v16 = 0LL;
  v16[1] = v8;
  __int128 v17 = *a4;
  *((_OWORD *)v16 + ktrace_session_set_default_event_names_enabled(global_session, 1) = *a3;
  *((_OWORD *)v16 + 2) = v17;
  *(void *)a4 = 0LL;
  *((void *)a4 + ktrace_session_set_default_event_names_enabled(global_session, 1) = 0LL;
  char v28 = 1;
  float v18 = (float)(unint64_t)(*(void *)(a1 + 24) + 1LL);
  float v19 = *(float *)(a1 + 32);
  if (!v9 || (float)(v19 * (float)v9) < v18)
  {
    BOOL v20 = 1LL;
    if (v9 >= 3) {
      BOOL v20 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v21 = v20 | (2 * v9);
    unint64_t v22 = vcvtps_u32_f32(v18 / v19);
    if (v21 <= v22) {
      size_t v23 = v22;
    }
    else {
      size_t v23 = v21;
    }
    std::__hash_table<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>>>::__rehash<true>( a1,  v23);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v4 = v8 % v9;
      }
      else {
        unint64_t v4 = v8;
      }
    }

    else
    {
      unint64_t v4 = (v9 - 1) & v8;
    }
  }

  unint64_t v24 = *(void **)(*(void *)a1 + 8 * v4);
  if (v24)
  {
    *(void *)v27[0] = *v24;
    *unint64_t v24 = v27[0];
  }

  else
  {
    *(void *)v27[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v27[0];
    *(void *)(*(void *)a1 + 8 * v4) = v15;
    if (*(void *)v27[0])
    {
      unint64_t v25 = *(void *)(*(void *)v27[0] + 8LL);
      if ((v9 & (v9 - 1)) != 0)
      {
        if (v25 >= v9) {
          v25 %= v9;
        }
      }

      else
      {
        v25 &= v9 - 1;
      }

      *(void *)(*(void *)a1 + 8 * v25) = v27[0];
    }
  }

  unint64_t v12 = (void *)v27[0];
  v27[0] = 0LL;
  ++*(void *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<CFUUIDBytes,CS::TypeRef>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<CFUUIDBytes,CS::TypeRef>,void *>>>>::reset[abi:ne180100]( v27,  0LL);
  return v12;
}

void sub_186BE7B14(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t *std::vector<PrepassOp>::__swap_out_circular_buffer(uint64_t *result, void *a2)
{
  uint64_t v3 = *result;
  uint64_t v2 = result[1];
  unint64_t v4 = (void *)a2[1];
  while (v2 != v3)
  {
    *(v4 - 2) = 0LL;
    *(v4 - ktrace_session_set_default_event_names_enabled(global_session, 1) = 0LL;
    v4 -= 2;
    uint64_t v5 = *(void *)(v2 - 16);
    uint64_t v6 = *(void *)(v2 - 8);
    v2 -= 16LL;
    void *v4 = v5;
    v4[1] = v6;
    *(void *)(v2 + _Block_object_dispose(va, 8) = 0LL;
  }

  a2[1] = v4;
  uint64_t v7 = *result;
  void *result = (uint64_t)v4;
  a2[1] = v7;
  uint64_t v8 = result[1];
  result[1] = a2[2];
  a2[2] = v8;
  uint64_t v9 = result[2];
  result[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<PrepassOp>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(16 * a2);
}

uint64_t std::__split_buffer<PrepassOp>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 16;
    PrepassOp::~PrepassOp((PrepassOp *)(i - 16));
  }

  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,PrepassOp *,false>( unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4, char a5)
{
LABEL_1:
  uint64_t v9 = a1;
LABEL_2:
  uint64_t v10 = 1 - a4;
  while (2)
  {
    a1 = v9;
    uint64_t v11 = v10;
    uint64_t v12 = (char *)a2 - (char *)v9;
    unint64_t v13 = ((char *)a2 - (char *)v9) >> 4;
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        if (*(a2 - 2) < *v9)
        {
          unint64_t v22 = v9[1];
          v9[1] = *(a2 - 1);
          *(a2 - ktrace_session_set_default_event_names_enabled(global_session, 1) = v22;
          unint64_t v23 = *v9;
          *uint64_t v9 = *(a2 - 2);
          *(a2 - 2) = v23;
        }

        return;
      case 3uLL:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PrepassOp *>(v9, v9 + 2, a2 - 2);
        return;
      case 4uLL:
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PrepassOp *>( v9,  v9 + 2,  v9 + 4,  a2 - 2);
        return;
      case 5uLL:
        std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PrepassOp *>( v9,  v9 + 2,  v9 + 4,  v9 + 6,  a2 - 2);
        return;
      default:
        if (v12 <= 383)
        {
          if ((a5 & 1) != 0) {
            std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PrepassOp *>(v9, a2);
          }
          else {
            std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PrepassOp *>( v9,  a2);
          }
          return;
        }

        if (v11 != 1)
        {
          unint64_t v14 = v13 >> 1;
          uint64_t v15 = &v9[2 * (v13 >> 1)];
          if ((unint64_t)v12 < 0x801)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PrepassOp *>( &v9[2 * (v13 >> 1)],  v9,  a2 - 2);
            if ((a5 & 1) != 0) {
              goto LABEL_11;
            }
          }

          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PrepassOp *>( v9,  &v9[2 * (v13 >> 1)],  a2 - 2);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PrepassOp *>( v9 + 2,  v15 - 2,  a2 - 4);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PrepassOp *>( v9 + 4,  &v9[2 * v14 + 2],  a2 - 6);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PrepassOp *>( v15 - 2,  v15,  &v9[2 * v14 + 2]);
            unint64_t v17 = *v9;
            unint64_t v16 = v9[1];
            unint64_t v18 = v15[1];
            *uint64_t v9 = *v15;
            v9[1] = v18;
            unint64_t *v15 = v17;
            v15[1] = v16;
            if ((a5 & 1) != 0) {
              goto LABEL_11;
            }
          }

          if (*(v9 - 2) >= *v9)
          {
            uint64_t v9 = std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,PrepassOp *,std::__less<void,void> &>( v9,  a2);
            goto LABEL_16;
          }

void std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PrepassOp *>( unint64_t *a1, unint64_t *a2)
{
  if (a1 != a2)
  {
    unint64_t v4 = a1 + 2;
    if (a1 + 2 != a2)
    {
      uint64_t v5 = 0LL;
      uint64_t v6 = a1;
      do
      {
        uint64_t v7 = v4;
        if (v6[2] < *v6)
        {
          unint64_t v8 = v6[3];
          unint64_t v15 = v6[2];
          unint64_t v16 = v8;
          v6[3] = 0LL;
          unint64_t v9 = *v6;
          uint64_t v10 = (const void *)v4[1];
          uint64_t v11 = v5;
          while (1)
          {
            uint64_t v12 = (char *)a1 + v11;
            *(unint64_t *)((char *)a1 + v11 + 16) = v9;
            if (v10) {
              _Block_release(v10);
            }
            *((void *)v12 + 3) = *((void *)v12 + 1);
            *((void *)v12 + ktrace_session_set_default_event_names_enabled(global_session, 1) = 0LL;
            if (!v11) {
              break;
            }
            uint64_t v10 = 0LL;
            unint64_t v9 = *(unint64_t *)((char *)a1 + v11 - 16);
            v11 -= 16LL;
            if (v15 >= v9)
            {
              unint64_t v13 = (unint64_t *)((char *)a1 + v11 + 16);
              goto LABEL_12;
            }
          }

          unint64_t v13 = a1;
LABEL_12:
          unint64_t v14 = v16;
          *unint64_t v13 = v15;
          v13[1] = v14;
          unint64_t v16 = 0LL;
          PrepassOp::~PrepassOp((PrepassOp *)&v15);
        }

        unint64_t v4 = v7 + 2;
        v5 += 16LL;
        uint64_t v6 = v7;
      }

      while (v7 + 2 != a2);
    }
  }

void sub_186BE804C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

unint64_t *std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PrepassOp *>( unint64_t *result, unint64_t *a2)
{
  if (result != a2)
  {
    uint64_t v3 = result + 2;
    if (result + 2 != a2)
    {
      unint64_t v4 = result + 3;
      do
      {
        uint64_t v5 = v3;
        if (result[2] < *result)
        {
          unint64_t v6 = result[3];
          unint64_t v11 = result[2];
          unint64_t v12 = v6;
          result[3] = 0LL;
          unint64_t v7 = *result;
          unint64_t v8 = (const void *)v5[1];
          unint64_t v9 = v4;
          do
          {
            *(v9 - ktrace_session_set_default_event_names_enabled(global_session, 1) = v7;
            if (v8) {
              _Block_release(v8);
            }
            unint64_t v8 = 0LL;
            *unint64_t v9 = *(v9 - 2);
            *(v9 - 2) = 0LL;
            unint64_t v7 = *(v9 - 5);
            v9 -= 2;
          }

          while (v11 < v7);
          unint64_t v10 = v12;
          *(v9 - ktrace_session_set_default_event_names_enabled(global_session, 1) = v11;
          *unint64_t v9 = v10;
          unint64_t v12 = 0LL;
          PrepassOp::~PrepassOp((PrepassOp *)&v11);
        }

        uint64_t v3 = v5 + 2;
        v4 += 2;
        __n128 result = v5;
      }

      while (v5 + 2 != a2);
    }
  }

  return result;
}

void sub_186BE812C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PrepassOp *>( unint64_t *a1, unint64_t *a2, unint64_t *a3)
{
  unint64_t v3 = *a2;
  unint64_t v4 = *a3;
  if (*a2 < *a1)
  {
    unint64_t v5 = a1[1];
    if (v4 < v3)
    {
      a1[1] = a3[1];
      a3[1] = v5;
      uint64_t v6 = 1LL;
LABEL_9:
      a2 = a3;
      goto LABEL_10;
    }

    a1[1] = a2[1];
    a2[1] = v5;
    unint64_t v10 = *a1;
    *a1 = *a2;
    *a2 = v10;
    if (*a3 < v10)
    {
      unint64_t v11 = a2[1];
      a2[1] = a3[1];
      a3[1] = v11;
      uint64_t v6 = 2LL;
      a1 = a2;
      goto LABEL_9;
    }

    return 1LL;
  }

  if (v4 >= v3) {
    return 0LL;
  }
  unint64_t v7 = a2[1];
  a2[1] = a3[1];
  a3[1] = v7;
  unint64_t v8 = *a2;
  *a2 = *a3;
  *a3 = v8;
  if (*a2 >= *a1) {
    return 1LL;
  }
  unint64_t v9 = a1[1];
  a1[1] = a2[1];
  a2[1] = v9;
  uint64_t v6 = 2LL;
LABEL_10:
  unint64_t v12 = *a1;
  *a1 = *a2;
  *a2 = v12;
  return v6;
}

unint64_t *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,PrepassOp *,std::__less<void,void> &>( unint64_t *a1, unint64_t *a2)
{
  unint64_t v4 = a1[1];
  unint64_t v16 = *a1;
  unint64_t v3 = v16;
  unint64_t v17 = v4;
  a1[1] = 0LL;
  if (v3 >= *(a2 - 2))
  {
    unint64_t v7 = a1 + 2;
    do
    {
      unint64_t v5 = v7;
      if (v7 >= a2) {
        break;
      }
      v7 += 2;
    }

    while (v3 >= *v5);
  }

  else
  {
    unint64_t v5 = a1;
    do
    {
      unint64_t v6 = v5[2];
      v5 += 2;
    }

    while (v3 >= v6);
  }

  if (v5 < a2)
  {
    do
    {
      unint64_t v8 = *(a2 - 2);
      a2 -= 2;
    }

    while (v3 < v8);
  }

  while (v5 < a2)
  {
    unint64_t v9 = v5[1];
    v5[1] = a2[1];
    a2[1] = v9;
    unint64_t v10 = *v5;
    unint64_t *v5 = *a2;
    *a2 = v10;
    unint64_t v3 = v16;
    do
    {
      unint64_t v11 = v5[2];
      v5 += 2;
    }

    while (v16 >= v11);
    do
    {
      unint64_t v12 = *(a2 - 2);
      a2 -= 2;
    }

    while (v16 < v12);
  }

  if (v5 - 2 == a1)
  {
    unint64_t v14 = (const void *)*(v5 - 1);
    *(v5 - 2) = v3;
    if (v14) {
      _Block_release(v14);
    }
  }

  else
  {
    *a1 = *(v5 - 2);
    unint64_t v13 = (const void *)a1[1];
    if (v13)
    {
      _Block_release(v13);
      unint64_t v3 = v16;
    }

    a1[1] = *(v5 - 1);
    *(v5 - 2) = v3;
    *(v5 - ktrace_session_set_default_event_names_enabled(global_session, 1) = 0LL;
  }

  *(v5 - ktrace_session_set_default_event_names_enabled(global_session, 1) = v17;
  unint64_t v17 = 0LL;
  PrepassOp::~PrepassOp((PrepassOp *)&v16);
  return v5;
}

void sub_186BE8358( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t *std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,PrepassOp *,std::__less<void,void> &>( unint64_t *a1, unint64_t *a2)
{
  uint64_t v4 = 0LL;
  unint64_t v5 = *a1;
  unint64_t v6 = a1[1];
  unint64_t v20 = *a1;
  unint64_t v21 = v6;
  a1[1] = 0LL;
  do
  {
    unint64_t v7 = a1[v4 + 2];
    v4 += 2LL;
  }

  while (v7 < v5);
  unint64_t v8 = &a1[v4];
  if (v4 == 2)
  {
    do
    {
      if (v8 >= a2) {
        break;
      }
      unint64_t v10 = *(a2 - 2);
      a2 -= 2;
    }

    while (v10 >= v5);
  }

  else
  {
    do
    {
      unint64_t v9 = *(a2 - 2);
      a2 -= 2;
    }

    while (v9 >= v5);
  }

  unint64_t v11 = (uint64_t *)&a1[v4];
  if (v8 < a2)
  {
    unint64_t v12 = (uint64_t *)a2;
    do
    {
      uint64_t v13 = v11[1];
      v11[1] = v12[1];
      v12[1] = v13;
      uint64_t v14 = *v11;
      *unint64_t v11 = *v12;
      *unint64_t v12 = v14;
      unint64_t v5 = v20;
      do
      {
        unint64_t v15 = v11[2];
        v11 += 2;
      }

      while (v15 < v20);
      do
      {
        unint64_t v16 = *(v12 - 2);
        v12 -= 2;
      }

      while (v16 >= v20);
    }

    while (v11 < v12);
  }

  if (v11 - 2 == (uint64_t *)a1)
  {
    unint64_t v18 = (const void *)*(v11 - 1);
    *(v11 - 2) = v5;
    if (v18) {
      _Block_release(v18);
    }
  }

  else
  {
    *a1 = *(v11 - 2);
    unint64_t v17 = (const void *)a1[1];
    if (v17)
    {
      _Block_release(v17);
      unint64_t v5 = v20;
    }

    a1[1] = *(v11 - 1);
    *(v11 - 2) = v5;
    *(v11 - ktrace_session_set_default_event_names_enabled(global_session, 1) = 0LL;
  }

  *(v11 - ktrace_session_set_default_event_names_enabled(global_session, 1) = v21;
  unint64_t v21 = 0LL;
  PrepassOp::~PrepassOp((PrepassOp *)&v20);
  return v11 - 2;
}

void sub_186BE84B4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PrepassOp *>( unint64_t *a1, unint64_t *a2)
{
  BOOL v4 = 1LL;
  switch(((char *)a2 - (char *)a1) >> 4)
  {
    case 0LL:
    case 1LL:
      return v4;
    case 2LL:
      if (*(a2 - 2) < *a1)
      {
        unint64_t v5 = a1[1];
        a1[1] = *(a2 - 1);
        *(a2 - ktrace_session_set_default_event_names_enabled(global_session, 1) = v5;
        unint64_t v6 = *a1;
        *a1 = *(a2 - 2);
        *(a2 - 2) = v6;
      }

      return v4;
    case 3LL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PrepassOp *>(a1, a1 + 2, a2 - 2);
      return v4;
    case 4LL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PrepassOp *>( a1,  a1 + 2,  a1 + 4,  a2 - 2);
      return v4;
    case 5LL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PrepassOp *>( a1,  a1 + 2,  a1 + 4,  a1 + 6,  a2 - 2);
      return v4;
    default:
      unint64_t v7 = a1 + 4;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PrepassOp *>(a1, a1 + 2, a1 + 4);
      unint64_t v8 = a1 + 6;
      if (a1 + 6 == a2) {
        return 1LL;
      }
      uint64_t v9 = 0LL;
      int v10 = 0;
      break;
  }

  while (*v8 >= *v7)
  {
LABEL_14:
    unint64_t v7 = v8;
    v9 += 16LL;
    v8 += 2;
    if (v8 == a2) {
      return 1LL;
    }
  }

  unint64_t v11 = v8[1];
  unint64_t v20 = *v8;
  unint64_t v21 = v11;
  v8[1] = 0LL;
  unint64_t v12 = *v7;
  uint64_t v13 = v9;
  while (1)
  {
    uint64_t v14 = (unint64_t *)((char *)a1 + v13);
    unint64_t v15 = v20;
    uint64_t v16 = *(unint64_t *)((char *)a1 + v13 + 40);
    void v14[6] = v12;
    void v14[7] = v16;
    _OWORD v14[5] = 0LL;
    if (v13 == -32) {
      break;
    }
    unint64_t v12 = v14[2];
    v13 -= 16LL;
    if (v15 >= v12)
    {
      unint64_t v17 = (unint64_t *)((char *)a1 + v13 + 48);
      goto LABEL_12;
    }
  }

  unint64_t v17 = a1;
LABEL_12:
  unint64_t v18 = v21;
  *unint64_t v17 = v15;
  v17[1] = v18;
  unint64_t v21 = 0LL;
  if (++v10 != 8)
  {
    PrepassOp::~PrepassOp((PrepassOp *)&v20);
    goto LABEL_14;
  }

  BOOL v4 = v8 + 2 == a2;
  PrepassOp::~PrepassOp((PrepassOp *)&v20);
  return v4;
}

uint64_t std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PrepassOp *>( unint64_t *a1, unint64_t *a2, unint64_t *a3, unint64_t *a4)
{
  uint64_t result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PrepassOp *>(a1, a2, a3);
  if (*a4 < *a3)
  {
    unint64_t v9 = a3[1];
    a3[1] = a4[1];
    a4[1] = v9;
    unint64_t v10 = *a3;
    *a3 = *a4;
    *a4 = v10;
    if (*a3 < *a2)
    {
      unint64_t v11 = a2[1];
      a2[1] = a3[1];
      a3[1] = v11;
      unint64_t v12 = *a2;
      *a2 = *a3;
      *a3 = v12;
      if (*a2 < *a1)
      {
        unint64_t v13 = a1[1];
        a1[1] = a2[1];
        a2[1] = v13;
        unint64_t v14 = *a1;
        *a1 = *a2;
        *a2 = v14;
      }
    }
  }

  return result;
}

uint64_t std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PrepassOp *>( unint64_t *a1, unint64_t *a2, unint64_t *a3, unint64_t *a4, unint64_t *a5)
{
  uint64_t result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PrepassOp *>(a1, a2, a3, a4);
  if (*a5 < *a4)
  {
    unint64_t v11 = a4[1];
    a4[1] = a5[1];
    a5[1] = v11;
    unint64_t v12 = *a4;
    *a4 = *a5;
    *a5 = v12;
    if (*a4 < *a3)
    {
      unint64_t v13 = a3[1];
      a3[1] = a4[1];
      a4[1] = v13;
      unint64_t v14 = *a3;
      *a3 = *a4;
      *a4 = v14;
      if (*a3 < *a2)
      {
        unint64_t v15 = a2[1];
        a2[1] = a3[1];
        a3[1] = v15;
        unint64_t v16 = *a2;
        *a2 = *a3;
        *a3 = v16;
        if (*a2 < *a1)
        {
          unint64_t v17 = a1[1];
          a1[1] = a2[1];
          a2[1] = v17;
          unint64_t v18 = *a1;
          *a1 = *a2;
          *a2 = v18;
        }
      }
    }
  }

  return result;
}

unint64_t *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PrepassOp *,PrepassOp *>( unint64_t *a1, unint64_t *a2, unint64_t *a3, uint64_t a4)
{
  if (a1 != a2)
  {
    uint64_t v6 = (uint64_t)a2;
    uint64_t v8 = (char *)a2 - (char *)a1;
    uint64_t v9 = ((char *)a2 - (char *)a1) >> 4;
    if ((char *)a2 - (char *)a1 >= 17)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      unint64_t v12 = &a1[2 * v10];
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PrepassOp *>( (uint64_t)a1,  a4,  v9,  v12);
        v12 -= 2;
        --v11;
      }

      while (v11);
    }

    uint64_t v13 = v6;
    if ((unint64_t *)v6 != a3)
    {
      unint64_t v14 = (unint64_t *)v6;
      do
      {
        if (*v14 < *a1)
        {
          unint64_t v15 = v14[1];
          v14[1] = a1[1];
          a1[1] = v15;
          unint64_t v16 = *v14;
          unint64_t *v14 = *a1;
          *a1 = v16;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PrepassOp *>( (uint64_t)a1,  a4,  v9,  a1);
        }

        v14 += 2;
      }

      while (v14 != a3);
      uint64_t v13 = (uint64_t)a3;
    }

    if (v8 >= 17)
    {
      unint64_t v17 = (unint64_t)v8 >> 4;
      do
      {
        std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void>,PrepassOp *>(a1, v6, a4, v17);
        v6 -= 16LL;
      }

      while (v17-- > 2);
    }

    return (unint64_t *)v13;
  }

  return a3;
}

void std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PrepassOp *>( uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4)
{
  if (a3 >= 2)
  {
    uint64_t v6 = (uint64_t)a4 - a1;
    int64_t v7 = (unint64_t)(a3 - 2) >> 1;
    if (v7 >= ((uint64_t)a4 - a1) >> 4)
    {
      uint64_t v21 = v4;
      uint64_t v22 = v5;
      uint64_t v8 = v6 >> 3;
      uint64_t v9 = (v6 >> 3) + 1;
      unint64_t v10 = (unint64_t *)(a1 + 16 * v9);
      uint64_t v11 = v8 + 2;
      if (v8 + 2 >= a3)
      {
        unint64_t v12 = *v10;
      }

      else
      {
        unint64_t v12 = *v10;
        unint64_t v13 = v10[2];
        if (*v10 <= v13) {
          unint64_t v12 = v10[2];
        }
        if (*v10 < v13)
        {
          v10 += 2;
          uint64_t v9 = v11;
        }
      }

      if (v12 >= *a4)
      {
        unint64_t v14 = a4[1];
        unint64_t v19 = *a4;
        unint64_t v20 = v14;
        a4[1] = 0LL;
        while (1)
        {
          unint64_t v15 = v10;
          *a4 = v12;
          a4[1] = v10[1];
          v10[1] = 0LL;
          if (v7 < v9) {
            break;
          }
          uint64_t v16 = (2 * v9) | 1;
          unint64_t v10 = (unint64_t *)(a1 + 16 * v16);
          uint64_t v9 = 2 * v9 + 2;
          if (v9 >= a3)
          {
            unint64_t v12 = *v10;
            uint64_t v9 = v16;
          }

          else
          {
            unint64_t v12 = *v10;
            unint64_t v17 = v10[2];
            if (*v10 <= v17) {
              unint64_t v12 = v10[2];
            }
            if (*v10 >= v17) {
              uint64_t v9 = v16;
            }
            else {
              v10 += 2;
            }
          }

          unint64_t v18 = v19;
          a4 = v15;
          if (v12 < v19) {
            goto LABEL_23;
          }
        }

        unint64_t v18 = v19;
LABEL_23:
        unint64_t *v15 = v18;
        v15[1] = v20;
        unint64_t v20 = 0LL;
        PrepassOp::~PrepassOp((PrepassOp *)&v19);
      }
    }
  }

void std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void>,PrepassOp *>( unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4 >= 2)
  {
    unint64_t v7 = a1[1];
    unint64_t v13 = *a1;
    unint64_t v14 = v7;
    a1[1] = 0LL;
    uint64_t v8 = std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PrepassOp *>(a1, a3, a4);
    uint64_t v9 = v8;
    if (v8 == (unint64_t *)(a2 - 16))
    {
      *uint64_t v8 = v13;
      unint64_t v12 = (const void *)v8[1];
      if (v12) {
        _Block_release(v12);
      }
      v9[1] = v14;
      unint64_t v14 = 0LL;
    }

    else
    {
      *uint64_t v8 = *(void *)(a2 - 16);
      unint64_t v10 = (const void *)v8[1];
      if (v10) {
        _Block_release(v10);
      }
      v9[1] = *(void *)(a2 - 8);
      unint64_t v11 = v14;
      *(void *)(a2 - 16) = v13;
      *(void *)(a2 - _Block_object_dispose(va, 8) = v11;
      unint64_t v14 = 0LL;
      std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PrepassOp *>( (uint64_t)a1,  (uint64_t)(v9 + 2),  a3,  ((char *)(v9 + 2) - (char *)a1) >> 4);
    }

    PrepassOp::~PrepassOp((PrepassOp *)&v13);
  }

void sub_186BE8B70( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

unint64_t *std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PrepassOp *>( unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = 0LL;
  uint64_t v6 = a3 - 2;
  if (a3 < 2) {
    uint64_t v6 = a3 - 1;
  }
  uint64_t v7 = v6 >> 1;
  do
  {
    uint64_t v8 = &a1[2 * v5 + 2];
    if (2 * v5 + 2 >= a3)
    {
      unint64_t v9 = *v8;
      uint64_t v5 = (2 * v5) | 1;
    }

    else
    {
      unint64_t v9 = *v8;
      unint64_t v10 = a1[2 * v5 + 4];
      if (*v8 <= v10) {
        unint64_t v9 = a1[2 * v5 + 4];
      }
      if (*v8 >= v10)
      {
        uint64_t v5 = (2 * v5) | 1;
      }

      else
      {
        uint64_t v8 = &a1[2 * v5 + 4];
        uint64_t v5 = 2 * v5 + 2;
      }
    }

    *a1 = v9;
    unint64_t v11 = (const void *)a1[1];
    if (v11) {
      _Block_release(v11);
    }
    a1[1] = v8[1];
    v8[1] = 0LL;
    a1 = v8;
  }

  while (v5 <= v7);
  return v8;
}

void std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PrepassOp *>( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4 >= 2)
  {
    uint64_t v16 = v4;
    uint64_t v17 = v5;
    unint64_t v6 = (unint64_t)(a4 - 2) >> 1;
    uint64_t v7 = (unint64_t *)(a1 + 16 * v6);
    uint64_t v8 = (unint64_t *)(a2 - 16);
    unint64_t v9 = *v7;
    if (*v7 < *(void *)(a2 - 16))
    {
      unint64_t v10 = *(void *)(a2 - 8);
      unint64_t v14 = *(void *)(a2 - 16);
      unint64_t v15 = v10;
      *(void *)(a2 - _Block_object_dispose(va, 8) = 0LL;
      do
      {
        unint64_t v11 = v7;
        *uint64_t v8 = v9;
        unint64_t v12 = v14;
        v8[1] = v7[1];
        v7[1] = 0LL;
        if (!v6) {
          break;
        }
        unint64_t v6 = (v6 - 1) >> 1;
        uint64_t v7 = (unint64_t *)(a1 + 16 * v6);
        unint64_t v9 = *v7;
        uint64_t v8 = v11;
      }

      while (*v7 < v12);
      unint64_t v13 = v15;
      *unint64_t v11 = v12;
      v11[1] = v13;
      unint64_t v15 = 0LL;
      PrepassOp::~PrepassOp((PrepassOp *)&v14);
    }
  }

void std::vector<PrepassOp>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v4 = (char *)v1[1];
    uint64_t v5 = v2;
    if (v4 != v2)
    {
      do
        PrepassOp::~PrepassOp((PrepassOp *)(v4 - 16));
      while (v4 != v2);
      uint64_t v5 = **a1;
    }

    v1[1] = v2;
    operator delete(v5);
  }

void OUTLINED_FUNCTION_0_2( void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

void OUTLINED_FUNCTION_1_1(void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
}

void OUTLINED_FUNCTION_5_4( void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

void OUTLINED_FUNCTION_6_0(void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
}

void OUTLINED_FUNCTION_8_0( void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

  ;
}

void OUTLINED_FUNCTION_11_0( void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

void OUTLINED_FUNCTION_13_0(void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
}

void OUTLINED_FUNCTION_14_0(void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
}

UInt8 *OUTLINED_FUNCTION_16_0(uint64_t a1, unsigned __int8 *uu)
{
  return describe2(a1, uu);
}

void OUTLINED_FUNCTION_17(void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
}

void OUTLINED_FUNCTION_19_0(void *a1@<X0>, const char *a2@<X3>, uint8_t *a3@<X4>, os_log_s *a4@<X8>)
{
}

uint64_t OUTLINED_FUNCTION_21(uint64_t result, uint64_t a2, uint64_t a3, float a4)
{
  *(float *)a3 = a4;
  *(void *)(a3 + 4) = result;
  *(_WORD *)(a3 + 12) = 2080;
  *(void *)(a3 + 14) = a2;
  return result;
}

UInt8 *OUTLINED_FUNCTION_22(uint64_t *a1, unsigned __int8 **a2)
{
  return describe2(*a1, *a2);
}

void OUTLINED_FUNCTION_23(void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
}

  ;
}

char *OUTLINED_FUNCTION_25(int *a1)
{
  return strerror(*a1);
}

uint64_t trace_set_enable(int a1)
{
  uint64_t v7 = *MEMORY[0x1895F89C0];
  *(void *)uint64_t v4 = 0x1800000001LL;
  int v5 = 3;
  int v6 = a1;
  if ((sysctl(v4, 4u, 0LL, 0LL, 0LL, 0LL) & 0x80000000) == 0) {
    return 0LL;
  }
  int v2 = *__error();
  ktrace_log_init();
  if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
    trace_set_enable_cold_1();
  }
  *__error() = v2;
  unsigned int v3 = *__error();
  if (v3 <= 1) {
    return 1LL;
  }
  else {
    return v3;
  }
}

uint64_t trace_get_bufinfo(void *a1)
{
  uint64_t v7 = *MEMORY[0x1895F89C0];
  int v6 = 5;
  *(void *)int v5 = 0x1800000001LL;
  size_t v4 = 20LL;
  if ((sysctl(v5, 3u, a1, &v4, 0LL, 0LL) & 0x80000000) == 0) {
    return 0LL;
  }
  int v2 = *__error();
  ktrace_log_init();
  if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
    trace_get_bufinfo_cold_1();
  }
  *__error() = v2;
  unsigned int v3 = *__error();
  if (v3 <= 1) {
    return 1LL;
  }
  else {
    return v3;
  }
}

uint64_t trace_readtrace(void *a1, size_t *a2)
{
  uint64_t v8 = *MEMORY[0x1895F89C0];
  int v7 = 10;
  *(void *)int v6 = 0x1800000001LL;
  if (sysctl(v6, 3u, a1, a2, 0LL, 0LL) < 0)
  {
    int v4 = *__error();
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
      trace_readtrace_cold_1();
    }
    *__error() = v4;
    unsigned int v5 = *__error();
    if (v5 <= 1) {
      return 1LL;
    }
    else {
      return v5;
    }
  }

  else
  {
    uint64_t result = 0LL;
    *a2 <<= 6;
  }

  return result;
}

uint64_t trace_set_filter(void *a1)
{
  uint64_t v7 = *MEMORY[0x1895F89C0];
  int v6 = 22;
  *(void *)unsigned int v5 = 0x1800000001LL;
  size_t v4 = 0x2000LL;
  if ((sysctl(v5, 3u, a1, &v4, 0LL, 0LL) & 0x80000000) == 0) {
    return 0LL;
  }
  int v2 = *__error();
  ktrace_log_init();
  if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
    trace_set_filter_cold_1();
  }
  *__error() = v2;
  unsigned int v3 = *__error();
  if (v3 <= 1) {
    return 1LL;
  }
  else {
    return v3;
  }
}

uint64_t trace_parse_filter(const char *a1, void *a2)
{
  if (!strcmp(a1, "ALL"))
  {
    memset(a2, 255, 0x2000uLL);
    return 0LL;
  }

  bzero(a2, 0x2000uLL);
  size_t v4 = strdup(a1);
  if (!v4) {
    return 12LL;
  }
  unsigned int v5 = v4;
  __stringp = v4;
  uint64_t v6 = (uint64_t)strsep(&__stringp, ",");
  if (!v6) {
    goto LABEL_37;
  }
  while (1)
  {
    unint64_t v13 = (char *)v6;
    int v7 = *(char *)v6;
    if (v7 != 67)
    {
      if (v7 != 83)
      {
        if (*(_BYTE *)v6)
        {
          *__error() = 22;
          int v11 = *__error();
          ktrace_log_init();
          if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
            trace_parse_filter_cold_1();
          }
        }

        else
        {
          *__error() = 22;
          int v11 = *__error();
          ktrace_log_init();
          if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
            trace_parse_filter_cold_8();
          }
        }

        goto LABEL_36;
      }

      unint64_t v8 = strtoul((const char *)(v6 + 1), &v13, 16);
      if ((char *)(v6 + 1) == v13)
      {
        *__error() = 22;
        int v11 = *__error();
        ktrace_log_init();
        if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
          trace_parse_filter_cold_5();
        }
        goto LABEL_36;
      }

      if (*v13)
      {
        *__error() = 22;
        int v11 = *__error();
        ktrace_log_init();
        if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
          trace_parse_filter_cold_7();
        }
        goto LABEL_36;
      }

      if (v8 >= 0x10000)
      {
        *__error() = 34;
        int v11 = *__error();
        ktrace_log_init();
        if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
          trace_parse_filter_cold_6();
        }
        goto LABEL_36;
      }

      *((_BYTE *)a2 + (v8 >> 3)) |= 1 << (v8 & 7);
      goto LABEL_15;
    }

    unint64_t v9 = strtoul((const char *)(v6 + 1), &v13, 0);
    if (*v13)
    {
      *__error() = 22;
      int v11 = *__error();
      ktrace_log_init();
      if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
        trace_parse_filter_cold_4();
      }
      goto LABEL_36;
    }

    if (v9 > 0xFF)
    {
      *__error() = 34;
      int v11 = *__error();
      ktrace_log_init();
      if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
        trace_parse_filter_cold_3();
      }
      goto LABEL_36;
    }

    for (int i = 0; i != 256; ++i)
      *((_BYTE *)a2 + ((unint64_t)(i & 0xF8 | (v9 << 8)) >> 3)) |= 1 << (i & 7);
LABEL_15:
    uint64_t v6 = (uint64_t)strsep(&__stringp, ",");
    if (!v6) {
      goto LABEL_37;
    }
  }

  *__error() = 22;
  int v11 = *__error();
  ktrace_log_init();
  if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
    trace_parse_filter_cold_2();
  }
LABEL_36:
  *__error() = v11;
  uint64_t v6 = 1LL;
LABEL_37:
  free(v5);
  return v6;
}

uint64_t trace_set_pid_filter(int a1, int a2)
{
  uint64_t v13 = *MEMORY[0x1895F89C0];
  *(void *)int v11 = 0x1800000001LL;
  if (a1) {
    int v2 = 11;
  }
  else {
    int v2 = 14;
  }
  int v12 = v2;
  v8[0] = 0x80000;
  v8[1] = a2;
  uint64_t v9 = 1LL;
  int v10 = 0;
  size_t v7 = 20LL;
  int v3 = sysctl(v11, 3u, v8, &v7, 0LL, 0LL);
  uint64_t result = 0LL;
  if (v3 < 0)
  {
    int v5 = *__error();
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
      trace_set_pid_filter_cold_1();
    }
    *__error() = v5;
    unsigned int v6 = *__error();
    if (v6 <= 1) {
      return 1LL;
    }
    else {
      return v6;
    }
  }

  return result;
}

uint64_t trace_readcpumap(void *a1)
{
  if (trace_readcpumap_onceToken[0] != -1) {
    dispatch_once(trace_readcpumap_onceToken, &__block_literal_global_10);
  }
  uint64_t v2 = trace_readcpumap_cpumap_header;
  if (!trace_readcpumap_cpumap_header) {
    return 0LL;
  }
  *a1 = trace_readcpumap_cpumap_header + 8;
  return *(unsigned int *)(v2 + 4);
}

void __trace_readcpumap_block_invoke()
{
  uint64_t v3 = *MEMORY[0x1895F89C0];
  trace_readcpumap_cpumap_header = (uint64_t)malloc(0x1000uLL);
  int v2 = 24;
  size_t v0 = 4096LL;
  *(void *)uint64_t v1 = 0x1800000001LL;
  if (sysctl(v1, 3u, (void *)trace_readcpumap_cpumap_header, &v0, 0LL, 0LL)
    || v0 > 0x1000
    || *(_DWORD *)trace_readcpumap_cpumap_header != 1437204737)
  {
    free((void *)trace_readcpumap_cpumap_header);
    trace_readcpumap_cpumap_header = 0LL;
  }

uint64_t trace_initialize(int a1)
{
  return trace_initialize_bufs(a1 << 14);
}

uint64_t trace_initialize_bufs(int a1)
{
  uint64_t v8 = *MEMORY[0x1895F89C0];
  uint64_t result = trace_remove_internal();
  if (!(_DWORD)result)
  {
    *(void *)int v5 = 0x1800000001LL;
    int v6 = 4;
    int v7 = a1;
    if (sysctl(v5, 4u, 0LL, 0LL, 0LL, 0LL) < 0)
    {
      int v3 = *__error();
      ktrace_log_init();
      if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
        trace_initialize_bufs_cold_1();
      }
    }

    else
    {
      int v6 = 6;
      if ((sysctl(v5, 3u, 0LL, 0LL, 0LL, 0LL) & 0x80000000) == 0) {
        return 0LL;
      }
      int v3 = *__error();
      ktrace_log_init();
      if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
        trace_initialize_bufs_cold_2();
      }
    }

    *__error() = v3;
    unsigned int v4 = *__error();
    if (v4 <= 1) {
      return 1LL;
    }
    else {
      return v4;
    }
  }

  return result;
}

uint64_t trace_remove_internal()
{
  uint64_t v4 = *MEMORY[0x1895F89C0];
  __int128 v2 = xmmword_186C5D3C8;
  uint64_t v3 = 0LL;
  unsigned int v1 = *__error();
  if (v1 <= 1) {
    return 1LL;
  }
  else {
    return v1;
  }
}

uint64_t trace_set_flags(int a1)
{
  uint64_t v8 = *MEMORY[0x1895F89C0];
  *(void *)int v5 = 0x1800000001LL;
  int v6 = 1;
  int v7 = a1;
  size_t v4 = 0LL;
  if ((sysctl(v5, 4u, 0LL, &v4, 0LL, 0LL) & 0x80000000) == 0) {
    return 0LL;
  }
  int v2 = *__error();
  ktrace_log_init();
  if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
    trace_set_flags_cold_1();
  }
  *__error() = v2;
  unsigned int v3 = *__error();
  if (v3 <= 1) {
    return 1LL;
  }
  else {
    return v3;
  }
}

uint64_t trace_set_event_match_disable(uint64_t a1, uint64_t a2)
{
  uint64_t v14 = *MEMORY[0x1895F89C0];
  memset(v10, 0, 32);
  *(_OWORD *)&v10[8] = *(_OWORD *)(a1 + 8);
  __int128 v2 = *(_OWORD *)(a1 + 24);
  __int128 v3 = *(_OWORD *)(a2 + 8);
  uint64_t v11 = 0LL;
  __int128 v12 = v3;
  *(_OWORD *)&v10[24] = v2;
  *(_DWORD *)int v10 = *(_DWORD *)a1;
  LODWORD(v1ktrace_session_set_default_event_names_enabled(global_session, 1) = *(_DWORD *)a2;
  __int128 v13 = *(_OWORD *)(a2 + 24);
  size_t v7 = 80LL;
  *(void *)uint64_t v8 = 0x1800000001LL;
  int v9 = 26;
  uint64_t result = sysctl(v8, 3u, v10, &v7, 0LL, 0LL);
  if ((_DWORD)result)
  {
    int v5 = *__error();
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
      trace_set_event_match_disable_cold_1();
    }
    *__error() = v5;
    unsigned int v6 = *__error();
    if (v6 <= 1) {
      return 1LL;
    }
    else {
      return v6;
    }
  }

  return result;
}

uint64_t trace_wait(size_t a1)
{
  uint64_t v5 = *MEMORY[0x1895F89C0];
  int v4 = 23;
  size_t v2 = a1;
  *(void *)__int128 v3 = 0x1800000001LL;
  return sysctl(v3, 3u, 0LL, &v2, 0LL, 0LL);
}

uint64_t trace_free(void *a1)
{
  if (pthread_mutex_lock(&trace_buffer_mutex)) {
    ktrace_remotetime_update_params_cold_1();
  }
  uint64_t v2 = 0LL;
  while (trace_buffer_cache[v2])
  {
    if (++v2 == 16) {
      ktrace_remotetime_update_params_cold_1();
    }
  }

  trace_buffer_cache[v2] = (uint64_t)a1;
  if (v2 * 8)
  {
    madvise(a1, trace_buffer_size, 7);
  }

  else if (pthread_cond_signal(&trace_buffer_cond))
  {
    ktrace_remotetime_update_params_cold_1();
  }

  uint64_t result = pthread_mutex_unlock(&trace_buffer_mutex);
  if ((_DWORD)result) {
    ktrace_remotetime_update_params_cold_1();
  }
  return result;
}

uint64_t trace_collect(void *a1, size_t *a2, _DWORD *a3)
{
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  if (!a2) {
    ktrace_remotetime_update_params_cold_1();
  }
  if (!a3) {
    ktrace_remotetime_update_params_cold_1();
  }
  uint64_t result = trace_get_bufinfo(&v15);
  if ((_DWORD)result) {
    return result;
  }
  uint64_t result = 55LL;
  if ((v16 & 0x80000000) == 0) {
    return result;
  }
  int v7 = v15;
  if (!v15) {
    return result;
  }
  *a3 = v16;
  unint64_t v8 = (uint64_t)v7 << 6;
  if (trace_buffer_size)
  {
    if (v8 > trace_buffer_size) {
      return 37LL;
    }
  }

  else
  {
    trace_buffer_std::string::size_type size = (uint64_t)v7 << 6;
  }

  *a2 = v8;
  if (pthread_mutex_lock(&trace_buffer_mutex)) {
    ktrace_remotetime_update_params_cold_1();
  }
  uint64_t v9 = 0LL;
  while (1)
  {
    while (!trace_buffer_cache[v9])
    {
      if (++v9 == 16) {
        goto LABEL_18;
      }
    }

    if ((_DWORD)v9 != 16) {
      break;
    }
LABEL_18:
    int v10 = trace_buffer_count;
    if (trace_buffer_count == 16)
    {
      int v11 = pthread_cond_wait(&trace_buffer_cond, &trace_buffer_mutex);
      uint64_t v9 = 0LL;
      if (v11) {
        ktrace_remotetime_update_params_cold_1();
      }
    }

    else
    {
      trace_buffer_cache[0] = (uint64_t)malloc(trace_buffer_size);
      if (trace_buffer_cache[0])
      {
        uint64_t v13 = 0LL;
        trace_buffer_count = v10 + 1;
        goto LABEL_28;
      }

      int v12 = pthread_cond_wait(&trace_buffer_cond, &trace_buffer_mutex);
      uint64_t v9 = 0LL;
      if (v12) {
        ktrace_remotetime_update_params_cold_1();
      }
    }
  }

  if ((_DWORD)v9)
  {
    uint64_t v13 = v9;
    madvise((void *)trace_buffer_cache[v9], trace_buffer_size, 8);
  }

  else
  {
    uint64_t v13 = 0LL;
  }

BOOL trace_enumerate(uint64_t a1, unint64_t a2, int a3, uint64_t a4)
{
  if (a3) {
    char v4 = 6;
  }
  else {
    char v4 = 5;
  }
  unint64_t v5 = a2 >> v4;
  if (a2 >> v4)
  {
    unint64_t v8 = 0LL;
    while (!(*(unsigned int (**)(uint64_t, unint64_t))(a4 + 16))(a4, a1 + (v8 << v4)))
    {
      if (v5 == ++v8)
      {
        unint64_t v8 = v5;
        return v8 == v5;
      }
    }
  }

  else
  {
    unint64_t v8 = 0LL;
  }

  return v8 == v5;
}

uint64_t trace_last_trace_point(uint64_t a1, unint64_t a2, int a3)
{
  unint64_t v3 = 32LL;
  if (a3) {
    unint64_t v3 = 64LL;
  }
  char v4 = 5;
  if (a3) {
    char v4 = 6;
  }
  uint64_t v5 = a1 + (((a2 >> v4) - 1) << v4);
  if (v3 <= a2) {
    return v5;
  }
  else {
    return 0LL;
  }
}

void trace_readcurthreadmap(void **a1, _DWORD *a2)
{
  uint64_t v10 = *MEMORY[0x1895F89C0];
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  if (!a2) {
    ktrace_remotetime_update_params_cold_1();
  }
  size_t v7 = 263168LL;
  char v4 = malloc(0x40400uLL);
  *a1 = v4;
  if (!v4) {
    ktrace_remotetime_update_params_cold_1();
  }
  *(void *)unint64_t v8 = 0x1800000001LL;
  int v9 = 21;
  if (sysctl(v8, 3u, v4, &v7, 0LL, 0LL) < 0)
  {
    int v6 = *__error();
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
      trace_readcurthreadmap_cold_4();
    }
    *__error() = v6;
    free(*a1);
    LODWORD(v5) = 0;
    *a1 = 0LL;
  }

  else
  {
    unint64_t v5 = (unint64_t)(int)v7 >> 5;
  }

  *a2 = v5;
}

int *vfs_trace_paths()
{
  uint64_t result = (int *)sysctlbyname("vfs.generic.trace_paths", 0LL, 0LL, 0LL, 0LL);
  if ((_DWORD)result)
  {
    int v1 = *__error();
    ktrace_log_init();
    if (os_log_type_enabled((os_log_t)ktrace_log, OS_LOG_TYPE_ERROR)) {
      vfs_trace_paths_cold_1();
    }
    uint64_t result = __error();
    int *result = v1;
  }

  return result;
}

void vnode_path_map_update(CFDictionaryRef *a1, int a2, uint64_t a3, int a4)
{
  if ((a2 & 0xFFFFFFFC) == 0x3010094)
  {
    if (a4)
    {
      int v12 = *(const void **)(a3 + 8);
      uint64_t v13 = *(const void **)(a3 + 16);
    }

    else
    {
      int v12 = (const void *)*(unsigned int *)(a3 + 8);
      uint64_t v13 = (const void *)*(unsigned int *)(a3 + 12);
    }

    int Value = (const char *)CFDictionaryGetValue(a1[1], v12);
    unint64_t v18 = a1[1];
    if (!Value)
    {
      CFDictionaryRemoveValue(v18, v13);
      return;
    }

    unint64_t v19 = strdup(Value);
    unint64_t v20 = v18;
    uint64_t v21 = v13;
LABEL_25:
    CFDictionarySetValue(v20, v21, v19);
    return;
  }

  if ((a2 & 0xFFFFFFFC) != 0x3010090) {
    abort();
  }
  if (a4)
  {
    unint64_t v5 = (char *)(a3 + 8);
    uint64_t v6 = *(void *)(a3 + 8);
    size_t v7 = *(const void **)(a3 + 40);
    unint64_t v8 = (char *)(a3 + 16);
    unint64_t v9 = a3 + 32;
    uint64_t v10 = (int *)(a3 + 48);
    size_t v11 = 8LL;
  }

  else
  {
    unint64_t v5 = (char *)(a3 + 8);
    uint64_t v6 = *(unsigned int *)(a3 + 8);
    size_t v7 = (const void *)*(unsigned int *)(a3 + 24);
    unint64_t v8 = (char *)(a3 + 12);
    unint64_t v9 = a3 + 20;
    uint64_t v10 = (int *)(a3 + 28);
    size_t v11 = 4LL;
  }

  int v14 = *v10;
  int v15 = (char *)CFDictionaryGetValue(*a1, v7);
  int v16 = v15;
  if ((v14 & 1) != 0)
  {
    if (v15) {
      free(v15);
    }
    uint64_t v22 = (char *)calloc(1uLL, 0x410uLL);
    if (!v22) {
      ktrace_remotetime_update_params_cold_1();
    }
    int v16 = v22;
    CFDictionarySetValue(*a1, v7, v22);
    *((void *)v16 + 129) = v6;
    unint64_t v5 = v8;
  }

  else if (!v15)
  {
    return;
  }

  if ((unint64_t)v5 <= v9)
  {
    size_t v23 = strlen(v16);
    unint64_t v24 = v11 - v23 + 1024;
    do
    {
      if (v23 + 1 >= 0x402) {
        ktrace_remotetime_update_params_cold_1();
      }
      v24 -= v11;
      if (v24 < v11) {
        break;
      }
      memcpy(&v16[v23], v5, v11);
      v23 += v11;
      v5 += 8;
    }

    while ((unint64_t)v5 <= v9);
  }

  if ((v14 & 2) != 0)
  {
    CFDictionaryRemoveValue(*a1, v7);
    unint64_t v20 = a1[1];
    uint64_t v21 = (const void *)*((void *)v16 + 129);
    unint64_t v19 = v16;
    goto LABEL_25;
  }

void vnode_path_map_destroy(CFDictionaryRef *a1)
{
  if (a1)
  {
    uint64_t v2 = *a1;
    if (v2)
    {
      CFIndex Count = CFDictionaryGetCount(v2);
      if (Count)
      {
        uint64_t v4 = Count;
        unint64_t v5 = (const void **)malloc(8 * Count);
        CFDictionaryGetKeysAndValues(*a1, 0LL, v5);
        if (v4 >= 1)
        {
          uint64_t v6 = (void **)v5;
          do
          {
            size_t v7 = *v6++;
            free(v7);
            --v4;
          }

          while (v4);
        }

        free(v5);
      }

      CFRelease(*a1);
    }

    CFDictionaryRef v8 = a1[1];
    if (v8) {
      CFRelease(v8);
    }
    free(a1);
  }

CFMutableDictionaryRef ktrace_set_vnode_paths_enabled(CFMutableDictionaryRef result, int a2)
{
  if (!result) {
    ktrace_remotetime_update_params_cold_1();
  }
  CFMutableDictionaryRef v2 = result;
  if ((*((_WORD *)result + 112) & 3) != 0) {
    ktrace_set_thread_cputime_enabled_cold_4();
  }
  if (*((_DWORD *)result + 67)) {
    BOOL v3 = 1;
  }
  else {
    BOOL v3 = a2 == 0;
  }
  if (!v3)
  {
    *((_DWORD *)result + 67) = 1;
    uint64_t v4 = calloc(1uLL, 0x10uLL);
    *((void *)v2 + 50) = v4;
    void *v4 = CFDictionaryCreateMutable(0LL, 0LL, &int_key_callbacks, 0LL);
    uint64_t result = CFDictionaryCreateMutable(0LL, 0LL, &int_key_callbacks, &str_value_callbacks);
    v4[1] = result;
    if (!*v4 || !result) {
      ktrace_remotetime_update_params_cold_1();
    }
  }

  return result;
}

uint64_t ktrace_get_vnode_paths_enabled(uint64_t a1)
{
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  return *(unsigned int *)(a1 + 268);
}

const void *ktrace_get_path_for_vp(uint64_t a1, const void *a2)
{
  if (!a1) {
    ktrace_remotetime_update_params_cold_1();
  }
  if (*(_DWORD *)(a1 + 268)) {
    return CFDictionaryGetValue(*(CFDictionaryRef *)(*(void *)(a1 + 400) + 8LL), a2);
  }
  else {
    return 0LL;
  }
}

BOOL sub_186BEA45C(char *a1, char *a2)
{
  return byte_186C5E4B6[*a1] == byte_186C5E4B6[*a2];
}

uint64_t sub_186BEA480()
{
  return sub_186C5B5D8();
}

uint64_t sub_186BEA4CC()
{
  return sub_186C5B5B4();
}

uint64_t sub_186BEA500()
{
  return sub_186C5B5D8();
}

uint64_t sub_186BEA548@<X0>(unsigned __int8 *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result = sub_186BEC6A8(*a1);
  *a2 = result;
  return result;
}

void sub_186BEA570(_BYTE *a1@<X8>)
{
  *a1 = byte_186C5E4B6[*v1];
}

uint64_t sub_186BEA58C(unsigned __int8 *a1)
{
  return ((uint64_t (*)())((char *)sub_186BEA5B0 + 4 * word_186C5D3EC[*a1]))();
}

uint64_t sub_186BEA5B0()
{
  return ((uint64_t (*)(void))((char *)sub_186BEAA70 + 4 * word_186C5D518[v0]))();
}

BOOL sub_186BEAA70@<W0>(int a1@<W8>)
{
  return a1 == 259;
}

void sub_186BEAF20()
{
  uint64_t v1 = *v0;
  sub_186C5B59C();
  __asm { BR              X9 }

uint64_t sub_186BEAF5C()
{
  return sub_186C5B5D8();
}

void sub_186BEB420()
{
  __asm { BR              X11 }

uint64_t sub_186BEB450()
{
  return sub_186C5B5C0();
}

void sub_186BEB908()
{
  uint64_t v1 = *v0;
  sub_186C5B59C();
  __asm { BR              X9 }

uint64_t sub_186BEB940()
{
  return sub_186C5B5D8();
}

uint64_t sub_186BEBE04@<X0>(unsigned __int16 *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result = sub_186BEC84C(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_186BEBE2C()
{
  return ((uint64_t (*)(void))((char *)sub_186BEBE4C + 4 * word_186C5D9C8[*v0]))();
}

void sub_186BEBE4C(_WORD *a1@<X8>)
{
  *a1 = 259;
}

void sub_186BEBE58(_WORD *a1@<X8>)
{
  *a1 = 260;
}

void sub_186BEBE64(_WORD *a1@<X8>)
{
  *a1 = 261;
}

void sub_186BEBE70(_WORD *a1@<X8>)
{
  *a1 = 262;
}

void sub_186BEBE7C(_WORD *a1@<X8>)
{
  *a1 = 263;
}

void sub_186BEBE88(_WORD *a1@<X8>)
{
  *a1 = 264;
}

void sub_186BEBE94(_WORD *a1@<X8>)
{
  *a1 = 265;
}

void sub_186BEBEA0(_WORD *a1@<X8>)
{
  *a1 = 266;
}

void sub_186BEBEAC(_WORD *a1@<X8>)
{
  *a1 = 268;
}

void sub_186BEBEB8(_WORD *a1@<X8>)
{
  *a1 = 269;
}

void sub_186BEBEC4(_WORD *a1@<X8>)
{
  *a1 = 270;
}

void sub_186BEBED0(_WORD *a1@<X8>)
{
  *a1 = 272;
}

void sub_186BEBEDC(_WORD *a1@<X8>)
{
  *a1 = 288;
}

void sub_186BEBEE8(_WORD *a1@<X8>)
{
  *a1 = 293;
}

void sub_186BEBEF4(_WORD *a1@<X8>)
{
  *a1 = 304;
}

void sub_186BEBF00(_WORD *a1@<X8>)
{
  *a1 = 305;
}

void sub_186BEBF0C(_WORD *a1@<X8>)
{
  *a1 = 306;
}

void sub_186BEBF18(_WORD *a1@<X8>)
{
  *a1 = 320;
}

void sub_186BEBF24(_WORD *a1@<X8>)
{
  *a1 = 336;
}

void sub_186BEBF30(_WORD *a1@<X8>)
{
  *a1 = 352;
}

void sub_186BEBF3C(_WORD *a1@<X8>)
{
  *a1 = 368;
}

void sub_186BEBF48(_WORD *a1@<X8>)
{
  *a1 = 384;
}

void sub_186BEBF54(_WORD *a1@<X8>)
{
  *a1 = 400;
}

void sub_186BEBF60(_WORD *a1@<X8>)
{
  *a1 = 416;
}

void sub_186BEBF6C(_WORD *a1@<X8>)
{
  *a1 = 417;
}

void sub_186BEBF78(_WORD *a1@<X8>)
{
  *a1 = 418;
}

void sub_186BEBF84(_WORD *a1@<X8>)
{
  *a1 = 419;
}

void sub_186BEBF90(_WORD *a1@<X8>)
{
  *a1 = 420;
}

void sub_186BEBF9C(_WORD *a1@<X8>)
{
  *a1 = 421;
}

void sub_186BEBFA8(_WORD *a1@<X8>)
{
  *a1 = 422;
}

void sub_186BEBFB4(_WORD *a1@<X8>)
{
  *a1 = 423;
}

void sub_186BEBFC0(_WORD *a1@<X8>)
{
  *a1 = 424;
}

void sub_186BEBFCC(_WORD *a1@<X8>)
{
  *a1 = 425;
}

void sub_186BEBFD8(_WORD *a1@<X8>)
{
  *a1 = 426;
}

void sub_186BEBFE4(_WORD *a1@<X8>)
{
  *a1 = 427;
}

void sub_186BEBFF0(_WORD *a1@<X8>)
{
  *a1 = 428;
}

void sub_186BEBFFC(_WORD *a1@<X8>)
{
  *a1 = 429;
}

void sub_186BEC008(_WORD *a1@<X8>)
{
  *a1 = 430;
}

void sub_186BEC014(_WORD *a1@<X8>)
{
  *a1 = 431;
}

void sub_186BEC020(_WORD *a1@<X8>)
{
  *a1 = 1537;
}

void sub_186BEC02C(_WORD *a1@<X8>)
{
  *a1 = 1538;
}

void sub_186BEC038(_WORD *a1@<X8>)
{
  *a1 = 1539;
}

void sub_186BEC044(_WORD *a1@<X8>)
{
  *a1 = 1540;
}

void sub_186BEC050(_WORD *a1@<X8>)
{
  *a1 = 1541;
}

void sub_186BEC05C(_WORD *a1@<X8>)
{
  *a1 = 1543;
}

void sub_186BEC068(_WORD *a1@<X8>)
{
  *a1 = 1544;
}

void sub_186BEC074(_WORD *a1@<X8>)
{
  *a1 = 1545;
}

void sub_186BEC080(_WORD *a1@<X8>)
{
  *a1 = 1546;
}

void sub_186BEC08C(_WORD *a1@<X8>)
{
  *a1 = 1547;
}

void sub_186BEC098(_WORD *a1@<X8>)
{
  *a1 = 1548;
}

void sub_186BEC0A4(_WORD *a1@<X8>)
{
  *a1 = 1549;
}

void sub_186BEC0B0(_WORD *a1@<X8>)
{
  *a1 = 1550;
}

void sub_186BEC0BC(_WORD *a1@<X8>)
{
  *a1 = 1551;
}

void sub_186BEC0C8(_WORD *a1@<X8>)
{
  *a1 = 1552;
}

void sub_186BEC0D4(_WORD *a1@<X8>)
{
  *a1 = 1553;
}

void sub_186BEC0E0(_WORD *a1@<X8>)
{
  *a1 = 1554;
}

void sub_186BEC0EC(_WORD *a1@<X8>)
{
  *a1 = 1555;
}

void sub_186BEC0F8(_WORD *a1@<X8>)
{
  *a1 = 1556;
}

void sub_186BEC104(_WORD *a1@<X8>)
{
  *a1 = 1557;
}

void sub_186BEC110(_WORD *a1@<X8>)
{
  *a1 = 1558;
}

void sub_186BEC11C(_WORD *a1@<X8>)
{
  *a1 = 1559;
}

void sub_186BEC128(_WORD *a1@<X8>)
{
  *a1 = 1560;
}

void sub_186BEC134(_WORD *a1@<X8>)
{
  *a1 = 1561;
}

void sub_186BEC140(_WORD *a1@<X8>)
{
  *a1 = 1562;
}

void sub_186BEC14C(_WORD *a1@<X8>)
{
  *a1 = 1563;
}

void sub_186BEC158(_WORD *a1@<X8>)
{
  *a1 = 1564;
}

void sub_186BEC164(_WORD *a1@<X8>)
{
  *a1 = 1565;
}

void sub_186BEC170(_WORD *a1@<X8>)
{
  *a1 = 1566;
}

void sub_186BEC17C(_WORD *a1@<X8>)
{
  *a1 = 1567;
}

void sub_186BEC188(_WORD *a1@<X8>)
{
  *a1 = 1568;
}

void sub_186BEC194(_WORD *a1@<X8>)
{
  *a1 = 1569;
}

void sub_186BEC1A0(_WORD *a1@<X8>)
{
  *a1 = 769;
}

void sub_186BEC1AC(_WORD *a1@<X8>)
{
  *a1 = 770;
}

void sub_186BEC1B8(_WORD *a1@<X8>)
{
  *a1 = 771;
}

void sub_186BEC1C4(_WORD *a1@<X8>)
{
  *a1 = 772;
}

void sub_186BEC1D0(_WORD *a1@<X8>)
{
  *a1 = 773;
}

void sub_186BEC1DC(_WORD *a1@<X8>)
{
  *a1 = 774;
}

void sub_186BEC1E8(_WORD *a1@<X8>)
{
  *a1 = 775;
}

void sub_186BEC1F4(_WORD *a1@<X8>)
{
  *a1 = 776;
}

void sub_186BEC200(_WORD *a1@<X8>)
{
  *a1 = 777;
}

void sub_186BEC20C(_WORD *a1@<X8>)
{
  *a1 = 778;
}

void sub_186BEC218(_WORD *a1@<X8>)
{
  *a1 = 779;
}

void sub_186BEC224(_WORD *a1@<X8>)
{
  *a1 = 782;
}

void sub_186BEC230(_WORD *a1@<X8>)
{
  *a1 = 783;
}

void sub_186BEC23C(_WORD *a1@<X8>)
{
  *a1 = 784;
}

void sub_186BEC248(_WORD *a1@<X8>)
{
  *a1 = 785;
}

void sub_186BEC254(_WORD *a1@<X8>)
{
  *a1 = 786;
}

void sub_186BEC260(_WORD *a1@<X8>)
{
  *a1 = 787;
}

void sub_186BEC26C(_WORD *a1@<X8>)
{
  *a1 = 788;
}

void sub_186BEC278(_WORD *a1@<X8>)
{
  *a1 = 789;
}

void sub_186BEC284(_WORD *a1@<X8>)
{
  *a1 = 975;
}

void sub_186BEC290(_WORD *a1@<X8>)
{
  *a1 = 1025;
}

void sub_186BEC29C(_WORD *a1@<X8>)
{
  *a1 = 1026;
}

void sub_186BEC2A8(_WORD *a1@<X8>)
{
  *a1 = 1027;
}

void sub_186BEC2B4(_WORD *a1@<X8>)
{
  *a1 = 1036;
}

void sub_186BEC2C0(_WORD *a1@<X8>)
{
  *a1 = 1037;
}

void sub_186BEC2CC(_WORD *a1@<X8>)
{
  *a1 = 1038;
}

void sub_186BEC2D8(_WORD *a1@<X8>)
{
  *a1 = 1039;
}

void sub_186BEC2E4(_WORD *a1@<X8>)
{
  *a1 = 1279;
}

void sub_186BEC2F0(_WORD *a1@<X8>)
{
  *a1 = 1792;
}

void sub_186BEC2FC(_WORD *a1@<X8>)
{
  *a1 = 1793;
}

void sub_186BEC308(_WORD *a1@<X8>)
{
  *a1 = 1794;
}

void sub_186BEC314(_WORD *a1@<X8>)
{
  *a1 = 9472;
}

void sub_186BEC320(_WORD *a1@<X8>)
{
  *a1 = 9473;
}

void sub_186BEC32C(_WORD *a1@<X8>)
{
  *a1 = 9474;
}

void sub_186BEC338(_WORD *a1@<X8>)
{
  *a1 = 9475;
}

void sub_186BEC344(_WORD *a1@<X8>)
{
  *a1 = 9476;
}

void sub_186BEC350(_WORD *a1@<X8>)
{
  *a1 = 9477;
}

void sub_186BEC35C(_WORD *a1@<X8>)
{
  *a1 = 9478;
}

void sub_186BEC368(_WORD *a1@<X8>)
{
  *a1 = 9479;
}

void sub_186BEC374(_WORD *a1@<X8>)
{
  *a1 = 9480;
}

void sub_186BEC380(_WORD *a1@<X8>)
{
  *a1 = 9481;
}

void sub_186BEC38C(_WORD *a1@<X8>)
{
  *a1 = 9482;
}

void sub_186BEC398(_WORD *a1@<X8>)
{
  *a1 = 5121;
}

void sub_186BEC3A4(_WORD *a1@<X8>)
{
  *a1 = 5122;
}

void sub_186BEC3B0(_WORD *a1@<X8>)
{
  *a1 = 5136;
}

void sub_186BEC3BC(_WORD *a1@<X8>)
{
  *a1 = 5137;
}

void sub_186BEC3C8(_WORD *a1@<X8>)
{
  *a1 = 5138;
}

void sub_186BEC3D4(_WORD *a1@<X8>)
{
  *a1 = 5139;
}

void sub_186BEC3E0(_WORD *a1@<X8>)
{
  *a1 = 5140;
}

void sub_186BEC3EC(_WORD *a1@<X8>)
{
  *a1 = 5146;
}

void sub_186BEC3F8(_WORD *a1@<X8>)
{
  *a1 = 5152;
}

void sub_186BEC404(_WORD *a1@<X8>)
{
  *a1 = 8451;
}

void sub_186BEC410(_WORD *a1@<X8>)
{
  *a1 = 8452;
}

void sub_186BEC41C(_WORD *a1@<X8>)
{
  *a1 = 8453;
}

void sub_186BEC428(_WORD *a1@<X8>)
{
  *a1 = 8458;
}

void sub_186BEC434(_WORD *a1@<X8>)
{
  *a1 = 8459;
}

void sub_186BEC440(_WORD *a1@<X8>)
{
  *a1 = 8460;
}

void sub_186BEC44C(_WORD *a1@<X8>)
{
  *a1 = 8461;
}

void sub_186BEC458(_WORD *a1@<X8>)
{
  *a1 = 8462;
}

void sub_186BEC464(_WORD *a1@<X8>)
{
  *a1 = 8463;
}

void sub_186BEC470(_WORD *a1@<X8>)
{
  *a1 = 8464;
}

void sub_186BEC47C(_WORD *a1@<X8>)
{
  *a1 = 8465;
}

void sub_186BEC488(_WORD *a1@<X8>)
{
  *a1 = 8466;
}

void sub_186BEC494(_WORD *a1@<X8>)
{
  *a1 = 8576;
}

void sub_186BEC4A0(_WORD *a1@<X8>)
{
  *a1 = 8577;
}

void sub_186BEC4AC(_WORD *a1@<X8>)
{
  *a1 = 8578;
}

void sub_186BEC4B8(_WORD *a1@<X8>)
{
  *a1 = 8579;
}

void sub_186BEC4C4(_WORD *a1@<X8>)
{
  *a1 = 9744;
}

void sub_186BEC4D0(_WORD *a1@<X8>)
{
  *a1 = 9745;
}

void sub_186BEC4DC(_WORD *a1@<X8>)
{
  *a1 = 9746;
}

void sub_186BEC4E8(_WORD *a1@<X8>)
{
  *a1 = 9747;
}

void sub_186BEC4F4(_WORD *a1@<X8>)
{
  *a1 = 9751;
}

void sub_186BEC500(_WORD *a1@<X8>)
{
  *a1 = 9752;
}

void sub_186BEC50C(_WORD *a1@<X8>)
{
  *a1 = 9753;
}

void sub_186BEC518(_WORD *a1@<X8>)
{
  *a1 = 9754;
}

void sub_186BEC524(_WORD *a1@<X8>)
{
  *a1 = 9755;
}

void sub_186BEC530(_WORD *a1@<X8>)
{
  *a1 = 9756;
}

void sub_186BEC53C(_WORD *a1@<X8>)
{
  *a1 = 9757;
}

uint64_t sub_186BEC548(unsigned __int16 a1)
{
  else {
    uint64_t v2 = sub_186C5AD5C();
  }
  sub_186C5B260();
  swift_bridgeObjectRelease();
  sub_186C5ADD4();
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C6A2190);
  uint64_t v4 = swift_allocObject();
  uint64_t v5 = MEMORY[0x18961A800];
  *(_OWORD *)(v4 + 16) = xmmword_186C5E4F0;
  uint64_t v6 = MEMORY[0x18961A840];
  *(void *)(v4 + 56) = v5;
  *(void *)(v4 + std::__hash_table<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>>>::~__hash_table((uint64_t)this + 64) = v6;
  *(_WORD *)(v4 + 32) = a1;
  sub_186C5AD38();
  sub_186C5ADD4();
  swift_bridgeObjectRelease();
  sub_186C5ADD4();
  return v2;
}

uint64_t sub_186BEC6A8(unsigned __int8 a1)
{
  int v1 = a1 - 1;
  uint64_t result = 1LL;
  switch(v1)
  {
    case 0:
      uint64_t result = 0LL;
      break;
    case 1:
      return result;
    case 2:
      uint64_t result = 2LL;
      break;
    case 3:
      uint64_t result = 3LL;
      break;
    case 4:
      uint64_t result = 4LL;
      break;
    case 5:
      uint64_t result = 5LL;
      break;
    case 6:
      uint64_t result = 6LL;
      break;
    case 7:
      uint64_t result = 7LL;
      break;
    case 8:
      uint64_t result = 8LL;
      break;
    case 9:
      uint64_t result = 9LL;
      break;
    case 10:
      uint64_t result = 10LL;
      break;
    case 11:
      uint64_t result = 11LL;
      break;
    case 19:
      uint64_t result = 12LL;
      break;
    case 29:
      uint64_t result = 13LL;
      break;
    case 30:
      uint64_t result = 14LL;
      break;
    case 31:
      uint64_t result = 15LL;
      break;
    case 32:
      uint64_t result = 16LL;
      break;
    case 33:
      uint64_t result = 17LL;
      break;
    case 34:
      uint64_t result = 18LL;
      break;
    case 35:
      uint64_t result = 33LL;
      break;
    case 36:
      uint64_t result = 19LL;
      break;
    case 37:
      uint64_t result = 20LL;
      break;
    case 38:
      uint64_t result = 34LL;
      break;
    case 39:
      uint64_t result = 21LL;
      break;
    case 40:
      uint64_t result = 22LL;
      break;
    case 41:
      uint64_t result = 23LL;
      break;
    case 42:
      uint64_t result = 24LL;
      break;
    case 43:
      uint64_t result = 25LL;
      break;
    case 44:
      uint64_t result = 26LL;
      break;
    case 45:
      uint64_t result = 27LL;
      break;
    case 48:
      uint64_t result = 28LL;
      break;
    case 49:
      uint64_t result = 35LL;
      break;
    case 50:
      uint64_t result = 29LL;
      break;
    case 51:
      uint64_t result = 36LL;
      break;
    case 52:
      uint64_t result = 30LL;
      break;
    case 53:
      uint64_t result = 31LL;
      break;
    case 127:
      uint64_t result = 37LL;
      break;
    case 128:
      uint64_t result = 38LL;
      break;
    case 129:
      uint64_t result = 39LL;
      break;
    case 130:
      uint64_t result = 40LL;
      break;
    case 131:
      uint64_t result = 41LL;
      break;
    case 132:
      uint64_t result = 42LL;
      break;
    case 133:
      uint64_t result = 43LL;
      break;
    case 134:
      uint64_t result = 44LL;
      break;
    case 135:
      uint64_t result = 45LL;
      break;
    case 136:
      uint64_t result = 46LL;
      break;
    case 254:
      uint64_t result = 32LL;
      break;
    default:
      uint64_t result = 47LL;
      break;
  }

  return result;
}

uint64_t sub_186BEC84C(unsigned __int16 a1)
{
  int v2 = a1;
  if (a1 > 0x600u)
  {
    if (a1 > 0x1400u)
    {
      switch(a1)
      {
        case 0x2500u:
          uint64_t result = 103LL;
          break;
        case 0x2501u:
          uint64_t result = 104LL;
          break;
        case 0x2502u:
          uint64_t result = 105LL;
          break;
        case 0x2503u:
          uint64_t result = 106LL;
          break;
        case 0x2504u:
          uint64_t result = 107LL;
          break;
        case 0x2505u:
          uint64_t result = 108LL;
          break;
        case 0x2506u:
          uint64_t result = 109LL;
          break;
        case 0x2507u:
          uint64_t result = 110LL;
          break;
        case 0x2508u:
          uint64_t result = 111LL;
          break;
        case 0x2509u:
          uint64_t result = 112LL;
          break;
        case 0x250Au:
          uint64_t result = 113LL;
          break;
        default:
          switch(a1)
          {
            case 0x1401u:
              uint64_t result = 114LL;
              break;
            case 0x1402u:
              uint64_t result = 115LL;
              break;
            case 0x1403u:
            case 0x1404u:
            case 0x1405u:
            case 0x1406u:
            case 0x1407u:
            case 0x1408u:
            case 0x1409u:
            case 0x140Au:
            case 0x140Bu:
            case 0x140Cu:
            case 0x140Du:
            case 0x140Eu:
            case 0x140Fu:
            case 0x1415u:
            case 0x1416u:
            case 0x1417u:
            case 0x1418u:
            case 0x1419u:
            case 0x141Bu:
            case 0x141Cu:
            case 0x141Du:
            case 0x141Eu:
            case 0x141Fu:
LABEL_139:
              switch(a1)
              {
                case 0x2610u:
                  uint64_t result = 139LL;
                  break;
                case 0x2611u:
                  uint64_t result = 140LL;
                  break;
                case 0x2612u:
                  uint64_t result = 141LL;
                  break;
                case 0x2613u:
                  uint64_t result = 142LL;
                  break;
                case 0x2614u:
                case 0x2615u:
                case 0x2616u:
LABEL_143:
                  uint64_t result = 150LL;
                  break;
                case 0x2617u:
                  uint64_t result = 143LL;
                  break;
                case 0x2618u:
                  uint64_t result = 144LL;
                  break;
                case 0x2619u:
                  uint64_t result = 145LL;
                  break;
                case 0x261Au:
                  uint64_t result = 146LL;
                  break;
                case 0x261Bu:
                  uint64_t result = 147LL;
                  break;
                case 0x261Cu:
                  uint64_t result = 148LL;
                  break;
                case 0x261Du:
                  uint64_t result = 149LL;
                  break;
                default:
                  uint64_t result = 128LL;
                  switch(a1)
                  {
                    case 0x210Cu:
                      return result;
                    case 0x210Du:
                      uint64_t result = 129LL;
                      break;
                    case 0x210Eu:
                      uint64_t result = 130LL;
                      break;
                    case 0x210Fu:
                      uint64_t result = 131LL;
                      break;
                    case 0x2110u:
                      uint64_t result = 132LL;
                      break;
                    case 0x2111u:
                      uint64_t result = 133LL;
                      break;
                    case 0x2112u:
                      uint64_t result = 134LL;
                      break;
                    default:
                      switch(a1)
                      {
                        case 0x2180u:
                          uint64_t result = 135LL;
                          break;
                        case 0x2181u:
                          uint64_t result = 136LL;
                          break;
                        case 0x2182u:
                          uint64_t result = 137LL;
                          break;
                        case 0x2183u:
                          uint64_t result = 138LL;
                          break;
                        default:
                          goto LABEL_143;
                      }

                      break;
                  }

                  break;
              }

              break;
            case 0x1410u:
              uint64_t result = 116LL;
              break;
            case 0x1411u:
              uint64_t result = 117LL;
              break;
            case 0x1412u:
              uint64_t result = 118LL;
              break;
            case 0x1413u:
              uint64_t result = 119LL;
              break;
            case 0x1414u:
              uint64_t result = 120LL;
              break;
            case 0x141Au:
              uint64_t result = 121LL;
              break;
            case 0x1420u:
              uint64_t result = 122LL;
              break;
            default:
              switch(a1)
              {
                case 0x2103u:
                  uint64_t result = 123LL;
                  break;
                case 0x2104u:
                  uint64_t result = 124LL;
                  break;
                case 0x2105u:
                  uint64_t result = 125LL;
                  break;
                case 0x210Au:
                  uint64_t result = 126LL;
                  break;
                case 0x210Bu:
                  uint64_t result = 127LL;
                  break;
                default:
                  goto LABEL_139;
              }

              break;
          }

          break;
      }
    }

    else
    {
      uint64_t result = 54LL;
      switch(v2)
      {
        case 1537:
          uint64_t result = 40LL;
          break;
        case 1538:
          uint64_t result = 41LL;
          break;
        case 1539:
          uint64_t result = 42LL;
          break;
        case 1540:
          uint64_t result = 43LL;
          break;
        case 1541:
          uint64_t result = 44LL;
          break;
        case 1543:
          uint64_t result = 45LL;
          break;
        case 1544:
          uint64_t result = 46LL;
          break;
        case 1545:
          uint64_t result = 47LL;
          break;
        case 1546:
          uint64_t result = 48LL;
          break;
        case 1547:
          uint64_t result = 49LL;
          break;
        case 1548:
          uint64_t result = 50LL;
          break;
        case 1549:
          uint64_t result = 51LL;
          break;
        case 1550:
          uint64_t result = 52LL;
          break;
        case 1551:
          uint64_t result = 53LL;
          break;
        case 1552:
          return result;
        case 1553:
          uint64_t result = 55LL;
          break;
        case 1554:
          uint64_t result = 56LL;
          break;
        case 1555:
          uint64_t result = 57LL;
          break;
        case 1556:
          uint64_t result = 58LL;
          break;
        case 1557:
          uint64_t result = 59LL;
          break;
        case 1558:
          uint64_t result = 60LL;
          break;
        case 1559:
          uint64_t result = 61LL;
          break;
        case 1560:
          uint64_t result = 62LL;
          break;
        case 1561:
          uint64_t result = 63LL;
          break;
        case 1562:
          uint64_t result = 64LL;
          break;
        case 1563:
          uint64_t result = 65LL;
          break;
        case 1564:
          uint64_t result = 66LL;
          break;
        case 1565:
          uint64_t result = 67LL;
          break;
        case 1566:
          uint64_t result = 68LL;
          break;
        case 1567:
          uint64_t result = 69LL;
          break;
        case 1568:
          uint64_t result = 70LL;
          break;
        case 1569:
          uint64_t result = 71LL;
          break;
        case 1792:
          uint64_t result = 100LL;
          break;
        case 1793:
          uint64_t result = 101LL;
          break;
        case 1794:
          uint64_t result = 102LL;
          break;
        default:
          goto LABEL_139;
      }
    }
  }

  else
  {
    uint64_t result = 0LL;
    switch(v2)
    {
      case 258:
        return result;
      case 259:
        uint64_t result = 1LL;
        break;
      case 260:
        uint64_t result = 2LL;
        break;
      case 261:
        uint64_t result = 3LL;
        break;
      case 262:
        uint64_t result = 4LL;
        break;
      case 263:
        uint64_t result = 5LL;
        break;
      case 264:
        uint64_t result = 6LL;
        break;
      case 265:
        uint64_t result = 7LL;
        break;
      case 266:
        uint64_t result = 8LL;
        break;
      case 267:
      case 271:
      case 273:
      case 274:
      case 275:
      case 276:
      case 277:
      case 278:
      case 279:
      case 280:
      case 281:
      case 282:
      case 283:
      case 284:
      case 285:
      case 286:
      case 287:
      case 289:
      case 290:
      case 291:
      case 292:
      case 294:
      case 295:
      case 296:
      case 297:
      case 298:
      case 299:
      case 300:
      case 301:
      case 302:
      case 303:
      case 307:
      case 308:
      case 309:
      case 310:
      case 311:
      case 312:
      case 313:
      case 314:
      case 315:
      case 316:
      case 317:
      case 318:
      case 319:
      case 321:
      case 322:
      case 323:
      case 324:
      case 325:
      case 326:
      case 327:
      case 328:
      case 329:
      case 330:
      case 331:
      case 332:
      case 333:
      case 334:
      case 335:
      case 337:
      case 338:
      case 339:
      case 340:
      case 341:
      case 342:
      case 343:
      case 344:
      case 345:
      case 346:
      case 347:
      case 348:
      case 349:
      case 350:
      case 351:
      case 353:
      case 354:
      case 355:
      case 356:
      case 357:
      case 358:
      case 359:
      case 360:
      case 361:
      case 362:
      case 363:
      case 364:
      case 365:
      case 366:
      case 367:
      case 369:
      case 370:
      case 371:
      case 372:
      case 373:
      case 374:
      case 375:
      case 376:
      case 377:
      case 378:
      case 379:
      case 380:
      case 381:
      case 382:
      case 383:
      case 385:
      case 386:
      case 387:
      case 388:
      case 389:
      case 390:
      case 391:
      case 392:
      case 393:
      case 394:
      case 395:
      case 396:
      case 397:
      case 398:
      case 399:
      case 401:
      case 402:
      case 403:
      case 404:
      case 405:
      case 406:
      case 407:
      case 408:
      case 409:
      case 410:
      case 411:
      case 412:
      case 413:
      case 414:
      case 415:
      case 432:
      case 433:
      case 434:
      case 435:
      case 436:
      case 437:
      case 438:
      case 439:
      case 440:
      case 441:
      case 442:
      case 443:
      case 444:
      case 445:
      case 446:
      case 447:
      case 448:
      case 449:
      case 450:
      case 451:
      case 452:
      case 453:
      case 454:
      case 455:
      case 456:
      case 457:
      case 458:
      case 459:
      case 460:
      case 461:
      case 462:
      case 463:
      case 464:
      case 465:
      case 466:
      case 467:
      case 468:
      case 469:
      case 470:
      case 471:
      case 472:
      case 473:
      case 474:
      case 475:
      case 476:
      case 477:
      case 478:
      case 479:
      case 480:
      case 481:
      case 482:
      case 483:
      case 484:
      case 485:
      case 486:
      case 487:
      case 488:
      case 489:
      case 490:
      case 491:
      case 492:
      case 493:
      case 494:
      case 495:
      case 496:
      case 497:
      case 498:
      case 499:
      case 500:
      case 501:
      case 502:
      case 503:
      case 504:
      case 505:
      case 506:
      case 507:
      case 508:
      case 509:
      case 510:
      case 511:
      case 512:
      case 513:
      case 514:
      case 515:
      case 516:
      case 517:
      case 518:
      case 519:
      case 520:
      case 521:
      case 522:
      case 523:
      case 524:
      case 525:
      case 526:
      case 527:
      case 528:
      case 529:
      case 530:
      case 531:
      case 532:
      case 533:
      case 534:
      case 535:
      case 536:
      case 537:
      case 538:
      case 539:
      case 540:
      case 541:
      case 542:
      case 543:
      case 544:
      case 545:
      case 546:
      case 547:
      case 548:
      case 549:
      case 550:
      case 551:
      case 552:
      case 553:
      case 554:
      case 555:
      case 556:
      case 557:
      case 558:
      case 559:
      case 560:
      case 561:
      case 562:
      case 563:
      case 564:
      case 565:
      case 566:
      case 567:
      case 568:
      case 569:
      case 570:
      case 571:
      case 572:
      case 573:
      case 574:
      case 575:
      case 576:
      case 577:
      case 578:
      case 579:
      case 580:
      case 581:
      case 582:
      case 583:
      case 584:
      case 585:
      case 586:
      case 587:
      case 588:
      case 589:
      case 590:
      case 591:
      case 592:
      case 593:
      case 594:
      case 595:
      case 596:
      case 597:
      case 598:
      case 599:
      case 600:
      case 601:
      case 602:
      case 603:
      case 604:
      case 605:
      case 606:
      case 607:
      case 608:
      case 609:
      case 610:
      case 611:
      case 612:
      case 613:
      case 614:
      case 615:
      case 616:
      case 617:
      case 618:
      case 619:
      case 620:
      case 621:
      case 622:
      case 623:
      case 624:
      case 625:
      case 626:
      case 627:
      case 628:
      case 629:
      case 630:
      case 631:
      case 632:
      case 633:
      case 634:
      case 635:
      case 636:
      case 637:
      case 638:
      case 639:
      case 640:
      case 641:
      case 642:
      case 643:
      case 644:
      case 645:
      case 646:
      case 647:
      case 648:
      case 649:
      case 650:
      case 651:
      case 652:
      case 653:
      case 654:
      case 655:
      case 656:
      case 657:
      case 658:
      case 659:
      case 660:
      case 661:
      case 662:
      case 663:
      case 664:
      case 665:
      case 666:
      case 667:
      case 668:
      case 669:
      case 670:
      case 671:
      case 672:
      case 673:
      case 674:
      case 675:
      case 676:
      case 677:
      case 678:
      case 679:
      case 680:
      case 681:
      case 682:
      case 683:
      case 684:
      case 685:
      case 686:
      case 687:
      case 688:
      case 689:
      case 690:
      case 691:
      case 692:
      case 693:
      case 694:
      case 695:
      case 696:
      case 697:
      case 698:
      case 699:
      case 700:
      case 701:
      case 702:
      case 703:
      case 704:
      case 705:
      case 706:
      case 707:
      case 708:
      case 709:
      case 710:
      case 711:
      case 712:
      case 713:
      case 714:
      case 715:
      case 716:
      case 717:
      case 718:
      case 719:
      case 720:
      case 721:
      case 722:
      case 723:
      case 724:
      case 725:
      case 726:
      case 727:
      case 728:
      case 729:
      case 730:
      case 731:
      case 732:
      case 733:
      case 734:
      case 735:
      case 736:
      case 737:
      case 738:
      case 739:
      case 740:
      case 741:
      case 742:
      case 743:
      case 744:
      case 745:
      case 746:
      case 747:
      case 748:
      case 749:
      case 750:
      case 751:
      case 752:
      case 753:
      case 754:
      case 755:
      case 756:
      case 757:
      case 758:
      case 759:
      case 760:
      case 761:
      case 762:
      case 763:
      case 764:
      case 765:
      case 766:
      case 767:
      case 768:
      case 780:
      case 781:
        goto LABEL_139;
      case 268:
        uint64_t result = 9LL;
        break;
      case 269:
        uint64_t result = 10LL;
        break;
      case 270:
        uint64_t result = 11LL;
        break;
      case 272:
        uint64_t result = 12LL;
        break;
      case 288:
        uint64_t result = 13LL;
        break;
      case 293:
        uint64_t result = 14LL;
        break;
      case 304:
        uint64_t result = 15LL;
        break;
      case 305:
        uint64_t result = 16LL;
        break;
      case 306:
        uint64_t result = 17LL;
        break;
      case 320:
        uint64_t result = 18LL;
        break;
      case 336:
        uint64_t result = 19LL;
        break;
      case 352:
        uint64_t result = 20LL;
        break;
      case 368:
        uint64_t result = 21LL;
        break;
      case 384:
        uint64_t result = 22LL;
        break;
      case 400:
        uint64_t result = 23LL;
        break;
      case 416:
        uint64_t result = 24LL;
        break;
      case 417:
        uint64_t result = 25LL;
        break;
      case 418:
        uint64_t result = 26LL;
        break;
      case 419:
        uint64_t result = 27LL;
        break;
      case 420:
        uint64_t result = 28LL;
        break;
      case 421:
        uint64_t result = 29LL;
        break;
      case 422:
        uint64_t result = 30LL;
        break;
      case 423:
        uint64_t result = 31LL;
        break;
      case 424:
        uint64_t result = 32LL;
        break;
      case 425:
        uint64_t result = 33LL;
        break;
      case 426:
        uint64_t result = 34LL;
        break;
      case 427:
        uint64_t result = 35LL;
        break;
      case 428:
        uint64_t result = 36LL;
        break;
      case 429:
        uint64_t result = 37LL;
        break;
      case 430:
        uint64_t result = 38LL;
        break;
      case 431:
        uint64_t result = 39LL;
        break;
      case 769:
        uint64_t result = 72LL;
        break;
      case 770:
        uint64_t result = 73LL;
        break;
      case 771:
        uint64_t result = 74LL;
        break;
      case 772:
        uint64_t result = 75LL;
        break;
      case 773:
        uint64_t result = 76LL;
        break;
      case 774:
        uint64_t result = 77LL;
        break;
      case 775:
        uint64_t result = 78LL;
        break;
      case 776:
        uint64_t result = 79LL;
        break;
      case 777:
        uint64_t result = 80LL;
        break;
      case 778:
        uint64_t result = 81LL;
        break;
      case 779:
        uint64_t result = 82LL;
        break;
      case 782:
        uint64_t result = 83LL;
        break;
      case 783:
        uint64_t result = 84LL;
        break;
      case 784:
        uint64_t result = 85LL;
        break;
      case 785:
        uint64_t result = 86LL;
        break;
      case 786:
        uint64_t result = 87LL;
        break;
      case 787:
        uint64_t result = 88LL;
        break;
      case 788:
        uint64_t result = 89LL;
        break;
      case 789:
        uint64_t result = 90LL;
        break;
      default:
        switch(v2)
        {
          case 975:
            uint64_t result = 91LL;
            break;
          case 976:
          case 977:
          case 978:
          case 979:
          case 980:
          case 981:
          case 982:
          case 983:
          case 984:
          case 985:
          case 986:
          case 987:
          case 988:
          case 989:
          case 990:
          case 991:
          case 992:
          case 993:
          case 994:
          case 995:
          case 996:
          case 997:
          case 998:
          case 999:
          case 1000:
          case 1001:
          case 1002:
          case 1003:
          case 1004:
          case 1005:
          case 1006:
          case 1007:
          case 1008:
          case 1009:
          case 1010:
          case 1011:
          case 1012:
          case 1013:
          case 1014:
          case 1015:
          case 1016:
          case 1017:
          case 1018:
          case 1019:
          case 1020:
          case 1021:
          case 1022:
          case 1023:
          case 1024:
          case 1028:
          case 1029:
          case 1030:
          case 1031:
          case 1032:
          case 1033:
          case 1034:
          case 1035:
            goto LABEL_139;
          case 1025:
            uint64_t result = 92LL;
            break;
          case 1026:
            uint64_t result = 93LL;
            break;
          case 1027:
            uint64_t result = 94LL;
            break;
          case 1036:
            uint64_t result = 95LL;
            break;
          case 1037:
            uint64_t result = 96LL;
            break;
          case 1038:
            uint64_t result = 97LL;
            break;
          case 1039:
            uint64_t result = 98LL;
            break;
          default:
            if (v2 != 1279) {
              goto LABEL_139;
            }
            uint64_t result = 99LL;
            break;
        }

        break;
    }
  }

  return result;
}

uint64_t __swift_instantiateConcreteTypeFromMangledName(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = MEMORY[0x186E46618]((char *)a1 + (int)result, -(result >> 32), 0LL, 0LL);
    *a1 = result;
  }

  return result;
}

unint64_t sub_186BECEC4()
{
  unint64_t result = qword_18C6A2198;
  if (!qword_18C6A2198)
  {
    unint64_t result = MEMORY[0x186E46630](&unk_186C5E324, &type metadata for KnownKdebugClass);
    atomic_store(result, (unint64_t *)&qword_18C6A2198);
  }

  return result;
}

unint64_t sub_186BECF0C()
{
  unint64_t result = qword_18C6A21A0;
  if (!qword_18C6A21A0)
  {
    unint64_t result = MEMORY[0x186E46630](&unk_186C5E3C4, &type metadata for KnownKdebugSubclass);
    atomic_store(result, (unint64_t *)&qword_18C6A21A0);
  }

  return result;
}

_BYTE *__swift_memcpy1_1(_BYTE *result, _BYTE *a2)
{
  int *result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for KnownKdebugClass(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xD2) {
    goto LABEL_17;
  }
  if (a2 + 46 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 46) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 46;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 46;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 46;
    }
  }

uint64_t storeEnumTagSinglePayload for KnownKdebugClass(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 46 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 46) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xD2) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xD1) {
    return ((uint64_t (*)(void))((char *)&loc_186BED03C + 4 * byte_186C5E314[v4]))();
  }
  *a1 = a2 + 46;
  return ((uint64_t (*)(void))((char *)sub_186BED070 + 4 * byte_186C5E30F[v4]))();
}

uint64_t sub_186BED070(uint64_t result)
{
  *(_BYTE *)(result + ktrace_session_set_default_event_names_enabled(global_session, 1) = v1;
  return result;
}

uint64_t sub_186BED078(uint64_t result, int a2)
{
  *(_WORD *)(result + ktrace_session_set_default_event_names_enabled(global_session, 1) = 0;
  if (a2) {
    JUMPOUT(0x186BED080LL);
  }
  return result;
}

uint64_t sub_186BED08C(uint64_t result, int a2)
{
  *(_DWORD *)(result + ktrace_session_set_default_event_names_enabled(global_session, 1) = 0;
  if (!a2) {
    JUMPOUT(0x186BED094LL);
  }
  *(_BYTE *)unint64_t result = a2 + 46;
  return result;
}

uint64_t sub_186BED098(uint64_t result)
{
  *(_DWORD *)(result + ktrace_session_set_default_event_names_enabled(global_session, 1) = v1;
  return result;
}

uint64_t sub_186BED0A0(uint64_t result)
{
  *(_WORD *)(result + ktrace_session_set_default_event_names_enabled(global_session, 1) = v1;
  return result;
}

uint64_t sub_186BED0AC(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *sub_186BED0B4(_BYTE *result, char a2)
{
  int *result = a2;
  return result;
}

ValueMetadata *type metadata accessor for KnownKdebugClass()
{
  return &type metadata for KnownKdebugClass;
}

ValueMetadata *type metadata accessor for KdebugClass()
{
  return &type metadata for KdebugClass;
}

uint64_t getEnumTagSinglePayload for KnownKdebugSubclass(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0x6B) {
    goto LABEL_17;
  }
  if (a2 + 149 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 149) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 149;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 149;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 149;
    }
  }

uint64_t storeEnumTagSinglePayload for KnownKdebugSubclass(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 149 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 149) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0x6B) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0x6A) {
    return ((uint64_t (*)(void))((char *)&loc_186BED1B8 + 4 * byte_186C5E31E[v4]))();
  }
  *a1 = a2 - 107;
  return ((uint64_t (*)(void))((char *)sub_186BED1EC + 4 * byte_186C5E319[v4]))();
}

uint64_t sub_186BED1EC(uint64_t result)
{
  *(_BYTE *)(result + ktrace_session_set_default_event_names_enabled(global_session, 1) = v1;
  return result;
}

uint64_t sub_186BED1F4(uint64_t result, int a2)
{
  *(_WORD *)(result + ktrace_session_set_default_event_names_enabled(global_session, 1) = 0;
  if (a2) {
    JUMPOUT(0x186BED1FCLL);
  }
  return result;
}

uint64_t sub_186BED208(uint64_t result, int a2)
{
  *(_DWORD *)(result + ktrace_session_set_default_event_names_enabled(global_session, 1) = 0;
  if (!a2) {
    JUMPOUT(0x186BED210LL);
  }
  *(_BYTE *)unint64_t result = a2 - 107;
  return result;
}

uint64_t sub_186BED214(uint64_t result)
{
  *(_DWORD *)(result + ktrace_session_set_default_event_names_enabled(global_session, 1) = v1;
  return result;
}

uint64_t sub_186BED21C(uint64_t result)
{
  *(_WORD *)(result + ktrace_session_set_default_event_names_enabled(global_session, 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for KnownKdebugSubclass()
{
  return &type metadata for KnownKdebugSubclass;
}

ValueMetadata *type metadata accessor for KdebugSubclass()
{
  return &type metadata for KdebugSubclass;
}

uint64_t sub_186BED250()
{
  char v1 = *(_BYTE *)(v0 + 2);
  sub_186C5B59C();
  sub_186C5B5A8();
  if ((v1 & 1) != 0) {
    sub_186C5B5C0();
  }
  else {
    sub_186C5B5B4();
  }
  return sub_186C5B5D8();
}

uint64_t sub_186BED2C4()
{
  if ((*(_BYTE *)(v0 + 2) & 1) != 0)
  {
    sub_186C5B5A8();
    return sub_186C5B5C0();
  }

  else
  {
    sub_186C5B5A8();
    return sub_186C5B5B4();
  }

uint64_t sub_186BED314()
{
  char v1 = *(_BYTE *)(v0 + 2);
  sub_186C5B59C();
  sub_186C5B5A8();
  if ((v1 & 1) != 0) {
    sub_186C5B5C0();
  }
  else {
    sub_186C5B5B4();
  }
  return sub_186C5B5D8();
}

uint64_t sub_186BED384(unsigned __int16 *a1, unsigned __int16 *a2)
{
  int v2 = *a2;
  if (*a1 == v2) {
    unsigned int v3 = *((unsigned __int8 *)a2 + 2);
  }
  else {
    unsigned int v3 = 0;
  }
  BOOL v4 = *a1 == v2;
  if ((a2[1] & 1) != 0) {
    BOOL v4 = 0;
  }
  if ((a1[1] & 1) != 0) {
    return v3;
  }
  else {
    return v4;
  }
}

uint64_t sub_186BED3BC(uint64_t a1, uint64_t a2)
{
  v9[0] = 44LL;
  v9[1] = 0xE100000000000000LL;
  int v8[2] = v9;
  swift_bridgeObjectRetain();
  uint64_t v5 = sub_186BEE808(0x7FFFFFFFFFFFFFFFLL, 1, sub_186BF0290, (uint64_t)v8, a1, a2);
  swift_bridgeObjectRetain();
  unint64_t v6 = sub_186BF02A8((uint64_t)v5, a1, a2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  if (!v2)
  {
    a2 = sub_186BF05A8(v6);
    swift_bridgeObjectRelease();
  }

  return a2;
}

BOOL sub_186BED480(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v5 = a4 >> 14;
  swift_bridgeObjectRetain();
  if (v5 == a3 >> 14)
  {
LABEL_10:
    sub_186C5ADEC();
    uint64_t v14 = v13;
    swift_bridgeObjectRelease();
    BOOL v15 = v14 == 0;
  }

  else
  {
    swift_bridgeObjectRetain();
    while (1)
    {
      while (1)
      {
        uint64_t v7 = sub_186C5B0BC();
        uint64_t v9 = v8;
        unint64_t v10 = sub_186C5B0A4();
        uint64_t v11 = sub_186C5ADEC();
        if (!v12)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          BOOL v15 = 1LL;
          goto LABEL_13;
        }

        if (v7 != v11 || v12 != v9) {
          break;
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v5 == v10 >> 14)
        {
LABEL_9:
          swift_bridgeObjectRelease();
          goto LABEL_10;
        }
      }

      char v6 = sub_186C5B4F4();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v6 & 1) == 0) {
        break;
      }
      if (v5 == v10 >> 14) {
        goto LABEL_9;
      }
    }

    swift_bridgeObjectRelease();
    BOOL v15 = 0LL;
  }

uint64_t sub_186BED614()
{
  return 0x200000000000LL;
}

uint64_t sub_186BED654(uint64_t a1)
{
  uint64_t v11 = (void *)(a1 + 56);
  uint64_t v3 = 1LL << *(_BYTE *)(a1 + 32);
  uint64_t v4 = -1LL;
  if (v3 < 64) {
    uint64_t v4 = ~(-1LL << v3);
  }
  unint64_t v5 = v4 & *(void *)(a1 + 56);
  int64_t v12 = (unint64_t)(v3 + 63) >> 6;
  swift_bridgeObjectRetain();
  if (v5)
  {
    unint64_t v6 = __clz(__rbit64(v5));
    goto LABEL_18;
  }

  if (v12 > 1)
  {
    unint64_t v7 = v11[1];
    uint64_t v8 = 1LL;
    if (v7) {
      goto LABEL_17;
    }
    uint64_t v8 = 2LL;
    if (v12 <= 2) {
      return swift_release();
    }
    unint64_t v7 = v11[2];
    if (v7) {
      goto LABEL_17;
    }
    uint64_t v8 = 3LL;
    if (v12 <= 3) {
      return swift_release();
    }
    unint64_t v7 = v11[3];
    if (v7)
    {
LABEL_17:
      unint64_t v6 = __clz(__rbit64(v7)) + (v8 << 6);
LABEL_18:
      if ((*(_BYTE *)(*(void *)(a1 + 48) + 4 * v6 + 2) & 1) != 0) {
        __asm { BR              X10 }
      }

      __asm { BR              X10 }
    }

    uint64_t v9 = 4LL;
    if (v12 > 4)
    {
      unint64_t v7 = v11[4];
      if (v7)
      {
        uint64_t v8 = 4LL;
        goto LABEL_17;
      }

      while (1)
      {
        uint64_t v8 = v9 + 1;
        if (__OFADD__(v9, 1LL))
        {
          __break(1u);
          JUMPOUT(0x186BEDE60LL);
        }

        if (v8 >= v12) {
          break;
        }
        unint64_t v7 = v11[v8];
        ++v9;
        if (v7) {
          goto LABEL_17;
        }
      }
    }
  }

  return swift_release();
}

void sub_186BEDEB4(int a1, uint64_t a2, uint64_t a3)
{
  if ((a1 & 0x10000) == 0) {
    __asm { BR              X10 }
  }

  __asm { BR              X10 }

BOOL sub_186BEDFC8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, __int16 a11, char a12, char a13, char a14, char a15)
{
  a10 = v15;
  a11 = v16;
  a12 = BYTE2(v16);
  a13 = BYTE3(v16);
  a14 = BYTE4(v16);
  a15 = BYTE5(v16);
  BOOL result = (*((_BYTE *)&a10 + v18) & v17) != 0;
  if (*MEMORY[0x1895F89C0] != v20) {
    JUMPOUT(0x186BEE320LL);
  }
  return result;
}

void sub_186BEE348(uint64_t a1, unint64_t a2)
{
}

void sub_186BEE354(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __asm { BR              X10 }

#error "186BEE3AC: local variable allocation failed (funcsize=163)"
void sub_186BEE7A4(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  sub_186BF06B0(a1, a2);
  sub_186BEFAD8(v2);
}

void sub_186BEE7F4(uint64_t *a1)
{
}

char *sub_186BEE808( uint64_t a1, char a2, uint64_t (*a3)(void *), uint64_t a4, uint64_t a5, unint64_t a6)
{
  v46[3] = a4;
  if (a1 < 0)
  {
LABEL_41:
    __break(1u);
    goto LABEL_42;
  }

  uint64_t v11 = a5;
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = MEMORY[0x18961AFE8];
  uint64_t v43 = swift_allocObject();
  *(void *)(v43 + 16) = 15LL;
  uint64_t v15 = HIBYTE(a6) & 0xF;
  if (!a1 || ((a6 & 0x2000000000000000LL) != 0 ? (uint64_t v16 = HIBYTE(a6) & 0xF) : (uint64_t v16 = v11 & 0xFFFFFFFFFFFFLL), !v16))
  {
    if ((a6 & 0x2000000000000000LL) == 0) {
      uint64_t v15 = v11 & 0xFFFFFFFFFFFFLL;
    }
    uint64_t v30 = 7LL;
    if (((a6 >> 60) & ((v11 & 0x800000000000000LL) == 0)) != 0) {
      uint64_t v30 = 11LL;
    }
    sub_186BEF6A0(v30 | (v15 << 16), v43, a2 & 1, v14);
    swift_bridgeObjectRelease();
    unint64_t v10 = *(char **)(v14 + 16);
    swift_bridgeObjectRetain();
    swift_release();
    goto LABEL_38;
  }

  uint64_t v38 = a1;
  uint64_t v39 = v14;
  unint64_t v44 = 4 * v16;
  unint64_t v10 = (char *)MEMORY[0x18961AFE8];
  unint64_t v9 = 15LL;
  unint64_t v8 = 15LL;
  unint64_t v17 = 15LL;
  while (1)
  {
    v46[0] = sub_186C5AE7C();
    v46[1] = v18;
    uint64_t v19 = a3(v46);
    if (v7)
    {
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v10;
    }

    uint64_t v6 = v19;
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0) {
      break;
    }
    unint64_t v9 = sub_186C5ADBC();
LABEL_9:
    if (v44 == v9 >> 14) {
      goto LABEL_29;
    }
  }

  if (v8 >> 14 == v9 >> 14 && (a2 & 1) != 0)
  {
    unint64_t v9 = sub_186C5ADBC();
    *(void *)(v43 + 16) = v9;
    unint64_t v8 = v9;
    unint64_t v17 = v9;
    goto LABEL_9;
  }

  if (v9 >> 14 < v8 >> 14)
  {
    __break(1u);
    goto LABEL_41;
  }

  uint64_t v20 = sub_186C5AE94();
  uint64_t v40 = v21;
  uint64_t v41 = v20;
  uint64_t v23 = v22;
  uint64_t v25 = v24;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    unint64_t v10 = sub_186BEF7AC(0LL, *((void *)v10 + 2) + 1LL, 1, v10);
  }
  unint64_t v27 = *((void *)v10 + 2);
  unint64_t v26 = *((void *)v10 + 3);
  uint64_t v6 = v27 + 1;
  if (v27 >= v26 >> 1) {
    unint64_t v10 = sub_186BEF7AC((char *)(v26 > 1), v27 + 1, 1, v10);
  }
  *((void *)v10 + 2) = v6;
  char v28 = &v10[32 * v27];
  *((void *)v28 + 4) = v41;
  *((void *)v28 + 5) = v23;
  *((void *)v28 + 6) = v25;
  *((void *)v28 + 7) = v40;
  *(void *)(v39 + 16) = v10;
  uint64_t v29 = sub_186C5ADBC();
  unint64_t v9 = v29;
  *(void *)(v43 + 16) = v29;
  if (*((void *)v10 + 2) != v38)
  {
    unint64_t v8 = v29;
    unint64_t v17 = v29;
    goto LABEL_9;
  }

  unint64_t v17 = v29;
  unint64_t v8 = v29;
LABEL_29:
  if (v44 == v8 >> 14 && (a2 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_37;
  }

  if (v44 >= v17 >> 14)
  {
    uint64_t v6 = sub_186C5AE94();
    unint64_t v8 = v31;
    unint64_t v9 = v32;
    uint64_t v11 = v33;
    swift_bridgeObjectRelease();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      goto LABEL_43;
    }
    goto LABEL_34;
  }

uint64_t sub_186BEEC20(uint64_t a1, unsigned int a2)
{
  uint64_t v5 = *v2;
  sub_186C5B59C();
  sub_186C5B5A8();
  if ((a2 & 0x10000) != 0) {
    sub_186C5B5C0();
  }
  else {
    sub_186C5B5B4();
  }
  uint64_t v6 = sub_186C5B5D8();
  uint64_t v7 = -1LL << *(_BYTE *)(v5 + 32);
  unint64_t v8 = v6 & ~v7;
  if (((*(void *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v8) & 1) == 0)
  {
LABEL_14:
    int v13 = HIWORD(a2) & 1;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v15 = *v2;
    *uint64_t v2 = 0x8000000000000000LL;
    sub_186BEF094(a2 & 0x1FFFF, v8, isUniquelyReferenced_nonNull_native);
    *uint64_t v2 = v15;
    swift_bridgeObjectRelease();
    uint64_t result = 1LL;
    goto LABEL_15;
  }

  uint64_t v9 = ~v7;
  while (1)
  {
    unint64_t v10 = (unsigned __int16 *)(*(void *)(v5 + 48) + 4 * v8);
    if ((v10[1] & 1) == 0) {
      break;
    }
LABEL_6:
    unint64_t v8 = (v8 + 1) & v9;
    if (((*(void *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v8) & 1) == 0) {
      goto LABEL_14;
    }
  }

uint64_t sub_186BEED98()
{
  char v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C6A21D0);
  uint64_t result = sub_186C5B23C();
  uint64_t v4 = result;
  if (*(void *)(v2 + 16))
  {
    int64_t v5 = 0LL;
    uint64_t v29 = (void *)(v2 + 56);
    uint64_t v6 = 1LL << *(_BYTE *)(v2 + 32);
    if (v6 < 64) {
      uint64_t v7 = ~(-1LL << v6);
    }
    else {
      uint64_t v7 = -1LL;
    }
    unint64_t v8 = v7 & *(void *)(v2 + 56);
    int64_t v9 = (unint64_t)(v6 + 63) >> 6;
    uint64_t v10 = result + 56;
    while (1)
    {
      if (v8)
      {
        unint64_t v13 = __clz(__rbit64(v8));
        v8 &= v8 - 1;
        unint64_t v14 = v13 | (v5 << 6);
      }

      else
      {
        int64_t v15 = v5 + 1;
        if (__OFADD__(v5, 1LL))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }

        if (v15 >= v9) {
          goto LABEL_36;
        }
        unint64_t v16 = v29[v15];
        ++v5;
        if (!v16)
        {
          int64_t v5 = v15 + 1;
          if (v15 + 1 >= v9) {
            goto LABEL_36;
          }
          unint64_t v16 = v29[v5];
          if (!v16)
          {
            int64_t v5 = v15 + 2;
            if (v15 + 2 >= v9) {
              goto LABEL_36;
            }
            unint64_t v16 = v29[v5];
            if (!v16)
            {
              int64_t v17 = v15 + 3;
              if (v17 >= v9)
              {
LABEL_36:
                uint64_t v28 = 1LL << *(_BYTE *)(v2 + 32);
                if (v28 > 63) {
                  bzero(v29, ((unint64_t)(v28 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
                }
                else {
                  void *v29 = -1LL << v28;
                }
                char v1 = v0;
                *(void *)(v2 + 16) = 0LL;
                break;
              }

              unint64_t v16 = v29[v17];
              if (!v16)
              {
                while (1)
                {
                  int64_t v5 = v17 + 1;
                  if (__OFADD__(v17, 1LL)) {
                    goto LABEL_42;
                  }
                  if (v5 >= v9) {
                    goto LABEL_36;
                  }
                  unint64_t v16 = v29[v5];
                  ++v17;
                  if (v16) {
                    goto LABEL_23;
                  }
                }
              }

              int64_t v5 = v17;
            }
          }
        }

uint64_t sub_186BEF094(uint64_t result, unint64_t a2, char a3)
{
  int v5 = result;
  unint64_t v6 = *(void *)(*v3 + 16);
  unint64_t v7 = *(void *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0) {
    goto LABEL_21;
  }
  if ((a3 & 1) != 0)
  {
    sub_186BEED98();
  }

  else
  {
    if (v7 > v6)
    {
      uint64_t result = (uint64_t)sub_186BEF234();
      goto LABEL_21;
    }

    sub_186BEF3D8();
  }

  uint64_t v8 = *v3;
  sub_186C5B59C();
  sub_186C5B5A8();
  if ((v5 & 0x10000) != 0) {
    sub_186C5B5C0();
  }
  else {
    sub_186C5B5B4();
  }
  uint64_t result = sub_186C5B5D8();
  uint64_t v9 = -1LL << *(_BYTE *)(v8 + 32);
  a2 = result & ~v9;
  if (((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a2) & 1) != 0)
  {
    uint64_t v10 = ~v9;
    do
    {
      unint64_t v11 = (unsigned __int16 *)(*(void *)(v8 + 48) + 4 * a2);
      if ((v11[1] & 1) != 0)
      {
      }

      else if ((v5 & 0x10000) == 0 && *v11 == v5)
      {
LABEL_20:
        uint64_t result = sub_186C5B524();
        __break(1u);
        break;
      }

      a2 = (a2 + 1) & v10;
    }

    while (((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a2) & 1) != 0);
  }

void *sub_186BEF234()
{
  char v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C6A21D0);
  uint64_t v2 = *v0;
  uint64_t v3 = sub_186C5B230();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    *char v1 = v4;
    return result;
  }

  uint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_30;
    }

    if (v20 >= v13) {
      goto LABEL_28;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21)
      {
        int64_t v9 = v20 + 2;
        if (v20 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v21 = *(void *)(v6 + 8 * v9);
        if (!v21) {
          break;
        }
      }
    }

uint64_t sub_186BEF3D8()
{
  char v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C6A21D0);
  uint64_t result = sub_186C5B23C();
  uint64_t v4 = result;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_38:
    *char v1 = v4;
    return result;
  }

  int64_t v5 = 0LL;
  uint64_t v6 = v2 + 56;
  uint64_t v7 = 1LL << *(_BYTE *)(v2 + 32);
  if (v7 < 64) {
    uint64_t v8 = ~(-1LL << v7);
  }
  else {
    uint64_t v8 = -1LL;
  }
  unint64_t v9 = v8 & *(void *)(v2 + 56);
  int64_t v28 = (unint64_t)(v7 + 63) >> 6;
  uint64_t v10 = result + 56;
  while (1)
  {
    if (v9)
    {
      unint64_t v13 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      unint64_t v14 = v13 | (v5 << 6);
      goto LABEL_24;
    }

    int64_t v15 = v5 + 1;
    if (__OFADD__(v5, 1LL))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }

    if (v15 >= v28) {
      goto LABEL_36;
    }
    unint64_t v16 = *(void *)(v6 + 8 * v15);
    ++v5;
    if (!v16)
    {
      int64_t v5 = v15 + 1;
      if (v15 + 1 >= v28) {
        goto LABEL_36;
      }
      unint64_t v16 = *(void *)(v6 + 8 * v5);
      if (!v16)
      {
        int64_t v5 = v15 + 2;
        if (v15 + 2 >= v28) {
          goto LABEL_36;
        }
        unint64_t v16 = *(void *)(v6 + 8 * v5);
        if (!v16) {
          break;
        }
      }
    }

LABEL_40:
  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

    int64_t v17 = (v28 - 1) & v28;
    BOOL v26 = __clz(__rbit64(v28)) + (v29 << 6);
    uint64_t v6 = v29;
LABEL_41:
    unint64_t v31 = (uint64_t *)(*(void *)(v3 + 48) + 16 * v26);
    uint64_t v21 = *v31;
    char v20 = v31[1];
    if (v2 >= v23)
    {
      uint64_t result = swift_bridgeObjectRetain();
      goto LABEL_20;
    }

    uint64_t result = swift_bridgeObjectRetain();
  }

  __break(1u);
LABEL_66:
  __break(1u);
  return result;
}

uint64_t sub_186BEF6A0(unint64_t a1, uint64_t a2, unsigned __int8 a3, uint64_t a4)
{
  unint64_t v10 = *(void *)(a2 + 16) >> 14;
  int v11 = (v10 == a1 >> 14) & a3;
  if (v11 == 1) {
    return v11 ^ 1u;
  }
  if (a1 >> 14 < v10)
  {
    __break(1u);
    goto LABEL_9;
  }

  uint64_t v4 = a4;
  uint64_t v5 = sub_186C5AE94();
  uint64_t v6 = v12;
  uint64_t v7 = v13;
  uint64_t v8 = v14;
  unint64_t v9 = *(char **)(v4 + 16);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(void *)(v4 + 16) = v9;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_9:
    unint64_t v9 = sub_186BEF7AC(0LL, *((void *)v9 + 2) + 1LL, 1, v9);
    *(void *)(v4 + 16) = v9;
  }

  unint64_t v17 = *((void *)v9 + 2);
  unint64_t v16 = *((void *)v9 + 3);
  if (v17 >= v16 >> 1)
  {
    unint64_t v9 = sub_186BEF7AC((char *)(v16 > 1), v17 + 1, 1, v9);
    *(void *)(v4 + 16) = v9;
  }

  *((void *)v9 + 2) = v17 + 1;
  uint64_t v18 = &v9[32 * v17];
  *((void *)v18 + 4) = v5;
  *((void *)v18 + 5) = v6;
  *((void *)v18 + 6) = v7;
  *((void *)v18 + 7) = v8;
  return v11 ^ 1u;
}

char *sub_186BEF7AC(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_18C6A21F0);
    unint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 1;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 5);
  }

  else
  {
    unint64_t v10 = (char *)MEMORY[0x18961AFE8];
  }

  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[32 * v8]) {
      memmove(v13, v14, 32 * v8);
    }
    *((void *)a4 + 2) = 0LL;
  }

  else
  {
    swift_arrayInitWithCopy();
  }

  swift_bridgeObjectRelease();
  return v10;
}

char *sub_186BEF8AC(char *a1, int64_t a2, char a3)
{
  uint64_t result = sub_186BEF8E4(a1, a2, a3, *v3);
  *uint64_t v3 = result;
  return result;
}

char *sub_186BEF8C8(char *a1, int64_t a2, char a3)
{
  uint64_t result = sub_186BEF9D8(a1, a2, a3, *v3);
  *uint64_t v3 = result;
  return result;
}

char *sub_186BEF8E4(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_18C6A21D8);
    unint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 29;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 2);
  }

  else
  {
    unint64_t v10 = (char *)MEMORY[0x18961AFE8];
  }

  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  size_t v15 = 4 * v8;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[v15]) {
      memmove(v13, v14, v15);
    }
    *((void *)a4 + 2) = 0LL;
  }

  else
  {
    memcpy(v13, v14, v15);
  }

  swift_release();
  return v10;
}

char *sub_186BEF9D8(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_18C6A21C0);
    unint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }

  else
  {
    unint64_t v10 = (char *)MEMORY[0x18961AFE8];
  }

  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0LL;
  }

  else
  {
    swift_arrayInitWithCopy();
  }

  swift_release();
  return v10;
}

void sub_186BEFAD8(uint64_t a1)
{
  __asm { BR              X12 }

uint64_t sub_186BEFB40@<X0>(uint64_t a1@<X8>)
{
  uint64_t v12 = v1;
  LOWORD(v13) = a1;
  BYTE2(v13) = BYTE2(a1);
  HIBYTE(v13) = BYTE3(a1);
  unsigned __int8 v14 = BYTE4(a1);
  unsigned __int8 v15 = BYTE5(a1);
  unsigned __int8 v16 = BYTE6(a1);
  v5(&v12, v3, v2);
  uint64_t v6 = v12;
  uint64_t v7 = v13;
  uint64_t v8 = v14;
  uint64_t v9 = v15;
  uint64_t v10 = v16;
  uint64_t result = sub_186BF06F4(v3, v2);
  void *v4 = v6;
  v4[1] = v7 | (v8 << 32) | (v9 << 40) | (v10 << 48);
  return result;
}

uint64_t sub_186BEFD58( int *a1, uint64_t a2, unint64_t a3, void (*a4)(uint64_t, uint64_t, unint64_t))
{
  uint64_t result = sub_186C5AAB0();
  uint64_t v9 = *a1;
  if (a1[1] < (int)v9)
  {
    __break(1u);
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }

  uint64_t result = sub_186C5A90C();
  if (result)
  {
    uint64_t v10 = result;
    uint64_t result = sub_186C5A930();
    BOOL v11 = __OFSUB__(v9, result);
    uint64_t v12 = v9 - result;
    if (!v11)
    {
      sub_186C5A924();
      a4(v10 + v12, a2, a3);
      return sub_186BF06F4(a2, a3);
    }

    goto LABEL_6;
  }

LABEL_7:
  __break(1u);
  return result;
}

  (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v5 + OBJC_IVAR____TtC6ktrace8Reporter_logger, v11);
  type metadata accessor for Reporter();
  swift_deallocPartialClassInstance();
  return v5;
}

  sub_186C2B65C(v14, v15, a2, a3, a4, a5);
  return swift_bridgeObjectRelease();
}

    if (++v17 == v12)
    {
      swift_bridgeObjectRelease();
      unint64_t v2 = v35;
      uint64_t v1 = v36;
      uint64_t v10 = v41;
      goto LABEL_33;
    }
  }

  sub_186C27E58();
  swift_bridgeObjectRetain();
  __int16 v19 = swift_bridgeObjectRetain();
  char v20 = 0LL;
  while (1)
  {
    uint64_t v21 = v19;
    unint64_t v22 = *(_BYTE *)(v19 + v20 + 32);
    __int128 v66 = v22;
    __int128 v65 = 0;
    sub_186C5AEDC();
    sub_186C5AEDC();
    if (v63 == v61 && v64 == v62) {
      break;
    }
    char v24 = sub_186C5B4F4();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v24 & 1) != 0) {
      goto LABEL_23;
    }
    __int128 v66 = v22;
    __int128 v65 = 1;
    sub_186C5AEDC();
    sub_186C5AEDC();
    if (v63 == v61 && v64 == v62) {
      break;
    }
    unint64_t v25 = sub_186C5B4F4();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v25 & 1) != 0) {
      goto LABEL_23;
    }
    ++v20;
    __int16 v19 = v21;
    if (v44 == v20)
    {
      swift_bridgeObjectRelease();
      uint64_t result = swift_bridgeObjectRelease();
      BOOL v11 = v42;
      unsigned int v13 = v39;
      uint64_t v12 = v40;
      unsigned __int8 v15 = v37;
      unsigned __int8 v14 = v38;
      goto LABEL_7;
    }
  }

  swift_bridgeObjectRelease_n();
LABEL_23:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_186C27ED0((uint64_t)&v45);
  if (*((void *)&v43 + 1))
  {
    uint64_t v10 = v41;
    unint64_t v2 = v35;
    uint64_t v1 = v36;
    BOOL v11 = v42;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v10 = sub_186C01C3C(0LL, *((void *)v41 + 2) + 1LL, 1, v41);
    }
    uint64_t v27 = *((void *)v10 + 2);
    BOOL v26 = *((void *)v10 + 3);
    if (v27 >= v26 >> 1) {
      uint64_t v10 = sub_186C01C3C((char *)(v26 > 1), v27 + 1, 1, v10);
    }
    *((void *)v10 + 2) = v27 + 1;
    *(_OWORD *)&v10[16 * v27 + 32] = v43;
  }

  else
  {
    unint64_t v2 = v35;
    uint64_t v1 = v36;
    uint64_t v10 = v41;
    BOOL v11 = v42;
  }

  if (v11 != v1) {
    goto LABEL_34;
  }
LABEL_35:
  swift_bridgeObjectRelease();
  return (uint64_t)v10;
}

  unsigned int v13 = sub_186C44B38(v9, v10, a5);
  swift_bridgeObjectRelease();
  return v13;
}

  BOOL v11 = sub_186C4D630(v7, v8, a3);
  swift_bridgeObjectRelease();
  return v11 | ((((unint64_t)v11 >> 32) & 1) << 32);
}

void sub_186BEFE04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __asm { BR              X10 }

uint64_t sub_186BEFE64( int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, __int16 a10, char __s2, char a12, char a13, char a14, char a15, char a16, char a17, char a18, char a19, char a20, char a21, char a22, char a23, char a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37)
{
  uint64_t v42 = v39;
  __int16 v43 = v40;
  char v44 = BYTE2(v40);
  char v45 = BYTE3(v40);
  char v46 = BYTE4(v40);
  char v47 = BYTE5(v40);
  if (!v38)
  {
    __break(1u);
    JUMPOUT(0x186BF0048LL);
  }

  uint64_t result = memcmp(v38, &v42, BYTE6(v40));
  *__int128 v37 = (_DWORD)result == 0;
  return result;
}

void sub_186BF006C(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }

uint64_t sub_186BF00C8()
{
  uint64_t v8 = v3;
  __int16 v9 = v4;
  char v10 = BYTE2(v4);
  char v11 = BYTE3(v4);
  char v12 = BYTE4(v4);
  char v13 = BYTE5(v4);
  sub_186BEFE04((uint64_t)&v8, (uint64_t)&v8 + BYTE6(v4), v1, v0);
  sub_186BF06F4(v1, v0);
  if (!v2) {
    char v5 = v7;
  }
  return v5 & 1;
}

uint64_t sub_186BF0290(void *a1)
{
  return sub_186BF0738(a1) & 1;
}

unint64_t sub_186BF02A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = MEMORY[0x18961AFE8];
  if (!v3) {
    return v4;
  }
  uint64_t v27 = MEMORY[0x18961AFE8];
  sub_186BEF8AC(0LL, v3, 0);
  uint64_t v4 = v27;
  for (uint64_t i = a1 + 56; ; i += 32LL)
  {
    unint64_t v7 = *(void *)(i - 24);
    unint64_t v8 = *(void *)(i - 16);
    swift_bridgeObjectRetain();
    BOOL v9 = sub_186BED480(83LL, 0xE100000000000000LL, v7, v8);
    if (v9) {
      break;
    }
    if (!sub_186BED480(67LL, 0xE100000000000000LL, v7, v8)) {
      goto LABEL_21;
    }
    swift_bridgeObjectRetain();
    unint64_t result = sub_186C5B0B0();
    if ((v16 & 1) != 0) {
      unint64_t result = v8;
    }
    if (v8 >> 14 < result >> 14) {
      goto LABEL_25;
    }
    sub_186C5B0D4();
    swift_bridgeObjectRelease();
    unint64_t v17 = sub_186BF0D1C();
    unint64_t v13 = sub_186C29F6C(MEMORY[0x189618C50], v17);
    char v19 = v18;
    swift_bridgeObjectRelease();
    if ((v19 & 1) != 0 || v13 >= 0x100)
    {
LABEL_21:
      type metadata accessor for KTraceRecordError();
      sub_186BF0CD4();
      swift_allocError();
      *unint64_t v23 = a2;
      v23[1] = a3;
      swift_storeEnumTagMultiPayload();
      swift_bridgeObjectRetain();
      swift_willThrow();
LABEL_22:
      swift_release();
      swift_bridgeObjectRelease();
      return v4;
    }

LABEL_16:
    if (v26) {
      goto LABEL_22;
    }
    swift_bridgeObjectRelease();
    unint64_t v21 = *(void *)(v27 + 16);
    unint64_t v20 = *(void *)(v27 + 24);
    if (v21 >= v20 >> 1) {
      sub_186BEF8AC((char *)(v20 > 1), v21 + 1, 1);
    }
    *(void *)(v27 + 16) = v21 + 1;
    uint64_t v22 = v27 + 4 * v21;
    *(_WORD *)(v22 + 32) = v13;
    *(_BYTE *)(v22 + 34) = v9;
    if (!--v3) {
      return v4;
    }
  }

  swift_bridgeObjectRetain();
  unint64_t result = sub_186C5B0B0();
  if ((v11 & 1) != 0) {
    unint64_t result = v8;
  }
  if (v8 >> 14 >= result >> 14)
  {
    sub_186C5B0D4();
    swift_bridgeObjectRelease();
    unint64_t v12 = sub_186BF0D1C();
    unint64_t v13 = sub_186C29F6C(MEMORY[0x189618C50], v12);
    char v15 = v14;
    swift_bridgeObjectRelease();
    if ((v15 & 1) != 0 || v13 >> 16) {
      goto LABEL_21;
    }
    goto LABEL_16;
  }

  __break(1u);
LABEL_25:
  __break(1u);
  return result;
}

  while (1)
  {
    unint64_t v25 = *((void *)v6 + 3);
    uint64_t v26 = v25 >> 1;
    int64_t v3 = v19 + 1;
    if (v19 < v26) {
      goto LABEL_18;
    }
LABEL_15:
    *((void *)v6 + 2) = v19;
  }

  uint64_t v6 = sub_186C01C3C((char *)(v25 > 1), v19 + 1, 1, v6);
  uint64_t v26 = *((void *)v6 + 3) >> 1;
  if (v19 >= v26) {
    goto LABEL_15;
  }
LABEL_18:
  uint64_t v27 = &v6[16 * v19];
  *((void *)v27 + 4) = v23;
  *((void *)v27 + 5) = v22;
  if (v24 == *(void *)(v17 + 16))
  {
LABEL_28:
    *((void *)v6 + 2) = v3;
    goto LABEL_9;
  }

  int64_t v28 = v27 + 56;
  while (1)
  {
    uint64_t v29 = sub_186C020FC((uint64_t (*)())v32, v24, v17);
    unint64_t v23 = *v30;
    uint64_t v22 = v30[1];
    swift_bridgeObjectRetain();
    unint64_t result = ((uint64_t (*)(_BYTE *, void))v29)(v32, 0LL);
    unint64_t v31 = v24 + 1;
    if (__OFADD__(v24, 1LL)) {
      break;
    }
    if (v26 == v3)
    {
      ++v24;
      char v19 = v26;
      *((void *)v6 + 2) = v26;
      goto LABEL_16;
    }

    *(v28 - ktrace_session_set_default_event_names_enabled(global_session, 1) = v23;
    *int64_t v28 = v22;
    ++v3;
    ++v24;
    v28 += 2;
    if (v31 == *(void *)(v17 + 16)) {
      goto LABEL_28;
    }
  }

  __break(1u);
  return result;
}

        __break(1u);
      }
    }

    else
    {
      __break(1u);
    }

    uint64_t v4 = (uint64_t)sub_186C38A10(v4);
    if (*(void *)(v4 + 16)) {
      goto LABEL_12;
    }
    goto LABEL_16;
  }

  swift_bridgeObjectRelease();
LABEL_2:
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C6A2B40);
  return swift_storeEnumTagMultiPayload();
}

  uint64_t v2 = *((void *)v4 + 2);
  int64_t v3 = v38[0];
  __int128 v37 = v38[1];
  unint64_t v13 = v39;
  uint64_t v6 = v40;
  if (v41)
  {
    unint64_t v17 = (v41 - 1) & v41;
    char v18 = __clz(__rbit64(v41)) | (v40 << 6);
    __int128 v36 = (unint64_t)(v39 + 64) >> 6;
    goto LABEL_18;
  }

uint64_t sub_186BF05A8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  sub_186BF0C90();
  uint64_t result = sub_186C5AF78();
  uint64_t v8 = result;
  if (v2)
  {
    uint64_t v4 = (unsigned __int8 *)(a1 + 34);
    do
    {
      int v5 = *((unsigned __int16 *)v4 - 1);
      int v6 = *v4;
      v4 += 4;
      sub_186BEEC20((uint64_t)v7, v5 | (v6 << 16));
      --v2;
    }

    while (v2);
    return v8;
  }

  return result;
}

unint64_t sub_186BF0620()
{
  unint64_t result = qword_18C6A21B0;
  if (!qword_18C6A21B0)
  {
    uint64_t v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_18C6A21A8);
    unint64_t result = MEMORY[0x186E46630](MEMORY[0x189618458], v1);
    atomic_store(result, (unint64_t *)&qword_18C6A21B0);
  }

  return result;
}

uint64_t __swift_instantiateConcreteTypeFromMangledNameAbstract(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = MEMORY[0x186E46624](255LL, (char *)a1 + (int)result, -(result >> 32), 0LL, 0LL);
    *a1 = result;
  }

  return result;
}

uint64_t sub_186BF06B0(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_retain();
  }

  return swift_retain();
}

uint64_t sub_186BF06F4(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_release();
  }

  return swift_release();
}

uint64_t sub_186BF0738(void *a1)
{
  uint64_t v2 = *(void **)(v1 + 16);
  if (*a1 == *v2 && a1[1] == v2[1]) {
    return 1LL;
  }
  else {
    return sub_186C5B4F4() & 1;
  }
}

uint64_t sub_186BF078C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result = sub_186C5A90C();
  uint64_t v11 = result;
  if (result)
  {
    uint64_t result = sub_186C5A930();
    if (__OFSUB__(a1, result))
    {
LABEL_15:
      __break(1u);
      return result;
    }

    v11 += a1 - result;
  }

  BOOL v12 = __OFSUB__(a2, a1);
  uint64_t v13 = a2 - a1;
  if (v12)
  {
    __break(1u);
    goto LABEL_15;
  }

  uint64_t v14 = sub_186C5A924();
  if (v14 >= v13) {
    uint64_t v15 = v13;
  }
  else {
    uint64_t v15 = v14;
  }
  uint64_t v16 = v11 + v15;
  if (v11) {
    uint64_t v17 = v16;
  }
  else {
    uint64_t v17 = 0LL;
  }
  sub_186BEFE04(v11, v17, a4, a5);
  if (!v5) {
    char v18 = v19;
  }
  return v18 & 1;
}

void sub_186BF0840(uint64_t a1, uint64_t a2)
{
  __asm { BR              X11 }

uint64_t sub_186BF0884()
{
  return ((uint64_t (*)(void))((char *)&loc_186BF08B8 + dword_186BF096C[v0 >> 62]))();
}

BOOL sub_186BF08C8@<W0>(uint64_t a1@<X8>)
{
  BOOL result = 0;
  if (a1 == BYTE6(v1))
  {
    if (a1 < 1) {
      return 1;
    }
    sub_186BF06B0(v2, v1);
    sub_186BF006C(v4, v3);
    if ((v5 & 1) != 0) {
      return 1;
    }
  }

  return result;
}

unint64_t sub_186BF0980()
{
  unint64_t result = qword_18C6A21B8;
  if (!qword_18C6A21B8)
  {
    unint64_t result = MEMORY[0x186E46630](&unk_186C5E550, &type metadata for Filter);
    atomic_store(result, (unint64_t *)&qword_18C6A21B8);
  }

  return result;
}

uint64_t __swift_memcpy3_2(uint64_t result, __int16 *a2)
{
  __int16 v2 = *a2;
  *(_BYTE *)(result + 2) = *((_BYTE *)a2 + 2);
  *(_WORD *)unint64_t result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for Filter(unsigned __int16 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0xFF)
  {
    if ((a2 + 33554177) >> 24)
    {
      int v2 = *((unsigned __int8 *)a1 + 3);
      if (*((_BYTE *)a1 + 3)) {
        return (*a1 | (*((unsigned __int8 *)a1 + 2) << 16) | (v2 << 24)) - 16776961;
      }
    }

    else
    {
      int v2 = *(unsigned __int16 *)((char *)a1 + 3);
    }
  }

  unsigned int v4 = *((unsigned __int8 *)a1 + 2);
  if (v4 <= 1) {
    int v5 = -1;
  }
  else {
    int v5 = v4 ^ 0xFF;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for Filter(uint64_t result, unsigned int a2, unsigned int a3)
{
  if ((a3 + 33554177) >> 24) {
    int v3 = 1;
  }
  else {
    int v3 = 2;
  }
  if (a3 <= 0xFE) {
    int v3 = 0;
  }
  if (a2 > 0xFE)
  {
    *(_WORD *)unint64_t result = a2 - 255;
    *(_BYTE *)(result + 2) = (a2 - 255) >> 16;
    if (v3)
    {
      unsigned int v4 = ((a2 - 255) >> 24) + 1;
      if (v3 == 2) {
        *(_WORD *)(result + 3) = v4;
      }
      else {
        *(_BYTE *)(result + 3) = v4;
      }
    }
  }

  else
  {
    if (!v3) {
      goto LABEL_10;
    }
    if (v3 == 2)
    {
      *(_WORD *)(result + 3) = 0;
LABEL_10:
      if (!a2) {
        return result;
      }
LABEL_16:
      *(_BYTE *)(result + 2) = -(char)a2;
      return result;
    }

    *(_BYTE *)(result + 3) = 0;
    if (a2) {
      goto LABEL_16;
    }
  }

  return result;
}

uint64_t sub_186BF0AD8(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 2);
}

uint64_t sub_186BF0AE0(uint64_t result, char a2)
{
  *(_BYTE *)(result + 2) = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for Filter()
{
  return &type metadata for Filter;
}

ValueMetadata *type metadata accessor for SubclassFilter()
{
  return &type metadata for SubclassFilter;
}

uint64_t *initializeBufferWithCopyOfBuffer for SubclassBitmap(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  unint64_t v4 = a2[1];
  sub_186BF06B0(*a2, v4);
  *a1 = v3;
  a1[1] = v4;
  return a1;
}

uint64_t destroy for SubclassBitmap(uint64_t a1)
{
  return sub_186BF06F4(*(void *)a1, *(void *)(a1 + 8));
}

uint64_t *assignWithCopy for SubclassBitmap(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  unint64_t v4 = a2[1];
  sub_186BF06B0(*a2, v4);
  uint64_t v5 = *a1;
  unint64_t v6 = a1[1];
  *a1 = v3;
  a1[1] = v4;
  sub_186BF06F4(v5, v6);
  return a1;
}

__n128 __swift_memcpy16_8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

uint64_t *assignWithTake for SubclassBitmap(uint64_t *a1, _OWORD *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = a1[1];
  *(_OWORD *)a1 = *a2;
  sub_186BF06F4(v3, v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for SubclassBitmap(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0xD && *(_BYTE *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 13);
  }
  unsigned int v3 = (((*(void *)(a1 + 8) >> 60) >> 2) & 0xFFFFFFF3 | (4 * ((*(void *)(a1 + 8) >> 60) & 3))) ^ 0xF;
  if (v3 >= 0xC) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for SubclassBitmap(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xC)
  {
    *(void *)__n128 result = a2 - 13;
    *(void *)(result + _Block_object_dispose(va, 8) = 0LL;
    if (a3 >= 0xD) {
      *(_BYTE *)(result + 16) = 1;
    }
  }

  else
  {
    if (a3 >= 0xD) {
      *(_BYTE *)(result + 16) = 0;
    }
    if (a2)
    {
      *(void *)__n128 result = 0LL;
      *(void *)(result + _Block_object_dispose(va, 8) = (unint64_t)(((-a2 >> 2) & 3) - 4 * a2) << 60;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for SubclassBitmap()
{
  return &type metadata for SubclassBitmap;
}

unint64_t sub_186BF0C90()
{
  unint64_t result = qword_18C6A21C8;
  if (!qword_18C6A21C8)
  {
    unint64_t result = MEMORY[0x186E46630](&unk_186C5E510, &type metadata for Filter);
    atomic_store(result, (unint64_t *)&qword_18C6A21C8);
  }

  return result;
}

unint64_t sub_186BF0CD4()
{
  unint64_t result = qword_18C6A21E0;
  if (!qword_18C6A21E0)
  {
    uint64_t v1 = type metadata accessor for KTraceRecordError();
    unint64_t result = MEMORY[0x186E46630](&unk_186C60EF4, v1);
    atomic_store(result, (unint64_t *)&qword_18C6A21E0);
  }

  return result;
}

unint64_t sub_186BF0D1C()
{
  unint64_t result = qword_18C6A21E8;
  if (!qword_18C6A21E8)
  {
    unint64_t result = MEMORY[0x186E46630](MEMORY[0x189618C78], MEMORY[0x189618C50]);
    atomic_store(result, (unint64_t *)&qword_18C6A21E8);
  }

  return result;
}

uint64_t sub_186BF0D60()
{
  return swift_deallocObject();
}

uint64_t sub_186BF0D84()
{
  return swift_deallocObject();
}

uint64_t sub_186BF0D98(__int128 *a1, uint64_t a2)
{
  __int128 v2 = *a1;
  __int128 v3 = a1[1];
  *(_BYTE *)(a2 + 32) = *((_BYTE *)a1 + 32);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

void sub_186BF0DB0()
{
  __asm { BR              X10 }

uint64_t sub_186BF0DF0()
{
  return v1;
}

void sub_186BF1040()
{
}

void *sub_186BF1090(void (*a1)(uint64_t *__return_ptr, void *), uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v5 = *(void *)(a3 + 16);
  if (!v5) {
    return (void *)MEMORY[0x18961AFE8];
  }
  swift_bridgeObjectRetain();
  unint64_t v7 = (uint64_t *)(a3 + 40);
  uint64_t v8 = (void *)MEMORY[0x18961AFE8];
  do
  {
    uint64_t v10 = *v7;
    v26[0] = *(v7 - 1);
    v26[1] = v10;
    swift_bridgeObjectRetain();
    a1(&v20, v26);
    if (v4)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v8;
    }

    swift_bridgeObjectRelease();
    uint64_t v11 = v21;
    if (v21)
    {
      uint64_t v12 = v20;
      char v13 = v22;
      __int128 v18 = v24;
      __int128 v19 = v23;
      uint64_t v27 = v25;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v8 = sub_186BF7A0C(0LL, v8[2] + 1LL, 1, v8);
      }
      unint64_t v15 = v8[2];
      unint64_t v14 = v8[3];
      if (v15 >= v14 >> 1) {
        uint64_t v8 = sub_186BF7A0C((void *)(v14 > 1), v15 + 1, 1, v8);
      }
      int v8[2] = v15 + 1;
      BOOL v9 = &v8[8 * v15];
      v9[4] = v12;
      void v9[5] = v11;
      *((_BYTE *)v9 + 4_Block_object_dispose(va, 8) = v13 & 1;
      *(_OWORD *)(v9 + 7) = v19;
      *(_OWORD *)(v9 + 9) = v18;
      v9[11] = v27;
    }

    v7 += 2;
    --v5;
  }

  while (v5);
  swift_bridgeObjectRelease();
  return v8;
}

double sub_186BF1228@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = sub_186C5A9E4();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1895F8858](v4);
  unint64_t v7 = (char *)&v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = sub_186C5AA8C();
  uint64_t v35 = *(void *)(v8 - 8);
  uint64_t v36 = v8;
  MEMORY[0x1895F8858](v8);
  uint64_t v10 = (char *)&v33 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = a1[1];
  uint64_t v38 = *a1;
  uint64_t v39 = v11;
  (*(void (**)(char *, void, uint64_t))(v5 + 104))(v7, *MEMORY[0x189606998], v4);
  sub_186BFB8D0();
  sub_186C5AA80();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  id v12 = objc_allocWithZone(MEMORY[0x1896077F8]);
  char v13 = (void *)sub_186C5AA20();
  id v14 = objc_msgSend(v12, sel_initWithURL_, v13);

  uint64_t v15 = sub_186C5AD08();
  id v16 = objc_msgSend((id)v15, sel_stringByDeletingPathExtension);

  uint64_t v17 = sub_186C5AD2C();
  uint64_t v19 = v18;

  uint64_t v38 = sub_186C5AA68();
  uint64_t v39 = v20;
  strcpy((char *)v37, "AppleInternal");
  v37[7] = -4864;
  LOBYTE(v15) = sub_186C5B128();
  swift_bridgeObjectRelease();
  if ((v15 & 1) != 0)
  {
    uint64_t v38 = v17;
    uint64_t v39 = v19;
    sub_186C5ADD4();
    uint64_t v17 = v38;
    uint64_t v19 = v39;
  }

  if (!v14) {
    goto LABEL_8;
  }
  id v21 = objc_msgSend(v14, sel_infoDictionary);
  if (!v21)
  {

LABEL_8:
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v35 + 8))(v10, v36);
    double result = 0.0;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)(a2 + 4_Block_object_dispose(va, 8) = 0u;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    return result;
  }

  uint64_t v22 = v21;
  uint64_t v23 = sub_186C5ACB4();

  sub_186BF9318(v17, v19, v23, (uint64_t)&v38);
  uint64_t v24 = v38;
  uint64_t v25 = v39;
  uint64_t v26 = v40;
  uint64_t v27 = v41;
  uint64_t v28 = v42;
  uint64_t v29 = v43;
  uint64_t v30 = v44;
  uint64_t v34 = v45;

  (*(void (**)(char *, uint64_t))(v35 + 8))(v10, v36);
  if ((v40 & 1) != 0)
  {
    sub_186BFB914((uint64_t)&v38);
    double result = 0.0;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)(a2 + 4_Block_object_dispose(va, 8) = 0u;
  }

  else
  {
    *(void *)a2 = v24;
    *(void *)(a2 + _Block_object_dispose(va, 8) = v25;
    *(void *)(a2 + 16) = v26;
    *(void *)(a2 + 24) = v27;
    *(void *)(a2 + 32) = v28;
    *(void *)(a2 + 40) = v29;
    uint64_t v32 = v34;
    *(void *)(a2 + 4_Block_object_dispose(va, 8) = v30;
    *(void *)(a2 + 56) = v32;
  }

  return result;
}

uint64_t sub_186BF1538(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void **)v1;
  int64_t v4 = *(void *)(*(void *)v1 + 16LL);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
    goto LABEL_21;
  }

  char isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    unint64_t v8 = *(void *)(a1 + 16);
    if (v8) {
      goto LABEL_5;
    }
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }

  if (v4 <= v5) {
    int64_t v15 = v4 + v2;
  }
  else {
    int64_t v15 = v4;
  }
  uint64_t v3 = sub_186BF7A0C(isUniquelyReferenced_nonNull_native, v15, 1, v3);
  unint64_t v8 = *(void *)(a1 + 16);
  if (!v8) {
    goto LABEL_18;
  }
LABEL_5:
  uint64_t v9 = v3[2];
  if ((v3[3] >> 1) - v9 < (uint64_t)v8)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }

  unint64_t v10 = (unint64_t)&v3[8 * v9 + 4];
  if (a1 + 32 < v10 + (v8 << 6) && v10 < a1 + 32 + (v8 << 6)) {
    goto LABEL_24;
  }
  swift_arrayInitWithCopy();
  if (v8 < v2)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }

  uint64_t v12 = v3[2];
  BOOL v13 = __OFADD__(v12, v8);
  uint64_t v14 = v12 + v8;
  if (!v13)
  {
    int v3[2] = v14;
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)uint64_t v1 = v3;
    return result;
  }

uint64_t sub_186BF168C(uint64_t a1)
{
  return sub_186BF16C4( a1,  (uint64_t (*)(void))MEMORY[0x18961D1F0],  qword_18C6A99C8,  (uint64_t (*)(unint64_t, unint64_t, uint64_t, unint64_t))MEMORY[0x18961D1E0]);
}

uint64_t sub_186BF16A8(uint64_t a1)
{
  return sub_186BF16C4(a1, (uint64_t (*)(void))MEMORY[0x18961D190], qword_18C6A99E0, MEMORY[0x18961D188]);
}

uint64_t sub_186BF16C4( uint64_t a1, uint64_t (*a2)(void), uint64_t *a3, uint64_t (*a4)(unint64_t, unint64_t, uint64_t, unint64_t))
{
  uint64_t v6 = a2(0LL);
  __swift_allocate_value_buffer(v6, a3);
  __swift_project_value_buffer(v6, (uint64_t)a3);
  return a4(0xD000000000000010LL, 0x8000000186C65020LL, 0x72656469766F7250LL, 0xE900000000000073LL);
}

uint64_t sub_186BF1744@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t *a4@<X8>)
{
  __int128 v61 = a4;
  uint64_t v7 = sub_186C5AA8C();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = MEMORY[0x1895F8858](v7);
  __int128 v58 = &v56[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v11 = MEMORY[0x1895F8858](v9);
  __int128 v59 = &v56[-v12];
  uint64_t v13 = MEMORY[0x1895F8858](v11);
  char v70 = &v56[-v14];
  uint64_t v15 = MEMORY[0x1895F8858](v13);
  uint64_t v17 = &v56[-v16];
  MEMORY[0x1895F8858](v15);
  uint64_t v19 = &v56[-v18];
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C6A21F8);
  MEMORY[0x1895F8858](v20);
  uint64_t v22 = &v56[-((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  int v23 = os_variant_has_internal_content() & a3;
  unint64_t v24 = sub_186BF9AD0(v23);
  uint64_t v25 = *(void *)(v24 + 16);
  unint64_t v60 = v24;
  if (v25)
  {
    int v57 = v23;
    unint64_t v26 = v24 + ((*(unsigned __int8 *)(v8 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
    uint64_t v65 = *(void *)(v8 + 72);
    __int128 v66 = v22;
    uint64_t v27 = *(void (**)(_BYTE *))(v8 + 16);
    int v68 = v17;
    uint64_t v69 = v27;
    unint64_t v67 = v19;
    uint64_t v64 = v8;
    while (1)
    {
      unint64_t v72 = v26;
      v69(v22);
      uint64_t v28 = *(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v8 + 56);
      v28(v22, 0LL, 1LL, v7);
      uint64_t v71 = v25;
      uint64_t v29 = *(void (**)(char *, _BYTE *, uint64_t))(v8 + 32);
      __int128 v62 = v28;
      __int128 v63 = v29;
      v29(v19, v22, v7);
      uint64_t v30 = v70;
      sub_186C5AA38();
      sub_186C5AA44();
      unint64_t v31 = *(void (**)(_BYTE *, uint64_t))(v8 + 8);
      uint64_t v32 = v7;
      v31(v30, v7);
      uint64_t v33 = a2;
      uint64_t v34 = a1;
      uint64_t v35 = (void *)objc_opt_self();
      id v36 = objc_msgSend(v35, sel_defaultManager);
      sub_186C5AA74();
      __int128 v37 = (void *)sub_186C5AD08();
      swift_bridgeObjectRelease();
      unsigned int v38 = objc_msgSend(v36, sel_fileExistsAtPath_, v37);

      if (v38)
      {
        v31(v67, v32);
        swift_bridgeObjectRelease();
        uint64_t v44 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C6A2208);
        uint64_t v45 = v61;
        char v46 = (char *)v61 + *(int *)(v44 + 48);
        *__int128 v61 = v34;
        v45[1] = v33;
        v63(v46, v68, v32);
        __swift_instantiateConcreteTypeFromMangledName(&qword_18C6A2200);
        swift_storeEnumTagMultiPayload();
        return swift_bridgeObjectRetain();
      }

      id v39 = objc_msgSend(v35, sel_defaultManager);
      unsigned __int8 v40 = (void *)sub_186C5AD08();
      unsigned int v41 = objc_msgSend(v39, sel_fileExistsAtPath_, v40);

      a2 = v33;
      a1 = v34;
      if (v41)
      {
        swift_bridgeObjectRelease();
        if ((v57 & 1) != 0)
        {
          char v47 = v59;
          sub_186C5AA08();
          __int128 v48 = v58;
          sub_186C5AA2C();
          uint64_t v49 = sub_186C5AA14();
          uint64_t v51 = v50;
          v31(v48, v32);
          v31(v68, v32);
          v31(v67, v32);
          uint64_t v52 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C6A2208);
          __int128 v53 = v61;
          __int128 v54 = (char *)v61 + *(int *)(v52 + 48);
          *__int128 v61 = v49;
          v53[1] = v51;
          v63(v54, v47, v32);
          __swift_instantiateConcreteTypeFromMangledName(&qword_18C6A2200);
          return swift_storeEnumTagMultiPayload();
        }

        v31(v68, v32);
        v31(v67, v32);
        __int128 v55 = v61;
        *__int128 v61 = v34;
        v55[1] = v33;
        v55[2] = 0LL;
        v55[3] = 0LL;
        *((_BYTE *)v55 + 32) = 0;
        goto LABEL_10;
      }

      uint64_t v7 = v32;
      v31(v68, v32);
      uint64_t v19 = v67;
      v31(v67, v32);
      uint64_t v8 = v64;
      unint64_t v26 = v72 + v65;
      uint64_t v25 = v71 - 1;
      uint64_t v22 = v66;
      if (v71 == 1)
      {
        v62(v66, 1LL, 1LL, v7);
        break;
      }
    }
  }

  else
  {
    (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v8 + 56))(v22, 1LL, 1LL, v7);
  }

  swift_bridgeObjectRelease();
  uint64_t v42 = v61;
  *__int128 v61 = a1;
  v42[1] = a2;
  v42[2] = 0LL;
  v42[3] = 0LL;
  *((_BYTE *)v42 + 32) = 1;
LABEL_10:
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C6A2200);
  swift_storeEnumTagMultiPayload();
  return swift_bridgeObjectRetain();
}

void sub_186BF1C18( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, void *a5@<X4>, int a6@<W5>, uint64_t *a7@<X8>)
{
  uint64_t v103 = a7;
  LODWORD(v106) = a6;
  id v107 = a4;
  id v108 = a5;
  uint64_t v101 = a3;
  uint64_t v114 = *MEMORY[0x1895F89C0];
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C6A2200);
  MEMORY[0x1895F8858](v9);
  uint64_t v11 = (uint64_t *)((char *)&v97 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C6A2208);
  MEMORY[0x1895F8858](v12);
  uint64_t v14 = (char *)&v97 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = sub_186C5AA8C();
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = MEMORY[0x1895F8858](v15);
  unint64_t v105 = (char *)&v97 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v17);
  uint64_t v20 = (char *)&v97 - v19;
  int v21 = v106 & 1;
  uint64_t v106 = a1;
  unint64_t v109 = a2;
  sub_186BF1744(a1, a2, v21, v11);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v23 = v11[1];
    uint64_t v24 = v11[2];
    uint64_t v25 = v11[3];
    char v26 = *((_BYTE *)v11 + 32);
    v112[0] = *v11;
    uint64_t v22 = v112[0];
    v112[1] = v23;
    v112[2] = v24;
    v112[3] = v25;
    char v113 = v26;
    sub_186BFA2C0();
    swift_willThrowTypedImpl();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_allocError();
    *(void *)uint64_t v27 = v22;
    *(void *)(v27 + _Block_object_dispose(va, 8) = v23;
    *(void *)(v27 + 16) = v24;
    *(void *)(v27 + 24) = v25;
    *(_BYTE *)(v27 + 32) = v26;
    swift_unknownObjectRelease();
    return;
  }

  sub_186BFA418((uint64_t)v11, (uint64_t)v14, &qword_18C6A2208);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v20, &v14[*(int *)(v12 + 48)], v15);
  uint64_t v28 = (char *)v15;
  uint64_t v29 = v16;
  if (qword_18C6A3700 != -1) {
    swift_once();
  }
  uint64_t v30 = sub_186C5ABB8();
  uint64_t v31 = __swift_project_value_buffer(v30, (uint64_t)qword_18C6A99C8);
  uint64_t v32 = *(void (**)(char *, char *, uint64_t))(v16 + 16);
  uint64_t v33 = v105;
  v32(v105, v20, v15);
  swift_bridgeObjectRetain_n();
  uint64_t v100 = v31;
  uint64_t v34 = (os_log_s *)sub_186C5ABA0();
  os_log_type_t v35 = sub_186C5AFCC();
  BOOL v36 = os_log_type_enabled(v34, v35);
  v102 = v20;
  if (v36)
  {
    uint64_t v37 = swift_slowAlloc();
    uint64_t v98 = v29;
    unsigned int v38 = v33;
    uint64_t v39 = v37;
    uint64_t v99 = swift_slowAlloc();
    v112[0] = v99;
    *(_DWORD *)uint64_t v39 = 136446466;
    os_log_t v97 = v34;
    unint64_t v40 = v109;
    swift_bridgeObjectRetain();
    v110 = (char *)sub_186BF7C38(v106, v40, v112);
    sub_186C5B0EC();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v39 + 12) = 2082;
    uint64_t v41 = sub_186C5AA74();
    v110 = (char *)sub_186BF7C38(v41, v42, v112);
    uint64_t v20 = v102;
    sub_186C5B0EC();
    swift_bridgeObjectRelease();
    uint64_t v43 = *(void (**)(char *, char *))(v98 + 8);
    v43(v38, v28);
    uint64_t v34 = v97;
    _os_log_impl( &dword_186BA3000,  v97,  v35,  "loading provider %{public}s's bundle at %{public}s",  (uint8_t *)v39,  0x16u);
    uint64_t v44 = v99;
    swift_arrayDestroy();
    MEMORY[0x186E466F0](v44, -1LL, -1LL);
    MEMORY[0x186E466F0](v39, -1LL, -1LL);
  }

  else
  {
    swift_bridgeObjectRelease_n();
    uint64_t v43 = *(void (**)(char *, char *))(v29 + 8);
    v43(v33, v28);
  }

  uint64_t v45 = (uint64_t)v107;
  sub_186C5AA74();
  char v46 = v20;
  id v47 = objc_allocWithZone(MEMORY[0x1896077F8]);
  __int128 v48 = (void *)sub_186C5AD08();
  swift_bridgeObjectRelease();
  id v49 = objc_msgSend(v47, sel_initWithPath_, v48);

  if (v49)
  {
    if ((objc_msgSend(v49, sel_load) & 1) == 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain_n();
      __int128 v63 = (os_log_s *)sub_186C5ABA0();
      os_log_type_t v64 = sub_186C5AFCC();
      if (os_log_type_enabled(v63, v64))
      {
        unint64_t v105 = v28;
        uint64_t v65 = (uint8_t *)swift_slowAlloc();
        uint64_t v66 = swift_slowAlloc();
        id v107 = v49;
        unint64_t v67 = v109;
        uint64_t v68 = v66;
        v112[0] = v66;
        *(_DWORD *)uint64_t v65 = 136315138;
        swift_bridgeObjectRetain();
        v110 = (char *)sub_186BF7C38(v106, v67, v112);
        uint64_t v28 = v105;
        sub_186C5B0EC();
        id v49 = v107;
        swift_bridgeObjectRelease_n();
        _os_log_impl(&dword_186BA3000, v63, v64, "failed to load %s's bundle", v65, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x186E466F0](v68, -1LL, -1LL);
        MEMORY[0x186E466F0](v65, -1LL, -1LL);
      }

      else
      {

        swift_bridgeObjectRelease_n();
      }

      v112[0] = 0LL;
      v112[1] = 0xE000000000000000LL;
      sub_186C5B260();
      swift_bridgeObjectRelease();
      strcpy((char *)v112, "cannot load ");
      BYTE5(v112[1]) = 0;
      HIWORD(v112[1]) = -5120;
      sub_186C5ADD4();
      swift_bridgeObjectRelease();
      sub_186C5ADD4();
      uint64_t v69 = (void *)sub_186C5AD08();
      swift_bridgeObjectRelease();
      objc_msgSend(v108, sel_warnWithMessage_, v69);
      swift_unknownObjectRelease();

      v43(v102, v28);
      goto LABEL_19;
    }

    if (objc_msgSend(v49, sel_principalClass))
    {
      uint64_t ObjCClassMetadata = swift_getObjCClassMetadata();
      v111 = &unk_18C6ABE40;
      if (swift_dynamicCastTypeToObjCProtocolConditional())
      {
        id v51 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_unknownObjectRetain();
        id v52 = objc_msgSend(v51, sel_init);
        swift_bridgeObjectRetain_n();
        swift_unknownObjectRetain();
        __int128 v53 = (os_log_s *)sub_186C5ABA0();
        os_log_type_t v54 = sub_186C5AFCC();
        if (os_log_type_enabled(v53, v54))
        {
          unint64_t v105 = v28;
          __int128 v55 = (uint8_t *)swift_slowAlloc();
          uint64_t v56 = swift_slowAlloc();
          id v107 = v49;
          unint64_t v57 = v109;
          uint64_t v99 = (uint64_t)v52;
          uint64_t v58 = v56;
          v112[0] = v56;
          *(_DWORD *)__int128 v55 = 136446210;
          swift_bridgeObjectRetain();
          v110 = (char *)sub_186BF7C38(v106, v57, v112);
          uint64_t v28 = v105;
          sub_186C5B0EC();
          id v49 = v107;
          swift_bridgeObjectRelease_n();
          _os_log_impl(&dword_186BA3000, v53, v54, "calling provider %{public}s's shouldInitialize", v55, 0xCu);
          swift_arrayDestroy();
          uint64_t v59 = v58;
          id v52 = (id)v99;
          MEMORY[0x186E466F0](v59, -1LL, -1LL);
          MEMORY[0x186E466F0](v55, -1LL, -1LL);
        }

        else
        {

          swift_bridgeObjectRelease_n();
        }

        swift_unknownObjectRetain();
        __int128 v79 = (void *)sub_186C5ACA8();
        v112[0] = 0LL;
        unsigned int v80 = objc_msgSend( v52,  sel_shouldInitializeWithLogger_machine_options_error_,  v108,  v101,  v79,  v112);
        swift_unknownObjectRelease();

        if (v80)
        {
          id v81 = (id)v112[0];
          v43(v102, v28);
          swift_bridgeObjectRelease();
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          swift_bridgeObjectRelease();

          uint64_t v70 = v106;
          goto LABEL_20;
        }

        id v82 = (id)v112[0];
        swift_unknownObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v83 = (char *)sub_186C5A9CC();

        swift_willThrow();
        unsigned int v84 = v83;
        swift_bridgeObjectRetain();
        unint64_t v85 = v83;
        int v86 = (os_log_s *)sub_186C5ABA0();
        os_log_type_t v87 = sub_186C5AFC0();
        int v88 = v87;
        if (os_log_type_enabled(v86, v87))
        {
          uint64_t v89 = swift_slowAlloc();
          LODWORD(v10ktrace_session_set_default_event_names_enabled(global_session, 1) = v88;
          uint64_t v90 = v89;
          uint64_t v104 = swift_slowAlloc();
          v112[0] = v104;
          *(_DWORD *)uint64_t v90 = 136446466;
          unint64_t v105 = v83;
          id v107 = v49;
          unint64_t v91 = v109;
          swift_bridgeObjectRetain();
          v110 = (char *)sub_186BF7C38(v106, v91, v112);
          sub_186C5B0EC();
          swift_bridgeObjectRelease_n();
          *(_WORD *)(v90 + 12) = 2082;
          v110 = v105;
          int v92 = v105;
          __swift_instantiateConcreteTypeFromMangledName(&qword_18C6A2280);
          uint64_t v99 = (uint64_t)v52;
          uint64_t v93 = sub_186C5AD5C();
          v110 = (char *)sub_186BF7C38(v93, v94, v112);
          sub_186C5B0EC();
          swift_bridgeObjectRelease();
          id v95 = v105;

          _os_log_impl( &dword_186BA3000,  v86,  (os_log_type_t)v101,  "\tprovider %{public}s should not initialize: %{public}s",  (uint8_t *)v90,  0x16u);
          uint64_t v96 = v104;
          swift_arrayDestroy();
          MEMORY[0x186E466F0](v96, -1LL, -1LL);
          MEMORY[0x186E466F0](v90, -1LL, -1LL);

          swift_unknownObjectRelease();
        }

        else
        {

          swift_unknownObjectRelease();
          swift_bridgeObjectRelease_n();
        }

        v43(v102, v28);
        swift_bridgeObjectRelease();
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        swift_bridgeObjectRelease();
LABEL_19:
        uint64_t v70 = 0LL;
        id v108 = 0LL;
        unint64_t v109 = 0LL;
        id v52 = 0LL;
        uint64_t v45 = 0LL;
LABEL_20:
        uint64_t v71 = v103;
        *uint64_t v103 = v70;
        v71[1] = v109;
        v71[2] = (uint64_t)v52;
        v71[3] = (uint64_t)v108;
        v71[4] = v45;
        return;
      }

      swift_bridgeObjectRelease();
      v112[0] = ObjCClassMetadata;
      __swift_instantiateConcreteTypeFromMangledName(&qword_18C6A2278);
      uint64_t v75 = sub_186C5AD5C();
      uint64_t v77 = v76;
      sub_186BFA2C0();
      swift_allocError();
      unint64_t v78 = v109;
      *(void *)uint64_t v72 = v106;
      *(void *)(v72 + _Block_object_dispose(va, 8) = v78;
      *(void *)(v72 + 16) = v75;
      *(void *)(v72 + 24) = v77;
      char v74 = 4;
    }

    else
    {
      swift_bridgeObjectRelease();
      sub_186BFA2C0();
      swift_allocError();
      unint64_t v73 = v109;
      *(void *)uint64_t v72 = v106;
      *(void *)(v72 + _Block_object_dispose(va, 8) = v73;
      *(void *)(v72 + 16) = 0LL;
      *(void *)(v72 + 24) = 0LL;
      char v74 = 3;
    }

    *(_BYTE *)(v72 + 32) = v74;
    swift_willThrow();
    swift_unknownObjectRelease();

    __int128 v62 = v102;
  }

  else
  {
    swift_bridgeObjectRelease();
    sub_186BFA2C0();
    swift_allocError();
    unint64_t v60 = v109;
    *(void *)uint64_t v61 = v106;
    *(void *)(v61 + _Block_object_dispose(va, 8) = v60;
    *(void *)(v61 + 16) = 0LL;
    *(void *)(v61 + 24) = 0LL;
    *(_BYTE *)(v61 + 32) = 2;
    swift_willThrow();
    swift_unknownObjectRelease();
    __int128 v62 = v46;
  }

  v43(v62, v28);
}

uint64_t sub_186BF2900(uint64_t result)
{
  if (result)
  {
    uint64_t v2 = result;
    uint64_t result = ktrace_file_appending_chunk(result);
    if (result)
    {
      uint64_t v3 = result;
      LODWORD(v16) = ktrace_chunk_tag(result);
      sub_186BFA304();
      uint64_t v4 = sub_186C5AE70();
      unint64_t v6 = v5;
      if (qword_18C6A3700 != -1) {
        swift_once();
      }
      uint64_t v7 = sub_186C5ABB8();
      __swift_project_value_buffer(v7, (uint64_t)qword_18C6A99C8);
      unint64_t v8 = v1[1];
      uint64_t v14 = *v1;
      uint64_t v16 = v1[4];
      swift_bridgeObjectRetain();
      swift_unknownObjectRetain();
      swift_unknownObjectRetain();
      sub_186BFA348((uint64_t)&v16);
      swift_bridgeObjectRetain();
      swift_unknownObjectRetain();
      swift_unknownObjectRetain();
      sub_186BFA348((uint64_t)&v16);
      swift_bridgeObjectRetain();
      uint64_t v9 = (os_log_s *)sub_186C5ABA0();
      os_log_type_t v10 = sub_186C5AFC0();
      if (os_log_type_enabled(v9, v10))
      {
        uint64_t v12 = v4;
        uint64_t v11 = swift_slowAlloc();
        uint64_t v13 = swift_slowAlloc();
        uint64_t v15 = v13;
        *(_DWORD *)uint64_t v11 = 136446466;
        swift_bridgeObjectRetain();
        sub_186BF7C38(v14, v8, &v15);
        sub_186C5B0EC();
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        swift_bridgeObjectRelease_n();
        sub_186BFA370((uint64_t)&v16);
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        swift_bridgeObjectRelease();
        sub_186BFA370((uint64_t)&v16);
        *(_WORD *)(v11 + 12) = 2082;
        swift_bridgeObjectRetain();
        sub_186BF7C38(v12, v6, &v15);
        sub_186C5B0EC();
        swift_bridgeObjectRelease_n();
        _os_log_impl( &dword_186BA3000,  v9,  v10,  "\tprovider %{public}s left chunk with tag 0x%{public}s unfinished",  (uint8_t *)v11,  0x16u);
        swift_arrayDestroy();
        MEMORY[0x186E466F0](v13, -1LL, -1LL);
        MEMORY[0x186E466F0](v11, -1LL, -1LL);
      }

      else
      {
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        swift_bridgeObjectRelease();
        sub_186BFA370((uint64_t)&v16);
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        swift_bridgeObjectRelease();
        sub_186BFA370((uint64_t)&v16);

        swift_bridgeObjectRelease_n();
      }

      return ktrace_file_append_finish(v2, v3);
    }
  }

  return result;
}

id ProviderList.__allocating_init(machine:)(uint64_t a1)
{
  uint64_t v3 = (char *)objc_allocWithZone(v1);
  *(void *)&v3[OBJC_IVAR____TtC6ktrace12ProviderList_providers] = MEMORY[0x18961AFE8];
  *(void *)&v3[OBJC_IVAR____TtC6ktrace12ProviderList_machine] = a1;
  v5.receiver = v3;
  v5.super_class = v1;
  return objc_msgSendSuper2(&v5, sel_init);
}

id ProviderList.init(machine:)(uint64_t a1)
{
  ObjectType = (objc_class *)swift_getObjectType();
  *(void *)&v1[OBJC_IVAR____TtC6ktrace12ProviderList_providers] = MEMORY[0x18961AFE8];
  *(void *)&v1[OBJC_IVAR____TtC6ktrace12ProviderList_machine] = a1;
  v5.receiver = v1;
  v5.super_class = ObjectType;
  return objc_msgSendSuper2(&v5, sel_init);
}

Swift::Bool __swiftcall ProviderList.contains(name:)(Swift::String name)
{
  object = name._object;
  uint64_t countAndFlagsBits = name._countAndFlagsBits;
  uint64_t v4 = (uint64_t *)(v1 + OBJC_IVAR____TtC6ktrace12ProviderList_providers);
  swift_beginAccess();
  uint64_t v5 = *v4;
  uint64_t v6 = *(void *)(*v4 + 16);
  if (!v6) {
    return 0;
  }
  for (uint64_t i = (void *)(v5 + 40); ; i += 5)
  {
    BOOL v8 = *(i - 1) == countAndFlagsBits && *i == (void)object;
    if (v8 || (sub_186C5B4F4() & 1) != 0) {
      break;
    }
    if (!--v6) {
      return 0;
    }
  }

  return 1;
}

void sub_186BF2E4C(uint64_t a1, uint64_t a2, void *a3, void *a4, int a5)
{
  uint64_t v12 = *(void *)(v5 + OBJC_IVAR____TtC6ktrace12ProviderList_machine);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  sub_186BF1C18(a1, a2, v12, a3, a4, a5, v26);
  if (!v6)
  {
    sub_186BFA418((uint64_t)v26, (uint64_t)&v27, &qword_18C6A22A0);
    if (*((void *)&v27 + 1))
    {
      __int128 v31 = v27;
      __int128 v32 = v27;
      uint64_t v14 = v28;
      uint64_t v13 = v29;
      uint64_t v15 = v30;
      uint64_t v33 = v30;
      uint64_t v16 = (void **)(v5 + OBJC_IVAR____TtC6ktrace12ProviderList_providers);
      swift_beginAccess();
      uint64_t v17 = *v16;
      sub_186BFA45C((uint64_t)&v32);
      swift_unknownObjectRetain();
      swift_unknownObjectRetain();
      sub_186BFA348((uint64_t)&v33);
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *uint64_t v16 = v17;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        uint64_t v17 = sub_186BF7B18(0LL, v17[2] + 1LL, 1, v17);
        *uint64_t v16 = v17;
      }

      unint64_t v19 = v17[2];
      unint64_t v20 = v17[3];
      unint64_t v21 = v19 + 1;
      if (v19 >= v20 >> 1)
      {
        uint64_t v23 = v17;
        unint64_t v24 = v17[2];
        uint64_t v25 = sub_186BF7B18((void *)(v20 > 1), v19 + 1, 1, v23);
        unint64_t v19 = v24;
        uint64_t v17 = v25;
        *uint64_t v16 = v25;
      }

      unint64_t v17[2] = v21;
      uint64_t v22 = &v17[5 * v19];
      *((_OWORD *)v22 + 2) = v31;
      v22[6] = v14;
      void v22[7] = v13;
      v22[8] = v15;
      swift_endAccess();
      sub_186BFA484((uint64_t)&v32);
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      sub_186BFA370((uint64_t)&v33);
    }
  }

uint64_t ProviderList.shouldStartTracing(configuration:)(uint64_t a1)
{
  uint64_t v3 = v2;
  uint64_t v76 = a1;
  uint64_t v88 = *MEMORY[0x1895F89C0];
  uint64_t v4 = sub_186C5AB7C();
  uint64_t v74 = *(void *)(v4 - 8);
  uint64_t v75 = v4;
  MEMORY[0x1895F8858]();
  uint64_t v6 = (char *)v65 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = sub_186C5AB94();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1895F8858]();
  os_log_type_t v10 = (char *)v65 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = (uint64_t *)(v1 + OBJC_IVAR____TtC6ktrace12ProviderList_providers);
  swift_beginAccess();
  uint64_t result = *v11;
  uint64_t v13 = *(void *)(*v11 + 16);
  if (v13)
  {
    unint64_t v73 = v6;
    v65[1] = v3;
    uint64_t v66 = swift_bridgeObjectRetain();
    uint64_t v14 = (uint64_t *)(v66 + 64);
    *(void *)&__int128 v15 = 136446210LL;
    __int128 v68 = v15;
    uint64_t v67 = MEMORY[0x18961AFC0] + 8LL;
    *(void *)&__int128 v15 = 136315138LL;
    __int128 v72 = v15;
    uint64_t v77 = v7;
    uint64_t v71 = v10;
    uint64_t v70 = v8;
    while (1)
    {
      uint64_t v78 = (uint64_t)v14;
      uint64_t v79 = v13;
      uint64_t v17 = *(v14 - 4);
      unint64_t v16 = *(v14 - 3);
      uint64_t v18 = (void *)*(v14 - 2);
      unint64_t v19 = (void *)*(v14 - 1);
      uint64_t v20 = *v14;
      uint64_t v21 = qword_18C6A3700;
      swift_bridgeObjectRetain();
      swift_unknownObjectRetain();
      swift_unknownObjectRetain();
      swift_bridgeObjectRetain();
      if (v21 != -1) {
        swift_once();
      }
      uint64_t v22 = sub_186C5ABB8();
      uint64_t v23 = __swift_project_value_buffer(v22, (uint64_t)qword_18C6A99C8);
      swift_bridgeObjectRetain_n();
      swift_unknownObjectRetain_n();
      swift_unknownObjectRetain_n();
      swift_bridgeObjectRetain_n();
      uint64_t v69 = v23;
      unint64_t v24 = (os_log_s *)sub_186C5ABA0();
      os_log_type_t v25 = sub_186C5AFCC();
      BOOL v26 = os_log_type_enabled(v24, v25);
      uint64_t v82 = v17;
      if (v26)
      {
        uint64_t v27 = v20;
        uint64_t v28 = swift_slowAlloc();
        uint64_t v29 = v17;
        uint64_t v30 = v8;
        uint64_t v31 = swift_slowAlloc();
        uint64_t v86 = v31;
        *(_DWORD *)uint64_t v28 = v68;
        swift_bridgeObjectRetain();
        *(void *)(v28 + 4) = sub_186BF7C38(v29, v16, &v86);
        swift_bridgeObjectRelease_n();
        swift_unknownObjectRelease_n();
        swift_unknownObjectRelease_n();
        swift_bridgeObjectRelease_n();
        _os_log_impl( &dword_186BA3000,  v24,  v25,  "calling provider %{public}s's shouldStartTracing",  (uint8_t *)v28,  0xCu);
        swift_arrayDestroy();
        uint64_t v32 = v31;
        uint64_t v8 = v30;
        MEMORY[0x186E466F0](v32, -1LL, -1LL);
        uint64_t v33 = v28;
        uint64_t v20 = v27;
        uint64_t v7 = v77;
        MEMORY[0x186E466F0](v33, -1LL, -1LL);
      }

      else
      {

        swift_bridgeObjectRelease_n();
        swift_unknownObjectRelease_n();
        swift_unknownObjectRelease_n();
        swift_bridgeObjectRelease_n();
      }

      if (qword_18C6A3708 != -1) {
        swift_once();
      }
      uint64_t v34 = __swift_project_value_buffer(v7, (uint64_t)qword_18C6A99E0);
      os_log_type_t v35 = v71;
      (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v71, v34, v7);
      swift_bridgeObjectRetain_n();
      swift_unknownObjectRetain_n();
      swift_unknownObjectRetain_n();
      swift_bridgeObjectRetain_n();
      unint64_t v36 = v16;
      uint64_t v37 = v73;
      sub_186C5AB70();
      unsigned int v38 = v18;
      uint64_t v39 = swift_slowAlloc();
      uint64_t v40 = swift_slowAlloc();
      uint64_t v86 = v40;
      *(_DWORD *)uint64_t v39 = v72;
      swift_bridgeObjectRetain();
      uint64_t v41 = v82;
      *(void *)(v39 + 4) = sub_186BF7C38(v82, v36, &v86);
      swift_bridgeObjectRelease_n();
      swift_unknownObjectRelease_n();
      swift_unknownObjectRelease_n();
      unint64_t v80 = v36;
      swift_bridgeObjectRelease_n();
      uint64_t v42 = sub_186C5AB88();
      uint64_t v84 = v20;
      uint64_t v43 = (os_log_s *)v42;
      os_signpost_type_t v44 = sub_186C5B050();
      uint64_t v83 = v19;
      os_signpost_type_t v45 = v44;
      os_signpost_id_t v46 = sub_186C5AB64();
      _os_signpost_emit_with_name_impl( &dword_186BA3000,  v43,  v45,  v46,  "01: shouldStartTracing",  "%s",  (uint8_t *)v39,  0xCu);
      id v85 = 0LL;
      id v81 = v38;
      id v47 = v85;
      os_signpost_type_t v48 = sub_186C5B044();
      os_signpost_id_t v49 = sub_186C5AB64();
      _os_signpost_emit_with_name_impl( &dword_186BA3000,  v43,  v48,  v49,  "01: shouldStartTracing",  "%s",  (uint8_t *)v39,  0xCu);

      swift_arrayDestroy();
      MEMORY[0x186E466F0](v40, -1LL, -1LL);
      MEMORY[0x186E466F0](v39, -1LL, -1LL);
      swift_bridgeObjectRelease();
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v74 + 8))(v37, v75);
      uint64_t v8 = v70;
      uint64_t v7 = v77;
      (*(void (**)(char *, uint64_t))(v70 + 8))(v35, v77);
      uint64_t v14 = (uint64_t *)(v78 + 40);
      uint64_t v13 = v79 - 1;
      if (v79 == 1) {
        return swift_bridgeObjectRelease();
      }
    }

    id v50 = v85;
    id v51 = (void *)sub_186C5A9CC();

    swift_willThrow();
    swift_bridgeObjectRelease();

    (*(void (**)(char *, uint64_t))(v74 + 8))(v37, v75);
    (*(void (**)(char *, uint64_t))(v70 + 8))(v35, v77);
    uint64_t v86 = (uint64_t)v51;
    id v52 = v51;
    __swift_instantiateConcreteTypeFromMangledName(&qword_18C6A2280);
    uint64_t v53 = sub_186C5AD5C();
    unint64_t v55 = v54;
    unint64_t v56 = v80;
    swift_bridgeObjectRetain_n();
    swift_unknownObjectRetain_n();
    unint64_t v57 = v83;
    swift_unknownObjectRetain_n();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    uint64_t v58 = (os_log_s *)sub_186C5ABA0();
    os_log_type_t v59 = sub_186C5AFC0();
    int v60 = v59;
    if (os_log_type_enabled(v58, v59))
    {
      uint64_t v61 = swift_slowAlloc();
      LODWORD(v79) = v60;
      uint64_t v62 = v61;
      uint64_t v78 = swift_slowAlloc();
      uint64_t v86 = v78;
      *(_DWORD *)uint64_t v62 = 136446466;
      swift_bridgeObjectRetain();
      id v85 = (id)sub_186BF7C38(v41, v56, &v86);
      sub_186C5B0EC();
      swift_bridgeObjectRelease_n();
      swift_unknownObjectRelease_n();
      swift_unknownObjectRelease_n();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v62 + 12) = 2082;
      swift_bridgeObjectRetain();
      id v85 = (id)sub_186BF7C38(v53, v55, &v86);
      unint64_t v57 = v83;
      sub_186C5B0EC();
      swift_bridgeObjectRelease_n();
      _os_log_impl( &dword_186BA3000,  v58,  (os_log_type_t)v79,  "provider %{public}s disallowing tracing: %{public}s",  (uint8_t *)v62,  0x16u);
      uint64_t v63 = v78;
      swift_arrayDestroy();
      MEMORY[0x186E466F0](v63, -1LL, -1LL);
      MEMORY[0x186E466F0](v62, -1LL, -1LL);
    }

    else
    {

      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      swift_unknownObjectRelease_n();
      swift_unknownObjectRelease_n();
      swift_bridgeObjectRelease_n();
    }

    uint64_t v86 = 0LL;
    unint64_t v87 = 0xE000000000000000LL;
    swift_unknownObjectRetain();
    sub_186C5B260();
    swift_bridgeObjectRelease();
    uint64_t v86 = 0xD00000000000001ELL;
    unint64_t v87 = 0x8000000186C65060LL;
    sub_186C5ADD4();
    swift_bridgeObjectRelease();
    os_log_type_t v64 = (void *)sub_186C5AD08();
    swift_bridgeObjectRelease();
    objc_msgSend(v57, sel_failWithReason_, v64);
    swift_unknownObjectRelease();

    swift_willThrow();
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    return swift_bridgeObjectRelease();
  }

  return result;
}

void sub_186BF39D4(uint64_t a1)
{
  uint64_t v52 = a1;
  uint64_t v51 = sub_186C5AB7C();
  uint64_t v50 = *(void *)(v51 - 8);
  MEMORY[0x1895F8858](v51);
  uint64_t v63 = (char *)&v43 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v3 = sub_186C5AB94();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1895F8858](v3);
  uint64_t v6 = (char *)&v43 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = v1 + OBJC_IVAR____TtC6ktrace12ProviderList_providers;
  swift_beginAccess();
  uint64_t v8 = *(void *)(*(void *)v7 + 16LL);
  if (v8)
  {
    uint64_t v9 = sel_shouldAmendWithFile_error_;
    os_signpost_id_t v46 = &v67;
    os_signpost_id_t v49 = &v66;
    uint64_t v43 = swift_bridgeObjectRetain();
    os_log_type_t v10 = (uint64_t *)(v43 + 64);
    *(void *)&__int128 v11 = 136446210LL;
    __int128 v45 = v11;
    uint64_t v44 = MEMORY[0x18961AFC0] + 8LL;
    *(void *)&__int128 v11 = 136315138LL;
    __int128 v48 = v11;
    uint64_t v58 = sel_shouldAmendWithFile_error_;
    uint64_t v53 = v4;
    id v47 = v6;
    uint64_t v59 = v3;
    while (1)
    {
      unint64_t v12 = *(v10 - 3);
      uint64_t v13 = *(v10 - 2);
      uint64_t v14 = *(v10 - 1);
      uint64_t v15 = *v10;
      uint64_t v62 = *(v10 - 4);
      v68[0] = v62;
      v68[1] = v12;
      v68[2] = v13;
      v68[3] = v14;
      v68[4] = v15;
      objc_opt_self();
      uint64_t v16 = swift_dynamicCastObjCClass();
      if (!v16) {
        break;
      }
      uint64_t v17 = (void *)v16;
      swift_unknownObjectRetain_n();
      swift_bridgeObjectRetain();
      uint64_t v64 = v14;
      swift_unknownObjectRetain();
      swift_bridgeObjectRetain();
      if (!objc_msgSend(v17, sel_respondsToSelector_, v9, v43, v44))
      {
        swift_unknownObjectRelease();
        goto LABEL_17;
      }

      unint64_t v54 = v10;
      uint64_t v55 = v8;
      unint64_t v56 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, void **))objc_msgSend(v17, sel_methodForSelector_, v9);
      if (qword_18C6A3700 != -1) {
        swift_once();
      }
      uint64_t v18 = sub_186C5ABB8();
      __swift_project_value_buffer(v18, (uint64_t)qword_18C6A99C8);
      swift_bridgeObjectRetain_n();
      swift_unknownObjectRetain_n();
      swift_unknownObjectRetain_n();
      swift_bridgeObjectRetain_n();
      unint64_t v19 = (os_log_s *)sub_186C5ABA0();
      os_log_type_t v20 = sub_186C5AFCC();
      BOOL v21 = os_log_type_enabled(v19, v20);
      uint64_t v61 = v13;
      uint64_t v22 = v59;
      uint64_t v57 = v15;
      if (v21)
      {
        uint64_t v23 = (uint8_t *)swift_slowAlloc();
        unint64_t v24 = (void *)swift_slowAlloc();
        id v69 = v24;
        *(_DWORD *)uint64_t v23 = v45;
        swift_bridgeObjectRetain();
        uint64_t v66 = sub_186BF7C38(v62, v12, (uint64_t *)&v69);
        uint64_t v4 = v53;
        sub_186C5B0EC();
        swift_bridgeObjectRelease_n();
        swift_unknownObjectRelease_n();
        swift_unknownObjectRelease_n();
        swift_bridgeObjectRelease_n();
        _os_log_impl(&dword_186BA3000, v19, v20, "calling provider %{public}s's shouldAmend", v23, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x186E466F0](v24, -1LL, -1LL);
        MEMORY[0x186E466F0](v23, -1LL, -1LL);
      }

      else
      {

        swift_bridgeObjectRelease_n();
        swift_unknownObjectRelease_n();
        swift_unknownObjectRelease_n();
        swift_bridgeObjectRelease_n();
      }

      unint64_t v25 = v12;
      id v26 = objc_allocWithZone(MEMORY[0x189607870]);
      uint64_t v27 = (void *)sub_186C5AD08();
      id v28 = objc_msgSend(v26, sel_initWithDomain_code_userInfo_, v27, 1, 0);

      id v69 = v28;
      if (qword_18C6A3708 != -1) {
        swift_once();
      }
      uint64_t v29 = __swift_project_value_buffer(v22, (uint64_t)qword_18C6A99E0);
      uint64_t v30 = v47;
      (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v47, v29, v22);
      swift_bridgeObjectRetain_n();
      swift_unknownObjectRetain_n();
      swift_unknownObjectRetain_n();
      swift_bridgeObjectRetain_n();
      sub_186C5AB70();
      uint64_t v31 = (uint8_t *)swift_slowAlloc();
      uint64_t v32 = swift_slowAlloc();
      uint64_t v66 = v32;
      *(_DWORD *)uint64_t v31 = v48;
      swift_bridgeObjectRetain();
      uint64_t v65 = sub_186BF7C38(v62, v25, &v66);
      sub_186C5B0EC();
      uint64_t v33 = v30;
      swift_bridgeObjectRelease_n();
      swift_unknownObjectRelease_n();
      swift_unknownObjectRelease_n();
      swift_bridgeObjectRelease_n();
      uint64_t v34 = (os_log_s *)sub_186C5AB88();
      os_signpost_type_t v35 = sub_186C5B050();
      os_signpost_id_t v36 = sub_186C5AB64();
      _os_signpost_emit_with_name_impl(&dword_186BA3000, v34, v35, v36, "01: shouldAmend", "%s", v31, 0xCu);
      uint64_t v37 = v60;
      sub_186BF41A8(v56, v68, (uint64_t)v58, v52, (uint64_t *)&v69);
      uint64_t v60 = v37;
      if (v37)
      {
        swift_bridgeObjectRelease();
        swift_unknownObjectRelease();

        (*(void (**)(char *, uint64_t))(v50 + 8))(v63, v51);
        (*(void (**)(char *, uint64_t))(v53 + 8))(v33, v59);

        return;
      }

      os_signpost_type_t v38 = sub_186C5B044();
      uint64_t v39 = v63;
      os_signpost_id_t v40 = sub_186C5AB64();
      _os_signpost_emit_with_name_impl(&dword_186BA3000, v34, v38, v40, "01: shouldAmend", "%s", v31, 0xCu);

      swift_arrayDestroy();
      MEMORY[0x186E466F0](v32, -1LL, -1LL);
      MEMORY[0x186E466F0](v31, -1LL, -1LL);
      swift_unknownObjectRelease();
      (*(void (**)(char *, uint64_t))(v50 + 8))(v39, v51);
      uint64_t v4 = v53;
      (*(void (**)(char *, uint64_t))(v53 + 8))(v33, v59);

      os_log_type_t v10 = v54 + 5;
      uint64_t v8 = v55 - 1;
      uint64_t v9 = v58;
      if (v55 == 1)
      {
        swift_bridgeObjectRelease();
        return;
      }
    }

    swift_bridgeObjectRetain();
    swift_unknownObjectRetain();
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
LABEL_17:
    swift_bridgeObjectRelease();
    sub_186BFA2C0();
    uint64_t v41 = swift_allocError();
    *(void *)uint64_t v42 = v62;
    *(void *)(v42 + _Block_object_dispose(va, 8) = v12;
    *(void *)(v42 + 16) = 0LL;
    *(void *)(v42 + 24) = 0LL;
    *(_BYTE *)(v42 + 32) = 5;
    uint64_t v60 = v41;
    swift_willThrow();
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
  }

uint64_t sub_186BF41A8( uint64_t (*a1)(uint64_t, uint64_t, uint64_t, void **), uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v46 = *MEMORY[0x1895F89C0];
  uint64_t v8 = a2[2];
  uint64_t v44 = (void *)*a5;
  char v9 = a1(v8, a3, a4, &v44);
  os_log_type_t v10 = v44;
  __int128 v11 = (void *)*a5;
  *a5 = (uint64_t)v44;
  id v12 = v10;

  uint64_t result = sub_186BF2900(a4);
  if ((v9 & 1) == 0)
  {
    uint64_t v14 = *a2;
    unint64_t v15 = a2[1];
    sub_186BFA2C0();
    uint64_t v16 = (void *)swift_allocError();
    uint64_t v40 = v14;
    *(void *)uint64_t v17 = v14;
    *(void *)(v17 + _Block_object_dispose(va, 8) = v15;
    *(void *)(v17 + 16) = 0LL;
    *(void *)(v17 + 24) = 0LL;
    *(_BYTE *)(v17 + 32) = 6;
    uint64_t v18 = (void *)*a5;
    if (*a5)
    {
      swift_bridgeObjectRetain();
      id v19 = v18;

      uint64_t v16 = v19;
    }

    else
    {
      swift_bridgeObjectRetain();
    }

    uint64_t v39 = v16;
    Errorint Value = swift_getErrorValue();
    uint64_t v21 = v42;
    uint64_t v22 = *(void *)(v42 - 8);
    MEMORY[0x1895F8858](ErrorValue);
    unint64_t v24 = (char *)&v36 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL);
    (*(void (**)(char *))(v22 + 16))(v24);
    uint64_t v38 = sub_186C5B53C();
    unint64_t v26 = v25;
    (*(void (**)(char *, uint64_t))(v22 + 8))(v24, v21);
    if (qword_18C6A3700 != -1) {
      swift_once();
    }
    uint64_t v27 = sub_186C5ABB8();
    __swift_project_value_buffer(v27, (uint64_t)qword_18C6A99C8);
    id v28 = (void *)a2[3];
    uint64_t v43 = a2[4];
    swift_bridgeObjectRetain();
    swift_unknownObjectRetain();
    swift_unknownObjectRetain();
    sub_186BFA348((uint64_t)&v43);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_unknownObjectRetain();
    swift_unknownObjectRetain();
    sub_186BFA348((uint64_t)&v43);
    swift_bridgeObjectRetain();
    uint64_t v29 = (os_log_s *)sub_186C5ABA0();
    os_log_type_t v30 = sub_186C5AFC0();
    BOOL v31 = os_log_type_enabled(v29, v30);
    uint64_t v32 = v40;
    if (v31)
    {
      uint64_t v33 = swift_slowAlloc();
      uint64_t v37 = swift_slowAlloc();
      uint64_t v44 = (void *)v37;
      *(_DWORD *)uint64_t v33 = 136446466;
      swift_bridgeObjectRetain();
      uint64_t v41 = sub_186BF7C38(v32, v15, (uint64_t *)&v44);
      sub_186C5B0EC();
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      swift_bridgeObjectRelease_n();
      sub_186BFA370((uint64_t)&v43);
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      swift_bridgeObjectRelease();
      sub_186BFA370((uint64_t)&v43);
      *(_WORD *)(v33 + 12) = 2082;
      swift_bridgeObjectRetain();
      uint64_t v41 = sub_186BF7C38(v38, v26, (uint64_t *)&v44);
      uint64_t v32 = v40;
      sub_186C5B0EC();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_186BA3000, v29, v30, "provider %{public}s cannot amend: %{public}s", (uint8_t *)v33, 0x16u);
      uint64_t v34 = v37;
      swift_arrayDestroy();
      MEMORY[0x186E466F0](v34, -1LL, -1LL);
      MEMORY[0x186E466F0](v33, -1LL, -1LL);
    }

    else
    {
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      swift_bridgeObjectRelease();
      sub_186BFA370((uint64_t)&v43);
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      swift_bridgeObjectRelease();
      sub_186BFA370((uint64_t)&v43);

      swift_bridgeObjectRelease_n();
    }

    uint64_t v44 = 0LL;
    unint64_t v45 = 0xE000000000000000LL;
    sub_186C5B260();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v44 = (void *)v32;
    unint64_t v45 = v15;
    sub_186C5ADD4();
    sub_186C5ADD4();
    swift_bridgeObjectRelease();
    os_signpost_type_t v35 = (void *)sub_186C5AD08();
    swift_bridgeObjectRelease();
    objc_msgSend(v28, sel_failWithReason_, v35);

    return swift_willThrow();
  }

  return result;
}

Swift::Void __swiftcall ProviderList.configure(session:)(Swift::OpaquePointer session)
{
}

uint64_t ProviderList.willStartTracing(file:)(uint64_t a1)
{
  return sub_186BF5D24( a1,  (SEL *)&selRef_willStartTracingToFile_,  "calling provider %{public}s's willStartTracing",  "03: willStartTracing");
}

uint64_t ProviderList.didStartTracing(file:)(uint64_t a1)
{
  uint64_t v46 = a1;
  uint64_t v45 = sub_186C5AB7C();
  uint64_t v44 = *(void *)(v45 - 8);
  MEMORY[0x1895F8858]();
  uint64_t v43 = (char *)&v38 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v3 = sub_186C5AB94();
  uint64_t v52 = *(void *)(v3 - 8);
  uint64_t v53 = v3;
  MEMORY[0x1895F8858]();
  uint64_t v51 = (char *)&v38 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = (uint64_t *)(v1 + OBJC_IVAR____TtC6ktrace12ProviderList_providers);
  swift_beginAccess();
  uint64_t result = *v5;
  uint64_t v7 = *(void *)(*v5 + 16);
  if (v7)
  {
    uint64_t v42 = v57;
    uint64_t v38 = swift_bridgeObjectRetain();
    uint64_t v8 = (uint64_t *)(v38 + 64);
    p_uint32_t type = (char **)(&stru_189F5DFF0 + 16);
    *(void *)&__int128 v10 = 136446210LL;
    __int128 v41 = v10;
    uint64_t v39 = MEMORY[0x18961AFC0] + 8LL;
    *(void *)&__int128 v10 = 136315138LL;
    __int128 v40 = v10;
    do
    {
      uint64_t v11 = *(v8 - 4);
      unint64_t v12 = *(v8 - 3);
      uint64_t v14 = (void *)*(v8 - 2);
      uint64_t v13 = *(v8 - 1);
      uint64_t v15 = *v8;
      size_t v57[4] = v11;
      v57[5] = v12;
      v57[6] = (uint64_t)v14;
      v57[7] = v13;
      v57[8] = v15;
      if (objc_msgSend(v14, p_type[190], sel_didStartTracingToFile_, v38, v39))
      {
        uint64_t v55 = v11;
        uint64_t v50 = v7;
        uint64_t v16 = qword_18C6A3700;
        swift_unknownObjectRetain_n();
        swift_bridgeObjectRetain();
        swift_unknownObjectRetain();
        swift_bridgeObjectRetain();
        if (v16 != -1) {
          swift_once();
        }
        uint64_t v17 = sub_186C5ABB8();
        uint64_t v18 = __swift_project_value_buffer(v17, (uint64_t)qword_18C6A99C8);
        swift_unknownObjectRetain_n();
        swift_bridgeObjectRetain_n();
        swift_unknownObjectRetain_n();
        swift_bridgeObjectRetain_n();
        uint64_t v49 = v18;
        id v19 = (os_log_s *)sub_186C5ABA0();
        os_log_type_t v20 = sub_186C5AFCC();
        BOOL v21 = os_log_type_enabled(v19, v20);
        uint64_t v54 = v15;
        if (v21)
        {
          uint64_t v22 = (uint8_t *)swift_slowAlloc();
          uint64_t v23 = swift_slowAlloc();
          v57[0] = v23;
          *(_DWORD *)uint64_t v22 = v41;
          swift_bridgeObjectRetain();
          uint64_t v56 = sub_186BF7C38(v55, v12, v57);
          sub_186C5B0EC();
          swift_bridgeObjectRelease_n();
          swift_unknownObjectRelease_n();
          swift_unknownObjectRelease_n();
          swift_bridgeObjectRelease_n();
          _os_log_impl(&dword_186BA3000, v19, v20, "calling provider %{public}s's didStartTracing", v22, 0xCu);
          swift_arrayDestroy();
          MEMORY[0x186E466F0](v23, -1LL, -1LL);
          MEMORY[0x186E466F0](v22, -1LL, -1LL);
        }

        else
        {

          swift_bridgeObjectRelease_n();
          swift_unknownObjectRelease_n();
          swift_unknownObjectRelease_n();
          swift_bridgeObjectRelease_n();
        }

        if (qword_18C6A3708 != -1) {
          swift_once();
        }
        __swift_project_value_buffer(v53, (uint64_t)qword_18C6A99E0);
        (*(void (**)(void))(v52 + 16))();
        swift_unknownObjectRetain_n();
        swift_bridgeObjectRetain_n();
        swift_unknownObjectRetain_n();
        swift_bridgeObjectRetain_n();
        unint64_t v24 = v43;
        sub_186C5AB70();
        uint64_t v25 = swift_slowAlloc();
        uint64_t v26 = swift_slowAlloc();
        uint64_t v47 = v13;
        uint64_t v48 = v26;
        v57[0] = v26;
        *(_DWORD *)uint64_t v25 = v40;
        swift_bridgeObjectRetain();
        *(void *)(v25 + 4) = sub_186BF7C38(v55, v12, v57);
        swift_bridgeObjectRelease_n();
        swift_unknownObjectRelease_n();
        swift_unknownObjectRelease_n();
        swift_bridgeObjectRelease_n();
        uint64_t v27 = (os_log_s *)sub_186C5AB88();
        os_signpost_type_t v28 = sub_186C5B050();
        os_signpost_id_t v29 = sub_186C5AB64();
        _os_signpost_emit_with_name_impl( &dword_186BA3000,  v27,  v28,  v29,  "04: didStartTracing",  "%s",  (uint8_t *)v25,  0xCu);
        uint64_t v30 = v46;
        objc_msgSend(v14, sel_didStartTracingToFile_, v46);
        sub_186BF2900(v30);
        LOBYTE(v30) = sub_186C5B044();
        os_signpost_id_t v31 = sub_186C5AB64();
        _os_signpost_emit_with_name_impl( &dword_186BA3000,  v27,  (os_signpost_type_t)v30,  v31,  "04: didStartTracing",  "%s",  (uint8_t *)v25,  0xCu);

        uint64_t v32 = MEMORY[0x18961AFC0] + 8LL;
        uint64_t v33 = v48;
        swift_arrayDestroy();
        MEMORY[0x186E466F0](v33, -1LL, -1LL);
        MEMORY[0x186E466F0](v25, -1LL, -1LL);
        (*(void (**)(char *, uint64_t))(v44 + 8))(v24, v45);
        (*(void (**)(char *, uint64_t))(v52 + 8))(v51, v53);
        uint64_t v48 = (uint64_t)v14;
        swift_unknownObjectRetain_n();
        swift_bridgeObjectRetain_n();
        swift_unknownObjectRetain_n();
        swift_bridgeObjectRetain_n();
        uint64_t v34 = (os_log_s *)sub_186C5ABA0();
        os_log_type_t v35 = sub_186C5AFCC();
        if (os_log_type_enabled(v34, v35))
        {
          uint64_t v36 = (uint8_t *)swift_slowAlloc();
          uint64_t v37 = swift_slowAlloc();
          v57[0] = v37;
          *(_DWORD *)uint64_t v36 = v41;
          uint64_t v49 = v32;
          swift_bridgeObjectRetain();
          uint64_t v56 = sub_186BF7C38(v55, v12, v57);
          sub_186C5B0EC();
          swift_bridgeObjectRelease_n();
          swift_unknownObjectRelease_n();
          swift_unknownObjectRelease_n();
          swift_bridgeObjectRelease_n();
          _os_log_impl( &dword_186BA3000,  v34,  v35,  "finished time-sensitive didStartTracing from provider %{public}s",  v36,  0xCu);
          swift_arrayDestroy();
          MEMORY[0x186E466F0](v37, -1LL, -1LL);
          MEMORY[0x186E466F0](v36, -1LL, -1LL);
          swift_bridgeObjectRelease();
          swift_unknownObjectRelease();
          swift_bridgeObjectRelease();

          swift_unknownObjectRelease_n();
        }

        else
        {

          swift_bridgeObjectRelease_n();
          swift_unknownObjectRelease_n();
          swift_unknownObjectRelease_n();
          swift_bridgeObjectRelease_n();
        }

        uint64_t v7 = v50;
        p_uint32_t type = &stru_189F5DFF0.type;
      }

      v8 += 5;
      --v7;
    }

    while (v7);
    return swift_bridgeObjectRelease();
  }

  return result;
}

uint64_t ProviderList.willEndTracing(file:)(uint64_t a1)
{
  uint64_t v67 = a1;
  uint64_t v66 = sub_186C5AB7C();
  uint64_t v65 = *(void *)(v66 - 8);
  MEMORY[0x1895F8858]();
  uint64_t v64 = (char *)&v59 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v3 = sub_186C5AB94();
  uint64_t v73 = *(void *)(v3 - 8);
  uint64_t v74 = v3;
  MEMORY[0x1895F8858]();
  __int128 v72 = (char *)&v59 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = (uint64_t *)(v1 + OBJC_IVAR____TtC6ktrace12ProviderList_providers);
  swift_beginAccess();
  uint64_t result = *v5;
  uint64_t v7 = *(void *)(*v5 + 16);
  if (v7)
  {
    uint64_t v62 = v79;
    uint64_t v59 = swift_bridgeObjectRetain();
    uint64_t v8 = (uint64_t *)(v59 + 64);
    *(void *)&__int128 v9 = 136446210LL;
    __int128 v61 = v9;
    uint64_t v60 = MEMORY[0x18961AFC0] + 8LL;
    *(void *)&__int128 v9 = 136315138LL;
    __int128 v63 = v9;
    while (1)
    {
      uint64_t v14 = *(v8 - 4);
      unint64_t v13 = *(v8 - 3);
      uint64_t v15 = (void *)*(v8 - 2);
      uint64_t v16 = *(v8 - 1);
      uint64_t v17 = *v8;
      v79[4] = v14;
      v79[5] = v13;
      v79[6] = (uint64_t)v15;
      v79[7] = v16;
      v79[8] = v17;
      if (objc_msgSend(v15, sel_respondsToSelector_, sel_willEndTracing, v59, v60))
      {
        uint64_t v18 = qword_18C6A3700;
        swift_unknownObjectRetain_n();
        swift_bridgeObjectRetain();
        swift_unknownObjectRetain();
        swift_bridgeObjectRetain();
        if (v18 != -1) {
          swift_once();
        }
        uint64_t v19 = sub_186C5ABB8();
        uint64_t v20 = __swift_project_value_buffer(v19, (uint64_t)qword_18C6A99C8);
        swift_unknownObjectRetain_n();
        swift_bridgeObjectRetain_n();
        swift_unknownObjectRetain_n();
        swift_bridgeObjectRetain_n();
        BOOL v21 = (os_log_s *)sub_186C5ABA0();
        os_log_type_t v22 = sub_186C5AFCC();
        BOOL v23 = os_log_type_enabled(v21, v22);
        uint64_t v70 = v8;
        uint64_t v71 = v7;
        uint64_t v75 = v14;
        uint64_t v76 = v17;
        uint64_t v69 = v20;
        if (v23)
        {
          unint64_t v24 = (uint8_t *)swift_slowAlloc();
          uint64_t v25 = swift_slowAlloc();
          v79[0] = v25;
          *(_DWORD *)unint64_t v24 = v61;
          swift_bridgeObjectRetain();
          uint64_t v78 = sub_186BF7C38(v14, v13, v79);
          sub_186C5B0EC();
          swift_bridgeObjectRelease_n();
          swift_unknownObjectRelease_n();
          swift_unknownObjectRelease_n();
          swift_bridgeObjectRelease_n();
          _os_log_impl(&dword_186BA3000, v21, v22, "calling provider %{public}s's willEndTracing", v24, 0xCu);
          swift_arrayDestroy();
          MEMORY[0x186E466F0](v25, -1LL, -1LL);
          MEMORY[0x186E466F0](v24, -1LL, -1LL);
        }

        else
        {

          swift_bridgeObjectRelease_n();
          swift_unknownObjectRelease_n();
          swift_unknownObjectRelease_n();
          swift_bridgeObjectRelease_n();
        }

        if (qword_18C6A3708 != -1) {
          swift_once();
        }
        __swift_project_value_buffer(v74, (uint64_t)qword_18C6A99E0);
        (*(void (**)(void))(v73 + 16))();
        swift_unknownObjectRetain_n();
        swift_bridgeObjectRetain_n();
        swift_unknownObjectRetain_n();
        swift_bridgeObjectRetain_n();
        uint64_t v77 = v15;
        os_log_type_t v35 = v64;
        sub_186C5AB70();
        uint64_t v36 = swift_slowAlloc();
        uint64_t v68 = swift_slowAlloc();
        v79[0] = v68;
        *(_DWORD *)uint64_t v36 = v63;
        swift_bridgeObjectRetain();
        *(void *)(v36 + 4) = sub_186BF7C38(v75, v13, v79);
        swift_bridgeObjectRelease_n();
        swift_unknownObjectRelease_n();
        swift_unknownObjectRelease_n();
        swift_bridgeObjectRelease_n();
        uint64_t v37 = (os_log_s *)sub_186C5AB88();
        os_signpost_type_t v38 = sub_186C5B050();
        os_signpost_id_t v39 = sub_186C5AB64();
        _os_signpost_emit_with_name_impl( &dword_186BA3000,  v37,  v38,  v39,  "05: willEndTracing",  "%s",  (uint8_t *)v36,  0xCu);
        objc_msgSend(v77, sel_willEndTracing);
        sub_186BF2900(v67);
        os_signpost_type_t v40 = sub_186C5B044();
        os_signpost_id_t v41 = sub_186C5AB64();
        _os_signpost_emit_with_name_impl( &dword_186BA3000,  v37,  v40,  v41,  "05: willEndTracing",  "%s",  (uint8_t *)v36,  0xCu);

        uint64_t v42 = MEMORY[0x18961AFC0] + 8LL;
        uint64_t v43 = v68;
        swift_arrayDestroy();
        MEMORY[0x186E466F0](v43, -1LL, -1LL);
        MEMORY[0x186E466F0](v36, -1LL, -1LL);
        (*(void (**)(char *, uint64_t))(v65 + 8))(v35, v66);
        (*(void (**)(char *, uint64_t))(v73 + 8))(v72, v74);
        swift_unknownObjectRetain_n();
        swift_bridgeObjectRetain_n();
        swift_unknownObjectRetain_n();
        swift_bridgeObjectRetain_n();
        uint64_t v44 = (os_log_s *)sub_186C5ABA0();
        os_log_type_t v45 = sub_186C5AFCC();
        if (!os_log_type_enabled(v44, v45)) {
          goto LABEL_28;
        }
        uint64_t v10 = swift_slowAlloc();
        uint64_t v69 = v42;
        uint64_t v11 = (uint8_t *)v10;
        uint64_t v12 = swift_slowAlloc();
        v79[0] = v12;
        *(_DWORD *)uint64_t v11 = v61;
        swift_bridgeObjectRetain();
        uint64_t v78 = sub_186BF7C38(v75, v13, v79);
        sub_186C5B0EC();
        swift_bridgeObjectRelease_n();
        swift_unknownObjectRelease_n();
        swift_unknownObjectRelease_n();
        swift_bridgeObjectRelease_n();
        _os_log_impl( &dword_186BA3000,  v44,  v45,  "finished time-sensitive willEndTracing from provider %{public}s",  v11,  0xCu);
        swift_arrayDestroy();
        MEMORY[0x186E466F0](v12, -1LL, -1LL);
        MEMORY[0x186E466F0](v11, -1LL, -1LL);
        swift_bridgeObjectRelease();
        swift_unknownObjectRelease();
        swift_bridgeObjectRelease();

        swift_unknownObjectRelease_n();
      }

      else
      {
        objc_opt_self();
        uint64_t v26 = swift_dynamicCastObjCClass();
        if (!v26) {
          goto LABEL_5;
        }
        uint64_t v27 = (void *)v26;
        swift_unknownObjectRetain_n();
        swift_bridgeObjectRetain();
        swift_unknownObjectRetain();
        swift_bridgeObjectRetain();
        if (!supportsDeprecatedWillEndTracingToFile(v27))
        {
          swift_bridgeObjectRelease();
          swift_unknownObjectRelease();
          swift_unknownObjectRelease_n();
          swift_bridgeObjectRelease();
          goto LABEL_5;
        }

        if (qword_18C6A3700 != -1) {
          swift_once();
        }
        uint64_t v28 = sub_186C5ABB8();
        uint64_t v29 = __swift_project_value_buffer(v28, (uint64_t)qword_18C6A99C8);
        swift_unknownObjectRetain_n();
        swift_bridgeObjectRetain_n();
        swift_unknownObjectRetain_n();
        swift_bridgeObjectRetain_n();
        uint64_t v69 = v29;
        uint64_t v30 = (os_log_s *)sub_186C5ABA0();
        os_log_type_t v31 = sub_186C5AFCC();
        BOOL v32 = os_log_type_enabled(v30, v31);
        uint64_t v70 = v8;
        uint64_t v71 = v7;
        uint64_t v75 = v14;
        uint64_t v76 = v17;
        if (v32)
        {
          uint64_t v33 = (uint8_t *)swift_slowAlloc();
          uint64_t v34 = swift_slowAlloc();
          v79[0] = v34;
          *(_DWORD *)uint64_t v33 = v61;
          swift_bridgeObjectRetain();
          uint64_t v78 = sub_186BF7C38(v14, v13, v79);
          sub_186C5B0EC();
          swift_bridgeObjectRelease_n();
          swift_unknownObjectRelease_n();
          swift_unknownObjectRelease_n();
          swift_bridgeObjectRelease_n();
          _os_log_impl(&dword_186BA3000, v30, v31, "calling provider %{public}s's legacy willEndTracing:", v33, 0xCu);
          swift_arrayDestroy();
          MEMORY[0x186E466F0](v34, -1LL, -1LL);
          MEMORY[0x186E466F0](v33, -1LL, -1LL);
        }

        else
        {

          swift_bridgeObjectRelease_n();
          swift_unknownObjectRelease_n();
          swift_unknownObjectRelease_n();
          swift_bridgeObjectRelease_n();
        }

        if (qword_18C6A3708 != -1) {
          swift_once();
        }
        __swift_project_value_buffer(v74, (uint64_t)qword_18C6A99E0);
        (*(void (**)(void))(v73 + 16))();
        swift_unknownObjectRetain_n();
        swift_bridgeObjectRetain_n();
        swift_unknownObjectRetain_n();
        swift_bridgeObjectRetain_n();
        uint64_t v77 = v15;
        uint64_t v46 = v64;
        sub_186C5AB70();
        uint64_t v47 = swift_slowAlloc();
        uint64_t v68 = swift_slowAlloc();
        v79[0] = v68;
        *(_DWORD *)uint64_t v47 = v63;
        swift_bridgeObjectRetain();
        *(void *)(v47 + 4) = sub_186BF7C38(v75, v13, v79);
        swift_bridgeObjectRelease_n();
        swift_unknownObjectRelease_n();
        swift_unknownObjectRelease_n();
        swift_bridgeObjectRelease_n();
        uint64_t v48 = (os_log_s *)sub_186C5AB88();
        os_signpost_type_t v49 = sub_186C5B050();
        os_signpost_id_t v50 = sub_186C5AB64();
        _os_signpost_emit_with_name_impl( &dword_186BA3000,  v48,  v49,  v50,  "05: willEndTracing",  "%s",  (uint8_t *)v47,  0xCu);
        uint64_t v51 = v67;
        deprecatedWillEndTracingToFile(v77, v67);
        sub_186BF2900(v51);
        LOBYTE(v5ktrace_session_set_default_event_names_enabled(global_session, 1) = sub_186C5B044();
        os_signpost_id_t v52 = sub_186C5AB64();
        _os_signpost_emit_with_name_impl( &dword_186BA3000,  v48,  (os_signpost_type_t)v51,  v52,  "05: willEndTracing",  "%s",  (uint8_t *)v47,  0xCu);

        uint64_t v53 = MEMORY[0x18961AFC0] + 8LL;
        uint64_t v54 = v68;
        swift_arrayDestroy();
        MEMORY[0x186E466F0](v54, -1LL, -1LL);
        MEMORY[0x186E466F0](v47, -1LL, -1LL);
        (*(void (**)(char *, uint64_t))(v65 + 8))(v46, v66);
        (*(void (**)(char *, uint64_t))(v73 + 8))(v72, v74);
        swift_unknownObjectRetain_n();
        swift_bridgeObjectRetain_n();
        swift_unknownObjectRetain_n();
        swift_bridgeObjectRetain_n();
        uint64_t v44 = (os_log_s *)sub_186C5ABA0();
        os_log_type_t v55 = sub_186C5AFCC();
        if (!os_log_type_enabled(v44, v55))
        {
LABEL_28:

          swift_bridgeObjectRelease_n();
          swift_unknownObjectRelease_n();
          swift_unknownObjectRelease_n();
          swift_bridgeObjectRelease_n();
          goto LABEL_4;
        }

        uint64_t v56 = (uint8_t *)swift_slowAlloc();
        uint64_t v57 = swift_slowAlloc();
        uint64_t v69 = v53;
        uint64_t v58 = v57;
        v79[0] = v57;
        *(_DWORD *)uint64_t v56 = v61;
        swift_bridgeObjectRetain();
        uint64_t v78 = sub_186BF7C38(v75, v13, v79);
        sub_186C5B0EC();
        swift_bridgeObjectRelease_n();
        swift_unknownObjectRelease_n();
        swift_unknownObjectRelease_n();
        swift_bridgeObjectRelease_n();
        _os_log_impl( &dword_186BA3000,  v44,  v55,  "finished time-sensitive willEndTracing from provider %{public}s",  v56,  0xCu);
        swift_arrayDestroy();
        MEMORY[0x186E466F0](v58, -1LL, -1LL);
        MEMORY[0x186E466F0](v56, -1LL, -1LL);
        swift_bridgeObjectRelease();
        swift_unknownObjectRelease();
        swift_unknownObjectRelease_n();
        swift_bridgeObjectRelease();
      }

uint64_t ProviderList.didEndTracing(file:)(uint64_t a1)
{
  return sub_186BF5D24( a1,  (SEL *)&selRef_didStopTracingToFile_,  "calling provider %{public}s's didEndTracing",  "06: didEndTracing");
}

uint64_t sub_186BF5D24(uint64_t a1, SEL *a2, const char *a3, const char *a4)
{
  os_log_type_t v45 = a4;
  os_signpost_id_t v39 = a3;
  os_signpost_id_t v52 = a2;
  uint64_t v44 = a1;
  uint64_t v5 = sub_186C5AB7C();
  uint64_t v42 = *(void *)(v5 - 8);
  uint64_t v43 = v5;
  MEMORY[0x1895F8858]();
  os_signpost_id_t v41 = (char *)&v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = sub_186C5AB94();
  uint64_t v49 = *(void *)(v7 - 8);
  uint64_t v50 = v7;
  MEMORY[0x1895F8858]();
  uint64_t v48 = (char *)&v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __int128 v9 = (uint64_t *)(v4 + OBJC_IVAR____TtC6ktrace12ProviderList_providers);
  swift_beginAccess();
  uint64_t result = *v9;
  uint64_t v11 = *(void *)(*v9 + 16);
  if (v11)
  {
    uint64_t v36 = swift_bridgeObjectRetain();
    uint64_t v12 = (uint64_t *)(v36 + 64);
    p_uint32_t type = (char **)(&stru_189F5DFF0 + 16);
    *(void *)&__int128 v14 = 136446210LL;
    __int128 v38 = v14;
    uint64_t v37 = MEMORY[0x18961AFC0] + 8LL;
    *(void *)&__int128 v14 = 136315138LL;
    __int128 v40 = v14;
    do
    {
      uint64_t v24 = *(v12 - 4);
      unint64_t v25 = *(v12 - 3);
      uint64_t v27 = (void *)*(v12 - 2);
      uint64_t v26 = *(v12 - 1);
      uint64_t v28 = *v12;
      v53[4] = v24;
      v53[5] = v25;
      v53[6] = (uint64_t)v27;
      v53[7] = v26;
      v53[8] = v28;
      if (objc_msgSend(v27, p_type[190], *v52, v36, v37))
      {
        uint64_t v29 = qword_18C6A3700;
        swift_unknownObjectRetain_n();
        swift_bridgeObjectRetain();
        swift_unknownObjectRetain();
        swift_bridgeObjectRetain();
        if (v29 != -1) {
          swift_once();
        }
        uint64_t v30 = sub_186C5ABB8();
        __swift_project_value_buffer(v30, (uint64_t)qword_18C6A99C8);
        swift_unknownObjectRetain_n();
        swift_bridgeObjectRetain_n();
        swift_unknownObjectRetain_n();
        swift_bridgeObjectRetain_n();
        os_log_type_t v31 = (os_log_s *)sub_186C5ABA0();
        os_log_type_t v32 = sub_186C5AFCC();
        BOOL v33 = os_log_type_enabled(v31, v32);
        uint64_t v51 = v28;
        if (v33)
        {
          uint64_t v34 = swift_slowAlloc();
          uint64_t v35 = swift_slowAlloc();
          v53[0] = v35;
          *(_DWORD *)uint64_t v34 = v38;
          swift_bridgeObjectRetain();
          *(void *)(v34 + 4) = sub_186BF7C38(v24, v25, v53);
          swift_bridgeObjectRelease_n();
          swift_unknownObjectRelease_n();
          swift_unknownObjectRelease_n();
          swift_bridgeObjectRelease_n();
          _os_log_impl(&dword_186BA3000, v31, v32, v39, (uint8_t *)v34, 0xCu);
          swift_arrayDestroy();
          MEMORY[0x186E466F0](v35, -1LL, -1LL);
          MEMORY[0x186E466F0](v34, -1LL, -1LL);
        }

        else
        {

          swift_bridgeObjectRelease_n();
          swift_unknownObjectRelease_n();
          swift_unknownObjectRelease_n();
          swift_bridgeObjectRelease_n();
        }

        uint64_t v47 = v11;
        if (qword_18C6A3708 != -1) {
          swift_once();
        }
        __swift_project_value_buffer(v50, (uint64_t)qword_18C6A99E0);
        (*(void (**)(void))(v49 + 16))();
        swift_unknownObjectRetain_n();
        swift_bridgeObjectRetain_n();
        swift_unknownObjectRetain_n();
        swift_bridgeObjectRetain_n();
        uint64_t v15 = v41;
        sub_186C5AB70();
        uint64_t v16 = swift_slowAlloc();
        uint64_t v17 = swift_slowAlloc();
        v53[0] = v17;
        *(_DWORD *)uint64_t v16 = v40;
        swift_bridgeObjectRetain();
        *(void *)(v16 + 4) = sub_186BF7C38(v24, v25, v53);
        swift_bridgeObjectRelease_n();
        swift_unknownObjectRelease_n();
        swift_unknownObjectRelease_n();
        swift_bridgeObjectRelease_n();
        uint64_t v18 = (os_log_s *)sub_186C5AB88();
        os_signpost_type_t v19 = sub_186C5B050();
        os_signpost_id_t v20 = sub_186C5AB64();
        uint64_t v46 = v26;
        BOOL v21 = v45;
        _os_signpost_emit_with_name_impl(&dword_186BA3000, v18, v19, v20, v45, "%s", (uint8_t *)v16, 0xCu);
        uint64_t v22 = v44;
        objc_msgSend(v27, *v52, v44);
        sub_186BF2900(v22);
        LOBYTE(v22) = sub_186C5B044();
        os_signpost_id_t v23 = sub_186C5AB64();
        _os_signpost_emit_with_name_impl( &dword_186BA3000,  v18,  (os_signpost_type_t)v22,  v23,  v21,  "%s",  (uint8_t *)v16,  0xCu);

        swift_arrayDestroy();
        MEMORY[0x186E466F0](v17, -1LL, -1LL);
        MEMORY[0x186E466F0](v16, -1LL, -1LL);
        swift_bridgeObjectRelease();
        swift_unknownObjectRelease();
        swift_unknownObjectRelease_n();
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v42 + 8))(v15, v43);
        (*(void (**)(char *, uint64_t))(v49 + 8))(v48, v50);
        uint64_t v11 = v47;
        p_uint32_t type = &stru_189F5DFF0.type;
      }

      v12 += 5;
      --v11;
    }

    while (v11);
    return swift_bridgeObjectRelease();
  }

  return result;
}

Swift::Void __swiftcall ProviderList.configurePostprocessing(session:)(Swift::OpaquePointer session)
{
}

uint64_t sub_186BF631C(uint64_t a1, SEL *a2, const char *a3, const char *a4)
{
  uint64_t v46 = a1;
  uint64_t v47 = a4;
  os_signpost_id_t v41 = a3;
  os_log_type_t v55 = a2;
  uint64_t v5 = sub_186C5AB7C();
  uint64_t v44 = *(void *)(v5 - 8);
  uint64_t v45 = v5;
  MEMORY[0x1895F8858]();
  uint64_t v43 = (char *)&v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = sub_186C5AB94();
  uint64_t v53 = *(void *)(v7 - 8);
  uint64_t v54 = v7;
  MEMORY[0x1895F8858]();
  os_signpost_id_t v52 = (char *)&v38 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __int128 v9 = (uint64_t *)(v4 + OBJC_IVAR____TtC6ktrace12ProviderList_providers);
  swift_beginAccess();
  uint64_t result = *v9;
  uint64_t v11 = *(void *)(*v9 + 16);
  if (v11)
  {
    uint64_t v38 = swift_bridgeObjectRetain();
    uint64_t v12 = (uint64_t *)(v38 + 64);
    p_uint32_t type = (char **)(&stru_189F5DFF0 + 16);
    *(void *)&__int128 v14 = 136446210LL;
    __int128 v40 = v14;
    uint64_t v39 = MEMORY[0x18961AFC0] + 8LL;
    *(void *)&__int128 v14 = 136315138LL;
    __int128 v42 = v14;
    do
    {
      uint64_t v26 = *(v12 - 4);
      unint64_t v27 = *(v12 - 3);
      uint64_t v28 = (void *)*(v12 - 2);
      uint64_t v29 = *(v12 - 1);
      uint64_t v30 = *v12;
      if (objc_msgSend(v28, p_type[190], *v55, v38, v39))
      {
        uint64_t v51 = v11;
        uint64_t v31 = qword_18C6A3700;
        swift_unknownObjectRetain_n();
        swift_bridgeObjectRetain();
        swift_unknownObjectRetain();
        swift_bridgeObjectRetain();
        if (v31 != -1) {
          swift_once();
        }
        uint64_t v32 = sub_186C5ABB8();
        __swift_project_value_buffer(v32, (uint64_t)qword_18C6A99C8);
        swift_unknownObjectRetain_n();
        swift_bridgeObjectRetain_n();
        swift_unknownObjectRetain_n();
        swift_bridgeObjectRetain_n();
        BOOL v33 = (os_log_s *)sub_186C5ABA0();
        os_log_type_t v34 = sub_186C5AFCC();
        if (os_log_type_enabled(v33, v34))
        {
          uint64_t v35 = v30;
          uint64_t v36 = swift_slowAlloc();
          uint64_t v37 = swift_slowAlloc();
          uint64_t v56 = v37;
          *(_DWORD *)uint64_t v36 = v40;
          swift_bridgeObjectRetain();
          *(void *)(v36 + 4) = sub_186BF7C38(v26, v27, &v56);
          swift_bridgeObjectRelease_n();
          swift_unknownObjectRelease_n();
          swift_unknownObjectRelease_n();
          swift_bridgeObjectRelease_n();
          _os_log_impl(&dword_186BA3000, v33, v34, v41, (uint8_t *)v36, 0xCu);
          swift_arrayDestroy();
          MEMORY[0x186E466F0](v37, -1LL, -1LL);
          uint64_t v30 = v35;
          MEMORY[0x186E466F0](v36, -1LL, -1LL);
        }

        else
        {

          swift_bridgeObjectRelease_n();
          swift_unknownObjectRelease_n();
          swift_unknownObjectRelease_n();
          swift_bridgeObjectRelease_n();
        }

        if (qword_18C6A3708 != -1) {
          swift_once();
        }
        __swift_project_value_buffer(v54, (uint64_t)qword_18C6A99E0);
        (*(void (**)(void))(v53 + 16))();
        swift_unknownObjectRetain_n();
        swift_bridgeObjectRetain_n();
        swift_unknownObjectRetain_n();
        swift_bridgeObjectRetain_n();
        uint64_t v15 = v43;
        sub_186C5AB70();
        uint64_t v16 = swift_slowAlloc();
        uint64_t v50 = v30;
        uint64_t v17 = v16;
        uint64_t v18 = swift_slowAlloc();
        uint64_t v56 = v18;
        *(_DWORD *)uint64_t v17 = v42;
        swift_bridgeObjectRetain();
        *(void *)(v17 + 4) = sub_186BF7C38(v26, v27, &v56);
        swift_bridgeObjectRelease_n();
        swift_unknownObjectRelease_n();
        swift_unknownObjectRelease_n();
        swift_bridgeObjectRelease_n();
        os_signpost_type_t v19 = (os_log_s *)sub_186C5AB88();
        os_signpost_type_t v20 = sub_186C5B050();
        os_signpost_id_t v21 = sub_186C5AB64();
        uint64_t v49 = v29;
        uint64_t v22 = v28;
        os_signpost_id_t v23 = v47;
        unint64_t v48 = v27;
        _os_signpost_emit_with_name_impl(&dword_186BA3000, v19, v20, v21, v47, "%s", (uint8_t *)v17, 0xCu);
        objc_msgSend(v22, *v55, v46);
        os_signpost_type_t v24 = sub_186C5B044();
        os_signpost_id_t v25 = sub_186C5AB64();
        _os_signpost_emit_with_name_impl(&dword_186BA3000, v19, v24, v25, v23, "%s", (uint8_t *)v17, 0xCu);

        swift_arrayDestroy();
        MEMORY[0x186E466F0](v18, -1LL, -1LL);
        MEMORY[0x186E466F0](v17, -1LL, -1LL);
        swift_bridgeObjectRelease();
        swift_unknownObjectRelease();
        swift_bridgeObjectRelease();
        swift_unknownObjectRelease_n();
        (*(void (**)(char *, uint64_t))(v44 + 8))(v15, v45);
        (*(void (**)(char *, uint64_t))(v53 + 8))(v52, v54);
        uint64_t v11 = v51;
        p_uint32_t type = &stru_189F5DFF0.type;
      }

      v12 += 5;
      --v11;
    }

    while (v11);
    return swift_bridgeObjectRelease();
  }

  return result;
}

Swift::Void __swiftcall ProviderList.postprocessingComplete(file:)(Swift::OpaquePointer file)
{
  rawint Value = file._rawValue;
  uint64_t v2 = sub_186C5AB7C();
  uint64_t v35 = *(void *)(v2 - 8);
  uint64_t v36 = v2;
  MEMORY[0x1895F8858]();
  os_log_type_t v34 = (char *)&v30 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = sub_186C5AB94();
  uint64_t v42 = *(void *)(v4 - 8);
  uint64_t v43 = v4;
  MEMORY[0x1895F8858]();
  os_signpost_id_t v41 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = v1 + OBJC_IVAR____TtC6ktrace12ProviderList_providers;
  swift_beginAccess();
  uint64_t v7 = *(void *)(*(void *)v6 + 16LL);
  if (v7)
  {
    uint64_t v30 = swift_bridgeObjectRetain();
    uint64_t v8 = (uint64_t *)(v30 + 64);
    p_uint32_t type = (char **)(&stru_189F5DFF0 + 16);
    *(void *)&__int128 v10 = 136446210LL;
    __int128 v32 = v10;
    uint64_t v31 = MEMORY[0x18961AFC0] + 8LL;
    *(void *)&__int128 v10 = 136315138LL;
    __int128 v33 = v10;
    do
    {
      uint64_t v19 = *(v8 - 4);
      unint64_t v20 = *(v8 - 3);
      os_signpost_id_t v21 = (void *)*(v8 - 2);
      uint64_t v22 = *(v8 - 1);
      uint64_t v23 = *v8;
      uint64_t v44[4] = v19;
      v44[5] = v20;
      void v44[6] = (uint64_t)v21;
      v44[7] = v22;
      v44[8] = v23;
      if (objc_msgSend(v21, p_type[190], sel_postprocessingCompleteWithFile_, v30, v31))
      {
        uint64_t v40 = v7;
        uint64_t v24 = qword_18C6A3700;
        swift_unknownObjectRetain_n();
        swift_bridgeObjectRetain();
        swift_unknownObjectRetain();
        swift_bridgeObjectRetain();
        if (v24 != -1) {
          swift_once();
        }
        uint64_t v25 = sub_186C5ABB8();
        __swift_project_value_buffer(v25, (uint64_t)qword_18C6A99C8);
        swift_unknownObjectRetain_n();
        swift_bridgeObjectRetain_n();
        swift_unknownObjectRetain_n();
        swift_bridgeObjectRetain_n();
        uint64_t v26 = (os_log_s *)sub_186C5ABA0();
        os_log_type_t v27 = sub_186C5AFCC();
        if (os_log_type_enabled(v26, v27))
        {
          uint64_t v28 = swift_slowAlloc();
          uint64_t v29 = swift_slowAlloc();
          v44[0] = v29;
          *(_DWORD *)uint64_t v28 = v32;
          swift_bridgeObjectRetain();
          *(void *)(v28 + 4) = sub_186BF7C38(v19, v20, v44);
          swift_bridgeObjectRelease_n();
          swift_unknownObjectRelease_n();
          swift_unknownObjectRelease_n();
          swift_bridgeObjectRelease_n();
          _os_log_impl( &dword_186BA3000,  v26,  v27,  "calling provider %{public}s's postprocessingComplete",  (uint8_t *)v28,  0xCu);
          swift_arrayDestroy();
          MEMORY[0x186E466F0](v29, -1LL, -1LL);
          MEMORY[0x186E466F0](v28, -1LL, -1LL);
        }

        else
        {

          swift_bridgeObjectRelease_n();
          swift_unknownObjectRelease_n();
          swift_unknownObjectRelease_n();
          swift_bridgeObjectRelease_n();
        }

        if (qword_18C6A3708 != -1) {
          swift_once();
        }
        __swift_project_value_buffer(v43, (uint64_t)qword_18C6A99E0);
        (*(void (**)(void))(v42 + 16))();
        swift_unknownObjectRetain_n();
        swift_bridgeObjectRetain_n();
        swift_unknownObjectRetain_n();
        swift_bridgeObjectRetain_n();
        uint64_t v39 = v23;
        uint64_t v11 = v34;
        sub_186C5AB70();
        uint64_t v12 = swift_slowAlloc();
        uint64_t v13 = swift_slowAlloc();
        v44[0] = v13;
        *(_DWORD *)uint64_t v12 = v33;
        swift_bridgeObjectRetain();
        *(void *)(v12 + 4) = sub_186BF7C38(v19, v20, v44);
        swift_bridgeObjectRelease_n();
        swift_unknownObjectRelease_n();
        swift_unknownObjectRelease_n();
        swift_bridgeObjectRelease_n();
        __int128 v14 = (os_log_s *)sub_186C5AB88();
        os_signpost_type_t v15 = sub_186C5B050();
        os_signpost_id_t v16 = sub_186C5AB64();
        uint64_t v38 = v22;
        _os_signpost_emit_with_name_impl( &dword_186BA3000,  v14,  v15,  v16,  "08: postprocessingComplete",  "%s",  (uint8_t *)v12,  0xCu);
        uint64_t v17 = (uint64_t)rawValue;
        objc_msgSend(v21, sel_postprocessingCompleteWithFile_, rawValue);
        sub_186BF2900(v17);
        LOBYTE(v17) = sub_186C5B044();
        os_signpost_id_t v18 = sub_186C5AB64();
        _os_signpost_emit_with_name_impl( &dword_186BA3000,  v14,  (os_signpost_type_t)v17,  v18,  "08: postprocessingComplete",  "%s",  (uint8_t *)v12,  0xCu);

        swift_arrayDestroy();
        MEMORY[0x186E466F0](v13, -1LL, -1LL);
        MEMORY[0x186E466F0](v12, -1LL, -1LL);
        swift_bridgeObjectRelease();
        swift_unknownObjectRelease();
        swift_unknownObjectRelease_n();
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v35 + 8))(v11, v36);
        (*(void (**)(char *, uint64_t))(v42 + 8))(v41, v43);
        uint64_t v7 = v40;
        p_uint32_t type = &stru_189F5DFF0.type;
      }

      v8 += 5;
      --v7;
    }

    while (v7);
    swift_bridgeObjectRelease();
  }

uint64_t ProviderList.willFinish(catalog:file:)(uint64_t a1, uint64_t a2)
{
  uint64_t v39 = a1;
  uint64_t v40 = a2;
  uint64_t v3 = sub_186C5AB7C();
  uint64_t v37 = *(void *)(v3 - 8);
  uint64_t v38 = v3;
  MEMORY[0x1895F8858]();
  uint64_t v36 = (char *)&v32 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = sub_186C5AB94();
  uint64_t v46 = *(void *)(v5 - 8);
  uint64_t v47 = v5;
  MEMORY[0x1895F8858]();
  uint64_t v45 = (char *)&v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = (uint64_t *)(v2 + OBJC_IVAR____TtC6ktrace12ProviderList_providers);
  swift_beginAccess();
  uint64_t result = *v7;
  uint64_t v9 = *(void *)(*v7 + 16);
  if (v9)
  {
    uint64_t v32 = swift_bridgeObjectRetain();
    __int128 v10 = (uint64_t *)(v32 + 64);
    *(void *)&__int128 v11 = 136446210LL;
    __int128 v34 = v11;
    uint64_t v33 = MEMORY[0x18961AFC0] + 8LL;
    *(void *)&__int128 v11 = 136315138LL;
    __int128 v35 = v11;
    uint64_t v12 = v36;
    do
    {
      uint64_t v43 = v10;
      uint64_t v44 = v9;
      uint64_t v14 = *(v10 - 4);
      unint64_t v13 = *(v10 - 3);
      os_signpost_type_t v15 = (void *)*(v10 - 2);
      uint64_t v16 = *(v10 - 1);
      uint64_t v17 = *v10;
      v48[4] = v14;
      v48[5] = v13;
      v48[6] = (uint64_t)v15;
      v48[7] = v16;
      v48[8] = v17;
      uint64_t v18 = qword_18C6A3700;
      swift_bridgeObjectRetain();
      swift_unknownObjectRetain();
      swift_unknownObjectRetain();
      swift_bridgeObjectRetain();
      if (v18 != -1) {
        swift_once();
      }
      uint64_t v19 = sub_186C5ABB8();
      __swift_project_value_buffer(v19, (uint64_t)qword_18C6A99C8);
      swift_bridgeObjectRetain_n();
      swift_unknownObjectRetain_n();
      swift_unknownObjectRetain_n();
      swift_bridgeObjectRetain_n();
      unint64_t v20 = (os_log_s *)sub_186C5ABA0();
      os_log_type_t v21 = sub_186C5AFCC();
      if (os_log_type_enabled(v20, v21))
      {
        uint64_t v22 = swift_slowAlloc();
        uint64_t v23 = swift_slowAlloc();
        v48[0] = v23;
        *(_DWORD *)uint64_t v22 = v34;
        swift_bridgeObjectRetain();
        *(void *)(v22 + 4) = sub_186BF7C38(v14, v13, v48);
        swift_bridgeObjectRelease_n();
        swift_unknownObjectRelease_n();
        swift_unknownObjectRelease_n();
        swift_bridgeObjectRelease_n();
        _os_log_impl(&dword_186BA3000, v20, v21, "calling provider %{public}s's willFinish", (uint8_t *)v22, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x186E466F0](v23, -1LL, -1LL);
        MEMORY[0x186E466F0](v22, -1LL, -1LL);
      }

      else
      {

        swift_bridgeObjectRelease_n();
        swift_unknownObjectRelease_n();
        swift_unknownObjectRelease_n();
        swift_bridgeObjectRelease_n();
      }

      if (qword_18C6A3708 != -1) {
        swift_once();
      }
      uint64_t v24 = __swift_project_value_buffer(v47, (uint64_t)qword_18C6A99E0);
      (*(void (**)(char *, uint64_t))(v46 + 16))(v45, v24);
      swift_bridgeObjectRetain_n();
      swift_unknownObjectRetain_n();
      swift_unknownObjectRetain_n();
      swift_bridgeObjectRetain_n();
      sub_186C5AB70();
      uint64_t v25 = swift_slowAlloc();
      uint64_t v26 = swift_slowAlloc();
      v48[0] = v26;
      *(_DWORD *)uint64_t v25 = v35;
      swift_bridgeObjectRetain();
      *(void *)(v25 + 4) = sub_186BF7C38(v14, v13, v48);
      swift_bridgeObjectRelease_n();
      swift_unknownObjectRelease_n();
      swift_unknownObjectRelease_n();
      swift_bridgeObjectRelease_n();
      os_log_type_t v27 = (os_log_s *)sub_186C5AB88();
      os_signpost_type_t v28 = sub_186C5B050();
      os_signpost_id_t v29 = sub_186C5AB64();
      uint64_t v42 = v17;
      uint64_t v41 = v16;
      _os_signpost_emit_with_name_impl(&dword_186BA3000, v27, v28, v29, "09: willFinish", "%s", (uint8_t *)v25, 0xCu);
      uint64_t v30 = v40;
      objc_msgSend(v15, sel_willFinishWithCatalog_file_, v39, v40, v32, v33);
      sub_186BF2900(v30);
      LOBYTE(v30) = sub_186C5B044();
      os_signpost_id_t v31 = sub_186C5AB64();
      _os_signpost_emit_with_name_impl( &dword_186BA3000,  v27,  (os_signpost_type_t)v30,  v31,  "09: willFinish",  "%s",  (uint8_t *)v25,  0xCu);

      swift_arrayDestroy();
      MEMORY[0x186E466F0](v26, -1LL, -1LL);
      MEMORY[0x186E466F0](v25, -1LL, -1LL);
      swift_bridgeObjectRelease();
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v37 + 8))(v12, v38);
      (*(void (**)(char *, uint64_t))(v46 + 8))(v45, v47);
      __int128 v10 = v43 + 5;
      uint64_t v9 = v44 - 1;
    }

    while (v44 != 1);
    return swift_bridgeObjectRelease();
  }

  return result;
}

id ProviderList.__allocating_init()()
{
  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void ProviderList.init()()
{
}

id ProviderList.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t ktrace_session_provide(_TtC6ktrace12ProviderList *a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5)
{
  uint64_t v9 = (void *)sub_186C5ACB4();
  swift_unknownObjectRetain();
  uint64_t v13 = ktrace_session_provide(_:_:_:_:_:)(a1, a2, v9, a4, a5, v10, v11, v12);
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  return v13;
}

uint64_t ktrace_session_provide(_:_:_:_:_:)( _TtC6ktrace12ProviderList *a1, uint64_t a2, void *a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8 = a5;
  _session_ensure_providers(a1, a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
  id v12 = (id)_session_providers((uint64_t)a1);
  uint64_t v13 = sub_186C5ADE0();
  sub_186BF2E4C(v13, v14, a3, a4, v8);
  swift_bridgeObjectRelease();

  return 0LL;
}

uint64_t ktrace_list_providers(uint64_t a1, uint64_t a2, char a3)
{
  return sub_186BFA614(a1, a3);
}

uint64_t ktrace_list_providers(_:_:_:)(uint64_t a1, uint64_t a2, char a3)
{
  return sub_186BFA614(a1, a3);
}

void *sub_186BF76E4(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }

  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if (v7 + 0x4000000000000000LL >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_18C6A2368);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      void v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 40);
      id v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[5 * v8 + 4]) {
          memmove(v12, a4 + 4, 40 * v8);
        }
        a4[2] = 0LL;
        goto LABEL_22;
      }
    }

    else
    {
      uint64_t v10 = (void *)MEMORY[0x18961AFE8];
      id v12 = (void *)(MEMORY[0x18961AFE8] + 32LL);
    }

    sub_186BF9224(0LL, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }

  __break(1u);
  return result;
}

uint64_t sub_186BF7804(char a1, int64_t a2, char a3, unint64_t a4)
{
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *(void *)(a4 + 24);
    uint64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        goto LABEL_29;
      }

      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    uint64_t v7 = a2;
  }

  uint64_t v8 = *(void *)(a4 + 16);
  if (v7 <= v8) {
    uint64_t v9 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v9 = v7;
  }
  if (!v9)
  {
    uint64_t v13 = (void *)MEMORY[0x18961AFE8];
    goto LABEL_19;
  }

  __swift_instantiateConcreteTypeFromMangledName(&qword_18C6A2348);
  uint64_t v10 = *(void *)(sub_186C5AA8C() - 8);
  uint64_t v11 = *(void *)(v10 + 72);
  unint64_t v12 = (*(unsigned __int8 *)(v10 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  uint64_t v13 = (void *)swift_allocObject();
  size_t v14 = _swift_stdlib_malloc_size(v13);
  if (!v11 || (v14 - v12 == 0x8000000000000000LL ? (BOOL v15 = v11 == -1) : (BOOL v15 = 0), v15))
  {
LABEL_29:
    uint64_t result = sub_186C5B350();
    __break(1u);
    return result;
  }

  v13[2] = v8;
  void v13[3] = 2 * ((uint64_t)(v14 - v12) / v11);
LABEL_19:
  uint64_t v16 = *(void *)(sub_186C5AA8C() - 8);
  unint64_t v17 = (*(unsigned __int8 *)(v16 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
  unint64_t v18 = (unint64_t)v13 + v17;
  if ((a1 & 1) != 0)
  {
    if ((unint64_t)v13 < a4 || v18 >= a4 + v17 + *(void *)(v16 + 72) * v8)
    {
      swift_arrayInitWithTakeFrontToBack();
    }

    else if (v13 != (void *)a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }

    *(void *)(a4 + 16) = 0LL;
  }

  else
  {
    sub_186BF99B8(0LL, v8, v18, a4);
  }

  swift_bridgeObjectRelease();
  return (uint64_t)v13;
}

void *sub_186BF7A0C(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }

  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if (v7 + 0x4000000000000000LL >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_18C6A2330);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 + 31;
      }
      void v10[2] = v8;
      v10[3] = 2 * (v12 >> 6);
      uint64_t v13 = v10 + 4;
      if ((v5 & 1) != 0) {
        goto LABEL_15;
      }
    }

    else
    {
      uint64_t v10 = (void *)MEMORY[0x18961AFE8];
      uint64_t v13 = (void *)(MEMORY[0x18961AFE8] + 32LL);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[8 * v8 + 4]) {
          memmove(v13, a4 + 4, v8 << 6);
        }
        a4[2] = 0LL;
        goto LABEL_24;
      }
    }

    sub_186BF98C8(0LL, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }

  __break(1u);
  return result;
}

void *sub_186BF7B18(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }

  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if (v7 + 0x4000000000000000LL >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_18C6A2338);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      void v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 40);
      uint64_t v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[5 * v8 + 4]) {
          memmove(v12, a4 + 4, 40 * v8);
        }
        a4[2] = 0LL;
        goto LABEL_22;
      }
    }

    else
    {
      uint64_t v10 = (void *)MEMORY[0x18961AFE8];
      uint64_t v12 = (void *)(MEMORY[0x18961AFE8] + 32LL);
    }

    sub_186BFA520(0LL, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }

  __break(1u);
  return result;
}

uint64_t sub_186BF7C38(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6 = sub_186BF7D08(v12, 0LL, 0LL, 1, a1, a2);
  uint64_t v7 = v12[0];
  if (v6)
  {
    uint64_t v8 = v6;
    uint64_t ObjectType = swift_getObjectType();
    v12[0] = v8;
    uint64_t v9 = *a3;
    if (*a3)
    {
      sub_186BFB82C((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }

  else
  {
    uint64_t ObjectType = MEMORY[0x1896191F8];
    v12[0] = a1;
    v12[1] = a2;
    uint64_t v10 = *a3;
    if (*a3)
    {
      sub_186BFB82C((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }

    swift_bridgeObjectRetain();
  }

  __swift_destroy_boxed_opaque_existential_0((uint64_t)v12);
  return v7;
}

uint64_t sub_186BF7D08(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  if ((a6 & 0x2000000000000000LL) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        uint64_t v11 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v11)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (void *)&__dst[v11] || (char *)__src + v11 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            sub_186C5B0F8();
            uint64_t result = 0LL;
            *a1 = (uint64_t)__dst;
            return result;
          }

          goto LABEL_17;
        }
      }
    }

LABEL_5:
  *a1 = v8;
  if ((a6 & 0x8000000000000000LL) != 0) {
    return 0LL;
  }
  else {
    return swift_unknownObjectRetain();
  }
}

  if ((*(void *)(v3 + 24) >> 1) - *(void *)(v3 + 16) < v2)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }

  uint64_t result = swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_14:
    uint64_t result = swift_bridgeObjectRelease();
    *uint64_t v1 = v3;
    return result;
  }

  uint64_t v7 = *(void *)(v3 + 16);
  uint64_t v8 = __OFADD__(v7, v2);
  uint64_t v9 = v7 + v2;
  if (!v8)
  {
    *(void *)(v3 + 16) = v9;
    goto LABEL_14;
  }

  if ((v3[3] >> 1) - v3[2] < v2)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }

  __swift_instantiateConcreteTypeFromMangledName(&qword_18C6A2430);
  uint64_t result = (void *)swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_14:
    uint64_t result = (void *)swift_bridgeObjectRelease();
    *(void *)uint64_t v1 = v3;
    return result;
  }

  uint64_t v7 = v3[2];
  uint64_t v8 = __OFADD__(v7, v2);
  uint64_t v9 = v7 + v2;
  if (!v8)
  {
    int v3[2] = v9;
    goto LABEL_14;
  }

  if ((*(void *)(v3 + 24) >> 1) - *(void *)(v3 + 16) < v2)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }

  uint64_t result = swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_14:
    uint64_t result = swift_bridgeObjectRelease();
    *uint64_t v1 = v3;
    return result;
  }

  uint64_t v7 = *(void *)(v3 + 16);
  uint64_t v8 = __OFADD__(v7, v2);
  uint64_t v9 = v7 + v2;
  if (!v8)
  {
    *(void *)(v3 + 16) = v9;
    goto LABEL_14;
  }

  if ((*(void *)(v3 + 24) >> 1) - *(void *)(v3 + 16) < v2)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }

  uint64_t result = swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_14:
    uint64_t result = swift_bridgeObjectRelease();
    *uint64_t v1 = v3;
    return result;
  }

  uint64_t v7 = *(void *)(v3 + 16);
  uint64_t v8 = __OFADD__(v7, v2);
  uint64_t v9 = v7 + v2;
  if (!v8)
  {
    *(void *)(v3 + 16) = v9;
    goto LABEL_14;
  }

        uint64_t v6 = (v6 + 1) & v7;
      }

      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) != 0);
    }

    uint64_t v16 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    unint64_t v17 = *v16;
    unint64_t v18 = (-1LL << v3) - 1;
  }

  else
  {
    uint64_t v16 = (uint64_t *)(v4 + 8 * (result >> 6));
    unint64_t v18 = *v16;
    unint64_t v17 = (-1LL << result) - 1;
  }

  *uint64_t v16 = v18 & v17;
  uint64_t v19 = *(void *)(a2 + 16);
  unint64_t v20 = __OFSUB__(v19, 1LL);
  os_log_type_t v21 = v19 - 1;
  if (v20)
  {
    __break(1u);
  }

  else
  {
    *(void *)(a2 + 16) = v21;
    ++*(_DWORD *)(a2 + 36);
  }

  return result;
}

        uint64_t v6 = (v6 + 1) & v7;
      }

      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) != 0);
    }

    unint64_t v17 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    unint64_t v18 = *v17;
    uint64_t v19 = (-1LL << v3) - 1;
  }

  else
  {
    unint64_t v17 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v19 = *v17;
    unint64_t v18 = (-1LL << result) - 1;
  }

  *unint64_t v17 = v19 & v18;
  unint64_t v20 = *(void *)(a2 + 16);
  os_log_type_t v21 = __OFSUB__(v20, 1LL);
  uint64_t v22 = v20 - 1;
  if (v21)
  {
    __break(1u);
  }

  else
  {
    *(void *)(a2 + 16) = v22;
    ++*(_DWORD *)(a2 + 36);
  }

  return result;
}

    uint64_t v8 = *a5;
    uint64_t v7 = a5[1];
    uint64_t v9 = *(void *)(*a5 + 16LL);
    if (v7 == v9) {
      goto LABEL_2;
    }
  }

  __break(1u);
LABEL_29:
  __break(1u);
LABEL_30:
  __break(1u);
  return result;
}

        uint64_t v6 = (v6 + 1) & v7;
      }

      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) != 0);
    }

    *(void *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) &= (-1LL << v2) - 1;
    uint64_t result = swift_release();
  }

  else
  {
    *(void *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL)) &= (-1LL << result) - 1;
  }

  BOOL v15 = *(void *)(v3 + 16);
  uint64_t v16 = __OFSUB__(v15, 1LL);
  unint64_t v17 = v15 - 1;
  if (v16)
  {
    __break(1u);
  }

  else
  {
    *(void *)(v3 + 16) = v17;
    ++*(_DWORD *)(v3 + 36);
  }

  return result;
}

  uint64_t v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }

  uint64_t v9 = (unint64_t)&v3[5 * v8 + 4];
  if (a1 + 32 < v9 + 40 * v2 && v9 < a1 + 32 + 40 * v2) {
    goto LABEL_24;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C6A2BD0);
  swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)uint64_t v1 = v3;
    return result;
  }

  uint64_t v11 = v3[2];
  uint64_t v12 = __OFADD__(v11, v2);
  uint64_t v13 = v11 + v2;
  if (!v12)
  {
    int v3[2] = v13;
    goto LABEL_19;
  }

  if ((*(void *)(v3 + 24) >> 1) - *(void *)(v3 + 16) < v2)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }

  uint64_t result = swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_14:
    uint64_t result = swift_bridgeObjectRelease();
    *uint64_t v1 = v3;
    return result;
  }

  uint64_t v7 = *(void *)(v3 + 16);
  uint64_t v8 = __OFADD__(v7, v2);
  uint64_t v9 = v7 + v2;
  if (!v8)
  {
    *(void *)(v3 + 16) = v9;
    goto LABEL_14;
  }

uint64_t sub_186BF7EC0(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = sub_186BF7F54(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = sub_186BF812C(0, *(void *)(v2 + 16) + 1LL, 1, (char *)v2);
  }
  unint64_t v4 = *(void *)(v2 + 16);
  unint64_t v3 = *(void *)(v2 + 24);
  if (v4 >= v3 >> 1) {
    uint64_t v2 = sub_186BF812C(v3 > 1, v4 + 1, 1, (char *)v2);
  }
  *(void *)(v2 + 16) = v4 + 1;
  *(_BYTE *)(v2 + 32 + v4) = 0;
  return v2;
}

uint64_t sub_186BF7F54(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0x1000000000000000LL) != 0) {
    goto LABEL_10;
  }
  if ((a2 & 0x2000000000000000LL) != 0) {
    uint64_t v2 = HIBYTE(a2) & 0xF;
  }
  else {
    uint64_t v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v2)
  {
    while (1)
    {
      unint64_t v3 = sub_186BF80C8(v2, 0LL);
      if (v2 < 0) {
        break;
      }
      unint64_t v4 = v3;
      uint64_t v5 = sub_186C5B26C();
      if ((v6 & 1) != 0) {
        goto LABEL_14;
      }
      if (v5 == v2) {
        return (uint64_t)v4;
      }
      sub_186C5B350();
      __break(1u);
LABEL_10:
      uint64_t v2 = sub_186C5ADF8();
      if (!v2) {
        return MEMORY[0x18961AFE8];
      }
    }

    sub_186C5B398();
    __break(1u);
LABEL_14:
    uint64_t result = sub_186C5B350();
    __break(1u);
  }

  else
  {
    return MEMORY[0x18961AFE8];
  }

  return result;
}

void *sub_186BF80C8(uint64_t a1, uint64_t a2)
{
  if (a2 <= a1) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = a2;
  }
  if (!v2) {
    return (void *)MEMORY[0x18961AFE8];
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C6A2340);
  unint64_t v4 = (void *)swift_allocObject();
  size_t v5 = _swift_stdlib_malloc_size(v4);
  int v4[2] = a1;
  void v4[3] = 2 * v5 - 64;
  return v4;
}

uint64_t sub_186BF812C(char a1, int64_t a2, char a3, char *a4)
{
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        goto LABEL_30;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  int64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    int64_t v9 = *((void *)a4 + 2);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_18C6A2340);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * v11 - 64;
  }

  else
  {
    uint64_t v10 = (char *)MEMORY[0x18961AFE8];
  }

  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[v8]) {
      memmove(v12, v13, v8);
    }
    *((void *)a4 + 2) = 0LL;
    goto LABEL_28;
  }

  if (v13 >= &v12[v8] || v12 >= &v13[v8])
  {
    memcpy(v12, v13, v8);
LABEL_28:
    swift_bridgeObjectRelease();
    return (uint64_t)v10;
  }

unint64_t sub_186BF8278(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_186C5B5D8();
  return sub_186BF82DC(a1, a2, v4);
}

unint64_t sub_186BF82DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1LL << *(_BYTE *)(v3 + 32);
  unint64_t v6 = a3 & ~v5;
  if (((*(void *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) != 0)
  {
    uint64_t v9 = *(void *)(v3 + 48);
    uint64_t v10 = (void *)(v9 + 16 * v6);
    BOOL v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (sub_186C5B4F4() & 1) == 0)
    {
      uint64_t v12 = ~v5;
      do
      {
        unint64_t v6 = (v6 + 1) & v12;
        if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) == 0) {
          break;
        }
        uint64_t v13 = (void *)(v9 + 16 * v6);
        BOOL v14 = *v13 == a1 && v13[1] == a2;
      }

      while (!v14 && (sub_186C5B4F4() & 1) == 0);
    }
  }

  return v6;
}

uint64_t sub_186BF83BC(char a1, int64_t a2, char a3, char *a4)
{
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        goto LABEL_32;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_18C6A2330);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 + 31;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 6);
  }

  else
  {
    uint64_t v10 = (char *)MEMORY[0x18961AFE8];
  }

  uint64_t v13 = v10 + 32;
  BOOL v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[64 * v8]) {
      memmove(v13, v14, v8 << 6);
    }
    *((void *)a4 + 2) = 0LL;
    goto LABEL_30;
  }

  if (v14 >= &v13[64 * v8] || v13 >= &v14[64 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }

LABEL_32:
  uint64_t result = sub_186C5B398();
  __break(1u);
  return result;
}

  sub_186BFA418(v6 + 96, (uint64_t)v75, &qword_18C6A26C0);
  sub_186BFA418((uint64_t)v75, (uint64_t)&v85, &qword_18C6A26C0);
  if (v85)
  {
    if (*(void *)(v85 + 16))
    {
      os_signpost_type_t v28 = *(void *)(v85 + 32);
      swift_bridgeObjectRetain();
      sub_186C0E898(v28);
      uint64_t result = swift_bridgeObjectRelease();
      if (v5) {
        return result;
      }
    }
  }

  sub_186BFA418(v6 + 80, (uint64_t)v74, &qword_18C6A26C8);
  sub_186BFA418((uint64_t)v74, (uint64_t)v79, &qword_18C6A26C8);
  if (v79[0] != 2LL)
  {
    uint64_t result = sub_186C0EC98(v79[0] & 1, v80);
    if (v5) {
      return result;
    }
  }

  sub_186BFA418(v6 + 104, (uint64_t)v73, &qword_18C6A26D0);
  sub_186BFA418((uint64_t)v73, (uint64_t)v81, &qword_18C6A26D0);
  if ((v82 & 1) == 0)
  {
    uint64_t result = sub_186C0F304(0LL, v81[0], v81[1]);
    if (v5) {
      return result;
    }
  }

  sub_186BFA418(v6 + 128, (uint64_t)v72, &qword_18C6A26D0);
  sub_186BFA418((uint64_t)v72, (uint64_t)v83, &qword_18C6A26D0);
  if ((v84 & 1) == 0)
  {
    uint64_t result = sub_186C0F304(1LL, v83[0], v83[1]);
    if (v5) {
      return result;
    }
  }

  if ((kperf_sample_set() & 0x80000000) != 0)
  {
    uint64_t v62 = MEMORY[0x186E445C0]();
    type metadata accessor for KTraceRecordError();
    sub_186BF0CD4();
    swift_allocError();
    *(void *)__int128 v63 = 0xD000000000000014LL;
    *(void *)(v63 + _Block_object_dispose(va, 8) = 0x8000000186C66260LL;
    *(_DWORD *)(v63 + 16) = v62;
    goto LABEL_44;
  }

    LODWORD(v12) = 0;
    LOBYTE(v6) = 1;
    goto LABEL_35;
  }

  if (a1 != 45)
  {
    if (!v6) {
      goto LABEL_32;
    }
    LODWORD(v12) = (a1 - 48);
    if (v6 == 1)
    {
LABEL_34:
      LOBYTE(v6) = 0;
      goto LABEL_35;
    }

    if ((BYTE1(a1) - 48) <= 9u)
    {
      LODWORD(v12) = 10 * v12 + (BYTE1(a1) - 48);
      unint64_t v20 = v6 - 2;
      if (v6 != 2)
      {
        os_log_type_t v21 = (unsigned __int8 *)v29 + 2;
        while (1)
        {
          uint64_t v22 = *v21 - 48;
          if (v22 > 9) {
            goto LABEL_32;
          }
          uint64_t v23 = 10LL * (int)v12;
          LODWORD(v12) = v23 + v22;
          LOBYTE(v6) = 0;
          ++v21;
          if (!--v20) {
            goto LABEL_35;
          }
        }
      }

      goto LABEL_34;
    }

    goto LABEL_32;
  }

  if (v6)
  {
    if (v6 != 1)
    {
      uint64_t v13 = (BYTE1(a1) - 48);
      if (v13 > 9) {
        goto LABEL_32;
      }
      if (v6 == 2)
      {
        LOBYTE(v6) = 0;
        LODWORD(v12) = -v13;
        goto LABEL_35;
      }

      LODWORD(v12) = -10 * v13 - (BYTE2(a1) - 48);
      uint64_t v24 = v6 - 3;
      if (v6 != 3)
      {
        uint64_t v25 = (unsigned __int8 *)v29 + 3;
        while (1)
        {
          uint64_t v26 = *v25 - 48;
          if (v26 > 9) {
            goto LABEL_32;
          }
          os_log_type_t v27 = 10LL * (int)v12;
          LODWORD(v12) = v27 - v26;
          LOBYTE(v6) = 0;
          ++v25;
          if (!--v24) {
            goto LABEL_35;
          }
        }
      }

      goto LABEL_34;
    }

uint64_t sub_186BF8524(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = sub_186BF9210(v2);
  }
  uint64_t v3 = *(void *)(v2 + 16);
  v5[0] = v2 + 32;
  v5[1] = v3;
  uint64_t result = sub_186BF858C(v5);
  *a1 = v2;
  return result;
}

uint64_t sub_186BF858C(uint64_t *a1)
{
  uint64_t v3 = a1[1];
  uint64_t result = sub_186C5B4C4();
  if (result >= v3)
  {
    if (v3 < 0) {
      goto LABEL_152;
    }
    if (v3) {
      return sub_186BF8CB4(0LL, v3, 1LL, a1);
    }
    return result;
  }

  if (v3 >= 0) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = v3 + 1;
  }
  if (v3 < -1) {
    goto LABEL_160;
  }
  uint64_t v118 = result;
  v115 = a1;
  if (v3 < 2)
  {
    uint64_t v8 = MEMORY[0x18961AFE8];
    __uuid_t dst = (char *)(MEMORY[0x18961AFE8] + 32LL);
    if (v3 != 1)
    {
      unint64_t v12 = *(void *)(MEMORY[0x18961AFE8] + 16LL);
      int64_t v11 = (char *)MEMORY[0x18961AFE8];
LABEL_118:
      uint64_t v106 = v11;
      uint64_t v117 = v8;
      if (v12 >= 2)
      {
        uint64_t v107 = *v115;
        do
        {
          unint64_t v108 = v12 - 2;
          if (v12 < 2) {
            goto LABEL_147;
          }
          if (!v107) {
            goto LABEL_159;
          }
          unint64_t v109 = v106;
          uint64_t v110 = *(void *)&v106[16 * v108 + 32];
          uint64_t v111 = *(void *)&v106[16 * v12 + 24];
          sub_186BF8DA4( (char *)(v107 + (v110 << 6)),  (char *)(v107 + (*(void *)&v106[16 * v12 + 16] << 6)),  v107 + (v111 << 6),  __dst);
          if (v1) {
            break;
          }
          if (v111 < v110) {
            goto LABEL_148;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            unint64_t v109 = sub_186BF91FC((uint64_t)v109);
          }
          if (v108 >= *((void *)v109 + 2)) {
            goto LABEL_149;
          }
          v112 = &v109[16 * v108 + 32];
          *(void *)v112 = v110;
          *((void *)v112 + ktrace_session_set_default_event_names_enabled(global_session, 1) = v111;
          unint64_t v113 = *((void *)v109 + 2);
          if (v12 > v113) {
            goto LABEL_150;
          }
          memmove(&v109[16 * v12 + 16], &v109[16 * v12 + 32], 16 * (v113 - v12));
          uint64_t v106 = v109;
          *((void *)v109 + 2) = v113 - 1;
          unint64_t v12 = v113 - 1;
        }

        while (v113 > 2);
      }

LABEL_115:
      swift_bridgeObjectRelease();
      *(void *)(v117 + 16) = 0LL;
      return swift_bridgeObjectRelease();
    }

    uint64_t v117 = MEMORY[0x18961AFE8];
  }

  else
  {
    uint64_t v6 = v5 >> 1;
    uint64_t v7 = sub_186C5AF48();
    *(void *)(v7 + 16) = v6;
    uint64_t v117 = v7;
    __uuid_t dst = (char *)(v7 + 32);
  }

  uint64_t v9 = 0LL;
  uint64_t v10 = *a1;
  uint64_t v116 = *a1 + 8;
  uint64_t v114 = *a1 + 56;
  int64_t v11 = (char *)MEMORY[0x18961AFE8];
  uint64_t v119 = v3;
  uint64_t v120 = *a1;
  while (1)
  {
    uint64_t v13 = v9++;
    if (v9 >= v3) {
      goto LABEL_46;
    }
    BOOL v14 = (uint64_t *)(v10 + (v9 << 6));
    uint64_t v15 = *v14;
    uint64_t v16 = v14[1];
    unint64_t v17 = (void *)(v10 + (v13 << 6));
    if (v15 == *v17 && v16 == v17[1])
    {
      uint64_t v20 = v13 + 2;
      if (v13 + 2 >= v3) {
        goto LABEL_45;
      }
      int v19 = 0;
    }

    else
    {
      int v19 = sub_186C5B4F4();
      uint64_t v20 = v13 + 2;
      if (v13 + 2 >= v3) {
        goto LABEL_36;
      }
    }

    os_log_type_t v21 = (void *)(v116 + (v20 << 6));
    do
    {
      uint64_t v23 = (void *)(v10 + (v9 << 6));
      if (*(v21 - 1) == *v23 && *v21 == v23[1])
      {
        if ((v19 & 1) != 0) {
          goto LABEL_37;
        }
      }

      else if (((v19 ^ sub_186C5B4F4()) & 1) != 0)
      {
        goto LABEL_36;
      }

      v21 += 8;
      uint64_t v22 = v20 + 1;
      uint64_t v9 = v20;
      uint64_t v20 = v22;
    }

    while (v22 < v3);
    uint64_t v20 = v22;
LABEL_36:
    uint64_t v9 = v20;
    if ((v19 & 1) != 0)
    {
LABEL_37:
      if (v20 < v13) {
        goto LABEL_155;
      }
      if (v13 < v20)
      {
        uint64_t v25 = v20 << 6;
        uint64_t v26 = v13 << 6;
        uint64_t v27 = v20;
        uint64_t v28 = v13;
        do
        {
          if (v28 != --v27)
          {
            if (!v10) {
              goto LABEL_158;
            }
            os_signpost_id_t v29 = (_OWORD *)(v10 + v26);
            uint64_t v30 = v10 + v25;
            uint64_t v31 = *(void *)(v10 + v26);
            uint64_t v32 = *(void *)(v10 + v26 + 8);
            char v33 = *(_BYTE *)(v10 + v26 + 16);
            uint64_t v34 = *(void *)(v10 + v26 + 56);
            __int128 v35 = *(_OWORD *)(v10 + v26 + 24);
            __int128 v36 = *(_OWORD *)(v10 + v26 + 40);
            __int128 v37 = *(_OWORD *)(v10 + v25 - 16);
            __int128 v39 = *(_OWORD *)(v10 + v25 - 64);
            __int128 v38 = *(_OWORD *)(v10 + v25 - 48);
            v29[2] = *(_OWORD *)(v10 + v25 - 32);
            v29[3] = v37;
            _OWORD *v29 = v39;
            v29[1] = v38;
            *(void *)(v30 - std::__hash_table<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>>>::~__hash_table((uint64_t)this + 64) = v31;
            *(void *)(v30 - 56) = v32;
            *(_BYTE *)(v30 - 4_Block_object_dispose(va, 8) = v33;
            *(_OWORD *)(v30 - 40) = v35;
            *(_OWORD *)(v30 - 24) = v36;
            *(void *)(v30 - _Block_object_dispose(va, 8) = v34;
          }

          ++v28;
          v25 -= 64LL;
          v26 += 64LL;
        }

        while (v28 < v27);
      }

LABEL_46:
    if (v9 < v3)
    {
      if (__OFSUB__(v9, v13)) {
        goto LABEL_151;
      }
      if (v9 - v13 < v118) {
        break;
      }
    }

      if (v6 > v7)
      {
        v17 -= 16;
        if (v14 > v4) {
          continue;
        }
      }

      goto LABEL_48;
    }
  }

  if (a4 != __dst || &__dst[16 * v10] <= a4) {
    memmove(a4, __dst, 16 * v10);
  }
  BOOL v14 = &v4[16 * v10];
  if ((unint64_t)v6 < a3 && v8 >= 16)
  {
    while (1)
    {
      uint64_t v15 = *(void *)v6 == *(void *)v4 && *((void *)v6 + 1) == *((void *)v4 + 1);
      if (v15 || (sub_186C5B4F4() & 1) == 0) {
        break;
      }
      uint64_t v16 = v6;
      uint64_t v15 = v7 == v6;
      v6 += 16;
      if (!v15) {
        goto LABEL_20;
      }
LABEL_21:
      v7 += 16;
    }

    uint64_t v16 = v4;
    uint64_t v15 = v7 == v4;
    v4 += 16;
    if (v15) {
      goto LABEL_21;
    }
LABEL_20:
    *(_OWORD *)uint64_t v7 = *(_OWORD *)v16;
    goto LABEL_21;
  }

      uint64_t result = swift_bridgeObjectRelease();
      uint64_t v5 = a3;
      uint64_t v4 = a4;
    }
  }

  uint64_t v43 = v41 + 3;
  if (v43 >= v63) {
    goto LABEL_79;
  }
  uint64_t v42 = *(void *)(v60 + 8 * v43);
  if (v42)
  {
    uint64_t v34 = v43;
    goto LABEL_62;
  }

  while (1)
  {
    uint64_t v34 = v43 + 1;
    if (__OFADD__(v43, 1LL)) {
      break;
    }
    if (v34 >= v63) {
      goto LABEL_79;
    }
    uint64_t v42 = *(void *)(v60 + 8 * v34);
    ++v43;
    if (v42) {
      goto LABEL_62;
    }
  }

LABEL_67:
    if (v9 < v13) {
      goto LABEL_146;
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      int64_t v11 = sub_186BF905C(0LL, *((void *)v11 + 2) + 1LL, 1, v11);
    }
    unint64_t v56 = *((void *)v11 + 2);
    unint64_t v55 = *((void *)v11 + 3);
    unint64_t v12 = v56 + 1;
    if (v56 >= v55 >> 1) {
      int64_t v11 = sub_186BF905C((char *)(v55 > 1), v56 + 1, 1, v11);
    }
    *((void *)v11 + 2) = v12;
    uint64_t v57 = v11 + 32;
    uint64_t v58 = &v11[16 * v56 + 32];
    *(void *)uint64_t v58 = v13;
    *((void *)v58 + ktrace_session_set_default_event_names_enabled(global_session, 1) = v9;
    if (v56)
    {
      uint64_t v10 = v120;
      while (1)
      {
        unint64_t v59 = v12 - 1;
        if (v12 >= 4)
        {
          uint64_t v64 = &v57[16 * v12];
          uint64_t v65 = *((void *)v64 - 8);
          uint64_t v66 = *((void *)v64 - 7);
          BOOL v70 = __OFSUB__(v66, v65);
          uint64_t v67 = v66 - v65;
          if (v70) {
            goto LABEL_135;
          }
          uint64_t v69 = *((void *)v64 - 6);
          uint64_t v68 = *((void *)v64 - 5);
          BOOL v70 = __OFSUB__(v68, v69);
          uint64_t v62 = v68 - v69;
          char v63 = v70;
          if (v70) {
            goto LABEL_136;
          }
          unint64_t v71 = v12 - 2;
          __int128 v72 = &v57[16 * v12 - 32];
          uint64_t v74 = *(void *)v72;
          uint64_t v73 = *((void *)v72 + 1);
          BOOL v70 = __OFSUB__(v73, v74);
          uint64_t v75 = v73 - v74;
          if (v70) {
            goto LABEL_138;
          }
          BOOL v70 = __OFADD__(v62, v75);
          uint64_t v76 = v62 + v75;
          if (v70) {
            goto LABEL_141;
          }
          if (v76 >= v67)
          {
            unint64_t v94 = &v57[16 * v59];
            uint64_t v96 = *(void *)v94;
            uint64_t v95 = *((void *)v94 + 1);
            BOOL v70 = __OFSUB__(v95, v96);
            uint64_t v97 = v95 - v96;
            if (v70) {
              goto LABEL_145;
            }
            BOOL v87 = v62 < v97;
            goto LABEL_105;
          }
        }

        else
        {
          if (v12 != 3)
          {
            uint64_t v88 = *((void *)v11 + 4);
            uint64_t v89 = *((void *)v11 + 5);
            BOOL v70 = __OFSUB__(v89, v88);
            uint64_t v81 = v89 - v88;
            char v82 = v70;
            goto LABEL_99;
          }

          uint64_t v61 = *((void *)v11 + 4);
          uint64_t v60 = *((void *)v11 + 5);
          BOOL v70 = __OFSUB__(v60, v61);
          uint64_t v62 = v60 - v61;
          char v63 = v70;
        }

        if ((v63 & 1) != 0) {
          goto LABEL_137;
        }
        unint64_t v71 = v12 - 2;
        uint64_t v77 = &v57[16 * v12 - 32];
        uint64_t v79 = *(void *)v77;
        uint64_t v78 = *((void *)v77 + 1);
        BOOL v80 = __OFSUB__(v78, v79);
        uint64_t v81 = v78 - v79;
        char v82 = v80;
        if (v80) {
          goto LABEL_140;
        }
        uint64_t v83 = &v57[16 * v59];
        uint64_t v85 = *(void *)v83;
        uint64_t v84 = *((void *)v83 + 1);
        BOOL v70 = __OFSUB__(v84, v85);
        uint64_t v86 = v84 - v85;
        if (v70) {
          goto LABEL_143;
        }
        if (__OFADD__(v81, v86)) {
          goto LABEL_144;
        }
        if (v81 + v86 >= v62)
        {
          BOOL v87 = v62 < v86;
LABEL_105:
          if (v87) {
            unint64_t v59 = v71;
          }
          goto LABEL_107;
        }

LABEL_99:
        if ((v82 & 1) != 0) {
          goto LABEL_139;
        }
        uint64_t v90 = &v57[16 * v59];
        uint64_t v92 = *(void *)v90;
        uint64_t v91 = *((void *)v90 + 1);
        BOOL v70 = __OFSUB__(v91, v92);
        uint64_t v93 = v91 - v92;
        if (v70) {
          goto LABEL_142;
        }
        if (v93 < v81) {
          goto LABEL_15;
        }
LABEL_107:
        unint64_t v98 = v59 - 1;
        if (v59 - 1 >= v12)
        {
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
LABEL_144:
          __break(1u);
LABEL_145:
          __break(1u);
LABEL_146:
          __break(1u);
LABEL_147:
          __break(1u);
LABEL_148:
          __break(1u);
LABEL_149:
          __break(1u);
LABEL_150:
          __break(1u);
LABEL_151:
          __break(1u);
LABEL_152:
          __break(1u);
LABEL_153:
          __break(1u);
          goto LABEL_154;
        }

        if (!v10) {
          goto LABEL_157;
        }
        uint64_t v99 = v11;
        uint64_t v100 = v10;
        uint64_t v101 = &v57[16 * v98];
        uint64_t v102 = *(void *)v101;
        uint64_t v103 = &v57[16 * v59];
        uint64_t v104 = *((void *)v103 + 1);
        sub_186BF8DA4( (char *)(v100 + (*(void *)v101 << 6)),  (char *)(v100 + (*(void *)v103 << 6)),  v100 + (v104 << 6),  __dst);
        if (v1) {
          goto LABEL_115;
        }
        if (v104 < v102) {
          goto LABEL_132;
        }
        if (v59 > *((void *)v99 + 2)) {
          goto LABEL_133;
        }
        *(void *)uint64_t v101 = v102;
        *(void *)&v57[16 * v98 + 8] = v104;
        unint64_t v105 = *((void *)v99 + 2);
        if (v59 >= v105) {
          goto LABEL_134;
        }
        int64_t v11 = v99;
        unint64_t v12 = v105 - 1;
        memmove(&v57[16 * v59], v103 + 16, 16 * (v105 - 1 - v59));
        *((void *)v99 + 2) = v105 - 1;
        BOOL v87 = v105 > 2;
        uint64_t v10 = v120;
        if (!v87) {
          goto LABEL_15;
        }
      }
    }

    unint64_t v12 = 1LL;
    uint64_t v10 = v120;
LABEL_15:
    uint64_t v3 = v119;
    if (v9 >= v119)
    {
      uint64_t v8 = v117;
      goto LABEL_118;
    }
  }

  if (__OFADD__(v13, v118)) {
    goto LABEL_153;
  }
  if (v13 + v118 >= v3) {
    uint64_t v40 = v3;
  }
  else {
    uint64_t v40 = v13 + v118;
  }
  if (v40 >= v13)
  {
    if (v9 != v40)
    {
      uint64_t v41 = v114 + (v9 << 6);
      do
      {
        uint64_t v42 = (uint64_t *)(v10 + (v9 << 6));
        uint64_t v43 = *v42;
        uint64_t v44 = v42[1];
        uint64_t v45 = v13;
        uint64_t v46 = v41;
        do
        {
          uint64_t v47 = (_OWORD *)(v46 - 120);
          BOOL v48 = v43 == *(void *)(v46 - 120) && v44 == *(void *)(v46 - 112);
          if (v48 || (sub_186C5B4F4() & 1) == 0) {
            break;
          }
          if (!v10) {
            goto LABEL_156;
          }
          __int128 v50 = *(_OWORD *)(v46 - 88);
          __int128 v49 = *(_OWORD *)(v46 - 72);
          *(void *)(v46 - std::__hash_table<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>>>::~__hash_table((uint64_t)this + 64) = *(void *)v46;
          v46 -= 64LL;
          uint64_t v43 = *(void *)(v46 + 8);
          uint64_t v44 = *(void *)(v46 + 16);
          char v51 = *(_BYTE *)(v46 + 24);
          __int128 v52 = *(_OWORD *)(v46 + 32);
          __int128 v53 = *(_OWORD *)(v46 + 48);
          __int128 v54 = v47[1];
          v47[4] = *v47;
          v47[5] = v54;
          v47[6] = v50;
          v47[7] = v49;
          *(void *)(v46 - 56) = v43;
          *(void *)(v46 - 4_Block_object_dispose(va, 8) = v44;
          *(_BYTE *)(v46 - 40) = v51;
          *(_OWORD *)(v46 - 32) = v52;
          *(_OWORD *)(v46 - 16) = v53;
          ++v45;
        }

        while (v9 != v45);
        ++v9;
        v41 += 64LL;
      }

      while (v9 != v40);
      uint64_t v9 = v40;
    }

    goto LABEL_67;
  }

  v215 = (uint64_t)v254;
  sub_186C3A868(v249, (uint64_t)v254, type metadata accessor for RecordingOptions.Options);
  v216 = (char *)v284;
  swift_bridgeObjectRetain();
  sub_186C05DF0(v215, v216, v283, v261 & 1, (uint64_t)&v286);
  nullsub_1(&v286);
  sub_186BFA418((uint64_t)&v286, (uint64_t)v309, &qword_18C6A25C8);
  (*(void (**)(void *))(*(void *)v118 + 192LL))(v309);
  uint64_t result = (uint64_t)ktrace_session_create();
  if (!result) {
    goto LABEL_110;
  }
  v217 = result;
  sub_186C380B4((uint64_t)&v290);
  v271 = v92;
  v218 = v290;
  v219 = v291;
  v220 = v282;
  v221 = (char **)((char *)v282 + OBJC_IVAR____TtC6ktrace9Recording_subclassBitmap);
  *v221 = v290;
  v221[1] = v219;
  *(char **)((char *)v220 + OBJC_IVAR____TtC6ktrace9Recording_session) = (char *)v217;
  sub_186BF06B0(v218, v219);
  v222 = dispatch_semaphore_create(0LL);
  type metadata accessor for KernelDisableWaiter();
  *(char **)((char *)v220 + OBJC_IVAR____TtC6ktrace9Recording_kernelDisableWaiter) = (char *)sub_186C052A4();
  *(char **)((char *)v220 + OBJC_IVAR____TtC6ktrace9Recording_waitComplete) = (char *)v222;
  *(_DWORD *)((char *)v220 + OBJC_IVAR____TtC6ktrace9Recording_endReason) = 0;
  v223 = v222;
  sub_186C3F508((uint64_t)v307);
  v224 = (_OWORD *)((char *)v220 + OBJC_IVAR____TtC6ktrace9Recording_kdebugPostprocessing);
  v225 = v308[0];
  v224[6] = v307[6];
  v224[7] = v225;
  *(_OWORD *)((char *)v224 + 12ktrace_session_set_default_event_names_enabled(global_session, 1) = *(_OWORD *)((char *)v308 + 9);
  v226 = v307[3];
  v224[2] = v307[2];
  v224[3] = v226;
  v227 = v307[5];
  v224[4] = v307[4];
  v224[5] = v227;
  v228 = v307[1];
  *v224 = v307[0];
  v224[1] = v228;
  v229 = OBJC_IVAR____TtC6ktrace9Recording_session;
  v230 = (void *)swift_allocObject();
  v230[2] = v217;
  v230[3] = v220;
  v230[4] = v118;
  v230[5] = v223;
  *(void *)&v294 = sub_186C38C30;
  *((void *)&v294 + ktrace_session_set_default_event_names_enabled(global_session, 1) = v230;
  *(void *)&v292 = MEMORY[0x1895F87A8];
  *((void *)&v292 + ktrace_session_set_default_event_names_enabled(global_session, 1) = 1107296256LL;
  *(void *)&v293 = sub_186C04B7C;
  *((void *)&v293 + ktrace_session_set_default_event_names_enabled(global_session, 1) = &block_descriptor_0;
  v231 = _Block_copy(&v292);
  v283 = v223;
  swift_retain();
  swift_retain();
  os_log_type_t v21 = (char *)v229;
  swift_release();
  ktrace_set_completion_handler(v217, v231);
  _Block_release(v231);
  v232 = *(uint64_t *)((char *)v220 + v229);
  v233 = (void *)swift_allocObject();
  v233[2] = v217;
  v233[3] = v118;
  v233[4] = v220;
  v233[5] = v216;
  v234 = v269;
  v233[6] = v253;
  v233[7] = v234;
  *(void *)&v294 = sub_186C38E44;
  *((void *)&v294 + ktrace_session_set_default_event_names_enabled(global_session, 1) = v233;
  *(void *)&v292 = MEMORY[0x1895F87A8];
  *((void *)&v292 + ktrace_session_set_default_event_names_enabled(global_session, 1) = 1107296256LL;
  *(void *)&v293 = sub_186C32614;
  *((void *)&v293 + ktrace_session_set_default_event_names_enabled(global_session, 1) = &block_descriptor_6;
  v235 = _Block_copy(&v292);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_release();
  ktrace_set_post_processing_handler(v232, v235);
  _Block_release(v235);
  type metadata accessor for CStringArray();
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C6A21C0);
  v236 = swift_allocObject();
  *(_OWORD *)(v236 + 16) = xmmword_186C5E4F0;
  v237 = *(uint64_t *)((char *)v220 + OBJC_IVAR____TtC6ktrace9Recording_toolName + 8);
  *(void *)(v236 + 32) = *(char **)((char *)v220 + OBJC_IVAR____TtC6ktrace9Recording_toolName);
  *(void *)(v236 + 40) = v237;
  v238 = *v281;
  *(void *)&v292 = v236;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_186BFFE74(v238);
  v239 = sub_186C253C0(&qword_18C6A2B38, &qword_18C6A21A8, MEMORY[0x189618470]);
  __int128 v49 = sub_186C28B1C((uint64_t)&v292, v268, v239, v246);
  __int128 v50 = (char **)(v49 + 16);
  swift_beginAccess();
  uint64_t v30 = *(char **)(v49 + 16);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(void *)(v49 + 16) = v30;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
    goto LABEL_108;
  }
LABEL_101:
  v242 = v272;
  v241 = v273;
  v243 = (void (*)(_BYTE *, uint64_t))v250;
  v244 = v282;
  ktrace_set_command_argv(*(void *)&v21[(void)v282], (const char **)v30 + 4);
  *(void *)(v49 + 16) = v30;
  swift_endAccess();
  swift_release();

  BOOL v48 = v244;
  swift_release();
  swift_release();
  sub_186BF06F4(v290, v291);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v243(v270, v241);
  v243(v242, v241);
  sub_186C392F4((uint64_t)v281, type metadata accessor for RecordingOptions);
  return (uint64_t)v48;
}

LABEL_154:
  __break(1u);
LABEL_155:
  __break(1u);
LABEL_156:
  __break(1u);
LABEL_157:
  __break(1u);
LABEL_158:
  __break(1u);
LABEL_159:
  __break(1u);
LABEL_160:
  uint64_t result = sub_186C5B350();
  __break(1u);
  return result;
}

  __break(1u);
LABEL_155:
  __break(1u);
LABEL_156:
  __break(1u);
LABEL_157:
  __break(1u);
LABEL_158:
  __break(1u);
LABEL_159:
  __break(1u);
  return result;
}

uint64_t sub_186BF8CB4(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  if (a3 != a2)
  {
    uint64_t v4 = a3;
    uint64_t v6 = result;
    uint64_t v7 = *a4;
    uint64_t v8 = *a4 + (a3 << 6) + 56;
LABEL_5:
    uint64_t v9 = (uint64_t *)(v7 + (v4 << 6));
    uint64_t result = *v9;
    uint64_t v10 = v9[1];
    uint64_t v11 = v6;
    uint64_t v12 = v8;
    while (1)
    {
      uint64_t v13 = (_OWORD *)(v12 - 120);
      BOOL v14 = result == *(void *)(v12 - 120) && v10 == *(void *)(v12 - 112);
      if (v14 || (uint64_t result = sub_186C5B4F4(), (result & 1) == 0))
      {
LABEL_4:
        ++v4;
        v8 += 64LL;
        if (v4 == a2) {
          return result;
        }
        goto LABEL_5;
      }

      if (!v7) {
        break;
      }
      __int128 v16 = *(_OWORD *)(v12 - 88);
      __int128 v15 = *(_OWORD *)(v12 - 72);
      *(void *)(v12 - std::__hash_table<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>>>::~__hash_table((uint64_t)this + 64) = *(void *)v12;
      v12 -= 64LL;
      uint64_t result = *(void *)(v12 + 8);
      uint64_t v10 = *(void *)(v12 + 16);
      char v17 = *(_BYTE *)(v12 + 24);
      __int128 v18 = *(_OWORD *)(v12 + 32);
      __int128 v19 = *(_OWORD *)(v12 + 48);
      __int128 v20 = v13[1];
      v13[4] = *v13;
      _OWORD v13[5] = v20;
      v13[6] = v16;
      v13[7] = v15;
      *(void *)(v12 - 56) = result;
      *(void *)(v12 - 4_Block_object_dispose(va, 8) = v10;
      *(_BYTE *)(v12 - 40) = v17;
      *(_OWORD *)(v12 - 32) = v18;
      *(_OWORD *)(v12 - 16) = v19;
      if (v4 == ++v11) {
        goto LABEL_4;
      }
    }

    __break(1u);
  }

  return result;
}

uint64_t sub_186BF8DA4(char *__src, char *a2, unint64_t a3, char *__dst)
{
  uint64_t v4 = __dst;
  uint64_t v6 = a2;
  uint64_t v7 = __src;
  int64_t v8 = a2 - __src;
  int64_t v9 = a2 - __src + 63;
  if (a2 - __src >= 0) {
    int64_t v9 = a2 - __src;
  }
  uint64_t v10 = v9 >> 6;
  uint64_t v11 = a3 - (void)a2;
  uint64_t v12 = a3 - (void)a2 + 63;
  uint64_t v13 = v12 >> 6;
  __int128 v39 = __src;
  __int128 v38 = __dst;
  if (v10 >= v12 >> 6)
  {
    if (v11 >= -63)
    {
      if (__dst != a2 || &a2[64 * v13] <= __dst) {
        memmove(__dst, a2, v13 << 6);
      }
      uint64_t v23 = &v4[64 * v13];
      __int128 v37 = v23;
      __int128 v39 = v6;
      if (v7 < v6 && v11 >= 64)
      {
        uint64_t v24 = (char *)(a3 - 64);
        uint64_t v25 = v6;
        while (1)
        {
          uint64_t v26 = v24 + 64;
          uint64_t v27 = *((void *)v25 - 8);
          uint64_t v28 = *((void *)v25 - 7);
          v25 -= 64;
          BOOL v29 = *((void *)v23 - 8) == v27 && *((void *)v23 - 7) == v28;
          if (v29 || (sub_186C5B4F4() & 1) == 0)
          {
            __int128 v37 = v23 - 64;
            if (v26 < v23 || v24 >= v23 || v26 != v23)
            {
              __int128 v33 = *((_OWORD *)v23 - 4);
              __int128 v34 = *((_OWORD *)v23 - 3);
              __int128 v35 = *((_OWORD *)v23 - 1);
              *((_OWORD *)v24 + 2) = *((_OWORD *)v23 - 2);
              *((_OWORD *)v24 + 3) = v35;
              *(_OWORD *)uint64_t v24 = v33;
              *((_OWORD *)v24 + ktrace_session_set_default_event_names_enabled(global_session, 1) = v34;
            }

            uint64_t v25 = v6;
            v23 -= 64;
            if (v6 <= v7) {
              goto LABEL_50;
            }
          }

          else
          {
            if (v26 != v6 || v24 >= v6)
            {
              __int128 v30 = *(_OWORD *)v25;
              __int128 v31 = *((_OWORD *)v25 + 1);
              __int128 v32 = *((_OWORD *)v25 + 3);
              *((_OWORD *)v24 + 2) = *((_OWORD *)v25 + 2);
              *((_OWORD *)v24 + 3) = v32;
              *(_OWORD *)uint64_t v24 = v30;
              *((_OWORD *)v24 + ktrace_session_set_default_event_names_enabled(global_session, 1) = v31;
            }

            __int128 v39 = v25;
            if (v25 <= v7) {
              goto LABEL_50;
            }
          }

          v24 -= 64;
          uint64_t v6 = v25;
          if (v23 <= v4) {
            goto LABEL_50;
          }
        }
      }

      goto LABEL_50;
    }
  }

  else if (v8 >= -63)
  {
    if (__dst != __src || &__src[64 * v10] <= __dst) {
      memmove(__dst, __src, v10 << 6);
    }
    BOOL v14 = &v4[64 * v10];
    __int128 v37 = v14;
    if ((unint64_t)v6 < a3 && v8 >= 64)
    {
      do
      {
        BOOL v15 = *(void *)v6 == *(void *)v4 && *((void *)v6 + 1) == *((void *)v4 + 1);
        if (v15 || (sub_186C5B4F4() & 1) == 0)
        {
          if (v7 != v4)
          {
            __int128 v20 = *(_OWORD *)v4;
            __int128 v21 = *((_OWORD *)v4 + 1);
            __int128 v22 = *((_OWORD *)v4 + 3);
            *((_OWORD *)v7 + 2) = *((_OWORD *)v4 + 2);
            *((_OWORD *)v7 + 3) = v22;
            *(_OWORD *)uint64_t v7 = v20;
            *((_OWORD *)v7 + ktrace_session_set_default_event_names_enabled(global_session, 1) = v21;
          }

          v4 += 64;
          __int128 v38 = v4;
          __int128 v16 = v6;
        }

        else
        {
          __int128 v16 = v6 + 64;
          if (v7 < v6 || v7 >= v16 || v7 != v6)
          {
            __int128 v17 = *(_OWORD *)v6;
            __int128 v18 = *((_OWORD *)v6 + 1);
            __int128 v19 = *((_OWORD *)v6 + 3);
            *((_OWORD *)v7 + 2) = *((_OWORD *)v6 + 2);
            *((_OWORD *)v7 + 3) = v19;
            *(_OWORD *)uint64_t v7 = v17;
            *((_OWORD *)v7 + ktrace_session_set_default_event_names_enabled(global_session, 1) = v18;
          }
        }

        v7 += 64;
        if (v4 >= v14) {
          break;
        }
        uint64_t v6 = v16;
      }

      while ((unint64_t)v16 < a3);
      __int128 v39 = v7;
    }

char *sub_186BF905C(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_18C6A2328);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }

  else
  {
    uint64_t v10 = (char *)MEMORY[0x18961AFE8];
  }

  uint64_t v13 = v10 + 32;
  BOOL v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0LL;
  }

  else
  {
    memcpy(v13, v14, 16 * v8);
  }

  swift_bridgeObjectRelease();
  return v10;
}

char *sub_186BF9154(void **a1, const void **a2, void *a3)
{
  uint64_t v3 = (char *)*a2;
  uint64_t v4 = *a3 - (void)v3;
  uint64_t v5 = v4 + 63;
  if (v4 >= 0) {
    uint64_t v5 = *a3 - (void)v3;
  }
  if (v4 <= -64)
  {
    uint64_t result = (char *)sub_186C5B398();
    __break(1u);
  }

  else
  {
    uint64_t result = (char *)*a1;
    uint64_t v7 = v5 >> 6;
    if (result != v3 || result >= &v3[64 * v7]) {
      return (char *)memmove(result, v3, v7 << 6);
    }
  }

  return result;
}

char *sub_186BF91FC(uint64_t a1)
{
  return sub_186BF905C(0LL, *(void *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_186BF9210(uint64_t a1)
{
  return sub_186BF83BC(0, *(void *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_186BF9224(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }

  else if ((v4 & 0x8000000000000000LL) == 0)
  {
    unint64_t v5 = a4 + 40 * a1 + 32;
    unint64_t v6 = a3 + 40 * v4;
    if (v5 >= v6 || v5 + 40 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }

  uint64_t result = sub_186C5B398();
  __break(1u);
  return result;
}

uint64_t sub_186BF9318@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  if (!*(void *)(a3 + 16) || (unint64_t v8 = sub_186BF8278(0x746E656D75636F44LL, 0xED00006E6F697461LL), (v9 & 1) == 0))
  {
    __int128 v48 = 0u;
    __int128 v49 = 0u;
    swift_bridgeObjectRelease();
    goto LABEL_16;
  }

  sub_186BFB82C(*(void *)(a3 + 56) + 32 * v8, (uint64_t)&v48);
  swift_bridgeObjectRelease();
  if (!*((void *)&v49 + 1))
  {
LABEL_16:
    uint64_t result = sub_186BFB964((uint64_t)&v48);
    goto LABEL_17;
  }

  __swift_instantiateConcreteTypeFromMangledName(&qword_18C6A2358);
  uint64_t result = swift_dynamicCast();
  if ((result & 1) == 0)
  {
LABEL_17:
    char v16 = 0;
    uint64_t v14 = 0LL;
    uint64_t v15 = 0LL;
    uint64_t v17 = 0LL;
    uint64_t v18 = 0LL;
    goto LABEL_18;
  }

  if (*(void *)(v46 + 16) && (unint64_t v11 = sub_186BF8278(0x736973706F6E7953LL, 0xE800000000000000LL), (v12 & 1) != 0))
  {
    sub_186BFB82C(*(void *)(v46 + 56) + 32 * v11, (uint64_t)&v48);
    int v13 = swift_dynamicCast();
    if (v13) {
      uint64_t v14 = v46;
    }
    else {
      uint64_t v14 = 0LL;
    }
    if (v13) {
      uint64_t v15 = v47;
    }
    else {
      uint64_t v15 = 0LL;
    }
    if (!*(void *)(v46 + 16)) {
      goto LABEL_30;
    }
  }

  else
  {
    uint64_t v14 = 0LL;
    uint64_t v15 = 0LL;
    if (!*(void *)(v46 + 16)) {
      goto LABEL_30;
    }
  }

  unint64_t v20 = sub_186BF8278(0x7470697263736544LL, 0xEB000000006E6F69LL);
  if ((v21 & 1) != 0)
  {
    sub_186BFB82C(*(void *)(v46 + 56) + 32 * v20, (uint64_t)&v48);
    int v22 = swift_dynamicCast();
    if (v22) {
      uint64_t v17 = v46;
    }
    else {
      uint64_t v17 = 0LL;
    }
    if (v22) {
      uint64_t v18 = v47;
    }
    else {
      uint64_t v18 = 0LL;
    }
    if (!*(void *)(v46 + 16)) {
      goto LABEL_34;
    }
    goto LABEL_31;
  }

LABEL_18:
  __int128 v19 = 0LL;
LABEL_19:
  *(void *)a4 = a1;
  *(void *)(a4 + _Block_object_dispose(va, 8) = a2;
  *(_BYTE *)(a4 + 16) = v16;
  *(void *)(a4 + 24) = v14;
  *(void *)(a4 + 32) = v15;
  *(void *)(a4 + 40) = v17;
  *(void *)(a4 + 4_Block_object_dispose(va, 8) = v18;
  *(void *)(a4 + 56) = v19;
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

    __break(1u);
    goto LABEL_19;
  }

  uint64_t v42 = v29;
  uint64_t v43 = *(_BYTE *)(v23 + 8);
  __int128 v49 = 0LL;
LABEL_14:
  __int128 v72 = a4 & 1;
  __int128 v50 = *(void *)(*(void *)(a1 + v9[13]) + 16LL) != 0LL;
  char v45 = *(void *)(*(void *)(a1 + v9[12]) + 16LL) != 0LL;
  uint64_t v46 = *(_BYTE *)(a1 + v9[22]);
  uint64_t v47 = 63LL;
  if (!v46) {
    uint64_t v47 = 0LL;
  }
  char v51 = *(void *)(a1 + v36 + 8);
  __int128 v52 = v47;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t result = sub_186C0AB28(a1);
  LOBYTE(v78[0]) = v43;
  *(void *)a5 = v74;
  *(void *)(a5 + _Block_object_dispose(va, 8) = v73;
  *(void *)(a5 + 16) = v70;
  *(void *)(a5 + 24) = v69;
  *(void *)(a5 + 32) = v68;
  *(void *)(a5 + 40) = v67;
  *(void *)(a5 + 4_Block_object_dispose(va, 8) = v64;
  *(void *)(a5 + 56) = v66;
  *(void *)(a5 + std::__hash_table<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>>>::~__hash_table((uint64_t)this + 64) = v77;
  *(void *)(a5 + 72) = v76;
  *(void *)(a5 + 80) = v65;
  *(_BYTE *)(a5 + 8_Block_object_dispose(va, 8) = v43;
  *(double *)(a5 + 96) = v26;
  *(_BYTE *)(a5 + 104) = v25;
  *(_BYTE *)(a5 + 105) = v75;
  *(_BYTE *)(a5 + 106) = v45;
  *(_BYTE *)(a5 + 107) = v54;
  *(_DWORD *)(a5 + 10_Block_object_dispose(va, 8) = v62;
  *(_BYTE *)(a5 + 112) = v42;
  *(void *)(a5 + 120) = v63;
  *(_BYTE *)(a5 + 12_Block_object_dispose(va, 8) = v57;
  *(_BYTE *)(a5 + 129) = v50;
  *(double *)(a5 + 136) = v35;
  *(_BYTE *)(a5 + 144) = v53;
  *(_BYTE *)(a5 + 145) = v59;
  *(_BYTE *)(a5 + 146) = v72;
  *(_BYTE *)(a5 + 147) = v58;
  *(_BYTE *)(a5 + 14_Block_object_dispose(va, 8) = v60;
  *(_BYTE *)(a5 + 149) = v61;
  *(void *)(a5 + 152) = v55;
  *(void *)(a5 + 160) = v38;
  *(void *)(a5 + 16_Block_object_dispose(va, 8) = v56;
  *(void *)(a5 + std::__hash_table<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>>>::~__hash_table((uint64_t)this + 176) = v51;
  *(void *)(a5 + 184) = v49;
  *(_BYTE *)(a5 + 192) = v41;
  *(void *)(a5 + 200) = v52;
  *(_BYTE *)(a5 + 20_Block_object_dispose(va, 8) = v46 ^ 1;
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

    unint64_t v8 = (v17 - 1) & v17;
    uint64_t v15 = __clz(__rbit64(v17)) + (v16 << 6);
    unint64_t v11 = v16;
  }

  __break(1u);
LABEL_41:
  __break(1u);
LABEL_42:
  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

uint64_t sub_186BF98C8(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }

  else if ((v4 & 0x8000000000000000LL) == 0)
  {
    unint64_t v5 = a4 + (a1 << 6) + 32;
    unint64_t v6 = a3 + (v4 << 6);
    if (v5 >= v6 || v5 + (v4 << 6) <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }

  uint64_t result = sub_186C5B398();
  __break(1u);
  return result;
}

uint64_t sub_186BF99B8(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }

  else if ((v4 & 0x8000000000000000LL) == 0)
  {
    uint64_t v8 = *(void *)(sub_186C5AA8C() - 8);
    uint64_t v9 = *(unsigned __int8 *)(v8 + 80);
    uint64_t v10 = *(void *)(v8 + 72);
    unint64_t v11 = a4 + ((v9 + 32) & ~v9) + v10 * a1;
    uint64_t v12 = v10 * v4;
    unint64_t v13 = a3 + v12;
    unint64_t v14 = v11 + v12;
    if (v11 >= v13 || v14 <= a3)
    {
      swift_arrayInitWithCopy();
      return v13;
    }
  }

  uint64_t result = sub_186C5B398();
  __break(1u);
  return result;
}

unint64_t sub_186BF9AD0(char a1)
{
  uint64_t v2 = sub_186C5AA8C();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = ((uint64_t (*)(void))MEMORY[0x1895F8858])();
  unint64_t v6 = (char *)&v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = MEMORY[0x1895F8858](v4);
  unint64_t v34 = (char *)&v33 - v8;
  uint64_t v9 = MEMORY[0x1895F8858](v7);
  unint64_t v11 = (char *)&v33 - v10;
  uint64_t v12 = MEMORY[0x1895F8858](v9);
  unint64_t v14 = (char *)&v33 - v13;
  MEMORY[0x1895F8858](v12);
  char v16 = (char *)&v33 - v15;
  if ((a1 & 1) != 0 && getenv("KTRACE_PROVIDER_PATH"))
  {
    sub_186C5ADE0();
    sub_186C5AA08();
    swift_bridgeObjectRelease();
    unint64_t v17 = sub_186BF7804(0, 1LL, 1, MEMORY[0x18961AFE8]);
    unint64_t v19 = *(void *)(v17 + 16);
    unint64_t v18 = *(void *)(v17 + 24);
    if (v19 >= v18 >> 1) {
      unint64_t v17 = sub_186BF7804(v18 > 1, v19 + 1, 1, v17);
    }
    *(void *)(v17 + 16) = v19 + 1;
    (*(void (**)(unint64_t, char *, uint64_t))(v3 + 32))( v17 + ((*(unsigned __int8 *)(v3 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80))
    + *(void *)(v3 + 72) * v19,
      v16,
      v2);
  }

  else
  {
    unint64_t v17 = MEMORY[0x18961AFE8];
  }

  if (os_variant_has_internal_content())
  {
    sub_186C5AA08();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      unint64_t v17 = sub_186BF7804(0, *(void *)(v17 + 16) + 1LL, 1, v17);
    }
    unint64_t v21 = *(void *)(v17 + 16);
    unint64_t v20 = *(void *)(v17 + 24);
    char v33 = v6;
    if (v21 >= v20 >> 1) {
      unint64_t v17 = sub_186BF7804(v20 > 1, v21 + 1, 1, v17);
    }
    *(void *)(v17 + 16) = v21 + 1;
    unint64_t v22 = (*(unsigned __int8 *)(v3 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
    uint64_t v23 = *(void *)(v3 + 72);
    char v24 = *(void (**)(unint64_t, char *, uint64_t))(v3 + 32);
    v24(v17 + v22 + v23 * v21, v14, v2);
    sub_186C5AA08();
    unint64_t v26 = *(void *)(v17 + 16);
    unint64_t v25 = *(void *)(v17 + 24);
    if (v26 >= v25 >> 1) {
      unint64_t v17 = sub_186BF7804(v25 > 1, v26 + 1, 1, v17);
    }
    *(void *)(v17 + 16) = v26 + 1;
    v24(v17 + v22 + v26 * v23, v11, v2);
    uint64_t v27 = v34;
    sub_186C5AA08();
    unint64_t v29 = *(void *)(v17 + 16);
    unint64_t v28 = *(void *)(v17 + 24);
    if (v29 >= v28 >> 1) {
      unint64_t v17 = sub_186BF7804(v28 > 1, v29 + 1, 1, v17);
    }
    *(void *)(v17 + 16) = v29 + 1;
    v24(v17 + v22 + v29 * v23, v27, v2);
    unint64_t v6 = v33;
  }

  sub_186C5AA08();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    unint64_t v17 = sub_186BF7804(0, *(void *)(v17 + 16) + 1LL, 1, v17);
  }
  unint64_t v31 = *(void *)(v17 + 16);
  unint64_t v30 = *(void *)(v17 + 24);
  if (v31 >= v30 >> 1) {
    unint64_t v17 = sub_186BF7804(v30 > 1, v31 + 1, 1, v17);
  }
  *(void *)(v17 + 16) = v31 + 1;
  (*(void (**)(unint64_t, char *, uint64_t))(v3 + 32))( v17 + ((*(unsigned __int8 *)(v3 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80))
  + *(void *)(v3 + 72) * v31,
    v6,
    v2);
  return v17;
}

uint64_t sub_186BF9EAC(char a1)
{
  uint64_t v45 = *MEMORY[0x1895F89C0];
  uint64_t v2 = sub_186C5AA8C();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1895F8858](v2);
  uint64_t v5 = (char *)&v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C6A21F8);
  MEMORY[0x1895F8858](v6);
  uint64_t v8 = (char *)&v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v42 = objc_msgSend((id)objc_opt_self(), sel_defaultManager);
  unint64_t v9 = sub_186BF9AD0(a1);
  unint64_t v10 = v9;
  uint64_t v44 = MEMORY[0x18961AFE8];
  uint64_t v41 = *(void *)(v9 + 16);
  if (v41)
  {
    unint64_t v11 = 0LL;
    uint64_t v12 = *(unsigned __int8 *)(v3 + 80);
    uint64_t v39 = v2;
    unint64_t v40 = v9 + ((v12 + 32) & ~v12);
    uint64_t v37 = v5;
    uint64_t v38 = v3;
    unint64_t v35 = v9;
    uint64_t v36 = v8;
    while (1)
    {
      if (v11 >= *(void *)(v10 + 16)) {
        __break(1u);
      }
      (*(void (**)(char *, unint64_t, uint64_t))(v3 + 16))(v8, v40 + *(void *)(v3 + 72) * v11, v2);
      char v16 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56);
      v16(v8, 0LL, 1LL, v2);
      unint64_t v34 = v16;
      (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v5, v8, v2);
      sub_186C5AA68();
      unint64_t v17 = (void *)sub_186C5AD08();
      swift_bridgeObjectRelease();
      id v43 = 0LL;
      id v18 = objc_msgSend(v42, sel_contentsOfDirectoryAtPath_error_, v17, &v43);

      id v19 = v43;
      if (v18)
      {
        uint64_t v20 = sub_186C5AF18();
        id v21 = v19;

        uint64_t v22 = *(void *)(v20 + 16);
        if (v22) {
          goto LABEL_11;
        }
      }

      else
      {
        id v23 = v43;
        char v24 = (void *)sub_186C5A9CC();

        swift_willThrow();
        uint64_t v20 = MEMORY[0x18961AFE8];
        uint64_t v22 = *(void *)(MEMORY[0x18961AFE8] + 16LL);
        if (v22)
        {
LABEL_11:
          unint64_t v25 = (uint64_t *)(v20 + 40);
          uint64_t v13 = (void *)MEMORY[0x18961AFE8];
          do
          {
            uint64_t v26 = *(v25 - 1);
            uint64_t v27 = *v25;
            swift_bridgeObjectRetain();
            if ((sub_186C5AE58() & 1) != 0)
            {
              char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
              id v43 = v13;
              if ((isUniquelyReferenced_nonNull_native & 1) == 0)
              {
                sub_186BEF8C8(0LL, v13[2] + 1LL, 1);
                uint64_t v13 = v43;
              }

              unint64_t v30 = v13[2];
              unint64_t v29 = v13[3];
              if (v30 >= v29 >> 1)
              {
                sub_186BEF8C8((char *)(v29 > 1), v30 + 1, 1);
                uint64_t v13 = v43;
              }

              v13[2] = v30 + 1;
              unint64_t v31 = &v13[2 * v30];
              void v31[4] = v26;
              void v31[5] = v27;
            }

            else
            {
              swift_bridgeObjectRelease();
            }

            v25 += 2;
            --v22;
          }

          while (v22);
          goto LABEL_4;
        }
      }

      uint64_t v13 = (void *)MEMORY[0x18961AFE8];
LABEL_4:
      ++v11;
      uint64_t v14 = swift_bridgeObjectRelease();
      MEMORY[0x1895F8858](v14);
      uint64_t v5 = v37;
      *(&v33 - 2) = (uint64_t)v37;
      uint64_t v15 = sub_186BF1090( (void (*)(uint64_t *__return_ptr, void *))sub_186BFB8A8,  (uint64_t)(&v33 - 4),  (uint64_t)v13);
      swift_release();
      sub_186BF1538((uint64_t)v15);
      uint64_t v3 = v38;
      uint64_t v2 = v39;
      (*(void (**)(char *, uint64_t))(v38 + 8))(v5, v39);
      unint64_t v10 = v35;
      uint64_t v8 = v36;
      if (v11 == v41)
      {
        v34(v36, 1LL, 1LL, v2);
        goto LABEL_22;
      }
    }
  }

  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56))(v8, 1LL, 1LL, v2);
LABEL_22:

  swift_bridgeObjectRelease();
  return v44;
}

uint64_t __swift_project_value_buffer(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(*(void *)(a1 - 8) + 82LL) & 2) != 0) {
    return *(void *)a2;
  }
  return a2;
}

unint64_t sub_186BFA2C0()
{
  unint64_t result = qword_18C6A2210;
  if (!qword_18C6A2210)
  {
    unint64_t result = MEMORY[0x186E46630](&unk_186C5E620, &type metadata for KTraceProvideError);
    atomic_store(result, (unint64_t *)&qword_18C6A2210);
  }

  return result;
}

unint64_t sub_186BFA304()
{
  unint64_t result = qword_18C6A2288;
  if (!qword_18C6A2288)
  {
    unint64_t result = MEMORY[0x186E46630](MEMORY[0x18961A888], MEMORY[0x18961A860]);
    atomic_store(result, (unint64_t *)&qword_18C6A2288);
  }

  return result;
}

uint64_t sub_186BFA348(uint64_t a1)
{
  return a1;
}

uint64_t sub_186BFA370(uint64_t a1)
{
  return a1;
}

uint64_t sub_186BFA398(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3) {
    return 0LL;
  }
  for (uint64_t i = (void *)(a1 + 40); ; i += 5)
  {
    BOOL v7 = *(i - 1) == a2 && *i == a3;
    if (v7 || (sub_186C5B4F4() & 1) != 0) {
      break;
    }
    if (!--v3) {
      return 0LL;
    }
  }

  return 1LL;
}

uint64_t sub_186BFA418(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32LL))(a2, a1, v5);
  return a2;
}

uint64_t sub_186BFA45C(uint64_t a1)
{
  return a1;
}

uint64_t sub_186BFA484(uint64_t a1)
{
  return a1;
}

uint64_t supportsDeprecatedWillEndTracingToFile(void *a1)
{
  id v1 = a1;
  char v2 = objc_opt_respondsToSelector();

  return v2 & 1;
}

void deprecatedWillEndTracingToFile(void *a1, uint64_t a2)
{
  id v3 = a1;
  [v3 willEndTracingToFile:a2];
}

uint64_t sub_186BFA520(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }

  else if ((v4 & 0x8000000000000000LL) == 0)
  {
    unint64_t v5 = a4 + 40 * a1 + 32;
    unint64_t v6 = a3 + 40 * v4;
    if (v5 >= v6 || v5 + 40 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }

  uint64_t result = sub_186C5B398();
  __break(1u);
  return result;
}

uint64_t sub_186BFA614(uint64_t a1, char a2)
{
  uint64_t v60 = sub_186BF9EAC(a2 & 1);
  swift_bridgeObjectRetain();
  sub_186BF8524(&v60);
  swift_bridgeObjectRelease();
  uint64_t v3 = v60;
  int64_t v4 = *(void *)(v60 + 16);
  if (!v4)
  {
    swift_release();
    uint64_t v6 = MEMORY[0x18961AFE8];
LABEL_46:
    __swift_instantiateConcreteTypeFromMangledName(&qword_18C6A2318);
    uint64_t v43 = swift_allocObject();
    *(_OWORD *)(v43 + 16) = xmmword_186C5E4F0;
    uint64_t v60 = v6;
    __swift_instantiateConcreteTypeFromMangledName(&qword_18C6A21A8);
    sub_186BF0620();
    uint64_t v44 = sub_186C5ACD8();
    uint64_t v46 = v45;
    swift_bridgeObjectRelease();
    *(void *)(v43 + 56) = MEMORY[0x189617FA8];
    *(void *)(v43 + 32) = v44;
    *(void *)(v43 + 40) = v46;
    sub_186BFB7C8();
    sub_186C5B578();
    swift_bridgeObjectRelease();
    return 0LL;
  }

  uint64_t v58 = MEMORY[0x18961AFE8];
  sub_186BEF8C8(0LL, v4, 0);
  uint64_t v5 = 0LL;
  uint64_t v6 = v58;
  int64_t v48 = v4;
  uint64_t v51 = v3 + 32;
  while (1)
  {
    BOOL v7 = (uint64_t *)(v51 + (v5 << 6));
    unint64_t v8 = v7[1];
    uint64_t v9 = v7[6];
    __int128 v52 = (void *)v7[7];
    if (v7[4])
    {
      uint64_t v60 = *v7;
      unint64_t v61 = v8;
      swift_bridgeObjectRetain();
      sub_186C5ADD4();
      sub_186C5ADD4();
    }

    else
    {
      swift_bridgeObjectRetain();
    }

    sub_186C5ADD4();
    swift_bridgeObjectRelease();
    if (v9)
    {
      sub_186C5ADD4();
      uint64_t v60 = 538976288LL;
      unint64_t v61 = 0xE400000000000000LL;
      sub_186C5ADD4();
      sub_186C5ADD4();
      swift_bridgeObjectRelease();
    }

    unint64_t v10 = v52;
    if (v52) {
      break;
    }
LABEL_41:
    unint64_t v41 = *(void *)(v6 + 16);
    unint64_t v40 = *(void *)(v6 + 24);
    if (v41 >= v40 >> 1) {
      sub_186BEF8C8((char *)(v40 > 1), v41 + 1, 1);
    }
    ++v5;
    *(void *)(v6 + 16) = v41 + 1;
    uint64_t v42 = v6 + 16 * v41;
    *(void *)(v42 + 32) = 0LL;
    *(void *)(v42 + 40) = 0xE000000000000000LL;
    if (v5 == v4)
    {
      swift_release();
      goto LABEL_46;
    }
  }

  sub_186C5ADD4();
  unint64_t v11 = v52[2];
  if (!v11) {
    goto LABEL_39;
  }
  sub_186C5ADD4();
  unint64_t v12 = v52[2];
  if (!v12) {
    goto LABEL_50;
  }
  uint64_t v56 = v52[4];
  unint64_t v13 = v11 - 1;
  uint64_t v49 = v5;
  uint64_t v50 = v6;
  if (v11 == 1)
  {
    swift_bridgeObjectRetain();
  }

  else
  {
    if (v12 < 2) {
      goto LABEL_51;
    }
    if (v11 > v12) {
      goto LABEL_52;
    }
    uint64_t v15 = v52[7];
    uint64_t v14 = v52[8];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v53 = v15;
    swift_bridgeObjectRetain();
    uint64_t v55 = v14;
    swift_bridgeObjectRetain();
    char v16 = v52 + 13;
    do
    {
      uint64_t v17 = *(v16 - 4);
      uint64_t v18 = *(v16 - 1);
      uint64_t v19 = *v16;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v20 = v56;
      uint64_t v21 = sub_186C5ADB0();
      BOOL v22 = v21 < sub_186C5ADB0();
      uint64_t v23 = v55;
      unint64_t v24 = v13;
      uint64_t v25 = v53;
      if (v22) {
        uint64_t v23 = v19;
      }
      if (v22) {
        uint64_t v25 = v18;
      }
      uint64_t v53 = v25;
      if (v22) {
        uint64_t v20 = v17;
      }
      uint64_t v55 = v23;
      uint64_t v56 = v20;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v16 += 5;
      --v13;
    }

    while (v24 != 1);
    unint64_t v10 = v52;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v5 = v49;
    uint64_t v6 = v50;
    int64_t v4 = v48;
  }

  uint64_t v54 = sub_186C5ADB0();
  swift_bridgeObjectRelease();
  int64_t v26 = v10[2];
  if (!v26)
  {
LABEL_39:
    uint64_t v28 = MEMORY[0x18961AFE8];
LABEL_40:
    uint64_t v60 = v28;
    __swift_instantiateConcreteTypeFromMangledName(&qword_18C6A21A8);
    sub_186BF0620();
    sub_186C5ACD8();
    swift_bridgeObjectRelease();
    sub_186C5ADD4();
    swift_bridgeObjectRelease();
    goto LABEL_41;
  }

  uint64_t v59 = MEMORY[0x18961AFE8];
  sub_186BEF8C8(0LL, v26, 0);
  uint64_t v27 = 0LL;
  uint64_t v28 = v59;
  unint64_t v29 = v10 + 8;
  while (!__OFADD__(v27, 1LL))
  {
    uint64_t v30 = sub_186C5ADB0();
    uint64_t v31 = v54 - v30;
    if (__OFSUB__(v54, v30)) {
      goto LABEL_48;
    }
    uint64_t v57 = v28;
    int64_t v32 = v26;
    uint64_t v33 = v31 + 8;
    if (__OFADD__(v31, 8LL)) {
      goto LABEL_49;
    }
    uint64_t v60 = 0x2020202020202020LL;
    unint64_t v61 = 0xE800000000000000LL;
    swift_bridgeObjectRetain();
    sub_186C5ADD4();
    swift_bridgeObjectRelease();
    MEMORY[0x186E44860](32LL, 0xE100000000000000LL, v33);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_186C5ADD4();
    swift_bridgeObjectRelease();
    sub_186C5ADD4();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&qword_18C6A21A8);
    sub_186BF0620();
    sub_186C5ACD8();
    swift_bridgeObjectRelease();
    if (sub_186C5ADB0() < 1)
    {
      swift_bridgeObjectRelease();
    }

    else
    {
      sub_186C5B260();
      swift_bridgeObjectRelease();
      sub_186C5ADD4();
      sub_186C5ADD4();
      swift_bridgeObjectRelease();
      sub_186C5ADD4();
    }

    int64_t v26 = v32;
    uint64_t v34 = v27 + 1;
    swift_bridgeObjectRelease();
    uint64_t v35 = v60;
    unint64_t v36 = v61;
    uint64_t v28 = v57;
    unint64_t v38 = *(void *)(v57 + 16);
    unint64_t v37 = *(void *)(v57 + 24);
    if (v38 >= v37 >> 1)
    {
      sub_186BEF8C8((char *)(v37 > 1), v38 + 1, 1);
      uint64_t v34 = v27 + 1;
      uint64_t v28 = v57;
    }

    *(void *)(v28 + 16) = v38 + 1;
    uint64_t v39 = v28 + 16 * v38;
    *(void *)(v39 + 32) = v35;
    *(void *)(v39 + 40) = v36;
    v29 += 5;
    ++v27;
    if (v34 == v26)
    {
      uint64_t v5 = v49;
      uint64_t v6 = v50;
      int64_t v4 = v48;
      goto LABEL_40;
    }
  }

  __break(1u);
LABEL_48:
  __break(1u);
LABEL_49:
  __break(1u);
LABEL_50:
  __break(1u);
LABEL_51:
  __break(1u);
LABEL_52:
  __break(1u);
  uint64_t result = swift_release();
  __break(1u);
  return result;
}

unint64_t sub_186BFAD1C()
{
  unint64_t result = qword_18C6A22A8;
  if (!qword_18C6A22A8)
  {
    unint64_t result = MEMORY[0x186E46630](&unk_186C5E6A8, &type metadata for KTraceProvideErrorKind);
    atomic_store(result, (unint64_t *)&qword_18C6A22A8);
  }

  return result;
}

uint64_t sub_186BFAD60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 a5)
{
  if (a5 <= 6u)
  {
    if (a5 == 4) {
      swift_bridgeObjectRetain();
    }
    return swift_bridgeObjectRetain();
  }

  return result;
}

uint64_t sub_186BFADAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 a5)
{
  if (a5 <= 6u)
  {
    if (a5 == 4) {
      swift_bridgeObjectRelease();
    }
    return swift_bridgeObjectRelease();
  }

  return result;
}

__n128 __swift_memcpy33_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

ValueMetadata *type metadata accessor for KTraceProvideError()
{
  return &type metadata for KTraceProvideError;
}

uint64_t initializeBufferWithCopyOfBuffer for ProviderOption(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a1 = *a2;
  uint64_t v3 = v2 + 16;
  swift_retain();
  return v3;
}

uint64_t destroy for ProviderOption()
{
  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for ProviderOption(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for ProviderOption(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy40_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for ProviderOption(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + _Block_object_dispose(va, 8) = v4;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for ProviderOption()
{
  return &type metadata for ProviderOption;
}

uint64_t destroy for ProviderDocumentation()
{
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for ProviderDocumentation(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + _Block_object_dispose(va, 8) = v3;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v4;
  uint64_t v5 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 4_Block_object_dispose(va, 8) = v5;
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ProviderDocumentation(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + _Block_object_dispose(va, 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 4_Block_object_dispose(va, 8) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy64_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  __int128 v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 4_Block_object_dispose(va, 8) = v4;
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for ProviderDocumentation(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + _Block_object_dispose(va, 8) = v4;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  uint64_t v5 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v5;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 4_Block_object_dispose(va, 8) = *(_OWORD *)(a2 + 48);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ProviderDocumentation(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 64)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ProviderDocumentation(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 56) = 0LL;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + _Block_object_dispose(va, 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + std::__hash_table<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>>>::~__hash_table((uint64_t)this + 64) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + _Block_object_dispose(va, 8) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + std::__hash_table<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>>>::~__hash_table((uint64_t)this + 64) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for ProviderDocumentation()
{
  return &type metadata for ProviderDocumentation;
}

uint64_t _s6ktrace22KTraceProvideErrorKindOwxx_0(uint64_t a1)
{
  return sub_186BFADAC( *(void *)a1,  *(void *)(a1 + 8),  *(void *)(a1 + 16),  *(void *)(a1 + 24),  *(_BYTE *)(a1 + 32));
}

uint64_t _s6ktrace22KTraceProvideErrorKindOwcp_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  unsigned __int8 v7 = *(_BYTE *)(a2 + 32);
  sub_186BFAD60(*(void *)a2, v4, v5, v6, v7);
  *(void *)a1 = v3;
  *(void *)(a1 + _Block_object_dispose(va, 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(_BYTE *)(a1 + 32) = v7;
  return a1;
}

uint64_t _s6ktrace22KTraceProvideErrorKindOwca_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  unsigned __int8 v7 = *(_BYTE *)(a2 + 32);
  sub_186BFAD60(*(void *)a2, v4, v5, v6, v7);
  uint64_t v8 = *(void *)a1;
  uint64_t v9 = *(void *)(a1 + 8);
  uint64_t v10 = *(void *)(a1 + 16);
  uint64_t v11 = *(void *)(a1 + 24);
  *(void *)a1 = v3;
  *(void *)(a1 + _Block_object_dispose(va, 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  unsigned __int8 v12 = *(_BYTE *)(a1 + 32);
  *(_BYTE *)(a1 + 32) = v7;
  sub_186BFADAC(v8, v9, v10, v11, v12);
  return a1;
}

uint64_t _s6ktrace22KTraceProvideErrorKindOwta_0(uint64_t a1, uint64_t a2)
{
  char v3 = *(_BYTE *)(a2 + 32);
  uint64_t v4 = *(void *)a1;
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v7 = *(void *)(a1 + 24);
  __int128 v8 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v8;
  unsigned __int8 v9 = *(_BYTE *)(a1 + 32);
  *(_BYTE *)(a1 + 32) = v3;
  sub_186BFADAC(v4, v6, v5, v7, v9);
  return a1;
}

uint64_t _s6ktrace22KTraceProvideErrorKindOwet_0(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0xFA && *(_BYTE *)(a1 + 33)) {
    return (*(_DWORD *)a1 + 250);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 32);
  if (v3 <= 6) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t _s6ktrace22KTraceProvideErrorKindOwst_0(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xF9)
  {
    *(void *)(result + 16) = 0LL;
    *(void *)(result + 24) = 0LL;
    *(_BYTE *)(result + 32) = 0;
    *(void *)__n128 result = a2 - 250;
    *(void *)(result + _Block_object_dispose(va, 8) = 0LL;
    if (a3 >= 0xFA) {
      *(_BYTE *)(result + 33) = 1;
    }
  }

  else
  {
    if (a3 >= 0xFA) {
      *(_BYTE *)(result + 33) = 0;
    }
    if (a2) {
      *(_BYTE *)(result + 32) = -(char)a2;
    }
  }

  return result;
}

uint64_t sub_186BFB418(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 32);
}

uint64_t sub_186BFB420(uint64_t result, char a2)
{
  *(_BYTE *)(result + 32) = a2;
  return result;
}

ValueMetadata *type metadata accessor for KTraceProvideErrorKind()
{
  return &type metadata for KTraceProvideErrorKind;
}

uint64_t destroy for Provider()
{
  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for Provider(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for Provider(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  a1[3] = a2[3];
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for Provider(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + _Block_object_dispose(va, 8) = *(_OWORD *)(a2 + 8);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for Trimming(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 40)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Trimming(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + _Block_object_dispose(va, 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 40) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + _Block_object_dispose(va, 8) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 40) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for Provider()
{
  return &type metadata for Provider;
}

uint64_t type metadata accessor for ProviderList()
{
  return objc_opt_self();
}

uint64_t method lookup function for ProviderList()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of ProviderList.__allocating_init(machine:)()
{
  return (*(uint64_t (**)(void))(v0 + 96))();
}

__n128 __swift_memcpy224_8(uint64_t a1, uint64_t a2)
{
  __int128 v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  __int128 v3 = *(_OWORD *)(a2 + 32);
  __int128 v4 = *(_OWORD *)(a2 + 48);
  __int128 v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + std::__hash_table<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>>>::~__hash_table((uint64_t)this + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 4_Block_object_dispose(va, 8) = v4;
  __int128 v6 = *(_OWORD *)(a2 + 96);
  __int128 v7 = *(_OWORD *)(a2 + 112);
  __int128 v8 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 12_Block_object_dispose(va, 8) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v8;
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 112) = v7;
  __n128 result = *(__n128 *)(a2 + 160);
  __int128 v10 = *(_OWORD *)(a2 + 176);
  __int128 v11 = *(_OWORD *)(a2 + 208);
  *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 20_Block_object_dispose(va, 8) = v11;
  *(__n128 *)(a1 + 160) = result;
  *(_OWORD *)(a1 + std::__hash_table<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>>>::~__hash_table((uint64_t)this + 176) = v10;
  return result;
}

uint64_t sub_186BFB6CC(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 224)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 216);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t sub_186BFB728(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 216) = 0LL;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 16_Block_object_dispose(va, 8) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 8_Block_object_dispose(va, 8) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + _Block_object_dispose(va, 8) = 0u;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + std::__hash_table<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>>>::~__hash_table((uint64_t)this + 224) = 1;
    }
  }

  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + std::__hash_table<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>>>::~__hash_table((uint64_t)this + 224) = 0;
    }
    if (a2) {
      *(void *)(result + 216) = a2;
    }
  }

  return result;
}

void type metadata accessor for ktrace_machine(uint64_t a1)
{
}

unint64_t sub_186BFB7C8()
{
  unint64_t result = qword_18C6A2320;
  if (!qword_18C6A2320)
  {
    unint64_t result = MEMORY[0x186E46630](&unk_186C60B2C, &type metadata for StandardFile);
    atomic_store(result, (unint64_t *)&qword_18C6A2320);
  }

  return result;
}

uint64_t __swift_destroy_boxed_opaque_existential_0(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 24) - 8LL);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0) {
    return swift_release();
  }
  else {
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

uint64_t sub_186BFB82C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t *__swift_allocate_value_buffer(uint64_t a1, uint64_t *a2)
{
  if ((*(_DWORD *)(*(void *)(a1 - 8) + 80LL) & 0x20000) != 0)
  {
    uint64_t v3 = swift_slowAlloc();
    *a2 = v3;
    return (uint64_t *)v3;
  }

  return a2;
}

double sub_186BFB8A8@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_186BF1228(a1, a2);
}

unint64_t sub_186BFB8D0()
{
  unint64_t result = qword_18C6A2460;
  if (!qword_18C6A2460)
  {
    unint64_t result = MEMORY[0x186E46630](MEMORY[0x189617FF0], MEMORY[0x189617FA8]);
    atomic_store(result, (unint64_t *)&qword_18C6A2460);
  }

  return result;
}

uint64_t sub_186BFB914(uint64_t a1)
{
  return a1;
}

uint64_t sub_186BFB964(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C6A2350);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

void type metadata accessor for CFDictionary(uint64_t a1)
{
}

void sub_186BFB9B8(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v4) {
      atomic_store(ForeignTypeMetadata, a2);
    }
  }

void listFiles(in:pathExtension:olderThan:)( void *a1, void (*a2)(char *, uint64_t, uint64_t), uint64_t a3, uint64_t a4)
{
  uint64_t v99 = a2;
  uint64_t v89 = a4;
  uint64_t v90 = a3;
  id v96 = a1;
  uint64_t v4 = sub_186C5A984();
  uint64_t v94 = *(void *)(v4 - 8);
  uint64_t v95 = v4;
  uint64_t v5 = MEMORY[0x1895F8858](v4);
  char v82 = (char *)&v79 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v5);
  BOOL v87 = (char *)&v79 - v7;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C6A2378);
  uint64_t v9 = MEMORY[0x1895F8858](v8);
  uint64_t v85 = (char *)&v79 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v9);
  uint64_t v88 = (uint64_t)&v79 - v11;
  uint64_t v12 = sub_186C5AAF8();
  uint64_t v98 = *(void *)(v12 - 8);
  uint64_t v13 = MEMORY[0x1895F8858](v12);
  uint64_t v84 = (char *)&v79 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v13);
  uint64_t v97 = (char *)&v79 - v15;
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C6A21F8);
  uint64_t v17 = MEMORY[0x1895F8858](v16);
  uint64_t v19 = (char *)&v79 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v17);
  uint64_t v21 = (char *)&v79 - v20;
  uint64_t v22 = sub_186C5AA8C();
  uint64_t v23 = *(void *)(v22 - 8);
  uint64_t v24 = MEMORY[0x1895F8858](v22);
  uint64_t v91 = (char *)&v79 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v26 = MEMORY[0x1895F8858](v24);
  uint64_t v79 = (char *)&v79 - v27;
  MEMORY[0x1895F8858](v26);
  uint64_t v103 = (char *)&v79 - v28;
  id v29 = objc_msgSend(objc_allocWithZone(MEMORY[0x1896078A8]), sel_init);
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C6A2380);
  uint64_t v30 = swift_allocObject();
  *(_OWORD *)(v30 + 16) = xmmword_186C5E7F0;
  uint64_t v31 = (void *)*MEMORY[0x189603C20];
  int64_t v32 = (void *)*MEMORY[0x189603D00];
  *(void *)(v30 + 32) = *MEMORY[0x189603C20];
  *(void *)(v30 + 40) = v32;
  uint64_t v33 = (void *)*MEMORY[0x189603B88];
  *(void *)(v30 + 4_Block_object_dispose(va, 8) = *MEMORY[0x189603B88];
  id v81 = v31;
  id v34 = v32;
  id v86 = v33;
  uint64_t v35 = (void *)sub_186C5AFB4();

  swift_bridgeObjectRelease();
  id v96 = v35;
  if (!v35) {
    return;
  }
  unint64_t v80 = MEMORY[0x18961AFE8];
  uint64_t v92 = MEMORY[0x18961AFC0] + 8LL;
  uint64_t v93 = v19;
  uint64_t v36 = v90;
  while (1)
  {
    if (objc_msgSend(v96, sel_nextObject))
    {
      sub_186C5B1DC();
      swift_unknownObjectRelease();
    }

    else
    {
      memset(v101, 0, sizeof(v101));
    }

    sub_186BFC38C((uint64_t)v101, (uint64_t)v102);
    if (!v102[3]) {
      break;
    }
    int v38 = swift_dynamicCast();
    uint64_t v39 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v23 + 56);
    v39(v21, v38 ^ 1u, 1LL, v22);
    unint64_t v40 = *(void (**)(char *, char *, uint64_t))(v23 + 32);
    v40(v103, v21, v22);
    if ((void (*)(char *, uint64_t, uint64_t))sub_186C5A9F0() == v99 && v41 == v36)
    {
      swift_bridgeObjectRelease();
    }

    else
    {
      char v42 = sub_186C5B4F4();
      swift_bridgeObjectRelease();
      if ((v42 & 1) == 0) {
        goto LABEL_4;
      }
    }

    uint64_t v83 = (void (*)(unint64_t, char *, uint64_t))v40;
    uint64_t v43 = v88;
    sub_186BFC9FC(v89, v88);
    uint64_t v44 = v98;
    uint64_t v45 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v98 + 48);
    if (v45((char *)v43, 1LL, v12) == 1)
    {
      uint64_t v60 = v43;
    }

    else
    {
      uint64_t v46 = *(void (**)(char *, uint64_t, uint64_t))(v44 + 32);
      v46(v97, v43, v12);
      type metadata accessor for URLResourceKey();
      sub_186BFCB04( &qword_18C6A2388,  (uint64_t (*)(uint64_t))type metadata accessor for URLResourceKey,  (uint64_t)&unk_186C5E944);
      id v47 = v86;
      v102[0] = sub_186C5AF78();
      id v48 = v47;
      sub_186BFC7D4(v101, v48);
      uint64_t v49 = *(void **)&v101[0];

      uint64_t v50 = v87;
      uint64_t v51 = v100;
      sub_186C5A9FC();
      uint64_t v100 = v51;
      if (v51)
      {

        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v98 + 8))(v97, v12);
        (*(void (**)(char *, uint64_t))(v23 + 8))(v103, v22);
        swift_bridgeObjectRelease();
        return;
      }

      swift_bridgeObjectRelease();
      __int128 v52 = v85;
      sub_186C5A96C();
      (*(void (**)(char *, uint64_t))(v94 + 8))(v50, v95);
      if (v45(v52, 1LL, v12) != 1)
      {
        uint64_t v53 = v12;
        uint64_t v54 = v21;
        uint64_t v55 = v84;
        v46(v84, (uint64_t)v52, v53);
        sub_186BFCB04(&qword_18C6A2390, (uint64_t (*)(uint64_t))MEMORY[0x189606E60], MEMORY[0x189606E88]);
        uint64_t v56 = v97;
        char v57 = sub_186C5ACE4();
        uint64_t v58 = *(void (**)(char *, uint64_t))(v98 + 8);
        uint64_t v59 = v55;
        uint64_t v21 = v54;
        uint64_t v12 = v53;
        v58(v59, v53);
        v58(v56, v53);
        uint64_t v19 = v93;
        uint64_t v36 = v90;
        if ((v57 & 1) == 0) {
          goto LABEL_4;
        }
        goto LABEL_22;
      }

      (*(void (**)(char *, uint64_t))(v98 + 8))(v97, v12);
      uint64_t v60 = (uint64_t)v52;
      uint64_t v19 = v93;
      uint64_t v36 = v90;
    }

    sub_186BFCA44(v60, &qword_18C6A2378);
LABEL_22:
    (*(void (**)(char *, char *, uint64_t))(v23 + 16))(v79, v103, v22);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0) {
      unint64_t v61 = v80;
    }
    else {
      unint64_t v61 = sub_186BF7804(0, *(void *)(v80 + 16) + 1LL, 1, v80);
    }
    unint64_t v63 = *(void *)(v61 + 16);
    unint64_t v62 = *(void *)(v61 + 24);
    if (v63 >= v62 >> 1) {
      unint64_t v61 = sub_186BF7804(v62 > 1, v63 + 1, 1, v61);
    }
    *(void *)(v61 + 16) = v63 + 1;
    unint64_t v37 = (*(unsigned __int8 *)(v23 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v23 + 80);
    unint64_t v80 = v61;
    v83(v61 + v37 + *(void *)(v23 + 72) * v63, v79, v22);
LABEL_4:
    (*(void (**)(char *, uint64_t))(v23 + 8))(v103, v22);
  }

  sub_186BFCA44((uint64_t)v102, &qword_18C6A2350);
  uint64_t v39 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v23 + 56);
  v39(v21, 1LL, 1LL, v22);
LABEL_29:
  sub_186BFCA44((uint64_t)v21, &qword_18C6A21F8);
  uint64_t v64 = *(char **)(v80 + 16);
  if (v64)
  {
    uint64_t v65 = v80 + ((*(unsigned __int8 *)(v23 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v23 + 80));
    swift_bridgeObjectRetain();
    uint64_t v66 = 0LL;
    uint64_t v67 = *(void (**)(char *, uint64_t, uint64_t))(v23 + 16);
    uint64_t v98 = *(void *)(v23 + 72);
    uint64_t v99 = v67;
    while (1)
    {
      v99(v19, v65, v22);
      v39(v19, 0LL, 1LL, v22);
      uint64_t v103 = v64;
      (*(void (**)(char *, char *))(v23 + 32))(v91, v19);
      type metadata accessor for URLResourceKey();
      sub_186BFCB04( &qword_18C6A2388,  (uint64_t (*)(uint64_t))type metadata accessor for URLResourceKey,  (uint64_t)&unk_186C5E944);
      id v68 = v81;
      v102[0] = sub_186C5AF78();
      id v69 = v68;
      sub_186BFC7D4(v101, v69);
      BOOL v70 = *(void **)&v101[0];

      unint64_t v71 = v82;
      uint64_t v72 = v100;
      sub_186C5A9FC();
      uint64_t v100 = v72;
      if (v72)
      {
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v23 + 8))(v91, v22);
        swift_bridgeObjectRelease_n();

        return;
      }

      swift_bridgeObjectRelease();
      uint64_t v73 = sub_186C5A978();
      uint64_t v74 = v71;
      char v76 = v75;
      (*(void (**)(char *, uint64_t))(v94 + 8))(v74, v95);
      if ((v76 & 1) != 0) {
        uint64_t v77 = 0LL;
      }
      else {
        uint64_t v77 = v73;
      }
      BOOL v78 = __OFADD__(v66, v77);
      v66 += v77;
      if (v78)
      {
        __break(1u);
        return;
      }

      (*(void (**)(char *, uint64_t))(v23 + 8))(v91, v22);
      v65 += v98;
      uint64_t v64 = v103 - 1;
      uint64_t v19 = v93;
    }
  }

  else
  {
    swift_bridgeObjectRetain();
LABEL_40:
    v39(v19, 1LL, 1LL, v22);
  }

  swift_bridgeObjectRelease();
}

uint64_t sub_186BFC38C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C6A2350);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

void type metadata accessor for URLResourceKey()
{
  if (!qword_18C6A2398)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v1) {
      atomic_store(ForeignTypeMetadata, (unint64_t *)&qword_18C6A2398);
    }
  }

uint64_t sub_186BFC428(uint64_t a1, uint64_t a2)
{
  return sub_186BFC4F0(a1, a2, MEMORY[0x189617F88]);
}

uint64_t sub_186BFC434()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_186BFC474()
{
  uint64_t v0 = sub_186C5B5D8();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_186BFC4E4(uint64_t a1, uint64_t a2)
{
  return sub_186BFC4F0(a1, a2, (uint64_t (*)(uint64_t))MEMORY[0x1896070D8]);
}

uint64_t sub_186BFC4F0(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v4 = sub_186C5AD2C();
  uint64_t v5 = a3(v4);
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t sub_186BFC52C(uint64_t a1, id *a2)
{
  uint64_t result = sub_186C5AD14();
  *a2 = 0LL;
  return result;
}

uint64_t sub_186BFC5A0(uint64_t a1, id *a2)
{
  char v3 = sub_186C5AD20();
  *a2 = 0LL;
  return v3 & 1;
}

uint64_t sub_186BFC61C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = sub_186C5AD08();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

uint64_t sub_186BFC65C()
{
  uint64_t v0 = sub_186C5AD2C();
  uint64_t v2 = v1;
  if (v0 == sub_186C5AD2C() && v2 == v3) {
    char v5 = 1;
  }
  else {
    char v5 = sub_186C5B4F4();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v5 & 1;
}

uint64_t sub_186BFC6E4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = sub_186C5AD08();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

uint64_t sub_186BFC728@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_186C5AD2C();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_186BFC750()
{
  return sub_186C5B3B0();
}

uint64_t sub_186BFC7D4(void *a1, void *a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *v2;
  sub_186C5AD2C();
  sub_186C5B59C();
  swift_bridgeObjectRetain();
  sub_186C5ADA4();
  uint64_t v7 = sub_186C5B5D8();
  swift_bridgeObjectRelease();
  uint64_t v8 = -1LL << *(_BYTE *)(v6 + 32);
  unint64_t v9 = v7 & ~v8;
  if (((*(void *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v9) & 1) == 0)
  {
LABEL_15:
    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v28 = *v3;
    *uint64_t v3 = 0x8000000000000000LL;
    id v24 = a2;
    sub_186BFCE54((uint64_t)v24, v9, isUniquelyReferenced_nonNull_native);
    *uint64_t v3 = v28;
    swift_bridgeObjectRelease();
    *a1 = v24;
    return 1LL;
  }

  uint64_t v10 = sub_186C5AD2C();
  uint64_t v12 = v11;
  if (v10 == sub_186C5AD2C() && v12 == v13)
  {
LABEL_16:
    swift_bridgeObjectRelease_n();
  }

  else
  {
    char v15 = sub_186C5B4F4();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v15 & 1) == 0)
    {
      uint64_t v16 = ~v8;
      do
      {
        unint64_t v9 = (v9 + 1) & v16;
        if (((*(void *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v9) & 1) == 0) {
          goto LABEL_15;
        }
        uint64_t v17 = sub_186C5AD2C();
        uint64_t v19 = v18;
        if (v17 == sub_186C5AD2C() && v19 == v20) {
          goto LABEL_16;
        }
        char v22 = sub_186C5B4F4();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }

      while ((v22 & 1) == 0);
    }
  }

  swift_bridgeObjectRelease();
  uint64_t v26 = *(void **)(*(void *)(*v3 + 48LL) + 8 * v9);
  *a1 = v26;
  id v27 = v26;
  return 0LL;
}

uint64_t sub_186BFC9FC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C6A2378);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_186BFCA44(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8LL))(a1, v3);
  return a1;
}

uint64_t sub_186BFCA80()
{
  return sub_186BFCB04( &qword_18C6A23A0,  (uint64_t (*)(uint64_t))type metadata accessor for URLResourceKey,  (uint64_t)&unk_186C5E85C);
}

uint64_t sub_186BFCAAC()
{
  return sub_186BFCB04( &qword_18C6A23A8,  (uint64_t (*)(uint64_t))type metadata accessor for URLResourceKey,  (uint64_t)&unk_186C5E830);
}

uint64_t sub_186BFCAD8()
{
  return sub_186BFCB04( &qword_18C6A23B0,  (uint64_t (*)(uint64_t))type metadata accessor for URLResourceKey,  (uint64_t)&unk_186C5E8CC);
}

uint64_t sub_186BFCB04(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v6 = a2(255LL);
    uint64_t result = MEMORY[0x186E46630](a3, v6);
    atomic_store(result, a1);
  }

  return result;
}

uint64_t sub_186BFCB44()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C6A23C0);
  uint64_t v3 = sub_186C5B23C();
  uint64_t v4 = v3;
  if (*(void *)(v2 + 16))
  {
    id v27 = v0;
    uint64_t v5 = 1LL << *(_BYTE *)(v2 + 32);
    id v29 = (void *)(v2 + 56);
    if (v5 < 64) {
      uint64_t v6 = ~(-1LL << v5);
    }
    else {
      uint64_t v6 = -1LL;
    }
    unint64_t v7 = v6 & *(void *)(v2 + 56);
    int64_t v28 = (unint64_t)(v5 + 63) >> 6;
    uint64_t v8 = v3 + 56;
    uint64_t result = swift_retain();
    int64_t v10 = 0LL;
    while (1)
    {
      if (v7)
      {
        unint64_t v12 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        unint64_t v13 = v12 | (v10 << 6);
      }

      else
      {
        int64_t v14 = v10 + 1;
        if (__OFADD__(v10, 1LL))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }

        if (v14 >= v28) {
          goto LABEL_33;
        }
        unint64_t v15 = v29[v14];
        ++v10;
        if (!v15)
        {
          int64_t v10 = v14 + 1;
          if (v14 + 1 >= v28) {
            goto LABEL_33;
          }
          unint64_t v15 = v29[v10];
          if (!v15)
          {
            int64_t v10 = v14 + 2;
            if (v14 + 2 >= v28) {
              goto LABEL_33;
            }
            unint64_t v15 = v29[v10];
            if (!v15)
            {
              int64_t v16 = v14 + 3;
              if (v16 >= v28)
              {
LABEL_33:
                swift_release();
                uint64_t v1 = v27;
                uint64_t v26 = 1LL << *(_BYTE *)(v2 + 32);
                if (v26 > 63) {
                  bzero(v29, ((unint64_t)(v26 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
                }
                else {
                  void *v29 = -1LL << v26;
                }
                *(void *)(v2 + 16) = 0LL;
                break;
              }

              unint64_t v15 = v29[v16];
              if (!v15)
              {
                while (1)
                {
                  int64_t v10 = v16 + 1;
                  if (__OFADD__(v16, 1LL)) {
                    goto LABEL_39;
                  }
                  if (v10 >= v28) {
                    goto LABEL_33;
                  }
                  unint64_t v15 = v29[v10];
                  ++v16;
                  if (v15) {
                    goto LABEL_23;
                  }
                }
              }

              int64_t v10 = v16;
            }
          }
        }

uint64_t sub_186BFCE54(uint64_t result, unint64_t a2, char a3)
{
  uint64_t v4 = v3;
  uint64_t v6 = result;
  unint64_t v7 = *(void *)(*v3 + 16);
  unint64_t v8 = *(void *)(*v3 + 24);
  if (v8 > v7 && (a3 & 1) != 0) {
    goto LABEL_22;
  }
  if ((a3 & 1) != 0)
  {
    sub_186BFCB44();
  }

  else
  {
    if (v8 > v7)
    {
      uint64_t result = (uint64_t)sub_186BFD080();
LABEL_22:
      uint64_t v25 = *v4;
      *(void *)(*v4 + 8 * (a2 >> 6) + 56) |= 1LL << a2;
      *(void *)(*(void *)(v25 + 48) + 8 * a2) = v6;
      uint64_t v26 = *(void *)(v25 + 16);
      BOOL v27 = __OFADD__(v26, 1LL);
      uint64_t v28 = v26 + 1;
      if (!v27)
      {
        *(void *)(v25 + 16) = v28;
        return result;
      }

      __break(1u);
      goto LABEL_25;
    }

    sub_186BFD228();
  }

  uint64_t v9 = *v3;
  sub_186C5AD2C();
  sub_186C5B59C();
  sub_186C5ADA4();
  uint64_t v10 = sub_186C5B5D8();
  uint64_t result = swift_bridgeObjectRelease();
  uint64_t v11 = -1LL << *(_BYTE *)(v9 + 32);
  a2 = v10 & ~v11;
  if (((*(void *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a2) & 1) == 0) {
    goto LABEL_22;
  }
  uint64_t v12 = sub_186C5AD2C();
  uint64_t v14 = v13;
  if (v12 == sub_186C5AD2C() && v14 == v15)
  {
LABEL_25:
    swift_bridgeObjectRelease_n();
    goto LABEL_26;
  }

  char v17 = sub_186C5B4F4();
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  if ((v17 & 1) == 0)
  {
    uint64_t v18 = ~v11;
    do
    {
      a2 = (a2 + 1) & v18;
      if (((*(void *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a2) & 1) == 0) {
        goto LABEL_22;
      }
      uint64_t v19 = sub_186C5AD2C();
      uint64_t v21 = v20;
      if (v19 == sub_186C5AD2C() && v21 == v22) {
        goto LABEL_25;
      }
      char v24 = sub_186C5B4F4();
      swift_bridgeObjectRelease();
      uint64_t result = swift_bridgeObjectRelease();
    }

    while ((v24 & 1) == 0);
  }

id sub_186BFD080()
{
  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C6A23C0);
  uint64_t v2 = *v0;
  uint64_t v3 = sub_186C5B230();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    id result = (id)swift_release();
    *uint64_t v1 = v4;
    return result;
  }

  id result = (id)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v18 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_30;
    }

    if (v18 >= v13) {
      goto LABEL_28;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      int64_t v9 = v18 + 1;
      if (v18 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v19 = *(void *)(v6 + 8 * v9);
      if (!v19)
      {
        int64_t v9 = v18 + 2;
        if (v18 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v19 = *(void *)(v6 + 8 * v9);
        if (!v19) {
          break;
        }
      }
    }

uint64_t sub_186BFD228()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C6A23C0);
  uint64_t v3 = sub_186C5B23C();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *uint64_t v1 = v4;
    return result;
  }

  uint64_t v5 = 1LL << *(_BYTE *)(v2 + 32);
  BOOL v27 = v0;
  uint64_t v28 = v2 + 56;
  if (v5 < 64) {
    uint64_t v6 = ~(-1LL << v5);
  }
  else {
    uint64_t v6 = -1LL;
  }
  unint64_t v7 = v6 & *(void *)(v2 + 56);
  int64_t v29 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v8 = v3 + 56;
  uint64_t result = swift_retain();
  int64_t v10 = 0LL;
  while (1)
  {
    if (v7)
    {
      unint64_t v12 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      unint64_t v13 = v12 | (v10 << 6);
      goto LABEL_24;
    }

    int64_t v14 = v10 + 1;
    if (__OFADD__(v10, 1LL))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }

    if (v14 >= v29) {
      goto LABEL_33;
    }
    unint64_t v15 = *(void *)(v28 + 8 * v14);
    ++v10;
    if (!v15)
    {
      int64_t v10 = v14 + 1;
      if (v14 + 1 >= v29) {
        goto LABEL_33;
      }
      unint64_t v15 = *(void *)(v28 + 8 * v10);
      if (!v15)
      {
        int64_t v10 = v14 + 2;
        if (v14 + 2 >= v29) {
          goto LABEL_33;
        }
        unint64_t v15 = *(void *)(v28 + 8 * v10);
        if (!v15) {
          break;
        }
      }
    }

LABEL_37:
  __break(1u);
  return result;
}

  __break(1u);
LABEL_38:
  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

      int64_t v9 = v12;
LABEL_38:
      uint64_t v6 = v20;
      uint64_t result = v21;
      goto LABEL_39;
    }

  __break(1u);
  return result;
}

uint64_t sub_186BFD504()
{
  return sub_186C5B5D8();
}

uint64_t sub_186BFD548()
{
  return sub_186C5B5B4();
}

uint64_t sub_186BFD570()
{
  return sub_186C5B5D8();
}

uint64_t sub_186BFD5B0@<X0>(unsigned __int8 *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result = sub_186BFE918(*a1);
  *a2 = result;
  return result;
}

void *sub_186BFD5D8()
{
  return &unk_186C5E99C;
}

_BYTE *sub_186BFD5E4@<X0>(_BYTE *result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = *result;
  return result;
}

void sub_186BFD5F0(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

_BYTE *sub_186BFD5F8@<X0>(_BYTE *result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = *v2 | *result;
  return result;
}

_BYTE *sub_186BFD60C@<X0>(_BYTE *result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = *v2 & *result;
  return result;
}

_BYTE *sub_186BFD620@<X0>(_BYTE *result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = *v2 ^ *result;
  return result;
}

BOOL sub_186BFD634(_BYTE *a1, unsigned __int8 *a2)
{
  int v3 = *a2;
  int v4 = *v2;
  if ((v4 & v3) != v3) {
    *uint64_t v2 = v4 | v3;
  }
  *a1 = v3;
  return (v4 & v3) != v3;
}

unsigned __int8 *sub_186BFD664@<X0>(unsigned __int8 *result@<X0>, _BYTE *a2@<X8>)
{
  int v3 = *result;
  int v4 = *v2;
  int v5 = v4 & v3;
  if ((v4 & v3) != 0) {
    *uint64_t v2 = v4 & ~(_BYTE)v3;
  }
  *a2 = v5;
  a2[1] = v5 == 0;
  return result;
}

unsigned __int8 *sub_186BFD690@<X0>(unsigned __int8 *result@<X0>, _BYTE *a2@<X8>)
{
  int v3 = *result;
  int v4 = *v2;
  *uint64_t v2 = v4 | v3;
  int v5 = v4 & v3;
  *a2 = v5;
  a2[1] = v5 == 0;
  return result;
}

_BYTE *sub_186BFD6B4(_BYTE *result)
{
  *v1 |= *result;
  return result;
}

_BYTE *sub_186BFD6C8(_BYTE *result)
{
  *v1 &= *result;
  return result;
}

_BYTE *sub_186BFD6DC(_BYTE *result)
{
  *v1 ^= *result;
  return result;
}

_BYTE *sub_186BFD6F0@<X0>(_BYTE *result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = *v2 & ~*result;
  return result;
}

BOOL sub_186BFD704(unsigned __int8 *a1)
{
  return (*v1 & ~*a1) == 0;
}

BOOL sub_186BFD718(_BYTE *a1)
{
  return (*v1 & *a1) == 0;
}

BOOL sub_186BFD72C(unsigned __int8 *a1)
{
  return (*a1 & ~*v1) == 0;
}

BOOL sub_186BFD740()
{
  return *v0 == 0;
}

uint64_t sub_186BFD750()
{
  return sub_186C5B1E8();
}

_BYTE *sub_186BFD768(_BYTE *result)
{
  *v1 &= ~*result;
  return result;
}

unsigned __int8 *sub_186BFD77C@<X0>(unsigned __int8 *result@<X0>, _WORD *a2@<X8>)
{
  *a2 = *result;
  return result;
}

void sub_186BFD78C(_BYTE *a1@<X8>)
{
  *a1 = *v1;
}

BOOL sub_186BFD798(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t sub_186BFD7AC@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  char v3 = sub_186BFE9B4(a1);
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v3;
  return result;
}

uint64_t sub_186BFD7E8(char a1, __int16 a2)
{
  if (a1 == 8)
  {
    if ((a2 & 0x100) != 0)
    {
LABEL_3:
      swift_bridgeObjectRelease();
      goto LABEL_8;
    }
  }

  else
  {
    char v7 = 91;
    sub_186C5B4DC();
    sub_186C5ADD4();
    swift_bridgeObjectRelease();
    sub_186C5ADD4();
    sub_186C5ADD4();
    swift_bridgeObjectRelease();
    if ((a2 & 0x100) != 0) {
      goto LABEL_3;
    }
  }

  sub_186C5ADD4();
  swift_bridgeObjectRelease();
  unint64_t v3 = sub_186BFE92C();
  unint64_t v4 = sub_186BFE970();
  sub_186C2A4A0((uint64_t)&type metadata for ANSIAttributes, v3, v4);
  sub_186C5B2F0();
  swift_release();
  swift_retain();
  sub_186C5B3A4();
  if ((v7 & 1) == 0)
  {
    do
    {
      __int16 v6 = sub_186C5B4DC();
      sub_186C5ADD4();
      sub_186C5ADD4();
      swift_bridgeObjectRelease();
      sub_186C5B3A4();
    }

    while (HIBYTE(v6) != 1);
  }

  swift_release_n();
LABEL_8:
  sub_186C5B2FC();
  sub_186C5ADD4();
  swift_bridgeObjectRelease();
  return sub_186C5ADD4();
}

uint64_t sub_186BFDA24(uint64_t a1, unsigned __int8 a2)
{
  return sub_186BFD7E8(8, a2);
}

uint64_t sub_186BFDA3C()
{
  return 1LL;
}

uint64_t sub_186BFDA44()
{
  return sub_186C5B5D8();
}

uint64_t sub_186BFDA84()
{
  return sub_186C5B5A8();
}

uint64_t sub_186BFDAA8()
{
  return sub_186C5B5D8();
}

uint64_t sub_186BFDAE8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC6ktrace8Reporter_logger;
  swift_beginAccess();
  uint64_t v4 = sub_186C5ABB8();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a1, v3, v4);
}

uint64_t sub_186BFDB4C(uint64_t a1)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC6ktrace8Reporter_logger;
  swift_beginAccess();
  uint64_t v4 = sub_186C5ABB8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40LL))(v3, a1, v4);
  return swift_endAccess();
}

uint64_t (*sub_186BFDBB8())()
{
  return j__swift_endAccess;
}

uint64_t sub_186BFDC00(FILE *a1, FILE *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v10 = swift_allocObject();
  sub_186BFDC7C(a1, a2, a3, a4, a5);
  return v10;
}

uint64_t sub_186BFDC7C(FILE *a1, FILE *a2, uint64_t a3, uint64_t a4, char a5)
{
  BOOL v25 = a2;
  uint64_t v8 = sub_186C5AAF8();
  uint64_t v23 = *(void *)(v8 - 8);
  uint64_t v24 = v8;
  MEMORY[0x1895F8858](v8);
  uint64_t v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = sub_186C5ABB8();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x1895F8858](v11);
  int64_t v14 = (char *)&v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_186C5ABAC();
  (*(void (**)(uint64_t, char *, uint64_t))(v12 + 32))(v5 + OBJC_IVAR____TtC6ktrace8Reporter_logger, v14, v11);
  if ((a5 & 1) == 0)
  {
    char v17 = v25;
    goto LABEL_9;
  }

  uint64_t v15 = v26;
  int64_t v16 = sub_186C28A4C(a1);
  if (!v15)
  {
    a1 = v16;
    if (!v16 || (char v17 = sub_186C28A4C(v25)) == 0LL)
    {
      sub_186BFEA4C();
      swift_allocError();
      swift_willThrow();
      goto LABEL_7;
    }

id sub_186BFDECC()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_186C5AAF8();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1895F8858](v2);
  uint64_t v5 = (char *)v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_186C5AAEC();
  sub_186C5AAE0();
  double v7 = v6;
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  v10[0] = 43LL;
  v10[1] = 0xE100000000000000LL;
  id result =  objc_msgSend( *(id *)(v1 + OBJC_IVAR____TtC6ktrace8Reporter_updateFormatter),  sel_stringFromTimeInterval_,  v7);
  if (result)
  {
    uint64_t v9 = result;
    sub_186C5AD2C();

    sub_186C5ADD4();
    swift_bridgeObjectRelease();
    sub_186C5ADD4();
    sub_186C5ADD4();
    return (id)v10[0];
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_186BFDFF4()
{
  return 0LL;
}

uint64_t sub_186BFDFFC(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t v7 = sub_186C5ABB8();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1895F8858](v7);
  uint64_t v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C6A2318);
  uint64_t v11 = swift_allocObject();
  *(_OWORD *)(v11 + 16) = xmmword_186C5E4F0;
  uint64_t v22 = 0LL;
  unint64_t v23 = 0xE000000000000000LL;
  sub_186C5ADD4();
  swift_bridgeObjectRelease();
  sub_186BFDECC();
  sub_186C5ADD4();
  swift_bridgeObjectRelease();
  uint64_t v12 = v22;
  unint64_t v13 = v23;
  *(void *)(v11 + 56) = MEMORY[0x189617FA8];
  *(void *)(v11 + 32) = v12;
  *(void *)(v11 + 40) = v13;
  swift_beginAccess();
  sub_186BFB7C8();
  sub_186C5B578();
  swift_endAccess();
  uint64_t result = swift_bridgeObjectRelease();
  if ((a3 & 1) != 0)
  {
    (*(void (**)(uint64_t))(*(void *)v3 + 176LL))(result);
    swift_bridgeObjectRetain_n();
    uint64_t v15 = (os_log_s *)sub_186C5ABA0();
    os_log_type_t v16 = sub_186C5AFCC();
    if (os_log_type_enabled(v15, v16))
    {
      uint64_t v20 = v7;
      char v17 = (uint8_t *)swift_slowAlloc();
      uint64_t v18 = swift_slowAlloc();
      uint64_t v22 = v18;
      *(_DWORD *)char v17 = 136446210;
      swift_bridgeObjectRetain();
      uint64_t v21 = sub_186BF7C38(a1, a2, &v22);
      sub_186C5B0EC();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_186BA3000, v15, v16, "%{public}s", v17, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x186E466F0](v18, -1LL, -1LL);
      MEMORY[0x186E466F0](v17, -1LL, -1LL);

      return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v20);
    }

    else
    {

      swift_bridgeObjectRelease_n();
      return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    }
  }

  return result;
}

uint64_t sub_186BFE2C4(uint64_t a1, unint64_t a2)
{
  uint64_t v5 = sub_186C5ABB8();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = MEMORY[0x1895F8858](v5);
  uint64_t v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(uint64_t))(*(void *)v2 + 176LL))(v7);
  swift_bridgeObjectRetain_n();
  uint64_t v10 = (os_log_s *)sub_186C5ABA0();
  os_log_type_t v11 = sub_186C5AFCC();
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v12 = swift_slowAlloc();
    uint64_t v18 = v5;
    uint64_t v13 = a1;
    int64_t v14 = (uint8_t *)v12;
    uint64_t v15 = swift_slowAlloc();
    uint64_t v20 = v15;
    *(_DWORD *)int64_t v14 = 136446210;
    swift_bridgeObjectRetain();
    uint64_t v19 = sub_186BF7C38(v13, a2, &v20);
    sub_186C5B0EC();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_186BA3000, v10, v11, "%{public}s", v14, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x186E466F0](v15, -1LL, -1LL);
    MEMORY[0x186E466F0](v14, -1LL, -1LL);

    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v18);
  }

  else
  {

    swift_bridgeObjectRelease_n();
    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  }

uint64_t sub_186BFE498(uint64_t a1, unint64_t a2)
{
  uint64_t v5 = sub_186C5ABB8();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1895F8858](v5);
  uint64_t v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C6A2318);
  uint64_t v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_186C5E4F0;
  id v10 = sub_186BFDECC();
  *(void *)(v9 + 56) = MEMORY[0x189617FA8];
  *(void *)(v9 + 32) = v10;
  *(void *)(v9 + 40) = v11;
  swift_beginAccess();
  sub_186BFB7C8();
  sub_186C5B578();
  swift_endAccess();
  uint64_t v12 = swift_bridgeObjectRelease();
  (*(void (**)(uint64_t))(*(void *)v2 + 176LL))(v12);
  swift_bridgeObjectRetain_n();
  uint64_t v13 = (os_log_s *)sub_186C5ABA0();
  os_log_type_t v14 = sub_186C5AFC0();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v15 = (uint8_t *)swift_slowAlloc();
    uint64_t v16 = swift_slowAlloc();
    uint64_t v20 = v5;
    uint64_t v17 = v16;
    v22[0] = v16;
    *(_DWORD *)uint64_t v15 = 136446210;
    swift_bridgeObjectRetain();
    uint64_t v21 = sub_186BF7C38(a1, a2, v22);
    sub_186C5B0EC();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_186BA3000, v13, v14, "%{public}s", v15, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x186E466F0](v17, -1LL, -1LL);
    MEMORY[0x186E466F0](v15, -1LL, -1LL);

    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v20);
  }

  else
  {

    swift_bridgeObjectRelease_n();
    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }

uint64_t sub_186BFE700()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 232LL))();
}

uint64_t sub_186BFE768()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_186BFE880()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC6ktrace8Reporter_creationDate;
  uint64_t v2 = sub_186C5AAF8();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(v1, v2);

  uint64_t v3 = v0 + OBJC_IVAR____TtC6ktrace8Reporter_logger;
  uint64_t v4 = sub_186C5ABB8();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8LL))(v3, v4);
  return swift_deallocClassInstance();
}

uint64_t sub_186BFE918(uint64_t result)
{
  if ((result & 0xF8) != 0) {
    return 8LL;
  }
  else {
    return result;
  }
}

unint64_t sub_186BFE92C()
{
  unint64_t result = qword_18C6A23C8;
  if (!qword_18C6A23C8)
  {
    unint64_t result = MEMORY[0x186E46630](&unk_186C5EA40, &type metadata for ANSIAttributes);
    atomic_store(result, (unint64_t *)&qword_18C6A23C8);
  }

  return result;
}

unint64_t sub_186BFE970()
{
  unint64_t result = qword_18C6A23D0;
  if (!qword_18C6A23D0)
  {
    unint64_t result = MEMORY[0x186E46630](MEMORY[0x18961A648], MEMORY[0x18961A610]);
    atomic_store(result, (unint64_t *)&qword_18C6A23D0);
  }

  return result;
}

uint64_t sub_186BFE9B4(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 16);
  if (!v1) {
    return 0LL;
  }
  uint64_t v2 = result;
  LODWORD(result) = 0;
  uint64_t v3 = (unsigned __int8 *)(v2 + 32);
  do
  {
    int v5 = *v3++;
    int v4 = v5;
    if ((v5 & ~(_DWORD)result) == 0) {
      int v4 = 0;
    }
    unint64_t result = v4 | result;
    --v1;
  }

  while (v1);
  return result;
}

uint64_t sub_186BFE9EC()
{
  return 0x6620676E69646968LL;
}

uint64_t type metadata accessor for Reporter()
{
  uint64_t result = qword_18C6A30D0;
  if (!qword_18C6A30D0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

unint64_t sub_186BFEA4C()
{
  unint64_t result = qword_18C6A23D8;
  if (!qword_18C6A23D8)
  {
    unint64_t result = MEMORY[0x186E46630](&unk_186C5EC80, &type metadata for ReporterError);
    atomic_store(result, (unint64_t *)&qword_18C6A23D8);
  }

  return result;
}

unint64_t sub_186BFEA94()
{
  unint64_t result = qword_18C6A23E0;
  if (!qword_18C6A23E0)
  {
    unint64_t result = MEMORY[0x186E46630](&unk_186C5E9A0, &type metadata for ANSIColor);
    atomic_store(result, (unint64_t *)&qword_18C6A23E0);
  }

  return result;
}

unint64_t sub_186BFEADC()
{
  unint64_t result = qword_18C6A23E8;
  if (!qword_18C6A23E8)
  {
    unint64_t result = MEMORY[0x186E46630](&unk_186C5EB40, &type metadata for ANSIAttributes);
    atomic_store(result, (unint64_t *)&qword_18C6A23E8);
  }

  return result;
}

unint64_t sub_186BFEB24()
{
  unint64_t result = qword_18C6A23F0;
  if (!qword_18C6A23F0)
  {
    unint64_t result = MEMORY[0x186E46630](&unk_186C5EA78, &type metadata for ANSIAttributes);
    atomic_store(result, (unint64_t *)&qword_18C6A23F0);
  }

  return result;
}

unint64_t sub_186BFEB6C()
{
  unint64_t result = qword_18C6A23F8;
  if (!qword_18C6A23F8)
  {
    unint64_t result = MEMORY[0x186E46630](&unk_186C5EB78, &type metadata for ANSIAttributes);
    atomic_store(result, (unint64_t *)&qword_18C6A23F8);
  }

  return result;
}

unint64_t sub_186BFEBB4()
{
  unint64_t result = qword_18C6A2400;
  if (!qword_18C6A2400)
  {
    unint64_t result = MEMORY[0x186E46630](&unk_186C5EBA0, &type metadata for ANSIAttributes);
    atomic_store(result, (unint64_t *)&qword_18C6A2400);
  }

  return result;
}

unint64_t sub_186BFEBFC()
{
  unint64_t result = qword_18C6A2408;
  if (!qword_18C6A2408)
  {
    unint64_t result = MEMORY[0x186E46630](&unk_186C5EBD0, &type metadata for ReporterError);
    atomic_store(result, (unint64_t *)&qword_18C6A2408);
  }

  return result;
}

uint64_t getEnumTagSinglePayload for ANSIColor(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xF9) {
    goto LABEL_17;
  }
  if (a2 + 7 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 7) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 7;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 7;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 7;
    }
  }

uint64_t storeEnumTagSinglePayload for ANSIColor(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 7 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 7) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xF9) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xF8) {
    return ((uint64_t (*)(void))((char *)&loc_186BFED20 + 4 * byte_186C5E98D[v4]))();
  }
  *a1 = a2 + 7;
  return ((uint64_t (*)(void))((char *)sub_186BFED54 + 4 * byte_186C5E988[v4]))();
}

uint64_t sub_186BFED54(uint64_t result)
{
  *(_BYTE *)(result + ktrace_session_set_default_event_names_enabled(global_session, 1) = v1;
  return result;
}

uint64_t sub_186BFED5C(uint64_t result, int a2)
{
  *(_WORD *)(result + ktrace_session_set_default_event_names_enabled(global_session, 1) = 0;
  if (a2) {
    JUMPOUT(0x186BFED64LL);
  }
  return result;
}

uint64_t sub_186BFED70(uint64_t result, int a2)
{
  *(_DWORD *)(result + ktrace_session_set_default_event_names_enabled(global_session, 1) = 0;
  if (!a2) {
    JUMPOUT(0x186BFED78LL);
  }
  *(_BYTE *)unint64_t result = a2 + 7;
  return result;
}

uint64_t sub_186BFED7C(uint64_t result)
{
  *(_DWORD *)(result + ktrace_session_set_default_event_names_enabled(global_session, 1) = v1;
  return result;
}

uint64_t sub_186BFED84(uint64_t result)
{
  *(_WORD *)(result + ktrace_session_set_default_event_names_enabled(global_session, 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ANSIColor()
{
  return &type metadata for ANSIColor;
}

ValueMetadata *type metadata accessor for ANSIAttributes()
{
  return &type metadata for ANSIAttributes;
}

uint64_t getEnumTagSinglePayload for ReporterError(unsigned int *a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  else {
    int v2 = 2;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4) {
    return *a1;
  }
  if (v3 == 2) {
    return *(unsigned __int16 *)a1;
  }
  return *(unsigned __int8 *)a1;
}

uint64_t storeEnumTagSinglePayload for ReporterError(uint64_t a1, int a2, int a3)
{
  else {
    int v3 = 2;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2) {
    return ((uint64_t (*)(void))((char *)sub_186BFEE44 + 4 * byte_186C5E992[v4]))();
  }
  else {
    return ((uint64_t (*)(void))((char *)sub_186BFEE64 + 4 * byte_186C5E997[v4]))();
  }
}

_BYTE *sub_186BFEE44(_BYTE *result, char a2)
{
  char *result = a2;
  return result;
}

_BYTE *sub_186BFEE64(_BYTE *result)
{
  char *result = 0;
  return result;
}

_DWORD *sub_186BFEE6C(_DWORD *result, int a2)
{
  char *result = a2;
  return result;
}

_WORD *sub_186BFEE74(_WORD *result, __int16 a2)
{
  char *result = a2;
  return result;
}

_WORD *sub_186BFEE7C(_WORD *result)
{
  char *result = 0;
  return result;
}

_DWORD *sub_186BFEE84(_DWORD *result)
{
  char *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for ReporterError()
{
  return &type metadata for ReporterError;
}

uint64_t sub_186BFEEA0()
{
  return type metadata accessor for Reporter();
}

uint64_t sub_186BFEEA8()
{
  uint64_t result = sub_186C5AAF8();
  if (v1 <= 0x3F)
  {
    uint64_t result = sub_186C5ABB8();
    if (v2 <= 0x3F)
    {
      uint64_t result = swift_updateClassMetadata2();
      if (!result) {
        return 0LL;
      }
    }
  }

  return result;
}

void sub_186BFEF5C(uint64_t a1, uint64_t a2, char a3)
{
  __asm { BR              X10 }

uint64_t sub_186BFEFB0()
{
  return v0;
}

void sub_186BFF14C()
{
}

char *sub_186BFF158()
{
  return aUnsafe;
}

uint64_t sub_186BFF164()
{
  return swift_retain();
}

uint64_t sub_186BFF16C(uint64_t result)
{
  if (result) {
    return swift_retain();
  }
  return result;
}

uint64_t sub_186BFF17C(uint64_t result)
{
  if (result) {
    return swift_release();
  }
  return result;
}

uint64_t sub_186BFF18C(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = a1;
  *(void *)(v5 + 24) = a2;
  unsigned int v6 = *(void **)(v2 + 128);
  swift_retain();
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    uint64_t result = (uint64_t)sub_186C01B1C(0LL, v6[2] + 1LL, 1, v6);
    unsigned int v6 = (void *)result;
  }

  unint64_t v9 = v6[2];
  unint64_t v8 = v6[3];
  if (v9 >= v8 >> 1)
  {
    uint64_t result = (uint64_t)sub_186C01B1C((void *)(v8 > 1), v9 + 1, 1, v6);
    unsigned int v6 = (void *)result;
  }

  int v6[2] = v9 + 1;
  id v10 = &v6[2 * v9];
  v10[4] = sub_186BFF27C;
  void v10[5] = v5;
  *(void *)(v2 + 12_Block_object_dispose(va, 8) = v6;
  return result;
}

uint64_t sub_186BFF258()
{
  return swift_deallocObject();
}

uint64_t sub_186BFF27C(void *a1)
{
  return (*(uint64_t (**)(void, void))(v1 + 16))(*a1, a1[1]);
}

uint64_t sub_186BFF2A4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, uint64_t a8, uint64_t a9)
{
  uint64_t v15 = *(void *)(v9 + 112);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    uint64_t result = (uint64_t)sub_186C01A0C(0LL, *(void *)(v15 + 16) + 1LL, 1, (char *)v15);
    uint64_t v15 = result;
  }

  unint64_t v18 = *(void *)(v15 + 16);
  unint64_t v17 = *(void *)(v15 + 24);
  if (v18 >= v17 >> 1)
  {
    uint64_t result = (uint64_t)sub_186C01A0C((char *)(v17 > 1), v18 + 1, 1, (char *)v15);
    uint64_t v15 = result;
  }

  *(void *)(v15 + 16) = v18 + 1;
  unint64_t v19 = v15 + 80 * v18;
  *(void *)(v19 + 32) = a1;
  *(void *)(v19 + 40) = a2;
  *(void *)(v19 + 4_Block_object_dispose(va, 8) = a5;
  *(void *)(v19 + 56) = a6;
  *(void *)(v19 + std::__hash_table<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>>>::~__hash_table((uint64_t)this + 64) = a3;
  *(void *)(v19 + 72) = a4;
  *(_BYTE *)(v19 + 80) = a7 & 1;
  *(void *)(v19 + 8_Block_object_dispose(va, 8) = a8;
  *(void *)(v19 + 96) = a9;
  *(_BYTE *)(v19 + 104) = 1;
  *(void *)(v9 + 112) = v15;
  return result;
}

uint64_t sub_186BFF3C4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, uint64_t a8, uint64_t a9)
{
  uint64_t v15 = *(void *)(v9 + 112);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    uint64_t result = (uint64_t)sub_186C01A0C(0LL, *(void *)(v15 + 16) + 1LL, 1, (char *)v15);
    uint64_t v15 = result;
  }

  unint64_t v18 = *(void *)(v15 + 16);
  unint64_t v17 = *(void *)(v15 + 24);
  if (v18 >= v17 >> 1)
  {
    uint64_t result = (uint64_t)sub_186C01A0C((char *)(v17 > 1), v18 + 1, 1, (char *)v15);
    uint64_t v15 = result;
  }

  *(void *)(v15 + 16) = v18 + 1;
  unint64_t v19 = v15 + 80 * v18;
  *(void *)(v19 + 32) = a1;
  *(void *)(v19 + 40) = a2;
  *(void *)(v19 + 4_Block_object_dispose(va, 8) = a5;
  *(void *)(v19 + 56) = a6;
  *(void *)(v19 + std::__hash_table<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>>>::~__hash_table((uint64_t)this + 64) = a3;
  *(void *)(v19 + 72) = a4;
  *(_BYTE *)(v19 + 80) = a7 & 1;
  *(void *)(v19 + 8_Block_object_dispose(va, 8) = a8;
  *(void *)(v19 + 96) = a9;
  *(_BYTE *)(v19 + 104) = 0;
  *(void *)(v9 + 112) = v15;
  return result;
}

uint64_t sub_186BFF4E0(char a1)
{
  __int128 v74 = *v1;
  __int128 v72 = v74;
  sub_186BFA45C((uint64_t)&v74);
  sub_186C5ADD4();
  swift_bridgeObjectRetain();
  sub_186C5ADD4();
  swift_bridgeObjectRelease();
  uint64_t v60 = *((void *)&v72 + 1);
  uint64_t v2 = v72;
  unint64_t v61 = v1;
  int v3 = (void (*)(uint64_t))*((void *)v1 + 2);
  if (v3)
  {
    uint64_t v4 = swift_retain();
    v3(v4);
    sub_186C5ADD4();
    swift_bridgeObjectRelease();
    sub_186C5ADD4();
    sub_186BFF17C((uint64_t)v3);
    swift_bridgeObjectRelease();
    uint64_t v60 = *((void *)&v72 + 1);
    uint64_t v2 = v72;
  }

  __swift_instantiateConcreteTypeFromMangledName(&qword_18C6A21C0);
  uint64_t v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_186C5E4F0;
  *(void *)(v5 + 32) = v2;
  *(void *)(v5 + 40) = v60;
  uint64_t v71 = v5;
  uint64_t v6 = *((void *)v1 + 14);
  uint64_t v73 = v6;
  uint64_t v7 = *(void *)(v6 + 16);
  uint64_t v62 = v7;
  if (v7)
  {
    swift_bridgeObjectRetain();
    sub_186BFA348((uint64_t)&v73);
    unint64_t v8 = (_BYTE *)(v6 + 104);
    uint64_t v9 = (void *)MEMORY[0x18961AFE8];
    do
    {
      if ((*(v8 - 24) & 1) == 0)
      {
        uint64_t v13 = *((void *)v8 - 8);
        uint64_t v64 = *((void *)v8 - 7);
        uint64_t v65 = *((void *)v8 - 9);
        uint64_t v14 = *((void *)v8 - 4);
        uint64_t v15 = *((void *)v8 - 2);
        uint64_t v16 = *((void *)v8 - 1);
        char v17 = *v8;
        __int128 v67 = *((_OWORD *)v8 - 3);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        sub_186BFF164();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          sub_186C01E74(0LL, v9[2] + 1LL, 1);
        }
        unint64_t v11 = v9[2];
        unint64_t v10 = v9[3];
        if (v11 >= v10 >> 1) {
          sub_186C01E74((char *)(v10 > 1), v11 + 1, 1);
        }
        void v9[2] = v11 + 1;
        uint64_t v12 = &v9[10 * v11];
        v12[4] = v65;
        void v12[5] = v13;
        _OWORD v12[6] = v64;
        *(_OWORD *)(v12 + 7) = v67;
        void v12[9] = v14;
        *((_BYTE *)v12 + 80) = 0;
        v12[11] = v15;
        v12[12] = v16;
        *((_BYTE *)v12 + 104) = v17;
      }

      v8 += 80;
      --v7;
    }

    while (v7);
    sub_186BFA370((uint64_t)&v73);
    int64_t v18 = v9[2];
    if (v18) {
      goto LABEL_13;
    }
LABEL_21:
    swift_release();
    uint64_t v19 = MEMORY[0x18961AFE8];
    goto LABEL_22;
  }

  swift_bridgeObjectRetain();
  uint64_t v9 = (void *)MEMORY[0x18961AFE8];
  int64_t v18 = *(void *)(MEMORY[0x18961AFE8] + 16LL);
  if (!v18) {
    goto LABEL_21;
  }
LABEL_13:
  uint64_t v69 = MEMORY[0x18961AFE8];
  sub_186BEF8C8(0LL, v18, 0);
  uint64_t v19 = v69;
  uint64_t v20 = v9 + 7;
  do
  {
    uint64_t v21 = *v20;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain_n();
    sub_186BFF164();
    sub_186C5ADD4();
    swift_bridgeObjectRelease();
    if (v21)
    {
      sub_186C5ADD4();
      sub_186C5ADD4();
      swift_bridgeObjectRelease();
    }

    swift_bridgeObjectRetain();
    sub_186C5ADD4();
    swift_bridgeObjectRelease();
    sub_186C5ADD4();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_186C01E90();
    unint64_t v23 = *(void *)(v69 + 16);
    unint64_t v22 = *(void *)(v69 + 24);
    if (v23 >= v22 >> 1) {
      sub_186BEF8C8((char *)(v22 > 1), v23 + 1, 1);
    }
    *(void *)(v69 + 16) = v23 + 1;
    unint64_t v24 = v69 + 16 * v23;
    *(void *)(v24 + 32) = 11565LL;
    *(void *)(v24 + 40) = 0xE200000000000000LL;
    v20 += 10;
    --v18;
  }

  while (v18);
  swift_release();
LABEL_22:
  uint64_t v25 = sub_186C29CE8(v19, 58LL, 0xE100000000000000LL);
  swift_bridgeObjectRelease();
  sub_186BFFE74(v25);
  uint64_t v26 = v62;
  if ((a1 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_48;
  }

  uint64_t v27 = MEMORY[0x18961AFE8];
  if (v62)
  {
    uint64_t v28 = (_BYTE *)(swift_bridgeObjectRetain() + 104);
    int64_t v29 = (void *)MEMORY[0x18961AFE8];
    do
    {
      if (*(v28 - 24) == 1)
      {
        uint64_t v63 = v26;
        uint64_t v34 = *((void *)v28 - 9);
        uint64_t v33 = *((void *)v28 - 8);
        uint64_t v66 = *((void *)v28 - 7);
        uint64_t v35 = *((void *)v28 - 4);
        uint64_t v36 = *((void *)v28 - 2);
        uint64_t v37 = *((void *)v28 - 1);
        char v38 = *v28;
        __int128 v68 = *((_OWORD *)v28 - 3);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        sub_186BFF164();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          sub_186C01E74(0LL, v29[2] + 1LL, 1);
        }
        unint64_t v31 = v29[2];
        unint64_t v30 = v29[3];
        if (v31 >= v30 >> 1) {
          sub_186C01E74((char *)(v30 > 1), v31 + 1, 1);
        }
        v29[2] = v31 + 1;
        int64_t v32 = &v29[10 * v31];
        v32[4] = v34;
        void v32[5] = v33;
        v32[6] = v66;
        *(_OWORD *)(v32 + 7) = v68;
        v32[9] = v35;
        *((_BYTE *)v32 + 80) = 1;
        v32[11] = v36;
        v32[12] = v37;
        *((_BYTE *)v32 + 104) = v38;
        uint64_t v26 = v63;
      }

      v28 += 80;
      --v26;
    }

    while (v26);
    sub_186BFA370((uint64_t)&v73);
    uint64_t v27 = MEMORY[0x18961AFE8];
    int64_t v39 = v29[2];
    if (v39) {
      goto LABEL_34;
    }
  }

  else
  {
    int64_t v29 = (void *)MEMORY[0x18961AFE8];
    int64_t v39 = *(void *)(MEMORY[0x18961AFE8] + 16LL);
    if (v39)
    {
LABEL_34:
      uint64_t v70 = v27;
      sub_186BEF8C8(0LL, v39, 0);
      uint64_t v40 = v70;
      uint64_t v41 = v29 + 7;
      do
      {
        uint64_t v42 = *v41;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain_n();
        sub_186BFF164();
        sub_186C5ADD4();
        swift_bridgeObjectRelease();
        if (v42)
        {
          sub_186C5ADD4();
          sub_186C5ADD4();
          swift_bridgeObjectRelease();
        }

        swift_bridgeObjectRetain();
        sub_186C5ADD4();
        swift_bridgeObjectRelease();
        sub_186C5ADD4();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_186C01E90();
        unint64_t v44 = *(void *)(v70 + 16);
        unint64_t v43 = *(void *)(v70 + 24);
        if (v44 >= v43 >> 1) {
          sub_186BEF8C8((char *)(v43 > 1), v44 + 1, 1);
        }
        *(void *)(v70 + 16) = v44 + 1;
        unint64_t v45 = v70 + 16 * v44;
        *(void *)(v45 + 32) = 11565LL;
        *(void *)(v45 + 40) = 0xE200000000000000LL;
        v41 += 10;
        --v39;
      }

      while (v39);
      swift_release();
      swift_bridgeObjectRelease();
      goto LABEL_43;
    }
  }

  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v40 = MEMORY[0x18961AFE8];
LABEL_43:
  swift_bridgeObjectRetain();
  sub_186C5ADD4();
  swift_bridgeObjectRelease();
  uint64_t v46 = (char *)v71;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v46 = sub_186C01C3C(0LL, *(void *)(v71 + 16) + 1LL, 1, (char *)v71);
  }
  unint64_t v48 = *((void *)v46 + 2);
  unint64_t v47 = *((void *)v46 + 3);
  if (v48 >= v47 >> 1) {
    uint64_t v46 = sub_186C01C3C((char *)(v47 > 1), v48 + 1, 1, v46);
  }
  *((void *)v46 + 2) = v48 + 1;
  uint64_t v49 = &v46[16 * v48];
  *((void *)v49 + 4) = 0x202020200ALL;
  *((void *)v49 + 5) = 0xE500000000000000LL;
  uint64_t v71 = (uint64_t)v46;
  uint64_t v50 = sub_186C29CE8(v40, 58LL, 0xE100000000000000LL);
  swift_bridgeObjectRelease();
  sub_186BFFE74(v50);
LABEL_48:
  uint64_t v51 = *((void *)v61 + 7);
  __int128 v52 = (char *)v71;
  if (v51)
  {
    uint64_t v53 = *((void *)v61 + 6);
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      __int128 v52 = sub_186C01C3C(0LL, *(void *)(v71 + 16) + 1LL, 1, (char *)v71);
    }
    unint64_t v55 = *((void *)v52 + 2);
    unint64_t v54 = *((void *)v52 + 3);
    if (v55 >= v54 >> 1) {
      __int128 v52 = sub_186C01C3C((char *)(v54 > 1), v55 + 1, 1, v52);
    }
    *((void *)v52 + 2) = v55 + 1;
    uint64_t v56 = &v52[16 * v55];
    *((void *)v56 + 4) = v53;
    *((void *)v56 + 5) = v51;
  }

  __swift_instantiateConcreteTypeFromMangledName(&qword_18C6A21A8);
  sub_186BF0620();
  uint64_t v57 = sub_186C5ACD8();
  swift_bridgeObjectRelease();
  return v57;
}

uint64_t sub_186BFFE74(uint64_t result)
{
  uint64_t v2 = *(void *)(result + 16);
  uint64_t v3 = *v1;
  int64_t v4 = *(void *)(*v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }

  uint64_t v6 = result;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)result && v5 <= *(void *)(v3 + 24) >> 1)
  {
    if (*(void *)(v6 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_13;
  }

  if (v4 <= v5) {
    int64_t v10 = v4 + v2;
  }
  else {
    int64_t v10 = v4;
  }
  uint64_t result = (uint64_t)sub_186C01C3C((char *)result, v10, 1, (char *)v3);
  uint64_t v3 = result;
  if (!*(void *)(v6 + 16))
  {
LABEL_13:
    if (!v2) {
      goto LABEL_14;
    }
    goto LABEL_16;
  }

uint64_t sub_186BFFF5C(uint64_t a1, unint64_t a2)
{
  uint64_t v6 = *v2;
  unint64_t v7 = *((void *)*v2 + 2);
  char isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native();
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || (unint64_t v9 = *((void *)v6 + 3) >> 1, v9 < v7))
  {
    uint64_t v6 = sub_186C01C3C(isUniquelyReferenced_nonNull_native, v7, 1, v6);
    unint64_t v9 = *((void *)v6 + 3) >> 1;
  }

  uint64_t v10 = *((void *)v6 + 2);
  unint64_t v11 = (void *)(v9 - v10);
  unint64_t v12 = (unint64_t)sub_186C021C8(&v33, &v6[16 * v10 + 32], v9 - v10, a1, a2);
  if ((v12 & 0x8000000000000000LL) != 0)
  {
    __break(1u);
  }

  else
  {
    if (v12)
    {
      uint64_t v13 = *((void *)v6 + 2);
      BOOL v14 = __OFADD__(v13, v12);
      uint64_t v15 = (char *)(v13 + v12);
      if (v14)
      {
        __break(1u);
        goto LABEL_28;
      }

      *((void *)v6 + 2) = v15;
    }

    if ((void *)v12 != v11)
    {
LABEL_9:
      uint64_t result = swift_bridgeObjectRelease();
      *uint64_t v2 = v6;
      return result;
    }
  }

  uint64_t v17 = v33;
  unint64_t v18 = v34;
  if (v34 == *(void *)(v33 + 16)) {
    goto LABEL_9;
  }
  int64_t v19 = *((void *)v6 + 2);
  uint64_t v20 = sub_186C020FC((uint64_t (*)())v32, v34, v33);
  uint64_t v23 = *v21;
  uint64_t v22 = v21[1];
  swift_bridgeObjectRetain();
  ((void (*)(_BYTE *, void))v20)(v32, 0LL);
  BOOL v14 = __OFADD__(v18, 1LL);
  unint64_t v24 = v18 + 1;
  if (v14)
  {
    __break(1u);
    goto LABEL_15;
  }

void *sub_186C00170(void *result)
{
  uint64_t v2 = result[2];
  int64_t v3 = *(void **)v1;
  int64_t v4 = *(void *)(*(void *)v1 + 16LL);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }

  uint64_t v6 = result;
  uint64_t result = (void *)swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)result && v5 <= v3[3] >> 1)
  {
    if (v6[2]) {
      goto LABEL_5;
    }
    goto LABEL_13;
  }

  if (v4 <= v5) {
    int64_t v10 = v4 + v2;
  }
  else {
    int64_t v10 = v4;
  }
  uint64_t result = sub_186C01D3C(result, v10, 1, v3);
  int64_t v3 = result;
  if (!v6[2])
  {
LABEL_13:
    if (!v2) {
      goto LABEL_14;
    }
    goto LABEL_16;
  }

unint64_t sub_186C0026C(uint64_t a1)
{
  uint64_t v3 = v2;
  int64_t v4 = (void *)MEMORY[0x18961AFE8];
  v212 = (void *)MEMORY[0x18961AFE8];
  uint64_t v213 = MEMORY[0x18961AFE8];
  unint64_t v5 = *(void *)(a1 + 16);
  if (!v5)
  {
    swift_bridgeObjectRetain();
    uint64_t v184 = 0LL;
    uint64_t v185 = 0LL;
    LOBYTE(v_Block_object_dispose(va, 8) = -1;
    uint64_t v180 = (uint64_t)v4;
    v167 = (char *)v4;
    goto LABEL_81;
  }

  uint64_t v186 = *(void *)(v1 + 112);
  uint64_t v174 = a1 + 32;
  unint64_t result = swift_bridgeObjectRetain();
  uint64_t v184 = 0LL;
  uint64_t v185 = 0LL;
  unint64_t v7 = 0LL;
  int v8 = 255;
  v167 = (char *)v4;
  uint64_t v180 = (uint64_t)v4;
  unint64_t v173 = v5;
  while (1)
  {
    if (v7 >= v5)
    {
      __break(1u);
LABEL_164:
      __break(1u);
LABEL_165:
      __break(1u);
LABEL_166:
      __break(1u);
LABEL_167:
      __break(1u);
LABEL_168:
      __break(1u);
      return result;
    }

    int v187 = v8;
    uint64_t v9 = (uint64_t *)(v174 + 16 * v7);
    uint64_t v10 = *v9;
    unint64_t v11 = v9[1];
    unint64_t v181 = v7 + 1;
    BOOL v12 = *v9 == 11565 && v11 == 0xE200000000000000LL;
    if (v12 || (sub_186C5B4F4() & 1) != 0)
    {
      uint64_t v115 = swift_bridgeObjectRetain();
      sub_186BFFF5C(v115, v181);
      LOBYTE(v_Block_object_dispose(va, 8) = v187;
      goto LABEL_81;
    }

    swift_bridgeObjectRetain();
    if ((sub_186C5AE4C() & 1) == 0)
    {
      if ((sub_186C5AE4C() & 1) == 0)
      {
        unint64_t result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          unint64_t result = (unint64_t)sub_186C01C3C(0LL, *(void *)(v180 + 16) + 1LL, 1, (char *)v180);
          uint64_t v180 = result;
        }

        unint64_t v32 = *(void *)(v180 + 16);
        unint64_t v31 = *(void *)(v180 + 24);
        int v8 = v187;
        if (v32 >= v31 >> 1)
        {
          unint64_t result = (unint64_t)sub_186C01C3C((char *)(v31 > 1), v32 + 1, 1, (char *)v180);
          uint64_t v180 = result;
          int v8 = v187;
        }

        *(void *)(v180 + 16) = v32 + 1;
        uint64_t v33 = v180 + 16 * v32;
        *(void *)(v33 + 32) = v10;
        *(void *)(v33 + 40) = v11;
        goto LABEL_5;
      }

      swift_bridgeObjectRetain();
      unint64_t v27 = sub_186C027D4(1uLL, v10, v11);
      unint64_t v29 = v28;
      swift_bridgeObjectRelease();
      unint64_t v192 = v29 >> 14;
      if (v29 >> 14 == v27 >> 14)
      {
        swift_bridgeObjectRelease();
        uint64_t v30 = 0LL;
        uint64_t v183 = 0LL;
        v191 = (char *)MEMORY[0x18961AFE8];
        goto LABEL_59;
      }

      uint64_t v175 = v10;
      v177 = v4;
      unint64_t v169 = v7;
      unint64_t v171 = v11;
      v191 = (char *)MEMORY[0x18961AFE8];
      do
      {
        uint64_t v61 = sub_186C5B0BC();
        uint64_t v63 = v62;
        swift_bridgeObjectRetain();
        unint64_t v64 = sub_186C5B0A4();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        uint64_t v65 = v3;
        uint64_t v66 = sub_186C0251C(v186, v61, v63);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (*(void *)(v66 + 16))
        {
          uint64_t v67 = *(void *)(v66 + 40);
          uint64_t v68 = *(void *)(v66 + 56);
          uint64_t v205 = *(void *)(v66 + 48);
          uint64_t v207 = *(void *)(v66 + 32);
          uint64_t v69 = *(void *)(v66 + 72);
          uint64_t v202 = *(void *)(v66 + 64);
          char v199 = *(_BYTE *)(v66 + 80);
          uint64_t v71 = *(void *)(v66 + 88);
          uint64_t v70 = *(void *)(v66 + 96);
          char v72 = *(_BYTE *)(v66 + 104);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          sub_186BFF164();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          sub_186BFF164();
          uint64_t v73 = v191;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v73 = sub_186C01A0C(0LL, *((void *)v191 + 2) + 1LL, 1, v191);
          }
          unint64_t v75 = *((void *)v73 + 2);
          unint64_t v74 = *((void *)v73 + 3);
          char v76 = v73;
          if (v75 >= v74 >> 1) {
            char v76 = sub_186C01A0C((char *)(v74 > 1), v75 + 1, 1, v73);
          }
          *((void *)v76 + 2) = v75 + 1;
          uint64_t v60 = v76;
          uint64_t v77 = &v76[80 * v75];
          *((void *)v77 + 4) = v207;
          *((void *)v77 + 5) = v67;
          *((void *)v77 + 6) = v205;
          *((void *)v77 + 7) = v68;
          *((void *)v77 + _Block_object_dispose(va, 8) = v202;
          *((void *)v77 + 9) = v69;
          v77[80] = v199;
          *((void *)v77 + 1ktrace_session_set_default_event_names_enabled(global_session, 1) = v71;
          *((void *)v77 + 12) = v70;
          v77[104] = v72;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          sub_186C01E90();
          uint64_t v3 = v65;
        }

        else
        {
          swift_bridgeObjectRelease();
          sub_186C02158(v184, v185, v187);
          int v187 = 1;
          uint64_t v184 = v61;
          uint64_t v185 = v63;
          uint64_t v60 = v191;
        }

        v191 = v60;
      }

      while (v192 != v64 >> 14);
      swift_bridgeObjectRelease();
      uint64_t v30 = 0LL;
      uint64_t v183 = 0LL;
      goto LABEL_53;
    }

    unint64_t v169 = v7;
    v177 = v4;
    uint64_t v13 = v3;
    unint64_t v14 = sub_186C018DC(61LL, 0xE100000000000000LL, v10, v11);
    char v16 = v15;
    swift_bridgeObjectRetain();
    uint64_t v175 = v10;
    unint64_t v17 = sub_186C027D4(2uLL, v10, v11);
    uint64_t v19 = v18;
    uint64_t v21 = v20;
    uint64_t v23 = v22;
    unint64_t result = swift_bridgeObjectRelease();
    unint64_t v24 = v14;
    if ((v16 & 1) != 0)
    {
      uint64_t v25 = HIBYTE(v11) & 0xF;
      if ((v11 & 0x2000000000000000LL) == 0) {
        uint64_t v25 = v175;
      }
      uint64_t v26 = v25 << 16;
      if ((v11 & 0x1000000000000000LL) == 0 || (v175 & 0x800000000000000LL) != 0) {
        unint64_t v24 = v26 | 7;
      }
      else {
        unint64_t v24 = v26 | 0xB;
      }
    }

    if (v24 >> 14 < v17 >> 14) {
      goto LABEL_165;
    }
    char v206 = v16;
    unint64_t v194 = v14;
    unint64_t v171 = v11;
    unint64_t v34 = sub_186C5B0D4();
    unint64_t v36 = v35;
    uint64_t v38 = v37;
    unint64_t v40 = v39;
    uint64_t v41 = swift_bridgeObjectRetain();
    uint64_t v42 = sub_186C02308(v41, v34, v36, v38, v40);
    uint64_t v189 = v13;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (!*(void *)(v42 + 16))
    {
      swift_bridgeObjectRelease();
      if (v161[10])
      {
        swift_bridgeObjectRelease();
        uint64_t v54 = MEMORY[0x186E4477C](v17, v19, v21, v23);
        uint64_t v56 = v55;
        swift_bridgeObjectRelease();
        unint64_t result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          unint64_t result = (unint64_t)sub_186C01C3C(0LL, *((void *)v167 + 2) + 1LL, 1, v167);
          v167 = (char *)result;
        }

        uint64_t v3 = v13;
        unint64_t v58 = *((void *)v167 + 2);
        unint64_t v57 = *((void *)v167 + 3);
        int v8 = v187;
        if (v58 >= v57 >> 1)
        {
          unint64_t result = (unint64_t)sub_186C01C3C((char *)(v57 > 1), v58 + 1, 1, v167);
          v167 = (char *)result;
          int v8 = v187;
        }

        *((void *)v167 + 2) = v58 + 1;
        uint64_t v59 = &v167[16 * v58];
        *((void *)v59 + 4) = v54;
        *((void *)v59 + 5) = v56;
      }

      else
      {
        swift_bridgeObjectRelease();
        unint64_t result = sub_186C02158(v184, v185, v187);
        int v8 = 0;
        uint64_t v184 = v175;
        uint64_t v185 = v171;
        uint64_t v3 = v13;
      }

      int64_t v4 = v177;
      goto LABEL_5;
    }

    uint64_t v43 = *(void *)(v42 + 40);
    uint64_t v44 = *(void *)(v42 + 56);
    uint64_t v198 = *(void *)(v42 + 48);
    uint64_t v202 = *(void *)(v42 + 32);
    uint64_t v46 = *(void *)(v42 + 64);
    uint64_t v45 = *(void *)(v42 + 72);
    char v196 = *(_BYTE *)(v42 + 80);
    uint64_t v48 = *(void *)(v42 + 88);
    uint64_t v47 = *(void *)(v42 + 96);
    char v49 = *(_BYTE *)(v42 + 104);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_186BFF164();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v205 = v43;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_186BFF164();
    uint64_t v50 = sub_186C01A0C(0LL, 1LL, 1, MEMORY[0x18961AFE8]);
    unint64_t v52 = *((void *)v50 + 2);
    unint64_t v51 = *((void *)v50 + 3);
    if (v52 >= v51 >> 1) {
      uint64_t v50 = sub_186C01A0C((char *)(v51 > 1), v52 + 1, 1, v50);
    }
    *((void *)v50 + 2) = v52 + 1;
    uint64_t v53 = &v50[80 * v52];
    *((void *)v53 + 4) = v202;
    *((void *)v53 + 5) = v43;
    *((void *)v53 + 6) = v198;
    *((void *)v53 + 7) = v44;
    *((void *)v53 + _Block_object_dispose(va, 8) = v46;
    *((void *)v53 + 9) = v45;
    v53[80] = v196;
    *((void *)v53 + 1ktrace_session_set_default_event_names_enabled(global_session, 1) = v48;
    *((void *)v53 + 12) = v47;
    v53[104] = v49;
    v191 = v50;
    if ((v206 & 1) != 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_186C01E90();
      uint64_t v30 = 0LL;
      uint64_t v183 = 0LL;
      uint64_t v3 = v189;
LABEL_53:
      uint64_t v10 = v175;
      int64_t v4 = v177;
      unint64_t v11 = v171;
      unint64_t v5 = v173;
      unint64_t v7 = v169;
      goto LABEL_59;
    }

    unint64_t v11 = v171;
    uint64_t v10 = v175;
    if ((v49 & 1) != 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_186C01E90();
      uint64_t v30 = 0LL;
      uint64_t v183 = 0LL;
      uint64_t v3 = v189;
      int64_t v4 = v177;
      unint64_t v5 = v173;
      unint64_t v7 = v169;
    }

    else
    {
      swift_bridgeObjectRetain();
      sub_186C02870(v194, v175, v171);
      unint64_t v79 = v78;
      swift_bridgeObjectRelease();
      unint64_t result = sub_186C5B0B0();
      if ((v80 & 1) != 0) {
        unint64_t result = v79;
      }
      if (v79 >> 14 < result >> 14) {
        goto LABEL_167;
      }
      uint64_t v81 = sub_186C5B0D4();
      uint64_t v83 = v82;
      uint64_t v85 = v84;
      uint64_t v87 = v86;
      swift_bridgeObjectRelease();
      uint64_t v88 = MEMORY[0x186E4477C](v81, v83, v85, v87);
      uint64_t v90 = v89;
      swift_bridgeObjectRelease();
      uint64_t v91 = v88;
      uint64_t v183 = v90;
      if (!sub_186C5ADB0()) {
        goto LABEL_155;
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_186C01E90();
      uint64_t v3 = v189;
      uint64_t v10 = v175;
      int64_t v4 = v177;
      unint64_t v5 = v173;
      unint64_t v7 = v169;
      uint64_t v30 = v91;
    }

LABEL_59:
    uint64_t v92 = *((void *)v191 + 2);
    if (!v92)
    {
      sub_186C02158(v184, v185, v187);
      swift_bridgeObjectRelease();
      unint64_t result = swift_bridgeObjectRelease();
      int v8 = 3;
      uint64_t v184 = v10;
      uint64_t v185 = v11;
      goto LABEL_6;
    }

    uint64_t v168 = v30;
    uint64_t v93 = &v191[80 * v92];
    uint64_t v94 = *((void *)v93 - 5);
    uint64_t v165 = *((void *)v93 - 4);
    uint64_t v166 = *((void *)v93 - 6);
    uint64_t v95 = *((void *)v93 - 1);
    uint64_t v164 = *((void *)v93 - 2);
    char v163 = *v93;
    uint64_t v96 = *((void *)v93 + 1);
    uint64_t v97 = *((void *)v93 + 2);
    char v98 = v93[24];
    uint64_t v176 = *((void *)v93 - 3);
    swift_bridgeObjectRetain();
    uint64_t v172 = v95;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v182 = v96;
    uint64_t v178 = v97;
    sub_186BFF164();
    unint64_t result = swift_bridgeObjectRelease();
    char v170 = v98;
    if ((v98 & 1) == 0 && !v183) {
      break;
    }
LABEL_65:
    uint64_t v162 = v94;
    uint64_t v190 = v3;
    unint64_t v99 = *((void *)v191 + 2);
    int64_t v100 = v99 - 1;
    if (v99 <= 1)
    {
      swift_bridgeObjectRelease();
      uint64_t v101 = (void *)MEMORY[0x18961AFE8];
      goto LABEL_74;
    }

    v211 = (void *)MEMORY[0x18961AFE8];
    swift_bridgeObjectRetain();
    sub_186C01E98(0LL, v100, 0);
    uint64_t v101 = v211;
    uint64_t v102 = v191 + 56;
    do
    {
      if (!v100)
      {
        __break(1u);
LABEL_155:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_186C02158(v184, v185, v187);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_186C02184();
        swift_allocError();
        *(void *)uint64_t v158 = v202;
        *(void *)(v158 + _Block_object_dispose(va, 8) = v205;
        *(_BYTE *)(v158 + 16) = 2;
        swift_bridgeObjectRetain();
        swift_willThrow();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
LABEL_157:
        sub_186C01E90();
        return swift_bridgeObjectRelease();
      }

      uint64_t v103 = *((void *)v102 - 2);
      uint64_t v197 = *((void *)v102 - 1);
      uint64_t v200 = *((void *)v102 - 3);
      uint64_t v104 = *((void *)v102 + 2);
      uint64_t v195 = *((void *)v102 + 1);
      char v193 = v102[24];
      uint64_t v105 = *((void *)v102 + 4);
      uint64_t v106 = *((void *)v102 + 5);
      char v107 = v102[48];
      uint64_t v208 = *(void *)v102;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v202 = v106;
      uint64_t v205 = v105;
      sub_186BFF164();
      v211 = v101;
      unint64_t v109 = v101[2];
      unint64_t v108 = v101[3];
      if (v109 >= v108 >> 1)
      {
        sub_186C01E98((void *)(v108 > 1), v109 + 1, 1);
        uint64_t v101 = v211;
      }

      _OWORD v101[2] = v109 + 1;
      uint64_t v110 = &v101[12 * v109];
      v110[4] = v200;
      v110[5] = v103;
      v110[6] = v197;
      v110[7] = v208;
      v110[8] = v195;
      v110[9] = v104;
      *((_BYTE *)v110 + 80) = v193;
      v110[11] = v105;
      v110[12] = v106;
      *((_BYTE *)v110 + 104) = v107;
      v102 += 80;
      v110[14] = 0LL;
      v110[15] = 0LL;
      --v100;
    }

    while (v100);
    swift_bridgeObjectRelease_n();
LABEL_74:
    sub_186C00170(v101);
    int64_t v4 = v212;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_186BFF164();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      int64_t v4 = sub_186C01D3C(0LL, v212[2] + 1LL, 1, v212);
    }
    uint64_t v3 = v190;
    unint64_t v112 = v4[2];
    unint64_t v111 = v4[3];
    uint64_t v113 = v168;
    if (v112 >= v111 >> 1)
    {
      int64_t v4 = sub_186C01D3C((void *)(v111 > 1), v112 + 1, 1, v4);
      uint64_t v113 = v168;
    }

    int v4[2] = v112 + 1;
    uint64_t v114 = &v4[12 * v112];
    v114[4] = v166;
    v114[5] = v162;
    v114[6] = v165;
    v114[7] = v176;
    v114[8] = v164;
    v114[9] = v172;
    *((_BYTE *)v114 + 80) = v163;
    v114[11] = v182;
    v114[12] = v178;
    *((_BYTE *)v114 + 104) = v170;
    v114[14] = v113;
    v114[15] = v183;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    unint64_t result = sub_186C01E90();
    v212 = v4;
    int v8 = v187;
LABEL_5:
    unint64_t v5 = v173;
LABEL_6:
    unint64_t v7 = v181;
    if (v181 == v5) {
      goto LABEL_81;
    }
  }

  if (v181 != v5)
  {
    if (v181 >= v5) {
      goto LABEL_166;
    }
    uint64_t v168 = *(void *)(v174 + 16 * v181);
    uint64_t v183 = *(void *)(v174 + 16 * v181 + 8);
    swift_bridgeObjectRetain();
    unint64_t v181 = v7 + 2;
    goto LABEL_65;
  }

  sub_186C02158(v184, v185, v187);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_186C01E90();
  LOBYTE(v_Block_object_dispose(va, 8) = 2;
  uint64_t v184 = v166;
  uint64_t v185 = v94;
LABEL_81:
  unsigned __int8 v188 = v8;
  uint64_t v116 = v4[2];
  if (v116)
  {
    swift_bridgeObjectRetain();
    swift_beginAccess();
    uint64_t v117 = v4 + 5;
    while (1)
    {
      BOOL v118 = *(v117 - 1) == *(void *)aUnsafe && *v117 == unk_18C6A2418;
      if (v118 || (sub_186C5B4F4() & 1) != 0) {
        break;
      }
      v117 += 12;
      if (!--v116)
      {
        int v209 = 0;
        goto LABEL_91;
      }
    }

    int v209 = 1;
LABEL_91:
    swift_bridgeObjectRelease();
  }

  else
  {
    int v209 = 0;
  }

  uint64_t v119 = v3;
  uint64_t v120 = v161[16];
  uint64_t v214 = v120;
  uint64_t v121 = *(void *)(v120 + 16);
  if (v121)
  {
    v179 = v4;
    unint64_t v122 = *(void *)(v180 + 16);
    swift_bridgeObjectRetain();
    unint64_t result = sub_186BFA348((uint64_t)&v214);
    unint64_t v123 = 0LL;
    uint64_t v124 = v120 + 40;
    while (1)
    {
      __int128 v125 = *(void (**)(void *))(v124 - 8);
      if (v123 == v122)
      {
        uint64_t v126 = 0LL;
        uint64_t v127 = 0LL;
        unint64_t v123 = v122;
      }

      else
      {
        if (v123 >= *(void *)(v180 + 16)) {
          goto LABEL_164;
        }
        unint64_t v128 = v123++;
        v129 = (uint64_t *)(v180 + 32 + 16 * v128);
        uint64_t v126 = *v129;
        uint64_t v127 = v129[1];
        swift_bridgeObjectRetain();
      }

      v210[0] = v126;
      v210[1] = v127;
      swift_retain();
      v125(v210);
      if (v3) {
        break;
      }
      swift_release();
      unint64_t result = swift_bridgeObjectRelease();
      v124 += 16LL;
      if (!--v121)
      {
        sub_186BFA370((uint64_t)&v214);
        int64_t v4 = v179;
        uint64_t v130 = v179[2];
        if (!v130) {
          goto LABEL_102;
        }
LABEL_104:
        v132 = v4 + 5;
        uint64_t v133 = v130;
        do
        {
          BOOL v134 = *(v132 - 1) == 1886152040LL && *v132 == 0xE400000000000000LL;
          if (v134 || (sub_186C5B4F4() & 1) != 0)
          {
            sub_186C02158(v184, v185, v188);
            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t v135 = (void (*)(uint64_t))v161[12];
            if (v135)
            {
              swift_retain();
              uint64_t v136 = sub_186BFF4E0(v209);
              v135(v136);
              swift_bridgeObjectRelease();
              sub_186BFF17C((uint64_t)v135);
            }

            goto LABEL_119;
          }

          v132 += 12;
          --v133;
        }

        while (v133);
        if (v130 == 1)
        {
          swift_bridgeObjectRetain();
          swift_beginAccess();
          v131 = v167;
          if (v4[4] == *(void *)aUnsafe && v4[5] == unk_18C6A2418)
          {
            swift_bridgeObjectRelease();
LABEL_147:
            sub_186C02158(v184, v185, v188);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease();
            v155 = (void (*)(uint64_t))v161[12];
            if (v155)
            {
              swift_retain();
              uint64_t v156 = sub_186BFF4E0(1);
              v155(v156);
              swift_bridgeObjectRelease();
              sub_186BFF17C((uint64_t)v155);
            }

    LODWORD(v12) = 0;
LABEL_35:
    if ((v6 & 1) == 0) {
      goto LABEL_36;
    }
    goto LABEL_56;
  }

  __break(1u);
LABEL_61:
  __break(1u);
  return result;
}

LABEL_119:
            swift_bridgeObjectRelease();
            return 0LL;
          }

          char v154 = sub_186C5B4F4();
          swift_bridgeObjectRelease();
          if ((v154 & 1) != 0) {
            goto LABEL_147;
          }
        }

        else
        {
          v131 = v167;
        }

        goto LABEL_121;
      }
    }

    swift_release();
    swift_bridgeObjectRelease();
    sub_186C02158(v184, v185, v188);
    sub_186BFA370((uint64_t)&v214);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_116:
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }

  swift_bridgeObjectRetain();
  unint64_t v123 = 0LL;
  uint64_t v130 = v4[2];
  if (v130) {
    goto LABEL_104;
  }
LABEL_102:
  v131 = v167;
LABEL_121:
  if (v188 != 0xFF)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    sub_186C02184();
    swift_allocError();
    *(void *)uint64_t v137 = v184;
    *(void *)(v137 + _Block_object_dispose(va, 8) = v185;
    *(_BYTE *)(v137 + 16) = v188;
    goto LABEL_123;
  }

  uint64_t v138 = v119;
  uint64_t v139 = *((void *)v131 + 2);
  if (!v139) {
    goto LABEL_131;
  }
  unint64_t v203 = v123;
  v140 = v4;
  uint64_t v141 = (void (*)(uint64_t, uint64_t))v161[10];
  swift_bridgeObjectRetain();
  v142 = (uint64_t *)(v131 + 40);
  do
  {
    uint64_t v144 = *(v142 - 1);
    uint64_t v143 = *v142;
    swift_bridgeObjectRetain();
    if (!v141)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      sub_186C02184();
      swift_allocError();
      *(void *)uint64_t v157 = v144;
      *(void *)(v157 + _Block_object_dispose(va, 8) = v143;
      *(_BYTE *)(v157 + 16) = 0;
      goto LABEL_123;
    }

    sub_186BFF16C((uint64_t)v141);
    v141(v144, v143);
    if (v138)
    {
      sub_186BFF17C((uint64_t)v141);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      goto LABEL_116;
    }

    uint64_t v138 = 0LL;
    v142 += 2;
    sub_186BFF17C((uint64_t)v141);
    swift_bridgeObjectRelease();
    --v139;
  }

  while (v139);
  swift_bridgeObjectRelease();
  int64_t v4 = v140;
  unint64_t v123 = v203;
LABEL_131:
  uint64_t v145 = v4[2];
  if (v209)
  {
    if (v145)
    {
      v146 = v4 + 10;
      uint64_t v147 = v4[2];
      while ((*v146 & 1) == 0)
      {
        v146 += 96;
        if (!--v147) {
          goto LABEL_136;
        }
      }

      goto LABEL_137;
    }

LABEL_136:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_186C02184();
    swift_allocError();
    *(void *)uint64_t v148 = 0LL;
    *(void *)(v148 + _Block_object_dispose(va, 8) = 0LL;
    *(_BYTE *)(v148 + 16) = 6;
LABEL_123:
    swift_willThrow();
    return swift_bridgeObjectRelease();
  }

unint64_t sub_186C018DC(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v4 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000LL) == 0) {
    uint64_t v4 = a3 & 0xFFFFFFFFFFFFLL;
  }
  if (!v4) {
    return 0LL;
  }
  uint64_t v7 = 4 * v4;
  unint64_t v8 = 15LL;
  while (sub_186C5AE7C() != a1 || v9 != a2)
  {
    char v10 = sub_186C5B4F4();
    swift_bridgeObjectRelease();
    if ((v10 & 1) != 0) {
      return v8;
    }
    unint64_t v8 = sub_186C5ADBC();
    if (v7 == v8 >> 14) {
      return 0LL;
    }
  }

  swift_bridgeObjectRelease();
  return v8;
}

void *sub_186C019C8()
{
  return &unk_189F57B28;
}

uint64_t sub_186C019D4()
{
  return MEMORY[0x18961AFE8];
}

__n128 sub_186C019E0@<Q0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, __int128 a10, __int128 a11, __int128 a12, __n128 a13, uint64_t a14)
{
  __n128 result = a13;
  *(void *)a9 = a1;
  *(void *)(a9 + _Block_object_dispose(va, 8) = a2;
  *(void *)(a9 + 16) = a3;
  *(void *)(a9 + 24) = a4;
  *(void *)(a9 + 32) = a5;
  *(void *)(a9 + 40) = a6;
  *(void *)(a9 + 4_Block_object_dispose(va, 8) = a7;
  *(void *)(a9 + 56) = a8;
  *(_OWORD *)(a9 + std::__hash_table<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>>>::~__hash_table((uint64_t)this + 64) = a10;
  *(_OWORD *)(a9 + 80) = a11;
  *(_OWORD *)(a9 + 96) = a12;
  *(__n128 *)(a9 + 112) = a13;
  *(void *)(a9 + 12_Block_object_dispose(va, 8) = a14;
  return result;
}

char *sub_186C01A0C(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_18C6A2438);
    char v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 80);
  }

  else
  {
    char v10 = (char *)MEMORY[0x18961AFE8];
  }

  BOOL v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[80 * v8]) {
      memmove(v12, v13, 80 * v8);
    }
    *((void *)a4 + 2) = 0LL;
  }

  else
  {
    swift_arrayInitWithCopy();
  }

  swift_bridgeObjectRelease();
  return v10;
}

void *sub_186C01B1C(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_18C6A2440);
    char v10 = (void *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    void v10[2] = v8;
    v10[3] = 2 * (v12 >> 4);
  }

  else
  {
    char v10 = (void *)MEMORY[0x18961AFE8];
  }

  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v10 + 4 >= &a4[2 * v8 + 4]) {
      memmove(v10 + 4, a4 + 4, 16 * v8);
    }
    a4[2] = 0LL;
  }

  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_18C6A2448);
    swift_arrayInitWithCopy();
  }

  swift_bridgeObjectRelease();
  return v10;
}

char *sub_186C01C3C(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_18C6A21C0);
    char v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }

  else
  {
    char v10 = (char *)MEMORY[0x18961AFE8];
  }

  uint64_t v13 = v10 + 32;
  unint64_t v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0LL;
  }

  else
  {
    swift_arrayInitWithCopy();
  }

  swift_bridgeObjectRelease();
  return v10;
}

void *sub_186C01D3C(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_18C6A2428);
    char v10 = (void *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    void v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 96);
  }

  else
  {
    char v10 = (void *)MEMORY[0x18961AFE8];
  }

  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v10 + 4 >= &a4[12 * v8 + 4]) {
      memmove(v10 + 4, a4 + 4, 96 * v8);
    }
    a4[2] = 0LL;
  }

  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_18C6A2430);
    swift_arrayInitWithCopy();
  }

  swift_bridgeObjectRelease();
  return v10;
}

char *sub_186C01E74(char *a1, int64_t a2, char a3)
{
  __n128 result = sub_186C01EB4(a1, a2, a3, *v3);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_186C01E90()
{
  return swift_release();
}

void *sub_186C01E98(void *a1, int64_t a2, char a3)
{
  __n128 result = sub_186C01FC4(a1, a2, a3, *v3);
  *uint64_t v3 = result;
  return result;
}

char *sub_186C01EB4(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_18C6A2438);
    char v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 80);
  }

  else
  {
    char v10 = (char *)MEMORY[0x18961AFE8];
  }

  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[80 * v8]) {
      memmove(v12, v13, 80 * v8);
    }
    *((void *)a4 + 2) = 0LL;
  }

  else
  {
    swift_arrayInitWithCopy();
  }

  swift_release();
  return v10;
}

void *sub_186C01FC4(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_18C6A2428);
    char v10 = (void *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    void v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 96);
  }

  else
  {
    char v10 = (void *)MEMORY[0x18961AFE8];
  }

  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v10 + 4 >= &a4[12 * v8 + 4]) {
      memmove(v10 + 4, a4 + 4, 96 * v8);
    }
    a4[2] = 0LL;
  }

  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_18C6A2430);
    swift_arrayInitWithCopy();
  }

  swift_release();
  return v10;
}

uint64_t (*sub_186C020FC(uint64_t (*result)(), unint64_t a2, uint64_t a3))()
{
  if ((a2 & 0x8000000000000000LL) != 0)
  {
    __break(1u);
  }

  else if (*(void *)(a3 + 16) > a2)
  {
    uint64_t v3 = result;
    uint64_t v4 = a3 + 16 * a2;
    uint64_t v5 = *(void *)(v4 + 40);
    *(void *)uint64_t v3 = *(void *)(v4 + 32);
    *((void *)v3 + ktrace_session_set_default_event_names_enabled(global_session, 1) = v5;
    swift_bridgeObjectRetain();
    return destroy for NotificationWaiter;
  }

  __break(1u);
  return result;
}

uint64_t destroy for NotificationWaiter()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_186C02158(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 != 0xFF) {
    return sub_186C0216C(a1, a2, a3);
  }
  return a1;
}

uint64_t sub_186C0216C(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 <= 5u) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

unint64_t sub_186C02184()
{
  unint64_t result = qword_18C6A2420;
  if (!qword_18C6A2420)
  {
    unint64_t result = MEMORY[0x186E46630](&unk_186C5ED5C, &type metadata for OptionParser.ParseError);
    atomic_store(result, (unint64_t *)&qword_18C6A2420);
  }

  return result;
}

void *sub_186C021C8(void *result, void *a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  int64_t v7 = result;
  if (!a2) {
    goto LABEL_5;
  }
  uint64_t v8 = a3;
  if (!a3)
  {
LABEL_22:
    *int64_t v7 = a4;
    v7[1] = a5;
    return (void *)v8;
  }

  if (a3 < 0)
  {
    __break(1u);
  }

  else
  {
    unint64_t v9 = *(void *)(a4 + 16);
    if (v9 == a5)
    {
LABEL_5:
      uint64_t v8 = 0LL;
      goto LABEL_22;
    }

    if (v9 > a5)
    {
      uint64_t v11 = a4 + 16 * a5;
      uint64_t v12 = *(void *)(v11 + 32);
      uint64_t v13 = *(void *)(v11 + 40);
      unint64_t v14 = a5 + 1;
      *a2 = v12;
      a2[1] = v13;
      if (a3 == 1)
      {
        unint64_t v9 = a5 + 1;
      }

      else if (v14 == v9)
      {
        uint64_t v8 = 1LL;
      }

      else
      {
        uint64_t v21 = v9 - a5;
        if (v14 >= *(void *)(a4 + 16))
        {
LABEL_17:
          __break(1u);
        }

        else
        {
          uint64_t v15 = 0LL;
          uint64_t v16 = a3 - 2;
          unint64_t v5 = a5 + 2;
          uint64_t v22 = a4 + 16 * a5;
          while (1)
          {
            unint64_t v17 = &a2[v15];
            uint64_t v18 = *(void *)(v22 + v15 * 8 + 56);
            unint64_t v17[2] = *(void *)(v22 + v15 * 8 + 48);
            v17[3] = v18;
            if (!v16) {
              break;
            }
            if (v9 == v5)
            {
              uint64_t v8 = v21;
              goto LABEL_20;
            }

            unint64_t v19 = *(void *)(a4 + 16);
            swift_bridgeObjectRetain();
            --v16;
            v15 += 2LL;
            if (v5++ >= v19) {
              goto LABEL_17;
            }
          }
        }

        unint64_t v9 = v5;
LABEL_20:
        swift_bridgeObjectRetain();
      }

      swift_bridgeObjectRetain();
      a5 = v9;
      goto LABEL_22;
    }
  }

  __break(1u);
  return result;
}

uint64_t sub_186C02308( uint64_t result, unint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5)
{
  unint64_t v5 = 0LL;
  unint64_t v6 = *(void *)(result + 16);
  unint64_t v29 = a3 >> 16;
  unint64_t v30 = a2 >> 16;
  uint64_t v7 = result + 104;
  uint64_t v27 = result + 104;
  uint64_t v28 = MEMORY[0x18961AFE8];
  unint64_t v35 = v6;
LABEL_2:
  if (v5 <= v6) {
    unint64_t v8 = v6;
  }
  else {
    unint64_t v8 = v5;
  }
  unint64_t v36 = v8 + 1;
  unint64_t v9 = (_BYTE *)(v7 + 80 * v5);
  while (1)
  {
    if (v6 == v5) {
      return v28;
    }
    uint64_t v10 = v5++;
    if (v36 == v5) {
      break;
    }
    uint64_t v12 = *((void *)v9 - 9);
    unint64_t v11 = *((void *)v9 - 8);
    uint64_t v34 = *((void *)v9 - 7);
    __int128 v38 = *((_OWORD *)v9 - 3);
    uint64_t v13 = *((void *)v9 - 4);
    char v33 = *(v9 - 24);
    uint64_t v14 = *((void *)v9 - 2);
    uint64_t v15 = *((void *)v9 - 1);
    char v16 = *v9;
    if ((v11 & 0x2000000000000000LL) != 0) {
      uint64_t v17 = HIBYTE(v11) & 0xF;
    }
    else {
      uint64_t v17 = v12 & 0xFFFFFFFFFFFFLL;
    }
    if (v12 == a4 && v11 == a5 && v30 == 0 && v17 == v29)
    {
      uint64_t v12 = a4;
      unint64_t v11 = a5;
LABEL_24:
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_186BFF164();
      uint64_t v21 = v28;
      unint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        unint64_t result = (uint64_t)sub_186C01E74(0LL, *(void *)(v28 + 16) + 1LL, 1);
        uint64_t v21 = v28;
      }

      unint64_t v23 = *(void *)(v21 + 16);
      unint64_t v22 = *(void *)(v21 + 24);
      unint64_t v24 = v23 + 1;
      unint64_t v6 = v35;
      if (v23 >= v22 >> 1)
      {
        unint64_t v26 = v23 + 1;
        unint64_t v37 = *(void *)(v21 + 16);
        unint64_t result = (uint64_t)sub_186C01E74((char *)(v22 > 1), v23 + 1, 1);
        unint64_t v24 = v26;
        unint64_t v6 = v35;
        unint64_t v23 = v37;
        uint64_t v21 = v28;
      }

      unint64_t v5 = v10 + 1;
      *(void *)(v21 + 16) = v24;
      uint64_t v28 = v21;
      uint64_t v25 = v21 + 80 * v23;
      *(void *)(v25 + 32) = v12;
      *(void *)(v25 + 40) = v11;
      *(void *)(v25 + 4_Block_object_dispose(va, 8) = v34;
      *(_OWORD *)(v25 + 56) = v38;
      *(void *)(v25 + 72) = v13;
      *(_BYTE *)(v25 + 80) = v33;
      *(void *)(v25 + 8_Block_object_dispose(va, 8) = v14;
      *(void *)(v25 + 96) = v15;
      *(_BYTE *)(v25 + 104) = v16;
      uint64_t v7 = v27;
      goto LABEL_2;
    }

    v9 += 80;
    unint64_t result = sub_186C5B4D0();
    unint64_t v6 = v35;
    if ((result & 1) != 0) {
      goto LABEL_24;
    }
  }

  __break(1u);
  return result;
}

uint64_t sub_186C0251C(uint64_t result, uint64_t a2, uint64_t a3)
{
  unint64_t v3 = *(void *)(result + 16);
  if (!v3) {
    return MEMORY[0x18961AFE8];
  }
  uint64_t v5 = a2;
  unint64_t v6 = 0LL;
  uint64_t v7 = result + 104;
  unint64_t v30 = v3 - 1;
  uint64_t v8 = MEMORY[0x18961AFE8];
  uint64_t v35 = a3;
  unint64_t v33 = *(void *)(result + 16);
  uint64_t v31 = result + 104;
  do
  {
    uint64_t v32 = v8;
    if (v6 <= v3) {
      unint64_t v9 = v3;
    }
    else {
      unint64_t v9 = v6;
    }
    unint64_t v40 = v9;
    uint64_t v10 = (_BYTE *)(v7 + 80 * v6);
    unint64_t v11 = v6;
    while (1)
    {
      if (v40 == v11)
      {
        __break(1u);
        return result;
      }

      unint64_t v41 = v11;
      uint64_t v12 = *((void *)v10 - 8);
      __int128 v13 = *((_OWORD *)v10 - 3);
      uint64_t v14 = *((void *)v10 - 4);
      char v36 = *(v10 - 24);
      uint64_t v16 = *((void *)v10 - 2);
      uint64_t v15 = *((void *)v10 - 1);
      char v17 = *v10;
      __int128 v39 = v13;
      uint64_t v37 = *((void *)v10 - 7);
      uint64_t v38 = *((void *)v10 - 9);
      uint64_t v18 = (void)v13 ? *((void *)v10 - 7) : 0LL;
      uint64_t v19 = (void)v13 ? *((void *)v10 - 6) : 0xE000000000000000LL;
      if (v18 == v5 && v19 == a3) {
        break;
      }
      char v21 = sub_186C5B4F4();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_186BFF164();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      if ((v21 & 1) != 0) {
        goto LABEL_22;
      }
      unint64_t v11 = v41 + 1;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      unint64_t result = sub_186C01E90();
      v10 += 80;
      uint64_t v5 = a2;
      a3 = v35;
      if (v33 == v41 + 1) {
        return v32;
      }
    }

    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_186BFF164();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
LABEL_22:
    unint64_t result = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v8 = v32;
    if ((result & 1) == 0)
    {
      unint64_t result = (uint64_t)sub_186C01E74(0LL, *(void *)(v32 + 16) + 1LL, 1);
      uint64_t v8 = v32;
    }

    char v22 = v17;
    uint64_t v23 = v15;
    uint64_t v24 = v16;
    uint64_t v25 = v14;
    unint64_t v26 = v41;
    unint64_t v28 = *(void *)(v8 + 16);
    unint64_t v27 = *(void *)(v8 + 24);
    if (v28 >= v27 >> 1)
    {
      unint64_t result = (uint64_t)sub_186C01E74((char *)(v27 > 1), v28 + 1, 1);
      unint64_t v26 = v41;
      uint64_t v25 = v14;
      uint64_t v24 = v16;
      uint64_t v23 = v15;
      char v22 = v17;
      uint64_t v8 = v32;
    }

    unint64_t v6 = v26 + 1;
    *(void *)(v8 + 16) = v28 + 1;
    uint64_t v29 = v8 + 80 * v28;
    *(void *)(v29 + 32) = v38;
    *(void *)(v29 + 40) = v12;
    *(void *)(v29 + 4_Block_object_dispose(va, 8) = v37;
    *(_OWORD *)(v29 + 56) = v39;
    *(void *)(v29 + 72) = v25;
    *(_BYTE *)(v29 + 80) = v36;
    *(void *)(v29 + 8_Block_object_dispose(va, 8) = v24;
    *(void *)(v29 + 96) = v23;
    *(_BYTE *)(v29 + 104) = v22;
    uint64_t v7 = v31;
    uint64_t v5 = a2;
    a3 = v35;
    unint64_t v3 = v33;
  }

  while (v30 != v26);
  return v8;
}

unint64_t sub_186C027D4(unint64_t result, uint64_t a2, unint64_t a3)
{
  if ((result & 0x8000000000000000LL) != 0)
  {
    __break(1u);
  }

  else
  {
    if ((a3 & 0x2000000000000000LL) != 0) {
      uint64_t v3 = HIBYTE(a3) & 0xF;
    }
    else {
      uint64_t v3 = a2 & 0xFFFFFFFFFFFFLL;
    }
    uint64_t v4 = 7LL;
    if (((a3 >> 60) & ((a2 & 0x800000000000000LL) == 0)) != 0) {
      uint64_t v4 = 11LL;
    }
    unint64_t v5 = v4 | (v3 << 16);
    unint64_t result = sub_186C5ADC8();
    if ((v6 & 1) != 0) {
      unint64_t result = v5;
    }
    if (4 * v3 >= result >> 14) {
      return sub_186C5AE94();
    }
  }

  __break(1u);
  return result;
}

unint64_t sub_186C02870(unint64_t result, uint64_t a2, unint64_t a3)
{
  uint64_t v3 = HIBYTE(a3) & 0xF;
  if ((a3 & 0x2000000000000000LL) == 0) {
    uint64_t v3 = a2 & 0xFFFFFFFFFFFFLL;
  }
  if (4 * v3 >= result >> 14) {
    return sub_186C5AE94();
  }
  __break(1u);
  return result;
}

uint64_t destroy for OptionParser(void *a1)
{
  if (a1[2]) {
    swift_release();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (a1[10]) {
    swift_release();
  }
  if (a1[12]) {
    swift_release();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for OptionParser(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  char v6 = a2 + 2;
  uint64_t v5 = a2[2];
  swift_bridgeObjectRetain();
  if (v5)
  {
    uint64_t v7 = a2[3];
    a1[2] = v5;
    a1[3] = v7;
    swift_retain();
  }

  else
  {
    *((_OWORD *)a1 + ktrace_session_set_default_event_names_enabled(global_session, 1) = *v6;
  }

  uint64_t v8 = a2[10];
  uint64_t v9 = a2[5];
  a1[4] = a2[4];
  a1[5] = v9;
  uint64_t v10 = a2[7];
  a1[6] = a2[6];
  a1[7] = v10;
  uint64_t v11 = a2[9];
  a1[8] = a2[8];
  a1[9] = v11;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v8)
  {
    uint64_t v12 = a2[11];
    a1[10] = v8;
    a1[11] = v12;
    swift_retain();
  }

  else
  {
    *((_OWORD *)a1 + 5) = *((_OWORD *)a2 + 5);
  }

  uint64_t v13 = a2[12];
  if (v13)
  {
    uint64_t v14 = a2[13];
    a1[12] = v13;
    a1[13] = v14;
    swift_retain();
  }

  else
  {
    *((_OWORD *)a1 + 6) = *((_OWORD *)a2 + 6);
  }

  uint64_t v15 = a2[15];
  a1[14] = a2[14];
  a1[15] = v15;
  a1[16] = a2[16];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for OptionParser(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = a2[2];
  if (a1[2])
  {
    if (v4)
    {
      uint64_t v5 = a2[3];
      a1[2] = v4;
      a1[3] = v5;
      swift_retain();
      swift_release();
      goto LABEL_8;
    }

    swift_release();
  }

  else if (v4)
  {
    uint64_t v6 = a2[3];
    a1[2] = v4;
    a1[3] = v6;
    swift_retain();
    goto LABEL_8;
  }

  *((_OWORD *)a1 + ktrace_session_set_default_event_names_enabled(global_session, 1) = *((_OWORD *)a2 + 1);
LABEL_8:
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  a1[7] = a2[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[8] = a2[8];
  a1[9] = a2[9];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v7 = a2[10];
  if (a1[10])
  {
    if (v7)
    {
      uint64_t v8 = a2[11];
      a1[10] = v7;
      a1[11] = v8;
      swift_retain();
      swift_release();
      goto LABEL_15;
    }

    swift_release();
  }

  else if (v7)
  {
    uint64_t v9 = a2[11];
    a1[10] = v7;
    a1[11] = v9;
    swift_retain();
    goto LABEL_15;
  }

  *((_OWORD *)a1 + 5) = *((_OWORD *)a2 + 5);
LABEL_15:
  uint64_t v10 = a2[12];
  if (!a1[12])
  {
    if (v10)
    {
      uint64_t v12 = a2[13];
      a1[12] = v10;
      a1[13] = v12;
      swift_retain();
      goto LABEL_22;
    }

__n128 __swift_memcpy136_8(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  __int128 v2 = *(_OWORD *)(a2 + 16);
  __int128 v3 = *(_OWORD *)(a2 + 32);
  __int128 v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 4_Block_object_dispose(va, 8) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + std::__hash_table<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>>>::~__hash_table((uint64_t)this + 64) = v4;
  *(_OWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 32) = v3;
  __n128 result = *(__n128 *)(a2 + 80);
  __int128 v6 = *(_OWORD *)(a2 + 96);
  __int128 v7 = *(_OWORD *)(a2 + 112);
  *(void *)(a1 + 12_Block_object_dispose(va, 8) = *(void *)(a2 + 128);
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 112) = v7;
  *(__n128 *)(a1 + 80) = result;
  return result;
}

uint64_t assignWithTake for OptionParser(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + _Block_object_dispose(va, 8) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 16);
  if (*(void *)(a1 + 16))
  {
    if (v5)
    {
      uint64_t v6 = *(void *)(a2 + 24);
      *(void *)(a1 + 16) = v5;
      *(void *)(a1 + 24) = v6;
      swift_release();
      goto LABEL_8;
    }

    swift_release();
  }

  else if (v5)
  {
    uint64_t v7 = *(void *)(a2 + 24);
    *(void *)(a1 + 16) = v5;
    *(void *)(a1 + 24) = v7;
    goto LABEL_8;
  }

  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
LABEL_8:
  uint64_t v8 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v8;
  swift_bridgeObjectRelease();
  uint64_t v9 = *(void *)(a2 + 56);
  *(void *)(a1 + 4_Block_object_dispose(va, 8) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v9;
  swift_bridgeObjectRelease();
  uint64_t v10 = *(void *)(a2 + 72);
  *(void *)(a1 + std::__hash_table<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>>>::~__hash_table((uint64_t)this + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v10;
  swift_bridgeObjectRelease();
  uint64_t v11 = *(void *)(a2 + 80);
  if (*(void *)(a1 + 80))
  {
    if (v11)
    {
      uint64_t v12 = *(void *)(a2 + 88);
      *(void *)(a1 + 80) = v11;
      *(void *)(a1 + 8_Block_object_dispose(va, 8) = v12;
      swift_release();
      goto LABEL_15;
    }

    swift_release();
  }

  else if (v11)
  {
    uint64_t v13 = *(void *)(a2 + 88);
    *(void *)(a1 + 80) = v11;
    *(void *)(a1 + 8_Block_object_dispose(va, 8) = v13;
    goto LABEL_15;
  }

  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
LABEL_15:
  uint64_t v14 = *(void *)(a2 + 96);
  if (!*(void *)(a1 + 96))
  {
    if (v14)
    {
      uint64_t v16 = *(void *)(a2 + 104);
      *(void *)(a1 + 96) = v14;
      *(void *)(a1 + 104) = v16;
      goto LABEL_22;
    }

uint64_t getEnumTagSinglePayload for OptionParser(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 136)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for OptionParser(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 8_Block_object_dispose(va, 8) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + _Block_object_dispose(va, 8) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 136) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + _Block_object_dispose(va, 8) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 136) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for OptionParser()
{
  return &type metadata for OptionParser;
}

uint64_t destroy for OptionParser.Handler()
{
  return sub_186C01E90();
}

uint64_t _s6ktrace12OptionParserV7HandlerOwCP_0(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  char v5 = *((_BYTE *)a2 + 16);
  sub_186BFF164();
  *(void *)a1 = v3;
  *(void *)(a1 + _Block_object_dispose(va, 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for OptionParser.Handler(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  char v5 = *((_BYTE *)a2 + 16);
  sub_186BFF164();
  *(void *)a1 = v3;
  *(void *)(a1 + _Block_object_dispose(va, 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  sub_186C01E90();
  return a1;
}

__n128 __swift_memcpy17_8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for OptionParser.Handler(uint64_t a1, uint64_t a2)
{
  char v3 = *(_BYTE *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = v3;
  sub_186C01E90();
  return a1;
}

uint64_t getEnumTagSinglePayload for OptionParser.Handler(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 17)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 1) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for OptionParser.Handler(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_BYTE *)(result + 16) = 0;
    *(void *)__n128 result = a2 - 255;
    *(void *)(result + _Block_object_dispose(va, 8) = 0LL;
    if (a3 >= 0xFF) {
      *(_BYTE *)(result + 17) = 1;
    }
  }

  else
  {
    if (a3 >= 0xFF) {
      *(_BYTE *)(result + 17) = 0;
    }
    if (a2) {
      *(_BYTE *)(result + 16) = -(char)a2;
    }
  }

  return result;
}

uint64_t sub_186C0303C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 16);
}

uint64_t sub_186C03044(uint64_t result, char a2)
{
  *(_BYTE *)(result + 16) = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for OptionParser.Handler()
{
  return &type metadata for OptionParser.Handler;
}

uint64_t destroy for OptionParser.Option()
{
  return sub_186C01E90();
}

uint64_t initializeWithCopy for OptionParser.Option(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + _Block_object_dispose(va, 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v5;
  *(_BYTE *)(a1 + 4_Block_object_dispose(va, 8) = *(_BYTE *)(a2 + 48);
  uint64_t v6 = *(void *)(a2 + 56);
  uint64_t v7 = *(void *)(a2 + 64);
  char v8 = *(_BYTE *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_186BFF164();
  *(void *)(a1 + 56) = v6;
  *(void *)(a1 + std::__hash_table<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>>>::~__hash_table((uint64_t)this + 64) = v7;
  *(_BYTE *)(a1 + 72) = v8;
  return a1;
}

uint64_t assignWithCopy for OptionParser.Option(uint64_t a1, void *a2)
{
  unint64_t v2 = a2;
  *(void *)a1 = *a2;
  *(void *)(a1 + _Block_object_dispose(va, 8) = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = v2[2];
  *(void *)(a1 + 24) = v2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = v2[4];
  *(void *)(a1 + 40) = v2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 4_Block_object_dispose(va, 8) = *((_BYTE *)v2 + 48);
  uint64_t v4 = v2[7];
  uint64_t v5 = v2[8];
  LOBYTE(v2) = *((_BYTE *)v2 + 72);
  sub_186BFF164();
  *(void *)(a1 + 56) = v4;
  *(void *)(a1 + std::__hash_table<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>>>::~__hash_table((uint64_t)this + 64) = v5;
  *(_BYTE *)(a1 + 72) = (_BYTE)v2;
  sub_186C01E90();
  return a1;
}

__n128 __swift_memcpy73_8(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  __n128 result = *(__n128 *)(a2 + 16);
  __int128 v3 = *(_OWORD *)(a2 + 32);
  __int128 v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 57) = *(_OWORD *)(a2 + 57);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 4_Block_object_dispose(va, 8) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t assignWithTake for OptionParser.Option(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + _Block_object_dispose(va, 8) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v6;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 4_Block_object_dispose(va, 8) = *(_BYTE *)(a2 + 48);
  char v7 = *(_BYTE *)(a2 + 72);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 72) = v7;
  sub_186C01E90();
  return a1;
}

uint64_t getEnumTagSinglePayload for OptionParser.Option(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 73)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for OptionParser.Option(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + _Block_object_dispose(va, 8) = 0u;
    *(_BYTE *)(result + 72) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 73) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + _Block_object_dispose(va, 8) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 73) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for OptionParser.Option()
{
  return &type metadata for OptionParser.Option;
}

uint64_t sub_186C0332C(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 <= 5u) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t destroy for OptionParser.ParseError(uint64_t a1)
{
  return sub_186C0216C(*(void *)a1, *(void *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t _s6ktrace12OptionParserV10ParseErrorOwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  unsigned __int8 v5 = *(_BYTE *)(a2 + 16);
  sub_186C0332C(*(void *)a2, v4, v5);
  *(void *)a1 = v3;
  *(void *)(a1 + _Block_object_dispose(va, 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for OptionParser.ParseError(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  unsigned __int8 v5 = *(_BYTE *)(a2 + 16);
  sub_186C0332C(*(void *)a2, v4, v5);
  uint64_t v6 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  *(void *)a1 = v3;
  *(void *)(a1 + _Block_object_dispose(va, 8) = v4;
  unsigned __int8 v8 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v5;
  sub_186C0216C(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for OptionParser.ParseError(uint64_t a1, uint64_t a2)
{
  char v3 = *(_BYTE *)(a2 + 16);
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  unsigned __int8 v6 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v3;
  sub_186C0216C(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for OptionParser.ParseError(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0xFA && *(_BYTE *)(a1 + 17)) {
    return (*(_DWORD *)a1 + 250);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 6) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for OptionParser.ParseError( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xF9)
  {
    *(_BYTE *)(result + 16) = 0;
    *(void *)uint64_t result = a2 - 250;
    *(void *)(result + _Block_object_dispose(va, 8) = 0LL;
    if (a3 >= 0xFA) {
      *(_BYTE *)(result + 17) = 1;
    }
  }

  else
  {
    if (a3 >= 0xFA) {
      *(_BYTE *)(result + 17) = 0;
    }
    if (a2) {
      *(_BYTE *)(result + 16) = -(char)a2;
    }
  }

  return result;
}

uint64_t sub_186C034C0(uint64_t a1)
{
  else {
    return (*(_DWORD *)a1 + 6);
  }
}

uint64_t sub_186C034D8(uint64_t result, unsigned int a2)
{
  if (a2 >= 6)
  {
    *(void *)uint64_t result = a2 - 6;
    *(void *)(result + _Block_object_dispose(va, 8) = 0LL;
    LOBYTE(a2) = 6;
  }

  *(_BYTE *)(result + 16) = a2;
  return result;
}

ValueMetadata *type metadata accessor for OptionParser.ParseError()
{
  return &type metadata for OptionParser.ParseError;
}

uint64_t sub_186C03500(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  float v6 = (float)((float)a3 / (float)a5) * 100.0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C6A2190);
  uint64_t v7 = swift_allocObject();
  uint64_t v8 = MEMORY[0x189618620];
  *(_OWORD *)(v7 + 16) = xmmword_186C5E4F0;
  uint64_t v9 = MEMORY[0x189618658];
  *(void *)(v7 + 56) = v8;
  *(void *)(v7 + std::__hash_table<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>>>::~__hash_table((uint64_t)this + 64) = v9;
  *(float *)(v7 + 32) = v6;
  uint64_t result = sub_186C5AD38();
  if ((unint64_t)(a3 - 0x200000000000000LL) >> 58 == 63)
  {
    uint64_t v11 = result;
    id v12 = objc_msgSend((id)objc_opt_self(), sel_stringFromByteCount_countStyle_, a3 << 6, 1);
    sub_186C5AD2C();

    sub_186C5B260();
    swift_bridgeObjectRelease();
    sub_186C5ADD4();
    sub_186C5ADD4();
    sub_186C5ADD4();
    sub_186C5ADD4();
    swift_bridgeObjectRelease();
    sub_186C5ADD4();
    return v11;
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_186C036A4(uint64_t a1)
{
  unsigned int v3 = v1;
  int v4 = HIWORD(*(_DWORD *)(a1 + 48));
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v6 = *v1;
  uint64_t v25 = v6;
  *unsigned int v3 = 0x8000000000000000LL;
  unint64_t v8 = sub_186C03824(v4);
  uint64_t v9 = *(void *)(v6 + 16);
  BOOL v10 = (v7 & 1) == 0;
  uint64_t v11 = v9 + v10;
  if (__OFADD__(v9, v10))
  {
    __break(1u);
    goto LABEL_13;
  }

  char v2 = v7;
  if (*(void *)(v6 + 24) < v11)
  {
    sub_186C038F8(v11, isUniquelyReferenced_nonNull_native);
    unint64_t v12 = sub_186C03824(v4);
    if ((v2 & 1) == (v13 & 1))
    {
      unint64_t v8 = v12;
      goto LABEL_6;
    }

    goto LABEL_17;
  }

  if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
    goto LABEL_15;
  }
  while (1)
  {
LABEL_6:
    *unsigned int v3 = v6;
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v15 = (void *)*v3;
    if ((v2 & 1) != 0) {
      goto LABEL_9;
    }
    v15[(v8 >> 6) + 8] |= 1LL << v8;
    *(_WORD *)(v15[6] + 2 * v_Block_object_dispose(va, 8) = v4;
    *(void *)(v15[7] + 8 * v_Block_object_dispose(va, 8) = 1LL;
    uint64_t v16 = v15[2];
    BOOL v17 = __OFADD__(v16, 1LL);
    uint64_t v18 = v16 + 1;
    if (v17) {
      break;
    }
    v15[2] = v18;
LABEL_9:
    uint64_t v19 = v15[7];
    uint64_t v20 = *(void *)(v19 + 8 * v8);
    BOOL v17 = __OFADD__(v20, 1LL);
    uint64_t v21 = v20 + 1;
    if (v17)
    {
LABEL_13:
      __break(1u);
    }

    else
    {
      *(void *)(v19 + 8 * v_Block_object_dispose(va, 8) = v21;
      uint64_t v22 = v3[1];
      BOOL v23 = __CFADD__(v22, 1LL);
      uint64_t v24 = v22 + 1;
      if (!v23)
      {
        v3[1] = v24;
        return result;
      }
    }

    __break(1u);
LABEL_15:
    sub_186C03B98();
    uint64_t v6 = v25;
  }

  __break(1u);
LABEL_17:
  uint64_t result = sub_186C5B530();
  __break(1u);
  return result;
}

unint64_t sub_186C03804()
{
  return sub_186C03D28(MEMORY[0x18961AFE8]);
}

unint64_t sub_186C03824(unsigned __int16 a1)
{
  uint64_t v3 = MEMORY[0x186E44F8C](*(void *)(v1 + 40), a1, 2LL);
  return sub_186C03858(a1, v3);
}

unint64_t sub_186C03858(unsigned __int16 a1, uint64_t a2)
{
  uint64_t v4 = v2 + 64;
  uint64_t v5 = -1LL << *(_BYTE *)(v2 + 32);
  unint64_t result = a2 & ~v5;
  if (((*(void *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8LL)) >> result) & 1) != 0)
  {
    uint64_t v7 = *(void *)(v2 + 48);
    if (*(unsigned __int16 *)(v7 + 2 * result) != a1)
    {
      uint64_t v8 = ~v5;
      for (unint64_t result = (result + 1) & v8;
            ((*(void *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFF8LL)) >> result) & 1) != 0;
            unint64_t result = (result + 1) & v8)
      {
      }
    }
  }

  return result;
}

uint64_t sub_186C038F8(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_18C6A2450);
  uint64_t result = sub_186C5B380();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    char v33 = a2;
    uint64_t v32 = v3;
    int64_t v8 = 0LL;
    uint64_t v9 = (uint64_t *)(v5 + 64);
    uint64_t v10 = 1LL << *(_BYTE *)(v5 + 32);
    uint64_t v30 = -1LL << v10;
    uint64_t v31 = v10;
    if (v10 < 64) {
      uint64_t v11 = ~(-1LL << v10);
    }
    else {
      uint64_t v11 = -1LL;
    }
    unint64_t v12 = v11 & *(void *)(v5 + 64);
    int64_t v13 = (unint64_t)(v10 + 63) >> 6;
    uint64_t v14 = result + 64;
    while (1)
    {
      if (v12)
      {
        unint64_t v16 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        unint64_t v17 = v16 | (v8 << 6);
      }

      else
      {
        int64_t v18 = v8 + 1;
        if (__OFADD__(v8, 1LL))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }

        if (v18 >= v13) {
          goto LABEL_31;
        }
        unint64_t v19 = v9[v18];
        ++v8;
        if (!v19)
        {
          int64_t v8 = v18 + 1;
          if (v18 + 1 >= v13) {
            goto LABEL_31;
          }
          unint64_t v19 = v9[v8];
          if (!v19)
          {
            int64_t v20 = v18 + 2;
            if (v20 >= v13)
            {
LABEL_31:
              if ((v33 & 1) == 0)
              {
                uint64_t result = swift_release();
                uint64_t v3 = v32;
                goto LABEL_38;
              }

              if (v31 >= 64) {
                bzero((void *)(v5 + 64), 8 * v13);
              }
              else {
                *uint64_t v9 = v30;
              }
              uint64_t v3 = v32;
              *(void *)(v5 + 16) = 0LL;
              break;
            }

            unint64_t v19 = v9[v20];
            if (!v19)
            {
              while (1)
              {
                int64_t v8 = v20 + 1;
                if (__OFADD__(v20, 1LL)) {
                  goto LABEL_40;
                }
                if (v8 >= v13) {
                  goto LABEL_31;
                }
                unint64_t v19 = v9[v8];
                ++v20;
                if (v19) {
                  goto LABEL_21;
                }
              }
            }

            int64_t v8 = v20;
          }
        }

void *sub_186C03B98()
{
  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_18C6A2450);
  uint64_t v2 = *v0;
  uint64_t v3 = sub_186C5B374();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }

  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v20 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21) {
        break;
      }
    }

LABEL_25:
    unint64_t v23 = __clz(__rbit64(v21));
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v15 = v23 + (v9 << 6);
LABEL_12:
    uint64_t v16 = 2 * v15;
    __int16 v17 = *(_WORD *)(*(void *)(v2 + 48) + 2 * v15);
    uint64_t v18 = 8 * v15;
    uint64_t v19 = *(void *)(*(void *)(v2 + 56) + v18);
    *(_WORD *)(*(void *)(v4 + 48) + v16) = v17;
    *(void *)(*(void *)(v4 + 56) + v1_Block_object_dispose(va, 8) = v19;
  }

  int64_t v22 = v20 + 2;
  if (v22 >= v13) {
    goto LABEL_26;
  }
  unint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    int64_t v9 = v22;
    goto LABEL_25;
  }

  while (1)
  {
    int64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_25;
    }
  }

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

          unint64_t v40 = v226;
          if (++v47 == v228)
          {
            v235 = v48;
            swift_release();
            goto LABEL_4;
          }
        }

        __break(1u);
LABEL_110:
        __break(1u);
LABEL_111:
        __break(1u);
LABEL_112:
        __break(1u);
LABEL_113:
        __break(1u);
      }

      swift_release();
      char v26 = v234;
LABEL_4:
      unint64_t v25 = v204 + 1;
      sub_186C1199C(v236);
      unint64_t v14 = v229;
      (*(void (**)(char *, uint64_t))(v231 + 8))(v232, v229);
      unint64_t v23 = v194;
      unint64_t v21 = v195;
    }

    while (v25 != v199);
    swift_bridgeObjectRelease();
  }

  else
  {
    swift_bridgeObjectRelease();
    char v26 = (char *)MEMORY[0x18961AFE8];
  }

  v167 = swift_bridgeObjectRetain();
  uint64_t v168 = sub_186C1E7F0(v167);
  swift_bridgeObjectRelease();
  v255[0] = v168;
  swift_retain();
  unint64_t v169 = v235;
  sub_186C1F70C(v255, (uint64_t (*)(uint64_t))sub_186C21148, sub_186C1F784);
  if (v169)
  {
    uint64_t result = (id)swift_release();
    __break(1u);
  }

  else
  {
    swift_release();
    char v170 = v255[0];
    v243[0] = (id)v255[0];
    unint64_t v171 = *(void *)(v255[0] + 16);
    if (v171)
    {
      v234 = v26;
      uint64_t v172 = 0LL;
      unint64_t v173 = (void *)(v255[0] + 40);
      while (1)
      {
        uint64_t v174 = *(v173 - 1) == 0x746C7561666564LL && *v173 == 0xE700000000000000LL;
        if (v174 || (sub_186C5B4F4() & 1) != 0) {
          break;
        }
        v173 += 41;
        if (v171 == ++v172) {
          goto LABEL_107;
        }
      }

      swift_bridgeObjectRelease();
      sub_186C186B4(v172, v255);
      sub_186C20220(0LL, 0LL, v255);
      return v243[0];
    }

    else
    {
LABEL_107:
      swift_bridgeObjectRelease();
    }

    return (id)v170;
  }

  return result;
}

    unint64_t v12 = (v26 - 1) & v26;
    unint64_t v15 = __clz(__rbit64(v26)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    __int16 v17 = (uint64_t *)(*(void *)(v2 + 48) + v16);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    int64_t v20 = (uint64_t *)(*(void *)(v2 + 56) + v16);
    unint64_t v21 = *v20;
    int64_t v22 = v20[1];
    unint64_t v23 = (void *)(*(void *)(v4 + 48) + v16);
    *unint64_t v23 = v19;
    v23[1] = v18;
    unint64_t v24 = (void *)(*(void *)(v4 + 56) + v16);
    *unint64_t v24 = v21;
    v24[1] = v22;
    swift_bridgeObjectRetain();
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }

  unint64_t v27 = v25 + 2;
  if (v27 >= v13) {
    goto LABEL_26;
  }
  char v26 = *(void *)(v6 + 8 * v27);
  if (v26)
  {
    int64_t v9 = v27;
    goto LABEL_25;
  }

  while (1)
  {
    int64_t v9 = v27 + 1;
    if (__OFADD__(v27, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    char v26 = *(void *)(v6 + 8 * v9);
    ++v27;
    if (v26) {
      goto LABEL_25;
    }
  }

    unint64_t v12 = (v43 - 1) & v43;
    unint64_t v15 = __clz(__rbit64(v43)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    __int16 v17 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    int64_t v20 = 200 * v15;
    unint64_t v21 = *(void *)(v2 + 56) + v20;
    unint64_t v23 = *(_OWORD *)(v21 + 16);
    int64_t v22 = *(_OWORD *)(v21 + 32);
    unint64_t v24 = *(_OWORD *)(v21 + 64);
    uint64_t v48 = *(_OWORD *)(v21 + 48);
    char v49 = v24;
    unint64_t v25 = *(_OWORD *)(v21 + 128);
    unint64_t v27 = *(_OWORD *)(v21 + 80);
    char v26 = *(_OWORD *)(v21 + 96);
    unint64_t v52 = *(_OWORD *)(v21 + 112);
    uint64_t v53 = v25;
    uint64_t v50 = v27;
    unint64_t v51 = v26;
    uint64_t v29 = *(_OWORD *)(v21 + 160);
    BOOL v28 = *(_OWORD *)(v21 + 176);
    uint64_t v30 = *(_OWORD *)(v21 + 144);
    unint64_t v57 = *(void *)(v21 + 192);
    uint64_t v55 = v29;
    uint64_t v56 = v28;
    uint64_t v54 = v30;
    uint64_t v45 = *(_OWORD *)v21;
    uint64_t v46 = v23;
    uint64_t v47 = v22;
    uint64_t v31 = (void *)(*(void *)(v4 + 48) + v16);
    *uint64_t v31 = v19;
    v31[1] = v18;
    uint64_t v32 = *(void *)(v4 + 56) + v20;
    *(_OWORD *)uint64_t v32 = v45;
    char v33 = v46;
    uint64_t v34 = v47;
    uint64_t v35 = v49;
    *(_OWORD *)(v32 + 4_Block_object_dispose(va, 8) = v48;
    *(_OWORD *)(v32 + std::__hash_table<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>>>::~__hash_table((uint64_t)this + 64) = v35;
    *(_OWORD *)(v32 + 16) = v33;
    *(_OWORD *)(v32 + 32) = v34;
    char v36 = v50;
    uint64_t v37 = v51;
    uint64_t v38 = v53;
    *(_OWORD *)(v32 + 112) = v52;
    *(_OWORD *)(v32 + 12_Block_object_dispose(va, 8) = v38;
    *(_OWORD *)(v32 + 80) = v36;
    *(_OWORD *)(v32 + 96) = v37;
    __int128 v39 = v54;
    unint64_t v40 = v55;
    unint64_t v41 = v56;
    *(void *)(v32 + 192) = v57;
    *(_OWORD *)(v32 + 160) = v40;
    *(_OWORD *)(v32 + std::__hash_table<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>>>::~__hash_table((uint64_t)this + 176) = v41;
    *(_OWORD *)(v32 + 144) = v39;
    swift_bridgeObjectRetain();
    uint64_t result = (void *)sub_186C24F18((uint64_t)&v45);
  }

  uint64_t v44 = v42 + 2;
  if (v44 >= v13) {
    goto LABEL_26;
  }
  uint64_t v43 = *(void *)(v6 + 8 * v44);
  if (v43)
  {
    int64_t v9 = v44;
    goto LABEL_25;
  }

  while (1)
  {
    int64_t v9 = v44 + 1;
    if (__OFADD__(v44, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    uint64_t v43 = *(void *)(v6 + 8 * v9);
    ++v44;
    if (v43) {
      goto LABEL_25;
    }
  }

    unint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    __int16 v17 = (void *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v18 = v17[1];
    uint64_t v19 = 8 * v15;
    int64_t v20 = *(void *)(*(void *)(v2 + 56) + v19);
    unint64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    *unint64_t v21 = *v17;
    v21[1] = v18;
    *(void *)(*(void *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain();
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }

  unint64_t v24 = v22 + 2;
  if (v24 >= v13) {
    goto LABEL_26;
  }
  unint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    int64_t v9 = v24;
    goto LABEL_25;
  }

  while (1)
  {
    int64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }

unint64_t sub_186C03D28(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_18C6A2450);
    uint64_t v3 = (void *)sub_186C5B38C();
    for (uint64_t i = (void *)(a1 + 40); ; i += 2)
    {
      unsigned __int16 v5 = *((_WORD *)i - 4);
      uint64_t v6 = *i;
      unint64_t result = sub_186C03824(v5);
      if ((v8 & 1) != 0) {
        break;
      }
      *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL) + 64) |= 1LL << result;
      *(_WORD *)(v3[6] + 2 * result) = v5;
      *(void *)(v3[7] + 8 * result) = v6;
      uint64_t v9 = v3[2];
      BOOL v10 = __OFADD__(v9, 1LL);
      uint64_t v11 = v9 + 1;
      if (v10) {
        goto LABEL_10;
      }
      int v3[2] = v11;
      if (!--v1) {
        return (unint64_t)v3;
      }
    }

    __break(1u);
LABEL_10:
    __break(1u);
  }

  else
  {
    return MEMORY[0x18961AFF0];
  }

  return result;
}

ValueMetadata *type metadata accessor for Prevalence()
{
  return &type metadata for Prevalence;
}

void *initializeBufferWithCopyOfBuffer for KdebugStatistics(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t destroy for KdebugStatistics()
{
  return swift_bridgeObjectRelease();
}

void *assignWithCopy for KdebugStatistics(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  return a1;
}

void *assignWithTake for KdebugStatistics(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  return a1;
}

uint64_t getEnumTagSinglePayload for KdebugStatistics(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *((_BYTE *)a1 + 16)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for KdebugStatistics(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)unint64_t result = a2 ^ 0x80000000;
    *(void *)(result + _Block_object_dispose(va, 8) = 0LL;
    if (a3 < 0) {
      *(_BYTE *)(result + 16) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)unint64_t result = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 16) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for KdebugStatistics()
{
  return &type metadata for KdebugStatistics;
}

void sub_186C03F60(uint64_t a1, uint64_t a2, char a3)
{
  __asm { BR              X10 }

uint64_t sub_186C03FA0( int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22)
{
  if (!strsignal(v22))
  {
    __break(1u);
    JUMPOUT(0x186C0427CLL);
  }

  sub_186C5ADE0();
  sub_186BFB8D0();
  uint64_t v23 = sub_186C5B104();
  swift_bridgeObjectRelease();
  sub_186C5B260();
  if (*(void *)(v23 + 16))
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    sub_186C5AD68();
  }

  swift_bridgeObjectRelease();
  sub_186C5ADD4();
  swift_bridgeObjectRelease();
  sub_186C5ADD4();
  sub_186C5B4DC();
  sub_186C5ADD4();
  swift_bridgeObjectRelease();
  sub_186C5ADD4();
  return 0LL;
}

uint64_t sub_186C0428C()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_186C042C0(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*sub_186C04304())()
{
  return j__swift_endAccess;
}

uint64_t sub_186C04340(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v7 = v3[3];
  sub_186C5B260();
  swift_bridgeObjectRelease();
  strcpy((char *)v18, "waking due to ");
  HIBYTE(v18[1]) = -18;
  sub_186C03F60(a1, a2, a3);
  sub_186C5ADD4();
  swift_bridgeObjectRelease();
  (*(void (**)(void, void))(*(void *)v7 + 224LL))(v18[0], v18[1]);
  swift_bridgeObjectRelease();
  char v8 = *(uint64_t (**)(void *))(*v3 + 112LL);
  sub_186C044C8(a1, a2, a3);
  uint64_t v9 = (uint64_t (*)(void *, void))v8(v18);
  uint64_t v11 = v10;
  unint64_t v12 = *v10;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *uint64_t v11 = v12;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    unint64_t v12 = sub_186C05340(0LL, *((void *)v12 + 2) + 1LL, 1, v12);
    *uint64_t v11 = v12;
  }

  unint64_t v15 = *((void *)v12 + 2);
  unint64_t v14 = *((void *)v12 + 3);
  if (v15 >= v14 >> 1)
  {
    unint64_t v12 = sub_186C05340((char *)(v14 > 1), v15 + 1, 1, v12);
    *uint64_t v11 = v12;
  }

  *((void *)v12 + 2) = v15 + 1;
  uint64_t v16 = &v12[24 * v15];
  *((void *)v16 + 4) = a1;
  *((void *)v16 + 5) = a2;
  v16[48] = a3;
  return v9(v18, 0LL);
}

uint64_t sub_186C044C8(uint64_t a1, uint64_t a2, char a3)
{
  if (a3 == 1) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_186C044E0(uint64_t a1)
{
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = MEMORY[0x18961AFE8];
  *(void *)(result + 24) = a1;
  return result;
}

uint64_t sub_186C04518()
{
  return swift_deallocClassInstance();
}

uint64_t sub_186C04544(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v6 = sub_186C05454(a1, a2, a3);
  swift_bridgeObjectRelease();
  return v6;
}

uint64_t sub_186C045BC(uint64_t result)
{
  uint64_t v3 = v2;
  uint64_t v4 = *(void *)(result + 16);
  if (v4)
  {
    uint64_t v5 = v1[3];
    uint64_t v6 = v1[4];
    uint64_t v7 = (void *)(result + 32);
    uint64_t v8 = v1[5];
    swift_bridgeObjectRetain();
    uint64_t v9 = v4 - 1;
    do
    {
      uint64_t v10 = v9;
      uint64_t v11 = v7[3];
      uint64_t v12 = v7[4];
      __swift_project_boxed_opaque_existential_1(v7, v11);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v12 + 8))(v5, v6, v8, v11, v12);
      if (v3) {
        break;
      }
      uint64_t v9 = v10 - 1;
      v7 += 5;
    }

    while (v10);
    return swift_bridgeObjectRelease();
  }

  return result;
}

uint64_t sub_186C04670()
{
  uint64_t v1 = sub_186C5B05C();
  return (*(uint64_t (**)(uint64_t))(**(void **)(v0 + 40) + 96LL))(v1);
}

uint64_t sub_186C046A4()
{
  swift_release();
  return swift_deallocClassInstance();
}

void sub_186C046E0(dispatch_queue_s *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v18 = *MEMORY[0x1895F89C0];
  int out_token = 0;
  uint64_t v10 = (void *)swift_allocObject();
  void v10[2] = a3;
  v10[3] = a4;
  v10[4] = a5;
  void v10[5] = a2;
  v16[4] = sub_186C05C5C;
  void v16[5] = v10;
  v16[0] = MEMORY[0x1895F87A8];
  v16[1] = 1107296256LL;
  _OWORD v16[2] = sub_186C0487C;
  v16[3] = &block_descriptor_8;
  uint64_t v11 = _Block_copy(v16);
  swift_retain();
  swift_bridgeObjectRetain();
  id v12 = a2;
  swift_release();
  uint64_t v13 = sub_186C5AD74();
  uint32_t v14 = notify_register_dispatch((const char *)(v13 + 32), &out_token, a1, v11);
  swift_release();
  _Block_release(v11);
  if (v14)
  {
    type metadata accessor for KTraceRecordError();
    sub_186BFCB04( (unint64_t *)&qword_18C6A21E0,  (uint64_t (*)(uint64_t))type metadata accessor for KTraceRecordError,  (uint64_t)&unk_186C60EF4);
    swift_allocError();
    uint32_t *v15 = v14;
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
  }

uint64_t sub_186C0487C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void (**)(uint64_t))(a1 + 32);
  swift_retain();
  v3(a2);
  return swift_release();
}

void sub_186C048B8(dispatch_queue_s *a1, void *a2, uint64_t a3)
{
}

uint64_t sub_186C048D0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  a3[3] = &type metadata for NotificationWaiter;
  a3[4] = &off_189F58230;
  *a3 = a1;
  a3[1] = a2;
  return swift_bridgeObjectRetain();
}

uint64_t sub_186C048F0(uint64_t a1, void *a2, uint64_t a3, unint64_t a4)
{
  uint64_t v29 = a1;
  uint64_t v7 = sub_186C5AC60();
  uint64_t v28 = *(void *)(v7 - 8);
  MEMORY[0x1895F8858](v7);
  uint64_t v9 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = sub_186C5AC78();
  uint64_t v26 = *(void *)(v10 - 8);
  uint64_t v27 = v10;
  MEMORY[0x1895F8858](v10);
  id v12 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = sub_186C5AC90();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = MEMORY[0x1895F8858](v13);
  __int16 v17 = (char *)&v25 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v15);
  uint64_t v19 = (char *)&v25 - v18;
  sub_186C5AC84();
  MEMORY[0x186E44698](v17, (double)a4 / 1000000000.0);
  int64_t v20 = *(void (**)(char *, uint64_t))(v14 + 8);
  v20(v17, v13);
  uint64_t v21 = swift_allocObject();
  *(void *)(v21 + 16) = a3;
  *(double *)(v21 + 24) = (double)a4 / 1000000000.0;
  *(void *)(v21 + 32) = a2;
  aBlock[4] = sub_186C05CC4;
  void aBlock[5] = v21;
  aBlock[0] = MEMORY[0x1895F87A8];
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_186C04B7C;
  aBlock[3] = &block_descriptor_14;
  int v22 = _Block_copy(aBlock);
  swift_retain();
  id v23 = a2;
  sub_186C5AC6C();
  uint64_t v30 = MEMORY[0x18961AFE8];
  sub_186BFCB04(&qword_18C6A2468, (uint64_t (*)(uint64_t))MEMORY[0x18961B6A0], MEMORY[0x18961B6B8]);
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C6A2470);
  sub_186C056B0();
  sub_186C5B1F4();
  MEMORY[0x186E449EC](v19, v12, v9, v22);
  _Block_release(v22);
  (*(void (**)(char *, uint64_t))(v28 + 8))(v9, v7);
  (*(void (**)(char *, uint64_t))(v26 + 8))(v12, v27);
  v20(v19, v13);
  return swift_release();
}

uint64_t sub_186C04B80(uint64_t a1, void *a2, uint64_t a3)
{
  return sub_186C048F0(a1, a2, a3, *v3);
}

uint64_t sub_186C04BA8(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v4 = v3;
  int v22 = a2;
  uint64_t v21 = sub_186C5AC60();
  uint64_t v6 = *(void *)(v21 - 8);
  MEMORY[0x1895F8858](v21);
  uint64_t v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = sub_186C5AC78();
  uint64_t v23 = *(void *)(v9 - 8);
  MEMORY[0x1895F8858](v9);
  uint64_t v11 = (char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  int v12 = *(_DWORD *)(v3 + 16);
  uint64_t v13 = (void (__cdecl *)(int))sub_186C5ABE8();
  signal(v12, v13);
  sub_186C05D04();
  *(void *)(v4 + 24) = sub_186C5B014();
  uint64_t result = swift_unknownObjectRelease();
  if (*(void *)(v4 + 24))
  {
    swift_getObjectType();
    uint64_t v15 = (void *)swift_allocObject();
    v15[2] = a3;
    v15[3] = v4;
    uint64_t v16 = v22;
    _OWORD v15[4] = v22;
    aBlock[4] = sub_186C05D78;
    void aBlock[5] = v15;
    aBlock[0] = MEMORY[0x1895F87A8];
    aBlock[1] = 1107296256LL;
    aBlock[2] = sub_186C04B7C;
    aBlock[3] = &block_descriptor_20;
    __int16 v17 = _Block_copy(aBlock);
    uint64_t v20 = v6;
    uint64_t v18 = v17;
    swift_unknownObjectRetain();
    swift_retain();
    swift_retain();
    id v19 = v16;
    sub_186C5AC6C();
    sub_186C04E0C();
    sub_186C5B020();
    _Block_release(v18);
    swift_unknownObjectRelease();
    (*(void (**)(char *, uint64_t))(v20 + 8))(v8, v21);
    (*(void (**)(char *, uint64_t))(v23 + 8))(v11, v9);
    uint64_t result = swift_release();
    if (*(void *)(v4 + 24))
    {
      swift_getObjectType();
      swift_unknownObjectRetain();
      sub_186C5B038();
      return swift_unknownObjectRelease();
    }
  }

  return result;
}

uint64_t sub_186C04DE0(uint64_t a1)
{
  uint64_t v1 = *(void (**)(uint64_t))(a1 + 32);
  uint64_t v2 = swift_retain();
  v1(v2);
  return swift_release();
}

uint64_t sub_186C04E0C()
{
  return sub_186C5B1F4();
}

uint64_t sub_186C04EA0()
{
  return swift_deallocClassInstance();
}

uint64_t sub_186C04EC4(uint64_t a1, void *a2, uint64_t a3)
{
  return sub_186C04BA8(a1, a2, a3);
}

uint64_t sub_186C04EE4@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t *a4@<X8>)
{
  int v4 = result;
  if (a3)
  {
    if (a3 == 1)
    {
      a4[3] = (uint64_t)&type metadata for TimeWaiter;
      a4[4] = (uint64_t)&off_189F58220;
      *a4 = result;
    }

    else
    {
      a4[3] = (uint64_t)&type metadata for NotificationWaiter;
      a4[4] = (uint64_t)&off_189F58230;
      *a4 = result;
      a4[1] = a2;
      return swift_bridgeObjectRetain();
    }
  }

  else
  {
    uint64_t v6 = type metadata accessor for SignalWaiter();
    uint64_t result = swift_allocObject();
    *(void *)(result + 24) = 0LL;
    *(_DWORD *)(result + 16) = v4;
    a4[3] = v6;
    a4[4] = (uint64_t)&off_189F58210;
    *a4 = result;
  }

  return result;
}

unint64_t sub_186C04F90()
{
  return *(unsigned int *)(v0 + 24) | ((unint64_t)*(unsigned __int8 *)(v0 + 28) << 32);
}

uint64_t sub_186C04FD0(uint64_t a1)
{
  uint64_t result = swift_beginAccess();
  *(_DWORD *)(v1 + 24) = a1;
  *(_BYTE *)(v1 + 2_Block_object_dispose(va, 8) = BYTE4(a1) & 1;
  return result;
}

uint64_t (*sub_186C05014())()
{
  return j_j__swift_endAccess;
}

uint64_t sub_186C05050(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v18 = a1;
  uint64_t v6 = sub_186C5AC60();
  uint64_t v17 = *(void *)(v6 - 8);
  MEMORY[0x1895F8858](v6);
  uint64_t v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = sub_186C5AC78();
  uint64_t v9 = *(void *)(v16 - 8);
  MEMORY[0x1895F8858](v16);
  uint64_t v11 = (char *)&v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  dispatch_group_enter(*(dispatch_group_t *)(v3 + 16));
  int v12 = (void *)swift_allocObject();
  void v12[2] = v3;
  uint64_t v12[3] = a3;
  v12[4] = a2;
  aBlock[4] = sub_186C05624;
  void aBlock[5] = v12;
  aBlock[0] = MEMORY[0x1895F87A8];
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_186C04B7C;
  aBlock[3] = &block_descriptor;
  uint64_t v13 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  id v14 = a2;
  sub_186C5AC6C();
  void aBlock[7] = MEMORY[0x18961AFE8];
  sub_186BFCB04(&qword_18C6A2468, (uint64_t (*)(uint64_t))MEMORY[0x18961B6A0], MEMORY[0x18961B6B8]);
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C6A2470);
  sub_186C056B0();
  sub_186C5B1F4();
  sub_186C5AFD8();
  _Block_release(v13);
  (*(void (**)(char *, uint64_t))(v17 + 8))(v8, v6);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v16);
  return swift_release();
}

void sub_186C05248(unsigned int a1)
{
}

uint64_t sub_186C05280()
{
  return swift_deallocClassInstance();
}

uint64_t sub_186C052A4()
{
  uint64_t v0 = swift_allocObject();
  *(void *)(v0 + 16) = dispatch_group_create();
  *(_DWORD *)(v0 + 24) = 0;
  *(_BYTE *)(v0 + 2_Block_object_dispose(va, 8) = 1;
  return v0;
}

uint64_t sub_186C052E8()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 120LL))();
}

BOOL sub_186C05310(_DWORD *a1, _DWORD *a2)
{
  return *a1 == *a2;
}

_DWORD *sub_186C05324@<X0>(_DWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_DWORD *)a2 = *result;
  *(_BYTE *)(a2 + 4) = 0;
  return result;
}

void sub_186C05334(_DWORD *a1@<X8>)
{
  *a1 = *v1;
}

char *sub_186C05340(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_18C6A24F8);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 24);
  }

  else
  {
    uint64_t v10 = (char *)MEMORY[0x18961AFE8];
  }

  int v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[24 * v8]) {
      memmove(v12, v13, 24 * v8);
    }
    *((void *)a4 + 2) = 0LL;
  }

  else
  {
    swift_arrayInitWithCopy();
  }

  swift_bridgeObjectRelease();
  return v10;
}

uint64_t sub_186C05454(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v5 = v4;
  dispatch_semaphore_t v9 = dispatch_semaphore_create(0LL);
  *(void *)(v3 + 24) = a2;
  *(void *)(v3 + 32) = v9;
  *(_BYTE *)(v3 + 4_Block_object_dispose(va, 8) = 0;
  *(void *)(v3 + 16) = a1;
  type metadata accessor for WakeListener();
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = MEMORY[0x18961AFE8];
  *(void *)(v10 + 24) = a3;
  *(void *)(v3 + 40) = v10;
  uint64_t v11 = *(void *)(a1 + 16);
  if (v11)
  {
    int v12 = (void *)(a1 + 32);
    swift_bridgeObjectRetain();
    uint64_t v23 = a2;
    id v22 = a2;
    swift_retain();
    while (1)
    {
      uint64_t v24 = v5;
      uint64_t v14 = v12[3];
      uint64_t v13 = v12[4];
      __swift_project_boxed_opaque_existential_1(v12, v14);
      uint64_t v15 = *(void **)(v3 + 32);
      uint64_t v16 = *(void *)(v3 + 40);
      uint64_t v17 = *(void (**)(id, id, uint64_t, uint64_t, uint64_t))(v13 + 8);
      id v18 = *(id *)(v3 + 24);
      id v19 = v15;
      swift_retain();
      v17(v18, v19, v16, v14, v13);
      uint64_t v5 = v24;
      if (v24) {
        break;
      }

      swift_release();
      v12 += 5;
      if (!--v11)
      {
        swift_release();

        return v3;
      }
    }

    swift_release();

    swift_release();
    swift_release();
  }

  else
  {
    swift_bridgeObjectRetain();
    id v20 = a2;
  }

  return v3;
}

void *__swift_project_boxed_opaque_existential_1(void *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80LL) & 0x20000) != 0) {
    return (void *)(*result
  }
                    + ((*(_DWORD *)(*(void *)(a2 - 8) + 80LL) + 16LL) & ~(unint64_t)*(_DWORD *)(*(void *)(a2 - 8) + 80LL)));
  return result;
}

uint64_t type metadata accessor for SignalWaiter()
{
  return objc_opt_self();
}

uint64_t sub_186C05624()
{
  uint64_t v1 = *(void *)(v0 + 24);
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(v0 + 16) + 96LL))();
  if ((result & 0x100000000LL) == 0)
  {
    if ((result - 4) <= 2) {
      (*(void (**)(void, void, uint64_t))(*(void *)v1 + 120LL))( qword_186C5EFC0[(int)result - 4],  0LL,  3LL);
    }
    return sub_186C5B068();
  }

  return result;
}

uint64_t block_copy_helper(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper()
{
  return swift_release();
}

unint64_t sub_186C056B0()
{
  unint64_t result = qword_18C6A2478;
  if (!qword_18C6A2478)
  {
    uint64_t v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_18C6A2470);
    unint64_t result = MEMORY[0x186E46630](MEMORY[0x189618470], v1);
    atomic_store(result, (unint64_t *)&qword_18C6A2478);
  }

  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for WakeReason(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  return sub_186C058C4(a1, a2, a3, (void (*)(void, uint64_t, uint64_t))sub_186C044C8);
}

uint64_t destroy for WakeReason(uint64_t a1)
{
  return sub_186C05718(*(void *)a1, *(void *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t sub_186C05718(uint64_t a1, uint64_t a2, char a3)
{
  if (a3 == 1) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t *assignWithCopy for WakeReason(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return sub_186C05920( a1,  a2,  a3,  (void (*)(void, uint64_t, uint64_t))sub_186C044C8,  (void (*)(uint64_t, uint64_t, uint64_t))sub_186C05718);
}

uint64_t *assignWithTake for WakeReason(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return sub_186C0598C(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t))sub_186C05718);
}

uint64_t getEnumTagSinglePayload for WakeReason(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0xFD && *(_BYTE *)(a1 + 17)) {
    return (*(_DWORD *)a1 + 253);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 3) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for WakeReason(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(_BYTE *)(result + 16) = 0;
    *(void *)uint64_t result = a2 - 253;
    *(void *)(result + _Block_object_dispose(va, 8) = 0LL;
    if (a3 >= 0xFD) {
      *(_BYTE *)(result + 17) = 1;
    }
  }

  else
  {
    if (a3 >= 0xFD) {
      *(_BYTE *)(result + 17) = 0;
    }
    if (a2) {
      *(_BYTE *)(result + 16) = -(char)a2;
    }
  }

  return result;
}

uint64_t sub_186C057DC(uint64_t a1)
{
  else {
    return (*(_DWORD *)a1 + 3);
  }
}

uint64_t sub_186C057F4(uint64_t result, unsigned int a2)
{
  if (a2 >= 3)
  {
    *(void *)uint64_t result = a2 - 3;
    *(void *)(result + _Block_object_dispose(va, 8) = 0LL;
    LOBYTE(a2) = 3;
  }

  *(_BYTE *)(result + 16) = a2;
  return result;
}

ValueMetadata *type metadata accessor for WakeReason()
{
  return &type metadata for WakeReason;
}

uint64_t type metadata accessor for WakeListener()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for WaitGroup()
{
  return objc_opt_self();
}

ValueMetadata *type metadata accessor for StartWait()
{
  return &type metadata for StartWait;
}

uint64_t initializeBufferWithCopyOfBuffer for EndWait(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  return sub_186C058C4(a1, a2, a3, (void (*)(void, uint64_t, uint64_t))sub_186C05884);
}

uint64_t sub_186C05884(uint64_t a1, uint64_t a2, char a3)
{
  if (a3 == 2) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t destroy for EndWait(uint64_t a1)
{
  return sub_186C058AC(*(void *)a1, *(void *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t sub_186C058AC(uint64_t a1, uint64_t a2, char a3)
{
  if (a3 == 2) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_186C058C4(uint64_t a1, uint64_t *a2, uint64_t a3, void (*a4)(void, uint64_t, uint64_t))
{
  uint64_t v5 = *a2;
  uint64_t v6 = a2[1];
  uint64_t v7 = *((unsigned __int8 *)a2 + 16);
  a4(*a2, v6, v7);
  *(void *)a1 = v5;
  *(void *)(a1 + _Block_object_dispose(va, 8) = v6;
  *(_BYTE *)(a1 + 16) = v7;
  return a1;
}

uint64_t *assignWithCopy for EndWait(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return sub_186C05920( a1,  a2,  a3,  (void (*)(void, uint64_t, uint64_t))sub_186C05884,  (void (*)(uint64_t, uint64_t, uint64_t))sub_186C058AC);
}

uint64_t *sub_186C05920( uint64_t *a1, uint64_t *a2, uint64_t a3, void (*a4)(void, uint64_t, uint64_t), void (*a5)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v7 = *a2;
  uint64_t v8 = a2[1];
  uint64_t v9 = *((unsigned __int8 *)a2 + 16);
  a4(*a2, v8, v9);
  uint64_t v10 = *a1;
  uint64_t v11 = a1[1];
  *a1 = v7;
  a1[1] = v8;
  uint64_t v12 = *((unsigned __int8 *)a1 + 16);
  *((_BYTE *)a1 + 16) = v9;
  a5(v10, v11, v12);
  return a1;
}

uint64_t *assignWithTake for EndWait(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return sub_186C0598C(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t))sub_186C058AC);
}

uint64_t *sub_186C0598C( uint64_t *a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t, uint64_t))
{
  char v5 = *(_BYTE *)(a2 + 16);
  uint64_t v6 = *a1;
  uint64_t v7 = a1[1];
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v8 = *((unsigned __int8 *)a1 + 16);
  *((_BYTE *)a1 + 16) = v5;
  a4(v6, v7, v8);
  return a1;
}

uint64_t getEnumTagSinglePayload for EndWait(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 17)) {
    return (*(_DWORD *)a1 + 254);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 2) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for EndWait(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_BYTE *)(result + 16) = 0;
    *(void *)uint64_t result = a2 - 254;
    *(void *)(result + _Block_object_dispose(va, 8) = 0LL;
    if (a3 >= 0xFE) {
      *(_BYTE *)(result + 17) = 1;
    }
  }

  else
  {
    if (a3 >= 0xFE) {
      *(_BYTE *)(result + 17) = 0;
    }
    if (a2) {
      *(_BYTE *)(result + 16) = -(char)a2;
    }
  }

  return result;
}

uint64_t sub_186C05A5C(uint64_t result, char a2)
{
  *(_BYTE *)(result + 16) = a2;
  return result;
}

ValueMetadata *type metadata accessor for EndWait()
{
  return &type metadata for EndWait;
}

uint64_t type metadata accessor for KernelDisableWaiter()
{
  return objc_opt_self();
}

void type metadata accessor for ktrace_end_reason()
{
  if (!qword_18C6A24E0)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v1) {
      atomic_store(ForeignTypeMetadata, (unint64_t *)&qword_18C6A24E0);
    }
  }

ValueMetadata *type metadata accessor for TimeWaiter()
{
  return &type metadata for TimeWaiter;
}

void *initializeBufferWithCopyOfBuffer for NotificationWaiter(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for TraceFileProvenance(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *assignWithTake for NotificationWaiter(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for TraceFileProvenance(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 16)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for TraceFileProvenance(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)uint64_t result = a2 ^ 0x80000000;
    *(void *)(result + _Block_object_dispose(va, 8) = 0LL;
    if (a3 < 0) {
      *(_BYTE *)(result + 16) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + _Block_object_dispose(va, 8) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 16) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for NotificationWaiter()
{
  return &type metadata for NotificationWaiter;
}

uint64_t sub_186C05C28()
{
  return swift_deallocObject();
}

uint64_t sub_186C05C5C()
{
  return sub_186C5B068();
}

uint64_t sub_186C05C98()
{
  return swift_deallocObject();
}

uint64_t sub_186C05CC4()
{
  return sub_186C5B068();
}

unint64_t sub_186C05D04()
{
  unint64_t result = qword_18C6A24F0;
  if (!qword_18C6A24F0)
  {
    objc_opt_self();
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_18C6A24F0);
  }

  return result;
}

uint64_t objectdestroyTm()
{
  return swift_deallocObject();
}

uint64_t sub_186C05D78()
{
  return sub_186C5B068();
}

void *sub_186C05DE4()
{
  return &unk_186C5F060;
}

uint64_t sub_186C05DF0@<X0>(uint64_t a1@<X0>, char *a2@<X1>, char *a3@<X2>, char a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v9 = (int *)type metadata accessor for RecordingOptions.Options(0LL);
  uint64_t v10 = (uint64_t *)(a1 + v9[32]);
  uint64_t v11 = v10[1];
  uint64_t v74 = *v10;
  char v75 = *(_BYTE *)(a1 + v9[16]);
  uint64_t v12 = *(void *)(a1 + v9[24]);
  swift_bridgeObjectRetain_n();
  uint64_t v73 = v11;
  swift_bridgeObjectRetain();
  uint64_t v13 = (char *)sub_186C09B98(v12);
  swift_bridgeObjectRelease();
  v78[0] = v13;
  sub_186C09B30(v78);
  swift_bridgeObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C6A21A8);
  sub_186BF0620();
  uint64_t v14 = sub_186C5ACD8();
  uint64_t v69 = v15;
  uint64_t v70 = v14;
  swift_release();
  uint64_t v16 = *(void *)(a1 + v9[25]);
  swift_bridgeObjectRetain_n();
  uint64_t v17 = (char *)sub_186C09B98(v16);
  swift_bridgeObjectRelease();
  v78[0] = v17;
  sub_186C09B30(v78);
  swift_bridgeObjectRelease();
  uint64_t v18 = sub_186C5ACD8();
  uint64_t v67 = v19;
  uint64_t v68 = v18;
  swift_release();
  v78[0] = a2;
  swift_bridgeObjectRetain();
  sub_186C09B30(v78);
  swift_bridgeObjectRelease();
  uint64_t v20 = sub_186C5ACD8();
  uint64_t v66 = v21;
  swift_release();
  v78[0] = a3;
  swift_bridgeObjectRetain();
  sub_186C09B30(v78);
  swift_bridgeObjectRelease();
  uint64_t v77 = sub_186C5ACD8();
  uint64_t v76 = v22;
  swift_release();
  uint64_t v23 = a1 + v9[9];
  uint64_t v24 = a1 + v9[15];
  char v25 = *(_BYTE *)(v24 + 8);
  double v26 = 0.0;
  if ((v25 & 1) == 0) {
    double v26 = (double)*(unint64_t *)v24 / 1000000.0;
  }
  uint64_t v27 = a1 + v9[10];
  int v28 = *(_DWORD *)v27;
  char v29 = *(_BYTE *)(v27 + 4);
  uint64_t v30 = a1 + v9[11];
  unint64_t v31 = *(void *)v30;
  char v32 = *(_BYTE *)(v30 + 8);
  if ((v32 & 1) == 0)
  {
    if (v31 >> 58)
    {
      __break(1u);
      goto LABEL_18;
    }

    v31 <<= 6;
  }

  uint64_t v33 = a1 + v9[30];
  char v34 = *(_BYTE *)(v33 + 8);
  double v35 = 0.0;
  if ((v34 & 1) == 0) {
    double v35 = (double)*(unint64_t *)v33 / 1000000000.0;
  }
  uint64_t v36 = v9[20];
  uint64_t v37 = (uint64_t *)(a1 + v9[19]);
  uint64_t v39 = *v37;
  uint64_t v38 = v37[1];
  uint64_t v40 = a1 + v9[21];
  char v41 = *(_BYTE *)(v40 + 8);
  uint64_t v64 = v20;
  uint64_t v65 = *(void *)v23;
  unint64_t v63 = v31;
  char v61 = *(_BYTE *)(a1 + v9[18]);
  int v62 = v28;
  char v59 = *(_BYTE *)(a1 + v9[28]);
  char v60 = *(_BYTE *)(a1 + v9[27]);
  char v57 = v32;
  char v58 = *(_BYTE *)(a1 + v9[17]);
  uint64_t v55 = v39;
  uint64_t v56 = *(void *)(a1 + v36);
  char v53 = v34;
  char v54 = *(_BYTE *)(a1 + v9[14]);
  if ((v41 & 1) == 0)
  {
    unint64_t v44 = *(void *)v40;
    if ((v44 & 0x8000000000000000LL) == 0)
    {
      if (!(v44 >> 54))
      {
        if ((v44 & 0x3FF00000000000LL) == 0)
        {
          char v42 = v29;
          char v43 = *(_BYTE *)(v23 + 8);
          uint64_t v49 = v44 << 20;
          goto LABEL_14;
        }

uint64_t sub_186C062C8(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_186C062FC + 4 * byte_186C5EFE0[a1]))( 0x656D614E6E616C70LL,  0xE800000000000000LL);
}

uint64_t sub_186C062FC()
{
  return 0x6465646461LL;
}

uint64_t sub_186C06310()
{
  return 0x64657474696D6FLL;
}

uint64_t sub_186C06328()
{
  return 0x72656469766F7270LL;
}

uint64_t sub_186C06348()
{
  return 0x73726579616CLL;
}

unint64_t sub_186C0635C()
{
  return 0xD000000000000017LL;
}

uint64_t sub_186C0651C()
{
  return sub_186C062C8(*v0);
}

uint64_t sub_186C06524@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_186C0AD3C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_186C06548()
{
  return 0LL;
}

void sub_186C06554(_BYTE *a1@<X8>)
{
  *a1 = 23;
}

uint64_t sub_186C06560()
{
  return sub_186C5B608();
}

uint64_t sub_186C06588()
{
  return sub_186C5B614();
}

uint64_t sub_186C065B0(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C6A25C0);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1895F8858](v5);
  uint64_t v8 = &v11[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_186C0AB64();
  sub_186C5B5F0();
  char v12 = 0;
  sub_186C5B47C();
  if (!v2)
  {
    char v12 = 1;
    sub_186C5B428();
    char v12 = 2;
    sub_186C5B428();
    char v12 = 3;
    sub_186C5B47C();
    char v12 = 4;
    sub_186C5B47C();
    char v12 = 5;
    sub_186C5B440();
    char v12 = 6;
    sub_186C5B440();
    char v12 = 7;
    sub_186C5B488();
    char v12 = 8;
    sub_186C5B488();
    char v12 = 9;
    sub_186C5B488();
    char v9 = *(_BYTE *)(v3 + 112);
    char v12 = 10;
    v11[12] = v9;
    sub_186C5B464();
    char v12 = 11;
    sub_186C5B470();
    char v12 = 12;
    sub_186C5B488();
    char v12 = 13;
    sub_186C5B440();
    char v12 = 14;
    sub_186C5B488();
    char v12 = 15;
    sub_186C5B488();
    char v12 = 16;
    sub_186C5B488();
    char v12 = 17;
    sub_186C5B488();
    char v12 = 18;
    sub_186C5B488();
    char v12 = 19;
    sub_186C5B428();
    char v12 = 20;
    sub_186C5B428();
    char v12 = 21;
    sub_186C5B470();
    char v12 = 22;
    sub_186C5B44C();
  }

  return (*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_186C06A34(void *a1)
{
  return sub_186C065B0(a1);
}

uint64_t sub_186C06A48@<X0>(uint64_t a1@<X8>)
{
  return sub_186BFA418((uint64_t)v4, a1, &qword_18C6A25C8);
}

uint64_t sub_186C06AC4(uint64_t a1)
{
  uint64_t v3 = v1 + 64;
  swift_beginAccess();
  sub_186BFA418(v3, (uint64_t)v5, &qword_18C6A25C8);
  sub_186BFA418(a1, v3, &qword_18C6A25C8);
  sub_186C0AC4C( a1,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))sub_186C0ABD0);
  sub_186C0AC4C( (uint64_t)v5,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))sub_186C0ACC0);
  return sub_186C0AC4C( a1,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))sub_186C0ACC0);
}

uint64_t (*sub_186C06B60())()
{
  return j_j__swift_endAccess;
}

void sub_186C06B9C(char *a1)
{
}

void sub_186C06BA8(char a1)
{
  __asm { BR              X10 }

uint64_t sub_186C06BF8(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_186C06CCC + 4 * byte_186C5F007[a2]))(0x7075746573LL);
}

uint64_t sub_186C06CCC(uint64_t a1)
{
  if (a1 == 0x7075746573LL && v1 == 0xE500000000000000LL) {
    char v2 = 1;
  }
  else {
    char v2 = sub_186C5B4F4();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

void sub_186C06E00()
{
}

void sub_186C06E0C(uint64_t a1)
{
}

void sub_186C06E14(uint64_t a1, char a2)
{
  __asm { BR              X10 }

uint64_t sub_186C06E54()
{
  return swift_bridgeObjectRelease();
}

void sub_186C06F20(uint64_t a1)
{
}

void sub_186C06F28(uint64_t a1, char a2)
{
  __asm { BR              X10 }

uint64_t sub_186C06F74()
{
  return sub_186C5B5D8();
}

uint64_t sub_186C07054@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result = sub_186C0B660();
  *a1 = result;
  return result;
}

uint64_t sub_186C07080()
{
  return ((uint64_t (*)(void))((char *)sub_186C070B0 + 4 * byte_186C5F01F[*v0]))();
}

void sub_186C070B0(void *a1@<X8>)
{
  *a1 = 0x7075746573LL;
  a1[1] = 0xE500000000000000LL;
}

void sub_186C070C8(char *a1@<X8>)
{
  a1[15] = -18;
}

void sub_186C070F0(void *a1@<X8>)
{
  *a1 = 0x676E697472617473LL;
  a1[1] = 0xE800000000000000LL;
}

void sub_186C0710C(void *a1@<X8>)
{
  *a1 = 0x6E6964726F636572LL;
  a1[1] = 0xE900000000000067LL;
}

void sub_186C0712C(void *a1@<X8>)
{
  *a1 = 0x6E776F6472616574LL;
  a1[1] = 0xE800000000000000LL;
}

void sub_186C07148(void *a1@<X8>)
{
  *a1 = 0x636F725074736F70LL;
  a1[1] = 0xEB00000000737365LL;
}

void sub_186C0716C(void *a1@<X8>)
{
  *a1 = 0x6C61746F74LL;
  a1[1] = 0xE500000000000000LL;
}

uint64_t sub_186C07184()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_186C071B8(uint64_t a1)
{
  *(void *)(v1 + 280) = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*sub_186C071FC())()
{
  return j_j__swift_endAccess;
}

uint64_t sub_186C07238()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_186C0726C(uint64_t a1)
{
  *(void *)(v1 + 28_Block_object_dispose(va, 8) = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*sub_186C072B0())()
{
  return j_j__swift_endAccess;
}

unint64_t sub_186C072EC(char a1, char **a2, char *a3, unint64_t a4, char a5)
{
  double v14 = sub_186C0AA54();
  double v16 = v14;
  double v17 = v15;
  if ((a5 & 1) == 0)
  {
    BOOL v18 = v13 >= a4;
    unint64_t v19 = v13 - a4;
    if (!v18) {
      goto LABEL_11;
    }
    double v6 = *(double *)&a2;
    double v7 = *(double *)&a3;
LABEL_7:
    uint64_t v5 = (unint64_t *)(*(uint64_t (**)(_BYTE *))(*v5 + 224))(v27);
    a2 = v21;
    a3 = *v21;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *a2 = a3;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0) {
      goto LABEL_8;
    }
    goto LABEL_12;
  }

  unint64_t v20 = v5[7];
  unint64_t v19 = v13 - v20;
  if (v13 >= v20)
  {
    double v6 = *((double *)v5 + 5);
    double v7 = *((double *)v5 + 6);
    *((double *)v5 + 5) = v14;
    *((double *)v5 + 6) = v15;
    void v5[7] = v13;
    goto LABEL_7;
  }

uint64_t sub_186C07440(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_186C07478 + 4 * byte_186C5F027[a1]))( 0xD000000000000010LL,  0x8000000186C65E50LL);
}

  ;
}

uint64_t sub_186C074E0()
{
  return sub_186C07440(*v0);
}

uint64_t sub_186C074E8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_186C0B730(a1, a2);
  *a3 = result;
  return result;
}

void sub_186C0750C(_BYTE *a1@<X8>)
{
  *a1 = 6;
}

uint64_t sub_186C07518()
{
  return sub_186C5B608();
}

uint64_t sub_186C07540()
{
  return sub_186C5B614();
}

uint64_t sub_186C07568(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C6A25D0);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1895F8858](v3);
  double v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_186C0B6A8();
  sub_186C5B5F0();
  v8[15] = 0;
  sub_186C5B4B8();
  if (!v1)
  {
    v8[14] = 1;
    sub_186C5B4B8();
    v8[13] = 2;
    sub_186C5B4B8();
    v8[12] = 3;
    sub_186C5B4B8();
    v8[11] = 4;
    sub_186C5B4B8();
    v8[10] = 5;
    sub_186C5B4B8();
  }

  return (*(uint64_t (**)(_BYTE *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t sub_186C0771C@<X0>( uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, void *a7@<X8>)
{
  *a7 = result;
  a7[1] = a2;
  a7[2] = a3;
  a7[3] = a4;
  a7[4] = a5;
  a7[5] = a6;
  return result;
}

uint64_t sub_186C0772C(void *a1)
{
  return sub_186C07568(a1);
}

uint64_t sub_186C07740()
{
  uint64_t v1 = (*(uint64_t (**)(void))(*(void *)v0 + 208LL))();
  if (*(void *)(v1 + 16)) {
    __asm { BR              X9 }
  }

  return swift_bridgeObjectRelease();
}

uint64_t sub_186C07B68()
{
  uint64_t v1 = swift_allocObject();
  *(_OWORD *)(v1 + 16) = xmmword_186C5F740;
  *(void *)(v1 + 32) = 0x764567756265644BLL;
  *(void *)(v1 + 40) = 0xEF65747942746E65LL;
  uint64_t result = swift_beginAccess();
  if ((*(_BYTE *)(v0 + 344) & 1) == 0)
  {
    unint64_t v3 = *(void *)(v0 + 296);
    *(double *)(v1 + 4_Block_object_dispose(va, 8) = (double)*(unint64_t *)(v0 + 304);
    *(double *)(v1 + 72) = (double)v3;
    unint64_t v4 = *(void *)(v0 + 336);
    *(double *)(v1 + 96) = (double)*(unint64_t *)(v0 + 328);
    *(void *)(v1 + 56) = 0x764567756265644BLL;
    *(void *)(v1 + std::__hash_table<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>>>::~__hash_table((uint64_t)this + 64) = 0xEB00000000746E65LL;
    *(void *)(v1 + 80) = 0x6441736B6E756843LL;
    *(void *)(v1 + 8_Block_object_dispose(va, 8) = 0xEB00000000646564LL;
    *(void *)(v1 + 104) = 0x6564644165747942LL;
    *(void *)(v1 + 112) = 0xE900000000000064LL;
    *(double *)(v1 + 120) = (double)v4;
    uint64_t v5 = *(void (**)(uint64_t, uint64_t))(*(void *)v0 + 264LL);
    v5(6LL, v1);
    swift_bridgeObjectRelease();
    uint64_t result = swift_allocObject();
    *(_OWORD *)(result + 16) = xmmword_186C5F750;
    *(void *)(result + 32) = 0x764567756265644BLL;
    *(void *)(result + 40) = 0xEF65747942746E65LL;
    if ((*(_BYTE *)(v0 + 344) & 1) == 0)
    {
      unint64_t v6 = *(void *)(v0 + 296);
      *(double *)(result + 4_Block_object_dispose(va, 8) = (double)*(unint64_t *)(v0 + 304);
      *(void *)(result + 56) = 0x764567756265644BLL;
      *(void *)(result + std::__hash_table<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>>>::~__hash_table((uint64_t)this + 64) = 0xEB00000000746E65LL;
      *(double *)(result + 72) = (double)v6;
      v5(4LL, result);
      swift_bridgeObjectRelease();
      uint64_t result = swift_allocObject();
      *(_OWORD *)(result + 16) = xmmword_186C5F750;
      *(void *)(result + 32) = 0x764567756265644BLL;
      *(void *)(result + 40) = 0xEF65747942746E65LL;
      if ((*(_BYTE *)(v0 + 344) & 1) == 0)
      {
        unint64_t v7 = *(void *)(v0 + 296);
        *(double *)(result + 4_Block_object_dispose(va, 8) = (double)*(unint64_t *)(v0 + 304);
        *(void *)(result + 56) = 0x764567756265644BLL;
        *(void *)(result + std::__hash_table<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>>>::~__hash_table((uint64_t)this + 64) = 0xEB00000000746E65LL;
        *(double *)(result + 72) = (double)v7;
        v5(5LL, result);
        return swift_bridgeObjectRelease();
      }
    }

    __break(1u);
  }

  __break(1u);
  return result;
}

__n128 sub_186C07D5C@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + 296;
  swift_beginAccess();
  char v4 = *(_BYTE *)(v3 + 48);
  __int128 v5 = *(_OWORD *)(v3 + 16);
  *(_OWORD *)a1 = *(_OWORD *)v3;
  *(_OWORD *)(a1 + 16) = v5;
  __n128 result = *(__n128 *)(v3 + 32);
  *(__n128 *)(a1 + 32) = result;
  *(_BYTE *)(a1 + 4_Block_object_dispose(va, 8) = v4;
  return result;
}

uint64_t sub_186C07DB0(uint64_t a1)
{
  return sub_186C07B68();
}

uint64_t (*sub_186C07E0C(uint64_t a1))(uint64_t a1, char a2)
{
  *(void *)(a1 + 24) = v1;
  swift_beginAccess();
  return sub_186C07E4C;
}

uint64_t sub_186C07E4C(uint64_t a1, char a2)
{
  uint64_t result = swift_endAccess();
  if ((a2 & 1) == 0) {
    return sub_186C07B68();
  }
  return result;
}

unint64_t sub_186C07E7C(char a1)
{
  unint64_t result = 0xD000000000000010LL;
  if (a1)
  {
    if (a1 == 1) {
      return 0xD00000000000001CLL;
    }
    else {
      return 0xD000000000000015LL;
    }
  }

  return result;
}

uint64_t sub_186C07EDC()
{
  return sub_186C5B5A8();
}

unint64_t sub_186C07F04()
{
  return sub_186C07E7C(*v0);
}

uint64_t sub_186C07F0C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_186C0B998(a1, a2);
  *a3 = result;
  return result;
}

void sub_186C07F30(_BYTE *a1@<X8>)
{
  *a1 = 3;
}

uint64_t sub_186C07F3C()
{
  return sub_186C5B608();
}

uint64_t sub_186C07F64()
{
  return sub_186C5B614();
}

uint64_t sub_186C07F8C(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C6A25E0);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1895F8858](v3);
  unint64_t v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_186C0B6EC();
  sub_186C5B5F0();
  v8[15] = 0;
  sub_186C5B488();
  if (!v1)
  {
    v8[14] = 1;
    sub_186C5B494();
    v8[13] = 2;
    sub_186C5B4B8();
  }

  return (*(uint64_t (**)(_BYTE *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t sub_186C080E0(char a1)
{
  return a1 & 1;
}

uint64_t sub_186C080E8(void *a1)
{
  return sub_186C07F8C(a1);
}

uint64_t sub_186C08108()
{
  return *(void *)(v0 + 352);
}

uint64_t sub_186C0813C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = swift_beginAccess();
  v3[44] = a1;
  v3[45] = a2;
  v3[46] = a3;
  return result;
}

uint64_t (*sub_186C0818C())()
{
  return j__swift_endAccess;
}

uint64_t sub_186C081C8()
{
  return *(unsigned __int8 *)(v0 + 376);
}

uint64_t sub_186C081F8(char a1)
{
  uint64_t result = swift_beginAccess();
  *(_BYTE *)(v1 + 376) = a1;
  return result;
}

uint64_t (*sub_186C08234())()
{
  return j_j__swift_endAccess;
}

uint64_t sub_186C08270(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_186C082A4 + 4 * byte_186C5F02D[a1]))( 0x79426465646E65LL,  0xE700000000000000LL);
}

unint64_t sub_186C082A4()
{
  return 0xD00000000000001ELL;
}

unint64_t sub_186C082CC()
{
  return 0xD000000000000021LL;
}

uint64_t sub_186C0831C()
{
  return sub_186C5B5D8();
}

uint64_t sub_186C08360()
{
  return sub_186C5B5D8();
}

uint64_t sub_186C083A0()
{
  return sub_186C08270(*v0);
}

uint64_t sub_186C083A8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_186C0BAD8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_186C083CC()
{
  return sub_186C5B608();
}

uint64_t sub_186C083F4()
{
  return sub_186C5B614();
}

void sub_186C0841C(uint64_t a1, uint64_t a2, char a3)
{
  __asm { BR              X10 }

uint64_t sub_186C08460()
{
  return 0LL;
}

uint64_t sub_186C08644(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 a5)
{
  uint64_t v12 = a4;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C6A25F0);
  uint64_t v13 = *(void *)(v8 - 8);
  MEMORY[0x1895F8858](v8);
  uint64_t v10 = (char *)&v12 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_186C0BD58();
  sub_186C5B5F0();
  if (!(a5 >> 6))
  {
    char v15 = 1;
    sub_186C5B440();
    if (!v5)
    {
      char v14 = 2;
      sub_186C5B440();
      goto LABEL_8;
    }

    return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v10, v8);
  }

  if (a5 >> 6 == 1)
  {
    char v17 = 3;
    sub_186C5B470();
    if (!v5)
    {
      char v16 = 4;
      sub_186C5B440();
      goto LABEL_8;
    }

    return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v10, v8);
  }

uint64_t sub_186C08988(void *a1)
{
  return sub_186C08644(a1, *(void *)v1, *(void *)(v1 + 8), *(void *)(v1 + 16), *(_BYTE *)(v1 + 24));
}

uint64_t sub_186C089A8()
{
  return *(void *)(v0 + 384);
}

uint64_t sub_186C089E0(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t result = swift_beginAccess();
  *(void *)(v4 + 384) = a1;
  *(void *)(v4 + 392) = a2;
  *(void *)(v4 + 400) = a3;
  *(_BYTE *)(v4 + 40_Block_object_dispose(va, 8) = a4;
  return result;
}

uint64_t (*sub_186C08A40())()
{
  return j_j__swift_endAccess;
}

void *sub_186C08A7C()
{
  uint64_t v1 = *(void **)(v0 + 416);
  id v2 = v1;
  return v1;
}

void sub_186C08AC0(uint64_t a1)
{
  uint64_t v3 = *(void **)(v1 + 416);
  *(void *)(v1 + 416) = a1;
}

uint64_t (*sub_186C08B04())()
{
  return j_j__swift_endAccess;
}

uint64_t sub_186C08B40(void *a1)
{
  void (*v11)(void *__return_ptr, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned __int8 v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  void *v35;
  id v36;
  void v37[3];
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _OWORD v44[13];
  char v45;
  void v46[27];
  void v47[7];
  _BYTE v48[56];
  void v49[33];
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  char v63;
  _BYTE v64[232];
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C6A2600);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x1895F8858](v4);
  uint64_t v8 = (char *)v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(void *__return_ptr, uint64_t))(*(void *)v1 + 184LL))(v46, v6);
  sub_186BFA418((uint64_t)v46, (uint64_t)v64, &qword_18C6A25C8);
  sub_186BFA418((uint64_t)v46, (uint64_t)v49, &qword_18C6A25C8);
  uint64_t v9 = sub_186C0BD9C((uint64_t)v49);
  if ((_DWORD)v9 == 1)
  {
    uint64_t v40 = v5;
    char v41 = (uint64_t)v8;
    char v42 = v4;
  }

  else
  {
    sub_186BFA418((uint64_t)v64, (uint64_t)v44, &qword_18C6A25C8);
    char v60 = v44[10];
    char v61 = v44[11];
    int v62 = v44[12];
    unint64_t v63 = v45;
    uint64_t v56 = v44[6];
    char v57 = v44[7];
    char v58 = v44[8];
    char v59 = v44[9];
    uint64_t v52 = v44[2];
    char v53 = v44[3];
    char v54 = v44[4];
    uint64_t v55 = v44[5];
    BOOL v50 = v44[0];
    uint64_t v51 = v44[1];
    sub_186C065B0(a1);
    if (v2) {
      return sub_186C0AC4C( (uint64_t)v46,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))sub_186C0ACC0);
    }
    uint64_t v40 = v5;
    char v41 = (uint64_t)v8;
    char v42 = v4;
    uint64_t v9 = sub_186C0AC4C( (uint64_t)v46,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))sub_186C0ACC0);
  }

  uint64_t v11 = *(void (**)(void *__return_ptr, uint64_t))(*(void *)v1 + 272LL);
  char v43 = v1;
  v11(v47, v9);
  uint64_t v12 = v47[0];
  uint64_t v13 = v47[1];
  char v14 = v47[2];
  char v15 = v47[3];
  char v16 = v47[4];
  char v17 = v47[5];
  uint64_t result = sub_186BFA418((uint64_t)v47, (uint64_t)v48, &qword_18C6A25D8);
  if ((v48[48] & 1) != 0
    || (v49[27] = v12,
        v49[28] = v13,
        v49[29] = v14,
        v49[30] = v15,
        v49[31] = v16,
        v49[32] = v17,
        uint64_t result = sub_186C07568(a1),
        !v2))
  {
    char v18 = v43;
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v43 + 344LL))(result);
    uint64_t v22 = v21 <= 1u && (v19 & 0xFFFFFFFFFFFFFFFELL) == 0x1FFFFFFFELL;
    unint64_t v23 = v41;
    unint64_t v24 = v42;
    if (v22 || (uint64_t result = sub_186C08644(a1, result, v19, v20, v21), !v2))
    {
      if ((*(unsigned __int8 (**)(uint64_t))(*(void *)v18 + 296LL))(result) == 2LL
        || (uint64_t result = sub_186C07F8C(a1), !v2))
      {
        __swift_project_boxed_opaque_existential_1(a1, a1[3]);
        sub_186C0BDB4();
        char v25 = sub_186C5B5F0();
        double v26 = v43;
        (*(void (**)(uint64_t))(*(void *)v43 + 320LL))(v25);
        *(void *)&v44[0] = 0xD000000000000010LL;
        *((void *)&v44[0] + ktrace_session_set_default_event_names_enabled(global_session, 1) = 0x8000000186C65C10LL;
        uint64_t v27 = sub_186C5B488();
        if (v2)
        {
          return (*(uint64_t (**)(uint64_t, uint64_t))(v40 + 8))(v23, v24);
        }

        else
        {
          int v28 = (*(uint64_t (**)(uint64_t))(*(void *)v26 + 208LL))(v27);
          if (*(void *)(v28 + 16)) {
            __asm { BR              X9 }
          }

          char v29 = swift_bridgeObjectRelease();
          uint64_t v39 = (*(uint64_t (**)(uint64_t))(*(void *)v43 + 232LL))(v29);
          uint64_t v30 = *(void *)(v39 + 16);
          if (v30)
          {
            uint64_t v38 = v39 + 32;
            char v42 = v24;
            v37[1] = v30;
            if (*(void *)(v39 + 16))
            {
              char v41 = 1LL;
              __asm { BR              X9 }
            }

            __break(1u);
            JUMPOUT(0x186C092CCLL);
          }

          unint64_t v31 = v24;
          char v32 = swift_bridgeObjectRelease();
          uint64_t v33 = v40;
          char v34 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v43 + 368LL))(v32);
          if (v34)
          {
            double v35 = v34;
            *(void *)&v44[0] = v34;
            uint64_t v36 = v34;
            __swift_instantiateConcreteTypeFromMangledName(&qword_18C6A2280);
            sub_186C5AD5C();
            *(void *)&v44[0] = 0x726F727265LL;
            *((void *)&v44[0] + ktrace_session_set_default_event_names_enabled(global_session, 1) = 0xE500000000000000LL;
            sub_186C5B47C();
            swift_bridgeObjectRelease();
          }

          return (*(uint64_t (**)(uint64_t, uint64_t))(v33 + 8))(v23, v31);
        }
      }
    }
  }

  return result;
}

uint64_t sub_186C0930C()
{
  uint64_t result = swift_bridgeObjectRelease();
  if (!v0)
  {
    swift_bridgeObjectRetain();
    sub_186C5ADD4();
    sub_186C5B494();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    sub_186C5ADD4();
    sub_186C5B4B8();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    sub_186C5ADD4();
    sub_186C5B494();
    swift_bridgeObjectRelease();
    sub_186C5B260();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    sub_186C5ADD4();
    sub_186C5B494();
    return swift_bridgeObjectRelease();
  }

  return result;
}

uint64_t sub_186C09588(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = *(void *)(a5 + 16);
  if (v6)
  {
    swift_bridgeObjectRetain();
    for (uint64_t i = a5 + 48; ; i += 24LL)
    {
      swift_bridgeObjectRetain();
      sub_186C098CC();
      if (v5) {
        break;
      }
      swift_bridgeObjectRelease();
      if (!--v6) {
        return swift_bridgeObjectRelease();
      }
    }

    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }

  return result;
}

uint64_t sub_186C09670()
{
  return swift_deallocClassInstance();
}

uint64_t sub_186C096D4()
{
  uint64_t v0 = swift_allocObject();
  sub_186C09708();
  return v0;
}

uint64_t sub_186C09708()
{
  *(double *)(v0 + 16) = sub_186C0AA54();
  *(void *)(v0 + 24) = v1;
  *(void *)(v0 + 32) = v2;
  *(double *)(v0 + 40) = sub_186C0AA54();
  *(void *)(v0 + 4_Block_object_dispose(va, 8) = v3;
  *(void *)(v0 + 56) = v4;
  sub_186C0ABA8((uint64_t)v7);
  sub_186BFA418((uint64_t)v7, v0 + 64, &qword_18C6A25C8);
  uint64_t v5 = MEMORY[0x18961AFE8];
  *(void *)(v0 + 280) = MEMORY[0x18961AFE8];
  *(void *)(v0 + 28_Block_object_dispose(va, 8) = v5;
  *(_OWORD *)(v0 + 296) = 0u;
  *(_OWORD *)(v0 + 312) = 0u;
  *(_OWORD *)(v0 + 32_Block_object_dispose(va, 8) = 0u;
  *(_BYTE *)(v0 + 344) = 1;
  *(void *)(v0 + 360) = 0LL;
  *(void *)(v0 + 36_Block_object_dispose(va, 8) = 0LL;
  *(void *)(v0 + 352) = 2LL;
  *(_BYTE *)(v0 + 376) = 0;
  *(_OWORD *)(v0 + 384) = xmmword_186C5F760;
  *(void *)(v0 + 400) = 0LL;
  *(_BYTE *)(v0 + 40_Block_object_dispose(va, 8) = 0;
  *(void *)(v0 + 416) = 0LL;
  return v0;
}

uint64_t sub_186C097B0()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 392LL))();
}

uint64_t String.stringValue.getter(uint64_t a1)
{
  return a1;
}

uint64_t String.intValue.getter()
{
  return 0LL;
}

Swift::String __swiftcall String.init(intValue:)(Swift::Int intValue)
{
  uint64_t v1 = sub_186C5B4DC();
  result._object = v2;
  result._uint64_t countAndFlagsBits = v1;
  return result;
}

uint64_t sub_186C09854()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_186C09880@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *a3 = result;
  a3[1] = a2;
  return result;
}

uint64_t sub_186C09888@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_186C5B4DC();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_186C098CC()
{
  uint64_t result = swift_bridgeObjectRelease();
  if (!v0)
  {
    sub_186C5B260();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    sub_186C5ADD4();
    sub_186C5ADD4();
    sub_186C5B494();
    swift_bridgeObjectRelease();
    sub_186C5B260();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    sub_186C5ADD4();
    sub_186C5ADD4();
    sub_186C5B494();
    return swift_bridgeObjectRelease();
  }

  return result;
}

uint64_t sub_186C09AF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_186C09588(a1, a2, a3, *(void *)(v3 + 16), *(void *)(v3 + 24));
}

uint64_t sub_186C09B14()
{
  return sub_186C0930C();
}

uint64_t sub_186C09B30(char **a1)
{
  uint64_t v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = sub_186C0A844((uint64_t)v2);
  }
  uint64_t v3 = *((void *)v2 + 2);
  v5[0] = (uint64_t)(v2 + 32);
  v5[1] = v3;
  uint64_t result = sub_186C09C7C(v5);
  *a1 = v2;
  return result;
}

void *sub_186C09B98(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return (void *)MEMORY[0x18961AFE8];
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C6A21C0);
  uint64_t v3 = (void *)swift_allocObject();
  int64_t v4 = _swift_stdlib_malloc_size(v3);
  uint64_t v5 = v4 - 32;
  if (v4 < 32) {
    uint64_t v5 = v4 - 17;
  }
  int v3[2] = v1;
  _OWORD v3[3] = 2 * (v5 >> 4);
  uint64_t v6 = sub_186C0A858((uint64_t)&v8, v3 + 4, v1, a1);
  swift_bridgeObjectRetain();
  sub_186C0D094();
  if (v6 != v1)
  {
    __break(1u);
    return (void *)MEMORY[0x18961AFE8];
  }

  return v3;
}

uint64_t sub_186C09C7C(uint64_t *a1)
{
  uint64_t v3 = a1[1];
  uint64_t result = sub_186C5B4C4();
  if (result >= v3)
  {
    if (v3 < 0) {
      goto LABEL_152;
    }
    if (v3) {
      return sub_186C0A320(0LL, v3, 1LL, a1);
    }
    return result;
  }

  if (v3 >= 0) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = v3 + 1;
  }
  if (v3 < -1) {
    goto LABEL_151;
  }
  uint64_t v101 = result;
  char v98 = a1;
  if (v3 <= 1)
  {
    uint64_t v7 = MEMORY[0x18961AFE8];
    uint64_t v104 = (char *)(MEMORY[0x18961AFE8] + 32LL);
    if (v3 != 1)
    {
      unint64_t v11 = *(void *)(MEMORY[0x18961AFE8] + 16LL);
      uint64_t v10 = MEMORY[0x18961AFE8];
LABEL_117:
      uint64_t result = v10;
      uint64_t v100 = v7;
      if (v11 >= 2)
      {
        uint64_t v91 = *v98;
        do
        {
          unint64_t v92 = v11 - 2;
          if (v11 < 2) {
            goto LABEL_146;
          }
          if (!v91) {
            goto LABEL_159;
          }
          uint64_t v93 = result;
          uint64_t v94 = *(void *)(result + 32 + 16 * v92);
          uint64_t v95 = *(void *)(result + 32 + 16 * (v11 - 1) + 8);
          uint64_t result = sub_186C0A3EC( (char *)(v91 + 16 * v94),  (char *)(v91 + 16LL * *(void *)(result + 32 + 16 * (v11 - 1))),  v91 + 16 * v95,  v104);
          if (v1) {
            break;
          }
          if (v95 < v94) {
            goto LABEL_147;
          }
          uint64_t result = swift_isUniquelyReferenced_nonNull_native();
          if ((result & 1) == 0)
          {
            uint64_t result = (uint64_t)sub_186BF91FC(v93);
            uint64_t v93 = result;
          }

          if (v92 >= *(void *)(v93 + 16)) {
            goto LABEL_148;
          }
          uint64_t v96 = (void *)(v93 + 32 + 16 * v92);
          void *v96 = v94;
          v96[1] = v95;
          unint64_t v97 = *(void *)(v93 + 16);
          if (v11 > v97) {
            goto LABEL_149;
          }
          memmove((void *)(v93 + 32 + 16 * (v11 - 1)), (const void *)(v93 + 32 + 16 * v11), 16 * (v97 - v11));
          uint64_t result = v93;
          *(void *)(v93 + 16) = v97 - 1;
          unint64_t v11 = v97 - 1;
        }

        while (v97 > 2);
      }

LABEL_114:
      swift_bridgeObjectRelease();
      *(void *)(v100 + 16) = 0LL;
      return swift_bridgeObjectRelease();
    }

    uint64_t v100 = MEMORY[0x18961AFE8];
  }

  else
  {
    uint64_t v6 = v5 >> 1;
    uint64_t result = sub_186C5AF48();
    *(void *)(result + 16) = v6;
    uint64_t v100 = result;
    uint64_t v104 = (char *)(result + 32);
  }

  uint64_t v8 = 0LL;
  uint64_t v9 = *a1;
  uint64_t v99 = v9 + 8;
  uint64_t v10 = MEMORY[0x18961AFE8];
  uint64_t v102 = v3;
  while (1)
  {
    uint64_t v12 = v8++;
    if (v8 >= v3) {
      goto LABEL_45;
    }
    uint64_t v13 = (uint64_t *)(v9 + 16 * v8);
    uint64_t result = *v13;
    uint64_t v14 = v13[1];
    char v15 = (void *)(v9 + 16 * v12);
    if (result == *v15 && v14 == v15[1])
    {
      uint64_t v18 = v12 + 2;
      if (v12 + 2 >= v3) {
        goto LABEL_44;
      }
      int v17 = 0;
    }

    else
    {
      uint64_t result = sub_186C5B4F4();
      int v17 = result;
      uint64_t v18 = v12 + 2;
      if (v12 + 2 >= v3) {
        goto LABEL_36;
      }
    }

    unint64_t v19 = (void *)(v99 + 16 * v18);
    do
    {
      uint64_t result = *(v19 - 1);
      uint64_t v21 = (void *)(v9 + 16 * v8);
      if (result == *v21 && *v19 == v21[1])
      {
        if ((v17 & 1) != 0) {
          goto LABEL_37;
        }
      }

      else
      {
        uint64_t result = sub_186C5B4F4();
      }

      v19 += 2;
      uint64_t v20 = v18 + 1;
      uint64_t v8 = v18;
      uint64_t v18 = v20;
    }

    while (v20 < v3);
    uint64_t v18 = v20;
LABEL_36:
    uint64_t v8 = v18;
    if ((v17 & 1) != 0)
    {
LABEL_37:
      if (v18 < v12) {
        goto LABEL_155;
      }
      if (v12 < v18)
      {
        uint64_t v23 = 16 * v18;
        uint64_t v24 = 16 * v12;
        uint64_t v25 = v18;
        uint64_t v26 = v12;
        do
        {
          if (v26 != --v25)
          {
            if (!v9) {
              goto LABEL_158;
            }
            uint64_t v27 = v9 + v23;
            uint64_t v28 = *(void *)(v9 + v24);
            uint64_t v29 = *(void *)(v9 + v24 + 8);
            *(_OWORD *)(v9 + v24) = *(_OWORD *)(v9 + v23 - 16);
            *(void *)(v27 - 16) = v28;
            *(void *)(v27 - _Block_object_dispose(va, 8) = v29;
          }

          ++v26;
          v23 -= 16LL;
          v24 += 16LL;
        }

        while (v26 < v25);
      }

LABEL_66:
    if (v8 < v12) {
      goto LABEL_145;
    }
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      uint64_t result = (uint64_t)sub_186BF905C(0LL, *(void *)(v10 + 16) + 1LL, 1, (char *)v10);
      uint64_t v10 = result;
    }

    unint64_t v38 = *(void *)(v10 + 16);
    unint64_t v37 = *(void *)(v10 + 24);
    unint64_t v11 = v38 + 1;
    if (v38 >= v37 >> 1)
    {
      uint64_t result = (uint64_t)sub_186BF905C((char *)(v37 > 1), v38 + 1, 1, (char *)v10);
      uint64_t v10 = result;
    }

    *(void *)(v10 + 16) = v11;
    uint64_t v39 = v10 + 32;
    uint64_t v40 = (uint64_t *)(v10 + 32 + 16 * v38);
    uint64_t *v40 = v12;
    v40[1] = v8;
    if (v38)
    {
      uint64_t v103 = v8;
      while (1)
      {
        unint64_t v41 = v11 - 1;
        if (v11 >= 4)
        {
          unint64_t v46 = v39 + 16 * v11;
          uint64_t v47 = *(void *)(v46 - 64);
          uint64_t v48 = *(void *)(v46 - 56);
          BOOL v52 = __OFSUB__(v48, v47);
          uint64_t v49 = v48 - v47;
          if (v52) {
            goto LABEL_134;
          }
          uint64_t v51 = *(void *)(v46 - 48);
          uint64_t v50 = *(void *)(v46 - 40);
          BOOL v52 = __OFSUB__(v50, v51);
          uint64_t v44 = v50 - v51;
          char v45 = v52;
          if (v52) {
            goto LABEL_135;
          }
          unint64_t v53 = v11 - 2;
          char v54 = (uint64_t *)(v39 + 16 * (v11 - 2));
          uint64_t v56 = *v54;
          uint64_t v55 = v54[1];
          BOOL v52 = __OFSUB__(v55, v56);
          uint64_t v57 = v55 - v56;
          if (v52) {
            goto LABEL_136;
          }
          BOOL v52 = __OFADD__(v44, v57);
          uint64_t v58 = v44 + v57;
          if (v52) {
            goto LABEL_138;
          }
          if (v58 >= v49)
          {
            uint64_t v76 = (uint64_t *)(v39 + 16 * v41);
            uint64_t v78 = *v76;
            uint64_t v77 = v76[1];
            BOOL v52 = __OFSUB__(v77, v78);
            uint64_t v79 = v77 - v78;
            if (v52) {
              goto LABEL_144;
            }
            BOOL v69 = v44 < v79;
            goto LABEL_104;
          }
        }

        else
        {
          if (v11 != 3)
          {
            uint64_t v70 = *(void *)(v10 + 32);
            uint64_t v71 = *(void *)(v10 + 40);
            BOOL v52 = __OFSUB__(v71, v70);
            uint64_t v63 = v71 - v70;
            char v64 = v52;
            goto LABEL_98;
          }

          uint64_t v43 = *(void *)(v10 + 32);
          uint64_t v42 = *(void *)(v10 + 40);
          BOOL v52 = __OFSUB__(v42, v43);
          uint64_t v44 = v42 - v43;
          char v45 = v52;
        }

        if ((v45 & 1) != 0) {
          goto LABEL_137;
        }
        unint64_t v53 = v11 - 2;
        char v59 = (uint64_t *)(v39 + 16 * (v11 - 2));
        uint64_t v61 = *v59;
        uint64_t v60 = v59[1];
        BOOL v62 = __OFSUB__(v60, v61);
        uint64_t v63 = v60 - v61;
        char v64 = v62;
        if (v62) {
          goto LABEL_139;
        }
        uint64_t v65 = (uint64_t *)(v39 + 16 * v41);
        uint64_t v67 = *v65;
        uint64_t v66 = v65[1];
        BOOL v52 = __OFSUB__(v66, v67);
        uint64_t v68 = v66 - v67;
        if (v52) {
          goto LABEL_141;
        }
        if (__OFADD__(v63, v68)) {
          goto LABEL_143;
        }
        if (v63 + v68 >= v44)
        {
          BOOL v69 = v44 < v68;
LABEL_104:
          if (v69) {
            unint64_t v41 = v53;
          }
          goto LABEL_106;
        }

LABEL_98:
        if ((v64 & 1) != 0) {
          goto LABEL_140;
        }
        char v72 = (uint64_t *)(v39 + 16 * v41);
        uint64_t v74 = *v72;
        uint64_t v73 = v72[1];
        BOOL v52 = __OFSUB__(v73, v74);
        uint64_t v75 = v73 - v74;
        if (v52) {
          goto LABEL_142;
        }
        if (v75 < v63) {
          goto LABEL_15;
        }
LABEL_106:
        unint64_t v80 = v41 - 1;
        if (v41 - 1 >= v11)
        {
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
LABEL_144:
          __break(1u);
LABEL_145:
          __break(1u);
LABEL_146:
          __break(1u);
LABEL_147:
          __break(1u);
LABEL_148:
          __break(1u);
LABEL_149:
          __break(1u);
LABEL_150:
          __break(1u);
LABEL_151:
          __break(1u);
LABEL_152:
          __break(1u);
LABEL_153:
          __break(1u);
          goto LABEL_154;
        }

        uint64_t v81 = v9;
        if (!v9) {
          goto LABEL_157;
        }
        uint64_t v82 = v10;
        uint64_t v83 = (uint64_t *)(v39 + 16 * v80);
        uint64_t v84 = *v83;
        uint64_t v85 = v39;
        unint64_t v86 = v41;
        uint64_t v87 = (void *)(v39 + 16 * v41);
        uint64_t v88 = v87[1];
        uint64_t v89 = v81;
        uint64_t result = sub_186C0A3EC((char *)(v81 + 16 * *v83), (char *)(v81 + 16LL * *v87), v81 + 16 * v88, v104);
        if (v1) {
          goto LABEL_114;
        }
        if (v88 < v84) {
          goto LABEL_131;
        }
        if (v86 > *(void *)(v82 + 16)) {
          goto LABEL_132;
        }
        *uint64_t v83 = v84;
        *(void *)(v85 + 16 * v80 + _Block_object_dispose(va, 8) = v88;
        unint64_t v90 = *(void *)(v82 + 16);
        if (v86 >= v90) {
          goto LABEL_133;
        }
        uint64_t v10 = v82;
        unint64_t v11 = v90 - 1;
        uint64_t result = (uint64_t)memmove(v87, v87 + 2, 16 * (v90 - 1 - v86));
        uint64_t v39 = v85;
        *(void *)(v82 + 16) = v90 - 1;
        uint64_t v9 = v89;
        uint64_t v8 = v103;
        if (v90 <= 2) {
          goto LABEL_15;
        }
      }
    }

    unint64_t v11 = 1LL;
LABEL_15:
    uint64_t v3 = v102;
    if (v8 >= v102)
    {
      uint64_t v7 = v100;
      goto LABEL_117;
    }
  }

  if (__OFADD__(v12, v101)) {
    goto LABEL_153;
  }
  if (v12 + v101 >= v3) {
    uint64_t v30 = v3;
  }
  else {
    uint64_t v30 = v12 + v101;
  }
  if (v30 >= v12)
  {
    if (v8 != v30)
    {
      unint64_t v31 = (uint64_t *)(v9 + 16 * v8);
      do
      {
        char v32 = (uint64_t *)(v9 + 16 * v8);
        uint64_t result = *v32;
        uint64_t v33 = v32[1];
        uint64_t v34 = v12;
        double v35 = v31;
        do
        {
          if (result == *(v35 - 2) && v33 == *(v35 - 1)) {
            break;
          }
          uint64_t result = sub_186C5B4F4();
          if ((result & 1) == 0) {
            break;
          }
          if (!v9) {
            goto LABEL_156;
          }
          uint64_t result = *v35;
          uint64_t v33 = v35[1];
          *(_OWORD *)double v35 = *((_OWORD *)v35 - 1);
          *(v35 - ktrace_session_set_default_event_names_enabled(global_session, 1) = v33;
          *(v35 - 2) = result;
          v35 -= 2;
          ++v34;
        }

        while (v8 != v34);
        ++v8;
        v31 += 2;
      }

      while (v8 != v30);
      uint64_t v8 = v30;
    }

    goto LABEL_66;
  }

uint64_t sub_186C0A320(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  if (a3 != a2)
  {
    uint64_t v4 = a3;
    uint64_t v6 = result;
    uint64_t v7 = *a4;
    uint64_t v8 = *a4 + 16 * a3;
LABEL_5:
    uint64_t v9 = (uint64_t *)(v7 + 16 * v4);
    uint64_t result = *v9;
    uint64_t v10 = v9[1];
    uint64_t v11 = v6;
    uint64_t v12 = (uint64_t *)v8;
    while (1)
    {
      BOOL v13 = result == *(v12 - 2) && v10 == *(v12 - 1);
      if (v13 || (uint64_t result = sub_186C5B4F4(), (result & 1) == 0))
      {
LABEL_4:
        ++v4;
        v8 += 16LL;
        if (v4 == a2) {
          return result;
        }
        goto LABEL_5;
      }

      if (!v7) {
        break;
      }
      uint64_t result = *v12;
      uint64_t v10 = v12[1];
      *(_OWORD *)uint64_t v12 = *((_OWORD *)v12 - 1);
      *(v12 - ktrace_session_set_default_event_names_enabled(global_session, 1) = v10;
      *(v12 - 2) = result;
      v12 -= 2;
      if (v4 == ++v11) {
        goto LABEL_4;
      }
    }

    __break(1u);
  }

  return result;
}

uint64_t sub_186C0A3EC(char *__dst, char *__src, unint64_t a3, char *a4)
{
  uint64_t v4 = a4;
  uint64_t v6 = __src;
  uint64_t v7 = __dst;
  int64_t v8 = __src - __dst;
  int64_t v9 = __src - __dst + 15;
  if (__src - __dst >= 0) {
    int64_t v9 = __src - __dst;
  }
  uint64_t v10 = v9 >> 4;
  uint64_t v11 = a3 - (void)__src;
  uint64_t v12 = a3 - (void)__src + 15;
  uint64_t v13 = v12 >> 4;
  if (v10 >= v12 >> 4)
  {
    if (a4 != __src || &__src[16 * v13] <= a4) {
      memmove(a4, __src, 16 * v13);
    }
    uint64_t v14 = &v4[16 * v13];
    if (v7 >= v6 || v11 < 16) {
      goto LABEL_48;
    }
    int v17 = (char *)(a3 - 16);
    while (1)
    {
      uint64_t v18 = v17 + 16;
      unint64_t v19 = v6 - 16;
      BOOL v20 = *((void *)v14 - 2) == *((void *)v6 - 2) && *((void *)v14 - 1) == *((void *)v6 - 1);
      if (v20 || (sub_186C5B4F4() & 1) == 0)
      {
        unint64_t v19 = v14 - 16;
        if (v18 != v14)
        {
          v14 -= 16;
LABEL_45:
          *(_OWORD *)int v17 = *(_OWORD *)v19;
          goto LABEL_46;
        }

        BOOL v21 = v17 >= v14;
        v14 -= 16;
        if (v21) {
          goto LABEL_45;
        }
      }

      else
      {
        if (v18 != v6)
        {
          v6 -= 16;
          goto LABEL_45;
        }

        BOOL v21 = v17 >= v6;
        v6 -= 16;
        if (v21) {
          goto LABEL_45;
        }
      }

char *sub_186C0A618(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_18C6A2648);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 1;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 5);
  }

  else
  {
    uint64_t v10 = (char *)MEMORY[0x18961AFE8];
  }

  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[32 * v8]) {
      memmove(v13, v14, 32 * v8);
    }
    *((void *)a4 + 2) = 0LL;
  }

  else
  {
    memcpy(v13, v14, 32 * v8);
  }

  swift_bridgeObjectRelease();
  return v10;
}

void *sub_186C0A710(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_18C6A2638);
    uint64_t v10 = (void *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    void v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 40);
  }

  else
  {
    uint64_t v10 = (void *)MEMORY[0x18961AFE8];
  }

  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v10 + 4 >= &a4[5 * v8 + 4]) {
      memmove(v10 + 4, a4 + 4, 40 * v8);
    }
    a4[2] = 0LL;
  }

  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_18C6A2640);
    swift_arrayInitWithCopy();
  }

  swift_bridgeObjectRelease();
  return v10;
}

char *sub_186C0A844(uint64_t a1)
{
  return sub_186BEF9D8(0LL, *(void *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_186C0A858(uint64_t result, void *a2, uint64_t a3, uint64_t a4)
{
  char v5 = (void *)result;
  uint64_t v6 = a4 + 56;
  uint64_t v7 = -1LL << *(_BYTE *)(a4 + 32);
  if (-v7 < 64) {
    uint64_t v8 = ~(-1LL << -(char)v7);
  }
  else {
    uint64_t v8 = -1LL;
  }
  unint64_t v9 = v8 & *(void *)(a4 + 56);
  if (!a2)
  {
    int64_t v12 = 0LL;
    uint64_t v10 = 0LL;
LABEL_38:
    void *v5 = a4;
    v5[1] = v6;
    uint64_t v5[2] = ~v7;
    void v5[3] = v12;
    void v5[4] = v9;
    return v10;
  }

  uint64_t v10 = a3;
  if (!a3)
  {
    int64_t v12 = 0LL;
    goto LABEL_38;
  }

  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }

  size_t v11 = a2;
  int64_t v12 = 0LL;
  uint64_t v13 = 0LL;
  int64_t v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  unint64_t v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    BOOL v20 = (void *)(*(void *)(a4 + 48) + 16 * v16);
    uint64_t v21 = v20[1];
    *size_t v11 = *v20;
    v11[1] = v21;
    if (v13 == v10)
    {
      swift_bridgeObjectRetain();
      goto LABEL_38;
    }

    v11 += 2;
    uint64_t result = swift_bridgeObjectRetain();
    if (v9) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v17 = v12 + 1;
    if (__OFADD__(v12, 1LL))
    {
      __break(1u);
      goto LABEL_40;
    }

    if (v17 >= v14) {
      goto LABEL_33;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    if (!v18) {
      break;
    }
LABEL_18:
    unint64_t v9 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v17 << 6);
    int64_t v12 = v17;
  }

  v12 += 2LL;
  if (v17 + 1 >= v14)
  {
    unint64_t v9 = 0LL;
    int64_t v12 = v17;
    goto LABEL_37;
  }

  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18) {
    goto LABEL_14;
  }
  int64_t v19 = v17 + 2;
  if (v17 + 2 >= v14) {
    goto LABEL_33;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18) {
    goto LABEL_17;
  }
  int64_t v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    unint64_t v9 = 0LL;
    int64_t v12 = v17 + 2;
    goto LABEL_37;
  }

  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    int64_t v17 = v12;
    goto LABEL_18;
  }

  int64_t v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    unint64_t v9 = 0LL;
LABEL_37:
    uint64_t v10 = v13;
    goto LABEL_38;
  }

  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    int64_t v17 = v19;
    goto LABEL_18;
  }

  while (1)
  {
    int64_t v17 = v19 + 1;
    if (__OFADD__(v19, 1LL)) {
      break;
    }
    if (v17 >= v14)
    {
      unint64_t v9 = 0LL;
      int64_t v12 = v14 - 1;
      goto LABEL_37;
    }

    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v19;
    if (v18) {
      goto LABEL_18;
    }
  }

double sub_186C0AA54()
{
  v3[1] = *(mach_timebase_info *)MEMORY[0x1895F89C0];
  v3[0] = 0LL;
  mach_timebase_info(v3);
  uint64_t v0 = swift_slowAlloc();
  pid_t v1 = getpid();
  if (!proc_pid_rusage(v1, 6, (rusage_info_t *)v0) && __CFADD__(*(void *)(v0 + 16), *(void *)(v0 + 24))) {
    __break(1u);
  }
  return (double)clock_gettime_nsec_np(_CLOCK_MONOTONIC_RAW) / 1000000000.0;
}

uint64_t sub_186C0AB28(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for RecordingOptions.Options(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

unint64_t sub_186C0AB64()
{
  unint64_t result = qword_18C6A4390;
  if (!qword_18C6A4390)
  {
    unint64_t result = MEMORY[0x186E46630](&unk_186C5F6E4, &type metadata for RecordInfo.Usage.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_18C6A4390);
  }

  return result;
}

double sub_186C0ABA8(uint64_t a1)
{
  *(_BYTE *)(a1 + 20_Block_object_dispose(va, 8) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + std::__hash_table<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>>>::~__hash_table((uint64_t)this + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 12_Block_object_dispose(va, 8) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 4_Block_object_dispose(va, 8) = 0u;
  *(_OWORD *)(a1 + std::__hash_table<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>>>::~__hash_table((uint64_t)this + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  return result;
}

uint64_t sub_186C0ABD0(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }

  return result;
}

uint64_t sub_186C0AC4C( uint64_t a1, void (*a2)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))
{
  char v4 = *(_BYTE *)(a1 + 208);
  a2( *(void *)a1,  *(void *)(a1 + 8),  *(void *)(a1 + 16),  *(void *)(a1 + 24),  *(void *)(a1 + 32),  *(void *)(a1 + 40),  *(void *)(a1 + 48),  *(void *)(a1 + 56),  *(void *)(a1 + 64),  *(void *)(a1 + 72),  *(void *)(a1 + 80),  *(void *)(a1 + 88),  *(void *)(a1 + 96),  *(void *)(a1 + 104),  *(void *)(a1 + 112),  *(void *)(a1 + 120),  *(void *)(a1 + 128),  *(void *)(a1 + 136),  *(void *)(a1 + 144),  *(void *)(a1 + 152),  *(void *)(a1 + 160),  *(void *)(a1 + 168),  *(void *)(a1 + 176),  *(void *)(a1 + 184),  *(void *)(a1 + 192),  *(void *)(a1 + 200),  v4);
  return a1;
}

uint64_t sub_186C0ACC0(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }

  return result;
}

uint64_t sub_186C0AD3C(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x656D614E6E616C70LL && a2 == 0xE800000000000000LL;
  if (v2 || (sub_186C5B4F4() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0LL;
  }

  else if (a1 == 0x6465646461LL && a2 == 0xE500000000000000LL || (sub_186C5B4F4() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1LL;
  }

  else if (a1 == 0x64657474696D6FLL && a2 == 0xE700000000000000LL || (sub_186C5B4F4() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2LL;
  }

  else if (a1 == 0x72656469766F7270LL && a2 == 0xE900000000000073LL || (sub_186C5B4F4() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3LL;
  }

  else if (a1 == 0x73726579616CLL && a2 == 0xE600000000000000LL || (sub_186C5B4F4() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4LL;
  }

  else if (a1 == 0xD000000000000017LL && a2 == 0x8000000186C65CD0LL || (sub_186C5B4F4() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5LL;
  }

  else if (a1 == 0xD000000000000018LL && a2 == 0x8000000186C65CF0LL || (sub_186C5B4F4() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 6LL;
  }

  else if (a1 == 0x73736572706D6F63LL && a2 == 0xE800000000000000LL || (sub_186C5B4F4() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 7LL;
  }

  else if (a1 == 0x7453796669746F6ELL && a2 == 0xEB00000000747261LL || (sub_186C5B4F4() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 8LL;
  }

  else if (a1 == 0xD000000000000011LL && a2 == 0x8000000186C65D10LL || (sub_186C5B4F4() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 9LL;
  }

  else if (a1 == 0xD000000000000010LL && a2 == 0x8000000186C65D30LL || (sub_186C5B4F4() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 10LL;
  }

  else if (a1 == 0x65644B6E4F646E65LL && a2 == 0xEF657A6953677562LL || (sub_186C5B4F4() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 11LL;
  }

  else if (a1 == 0x6E45796669746F6ELL && a2 == 0xE900000000000064LL || (sub_186C5B4F4() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 12LL;
  }

  else if (a1 == 0xD000000000000017LL && a2 == 0x8000000186C65D50LL || (sub_186C5B4F4() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 13LL;
  }

  else if (a1 == 0xD000000000000010LL && a2 == 0x8000000186C65D70LL || (sub_186C5B4F4() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 14LL;
  }

  else if (a1 == 0xD000000000000010LL && a2 == 0x8000000186C65D90LL || (sub_186C5B4F4() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 15LL;
  }

  else if (a1 == 0x73736572706D6F63LL && a2 == 0xEE00676E69727544LL || (sub_186C5B4F4() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 16LL;
  }

  else if (a1 == 0x7355656661736E75LL && a2 == 0xEA00000000006465LL || (sub_186C5B4F4() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 17LL;
  }

  else if (a1 == 0xD000000000000012LL && a2 == 0x8000000186C65DB0LL || (sub_186C5B4F4() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 18LL;
  }

  else if (a1 == 0xD000000000000013LL && a2 == 0x8000000186C65DD0LL || (sub_186C5B4F4() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 19LL;
  }

  else if (a1 == 0xD000000000000013LL && a2 == 0x8000000186C65DF0LL || (sub_186C5B4F4() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 20LL;
  }

  else if (a1 == 0xD000000000000019LL && a2 == 0x8000000186C65E10LL || (sub_186C5B4F4() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 21LL;
  }

  else if (a1 == 0xD000000000000012LL && a2 == 0x8000000186C65E30LL)
  {
    swift_bridgeObjectRelease();
    return 22LL;
  }

  else
  {
    char v6 = sub_186C5B4F4();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0) {
      return 22LL;
    }
    else {
      return 23LL;
    }
  }

uint64_t sub_186C0B660()
{
  unint64_t v0 = sub_186C5B3BC();
  swift_bridgeObjectRelease();
  if (v0 >= 8) {
    return 8LL;
  }
  else {
    return v0;
  }
}

unint64_t sub_186C0B6A8()
{
  unint64_t result = qword_18C6A4398;
  if (!qword_18C6A4398)
  {
    unint64_t result = MEMORY[0x186E46630](&unk_186C5F694, &type metadata for RecordInfo.FileSize.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_18C6A4398);
  }

  return result;
}

unint64_t sub_186C0B6EC()
{
  unint64_t result = qword_18C6A43A0[0];
  if (!qword_18C6A43A0[0])
  {
    unint64_t result = MEMORY[0x186E46630](&unk_186C5F644, &type metadata for RecordInfo.LostEvents.CodingKeys);
    atomic_store(result, qword_18C6A43A0);
  }

  return result;
}

uint64_t sub_186C0B730(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000010LL && a2 == 0x8000000186C65E50LL || (sub_186C5B4F4() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0LL;
  }

  else if (a1 == 0xD000000000000010LL && a2 == 0x8000000186C65E70LL || (sub_186C5B4F4() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1LL;
  }

  else if (a1 == 0x756F436B6E756863LL && a2 == 0xEA0000000000746ELL || (sub_186C5B4F4() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2LL;
  }

  else if (a1 == 0x657A6953656C6966LL && a2 == 0xE800000000000000LL || (sub_186C5B4F4() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3LL;
  }

  else if (a1 == 0xD000000000000016LL && a2 == 0x8000000186C65E90LL || (sub_186C5B4F4() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4LL;
  }

  else if (a1 == 0xD000000000000015LL && a2 == 0x8000000186C65EB0LL)
  {
    swift_bridgeObjectRelease();
    return 5LL;
  }

  else
  {
    char v5 = sub_186C5B4F4();
    swift_bridgeObjectRelease();
    if ((v5 & 1) != 0) {
      return 5LL;
    }
    else {
      return 6LL;
    }
  }

uint64_t sub_186C0B998(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000010LL && a2 == 0x8000000186C65ED0LL || (sub_186C5B4F4() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0LL;
  }

  else if (a1 == 0xD00000000000001CLL && a2 == 0x8000000186C65EF0LL || (sub_186C5B4F4() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1LL;
  }

  else if (a1 == 0xD000000000000015LL && a2 == 0x8000000186C65F10LL)
  {
    swift_bridgeObjectRelease();
    return 2LL;
  }

  else
  {
    char v5 = sub_186C5B4F4();
    swift_bridgeObjectRelease();
    if ((v5 & 1) != 0) {
      return 2LL;
    }
    else {
      return 3LL;
    }
  }

uint64_t sub_186C0BAD8(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x79426465646E65LL && a2 == 0xE700000000000000LL;
  if (v2 || (sub_186C5B4F4() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0LL;
  }

  else if (a1 == 0xD00000000000001ELL && a2 == 0x8000000186C65BD0LL || (sub_186C5B4F4() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1LL;
  }

  else if (a1 == 0xD00000000000001ELL && a2 == 0x8000000186C65BB0LL || (sub_186C5B4F4() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2LL;
  }

  else if (a1 == 0xD000000000000021LL && a2 == 0x8000000186C65B80LL || (sub_186C5B4F4() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3LL;
  }

  else if (a1 == 0xD000000000000023LL && a2 == 0x8000000186C65B50LL || (sub_186C5B4F4() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4LL;
  }

  else if (a1 == 0xD000000000000012LL && a2 == 0x8000000186C65B30LL)
  {
    swift_bridgeObjectRelease();
    return 5LL;
  }

  else
  {
    char v6 = sub_186C5B4F4();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0) {
      return 5LL;
    }
    else {
      return 6LL;
    }
  }

uint64_t sub_186C0BD24(uint64_t a1)
{
  return a1;
}

unint64_t sub_186C0BD58()
{
  unint64_t result = qword_18C6A25F8;
  if (!qword_18C6A25F8)
  {
    unint64_t result = MEMORY[0x186E46630](&unk_186C5F1E8, &type metadata for RecordInfo.EndReason.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_18C6A25F8);
  }

  return result;
}

uint64_t sub_186C0BD9C(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 8);
  if (v1 >= 0xFFFFFFFF) {
    LODWORD(vktrace_session_set_default_event_names_enabled(global_session, 1) = -1;
  }
  return (v1 + 1);
}

unint64_t sub_186C0BDB4()
{
  unint64_t result = qword_18C6A2608;
  if (!qword_18C6A2608)
  {
    unint64_t result = MEMORY[0x186E46630](&protocol conformance descriptor for String, MEMORY[0x189617FA8]);
    atomic_store(result, (unint64_t *)&qword_18C6A2608);
  }

  return result;
}

unint64_t sub_186C0BDFC()
{
  unint64_t result = qword_18C6A2610;
  if (!qword_18C6A2610)
  {
    unint64_t result = MEMORY[0x186E46630](&unk_186C5F090, &type metadata for RecordInfo.Phase);
    atomic_store(result, (unint64_t *)&qword_18C6A2610);
  }

  return result;
}

unint64_t sub_186C0BE44()
{
  unint64_t result = qword_18C6A2618;
  if (!qword_18C6A2618)
  {
    unint64_t result = MEMORY[0x186E46630](&unk_186C5F180, &type metadata for RecordInfo.EndReason.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_18C6A2618);
  }

  return result;
}

unint64_t sub_186C0BE8C()
{
  unint64_t result = qword_18C6A2620;
  if (!qword_18C6A2620)
  {
    unint64_t result = MEMORY[0x186E46630](&unk_186C5F260, &type metadata for RecordInfo.EndReason.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_18C6A2620);
  }

  return result;
}

unint64_t sub_186C0BED4()
{
  unint64_t result = qword_18C6A2628;
  if (!qword_18C6A2628)
  {
    unint64_t result = MEMORY[0x186E46630](&unk_186C5F238, &type metadata for RecordInfo.EndReason.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_18C6A2628);
  }

  return result;
}

uint64_t sub_186C0BF18()
{
  return MEMORY[0x189618020];
}

uint64_t sub_186C0BF24()
{
  return MEMORY[0x189618010];
}

uint64_t type metadata accessor for RecordInfo()
{
  return objc_opt_self();
}

uint64_t destroy for RecordInfo.Usage()
{
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for RecordInfo.Usage(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + _Block_object_dispose(va, 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v5;
  uint64_t v6 = *(void *)(a2 + 56);
  *(void *)(a1 + 4_Block_object_dispose(va, 8) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v6;
  uint64_t v7 = *(void *)(a2 + 72);
  *(void *)(a1 + std::__hash_table<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>>>::~__hash_table((uint64_t)this + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v7;
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(_BYTE *)(a1 + 8_Block_object_dispose(va, 8) = *(_BYTE *)(a2 + 88);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  int v8 = *(_DWORD *)(a2 + 108);
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  *(_DWORD *)(a1 + 10_Block_object_dispose(va, 8) = v8;
  *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(_BYTE *)(a1 + 12_Block_object_dispose(va, 8) = *(_BYTE *)(a2 + 128);
  *(_BYTE *)(a1 + 129) = *(_BYTE *)(a2 + 129);
  *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(_DWORD *)(a1 + 145) = *(_DWORD *)(a2 + 145);
  *(_BYTE *)(a1 + 149) = *(_BYTE *)(a2 + 149);
  uint64_t v9 = *(void *)(a2 + 160);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  *(void *)(a1 + 160) = v9;
  uint64_t v10 = *(void *)(a2 + 176);
  *(void *)(a1 + 16_Block_object_dispose(va, 8) = *(void *)(a2 + 168);
  *(void *)(a1 + std::__hash_table<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,KernelTraceCatalog::Process const*>>>::~__hash_table((uint64_t)this + 176) = v10;
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  *(_BYTE *)(a1 + 192) = *(_BYTE *)(a2 + 192);
  *(_BYTE *)(a1 + 20_Block_object_dispose(va, 8) = *(_BYTE *)(a2 + 208);
  *(void *)(a1 + 200) = *(void *)(a2 + 200);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}