double mathParser::deg2rad<double>(double a1)
{
  return a1 * 3.14159265 / 180.0;
}

double mathParser::rad2deg<double>(double a1)
{
  return a1 * 180.0 / 3.14159265;
}

double mathParser::sin<double>(double a1)
{
  return sin(a1 * 3.14159265 / 180.0);
}

double mathParser::cos<double>(double a1)
{
  return cos(a1 * 3.14159265 / 180.0);
}

double mathParser::tan<double>(double a1)
{
  return tan(a1 * 3.14159265 / 180.0);
}

double mathParser::sqrt<double>(double a1)
{
  return sqrt(a1);
}

double mathParser::fabs<double>(double a1)
{
  return fabs(a1);
}

double mathParser::asin<double>(double a1)
{
  return asin(a1) * 180.0 / 3.14159265;
}

double mathParser::acos<double>(double a1)
{
  return acos(a1) * 180.0 / 3.14159265;
}

double mathParser::atan<double>(double a1)
{
  return atan(a1) * 180.0 / 3.14159265;
}

double mathParser::ceil<double>(double a1)
{
  return ceil(a1);
}

double mathParser::round<double>(double a1)
{
  return round(a1);
}

double mathParser::floor<double>(double a1)
{
  return floor(a1);
}

double mathParser::atan2<double>(double a1, double a2)
{
  return atan2(a1, a2) * 180.0 / 3.14159265;
}

float mathParser::deg2rad<float>(float a1)
{
  return (float)(a1 * 3.1416) / 180.0;
}

float mathParser::rad2deg<float>(float a1)
{
  return (float)(a1 * 180.0) / 3.14159265;
}

float mathParser::sin<float>(float a1)
{
  return sinf((float)(a1 * 3.1416) / 180.0);
}

float mathParser::cos<float>(float a1)
{
  return cosf((float)(a1 * 3.1416) / 180.0);
}

float mathParser::tan<float>(float a1)
{
  return tanf((float)(a1 * 3.1416) / 180.0);
}

float mathParser::sqrt<float>(float a1)
{
  return sqrtf(a1);
}

float mathParser::fabs<float>(float a1)
{
  return fabsf(a1);
}

float mathParser::asin<float>(float a1)
{
  return (float)(asinf(a1) * 180.0) / 3.14159265;
}

float mathParser::acos<float>(float a1)
{
  return (float)(acosf(a1) * 180.0) / 3.14159265;
}

float mathParser::atan<float>(float a1)
{
  return (float)(atanf(a1) * 180.0) / 3.14159265;
}

float mathParser::ceil<float>(float a1)
{
  return ceilf(a1);
}

float mathParser::round<float>(float a1)
{
  return roundf(a1);
}

float mathParser::floor<float>(float a1)
{
  return floorf(a1);
}

float mathParser::atan2<float>(float a1, float a2)
{
  return (float)(atan2f(a1, a2) * 180.0) / 3.14159265;
}

char *mathParser::number2cString<double>(double a1)
{
  v2 = (char *)operator new[](0x400uLL);
  snprintf(v2, 0x400uLL, "%.15f", a1);
  size_t v3 = strlen(v2);
  v4 = (char *)operator new[](v3);
  strcpy(v4, v2);
  operator delete[](v2);
  return v4;
}

char *mathParser::number2cString<float>(float a1)
{
  v2 = (char *)operator new[](0x400uLL);
  snprintf(v2, 0x400uLL, "%.6f", a1);
  size_t v3 = strlen(v2);
  v4 = (char *)operator new[](v3);
  strcpy(v4, v2);
  operator delete[](v2);
  return v4;
}

BOOL mathParser::isValueFallOnSinCosZeroCycle<double>(int a1, double a2)
{
  if (a1 == 90) {
    return fmod(a2 / 90.0, 2.0) == 1.0;
  }
  else {
    return fmod(a2, (double)a1) == 0.0;
  }
}

BOOL mathParser::isValueFallOnSinCosZeroCycle<float>(int a1, float a2)
{
  if (a1 == 90) {
    return fmodf(a2 / 90.0, 2.0) == 1.0;
  }
  else {
    return fmodf(a2, (float)a1) == 0.0;
  }
}
}

void sub_22D8(_Unwind_Exception *a1)
{
}

void sub_29D0(_Unwind_Exception *a1)
{
}

void sub_2AC0(_Unwind_Exception *a1)
{
}

void sub_2B3C(_Unwind_Exception *a1)
{
}

void sub_2B94(_Unwind_Exception *a1)
{
}

LABEL_9:
  if (!-[MREffect isLoadedForTime:](self, "isLoadedForTime:", a3)
    && self->mPhaseInDuration + self->mMainDuration + self->mPhaseOutDuration > a3)
  {
    -[MREffect loadForTime:inContext:withArguments:now:]( self,  "loadForTime:inContext:withArguments:now:",  a4,  a5,  a3 >= 0.0,  a3);
  }

  return 1;
}

  self->mNeedsToUpdateGeometry = 0;
}

    -[NSRecursiveLock unlock](-[MPLayerGroupInternal liveLock](self->_internal, "liveLock"), "unlock");
    return 0;
  }

  v11 = +[MPUtilities layerForContainer:inDocument:](&OBJC_CLASS___MPUtilities, "layerForContainer:inDocument:", v6, v7);
  if (!v11) {
    goto LABEL_9;
  }
  v10 = v11;
  v9 = 0LL;
LABEL_6:
  if ((objc_msgSend( +[MPStyleManager sharedManager](MPStyleManager, "sharedManager"),  "hasImagesForLayerID:forStyleID:",  objc_msgSend(v10, "layerID"),  -[MPLayerGroup styleID](self, "styleID")) & 1) == 0) {
    goto LABEL_9;
  }
  v12 = +[NSNotificationCenter defaultCenter](&OBJC_CLASS___NSNotificationCenter, "defaultCenter");
  -[NSNotificationCenter postNotificationName:object:userInfo:]( v12,  "postNotificationName:object:userInfo:",  kMPAuthoringLiveNeedsPathsNotification,  -[MPLayerGroup parentDocument](self, "parentDocument"),  0LL);
  v13 = -[NSMutableDictionary initWithDictionary:]( objc_alloc(&OBJC_CLASS___NSMutableDictionary),  "initWithDictionary:",  -[MPLayerGroup authoringOptions](self, "authoringOptions"));
  v14 = -[MPLayerGroup lastSlideUsed](self, "lastSlideUsed");
  v15 = -[NSMutableDictionary objectForKey:](v13, "objectForKey:", kMPAuthoringLiveMissedImages);
  if (v15) {
    v16 = (char *)[v15 count];
  }
  else {
    v16 = 0LL;
  }
  if ((char *)v14 >= &v16[(void)-[NSMutableArray count](self->_userProvidedVideoPaths, "count")])
  {
    objc_msgSend( +[MPAuthoringController sharedController](MPAuthoringController, "sharedController"),  "cleanup");
    -[NSRecursiveLock unlock](-[MPLayerGroupInternal liveLock](self->_internal, "liveLock"), "unlock");

    return 0;
  }

  v18 = -[NSMutableDictionary objectForKey:](v13, "objectForKey:", kMPAuthoringLiveMaxSlidePreload);
  if (!v18)
  {
    v19 = (_BYTE *)(&dword_C + 3);
    if (!v5) {
      goto LABEL_16;
    }
    goto LABEL_15;
  }

  v19 = (char *)[v18 integerValue];
  if (v5) {
LABEL_15:
  }
    v19 = (char *)[v5 integerValue];
LABEL_16:
  v20 = (char *)-[MPLayerGroup loopingMode](self, "loopingMode") == (char *)&dword_4 + 1
     || (char *)-[MPLayerGroup loopingMode](self, "loopingMode") == (char *)&dword_0 + 2;
  v21 = &v16[(void)-[NSMutableArray count](self->_userProvidedVideoPaths, "count") - v14];
  if (v21 >= v19) {
    v21 = v19;
  }
  if (v5) {
    v22 = 1;
  }
  else {
    v22 = v20;
  }
  if (v22) {
    v23 = v19;
  }
  else {
    v23 = v21;
  }
  v24 = +[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", 0LL);
  -[NSMutableDictionary setObject:forKey:](v13, "setObject:forKey:", v24, kMPAuthoringUseTitleEffect);
  v25 = +[NSValue valueWithRange:](&OBJC_CLASS___NSValue, "valueWithRange:", v14, v23);
  -[NSMutableDictionary setObject:forKey:](v13, "setObject:forKey:", v25, kMPAuthoringVideoPathIndicies);
  if (v5)
  {
    -[NSMutableDictionary setObject:forKey:](v13, "setObject:forKey:", v9, kMPAuthoringDynamicEffect);
    v26 = [a3 objectForKey:@"firstSlideIndexStillNeeded"];
    -[NSMutableDictionary setObject:forKey:](v13, "setObject:forKey:", v26, kMPAuthoringDynamicLastIndexUsed);
    -[NSMutableDictionary setObject:forKey:](v13, "setObject:forKey:", v5, kMPAuthoringDynamicMinimumSlidesToAdd);
  }

  v27 = objc_msgSend( +[MPAuthoringController sharedController](MPAuthoringController, "sharedController"),  "authorLayerGroup:inDocument:withOptions:",  self,  -[MPLayerGroup parentDocument](self, "parentDocument"),  v13);
  if (v27 == (id)-1LL) {
    objc_msgSend( +[MPAuthoringController sharedController](MPAuthoringController, "sharedController"),  "prepareDocumentForPlayback:withOptions:",  -[MPLayerGroup parentDocument](self, "parentDocument"),  v13);
  }
  v28 = -[MPLayerGroup lastSlideUsed](self, "lastSlideUsed");
  v29 = +[NSDictionary dictionaryWithObject:forKey:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObject:forKey:",  +[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", v28),  @"lastUsedIndex");
  v30 = +[NSNotificationCenter defaultCenter](&OBJC_CLASS___NSNotificationCenter, "defaultCenter");
  -[NSNotificationCenter postNotificationName:object:userInfo:]( v30,  "postNotificationName:object:userInfo:",  kMPAuthoringLiveDidAddEffectsNotification,  -[MPLayerGroup parentDocument](self, "parentDocument"),  v29);
  v31 = -[NSMutableDictionary objectForKey:](v13, "objectForKey:", kMPAuthoringLiveMissedImages);
  if (v31) {
    v32 = (char *)[v31 count];
  }
  else {
    v32 = 0LL;
  }
  if ((char *)v28 >= &v32[(void)-[NSMutableArray count](self->_userProvidedVideoPaths, "count")]
    || -[MPLayerGroupInternal usedAllPaths](self->_internal, "usedAllPaths"))
  {
    v33 = +[NSNotificationCenter defaultCenter](&OBJC_CLASS___NSNotificationCenter, "defaultCenter");
    -[NSNotificationCenter postNotificationName:object:userInfo:]( v33,  "postNotificationName:object:userInfo:",  kMPAuthoringLiveUsedAllPathsNotification,  -[MPLayerGroup parentDocument](self, "parentDocument"),  0LL);
    if (v20)
    {
      else {
        v34 = v28;
      }
      -[MPLayerGroup setLastSlideUsed:](self, "setLastSlideUsed:", v34);
    }
  }

  -[MPLayerGroupInternal setUsedAllPaths:](self->_internal, "setUsedAllPaths:", 0LL);

  -[NSRecursiveLock unlock](-[MPLayerGroupInternal liveLock](self->_internal, "liveLock"), "unlock");
  return v27 != (id)-1LL;
}

  v16.receiver = self;
  v16.super_class = (Class)&OBJC_CLASS___MRLayerEffect;
  -[MRLayer observeValueForKeyPath:ofObject:change:context:]( &v16,  "observeValueForKeyPath:ofObject:change:context:",  a3,  a4,  a5,  a6);
}

  if ((objc_opt_respondsToSelector(self->_parentObject, "autoAdjustDuration") & 1) != 0) {
    v9 = -[MPAudioSupport autoAdjustDuration](self->_parentObject, "autoAdjustDuration") ^ 1;
  }
  else {
    LOBYTE(v9) = 0;
  }
  plug = self->_plug;
  if (plug) {
    v11 = v7;
  }
  else {
    v11 = 1;
  }
  if ((v11 & 1) == 0 && (v9 & 1) == 0) {
    -[MCPlug setLoopDuration:](plug, "setLoopDuration:", a3);
  }
  -[MPPlaylistInternal setDuration:](self->_internal, "setDuration:", a3);
  if ((v8 & 1) == 0) {
    -[MPAudioSupport resetDuration](parentObject, "resetDuration");
  }
}

  v15 = x;
  v16 = y;
  result.y = v16;
  result.x = v15;
  return result;
}

  v19 = v9 + v9;
  if (-[NSString isEqualToString:]( -[MRLayerEffect editedElement](self->super.mEffectLayer, "editedElement"),  "isEqualToString:",  @"text0")
    && -[MRLayerEffect _hideTextWhileEditing](self->super.mEffectLayer, "_hideTextWhileEditing"))
  {
    LODWORD(v20) = 0;
    objc_msgSend( *(id *)((char *)&self->mTextImage + 1),  "fakeRenderInContext:atPosition:andSize:zRotation:",  a4,  CGPointZero.x,  y,  v19,  v11,  v20);
  }

  else
  {
    [a4 blend:2];
    [a4 setShader:@"PlainTexture"];
    objc_msgSend( *(id *)((char *)&self->mTextImage + 1),  "renderImage:inContext:atPosition:andSize:",  *(MRTextRenderer **)((char *)&self->mTextRenderer + 1),  a4,  CGPointZero.x,  y,  v19,  v11);
    [a4 unsetShader];
    [a4 blend:0];
  }

void sub_3970(_Unwind_Exception *a1)
{
}

void sub_3A3C(_Unwind_Exception *a1)
{
}

void sub_3B0C(_Unwind_Exception *a1)
{
}

void sub_4788(_Unwind_Exception *a1)
{
}

void smoothPhaseOutProgressTitle(double a1)
{
  if (a1 < 0.5)
  {
    float v1 = (a1 + -0.5) * 3.14159265;
    sinf(v1);
  }

LABEL_33:
  v44 = width * 0.5;
  if (x > 0.0) {
    v44 = -(width * 0.5);
  }
  v45 = v44;
  MRMatrix_Clear((uint64_t)v65);
  MRMatrix_Translate(v65, v45, 0.0, 0.0);
  v46 = a6;
  MRMatrix_SetRotationFromAnglesYXZDeg((uint64_t)v64, v46, 0.0, 0.0);
  MRMatrix_PostMultiply((uint64_t)v65, v64);
  v47 = a7 - v45;
  *(float *)&v48 = MRMatrix_Translate(v65, v47, 0.0, 0.0);
  objc_msgSend(a9, "composeModelViewMatrix:saveTo:", v65, v63, v48);
  [a9 setShader:@"SoftspritePremultiplied"];
  [a9 setTextureMatrix:MRMatrix_Identity() onTextureUnit:1];
  v49 = width * self->super.mPixelSize.width * 0.4;
  *(float *)&v49 = v49;
  v50 = height * self->super.mPixelSize.height * 0.4;
  *(float *)&v50 = v50;
  [a9 setShaderUniformVec2:@"invRadii" :v49 forKey:v50];
  LODWORD(v51) = 0;
  -[MRCroppingSprite renderImageOuter:inContext:atPosition:andSize:zRotation:]( v22,  "renderImageOuter:inContext:atPosition:andSize:zRotation:",  v20,  a9,  x,  y,  width,  height,  v51);
  [a9 unsetShader];
  [a9 setShader:@"PlainTexture"];
  LODWORD(v52) = 0;
  -[MRCroppingSprite renderImageInner:inContext:atPosition:andSize:zRotation:]( v22,  "renderImageInner:inContext:atPosition:andSize:zRotation:",  v20,  a9,  x,  y,  width,  height,  v52);
  if (v12)
  {
    v53 = [*(id *)((char *)&self->mMaskProvider + 1) retainedByUserRenderedImageAtTime:a9 inContext:a10 withArguments:a8];
    v54 = [*(id *)((char *)&self->mGroundShadowCenterProvider + 1) retainedByUserRenderedImageAtTime:a9 inContext:a10 withArguments:a8];
    v55 = [*(id *)((char *)&self->mGroundShadowLeftProvider + 1) retainedByUserRenderedImageAtTime:a9 inContext:a10 withArguments:a8];
    v56 = y - height * 0.5;
    +[MRCroppingSprite renderDumbImage:inContext:atPosition:andSize:]( &OBJC_CLASS___MRCroppingSprite,  "renderDumbImage:inContext:atPosition:andSize:",  v53,  a9,  x,  v56,  width,  0.100000001);
    [*(id *)((char *)&self->mGroundShadowCenterProvider + 1) imageAspectRatio];
    +[MRCroppingSprite renderDumbImage:inContext:atPosition:andSize:]( &OBJC_CLASS___MRCroppingSprite,  "renderDumbImage:inContext:atPosition:andSize:",  v54,  a9,  x - width * 0.5 - v57 * 0.100000001 * 0.5,  v56,  v57 * 0.100000001,  0.100000001);
    [*(id *)((char *)&self->mGroundShadowLeftProvider + 1) imageAspectRatio];
    +[MRCroppingSprite renderDumbImage:inContext:atPosition:andSize:]( &OBJC_CLASS___MRCroppingSprite,  "renderDumbImage:inContext:atPosition:andSize:",  v55,  a9,  x + width * 0.5 + v58 * 0.100000001 * 0.5,  v56,  v58 * 0.100000001,  0.100000001);
    [v53 releaseByUser];
    [v54 releaseByUser];
    [v55 releaseByUser];
  }

  [a9 unsetShader];
  [a9 restoreModelViewMatrix:v63];
  [v20 releaseByUser];
}

        [a4 restoreForeColor:v39];
        goto LABEL_34;
      }

  v27 = *(double *)((char *)&self->_panX + 1);
  if (v27 > v24)
  {
    v28 = v24 + sqrt(v27 - v24 + 1.0) + -1.0;
LABEL_37:
    *(double *)((char *)&self->_panX + 1) = v28;
    goto LABEL_38;
  }

  if (v27 < 0.5 - v23)
  {
    v28 = 0.5 - v23 - sqrt(0.5 - v23 - v27 + 1.0) + 1.0;
    goto LABEL_37;
  }

  v172 = [*(id *)((char *)&v6->mTiming[5] + 1) retainedByUserRenderedImageAtTime:a4 inContext:a5 withArguments:v7];
  [v172 aspectRatio];
  v29 = 2.0 / v28;
  [a4 localAspectRatio];
  v31 = v29 * v30;
  v32 = objc_alloc(&OBJC_CLASS___MRTiledSprite);
  LODWORD(v33) = 0;
  v176 = -[MRTiledSprite initWithPosition:size:zRotation:innerRect:context:]( v32,  "initWithPosition:size:zRotation:innerRect:context:",  a4,  0.0,  v31 * -0.5 + 1.0,  2.0,  v31,  v33,  0LL,  0LL,  0x3FF0000000000000LL,  0x3FF0000000000000LL);
  v34 = v17;
  v35 = v16;
  *(float *)&v36 = MRMatrix_Translate(v219, -v34, 0.0, v35);
  objc_msgSend(a4, "composeModelViewMatrix:saveTo:", v219, v223, v36);
  [a4 localAspectRatio];
  v188 = v37;
  v200 = v6;
  obj = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
  v202 = 0;
  v38 = v8 - 1;
  if (v8 >= 1 && (v24 & 0x8000000000000000LL) == 0)
  {
    v39 = 0LL;
    v202 = 0;
    p_width = &v6->super.mPixelSize.width;
    v180 = 1.0 / v6->super.mPixelSize.height;
    y = CGPointZero.y;
    v178 = v10 + -0.5;
    v174 = v10 + -1.10000002;
    v173 = v10 + -1.10000002 + -1.10000002;
    if (v24 < v38) {
      v38 = v24;
    }
    v182 = v38 + 1;
    v40 = 0.5;
    v41 = 1.0;
    v183 = v188;
    v184 = v10 + -1.0;
    v185 = v14;
    do
    {
      if (BYTE2(v6->mSortDescriptors))
      {
        v42 = [*(id *)((char *)&v6->mGradientProvider + 1) retainByUser];
        v43 = @"text0";
      }

      else
      {
        v43 = (const __CFString *)ImageKey(v39);
        v42 = objc_msgSend( -[NSDictionary objectForKey:]( -[MRLayerEffect slideProvidersForElementIDs](v6->super.mEffectLayer, "slideProvidersForElementIDs"),  "objectForKey:",  v43),  "retainedByUserRenderedImageAtTime:inContext:withArguments:",  a4,  a5,  a3);
        [v42 setUsesBackgroundColorAsBorderColor:1];
      }

      [v42 aspectRatio];
      v45 = v44;
      v194 = v44;
      if (BYTE2(v6->mSortDescriptors) || (v44 >= v40 ? (v46 = v44 <= 2.0) : (v46 = 0), v46))
      {
        if (v188 > 1.0)
        {
          v48 = v188;
          if (v45 < v183) {
            v48 = v45;
          }
          v49 = 0.5625;
LABEL_54:
          if (v48 < v49) {
            v48 = v49;
          }
          v50 = v48;
          v198 = 1.60000002;
          v199 = 1.60000002 / v188 * v50;
          if (BYTE2(v6->mSortDescriptors)) {
            goto LABEL_57;
          }
          goto LABEL_64;
        }

        v47 = 1.77777778;
      }

      else
      {
        v47 = 1.33333333;
        if (v188 > 1.0)
        {
          v48 = v188;
          if (v45 < v183) {
            v48 = v45;
          }
          v49 = 0.75;
          goto LABEL_54;
        }
      }

      if (v45 < v47) {
        v47 = v45;
      }
      v54 = v47;
      v89 = v47 < v183;
      v55 = v188;
      if (!v89) {
        v55 = v54;
      }
      v198 = v188 * 1.60000002 / v55;
      v199 = 1.60000002;
      if (BYTE2(v6->mSortDescriptors))
      {
LABEL_57:
        [v42 width];
        v199 = (v51 + v51) / *p_width;
        [v42 height];
        v53 = BYTE2(v6->mSortDescriptors);
        v198 = (v52 + v52) / p_width[1];
        goto LABEL_65;
      }

  v30 = self->mPlug;
  if (!(_DWORD)v3) {
    goto LABEL_36;
  }
  v31 = -[MCPlug animationPathForKey:]( v30,  "animationPathForKey:",  objc_msgSend(@"scale", "stringByAppendingFormat:", @":%d", v3));
  if (!v31)
  {
    v30 = self->mPlug;
LABEL_36:
    v31 = -[MCPlug animationPathForKey:](v30, "animationPathForKey:", @"scale");
    if (!v31) {
      goto LABEL_41;
    }
  }

  if (([v31 isTriggered] & 1) == 0)
  {
    v33 = objc_opt_class(&OBJC_CLASS___MCAnimationPathPhysics, v32);
    if ((objc_opt_isKindOfClass(v31, v33) & 1) != 0)
    {
      v34 =  -[MRAnimationPathPhysics initWithMCAnimationPath:]( objc_alloc(&OBJC_CLASS___MRAnimationPathPhysics),  "initWithMCAnimationPath:",  v31);
      -[MCPlugParallel scale](self->mPlug, "scale");
      *(float *)&v35 = v35;
      -[MRAnimationPathPhysics setBaseValue:](v34, "setBaseValue:", v35);
    }

    else
    {
      v36 = objc_alloc(&OBJC_CLASS___MRAnimationPathScalar);
      -[MCPlugParallel scale](self->mPlug, "scale");
      self->mAnimationPathScale = -[MRAnimationPathScalar initWithMCAnimationPath:andValue:]( v36,  "initWithMCAnimationPath:andValue:",  v31);
    }
  }

    v50 = *(MRImage **)((char *)&self->mTextImage + 1);
    [a4 localAspectRatio];
    LODWORD(v52) = 0;
    objc_msgSend(v50, "fakeRenderInContext:atPosition:andSize:zRotation:", a4, 0.0, v51 * -0.3175, v11, v56, v52);
  }

LABEL_83:
    v63 = v13 ^ 1;
    [v16 setOnContext:a4 onTextureUnit:0 withReferenceAspectRatio:&v102 state:v99];
    v69 = v35 + cosval * -10.0;
    v70 = v69 + sinval * 2.0;
    v71 = v36 + sinval * -10.0;
    v72 = v71 + cosval * -2.0;
    v111 = v70;
    v112 = v72;
    v73 = v35 - v20 * cosval;
    v74 = v73 + sinval * 2.0;
    v75 = v36 - v20 * sinval;
    v76 = v75 + cosval * -2.0;
    v113 = v74;
    v114 = v76;
    *(float *)&v69 = v69 + sinval * -2.0;
    *(float *)&v71 = v71 + cosval * 2.0;
    v115 = *(float *)&v69;
    v116 = *(float *)&v71;
    *(float *)&v71 = v73 + sinval * -2.0;
    *(float *)&v69 = v75 + cosval * 2.0;
    v117 = *(float *)&v71;
    v118 = *(float *)&v69;
    [a4 setTextureCoordinatesPointer:&v111 onTextureUnit:0];
    v120 = vld2q_f32(&v111);
    v120.val[1] = vdivq_f32(v120.val[1], (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v99, 0));
    v77 = &v103;
    vst2q_f32(v77, v120);
    [a4 setVertex2DPointer:&v103];
    [a4 drawTriangleStripFromOffset:0 count:4];
    [a4 unsetVertexPointer];
    [a4 unsetTextureCoordinatesPointerOnTextureUnit:0];
    [v16 unsetOnContext:a4 onTextureUnit:0 state:&v102];
LABEL_84:
    [a4 unsetShader];
    if ((v63 & 1) != 0)
    {
LABEL_86:
      [a4 setShader:@"ColoredTextureMix"];
      [v12 setOnContext:a4 onTextureUnit:0 withReferenceAspectRatio:&v101 state:v99];
      [v16 setOnContext:a4 onTextureUnit:1 withReferenceAspectRatio:&v100 state:v99];
      v78 = v35 + v20 * cosval;
      v79 = v78 + sinval * 2.0;
      v80 = v36 + v20 * sinval;
      v81 = v80 + cosval * -2.0;
      v111 = v79;
      v112 = v81;
      v82 = v35 - v20 * cosval;
      v83 = v82 + sinval * 2.0;
      v84 = v36 - v20 * sinval;
      v85 = v84 + cosval * -2.0;
      v113 = v83;
      v114 = v85;
      *(float *)&v78 = v78 + sinval * -2.0;
      *(float *)&v80 = v80 + cosval * 2.0;
      v115 = *(float *)&v78;
      v116 = *(float *)&v80;
      *(float *)&v78 = v82 + sinval * -2.0;
      v86 = v84 + cosval * 2.0;
      v117 = *(float *)&v78;
      v118 = v86;
      [a4 setTextureCoordinatesPointer:&v111 onTextureUnit:0];
      [a4 setTextureCoordinatesPointer:&v111 onTextureUnit:1];
      v102 = xmmword_1F5FA0;
      [a4 setVertexAttributePointer:&v102 ofSize:1 forKey:@"aParameter"];
      v121 = vld2q_f32(&v111);
      v121.val[1] = vdivq_f32(v121.val[1], (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v99, 0));
      v87 = &v103;
      vst2q_f32(v87, v121);
LABEL_105:
      [a4 setVertex2DPointer:&v103];
      [a4 drawTriangleStripFromOffset:0 count:4];
      [a4 unsetVertexPointer];
      [a4 unsetVertexAttributePointerForKey:@"aParameter"];
      [a4 unsetTextureCoordinatesPointerOnTextureUnit:1];
      [v16 unsetOnContext:a4 onTextureUnit:1 state:&v100];
      [a4 unsetTextureCoordinatesPointerOnTextureUnit:0];
      [v12 unsetOnContext:a4 onTextureUnit:0 state:&v101];
      [a4 unsetShader];
      goto LABEL_106;
    }

    goto LABEL_85;
  }

  if ((v17 & 1) == 0)
  {
    else {
      v68 = @"PlainTexture";
    }
    [a4 setShader:v68];
    goto LABEL_83;
  }

    v65 = &self->super.mPixelSize;
    objc_msgSend( -[NSDictionary objectForKey:]( -[MRLayerEffect slideProvidersForElementIDs](*p_mEffectLayer, "slideProvidersForElementIDs"),  "objectForKey:",  @"image0"),  "setDefaultSize:",  v65->width,  v65->height * 0.5);
    width = v65->width;
    v25 = v65->height * 0.5;
LABEL_84:
    v26 = @"image1";
    goto LABEL_43;
  }

  v7 = objc_msgSend( +[MREffectManager sharedManager](MREffectManager, "sharedManager"),  "imageInputInfosForEffectID:",  self->super.mEffectID);
  v94 = 0u;
  v95 = 0u;
  v96 = 0u;
  v97 = 0u;
  v8 = [v7 countByEnumeratingWithState:&v94 objects:v99 count:16];
  if (v8)
  {
    v9 = v8;
    v10 = 0;
    v11 = *(void *)v95;
    do
    {
      for (j = 0LL; j != v9; j = (char *)j + 1)
      {
        if (*(void *)v95 != v11) {
          objc_enumerationMutation(v7);
        }
        objc_msgSend( -[NSDictionary objectForKey:]( -[MRLayerEffect slideProvidersForElementIDs](*p_mEffectLayer, "slideProvidersForElementIDs"),  "objectForKey:",  ImageKey((v10 + (_DWORD)j))),  "setImageSizeScript:",  objc_msgSend(*(id *)(*((void *)&v94 + 1) + 8 * (void)j), "objectForKey:", @"sizeScript"));
      }

      v9 = [v7 countByEnumeratingWithState:&v94 objects:v99 count:16];
      v10 += (int)j;
    }

    while (v9);
  }

LABEL_85:
  if (v17 != 1) {
    goto LABEL_86;
  }
LABEL_106:
  objc_msgSend(v16, "setUsesBackgroundColorAsBorderColor:", v22, v96);
  [v16 releaseByUser];
  [v12 setUsesBackgroundColorAsBorderColor:v21];
  [v12 releaseByUser];
}

          if (v92)
          {
            v330 = 0.0;
            v103 = self;
            v104 = -[MPAuthoringController mapTypeForPoint0:point1:point2:map:flight:]( self,  "mapTypeForPoint0:point1:point2:map:flight:",  v371,  v89);
            HIDWORD(v325) = v104 > 0;
            HIDWORD(v322) = v104 == 1;
            v105 = 0.0;
            v106 = 0.0;
            v107 = 0.0;
            v108 = 0.0;
            v109 = self;
            v110 = 2048.0;
            v111 = 4096.0;
            goto LABEL_98;
          }

          if (v91)
          {
            v330 = 0.0;
            v103 = self;
            v104 = -[MPAuthoringController mapTypeForPoint0:point1:point2:map:flight:]( self,  "mapTypeForPoint0:point1:point2:map:flight:",  v371,  v89,  4096.0,  0.0,  4096.0,  2048.0,  4096.0,  4096.0);
            HIDWORD(v325) = v104 > 0;
            HIDWORD(v322) = v104 == 1;
            v105 = 0.0;
            v106 = 0.0;
            v110 = 0.0;
            v111 = 0.0;
            v109 = self;
            v107 = 2048.0;
LABEL_97:
            v108 = 4096.0;
LABEL_98:
            v142 = -[MPAuthoringController mapTypeForPoint0:point1:point2:map:flight:]( v109,  "mapTypeForPoint0:point1:point2:map:flight:",  v349,  v89,  v105,  v106,  v110,  v107,  v111,  v108);
            LODWORD(v325) = (uint64_t)v142 > 0;
            LODWORD(v322) = v142 == (_BYTE *)&dword_0 + 1;
            v315 = -[MPAuthoringController tileSetForMap1:map2:needsWater:]( v103,  "tileSetForMap1:map2:needsWater:",  v104,  v142,  v100);
            v340 = 0LL;
            v333 = 0;
            v143 = y;
            v326 = y;
            v327 = CGPointZero.x;
            v329 = CGPointZero.x;
LABEL_99:
            v328 = v143;
            goto LABEL_100;
          }

          if (v93)
          {
            v330 = 0.0;
            v103 = self;
            v104 = -[MPAuthoringController mapTypeForPoint0:point1:point2:map:flight:]( self,  "mapTypeForPoint0:point1:point2:map:flight:",  v371,  v89);
            HIDWORD(v325) = v104 > 0;
            HIDWORD(v322) = v104 == 1;
            v105 = 0.0;
            v109 = self;
            v106 = 4096.0;
            v110 = 2048.0;
            v107 = 4096.0;
          }

          else
          {
            if (!v395)
            {
              v340 = 0LL;
              v322 = 0LL;
              v325 = 0LL;
              v333 = 0;
              v143 = y;
              v326 = y;
              v327 = CGPointZero.x;
              v329 = CGPointZero.x;
              goto LABEL_99;
            }

            v330 = 0.0;
            v103 = self;
            v104 = -[MPAuthoringController mapTypeForPoint0:point1:point2:map:flight:]( self,  "mapTypeForPoint0:point1:point2:map:flight:",  v371,  v89);
            HIDWORD(v325) = v104 > 0;
            HIDWORD(v322) = v104 == 1;
            v106 = 0.0;
            v109 = self;
            v105 = 4096.0;
            v110 = 4096.0;
            v107 = 2048.0;
          }

          v111 = 4096.0;
          goto LABEL_97;
        }

        v432 = 0u;
        v431 = 0u;
        v430 = 0u;
        v429 = 0u;
        v62 = [v393 countByEnumeratingWithState:&v429 objects:v456 count:16];
        v330 = 0.0;
        v63 = &AVAudioTimePitchAlgorithmVarispeed_ptr;
        if (v62)
        {
          v64 = v62;
          v65 = *(void *)v430;
          do
          {
            for (k = 0LL; k != v64; k = (char *)k + 1)
            {
              if (*(void *)v430 != v65) {
                objc_enumerationMutation(v393);
              }
              v464.x = x;
              v464.y = y;
              [*(id *)(*((void *)&v429 + 1) + 8 * (void)k) setObject:NSStringFromCGPoint(v464) forKey:@"location"];
            }

            v64 = [v393 countByEnumeratingWithState:&v429 objects:v456 count:16];
          }

          while (v64);
        }

        v355 = 0LL;
        v322 = 0LL;
        v325 = 0LL;
        v333 = 0;
        v340 = 0LL;
        v341 = -1LL;
        v326 = y;
        v327 = x;
        v328 = y;
        v329 = x;
        v67 = -1LL;
        v335 = v368;
        v349 = v371;
        v342 = v374;
LABEL_103:
        v339 = v67;
        v350 = +[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array");
        v358 = +[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array");
        v144 = +[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array");
        v357 = +[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array");
        objc_msgSend( v144,  "addObject:",  -[AVAudioTimePitchAlgorithm numberWithInteger:]((id)v63[234], "numberWithInteger:", 0));
        v145 = CGPointFromString((NSString *)objc_msgSend( objc_msgSend(v393, "objectAtIndex:", 0),  "objectForKey:",  @"location"));
        v146 = (v145.y + 1.0) * 0.5 * 4096.0;
        v147 = (v145.x + 1.0) * 0.5 * 4096.0;
        v382 = (char *)[v393 count];
        if ((uint64_t)v382 >= 2)
        {
          v396 = 0LL;
          v148 = 0LL;
          v149 = 1LL;
          while (1)
          {
            v150 = CGPointFromString((NSString *)objc_msgSend( objc_msgSend(v393, "objectAtIndex:", v149),  "objectForKey:",  @"location"));
            if ([v144 count])
            {
              v347 = v149;
              [v350 addObject:v144];
              v151 = +[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array");
              v375 = +[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array");
              v152 = (char *)[v144 count];
              if (v152 != (_BYTE *)&dword_4 + 2)
              {
                v153 = v152;
                v346 = v151;
                v154 = +[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array");
                v155 = (char *)objc_msgSend(objc_msgSend(v144, "lastObject"), "integerValue");
                v156 = +[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array");
                if (v396
                  && objc_msgSend( v396,  "containsObject:",  -[AVAudioTimePitchAlgorithm numberWithInteger:]( (id)v63[234],  "numberWithInteger:",  v155)))
                {
                  objc_msgSend( v156,  "addObject:",  +[NSValue valueWithCGRect:]( NSValue,  "valueWithCGRect:",  v147 + -80.0,  v146 + -180.0,  160.0,  210.0));
                  v157 = (NSValue *)-[AVAudioTimePitchAlgorithm numberWithInteger:]( (id)v63[234],  "numberWithInteger:",  v155);
                  v158 = v375;
                }

                else
                {
                  v157 = +[NSValue valueWithCGRect:]( &OBJC_CLASS___NSValue,  "valueWithCGRect:",  v147 + -80.0,  v146 + -25.0,  160.0,  205.0);
                  v158 = v156;
                }

                [v158 addObject:v157];
                if (v148)
                {
                  [v154 addObjectsFromArray:v148];
                  objc_msgSend( v154,  "removeObject:",  -[AVAudioTimePitchAlgorithm numberWithInteger:]((id)v63[234], "numberWithInteger:", v155));
                }

                v348 = v155;
                v159 = (uint64_t)(v155 - 1);
                if ((uint64_t)v155 >= 1)
                {
                  v160 = -[AVAudioTimePitchAlgorithm numberWithInteger:]((id)v63[234], "numberWithInteger:", v155 - 1);
                  if ((unint64_t)v155 >= 2)
                  {
                    do
                    {
                      v161 = -[AVAudioTimePitchAlgorithm numberWithInteger:]((id)v63[234], "numberWithInteger:", --v159);
                    }

                    while (v159 > 0);
                  }
                }

                v162 = v155 + 1;
                if ((uint64_t)(v155 + 1) < (uint64_t)v382)
                {
                  do
                  {
                    v163 = -[AVAudioTimePitchAlgorithm numberWithInteger:]((id)v63[234], "numberWithInteger:", v162);
                    ++v162;
                  }

                  while (v382 != v162);
                }

                v428 = 0u;
                v427 = 0u;
                v426 = 0u;
                v425 = 0u;
                v151 = v346;
                v390 = [v154 countByEnumeratingWithState:&v425 objects:v455 count:16];
                if (v390)
                {
                  v378 = (id)(6LL - (void)v153);
                  v385 = *(void *)v426;
                  do
                  {
                    v164 = 0LL;
                    do
                    {
                      if (*(void *)v426 != v385) {
                        objc_enumerationMutation(v154);
                      }
                      v165 = *(void **)(*((void *)&v425 + 1) + 8LL * (void)v164);
                      v166 = CGPointFromString((NSString *)objc_msgSend( objc_msgSend( v393,  "objectAtIndex:",  objc_msgSend(v165, "integerValue")),  "objectForKey:",  @"location"));
                      if (v396) {
                        v167 = [v396 containsObject:v165];
                      }
                      else {
                        v167 = 0;
                      }
                      v168 = (v166.y + 1.0) * 0.5 * 4096.0;
                      v424 = -1LL;
                      v169 = (v166.x + 1.0) * 0.5 * 4096.0 + -80.0;
                      v170 = v168 + 10.0;
                      *(double *)&v171 = 170.0;
                      if (!-[MPAuthoringController rect:intersectsRects:index:]( self,  "rect:intersectsRects:index:",  v156,  &v424,  v169,  v168 + 10.0,  160.0,  170.0)
                        && !v167)
                      {
                        *(double *)&v172 = 170.0;
LABEL_141:
                        v175 = (v166.x + 1.0) * 0.5 * 4096.0 + -80.0;
                        v176 = v170;
                        v177 = *(double *)&v172;
                        goto LABEL_142;
                      }

                      v173 = v168 + -180.0;
                      *(double *)&v172 = 180.0;
                      if (!-[MPAuthoringController rect:intersectsRects:index:]( self,  "rect:intersectsRects:index:",  v156,  &v424,  v169,  v173))
                      {
                        [v375 addObject:v165];
                        v170 = v173;
                        goto LABEL_141;
                      }

                      v365 = v173;
                      if (v424 < 0) {
                        goto LABEL_143;
                      }
                      v174 = v424
                           ? [v151 objectAtIndex:v424 - 1]
                           : +[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", v348);
                      v178 = v174;
                      if (v396)
                      {
                      }

                      v179 = CGPointFromString((NSString *)objc_msgSend( objc_msgSend( v393,  "objectAtIndex:",  objc_msgSend(v178, "integerValue")),  "objectForKey:",  @"location"));
                      v423 = -1LL;
                      v180 = (v179.x + 1.0) * 0.5 * 4096.0 + -80.0;
                      v352 = (v179.y + 1.0) * 0.5 * 4096.0 + -180.0;
                      if (-[MPAuthoringController rect:intersectsRects:index:]( self,  "rect:intersectsRects:index:",  v156,  &v423,  v180))
                      {
                        goto LABEL_143;
                      }

                      v181 = [v156 mutableCopy];
                      [v181 removeObjectAtIndex:v424];
                      v182 = +[NSValue valueWithCGRect:]( &OBJC_CLASS___NSValue,  "valueWithCGRect:",  v180,  v352,  160.0,  180.0);
                      [v181 insertObject:v182 atIndex:v424];
                      if ((-[MPAuthoringController rect:intersectsRects:index:]( self,  "rect:intersectsRects:index:",  v181,  &v423,  v169,  v170,  160.0,  170.0) | v167) == 1)
                      {
                        v183 = -[MPAuthoringController rect:intersectsRects:index:]( self,  "rect:intersectsRects:index:",  v181,  &v423,  v169,  v365,  160.0,  180.0);
                        v151 = v346;
                        if ((v183 & 1) != 0) {
                          goto LABEL_143;
                        }
                        [v156 removeObjectAtIndex:v424];
                        *(double *)&v171 = 180.0;
                        v184 = +[NSValue valueWithCGRect:]( &OBJC_CLASS___NSValue,  "valueWithCGRect:",  v180,  v352,  160.0,  180.0);
                        [v156 insertObject:v184 atIndex:v424];
                        [v375 addObject:v178];
                        [v375 addObject:v165];
                        v170 = v365;
                      }

                      else
                      {
                        [v156 removeObjectAtIndex:v424];
                        v185 = +[NSValue valueWithCGRect:]( &OBJC_CLASS___NSValue,  "valueWithCGRect:",  v180,  v352,  160.0,  180.0);
                        [v156 insertObject:v185 atIndex:v424];
                        [v375 addObject:v178];
                        v151 = v346;
                      }

                      v175 = (v166.x + 1.0) * 0.5 * 4096.0 + -80.0;
                      v176 = v170;
                      v177 = *(double *)&v171;
LABEL_142:
                      objc_msgSend( v156,  "addObject:",  +[NSValue valueWithCGRect:](NSValue, "valueWithCGRect:", v175, v176, 160.0, v177));
                      [v151 addObject:v165];
                      if ([v151 count] == v378)
                      {
                        v63 = &AVAudioTimePitchAlgorithmVarispeed_ptr;
                        goto LABEL_157;
                      }

                v92 = -[MREffectOrigami _retainedByUserBackColorImageInContext:]( self,  "_retainedByUserBackColorImageInContext:",  v230);
                if (v66 < 1.0)
                {
                  if (v209)
                  {
                    objc_msgSend(v68, "setScale:");
                    [v68 setCenterX:0.0];
                    [v68 setCenterY:0.0];
                  }

                  v210 = objc_alloc(&OBJC_CLASS___NSDictionary);
                  v93 = [v92 insertingInCollection];
                  v94 = +[NSValue valueWithCGRect:]( &OBJC_CLASS___NSValue,  "valueWithCGRect:",  v216,  v214,  v240 - v216,  v224);
                  *(float *)&v95 = v202;
                  v96 = -[NSDictionary initWithObjectsAndKeys:]( v210,  "initWithObjectsAndKeys:",  v93,  @"image",  v94,  @"rectangle",  +[NSNumber numberWithFloat:](&OBJC_CLASS___NSNumber, "numberWithFloat:", v95),  @"referenceAspectRatio",  0LL);
                  -[NSMutableArray addObject:](v229, "addObject:", v96);

                  v211 = objc_alloc(&OBJC_CLASS___NSDictionary);
                  v97 = v92;
                  v98 = [v92 insertingInCollection];
                  v99 = v240 + v242;
                  v100 = v216 + v218 - (v240 + v242);
                  v101 = v214;
                  v102 = v224;
                }

                else
                {
                  if (v209)
                  {
                    objc_msgSend(v68, "setScale:");
                    [v68 setCenterX:0.0];
                    [v68 setCenterY:0.0];
                  }

                  else
                  {
                    [v68 setScale:v243 / v89];
                    v103 = v89 / v243;
                    [v68 centerX];
                    v105 = v104 * v103;
                    v51 = 2.0;
                    [v68 setCenterX:v105];
                  }

                  v212 = objc_alloc(&OBJC_CLASS___NSDictionary);
                  v106 = [v92 insertingInCollection];
                  v107 = +[NSValue valueWithCGRect:]( &OBJC_CLASS___NSValue,  "valueWithCGRect:",  v216,  v214,  v218,  v241 - v214);
                  *(float *)&v108 = v202;
                  v109 = -[NSDictionary initWithObjectsAndKeys:]( v212,  "initWithObjectsAndKeys:",  v106,  @"image",  v107,  @"rectangle",  +[NSNumber numberWithFloat:](&OBJC_CLASS___NSNumber, "numberWithFloat:", v108),  @"referenceAspectRatio",  0LL);
                  -[NSMutableArray addObject:](v229, "addObject:", v109);

                  v211 = objc_alloc(&OBJC_CLASS___NSDictionary);
                  v97 = v92;
                  v98 = [v92 insertingInCollection];
                  v101 = v241 + v243;
                  v102 = v214 + v224 - (v241 + v243);
                  v99 = v216;
                  v100 = v218;
                }

                v110 = -[NSDictionary initWithObjectsAndKeys:]( v211,  "initWithObjectsAndKeys:",  v98,  @"image",  +[NSValue valueWithCGRect:](&OBJC_CLASS___NSValue, "valueWithCGRect:", v99, v101, v100, v102),  @"rectangle",  &__kCFBooleanTrue,  @"onTop",  0LL);
                -[NSMutableArray addObject:](v229, "addObject:", v110);

                [v97 releaseByUser];
                goto LABEL_46;
              }

              v68 = v62;
              a3 = v223;
              v89 = v224;
              v51 = 2.0;
              v53 = 0.5;
              if (v72) {
                goto LABEL_85;
              }
LABEL_46:
              -[NSMutableDictionary setObject:forKey:]( v58,  "setObject:forKey:",  [v68 insertingInCollection],  @"image");
              -[NSMutableDictionary setObject:forKey:]( v58,  "setObject:forKey:",  +[NSValue valueWithCGRect:](&OBJC_CLASS___NSValue, "valueWithCGRect:", v240, v241, v242, v243),  @"rectangle");
              -[NSMutableArray addObject:](v229, "addObject:", v58);
              [v68 releaseByUser];
            }

            v50 = v57;
            v40 = v227;
          }

          v54 = (char *)v54 + 1;
        }

        while (v45 != v54);
        v111 = [v40 countByEnumeratingWithState:&v236 objects:v245 count:16];
        v45 = v111;
      }

      while (v111);
    }
  }

void sub_A650(uint64_t a1)
{
  v5 = +[EAGLContext currentContext](&OBJC_CLASS___EAGLContext, "currentContext");
  v2 = v5;
  if (v5 != [*(id *)(*(void *)(a1 + 32) + 24) glContext]) {
    +[EAGLContext setCurrentContext:]( EAGLContext,  "setCurrentContext:",  [*(id *)(*(void *)(a1 + 32) + 24) glContext]);
  }
  glPixelStorei(0xD05u, 4);
  glReadPixels( 0,  0,  (int)*(double *)(*(void *)(a1 + 32) + 40LL),  (int)*(double *)(*(void *)(a1 + 32) + 48LL),  0x1908u,  0x1401u,  *(GLvoid **)(a1 + 40));
  glFinish();
  size_t v3 = +[EAGLContext currentContext](&OBJC_CLASS___EAGLContext, "currentContext");
  v4 = v5;
  if (v3 != v5)
  {
    +[EAGLContext setCurrentContext:](&OBJC_CLASS___EAGLContext, "setCurrentContext:", v5);
    v4 = v5;
  }
}

void sub_AA94(void *a1)
{
}

void sub_AB64( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10)
{
  if (a2 == 1)
  {
    v15 = __cxa_begin_catch(a1);
    uint64_t v16 = v15[2];
    a9 = *(_OWORD *)v15;
    a10 = v16;
    [v11 setLastError:&a9];
    if (v10) {
      void *v10 = [v11[2] localizedDescription];
    }

    __cxa_end_catch();
    JUMPOUT(0xAB44LL);
  }

  _Unwind_Resume(a1);
}

void sub_AFF4(_Unwind_Exception *a1)
{
}

float sub_B1D8(uint64_t a1)
{
  return *(float *)(a1 + 16);
}

uint64_t sub_B1E0()
{
  return 1LL;
}

uint64_t sub_B1E8()
{
  return 0LL;
}

uint64_t sub_B1F0()
{
  return 1LL;
}

uint64_t sub_B1F8()
{
  return 15LL;
}

uint64_t sub_B200()
{
  return 0LL;
}

uint64_t sub_B208()
{
  return 0LL;
}

_DWORD *sub_B218()
{
  v0 = sub_122A0C(0x18uLL);
  sub_123F94(v0);
  *(void *)v0 = off_24D3F8;
  v0[4] = 0;
  return v0;
}

void sub_B254(_Unwind_Exception *a1)
{
}

_DWORD *sub_B26C(uint64_t a1)
{
  v2 = sub_122A0C(0x18uLL);
  int v3 = *(_DWORD *)(a1 + 16);
  sub_123F94(v2);
  *(void *)v2 = off_24D3F8;
  v2[4] = v3;
  return v2;
}

void sub_B2B8(_Unwind_Exception *a1)
{
}

void sub_B2D4(void *a1)
{
}

void sub_B2F8(_Unwind_Exception *a1)
{
}

void sub_B5C4(_Unwind_Exception *a1)
{
}

void sub_B740(_Unwind_Exception *a1)
{
}

void sub_B9A8(_Unwind_Exception *a1)
{
}

void sub_BC54(_Unwind_Exception *a1)
{
}

void sub_BDC0(_Unwind_Exception *a1)
{
}

void sub_BF04(_Unwind_Exception *a1)
{
}

double distanceBetweenPoints(double a1, double a2, double a3, double a4)
{
  float v4 = a3 - a1;
  float v5 = a4 - a2;
  return sqrt((float)((float)(v4 * v4) + (float)(v5 * v5)));
}

BOOL dictionaryDistanceSort(void *a1, void *a2)
{
  id v3 = [a1 objectForKey:@"distance"];
  id v4 = [a2 objectForKey:@"distance"];
  [v3 floatValue];
  float v6 = v5;
  [v4 floatValue];
  return v6 > v7;
}

BOOL dictionaryNumberSort(void *a1, void *a2)
{
  id v3 = [a1 objectForKey:@"index"];
  id v4 = [a2 objectForKey:@"index"];
  [v3 floatValue];
  float v6 = v5;
  [v4 floatValue];
  return v6 > v7;
}

LABEL_58:
                if (v35) {
                  goto LABEL_59;
                }
LABEL_63:
                if (!-[__CFString length](v240, "length") || !-[__CFString length](v34, "length"))
                {
                  v278 = 0u;
                  v279 = 0u;
                  v276 = 0u;
                  v277 = 0u;
                  v44 = [v30 countByEnumeratingWithState:&v276 objects:v304 count:16];
                  if (v44)
                  {
                    v45 = v44;
                    v46 = 0LL;
                    v47 = *(void *)v277;
                    x = CGPointZero.x;
                    v49 = y;
                    do
                    {
                      for (k = 0LL; k != v45; k = (char *)k + 1)
                      {
                        if (*(void *)v277 != v47) {
                          objc_enumerationMutation(v30);
                        }
                        v51 = *(void *)(*((void *)&v276 + 1) + 8LL * (void)k);
                        v52 = -[MPDocument latitudeForPath:](self->_authoredDocument, "latitudeForPath:", v51);
                        objc_msgSend( -[MPDocument longitudeForPath:](self->_authoredDocument, "longitudeForPath:", v51),  "floatValue");
                        v54 = v53;
                        [v52 floatValue];
                        if (v54 != 0.0)
                        {
                          v56 = v55 != 0.0 && CGPointZero.x == x;
                          if (v56 && y == v49)
                          {
                            x = x + v54;
                            v49 = v49 + v55;
                            ++v46;
                          }
                        }
                      }

                      v45 = [v30 countByEnumeratingWithState:&v276 objects:v304 count:16];
                    }

                    while (v45);
                  }

                  else
                  {
                    v46 = 0LL;
                    x = CGPointZero.x;
                    v49 = y;
                  }

                  [v215 floatValue];
                  v59 = v58;
                  [v219 floatValue];
                  if (x != CGPointZero.x || v49 != y)
                  {
                    v61 = v60;
                    v62 = v59;
                    if (CGPointZero.x != v59 || y != v61)
                    {
                      v63 = x / (double)v46;
                      v64 = v49 / (double)v46;
                      v65 = [v222 objectForKey:@"allPoints"];
                      v216 = [v65 allObjects];
                      v66 = kMPAssetMapLatLongPoints[0];
                      v67 = +[NSValue valueWithCGPoint:](&OBJC_CLASS___NSValue, "valueWithCGPoint:", v62, v61);
                      v68 = kMPAssetOptionMapLatLong[0];
                      v69 = +[NSValue valueWithCGSize:](&OBJC_CLASS___NSValue, "valueWithCGSize:", 768.0, 768.0);
                      -[MPDocument pointForMap:withAttributes:]( self->_authoredDocument,  "pointForMap:withAttributes:",  0LL,  +[NSDictionary dictionaryWithObjectsAndKeys:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjectsAndKeys:",  v216,  v66,  v67,  v68,  v69,  kMPAssetMapInset[0],  0LL));
                      v71 = v70;
                      v73 = v72;
                      v74 = [v65 allObjects];
                      v75 = kMPAssetMapLatLongPoints[0];
                      v76 = +[NSValue valueWithCGPoint:](&OBJC_CLASS___NSValue, "valueWithCGPoint:", v63, v64);
                      v77 = kMPAssetOptionMapLatLong[0];
                      v78 = +[NSValue valueWithCGSize:](&OBJC_CLASS___NSValue, "valueWithCGSize:", 768.0, 768.0);
                      -[MPDocument pointForMap:withAttributes:]( self->_authoredDocument,  "pointForMap:withAttributes:",  0LL,  +[NSDictionary dictionaryWithObjectsAndKeys:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjectsAndKeys:",  v74,  v75,  v76,  v77,  v78,  kMPAssetMapInset[0],  0LL));
                      *(float *)&v79 = v71 - v79;
                      *(float *)&v80 = v73 - v80;
                      if (sqrt((float)((float)(*(float *)&v79 * *(float *)&v79)
                                      + (float)(*(float *)&v80 * *(float *)&v80))) > 80.0)
                      {
LABEL_59:
                        if (v240) {
                          v43 = v240;
                        }
                        else {
                          v43 = &stru_259C60;
                        }
                        [v223 setObject:v43 forKey:@"PlaceName"];
                        [v209 addObject:v223];
                        v223 = +[NSMutableDictionary dictionary](&OBJC_CLASS___NSMutableDictionary, "dictionary");
                        v29 = 0LL;
LABEL_90:
                        v30 = +[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array");
                        goto LABEL_91;
                      }
                    }
                  }
                }

                v29 = v240;
                if (!v30) {
                  goto LABEL_90;
                }
LABEL_91:
                [v30 addObject:v226];
                [v223 setObject:v30 forKey:@"photos"];
                if (v244 && -[__CFString length](v244, "length")) {
                  v29 = v244;
                }
                objc_msgSend( -[MPDocument creationDateForPath:](self->_authoredDocument, "creationDateForPath:", v226),  "timeIntervalSince1970");
                v18 = v81;
                v31 = v232 + 1;
                v32 = v229 + 1;
                ++v236;
              }

              while ((id)(v229 + 1) != v213);
              v213 = [v21 countByEnumeratingWithState:&v280 objects:v305 count:16];
              if (!v213)
              {
LABEL_96:
                if (v29) {
                  v82 = v29;
                }
                else {
                  v82 = &stru_259C60;
                }
                [v223 setObject:v82 forKey:@"PlaceName"];
                [v209 addObject:v223];
                v20 = v222;
                [v222 setObject:v209 forKey:@"pins"];
                break;
              }
            }
          }

          v83 = +[NSMutableSet set](&OBJC_CLASS___NSMutableSet, "set");
          v272 = 0u;
          v273 = 0u;
          v274 = 0u;
          v275 = 0u;
          v84 = [v21 countByEnumeratingWithState:&v272 objects:v303 count:16];
          if (v84)
          {
            v85 = v84;
            v86 = *(void *)v273;
            do
            {
              for (m = 0LL; m != v85; m = (char *)m + 1)
              {
                if (*(void *)v273 != v86) {
                  objc_enumerationMutation(v21);
                }
                v88 = -[MPDocument placeForPath:]( self->_authoredDocument,  "placeForPath:",  *(void *)(*((void *)&v272 + 1) + 8LL * (void)m));
                if (v88)
                {
                  v89 = v88;
                  if ([v88 length]) {
                    [v83 addObject:v89];
                  }
                }
              }

              v85 = [v21 countByEnumeratingWithState:&v272 objects:v303 count:16];
            }

            while (v85);
          }

          if ((unint64_t)[v83 count] >= 2)
          {
            v210 = +[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array");
            v224 = +[NSMutableDictionary dictionary](&OBJC_CLASS___NSMutableDictionary, "dictionary");
            v268 = 0u;
            v269 = 0u;
            v270 = 0u;
            v271 = 0u;
            v214 = [v21 countByEnumeratingWithState:&v268 objects:v302 count:16];
            v90 = 0LL;
            if (!v214) {
              goto LABEL_178;
            }
            v91 = 0LL;
            v92 = 0LL;
            v212 = *(void *)v269;
            while (1)
            {
              v93 = 0LL;
              v237 = (char *)(v92 + 1);
              do
              {
                if (*(void *)v269 != v212) {
                  objc_enumerationMutation(v21);
                }
                v94 = *(void *)(*((void *)&v268 + 1) + 8 * v93);
                v95 = -[MPDocument areaForPath:](self->_authoredDocument, "areaForPath:", v94);
                v220 = -[MPDocument latitudeForPath:](self->_authoredDocument, "latitudeForPath:", v94);
                v217 = -[MPDocument longitudeForPath:](self->_authoredDocument, "longitudeForPath:", v94);
                v230 = v93;
                v233 = v92;
                v241 = v90;
                v245 = v95;
                v227 = v94;
                if (v95)
                {
                  v96 = (-[__CFString isEqualToString:](v90, "isEqualToString:", v95) & 1) == 0
                     && -[__CFString length](v95, "length")
                     && -[__CFString length](v90, "length") != 0LL;
                  if (-[__CFString length](v95, "length")) {
                    v97 = 1;
                  }
                  else {
                    v97 = v90 == 0LL;
                  }
                  if (v97) {
                    goto LABEL_140;
                  }
                }

                else
                {
                  if (!v90) {
                    goto LABEL_145;
                  }
                  v96 = 0;
                }

                v98 = 0LL;
                v99 = 0LL;
                v100 = 0.0;
                v101 = v237;
                while (v101 < (char *)[v21 count] - 1)
                {
                  v98 = [v21 objectAtIndex:v101];
                  v99 = -[MPDocument placeForPath:](self->_authoredDocument, "placeForPath:", v98);
                  objc_msgSend( -[MPDocument creationDateForPath:](self->_authoredDocument, "creationDateForPath:", v98),  "timeIntervalSince1970");
                  v100 = v100 + v102;
                  ++v101;
                  if (v99 && [v99 length]) {
                    goto LABEL_135;
                  }
                }

                if (v99)
                {
LABEL_135:
                  if ([v99 length]
                    && ([v99 isEqualToString:v241] & 1) != 0)
                  {
                    goto LABEL_145;
                  }

                  if ([v99 length])
                  {
                    objc_msgSend( -[MPDocument creationDateForPath:](self->_authoredDocument, "creationDateForPath:", v98),  "timeIntervalSince1970");
                    if (vabdd_f64(v18, v100 / 0.0) >= vabdd_f64(v103, v100 / 0.0)) {
                      goto LABEL_141;
                    }
                    goto LABEL_145;
                  }
                }

          v55 = objc_msgSend(objc_msgSend(v18, "baseContext"), "clippedSizeWithSize:", v48, v51);
          if (v80 <= 4u) {
            v56 = v55;
          }
          else {
            v56 = HIDWORD(v55);
          }
          if (v80 <= 4u) {
            v57 = HIDWORD(v55);
          }
          else {
            v57 = v55;
          }
          if (a4)
          {
            v58 = 1 << vcvtpd_u64_f64(log2((double)v56 * 0.8));
            v57 = (1 << vcvtpd_u64_f64(log2((double)v57 * 0.8)));
          }

          else
          {
            v58 = (v56 + 15) & 0xFFFFFFF0;
          }

          goto LABEL_79;
        }
      }

      else if (a7 <= v48)
      {
        v51 = v40;
        v48 = v39;
        goto LABEL_58;
      }

      v51 = v47;
      goto LABEL_58;
    }

LABEL_140:
                if (v96) {
                  goto LABEL_141;
                }
LABEL_145:
                if (!-[__CFString length](v241, "length") || !-[__CFString length](v95, "length"))
                {
                  v266 = 0u;
                  v267 = 0u;
                  v264 = 0u;
                  v265 = 0u;
                  v105 = [v91 countByEnumeratingWithState:&v264 objects:v301 count:16];
                  if (v105)
                  {
                    v106 = v105;
                    v107 = 0LL;
                    v108 = *(void *)v265;
                    v109 = CGPointZero.x;
                    v110 = y;
                    do
                    {
                      for (n = 0LL; n != v106; n = (char *)n + 1)
                      {
                        if (*(void *)v265 != v108) {
                          objc_enumerationMutation(v91);
                        }
                        v112 = *(void *)(*((void *)&v264 + 1) + 8LL * (void)n);
                        v113 = -[MPDocument latitudeForPath:](self->_authoredDocument, "latitudeForPath:", v112);
                        objc_msgSend( -[MPDocument longitudeForPath:](self->_authoredDocument, "longitudeForPath:", v112),  "floatValue");
                        v115 = v114;
                        [v113 floatValue];
                        if (v115 != 0.0)
                        {
                          v117 = v116 != 0.0 && CGPointZero.x == v109;
                          if (v117 && y == v110)
                          {
                            v109 = v109 + v115;
                            v110 = v110 + v116;
                            ++v107;
                          }
                        }
                      }

                      v106 = [v91 countByEnumeratingWithState:&v264 objects:v301 count:16];
                    }

                    while (v106);
                  }

                  else
                  {
                    v107 = 0LL;
                    v109 = CGPointZero.x;
                    v110 = y;
                  }

                  [v217 floatValue];
                  v120 = v119;
                  [v220 floatValue];
                  if (v109 != CGPointZero.x || v110 != y)
                  {
                    v122 = v121;
                    v123 = v120;
                    if (CGPointZero.x != v120 || y != v122)
                    {
                      v124 = v109 / (double)v107;
                      v125 = v110 / (double)v107;
                      v126 = [v222 objectForKey:@"allPoints"];
                      v218 = [v126 allObjects];
                      v127 = kMPAssetMapLatLongPoints[0];
                      v128 = +[NSValue valueWithCGPoint:](&OBJC_CLASS___NSValue, "valueWithCGPoint:", v123, v122);
                      v129 = kMPAssetOptionMapLatLong[0];
                      v130 = +[NSValue valueWithCGSize:](&OBJC_CLASS___NSValue, "valueWithCGSize:", 768.0, 768.0);
                      -[MPDocument pointForMap:withAttributes:]( self->_authoredDocument,  "pointForMap:withAttributes:",  0LL,  +[NSDictionary dictionaryWithObjectsAndKeys:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjectsAndKeys:",  v218,  v127,  v128,  v129,  v130,  kMPAssetMapInset[0],  0LL));
                      v132 = v131;
                      v134 = v133;
                      v135 = [v126 allObjects];
                      v136 = kMPAssetMapLatLongPoints[0];
                      v137 = +[NSValue valueWithCGPoint:](&OBJC_CLASS___NSValue, "valueWithCGPoint:", v124, v125);
                      v138 = kMPAssetOptionMapLatLong[0];
                      v139 = +[NSValue valueWithCGSize:](&OBJC_CLASS___NSValue, "valueWithCGSize:", 768.0, 768.0);
                      -[MPDocument pointForMap:withAttributes:]( self->_authoredDocument,  "pointForMap:withAttributes:",  0LL,  +[NSDictionary dictionaryWithObjectsAndKeys:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjectsAndKeys:",  v135,  v136,  v137,  v138,  v139,  kMPAssetMapInset[0],  0LL));
                      *(float *)&v140 = v132 - v140;
                      *(float *)&v141 = v134 - v141;
                      if (sqrt((float)((float)(*(float *)&v140 * *(float *)&v140)
                                      + (float)(*(float *)&v141 * *(float *)&v141))) > 80.0)
                      {
LABEL_141:
                        if (v241) {
                          v104 = v241;
                        }
                        else {
                          v104 = &stru_259C60;
                        }
                        [v224 setObject:v104 forKey:@"PlaceName"];
                        [v210 addObject:v224];
                        v224 = +[NSMutableDictionary dictionary](&OBJC_CLASS___NSMutableDictionary, "dictionary");
                        v90 = 0LL;
LABEL_172:
                        v91 = +[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array");
                        goto LABEL_173;
                      }
                    }
                  }
                }

                v90 = v241;
                if (!v91) {
                  goto LABEL_172;
                }
LABEL_173:
                [v91 addObject:v227];
                [v224 setObject:v91 forKey:@"photos"];
                if (v245 && -[__CFString length](v245, "length")) {
                  v90 = v245;
                }
                objc_msgSend( -[MPDocument creationDateForPath:](self->_authoredDocument, "creationDateForPath:", v227),  "timeIntervalSince1970");
                v18 = v142;
                v92 = v233 + 1;
                v93 = v230 + 1;
                ++v237;
              }

              while ((id)(v230 + 1) != v214);
              v214 = [v21 countByEnumeratingWithState:&v268 objects:v302 count:16];
              if (!v214)
              {
LABEL_178:
                if (v90) {
                  v143 = v90;
                }
                else {
                  v143 = &stru_259C60;
                }
                [v224 setObject:v143 forKey:@"PlaceName"];
                [v210 addObject:v224];
                v20 = v222;
                [v222 setObject:v210 forKey:@"pins"];
                break;
              }
            }
          }

          v221 = +[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array");
          v231 = +[NSMutableDictionary dictionary](&OBJC_CLASS___NSMutableDictionary, "dictionary");
          v260 = 0u;
          v261 = 0u;
          v262 = 0u;
          v263 = 0u;
          v228 = [v21 countByEnumeratingWithState:&v260 objects:v300 count:16];
          if (!v228) {
            goto LABEL_220;
          }
          v144 = 0LL;
          v225 = *(void *)v261;
          while (2)
          {
            v145 = 0LL;
LABEL_187:
            if (*(void *)v261 != v225) {
              objc_enumerationMutation(v21);
            }
            v246 = v145;
            v146 = *(void *)(*((void *)&v260 + 1) + 8 * v145);
            v238 = -[MPDocument latitudeForPath:](self->_authoredDocument, "latitudeForPath:", v146);
            v242 = v146;
            v234 = -[MPDocument longitudeForPath:](self->_authoredDocument, "longitudeForPath:", v146);
            v256 = 0u;
            v257 = 0u;
            v258 = 0u;
            v259 = 0u;
            v147 = [v144 countByEnumeratingWithState:&v256 objects:v299 count:16];
            if (v147)
            {
              v148 = v147;
              v149 = 0LL;
              v150 = *(void *)v257;
              v151 = y;
              v152 = CGPointZero.x;
              do
              {
                for (ii = 0LL; ii != v148; ii = (char *)ii + 1)
                {
                  if (*(void *)v257 != v150) {
                    objc_enumerationMutation(v144);
                  }
                  v154 = *(void *)(*((void *)&v256 + 1) + 8LL * (void)ii);
                  v155 = -[MPDocument latitudeForPath:](self->_authoredDocument, "latitudeForPath:", v154);
                  objc_msgSend( -[MPDocument longitudeForPath:](self->_authoredDocument, "longitudeForPath:", v154),  "floatValue");
                  v157 = v156;
                  [v155 floatValue];
                  if (v157 != 0.0)
                  {
                    v159 = v158 != 0.0 && CGPointZero.x == v152;
                    if (v159 && y == v151)
                    {
                      v152 = v152 + v157;
                      v151 = v151 + v158;
                      ++v149;
                    }
                  }
                }

                v148 = [v144 countByEnumeratingWithState:&v256 objects:v299 count:16];
              }

              while (v148);
            }

            else
            {
              v149 = 0LL;
              v151 = y;
              v152 = CGPointZero.x;
            }

            [v234 floatValue];
            v162 = v161;
            [v238 floatValue];
            if (v152 != CGPointZero.x || v151 != y)
            {
              v164 = v163;
              v165 = v162;
              if (CGPointZero.x != v162 || y != v164)
              {
                v167 = v152 / (double)v149;
                v168 = v151 / (double)v149;
                v169 = [v222 objectForKey:@"allPoints"];
                v170 = [v169 allObjects];
                v171 = kMPAssetMapLatLongPoints[0];
                v172 = +[NSValue valueWithCGPoint:](&OBJC_CLASS___NSValue, "valueWithCGPoint:", v165, v164);
                v173 = kMPAssetOptionMapLatLong[0];
                v174 = +[NSValue valueWithCGSize:](&OBJC_CLASS___NSValue, "valueWithCGSize:", 768.0, 768.0);
                -[MPDocument pointForMap:withAttributes:]( self->_authoredDocument,  "pointForMap:withAttributes:",  0LL,  +[NSDictionary dictionaryWithObjectsAndKeys:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjectsAndKeys:",  v170,  v171,  v172,  v173,  v174,  kMPAssetMapInset[0],  0LL));
                v176 = v175;
                v178 = v177;
                v179 = [v169 allObjects];
                v180 = kMPAssetMapLatLongPoints[0];
                v181 = +[NSValue valueWithCGPoint:](&OBJC_CLASS___NSValue, "valueWithCGPoint:", v167, v168);
                v182 = kMPAssetOptionMapLatLong[0];
                v183 = +[NSValue valueWithCGSize:](&OBJC_CLASS___NSValue, "valueWithCGSize:", 768.0, 768.0);
                -[MPDocument pointForMap:withAttributes:]( self->_authoredDocument,  "pointForMap:withAttributes:",  0LL,  +[NSDictionary dictionaryWithObjectsAndKeys:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjectsAndKeys:",  v179,  v180,  v181,  v182,  v183,  kMPAssetMapInset[0],  0LL));
                *(float *)&v184 = v176 - v184;
                *(float *)&v185 = v178 - v185;
                if (sqrt((float)((float)(*(float *)&v184 * *(float *)&v184) + (float)(*(float *)&v185 * *(float *)&v185))) > 80.0)
                {
                  [v231 setObject:&stru_259C60 forKey:@"PlaceName"];
                  [v221 addObject:v231];
                  v231 = +[NSMutableDictionary dictionary](&OBJC_CLASS___NSMutableDictionary, "dictionary");
                  goto LABEL_217;
                }
              }
            }

            if (!v144) {
LABEL_217:
            }
              v144 = +[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array");
            [v144 addObject:v242];
            [v231 setObject:v144 forKey:@"photos"];
            v145 = v246 + 1;
            v20 = v222;
            if ((id)(v246 + 1) == v228)
            {
              v228 = [v21 countByEnumeratingWithState:&v260 objects:v300 count:16];
              if (!v228)
              {
LABEL_220:
                [v231 setObject:&stru_259C60 forKey:@"PlaceName"];
                [v221 addObject:v231];
                [v20 setObject:v221 forKey:@"pins"];
                break;
              }

              continue;
            }

            goto LABEL_187;
          }
        }

LABEL_221:
        v19 = v207 + 1;
      }

      while ((id)(v207 + 1) != v206);
      v206 = [obj countByEnumeratingWithState:&v288 objects:v307 count:16];
    }

    while (v206);
  }

  objc_autoreleasePoolPop(context);
  v186 = obj;
  -[MPAuthoringController _renameMapsAndPins:withOptions:](self, "_renameMapsAndPins:withOptions:", obj, a4);
  -[MPAuthoringController _gatherLocationInfoForMaps:](self, "_gatherLocationInfoForMaps:", obj);
  if (self->_placesDebug)
  {
    v254 = 0u;
    v255 = 0u;
    v252 = 0u;
    v253 = 0u;
    v239 = [obj countByEnumeratingWithState:&v252 objects:v298 count:16];
    if (v239)
    {
      v187 = 0LL;
      v235 = *(void *)v253;
      do
      {
        v188 = 0LL;
        do
        {
          if (*(void *)v253 != v235) {
            objc_enumerationMutation(v186);
          }
          v243 = v188;
          v189 = *(void **)(*((void *)&v252 + 1) + 8 * v188);
          NSLog(@"-----");
          v247 = v187;
          NSLog(@"Map %d: %@", v187, [v189 objectForKey:@"MapName"]);
          v250 = 0u;
          v251 = 0u;
          v248 = 0u;
          v249 = 0u;
          v190 = [v189 objectForKey:@"pins"];
          v191 = [v190 countByEnumeratingWithState:&v248 objects:v297 count:16];
          if (v191)
          {
            v192 = v191;
            v193 = 0LL;
            v194 = *(void *)v249;
            do
            {
              for (jj = 0LL; jj != v192; jj = (char *)jj + 1)
              {
                if (*(void *)v249 != v194) {
                  objc_enumerationMutation(v190);
                }
                v196 = *(void **)(*((void *)&v248 + 1) + 8LL * (void)jj);
                v197 = [v196 objectForKey:@"photos"];
                v198 = [v196 objectForKey:@"PlaceName"];
                if (v197) {
                  v199 = [v197 count];
                }
                else {
                  v199 = 0LL;
                }
                NSLog(@"     - Pin %d: %@, %d", (char *)jj + v193, v198, v199);
              }

              v192 = [v190 countByEnumeratingWithState:&v248 objects:v297 count:16];
              v193 = (v193 + (_DWORD)jj);
            }

            while (v192);
          }

          v187 = (v247 + 1);
          v188 = v243 + 1;
          v186 = obj;
        }

        while ((id)(v243 + 1) != v239);
        v239 = [obj countByEnumeratingWithState:&v252 objects:v298 count:16];
      }

      while (v239);
    }
  }

  return v186;
}

LABEL_34:
        v14 = v120;
        v31 = v118;
        v39 = [v35 length];
        v30 = v103;
        if (!v39) {
          goto LABEL_40;
        }
        objc_msgSend( -[MPDocument creationDateForPath:](self->_authoredDocument, "creationDateForPath:", v34),  "timeIntervalSince1970");
        if (vabdd_f64(v12, v36 / 0.0) < vabdd_f64(v40, v36 / 0.0)) {
          goto LABEL_46;
        }
        goto LABEL_41;
      }

      v29 = v119;
      v30 = (-[__CFString isEqualToString:](v119, "isEqualToString:", v116) & 1) == 0
         && -[__CFString length](v116, "length")
         && -[__CFString length](v119, "length") != 0LL;
      v32 = v117;
      v31 = v118;
      if (-[__CFString length](v116, "length")) {
        v33 = 1;
      }
      else {
        v33 = v119 == 0LL;
      }
      if (!v33) {
        goto LABEL_28;
      }
LABEL_40:
      if (!v30) {
        goto LABEL_46;
      }
LABEL_41:
      if (v29 && -[__CFString length](v29, "length")
        || !v108
        || !v115
        || ![v108 isEqualToString:v115])
      {
        goto LABEL_82;
      }

  float v7 = v28;
  float v6 = v29;
  if (!self->super.mIsPrecomputing)
  {
    -[MRLayer setNeedsUpdateForPluggerOfSublayer:](self->super.mSuperlayer, "setNeedsUpdateForPluggerOfSublayer:", self);
    -[MRLayer stampTime](self, "stampTime");
  }

  v265 = v57;
  v271 = v35;
  v276 = v32;
  v291 = v34;
  v59 = 0.02 / v34;
  v252 = v58;
  v60 = 0.02 / v58;
  [a1 localAspectRatio];
  v62 = v60 * v61;
  v300.origin.x = v59 * 0.5 + 0.0107579462;
  y = v62 * 0.5 + 0.0122249389;
  width = 0.978484108 - v59;
  height = 0.975550122 - v62;
  v293 = v300.origin.x;
  v300.origin.y = y;
  v300.size.width = 0.978484108 - v59;
  v300.size.height = 0.975550122 - v62;
  v301 = CGRectInset(v300, v59 * 0.6, v62 * 0.6);
  v63 = v301.origin.y;
  v257 = v62 + 0.0122249389;
  v254 = v56;
  v247 = v59 + 0.0107579462;
  if (!v21)
  {
    v30 = *(unsigned __int8 *)(a10 + 120);
    v287 = v301.origin.x;
    v277 = v301.size.width;
    v280 = v301.origin.y;
    v275 = v301.size.height;
LABEL_38:
    v69 = v30 == 0;
    v70 = dbl_1F6D10[v69];
    v71 = dbl_1F6D20[v69];
    [a1 localAspectRatio];
    v73 = 0.02 / v288 * v72;
    v302.origin.x = v71 + 0.02 / v283 * 0.5;
    v302.origin.y = v70 + v73 * 0.5;
    v302.size.width = v71 * -2.0 + 1.0 - 0.02 / v283;
    v302.size.height = v70 * -2.0 + 1.0 - v73;
    v268 = v302.origin.y;
    x = v302.origin.x;
    v266 = v302.size.height;
    v267 = v302.size.width;
    v303 = CGRectInset(v302, 0.02 / v283 * 0.6, v73 * 0.6);
    v260 = v303.origin.y;
    v261 = v303.origin.x;
    v258 = v303.size.height;
    v259 = v303.size.width;
    v74 = 1.3;
    if (!*(_BYTE *)(a10 + 120)) {
      v74 = 1.0;
    }
    v253 = 0.02 / v283 + v71 * v74;
    v75 = 1.05;
    if (*(_BYTE *)(a10 + 120)) {
      v75 = 1.0;
    }
    v284 = height;
    v64 = width;
    v65 = y;
    v289 = v293;
    v66 = v275;
    v255 = v73 + v70 * v75;
    v67 = v277;
    v68 = v280;
    v47 = v287;
    v56 = v256;
    goto LABEL_43;
  }

  v284 = 0.975550122 - v62;
  v64 = 0.978484108 - v59;
  v65 = v62 * 0.5 + 0.0122249389;
  v289 = v59 * 0.5 + 0.0107579462;
  v66 = v301.size.height;
  v67 = v301.size.width;
  v68 = v63;
  v47 = v301.origin.x;
LABEL_43:
  v51 = v291;
  v278 = v65;
  v281 = v64;
  objc_msgSend(a2, "scale", *(void *)&v247);
  v249 = v76;
  [a2 centerX];
  v250 = v77;
  [a2 centerY];
  v251 = v78;
  [a2 setScale:v56];
  v79 = v264;
  if (v21) {
    v79 = v270;
  }
  v52 = v252;
  v273 = v66;
  v274 = v67;
  v286 = v68;
  if (*(_BYTE *)(a10 + 120))
  {
    [a2 setCenterX:v79];
    [a2 setCenterY:0.0];
  }

  else
  {
    [a2 setCenterY:v79];
    [a2 setCenterX:0.0];
  }

  v48 = v289;
  v40 = v284;
  v46 = v278;
  v50 = v281;
  v49 = v248;
LABEL_49:
  [a1 blend:0];
  [a4 setNeedsInSpriteCoordinates:1];
  [a4 setPreservesImageAspectRatio:1];
  v290 = v48;
  v81 = v268;
  v80 = x;
  if (v21) {
    v80 = v48;
  }
  v279 = v46;
  v282 = v50;
  if (v21) {
    v81 = v46;
  }
  v83 = v266;
  v82 = v267;
  if (v21) {
    v82 = v50;
  }
  v285 = v40;
  if (v21) {
    v83 = v40;
  }
  objc_msgSend(a4, "setOuterRect:", v80, v81, v82, v83);
  v84 = v49;
  v85 = v52;
  v292 = v51;
  v294 = v47;
  v86 = v286;
  v88 = v273;
  v87 = v274;
  if (!v21)
  {
    v84 = v253;
    v52 = v288;
    v51 = v283;
    v86 = v260;
    v47 = v261;
    v88 = v258;
    v87 = v259;
  }

  objc_msgSend(a4, "setInnerRect:", v47, v86, v87, v88);
  if (*(_BYTE *)(a10 + 120)) {
    v89 = v257 * 1.1;
  }
  else {
    v89 = v257;
  }
  [a1 setShader:@"HangingPicturesSlideBorder"];
  v90 = a6 * v51 * 0.1;
  *(float *)&v90 = v90;
  v91 = a7 * v52 * 0.1;
  *(float *)&v91 = v91;
  [a1 setShaderUniformVec2:@"invRadii" :v90 forKey:v91];
  v93 = v255;
  if (v21) {
    v93 = v89;
  }
  *(float *)&v93 = v93;
  *(float *)&v92 = v84;
  [a1 setShaderUniformVec2:@"borderSize" :v92 forKey:v93];
  LODWORD(v94) = 0;
  [a3 setOnContext:a1 onTextureUnit:1 withReferenceAspectRatio:&v295 state:v94];
  if (v21)
  {
    v96 = v85;
    if (*(_BYTE *)(a10 + 120))
    {
      LODWORD(v95) = 0;
      objc_msgSend(a4, "renderImageMiddle:inContext:atPosition:andSize:zRotation:", a2, a1, v271, 0.0, v292, v85, v95);
      LODWORD(v97) = 981668463;
      LODWORD(v98) = 0;
      LODWORD(v99) = 0;
      [a1 translateModelViewMatrixByX:0 Y:v98 Z:v99 saveTo:v97];
      [a2 centerX];
      [a2 setCenterX:v265 + v100];
      [a4 setMeshType:2];
      *(float *)&v101 = -*(float *)(a10 + 80);
      objc_msgSend( a4,  "renderImageMiddle:inContext:atPosition:andSize:zRotation:",  a2,  a1,  v272 - *(float *)(a10 + 56),  *(float *)(a10 + 68),  v292,  v85,  v101);
      LODWORD(v102) = 0;
      LODWORD(v103) = 0;
      LODWORD(v104) = -1174203793;
      [a1 translateModelViewMatrixByX:0 Y:v102 Z:v103 saveTo:v104];
      v105 = v272 - v276;
      [a2 centerX];
      [a2 setCenterX:v265 + v106];
      if (*(void *)(a10 + 104))
      {
        *(float *)&v107 = -*(float *)(a10 + 84);
        objc_msgSend( a4,  "renderImageMiddle:inContext:atPosition:andSize:zRotation:",  a2,  a1,  v105 - *(float *)(a10 + 60),  *(float *)(a10 + 72),  v292,  v85,  v107);
        v105 = v105 - v276;
        [a2 centerX];
        [a2 setCenterX:v265 + v108];
      }

      else
      {
        [a4 setMeshType:0];
      }

      v112 = v290;
      *(float *)&v109 = -*(float *)(a10 + 88);
      objc_msgSend( a4,  "renderImageMiddle:inContext:atPosition:andSize:zRotation:",  a2,  a1,  v105 - *(float *)(a10 + 64),  *(float *)(a10 + 76),  v292,  v96,  v109);
      LODWORD(v139) = 0;
      LODWORD(v140) = 0;
      LODWORD(v141) = -1174203793;
      [a1 translateModelViewMatrixByX:0 Y:v139 Z:v140 saveTo:v141];
      [a4 setMeshType:0];
    }

    else
    {
      LODWORD(v95) = 0;
      objc_msgSend(a4, "renderImageMiddle:inContext:atPosition:andSize:zRotation:", a2, a1, 0.0, v271, v292, v85, v95);
      LODWORD(v127) = 981668463;
      LODWORD(v128) = 0;
      LODWORD(v129) = 0;
      [a1 translateModelViewMatrixByX:0 Y:v128 Z:v129 saveTo:v127];
      [a2 centerY];
      [a2 setCenterY:v265 + v130];
      [a4 setMeshType:3];
      LODWORD(v131) = 0;
      objc_msgSend( a4,  "renderImageMiddle:inContext:atPosition:andSize:zRotation:",  a2,  a1,  *(float *)(a10 + 56),  v271 - *(float *)(a10 + 68) * v276,  v292,  v85,  v131);
      LODWORD(v132) = 0;
      LODWORD(v133) = 0;
      LODWORD(v134) = -1174203793;
      [a1 translateModelViewMatrixByX:0 Y:v132 Z:v133 saveTo:v134];
      [a2 centerY];
      [a2 setCenterY:v265 + v135];
      if (*(void *)(a10 + 104))
      {
        LODWORD(v136) = 0;
        objc_msgSend( a4,  "renderImageMiddle:inContext:atPosition:andSize:zRotation:",  a2,  a1,  *(float *)(a10 + 60),  v271 - *(float *)(a10 + 72) * v276,  v292,  v85,  v136);
        [a2 centerY];
        [a2 setCenterY:v265 + v137];
      }

      else
      {
        [a4 setMeshType:0];
      }

      LODWORD(v138) = 0;
      objc_msgSend( a4,  "renderImageMiddle:inContext:atPosition:andSize:zRotation:",  a2,  a1,  *(float *)(a10 + 64),  v271 - *(float *)(a10 + 76) * v276,  v292,  v85,  v138);
      LODWORD(v147) = 0;
      LODWORD(v148) = 0;
      LODWORD(v149) = -1174203793;
      [a1 translateModelViewMatrixByX:0 Y:v147 Z:v148 saveTo:v149];
      [a4 setMeshType:0];
      v112 = v290;
    }

    v111 = v283;
  }

  else
  {
    [a1 setShaderUniformInt:v20 != 0 forKey:@"isDoubleBreak"];
    v96 = v85;
    v111 = v283;
    if (v20) {
      [a1 setShaderUniformInt:*(unsigned __int8 *)(a10 + 120) forKey:@"isLandscape"];
    }
    LODWORD(v110) = 0;
    objc_msgSend( a4,  "renderImageMiddle:inContext:atPosition:andSize:zRotation:",  a2,  a1,  CGPointZero.x,  CGPointZero.y,  v283,  v288,  v110);
    v112 = v290;
    if (*(_BYTE *)(a10 + 125))
    {
      objc_msgSend(a4, "setOuterRect:", v290, v279, v50, v285);
      objc_msgSend(a4, "setInnerRect:", v294, v286, v274, v273);
      v113 = a6 * v292 * 0.1;
      *(float *)&v113 = v113;
      v114 = a7 * v96 * 0.1;
      *(float *)&v114 = v114;
      [a1 setShaderUniformVec2:@"invRadii" :v113 forKey:v114];
      *(float *)&v115 = v49;
      *(float *)&v116 = v89;
      [a1 setShaderUniformVec2:@"borderSize" :v115 forKey:v116];
      if (*(_BYTE *)(a10 + 120))
      {
        [a2 setScale:v254];
        LODWORD(v120) = 973279855;
        LODWORD(v121) = 0;
        LODWORD(v122) = 0;
        [a1 translateModelViewMatrixByX:0 Y:v121 Z:v122 saveTo:v120];
        [a2 setCenterX:v270 + v265 * 3.0];
        [a4 setMeshType:2];
        *(float *)&v123 = -*(float *)(a10 + 88);
        objc_msgSend( a4,  "renderImageMiddle:inContext:atPosition:andSize:zRotation:",  a2,  a1,  v272 + v276 * -2.0 - *(float *)(a10 + 64),  *(float *)(a10 + 76),  v292,  v96,  v123);
        LODWORD(v124) = -1174203793;
        LODWORD(v125) = 0;
        LODWORD(v126) = 0;
        [a1 translateModelViewMatrixByX:0 Y:v125 Z:v126 saveTo:v124];
        [a4 setMeshType:0];
        [a2 setCenterX:v264];
        [a2 setScale:v256];
      }

      else
      {
        LODWORD(v119) = 973279855;
        LODWORD(v117) = 0;
        LODWORD(v118) = 0;
        [a1 translateModelViewMatrixByX:0 Y:v117 Z:v118 saveTo:v119];
        [a2 centerY];
        [a2 setCenterY:v270 + v265 * 3.0 + v142];
        [a4 setMeshType:3];
        LODWORD(v143) = 0;
        objc_msgSend( a4,  "renderImageMiddle:inContext:atPosition:andSize:zRotation:",  a2,  a1,  *(float *)(a10 + 64),  v272 + v276 * -2.0 - *(float *)(a10 + 76) * v276,  v292,  v96,  v143);
        LODWORD(v144) = -1174203793;
        LODWORD(v145) = 0;
        LODWORD(v146) = 0;
        [a1 translateModelViewMatrixByX:0 Y:v145 Z:v146 saveTo:v144];
        [a4 setMeshType:0];
        [a2 setCenterY:v264];
      }

      objc_msgSend(a4, "setOuterRect:", x, v268, v267, v266);
      objc_msgSend(a4, "setInnerRect:", v261, v260, v259, v258);
      v112 = v290;
    }
  }

  [a3 unsetOnContext:a1 onTextureUnit:1 state:&v295];
  [a1 unsetShader];
  [a4 setNeedsInSpriteCoordinates:0];
  else {
    v150 = @"PlainTexture";
  }
  [a1 setShader:v150];
  if (v21)
  {
    v152 = v286;
    v153 = v271;
    v154 = v292;
    if (*(_BYTE *)(a10 + 120))
    {
      [a2 setCenterX:v270];
      LODWORD(v155) = 0;
      objc_msgSend(a4, "renderImageInner:inContext:atPosition:andSize:zRotation:", a2, a1, v271, 0.0, v292, v96, v155);
      LODWORD(v156) = 981668463;
      LODWORD(v157) = 0;
      LODWORD(v158) = 0;
      [a1 translateModelViewMatrixByX:0 Y:v157 Z:v158 saveTo:v156];
      [a2 centerX];
      [a2 setCenterX:v265 + v159];
      *(float *)&v160 = -*(float *)(a10 + 80);
      objc_msgSend( a4,  "renderImageInner:inContext:atPosition:andSize:zRotation:",  a2,  a1,  v272 - *(float *)(a10 + 56),  *(float *)(a10 + 68),  v292,  v96,  v160);
      LODWORD(v161) = 0;
      LODWORD(v162) = 0;
      LODWORD(v163) = -1174203793;
      [a1 translateModelViewMatrixByX:0 Y:v161 Z:v162 saveTo:v163];
      v164 = v272 - v276;
      [a2 centerX];
      [a2 setCenterX:v265 + v165];
      if (*(void *)(a10 + 104))
      {
        *(float *)&v166 = -*(float *)(a10 + 84);
        objc_msgSend( a4,  "renderImageInner:inContext:atPosition:andSize:zRotation:",  a2,  a1,  v164 - *(float *)(a10 + 60),  *(float *)(a10 + 72),  v292,  v96,  v166);
        v164 = v164 - v276;
        [a2 centerX];
        [a2 setCenterX:v265 + v167];
      }

      v112 = v290;
      *(float *)&v166 = -*(float *)(a10 + 88);
      objc_msgSend( a4,  "renderImageInner:inContext:atPosition:andSize:zRotation:",  a2,  a1,  v164 - *(float *)(a10 + 64),  *(float *)(a10 + 76),  v292,  v96,  v166);
      LODWORD(v168) = 0;
      LODWORD(v169) = 0;
      LODWORD(v170) = -1174203793;
      [a1 translateModelViewMatrixByX:0 Y:v168 Z:v169 saveTo:v170];
      v153 = v271;
      v171 = v276;
    }

    else
    {
      [a2 setCenterY:v270];
      LODWORD(v183) = 0;
      objc_msgSend(a4, "renderImageInner:inContext:atPosition:andSize:zRotation:", a2, a1, 0.0, v271, v292, v96, v183);
      LODWORD(v184) = 981668463;
      LODWORD(v185) = 0;
      LODWORD(v186) = 0;
      [a1 translateModelViewMatrixByX:0 Y:v185 Z:v186 saveTo:v184];
      [a2 centerY];
      [a2 setCenterY:v265 + v187];
      v171 = v276;
      LODWORD(v188) = 0;
      objc_msgSend( a4,  "renderImageInner:inContext:atPosition:andSize:zRotation:",  a2,  a1,  *(float *)(a10 + 56),  v271 - *(float *)(a10 + 68) * v276,  v292,  v96,  v188);
      LODWORD(v189) = 0;
      LODWORD(v190) = 0;
      LODWORD(v191) = -1174203793;
      [a1 translateModelViewMatrixByX:0 Y:v189 Z:v190 saveTo:v191];
      [a2 centerY];
      [a2 setCenterY:v265 + v192];
      if (*(void *)(a10 + 104))
      {
        LODWORD(v193) = 0;
        objc_msgSend( a4,  "renderImageInner:inContext:atPosition:andSize:zRotation:",  a2,  a1,  *(float *)(a10 + 60),  v271 - *(float *)(a10 + 72) * v276,  v292,  v96,  v193);
        [a2 centerY];
        [a2 setCenterY:v265 + v194];
      }

      LODWORD(v193) = 0;
      objc_msgSend( a4,  "renderImageInner:inContext:atPosition:andSize:zRotation:",  a2,  a1,  *(float *)(a10 + 64),  v271 - *(float *)(a10 + 76) * v276,  v292,  v96,  v193);
      LODWORD(v195) = 0;
      LODWORD(v196) = 0;
      LODWORD(v197) = -1174203793;
      [a1 translateModelViewMatrixByX:0 Y:v195 Z:v196 saveTo:v197];
      v112 = v290;
    }

    v172 = v294;
  }

  else
  {
    LODWORD(v151) = 0;
    objc_msgSend( a4,  "renderImageInner:inContext:atPosition:andSize:zRotation:",  a2,  a1,  CGPointZero.x,  CGPointZero.y,  v111,  v288,  v151);
    v154 = v292;
    v172 = v294;
    v153 = v271;
    v171 = v276;
    v152 = v286;
    if (*(_BYTE *)(a10 + 125))
    {
      objc_msgSend(a4, "setOuterRect:", v112, v279, v282, v285);
      objc_msgSend(a4, "setInnerRect:", v294, v286, v274, v273);
      if (*(_BYTE *)(a10 + 120))
      {
        [a2 setScale:v254];
        LODWORD(v176) = 973279855;
        LODWORD(v177) = 0;
        LODWORD(v178) = 0;
        [a1 translateModelViewMatrixByX:0 Y:v177 Z:v178 saveTo:v176];
        [a2 setCenterX:v270 + v265 * 3.0];
        *(float *)&v179 = -*(float *)(a10 + 88);
        objc_msgSend( a4,  "renderImageInner:inContext:atPosition:andSize:zRotation:",  a2,  a1,  v272 + v276 * -2.0 - *(float *)(a10 + 64),  *(float *)(a10 + 76),  v292,  v96,  v179);
        LODWORD(v180) = -1174203793;
        LODWORD(v181) = 0;
        LODWORD(v182) = 0;
        [a1 translateModelViewMatrixByX:0 Y:v181 Z:v182 saveTo:v180];
        [a2 setCenterX:v264];
        [a2 setScale:v256];
      }

      else
      {
        LODWORD(v175) = 973279855;
        LODWORD(v173) = 0;
        LODWORD(v174) = 0;
        [a1 translateModelViewMatrixByX:0 Y:v173 Z:v174 saveTo:v175];
        [a2 setCenterY:v270 + v265 * 3.0];
        LODWORD(v198) = 0;
        objc_msgSend( a4,  "renderImageInner:inContext:atPosition:andSize:zRotation:",  a2,  a1,  *(float *)(a10 + 64),  v272 + v276 * -2.0 - *(float *)(a10 + 76) * v276,  v292,  v96,  v198);
        LODWORD(v199) = -1174203793;
        LODWORD(v200) = 0;
        LODWORD(v201) = 0;
        [a1 translateModelViewMatrixByX:0 Y:v200 Z:v201 saveTo:v199];
        [a2 setCenterY:v264];
      }

      objc_msgSend(a4, "setOuterRect:", x, v268, v267, v266);
      objc_msgSend(a4, "setInnerRect:", v261, v260, v259, v258);
    }
  }

  [a4 setPreservesImageAspectRatio:0];
  [a1 blend:2];
  if (v21)
  {
    if (*(_BYTE *)(a10 + 120))
    {
      LODWORD(v202) = 0;
      objc_msgSend(a4, "renderImageOuter:inContext:atPosition:andSize:zRotation:", a3, a1, v153, 0.0, v154, v96, v202);
      HIDWORD(v205) = HIDWORD(v272);
      v206 = v272 - v171;
      if (*(void *)(a10 + 104))
      {
        [a4 setMeshType:2];
        v206 = v206 - v171;
      }

      else
      {
        LODWORD(v204) = 973279855;
        LODWORD(v205) = 0;
        LODWORD(v203) = 0;
        [a1 translateModelViewMatrixByX:0 Y:v205 Z:v203 saveTo:v204];
      }

      *(float *)&v207 = -*(float *)(a10 + 88);
      objc_msgSend( a4,  "renderImageOuter:inContext:atPosition:andSize:zRotation:",  a3,  a1,  v206 - *(float *)(a10 + 64),  *(float *)(a10 + 76),  v154,  v96,  v207);
      if (*(void *)(a10 + 104))
      {
        v206 = v171 + v206;
        LODWORD(v225) = 973279855;
        LODWORD(v223) = 0;
        LODWORD(v224) = 0;
        [a1 translateModelViewMatrixByX:0 Y:v223 Z:v224 saveTo:v225];
        *(float *)&v226 = -*(float *)(a10 + 84);
        objc_msgSend( a4,  "renderImageOuter:inContext:atPosition:andSize:zRotation:",  a3,  a1,  v206 - *(float *)(a10 + 60),  *(float *)(a10 + 72),  v154,  v96,  v226);
      }

      else
      {
        [a4 setMeshType:2];
      }

      LODWORD(v229) = 973279855;
      LODWORD(v227) = 0;
      LODWORD(v228) = 0;
      [a1 translateModelViewMatrixByX:0 Y:v227 Z:v228 saveTo:v229];
      v233 = v171 + v206 - *(float *)(a10 + 56);
      v234 = *(float *)(a10 + 68);
      *(float *)&v235 = -*(float *)(a10 + 80);
    }

    else
    {
      LODWORD(v202) = 0;
      objc_msgSend(a4, "renderImageOuter:inContext:atPosition:andSize:zRotation:", a3, a1, 0.0, v153, v154, v96, v202);
      if (*(void *)(a10 + 104))
      {
        [a4 setMeshType:3];
      }

      else
      {
        LODWORD(v221) = 973279855;
        LODWORD(v219) = 0;
        LODWORD(v220) = 0;
        [a1 translateModelViewMatrixByX:0 Y:v219 Z:v220 saveTo:v221];
      }

      LODWORD(v222) = 0;
      objc_msgSend( a4,  "renderImageOuter:inContext:atPosition:andSize:zRotation:",  a3,  a1,  *(float *)(a10 + 64),  v153 - *(float *)(a10 + 76) * v171,  v154,  v96,  v222);
      if (*(void *)(a10 + 104))
      {
        LODWORD(v238) = 973279855;
        LODWORD(v236) = 0;
        LODWORD(v237) = 0;
        [a1 translateModelViewMatrixByX:0 Y:v236 Z:v237 saveTo:v238];
        LODWORD(v239) = 0;
        objc_msgSend( a4,  "renderImageOuter:inContext:atPosition:andSize:zRotation:",  a3,  a1,  *(float *)(a10 + 60),  v153 - *(float *)(a10 + 72) * v171,  v154,  v96,  v239);
      }

      else
      {
        [a4 setMeshType:3];
      }

      LODWORD(v242) = 973279855;
      LODWORD(v240) = 0;
      LODWORD(v241) = 0;
      [a1 translateModelViewMatrixByX:0 Y:v240 Z:v241 saveTo:v242];
      v233 = *(float *)(a10 + 56);
      v234 = v153 - *(float *)(a10 + 68) * v171;
      LODWORD(v235) = 0;
    }

    objc_msgSend(a4, "renderImageOuter:inContext:atPosition:andSize:zRotation:", a3, a1, v233, v234, v154, v96, v235);
    [a4 setMeshType:0];
    LODWORD(v243) = -1165815185;
    LODWORD(v244) = 0;
    LODWORD(v245) = 0;
    [a1 translateModelViewMatrixByX:0 Y:v244 Z:v245 saveTo:v243];
  }

  else
  {
    [a1 unsetShader];
    else {
      v208 = @"PlainTexture2D-";
    }
    [a1 setShader:v208];
    [a1 setShaderUniformInt:v20 != 0 forKey:@"isDoubleBreak"];
    if (v20) {
      [a1 setShaderUniformInt:*(unsigned __int8 *)(a10 + 120) forKey:@"isLandscape"];
    }
    LODWORD(v209) = 0;
    objc_msgSend( a4,  "renderImageOuter:inContext:atPosition:andSize:zRotation:",  a3,  a1,  CGPointZero.x,  CGPointZero.y,  v111,  v288,  v209);
    if (*(_BYTE *)(a10 + 125))
    {
      objc_msgSend(a4, "setOuterRect:", v112, v279, v282, v285);
      objc_msgSend(a4, "setInnerRect:", v172, v152, v274, v273);
      v210 = *(unsigned __int8 *)(a10 + 120);
      LODWORD(v211) = 973279855;
      v212 = 0.0;
      LODWORD(v213) = 0;
      LODWORD(v214) = 0;
      [a1 translateModelViewMatrixByX:0 Y:v213 Z:v214 saveTo:v211];
      v215 = v272 + v171 * -2.0;
      if (v210)
      {
        [a4 setMeshType:2];
        v217 = v215 - *(float *)(a10 + 64);
        v218 = *(float *)(a10 + 76);
        v212 = -*(float *)(a10 + 88);
      }

      else
      {
        [a4 setMeshType:3];
        v217 = *(float *)(a10 + 64);
        v218 = v215 - *(float *)(a10 + 76) * v171;
      }

      *(float *)&v216 = v212;
      objc_msgSend(a4, "renderImageOuter:inContext:atPosition:andSize:zRotation:", a3, a1, v217, v218, v154, v96, v216);
      LODWORD(v230) = -1174203793;
      LODWORD(v231) = 0;
      LODWORD(v232) = 0;
      [a1 translateModelViewMatrixByX:0 Y:v231 Z:v232 saveTo:v230];
      [a4 setMeshType:0];
      objc_msgSend(a4, "setOuterRect:", x, v268, v267, v266);
      objc_msgSend(a4, "setInnerRect:", v261, v260, v259, v258);
    }
  }

  if (v20)
  {
    [a2 setScale:v249];
    [a2 setCenterX:v250];
    [a2 setCenterY:v251];
  }

  [a1 unsetShader];
  return [a1 restoreModelViewMatrix:v296];
}

        [v38 duration];
        v31 = v30;
        [v38 outroTransitionDuration];
        v29 = v31 - v32;
LABEL_35:
        v10 = v10 + v29;
        v11 = v37 + 1;
      }

      while ((id)(v37 + 1) != v36);
      v36 = [obj countByEnumeratingWithState:&v51 objects:v57 count:16];
      if (!v36) {
        return v10;
      }
    }
  }

  return 0.0;
}

  LODWORD(v31) = 0;
  -[MRCroppingSprite renderImage:inContext:atPosition:andSize:zRotation:]( v25,  "renderImage:inContext:atPosition:andSize:zRotation:",  v23,  a11,  v62,  v63,  v18 + -0.0299999993,  v17 + (float)(v61 * -0.08),  v31);
  [a11 blend:2];
  -[MREffectScrapbook _drawBreakFrameInRect:frameWidth:time:inContext:withArguments:]( self,  "_drawBreakFrameInRect:frameWidth:time:inContext:withArguments:",  a11,  a12,  v62,  v63,  v18,  v17,  0.05,  a10);
  [a11 blend:0];
  [v23 releaseByUser];
  [a11 restoreModelViewMatrix:v64];
}

  -[MREffectShiftingTiles _timeForIteration:](self, "_timeForIteration:", v5 + 1);
  v33 = v32;
  -[MREffectShiftingTiles _timeForIteration:](self, "_timeForIteration:", v7);
  return v33 - v34;
}

    operator delete[](v13);
    return (uint64_t)v15;
  }

  if (v14) {
    operator delete[](v14);
  }
  v15 = 0LL;
  float v6 = 0LL;
  if (v13) {
    goto LABEL_34;
  }
  return v6;
}

    operator delete[](v13);
    return (uint64_t)v15;
  }

  if (v14) {
    operator delete[](v14);
  }
  v15 = 0LL;
  float v6 = 0LL;
  if (v13) {
    goto LABEL_34;
  }
  return v6;
}

    operator delete[](v13);
    return (uint64_t)v15;
  }

  if (v14) {
    operator delete[](v14);
  }
  v15 = 0LL;
  float v6 = 0LL;
  if (v13) {
    goto LABEL_34;
  }
  return v6;
}

    operator delete[](v13);
    return (uint64_t)v15;
  }

  if (v14) {
    operator delete[](v14);
  }
  v15 = 0LL;
  float v6 = 0LL;
  if (v13) {
    goto LABEL_34;
  }
  return v6;
}

    operator delete[](v13);
    return (uint64_t)v15;
  }

  if (v14) {
    operator delete[](v14);
  }
  v15 = 0LL;
  float v6 = 0LL;
  if (v13) {
    goto LABEL_34;
  }
  return v6;
}

    operator delete[](v13);
    return (uint64_t)v15;
  }

  if (v14) {
    operator delete[](v14);
  }
  v15 = 0LL;
  float v6 = 0LL;
  if (v13) {
    goto LABEL_34;
  }
  return v6;
}

    operator delete[](v13);
    return (uint64_t)v15;
  }

  if (v14) {
    operator delete[](v14);
  }
  v15 = 0LL;
  float v6 = 0LL;
  if (v13) {
    goto LABEL_34;
  }
  return v6;
}

    operator delete[](v13);
    return (uint64_t)v15;
  }

  if (v14) {
    operator delete[](v14);
  }
  v15 = 0LL;
  float v6 = 0LL;
  if (v13) {
    goto LABEL_34;
  }
  return v6;
}

    operator delete[](v13);
    return (uint64_t)v15;
  }

  if (v14) {
    operator delete[](v14);
  }
  v15 = 0LL;
  float v6 = 0LL;
  if (v13) {
    goto LABEL_34;
  }
  return v6;
}

    operator delete[](v13);
    return (uint64_t)v15;
  }

  if (v14) {
    operator delete[](v14);
  }
  v15 = 0LL;
  float v6 = 0LL;
  if (v13) {
    goto LABEL_34;
  }
  return v6;
}

    operator delete[](v13);
    return (uint64_t)v15;
  }

  if (v14) {
    operator delete[](v14);
  }
  v15 = 0LL;
  float v6 = 0LL;
  if (v13) {
    goto LABEL_34;
  }
  return v6;
}

    operator delete[](v13);
    return (uint64_t)v15;
  }

  if (v14) {
    operator delete[](v14);
  }
  v15 = 0LL;
  float v6 = 0LL;
  if (v13) {
    goto LABEL_34;
  }
  return v6;
}

LABEL_46:
      if (v32)
      {
        v41 = v21;
        if (([v113 isEqualToString:v32] & 1) != 0 || !objc_msgSend(v32, "length"))
        {
          v42 = 0;
        }

        else
        {
          v42 = [v113 length] != 0;
          if (v42) {
            goto LABEL_81;
          }
        }
      }

      else
      {
        v42 = 0;
        v41 = v21;
      }

      if (v112)
      {
        v104 = v42;
        v124 = 0u;
        v125 = 0u;
        v122 = 0u;
        v123 = 0u;
        v43 = [v9 countByEnumeratingWithState:&v122 objects:v130 count:16];
        if (v43)
        {
          v44 = v43;
          v45 = 0LL;
          v46 = *(void *)v123;
          x = CGPointZero.x;
          v48 = y;
          do
          {
            for (i = 0LL; i != v44; i = (char *)i + 1)
            {
              if (*(void *)v123 != v46) {
                objc_enumerationMutation(v9);
              }
              v50 = *(void *)(*((void *)&v122 + 1) + 8LL * (void)i);
              v51 = -[MPDocument latitudeForPath:](self->_authoredDocument, "latitudeForPath:", v50);
              objc_msgSend( -[MPDocument longitudeForPath:](self->_authoredDocument, "longitudeForPath:", v50),  "floatValue");
              v53 = v52;
              [v51 floatValue];
              if (v53 != 0.0)
              {
                v55 = v54 != 0.0 && CGPointZero.x == x;
                if (v55 && y == v48)
                {
                  x = x + v53;
                  v48 = v48 + v54;
                  ++v45;
                }
              }

              v41 = v21;
            }

            v44 = [v9 countByEnumeratingWithState:&v122 objects:v130 count:16];
          }

          while (v44);
        }

        else
        {
          v45 = 0LL;
          x = CGPointZero.x;
          v48 = y;
        }

        [v118 floatValue];
        v58 = v57;
        [v41 floatValue];
        v29 = v119;
        v32 = v117;
        v42 = v104;
        if (x != CGPointZero.x || v48 != y)
        {
          v60 = v59;
          v61 = v58;
          if (CGPointZero.x != v61 || y != v60)
          {
            v62 = [v112 allObjects];
            v63 = kMPAssetMapLatLongPoints[0];
            v64 = +[NSValue valueWithCGPoint:](&OBJC_CLASS___NSValue, "valueWithCGPoint:", v61, v60);
            v65 = kMPAssetOptionMapLatLong[0];
            v66 = +[NSValue valueWithCGSize:](&OBJC_CLASS___NSValue, "valueWithCGSize:", 768.0, 768.0);
            -[MPDocument pointForMap:withAttributes:]( self->_authoredDocument,  "pointForMap:withAttributes:",  0LL,  +[NSDictionary dictionaryWithObjectsAndKeys:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjectsAndKeys:",  v62,  v63,  v64,  v65,  v66,  kMPAssetMapInset[0],  0LL));
            v68 = v67;
            v70 = v69;
            v71 = [v112 allObjects];
            v72 = kMPAssetMapLatLongPoints[0];
            v73 = +[NSValue valueWithCGPoint:]( &OBJC_CLASS___NSValue,  "valueWithCGPoint:",  x / (double)v45,  v48 / (double)v45);
            v74 = kMPAssetOptionMapLatLong[0];
            v75 = +[NSValue valueWithCGSize:](&OBJC_CLASS___NSValue, "valueWithCGSize:", 768.0, 768.0);
            v99 = v74;
            v29 = v119;
            v97 = v72;
            v32 = v117;
            -[MPDocument pointForMap:withAttributes:]( self->_authoredDocument,  "pointForMap:withAttributes:",  0LL,  +[NSDictionary dictionaryWithObjectsAndKeys:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjectsAndKeys:",  v71,  v97,  v73,  v99,  v75,  kMPAssetMapInset[0],  0LL));
            *(float *)&v77 = v68 - v77;
            v78 = v70 - v76;
            v79 = sqrt((float)((float)(*(float *)&v77 * *(float *)&v77) + (float)(v78 * v78)));
            placesDistanceSeperation = self->_placesDistanceSeperation;
            v14 = v120;
            v31 = v118;
            if (v79 > placesDistanceSeperation) {
              goto LABEL_82;
            }
            v42 = v104;
            if (v79 > placesDistanceSeperation + -100.0)
            {
              v14 = v120;
              v31 = v118;
              if (vabdd_f64(v76, v70) <= 1500.0) {
                goto LABEL_80;
              }
              goto LABEL_82;
            }
          }
        }
      }

              [a5 preloadQueue];
              v26 = 1;
LABEL_47:
              if (!-[MRLayerEffect asynchronousOperationsAreSuspended]( self->super.mEffectLayer,  "asynchronousOperationsAreSuspended"))
              {
                v42 = 1LL;
                goto LABEL_49;
              }

              return v26;
            }

            v52 = 2.0;
          }

        v73 = v33 >> 1;
        objc_msgSend(a4, "setTextureCoordinatesPointer:onTextureUnit:");
        [a4 setVertex2DPointer:v26];
        [a4 drawTriangleStripFromOffset:0 count:v73];
        [a4 unsetVertexPointer];
        [a4 unsetTextureCoordinatesPointerOnTextureUnit:0];
      }
    }

    else
    {
      [v11 setClampMode:2];
      LODWORD(v22) = 0;
      [v11 setOnContext:a4 onTextureUnit:0 withReferenceAspectRatio:&v75 state:v22];
      else {
        v23 = @"PlainTexture";
      }
      [a4 setShader:v23];
      +[MRCroppingSprite renderDumbImage:inContext:atPosition:andSize:]( &OBJC_CLASS___MRCroppingSprite,  "renderDumbImage:inContext:atPosition:andSize:",  v11,  a4,  CGPointZero.x,  CGPointZero.y,  2.0,  2.0);
    }

    [a4 unsetShader];
    [v11 unsetOnContext:a4 onTextureUnit:0 state:&v75];
    [v11 releaseByUser];
  }

LABEL_81:
      v14 = v120;
      v31 = v118;
      if (!v42)
      {
LABEL_80:
        v81 = v32;
        v82 = v111;
        v83 = v108;
        goto LABEL_86;
      }

        v56 = v20;
LABEL_82:
        [v56 releaseByUser];
LABEL_83:
        [a4 unsetShader];
        return;
      }

      [a4 localAspectRatio];
      if (v62 >= 1.0 || ([v20 aspectRatio], width = 2.0, height = 2.0, v63 >= 1.0))
      {
        [a4 localAspectRatio];
        if (v64 < 1.0 || ([v20 aspectRatio], width = 2.0, height = 2.0, v65 < 1.0))
        {
          [a4 localAspectRatio];
          if (v66 >= 1.0 || ([v20 aspectRatio], v67 < 1.0))
          {
            width = CGSizeZero.width;
            height = CGSizeZero.height;
            [a4 localAspectRatio];
            if (v68 > 1.0)
            {
              [v20 aspectRatio];
              if (v69 < 1.0)
              {
                [v20 aspectRatio];
                v71 = v70 + v70;
                [a4 localAspectRatio];
                width = v71 / v72;
                -[MREffectPortfolio _drawPagesAtTime:inContext:withArguments:]( self,  "_drawPagesAtTime:inContext:withArguments:",  a4,  a5,  a3);
                height = 2.0;
              }
            }

            goto LABEL_77;
          }

          [v20 aspectRatio];
          width = 2.0;
          v91 = 2.0 / v90;
          [a4 localAspectRatio];
          height = v91 * v92;
          goto LABEL_76;
        }
      }

    v38 = v46;
    goto LABEL_82;
  }

  v24 = NSStringHasPrefix(a4, "Full");
  if (((*(void *)(&self->mIsLoaded + 1) == 2LL) & (v15 ^ 1) | v14) != 1)
  {
    v28 = 0.800000012;
    if (v23 != 1.0) {
      v28 = 1.0;
    }
    if (a7 >= 1.0) {
      v28 = dbl_1F7DC0[v23 == 1.0];
    }
    if (a7 >= 0.6)
    {
      if (a7 >= 1.0 || v23 == 1.0)
      {
        if (v17) {
          y = -0.5;
        }
        else {
          y = 0.5;
        }
        goto LABEL_72;
      }

      v29 = v17 == 0;
      v30 = (double *)&unk_1F7DD0;
    }

    else
    {
      v29 = v17 == 0;
      v30 = (double *)&unk_1F7DE0;
    }

    y = v30[v29];
LABEL_72:
    x = 0.0;
    v38 = v46;
    width = v28 * 1.5;
    height = a7 / v23 * 1.5 * v28;
    goto LABEL_82;
  }

  if (v24)
  {
    height = 2.0;
    width = 1.0;
  }

  else
  {
    height = a7 / v23 * v20;
    if (height > 1.79999995)
    {
      width = v20 * (1.79999995 / height);
      height = height * (1.79999995 / height);
    }

    else
    {
      width = v20;
    }
  }

  v38 = v46;
  if (v17 != 1)
  {
    if (v17) {
      goto LABEL_82;
    }
    goto LABEL_67;
  }

  y = 0.0;
  x = 0.5;
LABEL_82:
  if (v38)
  {
    objc_msgSend( objc_msgSend( objc_msgSend(*(id *)((char *)&self->super.super.isa + v45), "slideProvidersForElementIDs"),  "objectForKey:",  ImageKey(v17)),  "imageAspectRatio");
    if (v40 >= 1.0) {
      height = width / v40 * a7;
    }
    else {
      width = height * v40 / a7;
    }
  }

  v41 = x;
  v42 = y;
  v43 = width;
  v44 = height;
  result.size.height = v44;
  result.size.width = v43;
  result.origin.y = v42;
  result.origin.x = v41;
  return result;
}

LABEL_82:
      v84 = v29;
      v81 = v32;
      if (v84) {
        v85 = v84;
      }
      else {
        v85 = &stru_259C60;
      }
      [v111 setObject:v85 forKey:@"PlaceName"];
      [v102 addObject:v111];
      v82 = +[NSMutableDictionary dictionary](&OBJC_CLASS___NSMutableDictionary, "dictionary");
      v112 = 0LL;
      v113 = 0LL;
      v83 = 0LL;
      v119 = 0LL;
      v9 = 0LL;
LABEL_86:
      [v31 floatValue];
      v87 = v86;
      [v21 floatValue];
      v89 = v88;
      if (CGPointZero.x == v87 && y == v89)
      {
        float v6 = v82;
      }

      else
      {
        v90 = v112;
        float v6 = v82;
        if (!v112) {
          v90 = +[NSMutableSet set](&OBJC_CLASS___NSMutableSet, "set");
        }
        v112 = v90;
        objc_msgSend( v90,  "addObject:",  +[NSValue valueWithCGPoint:](NSValue, "valueWithCGPoint:", v87, v89));
        v14 = v120;
      }

      float v7 = v83;
      v91 = v81;
      if (!v9) {
        v9 = +[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array");
      }
      [v9 addObject:v14];
      [v6 setObject:v9 forKey:@"photos"];
      v8 = v119;
      if (v116)
      {
        if (-[__CFString length](v116, "length")) {
          v8 = v116;
        }
        v91 = v117;
      }

      if (v115 && [v115 length]) {
        float v7 = v115;
      }
      if (v91)
      {
        v92 = [v91 length];
        v93 = v113;
        if (v92) {
          v93 = v91;
        }
        v113 = v93;
      }

      objc_msgSend( -[MPDocument creationDateForPath:](self->_authoredDocument, "creationDateForPath:", v14),  "timeIntervalSince1970");
      v12 = v94;
      v10 = v110 + 1;
      ++v13;
      ++v114;
    }

    while ((id)(v109 + 1) != v106);
    a3 = obj;
    v106 = [obj countByEnumeratingWithState:&v126 objects:v131 count:16];
  }

  while (v106);
LABEL_109:
  if (v8) {
    v95 = v8;
  }
  else {
    v95 = &stru_259C60;
  }
  [v6 setObject:v95 forKey:@"PlaceName"];
  [v102 addObject:v6];
  *a4 = (double)(unint64_t)[a3 count] * 0.75 <= (double)v107;
  objc_autoreleasePoolPop(v100);
  return v102;
}

LABEL_41:
      if (!v25) {
        goto LABEL_47;
      }
LABEL_42:
      if (v6 && -[__CFString length](v6, "length")
        || !v89
        || !v92
        || ![v89 isEqualToString:v92])
      {
        goto LABEL_73;
      }

  v37 = self->mPlug;
  if (!(_DWORD)v3) {
    goto LABEL_44;
  }
  v38 = -[MCPlug animationPathForKey:]( v37,  "animationPathForKey:",  objc_msgSend(@"xRotationAngle", "stringByAppendingFormat:", @":%d", v3));
  if (!v38)
  {
    v37 = self->mPlug;
LABEL_44:
    v38 = -[MCPlug animationPathForKey:](v37, "animationPathForKey:", @"xRotationAngle");
    if (!v38) {
      goto LABEL_49;
    }
  }

  if (([v38 isTriggered] & 1) == 0)
  {
    v40 = objc_opt_class(&OBJC_CLASS___MCAnimationPathPhysics, v39);
    if ((objc_opt_isKindOfClass(v38, v40) & 1) != 0)
    {
      v41 =  -[MRAnimationPathPhysics initWithMCAnimationPath:]( objc_alloc(&OBJC_CLASS___MRAnimationPathPhysics),  "initWithMCAnimationPath:",  v38);
      -[MCPlugParallel xRotationAngle](self->mPlug, "xRotationAngle");
      *(float *)&v42 = v42;
      -[MRAnimationPathPhysics setBaseValue:](v41, "setBaseValue:", v42);
    }

    else
    {
      v43 = objc_alloc(&OBJC_CLASS___MRAnimationPathScalar);
      -[MCPlugParallel xRotationAngle](self->mPlug, "xRotationAngle");
      self->mAnimationPathRX = -[MRAnimationPathScalar initWithMCAnimationPath:andValue:]( v43,  "initWithMCAnimationPath:andValue:",  v38);
    }
  }

      ++v24;
      ++v23;
      if (!--a2) {
        goto LABEL_42;
      }
    }

    v25 = *v24;
LABEL_40:
    *v23 = pow(*v23, v25);
    goto LABEL_41;
  }

  if (v19) {
    operator delete[](v19);
  }
  if (v18) {
    operator delete[](v18);
  }
  return 0LL;
}

          float v7 = v41;
        }
      }

      else
      {
        v25 = objc_opt_class(&OBJC_CLASS___MPNavigator, v12);
        if ((objc_opt_isKindOfClass(a4, v25) & 1) != 0)
        {
          v27 = [a4 layerForKey:v11];
        }

        else
        {
          if (!HasPrefix
            || (v28 = objc_opt_class(&OBJC_CLASS___MPLayer, v26), (objc_opt_isKindOfClass(a4, v28) & 1) == 0))
          {
            v29 = objc_opt_class(&OBJC_CLASS___MPEffectContainer, v26);
            if ((objc_opt_isKindOfClass(a4, v29) & 1) == 0
              || (uint64_t)[a4 countOfEffects] < 2
              || (v30 = [a4 effects],
                  v42 = 0u,
                  v43 = 0u,
                  v44 = 0u,
                  v45 = 0u,
                  (v31 = [v30 countByEnumeratingWithState:&v42 objects:v54 count:16]) == 0))
            {
              v17 = a4;
              goto LABEL_44;
            }

            v32 = v31;
            v33 = *(void *)v43;
LABEL_33:
            v34 = 0LL;
            while (1)
            {
              if (*(void *)v43 != v33) {
                objc_enumerationMutation(v30);
              }
              v17 = *(id *)(*((void *)&v42 + 1) + 8 * v34);
              if (objc_msgSend( objc_msgSend(objc_msgSend(v17, "plug", v40), "idInSupercontainer"),  "isEqualToString:",  v11)) {
                break;
              }
              if (v32 == (id)++v34)
              {
                v32 = [v30 countByEnumeratingWithState:&v42 objects:v54 count:16];
                if (v32) {
                  goto LABEL_33;
                }
                v17 = a4;
                break;
              }
            }

            a3 = v40;
            goto LABEL_41;
          }

          v27 = objc_msgSend(objc_msgSend(a4, "effectContainers"), "objectAtIndex:", NSIntegerFromString(v11, 3uLL));
        }

        v17 = v27;
      }

LABEL_47:
      v84 = v6;
      v98 = 0u;
      v99 = 0u;
      v96 = 0u;
      v97 = 0u;
      v33 = [v7 countByEnumeratingWithState:&v96 objects:v104 count:16];
      if (v33)
      {
        v34 = v33;
        v35 = 0LL;
        v36 = *(void *)v97;
        x = CGPointZero.x;
        v38 = y;
        do
        {
          for (i = 0LL; i != v34; i = (char *)i + 1)
          {
            if (*(void *)v97 != v36) {
              objc_enumerationMutation(v7);
            }
            v40 = *(void *)(*((void *)&v96 + 1) + 8LL * (void)i);
            v41 = -[MPDocument latitudeForPath:](self->_authoredDocument, "latitudeForPath:", v40);
            objc_msgSend( -[MPDocument longitudeForPath:](self->_authoredDocument, "longitudeForPath:", v40),  "floatValue");
            v43 = v42;
            [v41 floatValue];
            if (v43 != 0.0)
            {
              v45 = v44 != 0.0 && CGPointZero.x == x;
              if (v45 && y == v38)
              {
                x = x + v43;
                v38 = v38 + v44;
                ++v35;
              }
            }
          }

          v34 = [v7 countByEnumeratingWithState:&v96 objects:v104 count:16];
        }

        while (v34);
      }

      else
      {
        v35 = 0LL;
        x = CGPointZero.x;
        v38 = y;
      }

      [v85 floatValue];
      v48 = v47;
      [v86 floatValue];
      v24 = v94;
      float v6 = v84;
      if (x != CGPointZero.x || v38 != y)
      {
        v50 = v49;
        v51 = v48;
        if (CGPointZero.x != v51 || y != v50)
        {
          v52 = x / (double)v35;
          v53 = v38 / (double)v35;
          v54 = [v87 allObjects];
          v55 = kMPAssetMapLatLongPoints[0];
          v56 = +[NSValue valueWithCGPoint:](&OBJC_CLASS___NSValue, "valueWithCGPoint:", v51, v50);
          v57 = kMPAssetOptionMapLatLong[0];
          v58 = +[NSValue valueWithCGSize:](&OBJC_CLASS___NSValue, "valueWithCGSize:", 768.0, 768.0);
          -[MPDocument pointForMap:withAttributes:]( self->_authoredDocument,  "pointForMap:withAttributes:",  0LL,  +[NSDictionary dictionaryWithObjectsAndKeys:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjectsAndKeys:",  v54,  v55,  v56,  v57,  v58,  kMPAssetMapInset[0],  0LL));
          v60 = v59;
          v62 = v61;
          v63 = [v87 allObjects];
          v64 = kMPAssetMapLatLongPoints[0];
          v65 = +[NSValue valueWithCGPoint:](&OBJC_CLASS___NSValue, "valueWithCGPoint:", v52, v53);
          v66 = kMPAssetOptionMapLatLong[0];
          float v6 = v84;
          v67 = +[NSValue valueWithCGSize:](&OBJC_CLASS___NSValue, "valueWithCGSize:", 768.0, 768.0);
          v79 = v64;
          v24 = v94;
          -[MPDocument pointForMap:withAttributes:]( self->_authoredDocument,  "pointForMap:withAttributes:",  0LL,  +[NSDictionary dictionaryWithObjectsAndKeys:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjectsAndKeys:",  v63,  v79,  v65,  v66,  v67,  kMPAssetMapInset[0],  0LL));
          *(float *)&v69 = v60 - v69;
          v70 = v62 - v68;
          v71 = sqrt((float)((float)(*(float *)&v69 * *(float *)&v69) + (float)(v70 * v70)));
          placesDistanceSeperation = self->_placesDistanceSeperation;
          if (v71 > placesDistanceSeperation || v71 > placesDistanceSeperation + -100.0 && vabdd_f64(v68, v62) > 1500.0)
          {
LABEL_73:
            if (v6) {
              v73 = v6;
            }
            else {
              v73 = &stru_259C60;
            }
            [v88 setObject:v73 forKey:@"PlaceName"];
            [v81 addObject:v88];
            v88 = +[NSMutableDictionary dictionary](&OBJC_CLASS___NSMutableDictionary, "dictionary");
            v89 = 0LL;
            float v6 = 0LL;
            float v5 = 0LL;
LABEL_78:
            float v7 = +[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array");
            goto LABEL_79;
          }
        }
      }

      float v5 = v87;
      if (!v7) {
        goto LABEL_78;
      }
LABEL_79:
      [v7 addObject:v90];
      [v88 setObject:v7 forKey:@"photos"];
      if (v95 && -[__CFString length](v95, "length")) {
        float v6 = v95;
      }
      if (v92)
      {
        v74 = [v92 length];
        v75 = v89;
        if (v74) {
          v75 = v92;
        }
        v89 = v75;
      }

      objc_msgSend( -[MPDocument creationDateForPath:](self->_authoredDocument, "creationDateForPath:", v90),  "timeIntervalSince1970");
      v10 = v76;
      v8 = v24 + 1;
      v11 = v91 + 1;
      ++v93;
    }

    while ((id)(v91 + 1) != v83);
    v83 = [a3 countByEnumeratingWithState:&v100 objects:v105 count:16];
  }

  while (v83);
LABEL_90:
  if (v6) {
    v77 = v6;
  }
  else {
    v77 = &stru_259C60;
  }
  [v88 setObject:v77 forKey:@"PlaceName"];
  [v81 addObject:v88];
  objc_autoreleasePoolPop(context);
  return v81;
}
}

          v21 = v40;
          goto LABEL_48;
        }
      }
    }
  }

LABEL_120:
        v64 = v32 != 0LL;
        v369 = 0u;
        v368 = 0u;
        v367 = 0u;
        v366 = 0u;
        v65 = [v273 countByEnumeratingWithState:&v366 objects:v423 count:16];
        if (!v65)
        {
          v253 = 0LL;
          v67 = 0LL;
          goto LABEL_141;
        }

        v66 = v65;
        v67 = 0LL;
        v253 = 0LL;
        v68 = *(void *)v367;
        do
        {
          for (ii = 0LL; ii != v66; ii = (char *)ii + 1)
          {
            if (*(void *)v367 != v68) {
              objc_enumerationMutation(v273);
            }
            v70 = *(__CFString **)(*((void *)&v366 + 1) + 8LL * (void)ii);
            v71 = [v273 countForObject:v70];
            if ((double)v263 * 0.75 <= (double)(uint64_t)v71 && (uint64_t)v71 > (uint64_t)v67)
            {
              if (v32)
              {
                v74 = objc_opt_class(&OBJC_CLASS___NSString, v72);
                if ((objc_opt_isKindOfClass(v32, v74) & 1) != 0)
                {
                  v75 = -[__CFString isEqualToString:](v32, "isEqualToString:", v70);
                  v76 = v253;
                  if (!v75) {
                    v76 = v70;
                  }
                  v253 = v76;
                }
              }

              else
              {
                v67 = v71;
                v32 = v70;
              }
            }
          }

          v66 = [v273 countByEnumeratingWithState:&v366 objects:v423 count:16];
        }

        while (v66);
        if (!v32 || (v77 = v32, !v253))
        {
LABEL_141:
          v365 = 0u;
          v364 = 0u;
          v363 = 0u;
          v362 = 0u;
          v78 = [v269 countByEnumeratingWithState:&v362 objects:v422 count:16];
          if (v78)
          {
            v79 = v78;
            v80 = *(void *)v363;
            do
            {
              for (jj = 0LL; jj != v79; jj = (char *)jj + 1)
              {
                if (*(void *)v363 != v80) {
                  objc_enumerationMutation(v269);
                }
                v82 = *(__CFString **)(*((void *)&v362 + 1) + 8LL * (void)jj);
                v83 = [v269 countForObject:v82];
                if ((double)v263 * 0.75 <= (double)(uint64_t)v83 && (uint64_t)v83 > (uint64_t)v67)
                {
                  if (v32)
                  {
                    v86 = objc_opt_class(&OBJC_CLASS___NSString, v84);
                    if ((objc_opt_isKindOfClass(v32, v86) & 1) != 0)
                    {
                      v87 = -[__CFString isEqualToString:](v32, "isEqualToString:", v82);
                      v88 = v253;
                      if (!v87) {
                        v88 = v82;
                      }
                      v253 = v88;
                    }
                  }

                  else
                  {
                    v67 = v83;
                    v32 = v82;
                  }
                }
              }

              v79 = [v269 countByEnumeratingWithState:&v362 objects:v422 count:16];
            }

            while (v79);
          }

          if (v32 && v253) {
            goto LABEL_197;
          }
          v361 = 0u;
          v360 = 0u;
          v359 = 0u;
          v358 = 0u;
          v89 = [v265 countByEnumeratingWithState:&v358 objects:v421 count:16];
          if (v89)
          {
            v90 = v89;
            v91 = *(void *)v359;
            do
            {
              for (kk = 0LL; kk != v90; kk = (char *)kk + 1)
              {
                if (*(void *)v359 != v91) {
                  objc_enumerationMutation(v265);
                }
                v93 = *(__CFString **)(*((void *)&v358 + 1) + 8LL * (void)kk);
                v94 = [v265 countForObject:v93];
                if ((double)v263 * 0.75 <= (double)(uint64_t)v94 && (uint64_t)v94 > (uint64_t)v67)
                {
                  if (v32)
                  {
                    v97 = objc_opt_class(&OBJC_CLASS___NSString, v95);
                    if ((objc_opt_isKindOfClass(v32, v97) & 1) != 0)
                    {
                      v98 = -[__CFString isEqualToString:](v32, "isEqualToString:", v93);
                      v99 = v253;
                      if (!v98) {
                        v99 = v93;
                      }
                      v253 = v99;
                    }
                  }

                  else
                  {
                    v67 = v94;
                    v32 = v93;
                  }
                }
              }

              v90 = [v265 countByEnumeratingWithState:&v358 objects:v421 count:16];
            }

            while (v90);
          }

          if (v32 && v253) {
            goto LABEL_197;
          }
          v357 = 0u;
          v356 = 0u;
          v355 = 0u;
          v354 = 0u;
          v100 = [v267 countByEnumeratingWithState:&v354 objects:v420 count:16];
          if (v100)
          {
            v101 = v100;
            v102 = *(void *)v355;
            do
            {
              for (mm = 0LL; mm != v101; mm = (char *)mm + 1)
              {
                if (*(void *)v355 != v102) {
                  objc_enumerationMutation(v267);
                }
                v104 = *(__CFString **)(*((void *)&v354 + 1) + 8LL * (void)mm);
                v105 = [v267 countForObject:v104];
                if ((double)v263 * 0.75 <= (double)(uint64_t)v105 && (uint64_t)v105 > (uint64_t)v67)
                {
                  if (v32)
                  {
                    v108 = objc_opt_class(&OBJC_CLASS___NSString, v106);
                    if ((objc_opt_isKindOfClass(v32, v108) & 1) != 0)
                    {
                      v109 = -[__CFString isEqualToString:](v32, "isEqualToString:", v104);
                      v110 = v253;
                      if (!v109) {
                        v110 = v104;
                      }
                      v253 = v110;
                    }
                  }

                  else
                  {
                    v67 = v105;
                    v32 = v104;
                  }
                }
              }

              v101 = [v267 countByEnumeratingWithState:&v354 objects:v420 count:16];
            }

            while (v101);
          }

          if (v32)
          {
LABEL_197:
            v77 = v32;
            goto LABEL_198;
          }

          v353 = 0u;
          v352 = 0u;
          v351 = 0u;
          v350 = 0u;
          v220 = [v273 countByEnumeratingWithState:&v350 objects:v419 count:16];
          if (!v220)
          {
            v222 = 0LL;
            goto LABEL_402;
          }

          v221 = v220;
          v222 = 0LL;
          v223 = 0LL;
          v224 = *(void *)v351;
          do
          {
            for (nn = 0LL; nn != v221; nn = (char *)nn + 1)
            {
              if (*(void *)v351 != v224) {
                objc_enumerationMutation(v273);
              }
              v226 = *(const __CFString **)(*((void *)&v350 + 1) + 8LL * (void)nn);
              v227 = [v273 countForObject:v226];
              if ((uint64_t)v227 > (uint64_t)v222)
              {
                v222 = v227;
                v223 = v226;
              }
            }

            v221 = [v273 countByEnumeratingWithState:&v350 objects:v419 count:16];
          }

          while (v221);
          if (!v223)
          {
LABEL_402:
            v349 = 0u;
            v348 = 0u;
            v347 = 0u;
            v346 = 0u;
            v228 = [v269 countByEnumeratingWithState:&v346 objects:v418 count:16];
            if (!v228) {
              goto LABEL_412;
            }
            v229 = v228;
            v223 = 0LL;
            v230 = *(void *)v347;
            do
            {
              for (i1 = 0LL; i1 != v229; i1 = (char *)i1 + 1)
              {
                if (*(void *)v347 != v230) {
                  objc_enumerationMutation(v269);
                }
                v232 = *(const __CFString **)(*((void *)&v346 + 1) + 8LL * (void)i1);
                v233 = [v269 countForObject:v232];
                if ((uint64_t)v233 > (uint64_t)v222)
                {
                  v222 = v233;
                  v223 = v232;
                }
              }

              v229 = [v269 countByEnumeratingWithState:&v346 objects:v418 count:16];
            }

            while (v229);
            if (!v223)
            {
LABEL_412:
              v345 = 0u;
              v344 = 0u;
              v343 = 0u;
              v342 = 0u;
              v234 = [v265 countByEnumeratingWithState:&v342 objects:v417 count:16];
              if (!v234) {
                goto LABEL_422;
              }
              v235 = v234;
              v223 = 0LL;
              v236 = *(void *)v343;
              do
              {
                for (i2 = 0LL; i2 != v235; i2 = (char *)i2 + 1)
                {
                  if (*(void *)v343 != v236) {
                    objc_enumerationMutation(v265);
                  }
                  v238 = *(const __CFString **)(*((void *)&v342 + 1) + 8LL * (void)i2);
                  v239 = [v265 countForObject:v238];
                  if ((uint64_t)v239 > (uint64_t)v222)
                  {
                    v222 = v239;
                    v223 = v238;
                  }
                }

                v235 = [v265 countByEnumeratingWithState:&v342 objects:v417 count:16];
              }

              while (v235);
              if (!v223)
              {
LABEL_422:
                v341 = 0u;
                v340 = 0u;
                v339 = 0u;
                v338 = 0u;
                v240 = [v267 countByEnumeratingWithState:&v338 objects:v416 count:16];
                if (v240)
                {
                  v241 = v240;
                  v223 = 0LL;
                  v242 = *(void *)v339;
                  do
                  {
                    for (i3 = 0LL; i3 != v241; i3 = (char *)i3 + 1)
                    {
                      if (*(void *)v339 != v242) {
                        objc_enumerationMutation(v267);
                      }
                      v244 = *(const __CFString **)(*((void *)&v338 + 1) + 8LL * (void)i3);
                      v245 = [v267 countForObject:v244];
                      if ((uint64_t)v245 > (uint64_t)v222)
                      {
                        v222 = v245;
                        v223 = v244;
                      }
                    }

                    v241 = [v267 countByEnumeratingWithState:&v338 objects:v416 count:16];
                  }

                  while (v241);
                }

                else
                {
                  v223 = 0LL;
                }
              }
            }
          }

          v32 = 0LL;
          v77 = &stru_259C60;
          if (v223) {
            v77 = v223;
          }
        }

LABEL_198:
        if ((v251 & 1) != 0) {
          v111 = v32;
        }
        else {
          v111 = v77;
        }
        if (v111) {
          [v35 setObject:v111 forKey:@"MapName"];
        }
        v337 = 0u;
        v336 = 0u;
        v334 = 0u;
        v335 = 0u;
        v252 = [v35 objectForKey:@"pins"];
        v259 = [v252 countByEnumeratingWithState:&v334 objects:v415 count:16];
        if (v259)
        {
          v257 = v64 & (v251 ^ 1);
          v255 = *(id *)v335;
          do
          {
            v112 = 0LL;
            do
            {
              if (*(id *)v335 != v255) {
                objc_enumerationMutation(v252);
              }
              v264 = v112;
              v113 = *(void **)(*((void *)&v334 + 1) + 8 * v112);
              v114 = +[NSCountedSet set](&OBJC_CLASS___NSCountedSet, "set");
              v274 = +[NSCountedSet set](&OBJC_CLASS___NSCountedSet, "set");
              v272 = +[NSCountedSet set](&OBJC_CLASS___NSCountedSet, "set");
              v276 = +[NSCountedSet set](&OBJC_CLASS___NSCountedSet, "set");
              v270 = +[NSCountedSet set](&OBJC_CLASS___NSCountedSet, "set");
              v266 = +[NSCountedSet set](&OBJC_CLASS___NSCountedSet, "set");
              v261 = v113;
              v115 = [v113 objectForKey:@"photos"];
              v330 = 0u;
              v331 = 0u;
              v332 = 0u;
              v333 = 0u;
              v278 = v115;
              v116 = [v115 countByEnumeratingWithState:&v330 objects:v414 count:16];
              if (v116)
              {
                v117 = v116;
                v268 = *(id *)v331;
                do
                {
                  for (i4 = 0LL; i4 != v117; i4 = (char *)i4 + 1)
                  {
                    if (*(id *)v331 != v268) {
                      objc_enumerationMutation(v278);
                    }
                    v119 = *(void *)(*((void *)&v330 + 1) + 8LL * (void)i4);
                    v120 = -[MPDocument cityForPath:](v281->_authoredDocument, "cityForPath:", v119);
                    v121 = -[MPDocument neighborhoodForPath:](v281->_authoredDocument, "neighborhoodForPath:", v119);
                    v122 = -[MPDocument areaForPath:](v281->_authoredDocument, "areaForPath:", v119);
                    v123 = -[MPDocument placeForPath:](v281->_authoredDocument, "placeForPath:", v119);
                    v124 = -[MPDocument definedPlaceNameForPath:]( v281->_authoredDocument,  "definedPlaceNameForPath:",  v119);
                    v125 = [v280 objectForKey:v119];
                    if (v125)
                    {
                      v126 = [v125 objectForKey:@"pinLabel"];
                      if (v126) {
                        [v114 addObject:v126];
                      }
                    }

                    if (v124 && [v124 length]) {
                      [v274 addObject:v124];
                    }
                    if (v123 && [v123 length]) {
                      [v272 addObject:v123];
                    }
                    if (v122 && [v122 length]) {
                      [v276 addObject:v122];
                    }
                    if (v121 && [v121 length]) {
                      [v270 addObject:v121];
                    }
                    if (v120 && [v120 length]) {
                      [v266 addObject:v120];
                    }
                  }

                  v117 = [v278 countByEnumeratingWithState:&v330 objects:v414 count:16];
                }

                while (v117);
              }

              v127 = [v278 count];
              v326 = 0u;
              v327 = 0u;
              v328 = 0u;
              v329 = 0u;
              v128 = [v114 countByEnumeratingWithState:&v326 objects:v413 count:16];
              if (v128)
              {
                v129 = v128;
                v130 = 0;
                v131 = 0LL;
                v132 = *(void *)v327;
                do
                {
                  for (i5 = 0LL; i5 != v129; i5 = (char *)i5 + 1)
                  {
                    if (*(void *)v327 != v132) {
                      objc_enumerationMutation(v114);
                    }
                    v134 = *(__CFString **)(*((void *)&v326 + 1) + 8LL * (void)i5);
                    v135 = (double)(uint64_t)[v114 countForObject:v134];
                    v136 = (double)(unint64_t)[v278 count] * 0.5;
                    v130 |= v136 <= v135;
                    if (v136 <= v135) {
                      v131 = v134;
                    }
                  }

                  v129 = [v114 countByEnumeratingWithState:&v326 objects:v413 count:16];
                }

                while (v129);
              }

              else
              {
                v130 = 0;
                v131 = 0LL;
              }

              if (((v257 | v130) & 1) != 0)
              {
                v137 = 0;
                v138 = 0LL;
                v139 = v262;
                if (v131) {
                  goto LABEL_260;
                }
              }

              else
              {
                v324 = 0u;
                v325 = 0u;
                v322 = 0u;
                v323 = 0u;
                v140 = [v274 countByEnumeratingWithState:&v322 objects:v412 count:16];
                v139 = v262;
                if (v140)
                {
                  v141 = v140;
                  v137 = 0;
                  v138 = 0LL;
                  v142 = *(void *)v323;
                  do
                  {
                    for (i6 = 0LL; i6 != v141; i6 = (char *)i6 + 1)
                    {
                      if (*(void *)v323 != v142) {
                        objc_enumerationMutation(v274);
                      }
                      v144 = *(__CFString **)(*((void *)&v322 + 1) + 8LL * (void)i6);
                      v145 = [v274 countForObject:v144];
                      if ((double)(uint64_t)v127 * 0.75 <= (double)(uint64_t)v145 && (uint64_t)v145 > (uint64_t)v138)
                      {
                        v137 = 1;
                        v138 = v145;
                        v131 = v144;
                      }
                    }

                    v141 = [v274 countByEnumeratingWithState:&v322 objects:v412 count:16];
                  }

                  while (v141);
                  if (v131) {
                    goto LABEL_260;
                  }
                }

                else
                {
                  v137 = 0;
                  v138 = 0LL;
                  if (v131) {
                    goto LABEL_260;
                  }
                }
              }

              v320 = 0u;
              v321 = 0u;
              v318 = 0u;
              v319 = 0u;
              v156 = [v272 countByEnumeratingWithState:&v318 objects:v411 count:16];
              if (!v156) {
                goto LABEL_306;
              }
              v157 = v156;
              v131 = 0LL;
              v158 = *(void *)v319;
              do
              {
                for (i7 = 0LL; i7 != v157; i7 = (char *)i7 + 1)
                {
                  if (*(void *)v319 != v158) {
                    objc_enumerationMutation(v272);
                  }
                  v160 = *(__CFString **)(*((void *)&v318 + 1) + 8LL * (void)i7);
                  v161 = [v272 countForObject:v160];
                  if ((double)(uint64_t)v127 * 0.75 <= (double)(uint64_t)v161 && (uint64_t)v161 > (uint64_t)v138)
                  {
                    v138 = v161;
                    v131 = v160;
                  }
                }

                v157 = [v272 countByEnumeratingWithState:&v318 objects:v411 count:16];
              }

              while (v157);
              if (!v131)
              {
LABEL_306:
                v316 = 0u;
                v317 = 0u;
                v314 = 0u;
                v315 = 0u;
                v162 = [v276 countByEnumeratingWithState:&v314 objects:v410 count:16];
                if (!v162) {
                  goto LABEL_439;
                }
                v163 = v162;
                v131 = 0LL;
                v164 = *(void *)v315;
                v279 = v127;
                v165 = (uint64_t)((double)(uint64_t)v127 * 0.75);
                do
                {
                  for (i8 = 0LL; i8 != v163; i8 = (char *)i8 + 1)
                  {
                    if (*(void *)v315 != v164) {
                      objc_enumerationMutation(v276);
                    }
                    v167 = *(__CFString **)(*((void *)&v314 + 1) + 8LL * (void)i8);
                    v168 = [v276 countForObject:v167];
                    if ((uint64_t)v168 >= v165 && (uint64_t)v168 > (uint64_t)v138)
                    {
                      v138 = v168;
                      v131 = v167;
                    }
                  }

                  v163 = [v276 countByEnumeratingWithState:&v314 objects:v410 count:16];
                }

                while (v163);
                v127 = v279;
                if (!v131)
                {
LABEL_439:
                  v312 = 0u;
                  v313 = 0u;
                  v310 = 0u;
                  v311 = 0u;
                  v169 = [v270 countByEnumeratingWithState:&v310 objects:v409 count:16];
                  if (!v169) {
                    goto LABEL_307;
                  }
                  v170 = v169;
                  v131 = 0LL;
                  v171 = *(void *)v311;
                  do
                  {
                    for (i9 = 0LL; i9 != v170; i9 = (char *)i9 + 1)
                    {
                      if (*(void *)v311 != v171) {
                        objc_enumerationMutation(v270);
                      }
                      v173 = *(__CFString **)(*((void *)&v310 + 1) + 8LL * (void)i9);
                      v174 = [v270 countForObject:v173];
                      if ((double)(uint64_t)v127 * 0.75 <= (double)(uint64_t)v174 && (uint64_t)v174 > (uint64_t)v138)
                      {
                        v138 = v174;
                        v131 = v173;
                      }
                    }

                    v170 = [v270 countByEnumeratingWithState:&v310 objects:v409 count:16];
                  }

                  while (v170);
                  if (!v131)
                  {
LABEL_307:
                    v308 = 0u;
                    v309 = 0u;
                    v306 = 0u;
                    v307 = 0u;
                    v175 = [v266 countByEnumeratingWithState:&v306 objects:v408 count:16];
                    if (!v175)
                    {
                      v147 = [v139 objectForKey:@"MapName"];
                      v131 = 0LL;
                      goto LABEL_263;
                    }

                    v176 = v175;
                    v131 = 0LL;
                    v177 = *(void *)v307;
                    do
                    {
                      for (i10 = 0LL; i10 != v176; i10 = (char *)i10 + 1)
                      {
                        if (*(void *)v307 != v177) {
                          objc_enumerationMutation(v266);
                        }
                        v179 = *(__CFString **)(*((void *)&v306 + 1) + 8LL * (void)i10);
                        v180 = [v266 countForObject:v179];
                        if ((double)(uint64_t)v127 * 0.75 <= (double)(uint64_t)v180 && (uint64_t)v180 > (uint64_t)v138)
                        {
                          v138 = v180;
                          v131 = v179;
                        }
                      }

                      v176 = [v266 countByEnumeratingWithState:&v306 objects:v408 count:16];
                    }

                    while (v176);
                  }
                }
              }

LABEL_260:
              v147 = [v139 objectForKey:@"MapName"];
              if (!((v131 == 0LL) | v130 & 1)
                && -[__CFString isEqualToString:](v131, "isEqualToString:", v147))
              {
                v131 = 0LL;
              }

LABEL_263:
              if ((v131 != 0LL) | v137 & 1) {
                goto LABEL_264;
              }
              v304 = 0u;
              v305 = 0u;
              v302 = 0u;
              v303 = 0u;
              v149 = [v276 countByEnumeratingWithState:&v302 objects:v407 count:16];
              if (v149)
              {
                v150 = v149;
                v151 = 0LL;
                v148 = 0LL;
                v152 = *(void *)v303;
                do
                {
                  for (i11 = 0LL; i11 != v150; i11 = (char *)i11 + 1)
                  {
                    if (*(void *)v303 != v152) {
                      objc_enumerationMutation(v276);
                    }
                    v154 = *(const __CFString **)(*((void *)&v302 + 1) + 8LL * (void)i11);
                    v155 = [v276 countForObject:v154];
                    if ((uint64_t)v155 > (uint64_t)v151)
                    {
                      v151 = v155;
                      v148 = v154;
                    }
                  }

                  v150 = [v276 countByEnumeratingWithState:&v302 objects:v407 count:16];
                }

                while (v150);
                if (v148) {
                  goto LABEL_347;
                }
              }

              else
              {
                v151 = 0LL;
              }

              v300 = 0u;
              v301 = 0u;
              v298 = 0u;
              v299 = 0u;
              v181 = [v270 countByEnumeratingWithState:&v298 objects:v406 count:16];
              if (!v181) {
                goto LABEL_337;
              }
              v182 = v181;
              v148 = 0LL;
              v183 = *(void *)v299;
              do
              {
                for (i12 = 0LL; i12 != v182; i12 = (char *)i12 + 1)
                {
                  if (*(void *)v299 != v183) {
                    objc_enumerationMutation(v270);
                  }
                  v185 = *(const __CFString **)(*((void *)&v298 + 1) + 8LL * (void)i12);
                  v186 = [v270 countForObject:v185];
                  if ((uint64_t)v186 > (uint64_t)v151)
                  {
                    v151 = v186;
                    v148 = v185;
                  }
                }

                v182 = [v270 countByEnumeratingWithState:&v298 objects:v406 count:16];
              }

              while (v182);
              if (!v148)
              {
LABEL_337:
                v296 = 0u;
                v297 = 0u;
                v294 = 0u;
                v295 = 0u;
                v187 = [v266 countByEnumeratingWithState:&v294 objects:v405 count:16];
                if (!v187) {
                  goto LABEL_338;
                }
                v188 = v187;
                v148 = 0LL;
                v189 = *(void *)v295;
                do
                {
                  for (i13 = 0LL; i13 != v188; i13 = (char *)i13 + 1)
                  {
                    if (*(void *)v295 != v189) {
                      objc_enumerationMutation(v266);
                    }
                    v191 = *(const __CFString **)(*((void *)&v294 + 1) + 8LL * (void)i13);
                    v192 = [v266 countForObject:v191];
                    if ((uint64_t)v192 > (uint64_t)v151)
                    {
                      v151 = v192;
                      v148 = v191;
                    }
                  }

                  v188 = [v266 countByEnumeratingWithState:&v294 objects:v405 count:16];
                }

                while (v188);
                if (!v148)
                {
LABEL_338:
                  v292 = 0u;
                  v293 = 0u;
                  v290 = 0u;
                  v291 = 0u;
                  v193 = [v272 countByEnumeratingWithState:&v290 objects:v404 count:16];
                  if (!v193)
                  {
LABEL_264:
                    v148 = 0LL;
                    goto LABEL_347;
                  }

                  v194 = v193;
                  v148 = 0LL;
                  v195 = *(void *)v291;
                  do
                  {
                    for (i14 = 0LL; i14 != v194; i14 = (char *)i14 + 1)
                    {
                      if (*(void *)v291 != v195) {
                        objc_enumerationMutation(v272);
                      }
                      v197 = *(const __CFString **)(*((void *)&v290 + 1) + 8LL * (void)i14);
                      v198 = [v272 countForObject:v197];
                      if ((uint64_t)v198 > (uint64_t)v151)
                      {
                        v151 = v198;
                        v148 = v197;
                      }
                    }

                    v194 = [v272 countByEnumeratingWithState:&v290 objects:v404 count:16];
                  }

                  while (v194);
                }
              }

            v151 = v145 == 1;
            if ((unint64_t)[v105 firstIndex] | v150)
            {
              if ([v105 lastIndex] != v225 - 1) {
                goto LABEL_273;
              }
              if (v150 != v225 - (_BYTE *)[v105 count] || !v142) {
                goto LABEL_273;
              }
            }

            else if (!v142)
            {
LABEL_273:
              [v149 removeObjectsAtIndexes:v105];
              v153 = v227;
              if (v227 >= v148) {
                v153 = v227 % v148 + *(int64_t *)((char *)&self->mLastSlideIndex + 1);
              }
              v154 = objc_alloc_init(&OBJC_CLASS___MRShiftingTilesTimingInfo);
              v154->fallDirection = v151;
              v154->fallLeft = v146;
              v154->isTop = v142;
              v154->slideIndex = v153;
              v154->add = v150;
              v214 = (double *)v154;
              -[MRShiftingTilesTimingInfo setRemove:](v154, "setRemove:", v105);
              v155 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
              v156 = v221;
              v157 = &v221[v218];
              v226 = v157;
              v158 = 5.0;
              v59 = v223;
              do
              {
                v159 = (char *)objc_msgSend( -[NSMutableArray objectAtIndex:](v59, "objectAtIndex:", v156),  "integerValue");
                v160 = objc_alloc_init(&OBJC_CLASS___MRShiftingTilesIteration);
                v160->layout = (int64_t)v159;
                v160->age = 0LL;
                v161 = -[MREffectShiftingTiles _slideCountForLayout:](self, "_slideCountForLayout:", v159);
                if (v161 >= 1)
                {
                  v162 = v161;
                  v163 = v153;
                  do
                  {
                    -[MREffectShiftingTiles _aspectRatioForSlideIndex:](self, "_aspectRatioForSlideIndex:", v163);
                    if (v164 < 0.5 || v164 > 2.0)
                    {
                      -[MREffectShiftingTiles _durationForAspectRatio:inLayout:withScreenRatio:]( self,  "_durationForAspectRatio:inLayout:withScreenRatio:",  v159);
                      if (v158 < v166) {
                        v158 = v166;
                      }
                    }

                    if (v163 == v66) {
                      v163 = *(int64_t *)((char *)&self->mLastSlideIndex + 1);
                    }
                    else {
                      ++v163;
                    }
                    --v162;
                  }

                  while (v162);
                }

                if ((unint64_t)(v159 - 5) <= 1)
                {
                  -[MREffectShiftingTiles _aspectRatioForSlideIndex:](self, "_aspectRatioForSlideIndex:", v153);
                  *(float *)&v167 = v167 / v67 * 5.0;
                  v168 = floorf(*(float *)&v167);
                  if (v168 < 5.0) {
                    v168 = 5.0;
                  }
                  v160->width = v168;
                }

                v160->slideIndex = v153;
                [obja insertObject:v160 atIndex:v150];

                v59 = v223;
                -[NSMutableArray addObject:]( v155,  "addObject:",  -[NSMutableArray objectAtIndex:](v223, "objectAtIndex:", v156));
                if (v153 == v66) {
                  v153 = *(int64_t *)((char *)&self->mLastSlideIndex + 1);
                }
                else {
                  v153 += -[MREffectShiftingTiles _slideCountForLayout:](self, "_slideCountForLayout:", v159);
                }
                ++v150;
                v227 += -[MREffectShiftingTiles _slideCountForLayout:](self, "_slideCountForLayout:", v159);
                float v5 = v156++ == v226;
              }

              while (!v5);
              v214[9] = v158;
              [v214 setLayouts:v155];

              [*(id *)((char *)&self->mSprites + 1) addObject:v214];
              v61 = v210;
              v62 = v215;
              goto LABEL_300;
            }

            if (*((void *)[v149 objectAtIndex:v150] + 1) != 2) {
              v151 = 2LL;
            }
            goto LABEL_273;
          }

LABEL_347:
              if ((v130 & 1) != 0)
              {
                [v261 setObject:v131 forKey:@"PlaceName"];
                self = v281;
LABEL_358:
                v35 = v262;
                goto LABEL_359;
              }

              v199 = &stru_259C60;
              if (!((v148 == 0LL) | v137 & 1)) {
                v199 = v148;
              }
              if (v131) {
                v200 = v131;
              }
              else {
                v200 = (__CFString *)v199;
              }
              if ((-[__CFString isEqualToString:](v200, "isEqualToString:", v147) & 1) == 0)
              {
                [v261 setObject:v200 forKey:@"PlaceName"];
                self = v281;
                goto LABEL_358;
              }

              self = v281;
              v35 = v262;
              if (objc_msgSend( objc_msgSend(v261, "objectForKey:", @"PlaceName"),  "isEqualToString:",  v147)) {
                [v261 setObject:&stru_259C60 forKey:@"PlaceName"];
              }
LABEL_359:
              v112 = v264 + 1;
            }

            while ((id)(v264 + 1) != v259);
            v201 = [v252 countByEnumeratingWithState:&v334 objects:v415 count:16];
            v259 = v201;
          }

          while (v201);
        }

        if (((unint64_t)objc_msgSend(objc_msgSend(v35, "objectForKey:", @"pins"), "count") < 2) | v251 & 1)
        {
          if (!((objc_msgSend(objc_msgSend(v35, "objectForKey:", @"pins"), "count") != (char *)&dword_0 + 1) | v251 & 1))
          {
            v202 = objc_msgSend(objc_msgSend(v35, "objectForKey:", @"pins"), "lastObject");
            v203 = [v202 objectForKey:@"PlaceName"];
            v204 = [v35 objectForKey:@"MapName"];
            if (![v203 length] && v253 && objc_msgSend(v204, "length"))
            {
              [v202 setObject:v204 forKey:@"PlaceName"];
              [v35 setObject:v253 forKey:@"MapName"];
            }
          }
        }

        else
        {
          v288 = 0u;
          v289 = 0u;
          v286 = 0u;
          v287 = 0u;
          v205 = [v35 objectForKey:@"pins"];
          v206 = [v205 countByEnumeratingWithState:&v286 objects:v403 count:16];
          if (v206)
          {
            v207 = v206;
            v208 = 0LL;
            v209 = *(void *)v287;
LABEL_371:
            v210 = 0LL;
            v211 = v208;
            while (1)
            {
              if (*(void *)v287 != v209) {
                objc_enumerationMutation(v205);
              }
              v208 = [*(id *)(*((void *)&v286 + 1) + 8 * (void)v210) objectForKey:@"PlaceName"];
              v213 = objc_opt_class(&OBJC_CLASS___NSAttributedString, v212);
              if ((objc_opt_isKindOfClass(v208, v213) & 1) != 0) {
                v208 = [v208 string];
              }
              v210 = (char *)v210 + 1;
              v211 = v208;
              if (v207 == v210)
              {
                v207 = [v205 countByEnumeratingWithState:&v286 objects:v403 count:16];
                if (v207) {
                  goto LABEL_371;
                }
                goto LABEL_380;
              }
            }
          }

          else
          {
LABEL_380:
            v214 = objc_msgSend( objc_msgSend(objc_msgSend(v35, "objectForKey:", @"pins"), "lastObject"),  "objectForKey:",  @"PlaceName");
            if ([v214 length])
            {
              [v35 setObject:v214 forKey:@"MapName"];
              v284 = 0u;
              v285 = 0u;
              v282 = 0u;
              v283 = 0u;
              v215 = [v35 objectForKey:@"pins"];
              v216 = [v215 countByEnumeratingWithState:&v282 objects:v402 count:16];
              if (v216)
              {
                v217 = v216;
                v218 = *(void *)v283;
                do
                {
                  for (i15 = 0LL; i15 != v217; i15 = (char *)i15 + 1)
                  {
                    if (*(void *)v283 != v218) {
                      objc_enumerationMutation(v215);
                    }
                    [*(id *)(*((void *)&v282 + 1) + 8 * (void)i15) setObject:&stru_259C60 forKey:@"PlaceName"];
                  }

                  v217 = [v215 countByEnumeratingWithState:&v282 objects:v402 count:16];
                }

                while (v217);
              }
            }
          }
        }

        float v6 = v250 + 1;
      }

      while ((id)(v250 + 1) != v249);
      v246 = [obj countByEnumeratingWithState:&v398 objects:v431 count:16];
      v249 = v246;
    }

    while (v246);
  }

LABEL_70:
            v338 = v94;
          }

          else
          {
            v93 = 0;
            v395 = 0;
            v338 = 0LL;
            v92 = 1;
          }

          [v89 distanceInMeters];
          v98 = v97 / 1000.0;
          v99 = [v89 significantBodyOfWaterAlongPath];
          if (v98 > 10000.0) {
            v100 = 1LL;
          }
          else {
            v100 = v99;
          }
          if (v98 > 1000.0) {
            v101 = v100;
          }
          else {
            v101 = 0;
          }
          if (v98 > 2000.0) {
            v101 = 1;
          }
          v102 = 2LL;
          if (v101) {
            v102 = 3LL;
          }
          v336 = v102;
          if ((v101 & 1) == 0 && v98 <= 1000.0)
          {
            if (v98 > 100.0)
            {
              v336 = 1LL;
              goto LABEL_85;
            }

            v340 = 0LL;
            if (v341 == v331)
            {
              v63 = &AVAudioTimePitchAlgorithmVarispeed_ptr;
              if (v341 < 12)
              {
                v333 = 1;
                v322 = 0LL;
                v325 = 0LL;
                v326 = y;
                v327 = CGPointZero.x;
                v328 = y;
                v329 = CGPointZero.x;
                v336 = 0LL;
              }

              else
              {
                v112 = +[NSValue valueWithCGPoint:](&OBJC_CLASS___NSValue, "valueWithCGPoint:", 2048.0, 2048.0);
                -[MPDocument latLongPointForMap:withAttributes:]( self->_authoredDocument,  "latLongPointForMap:withAttributes:",  v371,  +[NSDictionary dictionaryWithObject:forKey:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObject:forKey:",  v112,  kMPAssetOptionMapPoint[0]));
                v114 = v113;
                v116 = v115;
                v117 = +[NSValue valueWithCGPoint:](&OBJC_CLASS___NSValue, "valueWithCGPoint:");
                -[MPDocument pointForMap:withAttributes:]( self->_authoredDocument,  "pointForMap:withAttributes:",  v349,  +[NSDictionary dictionaryWithObject:forKey:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObject:forKey:",  v117,  kMPAssetOptionMapLatLong[0]));
                *(float *)&v118 = v118 + -2048.0;
                *(float *)&v119 = v119 + -2048.0;
                v120 = objc_msgSend(objc_msgSend(v335, "allObjects"), "mutableCopy");
                objc_msgSend(v120, "addObjectsFromArray:", objc_msgSend(v368, "allObjects"));
                v121 = +[NSValue valueWithCGPoint:](&OBJC_CLASS___NSValue, "valueWithCGPoint:", 0.0, 0.0);
                -[MPDocument latLongPointForMap:withAttributes:]( self->_authoredDocument,  "latLongPointForMap:withAttributes:",  v371,  +[NSDictionary dictionaryWithObject:forKey:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObject:forKey:",  v121,  kMPAssetOptionMapPoint[0]));
                objc_msgSend( v120,  "addObject:",  +[NSValue valueWithCGPoint:](NSValue, "valueWithCGPoint:"));
                v122 = +[NSValue valueWithCGPoint:](&OBJC_CLASS___NSValue, "valueWithCGPoint:", 4096.0, 0.0);
                -[MPDocument latLongPointForMap:withAttributes:]( self->_authoredDocument,  "latLongPointForMap:withAttributes:",  v371,  +[NSDictionary dictionaryWithObject:forKey:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObject:forKey:",  v122,  kMPAssetOptionMapPoint[0]));
                objc_msgSend( v120,  "addObject:",  +[NSValue valueWithCGPoint:](NSValue, "valueWithCGPoint:"));
                v123 = +[NSValue valueWithCGPoint:](&OBJC_CLASS___NSValue, "valueWithCGPoint:", 4096.0, 4096.0);
                -[MPDocument latLongPointForMap:withAttributes:]( self->_authoredDocument,  "latLongPointForMap:withAttributes:",  v371,  +[NSDictionary dictionaryWithObject:forKey:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObject:forKey:",  v123,  kMPAssetOptionMapPoint[0]));
                objc_msgSend( v120,  "addObject:",  +[NSValue valueWithCGPoint:](NSValue, "valueWithCGPoint:"));
                v124 = +[NSValue valueWithCGPoint:](&OBJC_CLASS___NSValue, "valueWithCGPoint:", 0.0, 4096.0);
                -[MPDocument latLongPointForMap:withAttributes:]( self->_authoredDocument,  "latLongPointForMap:withAttributes:",  v371,  +[NSDictionary dictionaryWithObject:forKey:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObject:forKey:",  v124,  kMPAssetOptionMapPoint[0]));
                objc_msgSend( v120,  "addObject:",  +[NSValue valueWithCGPoint:](NSValue, "valueWithCGPoint:"));
                v125 = +[NSValue valueWithCGPoint:](&OBJC_CLASS___NSValue, "valueWithCGPoint:", 0.0, 0.0);
                -[MPDocument latLongPointForMap:withAttributes:]( self->_authoredDocument,  "latLongPointForMap:withAttributes:",  v349,  +[NSDictionary dictionaryWithObject:forKey:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObject:forKey:",  v125,  kMPAssetOptionMapPoint[0]));
                objc_msgSend( v120,  "addObject:",  +[NSValue valueWithCGPoint:](NSValue, "valueWithCGPoint:"));
                v126 = +[NSValue valueWithCGPoint:](&OBJC_CLASS___NSValue, "valueWithCGPoint:", 4096.0, 0.0);
                -[MPDocument latLongPointForMap:withAttributes:]( self->_authoredDocument,  "latLongPointForMap:withAttributes:",  v349,  +[NSDictionary dictionaryWithObject:forKey:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObject:forKey:",  v126,  kMPAssetOptionMapPoint[0]));
                objc_msgSend( v120,  "addObject:",  +[NSValue valueWithCGPoint:](NSValue, "valueWithCGPoint:"));
                v127 = +[NSValue valueWithCGPoint:](&OBJC_CLASS___NSValue, "valueWithCGPoint:", 4096.0, 4096.0);
                -[MPDocument latLongPointForMap:withAttributes:]( self->_authoredDocument,  "latLongPointForMap:withAttributes:",  v349,  +[NSDictionary dictionaryWithObject:forKey:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObject:forKey:",  v127,  kMPAssetOptionMapPoint[0]));
                objc_msgSend( v120,  "addObject:",  +[NSValue valueWithCGPoint:](NSValue, "valueWithCGPoint:"));
                v128 = +[NSValue valueWithCGPoint:](&OBJC_CLASS___NSValue, "valueWithCGPoint:", 0.0, 4096.0);
                -[MPDocument latLongPointForMap:withAttributes:]( self->_authoredDocument,  "latLongPointForMap:withAttributes:",  v349,  +[NSDictionary dictionaryWithObject:forKey:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObject:forKey:",  v128,  kMPAssetOptionMapPoint[0]));
                objc_msgSend( v120,  "addObject:",  +[NSValue valueWithCGPoint:](NSValue, "valueWithCGPoint:"));
                v129 = kMPAssetMapLatLongPoints[0];
                v130 = +[NSValue valueWithCGSize:](&OBJC_CLASS___NSValue, "valueWithCGSize:", CGSizeZero.width, height);
                v131 =  -[MPDocument tiledMapPathsForAttributes:]( self->_authoredDocument,  "tiledMapPathsForAttributes:",  +[NSDictionary dictionaryWithObjectsAndKeys:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjectsAndKeys:",  v120,  v129,  v130,  kMPAssetMapInset[0],  0LL));

                v340 = v131;
                v132 = [v131 objectAtIndex:0];
                v133 = +[NSValue valueWithCGPoint:](&OBJC_CLASS___NSValue, "valueWithCGPoint:", v114, v116);
                -[MPDocument pointForMap:withAttributes:]( self->_authoredDocument,  "pointForMap:withAttributes:",  v132,  +[NSDictionary dictionaryWithObject:forKey:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObject:forKey:",  v133,  kMPAssetOptionMapLatLong[0]));
                v135 = v134;
                v137 = v136;
                v328 = (v136 + v136) * 0.000244140625 + -1.0;
                v329 = (v134 + v134) * 0.000244140625 + -1.0;
                v138 = +[NSValue valueWithCGPoint:](&OBJC_CLASS___NSValue, "valueWithCGPoint:", 2048.0, 2048.0);
                -[MPDocument latLongPointForMap:withAttributes:]( self->_authoredDocument,  "latLongPointForMap:withAttributes:",  v349,  +[NSDictionary dictionaryWithObject:forKey:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObject:forKey:",  v138,  kMPAssetOptionMapPoint[0]));
                v139 = +[NSValue valueWithCGPoint:](&OBJC_CLASS___NSValue, "valueWithCGPoint:");
                -[MPDocument pointForMap:withAttributes:]( self->_authoredDocument,  "pointForMap:withAttributes:",  v132,  +[NSDictionary dictionaryWithObject:forKey:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObject:forKey:",  v139,  kMPAssetOptionMapLatLong[0]));
                v322 = 0LL;
                v325 = 0LL;
                v333 = 0;
                v336 = 0LL;
                v326 = (v141 + v141) * 0.000244140625 + -1.0;
                v327 = (v140 + v140) * 0.000244140625 + -1.0;
                *(float *)&v140 = v140 - v135;
                *(float *)&v141 = v141 - v137;
                v330 = v389
              }

    v23 = objc_msgSend(a5, "preloadQueue", v17);
    if (v20) {
      goto LABEL_71;
    }
    goto LABEL_35;
  }

  v28 = self->super.mDefaultMainDuration * 0.25;
  v29 = v28 + 0.414999992;
  if (v28 + 0.414999992 > a3)
  {
    v17 = v28 + -0.414999992;
    if (v28 + -0.414999992 <= a3) {
      goto LABEL_28;
    }
    goto LABEL_70;
  }

  if (v20) {
    goto LABEL_28;
  }
  v17 = v17 - v29;
  v39 = a3 - v29;
  if (v39 >= v17 * 0.333 + -0.6665 && v39 < v17 * 0.333 + 0.6665) {
    goto LABEL_28;
  }
  v41 = v17 * 0.666 + -0.6665;
  v42 = v17 * 0.666 + 0.6665;
  v23 = [a5 preloadQueue];
  if (v39 >= v41 && v39 < v42)
  {
LABEL_71:
    v10 = 1LL;
    if (!-[MRLayerEffect asynchronousOperationsAreSuspended]( self->super.mEffectLayer,  "asynchronousOperationsAreSuspended")) {
      goto LABEL_72;
    }
    return v10;
  }

LABEL_101:
              v67 = v338;
LABEL_102:
              objc_autoreleasePoolPop(v56);
              goto LABEL_103;
            }

            v333 = 1;
            v322 = 0LL;
            v325 = 0LL;
            v326 = y;
            v327 = CGPointZero.x;
            v328 = y;
            v329 = CGPointZero.x;
            v336 = 0LL;
LABEL_100:
            v63 = &AVAudioTimePitchAlgorithmVarispeed_ptr;
            goto LABEL_101;
          }

LABEL_143:
                      v164 = (char *)v164 + 1;
                    }

                    while (v390 != v164);
                    v186 = [v154 countByEnumeratingWithState:&v425 objects:v455 count:16];
                    v63 = &AVAudioTimePitchAlgorithmVarispeed_ptr;
                    v390 = v186;
                  }

                  while (v186);
                }
              }

  v123 = [v17 objectForKey:@"yRotationAngle"];
  if (!v123)
  {
    v122 = 0;
    goto LABEL_147;
  }

  v124 = v123;
  [v123 startTime];
  if (v125 >= 0.0)
  {
    [v124 valueAtTime:a3];
    v132 = v133;
    [v124 startTime];
    v135 = a3 - v134;
    [v124 duration];
    if (v135 >= v136) {
      [v17 removeObjectForKey:@"yRotationAngle"];
    }
    v122 = 0;
    goto LABEL_159;
  }

  [v124 setStartTime:a3];
  [v124 setStartValue:*((float *)v10 + 8)];
LABEL_169:
  v141 = [v17 objectForKey:@"rotationAngle"];
  if (v141)
  {
    v142 = v141;
    [v141 startTime];
    if (v143 < 0.0)
    {
      [v142 setStartTime:a3];
      [v142 setStartValue:*((float *)v10 + 9)];
      goto LABEL_193;
    }

    [v142 valueAtTime:a3];
    v150 = v151;
    [v142 startTime];
    v153 = a3 - v152;
    [v142 duration];
    if (v153 >= v154) {
      [v17 removeObjectForKey:@"rotationAngle"];
    }
    v140 = 0;
    goto LABEL_185;
  }

  v140 = 0;
LABEL_173:
  mAnimationPathRZ = self->mAnimationPathRZ;
  if (mAnimationPathRZ
    && (!-[MCAnimationPath isTriggered](mAnimationPathRZ->animationPath, "isTriggered")
     || [v16 objectForKey:@"rotationAngle"]))
  {
    if (v9)
    {
      self->mAnimationPathRZ->speed = 0.0;
      self->mAnimationPathRZ->time = -1.0e10;
    }

    self->mAnimationContext->animationPath = self->mAnimationPathRZ;
    v145 = self->mAnimationPathRZ->animationPath;
    v146 = [v107 clock];
    -[MCPlugParallel rotationAngle](self->mPlug, "rotationAngle");
    v147 = v146;
    uint64_t v16 = v177;
    v149 = ValueForScalarAnimationPath(v145, v147, self->mAnimationContext, v177, a3, v148);
  }

  else
  {
    if (!mPlugWasSetSinceLastRendering) {
      goto LABEL_192;
    }
    -[MCPlugParallel rotationAngle](self->mPlug, "rotationAngle");
  }

  v150 = v149;
LABEL_185:
  v155 = self->mAnimationPathRZ;
  if (v155)
  {
    v156 = 0.0;
    if ((v9 & 1) == 0)
    {
      v157 = v155->time;
      if (v157 < a3) {
        v156 = (v150 - v155->value) / (a3 - v157);
      }
    }

    v155->speed = v156;
    self->mAnimationPathRZ->value = v150;
    self->mAnimationPathRZ->time = a3;
  }

  v18 = v150 * 57.2957764;
  if (v150 * 57.2957764 != *((float *)v10 + 9))
  {
    *(float *)&v18 = v18;
    *((_DWORD *)v10 + 9) = LODWORD(v18);
    v106 = 1;
  }

LABEL_157:
              [v357 addObject:v375];
              [v358 addObject:v151];
              v144 = +[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array");
              v396 = v375;
              v148 = v151;
              v149 = v347;
            }

            else
            {
              v151 = v148;
              v375 = v396;
            }

            objc_msgSend( v144,  "addObject:",  -[AVAudioTimePitchAlgorithm numberWithInteger:]((id)v63[234], "numberWithInteger:", v149++));
            v146 = (v150.y + 1.0) * 0.5 * 4096.0;
            v147 = (v150.x + 1.0) * 0.5 * 4096.0;
          }
        }

        v151 = 0LL;
        v375 = 0LL;
LABEL_161:
        [v350 addObject:v144];
        v363 = +[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array");
        v379 = +[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array");
        v187 = (char *)[v144 count];
        if (v187 != (_BYTE *)&dword_4 + 2)
        {
          v188 = v187;
          v189 = +[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array");
          v369 = (char *)objc_msgSend(objc_msgSend(v144, "lastObject"), "integerValue");
          v190 = +[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array");
          if (v375
            && objc_msgSend( v375,  "containsObject:",  +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", v369)))
          {
            objc_msgSend( v190,  "addObject:",  +[NSValue valueWithCGRect:]( NSValue,  "valueWithCGRect:",  v147 + -80.0,  v146 + -180.0,  160.0,  210.0));
            v191 = +[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", v369);
            v192 = v379;
          }

          else
          {
            v191 = +[NSValue valueWithCGRect:]( &OBJC_CLASS___NSValue,  "valueWithCGRect:",  v147 + -80.0,  v146 + -25.0,  160.0,  205.0);
            v192 = v190;
          }

          [v192 addObject:v191];
          if (v151)
          {
            [v189 addObjectsFromArray:v151];
            objc_msgSend( v189,  "removeObject:",  +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", v369));
          }

          v193 = (uint64_t)(v369 - 1);
          if ((uint64_t)v369 >= 1)
          {
            v194 = +[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", v369 - 1);
            if ((unint64_t)v369 >= 2)
            {
              do
              {
                v195 = +[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", --v193);
              }

              while (v193 > 0);
            }
          }

          v196 = v369 + 1;
          if ((uint64_t)(v369 + 1) < (uint64_t)v382)
          {
            do
            {
              v197 = +[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", v196);
              ++v196;
            }

            while (v382 != v196);
          }

          v421 = 0u;
          v422 = 0u;
          v419 = 0u;
          v420 = 0u;
          v397 = [v189 countByEnumeratingWithState:&v419 objects:v454 count:16];
          if (v397)
          {
            v386 = (id)(6LL - (void)v188);
            v391 = *(void *)v420;
            do
            {
              v198 = 0LL;
              v199 = v363;
              do
              {
                if (*(void *)v420 != v391) {
                  objc_enumerationMutation(v189);
                }
                v200 = *(void **)(*((void *)&v419 + 1) + 8LL * (void)v198);
                v201 = CGPointFromString((NSString *)objc_msgSend( objc_msgSend( v393,  "objectAtIndex:",  objc_msgSend(v200, "integerValue")),  "objectForKey:",  @"location"));
                if (v375) {
                  v202 = [v375 containsObject:v200];
                }
                else {
                  v202 = 0;
                }
                v203 = (v201.y + 1.0) * 0.5 * 4096.0;
                v424 = -1LL;
                v204 = (v201.x + 1.0) * 0.5 * 4096.0 + -80.0;
                v205 = v203 + 10.0;
                if (!-[MPAuthoringController rect:intersectsRects:index:]( self,  "rect:intersectsRects:index:",  v190,  &v424,  v204,  v203 + 10.0,  160.0,  170.0)
                  && !v202)
                {
                  *(double *)&v206 = 170.0;
LABEL_194:
                  v209 = (v201.x + 1.0) * 0.5 * 4096.0 + -80.0;
                  v210 = v205;
                  v211 = *(double *)&v206;
                  goto LABEL_195;
                }

                v207 = v203 + -180.0;
                *(double *)&v206 = 180.0;
                if (!-[MPAuthoringController rect:intersectsRects:index:]( self,  "rect:intersectsRects:index:",  v190,  &v424,  v204,  v207))
                {
                  [v379 addObject:v200];
                  v205 = v207;
                  goto LABEL_194;
                }

                v366 = v207;
                if (v424) {
                  v208 = (NSNumber *)[v199 objectAtIndex:v424 - 1];
                }
                else {
                  v208 = +[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", v369);
                }
                v212 = v208;
                v213 = CGPointFromString((NSString *)objc_msgSend( objc_msgSend( v393,  "objectAtIndex:",  -[NSNumber integerValue](v212, "integerValue")),  "objectForKey:",  @"location"));
                v423 = -1LL;
                v214 = (v213.x + 1.0) * 0.5 * 4096.0 + -80.0;
                v353 = (v213.y + 1.0) * 0.5 * 4096.0 + -180.0;
                if (-[MPAuthoringController rect:intersectsRects:index:]( self,  "rect:intersectsRects:index:",  v190,  &v423,  v214))
                {
                  goto LABEL_196;
                }

                v215 = [v190 mutableCopy];
                [v215 removeObjectAtIndex:v424];
                v216 = +[NSValue valueWithCGRect:](&OBJC_CLASS___NSValue, "valueWithCGRect:", v214, v353, 160.0, 180.0);
                [v215 insertObject:v216 atIndex:v424];
                if ((-[MPAuthoringController rect:intersectsRects:index:]( self,  "rect:intersectsRects:index:",  v215,  &v423,  v204,  v205,  160.0,  170.0) | v202) == 1)
                {
                  v217 = -[MPAuthoringController rect:intersectsRects:index:]( self,  "rect:intersectsRects:index:",  v215,  &v423,  v204,  v366,  160.0,  180.0);
                  v199 = v363;
                  if ((v217 & 1) != 0) {
                    goto LABEL_196;
                  }
                  [v190 removeObjectAtIndex:v424];
                  v218 = +[NSValue valueWithCGRect:]( &OBJC_CLASS___NSValue,  "valueWithCGRect:",  v214,  v353,  160.0,  180.0);
                  [v190 insertObject:v218 atIndex:v424];
                  [v379 addObject:v212];
                  [v379 addObject:v200];
                  v205 = v366;
                  v211 = 180.0;
                }

                else
                {
                  [v190 removeObjectAtIndex:v424];
                  v219 = +[NSValue valueWithCGRect:]( &OBJC_CLASS___NSValue,  "valueWithCGRect:",  v214,  v353,  160.0,  180.0);
                  [v190 insertObject:v219 atIndex:v424];
                  [v379 addObject:v212];
                  v211 = 170.0;
                  v199 = v363;
                }

                v209 = (v201.x + 1.0) * 0.5 * 4096.0 + -80.0;
                v210 = v205;
LABEL_195:
                objc_msgSend( v190,  "addObject:",  +[NSValue valueWithCGRect:](NSValue, "valueWithCGRect:", v209, v210, 160.0, v211));
                [v199 addObject:v200];
                if ([v199 count] == v386) {
                  goto LABEL_207;
                }
LABEL_196:
                v198 = (char *)v198 + 1;
              }

              while (v397 != v198);
              v220 = [v189 countByEnumeratingWithState:&v419 objects:v454 count:16];
              v397 = v220;
            }

            while (v220);
          }
        }

LABEL_207:
        [v357 addObject:v379];
        [v358 addObject:v363];
        v383 = +[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array");
        v415 = 0u;
        v416 = 0u;
        v417 = 0u;
        v418 = 0u;
        x = CGPointZero.x;
        v359 = [v350 countByEnumeratingWithState:&v415 objects:v453 count:16];
        if (v359)
        {
          v221 = 0LL;
          v222 = 0LL;
          v223 = 0LL;
          v380 = 0LL;
          v224 = 0LL;
          v354 = *(void *)v416;
          v225 = 0.0;
          do
          {
            v226 = 0LL;
            v227 = v222;
            v228 = v223;
            v229 = v224;
            do
            {
              v364 = v227;
              v372 = v228;
              if (*(void *)v416 != v354) {
                objc_enumerationMutation(v350);
              }
              v230 = *(void **)(*((void *)&v415 + 1) + 8 * v226);
              v231 = objc_msgSend(objc_msgSend(v230, "objectAtIndex:", 0), "integerValue");
              v232 = [v230 count];
              v233 = +[NSIndexSet indexSetWithIndexesInRange:]( &OBJC_CLASS___NSIndexSet,  "indexSetWithIndexesInRange:",  v231,  v232);
              v234 = +[NSMutableArray arrayWithArray:]( NSMutableArray,  "arrayWithArray:",  [v36 objectsAtIndexes:v233]);
              v387 = v233;
              -[NSMutableArray addObjectsFromArray:]( v234,  "addObjectsFromArray:",  [v37 objectsAtIndexes:v233]);
              v222 = [v358 objectAtIndex:v221];
              v392 = v221;
              v376 = v226;
              v370 = v229;
              v367 = (NSUInteger)v232;
              if ([v222 count])
              {
                v222 = [v222 sortedArrayUsingSelector:"compare:"];
                v411 = 0u;
                v412 = 0u;
                v413 = 0u;
                v414 = 0u;
                v235 = [v222 countByEnumeratingWithState:&v411 objects:v452 count:16];
                if (v235)
                {
                  v236 = v235;
                  v237 = *(void *)v412;
                  do
                  {
                    for (m = 0LL; m != v236; m = (char *)m + 1)
                    {
                      if (*(void *)v412 != v237) {
                        objc_enumerationMutation(v222);
                      }
                      v239 = [*(id *)(*((void *)&v411 + 1) + 8 * (void)m) integerValue];
                      if (v239 >= v231) {
                        v240 = v36;
                      }
                      else {
                        v240 = v37;
                      }
                      -[NSMutableArray addObject:](v234, "addObject:", [v240 objectAtIndex:v239]);
                    }

                    v236 = [v222 countByEnumeratingWithState:&v411 objects:v452 count:16];
                  }

                  while (v236);
                }
              }

              v398 = +[MPEffect effectWithEffectID:andPaths:]( &OBJC_CLASS___MPEffect,  "effectWithEffectID:andPaths:",  @"PinMap",  v234);
              v241 = +[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array");
              v242 = objc_msgSend(objc_msgSend(v356, "objectForKey:", @"allPoints"), "allObjects");
              v407 = 0u;
              v408 = 0u;
              v409 = 0u;
              v410 = 0u;
              v243 = [v242 countByEnumeratingWithState:&v407 objects:v451 count:16];
              if (v243)
              {
                v244 = v243;
                v245 = *(void *)v408;
                do
                {
                  for (n = 0LL; n != v244; n = (char *)n + 1)
                  {
                    if (*(void *)v408 != v245) {
                      objc_enumerationMutation(v242);
                    }
                    [*(id *)(*((void *)&v407 + 1) + 8 * (void)n) CGPointValue];
                    [v241 addObject:NSStringFromCGPoint(v465)];
                  }

                  v244 = [v242 countByEnumeratingWithState:&v407 objects:v451 count:16];
                }

                while (v244);
              }

              -[MPEffect setEffectAttribute:forKey:](v398, "setEffectAttribute:forKey:", v241, @"pinLocations");
              -[MPEffect setEffectAttribute:forKey:]( v398,  "setEffectAttribute:forKey:",  v222,  @"extraPinLocations");
              if (v364) {
                -[MPEffect setEffectAttribute:forKey:]( v398,  "setEffectAttribute:forKey:",  v364,  @"lastExtraPinLocations");
              }
              if (v370) {
                -[MPEffect setEffectAttribute:forKey:]( v370,  "setEffectAttribute:forKey:",  v222,  @"nextExtraPinLocations");
              }
              v247 = [v357 objectAtIndex:v392];
              -[MPEffect setEffectAttribute:forKey:](v398, "setEffectAttribute:forKey:", v247, @"flippedBoxes");
              if (v372) {
                -[MPEffect setEffectAttribute:forKey:]( v398,  "setEffectAttribute:forKey:",  v372,  @"lastFlippedBoxes");
              }
              if (v370) {
                -[MPEffect setEffectAttribute:forKey:]( v370,  "setEffectAttribute:forKey:",  v247,  @"nextFlippedBoxes");
              }
              -[MPEffect createSecondarySlidesWithPaths:](v398, "createSecondarySlidesWithPaths:", v355);
              -[MPEffect setEffectAttribute:forKey:](v398, "setEffectAttribute:forKey:", v393, @"pinInformation");
              -[MPEffect setEffectAttribute:forKey:]( v398,  "setEffectAttribute:forKey:",  +[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", v225),  @"startTime");
              v461.location = (NSUInteger)v231;
              v461.length = v367;
              -[MPEffect setEffectAttribute:forKey:]( v398,  "setEffectAttribute:forKey:",  NSStringFromRange(v461),  @"pinRange");
              if (v380) {
                -[MPEffect setEffectAttribute:forKey:](v398, "setEffectAttribute:forKey:", v380, @"lastPinRange");
              }
              v373 = v247;
              v462.location = (NSUInteger)v231;
              v462.length = v367;
              v248 = NSStringFromRange(v462);
              if (v370) {
                -[MPEffect setEffectAttribute:forKey:](v370, "setEffectAttribute:forKey:", v248, @"nextPinRange");
              }
              v380 = v248;
              -[MPEffect setEffectAttribute:forKey:]( v398,  "setEffectAttribute:forKey:",  +[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", -1LL),  @"inDirection");
              -[MPEffect setEffectAttribute:forKey:]( v398,  "setEffectAttribute:forKey:",  +[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", -1LL),  @"outDirection");
              v249 = +[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array");
              [v249 addObject:&stru_259C60];
              v405 = 0u;
              v406 = 0u;
              v403 = 0u;
              v404 = 0u;
              v250 = [v361 objectsAtIndexes:v387];
              v251 = [v250 countByEnumeratingWithState:&v403 objects:v450 count:16];
              if (v251)
              {
                v252 = v251;
                v253 = *(void *)v404;
                do
                {
                  for (ii = 0LL; ii != v252; ii = (char *)ii + 1)
                  {
                    if (*(void *)v404 != v253) {
                      objc_enumerationMutation(v250);
                    }
                    v255 = (__CFString *)[*(id *)(*((void *)&v403 + 1) + 8 * (void)ii) objectForKey:@"PlaceName"];
                    if (v255)
                    {
                      v257 = v255;
                      v258 = objc_opt_class(&OBJC_CLASS___NSAttributedString, v256);
                      if ((objc_opt_isKindOfClass(v257, v258) & 1) == 0) {
                        v257 = (__CFString *)-[__CFString uppercaseString](v257, "uppercaseString");
                      }
                      v259 = v249;
                      v260 = v257;
                    }

                    else
                    {
                      v259 = v249;
                      v260 = &stru_259C60;
                    }

                    [v259 addObject:v260];
                  }

                  v252 = [v250 countByEnumeratingWithState:&v403 objects:v450 count:16];
                }

                while (v252);
              }

              -[MPEffect createTextsWithStrings:secondLineFactor:fillIn:]( v398,  "createTextsWithStrings:secondLineFactor:fillIn:",  v249,  0LL,  1.0);
              if ([v383 count]) {
                v261 = 0.0;
              }
              else {
                v261 = 4.6;
              }
              v399 = 0u;
              v400 = 0u;
              v401 = 0u;
              v402 = 0u;
              v262 = [v393 objectsAtIndexes:v387];
              v263 = [v262 countByEnumeratingWithState:&v399 objects:v449 count:16];
              if (v263)
              {
                v264 = v263;
                v265 = *(void *)v400;
                do
                {
                  for (jj = 0LL; jj != v264; jj = (char *)jj + 1)
                  {
                    if (*(void *)v400 != v265) {
                      objc_enumerationMutation(v262);
                    }
                    objc_msgSend( objc_msgSend( *(id *)(*((void *)&v399 + 1) + 8 * (void)jj),  "objectForKey:",  @"pinDuration"),  "doubleValue");
                    v261 = v261 + v267 + 0.4 + 1.75 + 0.3 + 0.4 + 1.2;
                  }

                  v264 = [v262 countByEnumeratingWithState:&v399 objects:v449 count:16];
                }

                while (v264);
              }

              v268 = +[MPEffectContainer effectContainer](&OBJC_CLASS___MPEffectContainer, "effectContainer");
              v224 = v398;
              -[MPEffect setMainDuration:](v398, "setMainDuration:", v261);
              -[MPEffect setPhaseInDuration:](v398, "setPhaseInDuration:", 0.0);
              -[MPEffect setPhaseOutDuration:](v398, "setPhaseOutDuration:", 0.0);
              [v268 addEffect:v398];
              [v383 addObject:v268];
              v221 = v392 + 1;
              v226 = v376 + 1;
              v225 = v225 + v261;
              v227 = v222;
              v223 = v373;
              v228 = v373;
              v229 = v398;
            }

            while ((id)(v376 + 1) != v359);
            v359 = [v350 countByEnumeratingWithState:&v415 objects:v453 count:16];
          }

          while (v359);
        }

        objc_msgSend(objc_msgSend(v383, "lastObject"), "setTransition:", 0);
        v269 = objc_msgSend(objc_msgSend(objc_msgSend(v383, "objectAtIndex:", 0), "effects"), "lastObject");
        v270 = -1LL;
        if (v339 < 0)
        {
          v271 = v337;
          p_cache = &OBJC_METACLASS___SYNMediaWallCollectionViewCellMainView2.cache;
          v273 = v343;
LABEL_274:
          v274 = &qword_1F6000;
          goto LABEL_275;
        }

        v271 = v337;
        p_cache = (void **)(&OBJC_METACLASS___SYNMediaWallCollectionViewCellMainView2 + 16);
        v273 = v343;
        if (!v345) {
          goto LABEL_274;
        }
        v274 = &qword_1F6000;
        if (v331 >= 11 && v341 >= 11)
        {
          objc_msgSend( v269,  "setEffectAttribute:forKey:",  +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", v339),  @"inDirection");
          if (v344) {
            objc_msgSend( v344,  "setEffectAttribute:forKey:",  +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", v339),  @"outDirection");
          }
          v270 = v339;
        }

LABEL_275:
        v23 = [v356 objectForKey:@"MapName"];
        if (v23)
        {
          v276 = objc_opt_class(&OBJC_CLASS___NSAttributedString, v275);
          if ((objc_opt_isKindOfClass(v23, v276) & 1) != 0)
          {
            objc_msgSend(objc_msgSend(objc_msgSend(v269, "texts"), "objectAtIndex:", 0), "setAttributedString:", v23);
          }

          else if ([v23 length])
          {
            v277 = objc_msgSend( objc_msgSend( +[MPEffectManager sharedManager](MPEffectManager, "sharedManager"),  "defaultStringForTextInEffectID:presetID:atIndex:",  @"PinMap",  @"Default",  0),  "mutableCopy");
            objc_msgSend( v277,  "replaceCharactersInRange:withString:",  0,  objc_msgSend(v277, "length"),  objc_msgSend(v23, "uppercaseString"));
            objc_msgSend(objc_msgSend(objc_msgSend(v269, "texts"), "objectAtIndex:", 0), "setAttributedString:", v277);
          }
        }

        v278 = v344;
        if (v344) {
          v279 = 0.4;
        }
        else {
          v279 = 0.0;
        }
        v282 = v273 < (uint64_t)v323 && v270 >= 0 && v345 != 0LL;
        v283 = !v282;
        if (v336) {
          v284 = 1;
        }
        else {
          v284 = v283;
        }
        if (((v333 | v284) & 1) == 0)
        {
          v291 = [p_cache + 243 transitionWithTransitionID:@"PlacesShortZoom"];
          v466.y = v328;
          v466.x = v329;
          [v291 setTransitionAttribute:NSStringFromCGPoint(v466) forKey:@"map0Point"];
          v467.y = v326;
          v467.x = v327;
          [v291 setTransitionAttribute:NSStringFromCGPoint(v467) forKey:@"map1Point"];
          HIDWORD(v292) = HIDWORD(v330);
          *(float *)&v292 = v330;
          objc_msgSend( v291,  "setTransitionAttribute:forKey:",  +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v292),  @"scale");
          [v291 setDuration:0.75];
          objc_msgSend(objc_msgSend(v344, "parentContainer"), "setTransition:", v291);
          objc_msgSend( v269,  "setEffectAttribute:forKey:",  +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", 1),  @"pauseDuringPhaseIn");
          objc_msgSend( v344,  "setEffectAttribute:forKey:",  +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", 1),  @"pauseDuringPhaseOut");
          v293 = [v344 secondarySlides];
          for (kk = 0LL; kk != 4; ++kk)
            objc_msgSend( objc_msgSend(v293, "objectAtIndex:", kk + 4),  "setPath:",  objc_msgSend(v340, "objectAtIndex:", kk));
          v286 = v345;
          [v345 duration];
          v279 = 0.75;
          v290 = v295 + 0.75;
          v285 = 0.75;
          goto LABEL_324;
        }

        if (v336 < 0) {
          v283 = 1;
        }
        if (((v333 | v283) & 1) == 0)
        {
          v296 = 0.9;
          if (v336 != 3) {
            v296 = 0.5;
          }
          if (v336 == 2) {
            v296 = 0.6;
          }
          if (v336) {
            v297 = v296;
          }
          else {
            v297 = 0.4;
          }
          if (self->_placesDebug)
          {
            if (v270)
            {
              v298 = v321;
              if (v270 == 1)
              {
                v299 = @"E";
              }

              else
              {
                v299 = @"W";
                if (v270 == 2) {
                  v299 = @"S";
                }
              }
            }

            else
            {
              v299 = @"N";
              v298 = v321;
            }

            NSLog( @"Going %@ from %@ to %@ for length %d using tileset %d, first map has water: %d, second map has water: %d",  v296,  v299,  v298,  v23,  v336,  v315,  HIDWORD(v325),  v325);
            v278 = v344;
          }

          v301 = v278;
          if (v278)
          {
            v302 = objc_msgSend(p_cache + 243, "transitionWithTransitionID:", @"Dissolve", v296);
            [v302 setDuration:*((double *)v274 + 16)];
            objc_msgSend(objc_msgSend(v278, "parentContainer"), "setTransition:", v302);
          }

          v303 = +[MPEffectContainer effectContainer](&OBJC_CLASS___MPEffectContainer, "effectContainer", v296);
          v304 = +[MPEffect effectWithEffectID:](&OBJC_CLASS___MPEffect, "effectWithEffectID:", @"PlacesZoom");
          -[MPEffect setEffectAttribute:forKey:]( v304,  "setEffectAttribute:forKey:",  +[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", v336),  @"zoomKind");
          -[MPEffect setEffectAttribute:forKey:]( v304,  "setEffectAttribute:forKey:",  +[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", v270),  @"direction");
          -[MPEffect setEffectAttribute:forKey:]( v304,  "setEffectAttribute:forKey:",  +[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", v315),  @"tileSet");
          [v303 addEffect:v304];
          [v303 setDuration:v297];
          v305 = [p_cache + 243 transitionWithTransitionID:@"Dissolve"];
          [v305 setDuration:0.2];
          [v303 setTransition:v305];
          [v337 addEffectContainer:v303];
          objc_msgSend( v269,  "setEffectAttribute:forKey:",  +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v325),  @"phaseInWater");
          objc_msgSend( v301,  "setEffectAttribute:forKey:",  +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", HIDWORD(v325)),  @"phaseOutWater");
          objc_msgSend( v269,  "setEffectAttribute:forKey:",  +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v322),  @"phaseInOnlyWater");
          objc_msgSend( v301,  "setEffectAttribute:forKey:",  +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", HIDWORD(v322)),  @"phaseOutOnlyWater");
          objc_msgSend( v269,  "setEffectAttribute:forKey:",  +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", 1),  @"skipPopIn");
          v286 = v345;
          [v345 duration];
          v290 = v297 + 0.8 + v306 + -0.4;
          v285 = 0.4;
          v273 = v343;
          goto LABEL_324;
        }

        v285 = 0.4;
        v286 = v345;
        if (v345 && v273 < (uint64_t)v323)
        {
          v287 = [v344 parentContainer];
          v288 = +[MPTransition transitionWithTransitionID:]( &OBJC_CLASS___MPTransition,  "transitionWithTransitionID:",  @"Dissolve");
          v285 = 0.4;
          -[MPTransition setDuration:](v288, "setDuration:", 0.4);
          objc_msgSend( v269,  "setEffectAttribute:forKey:",  +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", 1),  @"dissolveDuringPhaseIn");
          objc_msgSend( v344,  "setEffectAttribute:forKey:",  +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", 1),  @"dissolveDuringPhaseOut");
          [v287 setTransition:v288];
          [v345 duration];
          v290 = v289 + 0.4;
LABEL_324:
          [v286 setDuration:v290];
          v20 = v334;
          v300 = v355;
          v271 = v337;
          goto LABEL_325;
        }

        v20 = v334;
        v300 = v355;
LABEL_325:
        [v269 setPhaseInDuration:v279];
        [v344 setPhaseOutDuration:v285];
        v344 = objc_msgSend(objc_msgSend(objc_msgSend(v383, "lastObject"), "effects"), "lastObject");
        v14 = v271;
        [v271 addEffectContainers:v383];
        v22 = v273 + 1;

        delegate = self->_delegate;
        v25 = v342;
        v21 = v335;
        v24 = v349;
        if (delegate && (objc_opt_respondsToSelector(delegate, "authoringDocument:progress:shouldCancel:") & 1) != 0) {
          [self->_delegate authoringDocument:self->_authoredDocument progress:&self->_cancelAuthoring shouldCancel:(double)v22 / (double)(uint64_t)v323 * 0.8 + 0.1];
        }
        if (self->_cancelAuthoring) {
          goto LABEL_335;
        }
        v28 = v332 + 1;
        v29 = v20;
        v30 = v335;
        v31 = v23;
        v32 = v349;
        v331 = v341;
        v33 = v342;
      }

      while ((id)(v332 + 1) != v318);
      v308 = [obj countByEnumeratingWithState:&v445 objects:v460 count:16];
      v27 = v341;
      v318 = v308;
    }

    while (v308);
  }

LABEL_335:
  v309 = +[MPEffectContainer effectContainer](&OBJC_CLASS___MPEffectContainer, "effectContainer");
  objc_msgSend(v309, "setBackgroundCGColor:", +[MPUtilities blackCGColor](MPUtilities, "blackCGColor"));
  [v309 setDuration:1.0];
  v310 = +[MPTransition transitionWithTransitionID:]( &OBJC_CLASS___MPTransition,  "transitionWithTransitionID:",  @"Dissolve");
  -[MPTransition setDuration:](v310, "setDuration:", 0.5);
  objc_msgSend(objc_msgSend(objc_msgSend(v360, "effectContainers"), "lastObject"), "setTransition:", v310);
  [v360 addEffectContainer:v309];
  v311 = +[MPTransition transitionWithTransitionID:]( &OBJC_CLASS___MPTransition,  "transitionWithTransitionID:",  @"Dissolve");
  -[MPTransition setDuration:](v311, "setDuration:", 0.5);
  [v309 setTransition:v311];
  if (v314 && !self->_cancelAuthoring) {
    -[MPEffect setEffectAttribute:forKey:](v314, "setEffectAttribute:forKey:", v320, @"locations");
  }
  return +[NSArray arrayWithObjects:](&OBJC_CLASS___NSArray, "arrayWithObjects:", v14, v360, 0LL);
}

LABEL_25:
        ;
      }

      float v5 = [v3 countByEnumeratingWithState:&v35 objects:v41 count:16];
    }

    while (v5);
  }

  v23 = self->mPlug;
  if (!(_DWORD)v3) {
    goto LABEL_28;
  }
  v24 = -[MCPlug animationPathForKey:]( v23,  "animationPathForKey:",  objc_msgSend(@"zPosition", "stringByAppendingFormat:", @":%d", v3));
  if (!v24)
  {
    v23 = self->mPlug;
LABEL_28:
    v24 = -[MCPlug animationPathForKey:](v23, "animationPathForKey:", @"zPosition");
    if (!v24) {
      goto LABEL_33;
    }
  }

  if (([v24 isTriggered] & 1) == 0)
  {
    v26 = objc_opt_class(&OBJC_CLASS___MCAnimationPathPhysics, v25);
    if ((objc_opt_isKindOfClass(v24, v26) & 1) != 0)
    {
      v27 =  -[MRAnimationPathPhysics initWithMCAnimationPath:]( objc_alloc(&OBJC_CLASS___MRAnimationPathPhysics),  "initWithMCAnimationPath:",  v24);
      -[MCPlugParallel zPosition](self->mPlug, "zPosition");
      *(float *)&v28 = v28;
      -[MRAnimationPathPhysics setBaseValue:](v27, "setBaseValue:", v28);
    }

    else
    {
      v29 = objc_alloc(&OBJC_CLASS___MRAnimationPathScalar);
      -[MCPlugParallel zPosition](self->mPlug, "zPosition");
      self->mAnimationPathZ = -[MRAnimationPathScalar initWithMCAnimationPath:andValue:]( v29,  "initWithMCAnimationPath:andValue:",  v24);
    }
  }

    operator delete[](v11);
    return (uint64_t)v13;
  }

  if (v12) {
    operator delete[](v12);
  }
  v13 = 0LL;
  float v6 = 0LL;
  if (v11) {
    goto LABEL_25;
  }
  return v6;
}

    operator delete[](v11);
    return (uint64_t)v13;
  }

  if (v12) {
    operator delete[](v12);
  }
  v13 = 0LL;
  float v6 = 0LL;
  if (v11) {
    goto LABEL_25;
  }
  return v6;
}

    operator delete[](v11);
    return (uint64_t)v13;
  }

  if (v12) {
    operator delete[](v12);
  }
  v13 = 0LL;
  float v6 = 0LL;
  if (v11) {
    goto LABEL_25;
  }
  return v6;
}

    operator delete[](v11);
    return (uint64_t)v13;
  }

  if (v12) {
    operator delete[](v12);
  }
  v13 = 0LL;
  float v6 = 0LL;
  if (v11) {
    goto LABEL_25;
  }
  return v6;
}

    operator delete[](v11);
    return (uint64_t)v13;
  }

  if (v12) {
    operator delete[](v12);
  }
  v13 = 0LL;
  float v6 = 0LL;
  if (v11) {
    goto LABEL_25;
  }
  return v6;
}

    operator delete[](v11);
    return (uint64_t)v13;
  }

  if (v12) {
    operator delete[](v12);
  }
  v13 = 0LL;
  float v6 = 0LL;
  if (v11) {
    goto LABEL_25;
  }
  return v6;
}

    operator delete[](v11);
    return (uint64_t)v13;
  }

  if (v12) {
    operator delete[](v12);
  }
  v13 = 0LL;
  float v6 = 0LL;
  if (v11) {
    goto LABEL_25;
  }
  return v6;
}

    operator delete[](v11);
    return (uint64_t)v13;
  }

  if (v12) {
    operator delete[](v12);
  }
  v13 = 0LL;
  float v6 = 0LL;
  if (v11) {
    goto LABEL_25;
  }
  return v6;
}

    operator delete[](v11);
    return (uint64_t)v13;
  }

  if (v12) {
    operator delete[](v12);
  }
  v13 = 0LL;
  float v6 = 0LL;
  if (v11) {
    goto LABEL_25;
  }
  return v6;
}

    operator delete[](v11);
    return (uint64_t)v13;
  }

  if (v12) {
    operator delete[](v12);
  }
  v13 = 0LL;
  float v6 = 0LL;
  if (v11) {
    goto LABEL_25;
  }
  return v6;
}

    operator delete[](v11);
    return (uint64_t)v13;
  }

  if (v12) {
    operator delete[](v12);
  }
  v13 = 0LL;
  float v6 = 0LL;
  if (v11) {
    goto LABEL_25;
  }
  return v6;
}

    operator delete[](v11);
    return (uint64_t)v13;
  }

  if (v12) {
    operator delete[](v12);
  }
  v13 = 0LL;
  float v6 = 0LL;
  if (v11) {
    goto LABEL_25;
  }
  return v6;
}

    operator delete[](v11);
    return (uint64_t)v13;
  }

  if (v12) {
    operator delete[](v12);
  }
  v13 = 0LL;
  float v6 = 0LL;
  if (v11) {
    goto LABEL_25;
  }
  return v6;
}

    operator delete[](v11);
    return (uint64_t)v13;
  }

  if (v12) {
    operator delete[](v12);
  }
  v13 = 0LL;
  float v6 = 0LL;
  if (v11) {
    goto LABEL_25;
  }
  return v6;
}

    operator delete[](v11);
    return (uint64_t)v13;
  }

  if (v12) {
    operator delete[](v12);
  }
  v13 = 0LL;
  float v6 = 0LL;
  if (v11) {
    goto LABEL_25;
  }
  return v6;
}

    operator delete[](v11);
    return (uint64_t)v13;
  }

  if (v12) {
    operator delete[](v12);
  }
  v13 = 0LL;
  float v6 = 0LL;
  if (v11) {
    goto LABEL_25;
  }
  return v6;
}

void sub_15CE4(_Unwind_Exception *a1)
{
}

LABEL_16:
  if ([a3 isEqualToString:@"timeStamp"]) {
LABEL_19:
  }
    -[MRLayer stampTime](self, "stampTime");
}

  v25 = 2.0 - v23 * 2.0;
  v26 = objc_msgSend( -[NSDictionary objectForKey:]( -[MRLayerEffect slideProvidersForElementIDs](self->super.mEffectLayer, "slideProvidersForElementIDs"),  "objectForKey:",  @"image0"),  "retainedByUserRenderedImageAtTime:inContext:withArguments:",  a4,  a5,  a3);
  v27 = v26;
  v28 = 0;
  v59 = v23 + v25;
  v29 = v23 * 0.5 + v25 * 0.5;
  if (v17 <= a3) {
    v30 = v17;
  }
  else {
    v30 = a3;
  }
  v31 = 0.65;
  v56 = v16;
  v57 = v26;
  do
  {
    v32 = [v27 retainedByUserImage];
    v33 = 0.0;
    if (v28)
    {
      -[MREffect pixelSize](self, "pixelSize", 0.0);
      v35 = v34;
      [v32 height];
      v33 = v59 * (v35 / v36);
    }

    if (v17 > a3) {
      v37 = 1;
    }
    else {
      v37 = v16;
    }
    if (v16) {
      v38 = v30;
    }
    else {
      v38 = a3;
    }
    if ((v37 & 1) == 0)
    {
      mMainDuration = self->super.mMainDuration;
      v40 = mMainDuration + *(double *)((char *)&self->super.super.isa + v11);
      if (mMainDuration > a3 || v40 <= a3)
      {
        if (v40 <= a3) {
          v38 = *(double *)((char *)&self->super.super.isa + v11);
        }
        else {
          v38 = v17;
        }
      }

      else
      {
        v38 = a3 - mMainDuration;
      }
    }

    v31 = v31 - v33;
    [v32 setCenterY:v31 + 0.2 / v17 * v38];
    if (v28) {
      v42 = -v29;
    }
    else {
      v42 = v29;
    }
    if (v21) {
      v43 = 0.0;
    }
    else {
      v43 = v42;
    }
    if ((v14 & 1) != 0 || (v42 = *(double *)((char *)&self->super.super.isa + v11), v42 <= a3))
    {
      objc_msgSend(a4, "blend:", 3, v42);
      LODWORD(v52) = 0;
      objc_msgSend( *(id *)(&self->super._isInInteractiveMode + 1),  "renderImage:inContext:atPosition:andSize:zRotation:",  v32,  a4,  0.0,  v43,  2.0,  v23,  v52);
      [a4 blend:0];
      goto LABEL_55;
    }

    v44 = v24;
    v45 = v14;
    v46 = v11;
    v47 = [*(id *)((char *)&self->mSprite + 1) retainedByUserRenderedImageAtTime:a4 inContext:a5 withArguments:a3];
    v48 = [v47 retainedByUserImage];
    v49 = v47;
    v11 = v46;
    [v49 releaseByUser];
    [v48 setClampMode:2];
    v50 = *(double *)((char *)&self->super.super.isa + v46);
    if (v21)
    {
      v51 = a3 / v50 * -3.5 + 2.5;
    }

    else
    {
      v53 = v50 * 0.5;
      if (v28)
      {
        v51 = 2.5;
        v14 = v45;
        v24 = v44;
        uint64_t v16 = v56;
        if (v53 <= a3) {
          v51 = (a3 - v53) / v53 * -3.5 + 2.5;
        }
        goto LABEL_54;
      }

      v51 = a3 / v53 * -3.5 + 2.5;
      if (v53 <= a3) {
        v51 = -1.5;
      }
    }

    v14 = v45;
    v24 = v44;
    uint64_t v16 = v56;
LABEL_54:
    [v48 setCenterX:v51];
    [a4 blend:3];
    LODWORD(v54) = 0;
    objc_msgSend( *(id *)(&self->super._isInInteractiveMode + 1),  "fakeRenderInContext:atPosition:andSize:zRotation:",  a4,  0.0,  v43,  2.0,  v23,  v54);
    LODWORD(v55) = 0;
    -[MREffectModern renderImage:withMask:inContext:atPosition:andSize:zRotation:]( self,  "renderImage:withMask:inContext:atPosition:andSize:zRotation:",  v32,  v48,  a4,  0.0,  v43,  2.0,  v23,  v55);
    [a4 blend:0];
    [v48 releaseByUser];
    v27 = v57;
LABEL_55:
    [v32 releaseByUser];
    ++v28;
  }

  while ((_DWORD)v24 != v28);
  [v27 releaseByUser];
}

      if (a6) {
        *a6 = 0.829999983;
      }
      return 1;
    }
  }

  return result;
}

    [a4 blend:2];
    [a4 setShader:@"PlainTexture"];
    LODWORD(v39) = 1.0;
    [a4 setImage:v13 onTextureUnit:0 withReferenceAspectRatio:v49 state:v39];
    [a4 setVertex2DPointer:v14];
    [a4 setTextureCoordinatesPointer:v16 onTextureUnit:0];
    [a4 drawTriangleStripFromOffset:0 count:v26];
    [a4 unsetTextureCoordinatesPointerOnTextureUnit:0];
    [a4 unsetVertexPointer];
    [a4 unsetImage:v13 onTextureUnit:0 state:v49];
    [a4 unsetShader];
    [a4 blend:0];
    [v13 releaseByUser];
  }

  if ((*(__int16 *)(&self->super._isInInteractiveMode + 1) & 0x80000000) == 0)
  {
    v40 = objc_msgSend( -[NSDictionary objectForKey:]( -[MRLayerEffect slideProvidersForElementIDs](self->super.mEffectLayer, "slideProvidersForElementIDs"),  "objectForKey:",  @"image1"),  "retainedByUserRenderedImageAtTime:inContext:withArguments:",  a4,  a5,  a3);
    if (v40)
    {
      v41 = v40;
      [v40 setPreservesAspectRatio:0];
      v42 = *(__int16 *)(&self->super._isInInteractiveMode + 1);
      v43 = ((double)v42 + (double)v42) * v10 + -1.0;
      *(float *)v49 = v43;
      *(float *)&v49[1] = -v11;
      *(float *)&v49[2] = v43;
      *(float *)&v49[3] = v11;
      v44 = ((double)(v42 + 1) + (double)(v42 + 1)) * v10 + -1.0;
      *(float *)&v49[4] = v44;
      *(float *)&v49[5] = -v11;
      *(float *)&v49[6] = v44;
      *(float *)&v49[7] = v11;
      v48[0] = xmmword_1FA170;
      v48[1] = xmmword_1FA180;
      [a4 blend:2];
      [a4 setShader:@"PlainTexture"];
      LODWORD(v45) = 1.0;
      [a4 setImage:v41 onTextureUnit:0 withReferenceAspectRatio:&v47 state:v45];
      [a4 setVertex2DPointer:v49];
      [a4 setTextureCoordinatesPointer:v48 onTextureUnit:0];
      [a4 drawTriangleStripFromOffset:0 count:4];
      [a4 unsetTextureCoordinatesPointerOnTextureUnit:0];
      [a4 unsetVertexPointer];
      [a4 unsetImage:v41 onTextureUnit:0 state:&v47];
      [a4 unsetShader];
      [a4 blend:0];
      [v41 releaseByUser];
    }
  }

        v9 = (char *)v9 + 1;
      }

      while (v9 != v5);
      v29 = [a1 countByEnumeratingWithState:&v43 objects:v47 count:16];
      float v5 = v29;
    }

    while (v29);
  }

  v30 = [v3 count];
  if (v30)
  {
    v31 = (unint64_t)v30;
    v32 = 0LL;
    v33 = 0;
    v34 = 0.0;
    v35 = -1.0;
    do
    {
      objc_msgSend(objc_msgSend(v3, "objectAtIndex:", v32), "doubleValue");
      v37 = v36;
      objc_msgSend(objc_msgSend(v3, "objectAtIndex:", v33 + 1), "doubleValue");
      v39 = v38;
      if (vabdd_f64(v37, v35) < 0.00001)
      {
        objc_msgSend( v3,  "removeObjectsAtIndexes:",  +[NSIndexSet indexSetWithIndexesInRange:]( NSIndexSet,  "indexSetWithIndexesInRange:",  v33 - 1,  2));
        v33 -= 2;
        v31 -= 2LL;
      }

      v34 = v34 + v39 - v37;
      v33 += 2;
      v32 = v33;
      v35 = v39;
    }

    while (v31 > v33);
  }

  else
  {
    v34 = 0.0;
  }

  if (a2) {
    *a2 = v34;
  }
  return v3;
}

        v24 = [v12 lastObject];
      }

      else
      {
        v24 = [v12 objectAtIndex:0];
      }

      v25 = v24;
      v26 = 0LL;
      goto LABEL_19;
    }
  }

  return a5;
}

      CFRelease(Frame);
      CFRelease(Mutable);
      CFRelease(v14);
      v26 = v8 * x;
      x = roundf(v26);
      v27 = v8 * y;
      y = ceilf(v27);
    }

    else
    {
      if (Frame) {
        CFRelease(Frame);
      }
      CFRelease(Mutable);
      CFRelease(v14);
    }
  }

  else
  {
    x = 10000000.0;
    y = 10000000.0;
  }

  v28 = x;
  v29 = y;
  result.y = v29;
  result.x = v28;
  return result;
}

LABEL_35:
  LODWORD(v28) = v23;
  [a4 setLocalAspectRatio:v28];
  [a4 restoreForeColor:&v47];
  [a4 restoreModelViewMatrix:v68];
  if (+[EAGLContext currentContext](&OBJC_CLASS___EAGLContext, "currentContext") != v13) {
    +[EAGLContext setCurrentContext:](&OBJC_CLASS___EAGLContext, "setCurrentContext:", v13);
  }
}

  if (![v23 operationCount]
    || -[MRLayerEffect asynchronousOperationsAreSuspended]( self->super.mEffectLayer,  "asynchronousOperationsAreSuspended"))
  {
    v10 = 0LL;
    if (!-[MRLayerEffect asynchronousOperationsAreSuspended]( self->super.mEffectLayer,  "asynchronousOperationsAreSuspended")) {
      return v10;
    }
    goto LABEL_72;
  }

  v188 = 0u;
  v189 = 0u;
  v186 = 0u;
  v187 = 0u;
  v31 = -[NSDictionary objectEnumerator]( -[MRLayerEffect slideProvidersForElementIDs](self->super.mEffectLayer, "slideProvidersForElementIDs"),  "objectEnumerator");
  v32 = -[NSEnumerator countByEnumeratingWithState:objects:count:]( v31,  "countByEnumeratingWithState:objects:count:",  &v186,  v203,  16LL);
  if (v32)
  {
    v33 = v32;
    v34 = *(void *)v187;
LABEL_54:
    v35 = 0LL;
    while (1)
    {
      if (*(void *)v187 != v34) {
        objc_enumerationMutation(v31);
      }
      v36 = *(void **)(*((void *)&v186 + 1) + 8 * v35);
      if ([v36 canPlay])
      {
      }

      if (v33 == (id)++v35)
      {
        v33 = -[NSEnumerator countByEnumeratingWithState:objects:count:]( v31,  "countByEnumeratingWithState:objects:count:",  &v186,  v203,  16LL);
        if (v33) {
          goto LABEL_54;
        }
        goto LABEL_61;
      }
    }
  }

  else
  {
LABEL_61:
    -[MRLayerEffect _stallRenderer](self->super.mEffectLayer, "_stallRenderer");
  }

  v10 = 0LL;
  if (-[MRLayerEffect asynchronousOperationsAreSuspended]( self->super.mEffectLayer,  "asynchronousOperationsAreSuspended"))
  {
LABEL_72:
    -[MRLayerEffect suspendAsynchronousOperations:](self->super.mEffectLayer, "suspendAsynchronousOperations:", v10);
  }

  return v10;
}

  v46 = v80;
  if ([v41 count])
  {
    if ([v23 count])
    {
      if (+[MPAuthoringUtilities useTitleEffectFromOptions:]( &OBJC_CLASS___MPAuthoringUtilities,  "useTitleEffectFromOptions:",  a5))
      {
        v47 = objc_msgSend(-[MPDocument titleEffect](v80->_authoredDocument, "titleEffect"), "countOfSlides");
        if (!v23
          || (v48 = v47,
              !objc_msgSend( objc_msgSend(v23, "objectAtIndex:", 0),  "isEqualToString:",  objc_msgSend(objc_msgSend(v75, "orderedVideoPaths"), "objectAtIndex:", 0)))
          || !v48)
        {
          v49 = +[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", 0LL);
          -[NSMutableDictionary setObject:forKey:](v79, "setObject:forKey:", v49, kMPAuthoringUseTitleEffect);
        }
      }
    }

    v50 = v77;
    objc_msgSend( v73,  "removeEffectContainersAtIndices:",  +[NSIndexSet indexSetWithIndex:](NSIndexSet, "indexSetWithIndex:", v77));
    if ([v23 count])
    {
      v51 = -[MPAuthoringController effectContainersWithImages:effects:andOptions:]( v80,  "effectContainersWithImages:effects:andOptions:",  v23,  -[MPAuthoringController effectsForImages:withOptions:](v80, "effectsForImages:withOptions:", v23, v79),  v79);
      [v73 insertEffectContainers:v51 atIndex:v77];
      v50 = &v77[(void)[v51 count]];
    }

    v52 = [v76 path];
    v53 = -[NSMutableDictionary objectForKey:](v79, "objectForKey:", kMPAuthoringSubtitles);
    if (!v53 || (v54 = (const __CFString *)[v53 objectForKey:v52]) == 0) {
      v54 = @"Subtitle Text Here";
    }
    v55 = +[NSArray arrayWithObject:](&OBJC_CLASS___NSArray, "arrayWithObject:", v54);
    -[NSMutableDictionary setObject:forKey:](v79, "setObject:forKey:", v55, kMPAuthoringTitleStrings);
    v56 = -[MPAuthoringController effectContainersWithImages:effects:andOptions:]( v80,  "effectContainersWithImages:effects:andOptions:",  v29,  v41,  v79);
    v78 = v50;
    [v73 insertEffectContainers:v56 atIndex:v50];
    v87 = 0u;
    v88 = 0u;
    v85 = 0u;
    v86 = 0u;
    v57 = [v56 countByEnumeratingWithState:&v85 objects:v98 count:16];
    if (v57)
    {
      v58 = v57;
      v59 = 0LL;
      v60 = *(void *)v86;
      do
      {
        for (k = 0LL; k != v58; k = (char *)k + 1)
        {
          if (*(void *)v86 != v60) {
            objc_enumerationMutation(v56);
          }
          v62 = *(void **)(*((void *)&v85 + 1) + 8LL * (void)k);
          v81 = 0u;
          v82 = 0u;
          v83 = 0u;
          v84 = 0u;
          v63 = [v62 effects];
          v64 = [v63 countByEnumeratingWithState:&v81 objects:v97 count:16];
          if (v64)
          {
            v65 = v64;
            v66 = *(void *)v82;
            do
            {
              for (m = 0LL; m != v65; m = (char *)m + 1)
              {
                if (*(void *)v82 != v66) {
                  objc_enumerationMutation(v63);
                }
                v59 += (uint64_t)[*(id *)(*((void *)&v81 + 1) + 8 * (void)m) countOfSlides];
              }

              v65 = [v63 countByEnumeratingWithState:&v81 objects:v97 count:16];
            }

            while (v65);
          }
        }

        v58 = [v56 countByEnumeratingWithState:&v85 objects:v98 count:16];
      }

      while (v58);
    }

    else
    {
      v59 = 0LL;
    }

    objc_msgSend( v29,  "removeObjectsAtIndexes:",  +[NSIndexSet indexSetWithIndexesInRange:](NSIndexSet, "indexSetWithIndexesInRange:", 0, v59));
    v68 = [v56 count];
    v46 = v80;
    if ([v29 count])
    {
      v69 = +[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", 0LL);
      -[NSMutableDictionary setObject:forKey:](v79, "setObject:forKey:", v69, kMPAuthoringUseTitleEffect);
      objc_msgSend( v73,  "insertEffectContainers:atIndex:",  -[MPAuthoringController effectContainersWithImages:effects:andOptions:]( v80,  "effectContainersWithImages:effects:andOptions:",  v29,  -[MPAuthoringController effectsForImages:withOptions:](v80, "effectsForImages:withOptions:", v29, v79),  v79),  &v78[(void)v68]);
    }
  }

  objc_msgSend( +[MPUtilities slideForPath:inDocument:](MPUtilities, "slideForPath:inDocument:", v72, v75),  "setUserInfoAttribute:forKey:",  +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", 1),  @"hasSubtitle");

  v70 = v74;
  if (!v46->_isAuthoring && !v46->_skipApplyingSettings)
  {
    -[MPAuthoringController cleanup](v46, "cleanup");
    if (!v74) {
      v70 = +[NSDictionary dictionaryWithDictionary:]( NSDictionary,  "dictionaryWithDictionary:",  objc_msgSend(objc_msgSend(v75, "documentLayerGroup"), "authoringOptions"));
    }
    -[MPAuthoringController reconfigureColorSchemeInDocument:withOptions:]( v46,  "reconfigureColorSchemeInDocument:withOptions:",  v75,  v70);
    -[MPAuthoringController configureFiltersInDocument:withOptions:]( v46,  "configureFiltersInDocument:withOptions:",  v75,  v70);
    -[MPAuthoringController configureTransitionsInDocument:withOptions:]( v46,  "configureTransitionsInDocument:withOptions:",  v75,  v70);
    -[MPAuthoringController scaleDurationsInDocument:withOptions:]( v46,  "scaleDurationsInDocument:withOptions:",  v75,  v70);
    objc_msgSend( +[MPCropController sharedController](MPCropController, "sharedController"),  "cropSlidesInDocument:withOptions:",  v75,  v70);
  }

      (*(void (**)(uint64_t, uint64_t, unsigned __int8 *, unsigned __int8 *))(*(void *)a1 + 272LL))( a1,  23LL,  &a3[-*a2],  &a3[-*a2]);
      return 1LL;
    }

    (*(void (**)(uint64_t, uint64_t, unsigned __int8 *, unsigned __int8 *))(*(void *)a1 + 272LL))( a1,  23LL,  &a3[-*a2],  &a3[-*a2]);
    return 0LL;
  }

  v19 = *v6;
  result = 1LL;
  if (v19 > 93)
  {
    if (v19 > 123)
    {
      if (v19 != 124 && v19 != 126) {
        return 0LL;
      }
      return result;
    }

    if (v19 == 94) {
      return result;
    }
    if (v19 != 101) {
      return 0LL;
    }
  }

  else
  {
    v21 = (v19 - 9);
    if (((1LL << v21) & 0x380056B1800013LL) != 0) {
      return result;
    }
    if (v21 != 60) {
      return 0LL;
    }
  }

  v23 = v6 - 1;
  do
  {
    v24 = v23;
    v25 = *v23;
    if (v25 < 0)
    {
      v26 = __maskrune(v25, 0x4000uLL);
      v10 = a2[1];
    }

    else
    {
      v26 = _DefaultRuneLocale.__runetype[v25] & 0x4000;
    }

    v23 = v24 - 1;
    if (v26) {
      v27 = (unint64_t)v24 >= v10;
    }
    else {
      v27 = 0;
    }
  }

  while (v27);
  if ((unint64_t)v24 >= v10)
  {
    for (i = v24; (unint64_t)i >= a2[1]; --i)
    {
      v29 = *i;
      v30 = v29 < 0 ? __maskrune(v29, 0x500uLL) : _DefaultRuneLocale.__runetype[v29] & 0x500;
      v31 = *i;
      if (!v30 && !memchr("._[]", *i, 5uLL)) {
        break;
      }
    }
  }

  v32 = a3;
  do
  {
    v34 = (char)*++v32;
    v33 = v34;
    if (v34 < 0) {
      v35 = __maskrune(v33, 0x4000uLL);
    }
    else {
      v35 = _DefaultRuneLocale.__runetype[v33] & 0x4000;
    }
    if (v35) {
      v36 = (unint64_t)v32 > a2[2];
    }
    else {
      v36 = 1;
    }
  }

  while (!v36);
  v37 = (char)*v32;
  if (v37 < 0) {
    v38 = __maskrune(v37, 0x500uLL);
  }
  else {
    v38 = _DefaultRuneLocale.__runetype[v37] & 0x500;
  }
  if (!v38 && *v32 != 46 || (unint64_t)v32 > a2[2]) {
    (*(void (**)(uint64_t, uint64_t, unsigned __int8 *, unsigned __int8 *))(*(void *)a1 + 272LL))( a1,  23LL,  &a3[-*a2],  &a3[-*a2]);
  }
  return 2LL;
}

    v9 = (uint64_t)v14;
    goto LABEL_36;
  }

  v17 = (void *)(*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 24) + 8LL))(*(void *)(a1 + 24), a3);
  v18 = v17;
  if (v14) {
    v19 = v17 == 0LL;
  }
  else {
    v19 = 1;
  }
  if (!v19)
  {
    if ((int)a3 >= 1)
    {
      v20 = (float *)v6;
      v21 = v17;
      v22 = v14;
      v23 = a3;
      do
      {
        if (*v20 != 0.0) {
          *v22 = *v21;
        }
        ++v22;
        ++v21;
        ++v20;
        --v23;
      }

      while (v23);
    }

    operator delete[](v17);
    goto LABEL_35;
  }

  operator delete[](v6);
  if (v18) {
    operator delete[](v18);
  }
  v9 = 0LL;
  float v6 = (char *)v14;
  if (v14) {
    goto LABEL_36;
  }
  return v9;
}

      (*(void (**)(uint64_t, uint64_t, unsigned __int8 *, unsigned __int8 *))(*(void *)a1 + 272LL))( a1,  23LL,  &a3[-*a2],  &a3[-*a2]);
      return 1LL;
    }

    (*(void (**)(uint64_t, uint64_t, unsigned __int8 *, unsigned __int8 *))(*(void *)a1 + 272LL))( a1,  23LL,  &a3[-*a2],  &a3[-*a2]);
    return 0LL;
  }

  v19 = *v6;
  result = 1LL;
  if (v19 > 93)
  {
    if (v19 > 123)
    {
      if (v19 != 124 && v19 != 126) {
        return 0LL;
      }
      return result;
    }

    if (v19 == 94) {
      return result;
    }
    if (v19 != 101) {
      return 0LL;
    }
  }

  else
  {
    v21 = (v19 - 9);
    if (((1LL << v21) & 0x380056B1800013LL) != 0) {
      return result;
    }
    if (v21 != 60) {
      return 0LL;
    }
  }

  v23 = v6 - 1;
  do
  {
    v24 = v23;
    v25 = *v23;
    if (v25 < 0)
    {
      v26 = __maskrune(v25, 0x4000uLL);
      v10 = a2[1];
    }

    else
    {
      v26 = _DefaultRuneLocale.__runetype[v25] & 0x4000;
    }

    v23 = v24 - 1;
    if (v26) {
      v27 = (unint64_t)v24 >= v10;
    }
    else {
      v27 = 0;
    }
  }

  while (v27);
  if ((unint64_t)v24 >= v10)
  {
    for (i = v24; (unint64_t)i >= a2[1]; --i)
    {
      v29 = *i;
      v30 = v29 < 0 ? __maskrune(v29, 0x500uLL) : _DefaultRuneLocale.__runetype[v29] & 0x500;
      v31 = *i;
      if (!v30 && !memchr("._[]", *i, 5uLL)) {
        break;
      }
    }
  }

  v32 = a3;
  do
  {
    v34 = (char)*++v32;
    v33 = v34;
    if (v34 < 0) {
      v35 = __maskrune(v33, 0x4000uLL);
    }
    else {
      v35 = _DefaultRuneLocale.__runetype[v33] & 0x4000;
    }
    if (v35) {
      v36 = (unint64_t)v32 > a2[2];
    }
    else {
      v36 = 1;
    }
  }

  while (!v36);
  v37 = (char)*v32;
  if (v37 < 0) {
    v38 = __maskrune(v37, 0x500uLL);
  }
  else {
    v38 = _DefaultRuneLocale.__runetype[v37] & 0x500;
  }
  if (!v38 && *v32 != 46 || (unint64_t)v32 > a2[2]) {
    (*(void (**)(uint64_t, uint64_t, unsigned __int8 *, unsigned __int8 *))(*(void *)a1 + 272LL))( a1,  23LL,  &a3[-*a2],  &a3[-*a2]);
  }
  return 2LL;
}

    v9 = (uint64_t)v14;
    goto LABEL_36;
  }

  v17 = (void *)(*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 24) + 8LL))(*(void *)(a1 + 24), a3);
  v18 = v17;
  if (v14) {
    v19 = v17 == 0LL;
  }
  else {
    v19 = 1;
  }
  if (!v19)
  {
    if ((int)a3 >= 1)
    {
      v20 = (double *)v6;
      v21 = v17;
      v22 = v14;
      v23 = a3;
      do
      {
        if (*v20 != 0.0) {
          *v22 = *v21;
        }
        ++v22;
        ++v21;
        ++v20;
        --v23;
      }

      while (v23);
    }

    operator delete[](v17);
    goto LABEL_35;
  }

  operator delete[](v6);
  if (v18) {
    operator delete[](v18);
  }
  v9 = 0LL;
  float v6 = (char *)v14;
  if (v14) {
    goto LABEL_36;
  }
  return v9;
}

    mGeometry = v13;
  }

LABEL_19:
            -[MZMediaManagement stopTimeForAssetAtPath:]( -[MRRenderer assetManagementDelegate](self->mRenderer, "assetManagementDelegate"),  "stopTimeForAssetAtPath:",  v14);
            v23 = v22;
            -[MZMediaManagement startTimeForAssetAtPath:]( -[MRRenderer assetManagementDelegate](self->mRenderer, "assetManagementDelegate"),  "startTimeForAssetAtPath:",  v14);
            v11 = v11 + v23 - v24;
            v12 = (char *)v12 + 1;
          }

          while (v9 != v12);
          v9 = -[NSArray countByEnumeratingWithState:objects:count:]( v7,  "countByEnumeratingWithState:objects:count:",  &v28,  v32,  16LL);
        }

        while (v9);
      }

      self->mAudioPlayer = -[MRAudioPlayer initWithAudioItems:andAudioPlaylist:]( objc_alloc(&OBJC_CLASS___MRAudioPlayer),  "initWithAudioItems:andAudioPlaylist:",  v6,  v27);

      for (i = self; ; i = v26)
      {
        v26 = -[MRLayer superlayer](i, "superlayer");
        if (!-[MRLayer superlayer](-[MRLayer superlayer](v26, "superlayer"), "superlayer")) {
          break;
        }
      }

      if (-[MRLayer plugAsParallel](v26, "plugAsParallel")) {
        -[MRAudioPlayer setPriority:]( self->mAudioPlayer,  "setPriority:",  -[MCPlugParallel audioPriority](-[MRLayer plugAsParallel](v26, "plugAsParallel"), "audioPriority"));
      }
      -[MCPlug fullDuration](self->mPlug, "fullDuration");
      -[MRAudioPlayer setParentDuration:](self->mAudioPlayer, "setParentDuration:");
    }
  }

              v25 = 1;
              if ((v15 & 1) != 0) {
                goto LABEL_23;
              }
LABEL_20:
              v26 = v25 & ([v19 hasMovies] ^ 1);
LABEL_24:
              if ((v42 & v26) == 1
                && (objc_msgSend( +[MPEffectManager sharedManager](MPEffectManager, "sharedManager"),  "skipPanoramaScaleForEffectID:",  objc_msgSend(v19, "effectID")) & 1) == 0)
              {
              }

              else if (!v26)
              {
                goto LABEL_34;
              }

              objc_msgSend(v41, "minimumEffectDurationForEffectID:", objc_msgSend(v19, "effectID"));
              if (v27 >= v17) {
                v17 = v27;
              }
              v15 = 1;
            }

            v14 = [v40 countByEnumeratingWithState:&v47 objects:v56 count:16];
            if (!v14)
            {
              [v38 outroTransitionDuration];
              v29 = v17 + v28;
              goto LABEL_35;
            }
          }
        }

void sub_19770(_Unwind_Exception *a1)
{
}

void sub_19F54(_Unwind_Exception *exception_object)
{
}

void sub_1A184(_Unwind_Exception *a1)
{
}

void sub_1A1E8(_Unwind_Exception *a1)
{
}

void sub_1A258(_Unwind_Exception *a1)
{
}

void sub_1A3AC(_Unwind_Exception *a1)
{
}

void sub_1A46C(_Unwind_Exception *a1)
{
}

void sub_1A588(_Unwind_Exception *a1)
{
}

void sub_1A744(_Unwind_Exception *a1)
{
}

void sub_1A7FC(_Unwind_Exception *a1)
{
}

void sub_1CE90(_Unwind_Exception *a1)
{
}

void sub_1CF50(_Unwind_Exception *a1)
{
}

void sub_1D00C(_Unwind_Exception *a1)
{
}

void sub_1D084(_Unwind_Exception *a1)
{
}

void sub_1D114(_Unwind_Exception *a1)
{
}

void sub_1D1D4(_Unwind_Exception *a1)
{
}

void sub_1D838(_Unwind_Exception *exception_object)
{
}

void sub_1DBE4(_Unwind_Exception *a1)
{
}

void sub_1DC48(_Unwind_Exception *a1)
{
}

void sub_1DDB4(_Unwind_Exception *a1)
{
}

void sub_1E188( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id obj)
{
}

void sub_1E444( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
}

void sub_1E684(_Unwind_Exception *exception_object)
{
}

void sub_1E76C(_Unwind_Exception *a1)
{
}

id sortSlidesByUsage1(void *a1, void *a2, _BYTE *a3)
{
  if (a3) {
    BOOL v5 = *a3 != 0;
  }
  else {
    BOOL v5 = 1;
  }
  id v6 = [a1 overallUsageCounter];
  id v7 = [a2 overallUsageCounter];
  if ((uint64_t)v6 >= (uint64_t)v7)
  {
    BOOL v8 = !v5;
    uint64_t v9 = 1LL;
  }

  else
  {
    BOOL v8 = !v5;
    uint64_t v9 = -1LL;
  }

  if (v8) {
    return (id)-v9;
  }
  else {
    return (id)v9;
  }
}

void sub_1EAF0(_Unwind_Exception *a1)
{
}

void sub_1EB4C(_Unwind_Exception *a1)
{
}

LABEL_24:
    v17 = objc_msgSend( -[NSDictionary objectForKey:]( v8->super.mFlattenedAttributes,  "objectForKey:",  @"skipPanorama",  v10),  "BOOLValue");
    BYTE2(v8->mSprites) = v17;
    if (v17)
    {
      [v9 imageAspectRatio];
      if (v18 < 0.5 || v18 > 2.0)
      {
        [v9 imageAspectRatio];
        if (v20 >= 1.0) {
          v21 = @"layerWidth, layerHeight";
        }
        else {
          v21 = @"layerHeight * (2 / 3), layerHeight";
        }
        [v9 setImageSizeScript:v21];
      }
    }

    BYTE1(v8->mSprites) = 1;
  }

  v26.receiver = v8;
  v26.super_class = (Class)&OBJC_CLASS___MREffectShatter;
  -[MREffect prerenderForTime:inContext:withArguments:](&v26, "prerenderForTime:inContext:withArguments:", a4, a5, a3);
  return 1;
}

    id v6 = v29;
    BOOL v5 = v30;
  }

  [*(id *)((char *)&v5->super.isa + v6) unlock];
  return v7;
}

LABEL_66:
    v93 = v37;
    if (v14 >= 1.0) {
      goto LABEL_67;
    }
    goto LABEL_68;
  }

  if (v14 >= 1.0)
  {
    v93 = v87 - v38;
    v35 = 0.0;
LABEL_67:
    ValueFromBezierPath( (id *)((char *)&self->mXRotCurves[1] + 1),  (double *)((char *)&self->mXRotValues[2] + 1),  0.0,  2.0,  v35,  (uint64_t)&self->mPosXValues[2] + 1,  3LL);
    v36 = v59;
    goto LABEL_68;
  }

  v36 = v38 - (v26 * 0.5 + -1.0);
  v35 = 0.0;
  v93 = 0.0;
LABEL_68:
  v60 = v36;
  ValueFromBezierPath( (id *)&self->mSkipPanorama,  (double *)((char *)&self->mLayerZCurves[5][1] + 1),  0.0,  1.0,  v35,  (uint64_t)&self->mZKeyTimes[2] + 1,  3LL);
  v62 = v61;
  ValueFromBezierPath( (id *)((char *)&self->mZCurves[1] + 1),  (double *)((char *)&self->mZValues[2] + 1),  0.0,  1.0,  v35,  (uint64_t)&self->mXRotKeyTimes[2] + 1,  3LL);
  v64 = v63;
  MRMatrix_Clear((uint64_t)v98);
  v65 = v64;
  MRMatrix_SetRotationFromAnglesXYZRad((uint64_t)v98, v65, 0.0, 0.0);
  v66 = v62;
  *(float *)&v67 = MRMatrix_Translate(v98, 0.0, 0.0, v66);
  objc_msgSend(a4, "composeModelViewMatrix:saveTo:", v98, v97, v67);
  ValueFromBezierPath( (id *)((char *)&self->mPosCurves[1] + 1),  (double *)((char *)&self->mPosYValues[2] + 1),  0.0,  1.0,  v35,  (uint64_t)&self->mYRotKeyTimes[2] + 1,  3LL);
  v69 = v68;
  *(float *)&v70 = MRMatrix_SetRotationFromAnglesXYZRad((uint64_t)v98, 0.0, v69, 0.0);
  objc_msgSend(a4, "composeModelViewMatrix:saveTo:", v98, 0, v70);
  MRMatrix_Clear((uint64_t)v98);
  *(float *)&v64 = v93;
  [a4 localAspectRatio];
  v72 = v60 / v71;
  *(float *)&v73 = MRMatrix_Translate(v98, *(float *)&v64, v72, 0.0);
  objc_msgSend(a4, "composeModelViewMatrix:saveTo:", v98, 0, v73);
  if (v62 == 0.0)
  {
    [a4 setShader:@"PlainTexture"];
    -[MRCroppingSprite renderImage:inContext:atPosition:andSize:]( v12,  "renderImage:inContext:atPosition:andSize:",  v10,  a4,  CGPointZero.x,  y,  v94,  v26);
  }

  else
  {
    if (v14 >= 1.0) {
      v74 = 4LL;
    }
    else {
      v74 = 6LL;
    }
    objc_msgSend(a4, "setShader:", @"ShatterShader4", *(void *)&v87);
    v75 = (float)v74;
    *(float *)&v76 = 1.0 / (float)v74;
    [a4 setShaderUniformFloat:@"range" forKey:v76];
    *(float *)&v77 = (float)v74;
    [a4 setShaderUniformFloat:@"count" forKey:v77];
    v78 = 0LL;
    v79 = self;
    do
    {
      MRMatrix_Clear((uint64_t)v96);
      ValueFromBezierPath( (id *)((char *)&self->mYRotCurves[1] + 1),  (double *)((char *)&v79->mYRotValues[2] + 1),  0.0,  1.0,  v35,  (uint64_t)&v79->mLayerZKeyTimes[5][2] + 1,  3LL);
      v81 = v80;
      *(float *)&v82 = MRMatrix_Translate(v96, 0.0, 0.0, v81);
      objc_msgSend(a4, "composeModelViewMatrix:saveTo:", v96, v95, v82);
      *(float *)&v83 = (float)v78 / v75;
      [a4 setShaderUniformFloat:@"inMin" forKey:v83];
      v85 = v78 + 2;
      v86 = v78 + 1;
      if (v78 != v74 - 1) {
        v85 = v78 + 1;
      }
      *(float *)&v84 = (float)v85 / v75;
      [a4 setShaderUniformFloat:@"inMax" forKey:v84];
      +[MRCroppingSprite renderImage:inContext:atPosition:andSize:]( &OBJC_CLASS___MRCroppingSprite,  "renderImage:inContext:atPosition:andSize:",  v10,  a4,  CGPointZero.x,  y,  v94,  v26);
      [a4 restoreModelViewMatrix:v95];
      v79 = (MREffectShatter *)((char *)v79 + 24);
      self = (MREffectShatter *)((char *)self + 16);
      ++v78;
    }

    while (v86 != v74);
  }

  objc_msgSend(a4, "unsetShader", *(void *)&v87);
  [v10 releaseByUser];
  [a4 restoreModelViewMatrix:v97];
}

                ++v31;
              }

              while (v31 != 17);
              if (-[NSMutableArray count](v55, "count")) {
                -[NSMutableDictionary setObject:forKey:]( v57->mInternal->mGestureRecognizers,  "setObject:forKey:",  v55,  v53);
              }

LABEL_70:
              mTopMRLayer = -[MRLayer superlayer](v56, "superlayer");
              id v4 = v57;
            }

            while (mTopMRLayer && v58 != 1023);
LABEL_72:
            v10 = v50 + 1;
          }

          while ((id)(v50 + 1) != v49);
          v49 = [a3 countByEnumeratingWithState:&v65 objects:v70 count:16];
          id v4 = v57;
        }

        while (v49);
      }
    }
  }

      v41 |= (uint64_t)v50 > 0;
      v43 = (char *)v43 + 1;
    }

    while (v121 != v43);
    v62 = [a3 countByEnumeratingWithState:&v139 objects:v146 count:16];
    v42 += (uint64_t)v43;
    v121 = v62;
  }

  while (v62);
  v39 = v110;
  v40 = v113;
  if ((v41 & 1) != 0) {
    goto LABEL_99;
  }
LABEL_92:
  if (([v39 count]
     || [v40 count]
     || ![v111 count]
     || [v114 count]
     || [v117 count])
    && (![v39 count]
     || [v40 count]
     || [v111 count]
     || [v114 count]
     || [v117 count]))
  {
LABEL_99:
    if (self->_logLevel > 1)
    {
      -[NSMutableDictionary setObject:forKey:]( self->_stats,  "setObject:forKey:",  +[NSNumber numberWithInteger:]( NSNumber,  "numberWithInteger:",  (char *)objc_msgSend( -[NSMutableDictionary objectForKey:](self->_stats, "objectForKey:", @"numOfLandscapes"),  "integerValue")
        + (void)[v111 count]),
        @"numOfLandscapes");
      -[NSMutableDictionary setObject:forKey:]( self->_stats,  "setObject:forKey:",  +[NSNumber numberWithInteger:]( NSNumber,  "numberWithInteger:",  (char *)objc_msgSend( -[NSMutableDictionary objectForKey:](self->_stats, "objectForKey:", @"numOfPortraits"),  "integerValue")
        + (void)[v39 count]),
        @"numOfPortraits");
    }

    BOOL v8 = +[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array");
    v63 = (char *)[a3 count];
    if ((uint64_t)v63 >= 1)
    {
      v64 = v63;
      do
      {
        objc_msgSend( v8,  "addObject:",  +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", -1));
        --v64;
      }

      while (v64);
    }

    if (v105 >= 1)
    {
      v65 = (char *)[obj count];
      if ((uint64_t)v65 >= 1)
      {
        v66 = v65;
        for (j = 0LL; j != v66; ++j)
        {
          if (![v123 containsIndex:j] || (v68 = v117, !objc_msgSend(v117, "count")))
          {
            v68 = v114;
            if (![v114 count]) {
              continue;
            }
          }

          objc_msgSend( v8,  "replaceObjectAtIndex:withObject:",  j,  +[NSNumber numberWithInteger:]( NSNumber,  "numberWithInteger:",  objc_msgSend(objc_msgSend(v68, "objectAtIndex:", 0), "integerValue")));
          [v68 removeObjectAtIndex:0];
        }

        for (k = 0LL; k != v66; ++k)
        {
          if (((unint64_t)objc_msgSend(objc_msgSend(v8, "objectAtIndex:", k), "integerValue") & 0x8000000000000000) != 0)
          {
            if ([v116 containsIndex:k] && (v70 = v117, objc_msgSend(v117, "count"))
              || [v116 containsIndex:k] && (v70 = v114, objc_msgSend(v114, "count")))
            {
              objc_msgSend( v8,  "replaceObjectAtIndex:withObject:",  k,  +[NSNumber numberWithInteger:]( NSNumber,  "numberWithInteger:",  objc_msgSend(objc_msgSend(v70, "objectAtIndex:", 0), "integerValue")));
              [v70 removeObjectAtIndex:0];
            }
          }
        }
      }
    }

    v137 = 0u;
    v138 = 0u;
    v135 = 0u;
    v136 = 0u;
    v71 = [obj countByEnumeratingWithState:&v135 objects:v145 count:16];
    if (v71)
    {
      v72 = v71;
      v73 = 0LL;
      v74 = *(void *)v136;
      do
      {
        v75 = 0LL;
        do
        {
          if (*(void *)v136 != v74) {
            objc_enumerationMutation(obj);
          }
          v76 = *(void **)(*((void *)&v135 + 1) + 8LL * (void)v75);
          if (((unint64_t)objc_msgSend(objc_msgSend(v8, "objectAtIndex:", (char *)v75 + v73), "integerValue") & 0x8000000000000000) != 0)
          {
            [v76 floatValue];
            if (v77 >= 3.0 && [v113 count])
            {
              v78 = v113;
LABEL_143:
              objc_msgSend( v8,  "replaceObjectAtIndex:withObject:",  (char *)v75 + v73,  +[NSNumber numberWithInteger:]( NSNumber,  "numberWithInteger:",  objc_msgSend(objc_msgSend(v78, "objectAtIndex:", 0), "integerValue")));
              [v78 removeObjectAtIndex:0];
              goto LABEL_144;
            }

            [v76 floatValue];
            if (v79 < 1.075)
            {
              [v76 floatValue];
              if (v80 > 0.95) {
                goto LABEL_144;
              }
              if (self->_logLevel >= 2) {
                -[NSMutableDictionary setObject:forKey:]( self->_stats,  "setObject:forKey:",  +[NSNumber numberWithInteger:]( NSNumber,  "numberWithInteger:",  (char *)objc_msgSend( -[NSMutableDictionary objectForKey:]( self->_stats,  "objectForKey:",  @"numOfDZPortraits"),  "integerValue")
              }
                  + 1),
                  @"numOfDZPortraits");
              v78 = v110;
              if ([v110 count]) {
                goto LABEL_143;
              }
              if (![v111 count]) {
                goto LABEL_144;
              }
              if (self->_logLevel >= 2) {
                -[NSMutableDictionary setObject:forKey:]( self->_stats,  "setObject:forKey:",  +[NSNumber numberWithInteger:]( NSNumber,  "numberWithInteger:",  (char *)objc_msgSend( -[NSMutableDictionary objectForKey:]( self->_stats,  "objectForKey:",  @"misplacedLandscapes"),  "integerValue")
              }
                  + 1),
                  @"misplacedLandscapes");
              v81 = v111;
              goto LABEL_150;
            }

            if (self->_logLevel >= 2) {
              -[NSMutableDictionary setObject:forKey:]( self->_stats,  "setObject:forKey:",  +[NSNumber numberWithInteger:]( NSNumber,  "numberWithInteger:",  (char *)objc_msgSend( -[NSMutableDictionary objectForKey:]( self->_stats,  "objectForKey:",  @"numOfDZLandscapes"),  "integerValue")
            }
                + 1),
                @"numOfDZLandscapes");
            v78 = v111;
            if ([v111 count]) {
              goto LABEL_143;
            }
            v78 = v113;
            if ([v113 count]) {
              goto LABEL_143;
            }
            if ([v110 count])
            {
              if (self->_logLevel >= 2) {
                -[NSMutableDictionary setObject:forKey:]( self->_stats,  "setObject:forKey:",  +[NSNumber numberWithInteger:]( NSNumber,  "numberWithInteger:",  (char *)objc_msgSend( -[NSMutableDictionary objectForKey:]( self->_stats,  "objectForKey:",  @"misplacedPortraits"),  "integerValue")
              }
                  + 1),
                  @"misplacedPortraits");
              v81 = v110;
LABEL_150:
              objc_msgSend( v8,  "replaceObjectAtIndex:withObject:",  (char *)v75 + v73,  +[NSNumber numberWithInteger:]( NSNumber,  "numberWithInteger:",  objc_msgSend(objc_msgSend(v81, "lastObject"), "integerValue")));
              [v81 removeLastObject];
            }
          }

LABEL_6:
  if ((state & 4) != 0)
  {
    id v4 = (__CFString *)-[__CFString stringByAppendingString:](v4, "stringByAppendingString:", @"ended ");
    state = self->_state;
    if ((state & 8) == 0)
    {
LABEL_8:
      if ((state & 0x10) == 0) {
        goto LABEL_9;
      }
LABEL_14:
      id v4 = (__CFString *)-[__CFString stringByAppendingString:](v4, "stringByAppendingString:", @"recognized ");
      if ((self->_state & 0x20) == 0) {
        goto LABEL_11;
      }
      goto LABEL_10;
    }
  }

  else if ((state & 8) == 0)
  {
    goto LABEL_8;
  }

  id v4 = (__CFString *)-[__CFString stringByAppendingString:](v4, "stringByAppendingString:", @"can recognize ");
  state = self->_state;
  if ((state & 0x10) != 0) {
    goto LABEL_14;
  }
LABEL_9:
  if ((state & 0x20) != 0) {
LABEL_10:
  }
    id v4 = (__CFString *)-[__CFString stringByAppendingString:](v4, "stringByAppendingString:", @"failed ");
LABEL_11:
  v6.receiver = self;
  v6.super_class = (Class)&OBJC_CLASS___MRGestureRecognizer;
  return objc_msgSend( -[MRGestureRecognizer description](&v6, "description"),  "stringByAppendingFormat:",  @" state=%@",  -[__CFString stringByAppendingString:](v4, "stringByAppendingString:", @"}"));
}

  self->_containerTime = a3;
  self->_internalTimeOffset = -1.0e10;
}

  if (a4) {
    *a4 = 0.0;
  }
  if (a5)
  {
    mPhaseOutDuration = 0.829999983;
LABEL_24:
    *a5 = mPhaseOutDuration;
  }

  v17 = v183;
LABEL_9:
  v163 = +[MPAuthoringUtilities ignoreClusteringForImages:withOptions:]( &OBJC_CLASS___MPAuthoringUtilities,  "ignoreClusteringForImages:withOptions:",  v17,  a4) | v14 ^ 1;
  if ((v163 & 1) == 0 && ((v10 ^ 1) & 1) == 0)
  {
    [v8 updateClusterRatings];
    v18 = [a4 objectForKey:kMPAuthoringCachedAbsolutePaths];
    if (v18) {
      v19 = v18;
    }
    else {
      v19 = v183;
    }
    v20 = [v8 clustersBasedOnOrderedPaths:v19];
    v21 = [v8 allSlidesSortedByPaths:v19];
    if (v21)
    {
      -[MPAuthoringController findUsableClustersForUserDefinedSlideOrderPresentation:inClusters:]( self,  "findUsableClustersForUserDefinedSlideOrderPresentation:inClusters:",  v21,  v20);
      LOBYTE(v163) = 0;
    }

    else
    {
      LOBYTE(v163) = 1;
    }
  }

  -[MPAuthoringController cacheROIInformationForImages:withOptions:]( self,  "cacheROIInformationForImages:withOptions:",  v183,  a4);
  v170 = v7;
  v160 = a4;
  v175 = self;
  v165 = v13;
  if ((v15 & 1) != 0) {
    goto LABEL_58;
  }
  if (+[MPAuthoringUtilities useTitleEffectFromOptions:]( &OBJC_CLASS___MPAuthoringUtilities,  "useTitleEffectFromOptions:",  a4))
  {
    v22 = objc_msgSend( +[MPStyleManager sharedManager](MPStyleManager, "sharedManager"),  "titleEffectLayoutsForStyleID:",  v180);
    v23 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
    v210 = 0u;
    v211 = 0u;
    v212 = 0u;
    v213 = 0u;
    v24 = [v22 objectEnumerator];
    v25 = [v24 countByEnumeratingWithState:&v210 objects:v220 count:16];
    if (v25)
    {
      v26 = v25;
      v27 = *(void *)v211;
      do
      {
        for (i = 0LL; i != v26; i = (char *)i + 1)
        {
          if (*(void *)v211 != v27) {
            objc_enumerationMutation(v24);
          }
          v29 = *(void **)(*((void *)&v210 + 1) + 8LL * (void)i);
          if ((objc_msgSend( objc_msgSend(v29, "objectForKey:", @"imageOnlyTitleEffect"),  "BOOLValue") & 1) == 0) {
            -[NSMutableArray addObject:](v23, "addObject:", v29);
          }
        }

        v26 = [v24 countByEnumeratingWithState:&v210 objects:v220 count:16];
      }

      while (v26);
    }

    self = v175;
    v30 = -[MPAuthoringController findEffectIDInPresetArray:forImages:withOptions:]( v175,  "findEffectIDInPresetArray:forImages:withOptions:",  v23,  v183,  v160);

    uint64_t v16 = v7;
    v13 = v165;
    v31 = v178;
    if (!v30)
    {
      v30 = +[MPAuthoringUtilities titleEffectFromOptions:]( &OBJC_CLASS___MPAuthoringUtilities,  "titleEffectFromOptions:",  v160);
      if (!v30) {
        goto LABEL_53;
      }
    }
  }

  else
  {
    if (!+[MPAuthoringUtilities useImageOnlyTitleEffectFromOptions:]( &OBJC_CLASS___MPAuthoringUtilities,  "useImageOnlyTitleEffectFromOptions:",  a4)) {
      goto LABEL_58;
    }
    v32 = objc_msgSend( +[MPStyleManager sharedManager](MPStyleManager, "sharedManager"),  "titleEffectLayoutsForStyleID:",  v180);
    v33 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
    v206 = 0u;
    v207 = 0u;
    v208 = 0u;
    v209 = 0u;
    v34 = [v32 objectEnumerator];
    v35 = [v34 countByEnumeratingWithState:&v206 objects:v219 count:16];
    if (v35)
    {
      v36 = v35;
      v37 = *(void *)v207;
      do
      {
        for (j = 0LL; j != v36; j = (char *)j + 1)
        {
          if (*(void *)v207 != v37) {
            objc_enumerationMutation(v34);
          }
          v39 = *(void **)(*((void *)&v206 + 1) + 8LL * (void)j);
          if (objc_msgSend( objc_msgSend(v39, "objectForKey:", @"imageOnlyTitleEffect"),  "BOOLValue")) {
            -[NSMutableArray addObject:](v33, "addObject:", v39);
          }
        }

        v36 = [v34 countByEnumeratingWithState:&v206 objects:v219 count:16];
      }

      while (v36);
    }

    if (-[NSMutableArray count](v33, "count"))
    {
      self = v175;
      v30 = -[MPAuthoringController findEffectIDInPresetArray:forImages:withOptions:]( v175,  "findEffectIDInPresetArray:forImages:withOptions:",  v33,  v183,  v160);
    }

    else
    {
      v30 = 0LL;
      self = v175;
    }

    uint64_t v16 = v7;
    v13 = v165;
    v31 = v178;
    if (!v30) {
      goto LABEL_53;
    }
  }

  if (v171 != objc_msgSend( +[MPStyleManager sharedManager](MPStyleManager, "sharedManager"),  "indexOfTitleEffectLayerForStyleID:",  v180))
  {
LABEL_53:
    v176 = 0LL;
    goto LABEL_60;
  }

  v40 = (NSArray *)[v30 objectForKey:@"presetID"];
  v41 = [v30 objectForKey:@"backgroundEffect"];
  v42 = (char *)objc_msgSend( v174,  "numberOfSlidesForEffectID:",  +[MPUtilities idOfCombinedID:](MPUtilities, "idOfCombinedID:", v40));
  if (!v41)
  {
    v176 = v42;
    else {
      v44 = 0;
    }
    if ((v44 & 1) == 0) {
      goto LABEL_267;
    }
LABEL_58:
    v176 = 0LL;
    goto LABEL_59;
  }

  v176 = &v42[(void)objc_msgSend( v174,  "numberOfSlidesForEffectID:",  +[MPUtilities idOfCombinedID:](MPUtilities, "idOfCombinedID:", v41))];
  else {
    v43 = 0;
  }
  if ((v43 & 1) == 0)
  {
    v40 = +[NSArray arrayWithObjects:](&OBJC_CLASS___NSArray, "arrayWithObjects:", v41, v40, 0LL);
LABEL_267:
    [v16 addObject:v40];
    goto LABEL_59;
  }

  v176 = 0LL;
LABEL_59:
  v31 = v178;
LABEL_60:
  if (-[NSArray count](v31, "count")) {
    v45 = 0;
  }
  else {
    v45 = v10;
  }
  if (v45 == 1) {
    v31 = +[NSArray arrayWithObject:]( &OBJC_CLASS___NSArray,  "arrayWithObject:",  +[NSDictionary dictionaryWithObjectsAndKeys:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjectsAndKeys:",  @"JustASlide/Default",  @"presetID",  +[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", 1LL),  @"likelihood",  0LL));
  }
  if ((char *)-[NSArray count](v31, "count") == (char *)&dword_0 + 1)
  {
    v46 = objc_msgSend(-[NSArray lastObject](v31, "lastObject"), "objectForKey:", @"presetID");
    v47 = [v174 numOfImagesForEffectPresetID:v46];
    if (v47 == (id)0x7FFFFFFFFFFFFFFFLL) {
      v48 = v10;
    }
    else {
      v48 = 0;
    }
    if (((v48 ^ ((uint64_t)v47 > 0)) & v10) == 1)
    {
      v49 = v176;
      if ((uint64_t)v176 < v13)
      {
        v50 = (uint64_t)v47;
        do
        {
          if (v13 - (uint64_t)v49 >= v50)
          {
            [v16 addObject:v46];
            v51 = v50;
          }

          else
          {
            [v16 addObject:@"JustASlide/Default"];
            v51 = 1LL;
          }

          v49 += v51;
        }

        while ((uint64_t)v49 < v13);
      }
    }

    else
    {
      [v16 addObject:v46];
    }

    goto LABEL_259;
  }

  if (v10)
  {
    -[MPAuthoringController populateWeighter:withEffects:andOptions:]( self,  "populateWeighter:withEffects:andOptions:",  self->_weighter,  v31,  v160);
    v158 = -[MPWeighter imageCounts](self->_weighter, "imageCounts");
    v164 = [v158 lastIndex];
    -[MPWeighter setEvenlyPickByID:]( self->_weighter,  "setEvenlyPickByID:",  +[MPAuthoringUtilities pickEffectsEvenlyByIDWithOptions:]( &OBJC_CLASS___MPAuthoringUtilities,  "pickEffectsEvenlyByIDWithOptions:",  v160));
    v52 = [v160 objectForKey:kMPAuthoringInitiallyIgnoreEffect];
    if (v52)
    {
      v53 = objc_msgSend(-[MPWeighter allItems](self->_weighter, "allItems"), "indexOfObject:", v52);
      if (v53 != (id)0x7FFFFFFFFFFFFFFFLL) {
        -[MPWeighter ignoreIndex:](self->_weighter, "ignoreIndex:", v53);
      }
    }

    v181 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
    if ((v15 & 1) == 0)
    {
      v204 = 0u;
      v205 = 0u;
      v202 = 0u;
      v203 = 0u;
      v54 = -[NSArray countByEnumeratingWithState:objects:count:]( v31,  "countByEnumeratingWithState:objects:count:",  &v202,  v218,  16LL);
      if (v54)
      {
        v55 = v54;
        v56 = *(void *)v203;
        do
        {
          for (k = 0LL; k != v55; k = (char *)k + 1)
          {
            if (*(void *)v203 != v56) {
              objc_enumerationMutation(v31);
            }
            v58 = *(void **)(*((void *)&v202 + 1) + 8LL * (void)k);
            v59 = [v58 objectForKey:@"order"];
            if (v59)
            {
              v61 = v59;
              v62 = objc_opt_class(&OBJC_CLASS___NSDictionary, v60);
              if ((objc_opt_isKindOfClass(v61, v62) & 1) == 0
                || (!MRIsAppleTV() ? (v63 = @"Desktop") : (v63 = @"AppleTV"),
                    (v61 = [v61 objectForKey:v63]) != 0))
              {
                v64 = [v61 integerValue];
                if (v64 >= -[NSMutableArray count](v181, "count")) {
                  -[NSMutableArray addObject:](v181, "addObject:", v58);
                }
                else {
                  -[NSMutableArray insertObject:atIndex:](v181, "insertObject:atIndex:", v58, v64);
                }
              }
            }
          }

          v55 = -[NSArray countByEnumeratingWithState:objects:count:]( v31,  "countByEnumeratingWithState:objects:count:",  &v202,  v218,  16LL);
        }

        while (v55);
      }
    }

    v65 = v181;
    if (-[NSMutableArray count](v181, "count"))
    {
      v66 = objc_alloc_init(&OBJC_CLASS___MPWeighter);
      -[MPAuthoringController populateWeighter:withEffects:andOptions:]( v175,  "populateWeighter:withEffects:andOptions:",  v66,  v181,  v160);
      v200 = 0u;
      v201 = 0u;
      v198 = 0u;
      v199 = 0u;
      v67 = -[MPWeighter allItems](v66, "allItems");
      v68 = [v67 countByEnumeratingWithState:&v198 objects:v217 count:16];
      if (v68)
      {
        v69 = v68;
        v70 = *(void *)v199;
        do
        {
          for (m = 0LL; m != v69; m = (char *)m + 1)
          {
            if (*(void *)v199 != v70) {
              objc_enumerationMutation(v67);
            }
            v72 = *(void *)(*((void *)&v198 + 1) + 8LL * (void)m);
            v73 = +[MPUtilities idOfCombinedID:](&OBJC_CLASS___MPUtilities, "idOfCombinedID:", v72);
            v74 = -[MPAuthoringController findEffectIDInWeighter:images:startingIndex:count:triesToFind:constraints:previousTags:]( v175,  "findEffectIDInWeighter:images:startingIndex:count:triesToFind:constraints:previousTags:",  v66,  v183,  v176,  [v174 numberOfSlidesForEffectID:v72],  0,  0,  0);
            if (v74)
            {
              v75 = v74;
              v176 = &v176[(void)[v174 numberOfSlidesForEffectID:v73]];
              [v170 addObject:v75];
            }
          }

          v69 = [v67 countByEnumeratingWithState:&v198 objects:v217 count:16];
        }

        while (v69);
      }

      uint64_t v16 = v170;
      if ([v170 count])
      {
        v76 = v175;
        v77 = objc_msgSend( -[MPWeighter allItems](v175->_weighter, "allItems"),  "indexOfObject:",  objc_msgSend(v170, "lastObject"));
        v78 = v160;
        v79 = v165;
        v65 = v181;
        if (v77 != (id)0x7FFFFFFFFFFFFFFFLL) {
          -[MPWeighter ignoreIndex:](v175->_weighter, "ignoreIndex:", v77);
        }
      }

      else
      {
        v78 = v160;
        v76 = v175;
        v79 = v165;
        v65 = v181;
      }
    }

    else
    {
      v78 = v160;
      v76 = v175;
      v79 = v165;
      uint64_t v16 = v170;
    }

    v157 = objc_msgSend(objc_msgSend(v78, "objectForKey:", kMPAuthoringLive), "BOOLValue");
    if (v157
      && objc_msgSend(-[MPDocument layers](v76->_authoredDocument, "layers"), "count") > v171
      && (v80 = objc_msgSend(-[MPDocument layers](v76->_authoredDocument, "layers"), "objectAtIndex:", v171),
          v82 = objc_opt_class(&OBJC_CLASS___MPLayerEffect, v81),
          (objc_opt_isKindOfClass(v80, v82) & 1) == 0)
      && (v83 = objc_msgSend( objc_msgSend(objc_msgSend(objc_msgSend(v80, "effectContainers"), "lastObject"), "effects"),  "lastObject"),  (v84 = -[MPWeighter constraintsForItem:]( v76->_weighter,  "constraintsForItem:",  +[NSString stringWithFormat:]( NSString,  "stringWithFormat:",  @"%@/%@",  objc_msgSend(v83, "effectID"),  objc_msgSend(v83, "presetID")))) != 0))
    {
      v182 = v84[2];
    }

    else
    {
      v182 = 0LL;
    }

    v85 = v176;
    if ((uint64_t)v176 < v79)
    {
      v179 = 0LL;
      while (1)
      {
        v177 = v85;
        v197 = 0x7FFFFFFFFFFFFFFFLL;
        v86 = 0x7FFFFFFFFFFFFFFFLL;
        if ((v163 & 1) == 0) {
          v86 = -[MPAuthoringController bestCountFromClusterForEffectWithImages:atStartIndex:withWeighter:usedIndex:]( v76,  "bestCountFromClusterForEffectWithImages:atStartIndex:withWeighter:usedIndex:",  v183,  v85,  v76->_weighter,  &v197);
        }
        v169 = v79 - (void)v177;
        v87 = v79 - (uint64_t)v177 >= (uint64_t)v164 ? (uint64_t)v164 : v79 - (void)v177;
        v88 = v87 > 0 ? v166 : 0;
        if (v88 == 1)
        {
          v89 = v86;
          v90 = 0LL;
          v91 = v167;
          while (1)
          {
            v92 = objc_msgSend( objc_msgSend( -[NSMutableDictionary objectForKey:]( v76->_cachedROIInformation,  "objectForKey:",  objc_msgSend(v183, "objectAtIndex:", &v177[v90++])),  "objectForKey:",  @"isMovie"),  "BOOLValue");
            if ((v92 & 1) != 0) {
              break;
            }
            if (v87 == v90) {
              goto LABEL_137;
            }
          }

          -[MPWeighter clearIgnoreIndices](v76->_weighter, "clearIgnoreIndices");
          v87 = v90;
LABEL_137:
          v86 = v89;
        }

        else
        {
          v91 = v167;
        }

        if (v86 == 0x7FFFFFFFFFFFFFFFLL) {
          break;
        }
LABEL_155:
        v100 = objc_alloc_init(&OBJC_CLASS___NSMutableIndexSet);
        v101 = -[MPWeighter ignoredIndices](v76->_weighter, "ignoredIndices");
        if ((v91 & 1) == 0)
        {
          v172 = v86;
          v195 = 0u;
          v196 = 0u;
          v193 = 0u;
          v194 = 0u;
          v102 = -[MPWeighter allConstraints](v175->_weighter, "allConstraints");
          v103 = [v102 countByEnumeratingWithState:&v193 objects:v216 count:16];
          if (v103)
          {
            v104 = v103;
            v105 = 0LL;
            v106 = *(void *)v194;
            do
            {
              for (n = 0LL; n != v104; n = (char *)n + 1)
              {
                if (*(void *)v194 != v106) {
                  objc_enumerationMutation(v102);
                }
                v108 = *(void *)(*(void *)(*((void *)&v193 + 1) + 8LL * (void)n) + 8LL);
              }

              v104 = [v102 countByEnumeratingWithState:&v193 objects:v216 count:16];
              v105 += (uint64_t)n;
            }

            while (v104);
          }

          v86 = v172;
          -[NSMutableIndexSet removeIndex:](v100, "removeIndex:", v172);
          v91 = v167;
        }

        v173 = 0;
        v192 = 0LL;
        v109 = -1LL;
        while (1)
        {
          v110 = v109 == -1 ? 1 : v91;
          if ((v110 & 1) == 0) {
            break;
          }
LABEL_183:
          if (v91)
          {
            v119 = v175;
            v120 = -[MPWeighter numberOfItemsWithImageCount:](v175->_weighter, "numberOfItemsWithImageCount:", v86);
            v121 = (v120 & ~(v120 >> 63)) + 1;
            while (--v121)
            {
              v122 = v86;
              v99 = -[MPAuthoringController findEffectIDInWeighter:images:startingIndex:count:triesToFind:constraints:previousTags:]( v175,  "findEffectIDInWeighter:images:startingIndex:count:triesToFind:constraints:previousTags:",  v175->_weighter,  v183,  v177,  v86,  &v192,  0LL,  v179);
              v123 = objc_msgSend(-[MPWeighter allItems](v175->_weighter, "allItems"), "indexOfObject:", v99);
              if (!-[MPWeighter itemAtIndex:meetsContraints:]( v175->_weighter,  "itemAtIndex:meetsContraints:",  v123,  v182))
              {
                -[MPWeighter addIndexToIgnore:](v175->_weighter, "addIndexToIgnore:", v123);
                v99 = 0LL;
              }

              v86 = v122;
              if (v99) {
                goto LABEL_194;
              }
            }

            v99 = 0LL;
          }

          else if (v86 == v109)
          {
            v99 = 0LL;
            v119 = v175;
          }

          else
          {
            v119 = v175;
            v99 = -[MPAuthoringController findEffectIDInWeighter:images:startingIndex:count:triesToFind:constraints:previousTags:]( v175,  "findEffectIDInWeighter:images:startingIndex:count:triesToFind:constraints:previousTags:",  v175->_weighter,  v183,  v177,  v86,  &v192,  v182,  v179);
          }

  p_mTargetLayerImage = (id *)&self->super.mTargetLayerImage;
  mTargetLayerImage = self->super.mTargetLayerImage;
  if (!mTargetLayerImage)
  {
LABEL_10:
    mTargetLayer = self->super.mTargetLayer;
    -[MRLayerClock externalTime](-[MRLayer clock](mTargetLayer, "clock"), "externalTime");
    *p_mTargetLayerImage = -[MRLayer retainedByUserRenderedImageAtTime:inContext:withArguments:]( mTargetLayer,  "retainedByUserRenderedImageAtTime:inContext:withArguments:",  a4,  a5);
    goto LABEL_11;
  }

  -[MRImage sourceTimestamp](mTargetLayerImage, "sourceTimestamp");
  v17 = v16;
  -[MRLayer timeStamp](self->super.mTargetLayer, "timeStamp");
  if (v17 != v18
    || ([*p_mTargetLayerImage renderTime], v34 >= 0.0)
    && ([*p_mTargetLayerImage renderTime],
        v36 = v35,
        -[MRLayerClock externalTime](-[MRLayer clock](self->super.mTargetLayer, "clock"), "externalTime"),
        v36 != v37))
  {
    if (*p_mTargetLayerImage) {
      [*p_mTargetLayerImage releaseByUser];
    }
    goto LABEL_10;
  }

  for (i = 0LL; i != 4; ++i)
  {
    if (a3 && !i || [a4 imageSetOnTextureUnit:i]) {
      [a4 setTextureCoordinatesPointer:self->mInSpriteCoordinates onTextureUnit:i];
    }
  }

  if (self->mNeedsInSpriteCoordinates) {
    [a4 setInSpriteCoordinatesPointer:self->mInSpriteCoordinates];
  }
  [a4 setVertex2DPointer:self->mVertices];
  objc_msgSend( a4,  "drawTrianglesFromOffset:count:",  0,  3 * (void)-[NSMutableArray count](self->mTriangles, "count"));
  [a4 unsetVertexPointer];
  if (self->mNeedsInSpriteCoordinates) {
    [a4 unsetInSpriteCoordinatesPointer];
  }
  for (j = 0LL; j != 4; ++j)
  {
    if (a3 && !j || [a4 imageSetOnTextureUnit:j]) {
      [a4 unsetTextureCoordinatesPointerOnTextureUnit:j];
    }
  }

  if (a3) {
    [a3 unsetOnContext:a4 onTextureUnit:0 state:&v10];
  }
}

  mTargetLayerImage = self->super.mTargetLayerImage;
  if (mTargetLayerImage)
  {
    -[MRImage sourceTimestamp](mTargetLayerImage, "sourceTimestamp");
    v17 = v16;
    -[MRLayer timeStamp](self->super.mTargetLayer, "timeStamp");
    if (v17 == v18)
    {
      -[MRImage renderTime](self->super.mTargetLayerImage, "renderTime");
      if (v25 < 0.0) {
        goto LABEL_11;
      }
      -[MRImage renderTime](self->super.mTargetLayerImage, "renderTime");
      v27 = v26;
      -[MRLayerClock externalTime](-[MRLayer clock](self->super.mTargetLayer, "clock"), "externalTime");
      if (v27 == v28) {
        goto LABEL_11;
      }
    }

    v19 = self->super.mTargetLayerImage;
    if (v19) {
      -[MRImage releaseByUser](v19, "releaseByUser");
    }
  }

  mTargetLayer = self->super.mTargetLayer;
  -[MRLayerClock externalTime](-[MRLayer clock](mTargetLayer, "clock"), "externalTime");
  self->super.mTargetLayerImage = (MRImage *)-[MRLayer retainedByUserRenderedImageAtTime:inContext:withArguments:]( mTargetLayer,  "retainedByUserRenderedImageAtTime:inContext:withArguments:",  a4,  a5);
LABEL_11:
  switch((unint64_t)objc_msgSend( -[NSDictionary objectForKey:]( self->super.mFlattenedAttributes,  "objectForKey:",  @"subtype"),  "unsignedIntegerValue"))
  {
    case 0uLL:
      -[MRTransitionShatter3D spinAtTime:inContext:withArguments:]( self,  "spinAtTime:inContext:withArguments:",  a4,  a5,  a3);
      break;
    case 1uLL:
      -[MRTransitionShatter3D pinWheelAtTime:inContext:withArguments:]( self,  "pinWheelAtTime:inContext:withArguments:",  a4,  a5,  a3);
      break;
    case 2uLL:
      -[MRTransitionShatter3D zoomAtTime:inContext:withArguments:]( self,  "zoomAtTime:inContext:withArguments:",  a4,  a5,  a3);
      break;
    case 3uLL:
      -[MRTransitionShatter3D slicesAtTime:inContext:withArguments:]( self,  "slicesAtTime:inContext:withArguments:",  a4,  a5,  a3);
      break;
    case 4uLL:
      -[MRTransitionShatter3D warpAtTime:inContext:withArguments:]( self,  "warpAtTime:inContext:withArguments:",  a4,  a5,  a3);
      break;
    default:
      return;
  }

id sub_277D0(uint64_t a1)
{
  float v1 = *(_BYTE **)(a1 + 32);
  if (v1[57]) {
    return [v1 resumeSlideshow];
  }
  else {
    return [v1 pauseSlideshow];
  }
}

_BYTE *sub_27880(uint64_t a1)
{
  result = *(_BYTE **)(a1 + 32);
  if (result[57])
  {
    [result willChangeValueForKey:@"slideshowIsPlaying"];
    __int128 v12 = 0u;
    __int128 v13 = 0u;
    __int128 v10 = 0u;
    __int128 v11 = 0u;
    id v3 = objc_msgSend(*(id *)(*(void *)(a1 + 32) + 16), "sublayers", 0);
    id v4 = [v3 countByEnumeratingWithState:&v10 objects:v14 count:16];
    if (v4)
    {
      id v5 = v4;
      uint64_t v6 = *(void *)v11;
      do
      {
        for (i = 0LL; i != v5; i = (char *)i + 1)
        {
          if (*(void *)v11 != v6) {
            objc_enumerationMutation(v3);
          }
          BOOL v8 = *(void **)(*((void *)&v10 + 1) + 8LL * (void)i);
          if (v8 != *(void **)(*(void *)(*(void *)(a1 + 32) + 40LL) + 304LL)
            && [*(id *)(*((void *)&v10 + 1) + 8 * (void)i) isActivated])
          {
            objc_msgSend(objc_msgSend(v8, "clock"), "resumeOnNextUpdate");
          }
        }

        id v5 = [v3 countByEnumeratingWithState:&v10 objects:v14 count:16];
      }

      while (v5);
    }

    id v9 = [*(id *)(a1 + 32) renderingDelegate];
    if ((objc_opt_respondsToSelector(v9, "resumeMusic") & 1) != 0) {
      [v9 resumeMusic];
    }
    *(_BYTE *)(*(void *)(a1 + 32) + 57LL) = 0;
    return [*(id *)(a1 + 32) didChangeValueForKey:@"slideshowIsPlaying"];
  }

  return result;
}

_BYTE *sub_27A9C(uint64_t a1)
{
  result = *(_BYTE **)(a1 + 32);
  if (!result[57])
  {
    [result willChangeValueForKey:@"slideshowIsPlaying"];
    __int128 v12 = 0u;
    __int128 v13 = 0u;
    __int128 v10 = 0u;
    __int128 v11 = 0u;
    id v3 = objc_msgSend(*(id *)(*(void *)(a1 + 32) + 16), "sublayers", 0);
    id v4 = [v3 countByEnumeratingWithState:&v10 objects:v14 count:16];
    if (v4)
    {
      id v5 = v4;
      uint64_t v6 = *(void *)v11;
      do
      {
        for (i = 0LL; i != v5; i = (char *)i + 1)
        {
          if (*(void *)v11 != v6) {
            objc_enumerationMutation(v3);
          }
          BOOL v8 = *(void **)(*((void *)&v10 + 1) + 8LL * (void)i);
          if (v8 != *(void **)(*(void *)(*(void *)(a1 + 32) + 40LL) + 304LL)
            && [*(id *)(*((void *)&v10 + 1) + 8 * (void)i) isActivated])
          {
            objc_msgSend(objc_msgSend(v8, "clock"), "pauseOnNextUpdate");
          }
        }

        id v5 = [v3 countByEnumeratingWithState:&v10 objects:v14 count:16];
      }

      while (v5);
    }

    id v9 = [*(id *)(a1 + 32) renderingDelegate];
    if ((objc_opt_respondsToSelector(v9, "pauseMusic") & 1) != 0) {
      [v9 pauseMusic];
    }
    *(_BYTE *)(*(void *)(a1 + 32) + 57LL) = 1;
    return [*(id *)(a1 + 32) didChangeValueForKey:@"slideshowIsPlaying"];
  }

  return result;
}

id sub_27D1C(uint64_t a1)
{
  v2 = *(void **)(*(void *)(a1 + 32) + 16LL);
  objc_msgSend(objc_msgSend(v2, "clock"), "externalTime");
  objc_msgSend( v2,  "prerenderForTime:inContext:withArguments:",  *(void *)(*(void *)(*(void *)(a1 + 32) + 40) + 8),  *(void *)(*(void *)(*(void *)(a1 + 32) + 40) + 120));
  id v3 = [*(id *)(a1 + 32) _layerForPlugObjectID:*(void *)(*(void *)(*(void *)(a1 + 32) + 40) + 296)];
  double v4 = *(double *)(a1 + 40);
  [v3 timeIn];
  objc_msgSend(objc_msgSend(v3, "clock"), "setContainerTime:", v4 - v5);
  [v3 resyncToSerializer];
  id result = [*(id *)(a1 + 32) requestRenderingOnChanges];
  if ((_DWORD)result) {
    return [*(id *)(a1 + 32) requestRendering:0];
  }
  return result;
}

uint64_t sub_27EF4(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  uint64_t v3 = *(void *)(result + 40);
  if (!*(void *)(v3 + 352))
  {
    id v4 = [(id)result _layerForPlugObjectID:*(void *)(v3 + 296)];
    uint64_t v6 = objc_opt_class(&OBJC_CLASS___MRLayerNavigator, v5);
    uint64_t result = objc_opt_isKindOfClass(v4, v6);
    if ((result & 1) != 0)
    {
      [v4 jumpToNextMarker:0];
      uint64_t result = (uint64_t)[*(id *)(a1 + 32) requestRenderingOnChanges];
      if ((_DWORD)result) {
        return (uint64_t)[*(id *)(a1 + 32) requestRendering:0];
      }
    }
  }

  return result;
}

uint64_t sub_2800C(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  uint64_t v3 = *(void *)(result + 40);
  if (!*(void *)(v3 + 352))
  {
    id v4 = [(id)result _layerForPlugObjectID:*(void *)(v3 + 296)];
    uint64_t v6 = objc_opt_class(&OBJC_CLASS___MRLayerNavigator, v5);
    uint64_t result = objc_opt_isKindOfClass(v4, v6);
    if ((result & 1) != 0)
    {
      [v4 jumpToPreviousMarker:0];
      uint64_t result = (uint64_t)[*(id *)(a1 + 32) requestRenderingOnChanges];
      if ((_DWORD)result) {
        return (uint64_t)[*(id *)(a1 + 32) requestRendering:0];
      }
    }
  }

  return result;
}

uint64_t sub_28128(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  uint64_t v3 = *(void *)(result + 40);
  if (!*(void *)(v3 + 352))
  {
    id v4 = [(id)result _layerForPlugObjectID:*(void *)(v3 + 296)];
    uint64_t v6 = objc_opt_class(&OBJC_CLASS___MRLayerNavigator, v5);
    uint64_t result = objc_opt_isKindOfClass(v4, v6);
    if ((result & 1) != 0)
    {
      [v4 gotoMoreSlidesWithAction:0 backwards:0 animate:*(unsigned __int8 *)(a1 + 40) canCatchCurrentTransition:0];
      uint64_t result = (uint64_t)[*(id *)(a1 + 32) requestRenderingOnChanges];
      if ((_DWORD)result) {
        return (uint64_t)[*(id *)(a1 + 32) requestRendering:0];
      }
    }
  }

  return result;
}

uint64_t sub_28250(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  uint64_t v3 = *(void *)(result + 40);
  if (!*(void *)(v3 + 352))
  {
    id v4 = [(id)result _layerForPlugObjectID:*(void *)(v3 + 296)];
    uint64_t v6 = objc_opt_class(&OBJC_CLASS___MRLayerNavigator, v5);
    uint64_t result = objc_opt_isKindOfClass(v4, v6);
    if ((result & 1) != 0)
    {
      [v4 gotoMoreSlidesWithAction:0 backwards:1 animate:*(unsigned __int8 *)(a1 + 40) canCatchCurrentTransition:0];
      uint64_t result = (uint64_t)[*(id *)(a1 + 32) requestRenderingOnChanges];
      if ((_DWORD)result) {
        return (uint64_t)[*(id *)(a1 + 32) requestRendering:0];
      }
    }
  }

  return result;
}

void *sub_28374(uint64_t a1)
{
  uint64_t result = *(void **)(a1 + 32);
  if (*(void *)(result[5] + 352LL))
  {
    [result willGoToPreviousOrNextFocusedSlide:1 withAction:0 animate:0];
    [*(id *)(a1 + 32) prerenderWithPassParameters:0];
    [*(id *)(a1 + 32) didGoToPreviousOrNextFocusedSlide:1 withAction:0];
    [*(id *)(*(void *)(*(void *)(a1 + 32) + 40) + 352) setIsTransitioning:0];
    uint64_t result = [*(id *)(a1 + 32) requestRenderingOnChanges];
    if ((_DWORD)result) {
      return [*(id *)(a1 + 32) requestRendering:0];
    }
  }

  return result;
}

void *sub_284C0(uint64_t a1)
{
  uint64_t result = *(void **)(a1 + 32);
  if (*(void *)(result[5] + 352LL))
  {
    [result willGoToPreviousOrNextFocusedSlide:0 withAction:0 animate:0];
    [*(id *)(a1 + 32) prerenderWithPassParameters:0];
    [*(id *)(a1 + 32) didGoToPreviousOrNextFocusedSlide:0 withAction:0];
    [*(id *)(*(void *)(*(void *)(a1 + 32) + 40) + 352) setIsTransitioning:0];
    uint64_t result = [*(id *)(a1 + 32) requestRenderingOnChanges];
    if ((_DWORD)result) {
      return [*(id *)(a1 + 32) requestRendering:0];
    }
  }

  return result;
}

id sub_28BA0(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) slideZoomStart:a2];
}

id sub_28BAC(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) slideZoomUpdate:a2];
}

id sub_28BB8(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) slideZoomEnd:a2];
}

id sub_28BC4(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) slideZoomCancel:a2];
}

id sub_28BD0(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) slideZoomStart:a2];
}

id sub_28C00(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) slideZoomUpdate:a2];
}

id sub_28C0C(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) slideZoomEnd:a2];
}

id sub_28C18(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) slideZoomCancel:a2];
}

id sub_28C24(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) focusedTransitionStart:a2];
}

id sub_28C30(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) focusedTransitionUpdate:a2];
}

id sub_28C3C(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) focusedTransitionEnd:a2];
}

id sub_28C48(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) focusedTransitionCancel:a2];
}

id sub_28C54(uint64_t a1)
{
  return [*(id *)(a1 + 32) defaultPauseResumeOnTap:0];
}

id sub_28C60(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) slideshowTransitionStart:a2];
}

id sub_28C6C(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) slideshowTransitionUpdate:a2];
}

id sub_28C78(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) slideshowTransitionEnd:a2];
}

id sub_28C84(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) slideshowTransitionCancel:a2];
}

id sub_28C90(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) slideshowTransitionStart:a2];
}

id sub_28C9C(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) slideshowTransitionUpdate:a2];
}

id sub_28CA8(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) slideshowTransitionEnd:a2];
}

id sub_28CB4(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) slideshowTransitionCancel:a2];
}

void sub_296EC(_Unwind_Exception *a1)
{
}

void sub_2A0F8(_Unwind_Exception *a1)
{
}

void sub_2A110(uint64_t a1, uint64_t a2)
{
}

void sub_2A120(uint64_t a1)
{
}

id sub_2A12C(uint64_t a1)
{
  id result =  objc_msgSend( *(id *)(*(void *)(a1 + 32) + 16),  "sublayerHitAtPoint:onlyIfHitElement:localPoint:",  *(unsigned __int8 *)(a1 + 72),  *(void *)(a1 + 64),  *(double *)(a1 + 48),  *(double *)(a1 + 56));
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL) = result;
  return result;
}

LABEL_54:
          -[NSMutableSet removeObject:](v5->mInternal->mLayersCurrentlyTrackedIn, "removeObject:", v42);
          continue;
        }
      }

      v39 = [v37 countByEnumeratingWithState:&v57 objects:v69 count:16];
    }

    while (v39);
  }

  v48 = obja;
  if (v35
    && (-[NSMutableSet containsObject:](v5->mInternal->mLayersCurrentlyTrackedIn, "containsObject:", v35) & 1) == 0)
  {
    do
    {
      if (v48)
      {
        -[NSMutableSet addObject:](v5->mInternal->mLayersCurrentlyTrackedIn, "addObject:", v35);
        v49 = -[MRAction initWithAction:inRenderer:]( objc_alloc(&OBJC_CLASS___MRAction),  "initWithAction:inRenderer:",  v48,  v5);
        -[MRAction setSender:](v49, "setSender:", v35);
        v50 = [v35 persistentState];
        if (v50) {
          -[MRAction setStates:]( v49,  "setStates:",  +[NSMutableDictionary dictionaryWithDictionary:]( &OBJC_CLASS___NSMutableDictionary,  "dictionaryWithDictionary:",  v50));
        }
        -[MRRenderer time](v5, "time");
        -[MRAction setTime:](v49, "setTime:");
        -[MRRenderer doAction:](v5, "doAction:", v49);
      }

      v51 = [v35 superlayer];
      if (!v51) {
        break;
      }
      v35 = v51;
      v48 = objc_msgSend(objc_msgSend(v51, "plug"), "actionForKey:", @"onTrackIn");
    }

    while (!-[NSMutableSet containsObject:]( v5->mInternal->mLayersCurrentlyTrackedIn,  "containsObject:",  v35));
  }

  if (rect2_16 / v70 <= 0.800000012)
  {
    if (v18 / v69 <= 0.800000012) {
      goto LABEL_59;
    }
    v50 = -0.5;
  }

  else
  {
    v50 = -0.200000003;
  }

  v44 = v44 + v50;
LABEL_59:
  v51 = vabdd_f64(v43, v44);
  if (v51 > 0.200000003)
  {
    v52 = (v51 + -0.200000003) * 0.5;
    v53 = v52;
    if (v43 <= v44)
    {
      v43 = v43 + v53;
      v44 = v44 - v53;
    }

    else
    {
      v43 = v43 - v53;
      v44 = v44 + v53;
    }
  }

  v54 = random();
  if ((v54 & 0x8000000000000001LL) == 1) {
    v55 = v44;
  }
  else {
    v55 = v43;
  }
  if ((v54 & 0x8000000000000001LL) == 1) {
    v44 = v43;
  }
  +[MPAuthoringUtilities kenBurnsStartZoomLevelFromOptions:]( &OBJC_CLASS___MPAuthoringUtilities,  "kenBurnsStartZoomLevelFromOptions:",  a4);
  v57 = v56;
  +[MPAuthoringUtilities kenBurnsEndZoomLevelFromOptions:]( &OBJC_CLASS___MPAuthoringUtilities,  "kenBurnsEndZoomLevelFromOptions:",  a4);
  if (v57 <= -1.0) {
    v57 = v55;
  }
  if (v58 > -1.0) {
    v44 = v58;
  }
  v59 = +[MPAnimationPathKeyframed animationPath](&OBJC_CLASS___MPAnimationPathKeyframed, "animationPath");
  [v59 createKeyframeWithScalar:v67 * v57 atTime:0.0];
  v60 = 1.0;
  [v59 createKeyframeWithScalar:v67 * v44 atTime:1.0];
  [a3 setAnimationPath:v59 forKey:@"scale"];
  v61 = 1.0;
  if (v49 <= 1.0)
  {
    v61 = v49;
    if (v49 < 0.0) {
      v61 = 0.0;
    }
  }

  v62 = v76 + (v49 - v76) * v68;
  if (v48 <= 1.0)
  {
    v60 = v48;
    if (v48 < 0.0) {
      v60 = 0.0;
    }
  }

  v63 = v78 + (v48 - v78) * v68;
  v64 = 1.0;
  v65 = 1.0;
  if (v62 <= 1.0)
  {
    v65 = v76 + (v49 - v76) * v68;
    if (v62 < 0.0) {
      v65 = 0.0;
    }
  }

  if (v63 <= 1.0)
  {
    v64 = v63;
    if (v63 < 0.0) {
      v64 = 0.0;
    }
  }

  v66 = +[MPAnimationPathKeyframed animationPath](&OBJC_CLASS___MPAnimationPathKeyframed, "animationPath");
  objc_msgSend(v66, "createKeyframeWithPoint:atTime:", v61, v60, 0.0);
  objc_msgSend(v66, "createKeyframeWithPoint:atTime:", v65, v64, 1.0);
  [a3 setAnimationPath:v66 forKey:@"center"];
  [a3 removeAnimationPathForKey:@"angle"];
}

double LightboxOpacityProgress(double a1)
{
  float v1 = (a1 + -0.5) * 3.14159265;
  return (sinf(v1) + 1.0) * 0.5;
}

LABEL_26:
        [v16 setImageSizeScript:0];
        objc_msgSend( v16,  "setDefaultSize:",  v21 * 0.5 * self->super.mPixelSize.width,  v20 * 0.5 * self->super.mPixelSize.height);
        __int128 v13 = (char *)v13 + 1;
      }

      while (v9 != v13);
      v36 = [obj countByEnumeratingWithState:&v39 objects:v43 count:16];
      id v9 = v36;
      v10 += (uint64_t)v13;
    }

    while (v36);
  }

  if (v4 > 0.0 && (self->_flags & 2) != 0)
  {
    *(float *)&id v9 = v4;
    -[MRImage kenburnsMatrix:forReferenceAspectRatio:](self, "kenburnsMatrix:forReferenceAspectRatio:", v27, v9);
    MRMatrix_PreMultiply(v27, (uint64_t)a3);
  }

  else
  {
    scale = self->_scale;
    v26 = 1.0;
    if (scale > 0.0) {
      v26 = 1.0 / scale;
    }
    *a3 = v26 * *a3;
    a3[5] = v26 * a3[5];
    *((float32x2_t *)a3 + 6) = vcvt_f32_f64(vsubq_f64(vcvtq_f64_f32(*(float32x2_t *)(a3 + 12)), *(float64x2_t *)&self->_centerX));
  }

  v30 = objc_msgSend( objc_msgSend( objc_msgSend(*(id *)((char *)&self->mTextSprite + 1), "objectForKey:", @"image0"),  "objectForKey:",  @"panEndDirection"),  "integerValue");
  v31 = (a3 / self->super.mMainDuration + -0.5) * 3.14159274;
  v32 = (sinf(v31) + 1.0) * 0.5;
  v33 = -(v29 - v32 * (v29 + v29));
  v34 = -(v32 * (v29 + v29) - v29);
  if (v30 != (id)-1LL) {
    v34 = v33;
  }
  if (v25 <= 2.0) {
    v27 = v34;
  }
  objc_msgSend(v9, "setCenterX:");
  [v9 setCenterY:v27];
  objc_msgSend(v9, "setScale:", fmax(v25 / v19, 1.0));
LABEL_31:
  if (a3 >= 1.5)
  {
    v36 = self->super.mMainDuration + -1.5;
    v35 = 1.0;
    if (v36 <= a3) {
      v35 = (a3 - v36) / -1.5 + 1.0;
    }
  }

  else
  {
    v35 = a3 / 1.5;
  }

  v37 = *(void **)(&self->super._isInInteractiveMode + 1);
  v38 = (MRCroppingSprite *)[v37 objectForKey:@"image0"];
  if (!v38)
  {
    v38 = objc_alloc_init(&OBJC_CLASS___MRCroppingSprite);
    [v37 setObject:v38 forKey:@"image0"];
  }

  p_mPixelSize = &self->super.mPixelSize;
  -[MRCroppingSprite setInnerRect:]( v38,  "setInnerRect:",  2.0 / (v14 * self->super.mPixelSize.width * 0.4),  2.0 / (v13 * self->super.mPixelSize.height * 0.4),  1.0 - 4.0 / (v14 * self->super.mPixelSize.width * 0.4),  1.0 - 4.0 / (v13 * self->super.mPixelSize.height * 0.4));
  __asm { FMOV            V0.2S, #1.0 }

  v60 = _D0;
  v61 = 1065353216;
  *(float *)&_D0 = v35;
  v62 = _D0;
  [a4 composeForeColor:&v60 saveTo:v59];
  if (v11 < 1.0) {
    v44 = 0.0;
  }
  else {
    v44 = 0.100000001;
  }
  if (v11 < 1.0) {
    v45 = 0.200000003;
  }
  else {
    v45 = 0.0;
  }
  [a4 setShader:@"SoftspritePremultiplied"];
  v46 = v14 * p_mPixelSize->width * 0.4;
  *(float *)&v46 = v46;
  v47 = v13 * self->super.mPixelSize.height * 0.4;
  *(float *)&v47 = v47;
  [a4 setShaderUniformVec2:@"invRadii" :v46 forKey:v47];
  -[MRCroppingSprite setNeedsInSpriteCoordinates:](v38, "setNeedsInSpriteCoordinates:", 1LL);
  LODWORD(v4_Block_object_dispose((const void *)(v1 - 80), 8) = 0;
  -[MRCroppingSprite renderImageOuter:inContext:atPosition:andSize:zRotation:]( v38,  "renderImageOuter:inContext:atPosition:andSize:zRotation:",  v9,  a4,  v45,  v44,  v14,  v13,  v48);
  [a4 unsetShader];
  else {
    v49 = @"PlainTexture";
  }
  [a4 setShader:v49];
  -[MRCroppingSprite setNeedsInSpriteCoordinates:](v38, "setNeedsInSpriteCoordinates:", 0LL);
  LODWORD(v50) = 0;
  -[MRCroppingSprite renderImageInner:inContext:atPosition:andSize:zRotation:]( v38,  "renderImageInner:inContext:atPosition:andSize:zRotation:",  v9,  a4,  v45,  v44,  v14,  v13,  v50);
  v51 = *(MRTextRenderer **)((char *)&self->mTextRenderer + 1);
  if (v51)
  {
    objc_msgSend(v51, "relativeSizeInContextPixelSize:", p_mPixelSize->width, self->super.mPixelSize.height);
    v54 = v52;
    v55 = v53;
    if (v11 < 1.0)
    {
      v56 = v45 - v14 * 0.5 + -0.05 - v52 * 0.5;
      v57 = v53 * 0.5 + -0.75;
    }

    else
    {
      v56 = v52 * 0.5 + -1.0 + 0.2;
      v57 = v44 - v13 * 0.5 + -0.15 - v53 * 0.5;
    }

    if (-[NSString isEqualToString:]( -[MRLayerEffect editedElement](self->super.mEffectLayer, "editedElement"),  "isEqualToString:",  @"text0")
      && -[MRLayerEffect _hideTextWhileEditing](self->super.mEffectLayer, "_hideTextWhileEditing"))
    {
      LODWORD(v5_Block_object_dispose((const void *)(v1 - 80), 8) = 0;
      objc_msgSend( *(id *)((char *)&self->mTextImage + 1),  "fakeRenderInContext:atPosition:andSize:zRotation:",  a4,  v56,  v57,  v54,  v55,  v58);
    }

    else
    {
      objc_msgSend( *(id *)((char *)&self->mTextImage + 1),  "renderImage:inContext:atPosition:andSize:",  *(MRTextRenderer **)((char *)&self->mTextRenderer + 1),  a4,  v56,  v57,  v54,  v55);
    }
  }

  [a4 unsetShader];
  [a4 restoreForeColor:v59];
  [v9 releaseByUser];
  [a4 blend:0];
}

      -[MPCropController applyStationaryCropToSlide:withOptions:]( self,  "applyStationaryCropToSlide:withOptions:",  a3,  v4);
      return;
    }
  }

  if ((v21 & 1) == 0) {
    goto LABEL_26;
  }
LABEL_19:
  v30 = -[NSMutableDictionary objectForKey:](v4, "objectForKey:", kMPAuthoringSeed);
  if (v30) {
    srandom( objc_msgSend(objc_msgSend(a3, "path"), "hash")
  }
    + [v30 unsignedIntegerValue]);
  if (+[MPAuthoringUtilities useROIFromOptions:](&OBJC_CLASS___MPAuthoringUtilities, "useROIFromOptions:", v4))
  {
    v31 = -[MPDocument regionsOfInterestForPath:detect:]( self->_authoredDocument,  "regionsOfInterestForPath:detect:",  [a3 path],  +[MPAuthoringUtilities performFaceDetectionFromOptions:]( MPAuthoringUtilities,  "performFaceDetectionFromOptions:",  v4));
    if (v31) {
      v31 = (char *)[v31 count];
    }
    if (v20) {
      goto LABEL_25;
    }
  }

  else
  {
    v31 = 0LL;
    if (v20)
    {
LABEL_25:
      -[MPCropController applyAnimatedCropToBreakSlide:withOptions:]( self,  "applyAnimatedCropToBreakSlide:withOptions:",  a3,  v4);
      return;
    }
  }

  if (!v22)
  {
    id v4 = +[NSMutableDictionary dictionaryWithDictionary:]( &OBJC_CLASS___NSMutableDictionary,  "dictionaryWithDictionary:",  v4);
    LODWORD(v32) = 0.5;
    v33 = +[NSNumber numberWithFloat:](&OBJC_CLASS___NSNumber, "numberWithFloat:", v32);
    -[NSMutableDictionary setObject:forKey:](v4, "setObject:forKey:", v33, kMPAuthoringKenBurnsPanFactor);
    LODWORD(v34) = 1067030938;
    v35 = +[NSNumber numberWithFloat:](&OBJC_CLASS___NSNumber, "numberWithFloat:", v34);
    -[NSMutableDictionary setObject:forKey:](v4, "setObject:forKey:", v35, kMPAuthoringKenBurnsMaxZoom);
LABEL_33:
    -[MPCropController applyAnimatedCropWithROIsToSlide:withOptions:]( self,  "applyAnimatedCropWithROIsToSlide:withOptions:",  a3,  v4);
    return;
  }

  if ((uint64_t)v31 >= 2)
  {
    -[MPCropController applyMultiFaceAnimatedCropToSlide:withOptions:]( self,  "applyMultiFaceAnimatedCropToSlide:withOptions:",  a3,  v4);
    return;
  }

  if (v31 == (_BYTE *)&dword_0 + 1) {
    goto LABEL_33;
  }
  -[MPCropController applyAnimatedCropToSlide:withOptions:](self, "applyAnimatedCropToSlide:withOptions:", a3, v4);
}

  effectTiming = self->_effectTiming;
  if (effectTiming) {
    -[MZEffectTiming setPhaseInDuration:mainDuration:phaseOutDuration:]( effectTiming,  "setPhaseInDuration:mainDuration:phaseOutDuration:",  self->_phaseInDuration,  self->_mainDuration,  self->_phaseOutDuration);
  }
}

            v36 = 1;
            if ((v26 & 1) != 0) {
              goto LABEL_30;
            }
LABEL_27:
            v26 = v36 & ([v30 hasMovies] ^ 1);
LABEL_31:
            if ((v53 & v26) == 1
              && (objc_msgSend( +[MPEffectManager sharedManager](MPEffectManager, "sharedManager"),  "skipPanoramaScaleForEffectID:",  objc_msgSend(v30, "effectID")) & 1) == 0)
            {
              v37 = [v30 hasPanoramasInDocument:a4];
            }

            else
            {
              v37 = 0;
            }

            if ((v26 ^ 1 | v37) == 1)
            {
              if ((v26 & 1) == 0) {
                goto LABEL_45;
              }
              if (v37)
              {
                [v48 duration];
                uint64_t v16 = v16 + v39 * 2.0;
                goto LABEL_46;
              }

              goto LABEL_48;
            }

            objc_msgSend(v52, "minimumEffectDurationForEffectID:", objc_msgSend(v30, "effectID"));
            if (v38 >= v28) {
              v28 = v38;
            }
          }

          v25 = [v51 countByEnumeratingWithState:&v58 objects:v71 count:16];
          if (v25) {
            continue;
          }
          break;
        }

        if ((v26 & 1) != 0)
        {
LABEL_48:
          uint64_t v16 = v16 + v28 * 29.0;
          goto LABEL_46;
        }

  v53 = width;
  v54 = height;
  *(_DWORD *)&v25[v37] = LODWORD(v19);
  if (a3)
  {
    if (self->mPreservesImageAspectRatio)
    {
      *(float *)&v19 = width / height;
    }

    else
    {
      [a3 aspectRatio];
      *(float *)&v19 = v19;
    }

    objc_msgSend( a3,  "setOnContext:onTextureUnit:withReferenceAspectRatio:state:",  a4,  0,  &v192,  v19,  *(void *)&v177);
    [a4 setTextureCoordinatesPointer:(char *)&v177 - (4 * v24) onTextureUnit:0];
  }

  v187 = a3;
  v55 = 0;
  v56 = v190.f64[0];
  v57 = v191.f64[0];
  v184 = v56;
  v185 = v57;
  v181 = cosval * width;
  v182 = sinval * width;
  v183 = cosval * height;
  v58 = sinval * height;
  v59 = v20 * v53;
  v60 = v21 * v53;
  __asm { FMOV            V1.2D, #1.0 }

  v62 = 1LL;
  v63 = v22 * v54;
  v64 = v23 * v54;
  __asm { FMOV            V0.2D, #0.5 }

  v190 = _Q0;
  v191 = _Q1;
  do
  {
    v66 = objc_msgSend(a4, "imageSetOnTextureUnit:", v62, *(void *)&v177);
    if (v66)
    {
      v67 = [v66 preservesAspectRatio];
      v68 = (char *)&v177 - (4 * v24);
      if ((v67 & 1) == 0)
      {
        v69 = 0LL;
        v71 = v190;
        v70 = v191;
        do
        {
          v68 = v194;
          *(float32x4_t *)&v194[v69] = vcvt_hight_f32_f64( (int32x2_t)vcvt_f32_f64( vmulq_f64( vaddq_f64(vcvtq_f64_f32(*(float32x2_t *)&v25[v69]), v70),  v71)),  vmulq_f64(vaddq_f64(vcvt_hight_f64_f32(*(float32x4_t *)&v25[v69]), v70), v71));
          v69 += 16LL;
        }

        while (4 * v24 != v69);
      }

      v55 |= 1 << v62;
      [a4 setTextureCoordinatesPointer:v68 onTextureUnit:v62];
    }

    ++v62;
  }

  while (v62 != 4);
  if (self->mNeedsInSpriteCoordinates)
  {
    for (i = 0LL; i != v24; ++i)
    {
      if ((i & 1) != 0) {
        v73 = 16LL;
      }
      else {
        v73 = 15LL;
      }
      v74 = (&self->super.isa)[v73];
      if ((i & 1) != 0) {
        v75 = 18LL;
      }
      else {
        v75 = 17LL;
      }
      v76 = *(double *)&(&self->super.isa)[v75] + (*(float *)&v25[4 * i] + 1.0) * 0.5 * *(double *)&v74;
      *(float *)&v193[i] = v76;
    }

    objc_msgSend(a4, "setInSpriteCoordinatesPointer:", v193, 1.0, 0.5);
  }

  v77 = (float *)((char *)&v177 - ((4 * (_WORD)v24 + 15) & 0x1F0));
  v78 = self->mMeshType;
  if (v78 == 3)
  {
    if (v8) {
      v153 = v63;
    }
    else {
      v153 = v179 * v54;
    }
    if (v8) {
      v154 = v23 * v54;
    }
    else {
      v154 = v177 * v54;
    }
    v155 = (float)(v184 - v181);
    v156 = v155 - v153 * sinval;
    v157 = (float)(v185 - v182);
    v121 = v157 + v153 * cosval;
    v122 = v155 - v154 * sinval;
    v123 = v157 + v154 * cosval;
    v158 = v184 + v59 * cosval;
    v124 = v158 - v153 * sinval;
    v159 = v185 + v59 * sinval;
    v125 = v159 + v153 * cosval;
    v107 = v158 - v154 * sinval;
    v111 = v159 + v154 * cosval;
    v160 = v184 + v60 * cosval;
    v151 = v160 - v153 * sinval;
    v161 = v185 + v60 * sinval;
    v152 = v161 + v153 * cosval;
    v117 = v160 - v154 * sinval;
    v118 = v161 + v154 * cosval;
    v162 = (float)(v181 + v184);
    v128 = v162 - v153 * sinval;
    v163 = (float)(v182 + v185);
    v129 = v163 + v153 * cosval;
    v79 = v162 - v154 * sinval;
    v130 = 19LL;
    v131 = 18LL;
    v132 = 17LL;
    v133 = 16LL;
    v134 = 15LL;
    v135 = 14LL;
    v136 = 13LL;
    v164 = v163 + v154 * cosval;
  }

  else
  {
    if (v78 != 2)
    {
      if (v78 == 1)
      {
        v79 = v58 + (float)(v184 - v181);
        v80 = v183;
        v81 = (float)(v185 - v182) - v183;
        v82 = v184 + v59 * cosval;
        v83 = v82 - v63 * sinval;
        v84 = v185 + v59 * sinval;
        v85 = v84 + v63 * cosval;
        v86 = (float)(v184 - v181);
        v87 = v86 - v63 * sinval;
        v88 = (float)(v185 - v182);
        v89 = v88 + v63 * cosval;
        v90 = v82 - v64 * sinval;
        v91 = v84 + v64 * cosval;
        *(float *)&v86 = v86 - v64 * sinval;
        *(float *)&v88 = v88 + v64 * cosval;
        v92 = (float)(v184 - v181) - v58;
        v93 = v183 + (float)(v185 - v182);
        v94 = v184 + v60 * cosval;
        v95 = v94 - v64 * sinval;
        v96 = v185 + v60 * sinval;
        v97 = v96 + v64 * cosval;
        v98 = v182 + v185;
        v99 = (float)(v181 + v184);
        v100 = v99 - v64 * sinval;
        v101 = (float)(v182 + v185) + v64 * cosval;
        v102 = v99 - v63 * sinval;
        v103 = v94 - v63 * sinval;
        v104 = (float)(v182 + v185) + v63 * cosval;
        v105 = v96 + v63 * cosval;
        v106 = (float)(v181 + v184) - v58;
        v107 = v58 + (float)(v181 + v184);
        v108 = v58;
        v77[4] = v87;
        v77[5] = v89;
        v109 = v82 - v108;
        v110 = v80 + v98;
        v111 = v98 - v80;
        v77[8] = *(float *)&v86;
        v77[9] = *(float *)&v88;
        v112 = v84 + v80;
        v113 = v94 - v108;
        v114 = v94 + v108;
        v115 = v82 + v108;
        v116 = v84 - v80;
        v77[11] = v93;
        v77[12] = v92;
        v77[10] = v92;
        *(float *)&v84 = v90;
        *(float *)&v90 = v91;
        v77[13] = v93;
        v77[14] = *(float *)&v84;
        v77[6] = *(float *)&v84;
        v77[7] = *(float *)&v90;
        v77[15] = *(float *)&v90;
        *(float *)&v84 = v109;
        *(float *)&v90 = v112;
        v77[16] = *(float *)&v84;
        v77[17] = *(float *)&v90;
        *(float *)&v84 = v113;
        *(float *)&v82 = v96 + v80;
        v77[20] = *(float *)&v84;
        v77[21] = *(float *)&v82;
        v77[22] = v106;
        v77[24] = v106;
        v117 = v83;
        v118 = v85;
        v119 = v95;
        v120 = v97;
        *(float *)&v95 = v100;
        v121 = v101;
        v122 = v103;
        v123 = v105;
        v124 = v102;
        v125 = v104;
        v126 = v114;
        v127 = v96 - v80;
        v128 = v115;
        v129 = v116;
        v130 = 47LL;
        v131 = 46LL;
        v132 = 45LL;
        *v77 = v79;
        v77[1] = v81;
        v133 = 44LL;
        v134 = 43LL;
        v135 = 42LL;
        v136 = 41LL;
        v77[2] = v117;
        v77[3] = v118;
        v137 = 40LL;
        v138 = 39LL;
        v139 = 38LL;
        v140 = 37LL;
        v77[18] = v119;
        v77[19] = v120;
        v77[23] = v110;
        v141 = 36LL;
        v142 = 35LL;
        v143 = 34LL;
        v144 = 33LL;
        v77[25] = v110;
        v77[26] = v119;
        v145 = 32LL;
        v146 = 31LL;
        v147 = 30LL;
        v148 = 29LL;
        v77[27] = v120;
        v77[28] = *(float *)&v95;
        v149 = v107;
        v150 = v111;
        v151 = v122;
        v152 = v123;
      }

      else
      {
        v128 = v58 + (float)(v184 - v181);
        v121 = (float)(v185 - v182) - v183;
        v171 = v184 + v59 * cosval;
        v122 = v171 - v63 * sinval;
        v172 = v185 + v59 * sinval;
        v123 = v172 + v63 * cosval;
        v124 = v58 + (float)(v181 + v184);
        v125 = (float)(v182 + v185) - v183;
        v173 = v184 + v60 * cosval;
        v107 = v173 - v63 * sinval;
        v174 = v185 + v60 * sinval;
        v111 = v174 + v63 * cosval;
        v149 = (float)(v181 + v184) - v58;
        v150 = v183 + (float)(v182 + v185);
        v151 = v173 - v64 * sinval;
        v152 = v174 + v64 * cosval;
        v126 = (float)(v184 - v181) - v58;
        v127 = v183 + (float)(v185 - v182);
        v117 = v171 - v64 * sinval;
        v130 = 19LL;
        v131 = 18LL;
        v132 = 17LL;
        v133 = 16LL;
        v134 = 15LL;
        v135 = 14LL;
        v136 = 13LL;
        v137 = 12LL;
        v138 = 11LL;
        v139 = 10LL;
        v140 = 9LL;
        v141 = 8LL;
        v142 = 7LL;
        v143 = 6LL;
        v144 = 5LL;
        v145 = 4LL;
        v146 = 3LL;
        v147 = 2LL;
        v118 = v172 + v64 * cosval;
        *v77 = v128;
        v148 = 1LL;
        v129 = v121;
        v79 = v122;
        v81 = v123;
      }

      goto LABEL_64;
    }

    v165 = v178 * v53;
    v166 = v180 * v53;
    if (v8)
    {
      v165 = v59;
      v166 = v60;
    }

    v167 = v184 + v165 * cosval;
    v156 = v167 + v58;
    v168 = v185 + v165 * sinval;
    v121 = v168 - v183;
    v122 = v167 - v63 * sinval;
    v123 = v168 + v63 * cosval;
    v169 = v184 + v166 * cosval;
    v124 = v169 + v58;
    v170 = v185 + v166 * sinval;
    v125 = v170 - v183;
    v107 = v169 - v63 * sinval;
    v111 = v170 + v63 * cosval;
    v151 = v167 - v64 * sinval;
    v152 = v168 + v64 * cosval;
    v117 = v167 - v58;
    v118 = v168 + v183;
    v128 = v169 - v64 * sinval;
    v129 = v170 + v64 * cosval;
    v79 = v169 - v58;
    v130 = 19LL;
    v131 = 18LL;
    v132 = 17LL;
    v133 = 16LL;
    v134 = 15LL;
    v135 = 14LL;
    v136 = 13LL;
    v164 = v170 + v183;
  }

  v137 = 12LL;
  v138 = 11LL;
  v139 = 10LL;
  v140 = 9LL;
  v141 = 8LL;
  v142 = 7LL;
  v143 = 6LL;
  v144 = 5LL;
  v145 = 4LL;
  v146 = 3LL;
  v147 = 2LL;
  v148 = 1LL;
  v81 = v164;
  *v77 = v156;
  v149 = v107;
  v150 = v111;
  v126 = v151;
  v127 = v152;
LABEL_64:
  v77[v148] = v121;
  v77[v147] = v122;
  v77[v146] = v123;
  v77[v145] = v124;
  v77[v144] = v125;
  v77[v143] = v107;
  v77[v142] = v111;
  v77[v141] = v149;
  v77[v140] = v150;
  v77[v139] = v151;
  v77[v138] = v152;
  v77[v137] = v126;
  v77[v136] = v127;
  v77[v135] = v117;
  v77[v134] = v118;
  v77[v133] = v128;
  v77[v132] = v129;
  v77[v131] = v79;
  v77[v130] = v81;
  objc_msgSend(a4, "setVertex2DPointer:");
  [a4 drawTriangleStripFromOffset:0 count:v24 >> 1];
  [a4 unsetVertexPointer];
  if (self->mNeedsInSpriteCoordinates) {
    [a4 unsetInSpriteCoordinatesPointer];
  }
  v175 = -3LL;
  do
  {
    if ((v55 & (1 << (v175 + 4))) != 0) {
      [a4 unsetTextureCoordinatesPointerOnTextureUnit:1];
    }
  }

  while (!__CFADD__(v175++, 1LL));
  v176 = v187;
  if (v187)
  {
    [a4 unsetTextureCoordinatesPointerOnTextureUnit:0];
    [v176 unsetOnContext:a4 onTextureUnit:0 state:&v192];
  }

      ++v12;
    }

    while (v10 != v12);
    v23 = -[NSDictionary countByEnumeratingWithState:objects:count:]( v5,  "countByEnumeratingWithState:objects:count:",  &v24,  v28,  16LL);
    __int128 v10 = v23;
  }

  while (v23);
LABEL_33:
  -[MRContext _commitOuterToInner](self, "_commitOuterToInner");
  -[MRContext unsetShader](self, "unsetShader");
  return 1;
}

    v21 = v36;
    v49 = a3[2 * v16];
    v50 = a3[v38];
    v51 = v49 - v23;
    v52 = v50 - v24;
    if (v49 - v23 == v25 && v52 == v26)
    {
      v55 = 3;
      goto LABEL_39;
    }

    if (v51 == v27 && v52 == v28)
    {
      v55 = 6;
      goto LABEL_39;
    }

    if (v51 == 0.0 && v52 == 0.0)
    {
      v55 = 5;
LABEL_39:
      v56 = a3[2 * v16];
      v57 = a3[v38];
      goto LABEL_40;
    }

    v80 = v29 > 0.0;
    v81 = v51 * v28 - v52 * v27;
    v82 = v52 * v25 - v51 * v26;
    v83 = fabs(v81);
    v84 = v81 <= 0.0;
    v85 = v82 + v81;
    v86 = v85 - v29 >= 0.0;
    v87 = v80 ^ v84;
    if (v83 < v31) {
      v87 = 0;
    }
    v88 = fabs(v82);
    if (v83 < v31) {
      v87 = 1;
    }
    v48 = v88 < v31;
    v89 = v80 ^ (v82 <= 0.0);
    if (v88 < v31) {
      v89 = 0;
    }
    v90 = vabdd_f64(v85, v29);
    if (v88 < v31) {
      v91 = 1;
    }
    else {
      v91 = v89;
    }
    v92 = v80 ^ v86;
    v93 = v87 & v91;
    if (v90 < v31) {
      v92 = 1;
    }
    v94 = v93 & v92;
    v55 = v48 | (4 * (v83 < v31)) | (2 * (v90 < v31));
    if (v94 != 1) {
      v55 = v44;
    }
    v95 = v83 < v31 && v88 < v31;
    v57 = v24;
    v56 = v23;
    if (v95
      || (v83 >= v31 ? (v96 = 1) : (v96 = v90 >= v31),
          (v57 = v186, v56 = v188, !v96)
       || (v88 >= v31 ? (v97 = 1) : (v97 = v90 >= v31), v57 = v50, v56 = a3[2 * v16], v97)))
    {
      if ((v94 & 1) == 0) {
        goto LABEL_98;
      }
    }

    else
    {
      v57 = v182;
      v56 = v184;
      if ((v94 & 1) == 0) {
        goto LABEL_98;
      }
    }

LABEL_29:
      [a4 localAspectRatio];
      v46 = v45;
      v47 = x + (v34 - v31) * -0.5 * 0.003;
      if (v31 == v34) {
        v47 = x;
      }
      v102 = v47;
      if (v32 != v33)
      {
        [a4 localAspectRatio];
        v29 = v29 + (v32 - v33) * 0.5 * -0.003 * v48;
      }

      v103 = v29;
      BOOL v8 = v18;
      v49 = v104;
      mPhaseInDuration = self->super.mPhaseInDuration;
      __int128 v10 = v105;
      if (mPhaseInDuration <= v106)
      {
        v52 = mPhaseInDuration + self->super.mMainDuration;
        mPhaseOutDuration = self->super.mPhaseOutDuration;
        if (v52 + mPhaseOutDuration - v91 <= v106)
        {
          v54 = v106 - (v52 + mPhaseOutDuration - v90);
          v55 = (double)v14;
          v49 = 1.0;
          v49 = 0.0;
          if (v54 >= v55 * 0.1 + 0.2)
          {
LABEL_43:
            v56 = (v49 + -0.5) * 3.14159265;
            v57 = sinf(v56) + 1.0;
            v58 = 0.5;
            v49 = v57 * 0.5;
            *(float *)&v57 = v57 * 0.5;
            LODWORD(v5_Block_object_dispose((const void *)(v1 - 80), 8) = LODWORD(v57);
            LODWORD(v59) = LODWORD(v57);
            LODWORD(v60) = LODWORD(v57);
            [a4 composeForeColorRed:v113 green:v57 blue:v58 alpha:v59 saveTo:v60];
            goto LABEL_44;
          }

          v49 = (v54 + v55 * -0.1) / -0.2 + 1.0;
        }
      }

      else
      {
        v51 = (double)v15;
        v49 = 0.0;
        v49 = 1.0;
        if (v51 * 0.1 + 0.2 <= v106) {
          goto LABEL_44;
        }
        v49 = (v106 + v51 * -0.1) / 0.2;
      }

      if (v49 < 1.0) {
        goto LABEL_43;
      }
LABEL_44:
      [v20 aspectRatio];
      v62 = v61;
      v63 = v61 > 2.0 || v61 < 0.5;
      if (v101 != v63 || ((v105 ^ 1) & 1) != 0)
      {
        if ((v105 & 1) != 0) {
          [a4 unsetShader];
        }
        if (v63) {
          v64 = @"PlainTextureHigh";
        }
        else {
          v64 = @"PlainTexture";
        }
        [a4 setShader:v64];
        __int128 v10 = 1;
        v101 = v63;
      }

      v65 = v107 - (v34 * 0.003 + v31 * 0.003);
      v66 = v28 - (v33 * 0.003 + v32 * 0.003) * v46;
      [v20 centerX];
      v68 = v67;
      [v20 centerY];
      v70 = v69;
      if (self->super._panoramaPanningOffsets)
      {
        if (v62 <= 2.0)
        {
          [a4 aspectRatio];
          -[MREffect valueForPanoramaPanningForElementID:value:minValue:maxValue:]( self,  "valueForPanoramaPanningForElementID:value:minValue:maxValue:",  v17,  v70,  -(1.0 - v66 * v62 / (v65 * v72)));
          objc_msgSend(v20, "setCenterY:");
        }

        else
        {
          [a4 localAspectRatio];
          -[MREffect valueForPanoramaPanningForElementID:value:minValue:maxValue:]( self,  "valueForPanoramaPanningForElementID:value:minValue:maxValue:",  v17,  v68,  -(1.0 - v65 * v71 / (v66 * v62)));
          objc_msgSend(v20, "setCenterX:");
        }
      }

      v73 = *(void **)(&self->super._isInInteractiveMode + 1);
      v74 = (MRCroppingSprite *)[v73 objectForKey:v17];
      if (!v74)
      {
        v74 = objc_alloc_init(&OBJC_CLASS___MRCroppingSprite);
        [v73 setObject:v74 forKey:v17];
      }

      -[MRCroppingSprite renderImage:inContext:atPosition:andSize:]( v74,  "renderImage:inContext:atPosition:andSize:",  v20,  a4,  v102,  v103,  v65,  v66);
      [v20 releaseByUser];
      [v20 setCenterX:v68];
      [v20 setCenterY:v70];
      __int128 v12 = v49;
      a3 = v106;
      if (v49 < 1.0) {
        [a4 restoreForeColor:v113];
      }
      __int128 v13 = (char *)v13 + 1;
      --v14;
      __int128 v11 = v99;
    }

    while (v100 != v13);
    v78 = [obj countByEnumeratingWithState:&v108 objects:v112 count:16];
    __int128 v11 = (char *)v13 + (void)v99;
    v100 = v78;
  }

  while (v78);
LABEL_69:
  if (*(MRTextRenderer **)((char *)&self->mTextRenderer0 + 1))
  {
    v79 = objc_alloc_init(&OBJC_CLASS___MRCroppingSprite);
    [*(id *)((char *)&self->mTextRenderer0 + 1) width];
    v81 = v80 / self->super.mPixelSize.width + v80 / self->super.mPixelSize.width;
    [*(id *)((char *)&self->mTextRenderer0 + 1) height];
    v83 = v82 / self->super.mPixelSize.height + v82 / self->super.mPixelSize.height;
    if (v88) {
      v84 = 0.5;
    }
    else {
      v84 = 0.0;
    }
    if (v88) {
      v85 = 0.0;
    }
    else {
      v85 = v83 * -0.5 + -0.5 + -0.05;
    }
    if (objc_msgSend( objc_msgSend( *(id *)((char *)&self->super.super.isa + v8),  "editedElement",  v83 * -0.5 + -0.5 + -0.05),  "isEqualToString:",  @"text0")
      && ([*(id *)((char *)&self->super.super.isa + v8) _hideTextWhileEditing] & 1) != 0)
    {
      LODWORD(v86) = 0;
      -[MRCroppingSprite fakeRenderInContext:atPosition:andSize:zRotation:]( v79,  "fakeRenderInContext:atPosition:andSize:zRotation:",  a4,  v84,  v85 + v83 / 1.2 * 0.1,  v81,  v83,  v86);
    }

    else
    {
      if (v101 || (v10 & 1) == 0)
      {
        if ((v10 & 1) != 0) {
          [a4 unsetShader];
        }
        [a4 setShader:@"PlainTexture"];
      }

      [a4 blend:2];
      LODWORD(v87) = 0;
      -[MRCroppingSprite renderImage:inContext:atPosition:andSize:zRotation:]( v79,  "renderImage:inContext:atPosition:andSize:zRotation:",  *(MRTextRenderer **)((char *)&self->mTextRenderer0 + 1),  a4,  v84,  v85 + v83 / -1.2 * 0.1,  v81,  v83,  v87);
      [a4 blend:0];
    }
  }

  [a4 unsetShader];
}

  return v14;
}

  v27 = &OBJC_IVAR___OKWidgetMarimbaView__portraitMarimbaDocument;
  if (v5 >= v6) {
    v27 = &OBJC_IVAR___OKWidgetMarimbaView__landscapeMarimbaDocument;
  }
  v28 = *(MPDocument **)&self->OKWidgetView_opaque[*v27];
  if (v28 == -[MRMarimbaLayer document](-[MRMarimbaView marimbaLayer](self->_marimbaView, "marimbaLayer"), "document"))
  {
    v29 = objc_msgSend(-[MPDocument mainLayers](v28, "mainLayers"), "lastObject");
    v31 = objc_opt_class(&OBJC_CLASS___MPLayerSerializer, v30);
    if ((objc_opt_isKindOfClass(v29, v31) & 1) != 0) {
      v32 = v29;
    }
    else {
      v32 = 0LL;
    }
    -[MRRenderer setTransitionLayerPlugObjectID:]( -[MRMarimbaLayer renderer](-[MRMarimbaView marimbaLayer](self->_marimbaView, "marimbaLayer"), "renderer"),  "setTransitionLayerPlugObjectID:",  objc_msgSend(objc_msgSend(v32, "plug"), "objectID"));
  }

  else
  {
    -[MRMarimbaLayer setDocument:]( -[MRMarimbaView marimbaLayer](self->_marimbaView, "marimbaLayer"),  "setDocument:",  v28);
  }

  -[MRRenderer disableFadeInAndOut]( -[MRMarimbaLayer renderer](-[MRMarimbaView marimbaLayer](self->_marimbaView, "marimbaLayer"), "renderer"),  "disableFadeInAndOut");
  self->_needsBuildingDocument = 0;
  objc_sync_exit(self);
}

  framesetter = CTFramesetterCreateWithAttributedString((CFAttributedStringRef)a4);
  if (framesetter)
  {
    if (v109 >= 1)
    {
      v36 = 0LL;
      v37 = 0LL;
      v38 = (width + v14 * v10) / a6;
      v104 = vcvtps_s32_f32(v38);
      v93 = height / a6 * 0.5;
      y = CGRectZero.origin.y;
      v94 = CGRectZero.size.height;
      v95 = CGRectZero.size.width;
      v98 = v18 * a6;
      v99 = v17 * a6;
      blur = v19 * a6;
      v39 = v17;
      v40 = ceilf(-v39) + 0.0;
      if (v18 <= 0.0) {
        v41 = 0.0;
      }
      else {
        v41 = -1.0;
      }
      v42 = v18 * v41;
      v102 = ceilf(v42) + 0.0;
      v103 = height / a6;
      v43 = height / a6;
      v101 = 30000.0 - ceilf(v43) + -1.0;
      if (v17 >= 0.0) {
        v40 = 0.0;
      }
      v100 = v40;
      v105 = v16;
      do
      {
        v44 = self->_columnCount;
        v45 = 0.0;
        v46 = (double)v104;
        if (v44)
        {
          v47 = (double)(v104 / v44);
          v45 = (double)v37 * v47;
          if (v37)
          {
            columnMargin = self->_columnMargin;
            if (v37 == v44 - 1)
            {
              v46 = v47 - columnMargin * 0.5;
              v45 = v45 + columnMargin * 0.5;
            }

            else
            {
              v46 = v47 - columnMargin;
              v45 = v45 + columnMargin * 0.5 * (double)v37;
            }
          }

          else
          {
            v46 = v47 + self->_columnMargin * -0.5;
          }
        }

        Mutable = CGPathCreateMutable();
        if (self->_centerVertically)
        {
          -[MRTextRenderer _sizeOfString:](self, "_sizeOfString:", a4);
          v51 = v50 / a6;
          v52 = 0.0;
          if (v51 < v103) {
            v52 = -(v93 + v51 * -0.5);
          }
        }

        else
        {
          v134.origin.y = y;
          v134.origin.x = CGRectZero.origin.x;
          v134.size.height = v94;
          v134.size.width = v95;
          v53 = CGRectEqualToRect(self->_imageRect, v134);
          v52 = 0.0;
          if (!v53)
          {
            v88 = -[MRTextRenderer _invertRect:inRect:]( self,  "_invertRect:inRect:",  self->_imageRect.origin.x,  self->_imageRect.origin.y,  self->_imageRect.size.width,  self->_imageRect.size.height,  v45,  0.0,  v46,  rect);
            v121 = 0u;
            v122 = 0u;
            v123 = 0u;
            v124 = 0u;
            v89 = [v88 countByEnumeratingWithState:&v121 objects:v125 count:16];
            if (v89)
            {
              v90 = v89;
              v91 = *(void *)v122;
              do
              {
                for (i = 0LL; i != v90; i = (char *)i + 1)
                {
                  if (*(void *)v122 != v91) {
                    objc_enumerationMutation(v88);
                  }
                  [*(id *)(*((void *)&v121 + 1) + 8 * (void)i) CGRectValue];
                  CGPathAddRect(Mutable, 0LL, v132);
                }

                v90 = [v88 countByEnumeratingWithState:&v121 objects:v125 count:16];
              }

              while (v90);
            }

            goto LABEL_48;
          }
        }

        v54 = v45;
        v55 = v46;
        v56 = rect;
        CGPathAddRect(Mutable, 0LL, *(CGRect *)(&v52 - 1));
LABEL_48:
        v126.location = v36;
        v126.length = 0LL;
        v57 = CTFramesetterCreateFrame(framesetter, v126, Mutable, 0LL);
        if (v57)
        {
          v58 = v57;
          v111 = Mutable;
          v112 = v37;
          CGContextScaleCTM(a3, a6, a6);
          if (v16)
          {
            v59 = (CGColor *)[v16 objectForKey:@"color"];
            v130.height = v98;
            v130.width = v99;
            CGContextSetShadowWithColor(a3, v130, blur, v59);
          }

          v60 = self;
          v61 = 0.0;
          if (!self->_columnCount) {
            v61 = v101;
          }
          CGContextTranslateCTM(a3, v100 + self->_inset.width, v102 - self->_inset.height - v61);
          CTFrameDraw(v58, a3);
          CGContextSetTextPosition(a3, 0.0, 0.0);
          Lines = CTFrameGetLines(v58);
          Count = CFArrayGetCount(Lines);
          v64 = (CGPoint *)calloc(Count, 0x10uLL);
          frame = v58;
          v127.location = v36;
          v127.length = 0LL;
          v114 = v64;
          CTFrameGetLineOrigins(v58, v127, v64);
          if (CFArrayGetCount(Lines) >= 1)
          {
            v65 = 0LL;
            v115 = Lines;
            do
            {
              v116 = v65;
              ValueAtIndex = (const __CTLine *)CFArrayGetValueAtIndex(Lines, v65);
              GlyphRuns = CTLineGetGlyphRuns(ValueAtIndex);
              if (CFArrayGetCount(GlyphRuns) >= 1)
              {
                v68 = 0LL;
                p_x = &v114[v116].x;
                do
                {
                  v70 = (const __CTRun *)CFArrayGetValueAtIndex(GlyphRuns, v68);
                  Attributes = CTRunGetAttributes(v70);
                  v72 = objc_msgSend( -[__CFDictionary objectForKey:](Attributes, "objectForKey:", @"strikethrough"),  "integerValue");
                  if (v72)
                  {
                    v73 = v72;
                    v129.location = 0LL;
                    v129.length = 0LL;
                    v74 = COERCE_DOUBLE(CTRunGetImageBounds(v70, a3, v129));
                    location = CTRunGetStringRange(v70).location;
                    v76 = v74 + CTLineGetOffsetForStringIndex(ValueAtIndex, location, 0LL) + v45 + *p_x;
                    v128.location = 0LL;
                    v128.length = 0LL;
                    TypographicBounds = CTRunGetTypographicBounds(v70, v128, &ascent, &descent, 0LL);
                    v78 = (const __CTFont *)-[__CFDictionary objectForKey:]( Attributes,  "objectForKey:",  kCTFontAttributeName);
                    -[MRTextRenderer _strikethroughThinkness:baselineOffset:lineRect:]( v60,  "_strikethroughThinkness:baselineOffset:lineRect:",  v73,  descent,  0.0,  0.0,  TypographicBounds,  descent + ascent);
                    v80 = v79;
                    v81 = p_x[1];
                    v82 = v81 + CTFontGetXHeight(v78) * 0.5;
                    v83 = v82 - v80;
                    else {
                      v84 = v82;
                    }
                    CGContextSetStrokeColorWithColor( a3,  (CGColorRef)-[__CFDictionary objectForKey:]( Attributes,  "objectForKey:",  kCTForegroundColorAttributeName));
                    CGContextSetLineWidth(a3, v80);
                    v85 = v76 - v74;
                    CGContextMoveToPoint(a3, v85, v84);
                    v86 = TypographicBounds + v85;
                    CGContextAddLineToPoint(a3, v86, v84);
                    if ((v73 & 8) != 0)
                    {
                      v87 = v83 + v80 * 2.0;
                      CGContextMoveToPoint(a3, v85, v87);
                      CGContextAddLineToPoint(a3, v86, v87);
                    }

                    CGContextStrokePath(a3);
                  }

                  ++v68;
                }

                while (v68 < CFArrayGetCount(GlyphRuns));
              }

              Lines = v115;
              v65 = v116 + 1;
            }

            while (v116 + 1 < CFArrayGetCount(v115));
          }

          free(v114);
          v36 += CTFrameGetVisibleStringRange(frame).length;
          CFRelease(frame);
          self = v60;
          uint64_t v16 = v105;
          Mutable = v111;
          v37 = v112;
        }

        CFRelease(Mutable);
        ++v37;
      }

      while (v37 != v109);
    }

    CFRelease(framesetter);
  }

          v18 = v43 + v45;
          v19 = v44 + 1;
          uint64_t v16 = v41;
          if (v44 + 1 == Count) {
            goto LABEL_34;
          }
        }

        v26 = v25;
        v27 = 0LL;
        while (1)
        {
          v28 = (const __CTRun *)CFArrayGetValueAtIndex(v24, v27);
          v29 = CTRunGetGlyphCount(v28);
          v30 = CTRunGetStringRange(v28);
          if (v30.location <= a3 && v30.location + v30.length > a3) {
            break;
          }
LABEL_28:
          v18 += v29;
          if (++v27 == v26) {
            goto LABEL_29;
          }
        }

        StringIndicesPtr = CTRunGetStringIndicesPtr(v28);
        v32 = (CFIndex *)StringIndicesPtr;
        if (!StringIndicesPtr)
        {
          v32 = (CFIndex *)malloc(8 * v29);
          v47.location = 0LL;
          v47.length = v29;
          CTRunGetStringIndices(v28, v47, v32);
        }

        if (v29 >= 2)
        {
          if (v32[1] > a3)
          {
            v33 = 1;
            v34 = 1LL;
LABEL_22:
            v17 = v18 + v34 - 1;
            if (StringIndicesPtr) {
              goto LABEL_26;
            }
LABEL_25:
            free(v32);
LABEL_26:
            if (!v33) {
              v17 = v18 + v29 - 1;
            }
            goto LABEL_28;
          }

          v35 = 2LL;
          while (v29 != v35)
          {
            v36 = v32[v35++];
            if (v36 > a3)
            {
              v34 = v35 - 1;
              v33 = v34 < v29;
              goto LABEL_22;
            }
          }
        }

        v33 = 0;
        if (StringIndicesPtr) {
          goto LABEL_26;
        }
        goto LABEL_25;
      }
    }

    v17 = 0LL;
LABEL_34:
    CFRelease(cf);
    Mutable = v39;
    id v9 = v40;
  }

  else
  {
    v17 = 0LL;
  }

  CFRelease(Mutable);
  CFRelease(v9);
  return v17;
}

void sub_2D5FC(_Unwind_Exception *a1)
{
}

void sub_2D930(_Unwind_Exception *a1)
{
}

id sub_2F0C0(uint64_t a1, void *a2, void *a3)
{
  double v7 = v6;
  double v8 = *(double *)(a1 + 48);
  signed int v9 = objc_msgSend(objc_msgSend(a2, "substringFromIndex:", 5), "intValue");
  uint64_t v10 = *(void *)(a1 + 56);
  if (v10 <= v9)
  {
    double v14 = *(double *)(a1 + 48);
    if (v8 >= 1.0)
    {
      double v11 = 1.60000002;
      double v15 = 1.5 / v14 * 1.60000002;
    }

    else
    {
      double v11 = v14 / 1.5 * 2.4000001;
      double v15 = 2.4;
    }

    double v16 = v15 * v14;
    if (v7 < 1.0) {
      double v13 = v11 / v14;
    }
    else {
      double v13 = v15;
    }
    if (v7 < 1.0) {
      double v11 = v16;
    }
  }

  else if (*(_BYTE *)(*(void *)(a1 + 32) + 329LL))
  {
    double v11 = 1.0;
    if (v7 >= 1.0)
    {
      double v13 = v7 / *(double *)(a1 + 48);
    }

    else
    {
      [*(id *)(a1 + 40) localAspectRatio];
      double v13 = flt_1F63C0[v12 >= 1.0];
      double v11 = *(double *)(a1 + 48) * v13 / v7;
    }
  }

  else
  {
    double v17 = 1.20000005;
    double v11 = 1.60000002;
    if (v7 < 1.0 != v8 < 1.0)
    {
      double v17 = 1.60000002;
      double v11 = 1.70000005;
    }

    if (v10 == 2) {
      double v11 = v17;
    }
    double v18 = *(double *)(a1 + 48);
    BOOL v19 = v7 < v18;
    double v20 = v11 * (v18 / v7);
    if (v7 >= v18) {
      double v13 = v11;
    }
    else {
      double v13 = v11 * (v7 / v18);
    }
    if (!v19) {
      double v11 = v20;
    }
  }

  return objc_msgSend( a3,  "setDefaultSize:",  v13 * (*(double *)(*(void *)(a1 + 32) + 96) * 0.5),  v11 * (*(double *)(*(void *)(a1 + 32) + 104) * 0.5));
}

LABEL_103:
          [v109 imageAspectRatio];
          v121 = 1.5;
          if (v122 < v106)
          {
            v120 = v120 + 1.57079637;
            [a4 localAspectRatio];
            v124 = v113 / v123;
            [a4 localAspectRatio];
            v113 = v112 * v125;
            v112 = v124;
            v121 = 0.666666667;
          }

          v521 = v113;
          if (height <= width || BYTE1(v6->mMaxTextSize.height))
          {
            v512 = v115;
            v516 = v116;
          }

          else
          {
            v120 = v120 + -1.57079633;
            v512 = v116;
            v516 = v115;
          }

          v502 = v120;
          v126 = v481 / v112;
          v127 = v481 / v112 * v121;
          v128 = v481 / v112 * 0.200000003;
          v129 = v120 + -0.785398185;
          v130 = __sincosf_stret(v129);
          v131 = v128 * v130.__cosval;
          v132 = v121 * v128 * v130.__sinval;
          v133 = v106 + (v126 + v126) * v105;
          v134 = v106 + v127 * 2.0;
          v135 = v134 + (v126 + v126) * 0.5 * v121;
          if (v131 + v133 * -0.5 >= -0.5 - v481 / v112) {
            v136 = -0.5 - v126;
          }
          else {
            v136 = v131 + v133 * -0.5;
          }
          v137 = -0.5 - v127;
          if (v132 + v135 * -0.5 >= -0.5 - v127) {
            v138 = -0.5 - v127;
          }
          else {
            v138 = v132 + v135 * -0.5;
          }
          v139 = v131 + v133 * 0.5;
          if (v139 < v126 + 0.5) {
            v139 = v126 + 0.5;
          }
          v140 = v139 - v136;
          v141 = v132 + v135 * 0.5;
          if (v141 < v127 + 0.5) {
            v141 = v127 + 0.5;
          }
          v142 = v141 - v138;
          v507 = v112 * v140;
          v522 = v521 * (v141 - v138);
          v143 = 4.0 / (*p_width * (v112 * v140) * 0.5);
          v144 = v143;
          v492 = (v126 * 2.0 + 1.0) / v140 + v143 * -2.0;
          v497 = (-0.5 - v126 - v136) / v140 + v143;
          v145 = (float)(v143 + v143);
          v484 = v134 / v142 - v145 * v121;
          v488 = (v137 - v138) / v142 + v143 * v121;
          v146 = objc_alloc(&OBJC_CLASS___MRTiledSprite);
          *(float *)&v147 = v502;
          v148 = -0.5 - v136;
          v106 = 1.0;
          v149 = -[MRTiledSprite initWithPosition:size:zRotation:innerRect:outerRect:context:]( v146,  "initWithPosition:size:zRotation:innerRect:outerRect:context:",  a4,  v516,  v512,  v507,  v522,  v147,  v148 / v140 + v144,  (-0.5 - v138) / v142 + v144 * v121,  1.0 / v140 - v145,  1.0 / v142 - v145 * v121,  *(void *)&v497,  *(void *)&v488,  *(void *)&v492,  *(void *)&v484);
          v542 = 0u;
          v543 = 0u;
          v544 = 0u;
          v545 = 0u;
          v150 = [*(id *)(&v6->super._isInInteractiveMode + 1) objectEnumerator];
          v151 = [v150 countByEnumeratingWithState:&v542 objects:v569 count:16];
          if (v151)
          {
            v152 = v151;
            v153 = *(void *)v543;
            do
            {
              for (i = 0LL; i != v152; i = (char *)i + 1)
              {
                if (*(void *)v543 != v153) {
                  objc_enumerationMutation(v150);
                }
                -[MRTiledSprite subtractSprite:]( v149,  "subtractSprite:",  *(void *)(*((void *)&v542 + 1) + 8LL * (void)i));
              }

              v152 = [v150 countByEnumeratingWithState:&v542 objects:v569 count:16];
            }

            while (v152);
          }

          --v102;
          double v6 = v528;
          [*(id *)(&v528->super._isInInteractiveMode + 1) setObject:v149, +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"_%d", v102) forKey];

          ++v104;
          if (BYTE1(v528->mMaxTextSize.height))
          {
            v155 = v478;
            v103 ^= v104 % v457 == 0;
            if (!(v104 % v457)) {
              v155 = v478 + 2.0;
            }
            v478 = v155;
          }

          v105 = 1.5;
          v107 = (char *)v107 + 1;
        }

        while (v107 != v476);
        v104 = (uint64_t)v476 + v442;
        v156 = [obja countByEnumeratingWithState:&v546 objects:v570 count:16];
        v476 = v156;
      }

      while (v156);
    }
  }

  v157 = (float *)[a4 foreColor];
  v158 = v157[1];
  v159 = *v157;
  v160 = v159 * 0.95;
  objb = v160;
  v161 = v158;
  v162 = v158 * 0.95;
  v453 = v162;
  v163 = v157[2];
  v164 = v157[3];
  v440 = v157;
  v165 = v163 * 0.89;
  v452 = v165;
  v458 = *v157 * 0.25;
  v462 = v158 * 0.25;
  v464 = v163 * 0.25;
  v460 = v164 * 0.5;
  v166 = v159 * 0.11;
  v477 = v166;
  v167 = v158 * 0.1;
  v474 = v167;
  v168 = v163 * 0.05;
  v450 = v168;
  v479 = v164;
  v473 = v164 * 0.0;
  v169 = v159 * 0.88;
  v470 = v169;
  v170 = v161 * 0.88;
  v469 = v170;
  v171 = v163 * 0.85;
  v467 = v171;
  MRMatrix_MultiplyWithMatrix( (float *)[a4 modelViewMatrix],  (float *)objc_msgSend(a4, "projectionMatrix"),  v568);
  v540 = 0u;
  v541 = 0u;
  v538 = 0u;
  v539 = 0u;
  v446 = *(id *)&v6->mIsLoaded;
  v172 = [v446 countByEnumeratingWithState:&v538 objects:v567 count:16];
  if (v172)
  {
    v173 = v172;
    v174 = 0LL;
    v175 = *(void *)v539;
    do
    {
      for (j = 0LL; j != v173; j = (char *)j + 1)
      {
        if (*(void *)v539 != v175) {
          objc_enumerationMutation(v446);
        }
        v177 = [*(id *)(*((void *)&v538 + 1) + 8 * (void)j) integerValue];
        double v6 = v528;
        v178 = [*(id *)(&v528->super._isInInteractiveMode + 1) objectForKey:+[NSString stringWithFormat:]( NSString, "stringWithFormat:", @"_%d", (char *)j + v174)];
        [v178 halfSize];
        v181 = v180;
        if (!BYTE1(v528->mMaxTextSize.height)) {
          goto LABEL_160;
        }
        v534 = v179;
        [v178 rotation];
        v183 = cosf(v182);
        [v178 rotation];
        v185 = sinf(v184);
        [v178 halfSize];
        v187 = v186 * v183;
        [v178 halfSize];
        v189 = v188 * v185;
        [v178 halfSize];
        v191 = v190 * v185;
        [v178 halfSize];
        v193 = v192 * v183;
        [v178 position];
        v195 = v194;
        [v178 position];
        *(float *)&v196 = v191 + v196 - v187;
        v197 = v195 - v189 - v193;
        v550[0] = *(float *)&v196;
        v550[1] = v197;
        v551 = 0x3F80000000000000LL;
        [v178 position];
        *(float *)&v198 = v198 - v187 - v191;
        v199 = v193 + v195 - v189;
        v562[0] = *(float *)&v198;
        v562[1] = v199;
        v563 = 0x3F80000000000000LL;
        [v178 position];
        *(float *)&v200 = v191 + v187 + v200;
        v201 = v189 + v195;
        v202 = v201 - v193;
        v558[0] = *(float *)&v200;
        v558[1] = v202;
        v559 = 0x3F80000000000000LL;
        [v178 position];
        *(float *)&v203 = v187 + v203 - v191;
        v204 = v193 + v201;
        v554[0] = *(float *)&v203;
        v554[1] = v204;
        v555 = 0x3F80000000000000LL;
        MRMatrix_TransformVector(v568, v550, &v564);
        MRMatrix_TransformVector(v568, v562, &v560);
        MRMatrix_TransformVector(v568, v558, &v556);
        MRMatrix_TransformVector(v568, v554, &v552);
        v205 = fabsf(v566);
        v206 = -v205;
        if (v447 == 0.0)
        {
          if (v565 <= v206)
          {
            v208 = v557;
            if (v561 <= v206 && v557 <= v206 && v553 <= v206) {
              continue;
            }
          }

          else
          {
            v208 = v557;
          }

          if (v565 < v205 || v561 < v205 || v208 < v205) {
            goto LABEL_159;
          }
          v209 = v553;
        }

        else
        {
          if (v564 <= v206)
          {
            v207 = v556;
            if (v560 <= v206 && v556 <= v206 && v552 <= v206) {
              continue;
            }
          }

          else
          {
            v207 = v556;
          }

          if (v564 < v205 || v560 < v205 || v207 < v205) {
            goto LABEL_159;
          }
          v209 = v552;
        }

        if (v209 >= v205) {
          continue;
        }
LABEL_159:
        v179 = v534;
LABEL_160:
        v210 = v181 + v181;
        v211 = v179 + v179;
        v212 = -[NSDictionary objectForKey:]( -[MRLayerEffect slideProvidersForElementIDs](v528->super.mEffectLayer, "slideProvidersForElementIDs"),  "objectForKey:",  ImageKey((int64_t)v177 + v480));
        [v212 imageAspectRatio];
        v214 = v213;
        v215 = [v212 retainedByUserRenderedImageAtTime:a4 inContext:a5 withArguments:a3];
        if ((objc_msgSend(objc_msgSend(v215, "texture"), "isMonochromatic") & 1) == 0)
        {
          v216 = [v215 retainedByUserImage];
          [v216 setFilterID:@"BlackAndWhite"];
          [v215 releaseByUser];
          v215 = v216;
        }

        [v178 setNeedsInSpriteCoordinates:1];
        v217 = v481 / v210;
        v218 = v481 / v210 * (v210 / v211);
        v219 = v211;
        v220 = v481 / v210 * 0.200000003;
        [v178 rotation];
        v535 = v210;
        v222 = v220 * cosf(v221 + -0.7854);
        if (v214 >= 1.0) {
          v223 = 1.5;
        }
        else {
          v223 = 0.666666687;
        }
        [v178 rotation];
        v225 = v220 * v223 * sinf(v224 + -0.7854);
        v226 = (v217 + v217) * 1.5 + 1.0;
        v493 = v226;
        v498 = v225;
        v227 = v218 * 2.0 + 1.0 + (v217 + v217) * 0.5 * v223;
        v489 = v227;
        v503 = v222;
        v508 = v210 * v472 / v219 * 0.0149999997;
        v228 = v222 + v226 * -0.5;
        if (v228 >= -0.5 - v217) {
          v228 = -0.5 - v217;
        }
        v229 = v228;
        v485 = v229;
        v230 = v225 + v227 * -0.5;
        if (v230 >= -0.5 - v218) {
          v230 = -0.5 - v218;
        }
        v231 = v230;
        v232 = v222 + v226 * 0.5;
        if (v232 < v217 + 0.5) {
          v232 = v217 + 0.5;
        }
        v527 = v229;
        v233 = v232 - v229;
        v234 = v225 + v227 * 0.5;
        if (v234 < v218 + 0.5) {
          v234 = v218 + 0.5;
        }
        v235 = v231;
        v523 = v231;
        v236 = v234 - v231;
        [a4 setShader:@"TableTopOuter"];
        [a4 pixelSize];
        v238 = v535 * v237 * 0.300000012;
        [a4 pixelSize];
        v240 = v219 * v239 * 0.300000012;
        *(float *)&v239 = v240;
        *(float *)&v240 = v238;
        [a4 setShaderUniformVec2:@"invRadii" :v240 forKey:v239];
        *(float *)&v241 = v217;
        *(float *)&v242 = v218;
        [a4 setShaderUniformVec2:@"borderSize" :v241 forKey:v242];
        *(float *)&v243 = v233;
        *(float *)&v244 = v236;
        [a4 setShaderUniformVec2:@"a" :v243 forKey:v244];
        *(float *)&v245 = v485;
        *(float *)&v246 = v235;
        [a4 setShaderUniformVec2:@"b" :v245 forKey:v246];
        v247 = 1.0 / v493;
        *(float *)&v247 = 1.0 / v493;
        v248 = 1.0 / v489;
        *(float *)&v248 = 1.0 / v489;
        [a4 setShaderUniformVec2:@"invShadowSize" :v247 forKey:v248];
        HIDWORD(v250) = HIDWORD(v498);
        HIDWORD(v249) = HIDWORD(v503);
        *(float *)&v249 = v503;
        *(float *)&v250 = v498;
        [a4 setShaderUniformVec2:@"shadowOffset" :v249 forKey:v250];
        v251 = 1.0 / v508;
        *(float *)&v252 = 1.0 / v508;
        LODWORD(v251) = 1116034390;
        [a4 setShaderUniformVec2:@"shadowHardness" :v251 forKey:v252];
        *(float *)&v253 = objb;
        *(float *)&v254 = v453;
        *(float *)&v255 = v452;
        *(float *)&v256 = v479;
        [a4 setShaderUniformVec4:@"borderColor" :v253 :v254 :v255 forKey:v256];
        *(float *)&v257 = v458;
        *(float *)&v258 = v462;
        *(float *)&v259 = v464;
        *(float *)&v260 = v460;
        [a4 setShaderUniformVec4:@"shadowColor" :v257 :v258 :v259 forKey:v260];
        [a4 blend:5];
        [v178 renderImageOuter:v215 inContext:a4];
        [a4 blend:0];
        [a4 unsetShader];
        [a4 setShader:@"TableTopMiddle"];
        v261 = v535 * *p_width * 0.300000012;
        *(float *)&v261 = v261;
        v262 = v219 * p_width[1] * 0.300000012;
        *(float *)&v262 = v262;
        [a4 setShaderUniformVec2:@"invRadii" :v261 forKey:v262];
        *(float *)&v263 = objb;
        *(float *)&v264 = v453;
        *(float *)&v265 = v452;
        *(float *)&v266 = v479;
        [a4 setShaderUniformVec4:@"borderColor" :v263 :v264 :v265 forKey:v266];
        *(float *)&v267 = v477;
        *(float *)&v268 = v474;
        *(float *)&v269 = v450;
        *(float *)&v270 = v473;
        [a4 setShaderUniformVec4:@"offsetColor" :v267 :v268 :v269 forKey:v270];
        *(float *)&v271 = v470;
        *(float *)&v272 = v469;
        *(float *)&v273 = v467;
        *(float *)&v274 = v479;
        [a4 setShaderUniformVec4:@"factorColor" :v271 :v272 :v273 forKey:v274];
        objc_msgSend(v178, "setSpriteCoordinatesFactor:andOffset:", v233, v236, v527, v523);
        [v178 renderImageMiddle:v215 inContext:a4];
        objc_msgSend(v178, "setSpriteCoordinatesFactor:andOffset:", 1.0, 1.0, 0.0, 0.0);
        [a4 unsetShader];
        [v178 setNeedsInSpriteCoordinates:0];
        [a4 setShader:@"TableTopInner"];
        *(float *)&v275 = v477;
        *(float *)&v276 = v474;
        *(float *)&v277 = v450;
        *(float *)&v278 = v473;
        [a4 setShaderUniformVec4:@"offsetColor" :v275 :v276 :v277 forKey:v278];
        *(float *)&v279 = v470;
        *(float *)&v280 = v469;
        *(float *)&v281 = v467;
        *(float *)&v282 = v479;
        [a4 setShaderUniformVec4:@"factorColor" :v279 :v280 :v281 forKey:v282];
        [v178 renderImageInner:v215 inContext:a4];
        [a4 unsetShader];
        [v215 releaseByUser];
      }

      v173 = [v446 countByEnumeratingWithState:&v538 objects:v567 count:16];
      v174 = (v174 + (_DWORD)j);
    }

    while (v173);
  }

  v283 = 0LL;
  v443 = CGPointZero.y;
  do
  {
    v284 = ImageKey(v283);
    v285 = -[NSDictionary objectForKey:]( -[MRLayerEffect slideProvidersForElementIDs](v6->super.mEffectLayer, "slideProvidersForElementIDs"),  "objectForKey:",  v284);
    v286 = [v285 retainedByUserRenderedImageAtTime:a4 inContext:a5 withArguments:a3];
    v287 = v286;
    if (BYTE1(v6->mMaxTextSize.height)) {
      [v286 setScale:1.0];
    }
    v288 = [*(id *)(&v6->super._isInInteractiveMode + 1) objectForKey:v284];
    [v288 halfSize];
    v290 = v289 + v289;
    v292 = v291 + v291;
    v529 = v291 + v291;
    [v285 imageAspectRatio];
    v294 = v293;
    [v288 position];
    v536 = v295;
    v517 = v296 * v472;
    v524 = v292 * v472;
    v297 = (char *)&v6->mSprites + 1;
    [*(id *)((char *)&(&v6->mSprites)[v283] + 1) setNeedsInSpriteCoordinates:1];
    v298 = v481 / v290;
    v299 = v290 / v292 * v298;
    v300 = v298 * 0.2;
    [v288 rotation];
    v302 = cosf(v301 + -0.7854) * v300;
    [v288 rotation];
    v304 = (float)(v294 * v300) * sinf(v303 + -0.7854);
    v449 = v304;
    v305 = (float)((float)(v298 + v298) * 1.5) + 1.0;
    v448 = v305;
    v306 = (float)((float)(v299 * 2.0) + 1.0) + (float)((float)((float)(v298 + v298) * 0.5) * v294);
    v307 = v290 * v472 / v529 * (float)(v298 * 0.5);
    v494 = v307;
    v486 = v302;
    else {
      v308 = v302 + (float)(v305 * -0.5);
    }
    else {
      v309 = v304 + (float)(v306 * -0.5);
    }
    v310 = v302 + (float)(v305 * 0.5);
    v311 = v310 - v308;
    v504 = v310 - v308;
    v312 = v308;
    v513 = v308;
    v313 = v304 + (float)(v306 * 0.5);
    v314 = v313 - v309;
    v509 = v313 - v309;
    [a4 setShader:@"TableTopOuter"];
    v315 = v290 * *p_width * 0.300000012;
    *(float *)&v315 = v315;
    v316 = v529 * p_width[1] * 0.300000012;
    *(float *)&v316 = v316;
    [a4 setShaderUniformVec2:@"invRadii" :v315 forKey:v316];
    *(float *)&v317 = v481 / v290;
    *(float *)&v318 = v299;
    [a4 setShaderUniformVec2:@"borderSize" :v317 forKey:v318];
    *(float *)&v319 = v311;
    *(float *)&v320 = v314;
    [a4 setShaderUniformVec2:@"a" :v319 forKey:v320];
    *(float *)&v321 = v312;
    *(float *)&v322 = v309;
    [a4 setShaderUniformVec2:@"b" :v321 forKey:v322];
    *(float *)&v323 = 1.0 / v448;
    *(float *)&v324 = 1.0
                    / (float)((float)((float)(v299 * 2.0) + 1.0) + (float)((float)((float)(v298 + v298) * 0.5) * v294));
    [a4 setShaderUniformVec2:@"invShadowSize" :v323 forKey:v324];
    *(float *)&v325 = v486;
    *(float *)&v326 = v449;
    [a4 setShaderUniformVec2:@"shadowOffset" :v325 forKey:v326];
    *(float *)&v327 = 1.0 / (float)(v298 * 0.5);
    *(float *)&v328 = 1.0 / v494;
    [a4 setShaderUniformVec2:@"shadowHardness" :v327 forKey:v328];
    *(float *)&v329 = objb;
    *(float *)&v330 = v453;
    *(float *)&v331 = v452;
    *(float *)&v332 = v479;
    [a4 setShaderUniformVec4:@"borderColor" :v329 :v330 :v331 forKey:v332];
    *(float *)&v333 = v458;
    *(float *)&v334 = v462;
    *(float *)&v335 = v464;
    *(float *)&v336 = v460;
    [a4 setShaderUniformVec4:@"shadowColor" :v333 :v334 :v335 forKey:v336];
    [a4 blend:5];
    v337 = *(void **)&v297[8 * v283];
    [v288 rotation];
    LODWORD(v339) = v338;
    objc_msgSend( v337,  "renderImageOuter:inContext:atPosition:andSize:zRotation:",  v287,  a4,  v536,  v517,  v290,  v524,  v339);
    [a4 blend:0];
    [a4 unsetShader];
    [a4 setShader:@"TableTopMiddle"];
    v340 = v290 * *p_width * 0.300000012;
    *(float *)&v340 = v340;
    v341 = v529 * p_width[1] * 0.300000012;
    *(float *)&v341 = v341;
    [a4 setShaderUniformVec2:@"invRadii" :v340 forKey:v341];
    *(float *)&v342 = objb;
    *(float *)&v343 = v453;
    *(float *)&v344 = v452;
    *(float *)&v345 = v479;
    [a4 setShaderUniformVec4:@"borderColor" :v342 :v343 :v344 forKey:v345];
    *(float *)&v346 = v477;
    *(float *)&v347 = v474;
    *(float *)&v348 = v450;
    *(float *)&v349 = v473;
    [a4 setShaderUniformVec4:@"offsetColor" :v346 :v347 :v348 forKey:v349];
    *(float *)&v350 = v470;
    *(float *)&v351 = v469;
    *(float *)&v352 = v467;
    *(float *)&v353 = v479;
    [a4 setShaderUniformVec4:@"factorColor" :v350 :v351 :v352 forKey:v353];
    objc_msgSend(*(id *)&v297[8 * v283], "setSpriteCoordinatesFactor:", v504, v509);
    objc_msgSend(*(id *)&v297[8 * v283], "setSpriteCoordinatesOffset:", v513, v309);
    v354 = *(void **)&v297[8 * v283];
    [v288 rotation];
    LODWORD(v356) = v355;
    objc_msgSend( v354,  "renderImageMiddle:inContext:atPosition:andSize:zRotation:",  v287,  a4,  v536,  v517,  v290,  v524,  v356);
    objc_msgSend(*(id *)&v297[8 * v283], "setSpriteCoordinatesFactor:", 1.0, 1.0);
    objc_msgSend(*(id *)&v297[8 * v283], "setSpriteCoordinatesOffset:", CGPointZero.x, v443);
    [a4 unsetShader];
    [*(id *)&v297[8 * v283] setNeedsInSpriteCoordinates:0];
    [a4 setShader:@"TableTopInner"];
    *(float *)&v357 = v477;
    *(float *)&v358 = v474;
    *(float *)&v359 = v450;
    *(float *)&v360 = v473;
    [a4 setShaderUniformVec4:@"offsetColor" :v357 :v358 :v359 forKey:v360];
    *(float *)&v361 = v470;
    *(float *)&v362 = v469;
    *(float *)&v363 = v467;
    *(float *)&v364 = v479;
    [a4 setShaderUniformVec4:@"factorColor" :v361 :v362 :v363 forKey:v364];
    v365 = *(void **)&v297[8 * v283];
    [v288 rotation];
    LODWORD(v367) = v366;
    objc_msgSend( v365,  "renderImageInner:inContext:atPosition:andSize:zRotation:",  v287,  a4,  v536,  v517,  v290,  v524,  v367);
    [a4 unsetShader];
    [v287 releaseByUser];
    ++v283;
  }

  while (v480 != v283);
  if (*(MRCroppingSprite **)((char *)&v6->mExtraSprites[1] + 1))
  {
    v368 = objc_msgSend( -[NSDictionary objectForKey:]( v6->super.mFlattenedAttributes,  "objectForKey:",  @"layout"),  "isEqualToString:",  @"Left");
    v369 = [*(id *)((char *)&v6->mExtraSprites[1] + 1) retainedByUserRenderedImageAtTime:a4 inContext:a5 withArguments:a3];
    [*(id *)((char *)&v6->mExtraSprites[1] + 1) imageAspectRatio];
    v371 = v370;
    [a4 localAspectRatio];
    v373 = (float)(1.12 / (float)(v372 * v371));
    if (BYTE1(v6->mMaxTextSize.height))
    {
      v374 = [*(id *)(&v6->super._isInInteractiveMode + 1) objectForKey:ImageKey(0)];
      [v374 position];
      v376 = v375;
      v378 = v377;
      [v374 halfSize];
      v380 = v379 + v379;
      [v374 halfSize];
      v382 = v381 + v381;
      [a4 localAspectRatio];
      v384 = v382 * v383;
      v385 = p_width;
      if (v441 >= 1.0)
      {
        v532 = v378 - v384 * 0.5 - v373 * 0.5;
        v537 = v376 - v380 * 0.5 + 0.560000002 + 0.100000001;
      }

      else
      {
        v537 = v376 + v380 * 0.5 + 0.560000002 + -0.100000001;
        v386 = v378 + v384 * 0.5;
        [a4 localAspectRatio];
        v532 = v386 + v373 * -0.5 * v387 + -0.300000012;
      }
    }

    else
    {
      v388 = 0.400000006;
      if (v368) {
        v388 = -0.370000005;
      }
      v537 = v388;
      v532 = -0.800000012;
      v385 = p_width;
    }

    MRMatrix_Clear((uint64_t)v550);
    *(float *)&v389 = MRMatrix_SetRotationFromAnglesXYZRad((uint64_t)v550, 0.0, 0.0, -0.05236);
    objc_msgSend(a4, "composeModelViewMatrix:saveTo:", v550, 0, v389);
    v390 = v481 / 1.12 * 0.200000003;
    v391 = v390 * v371 * -0.74314487;
    v514 = v481 / 1.12 + 1.0;
    v518 = v391;
    v392 = v481 / 1.12 * v371 + 1.0;
    v510 = v392;
    v530 = v481 / 1.12 * 0.5;
    v531 = v530 * (v472 * 1.12 / v373);
    v525 = v390 * 0.669130564;
    v393 = fmin(v390 * 0.669130564 + v514 * -0.5, -0.5);
    v394 = fmin(v391 + v392 * -0.5, -0.5);
    v395 = v390 * 0.669130564 + v514 * 0.5;
    if (v395 < 0.5) {
      v395 = 0.5;
    }
    v396 = v395 - v393;
    v397 = v391 + v392 * 0.5;
    if (v397 < 0.5) {
      v397 = 0.5;
    }
    v398 = v397 - v394;
    v490 = (v397 - v394) * *v385 / v385[1] * v373;
    v399 = 4.0 / (v396 * 1.12 * *v385 * 0.5);
    [*(id *)((char *)&v6->mTextSprite + 1) setNeedsInSpriteCoordinates:0];
    objc_msgSend( *(id *)((char *)&v6->mTextSprite + 1),  "setInnerRect:",  (-0.5 - v393) / v396 + v399,  (-0.5 - v394) / v398 + (float)(v371 * v399),  1.0 / v396 - (float)(v399 + v399),  1.0 / v398 - (float)((float)(v399 + v399) * v371));
    [a4 setShader:@"TableTopInner"];
    v400 = *v440 * 0.2;
    v505 = v400;
    v401 = v440[1] * 0.19;
    v499 = v401;
    v402 = v440[2] * 0.14;
    v495 = v402;
    objc_msgSend(a4, "setShaderUniformVec4::::forKey:", @"offsetColor");
    *(float *)&v403 = v470;
    *(float *)&v404 = v469;
    *(float *)&v405 = v467;
    *(float *)&v406 = v479;
    [a4 setShaderUniformVec4:@"factorColor" :v403 :v404 :v405 forKey:v406];
    LODWORD(v407) = 0;
    objc_msgSend( *(id *)((char *)&v6->mTextSprite + 1),  "renderImageInner:inContext:atPosition:andSize:zRotation:",  v369,  a4,  v537,  v532,  v396 * 1.12,  v490,  v407);
    [a4 unsetShader];
    [a4 blend:5];
    [*(id *)((char *)&v6->mTextSprite + 1) setNeedsInSpriteCoordinates:1];
    [a4 setShader:@"TableTopOuterNoBorder"];
    v408 = v396 * 1.12 * *v385 * 0.300000012;
    *(float *)&v408 = v408;
    v409 = v490 * v385[1] * 0.300000012;
    *(float *)&v409 = v409;
    [a4 setShaderUniformVec2:@"invRadii" :v408 forKey:v409];
    *(float *)&v410 = v396;
    *(float *)&v411 = v398;
    [a4 setShaderUniformVec2:@"a" :v410 forKey:v411];
    *(float *)&v412 = v393;
    *(float *)&v413 = v394;
    [a4 setShaderUniformVec2:@"b" :v412 forKey:v413];
    v414 = 1.0 / v514;
    *(float *)&v414 = 1.0 / v514;
    v415 = 1.0 / v510;
    *(float *)&v415 = 1.0 / v510;
    [a4 setShaderUniformVec2:@"invShadowSize" :v414 forKey:v415];
    HIDWORD(v417) = HIDWORD(v518);
    HIDWORD(v416) = HIDWORD(v525);
    *(float *)&v416 = v525;
    *(float *)&v417 = v518;
    [a4 setShaderUniformVec2:@"shadowOffset" :v416 forKey:v417];
    v418 = 1.0 / v530;
    *(float *)&v418 = 1.0 / v530;
    v419 = 1.0 / v531;
    *(float *)&v419 = 1.0 / v531;
    [a4 setShaderUniformVec2:@"shadowHardness" :v418 forKey:v419];
    *(float *)&v420 = v458;
    *(float *)&v421 = v462;
    *(float *)&v422 = v464;
    *(float *)&v423 = v460;
    [a4 setShaderUniformVec4:@"shadowColor" :v420 :v421 :v422 forKey:v423];
    LODWORD(v424) = 0;
    *(float *)&v425 = v505;
    *(float *)&v426 = v499;
    *(float *)&v427 = v495;
    [a4 setShaderUniformVec4:@"offsetColor" :v425 :v426 :v427 forKey:v424];
    *(float *)&v428 = v470;
    *(float *)&v429 = v469;
    *(float *)&v430 = v467;
    *(float *)&v431 = v479;
    [a4 setShaderUniformVec4:@"factorColor" :v428 :v429 :v430 forKey:v431];
    LODWORD(v432) = 0;
    objc_msgSend( *(id *)((char *)&v6->mTextSprite + 1),  "renderImageOuter:inContext:atPosition:andSize:zRotation:",  v369,  a4,  v537,  v532,  v396 * 1.12,  v490,  v432);
    [a4 unsetShader];
    [v369 releaseByUser];
    if (*(MRTextRenderer **)((char *)&v6->mTextRenderer + 1))
    {
      [a4 blend:2];
      [a4 setShader:@"PlainTexture"];
      objc_msgSend(*(id *)((char *)&v6->mTextRenderer + 1), "relativeSizeInContextPixelSize:", *v385, v385[1]);
      v434 = v433;
      v436 = v435;
      v437 = v537 - v396 * 1.12 * 0.5 + v433 * 0.5 + 0.0399999991;
      v438 = v532 + 0.159999996;
      if (-[NSString isEqualToString:]( -[MRLayerEffect editedElement](v6->super.mEffectLayer, "editedElement"),  "isEqualToString:",  @"text0")
        && -[MRLayerEffect _hideTextWhileEditing](v6->super.mEffectLayer, "_hideTextWhileEditing"))
      {
        LODWORD(v439) = 0;
        objc_msgSend( *(id *)((char *)&v6->mTextImage + 1),  "fakeRenderInContext:atPosition:andSize:zRotation:",  a4,  v437,  v438,  v434,  v436,  v439);
      }

      else
      {
        objc_msgSend( *(id *)((char *)&v6->mTextImage + 1),  "renderImage:inContext:atPosition:andSize:",  *(MRTextRenderer **)((char *)&v6->mTextRenderer + 1),  a4,  v437,  v438,  v434,  v436);
      }

      [a4 unsetShader];
    }

    [a4 blend:0];
  }

  [a4 restoreModelViewMatrix:v571];
}

void sub_325E0(_Unwind_Exception *a1)
{
}

void sub_329D8(_Unwind_Exception *a1)
{
}

void sub_32AFC(_Unwind_Exception *a1)
{
}

void sub_32B80(_Unwind_Exception *a1)
{
}

void sub_32C04(_Unwind_Exception *a1)
{
}

void sub_32C88(_Unwind_Exception *a1)
{
}

void sub_32D58(_Unwind_Exception *a1)
{
}

void sub_32E28(_Unwind_Exception *a1)
{
}

void sub_333C4(_Unwind_Exception *a1)
{
}

void sub_33434(_Unwind_Exception *a1)
{
}

void sub_33498(_Unwind_Exception *a1)
{
}

LABEL_10:
  double v16 = -[NSMutableDictionary initWithDictionary:]( objc_alloc(&OBJC_CLASS___NSMutableDictionary),  "initWithDictionary:",  self->_authoringOptions);
  double v17 = objc_msgSend( -[NSMutableDictionary objectForKey:](v16, "objectForKey:", kMPAuthoringLive),  "BOOLValue");
  double v18 = objc_msgSend( +[MPStyleManager sharedManager](MPStyleManager, "sharedManager"),  "isDynamicForStyleID:",  a3);
  if (!v17) {
    goto LABEL_20;
  }
  BOOL v19 = v18;
  double v20 = -[NSMutableDictionary objectForKey:](v16, "objectForKey:", kMPAuthoringLiveMaxSlidePreload);
  if (!v20)
  {
    v21 = (_BYTE *)(&dword_C + 3);
    if (!v19) {
      goto LABEL_14;
    }
    goto LABEL_13;
  }

  v21 = (char *)[v20 integerValue];
  if (v19)
  {
LABEL_13:
    v21 = (char *)objc_msgSend( +[MPStyleManager sharedManager](MPStyleManager, "sharedManager"),  "dynamicBatchSizeForStyleID:",  a3);
    v22 = +[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", v21);
    -[NSMutableDictionary setObject:forKey:](v16, "setObject:forKey:", v22, kMPAuthoringDynamicMinimumSlidesToAdd);
  }

        float v12 = (char *)v12 + 1;
      }

      while (v10 != v12);
      v28 = [v8 countByEnumeratingWithState:&v30 objects:v34 count:16];
      uint64_t v10 = v28;
    }

    while (v28);
  }

  return v7;
}

  v21 = objc_msgSend( -[NSDictionary objectForKey:]( -[MRLayerEffect slideProvidersForElementIDs](self->super.mEffectLayer, "slideProvidersForElementIDs"),  "objectForKey:",  @"image0"),  "retainedByUserRenderedImageAtTime:inContext:withArguments:",  a4,  a5,  a3);
  if (v15)
  {
    v22 = (a3 - self->super.mPhaseInDuration) / self->super.mMainDuration;
    v23 = 0.0;
    if (v22 >= 0.0)
    {
      v23 = (a3 - self->super.mPhaseInDuration) / self->super.mMainDuration;
      if (v22 > 1.0) {
        v23 = 1.0;
      }
    }

    -[MREffectOrigamiTitle renderBreakImage:atProgress:withKey:inContext:withArguments:inRect:withAttributes:]( self,  "renderBreakImage:atProgress:withKey:inContext:withArguments:inRect:withAttributes:",  v21,  @"image0",  a4,  a5,  0LL,  v23,  x,  y,  width,  height);
  }

  else
  {
    -[MREffectOrigamiTitle renderStillImage:withKey:inContext:withArguments:inRect:withAttributes:]( self,  "renderStillImage:withKey:inContext:withArguments:inRect:withAttributes:",  v21,  @"image0",  a4,  a5,  0LL,  x,  y,  width,  height);
  }

  [v21 releaseByUser];
  if (-[NSString isEqualToString:]( -[MRLayerEffect editedElement](self->super.mEffectLayer, "editedElement"),  "isEqualToString:",  @"text0")
    && -[MRLayerEffect _hideTextWhileEditing](self->super.mEffectLayer, "_hideTextWhileEditing"))
  {
    LODWORD(v24) = 0;
    objc_msgSend( *(id *)((char *)&self->mText0Renderer + 1),  "fakeRenderInContext:atPosition:andSize:zRotation:",  a4,  v19,  v18,  v13,  v26,  v24);
  }

  else
  {
    [a4 blend:2];
    [a4 setShader:@"PlainTexture"];
    LODWORD(v25) = 0;
    objc_msgSend( *(id *)((char *)&self->mText0Renderer + 1),  "renderImage:inContext:atPosition:andSize:zRotation:",  *(NSMutableArray **)((char *)&self->mText0Offsets + 1),  a4,  v19,  v18,  v13,  v26,  v25);
    [a4 unsetShader];
    [a4 blend:0];
  }

  self->_verticalCubeCount = numberOfTilesY;
  self->_horizontalCubeCount = self->_numberOfTilesX;
  double v14 = self->super._direction - 1LL;
  if (!self->_cubes)
  {
    mSourceLayer = self->super.mSourceLayer;
    -[MRLayerClock externalTime](-[MRLayer clock](mSourceLayer, "clock"), "externalTime");
    double v16 = -[MRLayer retainedByUserRenderedImageAtTime:inContext:withArguments:]( mSourceLayer,  "retainedByUserRenderedImageAtTime:inContext:withArguments:",  a4,  a5);
    self->_sourceImage = v16;
    if (v16)
    {
      if (-[MRImage isEmpty](v16, "isEmpty"))
      {
        sourceImage = self->_sourceImage;
        if (sourceImage)
        {
          -[MRImage releaseByUser](sourceImage, "releaseByUser");
          self->_sourceImage = 0LL;
        }
      }
    }

    mTargetLayer = self->super.mTargetLayer;
    -[MRLayerClock externalTime](-[MRLayer clock](mTargetLayer, "clock"), "externalTime");
    BOOL v19 = -[MRLayer retainedByUserRenderedImageAtTime:inContext:withArguments:]( mTargetLayer,  "retainedByUserRenderedImageAtTime:inContext:withArguments:",  a4,  a5);
    self->_destinationImage = v19;
    if (v19)
    {
      if (-[MRImage isEmpty](v19, "isEmpty"))
      {
        destinationImage = self->_destinationImage;
        if (destinationImage)
        {
          -[MRImage releaseByUser](destinationImage, "releaseByUser");
          self->_destinationImage = 0LL;
        }
      }
    }

    *(float *)&double v20 = v10;
    -[MRTransitionRevolutionsFlip setupCubesWithLocalAspectRatio:](self, "setupCubesWithLocalAspectRatio:", v20);
  }

  if ((self->_flipDirection - 3) <= 1)
  {
    v39 = -1082130432;
    v40 = -(float)(1.0 / v10);
    v41 = -1082130432;
    v42 = v40;
    v43 = 1065353216;
    v44 = v40;
    v45 = 1065353216;
    v46 = v40;
    v47 = 1065353216;
    v48 = 1.0 / v10;
    v49 = 1065353216;
    v50 = 1.0 / v10;
    v51 = -1082130432;
    v52 = 1.0 / v10;
    v53 = -1082130432;
    v54 = 1.0 / v10;
    v38[0] = xmmword_1FBD7C;
    v38[1] = unk_1FBD8C;
    v38[2] = xmmword_1FBD9C;
    v38[3] = unk_1FBDAC;
    [a4 setImage:self->_sourceImage onTextureUnit:0 withReferenceAspectRatio:&v37 state:COERCE_DOUBLE(LODWORD(v10) | 0x3F80000000000000)];
    *(float *)&v22 = v10;
    [a4 setImage:self->_destinationImage onTextureUnit:1 withReferenceAspectRatio:&v36 state:v22];
    [a4 setShader:@"TransitionDissolve"];
    *(float *)&v23 = a3;
    [a4 setShaderUniformFloat:@"progress" forKey:v23];
    [a4 setVertex2DPointer:&v39];
    [a4 setTextureCoordinatesPointer:v38 onTextureUnit:0];
    [a4 setTextureCoordinatesPointer:v38 onTextureUnit:1];
    [a4 drawTriangleStripFromOffset:0 count:8];
    [a4 unsetTextureCoordinatesPointerOnTextureUnit:1];
    [a4 unsetTextureCoordinatesPointerOnTextureUnit:0];
    [a4 unsetVertexPointer];
    [a4 unsetShader];
    [a4 unsetImage:self->_destinationImage onTextureUnit:1 state:&v36];
    [a4 unsetImage:self->_sourceImage onTextureUnit:0 state:&v37];
  }

  [a4 setShader:@"PlainTextureNoColor"];
  [a4 blend:0];
  switch(self->_flipDirection)
  {
    case 1:
      if (self->_numberOfTilesX)
      {
        v24 = 0LL;
        do
        {
          v25 = -[NSMutableArray objectAtIndex:](self->_cubeRows, "objectAtIndex:", 0LL);
          v33[0] = _NSConcreteStackBlock;
          v33[1] = 3221225472LL;
          v33[2] = sub_19A26C;
          v33[3] = &unk_258CB8;
          *(double *)&v33[7] = a3;
          v33[4] = self;
          v33[5] = a4;
          v33[6] = a5;
          [v25 enumerateIndexesUsingBlock:v33];
          ++v24;
        }

        while (v24 < self->_numberOfTilesX);
      }

      break;
    case 2:
      v26 = self->_numberOfTilesX - 1 + 1LL;
      do
      {
        v27 = -[NSMutableArray objectAtIndex:](self->_cubeRows, "objectAtIndex:", 0LL);
        v32[0] = _NSConcreteStackBlock;
        v32[1] = 3221225472LL;
        v32[2] = sub_19A2CC;
        v32[3] = &unk_258CB8;
        *(double *)&v32[7] = a3;
        v32[4] = self;
        v32[5] = a4;
        v32[6] = a5;
        [v27 enumerateIndexesUsingBlock:v32];
        --v26;
      }

      while (v26);
      break;
    case 3:
      v28 = self->_numberOfTilesY - 1 + 1LL;
      do
      {
        v29 = -[NSMutableArray objectAtIndex:](self->_cubeColumns, "objectAtIndex:", 0LL);
        v35[0] = _NSConcreteStackBlock;
        v35[1] = 3221225472LL;
        v35[2] = sub_19A1AC;
        v35[3] = &unk_258CB8;
        *(double *)&v35[7] = a3;
        v35[4] = self;
        v35[5] = a4;
        v35[6] = a5;
        [v29 enumerateIndexesUsingBlock:v35];
        --v28;
      }

      while (v28);
      break;
    case 4:
      if (self->_numberOfTilesY)
      {
        v30 = 0LL;
        do
        {
          v31 = -[NSMutableArray objectAtIndex:](self->_cubeColumns, "objectAtIndex:", 0LL);
          v34[0] = _NSConcreteStackBlock;
          v34[1] = 3221225472LL;
          v34[2] = sub_19A20C;
          v34[3] = &unk_258CB8;
          *(double *)&v34[7] = a3;
          v34[4] = self;
          v34[5] = a4;
          v34[6] = a5;
          [v31 enumerateIndexesUsingBlock:v34];
          ++v30;
        }

        while (v30 < self->_numberOfTilesY);
      }

      break;
    default:
      break;
  }

  [a4 cull:0];
  [a4 unsetShader];
  [a4 depthTest:0];
}

LABEL_14:
  v23 = -[MPLayerGroup lastSlideUsed](self, "lastSlideUsed");
  v24 = (char *)-[NSMutableArray count](self->_userProvidedVideoPaths, "count");
  if (&v24[-v23] < v21) {
    v21 = &v24[-v23];
  }
  v25 = -[NSMutableDictionary objectForKeyedSubscript:](v16, "objectForKeyedSubscript:", kMPAuthoringUseTitleEffect);
  if (!v25 || [v25 BOOLValue])
  {
    v26 = +[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", v23 == 0);
    -[NSMutableDictionary setObject:forKey:](v16, "setObject:forKey:", v26, kMPAuthoringUseTitleEffect);
  }

  v27 = +[NSValue valueWithRange:](&OBJC_CLASS___NSValue, "valueWithRange:", v23, v21);
  -[NSMutableDictionary setObject:forKey:](v16, "setObject:forKey:", v27, kMPAuthoringVideoPathIndicies);
  v28 = +[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", 1LL);
  -[NSMutableDictionary setObject:forKey:](v16, "setObject:forKey:", v28, kMPAuthoringLiveReset);
LABEL_20:
  v29 = objc_msgSend( +[MPAuthoringController sharedController](MPAuthoringController, "sharedController"),  "authorLayerGroup:inDocument:withOptions:",  self,  -[MPLayerGroup parentDocument](self, "parentDocument"),  v16);
  -[NSRecursiveLock unlock](-[MPLayerGroupInternal liveLock](self->_internal, "liveLock"), "unlock");

  if (v29 != (id)-1LL)
  {
    -[MPLayerGroup reconfigureLoopingMode](self, "reconfigureLoopingMode");
    if (v5 != objc_msgSend( +[MPStyleManager sharedManager](MPStyleManager, "sharedManager"),  "antialiasLevelForStyleID:",  a3)) {
      -[NSNotificationCenter postNotificationName:object:]( +[NSNotificationCenter defaultCenter](&OBJC_CLASS___NSNotificationCenter, "defaultCenter"),  "postNotificationName:object:",  @"documentAntialiasLevelDidChange",  -[MPLayerGroup parentDocument](self, "parentDocument"));
    }
  }

  if (-[MPLayerGroupInternal sendLiveNotification](self->_internal, "sendLiveNotification"))
  {
    v30 = +[NSNotificationCenter defaultCenter](&OBJC_CLASS___NSNotificationCenter, "defaultCenter");
    -[NSNotificationCenter postNotificationName:object:userInfo:]( v30,  "postNotificationName:object:userInfo:",  kMPAuthoringLiveDidChangeNotification,  -[MPLayerGroup parentDocument](self, "parentDocument"),  0LL);
    -[MPLayerGroupInternal setSendLiveNotification:](self->_internal, "setSendLiveNotification:", 0LL);
  }

  if (v17)
  {
    v31 = -[MPLayerGroup authoringOptions](self, "authoringOptions");
    v32 = [v31 objectForKey:kMPAuthoringLiveMissedImages];
    if (v32) {
      v33 = (char *)[v32 count];
    }
    else {
      v33 = 0LL;
    }
    v34 = -[MPLayerGroup lastSlideUsed](self, "lastSlideUsed");
    if ((char *)v34 >= &v33[(void)-[NSMutableArray count](self->_userProvidedVideoPaths, "count")]
      || -[MPLayerGroupInternal usedAllPaths](self->_internal, "usedAllPaths"))
    {
      v35 = +[NSNotificationCenter defaultCenter](&OBJC_CLASS___NSNotificationCenter, "defaultCenter");
      -[NSNotificationCenter postNotificationName:object:userInfo:]( v35,  "postNotificationName:object:userInfo:",  kMPAuthoringLiveUsedAllPathsNotification,  -[MPLayerGroup parentDocument](self, "parentDocument"),  0LL);
      if ((char *)-[MPLayerGroup loopingMode](self, "loopingMode") == (char *)&dword_4 + 1
        || (char *)-[MPLayerGroup loopingMode](self, "loopingMode") == (char *)&dword_0 + 2)
      {
        else {
          v36 = v34;
        }
        -[MPLayerGroup setLastSlideUsed:](self, "setLastSlideUsed:", v36);
      }
    }

    -[MPLayerGroupInternal setUsedAllPaths:](self->_internal, "setUsedAllPaths:", 0LL);
  }

  return (unint64_t)v29;
}

      glDisableVertexAttribArray(4u);
      goto LABEL_15;
    }

  objc_sync_exit(mAnimationPaths);
}

  float v12 = objc_msgSend( objc_msgSend( objc_msgSend( objc_msgSend( objc_msgSend( +[MPStyleManager sharedManager](MPStyleManager, "sharedManager"),  "descriptionForStyleID:",  -[MPDocument styleID](self, "styleID")),  "objectForKey:",  @"layout"),  "objectForKey:",  v5),  "objectForKey:",  @"zIndex"),  "integerValue");
  double v11 = -[MPDocument objectInLayersAtIndex:](self, "objectInLayersAtIndex:", v12);
LABEL_16:
  double v13 = objc_msgSend(objc_msgSend(v11, "effectContainers"), "objectAtIndex:", 0);
  double v14 = [v3 objectForKey:@"backgroundEffect"];
  if (v14) {
    double v15 = 2LL;
  }
  else {
    double v15 = 1LL;
  }
  double v16 = objc_msgSend(objc_msgSend(v13, "effects"), "count");
  id result = 0LL;
  return result;
}

  double v18 = *(void **)(*(void *)(a1 + 32) + 72LL);
  if (v18) {
    [v18 currentTime];
  }
  else {
    memset(&time, 0, sizeof(time));
  }
  *(Float64 *)(*(void *)(a1 + 32) + 32LL) = CMTimeGetSeconds(&time);
}

  double v15 = [*(id *)((char *)&self->mChapterDurations + 1) count];
  else {
    return v5;
  }
}

  objc_sync_exit(mAnimationPaths);
}

  objc_sync_exit(mAnimationPaths);
}

  objc_sync_exit(mAnimationPaths);
}

void sub_3418C(_Unwind_Exception *a1)
{
}

void sub_341F0(_Unwind_Exception *a1)
{
}

void sub_34324(_Unwind_Exception *a1)
{
}

LABEL_23:
    double v17 = -[MCContainerParallelizer plugForID:]( self->_parallelizer,  "plugForID:",  -[MPLayerGroupInternal backgroundAudioID](self->_internal, "backgroundAudioID"));
    if (v17)
    {
      double v18 = v17;
      [v17 setNumberOfLoops:25000.0];
      audioPlaylist = self->_audioPlaylist;
      if (audioPlaylist) {
        -[MPAudioPlaylist duration](audioPlaylist, "duration");
      }
      else {
        double v20 = 0.0;
      }
      [v18 setLoopDuration:v20];
    }

    return;
  }

  if ((char *)-[MPLayerGroup loopingMode](self, "loopingMode") == (char *)&dword_0 + 1)
  {
    double v8 = -[MCContainerParallelizer plugForID:]( self->_parallelizer,  "plugForID:",  -[MPLayerGroupInternal backgroundAudioID](self->_internal, "backgroundAudioID"));
    if (v8)
    {
      signed int v9 = v8;
      [v8 setNumberOfLoops:1.0];
      uint64_t v10 = self->_audioPlaylist;
      if (v10) {
        -[MPAudioPlaylist duration](v10, "duration");
      }
      else {
        double v11 = 0.0;
      }
      [v9 setLoopDuration:v11];
    }

    -[MPLayerGroup setNumberOfLoops:](self, "setNumberOfLoops:", 25000.0);
    v55 = 0u;
    v56 = 0u;
    v53 = 0u;
    v54 = 0u;
    v31 = self->_layers;
    v32 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( v31,  "countByEnumeratingWithState:objects:count:",  &v53,  v64,  16LL);
    if (v32)
    {
      v33 = v32;
      v34 = *(void *)v54;
      do
      {
        for (j = 0LL; j != v33; j = (char *)j + 1)
        {
          if (*(void *)v54 != v34) {
            objc_enumerationMutation(v31);
          }
          [*(id *)(*((void *)&v53 + 1) + 8 * (void)j) setNumberOfLoops:1.0];
        }

        v33 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( v31,  "countByEnumeratingWithState:objects:count:",  &v53,  v64,  16LL);
      }

      while (v33);
    }
  }

  else
  {
    if ((char *)-[MPLayerGroup loopingMode](self, "loopingMode") == (char *)&dword_0 + 2)
    {
      -[MPLayerGroup setNumberOfLoops:](self, "setNumberOfLoops:", 1.0);
      v51 = 0u;
      v52 = 0u;
      v49 = 0u;
      v50 = 0u;
      float v12 = self->_layers;
      double v13 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( v12,  "countByEnumeratingWithState:objects:count:",  &v49,  v63,  16LL);
      if (v13)
      {
        double v14 = v13;
        double v15 = *(void *)v50;
        do
        {
          for (k = 0LL; k != v14; k = (char *)k + 1)
          {
            if (*(void *)v50 != v15) {
              objc_enumerationMutation(v12);
            }
            [*(id *)(*((void *)&v49 + 1) + 8 * (void)k) setNumberOfLoops:25000.0];
          }

          double v14 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( v12,  "countByEnumeratingWithState:objects:count:",  &v49,  v63,  16LL);
        }

        while (v14);
      }

      goto LABEL_23;
    }

    v21 = -[MPLayerGroup loopingMode](self, "loopingMode");
    v22 = -[MCContainerParallelizer plugForID:]( self->_parallelizer,  "plugForID:",  -[MPLayerGroupInternal backgroundAudioID](self->_internal, "backgroundAudioID"));
    v23 = v22;
    if (v21 == 5)
    {
      if (v22)
      {
        [v22 setNumberOfLoops:25000.0];
        -[MPLayerGroup videoDuration](self, "videoDuration");
        objc_msgSend(v23, "setLoopDuration:");
      }

      -[MPLayerGroup setNumberOfLoops:](self, "setNumberOfLoops:", 25000.0);
      v47 = 0u;
      v48 = 0u;
      v45 = 0u;
      v46 = 0u;
      v24 = self->_layers;
      v25 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( v24,  "countByEnumeratingWithState:objects:count:",  &v45,  v62,  16LL);
      if (v25)
      {
        v26 = v25;
        v27 = *(void *)v46;
        do
        {
          for (m = 0LL; m != v26; m = (char *)m + 1)
          {
            if (*(void *)v46 != v27) {
              objc_enumerationMutation(v24);
            }
            [*(id *)(*((void *)&v45 + 1) + 8 * (void)m) setNumberOfLoops:25000.0];
          }

          v26 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( v24,  "countByEnumeratingWithState:objects:count:",  &v45,  v62,  16LL);
        }

        while (v26);
      }
    }

    else
    {
      if (v22)
      {
        [v22 setNumberOfLoops:1.0];
        v29 = self->_audioPlaylist;
        if (v29) {
          -[MPAudioPlaylist duration](v29, "duration");
        }
        else {
          v30 = 0.0;
        }
        [v23 setLoopDuration:v30];
      }

      -[MPLayerGroup setNumberOfLoops:](self, "setNumberOfLoops:", 1.0);
      v43 = 0u;
      v44 = 0u;
      v41 = 0u;
      v42 = 0u;
      v36 = self->_layers;
      v37 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( v36,  "countByEnumeratingWithState:objects:count:",  &v41,  v61,  16LL);
      if (v37)
      {
        v38 = v37;
        v39 = *(void *)v42;
        do
        {
          for (n = 0LL; n != v38; n = (char *)n + 1)
          {
            if (*(void *)v42 != v39) {
              objc_enumerationMutation(v36);
            }
            [*(id *)(*((void *)&v41 + 1) + 8 * (void)n) setNumberOfLoops:1.0];
          }

          v38 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( v36,  "countByEnumeratingWithState:objects:count:",  &v41,  v61,  16LL);
        }

        while (v38);
      }
    }
  }

LABEL_8:
  double v6 = 0;
  return ((v4 | v6) & 1) == 0 && !self->super.mNeedsToUpdateTexts;
}

  if (self->mIsFastScrubbing)
  {
    [a4 depthTest:1];
    double v13 = (__int128 *)[a4 modelViewMatrix];
    double v15 = *v13;
    double v14 = v13[1];
    double v16 = v13[3];
    v44[2] = v13[2];
    v45 = v16;
    v44[0] = v15;
    v44[1] = v14;
    v36 = DWORD2(v16);
    [a4 setShader:@"PlainTexture"];
    double v17 = objc_msgSend(-[MCContainer orderedPlugs](self->mContainer, "orderedPlugs"), "count");
    v39 = 0u;
    v40 = 0u;
    v41 = 0u;
    v42 = 0u;
    double v18 = -[MCContainer orderedPlugs](self->mContainer, "orderedPlugs");
    BOOL v19 = [v18 countByEnumeratingWithState:&v39 objects:v43 count:16];
    if (v19)
    {
      double v20 = v19;
      v21 = *(void *)v40;
      v37 = (double)(unint64_t)v17;
      v38 = (float)(unint64_t)v17;
      do
      {
        for (i = 0LL; i != v20; i = (char *)i + 1)
        {
          if (*(void *)v40 != v21) {
            objc_enumerationMutation(v18);
          }
          v23 = *(void **)(*((void *)&v39 + 1) + 8LL * (void)i);
          v24 = [v23 container];
          v26 = objc_opt_class(&OBJC_CLASS___MCContainerEffect, v25);
          if ((objc_opt_isKindOfClass(v24, v26) & 1) != 0)
          {
            v27 = objc_msgSend(objc_msgSend(v23, "container"), "slideAtIndex:", 0);
            if (v27)
            {
              v28 = objc_msgSend( objc_msgSend(a4, "imageManager"),  "retainedByUserThumbnailForAssetAtPath:",  objc_msgSend(objc_msgSend(v27, "asset"), "path"));
              v29 = ((double)((unint64_t)[v23 index] - self->mFastScrubbingStartIndex)
                   - self->mFastScrubbingProgress)
                  / v38
                  * 10.0;
              v30 = exp((float)-(float)(v29 * v29));
              *((float *)&v45 + 2) = v30;
              [a4 setModelViewMatrix:v44 saveTo:0];
              v31 = [v23 index];
              v32 = v30 * -0.577 + 1.0;
              v33 = ((double)(unint64_t)v31 * 1.8 / v37 + -0.9) * v32;
              v34 = v32 * -0.8;
              [a4 localAspectRatio];
              +[MRCroppingSprite renderDumbImage:inContext:atPosition:andSize:]( &OBJC_CLASS___MRCroppingSprite,  "renderDumbImage:inContext:atPosition:andSize:",  v28,  a4,  v33,  v34,  0.1,  0.15 / v35);
            }
          }
        }

        double v20 = [v18 countByEnumeratingWithState:&v39 objects:v43 count:16];
      }

      while (v20);
    }

    [a4 unsetShader];
    DWORD2(v45) = v36;
    [a4 setModelViewMatrix:v44 saveTo:0];
    [a4 depthTest:0];
  }

  uint64_t v10 = +[OKPresentationWidget widgetWithName:templateName:className:settings:userData:subWidgets:materials:]( &OBJC_CLASS___OKPresentationWidget,  "widgetWithName:templateName:className:settings:userData:subWidgets:materials:",  @"marimba",  @"Marimba",  0LL,  v4,  0LL,  0LL,  0LL);

  double v11 = +[NSMutableDictionary dictionary](&OBJC_CLASS___NSMutableDictionary, "dictionary");
  [v11 setObject:@"page.data = null;" forKey:@"didAppearActionScript"];
  float v12 = v10;
  objc_msgSend( -[OpusMarimbaProducer presentation](self, "presentation"),  "addPageTemplate:",  +[OKPresentationPage pageWithName:templateName:navigatorName:properties:settings:userData:widgets:]( OKPresentationPage,  "pageWithName:templateName:navigatorName:properties:settings:userData:widgets:",  @"MarimbaPage",  0,  0,  0,  v11,  0,  +[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v12, 1)));
}

  objc_sync_exit(mAnimationPaths);
  -[MCAnimationPathCombo didChangeValueForKey:withSetMutation:usingObjects:]( self,  "didChangeValueForKey:withSetMutation:usingObjects:",  @"animationPaths",  1LL,  v11);
}

    double v17 = v183;
    double v13 = (int64_t)[v183 count];
    v159 = 0LL;
    goto LABEL_9;
  }

    [v17 imageAspectRatio];
    -[MREffectSlidingPanels _sizeForBreakAspectRatio:size:inContext:]( self,  "_sizeForBreakAspectRatio:size:inContext:",  a3);
    width = v18;
    height = v19;
    goto LABEL_9;
  }

  double v11 = v5 * a3;
  float v12 = *a1 + a1[2];
  double v13 = a2 & 0xC;
  if (v13 == 12)
  {
    double v15 = v4 * v12;
  }

  else
  {
    double v14 = v12;
    if (v13 == 8)
    {
      double v15 = (v14 + -1.0) * v4 + 1.0;
    }

    else
    {
      double v15 = (v14 + 1.0) * v4 + -1.0;
      if (v13 != 4) {
        double v15 = *a1 + a1[2];
      }
    }
  }

  double v16 = (v5 + a1[3]) * a3;
  double v17 = a4 / a3;
  double v18 = v11;
  BOOL v19 = a2 & 0x30;
  if (v19 == 48)
  {
    double v18 = v17 * v18;
  }

  else
  {
    if (v19 == 32)
    {
      double v20 = v18 + -1.0;
      v21 = v17;
      v22 = 1.0;
    }

    else
    {
      if (v19 != 16) {
        goto LABEL_22;
      }
      double v20 = v18 + 1.0;
      v21 = v17;
      v22 = -1.0;
    }

    double v18 = v22 + v20 * v21;
  }

  objc_sync_exit(mAnimationPaths);
  -[MCPlug didChangeValueForKey:withSetMutation:usingObjects:]( self,  "didChangeValueForKey:withSetMutation:usingObjects:",  @"animationPaths",  1LL,  v11);
}

  objc_autoreleasePoolPop(v5);
}

  objc_sync_exit(mAnimationPaths);
  -[MCSlide didChangeValueForKey:withSetMutation:usingObjects:]( self,  "didChangeValueForKey:withSetMutation:usingObjects:",  @"animationPaths",  1LL,  v11);
}

  objc_sync_exit(mAnimationPaths);
  -[MCFilter didChangeValueForKey:withSetMutation:usingObjects:]( self,  "didChangeValueForKey:withSetMutation:usingObjects:",  @"animationPaths",  1LL,  v11);
}

LABEL_12:
    *(float *)&float v12 = v14;
    LODWORD(v14) = 1.0;
    LODWORD(v10) = 1.0;
    LODWORD(v11) = 1.0;
    [a4 composeForeColorRed:v39 green:v14 blue:v10 alpha:v11 saveTo:v12];
LABEL_13:
    double v16 = *(MRTextRenderer **)((char *)&self->mTextRenderer1 + 1);
    if (!v16) {
      goto LABEL_25;
    }
    [v16 width];
    double v18 = v17 / self->super.mPixelSize.width;
    [*(id *)((char *)&self->mTextRenderer1 + 1) height];
    double v20 = v19 / self->super.mPixelSize.height + v19 / self->super.mPixelSize.height;
    v21 = *(double *)((char *)&self->mTextSprite1 + 1);
    v22 = *(double *)((char *)&self->mText0Rect.origin.x + 1);
    v23 = -[NSDictionary objectForKey:]( self->super.mFlattenedAttributes,  "objectForKey:",  @"text0VerticalAlignment");
    if (!v23)
    {
      v25 = v22;
      goto LABEL_22;
    }

    v24 = v23;
    v25 = 0.0;
    if ([v24 isEqualToString:@"Top"])
    {
      [a4 localAspectRatio];
      v27 = (float)(2.0 / v26);
      v28 = -0.5;
    }

    else
    {
      v25 = v22;
      [a4 localAspectRatio];
      v27 = (float)(-2.0 / v29);
      v28 = 0.5;
    }

    v25 = v27 + v20 * v28;
LABEL_22:
    v30 = v18 + v18;
    if (!-[NSString isEqualToString:]( -[MRLayerEffect editedElement](self->super.mEffectLayer, "editedElement"),  "isEqualToString:",  @"text0")
      || !-[MRLayerEffect _hideTextWhileEditing](self->super.mEffectLayer, "_hideTextWhileEditing"))
    {
      [a4 setShader:@"PlainTexture"];
      objc_msgSend( *(id *)((char *)&self->mImage1 + 1),  "renderImage:inContext:atPosition:andSize:",  *(MRTextRenderer **)((char *)&self->mTextRenderer1 + 1),  a4,  v21,  v25,  v30,  v20);
      v32 = 1;
LABEL_27:
      v33 = *(MRImage **)((char *)&self->mImage0 + 1);
      if (v33)
      {
        [v33 width];
        v35 = v34 / self->super.mPixelSize.width + v34 / self->super.mPixelSize.width;
        [*(id *)((char *)&self->mImage0 + 1) height];
        v37 = v36 / self->super.mPixelSize.height + v36 / self->super.mPixelSize.height;
        if (!-[NSString isEqualToString:]( -[MRLayerEffect editedElement](self->super.mEffectLayer, "editedElement"),  "isEqualToString:",  @"text1")
          || !-[MRLayerEffect _hideTextWhileEditing](self->super.mEffectLayer, "_hideTextWhileEditing"))
        {
          if ((v32 & 1) == 0) {
            [a4 setShader:@"PlainTexture"];
          }
          objc_msgSend( *(id *)((char *)&self->mTextSprite0 + 1),  "renderImage:inContext:atPosition:andSize:",  *(MRImage **)((char *)&self->mImage0 + 1),  a4,  *(double *)((char *)&self->mText0Rect.size.height + 1),  *(double *)((char *)&self->mText1Rect.origin.x + 1),  v35,  v37);
          goto LABEL_39;
        }

        LODWORD(v3_Block_object_dispose((const void *)(v1 - 80), 8) = 0;
        objc_msgSend( *(id *)((char *)&self->mTextSprite0 + 1),  "fakeRenderInContext:atPosition:andSize:zRotation:",  a4,  *(double *)((char *)&self->mText0Rect.size.height + 1),  *(double *)((char *)&self->mText1Rect.origin.x + 1),  v35,  v37,  v38);
      }

      if (!v32)
      {
        if (!v8)
        {
LABEL_34:
          [a4 blend:0];
          return;
        }

        [v8 demolish];
      }

      uint64_t v5 = -[NSMutableSet countByEnumeratingWithState:objects:count:]( v4,  "countByEnumeratingWithState:objects:count:",  &v17,  v21,  16LL);
      if (!v5)
      {
LABEL_14:
        objc_sync_enter(self);
        double v15 = self->mAnimationPaths;
        self->mAnimationPaths = 0LL;
        objc_sync_exit(self);
        objc_sync_exit(obj);
        return;
      }
    }
  }

  if (result == -1.0) {
    return 1.0;
  }
  return result;
}

  v3[v7] = a3;
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8 * v7) + 8LL) = a1;
  return v9;
}

  v3[v7] = a3;
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8 * v7) + 8LL) = a1;
  return v9;
}

        [v8 demolish];
      }

      uint64_t v5 = -[NSMutableSet countByEnumeratingWithState:objects:count:]( v4,  "countByEnumeratingWithState:objects:count:",  &v17,  v21,  16LL);
      if (!v5)
      {
LABEL_14:
        objc_sync_enter(self);
        double v15 = self->mAnimationPaths;
        self->mAnimationPaths = 0LL;
        objc_sync_exit(self);
        objc_sync_exit(obj);
        return;
      }
    }
  }

        [v8 demolish];
      }

      uint64_t v5 = -[NSMutableSet countByEnumeratingWithState:objects:count:]( v4,  "countByEnumeratingWithState:objects:count:",  &v17,  v21,  16LL);
      if (!v5)
      {
LABEL_14:
        objc_sync_enter(self);
        double v15 = self->mAnimationPaths;
        self->mAnimationPaths = 0LL;
        objc_sync_exit(self);
        objc_sync_exit(obj);
        return;
      }
    }
  }

        [v8 demolish];
      }

      uint64_t v5 = -[NSMutableSet countByEnumeratingWithState:objects:count:]( v4,  "countByEnumeratingWithState:objects:count:",  &v17,  v21,  16LL);
      if (!v5)
      {
LABEL_14:
        objc_sync_enter(self);
        double v15 = self->mAnimationPaths;
        self->mAnimationPaths = 0LL;
        objc_sync_exit(self);
        objc_sync_exit(obj);
        return;
      }
    }
  }

LABEL_39:
      [a4 unsetShader];
      if (!v8) {
        goto LABEL_34;
      }
      goto LABEL_33;
    }

    LODWORD(v31) = 0;
    objc_msgSend( *(id *)((char *)&self->mImage1 + 1),  "fakeRenderInContext:atPosition:andSize:zRotation:",  a4,  v21,  v25,  v30,  v20,  v31);
LABEL_25:
    v32 = 0;
    goto LABEL_27;
  }

                          v23 += v31;
                        }

                        v27 = [v85 countByEnumeratingWithState:&v103 objects:v123 count:16];
                      }

                      while (v27);
                    }

                    v24 = v83 + 1;
                  }

                  while ((id)(v83 + 1) != v82);
                  v82 = [v80 countByEnumeratingWithState:&v107 objects:v124 count:16];
                }

                while (v82);
              }

              if (v77 != (_BYTE *)&dword_0 + 1)
              {
                v35 = objc_msgSend(objc_msgSend(v79, "effectContainers"), "reverseObjectEnumerator");
                for (k = v35; ; v35 = k)
                {
                  v37 = [v35 nextObject];
                  if (!v37) {
                    break;
                  }
                  v101 = 0u;
                  v102 = 0u;
                  v99 = 0u;
                  v100 = 0u;
                  v38 = [v37 effects];
                  v39 = [v38 countByEnumeratingWithState:&v99 objects:v122 count:16];
                  if (v39)
                  {
                    v40 = v39;
                    v41 = *(void *)v100;
LABEL_51:
                    v42 = 0LL;
                    while (1)
                    {
                      if (*(void *)v100 != v41) {
                        objc_enumerationMutation(v38);
                      }
                      v43 = *(void **)(*((void *)&v99 + 1) + 8 * v42);
                      if ([v43 countOfSlides] != (char *)&dword_0 + 1
                        || (objc_msgSend( objc_msgSend( objc_msgSend(v43, "objectInSlidesAtIndex:", 0),  "userInfoAttributeForKey:",  @"hasSubtitle"),  "BOOLValue") & 1) != 0)
                      {
                        goto LABEL_44;
                      }

                      [v84 addObject:v43];
                      if (v40 == (id)++v42)
                      {
                        v40 = [v38 countByEnumeratingWithState:&v99 objects:v122 count:16];
                        if (v40) {
                          goto LABEL_51;
                        }
                        break;
                      }
                    }
                  }
                }
              }

    mGeometry = v15;
  }

LABEL_59:
  BYTE1(self->mText1Rect.size.height) = 1;
}

      v40 = self->mCurrentTransition;
      if (self->mTransitionIsBackwards)
      {
        -[MRTransition setSourceLayer:](v40, "setSourceLayer:", *p_mNextSublayer);
        v41 = &self->mCurrentSublayer;
      }

      else
      {
        -[MRTransition setSourceLayer:](v40, "setSourceLayer:", *p_mCurrentSublayer);
        v41 = &self->mNextSublayer;
      }

      -[MRTransition setTargetLayer:](self->mCurrentTransition, "setTargetLayer:", *v41);
      self->_previouslyRenderedTransitionProgress = -1.0;
LABEL_63:
      v42 = -[MRLayer isPreactivated](*p_mNextSublayer, "isPreactivated");
      v43 = *p_mNextSublayer;
      if ((v42 & 1) != 0)
      {
        if (-[MRLayer isActivated](v43, "isActivated")) {
          -[MRLayer deactivate](*p_mNextSublayer, "deactivate");
        }
      }

      else
      {
        -[MRLayer preactivate](v43, "preactivate");
      }

      startTime = self->mTransitionChanges->startTime;
      if (-[MRTransition isSplit](self->mCurrentTransition, "isSplit"))
      {
        v44 = *p_mCurrentSublayer;
        if (self->mTransitionIsBackwards)
        {
          -[MRLayerClock phaseInDuration](-[MRLayer clock](v44, "clock"), "phaseInDuration");
          v46 = v45;
          -[MCPlug phaseOutDuration](-[MRLayer plug](*p_mNextSublayer, "plug"), "phaseOutDuration");
        }

        else
        {
          -[MRLayerClock phaseOutDuration](-[MRLayer clock](v44, "clock"), "phaseOutDuration");
          v46 = v48;
          -[MCPlug phaseInDuration](-[MRLayer plug](*p_mNextSublayer, "plug"), "phaseInDuration");
        }

        self->mTransitionDuration = v46 + v47;
        if (self->mControlsSublayerTimes) {
          goto LABEL_75;
        }
        -[MRLayerClock phaseOutDuration](-[MRLayer clock](*p_mCurrentSublayer, "clock"), "phaseOutDuration");
        v50 = v49;
        -[MRLayerClock containerTime](-[MRLayer clock](*p_mCurrentSublayer, "clock"), "containerTime");
        -[MRLayer setDuration:](*p_mCurrentSublayer, "setDuration:", v50 + v51);
        startTime = startTime + v50;
      }

      if (!self->mControlsSublayerTimes)
      {
        self->mTotalMotionDuration = self->mTransitionDuration;
LABEL_77:
        if (self->mPausedSublayersForTransition || self->mIsInSlideFocusMode)
        {
          -[MRLayerClock pauseOnNextUpdate](-[MRLayer clock](*p_mCurrentSublayer, "clock"), "pauseOnNextUpdate");
          -[MRLayerClock pauseOnNextUpdate](-[MRLayer clock](*p_mNextSublayer, "clock"), "pauseOnNextUpdate");
          -[MRLayerClock setContainerTime:]( -[MRLayer clock](*p_mNextSublayer, "clock"),  "setContainerTime:",  self->mNextSublayerInterestingTime);
        }

        self->_pauseWhenTransitionEnds = -[MRLayerClock selfIsPaused](self->super.mClock, "selfIsPaused");
        -[MRLayerClock resumeOnNextUpdate](self->super.mClock, "resumeOnNextUpdate");
        v27 = 1;
        goto LABEL_81;
      }

void MyCGImageBufferReleaseCallback(int a1, void *a2)
{
  if (a2) {
    free(a2);
  }
}

void PerformSynchronouslyOnRenderQueue(dispatch_queue_s *a1, uint64_t a2)
{
  if (dispatch_get_specific(sRenderDispatchQueueSpecificKey))
  {
    (*(void (**)(uint64_t))(a2 + 16))(a2);
  }

  else
  {
    id v4 = dispatch_semaphore_create(0LL);
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472LL;
    v6[2] = sub_3C334;
    v6[3] = &unk_24D990;
    v6[4] = v4;
    v6[5] = a2;
    dispatch_block_t v5 = dispatch_block_create_with_qos_class( DISPATCH_BLOCK_ENFORCE_QOS_CLASS|DISPATCH_BLOCK_DETACHED,  QOS_CLASS_USER_INITIATED,  0,  v6);
    dispatch_async(a1, v5);
    dispatch_semaphore_wait(v4, 0xFFFFFFFFFFFFFFFFLL);
    dispatch_release(v4);
    _Block_release(v5);
  }

uint64_t sub_3C334(uint64_t a1)
{
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void PerformAsynchronouslyOnRenderQueueIfNotOnRenderQueue( dispatch_queue_s *a1, void (**a2)(void))
{
  if (dispatch_get_specific(sRenderDispatchQueueSpecificKey)) {
    a2[2](a2);
  }
  else {
    dispatch_async(a1, a2);
  }
}

void sub_3CA84(uint64_t a1)
{
  v2 = *(void **)(a1 + 32);
  uint64_t v3 = (void *)v2[2];
  if (v3)
  {
    [*(id *)(*(void *)(a1 + 32) + 16) cleanup];

    *(void *)(*(void *)(a1 + 32) + 16LL) = 0LL;
    *(void *)(*(void *)(*(void *)(a1 + 32) + 40LL) + 304LL) = 0LL;

    *(void *)(*(void *)(*(void *)(a1 + 32) + 40LL) + 312LL) = 0LL;
    *(void *)(*(void *)(*(void *)(a1 + 32) + 40LL) + 320LL) = 0LL;

    *(void *)(*(void *)(*(void *)(a1 + 32) + 40LL) + 328LL) = 0LL;
    *(void *)(*(void *)(*(void *)(a1 + 32) + 40LL) + 336LL) = 0LL;

    *(void *)(*(void *)(*(void *)(a1 + 32) + 40LL) + 296LL) = 0LL;
    v2 = *(void **)(a1 + 32);
  }

  id v4 = *(void **)(v2[5] + 8LL);
  if (v4)
  {
    [v4 purgeResources:1];
    [*(id *)(*(void *)(*(void *)(a1 + 32) + 40) + 1008) releaseByUser];
    *(void *)(*(void *)(*(void *)(a1 + 32) + 40LL) + 1008LL) = 0LL;
    objc_msgSend( +[MRShaderManager sharedManager](MRShaderManager, "sharedManager"),  "forgetContext:",  *(void *)(*(void *)(*(void *)(a1 + 32) + 40) + 8));
    [*(id *)(*(void *)(*(void *)(a1 + 32) + 40) + 8) cleanup];

    *(void *)(*(void *)(*(void *)(a1 + 32) + 40LL) + 8LL) = 0LL;
    v2 = *(void **)(a1 + 32);
  }

  dispatch_block_t v5 = (void *)v2[1];
  if (v5)
  {
    objc_msgSend(v5, "removeObserver:forKeyPath:");
    [*(id *)(*(void *)(a1 + 32) + 8) removeObserver:*(void *)(a1 + 32) forKeyPath:@"fadeInDuration"];
    [*(id *)(*(void *)(a1 + 32) + 8) removeObserver:*(void *)(a1 + 32) forKeyPath:@"fadeOutDuration"];

    *(void *)(*(void *)(a1 + 32) + 8LL) = 0LL;
  }

void sub_3CD60(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = *(id *)(a1 + 40);
  if (*(_BYTE *)(v2 + 141))
  {
    if (v3 || !*(void *)(*(void *)(v2 + 40) + 8LL)) {
      return;
    }
  }

  else if (v3)
  {
    if (v3 == [*(id *)(*(void *)(v2 + 40) + 8) glContext]) {
      return;
    }
    uint64_t v2 = *(void *)(a1 + 32);
  }

  [(id)v2 setScreenBurnTest:0];
  uint64_t v4 = *(void *)(a1 + 32);
  if (*(double *)(*(void *)(v4 + 40) + 240LL) > 0.0)
  {
    objc_msgSend((id)v4, "_r_endMorphing");
    uint64_t v4 = *(void *)(a1 + 32);
  }

  if (*(void *)(v4 + 16))
  {
    unsigned int v5 = [*(id *)(v4 + 16) isPreactivated];
    uint64_t v4 = *(void *)(a1 + 32);
    if (v5)
    {
      if (*(void *)(*(void *)(v4 + 40) + 296LL)) {
        [(id)v4 currentSlideshowTime];
      }
      else {
        [(id)v4 time];
      }
      objc_msgSend(*(id *)(a1 + 32), "_r_setTime:isResyncing:", 0);
      [*(id *)(*(void *)(a1 + 32) + 16) depreactivate:0];
      uint64_t v4 = *(void *)(a1 + 32);
    }
  }

  *(CGSize *)(v4 + 24) = CGSizeZero;
  uint64_t v6 = *(void *)(*(void *)(a1 + 32) + 40LL);
  if (*(void *)(v6 + 8))
  {
    [*(id *)(v6 + 1008) releaseByUser];
    *(void *)(*(void *)(*(void *)(a1 + 32) + 40LL) + 1008LL) = 0LL;
    objc_msgSend( +[MRShaderManager sharedManager](MRShaderManager, "sharedManager"),  "forgetContext:",  *(void *)(*(void *)(*(void *)(a1 + 32) + 40) + 8));
    [*(id *)(*(void *)(*(void *)(a1 + 32) + 40) + 8) cleanup];

    *(void *)(*(void *)(*(void *)(a1 + 32) + 40LL) + 8LL) = 0LL;
    uint64_t v6 = *(void *)(*(void *)(a1 + 32) + 40LL);
  }

  *(void *)(*(void *)(*(void *)(a1 + 32) + 40LL) + 1016LL) = 0LL;
  if (*(void *)(a1 + 40))
  {
    *(void *)(*(void *)(*(void *)(a1 + 32) + 40) + 8) = -[MRContext initWithEAGLContext:andAssetManager:]( [MRContext alloc],  "initWithEAGLContext:andAssetManager:",  *(void *)(a1 + 40),  [*(id *)(a1 + 32) assetManagementDelegate]);
    double v7 = *(void **)(*(void *)(a1 + 32) + 16LL);
    if (v7)
    {
      [v7 preactivate];
      [*(id *)(a1 + 32) _time];
      objc_msgSend(objc_msgSend(*(id *)(*(void *)(a1 + 32) + 16), "clock"), "setContainerTime:", v8);
      [*(id *)(*(void *)(a1 + 32) + 16) activate];
    }
  }

MRLayerParallelizer *sub_3CFE8(uint64_t a1)
{
  id result = *(MRLayerParallelizer **)(a1 + 32);
  if (!BYTE5(result->super.mPersistentState) || !*(void *)(a1 + 40) && result->super.mSuperlayer)
  {
    -[MRLayerParallelizer _r_pause](result, "_r_pause");
    [*(id *)(a1 + 32) setScreenBurnTest:0];
    id v3 = *(id **)(a1 + 32);
    if (v3[2])
    {
      [*(id *)(*(void *)(a1 + 32) + 16) cleanup];

      *(void *)(*(void *)(a1 + 32) + 16LL) = 0LL;
      *(void *)(*(void *)(*(void *)(a1 + 32) + 40LL) + 304LL) = 0LL;

      *(void *)(*(void *)(*(void *)(a1 + 32) + 40LL) + 312LL) = 0LL;
      *(void *)(*(void *)(*(void *)(a1 + 32) + 40LL) + 320LL) = 0LL;

      *(void *)(*(void *)(*(void *)(a1 + 32) + 40LL) + 328LL) = 0LL;
      *(void *)(*(void *)(*(void *)(a1 + 32) + 40LL) + 336LL) = 0LL;

      *(void *)(*(void *)(*(void *)(a1 + 32) + 40LL) + 296LL) = 0LL;
      id v3 = *(id **)(a1 + 32);
    }

    [v3 willChangeValueForKey:@"montage"];
    uint64_t v4 = *(void **)(*(void *)(a1 + 32) + 8LL);
    if (v4)
    {
      objc_msgSend(v4, "removeObserver:forKeyPath:");
      [*(id *)(*(void *)(a1 + 32) + 8) removeObserver:*(void *)(a1 + 32) forKeyPath:@"fadeInDuration"];
      [*(id *)(*(void *)(a1 + 32) + 8) removeObserver:*(void *)(a1 + 32) forKeyPath:@"fadeOutDuration"];

      *(void *)(*(void *)(a1 + 32) + 8LL) = 0LL;
    }

    *(void *)(*(void *)(a1 + 32) + 8LL) = *(id *)(a1 + 40);
    [*(id *)(a1 + 32) didChangeValueForKey:@"montage"];
    id result = *(MRLayerParallelizer **)(*(void *)(a1 + 32) + 8LL);
    if (result)
    {
      -[MRLayerParallelizer addObserver:forKeyPath:options:context:](result, "addObserver:forKeyPath:options:context:");
      [*(id *)(*(void *)(a1 + 32) + 8) addObserver:*(void *)(a1 + 32) forKeyPath:@"fadeInDuration" options:0 context:0];
      [*(id *)(*(void *)(a1 + 32) + 8) addObserver:*(void *)(a1 + 32) forKeyPath:@"fadeOutDuration" options:0 context:0];
      [*(id *)(a1 + 32) resetFadeInAndOut];
      objc_msgSend(*(id *)(a1 + 32), "_r_setTime:isResyncing:", 0, 0.0);
      objc_msgSend(objc_msgSend(*(id *)(*(void *)(a1 + 32) + 8), "rootPlug"), "setLoopDuration:", 1.0e100);
      id result = -[MRLayerParallelizer initWithPlug:andParameters:inSuperlayer:]( [MRLayerParallelizer alloc],  "initWithPlug:andParameters:inSuperlayer:",  [*(id *)(*(void *)(a1 + 32) + 8) rootPlug],  *(void *)(*(void *)(a1 + 32) + 200),  0);
      *(void *)(*(void *)(a1 + 32) + 16LL) = result;
      uint64_t v5 = *(void *)(a1 + 32);
      uint64_t v6 = *(void *)(v5 + 40);
      if (*(void *)(v6 + 8))
      {
        [*(id *)(v5 + 16) updateGeometry];
        [*(id *)(*(void *)(a1 + 32) + 16) preactivate];
        id result = (MRLayerParallelizer *)[*(id *)(*(void *)(a1 + 32) + 16) activate];
        uint64_t v6 = *(void *)(*(void *)(a1 + 32) + 40LL);
      }

      *(_BYTE *)(v6 + 211) = 1;
    }
  }

  return result;
}

id sub_3D3B0(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_r_syncIsPlayingToOuter");
}

id sub_3D438(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_r_syncIsPlayingToOuter");
}

id sub_3D98C(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_r_renderWithPassParameters:", &off_26F6C8);
}

id sub_3D9FC(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_r_renderWithPassParameters:", &off_26F6F0);
}

id sub_3DB30(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  v4[0] = @"forceRendering";
  v4[1] = @"thumbnailPolicy";
  v5[0] = &__kCFBooleanTrue;
  v5[1] = +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", 1LL);
  id result = objc_msgSend( v2,  "_r_renderWithPassParameters:",  +[NSDictionary dictionaryWithObjects:forKeys:count:]( NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v5,  v4,  2));
  if (*(_BYTE *)(a1 + 48)) {
    return (id)dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 40));
  }
  return result;
}

id sub_3DD04(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_r_stopRenderTimer");
}

id sub_3DE34(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_r_updateTimeWithDisplayLinkTimestamp:", *(double *)(a1 + 40));
}

id sub_3DEA0(uint64_t a1)
{
  id result = *(id *)(a1 + 32);
  id v3 = *(void **)(a1 + 40);
  if (result == (id)v3[8])
  {
    [result targetTimestamp];
    objc_msgSend(v3, "_r_updateTimeWithDisplayLinkTimestamp:");
    return objc_msgSend(*(id *)(a1 + 40), "_r_renderWithPassParameters:", 0);
  }

  return result;
}

void sub_3E0C8(_Unwind_Exception *a1)
{
}

id sub_3E0E0(uint64_t a1)
{
  id result = objc_msgSend(*(id *)(a1 + 32), "_r_prerenderWithPassParameters:", *(void *)(a1 + 40));
  *(_BYTE *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL) = (_BYTE)result;
  return result;
}

id sub_3E998(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_r_render");
}

id sub_3FFD0(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_r_syncTimeToOuter");
}

double *sub_40308(double *result)
{
  uint64_t v1 = *((void *)result + 4);
  if (!*(_BYTE *)(v1 + 141))
  {
    *(double *)(v1 + 192) = result[5];
    if (*(void *)(*((void *)result + 4) + 64LL)) {
      return (double *)[*(id *)(*((void *)result + 4) + 64) setPreferredFramesPerSecond:llround(1.0 / result[5])];
    }
  }

  return result;
}

void sub_403D8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (!*(_BYTE *)(v1 + 141))
  {
    *(_BYTE *)(*(void *)(v1 + 40) + 209LL) = 1;
    *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 40LL) + 210LL) = 0;
    uint64_t v3 = *(void *)(a1 + 32);
    uint64_t v4 = *(void *)(v3 + 40);
    *(_OWORD *)(v3 + 24) = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(v4 + 216) = *(_OWORD *)(a1 + 40);
    id v5 = [*(id *)(*(void *)(a1 + 32) + 8) layouts];
    uint64_t v8 = 0LL;
    signed int v9 = &v8;
    uint64_t v10 = 0x2020000000LL;
    char v11 = 0;
    v7[0] = 0LL;
    v7[1] = v7;
    v7[2] = 0x2020000000LL;
    v7[3] = 0x408F400000000000LL;
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472LL;
    v6[2] = sub_40508;
    v6[3] = &unk_24DA30;
    v6[4] = *(void *)(a1 + 32);
    v6[5] = v7;
    void v6[6] = &v8;
    [v5 enumerateObjectsUsingBlock:v6];
    [*(id *)(*(void *)(*(void *)(a1 + 32) + 40) + 120) setCurrentLayoutIndex:*((unsigned __int8 *)v9 + 24)];
    _Block_object_dispose(v7, 8);
    _Block_object_dispose(&v8, 8);
  }

void sub_404E4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_40508(void *a1, void *a2, char a3)
{
  unsigned __int8 v6 = [a2 isEqualToString:@"3x2"];
  double v7 = 1.5;
  if ((v6 & 1) == 0)
  {
    if (objc_msgSend(a2, "isEqualToString:", @"2x3", 1.5))
    {
      double v7 = 0.666666667;
    }

    else if ([a2 isEqualToString:@"4x3"])
    {
      double v7 = 1.33333333;
    }

    else
    {
      unsigned __int8 v8 = [a2 isEqualToString:@"3x4"];
      double v7 = 0.75;
      if ((v8 & 1) == 0)
      {
        if (objc_msgSend(a2, "isEqualToString:", @"16x9", 0.75))
        {
          double v7 = 1.77777778;
        }

        else
        {
          unsigned __int8 v9 = [a2 isEqualToString:@"9x16"];
          double v7 = 0.5625;
          if ((v9 & 1) == 0)
          {
            NSLog(@"Unsupported aspect ratio!!!", 0.5625);
            double v7 = 1.0;
          }
        }
      }
    }
  }

  double v10 = vabdd_f64(*(double *)(a1[4] + 24LL) / *(double *)(a1[4] + 32LL), v7);
  if (v10 < *(double *)(*(void *)(a1[5] + 8LL) + 24LL))
  {
    *(_BYTE *)(*(void *)(a1[6] + 8LL) + 24LL) = a3;
    *(double *)(*(void *)(a1[5] + 8LL) + 24LL) = v10;
  }

__n128 sub_406B8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (!*(_BYTE *)(v1 + 141))
  {
    *(_BYTE *)(*(void *)(v1 + 40) + 210LL) = 1;
    __n128 result = *(__n128 *)(a1 + 40);
    *(__n128 *)(*(void *)(*(void *)(a1 + 32) + 40LL) + 216LL) = result;
  }

  return result;
}

__n128 sub_40788(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (!*(_BYTE *)(v1 + 141))
  {
    __n128 result = *(__n128 *)(a1 + 40);
    *(__n128 *)(*(void *)(v1 + 40) + 104LL) = result;
    *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 40LL) + 209LL) = 1;
  }

  return result;
}

uint64_t sub_40848(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 32);
  if (!*(_BYTE *)(v1 + 141))
  {
    *(_BYTE *)(*(void *)(v1 + 40) + 264LL) = (*(_DWORD *)(result + 40) - 1) < 4;
    *(_DWORD *)(*(void *)(result + 32) + 152LL) = *(_DWORD *)(result + 40);
    *(_BYTE *)(*(void *)(*(void *)(result + 32) + 40LL) + 209LL) = 1;
  }

  return result;
}

void *sub_409F4(void *result)
{
  uint64_t v1 = result[4];
  if (!*(_BYTE *)(v1 + 141)) {
    return [*(id *)(*(void *)(v1 + 40) + 120) setCurrentLayoutIndex:*((unsigned __int8 *)result + 40)];
  }
  return result;
}

void sub_40AB0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (!*(_BYTE *)(v2 + 141))
  {
    if (*(_DWORD *)(a1 + 40) == 1 || *(_DWORD *)(v2 + 148) == 1)
    {
      [(id)v2 willChangeValueForKey:@"isOffscreen"];
      int v3 = 1;
    }

    else
    {
      int v3 = 0;
    }

    double v4 = MRGetCurrentTime();
    uint64_t v5 = *(void *)(*(void *)(a1 + 32) + 40LL);
    double v6 = *(double *)(v5 + 152);
    double v7 = v4 - v6;
    double v8 = -1.0 - (v6 - v4 * 2.0);
    if (v7 < 1.0) {
      double v4 = v8;
    }
    *(double *)(v5 + 152) = v4;
    *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 40LL) + 144LL) = *(_DWORD *)(*(void *)(a1 + 32) + 148LL);
    *(_DWORD *)(*(void *)(a1 + 32) + 148LL) = *(_DWORD *)(a1 + 40);
    if (v3) {
      [*(id *)(a1 + 32) didChangeValueForKey:@"isOffscreen"];
    }
  }

id sub_40BE8(id result)
{
  uint64_t v1 = *((void *)result + 4);
  if (!*(_BYTE *)(v1 + 141))
  {
    uint64_t v2 = result;
    objc_storeWeak((id *)(v1 + 160), *((id *)result + 5));
    return [*(id *)(*(void *)(v2[4] + 40) + 8) setAssetManager:v2[5]];
  }

  return result;
}

uint64_t sub_40CE4(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 32);
  if (!*(_BYTE *)(v1 + 141))
  {
    __n128 result = (uint64_t)objc_msgSend( *(id *)(v1 + 16),  "sublayerForPlugObjectID:recursive:",  objc_msgSend(*(id *)(result + 40), "objectID"),  1);
    if (result)
    {
      int v3 = (void *)result;
      uint64_t v4 = objc_opt_class(&OBJC_CLASS___MRLayerNavigator, v2);
      __n128 result = objc_opt_isKindOfClass(v3, v4);
      if ((result & 1) != 0) {
        return (uint64_t)[v3 gotoNextSublayer:0 animate:1];
      }
    }
  }

  return result;
}

uint64_t sub_40DBC(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 32);
  if (!*(_BYTE *)(v1 + 141))
  {
    __n128 result = (uint64_t)objc_msgSend( *(id *)(v1 + 16),  "sublayerForPlugObjectID:recursive:",  objc_msgSend(*(id *)(result + 40), "objectID"),  1);
    if (result)
    {
      int v3 = (void *)result;
      uint64_t v4 = objc_opt_class(&OBJC_CLASS___MRLayerNavigator, v2);
      __n128 result = objc_opt_isKindOfClass(v3, v4);
      if ((result & 1) != 0) {
        return (uint64_t)[v3 gotoPreviousSublayer:0 animate:1];
      }
    }
  }

  return result;
}

void sub_40F08( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_40F20(uint64_t a1, uint64_t a2)
{
}

void sub_40F30(uint64_t a1)
{
}

uint64_t sub_40F3C(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 32);
  if (!*(_BYTE *)(v1 + 141))
  {
    uint64_t v2 = result;
    __n128 result = (uint64_t)objc_msgSend( *(id *)(v1 + 16),  "sublayerForPlugObjectID:recursive:",  objc_msgSend(*(id *)(result + 40), "objectID"),  1);
    if (result)
    {
      uint64_t v4 = (void *)result;
      uint64_t v5 = objc_opt_class(&OBJC_CLASS___MRLayerNavigator, v3);
      __n128 result = objc_opt_isKindOfClass(v4, v5);
      if ((result & 1) != 0)
      {
        __n128 result = (uint64_t)objc_msgSend(objc_msgSend(v4, "currentSublayer"), "plugAsHaven");
        *(void *)(*(void *)(*(void *)(v2 + 48) + 8LL) + 40LL) = result;
      }
    }
  }

  return result;
}

void sub_41074( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void *sub_4108C(void *result)
{
  uint64_t v1 = result[4];
  if (!*(_BYTE *)(v1 + 141))
  {
    uint64_t v2 = result;
    [*(id *)(v1 + 8) lock];
    *(void *)(*(void *)(v2[5] + 8) + 40) = [*(id *)(v2[4] + 16) _currentState];
    [*(id *)(v2[4] + 8) unlock];
    uint64_t v3 = (void *)v2[4];
    uint64_t v4 = *(void **)(*(void *)(v2[5] + 8LL) + 40LL);
    [v3 _time];
    return objc_msgSend( v4,  "setObject:forKey:",  +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:"),  @"time");
  }

  return result;
}

id sub_4117C(id result)
{
  uint64_t v1 = (_BYTE *)*((void *)result + 4);
  if (!v1[141])
  {
    uint64_t v2 = result;
    objc_msgSend(objc_msgSend(*((id *)result + 5), "objectForKey:", @"time"), "doubleValue");
    objc_msgSend(v1, "_r_setTime:isResyncing:", 0);
    [*(id *)(*(void *)(v2[4] + 40) + 120) setForcedState:v2[5]];
    __n128 result = (id)v2[4];
    if (*((_BYTE *)result + 134)) {
      return [result requestRendering:0];
    }
  }

  return result;
}

void *sub_41388(void *result)
{
  uint64_t v1 = result[4];
  if (!*(_BYTE *)(v1 + 141))
  {
    uint64_t v2 = result;
    [*(id *)(v1 + 8) lock];
    [*(id *)(*(void *)(v2[4] + 40) + 376) nearingEndForSerializer:v2[5]];
    return [*(id *)(v2[4] + 8) unlock];
  }

  return result;
}

void *sub_41444(void *result)
{
  uint64_t v1 = result[4];
  if (!*(_BYTE *)(v1 + 141))
  {
    uint64_t v2 = result;
    [*(id *)(v1 + 8) lock];
    [*(id *)(*(void *)(v2[4] + 40) + 376) effect:v2[5] requestedNumberOfSlides:v2[6] firstSlideIndexStillNeeded:v2[7]];
    return [*(id *)(v2[4] + 8) unlock];
  }

  return result;
}

id sub_4163C(uint64_t a1)
{
  return objc_msgSend( *(id *)(a1 + 32),  "_r_beginMorphingToAspectRatio:andOrientation:withDuration:",  *(unsigned int *)(a1 + 56),  *(double *)(a1 + 40),  *(double *)(a1 + 48));
}

id sub_416CC(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_r_endMorphing");
}

LABEL_17:
  if (!v7) {
    goto LABEL_43;
  }
  double v15 = -[MRSlideInfo assetPath](v7, "assetPath");
  if (!v15) {
    goto LABEL_43;
  }
  double v16 = v15;
  v43 = a3;
  v44 = v4;
  v53 = 0u;
  v54 = 0u;
  v51 = 0u;
  v52 = 0u;
  v42 = v5;
  obj = [v5 sublayers];
  double v17 = [obj countByEnumeratingWithState:&v51 objects:v60 count:16];
  if (!v17)
  {
    v34 = 0LL;
    v23 = 0LL;
    goto LABEL_48;
  }

  BOOL v19 = v17;
  v41 = v8;
  double v20 = *(void *)v52;
  p_info = &OBJC_METACLASS___MRImageProvider.info;
LABEL_21:
  v22 = 0LL;
  v45 = v19;
  while (1)
  {
    if (*(void *)v52 != v20) {
      objc_enumerationMutation(obj);
    }
    v23 = *(void **)(*((void *)&v51 + 1) + 8 * v22);
    v24 = objc_opt_class(p_info + 71, v18);
    if ((objc_opt_isKindOfClass(v23, v24) & 1) == 0) {
      goto LABEL_40;
    }
    if (objc_msgSend( objc_msgSend(objc_msgSend(v23, "container"), "effectID"),  "hasPrefix:",  @"TableTop")) {
      break;
    }
    v49 = 0u;
    v50 = 0u;
    v47 = 0u;
    v48 = 0u;
    v25 = objc_msgSend(objc_msgSend(v23, "container"), "slides");
    v26 = [v25 countByEnumeratingWithState:&v47 objects:v59 count:16];
    if (v26)
    {
      v27 = v26;
      v28 = *(void *)v48;
LABEL_32:
      v29 = v7;
      v30 = v20;
      v31 = 0LL;
      while (1)
      {
        if (*(void *)v48 != v28) {
          objc_enumerationMutation(v25);
        }
        v32 = *(void **)(*((void *)&v47 + 1) + 8 * v31);
        if (v27 == (id)++v31)
        {
          v27 = [v25 countByEnumeratingWithState:&v47 objects:v59 count:16];
          double v20 = v30;
          double v7 = v29;
          BOOL v19 = v45;
          p_info = (__objc2_class_ro **)(&OBJC_METACLASS___MRImageProvider + 32);
          if (v27) {
            goto LABEL_32;
          }
          goto LABEL_40;
        }
      }

      v33 = +[NSString stringWithFormat:]( NSString,  "stringWithFormat:",  @"image%d",  [v32 index]);
      double v20 = v30;
      double v7 = v29;
      BOOL v19 = v45;
      p_info = (__objc2_class_ro **)(&OBJC_METACLASS___MRImageProvider + 32);
      if (!v33) {
        goto LABEL_40;
      }
      v34 = (const __CFString *)v33;
      goto LABEL_46;
    }

  if ((([a5 timeWasSet] & 1) != 0 || self->mNeedsToResyncToSerializer)
    && self->mIsSerializerBased)
  {
    goto LABEL_20;
  }

  if (self->mIsTransitioning) {
    goto LABEL_22;
  }
  if (self->mCurrentSublayer)
  {
    if (-[MRLayerClock jumpedBackInTime](self->super.mClock, "jumpedBackInTime")
      || !-[MRLayer isPreactivated](self->mCurrentSublayer, "isPreactivated"))
    {
      -[MRLayer timeIn](self->mCurrentSublayer, "timeIn");
      if (v12 < v40) {
        -[MRLayer setTimeIn:](self->mCurrentSublayer, "setTimeIn:", v12);
      }
    }

    goto LABEL_22;
  }

  if (self->mIsSerializerBased)
  {
LABEL_20:
    -[MRLayerNavigator _resyncToSerializerForTime:](self, "_resyncToSerializerForTime:", v12);
    goto LABEL_22;
  }

  mContainer = self->mContainer;
  if (mContainer)
  {
    v78 = (MRLayer *)-[NSMutableDictionary objectForKey:]( self->mSublayersForPlugs,  "objectForKey:",  objc_msgSend(-[MCContainer startPlug](mContainer, "startPlug"), "objectID"));
  }

  else
  {
    if (!-[NSMutableArray count](self->mSublayers, "count"))
    {
      v78 = self->mCurrentSublayer;
      goto LABEL_154;
    }

    v78 = (MRLayer *)-[NSMutableArray objectAtIndex:](self->mSublayers, "objectAtIndex:", 0LL);
  }

  self->mCurrentSublayer = v78;
LABEL_154:
  v99 = 0.0;
  if (self->super.mIsActivated) {
    v99 = v12;
  }
  -[MRLayer setTimeIn:](v78, "setTimeIn:", v99);
  self->mNeedsToUpdatePotentialTargetSublayers = 1;
LABEL_22:
  self->mElementToDraw = 0;
  -[MRLayerNavigator _prerenderSublayersAtTime:inContext:withArguments:]( self,  "_prerenderSublayersAtTime:inContext:withArguments:",  a4,  a5,  a3);
  v24 = self->mCurrentSublayer;
  if (v24 != mCurrentSublayer
    || self->mCurrentTransition != mCurrentTransition
    || self->mIsTransitioning && self->mNextSublayer != mNextSublayer)
  {
    double v8 = 1;
  }

  if (!v24 && !self->mIsTransitioning)
  {
LABEL_44:
    LOBYTE(v_Block_object_dispose(va, 8) = 0;
    return v8;
  }

  if (self->mIsSerializerBased)
  {
    if (!self->mHasWarnedDelegateAboutNearingEnd)
    {
      v25 = mCurrentSublayer;
      v26 = (char *)-[MCPlugSerial index](-[MRLayer plugAsSerial](v24, "plugAsSerial"), "index") + 3;
      v27 = v26 >= -[NSMutableArray count](self->mSublayers, "count");
      mCurrentSublayer = v25;
      if (v27)
      {
        self->mHasWarnedDelegateAboutNearingEnd = 1;
        -[MRRenderer nearingEndForSerializer:](self->super.mRenderer, "nearingEndForSerializer:", self->mContainer);
      }
    }

    v24 = self->mCurrentSublayer;
    if (self->mIsSerializerBased)
    {
      if (v24 == mCurrentSublayer && !self->_needsToRecomputeCurrentSublayerTheoreticalTimeIn)
      {
        v24 = mCurrentSublayer;
      }

      else
      {
        v28 = a4;
        v29 = v8;
        v30 = -[MCContainer orderedPlugs](self->mContainer, "orderedPlugs");
        v104 = 0u;
        v105 = 0u;
        v106 = 0u;
        v107 = 0u;
        v31 = [v30 countByEnumeratingWithState:&v104 objects:v109 count:16];
        if (v31)
        {
          v32 = v31;
          v33 = *(void *)v105;
          v34 = 0.0;
LABEL_37:
          v35 = 0LL;
          while (1)
          {
            if (*(void *)v105 != v33) {
              objc_enumerationMutation(v30);
            }
            v36 = *(MCPlug **)(*((void *)&v104 + 1) + 8 * v35);
            if (v36 == -[MRLayer plug](self->mCurrentSublayer, "plug")) {
              break;
            }
            -[MCPlug fullDuration](v36, "fullDuration");
            v38 = v37;
            -[MCPlug transitionDuration](v36, "transitionDuration");
            v34 = v34 + v38 - v39;
            if (v32 == (id)++v35)
            {
              v32 = [v30 countByEnumeratingWithState:&v104 objects:v109 count:16];
              if (v32) {
                goto LABEL_37;
              }
              break;
            }
          }
        }

        else
        {
          v34 = 0.0;
        }

        self->_currentSublayerTheoreticalTimeIn = v34;
        self->_needsToRecomputeCurrentSublayerTheoreticalTimeIn = 0;
        v24 = self->mCurrentSublayer;
        double v8 = v29;
        a4 = v28;
      }
    }
  }

  -[MRLayer timeIn](v24, "timeIn");
  -[MRLayerClock setExternalTime:](-[MRLayer clock](self->mCurrentSublayer, "clock"), "setExternalTime:", v12 - v41);
  if (!self->mIsTransitioning || !self->mCurrentTransition)
  {
    if (v102)
    {
      v56 = [v102 objectForKey:@"persistentState"];
      if (v56) {
        -[MRLayer _applyState:](self->mCurrentSublayer, "_applyState:", v56);
      }
      [a5 setForcedState:v102];
    }

    if (!self->mIsInnerTransitioning)
    {
      if (-[MRLayerClock selfIsPaused](-[MRLayer clock](self->mCurrentSublayer, "clock"), "selfIsPaused"))
      {
        v64 = self->mCurrentSublayer;
        -[MRLayerClock containerTime](-[MRLayer clock](v64, "clock"), "containerTime");
        if (-[MRLayer isLoadedForTime:](v64, "isLoadedForTime:")) {
          -[MRLayerClock resumeOnNextUpdate](-[MRLayer clock](self->mCurrentSublayer, "clock"), "resumeOnNextUpdate");
        }
      }

      goto LABEL_112;
    }

    mForcedTransitionProgress = self->mForcedTransitionProgress;
    if (mForcedTransitionProgress < 0.0) {
      mForcedTransitionProgress = fmin(v12 - self->mTransitionStartTime, 1.0);
    }
    if (self->mTransitionWasAborted) {
      mForcedTransitionProgress = 1.0 - mForcedTransitionProgress;
    }
    if (self->mTransitionIsBackwards)
    {
      mCurrentSublayerInterestingTime = self->mCurrentSublayerInterestingTime;
      if (self->mCurrentSublayerContainerTimeOnTransitionStart >= mCurrentSublayerInterestingTime) {
        mCurrentSublayerContainerTimeOnTransitionStart = self->mCurrentSublayerContainerTimeOnTransitionStart;
      }
      else {
        mCurrentSublayerContainerTimeOnTransitionStart = self->mCurrentSublayerInterestingTime;
      }
      mTotalMotionDuration = self->mTotalMotionDuration;
      v61 = mForcedTransitionProgress * mTotalMotionDuration;
      mCurrentSublayerLazyFactor = self->mCurrentSublayerLazyFactor;
      v63 = (mCurrentSublayerContainerTimeOnTransitionStart - mCurrentSublayerInterestingTime)
          * mCurrentSublayerLazyFactor;
      if (mForcedTransitionProgress * mTotalMotionDuration < v63)
      {
        if (mCurrentSublayerLazyFactor > 0.0) {
          mCurrentSublayerContainerTimeOnTransitionStart = mCurrentSublayerContainerTimeOnTransitionStart
        }
                                                         - v61 / mCurrentSublayerLazyFactor;
        goto LABEL_111;
      }

      mNextSublayerLazyDuration = self->mNextSublayerLazyDuration;
      mNextSublayerLazyFactor = self->mNextSublayerLazyFactor;
      if (v61 <= mTotalMotionDuration - mNextSublayerLazyDuration * mNextSublayerLazyFactor)
      {
        mCurrentSublayerContainerTimeOnTransitionStart = mNextSublayerLazyDuration
                                                       + self->mNextSublayerInterestingTime
                                                       + self->mTransitionDuration
                                                       * (1.0
                                                        - -(v63 - mForcedTransitionProgress * mTotalMotionDuration)
                                                        / self->mTransitionDuration);
        goto LABEL_111;
      }

      mCurrentSublayerContainerTimeOnTransitionStart = self->mNextSublayerInterestingTime;
      if (mNextSublayerLazyFactor > 0.0)
      {
        v69 = (1.0 - mForcedTransitionProgress) * mTotalMotionDuration / mNextSublayerLazyFactor;
        goto LABEL_100;
      }
    }

    else
    {
      v66 = self->mTotalMotionDuration;
      v67 = self->mCurrentSublayerLazyFactor;
      v68 = self->mCurrentSublayerLazyDuration * v67;
      if (mForcedTransitionProgress * v66 >= v68)
      {
        mCurrentSublayerContainerTimeOnTransitionStart = self->mNextSublayerInterestingTime
                                                       - self->mTransitionDuration
                                                       * (1.0
                                                        - -(v68 - mForcedTransitionProgress * v66)
                                                        / self->mTransitionDuration);
        goto LABEL_111;
      }

      mCurrentSublayerContainerTimeOnTransitionStart = self->mCurrentSublayerInterestingTime;
      if (v67 > 0.0)
      {
        v69 = mForcedTransitionProgress * v66 / v67;
LABEL_100:
        mCurrentSublayerContainerTimeOnTransitionStart = v69 + mCurrentSublayerContainerTimeOnTransitionStart;
      }
    }

    double v8 = 0LL;
LABEL_18:
    double v13 = 0LL;
    goto LABEL_19;
  }

  double v14 = -[MRTransitionChanges nextSublayer](self->mTransitionChanges, "nextSublayer");
  self->mCurrentSublayer = v14;
  double v15 = -[MRLayer isPreactivated](v14, "isPreactivated");
  mCurrentSublayer = self->mCurrentSublayer;
  if ((v15 & 1) != 0)
  {
    if (-[MRLayer isActivated](mCurrentSublayer, "isActivated")) {
      -[MRLayer deactivate](self->mCurrentSublayer, "deactivate");
    }
  }

  else
  {
    -[MRLayer preactivate](mCurrentSublayer, "preactivate");
  }

  -[MRLayer activate](self->mCurrentSublayer, "activate");
  double v17 = self->mTransitionChanges->startTime;
  -[MRLayer phaseInDuration](self->mCurrentSublayer, "phaseInDuration");
  -[MRLayer setTimeIn:](self->mCurrentSublayer, "setTimeIn:", v17 - v18);
  if (self->mTransitionIsNextPrevious)
  {
    double v20 = self->mCurrentSublayer;
    v21 = objc_opt_class(&OBJC_CLASS___MRLayerEffect, v19);
    isKindOfClass = objc_opt_isKindOfClass(v20, v21);
    v23 = self->mCurrentSublayer;
    if ((isKindOfClass & 1) != 0)
    {
      v24 = -[MRLayer effect](v23, "effect");
      v25 = 1000000000.0;
      if (self->mTransitionStartedWithNext) {
        v25 = 0.0;
      }
      [v24 interestingTimeForTime:v25];
    }

    else
    {
      -[MRLayer phaseInDuration](v23, "phaseInDuration");
    }

    self->mCurrentSublayerInterestingTime = v26;
    -[MRLayerClock setContainerTime:](-[MRLayer clock](self->mCurrentSublayer, "clock"), "setContainerTime:", v26);
  }

  if (self->mIsInSlideFocusMode) {
    -[MRLayerClock pauseOnNextUpdate](-[MRLayer clock](self->mCurrentSublayer, "clock"), "pauseOnNextUpdate");
  }
  if (!-[MRLayer isLoadedForTime:](self->mCurrentSublayer, "isLoadedForTime:", 0.0)) {
    -[MRLayerClock pauseOnNextUpdate](-[MRLayer clock](self->mCurrentSublayer, "clock"), "pauseOnNextUpdate");
  }
  v27 = 0;
  self->mNextSublayer = 0LL;
  self->mTransitionIsNextPrevious = 0;
  self->mTransitionStartedWithNext = 0;
  startTime = -1.0;
LABEL_81:
  self->mIsTransitioning = v27;

  self->mTransitionChanges = 0LL;
  self->mNeedsToUpdatePotentialTargetSublayers = 1;
  objc_sync_exit(mSublayers);
  if (startTime >= 0.0) {
    -[MRLayer setTimeIn:](self->mNextSublayer, "setTimeIn:", startTime);
  }
LABEL_83:
  if (self->mNeedsToUpdatePotentialTargetSublayers)
  {
    -[NSMutableSet removeAllObjects](self->mPotentialTargetSublayers, "removeAllObjects");
    v52 = self->mCurrentSublayer;
    if (self->mIsSerializerBased)
    {
      v53 = -[MCPlugSerial index](-[MRLayer plugAsSerial](v52, "plugAsSerial"), "index");
      v54 = (unint64_t)-[NSMutableArray count](self->mSublayers, "count");
      if (v53) {
        v55 = v53;
      }
      else {
        v55 = v54;
      }
      mExtraSublayer = self->mExtraSublayer;
      if ((mExtraSublayer
         || (mExtraSublayer = (MRLayer *)-[NSMutableDictionary objectForKey:]( self->mSublayersForPlugs,  "objectForKey:",  objc_msgSend( -[MCContainer plugAtIndex:]( self->mContainer,  "plugAtIndex:",  (v53 + 1) % v54),  "objectID"))) != 0)
        && mExtraSublayer != self->mCurrentSublayer)
      {
        -[NSMutableSet addObject:](self->mPotentialTargetSublayers, "addObject:", mExtraSublayer);
        if (!self->mNextSublayer)
        {
          -[MRLayer timeIn](self->mCurrentSublayer, "timeIn");
          v58 = v57;
          -[MRLayer duration](self->mCurrentSublayer, "duration");
          v60 = v58 + v59;
          -[MCPlugSerial transitionDuration]( -[MRLayer plugAsSerial](self->mCurrentSublayer, "plugAsSerial"),  "transitionDuration");
          -[MRLayer setTimeIn:](mExtraSublayer, "setTimeIn:", v60 - v61);
        }
      }

      v62 = self->mExtraSublayer;
      if ((v62
         || (v62 = (MRLayer *)-[NSMutableDictionary objectForKey:]( self->mSublayersForPlugs,  "objectForKey:",  objc_msgSend( -[MCContainer plugAtIndex:](self->mContainer, "plugAtIndex:", v55 - 1),  "objectID"))) != 0)
        && v62 != mExtraSublayer
        && v62 != self->mCurrentSublayer)
      {
        -[NSMutableSet addObject:](self->mPotentialTargetSublayers, "addObject:");
      }
    }

    else
    {
      v63 = -[MRLayer nextTransition](v52, "nextTransition");
      v64 = self->mExtraSublayer;
      if ((v64
         || (v64 = -[MRLayerNavigator sublayerForKey:]( self,  "sublayerForKey:",  -[MCTransitionTrigger transitionDestinationPlugID](v63, "transitionDestinationPlugID"))) != 0LL)
        && v64 != self->mCurrentSublayer)
      {
        -[NSMutableSet addObject:](self->mPotentialTargetSublayers, "addObject:", v64);
        if (v64 != self->mNextSublayer) {
          -[MRLayer setTimeIn:](v64, "setTimeIn:", 1.0e36);
        }
      }

      v65 = -[MRLayer previousTransition](self->mCurrentSublayer, "previousTransition");
      v66 = self->mExtraSublayer;
      if ((v66
         || (v66 = -[MRLayerNavigator sublayerForKey:]( self,  "sublayerForKey:",  -[MCTransitionTrigger transitionDestinationPlugID](v65, "transitionDestinationPlugID"))) != 0LL)
        && v66 != v64
        && v66 != self->mCurrentSublayer)
      {
        -[NSMutableSet addObject:](self->mPotentialTargetSublayers, "addObject:", v66);
        if (v66 != self->mNextSublayer) {
          -[MRLayer setTimeIn:](v66, "setTimeIn:", 1.0e36);
        }
      }
    }

    self->mNeedsToUpdatePotentialTargetSublayers = 0;
  }

  v95 = 0u;
  v96 = 0u;
  v93 = 0u;
  v94 = 0u;
  v67 = self->mSublayers;
  v68 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( v67,  "countByEnumeratingWithState:objects:count:",  &v93,  v97,  16LL);
  if (v68)
  {
    v69 = *(void *)v94;
    do
    {
      for (i = 0LL; i != v68; i = (char *)i + 1)
      {
        if (*(void *)v94 != v69) {
          objc_enumerationMutation(v67);
        }
        v71 = *(MRLayer **)(*((void *)&v93 + 1) + 8LL * (void)i);
        v72 = -[MRLayer isPreactivated](v71, "isPreactivated");
        v73 = -[MRLayer isActivated](v71, "isActivated");
        if (self->super.mIsPreactivated)
        {
          if (v71 == self->mCurrentSublayer
            || v71 == self->mNextSublayer
            || -[MCPlug preactivatesWithParent](-[MRLayer plug](v71, "plug"), "preactivatesWithParent"))
          {
            v74 = 1;
          }

          else
          {
            v74 = -[NSMutableSet containsObject:](self->mPotentialTargetSublayers, "containsObject:", v71);
          }
        }

        else
        {
          v74 = 0;
        }

        if (!self->super.mIsActivated) {
          goto LABEL_127;
        }
        if (v71 != self->mCurrentSublayer)
        {
          if (self->mIsTransitioning)
          {
            v75 = v71 == self->mNextSublayer;
            if (!v74) {
              goto LABEL_143;
            }
            goto LABEL_128;
          }

  if (objc_msgSend(objc_msgSend(a3, "sizingMode"), "isEqualToString:", @"Crop to Fit")
    && (v8 != 0.5 || v16 != 0.5))
  {
    objc_msgSend(a3, "setCenter:", v8, v16);
  }

  mPlug = self->mPlug;
  if (!(_DWORD)v3) {
    goto LABEL_20;
  }
  double v15 = -[MCPlug animationPathForKey:]( mPlug,  "animationPathForKey:",  objc_msgSend(@"positionY", "stringByAppendingFormat:", @":%d", v3));
  if (!v15)
  {
    mPlug = self->mPlug;
LABEL_20:
    double v15 = -[MCPlug animationPathForKey:](mPlug, "animationPathForKey:", @"positionY");
    if (!v15) {
      goto LABEL_25;
    }
  }

  if (([v15 isTriggered] & 1) == 0)
  {
    double v17 = objc_opt_class(&OBJC_CLASS___MCAnimationPathPhysics, v16);
    if ((objc_opt_isKindOfClass(v15, v17) & 1) != 0)
    {
      double v18 =  -[MRAnimationPathPhysics initWithMCAnimationPath:]( objc_alloc(&OBJC_CLASS___MRAnimationPathPhysics),  "initWithMCAnimationPath:",  v15);
      -[MCPlugParallel position](self->mPlug, "position");
      *(float *)&double v20 = v19;
      -[MRAnimationPathPhysics setBaseValue:](v18, "setBaseValue:", v20);
    }

    else
    {
      v21 = objc_alloc(&OBJC_CLASS___MRAnimationPathScalar);
      -[MCPlugParallel position](self->mPlug, "position");
      self->mAnimationPathY = -[MRAnimationPathScalar initWithMCAnimationPath:andValue:]( v21,  "initWithMCAnimationPath:andValue:",  v15,  v22);
    }
  }

      v13 += 4LL;
      if (v15 == v13) {
        return v6;
      }
    }

    double v17 = powf(v16, v12);
LABEL_16:
    v6[v13 / 4] = v17;
    goto LABEL_17;
  }

  double v18 = (void *)(*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 24) + 8LL))(*(void *)(a1 + 24), a2);
  BOOL v19 = (float *)(*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 16) + 8LL))(*(void *)(a1 + 16), a2);
  double v6 = v19;
  if (v19) {
    double v20 = v18 == 0LL;
  }
  else {
    double v20 = 1;
  }
  if (!v20)
  {
    if ((int)a2 < 1)
    {
LABEL_44:
      operator delete[](v18);
      return v6;
    }

    a2 = a2;
    v25 = v19;
    v26 = (float *)v18;
    while (1)
    {
      v27 = *v25;
      if (*v25 > 0.0) {
        break;
      }
      if (*v25 < 0.0)
      {
        v28 = pow(v27, (double)(uint64_t)*v26);
        goto LABEL_42;
      }

  v23 = x;
  v24 = y;
  result.y = v24;
  result.x = v23;
  return result;
}

LABEL_40:
    if ((id)++v22 == v19)
    {
      BOOL v19 = [obj countByEnumeratingWithState:&v51 objects:v60 count:16];
      if (v19) {
        goto LABEL_21;
      }
      v34 = 0LL;
      v23 = 0LL;
      goto LABEL_46;
    }
  }

  if (objc_msgSend(objc_msgSend(v23, "container"), "countOfSlides") == (char *)&dword_4 + 2
    || (objc_msgSend( objc_msgSend( objc_msgSend( objc_msgSend( objc_msgSend(objc_msgSend(v23, "container"), "orderedSlides"),  "objectAtIndex:",  1),  "asset"),  "path"),  "isEqualToString:",  v16) & 1) == 0)
  {
    if (objc_msgSend( objc_msgSend( objc_msgSend( objc_msgSend( objc_msgSend(objc_msgSend(v23, "container"), "orderedSlides"),  "objectAtIndex:",  0),  "asset"),  "path"),  "isEqualToString:",  v16))
    {
      v34 = @"image0";
LABEL_46:
      double v8 = v41;
      goto LABEL_48;
    }

    goto LABEL_40;
  }

  double v8 = v41;
  v34 = @"image1";
LABEL_48:
  v35 = 0.0;
  uint64_t v5 = v42;
  [v42 jumpToSublayer:v23 atTime:0.0];
  uint64_t v4 = v44;
  -[MRRenderer _r_prerenderWithPassParameters:](v44, "_r_prerenderWithPassParameters:", &off_26F740);
  [v23 interestingTimeForElement:v34];
  v37 = v36;
  if (v8)
  {
    -[MRSlideInfo time](v7, "time");
    v35 = v38;
  }

  [v42 jumpToSublayer:v23 atTime:v37 + v35];
  a3 = v43;
LABEL_51:
  v39 = v4->mInternal->mSlideFocusState;
  if (v39)
  {
    -[MRSlideFocusState setDelegate:](v39, "setDelegate:", v5);
    -[MRSlideFocusState setSlideID:](v4->mInternal->mSlideFocusState, "setSlideID:", v34);
    [v5 enterSlideFocusModeWithState:v4->mInternal->mSlideFocusState];
  }

  v40 = objc_msgSend(objc_msgSend(a3, "objectForKey:", @"slideshowIsPlaying"), "BOOLValue");
  v4->_slideshowIsPaused = v40;
  if (v40) {
    -[MRRenderer resumeSlideshow](v4, "resumeSlideshow");
  }
  else {
    -[MRRenderer pauseSlideshow](v4, "pauseSlideshow");
  }
  else {
    -[MRRenderer pause](v4, "pause");
  }
  -[MRRenderer _r_render](v4, "_r_render");
}

        v27 = 0.5;
        v28 = 1.0;
        goto LABEL_41;
      }
    }

    v27 = 0.5;
    v26 = 0.0;
    v28 = 0.0;
    v37 = 0.5;
    if ((v22 & 1) == 0) {
      goto LABEL_47;
    }
    goto LABEL_40;
  }

  v61 = 0u;
  v62 = 0u;
  v59 = 0u;
  v60 = 0u;
  v29 = [v18 countByEnumeratingWithState:&v59 objects:v67 count:16];
  if (v29)
  {
    v30 = v29;
    v56 = v14;
    v58 = v15;
    v31 = 0;
    v32 = 0;
    v33 = *(void *)v60;
    do
    {
      for (j = 0LL; j != v30; j = (char *)j + 1)
      {
        if (*(void *)v60 != v33) {
          objc_enumerationMutation(v19);
        }
        v35 = COERCE_DOUBLE(CGRectFromString((NSString *)objc_msgSend( *(id *)(*((void *)&v59 + 1) + 8 * (void)j),  "objectForKey:",  kMPMetaDataRegionOfInterestBounds,  v56,  v58)));
        v32 |= v35 < 0.333000004;
        v31 |= v35 > 0.666000009;
      }

      v30 = [v19 countByEnumeratingWithState:&v59 objects:v67 count:16];
    }

    while (v30);
    double v14 = v56;
    double v15 = v58;
    p_cache = (void **)(&OBJC_METACLASS___SYNMediaWallCollectionViewCellMainView2 + 16);
    if (((v31 ^ v32) & 1) != 0)
    {
      v36 = v32 ^ 1;
      if ((v32 & 1) == 0) {
        goto LABEL_36;
      }
LABEL_43:
      v37 = 1.0;
      if ((v36 & 1) == 0)
      {
        v27 = 0.0;
        goto LABEL_46;
      }

  [a12 blend:0];
  [v25 releaseByUser];
}

    operator delete[](v15);
    return (uint64_t)v17;
  }

  if (v16) {
    operator delete[](v16);
  }
  double v17 = 0LL;
  double v8 = 0LL;
  if (v15) {
    goto LABEL_40;
  }
  return v8;
}

    operator delete[](v15);
    return (uint64_t)v17;
  }

  if (v16) {
    operator delete[](v16);
  }
  double v17 = 0LL;
  double v8 = 0LL;
  if (v15) {
    goto LABEL_40;
  }
  return v8;
}

    operator delete[](v15);
    return (uint64_t)v17;
  }

  if (v16) {
    operator delete[](v16);
  }
  double v17 = 0LL;
  double v8 = 0LL;
  if (v15) {
    goto LABEL_40;
  }
  return v8;
}

    operator delete[](v15);
    return (uint64_t)v17;
  }

  if (v16) {
    operator delete[](v16);
  }
  double v17 = 0LL;
  double v8 = 0LL;
  if (v15) {
    goto LABEL_40;
  }
  return v8;
}

    operator delete[](v15);
    return (uint64_t)v17;
  }

  if (v16) {
    operator delete[](v16);
  }
  double v17 = 0LL;
  double v8 = 0LL;
  if (v15) {
    goto LABEL_40;
  }
  return v8;
}

    operator delete[](v15);
    return (uint64_t)v17;
  }

  if (v16) {
    operator delete[](v16);
  }
  double v17 = 0LL;
  double v8 = 0LL;
  if (v15) {
    goto LABEL_40;
  }
  return v8;
}

    operator delete[](v15);
    return (uint64_t)v17;
  }

  if (v16) {
    operator delete[](v16);
  }
  double v17 = 0LL;
  double v8 = 0LL;
  if (v15) {
    goto LABEL_40;
  }
  return v8;
}

    operator delete[](v15);
    return (uint64_t)v17;
  }

  if (v16) {
    operator delete[](v16);
  }
  double v17 = 0LL;
  double v8 = 0LL;
  if (v15) {
    goto LABEL_40;
  }
  return v8;
}

    operator delete[](v15);
    return (uint64_t)v17;
  }

  if (v16) {
    operator delete[](v16);
  }
  double v17 = 0LL;
  double v8 = 0LL;
  if (v15) {
    goto LABEL_40;
  }
  return v8;
}

    operator delete[](v15);
    return (uint64_t)v17;
  }

  if (v16) {
    operator delete[](v16);
  }
  double v17 = 0LL;
  double v8 = 0LL;
  if (v15) {
    goto LABEL_40;
  }
  return v8;
}

    operator delete[](v15);
    return (uint64_t)v17;
  }

  if (v16) {
    operator delete[](v16);
  }
  double v17 = 0LL;
  double v8 = 0LL;
  if (v15) {
    goto LABEL_40;
  }
  return v8;
}

    operator delete[](v15);
    return (uint64_t)v17;
  }

  if (v16) {
    operator delete[](v16);
  }
  double v17 = 0LL;
  double v8 = 0LL;
  if (v15) {
    goto LABEL_40;
  }
  return v8;
}

    v58 = v55 | (8 << v16) | (1 << (v33 + v17 + 6));
    v59 = 0LL;
    if ((_DWORD)v21)
    {
      v60 = 1;
      while (vabdd_f64(v203[v60 - 1], v56) >= 0.00001 || vabdd_f64(v203[v60], v57) >= 0.00001)
      {
        ++v59;
        v60 += 2;
        if (v21 == v59)
        {
          v59 = v21;
          goto LABEL_46;
        }
      }

      v202[v59] |= v58;
    }

    else
    {
LABEL_46:
      v32 = v32 + v56;
      v34 = v34 + v57;
      ++v20;
      v203[(2 * v21)] = v56;
      v203[(2 * (_DWORD)v21) | 1u] = v57;
      v202[v59] = v58;
      LODWORD(v21) = v21 + 1;
    }

  if ((self->super.mFlags & 0x40) != 0) {
    v35 = (CGFloat *)&mGeometry[72 * (self->super.mFlags >> 28) + 16];
  }
  else {
    v35 = (CGFloat *)&mGeometry[48 * (self->super.mFlags >> 28) + 16];
  }
  *v35 = width;
  v35[1] = height;
}

void getMem(void *a1, void *a2)
{
  mach_msg_type_number_t v8 = 15;
  mach_port_t v4 = mach_host_self();
  mach_error_t v5 = host_statistics(v4, 2, host_info_out, &v8);
  if (v5) {
    mach_error("can't get host_vm_info???\n", v5);
  }
  mach_msg_type_number_t v8 = 12;
  mach_port_t v6 = mach_host_self();
  mach_error_t v7 = host_info(v6, 1, v9, &v8);
  if (v7) {
    mach_error("can't get host_basic_info???\n", v7);
  }
  *a2 = vm_page_size * host_info_out[0];
  *a1 = v10;
}

void sub_432CC(_Unwind_Exception *a1)
{
}

void sub_436E4(_Unwind_Exception *a1)
{
}

void sub_439C8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_439E0(uint64_t a1, uint64_t a2)
{
}

void sub_439F0(uint64_t a1)
{
}

uint64_t sub_439FC(uint64_t a1, void *a2)
{
  mach_port_t v4 = *(void **)(a1 + 32);
  uint64_t v5 = objc_opt_class(&OBJC_CLASS___MRLayerEffect, a2);
  char isKindOfClass = objc_opt_isKindOfClass(a2, v5);
  if (v4 == a2)
  {
    if ((isKindOfClass & 1) == 0) {
      [*(id *)(a1 + 40) _undimAllLayersInLayer:*(void *)(a1 + 32)];
    }
    uint64_t v7 = 0LL;
  }

  else if ((isKindOfClass & 1) != 0)
  {
    uint64_t v7 = 1LL;
  }

  else
  {
    __int128 v17 = 0u;
    __int128 v18 = 0u;
    __int128 v15 = 0u;
    __int128 v16 = 0u;
    id v8 = objc_msgSend(a2, "sublayers", 0);
    id v9 = [v8 countByEnumeratingWithState:&v15 objects:v19 count:16];
    if (v9)
    {
      id v10 = v9;
      uint64_t v11 = *(void *)v16;
      int v12 = 1;
      do
      {
        for (i = 0LL; i != v10; i = (char *)i + 1)
        {
          if (*(void *)v16 != v11) {
            objc_enumerationMutation(v8);
          }
        }

        id v10 = [v8 countByEnumeratingWithState:&v15 objects:v19 count:16];
      }

      while (v10);
    }

    else
    {
      LOBYTE(v12) = 1;
    }

    uint64_t v7 = v12 & 1;
  }

  [a2 setIsDimmed:v7];
  return v7;
}

void sub_43C18( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

uint64_t sub_43C30(uint64_t a1, void *a2)
{
  uint64_t v5 = objc_opt_class(&OBJC_CLASS___MRLayerEffect, v4);
  uint64_t result = objc_opt_isKindOfClass(a2, v5);
  if ((result & 1) == 0)
  {
    __int128 v13 = 0u;
    __int128 v14 = 0u;
    __int128 v11 = 0u;
    __int128 v12 = 0u;
    id v7 = objc_msgSend(a2, "sublayers", 0);
    uint64_t result = (uint64_t)[v7 countByEnumeratingWithState:&v11 objects:v15 count:16];
    if (result)
    {
      uint64_t v8 = result;
      uint64_t v9 = *(void *)v12;
      do
      {
        uint64_t v10 = 0LL;
        do
        {
          if (*(void *)v12 != v9) {
            objc_enumerationMutation(v7);
          }
          (*(void (**)(void))(*(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 40LL) + 16LL))();
          ++v10;
        }

        while (v8 != v10);
        uint64_t result = (uint64_t)[v7 countByEnumeratingWithState:&v11 objects:v15 count:16];
        uint64_t v8 = result;
      }

      while (result);
    }
  }

  return result;
}

_BYTE *sub_43DC4(uint64_t a1)
{
  uint64_t result = *(_BYTE **)(a1 + 32);
  if (!result[141]) {
    return [result _dimLayersExceptForPathTo:*(void *)(a1 + 40)];
  }
  return result;
}

id sub_43E50(uint64_t a1)
{
  id result = *(id *)(a1 + 32);
  if (!*((_BYTE *)result + 141)) {
    return [result _undimAllLayersInLayer:*((void *)result + 2)];
  }
  return result;
}

void *sub_4441C(void *result)
{
  uint64_t v1 = result[4];
  if (!*(_BYTE *)(v1 + 141))
  {
    uint64_t v2 = result;
    *(_BYTE *)(*(void *)(v1 + 40) + 392LL) = *((_BYTE *)result + 40);
    uint64_t v3 = *(void *)(result[4] + 40LL);
    if (*(_BYTE *)(v3 + 392))
    {
      *(void *)(v3 + 400) = 0LL;
    }

    else
    {
      [*(id *)(v3 + 408) cleanup];
      [*(id *)(*(void *)(v2[4] + 40) + 408) releaseByUser];
      *(void *)(*(void *)(v2[4] + 40LL) + 408LL) = 0LL;
      [*(id *)(*(void *)(v2[4] + 40) + 416) cleanup];
      id result = [*(id *)(*(void *)(v2[4] + 40) + 416) releaseByUser];
      *(void *)(*(void *)(v2[4] + 40LL) + 416LL) = 0LL;
    }
  }

  return result;
}

id sub_44E50(uint64_t a1)
{
  for (uint64_t i = 320LL; i != 344; i += 8LL)
    id result = [*(id *)(*(void *)(*(void *)(a1 + 32) + 40) + i) setAssetPath:0 ofSlide:@"image0"];
  return result;
}

void sub_450C4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

id sub_450DC(uint64_t a1)
{
  id result = objc_msgSend( objc_msgSend( objc_msgSend( *(id *)(a1 + 32),  "_layerForPlugObjectID:",  *(void *)(*(void *)(*(void *)(a1 + 32) + 40) + 296)),  "currentSublayer"),  "currentSlideInfoForElement:",  *(void *)(a1 + 40));
  *(void *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 40LL) = result;
  return result;
}

void sub_451C8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

id sub_451E0(uint64_t a1)
{
  id result = objc_msgSend( objc_msgSend( objc_msgSend( *(id *)(a1 + 32),  "_layerForPlugObjectID:",  *(void *)(*(void *)(*(void *)(a1 + 32) + 40) + 296)),  "currentSublayer"),  "currentSlideInfos");
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL) = result;
  return result;
}

id sub_45278(uint64_t a1)
{
  return -[NSNotificationCenter postNotificationName:object:]( +[NSNotificationCenter defaultCenter](&OBJC_CLASS___NSNotificationCenter, "defaultCenter"),  "postNotificationName:object:",  *(void *)(a1 + 32),  *(void *)(a1 + 40));
}

void sub_454F0(uint64_t a1, int a2)
{
  uint64_t v4 = objc_autoreleasePoolPush();
  uint64_t state64 = 0LL;
  uint64_t state = notify_get_state(a2, &state64);
  if ((_DWORD)state)
  {
    NSLog(@"notify_get_state failed (%u) for kOSThermalNotificationPressureLevelName", state);
  }

  else
  {
    notify_suspend(a2);
    uint64_t v6 = state64;
    NSLog(@"OS thermal pressure level changed to %d", state64);
    [*(id *)(a1 + 32) _adaptToPressureLevel:v6];
    notify_resume(a2);
  }

  objc_autoreleasePoolPop(v4);
}

LABEL_38:
  BYTE1(self->_y0) = 1;
  return 0.0;
}

  if (!v26) {
    goto LABEL_41;
  }
  if (v26 == 1)
  {
    [a3 setSizingMode:@"Scale to Fit"];
LABEL_44:
    v34 = v14 * v25;
    v114 = 0.0;
    v115 = 0.0;
    v35 = v14;
    goto LABEL_49;
  }

  v31 = kMPSlideSizingModeBestFit;
LABEL_43:
  [a3 setSizingMode:*v31];
  if (v29) {
    goto LABEL_44;
  }
  if (v12 / v25 >= v14) {
    v35 = v14;
  }
  else {
    v35 = v12 / v25;
  }
  v34 = v25 * v35;
  v114 = (v14 - v35) * 0.5;
  v115 = (v12 - v25 * v35) * 0.5;
LABEL_49:
  if (v28) {
    v36 = 1.10000002;
  }
  else {
    v36 = 1.29999995;
  }
  v116 = v35;
  v117 = v34;
  v110 = v19;
  v112 = v14;
  if (v17 > 1.0)
  {
    if (v12 >= v34 || v14 <= v35)
    {
      v37 = 1.0;
      if (v14 < v35) {
        v37 = v35 / v14;
      }
    }

    else
    {
      v37 = v34 / v12;
    }

    v36 = v37 + 0.25;
  }

  else
  {
    v37 = 1.00999999;
  }

  +[MPAuthoringUtilities kenBurnsStartZoomLevelFromOptions:]( &OBJC_CLASS___MPAuthoringUtilities,  "kenBurnsStartZoomLevelFromOptions:",  a4);
  v40 = v39;
  +[MPAuthoringUtilities kenBurnsEndZoomLevelFromOptions:]( &OBJC_CLASS___MPAuthoringUtilities,  "kenBurnsEndZoomLevelFromOptions:",  a4);
  v42 = v41;
  +[MPAuthoringUtilities maxKenBurnsZoomFromOptions:]( &OBJC_CLASS___MPAuthoringUtilities,  "maxKenBurnsZoomFromOptions:",  a4);
  if (v36 <= v43 || v43 == -1.0) {
    v45 = v36;
  }
  else {
    v45 = v43;
  }
  v46 = randomFloatInRange(v37, v45);
  v111 = v12;
  if (v20)
  {
    v47 = randomFloatInRange(v37, v45 - (v45 - v37) * 0.899999976);
    randomFloatInRange(v37, v45);
    v37 = v37 + (v45 - v37) * 0.899999976;
  }

  else
  {
    v47 = v46;
  }

  v48 = randomFloatInRange(v37, v45);
  if (v40 <= -1.0) {
    v49 = v47;
  }
  else {
    v49 = v40;
  }
  if (v42 <= -1.0) {
    v50 = v48;
  }
  else {
    v50 = v42;
  }
  v51 = vabdd_f64(v49, v50);
  if (v51 > 0.150000006)
  {
    v52 = (v51 + -0.150000006) * 0.5;
    v53 = -v52;
    v54 = v49 <= v50;
    if (v49 <= v50) {
      v55 = -v52;
    }
    else {
      v55 = v52;
    }
    v50 = v50 + v55;
    if (v54) {
      v53 = v52;
    }
    v49 = v49 + v53;
  }

  +[MPAuthoringUtilities kenBurnsPanFactorFromOptions:]( &OBJC_CLASS___MPAuthoringUtilities,  "kenBurnsPanFactorFromOptions:",  a4);
  v108 = v56;
  v57 = CenterRectOverRect(0.0, 0.0, v12 * v49, v112 * v49, v115, v114, v117, v116);
  v58 = (v115 - FloorRect(v57)) / v117;
  v62 = v61 > v117;
  if (v61 <= v117) {
    v63 = -v58;
  }
  else {
    v63 = v58;
  }
  if (v62) {
    v58 = -v58;
  }
  v64 = (v114 - v59) / v116;
  v65 = v60 > v116;
  if (v60 <= v116) {
    v66 = -v64;
  }
  else {
    v66 = v64;
  }
  if (v65) {
    v64 = -v64;
  }
  v67 = v118 / 6.0;
  if (v118 < 6.0) {
    v68 = v118 / 6.0 * v66;
  }
  else {
    v68 = v66;
  }
  if (v118 < 6.0) {
    v69 = v118 / 6.0 * v64;
  }
  else {
    v69 = v64;
  }
  if (v118 < 6.0) {
    v70 = v118 / 6.0 * v63;
  }
  else {
    v70 = v63;
  }
  if (v118 < 6.0) {
    v58 = v118 / 6.0 * v58;
  }
  if (!v29)
  {
    v72 = x;
LABEL_114:
    v71 = v109;
    goto LABEL_115;
  }

  v71 = 0.649999976;
  v72 = 0.649999976;
  if (x <= 0.649999976)
  {
    v72 = x;
    if (x < 0.349999994) {
      v72 = 0.349999994;
    }
  }

  if (v109 <= 0.649999976)
  {
    v71 = 0.349999994;
    if (v109 >= 0.349999994) {
      goto LABEL_114;
    }
  }

    __int128 v11 = (uint64_t)v16;
    goto LABEL_39;
  }

  BOOL v19 = (void *)(*(uint64_t (**)(void, unsigned __int8 *, uint64_t))(**(void **)(a1 + 24) + 16LL))( *(void *)(a1 + 24),  v5,  a4);
  double v20 = v19;
  if (v16) {
    v21 = v19 == 0LL;
  }
  else {
    v21 = 1;
  }
  if (!v21)
  {
    if ((int)a4 >= 1)
    {
      v22 = v8;
      v23 = v19;
      v24 = v16;
      v25 = a4;
      do
      {
        v26 = *v5++;
        if (!v26 && *v22 != 0.0) {
          *v24 = *v23;
        }
        ++v24;
        ++v23;
        ++v22;
        --v25;
      }

      while (v25);
    }

    operator delete[](v19);
    goto LABEL_38;
  }

  operator delete[](v8);
  if (v20) {
    operator delete[](v20);
  }
  __int128 v11 = 0LL;
  uint64_t v8 = (float *)v16;
  if (v16) {
    goto LABEL_39;
  }
  return v11;
}

    __int128 v11 = (uint64_t)v16;
    goto LABEL_39;
  }

  BOOL v19 = (void *)(*(uint64_t (**)(void, unsigned __int8 *, uint64_t))(**(void **)(a1 + 24) + 16LL))( *(void *)(a1 + 24),  v5,  a4);
  double v20 = v19;
  if (v16) {
    v21 = v19 == 0LL;
  }
  else {
    v21 = 1;
  }
  if (!v21)
  {
    if ((int)a4 >= 1)
    {
      v22 = v8;
      v23 = v19;
      v24 = v16;
      v25 = a4;
      do
      {
        v26 = *v5++;
        if (!v26 && *v22 != 0.0) {
          *v24 = *v23;
        }
        ++v24;
        ++v23;
        ++v22;
        --v25;
      }

      while (v25);
    }

    operator delete[](v19);
    goto LABEL_38;
  }

  operator delete[](v8);
  if (v20) {
    operator delete[](v20);
  }
  __int128 v11 = 0LL;
  uint64_t v8 = (double *)v16;
  if (v16) {
    goto LABEL_39;
  }
  return v11;
}

  -[MRCroppingSprite renderImage:inContext:atPosition:andSize:]( v28,  "renderImage:inContext:atPosition:andSize:",  v25,  a12,  x,  y,  width,  height);
  [a12 unsetShader];
  [a12 restoreModelViewMatrix:v63];
  [v25 releaseByUser];
}

void sub_490D0(_Unwind_Exception *a1)
{
}

LABEL_36:
  v30.receiver = self;
  v30.super_class = (Class)&OBJC_CLASS___MRLayerParallelizer;
  -[MRLayer observeValueForKeyPath:ofObject:change:context:]( &v30,  "observeValueForKeyPath:ofObject:change:context:",  a3,  a4,  v7,  v6,  v28,  v29);
}

  objc_msgSend(a4, "localAspectRatio", v31, v33, v34, *(void *)&v82);
  if (v44 >= 0.6)
  {
    if (BYTE2(self->mBreakInformation)) {
      v45 = v32 * 0.800000012;
    }
    else {
      v45 = v32;
    }
  }

  else
  {
    v45 = v32 * 0.800000012;
  }

  v89 = 0u;
  v90 = 0u;
  v87 = 0u;
  v88 = 0u;
  v46 = *(void **)&self->mIsLoaded;
  v47 = [v46 countByEnumeratingWithState:&v87 objects:v91 count:16];
  if (v47)
  {
    v48 = v47;
    v49 = *(void *)v88;
    v85 = fmin(v86, 1.77777779);
    do
    {
      for (uint64_t i = 0LL; i != v48; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v88 != v49) {
          objc_enumerationMutation(v46);
        }
        v51 = *(void *)(*((void *)&v87 + 1) + 8LL * (void)i);
        v52 = ImageKey(*(void *)(v51 + 40));
        v53 = *(double *)(v51 + 24);
        if (v53 == -1.0)
        {
          if (v86 >= 1.0 || *(_BYTE *)(v51 + 224) == 0) {
            v53 = v85;
          }
          else {
            v53 = 0.666666687;
          }
        }

        v55 = *(double *)(v51 + 56);
        [a4 localAspectRatio];
        v57 = v56;
        [a4 localAspectRatio];
        if (v58 >= 1.0 || (v59 = *(int64_t *)((char *)&self->mDirection + 1), v59 != 13) && v59)
        {
          v62 = *(double *)(v51 + 64) * 0.00499999989 + v55 / v57 * v53;
          v63 = *(double *)(v51 + 32);
          v64 = *(double *)(v51 + 72) * 0.00499999989;
          [a4 localAspectRatio];
          v61 = v64 * v65 + v63 * 1.60000002;
        }

        else
        {
          [a4 localAspectRatio];
          v61 = 1.60000002 / v53 * v60;
          v62 = 1.60000002;
        }

        v66 = v45 * v62;
        v67 = v45 * v61;
        v68 = *(double *)(v51 + 16);
        v69 = *(double *)(v51 + 88);
        v70 = *(double *)(v51 + 80) + v66 * *(double *)(v51 + 8);
        [a4 localAspectRatio];
        v72 = v69 * v71 + v67 * v68;
        -[MREffectReflections _yRotationForTime:layout:](self, "_yRotationForTime:layout:", v51, a3);
        v74 = v73;
        -[MREffectReflections _tXForTime:layout:](self, "_tXForTime:layout:", v51, a3);
        v76 = v75;
        [a4 localAspectRatio];
        if (v77 < 1.0) {
          v76 = v76 * 1.14999998;
        }
        [a4 localAspectRatio];
        -[MREffectReflections _yOffsetForTime:layout:size:position:aspectRatio:]( self,  "_yOffsetForTime:layout:size:position:aspectRatio:",  v51,  a3,  v66,  v67,  v70,  v72,  v78);
        if (*(_BYTE *)(v51 + 48))
        {
          v80 = self->super.mPhaseInDuration + self->super.mMainDuration <= a3
             && *(int64_t *)((char *)&self->mTilt + 1) == 0;
          v81 = !v80;
        }

        else
        {
          v81 = 0LL;
        }

        -[MREffectReflections renderKey:size:position:yRot:tX:time:inContext:withArguments:flipped:shadow:]( self,  "renderKey:size:position:yRot:tX:time:inContext:withArguments:flipped:shadow:",  v52,  a4,  a5,  *(unsigned __int8 *)(v51 + 48) != 0,  v81,  v66,  v67,  v70,  v79,  v74,  v76,  a3);
      }

      v48 = [v46 countByEnumeratingWithState:&v87 objects:v91 count:16];
    }

    while (v48);
  }

  -[MREffectReflections renderStuffAtTime:alpha:inContext:withArguments:]( self,  "renderStuffAtTime:alpha:inContext:withArguments:",  a4,  a5,  a3,  v84);
}

  if ((self->super.mFlags & 0x40) != 0) {
    v34 = (CGFloat *)&mGeometry[72 * (self->super.mFlags >> 28)];
  }
  else {
    v34 = (CGFloat *)&mGeometry[48 * (self->super.mFlags >> 28)];
  }
  *v34 = x;
  v34[1] = y;
}

    mGeometry = v13;
  }

    mGeometry = v13;
  }

void sub_49760(id a1, MRLayer *a2, unint64_t a3, BOOL *a4)
{
  if (-[MRLayer isPreactivated](a2, "isPreactivated", a3, a4)) {
    -[MRLayer synchronizeTime](a2, "synchronizeTime");
  }
}

id sub_497F4(uint64_t a1, void *a2)
{
  id result = [a2 isPreactivated];
  if ((_DWORD)result)
  {
    objc_msgSend(objc_msgSend(a2, "plugAsParallel"), "aspectRatioForParentAspectRatio:", *(double *)(a1 + 32));
    return objc_msgSend(a2, "beginMorphingToAspectRatio:withDuration:");
  }

  return result;
}

void sub_4985C(id a1, MRLayer *a2, unint64_t a3, BOOL *a4)
{
  if (-[MRLayer isPreactivated](a2, "isPreactivated", a3, a4)) {
    -[MRLayer endMorphing](a2, "endMorphing");
  }
}

id sub_49924(uint64_t a1, void *a2)
{
  id result = [a2 isPreactivated];
  if ((_DWORD)result)
  {
    double v5 = *(double *)(a1 + 32);
    [a2 timeIn];
    return [a2 setDuration:v5 - v6];
  }

  return result;
}

void sub_49A6C(id a1, MRLayer *a2, unint64_t a3, BOOL *a4)
{
  if (-[MRLayer isActivated](a2, "isActivated", a3, a4)) {
    -[MRLayer deactivate](a2, "deactivate");
  }
}

id sub_49B34(uint64_t a1, void *a2)
{
  id result = [a2 isPreactivated];
  if ((_DWORD)result)
  {
    [*(id *)(a1 + 32) _unobserveSublayerOnDepreactivate:a2];
    return [a2 depreactivate:*(unsigned __int8 *)(a1 + 40)];
  }

  return result;
}

LABEL_15:
  __int128 v18 = [a5 forcedState];
  BOOL v19 = v18;
  if (v18) {
    double v20 = [v18 objectForKey:@"activatedSublayers"];
  }
  else {
    double v20 = 0LL;
  }
  v50 = [a5 currentLayoutIndex];
  -[MRLayerClock containerTime](v7->super.mClock, "containerTime");
  v22 = v21;
  v53 = 0u;
  v54 = 0u;
  v55 = 0u;
  v56 = 0u;
  obj = v7->mSublayers;
  v49 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( obj,  "countByEnumeratingWithState:objects:count:",  &v53,  v58,  16LL);
  if (v49)
  {
    v43 = v19;
    v47 = *(void *)v54;
    v51 = v7;
    v44 = a5;
    v48 = v20;
    do
    {
      for (uint64_t i = 0LL; i != v49; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v54 != v47) {
          objc_enumerationMutation(obj);
        }
        v24 = *(void **)(*((void *)&v53 + 1) + 8LL * (void)i);
        v25 = [v24 plugAsParallel];
        v26 = v25;
        if (v20)
        {
          v27 = objc_msgSend(v20, "objectForKey:", objc_msgSend(v25, "idInSupercontainer"));
          if (v27)
          {
            if ([v26 isTriggered])
            {
              objc_msgSend(objc_msgSend(v27, "objectForKey:", @"timeIn"), "doubleValue");
              objc_msgSend(v26, "setTimeIn:");
            }

            LODWORD(v20) = 1;
          }

          else
          {
            LODWORD(v20) = 0;
          }
        }

        else
        {
          v27 = 0LL;
        }

        [v24 timeIn];
        v29 = v22 - v28;
        v30 = [v24 isPreactivated];
        v31 = [v24 isActivated];
        else {
          v32 = [v24 shouldBePreactivatedAtTime:v29];
        }
        v33 = !v7->super.mIsActivated || v32 == 0;
        else {
          v34 = [v26 isTriggered] ^ 1 | v20 | v31;
        }
        v52 |= v31 ^ v34;
        if (v32)
        {
          if ((v30 & 1) == 0)
          {
            [v24 preactivate];
            -[MRLayerParallelizer _observeSublayerOnPreactivate:](v51, "_observeSublayerOnPreactivate:", v24);
            objc_msgSend(objc_msgSend(v24, "parentHelper"), "setNeedsUpdate:", 1);
          }

          if (((v34 ^ 1 | v31) & 1) != 0)
          {
            v35 = v34 | v31 ^ 1;
            v36 = v44;
            if ((v35 & 1) == 0) {
              [v24 deactivate];
            }
          }

          else
          {
            [v24 activate];
            v36 = v44;
          }

          if (v34)
          {
            if ((_DWORD)v20)
            {
              v37 = [v27 objectForKey:@"persistentState"];
              if (v37) {
                [v24 _applyState:v37];
              }
            }

            v38 = [v24 parentHelper];
            id v7 = v51;
            if ([v38 needsUpdate])
            {
              [v38 setPlug:v26];
              double v20 = v48;
LABEL_62:
              v39 = [v26 actionForKey:@"onLayoutChange"];
              if (v39) {
                objc_msgSend( v24,  "_sendAction:withStates:async:yesterday:",  v39,  +[NSDictionary dictionaryWithObject:forKey:]( NSDictionary,  "dictionaryWithObject:forKey:",  +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v50),  @"_currentLayoutIndex"),  0,  0);
              }
            }

            else
            {
              double v20 = v48;
              if (v50 != [v38 currentLayoutIndex])
              {
                [v38 setCurrentLayoutIndex:v50];
                goto LABEL_62;
              }
            }

            v52 |= [v38 applyAtTime:v24 toSublayer:v36 withArguments:v29];
            objc_msgSend(objc_msgSend(v24, "clock"), "externalTime");
            v29 = v40;
          }

          else
          {
            id v7 = v51;
            double v20 = v48;
          }

          if (v43) {
            [v36 setForcedState:v27];
          }
          v52 |= [v24 prerenderForTime:a4 inContext:v36 withArguments:v29];
          continue;
        }

        if (v31) {
          [v24 deactivate];
        }
        id v7 = v51;
        double v20 = v48;
        if (v30)
        {
          -[MRLayerParallelizer _unobserveSublayerOnDepreactivate:](v51, "_unobserveSublayerOnDepreactivate:", v24);
          [v24 depreactivate:1];
        }
      }

      v49 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( obj,  "countByEnumeratingWithState:objects:count:",  &v53,  v58,  16LL);
    }

    while (v49);
  }

  if (v7->super.mIsActivated)
  {
    if (v7->mNeedsToUpdateSublayersOrdering)
    {
      -[MRLayerParallelizer _updateSublayersOrdering](v7, "_updateSublayersOrdering");
      v41 = v7->super.mIsActivated & v52;
    }

    else
    {
      v41 = v52;
    }
  }

  else
  {
    v41 = 0;
  }

  return v41 & 1;
}

    operator delete[](v8);
    return v6;
  }

  if (v6) {
    operator delete[](v6);
  }
  double v6 = 0LL;
  id result = 0LL;
  if (v8) {
    goto LABEL_15;
  }
  return result;
}

    operator delete[](v8);
    return v6;
  }

  if (v6) {
    operator delete[](v6);
  }
  double v6 = 0LL;
  id result = 0LL;
  if (v8) {
    goto LABEL_15;
  }
  return result;
}

    -[MRTextRenderer originOfGlyphAtIndex:]( v20,  "originOfGlyphAtIndex:",  -[MRTextRenderer _glyphIndexForStringIndex:inString:forSize:]( v20,  "_glyphIndexForStringIndex:inString:forSize:",  v9,  v19,  v27[0],  v27[1]));
  }

  else
  {
    x = CGPointZero.x;
    y = CGPointZero.y;
  }

  result.y = y;
  result.x = x;
  return result;
}

void sub_4A6F8(_Unwind_Exception *a1)
{
}

void sub_4A95C(_Unwind_Exception *a1)
{
}

void sub_4AAF8(_Unwind_Exception *a1)
{
}

void sub_4ABC4(_Unwind_Exception *a1)
{
}

void sub_4AD58(_Unwind_Exception *a1)
{
}

void sub_4BBE8(_Unwind_Exception *a1)
{
}

void sub_4C3E8(_Unwind_Exception *a1)
{
}

int64_t sub_4C428(id a1, MRLayer *a2, MRLayer *a3)
{
  unsigned int v4 = -[MCPlugParallel zIndex](-[MRLayer plugAsParallel](a2, "plugAsParallel"), "zIndex");
  unsigned int v5 = -[MCPlugParallel zIndex](-[MRLayer plugAsParallel](a3, "plugAsParallel"), "zIndex");
  if (v4 < v5) {
    return -1LL;
  }
  else {
    return v5 < v4;
  }
}

void sub_4C544(_Unwind_Exception *a1)
{
}

void sub_4C5F4(_Unwind_Exception *a1)
{
}

LABEL_27:
  if (mBackgroundColor[3] < 0.0)
  {
    if (self->super.mRenderingState->var19) {
      mBackgroundColor = (float *)[a4 backColor];
    }
    else {
      mBackgroundColor = 0LL;
    }
  }

  v22 = objc_msgSend( objc_msgSend(a4, "imageManager"),  "retainedByUserImageWithSize:andColor:",  mBackgroundColor,  1.0,  1.0);
  [v22 setLabel:@"Marimba Parallelizer Background"];
  [v22 setClampMode:2];
  return v22;
}

                    if (v12 == (id)++v14)
                    {
                      __int128 v12 = [a3 countByEnumeratingWithState:&v33 objects:v45 count:16];
                      if (v12) {
                        goto LABEL_16;
                      }
                      break;
                    }
                  }
                }

                objc_msgSend(v28, "addObject:", objc_msgSend(v29, "stringByAppendingPathComponent:", v9));
LABEL_32:
                id v7 = v31;
              }

              v32 = -[NSDictionary countByEnumeratingWithState:objects:count:]( v31,  "countByEnumeratingWithState:objects:count:",  &v37,  v46,  16LL);
            }

            while (v32);
          }
        }

        unsigned int v5 = v27 + 1;
      }

      while ((id)(v27 + 1) != v26);
      v26 = -[NSMutableDictionary countByEnumeratingWithState:objects:count:]( obj,  "countByEnumeratingWithState:objects:count:",  &v41,  v47,  16LL);
    }

    while (v26);
  }

  return v28;
}

                    if (v12 == (id)++v14)
                    {
                      __int128 v12 = [a3 countByEnumeratingWithState:&v33 objects:v45 count:16];
                      if (v12) {
                        goto LABEL_16;
                      }
                      break;
                    }
                  }
                }

                objc_msgSend(v28, "addObject:", objc_msgSend(v29, "stringByAppendingPathComponent:", v9));
LABEL_32:
                id v7 = v31;
              }

              v32 = -[NSDictionary countByEnumeratingWithState:objects:count:]( v31,  "countByEnumeratingWithState:objects:count:",  &v37,  v46,  16LL);
            }

            while (v32);
          }
        }

        unsigned int v5 = v27 + 1;
      }

      while ((id)(v27 + 1) != v26);
      v26 = -[NSMutableDictionary countByEnumeratingWithState:objects:count:]( obj,  "countByEnumeratingWithState:objects:count:",  &v41,  v47,  16LL);
    }

    while (v26);
  }

  return v28;
}

        objc_msgSend( v23,  "setObject:forKey:",  +[NSMutableDictionary dictionaryWithDictionary:]( NSMutableDictionary,  "dictionaryWithDictionary:",  objc_msgSend(v14, "objectForKey:", @"constraints")),  v13);
      }

      __int128 v11 = -[NSMutableSet countByEnumeratingWithState:objects:count:]( obj,  "countByEnumeratingWithState:objects:count:",  &v31,  v40,  16LL);
    }

    while (v11);
  }

  return v23;
}

  uint64_t v8 = +[NSString stringWithFormat:]( NSString,  "stringWithFormat:",  @"%d-%d%d%d",  (int)width,  [a4 wantsMonochromatic],  objc_msgSend(a4, "wantsMipmap"),  objc_msgSend(a4, "wantsPowerOfTwo"));
LABEL_28:
  players = self->_players;
  objc_sync_enter(players);
  v26 = (MRAssetPlayerStillImage *)-[NSMutableDictionary objectForKey:](self->_players, "objectForKey:", v8);
  v27 = [a4 isForExport];
  v29 = off_24C638;
  if (!v27) {
    v29 = off_24C630;
  }
  v30 = (objc_class *)objc_opt_class(*v29, v28);
  while (v26)
  {
    if ((objc_opt_isKindOfClass(v26, v30) & 1) == 0
      || v26 == [a4 playerHint]
      || (-[NSMutableSet containsObject:](self->_unusedPlayers, "containsObject:", v26) & 1) != 0)
    {
      -[NSMutableSet removeObject:](self->_unusedPlayers, "removeObject:", v26);
      goto LABEL_69;
    }

    uint64_t v8 = (__CFString *)-[__CFString stringByAppendingString:](v8, "stringByAppendingString:", @".");
    v26 = (MRAssetPlayerStillImage *)-[NSMutableDictionary objectForKey:](self->_players, "objectForKey:", v8);
  }

  if ((v9 & 1) != 0)
  {
    v26 = 0LL;
  }

  else
  {
    if ((v20 & 1) != 0 || !self->_isSupportedMovie)
    {
      if ([a4 thumbnailIsOK])
      {
        v56 = 0u;
        v57 = 0u;
        v54 = 0u;
        v55 = 0u;
        v31 = -[NSMutableDictionary objectEnumerator](self->_players, "objectEnumerator");
        v33 = [v31 countByEnumeratingWithState:&v54 objects:v58 count:16];
        if (v33)
        {
          v53 = 0LL;
          v34 = *(void *)v55;
          do
          {
            for (uint64_t i = 0LL; i != v33; uint64_t i = (char *)i + 1)
            {
              if (*(void *)v55 != v34) {
                objc_enumerationMutation(v31);
              }
              v36 = *(void **)(*((void *)&v54 + 1) + 8LL * (void)i);
              v37 = objc_opt_class(&OBJC_CLASS___MRAssetPlayerStillImage, v32);
              if ((objc_opt_isKindOfClass(v36, v37) & 1) != 0)
              {
                v38 = [a4 wantsMonochromatic];
                if (v38 == [v36 isMonochromatic])
                {
                  v39 = [a4 wantsMipmap];
                  if (v39 == [v36 generatesMipmap])
                  {
                    v40 = [a4 wantsPowerOfTwo];
                    if (v40 == [v36 usesPowerOfTwo])
                    {
                      v41 = [v36 retainedByUserCurrentImage];
                      v42 = v41;
                      if (v41)
                      {
                        if (!v53
                          || ([v41 size],
                              v44 = v43,
                              [v53 size],
                              v46 = v45,
                              v47 = fabs(log2(v44 / width)),
                              v47 < fabs(log2(v46 / width))))
                        {
                          [v53 releaseByUser];
                          v53 = [v42 retainByUser];
                        }

                        [v42 releaseByUser];
                      }
                    }
                  }
                }
              }
            }

            v33 = [v31 countByEnumeratingWithState:&v54 objects:v58 count:16];
          }

          while (v33);
        }

        else
        {
          v53 = 0LL;
        }

        [a4 setInitialImage:v53];
        [v53 releaseByUser];
      }

      v48 = -[MRAssetPlayerStillImage initWithPath:size:master:andOptions:]( objc_alloc(&OBJC_CLASS___MRAssetPlayerStillImage),  "initWithPath:size:master:andOptions:",  self->_path,  self,  a4,  width,  height);
    }

    else
    {
      if (self->_isEmbeddedAsset
        || (v49 = -[MRContext assetManager]( -[MRImageManager baseContext](self->_imageManager, "baseContext"),  "assetManager"),  !-[MZMediaManagement avAssetForAssetAtPath:](v49, "avAssetForAssetAtPath:", self->_path))
        && ((v51 = -[MZMediaManagement absolutePathForAssetAtPath:andSize:]( v49,  "absolutePathForAssetAtPath:andSize:",  self->_path,  width,  height),  (v52 = v51) == 0LL)
         || ![v51 isAbsolutePath]
         || !-[NSFileManager fileExistsAtPath:isDirectory:]( +[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager"),  "fileExistsAtPath:isDirectory:",  v52,  0LL)))
      {
        v30 = (objc_class *)&OBJC_CLASS___MRAssetPlayerStillImage;
      }

      v48 = (MRAssetPlayerStillImage *)objc_msgSend( [v30 alloc],  "initWithPath:size:master:andOptions:",  self->_path,  self,  a4,  width,  height);
    }

    v26 = v48;
  }

  -[NSMutableDictionary setObject:forKey:](self->_players, "setObject:forKey:", v26, v8);

LABEL_69:
  __int128 v16 = -[MRAssetPlayer retainByUser](v26, "retainByUser");
  objc_sync_exit(players);
  return v16;
}

  *a5 = v21;
  *a6 = v13 - v21;
  return result;
}

void sub_4DB28(_Unwind_Exception *a1)
{
}

LABEL_30:
  v28.receiver = self;
  v28.super_class = (Class)&OBJC_CLASS___MRLayerNavigator;
  -[MRLayer observeValueForKeyPath:ofObject:change:context:]( &v28,  "observeValueForKeyPath:ofObject:change:context:",  a3,  a4,  a5,  a6,  v26);
}

          v26 = [v20 userInfoAttributeForKey:@"savedExportDuration"];
          if (v26 && (v27 = v26, [v26 doubleValue], v28 > 0.0))
          {
            [v27 doubleValue];
          }

          else
          {
            if ([v20 countOfEffects]) {
              v32 = 0;
            }
            else {
              v32 = v15;
            }
            if (v32 != 1) {
              goto LABEL_44;
            }
            [v20 duration];
            v34 = v33;
            [v20 introTransitionDuration];
            v36 = v35;
            [v25 duration];
            if (v34 >= v36 + v37) {
              goto LABEL_44;
            }
            [v20 introTransitionDuration];
            v39 = v38;
            [v25 duration];
            v29 = v39 + v40;
          }

          [v20 setDuration:v29];
LABEL_44:
          [v20 setTransition:v25];
          goto LABEL_48;
        }
      }

      else
      {
        v24 = 1;
      }

      __int128 v12 = &AVAudioTimePitchAlgorithmVarispeed_ptr;
      goto LABEL_28;
    }
  }

    a4 = v73;
    __int128 v18 = v70;
  }

  double v20 = v71;
  -[NSFileManager createDirectoryAtPath:withIntermediateDirectories:attributes:error:]( +[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager"),  "createDirectoryAtPath:withIntermediateDirectories:attributes:error:",  v26,  1LL,  0LL,  0LL);
  v26 = objc_msgSend(v26, "stringByAppendingPathComponent:", objc_msgSend(v27, "lastObject"));
  if (!-[NSFileManager fileExistsAtPath:]( +[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager"),  "fileExistsAtPath:",  v26))
  {
    NSLog(@"Creating thumbnail at path %@ for path %@", v26, v75);
    v40 = 256.0;
    v39 = 256.0;
    a2 = v72;
    if ((v19 & 1) != 0) {
      goto LABEL_27;
    }
    goto LABEL_73;
  }

  v39 = 256.0;
  v42 = (CGImage *)objc_msgSend( v18,  "CGImageWithPath:withOriginalSize:forSize:orientation:",  v26,  &v80,  256.0,  256.0,  256.0,  256.0);
  v40 = 256.0;
  a2 = v72;
  if (v42) {
    goto LABEL_77;
  }
LABEL_26:
  if ((v19 & 1) != 0)
  {
LABEL_27:
    v41 = v18;
    v25 = v75;
    goto LABEL_35;
  }

  self->super._time = a5;
}

LABEL_111:
    -[MRLayerClock setContainerTime:]( -[MRLayer clock](self->mCurrentSublayer, "clock"),  "setContainerTime:",  mCurrentSublayerContainerTimeOnTransitionStart);
LABEL_112:
    v82 = self->mCurrentSublayer;
    -[MRLayerClock externalTime](-[MRLayer clock](v82, "clock"), "externalTime");
    v8 |= -[MRLayer prerenderForTime:inContext:withArguments:](v82, "prerenderForTime:inContext:withArguments:", a4, a5);
    self->mElementToDraw = 1;
    goto LABEL_131;
  }

  v42 = self->mForcedTransitionProgress;
  if (v42 < 0.0)
  {
    v43 = self->mTotalMotionDuration;
    v42 = 1.0;
    if (v43 > 0.0) {
      v42 = (v12 - self->mTransitionStartTime) / v43;
    }
  }

  if (self->mTransitionWasAborted) {
    v44 = 1.0 - v42;
  }
  else {
    v44 = v42;
  }
  -[MRLayer timeIn](self->mNextSublayer, "timeIn");
  v46 = v12 - v45;
  if (v46 >= 0.0) {
    v47 = v46;
  }
  else {
    v47 = 0.0;
  }
  -[MRLayerClock setExternalTime:](-[MRLayer clock](self->mNextSublayer, "clock"), "setExternalTime:", v47);
  if (!self->mControlsSublayerTimes)
  {
    if (self->mTransitionIsBackwards) {
      v65 = 1.0 - v44;
    }
    else {
      v65 = v44;
    }
    if (!-[MRTransition prerenderForTime:inContext:withArguments:]( self->mCurrentTransition,  "prerenderForTime:inContext:withArguments:",  a4,  a5,  v65))
    {
LABEL_121:
      v76 = 3;
      goto LABEL_128;
    }

LABEL_119:
    if (v65 != self->_previouslyRenderedTransitionProgress) {
      LOBYTE(v_Block_object_dispose(va, 8) = 1;
    }
    goto LABEL_121;
  }

  v48 = self->mTotalMotionDuration;
  v49 = v44 * v48;
  if (self->mTransitionIsBackwards)
  {
    v50 = self->mCurrentSublayerContainerTimeOnTransitionStart;
    v51 = self->mCurrentSublayerLazyFactor;
    v52 = (v50 - self->mCurrentSublayerInterestingTime) * v51;
    if (v49 >= v52)
    {
      v79 = self->mNextSublayerLazyFactor;
      if (v49 <= v48 - self->mNextSublayerLazyDuration * v79)
      {
        mTransitionDuration = self->mTransitionDuration;
        v87 = 1.0 - -(v52 - v44 * v48) / mTransitionDuration;
        -[MRLayerClock setContainerTime:]( -[MRLayer clock](self->mCurrentSublayer, "clock"),  "setContainerTime:",  mTransitionDuration * v87);
        -[MRLayer duration](self->mNextSublayer, "duration");
        v89 = (1.0 - v87) * self->mTransitionDuration;
        if (v89 < 0.001) {
          v89 = 0.001;
        }
        -[MRLayerClock setContainerTime:]( -[MRLayer clock](self->mNextSublayer, "clock"),  "setContainerTime:",  v88 - v89);
        if (-[MRTransition prerenderForTime:inContext:withArguments:]( self->mCurrentTransition,  "prerenderForTime:inContext:withArguments:",  a4,  a5,  v87)
          && v87 != self->_previouslyRenderedTransitionProgress)
        {
          LOBYTE(v_Block_object_dispose(va, 8) = 1;
        }

        v76 = 3;
      }

      else
      {
        -[MRLayerClock setContainerTime:]( -[MRLayer clock](self->mNextSublayer, "clock"),  "setContainerTime:",  (1.0 - v44) * v48 / v79 + self->mNextSublayerInterestingTime);
        v80 = self->mCurrentSublayer;
        -[MRLayerClock externalTime](-[MRLayer clock](v80, "clock"), "externalTime");
        -[MRLayer prerenderForTime:inContext:withArguments:](v80, "prerenderForTime:inContext:withArguments:", a4, a5);
        v81 = self->mNextSublayer;
        -[MRLayerClock externalTime](-[MRLayer clock](v81, "clock"), "externalTime");
        v8 |= -[MRLayer prerenderForTime:inContext:withArguments:]( v81,  "prerenderForTime:inContext:withArguments:",  a4,  a5);
        v76 = 2;
      }

      goto LABEL_128;
    }

    -[MRLayerClock setContainerTime:]( -[MRLayer clock](self->mCurrentSublayer, "clock"),  "setContainerTime:",  v50 - v49 / v51);
    v53 = self->mCurrentSublayer;
    -[MRLayerClock externalTime](-[MRLayer clock](v53, "clock"), "externalTime");
    v54 = v53;
    v55 = a4;
    goto LABEL_103;
  }

  v72 = self->mCurrentSublayerLazyFactor;
  v73 = self->mCurrentSublayerLazyDuration * v72;
  if (v49 >= v73)
  {
    v83 = self->mTransitionDuration;
    v65 = 1.0;
    if (v83 > 0.0) {
      v65 = -(v73 - v44 * v48) / v83;
    }
    -[MRLayer duration](self->mCurrentSublayer, "duration");
    v85 = (1.0 - v65) * self->mTransitionDuration;
    if (v85 < 0.001) {
      v85 = 0.001;
    }
    -[MRLayerClock setContainerTime:](-[MRLayer clock](self->mCurrentSublayer, "clock"), "setContainerTime:", v84 - v85);
    -[MRLayerClock setContainerTime:]( -[MRLayer clock](self->mNextSublayer, "clock"),  "setContainerTime:",  v65 * self->mTransitionDuration);
    if (!-[MRTransition prerenderForTime:inContext:withArguments:]( self->mCurrentTransition,  "prerenderForTime:inContext:withArguments:",  a4,  a5,  v65)) {
      goto LABEL_121;
    }
    goto LABEL_119;
  }

  -[MRLayerClock setContainerTime:]( -[MRLayer clock](self->mCurrentSublayer, "clock"),  "setContainerTime:",  v49 / v72 + self->mCurrentSublayerInterestingTime);
  v74 = self->mCurrentSublayer;
  -[MRLayerClock externalTime](-[MRLayer clock](v74, "clock"), "externalTime");
  v54 = v74;
  v55 = a4;
LABEL_103:
  v8 |= -[MRLayer prerenderForTime:inContext:withArguments:](v54, "prerenderForTime:inContext:withArguments:", v55, a5);
  v75 = self->mNextSublayer;
  -[MRLayerClock externalTime](-[MRLayer clock](v75, "clock"), "externalTime");
  -[MRLayer prerenderForTime:inContext:withArguments:](v75, "prerenderForTime:inContext:withArguments:", a4, a5);
  v76 = 1;
LABEL_128:
  self->mElementToDraw = v76;
  if (-[MRLayerClock jumpedBackInTime](-[MRLayer clock](self->mNextSublayer, "clock"), "jumpedBackInTime")
    && !self->mControlsSublayerTimes)
  {
    -[MRLayer synchronizeTime](self->mNextSublayer, "synchronizeTime");
  }

          -[NSMutableArray addObject:]( v223,  "addObject:",  +[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", 2LL));
          -[NSMutableArray addObject:]( v223,  "addObject:",  +[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", 1LL));
          v12 += 3LL;
          goto LABEL_43;
        }

        -[NSMutableArray addObject:]( v223,  "addObject:",  +[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", 2LL));
        -[NSMutableArray addObject:]( v223,  "addObject:",  +[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", 0LL));
        -[NSMutableArray addObject:]( v223,  "addObject:",  +[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", 0LL));
        v12 += 4LL;
      }

      else
      {
        -[NSMutableArray addObject:]( v223,  "addObject:",  +[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", 2LL));
        -[NSMutableArray addObject:]( v223,  "addObject:",  +[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", 0LL));
        -[NSMutableArray addObject:]( v223,  "addObject:",  +[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", 2LL));
        v12 += 5LL;
      }
    }

    else
    {
      -[NSMutableArray addObject:]( v223,  "addObject:",  +[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", 1LL));
      -[NSMutableArray addObject:]( v223,  "addObject:",  +[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", 0LL));
      v12 += 2LL;
    }

LABEL_131:
  if (-[MRLayerClock jumpedBackInTime](-[MRLayer clock](self->mCurrentSublayer, "clock"), "jumpedBackInTime")
    && !self->mControlsSublayerTimes)
  {
    -[MRLayer synchronizeTime](self->mCurrentSublayer, "synchronizeTime");
  }

  -[MRLayerNavigator _preprecomputeAtTime:inContext:withArguments:]( self,  "_preprecomputeAtTime:inContext:withArguments:",  a4,  a5,  a3);
  if (self->super.mIsActivated)
  {
    if (self->mIsSerializerBased)
    {
      v90 = self->mNextSublayer;
      if (v90 && !-[MCPlugSerial index](-[MRLayer plugAsSerial](v90, "plugAsSerial"), "index"))
      {
        -[MRLayerClock containerTime](-[MRLayer clock](self->mNextSublayer, "clock"), "containerTime");
      }

      else
      {
        currentSublayerTheoreticalTimeIn = self->_currentSublayerTheoreticalTimeIn;
        -[MRLayerClock containerTime](-[MRLayer clock](self->mCurrentSublayer, "clock"), "containerTime");
        v93 = currentSublayerTheoreticalTimeIn + v92;
      }

      self->_currentSlideshowTime = v93;
    }

    mElementToDraw = self->mElementToDraw;
    switch(mElementToDraw)
    {
      case 3:
        v96 = -[MRLayer renderingState](self->mCurrentSublayer, "renderingState");
        *(_OWORD *)&v96->var4 = xmmword_1F60D0;
        *(_OWORD *)&v96->var8 = xmmword_1F60C0;
        *(_OWORD *)&v96->var0 = xmmword_1F60E0;
        v95 = self->mNextSublayer;
        if (v95) {
          goto LABEL_149;
        }
        break;
      case 2:
        v95 = self->mNextSublayer;
        goto LABEL_149;
      case 1:
        v95 = self->mCurrentSublayer;
LABEL_149:
        v97 = -[MRLayer renderingState](v95, "renderingState");
        *(_OWORD *)&v97->var4 = xmmword_1F60D0;
        *(_OWORD *)&v97->var8 = xmmword_1F60C0;
        *(_OWORD *)&v97->var0 = xmmword_1F60E0;
        break;
    }
  }

  else
  {
    LOBYTE(v_Block_object_dispose(va, 8) = 0;
    self->_currentSlideshowTime = 0.0;
  }

  return v8;
}

void sub_4FBF8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
}

void sub_4FC1C(uint64_t a1, uint64_t a2)
{
}

void sub_4FC2C(uint64_t a1)
{
}

id sub_4FC38(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  id result = objc_msgSend( objc_msgSend(objc_msgSend(a2, "plugAsHaven"), "idInSupercontainer"),  "isEqualToString:",  *(void *)(a1 + 32));
  *a4 = (_BYTE)result;
  if ((_DWORD)result) {
    *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL) = a2;
  }
  return result;
}

void sub_4FD8C(_Unwind_Exception *a1)
{
}

void sub_4FF24(_Unwind_Exception *a1)
{
}

void sub_50AA8(_Unwind_Exception *a1)
{
}

void sub_50C20(_Unwind_Exception *a1)
{
}

void sub_50CE8(_Unwind_Exception *a1)
{
}

void sub_50DB4(_Unwind_Exception *a1)
{
}

void sub_5110C(_Unwind_Exception *a1)
{
}

void sub_520E4(_Unwind_Exception *a1)
{
}

void sub_53B08(_Unwind_Exception *a1)
{
}

void sub_53BF0(_Unwind_Exception *a1)
{
}

void sub_53D00(_Unwind_Exception *a1)
{
}

void sub_53E40(_Unwind_Exception *a1)
{
}

void sub_53F04(_Unwind_Exception *a1)
{
}

LABEL_7:
  uint64_t v9 = self->mSublayerToPrecompute;
  -[MRLayerClock externalTime](-[MRLayer clock](v9, "clock"), "externalTime");
  uint64_t v10 = -[MRLayer retainedByUserRenderedImageAtTime:inContext:withArguments:]( v9,  "retainedByUserRenderedImageAtTime:inContext:withArguments:",  a4,  a5);
  mPrecomputingType = self->mPrecomputingType;
  if (mPrecomputingType == 3)
  {
    [self->mPrecomputingTarget setTargetLayerImage:v10];
  }

  else if (mPrecomputingType == 2)
  {
    [self->mPrecomputingTarget setSourceLayerImage:v10];
  }

  [v10 releaseByUser];
  -[MRLayer deactivate](self->mSublayerToPrecompute, "deactivate");
  -[MRLayer depreactivate:](self->mSublayerToPrecompute, "depreactivate:", 0LL);
  -[MRLayer cleanup](self->mSublayerToPrecompute, "cleanup");

  self->mSublayerToPrecompute = 0LL;
  self->mPrecomputingTarget = 0LL;
  self->mPrecomputingType = 0LL;
}

  if (self->mIsTransitioning)
  {
    -[MRLayerNavigator endTransitionToSublayer](self, "endTransitionToSublayer");
  }

  else if (self->mIsInnerTransitioning)
  {
    -[MRLayerNavigator endMovingCurrentSublayer](self, "endMovingCurrentSublayer");
  }

  [*(id *)((char *)&self->mSprites + 1) prerenderForTime:a4 inContext:a5 withArguments:a3];
  [*(id *)((char *)&self->mShadowGroundProvider + 1) prerenderForTime:a4 inContext:a5 withArguments:a3];
  [*(id *)((char *)&self->mShadowSideProvider + 1) prerenderForTime:a4 inContext:a5 withArguments:a3];
  [*(id *)((char *)&self->mBorderProvider + 1) prerenderForTime:a4 inContext:a5 withArguments:a3];
  return 1;
}

  [*(id *)(&self->super._isInInteractiveMode + 1) prerenderForTime:a4 inContext:a5 withArguments:a3];
  return 1;
}

  if (([a3 isEqualToString:@"frameID"] & 1) != 0
    || ([a3 isEqualToString:@"frameAttributes"] & 1) != 0)
  {
    uint64_t v9 = 64;
LABEL_17:
    BYTE2(self->mFlags) |= v9;
    return;
  }

  if (([a3 isEqualToString:@"animationPaths"] & 1) != 0
    || ([a3 isEqualToString:@"kenBurnsType"] & 1) != 0
    || ([a3 isEqualToString:@"center"] & 1) != 0
    || ([a3 isEqualToString:@"scale"] & 1) != 0
    || ([a3 isEqualToString:@"rotation"] & 1) != 0
    || ([a3 isEqualToString:@"filters"] & 1) != 0)
  {
    uint64_t v9 = 0x80;
    goto LABEL_17;
  }

  if ([a3 isEqualToString:@"builtVolume"])
  {
    uint64_t v9 = 4;
    goto LABEL_17;
  }

    __int128 v12 = v8;
LABEL_12:
    ++v5;
    uint64_t v8 = v12;
  }

  LODWORD(v12) = v8;
LABEL_25:
  if ((_DWORD)v12) {
    return (void *)(*(uint64_t (**)(void *, uint64_t, _BYTE *, _BYTE *))(*v7 + 272LL))( v7,  24LL,  &v9[-*a2],  &v9[-*a2]);
  }
  return result;
}

    __int128 v12 = v8;
LABEL_12:
    ++v5;
    uint64_t v8 = v12;
  }

  LODWORD(v12) = v8;
LABEL_25:
  if ((_DWORD)v12) {
    return (void *)(*(uint64_t (**)(void *, uint64_t, _BYTE *, _BYTE *))(*v7 + 272LL))( v7,  24LL,  &v9[-*a2],  &v9[-*a2]);
  }
  return result;
}

  if (!self->super.mIsPrecomputing)
  {
    -[MRLayer setNeedsUpdateForPluggerOfSublayer:](self->super.mSuperlayer, "setNeedsUpdateForPluggerOfSublayer:", self);
    -[MRLayer stampTime](self, "stampTime");
  }

LABEL_11:
  mSublayers = self->mSublayers;
  objc_sync_enter(mSublayers);
  if (!self->mTransitionChanges)
  {
    objc_sync_exit(mSublayers);
    goto LABEL_83;
  }

  mCurrentTransition = self->mCurrentTransition;
  if (mCurrentTransition) {
    -[MRTransition releaseByTransitioner:](mCurrentTransition, "releaseByTransitioner:", self);
  }
  mTransitionChanges = self->mTransitionChanges;
  if (mTransitionChanges->duration > 0.0)
  {
LABEL_35:
    p_mCurrentSublayer = &self->mCurrentSublayer;
    self->mCurrentSublayer = -[MRTransitionChanges currentSublayer](mTransitionChanges, "currentSublayer");
    p_mNextSublayer = &self->mNextSublayer;
    self->mNextSublayer = -[MRTransitionChanges nextSublayer](self->mTransitionChanges, "nextSublayer");
    self->mPausedSublayersForTransition = 0;
    self->mControlsSublayerTimes = 0;
    self->mTransitionStartTime = self->mTransitionChanges->startTime;
    self->mTransitionDuration = self->mTransitionChanges->duration;
    self->mTransitionIsBackwards = self->mTransitionChanges->isBackwards;
    v31 = -[MRLayerNavigator _transitionWithTransitionTrigger:]( self,  "_transitionWithTransitionTrigger:",  -[MRTransitionChanges transition](self->mTransitionChanges, "transition"));
    self->mCurrentTransition = v31;
    if (!v31) {
      goto LABEL_63;
    }
    if (!-[MRTransitionChanges pzr](self->mTransitionChanges, "pzr")) {
      goto LABEL_59;
    }
    v90 = -[MRTransitionChanges pzr](self->mTransitionChanges, "pzr");
    -[MRTransition pzrStart:](self->mCurrentTransition, "pzrStart:", v90);
    self->mForcedTransitionProgress = 0.0;
    self->mPausedSublayersForTransition = 1;
    if (-[MRTransition controlsLayersTime](self->mCurrentTransition, "controlsLayersTime")) {
      goto LABEL_44;
    }
    if (self->mTransitionIsBackwards)
    {
      -[MRLayerClock phaseInDuration](-[MRLayer clock](*p_mCurrentSublayer, "clock"), "phaseInDuration");
      if (v32 > 0.0) {
        goto LABEL_44;
      }
      -[MCPlug phaseOutDuration](-[MRLayer plug](*p_mNextSublayer, "plug"), "phaseOutDuration");
      if (v33 > 0.0) {
        goto LABEL_44;
      }
      if (self->mTransitionIsBackwards)
      {
        v34 = 0;
        goto LABEL_45;
      }
    }

    -[MRLayerClock phaseOutDuration](-[MRLayer clock](*p_mCurrentSublayer, "clock"), "phaseOutDuration");
    if (v35 <= 0.0)
    {
      -[MCPlug phaseInDuration](-[MRLayer plug](*p_mNextSublayer, "plug"), "phaseInDuration");
      v34 = v89 > 0.0;
LABEL_45:
      self->mControlsSublayerTimes = v34;
      if (-[MRTransition supportsDirectionOverride](self->mCurrentTransition, "supportsDirectionOverride"))
      {
        direction = v90->direction;
        if (direction == 12)
        {
          speedY = v90->speedY;
        }

        else
        {
          if (direction != 255)
          {
            speedX = v90->speedX;
            goto LABEL_55;
          }

          speedX = v90->speedX;
          speedY = v90->speedY;
          if (fabs(speedX) > fabs(speedY))
          {
LABEL_55:
            if (self->mTransitionIsBackwards == speedX < 0.0) {
              v39 = 2;
            }
            else {
              v39 = 1;
            }
LABEL_58:
            -[MRTransition setDirection:](self->mCurrentTransition, "setDirection:", v39);
            goto LABEL_59;
          }
        }

        if (self->mTransitionIsBackwards == speedY < 0.0) {
          v39 = 4;
        }
        else {
          v39 = 8;
        }
        goto LABEL_58;
      }

  v40 = v10;
  v41 = v12;
  v42 = v9;
  v43 = v39;
  result.size.height = v43;
  result.size.width = v42;
  result.origin.y = v41;
  result.origin.x = v40;
  return result;
}

  objc_msgSend(-[NSDictionary objectForKey:](self->mLayout, "objectForKey:", @"duration"), "doubleValue");
  v21 = v20;
  -[MCPlugSerial transitionDuration]( -[MRLayer plugAsSerial](self->super.mSourceLayer, "plugAsSerial"),  "transitionDuration");
  v23 = v22 * a3;
  v24 = v22 - v21;
  if (v22 * a3 < (v22 - v21) * 0.5
    || (p_mSourceLayerImage = (id *)&self->super.mTargetLayerImage, v23 >= v22 + v24 * -0.5))
  {
    [a4 blend:3];
    [a4 setShader:@"PlainTexture"];
    +[MRCroppingSprite renderImage:inContext:atPosition:andSize:]( &OBJC_CLASS___MRCroppingSprite,  "renderImage:inContext:atPosition:andSize:",  *p_mSourceLayerImage,  a4,  CGPointZero.x,  CGPointZero.y,  2.0,  2.0);
    [a4 unsetShader];
    [a4 blend:0];
  }

  else
  {
    v25 = self->super.mSourceLayer;
    -[MRLayerClock externalTime](-[MRLayer clock](v25, "clock"), "externalTime");
    v26 = -[MRLayer patchworkAtTime:inContext:withArguments:](v25, "patchworkAtTime:inContext:withArguments:", a4, a5);
    v27 = self->super.mTargetLayer;
    -[MRLayerClock externalTime](-[MRLayer clock](v27, "clock"), "externalTime");
    v28 = -[MRLayer patchworkAtTime:inContext:withArguments:](v27, "patchworkAtTime:inContext:withArguments:", a4, a5);
    if ([v26 count]) {
      v29 = objc_msgSend(objc_msgSend(v26, "objectAtIndex:", 0), "isEqual:", @"isTitle");
    }
    else {
      v29 = 0LL;
    }
    if ([v28 count]) {
      v38 = objc_msgSend(objc_msgSend(v28, "objectAtIndex:", 0), "isEqual:", @"isTitle");
    }
    else {
      v38 = 0LL;
    }
    [a4 cull:2];
    v39 = objc_msgSend( -[NSDictionary objectForKey:](self->mLayout, "objectForKey:", @"layerCount"),  "integerValue");
    v41 = (uint64_t)v39;
    if (((v29 | v38) & 1) != 0)
    {
      v42 = a4;
      v43 = 0LL;
    }

    else
    {
      *(float *)&v40 = 1.0 / (float)(uint64_t)v39;
      [a4 setShaderUniformFloat:@"range" forKey:v40];
      v42 = a4;
      *(float *)&v44 = (float)v41;
      [a4 setShaderUniformFloat:@"count" forKey:v44];
      v43 = @"ShatterShader4";
    }

    v45 = -[NSDictionary objectForKey:](self->mLayout, "objectForKey:", @"sublayers");
    v51 = 0u;
    v52 = 0u;
    v53 = 0u;
    v54 = 0u;
    v46 = [v45 countByEnumeratingWithState:&v51 objects:v55 count:16];
    if (v46)
    {
      v47 = v46;
      v48 = *(void *)v52;
      do
      {
        for (uint64_t i = 0LL; i != v47; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v52 != v48) {
            objc_enumerationMutation(v45);
          }
          -[MRTransitionShatter _renderSublayer:layerCount:sourceIsText:targetIsText:currentShader:sourceSize:targetSize:atTime:inContext:withArguments:]( self,  "_renderSublayer:layerCount:sourceIsText:targetIsText:currentShader:sourceSize:targetSize:atTime:inContext:withArguments:",  *(void *)(*((void *)&v51 + 1) + 8LL * (void)i),  v41,  v29,  v38,  v43,  v42,  2.0,  2.0,  2.0,  2.0,  (v23 + -v24 * 0.5) / v21,  a5);
        }

        v47 = [v45 countByEnumeratingWithState:&v51 objects:v55 count:16];
      }

      while (v47);
    }

    [v42 cull:0];
    [v42 unsetShader];
  }

  uint64_t v8 = *a2;
  v13[0] = *a2;
  v13[1] = (uint64_t)v7;
  uint64_t v9 = a2[3];
  v13[2] = (uint64_t)v6;
  v13[3] = v9;
  switch(a3)
  {
    case 1:
      uint64_t v10 = (uint64_t *)sub_122A0C(0x18uLL);
      id result = (uint64_t)sub_128090(v10, v13);
      __int128 v12 = (uint64_t (**)())&off_24EA68;
      goto LABEL_46;
    case 2:
      uint64_t v10 = (uint64_t *)sub_122A0C(0x18uLL);
      id result = (uint64_t)sub_128090(v10, v13);
      __int128 v12 = (uint64_t (**)())&off_24EBA0;
      goto LABEL_46;
    case 3:
      uint64_t v10 = (uint64_t *)sub_122A0C(0x18uLL);
      id result = (uint64_t)sub_128090(v10, v13);
      __int128 v12 = (uint64_t (**)())&off_24ECD8;
      goto LABEL_46;
    case 4:
      uint64_t v10 = (uint64_t *)sub_122A0C(0x18uLL);
      id result = (uint64_t)sub_128090(v10, v13);
      __int128 v12 = off_24EE10;
      goto LABEL_46;
    case 5:
      uint64_t v10 = (uint64_t *)sub_122A0C(0x18uLL);
      id result = (uint64_t)sub_128090(v10, v13);
      __int128 v12 = off_24EF48;
      goto LABEL_46;
    case 6:
      uint64_t v10 = (uint64_t *)sub_122A0C(0x18uLL);
      id result = (uint64_t)sub_128090(v10, v13);
      __int128 v12 = off_24F080;
      goto LABEL_46;
    case 7:
      uint64_t v10 = (uint64_t *)sub_122A0C(0x20uLL);
      id result = sub_1291FC((uint64_t)v10, (uint64_t)v13);
      goto LABEL_47;
    case 8:
      uint64_t v10 = (uint64_t *)sub_122A0C(0x18uLL);
      id result = (uint64_t)sub_128090(v10, v13);
      __int128 v12 = off_24F2F0;
      goto LABEL_46;
    case 9:
      uint64_t v10 = (uint64_t *)sub_122A0C(0x18uLL);
      id result = (uint64_t)sub_128090(v10, v13);
      __int128 v12 = off_24F428;
      goto LABEL_46;
    case 10:
      uint64_t v10 = (uint64_t *)sub_122A0C(0x18uLL);
      id result = (uint64_t)sub_128090(v10, v13);
      __int128 v12 = off_24F560;
      goto LABEL_46;
    case 11:
      uint64_t v10 = (uint64_t *)sub_122A0C(0x18uLL);
      id result = (uint64_t)sub_128090(v10, v13);
      __int128 v12 = off_24F698;
      goto LABEL_46;
    case 12:
      uint64_t v10 = (uint64_t *)sub_122A0C(0x18uLL);
      id result = (uint64_t)sub_128090(v10, v13);
      __int128 v12 = off_24F7D0;
      goto LABEL_46;
    case 13:
      uint64_t v10 = (uint64_t *)sub_122A0C(0x18uLL);
      id result = (uint64_t)sub_128090(v10, v13);
      __int128 v12 = off_24F908;
      goto LABEL_46;
    case 14:
      uint64_t v10 = (uint64_t *)sub_122A0C(0x18uLL);
      id result = (uint64_t)sub_128090(v10, v13);
      __int128 v12 = off_24FA40;
      goto LABEL_46;
    case 15:
      uint64_t v10 = (uint64_t *)sub_122A0C(0x18uLL);
      id result = (uint64_t)sub_128090(v10, v13);
      __int128 v12 = off_24FB78;
      goto LABEL_46;
    case 16:
      uint64_t v10 = (uint64_t *)sub_122A0C(0x18uLL);
      id result = (uint64_t)sub_128090(v10, v13);
      __int128 v12 = off_24FCB0;
      goto LABEL_46;
    case 17:
      uint64_t v10 = (uint64_t *)sub_122A0C(0x18uLL);
      id result = (uint64_t)sub_128090(v10, v13);
      __int128 v12 = off_24FDE8;
      goto LABEL_46;
    case 18:
      uint64_t v10 = (uint64_t *)sub_122A0C(0x18uLL);
      id result = (uint64_t)sub_128090(v10, v13);
      __int128 v12 = off_24FF20;
      goto LABEL_46;
    case 19:
      uint64_t v10 = (uint64_t *)sub_122A0C(0x18uLL);
      id result = (uint64_t)sub_128090(v10, v13);
      __int128 v12 = off_250058;
      goto LABEL_46;
    case 20:
      uint64_t v10 = (uint64_t *)sub_122A0C(0x18uLL);
      id result = (uint64_t)sub_128090(v10, v13);
      __int128 v12 = (uint64_t (**)())&off_250190;
      goto LABEL_46;
    case 21:
      uint64_t v10 = (uint64_t *)sub_122A0C(0x18uLL);
      id result = (uint64_t)sub_128090(v10, v13);
      __int128 v12 = (uint64_t (**)())&off_2502C8;
      goto LABEL_46;
    case 22:
      uint64_t v10 = (uint64_t *)sub_122A0C(0x18uLL);
      id result = (uint64_t)sub_128090(v10, v13);
      __int128 v12 = (uint64_t (**)())&off_250400;
      goto LABEL_46;
    case 23:
      uint64_t v10 = (uint64_t *)sub_122A0C(0x18uLL);
      id result = (uint64_t)sub_128090(v10, v13);
      __int128 v12 = off_250538;
      goto LABEL_46;
    case 24:
      uint64_t v10 = (uint64_t *)sub_122A0C(0x18uLL);
      id result = (uint64_t)sub_128090(v10, v13);
      __int128 v12 = off_250670;
      goto LABEL_46;
    case 25:
      uint64_t v10 = (uint64_t *)sub_122A0C(0x18uLL);
      id result = (uint64_t)sub_128090(v10, v13);
      __int128 v12 = off_2507A8;
      goto LABEL_46;
    case 28:
      uint64_t v10 = (uint64_t *)sub_122A0C(0x18uLL);
      id result = (uint64_t)sub_128090(v10, v13);
      __int128 v12 = off_250B50;
      goto LABEL_46;
    case 29:
      uint64_t v10 = (uint64_t *)sub_122A0C(0x18uLL);
      id result = (uint64_t)sub_128090(v10, v13);
      __int128 v12 = off_250C88;
      goto LABEL_46;
    case 30:
      uint64_t v10 = (uint64_t *)sub_122A0C(0x18uLL);
      id result = (uint64_t)sub_128090(v10, v13);
      __int128 v12 = off_250DC0;
      goto LABEL_46;
    case 31:
      uint64_t v10 = (uint64_t *)sub_122A0C(0x20uLL);
      id result = (uint64_t)sub_12DED4(v10, v13);
      __int128 v12 = off_250EF8;
      goto LABEL_46;
    case 32:
      uint64_t v10 = (uint64_t *)sub_122A0C(0x28uLL);
      id result = (uint64_t)sub_12EA2C(v10, v13);
      __int128 v12 = off_251030;
      goto LABEL_46;
    case 33:
      uint64_t v10 = (uint64_t *)sub_122A0C(0x28uLL);
      id result = (uint64_t)sub_12EA2C(v10, v13);
      __int128 v12 = off_251168;
      goto LABEL_46;
    case 34:
      uint64_t v10 = (uint64_t *)sub_122A0C(0x28uLL);
      id result = (uint64_t)sub_12EA2C(v10, v13);
      __int128 v12 = off_2512A0;
      goto LABEL_46;
    case 35:
      uint64_t v10 = (uint64_t *)sub_122A0C(0x28uLL);
      id result = (uint64_t)sub_12EA2C(v10, v13);
      __int128 v12 = off_2513D8;
LABEL_46:
      void *v10 = (uint64_t)v12;
LABEL_47:
      *a4 = v10;
      break;
    default:
      id result = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t, _BYTE *))(*(void *)a1 + 272LL))( a1,  25LL,  v5 - v8,  &v7[-v8]);
      break;
  }

  return result;
}

  uint64_t v8 = *a2;
  v13[0] = *a2;
  v13[1] = (uint64_t)v7;
  uint64_t v9 = a2[3];
  v13[2] = (uint64_t)v6;
  v13[3] = v9;
  switch(a3)
  {
    case 1:
      uint64_t v10 = (uint64_t *)sub_122A0C(0x18uLL);
      id result = (uint64_t)sub_13C898(v10, v13);
      __int128 v12 = (uint64_t (**)())&off_253050;
      goto LABEL_46;
    case 2:
      uint64_t v10 = (uint64_t *)sub_122A0C(0x18uLL);
      id result = (uint64_t)sub_13C898(v10, v13);
      __int128 v12 = (uint64_t (**)())&off_253188;
      goto LABEL_46;
    case 3:
      uint64_t v10 = (uint64_t *)sub_122A0C(0x18uLL);
      id result = (uint64_t)sub_13C898(v10, v13);
      __int128 v12 = (uint64_t (**)())&off_2532C0;
      goto LABEL_46;
    case 4:
      uint64_t v10 = (uint64_t *)sub_122A0C(0x18uLL);
      id result = (uint64_t)sub_13C898(v10, v13);
      __int128 v12 = off_2533F8;
      goto LABEL_46;
    case 5:
      uint64_t v10 = (uint64_t *)sub_122A0C(0x18uLL);
      id result = (uint64_t)sub_13C898(v10, v13);
      __int128 v12 = off_253530;
      goto LABEL_46;
    case 6:
      uint64_t v10 = (uint64_t *)sub_122A0C(0x18uLL);
      id result = (uint64_t)sub_13C898(v10, v13);
      __int128 v12 = off_253668;
      goto LABEL_46;
    case 7:
      uint64_t v10 = (uint64_t *)sub_122A0C(0x20uLL);
      id result = sub_13DA20((uint64_t)v10, (uint64_t)v13);
      goto LABEL_47;
    case 8:
      uint64_t v10 = (uint64_t *)sub_122A0C(0x18uLL);
      id result = (uint64_t)sub_13C898(v10, v13);
      __int128 v12 = off_2538D8;
      goto LABEL_46;
    case 9:
      uint64_t v10 = (uint64_t *)sub_122A0C(0x18uLL);
      id result = (uint64_t)sub_13C898(v10, v13);
      __int128 v12 = off_253A10;
      goto LABEL_46;
    case 10:
      uint64_t v10 = (uint64_t *)sub_122A0C(0x18uLL);
      id result = (uint64_t)sub_13C898(v10, v13);
      __int128 v12 = off_253B48;
      goto LABEL_46;
    case 11:
      uint64_t v10 = (uint64_t *)sub_122A0C(0x18uLL);
      id result = (uint64_t)sub_13C898(v10, v13);
      __int128 v12 = off_253C80;
      goto LABEL_46;
    case 12:
      uint64_t v10 = (uint64_t *)sub_122A0C(0x18uLL);
      id result = (uint64_t)sub_13C898(v10, v13);
      __int128 v12 = off_253DB8;
      goto LABEL_46;
    case 13:
      uint64_t v10 = (uint64_t *)sub_122A0C(0x18uLL);
      id result = (uint64_t)sub_13C898(v10, v13);
      __int128 v12 = off_253EF0;
      goto LABEL_46;
    case 14:
      uint64_t v10 = (uint64_t *)sub_122A0C(0x18uLL);
      id result = (uint64_t)sub_13C898(v10, v13);
      __int128 v12 = off_254028;
      goto LABEL_46;
    case 15:
      uint64_t v10 = (uint64_t *)sub_122A0C(0x18uLL);
      id result = (uint64_t)sub_13C898(v10, v13);
      __int128 v12 = off_254160;
      goto LABEL_46;
    case 16:
      uint64_t v10 = (uint64_t *)sub_122A0C(0x18uLL);
      id result = (uint64_t)sub_13C898(v10, v13);
      __int128 v12 = off_254298;
      goto LABEL_46;
    case 17:
      uint64_t v10 = (uint64_t *)sub_122A0C(0x18uLL);
      id result = (uint64_t)sub_13C898(v10, v13);
      __int128 v12 = off_2543D0;
      goto LABEL_46;
    case 18:
      uint64_t v10 = (uint64_t *)sub_122A0C(0x18uLL);
      id result = (uint64_t)sub_13C898(v10, v13);
      __int128 v12 = off_254508;
      goto LABEL_46;
    case 19:
      uint64_t v10 = (uint64_t *)sub_122A0C(0x18uLL);
      id result = (uint64_t)sub_13C898(v10, v13);
      __int128 v12 = off_254640;
      goto LABEL_46;
    case 20:
      uint64_t v10 = (uint64_t *)sub_122A0C(0x18uLL);
      id result = (uint64_t)sub_13C898(v10, v13);
      __int128 v12 = (uint64_t (**)())&off_254778;
      goto LABEL_46;
    case 21:
      uint64_t v10 = (uint64_t *)sub_122A0C(0x18uLL);
      id result = (uint64_t)sub_13C898(v10, v13);
      __int128 v12 = (uint64_t (**)())&off_2548B0;
      goto LABEL_46;
    case 22:
      uint64_t v10 = (uint64_t *)sub_122A0C(0x18uLL);
      id result = (uint64_t)sub_13C898(v10, v13);
      __int128 v12 = (uint64_t (**)())&off_2549E8;
      goto LABEL_46;
    case 23:
      uint64_t v10 = (uint64_t *)sub_122A0C(0x18uLL);
      id result = (uint64_t)sub_13C898(v10, v13);
      __int128 v12 = off_254B20;
      goto LABEL_46;
    case 24:
      uint64_t v10 = (uint64_t *)sub_122A0C(0x18uLL);
      id result = (uint64_t)sub_13C898(v10, v13);
      __int128 v12 = off_254C58;
      goto LABEL_46;
    case 25:
      uint64_t v10 = (uint64_t *)sub_122A0C(0x18uLL);
      id result = (uint64_t)sub_13C898(v10, v13);
      __int128 v12 = off_254D90;
      goto LABEL_46;
    case 28:
      uint64_t v10 = (uint64_t *)sub_122A0C(0x18uLL);
      id result = (uint64_t)sub_13C898(v10, v13);
      __int128 v12 = off_255138;
      goto LABEL_46;
    case 29:
      uint64_t v10 = (uint64_t *)sub_122A0C(0x18uLL);
      id result = (uint64_t)sub_13C898(v10, v13);
      __int128 v12 = off_255270;
      goto LABEL_46;
    case 30:
      uint64_t v10 = (uint64_t *)sub_122A0C(0x18uLL);
      id result = (uint64_t)sub_13C898(v10, v13);
      __int128 v12 = off_2553A8;
      goto LABEL_46;
    case 31:
      uint64_t v10 = (uint64_t *)sub_122A0C(0x20uLL);
      id result = (uint64_t)sub_1426F4(v10, v13);
      __int128 v12 = off_2554E0;
      goto LABEL_46;
    case 32:
      uint64_t v10 = (uint64_t *)sub_122A0C(0x28uLL);
      id result = (uint64_t)sub_14324C(v10, v13);
      __int128 v12 = off_255618;
      goto LABEL_46;
    case 33:
      uint64_t v10 = (uint64_t *)sub_122A0C(0x28uLL);
      id result = (uint64_t)sub_14324C(v10, v13);
      __int128 v12 = off_255750;
      goto LABEL_46;
    case 34:
      uint64_t v10 = (uint64_t *)sub_122A0C(0x28uLL);
      id result = (uint64_t)sub_14324C(v10, v13);
      __int128 v12 = off_255888;
      goto LABEL_46;
    case 35:
      uint64_t v10 = (uint64_t *)sub_122A0C(0x28uLL);
      id result = (uint64_t)sub_14324C(v10, v13);
      __int128 v12 = off_2559C0;
LABEL_46:
      void *v10 = (uint64_t)v12;
LABEL_47:
      *a4 = v10;
      break;
    default:
      id result = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t, _BYTE *))(*(void *)a1 + 272LL))( a1,  25LL,  v5 - v8,  &v7[-v8]);
      break;
  }

  return result;
}

LABEL_75:
      -[MRLayerNavigator _getInterestingTimesForSublayerControl](self, "_getInterestingTimesForSublayerControl");
      goto LABEL_77;
    }

LABEL_44:
    v34 = 1;
    goto LABEL_45;
  }

  __int128 v13 = -[MCTransitionTrigger transitionID]( -[MRTransitionChanges transition](mTransitionChanges, "transition"),  "transitionID");
  if (v13 == kMRLayerTransitionIDPhaseInOut)
  {
    mTransitionChanges = self->mTransitionChanges;
    goto LABEL_35;
  }

      v27 = 1.0;
LABEL_46:
      v28 = 0.5;
      v26 = 0.5;
      goto LABEL_47;
    }
  }

  v36 = random() & 1;
  if (!v36) {
    goto LABEL_43;
  }
LABEL_36:
  v28 = 0.5;
  v37 = 0.0;
  v27 = 0.0;
  v26 = 0.5;
  if ((v36 & 1) != 0) {
    goto LABEL_44;
  }
LABEL_47:
  v38 = +[MPAnimationPathKeyframed animationPath](&OBJC_CLASS___MPAnimationPathKeyframed, "animationPath");
  v39 = [p_cache + 193 easeKenBurnsPanFromOptions:a4];
  v40 = objc_msgSend(v38, "createKeyframeWithPoint:atTime:", v37, v26, 0.0);
  if (v39)
  {
    [v40 setPostControl:0.25];
    objc_msgSend(objc_msgSend(v38, "createKeyframeWithPoint:atTime:", v27, v28, 1.0), "setPreControl:", -0.25);
  }

  else if (v14 < 0)
  {
    objc_msgSend(v38, "createKeyframeWithPoint:atTime:", v27, v28, 1.0);
  }

  else
  {
    [v40 setOffsetType:v14];
    objc_msgSend(objc_msgSend(v38, "createKeyframeWithPoint:atTime:", v27, v28, 1.0), "setOffsetType:", v14);
  }

  [a3 setAnimationPath:v38 forKey:@"center"];
  [p_cache + 193 kenBurnsStartZoomLevelFromOptions:a4];
  v42 = v41;
  [p_cache + 193 kenBurnsEndZoomLevelFromOptions:a4];
  v44 = v43;
  if (v42 > -1.0 || v43 > -1.0)
  {
    v52 = +[MPAnimationPathKeyframed animationPath](&OBJC_CLASS___MPAnimationPathKeyframed, "animationPath");
    v46 = v52;
    v53 = 1.0;
    if (v44 <= -1.0) {
      v54 = 1.0;
    }
    else {
      v54 = v44;
    }
    if (v42 > -1.0) {
      v53 = v42;
    }
    [v52 createKeyframeWithScalar:v53 atTime:0.0];
    v49 = 1.0;
    v50 = v46;
    v51 = v54;
  }

  else if (v11 == 4 || v11 == 2)
  {
    v45 = +[MPAnimationPathKeyframed animationPath](&OBJC_CLASS___MPAnimationPathKeyframed, "animationPath");
    v46 = v45;
    if ((v10 >= 1.0 || v13 <= 1.0) && (v10 <= 1.0 || v13 >= 1.0))
    {
      v48 = 1.0;
      if (v10 >= 1.0)
      {
        if (v10 * 0.449999988 > v13)
        {
          v48 = v13 / fmax(v13 / (v10 * 0.449999988), 0.5);
          __int128 v15 = @"Scale to Fit";
        }
      }

      else if (v10 * 2.20000005 < v13)
      {
        __int128 v15 = @"Scale to Fit";
        v48 = fmax(v10 * 2.20000005 / v13, 0.5) / (v10 / v13);
      }
    }

    else if (v13 >= 1.0 || v10 <= 1.0)
    {
      v48 = 2.0;
    }

    else
    {
      v48 = 4.0;
    }

    [v45 createKeyframeWithScalar:v48 atTime:0.0];
    v49 = 1.0;
    v50 = v46;
    v51 = v48;
  }

  else
  {
    v46 = +[MPAnimationPathKeyframed animationPath](&OBJC_CLASS___MPAnimationPathKeyframed, "animationPath");
    [v46 createKeyframeWithScalar:1.0 atTime:0.0];
    v51 = 1.0;
    v49 = 1.0;
    v50 = v46;
  }

  [v50 createKeyframeWithScalar:v51 atTime:v49];
  [a3 setAnimationPath:v46 forKey:@"scale"];
  [a3 setSizingMode:v15];
  [a3 removeAnimationPathForKey:@"angle"];
}

    -[MREffectPortfolio _drawPagesAtTime:inContext:withArguments:]( self,  "_drawPagesAtTime:inContext:withArguments:",  a4,  a5,  a3);
    goto LABEL_77;
  }

  v44 = v17;
  v186 = v14;
  if (BYTE5(self->mPageCount))
  {
    [a4 localAspectRatio];
    if (v45 < 1.0)
    {
      v46 = [*(id *)((char *)&self->mSprites + 1) retainedByUserRenderedImageAtTime:a4 inContext:a5 withArguments:a3];
      +[MRCroppingSprite renderDumbImage:inContext:atPosition:andSize:]( &OBJC_CLASS___MRCroppingSprite,  "renderDumbImage:inContext:atPosition:andSize:",  v46,  a4,  0.0,  0.0,  2.0,  2.0);
      [v46 releaseByUser];
      v47 = ImageKey(BYTE6(self->mPageCount));
      v48 = objc_msgSend( -[NSDictionary objectForKey:]( -[MRLayerEffect slideProvidersForElementIDs](self->super.mEffectLayer, "slideProvidersForElementIDs"),  "objectForKey:",  v47),  "retainedByUserRenderedImageAtTime:inContext:withArguments:",  a4,  a5,  a3);
      [v48 aspectRatio];
      v50 = v49 + v49;
      [a4 localAspectRatio];
      v52 = *(void **)(&self->super._isInInteractiveMode + 1);
      v53 = v50 / v51;
      v54 = (MRCroppingSprite *)[v52 objectForKey:v47];
      if (!v54)
      {
        v54 = objc_alloc_init(&OBJC_CLASS___MRCroppingSprite);
        [v52 setObject:v54 forKey:v47];
      }

      LODWORD(v55) = 0;
      -[MRCroppingSprite renderImageInner:inContext:atPosition:andSize:zRotation:]( v54,  "renderImageInner:inContext:atPosition:andSize:zRotation:",  v48,  a4,  CGPointZero.x,  CGPointZero.y,  v53,  2.0,  v55);
      v56 = v48;
      goto LABEL_82;
    }
  }

  if (v44 == 1 && v16)
  {
    __int128 v18 = ImageKey(0LL);
    double v20 = objc_msgSend( -[NSDictionary objectForKey:]( -[MRLayerEffect slideProvidersForElementIDs](self->super.mEffectLayer, "slideProvidersForElementIDs"),  "objectForKey:",  v18),  "retainedByUserRenderedImageAtTime:inContext:withArguments:",  a4,  a5,  a3);
    [v20 aspectRatio];
    width = 2.0;
    height = 2.0;
    if (v58 <= 1.0)
    {
      [a4 localAspectRatio];
      v60 = v59;
      [v20 aspectRatio];
      width = 2.0 / (v60 / v61);
    }

    goto LABEL_44;
  }

  v75 = self->super.mPhaseInDuration + self->super.mMainDuration + self->super.mPhaseOutDuration;
  v76 = a3 / v75;
  if (BYTE1(self->mPageCount))
  {
    v77 = v75 * 0.5 + -0.829999983 <= a3 || v14;
    if (v76 < 0.5)
    {
      if (v14)
      {
        v78 = 0;
        v79 = 0.0;
        goto LABEL_102;
      }

              [v71 addObjectsFromArray:v15];
              self = v75;
              unsigned int v4 = v76;
              id v7 = v72;
              uint64_t v10 = v73;
              __int128 v11 = v69;
              __int128 v12 = v78;
            }

            __int128 v12 = (char *)v12 + 1;
          }

          while (v12 != v10);
          v44 = [obj countByEnumeratingWithState:&v115 objects:v126 count:16];
          uint64_t v10 = v44;
        }

        while (v44);
      }

      v45 = +[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array");
      if ([v84 count])
      {
        v46 = -[NSSortDescriptor initWithKey:ascending:]( objc_alloc(&OBJC_CLASS___NSSortDescriptor),  "initWithKey:ascending:",  @"parentContainer.index",  1LL);
        v47 = objc_msgSend( objc_msgSend(v84, "allObjects"),  "sortedArrayUsingDescriptors:",  +[NSArray arrayWithObject:](NSArray, "arrayWithObject:", v46));

        v97 = 0u;
        v98 = 0u;
        v95 = 0u;
        v96 = 0u;
        v48 = [v47 countByEnumeratingWithState:&v95 objects:v121 count:16];
        if (v48)
        {
          v49 = v48;
          v50 = *(void *)v96;
          do
          {
            for (m = 0LL; m != v49; m = (char *)m + 1)
            {
              if (*(void *)v96 != v50) {
                objc_enumerationMutation(v47);
              }
              v52 = *(void **)(*((void *)&v95 + 1) + 8LL * (void)m);
              v91 = 0u;
              v92 = 0u;
              v93 = 0u;
              v94 = 0u;
              v53 = [v52 slides];
              v54 = [v53 countByEnumeratingWithState:&v91 objects:v120 count:16];
              if (v54)
              {
                v55 = v54;
                v56 = *(void *)v92;
                do
                {
                  for (n = 0LL; n != v55; n = (char *)n + 1)
                  {
                    if (*(void *)v92 != v56) {
                      objc_enumerationMutation(v53);
                    }
                    objc_msgSend( v45,  "addObject:",  objc_msgSend(*(id *)(*((void *)&v91 + 1) + 8 * (void)n), "path"));
                  }

                  v55 = [v53 countByEnumeratingWithState:&v91 objects:v120 count:16];
                }

                while (v55);
              }

              v58 = [v52 parentContainer];
              objc_msgSend( v58,  "removeEffectsAtIndices:",  +[NSIndexSet indexSetWithIndex:]( NSIndexSet,  "indexSetWithIndex:",  objc_msgSend(v52, "zIndex")));
              if (![v58 slideCount]) {
                objc_msgSend( objc_msgSend(v58, "parentLayer"),  "removeEffectContainersAtIndices:",  +[NSIndexSet indexSetWithIndex:]( NSIndexSet,  "indexSetWithIndex:",  objc_msgSend(v58, "index")));
              }
            }

            v49 = [v47 countByEnumeratingWithState:&v95 objects:v121 count:16];
          }

          while (v49);
        }
      }

      v59 = objc_msgSend(objc_msgSend(v76, "mainLayers"), "lastObject");
      v60 = +[NSNumber numberWithInteger:]( NSNumber,  "numberWithInteger:",  objc_msgSend( +[MPStyleManager sharedManager](MPStyleManager, "sharedManager"),  "layerIndexForLayerID:ofStyle:",  objc_msgSend(v59, "layerID"),  v70));
      -[NSMutableDictionary setObject:forKey:](v72, "setObject:forKey:", v60, kMPAuthoringLayerIndex);
      [v45 addObjectsFromArray:v71];
      if ([v45 count]) {
        -[MPAuthoringController _addVideoPaths:toEndOfLayer:inDocument:withOptions:]( v75,  "_addVideoPaths:toEndOfLayer:inDocument:withOptions:",  v45,  v59,  v76,  v72);
      }
      -[MPAuthoringController _checkForEmptyLayersInDocument:](v75, "_checkForEmptyLayersInDocument:", v76);
      v75->_skipApplyingSettings = 1;
      v61 = +[MPAuthoringUtilities subtitlesFromOptions:]( &OBJC_CLASS___MPAuthoringUtilities,  "subtitlesFromOptions:",  a4);
      if (v61)
      {
        v62 = v61;
        if ([v61 count])
        {
          v89 = 0u;
          v90 = 0u;
          v87 = 0u;
          v88 = 0u;
          v63 = [v62 countByEnumeratingWithState:&v87 objects:v119 count:16];
          if (v63)
          {
            v64 = v63;
            v65 = *(void *)v88;
            do
            {
              for (iuint64_t i = 0LL; ii != v64; iuint64_t i = (char *)ii + 1)
              {
                if (*(void *)v88 != v65) {
                  objc_enumerationMutation(v62);
                }
                -[MPAuthoringController addStyledCaptionToSlide:inDocument:withOptions:]( v75,  "addStyledCaptionToSlide:inDocument:withOptions:",  +[MPUtilities slideForPath:inDocument:]( &OBJC_CLASS___MPUtilities,  "slideForPath:inDocument:",  *(void *)(*((void *)&v87 + 1) + 8LL * (void)ii),  v76),  v76,  a4);
              }

              v64 = [v62 countByEnumeratingWithState:&v87 objects:v119 count:16];
            }

            while (v64);
          }
        }
      }

      v75->_skipApplyingSettings = 0;
      -[MPAuthoringController configureFiltersInDocument:withOptions:]( v75,  "configureFiltersInDocument:withOptions:",  v76,  v72);
      -[MPAuthoringController configureTransitionsInDocument:withOptions:]( v75,  "configureTransitionsInDocument:withOptions:",  v76,  v72);
      -[MPAuthoringController reconfigureColorSchemeInDocument:withOptions:]( v75,  "reconfigureColorSchemeInDocument:withOptions:",  v76,  v72);
      -[MPAuthoringController scaleDurationsInDocument:withOptions:]( v75,  "scaleDurationsInDocument:withOptions:",  v76,  v72);
      objc_msgSend( +[MPCropController sharedController](MPCropController, "sharedController"),  "cropSlidesInDocument:withOptions:",  v76,  v72);
      objc_msgSend(objc_msgSend(v76, "montage"), "unlock");
      -[MPAuthoringController cleanup](v75, "cleanup");
      objc_autoreleasePoolPop(context);
    }

    else
    {
      -[MPAuthoringController authorDocument:withOptions:](self, "authorDocument:withOptions:", v4, a4);
    }
  }

  else
  {
    [v4 removeAllLayers];
  }

      v35 = objc_opt_class(&OBJC_CLASS___MPEffectContainer, v16);
      else {
        a4 = v17;
      }
      v37 = objc_opt_class(&OBJC_CLASS___MPLayerEffect, v36);
      if ((objc_opt_isKindOfClass(a4, v37) & 1) == 0)
      {
        v39 = objc_opt_class(&OBJC_CLASS___MPEffect, v38);
        if ((objc_opt_isKindOfClass(a4, v39) & 1) == 0) {
          continue;
        }
      }

      if (objc_msgSend(a4, "container", v40) == a3) {
        return a4;
      }
    }

    uint64_t v8 = [v7 countByEnumeratingWithState:&v50 objects:v56 count:16];
    id result = 0LL;
    if (v8) {
      continue;
    }
    return result;
  }

        v45[0] = _NSConcreteStackBlock;
        v45[1] = 3221225472LL;
        v45[2] = sub_1BA09C;
        v45[3] = &unk_258F18;
        v45[4] = a3;
        v45[5] = v5;
        [v14 enumerateObjectsUsingBlock:v45];
        return v5;
      }

      if (mGeometry)
      {
        double v20 = BYTE3(mFlags) & 0xF;
        v21 = v20 + 1;
      }

      else
      {
        v21 = 0;
      }

      v27 = (char *)calloc(v17 + 1, 0x48uLL);
      v5->mGeometry = v27;
      v5->super.mFlags = v5->super.mFlags & 0xF0FFFFFF | (v5->super.mFlags >> 28 << 24) | 0x40;
      if (mGeometry)
      {
        memcpy(v27, mGeometry, 48 * v21);
        free(mGeometry);
        v27 = (char *)v5->mGeometry;
      }

      if (v21)
      {
        v28 = &v27[72 * v21 - 72];
        v30 = *(_OWORD *)v28;
        _Q0 = *((_OWORD *)v28 + 1);
        v31 = *((void *)v28 + 8);
        v32 = *((_OWORD *)v28 + 2);
        v33 = *((_OWORD *)v28 + 3);
      }

      else
      {
        v32 = xmmword_1F8DF0;
        __asm { FMOV            V0.2D, #2.0 }

        v30 = 0uLL;
        v31 = 0LL;
        v33 = 0uLL;
      }

      v41 = v21;
      v42 = (uint64_t)&v27[72 * v21 + 32];
      if (!v27) {
        goto LABEL_40;
      }
LABEL_39:
      for (j = (HIBYTE(v5->super.mFlags) & 0xF) + 1LL; v41 < j; j = 0LL)
      {
        *(_OWORD *)(v42 - 32) = v30;
        *(_OWORD *)(v42 - 16) = _Q0;
        *(void *)(v42 + 32) = v31;
        ++v41;
        *(_OWORD *)v42 = v32;
        *(_OWORD *)(v42 + 16) = v33;
        v42 += 72LL;
        if (v27) {
          goto LABEL_39;
        }
LABEL_40:
        ;
      }

      goto LABEL_44;
    }
  }

  return v5;
}

LABEL_127:
          v75 = 0;
          if (!v74) {
            goto LABEL_143;
          }
          goto LABEL_128;
        }

        v75 = 1;
        if (!v74)
        {
LABEL_143:
          if (v73) {
            -[MRLayer deactivate](v71, "deactivate");
          }
          if (v72) {
            -[MRLayer depreactivate:](v71, "depreactivate:", 1LL);
          }
          continue;
        }

LABEL_128:
        if ((v72 & 1) == 0) {
          -[MRLayer preactivate](v71, "preactivate");
        }
        if (((!v75 | v73) & 1) != 0)
        {
          if (((v75 | v73 ^ 1) & 1) == 0) {
            -[MRLayer deactivate](v71, "deactivate");
          }
        }

        else
        {
          -[MRLayer activate](v71, "activate");
          if (!-[MRLayer isLoadedForTime:](v71, "isLoadedForTime:", 0.0)) {
            -[MRLayerClock pauseOnNextUpdate](-[MRLayer clock](v71, "clock"), "pauseOnNextUpdate");
          }
        }

        if (!v75)
        {
          -[MRLayer timeIn](v71, "timeIn");
          v78 = v77 == 1.0e36;
          v79 = -6.0;
          if (!v78)
          {
            if (-[MRLayerClock selfIsPaused](-[MRLayer clock](self->mCurrentSublayer, "clock", -6.0), "selfIsPaused")
              && !-[MRLayerClock selfIsPaused](-[MRLayer clock](v71, "clock"), "selfIsPaused"))
            {
              -[MRLayerClock pauseOnNextUpdate](-[MRLayer clock](v71, "clock"), "pauseOnNextUpdate");
            }

            else if (!-[MRLayerClock selfIsPaused](-[MRLayer clock](self->mCurrentSublayer, "clock"), "selfIsPaused") {
                   && -[MRLayerClock selfIsPaused](-[MRLayer clock](v71, "clock"), "selfIsPaused"))
            }
            {
              -[MRLayerClock resumeOnNextUpdate](-[MRLayer clock](v71, "clock"), "resumeOnNextUpdate");
            }

            -[MRLayerClock containerTime](self->super.mClock, "containerTime");
            v81 = v80;
            -[MRLayer timeIn](v71, "timeIn");
            v83 = v82;
            -[MRLayer timeIn](self->mCurrentSublayer, "timeIn");
            v85 = v84;
            -[MRLayer timeIn](v71, "timeIn");
            v76 = v81 - v83;
            v87 = v85 - v86 + 2.0;
            v88 = v81 - v83 < v87 || v87 <= 2.0;
            v79 = v87 + -0.001;
            if (v88) {
              v79 = v81 - v83;
            }
            if (v79 <= -6.0) {
              v79 = -6.0;
            }
          }

          -[MRLayer prerenderForTime:inContext:withArguments:]( v71,  "prerenderForTime:inContext:withArguments:",  a4,  a5,  v79,  v76);
          if (-[MRLayerClock jumpedBackInTime](-[MRLayer clock](v71, "clock"), "jumpedBackInTime")) {
            -[MRLayer synchronizeTime](v71, "synchronizeTime");
          }
        }
      }

      v68 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( v67,  "countByEnumeratingWithState:objects:count:",  &v93,  v97,  16LL);
    }

    while (v68);
  }

    objc_msgSend( a3,  "setAudioPlaylist:",  -[MPAuthoringController createAudioPlayListFromAudioPaths:andOptions:]( self,  "createAudioPlayListFromAudioPaths:andOptions:",  v177,  v10));
    goto LABEL_129;
  }

  [v177 count];
  if ([v177 count])
  {
    v76 = objc_msgSend(objc_msgSend(a3, "audioPlaylist"), "countOfSongs");
    if (v76 != [v177 count]) {
      goto LABEL_128;
    }
  }

void sub_555F4(_Unwind_Exception *a1)
{
}

void sub_57A08(_Unwind_Exception *a1)
{
}

void sub_57A64(_Unwind_Exception *a1)
{
}

LABEL_37:
        v30 = +[NSMutableDictionary dictionaryWithDictionary:]( NSMutableDictionary,  "dictionaryWithDictionary:",  [obja objectForKey:@"constraints"]);
        -[NSMutableDictionary addEntriesFromDictionary:]( v30,  "addEntriesFromDictionary:",  [v37 objectForKey:@"constraints"]);
        [v33 setObject:v30 forKey:v18];
      }

      v35 = -[NSMutableSet countByEnumeratingWithState:objects:count:]( v6,  "countByEnumeratingWithState:objects:count:",  &v44,  v57,  16LL);
    }

    while (v35);
  }

  return v33;
}

        v38 = -[NSDictionary initWithObjectsAndKeys:]( [NSDictionary alloc],  "initWithObjectsAndKeys:",  v13,  @"slidesToCrop",  a4,  @"document",  [v51 copy],  @"options",  0);
        -[MPCropController batchCrop:](self, "batchCrop:", v38);

        __int128 v16 = (char *)v16 + 1;
      }

      while (v16 != v45);
      v39 = [obj countByEnumeratingWithState:&v64 objects:v70 count:16];
      v45 = v39;
    }

    while (v39);
    uint64_t v9 = v40;
    if (v54)
    {
      -[NSOperationQueue waitUntilAllOperationsAreFinished](v54, "waitUntilAllOperationsAreFinished");
    }
  }

  -[MPCropController cleanup](self, "cleanup");
  -[NSRecursiveLock unlock](self->_cropLock, "unlock");
  objc_autoreleasePoolPop(v9);
}

        v30 = +[NSMutableDictionary dictionaryWithDictionary:]( NSMutableDictionary,  "dictionaryWithDictionary:",  [obja objectForKey:@"constraints"]);
        -[NSMutableDictionary addEntriesFromDictionary:]( v30,  "addEntriesFromDictionary:",  [v36 objectForKey:@"constraints"]);
        [v32 setObject:v30 forKey:v18];
      }

      v34 = -[NSMutableSet countByEnumeratingWithState:objects:count:]( v6,  "countByEnumeratingWithState:objects:count:",  &v43,  v56,  16LL);
    }

    while (v34);
  }

  return v32;
}

  if ((self->super.mFlags & 0x40) != 0) {
    v33 = (double *)&mGeometry[72 * (self->super.mFlags >> 28) + 40];
  }
  else {
    v33 = (double *)&mGeometry[48 * (self->super.mFlags >> 28) + 40];
  }
  *v33 = a3;
}

  if ((self->super.mFlags & 0x40) != 0) {
    v33 = (double *)&mGeometry[72 * (self->super.mFlags >> 28) + 32];
  }
  else {
    v33 = (double *)&mGeometry[48 * (self->super.mFlags >> 28) + 32];
  }
  *v33 = a3;
}

LABEL_21:
          [v20 addObject:v8];
        }

        v22 = [a3 countByEnumeratingWithState:&v27 objects:v32 count:16];
      }

      while (v22);
      double v6 = v20;
    }
  }

  else
  {
    double v6 = [a3 allKeys];
  }

  id result = [v6 count];
  if (result) {
    return [v6 objectAtIndex:rand() % (unint64_t)result];
  }
  return result;
}

  -[MPEffect didChange:valuesAtIndexes:forKey:](self, "didChange:valuesAtIndexes:forKey:", 2LL, v7, @"filters");
}

          [v20 addObject:v8];
        }

        v22 = [a3 countByEnumeratingWithState:&v27 objects:v32 count:16];
      }

      while (v22);
      double v6 = v20;
    }
  }

  else
  {
    double v6 = [a3 allKeys];
  }

  id result = [v6 count];
  if (result) {
    return [v6 objectAtIndex:rand() % (unint64_t)result];
  }
  return result;
}

          [v20 addObject:v8];
        }

        v22 = [a3 countByEnumeratingWithState:&v27 objects:v32 count:16];
      }

      while (v22);
      double v6 = v20;
    }
  }

  else
  {
    double v6 = [a3 allKeys];
  }

  id result = [v6 count];
  if (result) {
    return [v6 objectAtIndex:rand() % (unint64_t)result];
  }
  return result;
}

      double v20 = (char *)v20 + 1;
    }

    while (v16 != v20);
    x = v22;
    __int128 v14 = v21;
    v34 = [v4 countByEnumeratingWithState:&v66 objects:v70 count:16];
    __int128 v16 = v34;
  }

  while (v34);
LABEL_28:
  rect1_24 = v19;
  rect1_8 = x;
  __int128 v12 = v17;
LABEL_29:
  [*(id *)(*(void *)(a1 + 32) + 16) resolutionForPath:a2];
  v36 = v35;
  v38 = v37;
  v39 = v35 / v37;
  v81.origin.x = CGRectZero.origin.x;
  v75.origin.x = rect1_8;
  v75.origin.y = rect1_24;
  v75.size.width = v13;
  v75.size.height = v14;
  v81.origin.y = y;
  v81.size.width = width;
  v81.size.height = height;
  if (CGRectEqualToRect(v75, v81)) {
    v40 = v39;
  }
  else {
    v40 = v13 * v36 / (v14 * v38);
  }
  v41 = v38 * (v13 * v14 / v36) <= 0.9 || v10 <= 1;
  rect1_16a = v12;
  if (v41 && ((v42 = v40 / v39, v39 > 1.0) || v42 <= 6.0)) {
    v43 = v42 < 0.165 && v39 > 1.0;
  }
  else {
    v43 = 1LL;
  }
  v44 = *(unsigned __int8 *)(a1 + 48);
  if (*(_BYTE *)(a1 + 48))
  {
    if (v10 == 1
      || v40 <= 1.0 && (v40 != 0.0 ? (v45 = v39 <= 1.0) : (v45 = 1), !v45 ? (v46 = v10 < 4) : (v46 = 0), v46))
    {
      v47 = 1LL;
    }

    else
    {
      v48 = v39 <= 1.0;
      if (v40 <= 1.0) {
        v48 = 0;
      }
      if (v40 == 0.0) {
        v48 = 0;
      }
      v47 = v10 < 4 && v48;
    }
  }

  else
  {
    v47 = 0LL;
  }

  rect1_24b = a2;
  v49 = [*(id *)(*(void *)(a1 + 32) + 16) isMovieAtPath:a2];
  if ((_DWORD)v49) {
    *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = 1;
  }
  if (v39 >= 0.5) {
    v50 = v39 > 2.0;
  }
  else {
    v50 = 2LL;
  }
  if (!v44) {
    v40 = v39;
  }
  rect1_8b = objc_alloc(&OBJC_CLASS___NSMutableDictionary);
  rect1 = +[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", v47);
  *(float *)&v51 = v39;
  v52 = +[NSNumber numberWithFloat:](&OBJC_CLASS___NSNumber, "numberWithFloat:", v51);
  v53 = +[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", v43);
  v54 = +[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", v49);
  *(float *)&v55 = v40;
  v56 = -[NSMutableDictionary initWithObjectsAndKeys:]( rect1_8b,  "initWithObjectsAndKeys:",  rect1,  @"canSwitch",  v52,  @"imageAspectRatio",  v53,  @"fullOfFaces",  v54,  @"isMovie",  +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v55),  @"aspectRatio",  +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", rect1_16a),  @"intersects",  +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v39 > 1.0),  @"fitsInExtraWide",  +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", v50),  @"panoramaType",  +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", [v4 count]),  @"roiCount",  0);
  [*(id *)(*(void *)(a1 + 32) + 48) lock];
  [*(id *)(*(void *)(a1 + 32) + 40) setObject:v56 forKey:rect1_24b];
  [*(id *)(*(void *)(a1 + 32) + 48) unlock];
}

    v22 = *(void *)&self->mNeedsToRecalculateIterations;
    v23 = [*(id *)((char *)&self->mSprites + 1) count];
    else {
      return v22 + v18;
    }
  }

  else
  {
    if (a4) {
      *a4 = v9;
    }
    if (a5) {
      *a5 = *(double *)((char *)&self->mSlideAspectRatios + 1);
    }
    return *(void *)&self->mNeedsToRecalculateIterations;
  }

      uint64_t v10 = 0;
      uint64_t v8 = v8 - (v4[67] == 4) - (v4[67] == 3);
    }

    while ((v12 & 1) != 0);
  }

  return result;
}

  if (v10 != a3)
  {
    [v10 removeSlide:self];
    v25 = self->mSlideAsset;
    if (v25)
    {
      v26 = self->mFlags;
      else {
        v27 = 0LL;
      }
      v28 = v25[v27];
    }

    else
    {
      v28 = 0LL;
    }

    objc_msgSend(v28, "setAsset:", a3, v29);
    [a3 addSlide:self];
  }

  objc_sync_exit(self);
}

  if (v10 != a3)
  {
    v25 = self->mSlideAsset;
    if (v25)
    {
      v26 = self->mFlags;
      else {
        v27 = 0LL;
      }
      v28 = v25[v27];
    }

    else
    {
      v28 = 0LL;
    }

    objc_msgSend(v28, "setKenBurnsType:", a3, v29);
  }

  objc_sync_exit(self);
}

LABEL_18:
    glDisableVertexAttribArray(3u);
    if ((*a4 & 0x20) == 0) {
      goto LABEL_15;
    }
    goto LABEL_14;
  }

  __int128 v11 = *a3;
  if ((_DWORD)v11)
  {
    __int128 v12 = *a4 != a6;
  }

  else
  {
    __int128 v12 = 1;
    glGenBuffers(1, a3);
    __int128 v11 = *a3;
  }

  __int128 v14 = -[MRContext bindBuffer:](self->_context, "bindBuffer:", v11);
  __int128 v15 = (v8 << 30 >> 31) & 3;
  if ((v8 & 1) != 0) {
    __int128 v15 = 2;
  }
  __int128 v16 = 4 * (v15 | v8 & 4);
  if ((v8 & 8) != 0) {
    v16 += 12;
  }
  if ((v8 & 0x10) != 0) {
    v16 += 8;
  }
  __int128 v17 = v16 + 8;
  if ((v8 & 0x20) != 0) {
    __int128 v18 = v17;
  }
  else {
    __int128 v18 = v16;
  }
  if (!v12) {
    goto LABEL_68;
  }
  if ((v8 & 1) != 0)
  {
    if ((*a4 & 3) == 0) {
      glEnableVertexAttribArray(0);
    }
    BOOL v19 = 2LL;
    double v20 = 2;
  }

  else
  {
    if ((v8 & 2) == 0)
    {
      if ((*a4 & 3) != 0) {
        glDisableVertexAttribArray(0);
      }
      BOOL v19 = 0LL;
      goto LABEL_43;
    }

    if ((*a4 & 3) == 0) {
      glEnableVertexAttribArray(0);
    }
    BOOL v19 = 3LL;
    double v20 = 3;
  }

  glVertexAttribPointer(0, v20, 0x1406u, 0, v18, 0LL);
LABEL_43:
  if ((v8 & 4) != 0)
  {
    if ((*a4 & 4) == 0) {
      glEnableVertexAttribArray(1u);
    }
    glVertexAttribPointer(1u, 4, 0x1406u, 0, v18, (const GLvoid *)(4 * v19));
    v19 |= 4uLL;
  }

  else if ((*a4 & 8) != 0)
  {
    glDisableVertexAttribArray(2u);
  }

  if ((v8 & 8) != 0)
  {
    if ((*a4 & 8) == 0) {
      glEnableVertexAttribArray(2u);
    }
    glVertexAttribPointer(2u, 3, 0x1406u, 0, v18, (const GLvoid *)(4 * v19));
    v19 += 3LL;
  }

  else if ((*a4 & 8) != 0)
  {
    glDisableVertexAttribArray(2u);
  }

  if ((v8 & 0x10) != 0)
  {
    if ((*a4 & 0x10) == 0) {
      glEnableVertexAttribArray(3u);
    }
    glVertexAttribPointer(3u, 2, 0x1406u, 0, v18, (const GLvoid *)(4 * v19));
    v19 += 2LL;
  }

  else if ((*a4 & 0x10) != 0)
  {
    glDisableVertexAttribArray(3u);
  }

  if ((v8 & 0x20) != 0)
  {
    if ((*a4 & 0x20) == 0) {
      glEnableVertexAttribArray(4u);
    }
    glVertexAttribPointer(4u, 2, 0x1406u, 0, v17, (const GLvoid *)(4 * v19));
  }

  else if ((*a4 & 0x20) != 0)
  {
    glDisableVertexAttribArray(4u);
  }

  *a4 = v8;
LABEL_68:
  if (&self->_dynamicVBO == a3) {
    v21 = 35048;
  }
  else {
    v21 = 35040;
  }
  if (&self->_staticVBO == a3) {
    v22 = 35044;
  }
  else {
    v22 = v21;
  }
  glBufferData(0x8892u, self->_countOfVertices * v18, a5, v22);
  -[MRContext bindBuffer:](self->_context, "bindBuffer:", v14);
}

    if (a3) {
      *a3 = v9 - a6;
    }
    if (a4) {
      *a4 = 0.0;
    }
LABEL_22:
    if (!a5) {
      return;
    }
    mPhaseOutDuration = self->super.mPhaseOutDuration;
    goto LABEL_24;
  }

  if (!BYTE5(self->mPageCount))
  {
    if (a3) {
      *a3 = v9 - a6;
    }
    if (a4)
    {
      v25 = 0u;
      v26 = 0u;
      v23 = 0u;
      v24 = 0u;
      __int128 v14 = -[NSDictionary allValues]( -[MRLayerEffect slideProvidersForElementIDs](self->super.mEffectLayer, "slideProvidersForElementIDs", 0LL),  "allValues");
      __int128 v15 = -[NSArray countByEnumeratingWithState:objects:count:]( v14,  "countByEnumeratingWithState:objects:count:",  &v23,  v27,  16LL);
      if (v15)
      {
        __int128 v16 = v15;
        __int128 v17 = 0;
        __int128 v18 = *(void *)v24;
        do
        {
          for (uint64_t i = 0LL; i != v16; uint64_t i = (char *)i + 1)
          {
            if (*(void *)v24 != v18) {
              objc_enumerationMutation(v14);
            }
            [*(id *)(*((void *)&v23 + 1) + 8 * (void)i) imageAspectRatio];
            v21 = v20 > 2.0 || v20 < 0.5;
            v17 |= v21;
          }

          __int128 v16 = -[NSArray countByEnumeratingWithState:objects:count:]( v14,  "countByEnumeratingWithState:objects:count:",  &v23,  v27,  16LL);
        }

        while (v16);
        v22 = 0.1;
        if ((v17 & 1) == 0) {
          v22 = 0.0;
        }
      }

      else
      {
        v22 = 0.0;
      }

      *a4 = v22;
    }

    goto LABEL_22;
  }

  __int128 v13 = self->super.mDefaultMainDuration * 0.25;
  if (v13 + 0.414999992 <= a6)
  {
    if (a3) {
      *a3 = v9 - a6;
    }
    if (a4) {
      *a4 = 0.1;
    }
    goto LABEL_22;
  }

  if (a3)
  {
    __int128 v11 = v13 + -0.414999992;
LABEL_5:
    *a3 = v11 - a6;
  }

    v93 = -1.0;
    v97 = 2.0;
LABEL_19:
    double v20 = objc_msgSend( objc_msgSend(v10, "imageManager"),  "retainedByUserImageWithSize:andColor:",  objc_msgSend(v10, "backColor"),  1.0,  1.0);
    [v20 setLabel:@"Marimba OrigamiTitle Background"];
    [v20 setClampMode:2];
    objc_msgSend( v53,  "addObject:",  +[NSDictionary dictionaryWithObjectsAndKeys:]( NSDictionary,  "dictionaryWithObjectsAndKeys:",  objc_msgSend(v20, "insertingInCollection"),  @"image",  +[NSValue valueWithCGRect:](NSValue, "valueWithCGRect:", x, y, width, height),  @"rectangle",  0));
    v58 = [*(id *)((char *)&self->mText0Offsets + 1) insertingInCollection];
    v59 = +[NSValue valueWithCGRect:]( &OBJC_CLASS___NSValue,  "valueWithCGRect:",  v95 + v51 * -0.5,  v99 * -0.5 + v57 * v49,  v51);
    v60 = v58;
    uint64_t v9 = v53;
    objc_msgSend( v53,  "addObject:",  +[NSDictionary dictionaryWithObjectsAndKeys:]( NSDictionary,  "dictionaryWithObjectsAndKeys:",  v60,  @"image",  &__kCFBooleanTrue,  @"needsBlend",  v59,  @"rectangle",  0));
    v61 = objc_msgSend( -[NSDictionary objectForKey:]( -[MRLayerEffect slideProvidersForElementIDs](self->super.mEffectLayer, "slideProvidersForElementIDs"),  "objectForKey:",  @"image0"),  "retainedByUserRenderedImageAtTime:inContext:withArguments:",  v10,  a5,  a3);
    v62 = v61;
    if (!v96)
    {
      v69 = v61;
      v71 = v93;
      v70 = v94;
      v66 = v97;
      v65 = v98;
      goto LABEL_48;
    }

    [v61 aspectRatio];
    v64 = v63;
    v66 = v97;
    v65 = v98;
    if (v63 >= 0.5 && v63 <= 2.0) {
      goto LABEL_25;
    }
    v67 = v63 / (v97 / v98);
    v68 = v97 / v98 / v63;
    if (v64 >= 1.0) {
      v68 = v64 / (v97 / v98);
    }
    if (v68 < 1.1)
    {
LABEL_25:
      v69 = v62;
      v71 = v93;
      v70 = v94;
LABEL_48:
      objc_msgSend( v9,  "addObject:",  +[NSDictionary dictionaryWithObjectsAndKeys:]( NSDictionary,  "dictionaryWithObjectsAndKeys:",  objc_msgSend(v69, "insertingInCollection"),  @"image",  +[NSValue valueWithCGRect:](NSValue, "valueWithCGRect:", v71, v70, v66, v65),  @"rectangle",  0));
      v32 = v69;
      goto LABEL_49;
    }

    v84 = objc_msgSend( objc_msgSend( objc_msgSend( -[NSDictionary objectForKey:]( self->super.mFlattenedAttributes,  "objectForKey:",  @"breakInformation"),  "objectForKey:",  @"image0"),  "objectForKey:",  @"panEndDirection"),  "intValue");
    objc_msgSend(v62, "setScale:", fmax(v67, 1.0));
    [v62 setCenterX:0.0];
    [v62 setCenterY:0.0];
    v69 = [v62 retainedByUserImage];
    v85 = [*(id *)((char *)&self->mBackColorForImage[2] + 1) objectForKeyedSubscript:@"image0"];
    if (v85)
    {
      [v85 doubleValue];
      if (v64 < 1.0)
      {
LABEL_46:
        [v69 setCenterY:v86];
        goto LABEL_47;
      }
    }

    else
    {
      if (v64 < 1.0)
      {
        v86 = 1.0 - v67;
        if (v84 != -1) {
          v86 = v67 + -1.0;
        }
        goto LABEL_46;
      }

      v86 = 1.0 - v67;
      if (v84 == -1) {
        v86 = v67 + -1.0;
      }
    }

    [v69 setCenterX:v86];
LABEL_47:
    uint64_t v9 = v53;
    v71 = v93;
    v70 = v94;
    [v62 releaseByUser];
    goto LABEL_48;
  }

  __int128 v13 = objc_msgSend( -[NSDictionary objectForKey:]( -[MRLayerEffect slideProvidersForElementIDs](self->super.mEffectLayer, "slideProvidersForElementIDs"),  "objectForKey:",  @"image3"),  "retainedByUserRenderedImageAtTime:inContext:withArguments:",  a4,  a5,  a3);
  __int128 v14 = v9;
  __int128 v15 = [v13 insertingInCollection];
  __int128 v16 = (float)-v12;
  __int128 v17 = v12 + v12;
  __int128 v18 = +[NSValue valueWithCGRect:](&OBJC_CLASS___NSValue, "valueWithCGRect:", 0.333333343, v16, 0.666666687, v17);
  BOOL v19 = v15;
  uint64_t v9 = v14;
  objc_msgSend( v14,  "addObject:",  +[NSDictionary dictionaryWithObjectsAndKeys:]( NSDictionary,  "dictionaryWithObjectsAndKeys:",  v19,  @"image",  v18,  @"rectangle",  0));
  [v13 releaseByUser];
  double v20 = objc_msgSend( -[NSDictionary objectForKey:]( -[MRLayerEffect slideProvidersForElementIDs](self->super.mEffectLayer, "slideProvidersForElementIDs"),  "objectForKey:",  @"image4"),  "retainedByUserRenderedImageAtTime:inContext:withArguments:",  a4,  a5,  a3);
  objc_msgSend( v14,  "addObject:",  +[NSDictionary dictionaryWithObjectsAndKeys:]( NSDictionary,  "dictionaryWithObjectsAndKeys:",  objc_msgSend(v20, "insertingInCollection"),  @"image",  +[NSValue valueWithCGRect:](NSValue, "valueWithCGRect:", -1.0, v16, 1.33333337, v17),  @"rectangle",  0));
LABEL_50:
  [v20 releaseByUser];
  return v9;
}

  dispatch_semaphore_signal((dispatch_semaphore_t)self->_loadingSemaphore);
}

      if (v10 != 126 && v10 != 124) {
        goto LABEL_7;
      }
    }

    if (!(_DWORD)v8)
    {
      id result = (*(void *(**)(int *__return_ptr, void *, void *, _BYTE *))(*v7 + 160LL))( &v16,  v7,  a2,  v5);
      v22 = v17;
      v23 = v18;
      __int128 v13 = v19;
      if (v16)
      {
        __int128 v14 = v20;
        if (v20 <= *(__int16 *)(a3 + 20))
        {
          __int128 v15 = v21;
          *(_DWORD *)a3 = v16;
          *(void *)(a3 + 4) = v22;
          *(_DWORD *)(a3 + 12) = v23;
          *(_DWORD *)(a3 + 16) = v13;
          *(_WORD *)(a3 + 20) = v14;
          *(_WORD *)(a3 + 22) = v15;
        }
      }

      __int128 v12 = 0LL;
      unsigned int v5 = &v5[v13 - 1];
      goto LABEL_12;
    }

      if (v10 != 126 && v10 != 124) {
        goto LABEL_7;
      }
    }

    if (!(_DWORD)v8)
    {
      id result = (*(void *(**)(int *__return_ptr, void *, void *, _BYTE *))(*v7 + 160LL))( &v16,  v7,  a2,  v5);
      v22 = v17;
      v23 = v18;
      __int128 v13 = v19;
      if (v16)
      {
        __int128 v14 = v20;
        if (v20 <= *(__int16 *)(a3 + 20))
        {
          __int128 v15 = v21;
          *(_DWORD *)a3 = v16;
          *(void *)(a3 + 4) = v22;
          *(_DWORD *)(a3 + 12) = v23;
          *(_DWORD *)(a3 + 16) = v13;
          *(_WORD *)(a3 + 20) = v14;
          *(_WORD *)(a3 + 22) = v15;
        }
      }

      __int128 v12 = 0LL;
      unsigned int v5 = &v5[v13 - 1];
      goto LABEL_12;
    }

    v45 = v44 | (1 << v16) | (1 << (v33 + v17 + 3));
    v46 = 0LL;
    if ((_DWORD)v36)
    {
      v47 = 1;
      while (vabdd_f64(v203[v47 - 1], v37) >= 0.00001 || vabdd_f64(v203[v47], v39) >= 0.00001)
      {
        ++v46;
        v47 += 2;
        if (v36 == v46)
        {
          v46 = v36;
          goto LABEL_24;
        }
      }

      v48 = v202[v46];
      v202[v46] = v48 | v45;
    }

    else
    {
LABEL_24:
      v203[(2 * v36)] = v37;
      v48 = (2 * v36) | 1;
      v203[v48] = v39;
      v202[v46] = v45;
      LODWORD(v36) = v36 + 1;
    }

void sub_5A030(_Unwind_Exception *exception_object)
{
}

void sub_5A280(_Unwind_Exception *a1)
{
}

void sub_5A2D4(_Unwind_Exception *a1)
{
}

void sub_5A408(_Unwind_Exception *a1)
{
}

void sub_5A4FC(_Unwind_Exception *a1)
{
}

void sub_5A5A0(_Unwind_Exception *a1)
{
}

void sub_5A604(_Unwind_Exception *a1)
{
}

void sub_5A674(_Unwind_Exception *a1)
{
}

void sub_5A7C8(_Unwind_Exception *a1)
{
}

void sub_5A918(_Unwind_Exception *a1)
{
}

void sub_5A9D8(_Unwind_Exception *a1)
{
}

void sub_5AAE8(_Unwind_Exception *a1)
{
}

void sub_5AD40(_Unwind_Exception *a1)
{
}

void sub_5AE34(_Unwind_Exception *a1)
{
}

void sub_5B388(_Unwind_Exception *a1)
{
}

void sub_5B648(_Unwind_Exception *a1)
{
}

void sub_5B6D4(_Unwind_Exception *a1)
{
}

void sub_5B830(_Unwind_Exception *a1)
{
}

void sub_5CA7C(id a1)
{
  if (qword_2AE670 != -1) {
    dispatch_once(&qword_2AE670, &stru_24DD80);
  }
}

void sub_5CAA4(id a1)
{
}

void sub_5CCBC(_Unwind_Exception *a1)
{
}

uint64_t sub_5CCD4(uint64_t a1, _BYTE *a2, float a3)
{
  float v5 = a3 * 0.1 + 0.0;
  uint64_t result = (*(uint64_t (**)(float))(*(void *)(a1 + 32) + 16LL))(v5);
  *a2 = *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL);
  return result;
}

uint64_t sub_5CD34(uint64_t a1, _BYTE *a2, float a3)
{
  float v5 = a3 * 0.1 + 0.0;
  uint64_t result = (*(uint64_t (**)(float))(*(void *)(a1 + 32) + 16LL))(v5);
  *a2 = *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL);
  return result;
}

uint64_t sub_5CD94(uint64_t a1, _BYTE *a2, float a3)
{
  float v5 = a3 * 0.1 + 0.0;
  uint64_t result = (*(uint64_t (**)(float))(*(void *)(a1 + 32) + 16LL))(v5);
  *a2 = *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL);
  return result;
}

id sub_5E4A8(uint64_t a1, uint64_t a2, void *a3)
{
  if ([a3 attributedText])
  {
    id v6 = [a3 attributedText];
  }

  else
  {
    id result = [a3 text];
    if (!result) {
      return result;
    }
    id v6 = [a3 text];
  }

  return [*(id *)(a1 + 32) setObject:v6 forKeyedSubscript:a2];
}

id sub_5E598(uint64_t a1, uint64_t a2, void *a3)
{
  id result = [a3 duration];
  if (v7 >= 0.0)
  {
    [a3 duration];
    return objc_msgSend( *(id *)(a1 + 32),  "setObject:forKeyedSubscript:",  +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:"),  a2);
  }

  return result;
}

void sub_5E660(_Unwind_Exception *a1)
{
}

void sub_5E858(_Unwind_Exception *a1)
{
}

void sub_5E8AC(_Unwind_Exception *a1)
{
}

void sub_5E920(_Unwind_Exception *a1)
{
}

void sub_5E9B8(_Unwind_Exception *a1)
{
}

id sub_5EA68(uint64_t a1, void *a2)
{
  return [a2 setScale:1.0];
}

id sub_5EC68(uint64_t a1, void *a2)
{
  return [a2 updateWithText:*(void *)(a1 + 32)];
}

void sub_606B8(_Unwind_Exception *a1)
{
}

void sub_60714(_Unwind_Exception *a1)
{
}

LABEL_64:
        uint64_t v8 = v52;
        if (v52 < 0.0) {
          uint64_t v8 = 0.0;
        }
        goto LABEL_76;
      }

      if ((objc_msgSend(objc_msgSend(v22, "objectForKey:", @"fullImage"), "BOOLValue") & 1) == 0)
      {
        v32 = -[MPDocument regionsOfInterestForPath:detect:]( self->_authoredDocument,  "regionsOfInterestForPath:detect:",  [a3 path],  +[MPAuthoringUtilities performFaceDetectionFromOptions:]( MPAuthoringUtilities,  "performFaceDetectionFromOptions:",  a4));
        if (v32)
        {
          v33 = v32;
          if ([v32 count])
          {
            v70 = v14;
            v71 = v13;
            v72 = v11;
            v73 = v25;
            v34 = CGRectZero.origin.x;
            v35 = CGRectZero.origin.y;
            v36 = CGRectZero.size.width;
            v37 = CGRectZero.size.height;
            v81 = 0u;
            v82 = 0u;
            v79 = 0u;
            v80 = 0u;
            v38 = [v33 countByEnumeratingWithState:&v79 objects:v83 count:16];
            if (v38)
            {
              v39 = v38;
              v40 = *(void *)v80;
              v77 = v35;
              v75 = v37;
              v76 = v36;
              do
              {
                for (uint64_t i = 0LL; i != v39; uint64_t i = (char *)i + 1)
                {
                  if (*(void *)v80 != v40) {
                    objc_enumerationMutation(v33);
                  }
                  v86 = CGRectFromString((NSString *)[*(id *)(*((void *)&v79 + 1) + 8 * (void)i) objectForKey:kMPMetaDataRegionOfInterestBounds]);
                  if (v86.size.width != 0.0)
                  {
                    v42 = v86.size.height;
                    if (v86.size.height != 0.0)
                    {
                      v43 = v86.origin.x;
                      v44 = v86.origin.y;
                      v45 = v86.size.width;
                      v87.origin.x = v34;
                      v87.origin.y = v35;
                      v87.size.width = v36;
                      v87.size.height = v37;
                      v93.origin.x = CGRectZero.origin.x;
                      v93.origin.y = v77;
                      v93.size.width = v76;
                      v93.size.height = v75;
                      if (CGRectEqualToRect(v87, v93))
                      {
                        v34 = v43;
                        v35 = v44;
                        v36 = v45;
                        v37 = v42;
                      }

                      else
                      {
                        v88.origin.x = v43;
                        v88.origin.y = v44;
                        v88.size.width = v45;
                        v88.size.height = v42;
                        v94.origin.x = CGRectZero.origin.x;
                        v94.origin.y = v77;
                        v94.size.width = v76;
                        v94.size.height = v75;
                        if (!CGRectEqualToRect(v88, v94))
                        {
                          v89.origin.y = v35;
                          v89.origin.x = v34;
                          v89.size.height = v37;
                          v89.size.width = v36;
                          v95.origin.x = v43;
                          v95.origin.y = v44;
                          v95.size.width = v45;
                          v95.size.height = v42;
                          v90 = CGRectUnion(v89, v95);
                          v34 = v90.origin.x;
                          v35 = v90.origin.y;
                          v36 = v90.size.width;
                          v37 = v90.size.height;
                        }
                      }
                    }
                  }
                }

                v39 = [v33 countByEnumeratingWithState:&v79 objects:v83 count:16];
              }

              while (v39);
              v47 = v77;
              v46 = CGRectZero.origin.x;
              v48 = v36;
              v49 = v37;
              v37 = v75;
              v36 = v76;
            }

            else
            {
              v46 = CGRectZero.origin.x;
              v47 = v35;
              v48 = v36;
              v49 = v37;
            }

            v54 = v34;
            v55 = v35;
            v91 = CGRectInset(*(CGRect *)(&v48 - 2), -0.0500000007, -0.0500000007);
            v56 = v91.origin.x;
            v57 = v91.origin.y;
            v58 = v91.size.width;
            v59 = v91.size.height;
            v96.origin.x = v46;
            v96.origin.y = v47;
            v96.size.width = v36;
            v96.size.height = v37;
            v60 = 0.5;
            v61 = 0.5;
            if (!CGRectEqualToRect(v91, v96))
            {
              +[MPAuthoringUtilities kbCenterPointFromRect:]( &OBJC_CLASS___MPAuthoringUtilities,  "kbCenterPointFromRect:",  v56,  v57,  v58,  v59);
              v60 = v62;
              v61 = v63;
            }

            +[MPAuthoringUtilities aspectRatioFromOptions:]( &OBJC_CLASS___MPAuthoringUtilities,  "aspectRatioFromOptions:",  a4);
            v65 = v64;
            v66 = objc_msgSend(objc_msgSend(v22, "objectForKey:", @"needsImageSize"), "BOOLValue");
            v78 = +[MPEffectManager sharedManager](&OBJC_CLASS___MPEffectManager, "sharedManager");
            v67 = [v74 effectID];
            if (v66) {
              objc_msgSend( v78,  "mediaAspectRatioForEffectID:usingAttributes:atIndex:defaultAspectRatio:imageAspectRatio:",  v67,  objc_msgSend(v74, "effectAttributes"),  objc_msgSend(a3, "index"),  v65,  v70);
            }
            else {
              objc_msgSend( v78,  "mediaAspectRatioForEffectID:usingPresetID:atIndex:defaultAspectRatio:",  v67,  objc_msgSend(objc_msgSend(a3, "parentEffect"), "presetID"),  objc_msgSend(a3, "index"),  v65);
            }
            if (v68 == 9.22337204e18) {
              v69 = v65;
            }
            else {
              v69 = v68;
            }
            -[MPCropController checkFarApartROIs:withImageSize:visibleAspectRatio:roiCenter:]( self,  "checkFarApartROIs:withImageSize:visibleAspectRatio:roiCenter:",  v33,  v72,  v71,  v69,  v60,  v61);
            __int128 v16 = 1.0;
            uint64_t v8 = 1.0;
            v25 = v73;
            if (v52 > 1.0) {
              goto LABEL_76;
            }
            goto LABEL_64;
          }
        }
      }
    }

    v31 = 0;
    goto LABEL_51;
  }

  [a1 unsetVertexPointer];
  [a1 unsetTextureCoordinatesPointerOnTextureUnit:0];
  id result = [a1 restoreModelViewMatrix:v171];
  *(float *)(a10 + 32) = v32;
  *(float *)(a10 + 36) = v41;
  *(float *)(a10 + 40) = v35;
  *(float *)(a10 + 44) = v167;
  *(float *)(a10 + 52) = v165;
  return result;
}

      v53 = 0;
LABEL_65:
      v196 = *(double *)&v187[8 * v39];
      if (v24 == v39) {
        v56 = v14;
      }
      else {
        v56 = v41;
      }
      if (v56 >= v41)
      {
        if (v56 <= v178)
        {
          v66 = v53 != 0;
          v57 = 0.0;
          if (v56 <= v18)
          {
            v71 = 0.649999976;
            if (v24 == v39) {
              v71 = 1.0;
            }
            v189 = v71;
            v190 = 1.0;
          }

          else
          {
            v189 = 1.0;
            v190 = 1.0;
          }

          v62 = -0.5;
          v61 = 1.0;
        }

        else
        {
          v67 = v56 - v178 + v56 - v178;
          v61 = 1.0;
          v62 = -0.5;
          v68 = (v67 + -0.5) * 3.14159274;
          v89 = v67 < 0.0;
          v69 = -1.57079637;
          if (!v89) {
            v69 = v68;
          }
          v70 = v69;
          v189 = (sinf(v70) + 1.0) * -0.5 * 0.349999994 + 1.0;
          v190 = 1.0;
          v66 = v53 != 0;
          v202 = 1;
          v57 = 0.0;
        }

        v58 = -1.0;
      }

      else
      {
        v57 = Spline1(v41 - v56, 0.0, 1.0, 0.9, 1.0, 0.0, 0.0, 1.0, 1.0) * -90.0;
        v58 = -1.0;
        v59 = 0.0;
        if (v56 / 0.200000003 < v41) {
          v59 = v56 / 0.200000003 + -1.0;
        }
        v190 = v41 - v59 * v59;
        v60 = (v56 + 0.100000001) / 0.899999976;
        v61 = 1.0;
        v62 = -0.5;
        v63 = (v60 + -0.5) * 3.14159274;
        v89 = v60 < 1.0;
        v64 = 1.57079637;
        if (v89) {
          v64 = v63;
        }
        v65 = v64;
        v189 = (sinf(v65) + 1.0) * v40;
        v66 = 1;
        v202 = 1;
      }

      MRMatrix_Clear((uint64_t)v220);
      v72 = *(double *)&v186[8 * v39];
      v73 = v196;
      *(float *)&v74 = MRMatrix_Translate(v220, v72, 0.0, v73);
      objc_msgSend(a4, "composeModelViewMatrix:saveTo:", v220, v224, v74);
      MRMatrix_Clear((uint64_t)v222);
      MRMatrix_Clear((uint64_t)v221);
      if (BYTE2(v6->mSortDescriptors)) {
        v75 = 1.60000002;
      }
      else {
        v75 = v198;
      }
      [a4 localAspectRatio];
      v77 = v75 * v40 / v76;
      MRMatrix_Translate(v222, 0.0, v77, 0.0);
      v78 = v57;
      v191 = v78;
      MRMatrix_SetRotationFromAnglesYXZDeg((uint64_t)v221, 0.0, v78, 0.0);
      v195 = v75;
      objc_msgSend(a4, "localAspectRatio", MRMatrix_PostMultiply((uint64_t)v222, v221));
      v192 = v75 * v62;
      v80 = v75 * v62 / v79;
      *(float *)&v81 = MRMatrix_Translate(v222, 0.0, v80, 0.0);
      objc_msgSend(a4, "composeModelViewMatrix:saveTo:", v222, v225, v81);
      v82 = v199 * v40;
      [a4 localAspectRatio];
      v193 = v75 * v40;
      v84 = v75 * v40 / v83;
      MRMatrix_MultiplyWithMatrix( (float *)[a4 modelViewMatrix],  (float *)objc_msgSend(a4, "projectionMatrix"),  v218);
      v85 = v82;
      v86 = v84;
      v87 = MRMatrix_ProjectPoint(v218, CGPointZero.x - v85, y - v84);
      v88 = MRMatrix_ProjectPoint(v218, CGPointZero.x + v85, y + v86);
      v89 = v87 > v61 || v87 < v58;
      v41 = 1.0;
      if (!v89 || (v88 <= 1.0 ? (v90 = v88 < -1.0) : (v90 = 1), !v90))
      {
        v91 = objc_alloc_init(&OBJC_CLASS___MRFlipupRenderable);
        v91->zPosition = v196;
        v91->needsBlend = v66;
        v92 = (__int128 *)objc_msgSend(a4, "modelViewMatrix", MRMatrix_Clear((uint64_t)v91->modelViewMatrix));
        v93 = *v92;
        v94 = v92[1];
        v95 = v92[3];
        *(_OWORD *)&v91->modelViewMatrix[8] = v92[2];
        *(_OWORD *)&v91->modelViewMatrix[12] = v95;
        *(_OWORD *)v91->modelViewMatrix = v93;
        *(_OWORD *)&v91->modelViewMatrix[4] = v94;
        v91->color = v189;
        v91->opacity = v190;
        if (BYTE2(v6->mSortDescriptors))
        {
          v96 = 0;
          v40 = 0.5;
        }

        else
        {
          v40 = 0.5;
          v96 = v194 < 0.5;
          if (v194 > 2.0) {
            v96 = 1;
          }
        }

        v97 = v75;
        v91->isBreak = v96;
        if (v91->isBreak)
        {
          [a4 localAspectRatio];
          v99 = v199 / v198 * v98;
          [v42 centerX];
          v101 = v100;
          [v42 centerY];
          v103 = v102;
          if (v194 <= 2.0)
          {
            v104 = 1.0;
            v105 = 0.0;
            if (v194 < 0.5) {
              v105 = 1.0 - v194 / v99;
            }
          }

          else
          {
            v104 = 1.0;
            v105 = 1.0 - v99 / v194;
          }

          if (objc_msgSend( objc_msgSend( objc_msgSend(*(id *)((char *)&v6->mSprites + 1), "objectForKey:", v43),  "objectForKey:",  @"panEndDirection"),  "integerValue") == (id)-1) {
            v106 = -1LL;
          }
          else {
            v106 = 1LL;
          }
          if (v39 < v24 || v56 > v174)
          {
            v107 = v105 * (double)v106;
LABEL_116:
            v108 = 2.0;
            v109 = v194;
            if (v194 > 2.0) {
              v101 = v107;
            }
            else {
              v103 = v107;
            }
            v91->isBreak = 0;
          }

          else
          {
            if (v56 < 1.10000002)
            {
              v107 = -(v105 * (double)v106);
              goto LABEL_116;
            }

            v110 = ((v56 + -1.10000002) / v173 + -0.5) * 3.14159274;
            v111 = -(v105 - (sinf(v110) + v104) * 0.5 * (v105 + v105)) * (double)v106;
            v108 = 2.0;
            v109 = v194;
            if (v194 > 2.0) {
              v101 = v111;
            }
            else {
              v103 = v111;
            }
          }

          if (v6->super._panoramaPanningOffsets)
          {
            if (v109 <= 2.0) {
              v112 = v103;
            }
            else {
              v112 = v101;
            }
            v113 = v109;
            -[MREffect valueForPanoramaPanningForElementID:value:minValue:maxValue:]( v6,  "valueForPanoramaPanningForElementID:value:minValue:maxValue:",  v43,  v112,  -v105,  v105);
            if (v113 > 2.0) {
              v101 = v114;
            }
            else {
              v103 = v114;
            }
          }

          v41 = 1.0;
          objc_msgSend(v42, "setCenterX:", v101, v108, v109);
          [v42 setCenterY:v103];
          v40 = 0.5;
          v97 = v195;
        }

        v115 = *(void **)(&v6->super._isInInteractiveMode + 1);
        v116 = (MRCroppingSprite *)[v115 objectForKey:v43];
        if (!v116)
        {
          v116 = objc_alloc_init(&OBJC_CLASS___MRCroppingSprite);
          [v115 setObject:v116 forKey:v43];
        }

        -[MRCroppingSprite setNeedsInSpriteCoordinates:](v116, "setNeedsInSpriteCoordinates:", 1LL);
        -[MRCroppingSprite setUsesOwnMatrixForHitTest:](v116, "setUsesOwnMatrixForHitTest:", 1LL);
        -[MRFlipupRenderable setSlide:](v91, "setSlide:", [v42 insertingInCollection]);
        -[MRFlipupRenderable setSprite:](v91, "setSprite:", v116);
        v91->position.x = CGPointZero.x;
        v91->position.y = y;
        v91->size.width = v199;
        v91->size.height = v198;
        if (!v66) {
          -[MRTiledSprite subtractSpriteAtPosition:withSize:zRotation:andOpaqueRect:inContext:]( v176,  "subtractSpriteAtPosition:withSize:zRotation:andOpaqueRect:inContext:",  a4,  MRMatrix_ProjectPoint(v218, CGPointZero.x, y),  0LL,  0LL,  0x3FF0000000000000LL,  0x3FF0000000000000LL);
        }
        [a4 restoreModelViewMatrix:v225];
        MRMatrix_Clear((uint64_t)v222);
        MRMatrix_Clear((uint64_t)v221);
        *(float *)&v117 = MRMatrix_SetRotationFromAnglesYXZDeg((uint64_t)v222, 0.0, -180.0, 0.0);
        objc_msgSend(a4, "localAspectRatio", v117);
        v119 = v180 + v193 / v118;
        MRMatrix_Translate(v222, 0.0, v119, 0.0);
        MRMatrix_SetRotationFromAnglesYXZDeg((uint64_t)v221, 0.0, -v191, 0.0);
        objc_msgSend(a4, "localAspectRatio", MRMatrix_PostMultiply((uint64_t)v222, v221));
        v121 = v180 + v192 / v120;
        *(float *)&v122 = MRMatrix_Translate(v222, 0.0, v121, 0.0);
        objc_msgSend(a4, "composeModelViewMatrix:saveTo:", v222, v225, v122);
        v123 = (__int128 *)objc_msgSend(a4, "modelViewMatrix", MRMatrix_Clear((uint64_t)v91->flippedModelViewMatrix));
        v124 = v123[3];
        v126 = *v123;
        v125 = v123[1];
        *(_OWORD *)&v91->flippedModelViewMatrix[8] = v123[2];
        *(_OWORD *)&v91->flippedModelViewMatrix[12] = v124;
        *(_OWORD *)v91->flippedModelViewMatrix = v126;
        *(_OWORD *)&v91->flippedModelViewMatrix[4] = v125;
        v127 = *(void **)(&v200->super._isInInteractiveMode + 1);
        v128 = +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"image%d_reflection",  v39);
        v129 = (MRCroppingSprite *)[v127 objectForKey:v128];
        if (!v129)
        {
          v129 = objc_alloc_init(&OBJC_CLASS___MRCroppingSprite);
          [v127 setObject:v129 forKey:v128];
        }

        -[MRCroppingSprite setNeedsInSpriteCoordinates:](v129, "setNeedsInSpriteCoordinates:", 1LL);
        -[MRCroppingSprite setHitIsActive:](v129, "setHitIsActive:", 0LL);
        -[MRCroppingSprite setSpriteCoordinatesFactor:](v129, "setSpriteCoordinatesFactor:", 1.0, -3.33333325);
        -[MRCroppingSprite setSpriteCoordinatesOffset:](v129, "setSpriteCoordinatesOffset:", 0.0, 1.0);
        -[MRCroppingSprite setInnerRect:](v129, "setInnerRect:", 0.0, 0.0, 1.0, 0.300000012);
        -[MRFlipupRenderable setReflectionSprite:](v91, "setReflectionSprite:", v129);
        v91->reflectionPosition.x = CGPointZero.x;
        v91->reflectionPosition.y = y + v97;
        [v42 releaseByUser];
        [a4 restoreModelViewMatrix:v224];
        -[NSMutableArray addObject:](obj, "addObject:", v91);

        id v6 = v200;
        v24 = v181;
        __int128 v18 = v184;
        __int128 v14 = v185;
        goto LABEL_138;
      }

      objc_msgSend(a4, "restoreModelViewMatrix:", v224, -1.0);
      [v42 releaseByUser];
      __int128 v18 = v184;
      __int128 v14 = v185;
      v40 = 0.5;
LABEL_138:
      ++v39;
    }

    while (v182 != v39);
  }

  [a4 restoreModelViewMatrix:v223];
  else {
    v130 = @"PlainTexture";
  }
  [a4 setShader:v130];
  -[MRTiledSprite renderImage:inContext:](v176, "renderImage:inContext:", v172, a4);

  [a4 unsetShader];
  [v172 releaseByUser];
  objc_msgSend(a4, "setModelViewMatrix:saveTo:", objc_msgSend(a4, "modelViewMatrix"), v218);
  -[NSMutableArray sortUsingDescriptors:](obj, "sortUsingDescriptors:", *(MRImage **)((char *)&v6->mTextImage + 1));
  v131 = BYTE2(v6->mSortDescriptors);
  if (BYTE2(v6->mSortDescriptors))
  {
    [a4 blend:3];
    v131 = BYTE2(v6->mSortDescriptors);
  }

  if ((v202 & 1) != 0)
  {
    if (v131) {
      v132 = @"FlipUpGradientFadeToColorBlend";
    }
    else {
      v132 = @"FlipUpGradientFadeToColor";
    }
    [a4 setShader:v132];
    v131 = BYTE2(v6->mSortDescriptors);
  }

  if (!v131)
  {
    v213 = 0u;
    v214 = 0u;
    v211 = 0u;
    v212 = 0u;
    v133 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( obj,  "countByEnumeratingWithState:objects:count:",  &v211,  v217,  16LL);
    if (v133)
    {
      v134 = v133;
      v135 = 0;
      v136 = *(void *)v212;
      v137 = v202;
      do
      {
        for (uint64_t i = 0LL; i != v134; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v212 != v136) {
            objc_enumerationMutation(obj);
          }
          v139 = *(void *)(*((void *)&v211 + 1) + 8LL * (void)i);
          v140 = *(double *)(v139 + 144);
          v141 = *(double *)(v139 + 152);
          v142 = *(void *)(v139 + 112);
          v143 = *(double *)(v139 + 104);
          v144 = *(double *)(v139 + 232);
          v145 = *(double *)(v139 + 240);
          v146 = *(void **)(v139 + 224);
          [a4 setModelViewMatrix:v139 + 160 saveTo:0];
          if ((v202 & 1) == 0)
          {
            if ((v137 & 1) == 0) {
              goto LABEL_159;
            }
            if (*(_BYTE *)(v139 + 25) != v135)
            {
              [a4 unsetShader];
LABEL_159:
              if (*(_BYTE *)(v139 + 25)) {
                v147 = @"FlipUpGradientFadeToColorHigh";
              }
              else {
                v147 = @"FlipUpGradientFadeToColor";
              }
              [a4 setShader:v147];
              v135 = *(_BYTE *)(v139 + 25) != 0;
            }

            v137 = 1;
          }

          v148 = v143 * 0.400000006;
          *(float *)&v148 = v143 * 0.400000006;
          [a4 setShaderUniformFloat:@"level" forKey:v148];
          LODWORD(v149) = 0;
          objc_msgSend( v146,  "renderImageInner:inContext:atPosition:andSize:zRotation:",  v142,  a4,  v144,  v145,  v140,  v141,  v149);
        }

        v134 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( obj,  "countByEnumeratingWithState:objects:count:",  &v211,  v217,  16LL);
      }

      while (v134);
    }
  }

  [a4 unsetShader];
  if ((v202 & 1) != 0)
  {
    if (BYTE2(v200->mSortDescriptors)) {
      v150 = @"FlipUpFadeToColorBlend";
    }
    else {
      v150 = @"FlipUpFadeToColor";
    }
    [a4 setShader:v150];
  }

  v209 = 0u;
  v210 = 0u;
  v207 = 0u;
  v208 = 0u;
  v151 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( obj,  "countByEnumeratingWithState:objects:count:",  &v207,  v216,  16LL);
  if (v151)
  {
    v152 = v151;
    v153 = 0;
    v154 = *(void *)v208;
    v155 = v202;
    do
    {
      for (j = 0LL; j != v152; j = (char *)j + 1)
      {
        if (*(void *)v208 != v154) {
          objc_enumerationMutation(obj);
        }
        v157 = *(void *)(*((void *)&v207 + 1) + 8LL * (void)j);
        v158 = *(double *)(v157 + 128);
        v159 = *(double *)(v157 + 136);
        v160 = *(double *)(v157 + 144);
        v161 = *(double *)(v157 + 152);
        [a4 setModelViewMatrix:v157 + 28 saveTo:0];
        v163 = *(void **)(v157 + 120);
        v164 = *(void *)(v157 + 112);
        v165 = *(double *)(v157 + 96);
        if ((v202 & 1) == 0)
        {
          if ((v155 & 1) == 0) {
            goto LABEL_180;
          }
          if (*(_BYTE *)(v157 + 25) != v153)
          {
            [a4 unsetShader];
LABEL_180:
            if (*(_BYTE *)(v157 + 25)) {
              v166 = @"FlipUpFadeToColorHigh";
            }
            else {
              v166 = @"FlipUpFadeToColor";
            }
            [a4 setShader:v166];
            v153 = *(_BYTE *)(v157 + 25) != 0;
          }

          v155 = 1;
        }

        *(float *)&v162 = v165;
        [a4 setShaderUniformFloat:@"level" forKey:v162];
        if (BYTE2(v200->mSortDescriptors)
          && -[NSString isEqualToString:]( -[MRLayerEffect editedElement](v200->super.mEffectLayer, "editedElement"),  "isEqualToString:",  @"text0")
          && -[MRLayerEffect _hideTextWhileEditing](v200->super.mEffectLayer, "_hideTextWhileEditing"))
        {
          LODWORD(v167) = 0;
          objc_msgSend(v163, "fakeRenderInContext:atPosition:andSize:zRotation:", a4, v158, v159, v160, v161, v167);
        }

        else
        {
          LODWORD(v167) = 0;
          objc_msgSend( v163,  "renderImage:inContext:atPosition:andSize:zRotation:",  v164,  a4,  v158,  v159,  v160,  v161,  v167);
        }
      }

      v152 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( obj,  "countByEnumeratingWithState:objects:count:",  &v207,  v216,  16LL);
    }

    while (v152);
  }

  [a4 unsetShader];
  if (BYTE2(v200->mSortDescriptors)) {
    [a4 blend:0];
  }
  v205 = 0u;
  v206 = 0u;
  v203 = 0u;
  v204 = 0u;
  v168 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( obj,  "countByEnumeratingWithState:objects:count:",  &v203,  v215,  16LL);
  if (v168)
  {
    v169 = v168;
    v170 = *(void *)v204;
    do
    {
      for (k = 0LL; k != v169; k = (char *)k + 1)
      {
        if (*(void *)v204 != v170) {
          objc_enumerationMutation(obj);
        }
        [*(id *)(*(void *)(*((void *)&v203 + 1) + 8 * (void)k) + 112) removingFromCollection];
      }

      v169 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( obj,  "countByEnumeratingWithState:objects:count:",  &v203,  v215,  16LL);
    }

    while (v169);
  }

  [a4 restoreModelViewMatrix:v218];
}

  v134.receiver = self;
  v134.super_class = (Class)&OBJC_CLASS___MREffectScrapbook;
  -[MREffect prerenderForTime:inContext:withArguments:](&v134, "prerenderForTime:inContext:withArguments:", v6, a5, a3);
  v130 = 0u;
  v131 = 0u;
  v132 = 0u;
  v133 = 0u;
  v91 = [*(id *)((char *)&self->super.super.isa + v11[212]) objectEnumerator];
  v92 = [v91 countByEnumeratingWithState:&v130 objects:v144 count:16];
  if (v92)
  {
    v93 = v92;
    v94 = *(void *)v131;
    do
    {
      for (k = 0LL; k != v93; k = (char *)k + 1)
      {
        if (*(void *)v131 != v94) {
          objc_enumerationMutation(v91);
        }
        [*(id *)(*((void *)&v130 + 1) + 8 * (void)k) prerenderForTime:v6 inContext:a5 withArguments:a3];
      }

      v93 = [v91 countByEnumeratingWithState:&v130 objects:v144 count:16];
    }

    while (v93);
  }

  v96 = v6;
  if (!-[MRLayer isActivated](self->super.mEffectLayer, "isActivated")) {
    goto LABEL_89;
  }
  v98 = [a5 preloadQueue];
  if ([v98 operationCount]
    && (v128 = 0u,
        v129 = 0u,
        v126 = 0u,
        v127 = 0u,
        v99 = [v98 operations],
        (v100 = [v99 countByEnumeratingWithState:&v126 objects:v143 count:16]) != 0))
  {
    v101 = v100;
    v102 = *(void *)v127;
LABEL_75:
    v103 = 0LL;
    while (1)
    {
      if (*(void *)v127 != v102) {
        objc_enumerationMutation(v99);
      }
      if ([*(id *)(*((void *)&v126 + 1) + 8 * v103) queuePriority] == &dword_8) {
        break;
      }
      if (v101 == (id)++v103)
      {
        v101 = [v99 countByEnumeratingWithState:&v126 objects:v143 count:16];
        if (v101) {
          goto LABEL_75;
        }
        goto LABEL_81;
      }
    }
  }

  else
  {
LABEL_81:
    [a5 unalteredTime];
    if (v104 >= 1.0)
    {
      v105 = self->super.mPhaseInDuration + self->super.mMainDuration + self->super.mPhaseOutDuration + -2.5 <= a3
          || a3 < 2.0;
      if (-[MRLayerEffect asynchronousOperationsAreSuspended]( self->super.mEffectLayer,  "asynchronousOperationsAreSuspended") != v105) {
        goto LABEL_88;
      }
      goto LABEL_89;
    }
  }

  if (-[MRLayerEffect asynchronousOperationsAreSuspended]( self->super.mEffectLayer,  "asynchronousOperationsAreSuspended"))
  {
    v105 = 0LL;
LABEL_88:
    -[MRLayerEffect suspendAsynchronousOperations:](self->super.mEffectLayer, "suspendAsynchronousOperations:", v105);
  }

            v67 = v55 - v30;
            v68 = (a4 - v30) / (v55 - v30);
            [v25 postControl];
            v70 = v69;
            [v26 preControl];
            v72 = v30 + Spline1(v68, 0.0, v70, v71 + 1.0, 1.0, 0.0, 0.0, 1.0, 1.0) * v67 - v30;
            v73 = 0.0;
            if (v72 > 0.0) {
              v73 = v72 / v67;
            }
            return (float)(v38 + (float)((float)(v58 - v38) * v73));
          }
        }

LABEL_115:
  v105 = v72 + randomFloatInRange(v58, v70) * v108;
  v107 = v72;
  v104 = randomFloatInRange(v69, v68);
  v73 = v112 * (v50 * v108);
  v113 = 0.0;
  v74 = (v115 - CenterRectOverRect(0.0, 0.0, v111 * (v50 * v108), v73, v115, v114, v117, v116)) / v117;
  v78 = v77 > v117;
  if (v77 <= v117) {
    v79 = -v74;
  }
  else {
    v79 = v74;
  }
  if (v78) {
    v74 = -v74;
  }
  v80 = (v114 - v75) / v116;
  v81 = v76 > v116;
  if (v76 <= v116) {
    v82 = -v80;
  }
  else {
    v82 = v80;
  }
  if (v81) {
    v80 = -v80;
  }
  v83 = v67 * v74;
  v84 = v67 * v80;
  v85 = v67 * v79;
  if (v118 < 6.0) {
    v86 = v67 * v82;
  }
  else {
    v86 = v82;
  }
  if (v118 < 6.0) {
    v87 = v84;
  }
  else {
    v87 = v80;
  }
  if (v118 < 6.0) {
    v88 = v85;
  }
  else {
    v88 = v79;
  }
  if (v118 < 6.0) {
    v74 = v83;
  }
  v89 = 0.0;
  if ((v20 & 1) == 0)
  {
    v113 = v108 * randomFloatInRange(v74, v88);
    v89 = v108 * randomFloatInRange(v87, v86);
  }

  v90 = v71 + v104 * v108;
  v91 = 1.0;
  v92 = 1.0;
  if (v105 <= 1.0)
  {
    v92 = v105;
    if (v105 < 0.0) {
      v92 = 0.0;
    }
  }

  v93 = v107 + v113;
  v94 = v50;
  if (v90 <= 1.0)
  {
    v91 = v71 + v104 * v108;
    if (v90 < 0.0) {
      v91 = 0.0;
    }
  }

  v95 = v71 + v89;
  v96 = 1.0;
  v97 = 1.0;
  if (v93 <= 1.0)
  {
    v97 = v107 + v113;
    if (v93 < 0.0) {
      v97 = 0.0;
    }
  }

  if (v95 <= 1.0)
  {
    v96 = v71 + v89;
    if (v95 < 0.0) {
      v96 = 0.0;
    }
  }

  v98 = +[MPAnimationPathKeyframed animationPath](&OBJC_CLASS___MPAnimationPathKeyframed, "animationPath");
  v99 = v98;
  if (v49 >= v50) {
    v100 = v50;
  }
  else {
    v100 = v49;
  }
  if (v49 >= v50) {
    v101 = v49;
  }
  else {
    v101 = v50;
  }
  if (!v20) {
    v100 = v49;
  }
  v102 = v110 * v100;
  if (v20) {
    v94 = v101;
  }
  [v98 createKeyframeWithScalar:v102 atTime:0.0];
  [v99 createKeyframeWithScalar:v110 * v94 atTime:1.0];
  [a3 setAnimationPath:v99 forKey:@"scale"];
  v103 = +[MPAnimationPathKeyframed animationPath](&OBJC_CLASS___MPAnimationPathKeyframed, "animationPath");
  objc_msgSend(v103, "createKeyframeWithPoint:atTime:", v92, v91, 0.0);
  objc_msgSend(v103, "createKeyframeWithPoint:atTime:", v97, v96, 1.0);
  [a3 setAnimationPath:v103 forKey:@"center"];
  [a3 removeAnimationPathForKey:@"angle"];
}
                }

                v68 = [v156 countByEnumeratingWithState:&v185 objects:v206 count:16];
              }

              while (v68);
            }
          }
        }

        v80 = [v157 count];

        __int128 v14 = v154;
        v28 = v155;
        if (v80)
        {
          v81 = 0;
        }

        else
        {
LABEL_234:
          if ([v28 count])
          {
            v158 = [v28 mutableCopy];
            v164 = [a11 mutableCopy];
            v177 = 0u;
            v178 = 0u;
            v179 = 0u;
            v180 = 0u;
            v82 = [v28 countByEnumeratingWithState:&v177 objects:v204 count:16];
            if (v82)
            {
              v83 = v82;
              v161 = *(void *)v178;
              do
              {
                for (n = 0LL; n != v83; n = (char *)n + 1)
                {
                  if (*(void *)v178 != v161) {
                    objc_enumerationMutation(v155);
                  }
                  v85 = *(void **)(*((void *)&v177 + 1) + 8LL * (void)n);
                  [v85 floatValue];
                  v87 = v86;
                  v88 = [v164 copy];
                  v173 = 0u;
                  v174 = 0u;
                  v175 = 0u;
                  v176 = 0u;
                  v89 = [a11 countByEnumeratingWithState:&v173 objects:v203 count:16];
                  if (v89)
                  {
                    v90 = v89;
                    v91 = *(void *)v174;
                    do
                    {
                      for (iuint64_t i = 0LL; ii != v90; iuint64_t i = (char *)ii + 1)
                      {
                        if (*(void *)v174 != v91) {
                          objc_enumerationMutation(a11);
                        }
                        v93 = *(void **)(*((void *)&v173 + 1) + 8LL * (void)ii);
                        [v93 floatValue];
                        v95 = v94 < 1.0;
                        if (v87 >= 1.0) {
                          v95 = 0;
                        }
                        if (v94 >= 1.0 && v87 >= 1.0) {
                          v95 = 1;
                        }
                        if (v94 > v87 && v95)
                        {
                          [v164 removeObject:v93];
                          [v158 removeObject:v85];
                          goto LABEL_144;
                        }
                      }

                      v90 = [a11 countByEnumeratingWithState:&v173 objects:v203 count:16];
                    }

                    while (v90);
                  }

LABEL_45:
  v47 = *v46;
  [a3 setSizingMode:*v46];
  if (!v47)
  {
    v49 = v38;
LABEL_53:
    v48 = v39;
    goto LABEL_54;
  }

  v48 = 0.649999976;
  v49 = 0.649999976;
  if (v38 <= 0.649999976)
  {
    v49 = v38;
    if (v38 < 0.349999994) {
      v49 = 0.349999994;
    }
  }

  if (v39 <= 0.649999976)
  {
    v48 = 0.349999994;
    if (v39 >= 0.349999994) {
      goto LABEL_53;
    }
  }

        [v48 duration];
        __int128 v16 = v16 + v40;
LABEL_46:
        v22 = v49 + 1;
      }

      while ((id)(v49 + 1) != v47);
      v41 = [obj countByEnumeratingWithState:&v62 objects:v72 count:16];
      v47 = v41;
    }

    while (v41);
  }

  id result = v17 + v16;
  if (v8 > v17 + v16 && v10 == -1.0 && v8 != -1.0) {
    return v8;
  }
  return result;
}

    -[MREffect isInInteractiveMode](self, "isInInteractiveMode");
    goto LABEL_46;
  }

  v44 = 0;
LABEL_52:
  v45 = -[MREffect isInInteractiveMode](self, "isInInteractiveMode");
  v26 = 1;
  if (!v44 && (v45 & 1) == 0)
  {
    if (BYTE1(self->mCurrentInfo)) {
      v46 = v38;
    }
    else {
      v46 = 1;
    }
    if ((v46 & 1) != 0)
    {
      v26 = 0;
    }

    else
    {
      v47 = -[NSDictionary count]( -[MRLayerEffect slideProvidersForElementIDs](self->super.mEffectLayer, "slideProvidersForElementIDs"),  "count");
      if (v47 >= 1)
      {
        v48 = v47;
        v49 = 0LL;
        v50 = a3 + -0.666;
        v51 = v28 + -1.0;
        v52 = 2.0;
        while (1)
        {
          v53 = -[NSDictionary objectForKey:]( -[MRLayerEffect slideProvidersForElementIDs](self->super.mEffectLayer, "slideProvidersForElementIDs"),  "objectForKey:",  ImageKey(v49));
          [v53 imageAspectRatio];
          if (v54 < 0.5 || v54 > v52)
          {
            v49 %= (unint64_t)[*(id *)(&self->mIsLoaded + 1) count];
            v96 = CGRectFromString((NSString *)objc_msgSend( objc_msgSend(*(id *)(&self->mIsLoaded + 1), "objectAtIndex:", v49),  "objectForKey:",  @"rect"));
            width = v96.size.width;
            height = v96.size.height;
            if (v48 == 1)
            {
              objc_msgSend(v53, "imageAspectRatio", v96.origin.x, v96.origin.y);
              -[MREffectSlidingPanels _sizeForBreakAspectRatio:size:inContext:]( self,  "_sizeForBreakAspectRatio:size:inContext:",  a4);
              width = v58;
              height = v59;
            }

            [a4 localAspectRatio];
            v61 = width / height * v60;
            [v53 imageAspectRatio];
            v62 = 1.0;
            v64 = v63 < 1.0;
            v65 = v61 / v63;
            v66 = v63 / v61;
            if (!v64) {
              v66 = v65;
            }
            v67 = fmin(v66, 0.5);
            v68 = 1.0 / v67;
            v69 = ceilf(v68) + 1.0;
            if (v69 > 1.0)
            {
              v70 = v69;
              v71 = 2LL;
              v52 = 2.0;
              while (1)
              {
                v72 = v67 * v62;
                if (v50 >= v72 * v51 + -0.5 + -0.5 && v50 < v72 * v51 + 0.5 + 0.100000001) {
                  break;
                }
                v62 = (double)v71++;
                if (v62 >= v70) {
                  goto LABEL_76;
                }
              }

  *(_WORD *)(a4 + 20) = word_1FB980[v9];
  return result;
}

    operator delete[](v13);
    return (uint64_t)v15;
  }

  if (v14) {
    operator delete[](v14);
  }
  __int128 v15 = 0LL;
  uint64_t v8 = 0LL;
  if (v13) {
    goto LABEL_45;
  }
  return v8;
}

    operator delete[](v13);
    return (uint64_t)v15;
  }

  if (v14) {
    operator delete[](v14);
  }
  __int128 v15 = 0LL;
  uint64_t v8 = 0LL;
  if (v13) {
    goto LABEL_45;
  }
  return v8;
}

  *(_WORD *)(a4 + 20) = word_1FB980[v9];
  return result;
}

    operator delete[](v13);
    return (uint64_t)v15;
  }

  if (v14) {
    operator delete[](v14);
  }
  __int128 v15 = 0LL;
  uint64_t v8 = 0LL;
  if (v13) {
    goto LABEL_45;
  }
  return v8;
}

    operator delete[](v13);
    return (uint64_t)v15;
  }

  if (v14) {
    operator delete[](v14);
  }
  __int128 v15 = 0LL;
  uint64_t v8 = 0LL;
  if (v13) {
    goto LABEL_45;
  }
  return v8;
}

  v51.receiver = self;
  v51.super_class = (Class)&OBJC_CLASS___MREffectPhotoEdges;
  -[MREffect prerenderForTime:inContext:withArguments:](&v51, "prerenderForTime:inContext:withArguments:", a4, v5, a3);
  [*(id *)((char *)&self->super.super.isa + v9[339]) prerenderForTime:a4 inContext:v5 withArguments:a3];
  if (-[NSString hasSuffix:](self->super.mEffectID, "hasSuffix:", @"Break"))
  {
    v44 = 0LL;
    v45 = (char *)&self->mFrameProvider + 1;
    do
    {
      [*(id *)&v45[v44] prerenderForTime:a4 inContext:v5 withArguments:a3];
      v44 += 8LL;
    }

    while (v44 != 96);
  }

  return 1;
}

void sub_64B70(_Unwind_Exception *exception_object)
{
}

void sub_64F1C(_Unwind_Exception *a1)
{
}

void sub_65018(_Unwind_Exception *a1)
{
}

void sub_65090(_Unwind_Exception *a1)
{
}

void sub_65224(_Unwind_Exception *a1)
{
}

void sub_653C4(_Unwind_Exception *a1)
{
}

void sub_655BC(_Unwind_Exception *a1)
{
}

void sub_65858( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
}

void sub_65CE4(_Unwind_Exception *a1)
{
}

void sub_65FFC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
}

void sub_662F8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
}

void sub_66548(_Unwind_Exception *exception_object)
{
}

void sub_665E4(_Unwind_Exception *a1)
{
}

void sub_666CC(_Unwind_Exception *a1)
{
}

void sub_66740(_Unwind_Exception *a1)
{
}

void sub_668D4(_Unwind_Exception *a1)
{
}

void sub_66A74(_Unwind_Exception *a1)
{
}

void sub_66F48(_Unwind_Exception *a1)
{
}

void sub_67314(_Unwind_Exception *a1)
{
}

void sub_67624( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
}

void sub_6786C(_Unwind_Exception *exception_object)
{
}

void sub_678E0(_Unwind_Exception *a1)
{
}

void sub_679A0(_Unwind_Exception *a1)
{
}

void sub_67A5C(_Unwind_Exception *a1)
{
}

void sub_67AB8(_Unwind_Exception *a1)
{
}

void sub_67B2C(_Unwind_Exception *a1)
{
}

void sub_67DF4(_Unwind_Exception *a1)
{
}

void sub_67FC8(_Unwind_Exception *a1)
{
}

void sub_68054(_Unwind_Exception *a1)
{
}

void sub_680F4(_Unwind_Exception *a1)
{
}

void sub_681A8(_Unwind_Exception *a1)
{
}

void sub_68248(_Unwind_Exception *a1)
{
}

void sub_682D4(_Unwind_Exception *a1)
{
}

void sub_6CB30(uint64_t a1)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_6CBF0;
  block[3] = &unk_24DEA0;
  char v4 = *(_BYTE *)(a1 + 48);
  __int128 v3 = *(_OWORD *)(a1 + 32);
  dispatch_async(&_dispatch_main_q, block);
}

id sub_6CBF0(uint64_t a1)
{
  v2[0] = _NSConcreteStackBlock;
  v2[1] = 3221225472LL;
  v2[2] = sub_6CC54;
  v2[3] = &unk_24DEA0;
  char v3 = *(_BYTE *)(a1 + 48);
  return [*(id *)(a1 + 32) enterMarimbaWithDuration:v2 andCompletionBlock:0.5];
}

uint64_t sub_6CC54(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 48)) {
    [*(id *)(*(void *)(a1 + 32) + 48) play];
  }
  uint64_t result = *(void *)(a1 + 40);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

uint64_t sub_6CDCC(uint64_t a1)
{
  *(_BYTE *)(*(void *)(a1 + 32) + 41LL) = 1;
  *(void *)(*(void *)(a1 + 32) + 32LL) = 0LL;
  uint64_t v2 = *(void *)(a1 + 32);
  if (*(_BYTE *)(v2 + 42)) {
    [*(id *)(v2 + 24) setHidden:1];
  }
  if (-[NSUserDefaults objectForKey:]( +[NSUserDefaults standardUserDefaults](&OBJC_CLASS___NSUserDefaults, "standardUserDefaults"),  "objectForKey:",  @"touchVisualFeedback"))
  {
    BOOL v3 = -[NSUserDefaults BOOLForKey:]( +[NSUserDefaults standardUserDefaults](&OBJC_CLASS___NSUserDefaults, "standardUserDefaults"),  "BOOLForKey:",  @"touchVisualFeedback");
  }

  else
  {
    BOOL v3 = 0LL;
  }

  objc_msgSend(objc_msgSend(*(id *)(*(void *)(a1 + 32) + 48), "renderer"), "setDisplaysTouchVisualFeedback:", v3);
  if (-[NSUserDefaults objectForKey:]( +[NSUserDefaults standardUserDefaults](&OBJC_CLASS___NSUserDefaults, "standardUserDefaults"),  "objectForKey:",  @"MRDisplaysPlayingIDs"))
  {
    BOOL v4 = -[NSUserDefaults BOOLForKey:]( +[NSUserDefaults standardUserDefaults](&OBJC_CLASS___NSUserDefaults, "standardUserDefaults"),  "BOOLForKey:",  @"MRDisplaysPlayingIDs");
  }

  else
  {
    BOOL v4 = 0LL;
  }

  objc_msgSend(objc_msgSend(*(id *)(*(void *)(a1 + 32) + 48), "renderer"), "setDisplaysPlayingIDs:", v4);
  if (-[NSUserDefaults objectForKey:]( +[NSUserDefaults standardUserDefaults](&OBJC_CLASS___NSUserDefaults, "standardUserDefaults"),  "objectForKey:",  @"MRDisplaysFPS"))
  {
    BOOL v5 = -[NSUserDefaults BOOLForKey:]( +[NSUserDefaults standardUserDefaults](&OBJC_CLASS___NSUserDefaults, "standardUserDefaults"),  "BOOLForKey:",  @"MRDisplaysFPS");
  }

  else
  {
    BOOL v5 = 0LL;
  }

  objc_msgSend(objc_msgSend(*(id *)(*(void *)(a1 + 32) + 48), "renderer"), "setDisplaysFPS:", v5);
  [*(id *)(*(void *)(a1 + 32) + 8) setUserInteractionEnabled:1];
  *(_BYTE *)(*(void *)(a1 + 32) + 40LL) = 0;
  uint64_t result = *(void *)(a1 + 40);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

id sub_6D29C(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 24) setAlpha:1.0];
}

id sub_6D2DC(uint64_t a1)
{
  return [*(id *)(a1 + 32) hideHUD];
}

id sub_6D39C(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 24) setAlpha:0.0];
}

void *sub_6D3B4(void *result)
{
  uint64_t v1 = result[4];
  if (!*(void *)(v1 + 32)) {
    return [*(id *)(v1 + 24) setHidden:1];
  }
  return result;
}

unint64_t ComputeNumberOfSegments(double a1)
{
  if (a1 >= 3.0)
  {
    float v6 = a1 / 1.5;
    return vcvtps_u32_f32(v6);
  }

  else
  {
    BOOL v2 = a1 == 0.454545455;
    BOOL v1 = a1 >= 0.454545455;
    float v3 = 1.0 / a1;
    unint64_t v4 = vcvtps_u32_f32(v3);
    if (!v2 && v1) {
      return 1LL;
    }
    else {
      return v4;
    }
  }

float alphaFunction(float a1)
{
  BOOL v2 = a1 < 1.5;
  float v3 = fmin(a1 + -2.5, 0.0);
  double v4 = (float)((float)((float)((float)(v3 + v3) * v3) * v3) + (float)((float)(v3 * 3.0) * v3));
  if (v2) {
    double v5 = 1.0;
  }
  else {
    double v5 = v4;
  }
  double v6 = cosf(a1 * 5.0) * 0.7;
  return v6 / (powf(a1, 5.0) + 1.0) * v5;
}

float X(float a1, float a2, float a3, float a4)
{
  float v7 = fmax(a2 + a3 * -0.1, 0.0);
  float v8 = alphaFunction(v7) * a1;
  return v8 * coshf(a3 + a4);
}

float Xp(float a1, float a2, float a3, float a4)
{
  float v5 = fmax(a2 + a3 * -0.1, 0.0);
  return (float)(alphaFunction(v5) * a1) / sqrtf((float)((float)(a3 + a4) * (float)(a3 + a4)) + 1.0);
}

float Function(float a1, float a2, float a3, float a4, float a5)
{
  float v9 = fmax(a2 + a3 * -0.1, 0.0);
  float v10 = alphaFunction(v9);
  float v11 = sqrtf((float)((float)(a3 + a4) * (float)(a3 + a4)) + 1.0);
  return sqrtf((float)(a1 * a1) - (float)((float)((float)(v10 * a1) / v11) * (float)((float)(v10 * a1) / v11))) * a5;
}

LABEL_20:
  v5 &= [*(id *)((char *)&self->mPhotoFrameImageProviders[1] + 1) isLoaded];
  if ((*(_WORD *)&self->mScenario[3] & 0x1000) != 0) {
LABEL_5:
  }
    v5 &= [*(id *)((char *)&self->mPhotoFrameImageProviders[2] + 1) isLoaded];
LABEL_6:
  v21 = 0u;
  v22 = 0u;
  BOOL v19 = 0u;
  double v20 = 0u;
  float v7 = *(void **)((char *)&self->mBaseStillDuration + 1);
  float v8 = [v7 countByEnumeratingWithState:&v19 objects:v23 count:16];
  if (v8)
  {
    float v9 = v8;
    float v10 = *(void *)v20;
    do
    {
      for (uint64_t i = 0LL; i != v9; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v20 != v10) {
          objc_enumerationMutation(v7);
        }
        __int128 v12 = *(void **)(*((void *)&v19 + 1) + 8LL * (void)i);
        [v12 showTime];
        if (v13 <= a3)
        {
          [v12 showTime];
          __int128 v15 = v14;
          [v12 showDuration];
          if (v15 + v16 > a3 || ([v12 showDuration], v17 < 0.0)) {
            v5 &= [v12 isLoaded];
          }
        }
      }

      float v9 = [v7 countByEnumeratingWithState:&v19 objects:v23 count:16];
    }

    while (v9);
  }

  return v5 & 1;
}

    __int128 v17 = 0LL;
    goto LABEL_21;
  }

  __int128 v17 = +[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array", v15);
  CFRelease(v8);
LABEL_21:
  objc_autoreleasePoolPop(v5);
  return v17;
}

    __int128 v17 = [v9 stringByAppendingPathComponent:+[NSString stringWithFormat:]( NSString, "stringWithFormat:", @"media/%@", objc_msgSend(a3, "substringFromIndex:", 6))];
    if (-[NSFileManager fileExistsAtPath:]( +[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager"),  "fileExistsAtPath:",  v17)
      || !-[NSArray count](v8, "count"))
    {
      v22 = 0LL;
    }

    else
    {
      __int128 v18 = 0LL;
      BOOL v19 = -1LL;
      do
      {
        double v20 = v19;
        __int128 v17 = [v9 stringByAppendingPathComponent:+[NSString stringWithFormat:]( NSString, "stringWithFormat:", @"media/%d-%@", objc_msgSend( -[NSArray objectAtIndex:](v8, "objectAtIndex:", (char *)-[NSArray count](v8, "count") + v19), "intValue"), objc_msgSend(a3, "substringFromIndex:", 6))];
        if (-[NSFileManager fileExistsAtPath:]( +[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager"),  "fileExistsAtPath:",  v17))
        {
          break;
        }

        ++v18;
        v21 = -[NSArray count](v8, "count");
        BOOL v19 = v20 - 1;
      }

      while (v18 < v21);
      v22 = -v20;
    }

    if (v22 >= -[NSArray count](v8, "count")) {
      return 0LL;
    }
    else {
      return v17;
    }
  }

  __int128 v15 = -[MPDocument cachedAbsolutePathFromPath:](self, "cachedAbsolutePathFromPath:", a3);
  if (v15) {
    return v15;
  }
  if (-[MPDocument assetKeyDelegate](self, "assetKeyDelegate"))
  {
    __int128 v16 = objc_msgSend( -[MPDocument assetKeyDelegate](self, "assetKeyDelegate"),  "absolutePathForAssetKey:andSize:",  a3,  width,  height);
    if (v16)
    {
      __int128 v15 = v16;
      -[MPDocument setAbsolutePath:forKey:](self, "setAbsolutePath:forKey:", v16, a3);
      return v15;
    }
  }

  return objc_msgSend( +[MPAssetManager sharedManager](MPAssetManager, "sharedManager"),  "absolutePathFromPath:",  a3);
}
    }
  }

  BOOL v19 = (float *)(*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 24) + 16LL))( *(void *)(a1 + 24),  a2,  a3);
  double v20 = (float *)(*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 16) + 16LL))( *(void *)(a1 + 16),  a2,  a3);
  v21 = v20;
  if (v20) {
    v22 = v19 == 0LL;
  }
  else {
    v22 = 1;
  }
  if (!v22)
  {
    if ((int)a3 >= 1)
    {
      for (uint64_t i = 0LL; a3 != i; ++i)
      {
        if (!*(_BYTE *)(a2 + i))
        {
          v27 = v21[i];
          if (v27 > 0.0)
          {
            v28 = powf(v27, v19[i]);
LABEL_51:
            v21[i] = v28;
            continue;
          }

          if (v27 < 0.0)
          {
            v28 = pow(v27, (double)(uint64_t)v19[i]);
            goto LABEL_51;
          }
        }
      }
    }

  [a4 setShader:@"PlainTexture"];
  *(float *)&v47 = v16;
  [v43 setOnContext:a4 onTextureUnit:0 withReferenceAspectRatio:&v49 state:v47];
  [a4 setTextureCoordinatesPointer:v50 onTextureUnit:0];
  [a4 setVertex3DPointer:v52];
  [a4 drawTriangleStripFromOffset:0 count:6 * self->_numberOfElements];
  [v43 unsetOnContext:a4 onTextureUnit:0 state:&v49];
  *(float *)&v48 = v16;
  [v46 setOnContext:a4 onTextureUnit:0 withReferenceAspectRatio:&v49 state:v48];
  [a4 setVertex3DPointer:v51];
  [a4 drawTriangleStripFromOffset:0 count:6 * self->_numberOfElements];
  [a4 unsetVertexPointer];
  [a4 unsetTextureCoordinatesPointerOnTextureUnit:0];
  [v46 unsetOnContext:a4 onTextureUnit:0 state:&v49];
  [a4 unsetShader];
  [v46 releaseByUser];
  [v43 releaseByUser];
  [a4 depthTest:0];
}

    CFRelease(Frame);
    CFRelease(Mutable);
    CFRelease(v12);
    Attribute = (void *)CFAttributedStringGetAttribute( (CFAttributedStringRef)-[MRTextRenderer text](self, "text"),  0LL,  @"shadow",  0LL);
    if (Attribute)
    {
      v41 = Attribute;
      v42 = CGSizeFromString((NSString *)[Attribute objectForKey:@"offset"]);
      v43 = v42.width;
      v44 = v42.height;
      objc_msgSend(objc_msgSend(v41, "objectForKey:", @"blurRadius"), "floatValue");
      __int128 v17 = v45;
    }

    else
    {
      v43 = CGSizeZero.width;
      v44 = CGSizeZero.height;
    }

    v46 = v17 - v43;
    if (v43 >= 0.0) {
      v46 = v17;
    }
    v47 = v17 - v44;
    if (v44 >= 0.0) {
      v47 = v17;
    }
    float v7 = v14 * (y + v47);
    double v6 = v14 * (x + v46);
    float v8 = v14 * v23;
    float v9 = v14 * height;
  }

  else
  {
    a4->location = lastGlyphIndex + 1;
    a4->length = 0LL;
    double v6 = CGRectZero.origin.x;
    float v7 = CGRectZero.origin.y;
    float v8 = CGRectZero.size.width;
    float v9 = CGRectZero.size.height;
  }

  result.size.height = v9;
  result.size.width = v8;
  result.origin.y = v7;
  result.origin.x = v6;
  return result;
}

LABEL_53:
  v49 = -[MRLayerEffect asynchronousOperationsAreSuspended]( self->super.mEffectLayer,  "asynchronousOperationsAreSuspended",  v45,  v46);
  v50 = v47 < 0.5 && v47 > 0.0;
  v51 = [a5 preloadQueue];
  v52 = a3 >= 0.06 && !v50;
  if (v52 || ![v51 operationCount])
  {
    if (v49 != v50) {
      goto LABEL_64;
    }
  }

  else
  {
    -[MRLayerEffect _stallRenderer](self->super.mEffectLayer, "_stallRenderer");
    if ((v49 & 1) != 0)
    {
      v50 = 0LL;
LABEL_64:
      -[MRLayerEffect suspendAsynchronousOperations:](self->super.mEffectLayer, "suspendAsynchronousOperations:", v50);
    }
  }

  return 1;
}

  v30 = self->mSlidePlayer;
  if (v30)
  {
    v31 = BYTE2(self->mFlags);
    if ((v31 & 4) != 0)
    {
      if (self->_audioDucker)
      {
        -[MRLayerEffect _removeAudioDucker:](self->mEffectLayer, "_removeAudioDucker:");
        v30 = self->mSlidePlayer;
      }

      if (-[MRAssetPlayer conformsToProtocol:]( v30,  "conformsToProtocol:",  &OBJC_PROTOCOL___MRAudioPlayer))
      {
        v32 = self->mSlidePlayer;
        slide = self->_slide;
        if (slide)
        {
          -[MCSlide audioVolume](slide, "audioVolume");
          -[MRAssetPlayer setVolume:](v32, "setVolume:", v34);
          -[MCSlide audioFadeInDuration](self->_slide, "audioFadeInDuration");
          -[MRAssetPlayer setFadeInDuration:](v32, "setFadeInDuration:");
          -[MCSlide audioFadeOutDuration](self->_slide, "audioFadeOutDuration");
          v36 = v35;
        }

        else
        {
          v36 = 1.0;
          -[MRAssetPlayer setVolume:](self->mSlidePlayer, "setVolume:", 1.0);
          -[MRAssetPlayer setFadeInDuration:](v32, "setFadeInDuration:", 1.0);
        }

        -[MRAssetPlayer setFadeOutDuration:](v32, "setFadeOutDuration:", v36);
        -[MRAssetPlayer setIsMuted:](v32, "setIsMuted:", (BYTE1(self->mFlags) >> 5) & 1);
        if (!self->_audioDucker) {
          self->_audioDucker = objc_alloc_init(&OBJC_CLASS___MRAudioDucker);
        }
        -[MRAssetPlayer duration](v32, "duration");
        -[MRAudioDucker setDuration:](self->_audioDucker, "setDuration:");
        v40 = self->_audioDucker;
        if (v40)
        {
          if (self->_slide)
          {
            -[MCSlide audioDuckLevel](self->_slide, "audioDuckLevel");
            -[MRAudioDucker setDuckLevel:](self->_audioDucker, "setDuckLevel:", v41);
            -[MCSlide audioDuckInDuration](self->_slide, "audioDuckInDuration");
            -[MRAudioDucker setDuckInDuration:](self->_audioDucker, "setDuckInDuration:");
            -[MCSlide audioDuckOutDuration](self->_slide, "audioDuckOutDuration");
            v43 = v42;
          }

          else
          {
            -[MRAudioDucker setDuckLevel:](v40, "setDuckLevel:", 0.25);
            v43 = 1.0;
            -[MRAudioDucker setDuckInDuration:](self->_audioDucker, "setDuckInDuration:", 1.0);
          }

          -[MRAudioDucker setDuckOutDuration:](self->_audioDucker, "setDuckOutDuration:", v43);
          -[MRAudioDucker setParentDuration:](self->_audioDucker, "setParentDuration:", self->_showDuration);
          mEffectLayer = self->mEffectLayer;
          for (uint64_t i = mEffectLayer;
                -[MRLayer superlayer](-[MRLayer superlayer](i, "superlayer"), "superlayer");
                mEffectLayer = i)
          {
            uint64_t i = -[MRLayer superlayer](mEffectLayer, "superlayer");
          }

          -[MRAudioDucker setPriority:]( self->_audioDucker,  "setPriority:",  -[MCPlugParallel audioPriority](-[MRLayer plugAsParallel](mEffectLayer, "plugAsParallel"), "audioPriority"));
          -[MRLayerEffect _addAudioDucker:](self->mEffectLayer, "_addAudioDucker:", self->_audioDucker);
        }
      }

      else
      {
        v39 = self->_audioDucker;
        if (v39)
        {

          self->_audioDucker = 0LL;
        }
      }

      v31 = BYTE2(self->mFlags) & 0xFB;
      BYTE2(self->mFlags) = v31;
    }

    if ((v31 & 8) != 0
      && -[MRAssetPlayer conformsToProtocol:]( self->mSlidePlayer,  "conformsToProtocol:",  &OBJC_PROTOCOL___MRAssetPlayerTimeSupport))
    {
      -[MRAssetPlayer setStartTime:](self->mSlidePlayer, "setStartTime:", self->_slideStartTime);
      -[MRAssetPlayer setDuration:](self->mSlidePlayer, "setDuration:", self->_slideDuration);
      v46 = self->_audioDucker;
      if (v46) {
        -[MRAudioDucker setDuration:](v46, "setDuration:", self->_slideDuration);
      }
      BYTE2(self->mFlags) &= ~8u;
    }

    v47 = self->_audioDucker;
    if (v47) {
      -[MRAudioDucker setTime:](v47, "setTime:", v10);
    }
  }

  else
  {
    v37 = self->mSlideLayer;
    if (v37 && -[MRLayer isPreactivated](v37, "isPreactivated"))
    {
      v38 = -[MRLayer isActivated](self->mSlideLayer, "isActivated");
      if (!v29 || (v38 & 1) != 0)
      {
        if (!(v29 | v38 ^ 1)) {
          -[MRLayer deactivate](self->mSlideLayer, "deactivate");
        }
      }

      else
      {
        -[MRLayer activate](self->mSlideLayer, "activate");
      }

      -[MRLayer prerenderForTime:inContext:withArguments:]( self->mSlideLayer,  "prerenderForTime:inContext:withArguments:",  a4,  a5,  v10);
    }

    else
    {
      NSLog(@"Slide provider has no slide player nor layer at the end of prerender");
    }
  }

  if (v29
    && (self->mFlags & 8) == 0
    && objc_msgSend(objc_msgSend(a5, "renderer"), "isPlaying")
    && -[MRLayer isActivated](self->mEffectLayer, "isActivated"))
  {
    v48 = !-[MRLayerClock isPaused](-[MRLayer clock](self->mEffectLayer, "clock"), "isPaused");
  }

  else
  {
    v48 = 0;
  }

  v49 = self->_audioDucker;
  if (!v49) {
    goto LABEL_105;
  }
  if ((v48 & 1) == 0)
  {
    v51 = -[MRLayerClock isPaused](-[MRLayer clock](self->mEffectLayer, "clock"), "isPaused");
    v52 = -1000.0;
    if (v51) {
      v52 = v10;
    }
    -[MRAudioDucker setDuckInTime:](self->_audioDucker, "setDuckInTime:", v52);
    if ((v12 & 0x80000000) == 0) {
      goto LABEL_116;
    }
    -[MRAudioDucker setDuckOutTime:](self->_audioDucker, "setDuckOutTime:", v10);
LABEL_105:
    if (v12 >= 0) {
      v53 = 1;
    }
    else {
      v53 = v48;
    }
    if (v53 != 1)
    {
      v55 = 0LL;
LABEL_115:
      -[MRSlideProvider setIsPlaying:](self, "setIsPlaying:", v55);
      goto LABEL_116;
    }

    operator delete[](v19);
    return (uint64_t)v21;
  }

  if (v20) {
    operator delete[](v20);
  }
  v21 = 0LL;
  float v8 = 0LL;
  if (v19) {
    goto LABEL_53;
  }
  return v8;
}

id DoRope( void *a1, uint64_t a2, int a3, double a4, double a5, float a6, float a7, float a8, uint64_t a9, uint64_t a10)
{
  uint64_t v17 = 0LL;
  __int128 v18 = (const float *)(a10 + 92);
  int32x2_t v19 = (int32x2_t)0x100000000LL;
  float32x2_t v20 = vld1_dup_f32(v18);
  __asm { FMOV            V0.2D, #15.0 }

  float64x2_t v158 = _Q0;
  float64x2_t v159 = (float64x2_t)vdupq_n_s64(0x401921FB54442D18uLL);
  float64x2_t v154 = (float64x2_t)vdupq_n_s64(0x3F7A9FBE76C8B439uLL);
  float64x2_t v156 = (float64x2_t)vdupq_n_s64(0x400921FB54442D18uLL);
  do
  {
    v25.i64[0] = v19.u32[0];
    v25.i64[1] = v19.u32[1];
    float32x2_t v26 = vsub_f32(vcvt_f32_f64(vaddq_f64(vdivq_f64(vmulq_f64(vcvtq_f64_u64(v25), v159), v158), v156)), v20);
    float v162 = v26.f32[0];
    __float2 v27 = __sincosf_stret(v26.f32[1]);
    __float2 v28 = __sincosf_stret(v162);
    *(float32x2_t *)&v174[v17 + 11584] = vcvt_f32_f64( vmulq_f64( vcvtq_f64_f32((float32x2_t)__PAIR64__( LODWORD(v27.__cosval),  LODWORD(v28.__cosval))),  v154));
    *(float32x2_t *)&v174[v17 + 11520] = vcvt_f32_f64( vmulq_f64( vcvtq_f64_f32((float32x2_t)__PAIR64__( LODWORD(v27.__sinval),  LODWORD(v28.__sinval))),  v154));
    int32x2_t v19 = vadd_s32(v19, (int32x2_t)0x200000002LL);
    v17 += 8LL;
  }

  while (v17 != 64);
  float v29 = a4;
  float v30 = alphaFunction(fmaxf(v29, 0.0)) * a6;
  double v31 = a4;
  float v32 = v30 * coshf(a8 + 0.0);
  float v34 = *(float *)(a10 + 20);
  float v35 = a5;
  if (a4 >= 1.0) {
    a3 = 0;
  }
  double v152 = a4;
  float v164 = *(float *)(a10 + 20);
  if ((a3 & 1) != 0)
  {
    float v36 = alphaFunction(fmaxf(v35, 0.0)) * a6;
    float v37 = coshf(a7 + 0.0);
    float v34 = v164;
    float v38 = v36 * v37;
    double v39 = v31 * -2.0 + 3.0;
    float v40 = -(v39 * v31) * v31 + 1.0;
    float v32 = v32 + (float)(v40 * (float)(v38 - v32));
    float v41 = v34 + (float)(v40 * (float)(v34 - v34));
  }

  else
  {
    double v39 = a4 * -2.0 + 3.0;
    float v41 = *(float *)(a10 + 20);
  }

  unsigned int v42 = 0;
  double v151 = v35;
  float v43 = v39;
  float v150 = v43;
  v44 = (float *)v174;
  float v157 = v34;
  float v161 = a6;
  do
  {
    float v166 = v33;
    unsigned int v45 = v42 + 1;
    float v46 = (float)(v42 + 1) * 0.034483;
    float v47 = fmax(v29 + v46 * -0.1, 0.0);
    float v48 = alphaFunction(v47) * a6;
    float v49 = v48 * coshf(v46 + a8);
    a6 = v161;
    float v50 = sqrtf((float)((float)(v46 + a8) * (float)(v46 + a8)) + 1.0);
    float v51 = sqrtf((float)(a6 * a6) - (float)((float)(v48 / v50) * (float)(v48 / v50))) * 0.034483;
    float v52 = v164 - v51;
    if (a3)
    {
      float v53 = fmax(v151 + -v46 * 0.1, 0.0);
      float v155 = v49;
      float v54 = alphaFunction(v53) * v161;
      float v55 = v46 + a7;
      float v56 = v54 * coshf(v46 + a7);
      float v57 = v55 * v55;
      a6 = v161;
      float v58 = sqrtf(v57 + 1.0);
      float v59 = v157 + (float)(sqrtf((float)(a6 * a6) - (float)((float)(v54 / v58) * (float)(v54 / v58))) * -0.034483);
      float v60 = (double)v45 * -0.0333333333 + 1.0;
      float v61 = (2.0 - v60) * v60;
      float v62 = -(powf(v150, v61) * v152) * v152 + 1.0;
      float v49 = v155 + (float)(v62 * (float)(v56 - v155));
      float v157 = v59;
      float v63 = v52 + (float)(v62 * (float)(v59 - v52));
    }

    else
    {
      float v63 = v164 - v51;
    }

    if (v42 > 0x1C)
    {
      __float2 v73 = __sincosf_stret(*(float *)(a10 + 92) - *(float *)(a10 + 48));
      uint64_t v74 = 0LL;
      float v75 = -v73.__cosval;
      float v33 = v166;
      float v76 = -v166;
      do
      {
        float v77 = *(float *)&v174[v74 + 11520];
        float v78 = *(float *)&v174[v74 + 11584];
        float *v44 = v32 + (float)(v76 * v78);
        v44[1] = v41 + (float)(v35 * v78);
        float v79 = (float)(v73.__sinval * v77) + (float)(v78 * v75);
        float v80 = v79 * 0.0065 * v73.__sinval;
        v44[2] = v77;
        v44[3] = v32 + (float)((float)(v79 * v76) * v75);
        v81 = v44 + 6;
        v44[4] = v41 + (float)((float)(v35 * v79) * v75);
        v44[5] = v80;
        v74 += 4LL;
        v44 += 6;
      }

      while (v74 != 64);
      v44 = v81;
    }

    else
    {
      uint64_t v64 = 0LL;
      float v65 = sqrtf((float)((float)(v41 - v63) * (float)(v41 - v63)) + (float)((float)(v32 - v49) * (float)(v32 - v49)));
      float v35 = (float)(v49 - v32) / v65;
      float v33 = (float)(v63 - v41) / v65;
      float v66 = v49 + (float)(v65 * v35) * 0.01;
      float v67 = v63 + (float)(v65 * v33) * 0.01;
      do
      {
        float v68 = *(float *)&v174[v64 + 11584];
        int v69 = *(_DWORD *)&v174[v64 + 11520];
        float v70 = v35 * v68;
        float v71 = v33 * v68;
        float *v44 = v32 - v71;
        v44[1] = v41 + v70;
        *((_DWORD *)v44 + 2) = v69;
        v44[3] = v66 - v71;
        v72 = v44 + 6;
        v44[4] = v70 + v67;
        *((_DWORD *)v44 + 5) = v69;
        v64 += 4LL;
        v44 += 6;
      }

      while (v64 != 64);
      v44 = v72;
      float v41 = v63;
      float v32 = v49;
      float v164 = v52;
    }

    ++v42;
  }

  while (v45 != 30);
  float v167 = v33;
  float v165 = atan2f(v35, -v33);
  __int128 v173 = xmmword_1F6990;
  if (*(void *)(a10 + 96) && *(_BYTE *)(a10 + 120))
  {
    double v82 = *(double *)a10;
    if (*(_BYTE *)(a10 + 122)) {
      double v82 = -*(double *)a10;
    }
    float v83 = v82 * 0.23;
    *(float *)&__int128 v173 = v83;
    MRMatrix_SetRotationFromAnglesYXZRad((uint64_t)v172, -*(float *)(a10 + 48), 0.0, 0.0);
    MRMatrix_SetRotationFromAnglesYXZRad((uint64_t)v171, 0.0, 0.0, v165);
    MRMatrix_PostMultiply((uint64_t)v172, v171);
    MRMatrix_SetRotationFromAnglesYXZRad((uint64_t)v171, *(float *)(a10 + 48), 0.0, 0.0);
    MRMatrix_PostMultiply((uint64_t)v172, v171);
    MRMatrix_RotateVector(v172, (float *)&v173, (uint64_t)&v173);
  }

  MRMatrix_SetRotationFromAnglesYXZRad((uint64_t)v172, *(float *)(a10 + 48), 0.0, 0.0);
  *(float *)&double v84 = MRMatrix_Translate( v172,  *(float *)(a10 + 16) + *(float *)&v173,  *((float *)&v173 + 1),  *(float *)(a10 + 24) + *((float *)&v173 + 2));
  objc_msgSend(a1, "composeModelViewMatrix:saveTo:", v172, v171, v84);
  [a1 setTextureCoordinatesPointer:a2 onTextureUnit:0];
  [a1 setVertex3DPointer:v174];
  if (*(void *)(a10 + 96)
    && !*(_BYTE *)(a10 + 120)
    && *(double *)(a10 + 112) != 0.0
    && !*(_BYTE *)(a10 + 125)
    && !*(_BYTE *)(a10 + 124)
    || ([a1 drawTriangleStripFromOffset:0 count:960], *(void *)(a10 + 96)))
  {
    if (*(_BYTE *)(a10 + 120))
    {
      float v86 = 3.14159265 - *(float *)(a10 + 48);
      MRMatrix_SetRotationFromAnglesYXZRad((uint64_t)v168, v86, 0.0, 0.0);
      double v87 = *(double *)(a10 + 112);
      double v88 = v87 * 3.0;
      double v89 = 1.0;
      if (v87 * 3.0 > 1.0) {
        double v88 = 1.0;
      }
      double v90 = v88 * (1.0 - v88) + 1.0;
      double v91 = v87 * 3.0 + -1.0;
      if (v91 >= 0.0)
      {
        double v89 = 0.0;
        if (v91 < 1.0) {
          double v89 = 1.0 - v91 * (v91 * (1.0 - v91) + 1.0);
        }
      }

      double v92 = v88 * v90;
      if (*(_BYTE *)(a10 + 121) && !*(_BYTE *)(a10 + 124) && !*(_BYTE *)(a10 + 125))
      {
        double v163 = v88 * v90;
        if (v87 > 0.0)
        {
          double v116 = v92 * -2.0 * *(float *)&v173;
          *(float *)&double v116 = v116;
          double v117 = v92 * -2.0 * *((float *)&v173 + 1);
          *(float *)&double v117 = v117;
          double v118 = v92 * -2.0 * *((float *)&v173 + 2);
          *(float *)&double v118 = v118;
          [a1 translateModelViewMatrixByX:0 Y:v116 Z:v117 saveTo:v118];
          double v119 = *(double *)(a10 + 112);
          float v120 = v119 * 20.0;
          float v121 = sinf(v120);
          float v122 = v119 * -1.5;
          float v123 = v89 * ((float)(v121 * expf(v122)) * 3.0 / 20.0) * -2.0 * *(float *)&v173;
          *(float *)(a10 + 56) = v123;
          if (v123 != 0.0)
          {
            *(_DWORD *)(a10 + 6_Block_object_dispose((const void *)(v1 - 64), 8) = 0;
            float v124 = atan2f(v123, fabsf(v161));
            *(float *)(a10 + 80) = v124;
            float v125 = *(float *)(a10 + 48) + -3.14159265;
            MRMatrix_SetRotationFromAnglesYXZRad((uint64_t)v169, v125, 0.0, v124);
            MRMatrix_Translate(v169, *(float *)(a10 + 56), *(float *)(a10 + 68), 0.0);
            objc_msgSend(a1, "composeModelViewMatrix:saveTo:", v169, v170, MRMatrix_PostMultiply((uint64_t)v169, v168));
          }

          [a1 drawTriangleStripFromOffset:0 count:960];
          double v92 = v163;
        }

        if (*(void *)(a10 + 104))
        {
          *(float *)&double v87 = *(float *)&v173 * -2.0;
          *(float *)&double v88 = *((float *)&v173 + 1) * -2.0;
          *(float *)&double v90 = *((float *)&v173 + 2) * -2.0;
          [a1 translateModelViewMatrixByX:0 Y:v87 Z:v88 saveTo:v90];
          double v126 = *(double *)(a10 + 112);
          float v127 = v126 * 19.0;
          float v128 = sinf(v127);
          float v129 = v126 * -1.6;
          float v130 = v89 * ((float)(v128 * expf(v129)) * 3.0 / 19.0) * -2.0 * *(float *)&v173;
          *(float *)(a10 + 60) = v130;
          if (v130 != 0.0)
          {
            *(_DWORD *)(a10 + 72) = 0;
            float v131 = atan2f(v130, fabsf(v161));
            *(float *)(a10 + 84) = v131;
            float v132 = *(float *)(a10 + 48) + -3.14159265;
            MRMatrix_SetRotationFromAnglesYXZRad((uint64_t)v169, v132, 0.0, v131);
            MRMatrix_Translate(v169, *(float *)(a10 + 60), *(float *)(a10 + 72), 0.0);
            objc_msgSend(a1, "composeModelViewMatrix:saveTo:", v169, v170, MRMatrix_PostMultiply((uint64_t)v169, v168));
          }

          [a1 drawTriangleStripFromOffset:0 count:960];
          double v92 = v163;
        }
      }

      double v93 = *(double *)(a10 + 112);
      float v94 = *(float *)&v173;
      if (v93 > 0.0)
      {
        float v95 = v93 * 22.0;
        double v96 = v89;
        double v97 = v92;
        float v98 = sinf(v95);
        float v99 = v93 * -1.35;
        float v100 = v98 * expf(v99);
        double v92 = v97;
        float v101 = v96 * (v100 * 3.0 / 22.0) * -2.0 * v94;
        *(float *)(a10 + 64) = v101;
        *(_DWORD *)(a10 + 76) = 0;
        *(float *)(a10 + 8_Block_object_dispose((const void *)(v1 - 64), 8) = atan2f(v101, fabsf(v161));
      }

      *(float *)&double v87 = v94 * -2.0;
      *(float *)&double v88 = *((float *)&v173 + 1) * -2.0;
      *(float *)&double v90 = *((float *)&v173 + 2) * -2.0;
      [a1 translateModelViewMatrixByX:0 Y:v87 Z:v88 saveTo:v90];
      if (*(float *)(a10 + 64) != 0.0 && !*(_BYTE *)(a10 + 125))
      {
        float v102 = *(float *)(a10 + 48) + -3.14159265;
        MRMatrix_SetRotationFromAnglesYXZRad((uint64_t)v169, v102, 0.0, *(float *)(a10 + 88));
        MRMatrix_Translate(v169, *(float *)(a10 + 64), *(float *)(a10 + 76), 0.0);
        objc_msgSend(a1, "composeModelViewMatrix:saveTo:", v169, v170, MRMatrix_PostMultiply((uint64_t)v169, v168));
      }

      [a1 drawTriangleStripFromOffset:0 count:960];
      if (*(_BYTE *)(a10 + 125))
      {
        double v103 = (v92 + 1.0) * -2.0;
        double v104 = v103 * *(float *)&v173;
        *(float *)&double v104 = v104;
        double v105 = v103 * *((float *)&v173 + 1);
        *(float *)&double v105 = v105;
        double v106 = v103 * *((float *)&v173 + 2);
        *(float *)&double v106 = v106;
        [a1 translateModelViewMatrixByX:0 Y:v104 Z:v105 saveTo:v106];
        float v107 = *(float *)(a10 + 48) + -3.14159265;
        MRMatrix_SetRotationFromAnglesYXZRad((uint64_t)v169, v107, 0.0, *(float *)(a10 + 88));
        MRMatrix_Translate(v169, *(float *)(a10 + 64), *(float *)(a10 + 76), 0.0);
        objc_msgSend(a1, "composeModelViewMatrix:saveTo:", v169, 0, MRMatrix_PostMultiply((uint64_t)v169, v168));
        [a1 drawTriangleStripFromOffset:0 count:960];
      }

      goto LABEL_64;
    }

    double v108 = *(double *)(a10 + 112);
    int v109 = *(unsigned __int8 *)(a10 + 125);
    if (v108 <= 0.0)
    {
      *(void *)(a10 + 56) = 0LL;
      *(void *)(a10 + 6_Block_object_dispose((const void *)(v1 - 64), 8) = 0x400000003F800000LL;
      if (v109)
      {
LABEL_54:
        double v110 = v108 * 2.7;
        if (v108 * 2.7 >= 0.0 && v110 < 1.0)
        {
          float v111 = v110 * 0.1 * (v110 * (v110 * (v110 * (v110 * -16.5554 + 39.9896) + -30.2316) + 6.7269) + 0.0705);
          *(float *)(a10 + 64) = v111;
          float v112 = v110 * (v110 * (v110 * (v110 * -2.1436 + 1.0191) + 3.4737) + -1.3485);
LABEL_60:
          *(float *)(a10 + 76) = v112;
          goto LABEL_64;
        }

        *(_DWORD *)(a10 + 64) = 0;
        _NF = v110 < 0.0;
        float v112 = 0.0;
        float v114 = 1.0;
        goto LABEL_58;
      }
    }

    else
    {
      if (*(_BYTE *)(a10 + 125))
      {
        *(void *)(a10 + 56) = 0LL;
        *(void *)(a10 + 6_Block_object_dispose((const void *)(v1 - 64), 8) = 0x400000003F800000LL;
        goto LABEL_54;
      }

      if (!*(_BYTE *)(a10 + 124))
      {
        double v133 = -0.5;
        double v134 = *(double *)(a10 + 8) * -0.5;
        *(float *)&double v133 = v134;
        float v135 = 0.0;
        LODWORD(v134) = 0;
        LODWORD(v85) = 0;
        [a1 translateModelViewMatrixByX:0 Y:v134 Z:v133 saveTo:v85];
        [a1 drawTriangleStripFromOffset:0 count:960];
        double v137 = v108 * 2.5 + -0.3;
        if (v137 >= 0.0 && v137 < 1.0)
        {
          float v135 = v137 * 0.1 * (v137 * (v137 * (v137 * (v137 * -16.5554 + 39.9896) + -30.2316) + 6.7269) + 0.0705);
          *(float *)(a10 + 56) = v135;
          HIDWORD(v136) = -1074424972;
          float v139 = v137 * (v137 * (v137 * (v137 * -2.1436 + 1.0191) + 3.4737) + -1.3485);
        }

        else
        {
          *(_DWORD *)(a10 + 56) = 0;
          _NF = v137 < 0.0;
          float v139 = 1.0;
          if (_NF) {
            float v139 = 0.0;
          }
        }

        *(float *)(a10 + 6_Block_object_dispose((const void *)(v1 - 64), 8) = v139;
        double v140 = *(double *)(a10 + 8);
        double v141 = v139 * 0.5 * v140;
        *(float *)&double v140 = v141;
        float v142 = 0.0;
        LODWORD(v136) = 0;
        *(float *)&double v141 = v135;
        [a1 translateModelViewMatrixByX:0 Y:v141 Z:v140 saveTo:v136];
        [a1 drawTriangleStripFromOffset:0 count:960];
        double v143 = v108 * 2.4 + -0.13;
        if (v143 < 0.0 || v143 >= 1.0)
        {
          *(_DWORD *)(a10 + 60) = 0;
          float v144 = 2.0;
          if (v143 < 0.0) {
            float v144 = 1.0;
          }
        }

        else
        {
          float v142 = v143 * 0.1 * (v143 * (v143 * (v143 * (v143 * -16.5554 + 39.9896) + -30.2316) + 6.7269) + 0.0705);
          *(float *)(a10 + 60) = v142;
          double v143 = v143 * (v143 * (v143 * (v143 * -2.1436 + 1.0191) + 3.4737) + -1.3485);
          *(float *)&double v143 = v143;
          float v144 = *(float *)&v143 + 1.0;
        }

        *(float *)(a10 + 72) = v144;
        *(float *)&double v143 = v142 - *(float *)(a10 + 56);
        double v145 = *(double *)(a10 + 8);
        double v146 = v145 * ((float)(v144 - *(float *)(a10 + 68)) * 0.5);
        *(float *)&double v146 = v146;
        LODWORD(v145) = 0;
        [a1 translateModelViewMatrixByX:0 Y:v143 Z:v146 saveTo:v145];
        [a1 drawTriangleStripFromOffset:0 count:960];
        if (!*(void *)(a10 + 104))
        {
          *(_DWORD *)(a10 + 64) = *(_DWORD *)(a10 + 60);
          float v112 = *(float *)(a10 + 72);
          goto LABEL_60;
        }

        double v147 = v108 * 2.7;
        if (v108 * 2.7 >= 0.0 && v147 < 1.0)
        {
          float v148 = v147 * 0.1 * (v147 * (v147 * (v147 * (v147 * -16.5554 + 39.9896) + -30.2316) + 6.7269) + 0.0705);
          *(float *)(a10 + 64) = v148;
          float v149 = v147 * (v147 * (v147 * (v147 * -2.1436 + 1.0191) + 3.4737) + -1.3485);
          float v112 = v149 + 2.0;
          goto LABEL_60;
        }

        *(_DWORD *)(a10 + 64) = 0;
        _NF = v147 < 0.0;
        float v112 = 2.0;
        float v114 = 3.0;
LABEL_58:
        if (!_NF) {
          float v112 = v114;
        }
        goto LABEL_60;
      }

      *(void *)(a10 + 56) = 0LL;
      *(void *)(a10 + 6_Block_object_dispose((const void *)(v1 - 64), 8) = 0x400000003F800000LL;
    }

    *(_DWORD *)(a10 + 64) = 0;
    *(_DWORD *)(a10 + 76) = 1077936128;
  }

id DoSlide( void *a1, void *a2, void *a3, void *a4, uint64_t a5, double a6, double a7, uint64_t a8, char a9, uint64_t a10)
{
  double v16 = 0.0;
  if (*(_BYTE *)(a10 + 121) && (a9 & 1) == 0) {
    double v16 = *(float *)(a10 + 92);
  }
  float v17 = v16 - *(float *)(a10 + 48);
  MRMatrix_SetRotationFromAnglesYXZRad(a5, v17, 0.0, 0.0);
  MRMatrix_SetRotationFromAnglesYXZRad((uint64_t)v297, 0.0, 0.0, *(float *)(a10 + 52));
  double v18 = -(*(float *)(a10 + 28) - *(double *)(a10 + 8) * 0.5);
  float v19 = *(float *)(a10 + 32) + *(float *)(a10 + 40) * v18;
  *(float *)&double v18 = *(float *)(a10 + 36) + *(float *)(a10 + 44) * v18;
  MRMatrix_Translate(v297, v19, *(float *)&v18, 0.0);
  MRMatrix_PostMultiply(a5, v297);
  MRMatrix_SetRotationFromAnglesYXZRad((uint64_t)v297, *(float *)(a10 + 48), 0.0, 0.0);
  MRMatrix_Translate(v297, *(float *)(a10 + 16), 0.0, *(float *)(a10 + 24));
  objc_msgSend(a1, "composeModelViewMatrix:saveTo:", a5, v296, MRMatrix_PostMultiply(a5, v297));
  uint64_t v20 = *(void *)(a10 + 96);
  if (!v20 || *(_BYTE *)(a10 + 124) || *(_BYTE *)(a10 + 123) || *(_BYTE *)(a10 + 125))
  {
    BOOL v21 = 0;
  }

  else if (*(void *)(a10 + 104))
  {
    BOOL v21 = 1;
  }

  else
  {
    BOOL v21 = *(double *)(a10 + 112) > 0.0;
  }

  double v23 = *(double *)a10;
  double v22 = *(double *)(a10 + 8);
  [a1 localAspectRatio];
  double v25 = v22 * v24;
  double y = CGRectZero.origin.y;
  double width = CGRectZero.size.width;
  double height = CGRectZero.size.height;
  double v283 = v23;
  double v288 = v25;
  if (!v20)
  {
    double v40 = CGRectZero.size.height;
    double v41 = 0.02 / v23;
    double v42 = 0.02 / v25;
    CGFloat v43 = CGRectZero.size.width;
    [a1 localAspectRatio];
    double v45 = v42 * v44;
    v298.origin.double x = v41 * 0.5 + 0.0107579462;
    double x = v298.origin.x;
    v298.origin.double y = v45 * 0.5 + 0.0122249389;
    v298.size.double width = 0.978484108 - v41;
    v298.size.double height = 0.975550122 - v45;
    double v267 = 0.978484108 - v41;
    double v268 = v298.origin.y;
    double v266 = 0.975550122 - v45;
    CGRect v299 = CGRectInset(v298, v41 * 0.6, v45 * 0.6);
    double v260 = v299.origin.y;
    double v261 = v299.origin.x;
    double v258 = v299.size.height;
    double v259 = v299.size.width;
    double v46 = y;
    double v47 = CGRectZero.origin.x;
    double v257 = 0.0;
    double v253 = v41 + 0.0107579462;
    double v254 = 1.0;
    double v255 = v45 + 0.0122249389;
    double v256 = 1.0;
    double v48 = CGRectZero.origin.x;
    double v49 = 0.0;
    double v286 = y;
    double v273 = v40;
    double v274 = v43;
    double v50 = v43;
    double v270 = 0.0;
    double v271 = 0.0;
    double v264 = 0.0;
    double v272 = 0.0;
    double v265 = 0.0;
    double v51 = v283;
    double v52 = v288;
    double v276 = 0.0;
    goto LABEL_49;
  }

  if (*(_BYTE *)(a10 + 122)) {
    double v29 = -1.0;
  }
  else {
    double v29 = 1.0;
  }
  int v30 = *(unsigned __int8 *)(a10 + 120);
  if (*(_BYTE *)(a10 + 120))
  {
    double v31 = (double)*(unint64_t *)(a10 + 96);
    double v32 = v23 * 0.954 * v29 * 0.5;
    double v256 = (v31 + 2.0) * 0.5;
    double v33 = (v32 + v32) / (v23 * v256);
    if (v21 || *(_BYTE *)(a10 + 125))
    {
      double v34 = v23 * 0.046 + v29 * v32;
      double v35 = v32 * 0.5;
      double v36 = *(double *)(a10 + 112);
      if (v36 <= 0.0)
      {
        double v272 = v35 - v32;
        unint64_t v39 = *(void *)(a10 + 104);
        unint64_t v38 = v39 - 1;
      }

      else
      {
        double v37 = v36 * 3.0;
        if (v37 > 1.0) {
          double v37 = 1.0;
        }
        double v272 = v35 + -(v37 * (v37 * (1.0 - v37) + 1.0)) * v32;
        unint64_t v38 = *(void *)(a10 + 104);
        unint64_t v39 = v38;
      }

      double v56 = v23 * v256 / v34;
      double v270 = v33 * ((double)v38 + v31 * -0.5 + 1.5);
      double v57 = -v33;
      double v264 = 0.0;
      double v58 = v25;
      if (v21) {
        goto LABEL_34;
      }
      goto LABEL_33;
    }
  }

  else
  {
    double v32 = -(v29 * (v25 * 0.945)) * 0.5;
    double v31 = (double)*(unint64_t *)(a10 + 96);
    double v33 = (v32 + v32) / (v25 * 0.945 * (v31 + 2.0) * 0.5);
    if (v21 || *(_BYTE *)(a10 + 125))
    {
      double v53 = -v29;
      double v35 = v32 * 0.5;
      double v54 = *(double *)(a10 + 112);
      if (v54 <= 0.0)
      {
        double v272 = v35 - v32;
        unint64_t v39 = *(void *)(a10 + 104);
        unint64_t v55 = v39 - 1;
      }

      else
      {
        double v272 = v35 - v54 * v32;
        unint64_t v55 = *(void *)(a10 + 104);
        unint64_t v39 = v55;
      }

      double v58 = v25 * 0.055 + v53 * v32;
      double v270 = v33 * ((double)v55 + v31 * -0.5 + 1.5);
      double v57 = -v33;
      double v56 = 1.0;
      double v264 = 0.0;
      double v256 = 1.0;
      double v34 = v23;
      if (v21) {
        goto LABEL_34;
      }
      goto LABEL_33;
    }

    double v256 = 1.0;
  }

  unint64_t v39 = *(void *)(a10 + 104);
  double v270 = 0.0;
  double v56 = 1.0;
  double v272 = 0.0;
  double v35 = 0.0;
  double v34 = v23;
  double v58 = v25;
  double v57 = 0.0;
LABEL_33:
  double v264 = v33 * ((double)v39 + v31 * -0.5);
  if (!*(_BYTE *)(a10 + 125))
  {
    double v254 = v56;
    double v265 = v57;
    double v271 = v35;
    double v252 = v58;
    double v291 = v34;
    double v293 = CGRectZero.origin.x;
    CGFloat v275 = CGRectZero.size.height;
    double v276 = v32;
    double v247 = 0.0;
    double v257 = 0.0;
    CGFloat v277 = CGRectZero.size.width;
    CGFloat v280 = CGRectZero.origin.y;
    CGFloat v287 = CGRectZero.origin.x;
    goto LABEL_38;
  }

double ComputeSpriteSize(int a1, int a2, double a3)
{
  if (a3 >= 2.0)
  {
    if (a3 >= 3.0)
    {
      float v4 = a3 / 1.5;
      unint64_t v5 = vcvtps_u32_f32(v4);
      double v6 = a3 / (double)v5 + a3 / (double)v5;
      double v7 = 0.4;
      if (a2) {
        double v7 = 0.6;
      }
      return v6 * v7 / 0.954;
    }

    else if (a2)
    {
      return 1.8;
    }

    else
    {
      return 0.9;
    }
  }

  else if (a3 <= 0.5)
  {
    if (a3 <= 0.454545455)
    {
      float v8 = 1.0 / a3;
      double v9 = (double)vcvtps_u32_f32(v8) * a3 * 0.5;
      if (a2) {
        return v9;
      }
      else {
        return v9 * 0.6;
      }
    }

    else
    {
      double v3 = a3 * 0.6;
      if (a2) {
        return a3;
      }
    }
  }

  else if (a1)
  {
    if (a2) {
      return 1.5;
    }
    else {
      return 0.75;
    }
  }

  else if (a2)
  {
    return 0.666666667;
  }

  else
  {
    return 0.4;
  }

  return v3;
}

LABEL_92:
      double v98 = v174 + (float)(v88 * (float)(v89 - v174));
      double v52 = 1.0;
      double v102 = v84 + (1.0 - v87) * (1.0 - v87) * v99;
      *((float *)v51 - 11) = v102;
      double v103 = v62 >= 1.0 && v161 == v48;
      double v104 = ComputeSpriteSize(v62 >= 1.0, v161 == v48, v62);
      double v87 = v183;
      *(double *)(v51 - 23) = v172 + v90 * (v104 - v172);
      *(double *)(v51 - 21) = v77 + v90 * (v105 - v77);
      double v106 = (v105 + 1.0) * 0.5;
      if (!v103 || v106 > 1.0) {
        double v106 = 1.0;
      }
      double v86 = v163 + v90 * (v106 - v163);
      double v97 = v175;
LABEL_98:
      double v107 = v86 + v98;
      *((float *)v51 - 1_Block_object_dispose((const void *)(v1 - 64), 8) = v107;
      *((_BYTE *)v51 + 2_Block_object_dispose((const void *)(v1 - 64), 8) = v97;
      *((_BYTE *)v51 + 29) = v96;
      double v108 = 0.0;
      double v47 = v181;
      double v33 = v165;
      double v50 = 28LL * v181;
      if (v91 != v179)
      {
        double v109 = (a3 - *(double *)&v162[48 * v171 + 8]) * 9.42477796;
        double v110 = 3.14159265;
        if (v109 < 18.8495559)
        {
          double v111 = v109;
          double v112 = sinf(v111);
          double v113 = 1.0;
          if (v109 >= 6.28318531) {
            double v113 = 39.4784176 / (v109 * v109);
          }
          double v110 = (v52 + -v112 / v109 * v113) * 3.14159265;
          double v87 = v183;
        }

        if (v110 > 1.57079633) {
          double v110 = v110 + -3.14159265;
        }
        double v108 = v110;
      }

      *(float *)double v51 = v108;
      if (v66 >= 2) {
        double v114 = v66 - 2;
      }
      else {
        double v114 = 0LL;
      }
      *(void *)(v51 + 1) = v114;
      if (v66 < 3) {
        goto LABEL_145;
      }
      double v115 = 0.0;
      if (v178 == v48)
      {
        else {
          double v116 = 0.5;
        }
        double v115 = (a3 - (*(double *)&v162[48 * v53 + 24] - v116)) * 0.5;
      }

      double v117 = v115 > 0.0;
      if (v115 >= v52) {
        double v117 = 0;
      }
      *((_BYTE *)v51 + 33) = v117;
      double v118 = *(double *)((char *)&self->mCountOfSlides + 1) * 0.6;
      *((_BYTE *)v51 + 31) = v49 > v181;
      *((_BYTE *)v51 + 32) = v49 < v181;
      if (v49 < v181 || v165 >= 0.0 || v117)
      {
        double v119 = (double)v114;
      }

      else
      {
        double v119 = 0.0;
        if (v49 <= v181 && v87 > 2.0)
        {
          double v120 = (v87 + -2.0) / (v118 + 2.0);
          double v119 = floorf(v120);
        }
      }

      *(void *)(v51 + 3) = (unint64_t)v119;
      double v123 = v165 >= 0.0 && v178 != v48 || v49 > v181;
      if (v123) {
        double v124 = 0.0;
      }
      else {
        double v124 = v52;
      }
      if (v123 || v49 < v181)
      {
LABEL_144:
        *(double *)(v51 + 5) = v124;
        goto LABEL_145;
      }

      if (v117) {
        goto LABEL_141;
      }
      if (v87 > 2.0)
      {
        double v125 = v87 + -2.0;
        double v126 = v118 + 2.0;
        double v127 = fmodf(v125, v126);
        double v87 = v183;
        double v115 = (v127 - v118) * 0.5;
LABEL_141:
        *(double *)(v51 + 5) = v115;
        goto LABEL_143;
      }

      double v115 = *(double *)(v51 + 5);
LABEL_143:
      double v124 = 0.0;
      if (v115 < 0.0) {
        goto LABEL_144;
      }
LABEL_145:
      if (v168 - v177 >= 0.0) {
        double v128 = v168 - v177;
      }
      else {
        double v128 = 0.0;
      }
      DoRope( v180,  (uint64_t)&unk_2AE680,  (int)v181 > 0,  v87,  v128,  flt_1F6F38[v49++] * 1.5,  0.0,  0.0,  0LL,  (uint64_t)(v51 - 23));
      v48 += 28LL;
      v51 += 32;
      if (v49 >= self->mScenario[2]) {
        goto LABEL_149;
      }
    }

    double v101 = -6.28318531;
LABEL_91:
    double v99 = v100 + v101;
    goto LABEL_92;
  }

LABEL_149:
  double v129 = v180;
  [v160 unsetOnContext:v180 onTextureUnit:0 state:v184];
  [v180 unsetShader];
  [v160 releaseByUser];
  LODWORD(v130) = 0;
  LODWORD(v131) = 0;
  LODWORD(v132) = 1.0;
  [v180 setNormal:v130 :v131 :v132];
  double v133 = *(NSMutableDictionary **)((char *)&self->mMatrices + 1);
  if (v133)
  {

    *(NSMutableDictionary **)((char *)&self->mMatrices + 1) = 0LL;
  }

  double v134 = self->mScenario[2];
  if (self->mScenario[2])
  {
    double v135 = 0LL;
    double v136 = &v185;
    do
    {
      LODWORD(v137) = v135;
      if (v135)
      {
        double v138 = *(float *)&v189[128 * v135 + 24];
        double v139 = v136;
        double v137 = v135;
        do
        {
          double v140 = *(v139 - 2);
          *double v139 = v140;
          v139[1] = *(v139 - 1);
          v139 -= 2;
          --v137;
        }

        while (v137);
      }

      double v141 = &v186[2 * v137 - 1];
      *double v141 = v135;
      v141[1] = v184[++v135];
      v136 += 2;
    }

    while (v135 != v134);
    double v142 = 0LL;
    double v143 = v186;
    do
    {
      double v144 = *(v143 - 1);
      double v145 = *v143;
      double v146 = ImageKey(v145);
      double v147 = v146;
      if (v47 == (_DWORD)v144) {
        *(NSMutableDictionary **)((char *)&self->mMatrices + 1) = (NSMutableDictionary *)v146;
      }
      if (*(float *)&v189[128 * v144 + 24] > -1.0
        && (v169 <= self->super.mPhaseInDuration ? (double v148 = v47 == (_DWORD)v144) : (double v148 = 1), v148))
      {
        double v149 = -[NSDictionary objectForKey:]( -[MRLayerEffect slideProvidersForElementIDs](self->super.mEffectLayer, "slideProvidersForElementIDs"),  "objectForKey:",  v147);
      }

      else
      {
        double v149 = [*(id *)((char *)&self->mBaseStillDuration + 1) objectAtIndex:v145];
      }

      float v150 = v149;
      if (v149)
      {
        double v151 = [v149 retainedByUserRenderedImageAtTime:v129 inContext:a5 withArguments:a3];
        if (!v151)
        {
          [v150 imageAspectRatio];
          if (v152 <= 0.0)
          {
            double v151 = 0LL;
          }

          else
          {
            *(_OWORD *)double v187 = xmmword_1F6990;
            double v153 = [v129 imageManager];
            [v150 imageAspectRatio];
            double v151 = objc_msgSend(v153, "retainedByUserImageWithSize:andColor:", v187, 64.0, 64.0 / v154);
            [v151 setLabel:@"Marimba HangingPictures Placeholder"];
          }
        }

        double v155 = *(unsigned __int16 *)&self->mScenario[3];
        if (v47 == (_DWORD)v144 && v173 > 2.0) {
          objc_msgSend(v129, "clear:", 2, v173);
        }
        double v156 = [*(id *)((char *)&self->mRopeImageProvider + 8 * ((v155 >> (2 * v144)) & 3) + 1) retainedByUserRenderedImageAtTime:v129 inContext:a5 withArguments:a3];
        double v157 = v129;
        double v158 = *(MRImageProvider **)((char *)&self->mPhotoFrameImageProviders[3] + 1);
        double v159 = (MRCroppingSprite *)[v158 objectForKey:v147];
        if (!v159)
        {
          double v159 = objc_alloc_init(&OBJC_CLASS___MRCroppingSprite);
          [v158 setObject:v159 forKey:v147];
        }

        DoSlide( v157,  v151,  v156,  v159,  (uint64_t)v187,  self->super.mPixelSize.width,  self->super.mPixelSize.height,  0LL,  v33 >= 0.0,  (uint64_t)&v189[128 * v144]);
        objc_msgSend( *(id *)((char *)&self->mSprites + 1),  "setObject:forKey:",  +[NSData dataWithBytes:length:](NSData, "dataWithBytes:length:", v187, 64),  v147);
        [v156 releaseByUser];
        [v151 releaseByUser];
        double v129 = v157;
        double v47 = v181;
      }

      v143 += 2;
      ++v142;
    }

    while (v142 < self->mScenario[2]);
  }

  if (v33 >= 0.0) {
    [v129 restoreModelViewMatrix:v188];
  }
  [v129 cull:0];
  [v129 depthTest:0];
  [v129 blend:0];
}

void sub_74648(_Unwind_Exception *a1)
{
}

void sub_74778(_Unwind_Exception *a1)
{
}

void sub_74854(_Unwind_Exception *a1)
{
}

void sub_748FC(_Unwind_Exception *a1)
{
}

void sub_7C77C(_Unwind_Exception *a1)
{
}

void sub_7C828(_Unwind_Exception *a1)
{
}

void sub_7C89C(_Unwind_Exception *a1)
{
}

void sub_7C944(_Unwind_Exception *a1)
{
}

void sub_7CCF4(_Unwind_Exception *a1)
{
}

BOOL MCStringToVector@<W0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0LL;
  *(void *)(a2 + _Block_object_dispose((const void *)(v1 - 64), 8) = 0LL;
  *(_DWORD *)(a2 + 16) = 0;
  double v3 = +[NSScanner scannerWithString:]( NSScanner,  "scannerWithString:",  objc_msgSend( a1,  "stringByTrimmingCharactersInSet:",  +[NSCharacterSet characterSetWithCharactersInString:]( NSCharacterSet,  "characterSetWithCharactersInString:",  @"[] {},()")));
  uint64_t v4 = 0LL;
  uint64_t v5 = a2 + 4;
  do
  {
    BOOL result = -[NSScanner isAtEnd](v3, "isAtEnd");
    if (result) {
      break;
    }
    ++v4;
    -[NSScanner scanFloat:](v3, "scanFloat:", v5);
    BOOL result = -[NSScanner scanString:intoString:](v3, "scanString:intoString:", @",", 0LL);
    v5 += 4LL;
  }

  while (v4 != 4);
  *(_BYTE *)a2 = v4;
  return result;
}

CFStringRef MCVectorToString(uint64_t a1)
{
  switch(*(_BYTE *)a1)
  {
    case 1:
      BOOL result = +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"[%f]",  *(float *)(a1 + 4),  v2,  v3,  v4);
      break;
    case 2:
      BOOL result = +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"[%f %f]",  *(float *)(a1 + 4),  *(float *)(a1 + 8),  v3,  v4);
      break;
    case 3:
      BOOL result = +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"[%f %f %f]",  *(float *)(a1 + 4),  *(float *)(a1 + 8),  *(float *)(a1 + 12),  v4);
      break;
    case 4:
      BOOL result = +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"[%f %f %f %f]",  *(float *)(a1 + 4),  *(float *)(a1 + 8),  *(float *)(a1 + 12),  *(float *)(a1 + 16));
      break;
    default:
      BOOL result = @"[]";
      break;
  }

  return result;
}

LABEL_13:
            float v8 = (char *)v8 + 1;
          }

          while (v6 != v8);
          double v6 = [a3 countByEnumeratingWithState:&v16 objects:v20 count:16];
        }

        while (v6);
      }
    }
  }

    if (v10)
    {
      __int128 v13 = v9 - 1;
      __int128 v14 = 0.25;
      __int128 v15 = 0.5;
      do
      {
        double v16 = v15 * ((1.0 - v15) * ((1.0 - v15) * 3.0)) * *(double *)(a4 + 8LL * v13)
            + (1.0 - v15) * ((1.0 - v15) * (1.0 - v15)) * a2[v13]
        float v17 = v16 == a6;
        double v18 = v16 < a6;
        if (v16 == a6) {
          break;
        }
        float v19 = -v14;
        if (v18 || v17) {
          float v19 = v14;
        }
        __int128 v15 = v15 + v19;
        __int128 v14 = v14 * 0.5;
      }

      while (v14 > 0.000244140625);
      return v15 * ((1.0 - v15) * ((1.0 - v15) * 3.0)) * *(double *)(a5 + 8 * v13)
           + (1.0 - v15) * ((1.0 - v15) * (1.0 - v15)) * *(double *)(a5 + 8 * v13)
    }
  }

  return result;
}

  [a4 blend:2];
  CGFloat v43 = self->super.mPhaseInDuration + self->super.mMainDuration + self->super.mPhaseOutDuration;
  float v44 = v43 + -1.0;
  double v45 = (v43 - a3 + 1.0) * 0.2;
  *(float *)&double v45 = v45;
  if (v44 >= a3) {
    *(float *)&double v45 = 0.2;
  }
  double v46 = objc_msgSend( objc_msgSend(a4, "imageManager", vdupq_lane_s32(*(int32x2_t *)&v45, 0)),  "retainedByUserImageWithSize:andColor:",  &v47,  1.0,  1.0);
  [v46 setLabel:@"Marimba Watercolor Background Bar"];
  [a4 setShader:@"PlainTexture"];
  +[MRCroppingSprite renderDumbImage:inContext:atPosition:andSize:]( &OBJC_CLASS___MRCroppingSprite,  "renderDumbImage:inContext:atPosition:andSize:",  v46,  a4,  0.0,  v39 * 1.733334,  2.0,  0.266666);
  +[MRCroppingSprite renderDumbImage:inContext:atPosition:andSize:]( &OBJC_CLASS___MRCroppingSprite,  "renderDumbImage:inContext:atPosition:andSize:",  v46,  a4,  v37 * 0.55555 * 1.8,  0.0,  0.2,  2.0);
  [a4 unsetShader];
  [a4 blend:0];
  [v46 releaseByUser];
}

    operator delete[](v6);
    return v4;
  }

  if (v4) {
    operator delete[](v4);
  }
  uint64_t v4 = 0LL;
  BOOL result = 0LL;
  if (v6) {
    goto LABEL_13;
  }
  return result;
}

    operator delete[](v6);
    return v4;
  }

  if (v4) {
    operator delete[](v4);
  }
  uint64_t v4 = 0LL;
  BOOL result = 0LL;
  if (v6) {
    goto LABEL_13;
  }
  return result;
}

            float v8 = (char *)v8 + 1;
          }

          while (v6 != v8);
          double v6 = [a3 countByEnumeratingWithState:&v16 objects:v20 count:16];
        }

        while (v6);
      }
    }
  }

            float v8 = (char *)v8 + 1;
          }

          while (v6 != v8);
          double v6 = [a3 countByEnumeratingWithState:&v16 objects:v20 count:16];
        }

        while (v6);
      }
    }
  }

            float v8 = (char *)v8 + 1;
          }

          while (v6 != v8);
          double v6 = [a3 countByEnumeratingWithState:&v16 objects:v20 count:16];
        }

        while (v6);
      }
    }
  }

void sub_7E1E8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
}

void sub_7E3A4(_Unwind_Exception *a1)
{
}

void sub_7E430(_Unwind_Exception *a1)
{
}

void sub_7E630(_Unwind_Exception *a1)
{
}

void sub_7E7B4(_Unwind_Exception *a1)
{
}

void sub_7E9E0(_Unwind_Exception *a1)
{
}

void sub_7EBFC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id obj)
{
}

void sub_7F1A8(_Unwind_Exception *exception_object)
{
}

void sub_7F3B8(_Unwind_Exception *a1)
{
}

void sub_7F438(_Unwind_Exception *a1)
{
}

void sub_7F578(_Unwind_Exception *a1)
{
}

uint64_t sub_7F58C(uint64_t a1, void *a2, void *a3)
{
  double v7 = v6;
  +[MCAnimationPathKeyframed timeForKeyframe:withPlugTiming:]( &OBJC_CLASS___MCAnimationPathKeyframed,  "timeForKeyframe:withPlugTiming:",  a3,  *(void *)(a1 + 32));
  if (v7 < v9) {
    return -1LL;
  }
  if (v7 > v9) {
    return 1LL;
  }
  uint64_t v11 = objc_opt_class(&OBJC_CLASS___MCAnimationKeyframeFunction, v8);
  double v13 = 0.0;
  double v14 = 0.0;
  if ((objc_opt_isKindOfClass(a2, v11) & 1) != 0)
  {
    [a2 duration];
    double v14 = v15;
  }

  uint64_t v16 = objc_opt_class(&OBJC_CLASS___MCAnimationKeyframeFunction, v12);
  if ((objc_opt_isKindOfClass(a3, v16) & 1) != 0)
  {
    [a3 duration];
    double v13 = v17;
  }

  if (v14 > v13) {
    return 1LL;
  }
  else {
    return -1LL;
  }
}

uint64_t sub_7F664(uint64_t a1, void *a2, void *a3)
{
  double v7 = v6;
  +[MCAnimationPathKeyframed timeForKeyframe:withPlugTiming:]( &OBJC_CLASS___MCAnimationPathKeyframed,  "timeForKeyframe:withPlugTiming:",  a3,  *(void *)(a1 + 32));
  if (v7 < v9) {
    return -1LL;
  }
  if (v7 > v9) {
    return 1LL;
  }
  uint64_t v11 = objc_opt_class(&OBJC_CLASS___MCAnimationKeyframeFunction, v8);
  double v13 = 0.0;
  double v14 = 0.0;
  if ((objc_opt_isKindOfClass(a2, v11) & 1) != 0)
  {
    [a2 duration];
    double v14 = v15;
  }

  uint64_t v16 = objc_opt_class(&OBJC_CLASS___MCAnimationKeyframeFunction, v12);
  if ((objc_opt_isKindOfClass(a3, v16) & 1) != 0)
  {
    [a3 duration];
    double v13 = v17;
  }

  if (v14 > v13) {
    return 1LL;
  }
  else {
    return -1LL;
  }
}

id TimeForKeyframeAttributesInPlug(id result, uint64_t a2, void *a3)
{
  if (a3)
  {
    if ((int)result > 100)
    {
      switch((_DWORD)result)
      {
        case 'e':
          return [a3 phaseInDuration];
        case 'f':
LABEL_19:
          [a3 phaseInDuration];
          [a3 loopDuration];
          return [a3 numberOfLoops];
        case 'g':
          return [a3 fullDuration];
      }
    }

    else
    {
      switch((int)result)
      {
        case 0:
          return [a3 fullDuration];
        case 1:
          return [a3 phaseInDuration];
        case 2:
          return [a3 phaseInDuration];
        case 3:
        case 4:
          goto LABEL_19;
        case 5:
          [a3 phaseInDuration];
          [a3 loopDuration];
          [a3 numberOfLoops];
          goto LABEL_15;
        case 6:
          [a3 fullDuration];
LABEL_15:
          BOOL result = [a3 phaseOutDuration];
          break;
        case 7:
          BOOL result = [a3 fullDuration];
          break;
        default:
          return result;
      }
    }
  }

  return result;
}

void sub_7FB3C(_Unwind_Exception *a1)
{
}

void sub_7FC18(_Unwind_Exception *a1)
{
}

void sub_7FDB4(_Unwind_Exception *a1)
{
}

LABEL_48:
          *a5 = 1;
          return;
        }

        if (a4) {
          *a4 = 1;
        }
        a5 = a6;
        if (a6) {
          goto LABEL_48;
        }
      }
    }
  }

            if (objc_msgSend(objc_msgSend(v4, "objectForKey:", kMPAuthoringAudioScalingMode), "integerValue") == (char *)&dword_0 + 1) {
              -[MPAuthoringController scaleDurationsInDocument:withOptions:]( self,  "scaleDurationsInDocument:withOptions:",  a3,  v11);
            }
            -[MPAuthoringController matchDurationsForLayers:withOptions:]( self,  "matchDurationsForLayers:withOptions:",  [a3 layers],  v11);
            -[MPAuthoringController fillDurationsForLayers:withOptions:]( self,  "fillDurationsForLayers:withOptions:",  [a3 layers],  v11);
LABEL_51:
            double v41 = -[AVAudioTimePitchAlgorithm numberWithBool:]((id)v12[234], "numberWithBool:", 0LL);
            [a3 setDocumentAttribute:v41 forKey:kMPDocumentPreparedForExport[0]];
            objc_msgSend(objc_msgSend(a3, "montage"), "unlock");
            return;
          }

      double v62 = *(float *)&v59;
      if (*(float *)&v59 <= 0.0)
      {
        double v62 = *(float *)&v59;
        goto LABEL_203;
      }

      goto LABEL_56;
    }

double smoothFlipUpProgress(double a1)
{
  return Spline1(a1, 0.0, 1.0, 0.9, 1.0, 0.0, 0.0, 1.0, 1.0);
}

double smoothMoveProgress(double a1)
{
  return Spline1(a1, 0.0, 0.5, 0.5, 1.0, 0.0, 0.0, 1.0, 1.0);
}

double smoothOpacityProgress(double a1)
{
  return 1.0 - (a1 + -1.0) * (a1 + -1.0);
}

double smoothColorProgress(double a1)
{
  float v1 = (a1 + -0.5) * 3.14159274;
  return (sinf(v1) + 1.0) * 0.5;
}

uint64_t MainProgressCallback(uint64_t a1, double a2, double a3, double a4)
{
  LODWORD(a3) = *(_DWORD *)(a1 + 16);
  LODWORD(a4) = *(_DWORD *)(a1 + 20);
  return (*(uint64_t (**)(void, double))a1)( *(void *)(a1 + 8),  (a2 + (double)*(unint64_t *)&a3 * 100.0) / (double)*(unint64_t *)&a4);
}

void sub_85904(_Unwind_Exception *a1)
{
}

void sub_85960(_Unwind_Exception *a1)
{
}

void sub_86348(_Unwind_Exception *exception_object)
{
}

void sub_86524(_Unwind_Exception *a1)
{
}

void sub_865A4(_Unwind_Exception *a1)
{
}

void sub_86638(_Unwind_Exception *a1)
{
}

void sub_86774(_Unwind_Exception *a1)
{
}

void sub_867D4(_Unwind_Exception *a1)
{
}

void sub_8682C(_Unwind_Exception *a1)
{
}

void sub_868DC(_Unwind_Exception *a1)
{
}

void sub_87810(_Unwind_Exception *a1)
{
}

void sub_87B88(_Unwind_Exception *a1)
{
}

void sub_89308(_Unwind_Exception *a1)
{
}

double smoothPhaseOutProgress1(double a1)
{
  if (a1 >= 0.5) {
    return a1 * 1.5 + -0.25;
  }
  float v1 = (a1 + -0.5) * 3.14159274;
  return (float)((float)(sinf(v1) + 1.0) * 0.5);
}

void sub_89D88( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10)
{
  if (a2 == 1)
  {
    double v15 = __cxa_begin_catch(a1);
    uint64_t v16 = v15[2];
    a9 = *(_OWORD *)v15;
    a10 = v16;
    [v11 setLastError:&a9];
    if (v10) {
      void *v10 = [v11[2] localizedDescription];
    }

    __cxa_end_catch();
    JUMPOUT(0x89D68LL);
  }

  _Unwind_Resume(a1);
}

void sub_8A28C(_Unwind_Exception *a1)
{
}

double sub_8A404(uint64_t a1)
{
  return *(double *)(a1 + 16);
}

uint64_t sub_8A40C()
{
  return 1LL;
}

uint64_t sub_8A414()
{
  return 0LL;
}

uint64_t sub_8A41C()
{
  return 1LL;
}

uint64_t sub_8A424()
{
  return 15LL;
}

uint64_t sub_8A42C()
{
  return 0LL;
}

uint64_t sub_8A434()
{
  return 0LL;
}

void *sub_8A444()
{
  v0 = sub_122A0C(0x18uLL);
  sub_1387F0(v0);
  void *v0 = off_24E1B0;
  v0[2] = 0LL;
  return v0;
}

void sub_8A480(_Unwind_Exception *a1)
{
}

void *sub_8A498(uint64_t a1)
{
  uint64_t v2 = sub_122A0C(0x18uLL);
  uint64_t v3 = *(void *)(a1 + 16);
  sub_1387F0(v2);
  void *v2 = off_24E1B0;
  v2[2] = v3;
  return v2;
}

void sub_8A4E4(_Unwind_Exception *a1)
{
}

void sub_8A500(void *a1)
{
}

void sub_8A524(_Unwind_Exception *a1)
{
}

int64_t sub_8A53C(NSIndexSet *self, SEL a2, int64_t a3)
{
  int64_t v5 = -[NSIndexSet firstIndex](self, "firstIndex");
  if (v5 != 0x7FFFFFFFFFFFFFFFLL && a3)
  {
    int64_t v6 = a3 - 1;
    do
    {
      int64_t v7 = v6;
      int64_t v5 = -[NSIndexSet indexGreaterThanIndex:](self, "indexGreaterThanIndex:", v5);
      if (v5 == 0x7FFFFFFFFFFFFFFFLL) {
        break;
      }
      int64_t v6 = v7 - 1;
    }

    while (v7);
  }

  return v5;
}

NSIndexSet *__cdecl sub_8A5A8(NSIndexSet *self, SEL a2, int64_t a3)
{
  int64_t v5 = (NSIndexSet *)+[NSMutableIndexSet indexSet](&OBJC_CLASS___NSMutableIndexSet, "indexSet");
  NSUInteger v6 = -[NSIndexSet firstIndex](self, "firstIndex");
  if (v6 != 0x7FFFFFFFFFFFFFFFLL)
  {
    for (NSUInteger i = v6; i != 0x7FFFFFFFFFFFFFFFLL; NSUInteger i = -[NSIndexSet indexGreaterThanIndex:](self, "indexGreaterThanIndex:", i))
      -[NSIndexSet addIndex:](v5, "addIndex:", i + a3);
  }

  return v5;
}

NSIndexSet *__cdecl sub_8A628(NSIndexSet *self, SEL a2, int64_t a3)
{
  int64_t v5 = (NSIndexSet *)+[NSMutableIndexSet indexSet](&OBJC_CLASS___NSMutableIndexSet, "indexSet");
  NSUInteger v6 = -[NSIndexSet firstIndex](self, "firstIndex");
  if (v6 != 0x7FFFFFFFFFFFFFFFLL)
  {
    for (int64_t i = v6; i != 0x7FFFFFFFFFFFFFFFLL; int64_t i = -[NSIndexSet indexGreaterThanIndex:](self, "indexGreaterThanIndex:", i))
    {
      if (i <= a3) {
        -[NSIndexSet addIndex:](v5, "addIndex:", i);
      }
    }
  }

  return v5;
}

LABEL_28:
            double v33 = 0;
            goto LABEL_69;
          }
        }

        double v33 = 1;
LABEL_69:
        if (v141->_ignorePanoramas) {
          double v33 = 1;
        }
        double v147 = v33;
        double v50 = v156;
        double v154 = v14;
        double v155 = v28;
        if (![v156 count]) {
          goto LABEL_234;
        }
        double v157 = [v156 mutableCopy];
        double v163 = [a11 mutableCopy];
        double v193 = 0u;
        double v194 = 0u;
        double v195 = 0u;
        double v196 = 0u;
        double v51 = [v156 countByEnumeratingWithState:&v193 objects:v208 count:16];
        if (v51)
        {
          double v52 = v51;
          double v159 = *(void *)v194;
          do
          {
            for (int64_t i = 0LL; i != v52; int64_t i = (char *)i + 1)
            {
              if (*(void *)v194 != v159) {
                objc_enumerationMutation(v156);
              }
              double v54 = *(void **)(*((void *)&v193 + 1) + 8LL * (void)i);
              [v54 floatValue];
              double v56 = v55;
              double v57 = [v163 copy];
              double v189 = 0u;
              double v190 = 0u;
              double v191 = 0u;
              double v192 = 0u;
              double v58 = [v57 countByEnumeratingWithState:&v189 objects:v207 count:16];
              if (v58)
              {
                double v59 = v58;
                double v60 = *(void *)v190;
                do
                {
                  for (j = 0LL; j != v59; j = (char *)j + 1)
                  {
                    if (*(void *)v190 != v60) {
                      objc_enumerationMutation(v57);
                    }
                    double v62 = *(void **)(*((void *)&v189 + 1) + 8LL * (void)j);
                    [v62 floatValue];
                    double v64 = v63 < 1.0;
                    if (v56 >= 1.0) {
                      double v64 = 0;
                    }
                    if (v63 >= 1.0 && v56 >= 1.0) {
                      double v64 = 1;
                    }
                    if (v63 < v56 && v64)
                    {
                      [v163 removeObject:v62];
                      [v157 removeObject:v54];
                      goto LABEL_96;
                    }
                  }

                  double v59 = [v57 countByEnumeratingWithState:&v189 objects:v207 count:16];
                }

                while (v59);
              }

          if ((v24 & v15) != 1
            || (double v25 = -[MPAuthoringController loopTransitionFromOptions:](self, "loopTransitionFromOptions:", v11),
                +[MPAuthoringUtilities transitionDurationFromOptions:]( MPAuthoringUtilities,  "transitionDurationFromOptions:",  v11),  objc_msgSend(v25, "setDuration:"),  !v25))
          {
LABEL_33:
            if ([v20 transition])
            {
              int v30 = [v20 userInfoAttributeForKey:@"savedExportDuration"];
              [v20 setTransition:0];
              if (v30)
              {
                [v30 doubleValue];
                if (v31 > 0.0)
                {
                  [v30 doubleValue];
LABEL_47:
                  objc_msgSend(v20, "setDuration:");
                  goto LABEL_48;
                }
              }

              if (![v20 countOfEffects])
              {
                [v20 introTransitionDuration];
                goto LABEL_47;
              }
            }

      ++v27;
      p_vtable = (void **)(&OBJC_CLASS___MPEffect + 24);
      if (v25 == v27) {
        goto LABEL_31;
      }
    }

    double v31 = v116;
LABEL_26:
    [v31 addIndex:v27];
    if (v29 == 6) {
      ++v26;
    }
    goto LABEL_28;
  }

  float32x2_t v26 = 0LL;
LABEL_31:
  double v32 = (char *)[v123 count];
  double v33 = [v124 count];
  double v34 = (unint64_t)[v116 count];
  double v35 = [obj count];
  if (v35 != [a3 count]
    || (double v36 = &v32[(void)v33 + v34], v120 >= 1) && !v118 && !v17 && !v18 && !v36
    || !v120 && v118 >= 1 && !v17 && !v18 && !v36
    || !v120 && !v118 && v17 >= 1 && !v18 && !v36
    || v26 == v17 + v18 + v118 + v120)
  {
    uint64_t v8 = +[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array");
    if ([a3 count])
    {
      double v37 = 0LL;
      do
        objc_msgSend( v8,  "addObject:",  +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", v37++));
      while (v37 < (unint64_t)[a3 count]);
    }

    return v8;
  }

  double v105 = (uint64_t)&v32[(void)v33 + v34];
  unint64_t v39 = +[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array");
  double v111 = +[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array");
  double v40 = +[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array");
  double v114 = +[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array");
  double v117 = +[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array");
  double v139 = 0u;
  double v140 = 0u;
  double v141 = 0u;
  double v142 = 0u;
  double v110 = v39;
  double v113 = v40;
  double v121 = [a3 countByEnumeratingWithState:&v139 objects:v146 count:16];
  if (!v121) {
    goto LABEL_92;
  }
  double v41 = 0;
  double v42 = 0LL;
  double v115 = 0LL;
  double v106 = 0LL;
  double v107 = 0LL;
  double v108 = 0LL;
  double v109 = 0LL;
  double v119 = *(void *)v140;
  do
  {
    CGFloat v43 = 0LL;
    do
    {
      if (*(void *)v140 != v119) {
        objc_enumerationMutation(a3);
      }
      float v44 = -[NSMutableDictionary objectForKey:]( self->_cachedROIInformation,  "objectForKey:",  *(void *)(*((void *)&v139 + 1) + 8LL * (void)v43));
      objc_msgSend(objc_msgSend(v44, "objectForKey:", @"aspectRatio"), "floatValue");
      double v46 = v45;
      objc_msgSend(objc_msgSend(v44, "objectForKey:", @"imageAspectRatio"), "floatValue");
      double v48 = v47;
      double v49 = objc_msgSend(objc_msgSend(v44, "objectForKey:", @"fitsInExtraWide"), "BOOLValue");
      double v50 = objc_msgSend(objc_msgSend(v44, "objectForKey:", @"roiCount"), "integerValue");
      double v51 = objc_msgSend(objc_msgSend(v44, "objectForKey:", @"wasFlipped"), "BOOLValue");
      if (v46 < 0.5 && ([v123 count] || objc_msgSend(v116, "count")))
      {
        double v52 = +[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", (char *)v43 + v42);
        double v53 = v117;
LABEL_65:
        [v53 addObject:v52];
        goto LABEL_66;
      }

      if (v46 > 2.0 && ([v124 count] || objc_msgSend(v116, "count")))
      {
        double v52 = +[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", (char *)v43 + v42);
        double v53 = v114;
        goto LABEL_65;
      }

      if (v115 < v112 && v48 > 1.0 && ((v49 ^ 1) & 1) == 0)
      {
        objc_msgSend( v113,  "addObject:",  +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", (char *)v43 + v42));
        ++v115;
        goto LABEL_66;
      }

      if (v46 <= 1.0) {
        double v54 = v51;
      }
      else {
        double v54 = 0;
      }
      if (v46 <= 1.0 && v54 == 0)
      {
        if ((uint64_t)v50 <= 1)
        {
          ++v109;
          double v52 = +[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", (char *)v43 + v42);
          double v53 = v110;
          goto LABEL_65;
        }

        float v61 = objc_msgSend(objc_msgSend(v44, "objectForKey:", @"intersects"), "BOOLValue");
        double v57 = +[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", (char *)v43 + v42);
        if (v61)
        {
          double v58 = v110;
          double v59 = (char *)[v110 count];
          double v60 = v109;
          goto LABEL_87;
        }

        [v110 insertObject:v57 atIndex:v107++];
      }

      else
      {
        if ((uint64_t)v50 <= 1)
        {
          ++v108;
          double v52 = +[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", (char *)v43 + v42);
          double v53 = v111;
          goto LABEL_65;
        }

        double v56 = objc_msgSend(objc_msgSend(v44, "objectForKey:", @"intersects"), "BOOLValue");
        double v57 = +[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", (char *)v43 + v42);
        if (v56)
        {
          double v58 = v111;
          double v59 = (char *)[v111 count];
          double v60 = v108;
LABEL_87:
          [v58 insertObject:v57 atIndex:&v59[-v60]];
          goto LABEL_66;
        }

        [v111 insertObject:v57 atIndex:v106++];
      }

        [a12 localAspectRatio];
        double v60 = v51 * v59;
        float v61 = v55[1];
        double v62 = v55[2];
        if (v61 == 0.0) {
          CGFloat v63 = 0.0;
        }
        else {
          CGFloat v63 = 0.00999999978;
        }
        if (v62 == 0.0) {
          double v64 = 0.0;
        }
        else {
          double v64 = 0.00999999978;
        }
        double v65 = *((void *)v55 + 3);
        CGFloat v66 = *((void *)v55 + 4);
        double v82 = CGRectInset(*(CGRect *)&v61, v63, v64);
        CGFloat v67 = *(double *)(v50 + 56);
        *(float *)&CGFloat v67 = v67;
        -[MRTiledSprite subtractSpriteAtPosition:withSize:zRotation:andOpaqueRect:inContext:]( v40,  "subtractSpriteAtPosition:withSize:zRotation:andOpaqueRect:inContext:",  a12,  v52,  v60,  v53,  v54,  v67,  *(void *)&v82.origin.x,  *(void *)&v82.origin.y,  *(void *)&v82.size.width,  *(void *)&v82.size.height);
      }

      double v47 = [v45 countByEnumeratingWithState:&v72 objects:v80 count:16];
      if (!v47)
      {
LABEL_36:
        [*(id *)((char *)&v42->mFrameProviders + 1) setObject:v40 forKey:v68];

        double v25 = v69;
        goto LABEL_37;
      }
    }
  }

  double v40 = v39;
LABEL_37:
  v84.origin.double x = CGRectZero.origin.x;
  v84.origin.double y = CGRectZero.origin.y;
  v84.size.double width = CGRectZero.size.width;
  v84.size.double height = CGRectZero.size.height;
  v83.origin.double y = v70;
  v83.origin.double x = v71;
  v83.size.double width = v23;
  v83.size.double height = v24;
  if (CGRectEqualToRect(v83, v84))
  {
    [a12 blend:2];
    -[MRTiledSprite renderImage:inContext:](v40, "renderImage:inContext:", v25, a12);
  }

  else
  {
    -[MRTiledSprite renderImageInner:inContext:](v40, "renderImageInner:inContext:", v25, a12);
    [a12 blend:2];
    -[MRTiledSprite renderImageOuter:inContext:](v40, "renderImageOuter:inContext:", v25, a12);
  }

    objc_sync_enter(self);
    -[MRImage releaseByUser](self->super._image, "releaseByUser");
    self->super._image = (MRImage *)-[MRImage retainByUser](v18, "retainByUser");
    objc_sync_exit(self);
    return v18;
  }

  return -[MRImage retainByUser](image, "retainByUser");
}

LABEL_96:
            }

            double v50 = v156;
            double v52 = [v156 countByEnumeratingWithState:&v193 objects:v208 count:16];
          }

          while (v52);
        }

        if (v153 >= 1)
        {
          if ([v157 count])
          {
            double v187 = 0u;
            double v188 = 0u;
            double v185 = 0u;
            double v186 = 0u;
            CGFloat v67 = [v50 countByEnumeratingWithState:&v185 objects:v206 count:16];
            if (v67)
            {
              CGFloat v68 = v67;
              double v160 = *(void *)v186;
              do
              {
                for (k = 0LL; k != v68; k = (char *)k + 1)
                {
                  if (*(void *)v186 != v160) {
                    objc_enumerationMutation(v156);
                  }
                  double v70 = *(void **)(*((void *)&v185 + 1) + 8LL * (void)k);
                  [v70 floatValue];
                  float v72 = v71;
                  double v73 = [v163 copy];
                  double v181 = 0u;
                  double v182 = 0u;
                  double v183 = 0u;
                  double v184 = 0u;
                  double v74 = [v73 countByEnumeratingWithState:&v181 objects:v205 count:16];
                  if (v74)
                  {
                    double v75 = v74;
                    double v76 = *(void *)v182;
                    while (2)
                    {
                      for (m = 0LL; m != v75; m = (char *)m + 1)
                      {
                        if (*(void *)v182 != v76) {
                          objc_enumerationMutation(v73);
                        }
                        double v78 = *(void **)(*((void *)&v181 + 1) + 8LL * (void)m);
                        [v78 floatValue];
                        if (v79 < v72)
                        {
                          [v163 removeObject:v78];
                          [v157 removeObject:v70];
                          goto LABEL_115;
                        }
                      }

                      double v75 = [v73 countByEnumeratingWithState:&v181 objects:v205 count:16];
                      if (v75) {
                        continue;
                      }
                      break;
                    }
                  }

LABEL_144:
                }

                __float2 v28 = v155;
                double v83 = [v155 countByEnumeratingWithState:&v177 objects:v204 count:16];
              }

              while (v83);
            }

            if (v153 >= 1)
            {
              if ([v158 count])
              {
                double v171 = 0u;
                double v172 = 0u;
                double v169 = 0u;
                double v170 = 0u;
                double v98 = [v28 countByEnumeratingWithState:&v169 objects:v202 count:16];
                if (v98)
                {
                  double v99 = v98;
                  double v162 = *(void *)v170;
                  do
                  {
                    for (jj = 0LL; jj != v99; jj = (char *)jj + 1)
                    {
                      if (*(void *)v170 != v162) {
                        objc_enumerationMutation(v155);
                      }
                      double v101 = *(void **)(*((void *)&v169 + 1) + 8LL * (void)jj);
                      [v101 floatValue];
                      double v103 = v102;
                      double v104 = [v164 copy];
                      double v165 = 0u;
                      double v166 = 0u;
                      double v167 = 0u;
                      double v168 = 0u;
                      double v105 = [a11 countByEnumeratingWithState:&v165 objects:v201 count:16];
                      if (v105)
                      {
                        double v106 = v105;
                        double v107 = *(void *)v166;
                        while (2)
                        {
                          for (kk = 0LL; kk != v106; kk = (char *)kk + 1)
                          {
                            if (*(void *)v166 != v107) {
                              objc_enumerationMutation(a11);
                            }
                            double v109 = *(void **)(*((void *)&v165 + 1) + 8LL * (void)kk);
                            [v109 floatValue];
                            if (v110 > v103)
                            {
                              [v164 removeObject:v109];
                              [v158 removeObject:v101];
                              goto LABEL_163;
                            }
                          }

                          double v106 = [a11 countByEnumeratingWithState:&v165 objects:v201 count:16];
                          if (v106) {
                            continue;
                          }
                          break;
                        }
                      }

          double v75 = (char *)v75 + 1;
        }

        while (v72 != v75);
        double v82 = [obj countByEnumeratingWithState:&v135 objects:v145 count:16];
        float v72 = v82;
        v73 += (uint64_t)v75;
      }

      while (v82);
    }

    double v133 = 0u;
    double v134 = 0u;
    double v131 = 0u;
    double v132 = 0u;
    double v83 = [obj countByEnumeratingWithState:&v131 objects:v144 count:16];
    double v84 = v111;
    if (v83)
    {
      double v85 = v83;
      double v86 = 0LL;
      double v87 = *(void *)v132;
      do
      {
        for (m = 0LL; m != v85; m = (char *)m + 1)
        {
          if (*(void *)v132 != v87) {
            objc_enumerationMutation(obj);
          }
          double v89 = *(void **)(*((void *)&v131 + 1) + 8LL * (void)m);
          if (((unint64_t)objc_msgSend(objc_msgSend(v8, "objectAtIndex:", (char *)m + v86), "integerValue") & 0x8000000000000000) != 0)
          {
            [v89 floatValue];
            if (v90 > 0.95)
            {
              [v89 floatValue];
              if (v91 < 1.075)
              {
                if (self->_logLevel >= 2)
                {
                  double v84 = v111;
                  -[NSMutableDictionary setObject:forKey:]( self->_stats,  "setObject:forKey:",  +[NSNumber numberWithInteger:]( NSNumber,  "numberWithInteger:",  (char *)objc_msgSend( -[NSMutableDictionary objectForKey:]( self->_stats,  "objectForKey:",  @"numOfDZSquares"),  "integerValue")
                    + 1),
                    @"numOfDZSquares");
                }

                double v92 = v84;
                if ([v84 count]
                  || (double v92 = v110, [v110 count])
                  || (double v92 = v113, [v113 count]))
                {
                  objc_msgSend( v8,  "replaceObjectAtIndex:withObject:",  (char *)m + v86,  +[NSNumber numberWithInteger:]( NSNumber,  "numberWithInteger:",  objc_msgSend(objc_msgSend(v92, "objectAtIndex:", 0), "integerValue")));
                  [v92 removeObjectAtIndex:0];
                }
              }
            }
          }
        }

        double v85 = [obj countByEnumeratingWithState:&v131 objects:v144 count:16];
        v86 += (uint64_t)m;
      }

      while (v85);
    }

    double v129 = 0u;
    double v130 = 0u;
    double v127 = 0u;
    double v128 = 0u;
    double v93 = [obj countByEnumeratingWithState:&v127 objects:v143 count:16];
    if (v93)
    {
      double v94 = v93;
      double v95 = 0LL;
      double v96 = *(void *)v128;
      double v122 = v8;
      do
      {
        for (n = 0LL; n != v94; n = (char *)n + 1)
        {
          if (*(void *)v128 != v96) {
            objc_enumerationMutation(obj);
          }
          double v98 = (char *)n + v95;
          double v99 = *(void **)(*((void *)&v127 + 1) + 8LL * (void)n);
          if (((unint64_t)objc_msgSend(objc_msgSend(v8, "objectAtIndex:", (char *)n + v95), "integerValue") & 0x8000000000000000) != 0)
          {
            if (self->_logLevel >= 2)
            {
              uint64_t v8 = v122;
              -[NSMutableDictionary setObject:forKey:]( self->_stats,  "setObject:forKey:",  +[NSNumber numberWithInteger:]( NSNumber,  "numberWithInteger:",  (char *)objc_msgSend( -[NSMutableDictionary objectForKey:]( self->_stats,  "objectForKey:",  @"numOfDZFallbacks"),  "integerValue")
                + 1),
                @"numOfDZFallbacks");
            }

            [v99 floatValue];
            if (v100 < 1.0) {
              double v101 = v117;
            }
            else {
              double v101 = v114;
            }
            double v102 = [v101 count];
            if (v101 == v114) {
              double v103 = v117;
            }
            else {
              double v103 = v114;
            }
            if (!v102) {
              double v101 = v103;
            }
            if ([v101 count])
            {
              objc_msgSend( v8,  "replaceObjectAtIndex:withObject:",  v98,  +[NSNumber numberWithInteger:]( NSNumber,  "numberWithInteger:",  objc_msgSend(objc_msgSend(v101, "objectAtIndex:", 0), "integerValue")));
              [v101 removeObjectAtIndex:0];
            }

            else
            {
              objc_msgSend( v8,  "replaceObjectAtIndex:withObject:",  v98,  +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", 0));
            }
          }
        }

        double v94 = [obj countByEnumeratingWithState:&v127 objects:v143 count:16];
        v95 += (uint64_t)n;
      }

      while (v94);
    }
  }

  else
  {
    uint64_t v8 = +[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array");
    if ([a3 count])
    {
      double v104 = 0LL;
      do
        objc_msgSend( v8,  "addObject:",  +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", v104++));
      while (v104 < (unint64_t)[a3 count]);
    }
  }

  return v8;
}

LABEL_163:
                    }

                    double v99 = [v155 countByEnumeratingWithState:&v169 objects:v202 count:16];
                  }

                  while (v99);
                }
              }
            }

            double v81 = [v158 count] == 0;

            double v14 = v154;
          }

          else
          {
            double v81 = 1;
          }
        }

        double v111 = v148 + v149;
        double v112 = v148 + v149 + v151;
        a8 = v140;
        if (v143 == v112 + v150 && v149 <= a10 && v147 && v81)
        {
          double v113 = v111 == a3 && v150 == a4;
          double v114 = v113;
          if (v113)
          {
            double v115 = v146;
            double v117 = v144;
            double v116 = v145;
          }

          else
          {
            double v115 = v146;
            double v117 = v144;
            double v116 = v145;
            if (v151) {
              double v114 = v151 == a3 && v150 == a4
            }
                  || v151 == a4 && v111 == a3
                  || v151 == v143
                  || v150 + v151 == a4
                  || v112 == a3;
          }

          double v122 = !v114;
          if (a9) {
            double v122 = 1;
          }
          if (!v117) {
            double v122 = 1;
          }
          if (a9 >= 1 && v116 != 0) {
            double v122 = 0;
          }
          double v124 = v114 & v122;
          if (v115 < a9) {
            double v125 = v124;
          }
          else {
            double v125 = 0;
          }
          if ((v125 & 1) == 0 && v124) {
            -[NSMutableIndexSet addIndex:](v132, "addIndex:", v14);
          }
        }

        ++v14;
        double v17 = v152 + 1;
      }

      while ((id)(v152 + 1) != v142);
      double v142 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( obj,  "countByEnumeratingWithState:objects:count:",  &v197,  v209,  16LL);
    }

    while (v142);
  }

  if (!-[NSMutableIndexSet count](v132, "count"))
  {

    return 0LL;
  }

  if ((unint64_t)-[NSMutableIndexSet count](v132, "count") >= 2)
  {
    double v126 = -[NSMutableIndexSet firstIndex](v132, "firstIndex");
    if (v126 != (id)0x7FFFFFFFFFFFFFFFLL)
    {
      double v127 = v126;
      do
      {
        if ((unint64_t)-[NSMutableIndexSet count](v132, "count") <= 1)
        {
          double v127 = -[NSMutableIndexSet indexGreaterThanIndex:](v132, "indexGreaterThanIndex:", v127);
        }

        else
        {
          double v128 = -[NSMutableIndexSet containsIndex:](v141->_ignoreIndices, "containsIndex:", v127);
          double v127 = -[NSMutableIndexSet indexGreaterThanIndex:](v132, "indexGreaterThanIndex:", v127);
          if (v128) {
            -[NSMutableIndexSet removeIndex:]( v132,  "removeIndex:",  -[NSMutableIndexSet indexLessThanIndex:](v132, "indexLessThanIndex:", v127));
          }
        }
      }

      while (v127 != (id)0x7FFFFFFFFFFFFFFFLL);
    }
  }

  if (!a12
    || (double v129 = -[MPWeighter getRandomIndexInSubset:withPreviousTags:]( v141,  "getRandomIndexInSubset:withPreviousTags:",  v132,  a12),  v129 == (id)0x7FFFFFFFFFFFFFFFLL))
  {
    double v130 = -[MPWeighter getRandomIndexInSubset:](v141, "getRandomIndexInSubset:", v132);

    if (v130 != (id)0x7FFFFFFFFFFFFFFFLL) {
      return -[NSMutableArray objectAtIndex:](v141->_items, "objectAtIndex:", v130);
    }
    return 0LL;
  }

  double v130 = v129;

  return -[NSMutableArray objectAtIndex:](v141->_items, "objectAtIndex:", v130);
}

LABEL_31:
        ;
      }

      uint64_t v8 = [a4 countByEnumeratingWithState:&v34 objects:v39 count:16];
      LOBYTE(v21) = 1;
      if (v8) {
        continue;
      }
      break;
    }
  }

  else
  {
    LOBYTE(v21) = 1;
  }

  return (char)v21;
}

      LOBYTE(v3) = 1;
    }
  }

  return (char)v3;
}

  if (!objc_msgSend(objc_msgSend(a5, "allSlides"), "count")) {
    goto LABEL_42;
  }
  if ((unint64_t)(v16 - 1) > 1)
  {
    double v40 = objc_msgSend(objc_msgSend(a5, "orderedVideoPaths"), "mutableCopy");
    objc_msgSend( v40,  "insertObjects:atIndexes:",  v15,  +[NSIndexSet indexSetWithIndexesInRange:]( NSIndexSet,  "indexSetWithIndexesInRange:",  a4,  -[NSMutableArray count](v15, "count")));
    [a5 setVideoPaths:v40];

    -[MPAuthoringController _reorderImagesInDocument:withOptions:](v29, "_reorderImagesInDocument:withOptions:", a5, v6);
  }

  else
  {
    double v31 = (char *)a4;
    double v32 = objc_autoreleasePoolPush();
    -[MPAuthoringController setAuthoredDocument:](v29, "setAuthoredDocument:", a5);
    objc_msgSend(objc_msgSend(a5, "montage"), "lock");
    double v33 = [a5 mainLayers];
    if ([v33 count])
    {
      double v98 = v32;
      double v34 = [v33 lastObject];
      if ((uint64_t)[v34 countOfEffectContainers] >= 1)
      {
        double v35 = 0LL;
        if (!objc_msgSend(objc_msgSend(v34, "objectInEffectContainersAtIndex:", 0), "countOfEffects"))
        {
          double v35 = 0LL;
          do
            ++v35;
          while (!objc_msgSend(objc_msgSend(v34, "objectInEffectContainersAtIndex:", v35), "countOfEffects"));
        }

        v31 += v35;
        if ((uint64_t)v31 >= (uint64_t)[v34 countOfEffectContainers])
        {
          if ((uint64_t)objc_msgSend( objc_msgSend(objc_msgSend(v34, "effectContainers"), "lastObject"),  "countOfEffects") < 1)
          {
            double v31 = (char *)[v34 countOfEffectContainers];
          }

          else if (!-[MPAuthoringController _numberOfSlidesForOutroInLayer:withOptions:]( v29,  "_numberOfSlidesForOutroInLayer:withOptions:",  v34,  v6))
          {
            double v31 = (char *)[v34 countOfEffectContainers] - 1;
          }
        }
      }

      else {
        double v93 = -[MPAuthoringController _grabAndRemoveTitleEffectFromDocument:withOptions:]( v29,  "_grabAndRemoveTitleEffectFromDocument:withOptions:",  a5,  v6);
      }
      CGFloat v43 = +[NSMutableDictionary dictionaryWithDictionary:]( &OBJC_CLASS___NSMutableDictionary,  "dictionaryWithDictionary:",  v6);
      float v44 = +[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", 0LL);
      -[NSMutableDictionary setObject:forKey:](v43, "setObject:forKey:", v44, kMPAuthoringUseTitleEffect);
      double v45 = +[NSNumber numberWithInteger:]( NSNumber,  "numberWithInteger:",  objc_msgSend( +[MPStyleManager sharedManager](MPStyleManager, "sharedManager"),  "layerIndexForLayerID:ofStyle:",  objc_msgSend(v34, "layerID"),  objc_msgSend(v6, "objectForKey:", kMPAuthoringStyleID)));
      -[NSMutableDictionary setObject:forKey:](v43, "setObject:forKey:", v45, kMPAuthoringLayerIndex);
      double v46 = +[NSMutableArray arrayWithArray:]( NSMutableArray,  "arrayWithArray:",  [a5 videoPaths]);
      -[NSMutableArray addObjectsFromArray:](v46, "addObjectsFromArray:", v15);
      -[NSMutableDictionary setObject:forKey:](v43, "setObject:forKey:", v46, kMPAuthoringSecondaryPaths);
      double v47 = +[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", 1LL);
      -[NSMutableDictionary setObject:forKey:](v43, "setObject:forKey:", v47, kMPAuthoringAlwaysIncludeLastTransition);
      if ((uint64_t)v31 >= (uint64_t)[v34 countOfEffectContainers])
      {
        -[MPAuthoringController _addVideoPaths:toEndOfLayer:inDocument:withOptions:]( v29,  "_addVideoPaths:toEndOfLayer:inDocument:withOptions:",  v15,  v34,  a5,  v43);
      }

      else
      {
        -[NSMutableDictionary setObject:forKey:](v43, "setObject:forKey:", &stru_259C60, kMPAuthoringOutroEffectID);
        objc_msgSend( v34,  "insertEffectContainers:atIndex:",  -[MPAuthoringController effectContainersWithImages:effects:andOptions:]( v29,  "effectContainersWithImages:effects:andOptions:",  v15,  -[MPAuthoringController effectsForImages:withOptions:](v29, "effectsForImages:withOptions:", v15, v43),  v43),  v31);
      }

      double v95 = v43;
      if (v93) {
        -[MPAuthoringController _readdTitleEffect:toDocument:withOptions:]( v29,  "_readdTitleEffect:toDocument:withOptions:",  v93,  a5,  v6);
      }
      v29->_skipApplyingSettings = 1;
      double v48 = +[MPAuthoringUtilities subtitlesFromOptions:]( &OBJC_CLASS___MPAuthoringUtilities,  "subtitlesFromOptions:",  v6);
      if (v48)
      {
        double v49 = v48;
        if ([v48 count])
        {
          double v129 = 0u;
          double v130 = 0u;
          double v127 = 0u;
          double v128 = 0u;
          double v50 = [v49 countByEnumeratingWithState:&v127 objects:v145 count:16];
          if (v50)
          {
            double v51 = v50;
            double v52 = *(void *)v128;
            do
            {
              for (k = 0LL; k != v51; k = (char *)k + 1)
              {
                if (*(void *)v128 != v52) {
                  objc_enumerationMutation(v49);
                }
                double v54 = *(void *)(*((void *)&v127 + 1) + 8LL * (void)k);
                if ([a3 containsObject:v54]) {
                  -[MPAuthoringController addStyledCaptionToSlide:inDocument:withOptions:]( self,  "addStyledCaptionToSlide:inDocument:withOptions:",  +[MPUtilities slideForPath:inDocument:]( &OBJC_CLASS___MPUtilities,  "slideForPath:inDocument:",  v54,  a5),  a5,  v6);
                }
              }

              double v51 = [v49 countByEnumeratingWithState:&v127 objects:v145 count:16];
            }

            while (v51);
          }
        }
      }

      double v29 = self;
      self->_skipApplyingSettings = 0;
      unint64_t v55 = +[NSValue valueWithRange:]( &OBJC_CLASS___NSValue,  "valueWithRange:",  v31,  -[NSMutableArray count](v15, "count"));
      -[NSMutableDictionary setObject:forKey:](v95, "setObject:forKey:", v55, kMPAuthoringReconfigureIndices);
      if ((objc_msgSend(objc_msgSend(v6, "objectForKey:", @"fastInsert"), "BOOLValue") & 1) == 0)
      {
        -[MPAuthoringController configureFiltersInDocument:withOptions:]( self,  "configureFiltersInDocument:withOptions:",  a5,  v95);
        -[MPAuthoringController reconfigureColorSchemeInDocument:withOptions:]( self,  "reconfigureColorSchemeInDocument:withOptions:",  a5,  v95);
      }

      -[MPAuthoringController configureTransitionsInDocument:withOptions:]( self,  "configureTransitionsInDocument:withOptions:",  a5,  v95);
      -[MPAuthoringController scaleDurationsInDocument:withOptions:]( self,  "scaleDurationsInDocument:withOptions:",  a5,  v95);
      objc_msgSend( +[MPCropController sharedController](MPCropController, "sharedController"),  "cropSlidesInDocument:withOptions:",  a5,  v95);
      double v32 = v98;
    }

    double v56 = objc_msgSend(objc_msgSend(a5, "orderedVideoPaths"), "mutableCopy");
    [a5 setVideoPaths:v56];

    objc_msgSend(objc_msgSend(a5, "montage"), "unlock");
    -[MPAuthoringController cleanup](v29, "cleanup");
    objc_autoreleasePoolPop(v32);
  }

  double v99 = objc_msgSend(objc_msgSend(a5, "orderedVideoPaths"), "mutableCopy");
  if ((uint64_t)[v99 count] >= 1)
  {
    double v125 = 0u;
    double v126 = 0u;
    double v123 = 0u;
    double v124 = 0u;
    obj = [a5 layers];
    double v89 = [obj countByEnumeratingWithState:&v123 objects:v144 count:16];
    if (v89)
    {
      double v88 = *(void *)v124;
      do
      {
        double v57 = 0LL;
        do
        {
          if (*(void *)v124 != v88) {
            objc_enumerationMutation(obj);
          }
          double v90 = v57;
          double v58 = *(void **)(*((void *)&v123 + 1) + 8 * v57);
          if (([v58 isAudioLayer] & 1) == 0)
          {
            double v121 = 0u;
            double v122 = 0u;
            double v119 = 0u;
            double v120 = 0u;
            double v91 = [v58 effectContainers];
            double v94 = [v91 countByEnumeratingWithState:&v119 objects:v143 count:16];
            if (v94)
            {
              double v92 = *(void *)v120;
              do
              {
                double v59 = 0LL;
                do
                {
                  if (*(void *)v120 != v92) {
                    objc_enumerationMutation(v91);
                  }
                  double v96 = v59;
                  double v60 = *(void **)(*((void *)&v119 + 1) + 8 * v59);
                  double v115 = 0u;
                  double v116 = 0u;
                  double v117 = 0u;
                  double v118 = 0u;
                  double v102 = [v60 effects];
                  float v61 = [v102 countByEnumeratingWithState:&v115 objects:v142 count:16];
                  if (v61)
                  {
                    double v62 = v61;
                    CGFloat v63 = *(void *)v116;
                    do
                    {
                      for (m = 0LL; m != v62; m = (char *)m + 1)
                      {
                        if (*(void *)v116 != v63) {
                          objc_enumerationMutation(v102);
                        }
                        double v65 = *(void **)(*((void *)&v115 + 1) + 8LL * (void)m);
                        CGFloat v66 = objc_msgSend( +[MPEffectManager sharedManager](MPEffectManager, "sharedManager"),  "numberOfSecondarySlidesForEffectID:",  objc_msgSend(v65, "effectID"));
                        if ((uint64_t)v66 >= 1)
                        {
                          CGFloat v67 = (unint64_t)v66;
                          CGFloat v68 = +[NSMutableSet set](&OBJC_CLASS___NSMutableSet, "set");
                          double v111 = 0u;
                          double v112 = 0u;
                          double v113 = 0u;
                          double v114 = 0u;
                          BOOL v69 = [v65 secondarySlides];
                          double v70 = [v69 countByEnumeratingWithState:&v111 objects:v141 count:16];
                          if (v70)
                          {
                            double v71 = v70;
                            float v72 = *(void *)v112;
                            do
                            {
                              for (n = 0LL; n != v71; n = (char *)n + 1)
                              {
                                if (*(void *)v112 != v72) {
                                  objc_enumerationMutation(v69);
                                }
                                objc_msgSend( v68,  "addObject:",  objc_msgSend(*(id *)(*((void *)&v111 + 1) + 8 * (void)n), "path"));
                              }

                              double v71 = [v69 countByEnumeratingWithState:&v111 objects:v141 count:16];
                            }

                            while (v71);
                          }

                          if ((unint64_t)[v68 count] < v67)
                          {
                            double v74 = +[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array");
                            double v107 = 0u;
                            double v108 = 0u;
                            double v109 = 0u;
                            double v110 = 0u;
                            double v75 = [v65 slides];
                            double v76 = [v75 countByEnumeratingWithState:&v107 objects:v140 count:16];
                            if (v76)
                            {
                              double v77 = v76;
                              double v78 = *(void *)v108;
                              do
                              {
                                for (iint64_t i = 0LL; ii != v77; iint64_t i = (char *)ii + 1)
                                {
                                  if (*(void *)v108 != v78) {
                                    objc_enumerationMutation(v75);
                                  }
                                  objc_msgSend( v74,  "addObject:",  objc_msgSend(*(id *)(*((void *)&v107 + 1) + 8 * (void)ii), "path"));
                                }

                                double v77 = [v75 countByEnumeratingWithState:&v107 objects:v140 count:16];
                              }

                              while (v77);
                            }

                            double v80 = -[MPAuthoringController pickRandomPathsInArray:excludingPaths:count:]( self,  "pickRandomPathsInArray:excludingPaths:count:",  v99,  v74,  v67);
                            double v103 = 0u;
                            double v104 = 0u;
                            double v105 = 0u;
                            double v106 = 0u;
                            double v81 = [v65 secondarySlides];
                            double v82 = [v81 countByEnumeratingWithState:&v103 objects:v139 count:16];
                            if (v82)
                            {
                              double v83 = v82;
                              double v84 = 0LL;
                              double v85 = *(void *)v104;
                              do
                              {
                                for (jj = 0LL; jj != v83; jj = (char *)jj + 1)
                                {
                                  if (*(void *)v104 != v85) {
                                    objc_enumerationMutation(v81);
                                  }
                                  objc_msgSend( *(id *)(*((void *)&v103 + 1) + 8 * (void)jj),  "setPath:",  objc_msgSend(v80, "objectAtIndex:", (char *)jj + v84));
                                }

                                double v83 = [v81 countByEnumeratingWithState:&v103 objects:v139 count:16];
                                v84 += (uint64_t)jj;
                              }

                              while (v83);
                            }
                          }
                        }
                      }

                      double v62 = [v102 countByEnumeratingWithState:&v115 objects:v142 count:16];
                    }

                    while (v62);
                  }

                  double v59 = v96 + 1;
                }

                while ((id)(v96 + 1) != v94);
                double v94 = [v91 countByEnumeratingWithState:&v119 objects:v143 count:16];
              }

              while (v94);
            }
          }

          double v57 = v90 + 1;
        }

        while ((id)(v90 + 1) != v89);
        double v89 = [obj countByEnumeratingWithState:&v123 objects:v144 count:16];
      }

      while (v89);
    }
  }
}

            unint64_t v38 = +[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array");
            double v83 = 0u;
            double v84 = 0u;
            double v85 = 0u;
            double v86 = 0u;
            unint64_t v39 = [v10 effects];
            double v40 = [v39 countByEnumeratingWithState:&v83 objects:v98 count:16];
            if (v40)
            {
              double v41 = v40;
              double v42 = *(void *)v84;
              do
              {
                for (j = 0LL; j != v41; j = (char *)j + 1)
                {
                  if (*(void *)v84 != v42) {
                    objc_enumerationMutation(v39);
                  }
                  objc_msgSend( v38,  "addObjectsFromArray:",  objc_msgSend(*(id *)(*((void *)&v83 + 1) + 8 * (void)j), "videoPaths"));
                }

                double v41 = [v39 countByEnumeratingWithState:&v83 objects:v98 count:16];
              }

              while (v41);
            }

            obj = -[MPAuthoringController effectContainersWithImages:effects:andOptions:]( self,  "effectContainersWithImages:effects:andOptions:",  v38,  -[MPAuthoringController effectsForImages:withOptions:]( self,  "effectsForImages:withOptions:",  v38,  v60),  v60);
            float v44 = [v10 parentLayer];
            double v45 = (char *)[v10 index];
            if (v69) {
              objc_msgSend( v44,  "removeEffectContainersAtIndices:",  +[NSIndexSet indexSetWithIndex:](NSIndexSet, "indexSetWithIndex:", v45 + 1));
            }
            objc_msgSend( v44,  "removeEffectContainersAtIndices:",  +[NSIndexSet indexSetWithIndex:](NSIndexSet, "indexSetWithIndex:", v45));
            [v44 insertEffectContainers:obj atIndex:v45];
            double v81 = 0u;
            double v82 = 0u;
            double v79 = 0u;
            double v80 = 0u;
            double v65 = [obj countByEnumeratingWithState:&v79 objects:v97 count:16];
            if (v65)
            {
              double v70 = 0LL;
              double v64 = *(void *)v80;
              do
              {
                double v46 = 0LL;
                do
                {
                  if (*(void *)v80 != v64) {
                    objc_enumerationMutation(obj);
                  }
                  CGFloat v66 = v46;
                  double v47 = *(void **)(*((void *)&v79 + 1) + 8 * v46);
                  double v75 = 0u;
                  double v76 = 0u;
                  double v77 = 0u;
                  double v78 = 0u;
                  CGFloat v68 = [v47 effects];
                  double v48 = [v68 countByEnumeratingWithState:&v75 objects:v96 count:16];
                  if (v48)
                  {
                    double v49 = v48;
                    double v50 = *(void *)v76;
                    do
                    {
                      for (k = 0LL; k != v49; k = (char *)k + 1)
                      {
                        if (*(void *)v76 != v50) {
                          objc_enumerationMutation(v68);
                        }
                        double v52 = *(void **)(*((void *)&v75 + 1) + 8LL * (void)k);
                        double v71 = 0u;
                        float v72 = 0u;
                        double v73 = 0u;
                        double v74 = 0u;
                        double v53 = [v52 slides];
                        double v54 = [v53 countByEnumeratingWithState:&v71 objects:v95 count:16];
                        if (v54)
                        {
                          unint64_t v55 = v54;
                          double v56 = *(void *)v72;
                          while (2)
                          {
                            for (m = 0LL; m != v55; m = (char *)m + 1)
                            {
                              if (*(void *)v72 != v56) {
                                objc_enumerationMutation(v53);
                              }
                              double v58 = *(void **)(*((void *)&v71 + 1) + 8LL * (void)m);
                              if (objc_msgSend( objc_msgSend(v58, "path"),  "isEqualToString:",  objc_msgSend(v38, "objectAtIndex:", 0)))
                              {
                                double v70 = v58;
                                goto LABEL_60;
                              }
                            }

                            unint64_t v55 = [v53 countByEnumeratingWithState:&v71 objects:v95 count:16];
                            if (v55) {
                              continue;
                            }
                            break;
                          }
                        }

    operator delete[](v13);
    return (uint64_t)v15;
  }

  if (v14) {
    operator delete[](v14);
  }
  double v15 = 0LL;
  uint64_t v8 = 0LL;
  if (v13) {
    goto LABEL_31;
  }
  return v8;
}

    operator delete[](v13);
    return (uint64_t)v15;
  }

  if (v14) {
    operator delete[](v14);
  }
  double v15 = 0LL;
  uint64_t v8 = 0LL;
  if (v13) {
    goto LABEL_31;
  }
  return v8;
}

    operator delete[](v13);
    return (uint64_t)v15;
  }

  if (v14) {
    operator delete[](v14);
  }
  double v15 = 0LL;
  uint64_t v8 = 0LL;
  if (v13) {
    goto LABEL_31;
  }
  return v8;
}

    operator delete[](v13);
    return (uint64_t)v15;
  }

  if (v14) {
    operator delete[](v14);
  }
  double v15 = 0LL;
  uint64_t v8 = 0LL;
  if (v13) {
    goto LABEL_31;
  }
  return v8;
}

    operator delete[](v13);
    return (uint64_t)v15;
  }

  if (v14) {
    operator delete[](v14);
  }
  double v15 = 0LL;
  uint64_t v8 = 0LL;
  if (v13) {
    goto LABEL_31;
  }
  return v8;
}

    operator delete[](v13);
    return (uint64_t)v15;
  }

  if (v14) {
    operator delete[](v14);
  }
  double v15 = 0LL;
  uint64_t v8 = 0LL;
  if (v13) {
    goto LABEL_31;
  }
  return v8;
}

    operator delete[](v13);
    return (uint64_t)v15;
  }

  if (v14) {
    operator delete[](v14);
  }
  double v15 = 0LL;
  uint64_t v8 = 0LL;
  if (v13) {
    goto LABEL_31;
  }
  return v8;
}

    operator delete[](v13);
    return (uint64_t)v15;
  }

  if (v14) {
    operator delete[](v14);
  }
  double v15 = 0LL;
  uint64_t v8 = 0LL;
  if (v13) {
    goto LABEL_31;
  }
  return v8;
}

    operator delete[](v13);
    return (uint64_t)v15;
  }

  if (v14) {
    operator delete[](v14);
  }
  double v15 = 0LL;
  uint64_t v8 = 0LL;
  if (v13) {
    goto LABEL_31;
  }
  return v8;
}

    operator delete[](v13);
    return (uint64_t)v15;
  }

  if (v14) {
    operator delete[](v14);
  }
  double v15 = 0LL;
  uint64_t v8 = 0LL;
  if (v13) {
    goto LABEL_31;
  }
  return v8;
}

    operator delete[](v13);
    return (uint64_t)v15;
  }

  if (v14) {
    operator delete[](v14);
  }
  double v15 = 0LL;
  uint64_t v8 = 0LL;
  if (v13) {
    goto LABEL_31;
  }
  return v8;
}

    operator delete[](v13);
    return (uint64_t)v15;
  }

  if (v14) {
    operator delete[](v14);
  }
  double v15 = 0LL;
  uint64_t v8 = 0LL;
  if (v13) {
    goto LABEL_31;
  }
  return v8;
}

void sub_8E7B8(_Unwind_Exception *a1)
{
}

void sub_8E840(_Unwind_Exception *a1)
{
}

void sub_8E8AC(_Unwind_Exception *a1)
{
}

void sub_8E92C(_Unwind_Exception *a1)
{
}

void sub_92EFC(_Unwind_Exception *a1)
{
}

void sub_92F58(_Unwind_Exception *a1)
{
}

LABEL_272:
          [v123 setImageSizeScript:0];
          objc_msgSend(v123, "setDefaultSize:", width, height);
          double v117 = (char *)v117 + 1;
          double v116 = v182;
          if (v185 == v117)
          {
            double v116 = (char *)v117 + (void)v182;
            double v185 = [obja countByEnumeratingWithState:&v195 objects:v205 count:16];
            if (!v185) {
              goto LABEL_274;
            }
            continue;
          }

          goto LABEL_235;
        }
      }
    }

    double v176 = v74 + v75;
    double v88 = v164;
    if (v170 != 1) {
      double v88 = 0;
    }
    double v181 = v88;
    double v89 = @"NoBorder";
    if (v163) {
      double v89 = @"RoundedBorder";
    }
    double v184 = v89;
    if (v163) {
      double v90 = @"RoundedBorderSquare";
    }
    else {
      double v90 = @"NoBorderSquare";
    }
    double v91 = @"NoBorderLandscape";
    if ((v163 & v161) != 0) {
      double v91 = @"RoundedBorderLandscape";
    }
    double v165 = v91;
    double v92 = @"NoBorderPortrait";
    if ((v163 & v161) != 0) {
      double v92 = @"RoundedBorderPortrait";
    }
    double v167 = v92;
    double v168 = v90;
    while (1)
    {
      double v93 = -[NSDictionary objectForKey:]( -[MRLayerEffect slideProvidersForElementIDs](self->super.mEffectLayer, "slideProvidersForElementIDs"),  "objectForKey:",  ImageKey(v75));
      if ([v175 isEqualToString:@"black"])
      {
        double v94 = [v169 isEqualToString:@"black"];
        if (v172 == 2 && v170 == 1)
        {
          if (v94)
          {
            if (v79 >= 1.0)
            {
              [v93 imageAspectRatio];
              if (v95 < 1.0)
              {
LABEL_217:
                double v99 = @"FullPortrait";
                goto LABEL_218;
              }
            }
          }
        }
      }

      if (((v63 & 1) != 0 || ([v93 imageAspectRatio], v96 == 1.0))
        && ![v93 canPlay])
      {
        double v99 = v168;
      }

      else
      {
        [v93 imageAspectRatio];
        if (v97 >= 1.0)
        {
          [v93 imageAspectRatio];
          if (v111 <= 1.0)
          {
            [v93 imageAspectRatio];
            double v79 = v113;
            NSLog(@"frameID not expected to be nil here");
            goto LABEL_219;
          }

          double v99 = v165;
        }

        else
        {
          if (([*(id *)((char *)&self->mFrameProviders + 1) containsObject:@"FullPortrait"] & 1) == 0)
          {
            [v93 imageAspectRatio];
            if (v98 >= 0.5) {
              goto LABEL_217;
            }
          }

          double v99 = v167;
        }
      }

LABEL_218:
      [v93 imageAspectRatio];
      double v79 = v112;
      [*(id *)((char *)&self->mFrameProviders + 1) addObject:v99];
LABEL_219:
      if (++v75 >= v176) {
        goto LABEL_222;
      }
    }

    while (1)
    {
      if (![v76 count])
      {

        if ((v181 & 1) != 0 || [obj isEqualToString:@"black"])
        {
          [v93 imageAspectRatio];
          double v100 = v184;
          if (v101 < 1.0)
          {
            double v102 = [*(id *)((char *)&self->mFrameProviders + 1) containsObject:@"FullPortrait"] | v63;
            double v100 = v184;
            if ((v102 & 1) == 0)
            {
              objc_msgSend(v93, "imageAspectRatio", v184);
              double v100 = @"Full";
              if (v103 < 0.5) {
                double v100 = v184;
              }
            }
          }
        }

        else
        {
          double v104 = (unint64_t)[v64 randomInt];
          double v105 = [(id)qword_2B04C8 count];
          double v100 = (const __CFString *)[(id)qword_2B04C8 objectAtIndex:v104 % ((unint64_t)v105 - 3)];
        }

        double v76 = objc_msgSend(objc_msgSend((id)qword_2B04D0, "objectForKey:", v100), "mutableCopy");
      }

      double v106 = (const __CFString *)objc_msgSend( v76,  "objectAtIndex:",  (unint64_t)objc_msgSend(v64, "randomInt")
                                 % (unint64_t)[v76 count]);
      double v107 = (double *)[(id)qword_2B04C0 objectForKey:v106];
      double v108 = v107[9] / v107[10];
      if ((v63 & 1) != 0)
      {
        if (v108 != 1.0) {
          goto LABEL_211;
        }
      }

      else
      {
        if (v108 == 1.0) {
          goto LABEL_211;
        }
        if (v108 < 1.0)
        {
          [v93 imageAspectRatio];
          double v99 = v106;
          if (v109 < 1.0) {
            goto LABEL_212;
          }
        }

        if (v108 < 1.0 || ([v93 imageAspectRatio], v110 < 1.0))
        {
LABEL_211:
          double v99 = 0LL;
          goto LABEL_212;
        }
      }

      double v99 = v106;
LABEL_212:
      [v76 removeObject:v106];
      if (v99) {
        goto LABEL_218;
      }
    }
  }

  self->mIsBreakXL = 1;
  BYTE1(self->mFrameList) = 1;
  if (-[NSDictionary objectForKey:](self->super.mFlattenedAttributes, "objectForKey:", @"pageCount")) {
    int v30 = objc_msgSend( -[NSDictionary objectForKey:](self->super.mFlattenedAttributes, "objectForKey:", @"pageCount"),  "integerValue");
  }
  else {
    int v30 = &dword_0 + 2;
  }
  *(void *)(&self->mIsLoaded + 1) = v30;
  double v48 = -[NSDictionary objectForKey:]( -[MRLayerEffect slideProvidersForElementIDs](self->super.mEffectLayer, "slideProvidersForElementIDs"),  "objectForKey:",  ImageKey(0LL));
  if (-[NSString isEqualToString:](self->super.mEffectID, "isEqualToString:", @"PortfolioSlideBreakP"))
  {
    double v49 = 1;
  }

  else if (-[NSString isEqualToString:]( self->super.mEffectID,  "isEqualToString:",  @"PortfolioSlidePortraitBreak"))
  {
    [v48 imageAspectRatio];
    double v49 = v50 > 2.0;
  }

  else
  {
    double v49 = 0;
  }

  BYTE4(self->mPageCount) = v49;
  if (-[NSString isEqualToString:](self->super.mEffectID, "isEqualToString:", @"PortfolioSlidePortraitBreak"))
  {
    [v48 imageAspectRatio];
    double v52 = v51 < 0.5;
  }

  else
  {
    double v52 = 0;
  }

  HIBYTE(self->mPageCount) = v52;
  double v53 = +[MREffectManager sharedManager](&OBJC_CLASS___MREffectManager, "sharedManager");
  if (!*(NSMutableDictionary **)((char *)&self->mSprites + 1))
  {
    if (BYTE4(self->mPageCount)) {
      double v54 = @"white";
    }
    else {
      double v54 = @"black";
    }
    unint64_t v55 = +[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"%@Page-Left.jpg", v54);
    *(NSMutableDictionary **)((char *)&self->mSprites + 1) = (NSMutableDictionary *)objc_alloc_init(&OBJC_CLASS___MRImageProvider);
    objc_msgSend( *(id *)((char *)&self->mSprites + 1),  "setAssetPath:",  objc_msgSend(v53, "resourcePathForEffectID:andResource:", self->super.mEffectID, v55));
    objc_msgSend(*(id *)((char *)&self->mSprites + 1), "setOriginalImageSize:", 1200.0, 960.0);
    objc_msgSend( *(id *)((char *)&self->mSprites + 1),  "setDefaultSize:",  self->super.mPixelSize.width * 0.5,  self->super.mPixelSize.height);
  }

  if (!*(MRImageProvider **)((char *)&self->mLeftPageProvider + 1))
  {
    if (BYTE4(self->mPageCount)) {
      double v56 = @"white";
    }
    else {
      double v56 = @"black";
    }
    double v57 = +[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"%@Page-Right.jpg", v56);
    *(MRImageProvider **)((char *)&self->mLeftPageProvider + 1) = objc_alloc_init(&OBJC_CLASS___MRImageProvider);
    objc_msgSend( *(id *)((char *)&self->mLeftPageProvider + 1),  "setAssetPath:",  objc_msgSend(v53, "resourcePathForEffectID:andResource:", self->super.mEffectID, v57));
    objc_msgSend(*(id *)((char *)&self->mLeftPageProvider + 1), "setOriginalImageSize:", 1200.0, 960.0);
    objc_msgSend( *(id *)((char *)&self->mLeftPageProvider + 1),  "setDefaultSize:",  self->super.mPixelSize.width * 0.5,  self->super.mPixelSize.height);
  }

  [a4 localAspectRatio];
  -[MREffectPortfolio _updateSizes:](self, "_updateSizes:", v58);
LABEL_3:
  if (self->mRightZoom)
  {
    [a4 localAspectRatio];
    -[MREffectPortfolio _updateSizes:](self, "_updateSizes:", v9);
    self->mRightZoom = 0;
  }

  if (self->mIsBreakXL && !*(MRImageProvider **)((char *)&self->mRightPageProvider + 1))
  {
    *(MRImageProvider **)((char *)&self->mRightPageProvider + 1) = objc_alloc_init(&OBJC_CLASS___MRImageProvider);
    objc_msgSend( *(id *)((char *)&self->mRightPageProvider + 1),  "setAssetPath:",  objc_msgSend( +[MREffectManager sharedManager](MREffectManager, "sharedManager"),  "resourcePathForEffectID:andResource:",  self->super.mEffectID,  @"PageCrease.png"));
    objc_msgSend(*(id *)((char *)&self->mRightPageProvider + 1), "setOriginalImageSize:", 720.0, 116.0);
    [*(id *)((char *)&self->mRightPageProvider + 1) setDefaultSize:self->super.mPixelSize.height * 6.20689678];
  }

  v194.receiver = self;
  v194.super_class = (Class)&OBJC_CLASS___MREffectPortfolio;
  LOBYTE(v10) = -[MREffect prerenderForTime:inContext:withArguments:]( &v194,  "prerenderForTime:inContext:withArguments:",  a4,  a5,  a3);
  double v190 = 0u;
  double v191 = 0u;
  double v192 = 0u;
  double v193 = 0u;
  uint64_t v11 = *(MRImageProvider **)((char *)&self->mPageCreaseProvider + 1);
  uint64_t v12 = [v11 countByEnumeratingWithState:&v190 objects:v204 count:16];
  if (v12)
  {
    double v13 = v12;
    double v14 = *(void *)v191;
    do
    {
      for (j = 0LL; j != v13; j = (char *)j + 1)
      {
        if (*(void *)v191 != v14) {
          objc_enumerationMutation(v11);
        }
        objc_msgSend( objc_msgSend( *(id *)((char *)&self->mPageCreaseProvider + 1),  "objectForKey:",  *(void *)(*((void *)&v190 + 1) + 8 * (void)j)),  "prerenderForTime:inContext:withArguments:",  a4,  a5,  a3);
      }

      double v13 = [v11 countByEnumeratingWithState:&v190 objects:v204 count:16];
    }

    while (v13);
  }

  [*(id *)((char *)&self->mSprites + 1) prerenderForTime:a4 inContext:a5 withArguments:a3];
  [*(id *)((char *)&self->mLeftPageProvider + 1) prerenderForTime:a4 inContext:a5 withArguments:a3];
  if (!-[MRLayer isActivated](self->super.mEffectLayer, "isActivated")) {
    return v10;
  }
  mMainDuration = self->super.mMainDuration;
  double v17 = self->super.mPhaseInDuration + mMainDuration + self->super.mPhaseOutDuration;
  if (BYTE1(self->mPageCount))
  {
    double v18 = v17 * 0.5 + -0.829999983 + -0.5 <= a3;
    float v19 = v17 * 0.5;
  }

  else
  {
    double v18 = BYTE2(self->mPageCount);
    if (!v18) {
      goto LABEL_22;
    }
    double v18 = v17 * 0.5 + -0.5 <= a3;
    float v19 = v17 * 0.5 + 0.829999983;
  }

  if (v19 <= a3) {
    double v18 = 0;
  }
LABEL_22:
  uint64_t v20 = 1;
  if (a3 >= 1.0 && (v18 & 1) == 0) {
    uint64_t v20 = mMainDuration + -1.5 <= a3;
  }
  if (BYTE3(self->mPageCount) || HIBYTE(self->mPageCount))
  {
    if (v20)
    {
LABEL_28:
      objc_msgSend(a5, "preloadQueue", v17);
      goto LABEL_71;
    }

    BOOL v21 = v17 * 0.5 + -0.6665;
    double v22 = v17 * 0.5 + 0.6665;
LABEL_30:
    double v23 = [a5 preloadQueue];
    if (v21 <= a3 && v22 > a3) {
      goto LABEL_71;
    }
    goto LABEL_35;
  }

  if (!BYTE5(self->mPageCount))
  {
    if (BYTE4(self->mPageCount)) {
      double v37 = v20;
    }
    else {
      double v37 = 1;
    }
    if (BYTE4(self->mPageCount)) {
      uint64_t v20 = 1;
    }
    if ((v37 & 1) == 0)
    {
      if (v17 * 0.333 + -0.6665 <= a3 && v17 * 0.333 + 0.6665 > a3) {
        goto LABEL_28;
      }
      BOOL v21 = v17 * 0.666 + -0.6665;
      double v22 = v17 * 0.666 + 0.6665;
      goto LABEL_30;
    }

LABEL_77:
      double v94 = *(void **)(&self->super._isInInteractiveMode + 1);
      double v95 = (MRCroppingSprite *)[v94 objectForKey:v18];
      if (!v95)
      {
        double v95 = objc_alloc_init(&OBJC_CLASS___MRCroppingSprite);
        [v94 setObject:v95 forKey:v18];
      }

      double x = CGPointZero.x;
      double y = CGPointZero.y;
      LODWORD(v96) = 0;
      double v99 = v95;
      double v100 = v20;
      double v101 = a4;
      double v102 = width;
      double v103 = height;
LABEL_80:
      -[MRCroppingSprite renderImageInner:inContext:atPosition:andSize:zRotation:]( v99,  "renderImageInner:inContext:atPosition:andSize:zRotation:",  v100,  v101,  x,  y,  v102,  v103,  v96);
      goto LABEL_81;
    }

    [v19 imageAspectRatio];
    double v22 = v21;
    [v19 imageAspectRatio];
    float v24 = v23;
    [a4 localAspectRatio];
    float32x2_t v26 = v25;
    __float2 v27 = v22 < 1.0;
    __float2 v28 = 2.0 / v24 * v26;
    double v29 = (v24 + v24) / v26;
    if (v22 < 1.0) {
      double width = v29;
    }
    else {
      double width = 2.0;
    }
    if (v27) {
      double height = 2.0;
    }
    else {
      double height = v28;
    }
    [a4 localAspectRatio];
    if (v32 < 1.0)
    {
LABEL_76:
      double v93 = [*(id *)((char *)&self->mSprites + 1) retainedByUserRenderedImageAtTime:a4 inContext:a5 withArguments:a3];
      +[MRCroppingSprite renderDumbImage:inContext:atPosition:andSize:]( &OBJC_CLASS___MRCroppingSprite,  "renderDumbImage:inContext:atPosition:andSize:",  v93,  a4,  0.0,  0.0,  2.0,  2.0);
      [v93 releaseByUser];
      goto LABEL_77;
    }

      if (__ROR8__(0xEEEEEEEEEEEEEEEFLL * ((void)v66 + v63) - 0x888888888888889LL, 1) <= 0x888888888888888uLL)
      {

        double v60 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
      }

      CGFloat v66 = (char *)v66 + 1;
    }

    while (v62 != v66);
    double v76 = [v56 countByEnumeratingWithState:&v93 objects:v113 count:16];
    double v62 = v76;
    v63 += (uint64_t)v66;
  }

  while (v76);
LABEL_86:

  -[NSAutoreleasePool drain](v60, "drain");
  if (v82) {

  }
  return v79;
}

          double v56 = &self->super.mPixelSize;
          objc_msgSend( -[NSDictionary objectForKey:]( -[MRLayerEffect slideProvidersForElementIDs](*p_mEffectLayer, "slideProvidersForElementIDs"),  "objectForKey:",  @"image0"),  "setDefaultSize:",  v56->width,  v56->height * 0.333333343);
          double v58 = v56->width;
          double v57 = v56->height;
LABEL_78:
          objc_msgSend( -[NSDictionary objectForKey:]( -[MRLayerEffect slideProvidersForElementIDs](*p_mEffectLayer, "slideProvidersForElementIDs"),  "objectForKey:",  @"image1"),  "setDefaultSize:",  v58,  v57 * 0.333333343);
          double width = v56->width;
          double v25 = v56->height * 0.333333343;
          goto LABEL_25;
        }
      }
    }

LABEL_93:
      double v111 = 0.5;
      double v112 = v75 * 0.5 + -0.829999983;
      if (v112 <= a3)
      {
        ValueFromBezierPath( (id *)((char *)&self->mTextImage0 + 1),  dbl_2AD3D0,  0.0,  1.0,  (a3 - v112) / 0.829999983,  (uint64_t)&unk_2AD3E8,  3LL);
        double v79 = v117;
        goto LABEL_101;
      }

      goto LABEL_94;
    }
  }

  else
  {
    if (!BYTE2(self->mPageCount))
    {
      double v78 = 0;
      double v79 = 0.0;
      double v77 = 1;
      goto LABEL_102;
    }

    double v77 = v14 || v75 * 0.5 + 0.829999983 > a3;
  }

  double v78 = 0;
  double v79 = 0.0;
  if (v14) {
    goto LABEL_102;
  }
  if (!BYTE2(self->mPageCount)) {
    goto LABEL_102;
  }
  double v111 = 0.5;
  if (v76 < 0.5) {
    goto LABEL_102;
  }
  if (BYTE1(self->mPageCount)) {
    goto LABEL_93;
  }
LABEL_94:
  double v79 = 0.0;
  double v78 = 1;
  if (BYTE2(self->mPageCount))
  {
    double v113 = v75 * v111;
    double v114 = v75 * v111 + 0.829999983;
    if (v113 <= a3 && v114 > a3)
    {
      ValueFromBezierPath( (id *)((char *)&self->mTextImage0 + 1),  dbl_2AD3D0,  0.0,  1.0,  (a3 + v75 * -0.5) / 0.829999983,  (uint64_t)&unk_2AD3E8,  3LL);
      double v79 = 1.0 - v116;
LABEL_101:
      double v78 = 1;
    }
  }

LABEL_102:
  if (BYTE5(self->mPageCount))
  {
    double v118 = self->super.mDefaultMainDuration * 0.25;
    double v119 = v118 + -0.414999992;
    double v120 = v118 + 0.414999992;
    if (v119 <= a3 && v120 > a3)
    {
      double v123 = v78;
      ValueFromBezierPath( (id *)((char *)&self->mTextImage0 + 1),  dbl_2AD3D0,  0.0,  1.0,  (a3 - v119) / 0.829999983,  (uint64_t)&unk_2AD3E8,  3LL);
      double v125 = v124;
      MRMatrix_Clear((uint64_t)v190);
      double v126 = v125 + 1.0;
      *(float *)&double v126 = v125 + 1.0;
      MRMatrix_Scale(v190, *(float32x2_t *)&v126, *(float32_t *)&v126, 1.0);
      double v127 = -v125;
      if (BYTE6(self->mPageCount)) {
        double v128 = -v125;
      }
      else {
        double v128 = v125;
      }
      double v129 = v128;
      [a4 localAspectRatio];
      double v131 = v127 / v130;
      *(float *)&double v132 = MRMatrix_Translate((float *)v190, v129, v131, 0.0);
      objc_msgSend(a4, "composeModelViewMatrix:saveTo:", v190, v189, v132);
      double v78 = v123;
      double v122 = 1;
      if (!v77) {
        goto LABEL_149;
      }
      goto LABEL_115;
    }

    if (v120 <= a3)
    {
      -[MREffectPortfolio _drawPortraitBreakForLandscapeAtTime:duration:onePage:inContext:withArguments:]( self,  "_drawPortraitBreakForLandscapeAtTime:duration:onePage:inContext:withArguments:",  1LL,  a4,  a5,  a3 - v120,  self->super.mPhaseInDuration + self->super.mMainDuration + self->super.mPhaseOutDuration - v120);
      goto LABEL_83;
    }
  }

  double v122 = 0;
  if (!v77) {
    goto LABEL_149;
  }
LABEL_115:
  double v185 = v78;
  if (v79 != 0.0)
  {
    double v133 = MRMatrix_Clear((uint64_t)v188);
    double v134 = BYTE1(self->mPageCount) == 0;
    double v184 = objc_msgSend(*(id *)((char *)&self->mFrameProviders + 1), "objectAtIndex:", v134, v133);
    [a4 localAspectRatio];
    -[MREffectPortfolio _rectForSlideAtIndex:frame:leftCount:movie:localAspectRatio:]( self,  "_rectForSlideAtIndex:frame:leftCount:movie:localAspectRatio:",  v134,  v184,  v11,  0LL,  v135);
    double v137 = v136;
    double v139 = 2.0 / v138 + -1.0;
    double v140 = v139 * (1.0 - v79) + 1.0;
    *(float *)&double v140 = v140;
    double v142 = (2.0 / v141 + -1.0) * (1.0 - v79) + 1.0;
    MRMatrix_Scale(v188, *(float32x2_t *)&v140, v142, 0.0);
    double v143 = (1.0 - v79) * -(v137 * (v139 + 1.0));
    *(float *)&double v144 = MRMatrix_Translate((float *)v188, v143, 0.0, 0.0);
    objc_msgSend(a4, "composeModelViewMatrix:saveTo:", v188, v187, v144);
  }

  if ((!NSStringHasPrefix([*(id *)((char *)&self->mFrameProviders + 1) objectAtIndex:0], "Full")
     || v16)
    && (v16 || *(void *)(&self->mIsLoaded + 1) == 2LL))
  {
    double v145 = [*(id *)((char *)&self->mSprites + 1) retainedByUserRenderedImageAtTime:a4 inContext:a5 withArguments:a3];
    +[MRCroppingSprite renderDumbImage:inContext:atPosition:andSize:]( &OBJC_CLASS___MRCroppingSprite,  "renderDumbImage:inContext:atPosition:andSize:",  v145,  a4,  -0.5,  0.0,  1.0,  2.0);
    [v145 releaseByUser];
  }

  if (!NSStringHasPrefix([*(id *)((char *)&self->mFrameProviders + 1) lastObject], "Full")
    || v186
    || *(void *)(&self->mIsLoaded + 1) == 1LL)
  {
    double v146 = [*(id *)((char *)&self->mLeftPageProvider + 1) retainedByUserRenderedImageAtTime:a4 inContext:a5 withArguments:a3];
    if (v186 || (*(void *)(&self->mIsLoaded + 1) != 1LL ? (double v147 = 1) : (double v147 = v16), (v147 & 1) == 0))
    {
      double v148 = CGPointZero.x;
      double v149 = CGPointZero.y;
      float v150 = 2.0;
    }

    else
    {
      double v148 = 0.5;
      double v149 = 0.0;
      float v150 = 1.0;
    }

    +[MRCroppingSprite renderDumbImage:inContext:atPosition:andSize:]( &OBJC_CLASS___MRCroppingSprite,  "renderDumbImage:inContext:atPosition:andSize:",  v146,  a4,  v148,  v149,  v150,  2.0);
    [v146 releaseByUser];
  }

  double v151 = -[NSDictionary count]( -[MRLayerEffect slideProvidersForElementIDs](self->super.mEffectLayer, "slideProvidersForElementIDs"),  "count");
  if (v186) {
    double v152 = v11;
  }
  else {
    double v152 = 0LL;
  }
  if (v152 < v151)
  {
    double v153 = v151;
    do
    {
      -[MREffectPortfolio _drawFrame:index:leftCount:time:inContext:withArguments:]( self,  "_drawFrame:index:leftCount:time:inContext:withArguments:",  [*(id *)((char *)&self->mFrameProviders + 1) objectAtIndex:v152],  v152,  v11,  a4,  a5,  a3);
      ++v152;
    }

    while (v153 != v152);
  }

  if (*(MRTextRenderer **)((char *)&self->mTextRenderer0 + 1))
  {
    double v154 = objc_msgSend( -[NSDictionary objectForKey:]( self->super.mFlattenedAttributes,  "objectForKey:",  @"isMainTitle"),  "BOOLValue");
    double v155 = objc_alloc_init(&OBJC_CLASS___MRCroppingSprite);
    [*(id *)((char *)&self->mTextRenderer0 + 1) width];
    double v157 = v156 / self->super.mPixelSize.width + v156 / self->super.mPixelSize.width;
    [*(id *)((char *)&self->mTextRenderer0 + 1) height];
    double v159 = v158 / self->super.mPixelSize.height + v158 / self->super.mPixelSize.height;
    if (v154) {
      double v160 = -0.5;
    }
    else {
      double v160 = 0.5;
    }
    [a4 localAspectRatio];
    double v162 = (float)((float)(1.3333 / v161) * 0.1);
    if (-[NSString isEqualToString:]( -[MRLayerEffect editedElement](self->super.mEffectLayer, "editedElement"),  "isEqualToString:",  @"text0")
      && -[MRLayerEffect _hideTextWhileEditing](self->super.mEffectLayer, "_hideTextWhileEditing"))
    {
      LODWORD(v163) = 0;
      -[MRCroppingSprite fakeRenderInContext:atPosition:andSize:zRotation:]( v155,  "fakeRenderInContext:atPosition:andSize:zRotation:",  a4,  v160,  v162 + v159 / 1.20000005 * 0.100000001,  v157,  v159,  v163);
    }

    else
    {
      [a4 blend:2];
      LODWORD(v164) = 0;
      -[MRCroppingSprite renderImage:inContext:atPosition:andSize:zRotation:]( v155,  "renderImage:inContext:atPosition:andSize:zRotation:",  *(MRTextRenderer **)((char *)&self->mTextRenderer0 + 1),  a4,  v160,  v162 + v159 / -1.20000005 * 0.100000001,  v157,  v159,  v164);
      [a4 blend:0];
    }
  }

  if (v79 != 0.0) {
    [a4 restoreModelViewMatrix:v187];
  }
  double v78 = v185;
LABEL_149:
  if (v78)
  {
    double v165 = BYTE1(self->mPageCount) == 0;
    double v166 = [*(id *)((char *)&self->mFrameProviders + 1) objectAtIndex:v165];
    [a4 localAspectRatio];
    -[MREffectPortfolio _rectForSlideAtIndex:frame:leftCount:movie:localAspectRatio:]( self,  "_rectForSlideAtIndex:frame:leftCount:movie:localAspectRatio:",  v165,  v166,  v11,  0LL,  v167);
    if (v79 == 0.0)
    {
      double v174 = 0.0;
      double v176 = 2.0;
      double v175 = 2.0;
      double v173 = 0.0;
    }

    else
    {
      double v172 = v171;
      double v173 = v168 * v79 + 0.0;
      double v174 = v169 * v79 + 0.0;
      double v175 = (v170 + -2.0) * v79 + 2.0;
      double v176 = (v172 + -2.0) * v79 + 2.0;
    }

    -[MREffectPortfolio _drawIndex:time:context:arguments:size:position:]( self,  "_drawIndex:time:context:arguments:size:position:",  v165,  a4,  a5,  a3,  v175,  v176,  v173,  v174);
    if (!v122) {
      goto LABEL_152;
    }
    goto LABEL_151;
  }

  if (v122) {
LABEL_151:
  }
    [a4 restoreModelViewMatrix:v189];
LABEL_152:
  [a4 unsetShader];
}

LABEL_67:
            double y = 0.0;
            double x = -0.5;
            goto LABEL_82;
          }

          goto LABEL_81;
        }

        if (a5 != 2)
        {
          double x = 0.5;
          double y = x - v33 * x - v36;
          goto LABEL_81;
        }

        double x = -0.5;
        unint64_t v39 = v33 * 0.5 + -0.5;
        goto LABEL_79;
      }

      double y = 0.0;
      if (a5 != 2)
      {
        double x = 0.5;
        unint64_t v39 = v33 * 0.5 + -0.5;
LABEL_79:
        double y = v36 + v39;
        goto LABEL_81;
      }

      double x = 0.5;
    }

    else
    {
      double width = CGRectZero.size.width;
      double height = CGRectZero.size.height;
    }

    [*(id *)(&self->super._isInInteractiveMode + 1) removeObjectsForKeys:*(NSMutableDictionary **)((char *)&self->mSprites + 1)];
    *(NSMutableDictionary **)((char *)&self->mSprites + 1) = 0LL;
  }

LABEL_52:
        float32x2_t v26 = v17 * 0.5 * self->super.mPixelSize.width;
        __float2 v27 = v19 * 0.5 * self->super.mPixelSize.height;
        goto LABEL_53;
      }

      [v15 imageAspectRatio];
      float v24 = self->super.mPixelSize.height;
      if (v38 * 4.0 / a3 >= 2.0) {
        goto LABEL_27;
      }
      [v15 imageAspectRatio];
      float32x2_t v26 = (v24 + v24) * v39;
      __float2 v27 = self->super.mPixelSize.height + self->super.mPixelSize.height;
LABEL_53:
      objc_msgSend(v15, "setDefaultSize:", v26, v27);
      uint64_t v11 = (char *)v11 + 1;
      int64_t v5 = v14;
    }

    while (v9 != v11);
    double v9 = [obj countByEnumeratingWithState:&v55 objects:v59 count:16];
    v10 += (uint64_t)v11;
  }

  while (v9);
}

void sub_9D57C(_Unwind_Exception *a1)
{
}

void sub_9D5D8(_Unwind_Exception *a1)
{
}

void sub_9DB8C(_Unwind_Exception *a1)
{
}

void sub_9E75C(_Unwind_Exception *a1)
{
}

void sub_9E7B8(_Unwind_Exception *a1)
{
}

LABEL_62:
  if (!v17)
  {
    BOOL v69 = 1;
    goto LABEL_68;
  }

LABEL_63:
  double v65 = [v17 objectForKey:@"zPosition"];
  if (v65)
  {
    CGFloat v66 = v65;
    [v65 startTime];
    if (v67 < 0.0)
    {
      CGFloat v68 = v34;
      [v66 setStartTime:a3];
      [v66 setStartValue:*((float *)v10 + 4)];
      goto LABEL_90;
    }

    [v66 valueAtTime:a3];
    double v76 = v77;
    [v66 startTime];
    double v79 = a3 - v78;
    [v66 duration];
    if (v79 >= v80) {
      [v17 removeObjectForKey:@"zPosition"];
    }
    BOOL v69 = 0;
    goto LABEL_80;
  }

  BOOL v69 = 0;
LABEL_68:
  mAnimationPathZ = self->mAnimationPathZ;
  if (mAnimationPathZ
    && (!-[MCAnimationPath isTriggered](mAnimationPathZ->animationPath, "isTriggered")
     || [v16 objectForKey:@"zPosition"]))
  {
    if (v9)
    {
      self->mAnimationPathZ->speed = 0.0;
      self->mAnimationPathZ->time = -1.0e10;
    }

    self->mAnimationContext->animationPath = self->mAnimationPathZ;
    double v71 = self->mAnimationPathZ->animationPath;
    float v72 = [a4 clock];
    -[MCPlugParallel zPosition](self->mPlug, "zPosition");
    double v73 = v72;
    uint64_t v16 = v177;
    double v75 = ValueForScalarAnimationPath(v71, v73, self->mAnimationContext, v177, a3, v74);
    goto LABEL_76;
  }

  if (mPlugWasSetSinceLastRendering)
  {
    -[MCPlugParallel zPosition](self->mPlug, "zPosition");
LABEL_76:
    double v76 = v75;
LABEL_80:
    double v81 = self->mAnimationPathZ;
    if (v81)
    {
      double v82 = 0.0;
      if ((v9 & 1) == 0)
      {
        double v83 = v81->time;
        if (v83 < a3) {
          double v82 = (v76 - v81->value) / (a3 - v83);
        }
      }

      v81->speed = v82;
      self->mAnimationPathZ->value = v76;
      self->mAnimationPathZ->time = a3;
    }

    double v18 = *((float *)v10 + 4);
    if (v76 != v18)
    {
      *(float *)&double v18 = v76;
      *((_DWORD *)v10 + 4) = LODWORD(v18);
      CGFloat v68 = 1;
      double v84 = 1;
      if ((v69 & 1) != 0) {
        goto LABEL_94;
      }
      goto LABEL_90;
    }
  }

  CGFloat v68 = v34;
  if ((v69 & 1) != 0)
  {
    double v84 = 1;
    goto LABEL_94;
  }

    [a5 unsetShader];
    else {
      double v97 = @"PlainTexture";
    }
    [a5 setShader:v97];
    double v98 = *(uint64_t *)((char *)&self->mGroundShadowRightProvider + 1);
    double v111 = [*(id *)((char *)&self->mAspect + 1) retainedByUserRenderedImageAtTime:a5 inContext:v108 withArguments:v107];
    double v99 = [*(id *)((char *)&self->mGroundShadowCenterProvider + 1) retainedByUserRenderedImageAtTime:a5 inContext:v108 withArguments:v107];
    double v100 = [*(id *)((char *)&self->mGroundShadowLeftProvider + 1) retainedByUserRenderedImageAtTime:a5 inContext:v108 withArguments:v107];
    if (v98)
    {
      do
      {
        if (*(_BYTE *)(v98 + 128))
        {
          if (*(_BYTE *)(v98 + 144))
          {
            [a5 setModelViewMatrix:v98 + 32 saveTo:0];
            double v101 = *(double *)(v98 + 96);
            double v102 = *(double *)(v98 + 112);
            double v103 = *(double *)(v98 + 104) - *(double *)(v98 + 120) * 0.5;
            +[MRCroppingSprite renderDumbImage:inContext:atPosition:andSize:]( &OBJC_CLASS___MRCroppingSprite,  "renderDumbImage:inContext:atPosition:andSize:",  v111,  a5,  v101,  v103,  v102,  0.0299999993);
            [*(id *)((char *)&self->mGroundShadowCenterProvider + 1) imageAspectRatio];
            double v105 = v104 * 0.0299999993;
            +[MRCroppingSprite renderDumbImage:inContext:atPosition:andSize:]( &OBJC_CLASS___MRCroppingSprite,  "renderDumbImage:inContext:atPosition:andSize:",  v99,  a5,  v101 - v102 * 0.5 - v104 * 0.0299999993 * 0.5,  v103,  v104 * 0.0299999993,  0.0299999993);
            +[MRCroppingSprite renderDumbImage:inContext:atPosition:andSize:]( &OBJC_CLASS___MRCroppingSprite,  "renderDumbImage:inContext:atPosition:andSize:",  v100,  a5,  v101 + v102 * 0.5 + v105 * 0.5,  v103,  v105,  0.0299999993);
          }
        }

        double v106 = *(void *)(v98 + 136);

        double v98 = v106;
      }

      while (v106);
    }

    [v111 releaseByUser];
    [v99 releaseByUser];
    [v100 releaseByUser];
    *(MRImageProvider **)((char *)&self->mGroundShadowRightProvider + 1) = 0LL;
    *(MRReflectionsRenderable **)((char *)&self->mHead + 1) = 0LL;
    [a5 unsetShader];
    [a5 restoreForeColor:v115];
    [a5 blend:0];
    [a5 restoreModelViewMatrix:v116];
  }

LABEL_90:
  double v85 = [v17 objectForKey:@"scale"];
  if (v85)
  {
    double v86 = v85;
    [v85 startTime];
    if (v87 < 0.0)
    {
      [v86 setStartTime:a3];
      [v86 setStartValue:*((float *)v10 + 5)];
      goto LABEL_116;
    }

    [v86 valueAtTime:a3];
    double v94 = v95;
    [v86 startTime];
    double v97 = a3 - v96;
    [v86 duration];
    if (v97 >= v98) {
      [v17 removeObjectForKey:@"scale"];
    }
    double v84 = 0;
    goto LABEL_106;
  }

  double v84 = 0;
LABEL_94:
  mAnimationPathScale = self->mAnimationPathScale;
  if (mAnimationPathScale
    && (!-[MCAnimationPath isTriggered](mAnimationPathScale->animationPath, "isTriggered")
     || [v16 objectForKey:@"scale"]))
  {
    if (v9)
    {
      self->mAnimationPathScale->speed = 0.0;
      self->mAnimationPathScale->time = -1.0e10;
    }

    self->mAnimationContext->animationPath = self->mAnimationPathScale;
    double v89 = self->mAnimationPathScale->animationPath;
    double v90 = [v176 clock];
    -[MCPlugParallel scale](self->mPlug, "scale");
    double v91 = v90;
    uint64_t v16 = v177;
    double v93 = ValueForScalarAnimationPath(v89, v91, self->mAnimationContext, v177, a3, v92);
    goto LABEL_102;
  }

  if (mPlugWasSetSinceLastRendering)
  {
    -[MCPlugParallel scale](self->mPlug, "scale");
LABEL_102:
    double v94 = v93;
LABEL_106:
    double v99 = self->mAnimationPathScale;
    if (v99)
    {
      double v100 = 0.0;
      if ((v9 & 1) == 0)
      {
        double v101 = v99->time;
        if (v101 < a3) {
          double v100 = (v94 - v99->value) / (a3 - v101);
        }
      }

      v99->speed = v100;
      self->mAnimationPathScale->value = v94;
      self->mAnimationPathScale->time = a3;
    }

    double v18 = *((float *)v10 + 5);
    if (v94 != v18)
    {
      *(float *)&double v18 = v94;
      *((_DWORD *)v10 + 5) = LODWORD(v18);
      CGFloat v68 = 1;
      double v102 = 1;
      if ((v84 & 1) != 0) {
        goto LABEL_120;
      }
      goto LABEL_116;
    }
  }

  if ((v84 & 1) != 0)
  {
    double v102 = 1;
    goto LABEL_120;
  }

LABEL_116:
  double v103 = [v17 objectForKey:@"xRotationAngle"];
  if (v103)
  {
    double v104 = v103;
    [v103 startTime];
    if (v105 < 0.0)
    {
      [v104 setStartTime:a3];
      [v104 setStartValue:*((float *)v10 + 7)];
      double v106 = v68;
      double v107 = v176;
      goto LABEL_143;
    }

    [v104 valueAtTime:a3];
    double v113 = v115;
    [v104 startTime];
    double v117 = a3 - v116;
    [v104 duration];
    if (v117 >= v118) {
      [v17 removeObjectForKey:@"xRotationAngle"];
    }
    double v102 = 0;
LABEL_131:
    double v106 = v68;
    double v107 = v176;
    goto LABEL_132;
  }

  double v102 = 0;
LABEL_120:
  mAnimationPathRX = self->mAnimationPathRX;
  if (!mAnimationPathRX
    || -[MCAnimationPath isTriggered](mAnimationPathRX->animationPath, "isTriggered")
    && ![v16 objectForKey:@"xRotationAngle"])
  {
    if (!mPlugWasSetSinceLastRendering)
    {
      double v106 = v68;
      double v107 = v176;
      goto LABEL_141;
    }

    -[MCPlugParallel xRotationAngle](self->mPlug, "xRotationAngle");
    double v113 = v114;
    goto LABEL_131;
  }

  if (v9)
  {
    self->mAnimationPathRX->speed = 0.0;
    self->mAnimationPathRX->time = -1.0e10;
  }

  self->mAnimationContext->animationPath = self->mAnimationPathRX;
  double v109 = self->mAnimationPathRX->animationPath;
  double v110 = [v176 clock];
  -[MCPlugParallel xRotationAngle](self->mPlug, "xRotationAngle");
  double v111 = v110;
  uint64_t v16 = v177;
  double v113 = ValueForScalarAnimationPath(v109, v111, self->mAnimationContext, v177, a3, v112);
  double v106 = v68;
  double v107 = v176;
LABEL_132:
  double v119 = self->mAnimationPathRX;
  if (v119)
  {
    double v120 = 0.0;
    if ((v9 & 1) == 0)
    {
      double v121 = v119->time;
      if (v121 < a3) {
        double v120 = (v113 - v119->value) / (a3 - v121);
      }
    }

    v119->speed = v120;
    self->mAnimationPathRX->value = v113;
    self->mAnimationPathRX->time = a3;
  }

  double v18 = v113 * 57.2957764;
  if (v113 * 57.2957764 == *((float *)v10 + 7))
  {
LABEL_141:
    if ((v102 & 1) != 0)
    {
      double v122 = 1;
      goto LABEL_147;
    }

    goto LABEL_143;
  }

  *(float *)&double v18 = v18;
  *((_DWORD *)v10 + 7) = LODWORD(v18);
  double v106 = 1;
  double v122 = 1;
  if ((v102 & 1) != 0)
  {
LABEL_147:
    mAnimationPathRY = self->mAnimationPathRY;
    if (mAnimationPathRY
      && (!-[MCAnimationPath isTriggered](mAnimationPathRY->animationPath, "isTriggered")
       || [v16 objectForKey:@"yRotationAngle"]))
    {
      if (v9)
      {
        self->mAnimationPathRY->speed = 0.0;
        self->mAnimationPathRY->time = -1.0e10;
      }

      self->mAnimationContext->animationPath = self->mAnimationPathRY;
      double v127 = self->mAnimationPathRY->animationPath;
      double v128 = [v107 clock];
      -[MCPlugParallel yRotationAngle](self->mPlug, "yRotationAngle");
      double v129 = v128;
      uint64_t v16 = v177;
      double v131 = ValueForScalarAnimationPath(v127, v129, self->mAnimationContext, v177, a3, v130);
    }

    else
    {
      if (!mPlugWasSetSinceLastRendering)
      {
LABEL_167:
        if ((v122 & 1) != 0)
        {
          double v140 = 1;
          goto LABEL_173;
        }

        goto LABEL_169;
      }

      -[MCPlugParallel yRotationAngle](self->mPlug, "yRotationAngle");
    }

    double v132 = v131;
LABEL_159:
    double v137 = self->mAnimationPathRY;
    if (v137)
    {
      double v138 = 0.0;
      if ((v9 & 1) == 0)
      {
        double v139 = v137->time;
        if (v139 < a3) {
          double v138 = (v132 - v137->value) / (a3 - v139);
        }
      }

      v137->speed = v138;
      self->mAnimationPathRY->value = v132;
      self->mAnimationPathRY->time = a3;
    }

    double v18 = v132 * 57.2957764;
    if (v132 * 57.2957764 != *((float *)v10 + 8))
    {
      *(float *)&double v18 = v18;
      *((_DWORD *)v10 + _Block_object_dispose((const void *)(v1 - 64), 8) = LODWORD(v18);
      double v106 = 1;
      double v140 = 1;
      if ((v122 & 1) != 0) {
        goto LABEL_173;
      }
      goto LABEL_169;
    }

    goto LABEL_167;
  }

  if (v29)
  {
    if (self->_centerAnimationPath || self->_scaleAnimationPath)
    {
      double v56 = 1;
      if (v48)
      {
LABEL_120:
        double v57 = self->mSlidePlayer;
        if (v57) {
          LODWORD(v57) = -[MRAssetPlayer newImageIsAvailable](v57, "newImageIsAvailable");
        }
        v56 |= v57;
        audioDucker = (MCPlugSlide *)self->mSlideLayer;
        if (audioDucker) {
          LODWORD(audioDucker) = -[MCPlugSlide hasSomethingToRender](audioDucker, "hasSomethingToRender");
        }
        goto LABEL_130;
      }
    }

    else
    {
      double v56 = self->_rotationAnimationPath != 0LL;
      if (v48) {
        goto LABEL_120;
      }
    }

    LODWORD(audioDucker) = 0;
LABEL_130:
    double v59 = BYTE2(self->mFlags);
    LOBYTE(audioDucker) = (audioDucker | v56 | (v59 >> 4) & 1) != 0;
    BYTE2(self->mFlags) = v59 & 0xEF;
    return (char)audioDucker;
  }

  if (-[MRAssetPlayer conformsToProtocol:]( self->mSlidePlayer,  "conformsToProtocol:",  &OBJC_PROTOCOL___MRAssetPlayerTimeSupport))
  {
    -[MRAssetPlayer time](self->mSlidePlayer, "time");
    if (v58 > 0.0) {
      -[MRAssetPlayer setTime:](self->mSlidePlayer, "setTime:", 0.0);
    }
  }

  LOBYTE(audioDucker) = 0;
  HIBYTE(self->mFlags) &= ~0x80u;
  return (char)audioDucker;
}

LABEL_192:
  if ((v140 & 1) != 0) {
    goto LABEL_196;
  }
LABEL_193:
  double v158 = [v17 objectForKey:@"opacity"];
  if (!v158)
  {
LABEL_196:
    mAnimationPathOpacitdouble y = self->mAnimationPathOpacity;
    if (mAnimationPathOpacity
      && (!-[MCAnimationPath isTriggered](mAnimationPathOpacity->animationPath, "isTriggered", v18)
       || [v16 objectForKey:@"opacity"]))
    {
      if (v9)
      {
        self->mAnimationPathOpacity->speed = 0.0;
        self->mAnimationPathOpacity->time = -1.0e10;
      }

      self->mAnimationContext->animationPath = self->mAnimationPathOpacity;
      double v162 = self->mAnimationPathOpacity->animationPath;
      double v163 = [v107 clock];
      -[MCPlugParallel opacity](self->mPlug, "opacity");
      double v165 = ValueForScalarAnimationPath(v162, v163, self->mAnimationContext, v16, a3, v164);
    }

    else
    {
      if (!mPlugWasSetSinceLastRendering) {
        goto LABEL_212;
      }
      -[MCPlugParallel opacity](self->mPlug, "opacity", v18);
    }

    double v166 = v165;
    goto LABEL_205;
  }

  double v159 = v158;
  [v158 startTime];
  if (v160 < 0.0)
  {
    [v159 setStartTime:a3];
    [v159 setStartValue:*((float *)v10 + 11)];
    goto LABEL_212;
  }

  [v159 valueAtTime:a3];
  double v166 = v172;
  [v159 startTime];
  double v174 = a3 - v173;
  [v159 duration];
  if (v174 >= v175) {
    [v17 removeObjectForKey:@"opacity"];
  }
LABEL_205:
  double v167 = self->mAnimationPathOpacity;
  if (v167)
  {
    double v168 = 0.0;
    if ((v9 & 1) == 0)
    {
      double v169 = v167->time;
      if (v169 < a3) {
        double v168 = (v166 - v167->value) / (a3 - v169);
      }
    }

    v167->speed = v168;
    self->mAnimationPathOpacity->value = v166;
    self->mAnimationPathOpacity->time = a3;
  }

  if (v166 != *((float *)v10 + 11))
  {
    double v170 = v166;
    *((float *)v10 + 11) = v170;
    double v106 = 1;
  }

LABEL_212:
  *((_DWORD *)v10 + 10) = 1065353216;
  *((_DWORD *)v10 + 6) = 1065353216;
  return v106;
}

LABEL_49:
  float v44 = self->mPlug;
  if (!(_DWORD)v3) {
    goto LABEL_52;
  }
  double v45 = -[MCPlug animationPathForKey:]( v44,  "animationPathForKey:",  objc_msgSend(@"yRotationAngle", "stringByAppendingFormat:", @":%d", v3));
  if (!v45)
  {
    float v44 = self->mPlug;
LABEL_52:
    double v45 = -[MCPlug animationPathForKey:](v44, "animationPathForKey:", @"yRotationAngle");
    if (!v45) {
      goto LABEL_57;
    }
  }

  if (([v45 isTriggered] & 1) == 0)
  {
    double v47 = objc_opt_class(&OBJC_CLASS___MCAnimationPathPhysics, v46);
    if ((objc_opt_isKindOfClass(v45, v47) & 1) != 0)
    {
      double v48 =  -[MRAnimationPathPhysics initWithMCAnimationPath:]( objc_alloc(&OBJC_CLASS___MRAnimationPathPhysics),  "initWithMCAnimationPath:",  v45);
      -[MCPlugParallel yRotationAngle](self->mPlug, "yRotationAngle");
      *(float *)&double v49 = v49;
      -[MRAnimationPathPhysics setBaseValue:](v48, "setBaseValue:", v49);
    }

    else
    {
      double v50 = objc_alloc(&OBJC_CLASS___MRAnimationPathScalar);
      -[MCPlugParallel yRotationAngle](self->mPlug, "yRotationAngle");
      self->mAnimationPathRY = -[MRAnimationPathScalar initWithMCAnimationPath:andValue:]( v50,  "initWithMCAnimationPath:andValue:",  v45);
    }
  }

  mDefaultPhaseInDuration = self->super.mDefaultPhaseInDuration;
  if (v10 <= mDefaultPhaseInDuration) {
    goto LABEL_99;
  }
  double v59 = v10 - mDefaultPhaseInDuration;
  if (!-[NSString hasSuffix:](self->super.mEffectID, "hasSuffix:", @"5"))
  {
    CGFloat v68 = objc_msgSend( -[NSDictionary objectForKey:]( -[MRLayerEffect slideProvidersForElementIDs](self->super.mEffectLayer, "slideProvidersForElementIDs"),  "objectForKey:",  @"image0"),  "retainedByUserRenderedImageAtTime:inContext:withArguments:",  a4,  a5,  a3);
    BOOL v69 = a4;
    double v56 = v68;
    double v70 = v59 * self->super.mMainDuration / self->super.mDefaultMainDuration / 1.33333333;
    double v71 = v128 + v128;
    float v72 = -v128;
    double v73 = v71;
    if (v70 < 1.0)
    {
      double v74 = v70;
      double v75 = CGPointZero.x;
      double v76 = CGPointZero.y;
      double v77 = -1.0;
      double v78 = 2.0;
      double v79 = self;
      double v80 = v56;
      double v81 = v69;
      double v82 = a5;
      double v83 = -v128;
      double v84 = v73;
LABEL_95:
      -[MREffectOrigamiTitle renderFallImage:atProgress:inContext:withArguments:inRect:withAttributes:::]( v79,  "renderFallImage:atProgress:inContext:withArguments:inRect:withAttributes:::",  v80,  v81,  v82,  v129,  0LL,  v74,  v77,  v83,  v78,  v84,  v75,  v76);
LABEL_98:
      [v56 releaseByUser];
      a4 = v137;
      goto LABEL_99;
    }

    double v85 = @"image0";
    double v86 = -1.0;
    double v87 = 2.0;
LABEL_97:
    -[MREffectOrigamiTitle renderStillImage:withKey:inContext:withArguments:inRect:withAttributes:]( self,  "renderStillImage:withKey:inContext:withArguments:inRect:withAttributes:",  v56,  v85,  v69,  a5,  0LL,  v86,  v72,  v87,  v73);
    goto LABEL_98;
  }

  if (v59 > 0.2)
  {
    double v60 = objc_msgSend( -[NSDictionary objectForKey:]( -[MRLayerEffect slideProvidersForElementIDs](self->super.mEffectLayer, "slideProvidersForElementIDs"),  "objectForKey:",  @"image3"),  "retainedByUserRenderedImageAtTime:inContext:withArguments:",  a4,  a5,  a3);
    float v61 = a4;
    double v62 = v60;
    CGFloat v63 = (v59 + -0.2) * self->super.mMainDuration / self->super.mDefaultMainDuration / 1.33333333;
    double v64 = v128;
    double v65 = v128 + v128;
    CGFloat v66 = (float)-v64;
    CGFloat v67 = v65;
    if (v63 >= 1.0) {
      -[MREffectOrigamiTitle renderStillImage:withKey:inContext:withArguments:inRect:withAttributes:]( self,  "renderStillImage:withKey:inContext:withArguments:inRect:withAttributes:",  v60,  @"image3",  v61,  a5,  0LL,  0.333333343,  v66,  0.666666687,  v67);
    }
    else {
      -[MREffectOrigamiTitle renderFallImage:atProgress:inContext:withArguments:inRect:withAttributes:::]( self,  "renderFallImage:atProgress:inContext:withArguments:inRect:withAttributes:::",  v60,  v61,  a5,  v129,  0LL,  v63,  0.333333343,  v66,  0.666666687,  v67,  CGPointZero.x,  CGPointZero.y);
    }
    [v62 releaseByUser];
    a4 = v137;
  }

  if (v59 >= 3.0 && v59 < 3.5)
  {
    double v89 = objc_msgSend( -[NSDictionary objectForKey:]( -[MRLayerEffect slideProvidersForElementIDs](self->super.mEffectLayer, "slideProvidersForElementIDs"),  "objectForKey:",  @"image1"),  "retainedByUserRenderedImageAtTime:inContext:withArguments:",  v137,  a5,  a3);
    -[MREffectOrigamiTitle renderStillImage:withKey:inContext:withArguments:inRect:withAttributes:]( self,  "renderStillImage:withKey:inContext:withArguments:inRect:withAttributes:",  v89,  @"image1",  v137,  a5,  0LL,  -0.166666667,  -v128,  0.5,  v128 * 0.75);
    [v89 releaseByUser];
    double v90 = objc_msgSend( -[NSDictionary objectForKey:]( -[MRLayerEffect slideProvidersForElementIDs](self->super.mEffectLayer, "slideProvidersForElementIDs"),  "objectForKey:",  @"image2"),  "retainedByUserRenderedImageAtTime:inContext:withArguments:",  v137,  a5,  a3);
    a4 = v137;
    -[MREffectOrigamiTitle renderStillImage:withKey:inContext:withArguments:inRect:withAttributes:]( self,  "renderStillImage:withKey:inContext:withArguments:inRect:withAttributes:",  v90,  @"image2",  v137,  a5,  0LL,  -1.0,  -v128,  0.833333333,  v128 * 0.75);
    [v90 releaseByUser];
  }

  if (v59 <= 3.0)
  {
    [*(id *)((char *)&self->mPatchworkAtEnd + 1) removeObjectForKey:@"image4"];
  }

  else
  {
    double v91 = objc_msgSend( -[NSDictionary objectForKey:]( -[MRLayerEffect slideProvidersForElementIDs](self->super.mEffectLayer, "slideProvidersForElementIDs"),  "objectForKey:",  @"image4"),  "retainedByUserRenderedImageAtTime:inContext:withArguments:",  a4,  a5,  a3);
    if (v59 >= 4.0)
    {
      double v103 = v128;
      double v104 = v128 + v128;
      -[MREffectOrigamiTitle renderStillImage:withKey:inContext:withArguments:inRect:withAttributes:]( self,  "renderStillImage:withKey:inContext:withArguments:inRect:withAttributes:",  v91,  @"image4",  a4,  a5,  0LL,  -1.0,  (float)-v103,  1.33333337,  v104);
    }

    else
    {
      double v92 = (v59 + -3.0) * self->super.mMainDuration / self->super.mDefaultMainDuration;
      *(float *)&double v92 = v92;
      [*(id *)((char *)&self->mBreakCurve + 1) valueAtTime:v92];
      double v94 = __sincosf_stret(3.1416 - v93);
      double v95 = v128;
      double v96 = v128 + v128;
      LODWORD(v159.x) = -1082130432;
      double v97 = (float)-v95;
      double v98 = v96 * 0.375;
      *(float *)&double v99 = v97 + (1.0 - v94.__cosval) * v98;
      *(float *)&double v100 = v98 * v94.__sinval;
      *(void *)((char *)&v159.x + 4) = __PAIR64__(v100, v99);
      HIDWORD(v159.y) = 1051372204;
      double v160 = v99;
      double v161 = v100;
      v162[0] = -1.0;
      double v101 = v97 + v98;
      v162[1] = v101;
      double v163 = 0x3EAAAAAC00000000LL;
      double v164 = v101;
      double v165 = 0xBF80000000000000LL;
      double v166 = v96 - v95;
      double v167 = 0x3EAAAAAC00000000LL;
      double v168 = v96 - v95;
      double v169 = 0;
      double v157 = xmmword_1F7FCC;
      v158[0] = unk_1F7FDC;
      HIDWORD(v102) = 1065353216;
      v158[1] = xmmword_1F7FEC;
      *(float *)&double v102 = 1.3333 / v96;
      [v91 setOnContext:a4 onTextureUnit:0 withReferenceAspectRatio:&v142 state:v102];
      [a4 cull:1];
      SetLightingColors((float *)&v147, (float *)&v159, *(float *)[a4 foreColor]);
      [v137 setShader:@"ColoredTexture"];
      [v137 setVertex3DPointer:&v159];
      [v137 setTextureCoordinatesPointer:&v157 onTextureUnit:0];
      [v137 setColorsPointer:&v147];
      [v137 drawTriangleStripFromOffset:0 count:4];
      [v137 unsetColorsPointer];
      [v137 unsetTextureCoordinatesPointerOnTextureUnit:0];
      [v137 unsetVertexPointer];
      [v137 unsetShader];
      SetLightingColors((float *)&v147, v162, *(float *)[v137 foreColor]);
      a4 = v137;
      [v137 setShader:@"ColoredTexture"];
      [v137 setVertex3DPointer:v162];
      [v137 setTextureCoordinatesPointer:v158 onTextureUnit:0];
      [v137 setColorsPointer:&v147];
      [v137 drawTriangleStripFromOffset:0 count:4];
      [v137 unsetColorsPointer];
      [v137 unsetTextureCoordinatesPointerOnTextureUnit:0];
      [v137 unsetVertexPointer];
      [v137 unsetShader];
      [v137 cull:0];
      [v91 unsetOnContext:v137 onTextureUnit:0 state:&v142];
    }

    [v91 releaseByUser];
  }

  double v142 = CGPointZero;
  if (v59 < 3.5)
  {
    double v105 = a3;
    double v106 = objc_msgSend( -[NSDictionary objectForKey:]( -[MRLayerEffect slideProvidersForElementIDs](self->super.mEffectLayer, "slideProvidersForElementIDs"),  "objectForKey:",  @"image0"),  "retainedByUserRenderedImageAtTime:inContext:withArguments:",  a4,  a5,  a3);
    mMainDuration = self->super.mMainDuration;
    mDefaultMainDuration = self->super.mDefaultMainDuration;
    double v109 = v59 * mMainDuration / mDefaultMainDuration / 1.33333333;
    double v110 = v128 * -0.25;
    double v111 = v128 * 1.25;
    if (v109 >= 1.0)
    {
      if (v59 >= 3.0)
      {
        double v112 = (v59 + -3.0) * mMainDuration / mDefaultMainDuration;
        *(float *)&double v112 = v112;
        [*(id *)((char *)&self->mBreakCurve + 1) valueAtTime:v112];
        double v114 = __sincosf_stret(3.1416 - v113);
        double v147 = -1082130432;
        double v148 = v128 * -0.25;
        double v149 = 0xBF80000000000000LL;
        float v150 = v110 - (float)(v114.__cosval * v111);
        double v151 = v114.__sinval * v111;
        double v152 = 1051372204;
        double v153 = v148;
        double v154 = 0x3EAAAAAC00000000LL;
        double v155 = v150;
        double v156 = v114.__sinval * v111;
        HIDWORD(v115) = -1082130432;
        double v157 = xmmword_1F7FFC;
        v158[0] = unk_1F800C;
        *(float *)&double v115 = 1.3333 / v111;
        [v106 setOnContext:a4 onTextureUnit:0 withReferenceAspectRatio:&v141 state:v115];
        [a4 cull:2];
        SetLightingColors((float *)&v159, (float *)&v147, *(float *)[a4 foreColor]);
        [a4 setShader:@"ColoredTexture"];
        [a4 setVertex3DPointer:&v147];
        [a4 setTextureCoordinatesPointer:&v157 onTextureUnit:0];
        [a4 setColorsPointer:&v159];
        [a4 drawTriangleStripFromOffset:0 count:4];
        [a4 unsetColorsPointer];
        [a4 unsetTextureCoordinatesPointerOnTextureUnit:0];
        [a4 unsetVertexPointer];
        [a4 unsetShader];
        [a4 cull:0];
        [v106 unsetOnContext:a4 onTextureUnit:0 state:&v141];
      }

      else
      {
        -[MREffectOrigamiTitle renderStillImage:withKey:inContext:withArguments:inRect:withAttributes:]( self,  "renderStillImage:withKey:inContext:withArguments:inRect:withAttributes:",  v106,  @"image0",  a4,  a5,  0LL,  -1.0,  v110,  1.33333337,  v111);
      }
    }

    else
    {
      -[MREffectOrigamiTitle renderFallImage:atProgress:inContext:withArguments:inRect:withAttributes:::]( self,  "renderFallImage:atProgress:inContext:withArguments:inRect:withAttributes:::",  v106,  a4,  a5,  v129,  &v142,  v109,  -1.0,  v110,  1.33333337,  v111,  CGPointZero.x,  CGPointZero.y);
    }

    [v106 releaseByUser];
    a3 = v105;
  }

  if (v59 > 0.075 && v59 < 3.0)
  {
    double v117 = objc_msgSend( -[NSDictionary objectForKey:]( -[MRLayerEffect slideProvidersForElementIDs](self->super.mEffectLayer, "slideProvidersForElementIDs"),  "objectForKey:",  @"image2"),  "retainedByUserRenderedImageAtTime:inContext:withArguments:",  a4,  a5,  a3);
    double v118 = a4;
    double v119 = v117;
    double v120 = (v59 + -0.075) * self->super.mMainDuration / self->super.mDefaultMainDuration / 1.33333333;
    if (v120 >= 1.0) {
      -[MREffectOrigamiTitle renderStillImage:withKey:inContext:withArguments:inRect:withAttributes:]( self,  "renderStillImage:withKey:inContext:withArguments:inRect:withAttributes:",  v117,  @"image2",  v118,  a5,  0LL,  -1.0,  -v128,  0.833333333,  v128 * 0.75);
    }
    else {
      -[MREffectOrigamiTitle renderFallImage:atProgress:inContext:withArguments:inRect:withAttributes:::]( self,  "renderFallImage:atProgress:inContext:withArguments:inRect:withAttributes:::",  v117,  v118,  a5,  v129,  0LL,  v120,  -1.0,  -v128,  0.833333333,  v128 * 0.75,  v142);
    }
    [v119 releaseByUser];
    a4 = v137;
  }

  if (v59 > 0.05 && v59 < 3.0)
  {
    double v122 = objc_msgSend( -[NSDictionary objectForKey:]( -[MRLayerEffect slideProvidersForElementIDs](self->super.mEffectLayer, "slideProvidersForElementIDs"),  "objectForKey:",  @"image1"),  "retainedByUserRenderedImageAtTime:inContext:withArguments:",  a4,  a5,  a3);
    BOOL v69 = a4;
    double v56 = v122;
    double v123 = (v59 + -0.05) * self->super.mMainDuration / self->super.mDefaultMainDuration / 1.2;
    float v72 = -v128;
    double v73 = v128 * 0.75;
    if (v123 < 1.0)
    {
      double v74 = v123;
      double v76 = v142.y;
      double v75 = v142.x;
      double v77 = -0.166666667;
      double v78 = 0.5;
      double v83 = -v128;
      double v84 = v128 * 0.75;
      double v79 = self;
      double v80 = v56;
      double v81 = v69;
      double v82 = a5;
      goto LABEL_95;
    }

    double v85 = @"image1";
    double v86 = -0.166666667;
    double v87 = 0.5;
    goto LABEL_97;
  }

LABEL_57:
  double v51 = self->mPlug;
  if (!(_DWORD)v3) {
    goto LABEL_60;
  }
  double v52 = -[MCPlug animationPathForKey:]( v51,  "animationPathForKey:",  objc_msgSend(@"rotationAngle", "stringByAppendingFormat:", @":%d", v3));
  if (!v52)
  {
    double v51 = self->mPlug;
LABEL_60:
    double v52 = -[MCPlug animationPathForKey:](v51, "animationPathForKey:", @"rotationAngle");
    if (!v52) {
      goto LABEL_65;
    }
  }

  if (([v52 isTriggered] & 1) == 0)
  {
    double v54 = objc_opt_class(&OBJC_CLASS___MCAnimationPathPhysics, v53);
    if ((objc_opt_isKindOfClass(v52, v54) & 1) != 0)
    {
      unint64_t v55 =  -[MRAnimationPathPhysics initWithMCAnimationPath:]( objc_alloc(&OBJC_CLASS___MRAnimationPathPhysics),  "initWithMCAnimationPath:",  v52);
      -[MCPlugParallel rotationAngle](self->mPlug, "rotationAngle");
      *(float *)&double v56 = v56;
      -[MRAnimationPathPhysics setBaseValue:](v55, "setBaseValue:", v56);
    }

    else
    {
      double v57 = objc_alloc(&OBJC_CLASS___MRAnimationPathScalar);
      -[MCPlugParallel rotationAngle](self->mPlug, "rotationAngle");
      self->mAnimationPathRZ = -[MRAnimationPathScalar initWithMCAnimationPath:andValue:]( v57,  "initWithMCAnimationPath:andValue:",  v52);
    }
  }

  v572 = v10;
  if (v553 < 4.0)
  {
    CGFloat v63 = v582;
    if (v553 >= 0.25) {
      CGFloat v63 = 1;
    }
    v615 = 0.0;
    v548 = 0.0;
    if (v63 == 1)
    {
      double v64 = v582;
      if (v553 >= 0.5) {
        double v64 = 1;
      }
      v548 = 1.0;
      if ((v64 & 1) == 0)
      {
        double v65 = ((v553 + -0.25) * 4.0 + -0.5) * 3.14159265;
        v548 = (sinf(v65) + 1.0) * 0.5;
      }
    }

    CGFloat v66 = (v553 * 0.25 + -0.5) * 3.14159265;
    v619 = 0LL;
    v544 = 0;
    CGFloat v67 = 0;
    v547 = 1.0;
    CGFloat v68 = 2.79999995;
    BOOL v69 = (sinf(v66) + 1.0) * -0.5 * 0.119999997 + 0.0599999987;
    double v70 = 0.200000003;
LABEL_98:
    v571 = 0.0;
    double v100 = v552;
    double v101 = v606;
    goto LABEL_167;
  }

  double v71 = v10 + 4.0;
  v635 = 0u;
  v636 = 0u;
  v633 = 0u;
  v634 = 0u;
  float v72 = (char *)[obj countByEnumeratingWithState:&v633 objects:v648 count:16];
  if (v72)
  {
    double v73 = v72;
    double v74 = 0LL;
    double v75 = *(void *)v634;
    double v76 = 0.0;
    double v77 = v10 + 4.0;
    double v78 = v554;
    while (2)
    {
      double v79 = 0LL;
      double v80 = &v73[(void)v74];
      do
      {
        if (*(void *)v634 != v75) {
          objc_enumerationMutation(obj);
        }
        objc_msgSend( objc_msgSend(*(id *)(*((void *)&v633 + 1) + 8 * (void)v79), "objectForKey:", @"pinDuration"),  "doubleValue");
        double v82 = v81 + 0.4 + 1.75 + 0.3 + 0.4 + v10 * 2.0;
        double v76 = v76 + v82;
        if (v553 - v71 < v76)
        {
          double v80 = &v79[(void)v74];
          goto LABEL_87;
        }

        double v77 = v77 + v82;
        ++v79;
      }

      while (v73 != v79);
      double v73 = (char *)[obj countByEnumeratingWithState:&v633 objects:v648 count:16];
      double v74 = v80;
      if (v73) {
        continue;
      }
      break;
    }
  }

  else
  {
    double v80 = 0LL;
    double v77 = v10 + 4.0;
    double v78 = v554;
  }

        -[MRMarimbaLayer moveToNextEffectContainer](self, "moveToNextEffectContainer");
        if (!v4) {
          return;
        }
LABEL_55:
        -[MRMarimbaLayer play](self, "play");
        return;
      }

      double v49 = -[MRMarimbaLayer _currentEffectLayer](self, "_currentEffectLayer");
      if (!v49) {
        goto LABEL_57;
      }
      double v50 = v49;
      if (!objc_msgSend(objc_msgSend(v49, "slides"), "count")) {
        goto LABEL_57;
      }
      double v51 = v50;
LABEL_53:
      float v10 = objc_msgSend(objc_msgSend(v51, "slides"), "objectAtIndex:", 0);
      if (!v10) {
        goto LABEL_57;
      }
    }

    -[MRMarimbaLayer gotoSlideLegacy:](self, "gotoSlideLegacy:", v10);
    if (!v4) {
      return;
    }
    goto LABEL_55;
  }

  NSUInteger v6 = v5;
  -[MRMarimbaLayer time](self, "time");
  -[MRMarimbaLayer setTime:](self, "setTime:", v6 + v7);
  if (v4) {
    -[MRMarimbaLayer play](self, "play");
  }
}

LABEL_65:
  double v58 = self->mPlug;
  if (!(_DWORD)v3) {
    goto LABEL_68;
  }
  double v59 = -[MCPlug animationPathForKey:]( v58,  "animationPathForKey:",  objc_msgSend(@"opacity", "stringByAppendingFormat:", @":%d", v3));
  if (!v59)
  {
    double v58 = self->mPlug;
LABEL_68:
    double v59 = -[MCPlug animationPathForKey:](v58, "animationPathForKey:", @"opacity");
    if (!v59) {
      return;
    }
  }

  if (([v59 isTriggered] & 1) == 0)
  {
    float v61 = objc_opt_class(&OBJC_CLASS___MCAnimationPathPhysics, v60);
    if ((objc_opt_isKindOfClass(v59, v61) & 1) != 0)
    {
      double v62 =  -[MRAnimationPathPhysics initWithMCAnimationPath:]( objc_alloc(&OBJC_CLASS___MRAnimationPathPhysics),  "initWithMCAnimationPath:",  v59);
      -[MCPlugParallel opacity](self->mPlug, "opacity");
      *(float *)&CGFloat v63 = v63;
      -[MRAnimationPathPhysics setBaseValue:](v62, "setBaseValue:", v63);
    }

    else
    {
      double v64 = objc_alloc(&OBJC_CLASS___MRAnimationPathScalar);
      -[MCPlugParallel opacity](self->mPlug, "opacity");
      self->mAnimationPathOpacitdouble y = -[MRAnimationPathScalar initWithMCAnimationPath:andValue:]( v64,  "initWithMCAnimationPath:andValue:",  v59);
    }
  }

BOOL NSStringHasPrefix(void *a1, char *__s)
{
  size_t v4 = strlen(__s);
  if (!v4) {
    return 1LL;
  }
  size_t v5 = v4;
  uint64_t v6 = 1LL;
  do
  {
    unint64_t v7 = v6;
    if (v5 == v6) {
      break;
    }
    unsigned int v8 = [a1 characterAtIndex:v6];
    uint64_t v6 = v7 + 1;
  }

  while (v8 == __s[v7]);
  return v7 >= v5;
}

BOOL NSStringIsEqual(void *a1, id a2)
{
  return objc_msgSend(a1, "cStringUsingEncoding:", objc_msgSend(a1, "fastestEncoding")) == a2;
}

BOOL NSStringHasSuffix(void *a1, char *__s)
{
  size_t v4 = strlen(__s);
  size_t v5 = (char *)[a1 length];
  if (!v4) {
    return 1LL;
  }
  uint64_t v6 = &v5[-v4];
  uint64_t v7 = 1LL;
  do
  {
    size_t v8 = v7;
    if (v4 == v7) {
      break;
    }
    unsigned int v9 = [a1 characterAtIndex:&v6[v7]];
    uint64_t v7 = v8 + 1;
  }

  while (v9 == __s[v8]);
  return v8 >= v4;
}

NSString *ImageKey(int64_t a1)
{
  if (a1 <= 14) {
    return (NSString *)*(&off_24E2F8 + a1);
  }
  qmemcpy(__s, "image", 5);
  AppendIntToString(a1, __s, 5uLL);
  return +[NSString stringWithCString:encoding:](&OBJC_CLASS___NSString, "stringWithCString:encoding:", __s, 1LL);
}

NSString *NSStringWithInteger(const char *a1, unint64_t a2)
{
  size_t v4 = strlen(a1);
  __strncpy_chk(__s, a1, v4, 50LL);
  size_t v5 = strlen(a1);
  AppendIntToString(a2, __s, v5);
  return +[NSString stringWithCString:encoding:](&OBJC_CLASS___NSString, "stringWithCString:encoding:", __s, 1LL);
}

char *AppendIntToString(unint64_t a1, char *__s, size_t a3)
{
  size_t v3 = a3;
  size_t v5 = __s;
  do
  {
    v5[a3] = a0123456789[a1 % 0xA];
    ++v5;
    BOOL v6 = a1 > 9;
    a1 /= 0xAuLL;
  }

  while (v6);
  v5[a3] = 0;
  for (size_t i = strlen(__s) - 1; v3 < i; --i)
  {
    char v8 = __s[v3] ^ __s[i];
    __s[v3] = v8;
    char v9 = __s[i] ^ v8;
    __s[i] = v9;
    __s[v3++] ^= v9;
  }

  return __s;
}

void *NSIntegerFromString(void *result, unint64_t a2)
{
  if (result)
  {
    size_t v3 = (const char *)objc_msgSend(result, "cStringUsingEncoding:", objc_msgSend(result, "fastestEncoding"));
    size_t v4 = strlen(v3);
    size_t v5 = v4 - a2;
    if (v4 <= a2) {
      size_t v5 = 0LL;
    }
    else {
      memcpy(__dst, &v3[a2], v5);
    }
    __dst[v5] = 0;
    return (void *)atoi(__dst);
  }

  return result;
}

double Spline1( double result, double a2, double a3, double a4, double a5, double a6, double a7, double a8, double a9)
{
  if (a3 != a2 || a4 != a5 || a6 != a7 || a8 != a9)
  {
    double v20 = 0.25;
    double v21 = 0.5;
    double v22 = 0.5;
    while (1)
    {
      double v23 = v21 * (v21 * v21);
      double v24 = v21 * 3.0;
      double v25 = v22 * (v21 * (v21 * 3.0));
      double v26 = v22 * (v22 * v24);
      double v27 = v22 * (v22 * v22);
      double v28 = v25 * a3 + v23 * a2 + v26 * a4 + v27 * a5;
      if (v28 == result) {
        break;
      }
      double v29 = -v20;
      if (v28 <= result) {
        double v29 = v20;
      }
      double v22 = v22 + v29;
      double v21 = 1.0 - v22;
      double v20 = v20 * 0.5;
      if (v20 <= 0.0000610351562)
      {
        double v23 = v21 * (v21 * v21);
        double v30 = v21 * 3.0;
        double v25 = v22 * (v21 * (v21 * 3.0));
        double v26 = v22 * (v22 * v30);
        double v27 = v22 * (v22 * v22);
        return v25 * a7 + v23 * a6 + v26 * a8 + v27 * a9;
      }
    }

    return v25 * a7 + v23 * a6 + v26 * a8 + v27 * a9;
  }

  return result;
}

double ValueForScalarAnimationPath(void *a1, void *a2, void *a3, void *a4, double a5, double a6)
{
  uint64_t v12 = objc_opt_class(&OBJC_CLASS___MCAnimationPathCombo, a2);
  if ((objc_opt_isKindOfClass(a1, v12) & 1) != 0)
  {
    id v14 = [a1 animationPaths];
    unsigned int v15 = objc_msgSend(objc_msgSend(a1, "combineOperation"), "isEqualToString:", @"mul");
    __int128 v110 = 0u;
    __int128 v111 = 0u;
    if (v15) {
      double v16 = 1.0;
    }
    else {
      double v16 = 0.0;
    }
    __int128 v112 = 0uLL;
    __int128 v113 = 0uLL;
    id v17 = [v14 countByEnumeratingWithState:&v110 objects:v114 count:16];
    if (v17)
    {
      id v18 = v17;
      int v19 = 0;
      uint64_t v20 = *(void *)v111;
      double v21 = v16;
      do
      {
        for (size_t i = 0LL; i != v18; size_t i = (char *)i + 1)
        {
          if (*(void *)v111 != v20) {
            objc_enumerationMutation(v14);
          }
          double v23 = *(void **)(*((void *)&v110 + 1) + 8LL * (void)i);
          v19 |= [v23 isTriggered] ^ 1;
          double v24 = ValueForScalarAnimationPath(v23, a2, a3, a4, a5, v16);
          double v25 = v21 * v24;
          double v26 = v21 + v24;
          if (v15) {
            double v21 = v25;
          }
          else {
            double v21 = v26;
          }
        }

        id v18 = [v14 countByEnumeratingWithState:&v110 objects:v114 count:16];
      }

      while (v18);
      if ((v19 & 1) != 0) {
        return v21;
      }
    }

    else
    {
      double v21 = v16;
    }

    if (v15) {
      return v21 * a6;
    }
    else {
      return v21 + a6;
    }
  }

  uint64_t v27 = objc_opt_class(&OBJC_CLASS___MCAnimationPathExpression, v13);
  if ((objc_opt_isKindOfClass(a1, v27) & 1) != 0)
  {
    if (!qword_2B04E8) {
      qword_2B04E8 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
    }
    id v29 = [a1 expression];
    double v30 = (MUMathExpressionFloatBased *)[(id)qword_2B04E8 objectForKey:v29];
    if (v30)
    {
      double v31 = v30;
      -[MUMathExpressionFloatBased resetAllVariables](v30, "resetAllVariables");
    }

    else
    {
      double v49 = -[MUMathExpressionFloatBased initWithString:error:]( objc_alloc(&OBJC_CLASS___MUMathExpressionFloatBased),  "initWithString:error:",  v29,  0LL);
      double v21 = a6;
      if (!v49) {
        return v21;
      }
      double v31 = v49;
      [(id)qword_2B04E8 setObject:v49 forKey:v29];
    }

    [a3 applyToMathExpression:v31 atTime:a5];
    *(float *)&double v50 = a5;
    -[MUMathExpressionFloatBased setValue:forVariable:](v31, "setValue:forVariable:", @"_time", v50);
    -[MUMathExpressionFloatBased evaluate](v31, "evaluate");
    return v48;
  }

  uint64_t v32 = objc_opt_class(&OBJC_CLASS___MCAnimationPathKeyframed, v28);
  if ((objc_opt_isKindOfClass(a1, v32) & 1) == 0)
  {
    uint64_t v47 = objc_opt_class(2789376LL, v33);
    double v21 = 0.0;
    if ((objc_opt_isKindOfClass(a1, v47) & 1) == 0) {
      return v21;
    }
    [a1 computeValueForTime:a3 withContext:a5];
    return v48;
  }

  id v34 = [a1 orderedKeyframesWithPlugTiming:a2];
  double v35 = (char *)[v34 count];
  unsigned int v36 = [a1 isTriggered];
  if (!v36)
  {
    id v46 = 0LL;
    id v45 = 0LL;
    a4 = 0LL;
    if (v35) {
      goto LABEL_48;
    }
    return a6;
  }

  id v37 = objc_msgSend(objc_msgSend(a1, "key"), "rangeOfString:", @":");
  id v38 = [a1 key];
  id v39 = v38;
  if (v37 != (id)0x7FFFFFFFFFFFFFFFLL) {
    id v39 = [v38 substringToIndex:v37];
  }
  if (!a4 || (id v40 = [a4 objectForKey:v39], (a4 = v40) == 0))
  {
    id v46 = 0LL;
    id v45 = 0LL;
    a5 = -1.0;
    if (v35) {
      goto LABEL_48;
    }
    return a6;
  }

  id v41 = [v40 action];
  [v41 time];
  a5 = a5 - v42;
  [a4 rearmIfNeededWithDefaultValue:a6];
  a6 = v43;
  id v44 = [v41 states];
  if ([v44 count]) {
    id v45 = v44;
  }
  else {
    id v45 = 0LL;
  }
  id v46 = [a4 animationAttributes];
  if (![v46 count]) {
    id v46 = 0LL;
  }
  if (!v35) {
    return a6;
  }
LABEL_48:
  if (a5 <= 0.0) {
    char v51 = v36;
  }
  else {
    char v51 = 0;
  }
  if ((v51 & 1) != 0) {
    return a6;
  }
  if (v35 == (_BYTE *)&dword_0 + 1) {
    char v52 = v36;
  }
  else {
    char v52 = 1;
  }
  if (a5 <= 0.0 || (v52 & 1) == 0)
  {
    id v60 = [v34 objectAtIndex:0];
LABEL_66:
    id v58 = v60;
    id v59 = 0LL;
    goto LABEL_71;
  }

  [a2 fullDuration];
  if (a5 >= v53)
  {
    id v60 = [v34 lastObject];
    goto LABEL_66;
  }

  uint64_t v54 = v36 ^ 1;
  if ((unint64_t)v35 <= v54)
  {
LABEL_63:
    id v58 = [v34 lastObject];
    id v59 = 0LL;
  }

  else
  {
    unsigned int v55 = v54 + 1;
    while (1)
    {
      +[MCAnimationPathKeyframed timeForKeyframe:withPlugTiming:]( MCAnimationPathKeyframed,  "timeForKeyframe:withPlugTiming:",  [v34 objectAtIndex:v54],  a2);
      if (a5 <= v56) {
        break;
      }
      uint64_t v54 = v55;
    }

    if (v55 == 1) {
      id v58 = 0LL;
    }
    else {
      id v58 = [v34 objectAtIndex:v55 - 2];
    }
    id v59 = [v34 objectAtIndex:v54];
  }

LABEL_71:
  if (!v58)
  {
    double v62 = 0.0;
    double v21 = a6;
    goto LABEL_102;
  }

  +[MCAnimationPathKeyframed timeForKeyframe:withPlugTiming:]( &OBJC_CLASS___MCAnimationPathKeyframed,  "timeForKeyframe:withPlugTiming:",  v58,  a2);
  double v62 = v61;
  uint64_t v64 = objc_opt_class(&OBJC_CLASS___MCAnimationKeyframeFunction, v63);
  if ((objc_opt_isKindOfClass(v58, v64) & 1) == 0)
  {
    [v58 value];
    double v21 = v73;
    goto LABEL_102;
  }

  id v109 = v45;
  [v58 timeOffset];
  [v58 duration];
  TimeForKeyframeAttributesInPlug([v58 timeOffsetKind], 0, a2);
  double v66 = v65;
  BOOL v67 = a5 < v65 && a5 >= v62;
  id v68 = [v58 function];
  if (v68)
  {
    id v69 = v68;
    double v70 = (NSMutableDictionary *)qword_2B04E8;
    if (!qword_2B04E8)
    {
      double v70 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
      qword_2B04E8 = (uint64_t)v70;
    }

    double v71 = (MUMathExpressionFloatBased *)-[NSMutableDictionary objectForKey:](v70, "objectForKey:", v69);
    if (v71)
    {
      float v72 = v71;
      -[MUMathExpressionFloatBased resetAllVariables](v71, "resetAllVariables");
    }

    else
    {
      double v74 = -[MUMathExpressionFloatBased initWithString:error:]( objc_alloc(&OBJC_CLASS___MUMathExpressionFloatBased),  "initWithString:error:",  v69,  0LL);
      if (!v74)
      {
        double v21 = a6;
        id v45 = v109;
        goto LABEL_101;
      }

      float v72 = v74;
      [(id)qword_2B04E8 setObject:v74 forKey:v69];
    }

    id v75 = [v58 functionParameters];
    id v45 = v109;
    if (v75) {
      -[MUMathExpressionFloatBased setVariableValues:](v72, "setVariableValues:", v75);
    }
    if (a3) {
      [a3 applyToMathExpression:v72 atTime:a5];
    }
    if (v109) {
      -[MUMathExpressionFloatBased setVariableValues:](v72, "setVariableValues:", v109);
    }
    if (v46) {
      -[MUMathExpressionFloatBased setVariableValues:](v72, "setVariableValues:", v46);
    }
    double v76 = 0.0;
    if (a5 > v62)
    {
      double v76 = 1.0;
      if (a5 < v66) {
        double v76 = (a5 - v62) / (v66 - v62);
      }
    }

    [v58 innerEaseInControl];
    double v78 = v77;
    [v58 innerEaseOutControl];
    double v80 = Spline1(v76, 0.0, v78, v79 + 1.0, 1.0, 0.0, 0.0, 1.0, 1.0);
    [v58 functionTimeFactor];
    double v82 = v81;
    [v58 functionTimeOffset];
    double v84 = v83 + v80 * v82;
    *(float *)&double v84 = v84;
    -[MUMathExpressionFloatBased setValue:forVariable:](v72, "setValue:forVariable:", @"time", v84);
    if (v36)
    {
      *(float *)&double v85 = a6;
      -[MUMathExpressionFloatBased setValue:forVariable:](v72, "setValue:forVariable:", @"startValue", v85);
    }

    -[MUMathExpressionFloatBased evaluate](v72, "evaluate");
    double v21 = v86;
LABEL_101:
    if (v67) {
      goto LABEL_128;
    }
    goto LABEL_102;
  }

  double v21 = a6;
  if (v67) {
    goto LABEL_128;
  }
LABEL_102:
  if (!v59) {
    goto LABEL_128;
  }
  +[MCAnimationPathKeyframed timeForKeyframe:withPlugTiming:]( &OBJC_CLASS___MCAnimationPathKeyframed,  "timeForKeyframe:withPlugTiming:",  v59,  a2);
  double v88 = v87;
  uint64_t v90 = objc_opt_class(&OBJC_CLASS___MCAnimationKeyframeFunction, v89);
  if ((objc_opt_isKindOfClass(v59, v90) & 1) == 0)
  {
    [v59 value];
LABEL_123:
    a6 = v96;
    goto LABEL_124;
  }

  id v91 = [v59 function];
  if (v91)
  {
    id v92 = v91;
    double v93 = (NSMutableDictionary *)qword_2B04E8;
    if (!qword_2B04E8)
    {
      double v93 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
      qword_2B04E8 = (uint64_t)v93;
    }

    double v94 = (MUMathExpressionFloatBased *)-[NSMutableDictionary objectForKey:](v93, "objectForKey:", v92);
    if (v94)
    {
      double v95 = v94;
      -[MUMathExpressionFloatBased resetAllVariables](v94, "resetAllVariables");
LABEL_112:
      id v98 = [v59 functionParameters];
      if (v98) {
        -[MUMathExpressionFloatBased setVariableValues:](v95, "setVariableValues:", v98);
      }
      if (a3) {
        [a3 applyToMathExpression:v95 atTime:a5];
      }
      if (v45) {
        -[MUMathExpressionFloatBased setVariableValues:](v95, "setVariableValues:", v45);
      }
      if (v46) {
        -[MUMathExpressionFloatBased setVariableValues:](v95, "setVariableValues:", v46);
      }
      [v59 functionTimeOffset];
      *(float *)&double v99 = v99;
      -[MUMathExpressionFloatBased setValue:forVariable:](v95, "setValue:forVariable:", @"time", v99);
      if (v36)
      {
        *(float *)&double v100 = a6;
        -[MUMathExpressionFloatBased setValue:forVariable:](v95, "setValue:forVariable:", @"startValue", v100);
      }

      -[MUMathExpressionFloatBased evaluate](v95, "evaluate");
      goto LABEL_123;
    }

    double v97 = -[MUMathExpressionFloatBased initWithString:error:]( objc_alloc(&OBJC_CLASS___MUMathExpressionFloatBased),  "initWithString:error:",  v92,  0LL);
    if (v97)
    {
      double v95 = v97;
      [(id)qword_2B04E8 setObject:v97 forKey:v92];

      goto LABEL_112;
    }
  }

  cullingIsEnabled = mOuterState->cullingIsEnabled;
  if (cullingIsEnabled != mInnerState->cullingIsEnabled)
  {
    if (mOuterState->cullingIsEnabled) {
      glEnable(0xB44u);
    }
    else {
      glDisable(0xB44u);
    }
    self->mInnerState->cullingIsEnabled = self->mOuterState->cullingIsEnabled;
    mOuterState = self->mOuterState;
    cullingIsEnabled = mOuterState->cullingIsEnabled;
  }

  if (cullingIsEnabled)
  {
    cullFrontfacing = mOuterState->cullFrontfacing;
    if (cullFrontfacing != self->mInnerState->cullFrontfacing)
    {
      if (cullFrontfacing) {
        id v39 = 1028;
      }
      else {
        id v39 = 1029;
      }
      glCullFace(v39);
      self->mInnerState->cullFrontfacing = self->mOuterState->cullFrontfacing;
    }
  }

  id v40 = 0LL;
  mTextureUnitImages = self->mTextureUnitImages;
  do
  {
    double v43 = self->mOuterState;
    double v42 = self->mInnerState;
    id v44 = (char *)v43 + 4 * v40;
    id v45 = (char *)v42 + 4 * v40;
    if (*((_DWORD *)v44 + 118) != *((_DWORD *)v45 + 118)
      || *((_DWORD *)v44 + 114) != *((_DWORD *)v45 + 114)
      || v43->textureTimestampOnUnit[v40] != v42->textureTimestampOnUnit[v40])
    {
      if (v40 != self->mActiveTextureUnit)
      {
        self->mActiveTextureUnit = v40;
        glActiveTexture(v40 | 0x84C0);
        double v43 = self->mOuterState;
        double v42 = self->mInnerState;
      }

      id v46 = v43->textureTargetOnUnit[v40];
      uint64_t v47 = (char *)v42 + 4 * v40;
      float v48 = *((_DWORD *)v47 + 114);
      if (v46 != v48 && *((_DWORD *)v47 + 118))
      {
        glBindTexture(v48, 0);
        double v43 = self->mOuterState;
        id v46 = v43->textureTargetOnUnit[v40];
      }

      if (v46)
      {
        glBindTexture(v46, v43->textureNameOnUnit[v40]);
        double v49 = self->mOuterState->textureTargetOnUnit[v40];
      }

      else
      {
        double v49 = 0;
      }

      self->mInnerState->textureTargetOnUnit[v40] = v49;
      self->mInnerState->textureNameOnUnit[v40] = self->mOuterState->textureNameOnUnit[v40];
      self->mInnerState->textureTimestampOnUnit[v40] = self->mOuterState->textureTimestampOnUnit[v40];
    }

    -[MRContext _updateTextureOnUnit:](self, "_updateTextureOnUnit:", v40++);
  }

  while (v40 != 4);
  char v51 = self->mOuterState;
  double v50 = self->mInnerState;
  if ((v22 & 1) == 0)
  {
    double v56 = 0LL;
    while (v51->modelViewMatrix[v56] == v50->modelViewMatrix[v56])
    {
      if (++v56 == 16) {
        goto LABEL_101;
      }
    }
  }

  char v52 = *(_OWORD *)v51->modelViewMatrix;
  double v53 = *(_OWORD *)&v51->modelViewMatrix[4];
  uint64_t v54 = *(_OWORD *)&v51->modelViewMatrix[8];
  *(_OWORD *)&v50->modelViewMatrix[12] = *(_OWORD *)&v51->modelViewMatrix[12];
  *(_OWORD *)&v50->modelViewMatrix[8] = v54;
  *(_OWORD *)&v50->modelViewMatrix[4] = v53;
  *(_OWORD *)v50->modelViewMatridouble x = v52;
  *(float *)&unsigned int v55 = MRMatrix_MultiplyWithMatrix( self->mOuterState->modelViewMatrix,  self->mProjectionMatrixWithOrientationCorrection,  v155);
  -[MRShader setModelViewProjectionMatrix:](self->mCurrentShader, "setModelViewProjectionMatrix:", v155, v55);
LABEL_101:
  if (-[MRShader caresAboutForeColor](self->mCurrentShader, "caresAboutForeColor"))
  {
    double v57 = self->mOuterState;
    if (((v22 | v26) & 1) != 0
      || (id v58 = self->mInnerState, v57->foreColor[0] != v58->foreColor[0])
      || v57->foreColor[1] != v58->foreColor[1]
      || v57->foreColor[2] != v58->foreColor[2]
      || v58->foreColor[3] != v57->foreColor[3])
    {
      id v59 = v57->blendingType;
      if (v59 == 4 || v59 == 2)
      {
        double v61 = v57->foreColor[3];
        double v62 = v61 * v57->foreColor[1];
        v155[0] = v57->foreColor[0] * v61;
        v155[1] = v62;
        v155[2] = v61 * v57->foreColor[2];
        v155[3] = v61;
        uint64_t v63 = self->mCurrentShader;
        foreColor = v155;
      }

      else
      {
        uint64_t v63 = self->mCurrentShader;
        foreColor = v57->foreColor;
      }

      -[MRShader setForeColor:](v63, "setForeColor:", foreColor);
      *(_OWORD *)self->mInnerState->foreColor = *(_OWORD *)self->mOuterState->foreColor;
    }
  }

  if (-[MRShader caresAboutNormal](self->mCurrentShader, "caresAboutNormal"))
  {
    id v68 = self->mOuterState;
    *(float *)&double v65 = v68->normal[0];
    *(float *)&double v66 = v68->normal[1];
    *(float *)&BOOL v67 = v68->normal[2];
    -[MRShader setNormal:::](self->mCurrentShader, "setNormal:::", v65, v66, v67);
  }

  id v69 = 0LL;
  for (j = 72LL; j != 328; j += 64LL)
  {
    if (mTextureUnitImages[v69]) {
      -[MRShader setTextureMatrix:onTextureUnit:]( self->mCurrentShader,  "setTextureMatrix:onTextureUnit:",  (char *)self->mOuterState + j,  v69);
    }
    ++v69;
  }

  if (*mTextureUnitImages
    && -[MRShader shaderID](self->mCurrentShader, "shaderID") == (NSString *)@"FittingFilter")
  {
    double v71 = self->mCurrentShader;
    -[MRImage width](self->mTextureUnitImages[0], "width");
    float v73 = v72;
    -[MRImage height](self->mTextureUnitImages[0], "height");
    *(float *)&id v75 = v74;
    *(float *)&double v74 = v73;
    -[MRShader setUniformVec2::forKey:](v71, "setUniformVec2::forKey:", @"textureSize", v74, v75);
  }

  double v149 = 0u;
  float v150 = 0u;
  double v147 = 0u;
  double v148 = 0u;
  double v76 = -[MRContextState temporaryUniforms](self->mOuterState, "temporaryUniforms");
  float v77 = -[NSMutableDictionary countByEnumeratingWithState:objects:count:]( v76,  "countByEnumeratingWithState:objects:count:",  &v147,  v154,  16LL);
  if (v77)
  {
    double v78 = v77;
    float v79 = *(void *)v148;
    do
    {
      for (k = 0LL; k != v78; k = (char *)k + 1)
      {
        if (*(void *)v148 != v79) {
          objc_enumerationMutation(v76);
        }
        -[MRShader setUniform:forKey:]( self->mCurrentShader,  "setUniform:forKey:",  -[NSMutableDictionary objectForKey:]( -[MRContextState temporaryUniforms](self->mOuterState, "temporaryUniforms"),  "objectForKey:",  *(void *)(*((void *)&v147 + 1) + 8LL * (void)k)),  *(void *)(*((void *)&v147 + 1) + 8LL * (void)k));
      }

      double v78 = -[NSMutableDictionary countByEnumeratingWithState:objects:count:]( v76,  "countByEnumeratingWithState:objects:count:",  &v147,  v154,  16LL);
    }

    while (v78);
  }

  double v81 = self->mOuterState;
  double v82 = self->mInnerState;
  vbo = v81->vbo;
  double v84 = v82->vbo;
  vertexFlags = v81->vertexFlags;
  float v86 = v82->vertexFlags;
  if (vbo != v84)
  {
    glBindBuffer(0x8892u, v81->vbo);
    self->mInnerState->vbo = self->mOuterState->vbo;
  }

  if (vertexFlags != v86) {
    self->mInnerState->vertexFlags = self->mOuterState->vertexFlags;
  }
  if (!self->_meshIsBound)
  {
    double v87 = self->mOuterState;
    vertexArrayIsEnabled = v87->vertexArrayIsEnabled;
    if (vertexArrayIsEnabled != self->mInnerState->vertexArrayIsEnabled)
    {
      if (v87->vertexArrayIsEnabled) {
        glEnableVertexAttribArray(0);
      }
      else {
        glDisableVertexAttribArray(0);
      }
      self->mInnerState->vertexArrayIsEnabled = self->mOuterState->vertexArrayIsEnabled;
      double v87 = self->mOuterState;
      vertexArrayIsEnabled = v87->vertexArrayIsEnabled;
    }

    if (vertexArrayIsEnabled)
    {
      vertexStride = v87->vertexStride;
      if (vbo != v84
        || (uint64_t v90 = self->mInnerState, vertexStride != v90->vertexStride)
        || v87->vertexPointer != v90->vertexPointer
        || vertexFlags != v86)
      {
        if ((v87->vertexFlags & 1) != 0) {
          id v91 = 3;
        }
        else {
          id v91 = 2;
        }
        glVertexAttribPointer(0, v91, 0x1406u, 0, vertexStride, v87->vertexPointer);
        self->mInnerState->vertexPointer = self->mOuterState->vertexPointer;
        self->mInnerState->vertexStride = self->mOuterState->vertexStride;
        double v87 = self->mOuterState;
      }
    }

    normalArrayIsEnabled = v87->normalArrayIsEnabled;
    double v93 = self->mInnerState;
    if (normalArrayIsEnabled != v93->normalArrayIsEnabled)
    {
      if (v87->normalArrayIsEnabled) {
        glEnableVertexAttribArray(2u);
      }
      else {
        glDisableVertexAttribArray(2u);
      }
      self->mInnerState->normalArrayIsEnabled = self->mOuterState->normalArrayIsEnabled;
      double v87 = self->mOuterState;
      double v93 = self->mInnerState;
      normalArrayIsEnabled = v87->normalArrayIsEnabled;
    }

    if (normalArrayIsEnabled)
    {
      normalsPointer = v87->normalsPointer;
      if (normalsPointer != v93->normalsPointer || vbo != v84 && (v87->vertexFlags & 2) != 0)
      {
        glVertexAttribPointer(2u, 3, 0x1406u, 0, v87->vertexStride, normalsPointer);
        self->mInnerState->normalsPointer = self->mOuterState->normalsPointer;
        double v87 = self->mOuterState;
        double v93 = self->mInnerState;
      }
    }

    foreColorArrayIsEnabled = v87->foreColorArrayIsEnabled;
    if (foreColorArrayIsEnabled != v93->foreColorArrayIsEnabled)
    {
      if (v87->foreColorArrayIsEnabled) {
        glEnableVertexAttribArray(1u);
      }
      else {
        glDisableVertexAttribArray(1u);
      }
      self->mInnerState->foreColorArrayIsEnabled = self->mOuterState->foreColorArrayIsEnabled;
      double v87 = self->mOuterState;
      double v93 = self->mInnerState;
      foreColorArrayIsEnabled = v87->foreColorArrayIsEnabled;
    }

    if (foreColorArrayIsEnabled)
    {
      colorsPointer = v87->colorsPointer;
      if (colorsPointer != v93->colorsPointer || vbo != v84 && (v87->vertexFlags & 0x80) != 0)
      {
        glVertexAttribPointer(1u, 4, 0x1406u, 0, v87->vertexStride, colorsPointer);
        self->mInnerState->colorsPointer = self->mOuterState->colorsPointer;
        double v87 = self->mOuterState;
        double v93 = self->mInnerState;
      }
    }

    inSpriteCoordinatesArrayIsEnabled = v87->inSpriteCoordinatesArrayIsEnabled;
    if (inSpriteCoordinatesArrayIsEnabled != v93->inSpriteCoordinatesArrayIsEnabled)
    {
      if (v87->inSpriteCoordinatesArrayIsEnabled) {
        glEnableVertexAttribArray(7u);
      }
      else {
        glDisableVertexAttribArray(7u);
      }
      self->mInnerState->inSpriteCoordinatesArrayIsEnabled = self->mOuterState->inSpriteCoordinatesArrayIsEnabled;
      double v87 = self->mOuterState;
      inSpriteCoordinatesArrayIsEnabled = v87->inSpriteCoordinatesArrayIsEnabled;
    }

    if (inSpriteCoordinatesArrayIsEnabled)
    {
      inSpriteCoordinatesPointer = v87->inSpriteCoordinatesPointer;
      if (vbo != v84
        || inSpriteCoordinatesPointer != self->mInnerState->inSpriteCoordinatesPointer
        || (v87->vertexFlags & 0x40) != 0)
      {
        glVertexAttribPointer(7u, 2, 0x1406u, 0, v87->vertexStride, inSpriteCoordinatesPointer);
        self->mInnerState->inSpriteCoordinatesPointer = self->mOuterState->inSpriteCoordinatesPointer;
      }
    }

    for (m = 0LL; m != 4; ++m)
    {
      double v100 = self->mOuterState;
      double v101 = v100->textureCoordinatesArrayIsEnabled[m];
      if (v101 != self->mInnerState->textureCoordinatesArrayIsEnabled[m])
      {
        double v102 = m + 3;
        if (v100->textureCoordinatesArrayIsEnabled[m]) {
          glEnableVertexAttribArray(v102);
        }
        else {
          glDisableVertexAttribArray(v102);
        }
        self->mInnerState->textureCoordinatesArrayIsEnabled[m] = self->mOuterState->textureCoordinatesArrayIsEnabled[m];
        double v100 = self->mOuterState;
        double v101 = v100->textureCoordinatesArrayIsEnabled[m];
      }

      if (v101)
      {
        float v103 = v100->textureCoordinatesPointer[m];
        if (vbo != v84
          || v103 != self->mInnerState->textureCoordinatesPointer[m]
          || ((v100->vertexFlags >> m) & 4) != 0)
        {
          glVertexAttribPointer(m + 3, 2, 0x1406u, 0, v100->vertexStride, v103);
          self->mInnerState->textureCoordinatesPointer[m] = self->mOuterState->textureCoordinatesPointer[m];
        }
      }
    }

    -[NSMutableDictionary removeAllObjects]( -[MRContextState vertexAttributes](self->mOuterState, "vertexAttributes"),  "removeAllObjects");
    double v145 = 0u;
    double v146 = 0u;
    double v143 = 0u;
    double v144 = 0u;
    mVertexAttributes = self->mVertexAttributes;
    float v105 = -[NSMutableDictionary countByEnumeratingWithState:objects:count:]( mVertexAttributes,  "countByEnumeratingWithState:objects:count:",  &v143,  v153,  16LL);
    if (v105)
    {
      double v106 = v105;
      double v107 = *(void *)v144;
      do
      {
        for (n = 0LL; n != v106; n = (char *)n + 1)
        {
          if (*(void *)v144 != v107) {
            objc_enumerationMutation(mVertexAttributes);
          }
          id v109 = *(void *)(*((void *)&v143 + 1) + 8LL * (void)n);
          __int128 v110 = -[MRShader locationForAttribute:](self->mCurrentShader, "locationForAttribute:", v109);
          if ((v110 & 0x80000000) == 0) {
            -[NSMutableDictionary setObject:forKey:]( -[MRContextState vertexAttributes](self->mOuterState, "vertexAttributes"),  "setObject:forKey:",  -[NSMutableDictionary objectForKey:](self->mVertexAttributes, "objectForKey:", v109),  +[NSNumber numberWithUnsignedInteger:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInteger:", v110));
          }
        }

        double v106 = -[NSMutableDictionary countByEnumeratingWithState:objects:count:]( mVertexAttributes,  "countByEnumeratingWithState:objects:count:",  &v143,  v153,  16LL);
      }

      while (v106);
    }

    double v141 = 0u;
    double v142 = 0u;
    double v139 = 0u;
    double v140 = 0u;
    __int128 v111 = -[MRContextState vertexAttributes](self->mInnerState, "vertexAttributes");
    __int128 v112 = -[NSMutableDictionary countByEnumeratingWithState:objects:count:]( v111,  "countByEnumeratingWithState:objects:count:",  &v139,  v152,  16LL);
    if (v112)
    {
      __int128 v113 = v112;
      double v114 = *(void *)v140;
      do
      {
        for (isize_t i = 0LL; ii != v113; isize_t i = (char *)ii + 1)
        {
          if (*(void *)v140 != v114) {
            objc_enumerationMutation(v111);
          }
          double v116 = *(void **)(*((void *)&v139 + 1) + 8LL * (void)ii);
          double v117 = -[NSMutableDictionary objectForKey:]( -[MRContextState vertexAttributes](self->mInnerState, "vertexAttributes"),  "objectForKey:",  v116);
          if (v117[24])
          {
            double v118 = v117;
            if (!-[NSMutableDictionary objectForKey:]( -[MRContextState vertexAttributes](self->mOuterState, "vertexAttributes"),  "objectForKey:",  v116))
            {
              v118[24] = 0;
              glDisableVertexAttribArray((GLuint)[v116 unsignedIntValue]);
            }
          }
        }

        __int128 v113 = -[NSMutableDictionary countByEnumeratingWithState:objects:count:]( v111,  "countByEnumeratingWithState:objects:count:",  &v139,  v152,  16LL);
      }

      while (v113);
    }

    double v137 = 0u;
    double v138 = 0u;
    double v135 = 0u;
    double v136 = 0u;
    double v119 = -[MRContextState vertexAttributes](self->mOuterState, "vertexAttributes", 0LL);
    double v120 = -[NSMutableDictionary countByEnumeratingWithState:objects:count:]( v119,  "countByEnumeratingWithState:objects:count:",  &v135,  v151,  16LL);
    if (v120)
    {
      double v121 = v120;
      double v122 = *(void *)v136;
      do
      {
        for (jj = 0LL; jj != v121; jj = (char *)jj + 1)
        {
          if (*(void *)v136 != v122) {
            objc_enumerationMutation(v119);
          }
          double v124 = *(void **)(*((void *)&v135 + 1) + 8LL * (void)jj);
          double v125 = -[NSMutableDictionary objectForKey:]( -[MRContextState vertexAttributes](self->mOuterState, "vertexAttributes"),  "objectForKey:",  v124);
          double v126 = (MRContextVertexAttributes *)-[NSMutableDictionary objectForKey:]( -[MRContextState vertexAttributes]( self->mInnerState,  "vertexAttributes"),  "objectForKey:",  v124);
          if (!v126)
          {
            double v126 = objc_alloc_init(&OBJC_CLASS___MRContextVertexAttributes);
            -[NSMutableDictionary setObject:forKey:]( -[MRContextState vertexAttributes](self->mInnerState, "vertexAttributes"),  "setObject:forKey:",  v126,  v124);
          }

          if (!v126->enabled)
          {
            glEnableVertexAttribArray((GLuint)[v124 unsignedIntValue]);
            v126->enabled = 1;
          }

          if (v126->pointer != (const void *)*((void *)v125 + 1) || v126->size != *((void *)v125 + 2))
          {
            glVertexAttribPointer( (GLuint)[v124 unsignedIntValue],  *((_DWORD *)v125 + 4),  0x1406u,  0,  0,  *((const GLvoid **)v125 + 1));
            v126->pointer = (const void *)*((void *)v125 + 1);
            v126->size = *((void *)v125 + 2);
          }
        }

        double v121 = -[NSMutableDictionary countByEnumeratingWithState:objects:count:]( v119,  "countByEnumeratingWithState:objects:count:",  &v135,  v151,  16LL);
      }

      while (v121);
    }
  }

  self->mCurrentVBOWasUpdated = 0;
}

LABEL_124:
  double v101 = v88 - v62;
  double v102 = (a5 - v62) / (v88 - v62);
  [v58 postControl];
  double v104 = v103;
  [v59 preControl];
  double v106 = v62 + Spline1(v102, 0.0, v104, v105 + 1.0, 1.0, 0.0, 0.0, 1.0, 1.0) * v101 - v62;
  if (v106 <= 0.0) {
    double v107 = 0.0;
  }
  else {
    double v107 = v106 / v101;
  }
  double v21 = v21 + (a6 - v21) * v107;
LABEL_128:
  if (a4) {
    [a4 setLastValue:v21];
  }
  return v21;
}

uint64_t MRIsAppleTV()
{
  if (qword_2B04F8 != -1) {
    dispatch_once(&qword_2B04F8, &stru_24E370);
  }
  return byte_2B04F0;
}

void sub_A51D4(id a1)
{
  *(void *)size_t v4 = 0x100000006LL;
  sysctl(v4, 2u, 0LL, &__size, 0LL, 0LL);
  float v1 = malloc(__size);
  sysctl(v4, 2u, v1, &__size, 0LL, 0LL);
  uint64_t v2 = +[NSString stringWithCString:encoding:](&OBJC_CLASS___NSString, "stringWithCString:encoding:", v1, 1LL);
  free(v1);
  byte_2B04F0 = -[NSString hasPrefix:](v2, "hasPrefix:", @"AppleTV");
}

int *MRMatrix_Identity()
{
  if (*(float *)&dword_2B0500 == 0.0)
  {
    unk_2B0524 = 0u;
    *(_OWORD *)&dword_2B0514 = 0u;
    unk_2B0534 = 0LL;
    unk_2B0504 = 0u;
    dword_2B053C = 1065353216;
    dword_2B0528 = 1065353216;
    dword_2B0514 = 1065353216;
    dword_2B0500 = 1065353216;
  }

  return &dword_2B0500;
}

double MRMatrix_Clear(uint64_t a1)
{
  double result = 0.0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 4_Block_object_dispose((const void *)(v1 - 64), 8) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 60) = 1065353216;
  *(_DWORD *)(a1 + 40) = 1065353216;
  *(_DWORD *)(a1 + 20) = 1065353216;
  *(_DWORD *)a1 = 1065353216;
  return result;
}

uint64_t MRMatrix_SetDiagonal(uint64_t result, float a2, float a3, float a4)
{
  *(_OWORD *)double result = 0u;
  *(_OWORD *)(result + 16) = 0u;
  *(_OWORD *)(result + 32) = 0u;
  *(_OWORD *)(result + 4_Block_object_dispose((const void *)(v1 - 64), 8) = 0u;
  *(float *)double result = a2;
  *(float *)(result + 20) = a3;
  *(float *)(result + 40) = a4;
  *(_DWORD *)(result + 60) = 1065353216;
  return result;
}

float MRMatrix_SetRotationFromAnglesYXZDeg(uint64_t a1, float a2, float a3, float a4)
{
  float v4 = a3 * 0.0174532925;
  float v5 = a2 * 0.0174532925;
  float v6 = a4 * 0.0174532925;
  return MRMatrix_SetRotationFromAnglesYXZRad(a1, v5, v4, v6);
}

float MRMatrix_SetRotationFromAnglesYXZRad(uint64_t a1, float a2, float a3, float a4)
{
  __float2 v8 = __sincosf_stret(a3);
  if (a3 == 0.0) {
    float cosval = 1.0;
  }
  else {
    float cosval = v8.__cosval;
  }
  if (a3 == 0.0) {
    float sinval = 0.0;
  }
  else {
    float sinval = v8.__sinval;
  }
  __float2 v11 = __sincosf_stret(a2);
  BOOL v12 = a2 == 0.0;
  if (a2 == 0.0) {
    float v13 = 1.0;
  }
  else {
    float v13 = v11.__cosval;
  }
  if (v12) {
    float v14 = 0.0;
  }
  else {
    float v14 = v11.__sinval;
  }
  __float2 v17 = __sincosf_stret(a4);
  float v16 = v17.__cosval;
  float v15 = v17.__sinval;
  if (a4 == 0.0)
  {
    float v16 = 1.0;
    float v15 = 0.0;
  }

  *(float *)a1 = (float)((float)(v14 * sinval) * v15) + (float)(v13 * v16);
  *(float *)(a1 + 4) = cosval * v15;
  *(float *)(a1 + _Block_object_dispose((const void *)(v1 - 64), 8) = (float)((float)(v13 * sinval) * v15) - (float)(v14 * v16);
  *(_DWORD *)(a1 + 12) = 0;
  *(float *)(a1 + 16) = (float)((float)(v14 * sinval) * v16) - (float)(v13 * v15);
  *(float *)(a1 + 20) = cosval * v16;
  *(float *)(a1 + 24) = (float)((float)(v13 * sinval) * v16) + (float)(v14 * v15);
  *(_DWORD *)(a1 + 2_Block_object_dispose((const void *)(v1 - 64), 8) = 0;
  *(float *)(a1 + 32) = v14 * cosval;
  *(float *)(a1 + 36) = -sinval;
  float result = v13 * cosval;
  *(float *)(a1 + 40) = v13 * cosval;
  *(void *)(a1 + 52) = 0LL;
  *(void *)(a1 + 44) = 0LL;
  *(_DWORD *)(a1 + 60) = 1065353216;
  return result;
}

float MRMatrix_SetRotationFromAnglesXYZDeg(uint64_t a1, float a2, float a3, float a4)
{
  float v4 = a2 * 0.0174532925;
  float v5 = a3 * 0.0174532925;
  float v6 = a4 * 0.0174532925;
  return MRMatrix_SetRotationFromAnglesXYZRad(a1, v4, v5, v6);
}

float MRMatrix_SetRotationFromAnglesXYZRad(uint64_t a1, float a2, float a3, float a4)
{
  __float2 v8 = __sincosf_stret(a2);
  if (a2 == 0.0) {
    float cosval = 1.0;
  }
  else {
    float cosval = v8.__cosval;
  }
  if (a2 == 0.0) {
    float sinval = 0.0;
  }
  else {
    float sinval = v8.__sinval;
  }
  __float2 v11 = __sincosf_stret(a3);
  BOOL v12 = a3 == 0.0;
  if (a3 == 0.0) {
    float v13 = 1.0;
  }
  else {
    float v13 = v11.__cosval;
  }
  if (v12) {
    float v14 = 0.0;
  }
  else {
    float v14 = v11.__sinval;
  }
  __float2 v17 = __sincosf_stret(a4);
  float v16 = v17.__cosval;
  float v15 = v17.__sinval;
  if (a4 == 0.0)
  {
    float v16 = 1.0;
    float v15 = 0.0;
  }

  *(float *)a1 = v13 * v16;
  *(float *)(a1 + 4) = (float)(cosval * v15) + (float)((float)(sinval * v14) * v16);
  *(float *)(a1 + _Block_object_dispose((const void *)(v1 - 64), 8) = (float)(sinval * v15) - (float)((float)(cosval * v14) * v16);
  *(_DWORD *)(a1 + 12) = 0;
  *(float *)(a1 + 16) = -(float)(v13 * v15);
  *(float *)(a1 + 20) = (float)(cosval * v16) - (float)((float)(sinval * v14) * v15);
  *(float *)(a1 + 24) = (float)(sinval * v16) + (float)((float)(cosval * v14) * v15);
  *(_DWORD *)(a1 + 2_Block_object_dispose((const void *)(v1 - 64), 8) = 0;
  *(float *)(a1 + 32) = v14;
  *(float *)(a1 + 36) = -(float)(sinval * v13);
  float result = cosval * v13;
  *(float *)(a1 + 40) = cosval * v13;
  *(void *)(a1 + 52) = 0LL;
  *(void *)(a1 + 44) = 0LL;
  *(_DWORD *)(a1 + 60) = 1065353216;
  return result;
}

float MRMatrix_Translate(float *a1, float a2, float a3, float a4)
{
  float v4 = a1[13] + a3;
  a1[12] = a1[12] + a2;
  a1[13] = v4;
  float result = a1[14] + a4;
  a1[14] = result;
  return result;
}

float32_t MRMatrix_Scale(float32x2_t *a1, float32x2_t a2, float32_t a3, float a4)
{
  a2.f32[1] = a3;
  *a1 = vmul_f32(*a1, a2);
  a1[1].f32[0] = a1[1].f32[0] * a4;
  a1[2] = vmul_f32(a1[2], a2);
  a1[3].f32[0] = a1[3].f32[0] * a4;
  a1[4] = vmul_f32(a1[4], a2);
  a1[5].f32[0] = a1[5].f32[0] * a4;
  a1[6] = vmul_f32(a1[6], a2);
  float32_t result = a1[7].f32[0] * a4;
  a1[7].f32[0] = result;
  return result;
}

double MRMatrix_PreMultiply(float *a1, uint64_t a2)
{
  __int128 v3 = v6[1];
  *(_OWORD *)a2 = v6[0];
  *(_OWORD *)(a2 + 16) = v3;
  double result = *(double *)&v7;
  __int128 v5 = v8;
  *(_OWORD *)(a2 + 32) = v7;
  *(_OWORD *)(a2 + 4_Block_object_dispose((const void *)(v1 - 64), 8) = v5;
  return result;
}

float MRMatrix_MultiplyWithMatrix(float *a1, float *a2, float *a3)
{
  *a3 = (float)((float)((float)(a1[1] * a2[4]) + (float)(*a1 * *a2)) + (float)(a1[2] * a2[8])) + (float)(a1[3] * a2[12]);
  a3[15] = result;
  return result;
}

double MRMatrix_PostMultiply(uint64_t a1, float *a2)
{
  __int128 v3 = v6[1];
  *(_OWORD *)a1 = v6[0];
  *(_OWORD *)(a1 + 16) = v3;
  double result = *(double *)&v7;
  __int128 v5 = v8;
  *(_OWORD *)(a1 + 32) = v7;
  *(_OWORD *)(a1 + 4_Block_object_dispose((const void *)(v1 - 64), 8) = v5;
  return result;
}

float MRMatrix_TransformVector(float *a1, float *a2, float *a3)
{
  double v3 = *a2;
  double v4 = a2[1];
  double v5 = a2[2];
  float v6 = v4 * a1[4] + *a1 * v3 + a1[8] * v5 + a1[12];
  *a3 = v6;
  float v7 = v4 * a1[5] + a1[1] * v3 + a1[9] * v5 + a1[13];
  a3[1] = v7;
  float v8 = v4 * a1[6] + a1[2] * v3 + a1[10] * v5 + a1[14];
  a3[2] = v8;
  float result = v4 * a1[7] + a1[3] * v3 + a1[11] * v5 + a1[15];
  a3[3] = result;
  return result;
}

float MRMatrix_RotateVector(float *a1, float *a2, uint64_t a3)
{
  double v3 = *a2;
  double v4 = a2[1];
  double v5 = a2[2];
  float v6 = v4 * a1[4] + *a1 * v3 + a1[8] * v5;
  *(float *)a3 = v6;
  float v7 = v4 * a1[5] + a1[1] * v3 + a1[9] * v5;
  *(float *)(a3 + 4) = v7;
  float result = v4 * a1[6] + a1[2] * v3 + a1[10] * v5;
  *(float *)(a3 + _Block_object_dispose((const void *)(v1 - 64), 8) = result;
  *(_DWORD *)(a3 + 12) = 1065353216;
  return result;
}

void MRMatrix_ConcatenateWithMatrix(float *a1, float *a2, uint64_t a3)
{
  *(_DWORD *)(a3 + 44) = 0;
  *(_DWORD *)(a3 + 2_Block_object_dispose((const void *)(v1 - 64), 8) = 0;
  *(_DWORD *)(a3 + 12) = 0;
  *(_DWORD *)(a3 + 60) = 1065353216;
}

double MRMatrix_Determinant(float *a1)
{
  float v1 = a1[1];
  float v3 = a1[4];
  float v2 = a1[5];
  float v4 = *a1 * v2;
  float v5 = a1[10];
  float v6 = a1[11];
  float v7 = a1[6];
  float v8 = a1[7];
  float v9 = *a1 * v7;
  float v11 = a1[12];
  float v10 = a1[13];
  float v13 = a1[14];
  float v12 = a1[15];
  float v14 = *a1 * v8;
  float v16 = a1[8];
  float v15 = a1[9];
  float v17 = v1 * v3;
  float v18 = v7 * v1;
  float v19 = (float)((float)((float)((float)((float)(v9 * v6) * v10) + (float)((float)(v4 * v5) * v12))
                      + (float)((float)(v14 * v15) * v13))
  float v20 = v8 * v1;
  float v21 = a1[2];
  float v22 = a1[3];
  float v23 = v8 * v21;
  return (float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)(v19 + (float)((float)(v5 * v20) * v11)) + (float)((float)(v15 * (float)(v3 * v21)) * v12)) + (float)((float)(v6 * (float)(v2 * v21)) * v11)) + (float)((float)(v16 * v23) * v10)) + (float)((float)(v5 * (float)(v3 * v22)) * v10)) + (float)((float)(v16 * (float)(v2 * v22)) * v13)) + (float)((float)(v15 * (float)(v7 * v22)) * v11)) + (float)((float)-(float)(v4 * v6) * v13))
                                                                                               + (float)((float)-(float)(v9 * v15) * v12))
                                                                                       + (float)((float)-(float)(v14 * v5)
                                                                                               * v10))
                                                                               + (float)((float)-(float)(v17 * v5) * v12))
                                                                       + (float)((float)-(float)(v18 * v6) * v11))
                                                               + (float)((float)-(float)(v20 * v16) * v13))
                                                       + (float)((float)-(float)((float)(v3 * v21) * v6) * v10))
                                               + (float)((float)-(float)((float)(v2 * v21) * v16) * v12))
                                       + (float)((float)-(float)(v23 * v15) * v11))
                               + (float)((float)-(float)((float)(v3 * v22) * v15) * v13))
}

BOOL MRMatrix_Invert(float *a1, float *a2)
{
  *(double *)&uint64_t v4 = MRMatrix_Determinant(a1);
  if (*(double *)&v4 != 0.0)
  {
    uint64_t v5 = 0LL;
    *a2 = (float)((float)((float)((float)((float)((float)(a1[6] * a1[11]) * a1[13])
                                        + (float)((float)(a1[5] * a1[10]) * a1[15]))
                                + (float)((float)(a1[7] * a1[9]) * a1[14]))
                        + (float)((float)-(float)(a1[5] * a1[11]) * a1[14]))
    a2[1] = (float)((float)((float)((float)((float)((float)(a1[2] * a1[9]) * a1[15])
                                          + (float)((float)(a1[1] * a1[11]) * a1[14]))
                                  + (float)((float)(a1[3] * a1[10]) * a1[13]))
                          + (float)((float)-(float)(a1[1] * a1[10]) * a1[15]))
    a2[2] = (float)((float)((float)((float)((float)((float)(a1[2] * a1[7]) * a1[13])
                                          + (float)((float)(a1[1] * a1[6]) * a1[15]))
                                  + (float)((float)(a1[3] * a1[5]) * a1[14]))
                          + (float)((float)-(float)(a1[1] * a1[7]) * a1[14]))
    a2[3] = (float)((float)((float)((float)((float)((float)(a1[2] * a1[5]) * a1[11])
                                          + (float)((float)(a1[1] * a1[7]) * a1[10]))
                                  + (float)((float)(a1[3] * a1[6]) * a1[9]))
                          + (float)((float)-(float)(a1[1] * a1[6]) * a1[11]))
    a2[4] = (float)((float)((float)((float)((float)((float)(a1[6] * a1[8]) * a1[15])
                                          + (float)((float)(a1[4] * a1[11]) * a1[14]))
                                  + (float)((float)(a1[7] * a1[10]) * a1[12]))
                          + (float)((float)-(float)(a1[4] * a1[10]) * a1[15]))
    a2[5] = (float)((float)((float)((float)((float)((float)(a1[2] * a1[11]) * a1[12])
                                          + (float)((float)(*a1 * a1[10]) * a1[15]))
                                  + (float)((float)(a1[3] * a1[8]) * a1[14]))
                          + (float)((float)-(float)(*a1 * a1[11]) * a1[14]))
    a2[6] = (float)((float)((float)((float)((float)((float)(a1[2] * a1[4]) * a1[15])
                                          + (float)((float)(*a1 * a1[7]) * a1[14]))
                                  + (float)((float)(a1[3] * a1[6]) * a1[12]))
                          + (float)((float)-(float)(*a1 * a1[6]) * a1[15]))
    a2[7] = (float)((float)((float)((float)((float)((float)(a1[2] * a1[7]) * a1[8])
                                          + (float)((float)(*a1 * a1[6]) * a1[11]))
                                  + (float)((float)(a1[3] * a1[4]) * a1[10]))
                          + (float)((float)-(float)(*a1 * a1[7]) * a1[10]))
    a2[8] = (float)((float)((float)((float)((float)((float)(a1[5] * a1[11]) * a1[12])
                                          + (float)((float)(a1[4] * a1[9]) * a1[15]))
                                  + (float)((float)(a1[7] * a1[8]) * a1[13]))
                          + (float)((float)-(float)(a1[4] * a1[11]) * a1[13]))
    a2[9] = (float)((float)((float)((float)((float)((float)(a1[1] * a1[8]) * a1[15])
                                          + (float)((float)(*a1 * a1[11]) * a1[13]))
                                  + (float)((float)(a1[3] * a1[9]) * a1[12]))
                          + (float)((float)-(float)(*a1 * a1[9]) * a1[15]))
    a2[10] = (float)((float)((float)((float)((float)((float)(a1[1] * a1[7]) * a1[12])
                                           + (float)((float)(*a1 * a1[5]) * a1[15]))
                                   + (float)((float)(a1[3] * a1[4]) * a1[13]))
                           + (float)((float)-(float)(*a1 * a1[7]) * a1[13]))
    a2[11] = (float)((float)((float)((float)((float)((float)(a1[1] * a1[4]) * a1[11])
                                           + (float)((float)(*a1 * a1[7]) * a1[9]))
                                   + (float)((float)(a1[3] * a1[5]) * a1[8]))
                           + (float)((float)-(float)(*a1 * a1[5]) * a1[11]))
    a2[12] = (float)((float)((float)((float)((float)((float)(a1[5] * a1[8]) * a1[14])
                                           + (float)((float)(a1[4] * a1[10]) * a1[13]))
                                   + (float)((float)(a1[6] * a1[9]) * a1[12]))
                           + (float)((float)-(float)(a1[4] * a1[9]) * a1[14]))
    a2[13] = (float)((float)((float)((float)((float)((float)(a1[1] * a1[10]) * a1[12])
                                           + (float)((float)(*a1 * a1[9]) * a1[14]))
                                   + (float)((float)(a1[2] * a1[8]) * a1[13]))
                           + (float)((float)-(float)(*a1 * a1[10]) * a1[13]))
    a2[14] = (float)((float)((float)((float)((float)((float)(a1[1] * a1[4]) * a1[14])
                                           + (float)((float)(*a1 * a1[6]) * a1[13]))
                                   + (float)((float)(a1[2] * a1[5]) * a1[12]))
                           + (float)((float)-(float)(*a1 * a1[5]) * a1[14]))
    a2[15] = (float)((float)((float)((float)((float)((float)(a1[1] * a1[6]) * a1[8])
                                           + (float)((float)(*a1 * a1[5]) * a1[10]))
                                   + (float)((float)(a1[2] * a1[4]) * a1[9]))
                           + (float)((float)-(float)(*a1 * a1[6]) * a1[9]))
    float64x2_t v6 = (float64x2_t)vdupq_lane_s64(v4, 0);
    do
    {
      *(float32x4_t *)&a2[v5] = vcvt_hight_f32_f64( (int32x2_t)vcvt_f32_f64(vdivq_f64(vcvtq_f64_f32(*(float32x2_t *)&a2[v5]), v6)),  vdivq_f64(vcvt_hight_f64_f32(*(float32x4_t *)&a2[v5]), v6));
      v5 += 4LL;
    }

    while (v5 != 16);
  }

  return *(double *)&v4 != 0.0;
}

float MRMatrix_Frustum(uint64_t a1, float a2, float a3, float a4, float a5, float a6, float a7)
{
  *(_DWORD *)(a1 + 60) = 0;
  *(void *)(a1 + 24) = 0LL;
  *(_DWORD *)(a1 + 52) = 0;
  *(void *)(a1 + 12) = 0LL;
  *(void *)(a1 + 4) = 0LL;
  *(void *)(a1 + 44) = 3212836864LL;
  float v7 = a2 + a3;
  float v8 = a3 - a2;
  float v9 = v7 / v8;
  float v10 = a4 + a5;
  float v11 = a5 - a4;
  *(float *)(a1 + 32) = v9;
  *(float *)(a1 + 36) = v10 / v11;
  float v12 = a7 - a6;
  *(float *)(a1 + 40) = (float)-(float)(a6 + a7) / (float)(a7 - a6);
  double v13 = a6;
  float v14 = a7 * -2.0 * v13 / v12;
  *(float *)(a1 + 56) = v14;
  float v15 = (v13 + v13) / v8;
  *(float *)a1 = v15;
  float result = (v13 + v13) / v11;
  *(float *)(a1 + 20) = result;
  return result;
}

double MRMatrix_ProjectPoint(float *a1, double a2, double a3)
{
  float v3 = a2;
  float v4 = a3;
  v7[0] = v3;
  v7[1] = v4;
  uint64_t v8 = 0x3F80000000000000LL;
  MRMatrix_TransformVector(a1, v7, v6);
  return (float)(v6[0] / v6[3]);
}

double MRMatrix_UnprojectPoint(float *a1, double a2, double a3)
{
  float v4 = a2;
  float v5 = a3;
  v16[0] = v4;
  v16[1] = v5;
  uint64_t v17 = 0x3F80000000000000LL;
  MRMatrix_TransformVector(a1, v16, (float *)&v13);
  *(float *)v6.i32 = v15;
  if (v15 != 0.0)
  {
    float32x2_t v13 = vdiv_f32(v13, (float32x2_t)vdup_lane_s32(v6, 0));
    float v14 = v14 / v15;
  }

  LODWORD(v17) = -1073741824;
  MRMatrix_TransformVector(a1, v16, (float *)&v10);
  *(float *)v7.i32 = v12;
  if (v12 == 0.0)
  {
    *(float *)v7.i32 = v11;
  }

  else
  {
    float32x2_t v10 = vdiv_f32(v10, (float32x2_t)vdup_lane_s32(v7, 0));
    *(float *)v7.i32 = v11 / v12;
  }

  if (*(float *)v7.i32 == v14)
  {
    v8.i32[0] = v10.i32[0];
    v8.f32[1] = -v10.f32[1];
  }

  else
  {
    *(float *)v7.i32 = *(float *)v7.i32 - v14;
    float32x2_t v8 = vsub_f32(v13, vdiv_f32(vmul_n_f32(vsub_f32(v10, v13), v14), (float32x2_t)vdup_lane_s32(v7, 0)));
  }

  *(void *)&double result = *(_OWORD *)&vcvtq_f64_f32(v8);
  return result;
}

double MRCGPointRotatedByDegrees(double a1, double a2, float a3)
{
  float v5 = a3 * 0.0174532925;
  __float2 v6 = __sincosf_stret(v5);
  return a1 * v6.__cosval - a2 * v6.__sinval;
}

double MRCGPointRotatedByRadians(double a1, double a2, float a3)
{
  __float2 v5 = __sincosf_stret(a3);
  return a1 * v5.__cosval - a2 * v5.__sinval;
}

double Spline(int a1, double *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, double a8)
{
  if (*a2 >= a8) {
    return *(double *)a5;
  }
  uint64_t v8 = (a1 - 1);
  unsigned int v9 = -1;
  do
  {
    uint64_t v10 = v9 + 2;
    double v11 = a2[v10];
    ++v9;
  }

  while (v11 <= a8);
  if (a6) {
    uint64_t v12 = a6;
  }
  else {
    uint64_t v12 = a5;
  }
  double v13 = *(double *)(v12 + 8 * v10);
  if (a7) {
    uint64_t v14 = a7;
  }
  else {
    uint64_t v14 = a5;
  }
  return Spline1( a8,  a2[v9],  *(double *)(a3 + 8 * v10),  *(double *)(a4 + 8LL * v9),  v11,  *(double *)(a5 + 8LL * v9),  v13,  *(double *)(v14 + 8LL * v9),  *(double *)(a5 + 8 * v10));
}

CGImageRef CreateResizedCGImage(CGImage *a1, CGFloat a2, CGFloat a3)
{
  ColorSpace = CGImageGetColorSpace(a1);
  CGImageAlphaInfo AlphaInfo = CGImageGetAlphaInfo(a1);
  if (AlphaInfo == kCGImageAlphaNone)
  {
    if (CGColorSpaceGetModel(ColorSpace) == kCGColorSpaceModelRGB) {
      CGImageAlphaInfo AlphaInfo = kCGImageAlphaNoneSkipLast;
    }
    else {
      CGImageAlphaInfo AlphaInfo = kCGImageAlphaNone;
    }
  }

  if (AlphaInfo == kCGImageAlphaLast) {
    int v8 = 1;
  }
  else {
    int v8 = AlphaInfo;
  }
  if (v8 == 4) {
    int v9 = 2;
  }
  else {
    int v9 = v8;
  }
  DeviceRGB = CGColorSpaceCreateDeviceRGB();
  size_t NumberOfComponents = CGColorSpaceGetNumberOfComponents(DeviceRGB);
  if (v9) {
    size_t v12 = NumberOfComponents + 1;
  }
  else {
    size_t v12 = NumberOfComponents;
  }
  double v13 = CGBitmapContextCreate( 0LL,  (unint64_t)a2,  (unint64_t)a3,  8uLL,  v12 * (int)a2,  DeviceRGB,  v9 | 0x4000u);
  CGColorSpaceRelease(DeviceRGB);
  if (!v13) {
    return 0LL;
  }
  CGContextSetInterpolationQuality(v13, kCGInterpolationHigh);
  v16.origin.double x = 0.0;
  v16.origin.double y = 0.0;
  v16.size.double width = a2;
  v16.size.double height = a3;
  CGContextDrawImage(v13, v16, a1);
  CGImageRef Image = CGBitmapContextCreateImage(v13);
  CGContextRelease(v13);
  return Image;
}

double MRGetCurrentTime()
{
  uint64_t v0 = mach_absolute_time();
  mach_timebase_info(&info);
  return (double)(v0 * info.numer / info.denom) * 0.000000001;
}

int64_t sub_A66E4(NSIndexSet *self, SEL a2, int64_t a3)
{
  int64_t v5 = -[NSIndexSet firstIndex](self, "firstIndex");
  if (v5 != 0x7FFFFFFFFFFFFFFFLL && a3)
  {
    int64_t v6 = a3 - 1;
    do
    {
      int64_t v7 = v6;
      int64_t v5 = -[NSIndexSet indexGreaterThanIndex:](self, "indexGreaterThanIndex:", v5);
      if (v5 == 0x7FFFFFFFFFFFFFFFLL) {
        break;
      }
      int64_t v6 = v7 - 1;
    }

    while (v7);
  }

  return v5;
}

double MRFitInToAspectRatio(double result, double a2, double a3)
{
  if (result >= a2 * a3) {
    return a2 * a3;
  }
  return result;
}

double MRFitOutToAspectRatio(double result, double a2, double a3)
{
  if (result <= a2 * a3) {
    return a2 * a3;
  }
  return result;
}

  ;
}

uint64_t MRBreakOnTrue(uint64_t a1)
{
  if ((_DWORD)a1) {
    NSLog(@"BreakOnTrue!!!");
  }
  return a1;
}

uint64_t _good_rand(uint64_t a1)
{
  uint64_t v1 = 123459876LL;
  if (a1) {
    uint64_t v1 = a1;
  }
  uint64_t v2 = 16807 * (v1 % 127773) - 2836 * (v1 / 127773);
  if (v2 >= 0) {
    return v2;
  }
  else {
    return v2 + 0x7FFFFFFF;
  }
}

void sub_A6BC0(_Unwind_Exception *a1)
{
}

void sub_A6C1C(_Unwind_Exception *a1)
{
}

LABEL_122:
  if (![v177 count]
    && +[MPAuthoringUtilities useDefaultAudioFromOptions:]( &OBJC_CLASS___MPAuthoringUtilities,  "useDefaultAudioFromOptions:",  v10))
  {
    float v77 = objc_msgSend( +[MPStyleManager sharedManager](MPStyleManager, "sharedManager"),  "songPathsForStyleID:",  v181);
    [a3 setAudioPaths:v77];
    if (v77 && [v77 count]) {
      objc_msgSend( a3,  "setAudioPlaylist:",  -[MPAuthoringController createAudioPlayListFromAudioPaths:andOptions:]( self,  "createAudioPlayListFromAudioPaths:andOptions:",  v77,  v10));
    }
    [v177 addObjectsFromArray:v77];
    double v78 = 1;
    goto LABEL_130;
  }

LABEL_129:
  double v78 = 0;
LABEL_130:
  id v75 = +[MPAuthoringUtilities alignToBeatsFromOptions:]( &OBJC_CLASS___MPAuthoringUtilities,  "alignToBeatsFromOptions:",  v10);
  float v79 = +[MPAuthoringUtilities createBeatsFromOptions:]( &OBJC_CLASS___MPAuthoringUtilities,  "createBeatsFromOptions:",  v10);
  if ((v78 & 1) == 0 && v75)
  {
    double v80 = v79;
    double v81 = [v177 count] ? v80 : 0;
    if (v81 == 1)
    {
      p_cancelAuthoring = &self->_cancelAuthoring;
      +[NSThread detachNewThreadSelector:toTarget:withObject:]( &OBJC_CLASS___NSThread,  "detachNewThreadSelector:toTarget:withObject:",  "createBeatsThreaded:",  self,  +[NSArray arrayWithObjects:](&OBJC_CLASS___NSArray, "arrayWithObjects:", v10, v177, 0LL));
    }
  }

  objc_msgSend(objc_msgSend(a3, "audioPlaylist"), "duration");
  if (v82 > 0.0
    && (char *)+[MPAuthoringUtilities audioScalingModeFromOptions:]( &OBJC_CLASS___MPAuthoringUtilities,  "audioScalingModeFromOptions:",  v10) == (char *)&dword_0 + 1 && !-[NSMutableDictionary objectForKey:](v10, "objectForKey:", kMPAuthoringAudioDuration))
  {
    objc_msgSend(objc_msgSend(a3, "audioPlaylist"), "duration");
    double v83 = +[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:");
    -[NSMutableDictionary setObject:forKey:](v10, "setObject:forKey:", v83, kMPAuthoringAudioDuration);
  }

  objc_msgSend(-[MPDocument montage](self->_authoredDocument, "montage"), "unlock");
LABEL_142:
  double v84 = v181;
  double v164 = v75;
  delegate = self->_delegate;
  if (delegate && (objc_opt_respondsToSelector(delegate, "authoringDocument:progress:shouldCancel:") & 1) != 0) {
    [self->_delegate authoringDocument:self->_authoredDocument progress:p_cancelAuthoring shouldCancel:0.1];
  }
  double v173 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
  if (-[__CFString isEqualToString:](v181, "isEqualToString:", @"Places"))
  {
    objc_msgSend(-[MPDocument montage](self->_authoredDocument, "montage"), "lock");
    -[MPAuthoringController authorPlacesWithImages:forLayerGroup:inDocument:withOptions:]( self,  "authorPlacesWithImages:forLayerGroup:inDocument:withOptions:",  v20,  a3,  a4,  v10);
    double v189 = -[NSMutableArray initWithArray:]( [NSMutableArray alloc],  "initWithArray:",  [a3 layers]);
    objc_msgSend(-[MPDocument montage](self->_authoredDocument, "montage"), "unlock");
    *(void *)&v180[4] = 0LL;
    goto LABEL_229;
  }

  double v189 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
  float v86 = +[MPAuthoringUtilities numberOfLayersFromOptions:]( &OBJC_CLASS___MPAuthoringUtilities,  "numberOfLayersFromOptions:",  v10);
  if (v86 >= 1)
  {
    double v87 = v86;
    *(_DWORD *)&v180[8] = 0;
    double v88 = 0LL;
    *(void *)double v180 = v167 | v166;
    double v179 = v167 | v178;
    uint64_t v89 = 0.0;
    uint64_t v90 = 0.0;
    while (1)
    {
      if (*p_cancelAuthoring) {
        goto LABEL_167;
      }
      id v91 = objc_autoreleasePoolPush();
      id v92 = +[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", v88);
      -[NSMutableDictionary setObject:forKey:](v10, "setObject:forKey:", v92, kMPAuthoringLayerIndex);
      double v93 = [p_cache + 193 isLayerEffectAuthoredFromOptions:v186];
      double v94 = v10;
      double v95 = v93;
      if ((v185 & 1) == 0 && (unint64_t)-[NSMutableArray count](v20, "count") >= 3) {
        -[MPAuthoringController setupClustersWithPaths:withOptions:]( self,  "setupClustersWithPaths:withOptions:",  v20,  v94);
      }
      float v96 = -[MPAuthoringController orderImages:withOptions:](self, "orderImages:withOptions:", v20, v94);
      if ((v179 & 1) == 0)
      {
        uint64_t v10 = v187;
        -[NSMutableArray addObject:]( v189,  "addObject:",  -[MPAuthoringController dynamicLayerWithImages:withOptions:]( self,  "dynamicLayerWithImages:withOptions:",  v96,  v187));
        goto LABEL_164;
      }

      if (v95)
      {
        p_cache = &OBJC_METACLASS___SYNMediaWallCollectionViewCellMainView2.cache;
        if (+[MPAuthoringUtilities useTitleEffectFromOptions:]( &OBJC_CLASS___MPAuthoringUtilities,  "useTitleEffectFromOptions:",  v186))
        {
          double v97 = +[NSArray arrayWithObject:]( NSArray,  "arrayWithObject:",  [v96 objectAtIndex:0]);
          id v98 = -[MPAuthoringController titleEffectsForImages:withOptions:]( self,  "titleEffectsForImages:withOptions:",  v97,  v186);
          if (v98)
          {
            double v99 = objc_msgSend( -[MPAuthoringController effectContainersWithImages:effects:andOptions:]( self,  "effectContainersWithImages:effects:andOptions:",  v97,  v98,  v186),  "mutableCopy");
            uint64_t v10 = v187;
            double v100 = -[MPAuthoringController effectAuthoredLayerWithImages:withOptions:]( self,  "effectAuthoredLayerWithImages:withOptions:",  v96,  v187);
            double v101 = v100;
          }

          else
          {
            uint64_t v10 = v187;
            double v101 = -[MPAuthoringController effectAuthoredLayerWithImages:withOptions:]( self,  "effectAuthoredLayerWithImages:withOptions:",  v96,  v187);
            double v99 = 0LL;
          }

          __int128 v111 = v189;
          __int128 v110 = v101;
        }

        else
        {
          uint64_t v10 = v187;
          __int128 v110 = -[MPAuthoringController effectAuthoredLayerWithImages:withOptions:]( self,  "effectAuthoredLayerWithImages:withOptions:",  v96,  v187);
          __int128 v111 = v189;
        }

        -[NSMutableArray addObject:](v111, "addObject:", v110);
        goto LABEL_165;
      }

      double v94 = v187;
      float v103 = -[MPAuthoringController effectsForImages:withOptions:](self, "effectsForImages:withOptions:", v96, v187);
      if (![v103 count]) {
        goto LABEL_162;
      }
      double v104 = -[MPAuthoringController createLayerWithImages:effects:andOptions:]( self,  "createLayerWithImages:effects:andOptions:",  v96,  v103,  v187);
      uint64_t v10 = v187;
      [v104 setAudioPriority:v88 + 10];
      -[NSMutableArray addObject:](v189, "addObject:", v104);
      -[MPAuthoringController checkForOffsetsForLayers:withOptions:]( self,  "checkForOffsetsForLayers:withOptions:",  v189,  v187);
      -[NSMutableDictionary removeObjectForKey:](v187, "removeObjectForKey:", kMPAuthoringMinimumDuration);
      -[NSMutableDictionary removeObjectForKey:](v187, "removeObjectForKey:", kMPAuthoringMaximumDuration);
      -[MPAuthoringController scaleDurationsInLayer:withMutableOptions:]( self,  "scaleDurationsInLayer:withMutableOptions:",  v104,  v187);
      objc_msgSend( -[NSMutableDictionary objectForKeyedSubscript:](v187, "objectForKeyedSubscript:", kMPAuthoringMinimumDuration),  "doubleValue");
      double v106 = v105;
      objc_msgSend( -[NSMutableDictionary objectForKeyedSubscript:](v187, "objectForKeyedSubscript:", kMPAuthoringMaximumDuration),  "doubleValue");
      if (v106 >= v89) {
        uint64_t v89 = v106;
      }
      if (v107 >= v90) {
        double v108 = v90;
      }
      else {
        double v108 = v107;
      }
      if (v107 <= 0.0) {
        double v108 = v90;
      }
      if (v90 == 0.0) {
        uint64_t v90 = v107;
      }
      else {
        uint64_t v90 = v108;
      }
      p_cache = (void **)(&OBJC_METACLASS___SYNMediaWallCollectionViewCellMainView2 + 16);
      if (v164)
      {
        p_cancelAuthoring = &self->_cancelAuthoring;
        if ([v177 count])
        {
          id v109 = -[MPAuthoringController beatsForAudioPlaylist:withOptions:]( self,  "beatsForAudioPlaylist:withOptions:",  [v190 audioPlaylist],  v187);
          if (v109) {
            -[MPAuthoringController beatAlignLayer:toBeats:withOptions:]( self,  "beatAlignLayer:toBeats:withOptions:",  v104,  v109,  v187);
          }
        }

        goto LABEL_166;
      }

LABEL_165:
      p_cancelAuthoring = &self->_cancelAuthoring;
LABEL_166:
      objc_autoreleasePoolPop(v91);
      a3 = v190;
LABEL_167:
      ++v88;
      double v102 = self->_delegate;
      if (v102 && (objc_opt_respondsToSelector(v102, "authoringDocument:progress:shouldCancel:") & 1) != 0) {
        [self->_delegate authoringDocument:self->_authoredDocument progress:p_cancelAuthoring shouldCancel:(double)(v88 / v87) * 0.8 + 0.1];
      }
      if (v87 == v88) {
        goto LABEL_194;
      }
    }

    *(void *)&v180[4] =  -[MPAuthoringController slidesWithImages:andOptions:]( self,  "slidesWithImages:andOptions:",  v96,  v94);
LABEL_162:
    uint64_t v10 = v94;
LABEL_164:
    p_cache = (void **)(&OBJC_METACLASS___SYNMediaWallCollectionViewCellMainView2 + 16);
    goto LABEL_165;
  }

  *(void *)&v180[4] = 0LL;
  uint64_t v90 = 0.0;
  uint64_t v89 = 0.0;
LABEL_194:
  __int128 v112 = self->_authoredDocument;
  __int128 v113 = +[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", v89);
  -[MPDocument setAuthoringOption:forKey:](v112, "setAuthoringOption:forKey:", v113, kMPAuthoringMinimumDuration);
  double v114 = self->_authoredDocument;
  double v115 = +[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", v90);
  -[MPDocument setAuthoringOption:forKey:](v114, "setAuthoringOption:forKey:", v115, kMPAuthoringMaximumDuration);
  double v116 = +[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", v89);
  -[NSMutableDictionary setObject:forKeyedSubscript:]( v10,  "setObject:forKeyedSubscript:",  v116,  kMPAuthoringMinimumDuration);
  double v117 = +[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", v90);
  -[NSMutableDictionary setObject:forKeyedSubscript:]( v10,  "setObject:forKeyedSubscript:",  v117,  kMPAuthoringMaximumDuration);
  double v84 = v181;
  double v118 = +[NSNumber numberWithInteger:]( NSNumber,  "numberWithInteger:",  objc_msgSend( +[MPStyleManager sharedManager](MPStyleManager, "sharedManager"),  "indexOfMainLayerForStyleID:",  v181));
  -[NSMutableDictionary setObject:forKey:](v10, "setObject:forKey:", v118, kMPAuthoringLayerIndex);
  if (!v174)
  {
    objc_msgSend(-[MPDocument montage](self->_authoredDocument, "montage"), "lock");
    [a3 removeAllLayers];
    [a3 addLayers:v189];
    objc_msgSend(-[MPDocument montage](self->_authoredDocument, "montage"), "unlock");
    a4 = v182;
    goto LABEL_247;
  }

  a4 = v182;
  if ((v167 | v166) == 1)
  {
    if ((v171 & 1) != 0)
    {
      objc_msgSend(-[MPDocument montage](self->_authoredDocument, "montage"), "lock");
      [a3 removeAllLayers];
      [a3 addLayers:v189];
      objc_msgSend(-[MPDocument montage](self->_authoredDocument, "montage"), "unlock");
      -[MPAuthoringController performInitialFaceDetectionInGroup:withOptions:]( self,  "performInitialFaceDetectionInGroup:withOptions:",  a3,  v186);
      goto LABEL_221;
    }

    double v127 = v189;
    double v128 = (char *)-[NSMutableArray count](v189, "count");
    if ((uint64_t)v128 >= 1)
    {
      double v129 = v128;
      for (m = 0LL; m != v129; ++m)
      {
        double v131 = -[NSMutableArray objectAtIndex:](v127, "objectAtIndex:", m);
        double v132 = objc_msgSend( +[MPStyleManager sharedManager](MPStyleManager, "sharedManager"),  "hasImagesForLayerID:forStyleID:",  objc_msgSend(v131, "layerID"),  v181);
        double v133 = [v190 layers];
        double v134 = (char *)[v190 countOfLayers];
        else {
          double v135 = v134 - 1;
        }
        double v136 = [v133 objectAtIndex:v135];
        if (v132)
        {
          double v137 = v136;
          if (objc_msgSend( objc_msgSend(v136, "layerID"),  "isEqualToString:",  objc_msgSend(v131, "layerID")))
          {
            double v138 = objc_msgSend(objc_msgSend(v131, "effectContainers"), "copy");
            [v131 removeAllEffectContainers];
            if ((uint64_t)objc_msgSend( objc_msgSend(objc_msgSend(v137, "effectContainers"), "lastObject"),  "countOfEffects") >= 1)
            {
              objc_msgSend(-[MPDocument montage](self->_authoredDocument, "montage"), "lock");
              [v137 addEffectContainers:v138];
              objc_msgSend(-[MPDocument montage](self->_authoredDocument, "montage"), "unlock");
              -[NSMutableArray addObjectsFromArray:](v173, "addObjectsFromArray:", v138);
            }

            a4 = v182;
          }
        }

        double v127 = v189;
      }
    }

    if (v127) {

    }
    a3 = v190;
    double v189 = (NSMutableArray *)[v190 layers];
    uint64_t v10 = v187;
  }

  else
  {
    objc_msgSend(-[MPDocument montage](self->_authoredDocument, "montage"), "lock");
    double v119 = -[NSMutableDictionary objectForKey:](v10, "objectForKey:", kMPAuthoringDynamicEffect);
    double v120 = objc_msgSend(objc_msgSend(v119, "slides"), "count");
    [v119 addSlides:*(void *)&v180[4]];
    double v121 = -[NSMutableDictionary objectForKey:](v10, "objectForKey:", kMPAuthoringDynamicLastIndexUsed);
    if (v121)
    {
      double v122 = objc_alloc(&OBJC_CLASS___NSIndexSet);
      double v123 = [v121 integerValue];
      double v124 = v123 - (_BYTE *)[v119 liveIndex];
      uint64_t v10 = v187;
      double v125 = v122;
      a3 = v190;
      double v126 = -[NSIndexSet initWithIndexesInRange:](v125, "initWithIndexesInRange:", 0LL, v124 & ~(v124 >> 63));
      objc_msgSend(v119, "setLiveIndex:", objc_msgSend(v121, "integerValue"));
      [v119 removeSlidesAtIndices:v126];
    }

    -[MPAuthoringController configurePanoramaInformationToEffect:inDocument:startingIndex:count:removeOldIndex:]( self,  "configurePanoramaInformationToEffect:inDocument:startingIndex:count:removeOldIndex:",  v119,  v182,  (_BYTE *)objc_msgSend(objc_msgSend(v119, "slides"), "count") - (_BYTE *)objc_msgSend(*(id *)&v180[4], "count"),  -1,  objc_msgSend(v121, "integerValue"));
    if (v189) {

    }
    double v189 = (NSMutableArray *)[a3 layers];
    objc_msgSend(-[MPDocument montage](self->_authoredDocument, "montage"), "unlock");
  }

  p_cancelAuthoring = &self->_cancelAuthoring;
  double v84 = v181;
LABEL_221:
  if (!v183) {
    goto LABEL_229;
  }
  double v139 = &v172[v165];
  if (&v163[v176 + v165] > v162)
  {
    if ((v170 & 1) != 0)
    {
      double v140 = v160;
      double v141 = v161;
      if (v160 == -1) {
        goto LABEL_226;
      }
    }

    else
    {
      double v140 = v160;
      double v141 = v161;
      if (v160 == -1 || !v161)
      {
LABEL_226:
        if (v141)
        {
          [a3 setUsedAllPaths:1];
          double v142 = self->_authoredDocument;
          double v143 = +[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", 0LL);
          double v144 = v142;
          double v84 = v181;
          -[MPDocument setAuthoringOption:forKey:]( v144,  "setAuthoringOption:forKey:",  v143,  kMPAuthoringLivePlaceholderIndex);
        }

        goto LABEL_228;
      }
    }

    double v139 = (char *)v140;
    goto LABEL_226;
  }

LABEL_228:
  [a3 setLastSlideUsed:v139];
LABEL_229:
  if (!*p_cancelAuthoring && v174)
  {
    double v146 = [p_cache + 193 subtitlesFromOptions:v10];
    if (v146)
    {
      double v147 = v146;
      if ([v146 count])
      {
        objc_msgSend(-[MPDocument montage](self->_authoredDocument, "montage"), "lock");
        double v193 = 0u;
        double v194 = 0u;
        double v191 = 0u;
        double v192 = 0u;
        double v148 = [v147 countByEnumeratingWithState:&v191 objects:v207 count:16];
        if (v148)
        {
          double v149 = v148;
          float v150 = *(void *)v192;
          do
          {
            for (n = 0LL; n != v149; n = (char *)n + 1)
            {
              if (*(void *)v192 != v150) {
                objc_enumerationMutation(v147);
              }
              -[MPAuthoringController addStyledCaptionToSlide:inDocument:withOptions:]( self,  "addStyledCaptionToSlide:inDocument:withOptions:",  +[MPUtilities slideForPath:inDocument:]( &OBJC_CLASS___MPUtilities,  "slideForPath:inDocument:",  *(void *)(*((void *)&v191 + 1) + 8LL * (void)n),  a4),  a4,  v10);
            }

            double v149 = [v147 countByEnumeratingWithState:&v191 objects:v207 count:16];
          }

          while (v149);
        }

        -[MPAuthoringController configureFiltersInDocument:withOptions:]( self,  "configureFiltersInDocument:withOptions:",  a4,  v10);
        -[MPAuthoringController configureTransitionsInDocument:withOptions:]( self,  "configureTransitionsInDocument:withOptions:",  a4,  v10);
        -[MPAuthoringController scaleDurationsInDocument:withOptions:]( self,  "scaleDurationsInDocument:withOptions:",  a4,  v10);
        objc_msgSend(-[MPDocument montage](self->_authoredDocument, "montage"), "unlock");
        p_cache = &OBJC_METACLASS___SYNMediaWallCollectionViewCellMainView2.cache;
        p_cancelAuthoring = &self->_cancelAuthoring;
        double v84 = v181;
      }
    }

    if ((unint64_t)-[NSMutableArray count](v189, "count") >= 2)
    {
      objc_msgSend(-[MPDocument montage](self->_authoredDocument, "montage"), "lock");
      -[MPAuthoringController matchDurationsForLayers:withOptions:]( self,  "matchDurationsForLayers:withOptions:",  v189,  v10);
      -[MPAuthoringController fillDurationsForLayers:withOptions:]( self,  "fillDurationsForLayers:withOptions:",  v189,  v10);
      -[MPAuthoringController checkForOffsetsForLayers:withOptions:]( self,  "checkForOffsetsForLayers:withOptions:",  v189,  v10);
      objc_msgSend(-[MPDocument montage](self->_authoredDocument, "montage"), "unlock");
    }

    if (!v171)
    {
      double v152 = -[NSDictionary initWithObjectsAndKeys:]( objc_alloc(&OBJC_CLASS___NSDictionary),  "initWithObjectsAndKeys:",  v173,  @"effectContainers",  a4,  @"document",  v10,  @"options",  0LL);
      double v84 = v181;
      p_cancelAuthoring = &self->_cancelAuthoring;
      +[NSThread detachNewThreadSelector:toTarget:withObject:]( &OBJC_CLASS___NSThread,  "detachNewThreadSelector:toTarget:withObject:",  "_applyCropToSlidesInEffectContainersWithArguments:",  +[MPCropController sharedController](&OBJC_CLASS___MPCropController, "sharedController"),  v152);

      goto LABEL_250;
    }

    objc_msgSend(-[MPDocument montage](self->_authoredDocument, "montage"), "lock");
    -[MPAuthoringController reconfigureColorSchemeForLayerGroup:inDocument:withOptions:]( self,  "reconfigureColorSchemeForLayerGroup:inDocument:withOptions:",  a3,  a4,  v10);
    objc_msgSend(-[MPDocument montage](self->_authoredDocument, "montage"), "unlock");
    objc_msgSend( +[MPCropController sharedController](MPCropController, "sharedController"),  "cropSlidesForLayerGroup:inDocument:withOptions:",  a3,  a4,  v10);

    goto LABEL_248;
  }

LABEL_247:
  if (v171)
  {
LABEL_248:
    -[MPAuthoringController configureIntroInDocument:withOptions:]( self,  "configureIntroInDocument:withOptions:",  self->_authoredDocument,  v10);
    -[MPAuthoringController configureOutroInDocument:withOptions:]( self,  "configureOutroInDocument:withOptions:",  self->_authoredDocument,  v10);
  }

LABEL_250:
  double v153 = self->_delegate;
  if (v153 && (objc_opt_respondsToSelector(v153, "authoringDocument:progress:shouldCancel:") & 1) != 0) {
    [self->_delegate authoringDocument:self->_authoredDocument progress:p_cancelAuthoring shouldCancel:1.0];
  }
  if (*p_cancelAuthoring && v168)
  {
    double v154 = [a3 navigatorKey];
    if (v154) {
      [a4 setLayer:v168 forKey:v154];
    }
    else {
      [a4 setDocumentLayerGroup:v168];
    }
  }

  if (*(void *)&v180[4]) {

  }
  if (v168) {
  self->_isAuthoring = 0;
  }
  if (!self->_cancelAuthoring && (!v183 || self->_logLevel >= 2))
  {
    if ([p_cache + 193 collectVersionInformationFromOptions:v10])
    {
      double v155 = self->_authoredDocument;
      double v156 = -[MPAuthoringController _collectVersionInformationFromStyle:]( self,  "_collectVersionInformationFromStyle:",  v84);
      -[MPDocument setDocumentAttribute:forKey:]( v155,  "setDocumentAttribute:forKey:",  v156,  kMPDocumentAuthoringVersions[0]);
    }

    -[MPAuthoringController finishLogging](self, "finishLogging");
  }

  [a4 setTemporarilyCacheAbsolutePaths:0];
  double v157 = +[NSNotificationCenter defaultCenter](&OBJC_CLASS___NSNotificationCenter, "defaultCenter");
  -[NSNotificationCenter postNotificationName:object:userInfo:]( v157,  "postNotificationName:object:userInfo:",  kMPAuthoringDidFinishApplyingStyleNotification[0],  self->_authoredDocument,  0LL);
  -[MPAuthoringController cleanup:](self, "cleanup:", v175);
  -[NSLock unlock](self->_authorLock, "unlock");
  objc_autoreleasePoolPop(context);
  if (self->_cancelAuthoring) {
    return -1LL;
  }
  else {
    return self->_seed;
  }
}

uint64_t sub_AADE8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double v6 = v5;
  objc_msgSend( objc_msgSend(*(id *)(*(void *)(a1 + 32) + 16), "creationDateForPath:", a3),  "timeIntervalSinceReferenceDate");
  if (v6 >= v7) {
    uint64_t v8 = 0LL;
  }
  else {
    uint64_t v8 = -1LL;
  }
  if (v6 > v7) {
    return 1LL;
  }
  else {
    return v8;
  }
}

void sub_AB0B0(_Unwind_Exception *a1)
{
}

void sub_AB0C8(uint64_t a1, uint64_t a2)
{
  id v4 = [*(id *)(*(void *)(a1 + 32) + 16) regionsOfInterestForPath:a2 detect:0];
  CGFloat x = CGRectZero.origin.x;
  CGFloat y = CGRectZero.origin.y;
  CGFloat width = CGRectZero.size.width;
  CGFloat height = CGRectZero.size.height;
  id v9 = [v4 count];
  uint64_t v10 = (uint64_t)v9;
  if (v4) {
    BOOL v11 = (uint64_t)v9 < 2;
  }
  else {
    BOOL v11 = 1;
  }
  if (v11)
  {
    int v12 = 1;
    CGFloat rect1_8 = CGRectZero.origin.x;
    CGFloat rect1_24 = y;
    double v13 = width;
    double v14 = height;
    goto LABEL_29;
  }

  __int128 v68 = 0u;
  __int128 v69 = 0u;
  __int128 v66 = 0u;
  __int128 v67 = 0u;
  id v15 = [v4 countByEnumeratingWithState:&v66 objects:v70 count:16];
  if (!v15)
  {
    BOOL v17 = 1;
    double v19 = y;
    double v13 = width;
    double v14 = height;
    goto LABEL_28;
  }

  id v16 = v15;
  BOOL v17 = 1;
  uint64_t v18 = *(void *)v67;
  double v19 = y;
  double v13 = width;
  double v14 = height;
  do
  {
    float v20 = 0LL;
    double v21 = v14;
    CGFloat v22 = x;
    do
    {
      CGFloat rect1_24a = v19;
      CGFloat v23 = v22;
      CGFloat v24 = v21;
      if (*(void *)v67 != v18) {
        objc_enumerationMutation(v4);
      }
      CGRect v71 = CGRectFromString((NSString *)[*(id *)(*((void *)&v66 + 1) + 8 * (void)v20) objectForKey:kMPMetaDataRegionOfInterestBounds]);
      CGFloat rect1_8a = v71.origin.x;
      CGFloat rect1_16 = v71.origin.y;
      double v25 = v71.size.width;
      double v26 = v71.size.height;
      v71.origin.CGFloat x = CGRectZero.origin.x;
      v71.origin.CGFloat y = y;
      v71.size.CGFloat width = width;
      v71.size.CGFloat height = height;
      v76.origin.CGFloat x = v23;
      v76.origin.CGFloat y = rect1_24a;
      v76.size.CGFloat width = v13;
      v76.size.CGFloat height = v24;
      if (!CGRectEqualToRect(v71, v76) && v17)
      {
        v72.origin.CGFloat x = rect1_8a;
        v72.origin.CGFloat y = rect1_16;
        v72.size.CGFloat width = v25;
        v72.size.CGFloat height = v26;
        CGRect v73 = CGRectInset(v72, -0.05, -0.05);
        v77.origin.CGFloat x = v23;
        v77.origin.CGFloat y = rect1_24a;
        v77.size.CGFloat width = v13;
        v77.size.CGFloat height = v24;
        BOOL v17 = CGRectIntersectsRect(v73, v77);
      }

      if (v25 == 0.0)
      {
        double v21 = v24;
        CGFloat v22 = v23;
LABEL_20:
        double v19 = rect1_24a;
        goto LABEL_21;
      }

      double v21 = v24;
      CGFloat v22 = v23;
      if (v26 == 0.0) {
        goto LABEL_20;
      }
      CGFloat v27 = rect1_24a;
      double v28 = v13;
      v78.origin.CGFloat x = CGRectZero.origin.x;
      v78.origin.CGFloat y = y;
      v78.size.CGFloat width = width;
      v78.size.CGFloat height = height;
      if (CGRectEqualToRect(*(CGRect *)&v22, v78))
      {
        CGFloat v22 = rect1_8a;
        double v19 = rect1_16;
        double v21 = v26;
        double v13 = v25;
      }

      else
      {
        v74.origin.CGFloat x = rect1_8a;
        v74.origin.CGFloat y = rect1_16;
        v74.size.CGFloat width = v25;
        v74.size.CGFloat height = v26;
        v79.origin.CGFloat x = CGRectZero.origin.x;
        v79.origin.CGFloat y = y;
        v79.size.CGFloat width = width;
        v79.size.CGFloat height = height;
        BOOL v29 = CGRectEqualToRect(v74, v79);
        double v21 = v24;
        CGFloat v22 = v23;
        double v19 = rect1_24a;
        if (!v29)
        {
          CGFloat v30 = rect1_24a;
          double v31 = v13;
          v80.origin.CGFloat x = rect1_8a;
          v80.origin.CGFloat y = rect1_16;
          v80.size.CGFloat width = v25;
          v80.size.CGFloat height = v26;
          *(CGRect *)&CGFloat v22 = CGRectUnion(*(CGRect *)&v22, v80);
          double v19 = v32;
          double v13 = v33;
        }
      }

LABEL_194:
          if ((v168 & 1) != 0)
          {
            double v124 = v169;
          }

          else
          {
            double v124 = v169;
            if (objc_msgSend( v101,  "containsIndex:",  objc_msgSend( -[MPWeighter allItems](v119->_weighter, "allItems"),  "indexOfObject:",  v99))
              && -[NSMutableIndexSet count](v100, "count"))
            {
              double v99 = 0LL;
            }
          }

          if (((unint64_t)-[NSMutableIndexSet count](v100, "count") | (unint64_t)v99) == 0 && !v173)
          {
            double v125 = v86;
            -[NSMutableIndexSet addIndex:](v100, "addIndex:", 1LL);
            double v126 = [v101 firstIndex];
            if (v126 != (id)0x7FFFFFFFFFFFFFFFLL)
            {
              for (isize_t i = v126; ii != (id)0x7FFFFFFFFFFFFFFFLL; isize_t i = [v101 indexGreaterThanIndex:ii])
              {
                if (*((void *)objc_msgSend( -[MPWeighter allConstraints](v119->_weighter, "allConstraints"),  "objectAtIndex:",  ii)
                     + 1) <= v124)
                  -[NSMutableIndexSet addIndex:](v100, "addIndex:");
              }
            }

            double v173 = -[NSMutableIndexSet count](v100, "count") != 0LL;
            float v86 = v125;
          }

          if (-[NSMutableIndexSet count](v100, "count"))
          {
            id v109 = v86;
            if (!v99) {
              continue;
            }
          }

          goto LABEL_210;
        }

        if (-[NSMutableIndexSet count](v100, "count"))
        {
          __int128 v111 = objc_alloc_init(&OBJC_CLASS___NSMutableIndexSet);
          double v188 = 0u;
          double v189 = 0u;
          double v190 = 0u;
          double v191 = 0u;
          __int128 v112 = -[MPWeighter allConstraints](v175->_weighter, "allConstraints");
          __int128 v113 = [v112 countByEnumeratingWithState:&v188 objects:v215 count:16];
          if (v113)
          {
            double v114 = v113;
            double v115 = 0LL;
            double v116 = *(void *)v189;
            do
            {
              for (jj = 0LL; jj != v114; jj = (char *)jj + 1)
              {
                if (*(void *)v189 != v116) {
                  objc_enumerationMutation(v112);
                }
                if (-[NSMutableIndexSet containsIndex:]( v100,  "containsIndex:",  *(void *)(*(void *)(*((void *)&v188 + 1) + 8LL * (void)jj) + 8LL))) {
                  -[NSMutableIndexSet addIndex:](v111, "addIndex:", (char *)jj + v115);
                }
              }

              double v114 = [v112 countByEnumeratingWithState:&v188 objects:v215 count:16];
              v115 += (uint64_t)jj;
            }

            while (v114);
          }

          double v118 = -[MPWeighter getRandomIndexInSubset:](v175->_weighter, "getRandomIndexInSubset:", v111);

          float v86 = *((void *)objc_msgSend( -[MPWeighter allConstraints](v175->_weighter, "allConstraints"),  "objectAtIndex:",  v118)
                + 1);
          -[NSMutableIndexSet removeIndex:](v100, "removeIndex:", v86);
          id v91 = v167;
          goto LABEL_183;
        }

        double v99 = 0LL;
LABEL_210:
        double v128 = v192 < 1 || v86 < 1;
        CGRect v76 = v175;
        if (!v128)
        {
          double v129 = 0LL;
          double v130 = v86;
          double v131 = v177;
          double v132 = &v177[v130];
          do
          {
            double v133 = -[NSMutableDictionary objectForKey:]( v175->_cachedROIInformation,  "objectForKey:",  [v183 objectAtIndex:v131]);
            if (objc_msgSend(objc_msgSend(v133, "objectForKey:", @"canSwitch"), "BOOLValue"))
            {
              if ((v192 & v129) != 0) {
                objc_msgSend( v133,  "setObject:forKey:",  +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", 0),  @"wasFlipped");
              }
              ++v129;
            }

            ++v131;
          }

          while ((uint64_t)v131 < (uint64_t)v132);
        }

        if (v99) {
          double v134 = 0;
        }
        else {
          double v134 = v166;
        }
        if (v134 == 1)
        {
          if (-[MPAuthoringController imagesHaveMovie:start:count:]( v175,  "imagesHaveMovie:start:count:",  v183,  v177,  v164))
          {
            double v135 = -[NSDictionary initWithObjectsAndKeys:]( objc_alloc(&OBJC_CLASS___NSDictionary),  "initWithObjectsAndKeys:",  +[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", 1LL),  @"numOfImages",  +[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", 0LL),  @"ignoreMovies",  0LL);
            double v136 = -[MPWeighter indicesMeetingConstraints:](v175->_weighter, "indicesMeetingConstraints:", v135);

            if ([v136 count])
            {
              double v137 = [v136 firstIndex];
              if (v137 != (id)0x7FFFFFFFFFFFFFFFLL)
              {
                double v138 = v137;
                do
                {
                  if (-[MPAuthoringController imagesHaveMovie:start:count:]( v175,  "imagesHaveMovie:start:count:",  v183,  v177,  *((void *)objc_msgSend( -[MPWeighter allConstraints](v175->_weighter, "allConstraints"),  "objectAtIndex:",  v138)
                         + 1)))
                  {
                    double v99 = (const __CFString *)objc_msgSend( -[MPWeighter allItems](v175->_weighter, "allItems"),  "objectAtIndex:",  v138);
                  }

                  else
                  {
                    double v99 = 0LL;
                  }

                  double v139 = [v136 indexGreaterThanIndex:v138];
                  if (v139 == (id)0x7FFFFFFFFFFFFFFFLL) {
                    break;
                  }
                  double v138 = v139;
                }

                while (!v99);
                goto LABEL_233;
              }
            }
          }

LABEL_234:
          double v140 = -[MPWeighter allItems](v175->_weighter, "allItems");
          double v99 = (const __CFString *)[v140 objectAtIndex:v197];
        }

        else
        {
LABEL_233:
          if (!v99) {
            goto LABEL_234;
          }
        }

LABEL_236:
        weighter = v76->_weighter;
        if ((v168 & 1) != 0)
        {
          -[MPWeighter clearIgnoreIndices](weighter, "clearIgnoreIndices");
        }

        else
        {
          double v142 = objc_msgSend(-[MPWeighter allItems](weighter, "allItems"), "indexOfObject:", v99);
          if (v142 != (id)0x7FFFFFFFFFFFFFFFLL) {
            -[MPWeighter ignoreIndex:](v76->_weighter, "ignoreIndex:", v142);
          }
          if ((v161 & 1) == 0)
          {
            double v143 = +[MPUtilities presetIDOfCombinedID:](&OBJC_CLASS___MPUtilities, "presetIDOfCombinedID:", v99);
            double v184 = 0u;
            double v185 = 0u;
            double v186 = 0u;
            double v187 = 0u;
            double v144 = -[MPWeighter allItems](v76->_weighter, "allItems");
            double v145 = [v144 countByEnumeratingWithState:&v184 objects:v214 count:16];
            if (v145)
            {
              double v146 = v145;
              double v147 = 0LL;
              double v148 = *(void *)v185;
              do
              {
                for (kk = 0LL; kk != v146; kk = (char *)kk + 1)
                {
                  if (*(void *)v185 != v148) {
                    objc_enumerationMutation(v144);
                  }
                  if ([*(id *)(*((void *)&v184 + 1) + 8 * (void)kk) hasSuffix:v143]) {
                    -[MPWeighter addIndexToIgnore:](v76->_weighter, "addIndexToIgnore:", (char *)kk + v147);
                  }
                }

                double v146 = [v144 countByEnumeratingWithState:&v184 objects:v214 count:16];
                v147 += (uint64_t)kk;
              }

              while (v146);
            }
          }
        }

        if (v76->_logLevel >= 2)
        {
          float v150 = objc_msgSend(-[MPWeighter allItems](v76->_weighter, "allItems"), "indexOfObject:", v99);
          if (v150 != (id)0x7FFFFFFFFFFFFFFFLL) {
            -[MPWeighter increaseUsageCountOfObjectAtIndex:](v76->_weighter, "increaseUsageCountOfObjectAtIndex:", v150);
          }
        }

        double v151 = [v174 numOfImagesForEffectPresetID:v99];
        id v16 = v170;
        [v170 addObject:v99];
        double v152 = -[MPWeighter constraintsForItem:](v76->_weighter, "constraintsForItem:", v99);
        CGRect v79 = v165;
        if (v152) {
          double v182 = v152[2];
        }
        else {
          double v182 = 0LL;
        }
        if (v162)
        {
          CGRect v79 = v165;
          double v179 = objc_msgSend( objc_msgSend( v174,  "attributesForEffectID:andPresetID:",  +[MPUtilities idOfCombinedID:](MPUtilities, "idOfCombinedID:", v99),  +[MPUtilities idOfCombinedID:](MPUtilities, "idOfCombinedID:", v99)),  "objectForKey:",  @"endLayoutTags");
        }

        double v85 = &v177[(void)v151];
      }

      if (v182)
      {
        double v93 = -[NSMutableDictionary initWithObjectsAndKeys:]( objc_alloc(&OBJC_CLASS___NSMutableDictionary),  "initWithObjectsAndKeys:",  +[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", v87),  @"numOfImages",  +[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", 0LL),  @"hasPanorama",  0LL);
        -[NSMutableDictionary addEntriesFromDictionary:](v93, "addEntriesFromDictionary:", v182);
        double v197 = -[MPWeighter getRandomIndexMeetingContraints:](v76->_weighter, "getRandomIndexMeetingContraints:", v93);

        if (v91) {
          goto LABEL_141;
        }
      }

      else
      {
        double v197 = -[MPWeighter getRandomIndexWithNoPanoramasForImageCount:]( v76->_weighter,  "getRandomIndexWithNoPanoramasForImageCount:",  v87);
        if (v91)
        {
LABEL_141:
          double v94 = [v158 lastIndex];
          if (v157)
          {
            double v95 = vcvtpd_s64_f64((double)v169 * 0.5);
            else {
              float v86 = v95;
            }
          }

          else
          {
            float v86 = v87;
            if (v87 > (unint64_t)v94)
            {
              else {
                float v86 = vcvtpd_s64_f64((double)v87 * 0.5);
              }
            }
          }

LABEL_152:
          if (v86 == 0x7FFFFFFFFFFFFFFFLL)
          {
LABEL_153:
            -[MPWeighter clearIgnoreIndices](v76->_weighter, "clearIgnoreIndices");
            double v97 = -[NSMutableDictionary initWithObjectsAndKeys:]( objc_alloc(&OBJC_CLASS___NSMutableDictionary),  "initWithObjectsAndKeys:",  +[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", v169),  @"numOfImages",  0LL);
            id v98 = -[MPWeighter getRandomIndexMeetingContraints:]( v76->_weighter,  "getRandomIndexMeetingContraints:",  v97);

            double v99 = @"JustASlide/Default";
            if (v98 != (id)0x7FFFFFFFFFFFFFFFLL) {
              double v99 = (const __CFString *)objc_msgSend( -[MPWeighter allItems](v76->_weighter, "allItems"),  "objectAtIndex:",  v98);
            }
            goto LABEL_236;
          }

          goto LABEL_155;
        }
      }

      if (v197 == 0x7FFFFFFFFFFFFFFFLL) {
        goto LABEL_153;
      }
      float v96 = -[MPWeighter allConstraints](v76->_weighter, "allConstraints");
      float v86 = *((void *)[v96 objectAtIndex:v197] + 1);
      goto LABEL_152;
    }
  }

LABEL_259:
  double v153 = +[MPAuthoringUtilities lastPresetFromOptions:]( &OBJC_CLASS___MPAuthoringUtilities,  "lastPresetFromOptions:",  v160);
  if (v153)
  {
    double v154 = v153;
    if ((objc_msgSend(objc_msgSend(v160, "objectForKey:", @"hasMoreImages"), "BOOLValue") & 1) == 0)
    {
      double v155 = +[MPAuthoringUtilities idFromPresetID:]( MPAuthoringUtilities,  "idFromPresetID:",  [v16 lastObject]);
      objc_msgSend(v16, "removeObjectAtIndex:", (char *)objc_msgSend(v16, "count") - 1);
      [v16 addObject:+[NSString stringWithFormat:](NSString, "stringWithFormat:", @"%@/%@", v155, v154)];
    }
  }

  return v16;
}

LABEL_107:
                if ((uint64_t)[v80 countOfSlides] < 1)
                {
                  CGRect v77 = 0;
                }

                else
                {
                  CGRect v77 = v86 & ([v80 hasMovies] ^ 1);
LABEL_111:
                  if ((v142 & v77) == 1)
                  {
                    if ((objc_msgSend( +[MPEffectManager sharedManager]( MPEffectManager,  "sharedManager"),  "skipPanoramaScaleForEffectID:",  objc_msgSend(v80, "effectID")) & 1) == 0) {
                      v135 |= [v80 hasPanoramasInDocument:self->_authoredDocument];
                    }
                    CGRect v77 = 1;
                  }
                }
              }

              CGRect v76 = [v139 countByEnumeratingWithState:&v163 objects:v192 count:16];
            }

            while (v76);
            if ((v77 & v135) == 1)
            {
              [v127 duration];
              double v70 = v70 + v87;
LABEL_122:
              double v65 = v124;
              CGRect v71 = v125;
              __int128 v69 = v120;
              __int128 v68 = v122;
              CGRect v72 = obja;
              goto LABEL_123;
            }

            if ((v77 & 1) != 0) {
              goto LABEL_122;
            }
          }

          objc_msgSend(v127, "duration", v120);
          id v59 = v59 + v88;
          goto LABEL_122;
        }

LABEL_123:
        CGRect v72 = (char *)v72 + 1;
      }

      while (v72 != v68);
      __int128 v68 = [v133 countByEnumeratingWithState:&v167 objects:v193 count:16];
      if (!v68)
      {
LABEL_127:
        uint64_t v89 = v27 + v17 - v59 - v70;
        if (v89 > 0.0)
        {
          uint64_t v90 = v20 - v59;
          __int128 v67 = (v27 + v20 - v59 - v70) / v89;
          if (v67 > 1.0)
          {
            if (v70 <= 0.0)
            {
LABEL_136:
              double v136 = 0;
              goto LABEL_137;
            }

LABEL_135:
            double v136 = 1;
            __int128 v67 = (v27 + v90) / (v27 + v17 - v59);
LABEL_137:
            double v157 = 0u;
            double v158 = 0u;
            double v155 = 0u;
            double v156 = 0u;
            double v123 = objc_msgSend(v133, "countByEnumeratingWithState:objects:count:", &v155, v190, 16, v120);
            if (!v123) {
              return;
            }
            double v121 = *(void *)v156;
            while (1)
            {
              for (k = 0LL; k != v123; k = (char *)k + 1)
              {
                if (*(void *)v156 != v121) {
                  objc_enumerationMutation(v133);
                }
                id v92 = *(void **)(*((void *)&v155 + 1) + 8LL * (void)k);
                double v151 = 0u;
                double v152 = 0u;
                double v153 = 0u;
                double v154 = 0u;
                double v140 = objc_msgSend(v92, "effects", v121);
                double v93 = [v140 countByEnumeratingWithState:&v151 objects:v189 count:16];
                if (v93)
                {
                  double v94 = v93;
                  double v128 = v92;
                  objb = k;
                  LOBYTE(v95) = 0;
                  float v96 = *(void *)v152;
                  do
                  {
                    for (m = 0LL; m != v94; m = (char *)m + 1)
                    {
                      if (*(void *)v152 != v96) {
                        objc_enumerationMutation(v140);
                      }
                      id v98 = *(void **)(*((void *)&v151 + 1) + 8LL * (void)m);
                      double v147 = 0u;
                      double v148 = 0u;
                      double v149 = 0u;
                      float v150 = 0u;
                      double v99 = [v98 slides];
                      double v100 = [v99 countByEnumeratingWithState:&v147 objects:v188 count:16];
                      if (!v100)
                      {
LABEL_155:
                        double v104 = 1;
                        if ((v95 & 1) != 0) {
                          goto LABEL_159;
                        }
                        goto LABEL_156;
                      }

                      double v101 = v100;
                      double v102 = *(void *)v148;
LABEL_149:
                      float v103 = 0LL;
                      while (1)
                      {
                        if (*(void *)v148 != v102) {
                          objc_enumerationMutation(v99);
                        }
                        if (objc_msgSend( v18,  "objectForKeyedSubscript:",  objc_msgSend(*(id *)(*((void *)&v147 + 1) + 8 * v103), "path")))
                        {
                          break;
                        }

                        if (v101 == (id)++v103)
                        {
                          double v101 = [v99 countByEnumeratingWithState:&v147 objects:v188 count:16];
                          if (!v101) {
                            goto LABEL_155;
                          }
                          goto LABEL_149;
                        }
                      }

                      double v104 = 0;
                      if ((v95 & 1) != 0)
                      {
LABEL_159:
                        double v95 = 1;
                        goto LABEL_160;
                      }

LABEL_156:
                      if ((uint64_t)[v98 countOfSlides] < 1)
                      {
                        double v95 = 0;
                      }

                      else
                      {
                        double v95 = v104 & ([v98 hasMovies] ^ 1);
LABEL_160:
                        if ((v142 & v95) == 1)
                        {
                          if (objc_msgSend( +[MPEffectManager sharedManager]( MPEffectManager,  "sharedManager"),  "skipPanoramaScaleForEffectID:",  objc_msgSend(v98, "effectID"))) {
                            double v95 = 1;
                          }
                          else {
                            double v95 = v136 | [v98 hasPanoramasInDocument:self->_authoredDocument] ^ 1;
                          }
                        }
                      }
                    }

                    double v94 = [v140 countByEnumeratingWithState:&v151 objects:v189 count:16];
                  }

                  while (v94);
                  k = objb;
                  if (v128 != v125 && v128 != v124 && ((v95 ^ 1) & 1) == 0)
                  {
                    double v145 = 0u;
                    double v146 = 0u;
                    double v143 = 0u;
                    double v144 = 0u;
                    float v105 = [v128 effects];
                    double v106 = [v105 countByEnumeratingWithState:&v143 objects:v187 count:16];
                    double v107 = v7;
                    if (v106)
                    {
                      double v108 = v106;
                      id v109 = *(void *)v144;
                      double v107 = v7;
                      do
                      {
                        for (n = 0LL; n != v108; n = (char *)n + 1)
                        {
                          if (*(void *)v144 != v109) {
                            objc_enumerationMutation(v105);
                          }
                          objc_msgSend( v141,  "minimumEffectDurationForEffectID:",  objc_msgSend(*(id *)(*((void *)&v143 + 1) + 8 * (void)n), "effectID"));
                          if (v111 > v107) {
                            double v107 = v111;
                          }
                        }

                        double v108 = [v105 countByEnumeratingWithState:&v143 objects:v187 count:16];
                      }

                      while (v108);
                    }

                    [v128 duration];
                    __int128 v113 = v112;
                    [v128 introTransitionDuration];
                    double v115 = v114;
                    if (objc_msgSend(objc_msgSend(v133, "lastObject"), "transition") && !objc_msgSend(v128, "index"))
                    {
                      [v128 outroTransitionDuration];
                      double v115 = v116;
                    }

                    double v117 = v67 * v113;
                    [v128 outroTransitionDuration];
                    double v119 = v115 + v118;
                    if (v117 >= v119) {
                      double v119 = v117;
                    }
                    if (v119 < v107) {
                      double v119 = v107;
                    }
                    [v128 setDuration:v119];
                  }
                }
              }

              double v123 = [v133 countByEnumeratingWithState:&v155 objects:v190 count:16];
              if (!v123) {
                return;
              }
            }
          }

          if (v67 != 0.0) {
            goto LABEL_136;
          }
        }

        double v136 = 0;
        if (v20 <= v17 || v70 <= 0.0) {
          goto LABEL_137;
        }
        uint64_t v90 = v20 - v59;
        goto LABEL_135;
      }
    }
  }

  double v181 = 0u;
  double v182 = 0u;
  double v179 = 0u;
  double v180 = 0u;
  obj = [v126 effectContainers];
  double v138 = [obj countByEnumeratingWithState:&v179 objects:v196 count:16];
  if (!v138) {
    return;
  }
  double v134 = *(void *)v180;
  CGFloat v30 = v20 / v27;
  do
  {
    for (isize_t i = 0LL; ii != v138; isize_t i = (char *)ii + 1)
    {
      if (*(void *)v180 != v134) {
        objc_enumerationMutation(obj);
      }
      double v32 = *(void **)(*((void *)&v179 + 1) + 8LL * (void)ii);
      double v175 = 0u;
      double v176 = 0u;
      double v177 = 0u;
      double v178 = 0u;
      double v33 = [v32 effects];
      id v34 = [v33 countByEnumeratingWithState:&v175 objects:v195 count:16];
      if (!v34)
      {
        double v36 = 0;
        double v38 = v7;
        goto LABEL_46;
      }

      double v35 = v34;
      LOBYTE(v36) = 0;
      double v37 = *(void *)v176;
      double v38 = v7;
      do
      {
        for (jj = 0LL; jj != v35; jj = (char *)jj + 1)
        {
          if (*(void *)v176 != v37) {
            objc_enumerationMutation(v33);
          }
          double v40 = *(void **)(*((void *)&v175 + 1) + 8LL * (void)jj);
          objc_msgSend(v141, "minimumEffectDurationForEffectID:", objc_msgSend(v40, "effectID"));
          if (v41 > v38) {
            double v38 = v41;
          }
          if ((v36 & 1) != 0)
          {
            double v36 = 1;
          }

          else
          {
            if ((uint64_t)[v40 countOfSlides] < 1)
            {
              double v36 = 0;
              continue;
            }

            double v36 = [v40 hasMovies] ^ 1;
          }

          if ((v142 & v36) == 1)
          {
            if (objc_msgSend( +[MPEffectManager sharedManager](MPEffectManager, "sharedManager"),  "skipPanoramaScaleForEffectID:",  objc_msgSend(v40, "effectID"))) {
              double v36 = 1;
            }
            else {
              double v36 = [v40 hasPanoramasInDocument:self->_authoredDocument] ^ 1;
            }
          }
        }

        double v35 = [v33 countByEnumeratingWithState:&v175 objects:v195 count:16];
      }

      while (v35);
LABEL_46:
      [v32 outroTransitionDuration];
      BOOL v43 = v42;
      if ([v32 transition])
      {
        int v44 = v30 * v43;
        if (v30 * v43 < v9) {
          int v44 = v9;
        }
        if (v44 <= v11) {
          BOOL v45 = v44;
        }
        else {
          BOOL v45 = v11;
        }
        objc_msgSend(objc_msgSend(v32, "transition"), "setDuration:", v45);
        if (v132)
        {
          double v173 = 0u;
          double v174 = 0u;
          double v171 = 0u;
          double v172 = 0u;
          BOOL v46 = [v32 effects];
          uint64_t v47 = [v46 countByEnumeratingWithState:&v171 objects:v194 count:16];
          if (v47)
          {
            BOOL v48 = v47;
            id v49 = *(void *)v172;
            do
            {
              for (kk = 0LL; kk != v48; kk = (char *)kk + 1)
              {
                if (*(void *)v172 != v49) {
                  objc_enumerationMutation(v46);
                }
                double v51 = *(void **)(*((void *)&v171 + 1) + 8LL * (void)kk);
                [v51 setPhaseInDuration:v9];
                [v51 setPhaseOutDuration:v9];
              }

              BOOL v48 = [v46 countByEnumeratingWithState:&v171 objects:v194 count:16];
            }

            while (v48);
          }
        }

        if (v36)
        {
          [v32 introTransitionDuration];
          double v53 = v52;
          if (objc_msgSend(objc_msgSend(objc_msgSend(v126, "effectContainers"), "lastObject"), "transition")
            && ![v32 index])
          {
            [v32 outroTransitionDuration];
            double v53 = v54;
          }

          double v55 = v45 + v53;
LABEL_70:
          if (v55 < v38) {
            double v55 = v38;
          }
          [v32 setDuration:v55];
        }
      }

      else
      {
        [v32 introTransitionDuration];
        if (v56 == 0.0) {
          double v57 = 0;
        }
        else {
          double v57 = v36;
        }
        if (v57 == 1)
        {
          [v32 introTransitionDuration];
          goto LABEL_70;
        }
      }
    }

    double v138 = [obj countByEnumeratingWithState:&v179 objects:v196 count:16];
  }

  while (v138);
}

        double v167 = v619;
        v577 = v110;
        if (!v110) {
          goto LABEL_299;
        }
        if (v599)
        {
          double v168 = v536;
          if (v594) {
            double v168 = 1;
          }
          double v169 = v527 + 0.5;
          if (v168) {
            double v169 = v121;
          }
          if (v537 < v121) {
            double v169 = v537 + -0.5;
          }
          v625 = v169;
          double v170 = 0.00001;
          double v171 = v544;
          if (v544 < 0.00001)
          {
            if (v594 == v86) {
              double v172 = v121;
            }
            else {
              double v172 = v59;
            }
            if (!v559) {
              double v172 = v121;
            }
            double v173 = v523 * v172;
            *(float *)&double v173 = v173;
            LODWORD(v11_Block_object_dispose((const void *)(v1 - 48), 8) = LODWORD(v173);
            LODWORD(v119) = LODWORD(v173);
            objc_msgSend( a3,  "composeForeColorRed:green:blue:alpha:saveTo:",  v650,  v173,  COERCE_DOUBLE(__PAIR64__(HIDWORD(v523), LODWORD(v173))),  v118,  v119);
          }

          double v174 = objc_msgSend(*(id *)((char *)&self->mText + 1), "objectForKey:", v116, v170, v171);
          if ([v174 count]) {
            double v177 = v535;
          }
          else {
            double v177 = 1;
          }
          v617 = v92;
          if ((v177 & 1) == 0)
          {
            double v178 = [v174 objectForKey:@"month"];
            objc_msgSend( v178,  "relativeSizeInContextPixelSize:",  self->super.mPixelSize.width,  self->super.mPixelSize.height);
            double v181 = v179;
            double v182 = v180;
            if (v179 > v526)
            {
              double v182 = v180 / (v179 / v526);
              double v181 = v526;
            }

            v609 = v182;
            double v183 = v539;
            if (BYTE3(self->mSlideInformation)) {
              double v183 = v553;
            }
            double v184 = x + v181 * -5.0 * 0.5 + -0.100000001;
            double v185 = v121 + v182 * -5.0 * 0.5 + v520 - v183;
            double v186 = v184 + v181 * -5.0 * 0.5;
            double v187 = v184 * 0.200000003;
            double v188 = [v174 objectForKey:@"weekday"];
            objc_msgSend( v188,  "relativeSizeInContextPixelSize:",  self->super.mPixelSize.width,  self->super.mPixelSize.height);
            double v191 = -5.0;
            double v192 = v190;
            double v193 = (v186 + v189 * -5.0 * 0.5 + -0.075000003) * 0.200000003;
            double v194 = v625;
            if (v625 >= 1.0)
            {
              double v211 = v189;
              +[MRCroppingSprite renderImage:inContext:atPosition:andSize:]( &OBJC_CLASS___MRCroppingSprite,  "renderImage:inContext:atPosition:andSize:",  v178,  a3,  v187,  v185 * 0.200000003,  v181);
              +[MRCroppingSprite renderImage:inContext:atPosition:andSize:]( &OBJC_CLASS___MRCroppingSprite,  "renderImage:inContext:atPosition:andSize:",  v188,  a3,  v193,  (v185 - v609 * 0.5 - v519) * 0.200000003,  v211,  v192);
              double v62 = 0.5;
            }

            else
            {
              v571 = v181;
              v586 = v187;
              v569 = v185 * 0.200000003;
              v578 = v190;
              v581 = v193;
              double v195 = 1.0 - (v625 * -5.0 + 4.0);
              v573 = v189;
              if (v195 > 0.200000003)
              {
                double v196 = atan(v195 + -0.200000003);
                double v194 = v625;
                double v191 = -5.0;
                double v195 = (v196 / -1.57079633 + 1.0) * 0.200000003;
              }

              double v197 = 0.0;
              if (v194 >= 0.200000003) {
                double v197 = (v194 + -0.200000003) / 0.800000012;
              }
              double v198 = 1.0 - (v197 * v191 + 4.0);
              v612 = v116;
              v584 = (v185 - v609 * 0.5 - v519) * 0.200000003;
              if (v198 > 0.200000003)
              {
                double v199 = atan(v198 + -0.200000003);
                double v194 = v625;
                double v198 = (v199 / -1.57079633 + 1.0) * 0.200000003;
              }

              double v200 = v194 * 5.0;
              double v201 = v194 * 5.0;
              double v202 = vcvtms_u32_f32(v201);
              if ((v202 | 4) == 4) {
                double v203 = 0LL;
              }
              else {
                double v203 = [v174 objectForKey:off_258A68[v202]];
              }
              if (v202 <= 2) {
                double v178 = [v174 objectForKey:off_258A68[v202 + 1]];
              }
              float v212 = v200 - (double)v202;
              if (v203)
              {
                double v213 = [v203 retainedByUserImage];
                double v214 = v212 * -0.523598776;
                double v215 = __sincosf_stret(v214);
                [v213 setCenterX:(float)(1.0 - v215.__cosval)];
                [v213 setCenterY:(float)(v215.__sinval * -6.0)];
                [v213 setRotationAngle:-(v212 * -0.523598776)];
                v606 = v213;
                [v213 setScale:0.5];
                if (v178) {
                  goto LABEL_201;
                }
LABEL_206:
                v590 = 0LL;
              }

              else
              {
                v606 = 0LL;
                if (!v178) {
                  goto LABEL_206;
                }
LABEL_201:
                double v216 = (float)((float)floorf(v201) + 1.0) - v200;
                double v217 = [v178 retainedByUserImage];
                if (v202 == 4) {
                  double v216 = -v195;
                }
                double v218 = v216 * 0.523598776;
                double v219 = __sincosf_stret(v218);
                [v217 setCenterX:(float)(1.0 - v219.__cosval)];
                [v217 setCenterY:(float)(v219.__sinval * -6.0)];
                [v217 setRotationAngle:-(v216 * 0.523598776)];
                [v217 setScale:0.5];
                [v217 centerY];
                v590 = v217;
                if (v220 > 0.0)
                {
                  [v217 centerY];
                  [v217 setCenterY:(1.0 - v625) * v221];
                  [v217 rotationAngle];
                  [v217 setRotationAngle:(1.0 - v625) * v222];
                }
              }

              double v223 = v197 * 5.0;
              double v224 = v197 * 5.0;
              double v225 = vcvtms_u32_f32(v224);
              if ((v225 | 4) == 4) {
                double v226 = 0LL;
              }
              else {
                double v226 = [v174 objectForKey:off_258A88[v225]];
              }
              double v227 = v197;
              if (v225 <= 2) {
                double v188 = [v174 objectForKey:off_258A88[v225 + 1]];
              }
              double v228 = v223 - (double)v225;
              if (v226)
              {
                double v229 = [v226 retainedByUserImage];
                double v230 = v228 * -0.523598776;
                double v231 = __sincosf_stret(v230);
                [v229 setCenterX:(float)(1.0 - v231.__cosval)];
                [v229 setCenterY:(float)(v231.__sinval * -6.0)];
                [v229 setRotationAngle:-(v228 * -0.523598776)];
                [v229 setScale:0.5];
              }

              else
              {
                double v229 = 0LL;
              }

              double v232 = a5;
              double v233 = a4;
              double v234 = v586;
              v517 = v225;
              if (v188)
              {
                double v235 = (float)((float)floorf(v224) + 1.0) - v223;
                double v188 = [v188 retainedByUserImage];
                if (v225 == 4) {
                  double v235 = -v198;
                }
                double v236 = v235 * 0.523598776;
                double v237 = __sincosf_stret(v236);
                [v188 setCenterX:(float)(1.0 - v237.__cosval)];
                [v188 setCenterY:(float)(v237.__sinval * -6.0)];
                [v188 setRotationAngle:-(v235 * 0.523598776)];
                [v188 setScale:0.5];
                [v188 centerY];
                double v238 = v202;
                if (v239 > 0.0)
                {
                  [v188 centerY];
                  [v188 setCenterY:(1.0 - v227) * v240];
                  [v188 rotationAngle];
                  [v188 setRotationAngle:(1.0 - v227) * v241];
                }

                double v232 = a5;
                double v233 = a4;
                double v234 = v586;
              }

              else
              {
                double v238 = v202;
              }

              double v242 = [*(id *)((char *)&self->mWeatherWindowMask + 1) retainedByUserRenderedImageAtTime:a3 inContext:v232 withArguments:v233];
              [a3 unsetShader];
              [a3 blend:2];
              if (v606) {
                double v243 = @"WeatherWindow";
              }
              else {
                double v243 = @"DateWindowSingle";
              }
              [a3 setShader:v243];
              double v244 = v571 + v571;
              double v245 = v609 + v609;
              v246 = objc_alloc(&OBJC_CLASS___MRCroppingSprite);
              LODWORD(v247) = 0;
              double v248 = -[MRCroppingSprite initWithPosition:size:zRotation:context:]( v246,  "initWithPosition:size:zRotation:context:",  a3,  v234,  v569,  v571 + v571,  v609 + v609,  v247);
              *(float *)&double v249 = v212;
              if (v238 == 4) {
                *(float *)&double v249 = 1.0;
              }
              [a3 setShaderUniformFloat:@"mixFactor" forKey:v249];
              double v250 = v244 / v245 * v551;
              double v251 = v250;
              if (!v606)
              {
                *(float *)&double v250 = v250;
                [a3 setImage:v242 onTextureUnit:1 withReferenceAspectRatio:v648 state:v250];
                LODWORD(v254) = 0;
                -[MRCroppingSprite renderImageInner:inContext:atPosition:andSize:zRotation:]( v248,  "renderImageInner:inContext:atPosition:andSize:zRotation:",  v590,  a3,  v234,  v569,  v244,  v245,  v254);
                [a3 unsetImage:v242 onTextureUnit:1 state:v648];
                double v62 = 0.5;
                double v116 = v612;
                goto LABEL_231;
              }

              *(float *)&double v250 = v250;
              [a3 setImage:v590 onTextureUnit:1 withReferenceAspectRatio:v649 state:v250];
              *(float *)&double v252 = v251;
              [a3 setImage:v242 onTextureUnit:2 withReferenceAspectRatio:v648 state:v252];
              LODWORD(v253) = 0;
              -[MRCroppingSprite renderImageInner:inContext:atPosition:andSize:zRotation:]( v248,  "renderImageInner:inContext:atPosition:andSize:zRotation:",  v606,  a3,  v234,  v569,  v244,  v245,  v253);
              [a3 unsetImage:v242 onTextureUnit:2 state:v648];
              [a3 unsetImage:v590 onTextureUnit:1 state:v649];
              double v62 = 0.5;
              double v116 = v612;
              if (!v229)
              {
LABEL_231:
                [a3 unsetShader];
                if (v229) {
                  double v255 = @"WeatherWindow";
                }
                else {
                  double v255 = @"DateWindowSingle";
                }
                [a3 setShader:v255];
              }

              double v256 = v573 + v573;
              double v258 = v578;
              double v257 = v258 + v258;
              *(float *)&double v258 = v228;
              if (v517 == 4) {
                *(float *)&double v258 = 1.0;
              }
              [a3 setShaderUniformFloat:@"mixFactor" forKey:v258];
              double v259 = v256 / v257 * v551;
              double v260 = v259;
              if (v188)
              {
                *(float *)&double v259 = v259;
                [a3 setImage:v188 onTextureUnit:1 withReferenceAspectRatio:v649 state:v259];
                *(float *)&double v261 = v260;
                [a3 setImage:v242 onTextureUnit:2 withReferenceAspectRatio:v648 state:v261];
                if (v229) {
                  v263 = v229;
                }
                else {
                  v263 = v188;
                }
                LODWORD(v262) = 0;
                double v264 = v248;
                -[MRCroppingSprite renderImageInner:inContext:atPosition:andSize:zRotation:]( v248,  "renderImageInner:inContext:atPosition:andSize:zRotation:",  v263,  a3,  v581,  v584,  v256,  v257,  v262);
                [a3 unsetImage:v242 onTextureUnit:2 state:v648];
                double v265 = v649;
                double v266 = a3;
                double v267 = v188;
              }

              else
              {
                *(float *)&double v259 = v259;
                [a3 setImage:v242 onTextureUnit:1 withReferenceAspectRatio:v648 state:v259];
                if (v229) {
                  v269 = v229;
                }
                else {
                  v269 = 0LL;
                }
                LODWORD(v26_Block_object_dispose((const void *)(v1 - 48), 8) = 0;
                double v264 = v248;
                -[MRCroppingSprite renderImageInner:inContext:atPosition:andSize:zRotation:]( v248,  "renderImageInner:inContext:atPosition:andSize:zRotation:",  v269,  a3,  v581,  v584,  v256,  v257,  v268);
                double v265 = v648;
                double v266 = a3;
                double v267 = v242;
              }

              [v266 unsetImage:v267 onTextureUnit:1 state:v265];
              [a3 blend:0];

              [v242 releaseByUser];
              [v590 releaseByUser];
              [v606 releaseByUser];
              [v188 releaseByUser];
              [v229 releaseByUser];
            }

            __int128 v110 = v577;
          }

          HIDWORD(v270) = 1055193269;
          HIDWORD(v271) = HIDWORD(v544);
          if (v544 < 0.00001) {
            objc_msgSend(a3, "restoreForeColor:", v650, 0.00001, v544);
          }
          *(float *)&double v270 = v534;
          *(float *)&double v271 = v534;
          *(float *)&double v175 = v534;
          *(float *)&double v176 = v534;
          [a3 composeForeColorRed:v650 green:v270 blue:v271 alpha:v175 saveTo:v176];
          [a3 blend:2];
          double v272 = [*(id *)((char *)&self->mChapters + 1) objectForKey:v116];
          double v167 = v619;
          if (v272 && v533 | v90)
          {
            double v273 = v272;
            double v274 = dbl_1FB880[BYTE3(self->mSlideInformation) == 0];
            if (BYTE3(self->mSlideInformation)) {
              CGFloat v275 = 1.29999995;
            }
            else {
              CGFloat v275 = v525;
            }
            double v276 = [v272 objectForKey:@"title"];
            if (v276)
            {
              CGFloat v277 = v276;
              objc_msgSend( v276,  "relativeSizeInContextPixelSize:",  self->super.mPixelSize.width,  self->super.mPixelSize.height);
              double v279 = v278;
              double v281 = v280;
              double v282 = v274 - v280 * v62;
              double v283 = -0.200000003 - v275 + v278 * v62;
              MRMatrix_Clear((uint64_t)v649);
              MRMatrix_Clear((uint64_t)v648);
              if (v619 >= 1.0)
              {
                double v285 = 1.0;
              }

              else
              {
                double v283 = v283 + 0.0500000007;
                double v285 = v275 + 0.200000003;
              }

              double v284 = v275 + 0.200000003;
              double v286 = -v284;
              if (v619 >= 1.0) {
                CGFloat v287 = -1.0;
              }
              else {
                CGFloat v287 = v286;
              }
              MRMatrix_Translate(v649, v285, 0.0, 0.0);
              MRMatrix_SetRotationFromAnglesYXZDeg((uint64_t)v648, v516, 0.0, 0.0);
              MRMatrix_PostMultiply((uint64_t)v649, v648);
              double v288 = v287;
              double v167 = v619;
              *(float *)&double v289 = MRMatrix_Translate(v649, v288, 0.0, 0.0);
              objc_msgSend(a3, "composeModelViewMatrix:saveTo:", v649, v647, v289);
              +[MRCroppingSprite renderImage:inContext:atPosition:andSize:]( &OBJC_CLASS___MRCroppingSprite,  "renderImage:inContext:atPosition:andSize:",  v277,  a3,  v283,  v282,  v279,  v281);
              [a3 restoreModelViewMatrix:v647];
              double v274 = v282 - v281 * v62;
            }

            double v290 = [v273 objectForKey:@"subtitle"];
            if (v290)
            {
              double v291 = v290;
              objc_msgSend( v290,  "relativeSizeInContextPixelSize:",  self->super.mPixelSize.width,  self->super.mPixelSize.height);
              double v293 = v292;
              char v295 = v294;
              v296 = v292 * v62 + -0.200000003 - v275;
              v297 = v274 - (v294 * v62 + 0.0500000007);
              CGRect v298 = v296 + 0.0500000007;
              MRMatrix_Clear((uint64_t)v649);
              MRMatrix_Clear((uint64_t)v648);
              if (v619 < 1.0)
              {
                CGRect v300 = v275 + 0.200000003;
              }

              else
              {
                CGRect v298 = v296;
                CGRect v300 = 1.0;
              }

              CGRect v299 = v275 + 0.200000003;
              CGRect v301 = -v299;
              if (v619 >= 1.0) {
                CGRect v302 = -1.0;
              }
              else {
                CGRect v302 = v301;
              }
              MRMatrix_Translate(v649, v300, 0.0, 0.0);
              MRMatrix_SetRotationFromAnglesYXZDeg((uint64_t)v648, v515, 0.0, 0.0);
              MRMatrix_PostMultiply((uint64_t)v649, v648);
              CGRect v303 = v302;
              double v167 = v619;
              *(float *)&v304 = MRMatrix_Translate(v649, v303, 0.0, 0.0);
              objc_msgSend(a3, "composeModelViewMatrix:saveTo:", v649, v647, v304);
              +[MRCroppingSprite renderImage:inContext:atPosition:andSize:]( &OBJC_CLASS___MRCroppingSprite,  "renderImage:inContext:atPosition:andSize:",  v291,  a3,  v298,  v297,  v293,  v295);
              [a3 restoreModelViewMatrix:v647];
            }
          }

          [a3 restoreForeColor:v650];
          v305 = [v560 objectForKey:@"weather"];
          if (v305) {
            v306 = v533 | v90;
          }
          else {
            v306 = 0;
          }
          if (v306 == 1)
          {
            v307 = [v305 integerValue];
            v308 = -[MREffectDateline _weatherStringForCondition:](self, "_weatherStringForCondition:", v307);
            v309 = v524;
            v310 = v521;
            v311 = v522;
            v312 = 0.349999994;
            if (v167 < 1.0)
            {
              v310 = dbl_1FB890[BYTE3(self->mSlideInformation) == 0];
              v309 = -0.5;
              v312 = 0.800000012;
              v311 = v513;
            }

            v313 = v518;
            if (v518 > 0.200000003) {
              v313 = (atan(v512) / -1.57079633 + 1.0) * 0.200000003;
            }
            v314 = v527;
            if (v527 >= 1.0)
            {
              v317 = objc_msgSend( objc_msgSend(*(id *)((char *)&self->mIndicies + 1), "objectForKey:", v308, v527),  "retainedByUserRenderedImageAtTime:inContext:withArguments:",  a3,  a5,  a4);
              v318 = [v317 retainedByUserImage];
              v319 = v313 * -0.523598776;
              v320 = __sincosf_stret(v319);
              [v318 setCenterX:(float)(v320.__sinval * -3.0)];
              double v167 = v619;
              [v318 setCenterY:(float)(1.0 - v320.__cosval)];
              [v318 setRotationAngle:v313 * -0.523598776];
              [v317 releaseByUser];
              +[MRCroppingSprite renderImage:inContext:atPosition:andSize:]( &OBJC_CLASS___MRCroppingSprite,  "renderImage:inContext:atPosition:andSize:",  v318,  a3,  v309,  v310,  v312,  v311);
              [v318 releaseByUser];
              double v62 = 0.5;
            }

            else
            {
              v315 = v110;
              if ((v530 | 4) == 4)
              {
                v316 = 0LL;
              }

              else
              {
                v321 = (_DWORD)v307 - v530;
                v316 = objc_msgSend( *(id *)((char *)&self->mIndicies + 1),  "objectForKey:",  -[MREffectDateline _weatherStringForCondition:]( self,  "_weatherStringForCondition:",  v321,  v527));
              }

              v322 = *(NSMutableArray **)((char *)&self->mIndicies + 1);
              if (v530 <= 2)
              {
                v323 = (_DWORD)v307 + v508;
                v308 = -[MREffectDateline _weatherStringForCondition:](self, "_weatherStringForCondition:", v323, v314);
              }

              v324 = [v322 objectForKey:v308];
              v325 = v324;
              if (v316)
              {
                v326 = [v316 retainedByUserRenderedImageAtTime:a3 inContext:a5 withArguments:a4];
                v327 = [v326 retainedByUserImage];
                [v327 setCenterX:(float)(v54.__sinval * -3.0)];
                [v327 setCenterY:(float)(1.0 - v54.__cosval)];
                [v327 setRotationAngle:v510];
                [v326 releaseByUser];
                if (v325) {
                  goto LABEL_292;
                }
LABEL_296:
                v335 = a5;
                v329 = a4;
              }

              else
              {
                v327 = 0LL;
                if (!v324) {
                  goto LABEL_296;
                }
LABEL_292:
                v328 = -v313;
                v329 = a4;
                v330 = [v325 retainedByUserRenderedImageAtTime:a3 inContext:a5 withArguments:a4];
                v325 = [v330 retainedByUserImage];
                v331 = v509;
                if (v530 == 4) {
                  v331 = v328;
                }
                v332 = v331 * 0.523598776;
                v333 = v331 * 0.523598776;
                v334 = __sincosf_stret(v333);
                [v325 setCenterX:(float)(v334.__sinval * -3.0)];
                double v167 = v619;
                [v325 setCenterY:(float)(1.0 - v334.__cosval)];
                [v325 setRotationAngle:v332];
                [v330 releaseByUser];
                v335 = a5;
              }

              v336 = [*(id *)((char *)&self->mQuoteBox + 1) retainedByUserRenderedImageAtTime:a3 inContext:v335 withArguments:v329];
              [a3 unsetShader];
              [a3 blend:3];
              [a3 setShader:@"WeatherWindow"];
              *(float *)&v337 = v514;
              [a3 setShaderUniformFloat:@"mixFactor" forKey:v337];
              v338 = v312 / v311 * v551;
              v339 = v338;
              *(float *)&v338 = v339;
              [a3 setImage:v325 onTextureUnit:1 withReferenceAspectRatio:&v640 state:v338];
              *(float *)&v340 = v339;
              [a3 setImage:v336 onTextureUnit:2 withReferenceAspectRatio:&v639 state:v340];
              v341 = objc_alloc(&OBJC_CLASS___MRCroppingSprite);
              LODWORD(v342) = 0;
              v343 = -[MRCroppingSprite initWithPosition:size:zRotation:context:]( v341,  "initWithPosition:size:zRotation:context:",  a3,  v309,  v310,  v312,  v311,  v342);
              -[MRCroppingSprite renderImageInner:inContext:](v343, "renderImageInner:inContext:", v327, a3);

              [a3 unsetImage:v336 onTextureUnit:2 state:&v639];
              [a3 unsetImage:v325 onTextureUnit:1 state:&v640];
              [a3 blend:0];
              [v336 releaseByUser];
              [v325 releaseByUser];
              [v327 releaseByUser];
              double v62 = 0.5;
              __int128 v110 = v315;
            }
          }

          [a3 blend:0];
          double v121 = 1.0;
          id v92 = v617;
          goto LABEL_299;
        }

        if (v86 == -1 || v594 == v86)
        {
          double v204 = [*(id *)((char *)&self->mChapters + 1) objectForKey:v116];
          LODWORD(v205) = 0;
          LODWORD(v206) = 0;
          LODWORD(v207) = 0;
          LODWORD(v20_Block_object_dispose((const void *)(v1 - 48), 8) = 0;
          [a3 composeForeColorRed:v649 green:v205 blue:v206 alpha:v207 saveTo:v208];
          double v209 = [v204 objectForKey:@"title"];
          if (v209) {
            +[MRCroppingSprite renderImage:inContext:atPosition:andSize:]( &OBJC_CLASS___MRCroppingSprite,  "renderImage:inContext:atPosition:andSize:",  v209,  a3,  CGPointZero.x,  y,  0.1,  0.1);
          }
          int v210 = [v204 objectForKey:@"subtitle"];
          if (v210) {
            +[MRCroppingSprite renderImage:inContext:atPosition:andSize:]( &OBJC_CLASS___MRCroppingSprite,  "renderImage:inContext:atPosition:andSize:",  v210,  a3,  CGPointZero.x,  y,  0.1,  0.1);
          }
          [a3 restoreForeColor:v649];
        }

LABEL_80:
        ;
      }

      uint64_t v89 = [obj countByEnumeratingWithState:&v95 objects:v101 count:16];
    }

    while (v89);
  }

LABEL_141:
              if (v196)
              {
                double v241 = 0u;
                double v242 = 0u;
                double v239 = 0u;
                double v240 = 0u;
                __int128 v112 = -[MPEffect slides](v59, "slides");
                __int128 v113 = -[NSArray countByEnumeratingWithState:objects:count:]( v112,  "countByEnumeratingWithState:objects:count:",  &v239,  v276,  16LL);
                if (v113)
                {
                  double v114 = v113;
                  double v115 = *(void *)v240;
                  do
                  {
                    for (isize_t i = 0LL; ii != v114; isize_t i = (char *)ii + 1)
                    {
                      if (*(void *)v240 != v115) {
                        objc_enumerationMutation(v112);
                      }
                      double v117 = *(void **)(*((void *)&v239 + 1) + 8LL * (void)ii);
                      double v118 = -[MPAuthoringController frameFromOptions:](self, "frameFromOptions:", v218);
                      if (v118) {
                        [v117 setFrame:v118];
                      }
                    }

                    double v114 = -[NSArray countByEnumeratingWithState:objects:count:]( v112,  "countByEnumeratingWithState:objects:count:",  &v239,  v276,  16LL);
                  }

                  while (v114);
                }
              }

              if ((v193 & 1) != 0)
              {
                double v237 = 0u;
                double v238 = 0u;
                double v235 = 0u;
                double v236 = 0u;
                double v119 = -[MPEffect slides](v59, "slides");
                double v120 = -[NSArray countByEnumeratingWithState:objects:count:]( v119,  "countByEnumeratingWithState:objects:count:",  &v235,  v275,  16LL);
                if (v120)
                {
                  double v121 = v120;
                  double v122 = *(void *)v236;
                  do
                  {
                    for (jj = 0LL; jj != v121; jj = (char *)jj + 1)
                    {
                      if (*(void *)v236 != v122) {
                        objc_enumerationMutation(v119);
                      }
                      double v124 = *(void **)(*((void *)&v235 + 1) + 8LL * (void)jj);
                      if ((v197 & 1) != 0)
                      {
                        double v125 = [self->_delegate document:self->_authoredDocument shouldUseDefaultFiltersForSlide:*(void *)(*((void *)&v235 + 1) + 8 * (void)jj) effectIndex:v215 containerIndex:v213 layerIndex:v198];
                        if (((v125 | v197 ^ 1) & 1) == 0)
                        {
                          double v126 = [self->_delegate document:self->_authoredDocument needsFiltersForSlide:v124 effectIndex:v215 containerIndex:v213 layerIndex:v198];
                          goto LABEL_162;
                        }

                        if (!v125) {
                          continue;
                        }
                      }

                      double v126 = -[MPAuthoringController filtersForSlideFromOptions:]( self,  "filtersForSlideFromOptions:",  v218);
LABEL_162:
                      double v127 = v126;
                      if (v126 && [v126 count]) {
                        [v124 addFilters:v127];
                      }
                    }

                    double v121 = -[NSArray countByEnumeratingWithState:objects:count:]( v119,  "countByEnumeratingWithState:objects:count:",  &v235,  v275,  16LL);
                  }

                  while (v121);
                }
              }

              if (v210 > 0) {
                double v128 = 1;
              }
              else {
                double v128 = v195;
              }
              if (v13 > 0.0 && v128)
              {
                CGFloat v30 = v13 * -2.0 + 1.0 + v13 * -2.0 + 1.0;
                -[MPEffect setSize:](v59, "setSize:", v30, v30);
                -[MPEffect setPosition:](v59, "setPosition:", CGPointZero.x, y);
              }

              CGFloat v27 = &AVAudioTimePitchAlgorithmVarispeed_ptr;
              id v34 = v200;
              if (v11 != 1.0)
              {
                double v233 = 0u;
                double v234 = 0u;
                double v231 = 0u;
                double v232 = 0u;
                double v129 = -[MPEffect slides](v59, "slides");
                double v130 = -[NSArray countByEnumeratingWithState:objects:count:]( v129,  "countByEnumeratingWithState:objects:count:",  &v231,  v274,  16LL);
                if (v130)
                {
                  double v131 = v130;
                  double v132 = *(void *)v232;
                  do
                  {
                    for (kk = 0LL; kk != v131; kk = (char *)kk + 1)
                    {
                      if (*(void *)v232 != v132) {
                        objc_enumerationMutation(v129);
                      }
                      double v134 = *(void **)(*((void *)&v231 + 1) + 8LL * (void)kk);
                    }

                    double v131 = -[NSArray countByEnumeratingWithState:objects:count:]( v129,  "countByEnumeratingWithState:objects:count:",  &v231,  v274,  16LL);
                  }

                  while (v131);
                }
              }

              a5 = v204;
              if (v194)
              {
                double v229 = 0u;
                double v230 = 0u;
                double v227 = 0u;
                double v228 = 0u;
                double v135 = -[MPEffect slides](v59, "slides");
                double v136 = -[NSArray countByEnumeratingWithState:objects:count:]( v135,  "countByEnumeratingWithState:objects:count:",  &v227,  v273,  16LL);
                if (v136)
                {
                  double v137 = v136;
                  double v138 = *(void *)v228;
                  do
                  {
                    for (mm = 0LL; mm != v137; mm = (char *)mm + 1)
                    {
                      if (*(void *)v228 != v138) {
                        objc_enumerationMutation(v135);
                      }
                      double v140 = *(void **)(*((void *)&v227 + 1) + 8LL * (void)mm);
                      if ([v140 hasMovie])
                      {
                        [v140 setAudioDuckInDuration:1.0];
                        [v140 setAudioDuckOutDuration:1.0];
                        [v140 setAudioDuckLevel:0.25];
                      }
                    }

                    double v137 = -[NSArray countByEnumeratingWithState:objects:count:]( v135,  "countByEnumeratingWithState:objects:count:",  &v227,  v273,  16LL);
                  }

                  while (v137);
                }
              }

              [v200 addEffect:v59];
              double v141 = (uint64_t)v206;
              BOOL v29 = &v208[v141];
              double v28 = v213;
              double v38 = v215 + 1;
              double v39 = v207 + 1;
            }

            while ((id)(v207 + 1) != v202);
            double v202 = [v187 countByEnumeratingWithState:&v263 objects:v282 count:16];
          }

          while (v202);
        }

        if (v181 && [v181 count]) {
          [v34 addFilters:v181];
        }
        if (v34) {
          [v186 addObject:v34];
        }
        ++v28;

        if (__ROR8__(0xEEEEEEEEEEEEEEEFLL * v28 + 0x888888888888888LL, 1) <= 0x888888888888888uLL)
        {

          double v184 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
        }

        double v32 = v185 + 1;
      }

      while ((id)(v185 + 1) != v182);
      double v182 = [a4 countByEnumeratingWithState:&v267 objects:v283 count:16];
    }

    while (v182);
  }

  if (v191) {

  }
  double v142 = (char *)[v186 count];
  double v223 = 0u;
  double v224 = 0u;
  double v225 = 0u;
  double v226 = 0u;
  double v143 = [v186 countByEnumeratingWithState:&v223 objects:v272 count:16];
  if (!v143)
  {
    -[NSAutoreleasePool drain](v184, "drain");
    goto LABEL_253;
  }

  double v144 = v143;
  double v145 = 0LL;
  double v216 = *(id *)v224;
  float v212 = 0LL;
  do
  {
    double v146 = 0LL;
    double v214 = 1LL - (void)v142 + v145;
    do
    {
      if (*(id *)v224 != v216) {
        objc_enumerationMutation(v186);
      }
      double v147 = *(void **)(*((void *)&v223 + 1) + 8LL * (void)v146);
      double v148 = v218;
      if (v183)
      {
        double v149 = [*(id *)(*((void *)&v223 + 1) + 8 * (void)v146) effects];
        double v148 = v218;
        if ([v149 count])
        {
          float v150 = objc_msgSend( v183,  "objectForKey:",  objc_msgSend(objc_msgSend(v149, "objectAtIndex:", 0), "effectPresetID"));
          double v148 = v218;
          if (v150)
          {
            double v151 = v150;
            double v148 = (NSMutableDictionary *)-[NSMutableDictionary mutableCopy](v218, "mutableCopy");
            double v152 = -[NSArray initWithObjects:](objc_alloc(&OBJC_CLASS___NSArray), "initWithObjects:", v151, 0LL);
            -[NSMutableDictionary setObject:forKey:](v148, "setObject:forKey:", v152, kMPAuthoringTransitionList);
          }
        }
      }

      if (((v173 | v178 | v177) ^ 1) & 1 | ((uint64_t)((char *)v146 + v145) >= (uint64_t)v142)
        || !v147
        || !objc_msgSend(objc_msgSend(v147, "effects"), "count"))
      {
        goto LABEL_243;
      }

      if ((v178 & 1) == 0) {
        goto LABEL_223;
      }
      double v153 = [self->_delegate document:self->_authoredDocument shouldUseDefaultTransitionForEffectContainer:v147 containerIndex:(char *)v146 + v145 layerIndex:v198];
      if (((v153 | v174) & 1) != 0)
      {
        if (!v153) {
          goto LABEL_243;
        }
LABEL_223:
        double v154 = v177;
        if (v154 == 1)
        {
          double v155 = -[MPAuthoringController loopTransitionFromOptions:](self, "loopTransitionFromOptions:", v218);
        }

        else
        {
          if ((char *)v146 + v214)
          {
            double v156 = [v186 objectAtIndex:(char *)v146 + v145 + 1];
          }

          else
          {
            if ([v204 objectForKey:kMPAuthoringUseLoopTransition]
              && ![v147 countOfEffects]
              && (objc_msgSend( objc_msgSend(v204, "objectForKey:", kMPAuthoringUseLoopTransition),  "BOOLValue") & 1) == 0)
            {
              goto LABEL_243;
            }

            double v156 = 0LL;
          }

          if (v176) {
            double v155 = [v176 copy];
          }
          else {
            double v155 = -[MPAuthoringController transitionFromOptions:firstEffectContainer:nextEffectContainer:]( self,  "transitionFromOptions:firstEffectContainer:nextEffectContainer:",  v148,  v147,  v156);
          }
        }

        goto LABEL_237;
      }

      double v155 = [self->_delegate document:self->_authoredDocument needsTransitionForEffectContainer:v147 containerIndex:(char *)v146 + v145 layerIndex:v198];
LABEL_237:
      double v157 = v155;
      if (!v155) {
        goto LABEL_243;
      }
      [v147 setTransition:v155];
      if ((v175 & 1) == 0)
      {
LABEL_242:
        double v159 = -[NSArray initWithObjects:]( [NSArray alloc],  "initWithObjects:",  [v157 transitionPresetID],  0);
        -[NSMutableDictionary setObject:forKey:](v218, "setObject:forKey:", v159, kMPAuthoringIgnoreTransitionList);

        goto LABEL_243;
      }

      if (v176) {
        goto LABEL_243;
      }
      double v158 = [v157 transitionPresetID];
      if (v212)
      {
        -[NSMutableDictionary removeObjectForKey:](v218, "removeObjectForKey:", kMPAuthoringIgnoreTransitionList);
      }

      float v212 = v158;
LABEL_243:
      double v160 = v186;
      if (__ROR8__(0xEEEEEEEEEEEEEEEFLL * ((void)v146 + v145) - 0x888888888888889LL, 1) <= 0x888888888888888uLL)
      {

        double v184 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
        double v160 = v186;
      }

      double v146 = (char *)v146 + 1;
    }

    while (v144 != v146);
    double v161 = [v160 countByEnumeratingWithState:&v223 objects:v272 count:16];
    double v144 = v161;
    v145 += (uint64_t)v146;
  }

  while (v161);
  -[NSAutoreleasePool drain](v184, "drain");
  if (v212) {

  }
LABEL_253:
  double v217 = +[MPAuthoringUtilities gapInformationFromOptions:]( &OBJC_CLASS___MPAuthoringUtilities,  "gapInformationFromOptions:",  v204);
  if (v217)
  {
    double v221 = 0u;
    double v222 = 0u;
    double v219 = 0u;
    double v220 = 0u;
    double v162 = [v217 countByEnumeratingWithState:&v219 objects:v271 count:16];
    if (v162)
    {
      double v163 = v162;
      double v164 = 0LL;
      double v165 = *(void *)v220;
      do
      {
        for (nn = 0LL; nn != v163; nn = (char *)nn + 1)
        {
          if (*(void *)v220 != v165) {
            objc_enumerationMutation(v217);
          }
          double v167 = *(void **)(*((void *)&v219 + 1) + 8LL * (void)nn);
          double v168 = (char *)objc_msgSend(objc_msgSend(v167, "objectForKey:", @"index"), "integerValue");
          objc_msgSend(objc_msgSend(v167, "objectForKey:", @"duration"), "doubleValue");
          double v170 = v169;
          double v171 = +[MPEffectContainer effectContainer](&OBJC_CLASS___MPEffectContainer, "effectContainer");
          [v171 setDuration:v170];
          objc_msgSend(objc_msgSend(v186, "objectAtIndex:", &v168[(void)nn + v164]), "setTransition:", 0);
          [v186 insertObject:v171 atIndex:&v168[(void)nn + v164]];
        }

        double v163 = [v217 countByEnumeratingWithState:&v219 objects:v271 count:16];
        v164 += (uint64_t)nn;
      }

      while (v163);
    }
  }

  return v186;
}

LABEL_61:
        double v13 = -[MPWeighter getRandomIndex](self->_transitionWeighter, "getRandomIndex");
        if (v13 == 0x7FFFFFFFFFFFFFFFLL)
        {
          -[MPWeighter clearIgnoreIndices](self->_transitionWeighter, "clearIgnoreIndices");
          double v13 = -[MPWeighter getRandomIndex](self->_transitionWeighter, "getRandomIndex");
        }

        goto LABEL_147;
      }
    }

    else
    {
      BOOL v43 = 0LL;
      p_cache = (void **)(&OBJC_METACLASS___SYNMediaWallCollectionViewCellMainView2 + 16);
      int v12 = &AVAudioTimePitchAlgorithmVarispeed_ptr;
    }

    double v57 = v103;
    goto LABEL_56;
  }

  double v14 = [v11 mutableCopy];
  id v15 = +[MPAuthoringUtilities ignoreTransitionListFromOptions:]( &OBJC_CLASS___MPAuthoringUtilities,  "ignoreTransitionListFromOptions:",  a3);
  id v16 = objc_msgSend(v14, "objectAtIndex:", random() % (unint64_t)objc_msgSend(v14, "count"));
  uint64_t v18 = objc_opt_class(&OBJC_CLASS___NSDictionary, v17);
  if ((objc_opt_isKindOfClass(v16, v18) & 1) != 0) {
    id v16 = [v16 objectForKey:@"presetID"];
  }

LABEL_151:
  double v87 = objc_opt_class(v12[215], v19);
  if ((objc_opt_isKindOfClass(v16, v87) & 1) != 0) {
    id v16 = [v16 objectForKey:@"presetID"];
  }
  if (!v16) {
    return 0LL;
  }
  double v88 = [p_cache + 193 idFromPresetID:v16];
  uint64_t v89 = +[MPTransition transitionWithTransitionID:](&OBJC_CLASS___MPTransition, "transitionWithTransitionID:", v88);
  [p_cache + 193 transitionDurationFromOptions:a3];
  id v91 = v90;
  if (v90 == -1.0)
  {
    [v9 defaultDurationForTransitionID:v88];
    id v91 = v92;
  }

  -[MPTransition setDuration:](v89, "setDuration:", v91);
  return v89;
}

LABEL_99:
  [a4 blend:0];
}

BOOL MPShouldPanPanorama2(double a1, double a2)
{
  BOOL v2 = a1 < 1.0;
  double v3 = a1 / a2;
  double v4 = a2 / a1;
  if (!v2) {
    double v4 = v3;
  }
  return v4 >= 1.1;
}

void sub_BD684(_Unwind_Exception *a1)
{
}

void sub_BD6E0(_Unwind_Exception *a1)
{
}

void sub_BFF1C(_Unwind_Exception *a1)
{
}

void sub_BFF98(_Unwind_Exception *a1)
{
}

void sub_C0848(_Unwind_Exception *a1)
{
}

void convertToGreyScaleGCD(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3, size_t a4)
{
  dispatch_queue_global_t global_queue = dispatch_get_global_queue(0LL, 0LL);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_C0954;
  block[3] = &unk_24E3E0;
  void block[4] = a3;
  block[5] = a1;
  block[6] = a2;
  dispatch_apply(a4, global_queue, block);
}

void *sub_C0954(void *result, uint64_t a2)
{
  unint64_t v2 = result[4];
  if (v2)
  {
    uint64_t v3 = 0LL;
    unsigned int v4 = 1;
    do
    {
      uint64_t v5 = v3 + v2 * a2;
      *(_BYTE *)(result[6] + v5) = (unsigned __int16)(77 * *(unsigned __int8 *)(result[5] + 4 * v5)
      uint64_t v3 = v4;
      unint64_t v2 = result[4];
    }

    while (v2 > v4++);
  }

  return result;
}

uint64_t convertToGreyScaleNoGCD( uint64_t result, unsigned __int8 *a2, unint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v4 = 0LL;
    for (i = 0; i < a4; uint64_t v4 = ++i)
    {
      if (a3)
      {
        uint64_t v6 = 0LL;
        double v7 = (unsigned __int8 *)(result + 4 * a3 * v4);
        do
        {
          a2[v6++] = (unsigned __int16)(77 * *v7 + 151 * v7[1] + 28 * v7[2]) >> 8;
          v7 += 4;
        }

        while (a3 > v6);
        a2 += v6;
      }
    }
  }

  return result;
}

double ShowroomOpacityProgress(double a1)
{
  float v1 = (a1 + -0.5) * 3.14159274;
  return (float)((float)(sinf(v1) + 1.0) * 0.5);
}

void sub_C28E4(_Unwind_Exception *a1)
{
}

void sub_C2C60( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id obj)
{
}

void sub_C2E54(_Unwind_Exception *a1)
{
}

uint64_t sortByLocalizedName(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  if (a3) {
    BOOL v3 = *a3 == 0;
  }
  else {
    BOOL v3 = 0;
  }
  uint64_t result = (uint64_t)objc_msgSend( objc_msgSend( +[MPStyleManager sharedManager](MPStyleManager, "sharedManager"),  "localizedNameForStyleID:",  a1),  "localizedCaseInsensitiveCompare:",  objc_msgSend( +[MPStyleManager sharedManager](MPStyleManager, "sharedManager"),  "localizedNameForStyleID:",  a2));
  if (v3)
  {
    if (result == -1)
    {
      return 1LL;
    }

    else if (result == 1)
    {
      return -1LL;
    }
  }

  return result;
}

void sub_C4698(_Unwind_Exception *a1)
{
}

void sub_C46F4(_Unwind_Exception *a1)
{
}

id FixForFrameID(void *a1)
{
  if (([a1 isEqualToString:@"torn-paper"] & 1) != 0
    || ([a1 isEqualToString:@"mounted-frame"] & 1) != 0
    || ([a1 isEqualToString:@"rough-vignette"] & 1) != 0
    || ([a1 isEqualToString:@"rough-vignette-portrait"] & 1) != 0
    || ([a1 isEqualToString:@"brown-paper"] & 1) != 0
    || ([a1 isEqualToString:@"postcard-frame"] & 1) != 0
    || ([a1 isEqualToString:@"postcard-back"] & 1) != 0
    || ([a1 isEqualToString:@"vertical-lined-frame"] & 1) != 0
    || ([a1 isEqualToString:@"portrait-frame"] & 1) != 0
    || ([a1 isEqualToString:@"ruled-border"] & 1) != 0
    || ([a1 isEqualToString:@"rounded-corner"] & 1) != 0
    || ([a1 isEqualToString:@"deckle-edge-frame"] & 1) != 0
    || ([a1 isEqualToString:@"torn-frame1"] & 1) != 0
    || ([a1 isEqualToString:@"torn-frame2"] & 1) != 0)
  {
    return &dword_0 + 1;
  }

  else
  {
    return [a1 isEqualToString:@"torn-frame3"];
  }

LABEL_89:
  LODWORD(v97) = v10;
  [v96 setLocalAspectRatio:v97];
  return 1;
}

float *SetLightingColors(float *result, float *a2, float a3)
{
  float v3 = a2[1];
  float v4 = a2[4] - v3;
  float v5 = a2[2];
  float v6 = a2[8] - v5;
  float v7 = a2[7] - v3;
  float v8 = a2[5] - v5;
  float v9 = (float)(v4 * v6) - (float)(v7 * v8);
  float v10 = a2[6] - *a2;
  float v11 = a2[3] - *a2;
  float v12 = (float)(v8 * v10) - (float)(v6 * v11);
  float v13 = (float)(v11 * v7) - (float)(v10 * v4);
  float v14 = sqrtf((float)((float)(v12 * v12) + (float)(v9 * v9)) + (float)(v13 * v13));
  float v15 = fabs( (float)((float)((float)(v3 * v12) + (float)(v9 * *a2)) + (float)(v13 * (float)(v5 + -5.0)))
        / (float)(sqrtf((float)((float)(v3 * v3) + (float)(*a2 * *a2)) + (float)((float)(v5 + -5.0) * (float)(v5 + -5.0)))
                * v14))
      * a3;
  result[1] = v15;
  result[2] = v15;
  CFStringRef result = v15;
  float v16 = fabs( (float)((float)((float)(v12 * a2[4]) + (float)(v9 * a2[3])) + (float)(v13 * (float)(a2[5] + -5.0)))
        / (float)(v14
                * sqrtf( (float)((float)(a2[4] * a2[4]) + (float)(a2[3] * a2[3]))
  result[5] = v16;
  result[6] = v16;
  result[4] = v16;
  float v17 = fabs( (float)((float)((float)(v12 * a2[7]) + (float)(v9 * a2[6])) + (float)(v13 * (float)(a2[8] + -5.0)))
        / (float)(v14
                * sqrtf( (float)((float)(a2[7] * a2[7]) + (float)(a2[6] * a2[6]))
  result[9] = v17;
  result[10] = v17;
  result[8] = v17;
  float v18 = fabs( (float)((float)((float)(v12 * a2[10]) + (float)(v9 * a2[9])) + (float)(v13 * (float)(a2[11] + -5.0)))
        / (float)(v14
                * sqrtf( (float)((float)(a2[10] * a2[10]) + (float)(a2[9] * a2[9]))
  result[13] = v18;
  result[14] = v18;
  result[15] = a3;
  result[11] = a3;
  result[12] = v18;
  result[7] = a3;
  result[3] = a3;
  return result;
}

float SetLightingColors2D(uint64_t a1, float *a2, float a3)
{
  double v3 = a3 * 5.0;
  float v4 = v3 / sqrtf((float)((float)(a2[1] * a2[1]) + (float)(*a2 * *a2)) + 25.0);
  *(float *)(a1 + 4) = v4;
  *(float *)(a1 + _Block_object_dispose((const void *)(v1 - 48), 8) = v4;
  *(float *)a1 = v4;
  float v5 = v3 / sqrtf((float)((float)(a2[3] * a2[3]) + (float)(a2[2] * a2[2])) + 25.0);
  *(float *)(a1 + 20) = v5;
  *(float *)(a1 + 24) = v5;
  *(float *)(a1 + 16) = v5;
  float v6 = v3 / sqrtf((float)((float)(a2[5] * a2[5]) + (float)(a2[4] * a2[4])) + 25.0);
  *(float *)(a1 + 36) = v6;
  *(float *)(a1 + 40) = v6;
  *(float *)(a1 + 32) = v6;
  float result = v3 / sqrtf((float)((float)(a2[7] * a2[7]) + (float)(a2[6] * a2[6])) + 25.0);
  *(float *)(a1 + 52) = result;
  *(float *)(a1 + 56) = result;
  *(float *)(a1 + 4_Block_object_dispose((const void *)(v1 - 48), 8) = result;
  *(_DWORD *)(a1 + 60) = 1065353216;
  *(_DWORD *)(a1 + 44) = 1065353216;
  *(_DWORD *)(a1 + 2_Block_object_dispose((const void *)(v1 - 48), 8) = 1065353216;
  *(_DWORD *)(a1 + 12) = 1065353216;
  return result;
}

id RenderPatchworkWithMesh(void *a1, unsigned __int16 *a2, void *a3)
{
  float v5 = &selRef_sortPatchworkAscendingVertical_;
  if (*((_BYTE *)a2 + 2)) {
    float v5 = &selRef_sortPatchworkAscendingHorizontal_;
  }
  id v6 = [a1 sortedArrayUsingSelector:*v5];
  __int128 v70 = 0u;
  __int128 v71 = 0u;
  __int128 v72 = 0u;
  __int128 v73 = 0u;
  id obj = v6;
  id result = [v6 countByEnumeratingWithState:&v70 objects:v95 count:16];
  if (result)
  {
    id v8 = result;
    char v64 = 0;
    uint64_t v9 = *(void *)v71;
    float v10 = @"rectangle";
    double v11 = 2.0;
    while (1)
    {
      float v12 = 0LL;
      do
      {
        if (*(void *)v71 != v9) {
          objc_enumerationMutation(obj);
        }
        float v13 = *(void **)(*((void *)&v70 + 1) + 8LL * (void)v12);
        objc_msgSend(objc_msgSend(v13, "objectForKey:", v10), "CGRectValue");
        double v15 = v14;
        double v17 = v16;
        double v19 = v18;
        double v21 = v20;
        double v22 = v18 / v20;
        objc_msgSend(objc_msgSend(v13, "objectForKey:", @"referenceAspectRatio"), "floatValue");
        if (v23 == 0.0) {
          double v24 = v22;
        }
        else {
          double v24 = v23;
        }
        float v25 = v15;
        float v26 = v15 + v19;
        float v27 = v17;
        float v28 = v17 + v21;
        float v29 = v11 / v19;
        float v30 = v24 * v29;
        if (v24 >= v22) {
          float v33 = 1.0;
        }
        else {
          float v33 = v24 / v22;
        }
        if (v24 >= v22) {
          float v34 = v22 / v24;
        }
        else {
          float v34 = 1.0;
        }
        if (v24 >= v22) {
          float v30 = v11 / v21;
        }
        float v65 = v30;
        float v66 = v26;
        if (v24 >= v22)
        {
          float v31 = v11 / v21;
          float v32 = v31 / v24;
          float v29 = v32;
        }

        float v67 = v25;
        float v68 = v29;
        if (*((_BYTE *)a2 + 2)) {
          float v35 = v25;
        }
        else {
          float v35 = v27;
        }
        if (*((_BYTE *)a2 + 2)) {
          float v36 = v26;
        }
        else {
          float v36 = v28;
        }
        if (*((float *)a2 + 1) < v36)
        {
          id v37 = v8;
          double v38 = v10;
          id v39 = [v13 objectForKey:@"image"];
          [v39 setClampMode:2];
          *(float *)&double v40 = v24;
          [v39 setOnContext:a3 onTextureUnit:0 withReferenceAspectRatio:&v69 state:v40];
          uint64_t v41 = 0LL;
          uint64_t v42 = *a2 - 1;
          uint64_t v43 = 10LL;
          while (v42 != v41)
          {
            ++v41;
            float v44 = *(float *)&a2[v43];
            v43 += 8LL;
            if (v44 > v35)
            {
              uint64_t v42 = v41 - 1;
              break;
            }
          }

          BOOL v45 = &a2[8 * v42];
          else {
            float v46 = *((float *)v45 + 1);
          }
          unsigned __int8 v47 = objc_msgSend(objc_msgSend(v13, "objectForKey:", @"needsBlend"), "BOOLValue");
          if ((v64 & 1) != 0)
          {
            if ((v47 & 1) != 0)
            {
              char v64 = 1;
              goto LABEL_43;
            }

            uint64_t v48 = 0LL;
LABEL_41:
            v64 ^= 1u;
            [a3 blend:v48];
          }

          else
          {
            if ((v47 & 1) != 0)
            {
              uint64_t v48 = 2LL;
              goto LABEL_41;
            }

            char v64 = 0;
          }

LABEL_43:
          uint64_t v49 = (uint64_t)&a2[8 * v42 + 8];
          uint64_t v50 = v42 - 1;
          do
          {
            float v51 = v46;
            float v52 = *(float *)(v49 + 4);
            if (v36 >= v52) {
              float v46 = *(float *)(v49 + 4);
            }
            else {
              float v46 = v36;
            }
            if (!*(_BYTE *)v49)
            {
              float v53 = *(float *)(v49 - 12);
              if (vabds_f32(v52, v53) > 0.00001)
              {
                float v54 = (float)(v51 - v53) / (float)(v52 - v53);
                float v55 = (float)(v52 - v46) / (float)(v52 - v53);
                float v56 = *(float *)(v49 - 8);
                float v57 = *(float *)(v49 - 4);
                float v58 = *(float *)(v49 + 8);
                float v59 = *(float *)(v49 + 12);
                float v60 = v56 + (float)((float)(v58 - v56) * v54);
                float v61 = v58 + (float)((float)(v56 - v58) * v55);
                float v62 = v59 + (float)((float)(v57 - v59) * v55);
                if (*((_BYTE *)a2 + 2))
                {
                  float v83 = v60;
                  float v84 = v27;
                  float v85 = v57 + (float)((float)(v59 - v57) * v54);
                  float v86 = v61;
                  float v87 = v27;
                  float v88 = v62;
                  float v89 = v60;
                  float v90 = v28;
                  float v91 = v85;
                  float v92 = v61;
                  float v93 = v28;
                  float v94 = v62;
                  float v75 = (float)((float)(v51 - v35) * v68) - v34;
                  float v76 = -v33;
                  float v77 = (float)((float)(v46 - v35) * v68) - v34;
                  float v78 = -v33;
                  float v79 = v75;
                  float v80 = v33;
                  float v81 = v77;
                  float v82 = v33;
                }

                else
                {
                  float v83 = v67;
                  float v84 = v60;
                  float v85 = v57 + (float)((float)(v59 - v57) * v54);
                  float v86 = v67;
                  float v87 = v61;
                  float v88 = v62;
                  float v89 = v66;
                  float v90 = v60;
                  float v91 = v85;
                  float v92 = v66;
                  float v93 = v61;
                  float v94 = v62;
                  float v75 = -v34;
                  float v76 = (float)((float)(v51 - v35) * v65) - v33;
                  float v77 = -v34;
                  float v78 = (float)((float)(v46 - v35) * v65) - v33;
                  float v79 = v34;
                  float v80 = v76;
                  float v81 = v34;
                  float v82 = v78;
                }

                SetLightingColors(v74, &v83, *(float *)[a3 foreColor]);
                [a3 setShader:@"ColoredTexture"];
                [a3 setVertex3DPointer:&v83];
                [a3 setTextureCoordinatesPointer:&v75 onTextureUnit:0];
                [a3 setColorsPointer:v74];
                [a3 drawTriangleStripFromOffset:0 count:4];
                [a3 unsetColorsPointer];
                [a3 unsetTextureCoordinatesPointerOnTextureUnit:0];
                [a3 unsetVertexPointer];
                [a3 unsetShader];
              }
            }

            v49 += 16LL;
          }

          while (v46 < v36);
          [v39 unsetOnContext:a3 onTextureUnit:0 state:&v69];
          float v10 = v38;
          id v8 = v37;
          double v11 = 2.0;
        }

        float v12 = (char *)v12 + 1;
      }

      while (v12 != v8);
      id result = [obj countByEnumeratingWithState:&v70 objects:v95 count:16];
      id v8 = result;
      if (!result)
      {
        if ((v64 & 1) != 0) {
          return [a3 blend:0];
        }
        return result;
      }
    }
  }

  return result;
}

          unsigned __int8 v47 = v37 + 1;
          uint64_t v48 = &v61[8 * v37];
          do
          {
            if (--v47 < 1) {
              break;
            }
            uint64_t v49 = v36;
            uint64_t v50 = *((float *)v48 - 4);
            if (v35 >= v50) {
              float v36 = v35;
            }
            else {
              float v36 = *((float *)v48 - 4);
            }
            if (!*((_BYTE *)v48 + 12))
            {
              float v51 = *(float *)v48;
              if (vabds_f32(*(float *)v48, v50) > 0.00001)
              {
                float v52 = v51 - v50;
                float v53 = (float)(v36 - v50) / (float)(v51 - v50);
                float v54 = (float)(v51 - v49) / v52;
                float v55 = *((float *)v48 - 3);
                float v56 = *((float *)v48 - 2);
                float v57 = *((float *)v48 + 1);
                float v58 = *((float *)v48 + 2);
                float v59 = v55 + (float)((float)(v57 - v55) * v53);
                float v60 = v57 + (float)((float)(v55 - v57) * v54);
                if (*((_BYTE *)a2 + 2))
                {
                  float v82 = v59;
                  float v83 = v26;
                  float v84 = v56 + (float)((float)(v58 - v56) * v53);
                  float v85 = v60;
                  float v86 = v26;
                  float v87 = v58 + (float)((float)(v56 - v58) * v54);
                  float v88 = v59;
                  float v89 = v27;
                  float v90 = v84;
                  float v91 = v60;
                  float v92 = v27;
                  float v93 = v87;
                  CGRect v74 = (float)((float)(v36 - v35) * v66) - v67;
                  float v75 = -v33;
                  float v76 = (float)((float)(v49 - v35) * v66) - v67;
                  float v77 = -v33;
                  float v78 = v74;
                  float v79 = v33;
                  float v80 = v76;
                  float v81 = v33;
                }

                else
                {
                  float v82 = v65;
                  float v83 = v59;
                  float v84 = v56 + (float)((float)(v58 - v56) * v53);
                  float v85 = v65;
                  float v86 = v60;
                  float v87 = v58 + (float)((float)(v56 - v58) * v54);
                  float v88 = v25;
                  float v89 = v59;
                  float v90 = v84;
                  float v91 = v25;
                  float v92 = v60;
                  float v93 = v87;
                  CGRect v74 = -v67;
                  float v75 = (float)((float)(v36 - v35) * v64) - v33;
                  float v76 = -v67;
                  float v77 = (float)((float)(v49 - v35) * v64) - v33;
                  float v78 = v67;
                  float v79 = v75;
                  float v80 = v67;
                  float v81 = v77;
                }

                SetLightingColors(v73, &v82, *(float *)[a3 foreColor]);
                [a3 setShader:@"ColoredTexture"];
                [a3 setVertex3DPointer:&v82];
                [a3 setTextureCoordinatesPointer:&v74 onTextureUnit:0];
                [a3 setColorsPointer:v73];
                [a3 drawTriangleStripFromOffset:0 count:4];
                [a3 unsetColorsPointer];
                [a3 unsetTextureCoordinatesPointerOnTextureUnit:0];
                [a3 unsetVertexPointer];
                [a3 unsetShader];
              }
            }

            v48 -= 8;
          }

          while (v36 > v35);
          [v40 unsetOnContext:a3 onTextureUnit:0 state:&v68];
          id v8 = v39;
          float v10 = 2.0;
        }

        double v11 = (char *)v11 + 1;
      }

      while (v11 != v8);
      id result = [obj countByEnumeratingWithState:&v69 objects:v94 count:16];
      id v8 = result;
      if (!result)
      {
        if ((v63 & 1) != 0) {
          return [a3 blend:0];
        }
        return result;
      }
    }
  }

  return result;
}

    uint64_t v9 = (NSMutableArray *)(v17 + 3);
LABEL_53:
    float v27 = v16++ < (uint64_t)obj;
  }

  while (v27);
  *(NSMutableArray **)((char *)&self->mLastLayout + 1) = v9;
  float v57 = *(NSMutableArray **)((char *)&self->mFirstLayout + 1);
  if (v57) {
    float v58 = [v57 mutableCopy];
  }
  else {
    float v58 = +[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array");
  }
  obja = v58;
  float v59 = v223;
  else {
    double v227 = 0LL;
  }
  float v60 = (char *)-[NSMutableArray count](v223, "count");
  float v61 = +[NSMutableIndexSet indexSet](&OBJC_CLASS___NSMutableIndexSet, "indexSet");
  double v217 = +[NSMutableIndexSet indexSet](&OBJC_CLASS___NSMutableIndexSet, "indexSet");
  float v212 = v60;
  if ((uint64_t)v60 >= 1)
  {
    float v62 = 0LL;
    uint64_t v63 = 0LL;
    char v64 = 0;
    float v65 = v13;
    float v66 = v13 - 1;
    float v67 = a5 + a5;
    v208 = -1LL;
    double v209 = -1LL;
    int v210 = v61;
    while (1)
    {
      if (v62 >= 10)
      {
        float v68 = [v61 count];
        char v69 = (v64 & 1) == 0;
        if (v68)
        {
          __int128 v70 = v208;
          if ((v64 & 1) == 0) {
            __int128 v70 = v227;
          }
          __int128 v71 = v209;
          if ((v64 & 1) == 0) {
            __int128 v71 = (uint64_t)v63;
          }
          v208 = v70;
          double v209 = v71;
          uint64_t v63 = (char *)[v61 firstIndex];
          double v227 = (uint64_t)[v217 firstIndex];
          objc_msgSend(v217, "removeIndex:");
          [v61 removeIndex:v63];
          char v64 = 1;
        }

        else
        {
          char v64 = 0;
          if (!v69) {
            uint64_t v63 = (char *)v209;
          }
          __int128 v72 = v227;
          if (!v69) {
            __int128 v72 = v208;
          }
          double v227 = v72;
        }
      }

      double v221 = v63;
      __int128 v73 = (char *)objc_msgSend(-[NSMutableArray objectAtIndex:](v59, "objectAtIndex:", v63), "integerValue");
      CGRect v74 = *(uint64_t *)((char *)&self->mTiming + 1);
      double v215 = v62;
      double v216 = v64;
      if (v62 > 9) {
        break;
      }
      if (v74) {
        goto LABEL_197;
      }
      float v75 = v227;
      if (v227 >= v65) {
        float v75 = v227 % v65 + *(int64_t *)((char *)&self->mLastSlideIndex + 1);
      }
      float v76 = -[MREffectShiftingTiles _widthForLayout:](self, "_widthForLayout:", v73);
      float v77 = objc_alloc_init(&OBJC_CLASS___MRShiftingTilesIteration);
      v77->layout = (int64_t)v73;
      v77->age = 0LL;
      if ((unint64_t)(v73 - 5) <= 1)
      {
        -[MREffectShiftingTiles _aspectRatioForSlideIndex:](self, "_aspectRatioForSlideIndex:", v75);
        *(float *)&float v78 = v78 / v67 * 5.0;
        float v79 = floorf(*(float *)&v78);
        if (v79 < 5.0) {
          float v79 = 5.0;
        }
        v77->CGFloat width = v79;
      }

      v62 += v76;
      v77->slideIndeCGFloat x = v75;
      [obja addObject:v77];

      double v218 = 0LL;
      v227 += -[MREffectShiftingTiles _slideCountForLayout:](self, "_slideCountForLayout:", v73);
      float v59 = v223;
LABEL_300:
      if (v62 >= 11 && !*(NSMutableArray **)((char *)&self->mTiming + 1))
      {
        do
        {
          double v169 = [obja count];
          if ((v62 & 1) != 0)
          {
            double v236 = 0uLL;
            double v237 = 0uLL;
            double v234 = 0uLL;
            double v235 = 0uLL;
            double v177 = [obja reverseObjectEnumerator];
            double v178 = [v177 countByEnumeratingWithState:&v234 objects:v271 count:16];
            if (v178)
            {
              double v179 = v178;
              double v173 = v62;
              double v180 = *(void *)v235;
LABEL_314:
              double v175 = 0LL;
              double v181 = (_BYTE *)(v169 - v179);
              while (1)
              {
                if (*(void *)v235 != v180) {
                  objc_enumerationMutation(v177);
                }
                if ((*(void *)(*(void *)(*((void *)&v234 + 1) + 8 * v175) + 8LL) | 2LL) == 2) {
                  goto LABEL_321;
                }
                if (v179 == (_BYTE *)++v175)
                {
                  double v179 = [v177 countByEnumeratingWithState:&v234 objects:v271 count:16];
                  double v169 = v181;
                  if (v179) {
                    goto LABEL_314;
                  }
LABEL_320:
                  float v59 = v223;
                  float v62 = v173;
                  break;
                }
              }
            }
          }

          else
          {
            double v232 = 0uLL;
            double v233 = 0uLL;
            double v230 = 0uLL;
            double v231 = 0uLL;
            double v170 = [obja reverseObjectEnumerator];
            double v171 = [v170 countByEnumeratingWithState:&v230 objects:v270 count:16];
            if (v171)
            {
              double v172 = v171;
              double v173 = v62;
              double v174 = *(void *)v231;
LABEL_305:
              double v175 = 0LL;
              double v176 = (_BYTE *)(v169 - v172);
              while (1)
              {
                if (*(void *)v231 != v174) {
                  objc_enumerationMutation(v170);
                }
                if (*(void *)(*(void *)(*((void *)&v230 + 1) + 8 * v175) + 8LL) == 1LL) {
                  break;
                }
                if (v172 == (_BYTE *)++v175)
                {
                  double v172 = [v170 countByEnumeratingWithState:&v230 objects:v270 count:16];
                  double v169 = v176;
                  if (v172) {
                    goto LABEL_305;
                  }
                  goto LABEL_320;
                }
              }

    float v90 = 0u;
    float v91 = 0u;
    float v88 = 0u;
    float v89 = 0u;
    float v86 = [Scenario0 countByEnumeratingWithState:&v88 objects:v92 count:16];
    if (!v86)
    {
      float v33 = mDefaultMainDuration;
      goto LABEL_94;
    }

    float v32 = *(void *)v89;
    float v33 = mDefaultMainDuration;
    float v80 = *(void *)v89;
    float v81 = Scenario0;
    float v82 = v19;
    do
    {
      float v34 = 0LL;
      do
      {
        if (*(void *)v89 != v32) {
          objc_enumerationMutation(Scenario0);
        }
        float v35 = *(void *)(*((void *)&v88 + 1) + 8LL * (void)v34);
        float v36 = *(_BYTE *)(v35 + 8) + v19;
        id v37 = *(char *)(v35 + 9);
        if (v36 <= 6u && (*(_BYTE *)(v35 + 9) + 3) <= 3u)
        {
          id v39 = (v37 + 3);
          double v40 = *(unsigned __int8 *)(v35 + 10);
          if (v40 == 8)
          {
            uint64_t v41 = mDefaultMainDuration + *(double *)(v35 + 16) * 0.7;
            uint64_t v42 = *(double *)(v35 + 24) * 0.7;
            uint64_t v43 = v36;
            if (v37 < 0)
            {
              BOOL v45 = v87;
              float v52 = (double *)[objc_alloc(p_cache + 393) initWithSlideIndex:v87 x:v43 y:v39 + 1 birthType:8 birthStart:v41 birthDuration:v42];
              float v44 = v41 + v42;
              v52[3] = v44;
              [*(id *)(&v9->super._isInInteractiveMode + 1) addObject:v52];
            }

            else
            {
              float v44 = v41 + v42;
              BOOL v45 = v87;
            }

            float v53 = (NSMutableArray *)[objc_alloc(p_cache + 393) initWithSlideIndex:v45 x:v43 y:v39 birthType:0 birthStart:v44 birthDuration:0.0];
            float v87 = (v45 - location + 1) % length + location;
            *(NSMutableArray **)((char *)&(&(&v9->_slideStories)[4 * v43])[v39] + 1) = v53;
            [*(id *)(&v9->super._isInInteractiveMode + 1) addObject:v53];

            float v51 = a3 - 1;
            if (a3 == 1)
            {
              a3 = 0LL;
              goto LABEL_86;
            }

            goto LABEL_63;
          }

          float v83 = a3;
          float v46 = (char *)&v9->_slideStories + 1;
          unsigned __int8 v47 = (MREffectCoverCascadeSlideStory **)((char *)&(&(&v9->_slideStories)[4 * v36])[v39] + 1);
          uint64_t v48 = *v47;
          v48->deathType = v40;
          v48->deathStart = mDefaultMainDuration + *(double *)(v35 + 16) * 0.7;
          if ((v40 - 6) >= 2)
          {
            if (v40 == 5)
            {
              uint64_t v50 = (double)((uint64_t)[v78 randomInt] % 2000 - 1000) * 0.001 * 15.0;
              v48->deathParameter = v50;
              v48->deathDuration = *(double *)(v35 + 24) * 0.7;
              uint64_t v49 = -[MREffectCoverCascadeSlideStory initWithSlideIndex:x:y:birthType:birthStart:birthDuration:]( objc_alloc(&OBJC_CLASS___MREffectCoverCascadeSlideStory),  "initWithSlideIndex:x:y:birthType:birthStart:birthDuration:",  v87,  v36,  v39,  0LL,  v48->deathStart,  0.0);
              float v87 = (v87 - location + 1) % length + location;
              *unsigned __int8 v47 = v49;
              uint64_t v9 = v79;
              goto LABEL_59;
            }

            v48->deathDuration = 0.77;
            float v54 = -[MREffectCoverCascadeSlideStory initWithSlideIndex:x:y:birthType:birthStart:birthDuration:]( objc_alloc(&OBJC_CLASS___MREffectCoverCascadeSlideStory),  "initWithSlideIndex:x:y:birthType:birthStart:birthDuration:",  v87,  v36,  v39,  0LL,  v48->deathStart,  0.0);
            float v55 = (v87 - location + 1) % length;
            float v87 = v55 + location;
            *unsigned __int8 v47 = v54;
            uint64_t v9 = v79;
            [*(id *)(&v79->super._isInInteractiveMode + 1) addObject:v54];

            float v51 = v83 - 1;
            if (v83 == 1) {
              goto LABEL_84;
            }
            float v56 = v36 - 1;
            if (((v48->deathType - 1) & 1) == 0) {
              float v56 = v36 + 1;
            }
            float v57 = ((v48->deathType - 1) & 2) != 0 ? v39 - 1 : v39 + 1;
            if (v56 <= 6u && v57 <= 3u)
            {
              float v59 = v56;
              float v60 = v57;
              float v61 = &v46[32 * v56];
              float v62 = *(void *)&v61[8 * v57];
              *(_BYTE *)(v62 + 67) = 0;
              *(double *)(v62 + 24) = v48->deathStart + v48->deathDuration;
              *(void *)(v62 + 32) = 0LL;
              uint64_t v63 = 5 - v48->deathType;
              char v64 = objc_alloc(&OBJC_CLASS___MREffectCoverCascadeSlideStory);
              float v65 = v63;
              uint64_t v9 = v79;
              float v66 = -[MREffectCoverCascadeSlideStory initWithSlideIndex:x:y:birthType:birthStart:birthDuration:]( v64,  "initWithSlideIndex:x:y:birthType:birthStart:birthDuration:",  v87,  v59,  v60,  v65,  v48->deathStart,  v48->deathDuration);
              float v67 = v66;
              float v68 = v55 + 1 == length ? 0LL : v55 + 1;
              float v87 = v68 + location;
              *(void *)&v61[8 * v60] = v66;
              [*(id *)(&v79->super._isInInteractiveMode + 1) addObject:v66];

              float v51 = v83 - 2;
              if (v83 == 2)
              {
LABEL_84:
                a3 = 0LL;
                p_cache = (objc_class *)(&OBJC_METACLASS___SYNMediaWallCollectionViewCellMainView2 + 16);
LABEL_86:
                LOBYTE(v19) = v82;
                goto LABEL_87;
              }
            }
          }

          else
          {
            v48->deathDuration = *(double *)(v35 + 24) * 0.7;
            uint64_t v49 = -[MREffectCoverCascadeSlideStory initWithSlideIndex:x:y:birthType:birthStart:birthDuration:]( objc_alloc(&OBJC_CLASS___MREffectCoverCascadeSlideStory),  "initWithSlideIndex:x:y:birthType:birthStart:birthDuration:",  v87,  v36,  v39,  0LL,  v48->deathStart,  0.0);
            float v87 = (v87 - location + 1) % length + location;
            *unsigned __int8 v47 = v49;
LABEL_59:
            [*(id *)(&v9->super._isInInteractiveMode + 1) addObject:v49];

            float v51 = v83 - 1;
            if (v83 == 1) {
              goto LABEL_84;
            }
          }

          p_cache = (objc_class *)(&OBJC_METACLASS___SYNMediaWallCollectionViewCellMainView2 + 16);
LABEL_63:
          LOBYTE(v19) = v82;
          float v33 = mDefaultMainDuration + (*(double *)(v35 + 16) + *(double *)(v35 + 24)) * 0.7;
          a3 = v51;
          float v32 = v80;
          Scenario0 = v81;
        }

        float v34 = (char *)v34 + 1;
      }

      while (v86 != v34);
      char v69 = [Scenario0 countByEnumeratingWithState:&v88 objects:v92 count:16];
      float v86 = v69;
    }

    while (v69);
LABEL_87:
    if (v33 <= mDefaultMainDuration)
    {
      float v7 = &OBJC_IVAR___MPFilter__internal;
    }

    else
    {
      BYTE1(v9->_previousStartTime) = v76;
      BYTE2(v9->_previousStartTime) = v19;
      *(double *)((char *)&v9->_numberOfStoriesRemoved + 1) = mDefaultMainDuration;
      BYTE4(v9->_previousStartTime) = v77;
      float v7 = &OBJC_IVAR___MPFilter__internal;
      if ((v76 - 1) < 2u)
      {
        __int128 v70 = 0;
        goto LABEL_93;
      }

      __int128 v71 = BYTE3(v9->_previousStartTime);
      if (v71 <= 0xE)
      {
        __int128 v70 = v71 + 1;
LABEL_93:
        BYTE3(v9->_previousStartTime) = v70;
      }
    }

      ++v26;
      ++v25;
      if (!--a2) {
        goto LABEL_44;
      }
    }

    float v28 = powf(v27, *v26);
LABEL_42:
    *float v25 = v28;
    goto LABEL_43;
  }

  if (v19) {
    operator delete[](v19);
  }
  if (v18) {
    operator delete[](v18);
  }
  return 0LL;
}

          double v22 = (char *)v22 + 1;
        }

        while (v19 != v22);
        double v40 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v44, v52, 16, v29);
        double v19 = v40;
        v20 += (int)v22;
      }

      while (v40);
    }

            if (!v37 || !v26) {
              return v38;
            }
            +[MCAnimationPathKeyframed timeForKeyframe:withPlugTiming:]( &OBJC_CLASS___MCAnimationPathKeyframed,  "timeForKeyframe:withPlugTiming:",  v26,  v11);
            float v53 = v52;
            [v11 fullDuration];
            float v55 = v53 / v54;
            float v57 = objc_opt_class(&OBJC_CLASS___MCAnimationKeyframeFunction, v56);
            if ((objc_opt_isKindOfClass(v26, v57) & 1) == 0)
            {
              [v26 value];
LABEL_63:
              float v58 = v62;
              goto LABEL_64;
            }

            float v58 = a5;
            if ([v26 function])
            {
              float v59 = (NSMutableDictionary *)qword_2B06B8;
              if (!qword_2B06B8)
              {
                float v59 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
                qword_2B06B8 = (uint64_t)v59;
              }

              float v60 = (MUMathExpressionFloatBased *)-[NSMutableDictionary objectForKey:]( v59,  "objectForKey:",  [v26 function]);
              if (v60)
              {
                float v61 = v60;
                -[MUMathExpressionFloatBased resetAllVariables](v60, "resetAllVariables");
LABEL_56:
                char v64 = [v26 functionParameters];
                if (v64) {
                  -[MUMathExpressionFloatBased setVariableValues:](v61, "setVariableValues:", v64);
                }
                if (a6) {
                  -[MUMathExpressionFloatBased setVariableValues:](v61, "setVariableValues:", a6);
                }
                [v26 functionTimeOffset];
                *(float *)&float v65 = v65;
                -[MUMathExpressionFloatBased setValue:forVariable:](v61, "setValue:forVariable:", @"time", v65);
                if (v15)
                {
                  *(float *)&float v66 = v58;
                  -[MUMathExpressionFloatBased setValue:forVariable:]( v61,  "setValue:forVariable:",  @"startValue",  v66);
                }

                -[MUMathExpressionFloatBased evaluate](v61, "evaluate");
                goto LABEL_63;
              }

              uint64_t v63 = -[MUMathExpressionFloatBased initWithString:error:]( [MUMathExpressionFloatBased alloc],  "initWithString:error:",  [v26 function],  0);
              if (v63)
              {
                float v61 = v63;
                objc_msgSend((id)qword_2B06B8, "setObject:forKey:", v63, objc_msgSend(v26, "function"));

                goto LABEL_56;
              }
            }

id RenderPatchworkWithMeshInverted(void *a1, unsigned __int16 *a2, void *a3)
{
  float v5 = &selRef_sortPatchworkDescendingVertical_;
  if (*((_BYTE *)a2 + 2)) {
    float v5 = &selRef_sortPatchworkDescendingHorizontal_;
  }
  id v6 = [a1 sortedArrayUsingSelector:*v5];
  __int128 v69 = 0u;
  __int128 v70 = 0u;
  __int128 v71 = 0u;
  __int128 v72 = 0u;
  id obj = v6;
  id result = [v6 countByEnumeratingWithState:&v69 objects:v94 count:16];
  if (result)
  {
    id v8 = result;
    char v63 = 0;
    uint64_t v9 = *(void *)v70;
    float v61 = a2 + 2;
    double v10 = 2.0;
    while (1)
    {
      double v11 = 0LL;
      do
      {
        if (*(void *)v70 != v9) {
          objc_enumerationMutation(obj);
        }
        float v12 = *(void **)(*((void *)&v69 + 1) + 8LL * (void)v11);
        objc_msgSend(objc_msgSend(v12, "objectForKey:", @"rectangle", v61), "CGRectValue");
        double v14 = v13;
        double v16 = v15;
        double v18 = v17;
        double v20 = v19;
        double v21 = v17 / v19;
        objc_msgSend(objc_msgSend(v12, "objectForKey:", @"referenceAspectRatio"), "floatValue");
        if (v22 == 0.0) {
          double v23 = v21;
        }
        else {
          double v23 = v22;
        }
        float v24 = v14;
        float v25 = v14 + v18;
        float v26 = v16;
        float v27 = v16 + v20;
        float v28 = v10 / v18;
        float v29 = v23 * v28;
        if (v23 >= v21)
        {
          float v33 = 1.0;
        }

        else
        {
          float v30 = v23 / v21;
          float v33 = v30;
        }

        if (v23 >= v21) {
          float v34 = v21 / v23;
        }
        else {
          float v34 = 1.0;
        }
        if (v23 >= v21) {
          float v29 = v10 / v20;
        }
        float v64 = v29;
        float v65 = v24;
        if (v23 >= v21)
        {
          float v31 = v10 / v20;
          float v32 = v31 / v23;
          float v28 = v32;
        }

        float v66 = v28;
        float v67 = v34;
        if (*((_BYTE *)a2 + 2)) {
          float v35 = v24;
        }
        else {
          float v35 = v26;
        }
        if (*((_BYTE *)a2 + 2)) {
          float v36 = v25;
        }
        else {
          float v36 = v27;
        }
        uint64_t v37 = *a2;
        int v38 = v37 - 1;
        if (*(float *)&a2[8 * v37 - 6] > v35)
        {
          id v39 = v8;
          id v40 = [v12 objectForKey:@"image"];
          [v40 setClampMode:2];
          *(float *)&double v41 = v23;
          [v40 setOnContext:a3 onTextureUnit:0 withReferenceAspectRatio:&v68 state:v41];
          uint64_t v42 = (float *)&a2[8 * v38 - 6];
          while (1)
          {
            LODWORD(v37) = v37 - 1;
            float v43 = *v42;
            v42 -= 4;
            if (v43 < v36) {
              goto LABEL_33;
            }
          }

          LODWORD(v37) = v38 & (v38 >> 31);
LABEL_33:
          float v44 = &a2[8 * (int)v37];
          unsigned __int8 v45 = objc_msgSend(objc_msgSend(v12, "objectForKey:", @"needsBlend"), "BOOLValue");
          if ((v63 & 1) != 0)
          {
            if ((v45 & 1) != 0)
            {
              char v63 = 1;
              goto LABEL_43;
            }

            uint64_t v46 = 0LL;
LABEL_41:
            v63 ^= 1u;
            [a3 blend:v46];
          }

          else
          {
            if ((v45 & 1) != 0)
            {
              uint64_t v46 = 1LL;
              goto LABEL_41;
            }

            char v63 = 0;
          }

float *Antialias1D(uint64_t a1, uint64_t a2, uint64_t a3, float *a4, uint64_t a5, float a6, float a7)
{
  float v7 = a4[5];
  float v9 = a4[2];
  float v8 = a4[3];
  float v10 = *a4;
  if (v8 == *a4)
  {
    float v11 = vabds_f32(a4[4], a4[1]);
    float v12 = a4[6] - v10;
    uint64_t v13 = 9LL;
  }

  else
  {
    float v11 = vabds_f32(v8, v10);
    float v10 = a4[1];
    float v12 = a4[7] - v10;
    uint64_t v13 = 10LL;
  }

  float v14 = fabsf(v12);
  float v15 = 0.0;
  float v16 = 0.0;
  if ((float)(v7 - v9) != 0.0)
  {
    float v17 = vabds_f32(v7, v9);
    float v18 = fabsf(a4[v13]);
    float v19 = v17 + v17;
    float v20 = v11 / (float)(fabsf(v10) + 1.0);
    if (v20 < v17) {
      float v20 = v17;
    }
    float v15 = v19 / v20;
    float v21 = v11 / (float)(v18 + 1.0);
    if (v21 >= v17) {
      float v17 = v21;
    }
    float v16 = v19 / v17;
  }

  float v22 = v14 * a6;
  float v23 = (float)((float)(v15 * 0.6) + 0.25) / (float)(v14 * a6);
  for (uint64_t i = 6LL; i != 12; ++i)
  {
    float v25 = (float *)(a1 + i * 4);
    *(v25 - 6) = a4[i - 6] - (float)((float)(a4[i] - a4[i - 6]) * v23);
    v25[12] = a4[i]
    *float v25 = a4[i - 6];
    v25[6] = a4[i];
  }

  uint64_t v26 = 0LL;
  uint64_t v27 = a5 + 16;
  do
  {
    float v28 = (_DWORD *)(a2 + 16 + v26);
    *(v28 - 4) = *(_DWORD *)(a5 + v26);
    v28[8] = *(_DWORD *)(v27 + v26);
    *float v28 = *(_DWORD *)(a5 + v26);
    v28[4] = *(_DWORD *)(v27 + v26);
    v26 += 4LL;
  }

  while (v26 != 16);
  *(_OWORD *)(a3 + 96) = 0u;
  *(_OWORD *)(a3 + 112) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 80) = 0u;
  *(_OWORD *)(a3 + 4_Block_object_dispose((const void *)(v1 - 48), 8) = 0u;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  return SetLightingColors((float *)(a3 + 32), a4, a7);
}

void DoWobble(float *a1, float *a2, double a3)
{
  if (a3 > 1.0) {
    a3 = 1.0;
  }
  float v4 = a3 * (a3 + a3 * 1.33333337 * a3 + 0.666666687) * 1.33333337;
  *a1 = v4;
  float v5 = (a3 + 0.5) * 3.14159274;
  float v6 = sqrt((float)((float)(sinf(v5) + 1.0) * 0.5)) + 0.00001;
  if (v4 > 0.0) {
    float v6 = (float)(sinf(v4 * 3.1416) * v6) / (float)(v4 + (float)((float)(v4 * 0.5) * v4));
  }
  *a2 = v6;
}

void DoWobbleSlow(float *a1, float *a2, double a3)
{
  if (a3 > 1.0) {
    a3 = 1.0;
  }
  float v4 = a3 * (a3 + a3 * 0.666666687 * a3 + 1.33333337) * 1.33333337;
  *a1 = v4;
  float v5 = (a3 + 0.5) * 3.14159274;
  float v6 = sqrt((float)((float)(sinf(v5) + 1.0) * 0.5)) + 0.00001;
  if (v4 <= 0.0) {
    float v7 = v6 * 3.1416;
  }
  else {
    float v7 = (float)(sinf(v4 * 3.1416) * v6) / (float)(v4 + (float)((float)(v4 * 0.5) * v4));
  }
  *a2 = v7;
}

float32x4_t MyGLRectFromString(void *a1, float32x4_t *a2)
{
  if (a1)
  {
    sscanf( (const char *)[a1 UTF8String],  "{{%lf, %lf}, {%lf, %lf}}",  &v15,  &v15.f64[1],  &v16,  &v16.f64[1]);
    __asm { FMOV            V2.2D, #0.5 }

    float64x2_t v8 = vmulq_f64(v16, _Q2);
    *(float32x2_t *)&_Q2.f64[0] = vcvt_f32_f64(v8);
    float64x2_t v9 = vcvtq_f64_f32(*(float32x2_t *)&_Q2.f64[0]);
    float32x4_t v10 = vcvt_hight_f32_f64(*(int32x2_t *)&_Q2.f64[0], v8);
    float64x2_t v11 = vaddq_f64(v15, v9);
    float32x4_t v12 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v11), v11);
    float32x4_t result = vmlaq_f32(v12, *a2, v10);
    float32x4_t v14 = vmlaq_f32(v12, a2[1], v10);
    *a2 = result;
    a2[1] = v14;
  }

  return result;
}

void sub_D2750(_Unwind_Exception *a1)
{
}

void sub_D2D14(_Unwind_Exception *a1)
{
}

void sub_D3888(_Unwind_Exception *a1)
{
}

void sub_D3978(_Unwind_Exception *a1)
{
}

LABEL_22:
    BYTE1(self->mMaxTextSize.height) = 1;
  }

  mPhaseInDuration = self->super.mPhaseInDuration;
  mMainDuration = self->super.mMainDuration;
  mPhaseOutDuration = self->super.mPhaseOutDuration;
  v88.receiver = self;
  v88.super_class = (Class)&OBJC_CLASS___MREffectSlidingPanels;
  uint64_t v26 = -[MREffect prerenderForTime:inContext:withArguments:]( &v88,  "prerenderForTime:inContext:withArguments:",  a4,  a5,  a3);
  if (!-[MRLayer isActivated](self->super.mEffectLayer, "isActivated")) {
    return v26;
  }
  if (a3 < 1.0) {
    goto LABEL_45;
  }
  uint64_t v27 = mPhaseInDuration + mMainDuration + mPhaseOutDuration;
  float v28 = v27 + -1.0;
  if (v27 + -1.0 <= a3) {
    goto LABEL_45;
  }
  float v86 = 0u;
  float v87 = 0u;
  float v84 = 0u;
  float v85 = 0u;
  float v29 = *(void **)(&self->mIsLoaded + 1);
  float v30 = [v29 countByEnumeratingWithState:&v84 objects:v94 count:16];
  if (v30)
  {
    float v31 = v30;
    float v32 = 0LL;
    float v33 = *(void *)v85;
    do
    {
      for (j = 0LL; j != v31; j = (char *)j + 1)
      {
        if (*(void *)v85 != v33) {
          objc_enumerationMutation(v29);
        }
        v32 += objc_msgSend( objc_msgSend( *(id *)(*((void *)&v84 + 1) + 8 * (void)j),  "objectForKey:",  @"isText"),  "BOOLValue");
      }

      float v31 = [v29 countByEnumeratingWithState:&v84 objects:v94 count:16];
    }

    while (v31);
  }

  else
  {
    float v32 = 0LL;
  }

  float v35 = -[NSDictionary count]( -[MRLayerEffect slideProvidersForElementIDs](self->super.mEffectLayer, "slideProvidersForElementIDs"),  "count");
  float v36 = (uint64_t)[*(id *)(&self->mIsLoaded + 1) count] - v32;
  uint64_t v37 = v35 != 1 && v35 == 2 * v36;
  int v38 = v37;
  if (v37)
  {
    id v39 = (v27 - (double)v36) / (double)(v36 + 1) + 1.0;
    id v40 = a3 / v39;
    double v41 = a3 - ((double)(uint64_t)vcvtms_s32_f32(v40) * v39 + -1.0);
    if (v41 < 0.0 || v41 > 1.1)
    {
      float v44 = v41 > v39 + -0.25;
      goto LABEL_52;
    }

            LOBYTE(v9) = [v16 isLoaded];
            continue;
          }

          [v16 showDuration];
          if (v21 >= 0.0)
          {
            LOBYTE(v9) = (v21 >= 0.0) & v9;
            continue;
          }

          float v22 = v9 ^ 1;
          LOBYTE(v9) = (v21 >= 0.0) & v9;
          if ((v22 & 1) == 0) {
            goto LABEL_22;
          }
        }
      }

      uint64_t v13 = [v11 countByEnumeratingWithState:&v25 objects:v33 count:16];
    }

    while (v13);
  }

  if ((v9 & 1) != 0 && !self->super.mNeedsToUpdateTexts)
  {
    float v23 = [*(id *)&self->mIsRotating isLoaded];
    if (v23)
    {
      float v23 = [*(id *)((char *)&self->mTextBackground + 1) isLoaded];
      if (v23)
      {
        float v23 = [*(id *)((char *)&self->mQuoteOpen + 1) isLoaded];
        if (v23)
        {
          float v23 = [*(id *)((char *)&self->mQuoteClose + 1) isLoaded];
          if (v23)
          {
            float v23 = [*(id *)((char *)&self->mQuoteBox + 1) isLoaded];
            if (v23) {
              LOBYTE(v23) = [*(id *)((char *)&self->mWeatherWindowMask + 1) isLoaded];
            }
          }
        }
      }
    }
  }

  else
  {
    LOBYTE(v23) = 0;
  }

  return v23;
}

  float v23 = v16;
  float v24 = a2 & 0xC0;
  switch(v24)
  {
    case 192:
      float v23 = v17 * v23;
      break;
    case 128:
      float v25 = v23 + -1.0;
      uint64_t v26 = v17;
      uint64_t v27 = 1.0;
      goto LABEL_28;
    case 64:
      float v25 = v23 + 1.0;
      uint64_t v26 = v17;
      uint64_t v27 = -1.0;
LABEL_28:
      float v23 = v27 + v25 * v26;
      break;
  }

  *a1 = v6;
  a1[1] = v18 / a4;
  float32x4_t result = (float)(v23 - v18) / a4;
  a1[2] = (float)(v15 - v6);
  a1[3] = result;
  return result;
}

LABEL_76:
          if ((uint64_t)++v49 >= v48)
          {
            uint64_t v26 = 1;
            break;
          }
        }
      }
    }
  }

  __int128 v73 = [a5 preloadQueue];
  if (v44) {
    goto LABEL_47;
  }
  if ([v73 operationCount]
    && !-[MRLayerEffect asynchronousOperationsAreSuspended]( self->super.mEffectLayer,  "asynchronousOperationsAreSuspended"))
  {
    float v82 = 0u;
    float v83 = 0u;
    float v80 = 0u;
    float v81 = 0u;
    float v74 = -[NSDictionary objectEnumerator]( -[MRLayerEffect slideProvidersForElementIDs](self->super.mEffectLayer, "slideProvidersForElementIDs"),  "objectEnumerator");
    float v75 = -[NSEnumerator countByEnumeratingWithState:objects:count:]( v74,  "countByEnumeratingWithState:objects:count:",  &v80,  v93,  16LL);
    if (v75)
    {
      float v76 = v75;
      float v77 = *(void *)v81;
LABEL_85:
      float v78 = 0LL;
      while (1)
      {
        if (*(void *)v81 != v77) {
          objc_enumerationMutation(v74);
        }
        float v79 = *(void **)(*((void *)&v80 + 1) + 8 * v78);
        if ([v79 canPlay])
        {
        }

        if (v76 == (id)++v78)
        {
          float v76 = -[NSEnumerator countByEnumeratingWithState:objects:count:]( v74,  "countByEnumeratingWithState:objects:count:",  &v80,  v93,  16LL);
          if (v76) {
            goto LABEL_85;
          }
          goto LABEL_92;
        }
      }
    }

    else
    {
LABEL_92:
      -[MRLayerEffect _stallRenderer](self->super.mEffectLayer, "_stallRenderer");
    }

    if (!-[MRLayerEffect asynchronousOperationsAreSuspended]( self->super.mEffectLayer,  "asynchronousOperationsAreSuspended")) {
      return v26;
    }
  }

  else if (!-[MRLayerEffect asynchronousOperationsAreSuspended]( self->super.mEffectLayer,  "asynchronousOperationsAreSuspended"))
  {
    return v26;
  }

  uint64_t v42 = 0LL;
LABEL_49:
  -[MRLayerEffect suspendAsynchronousOperations:](self->super.mEffectLayer, "suspendAsynchronousOperations:", v42);
  return v26;
}

    float v18 = v41;
    if (v42)
    {
LABEL_77:
      if ((a5 & 1) != 0) {
        goto LABEL_78;
      }
LABEL_40:
      Width = (double)CGImageGetWidth(v42);
      Height = CGImageGetHeight(v42);
      int v47 = (double)Height;
      if (v80 <= 4u) {
        uint64_t v48 = Width;
      }
      else {
        uint64_t v48 = (double)Height;
      }
      if (v80 > 4u) {
        int v47 = Width;
      }
      float v49 = a8 * v48;
      float v50 = a8 * v48 / a7 - v47;
      float v51 = a7 * v47 / v48;
      if (v47 > a8) {
        float v50 = v51 - a8;
      }
      if (fabs(v50) >= 2.0)
      {
        if (v48 >= a7 * 1.5)
        {
          if (a7 * v47 <= v49)
          {
            uint64_t v48 = v49 / v47;
            float v51 = a8;
            a7 = v49 / v47;
          }

          else
          {
            uint64_t v48 = a7;
            a8 = v51;
          }

LABEL_181:
        double v136 = ImageKey(v110);
        double v137 = -[NSDictionary objectForKey:](v259, "objectForKey:", v136);
        double v138 = -[MREffect isInInteractiveMode](self, "isInInteractiveMode");
        if (v102)
        {
          double v252 = v77;
          double v243 = a3;
          if (v138) {
            float v96 = *(double *)((char *)&self->mExitCurve + 1);
          }
          double v139 = [v137 retainedByUserRenderedImageAtTime:a4 inContext:a5 withArguments:v96];
          double v141 = *((double *)&v264 + 1);
          double v140 = *(double *)&v264;
          double v142 = v265;
          double v143 = v99 * v29;
          if (v99 * v29 >= v29) {
            double v143 = v29;
          }
          double v144 = (v30 - v99) * v29;
          if (v144 < 0.0) {
            double v144 = 0.0;
          }
          if (v103) {
            double v145 = v144;
          }
          else {
            double v145 = v143;
          }
          double v146 = v145 * 0.0;
          if (v108)
          {
            double v147 = *((double *)&v265 + 1) * v53;
            double v148 = (*((double *)&v264 + 1) + *((double *)&v265 + 1) * v53) * v53;
            double v149 = 0.5;
            float v150 = *(double *)&v265 - (v146 + v145 * 0.0);
            [a4 localAspectRatio];
            double v152 = v147 - (v145 * 0.5 + v145 * 0.0) * v151;
            [a4 localAspectRatio];
            double v154 = v148 + v145 * 0.25 * v153;
            double v141 = -v154;
            double v238 = 3.0;
            double v241 = CGPointZero.x;
            double v236 = 1.0;
            double v237 = CGPointZero.x;
            double v235 = v140;
          }

          else
          {
            double v167 = (*(double *)&v264 + *(double *)&v265 * v53) * v53;
            double v149 = 0.5;
            float v150 = *(double *)&v265 * v53 - (v146 + v145 * v53);
            double v168 = v146 + v145 * 0.0;
            [a4 localAspectRatio];
            double v152 = *((double *)&v142 + 1) - v168 * v169;
            double v170 = v167 + v145 * 0.25;
            double v140 = -v170;
            double v241 = 1.0;
            double v237 = 3.0;
            double v238 = y;
            double v235 = v170;
            double v236 = y;
            double v154 = v141;
          }

          [v139 aspectRatio];
          double v173 = v171;
          float v58 = v171 < v149;
          float v30 = 1.0;
          if ((v58 || v171 > 2.0) && (v252 <= 1.0 || v171 >= 1.0) && (v252 >= 1.0 || v171 <= 1.0))
          {
            double v176 = v171 < 1.0 ? v252 / v171 : v171 / v252;
            if (v176 >= 1.1)
            {
              double v228 = v173 / v252;
              double v177 = v103;
              if (objc_msgSend( objc_msgSend( objc_msgSend(*(id *)((char *)&self->mSprites + 1), "objectForKey:", v136),  "objectForKey:",  @"panEndDirection"),  "integerValue") == (id)-1) {
                double v178 = -1LL;
              }
              else {
                double v178 = 1LL;
              }
              [v139 centerX];
              double v229 = v179;
              [v139 centerY];
              double v181 = v180;
              if (v173 > 2.0)
              {
                double v182 = v252 / v173;
                goto LABEL_261;
              }

              double v199 = 0.0;
              if (v173 < 0.5)
              {
                double v182 = v173 / v252;
LABEL_261:
                double v199 = 1.0 - v182;
              }

              if (v177) {
                double v200 = -v199;
              }
              else {
                double v200 = v199;
              }
              if (v173 <= 2.0) {
                double v201 = v200 * (double)v178;
              }
              else {
                double v201 = v181;
              }
              if (v173 <= 2.0) {
                double v202 = v229;
              }
              else {
                double v202 = v200 * (double)v178;
              }
              if (self->super._panoramaPanningOffsets)
              {
                double v227 = v181;
                -[MREffect valueForPanoramaPanningForElementID:value:minValue:maxValue:]( self,  "valueForPanoramaPanningForElementID:value:minValue:maxValue:",  v136);
                double v201 = v173 <= 2.0 ? v203 : v227;
                double v202 = v229;
                if (v173 > 2.0) {
                  double v202 = v203;
                }
              }

              double v204 = v201;
              [v139 setCenterX:v202];
              [v139 setCenterY:v204];
              double v205 = v228;
              if (v228 < 1.0) {
                double v205 = 1.0;
              }
              [v139 setScale:v205];
            }
          }

          double v206 = v252;
          *(float *)&double v172 = v206;
          +[MRCroppingSprite renderImage:inContext:atPosition:andSize:withReferenceAspectRatio:andJustifications:]( &OBJC_CLASS___MRCroppingSprite,  "renderImage:inContext:atPosition:andSize:withReferenceAspectRatio:andJustifications:",  v139,  a4,  v235,  v154,  v150,  v152,  v172,  v237,  v236);
          *(float *)&double v207 = v206;
          +[MRCroppingSprite renderImage:inContext:atPosition:andSize:withReferenceAspectRatio:andJustifications:]( &OBJC_CLASS___MRCroppingSprite,  "renderImage:inContext:atPosition:andSize:withReferenceAspectRatio:andJustifications:",  v139,  a4,  v140,  v141,  v150,  v152,  v207,  v241,  v238);
          [v139 releaseByUser];
          a3 = v243;
          goto LABEL_321;
        }

        double v155 = a3;
        double v156 = v96;
        if (v138) {
          double v156 = *(double *)((char *)&self->mExitCurve + 1);
        }
        double v157 = [v137 retainedByUserRenderedImageAtTime:a4 inContext:a5 withArguments:v156];
        [v157 aspectRatio];
        if (v158 == 0.0) {
          double v159 = v30;
        }
        else {
          double v159 = v158;
        }
        if ((v159 < v53 || v159 > 2.0) && (v77 <= v30 || v159 >= v30) && (v77 >= v30 || v159 <= v30))
        {
          double v162 = v159 / v77;
          double v163 = v159 < v30 ? v77 / v159 : v159 / v77;
          if (!((v163 < 1.1) | v260 & 1))
          {
            [v157 centerX];
            double v244 = v164;
            [v157 centerY];
            double v242 = v165;
            if (v159 <= 2.0)
            {
              double v166 = v30 - v162;
              if (v159 >= 0.5) {
                double v166 = 0.0;
              }
            }

            else
            {
              double v166 = v30 - v77 / v159;
            }

            double v239 = v166;
            if (objc_msgSend( objc_msgSend( objc_msgSend( -[NSDictionary objectForKey:]( self->super.mFlattenedAttributes,  "objectForKey:",  @"breakInformation"),  "objectForKey:",  v136),  "objectForKey:",  @"panEndDirection"),  "integerValue") == (id)-1) {
              double v183 = -1LL;
            }
            else {
              double v183 = 1LL;
            }
            if (v96 < 0.666 || v96 >= v234)
            {
              v208 = v239;
              double v198 = 2.0;
              if (v159 <= 2.0) {
                double v209 = v244;
              }
              else {
                double v209 = v239 * (double)v183;
              }
              if (v159 <= 2.0) {
                int v210 = v239 * (double)v183;
              }
              else {
                int v210 = v242;
              }
              if (v96 < v234)
              {
                double v209 = v244;
                int v210 = v242;
              }

              double v211 = -(v239 * (double)v183);
              if (v159 <= 2.0) {
                float v212 = v244;
              }
              else {
                float v212 = -(v239 * (double)v183);
              }
              if (v159 > 2.0) {
                double v211 = v242;
              }
              if (v96 < 0.666000009) {
                double v195 = v212;
              }
              else {
                double v195 = v209;
              }
              if (v96 < 0.666000009) {
                double v194 = v211;
              }
              else {
                double v194 = v210;
              }
            }

            else
            {
              if (v159 < v30) {
                double v184 = v159 / v77;
              }
              else {
                double v184 = v77 / v159;
              }
              double v185 = fmin(v184, 0.5);
              double v186 = v30 / v185;
              double v187 = ceilf(v186);
              qword_2B05C0 = *(uint64_t *)((char *)&self->mEnterCurve + 1);
              qword_2B05C8 = *(void *)(&self->mFitMovies + 1);
              if ((float)(v187 + 1.0) <= 1.0)
              {
                double v198 = 2.0;
                double v194 = v242;
                double v195 = v244;
LABEL_301:
                v208 = v239;
              }

              else
              {
                double v188 = 0LL;
                double v189 = v96 + -0.666;
                double v190 = (float)(v187 + 1.0);
                double v191 = (float)(v187 + -1.0);
                double v192 = v190 + -1.0;
                double v193 = 1.0;
                double v194 = v242;
                double v195 = v244;
                while (1)
                {
                  double v196 = v185 * v193 * v226 + -0.5;
                  if (v192 != v193 && v189 >= v196 && v189 < v185 * v193 * v226 + 0.5)
                  {
                    double v213 = (double)v188 / v191;
                    double v214 = v193 / v191;
                    ValueFromBezierPath( (id *)&qword_2B05C0,  dbl_2AD660,  0.0,  1.0,  v189 - v196,  (uint64_t)&unk_2AD678,  3LL);
                    v208 = v239;
                    double v215 = -(v208 - (v208 + v208) * v213);
                    double v216 = -(v208 - (v208 + v208) * v214);
                    double v194 = v242;
                    double v195 = v244;
                    double v218 = v215 + (v216 - v215) * v217;
                    goto LABEL_304;
                  }

                  if (v192 == v193 || v189 < v196) {
                    break;
                  }
                  double v193 = (double)(v188 + 2);
                  ++v188;
                  if (v193 >= v190)
                  {
                    double v198 = 2.0;
                    goto LABEL_301;
                  }
                }

                v208 = v239;
                double v218 = -(v208 - (v208 + v208) * ((double)v188 / v191));
LABEL_304:
                double v219 = v218 * (double)v183;
                double v198 = 2.0;
                if (v159 <= 2.0) {
                  double v194 = v219;
                }
                else {
                  double v195 = v219;
                }
              }
            }

            if (self->super._panoramaPanningOffsets)
            {
              if (v159 <= v198) {
                double v220 = v194;
              }
              else {
                double v220 = v195;
              }
              -[MREffect valueForPanoramaPanningForElementID:value:minValue:maxValue:]( self,  "valueForPanoramaPanningForElementID:value:minValue:maxValue:",  v136,  v220,  -v208);
              if (v159 <= 2.0) {
                double v194 = v221;
              }
              else {
                double v195 = v221;
              }
            }

            [v157 setCenterX:v195];
            [v157 setCenterY:v194];
            if (v162 >= v30) {
              double v222 = v159 / v77;
            }
            else {
              double v222 = v30;
            }
            [v157 setScale:v222];
          }
        }

        double v223 = *(CGContext **)((char *)&self->mCachedRenderedText + 1);
        double v224 = (MRCroppingSprite *)[v223 objectForKey:v136];
        if (!v224)
        {
          double v224 = objc_alloc_init(&OBJC_CLASS___MRCroppingSprite);
          [v223 setObject:v224 forKey:v136];
        }

        *(float *)&double v225 = v77;
        -[MRCroppingSprite renderImage:inContext:atPosition:andSize:withReferenceAspectRatio:andJustifications:]( v224,  "renderImage:inContext:atPosition:andSize:withReferenceAspectRatio:andJustifications:",  v157,  a4,  v264,  v265,  v225,  v263);
        [v157 releaseByUser];
        a3 = v155;
LABEL_321:
        ++v28;
      }

      double v255 = [obj countByEnumeratingWithState:&v266 objects:v278 count:16];
    }

    while (v255);
  }

  [a4 unsetShader];
}

LABEL_87:
  v168.receiver = self;
  v168.super_class = (Class)&OBJC_CLASS___MREffectPictureFrames;
  -[MREffect prerenderForTime:inContext:withArguments:](&v168, "prerenderForTime:inContext:withArguments:", a4, a5, a3);
  double v164 = 0u;
  double v165 = 0u;
  double v166 = 0u;
  double v167 = 0u;
  double v127 = [*(id *)((char *)&self->mSprites + 1) objectEnumerator];
  double v128 = [v127 countByEnumeratingWithState:&v164 objects:v186 count:16];
  if (v128)
  {
    double v129 = v128;
    double v130 = *(void *)v165;
    do
    {
      for (m = 0LL; m != v129; m = (char *)m + 1)
      {
        if (*(void *)v165 != v130) {
          objc_enumerationMutation(v127);
        }
        [*(id *)(*((void *)&v164 + 1) + 8 * (void)m) prerenderForTime:a4 inContext:a5 withArguments:a3];
      }

      double v129 = [v127 countByEnumeratingWithState:&v164 objects:v186 count:16];
    }

    while (v129);
  }

  if (v9)
  {
    double v162 = 0u;
    double v163 = 0u;
    double v160 = 0u;
    double v161 = 0u;
    double v132 = *(MRImageProvider **)((char *)&self->mGradientProvider + 1);
    double v133 = [v132 countByEnumeratingWithState:&v160 objects:v185 count:16];
    if (v133)
    {
      double v134 = v133;
      double v135 = *(void *)v161;
      do
      {
        for (n = 0LL; n != v134; n = (char *)n + 1)
        {
          if (*(void *)v161 != v135) {
            objc_enumerationMutation(v132);
          }
          [*(id *)(*((void *)&v160 + 1) + 8 * (void)n) prerenderForTime:a4 inContext:a5 withArguments:a3];
        }

        double v134 = [v132 countByEnumeratingWithState:&v160 objects:v185 count:16];
      }

      while (v134);
    }
  }

  [*(id *)((char *)&self->mFrameSprite + 1) prerenderForTime:a4 inContext:a5 withArguments:a3];
  [*(id *)((char *)&self->mWallProvider + 1) prerenderForTime:a4 inContext:a5 withArguments:a3];
  return 1;
}

  v619 = v80;
  _ZF = v553 < v71 && v80 == 0LL;
  if (_ZF && [obj count])
  {
    objc_msgSend( objc_msgSend(objc_msgSend(obj, "objectAtIndex:", 0), "objectForKey:", @"location"),  "CGPointValue");
    float v92 = MRMatrix_ProjectPoint(v653, v90, v91);
    float v94 = v93;
    double v95 = ((v553 + -0.25 + -0.5 + -3.25) / v10 + -0.5) * 3.14159265;
    v619 = 0LL;
    v544 = 0;
    float v67 = 0;
    float v96 = (sinf(v95) + 1.0) * 0.5;
    v548 = 1.0;
    char v68 = (1.0 - v96) * -2.5 + 5.29999995;
    double v97 = v92 * 2.65;
    id v98 = -0.7;
    if (v92 * 2.65 >= -0.7) {
      id v98 = v92 * 2.65;
    }
    double v99 = fmin(v97, 0.7);
    if (v97 >= 0.0) {
      id v98 = v99;
    }
    v615 = 0.0;
    v547 = 1.0 - v96;
    __int128 v69 = 0.0 - v98 * v96 + (1.0 - v96) * -0.0599999987;
    __int128 v70 = 0.200000003 - (v94 * 2.65 + 0.200000003 + -0.200000003) * v96;
    goto LABEL_98;
  }

  v547 = 1.0;
  v615 = 0.0;
  char v68 = 5.29999995;
  double v101 = v606;
  if (v80 >= [obj count])
  {
    v544 = 0;
    float v67 = 0;
    __int128 v70 = 0.200000003;
    v571 = 0.0;
    __int128 v69 = 0.0;
    v548 = 0.0;
    double v100 = v552;
    goto LABEL_167;
  }

  double v102 = objc_msgSend(obj, "objectAtIndex:");
  objc_msgSend(objc_msgSend(v102, "objectForKey:", @"location"), "CGPointValue");
  v607 = MRMatrix_ProjectPoint(v653, v103 * 2.64999998, v104 * 2.64999998);
  v601 = v105;
  if (v80 == (char *)[obj count] - 1)
  {
    CGFloat x = CGPointZero.x;
    CGFloat y = CGPointZero.y;
  }

  else
  {
    objc_msgSend( objc_msgSend(objc_msgSend(obj, "objectAtIndex:", v80 + 1), "objectForKey:", @"location"),  "CGPointValue");
  }

  id v109 = MRMatrix_ProjectPoint(v653, x * 2.64999998, y * 2.64999998);
  __int128 v111 = v110;
  __int128 v70 = 0.200000003;
  if (v109 <= 0.7) {
    __int128 v112 = -v109;
  }
  else {
    __int128 v112 = -0.7;
  }
  __int128 v113 = fmin(-v109, 0.7);
  if (v109 <= 0.0) {
    double v114 = v113;
  }
  else {
    double v114 = v112;
  }
  objc_msgSend(objc_msgSend(v102, "objectForKey:", @"pinDuration"), "doubleValue");
  double v116 = v115;
  if (v553 > v77 + v115 + 0.4 + 1.75 + 0.3 + 0.4 + v10 * 2.0)
  {
    v544 = 0;
    float v67 = 0;
    v571 = 0.0;
    __int128 v69 = 0.0;
LABEL_118:
    v548 = 0.0;
    double v100 = v552;
LABEL_166:
    char v68 = 5.29999995;
    goto LABEL_167;
  }

  double v117 = 0.200000003 - v111;
  double v118 = v607 + v114;
  double v119 = v118 * v118;
  __int128 v70 = 0.200000003 - v601;
  double v120 = 0.200000003 - v111 - (0.200000003 - v601);
  double v121 = v120;
  double v122 = sqrt((float)((float)(v121 * v121) + v119));
  double v123 = 0.0;
  double v124 = 0.0;
  if (v122 > 0.0)
  {
    double v125 = v115 * 0.006787;
    if (v115 * 0.006787 > v122) {
      double v125 = v122 * 0.75;
    }
    double v126 = v125 / v122;
    double v127 = (v607 + v114) * (v125 / v122) - v607;
    if (v127 >= -0.7) {
      double v128 = v127;
    }
    else {
      double v128 = -0.7;
    }
    double v129 = fmin(v127, 0.7);
    if (v127 >= 0.0) {
      double v123 = v129;
    }
    else {
      double v123 = v128;
    }
    double v124 = v70 + v120 * v126;
  }

  double v130 = v114 - v123;
  double v131 = v117 - v124;
  if (sqrt((float)((float)(v130 * v130) + (float)(v131 * v131))) >= 0.1)
  {
    double v132 = v123;
  }

  else
  {
    double v124 = 0.200000003 - v111;
    double v132 = v114;
  }

  if (v553 <= v77 + 0.4)
  {
    float v150 = ((v553 - v77) / 0.4 + -0.5) * 3.14159265;
    v544 = 0;
    float v67 = 0;
    v547 = 1.0;
    v571 = (sinf(v150) + 1.0) * 0.5;
    v615 = 0.0;
    goto LABEL_163;
  }

  double v133 = v77 + 0.4 + 1.75;
  v547 = 1.0;
  v615 = 0.0;
  if (v553 <= v133)
  {
    v544 = 0;
    float v67 = 0;
    v571 = 1.0;
    goto LABEL_163;
  }

  if (v553 <= v572 + v133)
  {
    double v151 = v553 - v77 + -0.4 + -1.75;
    double v152 = (v151 / v572 + -0.5) * 3.14159265;
    double v153 = (sinf(v152) + 1.0) * 0.5;
    objc_msgSend(objc_msgSend(v78, "objectAtIndex:", &v80[-v11.location]), "CGSizeValue");
    v571 = 1.0;
    objc_msgSend( v78,  "replaceObjectAtIndex:withObject:",  &v80[-v11.location],  +[NSValue valueWithCGSize:]( NSValue,  "valueWithCGSize:",  v154 + (1.0 - v154) * v153,  v155 + (1.0 - v155) * v153));
    if (v553 < v133 + v572 * 0.5)
    {
      v544 = 0;
      float v67 = 0;
      v548 = 0.0;
      v547 = 1.0;
LABEL_164:
      double v100 = v552;
      goto LABEL_165;
    }

    double v158 = ((v151 + v572 * -0.5) / (v572 * 0.5) + -0.5) * 3.14159265;
    float v67 = 0;
    v547 = 1.0;
    v571 = (sinf(v158) + 1.0) * -0.5 + 1.0;
    v544 = 1;
LABEL_163:
    v548 = 0.0;
    goto LABEL_164;
  }

  double v134 = v124;
  v602 = v132;
  if (v553 <= v572 + v133 + v115)
  {
    objc_msgSend( v78,  "replaceObjectAtIndex:withObject:",  &v80[-v11.location],  +[NSValue valueWithCGSize:](NSValue, "valueWithCGSize:", CGSizeZero.width, CGSizeZero.height));
    double v156 = ((v553 - v77 + -0.4 + -1.75 - v572) / v116 + -0.5) * 3.14159265;
    v544 = 0;
    v547 = 1.0;
    double v157 = (sinf(v156) + 1.0) * 0.5;
    __int128 v70 = v70 + (v134 - v70) * v157;
    __int128 v69 = (v607 + v602) * v157 - v607;
    float v67 = 1;
    v615 = 0.0;
    v571 = 0.0;
    goto LABEL_118;
  }

  if (v553 <= v133 + v115 + v572 * 2.0)
  {
    v536 = (1.0 - (v553 - v77 + -0.4 + -1.75 - v115 - v572) / v572 + -0.5) * 3.14159265;
    v537 = (sinf(v536) + 1.0) * 0.5;
    objc_msgSend(objc_msgSend(v78, "objectAtIndex:", &v80[-v11.location]), "CGSizeValue");
    v547 = 1.0;
    objc_msgSend( v78,  "replaceObjectAtIndex:withObject:",  &v80[-v11.location],  +[NSValue valueWithCGSize:]( NSValue,  "valueWithCGSize:",  v538 + (1.0 - v538) * v537,  v539 + (1.0 - v539) * v537));
    v544 = 0;
    float v67 = 0;
    v615 = 0.0;
    v571 = 0.0;
    __int128 v70 = v134;
    __int128 v69 = v602;
    goto LABEL_118;
  }

  double v135 = v133 + v115 + 0.3;
  v571 = 0.0;
  double v100 = v552;
  if (v553 <= v135 + v572 * 2.0) {
    goto LABEL_467;
  }
  if (v553 > v135 + 0.4 + v572 * 2.0)
  {
    v544 = 0;
    float v67 = 0;
    v615 = 0.0;
    v548 = 0.0;
LABEL_165:
    __int128 v69 = -v607;
    goto LABEL_166;
  }

  v540 = ((v553 - v77 + -0.4 + -1.75 - v115 + v572 * -2.0 + -0.3) / 0.4 + -0.5) * 3.14159265;
  v547 = 1.0;
  v541 = (sinf(v540) + 1.0) * 0.5;
  if (v80 != (char *)[obj count] - 1)
  {
    v544 = 0;
    float v67 = 0;
    __int128 v69 = v602 + (v114 - v602) * v541;
    v615 = v541;
    __int128 v70 = v134 + (v117 - v134) * v541;
    goto LABEL_468;
  }

  v542 = -[NSDictionary objectForKey:](v606->super.mFlattenedAttributes, "objectForKey:", @"outDirection");
  if (!v542 || [v542 integerValue] == (id)-1)
  {
LABEL_467:
    v544 = 0;
    float v67 = 0;
    v615 = 0.0;
    __int128 v70 = v134;
    __int128 v69 = v602;
LABEL_468:
    v548 = 0.0;
    goto LABEL_166;
  }

  v544 = 0;
  float v67 = 0;
  char v68 = v541 * -2.5 + 5.29999995;
  __int128 v69 = v602 - v602 * v541;
  __int128 v70 = v134 + (0.200000003 - v134) * v541;
  v615 = 0.0;
  v548 = 0.0;
LABEL_167:
  double v159 = v101->super.mPhaseInDuration;
  v563 = v67;
  if (v159 > v100)
  {
    double v160 = objc_msgSend( -[NSDictionary objectForKey:]( v101->super.mFlattenedAttributes,  "objectForKey:",  @"pauseDuringPhaseIn"),  "BOOLValue");
    double v161 = objc_msgSend( -[NSDictionary objectForKey:]( v101->super.mFlattenedAttributes,  "objectForKey:",  @"dissolveDuringPhaseIn"),  "BOOLValue");
    double v162 = v161;
    if ((v160 & 1) != 0)
    {
      v608 = 0;
      double v163 = 0;
      double v164 = 1;
LABEL_181:
      double v171 = -0.7;
      if (v69 >= -0.7) {
        double v171 = v69;
      }
      double v172 = fmin(v69, 0.7);
      if (v69 >= 0.0) {
        __int128 v69 = v172;
      }
      else {
        __int128 v69 = v171;
      }
      double v168 = -1LL;
      goto LABEL_187;
    }

    if ((v161 & 1) != 0)
    {
      double v164 = 0;
      v608 = 0;
      double v163 = 0;
      double v162 = 1;
      goto LABEL_181;
    }

    double v167 = -[NSDictionary objectForKey:](v101->super.mFlattenedAttributes, "objectForKey:", @"inDirection");
    if (v167)
    {
      double v168 = (uint64_t)[v167 integerValue];
      double v169 = v100 / v101->super.mPhaseInDuration * 1.57079633;
      double v170 = sinf(v169);
      switch(v168)
      {
        case 0LL:
          double v164 = 0;
          v608 = 0;
          double v162 = 0;
          double v163 = 0;
          double v168 = 0LL;
          __int128 v70 = v70 + v68 * (1.0 - v170);
          break;
        case 1LL:
          double v164 = 0;
          v608 = 0;
          double v162 = 0;
          double v163 = 0;
          __int128 v69 = v69 + v68 * (1.0 - v170);
          goto LABEL_457;
        case 2LL:
          double v164 = 0;
          v608 = 0;
          double v162 = 0;
          double v163 = 0;
          __int128 v70 = v70 - v68 * (1.0 - v170);
          goto LABEL_459;
        case 3LL:
          double v164 = 0;
          v608 = 0;
          double v162 = 0;
          double v163 = 0;
          __int128 v69 = v69 - v68 * (1.0 - v170);
          goto LABEL_461;
        default:
          goto LABEL_451;
      }

      goto LABEL_187;
    }

double Shrink(double a1)
{
  double v1 = 0.0;
  if (a1 < 0.4375)
  {
    float v2 = a1 * 3.58999991 + 1.57079637;
    return sinf(v2);
  }

  return v1;
}

double ExitBounce(double a1)
{
  double v1 = 0.0;
  if (a1 < 0.4375)
  {
    float v2 = a1 * 3.58999991 + 1.57079637;
    return sinf(v2);
  }

  return v1;
}

double Bounce(double a1)
{
  if (a1 >= 0.4375)
  {
    double v2 = 0.0;
    if (a1 < 0.995400012)
    {
      double v3 = a1 + -0.298000008;
      float v4 = (a1 + -0.298000008) * 3.57999992 * 3.14159265;
      return fabsf(cosf(v4)) / (v3 * 23.0 * (v3 * 23.0));
    }
  }

  else
  {
    float v1 = a1 * 3.58999991 + 1.57079637;
    return sinf(v1);
  }

  return v2;
}

double DecayingSinWave(double a1, double a2, double a3, double a4, double a5)
{
  double v5 = a1 - a5;
  float v6 = (a1 - a5) * a2 * 3.14159265;
  return fabsf(cosf(v6)) * a3 / (v5 * a4 * (v5 * a4));
}

LABEL_51:
      -[NSMutableArray addObject:]( v223,  "addObject:",  +[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", 1LL));
      ++v12;
      float64x2_t v9 = (NSMutableArray *)(v17 + 2);
      goto LABEL_52;
    }

    if (v19 == 3)
    {
      if (v25 >= 1.0)
      {
        uint64_t v13 = (uint64_t)v222;
        if (a3)
        {
          uint64_t v37 = -1.0;
          int v38 = -1.0;
          if (v18 + 2 < (unint64_t)[a3 count])
          {
            objc_msgSend( objc_msgSend(objc_msgSend(a3, "objectAtIndex:", v18 + 2), "objectForKey:", @"aspectRatio"),  "floatValue");
            int v38 = v39;
          }

          if (v18 + 3 < (unint64_t)[a3 count])
          {
            objc_msgSend( objc_msgSend(objc_msgSend(a3, "objectAtIndex:", v18 + 3), "objectForKey:", @"aspectRatio"),  "floatValue");
            uint64_t v37 = v40;
          }

          double v41 = v38;
          uint64_t v42 = v37;
        }

        else
        {
          -[MREffectShiftingTiles _aspectRatioForSlideIndex:](self, "_aspectRatioForSlideIndex:", v18 + 2);
          double v41 = v45;
          -[MREffectShiftingTiles _aspectRatioForSlideIndex:](self, "_aspectRatioForSlideIndex:", v18 + 3);
        }

        if (v41 <= 0.0 || v41 >= 1.0)
        {
          if (v41 < 1.0 || v42 < 1.0)
          {
            int v47 = +[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", 1LL, v42);
            uint64_t v48 = 1LL;
            uint64_t v46 = v223;
          }

          else
          {
            uint64_t v46 = v223;
            -[NSMutableArray addObject:]( v223,  "addObject:",  +[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", 2LL));
            int v47 = +[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", 2LL);
            uint64_t v48 = 4LL;
          }
        }

        else
        {
          uint64_t v46 = v223;
          -[NSMutableArray addObject:]( v223,  "addObject:",  +[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", 2LL, v42));
          int v47 = +[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", 0LL);
          uint64_t v48 = 3LL;
        }

        -[NSMutableArray addObject:](v46, "addObject:", v47);
        v12 += v48;
        goto LABEL_93;
      }

      goto LABEL_51;
    }

    if (v19 != 2)
    {
      if (v25 >= 1.0) {
        float v28 = 1;
      }
      else {
        float v28 = v14;
      }
      uint64_t v13 = (uint64_t)v222;
      if (v28 != 1) {
        goto LABEL_60;
      }
LABEL_77:
      -[NSMutableArray addObject:]( v223,  "addObject:",  +[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", 2LL, v25));
      v12 += 2LL;
      float64x2_t v9 = (NSMutableArray *)(v17 + 1);
      goto LABEL_53;
    }

    uint64_t v13 = (uint64_t)v222;
    if (v25 >= 1.0)
    {
      if (a3)
      {
        float v29 = -1.0;
        float v30 = -1.0;
        if (v18 + 2 < (unint64_t)[a3 count])
        {
          objc_msgSend( objc_msgSend(objc_msgSend(a3, "objectAtIndex:", v18 + 2), "objectForKey:", @"aspectRatio"),  "floatValue");
          float v30 = v31;
        }

        if (v18 + 3 < (unint64_t)[a3 count])
        {
          objc_msgSend( objc_msgSend(objc_msgSend(a3, "objectAtIndex:", v18 + 3), "objectForKey:", @"aspectRatio"),  "floatValue");
          float v29 = v32;
        }

        float v33 = [a3 count];
        LODWORD(v34) = -1.0;
        if (v18 + 4 < (unint64_t)v33) {
          objc_msgSend( objc_msgSend(objc_msgSend(a3, "objectAtIndex:", v18 + 4, v34), "objectForKey:", @"aspectRatio"),  "floatValue");
        }
        float v35 = v30;
        float v36 = v29;
        float v25 = *(float *)&v34;
      }

      else
      {
        -[MREffectShiftingTiles _aspectRatioForSlideIndex:](self, "_aspectRatioForSlideIndex:", v18 + 2);
        float v35 = v43;
        -[MREffectShiftingTiles _aspectRatioForSlideIndex:](self, "_aspectRatioForSlideIndex:", v18 + 3);
        float v36 = v44;
        -[MREffectShiftingTiles _aspectRatioForSlideIndex:](self, "_aspectRatioForSlideIndex:", v18 + 4);
      }

      if (v35 == -1.0) {
        goto LABEL_77;
      }
      if (v36 == -1.0)
      {
        -[NSMutableArray addObject:]( v223,  "addObject:",  +[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", 2LL, v25));
        if (v35 < 1.0) {
          float v49 = 2LL;
        }
        else {
          float v49 = 3LL;
        }
        -[NSMutableArray addObject:]( v223,  "addObject:",  +[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", v35 >= 1.0));
        float64x2_t v9 = (NSMutableArray *)(v17 + v49);
LABEL_90:
        v12 += 3LL;
        goto LABEL_53;
      }

      if (v25 == -1.0)
      {
        -[NSMutableArray addObject:]( v223,  "addObject:",  +[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", 2LL));
        if (v35 > 1.0 && v36 > 1.0)
        {
          float v50 = +[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", 2LL);
          float v51 = v223;
          goto LABEL_113;
        }

        if (v35 < 1.0) {
          float v52 = 2LL;
        }
        else {
          float v52 = 3LL;
        }
        -[NSMutableArray addObject:]( v223,  "addObject:",  +[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", v35 >= 1.0));
        v17 += v52;
        if (v36 >= 1.0)
        {
          float v50 = +[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", 1LL);
          float v51 = v223;
LABEL_113:
          -[NSMutableArray addObject:](v51, "addObject:", v50);
          float64x2_t v9 = (NSMutableArray *)(v17 + 2);
        }

        else
        {
          -[NSMutableArray addObject:]( v223,  "addObject:",  +[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", 0LL));
          float64x2_t v9 = (NSMutableArray *)(v17 + 1);
        }

        v12 += 4LL;
        goto LABEL_53;
      }

      if (v35 >= 1.0 || v36 < 1.0 || v25 < 1.0)
      {
        if (v35 >= 1.0 && v36 < 1.0) {
          goto LABEL_119;
        }
        if (v35 >= 1.0 || v36 >= 1.0)
        {
          float v53 = v35 >= 1.0;
          if (v36 < 1.0) {
            float v53 = 0;
          }
          if (!v53 || v25 >= 1.0)
          {
            if (v25 < 1.0) {
              float v53 = 0;
            }
            if (!v53)
            {
LABEL_60:
              -[NSMutableArray addObject:]( v223,  "addObject:",  +[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", 1LL));
              ++v12;
LABEL_93:
              float64x2_t v9 = (NSMutableArray *)(v17 + 2);
              goto LABEL_53;
            }

            float v54 = ((unint64_t)[v211 randomInt] & 0x8000000000000001) == 1;
            if (v54) {
              float v55 = 1LL;
            }
            else {
              float v55 = 2LL;
            }
            if (v54) {
              float v56 = 2LL;
            }
            else {
              float v56 = 1LL;
            }
            -[NSMutableArray addObject:]( v223,  "addObject:",  +[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", v55));
            -[NSMutableArray addObject:]( v223,  "addObject:",  +[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", v56));
            float64x2_t v9 = (NSMutableArray *)(v17 + 3);
            goto LABEL_90;
          }

    operator delete[](v19);
    return (uint64_t)v21;
  }

  if (v20) {
    operator delete[](v20);
  }
  float v21 = 0LL;
  float64x2_t v8 = 0LL;
  if (v19) {
    goto LABEL_51;
  }
  return v8;
}

LABEL_321:
              double v182 = &v169[~v175];
              float v59 = v223;
              float v62 = v173;
              if (((unint64_t)v182 & 0x8000000000000000LL) == 0)
              {
                double v183 = [obja objectAtIndex:v182];
                [v61 addIndex:v183[1]];
                [v217 addIndex:v183[3]];
                float v62 = v173 - -[MREffectShiftingTiles _widthForLayout:](self, "_widthForLayout:", v183[1]);
                [obja removeObjectAtIndex:v182];
              }
            }
          }
        }

        while (v62 > 10);
      }

      float v64 = v216;
      if ((v216 & 1) != 0) {
        double v184 = 0LL;
      }
      else {
        double v184 = v218 + 1;
      }
      char v63 = &v221[v184];
      float v65 = (uint64_t)v222;
    }

    if (!v74)
    {
      float v80 = (NSMutableArray *)[obja copy];
      *(NSMutableArray **)((char *)&self->mTiming + 1) = v80;
      double v266 = 0u;
      double v267 = 0u;
      double v268 = 0u;
      v269 = 0u;
      float v81 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( v80,  "countByEnumeratingWithState:objects:count:",  &v266,  v279,  16LL);
      if (v81)
      {
        float v82 = v81;
        float v83 = *(void *)v267;
        float v84 = 5.0;
        do
        {
          for (uint64_t i = 0LL; i != v82; uint64_t i = (char *)i + 1)
          {
            if (*(void *)v267 != v83) {
              objc_enumerationMutation(v80);
            }
            float v86 = *(void *)(*((void *)&v266 + 1) + 8LL * (void)i);
            float v87 = -[MREffectShiftingTiles _slideCountForLayout:](self, "_slideCountForLayout:", *(void *)(v86 + 8));
            if (v87 >= 1)
            {
              float v88 = v87;
              float v89 = *(void *)(v86 + 24);
              do
              {
                -[MREffectShiftingTiles _aspectRatioForSlideIndex:](self, "_aspectRatioForSlideIndex:", v89);
                if (v90 < 0.5 || v90 > 2.0)
                {
                  -[MREffectShiftingTiles _durationForAspectRatio:inLayout:withScreenRatio:]( self,  "_durationForAspectRatio:inLayout:withScreenRatio:",  *(void *)(v86 + 8));
                  if (v84 < v92) {
                    float v84 = v92;
                  }
                }

                if (v89 == v66) {
                  float v89 = *(int64_t *)((char *)&self->mLastSlideIndex + 1);
                }
                else {
                  ++v89;
                }
                --v88;
              }

              while (v88);
            }

            float v93 = v84 >= 10.0 || (unint64_t)(*(void *)(v86 + 8) - 5LL) >= 2;
            if (!v93) {
              float v84 = 10.0;
            }
          }

          float v82 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( v80,  "countByEnumeratingWithState:objects:count:",  &v266,  v279,  16LL);
        }

        while (v82);
      }

      else
      {
        float v84 = 5.0;
      }

      double v264 = 0u;
      double v265 = 0u;
      v262 = 0u;
      v263 = 0u;
      float v94 = *(NSMutableArray **)((char *)&self->mTiming + 1);
      double v95 = [v94 countByEnumeratingWithState:&v262 objects:v278 count:16];
      if (v95)
      {
        float v96 = v95;
        double v97 = *(void *)v263;
        do
        {
          for (j = 0LL; j != v96; j = (char *)j + 1)
          {
            if (*(void *)v263 != v97) {
              objc_enumerationMutation(v94);
            }
            double v99 = *(void *)(*((void *)&v262 + 1) + 8LL * (void)j);
            *(void *)(v99 + 40) = 0LL;
            *(double *)(v99 + 4_Block_object_dispose((const void *)(v1 - 48), 8) = v84;
          }

          float v96 = [v94 countByEnumeratingWithState:&v262 objects:v278 count:16];
        }

        while (v96);
      }

      *(double *)((char *)&self->mSlideAspectRatios + 1) = v84;
    }

LABEL_197:
    double v260 = 0u;
    double v261 = 0u;
    double v258 = 0u;
    double v259 = 0u;
    double v100 = obja;
    double v101 = [obja countByEnumeratingWithState:&v258 objects:v277 count:16];
    if (v101)
    {
      double v102 = v101;
      float v103 = *(void *)v259;
      do
      {
        for (k = 0LL; k != v102; k = (char *)k + 1)
        {
          if (*(void *)v259 != v103) {
            objc_enumerationMutation(obja);
          }
          ++*(void *)(*(void *)(*((void *)&v258 + 1) + 8LL * (void)k) + 16LL);
        }

        double v102 = [obja countByEnumeratingWithState:&v258 objects:v277 count:16];
      }

      while (v102);
    }

    float v105 = +[NSMutableIndexSet indexSet](&OBJC_CLASS___NSMutableIndexSet, "indexSet");
    double v224 = -[MREffectShiftingTiles _widthForLayout:](self, "_widthForLayout:", v73);
    double v254 = 0u;
    double v255 = 0u;
    double v256 = 0u;
    double v257 = 0u;
    double v106 = [obja countByEnumeratingWithState:&v254 objects:v276 count:16];
    if (v106)
    {
      double v107 = v106;
      double v108 = 0LL;
      id v109 = *(void *)v255;
      __int128 v110 = -1LL;
      do
      {
        for (m = 0LL; m != v107; m = (char *)m + 1)
        {
          if (*(void *)v255 != v109) {
            objc_enumerationMutation(obja);
          }
          __int128 v112 = *(void *)(*(void *)(*((void *)&v254 + 1) + 8LL * (void)m) + 16LL);
          if (v112 > v110)
          {
            [v105 removeAllIndexes];
            [v105 addIndex:(char *)m + v108];
            __int128 v110 = v112;
          }
        }

        double v107 = [obja countByEnumeratingWithState:&v254 objects:v276 count:16];
        v108 += (uint64_t)m;
      }

      while (v107);
    }

    if (![v105 count]
      || (__int128 v113 = [v105 lastIndex], v113 == (id)-1)
      || (double v114 = (uint64_t)v113, (v115 = [obja objectAtIndex:v113]) == 0))
    {
      [v105 count];
      double v128 = 0LL;
      goto LABEL_235;
    }

    double v116 = -[MREffectShiftingTiles _widthForLayout:](self, "_widthForLayout:", v115[1]);
    double v117 = v116;
    if ((uint64_t)v224 <= v116 || !v116)
    {
      double v128 = 0LL;
      double v128 = 0LL;
      double v185 = v221 + 1;
      double v186 = v224;
      do
      {
        if (&v185[v128] >= -[NSMutableArray count](v223, "count")) {
          break;
        }
        double v186 = &v186[-[MREffectShiftingTiles _widthForLayout:]( self,  "_widthForLayout:",  objc_msgSend( -[NSMutableArray objectAtIndex:](v223, "objectAtIndex:", &v185[v128++]),  "integerValue"))];
      }

      while ((uint64_t)v186 < v117);
      goto LABEL_391;
    }

    double v252 = 0u;
    double v253 = 0u;
    double v250 = 0u;
    double v251 = 0u;
    double v118 = [obja countByEnumeratingWithState:&v250 objects:v275 count:16];
    if (v118)
    {
      double v119 = v118;
      double v219 = v117;
      double v120 = 0LL;
      double v121 = 0LL;
      double v122 = *(void *)v251;
      double v213 = (char *)v114;
      double v123 = -v114;
LABEL_220:
      double v124 = 0LL;
      double v125 = v123;
      double v126 = v123 + v121;
      while (1)
      {
        if (*(void *)v251 != v122) {
          objc_enumerationMutation(obja);
        }
        v120 += -[MREffectShiftingTiles _widthForLayout:]( self,  "_widthForLayout:",  *(void *)(*(void *)(*((void *)&v250 + 1) + 8LL * (void)v124) + 8LL));
        double v124 = (char *)v124 + 1;
        if (v119 == v124)
        {
          double v119 = [obja countByEnumeratingWithState:&v250 objects:v275 count:16];
          v121 += (uint64_t)v124;
          double v123 = v125;
          if (v119) {
            goto LABEL_220;
          }
          break;
        }
      }

      if (v120 > 4) {
        v120 -= 5LL;
      }
      if (v120 != 4)
      {
        double v100 = obja;
        double v117 = v219;
        double v114 = (uint64_t)v213;
        if (!v120) {
          goto LABEL_230;
        }
        double v187 = (unint64_t)(v213 + 1);
        double v188 = [obja count];
        double v189 = (char *)[obja count];
        if (v224 == (_BYTE *)&dword_0 + 2
          || (v224 == (_BYTE *)&dword_0 + 3 ? (double v190 = v219 == 2) : (double v190 = 0),
              !v190 ? (double v191 = 0) : (double v191 = 1),
              v190 && v120 == 2))
        {
          float v93 = v187 >= (unint64_t)v188;
          double v100 = obja;
          if (!v93
            && (char *)-[MREffectShiftingTiles _widthForLayout:]( self,  "_widthForLayout:",  *((void *)[obja objectAtIndex:v213 + 1] + 1)) == (char *)&dword_0 + 1)
          {
LABEL_352:
            double v192 = v105;
            double v193 = v213 + 1;
            goto LABEL_369;
          }

LABEL_366:
          double v127 = v213 - 1;
LABEL_367:
          if ((char *)-[MREffectShiftingTiles _widthForLayout:]( self,  "_widthForLayout:",  *((void *)[v100 objectAtIndex:v127] + 1)) == (char *)&dword_0 + 1)
          {
LABEL_368:
            double v192 = v105;
            double v193 = v127;
LABEL_369:
            [v192 addIndex:v193];
LABEL_392:
            double v128 = 0LL;
LABEL_393:
            double v198 = [v105 count];
            if (v117)
            {
              if (!v198)
              {
                double v248 = 0u;
                double v249 = 0u;
                v246 = 0u;
                double v247 = 0u;
                double v199 = [v100 countByEnumeratingWithState:&v246 objects:v274 count:16];
                if (v199)
                {
                  double v200 = v199;
                  double v220 = v128;
                  double v201 = 0LL;
                  double v202 = *(void *)v247;
                  double v203 = -1LL;
                  do
                  {
                    for (n = 0LL; n != v200; n = (char *)n + 1)
                    {
                      if (*(void *)v247 != v202) {
                        objc_enumerationMutation(obja);
                      }
                      double v205 = *(void *)(*((void *)&v246 + 1) + 8LL * (void)n);
                      if (*(void *)(v205 + 16) > v203
                        && v224 == (char *)-[MREffectShiftingTiles _widthForLayout:]( self,  "_widthForLayout:",  *(void *)(v205 + 8)))
                      {
                        double v203 = *(void *)(v205 + 16);
                        [v105 removeAllIndexes];
                        [v105 addIndex:(char *)n + v201];
                      }
                    }

                    double v200 = [obja countByEnumeratingWithState:&v246 objects:v274 count:16];
                    v201 += (uint64_t)n;
                  }

                  while (v200);
                  double v100 = obja;
                  double v128 = v220;
                }
              }
            }

            LODWORD(v385) = 0;
            objc_msgSend( *(id *)((char *)&self->mGrayImage + 1),  "renderImageOuter:inContext:atPosition:andSize:zRotation:",  *(MRImageProvider **)((char *)&self->mDateWindowMask + 1),  a3,  v628,  v388,  width,  v369,  v385);
LABEL_367:
            v409 = v369 * 5.0 + 0.0500000007;
            v361 = width * 5.0 + 0.0500000007;
            HIDWORD(v362) = 0;
            if (!BYTE3(self->mSlideInformation)) {
              v409 = 0.0;
            }
            v366 = v366 - v409;
            v410 = -0.0;
            if (!BYTE3(self->mSlideInformation)) {
              v410 = width * 5.0 + 0.0500000007;
            }
            v365 = v365 + v410;
            v370 = (char *)v370 + 1;
            v371 = width;
            v372 = v369;
            if (v613 == v370)
            {
              v453 = [v350 countByEnumeratingWithState:&v635 objects:v646 count:16];
              v367 = (char *)v370 + (void)v367;
              v613 = v453;
              v364 = 1LL - (void)v582;
              if (v453) {
                goto LABEL_322;
              }
              break;
            }
          }
        }

        [a3 restoreForeColor:&v653];
        if (v592) {
          [a3 blend:0];
        }
        [a3 unsetShader];
        [a3 setShader:@"PlainTexture"];
        if (v574)
        {
          LODWORD(v457) = 1.0;
          *(float *)&v454 = v583;
          *(float *)&v455 = v583;
          *(float *)&v456 = v583;
          [a3 composeForeColorRed:&v653 green:v454 blue:v455 alpha:v456 saveTo:v457];
          v458 = v577;
        }

        else
        {
          v458 = v577;
          if (v594 != v576)
          {
            LODWORD(v457) = 1.0;
            *(float *)&v454 = v556;
            *(float *)&v455 = v556;
            *(float *)&v456 = v556;
            [a3 composeForeColorRed:&v653 green:v454 blue:v455 alpha:v456 saveTo:v457];
          }
        }

        v633 = 0u;
        v634 = 0u;
        v631 = 0u;
        v632 = 0u;
        v459 = [v350 countByEnumeratingWithState:&v631 objects:v645 count:16];
        if (v459)
        {
          v463 = v459;
          v464 = 0LL;
          v465 = *(void *)v632;
          v466 = v458 & v599;
          v467 = -1.0;
          v468 = 0.0;
LABEL_425:
          v469 = 0LL;
          while (1)
          {
            if (*(void *)v632 != v465) {
              objc_enumerationMutation(v602);
            }
            v470 = -8.0;
            if (v467 >= 16.0 || v468 < -8.0) {
              break;
            }
            v472 = &v618[v469];
            v473 = *(void **)(*((void *)&v631 + 1) + 8 * v469);
            if (v626)
            {
              if (v614)
              {
                if (!&v618[1LL - (void)v582 + v469]) {
                  [a3 restoreForeColor:&v653];
                }
              }

              else if (v472 == (_BYTE *)&dword_0 + 1)
              {
                LODWORD(v462) = 1.0;
                *(float *)&v470 = v583;
                *(float *)&v460 = v583;
                *(float *)&v461 = v583;
                [a3 composeForeColorRed:&v653 green:v470 blue:v460 alpha:v461 saveTo:v462];
              }
            }

            v474 = BYTE3(self->mSlideInformation);
            [v473 floatValue];
            v476 = v475;
            if (v474) {
              v477 = 1.96000004;
            }
            else {
              v477 = v475;
            }
            v478 = 1.79999995;
            if (v474)
            {
              v478 = v476;
            }

            else if (v167 < 1.0)
            {
              v477 = v603 * v476;
              objc_msgSend(a3, "localAspectRatio", 1.79999995);
              v478 = v603 * (float)((float)(v479 * 1.8) / 1.3333);
            }

            v480 = v468 - v478 * v62;
            v481 = (v467 + v477 * v62) * 0.200000003;
            if (!BYTE3(self->mSlideInformation)) {
              v480 = v621;
            }
            v482 = v477 * 0.200000003;
            v483 = v478 * 0.200000003;
            if (BYTE3(self->mSlideInformation)) {
              v484 = 0.0;
            }
            else {
              v484 = v481;
            }
            v485 = v480 * 0.200000003;
            objc_msgSend( *(id *)((char *)&self->mGrayImage + 1),  "setInnerRect:",  2.0 / (v629 * (v482 * self->super.mPixelSize.width)) * a9,  2.0 / (v629 * (v483 * self->super.mPixelSize.height)) * a9,  -4.0 / (v629 * (v482 * self->super.mPixelSize.width)) * a9 + 1.0,  -4.0 / (v629 * (v483 * self->super.mPixelSize.height)) * a9 + 1.0);
            if (v466)
            {
              v487 = [v604 objectAtIndex:v472];
              if (objc_msgSend( objc_msgSend(v487, "objectForKey:", @"type"),  "isEqualToString:",  @"photo"))
              {
                v489 = (NSNull *)-[NSMutableArray objectAtIndex:](v596, "objectAtIndex:", v464);
                if (v489 != +[NSNull null](&OBJC_CLASS___NSNull, "null"))
                {
                  v490 = -[MREffectDateline _isMovieForSlideAtIndex:]( self,  "_isMovieForSlideAtIndex:",  objc_msgSend(objc_msgSend(v487, "objectForKey:", @"photoIndex"), "integerValue"));
                  -[NSNull aspectRatio](v489, "aspectRatio");
                  v493 = v491;
                  if (v491 < 0.5 || v491 > 2.0)
                  {
                    -[MREffectDateline _sizeForBreakAspectRatio:size:inContext:]( self,  "_sizeForBreakAspectRatio:size:inContext:",  a3,  v491,  v482 * 5.0,  v483 * 5.0);
                    v494 = v503 * 0.200000003;
                    v495 = v504 * 0.200000003;
                  }

                  else
                  {
                    v494 = v482;
                    v495 = v483;
                    if (v490)
                    {
                      [a3 localAspectRatio];
                      v497 = v496;
                      if (v493 >= 1.0)
                      {
                        v495 = v482 / v493 * v497;
                        v494 = v482;
                      }

                      else
                      {
                        v495 = v483;
                        v494 = v483 * v493 / v497;
                      }
                    }
                  }

                  LODWORD(v492) = 0;
                  objc_msgSend( *(id *)((char *)&self->mGrayImage + 1),  "renderImageInner:inContext:atPosition:andSize:zRotation:",  v489,  a3,  v484,  v485,  v494,  v495,  v492);
                  -[NSNull removingFromCollection](v489, "removingFromCollection");
                  double v167 = v619;
                }

                ++v464;
              }

              else
              {
                LODWORD(v48_Block_object_dispose((const void *)(v1 - 48), 8) = 0;
                objc_msgSend( *(id *)((char *)&self->mGrayImage + 1),  "renderImageInner:inContext:atPosition:andSize:zRotation:",  v600,  a3,  v484,  v485,  v482,  v483,  v488);
                if (a9 < 1.0)
                {
                  objc_msgSend(a3, "blend:", 2, a9);
                  LODWORD(v49_Block_object_dispose((const void *)(v1 - 48), 8) = 1.0;
                  LODWORD(v499) = 1.0;
                  LODWORD(v500) = 1.0;
                  *(float *)&v501 = v588;
                  [a3 composeForeColorRed:v652 green:v498 blue:v499 alpha:v500 saveTo:v501];
                  LODWORD(v502) = 0;
                  objc_msgSend( *(id *)((char *)&self->mGrayImage + 1),  "renderImageInner:inContext:atPosition:andSize:zRotation:",  v593,  a3,  v484,  v485,  v482,  v483,  v502);
                  [a3 restoreForeColor:v652];
                  [a3 blend:0];
                }
              }
            }

            else
            {
              LODWORD(v486) = 0;
              objc_msgSend( *(id *)((char *)&self->mGrayImage + 1),  "renderImageInner:inContext:atPosition:andSize:zRotation:",  *(MRImageProvider **)((char *)&self->mDateWindowMask + 1),  a3,  v484,  v485,  v482,  v483,  v486);
            }

            float v62 = 0.5;
            v505 = v483 * 5.0 + 0.0500000007;
            v460 = v482 * 5.0 + 0.0500000007;
            HIDWORD(v461) = 0;
            if (!BYTE3(self->mSlideInformation)) {
              v505 = 0.0;
            }
            v468 = v468 - v505;
            v506 = -0.0;
            if (!BYTE3(self->mSlideInformation)) {
              v506 = v482 * 5.0 + 0.0500000007;
            }
            v467 = v467 + v506;
            if (v463 == (id)++v469)
            {
              v507 = [v602 countByEnumeratingWithState:&v631 objects:v645 count:16];
              v463 = v507;
              v618 += v469;
              if (v507) {
                goto LABEL_425;
              }
              break;
            }
          }
        }

        [a3 restoreModelViewMatrix:v655];
        [a3 restoreForeColor:&v654];
        ++v592;
        -[NSMutableArray removeAllObjects](v596, "removeAllObjects");
        float v87 = v575 + 1;
        float v86 = v576;
        float v59 = v570;
        float v85 = 1.0;
      }

      while ((char *)(v575 + 1) != v568);
      __int128 v73 = &v568[(void)v511];
      v568 = (char *)[obj countByEnumeratingWithState:&v641 objects:v651 count:16];
      if (!v568) {
        goto LABEL_476;
      }
    }
  }

  v600 = 0LL;
  v593 = 0LL;
LABEL_476:

  [v593 releaseByUser];
  [v600 releaseByUser];
}

LABEL_235:
            double v218 = v128;
            double v244 = 0u;
            double v245 = 0u;
            double v242 = 0u;
            double v243 = 0u;
            double v129 = (char *)[v100 countByEnumeratingWithState:&v242 objects:v273 count:16];
            if (v129)
            {
              double v130 = v129;
              double v131 = 0LL;
              double v132 = 0LL;
              double v133 = *(void *)v243;
              while (2)
              {
                double v134 = 0LL;
                double v135 = &v130[(void)v131];
                do
                {
                  if (*(void *)v243 != v133) {
                    objc_enumerationMutation(v100);
                  }
                  if (v132 > 4)
                  {
                    double v135 = &v134[(void)v131];
                    goto LABEL_246;
                  }

                  v132 += -[MREffectShiftingTiles _widthForLayout:]( self,  "_widthForLayout:",  *(void *)(*(void *)(*((void *)&v242 + 1) + 8LL * (void)v134++) + 8LL));
                }

                while (v130 != v134);
                double v130 = (char *)[v100 countByEnumeratingWithState:&v242 objects:v273 count:16];
                double v131 = v135;
                if (v130) {
                  continue;
                }
                break;
              }
            }

            else
            {
              double v135 = 0LL;
            }

LABEL_246:
            double v225 = v135;
            double v240 = 0u;
            double v241 = 0u;
            double v238 = 0u;
            double v239 = 0u;
            double v136 = [v100 countByEnumeratingWithState:&v238 objects:v272 count:16];
            if (v136)
            {
              double v137 = v136;
              double v138 = 0LL;
              double v139 = 0LL;
              double v140 = *(void *)v239;
LABEL_248:
              double v141 = 0LL;
              while (1)
              {
                if (*(void *)v239 != v140) {
                  objc_enumerationMutation(obja);
                }
                double v142 = v138 < 5;
                if (v138 > 4) {
                  break;
                }
                double v143 = *(void *)(*((void *)&v238 + 1) + 8 * v141);
                v138 += -[MREffectShiftingTiles _widthForLayout:](self, "_widthForLayout:", *(void *)(v143 + 8));
                if (v137 == (id)++v141)
                {
                  double v137 = [obja countByEnumeratingWithState:&v238 objects:v272 count:16];
                  v139 += v141;
                  double v142 = 1;
                  if (v137) {
                    goto LABEL_248;
                  }
                  break;
                }
              }
            }

            else
            {
              double v142 = 1;
            }

            double v144 = (unint64_t)[v211 randomInt];
            double v145 = v144 & 0x8000000000000001LL;
            double v146 = (v144 & 0x8000000000000001LL) == 1;
            if (v142)
            {
              double v147 = v225;
              double v148 = (uint64_t)v222;
              double v149 = obja;
              if (v145 != 1)
              {
                float v150 = 0LL;
                goto LABEL_263;
              }

LABEL_262:
              float v150 = v147 - (_BYTE *)[v105 count];
            }

            else
            {
              float v150 = (int64_t)v225;
              double v148 = (uint64_t)v222;
              double v149 = obja;
              if ((v144 & 0x8000000000000001LL) == 1)
              {
                double v147 = (char *)[obja count];
                goto LABEL_262;
              }
            }

LABEL_391:
          [v105 removeAllIndexes];
          goto LABEL_392;
        }

        if (v191)
        {
          if (v120 > 4
            || v187 >= (unint64_t)v188
            || (char *)-[MREffectShiftingTiles _widthForLayout:]( self,  "_widthForLayout:",  *((void *)[obja objectAtIndex:v213 + 1] + 1)) != (char *)&dword_0 + 1)
          {
            double v100 = obja;
            if (v120 >= 1) {
              goto LABEL_366;
            }
            goto LABEL_391;
          }

LABEL_379:
          double v196 = v105;
          double v197 = (uint64_t)(v213 + 1);
        }

        else
        {
          if (v187 < (unint64_t)v188
            && v120 != 3
            && (double v195 = v213 + 2, v213 + 2 < v189)
            && (char *)-[MREffectShiftingTiles _widthForLayout:]( self,  "_widthForLayout:",  *((void *)[obja objectAtIndex:v213 + 1] + 1)) == (char *)&dword_0 + 1 && (char *)-[MREffectShiftingTiles _widthForLayout:]( self,  "_widthForLayout:",  *((void *)objc_msgSend(obja, "objectAtIndex:", v213 + 2) + 1)) == (char *)&dword_0 + 1)
          {
            [v105 addIndex:v213 + 1];
          }

          else
          {
            if (v120 != 3
              && v187 < (unint64_t)v188
              && (char *)-[MREffectShiftingTiles _widthForLayout:]( self,  "_widthForLayout:",  *((void *)[obja objectAtIndex:v213 + 1] + 1)) == (char *)&dword_0 + 2)
            {
              goto LABEL_379;
            }

            if (v120 == 1) {
              goto LABEL_387;
            }
            double v195 = v213 - 1;
            if ((char *)-[MREffectShiftingTiles _widthForLayout:]( self,  "_widthForLayout:",  *((void *)[obja objectAtIndex:v213 - 1] + 1)) == (char *)&dword_0 + 1 && (char *)-[MREffectShiftingTiles _widthForLayout:]( self,  "_widthForLayout:",  *((void *)objc_msgSend(obja, "objectAtIndex:", v213 - 2) + 1)) == (char *)&dword_0 + 1)
            {
              [v105 addIndex:v213 - 1];
              [v105 addIndex:v213 - 2];
              double v128 = 0LL;
              double v100 = obja;
              goto LABEL_393;
            }

            if ((char *)-[MREffectShiftingTiles _widthForLayout:]( self,  "_widthForLayout:",  *((void *)[obja objectAtIndex:v213 - 1] + 1)) != (char *)&dword_0 + 2)
            {
LABEL_387:
              float v93 = v187 >= (unint64_t)v188;
              double v100 = obja;
              if (!v93
                && (char *)-[MREffectShiftingTiles _widthForLayout:]( self,  "_widthForLayout:",  *((void *)[obja objectAtIndex:v213 - 1] + 1)) == (char *)&dword_0 + 1 && (char *)-[MREffectShiftingTiles _widthForLayout:]( self,  "_widthForLayout:",  *((void *)objc_msgSend(obja, "objectAtIndex:", v213 + 1) + 1)) == (char *)&dword_0 + 1)
              {
                [v105 addIndex:v213 - 1];
                goto LABEL_352;
              }

              goto LABEL_391;
            }
          }

          double v196 = v105;
          double v197 = (uint64_t)v195;
        }

        [v196 addIndex:v197];
        double v128 = 0LL;
        double v100 = obja;
        goto LABEL_393;
      }

      double v100 = obja;
      double v117 = v219;
      if (v224 == (_BYTE *)&dword_0 + 2 || v224 == (_BYTE *)&dword_0 + 3 && v219 == 2)
      {
        double v127 = v213 - 1;
        goto LABEL_367;
      }

      double v127 = v213 - 1;
      if ((char *)-[MREffectShiftingTiles _widthForLayout:]( self,  "_widthForLayout:",  *((void *)[obja objectAtIndex:v213 - 1] + 1)) == (char *)&dword_0 + 1)
      {
        double v194 = v213 - 2;
        goto LABEL_357;
      }
    }

    else
    {
LABEL_230:
      if (v224 == (_BYTE *)&dword_0 + 2 || v224 == (_BYTE *)&dword_0 + 3 && v117 == 2)
      {
        double v127 = (char *)(v114 + 1);
        goto LABEL_367;
      }

      double v127 = (char *)(v114 + 1);
      if ((char *)-[MREffectShiftingTiles _widthForLayout:]( self,  "_widthForLayout:",  *((void *)[v100 objectAtIndex:v114 + 1] + 1)) == (char *)&dword_0 + 1)
      {
        double v194 = (char *)(v114 + 2);
LABEL_357:
        if ((char *)-[MREffectShiftingTiles _widthForLayout:]( self,  "_widthForLayout:",  *((void *)[v100 objectAtIndex:v194] + 1)) == (char *)&dword_0 + 1)
        {
          [v105 addIndex:v127];
          double v192 = v105;
          double v193 = v194;
          goto LABEL_369;
        }
      }
    }

    if ((char *)-[MREffectShiftingTiles _widthForLayout:]( self,  "_widthForLayout:",  *((void *)[v100 objectAtIndex:v127] + 1)) == (char *)&dword_0 + 2) {
      goto LABEL_368;
    }
    goto LABEL_391;
  }

  float v65 = v13;
LABEL_407:
  double v206 = *(NSMutableArray **)((char *)&self->mFirstLayout + 1);
  if (v206)
  {

    *(NSMutableArray **)((char *)&self->mFirstLayout + 1) = 0LL;
  }

  *(NSMutableArray **)((char *)&self->mFirstLayout + 1) = (NSMutableArray *)obja;
  double v207 = v227;
  if (v227 > v65) {
    double v207 = *(int64_t *)((char *)&self->mLastSlideIndex + 1) + v65;
  }
  *(int64_t *)((char *)&self->mLastCol + 1) = v207;
  BYTE1(self->mSlideStartIndex) = 0;
}

LABEL_32:
    float v29 = v19 - v38 < 0.100000001;
    if (v19 - v38 > v37 + -1.75) {
      float v29 = 1;
    }
    float v30 = v28 | v29;
    if (a3 < 1.25) {
      float v6 = 1LL;
    }
    else {
      float v6 = v30;
    }
    float v31 = [a5 preloadQueue];
    if ((v6 & 1) == 0
      && [v31 operationCount]
      && !-[MRLayerEffect asynchronousOperationsAreSuspended]( self->super.mEffectLayer,  "asynchronousOperationsAreSuspended"))
    {
      -[MRLayerEffect _stallRenderer](self->super.mEffectLayer, "_stallRenderer");
    }

    if ((_DWORD)v6 != -[MRLayerEffect asynchronousOperationsAreSuspended]( self->super.mEffectLayer,  "asynchronousOperationsAreSuspended")) {
      -[MRLayerEffect suspendAsynchronousOperations:](self->super.mEffectLayer, "suspendAsynchronousOperations:", v6);
    }
  }

  return v6;
}

LABEL_196:
            v340 = v143;
            if ((v313 & 1) == 0)
            {
              if ((v108 & 1) == 0)
              {
                double v156 = 0.02;
                if (v287 == v107) {
                  double v156 = 0.0;
                }
                double v157 = 0.0;
                if (v335 >= v156 + v277 * 0.05)
                {
                  double v157 = 1.0;
                  if (v335 < v267 + v156) {
                    double v157 = v335 - (float)(v156 + (float)(v262 * 0.05));
                  }
                }

                if (v142 == 1)
                {
                  double v108 = 0;
                  double v158 = v337 - (v157 * v255 + v256 * (v113 - Bounce(v157)));
LABEL_210:
                  v337 = v158;
                }

                else
                {
                  if (!v142 && v317 < (unint64_t)[v329 firstIndex])
                  {
                    double v108 = 0;
                    double v158 = v337 + v157 * v255 + v256 * (v113 - Bounce(v157));
                    goto LABEL_210;
                  }

LABEL_211:
                  double v108 = 0;
                }

                double v289 = 1;
                float v86 = CGPointZero.x;
                goto LABEL_213;
              }

              double v108 = 1;
            }

LABEL_213:
            -[MRCroppingSprite setNeedsInSpriteCoordinates:](v116, "setNeedsInSpriteCoordinates:", 1LL);
            double v100 = 2.0;
            __int128 v113 = 1.0;
            -[MRCroppingSprite setInnerRect:]( v116,  "setInnerRect:",  2.0 / (v119 * self->super.mPixelSize.width * 0.400000006),  2.0 / (v120 * self->super.mPixelSize.height * 0.400000006),  1.0 - 4.0 / (v119 * self->super.mPixelSize.width * 0.400000006),  1.0 - 4.0 / (v120 * self->super.mPixelSize.height * 0.400000006));
            double v159 = objc_alloc_init(&OBJC_CLASS___MRShiftingTilesRenderable);
            v159->size.CGFloat width = v119;
            v159->size.CGFloat height = v120;
            v159->position.CGFloat x = v337;
            v159->position.CGFloat y = v340;
            v159->isBreak = v123;
            -[MRShiftingTilesRenderable setSprite:](v159, "setSprite:", v116);
            -[MRShiftingTilesRenderable setSlide:](v159, "setSlide:", v115);
            -[NSMutableArray addObject:](v343, "addObject:", v159);

            [v115 releaseByUser];
            if ((char *)v104 == ++v107)
            {
              if ((v108 & 1) != 0) {
                CGRect v299 = v299 + dbl_1F9950[v103 == 1];
              }
              double v97 = 1.0;
              if ((v289 & 1) != 0)
              {
                float v92 = v264;
                m = v263;
                if (v328) {
                  float v82 = v265 + 1;
                }
                else {
                  float v82 = v265 - 1;
                }
              }

              else
              {
                float v92 = v264;
                float v82 = v265;
                m = v263;
              }

              break;
            }
          }
        }

        v92 += -[MREffectShiftingTiles _displayWidthForLayout:](self, "_displayWidthForLayout:", v103);
        ++v317;
      }

      double v260 = [obj countByEnumeratingWithState:&v366 objects:v385 count:16];
    }

    while (v260);
  }

LABEL_223:
  double v160 = v254;
  if (v259 <= v258)
  {
    v338 = CGSizeZero.width;
    v334 = CGSizeZero.height;
    double v171 = a4;
    goto LABEL_299;
  }

  double v161 = *((void *)v252 + 7);
  double v162 = (void *)*((void *)v252 + 4);
  v332 = v252[9];
  v357 = 0u;
  v358 = 0u;
  v359 = 0u;
  v360 = 0u;
  double v288 = v162;
  double v163 = [v162 countByEnumeratingWithState:&v357 objects:v383 count:16];
  if (v163)
  {
    double v164 = v163;
    double v165 = 0LL;
    double v166 = 0LL;
    double v167 = *(void *)v358;
    do
    {
      for (n = 0LL; n != v164; n = (char *)n + 1)
      {
        if (*(void *)v358 != v167) {
          objc_enumerationMutation(v288);
        }
        double v169 = [*(id *)(*((void *)&v357 + 1) + 8 * (void)n) integerValue];
        v166 += -[MREffectShiftingTiles _slideCountForLayout:](self, "_slideCountForLayout:", v169);
        v165 += -[MREffectShiftingTiles _widthForLayout:](self, "_widthForLayout:", v169);
      }

      double v164 = [v288 countByEnumeratingWithState:&v357 objects:v383 count:16];
    }

    while (v164);
    char v295 = v166 - 1;
    double v170 = ~v165;
    double v160 = v254;
  }

  else
  {
    double v170 = -1LL;
    char v295 = -1LL;
  }

  v355 = 0u;
  v356 = 0u;
  v353 = 0u;
  v354 = 0u;
  double v172 = [v288 countByEnumeratingWithState:&v353 objects:v382 count:16];
  v338 = CGSizeZero.width;
  v334 = CGSizeZero.height;
  double v171 = a4;
  double v286 = v172;
  if (v172)
  {
    double v292 = 0LL;
    double v173 = v251 * 0.25 + -0.5;
    if (v261) {
      double v173 = 0.5 - v251 * 0.25;
    }
    v321 = v173;
    double v281 = v295 + v161;
    double v284 = *(void *)v354;
    v324 = CGPointZero.y;
    double v174 = 5LL;
    if (!v319) {
      double v174 = v170;
    }
    double v278 = v174;
    double v175 = v251 * -1.25 + 0.5;
    CGRect v300 = v251 * 0.5 + v175 * 0.5;
    CGFloat v275 = dbl_1F9960[v319 == 0];
    double v176 = 1.0;
    double v274 = dbl_1F9970[v319 == 0];
    if (v319) {
      double v177 = 0LL;
    }
    else {
      double v177 = -1LL;
    }
    double v272 = v177;
    v318 = (double)v160 * 0.385600001;
    v316 = (float)((float)v160 * 0.012);
    v297 = -(v251 * 0.5 + v175 * 0.5);
    double v178 = 2.0;
    do
    {
      double v179 = 0LL;
      do
      {
        if (*(void *)v354 != v284) {
          objc_enumerationMutation(v288);
        }
        double v180 = (char *)[*(id *)(*((void *)&v353 + 1) + 8 * v179) integerValue];
        double v181 = -[MREffectShiftingTiles _displaySlideCountForLayout:](self, "_displaySlideCountForLayout:", v180);
        double v290 = v179;
        if (!v319) {
          v292 += -[MREffectShiftingTiles _widthForLayout:](self, "_widthForLayout:", v180);
        }
        double v182 = (uint64_t)[v268 randomInt];
        if (v182 >= 0) {
          double v183 = v182 & 1;
        }
        else {
          double v183 = -(v182 & 1);
        }
        if (v181 >= 1)
        {
          double v184 = 0LL;
          double v185 = v292 + v278;
          double v186 = v292 + v278 - 2;
          if (v319) {
            double v186 = v292 + v278;
          }
          double v187 = (float)((float)(v292 + v278 + 1) * 0.012);
          double v188 = (double)v185 * 0.385600001 + -0.8072 + v187;
          CGRect v303 = v274 + (double)(v185 + v272) * 0.385600001 + -0.614399999 + v187;
          v306 = v275 + (double)v186 * 0.385600001 + -0.421599999 + v187;
          if (v180 == (_BYTE *)&dword_0 + 2) {
            double v189 = v178;
          }
          else {
            double v189 = v176;
          }
          v309 = v189;
          v311 = v188;
          do
          {
            double v190 = objc_msgSend( -[MREffectShiftingTiles _slideProviderWithAspectRatio:nearest:actual:]( self,  "_slideProviderWithAspectRatio:nearest:actual:",  v180 != 0,  v281 - v295 + v184,  v361),  "retainedByUserRenderedImageAtTime:inContext:withArguments:",  v171,  a5,  v9);
            double v191 = objc_alloc_init(&OBJC_CLASS___MRCroppingSprite);
            double v193 = v324;
            double v192 = CGPointZero.x;
            double v194 = CGSizeZero.width;
            double v195 = v334;
            switch((unint64_t)v180)
            {
              case 0uLL:
                double v192 = v311;
                double v194 = 0.385600001;
                goto LABEL_265;
              case 1uLL:
                double v194 = 0.783200001;
                double v192 = v303;
                goto LABEL_265;
              case 2uLL:
                double v196 = v300;
                if (v184) {
                  double v196 = v297;
                }
                double v193 = v321 + v196;
                double v192 = v311;
                double v194 = 0.385600001;
                double v195 = v251 * -1.25 + 0.5;
                break;
              case 3uLL:
                double v194 = 1.1808;
                double v192 = v306;
LABEL_265:
                double v193 = v321;
                double v195 = v251 * -1.5 + 1.0;
                break;
              default:
                break;
            }

            v341 = v192;
            [v190 aspectRatio];
            if ((v197 > v178 || v197 < 0.5) && v332 > 5.0)
            {
              objc_msgSend(v171, "localAspectRatio", v332);
              double v201 = v194 / v195 * v200;
              [v190 centerX];
              double v203 = v202;
              [v190 centerY];
              double v205 = v204;
              [v190 aspectRatio];
              double v207 = v206;
              [v190 aspectRatio];
              if (v207 <= v178)
              {
                if (v208 >= 0.5)
                {
                  double v176 = 1.0;
                }

                else
                {
                  [v190 aspectRatio];
                  double v176 = 1.0;
                  double v205 = -(1.0 - v209 / v201);
                }
              }

              else
              {
                double v176 = 1.0;
                double v203 = -(1.0 - v201 / v208);
              }

              [v190 setCenterX:v203];
              [v190 setCenterY:v205];
            }

            int v210 = [v329 count];
            if (v183 == v184) {
              double v211 = 0.0;
            }
            else {
              double v211 = 0.02;
            }
            float v212 = 0.0;
            if (v335 >= v211 + ((double)((unint64_t)v210 + 3) + v176) * 0.05)
            {
              float v212 = 1.0;
              if (v335 < ((double)((unint64_t)[v329 count] + 3) + 1.0) * 0.05 + 1.0 + v211) {
                float v212 = v335
              }
                     - (float)(v211
                             + (float)((float)((float)((unint64_t)[v329 count] + 3) + 1.0) * 0.05));
            }

            if (v328)
            {
              double v176 = 1.0;
              if (v328 == 2)
              {
                double v193 = v193 + (v251 + v251) * (1.0 - v212) + v309 * v195 * Bounce(v212);
                if (!v319)
                {
                  double v214 = v316 + v318 + v341;
                  goto LABEL_292;
                }

                double v213 = v316 + v318;
              }

              else
              {
                double v213 = v212 * v316 + v318 * (1.0 - Bounce(v212));
              }

              double v214 = v341 - v213;
            }

            else
            {
              double v176 = 1.0;
              double v214 = v341 + v212 * v316 + v318 * (1.0 - Bounce(v212));
            }

LABEL_292:
            -[MRCroppingSprite setNeedsInSpriteCoordinates:](v191, "setNeedsInSpriteCoordinates:", 1LL);
            double v178 = 2.0;
            -[MRCroppingSprite setInnerRect:]( v191,  "setInnerRect:",  2.0 / (v194 * self->super.mPixelSize.width * 0.400000006),  2.0 / (v195 * self->super.mPixelSize.height * 0.400000006),  v176 - 4.0 / (v194 * self->super.mPixelSize.width * 0.400000006),  v176 - 4.0 / (v195 * self->super.mPixelSize.height * 0.400000006));
            double v215 = objc_alloc_init(&OBJC_CLASS___MRShiftingTilesRenderable);
            v215->size.CGFloat width = v194;
            v215->size.CGFloat height = v195;
            v215->position.CGFloat x = v214;
            v215->position.CGFloat y = v193;
            v215->isBreak = 0;
            -[MRShiftingTilesRenderable setSprite:](v215, "setSprite:", v191);
            -[MRShiftingTilesRenderable setSlide:](v215, "setSlide:", v190);
            -[NSMutableArray addObject:](v343, "addObject:", v215);

            [v190 releaseByUser];
            ++v184;
            double v171 = a4;
            float64x2_t v9 = v327;
          }

          while (v181 != v184);
        }

        if (v319) {
          v292 += -[MREffectShiftingTiles _displayWidthForLayout:](self, "_displayWidthForLayout:", v180);
        }
        v295 -= v181;
        ++v179;
      }

      while ((id)(v290 + 1) != v286);
      double v286 = [v288 countByEnumeratingWithState:&v353 objects:v382 count:16];
    }

    while (v286);
  }

LABEL_299:
  [v171 setShader:@"SoftspritePremultiplied"];
  v351 = 0u;
  v352 = 0u;
  v349 = 0u;
  v350 = 0u;
  double v216 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( v343,  "countByEnumeratingWithState:objects:count:",  &v349,  v381,  16LL);
  if (v216)
  {
    double v217 = v216;
    double v218 = *(void *)v350;
    do
    {
      for (iuint64_t i = 0LL; ii != v217; iuint64_t i = (char *)ii + 1)
      {
        if (*(void *)v350 != v218) {
          objc_enumerationMutation(v343);
        }
        double v220 = *(double **)(*((void *)&v349 + 1) + 8LL * (void)ii);
        double v221 = [v220 slide];
        if (v221)
        {
          double v222 = v221;
          double v223 = v220[5];
          double v224 = v220[6];
          double v225 = v220[3];
          double v226 = v220[4];
          double v227 = [v220 sprite];
          if (v338 != v223 || v334 != v224)
          {
            double v230 = v223 * self->super.mPixelSize.width * 0.400000006;
            *(float *)&double v230 = v230;
            double v231 = v224 * self->super.mPixelSize.height * 0.400000006;
            *(float *)&double v231 = v231;
            [a4 setShaderUniformVec2:@"invRadii" :v230 forKey:v231];
          }

          LODWORD(v22_Block_object_dispose((const void *)(v1 - 48), 8) = 0;
          double v232 = v227;
          double v171 = a4;
          objc_msgSend( v232,  "renderImageOuter:inContext:atPosition:andSize:zRotation:",  v222,  a4,  v225,  v226,  v223,  v224,  v228);
          v334 = v224;
          v338 = v223;
        }

        else
        {
          double v171 = a4;
        }
      }

      double v217 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( v343,  "countByEnumeratingWithState:objects:count:",  &v349,  v381,  16LL);
    }

    while (v217);
  }

  [v171 unsetShader];
  v347 = 0u;
  v348 = 0u;
  v345 = 0u;
  v346 = 0u;
  double v233 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( v343,  "countByEnumeratingWithState:objects:count:",  &v345,  v380,  16LL);
  if (v233)
  {
    double v234 = v233;
    double v235 = 0;
    double v236 = 0;
    double v237 = *(void *)v346;
    while (1)
    {
      for (jj = 0LL; jj != v234; jj = (char *)jj + 1)
      {
        if (*(void *)v346 != v237) {
          objc_enumerationMutation(v343);
        }
        double v239 = *(void *)(*((void *)&v345 + 1) + 8LL * (void)jj);
        double v240 = [(id)v239 slide];
        if (v240)
        {
          double v241 = v240;
          if ((v235 & 1) == 0) {
            goto LABEL_323;
          }
          double v242 = a4;
          if (*(_BYTE *)(v239 + 56) != v236)
          {
            [a4 unsetShader];
LABEL_323:
            if (*(_BYTE *)(v239 + 56)) {
              double v243 = @"PlainTextureHighNoColor";
            }
            else {
              double v243 = @"PlainTextureNoColor";
            }
            double v242 = a4;
            [a4 setShader:v243];
            double v236 = *(_BYTE *)(v239 + 56) != 0;
          }

          double v244 = *(double *)(v239 + 40);
          double v245 = *(double *)(v239 + 48);
          v246 = *(double *)(v239 + 24);
          double v247 = *(double *)(v239 + 32);
          double v248 = [(id)v239 sprite];
          LODWORD(v249) = 0;
          objc_msgSend( v248,  "renderImageInner:inContext:atPosition:andSize:zRotation:",  v241,  v242,  v246,  v247,  v244,  v245,  v249);
          [(id)v239 setSlide:0];
          double v235 = 1;
          continue;
        }
      }

      double v234 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( v343,  "countByEnumeratingWithState:objects:count:",  &v345,  v380,  16LL);
      if (!v234)
      {
        if ((v235 & 1) != 0) {
          [a4 unsetShader];
        }
        break;
      }
    }
  }
}

        [a3 unsetShader];
        [a3 setShader:@"SoftspritePremultiplied"];
        v344 = v92 * v627;
        *(float *)&v344 = v92 * v627;
        LODWORD(v345) = 1.0;
        LODWORD(v346) = LODWORD(v344);
        LODWORD(v347) = LODWORD(v344);
        [a3 composeForeColorRed:v649 green:v344 blue:v346 alpha:v347 saveTo:v345];
        if (v592) {
          [a3 blend:2];
        }
        v348 = a9 < v121;
        v349 = v594 == v86;
        if (v594 != v86) {
          v348 = 0;
        }
        if (v561 >= 0.00001) {
          v348 = 0;
        }
        v626 = v348;
        v350 = v601;
        v351 = (char *)objc_msgSend(v601, "count", 0.00001, v561);
        else {
          v352 = (uint64_t)v351;
        }
        v582 = v351;
        if (v614 && v349) {
          v353 = &v351[-v352];
        }
        else {
          v353 = 0LL;
        }
        v618 = v353;
        v579 = v614 && v349;
        v354 = v599;
        if (v614 && v349) {
          v350 = objc_msgSend( v601,  "objectsAtIndexes:",  +[NSIndexSet indexSetWithIndexesInRange:](NSIndexSet, "indexSetWithIndexesInRange:"));
        }
        v355 = *(_OWORD *)[a3 foreColor];
        v653 = v355;
        v359 = v626 && v614;
        v574 = v359;
        if (v359 == 1)
        {
          LODWORD(v35_Block_object_dispose((const void *)(v1 - 48), 8) = 1.0;
          v360 = a3;
          *(float *)&v355 = v583;
        }

        else
        {
          if (v594 == v86) {
            goto LABEL_320;
          }
          LODWORD(v35_Block_object_dispose((const void *)(v1 - 48), 8) = 1.0;
          v360 = a3;
          *(float *)&v355 = v556;
        }

        LODWORD(v356) = v355;
        LODWORD(v357) = v355;
        [v360 composeForeColorRed:&v653 green:*(double *)&v355 blue:v356 alpha:v357 saveTo:v358];
LABEL_320:
        v637 = 0u;
        v638 = 0u;
        v635 = 0u;
        v636 = 0u;
        v602 = v350;
        v613 = [v350 countByEnumeratingWithState:&v635 objects:v646 count:16];
        if (v613)
        {
          v610 = *(void *)v636;
          v607 = v558 & v110;
          v364 = 1LL - (void)v582;
          v365 = -1.0;
          v366 = 0.0;
          v367 = v618;
          CGFloat width = CGSizeZero.width;
          v369 = height;
LABEL_322:
          v370 = 0LL;
          v591 = &v367[v364];
          v371 = width;
          v372 = v369;
          while (1)
          {
            if (*(void *)v636 != v610) {
              objc_enumerationMutation(v350);
            }
            v373 = -8.0;
            v374 = v365 >= 16.0 || v366 < -8.0;
            if (v374) {
              break;
            }
            v375 = *(void **)(*((void *)&v635 + 1) + 8LL * (void)v370);
            if (v626)
            {
              if (v614)
              {
              }

              else if ((char *)v370 + (void)v367 == (_BYTE *)&dword_0 + 1)
              {
                LODWORD(v363) = 1.0;
                *(float *)&v373 = v583;
                *(float *)&v361 = v583;
                *(float *)&v362 = v583;
                [a3 composeForeColorRed:&v653 green:v373 blue:v361 alpha:v362 saveTo:v363];
              }
            }

            v376 = BYTE3(self->mSlideInformation);
            [v375 floatValue];
            v378 = v377;
            if (v376) {
              v379 = 1.96000004;
            }
            else {
              v379 = v377;
            }
            v380 = 1.79999995;
            if (v376)
            {
              v380 = v378;
            }

            else if (v167 < 1.0)
            {
              v379 = v603 * v378;
              objc_msgSend(a3, "localAspectRatio", 1.79999995);
              v380 = v603 * (float)((float)(v381 * 1.8) / 1.3333);
            }

            v382 = (v365 + v379 * v62) * 0.200000003;
            if (BYTE3(self->mSlideInformation)) {
              v383 = v366 - v380 * v62;
            }
            else {
              v383 = v621;
            }
            CGFloat width = v379 * 0.200000003;
            v369 = v380 * 0.200000003;
            v384 = 0.0;
            if (!BYTE3(self->mSlideInformation)) {
              v384 = v382;
            }
            v628 = v384;
            objc_msgSend( *(id *)((char *)&self->mGrayImage + 1),  "setInnerRect:",  2.0 / (v629 * (width * self->super.mPixelSize.width)) * a9,  2.0 / (v629 * (v369 * self->super.mPixelSize.height)) * a9,  -4.0 / (v629 * (width * self->super.mPixelSize.width)) * a9 + 1.0,  -4.0 / (v629 * (v369 * self->super.mPixelSize.height)) * a9 + 1.0);
            if (v371 != width || v372 != v369)
            {
              v386 = v629 * (width * self->super.mPixelSize.width) * a9;
              *(float *)&v386 = v386;
              v387 = v629 * (v369 * self->super.mPixelSize.height) * a9;
              *(float *)&v387 = v387;
              [a3 setShaderUniformVec2:@"invRadii" :v386 forKey:v387];
            }

            v388 = v383 * 0.200000003;
            if (v607)
            {
              v389 = [v604 objectAtIndex:(char *)v370 + (void)v367];
              if (objc_msgSend( objc_msgSend(v389, "objectForKey:", @"type"),  "isEqualToString:",  @"photo"))
              {
                v391 = ImageKey((int64_t)objc_msgSend( objc_msgSend(v389, "objectForKey:", @"photoIndex"),  "integerValue"));
                v392 = -[NSDictionary objectForKey:]( -[MRLayerEffect slideProvidersForElementIDs]( self->super.mEffectLayer,  "slideProvidersForElementIDs"),  "objectForKey:",  v391);
                v393 = (NSNull *)[v392 retainedByUserRenderedImageAtTime:a3 inContext:a5 withArguments:a4];
                -[NSNull aspectRatio](v393, "aspectRatio");
                v395 = v394 <= 2.0 && v394 >= 0.5;
                double v167 = v619;
                if (v599)
                {
                  v587 = v369;
                  v585 = width;
                  if (!v395)
                  {
                    -[NSNull aspectRatio](v393, "aspectRatio");
                    -[MREffectDateline _sizeForBreakAspectRatio:size:inContext:]( self,  "_sizeForBreakAspectRatio:size:inContext:",  a3);
                    v587 = v396 * 0.200000003;
                    v585 = v397 * 0.200000003;
                    v398 = v397 * 0.200000003 / (v396 * 0.200000003);
                    [a3 localAspectRatio];
                    v400 = v398 * v399;
                    -[NSNull centerX](v393, "centerX");
                    v572 = v401;
                    -[NSNull centerY](v393, "centerY");
                    v403 = v402;
                    if (objc_msgSend( objc_msgSend( objc_msgSend(*(id *)((char *)&self->mDayImages + 1), "objectForKey:", v391),  "objectForKey:",  @"panEndDirection"),  "integerValue") == (id)-1) {
                      v404 = -1LL;
                    }
                    else {
                      v404 = 1LL;
                    }
                    -[NSNull aspectRatio](v393, "aspectRatio");
                    v406 = v405;
                    if (v405 < 1.0)
                    {
                      v423 = 1.0 - v405 / v400;
                      v424 = (double)v404;
                      if (v579) {
                        v425 = v423 * v424;
                      }
                      else {
                        v425 = -(v423 * v424);
                      }
                      v403 = v425;
                      v426 = v572;
                    }

                    else
                    {
                      v407 = 1.0 - v400 / v405;
                      if (v579) {
                        v408 = v407 * (double)v404;
                      }
                      else {
                        v408 = -(v407 * (double)v404);
                      }
                      v426 = v408;
                    }

                    if (self->super._panoramaPanningOffsets)
                    {
                      -[MREffect valueForPanoramaPanningForElementID:value:minValue:maxValue:]( self,  "valueForPanoramaPanningForElementID:value:minValue:maxValue:",  v391);
                      if (v406 < 1.0) {
                        v403 = v427;
                      }
                      else {
                        v426 = v427;
                      }
                    }

                    double v167 = v619;
                    -[NSNull setCenterX:](v393, "setCenterX:", v426);
                    -[NSNull setCenterY:](v393, "setCenterY:", v403);
                  }

                  -[NSNull insertingInCollection](v393, "insertingInCollection");
                  v428 = v393;
                  v350 = v602;
                  if (!v393) {
                    v428 = +[NSNull null](&OBJC_CLASS___NSNull, "null");
                  }
                  -[NSMutableArray addObject:](v596, "addObject:", v428);
                  v429 = [v392 canPlay];
                  v354 = v599;
                  float v62 = 0.5;
                  if (((v395 | v580) & 1) != 0)
                  {
                    v421 = width;
                    v422 = v369;
                    if ((v429 & v599) == 1)
                    {
                      v430 = [*(id *)&self->mIsRotating retainedByUserRenderedImageAtTime:a3 inContext:a5 withArguments:a4];
                      LODWORD(v431) = 0;
                      objc_msgSend( *(id *)((char *)&self->mGrayImage + 1),  "renderImageOuter:inContext:atPosition:andSize:zRotation:",  v430,  a3,  v628,  v388,  width,  v369,  v431);
                      [a3 unsetShader];
                      [a3 setShader:@"PlainTexture"];
                      LODWORD(v432) = 0;
                      objc_msgSend( *(id *)((char *)&self->mGrayImage + 1),  "renderImageInner:inContext:atPosition:andSize:zRotation:",  v430,  a3,  v628,  v388,  width,  v369,  v432);
                      [v430 releaseByUser];
                      [a3 unsetShader];
                      [a3 setShader:@"SoftspritePremultiplied"];
                      -[NSNull aspectRatio](v393, "aspectRatio");
                      v434 = v433;
                      [a3 localAspectRatio];
                      v436 = v435;
                      v437 = v434 < 1.0;
                      v438 = width / v434 * v436;
                      v439 = v369 * v434 / v436;
                      if (v434 < 1.0) {
                        v440 = v439;
                      }
                      else {
                        v440 = width;
                      }
                      if (v437) {
                        v441 = v369;
                      }
                      else {
                        v441 = v438;
                      }
                      [a3 blend:2];
                      v442 = *(MRImage **)((char *)&self->mGrayImage + 1);
                      LODWORD(v443) = 0;
                      v444 = v393;
                      v445 = a3;
                      v446 = v628;
                      v447 = v388;
                      v448 = v440;
                      v449 = v441;
                      double v167 = v619;
                      goto LABEL_412;
                    }

double ShatterSpline(unsigned int a1, double *a2, uint64_t a3, uint64_t a4, uint64_t a5, double a6)
{
  if (*a2 >= a6) {
    return *(double *)a5;
  }
  uint64_t v7 = a1 - 1;
  double result = 0.0;
  if (a1 >= 2)
  {
    if (a2[1] <= a6)
    {
      uint64_t v11 = 2LL;
      while (a1 != v11)
      {
        double v12 = a2[v11++];
        if (v12 > a6)
        {
          unsigned int v9 = v11 - 1;
          BOOL v10 = v11 - 1 < (unint64_t)a1;
          goto LABEL_13;
        }
      }

      BOOL v10 = 0;
      unsigned int v9 = a1;
    }

    else
    {
      unsigned int v9 = 1;
      BOOL v10 = 1;
    }

double smoothMapProgress(double a1)
{
  float v1 = (a1 + -0.5) * 3.14159265;
  return (sinf(v1) + 1.0) * 0.5;
}

BOOL pinFrontToBackSort(void *a1, void *a2)
{
  id v3 = [a1 objectForKey:@"location"];
  id v4 = [a2 objectForKey:@"location"];
  [v3 CGPointValue];
  double v6 = v5;
  [v4 CGPointValue];
  return v6 < v7;
}

LABEL_180:
    double v164 = 0;
    v608 = 0;
    double v162 = 0;
    double v163 = 0;
    goto LABEL_181;
  }

  if (v159 + v101->super.mMainDuration >= v100) {
    goto LABEL_180;
  }
  double v165 = objc_msgSend( -[NSDictionary objectForKey:]( v101->super.mFlattenedAttributes,  "objectForKey:",  @"pauseDuringPhaseOut"),  "BOOLValue");
  double v166 = objc_msgSend( -[NSDictionary objectForKey:]( v101->super.mFlattenedAttributes,  "objectForKey:",  @"dissolveDuringPhaseOut"),  "BOOLValue");
  double v163 = v166;
  if ((v165 & 1) != 0)
  {
    double v164 = 0;
    double v162 = 0;
    v608 = 1;
    goto LABEL_181;
  }

  if ((v166 & 1) != 0)
  {
    double v164 = 0;
    v608 = 0;
    double v162 = 0;
    double v163 = 1;
    goto LABEL_181;
  }

  v208 = -[NSDictionary objectForKey:](v606->super.mFlattenedAttributes, "objectForKey:", @"outDirection");
  if (v208) {
    double v168 = (uint64_t)[v208 integerValue];
  }
  else {
    double v168 = -1LL;
  }
  v534 = ((v100 - v606->super.mPhaseInDuration - v606->super.mMainDuration) / v606->super.mPhaseOutDuration + 3.0)
       * 1.57079633;
  v535 = (float)(sinf(v534) + 1.0);
  switch(v168)
  {
    case 0LL:
      double v164 = 0;
      v608 = 0;
      double v162 = 0;
      double v163 = 0;
      double v168 = 0LL;
      __int128 v70 = v70 - v68 * v535;
      break;
    case 1LL:
      double v164 = 0;
      v608 = 0;
      double v162 = 0;
      double v163 = 0;
      __int128 v69 = v69 - v68 * v535;
LABEL_457:
      double v168 = 1LL;
      break;
    case 2LL:
      double v164 = 0;
      v608 = 0;
      double v162 = 0;
      double v163 = 0;
      __int128 v70 = v70 + v68 * v535;
LABEL_459:
      double v168 = 2LL;
      break;
    case 3LL:
      double v164 = 0;
      v608 = 0;
      double v162 = 0;
      double v163 = 0;
      __int128 v69 = v69 + v68 * v535;
LABEL_461:
      double v168 = 3LL;
      break;
    default:
LABEL_451:
      double v164 = 0;
      v608 = 0;
      double v162 = 0;
      double v163 = 0;
      if (v168 == -1) {
        goto LABEL_181;
      }
      v608 = 0;
      double v162 = 0;
      double v163 = 0;
      break;
  }

LABEL_187:
  v567 = v69;
  MRMatrix_Clear((uint64_t)v647);
  *(float *)&double v173 = MRMatrix_SetRotationFromAnglesYXZDeg((uint64_t)v647, 0.0, -v618, 0.0);
  objc_msgSend(a4, "composeModelViewMatrix:saveTo:", v647, v646, v173);
  MRMatrix_Clear((uint64_t)v647);
  double v174 = v69;
  v564 = v70;
  double v175 = v70;
  *(float *)&double v176 = MRMatrix_Translate(v647, v174, v175, 0.0);
  objc_msgSend(a4, "composeModelViewMatrix:saveTo:", v647, 0, v176);
  MRMatrix_Clear((uint64_t)&v606->mSprites + 1);
  v545 = v70;
  v546 = v174;
  double v177 = v70;
  *(float *)&double v178 = MRMatrix_Translate((float *)((char *)&v606->mSprites + 1), v174, v177, 0.0);
  double v179 = -[NSDictionary objectForKey:]( -[MRLayerEffect slideProvidersForElementIDs](v606->super.mEffectLayer, "slideProvidersForElementIDs", v178),  "objectForKey:",  @"image12");
  double v180 = -[NSDictionary objectForKey:]( -[MRLayerEffect slideProvidersForElementIDs](v606->super.mEffectLayer, "slideProvidersForElementIDs"),  "objectForKey:",  @"image13");
  double v181 = -[NSDictionary objectForKey:]( -[MRLayerEffect slideProvidersForElementIDs](v606->super.mEffectLayer, "slideProvidersForElementIDs"),  "objectForKey:",  @"image14");
  double v182 = -[NSDictionary objectForKey:]( -[MRLayerEffect slideProvidersForElementIDs](v606->super.mEffectLayer, "slideProvidersForElementIDs"),  "objectForKey:",  @"image15");
  [a4 localAspectRatio];
  v617 = v68 * 0.5;
  double v184 = v68 * 0.5 * v183;
  else {
    double v185 = @"PlainTexture";
  }
  [a4 setShader:v185];
  double v186 = v164 | v608;
  if ((v164 | v608) != 1 || (v162 & 1) != 0 || (double v187 = 0LL, v597 = 0LL, v603 = 0LL, v188 = 0LL, v163))
  {
    double v189 = [v179 retainedByUserRenderedImageAtTime:a4 inContext:a5 withArguments:v100];
    [v189 setClampMode:2];
    double v190 = v68 * 0.5;
    +[MRCroppingSprite renderImage:inContext:atPosition:andSize:]( &OBJC_CLASS___MRCroppingSprite,  "renderImage:inContext:atPosition:andSize:",  v189,  a4,  v617 * -0.5,  v184 * -0.5,  v617,  v184);
    double v191 = [v180 retainedByUserRenderedImageAtTime:a4 inContext:a5 withArguments:v552];
    [v191 setClampMode:2];
    v603 = v191;
    +[MRCroppingSprite renderImage:inContext:atPosition:andSize:]( &OBJC_CLASS___MRCroppingSprite,  "renderImage:inContext:atPosition:andSize:",  v191,  a4,  v190 * 0.5,  v184 * -0.5,  v190,  v184);
    double v192 = [v181 retainedByUserRenderedImageAtTime:a4 inContext:a5 withArguments:v552];
    [v192 setClampMode:2];
    v597 = v192;
    double v100 = v552;
    +[MRCroppingSprite renderImage:inContext:atPosition:andSize:]( &OBJC_CLASS___MRCroppingSprite,  "renderImage:inContext:atPosition:andSize:",  v192,  a4,  v617 * -0.5,  v184 * 0.5,  v617,  v184);
    double v187 = [v182 retainedByUserRenderedImageAtTime:a4 inContext:a5 withArguments:v552];
    [v187 setClampMode:2];
    +[MRCroppingSprite renderImage:inContext:atPosition:andSize:]( &OBJC_CLASS___MRCroppingSprite,  "renderImage:inContext:atPosition:andSize:",  v187,  a4,  v190 * 0.5,  v184 * 0.5,  v190,  v184);
    double v188 = v189;
  }

  double v193 = v593 * 0.05;
  double v194 = v606;
  double v195 = v606->super.mPhaseInDuration;
  if (v168 < 0 || v195 <= v100)
  {
    double v199 = v164 | v608;
    if (v195 + v606->super.mMainDuration >= v100 || v168 < 0) {
      double v201 = 1;
    }
    else {
      double v201 = v608;
    }
    double v196 = v11.location;
    double v197 = v611;
    if ((v201 & 1) != 0)
    {
LABEL_241:
      [v188 releaseByUser];
      [v603 releaseByUser];
      [v597 releaseByUser];
      [v187 releaseByUser];
      double v198 = v590;
      if ((v199 & 1) == 0)
      {
        [a4 blend:2];
        MRMatrix_Clear((uint64_t)v652);
        MRMatrix_SetRotationFromAnglesYXZDeg((uint64_t)v652, 0.0, v618, 0.0);
        *(float *)&v246 = MRMatrix_Translate(v652, -v174, -v545, 0.0);
        objc_msgSend(a4, "composeModelViewMatrix:saveTo:", v652, v651, v246);
        double v247 = [*(id *)((char *)&v194->mLocalMatrix[14] + 1) retainedByUserRenderedImageAtTime:a4 inContext:a5 withArguments:v100];
        LODWORD(v24_Block_object_dispose((const void *)(v1 - 48), 8) = 0;
        +[MRCroppingSprite renderDumbImage:inContext:atPosition:andSize:zRotation:]( &OBJC_CLASS___MRCroppingSprite,  "renderDumbImage:inContext:atPosition:andSize:zRotation:",  v247,  a4,  CGPointZero.x,  CGPointZero.y,  2.0,  2.0,  v248);
        [v247 releaseByUser];
        [a4 restoreModelViewMatrix:v651];
        [a4 blend:0];
      }

      goto LABEL_243;
    }

    double v202 = CGPointZero.x;
    double v203 = CGPointZero.y;
    v588 = v188;
    switch(v168)
    {
      case 0LL:
        [a4 localAspectRatio];
        double v203 = v203 + v68 * v204;
        goto LABEL_215;
      case 1LL:
        double v202 = v68 + CGPointZero.x;
        goto LABEL_218;
      case 2LL:
        [a4 localAspectRatio];
        double v203 = v203 - v68 * v210;
LABEL_215:
        double v209 = MRMatrix_Clear((uint64_t)v652);
        goto LABEL_216;
      case 3LL:
        double v202 = CGPointZero.x - v68;
LABEL_218:
        MRMatrix_Clear((uint64_t)v652);
        goto LABEL_219;
      default:
        double v209 = MRMatrix_Clear((uint64_t)v652);
        if ((v168 & 0xFFFFFFFFFFFFFFFDLL) == 1)
        {
LABEL_219:
          double v216 = v202;
          MRMatrix_Translate(v652, -v216, 0.0, 0.0);
          MRMatrix_SetRotationFromAnglesYXZDeg((uint64_t)v651, 180.0, 0.0, 0.0);
          MRMatrix_PostMultiply((uint64_t)v652, v651);
          double v214 = 0.0;
          double v215 = v202;
        }

        else
        {
LABEL_216:
          objc_msgSend(a4, "localAspectRatio", v209);
          float v212 = -v203 / v211;
          MRMatrix_Translate(v652, 0.0, v212, 0.0);
          MRMatrix_SetRotationFromAnglesYXZDeg((uint64_t)v651, 0.0, 180.0, 0.0);
          objc_msgSend(a4, "localAspectRatio", MRMatrix_PostMultiply((uint64_t)v652, v651));
          double v214 = v203 / v213;
          double v215 = 0.0;
        }

        *(float *)&double v217 = MRMatrix_Translate(v652, v215, v214, 0.0);
        objc_msgSend(a4, "composeModelViewMatrix:saveTo:", v652, v650, v217);
        double v218 = objc_msgSend( -[NSDictionary objectForKey:]( v606->super.mFlattenedAttributes,  "objectForKey:",  @"phaseOutOnlyWater"),  "BOOLValue");
        if ((v218 & 1) == 0)
        {
          double v219 = v68 * 0.5;
          +[MRCroppingSprite renderImage:inContext:atPosition:andSize:]( &OBJC_CLASS___MRCroppingSprite,  "renderImage:inContext:atPosition:andSize:",  v588,  a4,  v202 - v617 * 0.5,  v203 - v184 * 0.5,  v617,  v184);
          +[MRCroppingSprite renderImage:inContext:atPosition:andSize:]( &OBJC_CLASS___MRCroppingSprite,  "renderImage:inContext:atPosition:andSize:",  v603,  a4,  v202 + v219 * 0.5,  v203 - v184 * 0.5,  v219,  v184);
          +[MRCroppingSprite renderImage:inContext:atPosition:andSize:]( &OBJC_CLASS___MRCroppingSprite,  "renderImage:inContext:atPosition:andSize:",  v597,  a4,  v202 - v617 * 0.5,  v203 + v184 * 0.5,  v617,  v184);
          +[MRCroppingSprite renderImage:inContext:atPosition:andSize:]( &OBJC_CLASS___MRCroppingSprite,  "renderImage:inContext:atPosition:andSize:",  v187,  a4,  v202 + v219 * 0.5,  v203 + v184 * 0.5,  v219,  v184);
        }

        double v100 = v552;
        if (objc_msgSend( -[NSDictionary objectForKey:]( v606->super.mFlattenedAttributes,  "objectForKey:",  @"phaseOutWater"),  "BOOLValue"))
        {
          [a4 blend:2];
          double v220 = [*(id *)((char *)&v606->mBoxShadowBigScaled + 1) retainedByUserRenderedImageAtTime:a4 inContext:a5 withArguments:v552];
          [v220 setClampMode:2];
          LODWORD(v224) = 1.0;
          if ((v218 & 1) == 0)
          {
            double v225 = (v552 - v606->super.mPhaseInDuration - v606->super.mMainDuration) / v606->super.mPhaseOutDuration;
            LODWORD(v224) = powf(v225, 5.0);
          }

          LODWORD(v221) = 1.0;
          LODWORD(v222) = 1.0;
          LODWORD(v223) = 1.0;
          [a4 composeForeColorRed:v642 green:v221 blue:v222 alpha:v223 saveTo:v224];
          double v226 = v68 * 0.5;
          +[MRCroppingSprite renderImage:inContext:atPosition:andSize:]( &OBJC_CLASS___MRCroppingSprite,  "renderImage:inContext:atPosition:andSize:",  v220,  a4,  v202 - v617 * 0.5,  v203 - v184 * 0.5,  v617,  v184);
          +[MRCroppingSprite renderImage:inContext:atPosition:andSize:]( &OBJC_CLASS___MRCroppingSprite,  "renderImage:inContext:atPosition:andSize:",  v220,  a4,  v202 + v226 * 0.5,  v203 - v184 * 0.5,  v226,  v184);
          double v100 = v552;
          +[MRCroppingSprite renderImage:inContext:atPosition:andSize:]( &OBJC_CLASS___MRCroppingSprite,  "renderImage:inContext:atPosition:andSize:",  v220,  a4,  v202 - v617 * 0.5,  v203 + v184 * 0.5,  v617,  v184);
          +[MRCroppingSprite renderImage:inContext:atPosition:andSize:]( &OBJC_CLASS___MRCroppingSprite,  "renderImage:inContext:atPosition:andSize:",  v220,  a4,  v202 + v226 * 0.5,  v203 + v184 * 0.5,  v226,  v184);
          [a4 restoreForeColor:v642];
          [v220 releaseByUser];
          [a4 blend:0];
        }

        [a4 restoreModelViewMatrix:v650];
        double v194 = v606;
        double v193 = v593 * 0.05;
        break;
    }

LABEL_240:
    double v188 = v588;
    goto LABEL_241;
  }

  double v196 = v11.location;
  if ((v164 & 1) == 0)
  {
    double v205 = CGPointZero.x;
    double v206 = CGPointZero.y;
    v588 = v188;
    switch(v168)
    {
      case 0LL:
        [a4 localAspectRatio];
        double v206 = v206 - v68 * v207;
        break;
      case 1LL:
        double v205 = CGPointZero.x - v68;
        break;
      case 2LL:
        [a4 localAspectRatio];
        double v206 = v206 + v68 * v227;
        break;
      case 3LL:
        double v205 = v68 + CGPointZero.x;
        break;
      default:
        break;
    }

    MRMatrix_Clear((uint64_t)v652);
    double v228 = MRMatrix_Clear((uint64_t)v651);
    if ((v168 & 0xFFFFFFFFFFFFFFFDLL) == 1)
    {
      double v229 = v205;
      MRMatrix_Translate(v652, -v229, 0.0, 0.0);
      MRMatrix_SetRotationFromAnglesYXZDeg((uint64_t)v651, 180.0, 0.0, 0.0);
      MRMatrix_PostMultiply((uint64_t)v652, v651);
      double v230 = 0.0;
      double v231 = v205;
    }

    else
    {
      objc_msgSend(a4, "localAspectRatio", v228);
      double v233 = -v206 / v232;
      MRMatrix_Translate(v652, 0.0, v233, 0.0);
      MRMatrix_SetRotationFromAnglesYXZDeg((uint64_t)v651, 0.0, 180.0, 0.0);
      objc_msgSend(a4, "localAspectRatio", MRMatrix_PostMultiply((uint64_t)v652, v651));
      double v230 = v206 / v234;
      double v231 = 0.0;
    }

    *(float *)&double v235 = MRMatrix_Translate(v652, v231, v230, 0.0);
    double v197 = v611;
    double v199 = v186;
    objc_msgSend(a4, "composeModelViewMatrix:saveTo:", v652, v650, v235);
    double v236 = objc_msgSend( -[NSDictionary objectForKey:]( v606->super.mFlattenedAttributes,  "objectForKey:",  @"phaseInOnlyWater"),  "BOOLValue");
    if ((v236 & 1) == 0)
    {
      +[MRCroppingSprite renderImage:inContext:atPosition:andSize:]( &OBJC_CLASS___MRCroppingSprite,  "renderImage:inContext:atPosition:andSize:",  v588,  a4,  v205 - v617 * 0.5,  v206 - v184 * 0.5,  v617,  v184);
      double v237 = v205 + v617 * 0.5;
      +[MRCroppingSprite renderImage:inContext:atPosition:andSize:]( &OBJC_CLASS___MRCroppingSprite,  "renderImage:inContext:atPosition:andSize:",  v603,  a4,  v237,  v206 - v184 * 0.5,  v617,  v184);
      +[MRCroppingSprite renderImage:inContext:atPosition:andSize:]( &OBJC_CLASS___MRCroppingSprite,  "renderImage:inContext:atPosition:andSize:",  v597,  a4,  v205 - v617 * 0.5,  v206 + v184 * 0.5,  v617,  v184);
      +[MRCroppingSprite renderImage:inContext:atPosition:andSize:]( &OBJC_CLASS___MRCroppingSprite,  "renderImage:inContext:atPosition:andSize:",  v187,  a4,  v237,  v206 + v184 * 0.5,  v617,  v184);
    }

    double v100 = v552;
    if (objc_msgSend( -[NSDictionary objectForKey:]( v606->super.mFlattenedAttributes,  "objectForKey:",  @"phaseInWater"),  "BOOLValue"))
    {
      [a4 blend:2];
      double v238 = [*(id *)((char *)&v606->mBoxShadowBigScaled + 1) retainedByUserRenderedImageAtTime:a4 inContext:a5 withArguments:v552];
      [v238 setClampMode:2];
      double v242 = 1.0;
      if ((v236 & 1) == 0)
      {
        double v243 = v552 / v606->super.mPhaseInDuration;
        double v244 = powf(v243, 5.0);
        double v239 = 1.0;
        double v242 = 1.0 - v244;
      }

      *(float *)&double v241 = v242;
      LODWORD(v242) = 1.0;
      LODWORD(v239) = 1.0;
      LODWORD(v240) = 1.0;
      [a4 composeForeColorRed:v642 green:v242 blue:v239 alpha:v240 saveTo:v241];
      +[MRCroppingSprite renderImage:inContext:atPosition:andSize:]( &OBJC_CLASS___MRCroppingSprite,  "renderImage:inContext:atPosition:andSize:",  v238,  a4,  v205 - v617 * 0.5,  v206 - v184 * 0.5,  v617,  v184);
      double v245 = v205 + v617 * 0.5;
      +[MRCroppingSprite renderImage:inContext:atPosition:andSize:]( &OBJC_CLASS___MRCroppingSprite,  "renderImage:inContext:atPosition:andSize:",  v238,  a4,  v245,  v206 - v184 * 0.5,  v617,  v184);
      double v100 = v552;
      +[MRCroppingSprite renderImage:inContext:atPosition:andSize:]( &OBJC_CLASS___MRCroppingSprite,  "renderImage:inContext:atPosition:andSize:",  v238,  a4,  v205 - v617 * 0.5,  v206 + v184 * 0.5,  v617,  v184);
      +[MRCroppingSprite renderImage:inContext:atPosition:andSize:]( &OBJC_CLASS___MRCroppingSprite,  "renderImage:inContext:atPosition:andSize:",  v238,  a4,  v245,  v206 + v184 * 0.5,  v617,  v184);
      [a4 restoreForeColor:v642];
      [v238 releaseByUser];
      [a4 blend:0];
      double v194 = v606;
    }

    [a4 restoreModelViewMatrix:v650];
    goto LABEL_240;
  }

  [v188 releaseByUser];
  [v603 releaseByUser];
  [v597 releaseByUser];
  [v187 releaseByUser];
  double v197 = v611;
  double v198 = v590;
LABEL_243:
  v580 = v198 * 0.0500000007;
  v549 = v193;
  [a4 unsetShader];
  v613 = [*(id *)((char *)&v194->mGradientProvider + 1) retainedByUserRenderedImageAtTime:a4 inContext:a5 withArguments:v100];
  v591 = [*(id *)((char *)&v194->mPinProvider + 1) retainedByUserRenderedImageAtTime:a4 inContext:a5 withArguments:v100];
  v604 = [*(id *)((char *)&v194->mYellowPinProvider + 1) retainedByUserRenderedImageAtTime:a4 inContext:a5 withArguments:v100];
  [a4 blend:2];
  [a4 setShader:@"PlainTexture2D"];
  [a4 localAspectRatio];
  double v250 = v249;
  [a4 localAspectRatio];
  double v252 = v251;
  v629 = 0u;
  v630 = 0u;
  v631 = 0u;
  v632 = 0u;
  v609 = *(NSMutableArray **)((char *)&v194->mTextYOffsets + 1);
  double v253 = [v609 countByEnumeratingWithState:&v629 objects:v645 count:16];
  if (!v253) {
    goto LABEL_267;
  }
  double v254 = v253;
  double v255 = 0LL;
  double v256 = (float)(v252 * 0.038);
  v598 = (float)(v250 * 0.022);
  double v257 = *(void *)v630;
  double v258 = v580 * -0.24 + v580 * 0.5;
  double v259 = v549 * 0.5;
  v595 = v619 + 1;
  double v260 = 1.0 - v615;
  v586 = v260;
  do
  {
    double v261 = 0LL;
    do
    {
      v262 = v255;
      if (*(void *)v630 != v257) {
        objc_enumerationMutation(v609);
      }
      double v255 = *(void **)(*((void *)&v629 + 1) + 8LL * (void)v261);
      objc_msgSend(objc_msgSend(v255, "objectForKey:", @"location"), "CGPointValue");
      double v265 = v617 * v264;
      double v266 = v258 + v617 * v263;
      [a4 localAspectRatio];
      double v268 = v265 + v259 / v267;
      MRMatrix_Clear((uint64_t)v652);
      objc_msgSend(a4, "localAspectRatio", MRMatrix_Clear((uint64_t)v651));
      double v270 = v259 / v269 - v268;
      MRMatrix_Translate(v652, 0.0, v270, 0.0);
      MRMatrix_SetRotationFromAnglesYXZDeg((uint64_t)v651, 0.0, v618, 0.0);
      objc_msgSend(a4, "localAspectRatio", MRMatrix_PostMultiply((uint64_t)v652, v651));
      double v272 = v268 - v259 / v271;
      *(float *)&double v273 = MRMatrix_Translate(v652, 0.0, v272, 0.0);
      objc_msgSend(a4, "composeModelViewMatrix:saveTo:", v652, v650, v273);
      [a4 localAspectRatio];
      CGFloat v275 = MRMatrix_ProjectPoint(v653, v266, v268 * v274);
      CGFloat v277 = v276 + -0.0125000002;
      +[MRCroppingSprite renderDumbImage:inContext:atPosition:andSize:]( &OBJC_CLASS___MRCroppingSprite,  "renderDumbImage:inContext:atPosition:andSize:",  v613,  a4,  v275,  v276 + -0.0125000002,  0.0379999988,  v256);
      double v278 = v277 + v256 * 0.5;
      double v279 = v275 + -0.0148199995;
      CGFloat v280 = (char *)objc_msgSend(objc_msgSend(v255, "objectForKey:", @"index"), "integerValue");
      double v281 = (unint64_t)v280;
      double v282 = v619;
      if (v615 <= 0.0
        || v619 != v280 && v595 != v280
        || (double v283 = (char *)objc_msgSend(*(id *)((char *)&v606->mTextYOffsets + 1), "count", v615),
            double v282 = v619,
            v281 > (unint64_t)(v283 - 1)))
      {
        +[MRCroppingSprite renderDumbImage:inContext:atPosition:andSize:]( &OBJC_CLASS___MRCroppingSprite,  "renderDumbImage:inContext:atPosition:andSize:",  v604,  a4,  v279,  v278,  0.0219999999,  v598);
        goto LABEL_254;
      }

      if (v619 == (char *)v281)
      {
        +[MRCroppingSprite renderDumbImage:inContext:atPosition:andSize:]( &OBJC_CLASS___MRCroppingSprite,  "renderDumbImage:inContext:atPosition:andSize:",  v604,  a4,  v279,  v278,  0.0219999999,  v598);
        LODWORD(v284) = 1.0;
        LODWORD(v285) = 1.0;
        LODWORD(v286) = 1.0;
        *(float *)&CGFloat v287 = v586;
        [a4 composeForeColorRed:v642 green:v284 blue:v285 alpha:v286 saveTo:v287];
        +[MRCroppingSprite renderDumbImage:inContext:atPosition:andSize:]( &OBJC_CLASS___MRCroppingSprite,  "renderDumbImage:inContext:atPosition:andSize:",  v591,  a4,  v279,  v278,  0.0219999999,  v598);
        [a4 restoreForeColor:v642];
LABEL_254:
        double v255 = v262;
      }

LABEL_255:
      [a4 restoreModelViewMatrix:v650];
      double v261 = (char *)v261 + 1;
    }

    while (v254 != v261);
    double v288 = [v609 countByEnumeratingWithState:&v629 objects:v645 count:16];
    double v254 = v288;
  }

  while (v288);
  double v196 = v11.location;
  double v197 = v611;
  if (v255)
  {
    objc_msgSend(objc_msgSend(v255, "objectForKey:", @"location"), "CGPointValue");
    double v291 = v617 * v290;
    double v292 = v258 + v617 * v289;
    [a4 localAspectRatio];
    double v294 = v291 + v259 / v293;
    MRMatrix_Clear((uint64_t)v652);
    objc_msgSend(a4, "localAspectRatio", MRMatrix_Clear((uint64_t)v651));
    v296 = v259 / v295 - v294;
    MRMatrix_Translate(v652, 0.0, v296, 0.0);
    MRMatrix_SetRotationFromAnglesYXZDeg((uint64_t)v651, 0.0, v618, 0.0);
    objc_msgSend(a4, "localAspectRatio", MRMatrix_PostMultiply((uint64_t)v652, v651));
    CGRect v298 = v294 - v259 / v297;
    *(float *)&CGRect v299 = MRMatrix_Translate(v652, 0.0, v298, 0.0);
    objc_msgSend(a4, "composeModelViewMatrix:saveTo:", v652, v650, v299);
    [a4 localAspectRatio];
    CGRect v301 = MRMatrix_ProjectPoint(v653, v292, v294 * v300);
    CGRect v303 = v302 + -0.0125000002 + v256 * 0.5;
    v304 = v301 + -0.0148199995;
    v305 = (char *)objc_msgSend(objc_msgSend(v255, "objectForKey:", @"index"), "integerValue");
    if (v615 > 0.0
      && (v619 == v305 || v595 == v305)
      && v305 <= (char *)[*(id *)((char *)&v606->mTextYOffsets + 1) count] - 1)
    {
      +[MRCroppingSprite renderDumbImage:inContext:atPosition:andSize:]( &OBJC_CLASS___MRCroppingSprite,  "renderDumbImage:inContext:atPosition:andSize:",  v604,  a4,  v304,  v303,  0.0219999999,  v598);
      *(float *)&v515 = v615;
      LODWORD(v516) = 1.0;
      LODWORD(v517) = 1.0;
      LODWORD(v51_Block_object_dispose((const void *)(v1 - 48), 8) = 1.0;
      [a4 composeForeColorRed:v642 green:v516 blue:v517 alpha:v518 saveTo:v515];
      +[MRCroppingSprite renderDumbImage:inContext:atPosition:andSize:]( &OBJC_CLASS___MRCroppingSprite,  "renderDumbImage:inContext:atPosition:andSize:",  v591,  a4,  v304,  v303,  0.0219999999,  v598);
      [a4 restoreForeColor:v642];
    }

    else
    {
      +[MRCroppingSprite renderDumbImage:inContext:atPosition:andSize:]( &OBJC_CLASS___MRCroppingSprite,  "renderDumbImage:inContext:atPosition:andSize:",  v591,  a4,  v304,  v303,  0.0219999999,  v598);
    }

    [a4 restoreModelViewMatrix:v650];
  }

LABEL_267:
  [a4 blend:0];
  [v591 releaseByUser];
  [v604 releaseByUser];
  [v613 releaseByUser];
  if (v553 >= 0.25) {
    v306 = 1;
  }
  else {
    v306 = v582;
  }
  if ((v306 & 1) == 0)
  {
    objc_msgSend(a4, "unsetShader", 0.25, v553);
    [a4 restoreModelViewMatrix:v646];
    return;
  }

  v307 = v572;
  v308 = v572 + 4.0;
  v550 = objc_msgSend( *(id *)((char *)&v606->mTitleBoxRightProvider + 1),  "retainedByUserRenderedImageAtTime:inContext:withArguments:",  a4,  a5,  v552,  v553);
  if (v196)
  {
    v625 = 0u;
    v626 = 0u;
    v627 = 0u;
    v628 = 0u;
    v309 = objc_msgSend( obj,  "objectsAtIndexes:",  +[NSIndexSet indexSetWithIndexesInRange:]( NSIndexSet,  "indexSetWithIndexesInRange:",  0,  v196));
    v310 = [v309 countByEnumeratingWithState:&v625 objects:v644 count:16];
    if (v310)
    {
      v311 = v310;
      v312 = *(void *)v626;
      do
      {
        for (k = 0LL; k != v311; k = (char *)k + 1)
        {
          if (*(void *)v626 != v312) {
            objc_enumerationMutation(v309);
          }
          objc_msgSend( objc_msgSend(*(id *)(*((void *)&v625 + 1) + 8 * (void)k), "objectForKey:", @"pinDuration"),  "doubleValue");
          v308 = v308 + v314 + 0.4 + 1.75 + 0.3 + 0.4 + v572 * 2.0;
        }

        v311 = [v309 countByEnumeratingWithState:&v625 objects:v644 count:16];
      }

      while (v311);
    }
  }

  v315 = CGSizeZero.height;
  v316 = CGPointZero.y;
  [a4 unsetShader];
  v623 = 0u;
  v624 = 0u;
  v621 = 0u;
  v622 = 0u;
  p_isa = (id *)&v606->super.super.isa;
  v574 = *(NSMutableArray **)((char *)&v606->mTextYOffsets + 1);
  v614 = [v574 countByEnumeratingWithState:&v621 objects:v643 count:16];
  v543 = v316;
  CGFloat width = CGSizeZero.width;
  v559 = v315;
  if (!v614)
  {
    v555 = 0LL;
    v560 = 0LL;
    v321 = 1.0;
    v612 = -1LL;
    v320 = 0.0;
    v319 = v316;
    v605 = CGPointZero.x;
    v610 = v316;
    v556 = v316;
    v557 = CGPointZero.x;
    v561 = CGPointZero.x;
    v562 = v316;
    v565 = v315;
    v566 = CGSizeZero.width;
    v323 = v571;
    goto LABEL_389;
  }

  v578 = v308;
  v555 = 0LL;
  v560 = 0LL;
  v318 = *(void *)v622;
  v612 = -1LL;
  v568 = v549 * 0.5;
  v569 = v580 * -0.24 + v580 * 0.5;
  v319 = v316;
  v320 = 0.0;
  v605 = CGPointZero.x;
  v610 = v316;
  v321 = 1.0;
  v556 = v316;
  v557 = CGPointZero.x;
  v561 = CGPointZero.x;
  v562 = v316;
  v565 = v315;
  v566 = CGSizeZero.width;
  v322 = 0.5;
  v323 = v571;
  v570 = *(void *)v622;
  while (2)
  {
    v324 = 0LL;
    while (2)
    {
      if (*(void *)v622 != v318) {
        objc_enumerationMutation(v574);
      }
      v325 = *(void **)(*((void *)&v621 + 1) + 8 * v324);
      v326 = (char *)objc_msgSend(objc_msgSend(v325, "objectForKey:", @"index"), "integerValue");
      v327 = (NSUInteger)&v326[-v196];
      v329 = (unint64_t)v326 >= v196 && v327 < v11.length;
      v330 = [v197 containsIndex:v326];
      if (v329 || v330)
      {
        v331 = v323 > 0.0;
        objc_msgSend(objc_msgSend(v325, "objectForKey:", @"location"), "CGPointValue");
        v334 = v617 * v333;
        v335 = v569 + v617 * v332;
        [a4 localAspectRatio];
        v337 = v334 + v568 / v336;
        MRMatrix_Clear((uint64_t)v652);
        objc_msgSend(a4, "localAspectRatio", MRMatrix_Clear((uint64_t)v651));
        v339 = v568 / v338 - v337;
        MRMatrix_Translate(v652, 0.0, v339, 0.0);
        MRMatrix_SetRotationFromAnglesYXZDeg((uint64_t)v651, 0.0, v618, 0.0);
        objc_msgSend(a4, "localAspectRatio", MRMatrix_PostMultiply((uint64_t)v652, v651));
        v341 = v337 - v568 / v340;
        *(float *)&v342 = MRMatrix_Translate(v652, 0.0, v341, 0.0);
        objc_msgSend(a4, "composeModelViewMatrix:saveTo:", v652, v650, v342);
        v343 = v612;
        if (v331 && v326 == v619) {
          v343 = v327 + 1;
        }
        v612 = v343;
        v344 = v605;
        if (v331 && v326 == v619) {
          v344 = v335;
        }
        v605 = v344;
        v345 = v610;
        if (v331 && v326 == v619) {
          v345 = v337;
        }
        v610 = v345;
        [a4 localAspectRatio];
        obja = v337;
        v347 = MRMatrix_ProjectPoint(v653, v335, v337 * v346);
        v596 = v348;
        v599 = v347;
        if (v329)
        {
          v349 = 1.0;
          if (v553 <= v307 + v578 + 0.4 + 1.75)
          {
            v587 = 0;
            v351 = -1LL;
            v350 = (int64_t)&v326[-v196];
          }

          else
          {
            v350 = v327 + v11.length;
            v351 = -1LL;
            v587 = 1;
          }
        }

        else
        {
          v351 = (uint64_t)[v197 locationOfIndex:v326];
          v587 = 0;
          v350 = v351 + 2 * v11.length;
          v349 = 1.0;
        }

        v583 = ImageKey(v350);
        v352 = objc_msgSend(objc_msgSend(p_isa[2], "slideProvidersForElementIDs"), "objectForKey:", v583);
        [v352 imageAspectRatio];
        v356 = v355;
        v357 = v355 < v322;
        v358 = 2.0;
        v359 = v356 > 2.0 || v357;
        if (v359 != 1)
        {
          v360 = dbl_1F6AE0[v356 < v349];
          goto LABEL_318;
        }

        v360 = 1.0;
        v361 = v356 >= 1.0;
        v353 = 3.5999999;
        v354 = v356 / 3.5999999;
        v358 = 1.1;
        if (v356 / 3.5999999 < 1.1) {
          v361 = 0;
        }
        v362 = v356 <= 2.0 || !v361;
        if (v356 > 2.0 && v361) {
          v363 = 3.5999999;
        }
        else {
          v363 = v356;
        }
        if ((v356 <= 2.0 || !v361) && v356 < v322)
        {
          if (v356 <= 1.0)
          {
            v353 = v356 >= v349 ? v356 / 0.649999976 : 0.649999976 / v356;
            if (v353 >= 1.1)
            {
              v362 = 0;
              v363 = 0.649999976;
              goto LABEL_319;
            }
          }

LABEL_318:
          v362 = 1;
          v363 = v356;
        }

LABEL_319:
        objc_msgSend(a4, "localAspectRatio", v358, v353, v354);
        v365 = 2.0;
        if (v363 <= v364)
        {
          [a4 localAspectRatio];
          v365 = (v363 + v363) / v366;
        }

        v576 = v321;
        if (v329)
        {
          v367 = v554;
          v368 = v327;
        }

        else
        {
          v367 = v579;
          v368 = v351;
        }

        double v197 = v611;
        objc_msgSend(objc_msgSend(v367, "objectAtIndex:", v368), "CGSizeValue");
        v321 = 0.0;
        if (v369 >= 0.0949999988) {
          v321 = (v369 + -0.0949999988) / 0.905000001;
        }
        v371 = 3.5999999 / v356;
        if (v362) {
          v371 = v349;
        }
        v616 = v369;
        v577 = v320;
        v594 = v356;
        if (v363 >= v349)
        {
          v372 = v363 - (v363 + -1.0) * v321;
          v373 = v363;
          v589 = v372;
        }

        else
        {
          v589 = 1.0;
          v372 = v363 + (1.0 - v363) * v321;
          v373 = 1.0;
        }

        v374 = v360 * (v365 / v363);
        v592 = v360 * v365;
        v375 = v360 * v365 * 0.0949999988;
        v376 = 0.5;
        v377 = v375 * 0.5 / v373;
        v378 = v349 / v363;
        _NF = v363 < v349;
        v380 = v363 < v349;
        if (v363 >= v349) {
          v378 = v349;
        }
        v381 = v374 * 0.0949999988 * 0.5 / v378;
        v581 = v377;
        v382 = v377 / 0.0949999988;
        v575 = v374;
        v383 = v374 * v370 * 0.5;
        v384 = v349 / v372;
        if (v363 < v349) {
          v385 = v349 / v372;
        }
        else {
          v385 = v349;
        }
        v386 = v383 / v385;
        v387 = v321 + v382 - v382 * v321;
        v388 = v386 / v387;
        v389 = v381 / v387;
        v390 = v371 * v384;
        if (_NF) {
          v390 = 1.0;
        }
        if (v380) {
          v391 = v372;
        }
        else {
          v391 = v371;
        }
        objc_msgSend(v352, "setSizeFactor:", v390, v391);
        v392 = [v573 containsIndex:v326];
        v393 = v388;
        [a4 localAspectRatio];
        v395 = v394;
        if (v392)
        {
          [a4 localAspectRatio];
          v397 = (float)(v396 * -0.05);
          [a4 localAspectRatio];
          v399 = v398;
          v400 = v388;
          if (v389 <= v393) {
            v401 = v596 - v389 * v395;
          }
          else {
            v401 = v596 - (float)(v395 * v388);
          }
          v403 = v401 + v397 * 0.5;
          v376 = 0.5;
          v404 = v403 + v399 * -0.0075;
          v405 = v616;
        }

        else
        {
          if (v389 <= v393) {
            v402 = v596 + v389 * v394;
          }
          else {
            v402 = v596 + (float)(v394 * v388);
          }
          [a4 localAspectRatio];
          v407 = v402 + (float)(v406 * 0.05) * 0.5;
          [a4 localAspectRatio];
          v404 = v407 + v408 * 0.0075;
          v405 = v616;
          v400 = v388;
        }

        v409 = v594;
        v410 = v592 * v405 * v376 / v589;
        v411 = v410 / v387;
        v412 = (v599 + -0.0125000002) * (1.0 - v321);
        v413 = (1.0 - v321) * v404;
        v600 = v413;
        v414 = v411;
        if (v321 == 0.0)
        {
          v419 = v400;
          v420 = [v352 retainedByUserRenderedImageAtTime:a4 inContext:a5 withArguments:v552];
          v421 = v420;
          v422 = v362 | ~(_BYTE)v359;
          p_isa = (id *)&v606->super.super.isa;
          double v196 = v11.location;
          v318 = v570;
          if ((v422 & 1) == 0)
          {
            [v420 centerX];
            v424 = v423;
            [v421 centerY];
            v426 = v425;
            if (v594 <= 2.0)
            {
              v427 = 1.0 - v594;
              if (v594 >= 0.5) {
                v427 = 0.0;
              }
              if (v587) {
                v426 = v427;
              }
              else {
                v426 = -v427;
              }
            }

            else if (v587)
            {
              v424 = 1.0 - 1.0 / v594;
            }

            else
            {
              v424 = -(1.0 - 1.0 / v594);
            }

            [v421 setCenterX:v424];
            [v421 setCenterY:v426];
            if (v594 >= 1.0) {
              v428 = v594;
            }
            else {
              v428 = 1.0;
            }
            [v421 setScale:v428];
          }

          [a4 blend:2];
          [a4 localAspectRatio];
          if (v616 >= 0.0949999988) {
            v430 = 1.0;
          }
          else {
            v430 = v616 / 0.0949999988;
          }
          v431 = (v419 + v419) * v429 + v430 * 0.0700000003;
          v432 = (v419 + v419) * v429;
          else {
            v433 = @"PlainTexture";
          }
          [a4 setShader:v433];
          +[MRCroppingSprite renderDumbImage:inContext:atPosition:andSize:]( &OBJC_CLASS___MRCroppingSprite,  "renderDumbImage:inContext:atPosition:andSize:",  v550,  a4,  v412 + v430 * 0.0460000001,  v600 + v430 * 0.03,  v414 + v414 + v430 * 0.100000001,  v431);
          [a4 unsetShader];
          [a4 setShader:@"RoundedCorners"];
          LODWORD(v434) = 10.0;
          LODWORD(v435) = 10.0;
          [a4 setShaderUniformVec2:@"invRadii" :v434 forKey:v435];
          v436 = v414 * 0.1 / v419;
          *(float *)&v437 = v436;
          LODWORD(v436) = 1036831949;
          [a4 setShaderUniformVec2:@"radius" :v436 forKey:v437];
          v642[0] = xmmword_1FA0A4;
          v642[1] = unk_1FA0B4;
          [a4 setInSpriteCoordinatesPointer:v642];
          +[MRCroppingSprite renderImage:inContext:atPosition:andSize:]( &OBJC_CLASS___MRCroppingSprite,  "renderImage:inContext:atPosition:andSize:",  v421,  a4,  v412,  v600,  v414 + v414,  v432);
          [a4 unsetInSpriteCoordinatesPointer];
          [a4 unsetShader];
          [a4 blend:0];
          [v421 releaseByUser];
          v321 = v576;
          v409 = v577;
          v326 = v619;
        }

        else
        {
          v415 = 0.0;
          v416 = 0.0;
          if (v581 / v387 <= v414) {
            v416 = (v414 - v581 / v387) / -(v581 / v387 - v592 * v376);
          }
          CGFloat width = v416;
          p_isa = (id *)&v606->super.super.isa;
          double v196 = v11.location;
          v319 = obja;
          if (v389 <= v400) {
            v415 = (v400 - v389) / -(v389 - v575 * 0.5);
          }
          v559 = v415;
          v566 = v414 + v414;
          v417 = v400 + v400;
          [a4 localAspectRatio];
          v565 = v417 * v418;
          v561 = v412;
          v562 = v600;
          v556 = -(v321 * v564);
          v557 = -(v321 * v567);
          LOBYTE(v555) = v587 ^ 1;
          BYTE4(v555) = v359;
          v563 = 1;
          v560 = v583;
          v318 = v570;
        }

        v323 = v571;
        v307 = v572;
        if (v329)
        {
          objc_msgSend(objc_msgSend(v325, "objectForKey:", @"pinDuration"), "doubleValue");
          v578 = v578 + v438 + 0.4 + 1.75 + 0.3 + 0.4 + v572 * 2.0;
        }

        v322 = 0.5;
        [a4 restoreModelViewMatrix:v650];
        v320 = v409;
        v619 = v326;
      }

      if (v614 != (id)++v324) {
        continue;
      }
      break;
    }

    v439 = [v574 countByEnumeratingWithState:&v621 objects:v643 count:16];
    v614 = v439;
    if (v439) {
      continue;
    }
    break;
  }

LABEL_389:
  [a4 setShader:@"PlainTexture"];
  if (v612 == -1 || v323 <= 0.0)
  {
    v454 = &qword_1F6000;
    v449 = v567;
    v450 = v563;
    v455 = v560;
    v451 = width;
  }

  else
  {
    [a4 blend:2];
    MRMatrix_Clear((uint64_t)v652);
    MRMatrix_Clear((uint64_t)v651);
    [a4 localAspectRatio];
    v441 = v549 * 0.5 / v440 - v610;
    MRMatrix_Translate(v652, 0.0, v441, 0.0);
    MRMatrix_SetRotationFromAnglesYXZDeg((uint64_t)v651, 0.0, v618, 0.0);
    objc_msgSend(a4, "localAspectRatio", MRMatrix_PostMultiply((uint64_t)v652, v651));
    v443 = v610 - v549 * 0.5 / v442;
    *(float *)&v444 = MRMatrix_Translate(v652, 0.0, v443, 0.0);
    objc_msgSend(a4, "composeModelViewMatrix:saveTo:", v652, v650, v444);
    v449 = v567;
    v450 = v563;
    v451 = width;
    if (v544)
    {
      *(float *)&v448 = v323;
      LODWORD(v445) = 1.0;
      LODWORD(v446) = 1.0;
      LODWORD(v447) = 1.0;
      [a4 composeForeColorRed:v642 green:v445 blue:v446 alpha:v447 saveTo:v448];
      v323 = 1.0;
    }

    v452 = [v573 containsIndex:v196 + v612 - 1];
    [a4 localAspectRatio];
    objc_msgSend( p_isa,  "_drawArrowInContext:atTime:withArguments:atPoint:scale:withTextAtIndex:t:pointDown:m:",  a4,  a5,  v612,  v452,  v653,  v552,  v605,  v610 + (float)(v453 * 0.05) * -0.5,  v323,  v567,  v564);
    [a4 restoreModelViewMatrix:v650];
    if (v544) {
      [a4 restoreForeColor:v642];
    }
    [a4 blend:0];
    v454 = &qword_1F6000;
    v455 = v560;
  }

  [a4 localAspectRatio];
  v457 = v565 * 0.5 / v456;
  v458 = v559;
  if (v451 >= v559) {
    v458 = v451;
  }
  v459 = (1.0 - v458) * 0.1;
  if (v459 >= 0.00001) {
    v460 = v459;
  }
  else {
    v460 = 0.00001;
  }
  v461 = v459 * (v566 * 0.5) / v457;
  if (v461 < 0.00001) {
    v461 = 0.00001;
  }
  v620 = v461;
  if ((v450 & 1) != 0)
  {
    MRMatrix_Clear((uint64_t)v652);
    MRMatrix_SetRotationFromAnglesYXZDeg((uint64_t)v652, 0.0, v618, 0.0);
    *(float *)&v462 = MRMatrix_Translate(v652, -v546, -v545, 0.0);
    objc_msgSend(a4, "composeModelViewMatrix:saveTo:", v652, v650, v462);
    [a4 blend:2];
    [a4 localAspectRatio];
    v464 = v562 + v564 * (1.0 - v321) * v463;
    v465 = objc_alloc(&OBJC_CLASS___MRTiledSprite);
    LODWORD(v466) = 0;
    v467 = -[MRTiledSprite initWithPosition:size:zRotation:innerRect:context:]( v465,  "initWithPosition:size:zRotation:innerRect:context:",  a4,  v561 + v449 * (1.0 - v321),  v464,  v321 * v566,  v321 * v565,  v466,  *(void *)&v460,  *(void *)&v620,  v460 * -2.0 + 1.0,  v620 * -2.0 + 1.0);
    *(void *)&v642[0] = 0LL;
    DWORD2(v642[0]) = 1008981770;
    v468 = 0.7;
    if (v321 < 1.0) {
      v468 = v321 * 0.7;
    }
    v469 = v468;
    *((float *)v642 + 3) = v469;
    [a4 composeForeColor:v642 saveTo:v641];
    v470 = objc_alloc(&OBJC_CLASS___MRTiledSprite);
    LODWORD(v471) = 0;
    v472 = -[MRTiledSprite initWithPosition:size:zRotation:innerRect:context:]( v470,  "initWithPosition:size:zRotation:innerRect:context:",  a4,  CGPointZero.x,  v543,  2.0,  2.0,  v471,  0LL,  0LL,  0x3FF0000000000000LL,  0x3FF0000000000000LL);
    v473 = v472;
    if (v321 < 1.0) {
      -[MRTiledSprite subtractSprite:](v472, "subtractSprite:", v467);
    }
    -[MRTiledSprite renderDumbImage:inContext:](v473, "renderDumbImage:inContext:", 0LL, a4);

    [a4 restoreForeColor:v641];
    [a4 blend:0];
    [a4 restoreModelViewMatrix:v650];
  }

  __asm { FMOV            V11.2S, #1.0 }

  if (!(_NF ^ _VF | _ZF))
  {
    v461 = v547;
    if (v547 > 0.0)
    {
      objc_msgSend(a4, "blend:", 2, v547);
      MRMatrix_Clear((uint64_t)v652);
      objc_msgSend(a4, "localAspectRatio", MRMatrix_Clear((uint64_t)v651));
      v477 = *((double *)v454 + 133);
      v478 = v477 / v476 - v617 * -0.449999988;
      MRMatrix_Translate(v652, 0.0, v478, 0.0);
      MRMatrix_SetRotationFromAnglesYXZDeg((uint64_t)v651, 0.0, v618, 0.0);
      objc_msgSend(a4, "localAspectRatio", MRMatrix_PostMultiply((uint64_t)v652, v651));
      v480 = v617 * -0.449999988 - v477 / v479;
      *(float *)&v481 = MRMatrix_Translate(v652, 0.0, v480, 0.0);
      objc_msgSend(a4, "composeModelViewMatrix:saveTo:", v652, v650, v481);
      [a4 localAspectRatio];
      v483 = MRMatrix_ProjectPoint(v653, 0.0, v617 * -0.449999988 * v482);
      v485 = v484;
      *(void *)&v642[0] = _D11;
      DWORD2(v642[0]) = 1065353216;
      v486 = v547;
      *((float *)v642 + 3) = v486;
      [a4 composeForeColor:v642 saveTo:v641];
      objc_msgSend( p_isa,  "_drawTitleInContext:atTime:withArguments:atPoint:scale:withTextAtIndex:",  a4,  a5,  0,  v552,  v483,  v485,  v548);
      [a4 restoreForeColor:v641];
      [a4 blend:0];
      [a4 restoreModelViewMatrix:v650];
    }
  }

  objc_msgSend(a4, "unsetShader", v461);
  if (v455)
  {
    MRMatrix_Clear((uint64_t)v652);
    MRMatrix_Clear((uint64_t)v651);
    [a4 localAspectRatio];
    v488 = (1.0 - v321) * (v549 * 0.5 / v487 - v319);
    MRMatrix_Translate(v652, 0.0, v488, 0.0);
    MRMatrix_SetRotationFromAnglesYXZDeg((uint64_t)v651, 0.0, v618, 0.0);
    objc_msgSend(a4, "localAspectRatio", MRMatrix_PostMultiply((uint64_t)v652, v651));
    v490 = (1.0 - v321) * (v319 - v549 * 0.5 / v489);
    MRMatrix_Translate(v652, 0.0, v490, 0.0);
    MRMatrix_Clear((uint64_t)v651);
    MRMatrix_SetRotationFromAnglesYXZDeg((uint64_t)v651, 0.0, -v618, 0.0);
    MRMatrix_PostMultiply((uint64_t)v652, v651);
    MRMatrix_SetRotationFromAnglesYXZDeg((uint64_t)v651, 0.0, v618, 0.0);
    v491 = v557;
    v492 = v556;
    MRMatrix_Translate(v651, v491, v492, 0.0);
    objc_msgSend(a4, "composeModelViewMatrix:saveTo:", v652, v650, MRMatrix_PostMultiply((uint64_t)v652, v651));
    [a4 blend:3];
    *(void *)&v642[0] = _D11;
    DWORD2(v642[0]) = 1065353216;
    v493 = fmax(fmin(v321 + v321, 1.0), 0.0);
    *((float *)v642 + 3) = v493;
    [a4 composeForeColor:v642 saveTo:v641];
    v494 = [*(id *)((char *)p_isa + 417) retainedByUserRenderedImageAtTime:a4 inContext:a5 withArguments:v552];
    [a4 setShader:@"PlainTexture"];
    v495 = objc_alloc(&OBJC_CLASS___MRTiledSprite);
    LODWORD(v496) = 0;
    v497 = -[MRTiledSprite initWithPosition:size:zRotation:innerRect:context:]( v495,  "initWithPosition:size:zRotation:innerRect:context:",  a4,  v561,  v562,  v566,  v565,  v496,  *(void *)&v460,  *(void *)&v620,  v460 * -2.0 + 1.0,  v620 * -2.0 + 1.0);
    -[MRTiledSprite setNeedsInSpriteCoordinates:](v497, "setNeedsInSpriteCoordinates:", 1LL);
    v498 = objc_alloc(&OBJC_CLASS___MRTiledSprite);
    LODWORD(v499) = 0;
    v500 = -[MRTiledSprite initWithPosition:size:zRotation:innerRect:context:]( v498,  "initWithPosition:size:zRotation:innerRect:context:",  a4,  v561 + (v566 + v566 * 0.425 - v566) * 0.5,  v562 + v321 * ((1.0 - v321) * -1.5 + 2.0 - v565) * 0.5,  v566 + v566 * 0.425,  (1.0 - v321) * -1.5 + 2.0,  v499,  0LL,  0LL,  0x3FF0000000000000LL,  0x3FF0000000000000LL);
    -[MRTiledSprite subtractSprite:](v500, "subtractSprite:", v497);
    -[MRTiledSprite renderDumbImage:inContext:](v500, "renderDumbImage:inContext:", v494, a4);

    [a4 restoreForeColor:v641];
    [v494 releaseByUser];
    v501 = fmin(v321 * 4.0, 1.0);
    if (v501 <= 0.0) {
      v502 = 1.0;
    }
    else {
      v502 = 1.0 - v501;
    }
    v503 = v502;
    *((float *)v642 + 3) = v503;
    [a4 composeForeColor:v642 saveTo:v641];
    v504 = objc_alloc(&OBJC_CLASS___MRTiledSprite);
    LODWORD(v505) = 0;
    v506 = -[MRTiledSprite initWithPosition:size:zRotation:innerRect:context:]( v504,  "initWithPosition:size:zRotation:innerRect:context:",  a4,  v561 + 0.0450000018 + v321 * 0.600000024,  v562 + 0.0299999993,  v321 * 0.100000001 + 0.100000001 + v566,  v565 + 0.0700000003,  v505,  0LL,  0LL,  0x3FF0000000000000LL,  0x3FF0000000000000LL);
    -[MRTiledSprite subtractSprite:](v506, "subtractSprite:", v497);
    -[MRTiledSprite renderDumbImage:inContext:](v506, "renderDumbImage:inContext:", v550, a4);

    [a4 unsetShader];
    [a4 restoreForeColor:v641];
    [a4 blend:2];
    v507 = objc_msgSend( objc_msgSend(objc_msgSend(p_isa[2], "slideProvidersForElementIDs"), "objectForKey:", v455),  "retainedByUserRenderedImageAtTime:inContext:withArguments:",  a4,  a5,  v552);
    [a4 localAspectRatio];
    v509 = v508;
    [v507 aspectRatio];
    if (v510 <= 2.0 || ([v507 aspectRatio], v511 < 1.0) || v511 / 3.5999999 < 1.1)
    {
      [v507 aspectRatio];
      v512 = v460;
      if (v513 < 0.5)
      {
        [v507 aspectRatio];
        if (v514 <= 1.0)
        {
          v519 = v514 < 1.0 ? 0.649999976 / v514 : v514 / 0.649999976;
          if (((v519 >= 1.1) & BYTE4(v555)) != 0) {
            goto LABEL_430;
          }
        }
      }
    }

    else
    {
      v512 = v460;
      if ((v555 & 0x100000000LL) == 0) {
        goto LABEL_446;
      }
LABEL_430:
      v520 = v566 / v565 * v509;
      [v507 centerX];
      v522 = v521;
      [v507 centerY];
      v524 = 1.0 - v520 / v320;
      if ((v555 & 1) != 0) {
        v524 = -v524;
      }
      v525 = 0.0;
      v526 = v320 / v520;
      if (v320 < 0.5) {
        v525 = 1.0 - v526;
      }
      if ((v555 & 1) != 0) {
        v525 = -v525;
      }
      if (v320 <= 2.0) {
        v527 = v522;
      }
      else {
        v527 = v524;
      }
      if (v320 <= 2.0) {
        v528 = v525;
      }
      else {
        v528 = v523;
      }
      [v507 setCenterX:v527];
      [v507 setCenterY:v528];
      if (v526 >= 1.0) {
        v529 = v526;
      }
      else {
        v529 = 1.0;
      }
      [v507 setScale:v529];
    }

LABEL_446:
    [a4 setShader:@"RoundedCorners"];
    LODWORD(v530) = 10.0;
    LODWORD(v531) = 10.0;
    [a4 setShaderUniformVec2:@"invRadii" :v530 forKey:v531];
    *(float *)&v532 = v512;
    HIDWORD(v533) = HIDWORD(v620);
    *(float *)&v533 = v620;
    [a4 setShaderUniformVec2:@"radius" :v532 forKey:v533];
    -[MRTiledSprite renderImageOuter:inContext:](v497, "renderImageOuter:inContext:", v507, a4);
    [a4 unsetShader];
    [a4 blend:0];
    [a4 setShader:@"PlainTexture"];
    -[MRTiledSprite renderImageInner:inContext:](v497, "renderImageInner:inContext:", v507, a4);
    [a4 unsetShader];
    [v507 releaseByUser];

    [a4 restoreModelViewMatrix:v650];
  }

  [v550 releaseByUser];
  [a4 restoreModelViewMatrix:v646];
  [a4 blend:0];
}

void sub_F6B38(_Unwind_Exception *a1)
{
}

void sub_F6BCC(_Unwind_Exception *a1)
{
}

void sub_F6D54(_Unwind_Exception *a1)
{
}

void sub_F6E04(_Unwind_Exception *a1)
{
}

void sub_F72C8(_Unwind_Exception *a1)
{
}

void sub_F75BC(_Unwind_Exception *a1)
{
}

void sub_F7660(_Unwind_Exception *a1)
{
}

LABEL_114:
  double v183 = v23;
  double v106 = v26;
  double v223 = v35;
  double v205 = v24;
  double v218 = a5;
  mSourceLayer = self->super.mSourceLayer;
  if (mSourceLayer)
  {
    double v173 = v22;
    double v175 = *(float *)&v20;
    double v108 = -[MRLayer renderingState](mSourceLayer, "renderingState");
    id v109 = v108;
    __int128 v110 = v215;
    if (v108)
    {
      double v189 = 0;
      v108->var15 = v25;
      v108->var2 = v175;
      LODWORD(v108->var3) = v173;
      v108->var4 = v34;
      v108->var7 = v212;
      v108->var8 = v215;
      v108->var9 = v36;
      v108->var10 = v12;
      v108->var11 = v206;
    }

    else
    {
      double v189 = 1;
    }
  }

  else
  {
    id v109 = 0LL;
    double v189 = 1;
    __int128 v110 = v215;
  }

  mTargetLayer = self->super.mTargetLayer;
  if (mTargetLayer)
  {
    __int128 v112 = -[MRLayer renderingState](mTargetLayer, "renderingState");
    __int128 v113 = v112;
    if (v112)
    {
      double v114 = 0;
      v112->var15 = v106;
      v112->var2 = v201;
      v112->var3 = v33;
      v112->var4 = v207;
      v112->var7 = v209;
      v112->var8 = v208;
      v112->var9 = v36;
      v112->var10 = v203;
      v112->var11 = v204;
      goto LABEL_124;
    }
  }

  else
  {
    __int128 v113 = 0LL;
  }

  double v114 = 1;
LABEL_124:
  if (v223) {
    [a4 cull:2];
  }
  if ((v37 & (v27 | v214 | v213) & 1) == 0)
  {
    else {
      double v118 = 0;
    }
    double v119 = v118 & v210;
    double v120 = self->super.mSourceLayer;
    -[MRLayerClock externalTime](-[MRLayer clock](v120, "clock", v173), "externalTime");
    double v121 = -[MRLayer retainedByUserRenderedImageAtTime:inContext:withArguments:]( v120,  "retainedByUserRenderedImageAtTime:inContext:withArguments:",  a4,  v218);
    if (v121)
    {
      double v122 = v121;
      [v122 releaseByUser];
    }

    double v122 = [a4 retainedByUserBlackImage];
LABEL_145:
    double v123 = self->super.mTargetLayer;
    -[MRLayerClock externalTime](-[MRLayer clock](v123, "clock"), "externalTime");
    double v124 = -[MRLayer retainedByUserRenderedImageAtTime:inContext:withArguments:]( v123,  "retainedByUserRenderedImageAtTime:inContext:withArguments:",  a4,  v218);
    if (v124)
    {
      double v125 = v124;
      if (![v124 isEmpty])
      {
LABEL_149:
        [a4 setShader:@"TransitionDissolve"];
        *(float *)&double v126 = v8;
        [a4 setShaderUniformFloat:@"progress" forKey:v126];
        *(float *)&double v127 = v11;
        [v122 setOnContext:a4 onTextureUnit:0 withReferenceAspectRatio:&v225 state:v127];
        double v233 = xmmword_1FA144;
        double v234 = unk_1FA154;
        [a4 setTextureCoordinatesPointer:&v233 onTextureUnit:0];
        *(float *)&double v128 = v11;
        [v125 setOnContext:a4 onTextureUnit:1 withReferenceAspectRatio:v238 state:v128];
        [a4 setTextureCoordinatesPointer:&v233 onTextureUnit:1];
        double v129 = __sincos_stret(v36 * 0.0174532925);
        float cosval = v129.__cosval;
        float sinval = v129.__sinval;
        v239[0] = (float)-cosval - (float)(v220 * sinval);
        v239[1] = (float)-sinval - (float)(v13 * cosval);
        v239[2] = v34;
        v239[3] = (float)(v220 * sinval) - cosval;
        v239[4] = (float)(v13 * cosval) - sinval;
        v239[5] = v34;
        v239[6] = cosval - (float)(v220 * sinval);
        v239[7] = sinval - (float)(v13 * cosval);
        v239[8] = v34;
        v239[9] = (float)(v220 * sinval) + cosval;
        v239[10] = (float)(v13 * cosval) + sinval;
        v239[11] = v34;
        [a4 setVertex3DPointer:v239];
        [a4 drawTriangleStripFromOffset:0 count:4];
        [a4 unsetVertexPointer];
        [a4 unsetTextureCoordinatesPointerOnTextureUnit:0];
        [v122 unsetOnContext:a4 onTextureUnit:0 state:&v225];
        [v122 releaseByUser];
        [a4 unsetTextureCoordinatesPointerOnTextureUnit:1];
        [v125 unsetOnContext:a4 onTextureUnit:1 state:v238];
        [v125 releaseByUser];
        [a4 unsetShader];
        if ((v119 & 1) == 0) {
          [a4 blend:0];
        }
        double v132 = v223;
        goto LABEL_241;
      }

      [v125 releaseByUser];
    }

    double v125 = [a4 retainedByUserBlackImage];
    goto LABEL_149;
  }

  if (((v219 | !v25) & 1) != 0)
  {
LABEL_131:
    double v116 = 0;
    goto LABEL_132;
  }

  if (-[MRLayer isNative3D](self->super.mSourceLayer, "isNative3D") && v205 ^ 1 | v202)
  {
    double v115 = self->super.mSourceLayer;
    -[MRLayerClock externalTime](-[MRLayer clock](v115, "clock"), "externalTime");
    -[MRLayer renderAtTime:inContext:withArguments:](v115, "renderAtTime:inContext:withArguments:", a4, v218);
    goto LABEL_131;
  }

  if ((v189 & 1) != 0)
  {
    double v133 = [a4 retainedByUserBlackImage];
    if (!v133) {
      goto LABEL_131;
    }
  }

  else
  {
    v109->var19 = v187;
    double v135 = self->super.mSourceLayer;
    -[MRLayerClock externalTime](-[MRLayer clock](v135, "clock"), "externalTime");
    double v133 = -[MRLayer retainedByUserRenderedImageAtTime:inContext:withArguments:]( v135,  "retainedByUserRenderedImageAtTime:inContext:withArguments:",  a4,  v218);
    v109->var19 = 0;
    if (!v133) {
      goto LABEL_131;
    }
  }

  if (v205) {
    double v136 = 3LL;
  }
  else {
    double v136 = 0LL;
  }
  objc_msgSend(a4, "blend:", v136, v173);
  double v137 = [v133 filterID];
  double v221 = v137;
  if (v197)
  {
    if (!v137)
    {
      else {
        double v142 = @"PlainTexture";
      }
      [a4 setShader:v142];
    }

    *(float *)&double v138 = v12;
    *(float *)&double v139 = v12;
    *(float *)&double v140 = v12;
    *(float *)&double v141 = v206;
    [a4 composeForeColorRed:v238 green:v138 blue:v139 alpha:v140 saveTo:v141];
  }

  else if (!v137)
  {
    else {
      double v152 = @"PlainTextureNoColor";
    }
    [a4 setShader:v152];
  }

  *(float *)&double v138 = v11;
  [v133 setOnContext:a4 onTextureUnit:0 withReferenceAspectRatio:&v224 state:v138];
  double v153 = v212 != 0.0;
  if (v110 != 0.0) {
    double v153 = 1;
  }
  if (v36 != 0.0) {
    double v153 = 1;
  }
  if (v196 != 0.0) {
    double v153 = 1;
  }
  if (v186 != 0.0) {
    double v153 = 1;
  }
  double v116 = v34 != 0.0 || v153;
  if (v116 == 1)
  {
    MRMatrix_SetRotationFromAnglesYXZDeg((uint64_t)&v233, v110, v212, v36);
    double v235 = v196;
    double v236 = v186;
    double v237 = v34;
    [a4 composeModelViewMatrix:&v233 saveTo:v239];
  }

  *(void *)&double v233 = __PAIR64__(LODWORD(v191), v190);
  *((void *)&v233 + 1) = v190;
  *(void *)&double v234 = __PAIR64__(LODWORD(v191), LODWORD(v195));
  *((void *)&v234 + 1) = __PAIR64__(HIDWORD(v190), LODWORD(v195));
  [a4 setTextureCoordinatesPointer:&v233 onTextureUnit:0];
  double v225 = v199;
  double v226 = v192;
  double v227 = v199;
  double v228 = v193;
  double v229 = v194;
  double v230 = v192;
  double v231 = v194;
  double v232 = v193;
  [a4 setVertex2DPointer:&v225];
  [a4 drawTriangleStripFromOffset:0 count:4];
  [a4 unsetVertexPointer];
  [a4 unsetTextureCoordinatesPointerOnTextureUnit:0];
  [v133 unsetOnContext:a4 onTextureUnit:0 state:&v224];
  [v133 releaseByUser];
  if (!v221) {
    [a4 unsetShader];
  }
  if (v197) {
    [a4 restoreForeColor:v238];
  }
LABEL_132:
  if (!v106) {
    goto LABEL_221;
  }
  if (-[MRLayer isNative3D](self->super.mTargetLayer, "isNative3D") && v200 ^ 1 | v188)
  {
    double v117 = self->super.mTargetLayer;
    -[MRLayerClock externalTime](-[MRLayer clock](v117, "clock"), "externalTime");
    -[MRLayer renderAtTime:inContext:withArguments:](v117, "renderAtTime:inContext:withArguments:", a4, v218);
    goto LABEL_221;
  }

  if ((v114 & 1) != 0)
  {
    double v134 = [a4 retainedByUserBlackImage];
    if (!v134) {
      goto LABEL_221;
    }
  }

  else
  {
    v113->var19 = v187;
    double v143 = self->super.mTargetLayer;
    -[MRLayerClock externalTime](-[MRLayer clock](v143, "clock"), "externalTime");
    double v134 = -[MRLayer retainedByUserRenderedImageAtTime:inContext:withArguments:]( v143,  "retainedByUserRenderedImageAtTime:inContext:withArguments:",  a4,  v218);
    v113->var19 = 0;
    if (!v134) {
      goto LABEL_221;
    }
  }

  if (v200) {
    double v144 = 3LL;
  }
  else {
    double v144 = 0LL;
  }
  objc_msgSend(a4, "blend:", v144, v173);
  double v145 = [v134 filterID];
  float v150 = v145;
  if (v183)
  {
    if (!v145)
    {
      else {
        double v151 = @"PlainTexture";
      }
      [a4 setShader:v151];
    }

    *(float *)&double v146 = v203;
    *(float *)&double v149 = v204;
    *(float *)&double v147 = v203;
    *(float *)&double v148 = v203;
    [a4 composeForeColorRed:v238 green:v146 blue:v147 alpha:v148 saveTo:v149];
  }

  else if (!v145)
  {
    else {
      double v154 = @"PlainTextureNoColor";
    }
    [a4 setShader:v154];
  }

  *(float *)&double v146 = v11;
  [v134 setOnContext:a4 onTextureUnit:0 withReferenceAspectRatio:&v224 state:v146];
  if (v209 != 0.0 || v208 != 0.0 || v36 != 0.0 || v185 != 0.0 || v184 != 0.0 || v207 != 0.0)
  {
    MRMatrix_SetRotationFromAnglesYXZDeg((uint64_t)&v233, v208, v209, v36);
    double v235 = v185;
    double v236 = v184;
    double v237 = v207;
    if ((v116 & 1) != 0)
    {
      double v155 = 0LL;
      double v156 = v239;
    }

    else
    {
      double v156 = (float *)[a4 modelViewMatrix];
      double v155 = v239;
    }

    *(float *)&double v157 = MRMatrix_MultiplyWithMatrix(v156, (float *)&v233, &v225);
    objc_msgSend(a4, "setModelViewMatrix:saveTo:", &v225, v155, v157);
    double v116 = 1;
  }

  *(void *)&double v233 = __PAIR64__(LODWORD(v176), LODWORD(v179));
  *((void *)&v233 + 1) = __PAIR64__(LODWORD(v177), LODWORD(v179));
  *(void *)&double v234 = __PAIR64__(LODWORD(v176), LODWORD(v178));
  *((void *)&v234 + 1) = __PAIR64__(LODWORD(v177), LODWORD(v178));
  [a4 setTextureCoordinatesPointer:&v233 onTextureUnit:0];
  double v225 = v182;
  double v226 = v180;
  double v227 = v182;
  double v228 = v181;
  double v229 = v198;
  double v230 = v180;
  double v231 = v198;
  double v232 = v181;
  [a4 setVertex2DPointer:&v225];
  [a4 drawTriangleStripFromOffset:0 count:4];
  [a4 unsetVertexPointer];
  [a4 unsetTextureCoordinatesPointerOnTextureUnit:0];
  [v134 unsetOnContext:a4 onTextureUnit:0 state:&v224];
  [v134 releaseByUser];
  if (!v150) {
    [a4 unsetShader];
  }
  if (v183) {
    [a4 restoreForeColor:v238];
  }
LABEL_221:
  if ((v25 & v219) != 1) {
    goto LABEL_239;
  }
  if (-[MRLayer isNative3D](self->super.mSourceLayer, "isNative3D") && v205 ^ 1 | v202)
  {
    double v158 = self->super.mSourceLayer;
    -[MRLayerClock externalTime](-[MRLayer clock](v158, "clock"), "externalTime");
    -[MRLayer renderAtTime:inContext:withArguments:](v158, "renderAtTime:inContext:withArguments:", a4, v218);
    [a4 blend:0];
    double v132 = v223;
    if ((v116 & 1) == 0) {
      goto LABEL_241;
    }
LABEL_240:
    objc_msgSend(a4, "restoreModelViewMatrix:", v239, v173);
    goto LABEL_241;
  }

  if ((v189 & 1) != 0)
  {
    double v159 = [a4 retainedByUserBlackImage];
    if (v159) {
      goto LABEL_228;
    }
LABEL_239:
    objc_msgSend(a4, "blend:", 0, v173);
    double v132 = v223;
    if (!v116) {
      goto LABEL_241;
    }
    goto LABEL_240;
  }

  v109->var19 = v187;
  double v168 = self->super.mSourceLayer;
  -[MRLayerClock externalTime](-[MRLayer clock](v168, "clock"), "externalTime");
  double v159 = -[MRLayer retainedByUserRenderedImageAtTime:inContext:withArguments:]( v168,  "retainedByUserRenderedImageAtTime:inContext:withArguments:",  a4,  v218);
  v109->var19 = 0;
  if (!v159) {
    goto LABEL_239;
  }
LABEL_228:
  if (v205) {
    double v160 = 3LL;
  }
  else {
    double v160 = 0LL;
  }
  objc_msgSend(a4, "blend:", v160, v173);
  double v161 = [v159 filterID];
  double v166 = v161;
  if (v197)
  {
    if (!v161)
    {
      else {
        double v167 = @"PlainTexture";
      }
      [a4 setShader:v167];
    }

    *(float *)&double v162 = v12;
    *(float *)&double v163 = v12;
    *(float *)&double v164 = v12;
    *(float *)&double v165 = v206;
    [a4 composeForeColorRed:v238 green:v162 blue:v163 alpha:v164 saveTo:v165];
  }

  else if (!v161)
  {
    else {
      double v169 = @"PlainTextureNoColor";
    }
    [a4 setShader:v169];
  }

  *(float *)&double v162 = v11;
  [v159 setOnContext:a4 onTextureUnit:0 withReferenceAspectRatio:&v224 state:v162];
  if (v212 != 0.0 || v110 != 0.0 || v36 != 0.0 || v196 != 0.0 || v186 != 0.0 || v34 != 0.0)
  {
    MRMatrix_SetRotationFromAnglesYXZDeg((uint64_t)&v233, v110, v212, v36);
    double v235 = v196;
    double v236 = v186;
    double v237 = v34;
    if ((v116 & 1) != 0)
    {
      double v170 = 0LL;
      double v171 = v239;
    }

    else
    {
      double v171 = (float *)[a4 modelViewMatrix];
      double v170 = v239;
    }

    *(float *)&double v172 = MRMatrix_MultiplyWithMatrix(v171, (float *)&v233, &v225);
    objc_msgSend(a4, "setModelViewMatrix:saveTo:", &v225, v170, v172);
    LOBYTE(v116) = 1;
  }

  *(void *)&double v233 = __PAIR64__(LODWORD(v191), v190);
  *((void *)&v233 + 1) = v190;
  *(void *)&double v234 = __PAIR64__(LODWORD(v191), LODWORD(v195));
  *((void *)&v234 + 1) = __PAIR64__(HIDWORD(v190), LODWORD(v195));
  [a4 setTextureCoordinatesPointer:&v233 onTextureUnit:0];
  double v225 = v199;
  double v226 = v192;
  double v227 = v199;
  double v228 = v193;
  double v229 = v194;
  double v230 = v192;
  double v231 = v194;
  double v232 = v193;
  [a4 setVertex2DPointer:&v225];
  [a4 drawTriangleStripFromOffset:0 count:4];
  [a4 unsetVertexPointer];
  [a4 unsetTextureCoordinatesPointerOnTextureUnit:0];
  [v159 unsetOnContext:a4 onTextureUnit:0 state:&v224];
  [v159 releaseByUser];
  if (!v166) {
    [a4 unsetShader];
  }
  double v132 = v223;
  if (v197) {
    [a4 restoreForeColor:v238];
  }
  [a4 blend:0];
  if ((v116 & 1) != 0) {
    goto LABEL_240;
  }
LABEL_241:
  if (v132) {
    [a4 cull:0];
  }
}

void sub_FC640(_Unwind_Exception *a1)
{
}

void sub_FC6E4(_Unwind_Exception *a1)
{
}

void sub_FCEC8(_Unwind_Exception *a1)
{
}

void sub_FCF74(_Unwind_Exception *a1)
{
}

LABEL_95:
    __int128 v69 = 0.0;
    if (!v53)
    {
      mSeed = self->super.mSeed;
      if (v28) {
        __int128 v69 = (double)(mSeed % 5) * 0.0500000007 + -0.100000001;
      }
      else {
        __int128 v69 = (double)(mSeed % 0xB) * 0.0500000007 + -0.25;
      }
    }

    goto LABEL_100;
  }

  if (v37) {
    float v64 = (double)(self->super.mSeed % 3) * 0.0174532924;
  }
  if (v212)
  {
    if (!v17) {
      goto LABEL_95;
    }
    goto LABEL_92;
  }

  double v214 = CGPointZero.x;
  float v82 = 0;
  float v66 = v204;
  CGFloat y = CGPointZero.y;
LABEL_122:
  double v202 = v32;
  float v86 = v49 / v50 * v32;
  float v87 = 0.0199999996 / v49;
  float v88 = v50;
  float v89 = v87 * v86;
  int v210 = v64;
  float v90 = (v64 + 45.0) * 0.0174532924;
  float v91 = __sincosf_stret(v90);
  float v92 = (float)(v87 * 0.0) * v91.__cosval;
  float v93 = (float)((float)(v87 * 0.0) * v86) * v91.__sinval;
  float v94 = (float)(v87 * 2.0) + 1.0;
  double v95 = v94 + (float)(v87 * 0.7);
  float v96 = (float)((float)(v87 * v86) * 2.0) + 1.0;
  double v97 = v49;
  id v98 = v96 + (float)((float)(v87 * 0.7) * v86);
  else {
    double v99 = v92 + (float)(v95 * -0.5);
  }
  else {
    double v100 = v93 + (float)(v98 * -0.5);
  }
  double v101 = v92 + (float)(v95 * 0.5);
  double v197 = v87 * v86;
  double v102 = v89 + 0.5;
  float v103 = *(void **)(&self->super._isInInteractiveMode + 1);
  if (v103)
  {
    *(float *)&double v190 = (float)((float)(v87 * 0.0) * v86) * v91.__sinval;
    double v195 = v87 * 0.0;
    double v207 = y;
    double v104 = v101 - v99;
    float v105 = v102 - v100;
    p_mPixelSize = &self->super.mPixelSize;
    double v107 = 4.0 / (v97 * self->super.mPixelSize.width * 0.5);
    double v108 = (float)((float)(v96 / (float)(v102 - v100)) + (float)((float)(v107 * -2.0) * v86));
    id v109 = (float)((float)(v94 / v104) + (float)(v107 * -2.0));
    __int128 v110 = v88;
    __int128 v111 = (float)((float)((float)((float)(-0.5 - v87) - v99) / v104) + v107);
    __int128 v112 = (float)((float)((float)((float)(-0.5 - v89) - v100) / (float)(v102 - v100)) + (float)(v107 * v86));
    double v198 = v97;
    __int128 v113 = v97 * v202;
    double v114 = -(a3 * a3) * (a3 * -2.0 + 3.0) + 1.0;
    if (a3 >= 1.0) {
      double v114 = 0.0;
    }
    double v115 = v114;
    double v194 = v115;
    double v201 = v100;
    double v203 = v99;
    double v116 = (float)((float)((float)(-0.5 - v100) / v105) + (float)(v107 * v86));
    double v199 = v102 - v100;
    double v200 = v104;
    double v117 = (float)((float)(1.0 / v105) + (float)((float)(v107 * -2.0) * v86));
    double v196 = v110;
    double v118 = v113 / v110;
    *((float *)&v190 + 1) = (float)(v87 * 0.0) * v91.__cosval;
    objc_msgSend( v103,  "setInnerRect:",  (float)((float)((float)(-0.5 - v99) / v104) + v107),  v116,  (float)((float)(1.0 / v104) + (float)(v107 * -2.0)),  v117,  v190);
    objc_msgSend(*(id *)(&self->super._isInInteractiveMode + 1), "setOuterRect:", v111, v112, v109, v108);
    [*(id *)(&self->super._isInInteractiveMode + 1) setNeedsInSpriteCoordinates:1];
    [a4 blend:0];
    if (v194 <= 0.0)
    {
      else {
        double v121 = @"PlainTexture";
      }
      [a4 setShader:v121];
    }

    else
    {
      [a4 setShader:@"PhotoprintInner"];
      *(float *)&double v119 = exp2f(v194 * 0.5);
      [a4 setShaderUniformFloat:@"exposureExp" forKey:v119];
      *(float *)&double v120 = v194;
      [a4 setShaderUniformFloat:@"brightness" forKey:v120];
    }

    double v123 = v207;
    double v124 = v210;
    double v211 = v124;
    objc_msgSend( *(id *)(&self->super._isInInteractiveMode + 1),  "renderImageInner:inContext:atPosition:andSize:zRotation:",  v66,  a4,  v214,  v207,  v198,  v196);
    [a4 unsetShader];
    if (v194 <= 0.0)
    {
      [a4 setShader:@"PhotoprintMiddleNoExposureBrightness"];
      double v139 = v198 * p_mPixelSize->width * 0.300000012;
      *(float *)&double v139 = v139;
      double v140 = v196 * self->super.mPixelSize.height * 0.300000012 * 0.75;
      *(float *)&double v140 = v140;
      [a4 setShaderUniformVec2:@"invRadii" :v139 forKey:v140];
      *(float *)&double v142 = v199;
      *(float *)&double v141 = v200;
      [a4 setShaderUniformVec2:@"a1" :v141 forKey:v142];
      *(float *)&double v144 = v201;
      *(float *)&double v143 = v203;
      [a4 setShaderUniformVec2:@"b1" :v143 forKey:v144];
      LODWORD(v145) = 1.0;
      LODWORD(v146) = 1.0;
      LODWORD(v147) = 1.0;
      LODWORD(v14_Block_object_dispose((const void *)(v1 - 48), 8) = 1.0;
      [a4 setShaderUniformVec4:@"borderColor" :v145 :v146 :v147 forKey:v148];
    }

    else
    {
      [a4 setShader:@"PhotoprintMiddle"];
      double v125 = v198 * p_mPixelSize->width * 0.3;
      *(float *)&double v125 = v125;
      double v126 = v196 * self->super.mPixelSize.height * 0.300000012 * 0.75;
      *(float *)&double v126 = v126;
      [a4 setShaderUniformVec2:@"invRadii" :v125 forKey:v126];
      *(float *)&double v128 = v199;
      *(float *)&double v127 = v200;
      [a4 setShaderUniformVec2:@"a1" :v127 forKey:v128];
      *(float *)&double v130 = v201;
      *(float *)&double v129 = v203;
      [a4 setShaderUniformVec2:@"b1" :v129 forKey:v130];
      LODWORD(v131) = 1.0;
      LODWORD(v132) = 1.0;
      LODWORD(v133) = 1.0;
      LODWORD(v134) = 1.0;
      [a4 setShaderUniformVec4:@"borderColor" :v131 :v132 :v133 forKey:v134];
      if (v194 >= 0.0) {
        double v135 = v194;
      }
      else {
        double v135 = 0.0;
      }
      *(float *)&double v136 = exp2f(v135 * 0.5);
      [a4 setShaderUniformFloat:@"exposureExp" forKey:v136];
      *(float *)&double v137 = v135;
      double v123 = v207;
      [a4 setShaderUniformFloat:@"brightness" forKey:v137];
    }

    *(float *)&double v138 = v211;
    objc_msgSend( *(id *)(&self->super._isInInteractiveMode + 1),  "renderImageMiddle:inContext:atPosition:andSize:zRotation:",  v66,  a4,  v214,  v123,  v198,  v196,  v138);
    [a4 unsetShader];
    [a4 blend:2];
    if (v195 == 0.0) {
      double v149 = @"PhotoprintOuterForNullShadowOffset";
    }
    else {
      double v149 = @"PhotoprintOuter";
    }
    [a4 setShader:v149];
    float v150 = v198 * p_mPixelSize->width * 0.300000012;
    *(float *)&float v150 = v150;
    double v151 = v196 * self->super.mPixelSize.height * 0.300000012 * 0.75;
    *(float *)&double v151 = v151;
    [a4 setShaderUniformVec2:@"invRadii" :v150 forKey:v151];
    *(float *)&double v152 = v87;
    *(float *)&double v153 = v197;
    [a4 setShaderUniformVec2:@"borderSize" :v152 forKey:v153];
    *(float *)&double v154 = 1.0 / v95;
    *(float *)&double v155 = 1.0 / v98;
    [a4 setShaderUniformVec2:@"invShadowSize" :v154 forKey:v155];
    if (v195 != 0.0)
    {
      LODWORD(v156) = HIDWORD(v191);
      LODWORD(v157) = v191;
      [a4 setShaderUniformVec2:@"shadowOffset" :v156 forKey:v157];
    }

    *(float *)&double v156 = 1.0 / (float)(v87 * 0.4);
    double v122 = v118 * (float)(v87 * 0.4);
    *(float *)&double v157 = 1.0 / v122;
    [a4 setShaderUniformVec2:@"shadowHardness" :v156 forKey:v157];
    *(float *)&double v159 = v199;
    *(float *)&double v158 = v200;
    [a4 setShaderUniformVec2:@"a1" :v158 forKey:v159];
    *(float *)&double v161 = v201;
    *(float *)&double v160 = v203;
    [a4 setShaderUniformVec2:@"b1" :v160 forKey:v161];
    LODWORD(v162) = 1.0;
    LODWORD(v163) = 1.0;
    LODWORD(v164) = 1.0;
    LODWORD(v165) = 1.0;
    [a4 setShaderUniformVec4:@"borderColor" :v162 :v163 :v164 forKey:v165];
    LODWORD(v166) = 1034147594;
    LODWORD(v167) = 1061997773;
    LODWORD(v16_Block_object_dispose((const void *)(v1 - 48), 8) = 1034147594;
    LODWORD(v169) = 1034147594;
    [a4 setShaderUniformVec4:@"shadowColor" :v166 :v168 :v169 forKey:v167];
    [*(id *)(&self->super._isInInteractiveMode + 1) setMeshType:1];
    *(float *)&double v170 = v211;
    objc_msgSend( *(id *)(&self->super._isInInteractiveMode + 1),  "renderImageOuter:inContext:atPosition:andSize:zRotation:",  0,  a4,  v214,  v123,  v198,  v196,  v170);
    [*(id *)(&self->super._isInInteractiveMode + 1) setMeshType:0];
    [a4 unsetShader];
    double v171 = *(MRTextRenderer **)((char *)&self->mTextRenderer + 1);
    if (v171)
    {
      objc_msgSend(v171, "relativeSizeInContextPixelSize:", p_mPixelSize->width, self->super.mPixelSize.height);
      double v174 = v173;
      double v175 = v172;
      if (v52)
      {
        [v66 aspectRatio];
        double v41 = v176 < 1.0;
        double v177 = a3;
        double v178 = 0.5;
        if (v41)
        {
          double v181 = v174 * 0.5 + v198 * 0.5 + 0.100000001 + -0.330000013;
          double v182 = v192 + -0.800000012 + v175 * 0.5;
        }

        else
        {
          double v180 = v123;
          double v181 = v214 - v198 * 0.5 + 0.100000001 + v174 * 0.5;
          double v178 = v180 - v196 * 0.5 - v175 * 0.5;
          double v182 = v178 + -0.0250000004;
        }
      }

      else
      {
        double v182 = dbl_1FA1C0[v193 < 1.0] + v123 - v196 * 0.5 + v172;
        double v178 = dbl_1FA1D0[v193 < 1.0];
        double v181 = v178 + v174 * 0.5 + v198 * 0.5 + 0.0299999993 + -0.449999988;
        double v179 = *(uint64_t *)((char *)&self->mTextSprite + 1);
        double v177 = a3;
        if (v179 == 3)
        {
          double v178 = -0.200000003;
          double v182 = v182 + v172 * -0.200000003;
        }

        else
        {
          if (v179 == 2)
          {
            double v178 = -0.0500000007;
          }

          else
          {
            if (v179 != 1) {
              goto LABEL_169;
            }
            double v178 = 0.0500000007;
          }

          double v182 = v182 + v178;
        }
      }

LABEL_169:
      objc_msgSend(a4, "blend:", 2, v178);
      [a4 setShader:@"PlainTexture"];
      double v185 = 0.0;
      double v186 = 1.0;
      if (v177 < 1.0)
      {
LABEL_176:
        *(float *)&double v184 = v185;
        LODWORD(v185) = 1.0;
        LODWORD(v186) = 1.0;
        LODWORD(v183) = 1.0;
        [a4 composeForeColorRed:v216 green:v185 blue:v186 alpha:v183 saveTo:v184];
        double v188 = 1;
        goto LABEL_178;
      }

      if (v177 <= 1.0 || v177 > 1.25)
      {
        double v187 = self->super.mPhaseInDuration + self->super.mMainDuration + self->super.mPhaseOutDuration + -0.25;
        if (v187 >= v177) {
          goto LABEL_177;
        }
        double v185 = (v177 - v187) * -4.0 + 1.0;
      }

      else
      {
        double v185 = (v177 + -1.0) * 4.0;
      }

      double v186 = 1.0;
      if (v185 < 1.0) {
        goto LABEL_176;
      }
LABEL_177:
      double v188 = 0;
LABEL_178:
      if (-[NSString isEqualToString:]( -[MRLayerEffect editedElement](self->super.mEffectLayer, "editedElement"),  "isEqualToString:",  @"text0")
        && -[MRLayerEffect _hideTextWhileEditing](self->super.mEffectLayer, "_hideTextWhileEditing"))
      {
        *(float *)&double v189 = v211;
        objc_msgSend( *(id *)((char *)&self->mTextImage + 1),  "fakeRenderInContext:atPosition:andSize:zRotation:",  a4,  v181,  v182 + 0.0500000007,  v174,  v175,  v189);
      }

      else
      {
        *(float *)&double v189 = v211;
        objc_msgSend( *(id *)((char *)&self->mTextImage + 1),  "renderImage:inContext:atPosition:andSize:zRotation:",  *(MRTextRenderer **)((char *)&self->mTextRenderer + 1),  a4,  v181,  v182,  v174,  v175,  v189);
      }

      [a4 unsetShader];
      if (v188) {
        [a4 restoreForeColor:v216];
      }
    }
  }

  [v66 releaseByUser];
  [a4 blend:0];
  if (v82) {
    [a4 restoreModelViewMatrix:v217];
  }
}

double randomFloatInRange(double a1, double a2)
{
  return a1 + (double)random() * 4.65661287e-10 * (a2 - a1);
}

uint64_t sortRectangles1(void *a1, void *a2, int *a3)
{
  if (a3)
  {
    int v4 = *a3;
    [a1 CGRectValue];
    double v6 = v5;
    double v8 = v7;
    [a2 CGRectValue];
    switch(v4)
    {
      case 3:
        BOOL v11 = v8 < v10;
        BOOL v12 = v8 <= v10;
        goto LABEL_9;
      case 2:
        BOOL v14 = v8 < v10;
        BOOL v15 = v8 <= v10;
        goto LABEL_16;
      case 1:
        BOOL v11 = v6 < v9;
        BOOL v12 = v6 <= v9;
LABEL_9:
        uint64_t v16 = v11;
        if (v12) {
          return v16;
        }
        else {
          return -1LL;
        }
    }
  }

  else
  {
    [a1 CGRectValue];
    double v6 = v13;
    [a2 CGRectValue];
  }

  BOOL v14 = v6 < v9;
  BOOL v15 = v6 <= v9;
LABEL_16:
  uint64_t v18 = !v15;
  if (v14) {
    return -1LL;
  }
  else {
    return v18;
  }
}

double FloorRect(double a1)
{
  float v1 = a1;
  return floorf(v1);
}

double CenterRectOverPoint(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4, double a5)
{
  double Width = CGRectGetWidth(*(CGRect *)&a1);
  v12.origin.CGFloat x = a1;
  v12.origin.CGFloat y = a2;
  v12.size.CGFloat width = a3;
  v12.size.CGFloat height = a4;
  CGRectGetHeight(v12);
  return a5 - Width * 0.5;
}

double CenterRectOverRect( CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6, CGFloat a7, CGFloat a8)
{
  v19.origin.CGFloat x = a5;
  v19.origin.CGFloat y = a6;
  v19.size.CGFloat width = a7;
  v19.size.CGFloat height = a8;
  double MidX = CGRectGetMidX(v19);
  v20.origin.CGFloat x = a5;
  v20.origin.CGFloat y = a6;
  v20.size.CGFloat width = a7;
  v20.size.CGFloat height = a8;
  CGRectGetMidY(v20);
  v21.origin.CGFloat x = a1;
  v21.origin.CGFloat y = a2;
  v21.size.CGFloat width = a3;
  v21.size.CGFloat height = a4;
  double Width = CGRectGetWidth(v21);
  v22.origin.CGFloat x = a1;
  v22.origin.CGFloat y = a2;
  v22.size.CGFloat width = a3;
  v22.size.CGFloat height = a4;
  CGRectGetHeight(v22);
  return MidX - Width * 0.5;
}

void sub_1050D0(_Unwind_Exception *a1)
{
}

void sub_105FF0(_Unwind_Exception *a1)
{
}

void sub_10661C(_Unwind_Exception *a1)
{
}

void sub_10687C(_Unwind_Exception *a1)
{
}

void sub_107058(_Unwind_Exception *a1)
{
}

LABEL_109:
    if (v12 >= 0) {
      float v54 = v48;
    }
    else {
      float v54 = 0;
    }
    if (v54 != 1) {
      goto LABEL_116;
    }
    float v55 = 1LL;
    goto LABEL_115;
  }

  -[MRAudioDucker setDuckOutTime:](v49, "setDuckOutTime:", -1000.0);
  if ((v12 & 0x80000000) == 0)
  {
    -[MRAudioDucker duckInTime](self->_audioDucker, "duckInTime");
    if (v50 > v10) {
      -[MRAudioDucker setDuckInTime:](self->_audioDucker, "setDuckInTime:", -1000.0);
    }
    goto LABEL_109;
  }

void sub_107724(_Unwind_Exception *a1)
{
}

LABEL_69:
  if (a7) {
    *a7 = v19 / v47;
  }
  if (a8) {
    *a8 = -rotation;
  }
}

void sub_10BDE0(_Unwind_Exception *a1)
{
}

void sub_10C028(_Unwind_Exception *a1)
{
}

void sub_10C0BC(_Unwind_Exception *a1)
{
}

void sub_10C1F8(_Unwind_Exception *a1)
{
}

void sub_10C4CC(_Unwind_Exception *a1)
{
}

void sub_10C51C(_Unwind_Exception *a1)
{
}

void sub_10CAEC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
}

void sub_10CB78(_Unwind_Exception *a1)
{
}

void sub_10CC20(_Unwind_Exception *a1)
{
}

MRImage *_GetImage( void *a1, uint64_t a2, int a3, int a4, uint64_t a5, uint64_t a6, double a7, double a8, double a9)
{
  id v18 = [a1 imageManager];
  unsigned __int8 v19 = [a1 isEmbeddedAsset];
  if ((v19 & 1) != 0) {
    id v20 = 0LL;
  }
  else {
    id v20 = objc_msgSend(objc_msgSend(v18, "baseContext"), "assetManager");
  }
  [a1 originalSize];
  double v22 = v21;
  double v24 = v23;
  if ((a5 & 1) == 0)
  {
    id v33 = objc_msgSend(objc_msgSend(v18, "baseContext"), "clippedSizeWithSize:", a7, a8);
    double v34 = a8 * (double)v33;
    double v35 = a7 * (double)HIDWORD(v33);
    BOOL v36 = v34 < v35;
    double v37 = v34 / a7;
    double v38 = v35 / a8;
    if (v36) {
      double v39 = v38;
    }
    else {
      double v39 = (double)v33;
    }
    if (v36) {
      double v40 = (double)HIDWORD(v33);
    }
    else {
      double v40 = v37;
    }
    id v25 = [a1 path];
    unsigned __int8 v80 = 0;
    if ((v19 & 1) != 0)
    {
      double v41 = v18;
      id v26 = 0LL;
LABEL_35:
      id v43 = v25;
      goto LABEL_36;
    }

    goto LABEL_25;
  }

  id v25 = [a1 path];
  unsigned __int8 v80 = 0;
  if ((v19 & 1) == 0)
  {
    double v39 = 256.0;
    double v40 = 256.0;
LABEL_25:
    id v75 = v25;
    uint64_t v42 = (CGImage *)objc_msgSend( v20,  "CGImageForAssetAtPath:andSize:orientation:thumbnailIfPossible:now:",  v25,  &v80,  a5,  a6,  v39,  v40);
    id v26 = 0LL;
    if (v42) {
      goto LABEL_77;
    }
    goto LABEL_26;
  }

  id v26 = objc_msgSend( -[NSArray lastObject](NSSearchPathForDirectoriesInDomains(NSCachesDirectory, 1uLL, 1), "lastObject"),  "stringByAppendingPathComponent:",  @"com.apple.iLifeSlideshow/Thumbnail Cache");
  if (!v26)
  {
    double v41 = v18;
    double v39 = 256.0;
    double v40 = 256.0;
    goto LABEL_35;
  }

  id v71 = v20;
  unsigned int v72 = a2;
  id v75 = v25;
  id v27 = [v25 pathComponents];
  __int128 v76 = 0u;
  __int128 v77 = 0u;
  __int128 v78 = 0u;
  __int128 v79 = 0u;
  id v28 = [v27 countByEnumeratingWithState:&v76 objects:v81 count:16];
  if (v28)
  {
    id v29 = v28;
    id v70 = v18;
    int v73 = a4;
    uint64_t v30 = *(void *)v77;
    while (2)
    {
      for (uint64_t i = 0LL; i != v29; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v77 != v30) {
          objc_enumerationMutation(v27);
        }
        float v32 = *(void **)(*((void *)&v76 + 1) + 8LL * (void)i);
        if ([v32 rangeOfString:@".mrb"] != (id)0x7FFFFFFFFFFFFFFFLL)
        {
          if (v32) {
            id v26 = [v26 stringByAppendingPathComponent:v32];
          }
          goto LABEL_30;
        }
      }

      id v29 = [v27 countByEnumeratingWithState:&v76 objects:v81 count:16];
      if (v29) {
        continue;
      }
      break;
    }

LABEL_73:
  int v74 = a4;
  int v59 = a3;
  id v25 = v75;
  if ((objc_opt_respondsToSelector(v20, "dataForAssetAtPath:andSize:") & 1) != 0)
  {
    id v60 = objc_msgSend(v20, "dataForAssetAtPath:andSize:", v75, v39, v40);
    if (v60)
    {
      id v61 = v60;
      [a1 isSupportedMovie];
      double v41 = v18;
      uint64_t v42 = (CGImage *)objc_msgSend( v18,  "CGImageWithData:withOriginalSize:forSize:orientation:",  v61,  &v80,  v22,  v24,  v39,  v40);
      a3 = v59;
      a4 = v74;
      if (!v42) {
        goto LABEL_76;
      }
      goto LABEL_53;
    }
  }

  double v41 = v18;
  id v43 = objc_msgSend(v20, "absolutePathForAssetAtPath:andSize:", v75, v39, v40);
  a4 = v74;
LABEL_36:
  if (![a1 isSupportedMovie] || !v43)
  {
    if (!v43) {
      goto LABEL_88;
    }
    id v75 = v25;
LABEL_52:
    uint64_t v42 = (CGImage *)objc_msgSend( v41,  "CGImageWithPath:withOriginalSize:forSize:orientation:",  v43,  &v80,  v22,  v24,  v39,  v40);
    if (!v42) {
      goto LABEL_76;
    }
LABEL_53:
    if (v26)
    {
      CGImageAlphaInfo AlphaInfo = CGImageGetAlphaInfo(v42);
      float v53 = +[UIImage imageWithCGImage:](&OBJC_CLASS___UIImage, "imageWithCGImage:", v42);
      id v18 = v41;
      if (AlphaInfo - 1 > 3) {
        float v54 = UIImageJPEGRepresentation(v53, 0.9);
      }
      else {
        float v54 = UIImagePNGRepresentation(v53);
      }
      -[NSData writeToFile:atomically:](v54, "writeToFile:atomically:", v26, 0LL);
      if ((a5 & 1) != 0) {
        goto LABEL_78;
      }
      goto LABEL_40;
    }

LABEL_88:
    float v65 = 0LL;
    goto LABEL_87;
  }

  id v75 = v25;
  float v44 = (CGImage *)objc_msgSend( v41,  "CGImageWithMoviePath:withOriginalSize:forSize:atTime:orientation:",  v43,  &v80,  v22,  v24,  v39,  v40,  a9);
  if (!v44) {
    goto LABEL_52;
  }
  uint64_t v42 = v44;
  id v18 = v41;
  if ((a5 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_78:
  unsigned int v58 = 256;
  uint64_t v57 = 256LL;
LABEL_79:
  float v62 = objc_alloc(&OBJC_CLASS___MRTextureSource);
  char v63 = -[MRTextureSource initWithCGImage:textureSize:orientation:imageManager:monochromatic:]( v62,  "initWithCGImage:textureSize:orientation:imageManager:monochromatic:",  v42,  v58 | (unint64_t)(v57 << 32),  v80,  v18,  a2);
  *((_BYTE *)-[MRTextureSource textureOptions](v63, "textureOptions") + 5) = a4;
  if ((_DWORD)a5)
  {
    -[MRTextureSource setWantsSharedTexture:](v63, "setWantsSharedTexture:", 1LL);
    id v64 = v75;
  }

  else
  {
    id v64 = v75;
    if (a3) {
      -[MRTextureSource generateMipmap](v63, "generateMipmap");
    }
  }

  float v65 =  -[MRImage initWithTextureSource:andSize:]( objc_alloc(&OBJC_CLASS___MRImage),  "initWithTextureSource:andSize:",  v63,  a7,  a8);

  if ((_DWORD)a5) {
    float v66 = +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Marimba '%@' Thumbnail",  v64,  v68,  v69);
  }
  else {
    float v66 = +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Marimba '%@' %dx%d",  v64,  (int)a7,  (int)a8);
  }
  -[MRImage setLabel:](v65, "setLabel:", v66);
LABEL_87:
  -[MRImage texture](v65, "texture");
  return v65;
}

void sub_10D3F0(_Unwind_Exception *a1)
{
}

void sub_10D54C(_Unwind_Exception *a1)
{
}

void sub_10D7D0(_Unwind_Exception *a1)
{
}

void sub_10D9E0(_Unwind_Exception *a1)
{
}

void sub_10DAEC(_Unwind_Exception *a1)
{
}

void sub_10DCA8(uint64_t a1)
{
  LODWORD(v2) = 0;
  [*(id *)(a1 + 32) setRate:v2];
  [*(id *)(a1 + 40) removeOutput:*(void *)(a1 + 48)];

  id v3 = *(const void **)(a1 + 56);
  if (v3) {
    CFRelease(v3);
  }
}

char *sub_10DE0C(uint64_t a1)
{
  double v2 = *(void **)(*(void *)(a1 + 32) + 72LL);
  CMTimeMake(&v6, (uint64_t)(*(double *)(a1 + 40) * 1000000.0), 1000000);
  [v2 seekToTime:&v6];
  uint64_t v3 = *(void *)(a1 + 32);
  if (!*(_BYTE *)(v3 + 140))
  {
    [*(id *)(v3 + 72) pause];
    uint64_t v3 = *(void *)(a1 + 32);
  }

  double result = (char *)[*(id *)(v3 + 72) rate];
  if (v5 == 0.0)
  {
    double result = (char *)[*(id *)(*(void *)(a1 + 32) + 72) status];
    if (result == (_BYTE *)&dword_0 + 1) {
      return (char *)[*(id *)(*(void *)(a1 + 32) + 88) requestNotificationOfMediaDataChangeWithAdvanceInterval:0.0];
    }
  }

  return result;
}

char *sub_10DF5C(uint64_t a1, double a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  LODWORD(a2) = 1.0;
  if (!*(_BYTE *)(v3 + 140)) {
    *(float *)&a2 = 0.0;
  }
  [*(id *)(v3 + 72) setRate:a2];
  double result = (char *)[*(id *)(*(void *)(a1 + 32) + 72) rate];
  if (v5 == 0.0)
  {
    double result = (char *)[*(id *)(*(void *)(a1 + 32) + 72) status];
    if (result == (_BYTE *)&dword_0 + 1) {
      return (char *)[*(id *)(*(void *)(a1 + 32) + 88) requestNotificationOfMediaDataChangeWithAdvanceInterval:0.0];
    }
  }

  return result;
}

id sub_10E0C8(uint64_t a1)
{
  id result = [*(id *)(*(void *)(a1 + 32) + 72) rate];
  *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = *(float *)&v3 > 0.0;
  uint64_t v4 = *(void *)(a1 + 32);
  if (*(_BYTE *)(v4 + 140))
  {
    if (!*(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL))
    {
      LODWORD(v3) = 1.0;
      return [*(id *)(v4 + 72) setRate:v3];
    }
  }

  return result;
}

id sub_10E2C0(double *a1)
{
  double v2 = (void *)*((void *)a1 + 4);
  uint64_t v1 = *((void *)a1 + 5);
  double v3 = a1[7];
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  void v5[2] = sub_10E320;
  v5[3] = &unk_24D5B0;
  *(double *)&v5[4] = a1[6];
  return [v2 _finishLoadingAsset:v1 forTime:v5 completion:v3];
}

uint64_t sub_10E320(uint64_t a1)
{
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

uint64_t sub_10E3C8(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 56);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_10EB60( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
}

void sub_10EB94(uint64_t a1, uint64_t a2)
{
}

void sub_10EBA4(uint64_t a1)
{
}

void sub_10EBB0(uint64_t a1)
{
  double v2 = *(double *)(a1 + 48);
  uint64_t v3 = *(void *)(a1 + 32);
  BOOL v4 = v2 >= 0.0 && v2 < *(double *)(v3 + 104);
  *(_BYTE *)(v3 + 140) &= v4;
  *(_BYTE *)(*(void *)(a1 + 32) + 137LL) = 0;
  uint64_t v5 = *(void *)(a1 + 32);
  if (*(void *)(v5 + 40))
  {
    CMTime v6 = *(void **)(v5 + 88);
    *(_OWORD *)buffer = *(_OWORD *)(a1 + 56);
    uint64_t v21 = *(void *)(a1 + 72);
    goto LABEL_10;
  }

  double Current = CFAbsoluteTimeGetCurrent();
  double v8 = *(void **)(*(void *)(a1 + 32) + 88LL);
  *(_OWORD *)buffer = *(_OWORD *)(a1 + 56);
  uint64_t v21 = *(void *)(a1 + 72);
  if ([v8 hasNewPixelBufferForItemTime:buffer])
  {
LABEL_10:
    double v10 = *(void **)(*(void *)(a1 + 32) + 88LL);
    *(_OWORD *)buffer = *(_OWORD *)(a1 + 56);
    uint64_t v21 = *(void *)(a1 + 72);
    BOOL v11 = (__CVBuffer *)[v10 copyPixelBufferForItemTime:buffer itemTimeForDisplay:0];
    if (v11)
    {
      CGRect v12 = v11;
      double v13 = *(void **)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL);
      if (v13) {
        [v13 releaseByUser];
      }
      unsigned int Width = CVPixelBufferGetWidth(v12);
      unsigned int Height = CVPixelBufferGetHeight(v12);
      CVOpenGLESTextureCacheFlush(*(CVOpenGLESTextureCacheRef *)(*(void *)(a1 + 32) + 112LL), 0LL);
      buffer[0] = 0LL;
      CVOpenGLESTextureCacheCreateTextureFromImage( kCFAllocatorDefault,  *(CVOpenGLESTextureCacheRef *)(*(void *)(a1 + 32) + 112LL),  v12,  0LL,  0xDE1u,  6408,  Width,  Height,  0x80E1u,  0x1401u,  0LL,  buffer);
      uint64_t v16 = objc_alloc(&OBJC_CLASS___MRTextureSource);
      BOOL v17 = -[MRTextureSource initWithCVTexture:size:orientation:imageManager:monochromatic:]( v16,  "initWithCVTexture:size:orientation:imageManager:monochromatic:",  buffer[0],  Width | ((unint64_t)Height << 32),  *(unsigned __int8 *)(*(void *)(a1 + 32) + 136),  [*(id *)(*(void *)(a1 + 32) + 48) imageManager],  0);
      CVBufferRelease(buffer[0]);
      *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL) = -[MRImage initWithTextureSource:andSize:]( objc_alloc(&OBJC_CLASS___MRImage),  "initWithTextureSource:andSize:",  v17,  *(double *)(*(void *)(a1 + 32) + 16LL),  *(double *)(*(void *)(a1 + 32) + 24LL));

      [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) setLabel:+[NSString stringWithFormat:]( NSString, "stringWithFormat:", @"Marimba '%@' %dx%d %f", objc_msgSend(*(id *)(*(void *)(a1 + 32) + 48), "path"), (int)*(double *)(*(void *)(a1 + 32) + 16), (int)*(double *)(*(void *)(a1 + 32) + 24), *(void *)(a1 + 48))];
      CFRelease(v12);
    }

    goto LABEL_14;
  }

  while (CFAbsoluteTimeGetCurrent() - Current < 1.0)
  {
    usleep(0x4E20u);
    double v9 = *(void **)(*(void *)(a1 + 32) + 88LL);
    *(_OWORD *)buffer = *(_OWORD *)(a1 + 56);
    uint64_t v21 = *(void *)(a1 + 72);
  }

void sub_10F328(_Unwind_Exception *a1)
{
}

id sub_10F4B8(double *a1)
{
  double v2 = (void *)*((void *)a1 + 4);
  uint64_t v1 = *((void *)a1 + 5);
  double v3 = a1[7];
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  void v5[2] = sub_10F518;
  v5[3] = &unk_24D5B0;
  *(double *)&v5[4] = a1[6];
  return [v2 _finishLoadingAsset:v1 forTime:v5 completion:v3];
}

uint64_t sub_10F518(uint64_t a1)
{
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

uint64_t sub_10F5C0(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 56);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_10FCEC(_Unwind_Exception *a1)
{
}

void sub_11050C(_Unwind_Exception *exception_object)
{
}

void sub_11091C(_Unwind_Exception *a1)
{
}

void sub_1109C0(_Unwind_Exception *a1)
{
}

void sub_110A24(_Unwind_Exception *a1)
{
}

void sub_110B90(_Unwind_Exception *a1)
{
}

void sub_110FB0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
}

void sub_111270( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
}

void sub_111464(_Unwind_Exception *exception_object)
{
}

void sub_11159C(_Unwind_Exception *a1)
{
}

void sub_11177C(_Unwind_Exception *a1)
{
}

LABEL_161:
  -[MPAuthoringController scaleDurationsInDocument:withOptions:](v63, "scaleDurationsInDocument:withOptions:", a4, v64);
  __int128 v112 = objc_msgSend(objc_msgSend(a4, "orderedVideoPaths"), "mutableCopy");
  [a4 setVideoPaths:v112];
  __int128 v113 = [v112 count];
  if ((uint64_t)v113 >= 1)
  {
    double v114 = (unint64_t)v113;
    double v218 = 0u;
    double v219 = 0u;
    double v216 = 0u;
    double v217 = 0u;
    double v141 = [a4 layers];
    double v145 = [v141 countByEnumeratingWithState:&v216 objects:v250 count:16];
    if (v145)
    {
      double v143 = *(void *)v217;
      do
      {
        double v115 = 0LL;
        do
        {
          if (*(void *)v217 != v143) {
            objc_enumerationMutation(v141);
          }
          double v147 = v115;
          double v116 = *(void **)(*((void *)&v216 + 1) + 8 * v115);
          if (([v116 isAudioLayer] & 1) == 0)
          {
            double v214 = 0u;
            double v215 = 0u;
            float v212 = 0u;
            double v213 = 0u;
            float v150 = [v116 effectContainers];
            double v156 = [v150 countByEnumeratingWithState:&v212 objects:v249 count:16];
            if (v156)
            {
              double v153 = *(void *)v213;
              do
              {
                double v117 = 0LL;
                do
                {
                  if (*(void *)v213 != v153) {
                    objc_enumerationMutation(v150);
                  }
                  double v159 = v117;
                  double v118 = *(void **)(*((void *)&v212 + 1) + 8 * v117);
                  v208 = 0u;
                  double v209 = 0u;
                  int v210 = 0u;
                  double v211 = 0u;
                  double v162 = [v118 effects];
                  double v168 = (char *)[v162 countByEnumeratingWithState:&v208 objects:v248 count:16];
                  if (v168)
                  {
                    double v165 = *(void *)v209;
                    do
                    {
                      double v119 = 0LL;
                      do
                      {
                        if (*(void *)v209 != v165) {
                          objc_enumerationMutation(v162);
                        }
                        double v172 = v119;
                        double v120 = *(void **)(*((void *)&v208 + 1) + 8LL * (void)v119);
                        double v121 = +[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array");
                        double v204 = 0u;
                        double v205 = 0u;
                        double v206 = 0u;
                        double v207 = 0u;
                        double v122 = [v120 secondarySlides];
                        double v123 = [v122 countByEnumeratingWithState:&v204 objects:v247 count:16];
                        if (v123)
                        {
                          double v124 = v123;
                          double v125 = *(void *)v205;
                          do
                          {
                            for (mm = 0LL; mm != v124; mm = (char *)mm + 1)
                            {
                              if (*(void *)v205 != v125) {
                                objc_enumerationMutation(v122);
                              }
                              objc_msgSend( v121,  "addObject:",  objc_msgSend(*(id *)(*((void *)&v204 + 1) + 8 * (void)mm), "path"));
                            }

                            double v124 = [v122 countByEnumeratingWithState:&v204 objects:v247 count:16];
                          }

                          while (v124);
                        }

                        double v202 = 0u;
                        double v203 = 0u;
                        double v200 = 0u;
                        double v201 = 0u;
                        double v127 = [v120 secondarySlides];
                        double v128 = [v127 countByEnumeratingWithState:&v200 objects:v246 count:16];
                        if (v128)
                        {
                          double v129 = v128;
                          double v130 = *(void *)v201;
                          do
                          {
                            for (nn = 0LL; nn != v129; nn = (char *)nn + 1)
                            {
                              if (*(void *)v201 != v130) {
                                objc_enumerationMutation(v127);
                              }
                              double v132 = *(void **)(*((void *)&v200 + 1) + 8LL * (void)nn);
                              if (objc_msgSend(v174, "indexOfObject:", objc_msgSend(v132, "path")) != (id)0x7FFFFFFFFFFFFFFFLL)
                              {
                                do
                                  double v133 = [v112 objectAtIndex:random() % (uint64_t)v114];
                                while ([v121 indexOfObject:v133] != (id)0x7FFFFFFFFFFFFFFFLL
                                     && v114 > (unint64_t)[v121 count]);
                                [v132 setPath:v133];
                              }
                            }

                            double v129 = [v127 countByEnumeratingWithState:&v200 objects:v246 count:16];
                          }

                          while (v129);
                        }

                        double v119 = v172 + 1;
                      }

                      while (v172 + 1 != v168);
                      double v168 = (char *)[v162 countByEnumeratingWithState:&v208 objects:v248 count:16];
                    }

                    while (v168);
                  }

                  double v117 = v159 + 1;
                }

                while ((id)(v159 + 1) != v156);
                double v156 = [v150 countByEnumeratingWithState:&v212 objects:v249 count:16];
              }

              while (v156);
            }
          }

          double v115 = v147 + 1;
        }

        while ((id)(v147 + 1) != v145);
        double v145 = [v141 countByEnumeratingWithState:&v216 objects:v250 count:16];
      }

      while (v145);
    }
  }
}

LABEL_60:
                        ;
                      }

                      double v49 = [v68 countByEnumeratingWithState:&v75 objects:v96 count:16];
                    }

                    while (v49);
                  }

                  uint64_t v46 = v66 + 1;
                }

                while ((id)(v66 + 1) != v65);
                float v65 = [obj countByEnumeratingWithState:&v79 objects:v97 count:16];
              }

              while (v65);
            }

            else
            {
              id v70 = 0LL;
            }

            id v26 = self;
            -[MPAuthoringController clearROICache](self, "clearROICache");
            id v27 = self;
            id v28 = v70;
            goto LABEL_68;
          }

          double v22 = objc_msgSend(objc_msgSend(a3, "parentEffect"), "parentContainer");
          double v23 = [v22 parentLayer];
          double v24 = (char *)[v22 index] + 1;
        }

        objc_msgSend( v23,  "removeEffectContainersAtIndices:",  +[NSIndexSet indexSetWithIndex:](NSIndexSet, "indexSetWithIndex:", v24));
        id v26 = self;
        id v27 = self;
        id v28 = a3;
LABEL_68:
        -[MPAuthoringController combineEffectsNearSlide:inDocument:withOptions:]( v27,  "combineEffectsNearSlide:inDocument:withOptions:",  v28,  a4,  v60);
        objc_msgSend( +[MPUtilities slideForPath:inDocument:](MPUtilities, "slideForPath:inDocument:", v59, a4),  "setUserInfoAttribute:forKey:",  +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", 0),  @"hasSubtitle");

        if (!v26->_isAuthoring)
        {
          -[MPAuthoringController cleanup](v26, "cleanup");
          -[MPAuthoringController scaleDurationsInDocument:withOptions:]( v26,  "scaleDurationsInDocument:withOptions:",  a4,  v60);
          objc_msgSend( +[MPCropController sharedController](MPCropController, "sharedController"),  "cropSlidesInDocument:withOptions:",  a4,  v60);
        }
      }
    }
  }

id GenerateScenario0(uint64_t a1, void *a2, unsigned int a3)
{
  id v5 = +[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array");
  unsigned __int8 v6 = [a2 randomInt];
  uint64_t v7 = (uint64_t)[a2 randomInt] % 100;
  int v8 = 20 * ((a3 >> 1) + 1);
  int v9 = 10 * ((a3 >> 1) + 1);
  unsigned __int8 v10 = [a2 randomInt];
  uint64_t v11 = v10 & 1;
  double v12 = 0.0;
  if ((v10 & 1) != 0)
  {
    double v13 = objc_alloc(&OBJC_CLASS___MREffectCoverCascadeEvent);
    if (v7 > 79) {
      uint64_t v14 = 4294967294LL;
    }
    else {
      uint64_t v14 = 0xFFFFFFFFLL;
    }
    if ((v6 & 1) != 0) {
      uint64_t v15 = 2LL;
    }
    else {
      uint64_t v15 = 1LL;
    }
    uint64_t v16 = -[MREffectCoverCascadeEvent initWithRelativeX:relativeY:type:relativeStartTime:andDuration:]( v13,  "initWithRelativeX:relativeY:type:relativeStartTime:andDuration:",  0LL,  v14,  v15,  0.0,  1.1);
    [v5 addObject:v16];

    double v12 = 1.0;
  }

  BOOL v17 = objc_alloc(&OBJC_CLASS___MREffectCoverCascadeEvent);
  char v40 = v6 & 1;
  if ((v6 & 1) != 0) {
    uint64_t v18 = 4LL;
  }
  else {
    uint64_t v18 = 3LL;
  }
  if (v7 <= 79) {
    uint64_t v19 = 0LL;
  }
  else {
    uint64_t v19 = 0xFFFFFFFFLL;
  }
  if (v7 <= 79) {
    int v20 = 1;
  }
  else {
    int v20 = 2;
  }
  LODWORD(v3_Block_object_dispose(va, 8) = v20;
  uint64_t v21 = -[MREffectCoverCascadeEvent initWithRelativeX:relativeY:type:relativeStartTime:andDuration:]( v17,  "initWithRelativeX:relativeY:type:relativeStartTime:andDuration:",  0LL,  v19,  v18,  v12,  1.1,  v38);
  [v5 addObject:v21];

  uint64_t v22 = v8;
  uint64_t v41 = v9;
  do
  {
    double v23 = (char *)objc_msgSend(v5, "count", v39);
    if (v11 < (uint64_t)v23)
    {
      int v24 = 0;
      int v25 = 0;
      int v43 = -(int)v39;
      if ((v40 & 1) != 0) {
        char v26 = 4;
      }
      else {
        char v26 = 3;
      }
      unsigned __int8 v42 = v26;
      id v27 = (char *)v11;
      do
      {
        id v28 = (double *)[v5 objectAtIndex:v27];
        if ((uint64_t)[a2 randomInt] % 100 >= v22)
        {
          v25 |= 1 << (*((_BYTE *)v28 + 8) + 16);
        }

        else
        {
          id v29 = -[MREffectCoverCascadeEvent initWithRelativeX:relativeY:type:relativeStartTime:andDuration:]( objc_alloc(&OBJC_CLASS___MREffectCoverCascadeEvent),  "initWithRelativeX:relativeY:type:relativeStartTime:andDuration:",  *((char *)v28 + 8),  (char)v43,  v42,  v28[2] + 0.5,  1.1);
          [v5 addObject:v29];

          v24 |= 1 << (*((_BYTE *)v28 + 8) + 16);
        }

        ++v27;
      }

      while (v23 != v27);
      if ((v40 & 1) != 0) {
        int v30 = 2;
      }
      else {
        int v30 = -2;
      }
      HIDWORD(v39) = v30;
      do
      {
        float v31 = (double *)[v5 objectAtIndex:v11];
        char v32 = *((_BYTE *)v31 + 8);
        int v33 = 1 << (v32 + 16);
        if ((v33 & v24) == 0)
        {
          double v34 = v31;
          if ((uint64_t)[a2 randomInt] % 100 < v41
            && ((v33 & v25) != 0 || (uint64_t)[a2 randomInt] % 100 <= 49))
          {
            double v35 = -[MREffectCoverCascadeEvent initWithRelativeX:relativeY:type:relativeStartTime:andDuration:]( objc_alloc(&OBJC_CLASS___MREffectCoverCascadeEvent),  "initWithRelativeX:relativeY:type:relativeStartTime:andDuration:",  (char)(v32 + BYTE4(v39)),  (char)v43,  v42,  v34[2] + 1.0,  1.1);
            [v5 addObject:v35];
          }
        }

        ++v11;
      }

      while (v23 != (char *)v11);
    }

    v40 ^= 1u;
    unsigned int v36 = v39;
    uint64_t v11 = (uint64_t)v23;
    LODWORD(v39) = v39 + 1;
  }

  while (v36 < 3);
  return v5;
}

id GenerateScenario1(void *a1)
{
  id v1 = +[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array");
  unsigned __int8 v2 = 0;
  double v3 = 0.0;
  do
  {
    char v4 = 0;
    double v5 = v3;
    do
    {
      unsigned __int8 v6 = objc_alloc(&OBJC_CLASS___MREffectCoverCascadeEvent);
      if (v4) {
        uint64_t v7 = 7LL;
      }
      else {
        uint64_t v7 = 6LL;
      }
      int v8 = v4;
      int v9 = -[MREffectCoverCascadeEvent initWithRelativeX:relativeY:type:relativeStartTime:andDuration:]( v6,  "initWithRelativeX:relativeY:type:relativeStartTime:andDuration:",  (char)v2,  v4,  v7,  v5,  dbl_1FA320[v4 == 0]);
      [v1 addObject:v9];

      double v5 = v5 + dbl_1FA330[v4-- == 0];
    }

    while (v8 > -3);
    double v3 = v3 + ((double)((uint64_t)[a1 randomInt] % 1000) * 0.0007 + 0.3) * 0.7;
    unsigned int v10 = v2++;
  }

  while (v10 < 6);
  return v1;
}

id GenerateScenario2(void *a1)
{
  id v2 = +[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array");
  unsigned __int8 v3 = 0;
  double v4 = 0.0;
  do
  {
    int v5 = 253;
    double v6 = v4;
    do
    {
      int v7 = v5;
      int v8 = -[MREffectCoverCascadeEvent initWithRelativeX:relativeY:type:relativeStartTime:andDuration:]( objc_alloc(&OBJC_CLASS___MREffectCoverCascadeEvent),  "initWithRelativeX:relativeY:type:relativeStartTime:andDuration:",  (char)v3,  (char)v5,  5LL,  v6,  1.5);
      [v2 addObject:v8];

      double v6 = v6 + (double)((uint64_t)[a1 randomInt] % 1000) * 0.0002 + 0.15;
      int v5 = v7 + 1;
    }

    while ((v7 & 0x80) != 0);
    double v4 = v4 + ((double)((uint64_t)[a1 randomInt] % 1000) * 0.0005 + 0.4) * 0.7;
    unsigned int v9 = v3++;
  }

  while (v9 < 6);
  return v2;
}

id GenerateScenario3(uint64_t a1, void *a2)
{
  id v3 = +[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array");
  int v4 = 254;
  double v5 = 0.0;
  do
  {
    int v6 = v4;
    int v7 = -[MREffectCoverCascadeEvent initWithRelativeX:relativeY:type:relativeStartTime:andDuration:]( objc_alloc(&OBJC_CLASS___MREffectCoverCascadeEvent),  "initWithRelativeX:relativeY:type:relativeStartTime:andDuration:",  0LL,  (char)v4,  5LL,  v5,  1.5);
    [v3 addObject:v7];

    double v5 = v5 + (double)((uint64_t)[a2 randomInt] % 1000) * 0.0002 + 0.15;
    int v4 = v6 + 1;
  }

  while ((v6 & 0x80) != 0);
  return v3;
}

id GenerateScenario4(uint64_t a1, void *a2)
{
  id v3 = +[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array");
  uint64_t v4 = (uint64_t)[a2 randomInt];
  uint64_t v5 = v4 & 1;
  if (v4 < 0) {
    uint64_t v5 = -v5;
  }
  int v6 = -(int)v5;
  double v7 = 0.0;
  int v8 = -(int)v5;
  do
  {
    unsigned int v9 = objc_alloc(&OBJC_CLASS___MREffectCoverCascadeEvent);
    else {
      uint64_t v10 = 7LL;
    }
    int v11 = (char)v8;
    double v12 = -[MREffectCoverCascadeEvent initWithRelativeX:relativeY:type:relativeStartTime:andDuration:]( v9,  "initWithRelativeX:relativeY:type:relativeStartTime:andDuration:",  0LL,  (char)v8,  v10,  v7,  dbl_1FA320[v8 == v6]);
    [v3 addObject:v12];

    double v7 = v7 + dbl_1FA330[v8 == v6];
    LOBYTE(v_Block_object_dispose(va, 8) = v8 - 1;
  }

  while (v11 > -3);
  return v3;
}

id GenerateScenario5(void *a1)
{
  id v2 = +[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array");
  unsigned __int8 v3 = 0;
  double v4 = 0.0;
  do
  {
    int v5 = 0;
    double v6 = v4;
    do
    {
      int v7 = (char)v5;
      int v8 = -[MREffectCoverCascadeEvent initWithRelativeX:relativeY:type:relativeStartTime:andDuration:]( objc_alloc(&OBJC_CLASS___MREffectCoverCascadeEvent),  "initWithRelativeX:relativeY:type:relativeStartTime:andDuration:",  (char)v3,  (char)v5,  8LL,  v6,  dbl_1FA320[v5 == 0]);
      [v2 addObject:v8];

      double v6 = v6 + dbl_1FA330[v5-- == 0];
    }

    while (v7 > -3);
    double v4 = v4 + ((double)((uint64_t)[a1 randomInt] % 1000) * 0.0007 + 0.3) * 0.7;
    unsigned int v9 = v3++;
  }

  while (v9 < 6);
  return v2;
}

LABEL_94:
    int v11 = v87;
    mDefaultMainDuration = v33;
  }

  while (a3);
LABEL_103:
  v9->super.mDefaultMainDuration = v33 + 4.0;
  -[MREffectCoverCascade _applyTimingToSlideProviders](v9, "_applyTimingToSlideProviders");
  return v33;
}

_BYTE *sub_1193E8(uint64_t a1, uint64_t a2)
{
  uint64_t result = [*(id *)(*(void *)(a1 + 32) + 185) objectAtIndex:a2];
  if (*(double *)(a1 + 56) >= *((double *)result + 3))
  {
    double v4 = result;
    char v5 = result[64];
    int v6 = result[67];
    if (v6 == 1) {
      ++v5;
    }
    unsigned __int8 v7 = v5 - (v6 == 2);
    unsigned __int8 v8 = result[65] - (v6 == 3) - (v6 == 4);
    uint64_t v9 = 4LL * v7;
    char v10 = 1;
    unsigned int v11 = v7;
    do
    {
      char v12 = v10;
      if (v11 <= 6 && v8 <= 3u)
      {
        uint64_t v14 = *(int *)(*(void *)(a1 + 64) + 4 * (v9 + v8));
        unint64_t v15 = 0LL;
        do
        {
          unsigned int v16 = [*(id *)(*(void *)(a1 + 72) + 8 * v15) containsIndex:v14];
          if ((v16 & 1) != 0)
          {
            [*(id *)(*(void *)(a1 + 72) + 8 * v15) removeIndex:v14];
            uint64_t v19 = (id *)(*(void *)(a1 + 72) + 8 * v15 + 8);
            goto LABEL_20;
          }

          BOOL v18 = v15++ < 2;
        }

        while ((v18 & ~v16 & 1) != 0);
        uint64_t result = [*(id *)(a1 + 40) containsIndex:v14];
        if (!(_DWORD)result) {
          goto LABEL_21;
        }
        [*(id *)(a1 + 40) removeIndex:v14];
        uint64_t v19 = (id *)(a1 + 48);
LABEL_20:
        uint64_t result = [*v19 addIndex:v14];
      }

void sub_119578(uint64_t a1, uint64_t a2)
{
  double v4 = [*(id *)(*(void *)(a1 + 32) + 185) objectAtIndex:a2];
  if (v4[7] == 0x7FFFFFFFFFFFFFFFLL)
  {
    char v5 = 0LL;
LABEL_4:
    id v7 = [*(id *)(a1 + 48) retainedByUserBlackImage];
    goto LABEL_6;
  }

  id v6 = [*(id *)(a1 + 40) objectForKey:v4[6]];
  char v5 = v6;
  if (v4[7] == 0x7FFFFFFFFFFFFFFFLL) {
    goto LABEL_4;
  }
  id v7 = [v6 retainedByUserRenderedImageAtTime:*(void *)(a1 + 48) inContext:*(void *)(a1 + 56) withArguments:*(double *)(a1 + 64)];
LABEL_6:
  char v10 = v7;
  if (v7)
  {
    LOBYTE(v_Block_object_dispose(va, 8) = *((_BYTE *)v4 + 64);
    double v11 = -1.0;
    LOBYTE(v9) = *((_BYTE *)v4 + 65);
    LODWORD(v11) = 0;
    +[MRCroppingSprite renderImage:inContext:atPosition:andSize:zRotation:]( &OBJC_CLASS___MRCroppingSprite,  "renderImage:inContext:atPosition:andSize:zRotation:",  v7,  *(void *)(a1 + 48),  ((double)v8 + 0.5) * *(double *)(a1 + 72) + -1.0,  ((double)v9 + 0.5) * *(double *)(a1 + 80) + -1.0,  *(double *)(a1 + 72),  *(double *)(a1 + 80),  v11);
    [v10 releaseByUser];
  }

  else
  {
    uint64_t v12 = v4[7];
    uint64_t v13 = *(void *)(a1 + 64);
    [v5 showTime];
    uint64_t v15 = v14;
    [v5 showDuration];
    NSLog( @"slideProvider is NULL for index %d, %d\n\ttime=%f, startTime=%f, duration=%f",  a2,  v12,  v13,  v15,  v16);
    NSLog(@"phaseTime: %f, slideStory: %f %f %f %f", *(void *)(a1 + 88), v4[1], v4[2], v4[3], v4[4]);
  }

void sub_1196E8(uint64_t a1, uint64_t a2)
{
  double v4 = [*(id *)(*(void *)(a1 + 32) + 185) objectAtIndex:a2];
  if (v4[7] == 0x7FFFFFFFFFFFFFFFLL)
  {
    char v5 = 0LL;
LABEL_4:
    id v7 = [*(id *)(a1 + 48) retainedByUserBlackImage];
    goto LABEL_6;
  }

  id v6 = [*(id *)(a1 + 40) objectForKey:v4[6]];
  char v5 = v6;
  if (v4[7] == 0x7FFFFFFFFFFFFFFFLL) {
    goto LABEL_4;
  }
  id v7 = [v6 retainedByUserRenderedImageAtTime:*(void *)(a1 + 48) inContext:*(void *)(a1 + 56) withArguments:*(double *)(a1 + 64)];
LABEL_6:
  unint64_t v8 = v7;
  if (v7)
  {
    DrawRotatingSlide((uint64_t)v7, *(void **)(a1 + 48), (uint64_t)v4, *(double *)(a1 + 72));
    [v8 releaseByUser];
  }

  else
  {
    uint64_t v9 = v4[7];
    uint64_t v10 = *(void *)(a1 + 64);
    [v5 showTime];
    uint64_t v12 = v11;
    [v5 showDuration];
    NSLog( @"slideProvider is NULL for index %d, %d\n\ttime=%f, startTime=%f, duration=%f",  a2,  v9,  v10,  v12,  v13);
    NSLog(@"phaseTime: %f, slideStory: %f %f %f %f", *(void *)(a1 + 72), v4[1], v4[2], v4[3], v4[4]);
  }

void DrawRotatingSlide(uint64_t a1, void *a2, uint64_t a3, double a4)
{
  double v8 = *(double *)(a3 + 24);
  if (v8 > a4)
  {
    double v11 = *(double *)(a3 + 8);
    uint64_t v9 = 66LL;
    uint64_t v10 = 16LL;
  }

  else
  {
    uint64_t v9 = 67LL;
    uint64_t v10 = 32LL;
    double v11 = *(double *)(a3 + 24);
  }

  double v12 = a4 - v11;
  double v13 = v12 / *(double *)(a3 + v10);
  LOBYTE(v12) = *(_BYTE *)(a3 + 64);
  double v14 = (float)((float)LODWORD(v12) + 0.5);
  double v15 = v14 * 0.285714298 + -1.0;
  LOBYTE(v14) = *(_BYTE *)(a3 + 65);
  double v16 = (float)((float)LODWORD(v14) + 0.5) * 0.5 + -1.0;
  unsigned __int8 v17 = *(_BYTE *)(a3 + v9) - 1;
  double v18 = (float)((float)(v17 & 1) + -0.5) * 0.285714298;
  [a2 localAspectRatio];
  double v20 = v15 - v18;
  double v21 = (float)((float)(v17 >> 1) + -0.5) * 0.5 / v19;
  [a2 localAspectRatio];
  double v23 = v16 / v22 - v21;
  if (v8 > a4)
  {
    if (v21 > 0.0)
    {
      float v29 = (1.0 - v13) * 3.45575213 + -1.57079637;
      float v30 = (float)(sinf(v29) + 1.0) / 1.9511;
      if (v30 > 1.0) {
        double v28 = 1.0;
      }
      else {
        double v28 = v30;
      }
      goto LABEL_16;
    }

    double v31 = v13 * 3.45575213 + -1.57079637;
    goto LABEL_15;
  }

  if (v21 <= 0.0)
  {
    double v31 = (1.0 - v13) * 3.45575213 + -1.57079637;
LABEL_15:
    float v32 = v31;
    double v28 = (float)((float)((float)(sinf(v32) + 1.0) / -1.9511) + 1.0);
    goto LABEL_16;
  }

  float v24 = v13 * 3.45575213 + -1.57079637;
  float v25 = (float)(sinf(v24) + 1.0) / 1.9511;
  double v26 = v25;
  BOOL v27 = v25 <= 1.0;
  double v28 = 1.0;
  if (v27) {
    double v28 = v26;
  }
LABEL_16:
  float v33 = dbl_1FA350[v18 > 0.0] * v28;
  __float2 v34 = __sincosf_stret(v33);
  double v35 = v20 + v18 * v34.__cosval - v21 * v34.__sinval;
  [a2 localAspectRatio];
  double v37 = (v23 + v18 * v34.__sinval + v21 * v34.__cosval) * v36;
  uint64_t v38 = objc_alloc(&OBJC_CLASS___MRTiledSprite);
  *(float *)&double v39 = v33;
  char v40 = -[MRTiledSprite initWithPosition:size:zRotation:innerRect:context:]( v38,  "initWithPosition:size:zRotation:innerRect:context:",  a2,  v35,  v37,  0.285714298,  0.5,  v39,  0LL,  0LL,  0x3FF0000000000000LL,  0x3FF0000000000000LL);
  int v42 = (v17 == 0) - (v17 == 1);
  if (v17 == 3) {
    int v43 = -1;
  }
  else {
    int v43 = 0;
  }
  unsigned int v44 = *(unsigned __int8 *)(a3 + 64);
  double v47 = v40;
  if ((int)(v42 + v44) <= 6)
  {
    int v45 = *(unsigned __int8 *)(a3 + 65);
    if (v43 - (v17 == 2) + v45 <= 3)
    {
      int v46 = v45 - 1;
      if (v17 < 2u) {
        int v46 = v45 + 1;
      }
      LODWORD(v41) = 0;
      -[MRTiledSprite subtractSpriteAtPosition:withSize:zRotation:andOpaqueRect:inContext:]( v40,  "subtractSpriteAtPosition:withSize:zRotation:andOpaqueRect:inContext:",  a2,  ((double)v44 + (double)v42 * 1.5 + (double)(v43 + (v17 == 2)) * 0.5 + 0.5) * 0.285714298 + -1.0,  (double)v46 * 0.5 + -1.0,  0.571428597,  1.0,  v41,  0LL,  0LL,  0x3FF0000000000000LL,  0x3FF0000000000000LL);
      char v40 = v47;
    }
  }

  -[MRTiledSprite renderImage:inContext:](v40, "renderImage:inContext:", a1, a2);
}

void sub_119BA4(uint64_t a1, uint64_t a2)
{
  double v4 = [*(id *)(*(void *)(a1 + 32) + 185) objectAtIndex:a2];
  if (v4[7] == 0x7FFFFFFFFFFFFFFFLL)
  {
    char v5 = 0LL;
LABEL_4:
    id v7 = [*(id *)(a1 + 48) retainedByUserBlackImage];
    goto LABEL_6;
  }

  id v6 = [*(id *)(a1 + 40) objectForKey:v4[6]];
  char v5 = v6;
  if (v4[7] == 0x7FFFFFFFFFFFFFFFLL) {
    goto LABEL_4;
  }
  id v7 = [v6 retainedByUserRenderedImageAtTime:*(void *)(a1 + 48) inContext:*(void *)(a1 + 56) withArguments:*(double *)(a1 + 64)];
LABEL_6:
  uint64_t v10 = v7;
  if (v7)
  {
    LOBYTE(v_Block_object_dispose(va, 8) = *((_BYTE *)v4 + 64);
    double v11 = -1.0;
    LOBYTE(v9) = *((_BYTE *)v4 + 65);
    LODWORD(v11) = 0;
    +[MRCroppingSprite renderImage:inContext:atPosition:andSize:zRotation:]( &OBJC_CLASS___MRCroppingSprite,  "renderImage:inContext:atPosition:andSize:zRotation:",  v7,  *(void *)(a1 + 48),  ((double)v8 + 0.5) * *(double *)(a1 + 72) + -1.0,  ((double)v9 + 0.5) * *(double *)(a1 + 80) + -1.0,  *(double *)(a1 + 72),  *(double *)(a1 + 80),  v11);
    [v10 releaseByUser];
  }

  else
  {
    uint64_t v12 = v4[7];
    uint64_t v13 = *(void *)(a1 + 64);
    [v5 showTime];
    uint64_t v15 = v14;
    [v5 showDuration];
    NSLog( @"slideProvider is NULL for index %d, %d\n\ttime=%f, startTime=%f, duration=%f",  a2,  v12,  v13,  v15,  v16);
    NSLog(@"phaseTime: %f, slideStory: %f %f %f %f", *(void *)(a1 + 88), v4[1], v4[2], v4[3], v4[4]);
  }

void sub_119D14(uint64_t a1, uint64_t a2)
{
  double v4 = [*(id *)(*(void *)(a1 + 32) + 185) objectAtIndex:a2];
  if (v4[7] == 0x7FFFFFFFFFFFFFFFLL)
  {
    char v5 = 0LL;
LABEL_4:
    id v7 = [*(id *)(a1 + 48) retainedByUserBlackImage];
    goto LABEL_6;
  }

  id v6 = [*(id *)(a1 + 40) objectForKey:v4[6]];
  char v5 = v6;
  if (v4[7] == 0x7FFFFFFFFFFFFFFFLL) {
    goto LABEL_4;
  }
  id v7 = [v6 retainedByUserRenderedImageAtTime:*(void *)(a1 + 48) inContext:*(void *)(a1 + 56) withArguments:*(double *)(a1 + 64)];
LABEL_6:
  unint64_t v8 = v7;
  if (v7)
  {
    unint64_t v9 = *(void **)(a1 + 48);
    double v10 = *(double *)(a1 + 72);
    if (*((_BYTE *)v4 + 67) == 5) {
      DrawFallingSlide((uint64_t)v7, v9, (uint64_t)v4, v10);
    }
    else {
      DrawFlippingSlide((uint64_t)v7, v9, (uint64_t)v4, v10);
    }
    [v8 releaseByUser];
  }

  else
  {
    uint64_t v11 = v4[7];
    uint64_t v12 = *(void *)(a1 + 64);
    [v5 showTime];
    uint64_t v14 = v13;
    [v5 showDuration];
    NSLog( @"slideProvider is NULL for index %d, %d\n\ttime=%f, startTime=%f, duration=%f",  a2,  v11,  v12,  v14,  v15);
    NSLog(@"phaseTime: %f, slideStory: %f %f %f %f", *(void *)(a1 + 72), v4[1], v4[2], v4[3], v4[4]);
  }

id DrawFallingSlide(uint64_t a1, void *a2, uint64_t a3, double a4)
{
  double v6 = (a4 - *(double *)(a3 + 24)) / *(double *)(a3 + 32);
  double v7 = v6 * v6;
  double v8 = v7 + v7;
  if (v7 + v7 < 0.25) {
    double v8 = v7 * (v6 * 3.53553391 + v6 * -5.0 * v6 + 1.375);
  }
  unsigned int v9 = *(unsigned __int8 *)(a3 + 64);
  unsigned int v10 = *(unsigned __int8 *)(a3 + 65);
  if (v8 >= 0.25)
  {
    double v16 = v6 / 0.353553385 + -1.0;
    double v13 = v16 * (v16 + 1.0) + 1.57079637;
    double v14 = v16 * 0.5 + 1.0;
    double v15 = v16 * *(float *)(a3 + 40);
  }

  else
  {
    float v11 = v8 * -4.0 + 1.0;
    float v12 = acosf(v11);
    double v13 = v12;
    double v14 = sinf(v12);
    double v15 = 0.0;
  }

  double v17 = v14 * 0.25;
  float v18 = v15;
  float v19 = v13 * 57.2957764;
  *(float *)&double v20 = MRMatrix_SetRotationFromAnglesYXZDeg((uint64_t)v38, v18, v19, 0.0);
  objc_msgSend(a2, "localAspectRatio", v20);
  float v23 = ((float)((float)v10 + 0.5) * 0.5 + -1.0 - v8) / v22;
  [a2 localAspectRatio];
  float v25 = v17 / v24;
  float v21 = (float)((float)v9 + 0.5) * 0.285714298 + -1.0;
  *(float *)&double v26 = MRMatrix_Translate(v38, v21, v23, v25);
  objc_msgSend(a2, "composeModelViewMatrix:saveTo:", v38, v37, v26);
  float v27 = v13;
  float v28 = cosf(v27);
  float v29 = v15 * 0.0174532924;
  *(float *)&double v30 = (float)(fabsf(v28 * cosf(v29)) * 0.8) + 0.2;
  LODWORD(v31) = 1.0;
  LODWORD(v32) = LODWORD(v30);
  LODWORD(v33) = LODWORD(v30);
  [a2 composeForeColorRed:v36 green:v30 blue:v32 alpha:v33 saveTo:v31];
  LODWORD(v34) = 0;
  +[MRCroppingSprite renderImage:inContext:atPosition:andSize:zRotation:]( &OBJC_CLASS___MRCroppingSprite,  "renderImage:inContext:atPosition:andSize:zRotation:",  a1,  a2,  CGPointZero.x,  CGPointZero.y,  0.285714298,  0.5,  v34);
  [a2 restoreForeColor:v36];
  return [a2 restoreModelViewMatrix:v37];
}

id DrawFlippingSlide(uint64_t a1, void *a2, uint64_t a3, double a4)
{
  double v7 = *(double *)(a3 + 32);
  uint64_t v8 = 8LL;
  if (v7 <= 0.0) {
    double v7 = *(double *)(a3 + 16);
  }
  else {
    uint64_t v8 = 24LL;
  }
  double v9 = (a4 - *(double *)(a3 + v8)) / v7;
  LOBYTE(v7) = *(_BYTE *)(a3 + 64);
  double v10 = (float)((float)LODWORD(v7) + 0.5);
  double v11 = v10 * 0.285714298 + -1.0;
  LOBYTE(v10) = *(_BYTE *)(a3 + 65);
  double v12 = (float)((float)LODWORD(v10) + 0.5) * 0.5 + -1.0;
  unsigned int v13 = *(unsigned __int8 *)(a3 + 67);
  if (v13 == 6)
  {
    double v14 = v9 * v9 * 2.25;
    double v15 = v9 * 3.0 + 1.0;
    double v16 = 0.666666687;
LABEL_8:
    if (v9 >= v16) {
      double v17 = v15;
    }
    else {
      double v17 = v14;
    }
    double v18 = v17 * 3.14159274;
LABEL_12:
    float v19 = v18;
    float v20 = cosf(v19);
    float v21 = -3.0 - v20;
    float v22 = v20 + -1.0;
    if (v18 > 3.14159274) {
      float v22 = v21;
    }
    goto LABEL_14;
  }

  if (v13 >= 5)
  {
    double v14 = v9 + v9;
    double v15 = v9 * 2.0 + 2.0;
    double v16 = 0.5;
    goto LABEL_8;
  }

  if (v9 < 0.5) {
    double v9 = v9 + -1.0;
  }
  double v18 = (v9 + v9) * 3.14159274;
  if (*(_BYTE *)(a3 + 67)) {
    goto LABEL_12;
  }
  float v19 = v18;
  float v42 = cosf(v19);
  float v43 = v42 + 1.0;
  float v22 = -1.0 - v42;
  if (v18 <= 0.0) {
    float v22 = v43;
  }
LABEL_14:
  double v23 = v12 + v22 * 0.25;
  double v24 = fabs(sinf(v19) * 0.25);
  float v25 = v18 * 57.2957764;
  *(float *)&double v26 = MRMatrix_SetRotationFromAnglesYXZDeg((uint64_t)v46, 0.0, v25, 0.0);
  objc_msgSend(a2, "localAspectRatio", v26);
  *(float *)&double v23 = v23 / v28;
  [a2 localAspectRatio];
  float v30 = v24 / v29;
  float v27 = v11;
  *(float *)&double v31 = MRMatrix_Translate(v46, v27, *(float *)&v23, v30);
  objc_msgSend(a2, "composeModelViewMatrix:saveTo:", v46, v45, v31);
  int v32 = *(unsigned __int8 *)(a3 + 67);
  BOOL v33 = v18 < 3.14159274 && v32 == 7;
  if (v33
    || (v18 > 3.14159274 ? (BOOL v34 = v32 == 0) : (BOOL v34 = 1), !v34 || (v18 < -1.57079633 ? (v35 = v32 == 0) : (v35 = 0), v35)))
  {
    [a2 cull:1];
  }

  *(float *)&double v36 = (float)(fabsf(cosf(v19)) * 0.8) + 0.2;
  LODWORD(v37) = 1.0;
  LODWORD(v3_Block_object_dispose(va, 8) = LODWORD(v36);
  LODWORD(v39) = LODWORD(v36);
  [a2 composeForeColorRed:v44 green:v36 blue:v38 alpha:v39 saveTo:v37];
  LODWORD(v40) = 0;
  +[MRCroppingSprite renderImage:inContext:atPosition:andSize:zRotation:]( &OBJC_CLASS___MRCroppingSprite,  "renderImage:inContext:atPosition:andSize:zRotation:",  a1,  a2,  CGPointZero.x,  CGPointZero.y,  0.285714298,  0.5,  v40);
  [a2 restoreForeColor:v44];
  [a2 cull:0];
  return [a2 restoreModelViewMatrix:v45];
}

id sub_11F2D4(id result)
{
  uint64_t v1 = *((void *)result + 4);
  if (*(void *)(v1 + 193))
  {
    id v2 = result;
    *(_BYTE *)(v1 + 21_Block_object_dispose(va, 8) = 0;
    uint64_t v3 = *((void *)result + 5);
    v8.receiver = (id)*((void *)result + 4);
    v8.super_class = (Class)&OBJC_CLASS___MREffectFloating;
    objc_msgSendSuper2(&v8, "setMultiImageSlideRange:", v3, *((void *)result + 6));
    id v4 = [*(id *)(v2[4] + 193) count];
    uint64_t v5 = v2[4];
    if ((unint64_t)v4 >= 2)
    {
      int64_t v6 = v2[5] / 0x14uLL - 2;
      uint64_t v7 = *(void *)(v5 + 225);
      if (v6 > v7)
      {
        objc_msgSend(*(id *)(v5 + 193), "removeObjectsInRange:", 0, v6 - v7);
        objc_msgSend(*(id *)(v2[4] + 201), "removeObjectsInRange:", 0, v6 - *(void *)(v2[4] + 225));
        objc_msgSend(*(id *)(v2[4] + 209), "removeObjectsInRange:", 0, v6 - *(void *)(v2[4] + 225));
        *(void *)(v2[4] + 225LL) = v6;
        uint64_t v5 = v2[4];
      }
    }

    if (*(void *)(v5 + 16))
    {
      *(void *)(v5 + 185) = v2[6] + v2[5];
      uint64_t v5 = v2[4];
    }

    uint64_t result = [(id)v5 _orderImages];
    *(_BYTE *)(v2[4] + 217LL) = 1;
  }

  return result;
}

LABEL_147:
    if (v145)
    {
      [v5 unsetShader];
      [v5 blend:3];
      [v5 setShader:@"FragmentFloating"];
    }

    [v5 restoreModelViewMatrix:v214];
    v117 += v206;
    double v172 = v117 < 3;
    double v118 = v193;
    if (!v193) {
      double v172 = v117 >= 0;
    }
    if (v172) {
      continue;
    }
    break;
  }

  [v5 restoreModelViewMatrix:v212];
  [v5 blend:0];
  [v5 unsetShader];
  [v5 unsetVertexPointer];
  [v5 depthTest:0];
}

void sub_1219B0(_Unwind_Exception *a1)
{
}

void sub_121DC8(_Unwind_Exception *a1)
{
}

void sub_122098(_Unwind_Exception *a1)
{
}

void sub_122250(_Unwind_Exception *a1)
{
}

uint64_t sub_1227C8(void *a1)
{
  uint64_t v2 = a1[2];
  if (!v2)
  {
    (*(void (**)(void *, uint64_t, uint64_t, uint64_t))(*a1 + 272LL))(a1, 21LL, -1LL, -1LL);
    uint64_t v2 = a1[2];
  }

  return (*(uint64_t (**)(uint64_t))(*(void *)v2 + 120LL))(v2);
}

uint64_t sub_122814(void *a1)
{
  uint64_t v2 = (uint64_t (***)(void))a1[2];
  if (!v2)
  {
    (*(void (**)(void *, uint64_t, uint64_t, uint64_t))(*a1 + 272LL))(a1, 21LL, -1LL, -1LL);
    uint64_t v2 = (uint64_t (***)(void))a1[2];
  }

  return (**v2)(v2);
}

uint64_t sub_122860(uint64_t a1)
{
  return *(unsigned int *)(a1 + 32);
}

uint64_t sub_122868(uint64_t a1, char *__s1)
{
  if (!__s1) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v2 = *(unsigned int *)(a1 + 32);
  uint64_t v4 = 0LL;
  for (uint64_t i = *(const char ***)(a1 + 24); !*i || strcmp(__s1, *i); i += 3)
  {
    if (v2 == ++v4) {
      return 0xFFFFFFFFLL;
    }
  }

  return v4;
}

uint64_t sub_1228D0(uint64_t a1, unsigned int a2)
{
  else {
    return *(void *)(*(void *)(a1 + 24) + 24LL * a2);
  }
}

float sub_1228FC(uint64_t a1, int a2)
{
  return *(float *)(*(void *)(a1 + 24) + 24LL * a2 + 16);
}

float sub_122910(void *a1)
{
  int v2 = (*(uint64_t (**)(void *))(*a1 + 304LL))(a1);
  if (v2 < 0) {
    (*(void (**)(void *, uint64_t, uint64_t, uint64_t))(*a1 + 272LL))(a1, 20LL, -1LL, -1LL);
  }
  return *(float *)(a1[3] + 24LL * v2 + 16);
}

BOOL sub_12296C(uint64_t a1)
{
  return (*(unsigned int (**)(uint64_t))(*(void *)a1 + 304LL))(a1) != -1;
}

uint64_t sub_122990(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v1 + 40LL))(v1);
  }
  else {
    return 1LL;
  }
}

void *sub_1229AC(uint64_t a1)
{
  int v2 = sub_122A0C(0x28uLL);
  uint64_t v3 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 288LL))(a1);
  sub_12413C((uint64_t)v2, v3);
  return v2;
}

void sub_1229F4(_Unwind_Exception *exception_object)
{
  if (v1) {
    free(v1);
  }
  _Unwind_Resume(exception_object);
}

void *sub_122A0C(size_t a1)
{
  uint64_t result = malloc(a1);
  if (!result)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 5;
    exception[1] = 0LL;
    exception[2] = 0LL;
  }

  return result;
}

void sub_122A4C(void *a1)
{
  if (a1) {
    free(a1);
  }
}

void *sub_122A58(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1) {
    return (void *)(*(uint64_t (**)(uint64_t))(*(void *)v1 + 112LL))(v1);
  }
  uint64_t result = sub_122A0C(0x18uLL);
  void *result = off_24D3F8;
  result[1] = 0LL;
  *((_DWORD *)result + 4) = 0;
  return result;
}

void *sub_122A98(uint64_t a1, unsigned int a2)
{
  uint64_t result = sub_122A0C(0x18uLL);
  void *result = off_24D3F8;
  result[1] = 0LL;
  *((_DWORD *)result + 4) = 0;
  return result;
}

uint64_t sub_122AF4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 288LL))(a2);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 112LL))(a1, v3);
}

uint64_t sub_122B30(uint64_t a1, unsigned int a2, float a3)
{
  *(float *)(*(void *)(a1 + 24) + 24LL * a2 + 16) = a3;
  return 1LL;
}

uint64_t sub_122B60(uint64_t a1, float a2)
{
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 304LL))(a1);
  if ((v4 & 0x80000000) != 0) {
    return 0LL;
  }
  else {
    return (*(uint64_t (**)(uint64_t, uint64_t, float))(*(void *)a1 + 352LL))(a1, v4, a2);
  }
}

void sub_122BC0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 96LL))(v2);
    if ((*(unsigned int (**)(void))(**(void **)(a1 + 16) + 40LL))(*(void *)(a1 + 16)))
    {
      if (!(*(unsigned int (**)(void))(**(void **)(a1 + 16) + 24LL))(*(void *)(a1 + 16)))
      {
        float v3 = (***(float (****)(void))(a1 + 16))(*(void *)(a1 + 16));
        uint64_t v4 = *(void *)(a1 + 16);
        *(void *)(a1 + 16) = 0LL;
        uint64_t v5 = (float *)sub_122A0C(0x18uLL);
        v5[4] = v3;
        *(void *)(a1 + 16) = v5;
        *(void *)uint64_t v5 = off_24D3F8;
        *((void *)v5 + 1) = a1;
        if (v4) {
          (*(void (**)(uint64_t))(*(void *)v4 + 152LL))(v4);
        }
      }
    }

    uint64_t v6 = *(unsigned int *)(a1 + 32);
    uint64_t v7 = *(void *)(a1 + 16);
    objc_super v8 = *(void **)(a1 + 24);
    *(void *)(a1 + 24) = 0LL;
    *(_DWORD *)(a1 + 32) = 0;
    (*(void (**)(uint64_t, uint64_t))(*(void *)v7 + 88LL))(v7, a1);
    if ((int)v6 < 1)
    {
      if (!v8) {
        return;
      }
    }

    else
    {
      double v9 = v8;
      do
      {
        int v10 = (*(uint64_t (**)(uint64_t, void))(*(void *)a1 + 304LL))(a1, *v9);
        int v11 = v10;
        if (v10 == -1)
        {
          if (*v9) {
            operator delete[]((void *)*v9);
          }
          double v17 = (void *)v9[1];
          if (v17) {
            operator delete[](v17);
          }
        }

        else
        {
          uint64_t v12 = *(void *)(a1 + 24);
          unsigned int v13 = *(void **)(v12 + 24LL * v10);
          if (v13)
          {
            operator delete[](v13);
            uint64_t v12 = *(void *)(a1 + 24);
          }

          double v14 = *(void **)(v12 + 24LL * v11 + 8);
          if (v14)
          {
            operator delete[](v14);
            uint64_t v12 = *(void *)(a1 + 24);
          }

          __int128 v15 = *(_OWORD *)v9;
          uint64_t v16 = v12 + 24LL * v11;
          *(void *)(v16 + 16) = v9[2];
          *(_OWORD *)uint64_t v16 = v15;
        }

        v9 += 3;
        --v6;
      }

      while (v6);
    }

    operator delete[](v8);
  }

void sub_122D5C(void *a1)
{
  uint64_t v3 = *(void *)(v1 + 16);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 152LL))(v3);
  }
  *(void *)(v1 + 16) = v2;
  __cxa_end_catch();
  JUMPOUT(0x122C64LL);
}

void sub_122D80(_Unwind_Exception *a1)
{
}

uint64_t sub_122DCC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 104LL))(*(void *)(a1 + 16));
}

char *sub_122DDC(uint64_t a1, int a2, int a3)
{
  if (a2 < 0 || *(_DWORD *)(a1 + 32) <= a2) {
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 272LL))(a1, 20LL, -1LL, -1LL);
  }
  if (a3 < 0) {
    size_t v6 = -1LL;
  }
  else {
    size_t v6 = 4LL * a3;
  }
  uint64_t v7 = (char *)operator new[](v6);
  objc_super v8 = v7;
  uint64_t v9 = *(void *)(a1 + 24);
  int v10 = *(const void **)(v9 + 24LL * a2 + 8);
  if (v10)
  {
    memcpy(v7, v10, 4LL * a3);
  }

  else if (a3 >= 1)
  {
    uint64_t v11 = 0LL;
    int v12 = *(_DWORD *)(v9 + 24LL * a2 + 16);
    do
    {
      *(_DWORD *)&v7[v11] = v12;
      v11 += 4LL;
    }

    while (4LL * a3 != v11);
  }

  return v8;
}

void sub_122EA8(void *a1, int a2)
{
  uint64_t v4 = (unsigned int *)__cxa_begin_catch(a1);
  if (a2 == 2) {
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)v2 + 272LL))(v2, *v4, -1LL, -1LL);
  }
  else {
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v2 + 272LL))(v2, 5LL, -1LL, -1LL);
  }
  __cxa_end_catch();
  JUMPOUT(0x122E90LL);
}

void sub_122F00(_Unwind_Exception *a1)
{
}

uint64_t sub_122F20(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 304LL))(a1);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 368LL))(a1, v5, a3);
}

uint64_t sub_122F60(uint64_t a1, unsigned int a2, const void *a3, int a4)
{
  uint64_t v5 = *(void *)(a1 + 24) + 24LL * a2;
  objc_super v8 = *(void **)(v5 + 8);
  uint64_t v7 = (void *)(v5 + 8);
  size_t v6 = v8;
  *uint64_t v7 = 0LL;
  if (a3)
  {
    size_t v9 = 4LL * a4;
    if (a4 < 0) {
      size_t v10 = -1LL;
    }
    else {
      size_t v10 = 4LL * a4;
    }
    uint64_t v11 = operator new[](v10);
    *uint64_t v7 = v11;
    memcpy(v11, a3, v9);
  }

  if (v6) {
    operator delete[](v6);
  }
  return 1LL;
}

void sub_122FF4(void *a1)
{
  *(void *)(v2[3] + 24LL * v3 + _Block_object_dispose(va, 8) = v1;
  (*(void (**)(void *, uint64_t, uint64_t, uint64_t))(*v2 + 272LL))(v2, 5LL, -1LL, -1LL);
  __cxa_end_catch();
  if (!v1) {
    JUMPOUT(0x122FD4LL);
  }
  JUMPOUT(0x122FCCLL);
}

void sub_123030(_Unwind_Exception *a1)
{
}

uint64_t sub_123044(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 304LL))(a1);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 384LL))(a1, v7, a3, a4);
}

uint64_t sub_123094(void *a1, uint64_t a2)
{
  if (!a1[2]) {
    (*(void (**)(void *, uint64_t, uint64_t, uint64_t))(*a1 + 272LL))(a1, 21LL, -1LL, -1LL);
  }
  else {
    return (*(uint64_t (**)(void, uint64_t))(*(void *)a1[2] + 8LL))(a1[2], a2);
  }
}

uint64_t sub_123100(void *a1, uint64_t a2, int a3)
{
  if (!a1[2]) {
    (*(void (**)(void *, uint64_t, uint64_t, uint64_t))(*a1 + 272LL))(a1, 21LL, -1LL, -1LL);
  }
  if (a3 < 1) {
    return 0LL;
  }
  uint64_t v6 = *(void *)a1[2];
  if (a2) {
    return (*(uint64_t (**)(void))(v6 + 16))();
  }
  else {
    return (*(uint64_t (**)(void))(v6 + 8))();
  }
}

void sub_12319C(uint64_t a1, void **a2)
{
  if (*a2) {
    operator delete[](*a2);
  }
  *a2 = 0LL;
}

uint64_t sub_1231C8(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = *(void *)(a1 + 16);
  if (v4) {
    BOOL v5 = v4 == a2;
  }
  else {
    BOOL v5 = 1;
  }
  uint64_t v6 = v5;
  if (v5)
  {
    if (v4) {
      (*(void (**)(uint64_t))(*(void *)v4 + 152LL))(v4);
    }
    *(void *)(a1 + 16) = a3;
    if (a3)
    {
      a3[1] = a1;
      (*(void (**)(void *, uint64_t))(*a3 + 88LL))(a3, a1);
    }
  }

  return v6;
}

uint64_t sub_123238(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 304LL))(a1);
  if ((v5 & 0x80000000) != 0) {
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 272LL))(a1, 20LL, -1LL, -1LL);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 80LL))(a1, v5, a3);
}

uint64_t sub_1232A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 312LL))(a1);
  uint64_t v7 = v6;
  uint64_t v9 = *(void *)(a1 + 16);
  if (v9)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v9 + 80LL))(v9, a2, a3);
    if (!(*(unsigned int (**)(uint64_t, uint64_t))(*(void *)a3 + 56LL))(a3, v7))
    {
      uint64_t v10 = *(void *)(a1 + 24);
      uint64_t v11 = v10 + 24LL * (int)a2;
      *(_DWORD *)(v11 + 16) = 0;
      int v12 = *(void **)(v11 + 8);
      if (v12)
      {
        operator delete[](v12);
        uint64_t v10 = *(void *)(a1 + 24);
      }

      uint64_t v13 = v10 + 24LL * (int)a2;
      *(void *)(v13 + _Block_object_dispose(va, 8) = 0LL;
      if (*(void *)v13)
      {
        operator delete[](*(void **)v13);
        uint64_t v10 = *(void *)(a1 + 24);
      }

      *(void *)(v10 + 24LL * (int)a2) = 0LL;
    }
  }

  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 272LL))(a1, 21LL, -1LL, -1LL);
  }

  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 96LL))(*(void *)(a1 + 16));
}

uint64_t sub_1233BC(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void **)(a1 + 16);
  if (!v2) {
    __cxa_bad_typeid();
  }
  if (sub_124AC4(*(void *)(*v2 - 8LL), *(void *)(*a2 - 8LL))) {
    return (*(uint64_t (**)(void, void *))(**(void **)(a1 + 16) + 128LL))(*(void *)(a1 + 16), a2);
  }
  else {
    return 1LL;
  }
}

uint64_t sub_123420(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2 && sub_124AC4(*(void *)(*v2 - 8LL), *(void *)(*a2 - 8LL))) {
    return (*(uint64_t (**)(void, void *))(**(void **)(a1 + 16) + 136LL))(*(void *)(a1 + 16), a2);
  }
  else {
    return 0LL;
  }
}

uint64_t sub_123480(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void *)(a2 + 16);
  if (!(v2 | v3)) {
    return 0LL;
  }
  if ((v2 == 0) != (v3 == 0)) {
    return 1LL;
  }
  return (*(uint64_t (**)(uint64_t))(*(void *)v2 + 128LL))(v2);
}

uint64_t sub_1234C4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 | *(void *)(a2 + 16)) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v2 + 136LL))(v2);
  }
  else {
    return 1LL;
  }
}

uint64_t sub_1234E8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3 != a2)
  {
    if (v3)
    {
      (*(void (**)(uint64_t))(*(void *)v3 + 152LL))(v3);
      *(void *)(a1 + 16) = 0LL;
    }

    if (*(int *)(a1 + 32) >= 1)
    {
      uint64_t v5 = 0LL;
      uint64_t v6 = 0LL;
      do
      {
        uint64_t v7 = *(void *)(a1 + 24);
        BOOL v8 = *(void **)(v7 + v5);
        if (v8)
        {
          operator delete[](v8);
          uint64_t v7 = *(void *)(a1 + 24);
        }

        uint64_t v9 = *(void **)(v7 + v5 + 8);
        if (v9) {
          operator delete[](v9);
        }
        ++v6;
        v5 += 24LL;
      }

      while (v6 < *(int *)(a1 + 32));
    }

    uint64_t v10 = *(void **)(a1 + 24);
    if (v10) {
      operator delete[](v10);
    }
    *(_DWORD *)(a1 + 32) = 0;
    *(void *)(a1 + 16) = a2;
    *(void *)(a1 + 24) = 0LL;
    (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 88LL))(a2, a1);
    (*(void (**)(uint64_t))(*(void *)a1 + 96LL))(a1);
  }

  return a1;
}

uint64_t sub_1235B8(uint64_t a1, uint64_t a2)
{
  if (a2 != a1)
  {
    uint64_t v4 = *(void *)(a1 + 16);
    if (v4)
    {
      (*(void (**)(uint64_t))(*(void *)v4 + 152LL))(v4);
      *(void *)(a1 + 16) = 0LL;
    }

    if (*(int *)(a1 + 32) >= 1)
    {
      uint64_t v5 = 0LL;
      uint64_t v6 = 0LL;
      do
      {
        uint64_t v7 = *(void *)(a1 + 24);
        BOOL v8 = *(void **)(v7 + v5);
        if (v8)
        {
          operator delete[](v8);
          uint64_t v7 = *(void *)(a1 + 24);
        }

        uint64_t v9 = *(void **)(v7 + v5 + 8);
        if (v9) {
          operator delete[](v9);
        }
        ++v6;
        v5 += 24LL;
      }

      while (v6 < *(int *)(a1 + 32));
    }

    uint64_t v10 = *(void **)(a1 + 24);
    if (v10) {
      operator delete[](v10);
    }
    *(void *)(a1 + 24) = 0LL;
    *(_DWORD *)(a1 + 32) = 0;
    uint64_t v11 = *(void *)(a2 + 16);
    if (v11)
    {
      uint64_t v12 = (*(uint64_t (**)(uint64_t))(*(void *)v11 + 120LL))(v11);
      *(void *)(a1 + 16) = v12;
      (*(void (**)(uint64_t, uint64_t))(*(void *)v12 + 88LL))(v12, a1);
      (*(void (**)(uint64_t))(*(void *)a1 + 96LL))(a1);
    }

    else
    {
      *(void *)(a1 + 16) = 0LL;
    }
  }

  return a1;
}

uint64_t *sub_1236A4(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = a2;
  if (a1[2] == a2) {
    uint64_t v2 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 120LL))(a2);
  }
  uint64_t v4 = sub_122A0C(0x20uLL);
  sub_130040(v4, a1[2], v2);
  void *v4 = off_251510;
  a1[2] = (uint64_t)v4;
  uint64_t v5 = v4[2];
  if (v5) {
    (*(void (**)(uint64_t, uint64_t *))(*(void *)v5 + 88LL))(v5, a1);
  }
  uint64_t v6 = v4[3];
  if (v6) {
    (*(void (**)(uint64_t, uint64_t *))(*(void *)v6 + 88LL))(v6, a1);
  }
  (*(void (**)(uint64_t *))(*a1 + 96))(a1);
  return a1;
}

void sub_123758(_Unwind_Exception *exception_object)
{
  if (v1) {
    free(v1);
  }
  _Unwind_Resume(exception_object);
}

void *sub_123770(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = sub_130040(a1, a2, a3);
  void *result = off_251510;
  return result;
}

uint64_t *sub_123790(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  if (v3)
  {
    uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 120LL))(v3);
    uint64_t v5 = sub_122A0C(0x20uLL);
    sub_130040(v5, a1[2], v4);
    void *v5 = off_251510;
    a1[2] = (uint64_t)v5;
    uint64_t v6 = v5[2];
    if (v6) {
      (*(void (**)(uint64_t, uint64_t *))(*(void *)v6 + 88LL))(v6, a1);
    }
    uint64_t v7 = v5[3];
    if (v7) {
      (*(void (**)(uint64_t, uint64_t *))(*(void *)v7 + 88LL))(v7, a1);
    }
    (*(void (**)(uint64_t *))(*a1 + 96))(a1);
  }

  return a1;
}

void sub_123838(_Unwind_Exception *exception_object)
{
  if (v1) {
    free(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_123850(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = a2;
  if (a1[2] == a2) {
    uint64_t v2 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 120LL))(a2);
  }
  uint64_t v4 = sub_122A0C(0x20uLL);
  sub_130040(v4, a1[2], v2);
  void *v4 = off_251650;
  a1[2] = (uint64_t)v4;
  uint64_t v5 = v4[2];
  if (v5) {
    (*(void (**)(uint64_t, uint64_t *))(*(void *)v5 + 88LL))(v5, a1);
  }
  uint64_t v6 = v4[3];
  if (v6) {
    (*(void (**)(uint64_t, uint64_t *))(*(void *)v6 + 88LL))(v6, a1);
  }
  (*(void (**)(uint64_t *))(*a1 + 96))(a1);
  return a1;
}

void sub_123904(_Unwind_Exception *exception_object)
{
  if (v1) {
    free(v1);
  }
  _Unwind_Resume(exception_object);
}

void *sub_12391C(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = sub_130040(a1, a2, a3);
  void *result = off_251650;
  return result;
}

uint64_t *sub_12393C(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  if (v3)
  {
    uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 120LL))(v3);
    uint64_t v5 = sub_122A0C(0x20uLL);
    sub_130040(v5, a1[2], v4);
    void *v5 = off_251650;
    a1[2] = (uint64_t)v5;
    uint64_t v6 = v5[2];
    if (v6) {
      (*(void (**)(uint64_t, uint64_t *))(*(void *)v6 + 88LL))(v6, a1);
    }
    uint64_t v7 = v5[3];
    if (v7) {
      (*(void (**)(uint64_t, uint64_t *))(*(void *)v7 + 88LL))(v7, a1);
    }
    (*(void (**)(uint64_t *))(*a1 + 96))(a1);
  }

  return a1;
}

void sub_1239E4(_Unwind_Exception *exception_object)
{
  if (v1) {
    free(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_1239FC(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = a2;
  if (a1[2] == a2) {
    uint64_t v2 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 120LL))(a2);
  }
  uint64_t v4 = sub_122A0C(0x20uLL);
  sub_130040(v4, a1[2], v2);
  void *v4 = off_251790;
  a1[2] = (uint64_t)v4;
  uint64_t v5 = v4[2];
  if (v5) {
    (*(void (**)(uint64_t, uint64_t *))(*(void *)v5 + 88LL))(v5, a1);
  }
  uint64_t v6 = v4[3];
  if (v6) {
    (*(void (**)(uint64_t, uint64_t *))(*(void *)v6 + 88LL))(v6, a1);
  }
  (*(void (**)(uint64_t *))(*a1 + 96))(a1);
  return a1;
}

void sub_123AB0(_Unwind_Exception *exception_object)
{
  if (v1) {
    free(v1);
  }
  _Unwind_Resume(exception_object);
}

void *sub_123AC8(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = sub_130040(a1, a2, a3);
  void *result = off_251790;
  return result;
}

uint64_t *sub_123AE8(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  if (v3)
  {
    uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 120LL))(v3);
    uint64_t v5 = sub_122A0C(0x20uLL);
    sub_130040(v5, a1[2], v4);
    void *v5 = off_251790;
    a1[2] = (uint64_t)v5;
    uint64_t v6 = v5[2];
    if (v6) {
      (*(void (**)(uint64_t, uint64_t *))(*(void *)v6 + 88LL))(v6, a1);
    }
    uint64_t v7 = v5[3];
    if (v7) {
      (*(void (**)(uint64_t, uint64_t *))(*(void *)v7 + 88LL))(v7, a1);
    }
    (*(void (**)(uint64_t *))(*a1 + 96))(a1);
  }

  else
  {
    uint64_t v8 = a1[2];
    if (v8) {
      (*(void (**)(uint64_t))(*(void *)v8 + 152LL))(v8);
    }
    uint64_t v9 = sub_122A0C(0x18uLL);
    *uint64_t v9 = off_24D3F8;
    v9[1] = 0LL;
    *((_DWORD *)v9 + 4) = 0;
    a1[2] = (uint64_t)v9;
  }

  return a1;
}

void sub_123BC4(_Unwind_Exception *exception_object)
{
  if (v1) {
    free(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_123BDC(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = a2;
  if (a1[2] == a2) {
    uint64_t v2 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 120LL))(a2);
  }
  uint64_t v4 = sub_122A0C(0x20uLL);
  sub_130040(v4, a1[2], v2);
  void *v4 = off_2518D0;
  a1[2] = (uint64_t)v4;
  uint64_t v5 = v4[2];
  if (v5) {
    (*(void (**)(uint64_t, uint64_t *))(*(void *)v5 + 88LL))(v5, a1);
  }
  uint64_t v6 = v4[3];
  if (v6) {
    (*(void (**)(uint64_t, uint64_t *))(*(void *)v6 + 88LL))(v6, a1);
  }
  (*(void (**)(uint64_t *))(*a1 + 96))(a1);
  return a1;
}

void sub_123C90(_Unwind_Exception *exception_object)
{
  if (v1) {
    free(v1);
  }
  _Unwind_Resume(exception_object);
}

void *sub_123CA8(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = sub_130040(a1, a2, a3);
  void *result = off_2518D0;
  return result;
}

uint64_t *sub_123CC8(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  if (!v3)
  {
    (*(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(*a1 + 272))(a1, 1LL, -1LL, -1LL);
    uint64_t v3 = *(void *)(a2 + 16);
  }

  uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 120LL))(v3);
  uint64_t v6 = sub_122A0C(0x20uLL);
  sub_130040(v6, a1[2], v5);
  *uint64_t v6 = off_2518D0;
  a1[2] = (uint64_t)v6;
  uint64_t v7 = v6[2];
  if (v7) {
    (*(void (**)(uint64_t, uint64_t *))(*(void *)v7 + 88LL))(v7, a1);
  }
  uint64_t v8 = v6[3];
  if (v8) {
    (*(void (**)(uint64_t, uint64_t *))(*(void *)v8 + 88LL))(v8, a1);
  }
  (*(void (**)(uint64_t *))(*a1 + 96))(a1);
  return a1;
}

void sub_123D94(_Unwind_Exception *exception_object)
{
  if (v1) {
    free(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_123DAC(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = a2;
  if (a1[2] == a2) {
    uint64_t v2 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 120LL))(a2);
  }
  uint64_t v4 = sub_122A0C(0x20uLL);
  sub_130040(v4, a1[2], v2);
  void *v4 = off_251A10;
  a1[2] = (uint64_t)v4;
  uint64_t v5 = v4[2];
  if (v5) {
    (*(void (**)(uint64_t, uint64_t *))(*(void *)v5 + 88LL))(v5, a1);
  }
  uint64_t v6 = v4[3];
  if (v6) {
    (*(void (**)(uint64_t, uint64_t *))(*(void *)v6 + 88LL))(v6, a1);
  }
  (*(void (**)(uint64_t *))(*a1 + 96))(a1);
  return a1;
}

void sub_123E60(_Unwind_Exception *exception_object)
{
  if (v1) {
    free(v1);
  }
  _Unwind_Resume(exception_object);
}

void *sub_123E78(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = sub_130040(a1, a2, a3);
  void *result = off_251A10;
  return result;
}

uint64_t *sub_123E98(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  if (!v3)
  {
    (*(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(*a1 + 272))(a1, 1LL, -1LL, -1LL);
    uint64_t v3 = *(void *)(a2 + 16);
  }

  uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 120LL))(v3);
  uint64_t v6 = sub_122A0C(0x20uLL);
  sub_130040(v6, a1[2], v5);
  *uint64_t v6 = off_251A10;
  a1[2] = (uint64_t)v6;
  uint64_t v7 = v6[2];
  if (v7) {
    (*(void (**)(uint64_t, uint64_t *))(*(void *)v7 + 88LL))(v7, a1);
  }
  uint64_t v8 = v6[3];
  if (v8) {
    (*(void (**)(uint64_t, uint64_t *))(*(void *)v8 + 88LL))(v8, a1);
  }
  (*(void (**)(uint64_t *))(*a1 + 96))(a1);
  return a1;
}

void sub_123F64(_Unwind_Exception *exception_object)
{
  if (v1) {
    free(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_123F7C(uint64_t result)
{
  *(void *)uint64_t result = off_24E758;
  *(void *)(result + _Block_object_dispose(va, 8) = 0LL;
  *(void *)(result + 16) = 0LL;
  *(void *)(result + 24) = 0LL;
  *(_DWORD *)(result + 32) = 0;
  return result;
}

void *sub_123F94(void *result)
{
  void *result = off_24E938;
  result[1] = 0LL;
  return result;
}

uint64_t sub_123FA4(uint64_t a1, uint64_t *a2)
{
  *(void *)a1 = off_24E758;
  *(void *)(a1 + 24) = 0LL;
  *(_DWORD *)(a1 + 32) = 0;
  a2[3] = a1;
  *(void *)(a1 + 16) = 0LL;
  uint64_t v3 = a1 + 16;
  *(void *)(a1 + _Block_object_dispose(va, 8) = 0LL;
  uint64_t v4 = (_BYTE *)a2[1];
  if (*v4 == 61) {
    a2[1] = (uint64_t)(v4 + 1);
  }
  sub_127B08((uint64_t *)a1, a2, a1 + 16);
  if (*(void *)v3) {
    *(void *)(*(void *)v3 + 8LL) = a1;
  }
  (*(void (**)(uint64_t))(*(void *)a1 + 96LL))(a1);
  return a1;
}

void sub_124038( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10)
{
  void *v10 = off_24E938;
  v10[1] = 0LL;
  _Unwind_Resume(exception_object);
}

uint64_t sub_1240CC(uint64_t a1, void *a2)
{
  *(void *)a1 = off_24E758;
  *(void *)(a1 + _Block_object_dispose(va, 8) = 0LL;
  a2[1] = a1;
  *(void *)(a1 + 16) = a2;
  *(void *)(a1 + 24) = 0LL;
  *(_DWORD *)(a1 + 32) = 0;
  (*(void (**)(void *, uint64_t))(*a2 + 88LL))(a2, a1);
  (*(void (**)(uint64_t))(*(void *)a1 + 96LL))(a1);
  return a1;
}

void sub_124128(_Unwind_Exception *a1)
{
  void *v1 = off_24E938;
  v1[1] = 0LL;
  _Unwind_Resume(a1);
}

uint64_t sub_12413C(uint64_t a1, void *a2)
{
  uint64_t v3 = off_24E758;
  *(void *)a1 = off_24E758;
  *(void *)(a1 + _Block_object_dispose(va, 8) = 0LL;
  *(void *)(a1 + 16) = a2;
  if (a2)
  {
    a2[1] = a1;
    *(void *)(a1 + 24) = 0LL;
    *(_DWORD *)(a1 + 32) = 0;
    (*(void (**)(void *, uint64_t))(*a2 + 88LL))(a2, a1);
    uint64_t v3 = *(uint64_t (***)())a1;
  }

  else
  {
    *(void *)(a1 + 24) = 0LL;
    *(_DWORD *)(a1 + 32) = 0;
  }

  ((void (*)(uint64_t))v3[12])(a1);
  return a1;
}

void sub_1241AC(_Unwind_Exception *a1)
{
  void *v1 = off_24E938;
  v1[1] = 0LL;
  _Unwind_Resume(a1);
}

uint64_t sub_1241BC(uint64_t a1, float a2)
{
  *(void *)(a1 + _Block_object_dispose(va, 8) = 0LL;
  *(void *)(a1 + 16) = 0LL;
  *(void *)a1 = off_24E758;
  uint64_t v4 = (float *)sub_122A0C(0x18uLL);
  *(void *)uint64_t v4 = off_24D3F8;
  v4[4] = a2;
  *(void *)(a1 + 16) = v4;
  *((void *)v4 + 1) = a1;
  *(void *)(a1 + 24) = 0LL;
  *(_DWORD *)(a1 + 32) = 0;
  return a1;
}

uint64_t sub_1242B0(uint64_t a1, char *__s)
{
  *(void *)a1 = off_24E758;
  *(void *)(a1 + _Block_object_dispose(va, 8) = 0LL;
  if (!__s)
  {
    LODWORD(xmmword_2B0AD0) = 21;
    *((void *)&xmmword_2B0AD0 + 1) = -1LL;
    qword_2B0AE0 = -1LL;
    exception = __cxa_allocate_exception(0x18uLL);
    uint64_t v7 = qword_2B0AE0;
    *(_OWORD *)exception = xmmword_2B0AD0;
    exception[2] = v7;
  }

  *(void *)(a1 + 24) = 0LL;
  *(_DWORD *)(a1 + 32) = 0;
  uint64_t v8 = __s;
  uint64_t v9 = __s;
  uint64_t v10 = &__s[strlen(__s) - 1];
  uint64_t v11 = a1;
  if (*__s == 61) {
    uint64_t v9 = __s + 1;
  }
  *(void *)(a1 + 16) = 0LL;
  sub_127B08((uint64_t *)a1, (uint64_t *)&v8, a1 + 16);
  uint64_t v4 = *(void **)(a1 + 16);
  if (v4) {
    v4[1] = a1;
  }
  (*(void (**)(void *, uint64_t))(*v4 + 88LL))(v4, a1);
  (*(void (**)(uint64_t))(*(void *)a1 + 96LL))(a1);
  return a1;
}

void sub_1243AC()
{
}

void sub_124414(_Unwind_Exception *a1)
{
  void *v1 = off_24E938;
  v1[1] = 0LL;
  _Unwind_Resume(a1);
}

void sub_124424()
{
}

uint64_t sub_124444(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_24E758;
  *(void *)(a1 + _Block_object_dispose(va, 8) = 0LL;
  *(void *)(a1 + 16) = 0LL;
  *(void *)(a1 + 24) = 0LL;
  *(_DWORD *)(a1 + 32) = 0;
  uint64_t v3 = *(void *)(a2 + 16);
  if (v3)
  {
    uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 120LL))(v3);
    *(void *)(a1 + 16) = v4;
    (*(void (**)(uint64_t, uint64_t))(*(void *)v4 + 88LL))(v4, a1);
    (*(void (**)(uint64_t))(*(void *)a1 + 96LL))(a1);
  }

  return a1;
}

void sub_1244B0(_Unwind_Exception *a1)
{
  void *v1 = off_24E938;
  v1[1] = 0LL;
  _Unwind_Resume(a1);
}

uint64_t sub_1244C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 16) = 0LL;
  *(void *)a1 = off_24E758;
  *(void *)(a1 + _Block_object_dispose(va, 8) = 0LL;
  *(void *)(a1 + 24) = 0LL;
  *(_DWORD *)(a1 + 32) = 0;
  (*(void (**)(uint64_t))(*(void *)a3 + 288LL))(a3);
  uint64_t v5 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 184LL))(a1, a2);
  *(void *)(a1 + 16) = v5;
  v5[1] = a1;
  (*(void (**)(void *, uint64_t))(*v5 + 88LL))(v5, a1);
  (*(void (**)(uint64_t))(*(void *)a1 + 96LL))(a1);
  return a1;
}

void sub_124564( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, __int128 a11, uint64_t a12)
{
  void *v12 = off_24E938;
  v12[1] = 0LL;
  _Unwind_Resume(exception_object);
}

uint64_t sub_1245F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)a1 = off_24E758;
  *(void *)(a1 + _Block_object_dispose(va, 8) = 0LL;
  *(void *)(a1 + 24) = 0LL;
  *(_DWORD *)(a1 + 32) = 0;
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 288LL))(a2);
  uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)a4 + 288LL))(a4);
  uint64_t v9 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 200LL))(a1, a3, v7, v8);
  *(void *)(a1 + 16) = v9;
  v9[1] = a1;
  (*(void (**)(void *, uint64_t))(*v9 + 88LL))(v9, a1);
  (*(void (**)(uint64_t))(*(void *)a1 + 96LL))(a1);
  return a1;
}

void sub_1246A0(_Unwind_Exception *a1)
{
  void *v1 = off_24E938;
  v1[1] = 0LL;
  _Unwind_Resume(a1);
}

uint64_t sub_1246B4(uint64_t a1)
{
  *(void *)a1 = off_24E758;
  uint64_t v2 = *(void **)(a1 + 24);
  if (v2)
  {
    uint64_t v3 = 0LL;
    uint64_t v4 = 0LL;
    do
    {
      uint64_t v5 = *(void *)(a1 + 24);
      uint64_t v6 = *(void **)(v5 + v3);
      if (v6)
      {
        operator delete[](v6);
        uint64_t v5 = *(void *)(a1 + 24);
      }

      uint64_t v7 = *(void **)(v5 + v3 + 8);
      if (v7) {
        operator delete[](v7);
      }
      ++v4;
      v3 += 24LL;
    }

    while (v4 < *(int *)(a1 + 32));
    uint64_t v2 = *(void **)(a1 + 24);
    if (v2) {
LABEL_10:
    }
      operator delete[](v2);
    *(void *)(a1 + 24) = 0LL;
  }

  uint64_t v8 = *(void *)(a1 + 16);
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 152LL))(v8);
  }
  *(void *)(a1 + _Block_object_dispose(va, 8) = 0LL;
  *(void *)(a1 + 16) = 0LL;
  *(void *)a1 = off_24E938;
  return a1;
}

void sub_124770(_Unwind_Exception *a1)
{
  void *v1 = off_24E938;
  v1[1] = 0LL;
  _Unwind_Resume(a1);
}

void sub_124784(void *a1)
{
  if (a1) {
    free(a1);
  }
}

void sub_1247B8(_Unwind_Exception *exception_object)
{
  if (v1) {
    free(v1);
  }
  _Unwind_Resume(exception_object);
}

char *sub_1247D0(uint64_t a1, char *__s)
{
  size_t v4 = strlen(__s);
  uint64_t v5 = *(char **)(a1 + 24);
  *(void *)(a1 + 24) = 0LL;
  uint64_t v6 = *(int *)(a1 + 32);
  if (is_mul_ok(v6 + 1, 0x18uLL)) {
    size_t v7 = 24 * (v6 + 1);
  }
  else {
    size_t v7 = -1LL;
  }
  *(void *)(a1 + 24) = operator new[](v7);
  if (v5)
  {
    if ((int)v6 >= 1)
    {
      uint64_t v8 = 0LL;
      uint64_t v9 = 0LL;
      do
      {
        uint64_t v10 = *(void *)(a1 + 24) + v8;
        __int128 v11 = *(_OWORD *)&v5[v8];
        *(void *)(v10 + 16) = *(void *)&v5[v8 + 16];
        *(_OWORD *)uint64_t v10 = v11;
        ++v9;
        v8 += 24LL;
      }

      while (v9 < *(int *)(a1 + 32));
    }

    operator delete[](v5);
  }

  else {
    size_t v12 = -1LL;
  }
  uint64_t v13 = (char *)operator new[](v12);
  int v14 = *(_DWORD *)(a1 + 32);
  *(_DWORD *)(a1 + 32) = v14 + 1;
  uint64_t v15 = *(void *)(a1 + 24) + 24LL * v14;
  *(_DWORD *)(v15 + 16) = 0;
  *(void *)(v15 + _Block_object_dispose(va, 8) = 0LL;
  uint64_t result = strncpy(v13, __s, v4 + 1);
  *(void *)uint64_t v15 = result;
  return result;
}

uint64_t sub_124938(uint64_t a1, char *__s2)
{
  size_t v4 = *(const char ***)(a1 + 24);
  uint64_t v5 = *(unsigned int *)(a1 + 32);
  if (v4) {
    BOOL v6 = (int)v5 < 1;
  }
  else {
    BOOL v6 = 1;
  }
  if (v6)
  {
    uint64_t v7 = 0LL;
  }

  else
  {
    uint64_t v7 = 0LL;
    while (!*v4 || strcmp(*v4, __s2))
    {
      ++v7;
      v4 += 3;
      if (v5 == v7)
      {
        uint64_t v7 = v5;
        goto LABEL_13;
      }
    }
  }

  if ((_DWORD)v7 == (_DWORD)v5) {
LABEL_13:
  }
    (*(void (**)(uint64_t, char *))(*(void *)a1 + 416LL))(a1, __s2);
  return v7;
}

float sub_1249D0()
{
  return 0.0;
}

uint64_t sub_1249D8()
{
  return 0LL;
}

uint64_t sub_1249E0()
{
  return 0LL;
}

uint64_t sub_1249E8()
{
  return 0LL;
}

uint64_t sub_1249F0()
{
  return 1LL;
}

uint64_t sub_1249F8()
{
  return 0LL;
}

uint64_t sub_124A00()
{
  return 0LL;
}

uint64_t sub_124A18()
{
  return 0LL;
}

uint64_t sub_124A20(uint64_t a1)
{
  return 0LL;
}

uint64_t sub_124A4C(uint64_t a1)
{
  return 0LL;
}

BOOL sub_124A78(uint64_t a1, void *a2)
{
  return !sub_124AC4((uint64_t)&off_24E908, *(void *)(*a2 - 8LL));
}

BOOL sub_124AA0(uint64_t a1, void *a2)
{
  return sub_124AC4((uint64_t)&off_24E908, *(void *)(*a2 - 8LL));
}

BOOL sub_124AC4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a2 + 8);
  if (v2 == v3) {
    return 1LL;
  }
  if ((v3 & v2) < 0 != __OFSUB__(v2, v3)) {
    return strcmp((const char *)(v2 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL)) == 0;
  }
  return 0LL;
}

void *sub_124B10(void *result)
{
  char *result = off_24E938;
  result[1] = 0LL;
  return result;
}

uint64_t sub_124B24@<X0>(uint64_t result@<X0>, void *a2@<X1>, char *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6 = result;
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + _Block_object_dispose(va, 8) = a3;
  *(_DWORD *)(a4 + 16) = 1;
  *(_WORD *)(a4 + 20) = 0;
  int v8 = *a3;
  if (v8 <= 93)
  {
    switch(*a3)
    {
      case '%':
        uint64_t v9 = 7LL;
        goto LABEL_44;
      case '&':
        if (a3[1] == 38)
        {
          uint64_t v9 = 15LL;
          goto LABEL_41;
        }

        uint64_t v9 = 18LL;
        goto LABEL_44;
      case '\'':
      case '(':
      case ')':
      case ',':
      case '.':
      case '0':
      case '1':
      case '2':
      case '3':
      case '4':
      case '5':
      case '6':
      case '7':
      case '8':
      case '9':
      case ';':
        goto LABEL_28;
      case '*':
        uint64_t v9 = 5LL;
        goto LABEL_44;
      case '+':
        uint64_t result = (*(uint64_t (**)(uint64_t, void *, char *))(*(void *)result + 216LL))(result, a2, a3);
        if ((_DWORD)result) {
          goto LABEL_28;
        }
        uint64_t v9 = 3LL;
        goto LABEL_44;
      case '-':
        uint64_t result = (*(uint64_t (**)(uint64_t, void *, char *))(*(void *)result + 216LL))(result, a2, a3);
        if ((_DWORD)result == 2)
        {
LABEL_35:
          uint64_t v9 = 0LL;
          *(_DWORD *)a4 = 0;
          goto LABEL_45;
        }

        if ((_DWORD)result == 1)
        {
          uint64_t v9 = 2LL;
        }

        else
        {
          if ((_DWORD)result) {
            goto LABEL_28;
          }
          uint64_t v9 = 4LL;
        }

        goto LABEL_44;
      case '/':
        uint64_t v9 = 6LL;
        goto LABEL_44;
      case ':':
        uint64_t v9 = 22LL;
        goto LABEL_44;
      case '<':
        if (a3[1] == 61)
        {
          uint64_t v9 = 13LL;
          goto LABEL_41;
        }

        uint64_t v9 = 9LL;
        goto LABEL_44;
      case '=':
        if (a3[1] != 61) {
          goto LABEL_28;
        }
        uint64_t v9 = 11LL;
        goto LABEL_41;
      case '>':
        if (a3[1] == 61)
        {
          uint64_t v9 = 14LL;
          goto LABEL_41;
        }

        uint64_t v9 = 10LL;
        goto LABEL_44;
      case '?':
        uint64_t v9 = 23LL;
        goto LABEL_44;
      default:
        if (v8 != 33) {
          goto LABEL_28;
        }
        int v10 = a3[1];
        if (v10 == 38)
        {
          uint64_t v9 = 20LL;
          goto LABEL_41;
        }

        if (v10 == 61)
        {
          uint64_t v9 = 12LL;
          goto LABEL_41;
        }

        uint64_t v9 = 17LL;
        break;
    }

    goto LABEL_44;
  }

  switch(v8)
  {
    case '^':
      uint64_t v9 = 8LL;
      goto LABEL_44;
    case '|':
      if (a3[1] != 124)
      {
        uint64_t v9 = 19LL;
        goto LABEL_44;
      }

      uint64_t v9 = 16LL;
LABEL_41:
      *(_DWORD *)a4 = v9;
      *(_DWORD *)(a4 + 16) = 2;
      break;
    case '~':
      uint64_t v9 = 21LL;
LABEL_44:
      *(_DWORD *)a4 = v9;
      break;
    default:
LABEL_28:
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, char *, char *))(*(void *)v6 + 272LL))( v6,  26LL,  &a3[-*a2],  &a3[-*a2]);
      uint64_t v9 = 0LL;
      break;
  }

uint64_t sub_124D5C(uint64_t a1, uint64_t a2, float **a3)
{
  size_t v4 = *(char **)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16) - (void)v4;
  uint64_t v6 = v5 + 1;
  if (v5 < -2) {
    size_t v7 = -1LL;
  }
  else {
    size_t v7 = v5 + 2;
  }
  int v8 = (const char *)operator new[](v7);
  uint64_t v9 = (char *)v8;
  if ((v5 & 0x8000000000000000LL) == 0)
  {
    int v10 = (char *)v8;
    uint64_t v11 = v5 + 1;
    do
    {
      char v12 = *v4++;
      *v10++ = v12;
      --v11;
    }

    while (v11);
  }

  unint64_t v13 = (unint64_t)&v8[v6];
  v8[v6] = 0;
  float v14 = mathParser::cString2Number<float>(v8, &v17, _c_locale);
  operator delete[](v9);
  uint64_t result = 0LL;
  if ((unint64_t)v17 >= v13)
  {
    uint64_t v16 = (float *)sub_122A0C(0x18uLL);
    *(void *)uint64_t v16 = off_24D3F8;
    *((void *)v16 + 1) = 0LL;
    v16[4] = v14;
    *a3 = v16;
    return 1LL;
  }

  return result;
}

uint64_t sub_124E30(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = *(void *)(a2 + 16) - *(void *)(a2 + 8);
  if (v3 > 5) {
    return 0LL;
  }
  if ((v3 & 0x8000000000000000LL) == 0)
  {
    unint64_t v6 = 0LL;
    do
    {
      __s1[v6] = __toupper(*(char *)(*(void *)(a2 + 8) + v6));
      if (v6 > 4) {
        break;
      }
    }

    while (v3 > (uint64_t)v6++);
  }

  uint64_t v8 = 0LL;
  __s1[v3 + 1] = 0;
  while (strncmp(__s1, off_2ACD28[v8], 6uLL))
  {
    if (++v8 == 4) {
      return 0LL;
    }
  }

  int v10 = sub_122A0C(0x18uLL);
  double v11 = *(double *)&qword_1F67A0[v8];
  void *v10 = off_24D3F8;
  v10[1] = 0LL;
  *(float *)&double v11 = v11;
  *((_DWORD *)v10 + 4) = LODWORD(v11);
  *a3 = v10;
  return 1LL;
}

void *sub_124F1C( uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10)
{
  switch(a2)
  {
    case 1:
      int v10 = sub_122A0C(0x18uLL);
      sub_128170(v10, (uint64_t)a9);
      double v11 = (uint64_t (**)())&off_24EA68;
      goto LABEL_48;
    case 2:
      int v10 = sub_122A0C(0x18uLL);
      sub_128170(v10, (uint64_t)a9);
      double v11 = (uint64_t (**)())&off_24EBA0;
      goto LABEL_48;
    case 3:
      int v10 = sub_122A0C(0x18uLL);
      sub_128170(v10, (uint64_t)a9);
      double v11 = (uint64_t (**)())&off_24ECD8;
      goto LABEL_48;
    case 4:
      int v10 = sub_122A0C(0x18uLL);
      sub_128170(v10, (uint64_t)a9);
      double v11 = off_24EE10;
      goto LABEL_48;
    case 5:
      int v10 = sub_122A0C(0x18uLL);
      sub_128170(v10, (uint64_t)a9);
      double v11 = off_24EF48;
      goto LABEL_48;
    case 6:
      int v10 = sub_122A0C(0x18uLL);
      sub_128170(v10, (uint64_t)a9);
      double v11 = off_24F080;
      goto LABEL_48;
    case 7:
      int v10 = sub_122A0C(0x20uLL);
      sub_1292C4((uint64_t)v10, a9);
      return v10;
    case 8:
      int v10 = sub_122A0C(0x18uLL);
      sub_128170(v10, (uint64_t)a9);
      double v11 = off_24F2F0;
      goto LABEL_48;
    case 9:
      int v10 = sub_122A0C(0x18uLL);
      sub_128170(v10, (uint64_t)a9);
      double v11 = off_24F428;
      goto LABEL_48;
    case 10:
      int v10 = sub_122A0C(0x18uLL);
      sub_128170(v10, (uint64_t)a9);
      double v11 = off_24F560;
      goto LABEL_48;
    case 11:
      int v10 = sub_122A0C(0x18uLL);
      sub_128170(v10, (uint64_t)a9);
      double v11 = off_24F698;
      goto LABEL_48;
    case 12:
      int v10 = sub_122A0C(0x18uLL);
      sub_128170(v10, (uint64_t)a9);
      double v11 = off_24F7D0;
      goto LABEL_48;
    case 13:
      int v10 = sub_122A0C(0x18uLL);
      sub_128170(v10, (uint64_t)a9);
      double v11 = off_24F908;
      goto LABEL_48;
    case 14:
      int v10 = sub_122A0C(0x18uLL);
      sub_128170(v10, (uint64_t)a9);
      double v11 = off_24FA40;
      goto LABEL_48;
    case 15:
      int v10 = sub_122A0C(0x18uLL);
      sub_128170(v10, (uint64_t)a9);
      double v11 = off_24FB78;
      goto LABEL_48;
    case 16:
      int v10 = sub_122A0C(0x18uLL);
      sub_128170(v10, (uint64_t)a9);
      double v11 = off_24FCB0;
      goto LABEL_48;
    case 17:
      int v10 = sub_122A0C(0x18uLL);
      sub_128170(v10, (uint64_t)a9);
      double v11 = off_24FDE8;
      goto LABEL_48;
    case 18:
      int v10 = sub_122A0C(0x18uLL);
      sub_128170(v10, (uint64_t)a9);
      double v11 = off_24FF20;
      goto LABEL_48;
    case 19:
      int v10 = sub_122A0C(0x18uLL);
      sub_128170(v10, (uint64_t)a9);
      double v11 = off_250058;
      goto LABEL_48;
    case 20:
      int v10 = sub_122A0C(0x18uLL);
      sub_128170(v10, (uint64_t)a9);
      double v11 = (uint64_t (**)())&off_250190;
      goto LABEL_48;
    case 21:
      int v10 = sub_122A0C(0x18uLL);
      sub_128170(v10, (uint64_t)a9);
      double v11 = (uint64_t (**)())&off_2502C8;
      goto LABEL_48;
    case 22:
      int v10 = sub_122A0C(0x18uLL);
      sub_128170(v10, (uint64_t)a9);
      double v11 = (uint64_t (**)())&off_250400;
      goto LABEL_48;
    case 23:
      int v10 = sub_122A0C(0x18uLL);
      sub_128170(v10, (uint64_t)a9);
      double v11 = off_250538;
      goto LABEL_48;
    case 24:
      int v10 = sub_122A0C(0x18uLL);
      sub_128170(v10, (uint64_t)a9);
      double v11 = off_250670;
      goto LABEL_48;
    case 25:
      int v10 = sub_122A0C(0x18uLL);
      sub_128170(v10, (uint64_t)a9);
      double v11 = off_2507A8;
      goto LABEL_48;
    case 26:
      int v10 = sub_122A0C(0x18uLL);
      sub_128170(v10, (uint64_t)a9);
      double v11 = off_2508E0;
      goto LABEL_48;
    case 27:
      int v10 = sub_122A0C(0x18uLL);
      sub_128170(v10, (uint64_t)a9);
      double v11 = off_250A18;
      goto LABEL_48;
    case 28:
      int v10 = sub_122A0C(0x18uLL);
      sub_128170(v10, (uint64_t)a9);
      double v11 = off_250B50;
      goto LABEL_48;
    case 29:
      int v10 = sub_122A0C(0x18uLL);
      sub_128170(v10, (uint64_t)a9);
      double v11 = off_250C88;
      goto LABEL_48;
    case 30:
      int v10 = sub_122A0C(0x18uLL);
      sub_128170(v10, (uint64_t)a9);
      double v11 = off_250DC0;
      goto LABEL_48;
    case 31:
      int v10 = sub_122A0C(0x20uLL);
      sub_12E1F4(v10, (uint64_t)a9, a10);
      double v11 = off_250EF8;
LABEL_48:
      void *v10 = v11;
      return v10;
    case 32:
      float v25 = &a10;
      else {
        size_t v12 = 8LL * (int)a9;
      }
      unint64_t v13 = operator new[](v12);
      float v14 = v13;
      if ((int)a9 >= 1)
      {
        uint64_t v15 = a9;
        uint64_t v16 = v13;
        do
        {
          double v17 = v25++;
          *v16++ = *v17;
          --v15;
        }

        while (v15);
      }

      int v10 = sub_122A0C(0x28uLL);
      sub_12EDFC((uint64_t)v10, (int)a9, v14);
      double v18 = off_251030;
      goto LABEL_46;
    case 33:
      double v26 = &a10;
      else {
        size_t v19 = 8LL * (int)a9;
      }
      float v20 = operator new[](v19);
      float v14 = v20;
      if ((int)a9 >= 1)
      {
        uint64_t v21 = a9;
        float v22 = v20;
        do
        {
          double v23 = v26++;
          *v22++ = *v23;
          --v21;
        }

        while (v21);
      }

      int v10 = sub_122A0C(0x28uLL);
      sub_12EDFC((uint64_t)v10, (int)a9, v14);
      double v18 = off_251168;
LABEL_46:
      void *v10 = v18;
      operator delete[](v14);
      break;
    default:
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 272LL))(a1, 25LL, -1LL, -1LL);
      int v10 = 0LL;
      break;
  }

  return v10;
}

void sub_1255E4(_Unwind_Exception *exception_object)
{
  if (v1) {
    free(v1);
  }
  _Unwind_Resume(exception_object);
}

void *sub_12567C(void *a1, uint64_t a2)
{
  uint64_t result = sub_128170(a1, a2);
  void *result = &off_24EA68;
  return result;
}

void *sub_12569C(void *a1, uint64_t a2)
{
  uint64_t result = sub_128170(a1, a2);
  void *result = &off_24EBA0;
  return result;
}

void *sub_1256BC(void *a1, uint64_t a2)
{
  uint64_t result = sub_128170(a1, a2);
  void *result = &off_24ECD8;
  return result;
}

void *sub_1256DC(void *a1, uint64_t a2)
{
  uint64_t result = sub_128170(a1, a2);
  void *result = off_24EE10;
  return result;
}

void *sub_1256FC(void *a1, uint64_t a2)
{
  uint64_t result = sub_128170(a1, a2);
  void *result = off_24EF48;
  return result;
}

void *sub_12571C(void *a1, uint64_t a2)
{
  uint64_t result = sub_128170(a1, a2);
  void *result = off_24F080;
  return result;
}

void *sub_125740(void *a1, uint64_t a2)
{
  uint64_t result = sub_128170(a1, a2);
  void *result = off_24F2F0;
  return result;
}

void *sub_125760(void *a1, uint64_t a2)
{
  uint64_t result = sub_128170(a1, a2);
  void *result = off_24F428;
  return result;
}

void *sub_125780(void *a1, uint64_t a2)
{
  uint64_t result = sub_128170(a1, a2);
  void *result = off_24F560;
  return result;
}

void *sub_1257A0(void *a1, uint64_t a2)
{
  uint64_t result = sub_128170(a1, a2);
  void *result = off_24F698;
  return result;
}

void *sub_1257C0(void *a1, uint64_t a2)
{
  uint64_t result = sub_128170(a1, a2);
  void *result = off_24F7D0;
  return result;
}

void *sub_1257E0(void *a1, uint64_t a2)
{
  uint64_t result = sub_128170(a1, a2);
  void *result = off_24F908;
  return result;
}

void *sub_125800(void *a1, uint64_t a2)
{
  uint64_t result = sub_128170(a1, a2);
  void *result = off_24FA40;
  return result;
}

void *sub_125820(void *a1, uint64_t a2)
{
  uint64_t result = sub_128170(a1, a2);
  void *result = off_24FB78;
  return result;
}

void *sub_125840(void *a1, uint64_t a2)
{
  uint64_t result = sub_128170(a1, a2);
  void *result = off_24FCB0;
  return result;
}

void *sub_125860(void *a1, uint64_t a2)
{
  uint64_t result = sub_128170(a1, a2);
  void *result = off_24FDE8;
  return result;
}

void *sub_125880(void *a1, uint64_t a2)
{
  uint64_t result = sub_128170(a1, a2);
  void *result = off_24FF20;
  return result;
}

void *sub_1258A0(void *a1, uint64_t a2)
{
  uint64_t result = sub_128170(a1, a2);
  void *result = off_250058;
  return result;
}

void *sub_1258C0(void *a1, uint64_t a2)
{
  uint64_t result = sub_128170(a1, a2);
  void *result = &off_250190;
  return result;
}

void *sub_1258E0(void *a1, uint64_t a2)
{
  uint64_t result = sub_128170(a1, a2);
  void *result = &off_2502C8;
  return result;
}

void *sub_125900(void *a1, uint64_t a2)
{
  uint64_t result = sub_128170(a1, a2);
  void *result = &off_250400;
  return result;
}

void *sub_125920(void *a1, uint64_t a2)
{
  uint64_t result = sub_128170(a1, a2);
  void *result = off_250538;
  return result;
}

void *sub_125940(void *a1, uint64_t a2)
{
  uint64_t result = sub_128170(a1, a2);
  void *result = off_250670;
  return result;
}

void *sub_125960(void *a1, uint64_t a2)
{
  uint64_t result = sub_128170(a1, a2);
  void *result = off_2507A8;
  return result;
}

void *sub_125980(void *a1, uint64_t a2)
{
  uint64_t result = sub_128170(a1, a2);
  void *result = off_2508E0;
  return result;
}

void *sub_1259A0(void *a1, uint64_t a2)
{
  uint64_t result = sub_128170(a1, a2);
  void *result = off_250A18;
  return result;
}

void *sub_1259C0(void *a1, uint64_t a2)
{
  uint64_t result = sub_128170(a1, a2);
  void *result = off_250B50;
  return result;
}

void *sub_1259E0(void *a1, uint64_t a2)
{
  uint64_t result = sub_128170(a1, a2);
  void *result = off_250C88;
  return result;
}

void *sub_125A00(void *a1, uint64_t a2)
{
  uint64_t result = sub_128170(a1, a2);
  void *result = off_250DC0;
  return result;
}

void *sub_125A20(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = sub_12E1F4(a1, a2, a3);
  void *result = off_250EF8;
  return result;
}

void *sub_125A40(uint64_t a1, int a2, void *a3)
{
  uint64_t result = (void *)sub_12EDFC(a1, a2, a3);
  void *result = off_251030;
  return result;
}

void *sub_125A60(uint64_t a1, int a2, void *a3)
{
  uint64_t result = (void *)sub_12EDFC(a1, a2, a3);
  void *result = off_251168;
  return result;
}

uint64_t sub_125A80(uint64_t a1, uint64_t *a2, int a3, uint64_t **a4)
{
  unint64_t v5 = a2[1];
  unint64_t v6 = (_BYTE *)a2[2];
  if (v5 > (unint64_t)v6)
  {
    size_t v7 = 0LL;
LABEL_10:
    unint64_t v6 = 0LL;
    goto LABEL_11;
  }

  size_t v7 = (_BYTE *)a2[1];
  while (*v7 != 40)
  {
    if (++v7 > v6)
    {
      size_t v7 = 0LL;
      break;
    }
  }

  while (*v6 != 41)
  {
  }

void sub_125F70(_Unwind_Exception *exception_object)
{
  if (v1) {
    free(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_126008(uint64_t *a1, uint64_t *a2)
{
  uint64_t result = sub_128090(a1, a2);
  uint64_t *result = (uint64_t)off_24F2F0;
  return result;
}

uint64_t *sub_126028(uint64_t *a1, uint64_t *a2)
{
  uint64_t result = sub_128090(a1, a2);
  uint64_t *result = (uint64_t)off_24F428;
  return result;
}

uint64_t *sub_126048(uint64_t *a1, uint64_t *a2)
{
  uint64_t result = sub_128090(a1, a2);
  uint64_t *result = (uint64_t)off_24F560;
  return result;
}

uint64_t *sub_126068(uint64_t *a1, uint64_t *a2)
{
  uint64_t result = sub_128090(a1, a2);
  uint64_t *result = (uint64_t)off_24F698;
  return result;
}

uint64_t *sub_126088(uint64_t *a1, uint64_t *a2)
{
  uint64_t result = sub_128090(a1, a2);
  uint64_t *result = (uint64_t)off_24F7D0;
  return result;
}

uint64_t *sub_1260A8(uint64_t *a1, uint64_t *a2)
{
  uint64_t result = sub_128090(a1, a2);
  uint64_t *result = (uint64_t)off_24F908;
  return result;
}

uint64_t *sub_1260C8(uint64_t *a1, uint64_t *a2)
{
  uint64_t result = sub_128090(a1, a2);
  uint64_t *result = (uint64_t)&off_24ECD8;
  return result;
}

uint64_t *sub_1260E8(uint64_t *a1, uint64_t *a2)
{
  uint64_t result = sub_128090(a1, a2);
  uint64_t *result = (uint64_t)&off_24EA68;
  return result;
}

uint64_t *sub_126108(uint64_t *a1, uint64_t *a2)
{
  uint64_t result = sub_128090(a1, a2);
  uint64_t *result = (uint64_t)&off_24EBA0;
  return result;
}

uint64_t *sub_126128(uint64_t *a1, uint64_t *a2)
{
  uint64_t result = sub_128090(a1, a2);
  uint64_t *result = (uint64_t)off_24EE10;
  return result;
}

uint64_t *sub_126148(uint64_t *a1, uint64_t *a2)
{
  uint64_t result = sub_128090(a1, a2);
  uint64_t *result = (uint64_t)off_24EF48;
  return result;
}

uint64_t *sub_126168(uint64_t *a1, uint64_t *a2)
{
  uint64_t result = sub_128090(a1, a2);
  uint64_t *result = (uint64_t)off_24F080;
  return result;
}

uint64_t *sub_126188(uint64_t *a1, uint64_t *a2)
{
  uint64_t result = sub_128090(a1, a2);
  uint64_t *result = (uint64_t)off_24FA40;
  return result;
}

uint64_t *sub_1261A8(uint64_t *a1, uint64_t *a2)
{
  uint64_t result = sub_128090(a1, a2);
  uint64_t *result = (uint64_t)off_24FB78;
  return result;
}

uint64_t *sub_1261C8(uint64_t *a1, uint64_t *a2)
{
  uint64_t result = sub_128090(a1, a2);
  uint64_t *result = (uint64_t)off_24FCB0;
  return result;
}

uint64_t *sub_1261E8(uint64_t *a1, uint64_t *a2)
{
  uint64_t result = sub_128090(a1, a2);
  uint64_t *result = (uint64_t)off_24FDE8;
  return result;
}

uint64_t *sub_126208(uint64_t *a1, uint64_t *a2)
{
  uint64_t result = sub_128090(a1, a2);
  uint64_t *result = (uint64_t)off_24FF20;
  return result;
}

uint64_t *sub_126228(uint64_t *a1, uint64_t *a2)
{
  uint64_t result = sub_128090(a1, a2);
  uint64_t *result = (uint64_t)off_250058;
  return result;
}

uint64_t *sub_126248(uint64_t *a1, uint64_t *a2)
{
  uint64_t result = sub_128090(a1, a2);
  uint64_t *result = (uint64_t)&off_250190;
  return result;
}

uint64_t *sub_126268(uint64_t *a1, uint64_t *a2)
{
  uint64_t result = sub_128090(a1, a2);
  uint64_t *result = (uint64_t)&off_2502C8;
  return result;
}

uint64_t *sub_126288(uint64_t *a1, uint64_t *a2)
{
  uint64_t result = sub_128090(a1, a2);
  uint64_t *result = (uint64_t)&off_250400;
  return result;
}

uint64_t *sub_1262A8(uint64_t *a1, uint64_t *a2)
{
  uint64_t result = sub_128090(a1, a2);
  uint64_t *result = (uint64_t)off_250538;
  return result;
}

uint64_t *sub_1262C8(uint64_t *a1, uint64_t *a2)
{
  uint64_t result = sub_128090(a1, a2);
  uint64_t *result = (uint64_t)off_250670;
  return result;
}

uint64_t *sub_1262E8(uint64_t *a1, uint64_t *a2)
{
  uint64_t result = sub_128090(a1, a2);
  uint64_t *result = (uint64_t)off_2507A8;
  return result;
}

uint64_t *sub_12630C(uint64_t *a1, uint64_t *a2)
{
  uint64_t result = sub_128090(a1, a2);
  uint64_t *result = (uint64_t)off_250B50;
  return result;
}

uint64_t *sub_12632C(uint64_t *a1, uint64_t *a2)
{
  uint64_t result = sub_128090(a1, a2);
  uint64_t *result = (uint64_t)off_250C88;
  return result;
}

uint64_t *sub_12634C(uint64_t *a1, uint64_t *a2)
{
  uint64_t result = sub_128090(a1, a2);
  uint64_t *result = (uint64_t)off_250DC0;
  return result;
}

void *sub_12636C(void *a1, void *a2)
{
  uint64_t result = sub_12DED4(a1, a2);
  void *result = off_250EF8;
  return result;
}

void *sub_12638C(void *a1, uint64_t *a2)
{
  uint64_t result = sub_12EA2C(a1, a2);
  void *result = off_251030;
  return result;
}

void *sub_1263AC(void *a1, uint64_t *a2)
{
  uint64_t result = sub_12EA2C(a1, a2);
  void *result = off_251168;
  return result;
}

void *sub_1263CC(void *a1, uint64_t *a2)
{
  uint64_t result = sub_12EA2C(a1, a2);
  void *result = off_2512A0;
  return result;
}

void *sub_1263EC(void *a1, uint64_t *a2)
{
  uint64_t result = sub_12EA2C(a1, a2);
  void *result = off_2513D8;
  return result;
}

void *sub_12640C(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4)
{
  if ((!a3 || !a4) && (a2 > 0x15 || ((1 << a2) & 0x220004) == 0)) {
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 272LL))(a1, 21LL, -1LL, -1LL);
  }
  switch(a2)
  {
    case 2u:
      if (!a4) {
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 272LL))(a1, 21LL, -1LL, -1LL);
      }
      uint64_t v8 = sub_122A0C(0x18uLL);
      sub_128170(v8, a4);
      uint64_t v9 = off_24F080;
      goto LABEL_36;
    case 3u:
      uint64_t v8 = sub_122A0C(0x20uLL);
      sub_130040(v8, a3, a4);
      uint64_t v9 = off_251510;
      goto LABEL_36;
    case 4u:
      uint64_t v8 = sub_122A0C(0x20uLL);
      sub_130040(v8, a3, a4);
      uint64_t v9 = off_251650;
      goto LABEL_36;
    case 5u:
      uint64_t v8 = sub_122A0C(0x20uLL);
      sub_130040(v8, a3, a4);
      uint64_t v9 = off_251790;
      goto LABEL_36;
    case 6u:
      uint64_t v8 = sub_122A0C(0x20uLL);
      sub_130040(v8, a3, a4);
      uint64_t v9 = off_2518D0;
      goto LABEL_36;
    case 7u:
      uint64_t v8 = sub_122A0C(0x20uLL);
      sub_130040(v8, a3, a4);
      uint64_t v9 = off_251A10;
      goto LABEL_36;
    case 8u:
      uint64_t v8 = sub_122A0C(0x20uLL);
      sub_130040(v8, a3, a4);
      uint64_t v9 = (uint64_t (**)())&off_251B50;
      goto LABEL_36;
    case 9u:
      uint64_t v8 = sub_122A0C(0x20uLL);
      sub_130040(v8, a3, a4);
      uint64_t v9 = off_251C90;
      goto LABEL_36;
    case 0xAu:
      uint64_t v8 = sub_122A0C(0x20uLL);
      sub_130040(v8, a3, a4);
      uint64_t v9 = off_251DD0;
      goto LABEL_36;
    case 0xBu:
      uint64_t v8 = sub_122A0C(0x20uLL);
      sub_130040(v8, a3, a4);
      uint64_t v9 = off_251F10;
      goto LABEL_36;
    case 0xCu:
      uint64_t v8 = sub_122A0C(0x20uLL);
      sub_130040(v8, a3, a4);
      uint64_t v9 = off_252050;
      goto LABEL_36;
    case 0xDu:
      uint64_t v8 = sub_122A0C(0x20uLL);
      sub_130040(v8, a3, a4);
      uint64_t v9 = off_252190;
      goto LABEL_36;
    case 0xEu:
      uint64_t v8 = sub_122A0C(0x20uLL);
      sub_130040(v8, a3, a4);
      uint64_t v9 = off_2522D0;
      goto LABEL_36;
    case 0xFu:
      uint64_t v8 = sub_122A0C(0x20uLL);
      sub_130040(v8, a3, a4);
      uint64_t v9 = off_252410;
      goto LABEL_36;
    case 0x10u:
      uint64_t v8 = sub_122A0C(0x20uLL);
      sub_130040(v8, a3, a4);
      uint64_t v9 = off_252550;
      goto LABEL_36;
    case 0x11u:
      if (!a4) {
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 272LL))(a1, 21LL, -1LL, -1LL);
      }
      uint64_t v8 = sub_122A0C(0x18uLL);
      sub_128170(v8, a4);
      uint64_t v9 = off_2508E0;
      goto LABEL_36;
    case 0x12u:
      uint64_t v8 = sub_122A0C(0x20uLL);
      sub_130040(v8, a3, a4);
      uint64_t v9 = off_252690;
      goto LABEL_36;
    case 0x13u:
      uint64_t v8 = sub_122A0C(0x20uLL);
      sub_130040(v8, a3, a4);
      uint64_t v9 = off_2527D0;
      goto LABEL_36;
    case 0x14u:
      uint64_t v8 = sub_122A0C(0x20uLL);
      sub_130040(v8, a3, a4);
      uint64_t v9 = off_252910;
      goto LABEL_36;
    case 0x15u:
      if (!a4) {
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 272LL))(a1, 21LL, -1LL, -1LL);
      }
      uint64_t v8 = sub_122A0C(0x18uLL);
      sub_128170(v8, a4);
      uint64_t v9 = off_250A18;
      goto LABEL_36;
    case 0x16u:
      uint64_t v8 = sub_122A0C(0x20uLL);
      sub_130040(v8, a3, a4);
      uint64_t v9 = off_252BD8;
LABEL_36:
      *uint64_t v8 = v9;
      break;
    case 0x17u:
      uint64_t v8 = sub_122A0C(0x20uLL);
      sub_136AC8(v8, a3, a4);
      break;
    default:
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 272LL))(a1, 26LL, -1LL, -1LL);
      uint64_t v8 = 0LL;
      break;
  }

  return v8;
}

void sub_126830(_Unwind_Exception *exception_object)
{
  if (v1) {
    free(v1);
  }
  _Unwind_Resume(exception_object);
}

void *sub_12689C(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = sub_130040(a1, a2, a3);
  void *result = &off_251B50;
  return result;
}

void *sub_1268BC(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = sub_130040(a1, a2, a3);
  void *result = off_251C90;
  return result;
}

void *sub_1268DC(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = sub_130040(a1, a2, a3);
  void *result = off_251DD0;
  return result;
}

void *sub_1268FC(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = sub_130040(a1, a2, a3);
  void *result = off_251F10;
  return result;
}

void *sub_12691C(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = sub_130040(a1, a2, a3);
  void *result = off_252050;
  return result;
}

void *sub_12693C(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = sub_130040(a1, a2, a3);
  void *result = off_252190;
  return result;
}

void *sub_12695C(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = sub_130040(a1, a2, a3);
  void *result = off_2522D0;
  return result;
}

void *sub_12697C(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = sub_130040(a1, a2, a3);
  void *result = off_252410;
  return result;
}

void *sub_12699C(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = sub_130040(a1, a2, a3);
  void *result = off_252550;
  return result;
}

void *sub_1269BC(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = sub_130040(a1, a2, a3);
  void *result = off_252690;
  return result;
}

void *sub_1269DC(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = sub_130040(a1, a2, a3);
  void *result = off_2527D0;
  return result;
}

void *sub_1269FC(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = sub_130040(a1, a2, a3);
  void *result = off_252910;
  return result;
}

void *sub_126A20(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = sub_130040(a1, a2, a3);
  void *result = off_252BD8;
  return result;
}

uint64_t *sub_126A40(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t **a4)
{
  uint64_t v5 = *((void *)a2 + 3);
  v13[2] = *((void *)a2 + 2);
  v13[3] = v5;
  __int128 v6 = *a2;
  v13[0] = *(void *)a2;
  __int128 v14 = v6;
  uint64_t v7 = *(void *)(a3 + 8);
  uint64_t v15 = v7 - 1;
  uint64_t v16 = v5;
  uint64_t v8 = *(int *)(a3 + 16);
  v13[1] = v7 + v8;
  switch(*(_DWORD *)a3)
  {
    case 2:
      int v10 = (uint64_t *)sub_122A0C(0x18uLL);
      uint64_t result = sub_128090(v10, v13);
      size_t v12 = off_24F080;
      goto LABEL_29;
    case 3:
      int v10 = (uint64_t *)sub_122A0C(0x20uLL);
      uint64_t result = sub_12FF1C(v10, (uint64_t *)&v14, (uint64_t)v13);
      size_t v12 = off_251510;
      goto LABEL_29;
    case 4:
      int v10 = (uint64_t *)sub_122A0C(0x20uLL);
      uint64_t result = sub_12FF1C(v10, (uint64_t *)&v14, (uint64_t)v13);
      size_t v12 = off_251650;
      goto LABEL_29;
    case 5:
      int v10 = (uint64_t *)sub_122A0C(0x20uLL);
      uint64_t result = sub_12FF1C(v10, (uint64_t *)&v14, (uint64_t)v13);
      size_t v12 = off_251790;
      goto LABEL_29;
    case 6:
      int v10 = (uint64_t *)sub_122A0C(0x20uLL);
      uint64_t result = sub_12FF1C(v10, (uint64_t *)&v14, (uint64_t)v13);
      size_t v12 = off_2518D0;
      goto LABEL_29;
    case 7:
      int v10 = (uint64_t *)sub_122A0C(0x20uLL);
      uint64_t result = sub_12FF1C(v10, (uint64_t *)&v14, (uint64_t)v13);
      size_t v12 = off_251A10;
      goto LABEL_29;
    case 8:
      int v10 = (uint64_t *)sub_122A0C(0x20uLL);
      uint64_t result = sub_12FF1C(v10, (uint64_t *)&v14, (uint64_t)v13);
      size_t v12 = (uint64_t (**)())&off_251B50;
      goto LABEL_29;
    case 9:
      int v10 = (uint64_t *)sub_122A0C(0x20uLL);
      uint64_t result = sub_12FF1C(v10, (uint64_t *)&v14, (uint64_t)v13);
      size_t v12 = off_251C90;
      goto LABEL_29;
    case 0xA:
      int v10 = (uint64_t *)sub_122A0C(0x20uLL);
      uint64_t result = sub_12FF1C(v10, (uint64_t *)&v14, (uint64_t)v13);
      size_t v12 = off_251DD0;
      goto LABEL_29;
    case 0xB:
      int v10 = (uint64_t *)sub_122A0C(0x20uLL);
      uint64_t result = sub_12FF1C(v10, (uint64_t *)&v14, (uint64_t)v13);
      size_t v12 = off_251F10;
      goto LABEL_29;
    case 0xC:
      int v10 = (uint64_t *)sub_122A0C(0x20uLL);
      uint64_t result = sub_12FF1C(v10, (uint64_t *)&v14, (uint64_t)v13);
      size_t v12 = off_252050;
      goto LABEL_29;
    case 0xD:
      int v10 = (uint64_t *)sub_122A0C(0x20uLL);
      uint64_t result = sub_12FF1C(v10, (uint64_t *)&v14, (uint64_t)v13);
      size_t v12 = off_252190;
      goto LABEL_29;
    case 0xE:
      int v10 = (uint64_t *)sub_122A0C(0x20uLL);
      uint64_t result = sub_12FF1C(v10, (uint64_t *)&v14, (uint64_t)v13);
      size_t v12 = off_2522D0;
      goto LABEL_29;
    case 0xF:
      int v10 = (uint64_t *)sub_122A0C(0x20uLL);
      uint64_t result = sub_12FF1C(v10, (uint64_t *)&v14, (uint64_t)v13);
      size_t v12 = off_252410;
      goto LABEL_29;
    case 0x10:
      int v10 = (uint64_t *)sub_122A0C(0x20uLL);
      uint64_t result = sub_12FF1C(v10, (uint64_t *)&v14, (uint64_t)v13);
      size_t v12 = off_252550;
      goto LABEL_29;
    case 0x11:
      if (((*(uint64_t (**)(uint64_t, __int128 *))(*(void *)a1 + 248LL))(a1, &v14) & 1) == 0)
      {
        (*(void (**)(uint64_t, __int128 *))(*(void *)a1 + 280LL))(a1, &v14);
        (*(void (**)(uint64_t, uint64_t, void, void))(*(void *)a1 + 272LL))( a1,  23LL,  *((void *)&v14 + 1) - v14,  v15 - v14);
      }

      int v10 = (uint64_t *)sub_122A0C(0x18uLL);
      uint64_t result = sub_128090(v10, v13);
      size_t v12 = off_2508E0;
      goto LABEL_29;
    case 0x12:
      int v10 = (uint64_t *)sub_122A0C(0x20uLL);
      uint64_t result = sub_12FF1C(v10, (uint64_t *)&v14, (uint64_t)v13);
      size_t v12 = off_252690;
      goto LABEL_29;
    case 0x13:
      int v10 = (uint64_t *)sub_122A0C(0x20uLL);
      uint64_t result = sub_12FF1C(v10, (uint64_t *)&v14, (uint64_t)v13);
      size_t v12 = off_2527D0;
      goto LABEL_29;
    case 0x14:
      int v10 = (uint64_t *)sub_122A0C(0x20uLL);
      uint64_t result = sub_12FF1C(v10, (uint64_t *)&v14, (uint64_t)v13);
      size_t v12 = off_252910;
      goto LABEL_29;
    case 0x15:
      if (((*(uint64_t (**)(uint64_t, __int128 *))(*(void *)a1 + 248LL))(a1, &v14) & 1) == 0)
      {
        (*(void (**)(uint64_t, __int128 *))(*(void *)a1 + 280LL))(a1, &v14);
        (*(void (**)(uint64_t, uint64_t, void, void))(*(void *)a1 + 272LL))( a1,  23LL,  *((void *)&v14 + 1) - v14,  v15 - v14);
      }

      int v10 = (uint64_t *)sub_122A0C(0x18uLL);
      uint64_t result = sub_128090(v10, v13);
      size_t v12 = off_250A18;
      goto LABEL_29;
    case 0x16:
      int v10 = (uint64_t *)sub_122A0C(0x20uLL);
      uint64_t result = sub_12FF1C(v10, (uint64_t *)&v14, (uint64_t)v13);
      size_t v12 = off_252BD8;
LABEL_29:
      uint64_t *v10 = (uint64_t)v12;
      goto LABEL_30;
    case 0x17:
      int v10 = (uint64_t *)sub_122A0C(0x20uLL);
      uint64_t result = sub_13698C(v10, (uint64_t *)&v14, (const double *)v13);
LABEL_30:
      *a4 = v10;
      break;
    default:
      uint64_t result = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, void, void))(*(void *)a1 + 272LL))( a1,  23LL,  v7 - v6,  v7 - v6 + v8);
      break;
  }

  return result;
}

void sub_126E90(_Unwind_Exception *exception_object)
{
  if (v1) {
    free(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_126EFC(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result = sub_12FF1C(a1, a2, a3);
  uint64_t *result = (uint64_t)off_251510;
  return result;
}

uint64_t *sub_126F1C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result = sub_12FF1C(a1, a2, a3);
  uint64_t *result = (uint64_t)off_251650;
  return result;
}

uint64_t *sub_126F3C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result = sub_12FF1C(a1, a2, a3);
  uint64_t *result = (uint64_t)off_251790;
  return result;
}

uint64_t *sub_126F5C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result = sub_12FF1C(a1, a2, a3);
  uint64_t *result = (uint64_t)off_2518D0;
  return result;
}

uint64_t *sub_126F7C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result = sub_12FF1C(a1, a2, a3);
  uint64_t *result = (uint64_t)off_251A10;
  return result;
}

uint64_t *sub_126F9C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result = sub_12FF1C(a1, a2, a3);
  uint64_t *result = (uint64_t)&off_251B50;
  return result;
}

uint64_t *sub_126FBC(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result = sub_12FF1C(a1, a2, a3);
  uint64_t *result = (uint64_t)off_251C90;
  return result;
}

uint64_t *sub_126FDC(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result = sub_12FF1C(a1, a2, a3);
  uint64_t *result = (uint64_t)off_251DD0;
  return result;
}

uint64_t *sub_126FFC(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result = sub_12FF1C(a1, a2, a3);
  uint64_t *result = (uint64_t)off_251F10;
  return result;
}

uint64_t *sub_12701C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result = sub_12FF1C(a1, a2, a3);
  uint64_t *result = (uint64_t)off_252050;
  return result;
}

uint64_t *sub_12703C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result = sub_12FF1C(a1, a2, a3);
  uint64_t *result = (uint64_t)off_252190;
  return result;
}

uint64_t *sub_12705C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result = sub_12FF1C(a1, a2, a3);
  uint64_t *result = (uint64_t)off_2522D0;
  return result;
}

uint64_t *sub_12707C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result = sub_12FF1C(a1, a2, a3);
  uint64_t *result = (uint64_t)off_252410;
  return result;
}

uint64_t *sub_12709C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result = sub_12FF1C(a1, a2, a3);
  uint64_t *result = (uint64_t)off_252550;
  return result;
}

uint64_t *sub_1270BC(uint64_t *a1, uint64_t *a2)
{
  uint64_t result = sub_128090(a1, a2);
  uint64_t *result = (uint64_t)off_2508E0;
  return result;
}

uint64_t *sub_1270DC(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result = sub_12FF1C(a1, a2, a3);
  uint64_t *result = (uint64_t)off_252690;
  return result;
}

uint64_t *sub_1270FC(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result = sub_12FF1C(a1, a2, a3);
  uint64_t *result = (uint64_t)off_2527D0;
  return result;
}

uint64_t *sub_12711C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result = sub_12FF1C(a1, a2, a3);
  uint64_t *result = (uint64_t)off_252910;
  return result;
}

uint64_t *sub_12713C(uint64_t *a1, uint64_t *a2)
{
  uint64_t result = sub_128090(a1, a2);
  uint64_t *result = (uint64_t)off_250A18;
  return result;
}

uint64_t *sub_127160(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result = sub_12FF1C(a1, a2, a3);
  uint64_t *result = (uint64_t)off_252BD8;
  return result;
}

uint64_t sub_127180(uint64_t a1, void *a2, unsigned __int8 *a3)
{
  __int128 v6 = (char *)a3;
  do
  {
    __darwin_ct_rune_t v8 = *--v6;
    __darwin_ct_rune_t v7 = v8;
    if (v8 < 0) {
      __uint32_t v9 = __maskrune(v7, 0x4000uLL);
    }
    else {
      __uint32_t v9 = _DefaultRuneLocale.__runetype[v7] & 0x4000;
    }
    unint64_t v10 = a2[1];
    if (v9) {
      BOOL v11 = (unint64_t)v6 > v10;
    }
    else {
      BOOL v11 = 0;
    }
  }

  while (v11);
  if ((unint64_t)v6 < v10)
  {
    int v12 = *a3;
    if (v12 == 45 || v12 == 43)
    {
      unint64_t v13 = a3;
      do
      {
        __darwin_ct_rune_t v15 = (char)*++v13;
        __darwin_ct_rune_t v14 = v15;
        if (v15 < 0) {
          __uint32_t v16 = __maskrune(v14, 0x4000uLL);
        }
        else {
          __uint32_t v16 = _DefaultRuneLocale.__runetype[v14] & 0x4000;
        }
        if (v16) {
          BOOL v17 = (unint64_t)v13 > a2[2];
        }
        else {
          BOOL v17 = 1;
        }
      }

      while (!v17);
      __darwin_ct_rune_t v18 = (char)*v13;
      if (v18 < 0)
      {
        if (!__maskrune(v18, 0x500uLL))
        {
LABEL_32:
          int v22 = *v13;
          if (v22 != 46 && v22 != 40) {
            goto LABEL_35;
          }
        }
      }

      else if ((_DefaultRuneLocale.__runetype[v18] & 0x500) == 0)
      {
        goto LABEL_32;
      }

uint64_t sub_1274B4(uint64_t a1, void *a2, void *a3)
{
  __int128 v6 = (char *)a2[1];
  if ((unint64_t)v6 <= a2[2])
  {
    do
    {
      __darwin_ct_rune_t v7 = *v6;
      if (v7 < 0)
      {
        if (__maskrune(v7, 0x4000uLL))
        {
LABEL_4:
          __darwin_ct_rune_t v8 = v6;
          __uint32_t v9 = v6;
          do
          {
            unint64_t v10 = v9;
            BOOL v11 = v8;
            ++v9;
            __darwin_ct_rune_t v12 = v10[1];
            __uint32_t v13 = v12 < 0 ? __maskrune(v12, 0x4000uLL) : _DefaultRuneLocale.__runetype[v12] & 0x4000;
            __darwin_ct_rune_t v8 = v11 + 1;
          }

          while (v13);
          (*(void (**)(uint64_t, uint64_t, char *, char *))(*(void *)a1 + 272LL))( a1,  22LL,  &v6[-*a2],  &v11[-*a2]);
          goto LABEL_13;
        }
      }

      else if ((_DefaultRuneLocale.__runetype[v7] & 0x4000) != 0)
      {
        goto LABEL_4;
      }

      unint64_t v10 = v6;
LABEL_13:
      __int128 v6 = v10 + 1;
    }

    while ((unint64_t)(v10 + 1) <= a2[2]);
  }

  uint64_t result = (*(uint64_t (**)(uint64_t, void *, void *))(*(void *)a1 + 168LL))(a1, a2, a3);
  if (!(_DWORD)result)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t, void *, void *))(*(void *)a1 + 176LL))(a1, a2, a3);
    if (!(_DWORD)result)
    {
      __darwin_ct_rune_t v15 = sub_122A0C(0x28uLL);
      uint64_t result = sub_153A70((uint64_t)v15, a2);
      *a3 = v15;
    }
  }

  return result;
}

void sub_1275F8(_Unwind_Exception *exception_object)
{
  if (v1) {
    free(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_127610(uint64_t a1, void *a2)
{
  unint64_t v2 = a2[1];
  if (v2 > a2[2]) {
    return 0LL;
  }
  uint64_t v5 = 0LL;
  unint64_t v6 = 0LL;
  int v7 = 0;
  int v8 = 0;
  do
  {
    int v9 = *(char *)v2;
    if (v9 == 41)
    {
      if (v8 == 1)
      {
        ++v7;
        unint64_t v6 = v2;
      }

      if (v8 <= 0) {
        (*(void (**)(uint64_t, uint64_t, unint64_t, unint64_t))(*(void *)a1 + 272LL))( a1,  24LL,  v2 - *a2,  v2 - *a2);
      }
      --v8;
    }

    else if (v9 == 40)
    {
      if (!v7 || v8)
      {
        unint64_t v10 = (char *)v2;
      }

      else
      {
        unint64_t v10 = (char *)(v2 + 1);
        uint64_t v11 = (v2 << 48) - (*a2 << 48) + 0x1000000000000LL;
        do
        {
          int v12 = *--v10;
          v11 -= 0x1000000000000LL;
        }

        while (v12 != 41);
        (*(void (**)(uint64_t, uint64_t, uint64_t, void))(*(void *)a1 + 272LL))( a1,  22LL,  v11 >> 48,  (__int16)(v2 - *a2));
      }

      ++v8;
      if (!v5) {
        uint64_t v5 = v10;
      }
      unint64_t v2 = (unint64_t)v10;
    }

    ++v2;
    unint64_t v13 = a2[2];
  }

  while (v2 <= v13);
  if (v8 >= 1)
  {
    (*(void (**)(uint64_t, uint64_t, char *, char *))(*(void *)a1 + 272LL))(a1, 24LL, &v5[-*a2], &v5[-*a2]);
    unint64_t v13 = a2[2];
  }

  if (v6 != v13 || !v5)
  {
    if (v6) {
      (*(void (**)(uint64_t, uint64_t, unint64_t, unint64_t))(*(void *)a1 + 272LL))( a1,  23LL,  v6 - *a2,  v13 - *a2);
    }
    return 0LL;
  }

  __darwin_ct_rune_t v14 = (const char *)a2[1];
  else {
    size_t v15 = 6LL;
  }
  strncpy(__dst, v14, v15);
  uint64_t v16 = 0LL;
  while (1)
  {
    __darwin_ct_rune_t v17 = __toupper(__dst[v16]);
    __dst[v16] = v17;
    if (v17 << 24 == 671088640) {
      break;
    }
    if ((v17 << 24) <= 0x7F000000)
    {
    }

    else if (__maskrune((char)v17, 0x4000uLL))
    {
      break;
    }

    if (++v16 == 6) {
      goto LABEL_41;
    }
  }

  __dst[v16] = 0;
LABEL_41:
  for (uint64_t i = 1LL; i != 36; ++i)
  {
    if (!strcmp(__dst, (&off_2ADD90)[i])) {
      break;
    }
  }

  return i;
}

void *sub_127884@<X0>(void *result@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  *(_WORD *)(a3 + 20) = 15;
  *(_DWORD *)a3 = 0;
  uint64_t v5 = (_BYTE *)a2[1];
  unint64_t v4 = a2[2];
  *(void *)(a3 + _Block_object_dispose(va, 8) = v5;
  *(_DWORD *)(a3 + 16) = 1;
  int v7 = result;
  uint64_t v8 = 0LL;
  int v9 = v5;
  while (1)
  {
    int v10 = (char)*v5;
    if (!*v5) {
      break;
    }
    uint64_t v11 = (v10 - 33);
    if (((1LL << (v10 - 33)) & 0x200000007A005631LL) == 0)
    {
      if (v11 == 7)
      {
        if (!(_DWORD)v8) {
          int v9 = v5;
        }
        uint64_t v12 = (v8 + 1);
        goto LABEL_12;
      }

      if (v11 == 8)
      {
        uint64_t v12 = (v8 - 1);
        if ((int)v8 <= 0) {
          uint64_t result = (void *)(*(uint64_t (**)(void *, uint64_t, _BYTE *, _BYTE *))(*v7 + 272LL))( v7,  24LL,  &v5[-*a2],  &v5[-*a2]);
        }
        goto LABEL_12;
      }

BOOL sub_127A90(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(char **)(a2 + 8);
  for (unint64_t i = *(void *)(a2 + 16); (unint64_t)v3 <= i; ++v3)
  {
    __darwin_ct_rune_t v5 = *v3;
    if (v5 < 0)
    {
      int v6 = __maskrune(v5, 0x4000uLL);
      unint64_t i = *(void *)(a2 + 16);
      if (!v6) {
        return (unint64_t)v3 > i;
      }
    }

    else if ((_DefaultRuneLocale.__runetype[v5] & 0x4000) == 0)
    {
      return (unint64_t)v3 > i;
    }
  }

  return (unint64_t)v3 > i;
}

uint64_t sub_127B08(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v7 = *a2;
  uint64_t v6 = a2[1];
  uint64_t v8 = a2[2];
  (*(void (**)(uint64_t *))(*a1 + 280))(a1);
  (*(void (**)(void *__return_ptr, uint64_t *, uint64_t *))(*a1 + 240))(v12, a1, a2);
  uint64_t v10 = *a1;
  if (LODWORD(v12[0])) {
    return (*(uint64_t (**)(uint64_t *, uint64_t *, void *, uint64_t))(v10 + 208))(a1, a2, v12, a3);
  }
  uint64_t v11 = (*(uint64_t (**)(uint64_t *, uint64_t *))(v10 + 232))(a1, a2);
  if (!(_DWORD)v11) {
    return (*(uint64_t (**)(uint64_t *, uint64_t *, uint64_t))(*a1 + 224))(a1, a2, a3);
  }
  if ((_DWORD)v11 == -1) {
    return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(*a1 + 272))( a1,  23LL,  a2[1] - *a2,  a2[2] - *a2);
  }
  return (*(uint64_t (**)(uint64_t *, uint64_t *, uint64_t, uint64_t))(*a1 + 192))(a1, a2, v11, a3);
}

uint64_t sub_127C50(uint64_t a1, uint64_t a2)
{
  for (i = *(char **)(a2 + 8); ; *(void *)(a2 + _Block_object_dispose(va, 8) = i)
  {
    __darwin_ct_rune_t v4 = *i;
    if (v4 < 0)
    {
      uint64_t result = __maskrune(v4, 0x4000uLL);
      unint64_t i = *(char **)(a2 + 8);
    }

    else
    {
      uint64_t result = _DefaultRuneLocale.__runetype[v4] & 0x4000;
    }

    uint64_t v6 = *(char **)(a2 + 16);
    if (!(_DWORD)result || i > v6) {
      break;
    }
    ++i;
  }

  if (i <= v6)
  {
    do
    {
      __darwin_ct_rune_t v8 = *v6;
      if (v8 < 0)
      {
        uint64_t result = __maskrune(v8, 0x4000uLL);
        if (!(_DWORD)result) {
          return result;
        }
      }

      else
      {
        uint64_t result = _DefaultRuneLocale.__runetype[v8] & 0x4000;
        if (!(_DWORD)result) {
          return result;
        }
      }

      unint64_t v9 = *(void *)(a2 + 8);
      uint64_t v6 = (char *)(*(void *)(a2 + 16) - 1LL);
      *(void *)(a2 + 16) = v6;
    }

    while ((unint64_t)v6 >= v9);
  }

  return result;
}

void sub_127CFC(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  LODWORD(xmmword_2B0AD0) = a2;
  *((void *)&xmmword_2B0AD0 + 1) = a3;
  qword_2B0AE0 = a4;
  exception = __cxa_allocate_exception(0x18uLL);
  uint64_t v5 = qword_2B0AE0;
  *(_OWORD *)exception = xmmword_2B0AD0;
  exception[2] = v5;
}

uint64_t sub_127D40(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = 0LL;
LABEL_2:
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 264LL))(a1, a2);
  unint64_t v6 = *(void *)(a2 + 8);
  uint64_t v7 = *(char **)(a2 + 16);
  if (v6 <= (unint64_t)v7)
  {
    __darwin_ct_rune_t v8 = 0LL;
    unint64_t v9 = 0LL;
    for (unint64_t i = *(char **)(a2 + 8); i <= v7; ++i)
    {
      int v11 = *i;
      if (v11 == 41)
      {
        if (!--v4 && !v8)
        {
          uint64_t v4 = 0LL;
          __darwin_ct_rune_t v8 = i;
          if (i == v7 && v9 == (char *)v6)
          {
            uint64_t v4 = 0LL;
            *(void *)(a2 + _Block_object_dispose(va, 8) = v6 + 1;
            *(void *)(a2 + 16) = i - 1;
            goto LABEL_2;
          }
        }
      }

      else
      {
        if (v9) {
          uint64_t v12 = v9;
        }
        else {
          uint64_t v12 = i;
        }
        if (v11 == 40)
        {
          unint64_t v9 = v12;
          ++v4;
        }
      }
    }
  }

  return result;
}

float sub_127E10(float (****a1)(void))
{
  float v2 = (**a1[2])(a1[2]);
  if (v2 <= 0.0) {
    ((void (*)(float (****)(void), uint64_t, uint64_t, uint64_t))(*a1)[34])(a1, 4LL, -1LL, -1LL);
  }
  return mathParser::log<float>(v2);
}

uint64_t sub_127E70(uint64_t a1, int a2)
{
  LODWORD(v2) = a2;
  uint64_t v3 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 8LL))(*(void *)(a1 + 16));
  uint64_t v4 = v3;
  if (v3) {
    BOOL v5 = (int)v2 < 1;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    uint64_t v2 = v2;
    unint64_t v6 = (float *)v3;
    do
    {
      *unint64_t v6 = mathParser::log<float>(*v6);
      ++v6;
      --v2;
    }

    while (v2);
  }

  return v4;
}

uint64_t sub_127ED4(uint64_t a1, _BYTE *a2, int a3)
{
  LODWORD(v3) = a3;
  uint64_t v5 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 16LL))(*(void *)(a1 + 16));
  uint64_t v6 = v5;
  if (v5) {
    BOOL v7 = (int)v3 < 1;
  }
  else {
    BOOL v7 = 1;
  }
  if (!v7)
  {
    uint64_t v3 = v3;
    __darwin_ct_rune_t v8 = (float *)v5;
    do
    {
      if (!*a2)
      {
        if (*v8 <= 0.0) {
          *a2 = 4;
        }
        else {
          *__darwin_ct_rune_t v8 = mathParser::log<float>(*v8);
        }
      }

      ++v8;
      ++a2;
      --v3;
    }

    while (v3);
  }

  return v6;
}

uint64_t sub_127F68()
{
  return 1LL;
}

void *sub_127F70(uint64_t a1)
{
  uint64_t v2 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 112LL))(*(void *)(a1 + 16));
  uint64_t v3 = sub_122A0C(0x20uLL);
  uint64_t v4 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 120LL))(*(void *)(a1 + 16));
  sub_130040(v3, v2, v4);
  *uint64_t v3 = off_2518D0;
  return v3;
}

void sub_127FF4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10)
{
  int v13 = v11;
  if (v13) {
    free(v13);
  }
  if (a2 == 1)
  {
    __int16 v15 = __cxa_begin_catch(exception_object);
    __int128 v17 = *(_OWORD *)v15;
    uint64_t v18 = *((void *)v15 + 2);
    if (v10) {
      (*(void (**)(uint64_t))(*(void *)v10 + 152LL))(v10);
    }
    exception = __cxa_allocate_exception(0x18uLL);
    *(_OWORD *)exception = v17;
    exception[2] = v18;
  }

  _Unwind_Resume(exception_object);
}

uint64_t *sub_128090(uint64_t *a1, uint64_t *a2)
{
  a1[2] = 0LL;
  uint64_t v3 = a1 + 2;
  *a1 = (uint64_t)off_257DD8;
  a1[1] = 0LL;
  sub_127B08(a1, a2, (uint64_t)(a1 + 2));
  if (*v3) {
    *(void *)(*v3 + _Block_object_dispose(va, 8) = a1;
  }
  return a1;
}

void *sub_128170(void *result, uint64_t a2)
{
  uint64_t *result = off_257DD8;
  result[1] = 0LL;
  if (!a2)
  {
    LODWORD(xmmword_2B0AD0) = 21;
    *((void *)&xmmword_2B0AD0 + 1) = -1LL;
    qword_2B0AE0 = -1LL;
    exception = __cxa_allocate_exception(0x18uLL);
    uint64_t v3 = qword_2B0AE0;
    *(_OWORD *)exception = xmmword_2B0AD0;
    exception[2] = v3;
  }

  result[2] = a2;
  *(void *)(a2 + _Block_object_dispose(va, 8) = result;
  return result;
}

void sub_1281F0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  *a10 = off_24E938;
  a10[1] = 0LL;
  _Unwind_Resume(a1);
}

float sub_128204(float (****a1)(void))
{
  float v2 = (**a1[2])(a1[2]);
  if (v2 <= 0.0) {
    ((void (*)(float (****)(void), uint64_t, uint64_t, uint64_t))(*a1)[34])(a1, 3LL, -1LL, -1LL);
  }
  return mathParser::log10<float>(v2);
}

uint64_t sub_128264(uint64_t a1, int a2)
{
  LODWORD(v2) = a2;
  uint64_t v3 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 8LL))(*(void *)(a1 + 16));
  uint64_t v4 = v3;
  if (v3) {
    BOOL v5 = (int)v2 < 1;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    uint64_t v2 = v2;
    uint64_t v6 = (float *)v3;
    do
    {
      *uint64_t v6 = mathParser::log10<float>(*v6);
      ++v6;
      --v2;
    }

    while (v2);
  }

  return v4;
}

uint64_t sub_1282C8(uint64_t a1, _BYTE *a2, int a3)
{
  LODWORD(v3) = a3;
  uint64_t v5 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 16LL))(*(void *)(a1 + 16));
  uint64_t v6 = v5;
  if (v5) {
    BOOL v7 = (int)v3 < 1;
  }
  else {
    BOOL v7 = 1;
  }
  if (!v7)
  {
    uint64_t v3 = v3;
    __darwin_ct_rune_t v8 = (float *)v5;
    do
    {
      if (!*a2)
      {
        if (*v8 <= 0.0) {
          *a2 = 3;
        }
        else {
          *__darwin_ct_rune_t v8 = mathParser::log10<float>(*v8);
        }
      }

      ++v8;
      ++a2;
      --v3;
    }

    while (v3);
  }

  return v6;
}

uint64_t sub_12835C()
{
  return 2LL;
}

void *sub_128364(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_122A0C(0x18uLL);
  void *v4 = off_24D3F8;
  v4[1] = 0LL;
  *((_DWORD *)v4 + 4) = 1075010958;
  uint64_t v5 = sub_122A0C(0x20uLL);
  uint64_t v6 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 120LL))(*(void *)(a1 + 16));
  sub_130040(v5, v6, (uint64_t)v4);
  void *v5 = off_251790;
  uint64_t v7 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 16) + 112LL))(*(void *)(a1 + 16), a2);
  __darwin_ct_rune_t v8 = sub_122A0C(0x20uLL);
  sub_130040(v8, v7, (uint64_t)v5);
  *__darwin_ct_rune_t v8 = off_2518D0;
  return v8;
}

void sub_128458( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, __int128 a11, uint64_t a12)
{
  int v16 = v14;
  if (v16) {
    free(v16);
  }
  if (a2 == 1)
  {
    uint64_t v18 = __cxa_begin_catch(exception_object);
    __int128 v20 = *(_OWORD *)v18;
    uint64_t v21 = *((void *)v18 + 2);
    if (v13) {
      (*(void (**)(uint64_t))(*(void *)v13 + 152LL))(v13);
    }
    if (v12) {
      (*(void (**)(uint64_t))(*(void *)v12 + 152LL))(v12);
    }
    exception = __cxa_allocate_exception(0x18uLL);
    *(_OWORD *)exception = v20;
    exception[2] = v21;
  }

  _Unwind_Resume(exception_object);
}

float sub_128534(uint64_t a1)
{
  float v1 = (***(float (****)(void))(a1 + 16))(*(void *)(a1 + 16));
  return mathParser::exp<float>(v1);
}

uint64_t sub_128554(uint64_t a1, int a2)
{
  LODWORD(v2) = a2;
  uint64_t v3 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 8LL))(*(void *)(a1 + 16));
  uint64_t v4 = v3;
  if (v3) {
    BOOL v5 = (int)v2 < 1;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    uint64_t v2 = v2;
    uint64_t v6 = (float *)v3;
    do
    {
      *uint64_t v6 = mathParser::exp<float>(*v6);
      ++v6;
      --v2;
    }

    while (v2);
  }

  return v4;
}

uint64_t sub_1285B8(uint64_t a1, unsigned __int8 *a2, int a3)
{
  LODWORD(v3) = a3;
  uint64_t v5 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 16LL))(*(void *)(a1 + 16));
  uint64_t v6 = v5;
  if (v5) {
    BOOL v7 = (int)v3 < 1;
  }
  else {
    BOOL v7 = 1;
  }
  if (!v7)
  {
    uint64_t v3 = v3;
    __darwin_ct_rune_t v8 = (float *)v5;
    do
    {
      if (!*a2++) {
        *__darwin_ct_rune_t v8 = mathParser::exp<float>(*v8);
      }
      ++v8;
      --v3;
    }

    while (v3);
  }

  return v6;
}

uint64_t sub_12862C()
{
  return 3LL;
}

void *sub_128634(void **a1)
{
  uint64_t v2 = (*(uint64_t (**)(void *))(*a1[2] + 112LL))(a1[2]);
  uint64_t v3 = sub_122A0C(0x20uLL);
  uint64_t v4 = ((uint64_t (*)(void **))(*a1)[15])(a1);
  sub_130040(v3, v4, v2);
  *uint64_t v3 = off_251790;
  return v3;
}

void sub_1286B8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10)
{
  if (v11) {
    free(v11);
  }
  if (a2 == 1)
  {
    __int16 v14 = __cxa_begin_catch(exception_object);
    __int128 v16 = *(_OWORD *)v14;
    uint64_t v17 = *((void *)v14 + 2);
    if (v10) {
      (*(void (**)(uint64_t))(*(void *)v10 + 152LL))(v10);
    }
    exception = __cxa_allocate_exception(0x18uLL);
    *(_OWORD *)exception = v16;
    exception[2] = v17;
  }

  _Unwind_Resume(exception_object);
}

float sub_128750(uint64_t a1)
{
  float v1 = (***(float (****)(void))(a1 + 16))(*(void *)(a1 + 16));
  return mathParser::fabs<float>(v1);
}

uint64_t sub_128770(uint64_t a1, int a2)
{
  LODWORD(v2) = a2;
  uint64_t v3 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 8LL))(*(void *)(a1 + 16));
  uint64_t v4 = v3;
  if (v3) {
    BOOL v5 = (int)v2 < 1;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    uint64_t v2 = v2;
    uint64_t v6 = (float *)v3;
    do
    {
      *uint64_t v6 = mathParser::fabs<float>(*v6);
      ++v6;
      --v2;
    }

    while (v2);
  }

  return v4;
}

uint64_t sub_1287D4(uint64_t a1, unsigned __int8 *a2, int a3)
{
  LODWORD(v3) = a3;
  uint64_t v5 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 16LL))(*(void *)(a1 + 16));
  uint64_t v6 = v5;
  if (v5) {
    BOOL v7 = (int)v3 < 1;
  }
  else {
    BOOL v7 = 1;
  }
  if (!v7)
  {
    uint64_t v3 = v3;
    __darwin_ct_rune_t v8 = (float *)v5;
    do
    {
      if (!*a2++) {
        *__darwin_ct_rune_t v8 = mathParser::fabs<float>(*v8);
      }
      ++v8;
      --v3;
    }

    while (v3);
  }

  return v6;
}

uint64_t sub_128848()
{
  return 4LL;
}

float sub_128850(float (****a1)(void))
{
  float v2 = (**a1[2])(a1[2]);
  if (v2 < 0.0) {
    ((void (*)(float (****)(void), uint64_t, uint64_t, uint64_t))(*a1)[34])(a1, 2LL, -1LL, -1LL);
  }
  return mathParser::sqrt<float>(v2);
}

uint64_t sub_1288B0(uint64_t a1, int a2)
{
  LODWORD(v2) = a2;
  uint64_t v3 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 8LL))(*(void *)(a1 + 16));
  uint64_t v4 = v3;
  if (v3) {
    BOOL v5 = (int)v2 < 1;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    uint64_t v2 = v2;
    uint64_t v6 = (float *)v3;
    do
    {
      *uint64_t v6 = mathParser::sqrt<float>(*v6);
      ++v6;
      --v2;
    }

    while (v2);
  }

  return v4;
}

uint64_t sub_128914(uint64_t a1, _BYTE *a2, int a3)
{
  LODWORD(v3) = a3;
  uint64_t v5 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 16LL))(*(void *)(a1 + 16));
  uint64_t v6 = v5;
  if (v5) {
    BOOL v7 = (int)v3 < 1;
  }
  else {
    BOOL v7 = 1;
  }
  if (!v7)
  {
    uint64_t v3 = v3;
    __darwin_ct_rune_t v8 = (float *)v5;
    do
    {
      if (!*a2)
      {
        if (*v8 >= 0.0) {
          *__darwin_ct_rune_t v8 = mathParser::sqrt<float>(*v8);
        }
        else {
          *a2 = 2;
        }
      }

      ++v8;
      ++a2;
      --v3;
    }

    while (v3);
  }

  return v6;
}

uint64_t sub_1289A8()
{
  return 5LL;
}

void *sub_1289B0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_122A0C(0x18uLL);
  uint64_t v5 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 120LL))(*(void *)(a1 + 16));
  sub_128170(v4, v5);
  void *v4 = off_24EF48;
  uint64_t v6 = sub_122A0C(0x20uLL);
  BOOL v7 = sub_122A0C(0x18uLL);
  *BOOL v7 = off_24D3F8;
  v7[1] = 0LL;
  *((_DWORD *)v7 + 4) = 0x40000000;
  sub_130040(v6, (uint64_t)v4, (uint64_t)v7);
  *uint64_t v6 = off_251790;
  uint64_t v8 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 16) + 112LL))(*(void *)(a1 + 16), a2);
  unint64_t v9 = sub_122A0C(0x20uLL);
  sub_130040(v9, v8, (uint64_t)v6);
  *unint64_t v9 = off_2518D0;
  return v9;
}

void sub_128AC0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10)
{
  __int16 v14 = v11;
  if (v14) {
    free(v14);
  }
  if (a2 == 1)
  {
    __int128 v16 = __cxa_begin_catch(exception_object);
    __int128 v18 = *(_OWORD *)v16;
    uint64_t v19 = *((void *)v16 + 2);
    if (v12) {
      (*(void (**)(uint64_t))(*(void *)v12 + 152LL))(v12);
    }
    if (v10) {
      (*(void (**)(uint64_t))(*(void *)v10 + 152LL))(v10);
    }
    exception = __cxa_allocate_exception(0x18uLL);
    *(_OWORD *)exception = v18;
    exception[2] = v19;
  }

  _Unwind_Resume(exception_object);
}

float sub_128BB8(uint64_t a1)
{
  return -(***(float (****)(void))(a1 + 16))(*(void *)(a1 + 16));
}

float sub_128BDC(uint64_t a1, int a2)
{
  uint64_t v3 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 8LL))(*(void *)(a1 + 16));
  if (v3) {
    BOOL v5 = a2 < 1;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    uint64_t v6 = a2;
    BOOL v7 = (float *)v3;
    do
    {
      float result = -*v7;
      *v7++ = result;
      --v6;
    }

    while (v6);
  }

  return result;
}

uint64_t sub_128C30(uint64_t a1, unsigned __int8 *a2, int a3)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 16LL))(*(void *)(a1 + 16));
  if (result) {
    BOOL v6 = a3 < 1;
  }
  else {
    BOOL v6 = 1;
  }
  if (!v6)
  {
    uint64_t v7 = a3;
    uint64_t v8 = (float *)result;
    do
    {
      if (!*a2++) {
        *uint64_t v8 = -*v8;
      }
      ++v8;
      --v7;
    }

    while (v7);
  }

  return result;
}

uint64_t sub_128C94()
{
  return 6LL;
}

void *sub_128C9C(uint64_t a1)
{
  uint64_t v1 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 112LL))(*(void *)(a1 + 16));
  uint64_t v2 = sub_122A0C(0x18uLL);
  sub_128170(v2, v1);
  void *v2 = off_24F080;
  return v2;
}

void sub_128D04( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10)
{
  uint64_t v13 = v11;
  if (v13) {
    free(v13);
  }
  if (a2 == 1)
  {
    __int16 v15 = __cxa_begin_catch(exception_object);
    __int128 v17 = *(_OWORD *)v15;
    uint64_t v18 = *((void *)v15 + 2);
    if (v10) {
      (*(void (**)(uint64_t))(*(void *)v10 + 152LL))(v10);
    }
    exception = __cxa_allocate_exception(0x18uLL);
    *(_OWORD *)exception = v17;
    exception[2] = v18;
  }

  _Unwind_Resume(exception_object);
}

float sub_128DA0(uint64_t a1)
{
  uint64_t v2 = *(float (****)(void))(a1 + 16);
  if (v2) {
    float v3 = (**v2)(v2);
  }
  else {
    float v3 = *(float *)(a1 + 24);
  }
  return (float)(v3 * (float)rand()) * 4.6566e-10;
}

char *sub_128DF0(uint64_t a1, uint64_t a2)
{
  int v2 = a2;
  uint64_t v4 = *(void *)(a1 + 16);
  if (v4)
  {
    BOOL v5 = (char *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v4 + 8LL))(v4, a2);
    if (v5 && v2 >= 1)
    {
      uint64_t v6 = 0LL;
      uint64_t v7 = 4LL * v2;
      do
      {
        *(float *)&v5[v6] = *(float *)&v5[v6] * (float)((float)rand() * 4.6566e-10);
        v6 += 4LL;
      }

      while (v7 != v6);
    }
  }

  else
  {
    else {
      size_t v8 = 4LL * a2;
    }
    BOOL v5 = (char *)operator new[](v8);
    if (v2 >= 1)
    {
      uint64_t v9 = 0LL;
      float v10 = *(float *)(a1 + 24) * 4.6566e-10;
      uint64_t v11 = 4LL * v2;
      do
      {
        *(float *)&v5[v9] = v10 * (float)rand();
        v9 += 4LL;
      }

      while (v11 != v9);
    }
  }

  return v5;
}

float *sub_128ED0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3 = a3;
  uint64_t v5 = *(void *)(a1 + 16);
  if (v5)
  {
    uint64_t v7 = (float *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v5 + 16LL))(v5, a2, a3);
    if (v7 && v3 >= 1)
    {
      for (uint64_t i = 0LL; i != v3; ++i)
      {
        if (!*(_BYTE *)(a2 + i)) {
          v7[i] = v7[i] * (float)((float)rand() * 4.6566e-10);
        }
      }
    }
  }

  else
  {
    float v9 = *(float *)(a1 + 24);
    else {
      size_t v10 = 4LL * a3;
    }
    uint64_t v7 = (float *)operator new[](v10);
    if (v3 >= 1)
    {
      unint64_t v11 = 0LL;
      float v12 = v9 * 4.6566e-10;
      uint64_t v13 = 4LL * v3;
      do
      {
        v7[v11 / 4] = v12 * (float)rand();
        v11 += 4LL;
      }

      while (v13 != v11);
    }
  }

  return v7;
}

uint64_t sub_128FBC()
{
  return 7LL;
}

uint64_t sub_128FC4()
{
  return 13LL;
}

uint64_t sub_128FD0(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 16);
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 56LL))(result);
  }
  return result;
}

uint64_t sub_128FE8()
{
  return 0LL;
}

void *sub_128FF0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2)
  {
    int v3 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v2 + 120LL))(v2);
  }

  else
  {
    int v3 = sub_122A0C(0x18uLL);
    int v4 = *(_DWORD *)(a1 + 24);
    *int v3 = off_24D3F8;
    v3[1] = 0LL;
    *((_DWORD *)v3 + 4) = v4;
  }

  uint64_t v5 = sub_122A0C(0x20uLL);
  sub_1292C4((uint64_t)v5, v3);
  return v5;
}

void sub_129060(_Unwind_Exception *exception_object)
{
  if (v1) {
    free(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_129078(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2) {
    BOOL v3 = *(void *)(a1 + 16) == a2;
  }
  else {
    BOOL v3 = 0;
  }
  uint64_t v4 = v3;
  if (v3)
  {
    (*(void (**)(uint64_t))(*(void *)a2 + 152LL))(a2);
    *(void *)(a1 + 16) = a3;
    *(void *)(a3 + _Block_object_dispose(va, 8) = a1;
  }

  return v4;
}

uint64_t sub_1290D0(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 16);
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 72LL))(result);
  }
  return result;
}

uint64_t sub_1290E8(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 16);
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 80LL))(result);
  }
  return result;
}

uint64_t sub_129100(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 16);
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 88LL))(result);
  }
  return result;
}

char *sub_12911C(void *a1)
{
  uint64_t v2 = a1[2];
  if (v2) {
    BOOL v3 = (char *)(*(uint64_t (**)(uint64_t))(*(void *)v2 + 104LL))(v2);
  }
  else {
    BOOL v3 = 0LL;
  }
  uint64_t v4 = (&off_2ADD90)[(*(int (**)(void *))(*a1 + 288LL))(a1)];
  if (v3) {
    size_t v5 = strlen(v3) + 3;
  }
  else {
    size_t v5 = 3LL;
  }
  size_t v6 = strlen(v4);
  uint64_t v7 = (char *)operator new[](v5 + v6);
  size_t v8 = v7;
  if (v3)
  {
    sprintf(v7, "%s(%s)", v4, v3);
    operator delete[](v3);
  }

  else
  {
    sprintf(v7, "%s()", v4);
  }

  return v8;
}

uint64_t sub_1291EC()
{
  return 1LL;
}

uint64_t sub_1291F4()
{
  return 0LL;
}

uint64_t sub_1291FC(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_24F1B8;
  *(void *)(a1 + _Block_object_dispose(va, 8) = 0LL;
  sub_127D40(a1, a2);
  if (*(void *)(a2 + 8) <= *(void *)(a2 + 16))
  {
    uint64_t v4 = (void *)(a1 + 16);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 256LL))(a1, a2, a1 + 16);
    if (*(void *)(a1 + 16)
      && (*(unsigned int (**)(void))(**(void **)(a1 + 16) + 40LL))(*(void *)(a1 + 16)))
    {
      *(float *)(a1 + 24) = (**(float (***)(void))*v4)(*v4);
      uint64_t v5 = *(void *)(a1 + 16);
      if (v5) {
        (*(void (**)(uint64_t))(*(void *)v5 + 152LL))(v5);
      }
      void *v4 = 0LL;
    }
  }

  else
  {
    *(void *)(a1 + 16) = 0LL;
    *(_DWORD *)(a1 + 24) = 1065353216;
  }

  return a1;
}

void sub_1292B4(_Unwind_Exception *a1)
{
  void *v1 = off_24E938;
  v1[1] = 0LL;
  _Unwind_Resume(a1);
}

uint64_t sub_1292C4(uint64_t a1, void *a2)
{
  *(void *)a1 = off_24F1B8;
  *(void *)(a1 + _Block_object_dispose(va, 8) = 0LL;
  *(void *)(a1 + 16) = a2;
  if (a2)
  {
    a2[1] = a1;
    if ((*(unsigned int (**)(void *))(*a2 + 40LL))(a2))
    {
      *(float *)(a1 + 24) = (***(float (****)(void))(a1 + 16))(*(void *)(a1 + 16));
      uint64_t v3 = *(void *)(a1 + 16);
      if (v3) {
        (*(void (**)(uint64_t))(*(void *)v3 + 152LL))(v3);
      }
      *(void *)(a1 + 16) = 0LL;
    }
  }

  else
  {
    *(_DWORD *)(a1 + 24) = 1065353216;
  }

  return a1;
}

void sub_129348(_Unwind_Exception *a1)
{
  void *v1 = off_24E938;
  v1[1] = 0LL;
  _Unwind_Resume(a1);
}

void *sub_129358(void *a1)
{
  *a1 = off_24F1B8;
  uint64_t v2 = a1[2];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 152LL))(v2);
  }
  *a1 = off_24E938;
  a1[1] = 0LL;
  return a1;
}

void sub_1293A4(_Unwind_Exception *a1)
{
  void *v1 = off_24E938;
  v1[1] = 0LL;
  _Unwind_Resume(a1);
}

void *sub_1293B4(void *a1)
{
  *a1 = off_24F1B8;
  uint64_t v2 = a1[2];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 152LL))(v2);
  }
  *a1 = off_24E938;
  a1[1] = 0LL;
  return a1;
}

void sub_129400(_Unwind_Exception *a1)
{
  void *v1 = off_24E938;
  v1[1] = 0LL;
  _Unwind_Resume(a1);
}

void sub_129410(void *a1)
{
  *a1 = off_24F1B8;
  uint64_t v2 = a1[2];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 152LL))(v2);
  }
  free(a1);
}

void sub_129450(_Unwind_Exception *a1)
{
  void *v1 = off_24E938;
  v1[1] = 0LL;
  free(v1);
  _Unwind_Resume(a1);
}

float sub_129470(uint64_t a1)
{
  float v1 = (***(float (****)(void))(a1 + 16))(*(void *)(a1 + 16));
  return mathParser::sin<float>(v1);
}

uint64_t sub_129490(uint64_t a1, int a2)
{
  LODWORD(v2) = a2;
  uint64_t v3 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 8LL))(*(void *)(a1 + 16));
  uint64_t v4 = v3;
  if (v3) {
    BOOL v5 = (int)v2 < 1;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    uint64_t v2 = v2;
    size_t v6 = (float *)v3;
    do
    {
      *size_t v6 = mathParser::sin<float>(*v6);
      ++v6;
      --v2;
    }

    while (v2);
  }

  return v4;
}

uint64_t sub_1294F4(uint64_t a1, unsigned __int8 *a2, int a3)
{
  LODWORD(v3) = a3;
  uint64_t v5 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 16LL))(*(void *)(a1 + 16));
  uint64_t v6 = v5;
  if (v5) {
    BOOL v7 = (int)v3 < 1;
  }
  else {
    BOOL v7 = 1;
  }
  if (!v7)
  {
    uint64_t v3 = v3;
    size_t v8 = (float *)v5;
    do
    {
      if (!*a2++) {
        *size_t v8 = mathParser::sin<float>(*v8);
      }
      ++v8;
      --v3;
    }

    while (v3);
  }

  return v6;
}

uint64_t sub_129568()
{
  return 8LL;
}

void *sub_129570(uint64_t a1)
{
  uint64_t v2 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 112LL))(*(void *)(a1 + 16));
  uint64_t v3 = sub_122A0C(0x18uLL);
  uint64_t v4 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 120LL))(*(void *)(a1 + 16));
  sub_128170(v3, v4);
  *uint64_t v3 = off_24F428;
  uint64_t v5 = sub_122A0C(0x20uLL);
  sub_130040(v5, v2, (uint64_t)v3);
  void *v5 = off_251790;
  return v5;
}

void sub_12962C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10)
{
  __int16 v14 = v12;
  if (v14) {
    free(v14);
  }
  if (a2 == 1)
  {
    __int128 v16 = __cxa_begin_catch(exception_object);
    __int128 v18 = *(_OWORD *)v16;
    uint64_t v19 = *((void *)v16 + 2);
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 152LL))(v11);
    }
    if (v10) {
      (*(void (**)(uint64_t))(*(void *)v10 + 152LL))(v10);
    }
    exception = __cxa_allocate_exception(0x18uLL);
    *(_OWORD *)exception = v18;
    exception[2] = v19;
  }

  _Unwind_Resume(exception_object);
}

float sub_1296FC(uint64_t a1)
{
  float v1 = (***(float (****)(void))(a1 + 16))(*(void *)(a1 + 16));
  return mathParser::cos<float>(v1);
}

uint64_t sub_12971C(uint64_t a1, int a2)
{
  LODWORD(v2) = a2;
  uint64_t v3 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 8LL))(*(void *)(a1 + 16));
  uint64_t v4 = v3;
  if (v3) {
    BOOL v5 = (int)v2 < 1;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    uint64_t v2 = v2;
    uint64_t v6 = (float *)v3;
    do
    {
      *uint64_t v6 = mathParser::cos<float>(*v6);
      ++v6;
      --v2;
    }

    while (v2);
  }

  return v4;
}

uint64_t sub_129780(uint64_t a1, unsigned __int8 *a2, int a3)
{
  LODWORD(v3) = a3;
  uint64_t v5 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 16LL))(*(void *)(a1 + 16));
  uint64_t v6 = v5;
  if (v5) {
    BOOL v7 = (int)v3 < 1;
  }
  else {
    BOOL v7 = 1;
  }
  if (!v7)
  {
    uint64_t v3 = v3;
    size_t v8 = (float *)v5;
    do
    {
      if (!*a2++) {
        *size_t v8 = mathParser::cos<float>(*v8);
      }
      ++v8;
      --v3;
    }

    while (v3);
  }

  return v6;
}

uint64_t sub_1297F4()
{
  return 9LL;
}

void *sub_1297FC(uint64_t a1)
{
  uint64_t v2 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 112LL))(*(void *)(a1 + 16));
  uint64_t v3 = sub_122A0C(0x18uLL);
  uint64_t v4 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 120LL))(*(void *)(a1 + 16));
  sub_128170(v3, v4);
  *uint64_t v3 = off_24F2F0;
  uint64_t v5 = sub_122A0C(0x18uLL);
  sub_128170(v5, (uint64_t)v3);
  void *v5 = off_24F080;
  uint64_t v6 = sub_122A0C(0x20uLL);
  sub_130040(v6, v2, (uint64_t)v5);
  *uint64_t v6 = off_251790;
  return v6;
}

void sub_1298E0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10)
{
  if (v11) {
    free(v11);
  }
  if (a2 == 1)
  {
    __int16 v15 = __cxa_begin_catch(exception_object);
    __int128 v17 = *(_OWORD *)v15;
    uint64_t v18 = *((void *)v15 + 2);
    if (v12) {
      (*(void (**)(uint64_t))(*(void *)v12 + 152LL))(v12);
    }
    if (v10) {
      (*(void (**)(uint64_t))(*(void *)v10 + 152LL))(v10);
    }
    exception = __cxa_allocate_exception(0x18uLL);
    *(_OWORD *)exception = v17;
    exception[2] = v18;
  }

  _Unwind_Resume(exception_object);
}

float sub_1299C8(float (****a1)(void))
{
  float v2 = (**a1[2])(a1[2]);
  return mathParser::tan<float>(v2);
}

uint64_t sub_129A2C(void **a1, int a2)
{
  LODWORD(v2) = a2;
  uint64_t v4 = (*(uint64_t (**)(void *))(*a1[2] + 8LL))(a1[2]);
  uint64_t v5 = v4;
  if (v4) {
    BOOL v6 = (int)v2 < 1;
  }
  else {
    BOOL v6 = 1;
  }
  if (!v6)
  {
    uint64_t v2 = v2;
    BOOL v7 = (float *)v4;
    do
    {
      *BOOL v7 = mathParser::tan<float>(*v7);
      ++v7;
      --v2;
    }

    while (v2);
  }

  return v5;
}

uint64_t sub_129AC0(uint64_t a1, _BYTE *a2, int a3)
{
  LODWORD(v3) = a3;
  uint64_t v5 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 16LL))(*(void *)(a1 + 16));
  uint64_t v6 = v5;
  if (v5) {
    BOOL v7 = (int)v3 < 1;
  }
  else {
    BOOL v7 = 1;
  }
  if (!v7)
  {
    uint64_t v3 = v3;
    size_t v8 = (float *)v5;
    do
    {
      if (!*a2)
      {
        else {
          *size_t v8 = mathParser::tan<float>(*v8);
        }
      }

      ++v8;
      ++a2;
      --v3;
    }

    while (v3);
  }

  return v6;
}

uint64_t sub_129B5C()
{
  return 10LL;
}

void *sub_129B64(uint64_t a1)
{
  uint64_t v2 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 112LL))(*(void *)(a1 + 16));
  uint64_t v3 = sub_122A0C(0x18uLL);
  uint64_t v4 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 120LL))(*(void *)(a1 + 16));
  sub_128170(v3, v4);
  *uint64_t v3 = off_24F698;
  uint64_t v5 = sub_122A0C(0x20uLL);
  uint64_t v6 = sub_122A0C(0x18uLL);
  *uint64_t v6 = off_24D3F8;
  v6[1] = 0LL;
  *((_DWORD *)v6 + 4) = 0x40000000;
  sub_130040(v5, (uint64_t)v3, (uint64_t)v6);
  void *v5 = &off_251B50;
  BOOL v7 = sub_122A0C(0x20uLL);
  sub_130040(v7, v2, (uint64_t)v5);
  *BOOL v7 = off_251790;
  return v7;
}

void sub_129C6C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10)
{
  if (v11) {
    free(v11);
  }
  if (a2 == 1)
  {
    __int16 v15 = __cxa_begin_catch(exception_object);
    __int128 v17 = *(_OWORD *)v15;
    uint64_t v18 = *((void *)v15 + 2);
    if (v12) {
      (*(void (**)(uint64_t))(*(void *)v12 + 152LL))(v12);
    }
    if (v10) {
      (*(void (**)(uint64_t))(*(void *)v10 + 152LL))(v10);
    }
    exception = __cxa_allocate_exception(0x18uLL);
    *(_OWORD *)exception = v17;
    exception[2] = v18;
  }

  _Unwind_Resume(exception_object);
}

float sub_129D54(float (****a1)(void))
{
  float v2 = (**a1[2])(a1[2]);
  return 1.0 / mathParser::cos<float>(v2);
}

uint64_t sub_129DC4(void **a1, int a2)
{
  LODWORD(v2) = a2;
  uint64_t v4 = (*(uint64_t (**)(void *))(*a1[2] + 8LL))(a1[2]);
  uint64_t v5 = v4;
  if (v4) {
    BOOL v6 = (int)v2 < 1;
  }
  else {
    BOOL v6 = 1;
  }
  if (!v6)
  {
    uint64_t v2 = v2;
    BOOL v7 = (float *)v4;
    do
    {
      *BOOL v7 = 1.0 / mathParser::cos<float>(*v7);
      ++v7;
      --v2;
    }

    while (v2);
  }

  return v5;
}

uint64_t sub_129E68(uint64_t a1, _BYTE *a2, int a3)
{
  LODWORD(v3) = a3;
  uint64_t v5 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 16LL))(*(void *)(a1 + 16));
  uint64_t v6 = v5;
  if (v5) {
    BOOL v7 = (int)v3 < 1;
  }
  else {
    BOOL v7 = 1;
  }
  if (!v7)
  {
    uint64_t v3 = v3;
    size_t v8 = (float *)v5;
    do
    {
      if (!*a2)
      {
        else {
          *size_t v8 = 1.0 / mathParser::cos<float>(*v8);
        }
      }

      ++v8;
      ++a2;
      --v3;
    }

    while (v3);
  }

  return v6;
}

uint64_t sub_129F14()
{
  return 11LL;
}

void *sub_129F1C(uint64_t a1)
{
  uint64_t v2 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 112LL))(*(void *)(a1 + 16));
  uint64_t v3 = sub_122A0C(0x18uLL);
  uint64_t v4 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 120LL))(*(void *)(a1 + 16));
  sub_128170(v3, v4);
  *uint64_t v3 = off_24F698;
  uint64_t v5 = sub_122A0C(0x20uLL);
  sub_130040(v5, v2, (uint64_t)v3);
  void *v5 = off_251790;
  uint64_t v6 = sub_122A0C(0x18uLL);
  uint64_t v7 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 120LL))(*(void *)(a1 + 16));
  sub_128170(v6, v7);
  *uint64_t v6 = off_24F560;
  size_t v8 = sub_122A0C(0x20uLL);
  sub_130040(v8, (uint64_t)v5, (uint64_t)v6);
  *size_t v8 = off_251790;
  return v8;
}

void sub_12A040( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, __int128 a11, uint64_t a12)
{
  if (v12) {
    free(v12);
  }
  if (a2 == 1)
  {
    __int128 v17 = __cxa_begin_catch(exception_object);
    __int128 v19 = *(_OWORD *)v17;
    uint64_t v20 = *((void *)v17 + 2);
    if (v13) {
      (*(void (**)(uint64_t))(*(void *)v13 + 152LL))(v13);
    }
    if (v14) {
      (*(void (**)(uint64_t))(*(void *)v14 + 152LL))(v14);
    }
    exception = __cxa_allocate_exception(0x18uLL);
    *(_OWORD *)exception = v19;
    exception[2] = v20;
  }

  _Unwind_Resume(exception_object);
}

float sub_12A14C(float (****a1)(void))
{
  float v2 = (**a1[2])(a1[2]);
  return 1.0 / mathParser::sin<float>(v2);
}

uint64_t sub_12A1BC(void **a1, int a2)
{
  LODWORD(v2) = a2;
  uint64_t v4 = (*(uint64_t (**)(void *))(*a1[2] + 8LL))(a1[2]);
  uint64_t v5 = v4;
  if (v4) {
    BOOL v6 = (int)v2 < 1;
  }
  else {
    BOOL v6 = 1;
  }
  if (!v6)
  {
    uint64_t v2 = v2;
    uint64_t v7 = (float *)v4;
    do
    {
      *uint64_t v7 = 1.0 / mathParser::sin<float>(*v7);
      ++v7;
      --v2;
    }

    while (v2);
  }

  return v5;
}

uint64_t sub_12A260(uint64_t a1, _BYTE *a2, int a3)
{
  LODWORD(v3) = a3;
  uint64_t v5 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 16LL))(*(void *)(a1 + 16));
  uint64_t v6 = v5;
  if (v5) {
    BOOL v7 = (int)v3 < 1;
  }
  else {
    BOOL v7 = 1;
  }
  if (!v7)
  {
    uint64_t v3 = v3;
    size_t v8 = (float *)v5;
    do
    {
      if (!*a2)
      {
        else {
          *size_t v8 = 1.0 / mathParser::sin<float>(*v8);
        }
      }

      ++v8;
      ++a2;
      --v3;
    }

    while (v3);
  }

  return v6;
}

uint64_t sub_12A30C()
{
  return 12LL;
}

void *sub_12A314(uint64_t a1)
{
  uint64_t v2 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 112LL))(*(void *)(a1 + 16));
  uint64_t v3 = sub_122A0C(0x18uLL);
  uint64_t v4 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 120LL))(*(void *)(a1 + 16));
  sub_128170(v3, v4);
  *uint64_t v3 = off_24F7D0;
  uint64_t v5 = sub_122A0C(0x20uLL);
  sub_130040(v5, v2, (uint64_t)v3);
  void *v5 = off_251790;
  uint64_t v6 = sub_122A0C(0x18uLL);
  uint64_t v7 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 120LL))(*(void *)(a1 + 16));
  sub_128170(v6, v7);
  *uint64_t v6 = off_24F908;
  size_t v8 = sub_122A0C(0x20uLL);
  sub_130040(v8, (uint64_t)v5, (uint64_t)v6);
  *size_t v8 = off_251790;
  float v9 = sub_122A0C(0x18uLL);
  sub_128170(v9, (uint64_t)v8);
  *float v9 = off_24F080;
  return v9;
}

void sub_12A460( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10)
{
  if (v11) {
    free(v11);
  }
  if (a2 == 1)
  {
    __int16 v15 = __cxa_begin_catch(exception_object);
    __int128 v17 = *(_OWORD *)v15;
    uint64_t v18 = *((void *)v15 + 2);
    if (v12) {
      (*(void (**)(uint64_t))(*(void *)v12 + 152LL))(v12);
    }
    if (v10) {
      (*(void (**)(uint64_t))(*(void *)v10 + 152LL))(v10);
    }
    exception = __cxa_allocate_exception(0x18uLL);
    *(_OWORD *)exception = v17;
    exception[2] = v18;
  }

  _Unwind_Resume(exception_object);
}

float sub_12A580(float (****a1)(void))
{
  float v2 = (**a1[2])(a1[2]);
  return 1.0 / mathParser::tan<float>(v2);
}

uint64_t sub_12A5F0(void **a1, int a2)
{
  LODWORD(v2) = a2;
  uint64_t v4 = (*(uint64_t (**)(void *))(*a1[2] + 8LL))(a1[2]);
  uint64_t v5 = v4;
  if (v4) {
    BOOL v6 = (int)v2 < 1;
  }
  else {
    BOOL v6 = 1;
  }
  if (!v6)
  {
    uint64_t v2 = v2;
    uint64_t v7 = (float *)v4;
    do
    {
      *uint64_t v7 = 1.0 / mathParser::tan<float>(*v7);
      ++v7;
      --v2;
    }

    while (v2);
  }

  return v5;
}

uint64_t sub_12A694(uint64_t a1, _BYTE *a2, int a3)
{
  LODWORD(v3) = a3;
  uint64_t v5 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 16LL))(*(void *)(a1 + 16));
  uint64_t v6 = v5;
  if (v5) {
    BOOL v7 = (int)v3 < 1;
  }
  else {
    BOOL v7 = 1;
  }
  if (!v7)
  {
    uint64_t v3 = v3;
    size_t v8 = (float *)v5;
    do
    {
      if (!*a2)
      {
        else {
          *size_t v8 = 1.0 / mathParser::tan<float>(*v8);
        }
      }

      ++v8;
      ++a2;
      --v3;
    }

    while (v3);
  }

  return v6;
}

uint64_t sub_12A740()
{
  return 13LL;
}

void *sub_12A748(uint64_t a1)
{
  uint64_t v2 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 112LL))(*(void *)(a1 + 16));
  uint64_t v3 = sub_122A0C(0x18uLL);
  uint64_t v4 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 120LL))(*(void *)(a1 + 16));
  sub_128170(v3, v4);
  *uint64_t v3 = off_24F7D0;
  uint64_t v5 = sub_122A0C(0x20uLL);
  uint64_t v6 = sub_122A0C(0x18uLL);
  *uint64_t v6 = off_24D3F8;
  v6[1] = 0LL;
  *((_DWORD *)v6 + 4) = 0x40000000;
  sub_130040(v5, (uint64_t)v3, (uint64_t)v6);
  void *v5 = &off_251B50;
  BOOL v7 = sub_122A0C(0x20uLL);
  sub_130040(v7, v2, (uint64_t)v5);
  *BOOL v7 = off_251790;
  size_t v8 = sub_122A0C(0x18uLL);
  sub_128170(v8, (uint64_t)v7);
  *size_t v8 = off_24F080;
  return v8;
}

void sub_12A878( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10)
{
  if (v10) {
    free(v10);
  }
  if (a2 == 1)
  {
    uint64_t v14 = __cxa_begin_catch(exception_object);
    __int128 v16 = *(_OWORD *)v14;
    uint64_t v17 = *((void *)v14 + 2);
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 152LL))(v11);
    }
    exception = __cxa_allocate_exception(0x18uLL);
    *(_OWORD *)exception = v16;
    exception[2] = v17;
  }

  _Unwind_Resume(exception_object);
}

float sub_12A984(float (****a1)(void))
{
  float v2 = (**a1[2])(a1[2]);
  if (v2 > 1.0 || v2 < -1.0) {
    ((void (*)(float (****)(void), uint64_t, uint64_t, uint64_t))(*a1)[34])(a1, 6LL, -1LL, -1LL);
  }
  return mathParser::asin<float>(v2);
}

uint64_t sub_12A9F0(uint64_t a1, int a2)
{
  LODWORD(v2) = a2;
  uint64_t v3 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 8LL))(*(void *)(a1 + 16));
  uint64_t v4 = v3;
  if (v3) {
    BOOL v5 = (int)v2 < 1;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    uint64_t v2 = v2;
    uint64_t v6 = (float *)v3;
    do
    {
      *uint64_t v6 = mathParser::asin<float>(*v6);
      ++v6;
      --v2;
    }

    while (v2);
  }

  return v4;
}

uint64_t sub_12AA54(uint64_t a1, _BYTE *a2, int a3)
{
  LODWORD(v3) = a3;
  uint64_t v5 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 16LL))(*(void *)(a1 + 16));
  uint64_t v6 = v5;
  if (v5) {
    BOOL v7 = (int)v3 < 1;
  }
  else {
    BOOL v7 = 1;
  }
  if (!v7)
  {
    uint64_t v3 = v3;
    size_t v8 = (float *)v5;
    do
    {
      if (!*a2)
      {
        float v9 = *v8;
        if (*v8 > 1.0 || v9 < -1.0) {
          *a2 = 6;
        }
        else {
          *size_t v8 = mathParser::asin<float>(v9);
        }
      }

      ++v8;
      ++a2;
      --v3;
    }

    while (v3);
  }

  return v6;
}

uint64_t sub_12AAFC()
{
  return 14LL;
}

void *sub_12AB04(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_122A0C(0x20uLL);
  uint64_t v5 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 120LL))(*(void *)(a1 + 16));
  uint64_t v6 = sub_122A0C(0x18uLL);
  *uint64_t v6 = off_24D3F8;
  v6[1] = 0LL;
  *((_DWORD *)v6 + 4) = 0x40000000;
  sub_130040(v4, v5, (uint64_t)v6);
  void *v4 = &off_251B50;
  BOOL v7 = sub_122A0C(0x20uLL);
  size_t v8 = sub_122A0C(0x18uLL);
  *size_t v8 = off_24D3F8;
  v8[1] = 0LL;
  *((_DWORD *)v8 + 4) = 1065353216;
  sub_130040(v7, (uint64_t)v8, (uint64_t)v4);
  *BOOL v7 = off_251650;
  float v9 = sub_122A0C(0x18uLL);
  sub_128170(v9, (uint64_t)v7);
  *float v9 = off_24EF48;
  uint64_t v10 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 16) + 112LL))(*(void *)(a1 + 16), a2);
  uint64_t v11 = sub_122A0C(0x20uLL);
  sub_130040(v11, v10, (uint64_t)v9);
  void *v11 = off_2518D0;
  return v11;
}

void sub_12AC60( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10)
{
  if (v12) {
    free(v12);
  }
  if (a2 == 1)
  {
    __int16 v15 = __cxa_begin_catch(exception_object);
    __int128 v17 = *(_OWORD *)v15;
    uint64_t v18 = *((void *)v15 + 2);
    if (v10) {
      (*(void (**)(uint64_t))(*(void *)v10 + 152LL))(v10);
    }
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 152LL))(v11);
    }
    exception = __cxa_allocate_exception(0x18uLL);
    *(_OWORD *)exception = v17;
    exception[2] = v18;
  }

  _Unwind_Resume(exception_object);
}

float sub_12AD70(float (****a1)(void))
{
  float v2 = (**a1[2])(a1[2]);
  if (v2 > 1.0 || v2 < -1.0) {
    ((void (*)(float (****)(void), uint64_t, uint64_t, uint64_t))(*a1)[34])(a1, 7LL, -1LL, -1LL);
  }
  return mathParser::acos<float>(v2);
}

uint64_t sub_12ADDC(uint64_t a1, int a2)
{
  LODWORD(v2) = a2;
  uint64_t v3 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 8LL))(*(void *)(a1 + 16));
  uint64_t v4 = v3;
  if (v3) {
    BOOL v5 = (int)v2 < 1;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    uint64_t v2 = v2;
    uint64_t v6 = (float *)v3;
    do
    {
      *uint64_t v6 = mathParser::acos<float>(*v6);
      ++v6;
      --v2;
    }

    while (v2);
  }

  return v4;
}

uint64_t sub_12AE40(uint64_t a1, _BYTE *a2, int a3)
{
  LODWORD(v3) = a3;
  uint64_t v5 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 16LL))(*(void *)(a1 + 16));
  uint64_t v6 = v5;
  if (v5) {
    BOOL v7 = (int)v3 < 1;
  }
  else {
    BOOL v7 = 1;
  }
  if (!v7)
  {
    uint64_t v3 = v3;
    size_t v8 = (float *)v5;
    do
    {
      if (!*a2)
      {
        float v9 = *v8;
        if (*v8 > 1.0 || v9 < -1.0) {
          *a2 = 7;
        }
        else {
          *size_t v8 = mathParser::acos<float>(v9);
        }
      }

      ++v8;
      ++a2;
      --v3;
    }

    while (v3);
  }

  return v6;
}

uint64_t sub_12AEE8()
{
  return 15LL;
}

void *sub_12AEF0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_122A0C(0x20uLL);
  uint64_t v5 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 120LL))(*(void *)(a1 + 16));
  uint64_t v6 = sub_122A0C(0x18uLL);
  *uint64_t v6 = off_24D3F8;
  v6[1] = 0LL;
  *((_DWORD *)v6 + 4) = 0x40000000;
  sub_130040(v4, v5, (uint64_t)v6);
  void *v4 = &off_251B50;
  BOOL v7 = sub_122A0C(0x20uLL);
  size_t v8 = sub_122A0C(0x18uLL);
  *size_t v8 = off_24D3F8;
  v8[1] = 0LL;
  *((_DWORD *)v8 + 4) = 1065353216;
  sub_130040(v7, (uint64_t)v8, (uint64_t)v4);
  *BOOL v7 = off_251650;
  float v9 = sub_122A0C(0x18uLL);
  sub_128170(v9, (uint64_t)v7);
  *float v9 = off_24EF48;
  uint64_t v10 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 16) + 112LL))(*(void *)(a1 + 16), a2);
  uint64_t v11 = sub_122A0C(0x18uLL);
  sub_128170(v11, v10);
  void *v11 = off_24F080;
  uint64_t v12 = sub_122A0C(0x20uLL);
  sub_130040(v12, (uint64_t)v11, (uint64_t)v9);
  void *v12 = off_2518D0;
  return v12;
}

void sub_12B074( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10)
{
  if (v11) {
    free(v11);
  }
  if (a2 == 1)
  {
    __int16 v15 = __cxa_begin_catch(exception_object);
    __int128 v17 = *(_OWORD *)v15;
    uint64_t v18 = *((void *)v15 + 2);
    if (v10) {
      (*(void (**)(uint64_t))(*(void *)v10 + 152LL))(v10);
    }
    if (v12) {
      (*(void (**)(uint64_t))(*(void *)v12 + 152LL))(v12);
    }
    exception = __cxa_allocate_exception(0x18uLL);
    *(_OWORD *)exception = v17;
    exception[2] = v18;
  }

  _Unwind_Resume(exception_object);
}

float sub_12B1A0(uint64_t a1)
{
  float v1 = (***(float (****)(void))(a1 + 16))(*(void *)(a1 + 16));
  return mathParser::atan<float>(v1);
}

uint64_t sub_12B1C0(uint64_t a1, int a2)
{
  LODWORD(v2) = a2;
  uint64_t v3 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 8LL))(*(void *)(a1 + 16));
  uint64_t v4 = v3;
  if (v3) {
    BOOL v5 = (int)v2 < 1;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    uint64_t v2 = v2;
    uint64_t v6 = (float *)v3;
    do
    {
      *uint64_t v6 = mathParser::atan<float>(*v6);
      ++v6;
      --v2;
    }

    while (v2);
  }

  return v4;
}

uint64_t sub_12B224(uint64_t a1, unsigned __int8 *a2, int a3)
{
  LODWORD(v3) = a3;
  uint64_t v5 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 16LL))(*(void *)(a1 + 16));
  uint64_t v6 = v5;
  if (v5) {
    BOOL v7 = (int)v3 < 1;
  }
  else {
    BOOL v7 = 1;
  }
  if (!v7)
  {
    uint64_t v3 = v3;
    size_t v8 = (float *)v5;
    do
    {
      if (!*a2++) {
        *size_t v8 = mathParser::atan<float>(*v8);
      }
      ++v8;
      --v3;
    }

    while (v3);
  }

  return v6;
}

uint64_t sub_12B298()
{
  return 16LL;
}

void *sub_12B2A0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_122A0C(0x20uLL);
  uint64_t v5 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 120LL))(*(void *)(a1 + 16));
  uint64_t v6 = sub_122A0C(0x18uLL);
  *uint64_t v6 = off_24D3F8;
  v6[1] = 0LL;
  *((_DWORD *)v6 + 4) = 0x40000000;
  sub_130040(v4, v5, (uint64_t)v6);
  void *v4 = &off_251B50;
  BOOL v7 = sub_122A0C(0x20uLL);
  size_t v8 = sub_122A0C(0x18uLL);
  *size_t v8 = off_24D3F8;
  v8[1] = 0LL;
  *((_DWORD *)v8 + 4) = 1065353216;
  sub_130040(v7, (uint64_t)v8, (uint64_t)v4);
  *BOOL v7 = off_251510;
  uint64_t v9 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 16) + 112LL))(*(void *)(a1 + 16), a2);
  uint64_t v10 = sub_122A0C(0x20uLL);
  sub_130040(v10, v9, (uint64_t)v7);
  void *v10 = off_2518D0;
  return v10;
}

void sub_12B3D4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10)
{
  if (v10) {
    free(v10);
  }
  if (a2 == 1)
  {
    __int16 v15 = __cxa_begin_catch(exception_object);
    __int128 v17 = *(_OWORD *)v15;
    uint64_t v18 = *((void *)v15 + 2);
    if (v12) {
      (*(void (**)(uint64_t))(*(void *)v12 + 152LL))(v12);
    }
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 152LL))(v11);
    }
    exception = __cxa_allocate_exception(0x18uLL);
    *(_OWORD *)exception = v17;
    exception[2] = v18;
  }

  _Unwind_Resume(exception_object);
}

float sub_12B4C8(float (****a1)(void))
{
  float v2 = (**a1[2])(a1[2]);
  if (v2 < 1.0 && v2 > -1.0) {
    ((void (*)(float (****)(void), uint64_t, uint64_t, uint64_t))(*a1)[34])(a1, 8LL, -1LL, -1LL);
  }
  return mathParser::acos<float>(1.0 / v2);
}

uint64_t sub_12B534(uint64_t a1, int a2)
{
  LODWORD(v2) = a2;
  uint64_t v3 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 8LL))(*(void *)(a1 + 16));
  uint64_t v4 = v3;
  if (v3) {
    BOOL v5 = (int)v2 < 1;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    uint64_t v2 = v2;
    uint64_t v6 = (float *)v3;
    do
    {
      *uint64_t v6 = mathParser::acos<float>(1.0 / *v6);
      ++v6;
      --v2;
    }

    while (v2);
  }

  return v4;
}

uint64_t sub_12B5A8(uint64_t a1, _BYTE *a2, int a3)
{
  LODWORD(v3) = a3;
  uint64_t v5 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 16LL))(*(void *)(a1 + 16));
  uint64_t v6 = v5;
  if (v5) {
    BOOL v7 = (int)v3 < 1;
  }
  else {
    BOOL v7 = 1;
  }
  if (!v7)
  {
    uint64_t v3 = v3;
    size_t v8 = (float *)v5;
    do
    {
      if (!*a2)
      {
        float v9 = *v8;
        if (*v8 < 1.0 && v9 > -1.0) {
          *a2 = 8;
        }
        else {
          *size_t v8 = mathParser::acos<float>(1.0 / v9);
        }
      }

      ++v8;
      ++a2;
      --v3;
    }

    while (v3);
  }

  return v6;
}

uint64_t sub_12B654()
{
  return 17LL;
}

void *sub_12B65C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_122A0C(0x20uLL);
  uint64_t v5 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 120LL))(*(void *)(a1 + 16));
  uint64_t v6 = sub_122A0C(0x18uLL);
  *uint64_t v6 = off_24D3F8;
  v6[1] = 0LL;
  *((_DWORD *)v6 + 4) = 0x40000000;
  sub_130040(v4, v5, (uint64_t)v6);
  void *v4 = &off_251B50;
  BOOL v7 = sub_122A0C(0x20uLL);
  size_t v8 = sub_122A0C(0x18uLL);
  *size_t v8 = off_24D3F8;
  v8[1] = 0LL;
  *((_DWORD *)v8 + 4) = 1065353216;
  sub_130040(v7, (uint64_t)v4, (uint64_t)v8);
  *BOOL v7 = off_251650;
  float v9 = sub_122A0C(0x18uLL);
  sub_128170(v9, (uint64_t)v7);
  *float v9 = off_24EF48;
  uint64_t v10 = sub_122A0C(0x20uLL);
  uint64_t v11 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 120LL))(*(void *)(a1 + 16));
  sub_130040(v10, v11, (uint64_t)v9);
  void *v10 = off_251790;
  uint64_t v12 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 16) + 112LL))(*(void *)(a1 + 16), a2);
  uint64_t v13 = sub_122A0C(0x20uLL);
  sub_130040(v13, v12, (uint64_t)v10);
  *uint64_t v13 = off_2518D0;
  return v13;
}

void sub_12B7F8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10)
{
  uint64_t v14 = v10;
  if (v14) {
    free(v14);
  }
  if (a2 == 1)
  {
    __int128 v16 = __cxa_begin_catch(exception_object);
    __int128 v18 = *(_OWORD *)v16;
    uint64_t v19 = *((void *)v16 + 2);
    if (v12) {
      (*(void (**)(uint64_t))(*(void *)v12 + 152LL))(v12);
    }
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 152LL))(v11);
    }
    exception = __cxa_allocate_exception(0x18uLL);
    *(_OWORD *)exception = v18;
    exception[2] = v19;
  }

  _Unwind_Resume(exception_object);
}

float sub_12B910(float (****a1)(void))
{
  float v2 = (**a1[2])(a1[2]);
  if (v2 <= 1.0 && v2 >= -1.0) {
    ((void (*)(float (****)(void), uint64_t, uint64_t, uint64_t))(*a1)[34])(a1, 9LL, -1LL, -1LL);
  }
  return mathParser::asin<float>(1.0 / v2);
}

uint64_t sub_12B97C(uint64_t a1, int a2)
{
  LODWORD(v2) = a2;
  uint64_t v3 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 8LL))(*(void *)(a1 + 16));
  uint64_t v4 = v3;
  if (v3) {
    BOOL v5 = (int)v2 < 1;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    uint64_t v2 = v2;
    uint64_t v6 = (float *)v3;
    do
    {
      *uint64_t v6 = mathParser::asin<float>(1.0 / *v6);
      ++v6;
      --v2;
    }

    while (v2);
  }

  return v4;
}

uint64_t sub_12B9F0(uint64_t a1, _BYTE *a2, int a3)
{
  LODWORD(v3) = a3;
  uint64_t v5 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 16LL))(*(void *)(a1 + 16));
  uint64_t v6 = v5;
  if (v5) {
    BOOL v7 = (int)v3 < 1;
  }
  else {
    BOOL v7 = 1;
  }
  if (!v7)
  {
    uint64_t v3 = v3;
    size_t v8 = (float *)v5;
    do
    {
      if (!*a2)
      {
        float v9 = *v8;
        if (*v8 < 1.0 && v9 > -1.0) {
          *a2 = 9;
        }
        else {
          *size_t v8 = mathParser::asin<float>(1.0 / v9);
        }
      }

      ++v8;
      ++a2;
      --v3;
    }

    while (v3);
  }

  return v6;
}

uint64_t sub_12BA9C()
{
  return 18LL;
}

void *sub_12BAA4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_122A0C(0x20uLL);
  uint64_t v5 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 120LL))(*(void *)(a1 + 16));
  uint64_t v6 = sub_122A0C(0x18uLL);
  *uint64_t v6 = off_24D3F8;
  v6[1] = 0LL;
  *((_DWORD *)v6 + 4) = 0x40000000;
  sub_130040(v4, v5, (uint64_t)v6);
  void *v4 = &off_251B50;
  BOOL v7 = sub_122A0C(0x20uLL);
  size_t v8 = sub_122A0C(0x18uLL);
  *size_t v8 = off_24D3F8;
  v8[1] = 0LL;
  *((_DWORD *)v8 + 4) = 1065353216;
  sub_130040(v7, (uint64_t)v4, (uint64_t)v8);
  *BOOL v7 = off_251650;
  float v9 = sub_122A0C(0x18uLL);
  sub_128170(v9, (uint64_t)v7);
  *float v9 = off_24EF48;
  uint64_t v10 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 16) + 112LL))(*(void *)(a1 + 16), a2);
  uint64_t v11 = sub_122A0C(0x18uLL);
  sub_128170(v11, v10);
  void *v11 = off_24F080;
  uint64_t v12 = sub_122A0C(0x20uLL);
  sub_130040(v12, (uint64_t)v11, (uint64_t)v9);
  void *v12 = off_2518D0;
  return v12;
}

void sub_12BC28( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10)
{
  if (v11) {
    free(v11);
  }
  if (a2 == 1)
  {
    __int16 v15 = __cxa_begin_catch(exception_object);
    __int128 v17 = *(_OWORD *)v15;
    uint64_t v18 = *((void *)v15 + 2);
    if (v10) {
      (*(void (**)(uint64_t))(*(void *)v10 + 152LL))(v10);
    }
    if (v12) {
      (*(void (**)(uint64_t))(*(void *)v12 + 152LL))(v12);
    }
    exception = __cxa_allocate_exception(0x18uLL);
    *(_OWORD *)exception = v17;
    exception[2] = v18;
  }

  _Unwind_Resume(exception_object);
}

float sub_12BD54(float (****a1)(void))
{
  float v2 = (**a1[2])(a1[2]);
  if (v2 == 0.0) {
    ((void (*)(float (****)(void), uint64_t, uint64_t, uint64_t))(*a1)[34])(a1, 10LL, -1LL, -1LL);
  }
  return mathParser::atan<float>(1.0 / v2);
}

uint64_t sub_12BDB8(uint64_t a1, int a2)
{
  LODWORD(v2) = a2;
  uint64_t v3 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 8LL))(*(void *)(a1 + 16));
  uint64_t v4 = v3;
  if (v3) {
    BOOL v5 = (int)v2 < 1;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    uint64_t v2 = v2;
    uint64_t v6 = (float *)v3;
    do
    {
      *uint64_t v6 = mathParser::atan<float>(1.0 / *v6);
      ++v6;
      --v2;
    }

    while (v2);
  }

  return v4;
}

uint64_t sub_12BE2C(uint64_t a1, _BYTE *a2, int a3)
{
  LODWORD(v3) = a3;
  uint64_t v5 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 16LL))(*(void *)(a1 + 16));
  uint64_t v6 = v5;
  if (v5) {
    BOOL v7 = (int)v3 < 1;
  }
  else {
    BOOL v7 = 1;
  }
  if (!v7)
  {
    uint64_t v3 = v3;
    size_t v8 = (float *)v5;
    do
    {
      if (!*a2)
      {
        if (*v8 == 0.0) {
          *a2 = 10;
        }
        else {
          *size_t v8 = mathParser::atan<float>(1.0 / *v8);
        }
      }

      ++v8;
      ++a2;
      --v3;
    }

    while (v3);
  }

  return v6;
}

uint64_t sub_12BED0()
{
  return 19LL;
}

void *sub_12BED8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_122A0C(0x20uLL);
  uint64_t v5 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 120LL))(*(void *)(a1 + 16));
  uint64_t v6 = sub_122A0C(0x18uLL);
  *uint64_t v6 = off_24D3F8;
  v6[1] = 0LL;
  *((_DWORD *)v6 + 4) = 0x40000000;
  sub_130040(v4, v5, (uint64_t)v6);
  void *v4 = &off_251B50;
  BOOL v7 = sub_122A0C(0x20uLL);
  size_t v8 = sub_122A0C(0x18uLL);
  *size_t v8 = off_24D3F8;
  v8[1] = 0LL;
  *((_DWORD *)v8 + 4) = 1065353216;
  sub_130040(v7, (uint64_t)v4, (uint64_t)v8);
  *BOOL v7 = off_251510;
  uint64_t v9 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 16) + 112LL))(*(void *)(a1 + 16), a2);
  uint64_t v10 = sub_122A0C(0x18uLL);
  sub_128170(v10, v9);
  void *v10 = off_24F080;
  uint64_t v11 = sub_122A0C(0x20uLL);
  sub_130040(v11, (uint64_t)v10, (uint64_t)v7);
  void *v11 = off_2518D0;
  return v11;
}

void sub_12C034( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, __int128 a11, uint64_t a12)
{
  __int128 v16 = v14;
  if (v16) {
    free(v16);
  }
  if (a2 == 1)
  {
    uint64_t v18 = __cxa_begin_catch(exception_object);
    __int128 v20 = *(_OWORD *)v18;
    uint64_t v21 = *((void *)v18 + 2);
    if (v13) {
      (*(void (**)(uint64_t))(*(void *)v13 + 152LL))(v13);
    }
    if (v12) {
      (*(void (**)(uint64_t))(*(void *)v12 + 152LL))(v12);
    }
    exception = __cxa_allocate_exception(0x18uLL);
    *(_OWORD *)exception = v20;
    exception[2] = v21;
  }

  _Unwind_Resume(exception_object);
}

float sub_12C150(uint64_t a1)
{
  float v1 = (***(float (****)(void))(a1 + 16))(*(void *)(a1 + 16));
  return mathParser::sinh<float>(v1);
}

uint64_t sub_12C170(uint64_t a1, int a2)
{
  LODWORD(v2) = a2;
  uint64_t v3 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 8LL))(*(void *)(a1 + 16));
  uint64_t v4 = v3;
  if (v3) {
    BOOL v5 = (int)v2 < 1;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    uint64_t v2 = v2;
    uint64_t v6 = (float *)v3;
    do
    {
      *uint64_t v6 = mathParser::sinh<float>(*v6);
      ++v6;
      --v2;
    }

    while (v2);
  }

  return v4;
}

uint64_t sub_12C1D4(uint64_t a1, unsigned __int8 *a2, int a3)
{
  LODWORD(v3) = a3;
  uint64_t v5 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 16LL))(*(void *)(a1 + 16));
  uint64_t v6 = v5;
  if (v5) {
    BOOL v7 = (int)v3 < 1;
  }
  else {
    BOOL v7 = 1;
  }
  if (!v7)
  {
    uint64_t v3 = v3;
    size_t v8 = (float *)v5;
    do
    {
      if (!*a2++) {
        *size_t v8 = mathParser::sinh<float>(*v8);
      }
      ++v8;
      --v3;
    }

    while (v3);
  }

  return v6;
}

uint64_t sub_12C248()
{
  return 20LL;
}

void *sub_12C250(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_122A0C(0x18uLL);
  uint64_t v5 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 120LL))(*(void *)(a1 + 16));
  sub_128170(v4, v5);
  void *v4 = &off_2502C8;
  uint64_t v6 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 16) + 112LL))(*(void *)(a1 + 16), a2);
  BOOL v7 = sub_122A0C(0x20uLL);
  sub_130040(v7, v6, (uint64_t)v4);
  *BOOL v7 = off_251790;
  return v7;
}

void sub_12C314( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10)
{
  uint64_t v14 = v12;
  if (v14) {
    free(v14);
  }
  if (a2 == 1)
  {
    __int128 v16 = __cxa_begin_catch(exception_object);
    __int128 v18 = *(_OWORD *)v16;
    uint64_t v19 = *((void *)v16 + 2);
    if (v10) {
      (*(void (**)(uint64_t))(*(void *)v10 + 152LL))(v10);
    }
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 152LL))(v11);
    }
    exception = __cxa_allocate_exception(0x18uLL);
    *(_OWORD *)exception = v18;
    exception[2] = v19;
  }

  _Unwind_Resume(exception_object);
}

float sub_12C3F0(uint64_t a1)
{
  float v1 = (***(float (****)(void))(a1 + 16))(*(void *)(a1 + 16));
  return mathParser::cosh<float>(v1);
}

uint64_t sub_12C410(uint64_t a1, int a2)
{
  LODWORD(v2) = a2;
  uint64_t v3 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 8LL))(*(void *)(a1 + 16));
  uint64_t v4 = v3;
  if (v3) {
    BOOL v5 = (int)v2 < 1;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    uint64_t v2 = v2;
    uint64_t v6 = (float *)v3;
    do
    {
      *uint64_t v6 = mathParser::cosh<float>(*v6);
      ++v6;
      --v2;
    }

    while (v2);
  }

  return v4;
}

uint64_t sub_12C474(uint64_t a1, unsigned __int8 *a2, int a3)
{
  LODWORD(v3) = a3;
  uint64_t v5 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 16LL))(*(void *)(a1 + 16));
  uint64_t v6 = v5;
  if (v5) {
    BOOL v7 = (int)v3 < 1;
  }
  else {
    BOOL v7 = 1;
  }
  if (!v7)
  {
    uint64_t v3 = v3;
    size_t v8 = (float *)v5;
    do
    {
      if (!*a2++) {
        *size_t v8 = mathParser::cosh<float>(*v8);
      }
      ++v8;
      --v3;
    }

    while (v3);
  }

  return v6;
}

uint64_t sub_12C4E8()
{
  return 21LL;
}

void *sub_12C4F0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_122A0C(0x18uLL);
  uint64_t v5 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 120LL))(*(void *)(a1 + 16));
  sub_128170(v4, v5);
  void *v4 = &off_250190;
  uint64_t v6 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 16) + 112LL))(*(void *)(a1 + 16), a2);
  BOOL v7 = sub_122A0C(0x20uLL);
  sub_130040(v7, v6, (uint64_t)v4);
  *BOOL v7 = off_251790;
  return v7;
}

void sub_12C5B4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10)
{
  uint64_t v14 = v12;
  if (v14) {
    free(v14);
  }
  if (a2 == 1)
  {
    __int128 v16 = __cxa_begin_catch(exception_object);
    __int128 v18 = *(_OWORD *)v16;
    uint64_t v19 = *((void *)v16 + 2);
    if (v10) {
      (*(void (**)(uint64_t))(*(void *)v10 + 152LL))(v10);
    }
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 152LL))(v11);
    }
    exception = __cxa_allocate_exception(0x18uLL);
    *(_OWORD *)exception = v18;
    exception[2] = v19;
  }

  _Unwind_Resume(exception_object);
}

float sub_12C690(float (****a1)(void))
{
  float v2 = (**a1[2])(a1[2]);
  return mathParser::tanh<float>(v2);
}

uint64_t sub_12C6F4(uint64_t a1, int a2)
{
  LODWORD(v2) = a2;
  uint64_t v3 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 8LL))(*(void *)(a1 + 16));
  uint64_t v4 = v3;
  if (v3) {
    BOOL v5 = (int)v2 < 1;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    uint64_t v2 = v2;
    uint64_t v6 = (float *)v3;
    do
    {
      *uint64_t v6 = mathParser::tanh<float>(*v6);
      ++v6;
      --v2;
    }

    while (v2);
  }

  return v4;
}

uint64_t sub_12C758(uint64_t a1, _BYTE *a2, int a3)
{
  LODWORD(v3) = a3;
  uint64_t v5 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 16LL))(*(void *)(a1 + 16));
  uint64_t v6 = v5;
  if (v5) {
    BOOL v7 = (int)v3 < 1;
  }
  else {
    BOOL v7 = 1;
  }
  if (!v7)
  {
    uint64_t v3 = v3;
    size_t v8 = (float *)v5;
    do
    {
      if (!*a2)
      {
        else {
          *size_t v8 = mathParser::tanh<float>(*v8);
        }
      }

      ++v8;
      ++a2;
      --v3;
    }

    while (v3);
  }

  return v6;
}

uint64_t sub_12C7F4()
{
  return 22LL;
}

void *sub_12C7FC(uint64_t a1)
{
  uint64_t v2 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 112LL))(*(void *)(a1 + 16));
  uint64_t v3 = sub_122A0C(0x18uLL);
  uint64_t v4 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 120LL))(*(void *)(a1 + 16));
  sub_128170(v3, v4);
  *uint64_t v3 = off_250538;
  uint64_t v5 = sub_122A0C(0x20uLL);
  uint64_t v6 = sub_122A0C(0x18uLL);
  *uint64_t v6 = off_24D3F8;
  v6[1] = 0LL;
  *((_DWORD *)v6 + 4) = 0x40000000;
  sub_130040(v5, (uint64_t)v3, (uint64_t)v6);
  void *v5 = &off_251B50;
  BOOL v7 = sub_122A0C(0x20uLL);
  sub_130040(v7, v2, (uint64_t)v5);
  *BOOL v7 = off_251790;
  return v7;
}

void sub_12C904( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10)
{
  if (v11) {
    free(v11);
  }
  if (a2 == 1)
  {
    __int16 v15 = __cxa_begin_catch(exception_object);
    __int128 v17 = *(_OWORD *)v15;
    uint64_t v18 = *((void *)v15 + 2);
    if (v12) {
      (*(void (**)(uint64_t))(*(void *)v12 + 152LL))(v12);
    }
    if (v10) {
      (*(void (**)(uint64_t))(*(void *)v10 + 152LL))(v10);
    }
    exception = __cxa_allocate_exception(0x18uLL);
    *(_OWORD *)exception = v17;
    exception[2] = v18;
  }

  _Unwind_Resume(exception_object);
}

float sub_12C9EC(float (****a1)(void))
{
  float v2 = (**a1[2])(a1[2]);
  return 1.0 / mathParser::cosh<float>(v2);
}

uint64_t sub_12CA5C(uint64_t a1, int a2)
{
  LODWORD(v2) = a2;
  uint64_t v3 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 8LL))(*(void *)(a1 + 16));
  uint64_t v4 = v3;
  if (v3) {
    BOOL v5 = (int)v2 < 1;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    uint64_t v2 = v2;
    uint64_t v6 = (float *)v3;
    do
    {
      *uint64_t v6 = 1.0 / mathParser::cosh<float>(*v6);
      ++v6;
      --v2;
    }

    while (v2);
  }

  return v4;
}

uint64_t sub_12CAD0(uint64_t a1, _BYTE *a2, int a3)
{
  LODWORD(v3) = a3;
  uint64_t v5 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 16LL))(*(void *)(a1 + 16));
  uint64_t v6 = v5;
  if (v5) {
    BOOL v7 = (int)v3 < 1;
  }
  else {
    BOOL v7 = 1;
  }
  if (!v7)
  {
    uint64_t v3 = v3;
    size_t v8 = (float *)v5;
    do
    {
      if (!*a2)
      {
        float v9 = mathParser::cosh<float>(*v8);
        if (v9 == 0.0) {
          *a2 = 17;
        }
        else {
          *size_t v8 = 1.0 / v9;
        }
      }

      ++v8;
      ++a2;
      --v3;
    }

    while (v3);
  }

  return v6;
}

uint64_t sub_12CB74()
{
  return 23LL;
}

void *sub_12CB7C(uint64_t a1)
{
  uint64_t v2 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 112LL))(*(void *)(a1 + 16));
  uint64_t v3 = sub_122A0C(0x18uLL);
  uint64_t v4 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 120LL))(*(void *)(a1 + 16));
  sub_128170(v3, v4);
  *uint64_t v3 = off_250538;
  uint64_t v5 = sub_122A0C(0x20uLL);
  sub_130040(v5, v2, (uint64_t)v3);
  void *v5 = off_251790;
  uint64_t v6 = sub_122A0C(0x18uLL);
  uint64_t v7 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 120LL))(*(void *)(a1 + 16));
  sub_128170(v6, v7);
  *uint64_t v6 = &off_250400;
  size_t v8 = sub_122A0C(0x20uLL);
  sub_130040(v8, (uint64_t)v5, (uint64_t)v6);
  *size_t v8 = off_251790;
  return v8;
}

void sub_12CCA0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, __int128 a11, uint64_t a12)
{
  if (v12) {
    free(v12);
  }
  if (a2 == 1)
  {
    __int128 v17 = __cxa_begin_catch(exception_object);
    __int128 v19 = *(_OWORD *)v17;
    uint64_t v20 = *((void *)v17 + 2);
    if (v13) {
      (*(void (**)(uint64_t))(*(void *)v13 + 152LL))(v13);
    }
    if (v14) {
      (*(void (**)(uint64_t))(*(void *)v14 + 152LL))(v14);
    }
    exception = __cxa_allocate_exception(0x18uLL);
    *(_OWORD *)exception = v19;
    exception[2] = v20;
  }

  _Unwind_Resume(exception_object);
}

float sub_12CDAC(float (****a1)(void))
{
  float v2 = (**a1[2])(a1[2]);
  return 1.0 / mathParser::sinh<float>(v2);
}

uint64_t sub_12CE1C(uint64_t a1, int a2)
{
  LODWORD(v2) = a2;
  uint64_t v3 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 8LL))(*(void *)(a1 + 16));
  uint64_t v4 = v3;
  if (v3) {
    BOOL v5 = (int)v2 < 1;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    uint64_t v2 = v2;
    uint64_t v6 = (float *)v3;
    do
    {
      *uint64_t v6 = 1.0 / mathParser::sinh<float>(*v6);
      ++v6;
      --v2;
    }

    while (v2);
  }

  return v4;
}

uint64_t sub_12CE90(uint64_t a1, _BYTE *a2, int a3)
{
  LODWORD(v3) = a3;
  uint64_t v5 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 16LL))(*(void *)(a1 + 16));
  uint64_t v6 = v5;
  if (v5) {
    BOOL v7 = (int)v3 < 1;
  }
  else {
    BOOL v7 = 1;
  }
  if (!v7)
  {
    uint64_t v3 = v3;
    size_t v8 = (float *)v5;
    do
    {
      if (!*a2)
      {
        float v9 = mathParser::sinh<float>(*v8);
        if (v9 == 0.0) {
          *a2 = 18;
        }
        else {
          *size_t v8 = 1.0 / v9;
        }
      }

      ++v8;
      ++a2;
      --v3;
    }

    while (v3);
  }

  return v6;
}

uint64_t sub_12CF34()
{
  return 24LL;
}

void *sub_12CF3C(uint64_t a1)
{
  uint64_t v2 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 112LL))(*(void *)(a1 + 16));
  uint64_t v3 = sub_122A0C(0x18uLL);
  uint64_t v4 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 120LL))(*(void *)(a1 + 16));
  sub_128170(v3, v4);
  *uint64_t v3 = off_250670;
  uint64_t v5 = sub_122A0C(0x20uLL);
  sub_130040(v5, v2, (uint64_t)v3);
  void *v5 = off_251790;
  uint64_t v6 = sub_122A0C(0x18uLL);
  uint64_t v7 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 120LL))(*(void *)(a1 + 16));
  sub_128170(v6, v7);
  *uint64_t v6 = off_2507A8;
  size_t v8 = sub_122A0C(0x20uLL);
  sub_130040(v8, (uint64_t)v5, (uint64_t)v6);
  *size_t v8 = off_251790;
  float v9 = sub_122A0C(0x18uLL);
  sub_128170(v9, (uint64_t)v8);
  *float v9 = off_24F080;
  return v9;
}

void sub_12D088( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10)
{
  if (v11) {
    free(v11);
  }
  if (a2 == 1)
  {
    __int16 v15 = __cxa_begin_catch(exception_object);
    __int128 v17 = *(_OWORD *)v15;
    uint64_t v18 = *((void *)v15 + 2);
    if (v12) {
      (*(void (**)(uint64_t))(*(void *)v12 + 152LL))(v12);
    }
    if (v10) {
      (*(void (**)(uint64_t))(*(void *)v10 + 152LL))(v10);
    }
    exception = __cxa_allocate_exception(0x18uLL);
    *(_OWORD *)exception = v17;
    exception[2] = v18;
  }

  _Unwind_Resume(exception_object);
}

float sub_12D1A8(float (****a1)(void))
{
  float v2 = (**a1[2])(a1[2]);
  return 1.0 / mathParser::tanh<float>(v2);
}

uint64_t sub_12D218(uint64_t a1, int a2)
{
  LODWORD(v2) = a2;
  uint64_t v3 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 8LL))(*(void *)(a1 + 16));
  uint64_t v4 = v3;
  if (v3) {
    BOOL v5 = (int)v2 < 1;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    uint64_t v2 = v2;
    uint64_t v6 = (float *)v3;
    do
    {
      *uint64_t v6 = 1.0 / mathParser::tanh<float>(*v6);
      ++v6;
      --v2;
    }

    while (v2);
  }

  return v4;
}

uint64_t sub_12D28C(uint64_t a1, _BYTE *a2, int a3)
{
  LODWORD(v3) = a3;
  uint64_t v5 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 16LL))(*(void *)(a1 + 16));
  uint64_t v6 = v5;
  if (v5) {
    BOOL v7 = (int)v3 < 1;
  }
  else {
    BOOL v7 = 1;
  }
  if (!v7)
  {
    uint64_t v3 = v3;
    size_t v8 = (float *)v5;
    do
    {
      if (!*a2)
      {
        float v9 = mathParser::tanh<float>(*v8);
        if (v9 == 0.0) {
          *a2 = 19;
        }
        else {
          *size_t v8 = 1.0 / v9;
        }
      }

      ++v8;
      ++a2;
      --v3;
    }

    while (v3);
  }

  return v6;
}

uint64_t sub_12D330()
{
  return 25LL;
}

void *sub_12D338(uint64_t a1)
{
  uint64_t v2 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 112LL))(*(void *)(a1 + 16));
  uint64_t v3 = sub_122A0C(0x18uLL);
  sub_128170(v3, v2);
  *uint64_t v3 = off_24F080;
  uint64_t v4 = sub_122A0C(0x18uLL);
  uint64_t v5 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 120LL))(*(void *)(a1 + 16));
  sub_128170(v4, v5);
  void *v4 = off_250670;
  uint64_t v6 = sub_122A0C(0x20uLL);
  BOOL v7 = sub_122A0C(0x18uLL);
  *BOOL v7 = off_24D3F8;
  v7[1] = 0LL;
  *((_DWORD *)v7 + 4) = 0x40000000;
  sub_130040(v6, (uint64_t)v4, (uint64_t)v7);
  *uint64_t v6 = &off_251B50;
  size_t v8 = sub_122A0C(0x20uLL);
  sub_130040(v8, (uint64_t)v3, (uint64_t)v6);
  *size_t v8 = off_251790;
  return v8;
}

void sub_12D468( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, __int128 a11, uint64_t a12)
{
  if (v13) {
    free(v13);
  }
  if (a2 == 1)
  {
    __int128 v17 = __cxa_begin_catch(exception_object);
    __int128 v19 = *(_OWORD *)v17;
    uint64_t v20 = *((void *)v17 + 2);
    if (v14) {
      (*(void (**)(uint64_t))(*(void *)v14 + 152LL))(v14);
    }
    if (v12) {
      (*(void (**)(uint64_t))(*(void *)v12 + 152LL))(v12);
    }
    exception = __cxa_allocate_exception(0x18uLL);
    *(_OWORD *)exception = v19;
    exception[2] = v20;
  }

  _Unwind_Resume(exception_object);
}

float sub_12D57C(uint64_t a1)
{
  BOOL v1 = (***(float (****)(void))(a1 + 16))(*(void *)(a1 + 16)) == 0.0;
  float result = 0.0;
  if (v1) {
    return 1.0;
  }
  return result;
}

uint64_t sub_12D5AC(uint64_t a1, int a2)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 8LL))(*(void *)(a1 + 16));
  if (result) {
    BOOL v4 = a2 < 1;
  }
  else {
    BOOL v4 = 1;
  }
  if (!v4)
  {
    uint64_t v5 = a2;
    uint64_t v6 = (float *)result;
    do
    {
      if (*v6 == 0.0) {
        float v7 = 1.0;
      }
      else {
        float v7 = 0.0;
      }
      *v6++ = v7;
      --v5;
    }

    while (v5);
  }

  return result;
}

uint64_t sub_12D60C(uint64_t a1, unsigned __int8 *a2, int a3)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 16LL))(*(void *)(a1 + 16));
  if (result) {
    BOOL v6 = a3 < 1;
  }
  else {
    BOOL v6 = 1;
  }
  if (!v6)
  {
    uint64_t v7 = a3;
    size_t v8 = (float *)result;
    do
    {
      if (!*a2++)
      {
        if (*v8 == 0.0) {
          float v10 = 1.0;
        }
        else {
          float v10 = 0.0;
        }
        *size_t v8 = v10;
      }

      ++v8;
      --v7;
    }

    while (v7);
  }

  return result;
}

uint64_t sub_12D67C()
{
  return 26LL;
}

float sub_12D684(uint64_t a1)
{
  return (float)~(uint64_t)(***(float (****)(void))(a1 + 16))(*(void *)(a1 + 16));
}

float sub_12D6B0(uint64_t a1, int a2)
{
  uint64_t v3 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 8LL))(*(void *)(a1 + 16));
  if (v3) {
    BOOL v5 = a2 < 1;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    uint64_t v6 = a2;
    uint64_t v7 = (float *)v3;
    do
    {
      float result = (float)~(uint64_t)*v7;
      *v7++ = result;
      --v6;
    }

    while (v6);
  }

  return result;
}

uint64_t sub_12D70C(uint64_t a1, unsigned __int8 *a2, int a3)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 16LL))(*(void *)(a1 + 16));
  if (result) {
    BOOL v6 = a3 < 1;
  }
  else {
    BOOL v6 = 1;
  }
  if (!v6)
  {
    uint64_t v7 = a3;
    size_t v8 = (float *)result;
    do
    {
      if (!*a2++) {
        *size_t v8 = (float)~(uint64_t)*v8;
      }
      ++v8;
      --v7;
    }

    while (v7);
  }

  return result;
}

uint64_t sub_12D778()
{
  return 27LL;
}

float sub_12D780(uint64_t a1)
{
  float v1 = (***(float (****)(void))(a1 + 16))(*(void *)(a1 + 16));
  return mathParser::ceil<float>(v1);
}

uint64_t sub_12D7A0(uint64_t a1, int a2)
{
  LODWORD(v2) = a2;
  uint64_t v3 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 8LL))(*(void *)(a1 + 16));
  uint64_t v4 = v3;
  if (v3) {
    BOOL v5 = (int)v2 < 1;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    uint64_t v2 = v2;
    BOOL v6 = (float *)v3;
    do
    {
      *BOOL v6 = mathParser::ceil<float>(*v6);
      ++v6;
      --v2;
    }

    while (v2);
  }

  return v4;
}

uint64_t sub_12D804(uint64_t a1, unsigned __int8 *a2, int a3)
{
  LODWORD(v3) = a3;
  uint64_t v5 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 16LL))(*(void *)(a1 + 16));
  uint64_t v6 = v5;
  if (v5) {
    BOOL v7 = (int)v3 < 1;
  }
  else {
    BOOL v7 = 1;
  }
  if (!v7)
  {
    uint64_t v3 = v3;
    size_t v8 = (float *)v5;
    do
    {
      if (!*a2++) {
        *size_t v8 = mathParser::ceil<float>(*v8);
      }
      ++v8;
      --v3;
    }

    while (v3);
  }

  return v6;
}

uint64_t sub_12D878()
{
  return 28LL;
}

float sub_12D880(uint64_t a1)
{
  float v1 = (***(float (****)(void))(a1 + 16))(*(void *)(a1 + 16));
  return mathParser::round<float>(v1);
}

uint64_t sub_12D8A0(uint64_t a1, int a2)
{
  LODWORD(v2) = a2;
  uint64_t v3 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 8LL))(*(void *)(a1 + 16));
  uint64_t v4 = v3;
  if (v3) {
    BOOL v5 = (int)v2 < 1;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    uint64_t v2 = v2;
    uint64_t v6 = (float *)v3;
    do
    {
      *uint64_t v6 = mathParser::round<float>(*v6);
      ++v6;
      --v2;
    }

    while (v2);
  }

  return v4;
}

uint64_t sub_12D904(uint64_t a1, unsigned __int8 *a2, int a3)
{
  LODWORD(v3) = a3;
  uint64_t v5 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 16LL))(*(void *)(a1 + 16));
  uint64_t v6 = v5;
  if (v5) {
    BOOL v7 = (int)v3 < 1;
  }
  else {
    BOOL v7 = 1;
  }
  if (!v7)
  {
    uint64_t v3 = v3;
    size_t v8 = (float *)v5;
    do
    {
      if (!*a2++) {
        *size_t v8 = mathParser::round<float>(*v8);
      }
      ++v8;
      --v3;
    }

    while (v3);
  }

  return v6;
}

uint64_t sub_12D978()
{
  return 29LL;
}

float sub_12D980(uint64_t a1)
{
  float v1 = (***(float (****)(void))(a1 + 16))(*(void *)(a1 + 16));
  return mathParser::floor<float>(v1);
}

uint64_t sub_12D9A0(uint64_t a1, int a2)
{
  LODWORD(v2) = a2;
  uint64_t v3 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 8LL))(*(void *)(a1 + 16));
  uint64_t v4 = v3;
  if (v3) {
    BOOL v5 = (int)v2 < 1;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    uint64_t v2 = v2;
    uint64_t v6 = (float *)v3;
    do
    {
      *uint64_t v6 = mathParser::floor<float>(*v6);
      ++v6;
      --v2;
    }

    while (v2);
  }

  return v4;
}

uint64_t sub_12DA04(uint64_t a1, unsigned __int8 *a2, int a3)
{
  LODWORD(v3) = a3;
  uint64_t v5 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 16LL))(*(void *)(a1 + 16));
  uint64_t v6 = v5;
  if (v5) {
    BOOL v7 = (int)v3 < 1;
  }
  else {
    BOOL v7 = 1;
  }
  if (!v7)
  {
    uint64_t v3 = v3;
    size_t v8 = (float *)v5;
    do
    {
      if (!*a2++) {
        *size_t v8 = mathParser::floor<float>(*v8);
      }
      ++v8;
      --v3;
    }

    while (v3);
  }

  return v6;
}

uint64_t sub_12DA78()
{
  return 30LL;
}

float sub_12DA80(uint64_t a1)
{
  float v2 = (***(float (****)(void))(a1 + 16))(*(void *)(a1 + 16));
  float v3 = (***(float (****)(void))(a1 + 24))(*(void *)(a1 + 24));
  return mathParser::atan2<float>(v2, v3);
}

char *sub_12DAD0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (char *)(*(uint64_t (**)(void))(**(void **)(a1 + 16) + 8LL))(*(void *)(a1 + 16));
  uint64_t v5 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 24) + 8LL))(*(void *)(a1 + 24), a2);
  uint64_t v6 = (char *)v5;
  if (v4) {
    BOOL v7 = v5 == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (!v7)
  {
    if ((int)a2 >= 1)
    {
      uint64_t v9 = 0LL;
      uint64_t v10 = 4LL * a2;
      do
      {
        *(float *)&v4[v9] = mathParser::atan2<float>(*(float *)&v4[v9], *(float *)&v6[v9]);
        v9 += 4LL;
      }

      while (v10 != v9);
    }

float *sub_12DB84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (float *)(*(uint64_t (**)(void))(**(void **)(a1 + 16) + 16LL))(*(void *)(a1 + 16));
  uint64_t v7 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 24) + 16LL))( *(void *)(a1 + 24),  a2,  a3);
  size_t v8 = (float *)v7;
  if (v6) {
    BOOL v9 = v7 == 0;
  }
  else {
    BOOL v9 = 1;
  }
  if (!v9)
  {
    if ((int)a3 >= 1)
    {
      uint64_t v11 = 0LL;
      do
      {
        if (!*(_BYTE *)(a2 + v11)) {
          v6[v11] = mathParser::atan2<float>(v6[v11], v8[v11]);
        }
        ++v11;
      }

      while (a3 != v11);
    }

uint64_t sub_12DC50()
{
  return 31LL;
}

void *sub_12DC58(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_122A0C(0x20uLL);
  uint64_t v5 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 120LL))(*(void *)(a1 + 16));
  uint64_t v6 = (*(uint64_t (**)(void))(**(void **)(a1 + 24) + 120LL))(*(void *)(a1 + 24));
  sub_130040(v4, v5, v6);
  void *v4 = off_2518D0;
  uint64_t v7 = sub_122A0C(0x20uLL);
  size_t v8 = sub_122A0C(0x18uLL);
  *size_t v8 = off_24D3F8;
  v8[1] = 0LL;
  *((_DWORD *)v8 + 4) = 0x40000000;
  sub_130040(v7, (uint64_t)v4, (uint64_t)v8);
  *uint64_t v7 = &off_251B50;
  BOOL v9 = sub_122A0C(0x20uLL);
  uint64_t v10 = sub_122A0C(0x18uLL);
  void *v10 = off_24D3F8;
  v10[1] = 0LL;
  *((_DWORD *)v10 + 4) = 1065353216;
  sub_130040(v9, (uint64_t)v10, (uint64_t)v7);
  *BOOL v9 = off_251510;
  uint64_t v11 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 16) + 112LL))(*(void *)(a1 + 16), a2);
  uint64_t v12 = sub_122A0C(0x20uLL);
  sub_130040(v12, v11, (uint64_t)v9);
  void *v12 = off_2518D0;
  return v12;
}

void sub_12DDC4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10)
{
  if (v12) {
    free(v12);
  }
  if (a2 == 1)
  {
    __int16 v15 = __cxa_begin_catch(exception_object);
    __int128 v17 = *(_OWORD *)v15;
    uint64_t v18 = *((void *)v15 + 2);
    if (v10) {
      (*(void (**)(uint64_t))(*(void *)v10 + 152LL))(v10);
    }
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 152LL))(v11);
    }
    exception = __cxa_allocate_exception(0x18uLL);
    *(_OWORD *)exception = v17;
    exception[2] = v18;
  }

  _Unwind_Resume(exception_object);
}

void *sub_12DED4(void *a1, void *a2)
{
  a1[1] = 0LL;
  a1[2] = 0LL;
  *a1 = off_257F10;
  a1[3] = 0LL;
  uint64_t v4 = a1 + 3;
  sub_127D40((uint64_t)a1, (uint64_t)a2);
  uint64_t v6 = (char *)a2[1];
  uint64_t v5 = (char *)a2[2];
  if (v6 != v5)
  {
    int v7 = 0;
    uint64_t v8 = a2[1];
    while (1)
    {
      int v9 = *v6;
      if (v9 == 40)
      {
        uint64_t v11 = 0LL;
        ++v7;
      }

      else if (v9 == 41)
      {
        int v12 = v7 - 1;
        if (v7 <= 0)
        {
          (*(void (**)(void *, uint64_t, uint64_t, uint64_t))(*a1 + 272LL))(a1, 24LL, v8 - *a2, v8 - *a2);
          uint64_t v11 = 0LL;
          uint64_t v5 = (char *)a2[2];
        }

        else
        {
          uint64_t v11 = 0LL;
        }

        int v7 = v12;
      }

      else
      {
        else {
          uint64_t v10 = v6;
        }
        if (v9 == 44) {
          uint64_t v11 = v10;
        }
        else {
          uint64_t v11 = 0LL;
        }
        if (v11)
        {
LABEL_19:
          uint64_t v6 = (char *)a2[1];
          goto LABEL_21;
        }
      }

      ++v6;
      ++v8;
      if (v6 == v5) {
        goto LABEL_19;
      }
    }
  }

  uint64_t v11 = 0LL;
  uint64_t v5 = (char *)a2[1];
LABEL_21:
  if (v11 == v6)
  {
    (*(void (**)(void *, uint64_t, char *, char *))(*a1 + 272LL))(a1, 21LL, &v6[-*a2], &v6[-*a2]);
    uint64_t v5 = (char *)a2[2];
  }

  if (v11 == v5)
  {
    (*(void (**)(void *, uint64_t, char *, char *))(*a1 + 272LL))(a1, 21LL, &v11[-*a2], &v11[-*a2]);
    uint64_t v5 = (char *)a2[2];
  }

  uint64_t v13 = v11;
  if (v11 != v5)
  {
    uint64_t v14 = v11 + 2;
    uint64_t v13 = v11;
    do
    {
      int v15 = *++v13;
      if (v15 == 44)
      {
        (*(void (**)(void *, uint64_t, char *, char *))(*a1 + 272LL))(a1, 29LL, &v14[-*a2], &v5[-*a2]);
        uint64_t v5 = (char *)a2[2];
      }

      ++v14;
    }

    while (v13 != v5);
  }

  uint64_t v16 = a2[3];
  v21[2] = v13;
  v21[3] = v16;
  __int128 v17 = *(_OWORD *)a2;
  v21[0] = *a2;
  __int128 v22 = v17;
  int v23 = v11 - 1;
  uint64_t v24 = v16;
  v21[1] = v11 + 1;
  v20[0] = 0LL;
  (*(void (**)(void *, __int128 *, uint64_t *))(*a1 + 256LL))(a1, &v22, v20);
  if (v20[0]) {
    a1[2] = v20[0];
  }
  (*(void (**)(void *, void *, void *))(*a1 + 256LL))(a1, v21, v4);
  uint64_t v18 = a1[2];
  if (v18) {
    *(void *)(v18 + _Block_object_dispose(va, 8) = a1;
  }
  if (*v4) {
    *(void *)(*v4 + 8LL) = a1;
  }
  return a1;
}

void sub_12E10C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10)
{
  if (a2 == 1)
  {
    uint64_t v13 = __cxa_begin_catch(exception_object);
    __int128 v18 = *(_OWORD *)v13;
    uint64_t v19 = *((void *)v13 + 2);
    uint64_t v14 = v10[2];
    if (v14) {
      (*(void (**)(uint64_t))(*(void *)v14 + 152LL))(v14);
    }
    v10[2] = 0LL;
    uint64_t v15 = v10[3];
    if (v15) {
      (*(void (**)(uint64_t))(*(void *)v15 + 152LL))(v15);
    }
    void *v11 = 0LL;
    exception = __cxa_allocate_exception(0x18uLL);
    *(_OWORD *)exception = v18;
    exception[2] = v19;
  }

  void *v10 = off_257DD8;
  uint64_t v17 = v10[2];
  if (v17) {
    (*(void (**)(uint64_t))(*(void *)v17 + 152LL))(v17);
  }
  v10[1] = 0LL;
  v10[2] = 0LL;
  void *v10 = off_24E938;
  _Unwind_Resume(exception_object);
}

void sub_12E1E0(void *a1)
{
  void *v1 = off_24E938;
  v1[1] = 0LL;
  sub_AA94(a1);
}

void *sub_12E1F4(void *a1, uint64_t a2, uint64_t a3)
{
  *sub_128170(a1, a2) = off_257F10;
  if (!a3)
  {
    LODWORD(xmmword_2B0AD0) = 21;
    *((void *)&xmmword_2B0AD0 + 1) = -1LL;
    qword_2B0AE0 = -1LL;
    exception = __cxa_allocate_exception(0x18uLL);
    uint64_t v7 = qword_2B0AE0;
    *(_OWORD *)exception = xmmword_2B0AD0;
    exception[2] = v7;
  }

  a1[3] = a3;
  *(void *)(a3 + _Block_object_dispose(va, 8) = a1;
  return a1;
}

void sub_12E278(_Unwind_Exception *exception_object)
{
  void *v1 = off_257DD8;
  uint64_t v3 = v1[2];
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 152LL))(v3);
  }
  v1[1] = 0LL;
  v1[2] = 0LL;
  void *v1 = off_24E938;
  _Unwind_Resume(exception_object);
}

void sub_12E2B4(void *a1)
{
  void *v1 = off_24E938;
  v1[1] = 0LL;
  sub_AA94(a1);
}

float sub_12E2C4(uint64_t a1)
{
  if (!*(void *)(a1 + 32)) {
    return 0.0;
  }
  uint64_t v2 = 0LL;
  float v3 = INFINITY;
  do
  {
    uint64_t v4 = *(float (****)(void))(*(void *)(a1 + 32) + 8 * v2);
    if (v4)
    {
      float v5 = (**v4)(v4);
      if (v5 < v3) {
        float v3 = v5;
      }
    }

    ++v2;
  }

  while (v2 < *(int *)(a1 + 24));
  return v3;
}

uint64_t sub_12E354(uint64_t a1, uint64_t a2)
{
  if (!*(void *)(a1 + 32)) {
    return 0LL;
  }
  int v4 = *(_DWORD *)(a1 + 24);
  if (v4 >= 1)
  {
    uint64_t v5 = 0LL;
    while (1)
    {
      uint64_t v6 = *(void *)(*(void *)(a1 + 32) + 8 * v5);
      if (v6)
      {
        uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v6 + 8LL))(v6, a2);
        if (v7)
        {
          LODWORD(v5) = v5 + 1;
          int v4 = *(_DWORD *)(a1 + 24);
          goto LABEL_12;
        }

        int v4 = *(_DWORD *)(a1 + 24);
      }

      if (++v5 >= v4)
      {
        uint64_t v7 = 0LL;
        goto LABEL_12;
      }
    }
  }

  uint64_t v7 = 0LL;
  LODWORD(v5) = 0;
LABEL_12:
  if ((int)v5 < v4)
  {
    uint64_t v5 = v5;
    do
    {
      uint64_t v8 = *(void *)(*(void *)(a1 + 32) + 8 * v5);
      if (v8)
      {
        int v9 = (float *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v8 + 8LL))(v8, a2);
        if (v9)
        {
          if ((int)a2 >= 1)
          {
            uint64_t v10 = a2;
            uint64_t v11 = (float *)v7;
            int v12 = v9;
            do
            {
              if (*v11 > *v12) {
                float *v11 = *v12;
              }
              ++v12;
              ++v11;
              --v10;
            }

            while (v10);
          }

          operator delete[](v9);
        }
      }

      ++v5;
    }

    while (v5 < *(int *)(a1 + 24));
  }

  return v7;
}

void sub_12E47C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10)
{
  if (a2 == 1)
  {
    uint64_t v10 = __cxa_begin_catch(exception_object);
    __int128 v12 = *(_OWORD *)v10;
    uint64_t v13 = *((void *)v10 + 2);
    exception = __cxa_allocate_exception(0x18uLL);
    *(_OWORD *)exception = v12;
    exception[2] = v13;
  }

  _Unwind_Resume(exception_object);
}

uint64_t sub_12E4F8(uint64_t a1, _BYTE *a2, uint64_t a3)
{
  if (!*(void *)(a1 + 32)) {
    return 0LL;
  }
  int v6 = *(_DWORD *)(a1 + 24);
  if (v6 >= 1)
  {
    uint64_t v7 = 0LL;
    while (1)
    {
      uint64_t v8 = *(void *)(*(void *)(a1 + 32) + 8 * v7);
      if (v8)
      {
        uint64_t v9 = (*(uint64_t (**)(uint64_t, _BYTE *, uint64_t))(*(void *)v8 + 16LL))(v8, a2, a3);
        if (v9)
        {
          LODWORD(v7) = v7 + 1;
          int v6 = *(_DWORD *)(a1 + 24);
          goto LABEL_12;
        }

        int v6 = *(_DWORD *)(a1 + 24);
      }

      if (++v7 >= v6)
      {
        uint64_t v9 = 0LL;
        goto LABEL_12;
      }
    }
  }

  uint64_t v9 = 0LL;
  LODWORD(v7) = 0;
LABEL_12:
  if ((int)v7 < v6)
  {
    uint64_t v7 = v7;
    do
    {
      uint64_t v10 = *(void *)(*(void *)(a1 + 32) + 8 * v7);
      if (v10)
      {
        uint64_t v11 = (float *)(*(uint64_t (**)(uint64_t, _BYTE *, uint64_t))(*(void *)v10 + 16LL))(v10, a2, a3);
        if (v11)
        {
          if ((int)a3 >= 1)
          {
            uint64_t v12 = a3;
            uint64_t v13 = (float *)v9;
            uint64_t v14 = v11;
            uint64_t v15 = a2;
            do
            {
              if (*v13 > *v14 && !*v15) {
                *uint64_t v13 = *v14;
              }
              ++v15;
              ++v14;
              ++v13;
              --v12;
            }

            while (v12);
          }

          operator delete[](v11);
        }
      }

      ++v7;
    }

    while (v7 < *(int *)(a1 + 24));
  }

  return v9;
}

void sub_12E63C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10)
{
  if (a2 == 1)
  {
    uint64_t v10 = __cxa_begin_catch(exception_object);
    __int128 v12 = *(_OWORD *)v10;
    uint64_t v13 = *((void *)v10 + 2);
    exception = __cxa_allocate_exception(0x18uLL);
    *(_OWORD *)exception = v12;
    exception[2] = v13;
  }

  _Unwind_Resume(exception_object);
}

uint64_t sub_12E6B8()
{
  return 32LL;
}

uint64_t sub_12E6C0(uint64_t a1)
{
  return 0LL;
}

void sub_12E6EC(uint64_t a1)
{
  uint64_t v4 = 0LL;
  uint64_t v5 = 0LL;
  do
  {
    uint64_t v6 = *(void *)(*(void *)(a1 + 32) + 8 * v4);
    uint64_t v7 = *(float (****)(void))(*(void *)(a1 + 32) + 8 * v4);
    float v8 = (**v7)(v7);
    float v9 = v8;
    if (!v5)
    {
      int v1 = v4;
      uint64_t v5 = v7;
      goto LABEL_16;
    }

    uint64_t v10 = *(void *)(a1 + 32);
    if (v8 >= v2)
    {
      uint64_t v12 = *(void *)(v10 + 8 * v4);
      if (v12)
      {
        (*(void (**)(uint64_t))(*(void *)v12 + 152LL))(v12);
        uint64_t v10 = *(void *)(a1 + 32);
      }

      *(void *)(v10 + 8 * v4) = 0LL;
LABEL_15:
      float v9 = v2;
      goto LABEL_16;
    }

    uint64_t v11 = *(void *)(v10 + 8LL * v1);
    if (v11)
    {
      (*(void (**)(uint64_t))(*(void *)v11 + 152LL))(v11);
      uint64_t v10 = *(void *)(a1 + 32);
    }

    *(void *)(v10 + 8LL * v1) = 0LL;
    uint64_t v5 = *(float (****)(void))(*(void *)(a1 + 32) + 8 * v4);
    int v1 = v4;
LABEL_16:
    ++v4;
    uint64_t v13 = *(int *)(a1 + 24);
    float v2 = v9;
  }

  while (v4 < v13);
  if ((int)v13 >= 1)
  {
    int v14 = 0;
    uint64_t v15 = *(unsigned int *)(a1 + 24);
    uint64_t v16 = *(void **)(a1 + 32);
    uint64_t v17 = v15;
    do
    {
      if (!*v16++) {
        ++v14;
      }
      --v17;
    }

    while (v17);
    if (v14)
    {
      BOOL v19 = __OFSUB__((_DWORD)v13, v14);
      int v21 = v13 - v14;
      char v20 = (v21 < 0) ^ v19;
      uint64_t v22 = 8LL * v21;
      if (v20) {
        size_t v23 = -1LL;
      }
      else {
        size_t v23 = v22;
      }
      uint64_t v24 = operator new[](v23);
      uint64_t v25 = 0LL;
      int v26 = 0;
      BOOL v27 = *(char **)(a1 + 32);
      do
      {
        uint64_t v28 = *(void *)&v27[v25];
        if (v28) {
          v24[v26++] = v28;
        }
        v25 += 8LL;
      }

      while (8 * v15 != v25);
      *(_DWORD *)(a1 + 24) = v26;
      operator delete[](v27);
      LODWORD(v13) = *(_DWORD *)(a1 + 24);
      *(void *)(a1 + 32) = v24;
    }

    if ((_DWORD)v13 == 1)
    {
      __darwin_ct_rune_t v29 = *(void **)(a1 + 32);
      if (*v29)
      {
        if (*(void *)(a1 + 8))
        {
          *__darwin_ct_rune_t v29 = 0LL;
          (*(void (**)(void, uint64_t))(**(void **)(a1 + 8) + 64LL))(*(void *)(a1 + 8), a1);
          __uint32_t v30 = *(void **)(a1 + 32);
          if (v30) {
            operator delete[](v30);
          }
          *(void *)(a1 + 32) = 0LL;
          *(void *)(a1 + _Block_object_dispose(va, 8) = 0LL;
          (*(void (**)(uint64_t))(*(void *)a1 + 152LL))(a1);
        }
      }
    }
  }

void *sub_12E8E4(void *result)
{
  if (result[4])
  {
    int v1 = result;
    if (*((int *)result + 6) >= 1)
    {
      uint64_t v2 = 0LL;
      do
      {
        uint64_t result = *(void **)(v1[4] + 8 * v2);
        if (result)
        {
          (*(void (**)(void *))(*result + 96LL))(result);
          uint64_t v3 = *(void *)(v1[4] + 8 * v2);
          uint64_t result = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v3 + 40LL))(v3);
          if ((_DWORD)result)
          {
            uint64_t v4 = *(void *)(v1[4] + 8 * v2);
            uint64_t result = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v4 + 24LL))(v4);
            if (!(_DWORD)result)
            {
              uint64_t v5 = *(float (****)(void))(v1[4] + 8 * v2);
              float v6 = (**v5)(v5);
              uint64_t v7 = v1[4];
              uint64_t v8 = *(void *)(v7 + 8 * v2);
              *(void *)(v7 + 8 * v2) = 0LL;
              uint64_t result = sub_122A0C(0x18uLL);
              float *result = off_24D3F8;
              result[1] = 0LL;
              *((float *)result + 4) = v6;
              *(void *)(v1[4] + 8 * v2) = result;
              uint64_t v9 = *(void *)(v1[4] + 8 * v2);
              if (v9) {
                *(void *)(v9 + _Block_object_dispose(va, 8) = v1;
              }
              if (v8) {
                uint64_t result = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v8 + 152LL))(v8);
              }
            }
          }
        }

        ++v2;
      }

      while (v2 < *((int *)v1 + 6));
    }
  }

  return result;
}

void sub_12EA18(_Unwind_Exception *a1)
{
}

void *sub_12EA2C(void *a1, uint64_t *a2)
{
  a1[1] = 0LL;
  a1[2] = 0LL;
  *a1 = off_258048;
  *((_DWORD *)a1 + 6) = 1;
  a1[4] = 0LL;
  sub_127D40((uint64_t)a1, (uint64_t)a2);
  uint64_t v5 = (char *)a2[1];
  uint64_t v4 = (char *)a2[2];
  if (v5 == v4)
  {
    uint64_t v4 = (char *)a2[1];
  }

  else
  {
    uint64_t v6 = 0LL;
    uint64_t v7 = (char *)a2[1];
    uint64_t v8 = v7;
    do
    {
      int v9 = *v8;
      if (v9 == 40)
      {
        uint64_t v11 = (v6 + 1);
      }

      else if (v9 == 41)
      {
        uint64_t v11 = (v6 - 1);
        if ((int)v6 <= 0)
        {
          (*(void (**)(void *, uint64_t, char *, char *))(*a1 + 272LL))(a1, 24LL, &v7[-*a2], &v7[-*a2]);
          uint64_t v4 = (char *)a2[2];
        }
      }

      else if (v9 == 44 && (_DWORD)v6 == 0)
      {
        uint64_t v11 = 0LL;
        ++*((_DWORD *)a1 + 6);
      }

      else
      {
        uint64_t v11 = v6;
      }

      ++v8;
      ++v7;
      uint64_t v6 = v11;
    }

    while (v8 != v4);
  }

  uint64_t v12 = *((int *)a1 + 6);
  else {
    size_t v13 = 8 * v12;
  }
  int v14 = v5 - 1;
  a1[4] = operator new[](v13);
  if ((int)v12 >= 1)
  {
    uint64_t v15 = 0LL;
    do
    {
      *(void *)(a1[4] + v15) = 0LL;
      v15 += 8LL;
    }

    while (8LL * v12 != v15);
    uint64_t v4 = (char *)a2[2];
  }

  uint64_t v16 = (char *)a2[1];
  uint64_t v17 = a2[3];
  uint64_t v26 = *a2;
  uint64_t v29 = v17;
  if (v16 == v4)
  {
    int v18 = 0;
  }

  else
  {
    int v18 = 0;
    uint64_t v19 = 0LL;
    uint64_t v4 = v16;
    do
    {
      int v20 = *v4;
      if (v20 == 40)
      {
        uint64_t v22 = (v19 + 1);
      }

      else if (v20 == 41)
      {
        uint64_t v22 = (v19 - 1);
      }

      else if (v20 == 44 && (_DWORD)v19 == 0)
      {
        BOOL v27 = v14 + 1;
        uint64_t v28 = v4 - 1;
        if (v4 - 1 < v14 + 1) {
          (*(void (**)(void *, uint64_t, char *, char *))(*a1 + 272LL))(a1, 21LL, &v14[-*a2], &v16[-*a2]);
        }
        (*(void (**)(void *, uint64_t *, uint64_t))(*a1 + 256LL))(a1, &v26, a1[4] + 8LL * v18);
        uint64_t v23 = *(void *)(a1[4] + 8LL * v18);
        if (v23) {
          *(void *)(v23 + _Block_object_dispose(va, 8) = a1;
        }
        uint64_t v22 = 0LL;
        ++v18;
        int v14 = v4;
      }

      else
      {
        uint64_t v22 = v19;
      }

      ++v4;
      ++v16;
      uint64_t v19 = v22;
    }

    while (v4 != (char *)a2[2]);
  }

  BOOL v27 = v14 + 1;
  uint64_t v28 = v4;
  if (v4 < v14 + 1) {
    (*(void (**)(void *, uint64_t, char *, char *))(*a1 + 272LL))(a1, 21LL, &v14[-*a2], &v4[-*a2]);
  }
  (*(void (**)(void *, uint64_t *, uint64_t))(*a1 + 256LL))(a1, &v26, a1[4] + 8LL * v18);
  uint64_t v24 = *(void *)(a1[4] + 8LL * v18);
  if (v24) {
    *(void *)(v24 + _Block_object_dispose(va, 8) = a1;
  }
  return a1;
}

void sub_12ECF4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10)
{
  void *v10 = off_257DD8;
  uint64_t v12 = v10[2];
  if (v12) {
    (*(void (**)(uint64_t))(*(void *)v12 + 152LL))(v12);
  }
  v10[1] = 0LL;
  v10[2] = 0LL;
  void *v10 = off_24E938;
  _Unwind_Resume(exception_object);
}

void sub_12EDE8(void *a1)
{
  void *v1 = off_24E938;
  v1[1] = 0LL;
  sub_AA94(a1);
}

uint64_t sub_12EDFC(uint64_t a1, int a2, void *a3)
{
  uint64_t v3 = a3;
  *(void *)(a1 + _Block_object_dispose(va, 8) = 0LL;
  *(void *)(a1 + 16) = 0LL;
  *(void *)a1 = off_258048;
  *(_DWORD *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0LL;
  uint64_t v6 = a2;
  if (a2 < 1)
  {
    size_t v10 = 0LL;
  }

  else
  {
    int v7 = 0;
    uint64_t v8 = a2;
    int v9 = a3;
    do
    {
      if (*v9) {
        *(_DWORD *)(a1 + 24) = ++v7;
      }
      ++v9;
      --v8;
    }

    while (v8);
    if (v7 < 0) {
      size_t v10 = -1LL;
    }
    else {
      size_t v10 = 8LL * v7;
    }
  }

  *(void *)(a1 + 32) = operator new[](v10);
  *(_DWORD *)(a1 + 24) = 0;
  if (a2 >= 1)
  {
    int v11 = 0;
    do
    {
      if (*v3)
      {
        *(void *)(*(void *)(a1 + 32) + 8LL * v11++) = *v3;
        *(_DWORD *)(a1 + 24) = v11;
      }

      ++v3;
      --v6;
    }

    while (v6);
  }

  return a1;
}

void sub_12EEC8(_Unwind_Exception *a1)
{
  v1[1] = 0LL;
  v1[2] = 0LL;
  void *v1 = off_24E938;
  _Unwind_Resume(a1);
}

float sub_12EEDC(uint64_t a1)
{
  if (!*(void *)(a1 + 32)) {
    return 0.0;
  }
  uint64_t v2 = 0LL;
  float v3 = -INFINITY;
  do
  {
    uint64_t v4 = *(float (****)(void))(*(void *)(a1 + 32) + 8 * v2);
    if (v4)
    {
      float v5 = (**v4)(v4);
      if (v5 > v3) {
        float v3 = v5;
      }
    }

    ++v2;
  }

  while (v2 < *(int *)(a1 + 24));
  return v3;
}

uint64_t sub_12EF6C(uint64_t a1, uint64_t a2)
{
  if (!*(void *)(a1 + 32)) {
    return 0LL;
  }
  int v4 = *(_DWORD *)(a1 + 24);
  if (v4 >= 1)
  {
    uint64_t v5 = 0LL;
    while (1)
    {
      uint64_t v6 = *(void *)(*(void *)(a1 + 32) + 8 * v5);
      if (v6)
      {
        uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v6 + 8LL))(v6, a2);
        if (v7)
        {
          LODWORD(v5) = v5 + 1;
          int v4 = *(_DWORD *)(a1 + 24);
          goto LABEL_12;
        }

        int v4 = *(_DWORD *)(a1 + 24);
      }

      if (++v5 >= v4)
      {
        uint64_t v7 = 0LL;
        goto LABEL_12;
      }
    }
  }

  uint64_t v7 = 0LL;
  LODWORD(v5) = 0;
LABEL_12:
  if ((int)v5 < v4)
  {
    uint64_t v5 = v5;
    do
    {
      uint64_t v8 = *(void *)(*(void *)(a1 + 32) + 8 * v5);
      if (v8)
      {
        int v9 = (float *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v8 + 8LL))(v8, a2);
        if (v9)
        {
          if ((int)a2 >= 1)
          {
            uint64_t v10 = a2;
            int v11 = (float *)v7;
            uint64_t v12 = v9;
            do
            {
              if (*v11 < *v12) {
                float *v11 = *v12;
              }
              ++v12;
              ++v11;
              --v10;
            }

            while (v10);
          }

          operator delete[](v9);
        }
      }

      ++v5;
    }

    while (v5 < *(int *)(a1 + 24));
  }

  return v7;
}

void sub_12F094( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10)
{
  if (a2 == 1)
  {
    uint64_t v10 = __cxa_begin_catch(exception_object);
    __int128 v12 = *(_OWORD *)v10;
    uint64_t v13 = *((void *)v10 + 2);
    exception = __cxa_allocate_exception(0x18uLL);
    *(_OWORD *)exception = v12;
    exception[2] = v13;
  }

  _Unwind_Resume(exception_object);
}

uint64_t sub_12F110(uint64_t a1, _BYTE *a2, uint64_t a3)
{
  if (!*(void *)(a1 + 32)) {
    return 0LL;
  }
  int v6 = *(_DWORD *)(a1 + 24);
  if (v6 >= 1)
  {
    uint64_t v7 = 0LL;
    while (1)
    {
      uint64_t v8 = *(void *)(*(void *)(a1 + 32) + 8 * v7);
      if (v8)
      {
        uint64_t v9 = (*(uint64_t (**)(uint64_t, _BYTE *, uint64_t))(*(void *)v8 + 16LL))(v8, a2, a3);
        if (v9)
        {
          LODWORD(v7) = v7 + 1;
          int v6 = *(_DWORD *)(a1 + 24);
          goto LABEL_12;
        }

        int v6 = *(_DWORD *)(a1 + 24);
      }

      if (++v7 >= v6)
      {
        uint64_t v9 = 0LL;
        goto LABEL_12;
      }
    }
  }

  uint64_t v9 = 0LL;
  LODWORD(v7) = 0;
LABEL_12:
  if ((int)v7 < v6)
  {
    uint64_t v7 = v7;
    do
    {
      uint64_t v10 = *(void *)(*(void *)(a1 + 32) + 8 * v7);
      if (v10)
      {
        int v11 = (float *)(*(uint64_t (**)(uint64_t, _BYTE *, uint64_t))(*(void *)v10 + 16LL))(v10, a2, a3);
        if (v11)
        {
          if ((int)a3 >= 1)
          {
            uint64_t v12 = a3;
            uint64_t v13 = (float *)v9;
            int v14 = v11;
            uint64_t v15 = a2;
            do
            {
              if (*v13 < *v14 && !*v15) {
                *uint64_t v13 = *v14;
              }
              ++v15;
              ++v14;
              ++v13;
              --v12;
            }

            while (v12);
          }

          operator delete[](v11);
        }
      }

      ++v7;
    }

    while (v7 < *(int *)(a1 + 24));
  }

  return v9;
}

void sub_12F254( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10)
{
  if (a2 == 1)
  {
    uint64_t v10 = __cxa_begin_catch(exception_object);
    __int128 v12 = *(_OWORD *)v10;
    uint64_t v13 = *((void *)v10 + 2);
    exception = __cxa_allocate_exception(0x18uLL);
    *(_OWORD *)exception = v12;
    exception[2] = v13;
  }

  _Unwind_Resume(exception_object);
}

uint64_t sub_12F2D0()
{
  return 33LL;
}

uint64_t sub_12F2D8(uint64_t a1)
{
  return 0LL;
}

void sub_12F304(uint64_t a1)
{
  if (!*(void *)(a1 + 32)) {
    return;
  }
  if (*(int *)(a1 + 24) < 1)
  {
LABEL_28:
    *(_DWORD *)(a1 + 24) = 0;
    return;
  }

  uint64_t v4 = 0LL;
  uint64_t v5 = 0LL;
  do
  {
    uint64_t v6 = *(void *)(*(void *)(a1 + 32) + 8 * v4);
    uint64_t v7 = *(float (****)(void))(*(void *)(a1 + 32) + 8 * v4);
    float v8 = (**v7)(v7);
    float v9 = v8;
    if (!v5)
    {
      int v1 = v4;
      uint64_t v5 = v7;
      goto LABEL_16;
    }

    uint64_t v10 = *(void *)(a1 + 32);
    if (v8 <= v2)
    {
      uint64_t v12 = *(void *)(v10 + 8 * v4);
      if (v12)
      {
        (*(void (**)(uint64_t))(*(void *)v12 + 152LL))(v12);
        uint64_t v10 = *(void *)(a1 + 32);
      }

      *(void *)(v10 + 8 * v4) = 0LL;
LABEL_15:
      float v9 = v2;
      goto LABEL_16;
    }

    uint64_t v11 = *(void *)(v10 + 8LL * v1);
    if (v11)
    {
      (*(void (**)(uint64_t))(*(void *)v11 + 152LL))(v11);
      uint64_t v10 = *(void *)(a1 + 32);
    }

    *(void *)(v10 + 8LL * v1) = 0LL;
    uint64_t v5 = *(float (****)(void))(*(void *)(a1 + 32) + 8 * v4);
    int v1 = v4;
LABEL_16:
    ++v4;
    uint64_t v13 = *(int *)(a1 + 24);
    float v2 = v9;
  }

  while (v4 < v13);
  uint64_t v14 = 0LL;
  int v15 = 0;
  uint64_t v16 = 8LL * *(unsigned int *)(a1 + 24);
  do
  {
    uint64_t v17 = *(void *)(a1 + 32);
    uint64_t v18 = *(void *)(v17 + v14);
    if (v18) {
      *(void *)(v17 + 8LL * v15++) = v18;
    }
    v14 += 8LL;
  }

  while (v16 != v14);
  *(_DWORD *)(a1 + 24) = v15;
  if (v15 == 1)
  {
    uint64_t v19 = *(void **)(a1 + 32);
    if (*v19)
    {
      if (*(void *)(a1 + 8))
      {
        *uint64_t v19 = 0LL;
        (*(void (**)(void, uint64_t))(**(void **)(a1 + 8) + 64LL))(*(void *)(a1 + 8), a1);
        int v20 = *(void **)(a1 + 32);
        if (v20) {
          operator delete[](v20);
        }
        *(void *)(a1 + 32) = 0LL;
        *(void *)(a1 + _Block_object_dispose(va, 8) = 0LL;
        (*(void (**)(uint64_t))(*(void *)a1 + 152LL))(a1);
      }
    }
  }

void sub_12F4BC(uint64_t a1)
{
  int v1 = *(void **)(a1 + 32);
  if (v1)
  {
    (**(void (***)(void))*v1)(*v1);
    (***(void (****)(void))(*(void *)(a1 + 32) + 8LL))(*(void *)(*(void *)(a1 + 32) + 8LL));
    (***(void (****)(void))(*(void *)(a1 + 32) + 16LL))(*(void *)(*(void *)(a1 + 32) + 16LL));
    (***(void (****)(void))(*(void *)(a1 + 32) + 24LL))(*(void *)(*(void *)(a1 + 32) + 24LL));
    (***(void (****)(void))(*(void *)(a1 + 32) + 32LL))(*(void *)(*(void *)(a1 + 32) + 32LL));
    (***(float (****)(void))(*(void *)(a1 + 32) + 40LL))(*(void *)(*(void *)(a1 + 32) + 40LL));
  }

uint64_t sub_12F5A4()
{
  return 34LL;
}

void *sub_12F5AC(uint64_t a1, int a2, void *a3)
{
  uint64_t result = (void *)sub_12EDFC(a1, a2, a3);
  void *result = off_2512A0;
  return result;
}

void sub_12F5CC(uint64_t a1)
{
  int v1 = *(void **)(a1 + 32);
  if (v1)
  {
    (**(void (***)(void))*v1)(*v1);
    (***(void (****)(void))(*(void *)(a1 + 32) + 8LL))(*(void *)(*(void *)(a1 + 32) + 8LL));
    (***(void (****)(void))(*(void *)(a1 + 32) + 16LL))(*(void *)(*(void *)(a1 + 32) + 16LL));
    (***(float (****)(void))(*(void *)(a1 + 32) + 24LL))(*(void *)(*(void *)(a1 + 32) + 24LL));
  }

uint64_t sub_12F6BC()
{
  return 35LL;
}

void *sub_12F6C4(uint64_t a1, int a2, void *a3)
{
  uint64_t result = (void *)sub_12EDFC(a1, a2, a3);
  void *result = off_2513D8;
  return result;
}

float sub_12F6E4(uint64_t a1)
{
  float v2 = (***(float (****)(void))(a1 + 16))(*(void *)(a1 + 16));
  return v2 + (***(float (****)(void))(a1 + 24))(*(void *)(a1 + 24));
}

uint64_t sub_12F730(uint64_t a1, uint64_t a2)
{
  int v4 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 24LL))(*(void *)(a1 + 16));
  uint64_t v5 = **(void **)(a1 + 24);
  if (v4)
  {
    uint64_t v6 = (*(uint64_t (**)(void))(v5 + 8))();
    if (v6)
    {
      (***(void (****)(void))(a1 + 16))(*(void *)(a1 + 16));
      if ((int)a2 >= 1)
      {
        uint64_t v8 = 0LL;
        do
        {
          *(float *)(v6 + v_Block_object_dispose(va, 8) = v7 + *(float *)(v6 + v8);
          v8 += 4LL;
        }

        while (4LL * a2 != v8);
      }
    }

    return v6;
  }

  if ((*(unsigned int (**)(void))(v5 + 24))())
  {
    uint64_t v6 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 16) + 8LL))(*(void *)(a1 + 16), a2);
    if (v6)
    {
      (***(void (****)(void))(a1 + 24))(*(void *)(a1 + 24));
      if ((int)a2 >= 1)
      {
        uint64_t v10 = 0LL;
        do
        {
          *(float *)(v6 + v10) = v9 + *(float *)(v6 + v10);
          v10 += 4LL;
        }

        while (4LL * a2 != v10);
      }
    }

    return v6;
  }

  uint64_t v11 = (char *)(*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 24) + 8LL))(*(void *)(a1 + 24), a2);
  uint64_t v12 = (char *)(*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 16) + 8LL))(*(void *)(a1 + 16), a2);
  uint64_t v13 = v12;
  if (v12) {
    BOOL v14 = v11 == 0LL;
  }
  else {
    BOOL v14 = 1;
  }
  if (!v14)
  {
    if ((int)a2 >= 1)
    {
      uint64_t v15 = 0LL;
      do
      {
        *(float *)&v12[v15] = *(float *)&v11[v15] + *(float *)&v12[v15];
        v15 += 4LL;
      }

      while (4LL * a2 != v15);
    }

uint64_t sub_12F8C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 24LL))(*(void *)(a1 + 16));
  uint64_t v7 = **(void **)(a1 + 24);
  if (v6)
  {
    uint64_t v8 = (*(uint64_t (**)(void))(v7 + 16))();
    if (v8)
    {
      (***(void (****)(void))(a1 + 16))(*(void *)(a1 + 16));
      if ((int)a3 >= 1)
      {
        uint64_t v10 = 0LL;
        do
        {
          if (!*(_BYTE *)(a2 + v10)) {
            *(float *)(v8 + 4 * v10) = v9 + *(float *)(v8 + 4 * v10);
          }
          ++v10;
        }

        while (a3 != v10);
      }
    }

    return v8;
  }

  if ((*(unsigned int (**)(void))(v7 + 24))())
  {
    uint64_t v8 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 16) + 16LL))( *(void *)(a1 + 16),  a2,  a3);
    if (v8)
    {
      (***(void (****)(void))(a1 + 24))(*(void *)(a1 + 24));
      if ((int)a3 >= 1)
      {
        uint64_t v12 = 0LL;
        do
        {
          if (!*(_BYTE *)(a2 + v12)) {
            *(float *)(v8 + 4 * v12) = v11 + *(float *)(v8 + 4 * v12);
          }
          ++v12;
        }

        while (a3 != v12);
      }
    }

    return v8;
  }

  uint64_t v13 = (float *)(*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 24) + 16LL))( *(void *)(a1 + 24),  a2,  a3);
  BOOL v14 = (float *)(*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 16) + 16LL))( *(void *)(a1 + 16),  a2,  a3);
  uint64_t v15 = v14;
  if (v14) {
    BOOL v16 = v13 == 0LL;
  }
  else {
    BOOL v16 = 1;
  }
  if (!v16)
  {
    if ((int)a3 >= 1)
    {
      uint64_t v17 = 0LL;
      do
      {
        if (!*(_BYTE *)(a2 + v17)) {
          v14[v17] = v13[v17] + v14[v17];
        }
        ++v17;
      }

      while (a3 != v17);
    }

uint64_t sub_12FA84()
{
  return 3LL;
}

void *sub_12FA8C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 112LL))(*(void *)(a1 + 16));
  uint64_t v5 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 24) + 112LL))(*(void *)(a1 + 24), a2);
  int v6 = sub_122A0C(0x20uLL);
  sub_130040(v6, v4, v5);
  *int v6 = off_251510;
  return v6;
}

void sub_12FB28(_Unwind_Exception *exception_object, int a2)
{
  int v6 = v4;
  if (v6) {
    free(v6);
  }
  if (a2 == 1)
  {
    __cxa_begin_catch(exception_object);
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 152LL))(v2);
    }
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 152LL))(v3);
    }
    __cxa_end_catch();
    JUMPOUT(0x12FB10LL);
  }

  _Unwind_Resume(exception_object);
}

uint64_t sub_12FBAC(uint64_t a1)
{
  if ((*(unsigned int (**)(void))(**(void **)(a1 + 16) + 40LL))(*(void *)(a1 + 16))
    && (***(float (****)(void))(a1 + 16))(*(void *)(a1 + 16)) == 0.0
    && *(void *)(a1 + 8))
  {
    uint64_t v2 = *(void *)(a1 + 24);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 296LL))(a1, v2);
  }

  if ((*(unsigned int (**)(void))(**(void **)(a1 + 24) + 40LL))(*(void *)(a1 + 24))
    && (***(float (****)(void))(a1 + 24))(*(void *)(a1 + 24)) == 0.0
    && *(void *)(a1 + 8))
  {
    uint64_t v2 = *(void *)(a1 + 16);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 296LL))(a1, v2);
  }

  uint64_t result = (*(uint64_t (**)(void, void))(**(void **)(a1 + 16) + 136LL))( *(void *)(a1 + 16),  *(void *)(a1 + 24));
  if ((_DWORD)result)
  {
    uint64_t v4 = sub_122A0C(0x18uLL);
    void *v4 = off_24D3F8;
    v4[1] = 0LL;
    *((_DWORD *)v4 + 4) = 0x40000000;
    uint64_t v5 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 120LL))(*(void *)(a1 + 16));
    int v6 = sub_122A0C(0x20uLL);
    sub_130040(v6, (uint64_t)v4, v5);
    *int v6 = off_251790;
    return (*(uint64_t (**)(uint64_t, void *))(*(void *)a1 + 296LL))(a1, v6);
  }

  return result;
}

void sub_12FCF8( void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  if (v18) {
    free(v18);
  }
  __cxa_begin_catch(a1);
  (*(void (**)(uint64_t))(*(void *)v16 + 152LL))(v16);
  if (v17) {
    (*(void (**)(uint64_t))(*(void *)v17 + 152LL))(v17);
  }
  __cxa_end_catch();
}

void sub_12FD5C(_Unwind_Exception *a1)
{
}

float *sub_12FD70(uint64_t a1)
{
  if ((*(unsigned int (**)(void))(**(void **)(a1 + 16) + 40LL))(*(void *)(a1 + 16))
    && !(*(unsigned int (**)(void))(**(void **)(a1 + 16) + 24LL))(*(void *)(a1 + 16)))
  {
    float v2 = (***(float (****)(void))(a1 + 16))(*(void *)(a1 + 16));
    uint64_t v3 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = 0LL;
    uint64_t v4 = (float *)sub_122A0C(0x18uLL);
    *(void *)uint64_t v4 = off_24D3F8;
    *((void *)v4 + 1) = 0LL;
    v4[4] = v2;
    *(void *)(a1 + 16) = v4;
    if (v3)
    {
      (*(void (**)(uint64_t))(*(void *)v3 + 152LL))(v3);
      uint64_t v4 = *(float **)(a1 + 16);
    }

    *((void *)v4 + 1) = a1;
  }

  (*(void (**)(void))(**(void **)(a1 + 24) + 96LL))(*(void *)(a1 + 24));
  uint64_t result = (float *)(*(uint64_t (**)(void))(**(void **)(a1 + 24) + 40LL))(*(void *)(a1 + 24));
  if ((_DWORD)result)
  {
    uint64_t result = (float *)(*(uint64_t (**)(void))(**(void **)(a1 + 24) + 24LL))(*(void *)(a1 + 24));
    if (!(_DWORD)result)
    {
      float v6 = (***(float (****)(void))(a1 + 24))(*(void *)(a1 + 24));
      uint64_t v7 = *(void *)(a1 + 24);
      *(void *)(a1 + 24) = 0LL;
      uint64_t result = (float *)sub_122A0C(0x18uLL);
      *(void *)uint64_t result = off_24D3F8;
      *((void *)result + 1) = 0LL;
      result[4] = v6;
      *(void *)(a1 + 24) = result;
      if (v7)
      {
        (*(void (**)(uint64_t))(*(void *)v7 + 152LL))(v7);
        uint64_t result = *(float **)(a1 + 24);
      }

      *((void *)result + 1) = a1;
    }
  }

  return result;
}

void sub_12FEAC(void *a1)
{
  uint64_t v3 = *(void *)(v1 + 24);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 152LL))(v3);
  }
  *(void *)(v1 + 24) = v2;
  __cxa_end_catch();
}

void sub_12FED8(_Unwind_Exception *a1)
{
}

uint64_t *sub_12FF1C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  a1[2] = 0LL;
  uint64_t v5 = a1 + 2;
  *a1 = (uint64_t)off_258680;
  a1[1] = 0LL;
  a1[3] = 0LL;
  float v6 = a1 + 3;
  sub_127B08(a1, a2, (uint64_t)(a1 + 2));
  (*(void (**)(uint64_t *, uint64_t, uint64_t *))(*a1 + 256))(a1, a3, v6);
  if (*v5) {
    *(void *)(*v5 + _Block_object_dispose(va, 8) = a1;
  }
  if (*v6) {
    *(void *)(*v6 + _Block_object_dispose(va, 8) = a1;
  }
  return a1;
}

void *sub_130040(void *result, uint64_t a2, uint64_t a3)
{
  float *result = off_258680;
  result[1] = 0LL;
  if (!a2 || !a3)
  {
    LODWORD(xmmword_2B0AD0) = 21;
    *((void *)&xmmword_2B0AD0 + 1) = -1LL;
    qword_2B0AE0 = -1LL;
    exception = __cxa_allocate_exception(0x18uLL);
    uint64_t v4 = qword_2B0AE0;
    *(_OWORD *)exception = xmmword_2B0AD0;
    exception[2] = v4;
  }

  result[2] = a2;
  result[3] = a3;
  *(void *)(a2 + _Block_object_dispose(va, 8) = result;
  *(void *)(a3 + _Block_object_dispose(va, 8) = result;
  return result;
}

void sub_1300C8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  *a10 = off_24E938;
  a10[1] = 0LL;
  _Unwind_Resume(a1);
}

float sub_1300DC(uint64_t a1)
{
  float v2 = (***(float (****)(void))(a1 + 16))(*(void *)(a1 + 16));
  return v2 - (***(float (****)(void))(a1 + 24))(*(void *)(a1 + 24));
}

uint64_t sub_130128(uint64_t a1, uint64_t a2)
{
  int v4 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 24LL))(*(void *)(a1 + 16));
  uint64_t v5 = **(void **)(a1 + 24);
  if (v4)
  {
    uint64_t v6 = (*(uint64_t (**)(void))(v5 + 8))();
    if (v6)
    {
      (***(void (****)(void))(a1 + 16))(*(void *)(a1 + 16));
      if ((int)a2 >= 1)
      {
        uint64_t v8 = 0LL;
        do
        {
          *(float *)(v6 + v_Block_object_dispose(va, 8) = v7 - *(float *)(v6 + v8);
          v8 += 4LL;
        }

        while (4LL * a2 != v8);
      }
    }

    return v6;
  }

  if ((*(unsigned int (**)(void))(v5 + 24))())
  {
    uint64_t v6 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 16) + 8LL))(*(void *)(a1 + 16), a2);
    if (v6)
    {
      (***(void (****)(void))(a1 + 24))(*(void *)(a1 + 24));
      if ((int)a2 >= 1)
      {
        uint64_t v10 = 0LL;
        do
        {
          *(float *)(v6 + v10) = *(float *)(v6 + v10) - v9;
          v10 += 4LL;
        }

        while (4LL * a2 != v10);
      }
    }

    return v6;
  }

  float v11 = (char *)(*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 24) + 8LL))(*(void *)(a1 + 24), a2);
  uint64_t v12 = (char *)(*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 16) + 8LL))(*(void *)(a1 + 16), a2);
  uint64_t v13 = v12;
  if (v12) {
    BOOL v14 = v11 == 0LL;
  }
  else {
    BOOL v14 = 1;
  }
  if (!v14)
  {
    if ((int)a2 >= 1)
    {
      uint64_t v15 = 0LL;
      do
      {
        *(float *)&v12[v15] = *(float *)&v12[v15] - *(float *)&v11[v15];
        v15 += 4LL;
      }

      while (4LL * a2 != v15);
    }

uint64_t sub_1302B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 24LL))(*(void *)(a1 + 16));
  uint64_t v7 = **(void **)(a1 + 24);
  if (v6)
  {
    uint64_t v8 = (*(uint64_t (**)(void))(v7 + 16))();
    if (v8)
    {
      (***(void (****)(void))(a1 + 16))(*(void *)(a1 + 16));
      if ((int)a3 >= 1)
      {
        uint64_t v10 = 0LL;
        do
        {
          if (!*(_BYTE *)(a2 + v10)) {
            *(float *)(v8 + 4 * v10) = v9 - *(float *)(v8 + 4 * v10);
          }
          ++v10;
        }

        while (a3 != v10);
      }
    }

    return v8;
  }

  if ((*(unsigned int (**)(void))(v7 + 24))())
  {
    uint64_t v8 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 16) + 16LL))( *(void *)(a1 + 16),  a2,  a3);
    if (v8)
    {
      (***(void (****)(void))(a1 + 24))(*(void *)(a1 + 24));
      if ((int)a3 >= 1)
      {
        uint64_t v12 = 0LL;
        do
        {
          if (!*(_BYTE *)(a2 + v12)) {
            *(float *)(v8 + 4 * v12) = *(float *)(v8 + 4 * v12) - v11;
          }
          ++v12;
        }

        while (a3 != v12);
      }
    }

    return v8;
  }

  uint64_t v13 = (float *)(*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 24) + 16LL))( *(void *)(a1 + 24),  a2,  a3);
  BOOL v14 = (float *)(*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 16) + 16LL))( *(void *)(a1 + 16),  a2,  a3);
  uint64_t v15 = v14;
  if (v14) {
    BOOL v16 = v13 == 0LL;
  }
  else {
    BOOL v16 = 1;
  }
  if (!v16)
  {
    if ((int)a3 >= 1)
    {
      uint64_t v17 = 0LL;
      do
      {
        if (!*(_BYTE *)(a2 + v17)) {
          v14[v17] = v14[v17] - v13[v17];
        }
        ++v17;
      }

      while (a3 != v17);
    }

uint64_t sub_13047C()
{
  return 4LL;
}

void *sub_130484(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 112LL))(*(void *)(a1 + 16));
  uint64_t v5 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 24) + 112LL))(*(void *)(a1 + 24), a2);
  int v6 = sub_122A0C(0x20uLL);
  sub_130040(v6, v4, v5);
  *int v6 = off_251650;
  return v6;
}

void sub_130520(_Unwind_Exception *exception_object, int a2)
{
  int v6 = v4;
  if (v6) {
    free(v6);
  }
  if (a2 == 1)
  {
    __cxa_begin_catch(exception_object);
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 152LL))(v2);
    }
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 152LL))(v3);
    }
    __cxa_end_catch();
    JUMPOUT(0x130508LL);
  }

  _Unwind_Resume(exception_object);
}

uint64_t sub_1305A4(void *a1)
{
  if ((*(unsigned int (**)(void))(*(void *)a1[2] + 40LL))(a1[2])
    && (**(float (***)(void))a1[2])(a1[2]) == 0.0
    && a1[1])
  {
    uint64_t v2 = a1[3];
    a1[3] = 0LL;
    uint64_t v3 = sub_122A0C(0x18uLL);
    sub_128170(v3, v2);
    *uint64_t v3 = off_24F080;
    return (*(uint64_t (**)(void *, void *))(*a1 + 296LL))(a1, v3);
  }

  else if ((*(unsigned int (**)(void))(*(void *)a1[3] + 40LL))(a1[3]) {
         && (**(float (***)(void))a1[3])(a1[3]) == 0.0
  }
         && a1[1])
  {
    return (*(uint64_t (**)(void *, void))(*a1 + 296LL))(a1, a1[2]);
  }

  else
  {
    uint64_t result = (*(uint64_t (**)(void, void))(*(void *)a1[3] + 136LL))(a1[3], a1[2]);
    if ((_DWORD)result)
    {
      uint64_t v5 = sub_122A0C(0x18uLL);
      void *v5 = off_24D3F8;
      v5[1] = 0LL;
      *((_DWORD *)v5 + 4) = 0;
      return (*(uint64_t (**)(void *))(*a1 + 296LL))(a1);
    }
  }

  return result;
}

void sub_1306D4( void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (v16) {
    free(v16);
  }
  __cxa_begin_catch(a1);
  *(void *)(v14 + 24) = v15;
  if (v15) {
    *(void *)(v15 + _Block_object_dispose(va, 8) = v14;
  }
  __cxa_end_catch();
}

float sub_130718(uint64_t a1)
{
  float v2 = (***(float (****)(void))(a1 + 16))(*(void *)(a1 + 16));
  return v2 * (***(float (****)(void))(a1 + 24))(*(void *)(a1 + 24));
}

uint64_t sub_130764(uint64_t a1, uint64_t a2)
{
  int v4 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 24LL))(*(void *)(a1 + 16));
  uint64_t v5 = **(void **)(a1 + 24);
  if (v4)
  {
    uint64_t v6 = (*(uint64_t (**)(void))(v5 + 8))();
    if (v6)
    {
      (***(void (****)(void))(a1 + 16))(*(void *)(a1 + 16));
      if ((int)a2 >= 1)
      {
        uint64_t v8 = 0LL;
        do
        {
          *(float *)(v6 + v_Block_object_dispose(va, 8) = v7 * *(float *)(v6 + v8);
          v8 += 4LL;
        }

        while (4LL * a2 != v8);
      }
    }

    return v6;
  }

  if ((*(unsigned int (**)(void))(v5 + 24))())
  {
    uint64_t v6 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 16) + 8LL))(*(void *)(a1 + 16), a2);
    if (v6)
    {
      (***(void (****)(void))(a1 + 24))(*(void *)(a1 + 24));
      if ((int)a2 >= 1)
      {
        uint64_t v10 = 0LL;
        do
        {
          *(float *)(v6 + v10) = v9 * *(float *)(v6 + v10);
          v10 += 4LL;
        }

        while (4LL * a2 != v10);
      }
    }

    return v6;
  }

  float v11 = (char *)(*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 24) + 8LL))(*(void *)(a1 + 24), a2);
  uint64_t v12 = (char *)(*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 16) + 8LL))(*(void *)(a1 + 16), a2);
  uint64_t v13 = v12;
  if (v12) {
    BOOL v14 = v11 == 0LL;
  }
  else {
    BOOL v14 = 1;
  }
  if (!v14)
  {
    if ((int)a2 >= 1)
    {
      uint64_t v15 = 0LL;
      do
      {
        *(float *)&v12[v15] = *(float *)&v11[v15] * *(float *)&v12[v15];
        v15 += 4LL;
      }

      while (4LL * a2 != v15);
    }

uint64_t sub_1308F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 24LL))(*(void *)(a1 + 16));
  uint64_t v7 = **(void **)(a1 + 24);
  if (v6)
  {
    uint64_t v8 = (*(uint64_t (**)(void))(v7 + 16))();
    if (v8)
    {
      (***(void (****)(void))(a1 + 16))(*(void *)(a1 + 16));
      if ((int)a3 >= 1)
      {
        uint64_t v10 = 0LL;
        do
        {
          if (!*(_BYTE *)(a2 + v10)) {
            *(float *)(v8 + 4 * v10) = v9 * *(float *)(v8 + 4 * v10);
          }
          ++v10;
        }

        while (a3 != v10);
      }
    }

    return v8;
  }

  if ((*(unsigned int (**)(void))(v7 + 24))())
  {
    uint64_t v8 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 16) + 16LL))( *(void *)(a1 + 16),  a2,  a3);
    if (v8)
    {
      (***(void (****)(void))(a1 + 24))(*(void *)(a1 + 24));
      if ((int)a3 >= 1)
      {
        uint64_t v12 = 0LL;
        do
        {
          if (!*(_BYTE *)(a2 + v12)) {
            *(float *)(v8 + 4 * v12) = v11 * *(float *)(v8 + 4 * v12);
          }
          ++v12;
        }

        while (a3 != v12);
      }
    }

    return v8;
  }

  uint64_t v13 = (float *)(*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 24) + 16LL))( *(void *)(a1 + 24),  a2,  a3);
  BOOL v14 = (float *)(*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 16) + 16LL))( *(void *)(a1 + 16),  a2,  a3);
  uint64_t v15 = v14;
  if (v14) {
    BOOL v16 = v13 == 0LL;
  }
  else {
    BOOL v16 = 1;
  }
  if (!v16)
  {
    if ((int)a3 >= 1)
    {
      uint64_t v17 = 0LL;
      do
      {
        if (!*(_BYTE *)(a2 + v17)) {
          v14[v17] = v13[v17] * v14[v17];
        }
        ++v17;
      }

      while (a3 != v17);
    }

uint64_t sub_130AB8()
{
  return 5LL;
}

uint64_t sub_130AC0(uint64_t a1)
{
  if ((*(unsigned int (**)(void))(**(void **)(a1 + 16) + 40LL))(*(void *)(a1 + 16))
    && (***(float (****)(void))(a1 + 16))(*(void *)(a1 + 16)) == 0.0
    || (*(unsigned int (**)(void))(**(void **)(a1 + 24) + 40LL))(*(void *)(a1 + 24))
    && (***(float (****)(void))(a1 + 24))(*(void *)(a1 + 24)) == 0.0)
  {
    return 1LL;
  }

  else
  {
    return sub_130B48(a1);
  }

uint64_t sub_130B48(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 40LL))(v2) & 1;
  }
  else {
    uint64_t result = 1LL;
  }
  uint64_t v4 = *(void *)(a1 + 24);
  if (v4) {
    BOOL v5 = (_DWORD)result == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5) {
    return (*(uint64_t (**)(void))(*(void *)v4 + 40LL))(*(void *)(a1 + 24)) & 1;
  }
  return result;
}

void *sub_130BA8(uint64_t a1, uint64_t a2)
{
  uint64_t v15 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 112LL))(*(void *)(a1 + 16));
  uint64_t v4 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 24) + 112LL))(*(void *)(a1 + 24), a2);
  uint64_t v5 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 120LL))(*(void *)(a1 + 16));
  uint64_t v6 = (*(uint64_t (**)(void))(**(void **)(a1 + 24) + 120LL))(*(void *)(a1 + 24));
  uint64_t v14 = v4;
  uint64_t v7 = sub_122A0C(0x20uLL);
  sub_130040(v7, v15, v6);
  *uint64_t v7 = off_251790;
  uint64_t v8 = sub_122A0C(0x20uLL);
  uint64_t v9 = v5;
  uint64_t v10 = v8;
  sub_130040(v8, v9, v14);
  void *v10 = off_251790;
  uint64_t v11 = (uint64_t)v10;
  uint64_t v12 = sub_122A0C(0x20uLL);
  sub_130040(v12, (uint64_t)v7, v11);
  void *v12 = off_251510;
  return v12;
}

void sub_130D64( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, __int128 a13, uint64_t a14)
{
  uint64_t v17 = v15;
  if (v14) {
    free(v14);
  }
  if (a2 == 1)
  {
    int v20 = __cxa_begin_catch(exception_object);
    __int128 v22 = *(_OWORD *)v20;
    uint64_t v23 = *((void *)v20 + 2);
    if (v16) {
      (*(void (**)(uint64_t))(*(void *)v16 + 152LL))(v16);
    }
    if (v17) {
      (*(void (**)(uint64_t))(*(void *)v17 + 152LL))(v17);
    }
    exception = __cxa_allocate_exception(0x18uLL);
    *(_OWORD *)exception = v22;
    exception[2] = v23;
  }

  _Unwind_Resume(exception_object);
}

uint64_t sub_130ED4(uint64_t a1)
{
  if ((*(unsigned int (**)(void))(**(void **)(a1 + 16) + 40LL))(*(void *)(a1 + 16))
    && *(void *)(a1 + 8))
  {
    float v2 = (***(float (****)(void))(a1 + 16))(*(void *)(a1 + 16));
    if (v2 == 0.0)
    {
LABEL_4:
      uint64_t v3 = sub_122A0C(0x18uLL);
      *uint64_t v3 = off_24D3F8;
      v3[1] = 0LL;
      *((_DWORD *)v3 + 4) = 0;
      return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 296LL))(a1);
    }

    if (v2 == 1.0)
    {
      uint64_t v5 = *(void *)(a1 + 24);
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 296LL))(a1, v5);
    }
  }

  if ((*(unsigned int (**)(void))(**(void **)(a1 + 24) + 40LL))(*(void *)(a1 + 24))
    && *(void *)(a1 + 8))
  {
    float v6 = (***(float (****)(void))(a1 + 24))(*(void *)(a1 + 24));
    if (v6 == 0.0) {
      goto LABEL_4;
    }
    if (v6 == 1.0)
    {
      uint64_t v5 = *(void *)(a1 + 16);
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 296LL))(a1, v5);
    }
  }

  uint64_t result = (*(uint64_t (**)(void, void))(**(void **)(a1 + 16) + 136LL))( *(void *)(a1 + 16),  *(void *)(a1 + 24));
  if ((_DWORD)result)
  {
    uint64_t v7 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 120LL))(*(void *)(a1 + 16));
    uint64_t v8 = sub_122A0C(0x18uLL);
    *uint64_t v8 = off_24D3F8;
    v8[1] = 0LL;
    *((_DWORD *)v8 + 4) = 0x40000000;
    uint64_t v9 = sub_122A0C(0x20uLL);
    sub_130040(v9, v7, (uint64_t)v8);
    *uint64_t v9 = &off_251B50;
    return (*(uint64_t (**)(uint64_t, void *))(*(void *)a1 + 296LL))(a1, v9);
  }

  return result;
}

void sub_1310CC( void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  if (v20) {
    free(v20);
  }
  __cxa_begin_catch(a1);
  if (v18) {
    (*(void (**)(uint64_t))(*(void *)v18 + 152LL))(v18);
  }
  if (v19) {
    (*(void (**)(uint64_t))(*(void *)v19 + 152LL))(v19);
  }
  __cxa_end_catch();
}

void sub_131168()
{
}

float sub_13117C(float (****a1)(void))
{
  float v2 = (**a1[3])(a1[3]);
  if (v2 == 0.0) {
    ((void (*)(float (****)(void), uint64_t, float (****)(void), uint64_t))(*a1)[34])( a1,  1LL,  a1,  -1LL);
  }
  return (**a1[2])(a1[2]) / v2;
}

uint64_t sub_1311EC(uint64_t a1, uint64_t a2)
{
  int v4 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 24LL))(*(void *)(a1 + 16));
  uint64_t v5 = **(void **)(a1 + 24);
  if (v4)
  {
    uint64_t v6 = (*(uint64_t (**)(void))(v5 + 8))();
    if (v6)
    {
      (***(void (****)(void))(a1 + 16))(*(void *)(a1 + 16));
      if ((int)a2 >= 1)
      {
        uint64_t v8 = 0LL;
        do
        {
          *(float *)(v6 + v_Block_object_dispose(va, 8) = v7 / *(float *)(v6 + v8);
          v8 += 4LL;
        }

        while (4LL * a2 != v8);
      }
    }

    return v6;
  }

  if ((*(unsigned int (**)(void))(v5 + 24))())
  {
    uint64_t v6 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 16) + 8LL))(*(void *)(a1 + 16), a2);
    if (v6)
    {
      (***(void (****)(void))(a1 + 24))(*(void *)(a1 + 24));
      if ((int)a2 >= 1)
      {
        uint64_t v10 = 0LL;
        do
        {
          *(float *)(v6 + v10) = *(float *)(v6 + v10) / v9;
          v10 += 4LL;
        }

        while (4LL * a2 != v10);
      }
    }

    return v6;
  }

  uint64_t v11 = (char *)(*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 24) + 8LL))(*(void *)(a1 + 24), a2);
  uint64_t v12 = (char *)(*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 16) + 8LL))(*(void *)(a1 + 16), a2);
  uint64_t v13 = v12;
  if (v12) {
    BOOL v14 = v11 == 0LL;
  }
  else {
    BOOL v14 = 1;
  }
  if (!v14)
  {
    if ((int)a2 >= 1)
    {
      uint64_t v15 = 0LL;
      do
      {
        *(float *)&v12[v15] = *(float *)&v12[v15] / *(float *)&v11[v15];
        v15 += 4LL;
      }

      while (4LL * a2 != v15);
    }

uint64_t sub_13137C(uint64_t a1, _BYTE *a2, uint64_t a3)
{
  int v6 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 24LL))(*(void *)(a1 + 16));
  uint64_t v7 = **(void **)(a1 + 24);
  if (v6)
  {
    uint64_t v8 = (*(uint64_t (**)(void))(v7 + 16))();
    if (v8)
    {
      (***(void (****)(void))(a1 + 16))(*(void *)(a1 + 16));
      if ((int)a3 >= 1)
      {
        uint64_t v10 = 0LL;
        do
        {
          if (!a2[v10])
          {
            float v11 = *(float *)(v8 + 4 * v10);
            if (v11 == 0.0) {
              a2[v10] = 1;
            }
            else {
              *(float *)(v8 + 4 * v10) = v9 / v11;
            }
          }

          ++v10;
        }

        while (a3 != v10);
      }
    }
  }

  else if ((*(unsigned int (**)(void))(v7 + 24))())
  {
    uint64_t v8 = (*(uint64_t (**)(void, _BYTE *, uint64_t))(**(void **)(a1 + 16) + 16LL))( *(void *)(a1 + 16),  a2,  a3);
    if (v8)
    {
      float v12 = (***(float (****)(void))(a1 + 24))(*(void *)(a1 + 24));
      if (v12 == 0.0)
      {
      }

      else if ((int)a3 >= 1)
      {
        uint64_t v13 = 0LL;
        do
        {
          if (!a2[v13]) {
            *(float *)(v8 + 4 * v13) = *(float *)(v8 + 4 * v13) / v12;
          }
          ++v13;
        }

        while (a3 != v13);
      }
    }
  }

  else
  {
    BOOL v14 = (void *)(*(uint64_t (**)(void, _BYTE *, uint64_t))(**(void **)(a1 + 24) + 16LL))( *(void *)(a1 + 24),  a2,  a3);
    uint64_t v15 = (void *)(*(uint64_t (**)(void, _BYTE *, uint64_t))(**(void **)(a1 + 16) + 16LL))( *(void *)(a1 + 16),  a2,  a3);
    uint64_t v8 = (uint64_t)v15;
    if (v15) {
      BOOL v16 = v14 == 0LL;
    }
    else {
      BOOL v16 = 1;
    }
    if (v16)
    {
      if (v15) {
        operator delete[](v15);
      }
      if (v14) {
        operator delete[](v14);
      }
      return 0LL;
    }

    else
    {
      if ((int)a3 >= 1)
      {
        uint64_t v17 = (float *)v14;
        uint64_t v18 = (float *)v15;
        uint64_t v19 = a3;
        do
        {
          if (!*a2)
          {
            if (*v17 == 0.0) {
              *a2 = 1;
            }
            else {
              *uint64_t v18 = *v18 / *v17;
            }
          }

          ++v18;
          ++v17;
          ++a2;
          --v19;
        }

        while (v19);
      }

      operator delete[](v14);
    }
  }

  return v8;
}

uint64_t sub_131598()
{
  return 6LL;
}

uint64_t sub_1315A0(uint64_t a1)
{
  if ((*(unsigned int (**)(void))(**(void **)(a1 + 16) + 40LL))(*(void *)(a1 + 16))
    && (***(float (****)(void))(a1 + 16))(*(void *)(a1 + 16)) == 0.0)
  {
    return 1LL;
  }

  else
  {
    return sub_130B48(a1);
  }

void *sub_1315FC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 112LL))(*(void *)(a1 + 16));
  uint64_t v5 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 24) + 112LL))(*(void *)(a1 + 24), a2);
  uint64_t v6 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 120LL))(*(void *)(a1 + 16));
  uint64_t v7 = (*(uint64_t (**)(void))(**(void **)(a1 + 24) + 120LL))(*(void *)(a1 + 24));
  uint64_t v8 = (*(uint64_t (**)(void))(**(void **)(a1 + 24) + 120LL))(*(void *)(a1 + 24));
  uint64_t v17 = v6;
  float v9 = sub_122A0C(0x20uLL);
  uint64_t v10 = sub_122A0C(0x18uLL);
  void *v10 = off_24D3F8;
  v10[1] = 0LL;
  *((_DWORD *)v10 + 4) = 0x40000000;
  sub_130040(v9, v8, (uint64_t)v10);
  *float v9 = &off_251B50;
  uint64_t v11 = v4;
  float v12 = sub_122A0C(0x20uLL);
  sub_130040(v12, v11, v7);
  void *v12 = off_251790;
  uint64_t v13 = sub_122A0C(0x20uLL);
  sub_130040(v13, v17, v5);
  *uint64_t v13 = off_251790;
  BOOL v14 = sub_122A0C(0x20uLL);
  sub_130040(v14, (uint64_t)v12, (uint64_t)v13);
  *BOOL v14 = off_251650;
  uint64_t v15 = sub_122A0C(0x20uLL);
  sub_130040(v15, (uint64_t)v14, (uint64_t)v9);
  void *v15 = off_2518D0;
  return v15;
}

void sub_1318AC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, __int128 a17, uint64_t a18)
{
  if (v18) {
    free(v18);
  }
  if (a2 == 1)
  {
    __int128 v22 = __cxa_begin_catch(exception_object);
    __int128 v24 = *(_OWORD *)v22;
    uint64_t v25 = *((void *)v22 + 2);
    if (v19) {
      (*(void (**)(uint64_t))(*(void *)v19 + 152LL))(v19);
    }
    if (a13) {
      (*(void (**)(void *))(*(void *)a13 + 152LL))(a13);
    }
    exception = __cxa_allocate_exception(0x18uLL);
    *(_OWORD *)exception = v24;
    exception[2] = v25;
  }

  _Unwind_Resume(exception_object);
}

uint64_t sub_131AB4(uint64_t a1)
{
  if ((*(unsigned int (**)(void))(**(void **)(a1 + 16) + 40LL))(*(void *)(a1 + 16))
    && (***(float (****)(void))(a1 + 16))(*(void *)(a1 + 16)) == 0.0)
  {
    float v2 = sub_122A0C(0x18uLL);
    void *v2 = off_24D3F8;
    v2[1] = 0LL;
    *((_DWORD *)v2 + 4) = 0;
    return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 296LL))(a1);
  }

  else
  {
    uint64_t result = (*(uint64_t (**)(void, void))(**(void **)(a1 + 16) + 136LL))( *(void *)(a1 + 16),  *(void *)(a1 + 24));
    if ((_DWORD)result)
    {
      uint64_t v4 = sub_122A0C(0x18uLL);
      void *v4 = off_24D3F8;
      v4[1] = 0LL;
      *((_DWORD *)v4 + 4) = 1065353216;
      return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 296LL))(a1);
    }
  }

  return result;
}

void sub_131B74(void *a1)
{
}

float sub_131B88(float (****a1)(void))
{
  float v2 = (**a1[3])(a1[3]);
  if (v2 == 0.0) {
    ((void (*)(float (****)(void), uint64_t, uint64_t, uint64_t))(*a1)[34])(a1, 1LL, -1LL, -1LL);
  }
  return (float)((uint64_t)(**a1[2])(a1[2]) % (uint64_t)v2);
}

uint64_t sub_131C08(uint64_t a1, uint64_t a2)
{
  int v4 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 24LL))(*(void *)(a1 + 16));
  uint64_t v5 = **(void **)(a1 + 24);
  if (v4)
  {
    uint64_t v6 = (*(uint64_t (**)(void))(v5 + 8))();
    if (v6)
    {
      (***(void (****)(void))(a1 + 16))(*(void *)(a1 + 16));
      if ((int)a2 >= 1)
      {
        uint64_t v8 = 0LL;
        do
        {
          *(float *)(v6 + v_Block_object_dispose(va, 8) = (float)((uint64_t)v7 % (uint64_t)*(float *)(v6 + v8));
          v8 += 4LL;
        }

        while (4LL * a2 != v8);
      }
    }

    return v6;
  }

  if ((*(unsigned int (**)(void))(v5 + 24))())
  {
    uint64_t v6 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 16) + 8LL))(*(void *)(a1 + 16), a2);
    if (v6)
    {
      (***(void (****)(void))(a1 + 24))(*(void *)(a1 + 24));
      if ((int)a2 >= 1)
      {
        uint64_t v10 = 0LL;
        do
        {
          *(float *)(v6 + v10) = (float)((uint64_t)*(float *)(v6 + v10) % (uint64_t)v9);
          v10 += 4LL;
        }

        while (4LL * a2 != v10);
      }
    }

    return v6;
  }

  uint64_t v11 = (char *)(*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 24) + 8LL))(*(void *)(a1 + 24), a2);
  float v12 = (char *)(*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 16) + 8LL))(*(void *)(a1 + 16), a2);
  uint64_t v13 = v12;
  if (v12) {
    BOOL v14 = v11 == 0LL;
  }
  else {
    BOOL v14 = 1;
  }
  if (!v14)
  {
    if ((int)a2 >= 1)
    {
      uint64_t v15 = 0LL;
      do
      {
        *(float *)&v12[v15] = (float)((uint64_t)*(float *)&v12[v15] % (uint64_t)*(float *)&v11[v15]);
        v15 += 4LL;
      }

      while (4LL * a2 != v15);
    }

uint64_t sub_131DC8(uint64_t a1, _BYTE *a2, uint64_t a3)
{
  int v6 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 24LL))(*(void *)(a1 + 16));
  uint64_t v7 = **(void **)(a1 + 24);
  if (v6)
  {
    uint64_t v8 = (*(uint64_t (**)(void))(v7 + 16))();
    if (v8)
    {
      (***(void (****)(void))(a1 + 16))(*(void *)(a1 + 16));
      if ((int)a3 >= 1)
      {
        uint64_t v10 = 0LL;
        uint64_t v11 = (uint64_t)v9;
        do
        {
          if (!a2[v10])
          {
            float v12 = *(float *)(v8 + 4 * v10);
            if (v12 == 0.0) {
              a2[v10] = 1;
            }
            else {
              *(float *)(v8 + 4 * v10) = (float)(v11 % (uint64_t)v12);
            }
          }

          ++v10;
        }

        while (a3 != v10);
      }
    }
  }

  else if ((*(unsigned int (**)(void))(v7 + 24))())
  {
    uint64_t v8 = (*(uint64_t (**)(void, _BYTE *, uint64_t))(**(void **)(a1 + 16) + 16LL))( *(void *)(a1 + 16),  a2,  a3);
    if (v8)
    {
      float v13 = (***(float (****)(void))(a1 + 24))(*(void *)(a1 + 24));
      if (v13 == 0.0)
      {
      }

      else if ((int)a3 >= 1)
      {
        uint64_t v14 = 0LL;
        do
        {
          if (!a2[v14]) {
            *(float *)(v8 + 4 * v14) = (float)((uint64_t)*(float *)(v8 + 4 * v14) % (uint64_t)v13);
          }
          ++v14;
        }

        while (a3 != v14);
      }
    }
  }

  else
  {
    uint64_t v15 = (void *)(*(uint64_t (**)(void, _BYTE *, uint64_t))(**(void **)(a1 + 24) + 16LL))( *(void *)(a1 + 24),  a2,  a3);
    BOOL v16 = (void *)(*(uint64_t (**)(void, _BYTE *, uint64_t))(**(void **)(a1 + 16) + 16LL))( *(void *)(a1 + 16),  a2,  a3);
    uint64_t v8 = (uint64_t)v16;
    if (v16) {
      BOOL v17 = v15 == 0LL;
    }
    else {
      BOOL v17 = 1;
    }
    if (v17)
    {
      if (v16) {
        operator delete[](v16);
      }
      if (v15) {
        operator delete[](v15);
      }
      return 0LL;
    }

    else
    {
      if ((int)a3 >= 1)
      {
        uint64_t v18 = (float *)v15;
        uint64_t v19 = (float *)v16;
        uint64_t v20 = a3;
        do
        {
          if (!*a2)
          {
            if (*v18 == 0.0) {
              *a2 = 1;
            }
            else {
              *uint64_t v19 = (float)((uint64_t)*v19 % (uint64_t)*v18);
            }
          }

          ++v19;
          ++v18;
          ++a2;
          --v20;
        }

        while (v20);
      }

      operator delete[](v15);
    }
  }

  return v8;
}

uint64_t sub_132014()
{
  return 7LL;
}

uint64_t sub_13201C(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(void, void))(**(void **)(a1 + 16) + 136LL))( *(void *)(a1 + 16),  *(void *)(a1 + 24));
  if ((_DWORD)result)
  {
    uint64_t v3 = sub_122A0C(0x18uLL);
    *uint64_t v3 = off_24D3F8;
    v3[1] = 0LL;
    *((_DWORD *)v3 + 4) = 0;
    return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 296LL))(a1);
  }

  return result;
}

void sub_13207C(void *a1)
{
}

double sub_13208C(uint64_t a1)
{
  float v2 = (***(float (****)(void))(a1 + 16))(*(void *)(a1 + 16));
  float v4 = (***(float (****)(void))(a1 + 24))(*(void *)(a1 + 24));
  if (v2 <= 0.0)
  {
    LODWORD(result) = 0;
    if (v2 != 0.0)
    {
      double result = pow(v2, (double)(int)v4);
      *(float *)&double result = result;
    }
  }

  else
  {
    *(float *)&double result = powf(v2, v4);
  }

  return result;
}

float *sub_132110(uint64_t a1, uint64_t a2)
{
  int v4 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 24LL))(*(void *)(a1 + 16));
  uint64_t v5 = **(void **)(a1 + 24);
  if (v4)
  {
    int v6 = (float *)(*(uint64_t (**)(void))(v5 + 8))();
    if (v6)
    {
      float v7 = (***(float (****)(void))(a1 + 16))(*(void *)(a1 + 16));
      float v8 = v7;
      if (v7 <= 0.0)
      {
        if (v7 == 0.0)
        {
        }

        else if ((int)a2 >= 1)
        {
          unint64_t v21 = 0LL;
          double v22 = v7;
          uint64_t v23 = 4LL * a2;
          do
          {
            float v24 = pow(v22, (double)(uint64_t)v6[v21 / 4]);
            v6[v21 / 4] = v24;
            v21 += 4LL;
          }

          while (v23 != v21);
        }
      }

      else if ((int)a2 >= 1)
      {
        unint64_t v9 = 0LL;
        uint64_t v10 = 4LL * a2;
        do
        {
          v6[v9 / 4] = powf(v8, v6[v9 / 4]);
          v9 += 4LL;
        }

        while (v10 != v9);
      }
    }

    return v6;
  }

  if ((*(unsigned int (**)(void))(v5 + 24))())
  {
    int v6 = (float *)(*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 16) + 8LL))(*(void *)(a1 + 16), a2);
    if (!v6) {
      return v6;
    }
    (***(void (****)(void))(a1 + 24))(*(void *)(a1 + 24));
    float v12 = v11;
    unint64_t v13 = 0LL;
    double v14 = (double)(uint64_t)v11;
    uint64_t v15 = 4LL * a2;
    while (1)
    {
      float v16 = v6[v13 / 4];
      if (v16 > 0.0) {
        break;
      }
      if (v16 < 0.0)
      {
        float v17 = pow(v16, v14);
        goto LABEL_16;
      }

uint64_t sub_13237C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 24LL))(*(void *)(a1 + 16));
  uint64_t v7 = **(void **)(a1 + 24);
  if (v6)
  {
    uint64_t v8 = (*(uint64_t (**)(void))(v7 + 16))();
    if (v8)
    {
      float v9 = (***(float (****)(void))(a1 + 16))(*(void *)(a1 + 16));
      float v10 = v9;
      if (v9 <= 0.0)
      {
        if (v9 == 0.0)
        {
          if ((int)a3 >= 1)
          {
            uint64_t v18 = 0LL;
            do
            {
              if (!*(_BYTE *)(a2 + v18)) {
                *(_DWORD *)(v8 + 4 * v1_Block_object_dispose(va, 8) = 0;
              }
              ++v18;
            }

            while (a3 != v18);
          }
        }

        else if ((int)a3 >= 1)
        {
          uint64_t v23 = 0LL;
          double v24 = v9;
          do
          {
            if (!*(_BYTE *)(a2 + v23))
            {
              float v25 = pow(v24, (double)(uint64_t)*(float *)(v8 + 4 * v23));
              *(float *)(v8 + 4 * v23) = v25;
            }

            ++v23;
          }

          while (a3 != v23);
        }
      }

      else if ((int)a3 >= 1)
      {
        uint64_t v11 = 0LL;
        do
        {
          if (!*(_BYTE *)(a2 + v11)) {
            *(float *)(v8 + 4 * v11) = powf(v10, *(float *)(v8 + 4 * v11));
          }
          ++v11;
        }

        while (a3 != v11);
      }
    }

    return v8;
  }

  if ((*(unsigned int (**)(void))(v7 + 24))())
  {
    uint64_t v8 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 16) + 16LL))( *(void *)(a1 + 16),  a2,  a3);
    if (!v8) {
      return v8;
    }
    (***(void (****)(void))(a1 + 24))(*(void *)(a1 + 24));
    float v13 = v12;
    uint64_t v14 = 0LL;
    double v15 = (double)(uint64_t)v12;
    while (1)
    {
      if (!*(_BYTE *)(a2 + v14))
      {
        float v16 = *(float *)(v8 + 4 * v14);
        if (v16 > 0.0)
        {
          float v17 = powf(v16, v13);
LABEL_19:
          *(float *)(v8 + 4 * v14) = v17;
          goto LABEL_20;
        }

        if (v16 < 0.0)
        {
          float v17 = pow(v16, v15);
          goto LABEL_19;
        }
      }

uint64_t sub_132628()
{
  return 8LL;
}

uint64_t sub_132630(uint64_t a1)
{
  if ((*(unsigned int (**)(void))(**(void **)(a1 + 16) + 40LL))(*(void *)(a1 + 16))
    && ((***(float (****)(void))(a1 + 16))(*(void *)(a1 + 16)) == 1.0
     || (***(float (****)(void))(a1 + 16))(*(void *)(a1 + 16)) == 0.0)
    || (*(unsigned int (**)(void))(**(void **)(a1 + 24) + 40LL))(*(void *)(a1 + 24))
    && (***(float (****)(void))(a1 + 24))(*(void *)(a1 + 24)) == 0.0)
  {
    return 1LL;
  }

  else
  {
    return sub_130B48(a1);
  }

void *sub_1326D4(uint64_t a1, uint64_t a2)
{
  uint64_t v32 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 112LL))(*(void *)(a1 + 16));
  uint64_t v3 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 120LL))(*(void *)(a1 + 16));
  uint64_t v4 = (*(uint64_t (**)(void))(**(void **)(a1 + 24) + 120LL))(*(void *)(a1 + 24));
  uint64_t v29 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 24) + 112LL))(*(void *)(a1 + 24), a2);
  int v31 = sub_122A0C(0x18uLL);
  *int v31 = off_24D3F8;
  v31[1] = 0LL;
  *((_DWORD *)v31 + 4) = 1065353216;
  uint64_t v5 = sub_122A0C(0x20uLL);
  uint64_t v27 = v3;
  uint64_t v28 = v4;
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 120LL))(v4);
  sub_130040(v5, v6, (uint64_t)v31);
  void *v5 = off_251650;
  uint64_t v7 = sub_122A0C(0x20uLL);
  uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 120LL))(v3);
  sub_130040(v7, v8, (uint64_t)v5);
  *uint64_t v7 = &off_251B50;
  uint64_t v9 = v4;
  float v10 = sub_122A0C(0x20uLL);
  uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 120LL))(v9);
  sub_130040(v10, v11, (uint64_t)v7);
  void *v10 = off_251790;
  float v12 = sub_122A0C(0x20uLL);
  uint64_t v13 = (*(uint64_t (**)(uint64_t))(*(void *)v32 + 120LL))(v32);
  sub_130040(v12, v13, (uint64_t)v10);
  void *v12 = off_251790;
  uint64_t v14 = v27;
  double v15 = sub_122A0C(0x18uLL);
  uint64_t v16 = (*(uint64_t (**)(uint64_t))(*(void *)v14 + 120LL))(v14);
  sub_128170(v15, v16);
  void *v15 = &off_24EBA0;
  float v17 = sub_122A0C(0x20uLL);
  uint64_t v18 = (*(uint64_t (**)(uint64_t))(*(void *)v14 + 120LL))(v14);
  sub_130040(v17, v18, (uint64_t)v15);
  *float v17 = &off_251B50;
  uint64_t v19 = sub_122A0C(0x20uLL);
  uint64_t v20 = (*(uint64_t (**)(uint64_t))(*(void *)v29 + 120LL))(v29);
  sub_130040(v19, v20, (uint64_t)v17);
  *uint64_t v19 = off_251790;
  unint64_t v21 = sub_122A0C(0x20uLL);
  uint64_t v22 = (*(uint64_t (**)(uint64_t))(*(void *)v27 + 120LL))(v27);
  uint64_t v23 = (*(uint64_t (**)(uint64_t))(*(void *)v28 + 120LL))(v28);
  sub_130040(v21, v22, v23);
  *unint64_t v21 = &off_251B50;
  double v24 = sub_122A0C(0x20uLL);
  sub_130040(v24, (uint64_t)v21, (uint64_t)v19);
  *double v24 = off_251790;
  float v25 = sub_122A0C(0x20uLL);
  sub_130040(v25, (uint64_t)v12, (uint64_t)v24);
  *float v25 = off_251510;
  (*(void (**)(uint64_t))(*(void *)v27 + 152LL))(v27);
  (*(void (**)(uint64_t))(*(void *)v28 + 152LL))(v28);
  (*(void (**)(uint64_t))(*(void *)v32 + 152LL))(v32);
  (*(void (**)(uint64_t))(*(void *)v29 + 152LL))(v29);
  return v25;
}

void sub_132B84( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, _Unwind_Exception *exception_object, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, __int128 a17, uint64_t a18)
{
  if (v18) {
    free(v18);
  }
  if (a2 == 1)
  {
    uint64_t v20 = __cxa_begin_catch(a1);
    __int128 v24 = *(_OWORD *)v20;
    uint64_t v25 = *((void *)v20 + 2);
    if (a12) {
      (*(void (**)(uint64_t))(*(void *)a12 + 152LL))(a12);
    }
    if (a13) {
      (*(void (**)(uint64_t))(*(void *)a13 + 152LL))(a13);
    }
    if (a16) {
      (*(void (**)(uint64_t))(*(void *)a16 + 152LL))(a16);
    }
    if (a14) {
      (*(void (**)(uint64_t))(*(void *)a14 + 152LL))(a14);
    }
    if (a15) {
      (*(void (**)(void *))(*(void *)a15 + 152LL))(a15);
    }
    if (v19) {
      (*(void (**)(uint64_t))(*(void *)v19 + 152LL))(v19);
    }
    exception = __cxa_allocate_exception(0x18uLL);
    *(_OWORD *)exception = v24;
    exception[2] = v25;
  }

  _Unwind_Resume(a1);
}

void sub_132D78(float (****a1)(void))
{
  if (((unsigned int (*)(float (***)(void)))(*a1[2])[5])(a1[2])
    && ((**a1[2])(a1[2]) == 1.0 || (**a1[2])(a1[2]) == 0.0))
  {
    float v2 = (float *)sub_122A0C(0x18uLL);
    float v3 = (**a1[2])(a1[2]);
    *(void *)float v2 = off_24D3F8;
    *((void *)v2 + 1) = 0LL;
    void v2[4] = v3;
    ((void (*)(float (****)(void), float *))(*a1)[37])(a1, v2);
  }

  else if (((unsigned int (*)(float (***)(void)))(*a1[3])[5])(a1[3]) && (**a1[3])(a1[3]) == 0.0)
  {
    uint64_t v4 = sub_122A0C(0x18uLL);
    void *v4 = off_24D3F8;
    v4[1] = 0LL;
    *((_DWORD *)v4 + 4) = 1065353216;
    ((void (*)(float (****)(void)))(*a1)[37])(a1);
  }

  else if (((unsigned int (*)(float (***)(void)))(*a1[3])[5])(a1[3]))
  {
    if ((**a1[3])(a1[3]) == 1.0) {
      ((void (*)(float (****)(void), float (***)(void)))(*a1)[37])(a1, a1[2]);
    }
  }

void sub_132ED0(void *a1)
{
}

void sub_132F00(uint64_t a1)
{
}

uint64_t sub_132F58(uint64_t a1, uint64_t a2)
{
  int v4 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 24LL))(*(void *)(a1 + 16));
  uint64_t v5 = **(void **)(a1 + 24);
  if (v4)
  {
    uint64_t v6 = (*(uint64_t (**)(void))(v5 + 8))();
    if (v6)
    {
      (***(void (****)(void))(a1 + 16))(*(void *)(a1 + 16));
      if ((int)a2 >= 1)
      {
        uint64_t v8 = 0LL;
        do
        {
          else {
            float v9 = 1.0;
          }
          *(float *)(v6 + v_Block_object_dispose(va, 8) = v9;
          v8 += 4LL;
        }

        while (4LL * a2 != v8);
      }
    }

    return v6;
  }

  if ((*(unsigned int (**)(void))(v5 + 24))())
  {
    uint64_t v6 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 16) + 8LL))(*(void *)(a1 + 16), a2);
    if (v6)
    {
      (***(void (****)(void))(a1 + 24))(*(void *)(a1 + 24));
      if ((int)a2 >= 1)
      {
        uint64_t v11 = 0LL;
        do
        {
          else {
            float v12 = 1.0;
          }
          *(float *)(v6 + v11) = v12;
          v11 += 4LL;
        }

        while (4LL * a2 != v11);
      }
    }

    return v6;
  }

  uint64_t v13 = (char *)(*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 24) + 8LL))(*(void *)(a1 + 24), a2);
  uint64_t v14 = (char *)(*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 16) + 8LL))(*(void *)(a1 + 16), a2);
  double v15 = v14;
  if (v14) {
    BOOL v16 = v13 == 0LL;
  }
  else {
    BOOL v16 = 1;
  }
  if (!v16)
  {
    if ((int)a2 >= 1)
    {
      uint64_t v17 = 0LL;
      do
      {
        else {
          float v18 = 1.0;
        }
        *(float *)&v14[v17] = v18;
        v17 += 4LL;
      }

      while (4LL * a2 != v17);
    }

uint64_t sub_13310C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 24LL))(*(void *)(a1 + 16));
  uint64_t v7 = **(void **)(a1 + 24);
  if (v6)
  {
    uint64_t v8 = (*(uint64_t (**)(void))(v7 + 16))();
    if (v8)
    {
      (***(void (****)(void))(a1 + 16))(*(void *)(a1 + 16));
      if ((int)a3 >= 1)
      {
        uint64_t v10 = 0LL;
        do
        {
          if (!*(_BYTE *)(a2 + v10))
          {
            else {
              float v11 = 1.0;
            }
            *(float *)(v8 + 4 * v10) = v11;
          }

          ++v10;
        }

        while (a3 != v10);
      }
    }

    return v8;
  }

  if ((*(unsigned int (**)(void))(v7 + 24))())
  {
    uint64_t v8 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 16) + 16LL))( *(void *)(a1 + 16),  a2,  a3);
    if (v8)
    {
      (***(void (****)(void))(a1 + 24))(*(void *)(a1 + 24));
      if ((int)a3 >= 1)
      {
        uint64_t v13 = 0LL;
        do
        {
          if (!*(_BYTE *)(a2 + v13))
          {
            else {
              float v14 = 1.0;
            }
            *(float *)(v8 + 4 * v13) = v14;
          }

          ++v13;
        }

        while (a3 != v13);
      }
    }

    return v8;
  }

  double v15 = (float *)(*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 24) + 16LL))( *(void *)(a1 + 24),  a2,  a3);
  BOOL v16 = (float *)(*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 16) + 16LL))( *(void *)(a1 + 16),  a2,  a3);
  uint64_t v17 = v16;
  if (v16) {
    BOOL v18 = v15 == 0LL;
  }
  else {
    BOOL v18 = 1;
  }
  if (!v18)
  {
    if ((int)a3 >= 1)
    {
      uint64_t v19 = 0LL;
      do
      {
        if (!*(_BYTE *)(a2 + v19))
        {
          if (v16[v19] >= v15[v19]) {
            float v20 = 0.0;
          }
          else {
            float v20 = 1.0;
          }
          v16[v19] = v20;
        }

        ++v19;
      }

      while (a3 != v19);
    }

uint64_t sub_1332F4()
{
  return 9LL;
}

uint64_t sub_1332FC(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(void, void))(**(void **)(a1 + 16) + 136LL))( *(void *)(a1 + 16),  *(void *)(a1 + 24));
  if ((_DWORD)result)
  {
    float v3 = sub_122A0C(0x18uLL);
    *float v3 = off_24D3F8;
    v3[1] = 0LL;
    *((_DWORD *)v3 + 4) = 0;
    return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 296LL))(a1);
  }

  return result;
}

void sub_13335C(void *a1)
{
}

void sub_13336C(uint64_t a1)
{
}

uint64_t sub_1333C4(uint64_t a1, uint64_t a2)
{
  int v4 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 24LL))(*(void *)(a1 + 16));
  uint64_t v5 = **(void **)(a1 + 24);
  if (v4)
  {
    uint64_t v6 = (*(uint64_t (**)(void))(v5 + 8))();
    if (v6)
    {
      (***(void (****)(void))(a1 + 16))(*(void *)(a1 + 16));
      if ((int)a2 >= 1)
      {
        uint64_t v8 = 0LL;
        do
        {
          else {
            float v9 = 1.0;
          }
          *(float *)(v6 + v_Block_object_dispose(va, 8) = v9;
          v8 += 4LL;
        }

        while (4LL * a2 != v8);
      }
    }

    return v6;
  }

  if ((*(unsigned int (**)(void))(v5 + 24))())
  {
    uint64_t v6 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 16) + 8LL))(*(void *)(a1 + 16), a2);
    if (v6)
    {
      (***(void (****)(void))(a1 + 24))(*(void *)(a1 + 24));
      if ((int)a2 >= 1)
      {
        uint64_t v11 = 0LL;
        do
        {
          else {
            float v12 = 1.0;
          }
          *(float *)(v6 + v11) = v12;
          v11 += 4LL;
        }

        while (4LL * a2 != v11);
      }
    }

    return v6;
  }

  uint64_t v13 = (char *)(*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 24) + 8LL))(*(void *)(a1 + 24), a2);
  float v14 = (char *)(*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 16) + 8LL))(*(void *)(a1 + 16), a2);
  double v15 = v14;
  if (v14) {
    BOOL v16 = v13 == 0LL;
  }
  else {
    BOOL v16 = 1;
  }
  if (!v16)
  {
    if ((int)a2 >= 1)
    {
      uint64_t v17 = 0LL;
      do
      {
        else {
          float v18 = 1.0;
        }
        *(float *)&v14[v17] = v18;
        v17 += 4LL;
      }

      while (4LL * a2 != v17);
    }

uint64_t sub_133578(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 24LL))(*(void *)(a1 + 16));
  uint64_t v7 = **(void **)(a1 + 24);
  if (v6)
  {
    uint64_t v8 = (*(uint64_t (**)(void))(v7 + 16))();
    if (v8)
    {
      (***(void (****)(void))(a1 + 16))(*(void *)(a1 + 16));
      if ((int)a3 >= 1)
      {
        uint64_t v10 = 0LL;
        do
        {
          if (!*(_BYTE *)(a2 + v10))
          {
            else {
              float v11 = 1.0;
            }
            *(float *)(v8 + 4 * v10) = v11;
          }

          ++v10;
        }

        while (a3 != v10);
      }
    }

    return v8;
  }

  if ((*(unsigned int (**)(void))(v7 + 24))())
  {
    uint64_t v8 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 16) + 16LL))( *(void *)(a1 + 16),  a2,  a3);
    if (v8)
    {
      (***(void (****)(void))(a1 + 24))(*(void *)(a1 + 24));
      if ((int)a3 >= 1)
      {
        uint64_t v13 = 0LL;
        do
        {
          if (!*(_BYTE *)(a2 + v13))
          {
            else {
              float v14 = 1.0;
            }
            *(float *)(v8 + 4 * v13) = v14;
          }

          ++v13;
        }

        while (a3 != v13);
      }
    }

    return v8;
  }

  double v15 = (float *)(*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 24) + 16LL))( *(void *)(a1 + 24),  a2,  a3);
  BOOL v16 = (float *)(*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 16) + 16LL))( *(void *)(a1 + 16),  a2,  a3);
  uint64_t v17 = v16;
  if (v16) {
    BOOL v18 = v15 == 0LL;
  }
  else {
    BOOL v18 = 1;
  }
  if (!v18)
  {
    if ((int)a3 >= 1)
    {
      uint64_t v19 = 0LL;
      do
      {
        if (!*(_BYTE *)(a2 + v19))
        {
          if (v16[v19] <= v15[v19]) {
            float v20 = 0.0;
          }
          else {
            float v20 = 1.0;
          }
          v16[v19] = v20;
        }

        ++v19;
      }

      while (a3 != v19);
    }

uint64_t sub_133760()
{
  return 10LL;
}

uint64_t sub_133768(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(void, void))(**(void **)(a1 + 16) + 136LL))( *(void *)(a1 + 16),  *(void *)(a1 + 24));
  if ((_DWORD)result)
  {
    float v3 = sub_122A0C(0x18uLL);
    *float v3 = off_24D3F8;
    v3[1] = 0LL;
    *((_DWORD *)v3 + 4) = 0;
    return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 296LL))(a1);
  }

  return result;
}

void sub_1337C8(void *a1)
{
}

void sub_1337D8(uint64_t a1)
{
}

uint64_t sub_133830(uint64_t a1, uint64_t a2)
{
  int v4 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 24LL))(*(void *)(a1 + 16));
  uint64_t v5 = **(void **)(a1 + 24);
  if (v4)
  {
    uint64_t v6 = (*(uint64_t (**)(void))(v5 + 8))();
    if (v6)
    {
      (***(void (****)(void))(a1 + 16))(*(void *)(a1 + 16));
      if ((int)a2 >= 1)
      {
        uint64_t v8 = 0LL;
        do
        {
          else {
            float v9 = 0.0;
          }
          *(float *)(v6 + v_Block_object_dispose(va, 8) = v9;
          v8 += 4LL;
        }

        while (4LL * a2 != v8);
      }
    }

    return v6;
  }

  if ((*(unsigned int (**)(void))(v5 + 24))())
  {
    uint64_t v6 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 16) + 8LL))(*(void *)(a1 + 16), a2);
    if (v6)
    {
      (***(void (****)(void))(a1 + 24))(*(void *)(a1 + 24));
      if ((int)a2 >= 1)
      {
        uint64_t v11 = 0LL;
        do
        {
          else {
            float v12 = 0.0;
          }
          *(float *)(v6 + v11) = v12;
          v11 += 4LL;
        }

        while (4LL * a2 != v11);
      }
    }

    return v6;
  }

  uint64_t v13 = (char *)(*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 24) + 8LL))(*(void *)(a1 + 24), a2);
  float v14 = (char *)(*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 16) + 8LL))(*(void *)(a1 + 16), a2);
  double v15 = v14;
  if (v14) {
    BOOL v16 = v13 == 0LL;
  }
  else {
    BOOL v16 = 1;
  }
  if (!v16)
  {
    if ((int)a2 >= 1)
    {
      uint64_t v17 = 0LL;
      do
      {
        else {
          float v18 = 0.0;
        }
        *(float *)&v14[v17] = v18;
        v17 += 4LL;
      }

      while (4LL * a2 != v17);
    }

uint64_t sub_1339E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 24LL))(*(void *)(a1 + 16));
  uint64_t v7 = **(void **)(a1 + 24);
  if (v6)
  {
    uint64_t v8 = (*(uint64_t (**)(void))(v7 + 16))();
    if (v8)
    {
      (***(void (****)(void))(a1 + 16))(*(void *)(a1 + 16));
      if ((int)a3 >= 1)
      {
        uint64_t v10 = 0LL;
        do
        {
          if (!*(_BYTE *)(a2 + v10))
          {
            else {
              float v11 = 0.0;
            }
            *(float *)(v8 + 4 * v10) = v11;
          }

          ++v10;
        }

        while (a3 != v10);
      }
    }

    return v8;
  }

  if ((*(unsigned int (**)(void))(v7 + 24))())
  {
    uint64_t v8 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 16) + 16LL))( *(void *)(a1 + 16),  a2,  a3);
    if (v8)
    {
      (***(void (****)(void))(a1 + 24))(*(void *)(a1 + 24));
      if ((int)a3 >= 1)
      {
        uint64_t v13 = 0LL;
        do
        {
          if (!*(_BYTE *)(a2 + v13))
          {
            else {
              float v14 = 0.0;
            }
            *(float *)(v8 + 4 * v13) = v14;
          }

          ++v13;
        }

        while (a3 != v13);
      }
    }

    return v8;
  }

  double v15 = (float *)(*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 24) + 16LL))( *(void *)(a1 + 24),  a2,  a3);
  BOOL v16 = (float *)(*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 16) + 16LL))( *(void *)(a1 + 16),  a2,  a3);
  uint64_t v17 = v16;
  if (v16) {
    BOOL v18 = v15 == 0LL;
  }
  else {
    BOOL v18 = 1;
  }
  if (!v18)
  {
    if ((int)a3 >= 1)
    {
      uint64_t v19 = 0LL;
      do
      {
        if (!*(_BYTE *)(a2 + v19))
        {
          if (v16[v19] == v15[v19]) {
            float v20 = 1.0;
          }
          else {
            float v20 = 0.0;
          }
          v16[v19] = v20;
        }

        ++v19;
      }

      while (a3 != v19);
    }

uint64_t sub_133BCC()
{
  return 11LL;
}

uint64_t sub_133BD4(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(void, void))(**(void **)(a1 + 16) + 136LL))( *(void *)(a1 + 16),  *(void *)(a1 + 24));
  if ((_DWORD)result)
  {
    float v3 = sub_122A0C(0x18uLL);
    *float v3 = off_24D3F8;
    v3[1] = 0LL;
    *((_DWORD *)v3 + 4) = 1065353216;
    return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 296LL))(a1);
  }

  return result;
}

void sub_133C38(void *a1)
{
}

void sub_133C48(uint64_t a1)
{
}

uint64_t sub_133CA0(uint64_t a1, uint64_t a2)
{
  int v4 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 24LL))(*(void *)(a1 + 16));
  uint64_t v5 = **(void **)(a1 + 24);
  if (v4)
  {
    uint64_t v6 = (*(uint64_t (**)(void))(v5 + 8))();
    if (v6)
    {
      (***(void (****)(void))(a1 + 16))(*(void *)(a1 + 16));
      if ((int)a2 >= 1)
      {
        uint64_t v8 = 0LL;
        do
        {
          else {
            float v9 = 1.0;
          }
          *(float *)(v6 + v_Block_object_dispose(va, 8) = v9;
          v8 += 4LL;
        }

        while (4LL * a2 != v8);
      }
    }

    return v6;
  }

  if ((*(unsigned int (**)(void))(v5 + 24))())
  {
    uint64_t v6 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 16) + 8LL))(*(void *)(a1 + 16), a2);
    if (v6)
    {
      (***(void (****)(void))(a1 + 24))(*(void *)(a1 + 24));
      if ((int)a2 >= 1)
      {
        uint64_t v11 = 0LL;
        do
        {
          else {
            float v12 = 1.0;
          }
          *(float *)(v6 + v11) = v12;
          v11 += 4LL;
        }

        while (4LL * a2 != v11);
      }
    }

    return v6;
  }

  uint64_t v13 = (char *)(*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 24) + 8LL))(*(void *)(a1 + 24), a2);
  float v14 = (char *)(*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 16) + 8LL))(*(void *)(a1 + 16), a2);
  double v15 = v14;
  if (v14) {
    BOOL v16 = v13 == 0LL;
  }
  else {
    BOOL v16 = 1;
  }
  if (!v16)
  {
    if ((int)a2 >= 1)
    {
      uint64_t v17 = 0LL;
      do
      {
        else {
          float v18 = 1.0;
        }
        *(float *)&v14[v17] = v18;
        v17 += 4LL;
      }

      while (4LL * a2 != v17);
    }

uint64_t sub_133E54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 24LL))(*(void *)(a1 + 16));
  uint64_t v7 = **(void **)(a1 + 24);
  if (v6)
  {
    uint64_t v8 = (*(uint64_t (**)(void))(v7 + 16))();
    if (v8)
    {
      (***(void (****)(void))(a1 + 16))(*(void *)(a1 + 16));
      if ((int)a3 >= 1)
      {
        uint64_t v10 = 0LL;
        do
        {
          if (!*(_BYTE *)(a2 + v10))
          {
            else {
              float v11 = 1.0;
            }
            *(float *)(v8 + 4 * v10) = v11;
          }

          ++v10;
        }

        while (a3 != v10);
      }
    }

    return v8;
  }

  if ((*(unsigned int (**)(void))(v7 + 24))())
  {
    uint64_t v8 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 16) + 16LL))( *(void *)(a1 + 16),  a2,  a3);
    if (v8)
    {
      (***(void (****)(void))(a1 + 24))(*(void *)(a1 + 24));
      if ((int)a3 >= 1)
      {
        uint64_t v13 = 0LL;
        do
        {
          if (!*(_BYTE *)(a2 + v13))
          {
            else {
              float v14 = 1.0;
            }
            *(float *)(v8 + 4 * v13) = v14;
          }

          ++v13;
        }

        while (a3 != v13);
      }
    }

    return v8;
  }

  double v15 = (float *)(*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 24) + 16LL))( *(void *)(a1 + 24),  a2,  a3);
  BOOL v16 = (float *)(*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 16) + 16LL))( *(void *)(a1 + 16),  a2,  a3);
  uint64_t v17 = v16;
  if (v16) {
    BOOL v18 = v15 == 0LL;
  }
  else {
    BOOL v18 = 1;
  }
  if (!v18)
  {
    if ((int)a3 >= 1)
    {
      uint64_t v19 = 0LL;
      do
      {
        if (!*(_BYTE *)(a2 + v19))
        {
          if (v16[v19] == v15[v19]) {
            float v20 = 0.0;
          }
          else {
            float v20 = 1.0;
          }
          v16[v19] = v20;
        }

        ++v19;
      }

      while (a3 != v19);
    }

uint64_t sub_13403C()
{
  return 12LL;
}

uint64_t sub_134044(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(void, void))(**(void **)(a1 + 16) + 136LL))( *(void *)(a1 + 16),  *(void *)(a1 + 24));
  if ((_DWORD)result)
  {
    float v3 = sub_122A0C(0x18uLL);
    *float v3 = off_24D3F8;
    v3[1] = 0LL;
    *((_DWORD *)v3 + 4) = 0;
    return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 296LL))(a1);
  }

  return result;
}

void sub_1340A4(void *a1)
{
}

void sub_1340B4(uint64_t a1)
{
}

uint64_t sub_13410C(uint64_t a1, uint64_t a2)
{
  int v4 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 24LL))(*(void *)(a1 + 16));
  uint64_t v5 = **(void **)(a1 + 24);
  if (v4)
  {
    uint64_t v6 = (*(uint64_t (**)(void))(v5 + 8))();
    if (v6)
    {
      (***(void (****)(void))(a1 + 16))(*(void *)(a1 + 16));
      if ((int)a2 >= 1)
      {
        uint64_t v8 = 0LL;
        do
        {
          else {
            float v9 = 0.0;
          }
          *(float *)(v6 + v_Block_object_dispose(va, 8) = v9;
          v8 += 4LL;
        }

        while (4LL * a2 != v8);
      }
    }

    return v6;
  }

  if ((*(unsigned int (**)(void))(v5 + 24))())
  {
    uint64_t v6 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 16) + 8LL))(*(void *)(a1 + 16), a2);
    if (v6)
    {
      (***(void (****)(void))(a1 + 24))(*(void *)(a1 + 24));
      if ((int)a2 >= 1)
      {
        uint64_t v11 = 0LL;
        do
        {
          else {
            float v12 = 0.0;
          }
          *(float *)(v6 + v11) = v12;
          v11 += 4LL;
        }

        while (4LL * a2 != v11);
      }
    }

    return v6;
  }

  uint64_t v13 = (char *)(*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 24) + 8LL))(*(void *)(a1 + 24), a2);
  float v14 = (char *)(*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 16) + 8LL))(*(void *)(a1 + 16), a2);
  double v15 = v14;
  if (v14) {
    BOOL v16 = v13 == 0LL;
  }
  else {
    BOOL v16 = 1;
  }
  if (!v16)
  {
    if ((int)a2 >= 1)
    {
      uint64_t v17 = 0LL;
      do
      {
        else {
          float v18 = 0.0;
        }
        *(float *)&v14[v17] = v18;
        v17 += 4LL;
      }

      while (4LL * a2 != v17);
    }

uint64_t sub_1342C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 24LL))(*(void *)(a1 + 16));
  uint64_t v7 = **(void **)(a1 + 24);
  if (v6)
  {
    uint64_t v8 = (*(uint64_t (**)(void))(v7 + 16))();
    if (v8)
    {
      (***(void (****)(void))(a1 + 16))(*(void *)(a1 + 16));
      if ((int)a3 >= 1)
      {
        uint64_t v10 = 0LL;
        do
        {
          if (!*(_BYTE *)(a2 + v10))
          {
            else {
              float v11 = 0.0;
            }
            *(float *)(v8 + 4 * v10) = v11;
          }

          ++v10;
        }

        while (a3 != v10);
      }
    }

    return v8;
  }

  if ((*(unsigned int (**)(void))(v7 + 24))())
  {
    uint64_t v8 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 16) + 16LL))( *(void *)(a1 + 16),  a2,  a3);
    if (v8)
    {
      (***(void (****)(void))(a1 + 24))(*(void *)(a1 + 24));
      if ((int)a3 >= 1)
      {
        uint64_t v13 = 0LL;
        do
        {
          if (!*(_BYTE *)(a2 + v13))
          {
            else {
              float v14 = 0.0;
            }
            *(float *)(v8 + 4 * v13) = v14;
          }

          ++v13;
        }

        while (a3 != v13);
      }
    }

    return v8;
  }

  double v15 = (float *)(*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 24) + 16LL))( *(void *)(a1 + 24),  a2,  a3);
  BOOL v16 = (float *)(*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 16) + 16LL))( *(void *)(a1 + 16),  a2,  a3);
  uint64_t v17 = v16;
  if (v16) {
    BOOL v18 = v15 == 0LL;
  }
  else {
    BOOL v18 = 1;
  }
  if (!v18)
  {
    if ((int)a3 >= 1)
    {
      uint64_t v19 = 0LL;
      do
      {
        if (!*(_BYTE *)(a2 + v19))
        {
          if (v16[v19] <= v15[v19]) {
            float v20 = 1.0;
          }
          else {
            float v20 = 0.0;
          }
          v16[v19] = v20;
        }

        ++v19;
      }

      while (a3 != v19);
    }

uint64_t sub_1344A8()
{
  return 13LL;
}

uint64_t sub_1344B0(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(void, void))(**(void **)(a1 + 16) + 136LL))( *(void *)(a1 + 16),  *(void *)(a1 + 24));
  if ((_DWORD)result)
  {
    float v3 = sub_122A0C(0x18uLL);
    *float v3 = off_24D3F8;
    v3[1] = 0LL;
    *((_DWORD *)v3 + 4) = 1065353216;
    return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 296LL))(a1);
  }

  return result;
}

void sub_134514(void *a1)
{
}

void sub_134524(uint64_t a1)
{
}

uint64_t sub_13457C(uint64_t a1, uint64_t a2)
{
  int v4 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 24LL))(*(void *)(a1 + 16));
  uint64_t v5 = **(void **)(a1 + 24);
  if (v4)
  {
    uint64_t v6 = (*(uint64_t (**)(void))(v5 + 8))();
    if (v6)
    {
      (***(void (****)(void))(a1 + 16))(*(void *)(a1 + 16));
      if ((int)a2 >= 1)
      {
        uint64_t v8 = 0LL;
        do
        {
          else {
            float v9 = 0.0;
          }
          *(float *)(v6 + v_Block_object_dispose(va, 8) = v9;
          v8 += 4LL;
        }

        while (4LL * a2 != v8);
      }
    }

    return v6;
  }

  if ((*(unsigned int (**)(void))(v5 + 24))())
  {
    uint64_t v6 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 16) + 8LL))(*(void *)(a1 + 16), a2);
    if (v6)
    {
      (***(void (****)(void))(a1 + 24))(*(void *)(a1 + 24));
      if ((int)a2 >= 1)
      {
        uint64_t v11 = 0LL;
        do
        {
          else {
            float v12 = 0.0;
          }
          *(float *)(v6 + v11) = v12;
          v11 += 4LL;
        }

        while (4LL * a2 != v11);
      }
    }

    return v6;
  }

  uint64_t v13 = (char *)(*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 24) + 8LL))(*(void *)(a1 + 24), a2);
  float v14 = (char *)(*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 16) + 8LL))(*(void *)(a1 + 16), a2);
  double v15 = v14;
  if (v14) {
    BOOL v16 = v13 == 0LL;
  }
  else {
    BOOL v16 = 1;
  }
  if (!v16)
  {
    if ((int)a2 >= 1)
    {
      uint64_t v17 = 0LL;
      do
      {
        else {
          float v18 = 0.0;
        }
        *(float *)&v14[v17] = v18;
        v17 += 4LL;
      }

      while (4LL * a2 != v17);
    }

uint64_t sub_134730(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 24LL))(*(void *)(a1 + 16));
  uint64_t v7 = **(void **)(a1 + 24);
  if (v6)
  {
    uint64_t v8 = (*(uint64_t (**)(void))(v7 + 16))();
    if (v8)
    {
      (***(void (****)(void))(a1 + 16))(*(void *)(a1 + 16));
      if ((int)a3 >= 1)
      {
        uint64_t v10 = 0LL;
        do
        {
          if (!*(_BYTE *)(a2 + v10))
          {
            else {
              float v11 = 0.0;
            }
            *(float *)(v8 + 4 * v10) = v11;
          }

          ++v10;
        }

        while (a3 != v10);
      }
    }

    return v8;
  }

  if ((*(unsigned int (**)(void))(v7 + 24))())
  {
    uint64_t v8 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 16) + 16LL))( *(void *)(a1 + 16),  a2,  a3);
    if (v8)
    {
      (***(void (****)(void))(a1 + 24))(*(void *)(a1 + 24));
      if ((int)a3 >= 1)
      {
        uint64_t v13 = 0LL;
        do
        {
          if (!*(_BYTE *)(a2 + v13))
          {
            else {
              float v14 = 0.0;
            }
            *(float *)(v8 + 4 * v13) = v14;
          }

          ++v13;
        }

        while (a3 != v13);
      }
    }

    return v8;
  }

  double v15 = (float *)(*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 24) + 16LL))( *(void *)(a1 + 24),  a2,  a3);
  BOOL v16 = (float *)(*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 16) + 16LL))( *(void *)(a1 + 16),  a2,  a3);
  uint64_t v17 = v16;
  if (v16) {
    BOOL v18 = v15 == 0LL;
  }
  else {
    BOOL v18 = 1;
  }
  if (!v18)
  {
    if ((int)a3 >= 1)
    {
      uint64_t v19 = 0LL;
      do
      {
        if (!*(_BYTE *)(a2 + v19))
        {
          if (v16[v19] >= v15[v19]) {
            float v20 = 1.0;
          }
          else {
            float v20 = 0.0;
          }
          v16[v19] = v20;
        }

        ++v19;
      }

      while (a3 != v19);
    }

uint64_t sub_134918()
{
  return 14LL;
}

uint64_t sub_134920(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(void, void))(**(void **)(a1 + 16) + 136LL))( *(void *)(a1 + 16),  *(void *)(a1 + 24));
  if ((_DWORD)result)
  {
    float v3 = sub_122A0C(0x18uLL);
    *float v3 = off_24D3F8;
    v3[1] = 0LL;
    *((_DWORD *)v3 + 4) = 1065353216;
    return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 296LL))(a1);
  }

  return result;
}

void sub_134984(void *a1)
{
}

float sub_134994(uint64_t a1)
{
  float v2 = (***(float (****)(void))(a1 + 24))(*(void *)(a1 + 24));
  float result = 1.0;
  if (v2 == 0.0) {
    return 0.0;
  }
  return result;
}

char *sub_1349EC(uint64_t a1, uint64_t a2)
{
  int v4 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 24LL))(*(void *)(a1 + 16));
  uint64_t v5 = **(void **)(a1 + 24);
  if (v4)
  {
    int v6 = (char *)(*(uint64_t (**)(void))(v5 + 8))();
    if (!v6) {
      return v6;
    }
    if ((***(float (****)(void))(a1 + 16))(*(void *)(a1 + 16)) != 0.0)
    {
      if ((int)a2 >= 1)
      {
        uint64_t v7 = 0LL;
        do
        {
          else {
            float v8 = 1.0;
          }
          *(float *)&v6[v7] = v8;
          v7 += 4LL;
        }

        while (4LL * a2 != v7);
      }

      return v6;
    }

    goto LABEL_14;
  }

  if ((*(unsigned int (**)(void))(v5 + 24))())
  {
    int v6 = (char *)(*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 16) + 8LL))(*(void *)(a1 + 16), a2);
    if (!v6) {
      return v6;
    }
    if ((***(float (****)(void))(a1 + 24))(*(void *)(a1 + 24)) == 0.0)
    {
LABEL_14:
      return v6;
    }

    if ((int)a2 >= 1)
    {
      uint64_t v16 = 0LL;
      do
      {
        else {
          float v17 = 1.0;
        }
        *(float *)&v6[v16] = v17;
        v16 += 4LL;
      }

      while (4LL * a2 != v16);
    }
  }

  else
  {
    float v9 = (void *)(*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 24) + 8LL))(*(void *)(a1 + 24), a2);
    uint64_t v10 = (char *)(*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 16) + 8LL))(*(void *)(a1 + 16), a2);
    int v6 = v10;
    if (v10) {
      BOOL v11 = v9 == 0LL;
    }
    else {
      BOOL v11 = 1;
    }
    if (v11)
    {
      if (v10) {
        operator delete[](v10);
      }
      if (v9) {
        operator delete[](v9);
      }
      return 0LL;
    }

    else
    {
      if ((int)a2 >= 1)
      {
        uint64_t v12 = a2;
        uint64_t v13 = (float *)v10;
        float v14 = (float *)v9;
        do
        {
          if (*v13 == 0.0 || (float v15 = 1.0, *v14 == 0.0)) {
            float v15 = 0.0;
          }
          *v13++ = v15;
          ++v14;
          --v12;
        }

        while (v12);
      }

      operator delete[](v9);
    }
  }

  return v6;
}

uint64_t sub_134BD4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 24LL))(*(void *)(a1 + 16));
  uint64_t v7 = **(void **)(a1 + 24);
  if (v6)
  {
    uint64_t v8 = (*(uint64_t (**)(void))(v7 + 16))();
    if (v8)
    {
      if ((***(float (****)(void))(a1 + 16))(*(void *)(a1 + 16)) == 0.0)
      {
        if ((int)a3 >= 1)
        {
          uint64_t v9 = 0LL;
          do
          {
            if (!*(_BYTE *)(a2 + v9)) {
              *(_DWORD *)(v8 + 4 * v9) = 0;
            }
            ++v9;
          }

          while (a3 != v9);
        }
      }

      else if ((int)a3 >= 1)
      {
        uint64_t v11 = 0LL;
        do
        {
          if (!*(_BYTE *)(a2 + v11))
          {
            else {
              float v12 = 1.0;
            }
            *(float *)(v8 + 4 * v11) = v12;
          }

          ++v11;
        }

        while (a3 != v11);
      }
    }

    return v8;
  }

  if ((*(unsigned int (**)(void))(v7 + 24))())
  {
    uint64_t v8 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 16) + 16LL))( *(void *)(a1 + 16),  a2,  a3);
    if (v8)
    {
      if ((***(float (****)(void))(a1 + 24))(*(void *)(a1 + 24)) == 0.0)
      {
        if ((int)a3 >= 1)
        {
          uint64_t v10 = 0LL;
          do
          {
            if (!*(_BYTE *)(a2 + v10)) {
              *(_DWORD *)(v8 + 4 * v10) = 0;
            }
            ++v10;
          }

          while (a3 != v10);
        }
      }

      else if ((int)a3 >= 1)
      {
        uint64_t v19 = 0LL;
        do
        {
          if (!*(_BYTE *)(a2 + v19))
          {
            else {
              float v20 = 1.0;
            }
            *(float *)(v8 + 4 * v19) = v20;
          }

          ++v19;
        }

        while (a3 != v19);
      }
    }

    return v8;
  }

  uint64_t v13 = (float *)(*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 24) + 16LL))( *(void *)(a1 + 24),  a2,  a3);
  float v14 = (float *)(*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 16) + 16LL))( *(void *)(a1 + 16),  a2,  a3);
  float v15 = v14;
  if (v14) {
    BOOL v16 = v13 == 0LL;
  }
  else {
    BOOL v16 = 1;
  }
  if (!v16)
  {
    if ((int)a3 >= 1)
    {
      uint64_t v17 = 0LL;
      do
      {
        if (!*(_BYTE *)(a2 + v17))
        {
          if (v14[v17] == 0.0 || (float v18 = 1.0, v13[v17] == 0.0)) {
            float v18 = 0.0;
          }
          v14[v17] = v18;
        }

        ++v17;
      }

      while (a3 != v17);
    }

uint64_t sub_134E2C()
{
  return 15LL;
}

uint64_t sub_134E34(uint64_t a1)
{
  if ((*(unsigned int (**)(void))(**(void **)(a1 + 16) + 40LL))(*(void *)(a1 + 16))
    && (***(float (****)(void))(a1 + 16))(*(void *)(a1 + 16)) == 0.0
    || (*(unsigned int (**)(void))(**(void **)(a1 + 24) + 40LL))(*(void *)(a1 + 24))
    && (***(float (****)(void))(a1 + 24))(*(void *)(a1 + 24)) == 0.0)
  {
    return 1LL;
  }

  else
  {
    return sub_130B48(a1);
  }

void sub_134EBC(uint64_t a1)
{
  if ((*(unsigned int (**)(void))(**(void **)(a1 + 16) + 40LL))(*(void *)(a1 + 16)))
  {
    if ((***(float (****)(void))(a1 + 16))(*(void *)(a1 + 16)) == 0.0)
    {
      float v2 = (float *)sub_122A0C(0x18uLL);
      float v3 = 0.0;
    }

    else
    {
      float v2 = (float *)sub_122A0C(0x18uLL);
      float v3 = (**(float (***)(uint64_t))a1)(a1);
    }

    *(void *)float v2 = off_24D3F8;
    *((void *)v2 + 1) = 0LL;
    void v2[4] = v3;
    (*(void (**)(uint64_t, float *))(*(void *)a1 + 296LL))(a1, v2);
  }

  else if ((*(unsigned int (**)(void))(**(void **)(a1 + 24) + 40LL))(*(void *)(a1 + 24)))
  {
    if ((***(float (****)(void))(a1 + 24))(*(void *)(a1 + 24)) == 0.0)
    {
      int v4 = sub_122A0C(0x18uLL);
      void *v4 = off_24D3F8;
      v4[1] = 0LL;
      *((_DWORD *)v4 + 4) = 0;
      (*(void (**)(uint64_t))(*(void *)a1 + 296LL))(a1);
    }
  }

void sub_134FD4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (v14) {
    free(v14);
  }
  if (a2 != 1) {
    _Unwind_Resume(a1);
  }
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

float sub_135028(uint64_t a1)
{
  float v2 = 1.0;
  if ((***(float (****)(void))(a1 + 16))(*(void *)(a1 + 16)) == 0.0
    && (***(float (****)(void))(a1 + 24))(*(void *)(a1 + 24)) == 0.0)
  {
    return 0.0;
  }

  return v2;
}

char *sub_135088(uint64_t a1, uint64_t a2)
{
  int v4 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 24LL))(*(void *)(a1 + 16));
  uint64_t v5 = **(void **)(a1 + 24);
  if (v4)
  {
    int v6 = (char *)(*(uint64_t (**)(void))(v5 + 8))();
    if (!v6) {
      return v6;
    }
    if ((***(float (****)(void))(a1 + 16))(*(void *)(a1 + 16)) == 0.0)
    {
      if ((int)a2 >= 1)
      {
        uint64_t v7 = 0LL;
        do
        {
          else {
            float v8 = 1.0;
          }
          *(float *)&v6[v7] = v8;
          v7 += 4LL;
        }

        while (4LL * a2 != v7);
      }

      return v6;
    }

    goto LABEL_14;
  }

  if ((*(unsigned int (**)(void))(v5 + 24))())
  {
    int v6 = (char *)(*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 16) + 8LL))(*(void *)(a1 + 16), a2);
    if (!v6) {
      return v6;
    }
    if ((***(float (****)(void))(a1 + 24))(*(void *)(a1 + 24)) != 0.0)
    {
LABEL_14:
      return v6;
    }

    if ((int)a2 >= 1)
    {
      uint64_t v16 = 0LL;
      do
      {
        else {
          float v17 = 1.0;
        }
        *(float *)&v6[v16] = v17;
        v16 += 4LL;
      }

      while (4LL * a2 != v16);
    }
  }

  else
  {
    uint64_t v9 = (void *)(*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 24) + 8LL))(*(void *)(a1 + 24), a2);
    uint64_t v10 = (char *)(*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 16) + 8LL))(*(void *)(a1 + 16), a2);
    int v6 = v10;
    if (v10) {
      BOOL v11 = v9 == 0LL;
    }
    else {
      BOOL v11 = 1;
    }
    if (v11)
    {
      if (v10) {
        operator delete[](v10);
      }
      if (v9) {
        operator delete[](v9);
      }
      return 0LL;
    }

    else
    {
      if ((int)a2 >= 1)
      {
        uint64_t v12 = a2;
        uint64_t v13 = (float *)v10;
        float v14 = (float *)v9;
        do
        {
          float v15 = 1.0;
          if (*v13 == 0.0 && *v14 == 0.0) {
            float v15 = 0.0;
          }
          *v13++ = v15;
          ++v14;
          --v12;
        }

        while (v12);
      }

      operator delete[](v9);
    }
  }

  return v6;
}

uint64_t sub_135278(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 24LL))(*(void *)(a1 + 16));
  uint64_t v7 = **(void **)(a1 + 24);
  if (v6)
  {
    uint64_t v8 = (*(uint64_t (**)(void))(v7 + 16))();
    if (v8)
    {
      if ((***(float (****)(void))(a1 + 16))(*(void *)(a1 + 16)) == 0.0)
      {
        if ((int)a3 >= 1)
        {
          uint64_t v11 = 0LL;
          do
          {
            if (!*(_BYTE *)(a2 + v11))
            {
              else {
                float v12 = 1.0;
              }
              *(float *)(v8 + 4 * v11) = v12;
            }

            ++v11;
          }

          while (a3 != v11);
        }
      }

      else if ((int)a3 >= 1)
      {
        uint64_t v9 = 0LL;
        do
        {
          if (!*(_BYTE *)(a2 + v9)) {
            *(_DWORD *)(v8 + 4 * v9) = 1065353216;
          }
          ++v9;
        }

        while (a3 != v9);
      }
    }

    return v8;
  }

  if ((*(unsigned int (**)(void))(v7 + 24))())
  {
    uint64_t v8 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 16) + 16LL))( *(void *)(a1 + 16),  a2,  a3);
    if (v8)
    {
      if ((***(float (****)(void))(a1 + 24))(*(void *)(a1 + 24)) == 0.0)
      {
        if ((int)a3 >= 1)
        {
          uint64_t v19 = 0LL;
          do
          {
            if (!*(_BYTE *)(a2 + v19))
            {
              else {
                float v20 = 1.0;
              }
              *(float *)(v8 + 4 * v19) = v20;
            }

            ++v19;
          }

          while (a3 != v19);
        }
      }

      else if ((int)a3 >= 1)
      {
        uint64_t v10 = 0LL;
        do
        {
          if (!*(_BYTE *)(a2 + v10)) {
            *(_DWORD *)(v8 + 4 * v10) = 1065353216;
          }
          ++v10;
        }

        while (a3 != v10);
      }
    }

    return v8;
  }

  uint64_t v13 = (float *)(*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 24) + 16LL))( *(void *)(a1 + 24),  a2,  a3);
  float v14 = (float *)(*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 16) + 16LL))( *(void *)(a1 + 16),  a2,  a3);
  float v15 = v14;
  if (v14) {
    BOOL v16 = v13 == 0LL;
  }
  else {
    BOOL v16 = 1;
  }
  if (!v16)
  {
    if ((int)a3 >= 1)
    {
      uint64_t v17 = 0LL;
      do
      {
        if (!*(_BYTE *)(a2 + v17))
        {
          float v18 = 1.0;
          if (v14[v17] == 0.0 && v13[v17] == 0.0) {
            float v18 = 0.0;
          }
          v14[v17] = v18;
        }

        ++v17;
      }

      while (a3 != v17);
    }

uint64_t sub_1354D8()
{
  return 16LL;
}

uint64_t sub_1354E0(uint64_t a1)
{
  if ((!(*(unsigned int (**)(void))(**(void **)(a1 + 16) + 40LL))(*(void *)(a1 + 16))
     || (***(float (****)(void))(a1 + 16))(*(void *)(a1 + 16)) == 0.0)
    && (!(*(unsigned int (**)(void))(**(void **)(a1 + 24) + 40LL))(*(void *)(a1 + 24))
     || (***(float (****)(void))(a1 + 24))(*(void *)(a1 + 24)) == 0.0))
  {
    return sub_130B48(a1);
  }

  else
  {
    return 1LL;
  }

void sub_135568(uint64_t a1)
{
  if ((*(unsigned int (**)(void))(**(void **)(a1 + 16) + 40LL))(*(void *)(a1 + 16)))
  {
    if ((***(float (****)(void))(a1 + 24))(*(void *)(a1 + 24)) == 0.0)
    {
      float v2 = (float *)sub_122A0C(0x18uLL);
      float v3 = 0.0;
    }

    else
    {
LABEL_9:
      float v2 = (float *)sub_122A0C(0x18uLL);
      float v3 = 1.0;
    }

    *(void *)float v2 = off_24D3F8;
    *((void *)v2 + 1) = 0LL;
    void v2[4] = v3;
    (*(void (**)(uint64_t))(*(void *)a1 + 296LL))(a1);
  }

  else if ((*(unsigned int (**)(void))(**(void **)(a1 + 24) + 40LL))(*(void *)(a1 + 24)))
  {
    if ((***(float (****)(void))(a1 + 24))(*(void *)(a1 + 24)) != 0.0)
    {
      int v4 = sub_122A0C(0x18uLL);
      void *v4 = off_24D3F8;
      v4[1] = 0LL;
      *((_DWORD *)v4 + 4) = 1065353216;
      (*(void (**)(uint64_t))(*(void *)a1 + 296LL))(a1);
    }
  }

void sub_135684(void *a1)
{
}

float sub_135698(uint64_t a1)
{
  uint64_t v2 = (uint64_t)(***(float (****)(void))(a1 + 16))(*(void *)(a1 + 16));
  return (float)((uint64_t)(***(float (****)(void))(a1 + 24))(*(void *)(a1 + 24)) & (unint64_t)v2);
}

uint64_t sub_1356E4(uint64_t a1, uint64_t a2)
{
  int v4 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 24LL))(*(void *)(a1 + 16));
  uint64_t v5 = **(void **)(a1 + 24);
  if (v4)
  {
    uint64_t v6 = (*(uint64_t (**)(void))(v5 + 8))();
    if (v6)
    {
      (***(void (****)(void))(a1 + 16))(*(void *)(a1 + 16));
      if ((int)a2 >= 1)
      {
        uint64_t v8 = 0LL;
        do
        {
          *(float *)(v6 + v_Block_object_dispose(va, 8) = (float)((uint64_t)*(float *)(v6 + v8) & (unint64_t)(uint64_t)v7);
          v8 += 4LL;
        }

        while (4LL * a2 != v8);
      }
    }

    return v6;
  }

  if ((*(unsigned int (**)(void))(v5 + 24))())
  {
    uint64_t v6 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 16) + 8LL))(*(void *)(a1 + 16), a2);
    if (v6)
    {
      (***(void (****)(void))(a1 + 24))(*(void *)(a1 + 24));
      if ((int)a2 >= 1)
      {
        uint64_t v10 = 0LL;
        do
        {
          *(float *)(v6 + v10) = (float)((uint64_t)*(float *)(v6 + v10) & (unint64_t)(uint64_t)v9);
          v10 += 4LL;
        }

        while (4LL * a2 != v10);
      }
    }

    return v6;
  }

  uint64_t v11 = (char *)(*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 24) + 8LL))(*(void *)(a1 + 24), a2);
  float v12 = (char *)(*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 16) + 8LL))(*(void *)(a1 + 16), a2);
  uint64_t v13 = v12;
  if (v12) {
    BOOL v14 = v11 == 0LL;
  }
  else {
    BOOL v14 = 1;
  }
  if (!v14)
  {
    if ((int)a2 >= 1)
    {
      uint64_t v15 = 0LL;
      do
      {
        *(float *)&v12[v15] = (float)((uint64_t)*(float *)&v11[v15] & (unint64_t)(uint64_t)*(float *)&v12[v15]);
        v15 += 4LL;
      }

      while (4LL * a2 != v15);
    }

uint64_t sub_135898(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 24LL))(*(void *)(a1 + 16));
  uint64_t v7 = **(void **)(a1 + 24);
  if (v6)
  {
    uint64_t v8 = (*(uint64_t (**)(void))(v7 + 16))();
    if (v8)
    {
      (***(void (****)(void))(a1 + 16))(*(void *)(a1 + 16));
      if ((int)a3 >= 1)
      {
        uint64_t v10 = 0LL;
        do
        {
          if (!*(_BYTE *)(a2 + v10)) {
            *(float *)(v8 + 4 * v10) = (float)((uint64_t)*(float *)(v8 + 4 * v10) & (unint64_t)(uint64_t)v9);
          }
          ++v10;
        }

        while (a3 != v10);
      }
    }

    return v8;
  }

  if ((*(unsigned int (**)(void))(v7 + 24))())
  {
    uint64_t v8 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 16) + 16LL))( *(void *)(a1 + 16),  a2,  a3);
    if (v8)
    {
      (***(void (****)(void))(a1 + 24))(*(void *)(a1 + 24));
      if ((int)a3 >= 1)
      {
        uint64_t v12 = 0LL;
        do
        {
          if (!*(_BYTE *)(a2 + v12)) {
            *(float *)(v8 + 4 * v12) = (float)((uint64_t)*(float *)(v8 + 4 * v12) & (unint64_t)(uint64_t)v11);
          }
          ++v12;
        }

        while (a3 != v12);
      }
    }

    return v8;
  }

  uint64_t v13 = (float *)(*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 24) + 16LL))( *(void *)(a1 + 24),  a2,  a3);
  BOOL v14 = (float *)(*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 16) + 16LL))( *(void *)(a1 + 16),  a2,  a3);
  uint64_t v15 = v14;
  if (v14) {
    BOOL v16 = v13 == 0LL;
  }
  else {
    BOOL v16 = 1;
  }
  if (!v16)
  {
    if ((int)a3 >= 1)
    {
      uint64_t v17 = 0LL;
      do
      {
        if (!*(_BYTE *)(a2 + v17)) {
          v14[v17] = (float)((uint64_t)v13[v17] & (unint64_t)(uint64_t)v14[v17]);
        }
        ++v17;
      }

      while (a3 != v17);
    }

uint64_t sub_135A80()
{
  return 18LL;
}

uint64_t sub_135A88(uint64_t a1)
{
  if ((*(unsigned int (**)(void))(**(void **)(a1 + 16) + 40LL))(*(void *)(a1 + 16))
    && (***(float (****)(void))(a1 + 16))(*(void *)(a1 + 16)) == 0.0
    || (*(unsigned int (**)(void))(**(void **)(a1 + 24) + 40LL))(*(void *)(a1 + 24))
    && (***(float (****)(void))(a1 + 24))(*(void *)(a1 + 24)) == 0.0)
  {
    return 1LL;
  }

  else
  {
    return sub_130B48(a1);
  }

void sub_135B10(uint64_t a1)
{
  uint64_t v2 = (void *)(a1 + 16);
  float v3 = (void *)(a1 + 24);
  if ((*(unsigned int (**)(void, void))(**(void **)(a1 + 16) + 136LL))( *(void *)(a1 + 16),  *(void *)(a1 + 24)))
  {
    goto LABEL_2;
  }

  if ((*(unsigned int (**)(void))(*(void *)*v2 + 40LL))(*v2)
    && (**(float (***)(void))*v2)(*v2) == 0.0
    || (*(unsigned int (**)(void))(*(void *)*v3 + 40LL))(*v3)
    && (**(float (***)(void))*v3)(*v3) == 0.0)
  {
    int v4 = sub_122A0C(0x18uLL);
    void *v4 = off_24D3F8;
    v4[1] = 0LL;
    *((_DWORD *)v4 + 4) = 0;
    (*(void (**)(uint64_t))(*(void *)a1 + 296LL))(a1);
  }

  else
  {
    if ((*(unsigned int (**)(void))(*(void *)*v2 + 40LL))(*v2)
      && (**(float (***)(void))*v2)(*v2) == -1.0)
    {
LABEL_2:
      uint64_t v2 = (void *)(a1 + 24);
LABEL_3:
      (*(void (**)(uint64_t, void))(*(void *)a1 + 296LL))(a1, *v2);
      return;
    }

    if ((*(unsigned int (**)(void))(*(void *)*v3 + 40LL))(*v3)
      && (**(float (***)(void))*v3)(*v3) == -1.0)
    {
      goto LABEL_3;
    }
  }

void sub_135C5C(void *a1)
{
}

float sub_135C70(uint64_t a1)
{
  uint64_t v2 = (uint64_t)(***(float (****)(void))(a1 + 16))(*(void *)(a1 + 16));
  return (float)((uint64_t)(***(float (****)(void))(a1 + 24))(*(void *)(a1 + 24)) | v2);
}

uint64_t sub_135CBC(uint64_t a1, uint64_t a2)
{
  int v4 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 24LL))(*(void *)(a1 + 16));
  uint64_t v5 = **(void **)(a1 + 24);
  if (v4)
  {
    uint64_t v6 = (*(uint64_t (**)(void))(v5 + 8))();
    if (v6)
    {
      (***(void (****)(void))(a1 + 16))(*(void *)(a1 + 16));
      if ((int)a2 >= 1)
      {
        uint64_t v8 = 0LL;
        do
        {
          *(float *)(v6 + v_Block_object_dispose(va, 8) = (float)((uint64_t)*(float *)(v6 + v8) | (unint64_t)(uint64_t)v7);
          v8 += 4LL;
        }

        while (4LL * a2 != v8);
      }
    }

    return v6;
  }

  if ((*(unsigned int (**)(void))(v5 + 24))())
  {
    uint64_t v6 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 16) + 8LL))(*(void *)(a1 + 16), a2);
    if (v6)
    {
      (***(void (****)(void))(a1 + 24))(*(void *)(a1 + 24));
      if ((int)a2 >= 1)
      {
        uint64_t v10 = 0LL;
        do
        {
          *(float *)(v6 + v10) = (float)((uint64_t)*(float *)(v6 + v10) | (unint64_t)(uint64_t)v9);
          v10 += 4LL;
        }

        while (4LL * a2 != v10);
      }
    }

    return v6;
  }

  float v11 = (char *)(*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 24) + 8LL))(*(void *)(a1 + 24), a2);
  uint64_t v12 = (char *)(*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 16) + 8LL))(*(void *)(a1 + 16), a2);
  uint64_t v13 = v12;
  if (v12) {
    BOOL v14 = v11 == 0LL;
  }
  else {
    BOOL v14 = 1;
  }
  if (!v14)
  {
    if ((int)a2 >= 1)
    {
      uint64_t v15 = 0LL;
      do
      {
        *(float *)&v12[v15] = (float)((uint64_t)*(float *)&v11[v15] | (unint64_t)(uint64_t)*(float *)&v12[v15]);
        v15 += 4LL;
      }

      while (4LL * a2 != v15);
    }

uint64_t sub_135E70(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 24LL))(*(void *)(a1 + 16));
  uint64_t v7 = **(void **)(a1 + 24);
  if (v6)
  {
    uint64_t v8 = (*(uint64_t (**)(void))(v7 + 16))();
    if (v8)
    {
      (***(void (****)(void))(a1 + 16))(*(void *)(a1 + 16));
      if ((int)a3 >= 1)
      {
        uint64_t v10 = 0LL;
        do
        {
          if (!*(_BYTE *)(a2 + v10)) {
            *(float *)(v8 + 4 * v10) = (float)((uint64_t)*(float *)(v8 + 4 * v10) | (unint64_t)(uint64_t)v9);
          }
          ++v10;
        }

        while (a3 != v10);
      }
    }

    return v8;
  }

  if ((*(unsigned int (**)(void))(v7 + 24))())
  {
    uint64_t v8 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 16) + 16LL))( *(void *)(a1 + 16),  a2,  a3);
    if (v8)
    {
      (***(void (****)(void))(a1 + 24))(*(void *)(a1 + 24));
      if ((int)a3 >= 1)
      {
        uint64_t v12 = 0LL;
        do
        {
          if (!*(_BYTE *)(a2 + v12)) {
            *(float *)(v8 + 4 * v12) = (float)((uint64_t)*(float *)(v8 + 4 * v12) | (unint64_t)(uint64_t)v11);
          }
          ++v12;
        }

        while (a3 != v12);
      }
    }

    return v8;
  }

  uint64_t v13 = (float *)(*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 24) + 16LL))( *(void *)(a1 + 24),  a2,  a3);
  BOOL v14 = (float *)(*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 16) + 16LL))( *(void *)(a1 + 16),  a2,  a3);
  uint64_t v15 = v14;
  if (v14) {
    BOOL v16 = v13 == 0LL;
  }
  else {
    BOOL v16 = 1;
  }
  if (!v16)
  {
    if ((int)a3 >= 1)
    {
      uint64_t v17 = 0LL;
      do
      {
        if (!*(_BYTE *)(a2 + v17)) {
          v14[v17] = (float)((uint64_t)v13[v17] | (unint64_t)(uint64_t)v14[v17]);
        }
        ++v17;
      }

      while (a3 != v17);
    }

uint64_t sub_136058()
{
  return 19LL;
}

uint64_t sub_136060(uint64_t a1)
{
  if ((*(unsigned int (**)(void))(**(void **)(a1 + 16) + 40LL))(*(void *)(a1 + 16))
    && (***(float (****)(void))(a1 + 16))(*(void *)(a1 + 16)) == -1.0
    || (*(unsigned int (**)(void))(**(void **)(a1 + 24) + 40LL))(*(void *)(a1 + 24))
    && (***(float (****)(void))(a1 + 24))(*(void *)(a1 + 24)) == -1.0)
  {
    return 1LL;
  }

  else
  {
    return sub_130B48(a1);
  }

void sub_1360F0(uint64_t a1)
{
  uint64_t v2 = (void *)(a1 + 16);
  if ((*(unsigned int (**)(void))(**(void **)(a1 + 16) + 40LL))(*(void *)(a1 + 16))
    && (**(float (***)(void))*v2)(*v2) == -1.0)
  {
    float v3 = (float *)sub_122A0C(0x18uLL);
    (***(void (****)(void))(a1 + 24))(*(void *)(a1 + 24));
LABEL_7:
    *(void *)float v3 = off_24D3F8;
    *((void *)v3 + 1) = 0LL;
    v3[4] = v4;
    (*(void (**)(uint64_t, float *))(*(void *)a1 + 296LL))(a1, v3);
    return;
  }

  uint64_t v5 = (void *)(a1 + 24);
  if ((*(unsigned int (**)(void))(**(void **)(a1 + 24) + 40LL))(*(void *)(a1 + 24))
    && (**(float (***)(void))*v5)(*v5) == -1.0)
  {
    float v3 = (float *)sub_122A0C(0x18uLL);
    float v4 = (**(float (***)(void))*v2)(*v2);
    goto LABEL_7;
  }

  if ((*(unsigned int (**)(void))(*(void *)*v2 + 40LL))(*v2)
    && (**(float (***)(void))*v2)(*v2) == 0.0)
  {
    uint64_t v2 = (void *)(a1 + 24);
LABEL_13:
    (*(void (**)(uint64_t, void))(*(void *)a1 + 296LL))(a1, *v2);
    return;
  }

  if ((*(unsigned int (**)(void))(*(void *)*v5 + 40LL))(*v5)
    && (**(float (***)(void))*v5)(*v5) == 0.0)
  {
    goto LABEL_13;
  }

void sub_136258( void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (v14) {
    free(v14);
  }
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

float sub_13628C(uint64_t a1)
{
  uint64_t v2 = (uint64_t)(***(float (****)(void))(a1 + 16))(*(void *)(a1 + 16));
  return (float)((uint64_t)(***(float (****)(void))(a1 + 24))(*(void *)(a1 + 24)) ^ v2);
}

uint64_t sub_1362D8(uint64_t a1, uint64_t a2)
{
  int v4 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 24LL))(*(void *)(a1 + 16));
  uint64_t v5 = **(void **)(a1 + 24);
  if (v4)
  {
    uint64_t v6 = (*(uint64_t (**)(void))(v5 + 8))();
    if (v6)
    {
      (***(void (****)(void))(a1 + 16))(*(void *)(a1 + 16));
      if ((int)a2 >= 1)
      {
        uint64_t v8 = 0LL;
        do
        {
          *(float *)(v6 + v_Block_object_dispose(va, 8) = (float)((uint64_t)*(float *)(v6 + v8) ^ (unint64_t)(uint64_t)v7);
          v8 += 4LL;
        }

        while (4LL * a2 != v8);
      }
    }

    return v6;
  }

  if ((*(unsigned int (**)(void))(v5 + 24))())
  {
    uint64_t v6 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 16) + 8LL))(*(void *)(a1 + 16), a2);
    if (v6)
    {
      (***(void (****)(void))(a1 + 24))(*(void *)(a1 + 24));
      if ((int)a2 >= 1)
      {
        uint64_t v10 = 0LL;
        do
        {
          *(float *)(v6 + v10) = (float)((uint64_t)*(float *)(v6 + v10) ^ (unint64_t)(uint64_t)v9);
          v10 += 4LL;
        }

        while (4LL * a2 != v10);
      }
    }

    return v6;
  }

  float v11 = (char *)(*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 24) + 8LL))(*(void *)(a1 + 24), a2);
  uint64_t v12 = (char *)(*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 16) + 8LL))(*(void *)(a1 + 16), a2);
  uint64_t v13 = v12;
  if (v12) {
    BOOL v14 = v11 == 0LL;
  }
  else {
    BOOL v14 = 1;
  }
  if (!v14)
  {
    if ((int)a2 >= 1)
    {
      uint64_t v15 = 0LL;
      do
      {
        *(float *)&v12[v15] = (float)((uint64_t)*(float *)&v11[v15] ^ (unint64_t)(uint64_t)*(float *)&v12[v15]);
        v15 += 4LL;
      }

      while (4LL * a2 != v15);
    }

uint64_t sub_13648C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 24LL))(*(void *)(a1 + 16));
  uint64_t v7 = **(void **)(a1 + 24);
  if (v6)
  {
    uint64_t v8 = (*(uint64_t (**)(void))(v7 + 16))();
    if (v8)
    {
      (***(void (****)(void))(a1 + 16))(*(void *)(a1 + 16));
      if ((int)a3 >= 1)
      {
        uint64_t v10 = 0LL;
        do
        {
          if (!*(_BYTE *)(a2 + v10)) {
            *(float *)(v8 + 4 * v10) = (float)((uint64_t)*(float *)(v8 + 4 * v10) ^ (unint64_t)(uint64_t)v9);
          }
          ++v10;
        }

        while (a3 != v10);
      }
    }

    return v8;
  }

  if ((*(unsigned int (**)(void))(v7 + 24))())
  {
    uint64_t v8 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 16) + 16LL))( *(void *)(a1 + 16),  a2,  a3);
    if (v8)
    {
      (***(void (****)(void))(a1 + 24))(*(void *)(a1 + 24));
      if ((int)a3 >= 1)
      {
        uint64_t v12 = 0LL;
        do
        {
          if (!*(_BYTE *)(a2 + v12)) {
            *(float *)(v8 + 4 * v12) = (float)((uint64_t)*(float *)(v8 + 4 * v12) ^ (unint64_t)(uint64_t)v11);
          }
          ++v12;
        }

        while (a3 != v12);
      }
    }

    return v8;
  }

  uint64_t v13 = (float *)(*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 24) + 16LL))( *(void *)(a1 + 24),  a2,  a3);
  BOOL v14 = (float *)(*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 16) + 16LL))( *(void *)(a1 + 16),  a2,  a3);
  uint64_t v15 = v14;
  if (v14) {
    BOOL v16 = v13 == 0LL;
  }
  else {
    BOOL v16 = 1;
  }
  if (!v16)
  {
    if ((int)a3 >= 1)
    {
      uint64_t v17 = 0LL;
      do
      {
        if (!*(_BYTE *)(a2 + v17)) {
          v14[v17] = (float)((uint64_t)v13[v17] ^ (unint64_t)(uint64_t)v14[v17]);
        }
        ++v17;
      }

      while (a3 != v17);
    }

uint64_t sub_136674()
{
  return 20LL;
}

void sub_13667C(void **a1)
{
  uint64_t v2 = a1 + 2;
  if ((*(unsigned int (**)(void *))(*a1[2] + 40LL))(a1[2])
    && (**(float (***)(void))*v2)(*v2) == 0.0)
  {
    uint64_t v2 = a1 + 3;
LABEL_6:
    ((void (*)(void **, void))(*a1)[37])(a1, *v2);
    return;
  }

  if ((*(unsigned int (**)(void *))(*a1[3] + 40LL))(a1[3])
    && (*(float (**)(void *))*a1[3])(a1[3]) == 0.0)
  {
    goto LABEL_6;
  }

void sub_136714(void *a1)
{
}

uint64_t sub_136724(uint64_t a1)
{
  BOOL v2 = (***(float (****)(void))(a1 + 16))(*(void *)(a1 + 16)) != 0.0;
  return (*(uint64_t (**)(void, BOOL))(**(void **)(a1 + 24) + 304LL))(*(void *)(a1 + 24), v2);
}

uint64_t sub_136764(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void, void, uint64_t))(**(void **)(a1 + 24) + 312LL))( *(void *)(a1 + 24),  *(void *)(a1 + 16),  a2);
}

uint64_t sub_13677C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void, void, uint64_t, uint64_t))(**(void **)(a1 + 24) + 320LL))( *(void *)(a1 + 24),  *(void *)(a1 + 16),  a2,  a3);
}

uint64_t sub_136798()
{
  return 23LL;
}

void *sub_1367A0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 120LL))(*(void *)(a1 + 16));
  uint64_t v5 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 24) + 112LL))(*(void *)(a1 + 24), a2);
  int v6 = sub_122A0C(0x20uLL);
  sub_136AC8(v6, v4, v5);
  return v6;
}

void sub_136830(_Unwind_Exception *exception_object, int a2)
{
  int v6 = v4;
  if (v6) {
    free(v6);
  }
  if (a2 == 1)
  {
    __cxa_begin_catch(exception_object);
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 152LL))(v2);
    }
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 152LL))(v3);
    }
    __cxa_end_catch();
    JUMPOUT(0x136818LL);
  }

  _Unwind_Resume(exception_object);
}

void *sub_1368B4(uint64_t a1)
{
  float result = *(void **)(a1 + 24);
  if (result)
  {
    if (result)
    {
      uint64_t v3 = result;
      if ((*(unsigned int (**)(void))(**(void **)(a1 + 16) + 40LL))(*(void *)(a1 + 16))
        && (uint64_t v4 = *(void *)(a1 + 8)) != 0)
      {
        BOOL v5 = (***(float (****)(void))(a1 + 16))(*(void *)(a1 + 16)) == 0.0;
        v6.n128_u32[0] = 0;
        if (!v5) {
          v6.n128_f32[0] = 1.0;
        }
        return (void *)(*(uint64_t (**)(void *, uint64_t, __n128))(*(void *)v3 + 328LL))(v3, v4, v6);
      }

      else
      {
        float result = (void *)(*(uint64_t (**)(void *))(*(void *)v3 + 336LL))(v3);
        if ((_DWORD)result)
        {
          v7.n128_u32[0] = 1.0;
          return (void *)(*(uint64_t (**)(void *, void, __n128))(*(void *)v3 + 328LL))( v3,  *(void *)(a1 + 8),  v7);
        }
      }
    }
  }

  return result;
}

uint64_t *sub_13698C(uint64_t *a1, uint64_t *a2, const double *a3)
{
  BOOL v5 = sub_12FF1C(a1, a2, (uint64_t)a3);
  uint64_t *v5 = (uint64_t)off_252A80;
  __n128 v6 = (const void *)v5[3];
  if (!v6
  {
    LODWORD(xmmword_2B0AD0) = 28;
    int64x2_t v9 = (int64x2_t)vld1q_dup_f64(a3);
    uint64_t v8 = (int64x2_t *)(a3 + 1);
    *(__int128 *)((char *)&xmmword_2B0AD0 + _Block_object_dispose(va, 8) = (__int128)vsubq_s64(*v8, v9);
    exception = __cxa_allocate_exception(0x18uLL);
    uint64_t v11 = qword_2B0AE0;
    *(_OWORD *)exception = xmmword_2B0AD0;
    exception[2] = v11;
  }

  return a1;
}

void sub_136A38(_Unwind_Exception *a1)
{
}

void *sub_136A50(void *a1)
{
  *a1 = off_258680;
  uint64_t v3 = a1 + 2;
  uint64_t v2 = a1[2];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 152LL))(v2);
  }
  uint64_t v4 = a1[3];
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 152LL))(v4);
  }
  *uint64_t v3 = 0LL;
  v3[1] = 0LL;
  *a1 = off_24E938;
  a1[1] = 0LL;
  return a1;
}

void sub_136AB8(_Unwind_Exception *a1)
{
  void *v1 = off_24E938;
  v1[1] = 0LL;
  _Unwind_Resume(a1);
}

void *sub_136AC8(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = sub_130040(a1, a2, a3);
  void *v4 = off_252A80;
  BOOL v5 = (const void *)v4[3];
  if (!v5
  {
    LODWORD(xmmword_2B0AD0) = 28;
    *((void *)&xmmword_2B0AD0 + 1) = -1LL;
    qword_2B0AE0 = -1LL;
    exception = __cxa_allocate_exception(0x18uLL);
    uint64_t v8 = qword_2B0AE0;
    *(_OWORD *)exception = xmmword_2B0AD0;
    exception[2] = v8;
  }

  return a1;
}

void sub_136B60(_Unwind_Exception *a1)
{
}

float sub_136B78(uint64_t a1)
{
  return 0.0;
}

uint64_t sub_136BA4(uint64_t a1, int a2)
{
  uint64_t v2 = 16LL;
  if (!a2) {
    uint64_t v2 = 24LL;
  }
  return (***(uint64_t (****)(void))(a1 + v2))(*(void *)(a1 + v2));
}

uint64_t sub_136BC4()
{
  return 0LL;
}

uint64_t sub_136BCC()
{
  return 0LL;
}

uint64_t sub_136BD4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 8LL))(a2, a3);
  if (!v5) {
    return 0LL;
  }
  __n128 v6 = (char *)v5;
  int v7 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 24LL))(*(void *)(a1 + 16));
  uint64_t v8 = **(void **)(a1 + 24);
  if (v7)
  {
    uint64_t v9 = (*(uint64_t (**)(void))(v8 + 8))();
    if (v9)
    {
      (***(void (****)(void))(a1 + 16))(*(void *)(a1 + 16));
      if ((int)a3 >= 1)
      {
        uint64_t v11 = 0LL;
        do
        {
          v11 += 4LL;
        }

        while (4LL * a3 != v11);
      }
    }

    goto LABEL_36;
  }

  int v12 = (*(uint64_t (**)(void))(v8 + 24))();
  uint64_t v13 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 16) + 8LL))(*(void *)(a1 + 16), a3);
  BOOL v14 = (_DWORD *)v13;
  if (v12)
  {
    if (!v13)
    {
      uint64_t v9 = 0LL;
LABEL_36:
      operator delete[](v6);
      return v9;
    }

    (***(void (****)(void))(a1 + 24))(*(void *)(a1 + 24));
    if ((int)a3 >= 1)
    {
      uint64_t v16 = 0LL;
      do
      {
        ++v16;
      }

      while (a3 != v16);
    }

uint64_t sub_136DB0(uint64_t a1, _BYTE *a2, int a3)
{
  if (a3 >= 1)
  {
    uint64_t v3 = a3;
    do
    {
      if (!*a2) {
        *a2 = -2;
      }
      ++a2;
      --v3;
    }

    while (v3);
  }

  return 0LL;
}

uint64_t sub_136DE0(uint64_t a1, _BYTE *a2, int a3)
{
  if (a3 >= 1)
  {
    uint64_t v3 = a3;
    do
    {
      if (!*a2) {
        *a2 = -2;
      }
      ++a2;
      --v3;
    }

    while (v3);
  }

  return 0LL;
}

uint64_t sub_136E10(uint64_t a1, uint64_t a2, unsigned __int8 *a3, uint64_t a4)
{
  uint64_t v5 = a3;
  uint64_t v7 = (*(uint64_t (**)(uint64_t, unsigned __int8 *, uint64_t))(*(void *)a2 + 16LL))(a2, a3, a4);
  if (!v7) {
    return 0LL;
  }
  uint64_t v8 = (float *)v7;
  int v9 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 24LL))(*(void *)(a1 + 16));
  uint64_t v10 = **(void **)(a1 + 24);
  if (v9)
  {
    uint64_t v11 = (*(uint64_t (**)(void))(v10 + 16))();
    if (v11)
    {
      (***(void (****)(void))(a1 + 16))(*(void *)(a1 + 16));
      if ((int)a4 >= 1)
      {
        uint64_t v13 = 0LL;
        do
        {
          if (!v5[v13] && v8[v13] != 0.0) {
            *(_DWORD *)(v11 + 4 * v13) = v12;
          }
          ++v13;
        }

        while (a4 != v13);
      }
    }

    goto LABEL_39;
  }

  int v14 = (*(uint64_t (**)(void))(v10 + 24))();
  uint64_t v15 = (*(uint64_t (**)(void, unsigned __int8 *, uint64_t))(**(void **)(a1 + 16) + 16LL))( *(void *)(a1 + 16),  v5,  a4);
  uint64_t v16 = (_DWORD *)v15;
  if (v14)
  {
    if (!v15)
    {
      uint64_t v11 = 0LL;
LABEL_39:
      operator delete[](v8);
      return v11;
    }

    (***(void (****)(void))(a1 + 24))(*(void *)(a1 + 24));
    if ((int)a4 >= 1)
    {
      uint64_t v18 = 0LL;
      do
      {
        if (!v5[v18] && v8[v18] == 0.0) {
          v16[v18] = v17;
        }
        ++v18;
      }

      while (a4 != v18);
    }

uint64_t sub_137018()
{
  return 22LL;
}

uint64_t sub_137020(uint64_t a1, uint64_t a2, float a3)
{
  if (a3 == 0.0) {
    uint64_t v3 = 24LL;
  }
  else {
    uint64_t v3 = 16LL;
  }
  uint64_t v4 = *(void *)(a1 + v3);
  *(void *)(a1 + v3) = 0LL;
  return (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)a2 + 64LL))(a2, *(void *)(a1 + 8), v4);
}

uint64_t sub_13709C()
{
  return 0LL;
}

uint64_t sub_1370A4(uint64_t a1)
{
  return (*(unsigned __int8 (**)(void, void))(**(void **)(a1 + 16) + 136LL))( *(void *)(a1 + 16),  *(void *)(a1 + 24));
}

void *sub_1370CC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 112LL))(*(void *)(a1 + 16));
  uint64_t v5 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 24) + 112LL))(*(void *)(a1 + 24), a2);
  __n128 v6 = sub_122A0C(0x20uLL);
  sub_130040(v6, v4, v5);
  *__n128 v6 = off_252BD8;
  return v6;
}

void sub_137168(_Unwind_Exception *exception_object, int a2)
{
  __n128 v6 = v4;
  if (v6) {
    free(v6);
  }
  if (a2 == 1)
  {
    __cxa_begin_catch(exception_object);
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 152LL))(v2);
    }
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 152LL))(v3);
    }
    __cxa_end_catch();
    JUMPOUT(0x137150LL);
  }

  _Unwind_Resume(exception_object);
}

void *sub_1371EC(void *a1)
{
  uint64_t v2 = (const void *)a1[1];
  if (!v2) {
    return (void *)(*(uint64_t (**)(void *, uint64_t, uint64_t, uint64_t))(*a1 + 272LL))(a1, 27LL, -1LL, -1LL);
  }
  if (!result) {
    return (void *)(*(uint64_t (**)(void *, uint64_t, uint64_t, uint64_t))(*a1 + 272LL))(a1, 27LL, -1LL, -1LL);
  }
  return result;
}

uint64_t sub_137254(void *a1)
{
  uint64_t v2 = a1[2];
  if (!v2)
  {
    (*(void (**)(void *, uint64_t, uint64_t, uint64_t))(*a1 + 272LL))(a1, 21LL, -1LL, -1LL);
    uint64_t v2 = a1[2];
  }

  return (*(uint64_t (**)(uint64_t))(*(void *)v2 + 120LL))(v2);
}

uint64_t sub_1372A0(void *a1)
{
  uint64_t v2 = (uint64_t (***)(void))a1[2];
  if (!v2)
  {
    (*(void (**)(void *, uint64_t, uint64_t, uint64_t))(*a1 + 272LL))(a1, 21LL, -1LL, -1LL);
    uint64_t v2 = (uint64_t (***)(void))a1[2];
  }

  return (**v2)(v2);
}

uint64_t sub_1372EC(uint64_t a1)
{
  return *(unsigned int *)(a1 + 32);
}

uint64_t sub_1372F4(uint64_t a1, char *__s1)
{
  if (!__s1) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v2 = *(unsigned int *)(a1 + 32);
  uint64_t v4 = 0LL;
  for (uint64_t i = *(const char ***)(a1 + 24); !*i || strcmp(__s1, *i); i += 3)
  {
    if (v2 == ++v4) {
      return 0xFFFFFFFFLL;
    }
  }

  return v4;
}

uint64_t sub_13735C(uint64_t a1, unsigned int a2)
{
  else {
    return *(void *)(*(void *)(a1 + 24) + 24LL * a2);
  }
}

double sub_137388(uint64_t a1, int a2)
{
  return *(double *)(*(void *)(a1 + 24) + 24LL * a2 + 16);
}

double sub_13739C(void *a1)
{
  int v2 = (*(uint64_t (**)(void *))(*a1 + 304LL))(a1);
  if (v2 < 0) {
    (*(void (**)(void *, uint64_t, uint64_t, uint64_t))(*a1 + 272LL))(a1, 20LL, -1LL, -1LL);
  }
  return *(double *)(a1[3] + 24LL * v2 + 16);
}

BOOL sub_1373F8(uint64_t a1)
{
  return (*(unsigned int (**)(uint64_t))(*(void *)a1 + 304LL))(a1) != -1;
}

uint64_t sub_13741C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v1 + 40LL))(v1);
  }
  else {
    return 1LL;
  }
}

void *sub_137438(uint64_t a1)
{
  int v2 = sub_122A0C(0x28uLL);
  uint64_t v3 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 288LL))(a1);
  sub_138998((uint64_t)v2, v3);
  return v2;
}

void sub_137480(_Unwind_Exception *exception_object)
{
  if (v1) {
    free(v1);
  }
  _Unwind_Resume(exception_object);
}

void *sub_13749C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1) {
    return (void *)(*(uint64_t (**)(uint64_t))(*(void *)v1 + 112LL))(v1);
  }
  float result = sub_122A0C(0x18uLL);
  result[1] = 0LL;
  result[2] = 0LL;
  void *result = off_24E1B0;
  return result;
}

void *sub_1374DC(uint64_t a1, unsigned int a2)
{
  float result = sub_122A0C(0x18uLL);
  result[1] = 0LL;
  result[2] = 0LL;
  void *result = off_24E1B0;
  return result;
}

uint64_t sub_137538(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 288LL))(a2);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 112LL))(a1, v3);
}

uint64_t sub_137574(uint64_t a1, unsigned int a2, double a3)
{
  *(double *)(*(void *)(a1 + 24) + 24LL * a2 + 16) = a3;
  return 1LL;
}

uint64_t sub_1375A4(uint64_t a1, double a2)
{
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 304LL))(a1);
  if ((v4 & 0x80000000) != 0) {
    return 0LL;
  }
  else {
    return (*(uint64_t (**)(uint64_t, uint64_t, double))(*(void *)a1 + 352LL))(a1, v4, a2);
  }
}

void sub_137604(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 96LL))(v2);
    if ((*(unsigned int (**)(void))(**(void **)(a1 + 16) + 40LL))(*(void *)(a1 + 16)))
    {
      if (!(*(unsigned int (**)(void))(**(void **)(a1 + 16) + 24LL))(*(void *)(a1 + 16)))
      {
        double v3 = (***(double (****)(void))(a1 + 16))(*(void *)(a1 + 16));
        uint64_t v4 = *(void *)(a1 + 16);
        *(void *)(a1 + 16) = 0LL;
        uint64_t v5 = (double *)sub_122A0C(0x18uLL);
        void v5[2] = v3;
        *(void *)(a1 + 16) = v5;
        *(void *)uint64_t v5 = off_24E1B0;
        *((void *)v5 + 1) = a1;
        if (v4) {
          (*(void (**)(uint64_t))(*(void *)v4 + 152LL))(v4);
        }
      }
    }

    uint64_t v6 = *(unsigned int *)(a1 + 32);
    uint64_t v7 = *(void *)(a1 + 16);
    uint64_t v8 = *(void **)(a1 + 24);
    *(void *)(a1 + 24) = 0LL;
    *(_DWORD *)(a1 + 32) = 0;
    (*(void (**)(uint64_t, uint64_t))(*(void *)v7 + 88LL))(v7, a1);
    if ((int)v6 < 1)
    {
      if (!v8) {
        return;
      }
    }

    else
    {
      int v9 = v8;
      do
      {
        int v10 = (*(uint64_t (**)(uint64_t, void))(*(void *)a1 + 304LL))(a1, *v9);
        int v11 = v10;
        if (v10 == -1)
        {
          if (*v9) {
            operator delete[]((void *)*v9);
          }
          int v17 = (void *)v9[1];
          if (v17) {
            operator delete[](v17);
          }
        }

        else
        {
          uint64_t v12 = *(void *)(a1 + 24);
          uint64_t v13 = *(void **)(v12 + 24LL * v10);
          if (v13)
          {
            operator delete[](v13);
            uint64_t v12 = *(void *)(a1 + 24);
          }

          int v14 = *(void **)(v12 + 24LL * v11 + 8);
          if (v14)
          {
            operator delete[](v14);
            uint64_t v12 = *(void *)(a1 + 24);
          }

          __int128 v15 = *(_OWORD *)v9;
          uint64_t v16 = v12 + 24LL * v11;
          *(void *)(v16 + 16) = v9[2];
          *(_OWORD *)uint64_t v16 = v15;
        }

        v9 += 3;
        --v6;
      }

      while (v6);
    }

    operator delete[](v8);
  }

void sub_1377A0(void *a1)
{
  uint64_t v3 = *(void *)(v1 + 16);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 152LL))(v3);
  }
  *(void *)(v1 + 16) = v2;
  __cxa_end_catch();
  JUMPOUT(0x1376A8LL);
}

void sub_1377C4(_Unwind_Exception *a1)
{
}

uint64_t sub_137810(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 104LL))(*(void *)(a1 + 16));
}

char *sub_137820(uint64_t a1, int a2, int a3)
{
  if (a2 < 0 || *(_DWORD *)(a1 + 32) <= a2) {
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 272LL))(a1, 20LL, -1LL, -1LL);
  }
  if (a3 < 0) {
    size_t v6 = -1LL;
  }
  else {
    size_t v6 = 8LL * a3;
  }
  uint64_t v7 = (char *)operator new[](v6);
  uint64_t v8 = v7;
  uint64_t v9 = *(void *)(a1 + 24);
  int v10 = *(const void **)(v9 + 24LL * a2 + 8);
  if (v10)
  {
    memcpy(v7, v10, 8LL * a3);
  }

  else if (a3 >= 1)
  {
    uint64_t v11 = 0LL;
    uint64_t v12 = *(void *)(v9 + 24LL * a2 + 16);
    do
    {
      *(void *)&v7[v11] = v12;
      v11 += 8LL;
    }

    while (8LL * a3 != v11);
  }

  return v8;
}

void sub_1378EC(void *a1, int a2)
{
  uint64_t v4 = (unsigned int *)__cxa_begin_catch(a1);
  if (a2 == 2) {
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)v2 + 272LL))(v2, *v4, -1LL, -1LL);
  }
  else {
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v2 + 272LL))(v2, 5LL, -1LL, -1LL);
  }
  __cxa_end_catch();
  JUMPOUT(0x1378D4LL);
}

void sub_137944(_Unwind_Exception *a1)
{
}

uint64_t sub_137964(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 304LL))(a1);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 368LL))(a1, v5, a3);
}

uint64_t sub_1379A4(uint64_t a1, unsigned int a2, const void *a3, int a4)
{
  uint64_t v5 = *(void *)(a1 + 24) + 24LL * a2;
  uint64_t v8 = *(void **)(v5 + 8);
  uint64_t v7 = (void *)(v5 + 8);
  size_t v6 = v8;
  *uint64_t v7 = 0LL;
  if (a3)
  {
    size_t v9 = 8LL * a4;
    if (a4 < 0) {
      size_t v10 = -1LL;
    }
    else {
      size_t v10 = 8LL * a4;
    }
    uint64_t v11 = operator new[](v10);
    *uint64_t v7 = v11;
    memcpy(v11, a3, v9);
  }

  if (v6) {
    operator delete[](v6);
  }
  return 1LL;
}

void sub_137A38(void *a1)
{
  *(void *)(v2[3] + 24LL * v3 + _Block_object_dispose(va, 8) = v1;
  (*(void (**)(void *, uint64_t, uint64_t, uint64_t))(*v2 + 272LL))(v2, 5LL, -1LL, -1LL);
  __cxa_end_catch();
  if (!v1) {
    JUMPOUT(0x137A18LL);
  }
  JUMPOUT(0x137A10LL);
}

void sub_137A74(_Unwind_Exception *a1)
{
}

uint64_t sub_137A88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 304LL))(a1);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 384LL))(a1, v7, a3, a4);
}

uint64_t sub_137AD8(void *a1, uint64_t a2)
{
  if (!a1[2]) {
    (*(void (**)(void *, uint64_t, uint64_t, uint64_t))(*a1 + 272LL))(a1, 21LL, -1LL, -1LL);
  }
  else {
    return (*(uint64_t (**)(void, uint64_t))(*(void *)a1[2] + 8LL))(a1[2], a2);
  }
}

uint64_t sub_137B44(void *a1, uint64_t a2, int a3)
{
  if (!a1[2]) {
    (*(void (**)(void *, uint64_t, uint64_t, uint64_t))(*a1 + 272LL))(a1, 21LL, -1LL, -1LL);
  }
  if (a3 < 1) {
    return 0LL;
  }
  uint64_t v6 = *(void *)a1[2];
  if (a2) {
    return (*(uint64_t (**)(void))(v6 + 16))();
  }
  else {
    return (*(uint64_t (**)(void))(v6 + 8))();
  }
}

uint64_t sub_137BE0(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = *(void *)(a1 + 16);
  if (v4) {
    BOOL v5 = v4 == a2;
  }
  else {
    BOOL v5 = 1;
  }
  uint64_t v6 = v5;
  if (v5)
  {
    if (v4) {
      (*(void (**)(uint64_t))(*(void *)v4 + 152LL))(v4);
    }
    *(void *)(a1 + 16) = a3;
    if (a3)
    {
      a3[1] = a1;
      (*(void (**)(void *, uint64_t))(*a3 + 88LL))(a3, a1);
    }
  }

  return v6;
}

uint64_t sub_137C50(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 304LL))(a1);
  if ((v5 & 0x80000000) != 0) {
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 272LL))(a1, 20LL, -1LL, -1LL);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 80LL))(a1, v5, a3);
}

uint64_t sub_137CBC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 312LL))(a1);
  uint64_t v7 = v6;
  uint64_t v9 = *(void *)(a1 + 16);
  if (v9)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v9 + 80LL))(v9, a2, a3);
    if (!(*(unsigned int (**)(uint64_t, uint64_t))(*(void *)a3 + 56LL))(a3, v7))
    {
      uint64_t v10 = *(void *)(a1 + 24);
      uint64_t v11 = v10 + 24LL * (int)a2;
      *(void *)(v11 + 16) = 0LL;
      uint64_t v12 = *(void **)(v11 + 8);
      if (v12)
      {
        operator delete[](v12);
        uint64_t v10 = *(void *)(a1 + 24);
      }

      uint64_t v13 = v10 + 24LL * (int)a2;
      *(void *)(v13 + _Block_object_dispose(va, 8) = 0LL;
      if (*(void *)v13)
      {
        operator delete[](*(void **)v13);
        uint64_t v10 = *(void *)(a1 + 24);
      }

      *(void *)(v10 + 24LL * (int)a2) = 0LL;
    }
  }

  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 272LL))(a1, 21LL, -1LL, -1LL);
  }

  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 96LL))(*(void *)(a1 + 16));
}

uint64_t sub_137DD4(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void **)(a1 + 16);
  if (!v2) {
    __cxa_bad_typeid();
  }
  if (sub_124AC4(*(void *)(*v2 - 8LL), *(void *)(*a2 - 8LL))) {
    return (*(uint64_t (**)(void, void *))(**(void **)(a1 + 16) + 128LL))(*(void *)(a1 + 16), a2);
  }
  else {
    return 1LL;
  }
}

uint64_t sub_137E38(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2 && sub_124AC4(*(void *)(*v2 - 8LL), *(void *)(*a2 - 8LL))) {
    return (*(uint64_t (**)(void, void *))(**(void **)(a1 + 16) + 136LL))(*(void *)(a1 + 16), a2);
  }
  else {
    return 0LL;
  }
}

uint64_t sub_137E98(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void *)(a2 + 16);
  if (!(v2 | v3)) {
    return 0LL;
  }
  if ((v2 == 0) != (v3 == 0)) {
    return 1LL;
  }
  return (*(uint64_t (**)(uint64_t))(*(void *)v2 + 128LL))(v2);
}

uint64_t sub_137EDC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 | *(void *)(a2 + 16)) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v2 + 136LL))(v2);
  }
  else {
    return 1LL;
  }
}

uint64_t *sub_137F00(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = a2;
  if (a1[2] == a2) {
    uint64_t v2 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 120LL))(a2);
  }
  uint64_t v4 = sub_122A0C(0x20uLL);
  sub_144854(v4, a1[2], v2);
  void *v4 = off_255AF8;
  a1[2] = (uint64_t)v4;
  uint64_t v5 = v4[2];
  if (v5) {
    (*(void (**)(uint64_t, uint64_t *))(*(void *)v5 + 88LL))(v5, a1);
  }
  uint64_t v6 = v4[3];
  if (v6) {
    (*(void (**)(uint64_t, uint64_t *))(*(void *)v6 + 88LL))(v6, a1);
  }
  (*(void (**)(uint64_t *))(*a1 + 96))(a1);
  return a1;
}

void sub_137FB4(_Unwind_Exception *exception_object)
{
  if (v1) {
    free(v1);
  }
  _Unwind_Resume(exception_object);
}

void *sub_137FCC(void *a1, uint64_t a2, uint64_t a3)
{
  float result = sub_144854(a1, a2, a3);
  void *result = off_255AF8;
  return result;
}

uint64_t *sub_137FEC(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  if (v3)
  {
    uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 120LL))(v3);
    uint64_t v5 = sub_122A0C(0x20uLL);
    sub_144854(v5, a1[2], v4);
    void *v5 = off_255AF8;
    a1[2] = (uint64_t)v5;
    uint64_t v6 = v5[2];
    if (v6) {
      (*(void (**)(uint64_t, uint64_t *))(*(void *)v6 + 88LL))(v6, a1);
    }
    uint64_t v7 = v5[3];
    if (v7) {
      (*(void (**)(uint64_t, uint64_t *))(*(void *)v7 + 88LL))(v7, a1);
    }
    (*(void (**)(uint64_t *))(*a1 + 96))(a1);
  }

  return a1;
}

void sub_138094(_Unwind_Exception *exception_object)
{
  if (v1) {
    free(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_1380AC(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = a2;
  if (a1[2] == a2) {
    uint64_t v2 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 120LL))(a2);
  }
  uint64_t v4 = sub_122A0C(0x20uLL);
  sub_144854(v4, a1[2], v2);
  void *v4 = off_255C38;
  a1[2] = (uint64_t)v4;
  uint64_t v5 = v4[2];
  if (v5) {
    (*(void (**)(uint64_t, uint64_t *))(*(void *)v5 + 88LL))(v5, a1);
  }
  uint64_t v6 = v4[3];
  if (v6) {
    (*(void (**)(uint64_t, uint64_t *))(*(void *)v6 + 88LL))(v6, a1);
  }
  (*(void (**)(uint64_t *))(*a1 + 96))(a1);
  return a1;
}

void sub_138160(_Unwind_Exception *exception_object)
{
  if (v1) {
    free(v1);
  }
  _Unwind_Resume(exception_object);
}

void *sub_138178(void *a1, uint64_t a2, uint64_t a3)
{
  float result = sub_144854(a1, a2, a3);
  void *result = off_255C38;
  return result;
}

uint64_t *sub_138198(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  if (v3)
  {
    uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 120LL))(v3);
    uint64_t v5 = sub_122A0C(0x20uLL);
    sub_144854(v5, a1[2], v4);
    void *v5 = off_255C38;
    a1[2] = (uint64_t)v5;
    uint64_t v6 = v5[2];
    if (v6) {
      (*(void (**)(uint64_t, uint64_t *))(*(void *)v6 + 88LL))(v6, a1);
    }
    uint64_t v7 = v5[3];
    if (v7) {
      (*(void (**)(uint64_t, uint64_t *))(*(void *)v7 + 88LL))(v7, a1);
    }
    (*(void (**)(uint64_t *))(*a1 + 96))(a1);
  }

  return a1;
}

void sub_138240(_Unwind_Exception *exception_object)
{
  if (v1) {
    free(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_138258(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = a2;
  if (a1[2] == a2) {
    uint64_t v2 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 120LL))(a2);
  }
  uint64_t v4 = sub_122A0C(0x20uLL);
  sub_144854(v4, a1[2], v2);
  void *v4 = off_255D78;
  a1[2] = (uint64_t)v4;
  uint64_t v5 = v4[2];
  if (v5) {
    (*(void (**)(uint64_t, uint64_t *))(*(void *)v5 + 88LL))(v5, a1);
  }
  uint64_t v6 = v4[3];
  if (v6) {
    (*(void (**)(uint64_t, uint64_t *))(*(void *)v6 + 88LL))(v6, a1);
  }
  (*(void (**)(uint64_t *))(*a1 + 96))(a1);
  return a1;
}

void sub_13830C(_Unwind_Exception *exception_object)
{
  if (v1) {
    free(v1);
  }
  _Unwind_Resume(exception_object);
}

void *sub_138324(void *a1, uint64_t a2, uint64_t a3)
{
  float result = sub_144854(a1, a2, a3);
  void *result = off_255D78;
  return result;
}

uint64_t *sub_138344(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  if (v3)
  {
    uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 120LL))(v3);
    uint64_t v5 = sub_122A0C(0x20uLL);
    sub_144854(v5, a1[2], v4);
    void *v5 = off_255D78;
    a1[2] = (uint64_t)v5;
    uint64_t v6 = v5[2];
    if (v6) {
      (*(void (**)(uint64_t, uint64_t *))(*(void *)v6 + 88LL))(v6, a1);
    }
    uint64_t v7 = v5[3];
    if (v7) {
      (*(void (**)(uint64_t, uint64_t *))(*(void *)v7 + 88LL))(v7, a1);
    }
    (*(void (**)(uint64_t *))(*a1 + 96))(a1);
  }

  else
  {
    uint64_t v8 = a1[2];
    if (v8) {
      (*(void (**)(uint64_t))(*(void *)v8 + 152LL))(v8);
    }
    uint64_t v9 = sub_122A0C(0x18uLL);
    v9[1] = 0LL;
    v9[2] = 0LL;
    *uint64_t v9 = off_24E1B0;
    a1[2] = (uint64_t)v9;
  }

  return a1;
}

void sub_138420(_Unwind_Exception *exception_object)
{
  if (v1) {
    free(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_138438(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = a2;
  if (a1[2] == a2) {
    uint64_t v2 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 120LL))(a2);
  }
  uint64_t v4 = sub_122A0C(0x20uLL);
  sub_144854(v4, a1[2], v2);
  void *v4 = off_255EB8;
  a1[2] = (uint64_t)v4;
  uint64_t v5 = v4[2];
  if (v5) {
    (*(void (**)(uint64_t, uint64_t *))(*(void *)v5 + 88LL))(v5, a1);
  }
  uint64_t v6 = v4[3];
  if (v6) {
    (*(void (**)(uint64_t, uint64_t *))(*(void *)v6 + 88LL))(v6, a1);
  }
  (*(void (**)(uint64_t *))(*a1 + 96))(a1);
  return a1;
}

void sub_1384EC(_Unwind_Exception *exception_object)
{
  if (v1) {
    free(v1);
  }
  _Unwind_Resume(exception_object);
}

void *sub_138504(void *a1, uint64_t a2, uint64_t a3)
{
  float result = sub_144854(a1, a2, a3);
  void *result = off_255EB8;
  return result;
}

uint64_t *sub_138524(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  if (!v3)
  {
    (*(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(*a1 + 272))(a1, 1LL, -1LL, -1LL);
    uint64_t v3 = *(void *)(a2 + 16);
  }

  uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 120LL))(v3);
  uint64_t v6 = sub_122A0C(0x20uLL);
  sub_144854(v6, a1[2], v5);
  *uint64_t v6 = off_255EB8;
  a1[2] = (uint64_t)v6;
  uint64_t v7 = v6[2];
  if (v7) {
    (*(void (**)(uint64_t, uint64_t *))(*(void *)v7 + 88LL))(v7, a1);
  }
  uint64_t v8 = v6[3];
  if (v8) {
    (*(void (**)(uint64_t, uint64_t *))(*(void *)v8 + 88LL))(v8, a1);
  }
  (*(void (**)(uint64_t *))(*a1 + 96))(a1);
  return a1;
}

void sub_1385F0(_Unwind_Exception *exception_object)
{
  if (v1) {
    free(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_138608(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = a2;
  if (a1[2] == a2) {
    uint64_t v2 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 120LL))(a2);
  }
  uint64_t v4 = sub_122A0C(0x20uLL);
  sub_144854(v4, a1[2], v2);
  void *v4 = off_255FF8;
  a1[2] = (uint64_t)v4;
  uint64_t v5 = v4[2];
  if (v5) {
    (*(void (**)(uint64_t, uint64_t *))(*(void *)v5 + 88LL))(v5, a1);
  }
  uint64_t v6 = v4[3];
  if (v6) {
    (*(void (**)(uint64_t, uint64_t *))(*(void *)v6 + 88LL))(v6, a1);
  }
  (*(void (**)(uint64_t *))(*a1 + 96))(a1);
  return a1;
}

void sub_1386BC(_Unwind_Exception *exception_object)
{
  if (v1) {
    free(v1);
  }
  _Unwind_Resume(exception_object);
}

void *sub_1386D4(void *a1, uint64_t a2, uint64_t a3)
{
  float result = sub_144854(a1, a2, a3);
  void *result = off_255FF8;
  return result;
}

uint64_t *sub_1386F4(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  if (!v3)
  {
    (*(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(*a1 + 272))(a1, 1LL, -1LL, -1LL);
    uint64_t v3 = *(void *)(a2 + 16);
  }

  uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 120LL))(v3);
  uint64_t v6 = sub_122A0C(0x20uLL);
  sub_144854(v6, a1[2], v5);
  *uint64_t v6 = off_255FF8;
  a1[2] = (uint64_t)v6;
  uint64_t v7 = v6[2];
  if (v7) {
    (*(void (**)(uint64_t, uint64_t *))(*(void *)v7 + 88LL))(v7, a1);
  }
  uint64_t v8 = v6[3];
  if (v8) {
    (*(void (**)(uint64_t, uint64_t *))(*(void *)v8 + 88LL))(v8, a1);
  }
  (*(void (**)(uint64_t *))(*a1 + 96))(a1);
  return a1;
}

void sub_1387C0(_Unwind_Exception *exception_object)
{
  if (v1) {
    free(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1387D8(uint64_t result)
{
  *(void *)float result = off_252D40;
  *(void *)(result + _Block_object_dispose(va, 8) = 0LL;
  *(void *)(result + 16) = 0LL;
  *(void *)(result + 24) = 0LL;
  *(_DWORD *)(result + 32) = 0;
  return result;
}

void *sub_1387F0(void *result)
{
  void *result = off_252F20;
  result[1] = 0LL;
  return result;
}

uint64_t sub_138800(uint64_t a1, uint64_t *a2)
{
  *(void *)a1 = off_252D40;
  *(void *)(a1 + 24) = 0LL;
  *(_DWORD *)(a1 + 32) = 0;
  a2[3] = a1;
  *(void *)(a1 + 16) = 0LL;
  uint64_t v3 = a1 + 16;
  *(void *)(a1 + _Block_object_dispose(va, 8) = 0LL;
  uint64_t v4 = (_BYTE *)a2[1];
  if (*v4 == 61) {
    a2[1] = (uint64_t)(v4 + 1);
  }
  sub_13C310((uint64_t *)a1, a2, a1 + 16);
  if (*(void *)v3) {
    *(void *)(*(void *)v3 + 8LL) = a1;
  }
  (*(void (**)(uint64_t))(*(void *)a1 + 96LL))(a1);
  return a1;
}

void sub_138894( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10)
{
  void *v10 = off_252F20;
  v10[1] = 0LL;
  _Unwind_Resume(exception_object);
}

uint64_t sub_138928(uint64_t a1, void *a2)
{
  *(void *)a1 = off_252D40;
  *(void *)(a1 + _Block_object_dispose(va, 8) = 0LL;
  a2[1] = a1;
  *(void *)(a1 + 16) = a2;
  *(void *)(a1 + 24) = 0LL;
  *(_DWORD *)(a1 + 32) = 0;
  (*(void (**)(void *, uint64_t))(*a2 + 88LL))(a2, a1);
  (*(void (**)(uint64_t))(*(void *)a1 + 96LL))(a1);
  return a1;
}

void sub_138984(_Unwind_Exception *a1)
{
  void *v1 = off_252F20;
  v1[1] = 0LL;
  _Unwind_Resume(a1);
}

uint64_t sub_138998(uint64_t a1, void *a2)
{
  uint64_t v3 = off_252D40;
  *(void *)a1 = off_252D40;
  *(void *)(a1 + _Block_object_dispose(va, 8) = 0LL;
  *(void *)(a1 + 16) = a2;
  if (a2)
  {
    a2[1] = a1;
    *(void *)(a1 + 24) = 0LL;
    *(_DWORD *)(a1 + 32) = 0;
    (*(void (**)(void *, uint64_t))(*a2 + 88LL))(a2, a1);
    uint64_t v3 = *(uint64_t (***)())a1;
  }

  else
  {
    *(void *)(a1 + 24) = 0LL;
    *(_DWORD *)(a1 + 32) = 0;
  }

  ((void (*)(uint64_t))v3[12])(a1);
  return a1;
}

void sub_138A08(_Unwind_Exception *a1)
{
  void *v1 = off_252F20;
  v1[1] = 0LL;
  _Unwind_Resume(a1);
}

uint64_t sub_138A18(uint64_t a1, double a2)
{
  *(void *)(a1 + _Block_object_dispose(va, 8) = 0LL;
  *(void *)(a1 + 16) = 0LL;
  *(void *)a1 = off_252D40;
  uint64_t v4 = (double *)sub_122A0C(0x18uLL);
  *(void *)uint64_t v4 = off_24E1B0;
  int v4[2] = a2;
  *(void *)(a1 + 16) = v4;
  *((void *)v4 + 1) = a1;
  *(void *)(a1 + 24) = 0LL;
  *(_DWORD *)(a1 + 32) = 0;
  return a1;
}

uint64_t sub_138B0C(uint64_t a1, char *__s)
{
  *(void *)a1 = off_252D40;
  *(void *)(a1 + _Block_object_dispose(va, 8) = 0LL;
  if (!__s)
  {
    LODWORD(xmmword_2B0AD0) = 21;
    *((void *)&xmmword_2B0AD0 + 1) = -1LL;
    qword_2B0AE0 = -1LL;
    exception = __cxa_allocate_exception(0x18uLL);
    uint64_t v7 = qword_2B0AE0;
    *(_OWORD *)exception = xmmword_2B0AD0;
    exception[2] = v7;
  }

  *(void *)(a1 + 24) = 0LL;
  *(_DWORD *)(a1 + 32) = 0;
  uint64_t v8 = __s;
  uint64_t v9 = __s;
  uint64_t v10 = &__s[strlen(__s) - 1];
  uint64_t v11 = a1;
  if (*__s == 61) {
    uint64_t v9 = __s + 1;
  }
  *(void *)(a1 + 16) = 0LL;
  sub_13C310((uint64_t *)a1, (uint64_t *)&v8, a1 + 16);
  uint64_t v4 = *(void **)(a1 + 16);
  if (v4) {
    v4[1] = a1;
  }
  (*(void (**)(void *, uint64_t))(*v4 + 88LL))(v4, a1);
  (*(void (**)(uint64_t))(*(void *)a1 + 96LL))(a1);
  return a1;
}

void sub_138C08()
{
}

void sub_138C70(_Unwind_Exception *a1)
{
  void *v1 = off_252F20;
  v1[1] = 0LL;
  _Unwind_Resume(a1);
}

void sub_138C80()
{
}

uint64_t sub_138CA0(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_252D40;
  *(void *)(a1 + _Block_object_dispose(va, 8) = 0LL;
  *(void *)(a1 + 16) = 0LL;
  *(void *)(a1 + 24) = 0LL;
  *(_DWORD *)(a1 + 32) = 0;
  uint64_t v3 = *(void *)(a2 + 16);
  if (v3)
  {
    uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 120LL))(v3);
    *(void *)(a1 + 16) = v4;
    (*(void (**)(uint64_t, uint64_t))(*(void *)v4 + 88LL))(v4, a1);
    (*(void (**)(uint64_t))(*(void *)a1 + 96LL))(a1);
  }

  return a1;
}

void sub_138D0C(_Unwind_Exception *a1)
{
  void *v1 = off_252F20;
  v1[1] = 0LL;
  _Unwind_Resume(a1);
}

uint64_t sub_138D20(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 16) = 0LL;
  *(void *)a1 = off_252D40;
  *(void *)(a1 + _Block_object_dispose(va, 8) = 0LL;
  *(void *)(a1 + 24) = 0LL;
  *(_DWORD *)(a1 + 32) = 0;
  (*(void (**)(uint64_t))(*(void *)a3 + 288LL))(a3);
  uint64_t v5 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 184LL))(a1, a2);
  *(void *)(a1 + 16) = v5;
  v5[1] = a1;
  (*(void (**)(void *, uint64_t))(*v5 + 88LL))(v5, a1);
  (*(void (**)(uint64_t))(*(void *)a1 + 96LL))(a1);
  return a1;
}

void sub_138DC0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, __int128 a11, uint64_t a12)
{
  void *v12 = off_252F20;
  v12[1] = 0LL;
  _Unwind_Resume(exception_object);
}

uint64_t sub_138E50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)a1 = off_252D40;
  *(void *)(a1 + _Block_object_dispose(va, 8) = 0LL;
  *(void *)(a1 + 24) = 0LL;
  *(_DWORD *)(a1 + 32) = 0;
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 288LL))(a2);
  uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)a4 + 288LL))(a4);
  uint64_t v9 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 200LL))(a1, a3, v7, v8);
  *(void *)(a1 + 16) = v9;
  v9[1] = a1;
  (*(void (**)(void *, uint64_t))(*v9 + 88LL))(v9, a1);
  (*(void (**)(uint64_t))(*(void *)a1 + 96LL))(a1);
  return a1;
}

void sub_138EFC(_Unwind_Exception *a1)
{
  void *v1 = off_252F20;
  v1[1] = 0LL;
  _Unwind_Resume(a1);
}

uint64_t sub_138F10(uint64_t a1)
{
  *(void *)a1 = off_252D40;
  uint64_t v2 = *(void **)(a1 + 24);
  if (v2)
  {
    uint64_t v3 = 0LL;
    uint64_t v4 = 0LL;
    do
    {
      uint64_t v5 = *(void *)(a1 + 24);
      uint64_t v6 = *(void **)(v5 + v3);
      if (v6)
      {
        operator delete[](v6);
        uint64_t v5 = *(void *)(a1 + 24);
      }

      uint64_t v7 = *(void **)(v5 + v3 + 8);
      if (v7) {
        operator delete[](v7);
      }
      ++v4;
      v3 += 24LL;
    }

    while (v4 < *(int *)(a1 + 32));
    uint64_t v2 = *(void **)(a1 + 24);
    if (v2) {
LABEL_10:
    }
      operator delete[](v2);
    *(void *)(a1 + 24) = 0LL;
  }

  uint64_t v8 = *(void *)(a1 + 16);
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 152LL))(v8);
  }
  *(void *)(a1 + _Block_object_dispose(va, 8) = 0LL;
  *(void *)(a1 + 16) = 0LL;
  *(void *)a1 = off_252F20;
  return a1;
}

void sub_138FCC(_Unwind_Exception *a1)
{
  void *v1 = off_252F20;
  v1[1] = 0LL;
  _Unwind_Resume(a1);
}

void sub_138FE0(void *a1)
{
  if (a1) {
    free(a1);
  }
}

void sub_139014(_Unwind_Exception *exception_object)
{
  if (v1) {
    free(v1);
  }
  _Unwind_Resume(exception_object);
}

char *sub_13902C(uint64_t a1, char *__s)
{
  size_t v4 = strlen(__s);
  uint64_t v5 = *(char **)(a1 + 24);
  *(void *)(a1 + 24) = 0LL;
  uint64_t v6 = *(int *)(a1 + 32);
  if (is_mul_ok(v6 + 1, 0x18uLL)) {
    size_t v7 = 24 * (v6 + 1);
  }
  else {
    size_t v7 = -1LL;
  }
  *(void *)(a1 + 24) = operator new[](v7);
  if (v5)
  {
    if ((int)v6 >= 1)
    {
      uint64_t v8 = 0LL;
      uint64_t v9 = 0LL;
      do
      {
        uint64_t v10 = *(void *)(a1 + 24) + v8;
        __int128 v11 = *(_OWORD *)&v5[v8];
        *(void *)(v10 + 16) = *(void *)&v5[v8 + 16];
        *(_OWORD *)uint64_t v10 = v11;
        ++v9;
        v8 += 24LL;
      }

      while (v9 < *(int *)(a1 + 32));
    }

    operator delete[](v5);
  }

  else {
    size_t v12 = -1LL;
  }
  uint64_t v13 = (char *)operator new[](v12);
  int v14 = *(_DWORD *)(a1 + 32);
  *(_DWORD *)(a1 + 32) = v14 + 1;
  __int128 v15 = (char **)(*(void *)(a1 + 24) + 24LL * v14);
  v15[1] = 0LL;
  v15[2] = 0LL;
  float result = strncpy(v13, __s, v4 + 1);
  float *v15 = result;
  return result;
}

uint64_t sub_139190(uint64_t a1, char *__s2)
{
  size_t v4 = *(const char ***)(a1 + 24);
  uint64_t v5 = *(unsigned int *)(a1 + 32);
  if (v4) {
    BOOL v6 = (int)v5 < 1;
  }
  else {
    BOOL v6 = 1;
  }
  if (v6)
  {
    uint64_t v7 = 0LL;
  }

  else
  {
    uint64_t v7 = 0LL;
    while (!*v4 || strcmp(*v4, __s2))
    {
      ++v7;
      v4 += 3;
      if (v5 == v7)
      {
        uint64_t v7 = v5;
        goto LABEL_13;
      }
    }
  }

  if ((_DWORD)v7 == (_DWORD)v5) {
LABEL_13:
  }
    (*(void (**)(uint64_t, char *))(*(void *)a1 + 416LL))(a1, __s2);
  return v7;
}

double sub_139228()
{
  return 0.0;
}

uint64_t sub_139230()
{
  return 0LL;
}

uint64_t sub_139238()
{
  return 0LL;
}

uint64_t sub_139240()
{
  return 0LL;
}

uint64_t sub_139248()
{
  return 1LL;
}

uint64_t sub_139250()
{
  return 0LL;
}

uint64_t sub_139258()
{
  return 0LL;
}

uint64_t sub_139270()
{
  return 0LL;
}

uint64_t sub_139278(uint64_t a1)
{
  return 0LL;
}

uint64_t sub_1392A4(uint64_t a1)
{
  return 0LL;
}

BOOL sub_1392D0(uint64_t a1, void *a2)
{
  return !sub_124AC4((uint64_t)&off_252EF0, *(void *)(*a2 - 8LL));
}

BOOL sub_1392F8(uint64_t a1, void *a2)
{
  return sub_124AC4((uint64_t)&off_252EF0, *(void *)(*a2 - 8LL));
}

void *sub_13931C(void *result)
{
  char *result = off_252F20;
  result[1] = 0LL;
  return result;
}

uint64_t sub_139330@<X0>(uint64_t result@<X0>, void *a2@<X1>, char *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6 = result;
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + _Block_object_dispose(va, 8) = a3;
  *(_DWORD *)(a4 + 16) = 1;
  *(_WORD *)(a4 + 20) = 0;
  int v8 = *a3;
  if (v8 <= 93)
  {
    switch(*a3)
    {
      case '%':
        uint64_t v9 = 7LL;
        goto LABEL_44;
      case '&':
        if (a3[1] == 38)
        {
          uint64_t v9 = 15LL;
          goto LABEL_41;
        }

        uint64_t v9 = 18LL;
        goto LABEL_44;
      case '\'':
      case '(':
      case ')':
      case ',':
      case '.':
      case '0':
      case '1':
      case '2':
      case '3':
      case '4':
      case '5':
      case '6':
      case '7':
      case '8':
      case '9':
      case ';':
        goto LABEL_28;
      case '*':
        uint64_t v9 = 5LL;
        goto LABEL_44;
      case '+':
        float result = (*(uint64_t (**)(uint64_t, void *, char *))(*(void *)result + 216LL))(result, a2, a3);
        if ((_DWORD)result) {
          goto LABEL_28;
        }
        uint64_t v9 = 3LL;
        goto LABEL_44;
      case '-':
        float result = (*(uint64_t (**)(uint64_t, void *, char *))(*(void *)result + 216LL))(result, a2, a3);
        if ((_DWORD)result == 2)
        {
LABEL_35:
          uint64_t v9 = 0LL;
          *(_DWORD *)a4 = 0;
          goto LABEL_45;
        }

        if ((_DWORD)result == 1)
        {
          uint64_t v9 = 2LL;
        }

        else
        {
          if ((_DWORD)result) {
            goto LABEL_28;
          }
          uint64_t v9 = 4LL;
        }

        goto LABEL_44;
      case '/':
        uint64_t v9 = 6LL;
        goto LABEL_44;
      case ':':
        uint64_t v9 = 22LL;
        goto LABEL_44;
      case '<':
        if (a3[1] == 61)
        {
          uint64_t v9 = 13LL;
          goto LABEL_41;
        }

        uint64_t v9 = 9LL;
        goto LABEL_44;
      case '=':
        if (a3[1] != 61) {
          goto LABEL_28;
        }
        uint64_t v9 = 11LL;
        goto LABEL_41;
      case '>':
        if (a3[1] == 61)
        {
          uint64_t v9 = 14LL;
          goto LABEL_41;
        }

        uint64_t v9 = 10LL;
        goto LABEL_44;
      case '?':
        uint64_t v9 = 23LL;
        goto LABEL_44;
      default:
        if (v8 != 33) {
          goto LABEL_28;
        }
        int v10 = a3[1];
        if (v10 == 38)
        {
          uint64_t v9 = 20LL;
          goto LABEL_41;
        }

        if (v10 == 61)
        {
          uint64_t v9 = 12LL;
          goto LABEL_41;
        }

        uint64_t v9 = 17LL;
        break;
    }

    goto LABEL_44;
  }

  switch(v8)
  {
    case '^':
      uint64_t v9 = 8LL;
      goto LABEL_44;
    case '|':
      if (a3[1] != 124)
      {
        uint64_t v9 = 19LL;
        goto LABEL_44;
      }

      uint64_t v9 = 16LL;
LABEL_41:
      *(_DWORD *)a4 = v9;
      *(_DWORD *)(a4 + 16) = 2;
      break;
    case '~':
      uint64_t v9 = 21LL;
LABEL_44:
      *(_DWORD *)a4 = v9;
      break;
    default:
LABEL_28:
      float result = (*(uint64_t (**)(uint64_t, uint64_t, char *, char *))(*(void *)v6 + 272LL))( v6,  26LL,  &a3[-*a2],  &a3[-*a2]);
      uint64_t v9 = 0LL;
      break;
  }

uint64_t sub_139568(uint64_t a1, uint64_t a2, double **a3)
{
  size_t v4 = *(char **)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16) - (void)v4;
  uint64_t v6 = v5 + 1;
  if (v5 < -2) {
    size_t v7 = -1LL;
  }
  else {
    size_t v7 = v5 + 2;
  }
  int v8 = (const char *)operator new[](v7);
  uint64_t v9 = (char *)v8;
  if ((v5 & 0x8000000000000000LL) == 0)
  {
    int v10 = (char *)v8;
    uint64_t v11 = v5 + 1;
    do
    {
      char v12 = *v4++;
      *v10++ = v12;
      --v11;
    }

    while (v11);
  }

  unint64_t v13 = (unint64_t)&v8[v6];
  v8[v6] = 0;
  double v14 = mathParser::cString2Number<double>(v8, &v17, _c_locale);
  operator delete[](v9);
  uint64_t result = 0LL;
  if ((unint64_t)v17 >= v13)
  {
    uint64_t v16 = (double *)sub_122A0C(0x18uLL);
    *(void *)uint64_t v16 = off_24E1B0;
    v16[1] = 0.0;
    float v16[2] = v14;
    *a3 = v16;
    return 1LL;
  }

  return result;
}

uint64_t sub_13963C(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = *(void *)(a2 + 16) - *(void *)(a2 + 8);
  if (v3 > 5) {
    return 0LL;
  }
  if ((v3 & 0x8000000000000000LL) == 0)
  {
    unint64_t v6 = 0LL;
    do
    {
      __s1[v6] = __toupper(*(char *)(*(void *)(a2 + 8) + v6));
      if (v6 > 4) {
        break;
      }
    }

    while (v3 > (uint64_t)v6++);
  }

  uint64_t v8 = 0LL;
  __s1[v3 + 1] = 0;
  while (strncmp(__s1, off_2ACD28[v8], 6uLL))
  {
    if (++v8 == 4) {
      return 0LL;
    }
  }

  int v10 = sub_122A0C(0x18uLL);
  uint64_t v11 = qword_1F67A0[v8];
  void *v10 = off_24E1B0;
  v10[1] = 0LL;
  v10[2] = v11;
  *a3 = v10;
  return 1LL;
}

void *sub_139724( uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10)
{
  switch(a2)
  {
    case 1:
      int v10 = sub_122A0C(0x18uLL);
      sub_13C978(v10, (uint64_t)a9);
      uint64_t v11 = (uint64_t (**)())&off_253050;
      goto LABEL_48;
    case 2:
      int v10 = sub_122A0C(0x18uLL);
      sub_13C978(v10, (uint64_t)a9);
      uint64_t v11 = (uint64_t (**)())&off_253188;
      goto LABEL_48;
    case 3:
      int v10 = sub_122A0C(0x18uLL);
      sub_13C978(v10, (uint64_t)a9);
      uint64_t v11 = (uint64_t (**)())&off_2532C0;
      goto LABEL_48;
    case 4:
      int v10 = sub_122A0C(0x18uLL);
      sub_13C978(v10, (uint64_t)a9);
      uint64_t v11 = off_2533F8;
      goto LABEL_48;
    case 5:
      int v10 = sub_122A0C(0x18uLL);
      sub_13C978(v10, (uint64_t)a9);
      uint64_t v11 = off_253530;
      goto LABEL_48;
    case 6:
      int v10 = sub_122A0C(0x18uLL);
      sub_13C978(v10, (uint64_t)a9);
      uint64_t v11 = off_253668;
      goto LABEL_48;
    case 7:
      int v10 = sub_122A0C(0x20uLL);
      sub_13DAE4((uint64_t)v10, a9);
      return v10;
    case 8:
      int v10 = sub_122A0C(0x18uLL);
      sub_13C978(v10, (uint64_t)a9);
      uint64_t v11 = off_2538D8;
      goto LABEL_48;
    case 9:
      int v10 = sub_122A0C(0x18uLL);
      sub_13C978(v10, (uint64_t)a9);
      uint64_t v11 = off_253A10;
      goto LABEL_48;
    case 10:
      int v10 = sub_122A0C(0x18uLL);
      sub_13C978(v10, (uint64_t)a9);
      uint64_t v11 = off_253B48;
      goto LABEL_48;
    case 11:
      int v10 = sub_122A0C(0x18uLL);
      sub_13C978(v10, (uint64_t)a9);
      uint64_t v11 = off_253C80;
      goto LABEL_48;
    case 12:
      int v10 = sub_122A0C(0x18uLL);
      sub_13C978(v10, (uint64_t)a9);
      uint64_t v11 = off_253DB8;
      goto LABEL_48;
    case 13:
      int v10 = sub_122A0C(0x18uLL);
      sub_13C978(v10, (uint64_t)a9);
      uint64_t v11 = off_253EF0;
      goto LABEL_48;
    case 14:
      int v10 = sub_122A0C(0x18uLL);
      sub_13C978(v10, (uint64_t)a9);
      uint64_t v11 = off_254028;
      goto LABEL_48;
    case 15:
      int v10 = sub_122A0C(0x18uLL);
      sub_13C978(v10, (uint64_t)a9);
      uint64_t v11 = off_254160;
      goto LABEL_48;
    case 16:
      int v10 = sub_122A0C(0x18uLL);
      sub_13C978(v10, (uint64_t)a9);
      uint64_t v11 = off_254298;
      goto LABEL_48;
    case 17:
      int v10 = sub_122A0C(0x18uLL);
      sub_13C978(v10, (uint64_t)a9);
      uint64_t v11 = off_2543D0;
      goto LABEL_48;
    case 18:
      int v10 = sub_122A0C(0x18uLL);
      sub_13C978(v10, (uint64_t)a9);
      uint64_t v11 = off_254508;
      goto LABEL_48;
    case 19:
      int v10 = sub_122A0C(0x18uLL);
      sub_13C978(v10, (uint64_t)a9);
      uint64_t v11 = off_254640;
      goto LABEL_48;
    case 20:
      int v10 = sub_122A0C(0x18uLL);
      sub_13C978(v10, (uint64_t)a9);
      uint64_t v11 = (uint64_t (**)())&off_254778;
      goto LABEL_48;
    case 21:
      int v10 = sub_122A0C(0x18uLL);
      sub_13C978(v10, (uint64_t)a9);
      uint64_t v11 = (uint64_t (**)())&off_2548B0;
      goto LABEL_48;
    case 22:
      int v10 = sub_122A0C(0x18uLL);
      sub_13C978(v10, (uint64_t)a9);
      uint64_t v11 = (uint64_t (**)())&off_2549E8;
      goto LABEL_48;
    case 23:
      int v10 = sub_122A0C(0x18uLL);
      sub_13C978(v10, (uint64_t)a9);
      uint64_t v11 = off_254B20;
      goto LABEL_48;
    case 24:
      int v10 = sub_122A0C(0x18uLL);
      sub_13C978(v10, (uint64_t)a9);
      uint64_t v11 = off_254C58;
      goto LABEL_48;
    case 25:
      int v10 = sub_122A0C(0x18uLL);
      sub_13C978(v10, (uint64_t)a9);
      uint64_t v11 = off_254D90;
      goto LABEL_48;
    case 26:
      int v10 = sub_122A0C(0x18uLL);
      sub_13C978(v10, (uint64_t)a9);
      uint64_t v11 = off_254EC8;
      goto LABEL_48;
    case 27:
      int v10 = sub_122A0C(0x18uLL);
      sub_13C978(v10, (uint64_t)a9);
      uint64_t v11 = off_255000;
      goto LABEL_48;
    case 28:
      int v10 = sub_122A0C(0x18uLL);
      sub_13C978(v10, (uint64_t)a9);
      uint64_t v11 = off_255138;
      goto LABEL_48;
    case 29:
      int v10 = sub_122A0C(0x18uLL);
      sub_13C978(v10, (uint64_t)a9);
      uint64_t v11 = off_255270;
      goto LABEL_48;
    case 30:
      int v10 = sub_122A0C(0x18uLL);
      sub_13C978(v10, (uint64_t)a9);
      uint64_t v11 = off_2553A8;
      goto LABEL_48;
    case 31:
      int v10 = sub_122A0C(0x20uLL);
      sub_142A14(v10, (uint64_t)a9, a10);
      uint64_t v11 = off_2554E0;
LABEL_48:
      void *v10 = v11;
      return v10;
    case 32:
      uint64_t v25 = &a10;
      else {
        size_t v12 = 8LL * (int)a9;
      }
      unint64_t v13 = operator new[](v12);
      double v14 = v13;
      if ((int)a9 >= 1)
      {
        uint64_t v15 = a9;
        uint64_t v16 = v13;
        do
        {
          int v17 = v25++;
          *v16++ = *v17;
          --v15;
        }

        while (v15);
      }

      int v10 = sub_122A0C(0x28uLL);
      sub_14361C((uint64_t)v10, (int)a9, v14);
      uint64_t v18 = off_255618;
      goto LABEL_46;
    case 33:
      int v26 = &a10;
      else {
        size_t v19 = 8LL * (int)a9;
      }
      float v20 = operator new[](v19);
      double v14 = v20;
      if ((int)a9 >= 1)
      {
        uint64_t v21 = a9;
        uint64_t v22 = v20;
        do
        {
          uint64_t v23 = v26++;
          *v22++ = *v23;
          --v21;
        }

        while (v21);
      }

      int v10 = sub_122A0C(0x28uLL);
      sub_14361C((uint64_t)v10, (int)a9, v14);
      uint64_t v18 = off_255750;
LABEL_46:
      void *v10 = v18;
      operator delete[](v14);
      break;
    default:
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 272LL))(a1, 25LL, -1LL, -1LL);
      int v10 = 0LL;
      break;
  }

  return v10;
}

void sub_139DEC(_Unwind_Exception *exception_object)
{
  if (v1) {
    free(v1);
  }
  _Unwind_Resume(exception_object);
}

void *sub_139E84(void *a1, uint64_t a2)
{
  uint64_t result = sub_13C978(a1, a2);
  void *result = &off_253050;
  return result;
}

void *sub_139EA4(void *a1, uint64_t a2)
{
  uint64_t result = sub_13C978(a1, a2);
  void *result = &off_253188;
  return result;
}

void *sub_139EC4(void *a1, uint64_t a2)
{
  uint64_t result = sub_13C978(a1, a2);
  void *result = &off_2532C0;
  return result;
}

void *sub_139EE4(void *a1, uint64_t a2)
{
  uint64_t result = sub_13C978(a1, a2);
  void *result = off_2533F8;
  return result;
}

void *sub_139F04(void *a1, uint64_t a2)
{
  uint64_t result = sub_13C978(a1, a2);
  void *result = off_253530;
  return result;
}

void *sub_139F24(void *a1, uint64_t a2)
{
  uint64_t result = sub_13C978(a1, a2);
  void *result = off_253668;
  return result;
}

void *sub_139F48(void *a1, uint64_t a2)
{
  uint64_t result = sub_13C978(a1, a2);
  void *result = off_2538D8;
  return result;
}

void *sub_139F68(void *a1, uint64_t a2)
{
  uint64_t result = sub_13C978(a1, a2);
  void *result = off_253A10;
  return result;
}

void *sub_139F88(void *a1, uint64_t a2)
{
  uint64_t result = sub_13C978(a1, a2);
  void *result = off_253B48;
  return result;
}

void *sub_139FA8(void *a1, uint64_t a2)
{
  uint64_t result = sub_13C978(a1, a2);
  void *result = off_253C80;
  return result;
}

void *sub_139FC8(void *a1, uint64_t a2)
{
  uint64_t result = sub_13C978(a1, a2);
  void *result = off_253DB8;
  return result;
}

void *sub_139FE8(void *a1, uint64_t a2)
{
  uint64_t result = sub_13C978(a1, a2);
  void *result = off_253EF0;
  return result;
}

void *sub_13A008(void *a1, uint64_t a2)
{
  uint64_t result = sub_13C978(a1, a2);
  void *result = off_254028;
  return result;
}

void *sub_13A028(void *a1, uint64_t a2)
{
  uint64_t result = sub_13C978(a1, a2);
  void *result = off_254160;
  return result;
}

void *sub_13A048(void *a1, uint64_t a2)
{
  uint64_t result = sub_13C978(a1, a2);
  void *result = off_254298;
  return result;
}

void *sub_13A068(void *a1, uint64_t a2)
{
  uint64_t result = sub_13C978(a1, a2);
  void *result = off_2543D0;
  return result;
}

void *sub_13A088(void *a1, uint64_t a2)
{
  uint64_t result = sub_13C978(a1, a2);
  void *result = off_254508;
  return result;
}

void *sub_13A0A8(void *a1, uint64_t a2)
{
  uint64_t result = sub_13C978(a1, a2);
  void *result = off_254640;
  return result;
}

void *sub_13A0C8(void *a1, uint64_t a2)
{
  uint64_t result = sub_13C978(a1, a2);
  void *result = &off_254778;
  return result;
}

void *sub_13A0E8(void *a1, uint64_t a2)
{
  uint64_t result = sub_13C978(a1, a2);
  void *result = &off_2548B0;
  return result;
}

void *sub_13A108(void *a1, uint64_t a2)
{
  uint64_t result = sub_13C978(a1, a2);
  void *result = &off_2549E8;
  return result;
}

void *sub_13A128(void *a1, uint64_t a2)
{
  uint64_t result = sub_13C978(a1, a2);
  void *result = off_254B20;
  return result;
}

void *sub_13A148(void *a1, uint64_t a2)
{
  uint64_t result = sub_13C978(a1, a2);
  void *result = off_254C58;
  return result;
}

void *sub_13A168(void *a1, uint64_t a2)
{
  uint64_t result = sub_13C978(a1, a2);
  void *result = off_254D90;
  return result;
}

void *sub_13A188(void *a1, uint64_t a2)
{
  uint64_t result = sub_13C978(a1, a2);
  void *result = off_254EC8;
  return result;
}

void *sub_13A1A8(void *a1, uint64_t a2)
{
  uint64_t result = sub_13C978(a1, a2);
  void *result = off_255000;
  return result;
}

void *sub_13A1C8(void *a1, uint64_t a2)
{
  uint64_t result = sub_13C978(a1, a2);
  void *result = off_255138;
  return result;
}

void *sub_13A1E8(void *a1, uint64_t a2)
{
  uint64_t result = sub_13C978(a1, a2);
  void *result = off_255270;
  return result;
}

void *sub_13A208(void *a1, uint64_t a2)
{
  uint64_t result = sub_13C978(a1, a2);
  void *result = off_2553A8;
  return result;
}

void *sub_13A228(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = sub_142A14(a1, a2, a3);
  void *result = off_2554E0;
  return result;
}

void *sub_13A248(uint64_t a1, int a2, void *a3)
{
  uint64_t result = (void *)sub_14361C(a1, a2, a3);
  void *result = off_255618;
  return result;
}

void *sub_13A268(uint64_t a1, int a2, void *a3)
{
  uint64_t result = (void *)sub_14361C(a1, a2, a3);
  void *result = off_255750;
  return result;
}

uint64_t sub_13A288(uint64_t a1, uint64_t *a2, int a3, uint64_t **a4)
{
  unint64_t v5 = a2[1];
  unint64_t v6 = (_BYTE *)a2[2];
  if (v5 > (unint64_t)v6)
  {
    size_t v7 = 0LL;
LABEL_10:
    unint64_t v6 = 0LL;
    goto LABEL_11;
  }

  size_t v7 = (_BYTE *)a2[1];
  while (*v7 != 40)
  {
    if (++v7 > v6)
    {
      size_t v7 = 0LL;
      break;
    }
  }

  while (*v6 != 41)
  {
  }

void sub_13A778(_Unwind_Exception *exception_object)
{
  if (v1) {
    free(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_13A810(uint64_t *a1, uint64_t *a2)
{
  uint64_t result = sub_13C898(a1, a2);
  uint64_t *result = (uint64_t)off_2538D8;
  return result;
}

uint64_t *sub_13A830(uint64_t *a1, uint64_t *a2)
{
  uint64_t result = sub_13C898(a1, a2);
  uint64_t *result = (uint64_t)off_253A10;
  return result;
}

uint64_t *sub_13A850(uint64_t *a1, uint64_t *a2)
{
  uint64_t result = sub_13C898(a1, a2);
  uint64_t *result = (uint64_t)off_253B48;
  return result;
}

uint64_t *sub_13A870(uint64_t *a1, uint64_t *a2)
{
  uint64_t result = sub_13C898(a1, a2);
  uint64_t *result = (uint64_t)off_253C80;
  return result;
}

uint64_t *sub_13A890(uint64_t *a1, uint64_t *a2)
{
  uint64_t result = sub_13C898(a1, a2);
  uint64_t *result = (uint64_t)off_253DB8;
  return result;
}

uint64_t *sub_13A8B0(uint64_t *a1, uint64_t *a2)
{
  uint64_t result = sub_13C898(a1, a2);
  uint64_t *result = (uint64_t)off_253EF0;
  return result;
}

uint64_t *sub_13A8D0(uint64_t *a1, uint64_t *a2)
{
  uint64_t result = sub_13C898(a1, a2);
  uint64_t *result = (uint64_t)&off_2532C0;
  return result;
}

uint64_t *sub_13A8F0(uint64_t *a1, uint64_t *a2)
{
  uint64_t result = sub_13C898(a1, a2);
  uint64_t *result = (uint64_t)&off_253050;
  return result;
}

uint64_t *sub_13A910(uint64_t *a1, uint64_t *a2)
{
  uint64_t result = sub_13C898(a1, a2);
  uint64_t *result = (uint64_t)&off_253188;
  return result;
}

uint64_t *sub_13A930(uint64_t *a1, uint64_t *a2)
{
  uint64_t result = sub_13C898(a1, a2);
  uint64_t *result = (uint64_t)off_2533F8;
  return result;
}

uint64_t *sub_13A950(uint64_t *a1, uint64_t *a2)
{
  uint64_t result = sub_13C898(a1, a2);
  uint64_t *result = (uint64_t)off_253530;
  return result;
}

uint64_t *sub_13A970(uint64_t *a1, uint64_t *a2)
{
  uint64_t result = sub_13C898(a1, a2);
  uint64_t *result = (uint64_t)off_253668;
  return result;
}

uint64_t *sub_13A990(uint64_t *a1, uint64_t *a2)
{
  uint64_t result = sub_13C898(a1, a2);
  uint64_t *result = (uint64_t)off_254028;
  return result;
}

uint64_t *sub_13A9B0(uint64_t *a1, uint64_t *a2)
{
  uint64_t result = sub_13C898(a1, a2);
  uint64_t *result = (uint64_t)off_254160;
  return result;
}

uint64_t *sub_13A9D0(uint64_t *a1, uint64_t *a2)
{
  uint64_t result = sub_13C898(a1, a2);
  uint64_t *result = (uint64_t)off_254298;
  return result;
}

uint64_t *sub_13A9F0(uint64_t *a1, uint64_t *a2)
{
  uint64_t result = sub_13C898(a1, a2);
  uint64_t *result = (uint64_t)off_2543D0;
  return result;
}

uint64_t *sub_13AA10(uint64_t *a1, uint64_t *a2)
{
  uint64_t result = sub_13C898(a1, a2);
  uint64_t *result = (uint64_t)off_254508;
  return result;
}

uint64_t *sub_13AA30(uint64_t *a1, uint64_t *a2)
{
  uint64_t result = sub_13C898(a1, a2);
  uint64_t *result = (uint64_t)off_254640;
  return result;
}

uint64_t *sub_13AA50(uint64_t *a1, uint64_t *a2)
{
  uint64_t result = sub_13C898(a1, a2);
  uint64_t *result = (uint64_t)&off_254778;
  return result;
}

uint64_t *sub_13AA70(uint64_t *a1, uint64_t *a2)
{
  uint64_t result = sub_13C898(a1, a2);
  uint64_t *result = (uint64_t)&off_2548B0;
  return result;
}

uint64_t *sub_13AA90(uint64_t *a1, uint64_t *a2)
{
  uint64_t result = sub_13C898(a1, a2);
  uint64_t *result = (uint64_t)&off_2549E8;
  return result;
}

uint64_t *sub_13AAB0(uint64_t *a1, uint64_t *a2)
{
  uint64_t result = sub_13C898(a1, a2);
  uint64_t *result = (uint64_t)off_254B20;
  return result;
}

uint64_t *sub_13AAD0(uint64_t *a1, uint64_t *a2)
{
  uint64_t result = sub_13C898(a1, a2);
  uint64_t *result = (uint64_t)off_254C58;
  return result;
}

uint64_t *sub_13AAF0(uint64_t *a1, uint64_t *a2)
{
  uint64_t result = sub_13C898(a1, a2);
  uint64_t *result = (uint64_t)off_254D90;
  return result;
}

uint64_t *sub_13AB14(uint64_t *a1, uint64_t *a2)
{
  uint64_t result = sub_13C898(a1, a2);
  uint64_t *result = (uint64_t)off_255138;
  return result;
}

uint64_t *sub_13AB34(uint64_t *a1, uint64_t *a2)
{
  uint64_t result = sub_13C898(a1, a2);
  uint64_t *result = (uint64_t)off_255270;
  return result;
}

uint64_t *sub_13AB54(uint64_t *a1, uint64_t *a2)
{
  uint64_t result = sub_13C898(a1, a2);
  uint64_t *result = (uint64_t)off_2553A8;
  return result;
}

void *sub_13AB74(void *a1, void *a2)
{
  uint64_t result = sub_1426F4(a1, a2);
  void *result = off_2554E0;
  return result;
}

void *sub_13AB94(void *a1, uint64_t *a2)
{
  uint64_t result = sub_14324C(a1, a2);
  void *result = off_255618;
  return result;
}

void *sub_13ABB4(void *a1, uint64_t *a2)
{
  uint64_t result = sub_14324C(a1, a2);
  void *result = off_255750;
  return result;
}

void *sub_13ABD4(void *a1, uint64_t *a2)
{
  uint64_t result = sub_14324C(a1, a2);
  void *result = off_255888;
  return result;
}

void *sub_13ABF4(void *a1, uint64_t *a2)
{
  uint64_t result = sub_14324C(a1, a2);
  void *result = off_2559C0;
  return result;
}

void *sub_13AC14(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4)
{
  if ((!a3 || !a4) && (a2 > 0x15 || ((1 << a2) & 0x220004) == 0)) {
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 272LL))(a1, 21LL, -1LL, -1LL);
  }
  switch(a2)
  {
    case 2u:
      if (!a4) {
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 272LL))(a1, 21LL, -1LL, -1LL);
      }
      uint64_t v8 = sub_122A0C(0x18uLL);
      sub_13C978(v8, a4);
      uint64_t v9 = off_253668;
      goto LABEL_36;
    case 3u:
      uint64_t v8 = sub_122A0C(0x20uLL);
      sub_144854(v8, a3, a4);
      uint64_t v9 = off_255AF8;
      goto LABEL_36;
    case 4u:
      uint64_t v8 = sub_122A0C(0x20uLL);
      sub_144854(v8, a3, a4);
      uint64_t v9 = off_255C38;
      goto LABEL_36;
    case 5u:
      uint64_t v8 = sub_122A0C(0x20uLL);
      sub_144854(v8, a3, a4);
      uint64_t v9 = off_255D78;
      goto LABEL_36;
    case 6u:
      uint64_t v8 = sub_122A0C(0x20uLL);
      sub_144854(v8, a3, a4);
      uint64_t v9 = off_255EB8;
      goto LABEL_36;
    case 7u:
      uint64_t v8 = sub_122A0C(0x20uLL);
      sub_144854(v8, a3, a4);
      uint64_t v9 = off_255FF8;
      goto LABEL_36;
    case 8u:
      uint64_t v8 = sub_122A0C(0x20uLL);
      sub_144854(v8, a3, a4);
      uint64_t v9 = (uint64_t (**)())&off_256138;
      goto LABEL_36;
    case 9u:
      uint64_t v8 = sub_122A0C(0x20uLL);
      sub_144854(v8, a3, a4);
      uint64_t v9 = off_256278;
      goto LABEL_36;
    case 0xAu:
      uint64_t v8 = sub_122A0C(0x20uLL);
      sub_144854(v8, a3, a4);
      uint64_t v9 = off_2563B8;
      goto LABEL_36;
    case 0xBu:
      uint64_t v8 = sub_122A0C(0x20uLL);
      sub_144854(v8, a3, a4);
      uint64_t v9 = off_2564F8;
      goto LABEL_36;
    case 0xCu:
      uint64_t v8 = sub_122A0C(0x20uLL);
      sub_144854(v8, a3, a4);
      uint64_t v9 = off_256638;
      goto LABEL_36;
    case 0xDu:
      uint64_t v8 = sub_122A0C(0x20uLL);
      sub_144854(v8, a3, a4);
      uint64_t v9 = off_256778;
      goto LABEL_36;
    case 0xEu:
      uint64_t v8 = sub_122A0C(0x20uLL);
      sub_144854(v8, a3, a4);
      uint64_t v9 = off_2568B8;
      goto LABEL_36;
    case 0xFu:
      uint64_t v8 = sub_122A0C(0x20uLL);
      sub_144854(v8, a3, a4);
      uint64_t v9 = off_2569F8;
      goto LABEL_36;
    case 0x10u:
      uint64_t v8 = sub_122A0C(0x20uLL);
      sub_144854(v8, a3, a4);
      uint64_t v9 = off_256B38;
      goto LABEL_36;
    case 0x11u:
      if (!a4) {
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 272LL))(a1, 21LL, -1LL, -1LL);
      }
      uint64_t v8 = sub_122A0C(0x18uLL);
      sub_13C978(v8, a4);
      uint64_t v9 = off_254EC8;
      goto LABEL_36;
    case 0x12u:
      uint64_t v8 = sub_122A0C(0x20uLL);
      sub_144854(v8, a3, a4);
      uint64_t v9 = off_256C78;
      goto LABEL_36;
    case 0x13u:
      uint64_t v8 = sub_122A0C(0x20uLL);
      sub_144854(v8, a3, a4);
      uint64_t v9 = off_256DB8;
      goto LABEL_36;
    case 0x14u:
      uint64_t v8 = sub_122A0C(0x20uLL);
      sub_144854(v8, a3, a4);
      uint64_t v9 = off_256EF8;
      goto LABEL_36;
    case 0x15u:
      if (!a4) {
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 272LL))(a1, 21LL, -1LL, -1LL);
      }
      uint64_t v8 = sub_122A0C(0x18uLL);
      sub_13C978(v8, a4);
      uint64_t v9 = off_255000;
      goto LABEL_36;
    case 0x16u:
      uint64_t v8 = sub_122A0C(0x20uLL);
      sub_144854(v8, a3, a4);
      uint64_t v9 = off_2571C0;
LABEL_36:
      *uint64_t v8 = v9;
      break;
    case 0x17u:
      uint64_t v8 = sub_122A0C(0x20uLL);
      sub_14B288(v8, a3, a4);
      break;
    default:
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 272LL))(a1, 26LL, -1LL, -1LL);
      uint64_t v8 = 0LL;
      break;
  }

  return v8;
}

void sub_13B038(_Unwind_Exception *exception_object)
{
  if (v1) {
    free(v1);
  }
  _Unwind_Resume(exception_object);
}

void *sub_13B0A4(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = sub_144854(a1, a2, a3);
  void *result = &off_256138;
  return result;
}

void *sub_13B0C4(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = sub_144854(a1, a2, a3);
  void *result = off_256278;
  return result;
}

void *sub_13B0E4(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = sub_144854(a1, a2, a3);
  void *result = off_2563B8;
  return result;
}

void *sub_13B104(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = sub_144854(a1, a2, a3);
  void *result = off_2564F8;
  return result;
}

void *sub_13B124(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = sub_144854(a1, a2, a3);
  void *result = off_256638;
  return result;
}

void *sub_13B144(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = sub_144854(a1, a2, a3);
  void *result = off_256778;
  return result;
}

void *sub_13B164(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = sub_144854(a1, a2, a3);
  void *result = off_2568B8;
  return result;
}

void *sub_13B184(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = sub_144854(a1, a2, a3);
  void *result = off_2569F8;
  return result;
}

void *sub_13B1A4(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = sub_144854(a1, a2, a3);
  void *result = off_256B38;
  return result;
}

void *sub_13B1C4(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = sub_144854(a1, a2, a3);
  void *result = off_256C78;
  return result;
}

void *sub_13B1E4(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = sub_144854(a1, a2, a3);
  void *result = off_256DB8;
  return result;
}

void *sub_13B204(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = sub_144854(a1, a2, a3);
  void *result = off_256EF8;
  return result;
}

void *sub_13B228(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = sub_144854(a1, a2, a3);
  void *result = off_2571C0;
  return result;
}

uint64_t *sub_13B248(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t **a4)
{
  uint64_t v5 = *((void *)a2 + 3);
  v13[2] = *((void *)a2 + 2);
  v13[3] = v5;
  __int128 v6 = *a2;
  v13[0] = *(void *)a2;
  __int128 v14 = v6;
  uint64_t v7 = *(void *)(a3 + 8);
  uint64_t v15 = v7 - 1;
  uint64_t v16 = v5;
  uint64_t v8 = *(int *)(a3 + 16);
  v13[1] = v7 + v8;
  switch(*(_DWORD *)a3)
  {
    case 2:
      int v10 = (uint64_t *)sub_122A0C(0x18uLL);
      uint64_t result = sub_13C898(v10, v13);
      size_t v12 = off_253668;
      goto LABEL_29;
    case 3:
      int v10 = (uint64_t *)sub_122A0C(0x20uLL);
      uint64_t result = sub_144730(v10, (uint64_t *)&v14, (uint64_t)v13);
      size_t v12 = off_255AF8;
      goto LABEL_29;
    case 4:
      int v10 = (uint64_t *)sub_122A0C(0x20uLL);
      uint64_t result = sub_144730(v10, (uint64_t *)&v14, (uint64_t)v13);
      size_t v12 = off_255C38;
      goto LABEL_29;
    case 5:
      int v10 = (uint64_t *)sub_122A0C(0x20uLL);
      uint64_t result = sub_144730(v10, (uint64_t *)&v14, (uint64_t)v13);
      size_t v12 = off_255D78;
      goto LABEL_29;
    case 6:
      int v10 = (uint64_t *)sub_122A0C(0x20uLL);
      uint64_t result = sub_144730(v10, (uint64_t *)&v14, (uint64_t)v13);
      size_t v12 = off_255EB8;
      goto LABEL_29;
    case 7:
      int v10 = (uint64_t *)sub_122A0C(0x20uLL);
      uint64_t result = sub_144730(v10, (uint64_t *)&v14, (uint64_t)v13);
      size_t v12 = off_255FF8;
      goto LABEL_29;
    case 8:
      int v10 = (uint64_t *)sub_122A0C(0x20uLL);
      uint64_t result = sub_144730(v10, (uint64_t *)&v14, (uint64_t)v13);
      size_t v12 = (uint64_t (**)())&off_256138;
      goto LABEL_29;
    case 9:
      int v10 = (uint64_t *)sub_122A0C(0x20uLL);
      uint64_t result = sub_144730(v10, (uint64_t *)&v14, (uint64_t)v13);
      size_t v12 = off_256278;
      goto LABEL_29;
    case 0xA:
      int v10 = (uint64_t *)sub_122A0C(0x20uLL);
      uint64_t result = sub_144730(v10, (uint64_t *)&v14, (uint64_t)v13);
      size_t v12 = off_2563B8;
      goto LABEL_29;
    case 0xB:
      int v10 = (uint64_t *)sub_122A0C(0x20uLL);
      uint64_t result = sub_144730(v10, (uint64_t *)&v14, (uint64_t)v13);
      size_t v12 = off_2564F8;
      goto LABEL_29;
    case 0xC:
      int v10 = (uint64_t *)sub_122A0C(0x20uLL);
      uint64_t result = sub_144730(v10, (uint64_t *)&v14, (uint64_t)v13);
      size_t v12 = off_256638;
      goto LABEL_29;
    case 0xD:
      int v10 = (uint64_t *)sub_122A0C(0x20uLL);
      uint64_t result = sub_144730(v10, (uint64_t *)&v14, (uint64_t)v13);
      size_t v12 = off_256778;
      goto LABEL_29;
    case 0xE:
      int v10 = (uint64_t *)sub_122A0C(0x20uLL);
      uint64_t result = sub_144730(v10, (uint64_t *)&v14, (uint64_t)v13);
      size_t v12 = off_2568B8;
      goto LABEL_29;
    case 0xF:
      int v10 = (uint64_t *)sub_122A0C(0x20uLL);
      uint64_t result = sub_144730(v10, (uint64_t *)&v14, (uint64_t)v13);
      size_t v12 = off_2569F8;
      goto LABEL_29;
    case 0x10:
      int v10 = (uint64_t *)sub_122A0C(0x20uLL);
      uint64_t result = sub_144730(v10, (uint64_t *)&v14, (uint64_t)v13);
      size_t v12 = off_256B38;
      goto LABEL_29;
    case 0x11:
      if (((*(uint64_t (**)(uint64_t, __int128 *))(*(void *)a1 + 248LL))(a1, &v14) & 1) == 0)
      {
        (*(void (**)(uint64_t, __int128 *))(*(void *)a1 + 280LL))(a1, &v14);
        (*(void (**)(uint64_t, uint64_t, void, void))(*(void *)a1 + 272LL))( a1,  23LL,  *((void *)&v14 + 1) - v14,  v15 - v14);
      }

      int v10 = (uint64_t *)sub_122A0C(0x18uLL);
      uint64_t result = sub_13C898(v10, v13);
      size_t v12 = off_254EC8;
      goto LABEL_29;
    case 0x12:
      int v10 = (uint64_t *)sub_122A0C(0x20uLL);
      uint64_t result = sub_144730(v10, (uint64_t *)&v14, (uint64_t)v13);
      size_t v12 = off_256C78;
      goto LABEL_29;
    case 0x13:
      int v10 = (uint64_t *)sub_122A0C(0x20uLL);
      uint64_t result = sub_144730(v10, (uint64_t *)&v14, (uint64_t)v13);
      size_t v12 = off_256DB8;
      goto LABEL_29;
    case 0x14:
      int v10 = (uint64_t *)sub_122A0C(0x20uLL);
      uint64_t result = sub_144730(v10, (uint64_t *)&v14, (uint64_t)v13);
      size_t v12 = off_256EF8;
      goto LABEL_29;
    case 0x15:
      if (((*(uint64_t (**)(uint64_t, __int128 *))(*(void *)a1 + 248LL))(a1, &v14) & 1) == 0)
      {
        (*(void (**)(uint64_t, __int128 *))(*(void *)a1 + 280LL))(a1, &v14);
        (*(void (**)(uint64_t, uint64_t, void, void))(*(void *)a1 + 272LL))( a1,  23LL,  *((void *)&v14 + 1) - v14,  v15 - v14);
      }

      int v10 = (uint64_t *)sub_122A0C(0x18uLL);
      uint64_t result = sub_13C898(v10, v13);
      size_t v12 = off_255000;
      goto LABEL_29;
    case 0x16:
      int v10 = (uint64_t *)sub_122A0C(0x20uLL);
      uint64_t result = sub_144730(v10, (uint64_t *)&v14, (uint64_t)v13);
      size_t v12 = off_2571C0;
LABEL_29:
      uint64_t *v10 = (uint64_t)v12;
      goto LABEL_30;
    case 0x17:
      int v10 = (uint64_t *)sub_122A0C(0x20uLL);
      uint64_t result = sub_14B14C(v10, (uint64_t *)&v14, (const double *)v13);
LABEL_30:
      *a4 = v10;
      break;
    default:
      uint64_t result = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, void, void))(*(void *)a1 + 272LL))( a1,  23LL,  v7 - v6,  v7 - v6 + v8);
      break;
  }

  return result;
}

void sub_13B698(_Unwind_Exception *exception_object)
{
  if (v1) {
    free(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_13B704(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result = sub_144730(a1, a2, a3);
  uint64_t *result = (uint64_t)off_255AF8;
  return result;
}

uint64_t *sub_13B724(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result = sub_144730(a1, a2, a3);
  uint64_t *result = (uint64_t)off_255C38;
  return result;
}

uint64_t *sub_13B744(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result = sub_144730(a1, a2, a3);
  uint64_t *result = (uint64_t)off_255D78;
  return result;
}

uint64_t *sub_13B764(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result = sub_144730(a1, a2, a3);
  uint64_t *result = (uint64_t)off_255EB8;
  return result;
}

uint64_t *sub_13B784(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result = sub_144730(a1, a2, a3);
  uint64_t *result = (uint64_t)off_255FF8;
  return result;
}

uint64_t *sub_13B7A4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result = sub_144730(a1, a2, a3);
  uint64_t *result = (uint64_t)&off_256138;
  return result;
}

uint64_t *sub_13B7C4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result = sub_144730(a1, a2, a3);
  uint64_t *result = (uint64_t)off_256278;
  return result;
}

uint64_t *sub_13B7E4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result = sub_144730(a1, a2, a3);
  uint64_t *result = (uint64_t)off_2563B8;
  return result;
}

uint64_t *sub_13B804(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result = sub_144730(a1, a2, a3);
  uint64_t *result = (uint64_t)off_2564F8;
  return result;
}

uint64_t *sub_13B824(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result = sub_144730(a1, a2, a3);
  uint64_t *result = (uint64_t)off_256638;
  return result;
}

uint64_t *sub_13B844(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result = sub_144730(a1, a2, a3);
  uint64_t *result = (uint64_t)off_256778;
  return result;
}

uint64_t *sub_13B864(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result = sub_144730(a1, a2, a3);
  uint64_t *result = (uint64_t)off_2568B8;
  return result;
}

uint64_t *sub_13B884(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result = sub_144730(a1, a2, a3);
  uint64_t *result = (uint64_t)off_2569F8;
  return result;
}

uint64_t *sub_13B8A4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result = sub_144730(a1, a2, a3);
  uint64_t *result = (uint64_t)off_256B38;
  return result;
}

uint64_t *sub_13B8C4(uint64_t *a1, uint64_t *a2)
{
  uint64_t result = sub_13C898(a1, a2);
  uint64_t *result = (uint64_t)off_254EC8;
  return result;
}

uint64_t *sub_13B8E4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result = sub_144730(a1, a2, a3);
  uint64_t *result = (uint64_t)off_256C78;
  return result;
}

uint64_t *sub_13B904(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result = sub_144730(a1, a2, a3);
  uint64_t *result = (uint64_t)off_256DB8;
  return result;
}

uint64_t *sub_13B924(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result = sub_144730(a1, a2, a3);
  uint64_t *result = (uint64_t)off_256EF8;
  return result;
}

uint64_t *sub_13B944(uint64_t *a1, uint64_t *a2)
{
  uint64_t result = sub_13C898(a1, a2);
  uint64_t *result = (uint64_t)off_255000;
  return result;
}

uint64_t *sub_13B968(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result = sub_144730(a1, a2, a3);
  uint64_t *result = (uint64_t)off_2571C0;
  return result;
}

uint64_t sub_13B988(uint64_t a1, void *a2, unsigned __int8 *a3)
{
  __int128 v6 = (char *)a3;
  do
  {
    __darwin_ct_rune_t v8 = *--v6;
    __darwin_ct_rune_t v7 = v8;
    if (v8 < 0) {
      __uint32_t v9 = __maskrune(v7, 0x4000uLL);
    }
    else {
      __uint32_t v9 = _DefaultRuneLocale.__runetype[v7] & 0x4000;
    }
    unint64_t v10 = a2[1];
    if (v9) {
      BOOL v11 = (unint64_t)v6 > v10;
    }
    else {
      BOOL v11 = 0;
    }
  }

  while (v11);
  if ((unint64_t)v6 < v10)
  {
    int v12 = *a3;
    if (v12 == 45 || v12 == 43)
    {
      unint64_t v13 = a3;
      do
      {
        __darwin_ct_rune_t v15 = (char)*++v13;
        __darwin_ct_rune_t v14 = v15;
        if (v15 < 0) {
          __uint32_t v16 = __maskrune(v14, 0x4000uLL);
        }
        else {
          __uint32_t v16 = _DefaultRuneLocale.__runetype[v14] & 0x4000;
        }
        if (v16) {
          BOOL v17 = (unint64_t)v13 > a2[2];
        }
        else {
          BOOL v17 = 1;
        }
      }

      while (!v17);
      __darwin_ct_rune_t v18 = (char)*v13;
      if (v18 < 0)
      {
        if (!__maskrune(v18, 0x500uLL))
        {
LABEL_32:
          int v22 = *v13;
          if (v22 != 46 && v22 != 40) {
            goto LABEL_35;
          }
        }
      }

      else if ((_DefaultRuneLocale.__runetype[v18] & 0x500) == 0)
      {
        goto LABEL_32;
      }

uint64_t sub_13BCBC(uint64_t a1, void *a2, void *a3)
{
  __int128 v6 = (char *)a2[1];
  if ((unint64_t)v6 <= a2[2])
  {
    do
    {
      __darwin_ct_rune_t v7 = *v6;
      if (v7 < 0)
      {
        if (__maskrune(v7, 0x4000uLL))
        {
LABEL_4:
          __darwin_ct_rune_t v8 = v6;
          __uint32_t v9 = v6;
          do
          {
            unint64_t v10 = v9;
            BOOL v11 = v8;
            ++v9;
            __darwin_ct_rune_t v12 = v10[1];
            __uint32_t v13 = v12 < 0 ? __maskrune(v12, 0x4000uLL) : _DefaultRuneLocale.__runetype[v12] & 0x4000;
            __darwin_ct_rune_t v8 = v11 + 1;
          }

          while (v13);
          (*(void (**)(uint64_t, uint64_t, char *, char *))(*(void *)a1 + 272LL))( a1,  22LL,  &v6[-*a2],  &v11[-*a2]);
          goto LABEL_13;
        }
      }

      else if ((_DefaultRuneLocale.__runetype[v7] & 0x4000) != 0)
      {
        goto LABEL_4;
      }

      unint64_t v10 = v6;
LABEL_13:
      __int128 v6 = v10 + 1;
    }

    while ((unint64_t)(v10 + 1) <= a2[2]);
  }

  uint64_t result = (*(uint64_t (**)(uint64_t, void *, void *))(*(void *)a1 + 168LL))(a1, a2, a3);
  if (!(_DWORD)result)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t, void *, void *))(*(void *)a1 + 176LL))(a1, a2, a3);
    if (!(_DWORD)result)
    {
      __darwin_ct_rune_t v15 = sub_122A0C(0x28uLL);
      uint64_t result = sub_1543C0((uint64_t)v15, a2);
      *a3 = v15;
    }
  }

  return result;
}

void sub_13BE00(_Unwind_Exception *exception_object)
{
  if (v1) {
    free(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_13BE18(uint64_t a1, void *a2)
{
  unint64_t v2 = a2[1];
  if (v2 > a2[2]) {
    return 0LL;
  }
  uint64_t v5 = 0LL;
  unint64_t v6 = 0LL;
  int v7 = 0;
  int v8 = 0;
  do
  {
    int v9 = *(char *)v2;
    if (v9 == 41)
    {
      if (v8 == 1)
      {
        ++v7;
        unint64_t v6 = v2;
      }

      if (v8 <= 0) {
        (*(void (**)(uint64_t, uint64_t, unint64_t, unint64_t))(*(void *)a1 + 272LL))( a1,  24LL,  v2 - *a2,  v2 - *a2);
      }
      --v8;
    }

    else if (v9 == 40)
    {
      if (!v7 || v8)
      {
        unint64_t v10 = (char *)v2;
      }

      else
      {
        unint64_t v10 = (char *)(v2 + 1);
        uint64_t v11 = (v2 << 48) - (*a2 << 48) + 0x1000000000000LL;
        do
        {
          int v12 = *--v10;
          v11 -= 0x1000000000000LL;
        }

        while (v12 != 41);
        (*(void (**)(uint64_t, uint64_t, uint64_t, void))(*(void *)a1 + 272LL))( a1,  22LL,  v11 >> 48,  (__int16)(v2 - *a2));
      }

      ++v8;
      if (!v5) {
        uint64_t v5 = v10;
      }
      unint64_t v2 = (unint64_t)v10;
    }

    ++v2;
    unint64_t v13 = a2[2];
  }

  while (v2 <= v13);
  if (v8 >= 1)
  {
    (*(void (**)(uint64_t, uint64_t, char *, char *))(*(void *)a1 + 272LL))(a1, 24LL, &v5[-*a2], &v5[-*a2]);
    unint64_t v13 = a2[2];
  }

  if (v6 != v13 || !v5)
  {
    if (v6) {
      (*(void (**)(uint64_t, uint64_t, unint64_t, unint64_t))(*(void *)a1 + 272LL))( a1,  23LL,  v6 - *a2,  v13 - *a2);
    }
    return 0LL;
  }

  __darwin_ct_rune_t v14 = (const char *)a2[1];
  else {
    size_t v15 = 6LL;
  }
  strncpy(__dst, v14, v15);
  uint64_t v16 = 0LL;
  while (1)
  {
    __darwin_ct_rune_t v17 = __toupper(__dst[v16]);
    __dst[v16] = v17;
    if (v17 << 24 == 671088640) {
      break;
    }
    if ((v17 << 24) <= 0x7F000000)
    {
    }

    else if (__maskrune((char)v17, 0x4000uLL))
    {
      break;
    }

    if (++v16 == 6) {
      goto LABEL_41;
    }
  }

  __dst[v16] = 0;
LABEL_41:
  for (uint64_t i = 1LL; i != 36; ++i)
  {
    if (!strcmp(__dst, (&off_2ADD90)[i])) {
      break;
    }
  }

  return i;
}

void *sub_13C08C@<X0>(void *result@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  *(_WORD *)(a3 + 20) = 15;
  *(_DWORD *)a3 = 0;
  uint64_t v5 = (_BYTE *)a2[1];
  unint64_t v4 = a2[2];
  *(void *)(a3 + _Block_object_dispose(va, 8) = v5;
  *(_DWORD *)(a3 + 16) = 1;
  int v7 = result;
  uint64_t v8 = 0LL;
  int v9 = v5;
  while (1)
  {
    int v10 = (char)*v5;
    if (!*v5) {
      break;
    }
    uint64_t v11 = (v10 - 33);
    if (((1LL << (v10 - 33)) & 0x200000007A005631LL) == 0)
    {
      if (v11 == 7)
      {
        if (!(_DWORD)v8) {
          int v9 = v5;
        }
        uint64_t v12 = (v8 + 1);
        goto LABEL_12;
      }

      if (v11 == 8)
      {
        uint64_t v12 = (v8 - 1);
        if ((int)v8 <= 0) {
          uint64_t result = (void *)(*(uint64_t (**)(void *, uint64_t, _BYTE *, _BYTE *))(*v7 + 272LL))( v7,  24LL,  &v5[-*a2],  &v5[-*a2]);
        }
        goto LABEL_12;
      }

BOOL sub_13C298(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(char **)(a2 + 8);
  for (unint64_t i = *(void *)(a2 + 16); (unint64_t)v3 <= i; ++v3)
  {
    __darwin_ct_rune_t v5 = *v3;
    if (v5 < 0)
    {
      int v6 = __maskrune(v5, 0x4000uLL);
      unint64_t i = *(void *)(a2 + 16);
      if (!v6) {
        return (unint64_t)v3 > i;
      }
    }

    else if ((_DefaultRuneLocale.__runetype[v5] & 0x4000) == 0)
    {
      return (unint64_t)v3 > i;
    }
  }

  return (unint64_t)v3 > i;
}

uint64_t sub_13C310(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v7 = *a2;
  uint64_t v6 = a2[1];
  uint64_t v8 = a2[2];
  (*(void (**)(uint64_t *))(*a1 + 280))(a1);
  (*(void (**)(void *__return_ptr, uint64_t *, uint64_t *))(*a1 + 240))(v12, a1, a2);
  uint64_t v10 = *a1;
  if (LODWORD(v12[0])) {
    return (*(uint64_t (**)(uint64_t *, uint64_t *, void *, uint64_t))(v10 + 208))(a1, a2, v12, a3);
  }
  uint64_t v11 = (*(uint64_t (**)(uint64_t *, uint64_t *))(v10 + 232))(a1, a2);
  if (!(_DWORD)v11) {
    return (*(uint64_t (**)(uint64_t *, uint64_t *, uint64_t))(*a1 + 224))(a1, a2, a3);
  }
  if ((_DWORD)v11 == -1) {
    return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(*a1 + 272))( a1,  23LL,  a2[1] - *a2,  a2[2] - *a2);
  }
  return (*(uint64_t (**)(uint64_t *, uint64_t *, uint64_t, uint64_t))(*a1 + 192))(a1, a2, v11, a3);
}

uint64_t sub_13C458(uint64_t a1, uint64_t a2)
{
  for (i = *(char **)(a2 + 8); ; *(void *)(a2 + _Block_object_dispose(va, 8) = i)
  {
    __darwin_ct_rune_t v4 = *i;
    if (v4 < 0)
    {
      uint64_t result = __maskrune(v4, 0x4000uLL);
      unint64_t i = *(char **)(a2 + 8);
    }

    else
    {
      uint64_t result = _DefaultRuneLocale.__runetype[v4] & 0x4000;
    }

    uint64_t v6 = *(char **)(a2 + 16);
    if (!(_DWORD)result || i > v6) {
      break;
    }
    ++i;
  }

  if (i <= v6)
  {
    do
    {
      __darwin_ct_rune_t v8 = *v6;
      if (v8 < 0)
      {
        uint64_t result = __maskrune(v8, 0x4000uLL);
        if (!(_DWORD)result) {
          return result;
        }
      }

      else
      {
        uint64_t result = _DefaultRuneLocale.__runetype[v8] & 0x4000;
        if (!(_DWORD)result) {
          return result;
        }
      }

      unint64_t v9 = *(void *)(a2 + 8);
      uint64_t v6 = (char *)(*(void *)(a2 + 16) - 1LL);
      *(void *)(a2 + 16) = v6;
    }

    while ((unint64_t)v6 >= v9);
  }

  return result;
}

void sub_13C504(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  LODWORD(xmmword_2B0AD0) = a2;
  *((void *)&xmmword_2B0AD0 + 1) = a3;
  qword_2B0AE0 = a4;
  exception = __cxa_allocate_exception(0x18uLL);
  uint64_t v5 = qword_2B0AE0;
  *(_OWORD *)exception = xmmword_2B0AD0;
  exception[2] = v5;
}

uint64_t sub_13C548(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = 0LL;
LABEL_2:
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 264LL))(a1, a2);
  unint64_t v6 = *(void *)(a2 + 8);
  uint64_t v7 = *(char **)(a2 + 16);
  if (v6 <= (unint64_t)v7)
  {
    __darwin_ct_rune_t v8 = 0LL;
    unint64_t v9 = 0LL;
    for (unint64_t i = *(char **)(a2 + 8); i <= v7; ++i)
    {
      int v11 = *i;
      if (v11 == 41)
      {
        if (!--v4 && !v8)
        {
          uint64_t v4 = 0LL;
          __darwin_ct_rune_t v8 = i;
          if (i == v7 && v9 == (char *)v6)
          {
            uint64_t v4 = 0LL;
            *(void *)(a2 + _Block_object_dispose(va, 8) = v6 + 1;
            *(void *)(a2 + 16) = i - 1;
            goto LABEL_2;
          }
        }
      }

      else
      {
        if (v9) {
          uint64_t v12 = v9;
        }
        else {
          uint64_t v12 = i;
        }
        if (v11 == 40)
        {
          unint64_t v9 = v12;
          ++v4;
        }
      }
    }
  }

  return result;
}

double sub_13C618(double (****a1)(void))
{
  double v2 = (**a1[2])(a1[2]);
  if (v2 <= 0.0) {
    ((void (*)(double (****)(void), uint64_t, uint64_t, uint64_t))(*a1)[34])(a1, 4LL, -1LL, -1LL);
  }
  return mathParser::log<double>(v2);
}

uint64_t sub_13C678(uint64_t a1, int a2)
{
  LODWORD(v2) = a2;
  uint64_t v3 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 8LL))(*(void *)(a1 + 16));
  uint64_t v4 = v3;
  if (v3) {
    BOOL v5 = (int)v2 < 1;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    uint64_t v2 = v2;
    unint64_t v6 = (double *)v3;
    do
    {
      *unint64_t v6 = mathParser::log<double>(*v6);
      ++v6;
      --v2;
    }

    while (v2);
  }

  return v4;
}

uint64_t sub_13C6DC(uint64_t a1, _BYTE *a2, int a3)
{
  LODWORD(v3) = a3;
  uint64_t v5 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 16LL))(*(void *)(a1 + 16));
  uint64_t v6 = v5;
  if (v5) {
    BOOL v7 = (int)v3 < 1;
  }
  else {
    BOOL v7 = 1;
  }
  if (!v7)
  {
    uint64_t v3 = v3;
    __darwin_ct_rune_t v8 = (double *)v5;
    do
    {
      if (!*a2)
      {
        if (*v8 <= 0.0) {
          *a2 = 4;
        }
        else {
          *__darwin_ct_rune_t v8 = mathParser::log<double>(*v8);
        }
      }

      ++v8;
      ++a2;
      --v3;
    }

    while (v3);
  }

  return v6;
}

uint64_t sub_13C770()
{
  return 1LL;
}

void *sub_13C778(uint64_t a1)
{
  uint64_t v2 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 112LL))(*(void *)(a1 + 16));
  uint64_t v3 = sub_122A0C(0x20uLL);
  uint64_t v4 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 120LL))(*(void *)(a1 + 16));
  sub_144854(v3, v2, v4);
  *uint64_t v3 = off_255EB8;
  return v3;
}

void sub_13C7FC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10)
{
  int v13 = v11;
  if (v13) {
    free(v13);
  }
  if (a2 == 1)
  {
    __int16 v15 = __cxa_begin_catch(exception_object);
    __int128 v17 = *(_OWORD *)v15;
    uint64_t v18 = *((void *)v15 + 2);
    if (v10) {
      (*(void (**)(uint64_t))(*(void *)v10 + 152LL))(v10);
    }
    exception = __cxa_allocate_exception(0x18uLL);
    *(_OWORD *)exception = v17;
    exception[2] = v18;
  }

  _Unwind_Resume(exception_object);
}

uint64_t *sub_13C898(uint64_t *a1, uint64_t *a2)
{
  a1[2] = 0LL;
  uint64_t v3 = a1 + 2;
  *a1 = (uint64_t)off_258180;
  a1[1] = 0LL;
  sub_13C310(a1, a2, (uint64_t)(a1 + 2));
  if (*v3) {
    *(void *)(*v3 + _Block_object_dispose(va, 8) = a1;
  }
  return a1;
}

void *sub_13C978(void *result, uint64_t a2)
{
  uint64_t *result = off_258180;
  result[1] = 0LL;
  if (!a2)
  {
    LODWORD(xmmword_2B0AD0) = 21;
    *((void *)&xmmword_2B0AD0 + 1) = -1LL;
    qword_2B0AE0 = -1LL;
    exception = __cxa_allocate_exception(0x18uLL);
    uint64_t v3 = qword_2B0AE0;
    *(_OWORD *)exception = xmmword_2B0AD0;
    exception[2] = v3;
  }

  result[2] = a2;
  *(void *)(a2 + _Block_object_dispose(va, 8) = result;
  return result;
}

void sub_13C9F8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  *a10 = off_252F20;
  a10[1] = 0LL;
  _Unwind_Resume(a1);
}

double sub_13CA0C(double (****a1)(void))
{
  double v2 = (**a1[2])(a1[2]);
  if (v2 <= 0.0) {
    ((void (*)(double (****)(void), uint64_t, uint64_t, uint64_t))(*a1)[34])(a1, 3LL, -1LL, -1LL);
  }
  return mathParser::log10<double>(v2);
}

uint64_t sub_13CA6C(uint64_t a1, int a2)
{
  LODWORD(v2) = a2;
  uint64_t v3 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 8LL))(*(void *)(a1 + 16));
  uint64_t v4 = v3;
  if (v3) {
    BOOL v5 = (int)v2 < 1;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    uint64_t v2 = v2;
    uint64_t v6 = (double *)v3;
    do
    {
      *uint64_t v6 = mathParser::log10<double>(*v6);
      ++v6;
      --v2;
    }

    while (v2);
  }

  return v4;
}

uint64_t sub_13CAD0(uint64_t a1, _BYTE *a2, int a3)
{
  LODWORD(v3) = a3;
  uint64_t v5 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 16LL))(*(void *)(a1 + 16));
  uint64_t v6 = v5;
  if (v5) {
    BOOL v7 = (int)v3 < 1;
  }
  else {
    BOOL v7 = 1;
  }
  if (!v7)
  {
    uint64_t v3 = v3;
    __darwin_ct_rune_t v8 = (double *)v5;
    do
    {
      if (!*a2)
      {
        if (*v8 <= 0.0) {
          *a2 = 3;
        }
        else {
          *__darwin_ct_rune_t v8 = mathParser::log10<double>(*v8);
        }
      }

      ++v8;
      ++a2;
      --v3;
    }

    while (v3);
  }

  return v6;
}

uint64_t sub_13CB64()
{
  return 2LL;
}

void *sub_13CB6C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_122A0C(0x18uLL);
  void *v4 = off_24E1B0;
  v4[1] = 0LL;
  int v4[2] = 0x40026BB1BBB55516LL;
  uint64_t v5 = sub_122A0C(0x20uLL);
  uint64_t v6 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 120LL))(*(void *)(a1 + 16));
  sub_144854(v5, v6, (uint64_t)v4);
  void *v5 = off_255D78;
  uint64_t v7 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 16) + 112LL))(*(void *)(a1 + 16), a2);
  __darwin_ct_rune_t v8 = sub_122A0C(0x20uLL);
  sub_144854(v8, v7, (uint64_t)v5);
  *__darwin_ct_rune_t v8 = off_255EB8;
  return v8;
}

void sub_13CC68( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, __int128 a11, uint64_t a12)
{
  int v16 = v14;
  if (v16) {
    free(v16);
  }
  if (a2 == 1)
  {
    uint64_t v18 = __cxa_begin_catch(exception_object);
    __int128 v20 = *(_OWORD *)v18;
    uint64_t v21 = *((void *)v18 + 2);
    if (v13) {
      (*(void (**)(uint64_t))(*(void *)v13 + 152LL))(v13);
    }
    if (v12) {
      (*(void (**)(uint64_t))(*(void *)v12 + 152LL))(v12);
    }
    exception = __cxa_allocate_exception(0x18uLL);
    *(_OWORD *)exception = v20;
    exception[2] = v21;
  }

  _Unwind_Resume(exception_object);
}

double sub_13CD44(uint64_t a1)
{
  double v1 = (***(double (****)(void))(a1 + 16))(*(void *)(a1 + 16));
  return mathParser::exp<double>(v1);
}

uint64_t sub_13CD64(uint64_t a1, int a2)
{
  LODWORD(v2) = a2;
  uint64_t v3 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 8LL))(*(void *)(a1 + 16));
  uint64_t v4 = v3;
  if (v3) {
    BOOL v5 = (int)v2 < 1;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    uint64_t v2 = v2;
    uint64_t v6 = (double *)v3;
    do
    {
      *uint64_t v6 = mathParser::exp<double>(*v6);
      ++v6;
      --v2;
    }

    while (v2);
  }

  return v4;
}

uint64_t sub_13CDC8(uint64_t a1, unsigned __int8 *a2, int a3)
{
  LODWORD(v3) = a3;
  uint64_t v5 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 16LL))(*(void *)(a1 + 16));
  uint64_t v6 = v5;
  if (v5) {
    BOOL v7 = (int)v3 < 1;
  }
  else {
    BOOL v7 = 1;
  }
  if (!v7)
  {
    uint64_t v3 = v3;
    __darwin_ct_rune_t v8 = (double *)v5;
    do
    {
      if (!*a2++) {
        *__darwin_ct_rune_t v8 = mathParser::exp<double>(*v8);
      }
      ++v8;
      --v3;
    }

    while (v3);
  }

  return v6;
}

uint64_t sub_13CE3C()
{
  return 3LL;
}

void *sub_13CE44(void **a1)
{
  uint64_t v2 = (*(uint64_t (**)(void *))(*a1[2] + 112LL))(a1[2]);
  uint64_t v3 = sub_122A0C(0x20uLL);
  uint64_t v4 = ((uint64_t (*)(void **))(*a1)[15])(a1);
  sub_144854(v3, v4, v2);
  *uint64_t v3 = off_255D78;
  return v3;
}

void sub_13CEC8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10)
{
  if (v11) {
    free(v11);
  }
  if (a2 == 1)
  {
    __int16 v14 = __cxa_begin_catch(exception_object);
    __int128 v16 = *(_OWORD *)v14;
    uint64_t v17 = *((void *)v14 + 2);
    if (v10) {
      (*(void (**)(uint64_t))(*(void *)v10 + 152LL))(v10);
    }
    exception = __cxa_allocate_exception(0x18uLL);
    *(_OWORD *)exception = v16;
    exception[2] = v17;
  }

  _Unwind_Resume(exception_object);
}

double sub_13CF60(uint64_t a1)
{
  double v1 = (***(double (****)(void))(a1 + 16))(*(void *)(a1 + 16));
  return mathParser::fabs<double>(v1);
}

uint64_t sub_13CF80(uint64_t a1, int a2)
{
  LODWORD(v2) = a2;
  uint64_t v3 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 8LL))(*(void *)(a1 + 16));
  uint64_t v4 = v3;
  if (v3) {
    BOOL v5 = (int)v2 < 1;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    uint64_t v2 = v2;
    uint64_t v6 = (double *)v3;
    do
    {
      *uint64_t v6 = mathParser::fabs<double>(*v6);
      ++v6;
      --v2;
    }

    while (v2);
  }

  return v4;
}

uint64_t sub_13CFE4(uint64_t a1, unsigned __int8 *a2, int a3)
{
  LODWORD(v3) = a3;
  uint64_t v5 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 16LL))(*(void *)(a1 + 16));
  uint64_t v6 = v5;
  if (v5) {
    BOOL v7 = (int)v3 < 1;
  }
  else {
    BOOL v7 = 1;
  }
  if (!v7)
  {
    uint64_t v3 = v3;
    __darwin_ct_rune_t v8 = (double *)v5;
    do
    {
      if (!*a2++) {
        *__darwin_ct_rune_t v8 = mathParser::fabs<double>(*v8);
      }
      ++v8;
      --v3;
    }

    while (v3);
  }

  return v6;
}

uint64_t sub_13D058()
{
  return 4LL;
}

double sub_13D060(double (****a1)(void))
{
  double v2 = (**a1[2])(a1[2]);
  if (v2 < 0.0) {
    ((void (*)(double (****)(void), uint64_t, uint64_t, uint64_t))(*a1)[34])(a1, 2LL, -1LL, -1LL);
  }
  return mathParser::sqrt<double>(v2);
}

uint64_t sub_13D0C0(uint64_t a1, int a2)
{
  LODWORD(v2) = a2;
  uint64_t v3 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 8LL))(*(void *)(a1 + 16));
  uint64_t v4 = v3;
  if (v3) {
    BOOL v5 = (int)v2 < 1;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    uint64_t v2 = v2;
    uint64_t v6 = (double *)v3;
    do
    {
      *uint64_t v6 = mathParser::sqrt<double>(*v6);
      ++v6;
      --v2;
    }

    while (v2);
  }

  return v4;
}

uint64_t sub_13D124(uint64_t a1, _BYTE *a2, int a3)
{
  LODWORD(v3) = a3;
  uint64_t v5 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 16LL))(*(void *)(a1 + 16));
  uint64_t v6 = v5;
  if (v5) {
    BOOL v7 = (int)v3 < 1;
  }
  else {
    BOOL v7 = 1;
  }
  if (!v7)
  {
    uint64_t v3 = v3;
    __darwin_ct_rune_t v8 = (double *)v5;
    do
    {
      if (!*a2)
      {
        if (*v8 >= 0.0) {
          *__darwin_ct_rune_t v8 = mathParser::sqrt<double>(*v8);
        }
        else {
          *a2 = 2;
        }
      }

      ++v8;
      ++a2;
      --v3;
    }

    while (v3);
  }

  return v6;
}

uint64_t sub_13D1B8()
{
  return 5LL;
}

void *sub_13D1C0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_122A0C(0x18uLL);
  uint64_t v5 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 120LL))(*(void *)(a1 + 16));
  sub_13C978(v4, v5);
  void *v4 = off_253530;
  uint64_t v6 = sub_122A0C(0x20uLL);
  BOOL v7 = sub_122A0C(0x18uLL);
  *BOOL v7 = off_24E1B0;
  v7[1] = 0LL;
  float v7[2] = 0x4000000000000000LL;
  sub_144854(v6, (uint64_t)v4, (uint64_t)v7);
  *uint64_t v6 = off_255D78;
  uint64_t v8 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 16) + 112LL))(*(void *)(a1 + 16), a2);
  unint64_t v9 = sub_122A0C(0x20uLL);
  sub_144854(v9, v8, (uint64_t)v6);
  *unint64_t v9 = off_255EB8;
  return v9;
}

void sub_13D2D0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10)
{
  __int16 v14 = v11;
  if (v14) {
    free(v14);
  }
  if (a2 == 1)
  {
    __int128 v16 = __cxa_begin_catch(exception_object);
    __int128 v18 = *(_OWORD *)v16;
    uint64_t v19 = *((void *)v16 + 2);
    if (v12) {
      (*(void (**)(uint64_t))(*(void *)v12 + 152LL))(v12);
    }
    if (v10) {
      (*(void (**)(uint64_t))(*(void *)v10 + 152LL))(v10);
    }
    exception = __cxa_allocate_exception(0x18uLL);
    *(_OWORD *)exception = v18;
    exception[2] = v19;
  }

  _Unwind_Resume(exception_object);
}

double sub_13D3C8(uint64_t a1)
{
  return -(***(double (****)(void))(a1 + 16))(*(void *)(a1 + 16));
}

double sub_13D3EC(uint64_t a1, int a2)
{
  uint64_t v3 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 8LL))(*(void *)(a1 + 16));
  if (v3) {
    BOOL v5 = a2 < 1;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    uint64_t v6 = a2;
    BOOL v7 = (double *)v3;
    do
    {
      double result = -*v7;
      *v7++ = result;
      --v6;
    }

    while (v6);
  }

  return result;
}

uint64_t sub_13D440(uint64_t a1, unsigned __int8 *a2, int a3)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 16LL))(*(void *)(a1 + 16));
  if (result) {
    BOOL v6 = a3 < 1;
  }
  else {
    BOOL v6 = 1;
  }
  if (!v6)
  {
    uint64_t v7 = a3;
    uint64_t v8 = (double *)result;
    do
    {
      if (!*a2++) {
        *uint64_t v8 = -*v8;
      }
      ++v8;
      --v7;
    }

    while (v7);
  }

  return result;
}

uint64_t sub_13D4A4()
{
  return 6LL;
}

void *sub_13D4AC(uint64_t a1)
{
  uint64_t v1 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 112LL))(*(void *)(a1 + 16));
  uint64_t v2 = sub_122A0C(0x18uLL);
  sub_13C978(v2, v1);
  void *v2 = off_253668;
  return v2;
}

void sub_13D514( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10)
{
  uint64_t v13 = v11;
  if (v13) {
    free(v13);
  }
  if (a2 == 1)
  {
    __int16 v15 = __cxa_begin_catch(exception_object);
    __int128 v17 = *(_OWORD *)v15;
    uint64_t v18 = *((void *)v15 + 2);
    if (v10) {
      (*(void (**)(uint64_t))(*(void *)v10 + 152LL))(v10);
    }
    exception = __cxa_allocate_exception(0x18uLL);
    *(_OWORD *)exception = v17;
    exception[2] = v18;
  }

  _Unwind_Resume(exception_object);
}

double sub_13D5B0(uint64_t a1)
{
  uint64_t v2 = *(double (****)(void))(a1 + 16);
  if (v2) {
    double v3 = (**v2)(v2);
  }
  else {
    double v3 = *(double *)(a1 + 24);
  }
  return v3 * (double)rand() * 4.65661288e-10;
}

char *sub_13D604(uint64_t a1, uint64_t a2)
{
  int v2 = a2;
  uint64_t v4 = *(void *)(a1 + 16);
  if (v4)
  {
    BOOL v5 = (char *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v4 + 8LL))(v4, a2);
    if (v5 && v2 >= 1)
    {
      uint64_t v6 = 0LL;
      uint64_t v7 = 8LL * v2;
      do
      {
        *(double *)&v5[v6] = *(double *)&v5[v6] * ((double)rand() * 4.65661288e-10);
        v6 += 8LL;
      }

      while (v7 != v6);
    }
  }

  else
  {
    else {
      size_t v8 = 8LL * a2;
    }
    BOOL v5 = (char *)operator new[](v8);
    if (v2 >= 1)
    {
      uint64_t v9 = 0LL;
      uint64_t v10 = 8LL * v2;
      double v11 = *(double *)(a1 + 24) / 2147483650.0;
      do
      {
        *(double *)&v5[v9] = v11 * (double)rand();
        v9 += 8LL;
      }

      while (v10 != v9);
    }
  }

  return v5;
}

double *sub_13D6EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3 = a3;
  uint64_t v5 = *(void *)(a1 + 16);
  if (v5)
  {
    uint64_t v7 = (double *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v5 + 16LL))(v5, a2, a3);
    if (v7 && v3 >= 1)
    {
      for (uint64_t i = 0LL; i != v3; ++i)
      {
        if (!*(_BYTE *)(a2 + i)) {
          v7[i] = v7[i] * ((double)rand() * 4.65661288e-10);
        }
      }
    }
  }

  else
  {
    double v9 = *(double *)(a1 + 24);
    else {
      size_t v10 = 8LL * a3;
    }
    uint64_t v7 = (double *)operator new[](v10);
    if (v3 >= 1)
    {
      unint64_t v11 = 0LL;
      uint64_t v12 = 8LL * v3;
      double v13 = v9 / 2147483650.0;
      do
      {
        v7[v11 / 8] = v13 * (double)rand();
        v11 += 8LL;
      }

      while (v12 != v11);
    }
  }

  return v7;
}

uint64_t sub_13D7E0()
{
  return 7LL;
}

uint64_t sub_13D7E8()
{
  return 13LL;
}

uint64_t sub_13D7F4(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 16);
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 56LL))(result);
  }
  return result;
}

uint64_t sub_13D80C()
{
  return 0LL;
}

void *sub_13D814(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2)
  {
    int v3 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v2 + 120LL))(v2);
  }

  else
  {
    int v3 = sub_122A0C(0x18uLL);
    uint64_t v4 = *(void *)(a1 + 24);
    *int v3 = off_24E1B0;
    v3[1] = 0LL;
    v3[2] = v4;
  }

  uint64_t v5 = sub_122A0C(0x20uLL);
  sub_13DAE4((uint64_t)v5, v3);
  return v5;
}

void sub_13D884(_Unwind_Exception *exception_object)
{
  if (v1) {
    free(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_13D89C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2) {
    BOOL v3 = *(void *)(a1 + 16) == a2;
  }
  else {
    BOOL v3 = 0;
  }
  uint64_t v4 = v3;
  if (v3)
  {
    (*(void (**)(uint64_t))(*(void *)a2 + 152LL))(a2);
    *(void *)(a1 + 16) = a3;
    *(void *)(a3 + _Block_object_dispose(va, 8) = a1;
  }

  return v4;
}

uint64_t sub_13D8F4(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 16);
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 72LL))(result);
  }
  return result;
}

uint64_t sub_13D90C(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 16);
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 80LL))(result);
  }
  return result;
}

uint64_t sub_13D924(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 16);
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 88LL))(result);
  }
  return result;
}

char *sub_13D940(void *a1)
{
  uint64_t v2 = a1[2];
  if (v2) {
    BOOL v3 = (char *)(*(uint64_t (**)(uint64_t))(*(void *)v2 + 104LL))(v2);
  }
  else {
    BOOL v3 = 0LL;
  }
  uint64_t v4 = (&off_2ADD90)[(*(int (**)(void *))(*a1 + 288LL))(a1)];
  if (v3) {
    size_t v5 = strlen(v3) + 3;
  }
  else {
    size_t v5 = 3LL;
  }
  size_t v6 = strlen(v4);
  uint64_t v7 = (char *)operator new[](v5 + v6);
  size_t v8 = v7;
  if (v3)
  {
    sprintf(v7, "%s(%s)", v4, v3);
    operator delete[](v3);
  }

  else
  {
    sprintf(v7, "%s()", v4);
  }

  return v8;
}

uint64_t sub_13DA10()
{
  return 1LL;
}

uint64_t sub_13DA18()
{
  return 0LL;
}

uint64_t sub_13DA20(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_2537A0;
  *(void *)(a1 + _Block_object_dispose(va, 8) = 0LL;
  sub_13C548(a1, a2);
  if (*(void *)(a2 + 8) <= *(void *)(a2 + 16))
  {
    uint64_t v4 = (void *)(a1 + 16);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 256LL))(a1, a2, a1 + 16);
    if (*(void *)(a1 + 16)
      && (*(unsigned int (**)(void))(**(void **)(a1 + 16) + 40LL))(*(void *)(a1 + 16)))
    {
      *(double *)(a1 + 24) = (**(double (***)(void))*v4)(*v4);
      uint64_t v5 = *(void *)(a1 + 16);
      if (v5) {
        (*(void (**)(uint64_t))(*(void *)v5 + 152LL))(v5);
      }
      void *v4 = 0LL;
    }
  }

  else
  {
    *(void *)(a1 + 16) = 0LL;
    *(void *)(a1 + 24) = 0x3FF0000000000000LL;
  }

  return a1;
}

void sub_13DAD4(_Unwind_Exception *a1)
{
  void *v1 = off_252F20;
  v1[1] = 0LL;
  _Unwind_Resume(a1);
}

uint64_t sub_13DAE4(uint64_t a1, void *a2)
{
  *(void *)a1 = off_2537A0;
  *(void *)(a1 + _Block_object_dispose(va, 8) = 0LL;
  *(void *)(a1 + 16) = a2;
  if (a2)
  {
    a2[1] = a1;
    if ((*(unsigned int (**)(void *))(*a2 + 40LL))(a2))
    {
      *(double *)(a1 + 24) = (***(double (****)(void))(a1 + 16))(*(void *)(a1 + 16));
      uint64_t v3 = *(void *)(a1 + 16);
      if (v3) {
        (*(void (**)(uint64_t))(*(void *)v3 + 152LL))(v3);
      }
      *(void *)(a1 + 16) = 0LL;
    }
  }

  else
  {
    *(void *)(a1 + 24) = 0x3FF0000000000000LL;
  }

  return a1;
}

void sub_13DB68(_Unwind_Exception *a1)
{
  void *v1 = off_252F20;
  v1[1] = 0LL;
  _Unwind_Resume(a1);
}

void *sub_13DB78(void *a1)
{
  *a1 = off_2537A0;
  uint64_t v2 = a1[2];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 152LL))(v2);
  }
  *a1 = off_252F20;
  a1[1] = 0LL;
  return a1;
}

void sub_13DBC4(_Unwind_Exception *a1)
{
  void *v1 = off_252F20;
  v1[1] = 0LL;
  _Unwind_Resume(a1);
}

void *sub_13DBD4(void *a1)
{
  *a1 = off_2537A0;
  uint64_t v2 = a1[2];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 152LL))(v2);
  }
  *a1 = off_252F20;
  a1[1] = 0LL;
  return a1;
}

void sub_13DC20(_Unwind_Exception *a1)
{
  void *v1 = off_252F20;
  v1[1] = 0LL;
  _Unwind_Resume(a1);
}

void sub_13DC30(void *a1)
{
  *a1 = off_2537A0;
  uint64_t v2 = a1[2];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 152LL))(v2);
  }
  free(a1);
}

void sub_13DC70(_Unwind_Exception *a1)
{
  void *v1 = off_252F20;
  v1[1] = 0LL;
  free(v1);
  _Unwind_Resume(a1);
}

double sub_13DC90(uint64_t a1)
{
  double v1 = (***(double (****)(void))(a1 + 16))(*(void *)(a1 + 16));
  return mathParser::sin<double>(v1);
}

uint64_t sub_13DCB0(uint64_t a1, int a2)
{
  LODWORD(v2) = a2;
  uint64_t v3 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 8LL))(*(void *)(a1 + 16));
  uint64_t v4 = v3;
  if (v3) {
    BOOL v5 = (int)v2 < 1;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    uint64_t v2 = v2;
    size_t v6 = (double *)v3;
    do
    {
      *size_t v6 = mathParser::sin<double>(*v6);
      ++v6;
      --v2;
    }

    while (v2);
  }

  return v4;
}

uint64_t sub_13DD14(uint64_t a1, unsigned __int8 *a2, int a3)
{
  LODWORD(v3) = a3;
  uint64_t v5 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 16LL))(*(void *)(a1 + 16));
  uint64_t v6 = v5;
  if (v5) {
    BOOL v7 = (int)v3 < 1;
  }
  else {
    BOOL v7 = 1;
  }
  if (!v7)
  {
    uint64_t v3 = v3;
    size_t v8 = (double *)v5;
    do
    {
      if (!*a2++) {
        *size_t v8 = mathParser::sin<double>(*v8);
      }
      ++v8;
      --v3;
    }

    while (v3);
  }

  return v6;
}

uint64_t sub_13DD88()
{
  return 8LL;
}

void *sub_13DD90(uint64_t a1)
{
  uint64_t v2 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 112LL))(*(void *)(a1 + 16));
  uint64_t v3 = sub_122A0C(0x18uLL);
  uint64_t v4 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 120LL))(*(void *)(a1 + 16));
  sub_13C978(v3, v4);
  *uint64_t v3 = off_253A10;
  uint64_t v5 = sub_122A0C(0x20uLL);
  sub_144854(v5, v2, (uint64_t)v3);
  void *v5 = off_255D78;
  return v5;
}

void sub_13DE4C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10)
{
  __int16 v14 = v12;
  if (v14) {
    free(v14);
  }
  if (a2 == 1)
  {
    __int128 v16 = __cxa_begin_catch(exception_object);
    __int128 v18 = *(_OWORD *)v16;
    uint64_t v19 = *((void *)v16 + 2);
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 152LL))(v11);
    }
    if (v10) {
      (*(void (**)(uint64_t))(*(void *)v10 + 152LL))(v10);
    }
    exception = __cxa_allocate_exception(0x18uLL);
    *(_OWORD *)exception = v18;
    exception[2] = v19;
  }

  _Unwind_Resume(exception_object);
}

double sub_13DF1C(uint64_t a1)
{
  double v1 = (***(double (****)(void))(a1 + 16))(*(void *)(a1 + 16));
  return mathParser::cos<double>(v1);
}

uint64_t sub_13DF3C(uint64_t a1, int a2)
{
  LODWORD(v2) = a2;
  uint64_t v3 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 8LL))(*(void *)(a1 + 16));
  uint64_t v4 = v3;
  if (v3) {
    BOOL v5 = (int)v2 < 1;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    uint64_t v2 = v2;
    uint64_t v6 = (double *)v3;
    do
    {
      *uint64_t v6 = mathParser::cos<double>(*v6);
      ++v6;
      --v2;
    }

    while (v2);
  }

  return v4;
}

uint64_t sub_13DFA0(uint64_t a1, unsigned __int8 *a2, int a3)
{
  LODWORD(v3) = a3;
  uint64_t v5 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 16LL))(*(void *)(a1 + 16));
  uint64_t v6 = v5;
  if (v5) {
    BOOL v7 = (int)v3 < 1;
  }
  else {
    BOOL v7 = 1;
  }
  if (!v7)
  {
    uint64_t v3 = v3;
    size_t v8 = (double *)v5;
    do
    {
      if (!*a2++) {
        *size_t v8 = mathParser::cos<double>(*v8);
      }
      ++v8;
      --v3;
    }

    while (v3);
  }

  return v6;
}

uint64_t sub_13E014()
{
  return 9LL;
}

void *sub_13E01C(uint64_t a1)
{
  uint64_t v2 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 112LL))(*(void *)(a1 + 16));
  uint64_t v3 = sub_122A0C(0x18uLL);
  uint64_t v4 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 120LL))(*(void *)(a1 + 16));
  sub_13C978(v3, v4);
  *uint64_t v3 = off_2538D8;
  uint64_t v5 = sub_122A0C(0x18uLL);
  sub_13C978(v5, (uint64_t)v3);
  void *v5 = off_253668;
  uint64_t v6 = sub_122A0C(0x20uLL);
  sub_144854(v6, v2, (uint64_t)v5);
  *uint64_t v6 = off_255D78;
  return v6;
}

void sub_13E100( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10)
{
  if (v11) {
    free(v11);
  }
  if (a2 == 1)
  {
    __int16 v15 = __cxa_begin_catch(exception_object);
    __int128 v17 = *(_OWORD *)v15;
    uint64_t v18 = *((void *)v15 + 2);
    if (v12) {
      (*(void (**)(uint64_t))(*(void *)v12 + 152LL))(v12);
    }
    if (v10) {
      (*(void (**)(uint64_t))(*(void *)v10 + 152LL))(v10);
    }
    exception = __cxa_allocate_exception(0x18uLL);
    *(_OWORD *)exception = v17;
    exception[2] = v18;
  }

  _Unwind_Resume(exception_object);
}

double sub_13E1E8(double (****a1)(void))
{
  double v2 = (**a1[2])(a1[2]);
  return mathParser::tan<double>(v2);
}

uint64_t sub_13E24C(void **a1, int a2)
{
  LODWORD(v2) = a2;
  uint64_t v4 = (*(uint64_t (**)(void *))(*a1[2] + 8LL))(a1[2]);
  uint64_t v5 = v4;
  if (v4) {
    BOOL v6 = (int)v2 < 1;
  }
  else {
    BOOL v6 = 1;
  }
  if (!v6)
  {
    uint64_t v2 = v2;
    BOOL v7 = (double *)v4;
    do
    {
      *BOOL v7 = mathParser::tan<double>(*v7);
      ++v7;
      --v2;
    }

    while (v2);
  }

  return v5;
}

uint64_t sub_13E2E0(uint64_t a1, _BYTE *a2, int a3)
{
  LODWORD(v3) = a3;
  uint64_t v5 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 16LL))(*(void *)(a1 + 16));
  uint64_t v6 = v5;
  if (v5) {
    BOOL v7 = (int)v3 < 1;
  }
  else {
    BOOL v7 = 1;
  }
  if (!v7)
  {
    uint64_t v3 = v3;
    size_t v8 = (double *)v5;
    do
    {
      if (!*a2)
      {
        else {
          *size_t v8 = mathParser::tan<double>(*v8);
        }
      }

      ++v8;
      ++a2;
      --v3;
    }

    while (v3);
  }

  return v6;
}

uint64_t sub_13E37C()
{
  return 10LL;
}

void *sub_13E384(uint64_t a1)
{
  uint64_t v2 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 112LL))(*(void *)(a1 + 16));
  uint64_t v3 = sub_122A0C(0x18uLL);
  uint64_t v4 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 120LL))(*(void *)(a1 + 16));
  sub_13C978(v3, v4);
  *uint64_t v3 = off_253C80;
  uint64_t v5 = sub_122A0C(0x20uLL);
  uint64_t v6 = sub_122A0C(0x18uLL);
  *uint64_t v6 = off_24E1B0;
  v6[1] = 0LL;
  _OWORD v6[2] = 0x4000000000000000LL;
  sub_144854(v5, (uint64_t)v3, (uint64_t)v6);
  void *v5 = &off_256138;
  BOOL v7 = sub_122A0C(0x20uLL);
  sub_144854(v7, v2, (uint64_t)v5);
  *BOOL v7 = off_255D78;
  return v7;
}

void sub_13E48C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10)
{
  if (v11) {
    free(v11);
  }
  if (a2 == 1)
  {
    __int16 v15 = __cxa_begin_catch(exception_object);
    __int128 v17 = *(_OWORD *)v15;
    uint64_t v18 = *((void *)v15 + 2);
    if (v12) {
      (*(void (**)(uint64_t))(*(void *)v12 + 152LL))(v12);
    }
    if (v10) {
      (*(void (**)(uint64_t))(*(void *)v10 + 152LL))(v10);
    }
    exception = __cxa_allocate_exception(0x18uLL);
    *(_OWORD *)exception = v17;
    exception[2] = v18;
  }

  _Unwind_Resume(exception_object);
}

double sub_13E574(double (****a1)(void))
{
  double v2 = (**a1[2])(a1[2]);
  return 1.0 / mathParser::cos<double>(v2);
}

uint64_t sub_13E5E4(void **a1, int a2)
{
  LODWORD(v2) = a2;
  uint64_t v4 = (*(uint64_t (**)(void *))(*a1[2] + 8LL))(a1[2]);
  uint64_t v5 = v4;
  if (v4) {
    BOOL v6 = (int)v2 < 1;
  }
  else {
    BOOL v6 = 1;
  }
  if (!v6)
  {
    uint64_t v2 = v2;
    BOOL v7 = (double *)v4;
    do
    {
      *BOOL v7 = 1.0 / mathParser::cos<double>(*v7);
      ++v7;
      --v2;
    }

    while (v2);
  }

  return v5;
}

uint64_t sub_13E688(uint64_t a1, _BYTE *a2, int a3)
{
  LODWORD(v3) = a3;
  uint64_t v5 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 16LL))(*(void *)(a1 + 16));
  uint64_t v6 = v5;
  if (v5) {
    BOOL v7 = (int)v3 < 1;
  }
  else {
    BOOL v7 = 1;
  }
  if (!v7)
  {
    uint64_t v3 = v3;
    size_t v8 = (double *)v5;
    do
    {
      if (!*a2)
      {
        else {
          *size_t v8 = 1.0 / mathParser::cos<double>(*v8);
        }
      }

      ++v8;
      ++a2;
      --v3;
    }

    while (v3);
  }

  return v6;
}

uint64_t sub_13E734()
{
  return 11LL;
}

void *sub_13E73C(uint64_t a1)
{
  uint64_t v2 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 112LL))(*(void *)(a1 + 16));
  uint64_t v3 = sub_122A0C(0x18uLL);
  uint64_t v4 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 120LL))(*(void *)(a1 + 16));
  sub_13C978(v3, v4);
  *uint64_t v3 = off_253C80;
  uint64_t v5 = sub_122A0C(0x20uLL);
  sub_144854(v5, v2, (uint64_t)v3);
  void *v5 = off_255D78;
  uint64_t v6 = sub_122A0C(0x18uLL);
  uint64_t v7 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 120LL))(*(void *)(a1 + 16));
  sub_13C978(v6, v7);
  *uint64_t v6 = off_253B48;
  size_t v8 = sub_122A0C(0x20uLL);
  sub_144854(v8, (uint64_t)v5, (uint64_t)v6);
  *size_t v8 = off_255D78;
  return v8;
}

void sub_13E860( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, __int128 a11, uint64_t a12)
{
  if (v12) {
    free(v12);
  }
  if (a2 == 1)
  {
    __int128 v17 = __cxa_begin_catch(exception_object);
    __int128 v19 = *(_OWORD *)v17;
    uint64_t v20 = *((void *)v17 + 2);
    if (v13) {
      (*(void (**)(uint64_t))(*(void *)v13 + 152LL))(v13);
    }
    if (v14) {
      (*(void (**)(uint64_t))(*(void *)v14 + 152LL))(v14);
    }
    exception = __cxa_allocate_exception(0x18uLL);
    *(_OWORD *)exception = v19;
    exception[2] = v20;
  }

  _Unwind_Resume(exception_object);
}

double sub_13E96C(double (****a1)(void))
{
  double v2 = (**a1[2])(a1[2]);
  return 1.0 / mathParser::sin<double>(v2);
}

uint64_t sub_13E9DC(void **a1, int a2)
{
  LODWORD(v2) = a2;
  uint64_t v4 = (*(uint64_t (**)(void *))(*a1[2] + 8LL))(a1[2]);
  uint64_t v5 = v4;
  if (v4) {
    BOOL v6 = (int)v2 < 1;
  }
  else {
    BOOL v6 = 1;
  }
  if (!v6)
  {
    uint64_t v2 = v2;
    uint64_t v7 = (double *)v4;
    do
    {
      *uint64_t v7 = 1.0 / mathParser::sin<double>(*v7);
      ++v7;
      --v2;
    }

    while (v2);
  }

  return v5;
}

uint64_t sub_13EA80(uint64_t a1, _BYTE *a2, int a3)
{
  LODWORD(v3) = a3;
  uint64_t v5 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 16LL))(*(void *)(a1 + 16));
  uint64_t v6 = v5;
  if (v5) {
    BOOL v7 = (int)v3 < 1;
  }
  else {
    BOOL v7 = 1;
  }
  if (!v7)
  {
    uint64_t v3 = v3;
    size_t v8 = (double *)v5;
    do
    {
      if (!*a2)
      {
        else {
          *size_t v8 = 1.0 / mathParser::sin<double>(*v8);
        }
      }

      ++v8;
      ++a2;
      --v3;
    }

    while (v3);
  }

  return v6;
}

uint64_t sub_13EB2C()
{
  return 12LL;
}

void *sub_13EB34(uint64_t a1)
{
  uint64_t v2 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 112LL))(*(void *)(a1 + 16));
  uint64_t v3 = sub_122A0C(0x18uLL);
  uint64_t v4 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 120LL))(*(void *)(a1 + 16));
  sub_13C978(v3, v4);
  *uint64_t v3 = off_253DB8;
  uint64_t v5 = sub_122A0C(0x20uLL);
  sub_144854(v5, v2, (uint64_t)v3);
  void *v5 = off_255D78;
  uint64_t v6 = sub_122A0C(0x18uLL);
  uint64_t v7 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 120LL))(*(void *)(a1 + 16));
  sub_13C978(v6, v7);
  *uint64_t v6 = off_253EF0;
  size_t v8 = sub_122A0C(0x20uLL);
  sub_144854(v8, (uint64_t)v5, (uint64_t)v6);
  *size_t v8 = off_255D78;
  double v9 = sub_122A0C(0x18uLL);
  sub_13C978(v9, (uint64_t)v8);
  *double v9 = off_253668;
  return v9;
}

void sub_13EC80( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10)
{
  if (v11) {
    free(v11);
  }
  if (a2 == 1)
  {
    __int16 v15 = __cxa_begin_catch(exception_object);
    __int128 v17 = *(_OWORD *)v15;
    uint64_t v18 = *((void *)v15 + 2);
    if (v12) {
      (*(void (**)(uint64_t))(*(void *)v12 + 152LL))(v12);
    }
    if (v10) {
      (*(void (**)(uint64_t))(*(void *)v10 + 152LL))(v10);
    }
    exception = __cxa_allocate_exception(0x18uLL);
    *(_OWORD *)exception = v17;
    exception[2] = v18;
  }

  _Unwind_Resume(exception_object);
}

double sub_13EDA0(double (****a1)(void))
{
  double v2 = (**a1[2])(a1[2]);
  return 1.0 / mathParser::tan<double>(v2);
}

uint64_t sub_13EE10(void **a1, int a2)
{
  LODWORD(v2) = a2;
  uint64_t v4 = (*(uint64_t (**)(void *))(*a1[2] + 8LL))(a1[2]);
  uint64_t v5 = v4;
  if (v4) {
    BOOL v6 = (int)v2 < 1;
  }
  else {
    BOOL v6 = 1;
  }
  if (!v6)
  {
    uint64_t v2 = v2;
    uint64_t v7 = (double *)v4;
    do
    {
      *uint64_t v7 = 1.0 / mathParser::tan<double>(*v7);
      ++v7;
      --v2;
    }

    while (v2);
  }

  return v5;
}

uint64_t sub_13EEB4(uint64_t a1, _BYTE *a2, int a3)
{
  LODWORD(v3) = a3;
  uint64_t v5 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 16LL))(*(void *)(a1 + 16));
  uint64_t v6 = v5;
  if (v5) {
    BOOL v7 = (int)v3 < 1;
  }
  else {
    BOOL v7 = 1;
  }
  if (!v7)
  {
    uint64_t v3 = v3;
    size_t v8 = (double *)v5;
    do
    {
      if (!*a2)
      {
        else {
          *size_t v8 = 1.0 / mathParser::tan<double>(*v8);
        }
      }

      ++v8;
      ++a2;
      --v3;
    }

    while (v3);
  }

  return v6;
}

uint64_t sub_13EF60()
{
  return 13LL;
}

void *sub_13EF68(uint64_t a1)
{
  uint64_t v2 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 112LL))(*(void *)(a1 + 16));
  uint64_t v3 = sub_122A0C(0x18uLL);
  uint64_t v4 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 120LL))(*(void *)(a1 + 16));
  sub_13C978(v3, v4);
  *uint64_t v3 = off_253DB8;
  uint64_t v5 = sub_122A0C(0x20uLL);
  uint64_t v6 = sub_122A0C(0x18uLL);
  *uint64_t v6 = off_24E1B0;
  v6[1] = 0LL;
  _OWORD v6[2] = 0x4000000000000000LL;
  sub_144854(v5, (uint64_t)v3, (uint64_t)v6);
  void *v5 = &off_256138;
  BOOL v7 = sub_122A0C(0x20uLL);
  sub_144854(v7, v2, (uint64_t)v5);
  *BOOL v7 = off_255D78;
  size_t v8 = sub_122A0C(0x18uLL);
  sub_13C978(v8, (uint64_t)v7);
  *size_t v8 = off_253668;
  return v8;
}

void sub_13F098( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10)
{
  if (v10) {
    free(v10);
  }
  if (a2 == 1)
  {
    uint64_t v14 = __cxa_begin_catch(exception_object);
    __int128 v16 = *(_OWORD *)v14;
    uint64_t v17 = *((void *)v14 + 2);
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 152LL))(v11);
    }
    exception = __cxa_allocate_exception(0x18uLL);
    *(_OWORD *)exception = v16;
    exception[2] = v17;
  }

  _Unwind_Resume(exception_object);
}

double sub_13F1A4(double (****a1)(void))
{
  double v2 = (**a1[2])(a1[2]);
  if (v2 > 1.0 || v2 < -1.0) {
    ((void (*)(double (****)(void), uint64_t, uint64_t, uint64_t))(*a1)[34])(a1, 6LL, -1LL, -1LL);
  }
  return mathParser::asin<double>(v2);
}

uint64_t sub_13F210(uint64_t a1, int a2)
{
  LODWORD(v2) = a2;
  uint64_t v3 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 8LL))(*(void *)(a1 + 16));
  uint64_t v4 = v3;
  if (v3) {
    BOOL v5 = (int)v2 < 1;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    uint64_t v2 = v2;
    uint64_t v6 = (double *)v3;
    do
    {
      *uint64_t v6 = mathParser::asin<double>(*v6);
      ++v6;
      --v2;
    }

    while (v2);
  }

  return v4;
}

uint64_t sub_13F274(uint64_t a1, _BYTE *a2, int a3)
{
  LODWORD(v3) = a3;
  uint64_t v5 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 16LL))(*(void *)(a1 + 16));
  uint64_t v6 = v5;
  if (v5) {
    BOOL v7 = (int)v3 < 1;
  }
  else {
    BOOL v7 = 1;
  }
  if (!v7)
  {
    uint64_t v3 = v3;
    size_t v8 = (double *)v5;
    do
    {
      if (!*a2)
      {
        double v9 = *v8;
        if (*v8 > 1.0 || v9 < -1.0) {
          *a2 = 6;
        }
        else {
          *size_t v8 = mathParser::asin<double>(v9);
        }
      }

      ++v8;
      ++a2;
      --v3;
    }

    while (v3);
  }

  return v6;
}

uint64_t sub_13F31C()
{
  return 14LL;
}

void *sub_13F324(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_122A0C(0x20uLL);
  uint64_t v5 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 120LL))(*(void *)(a1 + 16));
  uint64_t v6 = sub_122A0C(0x18uLL);
  *uint64_t v6 = off_24E1B0;
  v6[1] = 0LL;
  _OWORD v6[2] = 0x4000000000000000LL;
  sub_144854(v4, v5, (uint64_t)v6);
  void *v4 = &off_256138;
  BOOL v7 = sub_122A0C(0x20uLL);
  size_t v8 = sub_122A0C(0x18uLL);
  *size_t v8 = off_24E1B0;
  v8[1] = 0LL;
  v8[2] = 0x3FF0000000000000LL;
  sub_144854(v7, (uint64_t)v8, (uint64_t)v4);
  *BOOL v7 = off_255C38;
  double v9 = sub_122A0C(0x18uLL);
  sub_13C978(v9, (uint64_t)v7);
  *double v9 = off_253530;
  uint64_t v10 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 16) + 112LL))(*(void *)(a1 + 16), a2);
  uint64_t v11 = sub_122A0C(0x20uLL);
  sub_144854(v11, v10, (uint64_t)v9);
  void *v11 = off_255EB8;
  return v11;
}

void sub_13F480( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10)
{
  if (v12) {
    free(v12);
  }
  if (a2 == 1)
  {
    __int16 v15 = __cxa_begin_catch(exception_object);
    __int128 v17 = *(_OWORD *)v15;
    uint64_t v18 = *((void *)v15 + 2);
    if (v10) {
      (*(void (**)(uint64_t))(*(void *)v10 + 152LL))(v10);
    }
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 152LL))(v11);
    }
    exception = __cxa_allocate_exception(0x18uLL);
    *(_OWORD *)exception = v17;
    exception[2] = v18;
  }

  _Unwind_Resume(exception_object);
}

double sub_13F590(double (****a1)(void))
{
  double v2 = (**a1[2])(a1[2]);
  if (v2 > 1.0 || v2 < -1.0) {
    ((void (*)(double (****)(void), uint64_t, uint64_t, uint64_t))(*a1)[34])(a1, 7LL, -1LL, -1LL);
  }
  return mathParser::acos<double>(v2);
}

uint64_t sub_13F5FC(uint64_t a1, int a2)
{
  LODWORD(v2) = a2;
  uint64_t v3 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 8LL))(*(void *)(a1 + 16));
  uint64_t v4 = v3;
  if (v3) {
    BOOL v5 = (int)v2 < 1;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    uint64_t v2 = v2;
    uint64_t v6 = (double *)v3;
    do
    {
      *uint64_t v6 = mathParser::acos<double>(*v6);
      ++v6;
      --v2;
    }

    while (v2);
  }

  return v4;
}

uint64_t sub_13F660(uint64_t a1, _BYTE *a2, int a3)
{
  LODWORD(v3) = a3;
  uint64_t v5 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 16LL))(*(void *)(a1 + 16));
  uint64_t v6 = v5;
  if (v5) {
    BOOL v7 = (int)v3 < 1;
  }
  else {
    BOOL v7 = 1;
  }
  if (!v7)
  {
    uint64_t v3 = v3;
    size_t v8 = (double *)v5;
    do
    {
      if (!*a2)
      {
        double v9 = *v8;
        if (*v8 > 1.0 || v9 < -1.0) {
          *a2 = 7;
        }
        else {
          *size_t v8 = mathParser::acos<double>(v9);
        }
      }

      ++v8;
      ++a2;
      --v3;
    }

    while (v3);
  }

  return v6;
}

uint64_t sub_13F708()
{
  return 15LL;
}

void *sub_13F710(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_122A0C(0x20uLL);
  uint64_t v5 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 120LL))(*(void *)(a1 + 16));
  uint64_t v6 = sub_122A0C(0x18uLL);
  *uint64_t v6 = off_24E1B0;
  v6[1] = 0LL;
  _OWORD v6[2] = 0x4000000000000000LL;
  sub_144854(v4, v5, (uint64_t)v6);
  void *v4 = &off_256138;
  BOOL v7 = sub_122A0C(0x20uLL);
  size_t v8 = sub_122A0C(0x18uLL);
  *size_t v8 = off_24E1B0;
  v8[1] = 0LL;
  v8[2] = 0x3FF0000000000000LL;
  sub_144854(v7, (uint64_t)v8, (uint64_t)v4);
  *BOOL v7 = off_255C38;
  double v9 = sub_122A0C(0x18uLL);
  sub_13C978(v9, (uint64_t)v7);
  *double v9 = off_253530;
  uint64_t v10 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 16) + 112LL))(*(void *)(a1 + 16), a2);
  uint64_t v11 = sub_122A0C(0x18uLL);
  sub_13C978(v11, v10);
  void *v11 = off_253668;
  uint64_t v12 = sub_122A0C(0x20uLL);
  sub_144854(v12, (uint64_t)v11, (uint64_t)v9);
  void *v12 = off_255EB8;
  return v12;
}

void sub_13F894( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10)
{
  if (v11) {
    free(v11);
  }
  if (a2 == 1)
  {
    __int16 v15 = __cxa_begin_catch(exception_object);
    __int128 v17 = *(_OWORD *)v15;
    uint64_t v18 = *((void *)v15 + 2);
    if (v10) {
      (*(void (**)(uint64_t))(*(void *)v10 + 152LL))(v10);
    }
    if (v12) {
      (*(void (**)(uint64_t))(*(void *)v12 + 152LL))(v12);
    }
    exception = __cxa_allocate_exception(0x18uLL);
    *(_OWORD *)exception = v17;
    exception[2] = v18;
  }

  _Unwind_Resume(exception_object);
}

double sub_13F9C0(uint64_t a1)
{
  double v1 = (***(double (****)(void))(a1 + 16))(*(void *)(a1 + 16));
  return mathParser::atan<double>(v1);
}

uint64_t sub_13F9E0(uint64_t a1, int a2)
{
  LODWORD(v2) = a2;
  uint64_t v3 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 8LL))(*(void *)(a1 + 16));
  uint64_t v4 = v3;
  if (v3) {
    BOOL v5 = (int)v2 < 1;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    uint64_t v2 = v2;
    uint64_t v6 = (double *)v3;
    do
    {
      *uint64_t v6 = mathParser::atan<double>(*v6);
      ++v6;
      --v2;
    }

    while (v2);
  }

  return v4;
}

uint64_t sub_13FA44(uint64_t a1, unsigned __int8 *a2, int a3)
{
  LODWORD(v3) = a3;
  uint64_t v5 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 16LL))(*(void *)(a1 + 16));
  uint64_t v6 = v5;
  if (v5) {
    BOOL v7 = (int)v3 < 1;
  }
  else {
    BOOL v7 = 1;
  }
  if (!v7)
  {
    uint64_t v3 = v3;
    size_t v8 = (double *)v5;
    do
    {
      if (!*a2++) {
        *size_t v8 = mathParser::atan<double>(*v8);
      }
      ++v8;
      --v3;
    }

    while (v3);
  }

  return v6;
}

uint64_t sub_13FAB8()
{
  return 16LL;
}

void *sub_13FAC0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_122A0C(0x20uLL);
  uint64_t v5 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 120LL))(*(void *)(a1 + 16));
  uint64_t v6 = sub_122A0C(0x18uLL);
  *uint64_t v6 = off_24E1B0;
  v6[1] = 0LL;
  _OWORD v6[2] = 0x4000000000000000LL;
  sub_144854(v4, v5, (uint64_t)v6);
  void *v4 = &off_256138;
  BOOL v7 = sub_122A0C(0x20uLL);
  size_t v8 = sub_122A0C(0x18uLL);
  *size_t v8 = off_24E1B0;
  v8[1] = 0LL;
  v8[2] = 0x3FF0000000000000LL;
  sub_144854(v7, (uint64_t)v8, (uint64_t)v4);
  *BOOL v7 = off_255AF8;
  uint64_t v9 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 16) + 112LL))(*(void *)(a1 + 16), a2);
  uint64_t v10 = sub_122A0C(0x20uLL);
  sub_144854(v10, v9, (uint64_t)v7);
  void *v10 = off_255EB8;
  return v10;
}

void sub_13FBF4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10)
{
  if (v10) {
    free(v10);
  }
  if (a2 == 1)
  {
    __int16 v15 = __cxa_begin_catch(exception_object);
    __int128 v17 = *(_OWORD *)v15;
    uint64_t v18 = *((void *)v15 + 2);
    if (v12) {
      (*(void (**)(uint64_t))(*(void *)v12 + 152LL))(v12);
    }
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 152LL))(v11);
    }
    exception = __cxa_allocate_exception(0x18uLL);
    *(_OWORD *)exception = v17;
    exception[2] = v18;
  }

  _Unwind_Resume(exception_object);
}

double sub_13FCE8(double (****a1)(void))
{
  double v2 = (**a1[2])(a1[2]);
  if (v2 < 1.0 && v2 > -1.0) {
    ((void (*)(double (****)(void), uint64_t, uint64_t, uint64_t))(*a1)[34])(a1, 8LL, -1LL, -1LL);
  }
  return mathParser::acos<double>(1.0 / v2);
}

uint64_t sub_13FD54(uint64_t a1, int a2)
{
  LODWORD(v2) = a2;
  uint64_t v3 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 8LL))(*(void *)(a1 + 16));
  uint64_t v4 = v3;
  if (v3) {
    BOOL v5 = (int)v2 < 1;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    uint64_t v2 = v2;
    uint64_t v6 = (double *)v3;
    do
    {
      *uint64_t v6 = mathParser::acos<double>(1.0 / *v6);
      ++v6;
      --v2;
    }

    while (v2);
  }

  return v4;
}

uint64_t sub_13FDC8(uint64_t a1, _BYTE *a2, int a3)
{
  LODWORD(v3) = a3;
  uint64_t v5 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 16LL))(*(void *)(a1 + 16));
  uint64_t v6 = v5;
  if (v5) {
    BOOL v7 = (int)v3 < 1;
  }
  else {
    BOOL v7 = 1;
  }
  if (!v7)
  {
    uint64_t v3 = v3;
    size_t v8 = (double *)v5;
    do
    {
      if (!*a2)
      {
        double v9 = *v8;
        if (*v8 < 1.0 && v9 > -1.0) {
          *a2 = 8;
        }
        else {
          *size_t v8 = mathParser::acos<double>(1.0 / v9);
        }
      }

      ++v8;
      ++a2;
      --v3;
    }

    while (v3);
  }

  return v6;
}

uint64_t sub_13FE74()
{
  return 17LL;
}

void *sub_13FE7C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_122A0C(0x20uLL);
  uint64_t v5 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 120LL))(*(void *)(a1 + 16));
  uint64_t v6 = sub_122A0C(0x18uLL);
  *uint64_t v6 = off_24E1B0;
  v6[1] = 0LL;
  _OWORD v6[2] = 0x4000000000000000LL;
  sub_144854(v4, v5, (uint64_t)v6);
  void *v4 = &off_256138;
  BOOL v7 = sub_122A0C(0x20uLL);
  size_t v8 = sub_122A0C(0x18uLL);
  *size_t v8 = off_24E1B0;
  v8[1] = 0LL;
  v8[2] = 0x3FF0000000000000LL;
  sub_144854(v7, (uint64_t)v4, (uint64_t)v8);
  *BOOL v7 = off_255C38;
  double v9 = sub_122A0C(0x18uLL);
  sub_13C978(v9, (uint64_t)v7);
  *double v9 = off_253530;
  uint64_t v10 = sub_122A0C(0x20uLL);
  uint64_t v11 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 120LL))(*(void *)(a1 + 16));
  sub_144854(v10, v11, (uint64_t)v9);
  void *v10 = off_255D78;
  uint64_t v12 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 16) + 112LL))(*(void *)(a1 + 16), a2);
  uint64_t v13 = sub_122A0C(0x20uLL);
  sub_144854(v13, v12, (uint64_t)v10);
  *uint64_t v13 = off_255EB8;
  return v13;
}

void sub_140018( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10)
{
  uint64_t v14 = v10;
  if (v14) {
    free(v14);
  }
  if (a2 == 1)
  {
    __int128 v16 = __cxa_begin_catch(exception_object);
    __int128 v18 = *(_OWORD *)v16;
    uint64_t v19 = *((void *)v16 + 2);
    if (v12) {
      (*(void (**)(uint64_t))(*(void *)v12 + 152LL))(v12);
    }
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 152LL))(v11);
    }
    exception = __cxa_allocate_exception(0x18uLL);
    *(_OWORD *)exception = v18;
    exception[2] = v19;
  }

  _Unwind_Resume(exception_object);
}

double sub_140130(double (****a1)(void))
{
  double v2 = (**a1[2])(a1[2]);
  if (v2 <= 1.0 && v2 >= -1.0) {
    ((void (*)(double (****)(void), uint64_t, uint64_t, uint64_t))(*a1)[34])(a1, 9LL, -1LL, -1LL);
  }
  return mathParser::asin<double>(1.0 / v2);
}

uint64_t sub_14019C(uint64_t a1, int a2)
{
  LODWORD(v2) = a2;
  uint64_t v3 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 8LL))(*(void *)(a1 + 16));
  uint64_t v4 = v3;
  if (v3) {
    BOOL v5 = (int)v2 < 1;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    uint64_t v2 = v2;
    uint64_t v6 = (double *)v3;
    do
    {
      *uint64_t v6 = mathParser::asin<double>(1.0 / *v6);
      ++v6;
      --v2;
    }

    while (v2);
  }

  return v4;
}

uint64_t sub_140210(uint64_t a1, _BYTE *a2, int a3)
{
  LODWORD(v3) = a3;
  uint64_t v5 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 16LL))(*(void *)(a1 + 16));
  uint64_t v6 = v5;
  if (v5) {
    BOOL v7 = (int)v3 < 1;
  }
  else {
    BOOL v7 = 1;
  }
  if (!v7)
  {
    uint64_t v3 = v3;
    size_t v8 = (double *)v5;
    do
    {
      if (!*a2)
      {
        double v9 = *v8;
        if (*v8 < 1.0 && v9 > -1.0) {
          *a2 = 9;
        }
        else {
          *size_t v8 = mathParser::asin<double>(1.0 / v9);
        }
      }

      ++v8;
      ++a2;
      --v3;
    }

    while (v3);
  }

  return v6;
}

uint64_t sub_1402BC()
{
  return 18LL;
}

void *sub_1402C4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_122A0C(0x20uLL);
  uint64_t v5 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 120LL))(*(void *)(a1 + 16));
  uint64_t v6 = sub_122A0C(0x18uLL);
  *uint64_t v6 = off_24E1B0;
  v6[1] = 0LL;
  _OWORD v6[2] = 0x4000000000000000LL;
  sub_144854(v4, v5, (uint64_t)v6);
  void *v4 = &off_256138;
  BOOL v7 = sub_122A0C(0x20uLL);
  size_t v8 = sub_122A0C(0x18uLL);
  *size_t v8 = off_24E1B0;
  v8[1] = 0LL;
  v8[2] = 0x3FF0000000000000LL;
  sub_144854(v7, (uint64_t)v4, (uint64_t)v8);
  *BOOL v7 = off_255C38;
  double v9 = sub_122A0C(0x18uLL);
  sub_13C978(v9, (uint64_t)v7);
  *double v9 = off_253530;
  uint64_t v10 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 16) + 112LL))(*(void *)(a1 + 16), a2);
  uint64_t v11 = sub_122A0C(0x18uLL);
  sub_13C978(v11, v10);
  void *v11 = off_253668;
  uint64_t v12 = sub_122A0C(0x20uLL);
  sub_144854(v12, (uint64_t)v11, (uint64_t)v9);
  void *v12 = off_255EB8;
  return v12;
}

void sub_140448( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10)
{
  if (v11) {
    free(v11);
  }
  if (a2 == 1)
  {
    __int16 v15 = __cxa_begin_catch(exception_object);
    __int128 v17 = *(_OWORD *)v15;
    uint64_t v18 = *((void *)v15 + 2);
    if (v10) {
      (*(void (**)(uint64_t))(*(void *)v10 + 152LL))(v10);
    }
    if (v12) {
      (*(void (**)(uint64_t))(*(void *)v12 + 152LL))(v12);
    }
    exception = __cxa_allocate_exception(0x18uLL);
    *(_OWORD *)exception = v17;
    exception[2] = v18;
  }

  _Unwind_Resume(exception_object);
}

double sub_140574(double (****a1)(void))
{
  double v2 = (**a1[2])(a1[2]);
  if (v2 == 0.0) {
    ((void (*)(double (****)(void), uint64_t, uint64_t, uint64_t))(*a1)[34])(a1, 10LL, -1LL, -1LL);
  }
  return mathParser::atan<double>(1.0 / v2);
}

uint64_t sub_1405D8(uint64_t a1, int a2)
{
  LODWORD(v2) = a2;
  uint64_t v3 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 8LL))(*(void *)(a1 + 16));
  uint64_t v4 = v3;
  if (v3) {
    BOOL v5 = (int)v2 < 1;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    uint64_t v2 = v2;
    uint64_t v6 = (double *)v3;
    do
    {
      *uint64_t v6 = mathParser::atan<double>(1.0 / *v6);
      ++v6;
      --v2;
    }

    while (v2);
  }

  return v4;
}

uint64_t sub_14064C(uint64_t a1, _BYTE *a2, int a3)
{
  LODWORD(v3) = a3;
  uint64_t v5 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 16LL))(*(void *)(a1 + 16));
  uint64_t v6 = v5;
  if (v5) {
    BOOL v7 = (int)v3 < 1;
  }
  else {
    BOOL v7 = 1;
  }
  if (!v7)
  {
    uint64_t v3 = v3;
    size_t v8 = (double *)v5;
    do
    {
      if (!*a2)
      {
        if (*v8 == 0.0) {
          *a2 = 10;
        }
        else {
          *size_t v8 = mathParser::atan<double>(1.0 / *v8);
        }
      }

      ++v8;
      ++a2;
      --v3;
    }

    while (v3);
  }

  return v6;
}

uint64_t sub_1406F0()
{
  return 19LL;
}

void *sub_1406F8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_122A0C(0x20uLL);
  uint64_t v5 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 120LL))(*(void *)(a1 + 16));
  uint64_t v6 = sub_122A0C(0x18uLL);
  *uint64_t v6 = off_24E1B0;
  v6[1] = 0LL;
  _OWORD v6[2] = 0x4000000000000000LL;
  sub_144854(v4, v5, (uint64_t)v6);
  void *v4 = &off_256138;
  BOOL v7 = sub_122A0C(0x20uLL);
  size_t v8 = sub_122A0C(0x18uLL);
  *size_t v8 = off_24E1B0;
  v8[1] = 0LL;
  v8[2] = 0x3FF0000000000000LL;
  sub_144854(v7, (uint64_t)v4, (uint64_t)v8);
  *BOOL v7 = off_255AF8;
  uint64_t v9 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 16) + 112LL))(*(void *)(a1 + 16), a2);
  uint64_t v10 = sub_122A0C(0x18uLL);
  sub_13C978(v10, v9);
  void *v10 = off_253668;
  uint64_t v11 = sub_122A0C(0x20uLL);
  sub_144854(v11, (uint64_t)v10, (uint64_t)v7);
  void *v11 = off_255EB8;
  return v11;
}

void sub_140854( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, __int128 a11, uint64_t a12)
{
  __int128 v16 = v14;
  if (v16) {
    free(v16);
  }
  if (a2 == 1)
  {
    uint64_t v18 = __cxa_begin_catch(exception_object);
    __int128 v20 = *(_OWORD *)v18;
    uint64_t v21 = *((void *)v18 + 2);
    if (v13) {
      (*(void (**)(uint64_t))(*(void *)v13 + 152LL))(v13);
    }
    if (v12) {
      (*(void (**)(uint64_t))(*(void *)v12 + 152LL))(v12);
    }
    exception = __cxa_allocate_exception(0x18uLL);
    *(_OWORD *)exception = v20;
    exception[2] = v21;
  }

  _Unwind_Resume(exception_object);
}

double sub_140970(uint64_t a1)
{
  double v1 = (***(double (****)(void))(a1 + 16))(*(void *)(a1 + 16));
  return mathParser::sinh<double>(v1);
}

uint64_t sub_140990(uint64_t a1, int a2)
{
  LODWORD(v2) = a2;
  uint64_t v3 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 8LL))(*(void *)(a1 + 16));
  uint64_t v4 = v3;
  if (v3) {
    BOOL v5 = (int)v2 < 1;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    uint64_t v2 = v2;
    uint64_t v6 = (double *)v3;
    do
    {
      *uint64_t v6 = mathParser::sinh<double>(*v6);
      ++v6;
      --v2;
    }

    while (v2);
  }

  return v4;
}

uint64_t sub_1409F4(uint64_t a1, unsigned __int8 *a2, int a3)
{
  LODWORD(v3) = a3;
  uint64_t v5 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 16LL))(*(void *)(a1 + 16));
  uint64_t v6 = v5;
  if (v5) {
    BOOL v7 = (int)v3 < 1;
  }
  else {
    BOOL v7 = 1;
  }
  if (!v7)
  {
    uint64_t v3 = v3;
    size_t v8 = (double *)v5;
    do
    {
      if (!*a2++) {
        *size_t v8 = mathParser::sinh<double>(*v8);
      }
      ++v8;
      --v3;
    }

    while (v3);
  }

  return v6;
}

uint64_t sub_140A68()
{
  return 20LL;
}

void *sub_140A70(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_122A0C(0x18uLL);
  uint64_t v5 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 120LL))(*(void *)(a1 + 16));
  sub_13C978(v4, v5);
  void *v4 = &off_2548B0;
  uint64_t v6 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 16) + 112LL))(*(void *)(a1 + 16), a2);
  BOOL v7 = sub_122A0C(0x20uLL);
  sub_144854(v7, v6, (uint64_t)v4);
  *BOOL v7 = off_255D78;
  return v7;
}

void sub_140B34( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10)
{
  uint64_t v14 = v12;
  if (v14) {
    free(v14);
  }
  if (a2 == 1)
  {
    __int128 v16 = __cxa_begin_catch(exception_object);
    __int128 v18 = *(_OWORD *)v16;
    uint64_t v19 = *((void *)v16 + 2);
    if (v10) {
      (*(void (**)(uint64_t))(*(void *)v10 + 152LL))(v10);
    }
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 152LL))(v11);
    }
    exception = __cxa_allocate_exception(0x18uLL);
    *(_OWORD *)exception = v18;
    exception[2] = v19;
  }

  _Unwind_Resume(exception_object);
}

double sub_140C10(uint64_t a1)
{
  double v1 = (***(double (****)(void))(a1 + 16))(*(void *)(a1 + 16));
  return mathParser::cosh<double>(v1);
}

uint64_t sub_140C30(uint64_t a1, int a2)
{
  LODWORD(v2) = a2;
  uint64_t v3 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 8LL))(*(void *)(a1 + 16));
  uint64_t v4 = v3;
  if (v3) {
    BOOL v5 = (int)v2 < 1;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    uint64_t v2 = v2;
    uint64_t v6 = (double *)v3;
    do
    {
      *uint64_t v6 = mathParser::cosh<double>(*v6);
      ++v6;
      --v2;
    }

    while (v2);
  }

  return v4;
}

uint64_t sub_140C94(uint64_t a1, unsigned __int8 *a2, int a3)
{
  LODWORD(v3) = a3;
  uint64_t v5 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 16LL))(*(void *)(a1 + 16));
  uint64_t v6 = v5;
  if (v5) {
    BOOL v7 = (int)v3 < 1;
  }
  else {
    BOOL v7 = 1;
  }
  if (!v7)
  {
    uint64_t v3 = v3;
    size_t v8 = (double *)v5;
    do
    {
      if (!*a2++) {
        *size_t v8 = mathParser::cosh<double>(*v8);
      }
      ++v8;
      --v3;
    }

    while (v3);
  }

  return v6;
}

uint64_t sub_140D08()
{
  return 21LL;
}

void *sub_140D10(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_122A0C(0x18uLL);
  uint64_t v5 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 120LL))(*(void *)(a1 + 16));
  sub_13C978(v4, v5);
  void *v4 = &off_254778;
  uint64_t v6 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 16) + 112LL))(*(void *)(a1 + 16), a2);
  BOOL v7 = sub_122A0C(0x20uLL);
  sub_144854(v7, v6, (uint64_t)v4);
  *BOOL v7 = off_255D78;
  return v7;
}

void sub_140DD4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10)
{
  uint64_t v14 = v12;
  if (v14) {
    free(v14);
  }
  if (a2 == 1)
  {
    __int128 v16 = __cxa_begin_catch(exception_object);
    __int128 v18 = *(_OWORD *)v16;
    uint64_t v19 = *((void *)v16 + 2);
    if (v10) {
      (*(void (**)(uint64_t))(*(void *)v10 + 152LL))(v10);
    }
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 152LL))(v11);
    }
    exception = __cxa_allocate_exception(0x18uLL);
    *(_OWORD *)exception = v18;
    exception[2] = v19;
  }

  _Unwind_Resume(exception_object);
}

double sub_140EB0(double (****a1)(void))
{
  double v2 = (**a1[2])(a1[2]);
  return mathParser::tanh<double>(v2);
}

uint64_t sub_140F14(uint64_t a1, int a2)
{
  LODWORD(v2) = a2;
  uint64_t v3 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 8LL))(*(void *)(a1 + 16));
  uint64_t v4 = v3;
  if (v3) {
    BOOL v5 = (int)v2 < 1;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    uint64_t v2 = v2;
    uint64_t v6 = (double *)v3;
    do
    {
      *uint64_t v6 = mathParser::tanh<double>(*v6);
      ++v6;
      --v2;
    }

    while (v2);
  }

  return v4;
}

uint64_t sub_140F78(uint64_t a1, _BYTE *a2, int a3)
{
  LODWORD(v3) = a3;
  uint64_t v5 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 16LL))(*(void *)(a1 + 16));
  uint64_t v6 = v5;
  if (v5) {
    BOOL v7 = (int)v3 < 1;
  }
  else {
    BOOL v7 = 1;
  }
  if (!v7)
  {
    uint64_t v3 = v3;
    size_t v8 = (double *)v5;
    do
    {
      if (!*a2)
      {
        else {
          *size_t v8 = mathParser::tanh<double>(*v8);
        }
      }

      ++v8;
      ++a2;
      --v3;
    }

    while (v3);
  }

  return v6;
}

uint64_t sub_141014()
{
  return 22LL;
}

void *sub_14101C(uint64_t a1)
{
  uint64_t v2 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 112LL))(*(void *)(a1 + 16));
  uint64_t v3 = sub_122A0C(0x18uLL);
  uint64_t v4 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 120LL))(*(void *)(a1 + 16));
  sub_13C978(v3, v4);
  *uint64_t v3 = off_254B20;
  uint64_t v5 = sub_122A0C(0x20uLL);
  uint64_t v6 = sub_122A0C(0x18uLL);
  *uint64_t v6 = off_24E1B0;
  v6[1] = 0LL;
  _OWORD v6[2] = 0x4000000000000000LL;
  sub_144854(v5, (uint64_t)v3, (uint64_t)v6);
  void *v5 = &off_256138;
  BOOL v7 = sub_122A0C(0x20uLL);
  sub_144854(v7, v2, (uint64_t)v5);
  *BOOL v7 = off_255D78;
  return v7;
}

void sub_141124( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10)
{
  if (v11) {
    free(v11);
  }
  if (a2 == 1)
  {
    __int16 v15 = __cxa_begin_catch(exception_object);
    __int128 v17 = *(_OWORD *)v15;
    uint64_t v18 = *((void *)v15 + 2);
    if (v12) {
      (*(void (**)(uint64_t))(*(void *)v12 + 152LL))(v12);
    }
    if (v10) {
      (*(void (**)(uint64_t))(*(void *)v10 + 152LL))(v10);
    }
    exception = __cxa_allocate_exception(0x18uLL);
    *(_OWORD *)exception = v17;
    exception[2] = v18;
  }

  _Unwind_Resume(exception_object);
}

double sub_14120C(double (****a1)(void))
{
  double v2 = (**a1[2])(a1[2]);
  return 1.0 / mathParser::cosh<double>(v2);
}

uint64_t sub_14127C(uint64_t a1, int a2)
{
  LODWORD(v2) = a2;
  uint64_t v3 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 8LL))(*(void *)(a1 + 16));
  uint64_t v4 = v3;
  if (v3) {
    BOOL v5 = (int)v2 < 1;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    uint64_t v2 = v2;
    uint64_t v6 = (double *)v3;
    do
    {
      *uint64_t v6 = 1.0 / mathParser::cosh<double>(*v6);
      ++v6;
      --v2;
    }

    while (v2);
  }

  return v4;
}

uint64_t sub_1412F0(uint64_t a1, _BYTE *a2, int a3)
{
  LODWORD(v3) = a3;
  uint64_t v5 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 16LL))(*(void *)(a1 + 16));
  uint64_t v6 = v5;
  if (v5) {
    BOOL v7 = (int)v3 < 1;
  }
  else {
    BOOL v7 = 1;
  }
  if (!v7)
  {
    uint64_t v3 = v3;
    size_t v8 = (double *)v5;
    do
    {
      if (!*a2)
      {
        double v9 = mathParser::cosh<double>(*v8);
        if (v9 == 0.0) {
          *a2 = 17;
        }
        else {
          *size_t v8 = 1.0 / v9;
        }
      }

      ++v8;
      ++a2;
      --v3;
    }

    while (v3);
  }

  return v6;
}

uint64_t sub_141394()
{
  return 23LL;
}

void *sub_14139C(uint64_t a1)
{
  uint64_t v2 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 112LL))(*(void *)(a1 + 16));
  uint64_t v3 = sub_122A0C(0x18uLL);
  uint64_t v4 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 120LL))(*(void *)(a1 + 16));
  sub_13C978(v3, v4);
  *uint64_t v3 = off_254B20;
  uint64_t v5 = sub_122A0C(0x20uLL);
  sub_144854(v5, v2, (uint64_t)v3);
  void *v5 = off_255D78;
  uint64_t v6 = sub_122A0C(0x18uLL);
  uint64_t v7 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 120LL))(*(void *)(a1 + 16));
  sub_13C978(v6, v7);
  *uint64_t v6 = &off_2549E8;
  size_t v8 = sub_122A0C(0x20uLL);
  sub_144854(v8, (uint64_t)v5, (uint64_t)v6);
  *size_t v8 = off_255D78;
  return v8;
}

void sub_1414C0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, __int128 a11, uint64_t a12)
{
  if (v12) {
    free(v12);
  }
  if (a2 == 1)
  {
    __int128 v17 = __cxa_begin_catch(exception_object);
    __int128 v19 = *(_OWORD *)v17;
    uint64_t v20 = *((void *)v17 + 2);
    if (v13) {
      (*(void (**)(uint64_t))(*(void *)v13 + 152LL))(v13);
    }
    if (v14) {
      (*(void (**)(uint64_t))(*(void *)v14 + 152LL))(v14);
    }
    exception = __cxa_allocate_exception(0x18uLL);
    *(_OWORD *)exception = v19;
    exception[2] = v20;
  }

  _Unwind_Resume(exception_object);
}

double sub_1415CC(double (****a1)(void))
{
  double v2 = (**a1[2])(a1[2]);
  return 1.0 / mathParser::sinh<double>(v2);
}

uint64_t sub_14163C(uint64_t a1, int a2)
{
  LODWORD(v2) = a2;
  uint64_t v3 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 8LL))(*(void *)(a1 + 16));
  uint64_t v4 = v3;
  if (v3) {
    BOOL v5 = (int)v2 < 1;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    uint64_t v2 = v2;
    uint64_t v6 = (double *)v3;
    do
    {
      *uint64_t v6 = 1.0 / mathParser::sinh<double>(*v6);
      ++v6;
      --v2;
    }

    while (v2);
  }

  return v4;
}

uint64_t sub_1416B0(uint64_t a1, _BYTE *a2, int a3)
{
  LODWORD(v3) = a3;
  uint64_t v5 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 16LL))(*(void *)(a1 + 16));
  uint64_t v6 = v5;
  if (v5) {
    BOOL v7 = (int)v3 < 1;
  }
  else {
    BOOL v7 = 1;
  }
  if (!v7)
  {
    uint64_t v3 = v3;
    size_t v8 = (double *)v5;
    do
    {
      if (!*a2)
      {
        double v9 = mathParser::sinh<double>(*v8);
        if (v9 == 0.0) {
          *a2 = 18;
        }
        else {
          *size_t v8 = 1.0 / v9;
        }
      }

      ++v8;
      ++a2;
      --v3;
    }

    while (v3);
  }

  return v6;
}

uint64_t sub_141754()
{
  return 24LL;
}

void *sub_14175C(uint64_t a1)
{
  uint64_t v2 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 112LL))(*(void *)(a1 + 16));
  uint64_t v3 = sub_122A0C(0x18uLL);
  uint64_t v4 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 120LL))(*(void *)(a1 + 16));
  sub_13C978(v3, v4);
  *uint64_t v3 = off_254C58;
  uint64_t v5 = sub_122A0C(0x20uLL);
  sub_144854(v5, v2, (uint64_t)v3);
  void *v5 = off_255D78;
  uint64_t v6 = sub_122A0C(0x18uLL);
  uint64_t v7 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 120LL))(*(void *)(a1 + 16));
  sub_13C978(v6, v7);
  *uint64_t v6 = off_254D90;
  size_t v8 = sub_122A0C(0x20uLL);
  sub_144854(v8, (uint64_t)v5, (uint64_t)v6);
  *size_t v8 = off_255D78;
  double v9 = sub_122A0C(0x18uLL);
  sub_13C978(v9, (uint64_t)v8);
  *double v9 = off_253668;
  return v9;
}

void sub_1418A8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10)
{
  if (v11) {
    free(v11);
  }
  if (a2 == 1)
  {
    __int16 v15 = __cxa_begin_catch(exception_object);
    __int128 v17 = *(_OWORD *)v15;
    uint64_t v18 = *((void *)v15 + 2);
    if (v12) {
      (*(void (**)(uint64_t))(*(void *)v12 + 152LL))(v12);
    }
    if (v10) {
      (*(void (**)(uint64_t))(*(void *)v10 + 152LL))(v10);
    }
    exception = __cxa_allocate_exception(0x18uLL);
    *(_OWORD *)exception = v17;
    exception[2] = v18;
  }

  _Unwind_Resume(exception_object);
}

double sub_1419C8(double (****a1)(void))
{
  double v2 = (**a1[2])(a1[2]);
  return 1.0 / mathParser::tanh<double>(v2);
}

uint64_t sub_141A38(uint64_t a1, int a2)
{
  LODWORD(v2) = a2;
  uint64_t v3 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 8LL))(*(void *)(a1 + 16));
  uint64_t v4 = v3;
  if (v3) {
    BOOL v5 = (int)v2 < 1;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    uint64_t v2 = v2;
    uint64_t v6 = (double *)v3;
    do
    {
      *uint64_t v6 = 1.0 / mathParser::tanh<double>(*v6);
      ++v6;
      --v2;
    }

    while (v2);
  }

  return v4;
}

uint64_t sub_141AAC(uint64_t a1, _BYTE *a2, int a3)
{
  LODWORD(v3) = a3;
  uint64_t v5 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 16LL))(*(void *)(a1 + 16));
  uint64_t v6 = v5;
  if (v5) {
    BOOL v7 = (int)v3 < 1;
  }
  else {
    BOOL v7 = 1;
  }
  if (!v7)
  {
    uint64_t v3 = v3;
    size_t v8 = (double *)v5;
    do
    {
      if (!*a2)
      {
        double v9 = mathParser::tanh<double>(*v8);
        if (v9 == 0.0) {
          *a2 = 19;
        }
        else {
          *size_t v8 = 1.0 / v9;
        }
      }

      ++v8;
      ++a2;
      --v3;
    }

    while (v3);
  }

  return v6;
}

uint64_t sub_141B50()
{
  return 25LL;
}

void *sub_141B58(uint64_t a1)
{
  uint64_t v2 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 112LL))(*(void *)(a1 + 16));
  uint64_t v3 = sub_122A0C(0x18uLL);
  sub_13C978(v3, v2);
  *uint64_t v3 = off_253668;
  uint64_t v4 = sub_122A0C(0x18uLL);
  uint64_t v5 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 120LL))(*(void *)(a1 + 16));
  sub_13C978(v4, v5);
  void *v4 = off_254C58;
  uint64_t v6 = sub_122A0C(0x20uLL);
  BOOL v7 = sub_122A0C(0x18uLL);
  *BOOL v7 = off_24E1B0;
  v7[1] = 0LL;
  float v7[2] = 0x4000000000000000LL;
  sub_144854(v6, (uint64_t)v4, (uint64_t)v7);
  *uint64_t v6 = &off_256138;
  size_t v8 = sub_122A0C(0x20uLL);
  sub_144854(v8, (uint64_t)v3, (uint64_t)v6);
  *size_t v8 = off_255D78;
  return v8;
}

void sub_141C88( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, __int128 a11, uint64_t a12)
{
  if (v13) {
    free(v13);
  }
  if (a2 == 1)
  {
    __int128 v17 = __cxa_begin_catch(exception_object);
    __int128 v19 = *(_OWORD *)v17;
    uint64_t v20 = *((void *)v17 + 2);
    if (v14) {
      (*(void (**)(uint64_t))(*(void *)v14 + 152LL))(v14);
    }
    if (v12) {
      (*(void (**)(uint64_t))(*(void *)v12 + 152LL))(v12);
    }
    exception = __cxa_allocate_exception(0x18uLL);
    *(_OWORD *)exception = v19;
    exception[2] = v20;
  }

  _Unwind_Resume(exception_object);
}

double sub_141D9C(uint64_t a1)
{
  BOOL v1 = (***(double (****)(void))(a1 + 16))(*(void *)(a1 + 16)) == 0.0;
  double result = 0.0;
  if (v1) {
    return 1.0;
  }
  return result;
}

uint64_t sub_141DCC(uint64_t a1, int a2)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 8LL))(*(void *)(a1 + 16));
  if (result) {
    BOOL v4 = a2 < 1;
  }
  else {
    BOOL v4 = 1;
  }
  if (!v4)
  {
    uint64_t v5 = a2;
    uint64_t v6 = (double *)result;
    do
    {
      if (*v6 == 0.0) {
        double v7 = 1.0;
      }
      else {
        double v7 = 0.0;
      }
      *v6++ = v7;
      --v5;
    }

    while (v5);
  }

  return result;
}

uint64_t sub_141E2C(uint64_t a1, unsigned __int8 *a2, int a3)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 16LL))(*(void *)(a1 + 16));
  if (result) {
    BOOL v6 = a3 < 1;
  }
  else {
    BOOL v6 = 1;
  }
  if (!v6)
  {
    uint64_t v7 = a3;
    size_t v8 = (double *)result;
    do
    {
      if (!*a2++)
      {
        if (*v8 == 0.0) {
          double v10 = 1.0;
        }
        else {
          double v10 = 0.0;
        }
        *size_t v8 = v10;
      }

      ++v8;
      --v7;
    }

    while (v7);
  }

  return result;
}

uint64_t sub_141E9C()
{
  return 26LL;
}

double sub_141EA4(uint64_t a1)
{
  return (double)~(uint64_t)(***(double (****)(void))(a1 + 16))(*(void *)(a1 + 16));
}

double sub_141ED0(uint64_t a1, int a2)
{
  uint64_t v3 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 8LL))(*(void *)(a1 + 16));
  if (v3) {
    BOOL v5 = a2 < 1;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    uint64_t v6 = a2;
    uint64_t v7 = (double *)v3;
    do
    {
      double result = (double)~(uint64_t)*v7;
      *v7++ = result;
      --v6;
    }

    while (v6);
  }

  return result;
}

uint64_t sub_141F2C(uint64_t a1, unsigned __int8 *a2, int a3)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 16LL))(*(void *)(a1 + 16));
  if (result) {
    BOOL v6 = a3 < 1;
  }
  else {
    BOOL v6 = 1;
  }
  if (!v6)
  {
    uint64_t v7 = a3;
    size_t v8 = (double *)result;
    do
    {
      if (!*a2++) {
        *size_t v8 = (double)~(uint64_t)*v8;
      }
      ++v8;
      --v7;
    }

    while (v7);
  }

  return result;
}

uint64_t sub_141F98()
{
  return 27LL;
}

double sub_141FA0(uint64_t a1)
{
  double v1 = (***(double (****)(void))(a1 + 16))(*(void *)(a1 + 16));
  return mathParser::ceil<double>(v1);
}

uint64_t sub_141FC0(uint64_t a1, int a2)
{
  LODWORD(v2) = a2;
  uint64_t v3 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 8LL))(*(void *)(a1 + 16));
  uint64_t v4 = v3;
  if (v3) {
    BOOL v5 = (int)v2 < 1;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    uint64_t v2 = v2;
    BOOL v6 = (double *)v3;
    do
    {
      *BOOL v6 = mathParser::ceil<double>(*v6);
      ++v6;
      --v2;
    }

    while (v2);
  }

  return v4;
}

uint64_t sub_142024(uint64_t a1, unsigned __int8 *a2, int a3)
{
  LODWORD(v3) = a3;
  uint64_t v5 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 16LL))(*(void *)(a1 + 16));
  uint64_t v6 = v5;
  if (v5) {
    BOOL v7 = (int)v3 < 1;
  }
  else {
    BOOL v7 = 1;
  }
  if (!v7)
  {
    uint64_t v3 = v3;
    size_t v8 = (double *)v5;
    do
    {
      if (!*a2++) {
        *size_t v8 = mathParser::ceil<double>(*v8);
      }
      ++v8;
      --v3;
    }

    while (v3);
  }

  return v6;
}

uint64_t sub_142098()
{
  return 28LL;
}

double sub_1420A0(uint64_t a1)
{
  double v1 = (***(double (****)(void))(a1 + 16))(*(void *)(a1 + 16));
  return mathParser::round<double>(v1);
}

uint64_t sub_1420C0(uint64_t a1, int a2)
{
  LODWORD(v2) = a2;
  uint64_t v3 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 8LL))(*(void *)(a1 + 16));
  uint64_t v4 = v3;
  if (v3) {
    BOOL v5 = (int)v2 < 1;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    uint64_t v2 = v2;
    uint64_t v6 = (double *)v3;
    do
    {
      *uint64_t v6 = mathParser::round<double>(*v6);
      ++v6;
      --v2;
    }

    while (v2);
  }

  return v4;
}

uint64_t sub_142124(uint64_t a1, unsigned __int8 *a2, int a3)
{
  LODWORD(v3) = a3;
  uint64_t v5 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 16LL))(*(void *)(a1 + 16));
  uint64_t v6 = v5;
  if (v5) {
    BOOL v7 = (int)v3 < 1;
  }
  else {
    BOOL v7 = 1;
  }
  if (!v7)
  {
    uint64_t v3 = v3;
    size_t v8 = (double *)v5;
    do
    {
      if (!*a2++) {
        *size_t v8 = mathParser::round<double>(*v8);
      }
      ++v8;
      --v3;
    }

    while (v3);
  }

  return v6;
}

uint64_t sub_142198()
{
  return 29LL;
}

double sub_1421A0(uint64_t a1)
{
  double v1 = (***(double (****)(void))(a1 + 16))(*(void *)(a1 + 16));
  return mathParser::floor<double>(v1);
}

uint64_t sub_1421C0(uint64_t a1, int a2)
{
  LODWORD(v2) = a2;
  uint64_t v3 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 8LL))(*(void *)(a1 + 16));
  uint64_t v4 = v3;
  if (v3) {
    BOOL v5 = (int)v2 < 1;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    uint64_t v2 = v2;
    uint64_t v6 = (double *)v3;
    do
    {
      *uint64_t v6 = mathParser::floor<double>(*v6);
      ++v6;
      --v2;
    }

    while (v2);
  }

  return v4;
}

uint64_t sub_142224(uint64_t a1, unsigned __int8 *a2, int a3)
{
  LODWORD(v3) = a3;
  uint64_t v5 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 16LL))(*(void *)(a1 + 16));
  uint64_t v6 = v5;
  if (v5) {
    BOOL v7 = (int)v3 < 1;
  }
  else {
    BOOL v7 = 1;
  }
  if (!v7)
  {
    uint64_t v3 = v3;
    size_t v8 = (double *)v5;
    do
    {
      if (!*a2++) {
        *size_t v8 = mathParser::floor<double>(*v8);
      }
      ++v8;
      --v3;
    }

    while (v3);
  }

  return v6;
}

uint64_t sub_142298()
{
  return 30LL;
}

double sub_1422A0(uint64_t a1)
{
  double v2 = (***(double (****)(void))(a1 + 16))(*(void *)(a1 + 16));
  double v3 = (***(double (****)(void))(a1 + 24))(*(void *)(a1 + 24));
  return mathParser::atan2<double>(v2, v3);
}

char *sub_1422F0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (char *)(*(uint64_t (**)(void))(**(void **)(a1 + 16) + 8LL))(*(void *)(a1 + 16));
  uint64_t v5 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 24) + 8LL))(*(void *)(a1 + 24), a2);
  uint64_t v6 = (char *)v5;
  if (v4) {
    BOOL v7 = v5 == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (!v7)
  {
    if ((int)a2 >= 1)
    {
      uint64_t v9 = 0LL;
      uint64_t v10 = 8LL * a2;
      do
      {
        *(double *)&v4[v9] = mathParser::atan2<double>(*(double *)&v4[v9], *(double *)&v6[v9]);
        v9 += 8LL;
      }

      while (v10 != v9);
    }

double *sub_1423A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (double *)(*(uint64_t (**)(void))(**(void **)(a1 + 16) + 16LL))(*(void *)(a1 + 16));
  uint64_t v7 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 24) + 16LL))( *(void *)(a1 + 24),  a2,  a3);
  size_t v8 = (double *)v7;
  if (v6) {
    BOOL v9 = v7 == 0;
  }
  else {
    BOOL v9 = 1;
  }
  if (!v9)
  {
    if ((int)a3 >= 1)
    {
      uint64_t v11 = 0LL;
      do
      {
        if (!*(_BYTE *)(a2 + v11)) {
          v6[v11] = mathParser::atan2<double>(v6[v11], v8[v11]);
        }
        ++v11;
      }

      while (a3 != v11);
    }

uint64_t sub_142470()
{
  return 31LL;
}

void *sub_142478(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_122A0C(0x20uLL);
  uint64_t v5 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 120LL))(*(void *)(a1 + 16));
  uint64_t v6 = (*(uint64_t (**)(void))(**(void **)(a1 + 24) + 120LL))(*(void *)(a1 + 24));
  sub_144854(v4, v5, v6);
  void *v4 = off_255EB8;
  uint64_t v7 = sub_122A0C(0x20uLL);
  size_t v8 = sub_122A0C(0x18uLL);
  *size_t v8 = off_24E1B0;
  v8[1] = 0LL;
  v8[2] = 0x4000000000000000LL;
  sub_144854(v7, (uint64_t)v4, (uint64_t)v8);
  *uint64_t v7 = &off_256138;
  BOOL v9 = sub_122A0C(0x20uLL);
  uint64_t v10 = sub_122A0C(0x18uLL);
  void *v10 = off_24E1B0;
  v10[1] = 0LL;
  v10[2] = 0x3FF0000000000000LL;
  sub_144854(v9, (uint64_t)v10, (uint64_t)v7);
  *BOOL v9 = off_255AF8;
  uint64_t v11 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 16) + 112LL))(*(void *)(a1 + 16), a2);
  uint64_t v12 = sub_122A0C(0x20uLL);
  sub_144854(v12, v11, (uint64_t)v9);
  void *v12 = off_255EB8;
  return v12;
}

void sub_1425E4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10)
{
  if (v12) {
    free(v12);
  }
  if (a2 == 1)
  {
    __int16 v15 = __cxa_begin_catch(exception_object);
    __int128 v17 = *(_OWORD *)v15;
    uint64_t v18 = *((void *)v15 + 2);
    if (v10) {
      (*(void (**)(uint64_t))(*(void *)v10 + 152LL))(v10);
    }
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 152LL))(v11);
    }
    exception = __cxa_allocate_exception(0x18uLL);
    *(_OWORD *)exception = v17;
    exception[2] = v18;
  }

  _Unwind_Resume(exception_object);
}

void *sub_1426F4(void *a1, void *a2)
{
  a1[1] = 0LL;
  a1[2] = 0LL;
  *a1 = off_2582B8;
  a1[3] = 0LL;
  uint64_t v4 = a1 + 3;
  sub_13C548((uint64_t)a1, (uint64_t)a2);
  uint64_t v6 = (char *)a2[1];
  uint64_t v5 = (char *)a2[2];
  if (v6 != v5)
  {
    int v7 = 0;
    uint64_t v8 = a2[1];
    while (1)
    {
      int v9 = *v6;
      if (v9 == 40)
      {
        uint64_t v11 = 0LL;
        ++v7;
      }

      else if (v9 == 41)
      {
        int v12 = v7 - 1;
        if (v7 <= 0)
        {
          (*(void (**)(void *, uint64_t, uint64_t, uint64_t))(*a1 + 272LL))(a1, 24LL, v8 - *a2, v8 - *a2);
          uint64_t v11 = 0LL;
          uint64_t v5 = (char *)a2[2];
        }

        else
        {
          uint64_t v11 = 0LL;
        }

        int v7 = v12;
      }

      else
      {
        else {
          uint64_t v10 = v6;
        }
        if (v9 == 44) {
          uint64_t v11 = v10;
        }
        else {
          uint64_t v11 = 0LL;
        }
        if (v11)
        {
LABEL_19:
          uint64_t v6 = (char *)a2[1];
          goto LABEL_21;
        }
      }

      ++v6;
      ++v8;
      if (v6 == v5) {
        goto LABEL_19;
      }
    }
  }

  uint64_t v11 = 0LL;
  uint64_t v5 = (char *)a2[1];
LABEL_21:
  if (v11 == v6)
  {
    (*(void (**)(void *, uint64_t, char *, char *))(*a1 + 272LL))(a1, 21LL, &v6[-*a2], &v6[-*a2]);
    uint64_t v5 = (char *)a2[2];
  }

  if (v11 == v5)
  {
    (*(void (**)(void *, uint64_t, char *, char *))(*a1 + 272LL))(a1, 21LL, &v11[-*a2], &v11[-*a2]);
    uint64_t v5 = (char *)a2[2];
  }

  uint64_t v13 = v11;
  if (v11 != v5)
  {
    uint64_t v14 = v11 + 2;
    uint64_t v13 = v11;
    do
    {
      int v15 = *++v13;
      if (v15 == 44)
      {
        (*(void (**)(void *, uint64_t, char *, char *))(*a1 + 272LL))(a1, 29LL, &v14[-*a2], &v5[-*a2]);
        uint64_t v5 = (char *)a2[2];
      }

      ++v14;
    }

    while (v13 != v5);
  }

  uint64_t v16 = a2[3];
  v21[2] = v13;
  v21[3] = v16;
  __int128 v17 = *(_OWORD *)a2;
  v21[0] = *a2;
  __int128 v22 = v17;
  int v23 = v11 - 1;
  uint64_t v24 = v16;
  v21[1] = v11 + 1;
  v20[0] = 0LL;
  (*(void (**)(void *, __int128 *, uint64_t *))(*a1 + 256LL))(a1, &v22, v20);
  if (v20[0]) {
    a1[2] = v20[0];
  }
  (*(void (**)(void *, void *, void *))(*a1 + 256LL))(a1, v21, v4);
  uint64_t v18 = a1[2];
  if (v18) {
    *(void *)(v18 + _Block_object_dispose(va, 8) = a1;
  }
  if (*v4) {
    *(void *)(*v4 + 8LL) = a1;
  }
  return a1;
}

void sub_14292C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10)
{
  if (a2 == 1)
  {
    uint64_t v13 = __cxa_begin_catch(exception_object);
    __int128 v18 = *(_OWORD *)v13;
    uint64_t v19 = *((void *)v13 + 2);
    uint64_t v14 = v10[2];
    if (v14) {
      (*(void (**)(uint64_t))(*(void *)v14 + 152LL))(v14);
    }
    v10[2] = 0LL;
    uint64_t v15 = v10[3];
    if (v15) {
      (*(void (**)(uint64_t))(*(void *)v15 + 152LL))(v15);
    }
    void *v11 = 0LL;
    exception = __cxa_allocate_exception(0x18uLL);
    *(_OWORD *)exception = v18;
    exception[2] = v19;
  }

  void *v10 = off_258180;
  uint64_t v17 = v10[2];
  if (v17) {
    (*(void (**)(uint64_t))(*(void *)v17 + 152LL))(v17);
  }
  v10[1] = 0LL;
  v10[2] = 0LL;
  void *v10 = off_252F20;
  _Unwind_Resume(exception_object);
}

void sub_142A00(void *a1)
{
  void *v1 = off_252F20;
  v1[1] = 0LL;
  sub_AA94(a1);
}

void *sub_142A14(void *a1, uint64_t a2, uint64_t a3)
{
  *sub_13C978(a1, a2) = off_2582B8;
  if (!a3)
  {
    LODWORD(xmmword_2B0AD0) = 21;
    *((void *)&xmmword_2B0AD0 + 1) = -1LL;
    qword_2B0AE0 = -1LL;
    exception = __cxa_allocate_exception(0x18uLL);
    uint64_t v7 = qword_2B0AE0;
    *(_OWORD *)exception = xmmword_2B0AD0;
    exception[2] = v7;
  }

  a1[3] = a3;
  *(void *)(a3 + _Block_object_dispose(va, 8) = a1;
  return a1;
}

void sub_142A98(_Unwind_Exception *exception_object)
{
  void *v1 = off_258180;
  uint64_t v3 = v1[2];
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 152LL))(v3);
  }
  v1[1] = 0LL;
  v1[2] = 0LL;
  void *v1 = off_252F20;
  _Unwind_Resume(exception_object);
}

void sub_142AD4(void *a1)
{
  void *v1 = off_252F20;
  v1[1] = 0LL;
  sub_AA94(a1);
}

double sub_142AE4(uint64_t a1)
{
  if (!*(void *)(a1 + 32)) {
    return 0.0;
  }
  uint64_t v2 = 0LL;
  double v3 = 1.79769313e308;
  do
  {
    uint64_t v4 = *(double (****)(void))(*(void *)(a1 + 32) + 8 * v2);
    if (v4)
    {
      double v5 = (**v4)(v4);
      if (v5 < v3) {
        double v3 = v5;
      }
    }

    ++v2;
  }

  while (v2 < *(int *)(a1 + 24));
  return v3;
}

uint64_t sub_142B74(uint64_t a1, uint64_t a2)
{
  if (!*(void *)(a1 + 32)) {
    return 0LL;
  }
  int v4 = *(_DWORD *)(a1 + 24);
  if (v4 >= 1)
  {
    uint64_t v5 = 0LL;
    while (1)
    {
      uint64_t v6 = *(void *)(*(void *)(a1 + 32) + 8 * v5);
      if (v6)
      {
        uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v6 + 8LL))(v6, a2);
        if (v7)
        {
          LODWORD(v5) = v5 + 1;
          int v4 = *(_DWORD *)(a1 + 24);
          goto LABEL_12;
        }

        int v4 = *(_DWORD *)(a1 + 24);
      }

      if (++v5 >= v4)
      {
        uint64_t v7 = 0LL;
        goto LABEL_12;
      }
    }
  }

  uint64_t v7 = 0LL;
  LODWORD(v5) = 0;
LABEL_12:
  if ((int)v5 < v4)
  {
    uint64_t v5 = v5;
    do
    {
      uint64_t v8 = *(void *)(*(void *)(a1 + 32) + 8 * v5);
      if (v8)
      {
        int v9 = (double *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v8 + 8LL))(v8, a2);
        if (v9)
        {
          if ((int)a2 >= 1)
          {
            uint64_t v10 = a2;
            uint64_t v11 = (double *)v7;
            int v12 = v9;
            do
            {
              if (*v11 > *v12) {
                double *v11 = *v12;
              }
              ++v12;
              ++v11;
              --v10;
            }

            while (v10);
          }

          operator delete[](v9);
        }
      }

      ++v5;
    }

    while (v5 < *(int *)(a1 + 24));
  }

  return v7;
}

void sub_142C9C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10)
{
  if (a2 == 1)
  {
    uint64_t v10 = __cxa_begin_catch(exception_object);
    __int128 v12 = *(_OWORD *)v10;
    uint64_t v13 = *((void *)v10 + 2);
    exception = __cxa_allocate_exception(0x18uLL);
    *(_OWORD *)exception = v12;
    exception[2] = v13;
  }

  _Unwind_Resume(exception_object);
}

uint64_t sub_142D18(uint64_t a1, _BYTE *a2, uint64_t a3)
{
  if (!*(void *)(a1 + 32)) {
    return 0LL;
  }
  int v6 = *(_DWORD *)(a1 + 24);
  if (v6 >= 1)
  {
    uint64_t v7 = 0LL;
    while (1)
    {
      uint64_t v8 = *(void *)(*(void *)(a1 + 32) + 8 * v7);
      if (v8)
      {
        uint64_t v9 = (*(uint64_t (**)(uint64_t, _BYTE *, uint64_t))(*(void *)v8 + 16LL))(v8, a2, a3);
        if (v9)
        {
          LODWORD(v7) = v7 + 1;
          int v6 = *(_DWORD *)(a1 + 24);
          goto LABEL_12;
        }

        int v6 = *(_DWORD *)(a1 + 24);
      }

      if (++v7 >= v6)
      {
        uint64_t v9 = 0LL;
        goto LABEL_12;
      }
    }
  }

  uint64_t v9 = 0LL;
  LODWORD(v7) = 0;
LABEL_12:
  if ((int)v7 < v6)
  {
    uint64_t v7 = v7;
    do
    {
      uint64_t v10 = *(void *)(*(void *)(a1 + 32) + 8 * v7);
      if (v10)
      {
        uint64_t v11 = (double *)(*(uint64_t (**)(uint64_t, _BYTE *, uint64_t))(*(void *)v10 + 16LL))(v10, a2, a3);
        if (v11)
        {
          if ((int)a3 >= 1)
          {
            uint64_t v12 = a3;
            uint64_t v13 = (double *)v9;
            uint64_t v14 = v11;
            uint64_t v15 = a2;
            do
            {
              if (*v13 > *v14 && !*v15) {
                *uint64_t v13 = *v14;
              }
              ++v15;
              ++v14;
              ++v13;
              --v12;
            }

            while (v12);
          }

          operator delete[](v11);
        }
      }

      ++v7;
    }

    while (v7 < *(int *)(a1 + 24));
  }

  return v9;
}

void sub_142E5C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10)
{
  if (a2 == 1)
  {
    uint64_t v10 = __cxa_begin_catch(exception_object);
    __int128 v12 = *(_OWORD *)v10;
    uint64_t v13 = *((void *)v10 + 2);
    exception = __cxa_allocate_exception(0x18uLL);
    *(_OWORD *)exception = v12;
    exception[2] = v13;
  }

  _Unwind_Resume(exception_object);
}

uint64_t sub_142ED8()
{
  return 32LL;
}

uint64_t sub_142EE0(uint64_t a1)
{
  return 0LL;
}

void sub_142F0C(uint64_t a1)
{
  uint64_t v4 = 0LL;
  uint64_t v5 = 0LL;
  do
  {
    uint64_t v6 = *(void *)(*(void *)(a1 + 32) + 8 * v4);
    uint64_t v7 = *(double (****)(void))(*(void *)(a1 + 32) + 8 * v4);
    double v8 = (**v7)(v7);
    double v9 = v8;
    if (!v5)
    {
      int v1 = v4;
      uint64_t v5 = v7;
      goto LABEL_16;
    }

    uint64_t v10 = *(void *)(a1 + 32);
    if (v8 >= v2)
    {
      uint64_t v12 = *(void *)(v10 + 8 * v4);
      if (v12)
      {
        (*(void (**)(uint64_t))(*(void *)v12 + 152LL))(v12);
        uint64_t v10 = *(void *)(a1 + 32);
      }

      *(void *)(v10 + 8 * v4) = 0LL;
LABEL_15:
      double v9 = v2;
      goto LABEL_16;
    }

    uint64_t v11 = *(void *)(v10 + 8LL * v1);
    if (v11)
    {
      (*(void (**)(uint64_t))(*(void *)v11 + 152LL))(v11);
      uint64_t v10 = *(void *)(a1 + 32);
    }

    *(void *)(v10 + 8LL * v1) = 0LL;
    uint64_t v5 = *(double (****)(void))(*(void *)(a1 + 32) + 8 * v4);
    int v1 = v4;
LABEL_16:
    ++v4;
    uint64_t v13 = *(int *)(a1 + 24);
    double v2 = v9;
  }

  while (v4 < v13);
  if ((int)v13 >= 1)
  {
    int v14 = 0;
    uint64_t v15 = *(unsigned int *)(a1 + 24);
    uint64_t v16 = *(void **)(a1 + 32);
    uint64_t v17 = v15;
    do
    {
      if (!*v16++) {
        ++v14;
      }
      --v17;
    }

    while (v17);
    if (v14)
    {
      BOOL v19 = __OFSUB__((_DWORD)v13, v14);
      int v21 = v13 - v14;
      char v20 = (v21 < 0) ^ v19;
      uint64_t v22 = 8LL * v21;
      if (v20) {
        size_t v23 = -1LL;
      }
      else {
        size_t v23 = v22;
      }
      uint64_t v24 = operator new[](v23);
      uint64_t v25 = 0LL;
      int v26 = 0;
      BOOL v27 = *(char **)(a1 + 32);
      do
      {
        uint64_t v28 = *(void *)&v27[v25];
        if (v28) {
          v24[v26++] = v28;
        }
        v25 += 8LL;
      }

      while (8 * v15 != v25);
      *(_DWORD *)(a1 + 24) = v26;
      operator delete[](v27);
      LODWORD(v13) = *(_DWORD *)(a1 + 24);
      *(void *)(a1 + 32) = v24;
    }

    if ((_DWORD)v13 == 1)
    {
      __darwin_ct_rune_t v29 = *(void **)(a1 + 32);
      if (*v29)
      {
        if (*(void *)(a1 + 8))
        {
          *__darwin_ct_rune_t v29 = 0LL;
          (*(void (**)(void, uint64_t))(**(void **)(a1 + 8) + 64LL))(*(void *)(a1 + 8), a1);
          __uint32_t v30 = *(void **)(a1 + 32);
          if (v30) {
            operator delete[](v30);
          }
          *(void *)(a1 + 32) = 0LL;
          *(void *)(a1 + _Block_object_dispose(va, 8) = 0LL;
          (*(void (**)(uint64_t))(*(void *)a1 + 152LL))(a1);
        }
      }
    }
  }

void *sub_143104(void *result)
{
  if (result[4])
  {
    int v1 = result;
    if (*((int *)result + 6) >= 1)
    {
      uint64_t v2 = 0LL;
      do
      {
        uint64_t result = *(void **)(v1[4] + 8 * v2);
        if (result)
        {
          (*(void (**)(void *))(*result + 96LL))(result);
          uint64_t v3 = *(void *)(v1[4] + 8 * v2);
          uint64_t result = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v3 + 40LL))(v3);
          if ((_DWORD)result)
          {
            uint64_t v4 = *(void *)(v1[4] + 8 * v2);
            uint64_t result = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v4 + 24LL))(v4);
            if (!(_DWORD)result)
            {
              uint64_t v5 = *(double (****)(void))(v1[4] + 8 * v2);
              double v6 = (**v5)(v5);
              uint64_t v7 = v1[4];
              uint64_t v8 = *(void *)(v7 + 8 * v2);
              *(void *)(v7 + 8 * v2) = 0LL;
              uint64_t result = sub_122A0C(0x18uLL);
              double *result = off_24E1B0;
              result[1] = 0LL;
              *((double *)result + 2) = v6;
              *(void *)(v1[4] + 8 * v2) = result;
              uint64_t v9 = *(void *)(v1[4] + 8 * v2);
              if (v9) {
                *(void *)(v9 + _Block_object_dispose(va, 8) = v1;
              }
              if (v8) {
                uint64_t result = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v8 + 152LL))(v8);
              }
            }
          }
        }

        ++v2;
      }

      while (v2 < *((int *)v1 + 6));
    }
  }

  return result;
}

void sub_143238(_Unwind_Exception *a1)
{
}

void *sub_14324C(void *a1, uint64_t *a2)
{
  a1[1] = 0LL;
  a1[2] = 0LL;
  *a1 = off_2583F0;
  *((_DWORD *)a1 + 6) = 1;
  a1[4] = 0LL;
  sub_13C548((uint64_t)a1, (uint64_t)a2);
  uint64_t v5 = (char *)a2[1];
  uint64_t v4 = (char *)a2[2];
  if (v5 == v4)
  {
    uint64_t v4 = (char *)a2[1];
  }

  else
  {
    uint64_t v6 = 0LL;
    uint64_t v7 = (char *)a2[1];
    uint64_t v8 = v7;
    do
    {
      int v9 = *v8;
      if (v9 == 40)
      {
        uint64_t v11 = (v6 + 1);
      }

      else if (v9 == 41)
      {
        uint64_t v11 = (v6 - 1);
        if ((int)v6 <= 0)
        {
          (*(void (**)(void *, uint64_t, char *, char *))(*a1 + 272LL))(a1, 24LL, &v7[-*a2], &v7[-*a2]);
          uint64_t v4 = (char *)a2[2];
        }
      }

      else if (v9 == 44 && (_DWORD)v6 == 0)
      {
        uint64_t v11 = 0LL;
        ++*((_DWORD *)a1 + 6);
      }

      else
      {
        uint64_t v11 = v6;
      }

      ++v8;
      ++v7;
      uint64_t v6 = v11;
    }

    while (v8 != v4);
  }

  uint64_t v12 = *((int *)a1 + 6);
  else {
    size_t v13 = 8 * v12;
  }
  int v14 = v5 - 1;
  a1[4] = operator new[](v13);
  if ((int)v12 >= 1)
  {
    uint64_t v15 = 0LL;
    do
    {
      *(void *)(a1[4] + v15) = 0LL;
      v15 += 8LL;
    }

    while (8LL * v12 != v15);
    uint64_t v4 = (char *)a2[2];
  }

  uint64_t v16 = (char *)a2[1];
  uint64_t v17 = a2[3];
  uint64_t v26 = *a2;
  uint64_t v29 = v17;
  if (v16 == v4)
  {
    int v18 = 0;
  }

  else
  {
    int v18 = 0;
    uint64_t v19 = 0LL;
    uint64_t v4 = v16;
    do
    {
      int v20 = *v4;
      if (v20 == 40)
      {
        uint64_t v22 = (v19 + 1);
      }

      else if (v20 == 41)
      {
        uint64_t v22 = (v19 - 1);
      }

      else if (v20 == 44 && (_DWORD)v19 == 0)
      {
        BOOL v27 = v14 + 1;
        uint64_t v28 = v4 - 1;
        if (v4 - 1 < v14 + 1) {
          (*(void (**)(void *, uint64_t, char *, char *))(*a1 + 272LL))(a1, 21LL, &v14[-*a2], &v16[-*a2]);
        }
        (*(void (**)(void *, uint64_t *, uint64_t))(*a1 + 256LL))(a1, &v26, a1[4] + 8LL * v18);
        uint64_t v23 = *(void *)(a1[4] + 8LL * v18);
        if (v23) {
          *(void *)(v23 + _Block_object_dispose(va, 8) = a1;
        }
        uint64_t v22 = 0LL;
        ++v18;
        int v14 = v4;
      }

      else
      {
        uint64_t v22 = v19;
      }

      ++v4;
      ++v16;
      uint64_t v19 = v22;
    }

    while (v4 != (char *)a2[2]);
  }

  BOOL v27 = v14 + 1;
  uint64_t v28 = v4;
  if (v4 < v14 + 1) {
    (*(void (**)(void *, uint64_t, char *, char *))(*a1 + 272LL))(a1, 21LL, &v14[-*a2], &v4[-*a2]);
  }
  (*(void (**)(void *, uint64_t *, uint64_t))(*a1 + 256LL))(a1, &v26, a1[4] + 8LL * v18);
  uint64_t v24 = *(void *)(a1[4] + 8LL * v18);
  if (v24) {
    *(void *)(v24 + _Block_object_dispose(va, 8) = a1;
  }
  return a1;
}

void sub_143514( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10)
{
  void *v10 = off_258180;
  uint64_t v12 = v10[2];
  if (v12) {
    (*(void (**)(uint64_t))(*(void *)v12 + 152LL))(v12);
  }
  v10[1] = 0LL;
  v10[2] = 0LL;
  void *v10 = off_252F20;
  _Unwind_Resume(exception_object);
}

void sub_143608(void *a1)
{
  void *v1 = off_252F20;
  v1[1] = 0LL;
  sub_AA94(a1);
}

uint64_t sub_14361C(uint64_t a1, int a2, void *a3)
{
  uint64_t v3 = a3;
  *(void *)(a1 + _Block_object_dispose(va, 8) = 0LL;
  *(void *)(a1 + 16) = 0LL;
  *(void *)a1 = off_2583F0;
  *(_DWORD *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0LL;
  uint64_t v6 = a2;
  if (a2 < 1)
  {
    size_t v10 = 0LL;
  }

  else
  {
    int v7 = 0;
    uint64_t v8 = a2;
    int v9 = a3;
    do
    {
      if (*v9) {
        *(_DWORD *)(a1 + 24) = ++v7;
      }
      ++v9;
      --v8;
    }

    while (v8);
    if (v7 < 0) {
      size_t v10 = -1LL;
    }
    else {
      size_t v10 = 8LL * v7;
    }
  }

  *(void *)(a1 + 32) = operator new[](v10);
  *(_DWORD *)(a1 + 24) = 0;
  if (a2 >= 1)
  {
    int v11 = 0;
    do
    {
      if (*v3)
      {
        *(void *)(*(void *)(a1 + 32) + 8LL * v11++) = *v3;
        *(_DWORD *)(a1 + 24) = v11;
      }

      ++v3;
      --v6;
    }

    while (v6);
  }

  return a1;
}

void sub_1436E8(_Unwind_Exception *a1)
{
  v1[1] = 0LL;
  v1[2] = 0LL;
  void *v1 = off_252F20;
  _Unwind_Resume(a1);
}

double sub_1436FC(uint64_t a1)
{
  if (!*(void *)(a1 + 32)) {
    return 0.0;
  }
  uint64_t v2 = 0LL;
  double v3 = -1.79769313e308;
  do
  {
    uint64_t v4 = *(double (****)(void))(*(void *)(a1 + 32) + 8 * v2);
    if (v4)
    {
      double v5 = (**v4)(v4);
      if (v5 > v3) {
        double v3 = v5;
      }
    }

    ++v2;
  }

  while (v2 < *(int *)(a1 + 24));
  return v3;
}

uint64_t sub_14378C(uint64_t a1, uint64_t a2)
{
  if (!*(void *)(a1 + 32)) {
    return 0LL;
  }
  int v4 = *(_DWORD *)(a1 + 24);
  if (v4 >= 1)
  {
    uint64_t v5 = 0LL;
    while (1)
    {
      uint64_t v6 = *(void *)(*(void *)(a1 + 32) + 8 * v5);
      if (v6)
      {
        uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v6 + 8LL))(v6, a2);
        if (v7)
        {
          LODWORD(v5) = v5 + 1;
          int v4 = *(_DWORD *)(a1 + 24);
          goto LABEL_12;
        }

        int v4 = *(_DWORD *)(a1 + 24);
      }

      if (++v5 >= v4)
      {
        uint64_t v7 = 0LL;
        goto LABEL_12;
      }
    }
  }

  uint64_t v7 = 0LL;
  LODWORD(v5) = 0;
LABEL_12:
  if ((int)v5 < v4)
  {
    uint64_t v5 = v5;
    do
    {
      uint64_t v8 = *(void *)(*(void *)(a1 + 32) + 8 * v5);
      if (v8)
      {
        int v9 = (double *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v8 + 8LL))(v8, a2);
        if (v9)
        {
          if ((int)a2 >= 1)
          {
            uint64_t v10 = a2;
            int v11 = (double *)v7;
            uint64_t v12 = v9;
            do
            {
              if (*v11 < *v12) {
                double *v11 = *v12;
              }
              ++v12;
              ++v11;
              --v10;
            }

            while (v10);
          }

          operator delete[](v9);
        }
      }

      ++v5;
    }

    while (v5 < *(int *)(a1 + 24));
  }

  return v7;
}

void sub_1438B4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10)
{
  if (a2 == 1)
  {
    uint64_t v10 = __cxa_begin_catch(exception_object);
    __int128 v12 = *(_OWORD *)v10;
    uint64_t v13 = *((void *)v10 + 2);
    exception = __cxa_allocate_exception(0x18uLL);
    *(_OWORD *)exception = v12;
    exception[2] = v13;
  }

  _Unwind_Resume(exception_object);
}

uint64_t sub_143930(uint64_t a1, _BYTE *a2, uint64_t a3)
{
  if (!*(void *)(a1 + 32)) {
    return 0LL;
  }
  int v6 = *(_DWORD *)(a1 + 24);
  if (v6 >= 1)
  {
    uint64_t v7 = 0LL;
    while (1)
    {
      uint64_t v8 = *(void *)(*(void *)(a1 + 32) + 8 * v7);
      if (v8)
      {
        uint64_t v9 = (*(uint64_t (**)(uint64_t, _BYTE *, uint64_t))(*(void *)v8 + 16LL))(v8, a2, a3);
        if (v9)
        {
          LODWORD(v7) = v7 + 1;
          int v6 = *(_DWORD *)(a1 + 24);
          goto LABEL_12;
        }

        int v6 = *(_DWORD *)(a1 + 24);
      }

      if (++v7 >= v6)
      {
        uint64_t v9 = 0LL;
        goto LABEL_12;
      }
    }
  }

  uint64_t v9 = 0LL;
  LODWORD(v7) = 0;
LABEL_12:
  if ((int)v7 < v6)
  {
    uint64_t v7 = v7;
    do
    {
      uint64_t v10 = *(void *)(*(void *)(a1 + 32) + 8 * v7);
      if (v10)
      {
        int v11 = (double *)(*(uint64_t (**)(uint64_t, _BYTE *, uint64_t))(*(void *)v10 + 16LL))(v10, a2, a3);
        if (v11)
        {
          if ((int)a3 >= 1)
          {
            uint64_t v12 = a3;
            uint64_t v13 = (double *)v9;
            int v14 = v11;
            uint64_t v15 = a2;
            do
            {
              if (*v13 < *v14 && !*v15) {
                *uint64_t v13 = *v14;
              }
              ++v15;
              ++v14;
              ++v13;
              --v12;
            }

            while (v12);
          }

          operator delete[](v11);
        }
      }

      ++v7;
    }

    while (v7 < *(int *)(a1 + 24));
  }

  return v9;
}

void sub_143A74( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10)
{
  if (a2 == 1)
  {
    uint64_t v10 = __cxa_begin_catch(exception_object);
    __int128 v12 = *(_OWORD *)v10;
    uint64_t v13 = *((void *)v10 + 2);
    exception = __cxa_allocate_exception(0x18uLL);
    *(_OWORD *)exception = v12;
    exception[2] = v13;
  }

  _Unwind_Resume(exception_object);
}

uint64_t sub_143AF0()
{
  return 33LL;
}

uint64_t sub_143AF8(uint64_t a1)
{
  return 0LL;
}

void sub_143B24(uint64_t a1)
{
  if (!*(void *)(a1 + 32)) {
    return;
  }
  if (*(int *)(a1 + 24) < 1)
  {
LABEL_28:
    *(_DWORD *)(a1 + 24) = 0;
    return;
  }

  uint64_t v4 = 0LL;
  uint64_t v5 = 0LL;
  do
  {
    uint64_t v6 = *(void *)(*(void *)(a1 + 32) + 8 * v4);
    uint64_t v7 = *(double (****)(void))(*(void *)(a1 + 32) + 8 * v4);
    double v8 = (**v7)(v7);
    double v9 = v8;
    if (!v5)
    {
      int v1 = v4;
      uint64_t v5 = v7;
      goto LABEL_16;
    }

    uint64_t v10 = *(void *)(a1 + 32);
    if (v8 <= v2)
    {
      uint64_t v12 = *(void *)(v10 + 8 * v4);
      if (v12)
      {
        (*(void (**)(uint64_t))(*(void *)v12 + 152LL))(v12);
        uint64_t v10 = *(void *)(a1 + 32);
      }

      *(void *)(v10 + 8 * v4) = 0LL;
LABEL_15:
      double v9 = v2;
      goto LABEL_16;
    }

    uint64_t v11 = *(void *)(v10 + 8LL * v1);
    if (v11)
    {
      (*(void (**)(uint64_t))(*(void *)v11 + 152LL))(v11);
      uint64_t v10 = *(void *)(a1 + 32);
    }

    *(void *)(v10 + 8LL * v1) = 0LL;
    uint64_t v5 = *(double (****)(void))(*(void *)(a1 + 32) + 8 * v4);
    int v1 = v4;
LABEL_16:
    ++v4;
    uint64_t v13 = *(int *)(a1 + 24);
    double v2 = v9;
  }

  while (v4 < v13);
  uint64_t v14 = 0LL;
  int v15 = 0;
  uint64_t v16 = 8LL * *(unsigned int *)(a1 + 24);
  do
  {
    uint64_t v17 = *(void *)(a1 + 32);
    uint64_t v18 = *(void *)(v17 + v14);
    if (v18) {
      *(void *)(v17 + 8LL * v15++) = v18;
    }
    v14 += 8LL;
  }

  while (v16 != v14);
  *(_DWORD *)(a1 + 24) = v15;
  if (v15 == 1)
  {
    uint64_t v19 = *(void **)(a1 + 32);
    if (*v19)
    {
      if (*(void *)(a1 + 8))
      {
        *uint64_t v19 = 0LL;
        (*(void (**)(void, uint64_t))(**(void **)(a1 + 8) + 64LL))(*(void *)(a1 + 8), a1);
        int v20 = *(void **)(a1 + 32);
        if (v20) {
          operator delete[](v20);
        }
        *(void *)(a1 + 32) = 0LL;
        *(void *)(a1 + _Block_object_dispose(va, 8) = 0LL;
        (*(void (**)(uint64_t))(*(void *)a1 + 152LL))(a1);
      }
    }
  }

void sub_143CDC(uint64_t a1)
{
  int v1 = *(void **)(a1 + 32);
  if (v1)
  {
    (**(void (***)(void))*v1)(*v1);
    (***(void (****)(void))(*(void *)(a1 + 32) + 8LL))(*(void *)(*(void *)(a1 + 32) + 8LL));
    (***(void (****)(void))(*(void *)(a1 + 32) + 16LL))(*(void *)(*(void *)(a1 + 32) + 16LL));
    (***(void (****)(void))(*(void *)(a1 + 32) + 24LL))(*(void *)(*(void *)(a1 + 32) + 24LL));
    (***(void (****)(void))(*(void *)(a1 + 32) + 32LL))(*(void *)(*(void *)(a1 + 32) + 32LL));
    (***(double (****)(void))(*(void *)(a1 + 32) + 40LL))(*(void *)(*(void *)(a1 + 32) + 40LL));
  }

uint64_t sub_143DC4()
{
  return 34LL;
}

void *sub_143DCC(uint64_t a1, int a2, void *a3)
{
  uint64_t result = (void *)sub_14361C(a1, a2, a3);
  void *result = off_255888;
  return result;
}

uint64_t sub_143DEC(uint64_t result)
{
  int v1 = *(void **)(result + 32);
  if (v1)
  {
    uint64_t v2 = result;
    (**(void (***)(void))*v1)(*v1);
    (***(void (****)(void))(*(void *)(v2 + 32) + 8LL))(*(void *)(*(void *)(v2 + 32) + 8LL));
    (***(void (****)(void))(*(void *)(v2 + 32) + 16LL))(*(void *)(*(void *)(v2 + 32) + 16LL));
    return (***(uint64_t (****)(void))(*(void *)(v2 + 32) + 24LL))(*(void *)(*(void *)(v2 + 32) + 24LL));
  }

  return result;
}

uint64_t sub_143ED0()
{
  return 35LL;
}

void *sub_143ED8(uint64_t a1, int a2, void *a3)
{
  uint64_t result = (void *)sub_14361C(a1, a2, a3);
  void *result = off_2559C0;
  return result;
}

double sub_143EF8(uint64_t a1)
{
  double v2 = (***(double (****)(void))(a1 + 16))(*(void *)(a1 + 16));
  return v2 + (***(double (****)(void))(a1 + 24))(*(void *)(a1 + 24));
}

uint64_t sub_143F44(uint64_t a1, uint64_t a2)
{
  int v4 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 24LL))(*(void *)(a1 + 16));
  uint64_t v5 = **(void **)(a1 + 24);
  if (v4)
  {
    uint64_t v6 = (*(uint64_t (**)(void))(v5 + 8))();
    if (v6)
    {
      (***(void (****)(void))(a1 + 16))(*(void *)(a1 + 16));
      if ((int)a2 >= 1)
      {
        uint64_t v8 = 0LL;
        do
        {
          *(double *)(v6 + v_Block_object_dispose(va, 8) = v7 + *(double *)(v6 + v8);
          v8 += 8LL;
        }

        while (8LL * a2 != v8);
      }
    }

    return v6;
  }

  if ((*(unsigned int (**)(void))(v5 + 24))())
  {
    uint64_t v6 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 16) + 8LL))(*(void *)(a1 + 16), a2);
    if (v6)
    {
      (***(void (****)(void))(a1 + 24))(*(void *)(a1 + 24));
      if ((int)a2 >= 1)
      {
        uint64_t v10 = 0LL;
        do
        {
          *(double *)(v6 + v10) = v9 + *(double *)(v6 + v10);
          v10 += 8LL;
        }

        while (8LL * a2 != v10);
      }
    }

    return v6;
  }

  uint64_t v11 = (char *)(*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 24) + 8LL))(*(void *)(a1 + 24), a2);
  uint64_t v12 = (char *)(*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 16) + 8LL))(*(void *)(a1 + 16), a2);
  uint64_t v13 = v12;
  if (v12) {
    BOOL v14 = v11 == 0LL;
  }
  else {
    BOOL v14 = 1;
  }
  if (!v14)
  {
    if ((int)a2 >= 1)
    {
      uint64_t v15 = 0LL;
      do
      {
        *(double *)&v12[v15] = *(double *)&v11[v15] + *(double *)&v12[v15];
        v15 += 8LL;
      }

      while (8LL * a2 != v15);
    }

uint64_t sub_1440D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 24LL))(*(void *)(a1 + 16));
  uint64_t v7 = **(void **)(a1 + 24);
  if (v6)
  {
    uint64_t v8 = (*(uint64_t (**)(void))(v7 + 16))();
    if (v8)
    {
      (***(void (****)(void))(a1 + 16))(*(void *)(a1 + 16));
      if ((int)a3 >= 1)
      {
        uint64_t v10 = 0LL;
        do
        {
          if (!*(_BYTE *)(a2 + v10)) {
            *(double *)(v8 + 8 * v10) = v9 + *(double *)(v8 + 8 * v10);
          }
          ++v10;
        }

        while (a3 != v10);
      }
    }

    return v8;
  }

  if ((*(unsigned int (**)(void))(v7 + 24))())
  {
    uint64_t v8 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 16) + 16LL))( *(void *)(a1 + 16),  a2,  a3);
    if (v8)
    {
      (***(void (****)(void))(a1 + 24))(*(void *)(a1 + 24));
      if ((int)a3 >= 1)
      {
        uint64_t v12 = 0LL;
        do
        {
          if (!*(_BYTE *)(a2 + v12)) {
            *(double *)(v8 + 8 * v12) = v11 + *(double *)(v8 + 8 * v12);
          }
          ++v12;
        }

        while (a3 != v12);
      }
    }

    return v8;
  }

  uint64_t v13 = (double *)(*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 24) + 16LL))( *(void *)(a1 + 24),  a2,  a3);
  BOOL v14 = (double *)(*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 16) + 16LL))( *(void *)(a1 + 16),  a2,  a3);
  uint64_t v15 = v14;
  if (v14) {
    BOOL v16 = v13 == 0LL;
  }
  else {
    BOOL v16 = 1;
  }
  if (!v16)
  {
    if ((int)a3 >= 1)
    {
      uint64_t v17 = 0LL;
      do
      {
        if (!*(_BYTE *)(a2 + v17)) {
          v14[v17] = v13[v17] + v14[v17];
        }
        ++v17;
      }

      while (a3 != v17);
    }

uint64_t sub_144298()
{
  return 3LL;
}

void *sub_1442A0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 112LL))(*(void *)(a1 + 16));
  uint64_t v5 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 24) + 112LL))(*(void *)(a1 + 24), a2);
  int v6 = sub_122A0C(0x20uLL);
  sub_144854(v6, v4, v5);
  *int v6 = off_255AF8;
  return v6;
}

void sub_14433C(_Unwind_Exception *exception_object, int a2)
{
  int v6 = v4;
  if (v6) {
    free(v6);
  }
  if (a2 == 1)
  {
    __cxa_begin_catch(exception_object);
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 152LL))(v2);
    }
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 152LL))(v3);
    }
    __cxa_end_catch();
    JUMPOUT(0x144324LL);
  }

  _Unwind_Resume(exception_object);
}

uint64_t sub_1443C0(uint64_t a1)
{
  if ((*(unsigned int (**)(void))(**(void **)(a1 + 16) + 40LL))(*(void *)(a1 + 16))
    && (***(double (****)(void))(a1 + 16))(*(void *)(a1 + 16)) == 0.0
    && *(void *)(a1 + 8))
  {
    uint64_t v2 = *(void *)(a1 + 24);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 296LL))(a1, v2);
  }

  if ((*(unsigned int (**)(void))(**(void **)(a1 + 24) + 40LL))(*(void *)(a1 + 24))
    && (***(double (****)(void))(a1 + 24))(*(void *)(a1 + 24)) == 0.0
    && *(void *)(a1 + 8))
  {
    uint64_t v2 = *(void *)(a1 + 16);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 296LL))(a1, v2);
  }

  uint64_t result = (*(uint64_t (**)(void, void))(**(void **)(a1 + 16) + 136LL))( *(void *)(a1 + 16),  *(void *)(a1 + 24));
  if ((_DWORD)result)
  {
    uint64_t v4 = sub_122A0C(0x18uLL);
    void *v4 = off_24E1B0;
    v4[1] = 0LL;
    int v4[2] = 0x4000000000000000LL;
    uint64_t v5 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 120LL))(*(void *)(a1 + 16));
    int v6 = sub_122A0C(0x20uLL);
    sub_144854(v6, (uint64_t)v4, v5);
    *int v6 = off_255D78;
    return (*(uint64_t (**)(uint64_t, void *))(*(void *)a1 + 296LL))(a1, v6);
  }

  return result;
}

void sub_14450C( void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  if (v18) {
    free(v18);
  }
  __cxa_begin_catch(a1);
  (*(void (**)(uint64_t))(*(void *)v16 + 152LL))(v16);
  if (v17) {
    (*(void (**)(uint64_t))(*(void *)v17 + 152LL))(v17);
  }
  __cxa_end_catch();
}

void sub_144570(_Unwind_Exception *a1)
{
}

double *sub_144584(uint64_t a1)
{
  if ((*(unsigned int (**)(void))(**(void **)(a1 + 16) + 40LL))(*(void *)(a1 + 16))
    && !(*(unsigned int (**)(void))(**(void **)(a1 + 16) + 24LL))(*(void *)(a1 + 16)))
  {
    double v2 = (***(double (****)(void))(a1 + 16))(*(void *)(a1 + 16));
    uint64_t v3 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = 0LL;
    uint64_t v4 = (double *)sub_122A0C(0x18uLL);
    *(void *)uint64_t v4 = off_24E1B0;
    v4[1] = 0.0;
    int v4[2] = v2;
    *(void *)(a1 + 16) = v4;
    if (v3)
    {
      (*(void (**)(uint64_t))(*(void *)v3 + 152LL))(v3);
      uint64_t v4 = *(double **)(a1 + 16);
    }

    *((void *)v4 + 1) = a1;
  }

  (*(void (**)(void))(**(void **)(a1 + 24) + 96LL))(*(void *)(a1 + 24));
  uint64_t result = (double *)(*(uint64_t (**)(void))(**(void **)(a1 + 24) + 40LL))(*(void *)(a1 + 24));
  if ((_DWORD)result)
  {
    uint64_t result = (double *)(*(uint64_t (**)(void))(**(void **)(a1 + 24) + 24LL))(*(void *)(a1 + 24));
    if (!(_DWORD)result)
    {
      double v6 = (***(double (****)(void))(a1 + 24))(*(void *)(a1 + 24));
      uint64_t v7 = *(void *)(a1 + 24);
      *(void *)(a1 + 24) = 0LL;
      uint64_t result = (double *)sub_122A0C(0x18uLL);
      *(void *)uint64_t result = off_24E1B0;
      result[1] = 0.0;
      result[2] = v6;
      *(void *)(a1 + 24) = result;
      if (v7)
      {
        (*(void (**)(uint64_t))(*(void *)v7 + 152LL))(v7);
        uint64_t result = *(double **)(a1 + 24);
      }

      *((void *)result + 1) = a1;
    }
  }

  return result;
}

void sub_1446C0(void *a1)
{
  uint64_t v3 = *(void *)(v1 + 24);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 152LL))(v3);
  }
  *(void *)(v1 + 24) = v2;
  __cxa_end_catch();
}

void sub_1446EC(_Unwind_Exception *a1)
{
}

uint64_t *sub_144730(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  a1[2] = 0LL;
  uint64_t v5 = a1 + 2;
  *a1 = (uint64_t)off_258918;
  a1[1] = 0LL;
  a1[3] = 0LL;
  double v6 = a1 + 3;
  sub_13C310(a1, a2, (uint64_t)(a1 + 2));
  (*(void (**)(uint64_t *, uint64_t, uint64_t *))(*a1 + 256))(a1, a3, v6);
  if (*v5) {
    *(void *)(*v5 + _Block_object_dispose(va, 8) = a1;
  }
  if (*v6) {
    *(void *)(*v6 + _Block_object_dispose(va, 8) = a1;
  }
  return a1;
}

void *sub_144854(void *result, uint64_t a2, uint64_t a3)
{
  double *result = off_258918;
  result[1] = 0LL;
  if (!a2 || !a3)
  {
    LODWORD(xmmword_2B0AD0) = 21;
    *((void *)&xmmword_2B0AD0 + 1) = -1LL;
    qword_2B0AE0 = -1LL;
    exception = __cxa_allocate_exception(0x18uLL);
    uint64_t v4 = qword_2B0AE0;
    *(_OWORD *)exception = xmmword_2B0AD0;
    exception[2] = v4;
  }

  result[2] = a2;
  result[3] = a3;
  *(void *)(a2 + _Block_object_dispose(va, 8) = result;
  *(void *)(a3 + _Block_object_dispose(va, 8) = result;
  return result;
}

void sub_1448DC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  *a10 = off_252F20;
  a10[1] = 0LL;
  _Unwind_Resume(a1);
}

double sub_1448F0(uint64_t a1)
{
  double v2 = (***(double (****)(void))(a1 + 16))(*(void *)(a1 + 16));
  return v2 - (***(double (****)(void))(a1 + 24))(*(void *)(a1 + 24));
}

uint64_t sub_14493C(uint64_t a1, uint64_t a2)
{
  int v4 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 24LL))(*(void *)(a1 + 16));
  uint64_t v5 = **(void **)(a1 + 24);
  if (v4)
  {
    uint64_t v6 = (*(uint64_t (**)(void))(v5 + 8))();
    if (v6)
    {
      (***(void (****)(void))(a1 + 16))(*(void *)(a1 + 16));
      if ((int)a2 >= 1)
      {
        uint64_t v8 = 0LL;
        do
        {
          *(double *)(v6 + v_Block_object_dispose(va, 8) = v7 - *(double *)(v6 + v8);
          v8 += 8LL;
        }

        while (8LL * a2 != v8);
      }
    }

    return v6;
  }

  if ((*(unsigned int (**)(void))(v5 + 24))())
  {
    uint64_t v6 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 16) + 8LL))(*(void *)(a1 + 16), a2);
    if (v6)
    {
      (***(void (****)(void))(a1 + 24))(*(void *)(a1 + 24));
      if ((int)a2 >= 1)
      {
        uint64_t v10 = 0LL;
        do
        {
          *(double *)(v6 + v10) = *(double *)(v6 + v10) - v9;
          v10 += 8LL;
        }

        while (8LL * a2 != v10);
      }
    }

    return v6;
  }

  double v11 = (char *)(*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 24) + 8LL))(*(void *)(a1 + 24), a2);
  uint64_t v12 = (char *)(*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 16) + 8LL))(*(void *)(a1 + 16), a2);
  uint64_t v13 = v12;
  if (v12) {
    BOOL v14 = v11 == 0LL;
  }
  else {
    BOOL v14 = 1;
  }
  if (!v14)
  {
    if ((int)a2 >= 1)
    {
      uint64_t v15 = 0LL;
      do
      {
        *(double *)&v12[v15] = *(double *)&v12[v15] - *(double *)&v11[v15];
        v15 += 8LL;
      }

      while (8LL * a2 != v15);
    }

uint64_t sub_144ACC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 24LL))(*(void *)(a1 + 16));
  uint64_t v7 = **(void **)(a1 + 24);
  if (v6)
  {
    uint64_t v8 = (*(uint64_t (**)(void))(v7 + 16))();
    if (v8)
    {
      (***(void (****)(void))(a1 + 16))(*(void *)(a1 + 16));
      if ((int)a3 >= 1)
      {
        uint64_t v10 = 0LL;
        do
        {
          if (!*(_BYTE *)(a2 + v10)) {
            *(double *)(v8 + 8 * v10) = v9 - *(double *)(v8 + 8 * v10);
          }
          ++v10;
        }

        while (a3 != v10);
      }
    }

    return v8;
  }

  if ((*(unsigned int (**)(void))(v7 + 24))())
  {
    uint64_t v8 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 16) + 16LL))( *(void *)(a1 + 16),  a2,  a3);
    if (v8)
    {
      (***(void (****)(void))(a1 + 24))(*(void *)(a1 + 24));
      if ((int)a3 >= 1)
      {
        uint64_t v12 = 0LL;
        do
        {
          if (!*(_BYTE *)(a2 + v12)) {
            *(double *)(v8 + 8 * v12) = *(double *)(v8 + 8 * v12) - v11;
          }
          ++v12;
        }

        while (a3 != v12);
      }
    }

    return v8;
  }

  uint64_t v13 = (double *)(*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 24) + 16LL))( *(void *)(a1 + 24),  a2,  a3);
  BOOL v14 = (double *)(*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 16) + 16LL))( *(void *)(a1 + 16),  a2,  a3);
  uint64_t v15 = v14;
  if (v14) {
    BOOL v16 = v13 == 0LL;
  }
  else {
    BOOL v16 = 1;
  }
  if (!v16)
  {
    if ((int)a3 >= 1)
    {
      uint64_t v17 = 0LL;
      do
      {
        if (!*(_BYTE *)(a2 + v17)) {
          v14[v17] = v14[v17] - v13[v17];
        }
        ++v17;
      }

      while (a3 != v17);
    }

uint64_t sub_144C90()
{
  return 4LL;
}

void *sub_144C98(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 112LL))(*(void *)(a1 + 16));
  uint64_t v5 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 24) + 112LL))(*(void *)(a1 + 24), a2);
  int v6 = sub_122A0C(0x20uLL);
  sub_144854(v6, v4, v5);
  *int v6 = off_255C38;
  return v6;
}

void sub_144D34(_Unwind_Exception *exception_object, int a2)
{
  int v6 = v4;
  if (v6) {
    free(v6);
  }
  if (a2 == 1)
  {
    __cxa_begin_catch(exception_object);
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 152LL))(v2);
    }
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 152LL))(v3);
    }
    __cxa_end_catch();
    JUMPOUT(0x144D1CLL);
  }

  _Unwind_Resume(exception_object);
}

uint64_t sub_144DB8(void *a1)
{
  if ((*(unsigned int (**)(void))(*(void *)a1[2] + 40LL))(a1[2])
    && (**(double (***)(void))a1[2])(a1[2]) == 0.0
    && a1[1])
  {
    uint64_t v2 = a1[3];
    a1[3] = 0LL;
    uint64_t v3 = sub_122A0C(0x18uLL);
    sub_13C978(v3, v2);
    *uint64_t v3 = off_253668;
    return (*(uint64_t (**)(void *, void *))(*a1 + 296LL))(a1, v3);
  }

  else if ((*(unsigned int (**)(void))(*(void *)a1[3] + 40LL))(a1[3]) {
         && (**(double (***)(void))a1[3])(a1[3]) == 0.0
  }
         && a1[1])
  {
    return (*(uint64_t (**)(void *, void))(*a1 + 296LL))(a1, a1[2]);
  }

  else
  {
    uint64_t result = (*(uint64_t (**)(void, void))(*(void *)a1[3] + 136LL))(a1[3], a1[2]);
    if ((_DWORD)result)
    {
      uint64_t v5 = sub_122A0C(0x18uLL);
      v5[1] = 0LL;
      void v5[2] = 0LL;
      void *v5 = off_24E1B0;
      return (*(uint64_t (**)(void *))(*a1 + 296LL))(a1);
    }
  }

  return result;
}

void sub_144EE8( void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (v16) {
    free(v16);
  }
  __cxa_begin_catch(a1);
  *(void *)(v14 + 24) = v15;
  if (v15) {
    *(void *)(v15 + _Block_object_dispose(va, 8) = v14;
  }
  __cxa_end_catch();
}

double sub_144F2C(uint64_t a1)
{
  double v2 = (***(double (****)(void))(a1 + 16))(*(void *)(a1 + 16));
  return v2 * (***(double (****)(void))(a1 + 24))(*(void *)(a1 + 24));
}

uint64_t sub_144F78(uint64_t a1, uint64_t a2)
{
  int v4 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 24LL))(*(void *)(a1 + 16));
  uint64_t v5 = **(void **)(a1 + 24);
  if (v4)
  {
    uint64_t v6 = (*(uint64_t (**)(void))(v5 + 8))();
    if (v6)
    {
      (***(void (****)(void))(a1 + 16))(*(void *)(a1 + 16));
      if ((int)a2 >= 1)
      {
        uint64_t v8 = 0LL;
        do
        {
          *(double *)(v6 + v_Block_object_dispose(va, 8) = v7 * *(double *)(v6 + v8);
          v8 += 8LL;
        }

        while (8LL * a2 != v8);
      }
    }

    return v6;
  }

  if ((*(unsigned int (**)(void))(v5 + 24))())
  {
    uint64_t v6 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 16) + 8LL))(*(void *)(a1 + 16), a2);
    if (v6)
    {
      (***(void (****)(void))(a1 + 24))(*(void *)(a1 + 24));
      if ((int)a2 >= 1)
      {
        uint64_t v10 = 0LL;
        do
        {
          *(double *)(v6 + v10) = v9 * *(double *)(v6 + v10);
          v10 += 8LL;
        }

        while (8LL * a2 != v10);
      }
    }

    return v6;
  }

  double v11 = (char *)(*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 24) + 8LL))(*(void *)(a1 + 24), a2);
  uint64_t v12 = (char *)(*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 16) + 8LL))(*(void *)(a1 + 16), a2);
  uint64_t v13 = v12;
  if (v12) {
    BOOL v14 = v11 == 0LL;
  }
  else {
    BOOL v14 = 1;
  }
  if (!v14)
  {
    if ((int)a2 >= 1)
    {
      uint64_t v15 = 0LL;
      do
      {
        *(double *)&v12[v15] = *(double *)&v11[v15] * *(double *)&v12[v15];
        v15 += 8LL;
      }

      while (8LL * a2 != v15);
    }

uint64_t sub_145108(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 24LL))(*(void *)(a1 + 16));
  uint64_t v7 = **(void **)(a1 + 24);
  if (v6)
  {
    uint64_t v8 = (*(uint64_t (**)(void))(v7 + 16))();
    if (v8)
    {
      (***(void (****)(void))(a1 + 16))(*(void *)(a1 + 16));
      if ((int)a3 >= 1)
      {
        uint64_t v10 = 0LL;
        do
        {
          if (!*(_BYTE *)(a2 + v10)) {
            *(double *)(v8 + 8 * v10) = v9 * *(double *)(v8 + 8 * v10);
          }
          ++v10;
        }

        while (a3 != v10);
      }
    }

    return v8;
  }

  if ((*(unsigned int (**)(void))(v7 + 24))())
  {
    uint64_t v8 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 16) + 16LL))( *(void *)(a1 + 16),  a2,  a3);
    if (v8)
    {
      (***(void (****)(void))(a1 + 24))(*(void *)(a1 + 24));
      if ((int)a3 >= 1)
      {
        uint64_t v12 = 0LL;
        do
        {
          if (!*(_BYTE *)(a2 + v12)) {
            *(double *)(v8 + 8 * v12) = v11 * *(double *)(v8 + 8 * v12);
          }
          ++v12;
        }

        while (a3 != v12);
      }
    }

    return v8;
  }

  uint64_t v13 = (double *)(*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 24) + 16LL))( *(void *)(a1 + 24),  a2,  a3);
  BOOL v14 = (double *)(*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 16) + 16LL))( *(void *)(a1 + 16),  a2,  a3);
  uint64_t v15 = v14;
  if (v14) {
    BOOL v16 = v13 == 0LL;
  }
  else {
    BOOL v16 = 1;
  }
  if (!v16)
  {
    if ((int)a3 >= 1)
    {
      uint64_t v17 = 0LL;
      do
      {
        if (!*(_BYTE *)(a2 + v17)) {
          v14[v17] = v13[v17] * v14[v17];
        }
        ++v17;
      }

      while (a3 != v17);
    }

uint64_t sub_1452CC()
{
  return 5LL;
}

uint64_t sub_1452D4(uint64_t a1)
{
  if ((*(unsigned int (**)(void))(**(void **)(a1 + 16) + 40LL))(*(void *)(a1 + 16))
    && (***(double (****)(void))(a1 + 16))(*(void *)(a1 + 16)) == 0.0
    || (*(unsigned int (**)(void))(**(void **)(a1 + 24) + 40LL))(*(void *)(a1 + 24))
    && (***(double (****)(void))(a1 + 24))(*(void *)(a1 + 24)) == 0.0)
  {
    return 1LL;
  }

  else
  {
    return sub_14535C(a1);
  }

uint64_t sub_14535C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 40LL))(v2) & 1;
  }
  else {
    uint64_t result = 1LL;
  }
  uint64_t v4 = *(void *)(a1 + 24);
  if (v4) {
    BOOL v5 = (_DWORD)result == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5) {
    return (*(uint64_t (**)(void))(*(void *)v4 + 40LL))(*(void *)(a1 + 24)) & 1;
  }
  return result;
}

void *sub_1453BC(uint64_t a1, uint64_t a2)
{
  uint64_t v15 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 112LL))(*(void *)(a1 + 16));
  uint64_t v4 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 24) + 112LL))(*(void *)(a1 + 24), a2);
  uint64_t v5 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 120LL))(*(void *)(a1 + 16));
  uint64_t v6 = (*(uint64_t (**)(void))(**(void **)(a1 + 24) + 120LL))(*(void *)(a1 + 24));
  uint64_t v14 = v4;
  uint64_t v7 = sub_122A0C(0x20uLL);
  sub_144854(v7, v15, v6);
  *uint64_t v7 = off_255D78;
  uint64_t v8 = sub_122A0C(0x20uLL);
  uint64_t v9 = v5;
  uint64_t v10 = v8;
  sub_144854(v8, v9, v14);
  void *v10 = off_255D78;
  uint64_t v11 = (uint64_t)v10;
  uint64_t v12 = sub_122A0C(0x20uLL);
  sub_144854(v12, (uint64_t)v7, v11);
  void *v12 = off_255AF8;
  return v12;
}

void sub_145578( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, __int128 a13, uint64_t a14)
{
  uint64_t v17 = v15;
  if (v14) {
    free(v14);
  }
  if (a2 == 1)
  {
    int v20 = __cxa_begin_catch(exception_object);
    __int128 v22 = *(_OWORD *)v20;
    uint64_t v23 = *((void *)v20 + 2);
    if (v16) {
      (*(void (**)(uint64_t))(*(void *)v16 + 152LL))(v16);
    }
    if (v17) {
      (*(void (**)(uint64_t))(*(void *)v17 + 152LL))(v17);
    }
    exception = __cxa_allocate_exception(0x18uLL);
    *(_OWORD *)exception = v22;
    exception[2] = v23;
  }

  _Unwind_Resume(exception_object);
}

uint64_t sub_1456E8(uint64_t a1)
{
  if ((*(unsigned int (**)(void))(**(void **)(a1 + 16) + 40LL))(*(void *)(a1 + 16))
    && *(void *)(a1 + 8))
  {
    double v2 = (***(double (****)(void))(a1 + 16))(*(void *)(a1 + 16));
    if (v2 == 0.0)
    {
LABEL_4:
      uint64_t v3 = sub_122A0C(0x18uLL);
      v3[1] = 0LL;
      v3[2] = 0LL;
      *uint64_t v3 = off_24E1B0;
      return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 296LL))(a1);
    }

    if (v2 == 1.0)
    {
      uint64_t v5 = *(void *)(a1 + 24);
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 296LL))(a1, v5);
    }
  }

  if ((*(unsigned int (**)(void))(**(void **)(a1 + 24) + 40LL))(*(void *)(a1 + 24))
    && *(void *)(a1 + 8))
  {
    double v6 = (***(double (****)(void))(a1 + 24))(*(void *)(a1 + 24));
    if (v6 == 0.0) {
      goto LABEL_4;
    }
    if (v6 == 1.0)
    {
      uint64_t v5 = *(void *)(a1 + 16);
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 296LL))(a1, v5);
    }
  }

  uint64_t result = (*(uint64_t (**)(void, void))(**(void **)(a1 + 16) + 136LL))( *(void *)(a1 + 16),  *(void *)(a1 + 24));
  if ((_DWORD)result)
  {
    uint64_t v7 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 120LL))(*(void *)(a1 + 16));
    uint64_t v8 = sub_122A0C(0x18uLL);
    *uint64_t v8 = off_24E1B0;
    v8[1] = 0LL;
    v8[2] = 0x4000000000000000LL;
    uint64_t v9 = sub_122A0C(0x20uLL);
    sub_144854(v9, v7, (uint64_t)v8);
    *uint64_t v9 = &off_256138;
    return (*(uint64_t (**)(uint64_t, void *))(*(void *)a1 + 296LL))(a1, v9);
  }

  return result;
}

void sub_1458E0( void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  if (v20) {
    free(v20);
  }
  __cxa_begin_catch(a1);
  if (v18) {
    (*(void (**)(uint64_t))(*(void *)v18 + 152LL))(v18);
  }
  if (v19) {
    (*(void (**)(uint64_t))(*(void *)v19 + 152LL))(v19);
  }
  __cxa_end_catch();
}

void sub_14597C()
{
}

double sub_145990(double (****a1)(void))
{
  double v2 = (**a1[3])(a1[3]);
  if (v2 == 0.0) {
    ((void (*)(double (****)(void), uint64_t, double (****)(void), uint64_t))(*a1)[34])( a1,  1LL,  a1,  -1LL);
  }
  return (**a1[2])(a1[2]) / v2;
}

uint64_t sub_145A00(uint64_t a1, uint64_t a2)
{
  int v4 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 24LL))(*(void *)(a1 + 16));
  uint64_t v5 = **(void **)(a1 + 24);
  if (v4)
  {
    uint64_t v6 = (*(uint64_t (**)(void))(v5 + 8))();
    if (v6)
    {
      (***(void (****)(void))(a1 + 16))(*(void *)(a1 + 16));
      if ((int)a2 >= 1)
      {
        uint64_t v8 = 0LL;
        do
        {
          *(double *)(v6 + v_Block_object_dispose(va, 8) = v7 / *(double *)(v6 + v8);
          v8 += 8LL;
        }

        while (8LL * a2 != v8);
      }
    }

    return v6;
  }

  if ((*(unsigned int (**)(void))(v5 + 24))())
  {
    uint64_t v6 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 16) + 8LL))(*(void *)(a1 + 16), a2);
    if (v6)
    {
      (***(void (****)(void))(a1 + 24))(*(void *)(a1 + 24));
      if ((int)a2 >= 1)
      {
        uint64_t v10 = 0LL;
        do
        {
          *(double *)(v6 + v10) = *(double *)(v6 + v10) / v9;
          v10 += 8LL;
        }

        while (8LL * a2 != v10);
      }
    }

    return v6;
  }

  uint64_t v11 = (char *)(*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 24) + 8LL))(*(void *)(a1 + 24), a2);
  uint64_t v12 = (char *)(*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 16) + 8LL))(*(void *)(a1 + 16), a2);
  uint64_t v13 = v12;
  if (v12) {
    BOOL v14 = v11 == 0LL;
  }
  else {
    BOOL v14 = 1;
  }
  if (!v14)
  {
    if ((int)a2 >= 1)
    {
      uint64_t v15 = 0LL;
      do
      {
        *(double *)&v12[v15] = *(double *)&v12[v15] / *(double *)&v11[v15];
        v15 += 8LL;
      }

      while (8LL * a2 != v15);
    }

uint64_t sub_145B90(uint64_t a1, _BYTE *a2, uint64_t a3)
{
  int v6 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 24LL))(*(void *)(a1 + 16));
  uint64_t v7 = **(void **)(a1 + 24);
  if (v6)
  {
    uint64_t v8 = (*(uint64_t (**)(void))(v7 + 16))();
    if (v8)
    {
      (***(void (****)(void))(a1 + 16))(*(void *)(a1 + 16));
      if ((int)a3 >= 1)
      {
        uint64_t v10 = 0LL;
        do
        {
          if (!a2[v10])
          {
            double v11 = *(double *)(v8 + 8 * v10);
            if (v11 == 0.0) {
              a2[v10] = 1;
            }
            else {
              *(double *)(v8 + 8 * v10) = v9 / v11;
            }
          }

          ++v10;
        }

        while (a3 != v10);
      }
    }
  }

  else if ((*(unsigned int (**)(void))(v7 + 24))())
  {
    uint64_t v8 = (*(uint64_t (**)(void, _BYTE *, uint64_t))(**(void **)(a1 + 16) + 16LL))( *(void *)(a1 + 16),  a2,  a3);
    if (v8)
    {
      double v12 = (***(double (****)(void))(a1 + 24))(*(void *)(a1 + 24));
      if (v12 == 0.0)
      {
      }

      else if ((int)a3 >= 1)
      {
        uint64_t v13 = 0LL;
        do
        {
          if (!a2[v13]) {
            *(double *)(v8 + 8 * v13) = *(double *)(v8 + 8 * v13) / v12;
          }
          ++v13;
        }

        while (a3 != v13);
      }
    }
  }

  else
  {
    BOOL v14 = (void *)(*(uint64_t (**)(void, _BYTE *, uint64_t))(**(void **)(a1 + 24) + 16LL))( *(void *)(a1 + 24),  a2,  a3);
    uint64_t v15 = (void *)(*(uint64_t (**)(void, _BYTE *, uint64_t))(**(void **)(a1 + 16) + 16LL))( *(void *)(a1 + 16),  a2,  a3);
    uint64_t v8 = (uint64_t)v15;
    if (v15) {
      BOOL v16 = v14 == 0LL;
    }
    else {
      BOOL v16 = 1;
    }
    if (v16)
    {
      if (v15) {
        operator delete[](v15);
      }
      if (v14) {
        operator delete[](v14);
      }
      return 0LL;
    }

    else
    {
      if ((int)a3 >= 1)
      {
        uint64_t v17 = (double *)v14;
        uint64_t v18 = (double *)v15;
        uint64_t v19 = a3;
        do
        {
          if (!*a2)
          {
            if (*v17 == 0.0) {
              *a2 = 1;
            }
            else {
              *uint64_t v18 = *v18 / *v17;
            }
          }

          ++v18;
          ++v17;
          ++a2;
          --v19;
        }

        while (v19);
      }

      operator delete[](v14);
    }
  }

  return v8;
}

uint64_t sub_145DAC()
{
  return 6LL;
}

uint64_t sub_145DB4(uint64_t a1)
{
  if ((*(unsigned int (**)(void))(**(void **)(a1 + 16) + 40LL))(*(void *)(a1 + 16))
    && (***(double (****)(void))(a1 + 16))(*(void *)(a1 + 16)) == 0.0)
  {
    return 1LL;
  }

  else
  {
    return sub_14535C(a1);
  }

void *sub_145E10(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 112LL))(*(void *)(a1 + 16));
  uint64_t v5 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 24) + 112LL))(*(void *)(a1 + 24), a2);
  uint64_t v6 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 120LL))(*(void *)(a1 + 16));
  uint64_t v7 = (*(uint64_t (**)(void))(**(void **)(a1 + 24) + 120LL))(*(void *)(a1 + 24));
  uint64_t v8 = (*(uint64_t (**)(void))(**(void **)(a1 + 24) + 120LL))(*(void *)(a1 + 24));
  uint64_t v17 = v6;
  double v9 = sub_122A0C(0x20uLL);
  uint64_t v10 = sub_122A0C(0x18uLL);
  void *v10 = off_24E1B0;
  v10[1] = 0LL;
  v10[2] = 0x4000000000000000LL;
  sub_144854(v9, v8, (uint64_t)v10);
  *double v9 = &off_256138;
  uint64_t v11 = v4;
  double v12 = sub_122A0C(0x20uLL);
  sub_144854(v12, v11, v7);
  void *v12 = off_255D78;
  uint64_t v13 = sub_122A0C(0x20uLL);
  sub_144854(v13, v17, v5);
  *uint64_t v13 = off_255D78;
  BOOL v14 = sub_122A0C(0x20uLL);
  sub_144854(v14, (uint64_t)v12, (uint64_t)v13);
  *BOOL v14 = off_255C38;
  uint64_t v15 = sub_122A0C(0x20uLL);
  sub_144854(v15, (uint64_t)v14, (uint64_t)v9);
  void *v15 = off_255EB8;
  return v15;
}

void sub_1460C0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, __int128 a17, uint64_t a18)
{
  if (v18) {
    free(v18);
  }
  if (a2 == 1)
  {
    __int128 v22 = __cxa_begin_catch(exception_object);
    __int128 v24 = *(_OWORD *)v22;
    uint64_t v25 = *((void *)v22 + 2);
    if (v19) {
      (*(void (**)(uint64_t))(*(void *)v19 + 152LL))(v19);
    }
    if (a13) {
      (*(void (**)(void *))(*(void *)a13 + 152LL))(a13);
    }
    exception = __cxa_allocate_exception(0x18uLL);
    *(_OWORD *)exception = v24;
    exception[2] = v25;
  }

  _Unwind_Resume(exception_object);
}

uint64_t sub_1462C8(uint64_t a1)
{
  if ((*(unsigned int (**)(void))(**(void **)(a1 + 16) + 40LL))(*(void *)(a1 + 16))
    && (***(double (****)(void))(a1 + 16))(*(void *)(a1 + 16)) == 0.0)
  {
    double v2 = sub_122A0C(0x18uLL);
    v2[1] = 0LL;
    v2[2] = 0LL;
    void *v2 = off_24E1B0;
    return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 296LL))(a1);
  }

  else
  {
    uint64_t result = (*(uint64_t (**)(void, void))(**(void **)(a1 + 16) + 136LL))( *(void *)(a1 + 16),  *(void *)(a1 + 24));
    if ((_DWORD)result)
    {
      uint64_t v4 = sub_122A0C(0x18uLL);
      void *v4 = off_24E1B0;
      v4[1] = 0LL;
      int v4[2] = 0x3FF0000000000000LL;
      return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 296LL))(a1);
    }
  }

  return result;
}

void sub_146388(void *a1)
{
}

double sub_14639C(double (****a1)(void))
{
  double v2 = (**a1[3])(a1[3]);
  if (v2 == 0.0) {
    ((void (*)(double (****)(void), uint64_t, uint64_t, uint64_t))(*a1)[34])(a1, 1LL, -1LL, -1LL);
  }
  return (double)((uint64_t)(**a1[2])(a1[2]) % (uint64_t)v2);
}

uint64_t sub_14641C(uint64_t a1, uint64_t a2)
{
  int v4 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 24LL))(*(void *)(a1 + 16));
  uint64_t v5 = **(void **)(a1 + 24);
  if (v4)
  {
    uint64_t v6 = (*(uint64_t (**)(void))(v5 + 8))();
    if (v6)
    {
      (***(void (****)(void))(a1 + 16))(*(void *)(a1 + 16));
      if ((int)a2 >= 1)
      {
        uint64_t v8 = 0LL;
        do
        {
          *(double *)(v6 + v_Block_object_dispose(va, 8) = (double)((uint64_t)v7 % (uint64_t)*(double *)(v6 + v8));
          v8 += 8LL;
        }

        while (8LL * a2 != v8);
      }
    }

    return v6;
  }

  if ((*(unsigned int (**)(void))(v5 + 24))())
  {
    uint64_t v6 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 16) + 8LL))(*(void *)(a1 + 16), a2);
    if (v6)
    {
      (***(void (****)(void))(a1 + 24))(*(void *)(a1 + 24));
      if ((int)a2 >= 1)
      {
        uint64_t v10 = 0LL;
        do
        {
          *(double *)(v6 + v10) = (double)((uint64_t)*(double *)(v6 + v10) % (uint64_t)v9);
          v10 += 8LL;
        }

        while (8LL * a2 != v10);
      }
    }

    return v6;
  }

  uint64_t v11 = (char *)(*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 24) + 8LL))(*(void *)(a1 + 24), a2);
  double v12 = (char *)(*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 16) + 8LL))(*(void *)(a1 + 16), a2);
  uint64_t v13 = v12;
  if (v12) {
    BOOL v14 = v11 == 0LL;
  }
  else {
    BOOL v14 = 1;
  }
  if (!v14)
  {
    if ((int)a2 >= 1)
    {
      uint64_t v15 = 0LL;
      do
      {
        *(double *)&v12[v15] = (double)((uint64_t)*(double *)&v12[v15] % (uint64_t)*(double *)&v11[v15]);
        v15 += 8LL;
      }

      while (8LL * a2 != v15);
    }

uint64_t sub_1465DC(uint64_t a1, _BYTE *a2, uint64_t a3)
{
  int v6 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 24LL))(*(void *)(a1 + 16));
  uint64_t v7 = **(void **)(a1 + 24);
  if (v6)
  {
    uint64_t v8 = (*(uint64_t (**)(void))(v7 + 16))();
    if (v8)
    {
      (***(void (****)(void))(a1 + 16))(*(void *)(a1 + 16));
      if ((int)a3 >= 1)
      {
        uint64_t v10 = 0LL;
        uint64_t v11 = (uint64_t)v9;
        do
        {
          if (!a2[v10])
          {
            double v12 = *(double *)(v8 + 8 * v10);
            if (v12 == 0.0) {
              a2[v10] = 1;
            }
            else {
              *(double *)(v8 + 8 * v10) = (double)(v11 % (uint64_t)v12);
            }
          }

          ++v10;
        }

        while (a3 != v10);
      }
    }
  }

  else if ((*(unsigned int (**)(void))(v7 + 24))())
  {
    uint64_t v8 = (*(uint64_t (**)(void, _BYTE *, uint64_t))(**(void **)(a1 + 16) + 16LL))( *(void *)(a1 + 16),  a2,  a3);
    if (v8)
    {
      double v13 = (***(double (****)(void))(a1 + 24))(*(void *)(a1 + 24));
      if (v13 == 0.0)
      {
      }

      else if ((int)a3 >= 1)
      {
        uint64_t v14 = 0LL;
        do
        {
          if (!a2[v14]) {
            *(double *)(v8 + 8 * v14) = (double)((uint64_t)*(double *)(v8 + 8 * v14) % (uint64_t)v13);
          }
          ++v14;
        }

        while (a3 != v14);
      }
    }
  }

  else
  {
    uint64_t v15 = (void *)(*(uint64_t (**)(void, _BYTE *, uint64_t))(**(void **)(a1 + 24) + 16LL))( *(void *)(a1 + 24),  a2,  a3);
    BOOL v16 = (void *)(*(uint64_t (**)(void, _BYTE *, uint64_t))(**(void **)(a1 + 16) + 16LL))( *(void *)(a1 + 16),  a2,  a3);
    uint64_t v8 = (uint64_t)v16;
    if (v16) {
      BOOL v17 = v15 == 0LL;
    }
    else {
      BOOL v17 = 1;
    }
    if (v17)
    {
      if (v16) {
        operator delete[](v16);
      }
      if (v15) {
        operator delete[](v15);
      }
      return 0LL;
    }

    else
    {
      if ((int)a3 >= 1)
      {
        uint64_t v18 = (double *)v15;
        uint64_t v19 = (double *)v16;
        uint64_t v20 = a3;
        do
        {
          if (!*a2)
          {
            if (*v18 == 0.0) {
              *a2 = 1;
            }
            else {
              *uint64_t v19 = (double)((uint64_t)*v19 % (uint64_t)*v18);
            }
          }

          ++v19;
          ++v18;
          ++a2;
          --v20;
        }

        while (v20);
      }

      operator delete[](v15);
    }
  }

  return v8;
}

uint64_t sub_146828()
{
  return 7LL;
}

uint64_t sub_146830(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(void, void))(**(void **)(a1 + 16) + 136LL))( *(void *)(a1 + 16),  *(void *)(a1 + 24));
  if ((_DWORD)result)
  {
    uint64_t v3 = sub_122A0C(0x18uLL);
    v3[1] = 0LL;
    v3[2] = 0LL;
    *uint64_t v3 = off_24E1B0;
    return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 296LL))(a1);
  }

  return result;
}

void sub_146890(void *a1)
{
}

double sub_1468A0(uint64_t a1)
{
  double v2 = (***(double (****)(void))(a1 + 16))(*(void *)(a1 + 16));
  double v3 = (***(double (****)(void))(a1 + 24))(*(void *)(a1 + 24));
  double v4 = v3;
  if (v2 <= 0.0)
  {
    if (v2 == 0.0) {
      return 0.0;
    }
    double v4 = (double)(int)v3;
  }

  return pow(v2, v4);
}

double *sub_146918(uint64_t a1, uint64_t a2)
{
  int v4 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 24LL))(*(void *)(a1 + 16));
  uint64_t v5 = **(void **)(a1 + 24);
  if (v4)
  {
    int v6 = (double *)(*(uint64_t (**)(void))(v5 + 8))();
    if (v6)
    {
      double v7 = (***(double (****)(void))(a1 + 16))(*(void *)(a1 + 16));
      double v8 = v7;
      if (v7 <= 0.0)
      {
        if (v7 == 0.0)
        {
        }

        else if ((int)a2 >= 1)
        {
          unint64_t v21 = 0LL;
          uint64_t v22 = 8LL * a2;
          do
          {
            v6[v21 / 8] = pow(v8, (double)(uint64_t)v6[v21 / 8]);
            v21 += 8LL;
          }

          while (v22 != v21);
        }
      }

      else if ((int)a2 >= 1)
      {
        unint64_t v9 = 0LL;
        uint64_t v10 = 8LL * a2;
        do
        {
          v6[v9 / 8] = pow(v8, v6[v9 / 8]);
          v9 += 8LL;
        }

        while (v10 != v9);
      }
    }

    return v6;
  }

  if ((*(unsigned int (**)(void))(v5 + 24))())
  {
    int v6 = (double *)(*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 16) + 8LL))(*(void *)(a1 + 16), a2);
    if (v6)
    {
      (***(void (****)(void))(a1 + 24))(*(void *)(a1 + 24));
      if ((int)a2 >= 1)
      {
        double v12 = v11;
        unint64_t v13 = 0LL;
        double v14 = (double)(uint64_t)v11;
        uint64_t v15 = 8LL * a2;
        do
        {
          double v16 = v6[v13 / 8];
          double v17 = v12;
          if (v16 > 0.0 || (double v17 = v14, v16 < 0.0)) {
            v6[v13 / 8] = pow(v16, v17);
          }
          v13 += 8LL;
        }

        while (v15 != v13);
      }
    }

    return v6;
  }

  uint64_t v18 = (void *)(*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 24) + 8LL))(*(void *)(a1 + 24), a2);
  uint64_t v19 = (double *)(*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 16) + 8LL))(*(void *)(a1 + 16), a2);
  int v6 = v19;
  if (v19) {
    BOOL v20 = v18 == 0LL;
  }
  else {
    BOOL v20 = 1;
  }
  if (!v20)
  {
    if ((int)a2 < 1)
    {
LABEL_42:
      operator delete[](v18);
      return v6;
    }

    a2 = a2;
    uint64_t v23 = v19;
    __int128 v24 = (double *)v18;
    while (*v23 <= 0.0)
    {
      if (*v23 < 0.0)
      {
        double v25 = (double)(uint64_t)*v24;
        goto LABEL_40;
      }

uint64_t sub_146B60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 24LL))(*(void *)(a1 + 16));
  uint64_t v7 = **(void **)(a1 + 24);
  if (v6)
  {
    uint64_t v8 = (*(uint64_t (**)(void))(v7 + 16))();
    if (v8)
    {
      double v9 = (***(double (****)(void))(a1 + 16))(*(void *)(a1 + 16));
      double v10 = v9;
      if (v9 <= 0.0)
      {
        if (v9 == 0.0)
        {
          if ((int)a3 >= 1)
          {
            uint64_t v18 = 0LL;
            do
            {
              if (!*(_BYTE *)(a2 + v18)) {
                *(void *)(v8 + 8 * v1_Block_object_dispose(va, 8) = 0LL;
              }
              ++v18;
            }

            while (a3 != v18);
          }
        }

        else if ((int)a3 >= 1)
        {
          uint64_t v23 = 0LL;
          do
          {
            if (!*(_BYTE *)(a2 + v23)) {
              *(double *)(v8 + 8 * v23) = pow(v10, (double)(uint64_t)*(double *)(v8 + 8 * v23));
            }
            ++v23;
          }

          while (a3 != v23);
        }
      }

      else if ((int)a3 >= 1)
      {
        uint64_t v11 = 0LL;
        do
        {
          if (!*(_BYTE *)(a2 + v11)) {
            *(double *)(v8 + 8 * v11) = pow(v10, *(double *)(v8 + 8 * v11));
          }
          ++v11;
        }

        while (a3 != v11);
      }
    }

    return v8;
  }

  if ((*(unsigned int (**)(void))(v7 + 24))())
  {
    uint64_t v8 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 16) + 16LL))( *(void *)(a1 + 16),  a2,  a3);
    if (v8)
    {
      (***(void (****)(void))(a1 + 24))(*(void *)(a1 + 24));
      if ((int)a3 >= 1)
      {
        double v13 = v12;
        uint64_t v14 = 0LL;
        double v15 = (double)(uint64_t)v12;
        do
        {
          if (!*(_BYTE *)(a2 + v14))
          {
            double v16 = *(double *)(v8 + 8 * v14);
            double v17 = v13;
            if (v16 > 0.0 || (double v17 = v15, v16 < 0.0)) {
              *(double *)(v8 + 8 * v14) = pow(v16, v17);
            }
          }

          ++v14;
        }

        while (a3 != v14);
      }
    }

    return v8;
  }

  uint64_t v19 = (double *)(*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 24) + 16LL))( *(void *)(a1 + 24),  a2,  a3);
  BOOL v20 = (double *)(*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 16) + 16LL))( *(void *)(a1 + 16),  a2,  a3);
  unint64_t v21 = v20;
  if (v20) {
    BOOL v22 = v19 == 0LL;
  }
  else {
    BOOL v22 = 1;
  }
  if (!v22)
  {
    if ((int)a3 >= 1)
    {
      for (uint64_t i = 0LL; a3 != i; ++i)
      {
        if (!*(_BYTE *)(a2 + i))
        {
          double v25 = v21[i];
          if (v25 > 0.0)
          {
            double v26 = v19[i];
LABEL_49:
            v21[i] = pow(v25, v26);
            continue;
          }

          if (v25 < 0.0)
          {
            double v26 = (double)(uint64_t)v19[i];
            goto LABEL_49;
          }
        }
      }
    }

uint64_t sub_146DE8()
{
  return 8LL;
}

uint64_t sub_146DF0(uint64_t a1)
{
  if ((*(unsigned int (**)(void))(**(void **)(a1 + 16) + 40LL))(*(void *)(a1 + 16))
    && ((***(double (****)(void))(a1 + 16))(*(void *)(a1 + 16)) == 1.0
     || (***(double (****)(void))(a1 + 16))(*(void *)(a1 + 16)) == 0.0)
    || (*(unsigned int (**)(void))(**(void **)(a1 + 24) + 40LL))(*(void *)(a1 + 24))
    && (***(double (****)(void))(a1 + 24))(*(void *)(a1 + 24)) == 0.0)
  {
    return 1LL;
  }

  else
  {
    return sub_14535C(a1);
  }

void *sub_146E94(uint64_t a1, uint64_t a2)
{
  uint64_t v32 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 112LL))(*(void *)(a1 + 16));
  uint64_t v3 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 120LL))(*(void *)(a1 + 16));
  uint64_t v4 = (*(uint64_t (**)(void))(**(void **)(a1 + 24) + 120LL))(*(void *)(a1 + 24));
  uint64_t v29 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 24) + 112LL))(*(void *)(a1 + 24), a2);
  int v31 = sub_122A0C(0x18uLL);
  *int v31 = off_24E1B0;
  v31[1] = 0LL;
  v31[2] = 0x3FF0000000000000LL;
  uint64_t v5 = sub_122A0C(0x20uLL);
  uint64_t v27 = v3;
  uint64_t v28 = v4;
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 120LL))(v4);
  sub_144854(v5, v6, (uint64_t)v31);
  void *v5 = off_255C38;
  uint64_t v7 = sub_122A0C(0x20uLL);
  uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 120LL))(v3);
  sub_144854(v7, v8, (uint64_t)v5);
  *uint64_t v7 = &off_256138;
  uint64_t v9 = v4;
  double v10 = sub_122A0C(0x20uLL);
  uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 120LL))(v9);
  sub_144854(v10, v11, (uint64_t)v7);
  void *v10 = off_255D78;
  double v12 = sub_122A0C(0x20uLL);
  uint64_t v13 = (*(uint64_t (**)(uint64_t))(*(void *)v32 + 120LL))(v32);
  sub_144854(v12, v13, (uint64_t)v10);
  void *v12 = off_255D78;
  uint64_t v14 = v27;
  double v15 = sub_122A0C(0x18uLL);
  uint64_t v16 = (*(uint64_t (**)(uint64_t))(*(void *)v14 + 120LL))(v14);
  sub_13C978(v15, v16);
  void *v15 = &off_253188;
  double v17 = sub_122A0C(0x20uLL);
  uint64_t v18 = (*(uint64_t (**)(uint64_t))(*(void *)v14 + 120LL))(v14);
  sub_144854(v17, v18, (uint64_t)v15);
  *double v17 = &off_256138;
  uint64_t v19 = sub_122A0C(0x20uLL);
  uint64_t v20 = (*(uint64_t (**)(uint64_t))(*(void *)v29 + 120LL))(v29);
  sub_144854(v19, v20, (uint64_t)v17);
  *uint64_t v19 = off_255D78;
  unint64_t v21 = sub_122A0C(0x20uLL);
  uint64_t v22 = (*(uint64_t (**)(uint64_t))(*(void *)v27 + 120LL))(v27);
  uint64_t v23 = (*(uint64_t (**)(uint64_t))(*(void *)v28 + 120LL))(v28);
  sub_144854(v21, v22, v23);
  *unint64_t v21 = &off_256138;
  __int128 v24 = sub_122A0C(0x20uLL);
  sub_144854(v24, (uint64_t)v21, (uint64_t)v19);
  *__int128 v24 = off_255D78;
  double v25 = sub_122A0C(0x20uLL);
  sub_144854(v25, (uint64_t)v12, (uint64_t)v24);
  *double v25 = off_255AF8;
  (*(void (**)(uint64_t))(*(void *)v27 + 152LL))(v27);
  (*(void (**)(uint64_t))(*(void *)v28 + 152LL))(v28);
  (*(void (**)(uint64_t))(*(void *)v32 + 152LL))(v32);
  (*(void (**)(uint64_t))(*(void *)v29 + 152LL))(v29);
  return v25;
}

void sub_147344( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, _Unwind_Exception *exception_object, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, __int128 a17, uint64_t a18)
{
  if (v18) {
    free(v18);
  }
  if (a2 == 1)
  {
    uint64_t v20 = __cxa_begin_catch(a1);
    __int128 v24 = *(_OWORD *)v20;
    uint64_t v25 = *((void *)v20 + 2);
    if (a12) {
      (*(void (**)(uint64_t))(*(void *)a12 + 152LL))(a12);
    }
    if (a13) {
      (*(void (**)(uint64_t))(*(void *)a13 + 152LL))(a13);
    }
    if (a16) {
      (*(void (**)(uint64_t))(*(void *)a16 + 152LL))(a16);
    }
    if (a14) {
      (*(void (**)(uint64_t))(*(void *)a14 + 152LL))(a14);
    }
    if (a15) {
      (*(void (**)(void *))(*(void *)a15 + 152LL))(a15);
    }
    if (v19) {
      (*(void (**)(uint64_t))(*(void *)v19 + 152LL))(v19);
    }
    exception = __cxa_allocate_exception(0x18uLL);
    *(_OWORD *)exception = v24;
    exception[2] = v25;
  }

  _Unwind_Resume(a1);
}

void sub_147538(double (****a1)(void))
{
  if (((unsigned int (*)(double (***)(void)))(*a1[2])[5])(a1[2])
    && ((**a1[2])(a1[2]) == 1.0 || (**a1[2])(a1[2]) == 0.0))
  {
    double v2 = (double *)sub_122A0C(0x18uLL);
    double v3 = (**a1[2])(a1[2]);
    *(void *)double v2 = off_24E1B0;
    v2[1] = 0.0;
    v2[2] = v3;
    ((void (*)(double (****)(void), double *))(*a1)[37])(a1, v2);
  }

  else if (((unsigned int (*)(double (***)(void)))(*a1[3])[5])(a1[3]) {
         && (**a1[3])(a1[3]) == 0.0)
  }
  {
    uint64_t v4 = sub_122A0C(0x18uLL);
    void *v4 = off_24E1B0;
    v4[1] = 0LL;
    int v4[2] = 0x3FF0000000000000LL;
    ((void (*)(double (****)(void)))(*a1)[37])(a1);
  }

  else if (((unsigned int (*)(double (***)(void)))(*a1[3])[5])(a1[3]))
  {
    if ((**a1[3])(a1[3]) == 1.0) {
      ((void (*)(double (****)(void), double (***)(void)))(*a1)[37])(a1, a1[2]);
    }
  }

void sub_147690(void *a1)
{
}

void sub_1476C0(uint64_t a1)
{
}

uint64_t sub_147718(uint64_t a1, uint64_t a2)
{
  int v4 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 24LL))(*(void *)(a1 + 16));
  uint64_t v5 = **(void **)(a1 + 24);
  if (v4)
  {
    uint64_t v6 = (*(uint64_t (**)(void))(v5 + 8))();
    if (v6)
    {
      (***(void (****)(void))(a1 + 16))(*(void *)(a1 + 16));
      if ((int)a2 >= 1)
      {
        uint64_t v8 = 0LL;
        do
        {
          else {
            double v9 = 1.0;
          }
          *(double *)(v6 + v_Block_object_dispose(va, 8) = v9;
          v8 += 8LL;
        }

        while (8LL * a2 != v8);
      }
    }

    return v6;
  }

  if ((*(unsigned int (**)(void))(v5 + 24))())
  {
    uint64_t v6 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 16) + 8LL))(*(void *)(a1 + 16), a2);
    if (v6)
    {
      (***(void (****)(void))(a1 + 24))(*(void *)(a1 + 24));
      if ((int)a2 >= 1)
      {
        uint64_t v11 = 0LL;
        do
        {
          else {
            double v12 = 1.0;
          }
          *(double *)(v6 + v11) = v12;
          v11 += 8LL;
        }

        while (8LL * a2 != v11);
      }
    }

    return v6;
  }

  uint64_t v13 = (char *)(*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 24) + 8LL))(*(void *)(a1 + 24), a2);
  uint64_t v14 = (char *)(*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 16) + 8LL))(*(void *)(a1 + 16), a2);
  double v15 = v14;
  if (v14) {
    BOOL v16 = v13 == 0LL;
  }
  else {
    BOOL v16 = 1;
  }
  if (!v16)
  {
    if ((int)a2 >= 1)
    {
      uint64_t v17 = 0LL;
      do
      {
        else {
          double v18 = 1.0;
        }
        *(double *)&v14[v17] = v18;
        v17 += 8LL;
      }

      while (8LL * a2 != v17);
    }

uint64_t sub_1478CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 24LL))(*(void *)(a1 + 16));
  uint64_t v7 = **(void **)(a1 + 24);
  if (v6)
  {
    uint64_t v8 = (*(uint64_t (**)(void))(v7 + 16))();
    if (v8)
    {
      (***(void (****)(void))(a1 + 16))(*(void *)(a1 + 16));
      if ((int)a3 >= 1)
      {
        uint64_t v10 = 0LL;
        do
        {
          if (!*(_BYTE *)(a2 + v10))
          {
            else {
              double v11 = 1.0;
            }
            *(double *)(v8 + 8 * v10) = v11;
          }

          ++v10;
        }

        while (a3 != v10);
      }
    }

    return v8;
  }

  if ((*(unsigned int (**)(void))(v7 + 24))())
  {
    uint64_t v8 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 16) + 16LL))( *(void *)(a1 + 16),  a2,  a3);
    if (v8)
    {
      (***(void (****)(void))(a1 + 24))(*(void *)(a1 + 24));
      if ((int)a3 >= 1)
      {
        uint64_t v13 = 0LL;
        do
        {
          if (!*(_BYTE *)(a2 + v13))
          {
            else {
              double v14 = 1.0;
            }
            *(double *)(v8 + 8 * v13) = v14;
          }

          ++v13;
        }

        while (a3 != v13);
      }
    }

    return v8;
  }

  double v15 = (double *)(*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 24) + 16LL))( *(void *)(a1 + 24),  a2,  a3);
  BOOL v16 = (double *)(*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 16) + 16LL))( *(void *)(a1 + 16),  a2,  a3);
  uint64_t v17 = v16;
  if (v16) {
    BOOL v18 = v15 == 0LL;
  }
  else {
    BOOL v18 = 1;
  }
  if (!v18)
  {
    if ((int)a3 >= 1)
    {
      uint64_t v19 = 0LL;
      do
      {
        if (!*(_BYTE *)(a2 + v19))
        {
          if (v16[v19] >= v15[v19]) {
            double v20 = 0.0;
          }
          else {
            double v20 = 1.0;
          }
          v16[v19] = v20;
        }

        ++v19;
      }

      while (a3 != v19);
    }

uint64_t sub_147AB4()
{
  return 9LL;
}

uint64_t sub_147ABC(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(void, void))(**(void **)(a1 + 16) + 136LL))( *(void *)(a1 + 16),  *(void *)(a1 + 24));
  if ((_DWORD)result)
  {
    double v3 = sub_122A0C(0x18uLL);
    v3[1] = 0LL;
    v3[2] = 0LL;
    *double v3 = off_24E1B0;
    return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 296LL))(a1);
  }

  return result;
}

void sub_147B1C(void *a1)
{
}

void sub_147B2C(uint64_t a1)
{
}

uint64_t sub_147B84(uint64_t a1, uint64_t a2)
{
  int v4 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 24LL))(*(void *)(a1 + 16));
  uint64_t v5 = **(void **)(a1 + 24);
  if (v4)
  {
    uint64_t v6 = (*(uint64_t (**)(void))(v5 + 8))();
    if (v6)
    {
      (***(void (****)(void))(a1 + 16))(*(void *)(a1 + 16));
      if ((int)a2 >= 1)
      {
        uint64_t v8 = 0LL;
        do
        {
          else {
            double v9 = 1.0;
          }
          *(double *)(v6 + v_Block_object_dispose(va, 8) = v9;
          v8 += 8LL;
        }

        while (8LL * a2 != v8);
      }
    }

    return v6;
  }

  if ((*(unsigned int (**)(void))(v5 + 24))())
  {
    uint64_t v6 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 16) + 8LL))(*(void *)(a1 + 16), a2);
    if (v6)
    {
      (***(void (****)(void))(a1 + 24))(*(void *)(a1 + 24));
      if ((int)a2 >= 1)
      {
        uint64_t v11 = 0LL;
        do
        {
          else {
            double v12 = 1.0;
          }
          *(double *)(v6 + v11) = v12;
          v11 += 8LL;
        }

        while (8LL * a2 != v11);
      }
    }

    return v6;
  }

  uint64_t v13 = (char *)(*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 24) + 8LL))(*(void *)(a1 + 24), a2);
  double v14 = (char *)(*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 16) + 8LL))(*(void *)(a1 + 16), a2);
  double v15 = v14;
  if (v14) {
    BOOL v16 = v13 == 0LL;
  }
  else {
    BOOL v16 = 1;
  }
  if (!v16)
  {
    if ((int)a2 >= 1)
    {
      uint64_t v17 = 0LL;
      do
      {
        else {
          double v18 = 1.0;
        }
        *(double *)&v14[v17] = v18;
        v17 += 8LL;
      }

      while (8LL * a2 != v17);
    }

uint64_t sub_147D38(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 24LL))(*(void *)(a1 + 16));
  uint64_t v7 = **(void **)(a1 + 24);
  if (v6)
  {
    uint64_t v8 = (*(uint64_t (**)(void))(v7 + 16))();
    if (v8)
    {
      (***(void (****)(void))(a1 + 16))(*(void *)(a1 + 16));
      if ((int)a3 >= 1)
      {
        uint64_t v10 = 0LL;
        do
        {
          if (!*(_BYTE *)(a2 + v10))
          {
            else {
              double v11 = 1.0;
            }
            *(double *)(v8 + 8 * v10) = v11;
          }

          ++v10;
        }

        while (a3 != v10);
      }
    }

    return v8;
  }

  if ((*(unsigned int (**)(void))(v7 + 24))())
  {
    uint64_t v8 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 16) + 16LL))( *(void *)(a1 + 16),  a2,  a3);
    if (v8)
    {
      (***(void (****)(void))(a1 + 24))(*(void *)(a1 + 24));
      if ((int)a3 >= 1)
      {
        uint64_t v13 = 0LL;
        do
        {
          if (!*(_BYTE *)(a2 + v13))
          {
            else {
              double v14 = 1.0;
            }
            *(double *)(v8 + 8 * v13) = v14;
          }

          ++v13;
        }

        while (a3 != v13);
      }
    }

    return v8;
  }

  double v15 = (double *)(*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 24) + 16LL))( *(void *)(a1 + 24),  a2,  a3);
  BOOL v16 = (double *)(*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 16) + 16LL))( *(void *)(a1 + 16),  a2,  a3);
  uint64_t v17 = v16;
  if (v16) {
    BOOL v18 = v15 == 0LL;
  }
  else {
    BOOL v18 = 1;
  }
  if (!v18)
  {
    if ((int)a3 >= 1)
    {
      uint64_t v19 = 0LL;
      do
      {
        if (!*(_BYTE *)(a2 + v19))
        {
          if (v16[v19] <= v15[v19]) {
            double v20 = 0.0;
          }
          else {
            double v20 = 1.0;
          }
          v16[v19] = v20;
        }

        ++v19;
      }

      while (a3 != v19);
    }

uint64_t sub_147F20()
{
  return 10LL;
}

uint64_t sub_147F28(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(void, void))(**(void **)(a1 + 16) + 136LL))( *(void *)(a1 + 16),  *(void *)(a1 + 24));
  if ((_DWORD)result)
  {
    double v3 = sub_122A0C(0x18uLL);
    v3[1] = 0LL;
    v3[2] = 0LL;
    *double v3 = off_24E1B0;
    return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 296LL))(a1);
  }

  return result;
}

void sub_147F88(void *a1)
{
}

void sub_147F98(uint64_t a1)
{
}

uint64_t sub_147FF0(uint64_t a1, uint64_t a2)
{
  int v4 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 24LL))(*(void *)(a1 + 16));
  uint64_t v5 = **(void **)(a1 + 24);
  if (v4)
  {
    uint64_t v6 = (*(uint64_t (**)(void))(v5 + 8))();
    if (v6)
    {
      (***(void (****)(void))(a1 + 16))(*(void *)(a1 + 16));
      if ((int)a2 >= 1)
      {
        uint64_t v8 = 0LL;
        do
        {
          else {
            double v9 = 0.0;
          }
          *(double *)(v6 + v_Block_object_dispose(va, 8) = v9;
          v8 += 8LL;
        }

        while (8LL * a2 != v8);
      }
    }

    return v6;
  }

  if ((*(unsigned int (**)(void))(v5 + 24))())
  {
    uint64_t v6 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 16) + 8LL))(*(void *)(a1 + 16), a2);
    if (v6)
    {
      (***(void (****)(void))(a1 + 24))(*(void *)(a1 + 24));
      if ((int)a2 >= 1)
      {
        uint64_t v11 = 0LL;
        do
        {
          else {
            double v12 = 0.0;
          }
          *(double *)(v6 + v11) = v12;
          v11 += 8LL;
        }

        while (8LL * a2 != v11);
      }
    }

    return v6;
  }

  uint64_t v13 = (char *)(*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 24) + 8LL))(*(void *)(a1 + 24), a2);
  double v14 = (char *)(*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 16) + 8LL))(*(void *)(a1 + 16), a2);
  double v15 = v14;
  if (v14) {
    BOOL v16 = v13 == 0LL;
  }
  else {
    BOOL v16 = 1;
  }
  if (!v16)
  {
    if ((int)a2 >= 1)
    {
      uint64_t v17 = 0LL;
      do
      {
        else {
          double v18 = 0.0;
        }
        *(double *)&v14[v17] = v18;
        v17 += 8LL;
      }

      while (8LL * a2 != v17);
    }

uint64_t sub_1481A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 24LL))(*(void *)(a1 + 16));
  uint64_t v7 = **(void **)(a1 + 24);
  if (v6)
  {
    uint64_t v8 = (*(uint64_t (**)(void))(v7 + 16))();
    if (v8)
    {
      (***(void (****)(void))(a1 + 16))(*(void *)(a1 + 16));
      if ((int)a3 >= 1)
      {
        uint64_t v10 = 0LL;
        do
        {
          if (!*(_BYTE *)(a2 + v10))
          {
            else {
              double v11 = 0.0;
            }
            *(double *)(v8 + 8 * v10) = v11;
          }

          ++v10;
        }

        while (a3 != v10);
      }
    }

    return v8;
  }

  if ((*(unsigned int (**)(void))(v7 + 24))())
  {
    uint64_t v8 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 16) + 16LL))( *(void *)(a1 + 16),  a2,  a3);
    if (v8)
    {
      (***(void (****)(void))(a1 + 24))(*(void *)(a1 + 24));
      if ((int)a3 >= 1)
      {
        uint64_t v13 = 0LL;
        do
        {
          if (!*(_BYTE *)(a2 + v13))
          {
            else {
              double v14 = 0.0;
            }
            *(double *)(v8 + 8 * v13) = v14;
          }

          ++v13;
        }

        while (a3 != v13);
      }
    }

    return v8;
  }

  double v15 = (double *)(*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 24) + 16LL))( *(void *)(a1 + 24),  a2,  a3);
  BOOL v16 = (double *)(*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 16) + 16LL))( *(void *)(a1 + 16),  a2,  a3);
  uint64_t v17 = v16;
  if (v16) {
    BOOL v18 = v15 == 0LL;
  }
  else {
    BOOL v18 = 1;
  }
  if (!v18)
  {
    if ((int)a3 >= 1)
    {
      uint64_t v19 = 0LL;
      do
      {
        if (!*(_BYTE *)(a2 + v19))
        {
          if (v16[v19] == v15[v19]) {
            double v20 = 1.0;
          }
          else {
            double v20 = 0.0;
          }
          v16[v19] = v20;
        }

        ++v19;
      }

      while (a3 != v19);
    }

uint64_t sub_14838C()
{
  return 11LL;
}

uint64_t sub_148394(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(void, void))(**(void **)(a1 + 16) + 136LL))( *(void *)(a1 + 16),  *(void *)(a1 + 24));
  if ((_DWORD)result)
  {
    double v3 = sub_122A0C(0x18uLL);
    *double v3 = off_24E1B0;
    v3[1] = 0LL;
    v3[2] = 0x3FF0000000000000LL;
    return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 296LL))(a1);
  }

  return result;
}

void sub_1483F8(void *a1)
{
}

void sub_148408(uint64_t a1)
{
}

uint64_t sub_148460(uint64_t a1, uint64_t a2)
{
  int v4 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 24LL))(*(void *)(a1 + 16));
  uint64_t v5 = **(void **)(a1 + 24);
  if (v4)
  {
    uint64_t v6 = (*(uint64_t (**)(void))(v5 + 8))();
    if (v6)
    {
      (***(void (****)(void))(a1 + 16))(*(void *)(a1 + 16));
      if ((int)a2 >= 1)
      {
        uint64_t v8 = 0LL;
        do
        {
          else {
            double v9 = 1.0;
          }
          *(double *)(v6 + v_Block_object_dispose(va, 8) = v9;
          v8 += 8LL;
        }

        while (8LL * a2 != v8);
      }
    }

    return v6;
  }

  if ((*(unsigned int (**)(void))(v5 + 24))())
  {
    uint64_t v6 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 16) + 8LL))(*(void *)(a1 + 16), a2);
    if (v6)
    {
      (***(void (****)(void))(a1 + 24))(*(void *)(a1 + 24));
      if ((int)a2 >= 1)
      {
        uint64_t v11 = 0LL;
        do
        {
          else {
            double v12 = 1.0;
          }
          *(double *)(v6 + v11) = v12;
          v11 += 8LL;
        }

        while (8LL * a2 != v11);
      }
    }

    return v6;
  }

  uint64_t v13 = (char *)(*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 24) + 8LL))(*(void *)(a1 + 24), a2);
  double v14 = (char *)(*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 16) + 8LL))(*(void *)(a1 + 16), a2);
  double v15 = v14;
  if (v14) {
    BOOL v16 = v13 == 0LL;
  }
  else {
    BOOL v16 = 1;
  }
  if (!v16)
  {
    if ((int)a2 >= 1)
    {
      uint64_t v17 = 0LL;
      do
      {
        else {
          double v18 = 1.0;
        }
        *(double *)&v14[v17] = v18;
        v17 += 8LL;
      }

      while (8LL * a2 != v17);
    }

uint64_t sub_148614(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 24LL))(*(void *)(a1 + 16));
  uint64_t v7 = **(void **)(a1 + 24);
  if (v6)
  {
    uint64_t v8 = (*(uint64_t (**)(void))(v7 + 16))();
    if (v8)
    {
      (***(void (****)(void))(a1 + 16))(*(void *)(a1 + 16));
      if ((int)a3 >= 1)
      {
        uint64_t v10 = 0LL;
        do
        {
          if (!*(_BYTE *)(a2 + v10))
          {
            else {
              double v11 = 1.0;
            }
            *(double *)(v8 + 8 * v10) = v11;
          }

          ++v10;
        }

        while (a3 != v10);
      }
    }

    return v8;
  }

  if ((*(unsigned int (**)(void))(v7 + 24))())
  {
    uint64_t v8 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 16) + 16LL))( *(void *)(a1 + 16),  a2,  a3);
    if (v8)
    {
      (***(void (****)(void))(a1 + 24))(*(void *)(a1 + 24));
      if ((int)a3 >= 1)
      {
        uint64_t v13 = 0LL;
        do
        {
          if (!*(_BYTE *)(a2 + v13))
          {
            else {
              double v14 = 1.0;
            }
            *(double *)(v8 + 8 * v13) = v14;
          }

          ++v13;
        }

        while (a3 != v13);
      }
    }

    return v8;
  }

  double v15 = (double *)(*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 24) + 16LL))( *(void *)(a1 + 24),  a2,  a3);
  BOOL v16 = (double *)(*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 16) + 16LL))( *(void *)(a1 + 16),  a2,  a3);
  uint64_t v17 = v16;
  if (v16) {
    BOOL v18 = v15 == 0LL;
  }
  else {
    BOOL v18 = 1;
  }
  if (!v18)
  {
    if ((int)a3 >= 1)
    {
      uint64_t v19 = 0LL;
      do
      {
        if (!*(_BYTE *)(a2 + v19))
        {
          if (v16[v19] == v15[v19]) {
            double v20 = 0.0;
          }
          else {
            double v20 = 1.0;
          }
          v16[v19] = v20;
        }

        ++v19;
      }

      while (a3 != v19);
    }

uint64_t sub_1487FC()
{
  return 12LL;
}

uint64_t sub_148804(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(void, void))(**(void **)(a1 + 16) + 136LL))( *(void *)(a1 + 16),  *(void *)(a1 + 24));
  if ((_DWORD)result)
  {
    double v3 = sub_122A0C(0x18uLL);
    v3[1] = 0LL;
    v3[2] = 0LL;
    *double v3 = off_24E1B0;
    return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 296LL))(a1);
  }

  return result;
}

void sub_148864(void *a1)
{
}

void sub_148874(uint64_t a1)
{
}

uint64_t sub_1488CC(uint64_t a1, uint64_t a2)
{
  int v4 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 24LL))(*(void *)(a1 + 16));
  uint64_t v5 = **(void **)(a1 + 24);
  if (v4)
  {
    uint64_t v6 = (*(uint64_t (**)(void))(v5 + 8))();
    if (v6)
    {
      (***(void (****)(void))(a1 + 16))(*(void *)(a1 + 16));
      if ((int)a2 >= 1)
      {
        uint64_t v8 = 0LL;
        do
        {
          else {
            double v9 = 0.0;
          }
          *(double *)(v6 + v_Block_object_dispose(va, 8) = v9;
          v8 += 8LL;
        }

        while (8LL * a2 != v8);
      }
    }

    return v6;
  }

  if ((*(unsigned int (**)(void))(v5 + 24))())
  {
    uint64_t v6 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 16) + 8LL))(*(void *)(a1 + 16), a2);
    if (v6)
    {
      (***(void (****)(void))(a1 + 24))(*(void *)(a1 + 24));
      if ((int)a2 >= 1)
      {
        uint64_t v11 = 0LL;
        do
        {
          else {
            double v12 = 0.0;
          }
          *(double *)(v6 + v11) = v12;
          v11 += 8LL;
        }

        while (8LL * a2 != v11);
      }
    }

    return v6;
  }

  uint64_t v13 = (char *)(*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 24) + 8LL))(*(void *)(a1 + 24), a2);
  double v14 = (char *)(*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 16) + 8LL))(*(void *)(a1 + 16), a2);
  double v15 = v14;
  if (v14) {
    BOOL v16 = v13 == 0LL;
  }
  else {
    BOOL v16 = 1;
  }
  if (!v16)
  {
    if ((int)a2 >= 1)
    {
      uint64_t v17 = 0LL;
      do
      {
        else {
          double v18 = 0.0;
        }
        *(double *)&v14[v17] = v18;
        v17 += 8LL;
      }

      while (8LL * a2 != v17);
    }

uint64_t sub_148A80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 24LL))(*(void *)(a1 + 16));
  uint64_t v7 = **(void **)(a1 + 24);
  if (v6)
  {
    uint64_t v8 = (*(uint64_t (**)(void))(v7 + 16))();
    if (v8)
    {
      (***(void (****)(void))(a1 + 16))(*(void *)(a1 + 16));
      if ((int)a3 >= 1)
      {
        uint64_t v10 = 0LL;
        do
        {
          if (!*(_BYTE *)(a2 + v10))
          {
            else {
              double v11 = 0.0;
            }
            *(double *)(v8 + 8 * v10) = v11;
          }

          ++v10;
        }

        while (a3 != v10);
      }
    }

    return v8;
  }

  if ((*(unsigned int (**)(void))(v7 + 24))())
  {
    uint64_t v8 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 16) + 16LL))( *(void *)(a1 + 16),  a2,  a3);
    if (v8)
    {
      (***(void (****)(void))(a1 + 24))(*(void *)(a1 + 24));
      if ((int)a3 >= 1)
      {
        uint64_t v13 = 0LL;
        do
        {
          if (!*(_BYTE *)(a2 + v13))
          {
            else {
              double v14 = 0.0;
            }
            *(double *)(v8 + 8 * v13) = v14;
          }

          ++v13;
        }

        while (a3 != v13);
      }
    }

    return v8;
  }

  double v15 = (double *)(*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 24) + 16LL))( *(void *)(a1 + 24),  a2,  a3);
  BOOL v16 = (double *)(*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 16) + 16LL))( *(void *)(a1 + 16),  a2,  a3);
  uint64_t v17 = v16;
  if (v16) {
    BOOL v18 = v15 == 0LL;
  }
  else {
    BOOL v18 = 1;
  }
  if (!v18)
  {
    if ((int)a3 >= 1)
    {
      uint64_t v19 = 0LL;
      do
      {
        if (!*(_BYTE *)(a2 + v19))
        {
          if (v16[v19] <= v15[v19]) {
            double v20 = 1.0;
          }
          else {
            double v20 = 0.0;
          }
          v16[v19] = v20;
        }

        ++v19;
      }

      while (a3 != v19);
    }

uint64_t sub_148C68()
{
  return 13LL;
}

uint64_t sub_148C70(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(void, void))(**(void **)(a1 + 16) + 136LL))( *(void *)(a1 + 16),  *(void *)(a1 + 24));
  if ((_DWORD)result)
  {
    double v3 = sub_122A0C(0x18uLL);
    *double v3 = off_24E1B0;
    v3[1] = 0LL;
    v3[2] = 0x3FF0000000000000LL;
    return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 296LL))(a1);
  }

  return result;
}

void sub_148CD4(void *a1)
{
}

void sub_148CE4(uint64_t a1)
{
}

uint64_t sub_148D3C(uint64_t a1, uint64_t a2)
{
  int v4 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 24LL))(*(void *)(a1 + 16));
  uint64_t v5 = **(void **)(a1 + 24);
  if (v4)
  {
    uint64_t v6 = (*(uint64_t (**)(void))(v5 + 8))();
    if (v6)
    {
      (***(void (****)(void))(a1 + 16))(*(void *)(a1 + 16));
      if ((int)a2 >= 1)
      {
        uint64_t v8 = 0LL;
        do
        {
          else {
            double v9 = 0.0;
          }
          *(double *)(v6 + v_Block_object_dispose(va, 8) = v9;
          v8 += 8LL;
        }

        while (8LL * a2 != v8);
      }
    }

    return v6;
  }

  if ((*(unsigned int (**)(void))(v5 + 24))())
  {
    uint64_t v6 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 16) + 8LL))(*(void *)(a1 + 16), a2);
    if (v6)
    {
      (***(void (****)(void))(a1 + 24))(*(void *)(a1 + 24));
      if ((int)a2 >= 1)
      {
        uint64_t v11 = 0LL;
        do
        {
          else {
            double v12 = 0.0;
          }
          *(double *)(v6 + v11) = v12;
          v11 += 8LL;
        }

        while (8LL * a2 != v11);
      }
    }

    return v6;
  }

  uint64_t v13 = (char *)(*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 24) + 8LL))(*(void *)(a1 + 24), a2);
  double v14 = (char *)(*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 16) + 8LL))(*(void *)(a1 + 16), a2);
  double v15 = v14;
  if (v14) {
    BOOL v16 = v13 == 0LL;
  }
  else {
    BOOL v16 = 1;
  }
  if (!v16)
  {
    if ((int)a2 >= 1)
    {
      uint64_t v17 = 0LL;
      do
      {
        else {
          double v18 = 0.0;
        }
        *(double *)&v14[v17] = v18;
        v17 += 8LL;
      }

      while (8LL * a2 != v17);
    }

uint64_t sub_148EF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 24LL))(*(void *)(a1 + 16));
  uint64_t v7 = **(void **)(a1 + 24);
  if (v6)
  {
    uint64_t v8 = (*(uint64_t (**)(void))(v7 + 16))();
    if (v8)
    {
      (***(void (****)(void))(a1 + 16))(*(void *)(a1 + 16));
      if ((int)a3 >= 1)
      {
        uint64_t v10 = 0LL;
        do
        {
          if (!*(_BYTE *)(a2 + v10))
          {
            else {
              double v11 = 0.0;
            }
            *(double *)(v8 + 8 * v10) = v11;
          }

          ++v10;
        }

        while (a3 != v10);
      }
    }

    return v8;
  }

  if ((*(unsigned int (**)(void))(v7 + 24))())
  {
    uint64_t v8 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 16) + 16LL))( *(void *)(a1 + 16),  a2,  a3);
    if (v8)
    {
      (***(void (****)(void))(a1 + 24))(*(void *)(a1 + 24));
      if ((int)a3 >= 1)
      {
        uint64_t v13 = 0LL;
        do
        {
          if (!*(_BYTE *)(a2 + v13))
          {
            else {
              double v14 = 0.0;
            }
            *(double *)(v8 + 8 * v13) = v14;
          }

          ++v13;
        }

        while (a3 != v13);
      }
    }

    return v8;
  }

  double v15 = (double *)(*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 24) + 16LL))( *(void *)(a1 + 24),  a2,  a3);
  BOOL v16 = (double *)(*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 16) + 16LL))( *(void *)(a1 + 16),  a2,  a3);
  uint64_t v17 = v16;
  if (v16) {
    BOOL v18 = v15 == 0LL;
  }
  else {
    BOOL v18 = 1;
  }
  if (!v18)
  {
    if ((int)a3 >= 1)
    {
      uint64_t v19 = 0LL;
      do
      {
        if (!*(_BYTE *)(a2 + v19))
        {
          if (v16[v19] >= v15[v19]) {
            double v20 = 1.0;
          }
          else {
            double v20 = 0.0;
          }
          v16[v19] = v20;
        }

        ++v19;
      }

      while (a3 != v19);
    }

uint64_t sub_1490D8()
{
  return 14LL;
}

uint64_t sub_1490E0(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(void, void))(**(void **)(a1 + 16) + 136LL))( *(void *)(a1 + 16),  *(void *)(a1 + 24));
  if ((_DWORD)result)
  {
    double v3 = sub_122A0C(0x18uLL);
    *double v3 = off_24E1B0;
    v3[1] = 0LL;
    v3[2] = 0x3FF0000000000000LL;
    return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 296LL))(a1);
  }

  return result;
}

void sub_149144(void *a1)
{
}

double sub_149154(uint64_t a1)
{
  double v2 = (***(double (****)(void))(a1 + 24))(*(void *)(a1 + 24));
  double result = 1.0;
  if (v2 == 0.0) {
    return 0.0;
  }
  return result;
}

char *sub_1491AC(uint64_t a1, uint64_t a2)
{
  int v4 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 24LL))(*(void *)(a1 + 16));
  uint64_t v5 = **(void **)(a1 + 24);
  if (v4)
  {
    int v6 = (char *)(*(uint64_t (**)(void))(v5 + 8))();
    if (!v6) {
      return v6;
    }
    if ((***(double (****)(void))(a1 + 16))(*(void *)(a1 + 16)) != 0.0)
    {
      if ((int)a2 >= 1)
      {
        uint64_t v7 = 0LL;
        do
        {
          else {
            double v8 = 1.0;
          }
          *(double *)&v6[v7] = v8;
          v7 += 8LL;
        }

        while (8LL * a2 != v7);
      }

      return v6;
    }

    goto LABEL_14;
  }

  if ((*(unsigned int (**)(void))(v5 + 24))())
  {
    int v6 = (char *)(*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 16) + 8LL))(*(void *)(a1 + 16), a2);
    if (!v6) {
      return v6;
    }
    if ((***(double (****)(void))(a1 + 24))(*(void *)(a1 + 24)) == 0.0)
    {
LABEL_14:
      return v6;
    }

    if ((int)a2 >= 1)
    {
      uint64_t v16 = 0LL;
      do
      {
        else {
          double v17 = 1.0;
        }
        *(double *)&v6[v16] = v17;
        v16 += 8LL;
      }

      while (8LL * a2 != v16);
    }
  }

  else
  {
    double v9 = (void *)(*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 24) + 8LL))(*(void *)(a1 + 24), a2);
    uint64_t v10 = (char *)(*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 16) + 8LL))(*(void *)(a1 + 16), a2);
    int v6 = v10;
    if (v10) {
      BOOL v11 = v9 == 0LL;
    }
    else {
      BOOL v11 = 1;
    }
    if (v11)
    {
      if (v10) {
        operator delete[](v10);
      }
      if (v9) {
        operator delete[](v9);
      }
      return 0LL;
    }

    else
    {
      if ((int)a2 >= 1)
      {
        uint64_t v12 = a2;
        uint64_t v13 = (double *)v10;
        double v14 = (double *)v9;
        do
        {
          if (*v13 == 0.0 || (double v15 = 1.0, *v14 == 0.0)) {
            double v15 = 0.0;
          }
          *v13++ = v15;
          ++v14;
          --v12;
        }

        while (v12);
      }

      operator delete[](v9);
    }
  }

  return v6;
}

uint64_t sub_149394(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 24LL))(*(void *)(a1 + 16));
  uint64_t v7 = **(void **)(a1 + 24);
  if (v6)
  {
    uint64_t v8 = (*(uint64_t (**)(void))(v7 + 16))();
    if (v8)
    {
      if ((***(double (****)(void))(a1 + 16))(*(void *)(a1 + 16)) == 0.0)
      {
        if ((int)a3 >= 1)
        {
          uint64_t v9 = 0LL;
          do
          {
            if (!*(_BYTE *)(a2 + v9)) {
              *(void *)(v8 + 8 * v9) = 0LL;
            }
            ++v9;
          }

          while (a3 != v9);
        }
      }

      else if ((int)a3 >= 1)
      {
        uint64_t v11 = 0LL;
        do
        {
          if (!*(_BYTE *)(a2 + v11))
          {
            else {
              double v12 = 1.0;
            }
            *(double *)(v8 + 8 * v11) = v12;
          }

          ++v11;
        }

        while (a3 != v11);
      }
    }

    return v8;
  }

  if ((*(unsigned int (**)(void))(v7 + 24))())
  {
    uint64_t v8 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 16) + 16LL))( *(void *)(a1 + 16),  a2,  a3);
    if (v8)
    {
      if ((***(double (****)(void))(a1 + 24))(*(void *)(a1 + 24)) == 0.0)
      {
        if ((int)a3 >= 1)
        {
          uint64_t v10 = 0LL;
          do
          {
            if (!*(_BYTE *)(a2 + v10)) {
              *(void *)(v8 + 8 * v10) = 0LL;
            }
            ++v10;
          }

          while (a3 != v10);
        }
      }

      else if ((int)a3 >= 1)
      {
        uint64_t v19 = 0LL;
        do
        {
          if (!*(_BYTE *)(a2 + v19))
          {
            else {
              double v20 = 1.0;
            }
            *(double *)(v8 + 8 * v19) = v20;
          }

          ++v19;
        }

        while (a3 != v19);
      }
    }

    return v8;
  }

  uint64_t v13 = (double *)(*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 24) + 16LL))( *(void *)(a1 + 24),  a2,  a3);
  double v14 = (double *)(*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 16) + 16LL))( *(void *)(a1 + 16),  a2,  a3);
  double v15 = v14;
  if (v14) {
    BOOL v16 = v13 == 0LL;
  }
  else {
    BOOL v16 = 1;
  }
  if (!v16)
  {
    if ((int)a3 >= 1)
    {
      uint64_t v17 = 0LL;
      do
      {
        if (!*(_BYTE *)(a2 + v17))
        {
          if (v14[v17] == 0.0 || (double v18 = 1.0, v13[v17] == 0.0)) {
            double v18 = 0.0;
          }
          v14[v17] = v18;
        }

        ++v17;
      }

      while (a3 != v17);
    }

uint64_t sub_1495EC()
{
  return 15LL;
}

uint64_t sub_1495F4(uint64_t a1)
{
  if ((*(unsigned int (**)(void))(**(void **)(a1 + 16) + 40LL))(*(void *)(a1 + 16))
    && (***(double (****)(void))(a1 + 16))(*(void *)(a1 + 16)) == 0.0
    || (*(unsigned int (**)(void))(**(void **)(a1 + 24) + 40LL))(*(void *)(a1 + 24))
    && (***(double (****)(void))(a1 + 24))(*(void *)(a1 + 24)) == 0.0)
  {
    return 1LL;
  }

  else
  {
    return sub_14535C(a1);
  }

void sub_14967C(uint64_t a1)
{
  if ((*(unsigned int (**)(void))(**(void **)(a1 + 16) + 40LL))(*(void *)(a1 + 16)))
  {
    if ((***(double (****)(void))(a1 + 16))(*(void *)(a1 + 16)) == 0.0)
    {
      double v2 = (double *)sub_122A0C(0x18uLL);
      double v3 = 0.0;
    }

    else
    {
      double v2 = (double *)sub_122A0C(0x18uLL);
      double v3 = (**(double (***)(uint64_t))a1)(a1);
    }

    *(void *)double v2 = off_24E1B0;
    v2[1] = 0.0;
    v2[2] = v3;
    (*(void (**)(uint64_t, double *))(*(void *)a1 + 296LL))(a1, v2);
  }

  else if ((*(unsigned int (**)(void))(**(void **)(a1 + 24) + 40LL))(*(void *)(a1 + 24)))
  {
    if ((***(double (****)(void))(a1 + 24))(*(void *)(a1 + 24)) == 0.0)
    {
      int v4 = sub_122A0C(0x18uLL);
      v4[1] = 0LL;
      int v4[2] = 0LL;
      void *v4 = off_24E1B0;
      (*(void (**)(uint64_t))(*(void *)a1 + 296LL))(a1);
    }
  }

void sub_149794( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (v14) {
    free(v14);
  }
  if (a2 != 1) {
    _Unwind_Resume(a1);
  }
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

double sub_1497E8(uint64_t a1)
{
  double v2 = 1.0;
  if ((***(double (****)(void))(a1 + 16))(*(void *)(a1 + 16)) == 0.0
    && (***(double (****)(void))(a1 + 24))(*(void *)(a1 + 24)) == 0.0)
  {
    return 0.0;
  }

  return v2;
}

char *sub_149848(uint64_t a1, uint64_t a2)
{
  int v4 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 24LL))(*(void *)(a1 + 16));
  uint64_t v5 = **(void **)(a1 + 24);
  if (v4)
  {
    int v6 = (char *)(*(uint64_t (**)(void))(v5 + 8))();
    if (!v6) {
      return v6;
    }
    if ((***(double (****)(void))(a1 + 16))(*(void *)(a1 + 16)) == 0.0)
    {
      if ((int)a2 >= 1)
      {
        uint64_t v7 = 0LL;
        do
        {
          else {
            double v8 = 1.0;
          }
          *(double *)&v6[v7] = v8;
          v7 += 8LL;
        }

        while (8LL * a2 != v7);
      }

      return v6;
    }

    goto LABEL_14;
  }

  if ((*(unsigned int (**)(void))(v5 + 24))())
  {
    int v6 = (char *)(*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 16) + 8LL))(*(void *)(a1 + 16), a2);
    if (!v6) {
      return v6;
    }
    if ((***(double (****)(void))(a1 + 24))(*(void *)(a1 + 24)) != 0.0)
    {
LABEL_14:
      return v6;
    }

    if ((int)a2 >= 1)
    {
      uint64_t v16 = 0LL;
      do
      {
        else {
          double v17 = 1.0;
        }
        *(double *)&v6[v16] = v17;
        v16 += 8LL;
      }

      while (8LL * a2 != v16);
    }
  }

  else
  {
    uint64_t v9 = (void *)(*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 24) + 8LL))(*(void *)(a1 + 24), a2);
    uint64_t v10 = (char *)(*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 16) + 8LL))(*(void *)(a1 + 16), a2);
    int v6 = v10;
    if (v10) {
      BOOL v11 = v9 == 0LL;
    }
    else {
      BOOL v11 = 1;
    }
    if (v11)
    {
      if (v10) {
        operator delete[](v10);
      }
      if (v9) {
        operator delete[](v9);
      }
      return 0LL;
    }

    else
    {
      if ((int)a2 >= 1)
      {
        uint64_t v12 = a2;
        uint64_t v13 = (double *)v10;
        double v14 = (double *)v9;
        do
        {
          double v15 = 1.0;
          if (*v13 == 0.0 && *v14 == 0.0) {
            double v15 = 0.0;
          }
          *v13++ = v15;
          ++v14;
          --v12;
        }

        while (v12);
      }

      operator delete[](v9);
    }
  }

  return v6;
}

uint64_t sub_149A38(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 24LL))(*(void *)(a1 + 16));
  uint64_t v7 = **(void **)(a1 + 24);
  if (v6)
  {
    uint64_t v8 = (*(uint64_t (**)(void))(v7 + 16))();
    if (v8)
    {
      if ((***(double (****)(void))(a1 + 16))(*(void *)(a1 + 16)) == 0.0)
      {
        if ((int)a3 >= 1)
        {
          uint64_t v11 = 0LL;
          do
          {
            if (!*(_BYTE *)(a2 + v11))
            {
              else {
                double v12 = 1.0;
              }
              *(double *)(v8 + 8 * v11) = v12;
            }

            ++v11;
          }

          while (a3 != v11);
        }
      }

      else if ((int)a3 >= 1)
      {
        uint64_t v9 = 0LL;
        do
        {
          if (!*(_BYTE *)(a2 + v9)) {
            *(void *)(v8 + 8 * v9) = 0x3FF0000000000000LL;
          }
          ++v9;
        }

        while (a3 != v9);
      }
    }

    return v8;
  }

  if ((*(unsigned int (**)(void))(v7 + 24))())
  {
    uint64_t v8 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 16) + 16LL))( *(void *)(a1 + 16),  a2,  a3);
    if (v8)
    {
      if ((***(double (****)(void))(a1 + 24))(*(void *)(a1 + 24)) == 0.0)
      {
        if ((int)a3 >= 1)
        {
          uint64_t v19 = 0LL;
          do
          {
            if (!*(_BYTE *)(a2 + v19))
            {
              else {
                double v20 = 1.0;
              }
              *(double *)(v8 + 8 * v19) = v20;
            }

            ++v19;
          }

          while (a3 != v19);
        }
      }

      else if ((int)a3 >= 1)
      {
        uint64_t v10 = 0LL;
        do
        {
          if (!*(_BYTE *)(a2 + v10)) {
            *(void *)(v8 + 8 * v10) = 0x3FF0000000000000LL;
          }
          ++v10;
        }

        while (a3 != v10);
      }
    }

    return v8;
  }

  uint64_t v13 = (double *)(*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 24) + 16LL))( *(void *)(a1 + 24),  a2,  a3);
  double v14 = (double *)(*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 16) + 16LL))( *(void *)(a1 + 16),  a2,  a3);
  double v15 = v14;
  if (v14) {
    BOOL v16 = v13 == 0LL;
  }
  else {
    BOOL v16 = 1;
  }
  if (!v16)
  {
    if ((int)a3 >= 1)
    {
      uint64_t v17 = 0LL;
      do
      {
        if (!*(_BYTE *)(a2 + v17))
        {
          double v18 = 1.0;
          if (v14[v17] == 0.0 && v13[v17] == 0.0) {
            double v18 = 0.0;
          }
          v14[v17] = v18;
        }

        ++v17;
      }

      while (a3 != v17);
    }

uint64_t sub_149C98()
{
  return 16LL;
}

uint64_t sub_149CA0(uint64_t a1)
{
  if ((!(*(unsigned int (**)(void))(**(void **)(a1 + 16) + 40LL))(*(void *)(a1 + 16))
     || (***(double (****)(void))(a1 + 16))(*(void *)(a1 + 16)) == 0.0)
    && (!(*(unsigned int (**)(void))(**(void **)(a1 + 24) + 40LL))(*(void *)(a1 + 24))
     || (***(double (****)(void))(a1 + 24))(*(void *)(a1 + 24)) == 0.0))
  {
    return sub_14535C(a1);
  }

  else
  {
    return 1LL;
  }

void sub_149D28(uint64_t a1)
{
  if ((*(unsigned int (**)(void))(**(void **)(a1 + 16) + 40LL))(*(void *)(a1 + 16)))
  {
    if ((***(double (****)(void))(a1 + 24))(*(void *)(a1 + 24)) == 0.0)
    {
      double v2 = (double *)sub_122A0C(0x18uLL);
      double v3 = 0.0;
    }

    else
    {
LABEL_9:
      double v2 = (double *)sub_122A0C(0x18uLL);
      double v3 = 1.0;
    }

    *(void *)double v2 = off_24E1B0;
    v2[1] = 0.0;
    v2[2] = v3;
    (*(void (**)(uint64_t))(*(void *)a1 + 296LL))(a1);
  }

  else if ((*(unsigned int (**)(void))(**(void **)(a1 + 24) + 40LL))(*(void *)(a1 + 24)))
  {
    if ((***(double (****)(void))(a1 + 24))(*(void *)(a1 + 24)) != 0.0)
    {
      int v4 = sub_122A0C(0x18uLL);
      void *v4 = off_24E1B0;
      v4[1] = 0LL;
      int v4[2] = 0x3FF0000000000000LL;
      (*(void (**)(uint64_t))(*(void *)a1 + 296LL))(a1);
    }
  }

void sub_149E44(void *a1)
{
}

double sub_149E58(uint64_t a1)
{
  uint64_t v2 = (uint64_t)(***(double (****)(void))(a1 + 16))(*(void *)(a1 + 16));
  return (double)((uint64_t)(***(double (****)(void))(a1 + 24))(*(void *)(a1 + 24)) & v2);
}

uint64_t sub_149EA4(uint64_t a1, uint64_t a2)
{
  int v4 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 24LL))(*(void *)(a1 + 16));
  uint64_t v5 = **(void **)(a1 + 24);
  if (v4)
  {
    uint64_t v6 = (*(uint64_t (**)(void))(v5 + 8))();
    if (v6)
    {
      (***(void (****)(void))(a1 + 16))(*(void *)(a1 + 16));
      if ((int)a2 >= 1)
      {
        uint64_t v8 = 0LL;
        do
        {
          *(double *)(v6 + v_Block_object_dispose(va, 8) = (double)((uint64_t)*(double *)(v6 + v8) & (uint64_t)v7);
          v8 += 8LL;
        }

        while (8LL * a2 != v8);
      }
    }

    return v6;
  }

  if ((*(unsigned int (**)(void))(v5 + 24))())
  {
    uint64_t v6 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 16) + 8LL))(*(void *)(a1 + 16), a2);
    if (v6)
    {
      (***(void (****)(void))(a1 + 24))(*(void *)(a1 + 24));
      if ((int)a2 >= 1)
      {
        uint64_t v10 = 0LL;
        do
        {
          *(double *)(v6 + v10) = (double)((uint64_t)*(double *)(v6 + v10) & (uint64_t)v9);
          v10 += 8LL;
        }

        while (8LL * a2 != v10);
      }
    }

    return v6;
  }

  uint64_t v11 = (char *)(*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 24) + 8LL))(*(void *)(a1 + 24), a2);
  double v12 = (char *)(*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 16) + 8LL))(*(void *)(a1 + 16), a2);
  uint64_t v13 = v12;
  if (v12) {
    BOOL v14 = v11 == 0LL;
  }
  else {
    BOOL v14 = 1;
  }
  if (!v14)
  {
    if ((int)a2 >= 1)
    {
      uint64_t v15 = 0LL;
      do
      {
        *(double *)&v12[v15] = (double)((uint64_t)*(double *)&v11[v15] & (uint64_t)*(double *)&v12[v15]);
        v15 += 8LL;
      }

      while (8LL * a2 != v15);
    }

uint64_t sub_14A058(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 24LL))(*(void *)(a1 + 16));
  uint64_t v7 = **(void **)(a1 + 24);
  if (v6)
  {
    uint64_t v8 = (*(uint64_t (**)(void))(v7 + 16))();
    if (v8)
    {
      (***(void (****)(void))(a1 + 16))(*(void *)(a1 + 16));
      if ((int)a3 >= 1)
      {
        uint64_t v10 = 0LL;
        do
        {
          if (!*(_BYTE *)(a2 + v10)) {
            *(double *)(v8 + 8 * v10) = (double)((uint64_t)*(double *)(v8 + 8 * v10) & (uint64_t)v9);
          }
          ++v10;
        }

        while (a3 != v10);
      }
    }

    return v8;
  }

  if ((*(unsigned int (**)(void))(v7 + 24))())
  {
    uint64_t v8 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 16) + 16LL))( *(void *)(a1 + 16),  a2,  a3);
    if (v8)
    {
      (***(void (****)(void))(a1 + 24))(*(void *)(a1 + 24));
      if ((int)a3 >= 1)
      {
        uint64_t v12 = 0LL;
        do
        {
          if (!*(_BYTE *)(a2 + v12)) {
            *(double *)(v8 + 8 * v12) = (double)((uint64_t)*(double *)(v8 + 8 * v12) & (uint64_t)v11);
          }
          ++v12;
        }

        while (a3 != v12);
      }
    }

    return v8;
  }

  uint64_t v13 = (double *)(*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 24) + 16LL))( *(void *)(a1 + 24),  a2,  a3);
  BOOL v14 = (double *)(*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 16) + 16LL))( *(void *)(a1 + 16),  a2,  a3);
  uint64_t v15 = v14;
  if (v14) {
    BOOL v16 = v13 == 0LL;
  }
  else {
    BOOL v16 = 1;
  }
  if (!v16)
  {
    if ((int)a3 >= 1)
    {
      uint64_t v17 = 0LL;
      do
      {
        if (!*(_BYTE *)(a2 + v17)) {
          v14[v17] = (double)((uint64_t)v13[v17] & (uint64_t)v14[v17]);
        }
        ++v17;
      }

      while (a3 != v17);
    }

uint64_t sub_14A240()
{
  return 18LL;
}

uint64_t sub_14A248(uint64_t a1)
{
  if ((*(unsigned int (**)(void))(**(void **)(a1 + 16) + 40LL))(*(void *)(a1 + 16))
    && (***(double (****)(void))(a1 + 16))(*(void *)(a1 + 16)) == 0.0
    || (*(unsigned int (**)(void))(**(void **)(a1 + 24) + 40LL))(*(void *)(a1 + 24))
    && (***(double (****)(void))(a1 + 24))(*(void *)(a1 + 24)) == 0.0)
  {
    return 1LL;
  }

  else
  {
    return sub_14535C(a1);
  }

void sub_14A2D0(uint64_t a1)
{
  uint64_t v2 = (void *)(a1 + 16);
  double v3 = (void *)(a1 + 24);
  if ((*(unsigned int (**)(void, void))(**(void **)(a1 + 16) + 136LL))( *(void *)(a1 + 16),  *(void *)(a1 + 24)))
  {
    goto LABEL_2;
  }

  if ((*(unsigned int (**)(void))(*(void *)*v2 + 40LL))(*v2)
    && (**(double (***)(void))*v2)(*v2) == 0.0
    || (*(unsigned int (**)(void))(*(void *)*v3 + 40LL))(*v3)
    && (**(double (***)(void))*v3)(*v3) == 0.0)
  {
    int v4 = sub_122A0C(0x18uLL);
    v4[1] = 0LL;
    int v4[2] = 0LL;
    void *v4 = off_24E1B0;
    (*(void (**)(uint64_t))(*(void *)a1 + 296LL))(a1);
  }

  else
  {
    if ((*(unsigned int (**)(void))(*(void *)*v2 + 40LL))(*v2)
      && (**(double (***)(void))*v2)(*v2) == -1.0)
    {
LABEL_2:
      uint64_t v2 = (void *)(a1 + 24);
LABEL_3:
      (*(void (**)(uint64_t, void))(*(void *)a1 + 296LL))(a1, *v2);
      return;
    }

    if ((*(unsigned int (**)(void))(*(void *)*v3 + 40LL))(*v3)
      && (**(double (***)(void))*v3)(*v3) == -1.0)
    {
      goto LABEL_3;
    }
  }

void sub_14A41C(void *a1)
{
}

double sub_14A430(uint64_t a1)
{
  uint64_t v2 = (uint64_t)(***(double (****)(void))(a1 + 16))(*(void *)(a1 + 16));
  return (double)((uint64_t)(***(double (****)(void))(a1 + 24))(*(void *)(a1 + 24)) | v2);
}

uint64_t sub_14A47C(uint64_t a1, uint64_t a2)
{
  int v4 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 24LL))(*(void *)(a1 + 16));
  uint64_t v5 = **(void **)(a1 + 24);
  if (v4)
  {
    uint64_t v6 = (*(uint64_t (**)(void))(v5 + 8))();
    if (v6)
    {
      (***(void (****)(void))(a1 + 16))(*(void *)(a1 + 16));
      if ((int)a2 >= 1)
      {
        uint64_t v8 = 0LL;
        do
        {
          *(double *)(v6 + v_Block_object_dispose(va, 8) = (double)((uint64_t)*(double *)(v6 + v8) | (uint64_t)v7);
          v8 += 8LL;
        }

        while (8LL * a2 != v8);
      }
    }

    return v6;
  }

  if ((*(unsigned int (**)(void))(v5 + 24))())
  {
    uint64_t v6 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 16) + 8LL))(*(void *)(a1 + 16), a2);
    if (v6)
    {
      (***(void (****)(void))(a1 + 24))(*(void *)(a1 + 24));
      if ((int)a2 >= 1)
      {
        uint64_t v10 = 0LL;
        do
        {
          *(double *)(v6 + v10) = (double)((uint64_t)*(double *)(v6 + v10) | (uint64_t)v9);
          v10 += 8LL;
        }

        while (8LL * a2 != v10);
      }
    }

    return v6;
  }

  double v11 = (char *)(*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 24) + 8LL))(*(void *)(a1 + 24), a2);
  uint64_t v12 = (char *)(*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 16) + 8LL))(*(void *)(a1 + 16), a2);
  uint64_t v13 = v12;
  if (v12) {
    BOOL v14 = v11 == 0LL;
  }
  else {
    BOOL v14 = 1;
  }
  if (!v14)
  {
    if ((int)a2 >= 1)
    {
      uint64_t v15 = 0LL;
      do
      {
        *(double *)&v12[v15] = (double)((uint64_t)*(double *)&v11[v15] | (uint64_t)*(double *)&v12[v15]);
        v15 += 8LL;
      }

      while (8LL * a2 != v15);
    }

uint64_t sub_14A630(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 24LL))(*(void *)(a1 + 16));
  uint64_t v7 = **(void **)(a1 + 24);
  if (v6)
  {
    uint64_t v8 = (*(uint64_t (**)(void))(v7 + 16))();
    if (v8)
    {
      (***(void (****)(void))(a1 + 16))(*(void *)(a1 + 16));
      if ((int)a3 >= 1)
      {
        uint64_t v10 = 0LL;
        do
        {
          if (!*(_BYTE *)(a2 + v10)) {
            *(double *)(v8 + 8 * v10) = (double)((uint64_t)*(double *)(v8 + 8 * v10) | (uint64_t)v9);
          }
          ++v10;
        }

        while (a3 != v10);
      }
    }

    return v8;
  }

  if ((*(unsigned int (**)(void))(v7 + 24))())
  {
    uint64_t v8 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 16) + 16LL))( *(void *)(a1 + 16),  a2,  a3);
    if (v8)
    {
      (***(void (****)(void))(a1 + 24))(*(void *)(a1 + 24));
      if ((int)a3 >= 1)
      {
        uint64_t v12 = 0LL;
        do
        {
          if (!*(_BYTE *)(a2 + v12)) {
            *(double *)(v8 + 8 * v12) = (double)((uint64_t)*(double *)(v8 + 8 * v12) | (uint64_t)v11);
          }
          ++v12;
        }

        while (a3 != v12);
      }
    }

    return v8;
  }

  uint64_t v13 = (double *)(*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 24) + 16LL))( *(void *)(a1 + 24),  a2,  a3);
  BOOL v14 = (double *)(*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 16) + 16LL))( *(void *)(a1 + 16),  a2,  a3);
  uint64_t v15 = v14;
  if (v14) {
    BOOL v16 = v13 == 0LL;
  }
  else {
    BOOL v16 = 1;
  }
  if (!v16)
  {
    if ((int)a3 >= 1)
    {
      uint64_t v17 = 0LL;
      do
      {
        if (!*(_BYTE *)(a2 + v17)) {
          v14[v17] = (double)((uint64_t)v13[v17] | (uint64_t)v14[v17]);
        }
        ++v17;
      }

      while (a3 != v17);
    }

uint64_t sub_14A818()
{
  return 19LL;
}

uint64_t sub_14A820(uint64_t a1)
{
  if ((*(unsigned int (**)(void))(**(void **)(a1 + 16) + 40LL))(*(void *)(a1 + 16))
    && (***(double (****)(void))(a1 + 16))(*(void *)(a1 + 16)) == -1.0
    || (*(unsigned int (**)(void))(**(void **)(a1 + 24) + 40LL))(*(void *)(a1 + 24))
    && (***(double (****)(void))(a1 + 24))(*(void *)(a1 + 24)) == -1.0)
  {
    return 1LL;
  }

  else
  {
    return sub_14535C(a1);
  }

void sub_14A8B0(uint64_t a1)
{
  uint64_t v2 = (void *)(a1 + 16);
  if ((*(unsigned int (**)(void))(**(void **)(a1 + 16) + 40LL))(*(void *)(a1 + 16))
    && (**(double (***)(void))*v2)(*v2) == -1.0)
  {
    double v3 = (double *)sub_122A0C(0x18uLL);
    (***(void (****)(void))(a1 + 24))(*(void *)(a1 + 24));
LABEL_7:
    *(void *)double v3 = off_24E1B0;
    v3[1] = 0.0;
    v3[2] = v4;
    (*(void (**)(uint64_t, double *))(*(void *)a1 + 296LL))(a1, v3);
    return;
  }

  uint64_t v5 = (void *)(a1 + 24);
  if ((*(unsigned int (**)(void))(**(void **)(a1 + 24) + 40LL))(*(void *)(a1 + 24))
    && (**(double (***)(void))*v5)(*v5) == -1.0)
  {
    double v3 = (double *)sub_122A0C(0x18uLL);
    double v4 = (**(double (***)(void))*v2)(*v2);
    goto LABEL_7;
  }

  if ((*(unsigned int (**)(void))(*(void *)*v2 + 40LL))(*v2)
    && (**(double (***)(void))*v2)(*v2) == 0.0)
  {
    uint64_t v2 = (void *)(a1 + 24);
LABEL_13:
    (*(void (**)(uint64_t, void))(*(void *)a1 + 296LL))(a1, *v2);
    return;
  }

  if ((*(unsigned int (**)(void))(*(void *)*v5 + 40LL))(*v5)
    && (**(double (***)(void))*v5)(*v5) == 0.0)
  {
    goto LABEL_13;
  }

void sub_14AA18( void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (v14) {
    free(v14);
  }
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

double sub_14AA4C(uint64_t a1)
{
  uint64_t v2 = (uint64_t)(***(double (****)(void))(a1 + 16))(*(void *)(a1 + 16));
  return (double)((uint64_t)(***(double (****)(void))(a1 + 24))(*(void *)(a1 + 24)) ^ v2);
}

uint64_t sub_14AA98(uint64_t a1, uint64_t a2)
{
  int v4 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 24LL))(*(void *)(a1 + 16));
  uint64_t v5 = **(void **)(a1 + 24);
  if (v4)
  {
    uint64_t v6 = (*(uint64_t (**)(void))(v5 + 8))();
    if (v6)
    {
      (***(void (****)(void))(a1 + 16))(*(void *)(a1 + 16));
      if ((int)a2 >= 1)
      {
        uint64_t v8 = 0LL;
        do
        {
          *(double *)(v6 + v_Block_object_dispose(va, 8) = (double)((uint64_t)*(double *)(v6 + v8) ^ (uint64_t)v7);
          v8 += 8LL;
        }

        while (8LL * a2 != v8);
      }
    }

    return v6;
  }

  if ((*(unsigned int (**)(void))(v5 + 24))())
  {
    uint64_t v6 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 16) + 8LL))(*(void *)(a1 + 16), a2);
    if (v6)
    {
      (***(void (****)(void))(a1 + 24))(*(void *)(a1 + 24));
      if ((int)a2 >= 1)
      {
        uint64_t v10 = 0LL;
        do
        {
          *(double *)(v6 + v10) = (double)((uint64_t)*(double *)(v6 + v10) ^ (uint64_t)v9);
          v10 += 8LL;
        }

        while (8LL * a2 != v10);
      }
    }

    return v6;
  }

  double v11 = (char *)(*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 24) + 8LL))(*(void *)(a1 + 24), a2);
  uint64_t v12 = (char *)(*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 16) + 8LL))(*(void *)(a1 + 16), a2);
  uint64_t v13 = v12;
  if (v12) {
    BOOL v14 = v11 == 0LL;
  }
  else {
    BOOL v14 = 1;
  }
  if (!v14)
  {
    if ((int)a2 >= 1)
    {
      uint64_t v15 = 0LL;
      do
      {
        *(double *)&v12[v15] = (double)((uint64_t)*(double *)&v11[v15] ^ (uint64_t)*(double *)&v12[v15]);
        v15 += 8LL;
      }

      while (8LL * a2 != v15);
    }

uint64_t sub_14AC4C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 24LL))(*(void *)(a1 + 16));
  uint64_t v7 = **(void **)(a1 + 24);
  if (v6)
  {
    uint64_t v8 = (*(uint64_t (**)(void))(v7 + 16))();
    if (v8)
    {
      (***(void (****)(void))(a1 + 16))(*(void *)(a1 + 16));
      if ((int)a3 >= 1)
      {
        uint64_t v10 = 0LL;
        do
        {
          if (!*(_BYTE *)(a2 + v10)) {
            *(double *)(v8 + 8 * v10) = (double)((uint64_t)*(double *)(v8 + 8 * v10) ^ (uint64_t)v9);
          }
          ++v10;
        }

        while (a3 != v10);
      }
    }

    return v8;
  }

  if ((*(unsigned int (**)(void))(v7 + 24))())
  {
    uint64_t v8 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 16) + 16LL))( *(void *)(a1 + 16),  a2,  a3);
    if (v8)
    {
      (***(void (****)(void))(a1 + 24))(*(void *)(a1 + 24));
      if ((int)a3 >= 1)
      {
        uint64_t v12 = 0LL;
        do
        {
          if (!*(_BYTE *)(a2 + v12)) {
            *(double *)(v8 + 8 * v12) = (double)((uint64_t)*(double *)(v8 + 8 * v12) ^ (uint64_t)v11);
          }
          ++v12;
        }

        while (a3 != v12);
      }
    }

    return v8;
  }

  uint64_t v13 = (double *)(*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 24) + 16LL))( *(void *)(a1 + 24),  a2,  a3);
  BOOL v14 = (double *)(*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 16) + 16LL))( *(void *)(a1 + 16),  a2,  a3);
  uint64_t v15 = v14;
  if (v14) {
    BOOL v16 = v13 == 0LL;
  }
  else {
    BOOL v16 = 1;
  }
  if (!v16)
  {
    if ((int)a3 >= 1)
    {
      uint64_t v17 = 0LL;
      do
      {
        if (!*(_BYTE *)(a2 + v17)) {
          v14[v17] = (double)((uint64_t)v13[v17] ^ (uint64_t)v14[v17]);
        }
        ++v17;
      }

      while (a3 != v17);
    }

uint64_t sub_14AE34()
{
  return 20LL;
}

void sub_14AE3C(void **a1)
{
  uint64_t v2 = a1 + 2;
  if ((*(unsigned int (**)(void *))(*a1[2] + 40LL))(a1[2])
    && (**(double (***)(void))*v2)(*v2) == 0.0)
  {
    uint64_t v2 = a1 + 3;
LABEL_6:
    ((void (*)(void **, void))(*a1)[37])(a1, *v2);
    return;
  }

  if ((*(unsigned int (**)(void *))(*a1[3] + 40LL))(a1[3])
    && (*(double (**)(void *))*a1[3])(a1[3]) == 0.0)
  {
    goto LABEL_6;
  }

void sub_14AED4(void *a1)
{
}

uint64_t sub_14AEE4(uint64_t a1)
{
  BOOL v2 = (***(double (****)(void))(a1 + 16))(*(void *)(a1 + 16)) != 0.0;
  return (*(uint64_t (**)(void, BOOL))(**(void **)(a1 + 24) + 304LL))(*(void *)(a1 + 24), v2);
}

uint64_t sub_14AF24(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void, void, uint64_t))(**(void **)(a1 + 24) + 312LL))( *(void *)(a1 + 24),  *(void *)(a1 + 16),  a2);
}

uint64_t sub_14AF3C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void, void, uint64_t, uint64_t))(**(void **)(a1 + 24) + 320LL))( *(void *)(a1 + 24),  *(void *)(a1 + 16),  a2,  a3);
}

uint64_t sub_14AF58()
{
  return 23LL;
}

void *sub_14AF60(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 120LL))(*(void *)(a1 + 16));
  uint64_t v5 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 24) + 112LL))(*(void *)(a1 + 24), a2);
  int v6 = sub_122A0C(0x20uLL);
  sub_14B288(v6, v4, v5);
  return v6;
}

void sub_14AFF0(_Unwind_Exception *exception_object, int a2)
{
  int v6 = v4;
  if (v6) {
    free(v6);
  }
  if (a2 == 1)
  {
    __cxa_begin_catch(exception_object);
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 152LL))(v2);
    }
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 152LL))(v3);
    }
    __cxa_end_catch();
    JUMPOUT(0x14AFD8LL);
  }

  _Unwind_Resume(exception_object);
}

void *sub_14B074(uint64_t a1)
{
  double result = *(void **)(a1 + 24);
  if (result)
  {
    if (result)
    {
      uint64_t v3 = result;
      if ((*(unsigned int (**)(void))(**(void **)(a1 + 16) + 40LL))(*(void *)(a1 + 16))
        && (uint64_t v4 = *(void *)(a1 + 8)) != 0)
      {
        BOOL v5 = (***(double (****)(void))(a1 + 16))(*(void *)(a1 + 16)) == 0.0;
        v6.n128_u64[0] = 0LL;
        if (!v5) {
          v6.n128_f64[0] = 1.0;
        }
        return (void *)(*(uint64_t (**)(void *, uint64_t, __n128))(*(void *)v3 + 328LL))(v3, v4, v6);
      }

      else
      {
        double result = (void *)(*(uint64_t (**)(void *))(*(void *)v3 + 336LL))(v3);
        if ((_DWORD)result)
        {
          v7.n128_u64[0] = 1.0;
          return (void *)(*(uint64_t (**)(void *, void, __n128))(*(void *)v3 + 328LL))( v3,  *(void *)(a1 + 8),  v7);
        }
      }
    }
  }

  return result;
}

uint64_t *sub_14B14C(uint64_t *a1, uint64_t *a2, const double *a3)
{
  BOOL v5 = sub_144730(a1, a2, (uint64_t)a3);
  uint64_t *v5 = (uint64_t)off_257068;
  __n128 v6 = (const void *)v5[3];
  if (!v6
  {
    LODWORD(xmmword_2B0AD0) = 28;
    int64x2_t v9 = (int64x2_t)vld1q_dup_f64(a3);
    uint64_t v8 = (int64x2_t *)(a3 + 1);
    *(__int128 *)((char *)&xmmword_2B0AD0 + _Block_object_dispose(va, 8) = (__int128)vsubq_s64(*v8, v9);
    exception = __cxa_allocate_exception(0x18uLL);
    uint64_t v11 = qword_2B0AE0;
    *(_OWORD *)exception = xmmword_2B0AD0;
    exception[2] = v11;
  }

  return a1;
}

void sub_14B1F8(_Unwind_Exception *a1)
{
}

void *sub_14B210(void *a1)
{
  *a1 = off_258918;
  uint64_t v3 = a1 + 2;
  uint64_t v2 = a1[2];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 152LL))(v2);
  }
  uint64_t v4 = a1[3];
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 152LL))(v4);
  }
  *uint64_t v3 = 0LL;
  v3[1] = 0LL;
  *a1 = off_252F20;
  a1[1] = 0LL;
  return a1;
}

void sub_14B278(_Unwind_Exception *a1)
{
  void *v1 = off_252F20;
  v1[1] = 0LL;
  _Unwind_Resume(a1);
}

void *sub_14B288(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = sub_144854(a1, a2, a3);
  void *v4 = off_257068;
  BOOL v5 = (const void *)v4[3];
  if (!v5
  {
    LODWORD(xmmword_2B0AD0) = 28;
    *((void *)&xmmword_2B0AD0 + 1) = -1LL;
    qword_2B0AE0 = -1LL;
    exception = __cxa_allocate_exception(0x18uLL);
    uint64_t v8 = qword_2B0AE0;
    *(_OWORD *)exception = xmmword_2B0AD0;
    exception[2] = v8;
  }

  return a1;
}

void sub_14B320(_Unwind_Exception *a1)
{
}

double sub_14B338(uint64_t a1)
{
  return 0.0;
}

uint64_t sub_14B364(uint64_t a1, int a2)
{
  uint64_t v2 = 16LL;
  if (!a2) {
    uint64_t v2 = 24LL;
  }
  return (***(uint64_t (****)(void))(a1 + v2))(*(void *)(a1 + v2));
}

uint64_t sub_14B384()
{
  return 0LL;
}

uint64_t sub_14B38C()
{
  return 0LL;
}

uint64_t sub_14B394(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 8LL))(a2, a3);
  if (!v5) {
    return 0LL;
  }
  __n128 v6 = (char *)v5;
  int v7 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 24LL))(*(void *)(a1 + 16));
  uint64_t v8 = **(void **)(a1 + 24);
  if (v7)
  {
    uint64_t v9 = (*(uint64_t (**)(void))(v8 + 8))();
    if (v9)
    {
      (***(void (****)(void))(a1 + 16))(*(void *)(a1 + 16));
      if ((int)a3 >= 1)
      {
        uint64_t v11 = 0LL;
        do
        {
          v11 += 8LL;
        }

        while (8LL * a3 != v11);
      }
    }

    goto LABEL_36;
  }

  int v12 = (*(uint64_t (**)(void))(v8 + 24))();
  uint64_t v13 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 16) + 8LL))(*(void *)(a1 + 16), a3);
  BOOL v14 = (void *)v13;
  if (v12)
  {
    if (!v13)
    {
      uint64_t v9 = 0LL;
LABEL_36:
      operator delete[](v6);
      return v9;
    }

    (***(void (****)(void))(a1 + 24))(*(void *)(a1 + 24));
    if ((int)a3 >= 1)
    {
      uint64_t v16 = 0LL;
      do
      {
        ++v16;
      }

      while (a3 != v16);
    }

uint64_t sub_14B570(uint64_t a1, _BYTE *a2, int a3)
{
  if (a3 >= 1)
  {
    uint64_t v3 = a3;
    do
    {
      if (!*a2) {
        *a2 = -2;
      }
      ++a2;
      --v3;
    }

    while (v3);
  }

  return 0LL;
}

uint64_t sub_14B5A0(uint64_t a1, _BYTE *a2, int a3)
{
  if (a3 >= 1)
  {
    uint64_t v3 = a3;
    do
    {
      if (!*a2) {
        *a2 = -2;
      }
      ++a2;
      --v3;
    }

    while (v3);
  }

  return 0LL;
}

uint64_t sub_14B5D0(uint64_t a1, uint64_t a2, unsigned __int8 *a3, uint64_t a4)
{
  uint64_t v5 = a3;
  uint64_t v7 = (*(uint64_t (**)(uint64_t, unsigned __int8 *, uint64_t))(*(void *)a2 + 16LL))(a2, a3, a4);
  if (!v7) {
    return 0LL;
  }
  uint64_t v8 = (double *)v7;
  int v9 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 24LL))(*(void *)(a1 + 16));
  uint64_t v10 = **(void **)(a1 + 24);
  if (v9)
  {
    uint64_t v11 = (*(uint64_t (**)(void))(v10 + 16))();
    if (v11)
    {
      (***(void (****)(void))(a1 + 16))(*(void *)(a1 + 16));
      if ((int)a4 >= 1)
      {
        uint64_t v13 = 0LL;
        do
        {
          if (!v5[v13] && v8[v13] != 0.0) {
            *(void *)(v11 + 8 * v13) = v12;
          }
          ++v13;
        }

        while (a4 != v13);
      }
    }

    goto LABEL_39;
  }

  int v14 = (*(uint64_t (**)(void))(v10 + 24))();
  uint64_t v15 = (*(uint64_t (**)(void, unsigned __int8 *, uint64_t))(**(void **)(a1 + 16) + 16LL))( *(void *)(a1 + 16),  v5,  a4);
  uint64_t v16 = (void *)v15;
  if (v14)
  {
    if (!v15)
    {
      uint64_t v11 = 0LL;
LABEL_39:
      operator delete[](v8);
      return v11;
    }

    (***(void (****)(void))(a1 + 24))(*(void *)(a1 + 24));
    if ((int)a4 >= 1)
    {
      uint64_t v18 = 0LL;
      do
      {
        if (!v5[v18] && v8[v18] == 0.0) {
          v16[v18] = v17;
        }
        ++v18;
      }

      while (a4 != v18);
    }

uint64_t sub_14B7D8()
{
  return 22LL;
}

uint64_t sub_14B7E0(uint64_t a1, uint64_t a2, double a3)
{
  if (a3 == 0.0) {
    uint64_t v3 = 24LL;
  }
  else {
    uint64_t v3 = 16LL;
  }
  uint64_t v4 = *(void *)(a1 + v3);
  *(void *)(a1 + v3) = 0LL;
  return (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)a2 + 64LL))(a2, *(void *)(a1 + 8), v4);
}

uint64_t sub_14B85C()
{
  return 0LL;
}

uint64_t sub_14B864(uint64_t a1)
{
  return (*(unsigned __int8 (**)(void, void))(**(void **)(a1 + 16) + 136LL))( *(void *)(a1 + 16),  *(void *)(a1 + 24));
}

void *sub_14B88C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 112LL))(*(void *)(a1 + 16));
  uint64_t v5 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 24) + 112LL))(*(void *)(a1 + 24), a2);
  __n128 v6 = sub_122A0C(0x20uLL);
  sub_144854(v6, v4, v5);
  *__n128 v6 = off_2571C0;
  return v6;
}

void sub_14B928(_Unwind_Exception *exception_object, int a2)
{
  __n128 v6 = v4;
  if (v6) {
    free(v6);
  }
  if (a2 == 1)
  {
    __cxa_begin_catch(exception_object);
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 152LL))(v2);
    }
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 152LL))(v3);
    }
    __cxa_end_catch();
    JUMPOUT(0x14B910LL);
  }

  _Unwind_Resume(exception_object);
}

void *sub_14B9AC(void *a1)
{
  uint64_t v2 = (const void *)a1[1];
  if (!v2) {
    return (void *)(*(uint64_t (**)(void *, uint64_t, uint64_t, uint64_t))(*a1 + 272LL))(a1, 27LL, -1LL, -1LL);
  }
  if (!result) {
    return (void *)(*(uint64_t (**)(void *, uint64_t, uint64_t, uint64_t))(*a1 + 272LL))(a1, 27LL, -1LL, -1LL);
  }
  return result;
}

uint64_t sub_14BA14(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 40LL))(*(void *)(a1 + 16));
}

uint64_t sub_14BA24()
{
  return 13LL;
}

uint64_t sub_14BA30(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 56LL))(*(void *)(a1 + 16));
}

BOOL sub_14BA40(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a1 + 16);
  if (v4 == a2)
  {
    if (a2) {
      (*(void (**)(uint64_t))(*(void *)a2 + 152LL))(a2);
    }
    *(void *)(a1 + 16) = a3;
    *(void *)(a3 + _Block_object_dispose(va, 8) = a1;
  }

  return v4 == a2;
}

uint64_t sub_14BA9C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 72LL))(*(void *)(a1 + 16));
}

uint64_t sub_14BAAC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 80LL))(*(void *)(a1 + 16));
}

uint64_t sub_14BABC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 88LL))(*(void *)(a1 + 16));
}

float *sub_14BACC(uint64_t a1)
{
  double result = *(float **)(a1 + 16);
  if (result)
  {
    (*(void (**)(float *))(*(void *)result + 96LL))(result);
    double result = (float *)(*(uint64_t (**)(void))(**(void **)(a1 + 16) + 40LL))(*(void *)(a1 + 16));
    if ((_DWORD)result)
    {
      double result = (float *)(*(uint64_t (**)(void))(**(void **)(a1 + 16) + 24LL))(*(void *)(a1 + 16));
      if (!(_DWORD)result)
      {
        float v3 = (***(float (****)(void))(a1 + 16))(*(void *)(a1 + 16));
        uint64_t v4 = *(void *)(a1 + 16);
        *(void *)(a1 + 16) = 0LL;
        double result = (float *)sub_122A0C(0x18uLL);
        result[4] = v3;
        *(void *)(a1 + 16) = result;
        *(void *)double result = off_24D3F8;
        *((void *)result + 1) = a1;
        if (v4) {
          return (float *)(*(uint64_t (**)(uint64_t))(*(void *)v4 + 152LL))(v4);
        }
      }
    }
  }

  return result;
}

void sub_14BB78(void *a1)
{
  uint64_t v3 = *(void *)(v1 + 16);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 152LL))(v3);
  }
  *(void *)(v1 + 16) = v2;
  __cxa_end_catch();
}

void sub_14BBA4(_Unwind_Exception *a1)
{
}

char *sub_14BBB8(void **a1)
{
  uint64_t v2 = (char *)(*(uint64_t (**)(void *))(*a1[2] + 104LL))(a1[2]);
  uint64_t v3 = (&off_2ADD90)[((int (*)(void **))(*a1)[36])(a1)];
  size_t v4 = strlen(v2);
  size_t v5 = strlen(v3);
  __n128 v6 = (char *)operator new[](v4 + v5 + 3);
  sprintf(v6, "%s(%s)", v3, v2);
  if (v2) {
    operator delete[](v2);
  }
  return v6;
}

uint64_t sub_14BC58(void **a1)
{
  uint64_t v2 = ((uint64_t (*)(void **))(*a1)[36])(a1);
  return ((uint64_t (*)(void **, uint64_t))(*a1)[23])(a1, v2);
}

uint64_t sub_14BD44(void **a1, void *a2)
{
  if (!a1) {
    __cxa_bad_typeid();
  }
  if (!sub_124AC4(*(*a1 - 1), *(void *)(*a2 - 8LL))) {
    return 1LL;
  }
  if (!v4) {
    return 1LL;
  }
  size_t v5 = v4;
  if (((unsigned int (*)(void **))(*a1)[5])(a1)
    && (*(unsigned int (**)(void *))(*v5 + 40LL))(v5))
  {
    float v6 = ((float (*)(void **))**a1)(a1);
    return v6 != (*(float (**)(void *))*v5)(v5);
  }

  int v8 = ((uint64_t (*)(void **))(*a1)[5])(a1);
  else {
    return 1LL;
  }
}

uint64_t sub_14BE64(void **a1, void *a2)
{
  if (!a1) {
    __cxa_bad_typeid();
  }
  uint64_t result = sub_124AC4(*(*a1 - 1), *(void *)(*a2 - 8LL));
  if ((_DWORD)result)
  {
    if (result)
    {
      size_t v5 = (void *)result;
      if (((unsigned int (*)(void **))(*a1)[5])(a1)
        && (*(unsigned int (**)(void *))(*v5 + 40LL))(v5))
      {
        float v6 = ((float (*)(void **))**a1)(a1);
        return v6 == (*(float (**)(void *))*v5)(v5);
      }

      else
      {
        int v7 = ((uint64_t (*)(void **))(*a1)[5])(a1);
        else {
          return 0LL;
        }
      }
    }
  }

  return result;
}

void *sub_14BF84(void *a1)
{
  *a1 = off_257DD8;
  uint64_t v2 = a1[2];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 152LL))(v2);
  }
  a1[1] = 0LL;
  a1[2] = 0LL;
  *a1 = off_24E938;
  return a1;
}

void sub_14BFD4(_Unwind_Exception *a1)
{
  void *v1 = off_24E938;
  v1[1] = 0LL;
  _Unwind_Resume(a1);
}

void sub_14BFE4(void *a1)
{
  *a1 = off_257DD8;
  uint64_t v2 = a1[2];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 152LL))(v2);
  }
  free(a1);
}

void sub_14C024(_Unwind_Exception *a1)
{
  void *v1 = off_24E938;
  v1[1] = 0LL;
  free(v1);
  _Unwind_Resume(a1);
}

void *sub_14C044(void *a1)
{
  *a1 = off_257DD8;
  uint64_t v2 = a1[2];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 152LL))(v2);
  }
  a1[1] = 0LL;
  a1[2] = 0LL;
  *a1 = off_24E938;
  return a1;
}

void sub_14C094(_Unwind_Exception *a1)
{
  void *v1 = off_24E938;
  v1[1] = 0LL;
  _Unwind_Resume(a1);
}

void sub_14C0A4(void *a1)
{
  *a1 = off_257DD8;
  uint64_t v2 = a1[2];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 152LL))(v2);
  }
  free(a1);
}

void sub_14C0E4(_Unwind_Exception *a1)
{
  void *v1 = off_24E938;
  v1[1] = 0LL;
  free(v1);
  _Unwind_Resume(a1);
}

void *sub_14C104(void *a1)
{
  *a1 = off_257DD8;
  uint64_t v2 = a1[2];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 152LL))(v2);
  }
  a1[1] = 0LL;
  a1[2] = 0LL;
  *a1 = off_24E938;
  return a1;
}

void sub_14C154(_Unwind_Exception *a1)
{
  void *v1 = off_24E938;
  v1[1] = 0LL;
  _Unwind_Resume(a1);
}

void sub_14C164(void *a1)
{
  *a1 = off_257DD8;
  uint64_t v2 = a1[2];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 152LL))(v2);
  }
  free(a1);
}

void sub_14C1A4(_Unwind_Exception *a1)
{
  void *v1 = off_24E938;
  v1[1] = 0LL;
  free(v1);
  _Unwind_Resume(a1);
}

void *sub_14C1C4(void *a1)
{
  *a1 = off_257DD8;
  uint64_t v2 = a1[2];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 152LL))(v2);
  }
  a1[1] = 0LL;
  a1[2] = 0LL;
  *a1 = off_24E938;
  return a1;
}

void sub_14C214(_Unwind_Exception *a1)
{
  void *v1 = off_24E938;
  v1[1] = 0LL;
  _Unwind_Resume(a1);
}

void sub_14C224(void *a1)
{
  *a1 = off_257DD8;
  uint64_t v2 = a1[2];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 152LL))(v2);
  }
  free(a1);
}

void sub_14C264(_Unwind_Exception *a1)
{
  void *v1 = off_24E938;
  v1[1] = 0LL;
  free(v1);
  _Unwind_Resume(a1);
}

void *sub_14C284(void *a1)
{
  *a1 = off_257DD8;
  uint64_t v2 = a1[2];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 152LL))(v2);
  }
  a1[1] = 0LL;
  a1[2] = 0LL;
  *a1 = off_24E938;
  return a1;
}

void sub_14C2D4(_Unwind_Exception *a1)
{
  void *v1 = off_24E938;
  v1[1] = 0LL;
  _Unwind_Resume(a1);
}

void sub_14C2E4(void *a1)
{
  *a1 = off_257DD8;
  uint64_t v2 = a1[2];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 152LL))(v2);
  }
  free(a1);
}

void sub_14C324(_Unwind_Exception *a1)
{
  void *v1 = off_24E938;
  v1[1] = 0LL;
  free(v1);
  _Unwind_Resume(a1);
}

void *sub_14C344(void *a1)
{
  *a1 = off_257DD8;
  uint64_t v2 = a1[2];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 152LL))(v2);
  }
  a1[1] = 0LL;
  a1[2] = 0LL;
  *a1 = off_24E938;
  return a1;
}

void sub_14C394(_Unwind_Exception *a1)
{
  void *v1 = off_24E938;
  v1[1] = 0LL;
  _Unwind_Resume(a1);
}

void sub_14C3A4(void *a1)
{
  *a1 = off_257DD8;
  uint64_t v2 = a1[2];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 152LL))(v2);
  }
  free(a1);
}

void sub_14C3E4(_Unwind_Exception *a1)
{
  void *v1 = off_24E938;
  v1[1] = 0LL;
  free(v1);
  _Unwind_Resume(a1);
}

void *sub_14C404(void *a1)
{
  *a1 = off_257DD8;
  uint64_t v2 = a1[2];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 152LL))(v2);
  }
  a1[1] = 0LL;
  a1[2] = 0LL;
  *a1 = off_24E938;
  return a1;
}

void sub_14C454(_Unwind_Exception *a1)
{
  void *v1 = off_24E938;
  v1[1] = 0LL;
  _Unwind_Resume(a1);
}

void sub_14C464(void *a1)
{
  *a1 = off_257DD8;
  uint64_t v2 = a1[2];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 152LL))(v2);
  }
  free(a1);
}

void sub_14C4A4(_Unwind_Exception *a1)
{
  void *v1 = off_24E938;
  v1[1] = 0LL;
  free(v1);
  _Unwind_Resume(a1);
}

void *sub_14C4C4(void *a1)
{
  *a1 = off_257DD8;
  uint64_t v2 = a1[2];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 152LL))(v2);
  }
  a1[1] = 0LL;
  a1[2] = 0LL;
  *a1 = off_24E938;
  return a1;
}

void sub_14C514(_Unwind_Exception *a1)
{
  void *v1 = off_24E938;
  v1[1] = 0LL;
  _Unwind_Resume(a1);
}

void sub_14C524(void *a1)
{
  *a1 = off_257DD8;
  uint64_t v2 = a1[2];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 152LL))(v2);
  }
  free(a1);
}

void sub_14C564(_Unwind_Exception *a1)
{
  void *v1 = off_24E938;
  v1[1] = 0LL;
  free(v1);
  _Unwind_Resume(a1);
}

void *sub_14C584(void *a1)
{
  *a1 = off_257DD8;
  uint64_t v2 = a1[2];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 152LL))(v2);
  }
  a1[1] = 0LL;
  a1[2] = 0LL;
  *a1 = off_24E938;
  return a1;
}

void sub_14C5D4(_Unwind_Exception *a1)
{
  void *v1 = off_24E938;
  v1[1] = 0LL;
  _Unwind_Resume(a1);
}

void sub_14C5E4(void *a1)
{
  *a1 = off_257DD8;
  uint64_t v2 = a1[2];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 152LL))(v2);
  }
  free(a1);
}

void sub_14C624(_Unwind_Exception *a1)
{
  void *v1 = off_24E938;
  v1[1] = 0LL;
  free(v1);
  _Unwind_Resume(a1);
}

void *sub_14C644(void *a1)
{
  *a1 = off_257DD8;
  uint64_t v2 = a1[2];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 152LL))(v2);
  }
  a1[1] = 0LL;
  a1[2] = 0LL;
  *a1 = off_24E938;
  return a1;
}

void sub_14C694(_Unwind_Exception *a1)
{
  void *v1 = off_24E938;
  v1[1] = 0LL;
  _Unwind_Resume(a1);
}

void sub_14C6A4(void *a1)
{
  *a1 = off_257DD8;
  uint64_t v2 = a1[2];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 152LL))(v2);
  }
  free(a1);
}

void sub_14C6E4(_Unwind_Exception *a1)
{
  void *v1 = off_24E938;
  v1[1] = 0LL;
  free(v1);
  _Unwind_Resume(a1);
}

void *sub_14C704(void *a1)
{
  *a1 = off_257DD8;
  uint64_t v2 = a1[2];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 152LL))(v2);
  }
  a1[1] = 0LL;
  a1[2] = 0LL;
  *a1 = off_24E938;
  return a1;
}

void sub_14C754(_Unwind_Exception *a1)
{
  void *v1 = off_24E938;
  v1[1] = 0LL;
  _Unwind_Resume(a1);
}

void sub_14C764(void *a1)
{
  *a1 = off_257DD8;
  uint64_t v2 = a1[2];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 152LL))(v2);
  }
  free(a1);
}

void sub_14C7A4(_Unwind_Exception *a1)
{
  void *v1 = off_24E938;
  v1[1] = 0LL;
  free(v1);
  _Unwind_Resume(a1);
}

void *sub_14C7C4(void *a1)
{
  *a1 = off_257DD8;
  uint64_t v2 = a1[2];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 152LL))(v2);
  }
  a1[1] = 0LL;
  a1[2] = 0LL;
  *a1 = off_24E938;
  return a1;
}

void sub_14C814(_Unwind_Exception *a1)
{
  void *v1 = off_24E938;
  v1[1] = 0LL;
  _Unwind_Resume(a1);
}

void sub_14C824(void *a1)
{
  *a1 = off_257DD8;
  uint64_t v2 = a1[2];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 152LL))(v2);
  }
  free(a1);
}

void sub_14C864(_Unwind_Exception *a1)
{
  void *v1 = off_24E938;
  v1[1] = 0LL;
  free(v1);
  _Unwind_Resume(a1);
}

void *sub_14C884(void *a1)
{
  *a1 = off_257DD8;
  uint64_t v2 = a1[2];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 152LL))(v2);
  }
  a1[1] = 0LL;
  a1[2] = 0LL;
  *a1 = off_24E938;
  return a1;
}

void sub_14C8D4(_Unwind_Exception *a1)
{
  void *v1 = off_24E938;
  v1[1] = 0LL;
  _Unwind_Resume(a1);
}

void sub_14C8E4(void *a1)
{
  *a1 = off_257DD8;
  uint64_t v2 = a1[2];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 152LL))(v2);
  }
  free(a1);
}

void sub_14C924(_Unwind_Exception *a1)
{
  void *v1 = off_24E938;
  v1[1] = 0LL;
  free(v1);
  _Unwind_Resume(a1);
}

void *sub_14C944(void *a1)
{
  *a1 = off_257DD8;
  uint64_t v2 = a1[2];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 152LL))(v2);
  }
  a1[1] = 0LL;
  a1[2] = 0LL;
  *a1 = off_24E938;
  return a1;
}

void sub_14C994(_Unwind_Exception *a1)
{
  void *v1 = off_24E938;
  v1[1] = 0LL;
  _Unwind_Resume(a1);
}

void sub_14C9A4(void *a1)
{
  *a1 = off_257DD8;
  uint64_t v2 = a1[2];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 152LL))(v2);
  }
  free(a1);
}

void sub_14C9E4(_Unwind_Exception *a1)
{
  void *v1 = off_24E938;
  v1[1] = 0LL;
  free(v1);
  _Unwind_Resume(a1);
}

void *sub_14CA04(void *a1)
{
  *a1 = off_257DD8;
  uint64_t v2 = a1[2];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 152LL))(v2);
  }
  a1[1] = 0LL;
  a1[2] = 0LL;
  *a1 = off_24E938;
  return a1;
}

void sub_14CA54(_Unwind_Exception *a1)
{
  void *v1 = off_24E938;
  v1[1] = 0LL;
  _Unwind_Resume(a1);
}

void sub_14CA64(void *a1)
{
  *a1 = off_257DD8;
  uint64_t v2 = a1[2];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 152LL))(v2);
  }
  free(a1);
}

void sub_14CAA4(_Unwind_Exception *a1)
{
  void *v1 = off_24E938;
  v1[1] = 0LL;
  free(v1);
  _Unwind_Resume(a1);
}

void *sub_14CAC4(void *a1)
{
  *a1 = off_257DD8;
  uint64_t v2 = a1[2];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 152LL))(v2);
  }
  a1[1] = 0LL;
  a1[2] = 0LL;
  *a1 = off_24E938;
  return a1;
}

void sub_14CB14(_Unwind_Exception *a1)
{
  void *v1 = off_24E938;
  v1[1] = 0LL;
  _Unwind_Resume(a1);
}

void sub_14CB24(void *a1)
{
  *a1 = off_257DD8;
  uint64_t v2 = a1[2];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 152LL))(v2);
  }
  free(a1);
}

void sub_14CB64(_Unwind_Exception *a1)
{
  void *v1 = off_24E938;
  v1[1] = 0LL;
  free(v1);
  _Unwind_Resume(a1);
}

void *sub_14CB84(void *a1)
{
  *a1 = off_257DD8;
  uint64_t v2 = a1[2];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 152LL))(v2);
  }
  a1[1] = 0LL;
  a1[2] = 0LL;
  *a1 = off_24E938;
  return a1;
}

void sub_14CBD4(_Unwind_Exception *a1)
{
  void *v1 = off_24E938;
  v1[1] = 0LL;
  _Unwind_Resume(a1);
}

void sub_14CBE4(void *a1)
{
  *a1 = off_257DD8;
  uint64_t v2 = a1[2];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 152LL))(v2);
  }
  free(a1);
}

void sub_14CC24(_Unwind_Exception *a1)
{
  void *v1 = off_24E938;
  v1[1] = 0LL;
  free(v1);
  _Unwind_Resume(a1);
}

void *sub_14CC44(void *a1)
{
  *a1 = off_257DD8;
  uint64_t v2 = a1[2];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 152LL))(v2);
  }
  a1[1] = 0LL;
  a1[2] = 0LL;
  *a1 = off_24E938;
  return a1;
}

void sub_14CC94(_Unwind_Exception *a1)
{
  void *v1 = off_24E938;
  v1[1] = 0LL;
  _Unwind_Resume(a1);
}

void sub_14CCA4(void *a1)
{
  *a1 = off_257DD8;
  uint64_t v2 = a1[2];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 152LL))(v2);
  }
  free(a1);
}

void sub_14CCE4(_Unwind_Exception *a1)
{
  void *v1 = off_24E938;
  v1[1] = 0LL;
  free(v1);
  _Unwind_Resume(a1);
}

void *sub_14CD04(void *a1)
{
  *a1 = off_257DD8;
  uint64_t v2 = a1[2];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 152LL))(v2);
  }
  a1[1] = 0LL;
  a1[2] = 0LL;
  *a1 = off_24E938;
  return a1;
}

void sub_14CD54(_Unwind_Exception *a1)
{
  void *v1 = off_24E938;
  v1[1] = 0LL;
  _Unwind_Resume(a1);
}

void sub_14CD64(void *a1)
{
  *a1 = off_257DD8;
  uint64_t v2 = a1[2];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 152LL))(v2);
  }
  free(a1);
}

void sub_14CDA4(_Unwind_Exception *a1)
{
  void *v1 = off_24E938;
  v1[1] = 0LL;
  free(v1);
  _Unwind_Resume(a1);
}

void *sub_14CDC4(void *a1)
{
  *a1 = off_257DD8;
  uint64_t v2 = a1[2];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 152LL))(v2);
  }
  a1[1] = 0LL;
  a1[2] = 0LL;
  *a1 = off_24E938;
  return a1;
}

void sub_14CE14(_Unwind_Exception *a1)
{
  void *v1 = off_24E938;
  v1[1] = 0LL;
  _Unwind_Resume(a1);
}

void sub_14CE24(void *a1)
{
  *a1 = off_257DD8;
  uint64_t v2 = a1[2];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 152LL))(v2);
  }
  free(a1);
}

void sub_14CE64(_Unwind_Exception *a1)
{
  void *v1 = off_24E938;
  v1[1] = 0LL;
  free(v1);
  _Unwind_Resume(a1);
}

void *sub_14CE84(void *a1)
{
  *a1 = off_257DD8;
  uint64_t v2 = a1[2];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 152LL))(v2);
  }
  a1[1] = 0LL;
  a1[2] = 0LL;
  *a1 = off_24E938;
  return a1;
}

void sub_14CED4(_Unwind_Exception *a1)
{
  void *v1 = off_24E938;
  v1[1] = 0LL;
  _Unwind_Resume(a1);
}

void sub_14CEE4(void *a1)
{
  *a1 = off_257DD8;
  uint64_t v2 = a1[2];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 152LL))(v2);
  }
  free(a1);
}

void sub_14CF24(_Unwind_Exception *a1)
{
  void *v1 = off_24E938;
  v1[1] = 0LL;
  free(v1);
  _Unwind_Resume(a1);
}

void *sub_14CF44(void *a1)
{
  *a1 = off_257DD8;
  uint64_t v2 = a1[2];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 152LL))(v2);
  }
  a1[1] = 0LL;
  a1[2] = 0LL;
  *a1 = off_24E938;
  return a1;
}

void sub_14CF94(_Unwind_Exception *a1)
{
  void *v1 = off_24E938;
  v1[1] = 0LL;
  _Unwind_Resume(a1);
}

void sub_14CFA4(void *a1)
{
  *a1 = off_257DD8;
  uint64_t v2 = a1[2];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 152LL))(v2);
  }
  free(a1);
}

void sub_14CFE4(_Unwind_Exception *a1)
{
  void *v1 = off_24E938;
  v1[1] = 0LL;
  free(v1);
  _Unwind_Resume(a1);
}

void *sub_14D004(void *a1)
{
  *a1 = off_257DD8;
  uint64_t v2 = a1[2];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 152LL))(v2);
  }
  a1[1] = 0LL;
  a1[2] = 0LL;
  *a1 = off_24E938;
  return a1;
}

void sub_14D054(_Unwind_Exception *a1)
{
  void *v1 = off_24E938;
  v1[1] = 0LL;
  _Unwind_Resume(a1);
}

void sub_14D064(void *a1)
{
  *a1 = off_257DD8;
  uint64_t v2 = a1[2];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 152LL))(v2);
  }
  free(a1);
}

void sub_14D0A4(_Unwind_Exception *a1)
{
  void *v1 = off_24E938;
  v1[1] = 0LL;
  free(v1);
  _Unwind_Resume(a1);
}

void *sub_14D0C4(void *a1)
{
  *a1 = off_257DD8;
  uint64_t v2 = a1[2];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 152LL))(v2);
  }
  a1[1] = 0LL;
  a1[2] = 0LL;
  *a1 = off_24E938;
  return a1;
}

void sub_14D114(_Unwind_Exception *a1)
{
  void *v1 = off_24E938;
  v1[1] = 0LL;
  _Unwind_Resume(a1);
}

void sub_14D124(void *a1)
{
  *a1 = off_257DD8;
  uint64_t v2 = a1[2];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 152LL))(v2);
  }
  free(a1);
}

void sub_14D164(_Unwind_Exception *a1)
{
  void *v1 = off_24E938;
  v1[1] = 0LL;
  free(v1);
  _Unwind_Resume(a1);
}

void *sub_14D184(void *a1)
{
  *a1 = off_257DD8;
  uint64_t v2 = a1[2];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 152LL))(v2);
  }
  a1[1] = 0LL;
  a1[2] = 0LL;
  *a1 = off_24E938;
  return a1;
}

void sub_14D1D4(_Unwind_Exception *a1)
{
  void *v1 = off_24E938;
  v1[1] = 0LL;
  _Unwind_Resume(a1);
}

void sub_14D1E4(void *a1)
{
  *a1 = off_257DD8;
  uint64_t v2 = a1[2];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 152LL))(v2);
  }
  free(a1);
}

void sub_14D224(_Unwind_Exception *a1)
{
  void *v1 = off_24E938;
  v1[1] = 0LL;
  free(v1);
  _Unwind_Resume(a1);
}

void *sub_14D244(void *a1)
{
  *a1 = off_257DD8;
  uint64_t v2 = a1[2];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 152LL))(v2);
  }
  a1[1] = 0LL;
  a1[2] = 0LL;
  *a1 = off_24E938;
  return a1;
}

void sub_14D294(_Unwind_Exception *a1)
{
  void *v1 = off_24E938;
  v1[1] = 0LL;
  _Unwind_Resume(a1);
}

void sub_14D2A4(void *a1)
{
  *a1 = off_257DD8;
  uint64_t v2 = a1[2];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 152LL))(v2);
  }
  free(a1);
}

void sub_14D2E4(_Unwind_Exception *a1)
{
  void *v1 = off_24E938;
  v1[1] = 0LL;
  free(v1);
  _Unwind_Resume(a1);
}

void *sub_14D304(void *a1)
{
  *a1 = off_257DD8;
  uint64_t v2 = a1[2];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 152LL))(v2);
  }
  a1[1] = 0LL;
  a1[2] = 0LL;
  *a1 = off_24E938;
  return a1;
}

void sub_14D354(_Unwind_Exception *a1)
{
  void *v1 = off_24E938;
  v1[1] = 0LL;
  _Unwind_Resume(a1);
}

void sub_14D364(void *a1)
{
  *a1 = off_257DD8;
  uint64_t v2 = a1[2];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 152LL))(v2);
  }
  free(a1);
}

void sub_14D3A4(_Unwind_Exception *a1)
{
  void *v1 = off_24E938;
  v1[1] = 0LL;
  free(v1);
  _Unwind_Resume(a1);
}

void *sub_14D3C4(void *a1)
{
  *a1 = off_257DD8;
  uint64_t v2 = a1[2];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 152LL))(v2);
  }
  a1[1] = 0LL;
  a1[2] = 0LL;
  *a1 = off_24E938;
  return a1;
}

void sub_14D414(_Unwind_Exception *a1)
{
  void *v1 = off_24E938;
  v1[1] = 0LL;
  _Unwind_Resume(a1);
}

void sub_14D424(void *a1)
{
  *a1 = off_257DD8;
  uint64_t v2 = a1[2];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 152LL))(v2);
  }
  free(a1);
}

void sub_14D464(_Unwind_Exception *a1)
{
  void *v1 = off_24E938;
  v1[1] = 0LL;
  free(v1);
  _Unwind_Resume(a1);
}

void *sub_14D484(void *a1)
{
  *a1 = off_257DD8;
  uint64_t v2 = a1[2];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 152LL))(v2);
  }
  a1[1] = 0LL;
  a1[2] = 0LL;
  *a1 = off_24E938;
  return a1;
}

void sub_14D4D4(_Unwind_Exception *a1)
{
  void *v1 = off_24E938;
  v1[1] = 0LL;
  _Unwind_Resume(a1);
}

void sub_14D4E4(void *a1)
{
  *a1 = off_257DD8;
  uint64_t v2 = a1[2];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 152LL))(v2);
  }
  free(a1);
}

void sub_14D524(_Unwind_Exception *a1)
{
  void *v1 = off_24E938;
  v1[1] = 0LL;
  free(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_14D544(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 40LL))(v2) & 1;
  }
  else {
    uint64_t result = 1LL;
  }
  uint64_t v4 = *(void *)(a1 + 24);
  if (v4) {
    BOOL v5 = (_DWORD)result == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5) {
    return (*(uint64_t (**)(void))(*(void *)v4 + 40LL))(*(void *)(a1 + 24)) & 1;
  }
  return result;
}

BOOL sub_14D5A4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 16);
  BOOL result = 1;
  if (!v4 || !(*(unsigned int (**)(uint64_t, uint64_t))(*(void *)v4 + 56LL))(v4, a2))
  {
    uint64_t v5 = *(void *)(a1 + 24);
  }

  return result;
}

uint64_t sub_14D608(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = (void *)(a1 + 16);
  if (*(void *)(a1 + 16) != a2)
  {
    uint64_t v5 = (void *)(a1 + 24);
    if (*(void *)(a1 + 24) != a2) {
      return 0LL;
    }
  }

  if (a2) {
    (*(void (**)(uint64_t))(*(void *)a2 + 152LL))(a2);
  }
  void *v5 = a3;
  *(void *)(a3 + _Block_object_dispose(va, 8) = a1;
  return 1LL;
}

uint64_t sub_14D678(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 24) + 72LL))( *(void *)(a1 + 24),  a2,  a3);
}

uint64_t sub_14D6C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 24) + 80LL))( *(void *)(a1 + 24),  a2,  a3);
}

uint64_t sub_14D718(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 16);
  if (v4) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v4 + 88LL))(v4, a2);
  }
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 88LL))(result, a2);
  }
  return result;
}

float *sub_14D770(uint64_t a1)
{
  if ((*(unsigned int (**)(void))(**(void **)(a1 + 16) + 40LL))(*(void *)(a1 + 16)))
  {
    if (!(*(unsigned int (**)(void))(**(void **)(a1 + 16) + 24LL))(*(void *)(a1 + 16)))
    {
      float v2 = (***(float (****)(void))(a1 + 16))(*(void *)(a1 + 16));
      uint64_t v3 = *(void *)(a1 + 16);
      *(void *)(a1 + 16) = 0LL;
      uint64_t v4 = (float *)sub_122A0C(0x18uLL);
      v4[4] = v2;
      *(void *)(a1 + 16) = v4;
      *(void *)uint64_t v4 = off_24D3F8;
      *((void *)v4 + 1) = a1;
      if (v3) {
        (*(void (**)(uint64_t))(*(void *)v3 + 152LL))(v3);
      }
    }
  }

  (*(void (**)(void))(**(void **)(a1 + 24) + 96LL))(*(void *)(a1 + 24));
  uint64_t result = (float *)(*(uint64_t (**)(void))(**(void **)(a1 + 24) + 40LL))(*(void *)(a1 + 24));
  if ((_DWORD)result)
  {
    uint64_t result = (float *)(*(uint64_t (**)(void))(**(void **)(a1 + 24) + 24LL))(*(void *)(a1 + 24));
    if (!(_DWORD)result)
    {
      float v6 = (***(float (****)(void))(a1 + 24))(*(void *)(a1 + 24));
      uint64_t v7 = *(void *)(a1 + 24);
      *(void *)(a1 + 24) = 0LL;
      uint64_t result = (float *)sub_122A0C(0x18uLL);
      result[4] = v6;
      *(void *)(a1 + 24) = result;
      *(void *)uint64_t result = off_24D3F8;
      *((void *)result + 1) = a1;
      if (v7) {
        return (float *)(*(uint64_t (**)(uint64_t))(*(void *)v7 + 152LL))(v7);
      }
    }
  }

  return result;
}

void sub_14D89C(void *a1)
{
  uint64_t v3 = *(void *)(v1 + 24);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 152LL))(v3);
  }
  *(void *)(v1 + 24) = v2;
  __cxa_end_catch();
}

void sub_14D8C8(_Unwind_Exception *a1)
{
}

char *sub_14D90C(void **a1)
{
  uint64_t v2 = (char *)(*(uint64_t (**)(void *))(*a1[2] + 104LL))(a1[2]);
  uint64_t v3 = (char *)(*(uint64_t (**)(void *))(*a1[3] + 104LL))(a1[3]);
  uint64_t v4 = (&off_2ADD90)[((int (*)(void **))(*a1)[36])(a1)];
  size_t v5 = strlen(v2);
  size_t v6 = strlen(v3);
  size_t v7 = strlen(v4);
  int v8 = (char *)operator new[](v5 + v6 + v7 + 3);
  sprintf(v8, "%s(%s, %s)", v4, v2, v3);
  if (v2) {
    operator delete[](v2);
  }
  if (v3) {
    operator delete[](v3);
  }
  return v8;
}

uint64_t sub_14D9E8(void *a1)
{
  uint64_t v2 = a1[2];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 120LL))(v2);
  }
  uint64_t v3 = a1[3];
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 120LL))(v3);
  }
  uint64_t v4 = (*(uint64_t (**)(void *))(*a1 + 288LL))(a1);
  return (*(uint64_t (**)(void *, uint64_t))(*a1 + 184LL))(a1, v4);
}

BOOL sub_14DB14(void **a1, void *a2)
{
  if (!a1) {
    __cxa_bad_typeid();
  }
  if (!sub_124AC4(*(*a1 - 1), *(void *)(*a2 - 8LL))) {
    return 1LL;
  }
  if (!v4) {
    return 1LL;
  }
  size_t v5 = v4;
  if (((unsigned int (*)(void **))(*a1)[5])(a1)
    && (*(unsigned int (**)(void *))(*v5 + 40LL))(v5))
  {
    float v6 = ((float (*)(void **))**a1)(a1);
    BOOL v7 = v6 == (*(float (**)(void *))*v5)(v5);
    return !v7;
  }

  int v8 = ((uint64_t (*)(void **))(*a1)[5])(a1);
  if (v8 != (*(unsigned int (**)(void *))(*v5 + 40LL))(v5)
    || (*(unsigned int (**)(void *, void))(*a1[2] + 128LL))(a1[2], v5[2]))
  {
    return 1LL;
  }

  BOOL v7 = (*(unsigned int (**)(void *, void))(*a1[3] + 128LL))(a1[3], v5[3]) == 0;
  return !v7;
}

uint64_t sub_14DC44(void **a1, void *a2)
{
  if (!a1) {
    __cxa_bad_typeid();
  }
  uint64_t result = sub_124AC4(*(*a1 - 1), *(void *)(*a2 - 8LL));
  if ((_DWORD)result)
  {
    if (result)
    {
      size_t v5 = (void *)result;
      if (((unsigned int (*)(void **))(*a1)[5])(a1)
        && (*(unsigned int (**)(void *))(*v5 + 40LL))(v5))
      {
        float v6 = ((float (*)(void **))**a1)(a1);
        return v6 == (*(float (**)(void *))*v5)(v5);
      }

      else
      {
        int v7 = ((uint64_t (*)(void **))(*a1)[5])(a1);
        if (v7 == (*(unsigned int (**)(void *))(*v5 + 40LL))(v5))
        {
          uint64_t result = (*(uint64_t (**)(void *, void))(*a1[2] + 136LL))(a1[2], v5[2]);
          if ((_DWORD)result) {
            return (*(unsigned int (**)(void *, void))(*a1[3] + 136LL))(a1[3], v5[3]) != 0;
          }
        }

        else
        {
          return 0LL;
        }
      }
    }
  }

  return result;
}

void sub_14DD7C(void *a1)
{
  if (a1) {
    free(a1);
  }
}

void sub_14DDB0(_Unwind_Exception *exception_object)
{
  if (v1) {
    free(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_14DDC8(uint64_t a1)
{
  if (!*(void *)(a1 + 32)) {
    return 1LL;
  }
  int v2 = *(_DWORD *)(a1 + 24);
  if (v2 < 1) {
    return 1LL;
  }
  uint64_t v3 = 0LL;
  do
  {
    uint64_t v4 = *(void *)(*(void *)(a1 + 32) + 8 * v3);
    if (v4)
    {
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 40LL))(v4) & 1;
      int v2 = *(_DWORD *)(a1 + 24);
    }

    else
    {
      uint64_t result = 1LL;
    }

    ++v3;
  }

  while (v3 < v2 && (_DWORD)result);
  return result;
}

uint64_t sub_14DE3C(uint64_t a1, uint64_t a2)
{
  if (!*(void *)(a1 + 32)) {
    return 0LL;
  }
  int v3 = *(_DWORD *)(a1 + 24);
  if (v3 < 1) {
    return 0LL;
  }
  uint64_t v5 = 0LL;
  while (1)
  {
    uint64_t v6 = *(void *)(*(void *)(a1 + 32) + 8 * v5);
    if (v6) {
      break;
    }
LABEL_7:
    if (++v5 >= v3) {
      return 0LL;
    }
  }

  if (!(*(unsigned int (**)(uint64_t, uint64_t))(*(void *)v6 + 56LL))(v6, a2))
  {
    int v3 = *(_DWORD *)(a1 + 24);
    goto LABEL_7;
  }

  return 1LL;
}

BOOL sub_14DEB8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3 = *(void **)(a1 + 32);
  if (!v3) {
    return 0LL;
  }
  unint64_t v5 = *(unsigned int *)(a1 + 24);
  if (*v3 != a2)
  {
    unint64_t v7 = 0LL;
    while (v5 - 1 != v7)
    {
      uint64_t v8 = v3[++v7];
      if (v8 == a2)
      {
        BOOL v9 = v7 < v5;
        if (a2) {
          goto LABEL_11;
        }
        goto LABEL_12;
      }
    }

    return 0LL;
  }

  unint64_t v7 = 0LL;
  BOOL v9 = 1LL;
  if (a2)
  {
LABEL_11:
    (*(void (**)(uint64_t))(*(void *)a2 + 152LL))(a2);
    int v3 = *(void **)(a1 + 32);
  }

uint64_t sub_14DF70(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(result + 32))
  {
    uint64_t v3 = result;
    int v4 = *(_DWORD *)(result + 24);
    if (v4 >= 1)
    {
      for (uint64_t i = 0LL; i < v4; ++i)
      {
        uint64_t result = *(void *)(*(void *)(v3 + 32) + 8 * i);
        if (result)
        {
          uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)result + 72LL))(result, a2, a3);
          int v4 = *(_DWORD *)(v3 + 24);
        }
      }
    }
  }

  return result;
}

uint64_t sub_14DFE4(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(result + 32))
  {
    uint64_t v3 = result;
    int v4 = *(_DWORD *)(result + 24);
    if (v4 >= 1)
    {
      for (uint64_t i = 0LL; i < v4; ++i)
      {
        uint64_t result = *(void *)(*(void *)(v3 + 32) + 8 * i);
        if (result)
        {
          uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)result + 80LL))(result, a2, a3);
          int v4 = *(_DWORD *)(v3 + 24);
        }
      }
    }
  }

  return result;
}

uint64_t sub_14E058(uint64_t result, uint64_t a2)
{
  if (*(void *)(result + 32))
  {
    uint64_t v2 = result;
    int v3 = *(_DWORD *)(result + 24);
    if (v3 >= 1)
    {
      for (uint64_t i = 0LL; i < v3; ++i)
      {
        uint64_t result = *(void *)(*(void *)(v2 + 32) + 8 * i);
        if (result)
        {
          uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 88LL))(result, a2);
          int v3 = *(_DWORD *)(v2 + 24);
        }
      }
    }
  }

  return result;
}

char *sub_14E0C4(uint64_t a1)
{
  uint64_t v2 = (&off_2ADD90)[(*(int (**)(uint64_t))(*(void *)a1 + 288LL))(a1)];
  size_t v3 = strlen(v2);
  size_t v4 = v3 + 3;
  LODWORD(v5) = *(_DWORD *)(a1 + 24);
  __chkstk_darwin(v3);
  unint64_t v7 = (const char **)((char *)&v19 - ((v6 + 15) & 0xFFFFFFFF0LL));
  if ((int)v5 >= 1)
  {
    uint64_t v8 = 0LL;
    do
    {
      uint64_t v9 = *(void *)(*(void *)(a1 + 32) + 8 * v8);
      uint64_t v10 = (const char *)(*(uint64_t (**)(uint64_t))(*(void *)v9 + 104LL))(v9);
      v4 += strlen(v10) + 2;
      v7[v8++] = v10;
      uint64_t v5 = *(int *)(a1 + 24);
    }

    while (v8 < v5);
  }

  uint64_t v11 = (char *)operator new[](v4);
  uint64_t v12 = strcat(v11, v2);
  *(_WORD *)&v11[strlen(v12)] = 40;
  if ((int)v5 <= 0)
  {
    *(_WORD *)&v11[strlen(v11)] = 41;
  }

  else
  {
    uint64_t v13 = (v5 - 1);
    int v14 = v7;
    uint64_t v15 = v5;
    do
    {
      strcat(v11, *v14);
      if (v13) {
        strcat(v11, ", ");
      }
      --v13;
      ++v14;
      --v15;
    }

    while (v15);
    uint64_t v16 = 0LL;
    *(_WORD *)&v11[strlen(v11)] = 41;
    do
    {
      uint64_t v17 = (char *)v7[v16];
      if (v17)
      {
        operator delete[](v17);
        LODWORD(v5) = *(_DWORD *)(a1 + 24);
      }

      ++v16;
    }

    while (v16 < (int)v5);
  }

  return v11;
}

uint64_t sub_14E274(uint64_t a1)
{
  uint64_t v2 = *(int *)(a1 + 24);
  else {
    size_t v3 = 8 * v2;
  }
  size_t v4 = operator new[](v3);
  uint64_t v5 = v4;
  if ((int)v2 > 0)
  {
    bzero(v4, 8LL * v2);
    uint64_t v6 = 0LL;
    do
    {
      uint64_t v7 = *(void *)(*(void *)(a1 + 32) + 8 * v6);
      if (v7)
      {
        v5[v6] = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 120LL))(v7);
        LODWORD(v2) = *(_DWORD *)(a1 + 24);
      }

      ++v6;
    }

    while (v6 < (int)v2);
  }

  uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 288LL))(a1);
  uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 184LL))(a1, v8);
  operator delete[](v5);
  return v9;
}

void sub_14E33C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, __int128 a11, uint64_t a12)
{
  if (a2 == 1)
  {
    int v14 = __cxa_begin_catch(exception_object);
    __int128 v19 = *(_OWORD *)v14;
    uint64_t v20 = *((void *)v14 + 2);
    if (v13)
    {
      int v15 = *(_DWORD *)(v12 + 24);
      if (v15 >= 1)
      {
        for (uint64_t i = 0LL; i < v15; ++i)
        {
          uint64_t v17 = v13[i];
          if (v17)
          {
            (*(void (**)(uint64_t))(*(void *)v17 + 152LL))(v17);
            int v15 = *(_DWORD *)(v12 + 24);
          }
        }
      }

      operator delete[](v13);
    }

    exception = __cxa_allocate_exception(0x18uLL);
    *(_OWORD *)exception = v19;
    exception[2] = v20;
  }

  _Unwind_Resume(exception_object);
}

BOOL sub_14E3E8(void *a1, void *a2)
{
  if (a1 != a2)
  {
    if (!a1) {
      __cxa_bad_typeid();
    }
    if (!sub_124AC4(*(void *)(*a1 - 8LL), *(void *)(*a2 - 8LL))) {
      return 1LL;
    }
    if (!v4) {
      return 1LL;
    }
    uint64_t v5 = v4;
    if (*((_DWORD *)a1 + 6) != *((_DWORD *)v4 + 6) || (a1[4] == 0LL) != (v4[4] == 0LL)) {
      return 1LL;
    }
    if ((*(unsigned int (**)(void *))(*a1 + 40LL))(a1)
      && (*(unsigned int (**)(void *))(*v5 + 40LL))(v5))
    {
      float v6 = (*(float (**)(void *))*a1)(a1);
      return v6 != (*(float (**)(void *))*v5)(v5);
    }

    int v8 = (*(uint64_t (**)(void *))(*a1 + 40LL))(a1);
    if (a1[4])
    {
      int v9 = *((_DWORD *)a1 + 6);
      if (v9 >= 1)
      {
        uint64_t v10 = 0LL;
        while (1)
        {
          uint64_t v11 = *(void *)(a1[4] + 8 * v10);
          if ((v11 == 0) != (*(void *)(v5[4] + 8 * v10) == 0LL)) {
            break;
          }
          if (v11)
          {
            int v9 = *((_DWORD *)a1 + 6);
          }

          BOOL result = 0LL;
          if (++v10 >= v9) {
            return result;
          }
        }

        return 1LL;
      }
    }
  }

  return 0LL;
}

uint64_t sub_14E590(uint64_t a1, void *a2)
{
  if ((void *)a1 == a2) {
    return 1LL;
  }
  if (!a1) {
    __cxa_bad_typeid();
  }
  uint64_t result = sub_124AC4(*(void *)(*(void *)a1 - 8LL), *(void *)(*a2 - 8LL));
  if ((_DWORD)result)
  {
    if (result)
    {
      uint64_t v5 = (void *)result;
      if (*(_DWORD *)(a1 + 24) != *(_DWORD *)(result + 24)
        || (*(void *)(a1 + 32) == 0LL) != (*(void *)(result + 32) == 0LL))
      {
        return 0LL;
      }

      if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 40LL))(a1)
        && (*(unsigned int (**)(void *))(*v5 + 40LL))(v5))
      {
        float v6 = (**(float (***)(uint64_t))a1)(a1);
        return v6 == (*(float (**)(void *))*v5)(v5);
      }

      int v7 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40LL))(a1);
      if (*(void *)(a1 + 32))
      {
        int v8 = *(_DWORD *)(a1 + 24);
        if (v8 >= 1)
        {
          uint64_t v9 = 0LL;
          while (1)
          {
            uint64_t v10 = *(void *)(*(void *)(a1 + 32) + 8 * v9);
            if ((v10 == 0) != (*(void *)(v5[4] + 8 * v9) == 0LL)) {
              break;
            }
            if (v10)
            {
              int v8 = *(_DWORD *)(a1 + 24);
            }

            ++v9;
            uint64_t result = 1LL;
            if (v9 >= v8) {
              return result;
            }
          }

          return 0LL;
        }
      }

      return 1LL;
    }
  }

  return result;
}

void sub_14E73C(void *a1)
{
  if (a1) {
    free(a1);
  }
}

void sub_14E770(_Unwind_Exception *exception_object)
{
  if (v1) {
    free(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_14E78C(void *a1)
{
  if (a1) {
    free(a1);
  }
}

void sub_14E7C0(_Unwind_Exception *exception_object)
{
  if (v1) {
    free(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_14E7D8()
{
  return 0LL;
}

uint64_t sub_14E7E0()
{
  return 0LL;
}

uint64_t sub_14E7EC(uint64_t a1)
{
  return 0LL;
}

void sub_14E81C(void *a1)
{
  if (a1) {
    free(a1);
  }
}

void sub_14E850(_Unwind_Exception *exception_object)
{
  if (v1) {
    free(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_14E86C(void *a1)
{
  if (a1) {
    free(a1);
  }
}

void sub_14E8A0(_Unwind_Exception *exception_object)
{
  if (v1) {
    free(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_14E8B8(uint64_t a1)
{
  return (__int16)word_1FB980[(*(unsigned int (**)(uint64_t))(*(void *)a1 + 288LL))(a1)];
}

BOOL sub_14E8E0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 16);
  BOOL result = 1;
  if (!v4 || !(*(unsigned int (**)(uint64_t, uint64_t))(*(void *)v4 + 56LL))(v4, a2))
  {
    uint64_t v5 = *(void *)(a1 + 24);
  }

  return result;
}

uint64_t sub_14E944(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = (void *)(a1 + 16);
  if (*(void *)(a1 + 16) != a2)
  {
    uint64_t v5 = (void *)(a1 + 24);
    if (*(void *)(a1 + 24) != a2) {
      return 0LL;
    }
  }

  if (a2) {
    (*(void (**)(uint64_t))(*(void *)a2 + 152LL))(a2);
  }
  void *v5 = a3;
  *(void *)(a3 + _Block_object_dispose(va, 8) = a1;
  return 1LL;
}

uint64_t sub_14E9B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 24) + 72LL))( *(void *)(a1 + 24),  a2,  a3);
}

uint64_t sub_14EA04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 24) + 80LL))( *(void *)(a1 + 24),  a2,  a3);
}

uint64_t sub_14EA54(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 16);
  if (v4) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v4 + 88LL))(v4, a2);
  }
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 88LL))(result, a2);
  }
  return result;
}

char *sub_14EAAC(void **a1)
{
  uint64_t v2 = (char *)(*(uint64_t (**)(void *))(*a1[2] + 104LL))(a1[2]);
  size_t v3 = (char *)(*(uint64_t (**)(void *))(*a1[3] + 104LL))(a1[3]);
  uint64_t v4 = (&off_2ADCD0)[((unsigned int (*)(void **))(*a1)[36])(a1)];
  uint64_t v5 = a1[2];
  if (v5) {
  else
  }
    BOOL v6 = 1;
  int v7 = a1[3];
  if (v7) {
  else
  }
    BOOL v8 = 1;
  size_t v9 = strlen(v2);
  size_t v10 = strlen(v3);
  size_t v11 = strlen(v4);
  uint64_t v12 = (char *)operator new[](v9 + v10 + v11 + 7);
  uint64_t v13 = v12;
  if (!v6 || v8)
  {
    if (!v6 || !v8) {
      int v14 = "(%s) %s (%s)";
    }
    else {
      int v14 = "%s %s %s";
    }
    if (v6 || !v8) {
      sprintf(v12, v14, v2, v4, v3);
    }
    else {
      sprintf(v12, "(%s) %s %s");
    }
  }

  else
  {
    sprintf(v12, "%s %s (%s)");
  }

  if (v2) {
    operator delete[](v2);
  }
  if (v3) {
    operator delete[](v3);
  }
  return v13;
}

uint64_t sub_14EC38(void **a1)
{
  uint64_t v2 = (*(uint64_t (**)(void *))(*a1[2] + 120LL))(a1[2]);
  uint64_t v3 = (*(uint64_t (**)(void *))(*a1[3] + 120LL))(a1[3]);
  uint64_t v4 = ((uint64_t (*)(void **))(*a1)[36])(a1);
  return ((uint64_t (*)(void **, uint64_t, uint64_t, uint64_t))(*a1)[25])(a1, v4, v2, v3);
}

uint64_t sub_14ED6C(void *a1, void *a2)
{
  if (!a1) {
    __cxa_bad_typeid();
  }
  if (!sub_124AC4(*(void *)(*a1 - 8LL), *(void *)(*a2 - 8LL))) {
    return 1LL;
  }
  if ((*(unsigned int (**)(void *))(*a1 + 40LL))(a1)
    && (*(unsigned int (**)(void *))(*v4 + 40LL))(v4))
  {
    float v5 = (*(float (**)(void *))*a1)(a1);
    return v5 != (*(float (**)(void *))*v4)(v4);
  }

  uint64_t v7 = a1[2];
  if ((v7 == 0) != (v4[2] == 0LL)) {
    return 1LL;
  }
  uint64_t v8 = a1[3];
  if ((v8 == 0) != (v4[3] == 0LL)) {
    return 1LL;
  }
  else {
    return (*(uint64_t (**)(uint64_t))(*(void *)v8 + 128LL))(v8);
  }
}

uint64_t sub_14EE98(void *a1, void *a2)
{
  if (!a1) {
    __cxa_bad_typeid();
  }
  uint64_t result = sub_124AC4(*(void *)(*a1 - 8LL), *(void *)(*a2 - 8LL));
  if ((_DWORD)result)
  {
    if ((*(unsigned int (**)(void *))(*a1 + 40LL))(a1)
      && (*(unsigned int (**)(void *))(*v5 + 40LL))(v5))
    {
      float v6 = (*(float (**)(void *))*a1)(a1);
      return v6 == (*(float (**)(void *))*v5)(v5);
    }

    else
    {
      uint64_t v7 = a1[2];
      if ((v7 == 0) != (v5[2] == 0LL)) {
        return 0LL;
      }
      uint64_t v8 = a1[3];
      if ((v8 == 0) != (v5[3] == 0LL)) {
        return 0LL;
      }
      else {
        return (*(uint64_t (**)(uint64_t))(*(void *)v8 + 136LL))(v8);
      }
    }
  }

  return result;
}

void sub_14EFC8(void *a1)
{
  if (a1) {
    free(a1);
  }
}

void sub_14EFFC(_Unwind_Exception *exception_object)
{
  if (v1) {
    free(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_14F014(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (void *)(a1 + 16);
  if (*(void *)(a1 + 16) == a2 || (uint64_t v2 = (void *)(a1 + 24), *(void *)(a1 + 24) == a2)) {
    void *v2 = 0LL;
  }
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 64LL))(*(void *)(a1 + 8));
}

void sub_14F054(void *a1)
{
  if (a1) {
    free(a1);
  }
}

void sub_14F088(_Unwind_Exception *exception_object)
{
  if (v1) {
    free(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_14F0A4(void *a1)
{
  if (a1) {
    free(a1);
  }
}

void sub_14F0D8(_Unwind_Exception *exception_object)
{
  if (v1) {
    free(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_14F0F4(void *a1)
{
  if (a1) {
    free(a1);
  }
}

void sub_14F128(_Unwind_Exception *exception_object)
{
  if (v1) {
    free(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_14F144(void *a1)
{
  if (a1) {
    free(a1);
  }
}

void sub_14F178(_Unwind_Exception *exception_object)
{
  if (v1) {
    free(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_14F194(void *a1)
{
  if (a1) {
    free(a1);
  }
}

void sub_14F1C8(_Unwind_Exception *exception_object)
{
  if (v1) {
    free(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_14F1E4(void *a1)
{
  if (a1) {
    free(a1);
  }
}

void sub_14F218(_Unwind_Exception *exception_object)
{
  if (v1) {
    free(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_14F234(void *a1)
{
  if (a1) {
    free(a1);
  }
}

void sub_14F268(_Unwind_Exception *exception_object)
{
  if (v1) {
    free(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_14F284(void *a1)
{
  if (a1) {
    free(a1);
  }
}

void sub_14F2B8(_Unwind_Exception *exception_object)
{
  if (v1) {
    free(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_14F2D4(void *a1)
{
  if (a1) {
    free(a1);
  }
}

void sub_14F308(_Unwind_Exception *exception_object)
{
  if (v1) {
    free(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_14F324(void *a1)
{
  if (a1) {
    free(a1);
  }
}

void sub_14F358(_Unwind_Exception *exception_object)
{
  if (v1) {
    free(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_14F374(void *a1)
{
  if (a1) {
    free(a1);
  }
}

void sub_14F3A8(_Unwind_Exception *exception_object)
{
  if (v1) {
    free(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_14F3C4(void *a1)
{
  if (a1) {
    free(a1);
  }
}

void sub_14F3F8(_Unwind_Exception *exception_object)
{
  if (v1) {
    free(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_14F414(void *a1)
{
  if (a1) {
    free(a1);
  }
}

void sub_14F448(_Unwind_Exception *exception_object)
{
  if (v1) {
    free(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_14F464(void *a1)
{
  if (a1) {
    free(a1);
  }
}

void sub_14F498(_Unwind_Exception *exception_object)
{
  if (v1) {
    free(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_14F4B4(void *a1)
{
  if (a1) {
    free(a1);
  }
}

void sub_14F4E8(_Unwind_Exception *exception_object)
{
  if (v1) {
    free(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_14F504(void *a1)
{
  if (a1) {
    free(a1);
  }
}

void sub_14F538(_Unwind_Exception *exception_object)
{
  if (v1) {
    free(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_14F554(void *a1)
{
  if (a1) {
    free(a1);
  }
}

void sub_14F588(_Unwind_Exception *exception_object)
{
  if (v1) {
    free(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_14F5A4(void *a1)
{
  if (a1) {
    free(a1);
  }
}

void sub_14F5D8(_Unwind_Exception *exception_object)
{
  if (v1) {
    free(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_14F5F0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 40LL))(*(void *)(a1 + 16));
}

uint64_t sub_14F600()
{
  return 13LL;
}

uint64_t sub_14F60C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 56LL))(*(void *)(a1 + 16));
}

BOOL sub_14F61C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a1 + 16);
  if (v4 == a2)
  {
    if (a2) {
      (*(void (**)(uint64_t))(*(void *)a2 + 152LL))(a2);
    }
    *(void *)(a1 + 16) = a3;
    *(void *)(a3 + _Block_object_dispose(va, 8) = a1;
  }

  return v4 == a2;
}

uint64_t sub_14F678(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 72LL))(*(void *)(a1 + 16));
}

uint64_t sub_14F688(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 80LL))(*(void *)(a1 + 16));
}

uint64_t sub_14F698(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 88LL))(*(void *)(a1 + 16));
}

double *sub_14F6A8(uint64_t a1)
{
  uint64_t result = *(double **)(a1 + 16);
  if (result)
  {
    (*(void (**)(double *))(*(void *)result + 96LL))(result);
    uint64_t result = (double *)(*(uint64_t (**)(void))(**(void **)(a1 + 16) + 40LL))(*(void *)(a1 + 16));
    if ((_DWORD)result)
    {
      uint64_t result = (double *)(*(uint64_t (**)(void))(**(void **)(a1 + 16) + 24LL))(*(void *)(a1 + 16));
      if (!(_DWORD)result)
      {
        double v3 = (***(double (****)(void))(a1 + 16))(*(void *)(a1 + 16));
        uint64_t v4 = *(void *)(a1 + 16);
        *(void *)(a1 + 16) = 0LL;
        uint64_t result = (double *)sub_122A0C(0x18uLL);
        result[2] = v3;
        *(void *)(a1 + 16) = result;
        *(void *)uint64_t result = off_24E1B0;
        *((void *)result + 1) = a1;
        if (v4) {
          return (double *)(*(uint64_t (**)(uint64_t))(*(void *)v4 + 152LL))(v4);
        }
      }
    }
  }

  return result;
}

void sub_14F754(void *a1)
{
  uint64_t v3 = *(void *)(v1 + 16);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 152LL))(v3);
  }
  *(void *)(v1 + 16) = v2;
  __cxa_end_catch();
}

void sub_14F780(_Unwind_Exception *a1)
{
}

char *sub_14F794(void **a1)
{
  uint64_t v2 = (char *)(*(uint64_t (**)(void *))(*a1[2] + 104LL))(a1[2]);
  uint64_t v3 = (&off_2ADD90)[((int (*)(void **))(*a1)[36])(a1)];
  size_t v4 = strlen(v2);
  size_t v5 = strlen(v3);
  float v6 = (char *)operator new[](v4 + v5 + 3);
  sprintf(v6, "%s(%s)", v3, v2);
  if (v2) {
    operator delete[](v2);
  }
  return v6;
}

uint64_t sub_14F834(void **a1)
{
  uint64_t v2 = ((uint64_t (*)(void **))(*a1)[36])(a1);
  return ((uint64_t (*)(void **, uint64_t))(*a1)[23])(a1, v2);
}

uint64_t sub_14F920(void **a1, void *a2)
{
  if (!a1) {
    __cxa_bad_typeid();
  }
  if (!sub_124AC4(*(*a1 - 1), *(void *)(*a2 - 8LL))) {
    return 1LL;
  }
  if (!v4) {
    return 1LL;
  }
  size_t v5 = v4;
  if (((unsigned int (*)(void **))(*a1)[5])(a1)
    && (*(unsigned int (**)(void *))(*v5 + 40LL))(v5))
  {
    double v6 = ((double (*)(void **))**a1)(a1);
    return v6 != (*(double (**)(void *))*v5)(v5);
  }

  int v8 = ((uint64_t (*)(void **))(*a1)[5])(a1);
  else {
    return 1LL;
  }
}

uint64_t sub_14FA40(void **a1, void *a2)
{
  if (!a1) {
    __cxa_bad_typeid();
  }
  uint64_t result = sub_124AC4(*(*a1 - 1), *(void *)(*a2 - 8LL));
  if ((_DWORD)result)
  {
    if (result)
    {
      size_t v5 = (void *)result;
      if (((unsigned int (*)(void **))(*a1)[5])(a1)
        && (*(unsigned int (**)(void *))(*v5 + 40LL))(v5))
      {
        double v6 = ((double (*)(void **))**a1)(a1);
        return v6 == (*(double (**)(void *))*v5)(v5);
      }

      else
      {
        int v7 = ((uint64_t (*)(void **))(*a1)[5])(a1);
        else {
          return 0LL;
        }
      }
    }
  }

  return result;
}

void *sub_14FB60(void *a1)
{
  *a1 = off_258180;
  uint64_t v2 = a1[2];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 152LL))(v2);
  }
  a1[1] = 0LL;
  a1[2] = 0LL;
  *a1 = off_252F20;
  return a1;
}

void sub_14FBB0(_Unwind_Exception *a1)
{
  void *v1 = off_252F20;
  v1[1] = 0LL;
  _Unwind_Resume(a1);
}

void sub_14FBC0(void *a1)
{
  *a1 = off_258180;
  uint64_t v2 = a1[2];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 152LL))(v2);
  }
  free(a1);
}

void sub_14FC00(_Unwind_Exception *a1)
{
  void *v1 = off_252F20;
  v1[1] = 0LL;
  free(v1);
  _Unwind_Resume(a1);
}

void *sub_14FC20(void *a1)
{
  *a1 = off_258180;
  uint64_t v2 = a1[2];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 152LL))(v2);
  }
  a1[1] = 0LL;
  a1[2] = 0LL;
  *a1 = off_252F20;
  return a1;
}

void sub_14FC70(_Unwind_Exception *a1)
{
  void *v1 = off_252F20;
  v1[1] = 0LL;
  _Unwind_Resume(a1);
}

void sub_14FC80(void *a1)
{
  *a1 = off_258180;
  uint64_t v2 = a1[2];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 152LL))(v2);
  }
  free(a1);
}

void sub_14FCC0(_Unwind_Exception *a1)
{
  void *v1 = off_252F20;
  v1[1] = 0LL;
  free(v1);
  _Unwind_Resume(a1);
}

void *sub_14FCE0(void *a1)
{
  *a1 = off_258180;
  uint64_t v2 = a1[2];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 152LL))(v2);
  }
  a1[1] = 0LL;
  a1[2] = 0LL;
  *a1 = off_252F20;
  return a1;
}

void sub_14FD30(_Unwind_Exception *a1)
{
  void *v1 = off_252F20;
  v1[1] = 0LL;
  _Unwind_Resume(a1);
}

void sub_14FD40(void *a1)
{
  *a1 = off_258180;
  uint64_t v2 = a1[2];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 152LL))(v2);
  }
  free(a1);
}

void sub_14FD80(_Unwind_Exception *a1)
{
  void *v1 = off_252F20;
  v1[1] = 0LL;
  free(v1);
  _Unwind_Resume(a1);
}

void *sub_14FDA0(void *a1)
{
  *a1 = off_258180;
  uint64_t v2 = a1[2];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 152LL))(v2);
  }
  a1[1] = 0LL;
  a1[2] = 0LL;
  *a1 = off_252F20;
  return a1;
}

void sub_14FDF0(_Unwind_Exception *a1)
{
  void *v1 = off_252F20;
  v1[1] = 0LL;
  _Unwind_Resume(a1);
}

void sub_14FE00(void *a1)
{
  *a1 = off_258180;
  uint64_t v2 = a1[2];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 152LL))(v2);
  }
  free(a1);
}

void sub_14FE40(_Unwind_Exception *a1)
{
  void *v1 = off_252F20;
  v1[1] = 0LL;
  free(v1);
  _Unwind_Resume(a1);
}

void *sub_14FE60(void *a1)
{
  *a1 = off_258180;
  uint64_t v2 = a1[2];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 152LL))(v2);
  }
  a1[1] = 0LL;
  a1[2] = 0LL;
  *a1 = off_252F20;
  return a1;
}

void sub_14FEB0(_Unwind_Exception *a1)
{
  void *v1 = off_252F20;
  v1[1] = 0LL;
  _Unwind_Resume(a1);
}

void sub_14FEC0(void *a1)
{
  *a1 = off_258180;
  uint64_t v2 = a1[2];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 152LL))(v2);
  }
  free(a1);
}

void sub_14FF00(_Unwind_Exception *a1)
{
  void *v1 = off_252F20;
  v1[1] = 0LL;
  free(v1);
  _Unwind_Resume(a1);
}

void *sub_14FF20(void *a1)
{
  *a1 = off_258180;
  uint64_t v2 = a1[2];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 152LL))(v2);
  }
  a1[1] = 0LL;
  a1[2] = 0LL;
  *a1 = off_252F20;
  return a1;
}

void sub_14FF70(_Unwind_Exception *a1)
{
  void *v1 = off_252F20;
  v1[1] = 0LL;
  _Unwind_Resume(a1);
}

void sub_14FF80(void *a1)
{
  *a1 = off_258180;
  uint64_t v2 = a1[2];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 152LL))(v2);
  }
  free(a1);
}

void sub_14FFC0(_Unwind_Exception *a1)
{
  void *v1 = off_252F20;
  v1[1] = 0LL;
  free(v1);
  _Unwind_Resume(a1);
}

void *sub_14FFE0(void *a1)
{
  *a1 = off_258180;
  uint64_t v2 = a1[2];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 152LL))(v2);
  }
  a1[1] = 0LL;
  a1[2] = 0LL;
  *a1 = off_252F20;
  return a1;
}

void sub_150030(_Unwind_Exception *a1)
{
  void *v1 = off_252F20;
  v1[1] = 0LL;
  _Unwind_Resume(a1);
}

void sub_150040(void *a1)
{
  *a1 = off_258180;
  uint64_t v2 = a1[2];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 152LL))(v2);
  }
  free(a1);
}

void sub_150080(_Unwind_Exception *a1)
{
  void *v1 = off_252F20;
  v1[1] = 0LL;
  free(v1);
  _Unwind_Resume(a1);
}

void *sub_1500A0(void *a1)
{
  *a1 = off_258180;
  uint64_t v2 = a1[2];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 152LL))(v2);
  }
  a1[1] = 0LL;
  a1[2] = 0LL;
  *a1 = off_252F20;
  return a1;
}

void sub_1500F0(_Unwind_Exception *a1)
{
  void *v1 = off_252F20;
  v1[1] = 0LL;
  _Unwind_Resume(a1);
}

void sub_150100(void *a1)
{
  *a1 = off_258180;
  uint64_t v2 = a1[2];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 152LL))(v2);
  }
  free(a1);
}

void sub_150140(_Unwind_Exception *a1)
{
  void *v1 = off_252F20;
  v1[1] = 0LL;
  free(v1);
  _Unwind_Resume(a1);
}

void *sub_150160(void *a1)
{
  *a1 = off_258180;
  uint64_t v2 = a1[2];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 152LL))(v2);
  }
  a1[1] = 0LL;
  a1[2] = 0LL;
  *a1 = off_252F20;
  return a1;
}

void sub_1501B0(_Unwind_Exception *a1)
{
  void *v1 = off_252F20;
  v1[1] = 0LL;
  _Unwind_Resume(a1);
}

void sub_1501C0(void *a1)
{
  *a1 = off_258180;
  uint64_t v2 = a1[2];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 152LL))(v2);
  }
  free(a1);
}

void sub_150200(_Unwind_Exception *a1)
{
  void *v1 = off_252F20;
  v1[1] = 0LL;
  free(v1);
  _Unwind_Resume(a1);
}

void *sub_150220(void *a1)
{
  *a1 = off_258180;
  uint64_t v2 = a1[2];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 152LL))(v2);
  }
  a1[1] = 0LL;
  a1[2] = 0LL;
  *a1 = off_252F20;
  return a1;
}

void sub_150270(_Unwind_Exception *a1)
{
  void *v1 = off_252F20;
  v1[1] = 0LL;
  _Unwind_Resume(a1);
}

void sub_150280(void *a1)
{
  *a1 = off_258180;
  uint64_t v2 = a1[2];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 152LL))(v2);
  }
  free(a1);
}

void sub_1502C0(_Unwind_Exception *a1)
{
  void *v1 = off_252F20;
  v1[1] = 0LL;
  free(v1);
  _Unwind_Resume(a1);
}

void *sub_1502E0(void *a1)
{
  *a1 = off_258180;
  uint64_t v2 = a1[2];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 152LL))(v2);
  }
  a1[1] = 0LL;
  a1[2] = 0LL;
  *a1 = off_252F20;
  return a1;
}

void sub_150330(_Unwind_Exception *a1)
{
  void *v1 = off_252F20;
  v1[1] = 0LL;
  _Unwind_Resume(a1);
}

void sub_150340(void *a1)
{
  *a1 = off_258180;
  uint64_t v2 = a1[2];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 152LL))(v2);
  }
  free(a1);
}

void sub_150380(_Unwind_Exception *a1)
{
  void *v1 = off_252F20;
  v1[1] = 0LL;
  free(v1);
  _Unwind_Resume(a1);
}

void *sub_1503A0(void *a1)
{
  *a1 = off_258180;
  uint64_t v2 = a1[2];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 152LL))(v2);
  }
  a1[1] = 0LL;
  a1[2] = 0LL;
  *a1 = off_252F20;
  return a1;
}

void sub_1503F0(_Unwind_Exception *a1)
{
  void *v1 = off_252F20;
  v1[1] = 0LL;
  _Unwind_Resume(a1);
}

void sub_150400(void *a1)
{
  *a1 = off_258180;
  uint64_t v2 = a1[2];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 152LL))(v2);
  }
  free(a1);
}

void sub_150440(_Unwind_Exception *a1)
{
  void *v1 = off_252F20;
  v1[1] = 0LL;
  free(v1);
  _Unwind_Resume(a1);
}

void *sub_150460(void *a1)
{
  *a1 = off_258180;
  uint64_t v2 = a1[2];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 152LL))(v2);
  }
  a1[1] = 0LL;
  a1[2] = 0LL;
  *a1 = off_252F20;
  return a1;
}

void sub_1504B0(_Unwind_Exception *a1)
{
  void *v1 = off_252F20;
  v1[1] = 0LL;
  _Unwind_Resume(a1);
}

void sub_1504C0(void *a1)
{
  *a1 = off_258180;
  uint64_t v2 = a1[2];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 152LL))(v2);
  }
  free(a1);
}

void sub_150500(_Unwind_Exception *a1)
{
  void *v1 = off_252F20;
  v1[1] = 0LL;
  free(v1);
  _Unwind_Resume(a1);
}

void *sub_150520(void *a1)
{
  *a1 = off_258180;
  uint64_t v2 = a1[2];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 152LL))(v2);
  }
  a1[1] = 0LL;
  a1[2] = 0LL;
  *a1 = off_252F20;
  return a1;
}

void sub_150570(_Unwind_Exception *a1)
{
  void *v1 = off_252F20;
  v1[1] = 0LL;
  _Unwind_Resume(a1);
}

void sub_150580(void *a1)
{
  *a1 = off_258180;
  uint64_t v2 = a1[2];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 152LL))(v2);
  }
  free(a1);
}

void sub_1505C0(_Unwind_Exception *a1)
{
  void *v1 = off_252F20;
  v1[1] = 0LL;
  free(v1);
  _Unwind_Resume(a1);
}

void *sub_1505E0(void *a1)
{
  *a1 = off_258180;
  uint64_t v2 = a1[2];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 152LL))(v2);
  }
  a1[1] = 0LL;
  a1[2] = 0LL;
  *a1 = off_252F20;
  return a1;
}

void sub_150630(_Unwind_Exception *a1)
{
  void *v1 = off_252F20;
  v1[1] = 0LL;
  _Unwind_Resume(a1);
}

void sub_150640(void *a1)
{
  *a1 = off_258180;
  uint64_t v2 = a1[2];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 152LL))(v2);
  }
  free(a1);
}

void sub_150680(_Unwind_Exception *a1)
{
  void *v1 = off_252F20;
  v1[1] = 0LL;
  free(v1);
  _Unwind_Resume(a1);
}

void *sub_1506A0(void *a1)
{
  *a1 = off_258180;
  uint64_t v2 = a1[2];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 152LL))(v2);
  }
  a1[1] = 0LL;
  a1[2] = 0LL;
  *a1 = off_252F20;
  return a1;
}

void sub_1506F0(_Unwind_Exception *a1)
{
  void *v1 = off_252F20;
  v1[1] = 0LL;
  _Unwind_Resume(a1);
}

void sub_150700(void *a1)
{
  *a1 = off_258180;
  uint64_t v2 = a1[2];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 152LL))(v2);
  }
  free(a1);
}

void sub_150740(_Unwind_Exception *a1)
{
  void *v1 = off_252F20;
  v1[1] = 0LL;
  free(v1);
  _Unwind_Resume(a1);
}

void *sub_150760(void *a1)
{
  *a1 = off_258180;
  uint64_t v2 = a1[2];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 152LL))(v2);
  }
  a1[1] = 0LL;
  a1[2] = 0LL;
  *a1 = off_252F20;
  return a1;
}

void sub_1507B0(_Unwind_Exception *a1)
{
  void *v1 = off_252F20;
  v1[1] = 0LL;
  _Unwind_Resume(a1);
}

void sub_1507C0(void *a1)
{
  *a1 = off_258180;
  uint64_t v2 = a1[2];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 152LL))(v2);
  }
  free(a1);
}

void sub_150800(_Unwind_Exception *a1)
{
  void *v1 = off_252F20;
  v1[1] = 0LL;
  free(v1);
  _Unwind_Resume(a1);
}

void *sub_150820(void *a1)
{
  *a1 = off_258180;
  uint64_t v2 = a1[2];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 152LL))(v2);
  }
  a1[1] = 0LL;
  a1[2] = 0LL;
  *a1 = off_252F20;
  return a1;
}

void sub_150870(_Unwind_Exception *a1)
{
  void *v1 = off_252F20;
  v1[1] = 0LL;
  _Unwind_Resume(a1);
}

void sub_150880(void *a1)
{
  *a1 = off_258180;
  uint64_t v2 = a1[2];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 152LL))(v2);
  }
  free(a1);
}

void sub_1508C0(_Unwind_Exception *a1)
{
  void *v1 = off_252F20;
  v1[1] = 0LL;
  free(v1);
  _Unwind_Resume(a1);
}

void *sub_1508E0(void *a1)
{
  *a1 = off_258180;
  uint64_t v2 = a1[2];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 152LL))(v2);
  }
  a1[1] = 0LL;
  a1[2] = 0LL;
  *a1 = off_252F20;
  return a1;
}

void sub_150930(_Unwind_Exception *a1)
{
  void *v1 = off_252F20;
  v1[1] = 0LL;
  _Unwind_Resume(a1);
}

void sub_150940(void *a1)
{
  *a1 = off_258180;
  uint64_t v2 = a1[2];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 152LL))(v2);
  }
  free(a1);
}

void sub_150980(_Unwind_Exception *a1)
{
  void *v1 = off_252F20;
  v1[1] = 0LL;
  free(v1);
  _Unwind_Resume(a1);
}

void *sub_1509A0(void *a1)
{
  *a1 = off_258180;
  uint64_t v2 = a1[2];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 152LL))(v2);
  }
  a1[1] = 0LL;
  a1[2] = 0LL;
  *a1 = off_252F20;
  return a1;
}

void sub_1509F0(_Unwind_Exception *a1)
{
  void *v1 = off_252F20;
  v1[1] = 0LL;
  _Unwind_Resume(a1);
}

void sub_150A00(void *a1)
{
  *a1 = off_258180;
  uint64_t v2 = a1[2];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 152LL))(v2);
  }
  free(a1);
}

void sub_150A40(_Unwind_Exception *a1)
{
  void *v1 = off_252F20;
  v1[1] = 0LL;
  free(v1);
  _Unwind_Resume(a1);
}

void *sub_150A60(void *a1)
{
  *a1 = off_258180;
  uint64_t v2 = a1[2];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 152LL))(v2);
  }
  a1[1] = 0LL;
  a1[2] = 0LL;
  *a1 = off_252F20;
  return a1;
}

void sub_150AB0(_Unwind_Exception *a1)
{
  void *v1 = off_252F20;
  v1[1] = 0LL;
  _Unwind_Resume(a1);
}

void sub_150AC0(void *a1)
{
  *a1 = off_258180;
  uint64_t v2 = a1[2];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 152LL))(v2);
  }
  free(a1);
}

void sub_150B00(_Unwind_Exception *a1)
{
  void *v1 = off_252F20;
  v1[1] = 0LL;
  free(v1);
  _Unwind_Resume(a1);
}

void *sub_150B20(void *a1)
{
  *a1 = off_258180;
  uint64_t v2 = a1[2];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 152LL))(v2);
  }
  a1[1] = 0LL;
  a1[2] = 0LL;
  *a1 = off_252F20;
  return a1;
}

void sub_150B70(_Unwind_Exception *a1)
{
  void *v1 = off_252F20;
  v1[1] = 0LL;
  _Unwind_Resume(a1);
}

void sub_150B80(void *a1)
{
  *a1 = off_258180;
  uint64_t v2 = a1[2];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 152LL))(v2);
  }
  free(a1);
}

void sub_150BC0(_Unwind_Exception *a1)
{
  void *v1 = off_252F20;
  v1[1] = 0LL;
  free(v1);
  _Unwind_Resume(a1);
}

void *sub_150BE0(void *a1)
{
  *a1 = off_258180;
  uint64_t v2 = a1[2];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 152LL))(v2);
  }
  a1[1] = 0LL;
  a1[2] = 0LL;
  *a1 = off_252F20;
  return a1;
}

void sub_150C30(_Unwind_Exception *a1)
{
  void *v1 = off_252F20;
  v1[1] = 0LL;
  _Unwind_Resume(a1);
}

void sub_150C40(void *a1)
{
  *a1 = off_258180;
  uint64_t v2 = a1[2];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 152LL))(v2);
  }
  free(a1);
}

void sub_150C80(_Unwind_Exception *a1)
{
  void *v1 = off_252F20;
  v1[1] = 0LL;
  free(v1);
  _Unwind_Resume(a1);
}

void *sub_150CA0(void *a1)
{
  *a1 = off_258180;
  uint64_t v2 = a1[2];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 152LL))(v2);
  }
  a1[1] = 0LL;
  a1[2] = 0LL;
  *a1 = off_252F20;
  return a1;
}

void sub_150CF0(_Unwind_Exception *a1)
{
  void *v1 = off_252F20;
  v1[1] = 0LL;
  _Unwind_Resume(a1);
}

void sub_150D00(void *a1)
{
  *a1 = off_258180;
  uint64_t v2 = a1[2];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 152LL))(v2);
  }
  free(a1);
}

void sub_150D40(_Unwind_Exception *a1)
{
  void *v1 = off_252F20;
  v1[1] = 0LL;
  free(v1);
  _Unwind_Resume(a1);
}

void *sub_150D60(void *a1)
{
  *a1 = off_258180;
  uint64_t v2 = a1[2];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 152LL))(v2);
  }
  a1[1] = 0LL;
  a1[2] = 0LL;
  *a1 = off_252F20;
  return a1;
}

void sub_150DB0(_Unwind_Exception *a1)
{
  void *v1 = off_252F20;
  v1[1] = 0LL;
  _Unwind_Resume(a1);
}

void sub_150DC0(void *a1)
{
  *a1 = off_258180;
  uint64_t v2 = a1[2];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 152LL))(v2);
  }
  free(a1);
}

void sub_150E00(_Unwind_Exception *a1)
{
  void *v1 = off_252F20;
  v1[1] = 0LL;
  free(v1);
  _Unwind_Resume(a1);
}

void *sub_150E20(void *a1)
{
  *a1 = off_258180;
  uint64_t v2 = a1[2];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 152LL))(v2);
  }
  a1[1] = 0LL;
  a1[2] = 0LL;
  *a1 = off_252F20;
  return a1;
}

void sub_150E70(_Unwind_Exception *a1)
{
  void *v1 = off_252F20;
  v1[1] = 0LL;
  _Unwind_Resume(a1);
}

void sub_150E80(void *a1)
{
  *a1 = off_258180;
  uint64_t v2 = a1[2];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 152LL))(v2);
  }
  free(a1);
}

void sub_150EC0(_Unwind_Exception *a1)
{
  void *v1 = off_252F20;
  v1[1] = 0LL;
  free(v1);
  _Unwind_Resume(a1);
}

void *sub_150EE0(void *a1)
{
  *a1 = off_258180;
  uint64_t v2 = a1[2];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 152LL))(v2);
  }
  a1[1] = 0LL;
  a1[2] = 0LL;
  *a1 = off_252F20;
  return a1;
}

void sub_150F30(_Unwind_Exception *a1)
{
  void *v1 = off_252F20;
  v1[1] = 0LL;
  _Unwind_Resume(a1);
}

void sub_150F40(void *a1)
{
  *a1 = off_258180;
  uint64_t v2 = a1[2];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 152LL))(v2);
  }
  free(a1);
}

void sub_150F80(_Unwind_Exception *a1)
{
  void *v1 = off_252F20;
  v1[1] = 0LL;
  free(v1);
  _Unwind_Resume(a1);
}

void *sub_150FA0(void *a1)
{
  *a1 = off_258180;
  uint64_t v2 = a1[2];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 152LL))(v2);
  }
  a1[1] = 0LL;
  a1[2] = 0LL;
  *a1 = off_252F20;
  return a1;
}

void sub_150FF0(_Unwind_Exception *a1)
{
  void *v1 = off_252F20;
  v1[1] = 0LL;
  _Unwind_Resume(a1);
}

void sub_151000(void *a1)
{
  *a1 = off_258180;
  uint64_t v2 = a1[2];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 152LL))(v2);
  }
  free(a1);
}

void sub_151040(_Unwind_Exception *a1)
{
  void *v1 = off_252F20;
  v1[1] = 0LL;
  free(v1);
  _Unwind_Resume(a1);
}

void *sub_151060(void *a1)
{
  *a1 = off_258180;
  uint64_t v2 = a1[2];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 152LL))(v2);
  }
  a1[1] = 0LL;
  a1[2] = 0LL;
  *a1 = off_252F20;
  return a1;
}

void sub_1510B0(_Unwind_Exception *a1)
{
  void *v1 = off_252F20;
  v1[1] = 0LL;
  _Unwind_Resume(a1);
}

void sub_1510C0(void *a1)
{
  *a1 = off_258180;
  uint64_t v2 = a1[2];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 152LL))(v2);
  }
  free(a1);
}

void sub_151100(_Unwind_Exception *a1)
{
  void *v1 = off_252F20;
  v1[1] = 0LL;
  free(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_151120(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 40LL))(v2) & 1;
  }
  else {
    uint64_t result = 1LL;
  }
  uint64_t v4 = *(void *)(a1 + 24);
  if (v4) {
    BOOL v5 = (_DWORD)result == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5) {
    return (*(uint64_t (**)(void))(*(void *)v4 + 40LL))(*(void *)(a1 + 24)) & 1;
  }
  return result;
}

BOOL sub_151180(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 16);
  BOOL result = 1;
  if (!v4 || !(*(unsigned int (**)(uint64_t, uint64_t))(*(void *)v4 + 56LL))(v4, a2))
  {
    uint64_t v5 = *(void *)(a1 + 24);
  }

  return result;
}

uint64_t sub_1511E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = (void *)(a1 + 16);
  if (*(void *)(a1 + 16) != a2)
  {
    uint64_t v5 = (void *)(a1 + 24);
    if (*(void *)(a1 + 24) != a2) {
      return 0LL;
    }
  }

  if (a2) {
    (*(void (**)(uint64_t))(*(void *)a2 + 152LL))(a2);
  }
  void *v5 = a3;
  *(void *)(a3 + _Block_object_dispose(va, 8) = a1;
  return 1LL;
}

uint64_t sub_151254(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 24) + 72LL))( *(void *)(a1 + 24),  a2,  a3);
}

uint64_t sub_1512A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 24) + 80LL))( *(void *)(a1 + 24),  a2,  a3);
}

uint64_t sub_1512F4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 16);
  if (v4) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v4 + 88LL))(v4, a2);
  }
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 88LL))(result, a2);
  }
  return result;
}

double *sub_15134C(uint64_t a1)
{
  if ((*(unsigned int (**)(void))(**(void **)(a1 + 16) + 40LL))(*(void *)(a1 + 16)))
  {
    if (!(*(unsigned int (**)(void))(**(void **)(a1 + 16) + 24LL))(*(void *)(a1 + 16)))
    {
      double v2 = (***(double (****)(void))(a1 + 16))(*(void *)(a1 + 16));
      uint64_t v3 = *(void *)(a1 + 16);
      *(void *)(a1 + 16) = 0LL;
      uint64_t v4 = (double *)sub_122A0C(0x18uLL);
      int v4[2] = v2;
      *(void *)(a1 + 16) = v4;
      *(void *)uint64_t v4 = off_24E1B0;
      *((void *)v4 + 1) = a1;
      if (v3) {
        (*(void (**)(uint64_t))(*(void *)v3 + 152LL))(v3);
      }
    }
  }

  (*(void (**)(void))(**(void **)(a1 + 24) + 96LL))(*(void *)(a1 + 24));
  uint64_t result = (double *)(*(uint64_t (**)(void))(**(void **)(a1 + 24) + 40LL))(*(void *)(a1 + 24));
  if ((_DWORD)result)
  {
    uint64_t result = (double *)(*(uint64_t (**)(void))(**(void **)(a1 + 24) + 24LL))(*(void *)(a1 + 24));
    if (!(_DWORD)result)
    {
      double v6 = (***(double (****)(void))(a1 + 24))(*(void *)(a1 + 24));
      uint64_t v7 = *(void *)(a1 + 24);
      *(void *)(a1 + 24) = 0LL;
      uint64_t result = (double *)sub_122A0C(0x18uLL);
      result[2] = v6;
      *(void *)(a1 + 24) = result;
      *(void *)uint64_t result = off_24E1B0;
      *((void *)result + 1) = a1;
      if (v7) {
        return (double *)(*(uint64_t (**)(uint64_t))(*(void *)v7 + 152LL))(v7);
      }
    }
  }

  return result;
}

void sub_151478(void *a1)
{
  uint64_t v3 = *(void *)(v1 + 24);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 152LL))(v3);
  }
  *(void *)(v1 + 24) = v2;
  __cxa_end_catch();
}

void sub_1514A4(_Unwind_Exception *a1)
{
}

char *sub_1514E8(void **a1)
{
  uint64_t v2 = (char *)(*(uint64_t (**)(void *))(*a1[2] + 104LL))(a1[2]);
  uint64_t v3 = (char *)(*(uint64_t (**)(void *))(*a1[3] + 104LL))(a1[3]);
  uint64_t v4 = (&off_2ADD90)[((int (*)(void **))(*a1)[36])(a1)];
  size_t v5 = strlen(v2);
  size_t v6 = strlen(v3);
  size_t v7 = strlen(v4);
  int v8 = (char *)operator new[](v5 + v6 + v7 + 3);
  sprintf(v8, "%s(%s, %s)", v4, v2, v3);
  if (v2) {
    operator delete[](v2);
  }
  if (v3) {
    operator delete[](v3);
  }
  return v8;
}

uint64_t sub_1515C4(void *a1)
{
  uint64_t v2 = a1[2];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 120LL))(v2);
  }
  uint64_t v3 = a1[3];
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 120LL))(v3);
  }
  uint64_t v4 = (*(uint64_t (**)(void *))(*a1 + 288LL))(a1);
  return (*(uint64_t (**)(void *, uint64_t))(*a1 + 184LL))(a1, v4);
}

BOOL sub_1516F0(void **a1, void *a2)
{
  if (!a1) {
    __cxa_bad_typeid();
  }
  if (!sub_124AC4(*(*a1 - 1), *(void *)(*a2 - 8LL))) {
    return 1LL;
  }
  if (!v4) {
    return 1LL;
  }
  size_t v5 = v4;
  if (((unsigned int (*)(void **))(*a1)[5])(a1)
    && (*(unsigned int (**)(void *))(*v5 + 40LL))(v5))
  {
    double v6 = ((double (*)(void **))**a1)(a1);
    BOOL v7 = v6 == (*(double (**)(void *))*v5)(v5);
    return !v7;
  }

  int v8 = ((uint64_t (*)(void **))(*a1)[5])(a1);
  if (v8 != (*(unsigned int (**)(void *))(*v5 + 40LL))(v5)
    || (*(unsigned int (**)(void *, void))(*a1[2] + 128LL))(a1[2], v5[2]))
  {
    return 1LL;
  }

  BOOL v7 = (*(unsigned int (**)(void *, void))(*a1[3] + 128LL))(a1[3], v5[3]) == 0;
  return !v7;
}

uint64_t sub_151820(void **a1, void *a2)
{
  if (!a1) {
    __cxa_bad_typeid();
  }
  uint64_t result = sub_124AC4(*(*a1 - 1), *(void *)(*a2 - 8LL));
  if ((_DWORD)result)
  {
    if (result)
    {
      size_t v5 = (void *)result;
      if (((unsigned int (*)(void **))(*a1)[5])(a1)
        && (*(unsigned int (**)(void *))(*v5 + 40LL))(v5))
      {
        double v6 = ((double (*)(void **))**a1)(a1);
        return v6 == (*(double (**)(void *))*v5)(v5);
      }

      else
      {
        int v7 = ((uint64_t (*)(void **))(*a1)[5])(a1);
        if (v7 == (*(unsigned int (**)(void *))(*v5 + 40LL))(v5))
        {
          uint64_t result = (*(uint64_t (**)(void *, void))(*a1[2] + 136LL))(a1[2], v5[2]);
          if ((_DWORD)result) {
            return (*(unsigned int (**)(void *, void))(*a1[3] + 136LL))(a1[3], v5[3]) != 0;
          }
        }

        else
        {
          return 0LL;
        }
      }
    }
  }

  return result;
}

void sub_151958(void *a1)
{
  if (a1) {
    free(a1);
  }
}

void sub_15198C(_Unwind_Exception *exception_object)
{
  if (v1) {
    free(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1519A4(uint64_t a1)
{
  if (!*(void *)(a1 + 32)) {
    return 1LL;
  }
  int v2 = *(_DWORD *)(a1 + 24);
  if (v2 < 1) {
    return 1LL;
  }
  uint64_t v3 = 0LL;
  do
  {
    uint64_t v4 = *(void *)(*(void *)(a1 + 32) + 8 * v3);
    if (v4)
    {
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 40LL))(v4) & 1;
      int v2 = *(_DWORD *)(a1 + 24);
    }

    else
    {
      uint64_t result = 1LL;
    }

    ++v3;
  }

  while (v3 < v2 && (_DWORD)result);
  return result;
}

uint64_t sub_151A18(uint64_t a1, uint64_t a2)
{
  if (!*(void *)(a1 + 32)) {
    return 0LL;
  }
  int v3 = *(_DWORD *)(a1 + 24);
  if (v3 < 1) {
    return 0LL;
  }
  uint64_t v5 = 0LL;
  while (1)
  {
    uint64_t v6 = *(void *)(*(void *)(a1 + 32) + 8 * v5);
    if (v6) {
      break;
    }
LABEL_7:
    if (++v5 >= v3) {
      return 0LL;
    }
  }

  if (!(*(unsigned int (**)(uint64_t, uint64_t))(*(void *)v6 + 56LL))(v6, a2))
  {
    int v3 = *(_DWORD *)(a1 + 24);
    goto LABEL_7;
  }

  return 1LL;
}

BOOL sub_151A94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3 = *(void **)(a1 + 32);
  if (!v3) {
    return 0LL;
  }
  unint64_t v5 = *(unsigned int *)(a1 + 24);
  if (*v3 != a2)
  {
    unint64_t v7 = 0LL;
    while (v5 - 1 != v7)
    {
      uint64_t v8 = v3[++v7];
      if (v8 == a2)
      {
        BOOL v9 = v7 < v5;
        if (a2) {
          goto LABEL_11;
        }
        goto LABEL_12;
      }
    }

    return 0LL;
  }

  unint64_t v7 = 0LL;
  BOOL v9 = 1LL;
  if (a2)
  {
LABEL_11:
    (*(void (**)(uint64_t))(*(void *)a2 + 152LL))(a2);
    int v3 = *(void **)(a1 + 32);
  }

uint64_t sub_151B4C(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(result + 32))
  {
    uint64_t v3 = result;
    int v4 = *(_DWORD *)(result + 24);
    if (v4 >= 1)
    {
      for (uint64_t i = 0LL; i < v4; ++i)
      {
        uint64_t result = *(void *)(*(void *)(v3 + 32) + 8 * i);
        if (result)
        {
          uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)result + 72LL))(result, a2, a3);
          int v4 = *(_DWORD *)(v3 + 24);
        }
      }
    }
  }

  return result;
}

uint64_t sub_151BC0(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(result + 32))
  {
    uint64_t v3 = result;
    int v4 = *(_DWORD *)(result + 24);
    if (v4 >= 1)
    {
      for (uint64_t i = 0LL; i < v4; ++i)
      {
        uint64_t result = *(void *)(*(void *)(v3 + 32) + 8 * i);
        if (result)
        {
          uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)result + 80LL))(result, a2, a3);
          int v4 = *(_DWORD *)(v3 + 24);
        }
      }
    }
  }

  return result;
}

uint64_t sub_151C34(uint64_t result, uint64_t a2)
{
  if (*(void *)(result + 32))
  {
    uint64_t v2 = result;
    int v3 = *(_DWORD *)(result + 24);
    if (v3 >= 1)
    {
      for (uint64_t i = 0LL; i < v3; ++i)
      {
        uint64_t result = *(void *)(*(void *)(v2 + 32) + 8 * i);
        if (result)
        {
          uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 88LL))(result, a2);
          int v3 = *(_DWORD *)(v2 + 24);
        }
      }
    }
  }

  return result;
}

char *sub_151CA0(uint64_t a1)
{
  uint64_t v2 = (&off_2ADD90)[(*(int (**)(uint64_t))(*(void *)a1 + 288LL))(a1)];
  size_t v3 = strlen(v2);
  size_t v4 = v3 + 3;
  LODWORD(v5) = *(_DWORD *)(a1 + 24);
  __chkstk_darwin(v3);
  unint64_t v7 = (const char **)((char *)&v19 - ((v6 + 15) & 0xFFFFFFFF0LL));
  if ((int)v5 >= 1)
  {
    uint64_t v8 = 0LL;
    do
    {
      uint64_t v9 = *(void *)(*(void *)(a1 + 32) + 8 * v8);
      size_t v10 = (const char *)(*(uint64_t (**)(uint64_t))(*(void *)v9 + 104LL))(v9);
      v4 += strlen(v10) + 2;
      v7[v8++] = v10;
      uint64_t v5 = *(int *)(a1 + 24);
    }

    while (v8 < v5);
  }

  size_t v11 = (char *)operator new[](v4);
  uint64_t v12 = strcat(v11, v2);
  *(_WORD *)&v11[strlen(v12)] = 40;
  if ((int)v5 <= 0)
  {
    *(_WORD *)&v11[strlen(v11)] = 41;
  }

  else
  {
    uint64_t v13 = (v5 - 1);
    int v14 = v7;
    uint64_t v15 = v5;
    do
    {
      strcat(v11, *v14);
      if (v13) {
        strcat(v11, ", ");
      }
      --v13;
      ++v14;
      --v15;
    }

    while (v15);
    uint64_t v16 = 0LL;
    *(_WORD *)&v11[strlen(v11)] = 41;
    do
    {
      uint64_t v17 = (char *)v7[v16];
      if (v17)
      {
        operator delete[](v17);
        LODWORD(v5) = *(_DWORD *)(a1 + 24);
      }

      ++v16;
    }

    while (v16 < (int)v5);
  }

  return v11;
}

uint64_t sub_151E50(uint64_t a1)
{
  uint64_t v2 = *(int *)(a1 + 24);
  else {
    size_t v3 = 8 * v2;
  }
  size_t v4 = operator new[](v3);
  uint64_t v5 = v4;
  if ((int)v2 > 0)
  {
    bzero(v4, 8LL * v2);
    uint64_t v6 = 0LL;
    do
    {
      uint64_t v7 = *(void *)(*(void *)(a1 + 32) + 8 * v6);
      if (v7)
      {
        v5[v6] = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 120LL))(v7);
        LODWORD(v2) = *(_DWORD *)(a1 + 24);
      }

      ++v6;
    }

    while (v6 < (int)v2);
  }

  uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 288LL))(a1);
  uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 184LL))(a1, v8);
  operator delete[](v5);
  return v9;
}

void sub_151F18( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, __int128 a11, uint64_t a12)
{
  if (a2 == 1)
  {
    int v14 = __cxa_begin_catch(exception_object);
    __int128 v19 = *(_OWORD *)v14;
    uint64_t v20 = *((void *)v14 + 2);
    if (v13)
    {
      int v15 = *(_DWORD *)(v12 + 24);
      if (v15 >= 1)
      {
        for (uint64_t i = 0LL; i < v15; ++i)
        {
          uint64_t v17 = v13[i];
          if (v17)
          {
            (*(void (**)(uint64_t))(*(void *)v17 + 152LL))(v17);
            int v15 = *(_DWORD *)(v12 + 24);
          }
        }
      }

      operator delete[](v13);
    }

    exception = __cxa_allocate_exception(0x18uLL);
    *(_OWORD *)exception = v19;
    exception[2] = v20;
  }

  _Unwind_Resume(exception_object);
}

BOOL sub_151FC4(void *a1, void *a2)
{
  if (a1 != a2)
  {
    if (!a1) {
      __cxa_bad_typeid();
    }
    if (!sub_124AC4(*(void *)(*a1 - 8LL), *(void *)(*a2 - 8LL))) {
      return 1LL;
    }
    if (!v4) {
      return 1LL;
    }
    uint64_t v5 = v4;
    if (*((_DWORD *)a1 + 6) != *((_DWORD *)v4 + 6) || (a1[4] == 0LL) != (v4[4] == 0LL)) {
      return 1LL;
    }
    if ((*(unsigned int (**)(void *))(*a1 + 40LL))(a1)
      && (*(unsigned int (**)(void *))(*v5 + 40LL))(v5))
    {
      double v6 = (*(double (**)(void *))*a1)(a1);
      return v6 != (*(double (**)(void *))*v5)(v5);
    }

    int v8 = (*(uint64_t (**)(void *))(*a1 + 40LL))(a1);
    if (a1[4])
    {
      int v9 = *((_DWORD *)a1 + 6);
      if (v9 >= 1)
      {
        uint64_t v10 = 0LL;
        while (1)
        {
          uint64_t v11 = *(void *)(a1[4] + 8 * v10);
          if ((v11 == 0) != (*(void *)(v5[4] + 8 * v10) == 0LL)) {
            break;
          }
          if (v11)
          {
            int v9 = *((_DWORD *)a1 + 6);
          }

          BOOL result = 0LL;
          if (++v10 >= v9) {
            return result;
          }
        }

        return 1LL;
      }
    }
  }

  return 0LL;
}

uint64_t sub_15216C(uint64_t a1, void *a2)
{
  if ((void *)a1 == a2) {
    return 1LL;
  }
  if (!a1) {
    __cxa_bad_typeid();
  }
  uint64_t result = sub_124AC4(*(void *)(*(void *)a1 - 8LL), *(void *)(*a2 - 8LL));
  if ((_DWORD)result)
  {
    if (result)
    {
      uint64_t v5 = (void *)result;
      if (*(_DWORD *)(a1 + 24) != *(_DWORD *)(result + 24)
        || (*(void *)(a1 + 32) == 0LL) != (*(void *)(result + 32) == 0LL))
      {
        return 0LL;
      }

      if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 40LL))(a1)
        && (*(unsigned int (**)(void *))(*v5 + 40LL))(v5))
      {
        double v6 = (**(double (***)(uint64_t))a1)(a1);
        return v6 == (*(double (**)(void *))*v5)(v5);
      }

      int v7 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40LL))(a1);
      if (*(void *)(a1 + 32))
      {
        int v8 = *(_DWORD *)(a1 + 24);
        if (v8 >= 1)
        {
          uint64_t v9 = 0LL;
          while (1)
          {
            uint64_t v10 = *(void *)(*(void *)(a1 + 32) + 8 * v9);
            if ((v10 == 0) != (*(void *)(v5[4] + 8 * v9) == 0LL)) {
              break;
            }
            if (v10)
            {
              int v8 = *(_DWORD *)(a1 + 24);
            }

            ++v9;
            uint64_t result = 1LL;
            if (v9 >= v8) {
              return result;
            }
          }

          return 0LL;
        }
      }

      return 1LL;
    }
  }

  return result;
}

void sub_152318(void *a1)
{
  if (a1) {
    free(a1);
  }
}

void sub_15234C(_Unwind_Exception *exception_object)
{
  if (v1) {
    free(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_152368(void *a1)
{
  if (a1) {
    free(a1);
  }
}

void sub_15239C(_Unwind_Exception *exception_object)
{
  if (v1) {
    free(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1523B4()
{
  return 0LL;
}

uint64_t sub_1523BC()
{
  return 0LL;
}

uint64_t sub_1523C8(uint64_t a1)
{
  return 0LL;
}

void sub_1523F8(void *a1)
{
  if (a1) {
    free(a1);
  }
}

void sub_15242C(_Unwind_Exception *exception_object)
{
  if (v1) {
    free(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_152448(void *a1)
{
  if (a1) {
    free(a1);
  }
}

void sub_15247C(_Unwind_Exception *exception_object)
{
  if (v1) {
    free(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_152494(uint64_t a1)
{
  return (__int16)word_1FB980[(*(unsigned int (**)(uint64_t))(*(void *)a1 + 288LL))(a1)];
}

BOOL sub_1524BC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 16);
  BOOL result = 1;
  if (!v4 || !(*(unsigned int (**)(uint64_t, uint64_t))(*(void *)v4 + 56LL))(v4, a2))
  {
    uint64_t v5 = *(void *)(a1 + 24);
  }

  return result;
}

uint64_t sub_152520(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = (void *)(a1 + 16);
  if (*(void *)(a1 + 16) != a2)
  {
    uint64_t v5 = (void *)(a1 + 24);
    if (*(void *)(a1 + 24) != a2) {
      return 0LL;
    }
  }

  if (a2) {
    (*(void (**)(uint64_t))(*(void *)a2 + 152LL))(a2);
  }
  void *v5 = a3;
  *(void *)(a3 + _Block_object_dispose(va, 8) = a1;
  return 1LL;
}

uint64_t sub_152590(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 24) + 72LL))( *(void *)(a1 + 24),  a2,  a3);
}

uint64_t sub_1525E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 24) + 80LL))( *(void *)(a1 + 24),  a2,  a3);
}

uint64_t sub_152630(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 16);
  if (v4) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v4 + 88LL))(v4, a2);
  }
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 88LL))(result, a2);
  }
  return result;
}

char *sub_152688(void **a1)
{
  uint64_t v2 = (char *)(*(uint64_t (**)(void *))(*a1[2] + 104LL))(a1[2]);
  size_t v3 = (char *)(*(uint64_t (**)(void *))(*a1[3] + 104LL))(a1[3]);
  uint64_t v4 = (&off_2ADCD0)[((unsigned int (*)(void **))(*a1)[36])(a1)];
  uint64_t v5 = a1[2];
  if (v5) {
  else
  }
    BOOL v6 = 1;
  int v7 = a1[3];
  if (v7) {
  else
  }
    BOOL v8 = 1;
  size_t v9 = strlen(v2);
  size_t v10 = strlen(v3);
  size_t v11 = strlen(v4);
  uint64_t v12 = (char *)operator new[](v9 + v10 + v11 + 7);
  uint64_t v13 = v12;
  if (!v6 || v8)
  {
    if (!v6 || !v8) {
      int v14 = "(%s) %s (%s)";
    }
    else {
      int v14 = "%s %s %s";
    }
    if (v6 || !v8) {
      sprintf(v12, v14, v2, v4, v3);
    }
    else {
      sprintf(v12, "(%s) %s %s");
    }
  }

  else
  {
    sprintf(v12, "%s %s (%s)");
  }

  if (v2) {
    operator delete[](v2);
  }
  if (v3) {
    operator delete[](v3);
  }
  return v13;
}

uint64_t sub_152814(void **a1)
{
  uint64_t v2 = (*(uint64_t (**)(void *))(*a1[2] + 120LL))(a1[2]);
  uint64_t v3 = (*(uint64_t (**)(void *))(*a1[3] + 120LL))(a1[3]);
  uint64_t v4 = ((uint64_t (*)(void **))(*a1)[36])(a1);
  return ((uint64_t (*)(void **, uint64_t, uint64_t, uint64_t))(*a1)[25])(a1, v4, v2, v3);
}

uint64_t sub_152948(void *a1, void *a2)
{
  if (!a1) {
    __cxa_bad_typeid();
  }
  if (!sub_124AC4(*(void *)(*a1 - 8LL), *(void *)(*a2 - 8LL))) {
    return 1LL;
  }
  if ((*(unsigned int (**)(void *))(*a1 + 40LL))(a1)
    && (*(unsigned int (**)(void *))(*v4 + 40LL))(v4))
  {
    double v5 = (*(double (**)(void *))*a1)(a1);
    return v5 != (*(double (**)(void *))*v4)(v4);
  }

  uint64_t v7 = a1[2];
  if ((v7 == 0) != (v4[2] == 0LL)) {
    return 1LL;
  }
  uint64_t v8 = a1[3];
  if ((v8 == 0) != (v4[3] == 0LL)) {
    return 1LL;
  }
  else {
    return (*(uint64_t (**)(uint64_t))(*(void *)v8 + 128LL))(v8);
  }
}

uint64_t sub_152A74(void *a1, void *a2)
{
  if (!a1) {
    __cxa_bad_typeid();
  }
  uint64_t result = sub_124AC4(*(void *)(*a1 - 8LL), *(void *)(*a2 - 8LL));
  if ((_DWORD)result)
  {
    if ((*(unsigned int (**)(void *))(*a1 + 40LL))(a1)
      && (*(unsigned int (**)(void *))(*v5 + 40LL))(v5))
    {
      double v6 = (*(double (**)(void *))*a1)(a1);
      return v6 == (*(double (**)(void *))*v5)(v5);
    }

    else
    {
      uint64_t v7 = a1[2];
      if ((v7 == 0) != (v5[2] == 0LL)) {
        return 0LL;
      }
      uint64_t v8 = a1[3];
      if ((v8 == 0) != (v5[3] == 0LL)) {
        return 0LL;
      }
      else {
        return (*(uint64_t (**)(uint64_t))(*(void *)v8 + 136LL))(v8);
      }
    }
  }

  return result;
}

void sub_152BA4(void *a1)
{
  if (a1) {
    free(a1);
  }
}

void sub_152BD8(_Unwind_Exception *exception_object)
{
  if (v1) {
    free(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_152BF0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (void *)(a1 + 16);
  if (*(void *)(a1 + 16) == a2 || (uint64_t v2 = (void *)(a1 + 24), *(void *)(a1 + 24) == a2)) {
    void *v2 = 0LL;
  }
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 64LL))(*(void *)(a1 + 8));
}

void sub_152C30(void *a1)
{
  if (a1) {
    free(a1);
  }
}

void sub_152C64(_Unwind_Exception *exception_object)
{
  if (v1) {
    free(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_152C80(void *a1)
{
  if (a1) {
    free(a1);
  }
}

void sub_152CB4(_Unwind_Exception *exception_object)
{
  if (v1) {
    free(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_152CD0(void *a1)
{
  if (a1) {
    free(a1);
  }
}

void sub_152D04(_Unwind_Exception *exception_object)
{
  if (v1) {
    free(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_152D20(void *a1)
{
  if (a1) {
    free(a1);
  }
}

void sub_152D54(_Unwind_Exception *exception_object)
{
  if (v1) {
    free(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_152D70(void *a1)
{
  if (a1) {
    free(a1);
  }
}

void sub_152DA4(_Unwind_Exception *exception_object)
{
  if (v1) {
    free(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_152DC0(void *a1)
{
  if (a1) {
    free(a1);
  }
}

void sub_152DF4(_Unwind_Exception *exception_object)
{
  if (v1) {
    free(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_152E10(void *a1)
{
  if (a1) {
    free(a1);
  }
}

void sub_152E44(_Unwind_Exception *exception_object)
{
  if (v1) {
    free(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_152E60(void *a1)
{
  if (a1) {
    free(a1);
  }
}

void sub_152E94(_Unwind_Exception *exception_object)
{
  if (v1) {
    free(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_152EB0(void *a1)
{
  if (a1) {
    free(a1);
  }
}

void sub_152EE4(_Unwind_Exception *exception_object)
{
  if (v1) {
    free(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_152F00(void *a1)
{
  if (a1) {
    free(a1);
  }
}

void sub_152F34(_Unwind_Exception *exception_object)
{
  if (v1) {
    free(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_152F50(void *a1)
{
  if (a1) {
    free(a1);
  }
}

void sub_152F84(_Unwind_Exception *exception_object)
{
  if (v1) {
    free(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_152FA0(void *a1)
{
  if (a1) {
    free(a1);
  }
}

void sub_152FD4(_Unwind_Exception *exception_object)
{
  if (v1) {
    free(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_152FF0(void *a1)
{
  if (a1) {
    free(a1);
  }
}

void sub_153024(_Unwind_Exception *exception_object)
{
  if (v1) {
    free(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_153040(void *a1)
{
  if (a1) {
    free(a1);
  }
}

void sub_153074(_Unwind_Exception *exception_object)
{
  if (v1) {
    free(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_153090(void *a1)
{
  if (a1) {
    free(a1);
  }
}

void sub_1530C4(_Unwind_Exception *exception_object)
{
  if (v1) {
    free(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_1530E0(void *a1)
{
  if (a1) {
    free(a1);
  }
}

void sub_153114(_Unwind_Exception *exception_object)
{
  if (v1) {
    free(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_153130(void *a1)
{
  if (a1) {
    free(a1);
  }
}

void sub_153164(_Unwind_Exception *exception_object)
{
  if (v1) {
    free(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_153180(void *a1)
{
  if (a1) {
    free(a1);
  }
}

void sub_1531B4(_Unwind_Exception *exception_object)
{
  if (v1) {
    free(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1531CC(uint64_t a1)
{
  return (***(uint64_t (****)(void))(a1 + 16))(*(void *)(a1 + 16));
}

uint64_t sub_1531DC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 8LL))(*(void *)(a1 + 16));
}

uint64_t sub_1531EC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 16LL))(*(void *)(a1 + 16));
}

void *sub_1531FC(void *a1)
{
  *a1 = off_257DD8;
  uint64_t v2 = a1[2];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 152LL))(v2);
  }
  a1[1] = 0LL;
  a1[2] = 0LL;
  *a1 = off_24E938;
  return a1;
}

void sub_15324C(_Unwind_Exception *a1)
{
  void *v1 = off_24E938;
  v1[1] = 0LL;
  _Unwind_Resume(a1);
}

void sub_15325C(void *a1)
{
  *a1 = off_257DD8;
  uint64_t v2 = a1[2];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 152LL))(v2);
  }
  free(a1);
}

void sub_15329C(_Unwind_Exception *a1)
{
  void *v1 = off_24E938;
  v1[1] = 0LL;
  free(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1532BC()
{
  return 0LL;
}

void *sub_1532C4(void *a1)
{
  *a1 = off_257F10;
  uint64_t v2 = a1[3];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 152LL))(v2);
  }
  a1[3] = 0LL;
  *a1 = off_257DD8;
  uint64_t v3 = a1[2];
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 152LL))(v3);
  }
  a1[1] = 0LL;
  a1[2] = 0LL;
  *a1 = off_24E938;
  return a1;
}

void sub_153338(_Unwind_Exception *exception_object)
{
  void *v1 = off_24E938;
  v1[1] = 0LL;
  _Unwind_Resume(exception_object);
}

void sub_15337C(void *a1)
{
  void *v1 = off_24E938;
  v1[1] = 0LL;
  sub_AA94(a1);
}

void sub_153390(void *a1)
{
  if (a1) {
    free(a1);
  }
}

void sub_1533C4(_Unwind_Exception *exception_object)
{
  if (v1) {
    free(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1533DC(uint64_t a1)
{
  *(void *)a1 = off_258048;
  uint64_t v2 = *(void **)(a1 + 32);
  if (v2)
  {
    int v3 = *(_DWORD *)(a1 + 24);
    if (v3 < 1) {
      goto LABEL_8;
    }
    for (uint64_t i = 0LL; i < v3; ++i)
    {
      uint64_t v5 = *(void *)(*(void *)(a1 + 32) + 8 * i);
      if (v5)
      {
        (*(void (**)(uint64_t))(*(void *)v5 + 152LL))(v5);
        int v3 = *(_DWORD *)(a1 + 24);
      }
    }

    uint64_t v2 = *(void **)(a1 + 32);
    if (v2) {
LABEL_8:
    }
      operator delete[](v2);
    *(void *)(a1 + 32) = 0LL;
  }

  *(_DWORD *)(a1 + 24) = 0;
  *(void *)a1 = off_257DD8;
  uint64_t v6 = *(void *)(a1 + 16);
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 152LL))(v6);
  }
  *(void *)(a1 + _Block_object_dispose(va, 8) = 0LL;
  *(void *)(a1 + 16) = 0LL;
  *(void *)a1 = off_24E938;
  return a1;
}

void sub_15348C(_Unwind_Exception *exception_object)
{
  void *v1 = off_24E938;
  v1[1] = 0LL;
  _Unwind_Resume(exception_object);
}

void sub_1534D0(void *a1)
{
  void *v1 = off_24E938;
  v1[1] = 0LL;
  sub_AA94(a1);
}

void sub_1534E4(void *a1)
{
  if (a1) {
    free(a1);
  }
}

void sub_153518(_Unwind_Exception *exception_object)
{
  if (v1) {
    free(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_153530(uint64_t a1)
{
  return (***(uint64_t (****)(void))(a1 + 16))(*(void *)(a1 + 16));
}

uint64_t sub_153540(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 8LL))(*(void *)(a1 + 16));
}

uint64_t sub_153550(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 16LL))(*(void *)(a1 + 16));
}

void *sub_153560(void *a1)
{
  *a1 = off_258180;
  uint64_t v2 = a1[2];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 152LL))(v2);
  }
  a1[1] = 0LL;
  a1[2] = 0LL;
  *a1 = off_252F20;
  return a1;
}

void sub_1535B0(_Unwind_Exception *a1)
{
  void *v1 = off_252F20;
  v1[1] = 0LL;
  _Unwind_Resume(a1);
}

void sub_1535C0(void *a1)
{
  *a1 = off_258180;
  uint64_t v2 = a1[2];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 152LL))(v2);
  }
  free(a1);
}

void sub_153600(_Unwind_Exception *a1)
{
  void *v1 = off_252F20;
  v1[1] = 0LL;
  free(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_153620()
{
  return 0LL;
}

void *sub_153628(void *a1)
{
  *a1 = off_2582B8;
  uint64_t v2 = a1[3];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 152LL))(v2);
  }
  a1[3] = 0LL;
  *a1 = off_258180;
  uint64_t v3 = a1[2];
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 152LL))(v3);
  }
  a1[1] = 0LL;
  a1[2] = 0LL;
  *a1 = off_252F20;
  return a1;
}

void sub_15369C(_Unwind_Exception *exception_object)
{
  void *v1 = off_252F20;
  v1[1] = 0LL;
  _Unwind_Resume(exception_object);
}

void sub_1536E0(void *a1)
{
  void *v1 = off_252F20;
  v1[1] = 0LL;
  sub_AA94(a1);
}

void sub_1536F4(void *a1)
{
  if (a1) {
    free(a1);
  }
}

void sub_153728(_Unwind_Exception *exception_object)
{
  if (v1) {
    free(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_153740(uint64_t a1)
{
  *(void *)a1 = off_2583F0;
  uint64_t v2 = *(void **)(a1 + 32);
  if (v2)
  {
    int v3 = *(_DWORD *)(a1 + 24);
    if (v3 < 1) {
      goto LABEL_8;
    }
    for (uint64_t i = 0LL; i < v3; ++i)
    {
      uint64_t v5 = *(void *)(*(void *)(a1 + 32) + 8 * i);
      if (v5)
      {
        (*(void (**)(uint64_t))(*(void *)v5 + 152LL))(v5);
        int v3 = *(_DWORD *)(a1 + 24);
      }
    }

    uint64_t v2 = *(void **)(a1 + 32);
    if (v2) {
LABEL_8:
    }
      operator delete[](v2);
    *(void *)(a1 + 32) = 0LL;
  }

  *(_DWORD *)(a1 + 24) = 0;
  *(void *)a1 = off_258180;
  uint64_t v6 = *(void *)(a1 + 16);
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 152LL))(v6);
  }
  *(void *)(a1 + _Block_object_dispose(va, 8) = 0LL;
  *(void *)(a1 + 16) = 0LL;
  *(void *)a1 = off_252F20;
  return a1;
}

void sub_1537F0(_Unwind_Exception *exception_object)
{
  void *v1 = off_252F20;
  v1[1] = 0LL;
  _Unwind_Resume(exception_object);
}

void sub_153834(void *a1)
{
  void *v1 = off_252F20;
  v1[1] = 0LL;
  sub_AA94(a1);
}

void sub_153848(void *a1)
{
  if (a1) {
    free(a1);
  }
}

void sub_15387C(_Unwind_Exception *exception_object)
{
  if (v1) {
    free(v1);
  }
  _Unwind_Resume(exception_object);
}

_DWORD *sub_153894(uint64_t a1, int a2)
{
  if (a2 < 0) {
    size_t v4 = -1LL;
  }
  else {
    size_t v4 = 4LL * a2;
  }
  uint64_t result = operator new[](v4);
  if (a2 >= 1)
  {
    uint64_t v6 = a2;
    int v7 = *(_DWORD *)(a1 + 16);
    uint64_t v8 = result;
    do
    {
      *v8++ = v7;
      --v6;
    }

    while (v6);
  }

  return result;
}

char *sub_1538E4(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v5 = a3;
  if (a3 < 0) {
    size_t v6 = -1LL;
  }
  else {
    size_t v6 = 4LL * a3;
  }
  uint64_t result = (char *)operator new[](v6);
  if (a3 >= 1)
  {
    uint64_t v8 = 0LL;
    int v9 = *(_DWORD *)(a1 + 16);
    do
    {
      *(_DWORD *)&result[v8] = v9;
      v8 += 4LL;
    }

    while (4 * v5 != v8);
  }

  return result;
}

char *sub_153970(uint64_t a1)
{
  return mathParser::number2cString<float>(*(float *)(a1 + 16));
}

BOOL sub_153978(float (***a1)(void), void *lpsrc)
{
  if (!v3) {
    return 1LL;
  }
  size_t v4 = v3;
  float v5 = (**a1)(a1);
  return v5 != (**v4)(v4);
}

float (***sub_1539F8(float (***a1)(void), void *lpsrc))(void)
{
  if (result)
  {
    size_t v4 = result;
    float v5 = (**a1)(a1);
    return (float (***)(void))(v5 == (**v4)(v4));
  }

  return result;
}

uint64_t sub_153A70(uint64_t a1, void *a2)
{
  *(void *)a1 = off_258528;
  *(void *)(a1 + _Block_object_dispose(va, 8) = 0LL;
  uint64_t v3 = a2[3];
  *(void *)(a1 + 16) = v3;
  size_t v4 = (const char *)a2[1];
  uint64_t v5 = a2[2] - (void)v4;
  if (v5 < -2) {
    size_t v6 = -1LL;
  }
  else {
    size_t v6 = v5 + 2;
  }
  int v7 = (char *)operator new[](v6);
  *(void *)(a1 + 32) = v7;
  strncpy(v7, v4, v5 + 1)[v5 + 1] = 0;
  if (v3) {
    int v8 = (*(uint64_t (**)(uint64_t, char *))(*(void *)v3 + 424LL))(v3, v7);
  }
  else {
    int v8 = -1;
  }
  *(_DWORD *)(a1 + 24) = v8;
  return a1;
}

void sub_153B0C(_Unwind_Exception *a1)
{
  void *v1 = off_24E938;
  v1[1] = 0LL;
  _Unwind_Resume(a1);
}

uint64_t sub_153B1C(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(**(void **)(a1 + 16) + 320LL))( *(void *)(a1 + 16),  *(unsigned int *)(a1 + 24));
}

uint64_t sub_153B34(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void, void, uint64_t))(**(void **)(a1 + 16) + 368LL))( *(void *)(a1 + 16),  *(unsigned int *)(a1 + 24),  a2);
}

uint64_t sub_153B7C(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(**(void **)(a1 + 16) + 368LL))( *(void *)(a1 + 16),  *(unsigned int *)(a1 + 24));
}

uint64_t sub_153BE8()
{
  return 1LL;
}

uint64_t sub_153BF0()
{
  return 0LL;
}

uint64_t sub_153BF8()
{
  return 15LL;
}

BOOL sub_153C00(uint64_t a1, char *__s1)
{
  return __s1 && strcmp(__s1, *(const char **)(a1 + 32)) == 0;
}

uint64_t sub_153C34()
{
  return 0LL;
}

uint64_t sub_153C3C(unsigned int *a1, char *__s2, uint64_t a3)
{
  if (!__s2) {
    (*(void (**)(unsigned int *, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 272LL))(a1, 20LL, -1LL, -1LL);
  }
  uint64_t result = strcmp(*((const char **)a1 + 4), __s2);
  if (!(_DWORD)result) {
    return (*(uint64_t (**)(unsigned int *, void, uint64_t))(*(void *)a1 + 80LL))(a1, a1[6], a3);
  }
  return result;
}

_DWORD *sub_153CBC(_DWORD *result, int a2, _DWORD *lpsrc)
{
  if (lpsrc != result)
  {
    uint64_t v3 = result;
    if (result[6] == a2)
    {
      BOOL v6 = v5 == 0LL;
      if (!v5) {
        uint64_t v5 = lpsrc;
      }
      uint64_t v7 = 288LL;
      if (v6) {
        uint64_t v7 = 120LL;
      }
      uint64_t v8 = (*(uint64_t (**)(void))(*v5 + v7))();
      uint64_t v9 = v3[1];
      if (v9
        && (uint64_t v10 = v3[2], (*(unsigned int (**)(uint64_t, void *, uint64_t))(*(void *)v9 + 64LL))(v9, v3, v8)))
      {
        return (_DWORD *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v8 + 88LL))(v8, v10);
      }

      else
      {
        return (_DWORD *)(*(uint64_t (**)(void *, uint64_t, uint64_t, uint64_t))(*v3 + 272LL))( v3,  21LL,  -1LL,  -1LL);
      }
    }
  }

  return result;
}

uint64_t sub_153DA4(uint64_t result, uint64_t a2)
{
  *(void *)(result + 16) = a2;
  if (a2)
  {
    uint64_t v2 = result;
    uint64_t result = (*(uint64_t (**)(uint64_t, void))(*(void *)a2 + 424LL))(a2, *(void *)(result + 32));
    *(_DWORD *)(v2 + 24) = result;
  }

  return result;
}

char *sub_153DE8(uint64_t a1)
{
  uint64_t v1 = *(const char **)(a1 + 32);
  size_t v2 = strlen(v1);
  uint64_t v3 = (char *)operator new[](v2 + 1);
  return strcpy(v3, v1);
}

float *sub_153E18(void *a1, char *__s2)
{
  if (!__s2 || (size_t v4 = (const char *)a1[4]) == 0LL)
  {
    (*(void (**)(void *, uint64_t, uint64_t, uint64_t))(*a1 + 272LL))(a1, 21LL, -1LL, -1LL);
    size_t v4 = (const char *)a1[4];
  }

  int v5 = strcmp(v4, __s2);
  uint64_t result = (float *)sub_122A0C(0x18uLL);
  *(void *)uint64_t result = off_24D3F8;
  *((void *)result + 1) = 0LL;
  float v7 = 0.0;
  if (!v5) {
    float v7 = 1.0;
  }
  result[4] = v7;
  return result;
}

void *sub_153E98(uint64_t a1)
{
  size_t v2 = sub_122A0C(0x28uLL);
  sub_15410C((uint64_t)v2, *(char **)(a1 + 32));
  return v2;
}

void sub_153ECC(_Unwind_Exception *exception_object)
{
  if (v1) {
    free(v1);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_153EE4(uint64_t a1, void *a2)
{
  if (!a1) {
    __cxa_bad_typeid();
  }
  if (!sub_124AC4(*(void *)(*(void *)a1 - 8LL), *(void *)(*a2 - 8LL))) {
    return 1LL;
  }
  if (!v4) {
    return 1LL;
  }
  int v5 = v4;
  unint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 288LL))(a1);
  unint64_t v7 = (*(uint64_t (**)(void *))(*(void *)v5 + 288LL))(v5);
  if (v6 | v7)
  {
    if ((v6 == 0) != (v7 != 0)) {
      return strcmp((const char *)v6, (const char *)v7) != 0;
    }
    return 1LL;
  }

  return 0LL;
}

uint64_t sub_153FB0(uint64_t a1, void *a2)
{
  if (!a1) {
    __cxa_bad_typeid();
  }
  uint64_t result = sub_124AC4(*(void *)(*(void *)a1 - 8LL), *(void *)(*a2 - 8LL));
  if ((_DWORD)result)
  {
    if (result)
    {
      uint64_t v5 = result;
      unint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 288LL))(a1);
      unint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 288LL))(v5);
      if (v6 | v7) {
        return (v6 == 0) != (v7 != 0) && strcmp((const char *)v6, (const char *)v7) == 0;
      }
      else {
        return 1LL;
      }
    }
  }

  return result;
}

void *sub_15407C(void *a1)
{
  *a1 = off_258528;
  size_t v2 = (void *)a1[4];
  if (v2) {
    operator delete[](v2);
  }
  a1[4] = 0LL;
  *a1 = off_24E938;
  a1[1] = 0LL;
  return a1;
}

void sub_1540C4(void *a1)
{
  *a1 = off_258528;
  size_t v2 = (void *)a1[4];
  if (v2) {
    operator delete[](v2);
  }
  free(a1);
}

uint64_t sub_1540FC(uint64_t a1)
{
  return *(void *)(a1 + 32);
}

uint64_t sub_154104(uint64_t a1)
{
  return *(unsigned int *)(a1 + 24);
}

uint64_t sub_15410C(uint64_t a1, char *__s)
{
  *(void *)(a1 + _Block_object_dispose(va, 8) = 0LL;
  *(void *)(a1 + 16) = 0LL;
  *(void *)a1 = off_258528;
  size_t v4 = strlen(__s) + 1;
  uint64_t v5 = (char *)operator new[](v4);
  *(void *)(a1 + 32) = v5;
  strncpy(v5, __s, v4);
  *(_DWORD *)(a1 + 24) = -1;
  return a1;
}

void sub_154174(_Unwind_Exception *a1)
{
  void *v1 = off_24E938;
  v1[1] = 0LL;
  _Unwind_Resume(a1);
}

float sub_154184()
{
  return 0.0;
}

void sub_154190(void *a1)
{
  if (a1) {
    free(a1);
  }
}

void sub_1541C4(_Unwind_Exception *exception_object)
{
  if (v1) {
    free(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1541DC()
{
  return 0LL;
}

void *sub_1541E4(uint64_t a1, int a2)
{
  if (a2 < 0) {
    size_t v4 = -1LL;
  }
  else {
    size_t v4 = 8LL * a2;
  }
  uint64_t result = operator new[](v4);
  if (a2 >= 1)
  {
    uint64_t v6 = a2;
    uint64_t v7 = *(void *)(a1 + 16);
    uint64_t v8 = result;
    do
    {
      *v8++ = v7;
      --v6;
    }

    while (v6);
  }

  return result;
}

char *sub_154234(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v5 = a3;
  if (a3 < 0) {
    size_t v6 = -1LL;
  }
  else {
    size_t v6 = 8LL * a3;
  }
  uint64_t result = (char *)operator new[](v6);
  if (a3 >= 1)
  {
    uint64_t v8 = 0LL;
    uint64_t v9 = *(void *)(a1 + 16);
    do
    {
      *(void *)&result[v8] = v9;
      v8 += 8LL;
    }

    while (8 * v5 != v8);
  }

  return result;
}

char *sub_1542C0(uint64_t a1)
{
  return mathParser::number2cString<double>(*(double *)(a1 + 16));
}

BOOL sub_1542C8(double (***a1)(void), void *lpsrc)
{
  if (!v3) {
    return 1LL;
  }
  size_t v4 = v3;
  double v5 = (**a1)(a1);
  return v5 != (**v4)(v4);
}

double (***sub_154348(double (***a1)(void), void *lpsrc))(void)
{
  if (result)
  {
    size_t v4 = result;
    double v5 = (**a1)(a1);
    return (double (***)(void))(v5 == (**v4)(v4));
  }

  return result;
}

uint64_t sub_1543C0(uint64_t a1, void *a2)
{
  *(void *)a1 = off_2587C0;
  *(void *)(a1 + _Block_object_dispose(va, 8) = 0LL;
  uint64_t v3 = a2[3];
  *(void *)(a1 + 16) = v3;
  size_t v4 = (const char *)a2[1];
  uint64_t v5 = a2[2] - (void)v4;
  if (v5 < -2) {
    size_t v6 = -1LL;
  }
  else {
    size_t v6 = v5 + 2;
  }
  uint64_t v7 = (char *)operator new[](v6);
  *(void *)(a1 + 32) = v7;
  strncpy(v7, v4, v5 + 1)[v5 + 1] = 0;
  if (v3) {
    int v8 = (*(uint64_t (**)(uint64_t, char *))(*(void *)v3 + 424LL))(v3, v7);
  }
  else {
    int v8 = -1;
  }
  *(_DWORD *)(a1 + 24) = v8;
  return a1;
}

void sub_15445C(_Unwind_Exception *a1)
{
  void *v1 = off_252F20;
  v1[1] = 0LL;
  _Unwind_Resume(a1);
}

uint64_t sub_15446C(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(**(void **)(a1 + 16) + 320LL))( *(void *)(a1 + 16),  *(unsigned int *)(a1 + 24));
}

uint64_t sub_154484(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void, void, uint64_t))(**(void **)(a1 + 16) + 368LL))( *(void *)(a1 + 16),  *(unsigned int *)(a1 + 24),  a2);
}

uint64_t sub_1544CC(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(**(void **)(a1 + 16) + 368LL))( *(void *)(a1 + 16),  *(unsigned int *)(a1 + 24));
}

uint64_t sub_154538()
{
  return 1LL;
}

uint64_t sub_154540()
{
  return 0LL;
}

uint64_t sub_154548()
{
  return 15LL;
}

BOOL sub_154550(uint64_t a1, char *__s1)
{
  return __s1 && strcmp(__s1, *(const char **)(a1 + 32)) == 0;
}

uint64_t sub_154584()
{
  return 0LL;
}

uint64_t sub_15458C(unsigned int *a1, char *__s2, uint64_t a3)
{
  if (!__s2) {
    (*(void (**)(unsigned int *, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 272LL))(a1, 20LL, -1LL, -1LL);
  }
  uint64_t result = strcmp(*((const char **)a1 + 4), __s2);
  if (!(_DWORD)result) {
    return (*(uint64_t (**)(unsigned int *, void, uint64_t))(*(void *)a1 + 80LL))(a1, a1[6], a3);
  }
  return result;
}

_DWORD *sub_15460C(_DWORD *result, int a2, _DWORD *lpsrc)
{
  if (lpsrc != result)
  {
    uint64_t v3 = result;
    if (result[6] == a2)
    {
      BOOL v6 = v5 == 0LL;
      if (!v5) {
        uint64_t v5 = lpsrc;
      }
      uint64_t v7 = 288LL;
      if (v6) {
        uint64_t v7 = 120LL;
      }
      uint64_t v8 = (*(uint64_t (**)(void))(*v5 + v7))();
      uint64_t v9 = v3[1];
      if (v9
        && (uint64_t v10 = v3[2], (*(unsigned int (**)(uint64_t, void *, uint64_t))(*(void *)v9 + 64LL))(v9, v3, v8)))
      {
        return (_DWORD *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v8 + 88LL))(v8, v10);
      }

      else
      {
        return (_DWORD *)(*(uint64_t (**)(void *, uint64_t, uint64_t, uint64_t))(*v3 + 272LL))( v3,  21LL,  -1LL,  -1LL);
      }
    }
  }

  return result;
}

uint64_t sub_1546F4(uint64_t result, uint64_t a2)
{
  *(void *)(result + 16) = a2;
  if (a2)
  {
    uint64_t v2 = result;
    uint64_t result = (*(uint64_t (**)(uint64_t, void))(*(void *)a2 + 424LL))(a2, *(void *)(result + 32));
    *(_DWORD *)(v2 + 24) = result;
  }

  return result;
}

char *sub_154738(uint64_t a1)
{
  uint64_t v1 = *(const char **)(a1 + 32);
  size_t v2 = strlen(v1);
  uint64_t v3 = (char *)operator new[](v2 + 1);
  return strcpy(v3, v1);
}

double *sub_154768(void *a1, char *__s2)
{
  if (!__s2 || (size_t v4 = (const char *)a1[4]) == 0LL)
  {
    (*(void (**)(void *, uint64_t, uint64_t, uint64_t))(*a1 + 272LL))(a1, 21LL, -1LL, -1LL);
    size_t v4 = (const char *)a1[4];
  }

  int v5 = strcmp(v4, __s2);
  uint64_t result = (double *)sub_122A0C(0x18uLL);
  *(void *)uint64_t result = off_24E1B0;
  result[1] = 0.0;
  double v7 = 0.0;
  if (!v5) {
    double v7 = 1.0;
  }
  result[2] = v7;
  return result;
}

void *sub_1547E8(uint64_t a1)
{
  size_t v2 = sub_122A0C(0x28uLL);
  sub_154A5C((uint64_t)v2, *(char **)(a1 + 32));
  return v2;
}

void sub_15481C(_Unwind_Exception *exception_object)
{
  if (v1) {
    free(v1);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_154834(uint64_t a1, void *a2)
{
  if (!a1) {
    __cxa_bad_typeid();
  }
  if (!sub_124AC4(*(void *)(*(void *)a1 - 8LL), *(void *)(*a2 - 8LL))) {
    return 1LL;
  }
  if (!v4) {
    return 1LL;
  }
  int v5 = v4;
  unint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 288LL))(a1);
  unint64_t v7 = (*(uint64_t (**)(void *))(*(void *)v5 + 288LL))(v5);
  if (v6 | v7)
  {
    if ((v6 == 0) != (v7 != 0)) {
      return strcmp((const char *)v6, (const char *)v7) != 0;
    }
    return 1LL;
  }

  return 0LL;
}

uint64_t sub_154900(uint64_t a1, void *a2)
{
  if (!a1) {
    __cxa_bad_typeid();
  }
  uint64_t result = sub_124AC4(*(void *)(*(void *)a1 - 8LL), *(void *)(*a2 - 8LL));
  if ((_DWORD)result)
  {
    if (result)
    {
      uint64_t v5 = result;
      unint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 288LL))(a1);
      unint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 288LL))(v5);
      if (v6 | v7) {
        return (v6 == 0) != (v7 != 0) && strcmp((const char *)v6, (const char *)v7) == 0;
      }
      else {
        return 1LL;
      }
    }
  }

  return result;
}

void *sub_1549CC(void *a1)
{
  *a1 = off_2587C0;
  size_t v2 = (void *)a1[4];
  if (v2) {
    operator delete[](v2);
  }
  a1[4] = 0LL;
  *a1 = off_252F20;
  a1[1] = 0LL;
  return a1;
}

void sub_154A14(void *a1)
{
  *a1 = off_2587C0;
  size_t v2 = (void *)a1[4];
  if (v2) {
    operator delete[](v2);
  }
  free(a1);
}

uint64_t sub_154A4C(uint64_t a1)
{
  return *(void *)(a1 + 32);
}

uint64_t sub_154A54(uint64_t a1)
{
  return *(unsigned int *)(a1 + 24);
}

uint64_t sub_154A5C(uint64_t a1, char *__s)
{
  *(void *)(a1 + _Block_object_dispose(va, 8) = 0LL;
  *(void *)(a1 + 16) = 0LL;
  *(void *)a1 = off_2587C0;
  size_t v4 = strlen(__s) + 1;
  uint64_t v5 = (char *)operator new[](v4);
  *(void *)(a1 + 32) = v5;
  strncpy(v5, __s, v4);
  *(_DWORD *)(a1 + 24) = -1;
  return a1;
}

void sub_154AC4(_Unwind_Exception *a1)
{
  void *v1 = off_252F20;
  v1[1] = 0LL;
  _Unwind_Resume(a1);
}

double sub_154AD4()
{
  return 0.0;
}

void sub_154AE0(void *a1)
{
  if (a1) {
    free(a1);
  }
}

void sub_154B14(_Unwind_Exception *exception_object)
{
  if (v1) {
    free(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_154B2C()
{
  return 0LL;
}

void sub_154B34(void *__p)
{
}

uint64_t sub_154B3C(__int128 *a1)
{
  __int128 v3 = *a1;
  *(void *)(v2 + 16) = *((void *)a1 + 2);
  *(_OWORD *)uint64_t v2 = v3;
  return *(void *)v1;
}

void *sub_154B54(void *a1)
{
  return __cxa_begin_catch(a1);
}

double datelineEaseInEaseOut(double a1)
{
  double v1 = 0.0;
  if (fabs(a1) >= 0.00001 && (double v1 = 1.0, fabs(a1 + -1.0) >= 0.00001)) {
    return Spline1(a1, 0.0, 0.5, 0.5, 1.0, 0.0, 0.0, 1.0, 1.0);
  }
  else {
    return v1;
  }
}

LABEL_110:
          double v108 = [v79 canPlay];
          [v79 imageAspectRatio];
          __int128 v110 = v109;
          if (v108)
          {
            [v79 imageAspectRatio];
            __int128 v112 = v111;
            [a4 localAspectRatio];
            double v114 = v113;
            if (v110 >= 1.0) {
              float v85 = v98 / v112 * v114;
            }
            else {
              id v98 = v85 * v112 / v114;
            }
            double v115 = v188;
          }

          else
          {
            double v115 = v188;
            -[MREffectDateline _sizeForBreakAspectRatio:size:inContext:]( v188,  "_sizeForBreakAspectRatio:size:inContext:",  a4,  v109,  v98,  v85);
            id v98 = v116;
            float v85 = v117;
          }

          objc_msgSend( v79,  "setDefaultSize:",  v98 * 0.5 * v115->super.mPixelSize.width,  v85 * 0.5 * v115->super.mPixelSize.height);
        }

        __int128 v76 = -[NSArray countByEnumeratingWithState:objects:count:]( v74,  "countByEnumeratingWithState:objects:count:",  &v204,  v227,  16LL);
      }

      while (v76);
    }

    double v202 = 0u;
    double v203 = 0u;
    double v200 = 0u;
    double v201 = 0u;
    double v118 = *(NSMutableDictionary **)((char *)&v188->mBreakInformation + 1);
    double v119 = [v118 countByEnumeratingWithState:&v200 objects:v226 count:16];
    uint64_t v10 = a4;
    a3 = v176;
    if (v119)
    {
      double v120 = v119;
      double v121 = *(void *)v201;
      do
      {
        for (m = 0LL; m != v120; m = (char *)m + 1)
        {
          if (*(void *)v201 != v121) {
            objc_enumerationMutation(v118);
          }
          double v123 = *(void *)(*((void *)&v200 + 1) + 8LL * (void)m);
          double v124 = [*(id *)((char *)&v188->mBreakInformation + 1) objectForKey:v123];
          objc_msgSend( -[NSDictionary objectForKey:]( -[MRLayerEffect slideProvidersForElementIDs](v188->super.mEffectLayer, "slideProvidersForElementIDs"),  "objectForKey:",  v123),  "defaultSize");
          objc_msgSend(v124, "setDefaultSize:");
        }

        double v120 = [v118 countByEnumeratingWithState:&v200 objects:v226 count:16];
      }

      while (v120);
    }
  }

  else
  {
    double v214 = 0u;
    double v215 = 0u;
    float v212 = 0u;
    double v213 = 0u;
    double v181 = *(NSMutableArray **)((char *)&v7->mChapterDurations + 1);
    a3 = v176;
    double v186 = [v181 countByEnumeratingWithState:&v212 objects:v229 count:16];
    if (v186)
    {
      double v183 = *(id *)v213;
      do
      {
        for (n = 0LL; n != v186; n = (char *)n + 1)
        {
          if (*(id *)v213 != v183) {
            objc_enumerationMutation(v181);
          }
          double v126 = [*(id *)(*((void *)&v212 + 1) + 8 * (void)n) objectForKey:@"weather"];
          if (v126)
          {
            double v127 = [v126 integerValue];
            double v128 = -[MREffectDateline _weatherStringForCondition:](v7, "_weatherStringForCondition:", v127);
            if (v128)
            {
              double v129 = v128;
              double v130 = objc_alloc_init(&OBJC_CLASS___MRImageProvider);
              -[MRImageProvider setAssetPath:]( v130,  "setAssetPath:",  objc_msgSend( +[MREffectManager sharedManager](MREffectManager, "sharedManager"),  "resourcePathForEffectID:andResource:",  v188->super.mEffectID,  +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"%@.png", v129)));
              -[MRImageProvider setImageSizeScript:](v130, "setImageSizeScript:", 0LL);
              -[MRImageProvider setOriginalImageSize:](v130, "setOriginalImageSize:", 370.0, 370.0);
              -[MRImageProvider setDefaultSize:]( v130,  "setDefaultSize:",  v188->super.mPixelSize.width * 0.3,  v188->super.mPixelSize.width * 0.3);
              [*(id *)((char *)&v188->mIndicies + 1) setObject:v130 forKey:v129];

              unint64_t v7 = v188;
            }

            double v131 = (_DWORD)v127 - 1;
            double v132 = 3LL;
            do
            {
              double v133 = v131 - 1;
              if (v131 < 1) {
                v131 += 18;
              }
              double v134 = -[MREffectDateline _weatherStringForCondition:](v7, "_weatherStringForCondition:", v131);
              if (![*(id *)((char *)&v7->mIndicies + 1) objectForKey:v134])
              {
                double v135 = objc_alloc_init(&OBJC_CLASS___MRImageProvider);
                double v136 = +[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"%@.png", v134);
                double v137 = +[MREffectManager sharedManager](&OBJC_CLASS___MREffectManager, "sharedManager");
                double v138 = v136;
                unint64_t v7 = v188;
                -[MRImageProvider setAssetPath:]( v135,  "setAssetPath:",  [v137 resourcePathForEffectID:v188->super.mEffectID andResource:v138]);
                -[MRImageProvider setImageSizeScript:](v135, "setImageSizeScript:", 0LL);
                -[MRImageProvider setOriginalImageSize:](v135, "setOriginalImageSize:", 370.0, 370.0);
                -[MRImageProvider setDefaultSize:]( v135,  "setDefaultSize:",  v7->super.mPixelSize.width * 0.3,  v7->super.mPixelSize.width * 0.3);
                [*(id *)((char *)&v188->mIndicies + 1) setObject:v135 forKey:v134];
              }

              double v131 = v133;
              --v132;
            }

            while (v132);
          }
        }

        double v186 = [v181 countByEnumeratingWithState:&v212 objects:v229 count:16];
      }

      while (v186);
    }

    uint64_t v10 = a4;
    [a4 localAspectRatio];
    -[MREffectDateline _updateSlideProviders:context:renderArguments:]( v7,  "_updateSlideProviders:context:renderArguments:",  a4,  a5,  v139);
  }

  unint64_t v7 = v188;
  BYTE1(v188->mSlideInformation) = 1;
  BYTE2(v188->mSlideInformation) = 0;
LABEL_144:
  double v140 = [*(id *)((char *)&v7->mChapterDurations + 1) count];
  double v141 = -[MREffectDateline _chapterIndexForTime:](v7, "_chapterIndexForTime:", a3);
  double v142 = (uint64_t)v140 - 1;
  else {
    double v143 = v141 & ~(v141 >> 63);
  }
  double v144 = -[MREffectDateline _chapterIndexForTime:](v7, "_chapterIndexForTime:", a3 + 4.0);
  if ((v144 & ~(v144 >> 63)) >= v142) {
    double v145 = v142;
  }
  else {
    double v145 = v144 & ~(v144 >> 63);
  }
  if (v145 != v143 && v145 < (unint64_t)[*(id *)((char *)&v7->mChapterDurations + 1) count])
  {
    -[MREffectDateline _unloadTextForChapter:](v7, "_unloadTextForChapter:", v143 - 1);
  }

  if (objc_msgSend(objc_msgSend(a5, "preloadQueue"), "operationCount"))
  {
    double v146 = -[MREffectDateline _chapterIndexForTime:](v7, "_chapterIndexForTime:", a3);
    if (v146 < 0)
    {
      if (a3 != 0.0) {
        goto LABEL_183;
      }
    }

    else
    {
      double v147 = v146;
      double v148 = [*(id *)((char *)&v7->mChapterDurations + 1) objectAtIndex:v146];
      -[MREffectDateline _startTimeForChapter:](v7, "_startTimeForChapter:", v147);
      float v150 = v149;
      if ([v148 objectForKey:@"title"]) {
        double v151 = 9.0;
      }
      else {
        double v151 = 4.0;
      }
      objc_msgSend(objc_msgSend(*(id *)((char *)&v7->mLengths + 1), "objectAtIndex:", v147), "doubleValue");
      double v153 = v152;
      if (a3 - v150 <= v151) {
        goto LABEL_183;
      }
      double v154 = a3 - (v150 + v151);
      double v198 = 0.0;
      double v199 = 0.0;
      double v155 = -[MREffectDateline _currentItemForChapter:atTime:forDuration:fromTime:]( v7,  "_currentItemForChapter:atTime:forDuration:fromTime:",  v147,  &v199,  &v198,  v154);
      double v156 = [v148 objectForKey:@"items"];
      if (v155 < [v156 count])
      {
        double v157 = [v156 objectAtIndex:v155];
        if (objc_msgSend( objc_msgSend(v157, "objectForKey:", @"type"),  "isEqualToString:",  @"photo"))
        {
          double v158 = -[NSDictionary objectForKey:]( -[MRLayerEffect slideProvidersForElementIDs](v7->super.mEffectLayer, "slideProvidersForElementIDs"),  "objectForKey:",  ImageKey((int64_t)objc_msgSend( objc_msgSend(v157, "objectForKey:", @"photoIndex"),  "integerValue")));
          [v158 imageAspectRatio];
          double v160 = v159 >= 0.5 && v159 <= 2.0;
        }
      }

      double v161 = v154 > v153 - v151 + -4.0 && v154 < v153 - v151 + -3.0;
      if (!v161)
      {
        if (v154 >= v153 - v151 + -2.0) {
          goto LABEL_183;
        }
        double v162 = v154 - v198;
        if (v154 - v198 < 1.0) {
          goto LABEL_183;
        }
        if (v162 <= 1.5 || v162 >= v199 + -0.5) {
          goto LABEL_183;
        }
      }
    }

    -[MRLayerEffect _stallRenderer](v7->super.mEffectLayer, "_stallRenderer");
  }

LABEL_183:
  v197.receiver = v7;
  v197.super_class = (Class)&OBJC_CLASS___MREffectDateline;
  -[MREffect prerenderForTime:inContext:withArguments:](&v197, "prerenderForTime:inContext:withArguments:", v10, a5, a3);
  double v193 = 0u;
  double v194 = 0u;
  double v195 = 0u;
  double v196 = 0u;
  double v164 = [*(id *)((char *)&v7->mBreakInformation + 1) allValues];
  double v165 = [v164 countByEnumeratingWithState:&v193 objects:v225 count:16];
  if (v165)
  {
    double v166 = v165;
    double v167 = *(void *)v194;
    do
    {
      for (iuint64_t i = 0LL; ii != v166; iuint64_t i = (char *)ii + 1)
      {
        if (*(void *)v194 != v167) {
          objc_enumerationMutation(v164);
        }
        double v169 = *(void **)(*((void *)&v193 + 1) + 8LL * (void)ii);
        objc_msgSend(v169, "updateStuffWithAssetManager:", objc_msgSend(v10, "assetManager"));
        [v169 prerenderForTime:v10 inContext:a5 withArguments:a3];
      }

      double v166 = [v164 countByEnumeratingWithState:&v193 objects:v225 count:16];
    }

    while (v166);
  }

  [*(id *)&v7->mIsRotating prerenderForTime:v10 inContext:a5 withArguments:a3];
  [*(id *)((char *)&v7->mTextBackground + 1) prerenderForTime:v10 inContext:a5 withArguments:a3];
  [*(id *)((char *)&v7->mQuoteOpen + 1) prerenderForTime:v10 inContext:a5 withArguments:a3];
  [*(id *)((char *)&v7->mQuoteClose + 1) prerenderForTime:v10 inContext:a5 withArguments:a3];
  [*(id *)((char *)&v7->mQuoteBox + 1) prerenderForTime:v10 inContext:a5 withArguments:a3];
  [*(id *)((char *)&v7->mWeatherWindowMask + 1) prerenderForTime:v10 inContext:a5 withArguments:a3];
  double v189 = 0u;
  double v190 = 0u;
  double v191 = 0u;
  double v192 = 0u;
  double v170 = [*(id *)((char *)&v7->mIndicies + 1) objectEnumerator];
  double v171 = [v170 countByEnumeratingWithState:&v189 objects:v224 count:16];
  if (v171)
  {
    double v172 = v171;
    double v173 = *(void *)v190;
    do
    {
      for (jj = 0LL; jj != v172; jj = (char *)jj + 1)
      {
        if (*(void *)v190 != v173) {
          objc_enumerationMutation(v170);
        }
        [*(id *)(*((void *)&v189 + 1) + 8 * (void)jj) prerenderForTime:v10 inContext:a5 withArguments:a3];
      }

      double v172 = [v170 countByEnumeratingWithState:&v189 objects:v224 count:16];
    }

    while (v172);
  }

  return 1;
}

LABEL_301:
      v331 = [v250 retainedByUserRenderedImageAtTime:a4 inContext:v442 withArguments:v7];
      [v331 aspectRatio];
      v315 = v332 > 2.0 || v332 < 0.5;
      v439 = v264;
      v427 = v273;
      if (!v315)
      {
        v359 = @"PlainTexture";
        v419 = v264;
        v422 = v273;
        if (!v232) {
          goto LABEL_333;
        }
LABEL_332:
        [a4 unsetShader];
        [a4 setShader:v359];
        goto LABEL_333;
      }

      v333 = v234;
      [v331 aspectRatio];
      -[MREffectDateline _sizeForBreakAspectRatio:size:inContext:](self, "_sizeForBreakAspectRatio:size:inContext:", a4);
      v335 = v334;
      v337 = v336;
      [a4 localAspectRatio];
      v339 = v338;
      v340 = 0.0;
      if (v409 >= 1.0)
      {
        v340 = 1.0;
        if (v409 <= v474[0] + -1.0)
        {
          v341 = ((v409 + -1.0) / (v474[0] + -2.0) + -0.5) * 3.14159274;
          v340 = (sinf(v341) + 1.0) * 0.5;
        }
      }

      v419 = v337;
      v422 = v335;
      v342 = v335 / v337 * v339;
      [v331 centerX];
      v344 = v343;
      [v331 centerY];
      v346 = v345;
      if (objc_msgSend( objc_msgSend( objc_msgSend(*(id *)((char *)&self->mDayImages + 1), "objectForKey:", v249),  "objectForKey:",  @"panEndDirection"),  "integerValue") == (id)-1) {
        v347 = -1LL;
      }
      else {
        v347 = 1LL;
      }
      [v331 aspectRatio];
      v349 = v348;
      v350 = 1.0 - v348 / v342;
      v351 = (double)v347;
      v352 = -(v350 * (double)v347);
      if (v241 < v410) {
        v352 = v350 * (double)v347;
      }
      v353 = -(v350 - v340 * (v350 + v350)) * v351;
      if (v444) {
        v353 = v352;
      }
      v354 = 1.0 - v342 / v349;
      v355 = -(v354 * v351);
      if (v241 < v410) {
        v355 = v354 * v351;
      }
      v356 = -(v354 - v340 * (v354 + v354)) * v351;
      if (v444) {
        v356 = v355;
      }
      if (v349 >= 1.0)
      {
        v357 = v356;
      }

      else
      {
        v354 = v350;
        v357 = v353;
      }

      if (v349 >= 1.0) {
        v344 = v356;
      }
      else {
        v346 = v353;
      }
      if (self->super._panoramaPanningOffsets)
      {
        -[MREffect valueForPanoramaPanningForElementID:value:minValue:maxValue:]( self,  "valueForPanoramaPanningForElementID:value:minValue:maxValue:",  v249,  v357,  -v354);
        if (v349 >= 1.0) {
          v344 = v358;
        }
        else {
          v346 = v358;
        }
      }

      double v234 = v333;
      double v273 = v427;
      [v331 setCenterX:v344];
      [v331 setCenterY:v346];
      v359 = @"PlainTextureHigh";
      uint64_t v68 = v441;
      double v225 = v458;
      if (!v232) {
        goto LABEL_332;
      }
LABEL_333:
      if (BYTE3(self->mSlideInformation))
      {
        v360 = v234 + v264 * -0.5 - v68;
        v361 = 0.0;
      }

      else
      {
        v361 = v225 + v273 * 0.5 - v68;
        v360 = v405;
      }

      v362 = v234;
      if ((v251 | v315) == 1)
      {
        v363 = [*(id *)&self->mIsRotating retainedByUserRenderedImageAtTime:a4 inContext:v442 withArguments:v7];
        +[MRCroppingSprite renderDumbImage:inContext:atPosition:andSize:]( &OBJC_CLASS___MRCroppingSprite,  "renderDumbImage:inContext:atPosition:andSize:",  v363,  a4,  v361,  v360,  v273,  v264);
        [v363 releaseByUser];
      }

      v364 = v273;
      v365 = v264;
      v367 = height;
      v366 = CGSizeZero.width;
      if (v251)
      {
        [v331 aspectRatio];
        v369 = v368;
        [v331 aspectRatio];
        v371 = v370;
        [a4 localAspectRatio];
        v373 = v372;
        if (v369 >= 1.0)
        {
          v365 = v427 / v371 * v373;
          v364 = v427;
          v367 = v365;
          v366 = v427;
        }

        else
        {
          v364 = v264 * v371 / v373;
          v365 = v264;
          v367 = v264;
          v366 = v364;
        }
      }

      v374 = *(void **)(&self->super._isInInteractiveMode + 1);
      v375 = (MRCroppingSprite *)[v374 objectForKey:v249];
      if (!v375)
      {
        v375 = objc_alloc_init(&OBJC_CLASS___MRCroppingSprite);
        [v374 setObject:v375 forKey:v249];
      }

      -[MRCroppingSprite setHitIsActive:](v375, "setHitIsActive:", 1LL);
      if (v406 < 0.999998987) {
        v376 = v251;
      }
      else {
        v376 = 0;
      }
      if (v376 != 1 || v444)
      {
        if (v315) {
          v380 = v419;
        }
        else {
          v380 = v365;
        }
        if (v315) {
          v381 = v422;
        }
        else {
          v381 = v364;
        }
        -[MRCroppingSprite renderImage:inContext:atPosition:andSize:]( v375,  "renderImage:inContext:atPosition:andSize:",  v331,  a4,  v361,  v360,  v381,  v380);
        a5 = v442;
        unint64_t v7 = v459;
      }

      else
      {
        objc_msgSend(a4, "unsetShader", 0.999998987, v406);
        unint64_t v7 = v459;
        a5 = v442;
        v377 = [v423 retainedByUserRenderedImageAtTime:a4 inContext:v442 withArguments:v459];
        [a4 setShader:@"TransitionDissolve"];
        *(float *)&v378 = v399;
        [a4 setShaderUniformFloat:@"progress" forKey:v378];
        v476[0] = xmmword_1FB8BC;
        v476[1] = unk_1FB8CC;
        -[MRCroppingSprite renderImage:inContext:atPosition:andSize:]( v375,  "renderImage:inContext:atPosition:andSize:",  v331,  a4,  v361,  v360,  0.05,  0.05);
        [a4 localAspectRatio];
        objc_msgSend(v377, "setOnContext:onTextureUnit:withReferenceAspectRatio:state:", a4, 1, v472);
        [v377 setPreservesAspectRatio:0];
        [a4 setTextureCoordinatesPointer:v476 onTextureUnit:1];
        -[MRCroppingSprite renderImage:inContext:atPosition:andSize:]( v375,  "renderImage:inContext:atPosition:andSize:",  v331,  a4,  v361,  v360,  v366,  v367);
        [a4 unsetTextureCoordinatesPointerOnTextureUnit:1];
        [v377 unsetOnContext:a4 onTextureUnit:1 state:v472];
        [v377 releaseByUser];
        [a4 unsetShader];
        if (v315) {
          v379 = @"PlainTextureHigh";
        }
        else {
          v379 = @"PlainTexture";
        }
        [a4 setShader:v379];
      }

      uint64_t v10 = v446;
      double v225 = v458;
      double v234 = v362;
      [v331 releaseByUser];
      v382 = objc_msgSend(v429, "objectForKey:", NSStringWithInteger("text", v241));
      v386 = v382;
      if (v382)
      {
        objc_msgSend( v382,  "relativeSizeInContextPixelSize:",  self->super.mPixelSize.width,  self->super.mPixelSize.height);
        v388 = v387;
        v389 = v383;
        v390 = v383 + 0.0500000007;
      }

      else
      {
        v390 = 0.0;
        v389 = height;
        v388 = CGSizeZero.width;
      }

      if (!v429 || v444)
      {
        double v231 = v431;
      }

      else
      {
        HIDWORD(v391) = HIDWORD(v401);
        double v231 = v431;
        if (v401 > 0.0)
        {
          LODWORD(v385) = 1.0;
          *(float *)&v391 = v398;
          *(float *)&v383 = v398;
          *(float *)&v384 = v398;
          [a4 composeForeColorRed:v476 green:v391 blue:v383 alpha:v384 saveTo:v385];
          v392 = -v439;
          if (BYTE3(self->mSlideInformation)) {
            v393 = v389 * -0.5 + v392 * 0.5 + -0.0500000007;
          }
          else {
            v393 = -1.0 - (-1.0 - (v360 + v392 * 0.5)) * 0.5;
          }
          v390 = v389 + 0.0500000007;
          +[MRCroppingSprite renderImage:inContext:atPosition:andSize:]( &OBJC_CLASS___MRCroppingSprite,  "renderImage:inContext:atPosition:andSize:",  v386,  a4,  0.0,  v393,  v388,  v389);
          [a4 restoreForeColor:v476];
        }
      }

      if (BYTE3(self->mSlideInformation))
      {
        double v234 = v234 - (v439 + 0.0500000007);
        if (v386)
        {
          if (v409 < v397 && !v410 && !v444)
          {
            v394 = v401;
LABEL_382:
            double v234 = v234 - v390 * v394;
            goto LABEL_383;
          }

          if (!v444)
          {
            v394 = v396;
            goto LABEL_382;
          }

          if (v433 + v240 == -1)
          {
            v394 = 1.0 - v396;
            goto LABEL_382;
          }
        }
      }

      else
      {
        double v225 = v458 + v427 + 0.0500000007;
      }

LABEL_383:
      uint64_t v68 = v441;
LABEL_384:
      [a4 restoreForeColor:v475];
      double v232 = v315;
      double v224 = v428;
      double v230 = v432;
LABEL_385:
      if (v230 == (id)++v240)
      {
        double v230 = [obj countByEnumeratingWithState:&v463 objects:v471 count:16];
        v231 += v240;
        if (v230) {
          goto LABEL_223;
        }
        break;
      }
    }
  }

LABEL_178:
  [a4 unsetShader];
}

LABEL_388:
                    LODWORD(v420) = 0;
                    objc_msgSend( *(id *)((char *)&self->mGrayImage + 1),  "renderImageOuter:inContext:atPosition:andSize:zRotation:",  v393,  a3,  v628,  v388,  v421,  v422,  v420);
                  }

                  else
                  {
                    v450 = [*(id *)&self->mIsRotating retainedByUserRenderedImageAtTime:a3 inContext:a5 withArguments:a4];
                    LODWORD(v451) = 0;
                    objc_msgSend( *(id *)((char *)&self->mGrayImage + 1),  "renderImageOuter:inContext:atPosition:andSize:zRotation:",  v450,  a3,  v628,  v388,  width,  v369,  v451);
                    [a3 unsetShader];
                    [a3 setShader:@"PlainTexture"];
                    LODWORD(v452) = 0;
                    objc_msgSend( *(id *)((char *)&self->mGrayImage + 1),  "renderImageInner:inContext:atPosition:andSize:zRotation:",  v450,  a3,  v628,  v388,  width,  v369,  v452);
                    [v450 releaseByUser];
                    [a3 unsetShader];
                    [a3 setShader:@"SoftspritePremultiplied"];
                    [a3 blend:2];
                    v442 = *(MRImage **)((char *)&self->mGrayImage + 1);
                    LODWORD(v443) = 0;
                    v444 = v393;
                    v445 = a3;
                    v446 = v628;
                    v447 = v388;
                    v448 = v585;
                    v449 = v587;
LABEL_412:
                    objc_msgSend( v442,  "renderImageOuter:inContext:atPosition:andSize:zRotation:",  v444,  v445,  v446,  v447,  v448,  v449,  v443);
                    if (!v592) {
                      [a3 blend:0];
                    }
                  }

                  -[NSNull releaseByUser](v393, "releaseByUser");
                  if (v354) {
                    goto LABEL_367;
                  }
                  goto LABEL_366;
                }

                [v392 canPlay];
                v421 = CGSizeZero.width;
                v422 = height;
                v354 = v599;
                float v62 = 0.5;
                v350 = v602;
                goto LABEL_388;
              }

              if (v354) {
                v411 = v369;
              }
              else {
                v411 = height;
              }
              if (v354) {
                v412 = width;
              }
              else {
                v412 = CGSizeZero.width;
              }
              v413 = v600;
              if (!v600) {
                v413 = [*(id *)((char *)&self->mQuoteClose + 1) retainedByUserRenderedImageAtTime:a3 inContext:a5 withArguments:a4];
              }
              LODWORD(v390) = 0;
              v600 = v413;
              objc_msgSend( *(id *)((char *)&self->mGrayImage + 1),  "renderImageOuter:inContext:atPosition:andSize:zRotation:",  v413,  a3,  v628,  v388,  v412,  v411,  v390);
              float v62 = 0.5;
              if (a9 < 1.0)
              {
                objc_msgSend(a3, "blend:", 2, a9);
                LODWORD(v414) = 1.0;
                LODWORD(v415) = 1.0;
                LODWORD(v416) = 1.0;
                *(float *)&v417 = v588;
                [a3 composeForeColorRed:v652 green:v414 blue:v415 alpha:v416 saveTo:v417];
                v419 = v593;
                if (!v593) {
                  v419 = [*(id *)&self->mIsRotating retainedByUserRenderedImageAtTime:a3 inContext:a5 withArguments:a4];
                }
                LODWORD(v41_Block_object_dispose(va, 8) = 0;
                v593 = v419;
                objc_msgSend( *(id *)((char *)&self->mGrayImage + 1),  "renderImageOuter:inContext:atPosition:andSize:zRotation:",  v419,  a3,  v628,  v388,  v412,  v411,  v418);
                [a3 restoreForeColor:v652];
                [a3 blend:0];
              }

              double v167 = v619;
              if (v354) {
                goto LABEL_367;
              }
            }

            else
            {
              double v167 = v619;
              float v62 = 0.5;
            }

double StretchRectangle(double *a1, char a2, double a3, double a4)
{
  float v4 = a3 / a4;
  double v5 = a1[1];
  float v6 = *a1;
  int v7 = a2 & 3;
  if (v7 == 3)
  {
    float v6 = v4 * v6;
  }

  else
  {
    if (v7 == 2)
    {
      double v8 = v6 + -1.0;
      double v9 = v4;
      double v10 = 1.0;
    }

    else
    {
      if (v7 != 1) {
        goto LABEL_8;
      }
      double v8 = v6 + 1.0;
      double v9 = v4;
      double v10 = -1.0;
    }

    float v6 = v10 + v8 * v9;
  }

id ComputeAnimationTimeBounds(void *a1, double *a2)
{
  id v3 = +[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array");
  __int128 v43 = 0u;
  __int128 v44 = 0u;
  __int128 v45 = 0u;
  __int128 v46 = 0u;
  id v4 = [a1 countByEnumeratingWithState:&v43 objects:v47 count:16];
  if (v4)
  {
    id v5 = v4;
    float v6 = @"subEffectID";
    int v7 = @"unload";
    uint64_t v8 = *(void *)v44;
    do
    {
      double v9 = 0LL;
      do
      {
        if (*(void *)v44 != v8) {
          objc_enumerationMutation(a1);
        }
        double v10 = *(void **)(*((void *)&v43 + 1) + 8LL * (void)v9);
        id v11 = [v10 objectForKey:v6];
        if (([v11 hasSuffix:@"still"] & 1) == 0
          && ([v11 isEqualToString:v7] & 1) == 0)
        {
          float v12 = v6;
          int v13 = a1;
          double v14 = v7;
          objc_msgSend(objc_msgSend(v10, "objectForKey:", @"startTime"), "doubleValue");
          double v16 = v15;
          objc_msgSend(objc_msgSend(v10, "objectForKey:", @"duration"), "doubleValue");
          double v18 = v16 + v17;
          int v19 = (char *)[v3 count];
          if (!v19) {
            goto LABEL_14;
          }
          double v20 = v19;
          double v21 = 0LL;
          char v22 = 1;
          while (1)
          {
            objc_msgSend(objc_msgSend(v3, "objectAtIndex:", v21), "doubleValue");
            if (v16 < v23) {
              break;
            }
            ++v21;
            v22 ^= 1u;
            if (v20 == v21) {
              goto LABEL_14;
            }
          }

          if (v20 == v21)
          {
LABEL_14:
            objc_msgSend( v3,  "addObject:",  +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v16));
            objc_msgSend( v3,  "addObject:",  +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v18));
LABEL_15:
            int v7 = v14;
            a1 = v13;
            float v6 = v12;
            goto LABEL_16;
          }

          if ((v22 & 1) != 0)
          {
            objc_msgSend(objc_msgSend(v3, "objectAtIndex:", v21), "doubleValue");
            double v25 = v24;
            double v26 = +[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", v16);
            if (v18 < v25)
            {
              [v3 insertObject:v26 atIndex:v21];
              objc_msgSend( v3,  "insertObject:atIndex:",  +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v18),  v21);
              goto LABEL_15;
            }

            [v3 replaceObjectAtIndex:v21++ withObject:v26];
          }

          if (v21 < v20)
          {
            char v27 = 0;
            BOOL v42 = (((_BYTE)v20 + ~(_BYTE)v21) & 1) == 0LL;
            while (1)
            {
              objc_msgSend(objc_msgSend(v3, "objectAtIndex:", v21), "doubleValue");
              if (v18 < v28) {
                break;
              }
              [v3 removeObjectAtIndex:v21];
              --v20;
              v27 ^= 1u;
              if (v21 >= v20)
              {
                char v27 = v42;
                break;
              }
            }

            if ((v27 & 1) != 0) {
              objc_msgSend( v3,  "insertObject:atIndex:",  +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v18),  v21);
            }
          }

          int v7 = v14;
          a1 = v13;
          float v6 = v12;
        }

id StretchTime(void *a1, double a2, double a3)
{
  id result = [a1 count];
  double v7 = 0.0;
  if (result)
  {
    double v8 = 0.0;
    if (a2 > 0.0)
    {
      unint64_t v9 = (unint64_t)result;
      uint64_t v10 = 0LL;
      unsigned int v11 = 2;
      do
      {
        double v12 = v7;
        objc_msgSend(objc_msgSend(a1, "objectAtIndex:", v10), "doubleValue");
        double v14 = v13;
        id result = objc_msgSend(objc_msgSend(a1, "objectAtIndex:", v11 - 1), "doubleValue");
        if (v14 <= a2) {
          double v15 = v14;
        }
        else {
          double v15 = a2;
        }
        double v16 = v8 + (v15 - v12) * a3;
        if (v7 <= a2) {
          double v17 = v7;
        }
        else {
          double v17 = a2;
        }
        double v8 = v16 + v17 - v14;
        if (v9 <= v11) {
          break;
        }
        uint64_t v10 = v11;
        v11 += 2;
      }

      while (v7 < a2);
    }
  }

  return result;
}

LABEL_177:
      double v178 = -[MREffectOrigami _retainedByUserBackColorImageInContext:]( self,  "_retainedByUserBackColorImageInContext:",  a4);
      [v16 setCenterX:0.0];
      [v16 setCenterY:0.0];
      double v179 = objc_alloc(&OBJC_CLASS___NSDictionary);
      double v180 = [v16 insertingInCollection];
      if (v22 >= v25)
      {
        double v192 = +[NSValue valueWithCGRect:](&OBJC_CLASS___NSValue, "valueWithCGRect:", -1.0, v14 * v24, 2.0, v10 * v24);
        double v193 = 2.0 / v10;
        *(float *)&double v193 = 2.0 / v10;
        double v194 = -[NSDictionary initWithObjectsAndKeys:]( v179,  "initWithObjectsAndKeys:",  v180,  @"image",  v192,  @"rectangle",  +[NSNumber numberWithFloat:](&OBJC_CLASS___NSNumber, "numberWithFloat:", v193),  @"referenceAspectRatio",  0LL);
        double v184 = v229;
        -[NSMutableArray addObject:](v229, "addObject:", v194);

        double v195 = -[NSDictionary initWithObjectsAndKeys:]( [NSDictionary alloc],  "initWithObjectsAndKeys:",  [v178 insertingInCollection],  @"image",  +[NSValue valueWithCGRect:]( NSValue,  "valueWithCGRect:",  -1.0,  v14,  2.0,  v14 * (v24 + -1.0)),  @"rectangle",  &__kCFBooleanTrue,  @"onTop",  0);
        -[NSMutableArray addObject:](v229, "addObject:", v195);

        double v186 = objc_alloc(&OBJC_CLASS___NSDictionary);
        double v187 = [v178 insertingInCollection];
        double v190 = (v10 + v14) * v24;
        double v191 = (v10 + v14) * (1.0 - v24);
        double v189 = -1.0;
        double v188 = 2.0;
      }

      else
      {
        double v181 = +[NSValue valueWithCGRect:](&OBJC_CLASS___NSValue, "valueWithCGRect:", -v22, v14, v22 + v22, v10);
        double v182 = 2.0 / v10;
        *(float *)&double v182 = 2.0 / v10;
        double v183 = -[NSDictionary initWithObjectsAndKeys:]( v179,  "initWithObjectsAndKeys:",  v180,  @"image",  v181,  @"rectangle",  +[NSNumber numberWithFloat:](&OBJC_CLASS___NSNumber, "numberWithFloat:", v182),  @"referenceAspectRatio",  0LL);
        double v184 = v229;
        -[NSMutableArray addObject:](v229, "addObject:", v183);

        double v185 = -[NSDictionary initWithObjectsAndKeys:]( [NSDictionary alloc],  "initWithObjectsAndKeys:",  [v178 insertingInCollection],  @"image",  +[NSValue valueWithCGRect:](NSValue, "valueWithCGRect:", -1.0, v14, -(v22 + -1.0), v10),  @"rectangle",  &__kCFBooleanTrue,  @"onTop",  0);
        -[NSMutableArray addObject:](v229, "addObject:", v185);

        double v186 = objc_alloc(&OBJC_CLASS___NSDictionary);
        double v187 = [v178 insertingInCollection];
        double v188 = 1.0 - v22;
        double v189 = v22;
        double v190 = v14;
        double v191 = v10;
      }

      double v196 = -[NSDictionary initWithObjectsAndKeys:]( v186,  "initWithObjectsAndKeys:",  v187,  @"image",  +[NSValue valueWithCGRect:](&OBJC_CLASS___NSValue, "valueWithCGRect:", v189, v190, v188, v191),  @"rectangle",  &__kCFBooleanTrue,  @"onTop",  0LL);
      -[NSMutableArray addObject:](v184, "addObject:", v196);

      [v178 releaseByUser];
      goto LABEL_181;
    }

    __int128 v112 = [(id)qword_2B0668 objectForKey:self->super.mEffectID];
    __int128 v113 = v112;
    double v231 = a4;
    if (HIBYTE(self->mDescriptionAspectRatio) != BYTE2(self->mDescriptionAspectRatio))
    {
      double v114 = objc_msgSend(objc_msgSend(v112, "objectAtIndex:", 0), "objectForKey:", @"fallback");
      if (v114) {
        __int128 v113 = v114;
      }
    }

    double v115 = BYTE1(self->mDescriptionAspectRatio);
    double v116 = BYTE2(self->mDescriptionAspectRatio);
    double v232 = 0u;
    double v233 = 0u;
    double v234 = 0u;
    double v235 = 0u;
    double v117 = [v113 countByEnumeratingWithState:&v232 objects:v244 count:16];
    if (v117)
    {
      double v118 = v117;
      double v119 = 1.3333;
      if (!v116) {
        double v119 = 0.75;
      }
      double v120 = 1.7778;
      if (!v116) {
        double v120 = 0.5625;
      }
      if (v115) {
        double v119 = v120;
      }
      double v121 = v119;
      double v122 = *(void *)v233;
      double v123 = 2.0;
      double v124 = 2.0 / v10;
      double v201 = v124;
      double v125 = 0.5;
      double v228 = v113;
      do
      {
        double v126 = 0LL;
        do
        {
          if (*(void *)v233 != v122) {
            objc_enumerationMutation(v113);
          }
          double v127 = *(void **)(*((void *)&v232 + 1) + 8LL * (void)v126);
          if (objc_msgSend(objc_msgSend(v127, "objectForKey:", @"isVisibleAtEnd"), "BOOLValue"))
          {
            double v128 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
            double v129 = objc_msgSend( objc_msgSend(v127, "objectForKey:", @"attributes"),  "objectForKey:",  @"slideIndex");
            if (v129 && (double v130 = ImageKey((int)[v129 intValue])) != 0)
            {
              double v131 = v130;
              double v132 = objc_msgSend( -[NSDictionary objectForKey:]( -[MRLayerEffect slideProvidersForElementIDs]( self->super.mEffectLayer,  "slideProvidersForElementIDs"),  "objectForKey:",  v130),  "retainedByUserRenderedImageAtTime:inContext:withArguments:",  v231,  a5,  a3);
            }

            else
            {
              double v132 = -[MREffectOrigami _retainedByUserBackColorImageInContext:]( self,  "_retainedByUserBackColorImageInContext:",  v231);
              double v131 = 0LL;
            }

            if (v132)
            {
              if ([v127 objectForKey:@"aspectRatio"])
              {
                objc_msgSend(objc_msgSend(v127, "objectForKey:", @"aspectRatio"), "floatValue");
                double v121 = v133;
              }

              sscanf( (const char *)objc_msgSend(objc_msgSend(v127, "objectForKey:", @"rectangle"), "UTF8String"),  "{{%lf, %lf}, {%lf, %lf}}",  &v240,  &v241,  &v242,  &v243);
              if (BYTE1(self->mDescriptionAspectRatio))
              {
                double v134 = dbl_1FB9B0[BYTE2(self->mDescriptionAspectRatio) == 0];
                double v240 = (v240 + -432.0) * 0.00231481481;
                double v241 = (v241 + -432.0) * v134;
                double v242 = v242 * 0.00231481481;
                double v243 = v243 * v134;
              }

              __int128 v113 = v228;
              if (objc_msgSend( objc_msgSend( v127,  "objectForKey:",  @"subEffectID",  StretchRectangle( &v240,  (char)objc_msgSend( objc_msgSend(v127, "objectForKey:", @"stretchFlags"),  "intValue"),  v121,  v9)),  "isEqualToString:",  @"pstill")
                && (([v132 aspectRatio], double v136 = v135, v135 < v125) || v135 > v123)
                && ((double v137 = v242 / v243, v135 >= 1.0) || v137 <= 1.0)
                && (v135 <= 1.0 || v137 >= 1.0))
              {
                double v139 = v135 / v137;
                double v140 = v137 / v135;
                if (v136 >= 1.0) {
                  double v140 = v136 / v137;
                }
                if (v140 >= 1.1)
                {
                  double v203 = objc_msgSend( objc_msgSend( objc_msgSend( -[NSDictionary objectForKey:]( self->super.mFlattenedAttributes,  "objectForKey:",  @"breakInformation"),  "objectForKey:",  v131),  "objectForKey:",  @"panEndDirection"),  "intValue");
                  double v213 = v241;
                  double v215 = v240;
                  double v217 = v242;
                  double v225 = v243;
                  double v141 = -[MREffectOrigami _checkPanoramaAbsoluteSizeForImage:inRect:]( self,  "_checkPanoramaAbsoluteSizeForImage:inRect:",  v132,  &v240);
                  if (v136 < 1.0)
                  {
                    [v132 height];
                    double v149 = v148;
                    float v150 = v242;
                    [v132 width];
                    double v146 = v149 * v150 - v151 * v243;
                    [v132 width];
                  }

                  else
                  {
                    [v132 width];
                    double v143 = v142;
                    double v144 = v243;
                    [v132 height];
                    double v146 = v143 * v144 - v145 * v242;
                    [v132 height];
                  }

                  if (v242 >= v243) {
                    double v152 = v243;
                  }
                  else {
                    double v152 = v242;
                  }
                  double v153 = v146 / (v147 * v152);
                  double v154 = v153;
                  double v155 = vcvtps_u32_f32(v154);
                  double v157 = v153 <= 0.0 || v155 == 0;
                  double v219 = v141;
                  if (v141) {
                    double v137 = v242 / v243;
                  }
                  double v205 = v157;
                  if (v157)
                  {
                    double v138 = v132;
                    a3 = v223;
                    double v158 = v225;
                    double v123 = 2.0;
                    double v125 = 0.5;
                  }

                  else
                  {
                    objc_msgSend(v132, "setScale:", fmax(v139, 1.0));
                    [v132 setCenterX:0.0];
                    [v132 setCenterY:0.0];
                    double v138 = [v132 retainedByUserImage];
                    [v132 releaseByUser];
                    double v159 = [*(id *)((char *)&self->mTotalNumberOfFolds + 1) objectForKeyedSubscript:v131];
                    a3 = v223;
                    double v123 = 2.0;
                    if (v159)
                    {
                      [v159 doubleValue];
                      double v125 = 0.5;
                      double v158 = v225;
                      if (v136 < 1.0) {
                        objc_msgSend(v138, "setCenterY:");
                      }
                      else {
                        objc_msgSend(v138, "setCenterX:");
                      }
                    }

                    else
                    {
                      double v160 = v136 / v137 + -1.0;
                      double v125 = 0.5;
                      if (v136 < 1.0)
                      {
                        if (v203 == -1) {
                          double v160 = 1.0 - v136 / v137;
                        }
                        [v138 setCenterY:v160];
                      }

                      else
                      {
                        if (v203 != -1) {
                          double v160 = 1.0 - v136 / v137;
                        }
                        [v138 setCenterX:v160];
                      }

                      double v158 = v225;
                    }
                  }

                  if (v219)
                  {
                    double v161 = -[MREffectOrigami _retainedByUserBackColorImageInContext:]( self,  "_retainedByUserBackColorImageInContext:",  v231);
                    if (v136 < 1.0)
                    {
                      if (v205)
                      {
                        objc_msgSend(v138, "setScale:");
                        [v138 setCenterX:0.0];
                        [v138 setCenterY:0.0];
                      }

                      double v220 = objc_alloc(&OBJC_CLASS___NSDictionary);
                      double v206 = [v161 insertingInCollection];
                      double v162 = +[NSValue valueWithCGRect:]( &OBJC_CLASS___NSValue,  "valueWithCGRect:",  v215,  v213,  v240 - v215,  v225);
                      *(float *)&double v163 = v201;
                      double v164 = -[NSDictionary initWithObjectsAndKeys:]( v220,  "initWithObjectsAndKeys:",  v206,  @"image",  v162,  @"rectangle",  +[NSNumber numberWithFloat:](&OBJC_CLASS___NSNumber, "numberWithFloat:", v163),  @"referenceAspectRatio",  0LL);
                      -[NSMutableArray addObject:](v229, "addObject:", v164);

                      double v221 = objc_alloc(&OBJC_CLASS___NSDictionary);
                      double v165 = v161;
                      double v166 = [v161 insertingInCollection];
                      double v167 = -[NSDictionary initWithObjectsAndKeys:]( v221,  "initWithObjectsAndKeys:",  v166,  @"image",  +[NSValue valueWithCGRect:]( &OBJC_CLASS___NSValue,  "valueWithCGRect:",  v240 + v242,  v213,  v215 + v217 - (v240 + v242),  v225),  @"rectangle",  &__kCFBooleanTrue,  @"onTop",  0LL);
                    }

                    else
                    {
                      if (v205)
                      {
                        objc_msgSend(v138, "setScale:");
                        [v138 setCenterX:0.0];
                        [v138 setCenterY:0.0];
                      }

                      else
                      {
                        [v138 setScale:v243 / v158];
                        double v168 = v158 / v243;
                        [v138 centerX];
                        double v170 = v169 * v168;
                        double v123 = 2.0;
                        [v138 setCenterX:v170];
                      }

                      double v207 = objc_alloc(&OBJC_CLASS___NSDictionary);
                      double v222 = v161;
                      double v171 = [v161 insertingInCollection];
                      double v172 = +[NSValue valueWithCGRect:]( &OBJC_CLASS___NSValue,  "valueWithCGRect:",  v215,  v213,  v217,  v241 - v213);
                      *(float *)&double v173 = v201;
                      double v174 = -[NSDictionary initWithObjectsAndKeys:]( v207,  "initWithObjectsAndKeys:",  v171,  @"image",  v172,  @"rectangle",  +[NSNumber numberWithFloat:](&OBJC_CLASS___NSNumber, "numberWithFloat:", v173),  @"referenceAspectRatio",  0LL);
                      -[NSMutableArray addObject:](v229, "addObject:", v174);

                      v208 = objc_alloc(&OBJC_CLASS___NSDictionary);
                      double v165 = v222;
                      double v175 = [v222 insertingInCollection];
                      double v167 = -[NSDictionary initWithObjectsAndKeys:]( v208,  "initWithObjectsAndKeys:",  v175,  @"image",  +[NSValue valueWithCGRect:]( &OBJC_CLASS___NSValue,  "valueWithCGRect:",  v215,  v241 + v243,  v217,  v213 + v225 - (v241 + v243)),  @"rectangle",  &__kCFBooleanTrue,  @"onTop",  0LL);
                    }

                    double v176 = v167;
                    -[NSMutableArray addObject:](v229, "addObject:", v167);

                    [v165 releaseByUser];
                  }
                }

                else
                {
                  double v138 = v132;
                  double v125 = 0.5;
                  double v123 = 2.0;
                }
              }

              else
              {
                double v138 = v132;
              }

              -[NSMutableDictionary setObject:forKey:]( v128,  "setObject:forKey:",  [v138 insertingInCollection],  @"image");
              -[NSMutableDictionary setObject:forKey:]( v128,  "setObject:forKey:",  +[NSValue valueWithCGRect:](&OBJC_CLASS___NSValue, "valueWithCGRect:", v240, v241, v242, v243),  @"rectangle");
              -[NSMutableArray addObject:](v229, "addObject:", v128);
              [v138 releaseByUser];
            }

            else
            {
              __int128 v113 = v228;
            }
          }

          double v126 = (char *)v126 + 1;
        }

        while (v118 != v126);
        double v177 = [v113 countByEnumeratingWithState:&v232 objects:v244 count:16];
        double v118 = v177;
      }

      while (v177);
    }
  }

  else
  {
    if (v13)
    {
      double v14 = v10 * -0.5;
      double v15 = -[NSDictionary objectForKey:]( -[MRLayerEffect slideProvidersForElementIDs](self->super.mEffectLayer, "slideProvidersForElementIDs"),  "objectForKey:",  ImageKey(0LL));
      double v16 = [v15 retainedByUserRenderedImageAtTime:a4 inContext:a5 withArguments:a3];
      [v16 width];
      double v18 = v17;
      [v16 height];
      *(float *)&int v19 = v19;
      double v20 = (float)(v18 / *(float *)&v19);
      [v16 scale];
      char v22 = v21;
      [a4 localAspectRatio];
      double v24 = v22 * v23 / v20;
      double v25 = 1.0;
      if (v22 >= 1.0 && v24 >= 1.0)
      {
LABEL_6:
        double v26 = objc_alloc(&OBJC_CLASS___NSDictionary);
        char v27 = [v16 insertingInCollection];
        double v28 = +[NSValue valueWithCGRect:](&OBJC_CLASS___NSValue, "valueWithCGRect:", -1.0, v10 * -0.5, 2.0, v10);
        id v29 = 2.0 / v10;
        *(float *)&id v29 = 2.0 / v10;
        id v30 = -[NSDictionary initWithObjectsAndKeys:]( v26,  "initWithObjectsAndKeys:",  v27,  @"image",  v28,  @"rectangle",  +[NSNumber numberWithFloat:](&OBJC_CLASS___NSNumber, "numberWithFloat:", v29),  @"referenceAspectRatio",  0LL);
LABEL_12:
        double v38 = v30;
        -[NSMutableArray addObject:](v12, "addObject:", v30);

LABEL_181:
        [v16 releaseByUser];
        goto LABEL_182;
      }

      goto LABEL_177;
    }

    double v39 = [(id)qword_2B0668 objectForKey:self->super.mEffectID];
    double v40 = v39;
    double v230 = a4;
    if (HIBYTE(self->mDescriptionAspectRatio) != BYTE2(self->mDescriptionAspectRatio))
    {
      double v41 = objc_msgSend(objc_msgSend(v39, "objectAtIndex:", 0), "objectForKey:", @"fallback");
      if (v41) {
        double v40 = v41;
      }
    }

    BOOL v42 = BYTE1(self->mDescriptionAspectRatio);
    __int128 v43 = BYTE2(self->mDescriptionAspectRatio);
    double v236 = 0u;
    double v237 = 0u;
    double v238 = 0u;
    double v239 = 0u;
    __int128 v44 = [v40 countByEnumeratingWithState:&v236 objects:v245 count:16];
    if (v44)
    {
      __int128 v45 = v44;
      __int128 v46 = 1.3333;
      if (!v43) {
        __int128 v46 = 0.75;
      }
      double v47 = 1.7778;
      if (!v43) {
        double v47 = 0.5625;
      }
      if (v42) {
        __int128 v46 = v47;
      }
      double v48 = v46;
      double v49 = *(void *)v237;
      double v50 = @"still";
      double v51 = 2.0;
      float v52 = 2.0 / v10;
      double v202 = v52;
      float v53 = 0.5;
      double v227 = v40;
      do
      {
        float v54 = 0LL;
        do
        {
          if (*(void *)v237 != v49) {
            objc_enumerationMutation(v40);
          }
          id v55 = *(void **)(*((void *)&v236 + 1) + 8LL * (void)v54);
          objc_msgSend(objc_msgSend(v55, "objectForKey:", @"startTime"), "doubleValue");
          if (v56 == 0.0
            && objc_msgSend(objc_msgSend(v55, "objectForKey:", @"subEffectID"), "hasSuffix:", v50))
          {
            uint64_t v57 = v50;
            unsigned int v58 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
            int v59 = objc_msgSend( objc_msgSend(v55, "objectForKey:", @"attributes"),  "objectForKey:",  @"slideIndex");
            if (v59 && (id v60 = ImageKey((int)[v59 intValue])) != 0)
            {
              id v61 = v60;
              float v62 = objc_msgSend( -[NSDictionary objectForKey:]( -[MRLayerEffect slideProvidersForElementIDs]( self->super.mEffectLayer,  "slideProvidersForElementIDs"),  "objectForKey:",  v60),  "retainedByUserRenderedImageAtTime:inContext:withArguments:",  v230,  a5,  a3);
            }

            else
            {
              float v62 = -[MREffectOrigami _retainedByUserBackColorImageInContext:]( self,  "_retainedByUserBackColorImageInContext:",  v230);
              id v61 = 0LL;
            }

            if (v62)
            {
              if ([v55 objectForKey:@"aspectRatio"])
              {
                objc_msgSend(objc_msgSend(v55, "objectForKey:", @"aspectRatio"), "floatValue");
                double v48 = v63;
              }

              sscanf( (const char *)objc_msgSend(objc_msgSend(v55, "objectForKey:", @"rectangle"), "UTF8String"),  "{{%lf, %lf}, {%lf, %lf}}",  &v240,  &v241,  &v242,  &v243);
              if (BYTE1(self->mDescriptionAspectRatio))
              {
                id v64 = dbl_1FB9B0[BYTE2(self->mDescriptionAspectRatio) == 0];
                double v240 = (v240 + -432.0) * 0.00231481481;
                double v241 = (v241 + -432.0) * v64;
                double v242 = v242 * 0.00231481481;
                double v243 = v243 * v64;
              }

              if (!objc_msgSend( objc_msgSend( v55,  "objectForKey:",  @"subEffectID",  StretchRectangle( &v240,  (char)objc_msgSend( objc_msgSend(v55, "objectForKey:", @"stretchFlags"),  "intValue"),  v48,  v9)),  "isEqualToString:",  @"pstill")
                || ([v62 aspectRatio], float v66 = v65, v65 >= v53) && v65 <= v51
                || (float v67 = v242 / v243, v65 < 1.0) && v67 > 1.0
                || v65 > 1.0 && v67 < 1.0)
              {
                uint64_t v68 = v62;
                goto LABEL_46;
              }

              uint64_t v69 = v65 / v67;
              id v70 = v67 / v65;
              if (v66 >= 1.0) {
                id v70 = v66 / v67;
              }
              if (v70 < 1.1)
              {
                uint64_t v68 = v62;
                float v53 = 0.5;
                double v51 = 2.0;
                goto LABEL_46;
              }

              id v71 = objc_msgSend( objc_msgSend( objc_msgSend( -[NSDictionary objectForKey:]( self->super.mFlattenedAttributes,  "objectForKey:",  @"breakInformation"),  "objectForKey:",  v61),  "objectForKey:",  @"panEndDirection"),  "intValue");
              double v214 = v241;
              double v216 = v240;
              double v218 = v242;
              double v224 = v243;
              unsigned int v72 = -[MREffectOrigami _checkPanoramaAbsoluteSizeForImage:inRect:]( self,  "_checkPanoramaAbsoluteSizeForImage:inRect:",  v62,  &v240);
              if (v66 < 1.0)
              {
                [v62 height];
                unsigned __int8 v80 = v79;
                float v81 = v242;
                [v62 width];
                __int128 v77 = v80 * v81 - v82 * v243;
                [v62 width];
              }

              else
              {
                [v62 width];
                int v74 = v73;
                id v75 = v243;
                [v62 height];
                __int128 v77 = v74 * v75 - v76 * v242;
                [v62 height];
              }

              if (v242 >= v243) {
                float v83 = v243;
              }
              else {
                float v83 = v242;
              }
              float v84 = v77 / (v78 * v83);
              float v85 = v84;
              float v86 = vcvtps_u32_f32(v85);
              float v88 = v84 <= 0.0 || v86 == 0;
              if (v72) {
                float v67 = v242 / v243;
              }
              double v209 = v88;
              if (!v88)
              {
                double v204 = v71;
                objc_msgSend(v62, "setScale:", fmax(v69, 1.0));
                [v62 setCenterX:0.0];
                [v62 setCenterY:0.0];
                uint64_t v68 = [v62 retainedByUserImage];
                [v62 releaseByUser];
                float v90 = [*(id *)((char *)&self->mTotalNumberOfFolds + 1) objectForKeyedSubscript:v61];
                a3 = v223;
                double v51 = 2.0;
                if (v90)
                {
                  [v90 doubleValue];
                  float v53 = 0.5;
                  float v89 = v224;
                  if (v66 < 1.0)
                  {
                    objc_msgSend(v68, "setCenterY:");
                    if (!v72) {
                      goto LABEL_46;
                    }
                  }

                  else
                  {
                    objc_msgSend(v68, "setCenterX:");
                    if (!v72) {
                      goto LABEL_46;
                    }
                  }
                }

                else
                {
                  float v91 = v66 / v67 + -1.0;
                  float v53 = 0.5;
                  if (v66 < 1.0)
                  {
                    if (v204 == -1) {
                      float v91 = 1.0 - v66 / v67;
                    }
                    [v68 setCenterY:v91];
                  }

                  else
                  {
                    if (v204 != -1) {
                      float v91 = 1.0 - v66 / v67;
                    }
                    [v68 setCenterX:v91];
                  }

                  float v89 = v224;
                  if (!v72) {
                    goto LABEL_46;
                  }
                }

LABEL_182:
  double v197 = -[NSArray initWithArray:](objc_alloc(&OBJC_CLASS___NSArray), "initWithArray:", v229);
  return v197;
}

id sub_178714(uint64_t a1, uint64_t a2)
{
  id result = [*(id *)(a1 + 32) currentSlideInfoForElement:a2];
  if (result)
  {
    id v5 = result;
    id result = [result scale];
    if (v6 > 0.0)
    {
      id result = [v5 index];
    }
  }

  return result;
}

float Gaussian(float a1, float a2)
{
  return exp((float)-(float)(a1 * a1) / ((a2 + a2) * a2)) / (a2 * 2.50662827);
}

void ComputeGaussian(float *a1, _DWORD *a2, float a3, float a4)
{
  id v5 = a1;
  if (a3 == 0.0)
  {
    *a1 = 1.0;
    *a2 = 1;
  }

  else
  {
    double v7 = (a3 + a3) * a3;
    double v8 = a3 * 2.50662827;
    float v9 = exp(-0.0 / v7) / v8;
    float *v5 = v9;
    unint64_t v10 = 1LL;
    *a2 = 1;
    float v11 = a4;
    do
    {
      float v12 = exp((float)-(float)(v11 * v11) / v7) / v8;
      v5[v10] = v12;
      if (v10 >= 4 && v9 * 0.01 >= v12) {
        break;
      }
      float v9 = v9 + (float)(v12 + v12);
      *a2 = ++v10;
      float v11 = v11 + a4;
    }

    while (v10 != 8);
    do
    {
      float *v5 = (float)(1.0 / v9) * *v5;
      ++v5;
      --v10;
    }

    while (v10);
  }

void sub_17FDB4(_Unwind_Exception *a1)
{
}

void sub_17FE60(_Unwind_Exception *a1)
{
}

double smoothPhaseOutProgress(double a1)
{
  if (a1 >= 0.5) {
    return a1 * 1.5 + -0.25;
  }
  float v1 = (a1 + -0.5) * 3.14159274;
  return (float)((float)(sinf(v1) + 1.0) * 0.5);
}

LABEL_42:
          char v63 = v46;
          id v55 = v51;
          unsigned int v56 = ((a8 - v52) / (mMainDuration + -1.0) + -0.5) * 3.14159274;
          uint64_t v57 = sinf(v56);
          double v51 = v55;
          unsigned int v58 = -(v55 - (v57 + 1.0) * 0.5 * (v55 + v55));
          float v53 = v64;
          int v59 = v63 * v58;
          float v54 = v65;
          if (v38 > 2.0) {
            float v53 = v59;
          }
          else {
            float v54 = v59;
          }
          goto LABEL_45;
        }

        double v51 = 0.0;
        if (v38 < 0.5) {
          double v51 = 1.0 - v38 / v39;
        }
        float v52 = mPhaseInDuration + 0.5;
        if (v52 <= a8)
        {
          if (v50 - mPhaseOutDuration + -0.5 >= a8) {
            goto LABEL_42;
          }
          float v54 = v46 * v51;
        }

        else
        {
          float v54 = -(v51 * v46);
        }

        float v53 = v64;
        goto LABEL_45;
      }
    }
  }

  double v41 = 0LL;
LABEL_21:
  BOOL v42 = -[MRReflectionsRenderable initWithSlide:sprite:modelViewMatrix:position:size:flipped:isShadow:isBreak:]( [MRReflectionsRenderable alloc],  "initWithSlide:sprite:modelViewMatrix:position:size:flipped:isShadow:isBreak:",  v25,  v27,  [a9 modelViewMatrix],  v13,  v12,  v41,  x,  y,  width,  height);
  if (*(MRImageProvider **)((char *)&self->mGroundShadowRightProvider + 1))
  {
    __int128 v43 = (MRReflectionsRenderable **)((char *)&self->mHead + 1);
    (*(MRReflectionsRenderable **)((char *)&self->mHead + 1))->next = v42;
  }

  else
  {
    *(MRImageProvider **)((char *)&self->mGroundShadowRightProvider + 1) = (MRImageProvider *)v42;
    __int128 v43 = (MRReflectionsRenderable **)((char *)&self->mHead + 1);
  }

  *__int128 v43 = v42;
  v42->next = 0LL;
  [a9 restoreModelViewMatrix:v66];
  [v25 releaseByUser];
}

id sub_18C7F4(uint64_t a1)
{
  return [*(id *)(a1 + 32) _updateMarimbaDocument];
}

id sub_18C93C(uint64_t a1)
{
  return [*(id *)(a1 + 32) _updateMarimbaDocument];
}

id sub_18CA38(uint64_t a1)
{
  return [*(id *)(a1 + 32) _updateMarimbaDocument];
}

id sub_18CD98(uint64_t a1)
{
  return [*(id *)(a1 + 32) _updateMarimbaDocument];
}

id sub_18CE5C(uint64_t a1)
{
  return [*(id *)(a1 + 32) becomeReady];
}

void sub_18D2FC(_Unwind_Exception *a1)
{
}

id sub_18D31C(uint64_t a1)
{
  return [*(id *)(a1 + 32) warmup:1];
}

void sub_18D478(_Unwind_Exception *a1)
{
}

id sub_18D494(uint64_t a1)
{
  return [*(id *)(a1 + 32) warmup:0];
}

void sub_18D57C(_Unwind_Exception *a1)
{
}

void sub_18DA4C(_Unwind_Exception *a1)
{
}

uint64_t sub_18DADC(uint64_t a1)
{
  id obj = *(id *)(a1 + 32);
  objc_sync_enter(obj);
  uint64_t v2 = (char *)[*(id *)(*(void *)(a1 + 32) + 176) numberOfMediaItems];
  uint64_t v3 = *(void *)(a1 + 32);
  if ((unint64_t)&v2[-*(void *)(v3 + 184)] > 0x63)
  {
    uint64_t v5 = 100LL;
  }

  else
  {
    id v4 = [*(id *)(v3 + 176) numberOfMediaItems];
    uint64_t v3 = *(void *)(a1 + 32);
    uint64_t v5 = (uint64_t)v4 - *(void *)(v3 + 184);
  }

  id v6 = objc_msgSend( *(id *)(v3 + 176),  "mediaURLsAtIndexes:",  +[NSIndexSet indexSetWithIndexesInRange:](NSIndexSet, "indexSetWithIndexesInRange:"));
  objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "mediaURLs"), "addObjectsFromArray:", v6);
  double v7 = -[NSMutableArray initWithCapacity:](objc_alloc(&OBJC_CLASS___NSMutableArray), "initWithCapacity:", v5);
  uint64_t v24 = v5;
  id v8 = objc_msgSend(objc_msgSend(*(id *)(*(void *)(a1 + 32) + 104), "mediaProperties"), "mutableCopy");
  __int128 v28 = 0u;
  __int128 v29 = 0u;
  __int128 v26 = 0u;
  __int128 v27 = 0u;
  id v9 = [v6 countByEnumeratingWithState:&v26 objects:v30 count:16];
  if (v9)
  {
    uint64_t v10 = *(void *)v27;
    do
    {
      for (uint64_t i = 0LL; i != v9; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v27 != v10) {
          objc_enumerationMutation(v6);
        }
        float v12 = *(void **)(*((void *)&v26 + 1) + 8LL * (void)i);
        id v13 = [*(id *)(a1 + 32) _mediaPropertiesForMediaURL:v12];
        if (v13)
        {
          id v14 = [v12 absoluteString];
          [v8 setObject:v13 forKey:v14];
          -[NSMutableArray addObject:](v7, "addObject:", v14);
        }
      }

      id v9 = [v6 countByEnumeratingWithState:&v26 objects:v30 count:16];
    }

    while (v9);
  }

  [*(id *)(*(void *)(a1 + 32) + 104) setMediaProperties:v8];
  [*(id *)(*(void *)(a1 + 32) + 112) setMediaProperties:v8];

  uint64_t v15 = *(void *)(a1 + 32);
  if (*(void *)(v15 + 184))
  {
    objc_msgSend( +[MPAuthoringController sharedController](MPAuthoringController, "sharedController"),  "cleanup");
    double v16 = -[NSMutableDictionary initWithDictionary:]( objc_alloc(&OBJC_CLASS___NSMutableDictionary),  "initWithDictionary:",  *(void *)(*(void *)(a1 + 32) + 120LL));
    double v17 = +[NSNumber numberWithUnsignedInteger:]( NSNumber,  "numberWithUnsignedInteger:",  objc_msgSend(objc_msgSend(*(id *)(*(void *)(a1 + 32) + 104), "videoPaths"), "count"));
    -[NSMutableDictionary setObject:forKey:](v16, "setObject:forKey:", v17, kMPAuthoringLiveSlideIndex);
    objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "contentView"), "bounds");
    if (v18 >= v19) {
      double v20 = v18 / v19;
    }
    else {
      double v20 = v19 / v18;
    }
    objc_msgSend( +[MPCropController sharedController](MPCropController, "sharedController"),  "setDelegate:",  *(void *)(a1 + 32));
    double v21 = +[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", v20);
    -[NSMutableDictionary setObject:forKey:](v16, "setObject:forKey:", v21, kMPAuthoringAspectRatio);
    [*(id *)(*(void *)(a1 + 32) + 104) addVideoPaths:v7];
    [*(id *)(*(void *)(a1 + 32) + 104) setDocumentAttribute:v16 forKey:kMPDocumentAuthoringOptions[0]];
    char v22 = +[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", 1.0 / v20);
    -[NSMutableDictionary setObject:forKey:](v16, "setObject:forKey:", v22, kMPAuthoringAspectRatio);
    [*(id *)(*(void *)(a1 + 32) + 112) addVideoPaths:v7];
    [*(id *)(*(void *)(a1 + 32) + 112) setDocumentAttribute:v16 forKey:kMPDocumentAuthoringOptions[0]];

    objc_msgSend( +[MPCropController sharedController](MPCropController, "sharedController"),  "setDelegate:",  0);
    objc_msgSend( +[MPAuthoringController sharedController](MPAuthoringController, "sharedController"),  "cleanup");
  }

  else
  {
    [*(id *)(v15 + 104) setVideoPaths:v7];
    [*(id *)(*(void *)(a1 + 32) + 112) setVideoPaths:v7];
    [*(id *)(a1 + 32) _updateMarimbaDocument];
  }

  *(void *)(*(void *)(a1 + 32) + 184LL) += v24;
  return objc_sync_exit(obj);
}

void sub_18DEB0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id obj)
{
}

void sub_18DFDC(_Unwind_Exception *a1)
{
}

id sub_18DFF0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void **)(v2 + 96);
  if (*(_BYTE *)(v2 + 168)) {
    BOOL v4 = *(unsigned __int8 *)(a1 + 40) != 0;
  }
  else {
    BOOL v4 = 0LL;
  }
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  _OWORD v6[2] = sub_18E078;
  v6[3] = &unk_24D5B0;
  float v6[4] = v2;
  return [v3 warmupAndPlay:v4 completionBlock:v6];
}

id sub_18E078(uint64_t a1)
{
  return [*(id *)(a1 + 32) becomeReady];
}

void sub_18E168(_Unwind_Exception *a1)
{
}

id sub_18E17C(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 216) setHidden:1];
}

void sub_18E1F8(_Unwind_Exception *a1)
{
}

id sub_18E420(uint64_t a1, int a2)
{
  if (!a2)
  {
    id result = *(id *)(a1 + 40);
    if (!result) {
      return result;
    }
    BOOL v4 = (uint64_t (*)(void))*((void *)result + 2);
    return (id)v4();
  }

  if (objc_msgSend(objc_msgSend(*(id *)(*(void *)(a1 + 32) + 96), "marimbaLayer"), "isPlaying"))
  {
    id result = *(id *)(a1 + 40);
    if (!result) {
      return result;
    }
    BOOL v4 = (uint64_t (*)(void))*((void *)result + 2);
    return (id)v4();
  }

  uint64_t v5 = *(void *)(a1 + 40);
  id v6 = *(void **)(*(void *)(a1 + 32) + 96LL);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  float v7[2] = sub_18E4DC;
  v7[3] = &unk_258B88;
  void v7[4] = v5;
  return [v6 warmupAndPlay:1 completionBlock:v7];
}

uint64_t sub_18E4DC(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(result + 16))(result, 1LL);
  }
  return result;
}

unint64_t ExifOrientationForPlatformImageOrientation(unint64_t a1)
{
  unint64_t v1 = 0x705040206080301uLL >> (8 * a1);
  if (a1 >= 8) {
    LOBYTE(v1) = 0;
  }
  return v1 & 0xF;
}

void sub_18ED94(id a1, NSString *a2, BOOL a3, JSValue *a4)
{
  BOOL v5 = a3;
  id v7 = -[JSValue toObject](+[JSContext currentThis](&OBJC_CLASS___JSContext, "currentThis"), "toObject");
  if (-[NSString isEqualToString:](a2, "isEqualToString:", @"title"))
  {
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472LL;
    v13[2] = sub_18EEF0;
    v13[3] = &unk_24DEF0;
    uint64_t v13[4] = a4;
    id v8 = v13;
    id v9 = v7;
    uint64_t v10 = 0LL;
  }

  else
  {
    if (-[NSString hasPrefix:](a2, "hasPrefix:", @"media-"))
    {
      v12[0] = _NSConcreteStackBlock;
      v12[1] = 3221225472LL;
      v12[2] = sub_18EF74;
      void v12[3] = &unk_24DEF0;
      v12[4] = a4;
      objc_msgSend( v7,  "navigateToMediaWithIndex:animated:completion:",  -[NSString intValue](-[NSString substringFromIndex:](a2, "substringFromIndex:", 6), "intValue"),  v5,  v12);
      return;
    }

    uint64_t v10 = -[NSString intValue](-[NSString substringFromIndex:](a2, "substringFromIndex:", 5LL), "intValue");
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472LL;
    v11[2] = sub_18EFF8;
    v11[3] = &unk_24DEF0;
    v11[4] = a4;
    id v8 = v11;
    id v9 = v7;
  }

  [v9 navigateToTextWithIndex:v10 animated:v5 completion:v8];
}

id sub_18EEF0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)(a1 + 32);
  BOOL v4 = +[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", a2);
  return objc_msgSend( v2,  "callWithArguments:",  +[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v4, 1));
}

id sub_18EF74(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)(a1 + 32);
  BOOL v4 = +[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", a2);
  return objc_msgSend( v2,  "callWithArguments:",  +[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v4, 1));
}

id sub_18EFF8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)(a1 + 32);
  BOOL v4 = +[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", a2);
  return objc_msgSend( v2,  "callWithArguments:",  +[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v4, 1));
}

void sub_18F07C(id a1, JSValue *a2)
{
  v2[0] = _NSConcreteStackBlock;
  v2[1] = 3221225472LL;
  v2[2] = sub_18F0E8;
  v2[3] = &unk_24DEF0;
  void v2[4] = a2;
  objc_msgSend( -[JSValue toObject](+[JSContext currentThis](JSContext, "currentThis"), "toObject"),  "_restartSlideshowWithCompletion:",  v2);
}

id sub_18F0E8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)(a1 + 32);
  BOOL v4 = +[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", a2);
  return objc_msgSend( v2,  "callWithArguments:",  +[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v4, 1));
}

void sub_18F16C(id a1, BOOL a2, JSValue *a3)
{
}

void sub_18F1A0(id a1, BOOL a2, JSValue *a3)
{
}

id *ValueFromBezierPath(id *result, double *a2, double a3, double a4, double a5, uint64_t a6, uint64_t a7)
{
  if (a5 >= 0.0 && a7 >= 2)
  {
    double v7 = a2[1];
    if (v7 >= a5)
    {
      double v9 = *a2;
      uint64_t v10 = 1LL;
      return (id *)[result[v10 - 1] evaluatAtTime:(a5 - v9) / (v7 - v9)];
    }

    else
    {
      uint64_t v8 = 0LL;
      while (a7 - 2 != v8)
      {
        double v9 = v7;
        double v7 = a2[v8++ + 2];
        if (v7 >= a5)
        {
          uint64_t v10 = v8 + 1;
          return (id *)[result[v10 - 1] evaluatAtTime:(a5 - v9) / (v7 - v9)];
        }
      }
    }
  }

  return result;
}

CGFloat CGRectFromCAMLString(void *a1)
{
  if (a1)
  {
    sscanf((const char *)[a1 UTF8String], "%lf %lf %lf %lf", &origin, &origin.y, &v4, &v4.height);
  }

  else
  {
    CGSize size = CGRectZero.size;
    CGPoint origin = CGRectZero.origin;
    CGSize v4 = size;
  }

  return origin.x;
}

CGFloat CGPointFromCAMLString(void *a1)
{
  if (a1) {
    sscanf((const char *)[a1 UTF8String], "%lf %lf", &v2, &v2.y);
  }
  else {
    CGPoint v2 = CGPointZero;
  }
  return v2.x;
}

BOOL IsZRotationCAMLString(void *a1)
{
  return v1 == 0;
}

double NewZRotationFromCAMLString(void *a1)
{
  double v2 = 0.0;
  if (!a1) {
    return 0.0;
  }
  sscanf((const char *)[a1 UTF8String], "rotate(%lfdeg)", &v2);
  return v2;
}

void *NewRotationFromCAMLString(void *a1)
{
  double v2 = malloc(0x20uLL);
  if (a1)
  {
    [a1 rangeOfString:@","];
    if (v3)
    {
      sscanf((const char *)[a1 UTF8String], "rotate(%lfdeg, %lf, %lf, %lf)", v2, v2 + 1, v2 + 2, v2 + 3);
    }

    else
    {
      v2[1] = 0LL;
      v2[2] = 0LL;
      uint64_t v5 = 0LL;
      sscanf((const char *)[a1 UTF8String], "rotate(%lfdeg)", &v5);
      void *v2 = v5;
      v2[3] = 0x3FF0000000000000LL;
    }
  }

  return v2;
}

char *NewTranslationFromCAMLString(void *a1)
{
  double v2 = (char *)malloc(0x18uLL);
  if (a1) {
    sscanf((const char *)[a1 UTF8String], "translate(%lf, %lf, %lf)", v2, v2 + 8, v2 + 16);
  }
  return v2;
}

char *NewScaleFromCAMLString(void *a1)
{
  double v2 = (char *)malloc(0x18uLL);
  if (a1) {
    sscanf((const char *)[a1 UTF8String], "scale(%lf, %lf, %lf)", v2, v2 + 8, v2 + 16);
  }
  return v2;
}

void sub_195884(_Unwind_Exception *a1)
{
}

void sub_195908(_Unwind_Exception *a1)
{
}

void sub_195974(_Unwind_Exception *a1)
{
}

void sub_1959E4(_Unwind_Exception *a1)
{
}

BOOL TrianglesAreDisjoint(double *a1, double *a2)
{
  double v3 = *a1;
  double v2 = a1[1];
  double v4 = a1[2];
  double v5 = a1[3];
  double v6 = v5 - v2;
  double v7 = *a1 - v4;
  double v8 = v4 * v2 - *a1 * v5;
  double v9 = a1[4];
  double v10 = a1[5];
  double v11 = v8 + v7 * v10 + (v5 - v2) * v9;
  double v12 = *a2;
  double v13 = a2[1];
  if (v11 * (v8 + v7 * v13 + (v5 - v2) * *a2) <= 0.0
    && v11 * (v8 + v7 * a2[3] + v6 * a2[2]) <= 0.0
    && v11 * (v8 + v7 * a2[5] + v6 * a2[4]) <= 0.0)
  {
    return 1LL;
  }

  double v14 = v10 - v5;
  double v15 = v4 - v9;
  double v16 = v9 * v5 - v4 * v10;
  double v17 = v2 * (v4 - v9) + (v10 - v5) * v3 + v16;
  if (v17 * (v16 + (v4 - v9) * v13 + (v10 - v5) * v12) <= 0.0
    && v17 * (v16 + v15 * a2[3] + v14 * a2[2]) <= 0.0
    && v17 * (v16 + v15 * a2[5] + v14 * a2[4]) <= 0.0)
  {
    return 1LL;
  }

  double v18 = v2 - v10;
  double v19 = v9 - v3;
  double v20 = v3 * v10 - v9 * v2;
  double v21 = v20 + v5 * (v9 - v3) + v18 * v4;
  return v21 * (v20 + (v9 - v3) * v13 + v18 * v12) <= 0.0
      && v21 * (v20 + v19 * a2[3] + v18 * a2[2]) <= 0.0
      && v21 * (v20 + v19 * a2[5] + v18 * a2[4]) <= 0.0;
}

BOOL PointsAreEqual(double *a1, double *a2)
{
  return vabdd_f64(*a1, *a2) < 0.00001 && vabdd_f64(a1[1], a2[1]) < 0.00001;
}

BOOL TrianglesAreEqual(double *a1, double *a2)
{
  double v2 = *a1;
  double v3 = *a2;
  if ((vabdd_f64(*a1, *a2) >= 0.00001 || vabdd_f64(a1[1], a2[1]) >= 0.00001)
    && (vabdd_f64(a1[2], v3) >= 0.00001 || vabdd_f64(a1[3], a2[1]) >= 0.00001)
    && (vabdd_f64(a1[4], v3) >= 0.00001 || vabdd_f64(a1[5], a2[1]) >= 0.00001))
  {
    return 0LL;
  }

  double v4 = a2[2];
  if ((vabdd_f64(v2, v4) >= 0.00001 || vabdd_f64(a1[1], a2[3]) >= 0.00001)
    && (vabdd_f64(a1[2], v4) >= 0.00001 || vabdd_f64(a1[3], a2[3]) >= 0.00001)
    && (vabdd_f64(a1[4], v4) >= 0.00001 || vabdd_f64(a1[5], a2[3]) >= 0.00001))
  {
    return 0LL;
  }

  double v5 = a2[4];
  if (vabdd_f64(v2, v5) < 0.00001 && vabdd_f64(a1[1], a2[5]) < 0.00001
    || vabdd_f64(a1[2], v5) < 0.00001 && vabdd_f64(a1[3], a2[5]) < 0.00001)
  {
    return 1LL;
  }

  return vabdd_f64(a1[4], v5) < 0.00001 && vabdd_f64(a1[5], a2[5]) < 0.00001;
}

uint64_t SortByAngleAndDistance(uint64_t a1, unsigned int *a2, unsigned int *a3)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *a3;
  double v5 = *(double *)(a1 + 8 * v3);
  double v6 = *(double *)(a1 + 8 * v4);
  if ((*(_BYTE *)(a1 + 144 + v4) & *(_BYTE *)(a1 + 144 + v3)) != 0 && fabs(vabdd_f64(v5, v6) + -3.14159274) > 1.0)
  {
    double v7 = *(double *)(a1 + 72 + 8 * v3);
    double v8 = *(double *)(a1 + 72 + 8 * v4);
    if (v7 < v8) {
      unsigned int v9 = 1;
    }
    else {
      unsigned int v9 = -1;
    }
    if (v7 >= v8) {
      unsigned int v10 = 1;
    }
    else {
      unsigned int v10 = -1;
    }
    if (v5 > 3.14160274) {
      return v10;
    }
    else {
      return v9;
    }
  }

  else if (v5 >= v6)
  {
    return 1LL;
  }

  else
  {
    return 0xFFFFFFFFLL;
  }

LABEL_98:
    id v98 = 0LL;
    double v99 = a3[2 * v35];
    double v100 = v99 - v49;
    double v101 = 1;
    double v102 = a3[(2 * v35) | 1];
    float v103 = v102 - v50;
    do
    {
      double v104 = a4[2 * v101];
      float v105 = (2 * v101) | 1;
      if (v99 != v104 || v102 != a4[v105])
      {
        double v106 = &a4[2 * v98];
        double v107 = v106[1];
        double v108 = *v106 - v104;
        id v109 = v107 - a4[v105];
        __int128 v110 = v108 * -(v102 - v50) + v100 * v109;
        if (fabs(v110) >= 0.00001)
        {
          __int128 v111 = v107 - v50;
          __int128 v112 = *v106 - v49;
          __int128 v113 = (v112 * v109 - v111 * v108) / v110;
          if (v113 > 0.00001 && v113 < 0.99999)
          {
            double v114 = -(v112 * v103 - v111 * v100) / v110;
            if (v114 > 0.00001 && v114 < 0.99999)
            {
              double v115 = v49 + v113 * v100;
              double v116 = v50 + v113 * v103;
              double v117 = (1 << v98) | (8 << v16);
              double v118 = 0LL;
              if ((_DWORD)v21)
              {
                double v119 = 1;
                while (vabdd_f64(v203[v119 - 1], v115) >= 0.00001 || vabdd_f64(v203[v119], v116) >= 0.00001)
                {
                  ++v118;
                  v119 += 2;
                  if (v21 == v118)
                  {
                    double v118 = v21;
                    goto LABEL_112;
                  }
                }

                v202[v118] |= v117;
              }

              else
              {
LABEL_112:
                v203[(2 * v21)] = v115;
                uint64_t v32 = v32 + v115;
                v203[(2 * (_DWORD)v21) | 1u] = v116;
                double v18 = 1;
                double v34 = v34 + v116;
                v202[v118] = v117;
                ++v20;
                LODWORD(v21) = v21 + 1;
              }
            }
          }
        }
      }

      ++v98;
      if (v101 < 2) {
        ++v101;
      }
      else {
        double v101 = 0;
      }
    }

    while (v98 != 3);
    ++v16;
    double v17 = ~(_BYTE)v22++;
    if (v35 < 2) {
      ++v35;
    }
    else {
      double v35 = 0;
    }
    int v33 = -v35;
  }

  while (v16 != 3);
  if (((v19 == 3) & ~v18) == 0 && v21 >= 3)
  {
    if (v20 <= 2) {
      goto LABEL_130;
    }
    if ((_DWORD)v21 == 3)
    {
      if ((v202[0] & 0x38) == 0 || (v202[1] & 0x38) == 0 || (v202[2] & 0x38) == 0) {
        objc_msgSend( a5,  "addObject:",  +[NSData dataWithBytes:length:](NSData, "dataWithBytes:length:", v203, 48));
      }
    }

    else
    {
      double v120 = 0;
      double v121 = 0LL;
      do
      {
        double v122 = v202[v121++];
        v120 -= 2;
      }

      while ((v122 & 0x38) == 0);
      LODWORD(v123) = v121 - 1;
      double v124 = v203[~v120] - v34 / (double)v20;
      double v125 = v203[-2 - v120] - v32 / (double)v20;
      double v126 = atan2f(v124, v125);
      double v175 = 0;
      __nel = (v21 - 1);
      double v173 = v21 - 2;
      double v127 = -1;
      double v189 = v21;
      double v177 = -1;
      double v185 = -1;
      id obj = a5;
LABEL_139:
      double v128 = 0LL;
      double v129 = 0;
      double v183 = v127;
      double v130 = v123;
      double v180 = v123 + 1;
      double v131 = 2 * v123;
      double v132 = (2 * (_DWORD)v123) | 1u;
      double v133 = v201;
      double v134 = 1;
      double v187 = &v203[v131];
      do
      {
        if (v130 != v128)
        {
          double v135 = v203[v134 - 1] - *v187;
          double v136 = v203[v134] - v203[v132];
          double v137 = atan2f(v136, v135);
          *double v133 = fmodf((float)(v137 - v126) + 12.566, 6.2832);
          v133[9] = (float)-sqrtf((float)(v136 * v136) + (float)(v135 * v135));
          *((_BYTE *)&v201[18] + v12_Block_object_dispose(va, 8) = v202[v130] & v202[v128];
          __base[v129++] = v128;
        }

        ++v128;
        ++v133;
        v134 += 2;
      }

      while (v189 != v128);
      double v138 = __nel;
      qsort_r(__base, __nel, 4uLL, v201, (int (__cdecl *)(void *, const void *, const void *))SortByAngleAndDistance);
      double v139 = v180;
      if (v180 == (_DWORD)v121)
      {
        double v140 = v173;
        double v141 = v177;
        if ((v173 & 0x80000000) == 0)
        {
          double v140 = v173;
          while ((v202[__base[v140]] & 0x38) == 0)
          {
            if (v140-- <= 0)
            {
              double v140 = -1;
              break;
            }
          }
        }
      }

      else
      {
        double v140 = -1;
        double v143 = __base;
        double v141 = v177;
        do
        {
          double v144 = *v143++;
          ++v140;
        }

        while (v144 != v48);
      }

      LODWORD(v123) = __base[v140];
      if (v180 == (_DWORD)v121) {
        double v145 = __base[v140];
      }
      else {
        double v145 = v183;
      }
      if (v175 == 10)
      {
        NSLog(@"SubtractTriangle Error2\n");
LABEL_208:
        NSLog( @"Triangle 1: {%1.20f, %1.20f, %1.20f, %1.20f, %1.20f, %1.20f}\n",  *(void *)a3,  *((void *)a3 + 1),  *((void *)a3 + 2),  *((void *)a3 + 3),  *((void *)a3 + 4),  *((void *)a3 + 5));
        NSLog( @"Triangle 2: {%1.20f, %1.20f, %1.20f, %1.20f, %1.20f, %1.20f}\n",  *(void *)a4,  *((void *)a4 + 1),  *((void *)a4 + 2),  *((void *)a4 + 3),  *((void *)a4 + 4),  *((void *)a4 + 5));
      }

      else
      {
        ++v175;
        double v176 = v145;
        while (1)
        {
          double v48 = v123;
          double v140 = (v140 + 1) % v138;
          double v146 = __base[v140];
          double v147 = v185;
          double v148 = v146 == v185 && (_DWORD)v123 == v141;
          double v149 = v183;
          if (!v148) {
            double v149 = __base[v140];
          }
          if (v185 == -1) {
            float v150 = __base[v140];
          }
          else {
            float v150 = v185;
          }
          if (v141 == -1) {
            double v151 = __base[v140];
          }
          else {
            double v151 = v141;
          }
          if (v141 == -1) {
            float v150 = v185;
          }
          if (v139 == (_DWORD)v121)
          {
            double v141 = v151;
            double v147 = v150;
          }

          double v185 = v147;
          double v123 = v139 == (_DWORD)v121 ? v146 : v149;
          if ((_DWORD)v123 + 1 == (_DWORD)v121) {
            break;
          }
          double v152 = v203[(2 * v123)];
          double v153 = v203[(2 * (_DWORD)v123) | 1u];
          double v154 = v203[2 * v48];
          double v195 = *(_OWORD *)v187;
          double v155 = v203[(2 * v48) | 1];
          double v196 = v152;
          double v197 = v153;
          double v198 = v154;
          double v199 = v155;
          double v156 = v48;
          double v157 = v202[v123];
          if (((v202[v48] & v202[v130]) & v157) == 0)
          {
            double v158 = v201[v123] - v201[v48] + 6.28318548;
            double v179 = v202[v123];
            double v159 = fmodf(v158, 6.2832);
            double v157 = v179;
            double v156 = v48;
            double v139 = v180;
            double v145 = v176;
            if (v159 < 3.1416)
            {
              double v178 = v141;
              double v192 = 0u;
              double v193 = 0u;
              double v190 = 0u;
              double v191 = 0u;
              double v160 = [obj countByEnumeratingWithState:&v190 objects:v194 count:16];
              if (v160)
              {
                double v161 = v160;
                double v162 = *(void *)v191;
                while (2)
                {
                  for (uint64_t i = 0LL; i != v161; uint64_t i = (char *)i + 1)
                  {
                    if (*(void *)v191 != v162) {
                      objc_enumerationMutation(obj);
                    }
                    if (TrianglesAreEqual( (double *)&v195,  (double *)[*(id *)(*((void *)&v190 + 1) + 8 * (void)i) bytes]))
                    {
                      NSLog(@"SubtractTriangle Error\n");
                      goto LABEL_208;
                    }
                  }

                  double v161 = [obj countByEnumeratingWithState:&v190 objects:v194 count:16];
                  if (v161) {
                    continue;
                  }
                  break;
                }
              }

              objc_msgSend( obj,  "addObject:",  +[NSData dataWithBytes:length:](NSData, "dataWithBytes:length:", &v195, 48));
              double v138 = __nel;
              double v145 = v176;
              double v141 = v178;
              double v156 = v48;
              double v139 = v180;
              double v157 = v179;
            }
          }

          if ((_DWORD)v130 == v145 && (_DWORD)v123 == v141) {
            break;
          }
          if ((_DWORD)v123 == v145 && v48 == v141) {
            break;
          }
          if ((v157 & 0x38) != 0)
          {
            double v165 = v155 - v153;
            double v166 = v154 - v152;
            double v167 = v156;
            double v126 = atan2f(v165, v166);
            double v168 = v201[v123] - v201[v167] + 12.566371;
            if (fmodf(v168, 6.2832) >= 3.14158274)
            {
              if (v140 + 1 == v138) {
                double v169 = 0;
              }
              else {
                double v169 = v140 + 1;
              }
              double v170 = __base[v169];
              if ((_DWORD)v170 + 1 == (_DWORD)v121) {
                return;
              }
              double v171 = (float)(v126 + 3.1416) + -0.000001;
              double v172 = fmodf(v171, 6.2832);
              double v127 = v176;
              double v126 = v172;
              if ((v202[v170] & 0x38) != 0) {
                double v48 = v123;
              }
              else {
                double v48 = v170;
              }
              if ((v202[v170] & 0x38) != 0) {
                LODWORD(v123) = v170;
              }
            }

            else
            {
              double v127 = v176;
            }

            double v177 = v141;
            if ((_DWORD)v123 + 1 != (_DWORD)v121) {
              goto LABEL_139;
            }
            return;
          }
        }
      }
    }
  }

id sub_19A1AC(uint64_t a1, uint64_t a2)
{
  return objc_msgSend( objc_msgSend(*(id *)(*(void *)(a1 + 32) + 144), "objectAtIndex:", a2),  "draw:withArguments:",  *(void *)(a1 + 40),  *(void *)(a1 + 48));
}

id sub_19A20C(uint64_t a1, uint64_t a2)
{
  return objc_msgSend( objc_msgSend(*(id *)(*(void *)(a1 + 32) + 144), "objectAtIndex:", a2),  "draw:withArguments:",  *(void *)(a1 + 40),  *(void *)(a1 + 48));
}

id sub_19A26C(uint64_t a1, uint64_t a2)
{
  return objc_msgSend( objc_msgSend(*(id *)(*(void *)(a1 + 32) + 144), "objectAtIndex:", a2),  "draw:withArguments:",  *(void *)(a1 + 40),  *(void *)(a1 + 48));
}

id sub_19A2CC(uint64_t a1, uint64_t a2)
{
  return objc_msgSend( objc_msgSend(*(id *)(*(void *)(a1 + 32) + 144), "objectAtIndex:", a2),  "draw:withArguments:",  *(void *)(a1 + 40),  *(void *)(a1 + 48));
}

double RectToFitInRect(double a1, double a2, double a3, double a4, double a5)
{
  if (a3 / a5 >= a4) {
    double v5 = a4;
  }
  else {
    double v5 = a3 / a5;
  }
  return (a3 - v5 * a5) * 0.5;
}

void sub_1A08B4(_Unwind_Exception *a1)
{
}

void sub_1A0998(_Unwind_Exception *a1)
{
}

void sub_1A45C4(_Unwind_Exception *a1)
{
}

void sub_1A4660(_Unwind_Exception *a1)
{
}

void sub_1A4DCC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
}

void sub_1A4F88(_Unwind_Exception *a1)
{
}

void sub_1A5014(_Unwind_Exception *a1)
{
}

void sub_1A5214(_Unwind_Exception *a1)
{
}

void sub_1A5398(_Unwind_Exception *a1)
{
}

void sub_1A55C4(_Unwind_Exception *a1)
{
}

void sub_1A57E0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id obj)
{
}

void sub_1A5A80(_Unwind_Exception *a1)
{
}

void sub_1A5C54(_Unwind_Exception *a1)
{
}

void sub_1A5CE0(_Unwind_Exception *a1)
{
}

void sub_1A5D80(_Unwind_Exception *a1)
{
}

void sub_1A5E34(_Unwind_Exception *a1)
{
}

void sub_1A5ED4(_Unwind_Exception *a1)
{
}

void sub_1A5F60(_Unwind_Exception *a1)
{
}

id sub_1A7544(id *a1)
{
  double v3 = v2;
  [a1[4] duration];
  double v5 = v3 + v4;
  [a1[4] outroTransitionDuration];
  double v7 = v5 - v6;
  unsigned int v8 = [a1[5] isPlaying];
  if (v8) {
    [a1[5] pause];
  }
  [a1[5] time];
  double v10 = v9;
  id v11 = objc_msgSend(objc_msgSend(a1[5], "document"), "montage");
  double v12 = -[NSIndexSet initWithIndexesInRange:]( [NSIndexSet alloc],  "initWithIndexesInRange:",  0,  (char *)[a1[4] index] + 1);
  [v11 lock];
  [a1[6] removeEffectContainersAtIndices:v12];
  [v11 unlock];

  id result = [a1[5] setTime:v10 - v7];
  if (v8) {
    return [a1[5] play];
  }
  return result;
}

void sub_1A8C48( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_1A8C60(uint64_t a1, uint64_t a2)
{
}

void sub_1A8C70(uint64_t a1)
{
}

uint64_t sub_1A8C7C(uint64_t a1, void *a2)
{
  uint64_t v4 = objc_opt_class(&OBJC_CLASS___MRLayerParallelizer, a2);
  if ((objc_opt_isKindOfClass(a2, v4) & 1) != 0)
  {
    __int128 v22 = 0u;
    __int128 v23 = 0u;
    __int128 v20 = 0u;
    __int128 v21 = 0u;
    id v6 = [a2 sublayers];
    uint64_t result = (uint64_t)[v6 countByEnumeratingWithState:&v20 objects:v25 count:16];
    if (result)
    {
      uint64_t v8 = result;
      uint64_t v9 = *(void *)v21;
      do
      {
        uint64_t v10 = 0LL;
        do
        {
          if (*(void *)v21 != v9) {
            objc_enumerationMutation(v6);
          }
          (*(void (**)(void))(*(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 40LL) + 16LL))();
          ++v10;
        }

        while (v8 != v10);
        uint64_t result = (uint64_t)[v6 countByEnumeratingWithState:&v20 objects:v25 count:16];
        uint64_t v8 = result;
      }

      while (result);
    }
  }

  else
  {
    uint64_t v11 = objc_opt_class(&OBJC_CLASS___MRLayerEffect, v5);
    uint64_t result = objc_opt_isKindOfClass(a2, v11);
    if ((result & 1) != 0)
    {
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      __int128 v16 = 0u;
      __int128 v17 = 0u;
      id v12 = objc_msgSend(objc_msgSend(a2, "slideProvidersForElementIDs", 0), "objectEnumerator");
      uint64_t result = (uint64_t)[v12 countByEnumeratingWithState:&v16 objects:v24 count:16];
      if (result)
      {
        uint64_t v13 = result;
        uint64_t v14 = *(void *)v17;
        do
        {
          uint64_t v15 = 0LL;
          do
          {
            if (*(void *)v17 != v14) {
              objc_enumerationMutation(v12);
            }
            [*(id *)(*((void *)&v16 + 1) + 8 * v15++) beginLiveUpdate];
          }

          while (v13 != v15);
          uint64_t result = (uint64_t)[v12 countByEnumeratingWithState:&v16 objects:v24 count:16];
          uint64_t v13 = result;
        }

        while (result);
      }
    }
  }

  return result;
}

void sub_1A8FB0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

uint64_t sub_1A8FC8(uint64_t a1, void *a2)
{
  uint64_t v4 = objc_opt_class(&OBJC_CLASS___MRLayerParallelizer, a2);
  if ((objc_opt_isKindOfClass(a2, v4) & 1) != 0)
  {
    __int128 v22 = 0u;
    __int128 v23 = 0u;
    __int128 v20 = 0u;
    __int128 v21 = 0u;
    id v6 = [a2 sublayers];
    uint64_t result = (uint64_t)[v6 countByEnumeratingWithState:&v20 objects:v25 count:16];
    if (result)
    {
      uint64_t v8 = result;
      uint64_t v9 = *(void *)v21;
      do
      {
        uint64_t v10 = 0LL;
        do
        {
          if (*(void *)v21 != v9) {
            objc_enumerationMutation(v6);
          }
          (*(void (**)(void))(*(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 40LL) + 16LL))();
          ++v10;
        }

        while (v8 != v10);
        uint64_t result = (uint64_t)[v6 countByEnumeratingWithState:&v20 objects:v25 count:16];
        uint64_t v8 = result;
      }

      while (result);
    }
  }

  else
  {
    uint64_t v11 = objc_opt_class(&OBJC_CLASS___MRLayerEffect, v5);
    uint64_t result = objc_opt_isKindOfClass(a2, v11);
    if ((result & 1) != 0)
    {
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      __int128 v16 = 0u;
      __int128 v17 = 0u;
      id v12 = objc_msgSend(objc_msgSend(a2, "slideProvidersForElementIDs", 0), "objectEnumerator");
      uint64_t result = (uint64_t)[v12 countByEnumeratingWithState:&v16 objects:v24 count:16];
      if (result)
      {
        uint64_t v13 = result;
        uint64_t v14 = *(void *)v17;
        do
        {
          uint64_t v15 = 0LL;
          do
          {
            if (*(void *)v17 != v14) {
              objc_enumerationMutation(v12);
            }
            [*(id *)(*((void *)&v16 + 1) + 8 * v15++) endLiveUpdate];
          }

          while (v13 != v15);
          uint64_t result = (uint64_t)[v12 countByEnumeratingWithState:&v16 objects:v24 count:16];
          uint64_t v13 = result;
        }

        while (result);
      }
    }
  }

  return result;
}

void sub_1A98B8(_Unwind_Exception *a1)
{
}

void sub_1A9B04(_Unwind_Exception *a1)
{
}

void sub_1A9BE8(_Unwind_Exception *a1)
{
}

id sub_1A9D38(uint64_t a1)
{
  return [*(id *)(a1 + 32) updateSizeOfRenderer:*(void *)(*(void *)(a1 + 32) + 16)];
}

id sub_1A9F04(uint64_t a1)
{
  return [*(id *)(a1 + 32) updateSizeOfRenderer:*(void *)(*(void *)(a1 + 32) + 16)];
}

id sub_1A9FF0(uint64_t a1)
{
  return [*(id *)(a1 + 32) updateSizeOfRenderer:*(void *)(*(void *)(a1 + 32) + 16)];
}

void sub_1AAA78(_Unwind_Exception *a1)
{
}

id sub_1AAD28(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2)
  {
    uint64_t v3 = *(void *)(a1 + 40);
    if (v2 == *(void *)(v3 + 24))
    {
      int v5 = 0;
      id v4 = 0LL;
    }

    else
    {
      id v4 = [*(id *)(v3 + 16) currentStateForMontageSwap];
      int v5 = 1;
    }
  }

  else
  {
    int v5 = 0;
    id v4 = 0LL;
  }

  [*(id *)(*(void *)(a1 + 40) + 16) beginMorphingToAspectRatio:0 andOrientation:*(double *)(a1 + 48) withDuration:*(double *)(a1 + 56)];
  id result = [*(id *)(a1 + 40) updateSizeOfRenderer:*(void *)(*(void *)(a1 + 40) + 16)];
  if (v5)
  {
    -[NSNotificationCenter removeObserver:]( +[NSNotificationCenter defaultCenter](&OBJC_CLASS___NSNotificationCenter, "defaultCenter"),  "removeObserver:",  *(void *)(a1 + 40));

    *(void *)(*(void *)(a1 + 40) + 24LL) = *(id *)(a1 + 32);
    [*(id *)(*(void *)(a1 + 40) + 16) setAssetManagementDelegate:*(void *)(*(void *)(a1 + 40) + 24)];
    [*(id *)(*(void *)(a1 + 40) + 16) setFeatureDelegate:*(void *)(*(void *)(a1 + 40) + 24)];
    objc_msgSend( *(id *)(*(void *)(a1 + 40) + 16),  "swapMontage:",  objc_msgSend(*(id *)(*(void *)(a1 + 40) + 24), "montage"));
    objc_msgSend( *(id *)(*(void *)(a1 + 40) + 16),  "setTransitionLayerPlugObjectID:",  objc_msgSend( objc_msgSend( objc_msgSend(objc_msgSend(*(id *)(*(void *)(a1 + 40) + 24), "mainLayers"), "lastObject"),  "plug"),  "objectID"));
    -[NSNotificationCenter addObserver:selector:name:object:]( +[NSNotificationCenter defaultCenter](&OBJC_CLASS___NSNotificationCenter, "defaultCenter"),  "addObserver:selector:name:object:",  *(void *)(a1 + 40),  "didLiveChanged:",  @"kMPAuthoringLiveDidChangeNotification",  *(void *)(*(void *)(a1 + 40) + 24LL));
    -[NSNotificationCenter addObserver:selector:name:object:]( +[NSNotificationCenter defaultCenter](&OBJC_CLASS___NSNotificationCenter, "defaultCenter"),  "addObserver:selector:name:object:",  *(void *)(a1 + 40),  "didAddEffects:",  @"kMPAuthoringLiveDidAddEffectsNotification",  *(void *)(*(void *)(a1 + 40) + 24LL));
    -[NSNotificationCenter addObserver:selector:name:object:]( +[NSNotificationCenter defaultCenter](&OBJC_CLASS___NSNotificationCenter, "defaultCenter"),  "addObserver:selector:name:object:",  *(void *)(a1 + 40),  "didApplyStyle:",  @"kMPAuthoringDidFinishApplyingStyleNotification",  *(void *)(*(void *)(a1 + 40) + 24LL));
    uint64_t v7 = *(void *)(a1 + 40);
    if (*(_BYTE *)(v7 + 96))
    {
      uint64_t v8 = +[NSNotificationCenter defaultCenter](&OBJC_CLASS___NSNotificationCenter, "defaultCenter");
      -[NSNotificationCenter addObserver:selector:name:object:]( v8,  "addObserver:selector:name:object:",  *(void *)(a1 + 40),  "_slideDidAppear:",  kMRNotificationSlideIsOn,  0LL);
      uint64_t v7 = *(void *)(a1 + 40);
    }

    [*(id *)(v7 + 16) applyStateForMontageSwap:v4];
    id result = [*(id *)(*(void *)(a1 + 40) + 24) detectFacesInBackground];
    if ((_DWORD)result) {
      return [*(id *)(a1 + 40) setupFaceDetection];
    }
  }

  return result;
}

id sub_1AB0B4(uint64_t a1)
{
  unsigned int v2 = [*(id *)(a1 + 32) isPlaying];
  if (v2) {
    [*(id *)(a1 + 32) pause];
  }
  id v3 = objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "document"), "montage");
  [v3 lock];
  [*(id *)(a1 + 32) relativeTime];
  double v5 = v4;
  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t v7 = *(void **)(v6 + 24);
  [*(id *)(v6 + 16) size];
  double v9 = v8;
  [*(id *)(*(void *)(a1 + 32) + 16) size];
  [v7 aspectRatioDidChange:v9 / v10 atTime:v5];
  double v12 = v11;
  [v3 unlock];
  id result = [*(id *)(a1 + 32) setTime:v12];
  if (v2) {
    return [*(id *)(a1 + 32) play];
  }
  return result;
}

id sub_1ADF54(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v6 = *(void **)(a1 + 32);
  uint64_t v7 = (void *)v6[3];
  unint64_t v8 = v6[8];
  unint64_t v9 = v8 >> 28;
  if (v7)
  {
    unint64_t v10 = (v8 >> 24) & 0xF;
    if (v9 <= v10) {
      goto LABEL_13;
    }
    unint64_t v11 = v10 + 1;
  }

  else
  {
    unint64_t v11 = 0LL;
  }

  *(void *)(*(void *)(a1 + 32) + 24LL) = calloc(v9 + 1, 8uLL);
  *(void *)(*(void *)(a1 + 32) + 64LL) = *(void *)(*(void *)(a1 + 32) + 64LL) & 0xFFFFFFFFF0FFFFFFLL | ((unint64_t)(*(void *)(*(void *)(a1 + 32) + 64LL) >> 28) << 24);
  uint64_t v12 = 8 * v11;
  if (v7)
  {
    memcpy(*(void **)(*(void *)(a1 + 32) + 24LL), v7, 8 * v11);
    free(v7);
  }

  if (v11)
  {
    uint64_t v13 = *(double **)(*(void *)(*(void *)(a1 + 32) + 24LL) + 8LL * (v11 - 1));
    double v14 = v13[3];
    double v15 = v13[4];
    double v17 = v13[5];
    uint64_t v16 = *((void *)v13 + 6);
    id v18 = [v13 asset];
    id v19 = [*(id *)(*(void *)(*(void *)(a1 + 32) + 24) + 8 * (v11 - 1)) kenBurnsType];
  }

  else
  {
    id v18 = 0LL;
    id v19 = 0LL;
    uint64_t v16 = 0LL;
    double v14 = 0.5;
    double v17 = 1.0;
    double v15 = 0.5;
  }

  uint64_t v6 = *(void **)(a1 + 32);
  if (((v6[8] >> 24) & 0xFuLL) >= v11)
  {
    do
    {
      *(void *)(*(void *)(*(void *)(a1 + 32) + 24LL) + v12) = objc_alloc_init(&OBJC_CLASS___MCSlideAsset);
      uint64_t v20 = *(void *)(*(void *)(*(void *)(a1 + 32) + 24LL) + v12);
      *(double *)(v20 + 24) = v14;
      *(double *)(v20 + 32) = v15;
      *(double *)(*(void *)(*(void *)(*(void *)(a1 + 32) + 24LL) + v12) + 40LL) = v17;
      *(void *)(*(void *)(*(void *)(*(void *)(a1 + 32) + 24LL) + v12) + 48LL) = v16;
      [*(id *)(*(void *)(*(void *)(a1 + 32) + 24) + v12) setAsset:v18];
      [v18 addSlide:*(void *)(a1 + 32)];
      [*(id *)(*(void *)(*(void *)(a1 + 32) + 24) + v12) setKenBurnsType:v19];
      LODWORD(v11) = v11 + 1;
      uint64_t v6 = *(void **)(a1 + 32);
      v12 += 8LL;
    }

    while (((v6[8] >> 24) & 0xFuLL) >= v11);
  }

  uint64_t v7 = (void *)v6[3];
LABEL_13:
  __int128 v21 = (double *)*((void *)v7 + a3);
  if ([v6 isSnapshot]) {
    __int128 v22 = +[MCObject objectWithImprint:andMontage:]( MCObject,  "objectWithImprint:andMontage:",  [a2 objectForKey:@"asset"],  *(void *)(a1 + 40));
  }
  else {
    __int128 v22 = (MCObject *)objc_msgSend( *(id *)(*(void *)(a1 + 32) + 8),  "videoAssetForObjectID:",  objc_msgSend(a2, "objectForKey:", @"assetID"));
  }
  __int128 v23 = v22;
  if (v22) {
    -[MCObject addSlide:](v22, "addSlide:", *(void *)(a1 + 32));
  }
  [v21 setAsset:v23];
  objc_msgSend(v21, "setKenBurnsType:", objc_msgSend(a2, "objectForKey:", @"kenBurnsType"));
  id v24 = [a2 objectForKey:@"centerX"];
  double v25 = 0.5;
  double v26 = 0.5;
  if (v24)
  {
    [v24 floatValue];
    double v26 = v27;
  }

  id v28 = [a2 objectForKey:@"centerY"];
  if (v28)
  {
    [v28 floatValue];
    double v25 = v29;
  }

  v21[3] = v26;
  void v21[4] = v25;
  id v30 = [a2 objectForKey:@"scale"];
  if (v30)
  {
    [v30 floatValue];
    double v32 = v31;
  }

  else
  {
    double v32 = 1.0;
  }

  id result = [a2 objectForKey:@"rotation"];
  if (result)
  {
    id result = [result floatValue];
    double v35 = v34;
  }

  else
  {
    double v35 = 0.0;
  }

  v21[5] = v32;
  v21[6] = v35;
  return result;
}

void sub_1AE418(_Unwind_Exception *a1)
{
}

void sub_1AEAD0(_Unwind_Exception *a1)
{
}

void sub_1AED34(_Unwind_Exception *a1)
{
}

void sub_1AEE24(_Unwind_Exception *a1)
{
}

void sub_1AF074(_Unwind_Exception *a1)
{
}

void sub_1AF734(_Unwind_Exception *a1)
{
}

void sub_1AF880(_Unwind_Exception *a1)
{
}

void sub_1AF8F8(_Unwind_Exception *a1)
{
}

void sub_1AF984(_Unwind_Exception *a1)
{
}

void sub_1AFAB0(_Unwind_Exception *a1)
{
}

void sub_1AFB70(_Unwind_Exception *a1)
{
}

void sub_1AFBE8(_Unwind_Exception *a1)
{
}

void sub_1AFC78(_Unwind_Exception *a1)
{
}

void sub_1B0178(_Unwind_Exception *a1)
{
}

void sub_1B0660( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
}

void sub_1B081C(_Unwind_Exception *a1)
{
}

void sub_1B08A8(_Unwind_Exception *a1)
{
}

void sub_1B0AA8(_Unwind_Exception *a1)
{
}

void sub_1B0C2C(_Unwind_Exception *a1)
{
}

void sub_1B0E58(_Unwind_Exception *a1)
{
}

void sub_1B1074( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id obj)
{
}

void sub_1B134C(_Unwind_Exception *a1)
{
}

void sub_1B15C8(_Unwind_Exception *a1)
{
}

void sub_1B1668(_Unwind_Exception *a1)
{
}

void sub_1B16F4(_Unwind_Exception *a1)
{
}

void sub_1B1960(_Unwind_Exception *a1)
{
}

void sub_1B1BD4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
}

void sub_1B1DE4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
}

void sub_1B2020(_Unwind_Exception *exception_object)
{
}

id sub_1B2874(uint64_t a1)
{
  id v2 = *(id *)(a1 + 32);
  id result = [*(id *)(*(void *)(a1 + 40) + 24) currentItem];
  if (v2 != result) {
    return [*(id *)(*(void *)(a1 + 40) + 24) replaceCurrentItemWithPlayerItem:*(void *)(a1 + 32)];
  }
  return result;
}

id sub_1B2A58(uint64_t a1)
{
  id v2 = *(id *)(a1 + 32);
  id result = [*(id *)(*(void *)(a1 + 40) + 24) currentItem];
  if (v2 != result) {
    return [*(id *)(*(void *)(a1 + 40) + 24) replaceCurrentItemWithPlayerItem:*(void *)(a1 + 32)];
  }
  return result;
}

double PhotoEdgesSpline(int a1, double *a2, uint64_t a3, uint64_t a4, uint64_t a5, double a6)
{
  if (*a2 >= a6) {
    return *(double *)a5;
  }
  uint64_t v6 = (a1 - 1);
  LODWORD(v7) = -1;
  do
  {
    uint64_t v8 = (v7 + 2);
    double v9 = a2[v8];
    uint64_t v7 = (v7 + 1);
  }

  while (v9 <= a6);
  double v10 = 0.25;
  double v11 = 0.5;
  do
  {
    double v12 = v11 * ((1.0 - v11) * ((1.0 - v11) * 3.0)) * *(double *)(a4 + 8LL * v7)
        + (1.0 - v11) * ((1.0 - v11) * (1.0 - v11)) * a2[v7]
    BOOL v13 = v12 <= a6;
    if (v12 == a6) {
      break;
    }
    double v14 = -v10;
    if (v13) {
      double v14 = v10;
    }
    double v11 = v11 + v14;
    double v10 = v10 * 0.5;
  }

  while (v10 > 0.000244140625);
  return v11 * ((1.0 - v11) * ((1.0 - v11) * 3.0)) * *(double *)(a5 + 8 * v7)
       + (1.0 - v11) * ((1.0 - v11) * (1.0 - v11)) * *(double *)(a5 + 8 * v7)
}

LABEL_203:
    double v32 = ++v33;
  }

  while (-[NSDictionary count](v52, "count", v60) > v33);
  if (v62 > 0.0)
  {
    if (v62 >= 1.0)
    {
      double v226 = 0;
    }

    else
    {
      objc_msgSend(a4, "composeForeColorRed:green:blue:alpha:saveTo:", v312);
      double v226 = 1;
    }

    double v9 = v286;
    double v227 = v296;
LABEL_237:
    if (*(MRTextRenderer **)((char *)&self->mText0Renderer + 1))
    {
      if (-[NSString hasSuffix:](self->super.mEffectID, "hasSuffix:", @"Title"))
      {
        objc_msgSend( *(id *)((char *)&self->mText0Renderer + 1),  "relativeSizeInContextPixelSize:",  self->super.mPixelSize.width,  self->super.mPixelSize.height);
        double v229 = v9 == (_BYTE *)&dword_0 + 1;
        double v230 = v9 == (_BYTE *)&dword_0 + 1;
        double v231 = 0.15;
        if (!v229) {
          double v231 = -0.75;
        }
        double v232 = v231 + v228 * 0.5;
        [*(id *)((char *)&self->mText0Renderer + 1) height];
        double v234 = dbl_1FC1D0[v230] - v233 / self->super.mPixelSize.width;
      }

      else if (-[NSString hasSuffix:](self->super.mEffectID, "hasSuffix:", @"Subtitle"))
      {
        objc_msgSend( *(id *)((char *)&self->mText0Renderer + 1),  "relativeSizeInContextPixelSize:",  self->super.mPixelSize.width,  self->super.mPixelSize.height);
        if (v227 && v55 >= 1.0)
        {
          [*(id *)((char *)&self->mText0Renderer + 1) height];
          double v234 = -0.28 - v247 / self->super.mPixelSize.width;
          double v232 = 0.0;
        }

        else
        {
          double v232 = v246 * 0.5 + 0.1;
          double v234 = 0.0;
        }
      }

      else
      {
        double v234 = 0.0;
        double v232 = -0.55;
        if (v227 && -[NSString hasSuffix:](self->super.mEffectID, "hasSuffix:", @"Outro") && v55 >= 1.0)
        {
          [*(id *)((char *)&self->mText0Renderer + 1) height];
          double v234 = -0.3 - v248 / self->super.mPixelSize.width;
          double v232 = 0.55;
        }
      }

      objc_msgSend( *(id *)((char *)&self->mText0Renderer + 1),  "relativeSizeInContextPixelSize:",  self->super.mPixelSize.width,  self->super.mPixelSize.height);
      double v236 = v235;
      double v238 = v237;
      double v239 = *(void **)(&self->mIsLoaded + 1);
      double v240 = (MRCroppingSprite *)[v239 objectForKey:@"text0"];
      if (!v240)
      {
        double v240 = objc_alloc_init(&OBJC_CLASS___MRCroppingSprite);
        [v239 setObject:v240 forKey:@"text0"];
      }

      else {
        double v241 = @"PlainTexture";
      }
      [a4 setShader:v241];
      if (-[NSString isEqualToString:]( -[MRLayerEffect editedElement](self->super.mEffectLayer, "editedElement"),  "isEqualToString:",  @"text0")
        && -[MRLayerEffect _hideTextWhileEditing](self->super.mEffectLayer, "_hideTextWhileEditing"))
      {
        [a4 localAspectRatio];
        LODWORD(v243) = 0;
        -[MRCroppingSprite fakeRenderInContext:atPosition:andSize:zRotation:]( v240,  "fakeRenderInContext:atPosition:andSize:zRotation:",  a4,  v232,  v234 * v242,  v236,  v238,  v243);
      }

      else
      {
        double v244 = *(uint64_t *)((char *)&self->mText0Renderer + 1);
        [a4 localAspectRatio];
        -[MRCroppingSprite renderDumbImage:inContext:atPosition:andSize:]( v240,  "renderDumbImage:inContext:atPosition:andSize:",  v244,  a4,  v232,  v234 * v245,  v236,  v238);
      }

      [a4 unsetShader];
    }

    if (v226) {
      [a4 restoreForeColor:v312];
    }
  }

  [a4 blend:0];
}

uint64_t sortSlidesByCaptureDate1(void *a1, void *a2, _BYTE *a3)
{
  if (a3) {
    BOOL v4 = *a3 != 0;
  }
  else {
    BOOL v4 = 1;
  }
  objc_msgSend(objc_msgSend(a1, "captureDate"), "timeIntervalSinceReferenceDate");
  double v6 = v5;
  objc_msgSend(objc_msgSend(a2, "captureDate"), "timeIntervalSinceReferenceDate");
  uint64_t v8 = 1LL;
  if (!v4) {
    uint64_t v8 = -1LL;
  }
  if (v7 >= v6) {
    uint64_t v8 = 0LL;
  }
  uint64_t v9 = -1LL;
  if (!v4) {
    uint64_t v9 = 1LL;
  }
  if (v6 < v7) {
    return v9;
  }
  else {
    return v8;
  }
}

uint64_t sortSlidesByUserDefinedOrder1(void *a1, void *a2)
{
  id v3 = [a1 index];
  id v4 = [a2 index];
  else {
    return (uint64_t)v4 < (uint64_t)v3;
  }
}

double MySpline(int a1, double *a2, uint64_t a3, uint64_t a4, uint64_t a5, double a6)
{
  if (*a2 >= a6) {
    return *(double *)a5;
  }
  uint64_t v6 = (a1 - 1);
  LODWORD(v7) = -1;
  do
  {
    uint64_t v8 = (v7 + 2);
    double v9 = a2[v8];
    uint64_t v7 = (v7 + 1);
  }

  while (v9 <= a6);
  double v10 = 0.25;
  double v11 = 0.5;
  double v12 = 0.5;
  while (1)
  {
    double v13 = v11 * (v11 * v11);
    double v14 = v11 * 3.0;
    double v15 = v12 * (v11 * (v11 * 3.0));
    double v16 = v12 * (v12 * v14);
    double v17 = v12 * (v12 * v12);
    double v18 = v15 * *(double *)(a4 + 8LL * v7)
        + v13 * a2[v7]
    if (v18 == a6) {
      break;
    }
    double v19 = -v10;
    if (v18 <= a6) {
      double v19 = v10;
    }
    double v12 = v12 + v19;
    double v11 = 1.0 - v12;
    double v10 = v10 * 0.5;
    if (v10 <= 0.000244140625)
    {
      double v13 = v11 * (v11 * v11);
      double v20 = v11 * 3.0;
      double v15 = v12 * (v11 * (v11 * 3.0));
      double v16 = v12 * (v12 * v20);
      double v17 = v12 * (v12 * v12);
      return v15 * *(double *)(a5 + 8 * v7)
           + v13 * *(double *)(a5 + 8 * v7)
    }
  }

  return v15 * *(double *)(a5 + 8 * v7)
       + v13 * *(double *)(a5 + 8 * v7)
}

void sub_1B81A8(_Unwind_Exception *a1)
{
}

void sub_1B8268(_Unwind_Exception *a1)
{
}

void sub_1B82E0(_Unwind_Exception *a1)
{
}

void sub_1B8354(_Unwind_Exception *a1)
{
}

void sub_1B8504(_Unwind_Exception *a1)
{
}

void sub_1B88D8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
}

void sub_1B8A94(_Unwind_Exception *a1)
{
}

void sub_1B8B20(_Unwind_Exception *a1)
{
}

void sub_1B8D20(_Unwind_Exception *a1)
{
}

void sub_1B8EA4(_Unwind_Exception *a1)
{
}

void sub_1B90D0(_Unwind_Exception *a1)
{
}

void sub_1B92EC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id obj)
{
}

id sub_1BA09C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v5 = [*(id *)(a1 + 32) objectForKey:@"positionX"];
  double v6 = 0.0;
  double v7 = 0.0;
  if (v5)
  {
    [v5 floatValue];
    double v7 = v8;
  }

  id v9 = [*(id *)(a1 + 32) objectForKey:@"positionY"];
  if (v9)
  {
    [v9 floatValue];
    double v6 = v10;
  }

  uint64_t v11 = *(void *)(a1 + 40);
  int v12 = *(_DWORD *)(v11 + 24);
  uint64_t v13 = *(void *)(v11 + 88);
  double v14 = (double *)(v13 + 48 * a3);
  double v15 = (double *)(v13 + 72 * a3);
  if ((v12 & 0x40) == 0) {
    double v15 = v14;
  }
  double *v15 = v7;
  v15[1] = v6;
  id v16 = [*(id *)(a1 + 32) objectForKey:@"width"];
  double v17 = 2.0;
  double v18 = 2.0;
  if (v16)
  {
    [v16 floatValue];
    double v18 = v19;
  }

  id v20 = [*(id *)(a1 + 32) objectForKey:@"height"];
  if (v20)
  {
    [v20 floatValue];
    double v17 = v21;
  }

  uint64_t v22 = *(void *)(a1 + 40);
  int v23 = *(_DWORD *)(v22 + 24);
  uint64_t v24 = *(void *)(v22 + 88);
  uint64_t v25 = v24 + 48 * a3 + 16;
  double v26 = (double *)(v24 + 72 * a3 + 16);
  if ((v23 & 0x40) == 0) {
    double v26 = (double *)v25;
  }
  *double v26 = v18;
  v26[1] = v17;
  id v27 = [*(id *)(a1 + 32) objectForKey:@"scale"];
  if (v27)
  {
    [v27 floatValue];
    double v29 = v28;
  }

  else
  {
    double v29 = 1.0;
  }

  uint64_t v30 = *(void *)(a1 + 40);
  int v31 = *(_DWORD *)(v30 + 24);
  uint64_t v32 = *(void *)(v30 + 88);
  uint64_t v33 = v32 + 48 * a3 + 40;
  float v34 = (double *)(v32 + 72 * a3 + 40);
  if ((v31 & 0x40) == 0) {
    float v34 = (double *)v33;
  }
  *float v34 = v29;
  id result = [*(id *)(a1 + 32) objectForKey:@"rotationZ"];
  if (result)
  {
    id result = [result floatValue];
    double v37 = v36;
  }

  else
  {
    double v37 = 0.0;
  }

  uint64_t v38 = *(void *)(a1 + 40);
  int v39 = *(_DWORD *)(v38 + 24);
  uint64_t v40 = *(void *)(v38 + 88);
  uint64_t v41 = v40 + 48 * a3 + 32;
  BOOL v42 = (double *)(v40 + 72 * a3 + 32);
  if ((v39 & 0x40) == 0) {
    BOOL v42 = (double *)v41;
  }
  *BOOL v42 = v37;
  if ((*(_BYTE *)(*(void *)(a1 + 40) + 24LL) & 0x40) != 0)
  {
    id v43 = [*(id *)(a1 + 32) objectForKey:@"positionZ"];
    double v44 = 0.0;
    double v45 = 0.0;
    if (v43)
    {
      objc_msgSend(v43, "floatValue", 0.0);
      double v45 = v46;
    }

    *(double *)(*(void *)(*(void *)(a1 + 40) + 88LL) + 72 * a3 + 4_Block_object_dispose(va, 8) = v45;
    id v47 = [*(id *)(a1 + 32) objectForKey:@"rotationX"];
    if (v47)
    {
      [v47 floatValue];
      double v44 = v48;
    }

    *(double *)(*(void *)(*(void *)(a1 + 40) + 88LL) + 72 * a3 + 56) = v44;
    id result = [*(id *)(a1 + 32) objectForKey:@"rotationY"];
    if (result)
    {
      id result = [result floatValue];
      double v50 = v49;
    }

    else
    {
      double v50 = 0.0;
    }

    *(double *)(*(void *)(*(void *)(a1 + 40) + 88LL) + 72 * a3 + 64) = v50;
  }

  return result;
}

LABEL_55:
      -[NSMutableArray addObject:](v39, "addObject:", v16);
      v13 |= -[NSMutableDictionary count](v16, "count") != 0LL;

      ++v12;
      v11 += 48LL;
      float v10 = v17;
    }

    int v31 = *(double *)&v30[v11 + 32];
    if (v31 == 0.0) {
      goto LABEL_55;
    }
LABEL_48:
    *(float *)&int v31 = v31;
    -[NSMutableDictionary setObject:forKey:]( v16,  "setObject:forKey:",  +[NSNumber numberWithFloat:](&OBJC_CLASS___NSNumber, "numberWithFloat:", v31),  @"rotationZ");
    if ((*((_BYTE *)&self->super.super.super.super.isa + v18) & 0x40) == 0) {
      goto LABEL_55;
    }
    goto LABEL_49;
  }

  return v4;
}

double smoothProgress(double a1)
{
  float v1 = (a1 + -0.5) * 3.14159265;
  return (sinf(v1) + 1.0) * 0.5;
}

id sub_1C0CA4(uint64_t a1, uint64_t a2, void *a3)
{
  CGRect v6 = CGRectFromString((NSString *)[a3 objectForKey:@"rect"]);
  uint64_t v4 = *(void *)(a1 + 32);
  return objc_msgSend( *(id *)(v4 + 185),  "setImageRect:",  v6.size.width * *(double *)(v4 + 96) * -0.5 + (v6.origin.x + 1.0) * 0.5 * *(double *)(v4 + 96),  v6.size.height * *(double *)(v4 + 104) * -1.5 + 30000.0 + (v6.origin.y + 1.0) * 0.5 * *(double *)(v4 + 104));
}

void sub_1C564C(void *a1)
{
  float v1 = (__int128 *)sub_154B54(a1);
  id v2 = (void *)sub_154B3C(v1);
  if (v2) {
    sub_154B34(v2);
  }
}

void operator delete[](void *__p)
{
  while (1)
    ;
}

void operator delete(void *__p)
{
  while (1)
    ;
}

void *__cdecl operator new[](size_t __sz)
{
  while (1)
    ;
}

void *__cdecl operator new(size_t __sz)
{
  while (1)
    ;
}

id objc_msgSend_URLByResolvingBookmarkData_options_relativeToURL_bookmarkDataIsStale_error_( void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "URLByResolvingBookmarkData:options:relativeToURL:bookmarkDataIsStale:error:");
}

id objc_msgSend__drawArrowInContext_atTime_withArguments_atPoint_scale_withTextAtIndex_t_pointDown_m_( void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_drawArrowInContext:atTime:withArguments:atPoint:scale:withTextAtIndex:t:pointDown:m:");
}

id objc_msgSend__drawBlendedFrame_info_index_rect_zIndex_zRotation_subtract_time_inContext_withArguments_( void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_drawBlendedFrame:info:index:rect:zIndex:zRotation:subtract:time:inContext:withArguments:");
}

id objc_msgSend__drawBreakFrame_index_rect_rotation_forcedAspectRatio_layout_offset_time_inContext_withArguments_( void *a1, const char *a2, ...)
{
  return objc_msgSend( a1,  "_drawBreakFrame:index:rect:rotation:forcedAspectRatio:layout:offset:time:inContext:withArguments:");
}

id objc_msgSend__drawBreakTwoPartFrame_index_rect_rotation_forcedAspectRatio_time_inContext_withArguments_( void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_drawBreakTwoPartFrame:index:rect:rotation:forcedAspectRatio:time:inContext:withArguments:");
}

id objc_msgSend__drawFrame_info_rect_stretch_zIndex_zRotation_subtract_key_time_inContext_withArguments_( void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_drawFrame:info:rect:stretch:zIndex:zRotation:subtract:key:time:inContext:withArguments:");
}

id objc_msgSend__drawGrayChapters_time_arguments_showInfo_startProgress_titleEnd_titleToChapter_drawPhotos_startIndex_exit_isExiting_chapterIntro_chapterProgress_( void *a1, const char *a2, ...)
{
  return objc_msgSend( a1,  "_drawGrayChapters:time:arguments:showInfo:startProgress:titleEnd:titleToChapter:drawPhotos:startIndex:exit:is Exiting:chapterIntro:chapterProgress:");
}

id objc_msgSend__drawLandscapePanoBackgroundInRect_paperType_subtract_inTime_inContext_withArguments_( void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_drawLandscapePanoBackgroundInRect:paperType:subtract:inTime:inContext:withArguments:");
}

id objc_msgSend__drawMask_index_rect_zIndex_zRotation_subtract_time_inContext_withArguments_( void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_drawMask:index:rect:zIndex:zRotation:subtract:time:inContext:withArguments:");
}

id objc_msgSend__drawPortraitBreakForLandscapeAtTime_duration_onePage_inContext_withArguments_( void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_drawPortraitBreakForLandscapeAtTime:duration:onePage:inContext:withArguments:");
}

id objc_msgSend__drawPortraitPanoBackgroundInRect_flippedRect_paperType_subtract_inTime_inContext_withArguments_( void *a1, const char *a2, ...)
{
  return objc_msgSend( a1,  "_drawPortraitPanoBackgroundInRect:flippedRect:paperType:subtract:inTime:inContext:withArguments:");
}

id objc_msgSend__nextSlideProviderAspectRatioToFitInAspectRatio_providerKeys_slideInformation_index_force_( void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_nextSlideProviderAspectRatioToFitInAspectRatio:providerKeys:slideInformation:index:force:");
}

id objc_msgSend__randomFrameForAspectRatio_forTable_allowMatte_onlyLoaded_ignoreFrames_randomGenerator_( void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_randomFrameForAspectRatio:forTable:allowMatte:onlyLoaded:ignoreFrames:randomGenerator:");
}

id objc_msgSend__renderFallBreakImage_atProgress_inContext_withArguments_inRect_withAttributes_::( void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_renderFallBreakImage:atProgress:inContext:withArguments:inRect:withAttributes:::");
}

id objc_msgSend__renderFallImage_atProgress_inContext_withArguments_inRect_withAttributes_::( void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_renderFallImage:atProgress:inContext:withArguments:inRect:withAttributes:::");
}

id objc_msgSend__renderPortraitBreakForPortraitPageAtIndex_atTime_inContext_withArguments_( void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_renderPortraitBreakForPortraitPageAtIndex:atTime:inContext:withArguments:");
}

id objc_msgSend__renderPortraitBreakPageAtIndex_flipped_onePage_atTime_inContext_withArguments_( void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_renderPortraitBreakPageAtIndex:flipped:onePage:atTime:inContext:withArguments:");
}

id objc_msgSend__renderSublayer_layerCount_sourceIsText_targetIsText_currentShader_sourceSize_targetSize_atTime_inContext_withArguments_( void *a1, const char *a2, ...)
{
  return objc_msgSend( a1,  "_renderSublayer:layerCount:sourceIsText:targetIsText:currentShader:sourceSize:targetSize:atTime:inContext:withArguments:");
}

id objc_msgSend__retainedByUserTextImageForString_string2_type_inContext_firstLine_lastLine_( void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_retainedByUserTextImageForString:string2:type:inContext:firstLine:lastLine:");
}

id objc_msgSend_applyKenBurnsAtTime_withTargetSize_kenBurnsType_translation_scale_rotation_( void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "applyKenBurnsAtTime:withTargetSize:kenBurnsType:translation:scale:rotation:");
}

id objc_msgSend_bestCountFromClusterForEffectWithImages_atStartIndex_withWeighter_usedIndex_( void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "bestCountFromClusterForEffectWithImages:atStartIndex:withWeighter:usedIndex:");
}

id objc_msgSend_configurePanoramaInformationToEffect_inDocument_startingIndex_count_removeOldIndex_( void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "configurePanoramaInformationToEffect:inDocument:startingIndex:count:removeOldIndex:");
}

id objc_msgSend_customTimingWithEffectID_effectAttributes_slideInformation_textInformation_inAspectRatio_( void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "customTimingWithEffectID:effectAttributes:slideInformation:textInformation:inAspectRatio:");
}

id objc_msgSend_defaultDurationsForEffectID_phaseInDuration_mainDuration_phaseOutDuration_( void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "defaultDurationsForEffectID:phaseInDuration:mainDuration:phaseOutDuration:");
}

id objc_msgSend_determineIfSlideDisplayesForTheWholeDurationForEffect_presetID_atIndex_inStyleID_( void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "determineIfSlideDisplayesForTheWholeDurationForEffect:presetID:atIndex:inStyleID:");
}

id objc_msgSend_document_shouldUseDefaultFiltersForSlide_effectIndex_containerIndex_layerIndex_( void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "document:shouldUseDefaultFiltersForSlide:effectIndex:containerIndex:layerIndex:");
}

id objc_msgSend_document_shouldUseDefaultTransitionForEffectContainer_containerIndex_layerIndex_( void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "document:shouldUseDefaultTransitionForEffectContainer:containerIndex:layerIndex:");
}

id objc_msgSend_findEffectIDInWeighter_images_startingIndex_count_triesToFind_constraints_previousTags_( void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "findEffectIDInWeighter:images:startingIndex:count:triesToFind:constraints:previousTags:");
}

id objc_msgSend_getRandomItemMeetingNumberOfFaceLandscapes_facePortraits_imageLandscapes_imagePortraits_vPanoramas_hPanoramas_movies_fitsInExtraWide_aspectRatios_previousTags_( void *a1, const char *a2, ...)
{
  return objc_msgSend( a1,  "getRandomItemMeetingNumberOfFaceLandscapes:facePortraits:imageLandscapes:imagePortraits:vPanoramas:hPanoramas :movies:fitsInExtraWide:aspectRatios:previousTags:");
}

id objc_msgSend_initWithPath_originalSize_isEmbeddedAsset_isSupportedMovie_andImageManager_( void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithPath:originalSize:isEmbeddedAsset:isSupportedMovie:andImageManager:");
}

id objc_msgSend_initWithShaderID_shaderKey_description_vertexShader_andFragmentShader_inContext_( void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithShaderID:shaderKey:description:vertexShader:andFragmentShader:inContext:");
}

id objc_msgSend_initWithSlide_sprite_modelViewMatrix_position_size_flipped_isShadow_isBreak_( void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithSlide:sprite:modelViewMatrix:position:size:flipped:isShadow:isBreak:");
}

id objc_msgSend_mediaAspectRatioForEffectID_usingAttributes_atIndex_defaultAspectRatio_imageAspectRatio_( void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "mediaAspectRatioForEffectID:usingAttributes:atIndex:defaultAspectRatio:imageAspectRatio:");
}

id objc_msgSend_mediaAspectRatioHintForEffectID_usingAttributes_atIndex_defaultAspectRatio_( void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "mediaAspectRatioHintForEffectID:usingAttributes:atIndex:defaultAspectRatio:");
}

id objc_msgSend_pageWithName_templateName_navigatorName_properties_settings_userData_widgets_( void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "pageWithName:templateName:navigatorName:properties:settings:userData:widgets:");
}

id objc_msgSend_render1SlideAtTime_inContext_withArguments_scale_tilt_phaseOutType_direction_( void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "render1SlideAtTime:inContext:withArguments:scale:tilt:phaseOutType:direction:");
}

id objc_msgSend_render1To3DownAtTime_andProgress_inContext_withArguments_inRect_withAttributes_( void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "render1To3DownAtTime:andProgress:inContext:withArguments:inRect:withAttributes:");
}

id objc_msgSend_render1To3LeftAtTime_andProgress_inContext_withArguments_inRect_withAttributes_( void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "render1To3LeftAtTime:andProgress:inContext:withArguments:inRect:withAttributes:");
}

id objc_msgSend_renderBreakAtTime_andProgress_inContext_withArguments_inRect_withAttributes_( void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "renderBreakAtTime:andProgress:inContext:withArguments:inRect:withAttributes:");
}

id objc_msgSend_renderBreakImage_atProgress_withKey_inContext_withArguments_inRect_withAttributes_( void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "renderBreakImage:atProgress:withKey:inContext:withArguments:inRect:withAttributes:");
}

id objc_msgSend_renderFall2AtTime_andProgress_inContext_withArguments_inRect_withAttributes_( void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "renderFall2AtTime:andProgress:inContext:withArguments:inRect:withAttributes:");
}

id objc_msgSend_renderFallAtTime_andProgress_inContext_withArguments_inRect_withAttributes_( void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "renderFallAtTime:andProgress:inContext:withArguments:inRect:withAttributes:");
}

id objc_msgSend_renderFallBreakAtTime_andProgress_inContext_withArguments_inRect_withAttributes_( void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "renderFallBreakAtTime:andProgress:inContext:withArguments:inRect:withAttributes:");
}

id objc_msgSend_renderFallBreakImage_atProgress_inContext_withArguments_inRect_withAttributes_::( void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "renderFallBreakImage:atProgress:inContext:withArguments:inRect:withAttributes:::");
}

id objc_msgSend_renderFallImage_atProgress_inContext_withArguments_inRect_withAttributes_::( void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "renderFallImage:atProgress:inContext:withArguments:inRect:withAttributes:::");
}

id objc_msgSend_renderFallImage_atProgress_strength_inContext_withArguments_inRect_withAttributes_::( void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "renderFallImage:atProgress:strength:inContext:withArguments:inRect:withAttributes:::");
}

id objc_msgSend_renderFlipDiagonalAtTime_andProgress_inContext_withArguments_inRect_withAttributes_( void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "renderFlipDiagonalAtTime:andProgress:inContext:withArguments:inRect:withAttributes:");
}

id objc_msgSend_renderFlipDownAtTime_andProgress_inContext_withArguments_inRect_withAttributes_( void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "renderFlipDownAtTime:andProgress:inContext:withArguments:inRect:withAttributes:");
}

id objc_msgSend_renderFlipLeftAtTime_andProgress_inContext_withArguments_inRect_withAttributes_( void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "renderFlipLeftAtTime:andProgress:inContext:withArguments:inRect:withAttributes:");
}

id objc_msgSend_renderFold4LeftAtTime_andProgress_inContext_withArguments_inRect_withAttributes_( void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "renderFold4LeftAtTime:andProgress:inContext:withArguments:inRect:withAttributes:");
}

id objc_msgSend_renderFoldDownAtTime_andProgress_inContext_withArguments_inRect_withAttributes_( void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "renderFoldDownAtTime:andProgress:inContext:withArguments:inRect:withAttributes:");
}

id objc_msgSend_renderFoldLeftAtTime_andProgress_inContext_withArguments_inRect_withAttributes_( void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "renderFoldLeftAtTime:andProgress:inContext:withArguments:inRect:withAttributes:");
}

id objc_msgSend_renderImage_inContext_atPosition_andSize_withReferenceAspectRatio_andJustifications_( void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "renderImage:inContext:atPosition:andSize:withReferenceAspectRatio:andJustifications:");
}

id objc_msgSend_renderKey_shadow_shadowRect_size_position_xRot_tX_isPano_time_inContext_withArguments_( void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "renderKey:shadow:shadowRect:size:position:xRot:tX:isPano:time:inContext:withArguments:");
}

id objc_msgSend_renderKey_size_position_yRot_tX_time_inContext_withArguments_flipped_shadow_( void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "renderKey:size:position:yRot:tX:time:inContext:withArguments:flipped:shadow:");
}

id objc_msgSend_renderKey_size_position_yRot_tX_time_inContext_withArguments_light_shadow_( void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "renderKey:size:position:yRot:tX:time:inContext:withArguments:light:shadow:");
}

id objc_msgSend_renderStillAtTime_andProgress_inContext_withArguments_inRect_withAttributes_( void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "renderStillAtTime:andProgress:inContext:withArguments:inRect:withAttributes:");
}

id objc_msgSend_renderUnfoldingFlowerAtTime_andProgress_inContext_withArguments_inRect_withAttributes_( void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "renderUnfoldingFlowerAtTime:andProgress:inContext:withArguments:inRect:withAttributes:");
}

id objc_msgSend_setVertexBuffer2D_withStride_inSpriteCoordinatesOffset_texture0CoordinatesOffset_( void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setVertexBuffer2D:withStride:inSpriteCoordinatesOffset:texture0CoordinatesOffset:");
}

id objc_msgSend_unframedImageSizeForAspectRatio_frameID_andFrameAttributes_atIndex_framedImageSize_( void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "unframedImageSizeForAspectRatio:frameID:andFrameAttributes:atIndex:framedImageSize:");
}

id objc_msgSend_valueForPointAnimationPath_withPlugTiming_atTime_defaultsTo_previousKeyPoint_nextKeyPoint_animationIsOver_( void *a1, const char *a2, ...)
{
  return objc_msgSend( a1,  "valueForPointAnimationPath:withPlugTiming:atTime:defaultsTo:previousKeyPoint:nextKeyPoint:animationIsOver:");
}

id objc_msgSend_valueForScalarAnimationPath_withPlugTiming_atTime_defaultsTo_previousKeyValue_nextKeyValue_animationIsOver_( void *a1, const char *a2, ...)
{
  return objc_msgSend( a1,  "valueForScalarAnimationPath:withPlugTiming:atTime:defaultsTo:previousKeyValue:nextKeyValue:animationIsOver:");
}

id objc_msgSend_widgetWithName_templateName_className_settings_userData_subWidgets_materials_( void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "widgetWithName:templateName:className:settings:userData:subWidgets:materials:");
}

id objc_msgSend_zPosition(void *a1, const char *a2, ...)
{
  return [a1 zPosition];
}