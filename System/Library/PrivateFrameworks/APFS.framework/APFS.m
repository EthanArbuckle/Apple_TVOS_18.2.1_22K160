uint64_t enhanced_apfs_enabled()
{
  CFTypeRef v0;
  v0 = copy_filesystems_dt_prop(@"e-apfs");
  if (!v0) {
    return os_parse_boot_arg_string();
  }
  CFRelease(v0);
  return 1LL;
}

CFTypeRef copy_filesystems_dt_prop(const __CFString *a1)
{
  io_registry_entry_t v2 = IORegistryEntryFromPath(*MEMORY[0x1896086A8], "IODeviceTree:/filesystems");
  if (!v2) {
    return 0LL;
  }
  io_object_t v3 = v2;
  CFTypeRef CFProperty = IORegistryEntryCreateCFProperty(v2, a1, (CFAllocatorRef)*MEMORY[0x189604DB0], 0);
  IOObjectRelease(v3);
  return CFProperty;
}

uint64_t arv_enabled()
{
  if (arv_enabled_arv_enabled_tvos_singleton) {
    return arv_enabled_arv_enabled_tvos_singleton == 1;
  }
  CFTypeRef v1 = copy_filesystems_dt_prop(@"arv");
  if (!v1)
  {
    uint64_t result = IORegistryEntryFromPath(*MEMORY[0x1896086A8], "IODeviceTree:/options");
    if ((_DWORD)result)
    {
      io_registry_entry_t v3 = result;
      v4 = (const __CFAllocator *)*MEMORY[0x189604DB0];
      v5 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x189604DB0], "force-seal", 0x8000100u);
      if (v5)
      {
        v6 = v5;
        CFTypeRef CFProperty = IORegistryEntryCreateCFProperty(v3, v5, v4, 0);
        if (CFProperty)
        {
          CFRelease(CFProperty);
          CFRelease(v6);
          IOObjectRelease(v3);
          goto LABEL_5;
        }

        CFRelease(v6);
      }

      IOObjectRelease(v3);
      uint64_t result = 0LL;
    }

    int v2 = 2;
    goto LABEL_13;
  }

  CFRelease(v1);
LABEL_5:
  uint64_t result = 1LL;
  int v2 = 1;
LABEL_13:
  arv_enabled_arv_enabled_tvos_singleton = v2;
  return result;
}

char *jobj_type_to_str(unsigned int a1)
{
  if (a1 < 0x15) {
    return jobj_type_to_str_TYPE_STRINGS[a1];
  }
  CFTypeRef v1 = jobj_type_to_str_unknown_str;
  snprintf(jobj_type_to_str_unknown_str, 0x20uLL, "Unknown type %d", a1);
  return v1;
}

__n128 set_metric_default_values(uint64_t a1)
{
  *(void *)a1 = 0LL;
  *(void *)(a1 + 8) = &stru_189D3BFC8;
  *(void *)(a1 + 16) = 0LL;
  *(_DWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 68) = 0;
  *(_DWORD *)(a1 + 152) = 0;
  *(void *)(a1 + 160) = 0LL;
  *(_DWORD *)(a1 + 168) = 0;
  *(_DWORD *)(a1 + 252) = 0;
  *(void *)(a1 + 176) = 0LL;
  *(void *)(a1 + 184) = 0LL;
  result.n128_u64[0] = -1LL;
  result.n128_u64[1] = -1LL;
  *(__n128 *)(a1 + 256) = result;
  *(__n128 *)(a1 + 272) = result;
  *(void *)(a1 + 304) = 0LL;
  *(void *)(a1 + 312) = -1LL;
  *(void *)(a1 + 288) = -1LL;
  *(void *)(a1 + 296) = 0LL;
  *(void *)(a1 + 320) = -1LL;
  *(void *)(a1 + 328) = -1LL;
  *(void *)(a1 + 336) = 0LL;
  *(__n128 *)(a1 + 344) = result;
  *(__n128 *)(a1 + 360) = result;
  *(__n128 *)(a1 + 376) = result;
  *(__n128 *)(a1 + 392) = result;
  *(__n128 *)(a1 + 408) = result;
  *(void *)(a1 + 424) = 0x7FFFFFFFFFFFFFFFLL;
  *(void *)(a1 + 432) = 0x7FFFFFFFFFFFFFFFLL;
  *(void *)(a1 + 440) = -1LL;
  *(void *)(a1 + 448) = -1LL;
  *(_OWORD *)(a1 + 472) = 0u;
  *(_OWORD *)(a1 + 488) = 0u;
  *(_OWORD *)(a1 + 456) = 0u;
  *(__n128 *)(a1 + 552) = result;
  *(__n128 *)(a1 + 568) = result;
  *(__n128 *)(a1 + 520) = result;
  *(__n128 *)(a1 + 536) = result;
  *(__n128 *)(a1 + 504) = result;
  *(void *)(a1 + 712) = 0LL;
  *(_OWORD *)(a1 + 680) = 0u;
  *(_OWORD *)(a1 + 696) = 0u;
  *(_OWORD *)(a1 + 648) = 0u;
  *(_OWORD *)(a1 + 664) = 0u;
  *(_OWORD *)(a1 + 616) = 0u;
  *(_OWORD *)(a1 + 632) = 0u;
  *(_OWORD *)(a1 + 584) = 0u;
  *(_OWORD *)(a1 + 600) = 0u;
  *(void *)(a1 + 736) = -1LL;
  *(void *)(a1 + 728) = -1LL;
  *(void *)(a1 + 720) = -1LL;
  return result;
}

uint64_t set_metric_start_time(uint64_t result, uint64_t a2)
{
  *(void *)(result + 16) = a2;
  return result;
}

char *set_metric_path(uint64_t a1, char *__s1)
{
  __n128 result = strdup(__s1);
  *(void *)(a1 + 160) = result;
  return result;
}

_DWORD *record_failure(_DWORD *result, int a2, int a3)
{
  v5 = result;
  if ((a3 & 0x80000000) == 0)
  {
    int v6 = result[17];
    if (v6 >= 11)
    {
      __n128 result = memmove(result + 18, result + 20, 0x48uLL);
      int v8 = 9;
    }

    else
    {
      result[17] = v6 + 1;
      BOOL v7 = __OFSUB__(v6, 1);
      int v8 = v6 - 1;
      if (v8 < 0 != v7) {
        goto LABEL_10;
      }
    }

    int v10 = v5[42];
    v11 = &v5[2 * v8];
    v11[18] = v5[38];
    v11[19] = v10;
LABEL_10:
    v5[38] = a2;
    v5[42] = a3;
    return result;
  }

  int v9 = result[6];
  if (v9 >= 5)
  {
    __n128 result = memmove(result + 7, result + 9, 0x48uLL);
    --v9;
  }

  else
  {
    result[6] = v9 + 1;
  }

  v12 = &v5[2 * v9];
  v12[7] = a2;
  v12[8] = a3;
  return result;
}

void *set_metrics_file(void *result, uint64_t a2)
{
  *__n128 result = a2;
  return result;
}

void print_metrics_to_file(uint64_t a1, int a2)
{
  if (*(void *)a1)
  {
    print_metrics(a1, a2);
    io_registry_entry_t v3 = *(FILE **)a1;
    CStringPtr = CFStringGetCStringPtr(*(CFStringRef *)(a1 + 8), 0x8000100u);
    fprintf(v3, "%s\n", CStringPtr);
    cleanup_metrics(a1);
  }
}

  ;
}

void print_metrics(uint64_t a1, int a2)
{
  v4 = (const __CFAllocator *)*MEMORY[0x189604DB0];
  v5 = *(const char **)(a1 + 160);
  if (!v5) {
    v5 = "";
  }
  CFStringRef v6 = CFStringCreateWithFormat( v4,  0LL,  @"%@dev=%s result=%d ",  *(void *)(a1 + 8),  v5,  *(unsigned int *)(a1 + 168));
  BOOL v7 = *(const void **)(a1 + 8);
  if (v7) {
    CFRelease(v7);
  }
  *(void *)(a1 + 8) = v6;
  switch(a2)
  {
    case 2:
      CFStringRef v16 = CFStringCreateWithFormat(v4, 0LL, @"%@vers=%s ", v6, "2317.60.23.0.1");
      v17 = *(const void **)(a1 + 8);
      if (v17) {
        CFRelease(v17);
      }
      *(void *)(a1 + 8) = v16;
      goto LABEL_22;
    case 1:
LABEL_22:
      print_additional_migrator_metrics((void *)a1);
      break;
    case 0:
      CFStringRef v8 = CFStringCreateWithFormat(v4, 0LL, @"%@vers=%s ", v6, "2317.60.23.0.1");
      int v9 = *(const void **)(a1 + 8);
      if (v9) {
        CFRelease(v9);
      }
      *(void *)(a1 + 8) = v8;
      CFStringRef v10 = CFStringCreateWithFormat( v4,  0LL,  @"%@num_src=%llu num_dst=%llu ",  v8,  *(void *)(a1 + 176),  *(void *)(a1 + 184));
      v11 = *(const void **)(a1 + 8);
      if (v11) {
        CFRelease(v11);
      }
      uint64_t v12 = 0LL;
      *(void *)(a1 + 8) = v10;
      uint64_t v13 = a1 + 192;
      do
      {
        if (*(_DWORD *)(v13 + 4 * v12))
        {
          v14 = jobj_type_to_str(v12);
          CFStringRef v10 = CFStringCreateWithFormat(v4, 0LL, @"%@%s:%d ", v10, v14, *(unsigned int *)(v13 + 4 * v12));
          v15 = *(const void **)(a1 + 8);
          if (v15) {
            CFRelease(v15);
          }
          *(void *)(a1 + 8) = v10;
        }

        ++v12;
      }

      while (v12 != 15);
      break;
  }

  if (*(_DWORD *)(a1 + 24))
  {
    CFStringRef v18 = CFStringCreateWithFormat(v4, 0LL, @"%@%s", *(void *)(a1 + 8), "w:");
    v19 = *(const void **)(a1 + 8);
    if (v19) {
      CFRelease(v19);
    }
    *(void *)(a1 + 8) = v18;
    if (*(int *)(a1 + 24) >= 1)
    {
      uint64_t v20 = 0LL;
      v21 = (unsigned int *)(a1 + 32);
      do
      {
        CFStringRef v18 = CFStringCreateWithFormat(v4, 0LL, @"%@(%d:%d)", v18, *(v21 - 1), *v21);
        v22 = *(const void **)(a1 + 8);
        if (v22) {
          CFRelease(v22);
        }
        v21 += 2;
        *(void *)(a1 + 8) = v18;
        ++v20;
      }

      while (v20 < *(int *)(a1 + 24));
    }

    CFStringRef v23 = CFStringCreateWithFormat(v4, 0LL, @"%@%s", v18, " ");
    v24 = *(const void **)(a1 + 8);
    if (v24) {
      CFRelease(v24);
    }
    *(void *)(a1 + 8) = v23;
  }

  if (*(int *)(a1 + 68) >= 2)
  {
    CFStringRef v25 = CFStringCreateWithFormat(v4, 0LL, @"%@%s", *(void *)(a1 + 8), "e:");
    v26 = *(const void **)(a1 + 8);
    if (v26) {
      CFRelease(v26);
    }
    *(void *)(a1 + 8) = v25;
    if (*(int *)(a1 + 68) >= 2)
    {
      uint64_t v27 = 0LL;
      v28 = (unsigned int *)(a1 + 76);
      do
      {
        CFStringRef v25 = CFStringCreateWithFormat(v4, 0LL, @"%@(%d:%d)", v25, *(v28 - 1), *v28);
        v29 = *(const void **)(a1 + 8);
        if (v29) {
          CFRelease(v29);
        }
        v28 += 2;
        *(void *)(a1 + 8) = v25;
        ++v27;
      }

      while (v27 < *(int *)(a1 + 68) - 1LL);
    }

    CFStringRef v30 = CFStringCreateWithFormat(v4, 0LL, @"%@%s", v25, " ");
    v31 = *(const void **)(a1 + 8);
    if (v31) {
      CFRelease(v31);
    }
    *(void *)(a1 + 8) = v30;
  }

  if (*(void *)(a1 + 16))
  {
    uint64_t v32 = *(void *)(a1 + 8);
    time_t v33 = time(0LL);
    CFStringRef v34 = CFStringCreateWithFormat(v4, 0LL, @"%@time=%ld ", v32, v33 - *(void *)(a1 + 16));
    v35 = *(const void **)(a1 + 8);
    if (v35) {
      CFRelease(v35);
    }
    *(void *)(a1 + 8) = v34;
  }

  uint64_t v36 = *(void *)(a1 + 400);
  if (v36 == -1)
  {
    CFStringRef v38 = *(CFStringRef *)(a1 + 8);
  }

  else
  {
    if (*(void *)(a1 + 16)) {
      CFStringRef v37 = CFStringCreateWithFormat(v4, 0LL, @"%@total_t=%llu ", *(void *)(a1 + 8), v36);
    }
    else {
      CFStringRef v37 = CFStringCreateWithFormat(v4, 0LL, @"%@time=%llu ", *(void *)(a1 + 8), v36);
    }
    CFStringRef v38 = v37;
    v39 = *(const void **)(a1 + 8);
    if (v39) {
      CFRelease(v39);
    }
    *(void *)(a1 + 8) = v38;
  }

  CFStringRef v40 = CFStringCreateWithFormat(v4, 0LL, @"%@fl=%d", v38, *(unsigned int *)(a1 + 152));
  v41 = *(const void **)(a1 + 8);
  if (v41) {
    CFRelease(v41);
  }
  *(void *)(a1 + 8) = v40;
}

void cleanup_metrics(uint64_t a1)
{
  int v2 = *(FILE **)a1;
  if (v2)
  {
    fclose(v2);
    *(void *)a1 = 0LL;
  }

  io_registry_entry_t v3 = *(void **)(a1 + 160);
  if (v3)
  {
    free(v3);
    *(void *)(a1 + 160) = 0LL;
  }

  v4 = *(const void **)(a1 + 8);
  if (v4)
  {
    CFRelease(v4);
    *(void *)(a1 + 8) = 0LL;
  }

void print_additional_migrator_metrics(void *a1)
{
  uint64_t v2 = a1[42];
  io_registry_entry_t v3 = (CFAllocatorRef *)MEMORY[0x189604DB0];
  if (v2)
  {
    CFStringRef v4 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x189604DB0], 0LL, @"%@encoded_len=%zu ", a1[1], v2);
    v5 = (const void *)a1[1];
    if (v5) {
      CFRelease(v5);
    }
    a1[1] = v4;
  }

  uint64_t v6 = a1[33];
  if (v6 != -1)
  {
    CFStringRef v7 = CFStringCreateWithFormat(*v3, 0LL, @"%@num_dirs=%zu ", a1[1], v6);
    CFStringRef v8 = (const void *)a1[1];
    if (v8) {
      CFRelease(v8);
    }
    a1[1] = v7;
  }

  uint64_t v9 = a1[32];
  if (v9 != -1)
  {
    CFStringRef v10 = CFStringCreateWithFormat(*v3, 0LL, @"%@num_files=%zu ", a1[1], v9);
    v11 = (const void *)a1[1];
    if (v11) {
      CFRelease(v11);
    }
    a1[1] = v10;
  }

  uint64_t v12 = a1[35];
  if (v12 != -1)
  {
    CFStringRef v13 = CFStringCreateWithFormat(*v3, 0LL, @"%@num_total_dirs=%zu ", a1[1], v12);
    v14 = (const void *)a1[1];
    if (v14) {
      CFRelease(v14);
    }
    a1[1] = v13;
  }

  uint64_t v15 = a1[34];
  if (v15 != -1)
  {
    CFStringRef v16 = CFStringCreateWithFormat(*v3, 0LL, @"%@num_total_files=%zu ", a1[1], v15);
    v17 = (const void *)a1[1];
    if (v17) {
      CFRelease(v17);
    }
    a1[1] = v16;
  }

  uint64_t v18 = a1[41];
  if (v18 != -1)
  {
    CFStringRef v19 = CFStringCreateWithFormat(*v3, 0LL, @"%@max_stack=%zu ", a1[1], v18);
    uint64_t v20 = (const void *)a1[1];
    if (v20) {
      CFRelease(v20);
    }
    a1[1] = v19;
  }

  uint64_t v21 = a1[39];
  if (v21 != -1)
  {
    CFStringRef v22 = CFStringCreateWithFormat(*v3, 0LL, @"%@num_sc=%zu ", a1[1], v21);
    CFStringRef v23 = (const void *)a1[1];
    if (v23) {
      CFRelease(v23);
    }
    a1[1] = v22;
  }

  uint64_t v24 = a1[36];
  if (v24 != -1)
  {
    CFStringRef v25 = CFStringCreateWithFormat(*v3, 0LL, @"%@num_sr=%zu ", a1[1], v24);
    v26 = (const void *)a1[1];
    if (v26) {
      CFRelease(v26);
    }
    a1[1] = v25;
  }

  uint64_t v27 = a1[40];
  if (v27 != -1)
  {
    CFStringRef v28 = CFStringCreateWithFormat(*v3, 0LL, @"%@num_sh=%zu ", a1[1], v27);
    v29 = (const void *)a1[1];
    if (v29) {
      CFRelease(v29);
    }
    a1[1] = v28;
  }

  uint64_t v30 = a1[37];
  if (v30)
  {
    CFStringRef v31 = CFStringCreateWithFormat(*v3, 0LL, @"%@num_sb=%zu ", a1[1], v30);
    uint64_t v32 = (const void *)a1[1];
    if (v32) {
      CFRelease(v32);
    }
    a1[1] = v31;
  }

  uint64_t v33 = a1[38];
  if (v33)
  {
    CFStringRef v34 = CFStringCreateWithFormat(*v3, 0LL, @"%@ranges_to_move=%zu ", a1[1], v33);
    v35 = (const void *)a1[1];
    if (v35) {
      CFRelease(v35);
    }
    a1[1] = v34;
  }

  uint64_t v36 = a1[44];
  if (v36 != -1)
  {
    CFStringRef v37 = CFStringCreateWithFormat(*v3, 0LL, @"%@src_t=%llu ", a1[1], v36);
    CFStringRef v38 = (const void *)a1[1];
    if (v38) {
      CFRelease(v38);
    }
    a1[1] = v37;
  }

  uint64_t v39 = a1[43];
  if (v39 != -1)
  {
    CFStringRef v40 = CFStringCreateWithFormat(*v3, 0LL, @"%@mnt_t=%llu ", a1[1], v39);
    v41 = (const void *)a1[1];
    if (v41) {
      CFRelease(v41);
    }
    a1[1] = v40;
  }

  uint64_t v42 = a1[45];
  if (v42 != -1)
  {
    CFStringRef v43 = CFStringCreateWithFormat(*v3, 0LL, @"%@prepro_t=%llu ", a1[1], v42);
    v44 = (const void *)a1[1];
    if (v44) {
      CFRelease(v44);
    }
    a1[1] = v43;
  }

  uint64_t v45 = a1[46];
  if (v45 != -1)
  {
    CFStringRef v46 = CFStringCreateWithFormat(*v3, 0LL, @"%@psvr_t=%llu ", a1[1], v45);
    v47 = (const void *)a1[1];
    if (v47) {
      CFRelease(v47);
    }
    a1[1] = v46;
  }

  uint64_t v48 = a1[47];
  if (v48 != -1)
  {
    CFStringRef v49 = CFStringCreateWithFormat(*v3, 0LL, @"%@mv_t=%llu ", a1[1], v48);
    v50 = (const void *)a1[1];
    if (v50) {
      CFRelease(v50);
    }
    a1[1] = v49;
  }

  uint64_t v51 = a1[48];
  if (v51 != -1)
  {
    CFStringRef v52 = CFStringCreateWithFormat(*v3, 0LL, @"%@trgt_t=%llu ", a1[1], v51);
    v53 = (const void *)a1[1];
    if (v53) {
      CFRelease(v53);
    }
    a1[1] = v52;
  }

  uint64_t v54 = a1[49];
  if (v54 != -1)
  {
    CFStringRef v55 = CFStringCreateWithFormat(*v3, 0LL, @"%@pmv_t=%llu ", a1[1], v54);
    v56 = (const void *)a1[1];
    if (v56) {
      CFRelease(v56);
    }
    a1[1] = v55;
  }

  uint64_t v57 = a1[51];
  if (v57 != -1)
  {
    CFStringRef v58 = CFStringCreateWithFormat(*v3, 0LL, @"%@freeQ_d=%lld ", a1[1], v57);
    v59 = (const void *)a1[1];
    if (v59) {
      CFRelease(v59);
    }
    a1[1] = v58;
  }

  uint64_t v60 = a1[52];
  if (v60 != -1)
  {
    CFStringRef v61 = CFStringCreateWithFormat(*v3, 0LL, @"%@max_mem=%llu ", a1[1], v60);
    v62 = (const void *)a1[1];
    if (v62) {
      CFRelease(v62);
    }
    a1[1] = v61;
  }

  uint64_t v63 = a1[53];
  if (v63 != 0x7FFFFFFFFFFFFFFFLL)
  {
    CFStringRef v64 = CFStringCreateWithFormat(*v3, 0LL, @"%@xp_desc=%lld ", a1[1], v63);
    v65 = (const void *)a1[1];
    if (v65) {
      CFRelease(v65);
    }
    a1[1] = v64;
  }

  uint64_t v66 = a1[54];
  if (v66 != 0x7FFFFFFFFFFFFFFFLL)
  {
    CFStringRef v67 = CFStringCreateWithFormat(*v3, 0LL, @"%@xp_data=%lld ", a1[1], v66);
    v68 = (const void *)a1[1];
    if (v68) {
      CFRelease(v68);
    }
    a1[1] = v67;
  }

  uint64_t v69 = a1[55];
  if (v69 != -1)
  {
    CFStringRef v70 = CFStringCreateWithFormat(*v3, 0LL, @"%@oc_hit=%llu ", a1[1], v69);
    v71 = (const void *)a1[1];
    if (v71) {
      CFRelease(v71);
    }
    a1[1] = v70;
  }

  uint64_t v72 = a1[56];
  if (v72 != -1)
  {
    CFStringRef v73 = CFStringCreateWithFormat(*v3, 0LL, @"%@oc_miss=%llu ", a1[1], v72);
    v74 = (const void *)a1[1];
    if (v74) {
      CFRelease(v74);
    }
    a1[1] = v73;
  }

  uint64_t v75 = a1[57];
  if (v75)
  {
    CFStringRef v76 = CFStringCreateWithFormat(*v3, 0LL, @"%@dirstats=%llu ", a1[1], v75);
    v77 = (const void *)a1[1];
    if (v77) {
      CFRelease(v77);
    }
    a1[1] = v76;
  }

  uint64_t v78 = a1[61];
  if (v78)
  {
    CFStringRef v79 = CFStringCreateWithFormat(*v3, 0LL, @"%@decloned=%llu ", a1[1], v78);
    v80 = (const void *)a1[1];
    if (v80) {
      CFRelease(v80);
    }
    a1[1] = v79;
  }

  uint64_t v81 = a1[62];
  if (v81)
  {
    CFStringRef v82 = CFStringCreateWithFormat(*v3, 0LL, @"%@source_meta_size=%llu ", a1[1], v81);
    v83 = (const void *)a1[1];
    if (v83) {
      CFRelease(v83);
    }
    a1[1] = v82;
  }

  uint64_t v84 = a1[58];
  if (v84)
  {
    CFStringRef v85 = CFStringCreateWithFormat(*v3, 0LL, @"%@ever_cloned=%llu ", a1[1], v84);
    v86 = (const void *)a1[1];
    if (v86) {
      CFRelease(v86);
    }
    a1[1] = v85;
  }

  uint64_t v87 = a1[59];
  if (v87)
  {
    CFStringRef v88 = CFStringCreateWithFormat(*v3, 0LL, @"%@full_clones=%llu ", a1[1], v87);
    v89 = (const void *)a1[1];
    if (v89) {
      CFRelease(v89);
    }
    a1[1] = v88;
  }

  uint64_t v90 = a1[63];
  if (v90 != -1)
  {
    CFStringRef v91 = CFStringCreateWithFormat(*v3, 0LL, @"%@disk_free_start=%llu ", a1[1], v90);
    v92 = (const void *)a1[1];
    if (v92) {
      CFRelease(v92);
    }
    a1[1] = v91;
  }

  uint64_t v93 = a1[64];
  if (v93 != -1)
  {
    CFStringRef v94 = CFStringCreateWithFormat(*v3, 0LL, @"%@disk_free_curr=%llu ", a1[1], v93);
    v95 = (const void *)a1[1];
    if (v95) {
      CFRelease(v95);
    }
    a1[1] = v94;
  }

  uint64_t v96 = a1[65];
  if (v96 != -1)
  {
    CFStringRef v97 = CFStringCreateWithFormat(*v3, 0LL, @"%@ip_freeq_start=%llu ", a1[1], v96);
    v98 = (const void *)a1[1];
    if (v98) {
      CFRelease(v98);
    }
    a1[1] = v97;
  }

  uint64_t v99 = a1[66];
  if (v99 != -1)
  {
    CFStringRef v100 = CFStringCreateWithFormat(*v3, 0LL, @"%@ip_freeq_curr=%llu ", a1[1], v99);
    v101 = (const void *)a1[1];
    if (v101) {
      CFRelease(v101);
    }
    a1[1] = v100;
  }

  uint64_t v102 = a1[79];
  if (v102)
  {
    CFStringRef v103 = CFStringCreateWithFormat(*v3, 0LL, @"%@msu_shared_clone_blk=%llu ", a1[1], v102);
    v104 = (const void *)a1[1];
    if (v104) {
      CFRelease(v104);
    }
    a1[1] = v103;
  }

  uint64_t v105 = a1[80];
  if (v105)
  {
    CFStringRef v106 = CFStringCreateWithFormat(*v3, 0LL, @"%@msu_purgble_clone_blk=%llu ", a1[1], v105);
    v107 = (const void *)a1[1];
    if (v107) {
      CFRelease(v107);
    }
    a1[1] = v106;
  }

  uint64_t v108 = a1[81];
  if (v108)
  {
    CFStringRef v109 = CFStringCreateWithFormat(*v3, 0LL, @"%@cloned_apps_blk=%llu ", a1[1], v108);
    v110 = (const void *)a1[1];
    if (v110) {
      CFRelease(v110);
    }
    a1[1] = v109;
  }

  uint64_t v111 = a1[82];
  if (v111)
  {
    CFStringRef v112 = CFStringCreateWithFormat(*v3, 0LL, @"%@pure_cloned_apps_blk=%llu ", a1[1], v111);
    v113 = (const void *)a1[1];
    if (v113) {
      CFRelease(v113);
    }
    a1[1] = v112;
  }

  uint64_t v114 = a1[83];
  if (v114)
  {
    CFStringRef v115 = CFStringCreateWithFormat(*v3, 0LL, @"%@tmp_blk=%llu ", a1[1], v114);
    v116 = (const void *)a1[1];
    if (v116) {
      CFRelease(v116);
    }
    a1[1] = v115;
  }

  uint64_t v117 = a1[84];
  if (v117)
  {
    CFStringRef v118 = CFStringCreateWithFormat(*v3, 0LL, @"%@tmp_cloned_blk=%llu ", a1[1], v117);
    v119 = (const void *)a1[1];
    if (v119) {
      CFRelease(v119);
    }
    a1[1] = v118;
  }

  uint64_t v120 = a1[67];
  if (v120 != -1)
  {
    CFStringRef v121 = CFStringCreateWithFormat(*v3, 0LL, @"%@src_fsroot_nodes=%llu ", a1[1], v120);
    v122 = (const void *)a1[1];
    if (v122) {
      CFRelease(v122);
    }
    a1[1] = v121;
  }

  uint64_t v123 = a1[70];
  if (v123 != -1)
  {
    CFStringRef v124 = CFStringCreateWithFormat(*v3, 0LL, @"%@src_fsroot_depth=%llu ", a1[1], v123);
    v125 = (const void *)a1[1];
    if (v125) {
      CFRelease(v125);
    }
    a1[1] = v124;
  }

  uint64_t v126 = a1[68];
  if (v126 != -1)
  {
    CFStringRef v127 = CFStringCreateWithFormat(*v3, 0LL, @"%@src_fsroot_2nd_nodes=%llu ", a1[1], v126);
    v128 = (const void *)a1[1];
    if (v128) {
      CFRelease(v128);
    }
    a1[1] = v127;
  }

  uint64_t v129 = a1[71];
  if (v129 != -1)
  {
    CFStringRef v130 = CFStringCreateWithFormat(*v3, 0LL, @"%@src_fsroot_2nd_depth=%llu ", a1[1], v129);
    v131 = (const void *)a1[1];
    if (v131) {
      CFRelease(v131);
    }
    a1[1] = v130;
  }

  uint64_t v132 = a1[69];
  if (v132 != -1)
  {
    CFStringRef v133 = CFStringCreateWithFormat(*v3, 0LL, @"%@tgt_fsroot_nodes=%llu ", a1[1], v132);
    v134 = (const void *)a1[1];
    if (v134) {
      CFRelease(v134);
    }
    a1[1] = v133;
  }

  uint64_t v135 = a1[72];
  if (v135 != -1)
  {
    CFStringRef v136 = CFStringCreateWithFormat(*v3, 0LL, @"%@tgt_fsroot_depth=%llu ", a1[1], v135);
    v137 = (const void *)a1[1];
    if (v137) {
      CFRelease(v137);
    }
    a1[1] = v136;
  }

  uint64_t v138 = a1[73];
  if (v138)
  {
    CFStringRef v139 = CFStringCreateWithFormat(*v3, 0LL, @"%@data_num_hardlnks=%llu ", a1[1], v138);
    v140 = (const void *)a1[1];
    if (v140) {
      CFRelease(v140);
    }
    a1[1] = v139;
  }

  uint64_t v141 = a1[75];
  if (v141)
  {
    CFStringRef v142 = CFStringCreateWithFormat(*v3, 0LL, @"%@data_size_hardlnks=%llu ", a1[1], v141);
    v143 = (const void *)a1[1];
    if (v143) {
      CFRelease(v143);
    }
    a1[1] = v142;
  }

  uint64_t v144 = a1[77];
  if (v144)
  {
    CFStringRef v145 = CFStringCreateWithFormat(*v3, 0LL, @"%@data_ondisk_hardlnks=%llu ", a1[1], v144);
    v146 = (const void *)a1[1];
    if (v146) {
      CFRelease(v146);
    }
    a1[1] = v145;
  }

  uint64_t v147 = a1[74];
  if (v147)
  {
    CFStringRef v148 = CFStringCreateWithFormat(*v3, 0LL, @"%@data_num_fclones=%llu ", a1[1], v147);
    v149 = (const void *)a1[1];
    if (v149) {
      CFRelease(v149);
    }
    a1[1] = v148;
  }

  uint64_t v150 = a1[76];
  if (v150)
  {
    CFStringRef v151 = CFStringCreateWithFormat(*v3, 0LL, @"%@data_size_fclones=%llu ", a1[1], v150);
    v152 = (const void *)a1[1];
    if (v152) {
      CFRelease(v152);
    }
    a1[1] = v151;
  }

  uint64_t v153 = a1[78];
  if (v153)
  {
    CFStringRef v154 = CFStringCreateWithFormat(*v3, 0LL, @"%@data_ondisk_fclones=%llu ", a1[1], v153);
    v155 = (const void *)a1[1];
    if (v155) {
      CFRelease(v155);
    }
    a1[1] = v154;
  }

  uint64_t v156 = a1[85];
  if (v156)
  {
    CFStringRef v157 = CFStringCreateWithFormat(*v3, 0LL, @"%@purge_all=%llu ", a1[1], v156);
    v158 = (const void *)a1[1];
    if (v158) {
      CFRelease(v158);
    }
    a1[1] = v157;
  }

  uint64_t v159 = a1[86];
  if (v159)
  {
    CFStringRef v160 = CFStringCreateWithFormat(*v3, 0LL, @"%@purge_full=%llu ", a1[1], v159);
    v161 = (const void *)a1[1];
    if (v161) {
      CFRelease(v161);
    }
    a1[1] = v160;
  }

  uint64_t v162 = a1[87];
  if (v162)
  {
    CFStringRef v163 = CFStringCreateWithFormat(*v3, 0LL, @"%@purge_full_2=%llu ", a1[1], v162);
    v164 = (const void *)a1[1];
    if (v164) {
      CFRelease(v164);
    }
    a1[1] = v163;
  }

  uint64_t v165 = a1[88];
  if (v165)
  {
    CFStringRef v166 = CFStringCreateWithFormat(*v3, 0LL, @"%@purge_from_data=%llu ", a1[1], v165);
    v167 = (const void *)a1[1];
    if (v167) {
      CFRelease(v167);
    }
    a1[1] = v166;
  }

  uint64_t v168 = a1[89];
  if (v168)
  {
    CFStringRef v169 = CFStringCreateWithFormat(*v3, 0LL, @"%@purge_from_user=%llu ", a1[1], v168);
    v170 = (const void *)a1[1];
    if (v170) {
      CFRelease(v170);
    }
    a1[1] = v169;
  }

  uint64_t v171 = a1[90];
  if (v171 != -1)
  {
    CFStringRef v172 = CFStringCreateWithFormat(*v3, 0LL, @"%@incompat=0x%llx ", a1[1], v171);
    v173 = (const void *)a1[1];
    if (v173) {
      CFRelease(v173);
    }
    a1[1] = v172;
  }

  uint64_t v174 = a1[91];
  if (v174 != -1)
  {
    CFStringRef v175 = CFStringCreateWithFormat(*v3, 0LL, @"%@roincompat=0x%llx ", a1[1], v174);
    v176 = (const void *)a1[1];
    if (v176) {
      CFRelease(v176);
    }
    a1[1] = v175;
  }

  uint64_t v177 = a1[92];
  if (v177 != -1)
  {
    CFStringRef v178 = CFStringCreateWithFormat(*v3, 0LL, @"%@features=0x%llx ", a1[1], v177);
    v179 = (const void *)a1[1];
    if (v179) {
      CFRelease(v179);
    }
    a1[1] = v178;
  }

void *authapfs_hexdump_hash(unsigned __int8 *a1, void *a2, unsigned int a3)
{
  unsigned int v6 = (2 * a3) | 1;
  bzero(a2, v6);
  if (a3)
  {
    uint64_t v7 = a3;
    CFStringRef v8 = (char *)a2;
    do
    {
      int v9 = *a1++;
      int v10 = snprintf(v8, v6, "%02hhx", v9);
      v8 += v10;
      v6 -= v10;
      --v7;
    }

    while (v7);
  }

  return a2;
}

uint64_t authapfs_get_hash_info(int a1)
{
  switch(a1)
  {
    case 1:
      uint64_t result = ccsha256_di();
      break;
    case 2:
    case 5:
      uint64_t result = ccsha512_256_di();
      break;
    case 3:
      uint64_t result = ccsha384_di();
      break;
    case 4:
      uint64_t result = ccsha512_di();
      break;
    default:
      uint64_t result = 0LL;
      break;
  }

  return result;
}

uint64_t authapfs_should_hash_node(uint64_t a1)
{
  if ((*(_BYTE *)(a1 + 21) & 4) != 0) {
    return 0LL;
  }
  if ((obj_type_and_flags(a1) & 0x8000000) != 0 || (*(_BYTE *)(a1 + 17) & 2) != 0)
  {
    LODWORD(v2) = 0;
  }

  else
  {
    uint64_t v2 = *(void *)(a1 + 8);
    if (v2) {
      LODWORD(v2) = (*(unsigned __int8 *)(*(void *)(v2 + 376) + 56LL) >> 5) & 1;
    }
  }

  if (*(_DWORD *)(a1 + 40) != 14) {
    return 0LL;
  }
  else {
    return v2 | ((*(_WORD *)(*(void *)(a1 + 56) + 32LL) & 8) >> 3);
  }
}

uint64_t authapfs_validate_node_hash(uint64_t a1, void *a2, unsigned int a3, unsigned int a4)
{
  uint64_t v12 = *MEMORY[0x1895F89C0];
  memset(__s1, 0, sizeof(__s1));
  if (!a2) {
    return 22LL;
  }
  uint64_t result = authapfs_hash_node(a1, (uint64_t)__s1, a3, a4);
  if (!(_DWORD)result)
  {
    uint64_t result = memcmp(__s1, a2, a3);
    if ((_DWORD)result)
    {
      char v10 = 0;
      memset(v9, 0, sizeof(v9));
      char v8 = 0;
      memset(v7, 0, sizeof(v7));
      authapfs_hexdump_hash((unsigned __int8 *)a2, v7, a3);
      authapfs_hexdump_hash((unsigned __int8 *)__s1, v9, a3);
      log_err( "%s:%d: hash mismatch! expected: %s, actual: %s\n",  "authapfs_validate_node_hash",  234,  (const char *)v7,  (const char *)v9);
      return 80LL;
    }
  }

  return result;
}

uint64_t authapfs_hash_node(uint64_t a1, uint64_t a2, int a3, unsigned int a4)
{
  uint64_t result = 22LL;
  if (a2 && (*(_WORD *)(*(void *)(a1 + 56) + 32LL) & 8) != 0)
  {
    if (authapfs_valid_hash_type(a4) || authapfs_hash_size(a4) != a3)
    {
      return 22LL;
    }

    else
    {
      authapfs_get_hash_info(a4);
      obj_size_phys(a1);
      ccdigest();
      return 0LL;
    }
  }

  return result;
}

uint64_t authapfs_validate_node(void *a1, uint64_t a2)
{
  uint64_t v12 = *MEMORY[0x1895F89C0];
  if ((authapfs_state & 1) == 0) {
    return 0LL;
  }
  CFStringRef v4 = (const void *)a1[1];
  unint64_t v5 = a1[50];
  memset(__s2, 0, sizeof(__s2));
  if (!a2) {
    return a2;
  }
  uint64_t v7 = (void *)(a2 + 32);
  if (!memcmp(v7, __s2, HIWORD(v5) & 0x7F)) {
    return 0LL;
  }
  a2 = authapfs_validate_node_hash((uint64_t)a1, v7, HIWORD(v5) & 0x7F, (v5 >> 44) & 0xF);
  if ((_DWORD)a2)
  {
    uint64_t v8 = obj_oid((uint64_t)a1);
    uint64_t v9 = obj_xid((uint64_t)a1);
    uint64_t v10 = obj_oid((uint64_t)v4);
    log_err("failed to validate node %p (oid:%llu, xid:%llu) of fs %p (%llu) - %d\n", a1, v8, v9, v4, v10, a2);
  }

  return a2;
}

uint64_t authapfs_valid_hash_type(unsigned int a1)
{
  if (a1 <= 5 && (a1 & 0xFFFFFFFD) != 0) {
    return 0LL;
  }
  log_err("%s:%d: Invalid or unknown hash type: %d\n", "authapfs_valid_hash_type", 50, a1);
  return 22LL;
}

uint64_t authapfs_hash_size(int a1)
{
  else {
    return dword_183C99E10[a1 - 1];
  }
}

double integrity_meta_init_phys(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  int v3 = *a3;
  if (*a3 > 5u || (*a3 & 0xFFFFFFFD) == 0)
  {
    log_err("%s:%d: Invalid or unknown hash type: %d\n", "authapfs_valid_hash_type", 50, *a3);
  }

  else
  {
    *(void *)&double result = 2LL;
    *(void *)(a1 + 32) = 2LL;
    *(_DWORD *)(a1 + 40) = v3;
    *(_DWORD *)(a1 + 44) = 128;
  }

  return result;
}

uint64_t integrity_meta_obj_init(uint64_t a1)
{
  CFTypeRef v1 = *(_DWORD **)(a1 + 56);
  unsigned int v2 = v1[10];
  if (v2 - 1 > 4) {
    unsigned int v3 = 0;
  }
  else {
    unsigned int v3 = dword_183C99E10[v2 - 1];
  }
  if (v1[8])
  {
    uint64_t v4 = v1[11];
    if (v4 >= 0x30)
    {
      if (v2 > 5 || (v2 & 0xFFFFFFFD) == 0)
      {
        log_err("%s:%d: Invalid or unknown hash type: %d\n", "authapfs_valid_hash_type", 50, v1[10]);
      }

      else if (*(_DWORD *)(a1 + 48) >= v4 + v3)
      {
        uint64_t v6 = 0LL;
        *(void *)(a1 + 376) = v1;
        *(void *)(a1 + 384) = (char *)v1 + v4;
        *(_DWORD *)(a1 + 392) = v3;
        return v6;
      }
    }
  }

  return 92LL;
}

uint64_t authapfs_integrity_meta_get_internal(uint64_t a1, char **a2, int a3)
{
  if (!a1) {
    return 22LL;
  }
  if (!a2 && !a3) {
    return 22LL;
  }
  unint64_t v7 = *(void *)(*(void *)(a1 + 376) + 1024LL);
  if (v7)
  {
    uint64_t v8 = *(void *)(a1 + 392);
    pthread_mutex_lock((pthread_mutex_t *)(a1 + 1720));
    uint64_t v9 = *(char **)(a1 + 3600);
    if (v9)
    {
      if (a2)
      {
        obj_retain(v9);
        *a2 = *(char **)(a1 + 3600);
      }

      pthread_mutex_unlock((pthread_mutex_t *)(a1 + 1720));
      return 0LL;
    }

    CFStringRef v13 = 0LL;
    pthread_mutex_unlock((pthread_mutex_t *)(a1 + 1720));
    uint64_t result = obj_get( *(void *)(v8 + 392),  0,  v7,  (int *)&integrity_meta_desc,  0LL,  a1,  *(void *)(a1 + 432),  0LL,  (uint64_t *)&v13);
    if (!(_DWORD)result)
    {
      v11 = v13;
      pthread_mutex_lock((pthread_mutex_t *)(a1 + 3904));
      uint64_t v12 = (int32x2_t *)*((void *)v11 + 47);
      *(int32x2_t *)(a1 + 3972) = vrev64_s32(v12[4]);
      *(int32x2_t *)(a1 + 3984) = v12[6];
      *(_BYTE *)(a1 + 3968) = 1;
      pthread_mutex_unlock((pthread_mutex_t *)(a1 + 3904));
      if (a3)
      {
        pthread_mutex_lock((pthread_mutex_t *)(a1 + 1720));
        if (!*(void *)(a1 + 3600))
        {
          obj_retain(v13);
          *(void *)(a1 + 3600) = v13;
        }

        pthread_mutex_unlock((pthread_mutex_t *)(a1 + 1720));
      }

      if (!a2)
      {
        obj_release((uint64_t *)v13);
        return 0LL;
      }

      uint64_t result = 0LL;
      *a2 = v13;
    }
  }

  else
  {
    uint64_t v10 = obj_oid(a1);
    log_err( "%s:%d: %s integrity_meta object of fs %llu, oid invalid\n",  "authapfs_integrity_meta_get_internal",  168,  (const char *)(a1 + 3992),  v10);
    return 2LL;
  }

  return result;
}

uint64_t authapfs_get_hash_args(uint64_t a1, _DWORD *a2)
{
  uint64_t v8 = 0LL;
  if (!a2) {
    return 22LL;
  }
  uint64_t result = authapfs_integrity_meta_get_internal(a1, &v8, 0);
  if (!(_DWORD)result)
  {
    uint64_t v4 = (uint64_t *)v8;
    unsigned int v5 = *((_DWORD *)v8 + 98);
    if (v5 >= 0x40) {
      size_t v6 = 64LL;
    }
    else {
      size_t v6 = v5;
    }
    unint64_t v7 = (const void *)*((void *)v8 + 48);
    a2[6] = *(_DWORD *)(*((void *)v8 + 47) + 40LL);
    a2[7] = v5;
    a2[5] |= 0x180u;
    memcpy(a2 + 8, v7, v6);
    obj_release(v4);
    return 0LL;
  }

  return result;
}

uint64_t authapfs_seal_is_broken(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (pthread_mutex_t *)(a1 + 1720);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 1720));
  uint64_t v5 = *(void *)(a1 + 3600);
  if (v5)
  {
    uint64_t v6 = *(void *)(v5 + 376);
    unint64_t v7 = (unsigned int *)(v6 + 36);
    uint64_t v8 = (unsigned int *)(v6 + 32);
    uint64_t v9 = (unint64_t *)(v6 + 48);
  }

  else
  {
    pthread_mutex_unlock(v4);
    if (!*(_BYTE *)(a1 + 3968)) {
      return 0LL;
    }
    uint64_t v4 = (pthread_mutex_t *)(a1 + 3904);
    pthread_mutex_lock((pthread_mutex_t *)(a1 + 3904));
    unint64_t v7 = (unsigned int *)(a1 + 3972);
    uint64_t v8 = (unsigned int *)(a1 + 3976);
    uint64_t v9 = (unint64_t *)(a1 + 3984);
  }

  unint64_t v10 = *v9;
  unsigned int v11 = *v8;
  unsigned int v12 = *v7;
  pthread_mutex_unlock(v4);
  if (a2) {
    BOOL v13 = v11 >= 2;
  }
  else {
    BOOL v13 = 0;
  }
  int v14 = !v13;
  uint64_t result = v14 & v12;
  if (v13 && (v12 & 1) != 0) {
    return obj_xid(a2) >= v10;
  }
  return result;
}

uint64_t delta_validate_op(unsigned __int8 *a1, unint64_t a2, _DWORD *a3)
{
  if (!a2) {
    return 35LL;
  }
  unsigned int v6 = *a1;
  LODWORD(v8) = 1;
  switch(v6)
  {
    case 0u:
      goto LABEL_88;
    case 1u:
      unint64_t v8 = *(unsigned int *)(a1 + 1);
      if (v8 > a2) {
        int v11 = 2;
      }
      else {
        int v11 = 3;
      }
      if ((v8 - 1048598) >= 0xFFEFFFEF)
      {
        int v12 = v11;
      }

      else
      {
        LODWORD(v8) = 0;
        int v12 = 4;
      }

      goto LABEL_77;
    case 2u:
      if (*(_DWORD *)(a1 + 1) != 18 || a1[5] > 1u || *(_DWORD *)(a1 + 6) < 3u || *(void *)(a1 + 10) >> 60) {
        goto LABEL_89;
      }
      if (a2 < 0x12) {
        return 35LL;
      }
      LODWORD(v8) = 18;
      goto LABEL_88;
    case 3u:
      if (*(_DWORD *)(a1 + 1) == 25 && !(*(void *)(a1 + 5) >> 60) && !(*(void *)(a1 + 13) >> 60)) {
        goto LABEL_28;
      }
      goto LABEL_89;
    case 4u:
      if (*(_DWORD *)(a1 + 1) != 17 || *(void *)(a1 + 5) >> 60) {
        goto LABEL_89;
      }
      LODWORD(v8) = 17;
      goto LABEL_88;
    case 5u:
      if (*(_DWORD *)(a1 + 1) != 997994796
        || *(void *)(a1 + 5) > 3uLL
        || *(_OWORD *)(a1 + 41) == 0LL
        || (strnlen((const char *)a1 + 57, 0x100uLL) & 0xFFFFFFFFFFFFFEFFLL) == 0
        || (*(_DWORD *)(a1 + 21) - 65537) < 0xFFFF0FFF
        || (strnlen((const char *)a1 + 660, 0x100uLL) & 0xFFFFFFFFFFFFFEFFLL) == 0)
      {
        goto LABEL_89;
      }

      LODWORD(v8) = 1024;
      goto LABEL_88;
    case 6u:
      LODWORD(v8) = 141;
      goto LABEL_88;
    case 7u:
      int v13 = *(unsigned __int16 *)(a1 + 1);
      unsigned int v14 = *(unsigned __int16 *)(a1 + 3);
      if (v14 > 0xEE0) {
        goto LABEL_89;
      }
      unint64_t v8 = v13 + v14 + 5;
      if (v8 > a2) {
        return 35LL;
      }
      unint64_t v15 = *(void *)(a1 + 5);
      if ((v15 & 0xFFFFFFFFFFFFFFFLL) == 0) {
        goto LABEL_89;
      }
      unint64_t v16 = v15 >> 60;
      int v17 = 1 << v16;
      goto LABEL_51;
    case 8u:
      uint64_t v18 = *(unsigned __int16 *)(a1 + 1);
      unint64_t v8 = v18 + 3;
      if (v8 > a2) {
        return 35LL;
      }
      unint64_t v19 = *(void *)(a1 + 3);
      if ((v19 & 0xFFFFFFFFFFFFFFFLL) == 0) {
        goto LABEL_89;
      }
      unint64_t v20 = v19 >> 60;
      int v17 = 1 << v20;
LABEL_51:
      if ((v17 & 0x1678) == 0) {
        goto LABEL_89;
      }
      goto LABEL_88;
    case 9u:
      uint64_t v21 = *(unsigned int *)(a1 + 17);
      unint64_t v8 = (v21 + 21);
      if (v8 <= a2) {
        goto LABEL_88;
      }
      return 35LL;
    case 0xAu:
    case 0xCu:
      uint64_t v9 = *(void *)(a1 + 17);
      if (!v9) {
        goto LABEL_89;
      }
      if ((v9 & 0xFFF) != 0) {
        goto LABEL_89;
      }
      uint64_t v10 = *(void *)(a1 + 9);
      if ((v10 & 0xFFF) != 0 || __CFADD__(v10, v9)) {
        goto LABEL_89;
      }
LABEL_28:
      LODWORD(v8) = 25;
      goto LABEL_88;
    case 0xBu:
      unint64_t v22 = *(void *)(a1 + 1);
      if (!v22) {
        goto LABEL_89;
      }
      if (v22 >> 60) {
        goto LABEL_89;
      }
      uint64_t v23 = *(void *)(a1 + 17);
      uint64_t v24 = *(void *)(a1 + 33);
      if (!v24) {
        goto LABEL_89;
      }
      if ((v24 & 0xFFF) != 0) {
        goto LABEL_89;
      }
      unint64_t v25 = *(void *)(a1 + 9);
      if ((v25 & 0xFFF) != 0) {
        goto LABEL_89;
      }
      unint64_t v26 = *(void *)(a1 + 25);
      if ((v26 & 0xFFF) != 0 || __CFADD__(v25, v24) || __CFADD__(v26, v24)) {
        goto LABEL_89;
      }
      if (v23 != v22)
      {
        LODWORD(v8) = 41;
LABEL_88:
        uint64_t result = 0LL;
        *a3 = v8;
        return result;
      }

      LODWORD(v8) = 41;
      if (v25 + v24 <= v26 || v26 + v24 <= v25) {
        goto LABEL_88;
      }
LABEL_89:
      uint64_t result = 92LL;
      break;
    case 0xDu:
      int v27 = *(_DWORD *)(a1 + 9);
      unsigned int v28 = v27 - 65537;
      unint64_t v8 = (v27 + 13);
      if (v8 > a2) {
        int v29 = 2;
      }
      else {
        int v29 = 3;
      }
      if (v28 >= 0xFFFF0FFF)
      {
        int v12 = v29;
      }

      else
      {
        LODWORD(v8) = 0;
        int v12 = 4;
      }

LABEL_77:
      if (v12 == 3) {
        goto LABEL_88;
      }
      if (v12 == 4) {
        goto LABEL_89;
      }
      return 35LL;
    case 0xEu:
      int v30 = *(_DWORD *)(a1 + 1);
      unsigned int v31 = v30 - 65537;
      unint64_t v8 = (v30 + 5);
      if (v8 > a2) {
        int v32 = 2;
      }
      else {
        int v32 = 3;
      }
      if (v31 >= 0xFFFF0FFF)
      {
        int v33 = v32;
      }

      else
      {
        LODWORD(v8) = 0;
        int v33 = 4;
      }

      if (v33 == 4) {
        goto LABEL_89;
      }
      if (v33 == 3) {
        goto LABEL_88;
      }
      return 35LL;
    default:
      goto LABEL_89;
  }

  return result;
}

    if (obj_oid(*(void *)v38) != *v10) {
      btree_node_child_id_update( *v96,  (unsigned __int16)(WORD4(v17[v93]) - 1),  (uint64_t *)(*(void *)v38 + 112LL),  v97);
    }
    goto LABEL_79;
  }

uint64_t delta_op_type_struct_size(unsigned int a1)
{
  if (a1 > 0xE) {
    return 0LL;
  }
  else {
    return dword_183C99E38[(char)a1];
  }
}

uint64_t delta_canonicalize( unsigned int *a1, unsigned __int8 *a2, unint64_t *a3, void (*a4)(unsigned __int8 *, size_t, uint64_t), uint64_t a5)
{
  uint64_t v5 = (char *)a1 + 9;
  uint64_t v6 = *a1;
  if ((_DWORD)v6) {
    return v6;
  }
  unsigned int __n = 0;
  unsigned int v12 = delta_validate_op(a2, *a3, &__n);
  uint64_t v13 = 0LL;
  if (v12)
  {
LABEL_3:
    if (v12 == 35) {
      uint64_t v6 = 0LL;
    }
    else {
      uint64_t v6 = v12;
    }
    goto LABEL_6;
  }

  __dst = (char *)a1 + 30;
  unint64_t v15 = a2;
  while (1)
  {
    size_t v16 = __n;
    v13 += __n;
    if (*((_BYTE *)a1 + 8))
    {
      if (*v5 == *v15)
      {
        switch(*v5)
        {
          case 9:
            uint64_t v21 = *(unsigned int *)((char *)a1 + 26);
            unsigned int v22 = *(_DWORD *)(v15 + 17);
            else {
              size_t v20 = (0x100000 - v21);
            }
            memcpy(&__dst[v21], v15 + 21, v20);
            unsigned int v23 = *(unsigned int *)((char *)a1 + 26) + v20;
            *(unsigned int *)((char *)a1 + 26) = v23;
            a1[1] += v20;
            if (v23 < 0x100000) {
              goto LABEL_65;
            }
            goto LABEL_31;
          case 0xA:
          case 0xC:
            uint64_t v17 = *(void *)((char *)a1 + 26);
            uint64_t v18 = v15 + 17;
            unint64_t v19 = (void *)((char *)a1 + 26);
            goto LABEL_16;
          case 0xB:
            uint64_t v17 = *(void *)((char *)a1 + 42);
            if (v17 + *(void *)((char *)a1 + 34) != *(void *)(v15 + 25)
              || *(void *)((char *)a1 + 18) + v17 != *(void *)(v15 + 9))
            {
              goto LABEL_30;
            }

            uint64_t v18 = v15 + 33;
            unint64_t v19 = (void *)((char *)a1 + 42);
LABEL_16:
            void *v19 = *v18 + v17;
            break;
          default:
            goto LABEL_30;
        }

        goto LABEL_65;
      }

LABEL_30:
      LODWORD(v20) = 0;
LABEL_31:
      a4(v5, a1[1], a5);
      *((_BYTE *)a1 + 8) = 0;
    }

    else
    {
      LODWORD(v20) = 0;
    }

    int v24 = *v15;
    if ((v24 - 10) < 3)
    {
      memcpy(v5, v15, v16);
      a1[1] = v16;
LABEL_34:
      *((_BYTE *)a1 + 8) = 1;
      goto LABEL_64;
    }

    if (v24 != 9)
    {
      if (v24 == 7)
      {
        memcpy(v5, v15, v16);
        unint64_t v25 = *(void *)((char *)a1 + 14);
        uint64_t v26 = v25 & 0xFFFFFFFFFFFFFFFLL;
        unint64_t v27 = v25 >> 60;
        if ((_DWORD)v27 == 4)
        {
          unint64_t v35 = *((unsigned __int16 *)a1 + 6);
          if (v35 <= 3)
          {
            log_err("%s:%d: Corrupt xattr in ino %llu\n");
            goto LABEL_59;
          }

          uint64_t v36 = &v5[*((unsigned __int16 *)a1 + 5)];
          __int16 v38 = *(_WORD *)(v36 + 5);
          CFStringRef v37 = v36 + 5;
          if ((v38 & 1) != 0)
          {
            unint64_t v39 = *((unsigned __int16 *)v37 + 1);
            if (v39 < 0x30 || v39 + 4 > v35)
            {
              log_err("%s:%d: Corrupt dstream in xattr ino %llu\n");
              goto LABEL_59;
            }

            *(void *)(v37 + 28) = 0LL;
          }
        }

        else if ((_DWORD)v27 == 3)
        {
          unsigned int v28 = &v5[*((unsigned __int16 *)a1 + 5)];
          unint64_t v29 = *((unsigned __int16 *)a1 + 6) - 92LL;
          uint64_t v46 = 0LL;
          unsigned int __n_4 = 0;
          v41 = v28;
          uint64_t v42 = v26;
          uint64_t v30 = xf_get_from_blob((unsigned __int16 *)(v28 + 97), v29, 8, 0LL, &v46, &__n_4);
          if ((_DWORD)v30 != 2)
          {
            uint64_t v6 = v30;
            if ((_DWORD)v30)
            {
              log_err( "%s:%d: Hit error scanning blob in ino %llu, err %d\n",  "delta_canonicalize_record",  1140,  v42,  v30);
              goto LABEL_7;
            }

            if (__n_4 <= 0x27)
            {
              log_err("%s:%d: Corrupt dstream ext in ino %llu\n");
LABEL_59:
              uint64_t v6 = 92LL;
              goto LABEL_7;
            }

            *(void *)(v46 + 16) = 0LL;
          }

          *(_DWORD *)(v41 + 65) = 0;
          *(void *)(v41 + 53) &= ~8uLL;
        }

        int v32 = v5;
      }

      else
      {
LABEL_45:
        int v32 = v15;
      }

      a4(v32, v16, a5);
      goto LABEL_64;
    }

    unsigned int v31 = *(_DWORD *)(v15 + 17);
    if (!(_DWORD)v20 && v31 == 0x100000) {
      goto LABEL_45;
    }
    if (v20 < v31)
    {
      __int128 v33 = *(_OWORD *)v15;
      *(void *)(v5 + 13) = *(void *)(v15 + 13);
      *(_OWORD *)uint64_t v5 = v33;
      *(void *)((char *)a1 + 18) += v20;
      size_t v34 = *(unsigned int *)((char *)a1 + 26) - v20;
      *(unsigned int *)((char *)a1 + 26) = v34;
      memcpy(__dst, &v15[v20 + 21], v34);
      a1[1] = v34 + 21;
      goto LABEL_34;
    }

LABEL_64:
    if (*v15 == 6) {
      break;
    }
LABEL_65:
    unint64_t v15 = &a2[v13];
    unsigned int v12 = delta_validate_op(&a2[v13], *a3 - v13, &__n);
    if (v12) {
      goto LABEL_3;
    }
  }

  uint64_t v6 = 89LL;
LABEL_6:
  *a3 = v13;
LABEL_7:
  *a1 = v6;
  return v6;
}

  if (*(_DWORD *)(v24 + 44) != (_DWORD)v11 || *(_DWORD *)(v24 + 48) != v8)
  {
    __int128 v33 = *(_DWORD *)(a1 + 684);
    uint64_t v84 = 1;
    if (v33 >= *(_DWORD *)(a1 + 680))
    {
      size_t v20 = 0LL;
      *(_DWORD *)(a1 + 684) = v33 - 1;
      uint64_t v84 = 1;
      goto LABEL_78;
    }

    size_t v20 = 0LL;
LABEL_72:
    int v24 = 0LL;
    goto LABEL_78;
  }

  obj_free_list_remove((uint64_t *)v24);
  if (v15)
  {
    fs_obj_zfree_oc(v89, v8, a5, a1);
    free_rwlock((pthread_rwlock_t *)(v15 + 176));
    obj_type_free((void *)v15, a3, v11);
    v89 = 0LL;
    CFStringRef v82 = 1;
  }

  int v32 = *(void *)(v24 + 16);
  uint64_t v84 = 1;
  if ((v32 & 1) != 0)
  {
    size_t v34 = *(void *)(v24 + 72);
    if (v34) {
      *(void *)(v34 + 80) = *(void *)(v24 + 80);
    }
    unint64_t v15 = 0LL;
    **(void **)(v24 + 80) = v34;
    *(void *)(v24 + 16) = v32 & 0xFFFFFFFFFFFFFFFELL;
    uint64_t v84 = 1;
  }

  else
  {
    unint64_t v15 = 0LL;
  }

  size_t v20 = v24;
  int v24 = 0LL;
LABEL_78:
  unint64_t v35 = pthread_rwlock_unlock((pthread_rwlock_t *)(a1 + 128));
  if (v35) {
    panic("%s:%d: unlock == 0 failed %d\n", "/Library/Caches/com.apple.xbs/Sources/apfs_framework/nx/obj.c", 2267, v35);
  }
  if (v24) {
    obj_destroy_internal(v24, 0);
  }
LABEL_82:
  if (!(v20 | v15))
  {
    unint64_t v19 = v16;
    unint64_t v7 = a6;
    goto LABEL_84;
  }

  if (v20)
  {
    CFStringRef v103 = 0LL;
    v101 = 0u;
    uint64_t v102 = 0u;
    uint64_t v99 = 0u;
    CFStringRef v100 = 0u;
    CFStringRef v97 = 0u;
    v98 = 0u;
    v95 = 0u;
    uint64_t v96 = 0u;
    uint64_t v93 = 0u;
    CFStringRef v94 = 0u;
    __tp = (timespec)0;
    v92 = 0u;
    v41 = obj_destroy_for_obj(v20);
    if (v41)
    {
      uint64_t v42 = (uint64_t (*)(uint64_t))v41;
      obj_cache_unlock_write(a1);
      if (a6) {
        *a6 = 1;
      }
      CFStringRef v43 = v42(v20);
      if (v43)
      {
        v44 = *(void *)(v20 + 8);
        if (v44) {
          uint64_t v45 = (const char *)(v44 + 3992);
        }
        else {
          uint64_t v45 = (const char *)(*(void *)(*(void *)(*(void *)v20 + 392LL) + 384LL) + 208LL);
        }
        log_err( "%s:%d: %s oid 0x%llx flags 0x%llx 0x%x type 0x%x/0x%x error destroying: %d\n",  "obj_alloc",  2363,  v45,  *(void *)(v20 + 112),  *(void *)(v20 + 16),  *(_DWORD *)(v20 + 32),  *(_DWORD *)(v20 + 36),  *(_DWORD *)(v20 + 40),  v43);
      }

      pthread_mutex_lock((pthread_mutex_t *)a1);
    }

    uint64_t v46 = *(void **)(v20 + 56);
    v47 = *(_OWORD *)(v20 + 352);
    v101 = *(_OWORD *)(v20 + 336);
    uint64_t v102 = v47;
    CFStringRef v103 = *(void *)(v20 + 368);
    uint64_t v48 = *(_OWORD *)(v20 + 288);
    CFStringRef v97 = *(_OWORD *)(v20 + 272);
    v98 = v48;
    CFStringRef v49 = *(_OWORD *)(v20 + 320);
    uint64_t v99 = *(_OWORD *)(v20 + 304);
    CFStringRef v100 = v49;
    v50 = *(_OWORD *)(v20 + 224);
    uint64_t v93 = *(_OWORD *)(v20 + 208);
    CFStringRef v94 = v50;
    uint64_t v51 = *(_OWORD *)(v20 + 256);
    v95 = *(_OWORD *)(v20 + 240);
    uint64_t v96 = v51;
    CFStringRef v52 = *(_OWORD *)(v20 + 192);
    __tp = *(timespec *)(v20 + 176);
    v92 = v52;
    v89 = v46;
    bzero(v46, v8);
    bzero((void *)v20, v11);
    v53 = v102;
    *(_OWORD *)(v20 + 336) = v101;
    *(_OWORD *)(v20 + 352) = v53;
    *(void *)(v20 + 368) = v103;
    uint64_t v54 = v98;
    *(_OWORD *)(v20 + 272) = v97;
    *(_OWORD *)(v20 + 288) = v54;
    CFStringRef v55 = v100;
    *(_OWORD *)(v20 + 304) = v99;
    *(_OWORD *)(v20 + 320) = v55;
    v56 = v94;
    *(_OWORD *)(v20 + 208) = v93;
    *(_OWORD *)(v20 + 224) = v56;
    uint64_t v57 = v96;
    *(_OWORD *)(v20 + 240) = v95;
    *(_OWORD *)(v20 + 256) = v57;
    CFStringRef v58 = v92;
    unint64_t v19 = v16;
    *(timespec *)(v20 + 176) = __tp;
    *(_OWORD *)(v20 + 192) = v58;
  }

  else
  {
    ++*(_DWORD *)(a1 + 684);
    size_t v20 = v15;
    unint64_t v19 = v16;
  }

uint64_t snap_meta_ext_obj_init(void *a1)
{
  uint64_t v1 = a1[7];
  a1[47] = v1;
  a1[48] = v1 + 32;
  return 0LL;
}

uint64_t fs_lookup_snapshot_metadata_by_xid(uint64_t a1, uint64_t a2, unsigned __int16 **a3)
{
  __int128 v11 = 0u;
  __int128 v12 = 0u;
  __int128 v9 = 0u;
  __int128 v10 = 0u;
  v8[0] = 5242881LL;
  v8[1] = a2;
  uint64_t v5 = lookup_jobj(a1, 3, 0LL, (unsigned __int8 *)v8, a3);
  uint64_t v6 = v5;
  if ((_DWORD)v5) {
    log_err( "%s:%d: %s Couldn't find snap_meta for xid %llu: %d\n",  "fs_lookup_snapshot_metadata_by_xid",  445,  (const char *)(a1 + 3992),  a2,  v5);
  }
  return v6;
}

uint64_t fs_delete_clone_superblock(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a1 + 392) + 392LL);
  unint64_t v7 = 0LL;
  uint64_t v5 = obj_get(v4, 0x40000000u, a2, (int *)&apfs_desc, 0LL, 0LL, 0LL, 0LL, (uint64_t *)&v7);
  if (!(_DWORD)v5)
  {
    obj_delete_and_free(v7, a3);
    obj_release(v7);
  }

  return v5;
}

uint64_t fs_delete_supplemental_tree(uint64_t a1, int a2, unint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v9 = *(void *)(*(void *)(a1 + 392) + 392LL);
  size_t v16 = 0LL;
  uint64_t result = obj_get(v9, 0x40000000u, a3, (int *)&apfs_desc, 0LL, 0LL, 0LL, a4, (uint64_t *)&v16);
  if (!(_DWORD)result)
  {
    uint64_t v11 = v16[47];
    if (a2 == 6)
    {
      __int128 v12 = (uint64_t *)(v11 + 1048);
      uint64_t v13 = (int *)(v11 + 1044);
    }

    else
    {
      if (a2 != 5)
      {
        obj_release(v16);
        return 45LL;
      }

      __int128 v12 = (uint64_t *)(v11 + 1032);
      uint64_t v13 = (int *)(v11 + 1040);
    }

    int v14 = *v13;
    uint64_t v15 = *v12;
    obj_release(v16);
    if (v15) {
      return supplemental_tree_destroy(a1, v14, a2, a4, v15, a5);
    }
    else {
      return 0LL;
    }
  }

  return result;
}

uint64_t fs_delete_snapshot_metadata_tree(uint64_t a1, uint64_t a2, void *a3)
{
  unint64_t v8 = 0LL;
  uint64_t tree = jfs_get_tree(a1, 3, 0LL, (uint64_t *)&v8);
  if (!(_DWORD)tree)
  {
    uint64_t tree = btree_delete((uint64_t)v8, a2, a3);
    obj_release(v8);
    if (!(_DWORD)tree)
    {
      pthread_mutex_lock((pthread_mutex_t *)(a1 + 1464));
      *(void *)(*(void *)(a1 + 376) + 152LL) = 0LL;
      fs_sb_dirty(a1, a2);
      pthread_mutex_unlock((pthread_mutex_t *)(a1 + 1464));
    }
  }

  return tree;
}

uint64_t pfkur_tree_key_cmp(uint64_t a1, void *a2, int a3, void *a4, int a5, int *a6)
{
  uint64_t result = 22LL;
  if (a3 == 8 && a5 == 8)
  {
    uint64_t result = 0LL;
    int v7 = *a2 > *a4;
    if (*a2 < *a4) {
      int v7 = -1;
    }
    *a6 = v7;
  }

  return result;
}

uint64_t spaceman_metazone_get_size( unint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, void *a5, void *a6)
{
  if (!a4) {
    return 28LL;
  }
  unint64_t v6 = a1;
  if (a1 <= a2 || a4 < a1)
  {
    if (0x180000000LL * (a2 >> 12) > a4) {
      return 28LL;
    }
    if (a4 >> 34)
    {
      uint64_t v9 = 0x1000000000LL;
      if (a4 >= 0x1000000000LL) {
        unint64_t v10 = 0x1000000000LL;
      }
      else {
        unint64_t v10 = a4;
      }
      uint64_t v8 = v10 >> 5;
      if (a4 >= 0x1000000001LL)
      {
        if (a4 - 0x1000000000LL < 0x1000000000LL) {
          uint64_t v9 = a4 - 0x1000000000LL;
        }
        v8 += ((unint64_t)v9 * (unsigned __int128)0x666666666666667uLL) >> 64;
        if (a4 >= 0x2000000001LL)
        {
          unint64_t v11 = a4 - 0x2000000000LL;
          if (a4 - 0x2000000000LL >= 0x2000000000LL) {
            unint64_t v11 = 0x2000000000LL;
          }
          v8 += v11 >> 7;
          if (a4 >= 0x4000000001LL) {
            v8 += (a4 - 0x4000000000LL) / 0xA0;
          }
        }
      }
    }

    else
    {
      uint64_t v8 = 0x20000000LL;
    }

    unint64_t v6 = v8 * (a2 >> 12);
    if (v6 >= a4 >> 2) {
      unint64_t v6 = a4 >> 2;
    }
  }

  uint64_t result = 0LL;
  unint64_t v12 = v6 / a2;
  *a5 = v12 * a2;
  *a6 = a3 - v12;
  return result;
}

unint64_t spaceman_metazone_get_partitions( unint64_t result, unint64_t a2, uint64_t a3, uint64_t a4, void *a5, void *a6)
{
  if (a5) {
    *a5 = (a2 >> 1) / result + a3;
  }
  if (a6)
  {
    unint64_t v6 = (a2 >> 4) / result;
    if (v6 >= 0x8000000 / result) {
      unint64_t v6 = 0x8000000 / result;
    }
    *a6 = a4 - v6;
  }

  return result;
}

uint64_t get_timestamp()
{
  v1.tv_sec = 0LL;
  v1.tv_nsec = 0LL;
  clock_gettime(_CLOCK_REALTIME, &v1);
  return timespec_to_apfs_timestamp(&v1.tv_sec);
}

uint64_t timespec_to_apfs_timestamp(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1];
  uint64_t v3 = v2 / 1000000000;
  uint64_t v4 = v2 % 1000000000;
  if (*a1 < 0 && v2 >= 1)
  {
    uint64_t v5 = v3 + 1;
    v4 -= 1000000000LL;
  }

  else
  {
    BOOL v6 = v2 >= 0;
    if (v2 < 0) {
      uint64_t v5 = v3 - 1;
    }
    else {
      uint64_t v5 = v2 / 1000000000;
    }
    if (v6) {
      uint64_t v7 = v4;
    }
    else {
      uint64_t v7 = v4 + 1000000000;
    }
    if (v1 >= 1) {
      uint64_t v4 = v7;
    }
    else {
      uint64_t v5 = v3;
    }
  }

  uint64_t v8 = v1 + v5;
  if (__OFADD__(v1, v5)
    || (uint64_t v9 = 1000000000 * v8, (unsigned __int128)(v8 * (__int128)1000000000LL) >> 64 != (1000000000 * v8) >> 63)
    || (uint64_t result = v4 + v9, __OFADD__(v4, v9)))
  {
    if (v1 > 0) {
      return 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      return 0x8000000000000000LL;
    }
  }

  return result;
}

uint64_t omap_key_cmp(uint64_t a1, void *a2, int a3, void *a4, int a5, int *a6)
{
  uint64_t result = 22LL;
  if (a3 == 16 && a5 == 16)
  {
    if (*a2 >= *a4)
    {
      if (*a2 > *a4)
      {
        int v7 = 1;
      }

      else
      {
        unint64_t v8 = a2[1];
        unint64_t v9 = a4[1];
        BOOL v10 = v8 >= v9;
        int v7 = v8 > v9;
        if (!v10) {
          int v7 = -1;
        }
      }
    }

    else
    {
      int v7 = -1;
    }

    uint64_t result = 0LL;
    *a6 = v7;
  }

  return result;
}

uint64_t omap_snapshot_key_cmp(uint64_t a1, void *a2, int a3, void *a4, int a5, int *a6)
{
  uint64_t result = 22LL;
  if (a3 == 8 && a5 == 8)
  {
    uint64_t result = 0LL;
    int v7 = *a2 > *a4;
    if (*a2 < *a4) {
      int v7 = -1;
    }
    *a6 = v7;
  }

  return result;
}

uint64_t omap_map_tree_get(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v25 = *MEMORY[0x1895F89C0];
  unint64_t v9 = *(char **)(a2 + 472);
  if ((a3 & 1) == 0 && v9)
  {
    *a5 = (uint64_t)v9;
    obj_retain(v9);
    return 0LL;
  }

  if (v9)
  {
    *a5 = (uint64_t)v9;
    obj_retain(v9);
    if ((a3 & 1) == 0) {
      return 0LL;
    }
    uint64_t v18 = obj_modify((void *)*a5, (*(_DWORD *)(*(void *)(a2 + 376) + 40LL) >> 29) & 2, a4);
    if ((_DWORD)v18)
    {
      uint64_t extended = v18;
      obj_release(*a5);
      *a5 = 0LL;
      return extended;
    }

LABEL_19:
    if (obj_oid(*a5) != *(void *)(*(void *)(a2 + 376) + 48LL))
    {
      *(void *)(*(void *)(a2 + 376) + 48LL) = obj_oid(*a5);
      obj_dirty(a2, a4, 0LL);
    }

    return 0LL;
  }

  uint64_t v12 = *(void *)(a2 + 376);
  int v13 = *(_DWORD *)(v12 + 40);
  uint64_t v14 = *(void *)(v12 + 48);
  v19[1] = 0LL;
  __int128 v20 = 0u;
  uint64_t v24 = 0LL;
  __int128 v22 = 0u;
  __int128 v23 = 0u;
  __int128 v21 = 0u;
  v19[0] = omap_key_cmp;
  v19[2] = 0x20000000BLL;
  uint64_t extended = btree_get_extended(a1, v13 & 0xFFFF0000, v14, 0LL, a3, (uint64_t)v19, a4, a5);
  if (!(_DWORD)extended)
  {
    uint64_t v15 = (unint64_t *)(a2 + 472);
    unint64_t v16 = *a5;
    while (!__ldaxr(v15))
    {
      if (!__stlxr(v16, v15))
      {
        obj_retain((char *)*a5);
        goto LABEL_18;
      }
    }

    __clrex();
LABEL_18:
    if ((a3 & 1) == 0) {
      return 0LL;
    }
    goto LABEL_19;
  }

  return extended;
}

  if (v3 == a1) {
    return -1LL;
  }
  if (*v3) {
    return -1LL;
  }
  return result;
}

          uint64_t v17 = *(_DWORD *)(a1 + 100);
          if (v12 % v17)
          {
            uint64_t v18 = v17 - v12 % v17;
            if (v18 + v12 <= *(unsigned int *)(a1 + 72))
            {
              bzero((void *)(*(void *)(a1 + 64) + v12), v18);
              *(_DWORD *)(a1 + 76) += v18;
            }
          }

          goto LABEL_22;
        }

        uint64_t v4 = v19;
      }
    }

    else
    {
      uint64_t v4 = 4294895648LL;
    }

    *(_BYTE *)(a1 + 82) = 0;
    goto LABEL_11;
  }

  return v4;
}

      if (!v9) {
        goto LABEL_28;
      }
    }

    unint64_t v16 = (unint64_t *)(v13 + 24);
    do
      uint64_t v17 = __ldxr(v16);
    while (__stxr(v17, v16));
    if ((v17 & 0xFFFFFF) == ((v17 >> 24) & 0xFFFFF))
    {
      if ((v15 & 0xC00000000LL) != 0)
      {
        uint64_t v18 = *(_DWORD *)(*(void *)(*(void *)a1[6].__opaque + 376LL) + 36LL);
        unint64_t v19 = (v18 + *(_DWORD *)(v13 + 48) - 1) / v18;
        if ((v15 & 0x800000000LL) != 0) {
          __int128 v20 = 0LL;
        }
        else {
          __int128 v20 = v19;
        }
        v11 += v20;
        v10 += v19 & (v15 << 28 >> 63);
        *(void *)(v13 + 16) = v15 & 0xFFFFFFF3FFFFFFFFLL;
      }

      --*(_DWORD *)&a1[10].__opaque[36];
      obj_destroy_internal(v13, 0);
      goto LABEL_19;
    }

    if ((v15 & 1) != 0)
    {
      if (v9) {
        *(void *)(v9 + 80) = *(void *)(v13 + 80);
      }
      **(void **)(v13 + 80) = v9;
    }

    __int128 v21 = *opaque;
    const void *v14 = *opaque;
    if (v21) {
      *(void *)(v21 + 80) = v14;
    }
    *opaque = v13;
    *(void *)(v13 + 80) = opaque;
    *(void *)(v13 + 16) = v15 | 9;
  }

  while (v9);
LABEL_28:
  obj_cache_unlock_write((uint64_t)a1);
  if (v11)
  {
    __int128 v22 = spaceman_unreserve(v8, 0x48u, v11);
    if (v22)
    {
      if (*(_WORD *)(v8 + 36) == 13) {
        __int128 v23 = (const char *)(v8 + 3992);
      }
      else {
        __int128 v23 = (const char *)(*(void *)(v8 + 384) + 208LL);
      }
      log_err("%s:%d: %s error unreserving space, %lld blocks: %d\n", "obj_cache_remove", 1761, v23, v11, v22);
    }
  }

  if (v10)
  {
    uint64_t v24 = spaceman_unreserve(v8, 0x50u, v10);
    if (v24)
    {
      if (*(_WORD *)(v8 + 36) == 13) {
        uint64_t v25 = (const char *)(v8 + 3992);
      }
      else {
        uint64_t v25 = (const char *)(*(void *)(v8 + 384) + 208LL);
      }
      log_err("%s:%d: %s error unreserving tier2 space, %lld blocks: %d\n", "obj_cache_remove", 1767, v25, v10, v24);
    }
  }

  pthread_mutex_unlock((pthread_mutex_t *)v5);
  return v2;
}

uint64_t omap_init_phys(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!a3) {
    return 22LL;
  }
  uint64_t result = 0LL;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)a3;
  *(void *)(a1 + 40) = *(void *)(a3 + 4);
  return result;
}

uint64_t omap_init(void *a1)
{
  uint64_t v2 = a1[7];
  int v3 = *(_DWORD *)(v2 + 44);
  BOOL v4 = v3 == 1073741826 || v3 == -2147483646;
  if (v4 && ((v5 = *(_DWORD *)(v2 + 40), v5 != -2147483646) ? (BOOL v6 = v5 == 1073741826) : (BOOL v6 = 1), v6)
    || (uint64_t result = nx_corruption_detected_int(*(void *)(*a1 + 392LL)), !(_DWORD)result))
  {
    uint64_t result = 0LL;
    a1[47] = v2;
  }

  return result;
}

uint64_t omap_obj_destroy(void *a1)
{
  uint64_t v2 = (uint64_t *)a1[59];
  if (v2 && !*(_DWORD *)(*a1 + 912LL)) {
    obj_release(v2);
  }
  return 0LL;
}

uint64_t omap_reap(uint64_t *a1, char a2, int *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = a5;
  uint64_t v127 = *MEMORY[0x1895F89C0];
  uint64_t v8 = a1[47];
  unint64_t v9 = (void *)a1[1];
  uint64_t v10 = *(void *)(*a1 + 392);
  if (v9) {
    uint64_t v11 = a1[1];
  }
  else {
    uint64_t v11 = *(void *)(*a1 + 392);
  }
  uint64_t v105 = 0LL;
  unint64_t v106 = 0LL;
  uint64_t v103 = 0LL;
  v104 = 0LL;
  uint64_t v12 = *(unsigned int *)(*(void *)(v10 + 376) + 36LL);
  if ((a2 & 2) == 0)
  {
    if (*a3)
    {
      if (v9) {
        goto LABEL_7;
      }
    }

    else
    {
      *a3 = 1;
      if (v9)
      {
LABEL_7:
        uint64_t extended = obj_modify(v9, 0, a5);
        if ((_DWORD)extended)
        {
          else {
            uint64_t v14 = (const char *)(v9[48] + 208LL);
          }
          log_err("%s:%d: %s obj_modify() failed: %d\n", "omap_reap", 309, v14, extended);
        }

LABEL_25:
        int v20 = *a3;
        if (*a3 == 1)
        {
          uint64_t v120 = 0LL;
          *(void *)&v109[0] = 0LL;
          spaceman_currently_available_space(v11, (unint64_t *)&v120, (unint64_t *)v109, 0LL, 0LL);
          uint64_t v21 = omap_map_tree_get(v11, (uint64_t)a1, 0, 0LL, (uint64_t *)&v104);
          if ((_DWORD)v21)
          {
            uint64_t extended = v21;
            else {
              __int128 v22 = (const char *)(*(void *)(v11 + 384) + 208LL);
            }
            log_err("%s:%d: %s failed to get omap tree for reaping: %d\n", "omap_reap", 322, v22, extended);
            return extended;
          }

          unsigned int v24 = v12;
          unint64_t v25 = 0LL;
          uint64_t v26 = 1024LL;
          if (*(void *)&v109[0] < 0x7D1uLL) {
            uint64_t v26 = 102LL;
          }
          if (*(void *)&v109[0] >= 0x3E9uLL) {
            uint64_t v27 = v26;
          }
          else {
            uint64_t v27 = 51LL;
          }
          uint64_t v103 = 0x1000000010LL;
          unsigned int v98 = v24;
          unsigned int v92 = v24 - 1;
          unint64_t v94 = v27;
          uint64_t v96 = (const char *)(v11 + 3992);
          while (1)
          {
            uint64_t v28 = bt_lookup_variant( (uint64_t)v104,  0LL,  (unint64_t *)a3 + 1,  (unsigned int *)&v103 + 1,  0x10u,  &v105,  (unsigned int *)&v103,  4u,  0,  0LL);
            if ((_DWORD)v28) {
              break;
            }
            if ((v105 & 1) != 0)
            {
              uint64_t v103 = 0x1000000010LL;
            }

            else
            {
              uint64_t v88 = v8;
              uint64_t v29 = (v92 + HIDWORD(v105)) / v98;
              int v30 = spaceman_free((const char *)v11, 0LL, v106, v29, v5);
              if (v30)
              {
                int v31 = v30;
                int v32 = obj_type(v11);
                __int128 v33 = (const char *)(v11 + 3992);
                if (v32 != 13) {
                  __int128 v33 = (const char *)(*(void *)(v11 + 384) + 208LL);
                }
                log_err("%s:%d: %s spaceman_free(%lld, %lld) failed: %d\n", "omap_reap", 349, v33, v106, v29, v31);
              }

              obj_cache_remove(*(pthread_mutex_t **)(v10 + 392), (uint64_t)v9, *((void *)a3 + 1), *((void *)a3 + 2));
              v25 += v29;
              if (v25 >= v94)
              {
                uint64_t extended = 36LL;
                uint64_t v8 = v88;
                goto LABEL_59;
              }

              uint64_t v103 = 0x1000000010LL;
              uint64_t v8 = v88;
            }
          }

          uint64_t extended = v28;
          if ((_DWORD)v28 != 36)
          {
            uint64_t extended = btree_delete((uint64_t)v104, v5, 0LL);
            if ((_DWORD)extended)
            {
              log_err("%s:%d: %s tree_delete() failed: %d\n", "omap_reap", 373, v96, extended);
            }

            *a3 = 2;
          }

    if (v9)
    {
LABEL_26:
      uint64_t v11 = 0LL;
      goto LABEL_27;
    }

  obj_delete_and_free(a1, a5);
  return 0LL;
}

LABEL_59:
          obj_release(v104);
          int v20 = *a3;
        }

        if (v20 != 2) {
          return extended;
        }
        uint64_t v34 = *(void *)(v8 + 56);
        if (v34)
        {
          int v35 = *(_DWORD *)(v8 + 44);
          __int128 v121 = 0u;
          uint64_t v126 = 0LL;
          __int128 v125 = 0u;
          __int128 v124 = 0u;
          __int128 v123 = 0u;
          __int128 v122 = 0u;
          uint64_t v120 = omap_snapshot_key_cmp;
          DWORD2(v121) = 19;
          if ((unsigned __int16)v35 == 2)
          {
            uint64_t extended = btree_get_extended(v11, v35 & 0xFFFF0000, v34, 0LL, 0, (uint64_t)&v120, 0LL, (uint64_t *)&v104);
            if (!(_DWORD)extended)
            {
              uint64_t extended = btree_delete((uint64_t)v104, v5, 0LL);
              if ((_DWORD)extended)
              {
                else {
                  uint64_t v36 = (const char *)(*(void *)(v11 + 384) + 208LL);
                }
                log_err("%s:%d: %s tree_delete() failed: %d\n", "omap_reap", 390, v36, extended);
              }

              obj_release(v104);
              goto LABEL_72;
            }
          }

          else
          {
            uint64_t extended = 22LL;
          }

          else {
            CFStringRef v37 = (const char *)(*(void *)(v11 + 384) + 208LL);
          }
          log_err("%s:%d: %s failed to get omap snapshot tree for reaping: %d\n", "omap_reap", 386, v37, extended);
        }

      int v13 = *(uint64_t **)(a1 + 3544);
      if (*(void *)(a1 + 432) != a4 || v13 == 0LL)
      {
        extentref_uint64_t tree = apfs_get_fsroot_tree(a1, a4, a3, a5);
        if ((_DWORD)extentref_tree) {
          return extentref_tree;
        }
        int v32 = *(void *)(a1 + 432);
        if (v32) {
          __int128 v33 = *(void *)(a1 + 496) == 0LL;
        }
        else {
          __int128 v33 = 0;
        }
        if (!v33 && v32 == a4)
        {
          uint64_t v44 = (char *)*a5;
          obj_retain(v44);
          extentref_uint64_t tree = 0LL;
          *(void *)(a1 + 3544) = v44;
          return extentref_tree;
        }

        return 0LL;
      }

      obj_retain(*(char **)(a1 + 3544));
      if (a3) {
        goto LABEL_74;
      }
      if ((_DWORD)extentref_tree) {
        return extentref_tree;
      }
      goto LABEL_78;
    case 5:
      int v15 = *(void *)(a1 + 376);
      if ((*(_BYTE *)(v15 + 56) & 0x20) == 0) {
        return 45LL;
      }
      int v16 = *(_DWORD *)(v15 + 1040);
      if (a3 && *(void *)(a1 + 440)) {
        return 30LL;
      }
      int v17 = (pthread_mutex_t *)(a1 + 1528);
      pthread_mutex_lock((pthread_mutex_t *)(a1 + 1528));
      uint64_t v36 = *(char **)(a1 + 3576);
      if (!v36) {
        goto LABEL_100;
      }
      if ((v16 & 0xC0000000) == 0)
      {
        if (*(void *)(a1 + 432) == a4) {
          goto LABEL_96;
        }
LABEL_100:
        CFStringRef v37 = *(void *)(a1 + 440);
        unsigned int v38 = *(void *)(a1 + 376);
        if (!v37) {
          CFStringRef v37 = *(void *)(v38 + 1032);
        }
        goto LABEL_102;
      }

      if ((v16 & 0xC0000000) != 0x40000000) {
        goto LABEL_100;
      }
      CFStringRef v37 = *(void *)(a1 + 440);
      if (!v37)
      {
LABEL_96:
        obj_retain(v36);
        if (a3)
        {
          extentref_uint64_t tree = obj_modify(*(void **)(a1 + 3576), 2, a3);
          uint64_t v27 = *(uint64_t **)(a1 + 3576);
          if ((_DWORD)extentref_tree) {
            goto LABEL_51;
          }
          *(void *)(*(void *)(a1 + 376) + 1032LL) = obj_oid((uint64_t)v27);
        }

        extentref_uint64_t tree = 0LL;
        uint64_t v28 = *(void *)(a1 + 3576);
        goto LABEL_47;
      }

      unsigned int v38 = *(void *)(a1 + 376);
LABEL_102:
      uint64_t v46 = *(_DWORD *)(v38 + 1040);
      *(void *)&CFStringRef v52 = 0LL;
      int v53 = 0u;
      int v57 = 0LL;
      int v55 = 0u;
      uint64_t v56 = 0u;
      int v54 = 0u;
      int v51 = fext_tree_key_cmp;
      *((void *)&v52 + 1) = 0x20000001FLL;
      if ((unsigned __int16)v46 != 2)
      {
        extentref_uint64_t tree = 22LL;
LABEL_108:
        int v48 = strerror(extentref_tree);
        log_err( "%s:%d: %s Failed to get fext tree w/oid %llu (modify_xid %llu): %d (%s)\n",  "jfs_get_tree_in_snap",  3887,  (const char *)(a1 + 3992),  v37,  a3,  extentref_tree,  v48);
        goto LABEL_113;
      }

      uint64_t extended = btree_get_extended(a1, v46 & 0xFFFF0000, v37, a4, a3 != 0, (uint64_t)&v51, a3, a5);
      extentref_uint64_t tree = extended;
      if (a3 && !(_DWORD)extended)
      {
        *(void *)(*(void *)(a1 + 376) + 1032LL) = obj_oid(*a5);
        goto LABEL_113;
      }

      if ((_DWORD)extended) {
        goto LABEL_108;
      }
LABEL_113:
      uint64_t v45 = v17;
LABEL_114:
      pthread_mutex_unlock(v45);
      return extentref_tree;
    case 6:
      if ((*(_BYTE *)(*(void *)(a1 + 376) + 56LL) & 0x40) == 0) {
        return 45LL;
      }
      int v17 = (pthread_mutex_t *)(a1 + 1592);
      pthread_mutex_lock((pthread_mutex_t *)(a1 + 1592));
      uint64_t v26 = *(char **)(a1 + 3584);
      if (!v26)
      {
        unint64_t v39 = *(void *)(a1 + 384);
        if (!v39) {
          unint64_t v39 = *(void *)(a1 + 376);
        }
        uint64_t v40 = *(_DWORD *)(v39 + 1044);
        uint64_t v41 = *(void *)(v39 + 1048);
        CFStringRef v52 = 0u;
        int v57 = 0LL;
        int v55 = 0u;
        uint64_t v56 = 0u;
        int v54 = 0u;
        int v53 = 0u;
        int v51 = pfkur_tree_key_cmp;
        DWORD2(v52) = 32;
        if ((unsigned __int16)v40 == 2)
        {
          uint64_t v42 = btree_get_extended(a1, v40 & 0xFFFF0000, v41, a4, a3 != 0, (uint64_t)&v51, a3, a5);
          uint64_t v43 = v42;
          if (a3 && !(_DWORD)v42)
          {
            extentref_uint64_t tree = 0LL;
            *(void *)(*(void *)(a1 + 376) + 1048LL) = obj_oid(*a5);
            goto LABEL_113;
          }

          if (!(_DWORD)v42)
          {
LABEL_112:
            extentref_uint64_t tree = 0LL;
            goto LABEL_113;
          }

          uint64_t v41 = *(void *)(v39 + 1048);
        }

        else
        {
          uint64_t v43 = 22LL;
        }

        int v49 = strerror(v43);
        log_err( "%s:%d: %s Failed to get pfkur tree w/oid %llu (modify_xid %llu): %d (%s)\n",  "jfs_get_tree_in_snap",  3935,  (const char *)(a1 + 3992),  v41,  a3,  v43,  v49);
        extentref_uint64_t tree = v43;
        goto LABEL_113;
      }

      obj_retain(v26);
      if (a3)
      {
        extentref_uint64_t tree = obj_modify(*(void **)(a1 + 3584), 2, a3);
        uint64_t v27 = *(uint64_t **)(a1 + 3584);
        if ((_DWORD)extentref_tree) {
          goto LABEL_51;
        }
        *(void *)(*(void *)(a1 + 376) + 1048LL) = obj_oid((uint64_t)v27);
      }

      extentref_uint64_t tree = 0LL;
      uint64_t v28 = *(void *)(a1 + 3584);
LABEL_47:
      *a5 = v28;
      goto LABEL_113;
    case 7:
      int v17 = (pthread_mutex_t *)(a1 + 1656);
      pthread_mutex_lock((pthread_mutex_t *)(a1 + 1656));
      int v18 = *(uint64_t **)(a1 + 3592);
      if (*(void *)(a1 + 432) == a4 && v18 != 0LL)
      {
        obj_retain(*(char **)(a1 + 3592));
        if (a3 && (uint64_t v29 = obj_modify(v18, 0, a3), (_DWORD)v29))
        {
          extentref_uint64_t tree = v29;
          uint64_t v27 = v18;
LABEL_51:
          obj_release(v27);
        }

        else
        {
          extentref_uint64_t tree = 0LL;
          *a5 = (uint64_t)v18;
        }

        goto LABEL_113;
      }

      extentref_uint64_t tree = apfs_get_doc_id_tree(a1, 0, a4, a3, a5);
      if ((_DWORD)extentref_tree) {
        goto LABEL_113;
      }
      if (*(void *)(a1 + 432) == a4)
      {
        int v20 = (char *)*a5;
        obj_retain(v20);
        extentref_uint64_t tree = 0LL;
        *(void *)(a1 + 3592) = v20;
        goto LABEL_113;
      }

      goto LABEL_112;
    case 8:
      int v13 = *(uint64_t **)(a1 + 3552);
      if (*(void *)(a1 + 432) != a4 || v13 == 0LL)
      {
        extentref_uint64_t tree = apfs_get_secondary_fsroot_tree(a1, a4, a3, a5);
        if (!(_DWORD)extentref_tree)
        {
          __int128 v22 = *(void *)(a1 + 432);
          if (v22) {
            uint64_t v23 = *(void *)(a1 + 496) == 0LL;
          }
          else {
            uint64_t v23 = 0;
          }
          if (!v23 && v22 == a4)
          {
            unint64_t v25 = (char *)*a5;
            obj_retain(v25);
            extentref_uint64_t tree = 0LL;
            *(void *)(a1 + 3552) = v25;
          }

          else
          {
            return 0LL;
          }
        }
      }

      else
      {
        obj_retain(*(char **)(a1 + 3552));
        if (a3)
        {
LABEL_74:
          int v35 = obj_modify(v13, 0, a3);
          if ((_DWORD)v35)
          {
            extentref_uint64_t tree = v35;
            obj_release(v13);
            return extentref_tree;
          }
        }

LABEL_72:
        obj_delete_and_free(a1, v5);
        *a3 = -1;
        return extended;
      }
    }

    uint64_t extended = 0LL;
    goto LABEL_25;
  }

  CFStringRef v118 = 0LL;
  unint64_t v119 = 0LL;
  v116[1] = 0LL;
  uint64_t v117 = 0LL;
  v116[0] = 0LL;
  __int128 v115 = 0uLL;
  __int128 v114 = 0uLL;
  __int128 v113 = 0uLL;
  __int128 v112 = 0uLL;
  uint64_t v110 = 0LL;
  uint64_t v111 = 0LL;
  memset(v109, 0, sizeof(v109));
  unint64_t v107 = 0LL;
  unint64_t v108 = 0LL;
  spaceman_currently_available_space(v11, &v108, &v107, 0LL, 0LL);
  if (v107 >= 0x7D1) {
    int v15 = 1024;
  }
  else {
    int v15 = 102;
  }
  if (v107 >= 0x3E9) {
    int v16 = v15;
  }
  else {
    int v16 = 51;
  }
  obj_lock((uint64_t)a1, 2);
  int v17 = *((_DWORD *)a1 + 96);
  if ((v17 & 1) != 0)
  {
    while (1)
      ;
  }

  *((_DWORD *)a1 + 96) = v17 | 1;
  int v18 = omap_obj_modify((void *)v11, a1, v5);
  if (v18)
  {
    LODWORD(extended) = v18;
    else {
      unint64_t v19 = (const char *)(*(void *)(v11 + 384) + 208LL);
    }
    log_err("%s:%d: %s error modifying omap: %d\n", "omap_cleanup", 1443, v19, extended);
    if ((_DWORD)extended == 28) {
      uint64_t extended = 36LL;
    }
    else {
      uint64_t extended = extended;
    }
    goto LABEL_75;
  }

  uint64_t v23 = omap_map_tree_get(v11, (uint64_t)a1, 1, v5, (uint64_t *)&v117);
  if ((_DWORD)v23)
  {
    uint64_t extended = v23;
    obj_type(v11);
    log_err("%s:%d: %s error getting mapping tree: %d\n");
    goto LABEL_75;
  }

  unsigned int v95 = v16;
  if (*a3)
  {
    unsigned int v38 = 0;
  }

  else
  {
    obj_unlock((uint64_t)a1, 2);
    __int128 v115 = 0uLL;
    uint64_t v111 = 0x1000000010LL;
    bt_iterator_init_with_hint( (uint64_t)v109,  (uint64_t)v117,  0LL,  0,  (unint64_t *)&v115,  16,  0x10u,  &v113,  0x10u,  0LL);
    unsigned int v38 = 0;
    if (!bt_iterator_ended((uint64_t)v109))
    {
      unsigned int v38 = 0;
      int v100 = v12 - 1;
      uint64_t v90 = v8;
      do
      {
        uint64_t v60 = v12;
        int v61 = bt_remove((uint64_t)v117, 0LL, (unint64_t *)&v115, 0x10u, v5);
        if (v61)
        {
          int v62 = v61;
          if (obj_type(v11) == 13) {
            log_err( "%s:%d: %s remove mapping (%lld, %lld) below watermark failed: %d\n",  "omap_cleanup",  1468,  (const char *)(v11 + 3992),  (void)v115,  *((void *)&v115 + 1),  v62);
          }
          else {
            log_err( "%s:%d: %s remove mapping (%lld, %lld) below watermark failed: %d\n",  "omap_cleanup",  1468,  (const char *)(*(void *)(v11 + 384) + 208LL),  (void)v115,  *((void *)&v115 + 1),  v62);
          }
        }

        if ((v113 & 1) == 0)
        {
          unsigned int v63 = (v100 + DWORD1(v113)) / v60;
          int v64 = spaceman_free((const char *)v11, 0LL, *((unint64_t *)&v113 + 1), v63, v5);
          if (v64)
          {
            int v65 = v64;
            int v66 = obj_type(v11);
            CFStringRef v67 = (const char *)(v11 + 3992);
            if (v66 != 13) {
              CFStringRef v67 = (const char *)(*(void *)(v11 + 384) + 208LL);
            }
            log_err( "%s:%d: %s spaceman_free(%lld, %d) failed: %d\n",  "omap_cleanup",  1475,  v67,  *((void *)&v113 + 1),  v63,  v65);
          }

          obj_cache_remove(*(pthread_mutex_t **)(v10 + 392), (uint64_t)v9, v115, *((uint64_t *)&v115 + 1));
          uint64_t v8 = v90;
        }

        if (v95 == v38)
        {
LABEL_191:
          obj_lock((uint64_t)a1, 2);
          uint64_t extended = 36LL;
          goto LABEL_75;
        }

        uint64_t v12 = v60;
        ++v38;
        bt_iterator_next((uint64_t)v109);
      }

      while (!bt_iterator_ended((uint64_t)v109));
    }

    obj_lock((uint64_t)a1, 2);
  }

  uint64_t v40 = *(void *)(v8 + 56);
  if (!v40) {
    goto LABEL_211;
  }
  unsigned int v99 = v12;
  if (*a3 && *((void *)a3 + 4) != -1LL) {
    goto LABEL_85;
  }
  int v57 = *(_DWORD *)(v8 + 44);
  __int128 v121 = 0u;
  uint64_t v126 = 0LL;
  __int128 v125 = 0u;
  __int128 v124 = 0u;
  __int128 v123 = 0u;
  __int128 v122 = 0u;
  uint64_t v120 = omap_snapshot_key_cmp;
  DWORD2(v121) = 19;
  if ((unsigned __int16)v57 != 2)
  {
    uint64_t extended = 22LL;
    goto LABEL_147;
  }

  uint64_t extended = btree_get_extended(v11, v57 & 0xFFFF0000, v40, 0LL, 0, (uint64_t)&v120, v5, (uint64_t *)&v118);
  if ((_DWORD)extended)
  {
LABEL_147:
    obj_type(v11);
    log_err("%s:%d: %s unable to get snapshot tree: %d\n");
    goto LABEL_75;
  }

  if (!*a3)
  {
    uint64_t v91 = v8;
    uint64_t v75 = v5;
    *((void *)a3 + 2) = 0LL;
    *((void *)a3 + 3) = 0LL;
    CFStringRef v76 = (uint64_t *)(a3 + 4);
    unint64_t v119 = 0LL;
    uint64_t v111 = 0x800000010LL;
    bt_iterator_init_with_hint((uint64_t)v109, (uint64_t)v118, 0LL, 0, &v119, 8, 8u, v116, 0x10u, 0LL);
    while (!bt_iterator_ended((uint64_t)v109))
    {
      int v77 = v116[0];
      uint64_t v78 = *v76;
      if ((v116[0] & 1) != 0)
      {
        if (v78)
        {
          if (((a3[1] ^ LODWORD(v116[0])) & 2) != 0) {
            break;
          }
          *((void *)a3 + 3) = v119;
        }

        else
        {
          unint64_t v79 = v119;
          *((void *)a3 + 2) = v119;
          *((void *)a3 + 3) = v79;
          a3[1] = v77;
        }
      }

      else if (v78)
      {
        goto LABEL_206;
      }

      bt_iterator_next((uint64_t)v109);
    }

    uint64_t v78 = *v76;
    if (*v76)
    {
LABEL_206:
      *((void *)a3 + 1) = v78;
      uint64_t v111 = 0x800000010LL;
      uint64_t v80 = bt_lookup_variant( (uint64_t)v118,  0LL,  (unint64_t *)a3 + 1,  (unsigned int *)&v111 + 1,  8u,  v116,  (unsigned int *)&v111,  2u,  0,  0LL);
      uint64_t v5 = v75;
      uint64_t v8 = v91;
      if ((_DWORD)v80)
      {
        uint64_t extended = v80;
        if ((_DWORD)v80 != 2) {
          goto LABEL_225;
        }
        *((void *)a3 + 1) = 0LL;
      }

      *((void *)a3 + 5) = 0LL;
      *((void *)a3 + 6) = 0LL;
      else {
        uint64_t v81 = (const char *)(*(void *)(v11 + 384) + 208LL);
      }
      log_debug( "%s:%d: %s started cleaning snapshots %lld-%lld\n",  "omap_cleanup",  1568,  v81,  *((void *)a3 + 2),  *((void *)a3 + 3));
      a1[60] = *((void *)a3 + 1);
      unint64_t v59 = *((void *)a3 + 3);
      a1[61] = v59;
      *a3 = 1;
      *((_DWORD *)a1 + 96) |= 2u;
      CFStringRef v58 = (unint64_t *)(a3 + 8);
      goto LABEL_222;
    }

    uint64_t v80 = v275;
    uint64_t v82 = v275[50];
    uint64_t v81 = (v82 >> 9) & 0x3FFF;
LABEL_73:
    HIWORD(v280) = v81;
    CFStringRef v85 = btree_node_val_len((uint64_t)v80, (unsigned __int16)v43);
    if (v85 == 65534) {
      unint64_t v86 = 0;
    }
    else {
      unint64_t v86 = v85;
    }
    LOWORD(v280) = v86;
    unint64_t v87 = (v81 + 7) & 0x1FFF8;
    if ((v82 & 0x40) != 0) {
      unint64_t v87 = v81;
    }
    else {
      unint64_t v86 = (v86 + 7) & 0x1FFF8;
    }
    uint64_t v88 = v263;
    v272 = v52;
    if ((v88 & 1) == 0) {
      break;
    }
    LODWORD(v276) = v79;
    uint64_t v40 = v43;
    unint64_t v19 = v267;
    a4 = v275;
    LOBYTE(v39) = v271;
    uint64_t v45 = v273;
    a5 = v56;
    uint64_t v42 = v55;
LABEL_106:
    LODWORD(v44) = -HIDWORD(v276);
    uint64_t v43 = (__int16)(v40 - 1);
    if (((v40 - 1) & 0x8000) != 0)
    {
      __int128 v113 = 0;
      goto LABEL_144;
    }
  }

  v257 = v58;
  uint64_t v89 = v87 + v86;
  else {
    uint64_t v90 = 0;
  }
  else {
    uint64_t v91 = 0;
  }
  LODWORD(v39) = v52 + v90 + 1;
  unsigned int v92 = btree_node_toc_required_capacity(v278, (__int16)(v52 + v90 + 1));
  unint64_t v93 = (unsigned __int16)v91 + WORD2(v276) + (unsigned __int16)v89 + (__int16)((v92 << v271) - v269);
  unint64_t v94 = (int)v277;
  if (v94 == 1)
  {
    unsigned int v95 = v90 + (__int16)v52 + *(_DWORD *)(*(void *)(v278 + 56) + 36LL) + 1;
    unint64_t v71 = v95 >= btree_node_toc_required_capacity(v278, 0);
    a5 = v56;
    uint64_t v42 = v55;
    if (!v71) {
      goto LABEL_102;
    }
  }

  else
  {
    a5 = v56;
    uint64_t v42 = v55;
    if (v93 <= (unsigned __int16)v268)
    {
LABEL_102:
      HIDWORD(v276) += v91 + v89;
      uint64_t v42 = (v42 - v90);
      if (v90) {
        v104 = v91;
      }
      else {
        v104 = 0;
      }
      LODWORD(v276) = v79 - v104;
      uint64_t v45 = v273 + 1;
      v266 += v89;
      uint64_t v40 = v43;
      v272 = v39;
      unint64_t v19 = v267;
      a4 = v275;
      LOBYTE(v39) = v271;
      goto LABEL_106;
    }
  }

  if (!v274)
  {
    LODWORD(v276) = v79;
    a4 = v275;
    uint64_t v96 = obj_flags((uint64_t)v275);
    unsigned int v97 = v278;
    obj_unlock(v278, 2);
    obj_release(v97);
    v286 = 0LL;
    unsigned int v98 = v279[1];
    unint64_t v19 = v267;
    if (!v98) {
      unsigned int v98 = *(void *)(*v279 + 392LL);
    }
    unsigned int v99 = obj_subtype((uint64_t)a4);
    CFStringRef v76 = btree_node_create(v98, v96 & 0xFFFFFC00, v99, v287, v19, &v286);
    uint64_t v40 = v265;
    uint64_t v45 = v273;
    if ((_DWORD)v76) {
      return v76;
    }
    int v100 = (unint64_t *)(v279[49] + 32LL);
    do
      uint64_t v101 = __ldxr(v100);
    while (__stxr(v101 + 1, v100));
LABEL_100:
    obj_dirty((uint64_t)v279, v19, 0LL);
    uint64_t v102 = (uint64_t)v286;
    uint64_t v103 = btree_node_toc_required_capacity((uint64_t)v286, 0);
    LOBYTE(v39) = v271;
    v269 = v103 << v271;
    v278 = v102;
    v268 = btree_node_free_space_total(v102);
    v274 = 1;
    goto LABEL_106;
  }

  unint64_t v19 = v267;
  if ((v264 & 0x80000000) == 0) {
    goto LABEL_239;
  }
  __int128 v113 = 2914;
  if ((__int16)v265 > 1)
  {
    LOWORD(v40) = v265;
    goto LABEL_136;
  }

  __int128 v114 = v257;
  if ((v259 & 2) == 0)
  {
LABEL_239:
    __int128 v113 = 0;
    v274 = 1;
    LODWORD(a8) = v42;
    a4 = v275;
    a2 = v260;
    LOWORD(v40) = v265;
    goto LABEL_146;
  }

  LOWORD(v40) = v265;
LABEL_137:
  if (*(unsigned __int16 *)(v114 + 36) == (unsigned __int16)v40 && v278)
  {
    v274 = 0;
    v284 = (uint64_t *)v278;
    v286 = 0LL;
    LODWORD(a8) = v42;
    a4 = v275;
    goto LABEL_145;
  }

  LODWORD(a8) = v42;
  v234 = v40;
  a4 = v275;
  v235 = obj_flags((uint64_t)v275) & 0xFFFFFC00LL;
  v236 = v279[1];
  if (!v236) {
    v236 = *(void *)(*v279 + 392LL);
  }
  v237 = obj_subtype((uint64_t)a4);
  v238 = btree_node_create(v236, v235, v237, v287, v19, &v284);
  if ((_DWORD)v238)
  {
    uint64_t v34 = v238;
    v277 = 0LL;
    v278 = 0LL;
    LOWORD(v120) = 0;
    __int128 v121 = 0;
    LOWORD(v122) = 0;
    __int128 v123 = 0;
    v276 = 0LL;
    __int128 v124 = 0;
    __int128 v125 = 0;
    v273 = 0;
    v274 = 1;
    goto LABEL_264;
  }

  v244 = (unint64_t *)(v279[49] + 32LL);
  do
    v245 = __ldxr(v244);
  while (__stxr(v245 + 1, v244));
  obj_dirty((uint64_t)v279, v19, 0LL);
  v274 = 1;
  a2 = v260;
  LOWORD(v40) = v234;
LABEL_146:
  if (!a2 && (v113 != 0 || v274))
  {
    __int128 v115 = v40;
    v116 = obj_flags((uint64_t)a4) & 0xFFFFFC00LL;
    uint64_t v117 = v279[1];
    if (!v117) {
      uint64_t v117 = *(void *)(*v279 + 392LL);
    }
    CFStringRef v118 = obj_subtype((uint64_t)a4);
    unint64_t v119 = btree_node_create(v117, v116, v118, v287, v19, &v285);
    if ((_DWORD)v119)
    {
      uint64_t v34 = v119;
      v277 = 0LL;
      v278 = 0LL;
      LOWORD(v120) = 0;
      __int128 v121 = 0;
      LOWORD(v122) = 0;
      __int128 v123 = 0;
      v276 = 0LL;
      __int128 v124 = 0;
      v273 = 0;
      __int128 v125 = 0;
      v260 = 0LL;
      goto LABEL_264;
    }

    uint64_t v126 = (unint64_t *)(v279[49] + 32LL);
    a2 = v260;
    do
      uint64_t v127 = __ldxr(v126);
    while (__stxr(v127 + 1, v126));
    obj_dirty((uint64_t)v279, v19, 0LL);
    LOWORD(v40) = v115;
  }

  v128 = v40;
  else {
    uint64_t v129 = 0;
  }
  CFStringRef v130 = a4[7];
  if (v129 == 1)
  {
    uint64_t v120 = *(_DWORD *)(v130 + 36) + ~(_DWORD)a5;
    if (v120 << 16 < 1) {
      goto LABEL_181;
    }
    v131 = (uint64_t)v286;
    uint64_t v132 = bt_move_entries((uint64_t)a4, (uint64_t)v286, (__int16)v120, v19);
    if ((_DWORD)v132)
    {
      uint64_t v34 = v132;
      CFStringRef v133 = v279[1];
      if (v133) {
        v134 = (const char *)(v133 + 3992);
      }
      else {
        v134 = (const char *)(*(void *)(*(void *)(*v279 + 392LL) + 384LL) + 208LL);
      }
      log_err("%s:%d: %s bt_move_entries %d failed: %d\n", "bt_shift_or_split", 3020, v134, 0, v132);
      v277 = 0LL;
      v278 = 0LL;
      LOWORD(v120) = 0;
LABEL_263:
      __int128 v121 = 0;
      LOWORD(v122) = 0;
      __int128 v123 = 0;
      v276 = 0LL;
      __int128 v124 = 0;
      v273 = 0;
      __int128 v125 = 0;
      goto LABEL_264;
    }

    if (v274)
    {
LABEL_181:
      uint64_t v150 = a5;
      LODWORD(v271) = 1;
      v272 = v120;
      uint64_t v135 = v19;
      CFStringRef v136 = 0;
    }

    else
    {
      uint64_t v34 = btree_node_key_ptr(v131, 0, &v283, (_WORD *)&v280 + 1);
      if ((_DWORD)v34
        || (uint64_t v34 = btree_node_entry_update((int)v260, (unsigned __int16)(v253 + 1), v283, HIWORD(v280), 0LL), (_DWORD)v34))
      {
        CFStringRef v169 = v279[1];
        if (v169) {
          v170 = (const char *)(v169 + 3992);
        }
        else {
          v170 = (const char *)(*(void *)(*(void *)(*v279 + 392LL) + 384LL) + 208LL);
        }
        log_err("%s:%d: %s btree_node_key_update failed: %d\n", "bt_shift_or_split", 3028, v170, v34);
        v274 = 0;
        v277 = 0LL;
        v278 = 0LL;
        goto LABEL_263;
      }

      uint64_t v150 = a5;
      LODWORD(v271) = 1;
      v272 = v120;
      uint64_t v135 = v19;
      CFStringRef v136 = 1;
    }

    CFStringRef v151 = btree_node_val_ptr(a4, v150, &v282, (__int16 *)&v280);
    if ((_DWORD)v151)
    {
      uint64_t v34 = v151;
      LODWORD(v276) = 0;
      HIDWORD(v276) = v136;
      v277 = 0LL;
      v278 = 0LL;
      __int128 v121 = 0;
      LOWORD(v122) = 0;
      __int128 v123 = 0;
      __int128 v124 = 0;
      v273 = 0;
      __int128 v125 = 0;
LABEL_184:
      LOWORD(v120) = v272;
      goto LABEL_264;
    }

    v277 = 0LL;
    v278 = (unsigned __int16)v280;
    if ((_WORD)v280)
    {
      a2 = v260;
      if ((unsigned __int16)v280 != 65534)
      {
        CFStringRef v157 = _apfs_malloc(v278);
        if (!v157)
        {
          LODWORD(v276) = 0;
          HIDWORD(v276) = v136;
          v277 = 0LL;
          v278 = 0LL;
          __int128 v121 = 0;
          LOWORD(v122) = 0;
          __int128 v123 = 0;
          __int128 v124 = 0;
          v273 = 0;
          __int128 v125 = 0;
          uint64_t v34 = 12LL;
          goto LABEL_184;
        }

        v277 = v157;
        memcpy(v157, v282, (unsigned __int16)v280);
        v278 = (unsigned __int16)v280;
      }
    }

    else
    {
      a2 = v260;
    }

    v262 = a8;
    btree_node_remove((uint64_t)a4, v150, v135);
    v182 = (unint64_t *)(v279[49] + 24LL);
    do
      v183 = __ldxr(v182);
    while (__stxr(v183 - 1, v182));
    obj_dirty((uint64_t)v279, v135, 0LL);
    CFStringRef v130 = a4[7];
  }

  else
  {
    LODWORD(v271) = v129;
    uint64_t v135 = v19;
    v262 = a8;
    v277 = 0LL;
    v278 = 0LL;
    v272 = 0;
    CFStringRef v136 = 0;
  }

  v137 = *(_WORD *)(v130 + 36) - v128;
  __int128 v121 = v137;
  HIDWORD(v276) = v136;
  if (v137 < 1)
  {
    LODWORD(v276) = 0;
LABEL_169:
    v273 = 0;
    goto LABEL_170;
  }

  uint64_t v138 = (uint64_t)v286;
  CFStringRef v139 = bt_move_entries((uint64_t)a4, (uint64_t)v286, v137, v135);
  if ((_DWORD)v139)
  {
    uint64_t v34 = v139;
    v140 = v279[1];
    if (v140) {
      uint64_t v141 = (const char *)(v140 + 3992);
    }
    else {
      uint64_t v141 = (const char *)(*(void *)(*(void *)(*v279 + 392LL) + 384LL) + 208LL);
    }
    log_err("%s:%d: %s bt_move_entries %d failed: %d\n", "bt_shift_or_split", 3065, v141, v121, v139);
    __int128 v121 = 0;
    goto LABEL_254;
  }

  if (!v274)
  {
    uint64_t v34 = btree_node_key_ptr(v138, 0, &v283, (_WORD *)&v280 + 1);
    if ((_DWORD)v34
      || (uint64_t v34 = btree_node_entry_update((int)v260, (unsigned __int16)(v253 + 1), v283, HIWORD(v280), 0LL), (_DWORD)v34))
    {
      uint64_t v165 = v279[1];
      if (v165) {
        CFStringRef v166 = (const char *)(v165 + 3992);
      }
      else {
        CFStringRef v166 = (const char *)(*(void *)(*(void *)(*v279 + 392LL) + 384LL) + 208LL);
      }
      log_err("%s:%d: %s btree_node_key_update failed: %d\n", "bt_shift_or_split", 3073, v166, v34);
      v274 = 0;
LABEL_254:
      LOWORD(v122) = 0;
      __int128 v123 = 0;
      LODWORD(v276) = 0;
LABEL_255:
      v273 = 0;
LABEL_259:
      __int128 v125 = 0;
LABEL_260:
      LOWORD(v120) = v272;
      __int128 v124 = v271;
      goto LABEL_264;
    }
  }

  LODWORD(v276) = !v274;
  a2 = v260;
  if (!v260 || *(_DWORD *)(a4[7] + 36LL)) {
    goto LABEL_169;
  }
  uint64_t v147 = btree_node_entry_update((int)v260, v253, v254, v255, 0LL);
  if ((_DWORD)v147)
  {
    uint64_t v34 = v147;
    CFStringRef v148 = v279[1];
    if (v148) {
      v149 = (const char *)(v148 + 3992);
    }
    else {
      v149 = (const char *)(*(void *)(*(void *)(*v279 + 392LL) + 384LL) + 208LL);
    }
    log_err("%s:%d: %s btree_node_key_update failed: %d\n", "bt_shift_or_split", 3084, v149, v147);
    LOWORD(v122) = 0;
    __int128 v123 = 0;
    goto LABEL_255;
  }

  v273 = 1;
  a2 = v260;
LABEL_170:
  CFStringRef v142 = (uint64_t)v285;
  if (v285)
  {
    v143 = a4[7];
    __int128 v122 = *(_DWORD *)(v143 + 36);
    uint64_t v144 = bt_move_entries((uint64_t)v285, (uint64_t)a4, (__int16)-*(_WORD *)(v143 + 36), v135);
    if ((_DWORD)v144)
    {
      uint64_t v34 = v144;
      CFStringRef v145 = v279[1];
      if (v145) {
        v146 = (const char *)(v145 + 3992);
      }
      else {
        v146 = (const char *)(*(void *)(*(void *)(*v279 + 392LL) + 384LL) + 208LL);
      }
      log_err("%s:%d: %s bt_move_entries %d failed: %d\n", "bt_shift_or_split", 3100, v146, -(__int16)v122, v144);
      LOWORD(v122) = 0;
LABEL_258:
      __int128 v123 = 0;
      goto LABEL_259;
    }

    btree_node_reinit_root((uint64_t)a4, (unsigned __int16)(*(_WORD *)(a4[7] + 34LL) + 1), v135);
    if (*(_DWORD *)(*(void *)(v142 + 56) + 36LL))
    {
      uint64_t v34 = btree_node_key_ptr(v142, 0, &v283, (_WORD *)&v280 + 1);
      if (!(_DWORD)v34)
      {
        v167 = (unint64_t *)v283;
        uint64_t v168 = HIWORD(v280);
        goto LABEL_249;
      }

      goto LABEL_250;
    }

    v167 = (unint64_t *)v254;
    v283 = v254;
    uint64_t v168 = v255;
    HIWORD(v280) = v255;
LABEL_249:
    v184 = v249;
    *v249 = *(void *)(v142 + 112);
    uint64_t v34 = btree_node_insert(a4, v167, v168, v184, (*((_WORD *)a4 + 203) & 0x7Fu) + 8, v135, 0LL, 0LL);
    if ((_DWORD)v34)
    {
LABEL_250:
      v185 = v279[1];
      if (v185) {
        v186 = (const char *)(v185 + 3992);
      }
      else {
        v186 = (const char *)(*(void *)(*(void *)(*v279 + 392LL) + 384LL) + 208LL);
      }
      log_err("%s:%d: %s btree_node_insert failed: %d\n", "bt_shift_or_split", 3123, v186, v34);
      goto LABEL_258;
    }

    a2 = a4;
  }

  else
  {
    LOWORD(v122) = 0;
  }

  if (v274 && (v152 = v286) != 0LL)
  {
    uint64_t v153 = v286[7];
    if (*(_DWORD *)(v153 + 36))
    {
      v260 = a2;
      uint64_t v34 = btree_node_key_ptr((uint64_t)v286, 0, &v283, (_WORD *)&v280 + 1);
      if ((_DWORD)v34
        || (CFStringRef v154 = v249,
            *v249 = v152[14],
            uint64_t v34 = btree_node_insert( v260,  (unint64_t *)v283,  HIWORD(v280),  v154,  (*((_WORD *)v260 + 203) & 0x7Fu) + 8,  v135,  0LL,  0LL),  (_DWORD)v34))
      {
        v155 = v279[1];
        if (v155) {
          uint64_t v156 = (const char *)(v155 + 3992);
        }
        else {
          uint64_t v156 = (const char *)(*(void *)(*(void *)(*v279 + 392LL) + 384LL) + 208LL);
        }
        log_err("%s:%d: %s btree_node_insert failed: %d\n", "bt_shift_or_split", 3139, v156, v34);
        __int128 v123 = 0;
        __int128 v125 = 0;
        v274 = 1;
        goto LABEL_260;
      }

      __int128 v125 = 1;
      a2 = v260;
    }

    else
    {
      if ((*(_WORD *)(v153 + 32) & 2) != 0)
      {
        v284 = v286;
        __int128 v113 = 1;
      }

      else
      {
        v232 = (unint64_t *)(v279[49] + 32LL);
        do
          v233 = __ldxr(v232);
        while (__stxr(v233 - 1, v232));
        obj_delete_and_free(v152, v135);
        obj_unlock((uint64_t)v152, 2);
        obj_release(v152);
      }

      __int128 v125 = 0;
      v286 = 0LL;
    }
  }

  else
  {
    __int128 v125 = 0;
  }

  if (!v113)
  {
    if ((_WORD)v262)
    {
      uint64_t v174 = (uint64_t)v286;
      CFStringRef v175 = v279;
      v176 = v277;
      if (v142) {
        v286 = (uint64_t *)v142;
      }
      else {
        v286 = 0LL;
      }
    }

    else
    {
      uint64_t v174 = 0LL;
      CFStringRef v175 = v279;
      v176 = v277;
    }

    if (!v274) {
      goto LABEL_356;
    }
    goto LABEL_355;
  }

  if (v142) {
    v158 = v142;
  }
  else {
    v158 = (uint64_t)a4;
  }
  uint64_t v159 = *(_WORD *)(*(void *)(v158 + 56) + 32LL);
  v260 = a2;
  if ((v159 & 2) != 0)
  {
    __int128 v123 = 0;
    uint64_t v177 = (unint64_t *)v254;
    v283 = v254;
    CFStringRef v178 = v255;
    HIWORD(v280) = v255;
    CFStringRef v160 = (uint64_t)v284;
    uint64_t v162 = v249;
    LOWORD(v120) = v272;
    __int128 v124 = v271;
LABEL_241:
    *uint64_t v162 = *(void *)(v160 + 112);
    v179 = btree_node_insert(a2, v177, v178, v162, (*((_WORD *)a2 + 203) & 0x7Fu) + 8, v267, 0LL, 0LL);
    if ((_DWORD)v179)
    {
      uint64_t v34 = v179;
      v180 = v279[1];
      if (v180) {
        v181 = (const char *)(v180 + 3992);
      }
      else {
        v181 = (const char *)(*(void *)(*(void *)(*v279 + 392LL) + 384LL) + 208LL);
      }
      log_err("%s:%d: %s btree_node_insert failed: %d\n", "bt_shift_or_split", 3183, v181, v179);
      goto LABEL_264;
    }

    uint64_t v174 = (uint64_t)v286;
    v286 = (uint64_t *)v160;
    CFStringRef v175 = v279;
    a4 = v275;
    a2 = v260;
    v176 = v277;
LABEL_355:
    bt_update_last_leaf((uint64_t)v175, (uint64_t)a2, (uint64_t)a4);
LABEL_356:
    if (v176) {
      _apfs_free(v176, v278);
    }
    if (v174)
    {
      obj_unlock(v174, 2);
      obj_release(v174);
    }

    v242 = (uint64_t)v285;
    v243 = (uint64_t)v286;
    if (v285 && v286 != v285)
    {
      obj_unlock((uint64_t)v285, 2);
      obj_release(v242);
    }

    uint64_t v34 = 0LL;
    *v248 = v243;
    return v34;
  }

  CFStringRef v160 = (uint64_t)v284;
  v161 = bt_move_entries(v158, (uint64_t)v284, 1, v267);
  uint64_t v162 = v249;
  LOWORD(v120) = v272;
  __int128 v124 = v271;
  if ((_DWORD)v161)
  {
    uint64_t v34 = v161;
    CFStringRef v163 = v279[1];
    if (v163) {
      v164 = (const char *)(v163 + 3992);
    }
    else {
      v164 = (const char *)(*(void *)(*(void *)(*v279 + 392LL) + 384LL) + 208LL);
    }
    log_err("%s:%d: %s bt_move_entries %d failed: %d\n", "bt_shift_or_split", 3166, v164, 1, v161);
    goto LABEL_385;
  }

  v239 = btree_node_key_ptr(v160, 0, &v283, (_WORD *)&v280 + 1);
  if (!(_DWORD)v239)
  {
    uint64_t v177 = (unint64_t *)v283;
    __int128 v123 = 1;
    CFStringRef v178 = HIWORD(v280);
    a2 = v260;
    goto LABEL_241;
  }

  uint64_t v34 = v239;
  v240 = v279[1];
  if (v240) {
    v241 = (const char *)(v240 + 3992);
  }
  else {
    v241 = (const char *)(*(void *)(*(void *)(*v279 + 392LL) + 384LL) + 208LL);
  }
  log_err("%s:%d: %s failed to get newnode minkey: %d\n", "bt_shift_or_split", 3171, v241, v239);
LABEL_385:
  __int128 v123 = 0;
LABEL_264:
  v187 = v279[1];
  if (v187) {
    v188 = (const char *)(v187 + 3992);
  }
  else {
    v188 = (const char *)(*(void *)(*(void *)(*v279 + 392LL) + 384LL) + 208LL);
  }
  log_err("%s:%d: %s reverting on error: %d\n", "bt_shift_or_split", 3219, v188, v34);
  if (v125) {
    btree_node_remove((uint64_t)v260, (unsigned __int16)(v253 + 1), v267);
  }
  v189 = v267;
  if (v123)
  {
    v190 = bt_move_entries((uint64_t)v275, (uint64_t)v284, -1, v267);
    uint64_t v34 = v190;
    if ((_DWORD)v190)
    {
      v191 = v279[1];
      if (v191) {
        v192 = (const char *)(v191 + 3992);
      }
      else {
        v192 = (const char *)(*(void *)(*(void *)(*v279 + 392LL) + 384LL) + 208LL);
      }
      log_err("%s:%d: %s bt_move_entries %d failed: %d\n", "bt_shift_or_split", 3226, v192, -1, v190);
    }
  }

  v193 = (__int16)v122;
  v194 = v275;
  v195 = v277;
  v196 = v278;
  if (v193 >= 1)
  {
    btree_node_reinit_root((uint64_t)v275, (unsigned __int16)(*(_WORD *)(v275[7] + 34LL) - 1), v189);
    v197 = bt_move_entries((uint64_t)v285, (uint64_t)v194, v193, v189);
    if (v197)
    {
      v198 = v279[1];
      if (v198) {
        v199 = (const char *)(v198 + 3992);
      }
      else {
        v199 = (const char *)(*(void *)(*(void *)(*v279 + 392LL) + 384LL) + 208LL);
      }
      log_err( "%s:%d: %s bt_move_entries() failed (%d) while trying to revert changes due to error: %d\n",  "bt_shift_or_split",  3236,  v199,  v197,  v34);
    }

    v260 = 0LL;
  }

  if (v121 >= 1)
  {
    v200 = (uint64_t)v286;
    v201 = bt_move_entries((uint64_t)v194, (uint64_t)v286, (__int16)-(__int16)v121, v189);
    if (v201)
    {
      v202 = v279[1];
      if (v202) {
        v203 = (const char *)(v202 + 3992);
      }
      else {
        v203 = (const char *)(*(void *)(*(void *)(*v279 + 392LL) + 384LL) + 208LL);
      }
      log_err( "%s:%d: %s bt_move_entries() failed (%d) while trying to revert changes due to error: %d\n",  "bt_shift_or_split",  3243,  v203,  v201,  v34);
    }

    if (!v274 && (v276 & 1) != 0)
    {
      v204 = btree_node_key_ptr(v200, 0, &v283, (_WORD *)&v280 + 1);
      if (v204
        || (v204 = btree_node_entry_update((int)v260, (unsigned __int16)(v253 + 1), v283, HIWORD(v280), 0LL)) != 0)
      {
        v205 = v279[1];
        if (v205) {
          v206 = (const char *)(v205 + 3992);
        }
        else {
          v206 = (const char *)(*(void *)(*(void *)(*v279 + 392LL) + 384LL) + 208LL);
        }
        log_err( "%s:%d: %s btree_node_key_update() failed (%d) while trying to revert changes due to error: %d\n",  "bt_shift_or_split",  3251,  v206,  v204,  v34);
      }
    }

    if (v273)
    {
      v207 = btree_node_key_ptr((uint64_t)v194, 0, &v283, (_WORD *)&v280 + 1);
      if (v207 || (v207 = btree_node_entry_update((int)v260, v253, v283, HIWORD(v280), 0LL)) != 0)
      {
        v208 = v279[1];
        if (v208) {
          v209 = (const char *)(v208 + 3992);
        }
        else {
          v209 = (const char *)(*(void *)(*(void *)(*v279 + 392LL) + 384LL) + 208LL);
        }
        log_err( "%s:%d: %s btree_node_key_update() failed (%d) while trying to revert changes due to error: %d\n",  "bt_shift_or_split",  3260,  v209,  v207,  v34);
      }
    }
  }

  if (v124)
  {
    v210 = btree_node_insert(v194, (unint64_t *)v254, v255, v195, v196, v189, 0LL, 0LL);
    if (v210)
    {
      v211 = v279[1];
      if (v211) {
        v212 = (const char *)(v211 + 3992);
      }
      else {
        v212 = (const char *)(*(void *)(*(void *)(*v279 + 392LL) + 384LL) + 208LL);
      }
      log_err( "%s:%d: %s btree_node_insert() failed (%d) while trying to revert changes due to error: %d\n",  "bt_shift_or_split",  3267,  v212,  v210,  v34);
    }

    if (v195) {
      _apfs_free(v195, v196);
    }
  }

  v213 = v279;
  if ((__int16)v120 >= 1)
  {
    v214 = (uint64_t)v286;
    v215 = bt_move_entries((uint64_t)v194, (uint64_t)v286, (__int16)-(__int16)v120, v189);
    v216 = BYTE4(v276);
    if (v215)
    {
      v217 = v213[1];
      if (v217) {
        v218 = (const char *)(v217 + 3992);
      }
      else {
        v218 = (const char *)(*(void *)(*(void *)(*v213 + 392LL) + 384LL) + 208LL);
      }
      log_err( "%s:%d: %s bt_move_entries() failed (%d) while trying to revert changes due to error: %d\n",  "bt_shift_or_split",  3276,  v218,  v215,  v34);
    }

    if (!v274 && (v216 & 1) != 0)
    {
      v219 = btree_node_key_ptr(v214, 0, &v283, (_WORD *)&v280 + 1);
      if (v219
        || (v219 = btree_node_entry_update((int)v260, (unsigned __int16)(v253 + 1), v283, HIWORD(v280), 0LL)) != 0)
      {
        v220 = v213[1];
        if (v220) {
          v221 = (const char *)(v220 + 3992);
        }
        else {
          v221 = (const char *)(*(void *)(*(void *)(*v213 + 392LL) + 384LL) + 208LL);
        }
        log_err( "%s:%d: %s btree_node_key_update() failed (%d) while trying to revert changes due to error: %d\n",  "bt_shift_or_split",  3284,  v221,  v219,  v34);
      }
    }
  }

  v222 = v286;
  if (v286)
  {
    if (!*(_DWORD *)(v286[7] + 36))
    {
      v223 = (unint64_t *)(v213[49] + 32LL);
      do
        v224 = __ldxr(v223);
      while (__stxr(v224 - 1, v223));
      obj_delete_and_free(v222, v189);
    }

    obj_unlock((uint64_t)v222, 2);
    obj_release(v222);
  }

  v225 = v284;
  if (v284)
  {
    v226 = (unint64_t *)(v213[49] + 32LL);
    do
      v227 = __ldxr(v226);
    while (__stxr(v227 - 1, v226));
    obj_delete_and_free(v225, v189);
    obj_unlock((uint64_t)v225, 2);
    obj_release(v225);
  }

  v228 = v285;
  if (v285)
  {
    v229 = (unint64_t *)(v213[49] + 32LL);
    do
      v230 = __ldxr(v229);
    while (__stxr(v230 - 1, v229));
    obj_delete_and_free(v228, v189);
    obj_unlock((uint64_t)v228, 2);
    obj_release(v228);
  }

  return v34;
}

LABEL_211:
    uint64_t extended = 0LL;
    goto LABEL_75;
  }

  CFStringRef v58 = (unint64_t *)(a3 + 8);
  if (*((void *)a3 + 4) != -1LL) {
    goto LABEL_85;
  }
  unint64_t v59 = *((void *)a3 + 3);
LABEL_222:
  *CFStringRef v58 = v59;
  uint64_t v111 = 0x800000010LL;
  uint64_t v82 = bt_lookup_variant( (uint64_t)v118,  0LL,  v58,  (unsigned int *)&v111 + 1,  8u,  v116,  (unsigned int *)&v111,  4u,  0,  0LL);
  if ((_DWORD)v82)
  {
    uint64_t extended = v82;
    if ((_DWORD)v82 == 2)
    {
      *CFStringRef v58 = -1LL;
      goto LABEL_85;
    }

LABEL_225:
    obj_type(v11);
    log_err("%s:%d: %s error searching snapshot tree: %d\n");
    goto LABEL_75;
  }

LABEL_85:
  if (v118)
  {
    obj_release(v118);
    CFStringRef v118 = 0LL;
  }

  unsigned int v97 = a3[1];
  unint64_t v93 = *((void *)a3 + 1);
  unint64_t v86 = *((void *)a3 + 4);
  unint64_t v87 = *((void *)a3 + 3);
  __int128 v115 = *(_OWORD *)(a3 + 10);
  uint64_t v111 = 0x1000000010LL;
  uint64_t v41 = bt_lookup_variant( (uint64_t)v117,  0LL,  (unint64_t *)&v115,  (unsigned int *)&v111 + 1,  0x10u,  &v113,  (unsigned int *)&v111,  3u,  0,  0LL);
  if ((_DWORD)v41)
  {
    uint64_t extended = v41;
    if ((_DWORD)v41 != 2) {
      goto LABEL_75;
    }
    *(void *)&__int128 v115 = 0LL;
  }

  obj_unlock((uint64_t)a1, 2);
  uint64_t v42 = v115;
  if (!(void)v115)
  {
    obj_lock((uint64_t)a1, 2);
    goto LABEL_167;
  }

  uint64_t v89 = v8;
  uint64_t v43 = 0LL;
  uint64_t v101 = 0LL;
  uint64_t v84 = a3 + 10;
  CFStringRef v85 = (const char *)(v11 + 3992);
  do
  {
    uint64_t v44 = v43;
    if (v42 != v101)
    {
      if (v38 >= v95)
      {
        *uint64_t v84 = v115;
        goto LABEL_191;
      }

      uint64_t v44 = 0LL;
    }

    uint64_t v101 = v42;
    __int128 v114 = v115;
    uint64_t v111 = 0x1000000010LL;
    uint64_t v45 = bt_lookup_variant( (uint64_t)v117,  0LL,  (unint64_t *)&v114,  (unsigned int *)&v111 + 1,  0x10u,  &v112,  (unsigned int *)&v111,  4u,  0,  0LL);
    if ((_DWORD)v45)
    {
      uint64_t extended = v45;
      if ((_DWORD)v45 != 2)
      {
        log_err("%s:%d: %s lookup returned unexpected error while iterating: %d\n", "omap_cleanup", 1665, v85, extended);
        *uint64_t v84 = v115;
        obj_lock((uint64_t)a1, 2);
        goto LABEL_75;
      }

      *(void *)&__int128 v114 = 0LL;
    }

    uint64_t v43 = (v44 + 1);
    if (*((void *)&v115 + 1) <= v93 || *((void *)&v115 + 1) > v87)
    {
      if ((v97 & 2) == 0 || (void)v114 != (void)v115)
      {
        uint64_t extended = 0LL;
        int v47 = 0;
        goto LABEL_126;
      }

      uint64_t extended = 0LL;
      if (*((void *)&v114 + 1) > v93 && *((void *)&v114 + 1) <= v86)
      {
        uint64_t extended = 0LL;
        int v47 = v112 & 1;
        goto LABEL_126;
      }

    memcpy(v19, v61, v34);
    obj_checksum_set_phys((uint64_t)v125, (uint64_t)v19, v34, v73, v74);
  }

  if ((_DWORD)v20) {
    goto LABEL_140;
  }
  if (*((_DWORD *)v19 + 7) || *((_DWORD *)v19 + 6) != -2147483647)
  {
    log_err( "%s:%d: %s checkpoint descriptor block %d is not a valid superblock\n",  "nx_mount",  1494,  (const char *)(v125[48] + 208),  v46);
    unint64_t v86 = v125;
    goto LABEL_145;
  }

  uint64_t v75 = nx_check_superblock((uint64_t)v19, *(_DWORD *)(v49 + 36), 1, v70, v71);
  if ((_DWORD)v75)
  {
    int v20 = v75;
    log_err("%s:%d: %s checkpoint descriptor block %d superblock failed sanity checks: %d\n");
    goto LABEL_146;
  }

  if ((*(void *)(v49 + 64) & 0xFFFFFFFFFFFFFEFDLL) != 0)
  {
    log_err( "%s:%d: %s unsupported nx_incompatible_features (0x%llx): unable to mount\n",  "nx_mount",  1504,  (const char *)(v125[48] + 208),  *(void *)(v49 + 64) & 0xFFFFFFFFFFFFFEFDLL);
    int v20 = 75LL;
    goto LABEL_146;
  }

  unsigned int v63 = (const void *)v43;
  if (!nx_superblock_agrees_with_main_superblock(v43, (uint64_t)v19, "checkpoint", 0))
  {
    log_err( "%s:%d: %s checkpoint descriptor block %d doesn't agree with main superblock\n",  "nx_mount",  1510,  (const char *)(v125[48] + 208),  v46);
    int v20 = 22LL;
    goto LABEL_146;
  }

  CFStringRef v76 = (*((_DWORD *)v19 + 34) + *((_DWORD *)v19 + 35) - 1) % (*(_DWORD *)(v49 + 104) & 0x7FFFFFFFu);
  if ((_DWORD)v46 != v76)
  {
    log_err( "%s:%d: %s checkpoint superblock index %d doesn't match index block was found at: %d\n",  "nx_mount",  1517,  (const char *)(v125[48] + 208),  v76,  v46);
    unint64_t v86 = v125;
    goto LABEL_145;
  }

  int v77 = nx_metadata_range_add(v125, 0LL, 1, 0, 1);
  if ((_DWORD)v77
    || (*((_BYTE *)v19 + 65) & 1) != 0
    && ((int v77 = nx_metadata_range_add( v125,  0x4000000000000000uLL >> __clz(__rbit64(*(unsigned int *)(v125[47] + 36))),  1,  0,  1),  (_DWORD)v77)
     || (*((_BYTE *)v19 + 65) & 1) != 0
     && (int v77 = nx_metadata_range_add( v125,  *(void *)(v125[47] + 1368),  *(void *)(v125[47] + 1376) & 0x7FFFFFFF,  (*(void *)(v125[47] + 1376) & 0x80000000LL) != 0,  0),  (_DWORD)v77))
    || (int v77 = nx_metadata_range_add(v125, v19[14], v19[13] & 0x7FFFFFFF, *((int *)v19 + 26) < 0, 0), (_DWORD)v77)
    || (int v77 = nx_metadata_range_add(v125, v19[15], *((_DWORD *)v19 + 27) & 0x7FFFFFFF, *((int *)v19 + 27) < 0, 0),
        (_DWORD)v77))
  {
    int v20 = v77;
    log_err( "%s:%d: %s xid %lld at index %d failed to load checkpoint metadata ranges (overlap?): %d\n",  "nx_mount",  1542,  (const char *)(v125[48] + 208),  v19[2],  *((_DWORD *)v19 + 34),  v77);
    goto LABEL_12;
  }

  uint64_t v78 = nx_checkpoint_validate_checkpoint_map_blocks((uint64_t)v125, (unsigned int *)v19);
  if ((_DWORD)v78)
  {
    int v20 = v78;
    log_err("%s:%d: %s validation failed for checkpoint at index %d: %d\n");
    goto LABEL_146;
  }

  __int128 v122 = v46;
  CFStringRef v109 = v19[2];
  log_debug( "%s:%d: %s checkpoint: largest xid %lld, given checkpoint xid %lld @ %d\n",  "nx_mount",  1553,  (const char *)(v125[48] + 208),  v121,  v109,  v46);
  unint64_t v79 = v125;
  if (*(void *)(v43 + 16) != v19[2])
  {
    log_err( "%s:%d: %s loading older checkpoint, checkpoint xid %lld, superblock xid %lld\n",  "nx_mount",  1555,  (const char *)(v125[48] + 208),  v19[2],  *(void *)(v49 + 16));
    unint64_t v79 = v125;
    unint64_t v108 = 1;
    *((_BYTE *)v125 + 645) = 1;
  }

  data = nx_checkpoint_load_data((uint64_t)v79, (uint64_t)v19, 0LL, 0LL);
  if ((_DWORD)data)
  {
    int v20 = data;
    log_err("%s:%d: %s data for checkpoint at index %d couldn't be loaded: %d\n");
    goto LABEL_146;
  }

  memcpy((void *)v125[47], v19, v34);
  uint64_t v81 = v125;
  *(void *)(v125[49] + 400) = *(void *)(v125[47] + 88);
  int v20 = nx_checkpoint_traverse((uint64_t)v81, 0LL, 2LL);
  uint64_t v82 = v125;
  if ((_DWORD)v20)
  {
    log_err("%s:%d: %s failed to fix up checkpoint data: %d\n");
    goto LABEL_146;
  }

  if (*((_BYTE *)v125 + 628))
  {
    if ((v106 & 1) != 0)
    {
      log_info( "%s:%d: %s probe of external device... skipping recent sanity checks.\n",  "nx_mount",  1583,  (const char *)(v125[48] + 208));
      uint64_t v82 = v125;
    }

    else
    {
      log_info( "%s:%d: %s sanity checking all recently-changed container state... please be patient.\n",  "nx_mount",  1591,  (const char *)(v125[48] + 208));
      int v20 = nx_check_recent_sanity(v125);
      uint64_t v82 = v125;
      if ((_DWORD)v20)
      {
        log_err("%s:%d: %s sanity check of recently-changed structures failed: %d\n");
        goto LABEL_146;
      }
    }
  }

  int v20 = spaceman_get(v82, (uint64_t *)&v123);
  if ((_DWORD)v20)
  {
    log_err("%s:%d: %s checkpoint xid %lld failed to get spaceman: %d\n");
    goto LABEL_146;
  }

  int v20 = nx_metadata_range_add( v125,  *(void *)&v123[47][3].__opaque[16],  *(_DWORD *)&v123[47][3].__opaque[12] & 0x7FFFFFFF,  *(int *)&v123[47][3].__opaque[12] < 0,  0);
  if (!(_DWORD)v20)
  {
    int v20 = nx_metadata_range_add( v125,  *(void *)&v123[47][3].__opaque[24],  *(void *)v123[47][3].__opaque,  *(uint64_t *)v123[47][3].__opaque < 0,  0);
    obj_release((uint64_t *)v123);
    if ((_DWORD)v20) {
      goto LABEL_152;
    }
    int v66 = v125;
    goto LABEL_113;
  }

  obj_release((uint64_t *)v123);
LABEL_152:
  log_err("%s:%d: %s checkpoint xid %lld failed to load spaceman metadata ranges (overlap?): %d\n");
LABEL_12:
  if (v124) {
    _apfs_free(v124, v124[9]);
  }
  if (v19) {
    _apfs_free(v19, v18);
  }
  uint64_t v21 = v125;
  if (v125)
  {
    *((_BYTE *)v125 + 627) = 1;
    nx_unmount((uint64_t)v21);
  }

  if (v126) {
    obj_cache_destroy((uint64_t)v126);
  }
  if (v127) {
    dev_close((uint64_t)v127);
  }
  return v20;
}

LABEL_115:
      int v47 = 0;
      goto LABEL_126;
    }

    if ((v97 & 2) == 0)
    {
      uint64_t extended = 0LL;
      if ((void)v114 != (void)v115) {
        goto LABEL_115;
      }
      int v47 = 0;
      if (*((void *)&v114 + 1) > v86) {
        goto LABEL_126;
      }
    }

    int v48 = bt_remove((uint64_t)v117, 0LL, (unint64_t *)&v115, 0x10u, v5);
    if (v48)
    {
      int v49 = v48;
      if (obj_type(v11) == 13) {
        log_err( "%s:%d: %s remove mapping (%lld, %lld) failed: %d\n",  "omap_cleanup",  1689,  v85,  (void)v115,  *((void *)&v115 + 1),  v49);
      }
      else {
        log_err( "%s:%d: %s remove mapping (%lld, %lld) failed: %d\n",  "omap_cleanup",  1689,  (const char *)(*(void *)(v11 + 384) + 208LL),  (void)v115,  *((void *)&v115 + 1),  v49);
      }
    }

    unsigned int v50 = (v99 - 1 + DWORD1(v113)) / v99;
    uint64_t extended = spaceman_free((const char *)v11, 0LL, *((unint64_t *)&v113 + 1), v50, v5);
    if ((_DWORD)extended)
    {
      int v51 = obj_type(v11);
      CFStringRef v52 = (const char *)(v11 + 3992);
      if (v51 != 13) {
        CFStringRef v52 = (const char *)(*(void *)(v11 + 384) + 208LL);
      }
      log_err( "%s:%d: %s spaceman_free(%lld, %d) failed: %d\n",  "omap_cleanup",  1695,  v52,  *((void *)&v113 + 1),  v50,  extended);
    }

    if ((v97 & 2) == 0) {
      obj_cache_remove(*(pthread_mutex_t **)(v10 + 392), (uint64_t)v9, v115, *((uint64_t *)&v115 + 1));
    }
    int v53 = (v97 >> 1) & 1;
    if (!(_DWORD)v44) {
      LOBYTE(v53) = 1;
    }
    int v47 = (v112 & v53);
    uint64_t v43 = v44;
LABEL_126:
    if ((v112 & 1) != 0)
    {
      if (v47)
      {
        int v54 = bt_remove((uint64_t)v117, 0LL, (unint64_t *)&v114, 0x10u, v5);
        if (v54)
        {
          int v55 = v54;
          if (obj_type(v11) == 13) {
            log_err( "%s:%d: %s remove mapping (%lld, %lld) failed: %d\n",  "omap_cleanup",  1722,  v85,  (void)v114,  *((void *)&v114 + 1),  v55);
          }
          else {
            log_err( "%s:%d: %s remove mapping (%lld, %lld) failed: %d\n",  "omap_cleanup",  1722,  (const char *)(*(void *)(v11 + 384) + 208LL),  (void)v114,  *((void *)&v114 + 1),  v55);
          }
        }
      }

      uint64_t v111 = 0x1000000010LL;
      uint64_t v56 = bt_lookup_variant( (uint64_t)v117,  0LL,  (unint64_t *)&v114,  (unsigned int *)&v111 + 1,  0x10u,  &v112,  (unsigned int *)&v111,  4u,  0,  0LL);
      uint64_t extended = v56;
      if ((_DWORD)v56)
      {
        if ((_DWORD)v56 == 2)
        {
          uint64_t extended = 0LL;
          *(void *)&__int128 v114 = 0LL;
        }

        else if (obj_type(v11) == 13)
        {
          log_err( "%s:%d: %s lookup returned unexpected error while iterating: %d\n",  "omap_cleanup",  1739,  v85,  extended);
        }

        else
        {
          log_err( "%s:%d: %s lookup returned unexpected error while iterating: %d\n",  "omap_cleanup",  1739,  (const char *)(*(void *)(v11 + 384) + 208LL),  extended);
        }
      }
    }

    ++v38;
    __int128 v115 = v114;
    __int128 v113 = v112;
    uint64_t v42 = v114;
  }

  while ((void)v114);
  obj_lock((uint64_t)a1, 2);
  uint64_t v8 = v89;
  if ((_DWORD)extended) {
    goto LABEL_75;
  }
LABEL_167:
  int v68 = *(_DWORD *)(v8 + 44);
  uint64_t v69 = *(void *)(v8 + 56);
  __int128 v121 = 0u;
  __int128 v125 = 0u;
  __int128 v124 = 0u;
  __int128 v123 = 0u;
  __int128 v122 = 0u;
  uint64_t v126 = 0LL;
  uint64_t v120 = omap_snapshot_key_cmp;
  DWORD2(v121) = 19;
  if ((unsigned __int16)v68 != 2)
  {
    uint64_t extended = 22LL;
    goto LABEL_147;
  }

  uint64_t extended = btree_get_extended(v11, v68 & 0xFFFF0000, v69, 0LL, 1, (uint64_t)&v120, v5, (uint64_t *)&v118);
  if ((_DWORD)extended) {
    goto LABEL_147;
  }
  if (obj_oid((uint64_t)v118) != *(void *)(v8 + 56))
  {
    *(void *)(v8 + 56) = obj_oid((uint64_t)v118);
    obj_dirty((uint64_t)a1, v5, 0LL);
  }

  unint64_t v119 = v93;
  uint64_t v102 = (void *)(v8 + 72);
  while (1)
  {
    uint64_t v111 = 0x800000010LL;
    uint64_t v70 = bt_lookup_variant( (uint64_t)v118,  0LL,  &v119,  (unsigned int *)&v111 + 1,  8u,  v116,  (unsigned int *)&v111,  4u,  0,  0LL);
    if ((_DWORD)v70) {
      break;
    }
    unint64_t v71 = v119;
    if (v119 < v86)
    {
      uint64_t v72 = bt_remove((uint64_t)v118, 0LL, &v119, HIDWORD(v111), v5);
      if ((_DWORD)v72)
      {
        uint64_t extended = v72;
        obj_type(v11);
        log_err("%s:%d: %s error updating snapshot tree: %d\n");
        goto LABEL_75;
      }

      --*(_DWORD *)(v8 + 36);
      if (obj_type(v11) == 13) {
        log_debug( "%s:%d: %s completed cleaning snapshot %lld, om_snap_count %d om_most_recent_snap %lld\n",  "omap_cleanup",  1793,  (const char *)(v11 + 3992),  v119,  *(_DWORD *)(v8 + 36),  *(void *)(v8 + 64));
      }
      else {
        log_debug( "%s:%d: %s completed cleaning snapshot %lld, om_snap_count %d om_most_recent_snap %lld\n",  "omap_cleanup",  1793,  (const char *)(*(void *)(v11 + 384) + 208LL),  v119,  *(_DWORD *)(v8 + 36),  *(void *)(v8 + 64));
      }
      if ((v97 & 2) != 0 && v119 >= *v102)
      {
        unint64_t v73 = *(void *)(v8 + 80);
        BOOL v74 = v119 >= v73;
        if (v119 <= v73)
        {
          *uint64_t v102 = v119;
          if (v74)
          {
            *uint64_t v102 = 0LL;
            *(void *)(v8 + 80) = 0LL;
          }
        }
      }

      obj_dirty((uint64_t)a1, v5, 0LL);
      unint64_t v71 = v119;
    }

    if (v71 >= v86) {
      goto LABEL_213;
    }
  }

  uint64_t extended = v70;
  if ((_DWORD)v70 != 2) {
    goto LABEL_225;
  }
LABEL_213:
  if (v9 && (v97 & 2) != 0) {
    obj_cache_remove_reverted_fs_objects(*(void *)(v10 + 392), (uint64_t)v9, v93 + 1, v87);
  }
  if (*(_DWORD *)(v8 + 36))
  {
    unint64_t v119 = -1LL;
    uint64_t v111 = 0x800000010LL;
    uint64_t extended = bt_lookup_variant( (uint64_t)v118,  0LL,  &v119,  (unsigned int *)&v111 + 1,  8u,  v116,  (unsigned int *)&v111,  1u,  0,  0LL);
    if ((_DWORD)extended) {
      goto LABEL_75;
    }
    *(void *)(v8 + 64) = v119;
  }

  else
  {
    *(void *)(v8 + 64) = 0LL;
    uint64_t v83 = btree_delete((uint64_t)v118, v5, 0LL);
    if ((_DWORD)v83)
    {
      uint64_t extended = v83;
      obj_type(v11);
      log_err("%s:%d: %s error deleting empty snapshot tree: %d\n");
      goto LABEL_75;
    }

    *(void *)(v8 + 56) = 0LL;
    obj_dirty((uint64_t)a1, v5, 0LL);
  }

  *a3 = 0;
  *((_DWORD *)a1 + 96) &= ~2u;
  a1[60] = 0LL;
  a1[61] = 0LL;
  if (*(void *)(v8 + 56)) {
    uint64_t extended = 36LL;
  }
  else {
    uint64_t extended = 0LL;
  }
LABEL_75:
  *((_DWORD *)a1 + 96) &= ~1u;
  obj_unlock((uint64_t)a1, 2);
  if (v118) {
    obj_release(v118);
  }
  if (v117) {
    obj_release(v117);
  }
  return extended;
}

uint64_t omap_destroy(uint64_t a1, unint64_t a2, uint64_t a3, void *a4)
{
  else {
    uint64_t v8 = 0LL;
  }
  uint64_t v9 = a1;
  if (v8) {
    uint64_t v9 = *(void *)(v8 + 392);
  }
  int v20 = 0LL;
  if (!xid_is_current_tx(v9, a3)) {
    return 22LL;
  }
  uint64_t v10 = obj_get(*(void *)(v9 + 392), 0x40000000u, a2, (int *)&om_desc, 0LL, v8, 0LL, a3, (uint64_t *)&v20);
  if (!(_DWORD)v10)
  {
    if (v8) {
      uint64_t v11 = obj_oid(v8);
    }
    else {
      uint64_t v11 = 0LL;
    }
    int v12 = obj_type_and_flags((uint64_t)v20);
    int v13 = obj_size_phys((uint64_t)v20);
    uint64_t v14 = obj_oid((uint64_t)v20);
    if (a4) {
      uint64_t v15 = nx_reaper_add(v9, v12, v13, v11, v14, a3, 0, a4);
    }
    else {
      uint64_t v15 = nx_reaper_add_sub_object(v9, v12, v13, v11, v14, a3, 0);
    }
    uint64_t v10 = v15;
    if ((_DWORD)v15)
    {
      else {
        int v16 = (const char *)(*(void *)(a1 + 384) + 208LL);
      }
      uint64_t v17 = obj_oid((uint64_t)v20);
      int v18 = obj_type_and_flags((uint64_t)v20);
      log_err( "%s:%d: %s error adding omap 0x%llx type 0x%x to reap list: %d\n",  "omap_destroy",  522,  v16,  v17,  v18,  v10);
    }

    obj_release(v20);
  }

  return v10;
}

uint64_t omap_obj_get(uint64_t a1, uint64_t a2, uint64_t a3, char **a4)
{
  int v8 = obj_type(a1);
  uint64_t v9 = 0LL;
  uint64_t v10 = a1;
  if (a1 && v8 == 13)
  {
    uint64_t v10 = *(void *)(a1 + 392);
    if (*(void *)(a1 + 496)) {
      uint64_t v9 = *(void *)(a1 + 496);
    }
    else {
      uint64_t v9 = a1;
    }
  }

  if ((a2 & 1) == 0)
  {
LABEL_9:
    if (v9)
    {
      pthread_mutex_lock((pthread_mutex_t *)(v9 + 1144));
      int v12 = *(char **)(v9 + 3608);
      *a4 = v12;
      int v13 = (uint64_t *)(*(void *)(v9 + 376) + 128LL);
    }

    else
    {
      pthread_mutex_lock((pthread_mutex_t *)(v10 + 656));
      int v12 = *(char **)(v10 + 720);
      *a4 = v12;
      int v13 = (uint64_t *)(*(void *)(v10 + 376) + 160LL);
    }

    uint64_t v14 = *v13;
    if (v12)
    {
      obj_retain(v12);
      if ((a2 & 1) == 0) {
        goto LABEL_25;
      }
      uint64_t v15 = obj_modify(*a4, a2, a3);
      if ((_DWORD)v15)
      {
        uint64_t v11 = v15;
        obj_release(*a4);
        if (v9) {
          int v16 = (pthread_mutex_t *)(v9 + 1144);
        }
        else {
          int v16 = (pthread_mutex_t *)(v10 + 656);
        }
        goto LABEL_33;
      }
    }

    else
    {
      uint64_t v17 = obj_get(*(void *)(v10 + 392), a2 | 0x40000000, v14, &om_desc, 0LL, v9, 0LL, a3, a4);
      if ((_DWORD)v17)
      {
        uint64_t v11 = v17;
        if (v9)
        {
LABEL_27:
          int v16 = (pthread_mutex_t *)(v9 + 1144);
LABEL_33:
          pthread_mutex_unlock(v16);
          return v11;
        }

LABEL_32:
        int v16 = (pthread_mutex_t *)(v10 + 656);
        goto LABEL_33;
      }

      int v18 = (char **)(v9 + 3608);
      if (!v9) {
        int v18 = (char **)(v10 + 720);
      }
      *int v18 = *a4;
      obj_retain(*a4);
      if ((a2 & 1) == 0) {
        goto LABEL_25;
      }
    }

    if (obj_oid((uint64_t)*a4) != v14)
    {
      uint64_t v19 = obj_oid((uint64_t)*a4);
      if (v9)
      {
        *(void *)(*(void *)(v9 + 376) + 128LL) = v19;
        fs_sb_dirty(v9, a3);
        goto LABEL_26;
      }

      *(void *)(*(void *)(v10 + 376) + 160LL) = v19;
      obj_dirty(a1, a3, 0LL);
      goto LABEL_31;
    }

      uint64_t v17 = *(void *)(v12[49] + 32);
      if (v17 <= v8[132])
      {
        int v18 = 0;
      }

      else if (*(_BYTE *)(a3 + 969))
      {
        int v18 = 1;
      }

      else
      {
        log_err( "%s:%d: %s main free queue tree is too large: %lld nodes (limit %d) xid %lld\n",  "spaceman_checkpoint_traverse",  3122,  (const char *)(*(void *)(a1 + 384) + 208LL),  v17,  v8[132],  *(void *)(a2 + 16));
        int v18 = 1;
        int v12 = v24;
      }

      *(_BYTE *)(a3 + 969) = v18;
      goto LABEL_38;
    }
  }

  if (v35 >= 0xFFFFFF) {
    unsigned int v38 = 0xFFFFFFLL;
  }
  else {
    unsigned int v38 = v35;
  }
  if (v30 <= v38) {
    goto LABEL_36;
  }
LABEL_56:
  uint64_t v43 = *(void *)&v62[0];
  *(void *)uint64_t v36 = *(void *)&v62[0];
  *(void *)(v36 + 8) = v30;
  *(_BYTE *)(v36 + 16) = v58;
  if (v29)
  {
    uint64_t v44 = *(void *)(a1 + 376);
    uint64_t v45 = v44 + 48LL * a2;
    uint64_t v46 = *(void *)(v45 + 56);
    if (v46 > v10)
    {
      int v47 = *(void *)(a3 + 32);
      if (v47)
      {
        int v48 = *(unsigned int *)(v44 + 36);
        int v49 = v10 * v48;
        if (v46 - 1 == v10) {
          int v48 = *(void *)(v45 + 48) % v48;
        }
        if (calc_overlap_range(v49, v48, *(void *)(a3 + 24), v47, 0LL)) {
          *(_BYTE *)(v36 + 16) = 0;
        }
      }
    }
  }

  if (v43 % *(unsigned int *)(v34 + 36))
  {
    uint64_t v60 = 0u;
    int v61 = 0u;
    unint64_t v59 = 0u;
    spaceman_iterate_bitmap_hints(a1, a2, 3uLL, (uint64_t)v62, (uint64_t)&v59);
    unsigned int v50 = (_OWORD *)(v36 + 24);
    if (*((uint64_t *)&v59 + 1) >= v30)
    {
      *(void *)&uint64_t v15 = v59;
      const void *v50 = v59;
      *(void *)(v36 + 40) = v60;
    }

    else
    {
      uint64_t v15 = *(_OWORD *)v36;
      const void *v50 = *(_OWORD *)v36;
      *(void *)(v36 + 40) = *(void *)(v36 + 16);
      *(void *)(v36 + 24) = v43 / *(unsigned int *)(v34 + 36) * *(unsigned int *)(v34 + 36);
    }
  }

  return *(double *)&v15;
}

LABEL_31:
    uint64_t v11 = 0LL;
    goto LABEL_32;
  }

  uint64_t v11 = obj_modify(a1, 0LL, a3);
  if (!(_DWORD)v11)
  {
    a2 = a2 | 2;
    goto LABEL_9;
  }

  return v11;
}

                  int v20 = *((void *)v1 + 1);
                  if (v20) {
                    uint64_t v21 = (const char *)(v20 + 3992);
                  }
                  else {
                    uint64_t v21 = (const char *)(*(void *)(*(void *)(*(void *)v1 + 392LL) + 384LL) + 208LL);
                  }
                  log_warn( "%s:%d: %s Persistent allocation zone at slot %llu has invalid previous boundary index\n",  "spaceman_sanitize_datazone",  695,  v21,  v6);
                  goto LABEL_35;
                }
              }

              int v18 = *((void *)v1 + 1);
              if (v18) {
                uint64_t v19 = (const char *)(v18 + 3992);
              }
              else {
                uint64_t v19 = (const char *)(*(void *)(*(void *)(*(void *)v1 + 392LL) + 384LL) + 208LL);
              }
              log_warn( "%s:%d: %s Persistent allocation zone at slot %llu has invalid previous boundary %llu\n",  "spaceman_sanitize_datazone",  686,  v19,  v6,  v14);
LABEL_35:
              __int128 v22 = *((void *)v1 + 1);
              if (v22) {
                uint64_t v23 = (const char *)(v22 + 3992);
              }
              else {
                uint64_t v23 = (const char *)(*(void *)(*(void *)(*(void *)v1 + 392LL) + 384LL) + 208LL);
              }
              uint64_t result = log_warn( "%s:%d: %s Clearing persistent allocation zone at slot %llu\n",  "spaceman_sanitize_datazone",  701,  v23,  v6);
              *(void *)(v8 + 128) = 0LL;
              *(_OWORD *)(v8 + 96) = 0u;
              *(_OWORD *)(v8 + 112) = 0u;
              *(_OWORD *)(v8 + 64) = 0u;
              *(_OWORD *)(v8 + 80) = 0u;
              *(_OWORD *)(v8 + 32) = 0u;
              *(_OWORD *)(v8 + 48) = 0u;
              *(_OWORD *)int v8 = 0u;
              *(_OWORD *)(v8 + 16) = 0u;
LABEL_39:
              ++v6;
              v7 += 136LL;
            }

            while (v6 != 8);
          }

          BOOL v4 = 0;
          uint64_t v2 = 1LL;
        }

        while ((v25 & 1) != 0);
      }
    }
  }

  return result;
}

  if (v6 && *(_BYTE *)(v6 + 62))
  {
    uint64_t v21 = *(void *)(v6 + 48) + v14;
    *(void *)(v6 + 40) += v15;
    *(void *)(v6 + 48) = v21;
  }

  return v14;
}

  if ((*(void *)(v23 + 16) & 0x80020000000LL) == 0)
  {
    uint64_t v43 = *(void *)(v23 + 56);
    if (*(_DWORD *)(v43 + 24) != *(_DWORD *)(v23 + 36)
      || *(_DWORD *)(v43 + 28) != *(_DWORD *)(v23 + 40)
      || *(void *)(v43 + 8) != a3
      || *(void *)(v43 + 16) != a8)
    {
      int v13 = nx_corruption_detected_int(*(void *)a1[6].__opaque);
      if ((_DWORD)v13) {
        goto LABEL_53;
      }
    }
  }

  CFStringRef v37 = (uint64_t *)(a1[11].__sig + 8 * (*(void *)(v23 + 112) & *(unsigned int *)&a1[10].__opaque[52]));
  unsigned int v38 = *v37;
  *(void *)(v23 + 72) = *v37;
  if (v38) {
    *(void *)(v38 + 80) = v23 + 72;
  }
  *CFStringRef v37 = v23;
  *(void *)(v23 + 80) = v37;
  unint64_t v39 = *(void *)(v23 + 16) | 1LL;
  *(void *)(v23 + 88) = 0LL;
  *(void *)(v23 + 16) = v39;
  uint64_t v40 = *(uint64_t **)&a1[11].__opaque[32];
  *(void *)(v23 + 96) = v40;
  *uint64_t v40 = v23;
  *(void *)&a1[11].__opaque[32] = v23 + 88;
  uint64_t v41 = obj_descriptor_funcs_for_type(*(_DWORD *)(v23 + 36), &v49);
  if ((_DWORD)v41)
  {
    int v13 = v41;
LABEL_36:
    obj_cache_ephemeral_adjust((uint64_t)a1, v39, *(_DWORD *)(v23 + 48), -1);
    do
      uint64_t v42 = __ldxr(v24);
    while (__stxr(v42 - 1, v24));
LABEL_55:
    obj_destroy_internal(v23, 0);
LABEL_56:
    obj_cache_unlock_write((uint64_t)a1);
  }

  else
  {
    uint64_t v44 = *(uint64_t (**)(uint64_t, void))(v49 + 8);
    if (v44)
    {
      uint64_t v45 = v44(v23, 0LL);
      if ((_DWORD)v45)
      {
        int v13 = v45;
        unint64_t v39 = *(void *)(v23 + 16);
        goto LABEL_36;
      }
    }

    obj_init_wakeup(v23, v47);
    obj_cache_unlock_write((uint64_t)a1);
    int v13 = 0LL;
    *a9 = v23;
  }

  return v13;
}

uint64_t omap_checkpoint_traverse(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v29 = *MEMORY[0x1895F89C0];
  int v8 = obj_type(a1);
  __int128 v21 = 0uLL;
  if ((_DWORD)a4 == 2)
  {
    if (v8 == 13) {
      uint64_t v9 = a1;
    }
    else {
      uint64_t v9 = 0LL;
    }
    *(void *)(a3 + 8) = v9;
  }

  if ((*(_BYTE *)(a3 + 20) & 0x40) != 0) {
    return 0LL;
  }
  obj_lock(a3, 1);
  int v10 = obj_type_is_or_contains_ephemeral(*(_DWORD *)(*(void *)(a3 + 376) + 40LL));
  uint64_t v11 = *(void *)(a3 + 376);
  if (!v10 || !*(void *)(v11 + 48))
  {
LABEL_12:
    if (obj_type_is_or_contains_ephemeral(*(_DWORD *)(v11 + 44))
      && (v14 = *(void *)(a3 + 376), (uint64_t v15 = *(void *)(v14 + 56)) != 0))
    {
      int v16 = *(_DWORD *)(v14 + 44);
      __int128 v23 = 0u;
      __int128 v24 = 0u;
      uint64_t v28 = 0LL;
      __int128 v26 = 0u;
      __int128 v27 = 0u;
      __int128 v25 = 0u;
      __int128 v22 = omap_snapshot_key_cmp;
      DWORD2(v23) = 19;
      if ((unsigned __int16)v16 != 2)
      {
        obj_unlock(a3, 1);
        int v18 = (uint64_t *)*((void *)&v21 + 1);
        if (!*((void *)&v21 + 1))
        {
          uint64_t v17 = (uint64_t *)v21;
          uint64_t extended = 22LL;
          if (!(void)v21) {
            return extended;
          }
          goto LABEL_39;
        }

        uint64_t extended = 22LL;
        goto LABEL_35;
      }

      uint64_t extended = btree_get_extended(a1, v16 & 0xFFFF0000, v15, 0LL, 0, (uint64_t)&v22, 0LL, (uint64_t *)&v21);
      obj_unlock(a3, 1);
      if ((_DWORD)extended) {
        goto LABEL_32;
      }
    }

    else
    {
      obj_unlock(a3, 1);
    }

    if ((obj_type_and_flags(a3) & 0x80000000) == 0)
    {
      int v18 = (uint64_t *)*((void *)&v21 + 1);
      uint64_t v17 = (uint64_t *)v21;
      if (v21 != 0)
      {
        if (!*((void *)&v21 + 1))
        {
          if (!(void)v21) {
            return 0LL;
          }
          goto LABEL_38;
        }

        goto LABEL_34;
      }

      obj_set_skip_checkpoint_traverse(a3, 1);
      goto LABEL_27;
    }

    if ((_DWORD)a4 == 2)
    {
      uint64_t v19 = obj_checkpoint_known(a3);
    }

    else
    {
      if ((_DWORD)a4 != 1)
      {
LABEL_27:
        uint64_t extended = 0LL;
        goto LABEL_32;
      }

      uint64_t v19 = obj_checkpoint_start((unsigned int *)a3);
    }

    uint64_t extended = v19;
LABEL_32:
    int v18 = (uint64_t *)*((void *)&v21 + 1);
    if (!*((void *)&v21 + 1)) {
      goto LABEL_36;
    }
    if ((_DWORD)extended)
    {
LABEL_35:
      obj_release(v18);
LABEL_36:
      uint64_t v17 = (uint64_t *)v21;
      if (!(void)v21) {
        return extended;
      }
      if ((_DWORD)extended)
      {
LABEL_39:
        obj_release(v17);
        return extended;
      }

LABEL_38:
      uint64_t extended = btree_checkpoint_traverse(a1, a2, (uint64_t)v17, a4);
      uint64_t v17 = (uint64_t *)v21;
      goto LABEL_39;
    }

LABEL_34:
    uint64_t extended = btree_checkpoint_traverse(a1, a2, (uint64_t)v18, a4);
    int v18 = (uint64_t *)*((void *)&v21 + 1);
    goto LABEL_35;
  }

  uint64_t v12 = omap_map_tree_get(a1, a3, 0, 0LL, (uint64_t *)&v21 + 1);
  if (!(_DWORD)v12)
  {
    uint64_t v11 = *(void *)(a3 + 376);
    goto LABEL_12;
  }

  uint64_t extended = v12;
  obj_unlock(a3, 1);
  return extended;
}

    ++v22;
    --v21;
  }

  while (v21);
  LODWORD(v12) = *(_DWORD *)(v8 + 36);
  uint64_t v19 = v24;
  LODWORD(v14) = v23;
LABEL_36:
  uint64_t v12 = v12;
  uint64_t v5 = a5;
LABEL_37:
  int v35 = v19 * v12;
  else {
    uint64_t v14 = v11;
  }
  *(void *)uint64_t v5 = v35;
  *(void *)(v5 + 8) = v14;
  uint64_t v36 = *(_BYTE *)(a4 + 16);
  if (v36)
  {
    CFStringRef v37 = *(void *)(v7 + 376);
    unsigned int v38 = v37 + 48LL * v9;
    unint64_t v39 = *(void *)(v38 + 56);
    if (v39 > v19 && (uint64_t v40 = *(void *)(a4 + 32)) != 0)
    {
      uint64_t v41 = *(unsigned int *)(v37 + 36);
      uint64_t v42 = v19 * v41;
      if (v39 - 1 == v19) {
        uint64_t v41 = *(void *)(v38 + 48) % v41;
      }
      uint64_t v43 = *(void *)(a4 + 24);
      uint64_t v44 = v8;
      uint64_t v45 = v11;
      uint64_t result = calc_overlap_range(v42, v41, v43, v40, 0LL);
      uint64_t v11 = v45;
      int v8 = v44;
      uint64_t v36 = result == 0;
    }

    else
    {
      uint64_t v36 = 1;
    }
  }

  *(_BYTE *)(v5 + 16) = v36;
  if (v19 != v13)
  {
    uint64_t v46 = v15;
    if (v11 < v15) {
      uint64_t v46 = v11;
    }
    *(void *)(v5 + 24) = v13 * *(unsigned int *)(v8 + 36);
    *(void *)(v5 + 32) = v46;
    *(_BYTE *)(v5 + 40) = 0;
  }

  return result;
}

    int v30 = a3;
    goto LABEL_35;
  }

  if (*(void *)a1) {
    pthread_mutex_unlock((pthread_mutex_t *)(a1 + 16));
  }
  return 45LL;
}

uint64_t omap_set( uint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, uint64_t a7)
{
  int v14 = obj_type(a1);
  uint64_t v15 = (void *)a1;
  if (a1)
  {
    uint64_t v15 = (void *)a1;
    if (v14 == 13) {
      uint64_t v15 = *(void **)(a1 + 392);
    }
  }

  v26[1] = a3;
  __int128 v27 = 0LL;
  v25[1] = a4;
  v26[0] = a2;
  v25[0] = __PAIR64__(a5, a6);
  __int128 v23 = 0LL;
  __int128 v24 = 0LL;
  uint64_t v16 = 22LL;
  if (xid_is_current_tx((uint64_t)v15, a7) && a2 && a3 && a5)
  {
    uint64_t v17 = v15[47];
    if ((*(_BYTE *)(v17 + 65) & 1) != 0)
    {
      uint64_t v21 = spaceman_get(v15, (uint64_t *)&v27);
      if ((_DWORD)v21)
      {
        uint64_t v16 = v21;
        else {
          log_err( "%s:%d: %s unable to get spaceman: %d\n",  "omap_set",  770,  (const char *)(*(void *)(a1 + 384) + 208LL),  v16);
        }
        return v16;
      }

      uint64_t v17 = v15[47];
      unsigned int v19 = (a5 + *(_DWORD *)(v17 + 36) - 1) / *(_DWORD *)(v17 + 36);
      if (v27) {
        uint64_t v18 = v27[47];
      }
      else {
        uint64_t v18 = 0LL;
      }
    }

    else
    {
      uint64_t v18 = 0LL;
      unsigned int v19 = (a5 + *(_DWORD *)(v17 + 36) - 1) / *(_DWORD *)(v17 + 36);
    }

    uint64_t v16 = nx_superblock_sanity_check_extent(v17, v18, a4, v19, 0);
    if (v27) {
      obj_release(v27);
    }
    if (!(_DWORD)v16)
    {
      uint64_t v16 = omap_obj_get(a1, 1LL, a7, &v24);
      if (!(_DWORD)v16)
      {
        obj_lock((uint64_t)v24, 2);
        uint64_t v20 = omap_map_tree_get(a1, (uint64_t)v24, 1, a7, (uint64_t *)&v23);
        if ((_DWORD)v20)
        {
          uint64_t v16 = v20;
        }

        else
        {
          if ((a6 & 4) != 0) {
            LODWORD(v25[0]) = *(_DWORD *)(*((void *)v24 + 47) + 32LL) & 0x10 | a6;
          }
          uint64_t v16 = bt_insert(v23, 0LL, v26, 16, v25, 0x10u, a7);
          obj_release(v23);
        }

        obj_unlock((uint64_t)v24, 2);
        obj_release((uint64_t *)v24);
      }
    }
  }

  return v16;
}

uint64_t omap_delete(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, int a5, int a6, uint64_t a7)
{
  int v14 = obj_type(a1);
  uint64_t v15 = a1;
  if (a1)
  {
    uint64_t v15 = a1;
    if (v14 == 13) {
      uint64_t v15 = *(void *)(a1 + 392);
    }
  }

  *(void *)&__int128 v34 = a2;
  *((void *)&v34 + 1) = a3;
  v32[0] = a6;
  v32[1] = a5;
  uint64_t v33 = a4;
  uint64_t v30 = 0LL;
  int v31 = 0LL;
  uint64_t v29 = 0LL;
  uint64_t v16 = 22LL;
  if (!xid_is_current_tx(v15, a7)) {
    return v16;
  }
  if (!a2) {
    return v16;
  }
  if (!a3) {
    return v16;
  }
  uint64_t v16 = omap_obj_get(a1, 1LL, a7, &v31);
  if ((_DWORD)v16) {
    return v16;
  }
  obj_lock((uint64_t)v31, 2);
  uint64_t v16 = omap_map_tree_get(a1, v31, 1LL, a7, &v30);
  uint64_t v17 = v31;
  if ((_DWORD)v16)
  {
LABEL_45:
    obj_unlock((uint64_t)v17, 2);
    obj_release(v31);
    return v16;
  }

  uint64_t v18 = *((void *)v31 + 47);
  unint64_t v19 = *(void *)(v18 + 64);
  if ((v31[384] & 2) != 0 && *((void *)v31 + 61) == v19) {
    unint64_t v19 = *((void *)v31 + 60);
  }
  if ((*(_BYTE *)(v18 + 32) & 1) != 0)
  {
    if ((a6 & 1) == 0)
    {
      *(_OWORD *)uint64_t v28 = v34;
      uint64_t v26 = 0LL;
      uint64_t v27 = 0LL;
      uint64_t v29 = 0x1000000010LL;
      uint64_t v22 = bt_lookup_variant(v30, 0LL, v28, (unsigned int *)&v29 + 1, 0x10u, &v26, (unsigned int *)&v29, 0, 0, 0LL);
      if ((_DWORD)v22) {
        goto LABEL_43;
      }
      int v20 = 0;
      BOOL v23 = ((v26 >> 1) & 1) == 0;
      goto LABEL_27;
    }

    int v20 = 0;
    goto LABEL_26;
  }

  int v20 = a6 & 1;
  if (v19 < a3)
  {
    if (v20)
    {
      *(_OWORD *)uint64_t v28 = v34;
      uint64_t v26 = 0LL;
      uint64_t v27 = 0LL;
      uint64_t v29 = 0x1000000010LL;
      if (bt_lookup_variant( v30,  0LL,  v28,  (unsigned int *)&v29 + 1,  0x10u,  &v26,  (unsigned int *)&v29,  2u,  0,  0LL)) {
        BOOL v21 = 0;
      }
      else {
        BOOL v21 = v28[0] == a2;
      }
      int v20 = v21;
    }

LABEL_26:
    BOOL v23 = 1;
    goto LABEL_27;
  }

  BOOL v23 = 0;
LABEL_27:
  if (v20 | v23)
  {
    if (v20)
    {
      *((void *)&v34 + 1) = a7;
      uint64_t v16 = bt_insert(v30, 0LL, &v34, 16LL, v32, 16LL, a7);
    }

    else
    {
      uint64_t v16 = 0LL;
    }

    if (v23 && !(_DWORD)v16)
    {
      if (a3 == a7 && v20)
      {
        uint64_t v16 = 0LL;
      }

      else
      {
        *((void *)&v34 + 1) = a3;
        uint64_t v24 = bt_remove(v30, 0LL, &v34, 16LL, a7);
        uint64_t v16 = v24;
        if (v20 && (_DWORD)v24)
        {
          *((void *)&v34 + 1) = a7;
          bt_remove(v30, 0LL, &v34, 16LL, a7);
LABEL_44:
          obj_release(v30);
          uint64_t v17 = v31;
          goto LABEL_45;
        }
      }
    }

    if (!v23 || (_DWORD)v16) {
      goto LABEL_44;
    }
    uint64_t v22 = spaceman_free( a1,  0LL,  a4,  (a5 + *(_DWORD *)(*(void *)(v15 + 376) + 36LL) - 1)
          / *(_DWORD *)(*(void *)(v15 + 376) + 36LL),
            a7);
LABEL_43:
    uint64_t v16 = v22;
    goto LABEL_44;
  }

  obj_release(v30);
  obj_unlock((uint64_t)v31, 2);
  obj_release(v31);
  return 0LL;
}

uint64_t omap_get( uint64_t a1, unint64_t a2, unint64_t a3, void *a4, _DWORD *a5, _DWORD *a6, unint64_t *a7)
{
  uint64_t v11 = a3;
  uint64_t v31 = 0LL;
  int v32 = 0LL;
  unint64_t v29 = a2;
  unint64_t v30 = a3;
  uint64_t v27 = 0LL;
  uint64_t v28 = 0LL;
  unsigned int v25 = 16;
  unsigned int v26 = 16;
  char v24 = 0;
  uint64_t v14 = omap_obj_get(a1, 0LL, 0LL, &v32);
  if (!(_DWORD)v14)
  {
    obj_lock((uint64_t)v32, 1);
    if (*(void *)(*((void *)v32 + 47) + 88LL) > a2)
    {
      obj_unlock((uint64_t)v32, 1);
      uint64_t v14 = 2LL;
LABEL_33:
      obj_release(v32);
      return v14;
    }

    uint64_t v15 = omap_map_tree_get(a1, (uint64_t)v32, 0, 0LL, &v31);
    if ((_DWORD)v15)
    {
      uint64_t v14 = v15;
      obj_unlock((uint64_t)v32, 1);
      goto LABEL_33;
    }

    if (!v11)
    {
      uint64_t v11 = -1LL;
      unint64_t v30 = -1LL;
    }

    BOOL v16 = 1;
    uint64_t v17 = bt_lookup_variant(v31, 0LL, &v29, &v26, 0x10u, &v27, &v25, 1u, 0, 0LL);
    if ((_DWORD)v17) {
      goto LABEL_9;
    }
    uint64_t v18 = *((void *)v32 + 47);
    unint64_t v19 = *(void *)(v18 + 72);
    unint64_t v20 = v29;
    if (v19) {
      BOOL v21 = v29 == a2;
    }
    else {
      BOOL v21 = 0;
    }
    if (v21)
    {
      if (v30 < v19 || v30 > *(void *)(v18 + 80)) {
        goto LABEL_18;
      }
      unint64_t v29 = a2;
      unint64_t v30 = v19 - 1;
      uint64_t v17 = bt_lookup_variant(v31, 0LL, &v29, &v26, 0x10u, &v27, &v25, 1u, 0, 0LL);
      if ((_DWORD)v17)
      {
LABEL_9:
        uint64_t v14 = v17;
        goto LABEL_31;
      }

      unint64_t v20 = v29;
    }

    if (v20 != a2)
    {
LABEL_30:
      uint64_t v14 = 2LL;
LABEL_31:
      obj_release(v31);
      obj_unlock((uint64_t)v32, 1);
      if (!v16) {
        omap_tracking_stop(a1, (uint64_t)v32);
      }
      goto LABEL_33;
    }

LABEL_18:
    int v22 = v27;
    if ((v27 & 1) == 0)
    {
      if (a4) {
        *a4 = v28;
      }
      if (a5) {
        *a5 = HIDWORD(v27);
      }
      if (a6)
      {
        *a6 = v22 & 0xFFFFFFEF;
        if (((*(_DWORD *)(*((void *)v32 + 47) + 32LL) ^ v22) & 0x10) != 0) {
          *a6 = v22 | 0x10;
        }
      }

      if (a7) {
        *a7 = v30;
      }
      if (*((void *)v32 + 53))
      {
        omap_tracking((uint64_t)v32, a2, v11, &v24);
        uint64_t v14 = 0LL;
        BOOL v16 = v24 == 0;
      }

      else
      {
        uint64_t v14 = 0LL;
      }

      goto LABEL_31;
    }

    goto LABEL_30;
  }

  return v14;
}

  if (v18)
  {
    pthread_mutex_unlock(v18 + 6);
    obj_release(&v18->__sig);
  }

  return v2;
}

uint64_t omap_tracking(uint64_t result, unint64_t a2, uint64_t a3, _BYTE *a4)
{
  uint64_t v13 = 1LL;
  unint64_t v14 = a2;
  if (*(void *)(result + 424))
  {
    uint64_t v4 = result;
    if (!*(_DWORD *)(result + 440))
    {
      unsigned __int8 v12 = 0;
      uint64_t v11 = 0LL;
      __tp.tv_sec = 0LL;
      __tp.tv_nsec = 0LL;
      clock_gettime(_CLOCK_UPTIME_RAW_APPROX, &__tp);
      if (__tp.tv_sec - *(void *)(v4 + 432) >= 601) {
        *a4 = 1;
      }
      btree_node_count(*(void *)(v4 + 424), &v13);
      unint64_t v7 = v13;
      uint64_t result = obj_size_phys(*(void *)(v4 + 424));
      if (v7 <= 0x200000 / result)
      {
        LODWORD(__tp.tv_sec) = 8;
        unsigned int v10 = 9;
        uint64_t result = bt_lookup_variant(*(void *)(v4 + 424), 0LL, &v14, (unsigned int *)&__tp, 8u, &v11, &v10, 0, 0, 0LL);
        if ((_DWORD)result == 2)
        {
          LOBYTE(v8) = *(_BYTE *)(v4 + 464);
        }

        else
        {
          if ((_DWORD)result) {
            return result;
          }
          if (!v11) {
            return result;
          }
          int v8 = *(unsigned __int8 *)(v4 + 464);
          if (v12 == v8) {
            return result;
          }
        }

        if (a3 == -1) {
          uint64_t v9 = 0LL;
        }
        else {
          uint64_t v9 = a3;
        }
        uint64_t v11 = v9;
        unsigned __int8 v12 = v8;
        return bt_insert(*(void **)(v4 + 424), 0LL, &v14, 8, &v11, 9u, 0LL);
      }
    }
  }

  return result;
}

uint64_t omap_tracking_stop(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1;
  obj_lock(a2, 2);
  if (*(void *)(a2 + 424))
  {
    v6.tv_sec = 0LL;
    v6.tv_nsec = 0LL;
    clock_gettime(_CLOCK_UPTIME_RAW_APPROX, &v6);
    if (v6.tv_sec - *(void *)(a2 + 432) >= 601)
    {
      btree_delete(*(void *)(a2 + 424), 0LL, 0LL);
      obj_release(*(void *)(a2 + 424));
      *(void *)(a2 + 424) = 0LL;
    }
  }

  if (v3)
  {
    if (*(void *)(v3 + 496)) {
      uint64_t v3 = *(void *)(v3 + 496);
    }
    uint64_t v4 = *(void *)(v3 + 3616);
    if (v4)
    {
      obj_release(v4);
      *(void *)(v3 + 3616) = 0LL;
    }
  }

  return obj_unlock(a2, 2);
}

uint64_t omap_find_next_snapshot_xid(uint64_t a1, unint64_t a2, void *a3)
{
  uint64_t v26 = *MEMORY[0x1895F89C0];
  uint64_t v17 = 0LL;
  uint64_t v18 = 0LL;
  v16[0] = 0LL;
  v16[1] = 0LL;
  unint64_t v14 = 0LL;
  uint64_t v15 = 0LL;
  uint64_t v6 = omap_obj_get(a1, 0LL, 0LL, &v18);
  if ((_DWORD)v6)
  {
    uint64_t extended = v6;
    if (obj_type(a1) == 13) {
      log_err( "%s:%d: %s unable to get omap: %d\n",  "omap_find_next_snapshot_xid",  1150,  (const char *)(a1 + 3992),  extended);
    }
    else {
      log_err( "%s:%d: %s unable to get omap: %d\n",  "omap_find_next_snapshot_xid",  1150,  (const char *)(*(void *)(a1 + 384) + 208LL),  extended);
    }
    return extended;
  }

  uint64_t v8 = *((void *)v18 + 47);
  obj_lock((uint64_t)v18, 1);
  if ((*(_BYTE *)(v8 + 32) & 1) == 0)
  {
    uint64_t v9 = *(void *)(v8 + 56);
    if (v9)
    {
      int v10 = *(_DWORD *)(v8 + 44);
      __int128 v20 = 0u;
      __int128 v21 = 0u;
      uint64_t v25 = 0LL;
      __int128 v23 = 0u;
      __int128 v24 = 0u;
      __int128 v22 = 0u;
      unint64_t v19 = omap_snapshot_key_cmp;
      DWORD2(v20) = 19;
      if ((unsigned __int16)v10 == 2)
      {
        uint64_t extended = btree_get_extended(a1, v10 & 0xFFFF0000, v9, 0LL, 0, (uint64_t)&v19, 0LL, (uint64_t *)&v17);
        if (!(_DWORD)extended)
        {
          unint64_t v14 = a2;
          do
          {
            uint64_t v15 = 0x800000010LL;
            uint64_t v11 = bt_lookup_variant( (uint64_t)v17,  0LL,  &v14,  (unsigned int *)&v15 + 1,  8u,  v16,  (unsigned int *)&v15,  4u,  0,  0LL);
            if ((_DWORD)v11) {
              BOOL v12 = 1;
            }
            else {
              BOOL v12 = (v16[0] & 1) == 0;
            }
          }

          while (!v12);
          uint64_t extended = v11;
          if (!(_DWORD)v11)
          {
            *a3 = v14;
            goto LABEL_20;
          }

          if ((_DWORD)v11 != 2)
          {
            obj_type(a1);
            log_err("%s:%d: %s error searching snapshot tree: %d\n");
            goto LABEL_20;
          }

          goto LABEL_16;
        }
      }

      else
      {
        uint64_t extended = 22LL;
      }

      obj_type(a1);
      log_err("%s:%d: %s unable to get snapshot tree: %d\n");
      goto LABEL_20;
    }
  }

LABEL_16:
  uint64_t extended = 2LL;
LABEL_20:
  if (v17) {
    obj_release(v17);
  }
  obj_unlock((uint64_t)v18, 1);
  obj_release((uint64_t *)v18);
  return extended;
}

      result <<= 30;
      goto LABEL_18;
    }

    if (v4 != 109)
    {
      if (v4 != 116) {
        goto LABEL_19;
      }
      goto LABEL_15;
    }

  if (v25) {
    nx_unmount((uint64_t)v25);
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
  if (v8) {
    CFRelease(v8);
  }
  if (v7) {
    CFRelease(v7);
  }
  if (v9) {
    CFRelease(v9);
  }
  apfs_log_level = 5;
  return v5;
}

uint64_t omap_obj_modify(void *a1, void *a2, uint64_t a3)
{
  else {
    uint64_t v6 = 0LL;
  }
  if (v6)
  {
    unint64_t v7 = *(void **)(v6 + 392);
    uint64_t result = obj_modify(a1, 0, a3);
    if ((_DWORD)result) {
      return result;
    }
    uint64_t v9 = (pthread_mutex_t *)(v6 + 1144);
  }

  else
  {
    uint64_t result = obj_modify(a1, 0, a3);
    if ((_DWORD)result) {
      return result;
    }
    uint64_t v9 = (pthread_mutex_t *)(a1 + 82);
    unint64_t v7 = a1;
  }

  pthread_mutex_lock(v9);
  uint64_t v10 = obj_oid((uint64_t)a2);
  unsigned int v11 = obj_type_and_flags((uint64_t)a2);
  if (!obj_modify(a2, (v11 >> 29) & 2, a3) && obj_oid((uint64_t)a2) != v10)
  {
    uint64_t v13 = obj_oid((uint64_t)a2);
    if (v6)
    {
      *(void *)(*(void *)(v6 + 376) + 128LL) = v13;
      fs_sb_dirty(v6, a3);
      goto LABEL_12;
    }

    *(void *)(v7[47] + 160LL) = v13;
    obj_dirty((uint64_t)a1, a3, 0LL);
LABEL_16:
    BOOL v12 = (pthread_mutex_t *)(v7 + 82);
    goto LABEL_17;
  }

  if (!v6) {
    goto LABEL_16;
  }
LABEL_12:
  BOOL v12 = (pthread_mutex_t *)(v6 + 1144);
LABEL_17:
  pthread_mutex_unlock(v12);
  return 0LL;
}

unint64_t parse_size(const char *a1)
{
  __endptr = 0LL;
  unint64_t result = strtoull(a1, &__endptr, 10);
  uint64_t v3 = __endptr;
  unsigned int v4 = *__endptr;
  if (v4 > 0x66)
  {
    if (*__endptr <= 0x6Cu)
    {
      if (v4 != 103)
      {
        if (v4 != 107) {
          goto LABEL_19;
        }
LABEL_9:
        result <<= 10;
LABEL_18:
        uint64_t v3 = __endptr + 1;
        goto LABEL_19;
      }

LABEL_17:
    result <<= 20;
    goto LABEL_18;
  }

  if (*__endptr <= 0x4Cu)
  {
    if (v4 != 71)
    {
      if (v4 != 75) {
        goto LABEL_19;
      }
      goto LABEL_9;
    }

    goto LABEL_16;
  }

  if (v4 == 77) {
    goto LABEL_17;
  }
  if (v4 == 84)
  {
LABEL_15:
    result <<= 40;
    goto LABEL_18;
  }

char *parse_apfs_format_options(char *a1, uint64_t a2)
{
  uint64_t v3 = a1;
  if (!a1)
  {
    *(_OWORD *)(a2 + 464) = 0u;
    *(_OWORD *)(a2 + 480) = 0u;
    *(_OWORD *)(a2 + 432) = 0u;
    *(_OWORD *)(a2 + 448) = 0u;
    *(_OWORD *)(a2 + 400) = 0u;
    *(_OWORD *)(a2 + 416) = 0u;
    *(_OWORD *)(a2 + 368) = 0u;
    *(_OWORD *)(a2 + 384) = 0u;
    *(_OWORD *)(a2 + 336) = 0u;
    *(_OWORD *)(a2 + 352) = 0u;
    *(_OWORD *)(a2 + 304) = 0u;
    *(_OWORD *)(a2 + 320) = 0u;
    *(_OWORD *)(a2 + 272) = 0u;
    *(_OWORD *)(a2 + 288) = 0u;
    *(_OWORD *)(a2 + 240) = 0u;
    *(_OWORD *)(a2 + 256) = 0u;
    *(_OWORD *)(a2 + 208) = 0u;
    *(_OWORD *)(a2 + 224) = 0u;
    *(_OWORD *)(a2 + 176) = 0u;
    *(_OWORD *)(a2 + 192) = 0u;
    *(_OWORD *)(a2 + 144) = 0u;
    *(_OWORD *)(a2 + 160) = 0u;
    *(_OWORD *)(a2 + 112) = 0u;
    *(_OWORD *)(a2 + 128) = 0u;
    *(_OWORD *)(a2 + 80) = 0u;
    *(_OWORD *)(a2 + 96) = 0u;
    *(_OWORD *)(a2 + 48) = 0u;
    *(_OWORD *)(a2 + 64) = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)a2 = 0u;
    MEMORY[0x186E24CB4](a2);
    *(_OWORD *)(a2 + 32) = xmmword_183C99EB0;
    *(_DWORD *)(a2 + 492) = 1073741826;
    *(_DWORD *)(a2 + 48) = -1;
    *(_DWORD *)(a2 + 444) = getuid();
    *(_DWORD *)(a2 + 448) = getgid();
    *(_WORD *)(a2 + 52) &= ~0x80u;
    __strlcpy_chk();
    *(_WORD *)(a2 + 52) = *(_WORD *)(a2 + 52) & 0xFBF3 | 8;
    return (char *)v3;
  }

  if (!strncasecmp(a1, "uuid_from_role", 0xEuLL))
  {
    unsigned int v21 = *(unsigned __int16 *)(a2 + 54);
    if (v21 > 0xBF)
    {
      if (*(unsigned __int16 *)(a2 + 54) <= 0x1BFu)
      {
        if (*(unsigned __int16 *)(a2 + 54) > 0x13Fu)
        {
          if (v21 == 320)
          {
            __int128 v22 = "61706673-7575-6964-0140-766f6c756d00";
            goto LABEL_114;
          }

          if (v21 == 384)
          {
            __int128 v22 = "61706673-7575-6964-0180-766f6c756d00";
            goto LABEL_114;
          }
        }

        else
        {
          if (v21 == 192)
          {
            __int128 v22 = "61706673-7575-6964-00c0-766f6c756d00";
            goto LABEL_114;
          }

          if (v21 == 256)
          {
            __int128 v22 = "61706673-7575-6964-0100-766f6c756d00";
            goto LABEL_114;
          }
        }
      }

      else if (*(unsigned __int16 *)(a2 + 54) <= 0x23Fu)
      {
        if (v21 == 448)
        {
          __int128 v22 = "61706673-7575-6964-01c0-766f6c756d00";
          goto LABEL_114;
        }

        if (v21 == 512)
        {
          __int128 v22 = "61706673-7575-6964-0200-766f6c756d00";
          goto LABEL_114;
        }
      }

      else
      {
        switch(v21)
        {
          case 0x240u:
            __int128 v22 = "61706673-7575-6964-0240-766f6c756d00";
            goto LABEL_114;
          case 0x280u:
            __int128 v22 = "61706673-7575-6964-0280-766f6c756d00";
            goto LABEL_114;
          case 0x2C0u:
            __int128 v22 = "61706673-7575-6964-02c0-766f6c756d00";
LABEL_114:
            uuid_parse(v22, (unsigned __int8 *)a2);
            return 0LL;
        }
      }
    }

    else
    {
      if (*(unsigned __int16 *)(a2 + 54) <= 0xFu)
      {
        __int128 v22 = "61706673-7575-6964-0000-766f6c756d00";
        switch(*(_WORD *)(a2 + 54))
        {
          case 0:
            goto LABEL_114;
          case 1:
            __int128 v22 = "61706673-7575-6964-0001-766f6c756d00";
            goto LABEL_114;
          case 2:
            __int128 v22 = "61706673-7575-6964-0002-766f6c756d00";
            goto LABEL_114;
          case 4:
            __int128 v22 = "61706673-7575-6964-0004-766f6c756d00";
            goto LABEL_114;
          case 8:
            __int128 v22 = "61706673-7575-6964-0008-766f6c756d00";
            goto LABEL_114;
          default:
            return strerror(22);
        }
      }

      if (*(unsigned __int16 *)(a2 + 54) > 0x3Fu)
      {
        if (v21 == 64)
        {
          __int128 v22 = "61706673-7575-6964-0040-766f6c756d00";
          goto LABEL_114;
        }

        if (v21 == 128)
        {
          __int128 v22 = "61706673-7575-6964-0080-766f6c756d00";
          goto LABEL_114;
        }
      }

      else
      {
        if (v21 == 16)
        {
          __int128 v22 = "61706673-7575-6964-0010-766f6c756d00";
          goto LABEL_114;
        }

        if (v21 == 32)
        {
          __int128 v22 = "61706673-7575-6964-0020-766f6c756d00";
          goto LABEL_114;
        }
      }
    }

    return strerror(22);
  }

  if (!strncasecmp(v3, "password=", 9uLL))
  {
    v3 += 9;
    __strlcpy_chk();
    int v23 = strnlen(v3, 0x80uLL);
    *(_DWORD *)(a2 + 440) = v23;
    if ((v23 & 0xFFFFFF80) == 0) {
      return 0LL;
    }
    return (char *)v3;
  }

  if (!strncasecmp(v3, "empty_password", 0xFuLL))
  {
    uint64_t v3 = 0LL;
    *(_BYTE *)(a2 + 312) = 0;
    *(_DWORD *)(a2 + 440) = 0;
    return (char *)v3;
  }

  if (!strncasecmp(v3, "volname=", 8uLL))
  {
    __strlcpy_chk();
    return 0LL;
  }

  unsigned int v4 = strdup(v3);
  if (!v4) {
    return (char *)v3;
  }
  uint64_t v5 = v4;
  __lasts = 0LL;
  uint64_t v6 = strtok_r(v4, ",", &__lasts);
  if (!v6)
  {
    uint64_t v3 = 0LL;
    goto LABEL_103;
  }

  unint64_t v7 = v6;
  uint64_t v8 = "fsquota=";
  uint64_t v9 = "fsindex=";
  while (1)
  {
    if (!strncasecmp(v7, "fssize=", 7uLL))
    {
      unint64_t v11 = parse_size(v7 + 7);
      if (v11 == -1LL) {
        goto LABEL_102;
      }
      *(void *)(a2 + 16) = v11;
LABEL_36:
      *(void *)(a2 + 24) = v11;
      goto LABEL_37;
    }

    if (!strncasecmp(v7, "fsreserve=", 0xAuLL))
    {
      unint64_t v12 = parse_size(v7 + 10);
      if (v12 == -1LL) {
        goto LABEL_102;
      }
      *(void *)(a2 + 16) = v12;
      goto LABEL_37;
    }

    if (!strncasecmp(v7, v8, 8uLL))
    {
      unint64_t v11 = parse_size(v7 + 8);
      if (v11 == -1LL) {
        goto LABEL_102;
      }
      goto LABEL_36;
    }

    if (!strncasecmp(v7, v9, 8uLL)) {
      break;
    }
    if (!strcasecmp(v7, "omap=btree") || !strcasecmp(v7, "omap=physical"))
    {
      int v13 = 1073741826;
LABEL_40:
      *(_DWORD *)(a2 + 32) = v13;
      goto LABEL_37;
    }

    if (!strcasecmp(v7, "omap=ephemeral"))
    {
      int v13 = -2147483646;
      goto LABEL_40;
    }

    if (!strcasecmp(v7, "fstree=btree"))
    {
      *(void *)(a2 + 36) = 0x4000000200000002LL;
      *(_DWORD *)(a2 + 44) = 1073741826;
      *(_DWORD *)(a2 + 492) = 1073741826;
      goto LABEL_37;
    }

    if (!strcasecmp(v7, "encrypted"))
    {
      __int16 v10 = *(_WORD *)(a2 + 52) | 1;
LABEL_55:
      *(_WORD *)(a2 + 52) = v10;
      goto LABEL_37;
    }

    if (!strncasecmp(v7, "role=", 5uLL))
    {
      uint64_t v17 = parse_str_to_role(v7 + 5);
      if (v17 == -1) {
        goto LABEL_102;
      }
      *(_WORD *)(a2 + 54) = v17;
    }

    else
    {
      if (!strcasecmp(v7, "case=insensitive"))
      {
        __int16 v10 = *(_WORD *)(a2 + 52) & 0xFFF3 | 4;
        goto LABEL_55;
      }

      if (!strcasecmp(v7, "case=sensitive"))
      {
        __int16 v10 = *(_WORD *)(a2 + 52) & 0xFFF3 | 8;
        goto LABEL_55;
      }

      if (!strcasecmp(v7, "defragment=yes"))
      {
        __int16 v10 = *(_WORD *)(a2 + 52) & 0xFFCF | 0x20;
        goto LABEL_55;
      }

      if (!strcasecmp(v7, "defragment=no"))
      {
        __int16 v10 = *(_WORD *)(a2 + 52) & 0xFFCF | 0x10;
        goto LABEL_55;
      }

      if (!strncasecmp(v7, "uid=", 4uLL))
      {
        unint64_t v14 = v8;
        uint64_t v15 = v9;
        __endptr = 0LL;
        unint64_t v18 = strtoull(v7 + 4, &__endptr, 10);
        if (__endptr == v7 + 4 || *__endptr || v18 == -1LL) {
          goto LABEL_102;
        }
        *(_DWORD *)(a2 + 444) = v18;
        goto LABEL_45;
      }

      if (!strncasecmp(v7, "gid=", 4uLL))
      {
        unint64_t v14 = v8;
        uint64_t v15 = v9;
        __endptr = 0LL;
        unint64_t v19 = strtoull(v7 + 4, &__endptr, 10);
        if (__endptr == v7 + 4 || *__endptr || v19 == -1LL) {
          goto LABEL_102;
        }
        *(_DWORD *)(a2 + 448) = v19;
        goto LABEL_45;
      }

      if (!strcasecmp(v7, "sealed=yes"))
      {
        *(_WORD *)(a2 + 52) |= 0x80u;
        *(_DWORD *)(a2 + 488) = 1;
        *(_DWORD *)(a2 + 36) = 2;
        goto LABEL_37;
      }

      if (!strcasecmp(v7, "conformance")) {
        goto LABEL_102;
      }
      if (strncasecmp(v7, "hash=", 5uLL))
      {
        if (!strcasecmp(v7, "unwritten"))
        {
          __int16 v10 = *(_WORD *)(a2 + 52) | 0x400;
        }

        else
        {
          if (strcasecmp(v7, "unwritten=no")) {
            goto LABEL_102;
          }
          __int16 v10 = *(_WORD *)(a2 + 52) & 0xFBFF;
        }

        goto LABEL_55;
      }

      int v20 = parse_hash_type(v7 + 5);
      if (v20 == -1) {
        goto LABEL_102;
      }
      *(_DWORD *)(a2 + 488) = v20;
    }

LABEL_37:
    unint64_t v7 = strtok_r(0LL, ",", &__lasts);
    if (!v7)
    {
      uint64_t v3 = 0LL;
      goto LABEL_103;
    }
  }

  unint64_t v14 = v8;
  uint64_t v15 = v9;
  __endptr = 0LL;
  unint64_t v16 = strtoull(v7 + 8, &__endptr, 10);
  if (__endptr != v7 + 8 && !*__endptr && v16 != -1LL)
  {
    *(_DWORD *)(a2 + 48) = v16;
LABEL_45:
    uint64_t v9 = v15;
    uint64_t v8 = v14;
    goto LABEL_37;
  }

  unint64_t result = 0LL;
  a1[47] = v2;
  return result;
}

LABEL_102:
  v3 += v7 - v5;
LABEL_103:
  free(v5);
  return (char *)v3;
}

uint64_t parse_hash_type(const char *a1)
{
  if (!a1) {
    return 0xFFFFFFFFLL;
  }
  if (!strncasecmp(a1, "sha256", 7uLL)) {
    return 1LL;
  }
  if (!strncasecmp(a1, "sha512_256", 0xBuLL)) {
    return 5LL;
  }
  if (!strncasecmp(a1, "sha384", 7uLL)) {
    return 3LL;
  }
  if (!strncasecmp(a1, "sha512", 7uLL)) {
    return 4LL;
  }
  return 0xFFFFFFFFLL;
}

char *parse_nx_mount_options(char *a1, int *a2)
{
  *MEMORY[0x1896173C8] = 1;
  if (!a1)
  {
    *(_OWORD *)a2 = 0u;
    *((_OWORD *)a2 + 1) = 0u;
    a2[1] = -1;
    return 0LL;
  }

  int v12 = *a2;
  unsigned int v4 = *((unsigned __int16 *)a2 + 4);
  int v5 = (v4 >> 6) & 8 | v4 & 5 | (v4 >> 8) & 0x10;
  int v6 = v4 << 18;
  if ((v4 & 0x1000) != 0) {
    int v7 = 32;
  }
  else {
    int v7 = 64;
  }
  unsigned int v11 = v7 & (v6 >> 31) | v5;
  if (!getmntopts()) {
    return "";
  }
  *a2 = v12;
  *((_WORD *)a2 + 4) = a2[2] & 0xCDFA | v11 & 1 | v11 & 4 | (((v11 & 0x30) != 0) << 12) | (((v11 & 0x60) != 0) << 13) | (((v11 >> 3) & 1) << 9);
  if ((v11 & 2) != 0)
  {
    int v10 = getmntoptnum();
    a2[1] = v10;
    if (v10 == -1) {
      uint64_t v8 = "checkpoint";
    }
    else {
      uint64_t v8 = 0LL;
    }
  }

  else
  {
    uint64_t v8 = 0LL;
  }

  freemntopts();
  unint64_t result = check_bad_option((const char **)&nx_mopts, a1, v8);
  if (!result) {
    return 0LL;
  }
  return result;
}

char *check_bad_option(const char **a1, char *__s1, const char *a3)
{
  unsigned int v4 = __s1;
  int v6 = strdup(__s1);
  if (v6)
  {
    int v7 = v6;
    __lasts = 0LL;
    uint64_t v8 = strtok_r(v6, ",", &__lasts);
    if (v8)
    {
      uint64_t v9 = v8;
      while (1)
      {
        int v10 = strncmp(v9, "no", 2uLL);
        unsigned int v11 = &v9[2 * (v10 == 0)];
        int v12 = strchr(v11, 61);
        if (v12) {
          char *v12 = 0;
        }
        int v13 = *a1;
        if (!*a1) {
          break;
        }
        unint64_t v14 = a1 + 3;
        while (strcasecmp(v13, v11))
        {
          uint64_t v15 = *v14;
          v14 += 3;
          int v13 = v15;
          if (!v15) {
            goto LABEL_15;
          }
        }

        if (a3 && !strcasecmp(v11, a3)) {
          break;
        }
        uint64_t v9 = strtok_r(0LL, ",", &__lasts);
        if (!v9) {
          goto LABEL_14;
        }
      }

LABEL_15:
      uint64_t v16 = -2LL;
      if (v10) {
        uint64_t v16 = 0LL;
      }
      unsigned int v4 = (char *)&v11[(void)v4 + v16 - (void)v7];
    }

    else
    {
LABEL_14:
      unsigned int v4 = 0LL;
    }

    free(v7);
  }

  return v4;
}

  if (v12) {
    obj_release(v12);
  }
  return v4;
}

uint64_t btree_entry_max_size(char a1, __int16 a2, int a3, int a4)
{
  if (a3 && a4)
  {
    __int16 v4 = (a3 + 7) & 0xFFF8;
    if ((a1 & 0x40) != 0) {
      __int16 v4 = a3;
    }
    __int16 v5 = (a4 + 7) & 0xFFF8;
    if ((a1 & 0x40) != 0) {
      __int16 v5 = a4;
    }
    return (unsigned __int16)(v5 + v4);
  }

  else
  {
    unsigned __int16 v6 = a2 - 160;
    if (a4)
    {
      unsigned __int16 v7 = (v6 >> 2) - 72;
      if ((a1 & 0x40) == 0) {
        unsigned __int16 v7 = (v7 + 7) & 0xFFF8;
      }
      __int16 v8 = (a4 + 7) & 0xFFF8;
      if ((a1 & 0x40) != 0) {
        __int16 v8 = a4;
      }
      return (unsigned __int16)(v7 + v8);
    }
  }

  return v6;
}

uint64_t btree_entry_size_check(uint64_t a1, unsigned int a2, unsigned int a3)
{
  unint64_t v4 = *(void *)(a1 + 400);
  unsigned int v5 = (v4 >> 9) & 0x3FFF;
  if (v5) {
    BOOL v6 = v5 == a2;
  }
  else {
    BOOL v6 = 1;
  }
  if (!v6) {
    return 22LL;
  }
  BOOL v8 = !(unsigned __int16)(v4 >> 23) || (unsigned __int16)(v4 >> 23) == a3;
  if (!v8 && (a3 != 65534 && a3 || (v4 & 4) == 0)) {
    return 22LL;
  }
  uint64_t v9 = (v4 >> 27) & 0x1F000;
  if (a3 == 65534) {
    unsigned int v11 = 0;
  }
  else {
    unsigned int v11 = a3;
  }
  unsigned int v12 = btree_entry_max_size(v4, v9, v5, (unsigned __int16)(v4 >> 23));
  unsigned int v13 = (a2 + 7) & 0xFFFFFFF8;
  if ((v4 & 0x40) != 0) {
    unsigned int v13 = a2;
  }
  unsigned int v14 = (v11 + 7) & 0xFFFFFFF8;
  if ((v4 & 0x40) != 0) {
    unsigned int v14 = v11;
  }
  if (v13 + v14 <= v12) {
    return 0LL;
  }
  else {
    return 34LL;
  }
}

uint64_t btree_node_sanity_check(void *a1, uint64_t a2)
{
  uint64_t v4 = a1[7];
  unsigned int v5 = obj_size_phys((uint64_t)a1);
  unsigned int v6 = v5;
  unsigned int v7 = *(unsigned __int16 *)(v4 + 32);
  if ((v7 & 4) != 0) {
    unsigned int v8 = 4;
  }
  else {
    unsigned int v8 = 8;
  }
  if (a2)
  {
    unint64_t v9 = *(void *)(a2 + 8);
    uint64_t v10 = (v9 >> 27) & 0x1F000;
    BOOL v11 = v5 != (_DWORD)v10;
    int v12 = *(unsigned __int16 *)(a2 + 6);
    if (v12 == 61455)
    {
      unsigned __int8 v13 = v5 != (_DWORD)v10;
    }

    else
    {
      if (v5 == (_DWORD)v10) {
        char v15 = 1;
      }
      else {
        char v15 = 2;
      }
      else {
        unsigned __int8 v13 = v15;
      }
    }

    else {
      unsigned __int8 v14 = v13 + 1;
    }
  }

  else
  {
    unsigned __int8 v14 = 0;
  }

  if (v5 % *(_DWORD *)(*(void *)(*(void *)(*a1 + 392LL) + 376LL) + 36LL)) {
    unsigned __int8 v16 = v14 + 1;
  }
  else {
    unsigned __int8 v16 = v14;
  }
  int v17 = obj_type((uint64_t)a1);
  unsigned int v18 = *(unsigned __int16 *)(v4 + 32);
  if (v17 != 2)
  {
    if ((v18 & 0x10) == 0 && *(_WORD *)(v4 + 24) != 3) {
      ++v16;
    }
    if ((v18 & 1) != 0) {
      unsigned __int8 v19 = v16 + 1;
    }
    else {
      unsigned __int8 v19 = v16;
    }
    if ((v18 & 2) == 0) {
      goto LABEL_38;
    }
LABEL_36:
    if (*(_WORD *)(v4 + 34)) {
      ++v19;
    }
    goto LABEL_38;
  }

  if ((v18 & 0x10) == 0 && *(_WORD *)(v4 + 24) != 2) {
    ++v16;
  }
  if ((v18 & 1) == 0)
  {
    unsigned __int8 v19 = v16 + 1;
    if ((v18 & 2) == 0) {
      goto LABEL_38;
    }
    goto LABEL_36;
  }

  uint64_t v38 = v4 + v6;
  unsigned int v39 = *(_DWORD *)(v38 - 40);
  if (v6 <= 0x10000 && *(_DWORD *)(v38 - 36) == v6) {
    unsigned __int8 v41 = v16;
  }
  else {
    unsigned __int8 v41 = v16 + 1;
  }
  uint64_t v43 = *(unsigned int *)(v38 - 32);
  unint64_t v42 = *(unsigned int *)(v38 - 28);
  else {
    unsigned __int8 v44 = v41 + 1;
  }
  if (((v39 >> 7) & 1) == ((v18 >> 3) & 1)) {
    unsigned __int8 v45 = v44;
  }
  else {
    unsigned __int8 v45 = v44 + 1;
  }
  if (((v39 >> 8) & 1) == ((v18 >> 4) & 1)) {
    unsigned __int8 v19 = v45;
  }
  else {
    unsigned __int8 v19 = v45 + 1;
  }
  if ((v18 & 2) != 0) {
    goto LABEL_36;
  }
LABEL_38:
  if ((v18 & 1) != 0) {
    __int16 v20 = -96;
  }
  else {
    __int16 v20 = -56;
  }
  unsigned __int16 v21 = v20 + v6;
  if (*(_WORD *)(v4 + 40)) {
    ++v19;
  }
  unsigned int v22 = *(unsigned __int16 *)(v4 + 42);
  if (v21 < v22) {
    ++v19;
  }
  if (((v8 - 1) & v22) != 0) {
    ++v19;
  }
  if ((v7 & 4) != 0) {
    char v23 = 2;
  }
  else {
    char v23 = 3;
  }
  if (*(_DWORD *)(v4 + 36) > v22 >> v23) {
    ++v19;
  }
  unsigned int v24 = *(unsigned __int16 *)(v4 + 44);
  unsigned int v25 = (unsigned __int16)(v21 - v22);
  BOOL v26 = v25 >= v24;
  int v27 = v25 - v24;
  if (!v26) {
    ++v19;
  }
  else {
    int v28 = 255;
  }
  if (v28 == v19) {
    return 0LL;
  }
  uint64_t v30 = *(void *)(*a1 + 392LL);
  if (v30)
  {
    BOOL is_panic_on_corruption_enabled = nx_is_panic_on_corruption_enabled(v30);
    obj_type((uint64_t)a1);
    obj_subtype((uint64_t)a1);
    obj_oid((uint64_t)a1);
    log_corrupt( is_panic_on_corruption_enabled,  "%s:%d: %s BT node sanity check failed for node type %u subtype %u oid %llu with mask 0x%x!\n",  v32,  v33,  v34,  v35,  v36,  v37,  (char)"btree_node_sanity_check");
    uint64_t v30 = *(void *)(*a1 + 392LL);
  }

  return nx_corruption_detected_int(v30);
}

uint64_t btree_node_init_phys(uint64_t a1, unsigned int a2, uint64_t a3)
{
  if (!a3) {
    return 22LL;
  }
  __int16 v3 = *(_WORD *)(a3 + 4);
  __int16 v4 = v3 & 0x1B;
  *(_WORD *)(a1 + 32) = v4;
  *(_WORD *)(a1 + 34) = *(_WORD *)(a3 + 6);
  unint64_t v5 = *(void *)(a3 + 8);
  if (((v5 >> 27) & 0x1F000) != a2) {
    return 22LL;
  }
  unint64_t v6 = a2 - 56LL;
  unsigned int v7 = (v5 >> 9) & 0x3FFF;
  uint64_t v8 = (HIWORD(v5) & 0x7F) + 8;
  int v9 = (unsigned __int16)(v5 >> 23);
  if ((v3 & 2) != 0) {
    int v10 = v9;
  }
  else {
    int v10 = v8;
  }
  LOWORD(v11) = 64;
  if (v7 && v10)
  {
    v4 |= 4u;
    *(_WORD *)(a1 + 32) = v4;
    int v11 = (4 * (v6 / (v7 + v10 + 4))) & 0xFFFFFFF8;
  }

  uint64_t v12 = 0LL;
  if ((v4 & 1) != 0) {
    LOWORD(v6) = a2 - 96;
  }
  *(_WORD *)(a1 + 40) = 0;
  *(_WORD *)(a1 + 42) = v11;
  *(_WORD *)(a1 + 44) = 0;
  *(_WORD *)(a1 + 46) = v6 - v11;
  *(void *)(a1 + 48) = 0xFFFF0000FFFFLL;
  if ((v4 & 1) != 0)
  {
    uint64_t v12 = 0LL;
    unsigned __int8 v13 = (_DWORD *)(a1 + (unsigned __int16)(a2 - 96));
    v13[14] = *(_DWORD *)(a3 + 8) & 0x1FF;
    v13[15] = a2;
    v13[16] = (*(_DWORD *)(a3 + 8) >> 9) & 0x3FFF;
    v13[17] = (unsigned __int16)(*(void *)(a3 + 8) >> 23);
  }

  return v12;
}

uint64_t btree_node_obj_init(uint64_t a1, uint64_t a2)
{
  return btree_node_init_ext(a1, a2, 1);
}

uint64_t btree_node_reap(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  __int16 v5 = *(_WORD *)(a1[7] + 32);
  if ((v5 & 8) != 0) {
    return 45LL;
  }
  uint64_t v8 = a1[1];
  if (v8)
  {
    int v9 = obj_modify((void *)a1[1], 0, a5);
    if (v9)
    {
      int v10 = v9;
      uint64_t v11 = a1[1];
      if (v11) {
        uint64_t v12 = (const char *)(v11 + 3992);
      }
      else {
        uint64_t v12 = (const char *)(*(void *)(*(void *)(*a1 + 392) + 384LL) + 208LL);
      }
      uint64_t v15 = obj_oid(v8);
      log_err("%s:%d: %s obj_modify(fs %lld) failed: %d\n", "btree_node_reap", 399, v12, v15, v10);
    }

    if ((*(_WORD *)(a1[7] + 32) & 2) != 0) {
      goto LABEL_25;
    }
    uint64_t v14 = obj_oid(v8);
    goto LABEL_13;
  }

  if ((v5 & 2) == 0)
  {
    uint64_t v14 = 0LL;
LABEL_13:
    int v16 = obj_type_and_flags((uint64_t)a1);
    if (((*(_WORD *)(a1[7] + 36) - 1) & 0x8000) == 0)
    {
      unsigned int v17 = v16 & 0xFFFF0000 | 3;
      int v18 = (unsigned __int16)(*(_WORD *)(a1[7] + 36) - 1);
      do
      {
        unint64_t v24 = 0LL;
        if (btree_node_child_id((uint64_t)a1, (unsigned __int16)v18, &v24))
        {
          obj_oid((uint64_t)a1);
          log_err("%s:%d: %s error getting oid for child %d of 0x%llx: %d\n");
        }

        else
        {
          uint64_t v19 = *a1;
          if (*(unsigned __int16 *)(a1[7] + 34) < 2u)
          {
            int v23 = obj_size_phys((uint64_t)a1);
          }

          else
          {
            uint64_t v20 = *(void *)(v19 + 392);
            int v21 = obj_size_phys((uint64_t)a1);
          }
        }
      }

      while (v18-- > 0);
    }
  }

uint64_t btree_node_get(void *a1, void *a2, uint64_t a3, int a4, __int16 a5, uint64_t a6, uint64_t *a7)
{
  v31[1] = *MEMORY[0x1895F89C0];
  unint64_t v14 = a1[50];
  if ((v14 & 0x40000000000000LL) != 0) {
    size_t v15 = 96LL;
  }
  else {
    size_t v15 = (HIWORD(v14) & 0x7F) + 32;
  }
  MEMORY[0x1895F8858]();
  unsigned int v17 = (char *)&v31[-2] - v16;
  bzero((char *)&v31[-2] - v16, v15);
  v31[0] = 0LL;
  __int128 v30 = btree_node_desc;
  int v18 = obj_flags((uint64_t)a1) & 0xFC00;
  *(_WORD *)unsigned int v17 = 25987;
  *((_WORD *)v17 + 1) = v15;
  *(_OWORD *)(v17 + 8) = *((_OWORD *)a1 + 25);
  *((void *)v17 + 3) = a1[52];
  unint64_t v19 = a1[50];
  if ((v19 & 0x80) != 0)
  {
    if ((v19 & 0x40000000000000LL) != 0) {
      size_t v20 = 64LL;
    }
    else {
      size_t v20 = HIWORD(v19) & 0x7F;
    }
    memcpy(v17 + 32, a2 + 1, v20);
  }

  *((_WORD *)v17 + 2) = 0;
  *((_WORD *)v17 + 3) = a5;
  DWORD2(v30) = obj_size_phys((uint64_t)a1);
  int v21 = obj_type_and_flags((uint64_t)a1);
  LODWORD(v30) = v21 & 0xFFFF0000 | 3;
  DWORD1(v30) = obj_subtype((uint64_t)a1);
  if ((v21 & 0x40000000) != 0) {
    int v22 = 3;
  }
  else {
    int v22 = 1;
  }
  if ((a4 & 0x40) != 0) {
    int v23 = 0LL;
  }
  else {
    int v23 = &v30;
  }
  uint64_t v24 = obj_get( *a1,  v18 | (a4 << 31 >> 31) & v22 | (2 * (a4 & 2)) | (8 * a4) & 0x20 | a4 & 0x180 | v21 & 0xFFFF0000,  *a2,  v23,  v17,  a1[1],  a3,  a6,  v31);
  if ((_DWORD)v24)
  {
    uint64_t v25 = v24;
    uint64_t v26 = 0LL;
  }

  else
  {
    uint64_t v26 = v31[0];
    if ((a4 & 0x104) == 4 && (*(_BYTE *)(v31[0] + 16) & 0x10) != 0)
    {
      if ((a4 & 1) != 0) {
        char v27 = 2;
      }
      else {
        char v27 = 1;
      }
      if ((a4 & 2) != 0) {
        char v28 = v27;
      }
      else {
        char v28 = 0;
      }
      btree_node_release(v31[0], v28);
      uint64_t v26 = 0LL;
      uint64_t v25 = 2LL;
    }

    else
    {
      uint64_t v25 = 0LL;
    }
  }

  *a7 = v26;
  return v25;
}

uint64_t btree_node_release(uint64_t a1, char a2)
{
  int v3 = a2 & 3;
  if (v3) {
    obj_unlock(a1, v3);
  }
  return obj_release(a1);
}

uint64_t btree_node_toc_entry_size(uint64_t a1)
{
  if ((*(_WORD *)(*(void *)(a1 + 56) + 32LL) & 4) != 0) {
    return 4LL;
  }
  else {
    return 8LL;
  }
}

uint64_t btree_node_toc_required_capacity(uint64_t a1, int a2)
{
  uint64_t v2 = *(_WORD **)(a1 + 56);
  __int16 v3 = v2[16];
  if ((v3 & 4) != 0)
  {
    unint64_t v5 = *(void *)(a1 + 400);
    if ((v5 & 4) != 0)
    {
      if ((v3 & 2) != 0) {
        unint64_t v9 = v5 >> 23;
      }
      else {
        LODWORD(v9) = (HIWORD(v5) & 0x7F) + 8;
      }
      unint64_t v10 = (((v5 >> 27) & 0x1F000) - 56) / (((v5 >> 9) & 0x3FFF) + (unsigned __int16)v9 + 4);
      unsigned __int16 v11 = v2[18] + a2;
      if ((v10 & 0xFFFE) >= v11) {
        LOWORD(v4) = v10 & 0xFFFE;
      }
      else {
        LOWORD(v4) = (v11 + 7) & 0xFFF8;
      }
    }

    else
    {
      unsigned int v6 = (unsigned __int16)v2[21];
      BOOL v7 = (v3 & 4) == 0;
      char v8 = 2;
      if (v7) {
        char v8 = 3;
      }
      return (unsigned __int16)(v6 >> v8);
    }
  }

  else
  {
    unsigned int v4 = (a2 + *((_DWORD *)v2 + 9) + 7) & 0xFFFFFFF8;
    if (!v4) {
      LOWORD(v4) = 8;
    }
  }

  return (unsigned __int16)v4;
}

uint64_t btree_node_key_off(uint64_t a1, unsigned int a2)
{
  uint64_t v2 = *(void *)(a1 + 376);
  __int16 v3 = (unsigned __int16 *)(v2 + 4LL * a2);
  unsigned int v4 = (unsigned __int16 *)(v2 + 8LL * a2);
  if ((*(_WORD *)(*(void *)(a1 + 56) + 32LL) & 4) != 0) {
    unint64_t v5 = v3;
  }
  else {
    unint64_t v5 = v4;
  }
  return *v5;
}

uint64_t btree_node_key_len(uint64_t a1, unsigned int a2)
{
  if ((*(_WORD *)(*(void *)(a1 + 56) + 32LL) & 4) != 0) {
    return (*(_DWORD *)(a1 + 400) >> 9) & 0x3FFF;
  }
  else {
    return *(unsigned __int16 *)(*(void *)(a1 + 376) + 8LL * a2 + 2);
  }
}

uint64_t btree_node_val_off(uint64_t a1, unsigned int a2)
{
  uint64_t v2 = *(void *)(a1 + 376);
  uint64_t v3 = v2 + 4LL * a2 + 2;
  uint64_t v4 = v2 + 8LL * a2 + 4;
  if ((*(_WORD *)(*(void *)(a1 + 56) + 32LL) & 4) != 0) {
    unint64_t v5 = (unsigned __int16 *)v3;
  }
  else {
    unint64_t v5 = (unsigned __int16 *)v4;
  }
  return *v5;
}

uint64_t btree_node_val_len(uint64_t a1, unsigned int a2)
{
  __int16 v2 = *(_WORD *)(*(void *)(a1 + 56) + 32LL);
  uint64_t v3 = *(void *)(a1 + 376);
  if ((v2 & 4) != 0)
  {
    uint64_t v4 = (unsigned __int16 *)(v3 + 4LL * a2 + 2);
    uint64_t v5 = *(void *)(a1 + 400) >> 23;
  }

  else
  {
    uint64_t v5 = v3 + 8LL * a2;
    uint64_t v4 = (unsigned __int16 *)(v5 + 4);
    LOWORD(v5) = *(_WORD *)(v5 + 6);
  }

  int v6 = *v4;
  if (v6 == 0xFFFF)
  {
    LOWORD(v5) = 0;
  }

  else if (v6 == 65534)
  {
    LOWORD(v5) = -2;
  }

  else if ((v2 & 2) == 0)
  {
    LOWORD(v5) = (*(_WORD *)(a1 + 406) & 0x7F) + 8;
  }

  return (unsigned __int16)v5;
}

uint64_t btree_node_key_ptr(uint64_t a1, unsigned int a2, void *a3, _WORD *a4)
{
  if (!a1) {
    return 22LL;
  }
  uint64_t v5 = *(void *)(a1 + 56);
  if (*(_DWORD *)(v5 + 36) <= a2) {
    return 22LL;
  }
  __int16 v8 = *(_WORD *)(v5 + 32);
  uint64_t v9 = *(void *)(a1 + 376);
  unint64_t v10 = (unsigned __int16 *)(v9 + 4LL * a2);
  if ((v8 & 4) == 0) {
    unint64_t v10 = (unsigned __int16 *)(v9 + 8LL * a2);
  }
  uint64_t v11 = *v10;
  if ((v8 & 4) != 0) {
    int v12 = (*(_DWORD *)(a1 + 400) >> 9) & 0x3FFF;
  }
  else {
    int v12 = *(unsigned __int16 *)(v9 + 8LL * a2 + 2);
  }
  uint64_t result = btree_node_key_range_validate(a1, *v10, v12);
  if (!(_DWORD)result)
  {
    *a3 = *(void *)(a1 + 384) + v11;
    uint64_t result = 0LL;
    if (a4) {
      *a4 = v12;
    }
  }

  return result;
}

uint64_t btree_node_key_range_validate(uint64_t a1, unsigned int a2, int a3)
{
  unsigned int v3 = *(unsigned __int16 *)(*(void *)(a1 + 56) + 44LL);
  BOOL v4 = v3 >= a2;
  int v5 = v3 - a2;
  if (v5 == 0 || !v4) {
    return nx_corruption_detected_int(*(void *)(*(void *)a1 + 392LL));
  }
  int v6 = (a3 + 7) & 0x1FFF8;
  if ((*(_BYTE *)(a1 + 400) & 0x40) != 0) {
    int v6 = a3;
  }
  if (v6 <= v5) {
    return 0LL;
  }
  else {
    return nx_corruption_detected_int(*(void *)(*(void *)a1 + 392LL));
  }
}

uint64_t btree_node_val_ptr(void *a1, unsigned int a2, void *a3, __int16 *a4)
{
  uint64_t v4 = a1[7];
  uint64_t v8 = a1[47];
  uint64_t v9 = v8 + 4LL * a2 + 2;
  uint64_t v10 = v8 + 8LL * a2 + 4;
  if ((*(_WORD *)(v4 + 32) & 4) != 0) {
    uint64_t v11 = (unsigned __int16 *)v9;
  }
  else {
    uint64_t v11 = (unsigned __int16 *)v10;
  }
  uint64_t v12 = *v11;
  unsigned int v13 = btree_node_val_len((uint64_t)a1, a2);
  __int16 v14 = v13;
  uint64_t result = btree_node_val_range_validate((uint64_t)a1, v12, v13);
  if (!(_DWORD)result)
  {
    if (v12 >= 0xFFFE)
    {
      *a3 = 0LL;
      if (!a4) {
        return 0LL;
      }
      if ((_DWORD)v12 == 0xFFFF) {
        __int16 v14 = 0;
      }
      else {
        __int16 v14 = -2;
      }
    }

    else
    {
      *a3 = a1[49] - v12;
      if (!a4) {
        return 0LL;
      }
    }

    uint64_t result = 0LL;
    *a4 = v14;
  }

  return result;
}

uint64_t btree_node_val_range_validate(uint64_t a1, unsigned int a2, unsigned int a3)
{
  if (a2 >= 0xFFFE)
  {
    if ((*(_BYTE *)(a1 + 400) & 4) == 0 || a3 && a3 != 65534) {
      return nx_corruption_detected_int(*(void *)(*(void *)a1 + 392LL));
    }
  }

  else
  {
    if (!a3 || a3 == 65534) {
      return nx_corruption_detected_int(*(void *)(*(void *)a1 + 392LL));
    }
    __int16 v6 = obj_size_phys(a1);
    uint64_t v7 = *(void *)(a1 + 56);
    __int16 v8 = (*(_BYTE *)(v7 + 32) & 1) != 0 ? -96 : -56;
    unsigned int v9 = (a3 + 7) & 0x1FFF8;
    if ((*(_BYTE *)(a1 + 400) & 0x40) != 0) {
      unsigned int v9 = a3;
    }
    if (v9 > a2) {
      return nx_corruption_detected_int(*(void *)(*(void *)a1 + 392LL));
    }
  }

  return 0LL;
}

uint64_t btree_node_child_val(uint64_t a1, unsigned int a2, void *a3)
{
  if ((*(_WORD *)(*(void *)(a1 + 56) + 32LL) & 2) != 0) {
    return 22LL;
  }
  unsigned int v9 = 0LL;
  unsigned __int16 v8 = 0;
  uint64_t result = btree_node_val_ptr((void *)a1, a2, &v9, (__int16 *)&v8);
  if ((_DWORD)result) {
    return result;
  }
  if ((*(_WORD *)(a1 + 406) & 0x7F) + 8LL == v8)
  {
    uint64_t result = 0LL;
    if (!a3) {
      return result;
    }
  }

  else
  {
    uint64_t result = nx_corruption_detected_int(*(void *)(*(void *)a1 + 392LL));
    if (!a3) {
      return result;
    }
  }

  if (!(_DWORD)result)
  {
    __int16 v6 = v9;
    uint64_t v7 = *v9;
    *a3 = *v9;
    if ((*(_BYTE *)(*(void *)(a1 + 56) + 32LL) & 8) != 0)
    {
      *a3 = *(void *)(a1 + 408) + v7;
      memcpy(a3 + 1, v6 + 1, v8 - 8LL);
    }

    return 0LL;
  }

  return result;
}

uint64_t btree_node_child_id(uint64_t a1, unsigned int a2, void *a3)
{
  v10[1] = *MEMORY[0x1895F89C0];
  MEMORY[0x1895F8858]();
  uint64_t v7 = (void *)((char *)v10 - v6);
  bzero((char *)v10 - v6, v8);
  uint64_t result = btree_node_child_val(a1, a2, v7);
  if (!(_DWORD)result) {
    *a3 = *v7;
  }
  return result;
}

uint64_t bt_insert( void *a1, uint64_t a2, unint64_t *a3, int a4, void *a5, unsigned int a6, uint64_t a7)
{
  LODWORD(v10) = a4;
  uint64_t v238 = *MEMORY[0x1895F89C0];
  unint64_t v14 = a1[50];
  MEMORY[0x1895F8858]();
  uint64_t v16 = (BOOL **)((char *)&v202 - v15);
  bzero((char *)&v202 - v15, v17);
  __int128 v236 = 0u;
  __int128 v237 = 0u;
  __int128 v235 = 0u;
  v233 = 0LL;
  v234 = 0LL;
  v232 = 0LL;
  int v231 = 0;
  uint64_t v227 = 0LL;
  if (!a1[52]) {
    return 22LL;
  }
  uint64_t v225 = a2;
  unsigned __int16 v229 = v10;
  if (a6 == 65534) {
    unsigned __int16 v18 = 0;
  }
  else {
    unsigned __int16 v18 = a6;
  }
  unsigned __int16 v228 = v18;
  uint64_t v19 = btree_entry_size_check((uint64_t)a1, v10, a6);
  if ((_DWORD)v19)
  {
    uint64_t v20 = v19;
    uint64_t v21 = a1[1];
    if (v21)
    {
      int v22 = (const char *)(v21 + 3992);
      if ((v14 & 0x40) != 0) {
        int v23 = v10;
      }
      else {
        int v23 = (v10 + 7) & 0xFFFFFFF8;
      }
      if ((v14 & 0x40) != 0) {
        int v24 = v18;
      }
      else {
        int v24 = (v18 + 7) & 0x1FFF8;
      }
      char v25 = v14;
      uint64_t v26 = (v14 >> 27) & 0x1F000;
      int v27 = (unsigned __int16)(v14 >> 23);
      unsigned int v28 = (v14 >> 9) & 0x3FFF;
      if (v28) {
        unsigned int v29 = (v14 >> 9) & 0x3FFF;
      }
      else {
        unsigned int v29 = ((unsigned __int16)((v26 - 160) & 0xFFE0) >> 2) - 72;
      }
    }

    else
    {
      int v22 = (const char *)(*(void *)(*(void *)(*a1 + 392LL) + 384LL) + 208LL);
      if ((v14 & 0x40) != 0) {
        int v23 = v10;
      }
      else {
        int v23 = (v10 + 7) & 0xFFFFFFF8;
      }
      if ((v14 & 0x40) != 0) {
        int v24 = v18;
      }
      else {
        int v24 = (v18 + 7) & 0x1FFF8;
      }
      char v25 = v14;
      uint64_t v26 = (v14 >> 27) & 0x1F000;
      int v27 = (unsigned __int16)(v14 >> 23);
      unsigned int v28 = (v14 >> 9) & 0x3FFF;
      if (v28) {
        unsigned int v29 = (v14 >> 9) & 0x3FFF;
      }
      else {
        unsigned int v29 = ((unsigned __int16)((v26 - 160) & 0xFFE0) >> 2) - 72;
      }
    }

    int v31 = btree_entry_max_size(v25, v26, v28, v27);
    log_err( "%s:%d: %s request to insert entry %d (%d) %d (%d) = (%d), max size is %d key %d, error %d\n",  "bt_insert",  3389,  v22,  v10,  v23,  v18,  v24,  v23 + v24,  v31,  v29,  v20);
    return v20;
  }

  obj_lock((uint64_t)a1, 2);
  uint64_t v30 = obj_modify(a1, (*((_DWORD *)a1 + 100) >> 3) & 2, a7);
  if ((_DWORD)v30)
  {
    uint64_t v20 = v30;
    obj_unlock((uint64_t)a1, 2);
    return v20;
  }

  unsigned __int16 v230 = 0;
  *(void *)&__int128 v235 = a1;
  obj_retain((char *)a1);
  uint64_t v33 = a1[49];
  int v34 = *(_DWORD *)(v33 + 16);
  unsigned int v35 = (unsigned __int16)v34;
  BOOL v36 = *(_DWORD *)(v33 + 20) >= v18;
  int v212 = v34;
  BOOL v222 = v36;
  uint64_t v37 = (uint64_t)a1;
  if (a1[54])
  {
    uint64_t v38 = (uint64_t (*)(uint64_t, unint64_t *, void))a1[53];
    uint64_t v37 = (uint64_t)a1;
    if (v38)
    {
      uint64_t v39 = a1[1];
      if (!v39) {
        uint64_t v39 = *(void *)(*a1 + 392LL);
      }
      int v40 = v38(v39, a3, (unsigned __int16)v10);
      uint64_t v37 = (uint64_t)a1;
      if (v40)
      {
        __int128 v236 = v235;
        *(void *)&__int128 v235 = 0LL;
        uint64_t v41 = a1[54];
        *uint64_t v16 = v41;
        if (v41 != obj_oid((uint64_t)a1)
          && !btree_node_get( a1,  v16,  v225,  (a7 != 0) | (((*(unsigned __int16 *)(a1[7] + 32LL) >> 3) & 1) << 6) | 6u,  61455,  a7,  (uint64_t *)&v235))
        {
          uint64_t v42 = v235;
          if ((*(_WORD *)(*(void *)(v235 + 56) + 32LL) & 2) != 0 && a1[54] == *(void *)(v235 + 112))
          {
            int v43 = bt_search_node_insert( v235,  a3,  (unsigned __int16)v10,  (_WORD *)&v235 + 4,  (BOOL *)((unint64_t)&v235 | 0xA));
            uint64_t v42 = v235;
            if (!v43)
            {
              if (WORD4(v235))
              {
                if (!(BYTE10(v235)
                     ? ((uint64_t (*)(void))btree_node_entry_update)(v235)
                     : ((uint64_t (*)(void))btree_node_insert_internal)(v235)))
                {
                  uint64_t v216 = 0LL;
                  int v47 = 0LL;
                  uint64_t v20 = 0LL;
                  int v217 = 0;
                  BOOL v223 = 0;
                  goto LABEL_340;
                }
              }
            }
          }

          obj_unlock(v42, 2);
          obj_release(v42);
        }

        __int128 v235 = v236;
        *(void *)&__int128 v236 = 0LL;
        uint64_t v37 = v235;
      }
    }
  }

  unsigned __int8 v45 = (BOOL *)((unint64_t)&v235 | 0xA);
  if ((*(_WORD *)(*(void *)(v37 + 56) + 32LL) & 2) != 0) {
    uint64_t v46 = bt_search_node_insert(v37, a3, (unsigned __int16)v10, (_WORD *)&v235 + 4, v45);
  }
  else {
    uint64_t v46 = bt_search_node(v37, a3, (unsigned __int16)v10, (_WORD *)&v235 + 4, v45);
  }
  uint64_t v20 = v46;
  if ((_DWORD)v46) {
    goto LABEL_55;
  }
  v220 = (BOOL *)((unint64_t)&v235 | 0xA);
  v221 = (unsigned __int16 *)&v235 + 4;
  uint64_t v48 = *(void *)(v235 + 56);
  unsigned int v49 = *(_DWORD *)(v48 + 36);
  __int16 v50 = *(_WORD *)(v48 + 32);
  BOOL v51 = (__PAIR64__(v49, v50 & 2) - 1) >> 32 == WORD4(v235);
  int v52 = WORD4(v235) | BYTE10(v235) | v50 & 2;
  if (v52)
  {
    int v47 = 0LL;
    if ((v50 & 2) == 0)
    {
      uint64_t v53 = 0LL;
      goto LABEL_60;
    }

    int v217 = 0;
    BOOL v223 = 0;
    uint64_t v216 = 0LL;
LABEL_294:
    uint64_t v135 = v237;
    if ((void)v237)
    {
      int v136 = v222;
      if ((void *)v237 != a1) {
        int v136 = 1;
      }
      if (v136 == 1 && (void *)v237 != v47 && (void)v237 != v216)
      {
        obj_unlock(v237, 2);
        obj_release(v135);
      }

      *(void *)&__int128 v237 = 0LL;
    }

    uint64_t v137 = v225;
    if (v51)
    {
      uint64_t v138 = a1[54];
      uint64_t v139 = *(void *)(v235 + 112);
      if (v138 != v139)
      {
        uint64_t v140 = a1[50];
        if (v138)
        {
          if ((v140 & 0x10) == 0) {
            panic("btree rightmost leaf mismatch! (expected %lld found %lld)\n", *(void *)(v235 + 112), v138);
          }
          panic("btree rightmost leaf field is set for physical tree!\n");
        }

        if ((v140 & 0x10) == 0) {
          a1[54] = v139;
        }
      }
    }

    size_t v10 = v229;
    if (BYTE10(v235)) {
      uint64_t inserted = btree_node_entry_update(v235, WORD4(v235), a3, v229, a5, (unsigned __int16)a6, a7);
    }
    else {
      uint64_t inserted = btree_node_insert_internal(v235, WORD4(v235), a3, v229, a5, (unsigned __int16)a6, a7);
    }
    uint64_t v20 = inserted;
    if ((_DWORD)inserted != 28) {
      goto LABEL_335;
    }
    uint64_t v142 = bt_shift_or_split( a1,  (void *)v236,  WORD4(v236),  (void *)v235,  WORD4(v235),  a3,  v10,  1LL,  (__int16 *)&v229,  (__int16 *)&v228,  0,  v137,  a7,  (uint64_t *)&v234);
    if ((_DWORD)v142)
    {
      uint64_t v20 = v142;
      uint64_t v143 = a1[1];
      if (v143) {
        uint64_t v144 = (const char *)(v143 + 3992);
      }
      else {
        uint64_t v144 = (const char *)(*(void *)(*(void *)(*a1 + 392LL) + 384LL) + 208LL);
      }
      log_err("%s:%d: %s bt_shift_or_split failed with error: %d\n", "bt_insert", 3875, v144, v142);
      goto LABEL_335;
    }

    CFStringRef v145 = v234;
    if (!v234)
    {
      CFStringRef v145 = (void *)v235;
      goto LABEL_330;
    }

    if ((void)v236)
    {
      ++WORD4(v236);
      uint64_t v146 = v235;
      int v147 = v222;
      if ((void *)v235 != a1) {
        int v147 = 1;
      }
      if ((void)v235 && v147 && (void *)v235 != v47 && (void)v235 != v216)
      {
        uint64_t v148 = (uint64_t)v234;
        obj_unlock(v235, 2);
        obj_release(v146);
        CFStringRef v145 = (void *)v148;
      }

      v234 = 0LL;
      *(void *)&__int128 v235 = v145;
LABEL_330:
      uint64_t v20 = btree_node_insert(v145, a3, v10, a5, (unsigned __int16)a6, a7, v221, v220);
      if (!(_DWORD)v20) {
        goto LABEL_335;
      }
      goto LABEL_331;
    }

    CFStringRef v169 = (_WORD *)&v236 + 4;
    uint64_t v170 = v235;
    *(void *)&__int128 v236 = v235;
    if (*(_DWORD *)(v234[7] + 36LL))
    {
      v224 = (char *)&v236 + 8;
      uint64_t v171 = (uint64_t)v234;
      uint64_t v172 = btree_node_key_ptr((uint64_t)v234, 0, &v232, &v230);
      if ((_DWORD)v172)
      {
        uint64_t v20 = v172;
        v234 = 0LL;
        *(void *)&__int128 v235 = v171;
        goto LABEL_331;
      }

      uint64_t v170 = v236;
      v190 = v232;
      uint64_t v191 = v230;
      CFStringRef v169 = v224;
    }

    else
    {
      uint64_t v171 = (uint64_t)v234;
      v190 = a3;
      uint64_t v191 = v10;
    }

    uint64_t v20 = bt_search_node(v170, v190, v191, v169, (BOOL *)&v236 + 10);
    CFStringRef v145 = (void *)v171;
    v234 = 0LL;
    *(void *)&__int128 v235 = v171;
    if (!(_DWORD)v20) {
      goto LABEL_330;
    }
LABEL_331:
    uint64_t v149 = a1[1];
    if (v149) {
      uint64_t v150 = (const char *)(v149 + 3992);
    }
    else {
      uint64_t v150 = (const char *)(*(void *)(*(void *)(*a1 + 392LL) + 384LL) + 208LL);
    }
    log_err("%s:%d: %s bt_shift_or_split failed with error: %d\n", "bt_insert", 3912, v150, v20);
LABEL_335:
    if (!(_DWORD)v20 && !WORD4(v235) && (void)v236)
    {
      uint64_t v151 = btree_node_key_ptr(v236, WORD4(v236), &v232, &v230);
      if ((_DWORD)v151)
      {
        uint64_t v20 = v151;
      }

      else
      {
        uint64_t v160 = a1[1];
        if (!v160) {
          uint64_t v160 = *(void *)(*a1 + 392LL);
        }
        uint64_t v20 = ((uint64_t (*)(uint64_t, unint64_t *, size_t, unint64_t *, void, int *))a1[52])( v160,  a3,  v10,  v232,  v230,  &v231);
        if (!(_DWORD)v20)
        {
          if (v231)
          {
            uint64_t v161 = btree_node_entry_update(v236, WORD4(v236), a3, v10, 0LL, 0, a7);
            uint64_t v20 = v161;
            if ((_DWORD)v161)
            {
              uint64_t v162 = a1[1];
              if (v162) {
                CFStringRef v163 = (const char *)(v162 + 3992);
              }
              else {
                CFStringRef v163 = (const char *)(*(void *)(*(void *)(*a1 + 392LL) + 384LL) + 208LL);
              }
              log_err("%s:%d: %s btree_node_key_update failed: %d\n", "bt_insert", 3926, v163, v161);
            }
          }
        }
      }
    }

LABEL_340:
    uint64_t v152 = v236;
    if ((void)v236)
    {
      int v153 = v222;
      if ((void *)v236 != a1) {
        int v153 = 1;
      }
      if (v153 == 1 && (void *)v236 != v47 && (void)v236 != v216)
      {
        obj_unlock(v236, 2);
        obj_release(v152);
      }

      *(void *)&__int128 v236 = 0LL;
    }

    uint64_t v154 = v235;
    if ((void)v235)
    {
      int v155 = v222;
      if ((void *)v235 != a1) {
        int v155 = 1;
      }
      if (v155 == 1 && (void *)v235 != v47 && (void)v235 != v216)
      {
        obj_unlock(v235, 2);
        obj_release(v154);
      }

      *(void *)&__int128 v235 = 0LL;
    }

    if ((_DWORD)v20) {
      goto LABEL_444;
    }
    uint64_t v156 = a1[49];
    unsigned int v157 = *(_DWORD *)(v156 + 16);
    BOOL v158 = v157 >= (unsigned __int16)v10;
    int v159 = v157 < (unsigned __int16)v10;
    if (!v158) {
      *(_DWORD *)(v156 + 16) = (unsigned __int16)v10;
    }
    if (*(_DWORD *)(v156 + 20) < v228)
    {
      *(_DWORD *)(v156 + 20) = v228;
      int v159 = 1;
    }

    if (BYTE10(v235))
    {
      if ((((a1[50] & 0x80) == 0) & ~v159) != 0) {
        goto LABEL_374;
      }
    }

    else
    {
      v164 = (unint64_t *)(v156 + 24);
      do
        unint64_t v165 = __ldxr(v164);
      while (__stxr(v165 + 1, v164));
    }

    obj_dirty((uint64_t)a1, a7, 0LL);
LABEL_374:
    if (!v223 || WORD4(v235) != 0)
    {
      uint64_t v20 = 0LL;
      goto LABEL_444;
    }

    if (v47)
    {
      uint64_t v166 = btree_node_entry_update((uint64_t)v47, (unsigned __int16)v217, a3, (unsigned __int16)v10, 0LL, 0, a7);
      uint64_t v20 = v166;
      if ((_DWORD)v166)
      {
        uint64_t v167 = a1[1];
        if (v167) {
          uint64_t v168 = (const char *)(v167 + 3992);
        }
        else {
          uint64_t v168 = (const char *)(*(void *)(*(void *)(*a1 + 392LL) + 384LL) + 208LL);
        }
        log_err("%s:%d: %s btree_node_key_update failed: %d\n", "bt_insert", 3966, v168, v166);
      }

      int v173 = v222;
      if (v47 != a1) {
        int v173 = 1;
      }
      if (v47 != (void *)v237 && v47 != (void *)v236 && v173)
      {
        obj_unlock((uint64_t)v47, 2);
        obj_release(v47);
      }
    }

    else
    {
      uint64_t v20 = 0LL;
    }

    uint64_t v174 = (uint64_t)v233;
    CFStringRef v175 = v233 + 7;
    if (*(unsigned __int16 *)(v233[7] + 34LL) < 2u)
    {
LABEL_437:
      int v194 = v222;
      if ((void *)v174 != a1) {
        int v194 = 1;
      }
      if (v174 != (void)v237 && v174 != (void)v236 && v194)
      {
        obj_unlock(v174, 2);
        obj_release(v174);
      }

      int v47 = 0LL;
      v233 = 0LL;
      goto LABEL_444;
    }

    size_t v176 = v229;
    while (1)
    {
      WORD2(v226) = 0;
      LOBYTE(v226) = 0;
      uint64_t v177 = bt_search_node(v174, a3, v176, (_WORD *)&v226 + 2, (BOOL *)&v226);
      if ((_DWORD)v177)
      {
        uint64_t v20 = v177;
        goto LABEL_55;
      }

      int v178 = v226;
      int v179 = WORD2(v226);
      if ((_BYTE)v226) {
        BOOL v180 = 0;
      }
      else {
        BOOL v180 = WORD2(v226) == 0;
      }
      if (!v180)
      {
        uint64_t v188 = a1[1];
        if (v188) {
          v189 = (const char *)(v188 + 3992);
        }
        else {
          v189 = (const char *)(*(void *)(*(void *)(*a1 + 392LL) + 384LL) + 208LL);
        }
        uint64_t v192 = obj_oid(v174);
        int v193 = obj_subtype(v174);
        log_err( "%s:%d: %s minkey update traversal unexpectedly found the key (%d) or a non-zero index (%d); oid %llu subtype 0x%x level %d\n",
          "bt_insert",
          3984,
          v189,
          v178,
          v179,
          v192,
          v193,
          *(unsigned __int16 *)(*v175 + 34LL));
LABEL_436:
        uint64_t v20 = 0LL;
        goto LABEL_437;
      }

      uint64_t v181 = btree_node_entry_update(v174, 0, a3, v176, 0LL, 0, a7);
      uint64_t v20 = v181;
      if ((_DWORD)v181)
      {
        uint64_t v182 = a1[1];
        if (v182) {
          v183 = (const char *)(v182 + 3992);
        }
        else {
          v183 = (const char *)(*(void *)(*(void *)(*a1 + 392LL) + 384LL) + 208LL);
        }
        log_err("%s:%d: %s btree_node_key_update failed: %d\n", "bt_insert", 3989, v183, v181);
      }

      int v184 = *(unsigned __int16 *)(*v175 + 34LL);
      if (v184 == 2) {
        goto LABEL_437;
      }
      uint64_t v20 = btree_node_child_val(v174, 0, v16);
      v233 = 0LL;
      if (!(_DWORD)v20) {
        uint64_t v20 = btree_node_get(a1, v16, v225, 3, (unsigned __int16)v184 - 1, a7, (uint64_t *)&v233);
      }
      int v185 = v222;
      if ((void *)v174 != a1) {
        int v185 = 1;
      }
      if (v174 != (void)v237 && v174 != (void)v236 && v185)
      {
        obj_unlock(v174, 2);
        obj_release(v174);
      }

      uint64_t v174 = (uint64_t)v233;
      if ((_DWORD)v20) {
        break;
      }
      CFStringRef v175 = v233 + 7;
    }

    if (v233) {
      goto LABEL_437;
    }
LABEL_55:
    int v47 = 0LL;
    goto LABEL_444;
  }

  v233 = (void *)v235;
  uint64_t v53 = v235;
LABEL_60:
  int v217 = 0;
  int v47 = 0LL;
  BOOL v223 = v52 == 0;
  v211 = &v237;
  v210 = &v236;
  v205 = (_WORD *)&v236 + 4;
  v203 = (_WORD *)&v237 + 4;
  v204 = (BOOL *)&v236 + 10;
  v202 = (BOOL *)&v237 + 10;
  v213 = (void *)v53;
  uint64_t v214 = v53;
  v215 = (void *)v53;
  v219 = (void *)v53;
  uint64_t v216 = v53;
  uint64_t v54 = v53;
  while (2)
  {
    uint64_t v55 = v237;
    int v56 = v222;
    if ((void *)v237 != a1) {
      int v56 = 1;
    }
    if ((void)v237) {
      BOOL v57 = v56 == 0;
    }
    else {
      BOOL v57 = 1;
    }
    BOOL v58 = v57 || (void)v237 == (void)v47;
    uint64_t v218 = v54;
    if (!v58 && (void)v237 != v54)
    {
      obj_unlock(v237, 2);
      obj_release(v55);
    }

    uint64_t v60 = v210;
    __int128 *v211 = *v210;
    *uint64_t v60 = v235;
    *(void *)&__int128 v235 = 0LL;
    uint64_t v61 = btree_node_child_val(v236, WORD4(v236), v16);
    if ((_DWORD)v61)
    {
LABEL_292:
      uint64_t v20 = v61;
      goto LABEL_444;
    }

    __int16 v62 = *(_WORD *)(*(void *)(v236 + 56) + 34LL) - 1;
    unsigned int v63 = a1;
    int v64 = v16;
    for (uint64_t i = v225; ; uint64_t i = v76)
    {
      uint64_t v61 = btree_node_get(v63, v64, i, 3, v62, a7, (uint64_t *)&v235);
      if ((_DWORD)v61) {
        goto LABEL_292;
      }
      uint64_t v66 = v235;
      if ((a1[50] & 0x10) != 0 && *(void *)(v235 + 112) != *v16)
      {
        btree_node_child_id_update(v236, WORD4(v236), (uint64_t *)(v235 + 112), a7);
        uint64_t v66 = v235;
      }

      if ((*(_WORD *)(*(void *)(v66 + 56) + 32LL) & 2) != 0) {
        uint64_t v67 = bt_search_node_insert(v66, a3, v229, v221, v220);
      }
      else {
        uint64_t v67 = bt_search_node(v66, a3, v229, v221, v220);
      }
      uint64_t v20 = v67;
      if ((_DWORD)v67) {
        goto LABEL_444;
      }
      uint64_t v68 = v235;
      if (!v51)
      {
        LODWORD(v224) = 0;
        uint64_t v70 = *(void *)(v235 + 56);
        int v69 = WORD4(v235);
        if ((*(_WORD *)(v70 + 32) & 2) == 0) {
          goto LABEL_119;
        }
        goto LABEL_93;
      }

      int v69 = WORD4(v235);
      uint64_t v70 = *(void *)(v235 + 56);
      unsigned int v71 = *(unsigned __int16 *)(v70 + 32);
      if (((v71 >> 1) & 1) + *(_DWORD *)(v70 + 36) - 1 == WORD4(v235)) {
        break;
      }
      LODWORD(v224) = 0;
      if ((v71 & 2) == 0) {
        goto LABEL_119;
      }
LABEL_93:
      if (*(_DWORD *)(v70 + 36) != v69
        || (__int16 v72 = WORD4(v236), v73 = v236, *(_DWORD *)(*(void *)(v236 + 56) + 36LL) - 1 <= WORD4(v236))
        || btree_node_has_room(v68, 1u, (__int16 *)&v229, (__int16 *)&v228, 0, 0, 0LL))
      {
        BOOL v79 = v69 != 0;
        if (v223 || v79 || BYTE10(v235)) {
          goto LABEL_122;
        }
LABEL_139:
        BOOL v223 = 0;
        goto LABEL_140;
      }

      uint64_t v61 = btree_node_child_val(v73, (unsigned __int16)(v72 + 1), v16);
      if ((_DWORD)v61) {
        goto LABEL_292;
      }
      uint64_t v74 = v235;
      obj_unlock(v235, 2);
      obj_release(v74);
      *(void *)&__int128 v235 = 0LL;
      int v75 = WORD4(v236);
      ++WORD4(v236);
      if (v223 && v75 == 0)
      {
        uint64_t v76 = v225;
        LOBYTE(v51) = (_BYTE)v224;
        if (v47)
        {
          int v77 = v222;
          if (v47 != a1) {
            int v77 = 1;
          }
          if (v47 != (void *)v237 && v47 != (void *)v236 && v77)
          {
            obj_unlock((uint64_t)v47, 2);
            obj_release(v47);
            v213 = v233;
            uint64_t v214 = (uint64_t)v233;
            v215 = v233;
            uint64_t v216 = (uint64_t)v233;
            v219 = v233;
          }
        }

        int v47 = v219;
        if (v219)
        {
          int v78 = v222;
          if (v219 != a1) {
            int v78 = 1;
          }
          if (v219 != (void *)v237 && v219 != (void *)v236 && v78)
          {
            obj_unlock((uint64_t)v219, 2);
            obj_release(v47);
          }

          uint64_t v216 = 0LL;
          v213 = 0LL;
          uint64_t v214 = 0LL;
          v215 = 0LL;
          uint64_t v218 = 0LL;
          v219 = 0LL;
          int v47 = 0LL;
          int v217 = 0;
          BOOL v223 = 0;
          v233 = 0LL;
        }

        else
        {
          uint64_t v218 = 0LL;
          v219 = 0LL;
          int v217 = 0;
          BOOL v223 = 0;
        }
      }

      else
      {
        uint64_t v76 = v225;
        LOBYTE(v51) = (_BYTE)v224;
      }

      __int16 v62 = *(_WORD *)(*(void *)(v236 + 56) + 34LL) - 1;
      unsigned int v63 = a1;
      int v64 = v16;
    }

    if (a1[54] == *(void *)(v236 + 112)) {
      a1[54] = *(void *)(v235 + 112);
    }
    LODWORD(v224) = 1;
    if ((v71 & 2) != 0) {
      goto LABEL_93;
    }
LABEL_119:
    BOOL v79 = v69 != 0;
    if (!v223 && !v79 && !BYTE10(v235))
    {
      int v47 = (void *)v236;
      BOOL v223 = 1;
      uint64_t v216 = v68;
      v213 = (void *)v68;
      int v217 = WORD4(v236);
      uint64_t v214 = v68;
      v215 = (void *)v68;
      v233 = (void *)v68;
      uint64_t v218 = v68;
      v219 = (void *)v68;
      goto LABEL_140;
    }

LABEL_122:
    if (!v223 || !v79) {
      goto LABEL_140;
    }
    if (v47)
    {
      int v80 = v222;
      if (v47 != a1) {
        int v80 = 1;
      }
      if (v47 != (void *)v237 && v47 != (void *)v236 && v80)
      {
        obj_unlock((uint64_t)v47, 2);
        obj_release(v47);
        v213 = v233;
        uint64_t v214 = (uint64_t)v233;
        uint64_t v216 = (uint64_t)v233;
        v215 = v233;
      }
    }

    uint64_t v81 = (uint64_t)v215;
    if (!v215)
    {
      v215 = 0LL;
      uint64_t v218 = 0LL;
      v219 = 0LL;
      int v47 = 0LL;
      int v217 = 0;
      goto LABEL_139;
    }

    int v82 = v222;
    if (v215 != a1) {
      int v82 = 1;
    }
    if (v215 != (void *)v237 && v215 != (void *)v236 && v82)
    {
      obj_unlock((uint64_t)v215, 2);
      obj_release(v81);
    }

    uint64_t v216 = 0LL;
    v213 = 0LL;
    uint64_t v214 = 0LL;
    v215 = 0LL;
    uint64_t v218 = 0LL;
    v219 = 0LL;
    int v47 = 0LL;
    int v217 = 0;
    BOOL v223 = 0;
    v233 = 0LL;
LABEL_140:
    unsigned int v83 = btree_node_largest_key_len(v235);
    int v84 = 0;
    if (WORD4(v235))
    {
      char v85 = 0;
    }

    else
    {
      char v85 = 0;
      if (!BYTE10(v235))
      {
        uint64_t v61 = btree_node_key_ptr(v236, WORD4(v236), &v232, &v230);
        if ((_DWORD)v61) {
          goto LABEL_292;
        }
        uint64_t v86 = a1[1];
        if (!v86) {
          uint64_t v86 = *(void *)(*a1 + 392LL);
        }
        unsigned int v87 = v229;
        uint64_t v61 = ((uint64_t (*)(uint64_t, unint64_t *, void, unint64_t *, void, int *))a1[52])( v86,  a3,  v229,  v232,  v230,  &v231);
        if ((_DWORD)v61) {
          goto LABEL_292;
        }
        if (v231 < 0)
        {
          uint64_t v88 = *(void *)(v235 + 400);
          if ((v88 & 0x40) != 0) {
            unsigned int v89 = v87;
          }
          else {
            unsigned int v89 = (v87 + 7) & 0x1FFF8;
          }
          if ((v88 & 0x40) != 0) {
            unsigned int v90 = v230;
          }
          else {
            unsigned int v90 = (v230 + 7) & 0x1FFF8;
          }
          if (v89 <= v90)
          {
            int v84 = 0;
          }

          else
          {
            if ((v88 & 0x40) != 0) {
              int v91 = v87;
            }
            else {
              int v91 = (v87 + 7) & 0x1FFF8;
            }
            if ((*(void *)(v235 + 400) & 0x40LL) != 0) {
              int v92 = v230;
            }
            else {
              int v92 = (v230 + 7) & 0x1FFF8;
            }
            int v84 = v91 - v92;
          }

          char v85 = 1;
        }

        else
        {
          int v84 = 0;
          char v85 = 0;
        }
      }
    }

    unsigned int v93 = *(unsigned __int16 *)(*(void *)(v236 + 56) + 34LL);
    if (v93 < 2)
    {
      WORD2(v227) = v83;
      unint64_t v95 = *(void *)(v236 + 400);
      LOWORD(v96) = (BYTE6(v95) & 0x7F) + 8;
      LOWORD(v227) = v96;
      if ((v85 & 1) == 0)
      {
        unsigned __int16 v94 = v229;
        goto LABEL_173;
      }

      goto LABEL_171;
    }

    unsigned __int16 v94 = v229;
    if (v83 > v229) {
      unsigned __int16 v94 = v83;
    }
    WORD2(v227) = v94;
    unint64_t v95 = *(void *)(v236 + 400);
    int v96 = (HIWORD(v95) & 0x7F) + 8;
    LOWORD(v227) = (BYTE6(v95) & 0x7F) + 8;
    if ((v85 & 1) != 0)
    {
LABEL_171:
      unsigned int v97 = 1;
      goto LABEL_174;
    }

LABEL_173:
    HIWORD(v227) = v94;
    WORD1(v227) = v96;
    unsigned int v97 = 2;
LABEL_174:
    unsigned int v209 = v84;
    v208 = (void *)v236;
    LODWORD(v206) = v97;
    LODWORD(v207) = (__int16)v84;
    if (btree_node_has_room(v236, v97, (__int16 *)&v227 + 2, (__int16 *)&v227, v84, 0, 0LL))
    {
LABEL_175:
      BOOL v51 = (int)v224;
      uint64_t v54 = v218;
      goto LABEL_176;
    }

    if (v93 < 2)
    {
      uint64_t v99 = v235;
      if (BYTE10(v235))
      {
        if ((*(_WORD *)(*(void *)(v235 + 56) + 32LL) & 4) != 0)
        {
          uint64_t v101 = *(void *)(v235 + 400);
          unsigned int v100 = (v101 >> 9) & 0x3FFF;
        }

        else
        {
          unsigned int v100 = *(unsigned __int16 *)(*(void *)(v235 + 376) + 8LL * WORD4(v235) + 2);
          uint64_t v101 = *(void *)(v235 + 400);
        }

        unsigned __int16 v230 = v100;
        unsigned int v105 = btree_node_val_len(v235, WORD4(v235));
        if (v105 == 65534) {
          unsigned int v106 = 0;
        }
        else {
          unsigned int v106 = v105;
        }
        unsigned int v107 = v229;
        if ((v101 & 0x40) == 0) {
          unsigned int v107 = (v229 + 7) & 0x1FFF8;
        }
        unsigned int v108 = (v100 + 7) & 0x1FFF8;
        if ((v101 & 0x40) != 0) {
          unsigned int v108 = v100;
        }
        unsigned int v109 = v228;
        if ((v101 & 0x40) == 0) {
          unsigned int v109 = (v228 + 7) & 0x1FFF8;
        }
        unsigned int v110 = (v106 + 7) & 0x1FFF8;
        if ((v101 & 0x40) != 0) {
          unsigned int v110 = v106;
        }
        __int16 v111 = v107 - v108;
        if (v107 < v108) {
          __int16 v111 = 0;
        }
        __int16 v112 = v109 - v110;
        if (v109 < v110) {
          __int16 v112 = 0;
        }
        uint64_t v103 = v225;
      }

      else
      {
        BOOL has_room = btree_node_has_room(v235, 1u, (__int16 *)&v229, (__int16 *)&v228, 0, 0, 0LL);
        uint64_t v103 = v225;
        if (!has_room) {
          goto LABEL_209;
        }
      }
    }

    else
    {
      uint64_t v226 = (unsigned __int16)((BYTE6(v95) & 0x7F) + 8);
      if ((v85 & 1) != 0)
      {
        unsigned int v98 = 1;
      }

      else
      {
        HIWORD(v226) = v212;
        WORD1(v226) = (BYTE6(v95) & 0x7F) + 8;
        unsigned int v98 = 2;
      }

      BOOL v102 = btree_node_has_room(v235, v98, (__int16 *)&v226 + 2, (__int16 *)&v226, v207, 0, 0LL);
      uint64_t v103 = v225;
      if (v102) {
        goto LABEL_175;
      }
    }

LABEL_209:
    unsigned __int16 v113 = WORD4(v236);
    if (!BYTE10(v236)) {
      unsigned __int16 v113 = WORD4(v236) + 1;
    }
    unsigned __int16 v201 = v209;
    unsigned int v209 = v229;
    uint64_t v114 = bt_shift_or_split( a1,  (void *)v237,  WORD4(v237),  v208,  v113,  a3,  v229,  v206,  (__int16 *)&v227 + 2,  (__int16 *)&v227,  v201,  v103,  a7,  (uint64_t *)&v234);
    if ((_DWORD)v114)
    {
      uint64_t v20 = v114;
      uint64_t v186 = a1[1];
      if (v186) {
        v187 = (const char *)(v186 + 3992);
      }
      else {
        v187 = (const char *)(*(void *)(*(void *)(*a1 + 392LL) + 384LL) + 208LL);
      }
      log_err("%s:%d: %s bt_shift_or_split failed with error: %d\n", "bt_insert", 3676, v187, v114);
      goto LABEL_444;
    }

    uint64_t v115 = (uint64_t)v234;
    BOOL v51 = (int)v224;
    uint64_t v54 = v218;
    if (!v234) {
      goto LABEL_176;
    }
    uint64_t v116 = v236;
    v208 = (void *)v236;
    if ((void)v237)
    {
      ++WORD4(v237);
      if ((void)v236)
      {
        int v117 = v222;
        if ((void *)v236 != a1) {
          int v117 = 1;
        }
        if (v117 == 1)
        {
          if (v47 == (void *)v236)
          {
            uint64_t v118 = v214;
          }

          else
          {
            uint64_t v118 = v214;
            if ((void)v236 != v214)
            {
              uint64_t v206 = (uint64_t)v234;
              uint64_t v119 = v214;
              obj_unlock(v236, 2);
              obj_release(v116);
              uint64_t v207 = 0LL;
              v215 = (void *)v119;
              uint64_t v218 = v119;
              v219 = (void *)v119;
              uint64_t v115 = v206;
              goto LABEL_230;
            }
          }

          v215 = (void *)v118;
          uint64_t v218 = v118;
          v219 = (void *)v118;
        }

        uint64_t v207 = v236;
LABEL_230:
        BOOL v123 = v47 != (void *)v237 || v47 == 0LL;
        int v124 = v217;
        if (!v123) {
          int v124 = WORD4(v237);
        }
        int v217 = v124;
        *(void *)&__int128 v236 = v115;
        v234 = 0LL;
        uint64_t v61 = bt_search_node(v115, a3, v209, v205, v204);
        if ((_DWORD)v61) {
          goto LABEL_292;
        }
        uint64_t v125 = v235;
        obj_unlock(v235, 2);
        obj_release(v125);
        *(void *)&__int128 v235 = 0LL;
        uint64_t v61 = btree_node_child_val(v236, WORD4(v236), v16);
        if ((_DWORD)v61) {
          goto LABEL_292;
        }
        uint64_t v61 = btree_node_get(a1, v16, v225, 3, *(_WORD *)(*(void *)(v236 + 56) + 34LL) - 1, a7, (uint64_t *)&v235);
        if ((_DWORD)v61) {
          goto LABEL_292;
        }
        uint64_t v126 = v235;
        if ((a1[50] & 0x10) != 0 && *(void *)(v235 + 112) != *v16)
        {
          btree_node_child_id_update(v236, WORD4(v236), (uint64_t *)(v235 + 112), a7);
          uint64_t v126 = v235;
        }

        if ((*(_WORD *)(*(void *)(v126 + 56) + 32LL) & 2) != 0) {
          uint64_t v127 = bt_search_node_insert(v126, a3, v209, v221, v220);
        }
        else {
          uint64_t v127 = bt_search_node(v126, a3, v209, v221, v220);
        }
        uint64_t v20 = v127;
        uint64_t v54 = v218;
        if ((_DWORD)v127) {
          goto LABEL_444;
        }
        if (v47 != v208)
        {
          uint64_t v128 = v207;
          if (!v223)
          {
            LODWORD(v130) = v217;
            goto LABEL_267;
          }

          if (WORD4(v236) | WORD4(v235))
          {
            if (v47)
            {
              int v129 = v222;
              if (v47 != a1) {
                int v129 = 1;
              }
              if (v47 != (void *)v237 && v47 != (void *)v236 && v129)
              {
                obj_unlock((uint64_t)v47, 2);
                obj_release(v47);
                uint64_t v216 = (uint64_t)v233;
                v213 = v233;
              }
            }

            uint64_t v130 = (uint64_t)v213;
            if (v213)
            {
              int v131 = v222;
              if (v213 != a1) {
                int v131 = 1;
              }
              if (v213 != (void *)v237 && v213 != (void *)v236 && v131)
              {
                obj_unlock((uint64_t)v213, 2);
                obj_release(v130);
              }

              uint64_t v216 = 0LL;
              v213 = 0LL;
              uint64_t v214 = 0LL;
              v215 = 0LL;
              v219 = 0LL;
              uint64_t v54 = 0LL;
              int v47 = 0LL;
              LODWORD(v130) = 0;
              v233 = 0LL;
            }

            else
            {
              v213 = 0LL;
              uint64_t v214 = 0LL;
              v215 = 0LL;
              v219 = 0LL;
              uint64_t v54 = 0LL;
              int v47 = 0LL;
            }

LABEL_267:
            if (WORD4(v235))
            {
LABEL_268:
              BOOL v223 = 0;
              goto LABEL_281;
            }

            if (!WORD4(v236) && !BYTE10(v236))
            {
              int v47 = (void *)v237;
              uint64_t v132 = v236;
              BOOL v223 = 1;
              goto LABEL_279;
            }

            if (BYTE10(v235) || (*(_WORD *)(*(void *)(v235 + 56) + 32LL) & 2) != 0) {
              goto LABEL_268;
            }
            int v47 = (void *)v236;
            BOOL v223 = 1;
            uint64_t v216 = v235;
            v213 = (void *)v235;
            uint64_t v214 = v235;
            v233 = (void *)v235;
            v215 = (void *)v235;
            v219 = (void *)v235;
            uint64_t v54 = v235;
            LODWORD(v130) = WORD4(v236);
          }

          else
          {
            BOOL v223 = 1;
            LODWORD(v130) = v217;
          }

          goto LABEL_281;
        }

        LODWORD(v130) = WORD4(v236);
        uint64_t v128 = v207;
        if (v47 == a1 && !WORD4(v236))
        {
          v213 = (void *)v236;
          uint64_t v214 = v236;
          v233 = (void *)v236;
          v215 = (void *)v236;
          v219 = (void *)v236;
          uint64_t v216 = v236;
          uint64_t v54 = v236;
          int v47 = a1;
          goto LABEL_176;
        }

        if (WORD4(v236))
        {
          int v47 = (void *)v236;
          uint64_t v132 = v235;
          v213 = (void *)v235;
        }

        else
        {
          int v47 = (void *)v237;
          uint64_t v132 = v236;
LABEL_279:
          v213 = (void *)v132;
          LODWORD(v130) = WORD4(v237);
        }

        v233 = (void *)v132;
        uint64_t v214 = v132;
        v215 = (void *)v132;
        v219 = (void *)v132;
        uint64_t v216 = v132;
        uint64_t v54 = v132;
LABEL_281:
        if (v128)
        {
          int v133 = v222;
          if ((void *)v128 != a1) {
            int v133 = 1;
          }
          if (v133 == 1 && (void *)v128 != v47)
          {
            uint64_t v134 = v216;
            if (v128 != v216)
            {
              obj_unlock(v128, 2);
              obj_release(v128);
            }

            v213 = (void *)v134;
            uint64_t v214 = v134;
            v215 = (void *)v134;
            v219 = (void *)v134;
            uint64_t v54 = v134;
            int v217 = v130;
            BOOL v51 = (int)v224;
LABEL_176:
            if ((*(_WORD *)(*(void *)(v235 + 56) + 32LL) & 2) == 0) {
              continue;
            }
            goto LABEL_294;
          }

          v213 = (void *)v216;
          uint64_t v214 = v216;
          v215 = (void *)v216;
          v219 = (void *)v216;
          uint64_t v54 = v216;
        }

        int v217 = v130;
        goto LABEL_176;
      }

LABEL_226:
      uint64_t v207 = 0LL;
      goto LABEL_230;
    }

    break;
  }

  *(void *)&__int128 v237 = v236;
  if (*(_DWORD *)(v234[7] + 36LL))
  {
    uint64_t v61 = btree_node_key_ptr((uint64_t)v234, 0, &v232, &v230);
    if ((_DWORD)v61) {
      goto LABEL_292;
    }
    uint64_t v120 = v237;
    __int128 v121 = v232;
    uint64_t v122 = v230;
  }

  else
  {
    uint64_t v120 = v236;
    __int128 v121 = a3;
    uint64_t v122 = v209;
  }

  uint64_t v20 = bt_search_node(v120, v121, v122, v203, v202);
  if (!(_DWORD)v20) {
    goto LABEL_226;
  }
LABEL_444:
  uint64_t v195 = v237;
  uint64_t v196 = (uint64_t)v233;
  if ((void)v237 && (void *)v237 != v47 && (void *)v237 != v233)
  {
    obj_unlock(v237, 2);
    obj_release(v195);
  }

  uint64_t v197 = v236;
  if ((void)v236 && (void *)v236 != v47 && (void)v236 != v196)
  {
    obj_unlock(v236, 2);
    obj_release(v197);
  }

  uint64_t v198 = v235;
  if ((void)v235 && (void *)v235 != v47 && (void)v235 != v196)
  {
    obj_unlock(v235, 2);
    obj_release(v198);
  }

  if (v47)
  {
    obj_unlock((uint64_t)v47, 2);
    obj_release(v47);
    uint64_t v196 = (uint64_t)v233;
  }

  if (v196)
  {
    obj_unlock(v196, 2);
    obj_release(v196);
  }

  uint64_t v199 = (uint64_t)v234;
  if (v234)
  {
    obj_unlock((uint64_t)v234, 2);
    obj_release(v199);
  }

  char v200 = v222;
  if ((void *)v237 == a1) {
    char v200 = 1;
  }
  if ((void *)v196 != a1 && (v200 & 1) == 0 && (void *)v236 != a1 && (void *)v235 != a1 && v47 != a1)
  {
    obj_unlock((uint64_t)a1, 2);
    obj_release(a1);
  }

  return v20;
}

uint64_t bt_search_node_insert(uint64_t a1, unint64_t *a2, uint64_t a3, _WORD *a4, BOOL *a5)
{
  int v23 = 0;
  int v10 = *(_DWORD *)(*(void *)(a1 + 56) + 36LL) - 1;
  unsigned __int16 v22 = 0;
  if ((*(_BYTE *)(a1 + 400) & 1) == 0)
  {
    if ((v10 & 0x80000000) == 0)
    {
      int v11 = 0;
      char v25 = 0LL;
      while (1)
      {
        int v12 = v10 + v11;
        if (v10 + v11 < 0 != __OFADD__(v10, v11)) {
          ++v12;
        }
        int v13 = v12 >> 1;
        uint64_t result = btree_node_key_ptr(a1, (unsigned __int16)(v12 >> 1), &v25, &v22);
        if ((_DWORD)result) {
          return result;
        }
        uint64_t v15 = *(void *)(a1 + 8);
        if (!v15) {
          uint64_t v15 = *(void *)(*(void *)a1 + 392LL);
        }
        uint64_t result = (*(uint64_t (**)(uint64_t, unint64_t *, uint64_t, unint64_t *, void, int *))(a1 + 416))( v15,  a2,  a3,  v25,  v22,  &v23);
        if ((_DWORD)result) {
          return result;
        }
        BOOL v16 = v23 == 0;
        if (!v23)
        {
          LOWORD(v11) = v13;
          goto LABEL_38;
        }

        if (v23 < 0) {
          int v10 = v13 - 1;
        }
        else {
          int v11 = v13 + 1;
        }
        if (v11 > v10) {
          goto LABEL_38;
        }
      }
    }

    BOOL v16 = 0;
    LOWORD(v11) = 0;
LABEL_38:
    uint64_t result = 0LL;
    *a4 = v11;
LABEL_41:
    *a5 = v16;
    return result;
  }

  if ((_DWORD)a3 != 8) {
    return 22LL;
  }
  if (v10 < 0)
  {
    BOOL v16 = 0;
    LOWORD(v17) = 0;
LABEL_40:
    uint64_t result = 0LL;
    *a4 = v17;
    goto LABEL_41;
  }

  int v17 = 0;
  unint64_t v18 = *a2;
  char v25 = 0LL;
  __int16 v24 = 0;
  while (1)
  {
    int v19 = v17 + v10;
    if (v17 + v10 < 0 != __OFADD__(v17, v10)) {
      ++v19;
    }
    int v20 = v19 >> 1;
    LODWORD(result) = btree_node_key_ptr(a1, (unsigned __int16)(v19 >> 1), &v25, &v24);
    BOOL v21 = v24 != 8 && (_DWORD)result == 0;
    uint64_t result = v21 ? 22LL : result;
    if ((_DWORD)result) {
      return result;
    }
    BOOL v16 = *v25 == v18;
    if (*v25 == v18)
    {
      LOWORD(v17) = v20;
      goto LABEL_40;
    }

    if (*v25 > v18) {
      int v10 = v20 - 1;
    }
    else {
      int v17 = v20 + 1;
    }
    if (v17 > v10) {
      goto LABEL_40;
    }
  }

uint64_t btree_node_entry_update( uint64_t a1, unsigned int a2, void *__src, size_t __n, void *a5, unsigned int a6, uint64_t a7)
{
  unsigned int v8 = __n;
  int v84 = 0;
  unsigned __int16 v83 = 0;
  unsigned __int16 v82 = 0;
  uint64_t v12 = *(void *)(a1 + 56);
  __int16 v13 = *(_WORD *)(v12 + 32);
  if (a6 == 65534) {
    size_t v14 = 0LL;
  }
  else {
    size_t v14 = a6;
  }
  int v80 = a5;
  size_t v81 = v14;
  BOOL v79 = __src;
  __int16 v77 = *(_WORD *)(v12 + 32);
  if (*(_DWORD *)(v12 + 36) <= a2)
  {
    int v21 = 0;
    __int16 v22 = 0;
    unsigned int v20 = 0;
    LOWORD(v23) = 0;
    __int16 v24 = 0;
    BOOL v75 = 0;
    unsigned int v17 = 0xFFFF;
    unsigned int v19 = 0xFFFF;
  }

  else
  {
    uint64_t v15 = *(void *)(a1 + 376);
    if ((v13 & 4) != 0) {
      BOOL v16 = (unsigned __int16 *)(v15 + 4LL * a2);
    }
    else {
      BOOL v16 = (unsigned __int16 *)(v15 + 8LL * a2);
    }
    unsigned int v17 = *v16;
    unint64_t v18 = (unsigned __int16 *)(v15 + 4LL * a2 + 2);
    if ((v13 & 4) == 0) {
      unint64_t v18 = (unsigned __int16 *)(v15 + 8LL * a2 + 4);
    }
    unsigned int v19 = *v18;
    if (v17 == 0xFFFF)
    {
      unsigned int v20 = 0;
    }

    else if ((v13 & 4) != 0)
    {
      unsigned int v20 = (*(_DWORD *)(a1 + 400) >> 9) & 0x3FFF;
    }

    else
    {
      unsigned int v20 = *(unsigned __int16 *)(v15 + 8LL * a2 + 2);
    }

    if (v19 > 0xFFFD) {
      unsigned int v23 = 0;
    }
    else {
      unsigned int v23 = btree_node_val_len(a1, a2);
    }
    BOOL v75 = v20 != 0;
    if (v20)
    {
      uint64_t v25 = btree_node_key_range_validate(a1, v17, v20);
      if ((_DWORD)v25) {
        return v25;
      }
      __int16 v24 = v20;
    }

    else
    {
      __int16 v24 = 0;
    }

    a5 = v80;
    size_t v14 = v81;
    if (v23)
    {
      uint64_t v25 = btree_node_val_range_validate(a1, v19, v23);
      if ((_DWORD)v25) {
        return v25;
      }
      int v21 = 1;
      __int16 v22 = v23;
      a5 = v80;
      size_t v14 = v81;
    }

    else
    {
      int v21 = 0;
      __int16 v22 = 0;
    }

    __src = v79;
  }

  HIWORD(v84) = v17;
  LOWORD(v84) = v19;
  unsigned __int16 v26 = v8 - v20;
  if (!__src) {
    unsigned __int16 v26 = 0;
  }
  int v27 = (__int16)v26;
  unsigned __int16 v28 = v14 - v23;
  if (!a5) {
    unsigned __int16 v28 = 0;
  }
  int v29 = (__int16)v28;
  if (!(v26 | v28)) {
    goto LABEL_148;
  }
  if (__src)
  {
    if ((*(void *)(a1 + 400) & 0x40) != 0) {
      __int16 v30 = v8;
    }
    else {
      __int16 v30 = (v8 + 7) & 0xFFF8;
    }
    __int16 v31 = (v24 + 7) & 0xFFF8;
    if ((*(void *)(a1 + 400) & 0x40LL) != 0) {
      __int16 v31 = v24;
    }
    __int16 v32 = v30 - v31;
  }

  else
  {
    __int16 v32 = 0;
  }

  int v73 = v29;
  int v74 = v27;
  if (a5)
  {
    if ((*(void *)(a1 + 400) & 0x40) != 0) {
      __int16 v33 = v14;
    }
    else {
      __int16 v33 = (v14 + 7) & 0xFFF8;
    }
    if ((*(void *)(a1 + 400) & 0x40LL) == 0) {
      __int16 v22 = (v22 + 7) & 0xFFF8;
    }
    __int16 v34 = v33 - v22;
  }

  else
  {
    __int16 v34 = 0;
  }

  unsigned __int16 v35 = 0;
  unsigned __int16 v82 = -1;
  unsigned __int16 v83 = -1;
  if (!v8) {
    goto LABEL_55;
  }
  int v27 = v74;
  if (!v74) {
    goto LABEL_56;
  }
  btree_node_space_free_list_search(a1, 1, v8, (__int16 *)&v83, (unsigned __int16 *)&v84 + 1);
  if (SHIWORD(v84) != -1)
  {
    unsigned __int16 v35 = 0;
LABEL_55:
    int v27 = v74;
    goto LABEL_56;
  }

  int v27 = v74;
  if (v74 < 0)
  {
    unsigned __int16 v35 = 0;
    HIWORD(v84) = v17;
    unsigned __int16 v83 = -1;
  }

  else if ((*(_BYTE *)(a1 + 400) & 0x40) != 0)
  {
    unsigned __int16 v35 = v8;
  }

  else
  {
    unsigned __int16 v35 = (v8 + 7) & 0xFFF8;
  }

LABEL_56:
  size_t v14 = v81;
  if (!(_DWORD)v81)
  {
    __src = v79;
    a5 = v80;
    int v29 = v73;
    goto LABEL_72;
  }

  int v29 = v73;
  if (!v73)
  {
    __src = v79;
    a5 = v80;
    goto LABEL_72;
  }

  unsigned __int16 v36 = v35;
  btree_node_space_free_list_search(a1, 2, v81, (__int16 *)&v82, (unsigned __int16 *)&v84);
  if ((__int16)v84 == -1)
  {
    int v29 = v73;
    if (v73 < 0)
    {
      LOWORD(v84) = v19;
      unsigned __int16 v82 = -1;
      a5 = v80;
      size_t v14 = v81;
      __src = v79;
      goto LABEL_60;
    }

    a5 = v80;
    size_t v14 = v81;
    if ((*(_BYTE *)(a1 + 400) & 0x40) != 0) {
      __int16 v38 = v81;
    }
    else {
      __int16 v38 = (v81 + 7) & 0xFFF8;
    }
    unsigned __int16 v35 = v38 + v36;
    __src = v79;
    int v27 = v74;
LABEL_72:
    BOOL v37 = v75;
    goto LABEL_73;
  }

  a5 = v80;
  size_t v14 = v81;
  __src = v79;
  int v29 = v73;
LABEL_60:
  int v27 = v74;
  BOOL v37 = v75;
  unsigned __int16 v35 = v36;
LABEL_73:
  uint64_t v39 = *(void *)(a1 + 56);
  unsigned int v40 = *(unsigned __int16 *)(v39 + 46);
  if (v27) {
    BOOL v41 = v37;
  }
  else {
    BOOL v41 = 0;
  }
  if (v41)
  {
    if ((*(_BYTE *)(a1 + 400) & 0x40) != 0) {
      __int16 v42 = v20;
    }
    else {
      __int16 v42 = (v20 + 7) & 0xFFF8;
    }
    unsigned __int16 v43 = (v42 + 7) & 0xFFF8;
    if ((*(_BYTE *)(a1 + 400) & 0x40) != 0) {
      unsigned __int16 v43 = v20;
    }
    if (v43 >= 4u)
    {
      unsigned __int8 v44 = (_WORD *)(*(void *)(a1 + 384) + v17);
      v44[1] = v43;
      _WORD *v44 = *(_WORD *)(v39 + 48);
      *(_WORD *)(v39 + 48) = v17;
    }

    *(_WORD *)(v39 + 50) += v43;
  }

  if (v29) {
    int v45 = v21;
  }
  else {
    int v45 = 0;
  }
  if (v45 == 1)
  {
    if ((*(_BYTE *)(a1 + 400) & 0x40) != 0) {
      __int16 v46 = v23;
    }
    else {
      __int16 v46 = (v23 + 7) & 0xFFF8;
    }
    unsigned __int16 v47 = (v46 + 7) & 0xFFF8;
    if ((*(_BYTE *)(a1 + 400) & 0x40) != 0) {
      unsigned __int16 v47 = v23;
    }
    if (v47 >= 4u)
    {
      uint64_t v48 = (_WORD *)(*(void *)(a1 + 392) - v19);
      v48[1] = v47;
      *uint64_t v48 = *(_WORD *)(v39 + 52);
      *(_WORD *)(v39 + 52) = v19;
    }

    *(_WORD *)(v39 + 54) += v47;
    if ((unsigned __int16)v84 != 0xFFFF
      && v82 == 0xFFFF
      && (unsigned __int16)v84 != v19
      && *(unsigned __int16 *)(v39 + 52) == v19)
    {
      unsigned __int16 v82 = v19;
    }
  }

  if (v40 < v35)
  {
    if ((v77 & 0x8000) == 0) {
      *(_WORD *)(v39 + 32) |= 0x8000u;
    }
    if (*(_DWORD *)(v39 + 36) > a2)
    {
      __int16 v49 = *(_WORD *)(v39 + 32);
      uint64_t v50 = *(void *)(a1 + 376);
      if ((v49 & 4) != 0)
      {
        if (v41) {
          *(_WORD *)(v50 + 4LL * a2) = -1;
        }
        if (v45) {
          *(_WORD *)(v50 + 4LL * a2 + 2) = -1;
        }
      }

      else
      {
        if (v41) {
          *(_DWORD *)(v50 + 8LL * a2) = 0xFFFF;
        }
        if (v45) {
          *(_DWORD *)(v50 + 8LL * a2 + 4) = 0xFFFF;
        }
      }
    }

    int v76 = v45;
    uint64_t v51 = btree_node_compact(a1, 0, a7);
    if ((_DWORD)v51)
    {
      uint64_t v25 = v51;
      if (v41)
      {
        unsigned __int16 v52 = (*(void *)(a1 + 400) & 0x40LL) != 0 ? v8 : (v8 + 7) & 0xFFF8;
        int v53 = btree_node_space_free_list_alloc(a1, 1, v52, 0xFFFF, v17);
        if (v53)
        {
          uint64_t v54 = *(void *)(a1 + 8);
          if (v54) {
            uint64_t v55 = (const char *)(v54 + 3992);
          }
          else {
            uint64_t v55 = (const char *)(*(void *)(*(void *)(*(void *)a1 + 392LL) + 384LL) + 208LL);
          }
          log_err( "%s:%d: %s unable to reclaim just-freed key space on error path: %d\n",  "btree_node_entry_update",  1769,  v55,  v53);
        }
      }

      if (v76)
      {
        if ((*(void *)(a1 + 400) & 0x40LL) != 0) {
          unsigned __int16 v72 = v23;
        }
        else {
          unsigned __int16 v72 = (v23 + 7) & 0xFFF8;
        }
      }

      return v25;
    }

    unsigned __int16 v82 = -1;
    unsigned __int16 v83 = -1;
    int v84 = -1;
    a5 = v80;
    size_t v14 = v81;
    __src = v79;
    int v29 = v73;
    int v27 = v74;
  }

  if (v27)
  {
    if (HIWORD(v84) == 0xFFFF) {
      uint64_t v56 = btree_node_space_alloc(a1, 1, v8, (_WORD *)&v84 + 1);
    }
    else {
      uint64_t v56 = btree_node_space_free_list_alloc(a1, 1, v8, v83, HIWORD(v84));
    }
    uint64_t v25 = v56;
    a5 = v80;
    size_t v14 = v81;
    __src = v79;
    int v29 = v73;
    int v27 = v74;
    if ((_DWORD)v56) {
      goto LABEL_189;
    }
  }

  else
  {
    uint64_t v57 = *(void *)(a1 + 376);
    BOOL v58 = (_WORD *)(v57 + 4LL * a2);
    unint64_t v59 = (_WORD *)(v57 + 8LL * a2);
    if ((*(_WORD *)(*(void *)(a1 + 56) + 32LL) & 4) != 0) {
      uint64_t v60 = v58;
    }
    else {
      uint64_t v60 = v59;
    }
    HIWORD(v84) = *v60;
  }

  if (v29)
  {
    if ((_DWORD)v14)
    {
      else {
        uint64_t v61 = btree_node_space_free_list_alloc(a1, 2, v14, v82, (unsigned __int16)v84);
      }
      uint64_t v25 = v61;
      __src = v79;
      a5 = v80;
      int v29 = v73;
      int v27 = v74;
      if (!(_DWORD)v61)
      {
        LOWORD(v19) = v84;
        size_t v14 = v81;
        goto LABEL_148;
      }

LABEL_189:
      log_err("%s:%d: %s unable allocate space that should be there: %d\n");
      return v25;
    }

    if (a6 == 65534) {
      LOWORD(v19) = -2;
    }
    else {
      LOWORD(v19) = -1;
    }
  }

  else
  {
    uint64_t v62 = *(void *)(a1 + 376);
    uint64_t v63 = v62 + 4LL * a2 + 2;
    uint64_t v64 = v62 + 8LL * a2 + 4;
    if ((*(_WORD *)(*(void *)(a1 + 56) + 32LL) & 4) != 0) {
      int v65 = (_WORD *)v63;
    }
    else {
      int v65 = (_WORD *)v64;
    }
    LOWORD(v19) = *v65;
  }

  LOWORD(v84) = v19;
LABEL_148:
  if (a6 == 65534 && (unsigned __int16)v19 != 65534)
  {
    LOWORD(v19) = -2;
    LOWORD(v84) = -2;
    int v29 = 1;
  }

  uint64_t v66 = *(void *)(a1 + 56);
  uint64_t v67 = *(void *)(a1 + 376);
  if ((*(_WORD *)(v66 + 32) & 4) != 0)
  {
    if (v27) {
      *(_WORD *)(v67 + 4LL * a2) = HIWORD(v84);
    }
    if (v29) {
      *(_WORD *)(v67 + 4LL * a2 + 2) = v19;
    }
  }

  else
  {
    uint64_t v68 = (_WORD *)(v67 + 8LL * a2);
    if (v27)
    {
      _WORD *v68 = HIWORD(v84);
      v68[1] = v8;
    }

    if (v29)
    {
      v68[2] = v19;
      v68[3] = a6;
    }
  }

  if ((v77 & 0x8000) == 0) {
    *(_WORD *)(v66 + 32) &= ~0x8000u;
  }
  unsigned int v69 = *(unsigned __int16 *)(a1 + 440);
  if (!*(_WORD *)(a1 + 440) || (__int16 v70 = v8, v69 >= v8))
  {
    if (v8 >= v20 || v69 > v20) {
      goto LABEL_168;
    }
    __int16 v70 = 0;
  }

  *(_WORD *)(a1 + 440) = v70;
LABEL_168:
  if (__src && v8)
  {
    memcpy((void *)(*(void *)(a1 + 384) + HIWORD(v84)), __src, v8);
    a5 = v80;
    size_t v14 = v81;
  }

  if (a5 && (_DWORD)v14) {
    memcpy((void *)(*(void *)(a1 + 392) - (unsigned __int16)v84), a5, v14);
  }
  obj_dirty(a1, a7, 0LL);
  return 0LL;
}

uint64_t btree_node_insert_internal( uint64_t a1, unsigned int a2, const void *a3, unsigned int a4, const void *a5, unsigned int a6, uint64_t a7)
{
  __int16 v46 = a4;
  if (a6 == 65534) {
    unsigned int v11 = 0;
  }
  else {
    unsigned int v11 = a6;
  }
  __int16 v42 = v11;
  if (a3)
  {
    unsigned int v12 = a4;
    if (a4) {
      __int16 v13 = a3;
    }
    else {
      __int16 v13 = 0LL;
    }
    if (a5) {
      goto LABEL_9;
    }
LABEL_13:
    unsigned int v11 = 0;
    size_t v14 = 0LL;
    __int16 v42 = 0;
    goto LABEL_14;
  }

  unsigned int v12 = 0;
  __int16 v13 = 0LL;
  __int16 v46 = 0;
  if (!a5) {
    goto LABEL_13;
  }
LABEL_9:
  if (v11) {
    size_t v14 = a5;
  }
  else {
    size_t v14 = 0LL;
  }
LABEL_14:
  unsigned __int16 v45 = 0;
  int v43 = 0;
  int v44 = 0;
  if (!btree_node_has_room(a1, 1u, &v46, &v42, 0, 0, &v45)) {
    return 28LL;
  }
  int v43 = -1;
  int v44 = -1;
  if (v13) {
    btree_node_space_free_list_search(a1, 1, v12, (__int16 *)&v44 + 1, (unsigned __int16 *)&v44);
  }
  if (v14) {
    btree_node_space_free_list_search(a1, 2, v11, (__int16 *)&v43 + 1, (unsigned __int16 *)&v43);
  }
  if ((__int16)v44 == -1)
  {
    if ((*(_BYTE *)(a1 + 400) & 0x40) != 0) {
      unsigned __int16 v15 = v12;
    }
    else {
      unsigned __int16 v15 = (v12 + 7) & 0xFFF8;
    }
  }

  else
  {
    unsigned __int16 v15 = 0;
  }

  if ((__int16)v43 == -1)
  {
    if ((*(_BYTE *)(a1 + 400) & 0x40) != 0) {
      __int16 v17 = v11;
    }
    else {
      __int16 v17 = (v11 + 7) & 0xFFF8;
    }
    v15 += v17;
  }

  unsigned int v18 = v45 + v15;
  uint64_t v19 = *(void *)(a1 + 56);
  if (v18 <= *(unsigned __int16 *)(v19 + 46))
  {
    if (v45)
    {
      memmove((void *)(*(void *)(a1 + 384) + v45), *(const void **)(a1 + 384), *(unsigned __int16 *)(v19 + 44));
      bzero(*(void **)(a1 + 384), v45);
      unsigned __int16 v20 = v45;
      *(void *)(a1 + 384) += v45;
      uint64_t v21 = *(void *)(a1 + 56);
      *(_WORD *)(v21 + 46) -= v20;
      *(_WORD *)(v21 + 42) += v20;
    }
  }

  else
  {
    uint64_t v16 = btree_node_compact(a1, 1LL, a7);
    if ((_DWORD)v16) {
      return v16;
    }
    LOWORD(v43) = -1;
    LOWORD(v44) = -1;
    unsigned __int16 v45 = 0;
  }

  if (!v13)
  {
LABEL_38:
    if (!v14) {
      goto LABEL_62;
    }
    goto LABEL_39;
  }

  if ((unsigned __int16)v44 != 0xFFFF)
  {
    uint64_t v16 = btree_node_space_free_list_alloc(a1, 1, v12, HIWORD(v44), (unsigned __int16)v44);
    if (!(_DWORD)v16) {
      goto LABEL_38;
    }
LABEL_47:
    uint64_t v25 = *(void *)(a1 + 8);
    if (v25) {
      unsigned __int16 v26 = (const char *)(v25 + 3992);
    }
    else {
      unsigned __int16 v26 = (const char *)(*(void *)(*(void *)(*(void *)a1 + 392LL) + 384LL) + 208LL);
    }
    log_err("%s:%d: %s unable allocate space that should be there: %d\n", "btree_node_insert_internal", 2190, v26, v16);
    return v16;
  }

  if ((*(_BYTE *)(a1 + 400) & 0x40) != 0) {
    unsigned __int16 v22 = v12;
  }
  else {
    unsigned __int16 v22 = (v12 + 7) & 0xFFF8;
  }
  uint64_t v23 = *(void *)(a1 + 56);
  unsigned int v24 = *(unsigned __int16 *)(v23 + 46);
  if (v24 < v22)
  {
    uint64_t v16 = 28LL;
    goto LABEL_47;
  }

  __int16 v32 = *(_WORD *)(v23 + 44);
  *(_WORD *)(v23 + 44) = v32 + v22;
  *(_WORD *)(v23 + 46) = v24 - v22;
  LOWORD(v44) = v32;
  if (!v14) {
    goto LABEL_62;
  }
LABEL_39:
  if ((unsigned __int16)v43 != 0xFFFF)
  {
    uint64_t v16 = btree_node_space_free_list_alloc(a1, 2, v11, HIWORD(v43), (unsigned __int16)v43);
    if (!(_DWORD)v16) {
      goto LABEL_62;
    }
LABEL_53:
    uint64_t v30 = *(void *)(a1 + 8);
    if (v30) {
      __int16 v31 = (const char *)(v30 + 3992);
    }
    else {
      __int16 v31 = (const char *)(*(void *)(*(void *)(*(void *)a1 + 392LL) + 384LL) + 208LL);
    }
    log_err("%s:%d: %s unable allocate space that should be there: %d\n", "btree_node_insert_internal", 2202, v31, v16);
    return v16;
  }

  unsigned __int16 v27 = (v11 + 7) & 0xFFF8;
  if ((*(_BYTE *)(a1 + 400) & 0x40) != 0) {
    unsigned __int16 v27 = v11;
  }
  uint64_t v28 = *(void *)(a1 + 56);
  unsigned int v29 = *(unsigned __int16 *)(v28 + 46);
  if (v29 < v27)
  {
    uint64_t v16 = 28LL;
    goto LABEL_53;
  }

  __int16 v33 = v29 - v27;
  *(_WORD *)(v28 + 46) = v33;
  LOWORD(v43) = *(_WORD *)(a1 + 392) - (v33 + *(_WORD *)(a1 + 384) + *(_WORD *)(v28 + 44));
LABEL_62:
  if (!v11)
  {
    if (a6 == 65534) {
      __int16 v34 = -2;
    }
    else {
      __int16 v34 = -1;
    }
    LOWORD(v43) = v34;
  }

  uint64_t v35 = *(void *)(a1 + 56);
  unsigned int v36 = *(_DWORD *)(v35 + 36);
  if (v36 > a2)
  {
    btree_node_toc_shift(a1, a2, 1);
    uint64_t v35 = *(void *)(a1 + 56);
    unsigned int v36 = *(_DWORD *)(v35 + 36);
  }

  *(_DWORD *)(v35 + 36) = v36 + 1;
  __int16 v37 = v43;
  uint64_t v38 = *(void *)(a1 + 376);
  if ((*(_WORD *)(v35 + 32) & 4) != 0)
  {
    unsigned int v40 = (_WORD *)(v38 + 4LL * a2);
    *unsigned int v40 = v44;
    v40[1] = v37;
  }

  else
  {
    uint64_t v39 = (_WORD *)(v38 + 8LL * a2);
    _WORD *v39 = v44;
    v39[1] = v12;
    v39[2] = v37;
    v39[3] = a6;
  }

  if (v13) {
    memcpy((void *)(*(void *)(a1 + 384) + (unsigned __int16)v44), v13, v12);
  }
  if (v14) {
    memcpy((void *)(*(void *)(a1 + 392) - (unsigned __int16)v43), v14, v11);
  }
  obj_dirty(a1, a7, 0LL);
  return 0LL;
}

uint64_t bt_search_node(uint64_t a1, unint64_t *a2, uint64_t a3, _WORD *a4, BOOL *a5)
{
  uint64_t result = bt_search_node_insert(a1, a2, a3, a4, a5);
  if (!(_DWORD)result && !*a5)
  {
    if (*a4) {
      --*a4;
    }
  }

  return result;
}

uint64_t btree_node_child_id_update(uint64_t a1, unsigned int a2, uint64_t *a3, uint64_t a4)
{
  int v5 = a3;
  unint64_t v12 = 0LL;
  __int16 v6 = *(_WORD *)(*(void *)(a1 + 56) + 32LL);
  if ((v6 & 8) == 0)
  {
LABEL_4:
    if ((v6 & 4) != 0) {
      uint64_t v8 = (*(_DWORD *)(a1 + 400) >> 9) & 0x3FFF;
    }
    else {
      uint64_t v8 = *(unsigned __int16 *)(*(void *)(a1 + 376) + 8LL * a2 + 2);
    }
    return btree_node_entry_update_via_callback( a1,  a2,  0LL,  v8,  (uint64_t)v5,  8LL,  0,  a4,  (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))btree_node_child_id_update_cb,  0LL);
  }

  unint64_t v7 = *(void *)(a1 + 408);
  if (*a3 > v7)
  {
    unint64_t v12 = *a3 - v7;
    int v5 = (uint64_t *)&v12;
    goto LABEL_4;
  }

  uint64_t v10 = *(void *)(a1 + 8);
  if (v10) {
    unsigned int v11 = (const char *)(v10 + 3992);
  }
  else {
    unsigned int v11 = (const char *)(*(void *)(*(void *)(*(void *)a1 + 392LL) + 384LL) + 208LL);
  }
  log_err("%s:%d: %s invalid relative OID: %llu < root OID: %llu\n", "btree_node_child_id_update", 1958, v11, *a3, v7);
  return 22LL;
}

BOOL btree_node_has_room( uint64_t a1, unsigned int a2, __int16 *a3, __int16 *a4, __int16 a5, __int16 a6, _WORD *a7)
{
  unint64_t v12 = *(_WORD **)(a1 + 56);
  __int16 v13 = v12[16];
  int v14 = (unsigned __int16)v12[18];
  unsigned int v15 = (unsigned __int16)v12[21];
  if ((v13 & 4) != 0) {
    char v16 = 2;
  }
  else {
    char v16 = 3;
  }
  char v43 = v16;
  if ((v13 & 4) != 0) {
    char v17 = 2;
  }
  else {
    char v17 = 3;
  }
  unsigned int v18 = btree_node_toc_required_capacity(a1, 0);
  if ((v13 & 4) == 0 || (*(_BYTE *)(a1 + 400) & 4) != 0 || v14 + a2 <= v18)
  {
    unsigned int v20 = v18;
    unsigned int v21 = btree_node_toc_required_capacity(a1, (__int16)a2);
    if (a7)
    {
      if ((v13 & 4) != 0) {
        char v22 = 2;
      }
      else {
        char v22 = 3;
      }
      unsigned int v23 = v21 << v22;
      BOOL v24 = v23 >= v15;
      unsigned int v25 = v23 - v15;
      if (v25 == 0 || !v24) {
        LOWORD(v25) = 0;
      }
      *a7 = v25;
    }

    unsigned int v26 = v15 >> v17;
    __int16 v27 = 0;
    if (a2)
    {
      uint64_t v28 = a2;
      char v29 = v43;
      __int16 v31 = a5;
      __int16 v30 = a6;
      unsigned int v32 = v20;
      do
      {
        __int16 v34 = *a3++;
        __int16 v33 = v34;
        if ((*(void *)(a1 + 400) & 0x40) != 0)
        {
          __int16 v35 = *a4;
        }

        else
        {
          __int16 v33 = (v33 + 7) & 0xFFF8;
          __int16 v35 = (*a4 + 7) & 0xFFF8;
        }

        v27 += v33 + v35;
        ++a4;
        --v28;
      }

      while (v28);
    }

    else
    {
      char v29 = v43;
      __int16 v31 = a5;
      __int16 v30 = a6;
      unsigned int v32 = v20;
    }

    unsigned __int16 v36 = v30 + v31 + v27;
    if ((v13 & 4) != 0) {
      char v37 = 2;
    }
    else {
      char v37 = 3;
    }
    int v38 = ((v21 - v32) << v37) & 0xFFFC;
    if (v21 <= v32) {
      int v38 = 0;
    }
    BOOL v39 = v26 > v32;
    int v40 = (v26 - v32) << v29;
    if (!v39) {
      LOWORD(v40) = 0;
    }
    return v38 + v36 <= (unsigned __int16)(v12[23] + v40 + v12[25] + v12[27]);
  }

  else
  {
    BOOL result = 0LL;
    if (a7) {
      *a7 = -1;
    }
  }

  return result;
}

uint64_t btree_node_largest_key_len(uint64_t a1)
{
  int v1 = (*(_DWORD *)(a1 + 400) >> 9) & 0x3FFF;
  if (!v1)
  {
    LOWORD(v1) = *(_WORD *)(a1 + 440);
    if (!(_WORD)v1)
    {
      uint64_t v2 = *(void *)(a1 + 56);
      int v3 = *(_DWORD *)(v2 + 36);
      if (v3)
      {
        int v4 = 0;
        LOWORD(v1) = 0;
        __int16 v5 = *(_WORD *)(v2 + 32);
        do
        {
          if ((v5 & 4) != 0) {
            unsigned int v6 = 0;
          }
          else {
            unsigned int v6 = *(unsigned __int16 *)(*(void *)(a1 + 376) + 8LL * (unsigned __int16)v4 + 2);
          }
          ++v4;
        }

        while (v3 != v4);
      }

      else
      {
        LOWORD(v1) = 0;
      }

      *(_WORD *)(a1 + 440) = v1;
    }
  }

  return (unsigned __int16)v1;
}

uint64_t bt_shift_or_split( void *a1, void *a2, unsigned int a3, void *a4, uint64_t a5, void *a6, unsigned int a7, uint64_t a8, __int16 *a9, __int16 *a10, unsigned __int16 a11, uint64_t a12, uint64_t a13, uint64_t *a14)
{
  unsigned int v255 = a7;
  v254 = a6;
  uint64_t v19 = a13;
  uint64_t v288 = *MEMORY[0x1895F89C0];
  v279 = a1;
  MEMORY[0x1895F8858]();
  unsigned int v21 = &v246[-v20];
  bzero(&v246[-v20], v22);
  LODWORD(v277) = 0;
  memset(v287, 0, sizeof(v287));
  v285 = 0LL;
  v286 = 0LL;
  v283 = 0LL;
  v284 = 0LL;
  v282 = 0LL;
  int v280 = 0;
  int v281 = 0;
  if ((*(_WORD *)(a4[7] + 32LL) & 4) != 0) {
    LODWORD(v277) = (a4[50] & 4) == 0;
  }
  v270 = v279 + 50;
  *a14 = 0LL;
  unsigned int v253 = a3;
  v248 = a14;
  if (a2 && *(_DWORD *)(a2[7] + 36LL) - 1 > a3)
  {
    unsigned __int16 v23 = a3 + 1;
    if (btree_node_child_val((uint64_t)a2, v23, v21)
      || btree_node_get(v279, v21, a12, 3, *(_WORD *)(a2[7] + 34LL) - 1, a13, (uint64_t *)&v286)
      || (uint64_t v24 = (uint64_t)v286) == 0)
    {
      uint64_t v24 = 0LL;
      v286 = 0LL;
    }

    else if ((*v270 & 0x10) != 0 && v286[14] != *v21)
    {
      btree_node_child_id_update((uint64_t)a2, v23, v286 + 14, a13);
    }
  }

  else
  {
    uint64_t v24 = 0LL;
  }

  *(_OWORD *)((char *)v287 + 8) = *(_OWORD *)v270;
  *((void *)&v287[1] + 1) = a4[52];
  LODWORD(v287[0]) = 2123139;
  uint64_t v25 = a4[7];
  WORD2(v287[0]) = *(_WORD *)(v25 + 32) & 0x1A;
  WORD3(v287[0]) = *(_WORD *)(v25 + 34);
  unsigned __int16 v26 = 0;
  if ((_DWORD)a8)
  {
    uint64_t v29 = a8;
    do
    {
      __int16 v31 = *a9++;
      __int16 v30 = v31;
      if ((a4[50] & 0x40) != 0)
      {
        __int16 v32 = *a10;
      }

      else
      {
        __int16 v30 = (v30 + 7) & 0xFFF8;
        __int16 v32 = (*a10 + 7) & 0xFFF8;
      }

      v26 += v30 + v32;
      ++a10;
      --v29;
    }

    while (v29);
  }

  v249 = v21;
  unsigned int v33 = *(_DWORD *)(v25 + 36);
  v260 = a2;
  if (v33 > a5)
  {
    uint64_t v34 = btree_node_key_ptr((uint64_t)a4, a5, &v283, (_WORD *)&v280 + 1);
    if ((_DWORD)v34) {
      return v34;
    }
    uint64_t v35 = v279[1];
    if (!v35) {
      uint64_t v35 = *(void *)(*v279 + 392LL);
    }
    uint64_t v34 = ((uint64_t (*)(uint64_t, void *, void, void *, void, int *))v279[52])( v35,  v254,  v255,  v283,  HIWORD(v280),  &v281);
    if ((_DWORD)v34) {
      return v34;
    }
    if (v281)
    {
      unsigned int v266 = 0;
      int v263 = 0;
      int v36 = 0;
      a2 = v260;
    }

    else
    {
      a2 = v260;
      if ((*(_WORD *)(a4[7] + 32LL) & 2) != 0)
      {
        int v171 = btree_node_val_len((uint64_t)a4, a5);
        if (v171 == 65534) {
          int v172 = 0;
        }
        else {
          int v172 = v171;
        }
        LOWORD(v280) = v172;
        if ((a4[50] & 0x40) != 0) {
          unsigned int v173 = HIWORD(v280);
        }
        else {
          unsigned int v173 = (HIWORD(v280) + 7) & 0xFFFFFFF8;
        }
        if ((a4[50] & 0x40) == 0) {
          int v172 = (v172 + 7) & 0x1FFF8;
        }
        unsigned int v266 = v173 + v172;
        int v263 = 1;
      }

      else
      {
        unsigned int v266 = 0;
        int v263 = 0;
      }

      int v36 = 1;
    }
  }

  else
  {
    unsigned int v266 = 0;
    int v263 = 0;
    int v36 = 0;
  }

  BOOL v274 = v24 == 0;
  uint64_t v267 = a13;
  v275 = a4;
  if (!v24)
  {
    uint64_t v106 = obj_flags((uint64_t)a4) & 0xFFFFFC00LL;
    uint64_t v107 = v279[1];
    if (!v107) {
      uint64_t v107 = *(void *)(*v279 + 392LL);
    }
    uint64_t v108 = obj_subtype((uint64_t)a4);
    uint64_t v34 = btree_node_create(v107, v106, v108, v287, a13, &v286);
    if ((_DWORD)v34) {
      return v34;
    }
    unsigned int v109 = (unint64_t *)(v279[49] + 32LL);
    a2 = v260;
    do
      unint64_t v110 = __ldxr(v109);
    while (__stxr(v110 + 1, v109));
    __int16 v111 = v279;
    obj_dirty((uint64_t)v279, a13, 0LL);
    if ((v111[50] & 2) != 0 || v279[54] == a4[14])
    {
      uint64_t v112 = a4[7];
      if (*(_DWORD *)(v112 + 36) == (_DWORD)a5)
      {
        int v113 = 0;
        LODWORD(a8) = 0;
        int v40 = a5 + ((*(unsigned __int16 *)(v112 + 32) >> 1) & 1) - 1;
        BOOL v274 = 1;
        goto LABEL_146;
      }
    }
  }

  uint64_t v37 = a4[7];
  __int16 v38 = *(_WORD *)(v37 + 32);
  int v261 = btree_node_toc_required_capacity((uint64_t)a4, 0);
  if ((v38 & 4) != 0) {
    uint64_t v39 = 2LL;
  }
  else {
    uint64_t v39 = 3LL;
  }
  int v40 = *(_DWORD *)(v37 + 36);
  if (((v40 - 1) & 0x8000) != 0)
  {
    int v113 = 0;
    goto LABEL_146;
  }

  int v250 = v26;
  unsigned int v41 = a11 + v26;
  unsigned int v247 = v36 + a5;
  uint64_t v42 = a8;
  int v43 = (__int16)(v40 - 1);
  uint64_t v44 = (uint64_t)v286;
  int v268 = btree_node_free_space_total((uint64_t)v286);
  uint64_t v278 = v44;
  unsigned int v269 = btree_node_toc_required_capacity(v44, 0) << v39;
  int v258 = btree_node_free_space_total((uint64_t)a4);
  LOWORD(v44) = 0;
  int v272 = 0;
  int v256 = v263 ^ 1;
  int v262 = v42;
  int v45 = v263;
  unsigned int v252 = v41;
  uint64_t v276 = v41;
  uint64_t v19 = v267;
  uint64_t v271 = v39;
  while (1)
  {
    int v265 = v40;
    __int16 v46 = v42 - v45;
    int v47 = btree_node_toc_required_capacity((uint64_t)a4, (__int16)(v42 - v45));
    int v48 = v258 + (unsigned __int16)v266 + (__int16)((v261 - v47) << v39);
    int v49 = (__int16)(v258 + v266 + ((v261 - v47) << v39) - v276);
    int v50 = (int)v277;
    int v273 = v45;
    if (v50 == 1)
    {
      unsigned int v51 = *(_DWORD *)(a4[7] + 36LL) - (__int16)v45 + (__int16)v42;
    }

    else if (v48 < (unsigned __int16)v276)
    {
LABEL_32:
      int v52 = v272;
      goto LABEL_41;
    }

    if (!v274) {
      goto LABEL_143;
    }
    if ((*v270 & 2) != 0 || v279[54] == a4[14])
    {
      if ((*(_WORD *)(a4[7] + 32LL) & 2) != 0) {
        goto LABEL_143;
      }
      if (!(_WORD)v43) {
        goto LABEL_143;
      }
      int v52 = v272;
      int v53 = btree_node_toc_required_capacity(v278, (__int16)v272);
      __int16 v54 = v268 + v269 + v44 - (v53 << v39);
    }

    else if ((_DWORD)v277)
    {
      if (!(_WORD)v43) {
        goto LABEL_143;
      }
      unsigned __int16 v84 = v46 + *(_WORD *)(a4[7] + 36LL);
      int v52 = v272;
    }

    else
    {
      int v52 = v272;
      int v105 = btree_node_toc_required_capacity(v278, (__int16)v272);
    }

LABEL_41:
    int v264 = v49;
    uint64_t v55 = v42;
    uint64_t v56 = a5;
    unsigned int v57 = (unsigned __int16)v43;
    uint64_t v58 = a4[7];
    int v59 = *(unsigned __int16 *)(v58 + 32);
    int v259 = v59;
    if ((v59 & 2) == 0 || v256 + (unsigned __int16)v43 != (_DWORD)v56)
    {
      int v79 = v276;
      if ((v59 & 4) == 0) {
        goto LABEL_56;
      }
      goto LABEL_72;
    }

    uint64_t v60 = v56;
    unsigned int v251 = (unsigned __int16)v43;
    uint64_t v257 = v58;
    int v61 = v264;
    uint64_t v42 = v55;
    uint64_t v62 = v19;
    int v63 = v262;
    int v64 = v52 + v262;
    int v65 = btree_node_toc_required_capacity(v278, (__int16)(v52 + v262));
    __int16 v66 = v268;
    unsigned int v67 = (v65 << v271) - v269;
    int v68 = v250 + WORD2(v276) + (__int16)(((_WORD)v65 << v271) - v269);
    int v69 = (int)v277;
    if (v69 == 1)
    {
      unsigned int v70 = v63 + (__int16)v52 + *(_DWORD *)(*(void *)(v278 + 56) + 36LL);
      BOOL v71 = v70 >= btree_node_toc_required_capacity(v278, 0);
      uint64_t v19 = v267;
      if (v71) {
        goto LABEL_48;
      }
    }

    else
    {
      uint64_t v19 = v62;
      if (v68 > (unsigned __int16)v268)
      {
LABEL_48:
        a5 = v60;
        if (!v274)
        {
          a4 = v275;
          int v72 = obj_flags((uint64_t)v275);
          uint64_t v73 = v278;
          obj_unlock(v278, 2);
          obj_release(v73);
          v286 = 0LL;
          uint64_t v74 = v279[1];
          int v40 = v265;
          if (!v74) {
            uint64_t v74 = *(void *)(*v279 + 392LL);
          }
          uint64_t v75 = obj_subtype((uint64_t)a4);
          uint64_t v76 = btree_node_create(v74, v72 & 0xFFFFFC00, v75, v287, v19, &v286);
          int v45 = v273;
          if ((_DWORD)v76) {
            return v76;
          }
          __int16 v77 = (unint64_t *)(v279[49] + 32LL);
          do
            unint64_t v78 = __ldxr(v77);
          while (__stxr(v78 + 1, v77));
          goto LABEL_100;
        }

        if (v263) {
          LOWORD(v43) = v265 - 2;
        }
        if (v61 < 0)
        {
          LOWORD(v40) = v43 + 1;
          int v113 = 2840;
LABEL_136:
          uint64_t v114 = v257;
          goto LABEL_137;
        }

LABEL_128:
        BOOL v274 = 1;
LABEL_142:
        a4 = v275;
LABEL_143:
        int v113 = 0;
        LOWORD(v40) = v43 + 1;
LABEL_144:
        LODWORD(a8) = v42;
LABEL_145:
        a2 = v260;
        goto LABEL_146;
      }
    }

    uint64_t v42 = (v42 - v262);
    a5 = v60;
    if (!v274)
    {
      BOOL v274 = 0;
      if (v263) {
        LOWORD(v43) = v265 - 2;
      }
      goto LABEL_142;
    }

    int v83 = v61;
    uint64_t v58 = v257;
    if ((*v270 & 2) != 0 || v279[54] == v275[14])
    {
LABEL_126:
      if (v263) {
        LOWORD(v43) = v265 - 2;
      }
      goto LABEL_128;
    }

    int v79 = v276 - v252;
    HIDWORD(v276) += v252;
    if ((_DWORD)v277)
    {
      if (!(_WORD)v43
        || (unsigned __int16)(v42 - v273 + *(_WORD *)(v257 + 36)) <= (unsigned __int16)(v64 + *(_WORD *)(*(void *)(v278 + 56) + 36LL)))
      {
        goto LABEL_126;
      }
    }

    else if (!(_WORD)v43 || v83 >= (__int16)(v66 - WORD2(v276) - v67))
    {
      goto LABEL_126;
    }

    uint64_t v55 = v42;
    uint64_t v56 = a5;
    int v52 = v64;
    unsigned int v57 = v251;
    if ((v259 & 4) == 0)
    {
LABEL_56:
      int v80 = v275;
      unsigned int v81 = *(unsigned __int16 *)(v275[47] + 8LL * (unsigned __int16)v43 + 2);
      uint64_t v82 = v275[50];
      goto LABEL_73;
    }

uint64_t btree_node_insert( void *a1, unint64_t *a2, size_t a3, void *a4, unsigned int a5, uint64_t a6, unsigned __int16 *a7, _BYTE *a8)
{
  uint64_t v26 = *MEMORY[0x1895F89C0];
  MEMORY[0x1895F8858]();
  char v17 = &v23[-v16];
  bzero(&v23[-v16], v18);
  unsigned __int16 v25 = 0;
  BOOL v24 = 0;
  uint64_t result = bt_search_node_insert((uint64_t)a1, a2, a3, &v25, &v24);
  if (!(_DWORD)result)
  {
    if (a8) {
      *a8 = v24;
    }
    if (a7) {
      *a7 = v25;
    }
    if ((*(_WORD *)(a1[7] + 32LL) & 0xA) != 8) {
      goto LABEL_9;
    }
    unint64_t v20 = a1[51];
    if (*a4 > v20)
    {
      void *v17 = *a4 - v20;
      a4 = v17;
LABEL_9:
      if (v24) {
        return btree_node_entry_update((int)a1, v25, a2, a3, a4);
      }
      else {
        return btree_node_insert_internal((uint64_t)a1, v25, a2, a3, a4, a5, a6);
      }
    }

    uint64_t v21 = a1[1];
    if (v21) {
      size_t v22 = (const char *)(v21 + 3992);
    }
    else {
      size_t v22 = (const char *)(*(void *)(*(void *)(*a1 + 392LL) + 384LL) + 208LL);
    }
    log_err("%s:%d: %s invalid relative OID: %llu < root OID: %llu\n", "btree_node_insert", 2270, v22, *a4, v20);
    return 22LL;
  }

  return result;
}

uint64_t bt_update_with_hint( uint64_t *a1, uint64_t a2, unint64_t *a3, uint64_t a4, void *a5, unsigned int a6, uint64_t a7, uint64_t *a8)
{
  int v43 = a3;
  v50[1] = *MEMORY[0x1895F89C0];
  uint64_t v15 = a1[50];
  MEMORY[0x1895F8858]();
  char v17 = (void **)((char *)&v40 - v16);
  bzero((char *)&v40 - v16, v18);
  int v49 = 0LL;
  unsigned __int16 v48 = 0;
  if (!a1[52]) {
    return 22LL;
  }
  uint64_t v19 = btree_entry_size_check((uint64_t)a1, a4, a6);
  if (!(_DWORD)v19)
  {
    uint64_t v19 = obj_modify(a1, (v15 >> 3) & 2, a7);
    if (!(_DWORD)v19)
    {
      uint64_t v20 = a1[49];
      BOOL v21 = *(_DWORD *)(v20 + 16) < a4 || *(_DWORD *)(v20 + 20) < a6;
      BOOL v42 = v21;
      v50[0] = 0LL;
      BOOL v47 = 0;
      int v40 = a5;
      unsigned int v41 = a8;
      if (a8)
      {
        uint64_t v23 = *a8;
        if (*a8)
        {
          if ((uint64_t *)a8[1] == a1 && ((v42 | ((a1[50] & 0x10) >> 4)) & 1) == 0)
          {
            void *v17 = v23;
            if (v23 != obj_oid((uint64_t)a1)
              && !btree_node_get( a1,  v17,  a2,  (a7 != 0) | (((*(unsigned __int16 *)(a1[7] + 32) >> 3) & 1) << 6) | 6u,  0,  a7,  v50))
            {
              BOOL v24 = (uint64_t *)v50[0];
              if ((*(_WORD *)(*(void *)(v50[0] + 56) + 32LL) & 2) != 0
                && !bt_search_node(v50[0], v43, (unsigned __int16)a4, &v48, &v47)
                && v47)
              {
                if ((*(_WORD *)(v24[7] + 32) & 2) == 0) {
                  goto LABEL_53;
                }
                goto LABEL_39;
              }

              obj_unlock((uint64_t)v24, 2);
              obj_release(v24);
            }
          }
        }
      }

      uint64_t v19 = 2LL;
      obj_lock((uint64_t)a1, 2);
      obj_retain((char *)a1);
      uint64_t v26 = a1 + 7;
      uint64_t v25 = a1[7];
      if ((*(_WORD *)(v25 + 32) & 2) == 0)
      {
        char v27 = 0;
        uint64_t v28 = 2LL;
        BOOL v24 = a1;
        while (1)
        {
          if (!*(_DWORD *)(v25 + 36))
          {
            uint64_t v19 = v28;
            goto LABEL_34;
          }

          uint64_t v29 = bt_search_node((uint64_t)v24, v43, (unsigned __int16)a4, &v48, &v47);
          if ((_DWORD)v29
            || (unsigned int v30 = v48, v29 = btree_node_child_val((uint64_t)v24, v48, v17), (_DWORD)v29)
            || (uint64_t v29 = btree_node_get(a1, v17, a2, 3, *(_WORD *)(*v26 + 34LL) - 1, a7, (uint64_t *)&v49), (_DWORD)v29))
          {
            uint64_t v19 = v29;
            v50[0] = (uint64_t)v24;
            goto LABEL_55;
          }

          if ((a1[50] & 0x10) != 0 && v49[14] != *v17) {
            btree_node_child_id_update((uint64_t)v24, v30, v49 + 14, a7);
          }
          BOOL v31 = v42;
          if (v24 != a1) {
            BOOL v31 = 0;
          }
          if (!v31)
          {
            obj_unlock((uint64_t)v24, 2);
            obj_release(v24);
          }

          BOOL v24 = v49;
          if (!v49) {
            break;
          }
          uint64_t v28 = 0LL;
          uint64_t v19 = 0LL;
          uint64_t v26 = v49 + 7;
          uint64_t v25 = v49[7];
          char v27 = 1;
          if ((*(_WORD *)(v25 + 32) & 2) != 0) {
            goto LABEL_34;
          }
        }

        v50[0] = 0LL;
        goto LABEL_53;
      }

      char v27 = 0;
      BOOL v24 = a1;
LABEL_34:
      v50[0] = (uint64_t)v24;
      if ((*(_WORD *)(v24[7] + 32) & 2) == 0)
      {
        if ((v27 & 1) == 0) {
          goto LABEL_54;
        }
        goto LABEL_53;
      }

      uint64_t v19 = bt_search_node((uint64_t)v24, v43, (unsigned __int16)a4, &v48, &v47);
      if ((_DWORD)v19)
      {
LABEL_54:
        BOOL v24 = (uint64_t *)v50[0];
        if (v50[0])
        {
LABEL_55:
          obj_unlock((uint64_t)v24, 2);
          obj_release(v24);
        }

        char v39 = !v42;
        if (v24 == a1) {
          char v39 = 1;
        }
        if ((v39 & 1) == 0)
        {
          obj_unlock((uint64_t)a1, 2);
          obj_release(a1);
        }

        return v19;
      }

      if (!v47)
      {
LABEL_53:
        uint64_t v19 = 2LL;
        goto LABEL_54;
      }

LABEL_39:
      __int16 v46 = 0LL;
      int v45 = 0;
      unsigned __int16 v44 = 0;
      unsigned int v32 = v48;
      int v33 = btree_node_key_ptr((uint64_t)v24, v48, &v46, &v44);
      uint64_t v34 = v41;
      if (!v33)
      {
        uint64_t v35 = v46;
        uint64_t v36 = a1[1];
        if (!v36) {
          uint64_t v36 = *(void *)(*a1 + 392);
        }
        if (!((unsigned int (*)(uint64_t, const void *, void, unint64_t *, uint64_t, int *))a1[52])( v36,  v46,  v44,  v43,  a4,  &v45)
          && v45)
        {
          panic( "you can't change a key here!  (ekey %p eklen %d; key %p klen %d; n %p bt %p)\n",
            v35,
            v44,
            v43,
            a4,
            v24,
            a1);
        }
      }

      uint64_t v19 = btree_node_entry_update((uint64_t)v24, v32, v43, (unsigned __int16)a4, v40, (unsigned __int16)a6, a7);
      if ((_DWORD)v19) {
        goto LABEL_54;
      }
      uint64_t v37 = a1[49];
      unsigned int v38 = *(_DWORD *)(v37 + 16);
      if (*(_DWORD *)(v37 + 20) >= a6)
      {
        if (v38 >= a4 && (a1[50] & 0x80) == 0)
        {
LABEL_63:
          if (v34)
          {
            *uint64_t v34 = obj_oid((uint64_t)v24);
            v34[1] = (uint64_t)a1;
          }

          goto LABEL_54;
        }
      }

      else
      {
        *(_DWORD *)(v37 + 20) = a6;
      }

      obj_dirty((uint64_t)a1, a7, 0LL);
      goto LABEL_63;
    }
  }

  return v19;
}

  if (!(_DWORD)v9)
  {
    __int16 v13 = v22;
    if (v22)
    {
      if ((_DWORD)a4 != 1) {
        goto LABEL_48;
      }
LABEL_42:
      uint64_t v19 = *(void *)(v13[49] + 32);
      if (v19 <= v8[152])
      {
        uint64_t v20 = 0;
      }

      else if (*(_BYTE *)(a3 + 970))
      {
        uint64_t v20 = 1;
      }

      else
      {
        log_err( "%s:%d: %s tier2 free queue tree is too large: %lld nodes (limit %d) xid %lld\n",  "spaceman_checkpoint_traverse",  3137,  (const char *)(*(void *)(a1 + 384) + 208LL),  v19,  v8[152],  *(void *)(a2 + 16));
        uint64_t v20 = 1;
        __int16 v13 = v22;
      }

      *(_BYTE *)(a3 + 970) = v20;
      goto LABEL_48;
    }
  }

uint64_t bt_update( uint64_t *a1, uint64_t a2, unint64_t *a3, uint64_t a4, void *a5, unsigned int a6, uint64_t a7)
{
  return bt_update_with_hint(a1, a2, a3, a4, a5, a6, a7, 0LL);
}

uint64_t btree_node_entry_update_via_callback( uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, uint64_t a8, uint64_t (*a9)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t), uint64_t a10)
{
  uint64_t v10 = *(void *)(a1 + 56);
  if (*(_DWORD *)(v10 + 36) <= a2) {
    return 22LL;
  }
  __int16 v17 = *(_WORD *)(v10 + 32);
  uint64_t v18 = *(void *)(a1 + 376);
  if ((v17 & 4) != 0) {
    uint64_t v19 = (unsigned __int16 *)(v18 + 4LL * a2);
  }
  else {
    uint64_t v19 = (unsigned __int16 *)(v18 + 8LL * a2);
  }
  uint64_t v20 = *v19;
  BOOL v21 = (unsigned __int16 *)(v18 + 4LL * a2 + 2);
  if ((v17 & 4) == 0) {
    BOOL v21 = (unsigned __int16 *)(v18 + 8LL * a2 + 4);
  }
  uint64_t v22 = *v21;
  if (v20 == 0xFFFF)
  {
    uint64_t v23 = 0LL;
  }

  else if ((v17 & 4) != 0)
  {
    uint64_t v23 = (*(_DWORD *)(a1 + 400) >> 9) & 0x3FFF;
  }

  else
  {
    uint64_t v23 = *(unsigned __int16 *)(v18 + 8LL * a2 + 2);
  }

  if (v22 > 0xFFFD)
  {
    uint64_t v24 = 0LL;
    if (!(_DWORD)v23) {
      goto LABEL_17;
    }
  }

  else
  {
    uint64_t v24 = btree_node_val_len(a1, a2);
    if (!(_DWORD)v23) {
      goto LABEL_17;
    }
  }

  uint64_t result = btree_node_key_range_validate(a1, v20, v23);
  if ((_DWORD)result) {
    return result;
  }
LABEL_17:
  if (!(_DWORD)v24)
  {
    if ((_DWORD)v20 != 0xFFFF)
    {
LABEL_27:
      else {
        int v28 = a7;
      }
      uint64_t result = 22LL;
      if ((_DWORD)v23 == (_DWORD)a4 && v28)
      {
        uint64_t result = a9(*(void *)(a1 + 384) + v20, v23, a3, a4, *(void *)(a1 + 392) - v22, v24, a5, a6, a10);
        if (!(_DWORD)result)
        {
          obj_dirty(a1, a8, 0LL);
          return 0LL;
        }
      }

      return result;
    }

    return 22LL;
  }

  LODWORD(result) = btree_node_val_range_validate(a1, v22, v24);
  int v26 = result;
  if ((_DWORD)result) {
    uint64_t result = result;
  }
  else {
    uint64_t result = 22LL;
  }
  if ((_DWORD)v20 != 0xFFFF && v26 == 0) {
    goto LABEL_27;
  }
  return result;
}

uint64_t bt_remove_internal( uint64_t a1, uint64_t a2, int a3, unint64_t *a4, unsigned int a5, void *a6, unsigned int *a7, void *a8, unsigned int *a9, uint64_t a10)
{
  uint64_t v146 = *MEMORY[0x1895F89C0];
  __int128 v144 = 0u;
  __int128 v145 = 0u;
  __int128 v143 = 0u;
  uint64_t v142 = 0LL;
  MEMORY[0x1895F8858]();
  uint64_t v19 = (uint64_t *)((char *)&v111 - v18);
  bzero((char *)&v111 - v18, v20);
  uint64_t v140 = 0LL;
  uint64_t v141 = 0LL;
  uint64_t v139 = 0LL;
  unsigned __int16 v138 = a5;
  int v137 = 0;
  unsigned __int16 v136 = 0;
  if (!*(void *)(a1 + 416)) {
    return 22LL;
  }
  unint64_t v21 = *(void *)(a1 + 400);
  uint64_t v22 = (v21 >> 9) & 0x3FFF;
  if (!v22)
  {
    return 22LL;
  }

  if ((_DWORD)v22 != a5) {
    return 22LL;
  }
LABEL_4:
  int v128 = *(unsigned __int16 *)(*(void *)(a1 + 392) + 16LL);
  int v124 = a8;
  uint64_t v131 = a2;
  obj_lock(a1, 2);
  uint64_t v23 = obj_modify(a1, (*(_DWORD *)(a1 + 400) >> 3) & 2, a10);
  if ((_DWORD)v23)
  {
    uint64_t v24 = v23;
    obj_unlock(a1, 2);
    return v24;
  }

  int v121 = a6;
  uint64_t v123 = a10;
  int v122 = &v111;
  *(void *)&__int128 v143 = a1;
  obj_retain((char *)a1);
  uint64_t v26 = btri_search_node( a1,  a3,  1,  a4,  &v138,  (unsigned __int16)a5,  (_WORD *)&v143 + 4,  (BOOL *)((unint64_t)&v143 | 0xA));
  if ((_DWORD)v26)
  {
LABEL_10:
    uint64_t v24 = v26;
    goto LABEL_11;
  }

  uint64_t v132 = (BOOL *)((unint64_t)&v143 | 0xA);
  uint64_t v126 = (_WORD *)&v143 + 4;
  uint64_t v27 = 0LL;
  uint64_t v129 = 0LL;
  int v120 = 0;
  char v29 = 0;
  int v113 = a9;
  uint64_t v118 = (_WORD *)&v144 + 4;
  int v119 = (v128 + 7) & 0x1FFF8;
  int v125 = &v145;
  uint64_t v116 = (_WORD *)&v145 + 4;
  uint64_t v117 = (BOOL *)&v144 + 10;
  __int16 v115 = (BOOL *)&v145 + 10;
  unint64_t v127 = a4;
  uint64_t v30 = v123;
  uint64_t v114 = a7;
  BOOL v31 = v121;
  while (1)
  {
    if ((v29 & 1) != 0)
    {
      int v130 = 1;
      uint64_t v32 = v144;
    }

    else
    {
      uint64_t v32 = v144;
      if (BYTE10(v143)) {
        BOOL v33 = WORD4(v143) == 0;
      }
      else {
        BOOL v33 = 0;
      }
      if (v33)
      {
        int v120 = WORD4(v144);
        int v130 = 1;
        uint64_t v27 = v143;
        uint64_t v129 = v144;
      }

      else
      {
        int v130 = 0;
      }
    }

    uint64_t v34 = v132;
    if (!v32 || (*(_DWORD *)(a1 + 400) & 0x7FFE00) != 0) {
      goto LABEL_94;
    }
    uint64_t v135 = 0LL;
    if (BYTE10(v143))
    {
      uint64_t v35 = btree_node_key_ptr(v32, WORD4(v144), &v141, &v136);
      if ((_DWORD)v35) {
        goto LABEL_106;
      }
      __int16 v36 = v128;
      if ((*(void *)(v144 + 400) & 0x40LL) == 0) {
        __int16 v36 = v119;
      }
      __int16 v37 = v136;
      if ((*(void *)(v144 + 400) & 0x40LL) == 0) {
        __int16 v37 = (v136 + 7) & 0xFFF8;
      }
      __int16 v38 = v36 - v37;
      if (v38 < 0) {
        __int16 v39 = 0;
      }
      else {
        __int16 v39 = v38;
      }
    }

    else
    {
      __int16 v39 = 0;
    }

    __int16 v134 = btree_node_largest_key_len(v143);
    int v40 = (void *)v144;
    __int16 v133 = (*(_WORD *)(v143 + 406) & 0x7F) + 8;
    if (btree_node_has_room(v144, 1u, &v134, &v133, v39, 0, 0LL))
    {
      uint64_t v30 = v123;
LABEL_36:
      uint64_t v34 = v132;
      goto LABEL_94;
    }

    unsigned __int16 v41 = WORD4(v144);
    if (!BYTE10(v144)) {
      unsigned __int16 v41 = WORD4(v144) + 1;
    }
    BOOL v42 = a4;
    uint64_t v43 = v138;
    uint64_t v35 = bt_shift_or_split( (void *)a1,  (void *)v145,  WORD4(v145),  v40,  v41,  v42,  v138,  1LL,  &v134,  &v133,  v39,  v131,  v123,  &v135);
    if ((_DWORD)v35)
    {
LABEL_106:
      uint64_t v24 = v35;
      goto LABEL_107;
    }

    uint64_t v44 = v135;
    uint64_t v34 = v132;
    if (!v135)
    {
      a4 = v127;
      uint64_t v30 = v123;
      goto LABEL_94;
    }

    uint64_t v45 = v144;
    uint64_t v30 = v123;
    uint64_t v112 = v144;
    if ((void)v145)
    {
      ++WORD4(v145);
      if ((void)v144)
      {
        if (v129 == (void)v144 || (void)v144 == v27)
        {
          uint64_t v49 = v144;
        }

        else
        {
          uint64_t v46 = v135;
          uint64_t v47 = v144;
          obj_unlock(v144, 2);
          uint64_t v48 = v47;
          uint64_t v44 = v46;
          obj_release(v48);
          uint64_t v49 = 0LL;
        }
      }

      else
      {
        uint64_t v49 = 0LL;
      }

      goto LABEL_58;
    }

    *(void *)&__int128 v145 = v144;
    if (*(_DWORD *)(*(void *)(v135 + 56) + 36LL))
    {
      uint64_t v111 = v135;
      uint64_t v35 = btree_node_key_ptr(v135, 0, &v141, &v136);
      if ((_DWORD)v35) {
        goto LABEL_106;
      }
      uint64_t v45 = v145;
      int v50 = v141;
      uint64_t v51 = v136;
    }

    else
    {
      if ((a3 & 1) != 0)
      {
        if (!*(_DWORD *)(*(void *)(v144 + 56) + 36LL)) {
          goto LABEL_149;
        }
        uint64_t v49 = 0LL;
        WORD4(v145) = 0;
        BYTE10(v145) = 1;
        goto LABEL_58;
      }

      uint64_t v111 = v135;
      int v50 = v127;
      uint64_t v51 = v43;
    }

    uint64_t v24 = bt_search_node(v45, v50, v51, v116, v115);
    if ((_DWORD)v24) {
      goto LABEL_107;
    }
    uint64_t v49 = 0LL;
    uint64_t v44 = v111;
LABEL_58:
    BOOL v52 = v129 != (void)v145 || v129 == 0;
    int v53 = v120;
    if (!v52) {
      int v53 = WORD4(v145);
    }
    int v120 = v53;
    *(void *)&__int128 v144 = v44;
    if (a3)
    {
      if (!*(_DWORD *)(*(void *)(v44 + 56) + 36LL))
      {
LABEL_149:
        uint64_t v24 = 2LL;
LABEL_107:
        uint64_t v142 = v27;
LABEL_108:
        uint64_t v28 = v129;
        goto LABEL_109;
      }

      WORD4(v144) = 0;
      BYTE10(v144) = 1;
    }

    else
    {
      uint64_t v35 = bt_search_node(v44, v127, v43, v118, v117);
      if ((_DWORD)v35) {
        goto LABEL_106;
      }
    }

    uint64_t v54 = v143;
    obj_unlock(v143, 2);
    obj_release(v54);
    *(void *)&__int128 v143 = 0LL;
    uint64_t v35 = btree_node_child_val(v144, WORD4(v144), v19);
    if ((_DWORD)v35) {
      goto LABEL_106;
    }
    uint64_t v35 = btree_node_get( (void *)a1,  v19,  v131,  3,  *(_WORD *)(*(void *)(v144 + 56) + 34LL) - 1,  v30,  (uint64_t *)&v143);
    if ((_DWORD)v35) {
      goto LABEL_106;
    }
    uint64_t v55 = v143;
    if ((*(_BYTE *)(a1 + 400) & 0x10) != 0)
    {
      a4 = v127;
      if (*(void *)(v143 + 112) != *v19)
      {
        btree_node_child_id_update(v144, WORD4(v144), (uint64_t *)(v143 + 112), v30);
        uint64_t v55 = v143;
      }
    }

    else
    {
      a4 = v127;
    }

    uint64_t v35 = btri_search_node(v55, a3, 1, a4, &v138, (unsigned __int16)a5, v126, v132);
    if ((_DWORD)v35) {
      goto LABEL_106;
    }
    if (v129 == v112)
    {
      int v58 = WORD4(v144);
      uint64_t v56 = v49;
      if (v129 == a1 && !WORD4(v144))
      {
        uint64_t v27 = v144;
        uint64_t v129 = a1;
        uint64_t v34 = v132;
        BOOL v31 = v121;
        goto LABEL_94;
      }

      int v57 = v130;
      BOOL v31 = v121;
      if (!WORD4(v144))
      {
        int v120 = WORD4(v145);
        goto LABEL_85;
      }

      goto LABEL_89;
    }

    uint64_t v56 = v49;
    if ((v130 & 1) != 0)
    {
      int v57 = 1;
      BOOL v31 = v121;
      goto LABEL_90;
    }

    int v58 = WORD4(v144);
    BOOL v31 = v121;
    if (BYTE10(v144) && !WORD4(v144))
    {
      int v120 = WORD4(v145);
      int v57 = 1;
LABEL_85:
      uint64_t v129 = v145;
      uint64_t v27 = v144;
      goto LABEL_90;
    }

    int v57 = 0;
    if (BYTE10(v143) && !WORD4(v143))
    {
      int v57 = 1;
LABEL_89:
      uint64_t v129 = v144;
      uint64_t v27 = v143;
      int v120 = v58;
    }

LABEL_90:
    int v130 = v57;
    if (!v56) {
      goto LABEL_36;
    }
    uint64_t v34 = v132;
    if (v56 != v129 && v56 != v27)
    {
      obj_unlock(v56, 2);
      obj_release(v56);
      goto LABEL_36;
    }

    uint64_t v54 = *(void *)(v9 + 56);
    if ((*(_WORD *)(v54 + 32) & 4) != 0)
    {
      if ((*(_BYTE *)(v9 + 400) & 4) == 0)
      {
LABEL_96:
        *(_WORD *)(v9 + 440) = 0;
        obj_dirty(a1, a4, 0LL);
        obj_dirty(a2, a4, 0LL);
        return v15;
      }

      uint64_t v55 = 4;
    }

    else
    {
      uint64_t v55 = 8;
    }

    uint64_t v56 = btree_node_toc_required_capacity(v9, 8);
    goto LABEL_96;
  }

  return v15;
}

LABEL_94:
    if ((*(_WORD *)(*(void *)(v143 + 56) + 32LL) & 2) != 0) {
      break;
    }
    uint64_t v59 = v145;
    if ((void)v145 && (void)v145 != v129 && (void)v145 != v27)
    {
      obj_unlock(v145, 2);
      obj_release(v59);
    }

    __int128 *v125 = v144;
    __int128 v144 = v143;
    *(void *)&__int128 v143 = 0LL;
    uint64_t v35 = btree_node_child_val(v144, WORD4(v144), v19);
    if (!(_DWORD)v35)
    {
      uint64_t v35 = btree_node_get( (void *)a1,  v19,  v131,  3,  *(_WORD *)(*(void *)(v144 + 56) + 34LL) - 1,  v30,  (uint64_t *)&v143);
      if (!(_DWORD)v35)
      {
        uint64_t v60 = v143;
        if ((*(_BYTE *)(a1 + 400) & 0x10) != 0)
        {
          a4 = v127;
          if (*(void *)(v143 + 112) != *v19)
          {
            btree_node_child_id_update(v144, WORD4(v144), (uint64_t *)(v143 + 112), v30);
            uint64_t v60 = v143;
          }
        }

        else
        {
          a4 = v127;
        }

        uint64_t v35 = btri_search_node(v60, a3, 1, a4, &v138, (unsigned __int16)a5, v126, v132);
        char v29 = v130;
        if (!(_DWORD)v35) {
          continue;
        }
      }
    }

    goto LABEL_106;
  }

  uint64_t v142 = v27;
  uint64_t v65 = btri_search_node(v143, a3, 1, a4, &v138, (unsigned __int16)a5, v126, v34);
  if ((_DWORD)v65) {
    goto LABEL_136;
  }
  if (!BYTE10(v143))
  {
    uint64_t v24 = 2LL;
    goto LABEL_108;
  }

  if (!v31) {
    goto LABEL_146;
  }
  uint64_t v65 = btree_node_key_ptr(v143, 0, &v140, (_WORD *)&v137 + 1);
  if ((_DWORD)v65)
  {
LABEL_136:
    uint64_t v24 = v65;
    goto LABEL_108;
  }

  unsigned int v66 = HIWORD(v137);
  unsigned int v67 = v114;
  unsigned int v68 = *v114;
  if (*v114 >= HIWORD(v137)) {
    size_t v69 = HIWORD(v137);
  }
  else {
    size_t v69 = v68;
  }
  memcpy(v31, v140, v69);
  *unsigned int v67 = v66;
  BOOL v70 = v68 >= v66;
  uint64_t v30 = v123;
  if (!v70)
  {
    uint64_t v24 = 34LL;
    goto LABEL_108;
  }

LABEL_146:
  uint64_t v28 = v129;
  if (v124)
  {
    uint64_t v71 = btree_node_val_ptr((void *)v143, 0, &v139, (__int16 *)&v137);
    if ((_DWORD)v71) {
      goto LABEL_148;
    }
    unsigned int v72 = (unsigned __int16)v137;
    unsigned int v73 = (unsigned __int16)v137 == 65534 ? 0 : (unsigned __int16)v137;
    uint64_t v74 = v113;
    unsigned int v75 = *v113;
    size_t v76 = *v113 >= v73 ? v73 : v75;
    memcpy(v124, v139, v76);
    unsigned int *v74 = v72;
    uint64_t v30 = v123;
    if (v75 < v73)
    {
      uint64_t v24 = 34LL;
      goto LABEL_109;
    }
  }

  btree_node_remove(v143, WORD4(v143), v30);
  __int16 v77 = (unint64_t *)(*(void *)(a1 + 392) + 24LL);
  do
    unint64_t v78 = __ldxr(v77);
  while (__stxr(v78 - 1, v77));
  obj_dirty(a1, v30, 0LL);
  if (WORD4(v143) || (*(_DWORD *)(*(void *)(v143 + 56) + 36LL) ? (BOOL v79 = (void)v144 == 0LL) : (BOOL v79 = 1), v79))
  {
    uint64_t v24 = 0LL;
  }

  else
  {
    uint64_t v87 = btree_node_key_ptr(v143, 0, &v141, &v136);
    uint64_t v24 = v87;
    if ((_DWORD)v87 || (uint64_t v24 = btree_node_entry_update(v144, WORD4(v144), v141, v136, 0LL), (_DWORD)v24))
    {
      uint64_t v88 = *(void *)(a1 + 8);
      if (v88) {
        int v89 = (const char *)(v88 + 3992);
      }
      else {
        int v89 = (const char *)(*(void *)(*(void *)(*(void *)a1 + 392LL) + 384LL) + 208LL);
      }
      log_err("%s:%d: %s btree_node_key_update failed: %d\n", "bt_remove_internal", 5065, v89, v24);
    }

    uint64_t v28 = v129;
  }

  int is_underused = btree_node_is_underused(a1, v143);
  uint64_t v81 = v145;
  int v82 = v130;
  if ((void)v145)
  {
    if ((void)v145 != v28 && (void)v145 != v27)
    {
      obj_unlock(v145, 2);
      obj_release(v81);
      int v82 = v130;
    }

    *(void *)&__int128 v145 = 0LL;
  }

  uint64_t v83 = v144;
  if ((void)v144)
  {
    if ((void)v144 != v28 && (void)v144 != v27)
    {
      obj_unlock(v144, 2);
      obj_release(v83);
      int v82 = v130;
    }

    *(void *)&__int128 v144 = 0LL;
  }

  if (v82 && *(_DWORD *)(*(void *)(v143 + 56) + 36LL))
  {
    uint64_t v71 = btree_node_key_ptr(v143, 0, &v141, &v136);
    if ((_DWORD)v71)
    {
LABEL_148:
      uint64_t v24 = v71;
      goto LABEL_109;
    }

    if (v28)
    {
      uint64_t v84 = btree_node_entry_update(v129, (unsigned __int16)v120, v141, v136, 0LL);
      uint64_t v24 = v84;
      if ((_DWORD)v84)
      {
        uint64_t v85 = *(void *)(a1 + 8);
        if (v85) {
          int v86 = (const char *)(v85 + 3992);
        }
        else {
          int v86 = (const char *)(*(void *)(*(void *)(*(void *)a1 + 392LL) + 384LL) + 208LL);
        }
        log_err("%s:%d: %s btree_node_key_update failed: %d\n", "bt_remove_internal", 5091, v86, v84);
      }

      if (v129 != (void)v145 && v129 != (void)v144 && v129 != (void)v143)
      {
        uint64_t v90 = v129;
        obj_unlock(v129, 2);
        obj_release(v90);
      }
    }

    else
    {
      uint64_t v24 = 0LL;
    }

    uint64_t v91 = v142;
    uint64_t v92 = v142 + 56;
    if ((*(_WORD *)(*(void *)(v142 + 56) + 32LL) & 2) == 0)
    {
      uint64_t v93 = v138;
      int v94 = v141;
      while (1)
      {
        LOWORD(v135) = 0;
        LOBYTE(v134) = 0;
        uint64_t v27 = v91;
        uint64_t v95 = bt_search_node(v91, v127, v93, &v135, (BOOL *)&v134);
        if ((_DWORD)v95)
        {
          uint64_t v24 = v95;
          goto LABEL_12;
        }

        if (!(_BYTE)v134) {
          break;
        }
        if (*(_WORD *)(*(void *)v92 + 34LL) == 1)
        {
          uint64_t v101 = *(void *)(a1 + 8);
          if (v101) {
            uint64_t v102 = (const char *)(v101 + 3992);
          }
          else {
            uint64_t v102 = (const char *)(*(void *)(*(void *)(*(void *)a1 + 392LL) + 384LL) + 208LL);
          }
          uint64_t v103 = obj_oid(v27);
          int v104 = obj_subtype(v27);
          log_err( "%s:%d: %s minkey update traversal unexpectedly found the removed key in level 1 node; oid %llu subtype 0x%x level %d\n",
            "bt_remove_internal",
            5114,
            v102,
            v103,
            v104,
            *(unsigned __int16 *)(*(void *)v92 + 34LL));
          break;
        }

        unsigned int v96 = (unsigned __int16)v135;
        int v97 = btree_node_entry_update(v27, (unsigned __int16)v135, v94, v136, 0LL);
        if (v97)
        {
          uint64_t v98 = *(void *)(a1 + 8);
          if (v98) {
            uint64_t v99 = (const char *)(v98 + 3992);
          }
          else {
            uint64_t v99 = (const char *)(*(void *)(*(void *)(*(void *)a1 + 392LL) + 384LL) + 208LL);
          }
          log_err("%s:%d: %s btree_node_key_update failed: %d\n", "bt_remove_internal", 5120, v99, v97);
        }

        uint64_t v24 = btree_node_child_val(v27, v96, v19);
        __int16 v100 = *(_WORD *)(*(void *)v92 + 34LL);
        uint64_t v142 = 0LL;
        if (!(_DWORD)v24) {
          uint64_t v24 = btree_node_get((void *)a1, v19, v131, 3, v100 - 1, v123, &v142);
        }
        if (v27 != (void)v145 && v27 != (void)v144 && v27 != (void)v143)
        {
          obj_unlock(v27, 2);
          obj_release(v27);
        }

        if (!(_DWORD)v24)
        {
          uint64_t v91 = v142;
          uint64_t v92 = v142 + 56;
          if ((*(_WORD *)(*(void *)(v142 + 56) + 32LL) & 2) == 0) {
            continue;
          }
        }

        goto LABEL_227;
      }

      uint64_t v24 = 0LL;
    }
  }

  else if (v28 && v28 != (void)v145 && v28 != (void)v143)
  {
    obj_unlock(v28, 2);
    obj_release(v28);
  }

LABEL_227:
  uint64_t v105 = v142;
  if (v142)
  {
    if (v142 != (void)v145 && v142 != (void)v144 && v142 != (void)v143)
    {
      obj_unlock(v142, 2);
      obj_release(v105);
    }

    uint64_t v142 = 0LL;
  }

  if (!is_underused)
  {
    uint64_t v106 = 0LL;
    unsigned __int16 v108 = 0;
    goto LABEL_240;
  }

  if (WORD4(v143) || !*(_DWORD *)(*(void *)(v143 + 56) + 36LL))
  {
    uint64_t v106 = 0LL;
    unsigned __int16 v107 = 0;
    goto LABEL_236;
  }

  uint64_t v26 = btree_node_key_ptr(v143, 0, &v141, &v136);
  if ((_DWORD)v26) {
    goto LABEL_10;
  }
  unsigned __int16 v107 = v136;
  unint64_t v110 = (unint64_t *)_apfs_malloc(v136);
  uint64_t v106 = v110;
  if (v110) {
    memcpy(v110, v141, v136);
  }
  uint64_t v24 = 0LL;
LABEL_236:
  if (v106)
  {
    unsigned __int16 v108 = v107;
  }

  else
  {
    uint64_t v106 = v127;
    unsigned __int16 v108 = v138;
  }

LABEL_240:
  uint64_t v109 = v143;
  obj_unlock(v143, 2);
  obj_release(v109);
  *(void *)&__int128 v143 = 0LL;
  if (is_underused)
  {
    bt_merge_up(a1, v131, v106, v108, v123);
    if (v106 != v127) {
      _apfs_free(v106, v108);
    }
  }

LABEL_11:
  uint64_t v27 = 0LL;
LABEL_12:
  uint64_t v28 = 0LL;
LABEL_109:
  uint64_t v61 = v145;
  if ((void)v145)
  {
    if ((void)v145 != v28 && (void)v145 != v27)
    {
      obj_unlock(v145, 2);
      obj_release(v61);
    }

    *(void *)&__int128 v145 = 0LL;
  }

  uint64_t v63 = v144;
  if ((void)v144)
  {
    if ((void)v144 != v28 && (void)v144 != v27)
    {
      obj_unlock(v144, 2);
      obj_release(v63);
    }

    *(void *)&__int128 v144 = 0LL;
  }

  uint64_t v64 = v143;
  if ((void)v143)
  {
    if ((void)v143 != v28 && (void)v143 != v27)
    {
      obj_unlock(v143, 2);
      obj_release(v64);
    }

    *(void *)&__int128 v143 = 0LL;
  }

  if (v28 && v28 != (void)v145 && v28 != (void)v144)
  {
    obj_unlock(v28, 2);
    obj_release(v28);
    uint64_t v27 = v142;
  }

  if (v27 && v27 != (void)v145 && v27 != (void)v144 && v27 != (void)v143)
  {
    obj_unlock(v27, 2);
    obj_release(v27);
  }

  return v24;
}

  int v14 = btree_delete((uint64_t)v18, a4, a6);
  uint64_t tree = v14;
  if ((_DWORD)v14)
  {
    uint64_t v15 = strerror(v14);
    log_err( "%s:%d: %s Failed to delete supplemental tree (type %d): %d (%s)\n",  "supplemental_tree_destroy",  167,  (const char *)(a1 + 3992),  a3,  tree,  v15);
  }

  obj_release(v18);
  return tree;
}

  uint64_t v8 = tx_barrier_internal(a1, a2, 0);
  if (v6) {
    pthread_mutex_unlock((pthread_mutex_t *)v4);
  }
  return v8;
}

uint64_t btri_search_node( uint64_t a1, char a2, int a3, unint64_t *a4, _WORD *a5, unsigned int a6, _WORD *a7, BOOL *a8)
{
  if ((a2 & 1) == 0) {
    return bt_search_node(a1, a4, (unsigned __int16)*a5, a7, a8);
  }
  if (!*(_DWORD *)(*(void *)(a1 + 56) + 36LL)) {
    return 2LL;
  }
  uint64_t v10 = 0LL;
  *a7 = 0;
  *a8 = 1;
  if (a3)
  {
    __src = 0LL;
    unsigned __int16 v14 = 0;
    uint64_t v10 = btree_node_key_ptr(a1, 0, &__src, &v14);
    if (!(_DWORD)v10)
    {
      if (v14 >= a6) {
        size_t v12 = a6;
      }
      else {
        size_t v12 = v14;
      }
      *a5 = v12;
      memcpy(a4, __src, v12);
    }
  }

  return v10;
}

void btree_node_remove(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a1 + 56);
  int v7 = *(_WORD *)(v6 + 32) & 4;
  if (v7) {
    unsigned int v8 = (*(_DWORD *)(a1 + 400) >> 9) & 0x3FFF;
  }
  else {
    unsigned int v8 = *(unsigned __int16 *)(*(void *)(a1 + 376) + 8LL * a2 + 2);
  }
  if (*(unsigned __int16 *)(a1 + 440) <= v8)
  {
    *(_WORD *)(a1 + 440) = 0;
    int v7 = *(_WORD *)(v6 + 32) & 4;
  }

  uint64_t v9 = *(void *)(a1 + 376);
  uint64_t v10 = (unsigned __int16 *)(v9 + 4LL * a2);
  unsigned int v11 = (unsigned __int16 *)(v9 + 8LL * a2);
  if (v7) {
    size_t v12 = v10;
  }
  else {
    size_t v12 = v11;
  }
  uint64_t v13 = *v12;
  uint64_t v14 = *(void *)(a1 + 400);
  if ((v14 & 0x40) != 0) {
    unsigned __int16 v15 = v8;
  }
  else {
    unsigned __int16 v15 = (v8 + 7) & 0xFFF8;
  }
  if (v13 != 0xFFFF)
  {
    int v16 = btree_node_key_range_validate(a1, v13, v15);
    uint64_t v6 = *(void *)(a1 + 56);
    uint64_t v14 = *(void *)(a1 + 400);
    if (!v16)
    {
      unsigned __int16 v17 = (v15 + 7) & 0xFFF8;
      if ((v14 & 0x40) != 0) {
        unsigned __int16 v17 = v15;
      }
      if (v17 >= 4u)
      {
        uint64_t v18 = (_WORD *)(*(void *)(a1 + 384) + v13);
        v18[1] = v17;
        *uint64_t v18 = *(_WORD *)(v6 + 48);
        *(_WORD *)(v6 + 48) = v13;
      }

      *(_WORD *)(v6 + 50) += v17;
      uint64_t v14 = *(void *)(a1 + 400);
    }
  }

  uint64_t v19 = *(void *)(a1 + 376);
  uint64_t v20 = v19 + 4LL * a2 + 2;
  uint64_t v21 = v19 + 8LL * a2 + 4;
  if ((*(_WORD *)(v6 + 32) & 4) != 0) {
    uint64_t v22 = (unsigned __int16 *)v20;
  }
  else {
    uint64_t v22 = (unsigned __int16 *)v21;
  }
  unint64_t v23 = *v22;
  unsigned __int16 v24 = btree_node_val_len(a1, a2);
  if ((v14 & 0x40) != 0) {
    unsigned __int16 v25 = v24;
  }
  else {
    unsigned __int16 v25 = (v24 + 7) & 0xFFF8;
  }
  if (v23 <= 0xFFFD)
  {
    int v26 = btree_node_val_range_validate(a1, v23, v25);
    uint64_t v6 = *(void *)(a1 + 56);
    if (!v26)
    {
      if ((*(_BYTE *)(a1 + 400) & 0x40) != 0) {
        unsigned __int16 v27 = v25;
      }
      else {
        unsigned __int16 v27 = (v25 + 7) & 0xFFF8;
      }
      if (v27 >= 4u)
      {
        uint64_t v28 = (_WORD *)(*(void *)(a1 + 392) - v23);
        v28[1] = v27;
        _WORD *v28 = *(_WORD *)(v6 + 52);
        *(_WORD *)(v6 + 52) = v23;
      }

      *(_WORD *)(v6 + 54) += v27;
    }
  }

  unsigned int v29 = *(_DWORD *)(v6 + 36) - 1;
  if (v29 > a2)
  {
    btree_node_toc_shift(a1, a2, -1);
    uint64_t v6 = *(void *)(a1 + 56);
    unsigned int v29 = *(_DWORD *)(v6 + 36) - 1;
  }

  *(_DWORD *)(v6 + 36) = v29;
  __int16 v30 = *(_WORD *)(v6 + 32);
  if ((v30 & 4) != 0)
  {
    if ((*(_BYTE *)(a1 + 400) & 4) == 0) {
      goto LABEL_50;
    }
    unsigned int v31 = 4;
  }

  else
  {
    unsigned int v31 = 8;
  }

  unsigned int v32 = *(unsigned __int16 *)(v6 + 42) / v31;
  if (v32 - v29 >= 0x10)
  {
    if ((v30 & 4) == 0)
    {
      __int16 v33 = 8;
LABEL_49:
      unsigned __int16 v40 = v33 * v31;
      memmove( (void *)(*(void *)(a1 + 384) - (unsigned __int16)(v33 * v31)),  *(const void **)(a1 + 384),  *(unsigned __int16 *)(v6 + 44));
      *(void *)(a1 + 384) -= v40;
      uint64_t v41 = *(void *)(a1 + 56);
      *(_WORD *)(v41 + 42) -= v40;
      *(_WORD *)(v41 + 46) += v40;
      goto LABEL_50;
    }

    unint64_t v34 = *(void *)(a1 + 400);
    if ((v30 & 2) != 0) {
      unint64_t v35 = v34 >> 23;
    }
    else {
      LODWORD(v35) = (HIWORD(v34) & 0x7F) + 8;
    }
    unint64_t v36 = (((v34 >> 27) & 0x1F000) - 56) / (((v34 >> 9) & 0x3FFF) + (unsigned __int16)v35 + 4);
    if (v32 > (v36 & 0xFFFE))
    {
      unsigned __int16 v37 = v36 & 0xFFFE;
      int v38 = v32 - 8;
      __int16 v39 = v32 - v37;
      if (v38 >= v37) {
        __int16 v33 = 8;
      }
      else {
        __int16 v33 = v39;
      }
      goto LABEL_49;
    }
  }

LABEL_50:
  obj_dirty(a1, a3, 0LL);
}

uint64_t btree_node_is_underused(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 56);
  int v3 = *(unsigned __int16 *)(v2 + 32);
  if ((~v3 & 3) == 0) {
    return 0LL;
  }
  unsigned int v4 = *(_DWORD *)(v2 + 36);
  if (!v4) {
    return 1LL;
  }
  if (*(void *)(a1 + 432) == *(void *)(a2 + 112)) {
    return 0LL;
  }
  if ((v3 & 4) != 0 && (*(_BYTE *)(a2 + 400) & 4) == 0) {
    return v4 < *(unsigned __int16 *)(v2 + 42) >> 3;
  }
  __int16 v7 = obj_size_phys(a2);
  if ((*(_WORD *)(*(void *)(a2 + 56) + 32LL) & 1) != 0) {
    __int16 v8 = -96;
  }
  else {
    __int16 v8 = -56;
  }
  return btree_node_free_space_total(a2) > (unsigned __int16)((v8 + v7) & 0xFFFE) >> 1;
}

void bt_merge_up(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v44 = a2;
  uint64_t v53 = *MEMORY[0x1895F89C0];
  MEMORY[0x1895F8858]();
  uint64_t v10 = (uint64_t *)((char *)&v42 - v9);
  bzero((char *)&v42 - v9, v11);
  uint64_t v12 = *(void *)(a1 + 56);
  if (v12)
  {
    memset(v52, 0, sizeof(v52));
    unsigned int v13 = *(unsigned __int16 *)(v12 + 34);
    if (v13 >= 6)
    {
      uint64_t v14 = v13 + 11;
      uint64_t v16 = (unsigned __int16)(v13 + 11);
      unsigned __int16 v15 = (uint64_t *)_apfs_malloc(8 * v16);
      uint64_t v45 = _apfs_malloc(2 * v16);
    }

    else
    {
      uint64_t v14 = 8LL;
      uint64_t v45 = v51;
      unsigned __int16 v15 = (uint64_t *)v52;
    }

    obj_lock(a1, 2);
    if (obj_modify(a1, (*(_DWORD *)(a1 + 400) >> 3) & 2, a5))
    {
      obj_unlock(a1, 2);
      return;
    }

    v51[0] = 0LL;
    v51[1] = 0LL;
    int v47 = 0;
    int v48 = 0;
    uint64_t *v15 = a1;
    obj_retain((char *)a1);
    LOWORD(v17) = 0;
    uint64_t v18 = *v15;
    if ((*(_WORD *)(*(void *)(*v15 + 56) + 32LL) & 2) == 0)
    {
      uint64_t v19 = 0LL;
      uint64_t v17 = 0LL;
      uint64_t v49 = 0LL;
      int v50 = 0LL;
      BOOL v46 = 0;
      __int16 v20 = v14;
      uint64_t v43 = v14;
      if ((v14 & 0xFFFE) == 0) {
        __int16 v20 = 1;
      }
      uint64_t v21 = (unsigned __int16)(v20 - 1);
      uint64_t v22 = v15 + 1;
      do
      {
        if (v21 == v17)
        {
          LOWORD(v14) = v43;
          LOWORD(v17) = v43 - 1;
          goto LABEL_65;
        }

        *uint64_t v10 = 0LL;
        if (btree_node_child_val(*(v22 - 1), (unsigned __int16)v45[v17], v10)
          || btree_node_get( (void *)a1,  v10,  v44,  3,  *(_WORD *)(*(void *)(*(v22 - 1) + 56) + 34LL) - 1,  a5,  v22))
        {
          goto LABEL_64;
        }

        uint64_t v18 = *v22;
        if ((*(_BYTE *)(a1 + 400) & 0x10) != 0 && *(void *)(v18 + 112) != *v10)
        {
          btree_node_child_id_update(*(v22 - 1), (unsigned __int16)v45[v17], (uint64_t *)(v18 + 112), a5);
          uint64_t v18 = *v22;
        }

        ++v19;
        ++v22;
        ++v17;
      }

      while ((*(_WORD *)(*(void *)(v18 + 56) + 32LL) & 2) == 0);
      if ((_WORD)v17)
      {
        unsigned __int16 v23 = v17;
        LOWORD(v14) = v43;
        while (1)
        {
          uint64_t v24 = ((__int16)v23 - 1);
          else {
            uint64_t v25 = v15[(__int16)v23 + 1];
          }
          bt_merge_nodes( a1,  v15[v24],  (unsigned __int16)v45[v24],  v15[v23],  (unsigned __int16)v45[v23],  v25,  v44,  a5);
          int v26 = *(_DWORD *)(*(void *)(v15[v23] + 56) + 36LL);
          if ((__int16)v23 < 2 || v26)
          {
            if (v26)
            {
              int v48 = 0;
              uint64_t v35 = *(void *)(a1 + 8);
              if (!v35) {
                uint64_t v35 = *(void *)(*(void *)a1 + 392LL);
              }
              unint64_t v36 = v50;
              int v37 = (*(uint64_t (**)(uint64_t, void *, void, uint64_t, void, int *))(a1 + 416))( v35,  v50,  HIWORD(v47),  v49,  (unsigned __int16)v47,  &v48);
              if (!v37 && v48) {
                int v37 = btree_node_entry_update(v15[v24], (unsigned __int16)v45[v24], v36, HIWORD(v47), 0LL);
              }
              if (v37) {
                goto LABEL_65;
              }
            }
          }

          else if (!v45[v24])
          {
            uint64_t v27 = (unsigned __int16)(v23 - 1);
            if (v23 != 1)
            {
              uint64_t v28 = v15[(unsigned __int16)(v23 - 1)];
              if (*(_DWORD *)(*(void *)(v28 + 56) + 36LL))
              {
                unsigned int v29 = &v45[v27];
                int v30 = v27 - 1;
                --v23;
                while (1)
                {
                  if (*v29--) {
                    goto LABEL_25;
                  }
                  int v32 = btree_node_key_ptr(v28, 0, &v50, (_WORD *)&v47 + 1);
                  if (v32) {
                    goto LABEL_60;
                  }
                  int v48 = 0;
                  int v32 = btree_node_key_ptr(v15[v30], (unsigned __int16)v45[v30], &v49, &v47);
                  if (v32) {
                    goto LABEL_60;
                  }
                  uint64_t v33 = *(void *)(a1 + 8);
                  if (!v33) {
                    uint64_t v33 = *(void *)(*(void *)a1 + 392LL);
                  }
                  unint64_t v34 = v50;
                  int v32 = (*(uint64_t (**)(uint64_t, void *, void, uint64_t, void, int *))(a1 + 416))( v33,  v50,  HIWORD(v47),  v49,  (unsigned __int16)v47,  &v48);
                  if (!v32 && v48) {
                    int v32 = btree_node_entry_update(v15[v30], (unsigned __int16)v45[v30], v34, HIWORD(v47), 0LL);
                  }
                  if (v32)
                  {
LABEL_60:
                    uint64_t v38 = *(void *)(a1 + 8);
                    if (v38) {
                      __int16 v39 = (const char *)(v38 + 3992);
                    }
                    else {
                      __int16 v39 = (const char *)(*(void *)(*(void *)(*(void *)a1 + 392LL) + 384LL) + 208LL);
                    }
                    log_err("%s:%d: %s updating grandparent failed w/%d\n", "bt_merge_up", 4628, v39, v32);
                    goto LABEL_64;
                  }

                  LOWORD(v24) = v24 - 1;
                  if ((_WORD)v24)
                  {
                    uint64_t v28 = v15[(unsigned __int16)v24];
                    --v30;
                    if (*(_DWORD *)(*(void *)(v28 + 56) + 36LL)) {
                      continue;
                    }
                  }

                  goto LABEL_25;
                }
              }
            }
          }

          --v23;
LABEL_56:
          if ((btree_node_is_underused(a1, v15[v23]) & 1) == 0) {
            goto LABEL_65;
          }
        }

        --v23;
        bt_merge_nodes(a1, 0LL, 0, *v15, (unsigned __int16)*v45, v15[1], v44, a5);
LABEL_25:
        if ((v23 & 0x8000) != 0) {
          goto LABEL_64;
        }
        LOWORD(v14) = v43;
        goto LABEL_56;
      }

      LOWORD(v17) = 0;
LABEL_64:
      LOWORD(v14) = v43;
    }

LABEL_65:
    int v40 = 0;
    do
    {
      uint64_t v41 = v15[(__int16)v40];
      obj_unlock(v41, 2);
      obj_release(v41);
      ++v40;
    }

    while ((unsigned __int16)v17 >= (__int16)v40);
    if ((unsigned __int16)v14 >= 9u)
    {
      _apfs_free(v15, 8LL * (unsigned __int16)v14);
      _apfs_free(v45, 2LL * (unsigned __int16)v14);
    }
  }

      if (!*(_BYTE *)a5 || *a12)
      {
        uint64_t result = 0LL;
LABEL_136:
        *a12 = 0;
        return result;
      }

      BOOL v46 = *a10;
      if (v45 + *a10 > 32) {
        return 92LL;
      }
      int v47 = 0LL;
      do
      {
        if (v46 >= 1
          && *(_BYTE *)(a5 + v47)
          && *(unsigned __int8 *)(a5 + v47) < *(unsigned __int8 *)(a9 + (v46 - 1)))
        {
          *a11 = 1;
        }

        *(_DWORD *)(a8 + 4LL * v46) = a4[v47];
        *(_BYTE *)(a9 + *a10) = *(_BYTE *)(a5 + v47++);
        BOOL v46 = *a10 + 1;
        *a10 = v46;
      }

      while (v47 < *a6);
      *a6 = 0;
      uint64_t v25 = (unsigned __int8 *)*a1;
      if (*a1 >= a2) {
        return 0LL;
      }
    }
  }

  return result;
}

uint64_t bt_remove(uint64_t a1, uint64_t a2, unint64_t *a3, unsigned int a4, uint64_t a5)
{
  return bt_remove_internal(a1, a2, 0, a3, a4, 0LL, 0LL, 0LL, 0LL, a5);
}

uint64_t bt_remove_first( uint64_t a1, uint64_t a2, void *a3, unsigned int *a4, void *a5, unsigned int *a6, uint64_t a7)
{
  size_t v14 = *(unsigned int *)(*(void *)(a1 + 392) + 16LL);
  unsigned __int16 v15 = (unint64_t *)_apfs_malloc(v14);
  if (!v15) {
    return 12LL;
  }
  uint64_t v16 = v15;
  uint64_t v17 = bt_remove_internal(a1, a2, 1, v15, v14, a3, a4, a5, a6, a7);
  _apfs_free(v16, v14);
  return v17;
}

uint64_t bt_lookup_first(uint64_t a1, uint64_t a2, void *a3, _DWORD *a4, void *a5, unsigned int *a6)
{
  v32[1] = *MEMORY[0x1895F89C0];
  unint64_t v12 = *(void *)(a1 + 400);
  MEMORY[0x1895F8858]();
  size_t v14 = &v28[-v13];
  bzero(&v28[-v13], v15);
  v32[0] = 0LL;
  if (!*(void *)(a1 + 416)) {
    return 22LL;
  }
  unsigned int v16 = (v12 >> 9) & 0x3FFF;
  if (v16)
  {
    if (*a4 != v16) {
      return 22LL;
    }
  }

  int v29 = 0;
  obj_lock(a1, 1);
  obj_retain((char *)a1);
  uint64_t v18 = a1 + 56;
  uint64_t v17 = *(void *)(a1 + 56);
  if ((*(_WORD *)(v17 + 32) & 2) != 0)
  {
    uint64_t v19 = (void *)a1;
LABEL_15:
    if (*(_DWORD *)(v17 + 36))
    {
      unsigned int v31 = 0LL;
      uint64_t v20 = btree_node_key_ptr((uint64_t)v19, 0, &v31, (_WORD *)&v29 + 1);
      if (!(_DWORD)v20)
      {
        int v30 = 0LL;
        uint64_t v20 = btree_node_val_ptr(v19, 0, &v30, (__int16 *)&v29);
        if (!(_DWORD)v20)
        {
          unsigned int v21 = (unsigned __int16)v29;
          else {
            unsigned int v22 = (unsigned __int16)v29;
          }
          int v23 = HIWORD(v29);
          else {
            size_t v24 = *a4;
          }
          else {
            uint64_t v20 = 34LL;
          }
          memcpy(a3, v31, v24);
          if (*a6 >= v22) {
            size_t v26 = v22;
          }
          else {
            size_t v26 = *a6;
          }
          memcpy(a5, v30, v26);
          *a4 = v23;
          *a6 = v21;
        }
      }
    }

    else
    {
      uint64_t v20 = 2LL;
    }

    obj_unlock((uint64_t)v19, 1);
    obj_release(v19);
  }

  else
  {
    uint64_t v19 = (void *)a1;
    while (1)
    {
      void *v14 = 0LL;
      uint64_t v20 = btree_node_child_val((uint64_t)v19, 0, v14);
      if (!(_DWORD)v20) {
        uint64_t v20 = btree_node_get((void *)a1, v14, a2, 2, *(_WORD *)(*(void *)v18 + 34LL) - 1, 0LL, v32);
      }
      obj_unlock((uint64_t)v19, 1);
      obj_release(v19);
      if ((_DWORD)v20) {
        break;
      }
      uint64_t v19 = (void *)v32[0];
      uint64_t v18 = v32[0] + 56;
      uint64_t v17 = *(void *)(v32[0] + 56);
      if ((*(_WORD *)(v17 + 32) & 2) != 0) {
        goto LABEL_15;
      }
    }
  }

  return v20;
}

uint64_t bt_lookup_variant( uint64_t a1, uint64_t a2, unint64_t *a3, unsigned int *a4, unsigned int a5, void *a6, unsigned int *a7, unsigned int a8, int a9, uint64_t *a10)
{
  if (!*(void *)(a1 + 416)) {
    return 22LL;
  }
  unint64_t v17 = *(void *)(a1 + 400);
  unsigned int v18 = (v17 >> 9) & 0x3FFF;
  if (v18)
  {
    if (*a4 != v18) {
      return 22LL;
    }
  }

  unsigned int v19 = *a4;
  uint64_t v25 = 0LL;
  unsigned __int16 v24 = 0;
  uint64_t v20 = bt_lookup_internal((char *)a1, a2, a3, (unsigned __int16)v19, a8, a9, 0, a10, &v25, &v24);
  if (!(_DWORD)v20)
  {
    unsigned int v22 = v25;
    uint64_t v23 = bt_lookup_copy_out(a1, v25, v24, a3, a4, a5, a6, a7, a8);
    uint64_t v20 = v23;
    if (a10 && !(_DWORD)v23)
    {
      *a10 = obj_oid((uint64_t)v22);
      a10[1] = a1;
    }

    obj_unlock((uint64_t)v22, 1);
    obj_release(v22);
  }

  return v20;
}

uint64_t bt_lookup_internal( char *a1, uint64_t a2, unint64_t *a3, unsigned int a4, unsigned int a5, int a6, unsigned int a7, uint64_t *a8, char **a9, unsigned __int16 *a10)
{
  int v41 = a6;
  unsigned int v42 = a7;
  unsigned int v45 = a4;
  uint64_t v43 = a2;
  uint64_t v44 = a3;
  __int16 v39 = a9;
  v49[1] = *(char **)MEMORY[0x1895F89C0];
  uint64_t v13 = *((void *)a1 + 50);
  MEMORY[0x1895F8858]();
  size_t v15 = &v37[-v14];
  bzero(&v37[-v14], v16);
  int v48 = 0LL;
  v49[0] = 0LL;
  unsigned __int16 v47 = 0;
  char v46 = 0;
  if (!a8) {
    goto LABEL_9;
  }
  uint64_t v17 = *a8;
  if (!*a8) {
    goto LABEL_9;
  }
  if ((v13 & 0x10) != 0) {
    goto LABEL_9;
  }
  void *v15 = v17;
  if (v17 == obj_oid((uint64_t)a1)
    || btree_node_get( a1,  v15,  v43,  (((*(unsigned __int16 *)(*((void *)a1 + 7) + 32LL) >> 3) & 1) << 6) | 6u,  0,  0LL,  (uint64_t *)v49))
  {
    goto LABEL_9;
  }

  unsigned int v18 = v49[0];
  if ((*(_WORD *)(*((void *)v49[0] + 7) + 32LL) & 2) == 0) {
    goto LABEL_8;
  }
  int v35 = bt_search_node_insert((uint64_t)v49[0], v44, v45, &v47, (BOOL *)&v46);
  if (!v35 && v46)
  {
    if (a5 != 4)
    {
      if (a5 != 2) {
        goto LABEL_80;
      }
      if (v47)
      {
        --v47;
        goto LABEL_80;
      }

LABEL_83:
      char v46 = 0;
      goto LABEL_8;
    }

LABEL_80:
    unint64_t v34 = v39;
LABEL_81:
    uint64_t v33 = 0LL;
    *unint64_t v34 = v18;
    *a10 = v47;
    return v33;
  }

  if (!(v35 | a5))
  {
    if (v47 && *(_DWORD *)(*((void *)v18 + 7) + 36LL) > v47)
    {
      uint64_t v25 = 0LL;
      uint64_t v33 = 2LL;
      unint64_t v34 = v39;
      goto LABEL_53;
    }

    goto LABEL_8;
  }

      if (v6 && *(_BYTE *)(v6 + 62))
      {
        uint64_t v44 = *(void *)(v6 + 48) + v23;
        ++*(void *)(v6 + 40);
        *(void *)(v6 + 48) = v44;
      }

      unsigned int v45 = bt_remove_first((uint64_t)v72, 0LL, 0LL, 0LL, 0LL, 0LL, v20);
      if (v45) {
        log_err( "%s:%d: %s sfq %d error removing entry %lld %lld from free queue: %d\n",  "spaceman_free_completed",  6166,  (const char *)(*(void *)(a1 + 384) + 208LL),  a3,  v70,  v71,  v45);
      }
      char v46 = v71 - v23;
      if (v71 != v23)
      {
        v70 += v23;
        v71 -= v23;
        unsigned int v68 = 8 * (v46 != 1);
        unsigned __int16 v47 = bt_insert(v72, 0LL, &v69, 16, &v71, v68, v20);
        if (v47) {
          log_err( "%s:%d: %s sfq %d error inserting shortened entry %lld %lld into free queue: %d\n",  "spaceman_free_completed",  6176,  (const char *)(*(void *)(a1 + 384) + 208LL),  a3,  v70,  v71,  v47);
        }
      }

      v14 += v23;
      LODWORD(__rqtp.tv_sec) = 16;
      unsigned int v68 = 8;
      int v48 = bt_lookup_first((uint64_t)v72, 0LL, &v69, &__rqtp, &v71, &v68);
      unsigned int v22 = 1;
      if (v48) {
        goto LABEL_29;
      }
    }
  }

LABEL_8:
  obj_unlock((uint64_t)v18, 1);
  obj_release(v18);
LABEL_9:
  BOOL v19 = a5 == 2;
  unsigned int v38 = a5 - 3;
  BOOL v20 = a5 - 3 < 2;
  obj_lock((uint64_t)a1, 1);
  v49[0] = a1;
  obj_retain(a1);
  unsigned __int16 v21 = 0;
  unsigned int v22 = a1;
  unsigned int v40 = a5;
  while (1)
  {
    char v46 = 0;
    unsigned __int16 v24 = v22 + 56;
    uint64_t v23 = *((void *)v22 + 7);
    if ((*(_WORD *)(v23 + 32) & 2) != 0)
    {
      uint64_t v25 = 0LL;
    }

    else
    {
      uint64_t v25 = 0LL;
      while (*(unsigned __int16 *)(v23 + 34) > v42)
      {
        uint64_t v26 = bt_search_node((uint64_t)v22, v44, v45, &v47, (BOOL *)&v46);
        if ((_DWORD)v26) {
          goto LABEL_48;
        }
        unsigned int v27 = v47;
        if (v19 && v47 != 0 || v20 && *(_DWORD *)(*(void *)v24 + 36LL) - 1 > v47)
        {
          if (v25)
          {
            obj_unlock((uint64_t)v25, 1);
            obj_release(v25);
            unsigned int v27 = v47;
          }

          uint64_t v25 = v49[0];
          obj_retain(v49[0]);
          unsigned __int16 v21 = v20 - v19 + v27;
        }

        uint64_t v28 = v49[0];
        if ((v41 & 0x100) != 0)
        {
          uint64_t v29 = *((void *)v49[0] + 7);
          if (*(_WORD *)(v29 + 34) == 1
            && *(_DWORD *)(v29 + 36) - 1 > v27
            && !btree_node_child_val((uint64_t)v49[0], (unsigned __int16)(v27 + 1), v15))
          {
            btree_node_get(a1, v15, v43, 256, *(_WORD *)(*((void *)v28 + 7) + 34LL) - 1, 0LL, (uint64_t *)&v48);
          }
        }

        uint64_t v26 = btree_node_child_val((uint64_t)v28, v27, v15);
        if ((_DWORD)v26) {
          goto LABEL_48;
        }
        uint64_t v26 = btree_node_get(a1, v15, v43, 2, *(_WORD *)(*((void *)v28 + 7) + 34LL) - 1, 0LL, (uint64_t *)&v48);
        if ((_DWORD)v26) {
          goto LABEL_48;
        }
        btree_node_release((uint64_t)v28, v28 != v25);
        unsigned int v22 = v48;
        v49[0] = v48;
        unsigned __int16 v24 = v48 + 56;
        uint64_t v23 = *((void *)v48 + 7);
        if ((*(_BYTE *)(v23 + 32) & 2) != 0) {
          break;
        }
      }
    }

    uint64_t v26 = bt_search_node_insert((uint64_t)v22, v44, v45, &v47, (BOOL *)&v46);
    if ((_DWORD)v26)
    {
LABEL_48:
      uint64_t v33 = v26;
      goto LABEL_49;
    }

    if (v46) {
      break;
    }
    if (!v40)
    {
      uint64_t v33 = 2LL;
      goto LABEL_49;
    }

    unsigned int v30 = v47;
    if (v40 <= 2 && v47)
    {
      uint64_t v33 = 0LL;
      char v46 = 1;
      goto LABEL_69;
    }

    if (v38 <= 1)
    {
      unsigned int v31 = *(_DWORD *)(*(void *)v24 + 36LL);
      goto LABEL_43;
    }

      if (v9 >= v8) {
        uint64_t v9 = v8;
      }
      size_t v11 = *(void *)(v6 + 184);
      unint64_t v12 = v11 >= v8;
      uint64_t v13 = v11 - v8;
      if (!v12)
      {
        uint64_t v14 = obj_oid(a2);
        log_err( "%s:%d: %s file system %lld fs reserve block count %lld larger than global fs reserve block count %lld\n",  "spaceman_fs_bounds_clear",  8862,  (const char *)(a2 + 3992),  v14,  v8,  *(void *)(v6 + 184));
        uint64_t v13 = 0LL;
      }

      *(void *)(v6 + 184) = v13;
      size_t v15 = *(void *)(v6 + 192);
      unint64_t v12 = v15 >= v9;
      size_t v16 = v15 - v9;
      if (!v12)
      {
        uint64_t v17 = obj_oid(a2);
        log_err( "%s:%d: %s file system %lld fs reserve alloc count %lld larger than global fs reserve alloc count %lld\n",  "spaceman_fs_bounds_clear",  8870,  (const char *)(a2 + 3992),  v17,  v9,  *(void *)(v6 + 192));
        size_t v16 = 0LL;
      }

      *(void *)(v6 + 192) = v16;
      unsigned int v18 = *(void *)(a2 + 376);
      *(void *)(v18 + 72) = 0LL;
      *(void *)(v18 + 80) = 0LL;
      obj_dirty((uint64_t)v19, a3, 0LL);
      fs_sb_dirty(a2, a3);
      goto LABEL_15;
    }
  }

  return result;
}

    ++v11;
    __int16 v5 = *(_DWORD *)(a2 + 104) & 0x7FFFFFFF;
    --v10;
    if (v11 >= v5) {
      return 2 * (*a5 == -1);
    }
  }

  size_t v15 = *(_DWORD *)(a4 + 140);
  size_t v16 = *(_DWORD *)(a2 + 104) & 0x7FFFFFFF;
  if (v12 != (*(_DWORD *)(a4 + 136) + v15 - 1) % v16)
  {
    log_err("%s:%d: %s xid %lld checkpoint superblock index %d doesn't match index block was found at: %d\n");
    goto LABEL_8;
  }

  if (v15 > v10 + v16)
  {
    log_err("%s:%d: %s xid %lld checkpoint superblock index %d doesn't fit in blocks remaining: %d > %d\n");
    goto LABEL_8;
  }

  if (nx_metadata_range_add((void *)a1, 0LL, 1, 0, 1)
    || (*(_BYTE *)(a4 + 65) & 1) != 0
    && (nx_metadata_range_add( (void *)a1,  0x4000000000000000uLL >> __clz(__rbit64(*(unsigned int *)(*(void *)(a1 + 376) + 36LL))),  1,  0,  1)
     || (*(_BYTE *)(a4 + 65) & 1) != 0
     && nx_metadata_range_add( (void *)a1,  *(void *)(*(void *)(a1 + 376) + 1368LL),  *(void *)(*(void *)(a1 + 376) + 1376LL) & 0x7FFFFFFF,  (*(void *)(*(void *)(a1 + 376) + 1376LL) & 0x80000000LL) != 0,  0))
    || nx_metadata_range_add( (void *)a1,  *(void *)(a4 + 112),  *(_DWORD *)(a4 + 104) & 0x7FFFFFFF,  *(int *)(a4 + 104) < 0,  0)
    || nx_metadata_range_add( (void *)a1,  *(void *)(a4 + 120),  *(_DWORD *)(a4 + 108) & 0x7FFFFFFF,  *(int *)(a4 + 108) < 0,  0))
  {
    log_err("%s:%d: %s xid %lld at index %d failed to load checkpoint metadata ranges (overlap?): %d\n");
LABEL_21:
    obj_cache_reset(*(pthread_mutex_t **)(a1 + 392), 0);
    *(void *)(a1 + 408) = 0LL;
    *(void *)(a1 + 720) = 0LL;
    *(void *)(a1 + 920) = 0LL;
    *(void *)(a1 + 1128) = 0LL;
    *(void *)(a1 + 1336) = 0LL;
    *(_BYTE *)(a1 + 635) = 0;
    unsigned __int16 *v21 = 0u;
    v21[1] = 0u;
    v21[2] = 0u;
    goto LABEL_8;
  }

  if (nx_checkpoint_validate_checkpoint_map_blocks(a1, (unsigned int *)a4))
  {
    log_err("%s:%d: %s xid %lld validation failed for checkpoint at index %d: %d\n");
    goto LABEL_21;
  }

  uint64_t v17 = nx_checkpoint_load_data(a1, a4, &v25, &v24);
  if (v17)
  {
    log_err( "%s:%d: %s xid %lld data for checkpoint at index %d couldn't be loaded: %d\n",  "nx_checkpoint_find_valid_checkpoint",  572,  (const char *)(*(void *)(a1 + 384) + 208LL),  *(void *)(a4 + 16),  *(_DWORD *)(a4 + 136),  v17);
    nx_obj_cache_reset(a1);
    goto LABEL_8;
  }

  memcpy(*(void **)(a1 + 376), (const void *)a4, *(unsigned int *)(a2 + 36));
  *(void *)(*(void *)(a1 + 392) + 400LL) = *(void *)(*(void *)(a1 + 376) + 88LL);
  if (nx_checkpoint_traverse(a1, 0LL, 2LL))
  {
    log_err("%s:%d: %s xid %lld failed to fix up checkpoint data: %d\n");
LABEL_46:
    nx_obj_cache_reset(a1);
    memcpy(*(void **)(a1 + 376), (const void *)a2, *(unsigned int *)(a2 + 36));
    *(void *)(*(void *)(a1 + 392) + 400LL) = *(void *)(*(void *)(a1 + 376) + 88LL);
    goto LABEL_8;
  }

  if (*(_BYTE *)(a1 + 628))
  {
    if (*(_BYTE *)(a1 + 631))
    {
      log_info( "%s:%d: %s probe of external device... skipping recent sanity checks.\n",  "nx_checkpoint_find_valid_checkpoint",  599,  (const char *)(*(void *)(a1 + 384) + 208LL));
    }

    else
    {
      log_info( "%s:%d: %s sanity checking all recently-changed container state... please be patient.\n",  "nx_checkpoint_find_valid_checkpoint",  608,  (const char *)(*(void *)(a1 + 384) + 208LL));
      if (nx_check_recent_sanity((void *)a1))
      {
        log_err("%s:%d: %s xid %lld sanity check of recently-changed structures failed: %d\n");
        goto LABEL_46;
      }
    }
  }

  if (spaceman_get((void *)a1, (uint64_t *)&v23))
  {
    log_err("%s:%d: %s xid %lld failed to get spaceman: %d\n");
    goto LABEL_46;
  }

  if (nx_metadata_range_add( (void *)a1,  *(void *)(v23[47] + 168),  *(_DWORD *)(v23[47] + 164) & 0x7FFFFFFF,  *(int *)(v23[47] + 164) < 0,  0))
  {
    obj_release(v23);
LABEL_45:
    log_err("%s:%d: %s xid %lld failed to load spaceman metadata ranges (overlap?): %d\n");
    goto LABEL_46;
  }

  BOOL v20 = nx_metadata_range_add( (void *)a1,  *(void *)(v23[47] + 176),  *(void *)(v23[47] + 152),  *(uint64_t *)(v23[47] + 152) < 0,  0);
  obj_release(v23);
  if (v20) {
    goto LABEL_45;
  }
  BOOL v19 = *(void *)(*(void *)(a1 + 376) + 16LL);
  if (v19 < v25) {
    log_err( "%s:%d: %s warning: best valid checkpoint xid %lld is less than max free queue oldest xid %lld seen in checkpoint %lld\n",  "nx_checkpoint_find_valid_checkpoint",  646,  (const char *)(*(void *)(a1 + 384) + 208LL),  v19,  v25,  v24);
  }
  uint64_t result = 0LL;
  *a5 = v12;
  return result;
}

  if (v4 <= a1 || *(v4 - 1) == 47) {
    return 0xFFFFFFFFLL;
  }
  return strtoul(v4 + 1, 0LL, 10) - 1;
}

LABEL_44:
    if (!v25)
    {
      uint64_t v33 = 2LL;
      unsigned int v18 = v49[0];
      unint64_t v34 = v39;
      if (v49[0]) {
        goto LABEL_53;
      }
      goto LABEL_54;
    }

    btree_node_release((uint64_t)v22, v22 != v25);
    uint64_t v32 = btree_node_child_val((uint64_t)v25, v21, v15);
    if ((_DWORD)v32
      || (uint64_t v32 = btree_node_get(a1, v15, v43, 2, *(_WORD *)(*((void *)v25 + 7) + 34LL) - 1, 0LL, (uint64_t *)v49),
          (_DWORD)v32))
    {
      uint64_t v33 = v32;
      v49[0] = 0LL;
      unint64_t v34 = v39;
      goto LABEL_50;
    }

    obj_unlock((uint64_t)v25, 1);
    obj_release(v25);
    BOOL v19 = 0;
    BOOL v20 = 0;
    unsigned int v22 = v49[0];
  }

  if (v40 != 2)
  {
    if (v40 != 4 || (++v47, unsigned int v31 = *(_DWORD *)(*(void *)v24 + 36LL), v31 > v47))
    {
      uint64_t v33 = 0LL;
      goto LABEL_49;
    }

    unsigned int v30 = v47;
    char v46 = 0;
LABEL_43:
    if (v31 > v30)
    {
      uint64_t v33 = 0LL;
      char v46 = 1;
      goto LABEL_49;
    }

    goto LABEL_44;
  }

  LOWORD(v30) = v47;
  if (!v47)
  {
    char v46 = 0;
    goto LABEL_44;
  }

  uint64_t v33 = 0LL;
LABEL_69:
  unsigned __int16 v47 = v30 - 1;
LABEL_49:
  unint64_t v34 = v39;
  if (!v25) {
    goto LABEL_51;
  }
LABEL_50:
  obj_unlock((uint64_t)v25, 1);
  obj_release(v25);
LABEL_51:
  unsigned int v18 = v49[0];
  if (!(_DWORD)v33) {
    goto LABEL_81;
  }
  if (!v49[0]) {
    goto LABEL_54;
  }
LABEL_53:
  btree_node_release((uint64_t)v18, v18 != v25);
LABEL_54:
  *unint64_t v34 = 0LL;
  return v33;
}

      size_t v15 = spaceman_fxc_tree_adjacent(v22, v21, v43);
      ++v25;
    }

    while ((v15 & 0xFFFFFFFD) == 0);
  }

  return v15;
}

uint64_t bt_lookup_copy_out( uint64_t a1, void *a2, unsigned __int16 a3, void *a4, _DWORD *a5, unsigned int a6, void *a7, unsigned int *a8, int a9)
{
  __src = 0LL;
  int v28 = 0;
  int v29 = 0;
  if (!(a9 | a6))
  {
    __src = 0LL;
    HIWORD(v28) = 0;
    goto LABEL_22;
  }

  uint64_t v17 = btree_node_key_ptr((uint64_t)a2, a3, &__src, (_WORD *)&v28 + 1);
  uint64_t v18 = v17;
  if (a9) {
    BOOL v19 = (_DWORD)v17 == 0;
  }
  else {
    BOOL v19 = 0;
  }
  if (!v19)
  {
LABEL_19:
    if ((_DWORD)v18) {
      return v18;
    }
    goto LABEL_22;
  }

  uint64_t v20 = *(void *)(a1 + 8);
  if (!v20) {
    uint64_t v20 = *(void *)(*(void *)a1 + 392LL);
  }
  uint64_t v18 = (*(uint64_t (**)(uint64_t, void *, void, void *, void, int *))(a1 + 416))( v20,  __src,  HIWORD(v28),  a4,  *a5,  &v29);
  if (!(_DWORD)v18)
  {
    if (a9 == 2 && (v29 & 0x80000000) == 0 || a9 == 1 && v29 > 0 || a9 == 3 && v29 < 0 || a9 == 4 && v29 <= 0)
    {
      uint64_t v18 = nx_corruption_detected_int(*(void *)(*(void *)a1 + 392LL));
      goto LABEL_19;
    }

LABEL_22:
    unsigned int v30 = 0LL;
    uint64_t v18 = btree_node_val_ptr(a2, a3, &v30, (__int16 *)&v28);
    if (!(_DWORD)v18)
    {
      unsigned int v21 = (unsigned __int16)v28;
      else {
        unsigned int v22 = (unsigned __int16)v28;
      }
      unsigned int v23 = *a8;
      if (*a8 < v22 || (uint64_t v18 = 0LL, a6) && HIWORD(v28) > a6) {
        uint64_t v18 = 34LL;
      }
      if (a6)
      {
        int v24 = HIWORD(v28);
        if (HIWORD(v28) >= a6) {
          size_t v25 = a6;
        }
        else {
          size_t v25 = HIWORD(v28);
        }
        memcpy(a4, __src, v25);
        *a5 = v24;
        unsigned int v23 = *a8;
      }

      if (v23 >= v22) {
        size_t v26 = v22;
      }
      else {
        size_t v26 = v23;
      }
      memcpy(a7, v30, v26);
      *a8 = v21;
    }
  }

  return v18;
}

    uuid_unparse(uu, out);
    if (v35)
    {
      uint64_t v20 = 0LL;
      unsigned int v21 = 0LL;
      unsigned int v22 = (os_log_s *)MEMORY[0x1895F8DA0];
      do
      {
        uuid_unparse(&v36[v20], v54);
        if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
        {
          unsigned int v23 = rc_to_errno(v29);
          *(_DWORD *)buf = 136316674;
          int v41 = "_APFSVolumeAddUnlockRecordsOrHints";
          unsigned int v42 = 1024;
          uint64_t v43 = 1777;
          uint64_t v44 = 1024;
          unsigned int v45 = a5;
          char v46 = 2080;
          unsigned __int16 v47 = out;
          int v48 = 2080;
          uint64_t v49 = v54;
          int v50 = 2080;
          uint64_t v51 = a1;
          BOOL v52 = 1024;
          uint64_t v53 = v23;
          _os_log_impl( &dword_183C4A000,  v22,  OS_LOG_TYPE_DEFAULT,  "%s:%d: UR_ADD_UPDATE_SET [ OP = %u, SRC UUID = %s, DST UUID = %s, VOLUME = %s, ret = %d ]\n",  buf,  0x3Cu);
        }

        ++v21;
        v20 += 16LL;
      }

      while (v21 < v35);
    }

    else if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT))
    {
      int v24 = rc_to_errno(v29);
      *(_DWORD *)buf = 136316418;
      int v41 = "_APFSVolumeAddUnlockRecordsOrHints";
      unsigned int v42 = 1024;
      uint64_t v43 = 1773;
      uint64_t v44 = 1024;
      unsigned int v45 = a5;
      char v46 = 2080;
      unsigned __int16 v47 = out;
      int v48 = 2080;
      uint64_t v49 = a1;
      int v50 = 1024;
      LODWORD(v51) = v24;
      _os_log_impl( &dword_183C4A000,  MEMORY[0x1895F8DA0],  OS_LOG_TYPE_DEFAULT,  "%s:%d: UR_ADD_UPDATE_SET [ OP = %u, UUID = %s, VOLUME = %s, ret = %d ]\n",  buf,  0x32u);
    }

    if (v36) {
      _apfs_free(v36, 16LL * v35);
    }
    size_t v25 = v37;
    if (v37)
    {
      size_t v26 = v35;
      if (v35)
      {
        unsigned int v27 = 0LL;
        do
        {
          int v28 = (void *)v37[v27];
          if (v28)
          {
            _apfs_free(v28, 16LL);
            size_t v26 = v35;
          }

          ++v27;
        }

        while (v27 < v26);
        size_t v25 = v37;
      }

      else
      {
        size_t v26 = 0LL;
      }

      _apfs_free(v25, 8 * v26);
    }

    return rc_to_errno(v29);
  }

  return result;
}

            unsigned int v4 = 0LL;
            *a4 += _APFSStreamCreateReadFlush(a1, &a2[v14], v10 - v14);
            goto LABEL_11;
          }

  uint64_t result = 0LL;
  ++*(void *)(a1 + 440);
  int v29 = (void *)(a1 + 432);
LABEL_54:
  ++*v29;
  return result;
}

        if ((~a3 & 5) != 0)
        {
          if ((a3 & 0x10) != 0)
          {
LABEL_24:
            *(_DWORD *)(v8 + 24) |= 0x40000u;
            if ((a3 & 0x20) == 0) {
              goto LABEL_29;
            }
            goto LABEL_28;
          }
        }

        else
        {
          *(_DWORD *)(v8 + 24) |= 0x20000u;
          if ((a3 & 0x10) != 0) {
            goto LABEL_24;
          }
        }

        if ((a3 & 0x20) == 0)
        {
LABEL_29:
          unint64_t v12 = *(_DWORD *)(v8 + 28) - 1;
          *(_DWORD *)(v8 + 28) = v12;
          if (!v12 && (uint64_t v13 = *(_DWORD *)(v8 + 24), (v13 & 2) != 0))
          {
            if ((v13 & 4) != 0) {
              panic("bad transition tx flags 0x%x to 0x%x (expected 0x%x)\n", v13, 4, 2);
            }
            *(_DWORD *)(v8 + 24) = v13 & 0xFFFFFFF9 | 4;
            __tp.tv_sec = 0LL;
            __tp.tv_nsec = 0LL;
            clock_gettime(_CLOCK_UPTIME_RAW_APPROX, &__tp);
            size_t v16 = 1000000 * __tp.tv_sec + SLODWORD(__tp.tv_nsec) / 1000;
            uint64_t v17 = v16 - *(void *)(v8 + 72);
            *(void *)(v8 + 72) = v16;
            if (v17 > 0xF4240) {
              log_warn( "%s:%d: %s tx xid %lld took %lld us to close\n",  "tx_leave",  2545,  (const char *)(*(void *)(a1 + 384) + 208LL),  *(void *)(v8 + 16),  v17);
            }
            *(void *)(v7 + 248) = (*(void *)(v7 + 248) + v17) >> 1;
            int v3 = tx_flush_initiate(a1);
            if ((a3 & 1) == 0) {
              goto LABEL_41;
            }
          }

          else
          {
            int v3 = 0LL;
            if ((a3 & 1) == 0)
            {
LABEL_41:
              pthread_mutex_unlock((pthread_mutex_t *)v7);
              return v3;
            }
          }

          if ((a3 & 4) != 0) {
            uint64_t v14 = 127;
          }
          else {
            uint64_t v14 = 63;
          }
          do
          {
            if (*(void *)(v8 + 16) != a2 || (*(_DWORD *)(v8 + 24) & v14) == 0) {
              break;
            }
            if (!(_DWORD)v3) {
              cv_wait((pthread_cond_t *)(v7 + 256), (pthread_mutex_t *)v7, 8LL, (uint64_t)"nx_tx_finish_wait", 0LL);
            }
          }

          while (!*(_DWORD *)(v7 + 76));
          int v3 = *(unsigned int *)(v8 + 52);
          goto LABEL_41;
        }

__n128 bt_iterator_init_with_hint( uint64_t a1, uint64_t a2, uint64_t a3, int a4, unint64_t *a5, int a6, unsigned int a7, void *a8, unsigned int a9, _OWORD *a10)
{
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = a3;
  int v16 = a4 & 0x180;
  *(_DWORD *)(a1 + 16) = a4;
  *(_DWORD *)(a1 + 20) = a7;
  *(void *)(a1 + 32) = a5;
  *(void *)(a1 + 40) = a8;
  *(void *)(a1 + 24) = a9;
  uint64_t v17 = (uint64_t *)(a1 + 56);
  if (a10)
  {
    *(_OWORD *)uint64_t v17 = *a10;
  }

  else
  {
    uint64_t *v17 = 0LL;
    *(void *)(a1 + 64) = 0LL;
  }

  *(_DWORD *)(a1 + 48) = a6;
  *(_DWORD *)(a1 + 52) = a9;
  if ((a4 & 4) != 0)
  {
    unsigned int v18 = 4;
  }

  else if ((a4 & 2) != 0)
  {
    int v21 = a4 & 0x180;
    int v19 = bt_lookup_variant( a2,  a3,  a5,  (unsigned int *)(a1 + 48),  a7,  a8,  (unsigned int *)(a1 + 52),  1u,  v16,  (uint64_t *)(a1 + 56));
    if (v19 != 2) {
      goto LABEL_11;
    }
    unsigned int v18 = 3;
    int v16 = v21;
  }

  else
  {
    unsigned int v18 = 3;
  }

  int v19 = bt_lookup_variant(a2, a3, a5, (unsigned int *)(a1 + 48), a7, a8, (unsigned int *)(a1 + 52), v18, v16, v17);
LABEL_11:
  if (v19)
  {
    *(_DWORD *)(a1 + 16) |= 1u;
    if (v19 != 2) {
      *(_DWORD *)(a1 + 28) = v19;
    }
  }

  else if (a10)
  {
    __n128 result = *(__n128 *)v17;
    *a10 = *(_OWORD *)v17;
  }

  return result;
}

double bt_iterator_init( uint64_t a1, uint64_t a2, uint64_t a3, int a4, unint64_t *a5, int a6, unsigned int a7, void *a8, unsigned int a9)
{
  *(void *)&double result = bt_iterator_init_with_hint(a1, a2, a3, a4, a5, a6, a7, a8, a9, 0LL).n128_u64[0];
  return result;
}

uint64_t bt_iterator_ended(uint64_t a1)
{
  uint64_t result = *(unsigned int *)(a1 + 28);
  if (!(_DWORD)result) {
    return *(_DWORD *)(a1 + 16) & 1;
  }
  return result;
}

uint64_t bt_iterator_next(uint64_t a1)
{
  uint64_t result = *(unsigned int *)(a1 + 28);
  if (!(_DWORD)result)
  {
    int v3 = *(_DWORD *)(a1 + 16);
    uint64_t result = 2LL;
    if ((v3 & 1) == 0)
    {
      unsigned int v4 = *(_DWORD *)(a1 + 20);
      *(_DWORD *)(a1 + 52) = *(_DWORD *)(a1 + 24);
      if ((v3 & 0x1000) != 0) {
        unsigned int v5 = 2;
      }
      else {
        unsigned int v5 = 4;
      }
      uint64_t result = bt_lookup_variant( *(void *)a1,  *(void *)(a1 + 8),  *(unint64_t **)(a1 + 32),  (unsigned int *)(a1 + 48),  v4,  *(void **)(a1 + 40),  (unsigned int *)(a1 + 52),  v5,  v3 & 0x180,  (uint64_t *)(a1 + 56));
      if ((_DWORD)result == 2)
      {
        uint64_t result = 0LL;
        *(_DWORD *)(a1 + 16) |= 1u;
      }

      *(_DWORD *)(a1 + 28) = result;
    }
  }

  return result;
}

uint64_t btree_create_extended( uint64_t a1, unsigned int a2, unsigned int a3, unsigned int a4, int a5, uint64_t *a6, uint64_t a7, uint64_t *a8)
{
  unsigned __int16 v11 = a5;
  __int16 v12 = a4;
  unsigned int v13 = a3;
  uint64_t v33 = 0LL;
  unsigned int v15 = *((_DWORD *)a6 + 5);
  unsigned int v16 = a2 >> 30;
  unsigned int v17 = (v15 << 26) & 0x40000000 | ((v15 >> 3) << 31) | (((v15 >> 5) & 1) << 27) | a2;
  if ((v15 & 0x18) == 0) {
    unsigned int v17 = a2;
  }
  int v18 = v15 | (a2 >> 26) & 0x10;
  if ((a2 & 0x80000000) != 0) {
    v18 |= 8u;
  }
  int v19 = v18 | (a2 >> 22) & 0x20;
  if (v16) {
    uint64_t v20 = a2;
  }
  else {
    uint64_t v20 = v17;
  }
  if (v16) {
    unsigned int v21 = v19;
  }
  else {
    unsigned int v21 = *((_DWORD *)a6 + 5);
  }
  if (!a3) {
    unsigned int v13 = *(_DWORD *)(*(void *)(*(void *)(*(void *)a1 + 392LL) + 376LL) + 36LL);
  }
  if (v13 - 65537 < 0xFFFF0060
    || a4 != 8 && (v21 & 1) != 0
    || a4 > (unsigned __int16)(((unsigned __int16)(v13 - 160) >> 2) - 72)
    || a5 + a4 > btree_entry_max_size(v21, v13, (unsigned __int16)a4, (unsigned __int16)a5)
    || v21 > 0x1FF)
  {
    return 22LL;
  }

  unint64_t v22 = ((unsigned __int16)(v12 & 0x3FFF) << 9) | ((unint64_t)v11 << 23) | v21 & 0x1FF | ((unint64_t)(v13 >> 12) << 39);
  uint64_t v23 = *a6;
  unint64_t v32 = v22;
  uint64_t v34 = v23;
  uint64_t v31 = 0x300086583LL;
  if ((v21 & 0x80) == 0)
  {
    __int16 v24 = 19;
    if ((v21 & 0x100) == 0) {
      goto LABEL_22;
    }
    goto LABEL_21;
  }

  unsigned int v29 = *((_DWORD *)a6 + 6);
  if (v29 > 0xF) {
    return 22LL;
  }
  unsigned int v30 = *((_DWORD *)a6 + 7);
  unint64_t v32 = v22 & 0xFF800FFFFFFFFFFFLL | ((unint64_t)(v29 & 0xF) << 44) | ((unint64_t)(v30 & 0x7F) << 48);
  if (v30 > 0x7F) {
    return 22LL;
  }
  WORD2(v31) = 11;
  __int16 v24 = 27;
  if ((v21 & 0x100) != 0) {
LABEL_21:
  }
    WORD2(v31) = v24;
LABEL_22:
  uint64_t result = btree_node_create(a1, v20, *((unsigned int *)a6 + 4), &v31, a7, a8);
  if (!(_DWORD)result)
  {
    size_t v26 = (unint64_t *)(*(void *)(*a8 + 392) + 32LL);
    do
      unint64_t v27 = __ldxr(v26);
    while (__stxr(v27 + 1, v26));
    uint64_t v28 = a6[1];
    if (v28) {
      *(void *)(*a8 + 424) = v28;
    }
    obj_unlock(*a8, 2);
    return 0LL;
  }

  return result;
}

uint64_t btree_node_create(pthread_mutex_t **a1, int a2, int a3, uint64_t a4, uint64_t a5, void *a6)
{
  __int128 v18 = btree_node_desc;
  DWORD2(v18) = (*(void *)(a4 + 8) >> 27) & 0x1F000;
  __int16 v10 = *(_WORD *)(a4 + 4);
  if ((v10 & 1) != 0) {
    LODWORD(v18) = 2;
  }
  uint64_t v19 = 0LL;
  DWORD1(v18) = a3;
  if ((v10 & 0x10) != 0) {
    int v11 = 536870916;
  }
  else {
    int v11 = 4;
  }
  int v12 = v11 | a2;
  unsigned int v13 = *a1;
  else {
    uint64_t v14 = 0LL;
  }
  uint64_t v15 = obj_create(v13, v12, 0LL, (uint64_t)&v18, a4, v14, a5, &v19);
  if (!(_DWORD)v15)
  {
    uint64_t v16 = v19;
    *a6 = v19;
    obj_dirty(v16, a5, 0LL);
  }

  return v15;
}

uint64_t btree_create( uint64_t a1, unsigned int a2, int a3, int a4, unsigned int a5, unsigned int a6, int a7, uint64_t a8, uint64_t a9, uint64_t *a10)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  v11[1] = 0LL;
  __int128 v14 = 0u;
  uint64_t v18 = 0LL;
  __int128 v16 = 0u;
  __int128 v17 = 0u;
  __int128 v15 = 0u;
  v11[0] = a8;
  int v12 = a4;
  int v13 = a3;
  return btree_create_extended(a1, a2, a5, a6, a7, v11, a9, a10);
}

uint64_t btree_get_extended( uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7, uint64_t *a8)
{
  int v41 = a8;
  uint64_t v42 = a7;
  v44[1] = *MEMORY[0x1895F89C0];
  unsigned int v14 = *(_DWORD *)(a6 + 28);
  if (v14 >= 0x40) {
    unsigned int v14 = 64;
  }
  size_t v15 = v14 + 32;
  MEMORY[0x1895F8858]();
  __int128 v17 = (char *)&v41 - v16;
  bzero((char *)&v41 - v16, v15);
  v44[0] = 0LL;
  __int128 v43 = btree_node_desc;
  unsigned int v18 = *(_DWORD *)(a6 + 20);
  unsigned int v19 = a2 >> 30;
  int v20 = (v18 << 26) & 0x40000000 | ((v18 >> 3) << 31) | (((v18 >> 5) & 1) << 27) | a2;
  if ((v18 & 0x18) == 0) {
    int v20 = a2;
  }
  int v21 = v18 | (a2 >> 26) & 0x10;
  if ((a2 & 0x80000000) != 0) {
    v21 |= 8u;
  }
  int v22 = v21 | (a2 >> 22) & 0x20;
  if (v19) {
    unsigned int v23 = a2;
  }
  else {
    unsigned int v23 = v20;
  }
  if (v19) {
    unsigned int v24 = v22;
  }
  else {
    unsigned int v24 = *(_DWORD *)(a6 + 20);
  }
  *(_WORD *)__int128 v17 = 25987;
  *((_WORD *)v17 + 1) = v15;
  if (v24 > 0x1FF) {
    return 22LL;
  }
  uint64_t v25 = *(void *)a1;
  unint64_t v26 = *((void *)v17 + 1) & 0xFFFFF07FFFFFFE00LL | v24 & 0x1FF | ((unint64_t)((*(_DWORD *)(*(void *)(*(void *)(*(void *)a1 + 392LL) + 376LL) + 36LL) >> 12) & 0x1F) << 39);
  *((void *)v17 + 1) = v26;
  *((void *)v17 + 3) = *(void *)a6;
  *((_DWORD *)v17 + 1) = -267452416;
  if ((v24 & 0x80) == 0) {
    goto LABEL_15;
  }
  unsigned int v33 = *(_DWORD *)(a6 + 24);
  if (v33 > 0xF) {
    return 22LL;
  }
  unint64_t v34 = v26 & 0xFF800FFFFFFFFFFFLL | ((unint64_t)(v33 & 0xF) << 44);
  unsigned int v35 = *(_DWORD *)(a6 + 28);
  *((void *)v17 + 1) = v34 | ((unint64_t)(v35 & 0x7F) << 48);
  if (v35 > 0x7F) {
    return 22LL;
  }
  if (v35 >= 0x40) {
    size_t v36 = 64LL;
  }
  else {
    size_t v36 = v35;
  }
  memcpy(v17 + 32, (const void *)(a6 + 32), v36);
  uint64_t v25 = *(void *)a1;
LABEL_15:
  int v27 = *(_DWORD *)(a6 + 16);
  LODWORD(v43) = (v24 << 21) & 0x20000000 | v23 & 0xFFFF0000 | 2;
  DWORD1(v43) = v27;
  if ((v23 & 0x40000000) != 0) {
    int v28 = 3;
  }
  else {
    int v28 = 1;
  }
  uint64_t v29 = (2 * (a5 & 2)) & 0xDF | (32 * (((a5 & 4) >> 2) & 1)) | (a5 << 31 >> 31) & v28 | (v24 << 21) & 0x20000000 | v23;
  else {
    uint64_t v30 = 0LL;
  }
  uint64_t result = obj_get(v25, v29, a3, &v43, v17, v30, a4, v42, v44);
  if ((a5 & 4) == 0 || (_DWORD)result)
  {
    uint64_t v32 = v44[0];
    if ((_DWORD)result) {
      uint64_t v37 = 0LL;
    }
    else {
      uint64_t v37 = v44[0];
    }
    uint64_t *v41 = v37;
    if (!(_DWORD)result) {
      goto LABEL_38;
    }
  }

  else
  {
    uint64_t v32 = v44[0];
    if ((*(_BYTE *)(v44[0] + 16) & 0x10) == 0)
    {
      uint64_t *v41 = v44[0];
LABEL_38:
      uint64_t v38 = *(void *)(a6 + 8);
      uint64_t result = 0LL;
      if (v38) {
        *(void *)(v32 + 424) = v38;
      }
      return result;
    }

    if ((a5 & 1) != 0) {
      char v39 = 2;
    }
    else {
      char v39 = 1;
    }
    if ((a5 & 2) != 0) {
      char v40 = v39;
    }
    else {
      char v40 = 0;
    }
    btree_node_release(v44[0], v40);
    uint64_t *v41 = 0LL;
    return 2LL;
  }

  return result;
}

uint64_t btree_get( uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, int a5, int a6, int a7, uint64_t a8, uint64_t a9, uint64_t *a10)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  v11[1] = 0LL;
  __int128 v14 = 0u;
  uint64_t v18 = 0LL;
  __int128 v16 = 0u;
  __int128 v17 = 0u;
  __int128 v15 = 0u;
  v11[0] = a8;
  int v12 = a7;
  int v13 = a5;
  return btree_get_extended(a1, a2, a3, a4, a6, (uint64_t)v11, a9, a10);
}

uint64_t btree_iterate_nodes(uint64_t a1, uint64_t a2, int a3, uint64_t (*a4)(void), uint64_t a5, uint64_t a6)
{
  uint64_t v97 = a6;
  uint64_t v99 = a4;
  uint64_t v95 = a2;
  uint64_t v109 = *MEMORY[0x1895F89C0];
  __int128 v107 = 0u;
  __int128 v108 = 0u;
  __int128 v105 = 0u;
  __int128 v106 = 0u;
  __int128 v103 = 0u;
  __int128 v104 = 0u;
  __int128 v101 = 0u;
  __int128 v102 = 0u;
  MEMORY[0x1895F8858]();
  __int16 v10 = (uint64_t *)((char *)&v78 - v9);
  bzero((char *)&v78 - v9, v11);
  int v94 = a3 & 0x180;
  int v12 = v94 != 0;
  if ((a3 & 1) != 0) {
    char v13 = 2;
  }
  else {
    char v13 = 1;
  }
  obj_lock(a1, v13);
  uint64_t v14 = *(void *)(a1 + 56);
  if (!v14)
  {
    obj_unlock(a1, v13);
    return 22LL;
  }

  uint64_t v15 = *(unsigned __int16 *)(v14 + 34);
  uint64_t v16 = v15 + 1;
  uint64_t v92 = v15;
  if (v15 < 8)
  {
    __int128 v107 = 0u;
    __int128 v108 = 0u;
    __int128 v105 = 0u;
    __int128 v106 = 0u;
    __int128 v103 = 0u;
    __int128 v104 = 0u;
    __int128 v17 = &v101;
    __int128 v101 = 0u;
    __int128 v102 = 0u;
  }

  else
  {
    __int128 v17 = (__int128 *)_apfs_calloc(v15 + 1, 0x10uLL);
    if (!v17)
    {
      obj_unlock(a1, v13);
      return 12LL;
    }
  }

  *(void *)__int128 v17 = a1;
  *((_WORD *)v17 + 4) = 0;
  obj_retain((char *)a1);
  uint64_t v18 = 0LL;
  if ((a3 & 1) != 0)
  {
    uint64_t v18 = obj_modify((void *)a1, 2, v97);
    if (!(_DWORD)v18)
    {
      if ((*(_BYTE *)(a1 + 400) & 0x80) != 0) {
        obj_dirty(a1, v97, 0LL);
      }
      uint64_t v18 = 0LL;
    }
  }

  uint64_t v89 = v16;
  int v19 = a3 & 0x20;
  uint64_t v90 = &v78;
  if (!(_DWORD)v18)
  {
    unsigned __int16 v25 = 0;
    unsigned int v83 = a3 & 0xFFFFFE4F;
    unsigned int v26 = a3 & 0xFFFFFE4D | 2;
    if (v94) {
      unsigned int v26 = a3 & 0xFFFFFE4C;
    }
    BOOL v27 = v19 != 0;
    if (!v99) {
      BOOL v27 = 0;
    }
    BOOL v98 = v27;
    int v82 = v12 << 7;
    uint64_t v91 = (v12 << 7) | v26;
    unsigned int v85 = a3 & 0xFFFFFE4C;
    uint64_t v84 = a3 & 0xFFFFFE4C | 0x100;
    if (v99) {
      BOOL v28 = v19 == 0;
    }
    else {
      BOOL v28 = 0;
    }
    BOOL v87 = v28;
    uint64_t v88 = a5;
    while (1)
    {
      unsigned __int16 v29 = v25;
      uint64_t v30 = (uint64_t *)&v17[v25];
      uint64_t v31 = *v30;
      uint64_t v32 = *(void *)(*v30 + 56);
      if ((*(_WORD *)(v32 + 32) & 2) != 0
        || (unsigned int v33 = &v17[v25],
            unsigned int v36 = *((unsigned __int16 *)v33 + 4),
            unsigned int v35 = (_WORD *)v33 + 4,
            unsigned int v34 = v36,
            *(_DWORD *)(v32 + 36) <= v36)
        || (a3 & 0x10) != 0 && *(_WORD *)(v32 + 34) == 1)
      {
        if (v98)
        {
          uint64_t v18 = v99();
          uint64_t v31 = *v30;
        }

        else
        {
          uint64_t v18 = 0LL;
        }

        btree_node_release(v31, v13);
        *uint64_t v30 = 0LL;
        unsigned __int16 v25 = v29 - 1;
        goto LABEL_45;
      }

      *__int16 v10 = 0LL;
      uint64_t v37 = btree_node_child_val(v31, v34, v10);
      if ((_DWORD)v37)
      {
        uint64_t v18 = v37;
        obj_oid(*v30);
        log_err("%s:%d: %s level %d node 0x%llx: error getting index %d child oid: %d\n");
        goto LABEL_21;
      }

      ++*v35;
      unsigned __int16 v25 = v29 + 1;
      if (v92 < (__int16)(v29 + 1))
      {
        uint64_t v60 = *(void *)(a1 + 8);
        if (v60) {
          uint64_t v61 = (const char *)(v60 + 3992);
        }
        else {
          uint64_t v61 = (const char *)(*(void *)(*(void *)(*(void *)a1 + 392LL) + 384LL) + 208LL);
        }
        uint64_t v64 = &v17[(__int16)v25];
        uint64_t v65 = *((void *)v64 - 2);
        int v66 = *(unsigned __int16 *)(*(void *)(v65 + 56) + 34LL);
        uint64_t v67 = obj_oid(v65);
        log_err( "%s:%d: %s level %d node 0x%llx index %d: more levels than expected\n",  "btree_iterate_nodes",  6423,  v61,  v66,  v67,  *((unsigned __int16 *)v64 - 4) - 1);
        uint64_t v18 = 22LL;
        goto LABEL_21;
      }

      uint64_t v38 = &v17[(__int16)v25];
      *((_WORD *)v38 + 4) = 0;
      uint64_t v93 = (__int16)v25 - 1LL;
      unsigned int v96 = (uint64_t *)&v17[v93];
      uint64_t v18 = btree_node_get( (void *)a1,  v10,  v95,  v91,  *(_WORD *)(*(void *)(*v96 + 56) + 34LL) - 1,  v97,  (uint64_t *)v38);
      if ((_DWORD)v18) {
        break;
      }
      if (v94) {
        goto LABEL_58;
      }
      if ((a3 & 1) != 0) {
        goto LABEL_77;
      }
LABEL_79:
      if (v87) {
        uint64_t v18 = ((uint64_t (*)(void, uint64_t))v99)(*(void *)v38, v88);
      }
      else {
        uint64_t v18 = 0LL;
      }
LABEL_45:
      if ((_DWORD)v18 || (v25 & 0x8000) != 0) {
        goto LABEL_21;
      }
    }

    uint64_t v39 = *(void *)(a1 + 8);
    if (v39) {
      char v40 = (const char *)(v39 + 3992);
    }
    else {
      char v40 = (const char *)(*(void *)(*(void *)(*(void *)a1 + 392LL) + 384LL) + 208LL);
    }
    int v41 = *(unsigned __int16 *)(*(void *)(*v96 + 56) + 34LL);
    uint64_t v42 = obj_oid(*v96);
    log_err( "%s:%d: %s level %d node 0x%llx: error getting index %d child 0x%llx flags 0x%x: %d\n",  "btree_iterate_nodes",  6438,  v40,  v41,  v42,  WORD4(v17[v93]) - 1,  *v10,  v91,  v18);
    if (!v94) {
      goto LABEL_96;
    }
LABEL_58:
    __int128 v43 = &v17[v93];
    unsigned int v45 = *((unsigned __int16 *)v43 + 4);
    uint64_t v44 = (unsigned __int16 *)v43 + 4;
    if (*(_DWORD *)(*(void *)(*v96 + 56) + 36LL) > v45)
    {
      int v86 = &v78;
      MEMORY[0x1895F8858]();
      unsigned __int16 v47 = (uint64_t *)((char *)&v78 - v46);
      bzero((char *)&v78 - v46, v48);
      unsigned int v49 = *v44;
      if (*(_DWORD *)(*(void *)(*v96 + 56) + 36LL) > v49)
      {
        uint64_t v50 = btree_node_child_val(*v96, v49, v47);
        if ((_DWORD)v50
          || (uint64_t v50 = btree_node_get( (void *)a1,  v47,  v95,  v84,  *(_WORD *)(*(void *)(*v96 + 56) + 34LL) - 1,  v97,  &v100),  (_DWORD)v50))
        {
          uint64_t v81 = v50;
          uint64_t v51 = *(void *)(a1 + 8);
          if (v51) {
            int v80 = (const char *)(v51 + 3992);
          }
          else {
            int v80 = (const char *)(*(void *)(*(void *)(*(void *)a1 + 392LL) + 384LL) + 208LL);
          }
          uint64_t v52 = *v96;
          uint64_t v79 = *(unsigned __int16 *)(*(void *)(*v96 + 56) + 34LL);
          uint64_t v53 = obj_oid(v52);
          log_err( "%s:%d: %s level %d node 0x%llx: error prefetching index %d child 0x%llx flags 0x%x: %d\n",  "btree_iterate_nodes",  6457,  v80,  v79,  v53,  *v44,  *v47,  v84,  v81);
        }
      }
    }

    if ((_DWORD)v18)
    {
      if ((_DWORD)v18 != 45 && (_DWORD)v18 != 16) {
        goto LABEL_96;
      }
      uint64_t v55 = btree_node_get( (void *)a1,  v10,  v95,  v85,  *(_WORD *)(*(void *)(*v96 + 56) + 34LL) - 1,  v97,  (uint64_t *)&v17[(__int16)v25]);
      if ((_DWORD)v55)
      {
        uint64_t v18 = v55;
LABEL_96:
        obj_oid(*v96);
        log_err("%s:%d: %s level %d node 0x%llx: error getting index %d child flags 0x%x: %d\n", "btree_iterate_nodes");
        goto LABEL_21;
      }
    }

    else
    {
      uint64_t v56 = obj_async_wait(*(void *)v38);
      if ((_DWORD)v56)
      {
        uint64_t v18 = v56;
        uint64_t v68 = *(void *)(a1 + 8);
        if (v68) {
          size_t v69 = (const char *)(v68 + 3992);
        }
        else {
          size_t v69 = (const char *)(*(void *)(*(void *)(*(void *)a1 + 392LL) + 384LL) + 208LL);
        }
        int v74 = *(unsigned __int16 *)(*(void *)(*(void *)v38 + 56LL) + 34LL);
        uint64_t v75 = obj_oid(*v96);
        int v76 = *v44 - 1;
        uint64_t v77 = obj_oid(*(void *)v38);
        log_err( "%s:%d: %s level %d node 0x%llx: error ON WAIT getting index %d child 0x%llx flags 0x%x: %d\n",  "btree_iterate_nodes",  6470,  v69,  v74,  v75,  v76,  v77,  v91,  v18);
        obj_release(*(uint64_t **)v38);
        goto LABEL_95;
      }
    }

    obj_lock(*(void *)v38, v13);
    if ((a3 & 1) == 0) {
      goto LABEL_79;
    }
    int v57 = *(void **)v38;
    unsigned int v58 = obj_type_and_flags(*(void *)v38);
    uint64_t v59 = obj_modify(v57, (v58 >> 29) & 2, v97);
    if ((_DWORD)v59)
    {
      uint64_t v18 = v59;
      uint64_t v62 = *(void *)(a1 + 8);
      if (v62) {
        uint64_t v63 = (const char *)(v62 + 3992);
      }
      else {
        uint64_t v63 = (const char *)(*(void *)(*(void *)(*(void *)a1 + 392LL) + 384LL) + 208LL);
      }
      int v70 = *(unsigned __int16 *)(*(void *)(*(void *)v38 + 56LL) + 34LL);
      uint64_t v71 = obj_oid(*v96);
      int v72 = *v44 - 1;
      uint64_t v73 = obj_oid(*(void *)v38);
      log_err( "%s:%d: %s level %d node 0x%llx: error MODIFYING index %d child 0x%llx flags 0x%x: %d\n",  "btree_iterate_nodes",  6484,  v63,  v70,  v71,  v72,  v73,  v91,  v18);
      btree_node_release(*(void *)v38, 2);
LABEL_95:
      *(void *)uint64_t v38 = 0LL;
      goto LABEL_96;
    }

LABEL_21:
  int v20 = v89;
  if ((((_WORD)v89 - 1) & 0x8000) == 0)
  {
    unsigned __int16 v21 = v89 - 1;
    do
    {
      uint64_t v22 = *(void *)&v17[v21];
      if (v22) {
        btree_node_release(v22, v13);
      }
      int v23 = (__int16)v21--;
    }

    while (v23 > 0);
  }

  if (v17 != &v101) {
    _apfs_free(v17, (16 * v20));
  }
  return v18;
}

uint64_t btree_level_count(uint64_t a1, _DWORD *a2)
{
  if (!a1) {
    return 22LL;
  }
  uint64_t v2 = *(void *)(a1 + 56);
  if (!v2) {
    return 22LL;
  }
  uint64_t result = 0LL;
  *a2 = *(unsigned __int16 *)(v2 + 34) + 1;
  return result;
}

uint64_t btree_node_checkpoint_traverse(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v22[1] = *MEMORY[0x1895F89C0];
  MEMORY[0x1895F8858]();
  size_t v11 = (uint64_t *)((char *)v22 - v10);
  bzero((char *)v22 - v10, v12);
  if ((_DWORD)a5 == 2)
  {
    else {
      uint64_t v14 = 0LL;
    }
    *(void *)(a4 + 8) = v14;
    unsigned __int16 v15 = obj_subtype(a4);
    uint64_t v16 = tree_key_compare_function_for_type(v15);
    if (!v16) {
      return 22LL;
    }
    *(void *)(a4 + 416) = v16;
    if (a4 != a3) {
      *(_OWORD *)(a4 + 400) = *(_OWORD *)(a3 + 400);
    }
    uint64_t v13 = obj_checkpoint_known(a4);
    goto LABEL_11;
  }

  if ((_DWORD)a5 == 1)
  {
    uint64_t v13 = obj_checkpoint_start((unsigned int *)a4);
LABEL_11:
    uint64_t v17 = v13;
    goto LABEL_13;
  }

  uint64_t v17 = 0LL;
LABEL_13:
  if (!(*(_WORD *)(*(void *)(a4 + 56) + 32LL) & 2 | v17))
  {
    unsigned int v18 = 0;
    v22[0] = 0LL;
    while (v18 < *(_DWORD *)(*(void *)(a4 + 56) + 36LL))
    {
      void *v11 = 0LL;
      uint64_t v19 = btree_node_child_val(a4, (unsigned __int16)v18, v11);
      if ((_DWORD)v19) {
        return v19;
      }
      uint64_t v19 = btree_node_get((void *)a3, v11, 0LL, 2, *(_WORD *)(*(void *)(a4 + 56) + 34LL) - 1, 0LL, v22);
      if ((_DWORD)v19) {
        return v19;
      }
      int v20 = (uint64_t *)v22[0];
      uint64_t v17 = btree_node_checkpoint_traverse(a1, a2, a3, v22[0], a5);
      obj_unlock((uint64_t)v20, 1);
      obj_release(v20);
      ++v18;
      if ((_DWORD)v17) {
        return v17;
      }
    }

    return 0LL;
  }

  return v17;
}

uint64_t btree_checkpoint_traverse(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return btree_node_checkpoint_traverse(a1, a2, a3, a3, a4);
}

uint64_t btree_node_copy(void *a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t *a7)
{
  v43[1] = *MEMORY[0x1895F89C0];
  MEMORY[0x1895F8858]();
  unsigned __int16 v15 = (uint64_t *)((char *)&v36 - v14);
  bzero((char *)&v36 - v14, v16);
  uint64_t v42 = 0LL;
  memset(v41, 0, sizeof(v41));
  unsigned int v17 = (a3 >> 26) & 0x10 | a4;
  LODWORD(v41[0]) = 2123139;
  *(_OWORD *)((char *)v41 + 8) = *(_OWORD *)(a2 + 400);
  unsigned int v38 = v17 | (a3 >> 22) & 0x20;
  uint64_t v18 = *(void *)(a2 + 416);
  *((void *)&v41[0] + 1) = *((void *)&v41[0] + 1) & 0xFFFFFFFFFFFFFE00LL | BYTE8(v41[0]) & 0x47 | v17 & 0x1B8 | (a3 >> 22) & 0x20;
  *((void *)&v41[1] + 1) = v18;
  uint64_t v19 = *(void *)(a2 + 56);
  WORD2(v41[0]) = *(_WORD *)(v19 + 32) & 0x1B;
  WORD3(v41[0]) = *(_WORD *)(v19 + 34);
  int v20 = *(pthread_mutex_t ***)(a2 + 8);
  if (!v20) {
    int v20 = *(pthread_mutex_t ***)(*(void *)a2 + 392LL);
  }
  unsigned __int16 v39 = 0;
  int v21 = obj_subtype(a2);
  uint64_t v22 = btree_node_create(v20, a3, v21, (uint64_t)v41, a5, a7);
  uint64_t inserted = v22;
  if ((_DWORD)a6 && !(*(_WORD *)(*(void *)(a2 + 56) + 32LL) & 2 | v22))
  {
    uint64_t v37 = a7;
    unsigned int v29 = 0;
    v43[0] = 0LL;
    char v40 = 0LL;
    while (1)
    {
      if (v29 >= *(_DWORD *)(*(void *)(a2 + 56) + 36LL))
      {
        uint64_t inserted = 0LL;
        goto LABEL_28;
      }

      void *v15 = 0LL;
      uint64_t v30 = btree_node_child_val(a2, (unsigned __int16)v29, v15);
      if ((_DWORD)v30
        || (uint64_t v30 = btree_node_get(a1, v15, 0LL, 2, *(_WORD *)(*(void *)(a2 + 56) + 34LL) - 1, 0LL, v43), (_DWORD)v30))
      {
        uint64_t inserted = v30;
        goto LABEL_28;
      }

      uint64_t v31 = v43[0];
      uint64_t v32 = btree_node_copy(a1, v43[0], a3, v38, a5, a6, &v42);
      if ((_DWORD)v32) {
        break;
      }
      uint64_t inserted = btree_node_key_ptr(a2, (unsigned __int16)v29, &v40, &v39);
      if ((_DWORD)inserted
        || (void *v15 = *(void *)(v42 + 112),
            uint64_t inserted = btree_node_insert_internal( *v37,  (unsigned __int16)v29,  v40,  v39,  v15,  (*(_WORD *)(*v37 + 406) & 0x7Fu) + 8,  a5),  (_DWORD)inserted))
      {
        uint64_t v33 = a1[1];
        if (v33) {
          unsigned int v34 = (const char *)(v33 + 3992);
        }
        else {
          unsigned int v34 = (const char *)(*(void *)(*(void *)(*a1 + 392LL) + 384LL) + 208LL);
        }
        log_err("%s:%d: %s btree_node_insert_internal failed: %d\n", "btree_node_copy", 6675, v34, inserted);
      }

      obj_release(v42);
      obj_unlock(v31, 1);
      obj_release(v31);
      uint64_t v42 = 0LL;
      ++v29;
      if ((_DWORD)inserted) {
        goto LABEL_28;
      }
    }

    uint64_t inserted = v32;
    obj_unlock(v31, 1);
    obj_release(v31);
    if (v42) {
      obj_release(v42);
    }
LABEL_28:
    a7 = v37;
    obj_dirty(*v37, a5, 0LL);
    goto LABEL_29;
  }

  if (!(_DWORD)v22)
  {
    unsigned int v24 = (void *)(*(void *)(*a7 + 56) + 32LL);
    unsigned __int16 v25 = (const void *)(*(void *)(a2 + 56) + 32LL);
    unsigned int v26 = obj_size_phys(a2);
    memcpy(v24, v25, v26 - 32LL);
    uint64_t v27 = *a7;
    if ((*(_WORD *)(*(void *)(a2 + 56) + 32LL) & 1) != 0)
    {
      BOOL v28 = *(int **)(v27 + 392);
      int *v28 = WORD4(v41[0]) & 0x1FF;
      v28[1] = (*((void *)&v41[0] + 1) >> 27) & 0x1F000;
      v28[2] = (DWORD2(v41[0]) >> 9) & 0x3FFF;
      unint64_t v28[3] = (unsigned __int16)(*((void *)&v41[0] + 1) >> 23);
    }

    btree_node_init_ext(v27, (uint64_t)v41, 0);
    uint64_t inserted = 0LL;
LABEL_29:
    obj_unlock(*a7, 2);
  }

  return inserted;
}

uint64_t btree_delete(uint64_t a1, uint64_t a2, void *a3)
{
  if ((*(_BYTE *)(a1 + 19) & 0x80) != 0 || (*(_BYTE *)(a1 + 400) & 0x80) != 0)
  {
    uint64_t v8 = btree_delete_node((void *)a1, (uint64_t *)a1, a2);
  }

  else
  {
    uint64_t v6 = *(void *)(a1 + 8);
    if (v6) {
      uint64_t v7 = obj_oid(v6);
    }
    else {
      uint64_t v7 = 0LL;
    }
    uint64_t v10 = *(void *)(*(void *)a1 + 392LL);
    int v11 = obj_type_and_flags(a1);
    int v12 = obj_size_phys(a1);
    uint64_t v13 = obj_oid(a1);
    if (a3) {
      uint64_t v14 = nx_reaper_add(v10, v11, v12, v7, v13, a2, 0, a3);
    }
    else {
      uint64_t v14 = nx_reaper_add_sub_object(v10, v11, v12, v7, v13, a2, 0);
    }
    uint64_t v8 = v14;
    if ((_DWORD)v14)
    {
      uint64_t v15 = *(void *)(a1 + 8);
      if (v15) {
        size_t v16 = (const char *)(v15 + 3992);
      }
      else {
        size_t v16 = (const char *)(*(void *)(*(void *)(*(void *)a1 + 392LL) + 384LL) + 208LL);
      }
      uint64_t v17 = obj_oid(a1);
      int v18 = obj_type_and_flags(a1);
      log_err( "%s:%d: %s error adding btree 0x%llx type 0x%x to reap list: %d\n",  "btree_delete",  6801,  v16,  v17,  v18,  v8);
    }
  }

  obj_unlock(a1, 2);
  return v8;
}

uint64_t btree_delete_node(void *a1, uint64_t *a2, uint64_t a3)
{
  v14[1] = *MEMORY[0x1895F89C0];
  MEMORY[0x1895F8858]();
  uint64_t v7 = (uint64_t *)((char *)v14 - v6);
  bzero((char *)v14 - v6, v8);
  if ((*(_WORD *)(a2[7] + 32) & 2) == 0)
  {
    unsigned int v9 = 0;
    v14[0] = 0LL;
    while (v9 < *(_DWORD *)(a2[7] + 36))
    {
      *uint64_t v7 = 0LL;
      uint64_t v10 = btree_node_child_val((uint64_t)a2, (unsigned __int16)v9, v7);
      if ((_DWORD)v10 || (uint64_t v10 = btree_node_get(a1, v7, 0LL, 0, *(_WORD *)(a2[7] + 34) - 1, 0LL, v14), (_DWORD)v10))
      {
        uint64_t v12 = v10;
        goto LABEL_10;
      }

      uint64_t v11 = v14[0];
      obj_lock(v14[0], 2);
      uint64_t v12 = btree_delete_node(a1, v11, a3);
      obj_unlock(v11, 2);
      obj_release(v11);
      ++v9;
      if ((_DWORD)v12) {
        goto LABEL_10;
      }
    }
  }

  uint64_t v12 = 0LL;
LABEL_10:
  obj_delete_and_free(a2, a3);
  return v12;
}

uint64_t btree_node_count(uint64_t a1, void *a2)
{
  if (!a1) {
    return 22LL;
  }
  uint64_t result = 0LL;
  *a2 = *(void *)(*(void *)(a1 + 392) + 32LL);
  return result;
}

uint64_t btree_node_init_ext(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v6 = *(void *)(a1 + 56);
  uint64_t result = btree_node_sanity_check((void *)a1, a2);
  if (!(_DWORD)result)
  {
    if (a2)
    {
      *(_OWORD *)(a1 + 400) = *(_OWORD *)(a2 + 8);
      *(void *)(a1 + 416) = *(void *)(a2 + 24);
    }

    uint64_t v8 = v6 + 56 + *(unsigned __int16 *)(v6 + 42);
    *(void *)(a1 + 376) = v6 + 56;
    *(void *)(a1 + 384) = v8;
    unsigned int v9 = obj_size_phys(a1);
    __int16 v10 = *(_WORD *)(v6 + 32);
    uint64_t v11 = -40LL;
    if ((v10 & 1) == 0) {
      uint64_t v11 = 0LL;
    }
    uint64_t v12 = v6 + v9 + v11;
    *(void *)(a1 + 392) = v12;
    if ((v10 & 1) != 0)
    {
      unint64_t v13 = *(void *)(a1 + 400) & 0xFFFFFFFFFFFFFE00LL | *(_DWORD *)v12 & 0x1FF;
      *(void *)(a1 + 400) = v13;
      unint64_t v14 = v13 & 0xFFFFF07FFFFFFFFFLL | ((unint64_t)((*(_DWORD *)(v12 + 4) >> 12) & 0x1F) << 39);
      *(void *)(a1 + 400) = v14;
      unint64_t v15 = v14 & 0xFFFFFFFFFF8001FFLL | ((*(_DWORD *)(v12 + 8) & 0x3FFFLL) << 9);
      *(void *)(a1 + 400) = v15;
      *(void *)(a1 + 400) = v15 & 0xFFFFFF80007FFFFFLL | ((unint64_t)*(unsigned __int16 *)(v12 + 12) << 23);
      *(void *)(a1 + 408) = obj_oid(a1);
    }

    if (a3) {
      return authapfs_validate_node((void *)a1, a2);
    }
    else {
      return 0LL;
    }
  }

  return result;
}

uint64_t btree_node_free_space_total(uint64_t a1)
{
  int v1 = *(_WORD **)(a1 + 56);
  if ((v1[16] & 4) != 0)
  {
    if ((*(_BYTE *)(a1 + 400) & 4) == 0)
    {
      __int16 v3 = 0;
      return (unsigned __int16)(v1[23] + v3 + v1[25] + v1[27]);
    }

    __int16 v2 = 4;
  }

  else
  {
    __int16 v2 = 8;
  }

  unsigned int v4 = (unsigned __int16)v1[21];
  __int16 v5 = btree_node_toc_required_capacity(a1, 0);
  __int16 v3 = v4 - v5 * v2;
  return (unsigned __int16)(v1[23] + v3 + v1[25] + v1[27]);
}

uint64_t btree_node_space_free_list_search( uint64_t result, int a2, unsigned __int16 a3, __int16 *a4, unsigned __int16 *a5)
{
  if ((*(_BYTE *)(result + 400) & 0x40) != 0) {
    unsigned __int16 v5 = a3;
  }
  else {
    unsigned __int16 v5 = (a3 + 7) & 0xFFF8;
  }
  uint64_t v6 = 48LL;
  if (a2 != 1) {
    uint64_t v6 = 52LL;
  }
  uint64_t v7 = 392LL;
  if (a2 == 1) {
    uint64_t v7 = 384LL;
  }
  int v8 = *(unsigned __int16 *)(*(void *)(result + 56) + v6);
  unsigned __int16 v9 = -1;
  if (v8 == 0xFFFF)
  {
    __int16 v13 = -1;
    if (a4) {
      goto LABEL_40;
    }
    goto LABEL_41;
  }

  uint64_t v11 = result;
  unsigned int v24 = a4;
  unsigned __int16 v25 = a5;
  uint64_t v12 = *(void *)(result + v7);
  __int16 v13 = -1;
  do
  {
    unsigned __int16 v9 = v8;
    uint64_t v14 = (unsigned __int16)v8;
    if (a2 == 1)
    {
      unsigned int v15 = *(unsigned __int16 *)(*(void *)(v11 + 56) + 44LL);
      BOOL v16 = v15 >= v9;
      unsigned int v17 = v15 - v9;
      if (v17 != 0 && v16 && v17 >= 4)
      {
        int v20 = *(unsigned __int16 *)(*(void *)(v11 + 384) + v14 + 2);
        if (v20 >= 4)
        {
          if ((*(_BYTE *)(v11 + 400) & 0x40) == 0) {
            int v20 = (v20 + 7) & 0x1FFF8;
          }
        }
      }
    }

    else
    {
      uint64_t result = obj_size_phys(v11);
      uint64_t v18 = *(void *)(v11 + 56);
      if ((*(_BYTE *)(v18 + 32) & 1) != 0) {
        __int16 v19 = -96;
      }
      else {
        __int16 v19 = -56;
      }
      if (v9 <= (unsigned __int16)(result
                                                - *(_WORD *)(v18 + 42)
                                                + v19
                                                - (*(_WORD *)(v18 + 46)
                                                 + *(_WORD *)(v18 + 44)))
        && v9 >= 4u)
      {
        unsigned int v21 = *(unsigned __int16 *)(*(void *)(v11 + 392) - v14 + 2);
        if (v21 >= 4)
        {
          if ((*(_BYTE *)(v11 + 400) & 0x40) == 0) {
            unsigned int v21 = (v21 + 7) & 0x1FFF8;
          }
          if (v21 <= v9) {
            goto LABEL_33;
          }
        }
      }
    }

    uint64_t result = nx_corruption_detected_int(*(void *)(*(void *)v11 + 392LL));
    if ((_DWORD)result) {
      break;
    }
LABEL_33:
    if (a2 == 1) {
      uint64_t v22 = v14;
    }
    else {
      uint64_t v22 = -v14;
    }
    int v23 = (unsigned __int16 *)(v12 + v22);
    int v8 = *v23;
    __int16 v13 = v9;
  }

  while (v8 != 0xFFFF);
  unsigned __int16 v9 = -1;
  __int16 v13 = -1;
LABEL_39:
  a4 = v24;
  a5 = v25;
  if (v24) {
LABEL_40:
  }
    *a4 = v13;
LABEL_41:
  if (a5) {
    *a5 = v9;
  }
  return result;
}

uint64_t btree_node_compact(uint64_t a1, __int16 a2, uint64_t a3)
{
  uint64_t v51 = 0LL;
  uint64_t v6 = *(void *)(a1 + 56);
  __int16 v7 = *(_WORD *)(v6 + 32);
  if ((v7 & 1) != 0)
  {
    uint64_t v10 = btree_node_copy(0LL, a1, 2281701376LL, (16 * v7) & 0x180, a3, 0LL, (uint64_t *)&v51);
    if ((_DWORD)v10) {
      return v10;
    }
    uint64_t v11 = *(void *)(a1 + 56);
    *(_DWORD *)(v11 + 36) = 0;
    *(_WORD *)(v11 + 44) = 0;
    uint64_t v12 = *(void *)(a1 + 392) - *(void *)(a1 + 384);
    *(_WORD *)(v11 + 46) = v12;
    *(void *)(v11 + 48) = 0xFFFF0000FFFFLL;
    bzero(*(void **)(a1 + 376), *(unsigned __int16 *)(v11 + 42) + (unint64_t)(unsigned __int16)v12);
    __int16 v13 = v51;
    uint64_t v14 = v51[7];
    goto LABEL_11;
  }

  __int128 v45 = btree_node_desc;
  int v46 = 2123139;
  __int128 v49 = *(_OWORD *)(a1 + 400);
  uint64_t v50 = *(void *)(a1 + 416);
  __int16 v47 = v7;
  __int16 v48 = *(_WORD *)(v6 + 34);
  int v8 = *(_DWORD *)(a1 + 40);
  LODWORD(v45) = *(unsigned __int16 *)(a1 + 36);
  DWORD1(v45) = v8;
  DWORD2(v45) = (*(void *)(a1 + 400) >> 27) & 0x1F000;
  uint64_t v9 = obj_create( *(pthread_mutex_t **)a1,  -2013265920,  0LL,  (uint64_t)&v45,  (uint64_t)&v46,  *(void *)(a1 + 8),  a3,  (uint64_t *)&v51);
  if (!(_DWORD)v9)
  {
    unsigned int v15 = v51;
    BOOL v16 = (_OWORD *)v51[7];
    unsigned int v17 = *(_OWORD **)(a1 + 56);
    __int128 v18 = v17[1];
    *BOOL v16 = *v17;
    v16[1] = v18;
    uint64_t v19 = obj_exchange_phys(a1, (uint64_t)v15);
    if ((_DWORD)v19)
    {
      uint64_t v10 = v19;
      uint64_t v20 = *(void *)(a1 + 8);
      if (v20) {
        unsigned int v21 = (const char *)(v20 + 3992);
      }
      else {
        unsigned int v21 = (const char *)(*(void *)(*(void *)(*(void *)a1 + 392LL) + 384LL) + 208LL);
      }
      uint64_t v22 = obj_oid(a1);
      uint64_t v23 = obj_oid((uint64_t)v51);
      log_err( "%s:%d: %s obj_exchange_phys (%llx, %llx) with xid %llu failed: %d\n",  "btree_node_compact",  1569,  v21,  v22,  v23,  a3,  v10);
LABEL_36:
      obj_free((uint64_t)v51);
      obj_release(v51);
      obj_dirty(a1, a3, 0LL);
      return v10;
    }

    btree_node_init_ext(a1, (uint64_t)&v46, 0);
    btree_node_init_ext((uint64_t)v51, (uint64_t)&v46, 0);
    __int16 v13 = v51;
    uint64_t v14 = v51[7];
    *(_WORD *)(*(void *)(a1 + 56) + 32LL) |= *(_WORD *)(v14 + 32) & 0x8000;
LABEL_11:
    int v24 = btree_node_toc_required_capacity((uint64_t)v13, a2);
    char v25 = 2;
    if ((*(_WORD *)(v14 + 32) & 4) == 0) {
      char v25 = 3;
    }
    btree_node_toc_resize(a1, (v24 << v25) & 0xFFFC);
    unsigned int v26 = v51;
    uint64_t v27 = v51[7];
    if (*(_DWORD *)(v27 + 36))
    {
      unsigned __int16 v28 = 0;
      while (1)
      {
        __int16 v29 = *(_WORD *)(v27 + 32);
        uint64_t v30 = v26[47];
        uint64_t v31 = v28;
        uint64_t v32 = (unsigned __int16 *)(v30 + 4LL * v28);
        uint64_t v33 = (unsigned __int16 *)(v30 + 8LL * v28);
        if ((v29 & 4) != 0)
        {
          uint64_t v33 = v32;
          int v34 = (*((_DWORD *)v26 + 100) >> 9) & 0x3FFF;
        }

        else
        {
          int v34 = *(unsigned __int16 *)(v30 + 8 * v31 + 2);
        }

        uint64_t v35 = *v33;
        uint64_t v36 = (unsigned __int16 *)(v30 + 4 * v31 + 2);
        uint64_t v37 = v30 + 8 * v31 + 4;
        if ((v29 & 4) == 0) {
          uint64_t v36 = (unsigned __int16 *)v37;
        }
        uint64_t v38 = *v36;
        unsigned int v39 = btree_node_val_len((uint64_t)v26, v31);
        if ((_DWORD)v35 == 0xFFFF)
        {
          int v41 = 0LL;
        }

        else
        {
          uint64_t inserted = btree_node_key_range_validate((uint64_t)v26, v35, v34);
          if ((_DWORD)inserted) {
            break;
          }
          unsigned int v26 = v51;
          int v41 = (const void *)(v51[48] + v35);
        }

        if (v38 > 0xFFFD)
        {
          uint64_t v42 = 0LL;
        }

        else
        {
          uint64_t inserted = btree_node_val_range_validate((uint64_t)v26, v38, v39);
          if ((_DWORD)inserted) {
            break;
          }
          uint64_t v42 = (const void *)(v51[49] - v38);
        }

        uint64_t inserted = btree_node_insert_internal(a1, v31, v41, v34, v42, v39, a3);
        if ((_DWORD)inserted) {
          break;
        }
        unsigned __int16 v28 = v31 + 1;
        unsigned int v26 = v51;
        uint64_t v27 = v51[7];
      }

      uint64_t v10 = inserted;
      if ((v7 & 1) != 0)
      {
        memcpy((void *)(*(void *)(a1 + 56) + 32LL), (const void *)(v51[7] + 32LL), v51[49] - v51[7] - 32LL);
        __int128 v43 = (void *)a1;
      }

      else
      {
        obj_exchange_phys(a1, (uint64_t)v51);
        btree_node_init_ext(a1, 0LL, 0);
        __int128 v43 = v51;
      }

      btree_node_init_ext((uint64_t)v43, 0LL, 0);
    }

    else
    {
LABEL_30:
      uint64_t v10 = 0LL;
    }

    goto LABEL_36;
  }

  return v9;
}

uint64_t btree_node_space_free_list_alloc(uint64_t a1, int a2, unsigned __int16 a3, int a4, int a5)
{
  if (a5 == 0xFFFF) {
    return 22LL;
  }
  if ((*(void *)(a1 + 400) & 0x40LL) != 0) {
    unsigned __int16 v5 = a3;
  }
  else {
    unsigned __int16 v5 = (a3 + 7) & 0xFFF8;
  }
  uint64_t v6 = *(void *)(a1 + 56);
  __int16 v7 = (_WORD *)(v6 + 48);
  uint64_t v8 = 48LL;
  if (a2 != 1)
  {
    uint64_t v8 = 52LL;
    __int16 v7 = (_WORD *)(v6 + 52);
  }

  uint64_t v9 = 392LL;
  if (a2 == 1)
  {
    uint64_t v9 = 384LL;
    int v10 = 1;
  }

  else
  {
    int v10 = -1;
  }

  uint64_t v11 = *(void *)(a1 + v9);
  v7[1] -= v5;
  if (a4 != 0xFFFF || (uint64_t result = 0LL, *(unsigned __int16 *)(v6 + v8) == a5))
  {
    int v13 = v5;
    int v14 = v10;
    unsigned int v15 = (_WORD *)(v11 + a5 * (uint64_t)v10);
    unsigned __int16 v16 = v15[1] - v13;
    if (v16 < 5u)
    {
      __int128 v18 = (_WORD *)(v11 + v10 * (uint64_t)a4);
      if (a4 != 0xFFFF) {
        __int16 v7 = v18;
      }
    }

    else
    {
      if (a4 != 0xFFFF) {
        __int16 v7 = (_WORD *)(v11 + v10 * (uint64_t)a4);
      }
      int v17 = v10 * v13 + a5;
      *__int16 v7 = v17;
      __int16 v7 = (_WORD *)(v11 + v14 * (uint64_t)v17);
      v7[1] = v16;
    }

    uint64_t result = 0LL;
    *__int16 v7 = *v15;
  }

  return result;
}

uint64_t btree_node_space_alloc(uint64_t a1, int a2, unsigned __int16 a3, _WORD *a4)
{
  unsigned __int16 v14 = -1;
  unsigned __int16 v13 = -1;
  btree_node_space_free_list_search(a1, a2, a3, (__int16 *)&v13, &v14);
  if (v14 == 0xFFFF)
  {
    if ((*(_BYTE *)(a1 + 400) & 0x40) != 0) {
      unsigned __int16 v10 = a3;
    }
    else {
      unsigned __int16 v10 = (a3 + 7) & 0xFFF8;
    }
    uint64_t v11 = *(void *)(a1 + 56);
    unsigned int v12 = *(unsigned __int16 *)(v11 + 46);
    if (v12 < v10) {
      return 28LL;
    }
    if (a2 == 1)
    {
      LOWORD(v9) = *(_WORD *)(v11 + 44);
      *(_WORD *)(v11 + 44) = v9 + v10;
      *(_WORD *)(v11 + 46) = v12 - v10;
    }

    else
    {
      *(_WORD *)(v11 + 46) = v12 - v10;
      if (a2 == 2) {
        int v9 = *(_DWORD *)(a1 + 392)
      }
           - *(unsigned __int16 *)(v11 + 44)
           - (*(_DWORD *)(a1 + 384)
            + (unsigned __int16)(v12 - v10));
      else {
        LOWORD(v9) = -1;
      }
    }
  }

  else
  {
    uint64_t result = btree_node_space_free_list_alloc(a1, a2, a3, v13, v14);
    if ((_DWORD)result) {
      return result;
    }
    LOWORD(v9) = v14;
  }

  uint64_t result = 0LL;
  *a4 = v9;
  return result;
}

void btree_node_toc_resize(uint64_t a1, unsigned int a2)
{
  uint64_t v3 = *(void *)(a1 + 56);
  unsigned int v4 = *(unsigned __int16 *)(v3 + 42);
  unsigned __int16 v5 = v4 - a2;
  if (v4 >= a2)
  {
    if (v4 <= a2) {
      return;
    }
    memmove((void *)(*(void *)(a1 + 384) - v5), *(const void **)(a1 + 384), *(unsigned __int16 *)(v3 + 44));
    *(void *)(a1 + 384) -= v5;
    uint64_t v7 = *(void *)(a1 + 56);
    *(_WORD *)(v7 + 46) += v5;
    __int16 v8 = *(_WORD *)(v7 + 42) - v5;
  }

  else
  {
    unsigned __int16 v6 = a2 - v4;
    memmove( (void *)(*(void *)(a1 + 384) + (unsigned __int16)(a2 - v4)),  *(const void **)(a1 + 384),  *(unsigned __int16 *)(v3 + 44));
    bzero(*(void **)(a1 + 384), v6);
    *(void *)(a1 + 384) += v6;
    uint64_t v7 = *(void *)(a1 + 56);
    *(_WORD *)(v7 + 46) -= v6;
    __int16 v8 = *(_WORD *)(v7 + 42) + v6;
  }

  *(_WORD *)(v7 + 42) = v8;
}

void *btree_node_toc_shift(uint64_t a1, int a2, int a3)
{
  uint64_t v3 = *(void *)(a1 + 56);
  __int16 v4 = *(_WORD *)(v3 + 32);
  if ((v4 & 4) != 0) {
    char v5 = 2;
  }
  else {
    char v5 = 3;
  }
  unsigned int v6 = (a2 + (unsigned __int16)a3) << v5;
  int v7 = a2 + (__int16)-(__int16)a3;
  if ((v4 & 4) != 0) {
    char v8 = 2;
  }
  else {
    char v8 = 3;
  }
  uint64_t v9 = v7 << v8;
  if (a3 >= 0) {
    int v7 = a2;
  }
  else {
    unsigned int v6 = a2 << v8;
  }
  if (a3 >= 0)
  {
    char v8 = v5;
    uint64_t v9 = (a2 << v5);
  }

  return memmove( (void *)(*(void *)(a1 + 376) + v6),  (const void *)(*(void *)(a1 + 376) + v9),  ((*(_DWORD *)(v3 + 36) - v7) << v8) & 0xFFFC);
}

uint64_t btree_node_child_id_update_cb( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, void *a7, int a8)
{
  if (a8 != 8) {
    return 22LL;
  }
  uint64_t result = 0LL;
  *a5 = *a7;
  return result;
}

uint64_t bt_move_entries(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  if (a3 >= 0) {
    LOWORD(v7) = a3;
  }
  else {
    int v7 = -a3;
  }
  int v8 = (__int16)v7;
  if (a3 >= 0) {
    uint64_t v9 = a1;
  }
  else {
    uint64_t v9 = a2;
  }
  if (a3 >= 0) {
    uint64_t v10 = a2;
  }
  else {
    uint64_t v10 = a1;
  }
  uint64_t v11 = *(_WORD **)(v10 + 56);
  if ((v11[16] & 4) != 0)
  {
    if ((*(_BYTE *)(v10 + 400) & 4) == 0) {
      goto LABEL_19;
    }
    __int16 v12 = 4;
  }

  else
  {
    __int16 v12 = 8;
  }

  unsigned __int16 v13 = btree_node_toc_required_capacity(v10, (__int16)v7) * v12;
  unsigned int v14 = (unsigned __int16)v11[21];
  if (v14 >= v13) {
    goto LABEL_19;
  }
  if (v13 - v14 <= (unsigned __int16)v11[23])
  {
    btree_node_toc_resize(v10, v13);
    goto LABEL_19;
  }

  uint64_t v15 = btree_node_compact(v10, (unsigned __int16)v8, a4);
  if (!(_DWORD)v15)
  {
LABEL_19:
    uint64_t v59 = 0LL;
    memset(__n, 0, sizeof(__n));
    if (v9 == a2)
    {
      if (v8 < 1)
      {
        __int16 v37 = 0;
        int v38 = 0;
LABEL_60:
        uint64_t v15 = 0LL;
      }

      else
      {
        uint64_t v36 = btree_node_key_ptr(a2, 0, &v59, (_WORD *)__n + 1);
        if ((_DWORD)v36)
        {
          uint64_t v15 = v36;
          __int16 v37 = 0;
          int v38 = 0;
        }

        else
        {
          int v38 = 0;
          do
          {
            uint64_t inserted = btree_node_val_ptr((void *)a2, (unsigned __int16)v38, &__n[1], (__int16 *)__n);
            if ((_DWORD)inserted) {
              break;
            }
            uint64_t inserted = btree_node_insert_internal( a1,  *(unsigned __int16 *)(*(void *)(a1 + 56) + 36LL),  v59,  HIWORD(__n[0]),  *(const void **)&__n[1],  LOWORD(__n[0]),  a4);
            if ((_DWORD)inserted) {
              break;
            }
            char v40 = *(_WORD **)(a2 + 56);
            uint64_t v41 = *(void *)(a2 + 376);
            if ((*(_BYTE *)(a2 + 400) & 0x40) != 0) {
              __int16 v42 = HIWORD(__n[0]);
            }
            else {
              __int16 v42 = (HIWORD(__n[0]) + 7) & 0xFFF8;
            }
            unsigned __int16 v43 = (v42 + 7) & 0xFFF8;
            if ((*(_BYTE *)(a2 + 400) & 0x40) != 0) {
              unsigned __int16 v43 = HIWORD(__n[0]);
            }
            if (v43 >= 4u)
            {
              if ((v40[16] & 4) != 0) {
                uint64_t v44 = (unsigned __int16 *)(v41 + 4LL * (unsigned __int16)v38);
              }
              else {
                uint64_t v44 = (unsigned __int16 *)(v41 + 8LL * (unsigned __int16)v38);
              }
              uint64_t v45 = *v44;
              int v46 = (_WORD *)(*(void *)(a2 + 384) + v45);
              v46[1] = v43;
              *int v46 = v40[24];
              v40[24] = v45;
            }

            v40[25] += v43;
            unsigned __int16 v47 = __n[0];
            if (LOWORD(__n[0]) && LOWORD(__n[0]) != 65534)
            {
              if ((*(_BYTE *)(a2 + 400) & 0x40) != 0) {
                __int16 v48 = __n[0];
              }
              else {
                __int16 v48 = (LOWORD(__n[0]) + 7) & 0xFFF8;
              }
              unsigned __int16 v49 = (v48 + 7) & 0xFFF8;
              if ((*(_BYTE *)(a2 + 400) & 0x40) == 0) {
                unsigned __int16 v47 = v49;
              }
              if (v47 >= 4u)
              {
                uint64_t v50 = v41 + 8LL * (unsigned __int16)v38 + 4;
                uint64_t v51 = (unsigned __int16 *)(v41 + 4LL * (unsigned __int16)v38 + 2);
                if ((v40[16] & 4) == 0) {
                  uint64_t v51 = (unsigned __int16 *)v50;
                }
                uint64_t v52 = *v51;
                uint64_t v53 = (_WORD *)(*(void *)(a2 + 392) - v52);
                v53[1] = v47;
                _WORD *v53 = v40[26];
                v40[26] = v52;
              }

              v40[27] += v47;
            }

            __int16 v37 = ++v38;
            uint64_t inserted = btree_node_key_ptr(a2, (unsigned __int16)v38, &v59, (_WORD *)__n + 1);
          }

          while (!(_DWORD)inserted);
          uint64_t v15 = inserted;
          __int16 v37 = v38;
        }
      }

      btree_node_toc_shift(a2, 0, (__int16)-v37);
      *(_DWORD *)(*(void *)(a2 + 56) + 36LL) -= v38;
    }

    else if (v8 < 1)
    {
      uint64_t v15 = 0LL;
    }

    else
    {
      btree_node_toc_shift(a2, 0, v8);
      uint64_t v16 = 0LL;
      uint64_t v17 = *(void *)(a2 + 56);
      *(_DWORD *)(v17 + 36) += (unsigned __int16)v8;
      *(_WORD *)(v17 + 32) |= 0x8000u;
      uint64_t v18 = *(void *)(a2 + 376);
      do
      {
        if ((*(_WORD *)(v17 + 32) & 4) != 0) {
          *(_DWORD *)(v18 + 4 * v16) = -1;
        }
        else {
          *(void *)(v18 + 8 * v16) = 0xFFFF0000FFFFLL;
        }
        ++v16;
      }

      while (v8 > (__int16)v16);
      LOWORD(v19) = 0;
      int v20 = *(_DWORD *)(*(void *)(a1 + 56) + 36LL);
      while (1)
      {
        uint64_t v21 = btree_node_key_ptr(a1, (unsigned __int16)(v20 - 1), &v59, (_WORD *)__n + 1);
        if ((_DWORD)v21) {
          break;
        }
        uint64_t v21 = btree_node_val_ptr( (void *)a1,  (unsigned __int16)(*(_WORD *)(*(void *)(a1 + 56) + 36LL) - 1),  &__n[1],  (__int16 *)__n);
        if ((_DWORD)v21) {
          break;
        }
        uint64_t v21 = btree_node_entry_update(a2, (unsigned __int16)(v8 + ~(_WORD)v19), v59, HIWORD(__n[0]), *(void **)&__n[1]);
        if ((_DWORD)v21) {
          break;
        }
        uint64_t v22 = *(void *)(a1 + 56);
        int v20 = *(_DWORD *)(v22 + 36) - 1;
        *(_DWORD *)(v22 + 36) = v20;
        uint64_t v23 = *(void *)(a1 + 376);
        if ((*(_BYTE *)(a1 + 400) & 0x40) != 0) {
          __int16 v24 = HIWORD(__n[0]);
        }
        else {
          __int16 v24 = (HIWORD(__n[0]) + 7) & 0xFFF8;
        }
        unsigned __int16 v25 = (v24 + 7) & 0xFFF8;
        if ((*(_BYTE *)(a1 + 400) & 0x40) != 0) {
          unsigned __int16 v25 = HIWORD(__n[0]);
        }
        if (v25 >= 4u)
        {
          if ((*(_WORD *)(v22 + 32) & 4) != 0) {
            unsigned int v26 = (unsigned __int16 *)(v23 + 4LL * (unsigned __int16)v20);
          }
          else {
            unsigned int v26 = (unsigned __int16 *)(v23 + 8LL * (unsigned __int16)v20);
          }
          uint64_t v27 = *v26;
          unsigned __int16 v28 = (_WORD *)(*(void *)(a1 + 384) + v27);
          v28[1] = v25;
          _WORD *v28 = *(_WORD *)(v22 + 48);
          *(_WORD *)(v22 + 48) = v27;
        }

        *(_WORD *)(v22 + 50) += v25;
        unsigned __int16 v29 = __n[0];
        if (LOWORD(__n[0]) && LOWORD(__n[0]) != 65534)
        {
          if ((*(_BYTE *)(a1 + 400) & 0x40) != 0) {
            __int16 v30 = __n[0];
          }
          else {
            __int16 v30 = (LOWORD(__n[0]) + 7) & 0xFFF8;
          }
          unsigned __int16 v31 = (v30 + 7) & 0xFFF8;
          if ((*(_BYTE *)(a1 + 400) & 0x40) == 0) {
            unsigned __int16 v29 = v31;
          }
          if (v29 >= 4u)
          {
            uint64_t v32 = v23 + 8LL * (unsigned __int16)v20 + 4;
            uint64_t v33 = (unsigned __int16 *)(v23 + 4LL * (unsigned __int16)v20 + 2);
            if ((*(_WORD *)(v22 + 32) & 4) == 0) {
              uint64_t v33 = (unsigned __int16 *)v32;
            }
            uint64_t v34 = *v33;
            uint64_t v35 = (_WORD *)(*(void *)(a1 + 392) - v34);
            v35[1] = v29;
            _WORD *v35 = *(_WORD *)(v22 + 52);
            *(_WORD *)(v22 + 52) = v34;
          }

          *(_WORD *)(v22 + 54) += v29;
        }

        int v19 = (__int16)(v19 + 1);
        if (v19 >= v8)
        {
          uint64_t v15 = 0LL;
          *(_WORD *)(*(void *)(a2 + 56) + 32LL) &= ~0x8000u;
          goto LABEL_90;
        }
      }

      uint64_t v15 = v21;
      *(_WORD *)(*(void *)(a2 + 56) + 32LL) &= ~0x8000u;
      btree_node_toc_shift(a2, 0, (__int16)(v19 - v8));
    }

void btree_node_reinit_root(uint64_t a1, int a2, uint64_t a3)
{
  int v9 = 2123139;
  if (a2) {
    __int16 v5 = 1;
  }
  else {
    __int16 v5 = 3;
  }
  uint64_t v6 = *(void *)(a1 + 56);
  __int16 v10 = *(_WORD *)(v6 + 32) & 0x18 | v5;
  __int16 v11 = a2;
  __int128 v12 = *(_OWORD *)(a1 + 400);
  uint64_t v13 = *(void *)(a1 + 416);
  bzero((void *)(v6 + 32), ((*(void *)(a1 + 400) >> 27) & 0x1F000LL) - 72);
  uint64_t v7 = *(void *)(a1 + 56);
  unsigned int v8 = obj_size_phys(a1);
  btree_node_init_phys(v7, v8, (uint64_t)&v9);
  btree_node_init_ext(a1, (uint64_t)&v9, 0);
  obj_dirty(a1, a3, 0LL);
}

uint64_t bt_update_last_leaf(uint64_t result, uint64_t a2, uint64_t a3)
{
  v12[1] = *MEMORY[0x1895F89C0];
  if (*(void *)(result + 432) == *(void *)(a3 + 112))
  {
    __int16 v4 = (void *)result;
    uint64_t v5 = *(void *)(a2 + 56);
    if ((*(_WORD *)(v5 + 32) & 2) != 0 || !*(_DWORD *)(v5 + 36))
    {
      *(void *)(result + 432) = *(void *)(a2 + 112);
    }

    else
    {
      MEMORY[0x1895F8858]();
      uint64_t v7 = (void *)((char *)v12 - v6);
      bzero((char *)v12 - v6, v8);
      uint64_t result = btree_node_child_val(a2, (unsigned __int16)(*(_WORD *)(*(void *)(a2 + 56) + 36LL) - 1), v7);
      if ((_DWORD)result)
      {
        uint64_t v9 = v4[1];
        if (v9) {
          __int16 v10 = (const char *)(v9 + 3992);
        }
        else {
          __int16 v10 = (const char *)(*(void *)(*(void *)(*v4 + 392LL) + 384LL) + 208LL);
        }
        uint64_t result = (uint64_t)log_err( "%s:%d: %s failed to update rightmost leaf field: %d\n",  "bt_update_last_leaf",  2518,  v10,  result);
        uint64_t v11 = 0LL;
      }

      else
      {
        uint64_t v11 = *v7;
      }

      v4[54] = v11;
    }
  }

  return result;
}

void bt_merge_nodes( uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10 = a6;
  v77[1] = *MEMORY[0x1895F89C0];
  v77[0] = a6;
  MEMORY[0x1895F8858]();
  uint64_t v17 = (uint64_t *)((char *)&v68 - v16);
  bzero((char *)&v68 - v16, v18);
  uint64_t v75 = 0LL;
  unsigned __int16 v74 = 0;
  uint64_t v19 = *(void *)(a4 + 56);
  if (!a2)
  {
    if ((*(_WORD *)(v19 + 32) & 2) != 0 || *(_DWORD *)(v19 + 36) != 1) {
      return;
    }
    if (a5 || v10 && (*(_BYTE *)(v10 + 16) & 0x10) != 0)
    {
      if (btree_node_child_val(a4, 0, v17)
        || btree_node_get((void *)a1, v17, a7, 3, *(_WORD *)(*(void *)(a4 + 56) + 34LL) - 1, a8, v77))
      {
        return;
      }

      uint64_t v10 = v77[0];
      if ((*(_BYTE *)(a1 + 400) & 0x10) != 0 && *(void *)(v77[0] + 112) != *v17) {
        btree_node_child_id_update(a4, 0, (uint64_t *)(v77[0] + 112), a8);
      }
      int v44 = 1;
    }

    else
    {
      int v44 = 0;
    }

    if (btree_node_free_space_total(v10) > 0x27)
    {
      uint64_t v48 = *(void *)(v10 + 56);
      if (*(unsigned __int16 *)(v48 + 46) > 0x27u
        || ((*(_WORD *)(v48 + 32) & 4) == 0 || (*(_BYTE *)(v10 + 400) & 4) != 0)
        && (btree_node_compact(v10, 0LL, a8), *(unsigned __int16 *)(*(void *)(v10 + 56) + 46LL) > 0x27u))
      {
        btree_node_remove(a4, 0, a8);
        btree_node_reinit_root(a4, (unsigned __int16)(*(_WORD *)(*(void *)(a4 + 56) + 34LL) - 1), a8);
        int v49 = bt_move_entries(a4, v10, (__int16)-*(_WORD *)(*(void *)(v10 + 56) + 36LL), a8);
        if (!v49)
        {
          bt_update_last_leaf(a1, a4, v10);
          obj_delete_and_free((uint64_t *)v10, a8);
          if (v44)
          {
            obj_unlock(v10, 2);
            obj_release(v10);
          }

          uint64_t v63 = (unint64_t *)(*(void *)(a1 + 392) + 32LL);
          do
            unint64_t v64 = __ldxr(v63);
          while (__stxr(v64 - 1, v63));
          goto LABEL_51;
        }

        uint64_t v50 = *(void *)(a1 + 8);
        if (v50) {
          uint64_t v51 = (const char *)(v50 + 3992);
        }
        else {
          uint64_t v51 = (const char *)(*(void *)(*(void *)(*(void *)a1 + 392LL) + 384LL) + 208LL);
        }
        log_err("%s:%d: %s failed to move all entries: %d\n", "bt_merge_nodes", 4371, v51, v49);
        bt_move_entries(a4, v10, *(__int16 *)(*(void *)(a4 + 56) + 36LL), a8);
        btree_node_reinit_root(a4, (unsigned __int16)(*(_WORD *)(*(void *)(a4 + 56) + 34LL) + 1), a8);
        if (!btree_node_key_ptr(v10, 0, &v75, &v74))
        {
          void *v17 = *(void *)(v10 + 112);
          btree_node_insert_internal(a4, 0, v75, v74, v17, (*(_WORD *)(a4 + 406) & 0x7F) + 8, a8);
        }
      }
    }

    if (!v44) {
      return;
    }
    obj_unlock(v10, 2);
    uint64_t v65 = v10;
    goto LABEL_110;
  }

  if (!*(_DWORD *)(v19 + 36))
  {
    btree_node_remove(a2, a3, a8);
    uint64_t v45 = *(void *)(a2 + 56);
    if ((*(_WORD *)(v45 + 32) & 1) != 0 && !*(_DWORD *)(v45 + 36)) {
      btree_node_reinit_root(a2, 0, a8);
    }
    bt_update_last_leaf(a1, a2, a4);
    obj_delete_and_free((uint64_t *)a4, a8);
    int v46 = (unint64_t *)(*(void *)(a1 + 392) + 32LL);
    do
      unint64_t v47 = __ldxr(v46);
    while (__stxr(v47 - 1, v46));
LABEL_51:
    obj_dirty(a1, a8, 0LL);
    return;
  }

  if (*(_DWORD *)(*(void *)(a2 + 56) + 36LL) - 1 > a3)
  {
    uint64_t v20 = a3 + 1;
    if (!btree_node_child_val(a2, (unsigned __int16)v20, v17))
    {
      int v76 = 0LL;
      if (!btree_node_get( (void *)a1,  v17,  a7,  3,  *(_WORD *)(*(void *)(a2 + 56) + 34LL) - 1,  a8,  (uint64_t *)&v76))
      {
        if ((*(_BYTE *)(a1 + 400) & 0x10) != 0 && v76[14] != *v17) {
          btree_node_child_id_update(a2, (unsigned __int16)v20, v76 + 14, a8);
        }
        uint64_t v21 = *(void *)(a4 + 56);
        if ((*(_WORD *)(v21 + 32) & 4) != 0)
        {
          unsigned int v52 = *(_DWORD *)(v21 + 36);
          __int16 v24 = v76;
          uint64_t v72 = v76[7];
          int v43 = *(_DWORD *)(v72 + 36);
          unsigned int v53 = v43 + v52;
          if (v43 + v52 <= btree_node_toc_required_capacity(a4, 0))
          {
            uint64_t v73 = 0LL;
            LOWORD(v30) = v43;
          }

          else
          {
            else {
              uint64_t v30 = (v53 >> 1) - v52;
            }
            uint64_t v73 = v30;
          }
        }

        else
        {
          uint64_t v69 = v20;
          __int16 v22 = btree_node_toc_required_capacity(a4, 0);
          unsigned int v23 = btree_node_free_space_total(a4);
          __int16 v24 = v76;
          int v25 = btree_node_free_space_total((uint64_t)v76);
          unsigned int v26 = 0;
          int v27 = 0;
          uint64_t v72 = v24[7];
          uint64_t v73 = 0LL;
          unsigned int v28 = *(_DWORD *)(v72 + 36);
          unsigned int v29 = 8 * (v22 & 0x1FFF);
          int v70 = v23 - ((v25 + v23) >> 1);
          unsigned int v71 = v28;
          do
          {
            LODWORD(v30) = v26;
            if (!(_WORD)v73 && (_WORD)v26)
            {
              int v31 = btree_node_toc_required_capacity(a4, (__int16)v26);
              int v32 = (8 * (_WORD)v31 - (_WORD)v29) & 0xFFF8;
              if (((8 * v31) & 0xFFF8u) <= v29) {
                int v32 = 0;
              }
              else {
                uint64_t v33 = v26;
              }
              uint64_t v73 = v33;
            }

            uint64_t v34 = v24[50];
            __int16 v35 = *(_WORD *)(v72 + 32);
            if ((v34 & 0x40) != 0)
            {
              if ((v35 & 4) != 0) {
                unsigned int v37 = (v34 >> 9) & 0x3FFF;
              }
              else {
                unsigned int v37 = *(unsigned __int16 *)(v24[47] + 8LL * (unsigned __int16)v30 + 2);
              }
            }

            else
            {
              if ((v35 & 4) != 0) {
                unsigned int v36 = (v34 >> 9) & 0x3FFF;
              }
              else {
                unsigned int v36 = *(unsigned __int16 *)(v24[47] + 8LL * (unsigned __int16)v30 + 2);
              }
              unsigned int v37 = (v36 + 7) & 0x1FFF8;
            }

            int v38 = v37 + v27;
            int v39 = btree_node_val_len((uint64_t)v24, (unsigned __int16)v30);
            if (v39 == 65534) {
              int v40 = 0;
            }
            else {
              int v40 = v39;
            }
            if ((v34 & 0x40) == 0) {
              int v40 = (v40 + 7) & 0x1FFF8;
            }
            int v27 = v38 + v40;
            unsigned int v26 = v30 + 1;
            int v41 = btree_node_toc_required_capacity(a4, (__int16)(v30 + 1));
            int v42 = (8 * (_WORD)v41 - (_WORD)v29) & 0xFFF8;
            if (((8 * v41) & 0xFFF8u) <= v29) {
              int v42 = 0;
            }
          }

          while (v42 + (unsigned __int16)v27 <= v23);
          LOWORD(v20) = v69;
          int v43 = v71;
        }

        if (v43 != (unsigned __int16)v30)
        {
          if ((*(_WORD *)(*(void *)(a2 + 56) + 32LL) & 4) != 0) {
            int v54 = (*(_DWORD *)(a2 + 400) >> 9) & 0x3FFF;
          }
          else {
            int v54 = *(unsigned __int16 *)(*(void *)(a2 + 376) + 8LL * (unsigned __int16)v20 + 2);
          }
          if ((*(_WORD *)(v72 + 32) & 4) != 0) {
            int v55 = (*((_DWORD *)v24 + 100) >> 9) & 0x3FFF;
          }
          else {
            int v55 = *(unsigned __int16 *)(v24[47] + 8LL * (unsigned __int16)v73 + 2);
          }
          unsigned __int16 v74 = v55;
          uint64_t v56 = *(void *)(a2 + 400);
          if ((v56 & 0x40) != 0) {
            unsigned int v57 = v54;
          }
          else {
            unsigned int v57 = (v54 + 7) & 0x1FFF8;
          }
          unsigned int v58 = (v55 + 7) & 0x1FFF8;
          if ((v56 & 0x40) != 0) {
            unsigned int v58 = v55;
          }
          if (v57 >= v58)
          {
            LOWORD(v30) = v73;
          }

          else
          {
            if ((v56 & 0x40) == 0)
            {
              LOWORD(v55) = (v55 + 7) & 0xFFF8;
              LOWORD(v54) = (v54 + 7) & 0xFFF8;
            }

            BOOL has_room = btree_node_has_room(a2, 0, 0LL, 0LL, v55 - v54, 0, 0LL);
            LOWORD(v30) = v73;
            if (!has_room) {
              goto LABEL_109;
            }
          }
        }

        if ((_WORD)v30 && !bt_move_entries(a4, (uint64_t)v24, (__int16)-(__int16)v30, a8))
        {
          if (*(_DWORD *)(v24[7] + 36))
          {
            int v60 = btree_node_key_ptr((uint64_t)v24, 0, &v75, &v74);
            if (v60 || (int v60 = btree_node_entry_update(a2, (unsigned __int16)v20, v75, v74, 0LL)) != 0)
            {
              uint64_t v61 = *(void *)(a1 + 8);
              if (v61) {
                uint64_t v62 = (const char *)(v61 + 3992);
              }
              else {
                uint64_t v62 = (const char *)(*(void *)(*(void *)(*(void *)a1 + 392LL) + 384LL) + 208LL);
              }
              log_err("%s:%d: %s btree_node_key_update failed: %d\n", "bt_merge_nodes", 4512, v62, v60);
            }
          }

          else
          {
            btree_node_remove(a2, (unsigned __int16)v20, a8);
            bt_update_last_leaf(a1, a2, (uint64_t)v24);
            obj_delete_and_free(v24, a8);
            int v66 = (unint64_t *)(*(void *)(a1 + 392) + 32LL);
            do
              unint64_t v67 = __ldxr(v66);
            while (__stxr(v67 - 1, v66));
            obj_dirty(a1, a8, 0LL);
          }
        }

LABEL_109:
        obj_unlock((uint64_t)v24, 2);
        uint64_t v65 = (uint64_t)v24;
LABEL_110:
        obj_release(v65);
      }
    }
  }

uint64_t spaceman_metazone_init(uint64_t a1, unint64_t a2)
{
  uint64_t v25 = 0LL;
  if (*(_BYTE *)(a1 + 639))
  {
    log_debug( "%s:%d: %s Skipping metazone_init() as backing store is sparse\n",  "spaceman_metazone_init",  72,  (const char *)(*(void *)(a1 + 384) + 208LL));
    return 0LL;
  }

  unint64_t v27 = 0LL;
  unint64_t v28 = 0LL;
  uint64_t v26 = 0LL;
  uint64_t v2 = spaceman_get((void *)a1, &v25);
  if ((_DWORD)v2) {
    return v2;
  }
  __int16 v4 = (uint64_t *)v25;
  if (!v25) {
    return 19LL;
  }
  if (!*(void *)(v25 + 376))
  {
    uint64_t v2 = 19LL;
    goto LABEL_11;
  }

  if (*(_BYTE *)(v25 + 1104) || *(_BYTE *)(v25 + 1208))
  {
    uint64_t v2 = 0LL;
LABEL_11:
    obj_release(v4);
    return v2;
  }

  uint64_t v6 = 0LL;
  char v7 = 1;
  do
  {
    char v8 = v7;
    uint64_t v9 = v25;
    uint64_t v10 = v25 + 104 * v6;
    *(_OWORD *)(v10 + 1008) = 0u;
    *(_OWORD *)(v10 + 1024) = 0u;
    *(_OWORD *)(v10 + 1040) = 0u;
    *(_OWORD *)(v10 + 1056) = 0u;
    *(_OWORD *)(v10 + 1072) = 0u;
    *(_OWORD *)(v10 + 1088) = 0u;
    *(void *)(v10 + 1104) = 0LL;
    uint64_t v11 = *(void *)(v9 + 376);
    unint64_t v12 = *(unsigned int *)(v11 + 32);
    unint64_t v13 = *(void *)(v11 + 48 * v6 + 48);
    if (is_mul_ok(v13, v12)) {
      unint64_t v14 = v13 * v12;
    }
    else {
      unint64_t v14 = 0x40000000000LL;
    }
    if (!spaceman_metazone_get_size(a2, v12, v13, v14, &v28, &v27))
    {
      uint64_t v15 = v9 + 104 * v6;
      unint64_t v16 = v27 + v28 / v12;
      spaceman_metazone_get_partitions(v12, v28, v27, v16, &v26, 0LL);
      *(void *)(v15 + 1008) = v27;
      *(void *)(v15 + 1024) = v27;
      *(void *)(v15 + 1016) = v26;
      *(_BYTE *)(v15 + 1034) = 1;
      *(void *)(v15 + 1040) = v26;
      *(void *)(v15 + 1056) = v26;
      *(void *)(v15 + 1048) = v16;
      *(_BYTE *)(v15 + 1066) = 1;
      *(_BYTE *)(v15 + 1105) = 1;
      uint64_t v17 = v25;
      uint64_t v18 = v25 + 8 * v6;
      unint64_t v19 = *(void *)(v18 + 992);
      if (v19 < v16 && v19 >= v27)
      {
        if (v16 == v13) {
          unint64_t v21 = 0LL;
        }
        else {
          unint64_t v21 = v16;
        }
        *(void *)(v18 + 992) = v21;
      }

      if (*(void *)(v18 + 1488))
      {
        unint64_t v22 = *(unsigned int *)(*(void *)(v17 + 376) + 36LL);
        unint64_t v23 = v27 / v22;
        unint64_t v24 = (v16 - 1) / v22;
        if (v23 <= v24)
        {
          do
            *(_DWORD *)(*(void *)(v25 + 8 * v6 + 1488) + 4 * v23++) |= 0x4000000u;
          while (v23 <= v24);
          uint64_t v17 = v25;
        }
      }

      *(_BYTE *)(v17 + 104 * v6 + 1104) = 1;
    }

    char v7 = 0;
    uint64_t v6 = 1LL;
  }

  while ((v8 & 1) != 0);
  uint64_t v2 = 0LL;
  __int16 v4 = (uint64_t *)v25;
  if (v25) {
    goto LABEL_11;
  }
  return v2;
}

uint64_t spaceman_handle_metazone_freed(uint64_t result, uint64_t a2, unint64_t a3)
{
  uint64_t v3 = (a3 << __clz(__rbit64(*(unsigned int *)(*(void *)(result + 376) + 36LL))) >> 62) & 1;
  uint64_t v4 = a2 + 104LL * v3;
  if (*(_BYTE *)(v4 + 1104) && *(_BYTE *)(a2 + 104LL * v3 + 1105))
  {
    uint64_t v5 = (unint64_t *)(v4 + 1008);
    if (*v5 <= a3 && v5[1] > a3)
    {
      unint64_t v7 = v5[2];
      uint64_t v6 = v5 + 2;
      if (v7 <= a3) {
        return result;
      }
LABEL_15:
      unint64_t *v6 = a3;
      return result;
    }

    if (*(void *)(a2 + 104LL * v3 + 1040) > a3
      || *(void *)(a2 + 104LL * v3 + 1048) <= a3)
    {
      if (*(void *)(a2 + 104LL * v3 + 1072) <= a3
        && *(void *)(a2 + 104LL * v3 + 1080) > a3)
      {
        uint64_t v9 = a2 + 104LL * v3;
        if (*(void *)(v9 + 1088) > a3)
        {
          uint64_t v6 = (unint64_t *)(v9 + 1088);
          goto LABEL_15;
        }
      }
    }

    else
    {
      uint64_t v8 = a2 + 104LL * v3;
      if (*(void *)(v8 + 1056) > a3)
      {
        uint64_t v6 = (unint64_t *)(v8 + 1056);
        goto LABEL_15;
      }
    }
  }

  return result;
}

uint64_t spaceman_update_metazone_alloc_index(uint64_t result, unsigned int a2, int a3, unint64_t a4)
{
  if (a3 == 2)
  {
    uint64_t v9 = result + 104LL * a2;
    uint64_t v5 = (unint64_t *)(v9 + 1072);
    uint64_t v6 = (unint64_t *)(v9 + 1080);
    unint64_t v7 = (unint64_t *)(v9 + 1088);
    uint64_t v8 = (__int16 *)(v9 + 1096);
  }

  else if (a3 == 1)
  {
    uint64_t v10 = result + 104LL * a2;
    uint64_t v5 = (unint64_t *)(v10 + 1040);
    uint64_t v6 = (unint64_t *)(v10 + 1048);
    unint64_t v7 = (unint64_t *)(v10 + 1056);
    uint64_t v8 = (__int16 *)(v10 + 1064);
  }

  else
  {
    if (a3) {
      return result;
    }
    uint64_t v4 = result + 104LL * a2;
    uint64_t v5 = (unint64_t *)(v4 + 1008);
    uint64_t v6 = (unint64_t *)(v4 + 1016);
    unint64_t v7 = (unint64_t *)(v4 + 1024);
    uint64_t v8 = (__int16 *)(v4 + 1032);
  }

  unint64_t v11 = *v5;
  if (v11 <= a4 && *v6 > a4)
  {
    *unint64_t v7 = a4;
LABEL_18:
    *uint64_t v8 = 0;
    return result;
  }

  if (*v7 == v11)
  {
    *unint64_t v7 = a4;
    __int16 v12 = 1;
  }

  else
  {
    if (*v8 < 0)
    {
      *unint64_t v7 = v11;
      goto LABEL_18;
    }

    __int16 v13 = *v8;
    if (!*v8)
    {
      *unint64_t v7 = v11;
      return result;
    }

    *unint64_t v7 = a4;
    __int16 v12 = v13 + 1;
  }

  *uint64_t v8 = v12;
  return result;
}

uint64_t spaceman_get_metazone_alloc_index(void *a1, unsigned int a2, int a3)
{
  uint64_t v4 = a2;
  if (a3 == 2)
  {
    if (BYTE2(a1[13 * a2 + 137])) {
      uint64_t v5 = (uint64_t)&a1[13 * a2 + 136];
    }
    else {
      uint64_t v5 = (uint64_t)&a1[13 * a2 + 132];
    }
  }

  else if (a3 == 1)
  {
    uint64_t v5 = (uint64_t)&a1[13 * a2 + 132];
  }

  else if (a3)
  {
    uint64_t v6 = a1[1];
    if (v6) {
      unint64_t v7 = (const char *)(v6 + 3992);
    }
    else {
      unint64_t v7 = (const char *)(*(void *)(*(void *)(*a1 + 392LL) + 384LL) + 208LL);
    }
    log_err( "%s:%d: %s tried to get metazone alloc index for unknown type: %d\n",  "spaceman_get_metazone_alloc_index",  348,  v7,  a3);
    uint64_t v5 = (uint64_t)&a1[v4 + 124];
  }

  else
  {
    uint64_t v5 = (uint64_t)&a1[13 * a2 + 128];
  }

  return *(void *)v5;
}

uint64_t spaceman_allocation_init(void *a1)
{
  uint64_t v18 = 0LL;
  uint64_t v2 = spaceman_get(a1, (uint64_t *)&v18);
  if (!(_DWORD)v2)
  {
    pthread_mutex_lock(v18 + 6);
    uint64_t v3 = v18;
    uint64_t v4 = *(_DWORD **)&v18[5].__opaque[48];
    if ((v4[36] & 1) == 0 || !v4[84])
    {
      int v5 = v4[29];
      if (!v5) {
        int v5 = v4[28];
      }
      uint64_t v6 = (v4[32] + 8 * v5);
      unsigned int v7 = v4[8];
      if ((int)v6 + 2184 <= (v6 + v7 - 1) / v7 * v7)
      {
        memmove(v4 + 630, v4 + 84, v6 - 336);
        uint64_t v10 = (v4[81] + 2184);
        v4[81] = v10;
        uint64_t v11 = (v4[82] + 2184);
        v4[82] = v11;
        uint64_t v12 = (v4[83] + 2184);
        v4[83] = v12;
        uint64_t v13 = (v4[20] + 2184);
        v4[20] = v13;
        uint64_t v14 = (v4[32] + 2184);
        v4[32] = v14;
        *(void *)&v3[13].__opaque[24] = (char *)v4 + v10;
        *(void *)&v3[13].__opaque[32] = (char *)v4 + v11;
        *(void *)&v3[13].__opaque[40] = (char *)v4 + v12;
        *(void *)&v3[13].__opaque[48] = (char *)v4 + v13;
        v3[14].__sig = (uint64_t)v4 + v14;
        *((void *)v4 + 42) = 0x9D800000001LL;
        bzero(v4 + 86, 0x880uLL);
        v4[36] |= 1u;
      }

      else
      {
        uint64_t v8 = *(void *)v18->__opaque;
        if (v8) {
          uint64_t v9 = (const char *)(v8 + 3992);
        }
        else {
          uint64_t v9 = (const char *)(*(void *)(*(void *)(v18->__sig + 392) + 384LL) + 208LL);
        }
        log_debug( "%s:%d: %s refusing to upgrade spaceman! new_smp_size %u old_smp_size %u block_size %u\n",  "spaceman_upgrade_sm_version_0_to_1",  398,  v9,  v6 + 2184,  v6,  v7);
        log_warn( "%s:%d: %s failed to upgrade spaceman from version 0 to 1: %d\n",  "spaceman_allocation_init",  456,  (const char *)(a1[48] + 208LL),  27);
      }
    }

    spaceman_free_queue_trim_list_init((uint64_t)a1, (uint64_t)v18);
    uint64_t v2 = spaceman_metazone_init((uint64_t)a1, 0LL);
    if (!(_DWORD)v2)
    {
      spaceman_sanitize_datazone((const char *)v18);
      uint64_t v15 = 1LL;
      while (1)
      {
        uint64_t v16 = spaceman_datazone_init(a1, v15);
        if ((_DWORD)v16) {
          break;
        }
        if (++v15 == 5)
        {
          uint64_t v2 = spaceman_free_extent_cache_setup((uint64_t)a1, (uint64_t)v18);
          goto LABEL_18;
        }
      }

      uint64_t v2 = v16;
      log_err( "%s:%d: %s failed to initialize data zone for allocations of size %llu, error %d\n",  "spaceman_allocation_init",  491,  (const char *)(a1[48] + 208LL),  v15,  v16);
    }
  }

const char *spaceman_sanitize_datazone(const char *result)
{
  if (result)
  {
    int v1 = result;
    uint64_t v24 = *((void *)result + 47);
    if ((*(_BYTE *)(v24 + 144) & 1) != 0)
    {
      if (*(_DWORD *)(v24 + 336))
      {
        uint64_t v2 = 0LL;
        uint64_t v3 = v24 + 344;
        char v4 = 1;
        do
        {
          char v25 = v4;
          unint64_t v5 = *(void *)(v24 + 48 * v2 + 48);
          if (v5)
          {
            uint64_t v6 = 0LL;
            uint64_t v7 = v24 + 368 + 1088 * v2;
            do
            {
              uint64_t v8 = v3 + 1088 * v2 + 136 * v6;
              if (*(void *)v8 >= v5
                || ((unint64_t v9 = *(void *)(v8 + 8), v9 <= v5) ? (v10 = *(void *)v8 > v9) : (v10 = 1), v10))
              {
                uint64_t v11 = *((void *)v1 + 1);
                if (v11) {
                  uint64_t v12 = (const char *)(v11 + 3992);
                }
                else {
                  uint64_t v12 = (const char *)(*(void *)(*(void *)(*(void *)v1 + 392LL) + 384LL) + 208LL);
                }
                uint64_t result = log_warn( "%s:%d: %s Persistent allocation zone at slot %llu has invalid current boundaries\n",  "spaceman_sanitize_datazone",  676,  v12,  v6);
                char v13 = 1;
              }

              else
              {
                char v13 = 0;
              }

              uint64_t v14 = 0LL;
              uint64_t v15 = (unint64_t *)v7;
              while (1)
              {
                unint64_t v16 = *(v15 - 1);
                if (v16 >= v5) {
                  break;
                }
                if (*v15 > v5 || v16 > *v15) {
                  break;
                }
                ++v14;
                v15 += 2;
                if (v14 == 7)
                {
                  if (*(unsigned __int16 *)(v3 + 1088 * v2 + 136 * v6 + 130) <= 6u)
                  {
                    if ((v13 & 1) == 0) {
                      goto LABEL_39;
                    }
                    goto LABEL_35;
                  }

uint64_t spaceman_datazone_init(void *a1, uint64_t a2)
{
  uint64_t v12 = 0LL;
  uint64_t v4 = spaceman_get(a1, (uint64_t *)&v12);
  if ((_DWORD)v4) {
    return v4;
  }
  if (!v12) {
    return 19LL;
  }
  uint64_t v6 = v12[47];
  if (!v6)
  {
    uint64_t v4 = 19LL;
    goto LABEL_15;
  }

  if ((unint64_t)(a2 - 5) < 0xFFFFFFFFFFFFFFFCLL)
  {
    uint64_t v4 = 22LL;
    goto LABEL_15;
  }

  uint64_t v7 = v12 + 152;
  uint64_t v8 = &v12[4 * a2 + 148];
  if (*((_BYTE *)v8 + 24)) {
    goto LABEL_14;
  }
  unint64_t v9 = *(void *)(v6 + 56);
  if (!*((_BYTE *)v12 + 1104) || v9 < 8) {
    goto LABEL_14;
  }
  *((_BYTE *)v12 + 1344) = 1;
  *(_OWORD *)uint64_t v8 = 0u;
  *((_OWORD *)v8 + 1) = 0u;
  uint64_t v11 = spaceman_initialize_allocation_zone_from_disk(v12, 0, a2);
  if ((_DWORD)v11)
  {
    uint64_t v4 = v11;
    log_err( "%s:%d: %s failed to initialize allocation zone for allocations of %llu blocks from disk: error %d\n",  "spaceman_datazone_init",  600,  (const char *)(a1[48] + 208LL),  a2,  v11);
  }

  else
  {
    if (BYTE1(v7[4 * a2 - 1]))
    {
LABEL_14:
      uint64_t v4 = 0LL;
      goto LABEL_15;
    }

    log_debug( "%s:%d: %s allocation zone on dev %d for allocations of %llu blocks starting at paddr %llu\n",  "spaceman_datazone_init",  611,  (const char *)(a1[48] + 208LL),  0,  a2,  *v8);
    uint64_t v4 = 0LL;
    *((_BYTE *)v8 + 24) = 1;
  }

uint64_t spaceman_initialize_allocation_zone_from_disk(void *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3 = 22LL;
  if (a1)
  {
    unsigned __int16 v4 = a3;
    if ((unint64_t)(a3 - 5) >= 0xFFFFFFFFFFFFFFFCLL)
    {
      uint64_t v6 = a3 - 1;
      uint64_t v7 = (uint64_t)&a1[17 * a2 + 152];
      uint64_t v8 = a1[47];
      if ((*(_BYTE *)(v8 + 144) & 1) != 0 && *(_DWORD *)(v8 + 336))
      {
        uint64_t v9 = v8 + 344;
        int v10 = v4;
        uint64_t v11 = -1LL;
        char v12 = 1;
        uint64_t v13 = 8LL;
        char v14 = v6;
        do
        {
          uint64_t v15 = v14 & 7;
          int v16 = *(unsigned __int16 *)(v9 + 1088LL * a2 + 136LL * v15 + 128);
          if (v16 == v10)
          {
            uint64_t v20 = (void *)(v9 + 1088LL * a2 + 136LL * v15);
            *(void *)(v7 + 32 * v6 + 16) = v20;
            uint64_t updated = spaceman_update_allocation_zone_boundaries( (uint64_t)a1,  a2,  v6,  *v20 / (unint64_t)*(unsigned int *)(v8 + 36));
            uint64_t v3 = updated;
            if ((_DWORD)updated)
            {
              uint64_t v22 = a1[1];
              if (v22) {
                unint64_t v23 = (const char *)(v22 + 3992);
              }
              else {
                unint64_t v23 = (const char *)(*(void *)(*(void *)(*a1 + 392LL) + 384LL) + 208LL);
              }
              log_err( "%s:%d: %s failed to update allocation zone boundaries: error %d\n",  "spaceman_initialize_allocation_zone_from_disk",  965,  v23,  updated);
            }

            return v3;
          }

          if (v11 == -1 && v16 == 0) {
            uint64_t v11 = v15;
          }
          char v14 = v15 + 1;
          --v13;
        }

        while (v13);
        if ((v12 & 1) != 0) {
          goto LABEL_17;
        }
        uint64_t v3 = 0LL;
        uint64_t v18 = v7 + 32 * v6;
        *(void *)(v18 + 16) = v9 + 1088LL * a2 + 136 * v11;
        *(_BYTE *)(v18 + 25) = 1;
      }

      else
      {
LABEL_17:
        uint64_t v3 = 0LL;
        *(_WORD *)(v7 + 32 * v6 + 25) = 257;
      }
    }
  }

  return v3;
}

void spaceman_datazone_destroy(uint64_t a1)
{
  if (a1)
  {
    uint64_t v2 = 0LL;
    char v3 = 1;
    do
    {
      char v4 = v3;
      if (*(_BYTE *)(a1 + 136 * v2 + 1344))
      {
        uint64_t v5 = 0LL;
        uint64_t v6 = a1 + 136 * v2;
        do
        {
          uint64_t v7 = v6 + v5;
          if (*(_BYTE *)(v6 + v5 + 1240) && *(_BYTE *)(v7 + 1242))
          {
            uint64_t v8 = *(void **)(v6 + v5 + 1232);
            if (v8)
            {
              *(_BYTE *)(v7 + 1240) = 0;
              _apfs_free(v8, 136LL);
              *(void *)(v6 + v5 + 1232) = 0LL;
            }
          }

          v5 += 32LL;
        }

        while (v5 != 128);
      }

      char v3 = 0;
      uint64_t v2 = 1LL;
    }

    while ((v4 & 1) != 0);
  }

uint64_t spaceman_update_allocation_zone_boundaries( uint64_t a1, unsigned int a2, uint64_t a3, unint64_t a4)
{
  if (!a1) {
    return 22LL;
  }
  uint64_t v6 = *(void *)(a1 + 376);
  unint64_t v7 = *(void *)(v6 + 48LL * a2 + 56);
  if (v7 <= a4) {
    return 22LL;
  }
  uint64_t v8 = a2;
  uint64_t v9 = v6 + 48LL * a2;
  uint64_t v10 = a1 + 136LL * a2;
  uint64_t v11 = v10 + 1216;
  uint64_t v12 = v10 + 1216 + 32 * a3;
  uint64_t v13 = *(unsigned __int16 **)(v12 + 16);
  unint64_t v14 = *(unsigned int *)(v6 + 36);
  unint64_t v15 = *(void *)(v9 + 48);
  unint64_t v16 = *(void *)v12;
  if (*(_BYTE *)(v12 + 26)) {
    BOOL v17 = v13 == 0LL;
  }
  else {
    BOOL v17 = 0;
  }
  if (v17)
  {
    uint64_t v30 = v10 + 1216;
    uint64_t v18 = a3;
    uint64_t v13 = (unsigned __int16 *)_apfs_calloc(1uLL, 0x88uLL);
    a3 = v18;
    uint64_t v11 = v30;
    *(void *)(v12 + 16) = v13;
    if (!v13) {
      return 12LL;
    }
  }

  if (*(_BYTE *)(v12 + 24))
  {
    uint64_t v19 = 0LL;
    uint64_t v20 = v13[65];
    while (1)
    {
      uint64_t v21 = ((unint64_t)(v20 + v19) * (unsigned __int128)0x2492492492492493uLL) >> 64;
      uint64_t v22 = v20 + v19 - 7 * ((v21 + ((unint64_t)(v20 + v19 - v21) >> 1)) >> 2);
      unint64_t v23 = &v13[8 * v22];
      if (*((void *)v23 + 3))
      {
      }

      if (++v19 == 7) {
        goto LABEL_19;
      }
    }

    if (v22 == v20)
    {
LABEL_19:
      *(_OWORD *)&v13[8 * v20 + 8] = *(_OWORD *)v12;
      v13[65] = v20
              + 1
              - 7
      goto LABEL_20;
    }

    do
    {
      if (v22 == 6) {
        uint64_t v27 = 0LL;
      }
      else {
        uint64_t v27 = v22 + 1;
      }
      *(_OWORD *)&v13[8 * v22 + 8] = *(_OWORD *)&v13[8 * v27 + 8];
      uint64_t v22 = v27;
    }

    while (v27 != v20);
    uint64_t v28 = v20 - 1;
    BOOL v17 = (_DWORD)v20 == 0;
    uint64_t v29 = 6LL;
    if (!v17) {
      uint64_t v29 = v28;
    }
    *(_OWORD *)&v13[8 * v29 + 8] = *(_OWORD *)v12;
  }

LABEL_20:
  *(void *)uint64_t v12 = v14 * a4;
  if (v7 - 1 == a4) {
    unint64_t v25 = v15;
  }
  else {
    unint64_t v25 = v14 + v14 * a4;
  }
  *(void *)uint64_t v13 = v14 * a4;
  *((void *)v13 + 1) = v25;
  uint64_t v26 = v11 + 32 * a3;
  *(void *)(v26 + 8) = v25;
  v13[64] = a3 + 1;
  *(_BYTE *)(v26 + 25) = 0;
  if (*(_BYTE *)(v12 + 24)) {
    *(_DWORD *)(*(void *)(a1 + 8 * v8 + 1488) + 4 * (v16 / v14)) &= ~0x8000000u;
  }
  uint64_t result = 0LL;
  *(_DWORD *)(*(void *)(a1 + 8 * v8 + 1488) + 4 * a4) |= 0x8000000u;
  return result;
}

  a1[47] = v2;
  uint64_t v13 = obj_size_phys((uint64_t)a1);
  uint64_t result = 0LL;
  a1[48] = v2 + v13 - *(unsigned int *)(v2 + 108);
  return result;
}

      uint64_t v10 = v23;
      goto LABEL_21;
    }

    uint64_t v19 = obj_get(*(void *)(a1 + 392), 0x80000000, v18, (int *)&nx_reap_list_desc, 0LL, 0LL, 0LL, a3, (uint64_t *)&v22);
    if ((_DWORD)v19) {
      break;
    }
    *(void *)(v4 + 48) = *(void *)(v11 + 32);
    uint64_t v20 = *(_DWORD *)(v4 + 68);
    if (v20) {
      *(_DWORD *)(v4 + 68) = v20 - 1;
    }
    obj_dirty(a2, a3, 0LL);
    obj_free((uint64_t)v23);
    obj_release(v23);
    uint64_t v10 = v22;
    uint64_t v22 = 0LL;
    unint64_t v23 = v10;
    uint64_t v11 = v10[47];
    if (*(void *)(v4 + 88)) {
      goto LABEL_21;
    }
  }

  uint64_t v9 = v19;
  obj_release(v23);
  return v9;
}

        if (v10 > v15)
        {
          if (v15 == *(void *)(a1 + 112)) {
            *(void *)(a1 + 112) = v10;
          }
          *uint64_t v13 = v14 & 0xFFF0000000000000LL | v10 & 0xFFFFFFFFFFFFFLL;
          uint64_t v18 = spaceman_fxc_update_length(a1, v10, v16, v17 - v10, v12);
          uint64_t updated = v18;
          if (!(_DWORD)v18) {
            goto LABEL_9;
          }
          log_err( "%s:%d: %s dev %d Failed to update partially-covered node in length tree: %d\n",  "spaceman_free_extent_cache_remove",  2070,  (const char *)(*(void *)(*(void *)a1 + 384LL) + 208LL),  *(unsigned __int8 *)(a1 + 88),  v18);
          goto LABEL_8;
        }
      }
    }

    else
    {
      uint64_t v34 = 0;
      if (spaceman_fxc_tree_insert(a1, 0, v10, v25 - v10, &v34))
      {
LABEL_31:
        spaceman_fxc_dropped(a1, v10, v25 - v10);
        goto LABEL_46;
      }

      if (spaceman_fxc_tree_insert(a1, 1u, v10, v25 - v10, &v34))
      {
        goto LABEL_31;
      }

      uint64_t v33 = *(void *)(a1 + 120);
      if (v26 < v33 || v26 == v33 && v10 > *(void *)(a1 + 112))
      {
        *(void *)(a1 + 112) = v10;
        *(void *)(a1 + 120) = v26;
      }

      if (v26 > *(void *)(a1 + 128))
      {
        uint64_t updated = 0LL;
        *(void *)(a1 + 128) = v26;
LABEL_9:
        if (*(void *)a1) {
          pthread_mutex_unlock((pthread_mutex_t *)(a1 + 16));
        }
        return updated;
      }
    }

uint64_t spaceman_get_number_of_disabled_allocation_zones(uint64_t result, unsigned int a2)
{
  if (result)
  {
    if (*(_BYTE *)(result + 136LL * a2 + 1344))
    {
      uint64_t v2 = 0LL;
      uint64_t v3 = result + 136LL * a2;
      uint64_t result = 4LL;
      do
      {
        if (*(_BYTE *)(v3 + v2 + 1240) || !*(_BYTE *)(v3 + v2 + 1241)) {
          uint64_t result = (result - 1);
        }
        v2 += 32LL;
      }

      while (v2 != 128);
    }

    else
    {
      return 0LL;
    }
  }

  return result;
}

uint64_t spaceman_evaluate_chunk_for_disabled_allocation_zones( void *a1, unsigned int a2, unint64_t a3, _BYTE *a4)
{
  if (!a1 || !LOBYTE(a1[17 * a2 + 168]) || *(void *)(a1[47] + 48LL * a2 + 56) <= a3) {
    return 22LL;
  }
  unint64_t v8 = 0LL;
  for (uint64_t i = (char *)&a1[17 * a2 + 155] + 1; ; i += 32)
  {
    if (!*(i - 1) && *i)
    {
      int v10 = *(_DWORD *)(a1[a2 + 186] + 4 * a3);
      int v11 = v10 & 0xC000000;
      unint64_t v12 = *(void *)&v10 & 0xFFFFFFLL;
      if (!v11 && v8 < v12) {
        break;
      }
    }

    if (++v8 == 4) {
      return 0LL;
    }
  }

  uint64_t updated = spaceman_update_allocation_zone_boundaries((uint64_t)a1, a2, v8, a3);
  uint64_t v17 = a1[1];
  if ((_DWORD)updated)
  {
    uint64_t v14 = updated;
    if (v17) {
      uint64_t v18 = (const char *)(v17 + 3992);
    }
    else {
      uint64_t v18 = (const char *)(*(void *)(*(void *)(*a1 + 392LL) + 384LL) + 208LL);
    }
    log_err( "%s:%d: %s failed to assign chunk %llu to allocation zone %llu\n",  "spaceman_evaluate_chunk_for_disabled_allocation_zones",  1135,  v18,  a3,  v8);
  }

  else
  {
    if (v17) {
      uint64_t v19 = (const char *)(v17 + 3992);
    }
    else {
      uint64_t v19 = (const char *)(*(void *)(*(void *)(*a1 + 392LL) + 384LL) + 208LL);
    }
    log_debug( "%s:%d: %s allocation zone on dev %d for allocations of %llu blocks starting at paddr %llu\n",  "spaceman_evaluate_chunk_for_disabled_allocation_zones",  1140,  v19,  a2,  v8 + 1,  *(void *)(i - 25));
    uint64_t v14 = 0LL;
    *(i - 1) = 1;
    *a4 = 1;
  }

  return v14;
}

uint64_t spaceman_get_new_chunk_for_allocation_zone( uint64_t a1, uint64_t a2, unsigned int a3, unint64_t a4)
{
  uint64_t v4 = 22LL;
  if (a1)
  {
    uint64_t v5 = a2;
    if (a2)
    {
      if (a3 <= 1 && a4 <= 3)
      {
        unint64_t v7 = *(unsigned int **)(a2 + 376);
        uint64_t v77 = 0LL;
        unint64_t v78 = 0LL;
        uint64_t v75 = 0LL;
        unint64_t v76 = 0LL;
        uint64_t v73 = 0LL;
        uint64_t v74 = 0LL;
        uint64_t v8 = a3;
        uint64_t v9 = a2 + 136LL * a3 + 32 * a4;
        unint64_t v10 = *(void *)(v9 + 1216);
        unint64_t v11 = v7[9];
        uint64_t v12 = *(void *)(v9 + 1232);
        unint64_t v13 = *(void *)&v7[12 * a3 + 14];
        if (!v12) {
          goto LABEL_14;
        }
        uint64_t v14 = *(unsigned __int16 *)(v12 + 130);
        uint64_t v15 = 7LL;
        while (1)
        {
          unint64_t v16 = *(void *)(v12 + 16 * v14 + 24);
          if (v16 && v16 <= *(void *)&v7[12 * a3 + 12])
          {
            unint64_t v17 = *(void *)(v12 + 16 * v14 + 16) / v11;
            int v18 = *(_DWORD *)(*(void *)(a2 + 8LL * a3 + 1488) + 4 * v17);
            int v19 = v18 & 0xC000000;
            unint64_t v20 = *(void *)&v18 & 0xFFFFFFLL;
            if (!v19 && v20 > a4) {
              break;
            }
          }

          uint64_t v14 = ((unsigned __int16)v14
                             + 1
                             - 7 * ((613566757 * (unint64_t)((unsigned __int16)v14 + 1)) >> 32));
          if (!--v15) {
            goto LABEL_14;
          }
        }

        if (v17 < v13)
        {
          unint64_t v31 = 0LL;
LABEL_55:
          uint64_t updated = spaceman_update_allocation_zone_boundaries(v5, a3, a4, v17);
          if ((_DWORD)updated)
          {
            uint64_t v4 = updated;
            log_err("%s:%d: %s failed to update allocate zone %llu: error %d\n");
          }

          else
          {
            uint64_t v60 = *(void *)(v5 + 1584);
            if (v60) {
              ++*(void *)(v60 + (v8 << 6) + 8 * a4 + 120);
            }
            if (*(_DWORD *)(v5 + 1592))
            {
              uint64_t v61 = (uint64_t *)(*(void *)(v5 + 1600) + 16LL * *(unsigned int *)(v5 + 1596));
              uint64_t v4 = 0LL;
              *uint64_t v61 = get_timestamp();
              v61[1] = v8 & 1 | (2 * (a4 & 7)) & 0xF | (v31 << 44) | (16 * (v17 & 0xFFFFFFFFFFLL));
              int v62 = *(_DWORD *)(v5 + 1596);
              else {
                int v63 = 0;
              }
              *(_DWORD *)(v5 + 1596) = v63;
            }

            else
            {
              uint64_t v4 = 0LL;
            }
          }
        }

        else
        {
LABEL_14:
          unint64_t v22 = v10 / v11;
          unint64_t v23 = v7[10];
          unint64_t v24 = v13 - 1;
          unint64_t v26 = v22 + 1 == v23 || v22 == v24;
          uint64_t v27 = &v7[12 * a3];
          unsigned int v30 = v27[16];
          uint64_t v29 = v27 + 16;
          LODWORD(v28) = v30;
          if (v30 > v26)
          {
            unint64_t v31 = 0LL;
            uint64_t v70 = 0LL;
            unint64_t v65 = v22;
            unint64_t v67 = &v7[12 * a3 + 17];
            uint64_t v68 = (v22 / v23);
            uint64_t v32 = a2 + 8LL * a3;
            int v66 = (void *)(v32 + 888);
            uint64_t v33 = (void *)(v32 + 1488);
            int v69 = -1;
            unint64_t v17 = -1LL;
            uint64_t v34 = v29;
            do
            {
              unint64_t v35 = (v68 + v26) % v28;
              if (*v67)
              {
                unsigned int v36 = v7[11];
                unsigned int v37 = v35 / v36;
                int v38 = v69;
                uint64_t v39 = v70;
                if (v35 / v36 != v69 || v70 == 0)
                {
                  uint64_t v41 = *(void *)(*v66 + 8LL * v37);
                  if (v74)
                  {
                    obj_release(v74);
                    uint64_t v74 = 0LL;
                  }

                  uint64_t v77 = v7;
                  unint64_t v78 = __PAIR64__(v37, a3);
                  uint64_t v42 = obj_get(*(void *)(a1 + 392), 0x40000000LL, v41, &sm_cab_desc, &v77, 0LL, 0LL, 0LL, &v74);
                  if ((_DWORD)v42)
                  {
                    uint64_t v4 = v42;
                    log_err( "%s:%d: %s error getting cab %d: %d\n",  "spaceman_get_new_chunk_for_allocation_zone",  1248,  (const char *)(*(void *)(a1 + 384) + 208LL),  v37,  v42);
                    goto LABEL_58;
                  }

                  uint64_t v39 = *(void *)(v74 + 56);
                  unsigned int v36 = v7[11];
                  int v38 = v37;
                }

                int v69 = v38;
                uint64_t v70 = v39;
                int v43 = (uint64_t *)(v39 + 8LL * (v35 - v36 * v38) + 40);
              }

              else
              {
                int v43 = (uint64_t *)(*v66 + 8 * v35);
              }

              uint64_t v44 = *v43;
              uint64_t v75 = v7;
              unint64_t v76 = __PAIR64__(v35, a3);
              uint64_t v45 = obj_get(*(void *)(a1 + 392), 0x40000000LL, v44, &sm_cib_desc, &v75, 0LL, 0LL, 0LL, &v73);
              if ((_DWORD)v45)
              {
                uint64_t v4 = v45;
                log_err("%s:%d: %s error getting cib %d: %d\n");
                goto LABEL_58;
              }

              if (v26) {
                LODWORD(v46) = 0;
              }
              else {
                LODWORD(v46) = v65 % v7[10] + 1;
              }
              uint64_t v47 = *(void *)(v73 + 56);
              unsigned int v48 = *(_DWORD *)(v47 + 36);
              BOOL v49 = v48 >= v46;
              int v50 = v48 - v46;
              if (v50 != 0 && v49)
              {
                unint64_t v51 = v35 * v7[10];
                uint64_t v46 = v46;
                unsigned int v52 = (int *)(v47 + 32LL * v46 + 60);
                unint64_t v53 = v17;
                do
                {
                  int v54 = *v52;
                  v52 += 8;
                  unint64_t v55 = v54 & 0xFFFFF;
                  if (v31 < v55)
                  {
                    unint64_t v17 = v51 + v46;
                    int v56 = *(_DWORD *)(*v33 + 4 * (v51 + v46));
                    if ((v56 & 0xC000000) == 0 && (*(void *)&v56 & 0xFFFFFFuLL) > a4)
                    {
                      unint64_t v31 = v55;
                      unint64_t v53 = v51 + v46;
                      if ((_DWORD)v55 == v7[9]) {
                        break;
                      }
                    }
                  }

                  ++v46;
                  unint64_t v17 = v53;
                  --v50;
                }

                while (v50);
              }

              if (v31 == v7[9]) {
                break;
              }
              obj_release(v73);
              uint64_t v73 = 0LL;
              ++v26;
              unint64_t v28 = *v34;
            }

            while (v26 < v28);
            uint64_t v8 = a3;
            uint64_t v5 = a2;
            if (v17 != -1LL) {
              goto LABEL_55;
            }
          }

          uint64_t v4 = 28LL;
        }

LABEL_58:
        if (v74) {
          obj_release(v74);
        }
        if (v73) {
          obj_release(v73);
        }
      }
    }
  }

  return v4;
}

BOOL spaceman_should_avoid_data_allocation_at_block( uint64_t a1, unsigned int a2, unint64_t a3, uint64_t a4)
{
  if (!a4) {
    return 0LL;
  }
  uint64_t v4 = *(void *)(a1 + 8LL * a2 + 1488);
  if (!v4) {
    return 0LL;
  }
  if (*(_BYTE *)(a1 + 104LL * a2 + 1104))
  {
    uint64_t v5 = a1 + 104LL * a2;
    uint64_t v6 = (unint64_t *)(*(_BYTE *)(v5 + 1098) ? v5 + 1080 : v5 + 1048);
    if (*(void *)(v5 + 1008) <= a3 && *v6 > a3) {
      return 1LL;
    }
  }

  if (a4 <= 4
    && (uint64_t v8 = a4 - 1, v9 = a1 + 136LL * a2 + 1216, *(_BYTE *)(v9 + 32 * (a4 - 1) + 24))
    && *(void *)(v9 + 32 * v8) <= a3)
  {
    return *(void *)(v9 + 32 * v8 + 8) <= a3;
  }

  else
  {
    return 1LL;
  }

BOOL spaceman_clip_extent( unint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, __int16 a5, unint64_t a6, unint64_t *a7, unint64_t *a8)
{
  unint64_t v19 = 0LL;
  unint64_t v14 = calc_overlap_range(a1, a2, a3, a4, &v19);
  if (v14)
  {
    unint64_t v15 = a2 - v14;
    if (a2 == v14)
    {
      unint64_t v16 = 0LL;
LABEL_17:
      *a8 = v16;
      return v14 != 0;
    }

    unint64_t v16 = v19 - a1;
    if (v19 == a1)
    {
      unint64_t v17 = v14 + a1;
LABEL_9:
      *a7 = v17;
LABEL_10:
      unint64_t v16 = v15;
      goto LABEL_17;
    }

    unint64_t v15 = a2 - (v16 + v14);
    if ((a5 & 0x4000) != 0)
    {
      if (a6 > v19 && a2 != v16 + v14 && (v19 + v14 <= a6 || a6 - v19 > v19 + v14 - a6))
      {
        *a7 = v19 + v14;
        goto LABEL_10;
      }
    }

    else if (v15 > v16)
    {
      unint64_t v17 = v19 + v14;
      goto LABEL_9;
    }

    *a7 = a1;
    goto LABEL_17;
  }

  return v14 != 0;
}

uint64_t spaceman_clip_extent_to_zones( uint64_t a1, uint64_t a2, unsigned int a3, unint64_t a4, uint64_t a5, __int16 a6, unint64_t a7, unint64_t *a8, unint64_t *a9)
{
  uint64_t v12 = a5;
  unint64_t v13 = a4;
  uint64_t v16 = *(void *)(a1 + 1760);
  if (v16
    && !*(_BYTE *)(a1 + 636)
    && (uint64_t v17 = *(void *)(a1 + 1752),
        char v18 = __clz(__rbit64(*(unsigned int *)(*(void *)(a1 + 376) + 36LL))),
        (((v17 << v18) & 0x4000000000000000LL) != 0) == a3))
  {
    uint64_t v19 = (uint64_t)0xBFFFFFFFFFFFFFFFLL >> v18;
    unint64_t v20 = v19 & v17;
    if ((a6 & 0x200) != 0)
    {
      if (v20 && (v31 = v19 & v17, v32 = spaceman_clip_extent(a4, a5, 0LL, v19 & v17, a6, a7, a8, a9), unint64_t v20 = v31, v32))
      {
        unint64_t v13 = *a8;
        uint64_t v12 = *a9;
        char v21 = 1;
      }

      else
      {
        char v21 = 0;
      }

      v20 += v16;
      uint64_t v16 = *(void *)(*(void *)(a2 + 376) + 48LL * a3 + 48) - v20;
    }

    else
    {
      char v21 = 0;
    }

    if (spaceman_clip_extent(v13, v12, v20, v16, a6, a7, a8, a9))
    {
      unint64_t v13 = *a8;
      uint64_t v12 = *a9;
      char v21 = 1;
    }
  }

  else
  {
    char v21 = 0;
  }

  if ((a6 & 0x2000) != 0)
  {
    unsigned int v22 = a3;
    if (*(_BYTE *)(a2 + 104LL * a3 + 1104))
    {
      uint64_t v23 = a2 + 104LL * a3;
      unint64_t v24 = *(void *)(v23 + 1008);
      int v25 = *(unsigned __int8 *)(v23 + 1098);
      unint64_t v26 = (void *)(v23 + 1080);
      uint64_t v27 = (void *)(v23 + 1048);
      if (v25) {
        uint64_t v27 = v26;
      }
      if (spaceman_clip_extent(v13, v12, v24, *v27 - v24, a6, a7, a8, a9))
      {
        unint64_t v13 = *a8;
        uint64_t v12 = *a9;
        char v21 = 1;
      }
    }

    if (*(_BYTE *)(a2 + 136LL * a3 + 1344))
    {
      uint64_t v28 = 0LL;
      uint64_t v29 = a2 + 136LL * v22;
      do
      {
        if (*(_BYTE *)(v29 + v28 + 1240)
          && spaceman_clip_extent( v13,  v12,  *(void *)(v29 + v28 + 1216),  *(void *)(v29 + v28 + 1224) - *(void *)(v29 + v28 + 1216),  a6,  a7,  a8,  a9))
        {
          unint64_t v13 = *a8;
          uint64_t v12 = *a9;
          char v21 = 1;
        }

        v28 += 32LL;
      }

      while (v28 != 128);
    }
  }

  return v21 & 1;
}

uint64_t utf8_normalizeOptCaseFoldAndHash( unint64_t a1, uint64_t a2, int a3, void (*a4)(_OWORD *, uint64_t, uint64_t), uint64_t a5)
{
  v20[2] = *MEMORY[0x1895F89C0];
  uint64_t v16 = 0LL;
  unint64_t v17 = a1;
  v20[0] = 0LL;
  v20[1] = 0LL;
  unint64_t v8 = a1 + a2;
  int v15 = 0;
  char v14 = 1;
  do
  {
    memset(v19, 0, sizeof(v19));
    memset(v18, 0, sizeof(v18));
    unsigned int v13 = 0;
    char v12 = 0;
    uint64_t v9 = nextBaseAndAnyMarks( &v17,  v8,  a3,  (unsigned int *)v20,  (uint64_t)&v16 + 4,  (int *)&v16,  &v15,  (uint64_t)v19,  (uint64_t)v18,  (int *)&v13,  &v12,  &v14);
    if ((_DWORD)v9) {
      break;
    }
    uint64_t v10 = v13;
    if ((int)v13 >= 1)
    {
      if (v12) {
        doReorder((uint64_t)v19, (uint64_t)v18, v13);
      }
      a4(v19, 4 * v10, a5);
    }
  }

  while (v17 < v8 || (int)v16 > 0);
  return v9;
}

uint64_t nextBaseAndAnyMarks( unint64_t *a1, unint64_t a2, int a3, unsigned int *a4, uint64_t a5, int *a6, int *a7, uint64_t a8, uint64_t a9, int *a10, _BYTE *a11, _BYTE *a12)
{
  int v18 = *a6;
  int v19 = *a7;
  if (*a6 >= 1 && v19 < v18)
  {
    int v22 = 0;
    *a11 = 0;
    *a10 = 0;
    int v19 = *a7;
    while (1)
    {
      if (v22 >= 1
        && *(_BYTE *)(a5 + v19)
        && *(unsigned __int8 *)(a5 + v19) < *(unsigned __int8 *)(a9 + (v22 - 1)))
      {
        *a11 = 1;
      }

      *(_DWORD *)(a8 + 4LL * v22) = a4[v19];
      uint64_t v23 = *a7;
      *a7 = v23 + 1;
      LOBYTE(v23) = *(_BYTE *)(a5 + v23);
      uint64_t v24 = *a10;
      *a10 = v24 + 1;
      *(_BYTE *)(a9 + v24) = v23;
      int v19 = *a7;
      int v18 = *a6;
      if (*a7 >= *a6 || !*(_BYTE *)(a5 + v19)) {
        break;
      }
      int v22 = *a10;
    }
  }

  if (v19 < v18) {
    return 0LL;
  }
  uint64_t result = 0LL;
  *a6 = 0;
  *a7 = 0;
  int v25 = (unsigned __int8 *)*a1;
  if (*a1 < a2)
  {
    while (1)
    {
      uint64_t v27 = v25 + 1;
      *a1 = (unint64_t)(v25 + 1);
      unsigned int v28 = *v25;
      uint64_t result = 92LL;
      if (!*v25 || v28 == 47) {
        return result;
      }
      if ((v28 & 0x80) == 0)
      {
        uint64_t result = 0LL;
        if (v28 - 91 < 0xFFFFFFE6) {
          int v66 = 1;
        }
        else {
          int v66 = a3;
        }
        if (v66) {
          unsigned int v67 = *v25;
        }
        else {
          unsigned int v67 = v28 + 32;
        }
        *a4 = v67;
        *a6 = 1;
        *(_BYTE *)a5 = 0;
        goto LABEL_136;
      }

      if (v28 - 225 > 0xB)
      {
        if (v28 - 194 <= 0x1D && (unint64_t)v27 < a2)
        {
          unsigned int v33 = *v27 ^ 0x80;
          if (v33 <= 0x3F)
          {
            unsigned int v31 = ((v28 & 0x1F) << 6) | v33;
            uint64_t v27 = v25 + 2;
            goto LABEL_52;
          }
        }
      }

      else if ((unint64_t)(v25 + 2) < a2)
      {
        unsigned int v29 = *v27 ^ 0x80;
        if (v29 <= 0x3F)
        {
          unsigned int v30 = v25[2] ^ 0x80;
          if (v30 <= 0x3F)
          {
            unsigned int v31 = ((v28 & 0xF) << 12) | (v29 << 6) | v30;
            uint64_t v27 = v25 + 3;
            goto LABEL_52;
          }
        }
      }

      if (v28 > 0xEF)
      {
        if (v28 > 0xFD)
        {
          unsigned __int8 v36 = 0;
          goto LABEL_41;
        }

        if (v28 <= 0xF7) {
          char v34 = 3;
        }
        else {
          char v34 = 4;
        }
        BOOL v35 = v28 > 0xFB;
      }

      else
      {
        char v34 = v28 > 0xDF;
        BOOL v35 = v28 > 0xBF;
      }

      if (v35) {
        unsigned __int8 v36 = v34 + 1;
      }
      else {
        unsigned __int8 v36 = v34;
      }
LABEL_41:
      unsigned int v31 = -1;
      if ((unint64_t)&v27[v36] <= a2)
      {
        unsigned int v37 = v28 & ~(-1 << (6 - v36));
        if (v36 == 1) {
          goto LABEL_49;
        }
        if (v36 == 2
          || v36 == 3
          && (uint64_t v27 = v25 + 2, v38 = v25[1] ^ 0x80, v31 = -1, v38 <= 0x3F)
          && (unsigned int v37 = v38 | (v37 << 6), v37 <= 0x10F))
        {
          int v39 = *v27++;
          int v40 = v39 ^ 0x80;
          unsigned int v31 = -1;
          if ((v39 ^ 0x80u) <= 0x3F)
          {
            unsigned int v37 = v40 | (v37 << 6);
            if ((v37 & 0xFFE0) != 0x360)
            {
LABEL_49:
              int v41 = *v27++;
              int v42 = v41 ^ 0x80;
            }
          }
        }
      }

LABEL_52:
      *a1 = (unint64_t)v27;
      *(_BYTE *)a5 = 0;
      if (v31 >= 0xF0000)
      {
        if ((~v31 & 0xFFFE) == 0) {
          goto LABEL_137;
        }
LABEL_55:
        *a4 = v31;
        goto LABEL_63;
      }

      int v43 = v31;
      if (v31 >> 10 >= 0xC9)
      {
        if (v31 - 918016 < 0xFFFFFE00) {
          goto LABEL_137;
        }
        int v43 = v31 - 711680;
      }

      int v44 = (unsigned __int16)nfTrieHi[v43 >> 8];
      if (!nfTrieHi[v43 >> 8]) {
        goto LABEL_62;
      }
      if (v44 == 0xFFFF) {
        goto LABEL_137;
      }
      if ((v44 & 0xFF00) == 0xAD00)
      {
LABEL_62:
        *a4 = v31;
        *(_BYTE *)a5 = v44;
        goto LABEL_63;
      }

      int v52 = nfTrieMid[16 * (v44 & 0xFFF) + (v43 >> 4)];
      if (!v52)
      {
LABEL_83:
        *a4 = v31;
        *(_BYTE *)a5 = v52;
        goto LABEL_84;
      }

      if (v52 == 0xFFFF) {
        goto LABEL_137;
      }
      if ((v52 & 0xFF00) == 0xAE00)
      {
        *a4 = v31;
        int v45 = 1;
        if (v31 <= 0x4FF && (a3 & 1) == 0) {
          *a4 = nfBasicCF[v31];
        }
        goto LABEL_64;
      }

      if ((v52 & 0xFF00) == 0xAD00) {
        goto LABEL_83;
      }
      if (v52 == 44032 || (unsigned int v54 = (unsigned __int16)nfTrieLo[16 * (v52 & 0xFFF) + (v43 & 0xF)], v54 == 44032))
      {
LABEL_77:
        signed int v48 = v31 - 44032;
        int v49 = v48 / 28;
        int v50 = v48 / 588;
        *(_WORD *)(a5 + 1) = 0;
        int v51 = v48 % 28;
        *a4 = v50 + 4352;
        a4[1] = (unsigned __int16)(v49
                                 - 21
                                 * (((__int16)((49933 * (__int16)v49) >> 16) >> 4)
        if (v51)
        {
          a4[2] = v51 + 4519;
          int v45 = 3;
        }

        else
        {
          int v45 = 2;
        }

        goto LABEL_64;
      }

      if (v54 == 0xFFFF)
      {
LABEL_137:
        int v68 = -1;
        goto LABEL_138;
      }

      if (((unsigned __int16)(v54 + 1792) >> 8) <= 0xB6u)
      {
        if (!v54 || (v54 & 0xFF00) == 0xAD00)
        {
          *a4 = v31;
          *(_BYTE *)a5 = v54;
        }

        else
        {
          *a4 = v54;
        }

LABEL_84:
        if ((a3 & 1) == 0)
        {
          uint64_t v53 = (int)*a4;
          if ((int)v53 <= 1279)
          {
            unsigned int v31 = nfBasicCF[v53];
            goto LABEL_55;
          }
        }

LABEL_63:
        int v45 = 1;
LABEL_64:
        *a6 = v45;
        goto LABEL_65;
      }

      switch(((v54 & 0xF000) - 45056) >> 12)
      {
        case 0u:
          if ((v54 & 0x800) != 0 && a3) {
            goto LABEL_55;
          }
          int v69 = 0LL;
          unint64_t v55 = (char *)&nfU16Seq2 + 4 * (v54 & 0x7FF);
          int v45 = 2;
          goto LABEL_113;
        case 1u:
          if ((v54 & 0x800) != 0 && a3) {
            goto LABEL_55;
          }
          int v69 = 0LL;
          unint64_t v55 = (char *)&nfU16Seq3 + 6 * (v54 & 0x7FF);
          int v45 = 3;
          goto LABEL_113;
        case 2u:
          int v69 = 0LL;
          int v56 = (unsigned __int16 *)((char *)&nfU16SeqMisc + 2 * (v54 & 0x3FF));
          unsigned int v58 = *v56;
          unint64_t v55 = (char *)(v56 + 1);
          unsigned int v57 = v58;
          goto LABEL_112;
        case 3u:
          if ((v54 & 0x800) != 0 && a3) {
            goto LABEL_55;
          }
          unint64_t v55 = 0LL;
          int v69 = (int *)((char *)&nfU32Char + 4 * (v54 & 0x7FF));
          int v45 = 1;
          goto LABEL_113;
        case 4u:
          unint64_t v55 = 0LL;
          uint64_t v59 = (_DWORD *)((char *)&nfU32SeqMisc + 4 * (v54 & 0x3FF));
          unsigned int v57 = *v59;
          int v69 = v59 + 1;
LABEL_112:
          int v45 = v57 & 0xF;
          *(_BYTE *)a5 = v57 >> 4;
          if ((v45 - 5) < 0xFFFFFFFC)
          {
            int v68 = 0;
LABEL_138:
            *a6 = v68;
            return result;
          }

LABEL_113:
          uint64_t v60 = 0LL;
          uint64_t v70 = a12;
          int v71 = a3;
          do
          {
            if (v55)
            {
              int v62 = *(unsigned __int16 *)v55;
              v55 += 2;
              int v61 = v62;
            }

            else
            {
              int v61 = *v69++;
            }

            a4[v60] = v61;
            if (v60)
            {
              uint64_t v72 = v60;
              uint64_t v73 = v55;
              char CombClassU32Char = getCombClassU32Char(v61);
              uint64_t v60 = v72;
              unint64_t v55 = v73;
              *(_BYTE *)(a5 + v72) = CombClassU32Char;
            }

            ++v60;
            a12 = v70;
            a3 = v71;
          }

          while (v45 != v60);
          if ((v71 & 1) != 0) {
            goto LABEL_126;
          }
          uint64_t v64 = (int)*a4;
          uint64_t v65 = (v45 - 1);
LABEL_126:
          *a6 = v45;
          if (v45 < 1) {
            return 92LL;
          }
          break;
        default:
          goto LABEL_137;
      }

      v317 = v68;
      int v71 = 0;
      uint64_t v72 = v365;
      uint64_t v73 = (LOBYTE(v365[13 * v60 + 138]) != 0) & (v70 >> 6);
      v303 = v73;
      if (v53 <= 4
        && (v73 & 1) == 0
        && ((int v71 = v53 - 1,
             uint64_t v74 = &v365[17 * v60 + 152],
             uint64_t v75 = (v53 - 1),
             LOBYTE(v74[4 * v75 + 3]))
          ? (unint64_t v76 = (v56 & 0x100) == 0)
          : (unint64_t v76 = 0),
            v76))
      {
        v304 = v53 - 1;
        uint64_t v79 = 0LL;
        v350 = v74[4 * v75];
        int v80 = v53 <= (*(_DWORD *)(v365[v60 + 186] + 4 * (v350 / *(unsigned int *)(v35 + 36))) & 0xFFFFFFu);
      }

      else
      {
        if (v308 < 3) {
          uint64_t v77 = (LOBYTE(v365[13 * v60 + 138]) != 0) & (v70 >> 6);
        }
        else {
          uint64_t v77 = 0;
        }
        v304 = v71;
        if (v77 == 1)
        {
          metazone_alloc_index = spaceman_get_metazone_alloc_index(v365, v60, v308);
          uint64_t v70 = v337;
          uint64_t v79 = 0LL;
          int v80 = 0;
          v350 = metazone_alloc_index;
          uint64_t v72 = v365;
          goto LABEL_132;
        }

        if ((v56 & 2) != 0)
        {
          uint64_t v81 = __clz(__rbit64(*(unsigned int *)(*(void *)(v9 + 376) + 36LL)));
          if ((_DWORD)v60 == (((v300 << v81) & 0x4000000000000000LL) != 0))
          {
            int v80 = 0;
            uint64_t v79 = ((uint64_t)0xBFFFFFFFFFFFFFFFLL >> v81) & v300;
            v350 = v79;
            goto LABEL_131;
          }
        }

        uint64_t v79 = 0LL;
        int v80 = 0;
        if ((v56 & 0x800) != 0)
        {
          v350 = 0LL;
LABEL_131:
          v56 |= 0x4000u;
        }

        else
        {
          v350 = v365[v60 + 124];
        }
      }

      unsigned int v83 = *(void *)(v66[47] + 56);
      if (v83)
      {
        log_debug( "%s:%d: %s unsupported nx_readonly_compatible_features (0x%llx): mount r/o\n",  "nx_mount",  1648,  (const char *)(v66[48] + 208),  v83);
        int v66 = v125;
        *((_BYTE *)v125 + 627) = 1;
      }

      obj_checkpoint_check_for_unknown(v66[49]);
      uint64_t v84 = (const char *)v125;
      if (((*((_BYTE *)v125 + 633) != 0) & v54) != 0)
      {
        unsigned int v85 = 1;
      }

      else
      {
        uint64_t v114 = *((_DWORD *)v19 + 36);
        uint64_t v116 = *((_DWORD *)v19 + 34);
        log_debug( "%s:%d: %s stable checkpoint indices: desc %d data %d\n",  "nx_mount",  1662,  (const char *)(v125[48] + 208),  v116,  v114);
        uint64_t v84 = (const char *)v125;
        unsigned int v85 = *((unsigned __int8 *)v125 + 633);
      }

      if ((v85 == 0) | v54 & 1)
      {
        *(void *)(v49 + 136) = 0LL;
        *(void *)(v49 + 144) = 0LL;
        *(void *)(v49 + 1264) &= ~2uLL;
        nx_metadata_range_optimize(v84);
        BOOL v87 = v125;
        if (*((_BYTE *)v125 + 629))
        {
          unint64_t v20 = spaceman_get(v125, (uint64_t *)&v123);
          if ((_DWORD)v20)
          {
LABEL_137:
            log_err("%s:%d: %s failed to set up spaceman for demo mode: %d\n");
            goto LABEL_146;
          }

          obj_cache_lock_write((pthread_mutex_t *)v125[49]);
          uint64_t v88 = v125 + 52;
          v125[52] = 0LL;
          unint64_t v20 = obj_clone(v123, 0, v88, 0LL);
          obj_cache_unlock_write(v125[49]);
          if ((_DWORD)v20)
          {
            obj_release((uint64_t *)v123);
            goto LABEL_137;
          }

          obj_ephemeral_set_persistent(v125[52], 0);
          obj_release((uint64_t *)v123);
          BOOL v87 = v125;
        }

        uint64_t v89 = v109 + 1;
        unint64_t v20 = tx_mgr_init((uint64_t)v87, v109 + 1, v87 + 50);
        uint64_t v90 = v125;
        if ((_DWORD)v20)
        {
          log_err("%s:%d: %s tx manager initialization failed: %d\n");
          goto LABEL_146;
        }

        uint64_t v91 = v125[50];
        *(_DWORD *)(v91 + 104) = v116;
        *(_DWORD *)(v91 + 108) = v114;
        if ((v111 & 1) == 0)
        {
          log_info( "%s:%d: %s sanity checking all container state... please be patient.\n",  "nx_mount",  1719,  (const char *)(v90[48] + 208));
          unint64_t v20 = nx_check(v125, 0);
          uint64_t v90 = v125;
          if ((_DWORD)v20)
          {
            log_err("%s:%d: %s failed nx_check sanity: %d\n");
            goto LABEL_146;
          }
        }

        if (*((_BYTE *)v90 + 627))
        {
LABEL_180:
          _apfs_free(v19, __na);
          __int128 v104 = v125;
          if (*(void *)(v125[47] + 1248))
          {
            if (!*((_BYTE *)v125 + 627))
            {
              unint64_t v20 = nx_unblock_physical_range(v125);
              __int128 v104 = v125;
              if ((_DWORD)v20)
              {
                log_err( "%s:%d: %s nx_unblock_physical_range failed with error: %d\n",  "nx_mount",  1853,  (const char *)(v125[48] + 208),  v20);
                int v19 = 0LL;
                goto LABEL_146;
              }
            }
          }

          *uint64_t v112 = v104;
          if (v124) {
            _apfs_free(v124, v124[9]);
          }
          return 0LL;
        }

        if (*((_BYTE *)v90 + 633)
          || *((_BYTE *)v90 + 632)
          && (log_info( "%s:%d: %s Enabling temporary checkpoints starting with xid %lld.\n",  "nx_mount",  1731,  (const char *)(v90[48] + 208),  v89),  uint64_t v90 = v125,  *(void *)(v125[47] + 1408) = v89,  *((_BYTE *)v90 + 633)))
        {
          if (!*((_BYTE *)v90 + 632))
          {
            log_info( "%s:%d: %s Making temporary checkpoint %lld permanent (start %lld).\n",  "nx_mount",  1739,  (const char *)(v90[48] + 208),  *(void *)(v90[47] + 16),  *(void *)(v90[47] + 1408));
            v19[176] = 0LL;
            obj_checksum_set_phys((uint64_t)v125, (uint64_t)v19, v18, v92, v93);
            if (v119)
            {
              unint64_t v20 = dev_write(v125[48], v119);
              if (!(_DWORD)v20)
              {
                unint64_t v20 = tx_barrier((uint64_t)v125, 0x10u);
                if (!(_DWORD)v20)
                {
                  uint64_t v90 = v125;
                  *(void *)(v125[47] + 1408) = 0LL;
                  __int128 v108 = 1;
                  goto LABEL_169;
                }
              }
            }

            else
            {
              unint64_t v20 = 22LL;
            }

            log_err("%s:%d: %s failed to write superblock to block %lld: %d\n");
            goto LABEL_146;
          }
        }

uint64_t doReorder(uint64_t result, uint64_t a2, unsigned int a3)
{
  if ((int)a3 >= 2)
  {
    uint64_t v3 = 0LL;
    uint64_t v4 = result + 4LL * a3 - 4;
    do
    {
      uint64_t v5 = *(unsigned __int8 *)(a2 + a3 - 1LL);
      uint64_t v6 = (int *)v4;
      uint64_t v7 = a3 - 2LL;
      do
      {
        uint64_t v8 = *(unsigned __int8 *)(a2 + v7);
        if (v5 < v8)
        {
          uint64_t v9 = (_BYTE *)(a2 + v7);
          int v10 = *v6;
          int *v6 = *(v6 - 1);
          uint64_t result = *(unsigned __int8 *)(a2 + v7);
          v9[1] = result;
          *(v6 - 1) = v10;
          *uint64_t v9 = v5;
          uint64_t v8 = v5;
        }

        --v6;
        uint64_t v5 = v8;
      }

      while (v7-- > v3);
      ++v3;
    }

    while (v3 != a3 - 1);
  }

  return result;
}

uint64_t getCombClassU32Char(int a1)
{
  if (a1 >= 983040) {
    return 0LL;
  }
  if (a1 == 953) {
    return 240LL;
  }
  int v2 = a1 - 711680;
  if (a1 <= 205823) {
    int v2 = a1;
  }
  LOWORD(v3) = nfTrieHi[v2 >> 8];
  if ((_WORD)v3) {
    BOOL v4 = (v3 & 0xFF00) == 44288;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4) {
    return v3;
  }
  int v3 = nfTrieMid[16 * (v3 & 0xFFF) + (v2 >> 4)];
  if (!v3) {
    return v3;
  }
  if ((v3 & 0xFF00) == 0xAE00) {
    return 0LL;
  }
  if ((v3 & 0xFF00) == 0xAD00) {
    return v3;
  }
  __int16 v5 = nfTrieLo[16 * (v3 & 0xFFF) + (v2 & 0xF)];
  if ((v5 & 0xFF00) == 0xAD00) {
    return v5;
  }
  else {
    return 0LL;
  }
}

uint64_t spaceman_init_phys(uint64_t a1, unsigned int a2, _DWORD *a3)
{
  if (!a3) {
    return 22LL;
  }
  uint64_t v3 = *(void *)a3;
  uint64_t v4 = *(void *)(*(void *)a3 + 16LL);
  if (!v4) {
    return 22LL;
  }
  uint64_t v5 = *(void *)(v3 + 128);
  if (!v5) {
    return 22LL;
  }
  int v6 = a3[2] | 1;
  *(void *)(a1 + 336) = 0x9D800000001LL;
  *(_DWORD *)(a1 + 32) = *(void *)(v3 + 8);
  *(int32x2_t *)(a1 + 36) = vmovn_s64(*(int64x2_t *)(v3 + 80));
  *(_DWORD *)(a1 + 44) = *(void *)(v3 + 96);
  uint64_t v7 = *(void *)(v3 + 24);
  *(void *)(a1 + 48) = v4;
  *(void *)(a1 + 56) = v7;
  int v8 = *(_DWORD *)(v3 + 32);
  int v9 = *(_DWORD *)(v3 + 40);
  *(_DWORD *)(a1 + 64) = v8;
  *(_DWORD *)(a1 + 68) = v9;
  *(void *)(a1 + 72) = v4;
  __int128 v10 = *(_OWORD *)(v3 + 48);
  *(_OWORD *)(a1 + 96) = v10;
  uint64_t v11 = *(void *)(v3 + 64);
  uint64_t v12 = *(void *)(v3 + 72);
  *(_DWORD *)(a1 + 112) = v11;
  *(_DWORD *)(a1 + 116) = v12;
  *(void *)(a1 + 120) = v10;
  *(void *)(a1 + 152) = *(void *)(v3 + 104);
  uint64_t v13 = *(void *)(v3 + 120);
  *(_DWORD *)(a1 + 144) = v6;
  *(_DWORD *)(a1 + 148) = v13;
  uint64_t v14 = *(void *)(v3 + 152);
  *(_WORD *)(a1 + 224) = *(void *)(v3 + 144);
  int v15 = *(_DWORD *)(v3 + 112);
  *(_DWORD *)(a1 + 160) = v15;
  *(_DWORD *)(a1 + 164) = v5;
  *(_WORD *)(a1 + 264) = v14;
  *(_WORD *)(a1 + 304) = *(void *)(v3 + 160);
  *(_DWORD *)(a1 + 324) = 2520;
  int v16 = 8 * v15 + 2520;
  *(_DWORD *)(a1 + 328) = v16;
  uint64_t v17 = ((2 * v15 + 6) & 0xFFFFFFF8) + v16;
  *(_DWORD *)(a1 + 332) = v17;
  uint64_t v18 = a1 + v17;
  *(_WORD *)(a1 + 322) = v5 - 1;
  *(_WORD *)(a1 + 320) = 0;
  uint64_t v19 = (v5 & 0x7FFFFFFF) - 1;
  if ((v5 & 0x7FFFFFFF) == 1)
  {
    uint64_t v19 = 0LL;
  }

  else
  {
    uint64_t v20 = 0LL;
    do
    {
      *(_WORD *)(v18 + 2 * v20) = v20 + 1;
      ++v20;
    }

    while (v19 != v20);
  }

  *(_WORD *)(v18 + 2 * v19) = -1;
  int v22 = v17 + ((2 * v5 + 6) & 0xFFFFFFF8);
  *(_DWORD *)(a1 + 80) = v22;
  if (v9) {
    int v8 = v9;
  }
  uint64_t v23 = (v22 + 8 * v8);
  *(_DWORD *)(a1 + 128) = v23;
  if ((_DWORD)v12) {
    unsigned int v24 = v12;
  }
  else {
    unsigned int v24 = v11;
  }
  else {
    return 22LL;
  }
}

uint64_t spaceman_init(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 56);
  uint64_t v3 = *(void *)(*(void *)a1 + 392LL);
  uint64_t v77 = 0LL;
  __int128 v75 = 0u;
  __int128 v76 = 0u;
  __int128 v73 = 0u;
  __int128 v74 = 0u;
  __int128 v71 = 0u;
  __int128 v72 = 0u;
  __int128 v69 = 0u;
  __int128 v70 = 0u;
  __int128 v67 = 0u;
  __int128 v68 = 0u;
  __int128 v65 = 0u;
  __int128 v66 = 0u;
  __int128 v64 = 0u;
  unsigned int v4 = *(_DWORD *)(v2 + 32);
  uint64_t v5 = *(void *)(v3 + 376);
  int v6 = *(_DWORD *)(v5 + 36);
  if (*(_BYTE *)(v3 + 624))
  {
    if (v4 == v6) {
      goto LABEL_3;
    }
LABEL_9:
    uint64_t v10 = v3;
    goto LABEL_10;
  }

  if (*(void *)(v2 + 96) + *(void *)(v2 + 48) != *(void *)(v5 + 40) || v4 != v6) {
    goto LABEL_9;
  }
LABEL_3:
  unsigned int v7 = 336;
  if ((*(_BYTE *)(v2 + 144) & 1) != 0)
  {
    if (*(_DWORD *)(v2 + 336)) {
      unsigned int v12 = 2520;
    }
    else {
      unsigned int v12 = 336;
    }
    unsigned int v13 = *(_DWORD *)(v2 + 340);
    if (*(_DWORD *)(v2 + 336)) {
      int v14 = 1;
    }
    else {
      int v14 = 2;
    }
    if (v13 <= v12) {
      unsigned int v7 = v12;
    }
    else {
      unsigned int v7 = *(_DWORD *)(v2 + 340);
    }
    if (v13 >= v12) {
      BOOL v8 = *(_DWORD *)(v2 + 336) == 0;
    }
    else {
      BOOL v8 = v14;
    }
  }

  else
  {
    BOOL v8 = 0;
  }

  unsigned int v15 = *(_DWORD *)(a1 + 48);
  uint64_t v16 = nx_calculate_metadata_parameters( v4,  *(void *)(v2 + 48),  *(void *)(v2 + 96),  *(_DWORD *)(v5 + 180),  (uint64_t)&v64);
  if ((_DWORD)v16) {
    return v16;
  }
  if (v7 < v15) {
    int v17 = v8;
  }
  else {
    int v17 = v8 + 1;
  }
  if (*(_DWORD *)(v2 + 36) != (_DWORD)v69) {
    ++v17;
  }
  if (*(_DWORD *)(v2 + 40) != DWORD2(v69)) {
    ++v17;
  }
  if (*(_DWORD *)(v2 + 44) != (_DWORD)v70) {
    ++v17;
  }
  unint64_t v18 = *(void *)(v2 + 48);
  if (*(void *)(v2 + 56) != *((void *)&v65 + 1)) {
    ++v17;
  }
  unsigned int v19 = *(_DWORD *)(v2 + 64);
  uint64_t v20 = *(unsigned int *)(v2 + 68);
  if (v19 != (_DWORD)v66) {
    ++v17;
  }
  if ((_DWORD)v20 != DWORD2(v66) && *((void *)&v66 + 1) + v20 != 1) {
    ++v17;
  }
  if (*(void *)(v2 + 104) != *((void *)&v67 + 1)) {
    ++v17;
  }
  uint64_t v22 = *(unsigned int *)(v2 + 116);
  if (*(_DWORD *)(v2 + 112) != (_DWORD)v68) {
    ++v17;
  }
  if ((_DWORD)v22 != DWORD2(v68) && *((void *)&v68 + 1) + v22 != 1) {
    ++v17;
  }
  if ((*(void *)(v2 + 152) & 0x7FFFFFFFFFFFFFFFLL) != *((void *)&v70 + 1)) {
    ++v17;
  }
  uint64_t v24 = *(unsigned int *)(v2 + 160);
  if ((_DWORD)v24 != (_DWORD)v71) {
    ++v17;
  }
  unsigned int v25 = *(_DWORD *)(v2 + 164) & 0x7FFFFFFF;
  if (v25 > 0xFFFE) {
    ++v17;
  }
  if (*(_DWORD *)(v2 + 148) < 4u) {
    ++v17;
  }
  uint64_t v26 = *(unsigned int *)(v2 + 324);
  unint64_t v27 = *(unsigned int *)(v2 + 328);
  if (v26 + 8 * v24 > v27) {
    ++v17;
  }
  unint64_t v28 = *(unsigned int *)(v2 + 332);
  if (v27 + 2LL * (((_DWORD)v24 + 3) & 0xFFFFFFFC) > v28) {
    ++v17;
  }
  unint64_t v29 = *(unsigned int *)(v2 + 80);
  if (v28 + 2LL * ((v25 + 3) & 0xFFFFFFFC) > v29) {
    ++v17;
  }
  unint64_t v30 = *(unsigned int *)(v2 + 128);
  if ((_DWORD)v20) {
    unsigned int v19 = *(_DWORD *)(v2 + 68);
  }
  if (v29 + 8LL * v19 > v30) {
    ++v17;
  }
  if ((_DWORD)v22) {
    unsigned int v31 = *(_DWORD *)(v2 + 116);
  }
  else {
    unsigned int v31 = *(_DWORD *)(v2 + 112);
  }
  if (*(void *)(v2 + 72) > v18) {
    ++v17;
  }
  unint64_t v32 = *(void *)(v2 + 240);
  if (v32 < v18) {
    int v33 = v17;
  }
  else {
    int v33 = v17 + 1;
  }
  if (v32 && !*(void *)(v2 + 248)) {
    ++v33;
  }
  unint64_t v34 = *(void *)(v2 + 256);
  if (v34 <= obj_xid(a1)) {
    int v35 = v33;
  }
  else {
    int v35 = v33 + 1;
  }
  unint64_t v36 = *(void *)(v2 + 96);
  unint64_t v37 = *(void *)(v2 + 120);
  unint64_t v38 = *(void *)(v2 + 280);
  if (v36)
  {
    if (v37 > v36) {
      ++v35;
    }
    if (v38 < v36) {
      int v39 = v35;
    }
    else {
      int v39 = v35 + 1;
    }
    if (v38 && !*(void *)(v2 + 288)) {
      ++v39;
    }
    unint64_t v40 = *(void *)(v2 + 296);
    BOOL v41 = v40 > obj_xid(a1);
  }

  else
  {
    if (v37) {
      ++v35;
    }
    if (v38) {
      int v42 = v35 + 1;
    }
    else {
      int v42 = v35;
    }
    if (*(void *)(v2 + 288)) {
      int v39 = v42 + 1;
    }
    else {
      int v39 = v42;
    }
    BOOL v41 = *(void *)(v2 + 296) != 0LL;
  }

  int v43 = v39 + v41;
  unsigned int v44 = *(unsigned __int16 *)(v2 + 320);
  unsigned int v45 = *(_DWORD *)(v2 + 164) & 0x7FFFFFFF;
  if (v44 != 0xFFFF && v45 <= v44) {
    ++v43;
  }
  unsigned int v47 = *(unsigned __int16 *)(v2 + 322);
  if (v47 != 0xFFFF && v45 <= v47) {
    ++v43;
  }
  if (*(void *)(v2 + 192) <= *(void *)(v2 + 184)) {
    int v49 = 0;
  }
  else {
    int v49 = -1;
  }
  if (v43 == v49)
  {
LABEL_130:
    *(void *)(a1 + 376) = v2;
    *(void *)(a1 + 864) = v2 + *(unsigned int *)(v2 + 324);
    *(void *)(a1 + 872) = v2 + *(unsigned int *)(v2 + 328);
    *(void *)(a1 + 880) = v2 + *(unsigned int *)(v2 + 332);
    *(void *)(a1 + 888) = v2 + *(unsigned int *)(v2 + 80);
    *(void *)(a1 + 896) = v2 + *(unsigned int *)(v2 + 128);
    *(void *)(a1 + 904) = 0LL;
    *(_OWORD *)(a1 + 992) = 0u;
    *(_WORD *)(a1 + 1528) = 8;
    *(void *)(a1 + 1512) = *(void *)(v2 + 48) >> 5;
    *(void *)(a1 + 1520) = *(void *)(v2 + 96) >> 5;
    if (*(_BYTE *)(v3 + 625))
    {
      *(_WORD *)(a1 + 1528) = 0;
    }

    else if ((*(_BYTE *)(*(void *)(v3 + 376) + 65LL) & 1) == 0)
    {
      if (*(_BYTE *)(v3 + 628))
      {
        *(_WORD *)(a1 + 1528) = 32;
      }

      else
      {
        LODWORD(v64) = 0;
        dev_features(*(void *)(v3 + 384));
        if ((v64 & 2) != 0)
        {
          *(_WORD *)(a1 + 1528) = 2;
          unint64_t v50 = 0x40000000u / *(_DWORD *)(v2 + 32);
          if (*(void *)(a1 + 1512) > v50) {
            *(void *)(a1 + 1512) = v50;
          }
          if (*(void *)(a1 + 1520) > v50) {
            *(void *)(a1 + 1520) = v50;
          }
        }
      }
    }

    if ((*(_BYTE *)(a1 + 16) & 0x40) != 0) {
      uint64_t v51 = 0LL;
    }
    else {
      uint64_t v51 = obj_xid(a1);
    }
    uint64_t v52 = 0LL;
    *(void *)(a1 + 912) = v51;
    char v53 = 1;
    do
    {
      char v54 = v53;
      uint64_t v55 = v2 + 48 * v52;
      size_t v58 = *(void *)(v55 + 56);
      unsigned int v57 = (unint64_t *)(v55 + 56);
      size_t v56 = v58;
      if (v58)
      {
        uint64_t v59 = _apfs_calloc(v56, 4uLL);
        uint64_t v60 = a1 + 8 * v52;
        *(void *)(v60 + 1488) = v59;
        if (v59 && *v57)
        {
          unint64_t v61 = 0LL;
          int v62 = (void *)(v60 + 1488);
          do
          {
            *(_DWORD *)(*v62 + 4 * v61) = *(_DWORD *)(v2 + 36) & 0xFFFFFF | (*(unsigned __int8 *)(*v62 + 4 * v61 + 3) << 24);
            *(_BYTE *)(*v62 + 4 * v61++ + 3) = 3;
          }

          while (v61 < *v57);
        }
      }

      else
      {
        *(void *)(a1 + 8 * v52 + 1488) = 0LL;
      }

      char v53 = 0;
      uint64_t v52 = 1LL;
    }

    while ((v54 & 1) != 0);
    uint64_t v11 = new_lock((pthread_mutex_t *)(a1 + 384));
    if ((_DWORD)v11) {
      goto LABEL_166;
    }
    uint64_t v11 = new_lock((pthread_mutex_t *)(a1 + 448));
    if (!(_DWORD)v11)
    {
      uint64_t v11 = new_lock((pthread_mutex_t *)(a1 + 512));
      if (!(_DWORD)v11)
      {
        uint64_t v11 = new_lock((pthread_mutex_t *)(a1 + 576));
        if (!(_DWORD)v11)
        {
          uint64_t v11 = new_lock((pthread_mutex_t *)(a1 + 640));
          if (!(_DWORD)v11)
          {
            uint64_t v11 = new_lock((pthread_mutex_t *)(a1 + 704));
            if (!(_DWORD)v11)
            {
              uint64_t v11 = new_cv((pthread_cond_t *)(a1 + 768));
              if (!(_DWORD)v11)
              {
LABEL_166:
                *(void *)(a1 + 1584) = _apfs_calloc(1uLL, 0xF8uLL);
                return v11;
              }

              free_lock((pthread_mutex_t *)(a1 + 704));
            }

            free_lock((pthread_mutex_t *)(a1 + 640));
          }

          free_lock((pthread_mutex_t *)(a1 + 576));
        }

        free_lock((pthread_mutex_t *)(a1 + 512));
      }

      free_lock((pthread_mutex_t *)(a1 + 448));
    }

    free_lock((pthread_mutex_t *)(a1 + 384));
    goto LABEL_166;
  }

  uint64_t v10 = v3;
LABEL_10:
  uint64_t v11 = nx_corruption_detected_int(v10);
  if (!(_DWORD)v11) {
    goto LABEL_130;
  }
  return v11;
}

uint64_t spaceman_destroy(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 1600);
  if (v2) {
    _apfs_free(v2, 16LL * *(unsigned int *)(a1 + 1592));
  }
  uint64_t v3 = *(void **)(a1 + 1584);
  if (v3) {
    _apfs_free(v3, 248LL);
  }
  unsigned int v4 = *(void **)(a1 + 1536);
  if (v4) {
    _apfs_free(v4, 16LL * *(unsigned __int16 *)(a1 + 1530));
  }
  spaceman_datazone_destroy(a1);
  uint64_t v5 = *(void *)(a1 + 1568);
  if (v5)
  {
    spaceman_free_extent_cache_destroy(v5);
    _apfs_free(*(void **)(a1 + 1568), 1368LL);
  }

  uint64_t v6 = *(void *)(a1 + 1576);
  if (v6)
  {
    spaceman_free_extent_cache_destroy(v6);
    _apfs_free(*(void **)(a1 + 1576), 1368LL);
  }

  free_lock((pthread_mutex_t *)(a1 + 384));
  free_lock((pthread_mutex_t *)(a1 + 448));
  free_lock((pthread_mutex_t *)(a1 + 512));
  free_lock((pthread_mutex_t *)(a1 + 576));
  free_lock((pthread_mutex_t *)(a1 + 640));
  free_lock((pthread_mutex_t *)(a1 + 704));
  free_cv((pthread_cond_t *)(a1 + 768));
  return 0LL;
}

uint64_t spaceman_cab_sanity_check(void *a1, uint64_t *a2)
{
  uint64_t v4 = a1[7];
  int v5 = obj_size_phys((uint64_t)a1);
  uint64_t v6 = *(void *)(*a1 + 392LL);
  int v7 = *(_DWORD *)(*(void *)(v6 + 376) + 36LL);
  BOOL v8 = v5 != v7;
  if (a2)
  {
    uint64_t v9 = *a2;
    unsigned int v11 = *((_DWORD *)a2 + 2);
    int v10 = *((_DWORD *)a2 + 3);
    if (v5 == v7) {
      int v12 = 1;
    }
    else {
      int v12 = 2;
    }
    if (*(_DWORD *)(v4 + 32) != v10) {
      BOOL v8 = v12;
    }
    int v13 = v10 == *(_DWORD *)(v9 + 48LL * v11 + 68) - 1
        ? *(_DWORD *)(v9 + 48LL * v11 + 64) - *(_DWORD *)(v9 + 44) * v10
        : *(_DWORD *)(v9 + 44);
    if (*(_DWORD *)(v4 + 36) != v13) {
      return nx_corruption_detected_int(v6);
    }
  }

  if (v8) {
    return nx_corruption_detected_int(v6);
  }
  else {
    return 0LL;
  }
}

uint64_t spaceman_cib_sanity_check(void *a1, uint64_t *a2)
{
  uint64_t v4 = a1[7];
  int v5 = obj_size_phys((uint64_t)a1);
  uint64_t v6 = *(void *)(*a1 + 392LL);
  int v7 = *(_DWORD *)(*(void *)(v6 + 376) + 36LL);
  BOOL v8 = v5 != v7;
  if (a2)
  {
    uint64_t v9 = *a2;
    unsigned int v11 = *((_DWORD *)a2 + 2);
    int v10 = *((_DWORD *)a2 + 3);
    if (v5 == v7) {
      int v12 = 1;
    }
    else {
      int v12 = 2;
    }
    if (*(_DWORD *)(v4 + 32) != v10) {
      BOOL v8 = v12;
    }
    if (v10 == *(_DWORD *)(v9 + 48LL * v11 + 64) - 1)
    {
      if (*(_DWORD *)(v4 + 36) != *(_DWORD *)(v9 + 48LL * v11 + 56) - *(_DWORD *)(v9 + 40) * v10) {
        return nx_corruption_detected_int(v6);
      }
    }

    else if (*(_DWORD *)(v4 + 36) != *(_DWORD *)(v9 + 40))
    {
      return nx_corruption_detected_int(v6);
    }
  }

  if (v8) {
    return nx_corruption_detected_int(v6);
  }
  return 0LL;
}

uint64_t spaceman_ip_bm_block_alloc(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, _WORD *a5)
{
  uint64_t v5 = *(void *)(a2 + 376);
  uint64_t v6 = *(unsigned __int16 *)(v5 + 320);
  if (v6 == 0xFFFF) {
    return 28LL;
  }
  uint64_t v10 = *(void *)(a2 + 880);
  *(_WORD *)(v5 + 320) = *(_WORD *)(v10 + 2 * v6);
  *(_WORD *)(v10 + 2 * v6) = -1;
  obj_dirty(a2, a3, 0LL);
  *a5 = v6;
  return spaceman_ip_bm_block_address(a1, v5, v6, a4);
}

uint64_t spaceman_ip_block_alloc(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4)
{
  uint64_t v5 = a3;
  uint64_t v7 = a1;
  uint64_t v8 = *(void *)(a2 + 376);
  uint64_t v42 = 0LL;
  uint64_t v43 = 0LL;
  uint64_t v40 = 0LL;
  uint64_t v41 = 0LL;
  if (!xid_is_current_tx(a1, a3)) {
    return 22LL;
  }
  int v9 = 8 * *(_DWORD *)(v8 + 32);
  if (!v9) {
    return 22LL;
  }
  unsigned int v31 = a4;
  unint64_t v32 = (pthread_mutex_t *)(a2 + 448);
  pthread_mutex_lock((pthread_mutex_t *)(a2 + 448));
  unint64_t v10 = v9;
  uint64_t v35 = v5;
  uint64_t v36 = v7;
  int v33 = v9;
  unint64_t v34 = v9;
LABEL_4:
  unsigned int v11 = 0;
  unint64_t v12 = *(void *)(a2 + 904);
  unint64_t v39 = 0LL;
  while (1)
  {
    unsigned int v13 = *(_DWORD *)(v8 + 160);
    if (v11 > v13)
    {
LABEL_34:
      if (spaceman_free_completed(v7, a2, 0LL, 1LL, 0LL, v5)) {
        goto LABEL_4;
      }
      log_err( "%s:%d: %s unable to find free IP block or to free pending free IP blocks\n",  "spaceman_ip_block_alloc",  5100,  (const char *)(*(void *)(v7 + 384) + 208LL));
      uint64_t v29 = 28LL;
      goto LABEL_38;
    }

    unint64_t v14 = v12 / v10;
    unsigned int v37 = v11;
    if (v11 == v13)
    {
      unint64_t v15 = *(void *)(a2 + 904) % v10;
      if (!v15) {
        goto LABEL_34;
      }
    }

    else
    {
      LODWORD(v15) = v14 == v13 - 1
                   ? *(void *)(v8 + 152) - (*(void *)(v8 + 152) & 0x7FFFFFFFFFFFFFFFuLL) / v10 * v10
                   : v33;
    }

    unsigned int v16 = *(unsigned __int16 *)(*(void *)(a2 + 872) + 2 * v14);
    uint64_t v17 = v8;
    uint64_t v18 = spaceman_ip_bm_block_address(v7, v8, v16, &v41);
    if ((_DWORD)v18
      || (uint64_t v18 = obj_get(*(void *)(v7 + 392), 1073741825LL, v41, &sm_bm_desc, 0LL, 0LL, 0LL, v5, &v43), (_DWORD)v18))
    {
      uint64_t v29 = v18;
      pthread_mutex_unlock(v32);
      return v29;
    }

    unint64_t v19 = v12;
    uint64_t v20 = v12 % v10;
    uint64_t v21 = *(void *)(v43 + 56);
    unint64_t v26 = v10 - v20 + v19;
    uint64_t v8 = v17;
    if (v26 >= (*(void *)(v17 + 152) & 0x7FFFFFFFFFFFFFFFuLL)) {
      unint64_t v12 = 0LL;
    }
    else {
      unint64_t v12 = v26;
    }
    uint64_t v5 = v35;
    uint64_t v7 = v36;
LABEL_32:
    obj_release(v43);
    unsigned int v11 = v37 + 1;
    if (v39)
    {
      uint64_t v29 = 0LL;
LABEL_38:
      pthread_mutex_unlock(v32);
      unint64_t *v31 = v39;
      return v29;
    }
  }

  uint64_t v22 = v42;
  unint64_t v23 = v42 + v14 * v10;
  uint64_t v24 = *(void *)(v17 + 152);
  if ((v24 & 0x7FFFFFFFFFFFFFFFuLL) > v23)
  {
    unint64_t v25 = v19;
    uint64_t v8 = v17;
    if (v24 < 0)
    {
      uint64_t v27 = nx_metadata_fragmented_block_address_lookup(v36, *(void *)(v17 + 176), v23, &v39, 0LL);
      if ((_DWORD)v27) {
        goto LABEL_39;
      }
      uint64_t v22 = v42;
      uint64_t v8 = v17;
    }

    else
    {
      unint64_t v39 = *(void *)(v17 + 176) + v23;
    }

    bitmap_set_range(v21, v22, 1LL);
    uint64_t v5 = v35;
    uint64_t v7 = v36;
    if (*(void *)(*(void *)(a2 + 864) + 8 * v14) != v35)
    {
      __int16 v38 = 0;
      uint64_t v27 = spaceman_ip_bm_block_alloc(v36, a2, v35, &v40, &v38);
      if ((_DWORD)v27 || (uint64_t v27 = spaceman_ip_bm_block_free(v36, a2, v16, v35), (_DWORD)v27))
      {
LABEL_39:
        uint64_t v29 = v27;
        goto LABEL_41;
      }

      uint64_t v41 = v40;
      *(_WORD *)(*(void *)(a2 + 872) + 2 * v14) = v38;
      *(void *)(*(void *)(a2 + 864) + 8 * v14) = v35;
      uint64_t v8 = v17;
    }

    obj_dirty(v43, v35, v41);
    uint64_t v28 = v25 - v20 + v42;
    if (v28 + 1 < (*(void *)(v8 + 152) & 0x7FFFFFFFFFFFFFFFuLL)) {
      unint64_t v12 = v28 + 1;
    }
    else {
      unint64_t v12 = 0LL;
    }
    *(void *)(a2 + 904) = v12;
    unint64_t v10 = v34;
    goto LABEL_32;
  }

  uint64_t v29 = 22LL;
LABEL_41:
  pthread_mutex_unlock(v32);
  obj_release(v43);
  return v29;
}

uint64_t spaceman_extent_check(void *a1, uint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t result = nx_superblock_sanity_check_extent(a1[47], *(void *)(a2 + 376), a3, a4, 0);
  if (!(_DWORD)result) {
    return nx_metadata_range_overlap_check(a1, a3, a4, 0LL);
  }
  return result;
}

uint64_t spaceman_ip_bm_block_address(uint64_t a1, uint64_t a2, unsigned int a3, void *a4)
{
  int v4 = *(_DWORD *)(a2 + 164);
  if ((v4 & 0x7FFFFFFFu) <= a3) {
    return 22LL;
  }
  uint64_t v5 = *(void *)(a2 + 168);
  if (v4 < 0) {
    return nx_metadata_fragmented_block_address_lookup(a1, v5, a3, a4, 0LL);
  }
  uint64_t result = 0LL;
  *a4 = v5 + a3;
  return result;
}

uint64_t spaceman_get(void *a1, uint64_t *a2)
{
  uint64_t v3 = (char *)a1[51];
  *a2 = (uint64_t)v3;
  if (v3) {
    goto LABEL_2;
  }
  uint64_t result = obj_get(a1[49], 0x80000000, *(void *)(a1[47] + 152LL), (int *)&sm_desc, 0LL, 0LL, 0LL, 0LL, a2);
  if (!(_DWORD)result)
  {
    a1[51] = *a2;
    uint64_t v3 = (char *)*a2;
LABEL_2:
    obj_retain(v3);
    return 0LL;
  }

  return result;
}

uint64_t spaceman_currently_available_space( uint64_t a1, unint64_t *a2, unint64_t *a3, unint64_t *a4, BOOL *a5)
{
  int v9 = (void *)a1;
  else {
    uint64_t v10 = 0LL;
  }
  if (v10) {
    int v9 = *(void **)(v10 + 392);
  }
  uint64_t v21 = 0LL;
  uint64_t v11 = spaceman_get(v9, (uint64_t *)&v21);
  if ((_DWORD)v11)
  {
    if (a2) {
      *a2 = 0LL;
    }
    if (a3) {
LABEL_10:
    }
      *a3 = 0LL;
  }

  else
  {
    uint64_t v13 = *(void *)&v21[5].__opaque[48];
    pthread_mutex_lock(v21 + 9);
    if (v10)
    {
      unint64_t v14 = v21;
      uint64_t v15 = *(void *)(v10 + 376);
      uint64_t v17 = *(void *)(v15 + 72);
      unint64_t v16 = *(void *)(v15 + 80);
      if (v16 >= *(void *)(*(void *)&v21[5].__opaque[48] + 96LL)
                + *(void *)(*(void *)&v21[5].__opaque[48] + 48LL)
                - *(void *)(*(void *)&v21[5].__opaque[48] + 184LL)
                + v17
        || v16 == 0)
      {
        unint64_t v19 = *(void *)(*(void *)&v21[5].__opaque[48] + 96LL)
            + *(void *)(*(void *)&v21[5].__opaque[48] + 48LL)
            - *(void *)(*(void *)&v21[5].__opaque[48] + 184LL)
            + v17;
      }

      else
      {
        unint64_t v19 = v16;
      }
    }

    else
    {
      unint64_t v19 = *(void *)(v13 + 96) + *(void *)(v13 + 48);
      unint64_t v14 = v21;
    }

    unint64_t v20 = spaceman_available_space(v14, v10, a5);
    pthread_mutex_unlock(v14 + 9);
    obj_release(&v21->__sig);
    if (a2) {
      *a2 = v19;
    }
    if (a3) {
      *a3 = v20;
    }
    a3 = a4;
    if (a4) {
      goto LABEL_10;
    }
  }

  return v11;
}

unint64_t spaceman_available_space(void *a1, uint64_t a2, BOOL *a3)
{
  uint64_t v3 = (void *)a1[47];
  uint64_t v4 = v3[30];
  uint64_t v5 = v3[35];
  uint64_t v6 = v3[24] - v3[23];
  uint64_t v7 = v3[15] + v3[9];
  unint64_t v8 = v7 + v4 + v5 + v6;
  if (!a2) {
    goto LABEL_6;
  }
  uint64_t v9 = *(void *)(a2 + 376);
  unint64_t v10 = *(void *)(v9 + 72);
  uint64_t v13 = v9 + 80;
  uint64_t v12 = *(void *)(v9 + 80);
  unint64_t v11 = *(void *)(v13 + 8);
  BOOL v14 = v10 >= v11;
  unint64_t v15 = v10 - v11;
  if (!v14) {
    unint64_t v15 = 0LL;
  }
  v8 += v15;
  if (v12) {
    unint64_t v16 = v12 - (v11 + *(void *)(a2 + 408));
  }
  else {
LABEL_6:
  }
    unint64_t v16 = v8;
  unint64_t v17 = v7 - (a1[104] + a1[105]);
  if (v8 >= v16) {
    unint64_t v8 = v16;
  }
  if (a3) {
    *a3 = v17 < v8;
  }
  if (v17 >= v8) {
    return v8;
  }
  else {
    return v17;
  }
}

uint64_t spaceman_size_info( void *a1, void *a2, char a3, _DWORD *a4, unint64_t *a5, void *a6, void *a7, uint64_t *a8, uint64_t *a9)
{
  unint64_t v30 = 0LL;
  uint64_t v16 = spaceman_get(a1, (uint64_t *)&v30);
  if (!(_DWORD)v16)
  {
    uint64_t v17 = *(void *)&v30[5].__opaque[48];
    pthread_mutex_lock(v30 + 9);
    if (a4) {
      *a4 = *(_DWORD *)(v17 + 32);
    }
    uint64_t v18 = v30;
    uint64_t v19 = *(void *)(v17 + 240)
        + *(void *)(v17 + 72)
        + *(void *)&v30[15].__opaque[8]
        + *(void *)(v17 + 120)
        + *(void *)(v17 + 280)
        + *(void *)&v30[15].__opaque[16];
    if ((a2 || (a3 & 1) != 0) && (v19 += *(void *)(v17 + 192) - *(void *)(v17 + 184), a2))
    {
      unint64_t v20 = a2[10];
      unint64_t v21 = a2[11];
      unint64_t v22 = a2[9];
      unint64_t v23 = v22 - v21;
      if (v22 < v21) {
        unint64_t v23 = 0LL;
      }
      unint64_t v24 = v23 + v19;
      unint64_t v25 = v20 - v21;
      if (v24 < v25) {
        unint64_t v25 = v24;
      }
      if (v20) {
        unint64_t v24 = v25;
      }
      if (a5)
      {
        unint64_t v26 = *(void *)(*(void *)&v30[5].__opaque[48] + 48LL)
            + v22
            + *(void *)(*(void *)&v30[5].__opaque[48] + 96LL)
            - *(void *)(*(void *)&v30[5].__opaque[48] + 184LL);
        if (v20 >= v26 || v20 == 0) {
          unint64_t v20 = v26;
        }
        *a5 = v20;
      }

      if (a8) {
        *a8 = v24;
      }
      if (a6) {
        *a6 = a2[9];
      }
      if (a7) {
        *a7 = a2[10];
      }
      if (!a9) {
        goto LABEL_40;
      }
      uint64_t v28 = a2[11];
    }

    else
    {
      if (a5) {
        *a5 = *(void *)(v17 + 96) + *(void *)(v17 + 48);
      }
      if (a6) {
        *a6 = *(void *)(v17 + 184);
      }
      if (a7) {
        *a7 = 0LL;
      }
      if (a8) {
        *a8 = v19;
      }
      if (!a9) {
        goto LABEL_40;
      }
      uint64_t v28 = *(void *)(v17 + 48) - v19 + *(void *)(v17 + 96);
    }

    *a9 = v28;
LABEL_40:
    pthread_mutex_unlock(v18 + 9);
    obj_release(&v30->__sig);
  }

  return v16;
}

uint64_t trim_time_tracking_start(uint64_t result, uint64_t a2, int a3, int a4)
{
  if (a2)
  {
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)(a2 + 48) = 0u;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    uint64_t result = dev_features(*(void *)(result + 384));
    if ((_DWORD)result)
    {
      if (!a4) {
        return result;
      }
    }

    else if ((a4 & 1) == 0)
    {
      return result;
    }

    __tp.__darwin_time_t tv_sec = 0LL;
    __tp.uint64_t tv_nsec = 0LL;
    uint64_t result = clock_gettime(_CLOCK_UPTIME_RAW_APPROX, &__tp);
    __darwin_time_t tv_sec = __tp.tv_sec;
    uint64_t tv_nsec = __tp.tv_nsec;
    *(void *)a2 = __tp.tv_sec;
    tv_nsec /= 1000LL;
    *(_DWORD *)(a2 + 8) = tv_nsec;
    uint64_t v9 = 1000000 * tv_sec + (int)tv_nsec;
    *(void *)(a2 + 16) = v9;
    *(void *)(a2 + 24) = v9;
    if (a3) {
      __int16 v10 = a3;
    }
    else {
      __int16 v10 = 30;
    }
    *(_WORD *)(a2 + 60) = v10;
    *(_BYTE *)(a2 + 62) = 1;
    *(_BYTE *)(a2 + 63) = a4 & 1;
  }

  return result;
}

uint64_t spaceman_free_completed(uint64_t a1, uint64_t a2, unsigned int a3, char a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = a5;
  uint64_t v7 = *(void *)(a2 + 376);
  unint64_t v71 = 0LL;
  __int128 v72 = 0LL;
  unint64_t v69 = 0LL;
  uint64_t v70 = 0LL;
  uint64_t v56 = v7;
  int v55 = *(_DWORD *)(v7 + 36);
  uint64_t v8 = 1532LL;
  if (!a3) {
    uint64_t v8 = 1534LL;
  }
  char v54 = (unsigned __int16 *)(a2 + 1534);
  if (a3) {
    uint64_t v9 = (_WORD *)(a2 + 1532);
  }
  else {
    uint64_t v9 = (_WORD *)(a2 + 1534);
  }
  if (a3) {
    uint64_t v10 = 1552LL;
  }
  else {
    uint64_t v10 = 1544LL;
  }
  if (a3) {
    uint64_t v11 = 1560LL;
  }
  else {
    uint64_t v11 = 1561LL;
  }
  unsigned int v12 = *(unsigned __int16 *)(a2 + v8);
  if (*(_WORD *)(a2 + v8))
  {
    int v13 = 0;
    uint64_t v14 = 0LL;
    uint64_t v15 = 0LL;
    uint64_t v16 = (pthread_mutex_t *)(a2 + 512);
    int v62 = (pthread_mutex_t *)(a2 + 448);
    do
    {
      if ((a4 & 2) == 0) {
        int v13 = 16;
      }
      uint64_t v17 = *(void *)(a2 + v10);
      *(_BYTE *)(a2 + v11) = 1;
      if (a3)
      {
        pthread_mutex_unlock(v16);
        uint64_t v18 = v16;
      }

      else
      {
        uint64_t v18 = v62;
        pthread_mutex_unlock(v62);
      }

      v14 += v17;
      v15 += v12;
      timespec __rqtp = (timespec)xmmword_183CA1CA0;
      nanosleep(&__rqtp, 0LL);
      pthread_mutex_lock(v18);
      unsigned int v12 = (unsigned __int16)*v9;
    }

    while (*v9);
    uint64_t v6 = a5;
    if (v13) {
      goto LABEL_31;
    }
  }

  else
  {
    uint64_t v14 = 0LL;
    uint64_t v15 = 0LL;
  }

  if (!spaceman_fq_tree_get(a1, a2, a3, 0LL, 0, (uint64_t *)&v72) && v72)
  {
    LODWORD(__rqtp.tv_sec) = 16;
    unsigned int v68 = 8;
    int v19 = bt_lookup_first((uint64_t)v72, 0LL, &v69, &__rqtp, &v71, &v68);
    unint64_t v63 = v69;
    if (a3 && !*(void *)(a2 + 1536)) {
      pthread_mutex_lock((pthread_mutex_t *)(a2 + 384));
    }
    unint64_t v20 = a6;
    if (v19)
    {
LABEL_29:
      if (*(void *)(a2 + 1536))
      {
        spaceman_fq_trim_list_flush(a1, a2, a3, v6, v20);
      }

      else
      {
        dev_unmap_flush(*(void *)(a1 + 384));
        if (a3) {
          pthread_mutex_unlock((pthread_mutex_t *)(a2 + 384));
        }
        trim_time_tracking_check(a1, v6);
      }

      obj_release(v72);
      return v14;
    }

    char v22 = 0;
    char v53 = (void *)(v56 + 40LL * a3 + 216);
    uint64_t v59 = (pthread_mutex_t *)(a2 + 576);
    uint64_t v51 = (pthread_mutex_t *)(a2 + 448);
    int v57 = 2;
    while (1)
    {
      if (v68)
      {
        unint64_t v23 = v71;
      }

      else
      {
        unint64_t v71 = 1LL;
        unint64_t v23 = 1LL;
      }

      unint64_t v24 = v69;
      if (v69 <= v20)
      {
        if (v69 > v63)
        {
          void *v53 = v69;
          if ((a4 & 2) == 0) {
            goto LABEL_29;
          }
        }

        if (*(_BYTE *)(a1 + 632))
        {
          uint64_t v25 = *(void *)(a1 + 376);
          if (v24 >= *(void *)(v25 + 1408))
          {
            uint64_t v50 = a2 + 8LL * a3;
            if (*(void *)(v50 + 920) < v20)
            {
              *(void *)(v50 + 920) = v20;
              log_info( "%s:%d: %s sfq %d processing xid %lld blocked by temporary checkpoints %lld\n",  "spaceman_free_completed",  6096,  (const char *)(*(void *)(a1 + 384) + 208LL),  a3,  v24,  *(void *)(v25 + 1408));
            }

            goto LABEL_29;
          }
        }

        unint64_t v26 = *(void *)(a2 + 912);
        if (v24 > v26)
        {
          if ((a4 & 3) != 0 && v57 && v24 != v20)
          {
            tx_barrier(a1, 0xD0u);
            --v57;
            unint64_t v24 = v69;
            unint64_t v26 = *(void *)(a2 + 912);
          }

          if (v24 > v26) {
            goto LABEL_29;
          }
        }

        if (a3)
        {
          int v27 = spaceman_extent_check((void *)a1, a2, v70, v71);
          if (v27)
          {
            int v28 = v27;
            pthread_mutex_lock(v59);
            spaceman_decrement_free_queue_count(a1, a2, a3, v23);
            pthread_mutex_unlock(v59);
LABEL_59:
            if (nx_ratelimit_log_allowed(a1)) {
              log_err( "%s:%d: %s sfq %d error validating extent %lld %lld: %d\n",  "spaceman_free_completed",  6154,  (const char *)(*(void *)(a1 + 384) + 208LL),  a3,  v70,  v23,  v28);
            }
            goto LABEL_80;
          }

          pthread_mutex_lock(v59);
          uint64_t v52 = (void *)(a2 + 8LL * (a3 - 1) + 976);
          *v52 += v23;
          spaceman_decrement_free_queue_count(a1, a2, a3, v23);
          pthread_mutex_unlock(v59);
          unint64_t v29 = v70;
          uint64_t v30 = *(void *)(a2 + 1536);
          if (v30)
          {
            unint64_t v31 = *(unsigned __int16 *)(a2 + 1532);
            *(_WORD *)(a2 + 1532) = v31 + 1;
            unint64_t v32 = *(void *)(a2 + 1552) + v23;
            *(void *)(a2 + 1552) = v32;
            int v33 = *(_DWORD *)(*(void *)(a2 + 376) + 36LL);
            uint64_t v34 = v30 + 16 * v31;
            *(void *)(v34 + 256) = v29;
            *(void *)(v34 + 264) = v23;
            goto LABEL_80;
          }

          dev_unmap(*(void *)(a1 + 384), v70);
          spaceman_freed_internal((void *)a1, a2, v29, v23, 1, v20);
        }

        else
        {
          spaceman_decrement_free_queue_count(a1, a2, 0, v23);
          int v28 = spaceman_ip_extent_validate(a1, a2, v70, v23, 0LL);
          if (v28) {
            goto LABEL_59;
          }
          unint64_t v35 = v70;
          uint64_t v36 = *(void *)(a2 + 1536);
          if (v36)
          {
            uint64_t v37 = *(unsigned __int16 *)(a2 + 1534);
            *(_WORD *)(a2 + 1534) = v37 + 1;
            *(void *)(a2 + 1544) += v23;
            __int16 v38 = (unint64_t *)(v36 + 16 * v37);
            *__int16 v38 = v35;
            v38[1] = v23;
            if ((unsigned __int16)(v37 + 1) >= 0x10u)
            {
              pthread_mutex_unlock(v51);
              uint64_t v39 = *v54;
              trim_time_tracking_check(a1, v6);
              if (v39)
              {
                uint64_t v40 = 0LL;
                uint64_t v41 = 16 * v39;
                do
                {
                  dev_unmap(*(void *)(a1 + 384), *(void *)(*(void *)(a2 + 1536) + v40));
                  v40 += 16LL;
                }

                while (v41 != v40);
                dev_unmap_flush(*(void *)(a1 + 384));
                pthread_mutex_lock(v51);
                uint64_t v42 = 0LL;
                unint64_t v43 = a6;
                do
                {
                  spaceman_ip_freed( a1,  (void *)a2,  *(void *)(*(void *)(a2 + 1536) + v42),  *(void *)(*(void *)(a2 + 1536) + v42 + 8),  a6);
                  v42 += 16LL;
                }

                while (v41 != v42);
              }

              else
              {
                dev_unmap_flush(*(void *)(a1 + 384));
                pthread_mutex_lock(v51);
                unint64_t v43 = a6;
              }

              *(void *)(a2 + 1544) = 0LL;
              *(_WORD *)(a2 + 1534) = 0;
              unint64_t v20 = v43;
            }

            goto LABEL_80;
          }

          dev_unmap(*(void *)(a1 + 384), v70);
          spaceman_ip_freed(a1, (void *)a2, v35, v23, v20);
        }

        trim_time_tracking_check(a1, v6);
      }

      else
      {
        log_err( "%s:%d: %s sfq %d entry %lld:%lld %lld - bad xid, current xid %lld\n",  "spaceman_free_completed",  6069,  (const char *)(*(void *)(a1 + 384) + 208LL),  a3,  v69,  v70,  v23,  v20);
        if (a3)
        {
          pthread_mutex_lock(v59);
          spaceman_decrement_free_queue_count(a1, a2, a3, v23);
          pthread_mutex_unlock(v59);
        }

        else
        {
          spaceman_decrement_free_queue_count(a1, a2, 0, v23);
        }
      }

uint64_t trim_time_tracking_end(uint64_t a1, uint64_t a2)
{
  if (!a2) {
    return 0LL;
  }
  if (!*(_BYTE *)(a2 + 62)) {
    return 0LL;
  }
  v11.__darwin_time_t tv_sec = 0LL;
  v11.int tv_nsec = 0LL;
  clock_gettime(_CLOCK_UPTIME_RAW_APPROX, &v11);
  __darwin_time_t tv_sec = v11.tv_sec;
  int tv_nsec = v11.tv_nsec;
  *(void *)a2 = v11.tv_sec;
  tv_nsec /= 1000;
  *(_DWORD *)(a2 + 8) = tv_nsec;
  *(void *)(a2 + 32) = 1000000 * tv_sec + tv_nsec;
  *(_BYTE *)(a2 + 62) = 0;
  uint64_t v6 = *(int *)(a2 + 56);
  if (!(_DWORD)v6) {
    return 0LL;
  }
  uint64_t v7 = (unint64_t *)(*(void *)(a1 + 384) + 168LL);
  uint64_t v8 = -v6;
  do
    unint64_t v9 = __ldxr(v7);
  while (__stxr(v9 + v8, v7));
  return 1LL;
}

void spaceman_manage_free_queues(void *a1, uint64_t a2)
{
  unsigned int v12 = 0LL;
  memset(v11, 0, sizeof(v11));
  __int128 v9 = 0u;
  __int128 v10 = 0u;
  uint64_t v4 = *(void *)(a2 + 16);
  if (!spaceman_get(a1, (uint64_t *)&v12))
  {
    uint64_t v5 = *(void **)&v12[5].__opaque[48];
    trim_time_tracking_start((uint64_t)a1, (uint64_t)&v9, 0, 1);
    pthread_mutex_lock(v12 + 7);
    if (spaceman_fq_over_threshold((uint64_t)a1, (uint64_t)v12, 0, 0))
    {
      while (spaceman_fq_over_threshold((uint64_t)a1, (uint64_t)v12, 0, 1)
    }

    while (1)
    {
      uint64_t v6 = v12;
      if (!spaceman_free_completed((uint64_t)a1, (uint64_t)v12, 0, 0, (uint64_t)&v9, v4))
      {
        uint64_t v6 = v12;
        break;
      }
    }

    pthread_mutex_unlock(v6 + 7);
    pthread_mutex_lock(v12 + 8);
    uint64_t v7 = v12;
    if (v5[30] > *(void *)&v12[23].__opaque[32])
    {
      while (1)
      {
        uint64_t v7 = v12;
        if (v5[30] <= *(void *)&v12[23].__opaque[32] >> 1) {
          break;
        }
        if (!spaceman_free_completed((uint64_t)a1, (uint64_t)v12, 1u, 1, (uint64_t)&v9, v4))
        {
          uint64_t v7 = v12;
          break;
        }
      }
    }

    if (v5[35] > *(void *)&v7[23].__opaque[40])
    {
      while (v5[35] > *(void *)&v12[23].__opaque[40] >> 1
    }

    if (v5[30] > v5[9])
    {
    }

    if (v5[35] > v5[15])
    {
    }

    if (spaceman_fq_over_threshold((uint64_t)a1, (uint64_t)v12, 1u, 0))
    {
      while (spaceman_fq_over_threshold((uint64_t)a1, (uint64_t)v12, 1u, 1)
    }

    if (spaceman_fq_over_threshold((uint64_t)a1, (uint64_t)v12, 2u, 0))
    {
      while (spaceman_fq_over_threshold((uint64_t)a1, (uint64_t)v12, 2u, 1)
    }

    while (v4 - v5[32] > (unint64_t)*(unsigned __int16 *)&v12[23].__opaque[48]
    do
      uint64_t v8 = v5[37];
    while (v8
         && v4 - v8 > (unint64_t)*(unsigned __int16 *)&v12[23].__opaque[48]
         && spaceman_free_completed((uint64_t)a1, (uint64_t)v12, 2u, 0, (uint64_t)&v9, v4));
    trim_time_tracking_end((uint64_t)a1, (uint64_t)&v9);
    *(_OWORD *)(a2 + 88) = *(_OWORD *)((char *)v11 + 8);
    *(void *)(a2 + 80) = *(void *)&v11[0] - v10;
    pthread_mutex_unlock(v12 + 8);
    obj_release(&v12->__sig);
  }

uint64_t spaceman_fq_over_threshold(uint64_t a1, uint64_t a2, unsigned int a3, int a4)
{
  uint64_t v9 = 0LL;
  uint64_t v7 = 0LL;
  if (!spaceman_fq_tree_get(a1, a2, a3, 0LL, 0, &v9) && v9)
  {
    uint64_t v7 = spaceman_fq_tree_over_threshold(a2, a3, v9, a4);
    obj_release(v9);
  }

  return v7;
}

uint64_t spaceman_tx_start_closing(void *a1)
{
  uint64_t v14 = 0LL;
  uint64_t v3 = *(void **)&v14[5].__opaque[48];
  pthread_mutex_lock(v14 + 9);
  unint64_t v4 = v3[9];
  unint64_t v5 = *(void *)&v14[23].__opaque[32] >> (v4 - v14[13].__sig < v3[6] >> 5);
  unint64_t v6 = v3[30];
  unint64_t v7 = v3[15];
  unint64_t v8 = *(void *)&v14[23].__opaque[40] >> (v7 - *(void *)v14[13].__opaque < v3[12] >> 5);
  unint64_t v9 = v3[35];
  pthread_mutex_unlock(v14 + 9);
  BOOL v12 = v9 > v7 || v9 > v8 || v6 > v4 || v6 > v5;
  if (v12 || spaceman_fq_over_threshold((uint64_t)a1, (uint64_t)v14, 0, 0))
  {
    uint64_t v2 = 1LL;
  }

  else
  {
    uint64_t v2 = 1LL;
  }

  obj_release(&v14->__sig);
  return v2;
}

uint64_t spaceman_tx_complete(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = 0LL;
  uint64_t result = spaceman_get(a1, &v5);
  if (!(_DWORD)result)
  {
    uint64_t v4 = v5;
    *(void *)(v5 + 912) = a2;
    return obj_release(v4);
  }

  return result;
}

uint64_t spaceman_checkpoint_traverse(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v8 = *(unsigned __int16 **)(a3 + 376);
  unint64_t v24 = 0LL;
  char v22 = 0LL;
  unint64_t v23 = 0LL;
  uint64_t v9 = spaceman_fq_tree_get(a1, a3, 0, 0LL, 0, (uint64_t *)&v23);
  if ((_DWORD)v9) {
    goto LABEL_49;
  }
  uint64_t v9 = spaceman_fq_tree_get(a1, a3, 1u, 0LL, 0, (uint64_t *)&v24);
  if ((_DWORD)v9) {
    goto LABEL_49;
  }
  uint64_t v9 = spaceman_fq_tree_get(a1, a3, 2u, 0LL, 0, (uint64_t *)&v22);
  if ((_DWORD)v9) {
    goto LABEL_49;
  }
  if ((_DWORD)a4 == 1)
  {
    uint64_t v14 = obj_checkpoint_start((unsigned int *)a3);
    uint64_t v9 = v14;
    if ((_DWORD)v14 || (timespec v11 = v23) == 0LL)
    {
      if ((_DWORD)v14 || (BOOL v12 = v24) == 0LL)
      {
        if (!(_DWORD)v14)
        {
          int v13 = v22;
          if (v22) {
            goto LABEL_42;
          }
        }

        goto LABEL_49;
      }

      goto LABEL_32;
    }

    unint64_t v15 = *(void *)(v23[49] + 32);
    if (v15 <= v8[112])
    {
      char v16 = 0;
    }

    else if (*(_BYTE *)(a3 + 968))
    {
      char v16 = 1;
    }

    else
    {
      log_err( "%s:%d: %s IP free queue tree is too large: %lld nodes (limit %d) xid %lld\n",  "spaceman_checkpoint_traverse",  3107,  (const char *)(*(void *)(a1 + 384) + 208LL),  v15,  v8[112],  *(void *)(a2 + 16));
      char v16 = 1;
      timespec v11 = v23;
    }

    *(_BYTE *)(a3 + 968) = v16;
    goto LABEL_28;
  }

  if ((_DWORD)a4 == 2)
  {
    uint64_t v10 = obj_checkpoint_known(a3);
    uint64_t v9 = v10;
    if ((_DWORD)v10 || (timespec v11 = v23) == 0LL)
    {
      if ((_DWORD)v10 || (BOOL v12 = v24) == 0LL)
      {
        if ((_DWORD)v10) {
          goto LABEL_49;
        }
        int v13 = v22;
        if (!v22) {
          goto LABEL_49;
        }
LABEL_48:
        uint64_t v9 = btree_checkpoint_traverse(a1, a2, (uint64_t)v13, a4);
        goto LABEL_49;
      }

      goto LABEL_38;
    }

    goto LABEL_28;
  }

  timespec v11 = v23;
  if (v23)
  {
LABEL_28:
    uint64_t v9 = btree_checkpoint_traverse(a1, a2, (uint64_t)v11, a4);
    goto LABEL_29;
  }

  uint64_t v9 = 0LL;
LABEL_29:
  if (!(_DWORD)v9)
  {
    BOOL v12 = v24;
    if (v24)
    {
      if ((_DWORD)a4 != 1)
      {
LABEL_38:
        uint64_t v9 = btree_checkpoint_traverse(a1, a2, (uint64_t)v12, a4);
        goto LABEL_39;
      }

LABEL_49:
  if (v23) {
    obj_release(v23);
  }
  if (v24) {
    obj_release(v24);
  }
  if (v22) {
    obj_release(v22);
  }
  return v9;
}

uint64_t spaceman_fq_tree_get(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, int a5, uint64_t *a6)
{
  if (a3 > 2) {
    return 22LL;
  }
  uint64_t v10 = *(void *)(a2 + 376);
  uint64_t v11 = a2 + 8LL * a3;
  BOOL v12 = *(char **)(v11 + 944);
  *a6 = (uint64_t)v12;
  if (v12) {
    goto LABEL_4;
  }
  uint64_t v13 = v10 + 40LL * a3;
  uint64_t v16 = *(void *)(v13 + 208);
  unint64_t v15 = (uint64_t *)(v13 + 208);
  uint64_t v14 = v16;
  if (v16)
  {
    uint64_t result = btree_get(a1, 0x80000000, v14, 0LL, 0, 0, 9, (uint64_t)spaceman_free_queue_key_cmp, 0LL, a6);
    if (!(_DWORD)result)
    {
LABEL_8:
      *(void *)(v11 + 944) = *a6;
      BOOL v12 = (char *)*a6;
LABEL_4:
      obj_retain(v12);
      return 0LL;
    }

    return result;
  }

  if (!a5)
  {
    uint64_t result = 0LL;
    goto LABEL_14;
  }

  uint64_t result = obj_modify(a2, 0LL, a4);
  if ((_DWORD)result)
  {
LABEL_14:
    *a6 = 0LL;
    return result;
  }

  uint64_t result = btree_create(a1, 0x80000000, 6, 9, 0, 0x10u, 8, (uint64_t)spaceman_free_queue_key_cmp, a4, a6);
  if (!(_DWORD)result)
  {
    uint64_t *v15 = obj_oid(*a6);
    obj_dirty(a2, a4, 0LL);
    goto LABEL_8;
  }

  return result;
}

uint64_t spaceman_iterate_free_extents_internal( uint64_t a1, unsigned int a2, uint64_t a3, uint64_t (*a4)(void *a1, unint64_t a2, int64_t a3), void *a5)
{
  uint64_t v8 = a1;
  uint64_t v249 = *MEMORY[0x1895F89C0];
  __int128 v243 = 0u;
  __int128 v244 = 0u;
  memset(v242, 0, sizeof(v242));
  uint64_t v241 = 0LL;
  uint64_t v240 = 0LL;
  memset(v248, 0, 128);
  uint64_t v9 = (pthread_mutex_t *)(a1 + 848);
  unint64_t v227 = 0LL;
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 848));
  if ((a2 & 0x30) == 0 && *(_BYTE *)(v8 + 641))
  {
    pthread_mutex_unlock(v9);
    return 16LL;
  }

  unint64_t v239 = 0LL;
  uint64_t v238 = 0LL;
  uint64_t v237 = 0LL;
  __int128 __base = 0u;
  __int128 v229 = 0u;
  __int128 v230 = 0u;
  __int128 v231 = 0u;
  __int128 v232 = 0u;
  __int128 v233 = 0u;
  __int128 v234 = 0u;
  __int128 v235 = 0u;
  uint64_t v236 = 0LL;
  ++*(_DWORD *)(v8 + 824);
  pthread_mutex_unlock(v9);
  uint64_t v10 = spaceman_get(v8, &v237);
  if ((_DWORD)v10) {
    goto LABEL_376;
  }
  int v191 = a2 & 0x30;
  uint64_t v11 = *(_DWORD **)&v237[5].__opaque[48];
  uint64_t v218 = a4;
  if ((a2 & 0x40) != 0)
  {
    unsigned int v12 = 4;
  }

  else if ((a2 & 0x20) != 0)
  {
    unsigned int v12 = 8;
  }

  else if (a4 == spaceman_trim_free_extent_callback)
  {
    unsigned int v12 = 1;
  }

  else
  {
    unsigned int v12 = v11[10];
  }

  uint64_t v14 = (char *)_apfs_malloc(16LL * v11[10]);
  unint64_t v15 = (char *)_apfs_malloc(8LL * v11[10]);
  uint64_t v16 = v15;
  uint64_t v10 = 12LL;
  if (!v14 || !v15) {
    goto LABEL_371;
  }
  if ((a2 & 2) == 0) {
    pthread_mutex_lock(v237 + 6);
  }
  uint64_t v187 = v9;
  if (a3)
  {
    if ((a2 & 0x6C) != 0x40)
    {
      uint64_t v10 = 22LL;
      goto LABEL_360;
    }

    uint64_t v17 = ((unint64_t)(a3 << __clz(__rbit64(*(unsigned int *)(*(void *)(v8 + 376) + 36LL)))) >> 62) & 1;
  }

  else
  {
    if ((a2 & 4) != 0)
    {
      LODWORD(v17) = 0;
      unsigned int v18 = 1;
      goto LABEL_24;
    }

    LODWORD(v17) = (a2 >> 3) & 1;
  }

  unsigned int v18 = 2;
LABEL_24:
  BOOL v180 = 0;
  char v188 = 0;
  char v190 = 0;
  uint64_t v19 = 0LL;
  uint64_t v225 = 0LL;
  char v20 = &v227;
  if ((a2 & 0x20) == 0) {
    char v20 = 0LL;
  }
  uint64_t v179 = (uint64_t *)v20;
  char v196 = a2 & 0xFE;
  char v197 = a2;
  uint64_t v220 = v17;
  uint64_t v175 = v18;
  uint64_t v182 = (uint64_t *)(v14 + 8);
  uint64_t v192 = v14 - 16;
  uint64_t v198 = (void *)v8;
  uint64_t v206 = v16;
  int v201 = v14;
  uint64_t v202 = v11;
  unsigned int v185 = v18;
  while (1)
  {
    if ((a2 & 1) != 0)
    {
      uint64_t v236 = 0LL;
      __int128 v234 = 0u;
      __int128 v235 = 0u;
      __int128 v232 = 0u;
      __int128 v233 = 0u;
      __int128 v230 = 0u;
      __int128 v231 = 0u;
      __int128 __base = 0u;
      __int128 v229 = 0u;
      LODWORD(v236) = spaceman_get_number_of_disabled_allocation_zones((uint64_t)v237, v220);
    }

    unint64_t v227 = ((uint64_t)0xBFFFFFFFFFFFFFFFLL >> __clz(__rbit64(*(unsigned int *)(*(void *)(v8 + 376) + 36LL)))) & a3;
    int v181 = spaceman_free_extent_cache_bitmap_scan_begin(*(void *)&v237[24].__opaque[8 * v220 + 24], v179);
    unint64_t v21 = v227;
    unint64_t v22 = v11[9];
    if ((a2 & 0x40) == 0)
    {
      unint64_t v21 = v227 / v22 * v22;
      unint64_t v227 = v21;
    }

    unint64_t v176 = v21;
    unint64_t v23 = &v11[12 * v220];
    unint64_t v24 = v23 + 16;
    unint64_t v183 = v23 + 16;
    int v184 = v23 + 17;
    int v186 = -1;
    unint64_t v25 = v21 / v22 / v11[10];
    unsigned int v26 = v185;
    uint64_t v27 = v19;
LABEL_32:
    unsigned int v193 = v25;
    uint64_t v19 = v27;
    if ((a2 & 1) != 0)
    {
      uint64_t v160 = v225;
      if ((_DWORD)v236)
      {
        qsort(&__base, 8uLL, 0x10uLL, (int (__cdecl *)(const void *, const void *))spaceman_candidate_free_chunk_cmp);
        if ((_DWORD)v236)
        {
          unsigned int v26 = v185;
          LODWORD(v25) = v193;
          unint64_t v24 = v183;
          if (DWORD2(v235))
          {
            unsigned int v161 = 6;
            unint64_t v163 = (unint64_t)&v235;
            uint64_t v162 = (_DWORD *)&v235 + 2;
            while (1)
            {
              LOBYTE(v247) = 0;
              int v164 = spaceman_evaluate_chunk_for_disabled_allocation_zones(v237, v220, *(void *)v163, &v247);
              if (v164) {
                log_err( "%s:%d: %s failed to evaluate chunk %llu (average free ext len %u) for disabled allocation zones, error %d\n",  "spaceman_iterate_free_extents_internal",  3914,  (const char *)(*(void *)(v8 + 384) + 208LL),  *(void *)v163,  *v162,  v164);
              }
              int v165 = v236;
              if ((_BYTE)v247)
              {
                int v165 = v236 - 1;
                LODWORD(v236) = v236 - 1;
              }

              unsigned int v26 = v185;
              unint64_t v24 = v183;
              uint64_t v160 = 0LL;
              LODWORD(v25) = v193;
              if (!v165 || v161 == -1) {
                break;
              }
              unint64_t v163 = (unint64_t)(&__base + v161);
              uint64_t v162 = (_DWORD *)(v163 | 8);
              --v161;
              if (!*(_DWORD *)(v163 + 8))
              {
                uint64_t v160 = 0LL;
                break;
              }
            }
          }
        }

        else
        {
          unsigned int v26 = v185;
          LODWORD(v25) = v193;
          unint64_t v24 = v183;
        }
      }
    }

    else
    {
      uint64_t v160 = v225;
    }

    if (v181)
    {
      if (v176) {
        char v166 = 0;
      }
      else {
        char v166 = (_DWORD)v25 == *v24;
      }
      spaceman_free_extent_cache_bitmap_scan_finished(*(void *)&v237[24].__opaque[8 * v220 + 24], v227, v166);
      unsigned int v26 = v185;
    }

    uint64_t v225 = v160;
    a3 = 0LL;
    ++v220;
    uint64_t v9 = v187;
    if (v220 == v175)
    {
      char v173 = 0;
      unsigned int v167 = v26;
      goto LABEL_349;
    }
  }

  unsigned int v189 = v12;
  unint64_t v28 = v227;
  unint64_t v31 = v11 + 9;
  unint64_t v30 = v11[9];
  unsigned int v29 = v31[1];
  if (!v191)
  {
    int v32 = v25;
    pthread_mutex_lock(v9);
    if (*(_BYTE *)(v8 + 641))
    {
      log_info( "%s:%d: %s nx_resize detected while processing dev=%d cib=%u out of %u cibs\n",  "spaceman_iterate_free_extents_internal",  3608,  (const char *)(*(void *)(v8 + 384) + 208LL),  v220,  v32,  *v183);
      pthread_mutex_unlock(v9);
      char v173 = 0;
      uint64_t v168 = 16LL;
      uint64_t v11 = v202;
LABEL_380:
      char v169 = v181;
      goto LABEL_344;
    }

    pthread_mutex_unlock(v9);
    LODWORD(v25) = v32;
  }

  unint64_t v223 = v30;
  unint64_t v33 = v28;
  uint64_t v34 = v27;
  uint64_t v35 = v25;
  unsigned int v36 = v25;
  pthread_mutex_lock(&v237[v220 + 10]);
  int v37 = *v184;
  BOOL v221 = *v184 == 0;
  if (*v184)
  {
    unsigned int v38 = v36 / v202[11];
    if (v38 == v186 && v34)
    {
      obj_lock(v241, 1);
      unsigned int v38 = v186;
      unsigned int v39 = v35;
      uint64_t v27 = v34;
    }

    else
    {
      uint64_t v41 = *(void *)(*(void *)&v237[13].__opaque[8 * v220 + 48] + 8LL * v38);
      unsigned int v39 = v35;
      if (v241)
      {
        obj_release(v241);
        uint64_t v241 = 0LL;
      }

      uint64_t v238 = v202;
      unint64_t v239 = __PAIR64__(v38, v220);
      uint64_t v42 = obj_get(*(void *)(v8 + 392), 1073741892LL, v41, &sm_cab_desc, &v238, 0LL, 0LL, 0LL, &v241);
      if ((_DWORD)v42)
      {
        uint64_t v225 = v42;
        log_err( "%s:%d: %s error getting cab %d @ %lld: %d\n",  "spaceman_iterate_free_extents_internal",  3635,  (const char *)(*(void *)(v8 + 384) + 208LL),  v38,  v41,  v42);
        char v173 = 0;
        if (v181)
        {
          char v190 = 1;
          uint64_t v14 = v201;
          uint64_t v11 = v202;
          goto LABEL_347;
        }

        uint64_t v14 = v201;
        uint64_t v11 = v202;
        unsigned int v167 = v220;
        goto LABEL_350;
      }

      uint64_t v225 = 0LL;
      uint64_t v27 = *(void *)(v241 + 56);
      int v186 = v38;
    }

    pthread_mutex_unlock(&v237[v220 + 10]);
    char v190 = 0;
    uint64_t v40 = (uint64_t *)(v27 + 8LL * (v193 - v202[11] * v38) + 40);
    char v188 = 1;
  }

  else
  {
    uint64_t v40 = (uint64_t *)(*(void *)&v237[13].__opaque[8 * v220 + 48] + 8 * v35);
    char v190 = 1;
    unsigned int v39 = v35;
    uint64_t v27 = v34;
  }

  unsigned int v194 = v39;
  if (v240)
  {
    obj_lock(v240, 1);
    goto LABEL_50;
  }

  uint64_t v43 = *v40;
  uint64_t v238 = v202;
  unint64_t v239 = __PAIR64__(v193, v220);
  uint64_t v44 = obj_get(*(void *)(v8 + 392), 1073741892LL, v43, &sm_cib_desc, &v238, 0LL, 0LL, 0LL, &v240);
  if ((_DWORD)v44)
  {
    uint64_t v174 = v44;
    log_err( "%s:%d: %s error getting cib %d @ %lld: %d\n",  "spaceman_iterate_free_extents_internal",  3662,  (const char *)(*(void *)(v8 + 384) + 208LL),  v193,  v43,  v44);
    char v173 = 0;
    uint64_t v168 = v174;
    char v190 = v221;
    uint64_t v14 = v201;
    uint64_t v11 = v202;
    uint64_t v16 = v206;
    goto LABEL_380;
  }

  uint64_t v225 = 0LL;
  uint64_t v16 = v206;
LABEL_50:
  uint64_t v210 = *(void *)(v240 + 56);
  uint64_t v14 = v201;
  if (v218 == spaceman_trim_free_extent_callback)
  {
    trim_time_tracking_start(v8, (uint64_t)v242, 125, 0);
    if (v37) {
      goto LABEL_52;
    }
  }

  else if (v37)
  {
    goto LABEL_52;
  }

  pthread_mutex_unlock(&v237[v220 + 10]);
  char v190 = 0;
LABEL_52:
  if (v241)
  {
    obj_unlock(v241, 1);
    char v188 = 0;
  }

  unsigned int v45 = v33 % v223;
  unint64_t v46 = v33 / v223 - v29 * (unint64_t)v193;
  uint64_t v11 = v202;
  bzero(v16, 8LL * v202[10]);
  unsigned int v47 = *(_DWORD *)(v210 + 36) - v46;
  unsigned int v12 = v189;
  if (v189 >= v47) {
    size_t v48 = v47;
  }
  else {
    size_t v48 = v189;
  }
  size_t __nel = v48;
  int v199 = v46;
  if ((_DWORD)v48)
  {
    uint64_t v49 = 0LL;
    int v50 = v202[9];
    uint64_t v51 = 16LL * v48;
    do
    {
      uint64_t v52 = &v201[v49];
      *(_DWORD *)uint64_t v52 = v46;
      *((void *)v52 + 1) = *(void *)(v210 + 32LL * v46 + 64);
      if (v49) {
        unsigned int v53 = 0;
      }
      else {
        unsigned int v53 = v45;
      }
      v227 += v50 - v53;
      LODWORD(v46) = v46 + 1;
      v49 += 16LL;
    }

    while (v51 != v49);
    if ((a2 & 0x40) != 0) {
      goto LABEL_65;
    }
  }

  else if ((a2 & 0x40) != 0)
  {
    goto LABEL_65;
  }

  qsort(v201, __nel, 0x10uLL, (int (__cdecl *)(const void *, const void *))ipaddr_cmp);
LABEL_65:
  size_t v54 = __nel;
  if (!(_DWORD)__nel)
  {
    unsigned int v213 = 0;
    uint64_t v9 = v187;
    goto LABEL_296;
  }

  int v177 = v46;
  uint64_t v178 = v27;
  uint64_t v55 = 0LL;
  int v56 = 0;
  int v57 = v182;
  while (1)
  {
    uint64_t v58 = v55;
    uint64_t v59 = *v57;
    if (*v57) {
      break;
    }
LABEL_76:
    uint64_t v55 = v58 + 1;
    v57 += 2;
    if (v54 == v58 + 1)
    {
LABEL_77:
      uint64_t v63 = 0LL;
      int v64 = 0;
      unsigned int v213 = 0;
      unsigned int v195 = v58 + 1;
      uint64_t v11 = v202;
      do
      {
        uint64_t v204 = v63;
        __int128 v65 = (unsigned int *)&v14[16 * v63];
        unsigned int v200 = v11[10];
        uint64_t v66 = *v65;
        __int128 v67 = &v248[v64];
        uint64_t v208 = v66;
        unsigned int v209 = v67;
        uint64_t v207 = *((void *)v65 + 1);
        int v205 = v64;
        if (v207)
        {
          if (*v67) {
            uint64_t v68 = obj_async_wait(*v67);
          }
          else {
            uint64_t v68 = obj_get(*(void *)(v8 + 392), 1073741888LL, v207, &sm_bm_desc, 0LL, 0LL, 0LL, 0LL, &v248[v64]);
          }
          uint64_t v168 = v68;
          if ((_DWORD)v68)
          {
            log_err( "%s:%d: %s error getting cib %d bitmap %d @ %lld: %d\n",  "spaceman_iterate_free_extents_internal",  3744,  (const char *)(*(void *)(v8 + 384) + 208LL),  v193,  *v65,  v207,  v68);
            if (*v209)
            {
              obj_release(*v209);
              *unsigned int v209 = 0LL;
            }

            goto LABEL_343;
          }

          uint64_t v66 = v208;
          int v219 = *(void **)(*v209 + 56);
          unsigned int v69 = *v65;
        }

        else
        {
          int v219 = 0LL;
          unsigned int v69 = v66;
        }

        if ((a2 & 0x40) != 0 && v69)
        {
          *(void *)&v16[8 * v69] = *(void *)&v16[8 * v69 - 8];
          *(void *)&v16[8 * *v65 - 8] = 0LL;
          unsigned int v69 = *v65;
        }

        unint64_t v70 = 0LL;
        int v215 = &v16[8 * v69];
        int v71 = *(_DWORD *)(v210 + 32 * v66 + 56);
        uint64_t v246 = 0LL;
        uint64_t v203 = *(void *)&v237[23].__opaque[8 * v220 + 8];
        char v72 = v196;
        if (v203) {
          char v72 = a2;
        }
        char v224 = v72;
        if ((v72 & 0x40) != 0) {
          unint64_t v70 = *(void *)v215;
        }
        uint64_t v73 = *(void *)&v71 & 0xFFFFFLL;
        uint64_t v247 = 0LL;
        BOOL v222 = v237;
        if ((v71 & 0xFFFFFu) <= v45)
        {
          unsigned int v75 = 0;
          LODWORD(v74) = 0;
          uint64_t v226 = 0LL;
          unint64_t v78 = v219;
LABEL_151:
          uint64_t v14 = v201;
          uint64_t v11 = v202;
          if ((v224 & 0x40) != 0) {
            goto LABEL_152;
          }
          goto LABEL_153;
        }

        uint64_t v226 = 0LL;
        uint64_t v74 = 0LL;
        unsigned int v75 = 0;
        uint64_t v76 = v45;
        char v216 = (void *)(v210 + 32 * v66 + 48);
        uint64_t v217 = (unint64_t *)&v237[24].__opaque[8 * v220 + 24];
        unsigned int v77 = 1;
        unint64_t v78 = v219;
        while (1)
        {
          if (!v78)
          {
            uint64_t v246 = v73;
            uint64_t v247 = v76;
            uint64_t v79 = v73;
            uint64_t v80 = v76;
            goto LABEL_101;
          }

          if (bitmap_range_find_first(1, (uint64_t)v78, v247, v73 - v247, &v246))
          {
            uint64_t v79 = v246;
          }

          else
          {
            uint64_t v246 = v73;
            uint64_t v79 = v73;
          }

          uint64_t v80 = v247;
LABEL_101:
          uint64_t v76 = v79;
          uint64_t v81 = v79 - v80;
          if (v79 - v80 > v74) {
            uint64_t v74 = v79 - v80;
          }
          if ((v224 & 0x40) != 0)
          {
            if (v70 && v80)
            {
              if (v220 == 1)
              {
                char v82 = __clz(__rbit64(*(unsigned int *)(*(void *)(*(void *)(v222->__sig + 392) + 376LL) + 36LL)));
                unint64_t v83 = (0x4000000000000000uLL >> v82) | (*v216 - v70);
              }

              else
              {
                unint64_t v83 = *v216 - v70;
                char v82 = __clz(__rbit64(*(unsigned int *)(*(void *)(*(void *)(v222->__sig + 392) + 376LL) + 36LL)));
              }

              spaceman_free_extent_cache_insert(*v217, 0, ((uint64_t)0xBFFFFFFFFFFFFFFFLL >> v82) & v83, v70);
              if (v218)
              {
                unsigned int v86 = v218(a5, v83, v70);
                if (BYTE14(v244))
                {
                  ++*((void *)&v243 + 1);
                  *(void *)&__int128 v244 = v244 + v70;
                }
              }

              else
              {
                unsigned int v86 = 0;
              }

              unint64_t v78 = v219;
              unint64_t v70 = 0LL;
              if ((_DWORD)v226) {
                BOOL v87 = 1;
              }
              else {
                BOOL v87 = v86 == 0;
              }
              if (v87) {
                uint64_t v88 = v226;
              }
              else {
                uint64_t v88 = v86;
              }
              uint64_t v226 = v88;
              uint64_t v79 = v246;
            }

            if (v79 != v73)
            {
              if (v220 == 1)
              {
                char v84 = __clz(__rbit64(*(unsigned int *)(*(void *)(*(void *)(v222->__sig + 392) + 376LL) + 36LL)));
                unint64_t v85 = (0x4000000000000000uLL >> v84) | (v80 - v70 + *v216);
              }

              else
              {
                unint64_t v85 = v80 - v70 + *v216;
                char v84 = __clz(__rbit64(*(unsigned int *)(*(void *)(*(void *)(v222->__sig + 392) + 376LL) + 36LL)));
              }

              unint64_t v89 = v70 + v81;
LABEL_135:
              spaceman_free_extent_cache_insert(*v217, 0, ((uint64_t)0xBFFFFFFFFFFFFFFFLL >> v84) & v85, v89);
              if (v218)
              {
                unsigned int v90 = v218(a5, v85, v89);
                int v91 = BYTE14(v244);
                if (BYTE14(v244))
                {
                  ++*((void *)&v243 + 1);
                  *(void *)&__int128 v244 = v244 + v89;
                  int v91 = 1;
                }
              }

              else
              {
                unsigned int v90 = 0;
                int v91 = BYTE14(v244);
              }

              unint64_t v78 = v219;
              unint64_t v70 = 0LL;
              if ((_DWORD)v226) {
                BOOL v92 = 1;
              }
              else {
                BOOL v92 = v90 == 0;
              }
              if (v92) {
                uint64_t v93 = v226;
              }
              else {
                uint64_t v93 = v90;
              }
              uint64_t v226 = v93;
              if (v91 && 100 * (v77 / 0x64) - 1 == v75)
              {
                trim_time_tracking_check(*(void *)(v222->__sig + 392), (uint64_t)v242);
                unint64_t v70 = 0LL;
              }

              goto LABEL_148;
            }

            v70 += v81;
          }

          else if (v80)
          {
            if (v79 != v73)
            {
              if (v220 == 1)
              {
                char v84 = __clz(__rbit64(*(unsigned int *)(*(void *)(*(void *)(v222->__sig + 392) + 376LL) + 36LL)));
                unint64_t v85 = (0x4000000000000000uLL >> v84) | (v80 - v70 + *v216);
              }

              else
              {
                unint64_t v85 = v80 - v70 + *v216;
                char v84 = __clz(__rbit64(*(unsigned int *)(*(void *)(*(void *)(v222->__sig + 392) + 376LL) + 36LL)));
              }

              unint64_t v89 = v81 + v70;
              goto LABEL_135;
            }

            *((_DWORD *)v215 + 1) = v81;
          }

          else
          {
            *(_DWORD *)int v215 = v81;
          }

LABEL_148:
          ++v77;
          ++v75;
          if (v76 >= v73) {
            goto LABEL_151;
          }
        }

        uint64_t v11 = v202;
        if ((v224 & 0x40) == 0 || !v70 || v75) {
          goto LABEL_151;
        }
        if (v220 == 1)
        {
          char v101 = __clz(__rbit64(*(unsigned int *)(*(void *)(*(void *)(v222->__sig + 392) + 376LL) + 36LL)));
          unint64_t v102 = (0x4000000000000000uLL >> v101) | (*v216 - v70);
        }

        else
        {
          unint64_t v102 = *v216 - v70;
          char v101 = __clz(__rbit64(*(unsigned int *)(*(void *)(*(void *)(v222->__sig + 392) + 376LL) + 36LL)));
        }

        uint64_t v14 = v201;
        spaceman_free_extent_cache_insert(*v217, 0, ((uint64_t)0xBFFFFFFFFFFFFFFFLL >> v101) & v102, v70);
        if (v218)
        {
          unsigned int v119 = v218(a5, v102, v70);
          if (BYTE14(v244))
          {
            ++*((void *)&v243 + 1);
            *(void *)&__int128 v244 = v244 + v70;
          }
        }

        else
        {
          unsigned int v119 = 0;
        }

        unint64_t v78 = v219;
        unsigned int v75 = 0;
        unint64_t v70 = 0LL;
        if ((_DWORD)v226) {
          BOOL v132 = 1;
        }
        else {
          BOOL v132 = v119 == 0;
        }
        if (v132) {
          uint64_t v133 = v226;
        }
        else {
          uint64_t v133 = v119;
        }
        uint64_t v226 = v133;
LABEL_152:
        *(void *)int v215 = v70;
LABEL_153:
        uint64_t v8 = (uint64_t)v198;
        if ((v224 & 1) == 0) {
          goto LABEL_196;
        }
        unint64_t v94 = v208 + v200 * (unint64_t)v194;
        uint64_t v95 = v203;
        int v96 = *(_DWORD *)(v203 + 4 * v94);
        int v97 = v96 & 0xFF000000 | v74 & 0xFFFFFF;
        *(_DWORD *)(v203 + 4 * v94) = v97;
        if (v78)
        {
          int v98 = v96 & 0xFE000000 | v74 & 0xFFFFFF;
          uint64_t v95 = v203;
          int v99 = v97 | 0x1000000;
          if ((*v78 & 1LL) != 0) {
            int v99 = v98;
          }
          *(_DWORD *)(v203 + 4 * v94) = v99;
          if (v73 < 0x40 || (v78[(v73 >> 6) - 1] & 0x8000000000000000LL) != 0)
          {
            unsigned int v100 = v99 & 0xFDFFFFFF;
            goto LABEL_167;
          }
        }

        else
        {
          int v99 = v97 | 0x1000000;
        }

        unsigned int v100 = v99 | 0x2000000;
LABEL_167:
        *(_DWORD *)(v95 + 4 * v94) = v100;
        if (!(_DWORD)v236) {
          goto LABEL_196;
        }
        unsigned int v103 = *(_DWORD *)(v210 + 32 * v208 + 60) & 0xFFFFF;
        if (v103 == *(_DWORD *)(*(void *)&v222[5].__opaque[48] + 36LL))
        {
          char v245 = 0;
          int v104 = spaceman_evaluate_chunk_for_disabled_allocation_zones(v222, v220, v94, &v245);
          if (v104)
          {
            uint64_t v105 = *(void *)v222->__opaque;
            if (v105) {
              __int128 v106 = (const char *)(v105 + 3992);
            }
            else {
              __int128 v106 = (const char *)(*(void *)(*(void *)(v222->__sig + 392) + 384LL) + 208LL);
            }
            log_err( "%s:%d: %s failed to evaluate free chunk %llu for disabled allocation zone, error %d\n",  "spaceman_iterate_process_bitmap_block",  3390,  v106,  v94,  v104);
          }

          if (v245) {
            LODWORD(v236) = v236 - 1;
          }
          goto LABEL_196;
        }

        if (!v75 || v103 < 4) {
          goto LABEL_196;
        }
        unsigned int v107 = v103 / v75;
        unint64_t v108 = (unint64_t)(&__base + HIDWORD(v236));
        int v109 = v100 & 0xC000000;
        int v110 = v100 & 0xFFFFFC;
        BOOL v111 = v107 > *(_DWORD *)(v108 + 8) && v109 == 0;
        if (!v111 || v110 == 0) {
          goto LABEL_196;
        }
        int v113 = 0;
        *(_DWORD *)(v108 | 8) = v107;
        *(void *)unint64_t v108 = v94;
        uint64_t v114 = -7LL;
        unsigned int v115 = DWORD2(__base);
        uint64_t v116 = (unsigned int *)&v229 + 2;
        while (2)
        {
          unsigned int v118 = *v116;
          v116 += 4;
          unsigned int v117 = v118;
          if (v118 >= v115)
          {
LABEL_185:
            BOOL v127 = __CFADD__(v114++, 1LL);
            if (v127) {
              goto LABEL_235;
            }
            continue;
          }

          break;
        }

        if (v117)
        {
          int v113 = v114 + 8;
          unsigned int v115 = v117;
          goto LABEL_185;
        }

        int v113 = v114 + 8;
LABEL_235:
        HIDWORD(v236) = v113;
LABEL_196:
        unsigned int v120 = v213;
        uint64_t v168 = v226;
        if (v213) {
          BOOL v121 = 1;
        }
        else {
          BOOL v121 = (_DWORD)v226 == 0;
        }
        if (!v121) {
          unsigned int v120 = v226;
        }
        LOBYTE(a2) = v197;
        if ((v197 & 0x40) != 0 && v120) {
          goto LABEL_342;
        }
        unsigned int v213 = v120;
        uint64_t v16 = v206;
        if (!v207)
        {
          size_t v122 = __nel;
          uint64_t v130 = v204;
          int v64 = v205;
          goto LABEL_222;
        }

        obj_release(*v209);
        *unsigned int v209 = 0LL;
        size_t v122 = __nel;
        uint64_t v123 = 1LL;
        int v124 = &v192[16 * v195];
        do
        {
          size_t v125 = v195 + v123;
          uint64_t v126 = *((void *)v124 + 3);
          v124 += 16;
          ++v123;
          if (v126) {
            BOOL v127 = 1;
          }
          else {
            BOOL v127 = v125 >= __nel;
          }
        }

        while (!v127);
        unsigned int v195 = v195 + v123 - 1;
        if (!v126)
        {
          uint64_t v168 = v226;
          goto LABEL_220;
        }

        uint64_t v128 = obj_get(v198[49], 1073742016LL, v126, &sm_bm_desc, 0LL, 0LL, 0LL, 0LL, v209);
        if ((_DWORD)v128 == 45 || (_DWORD)v128 == 16)
        {
          uint64_t v168 = 0LL;
          *unsigned int v209 = 0LL;
          size_t v122 = __nel;
LABEL_220:
          uint64_t v130 = v204;
          int v131 = v205;
          goto LABEL_221;
        }

        uint64_t v168 = v128;
        int v131 = v205;
        if ((_DWORD)v128)
        {
          log_err( "%s:%d: %s error getting cib %d bitmap %d @ %lld: %d\n",  "spaceman_iterate_free_extents_internal",  3793,  (const char *)(v198[48] + 208LL),  v193,  *(_DWORD *)v124,  v126,  v128);
          goto LABEL_343;
        }

        size_t v122 = __nel;
        uint64_t v130 = v204;
LABEL_221:
        int v64 = (v131 + 1) & 0xF;
LABEL_222:
        unsigned int v45 = 0;
        uint64_t v63 = v130 + 1;
      }

      while (v63 != v122);
      uint64_t v225 = v168;
      int v134 = 0;
      unint64_t v135 = 0LL;
      unint64_t v136 = 0LL;
      while (1)
      {
        uint64_t v137 = (v134 + v199);
        unsigned __int16 v138 = &v206[8 * v137];
        if ((v197 & 0x40) != 0)
        {
          unint64_t v139 = *(void *)v138;
          if (*(void *)v138)
          {
            if (v220 == 1) {
              unint64_t v136 = (*(void *)(v210 + 32 * v137 + 48) - v139 + (*(_DWORD *)(v210 + 32 * v137 + 56) & 0xFFFFF)) | (0x4000000000000000uLL >> __clz(__rbit64(*(unsigned int *)(v198[47] + 36LL))));
            }
            else {
              unint64_t v136 = *(void *)(v210 + 32 * v137 + 48) - v139 + (*(_DWORD *)(v210 + 32 * v137 + 56) & 0xFFFFF);
            }
            unint64_t v135 = *(void *)v138;
          }

          goto LABEL_283;
        }

        unint64_t v140 = *(unsigned int *)v138;
        if ((_DWORD)v140) {
          break;
        }
LABEL_265:
        unint64_t v145 = *((unsigned int *)v138 + 1);
        if ((_DWORD)v145)
        {
          uint64_t v146 = v210 + 32 * v137;
          unsigned int v147 = (*(_DWORD *)(v146 + 56) & 0xFFFFF) - v145;
          if (v220 == 1)
          {
            unint64_t v148 = (0x4000000000000000uLL >> __clz(__rbit64(*(unsigned int *)(v198[47] + 36LL)))) | (*(void *)(v146 + 48) + v147);
            if (v135)
            {
LABEL_268:
              if (v135 + v136 == v148)
              {
                uint64_t v149 = 0LL;
                v145 += v135;
                unint64_t v148 = v136;
              }

              else
              {
                size_t v150 = v122;
                spaceman_free_extent_cache_insert( *(void *)&v237[24].__opaque[8 * v220 + 24],  0,  ((uint64_t)0xBFFFFFFFFFFFFFFFLL >> __clz(__rbit64(*(unsigned int *)(v198[47] + 36LL)))) & v136,  v135);
                if (v218)
                {
                  uint64_t v149 = v218(a5, v136, v135);
                  if (BYTE14(v244))
                  {
                    ++*((void *)&v243 + 1);
                    *(void *)&__int128 v244 = v244 + v135;
                  }
                }

                else
                {
                  uint64_t v149 = 0LL;
                }

                size_t v122 = v150;
              }

              goto LABEL_277;
            }
          }

          else
          {
            unint64_t v148 = *(void *)(v146 + 48) + v147;
            if (v135) {
              goto LABEL_268;
            }
          }

          uint64_t v149 = 0LL;
LABEL_277:
          unsigned int v151 = v213;
          if (v213) {
            BOOL v152 = 1;
          }
          else {
            BOOL v152 = (_DWORD)v149 == 0;
          }
          uint64_t v225 = v149;
          if (!v152) {
            unsigned int v151 = v149;
          }
          unsigned int v213 = v151;
          unint64_t v136 = v148;
          unint64_t v135 = v145;
        }

LABEL_283:
        ++v134;
        if (!--v122)
        {
          unsigned int v12 = v189;
          if (v135)
          {
            spaceman_free_extent_cache_insert( *(void *)&v237[24].__opaque[8 * v220 + 24],  0,  ((uint64_t)0xBFFFFFFFFFFFFFFFLL >> __clz(__rbit64(*(unsigned int *)(v198[47] + 36LL)))) & v136,  v135);
            uint64_t v9 = v187;
            uint64_t v11 = v202;
            if (v218)
            {
              uint64_t v153 = v218(a5, v136, v135);
              if (BYTE14(v244))
              {
                ++*((void *)&v243 + 1);
                *(void *)&__int128 v244 = v244 + v135;
              }
            }

            else
            {
              uint64_t v153 = 0LL;
            }

            uint64_t v27 = v178;
            LODWORD(v46) = v177;
            unsigned int v154 = v213;
            if (v213) {
              BOOL v155 = 1;
            }
            else {
              BOOL v155 = (_DWORD)v153 == 0;
            }
            uint64_t v225 = v153;
            if (!v155) {
              unsigned int v154 = v153;
            }
            unsigned int v213 = v154;
          }

          else
          {
            uint64_t v9 = v187;
            uint64_t v11 = v202;
            uint64_t v27 = v178;
            LODWORD(v46) = v177;
          }

LABEL_296:
          if (v218 == spaceman_trim_free_extent_callback) {
            spaceman_trim_free_extent_flush(v8);
          }
          obj_unlock(v240, 1);
          if (BYTE14(v244))
          {
            if (trim_time_tracking_end(v8, (uint64_t)v242))
            {
              if (v12 <= 1) {
                unsigned int v12 = 1;
              }
              else {
                v12 >>= 1;
              }
              BOOL v156 = 1;
            }

            else
            {
              unsigned int v157 = v11[10];
              int v158 = 4 * v12;
              if (v157 < 4 * v12) {
                int v158 = v11[10];
              }
              if (v157 >= v12 + 1) {
                unsigned int v157 = v12 + 1;
              }
              if (v180) {
                unsigned int v12 = v157;
              }
              else {
                unsigned int v12 = v158;
              }
              BOOL v156 = v180;
            }

            BOOL v180 = v156;
          }

          if (*(_DWORD *)(v210 + 36) == (_DWORD)v46)
          {
            obj_release(v240);
            uint64_t v240 = 0LL;
            unsigned int v26 = v185;
            unsigned int v159 = v193;
          }

          else
          {
            unsigned int v159 = v193 - 1;
            unsigned int v26 = v185;
          }

          unint64_t v24 = v183;
          LODWORD(v25) = v159 + 1;
          if (v213)
          {
            char v173 = 0;
            uint64_t v168 = v213;
            goto LABEL_380;
          }

          goto LABEL_32;
        }
      }

      if (v220 == 1)
      {
        unint64_t v141 = (0x4000000000000000uLL >> __clz(__rbit64(*(unsigned int *)(v198[47] + 36LL)))) | *(void *)(v210 + 32 * v137 + 48);
        if (v135) {
          goto LABEL_248;
        }
      }

      else
      {
        unint64_t v141 = *(void *)(v210 + 32 * v137 + 48);
        if (v135)
        {
LABEL_248:
          if (v135 + v136 == v141)
          {
            uint64_t v142 = 0LL;
            v140 += v135;
            unint64_t v141 = v136;
          }

          else
          {
            size_t __nela = v122;
            spaceman_free_extent_cache_insert( *(void *)&v237[24].__opaque[8 * v220 + 24],  0,  ((uint64_t)0xBFFFFFFFFFFFFFFFLL >> __clz(__rbit64(*(unsigned int *)(v198[47] + 36LL)))) & v136,  v135);
            if (v218)
            {
              uint64_t v142 = v218(a5, v136, v135);
              if (BYTE14(v244))
              {
                ++*((void *)&v243 + 1);
                *(void *)&__int128 v244 = v244 + v135;
              }
            }

            else
            {
              uint64_t v142 = 0LL;
            }

            size_t v122 = __nela;
          }

          goto LABEL_259;
        }
      }

      uint64_t v142 = 0LL;
LABEL_259:
      unsigned int v143 = v213;
      if (v213) {
        BOOL v144 = 1;
      }
      else {
        BOOL v144 = (_DWORD)v142 == 0;
      }
      uint64_t v225 = v142;
      if (!v144) {
        unsigned int v143 = v142;
      }
      unsigned int v213 = v143;
      unint64_t v136 = v141;
      unint64_t v135 = v140;
      uint64_t v14 = v201;
      goto LABEL_265;
    }
  }

  uint64_t v60 = obj_get(*(void *)(v8 + 392), 1073742016LL, v59, &sm_bm_desc, 0LL, 0LL, 0LL, 0LL, &v248[v56]);
  size_t v54 = __nel;
  if (!(_DWORD)v60)
  {
LABEL_75:
    ++v56;
    uint64_t v16 = v206;
    if (v56 == 16) {
      goto LABEL_77;
    }
    goto LABEL_76;
  }

  uint64_t v61 = v60;
  if ((_DWORD)v60 == 45 || (_DWORD)v60 == 16)
  {
    v248[v56] = 0LL;
    goto LABEL_75;
  }

  log_err( "%s:%d: %s error getting cib %d bitmap %d @ %lld: %d\n",  "spaceman_iterate_free_extents_internal",  3720,  (const char *)(*(void *)(v8 + 384) + 208LL),  v193,  *((_DWORD *)v57 - 2),  v59,  v60);
  uint64_t v168 = v61;
  uint64_t v11 = v202;
LABEL_342:
  uint64_t v16 = v206;
LABEL_343:
  char v169 = v181;
  char v173 = 1;
LABEL_344:
  uint64_t v225 = v168;
  if (!(_DWORD)v168) {
    char v169 = 0;
  }
  if ((v169 & 1) != 0)
  {
LABEL_347:
    unsigned int v167 = v220;
    spaceman_free_extent_cache_bitmap_scan_finished(*(void *)&v237[24].__opaque[8 * v220 + 24], v227, 0);
  }

  else
  {
    unsigned int v167 = v220;
  }

LABEL_349:
  if ((v190 & 1) != 0) {
LABEL_350:
  }
    pthread_mutex_unlock(&v237[(unint64_t)v167 + 10]);
  if (v241 && (v188 & 1) != 0) {
    obj_unlock(v241, 1);
  }
  char v170 = v173 ^ 1;
  if (!v240) {
    char v170 = 1;
  }
  uint64_t v10 = v225;
  if ((v170 & 1) == 0)
  {
    trim_time_tracking_end(v8, (uint64_t)v242);
    if (v218 == spaceman_trim_free_extent_callback) {
      spaceman_trim_free_extent_flush(v8);
    }
    obj_unlock(v240, 1);
  }

LABEL_360:
  if (v241) {
    obj_release(v241);
  }
  if (v240) {
    obj_release(v240);
  }
  for (uint64_t i = 0LL; i != 16; ++i)
  {
    uint64_t v172 = v248[i];
    if (v172)
    {
      obj_async_wait(v172);
      obj_release(v248[i]);
    }
  }

  if ((a2 & 2) == 0) {
    pthread_mutex_unlock(v237 + 6);
  }
  uint64_t v9 = v187;
LABEL_371:
  if (v16) {
    _apfs_free(v16, 8LL * v11[10]);
  }
  if (v14) {
    _apfs_free(v14, 16LL * v11[10]);
  }
  obj_release(v237);
LABEL_376:
  pthread_mutex_lock(v9);
  --*(_DWORD *)(v8 + 824);
  pthread_mutex_unlock(v9);
  return v10;
}

uint64_t spaceman_trim_free_extent_callback(void *a1, unint64_t a2, int64_t a3)
{
  uint64_t v14 = 0LL;
  if (spaceman_get(a1, &v14) || (int v13 = spaceman_extent_check(a1, v14, a2, a3), obj_release(v14), !v13))
  {
    a1[212] += a3;
    if (a3 < 2)
    {
      uint64_t v8 = 0LL;
    }

    else
    {
      uint64_t v6 = 0LL;
      unint64_t v7 = a3;
      do
      {
        uint64_t v8 = v6 + 1;
        if (v7 < 4) {
          break;
        }
        v7 >>= 2;
      }

      while (v6++ < 4);
    }

    ++a1[v8 + 213];
    __tp.__darwin_time_t tv_sec = 0LL;
    __tp.int tv_nsec = 0LL;
    clock_gettime(_CLOCK_UPTIME_RAW_APPROX, &__tp);
    __darwin_time_t tv_sec = __tp.tv_sec;
    int v11 = SLODWORD(__tp.tv_nsec) / 1000;
    dev_unmap(a1[48], a2);
    __tp.__darwin_time_t tv_sec = 0LL;
    __tp.int tv_nsec = 0LL;
    clock_gettime(_CLOCK_UPTIME_RAW_APPROX, &__tp);
    a1[211] += 1000000 * (__tp.tv_sec - tv_sec) - v11 + SLODWORD(__tp.tv_nsec) / 1000;
  }

  else if (nx_ratelimit_log_allowed((uint64_t)a1))
  {
    log_err( "%s:%d: %s free extent %lld:%lld appears to span container metadata and should not be free: %d\n",  "spaceman_trim_free_extent_callback",  4022,  (const char *)(a1[48] + 208LL),  a2,  a3,  v13);
  }

  return 0LL;
}

uint64_t ipaddr_cmp(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a2 + 8);
  BOOL v4 = v2 < v3;
  BOOL v5 = v2 > v3;
  if (v4) {
    return 0xFFFFFFFFLL;
  }
  else {
    return v5;
  }
}

uint64_t spaceman_trim_free_extent_flush(uint64_t a1)
{
  v5.__darwin_time_t tv_sec = 0LL;
  v5.int tv_nsec = 0LL;
  clock_gettime(_CLOCK_UPTIME_RAW_APPROX, &v5);
  __darwin_time_t tv_sec = v5.tv_sec;
  int v3 = SLODWORD(v5.tv_nsec) / 1000;
  dev_unmap_flush(*(void *)(a1 + 384));
  v5.__darwin_time_t tv_sec = 0LL;
  v5.int tv_nsec = 0LL;
  uint64_t result = clock_gettime(_CLOCK_UPTIME_RAW_APPROX, &v5);
  *(void *)(a1 + 1688) += 1000000 * (v5.tv_sec - tv_sec) - v3 + SLODWORD(v5.tv_nsec) / 1000;
  return result;
}

uint64_t spaceman_candidate_free_chunk_cmp(uint64_t a1, uint64_t a2)
{
  unsigned int v2 = *(_DWORD *)(a1 + 8);
  unsigned int v3 = *(_DWORD *)(a2 + 8);
  BOOL v4 = v2 >= v3;
  BOOL v5 = v2 != v3;
  if (v4) {
    return v5;
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

uint64_t spaceman_iterate_free_extents( uint64_t a1, uint64_t (*a2)(void *a1, unint64_t a2, int64_t a3), void *a3)
{
  return spaceman_iterate_free_extents_internal(a1, 2u, 0LL, a2, a3);
}

uint64_t spaceman_scan_free_blocks(void *a1, int a2, int a3)
{
  uint64_t v6 = 0LL;
  if (a3)
  {
    if (a2) {
      int v7 = 2;
    }
    else {
      int v7 = 0;
    }
    unsigned int v8 = v7 | a3;
    __tp.__darwin_time_t tv_sec = 0LL;
    __tp.int tv_nsec = 0LL;
    clock_gettime(_CLOCK_UPTIME_RAW_APPROX, &__tp);
    a1[210] = 1000000 * __tp.tv_sec + SLODWORD(__tp.tv_nsec) / 1000;
    uint64_t v6 = spaceman_iterate_free_extents_internal((uint64_t)a1, v8, 0LL, 0LL, a1);
    __tp.__darwin_time_t tv_sec = 0LL;
    __tp.int tv_nsec = 0LL;
    clock_gettime(_CLOCK_UPTIME_RAW_APPROX, &__tp);
    log_debug("%s:%d: %s scan took %lld.%06lld s (no trims)\n");
  }

  return v6;
}

uint64_t spaceman_free_queue_key_cmp(uint64_t a1, void *a2, int a3, void *a4, int a5, int *a6)
{
  uint64_t result = 22LL;
  if (a3 == 16 && a5 == 16)
  {
    if (*a2 >= *a4)
    {
      if (*a2 > *a4)
      {
        int v7 = 1;
      }

      else
      {
        uint64_t v8 = a2[1];
        uint64_t v9 = a4[1];
        BOOL v10 = v8 < v9;
        int v7 = v8 > v9;
        if (v10) {
          int v7 = -1;
        }
      }
    }

    else
    {
      int v7 = -1;
    }

    uint64_t result = 0LL;
    *a6 = v7;
  }

  return result;
}

uint64_t spaceman_fq_tree_find_overlap( uint64_t a1, uint64_t a2, unsigned int a3, unint64_t a4, uint64_t a5, _BYTE *a6)
{
  uint64_t v6 = *(void *)(a2 + 376);
  uint64_t v26 = 0LL;
  uint64_t v27 = 0LL;
  unint64_t v24 = 0LL;
  int64_t v25 = 0LL;
  *a6 = 0;
  uint64_t v7 = v6 + 40LL * a3;
  uint64_t v9 = *(void *)(v7 + 208);
  uint64_t v8 = (void *)(v7 + 208);
  if (!v9) {
    return 0LL;
  }
  uint64_t v23 = 0LL;
  uint64_t v16 = spaceman_fq_tree_get(a1, a2, a3, 0LL, 0, &v27);
  if ((_DWORD)v16)
  {
    uint64_t v17 = v16;
    log_err( "%s:%d: %s can't get spaceman %d free queue tree %lld: %d\n",  "spaceman_fq_tree_find_overlap",  4656,  (const char *)(*(void *)(a1 + 384) + 208LL),  a3,  *v8,  v16);
  }

  else
  {
    unint64_t v18 = *(void *)(v6 + 40LL * a3 + 216);
    if (v18 > obj_xid(a2))
    {
LABEL_23:
      uint64_t v17 = 0LL;
    }

    else
    {
      int64_t v19 = a5 + a4;
      do
      {
        uint64_t v23 = 0x1000000008LL;
        unint64_t v24 = v18;
        int64_t v25 = a4;
        uint64_t v20 = bt_lookup_variant(v27, 0LL, &v24, (unsigned int *)&v23 + 1, 0x10u, &v26, (unsigned int *)&v23, 1u, 0, 0LL);
        if ((_DWORD)v20 != 2)
        {
          uint64_t v17 = v20;
          if ((_DWORD)v20) {
            break;
          }
          if (!(_DWORD)v23) {
            uint64_t v26 = 1LL;
          }
          if (v18 == v24 && v26 + v25 > a4 && v19 > v25) {
            goto LABEL_27;
          }
        }

        uint64_t v23 = 0x1000000008LL;
        unint64_t v24 = v18;
        int64_t v25 = a4;
        uint64_t v21 = bt_lookup_variant(v27, 0LL, &v24, (unsigned int *)&v23 + 1, 0x10u, &v26, (unsigned int *)&v23, 4u, 0, 0LL);
        uint64_t v17 = v21;
        if ((_DWORD)v21 != 2)
        {
          if ((_DWORD)v21) {
            break;
          }
          if (!(_DWORD)v23) {
            uint64_t v26 = 1LL;
          }
          if (v18 == v24 && v26 + v25 > a4 && v19 > v25)
          {
LABEL_27:
            uint64_t v17 = 0LL;
            *a6 = 1;
            goto LABEL_24;
          }
        }

        ++v18;
      }

      while (v18 <= obj_xid(a2));
      log_err( "%s:%d: %s error searching spaceman free queue tree: %d\n",  "spaceman_fq_tree_find_overlap",  4710,  (const char *)(*(void *)(a1 + 384) + 208LL),  v17);
    }

LABEL_24:
    obj_release(v27);
  }

  return v17;
}

      IOObjectRelease(v11);
      CFRelease(v16);
      goto LABEL_63;
    }

    iterator[0] = ++v12;
    unint64_t v18 = IOConnectCallStructMethod(v9, 0x1Eu, &outputStruct, 4uLL, &outputStruct, &outputStructCnt);
    if (v18)
    {
      int64_t v19 = v18;
      if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_ERROR))
      {
        uint64_t v20 = mach_error_string(v19);
        LODWORD(buf[0]) = 136315906;
        *(void *)((char *)buf + 4) = "process_volumes";
        WORD2(buf[1]) = 1024;
        *(_DWORD *)((char *)&buf[1] + 6) = 3344;
        WORD1(buf[2]) = 2080;
        *(void *)((char *)&buf[2] + 4) = buffer;
        WORD2(buf[3]) = 2080;
        *(void *)((char *)&buf[3] + 6) = v20;
        _os_log_error_impl( &dword_183C4A000,  MEMORY[0x1895F8DA0],  OS_LOG_TYPE_ERROR,  "%s:%d: Cannot fetch information about volume '%s' - %s\n",  (uint8_t *)buf,  0x26u);
      }

      goto LABEL_61;
    }

    Mutable = CFDictionaryCreateMutable(v13, capacity, MEMORY[0x189605240], MEMORY[0x189605250]);
    if (!Mutable) {
      goto LABEL_61;
    }
    unint64_t v22 = Mutable;
    add_number(Mutable, @"Number of files", kCFNumberSInt64Type, &v47);
    add_number(v22, @"Number of directories", kCFNumberSInt64Type, &v48);
    add_number(v22, @"Number of snapshots", kCFNumberSInt64Type, &v49);
    add_number(v22, @"Object mapping tree node count", kCFNumberSInt64Type, &v50);
    add_number(v22, @"Root tree node count", kCFNumberSInt64Type, &v52);
    add_number(v22, @"Extentref tree node count", kCFNumberSInt64Type, &v51);
    add_number(v22, @"Number of extents", kCFNumberSInt64Type, &v53);
    if (!a2) {
      goto LABEL_60;
    }
    uint64_t v23 = mounted_device(buffer, 0LL);
    if (!v23) {
      goto LABEL_60;
    }
    uint64_t v61 = 0u;
    uint64_t v60 = 0u;
    uint64_t v59 = 0u;
    uint64_t v58 = 0u;
    int v57 = 0u;
    memset(buf, 0, sizeof(buf));
    memset(v55, 0, sizeof(v55));
    v70[1] = 0LL;
    v70[0] = strndup(v23, 0x400uLL);
    unint64_t v24 = fts_open(v70, 80, 0LL);
    uint64_t v42 = v9;
    if (!v24)
    {
      free(v70[0]);
LABEL_50:
      __error();
      goto LABEL_51;
    }

    int64_t v25 = v24;
    while (1)
    {
      uint64_t v26 = fts_read(v25);
      if (!v26) {
        break;
      }
      fts_info = v26->fts_info;
      if ((fts_info & 1) != 0)
      {
        unint64_t v30 = fts_children(v25, 0);
        for (i = 0LL; v30; unint64_t v30 = v30->fts_link)
          i += ((unint64_t)v30->fts_info >> 3) & 1;
        unsigned int v29 = ilog10(i);
        int v32 = v55;
LABEL_43:
        if (v29 >= 0xF) {
          unint64_t v33 = 15;
        }
        else {
          unint64_t v33 = v29;
        }
        ++v32[v33];
      }

      else if ((fts_info & 8) != 0)
      {
        st_blocks = v26->fts_statp->st_blocks;
        if (st_blocks)
        {
          if ((unint64_t)st_blocks >= 3)
          {
            if (st_blocks >= 1) {
              --st_blocks;
            }
            unsigned int v29 = (63 - __clz(st_blocks >> 1)) >> 1;
          }

          else
          {
            unsigned int v29 = 0;
          }

          int v32 = buf;
          goto LABEL_43;
        }
      }
    }

    uint64_t v34 = *__error();
    free(v70[0]);
    fts_close(v25);
    if (v34) {
      goto LABEL_50;
    }
LABEL_51:
    uint64_t v35 = CFArrayCreateMutable(0LL, 16LL, 0LL);
    if (v35)
    {
      unsigned int v36 = v35;
      for (j = 0LL; j != 16; ++j)
        CFArraySetValueAtIndex(v36, j, (const void *)buf[j]);
      CFDictionaryAddValue( v22,  @"Histogram for number of files of sizes in a specific range, number of buckets is",  v36);
      CFRelease(v36);
    }

    unsigned int v38 = CFArrayCreateMutable(0LL, 16LL, 0LL);
    if (v38)
    {
      unsigned int v39 = v38;
      for (k = 0LL; k != 16; ++k)
        CFArraySetValueAtIndex(v39, k, *((const void **)v55 + k));
      CFDictionaryAddValue(v22, @"Histogram for number of files per directory, number of buckets is", v39);
      CFRelease(v39);
    }

    uint64_t v9 = v42;
LABEL_60:
    CFDictionaryAddValue(a3, v16, v22);
    CFRelease(v22);
LABEL_61:
    CFRelease(v16);
LABEL_62:
    IOObjectRelease(v11);
LABEL_63:
    int v11 = IOIteratorNext(iterator[1]);
  }

  while (v11);
LABEL_64:
  IOObjectRelease(iterator[1]);
  add_number(a3, @"Number of volumes", kCFNumberIntType, iterator);
LABEL_65:
  free_extent_hist = 0LL;
LABEL_66:
  IOServiceClose(parent[0]);
  return free_extent_hist;
}

uint64_t spaceman_fq_tree_over_threshold(uint64_t a1, unsigned int a2, uint64_t a3, int a4)
{
  BOOL v4 = *(unsigned __int16 **)(a3 + 56);
  unint64_t v5 = *(unsigned __int16 *)(*(void *)(a1 + 376) + 40LL * a2 + 224);
  if (a4)
  {
    unint64_t v6 = *(void *)(*(void *)(a3 + 392) + 32LL);
    if (v6 <= 1)
    {
      unsigned int v9 = v4[25] + v4[23] + v4[27];
      BOOL v10 = v9 >= obj_size_phys(a3) >> 1;
      return !v10;
    }

    return 1LL;
  }

  if (*(void *)(*(void *)(a3 + 392) + 32LL) > 1uLL) {
    return 1LL;
  }
  unsigned int v11 = v4[25] + v4[23] + v4[27];
  BOOL v10 = v11 >= obj_size_phys(a3) >> 2;
  return !v10;
}

uint64_t spaceman_ip_block_index(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t *a4)
{
  uint64_t v6 = *(void *)(a2 + 376);
  uint64_t v7 = *(void *)(v6 + 152);
  if ((v7 & 0x8000000000000000LL) == 0)
  {
    uint64_t v8 = *(void *)(v6 + 176);
    unint64_t v9 = v8 + v7;
    BOOL v10 = __OFSUB__(a3, v8);
    uint64_t v11 = a3 - v8;
    if (v11 < 0 != v10 || v9 <= a3) {
      return 22LL;
    }
    uint64_t v13 = 0LL;
LABEL_12:
    *a4 = v11;
    return v13;
  }

  uint64_t v23 = 0LL;
  unint64_t v24 = 0LL;
  unint64_t v15 = (uint64_t *)(a2 + 1504);
  if (*(void *)(a2 + 1504))
  {
LABEL_8:
    *(void *)&v30[0] = a3;
    LODWORD(v27) = 8;
    LODWORD(v26[0]) = 16;
    uint64_t v13 = bt_lookup_variant( *v15,  0LL,  (unint64_t *)v30,  (unsigned int *)&v27,  8u,  &v23,  (unsigned int *)v26,  1u,  0,  0LL);
    if ((_DWORD)v13) {
      return v13;
    }
    if (a3 - *(void *)&v30[0] >= v24) {
      return 2LL;
    }
    uint64_t v13 = 0LL;
    uint64_t v11 = v23 + a3 - *(void *)&v30[0];
    goto LABEL_12;
  }

  uint64_t v13 = btree_create(a1, 0x88000000, 0, 0, 0, 8u, 16, (uint64_t)extent_list_key_cmp, 0LL, (uint64_t *)(a2 + 1504));
  if (!(_DWORD)v13)
  {
    uint64_t v32 = 0LL;
    memset(v30, 0, sizeof(v30));
    uint64_t v31 = 0LL;
    uint64_t v27 = 0LL;
    uint64_t v28 = 0LL;
    uint64_t v13 = nx_metadata_fragmented_extent_list_tree_get(a1, *(void *)(*(void *)(a2 + 376) + 176LL), &v32);
    if (!(_DWORD)v13)
    {
      unint64_t v29 = 0LL;
      bt_iterator_init((uint64_t)v30, v32, 0LL, 0, &v29, 8, 8u, &v27, 0x10u);
      uint64_t v13 = v18;
      if (bt_iterator_ended((uint64_t)v30))
      {
        obj_release(v32);
        if ((_DWORD)v13) {
          return v13;
        }
        goto LABEL_8;
      }

      while (1)
      {
        uint64_t v25 = v27;
        v26[0] = v29;
        v26[1] = v28;
        uint64_t v19 = bt_insert(*v15, 0LL, &v25, 8LL, v26, 16LL, 0LL);
        if ((_DWORD)v19) {
          break;
        }
        uint64_t v20 = bt_iterator_next((uint64_t)v30);
        if ((_DWORD)v20)
        {
          uint64_t v13 = v20;
          uint64_t v21 = (const char *)(*(void *)(a1 + 384) + 208LL);
          unint64_t v22 = strerror(v20);
          log_err( "%s:%d: %s failed to get next internal pool reverse mapping, error %s(%d)\n",  "spaceman_set_up_ip_reverse_mapping_tree",  4861,  v21,  v22,  v13);
          goto LABEL_26;
        }

        if (bt_iterator_ended((uint64_t)v30))
        {
          obj_release(v32);
          goto LABEL_8;
        }
      }

      uint64_t v13 = v19;
LABEL_26:
      obj_release(v32);
    }
  }

  return v13;
}

void *spaceman_free_queue_trim_list_init(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a2 + 1530) = 256;
  *(_WORD *)(a2 + 1534) = 0;
  uint64_t result = _apfs_calloc(0x100uLL, 0x10uLL);
  *(void *)(a2 + 1536) = result;
  if (!result) {
    *(_WORD *)(a2 + 1530) = 0;
  }
  return result;
}

uint64_t spaceman_alloc(void *a1, int a2, uint64_t a3, uint64_t a4, unint64_t *a5, uint64_t *a6)
{
  uint64_t v9 = (uint64_t)a1;
  v367[1] = *MEMORY[0x1895F89C0];
  __int128 v363 = 0u;
  __int128 v364 = 0u;
  __int128 v362 = 0u;
  uint64_t v355 = 0LL;
  uint64_t v356 = 0LL;
  uint64_t v354 = 0LL;
  int64_t v350 = 0LL;
  uint64_t v366 = 0LL;
  v367[0] = 0LL;
  BOOL v10 = 0LL;
  if (obj_type((uint64_t)a1) == 13)
  {
    BOOL v10 = a1;
    uint64_t v9 = a1[49];
  }

  __int128 v360 = 0u;
  __int128 v361 = 0u;
  __int128 v359 = 0u;
  memset(v351, 0, sizeof(v351));
  unsigned int v11 = a2 | 0x1000;
  if (!a6) {
    unsigned int v11 = a2 & 0xFFFFEBFF;
  }
  uint64_t v12 = *(void *)(v9 + 376);
  uint64_t v13 = *(void *)(v12 + 1240);
  char v14 = __clz(__rbit64(*(unsigned int *)(v12 + 36)));
  unint64_t v15 = 0x4000000000000000uLL >> v14;
  BOOL v16 = ((0x4000000000000000uLL >> v14) & v13) != 0;
  uint64_t v17 = (uint64_t)0xBFFFFFFFFFFFFFFFLL >> v14;
  uint64_t v18 = v17 & v13;
  uint64_t v19 = *(void *)(v12 + 1248);
  uint64_t v20 = (v18 + v19) & v17;
  BOOL v21 = v19 == 0;
  if (v19) {
    unint64_t v22 = v18;
  }
  else {
    unint64_t v22 = 0LL;
  }
  unint64_t v331 = v22;
  if (v21) {
    unint64_t v23 = 0LL;
  }
  else {
    unint64_t v23 = v20;
  }
  unint64_t v330 = v23;
  uint64_t v24 = *(void *)(v9 + 1752);
  unint64_t v25 = v15 & v24;
  int v329 = (v15 & v24) != 0;
  if (*(_BYTE *)(v9 + 636) || (uint64_t v27 = *(void *)(v9 + 1760)) == 0)
  {
    unint64_t v336 = 0LL;
    unint64_t v26 = 0LL;
  }

  else
  {
    unint64_t v336 = v17 & v24;
    unint64_t v26 = (v27 + (v17 & v24)) & v17;
  }

  if ((v11 & 0x80) != 0) {
    v11 |= 0x8100u;
  }
  if ((v11 & 0x200) != 0)
  {
    v11 |= 0x102u;
    *a5 = *(void *)(v9 + 1768);
  }

  unint64_t v335 = v26;
  int v28 = (v11 >> 2) & 0x100;
  if (*(_BYTE *)(v9 + 639)) {
    int v28 = 2304;
  }
  int v29 = v28 | v11;
  if ((v11 & 2) != 0)
  {
    v29 &= ~0x40u;
    unint64_t v30 = *a5;
    if ((v29 & 0x40) == 0) {
      goto LABEL_23;
    }
LABEL_25:
    int v31 = *(_DWORD *)a5;
    goto LABEL_26;
  }

  unint64_t v30 = 0LL;
  if ((v29 & 0x40) != 0) {
    goto LABEL_25;
  }
LABEL_23:
  int v31 = 3;
LABEL_26:
  *a5 = 0LL;
  int v337 = v29;
  if ((v29 & 4) != 0)
  {
    if (a3 < 1) {
      return 22LL;
    }
  }

  else
  {
    BOOL is_current_tx = xid_is_current_tx(v9, a4);
    uint64_t v32 = 22LL;
    if (a3 < 1 || !is_current_tx) {
      return v32;
    }
  }

  v365 = 0LL;
  uint64_t v357 = 0LL;
  uint64_t v358 = 0LL;
  unint64_t v353 = 0LL;
  uint64_t v352 = 0LL;
  int64_t v349 = 0LL;
  unint64_t v348 = 0LL;
  unint64_t v347 = 0LL;
  unint64_t v346 = 0LL;
  uint64_t v32 = spaceman_get(v9, &v365);
  if ((_DWORD)v32) {
    return v32;
  }
  unsigned int v308 = v31;
  v301 = a5;
  uint64_t v34 = v365;
  uint64_t v35 = v365[47];
  unsigned int v36 = (void *)v365[198];
  unsigned int v37 = v337;
  if (v36)
  {
    uint64_t v38 = v36[1] + a3;
    ++*v36;
    v36[1] = v38;
    if ((v337 & 0x40) != 0)
    {
      unsigned int v39 = v36 + 2;
    }

    else
    {
      switch(a3)
      {
        case 1LL:
          uint64_t v40 = v36 + 4;
          unsigned int v37 = v337;
          goto LABEL_45;
        case 2LL:
          unsigned int v39 = v36 + 5;
          break;
        case 3LL:
          unsigned int v39 = v36 + 6;
          break;
        case 4LL:
          unsigned int v39 = v36 + 7;
          break;
        default:
          goto LABEL_42;
      }

      unsigned int v37 = v337;
    }

    ++*v39;
LABEL_42:
    if ((unint64_t)a3 >= 2 && !a6)
    {
      uint64_t v40 = v36 + 8;
LABEL_45:
      ++*v40;
    }
  }

  if ((v37 & 0x200) != 0)
  {
    unint64_t v41 = v335;
    unint64_t v335 = ((uint64_t)0xBFFFFFFFFFFFFFFFLL >> __clz(__rbit64(*(unsigned int *)(*(void *)(v9 + 376) + 36LL)))) & *(void *)(v35 + 48LL * (v25 != 0) + 48);
    unint64_t v336 = v41;
  }

  if (!a6 && *(void *)(v35 + 96) + *(void *)(v35 + 48) <= (unint64_t)a3)
  {
    uint64_t v32 = 28LL;
    goto LABEL_661;
  }

  uint64_t v42 = *(void *)(v9 + 376);
  unsigned int v43 = v37;
  if ((v37 & 2) != 0)
  {
    char v44 = __clz(__rbit64(*(unsigned int *)(v42 + 36)));
    else {
      unsigned int v43 = v37;
    }
  }

  if ((v43 & 0x1A) == 2)
  {
    else {
      int v45 = 8;
    }
    v43 |= v45;
  }

  if ((~v43 & 0x38) == 0) {
    panic("Absurd combination of allocation flags for spaceman %llx", v34);
  }
  if (*(void *)(v35 + 96)) {
    __asm { BR              X12 }
  }

  if ((v43 & 0x10) != 0)
  {
    uint64_t v32 = 22LL;
    uint64_t v34 = v365;
    goto LABEL_661;
  }

  unint64_t v300 = v30;
  int v290 = v16;
  LODWORD(v367[0]) = 0;
  LODWORD(v366) = 1;
  int v46 = v37 & 0x40;
  BOOL v289 = v46 == 0;
  pthread_mutex_lock((pthread_mutex_t *)v365 + 6);
  uint64_t v322 = 0LL;
  unsigned int v318 = 0;
  unint64_t v47 = 0LL;
  char v294 = 0;
  int v298 = 0;
  char v48 = 0;
  int v49 = v43 & 0x100 | v46;
  int v50 = 0;
  unsigned __int8 v328 = v49 == 0;
  if (v365[186]) {
    int v51 = v43;
  }
  else {
    int v51 = v43 | 0x100;
  }
  unsigned int v332 = v51;
  v309 = (const char *)(a1 + 499);
  uint64_t v52 = a6;
  int v291 = 2;
  unint64_t v339 = a3;
  uint64_t v53 = a3;
LABEL_68:
  char v288 = v48;
  unint64_t v338 = v47;
  do
  {
LABEL_69:
    int v327 = v50;
    do
    {
      uint64_t v54 = v53;
      int v55 = v327;
      while (1)
      {
        unsigned int v56 = v332;
        uint64_t v53 = v339;
        if (!(_BYTE)v55)
        {
          int v57 = v55;
          goto LABEL_82;
        }

        if (!v336)
        {
          if ((v328 & 1) == 0)
          {
            uint64_t v32 = 28LL;
LABEL_653:
            uint64_t v53 = v54;
            goto LABEL_654;
          }

          unint64_t v336 = 0LL;
          goto LABEL_81;
        }

        if ((v332 & 0x200) != 0)
        {
          unint64_t v335 = 0LL;
          unint64_t v336 = 0LL;
LABEL_81:
          int v57 = 0;
          unsigned __int8 v328 = 0;
          goto LABEL_82;
        }

        int v58 = obj_type((uint64_t)a1);
        uint64_t v59 = (const char *)(a1 + 499);
        if (v58 != 13) {
          uint64_t v59 = (const char *)(a1[48] + 208LL);
        }
        log_debug( "%s:%d: %s Could not find data to allocate outside the soft block-out range, disable soft block-out range\n",  "spaceman_alloc",  6927,  v59);
        unint64_t v335 = 0LL;
        unint64_t v336 = 0LL;
        int v57 = 0;
        unsigned __int8 v328 = 0;
        *(_BYTE *)(v9 + 636) = 1;
        *(void *)(v9 + 1784) = 0LL;
        uint64_t v52 = a6;
LABEL_82:
        uint64_t v60 = *((unsigned int *)v367 + v57);
        unsigned int v340 = *((_DWORD *)&v367[-1] + v57);
        int v312 = v57;
        int v327 = v57 + 1;
        if ((v337 & 4) != 0)
        {
          BOOL v68 = v60 == v329;
          if (v335) {
            BOOL v69 = v60 == v329;
          }
          else {
            BOOL v69 = 0;
          }
          goto LABEL_112;
        }

        if ((v332 & 1) != 0) {
          break;
        }
        BOOL v61 = 1;
        while (1)
        {
          if (v10)
          {
            uint64_t v62 = v10[47];
            unint64_t v63 = *(void *)(v62 + 80);
            if (v63)
            {
              uint64_t v64 = v10[51] + *(void *)(v62 + 88);
              if (v64 + v53 > v63)
              {
                uint64_t v53 = v63 - v64;
                uint64_t v32 = 69LL;
                if (!v52 || v53 < 1) {
                  goto LABEL_654;
                }
              }
            }
          }

          uint64_t v54 = *(void *)(v35 + 240)
              + *(void *)(v35 + 72)
              + *(void *)(v35 + 120)
              + *(void *)(v35 + 280)
              + *(void *)(v35 + 192)
              - *(void *)(v35 + 184);
          if (v10)
          {
            uint64_t v65 = v10[47];
            unint64_t v66 = *(void *)(v65 + 72);
            unint64_t v67 = *(void *)(v65 + 88);
            if (v66 > v67) {
              uint64_t v54 = v66 + v54 - v67;
            }
          }

          if (v53 > (unint64_t)v54)
          {
            uint64_t v32 = 28LL;
            if (!v52) {
              goto LABEL_653;
            }
            uint64_t v53 = v54;
            if (v54 < 1) {
              goto LABEL_653;
            }
          }

          uint64_t v54 = *(void *)(v35 + 48LL * v60 + 72) - v365[v60 + 104];
          if (v53 <= v54) {
            goto LABEL_105;
          }
          if (v61) {
            v54 += *(void *)(v35 + 40LL * v340 + 200);
          }
          if (v53 > v54) {
            break;
          }
LABEL_103:
          if (!v61) {
            goto LABEL_108;
          }
          pthread_mutex_unlock((pthread_mutex_t *)v365 + 6);
          pthread_mutex_lock((pthread_mutex_t *)v365 + 8);
          trim_time_tracking_start(v9, (uint64_t)v351, 0, 0);
          BOOL v61 = spaceman_free_completed(v9, (uint64_t)v365, v340, 1, (uint64_t)v351, a4) != 0;
          trim_time_tracking_end(v9, (uint64_t)v351);
          pthread_mutex_unlock((pthread_mutex_t *)v365 + 8);
          pthread_mutex_lock((pthread_mutex_t *)v365 + 6);
          uint64_t v52 = a6;
          uint64_t v54 = 0LL;
          uint64_t v53 = v339;
LABEL_105:
          if (v53 <= v54)
          {
LABEL_108:
            BOOL v68 = v60 == v329;
            if (v335) {
              BOOL v69 = v60 == v329;
            }
            else {
              BOOL v69 = 0;
            }
            unsigned int v56 = v332;
LABEL_112:
            unsigned int v70 = v337;
            goto LABEL_113;
          }
        }

        if (v52 && v54 > 0)
        {
          uint64_t v53 = v54;
          goto LABEL_103;
        }

        int v55 = v327;
        v328 &= v327 == 0;
      }

      BOOL v68 = v60 == v329;
      if (v335) {
        BOOL v69 = v60 == v329;
      }
      else {
        BOOL v69 = 0;
      }
      unsigned int v70 = v337;
      unint64_t v89 = &v365[v60];
      if ((v332 & 0x40) != 0)
      {
        if (v89[106] >= v339) {
          goto LABEL_113;
        }
        obj_type((uint64_t)a1);
        uint64_t v53 = v339;
        log_err("%s:%d: %s Bogus attempt to perform metadata reserved allocation %lld with insufficient reserve %lld (%lld)\n");
LABEL_684:
        uint64_t v32 = 28LL;
        goto LABEL_654;
      }

      if (v89[104] - v89[106] < v339)
      {
        obj_type((uint64_t)a1);
        uint64_t v53 = v339;
        log_err( "%s:%d: %s Bogus attempt to perform non-metadata reserved allocation %lld with insufficient reserve %lld (%lld)\n");
        goto LABEL_684;
      }

LABEL_132:
      int v82 = (v70 >> 6) & 1;
      uint64_t v357 = 0LL;
      uint64_t v358 = 0LL;
      int64_t v349 = 0LL;
      unint64_t v347 = 0LL;
      uint64_t v83 = v72[v60 + 196];
      if (!v83) {
        LOBYTE(v82) = 1;
      }
      char v84 = v80 | v82;
      if ((v56 & 0x8400) != 0) {
        char v85 = 1;
      }
      else {
        char v85 = v84;
      }
      if ((v85 & 1) != 0)
      {
        if (((v80 | ((v70 & 0x40) >> 6)) & 1) != 0)
        {
          unsigned int v316 = 0;
          v279 = 0LL;
          int v101 = v80 || v289;
          BOOL v326 = v60 == v290;
          int v102 = !v317;
          BOOL v276 = v317;
          unsigned int v103 = v56;
          goto LABEL_214;
        }

        int v333 = v56;
LABEL_190:
        if (!v365[v60 + 186] || (v333 & 0x100) != 0) {
          goto LABEL_210;
        }
        *(void *)&__int128 v362 = v350;
        *((void *)&v362 + 1) = v53;
        LOBYTE(v363) = v328 & 1;
        BYTE8(v364) = a6 == 0LL;
        *((void *)&v363 + 1) = 0LL;
        *(void *)&__int128 v364 = 0LL;
        if (v69)
        {
          *((void *)&v363 + 1) = v336;
          *(void *)&__int128 v364 = v335 - v336;
        }

        spaceman_search_bitmap_hints_for_space((unint64_t)v365, v60, (uint64_t)&v362, &v359);
        if (v104 != 28)
        {
          int v105 = v104;
          if (!v104)
          {
            int v106 = v360;
            int64_t v350 = v359;
            if (a6) {
              uint64_t v53 = *((void *)&v359 + 1);
            }
            char v294 = 1;
LABEL_203:
            LOBYTE(v70) = v337;
            if (v106) {
              BOOL v107 = 0;
            }
            else {
              BOOL v107 = v69;
            }
            if (v107)
            {
              unint64_t v335 = 0LL;
              unint64_t v336 = 0LL;
              if ((v333 & 0x200) == 0)
              {
                *(_BYTE *)(v9 + 636) = 1;
                *(void *)(v9 + 1784) = 0LL;
              }
            }

            unsigned __int8 v328 = v106 != 0;
LABEL_210:
            BOOL v326 = v60 == v290;
            if ((v85 & 1) != 0)
            {
              unsigned int v316 = 0;
              int v101 = 0;
              v279 = 0LL;
              int v102 = !v317;
              BOOL v276 = v317;
            }

            else
            {
              BOOL v276 = 0;
              int v101 = 0;
              v279 = &v350;
              int v102 = 1;
              unsigned int v316 = 1;
            }

            unsigned int v103 = v333;
LABEL_214:
            uint64_t v292 = 0LL;
            unint64_t v311 = 0LL;
            uint64_t v108 = v35 + 48LL * v60;
            v313 = (unint64_t *)(v108 + 48);
            v307 = (unsigned int *)(v108 + 64);
            v284 = (_DWORD *)(v108 + 68);
            int v299 = v103 & 0x400;
            int v287 = v102 ^ 1;
            char v275 = v101;
            int v295 = v101 | ((v70 & 0x40) >> 6);
            char v277 = v102;
            int v278 = !v69;
            uint64_t v109 = v322;
            unsigned int v332 = v103;
            unint64_t v282 = v79;
            while (2)
            {
              if (v326 && v350 >= (uint64_t)v331 && v350 < (uint64_t)v330)
              {
                BOOL v111 = v276;
                else {
                  unint64_t v112 = v330;
                }
                int64_t v350 = v112;
              }

              if ((v102 & 1) == 0 && v350 >= (uint64_t)v336 && v350 < (uint64_t)v335)
              {
                BOOL v114 = v326;
                else {
                  unint64_t v115 = v335;
                }
                int64_t v350 = v115;
              }

              uint64_t v116 = v365[v60 + 196];
              if (v116)
              {
                LODWORD(v116) = spaceman_free_extent_cache_bitmap_scan_begin(v116, v279);
                int v298 = 0;
              }

              unint64_t v117 = v350;
              if (v350 >= *v313)
              {
                unint64_t v117 = 0LL;
                int64_t v350 = 0LL;
              }

              LODWORD(v321) = 0;
              unsigned int v318 = 0;
              unint64_t v118 = 0LL;
              int v280 = v116;
              int v302 = v316 & v116;
              int v285 = -1;
              unint64_t v314 = v338;
              uint64_t v119 = v311;
              while (1)
              {
                unint64_t v324 = v118;
                unint64_t v120 = v117 / *(unsigned int *)(v35 + 36) / *(unsigned int *)(v35 + 40);
                unint64_t v311 = v119;
                if (*v284)
                {
                  unsigned int v121 = *(_DWORD *)(v35 + 44);
                  unsigned int v122 = v120 / v121;
                  uint64_t v123 = v356;
                  if (v120 / v121 == v285)
                  {
                    LODWORD(v124) = v117 / *(unsigned int *)(v35 + 36) / *(unsigned int *)(v35 + 40);
                    unsigned int v122 = v285;
                  }

                  else
                  {
                    unint64_t v125 = v117;
                    uint64_t v127 = *(void *)(v365[v60 + 111] + 8LL * v122);
                    if (v356)
                    {
                      obj_release(v356);
                      uint64_t v356 = 0LL;
                    }

                    uint64_t v352 = v35;
                    unint64_t v353 = __PAIR64__(v122, v60);
                    uint64_t v128 = obj_get(*(void *)(v9 + 392), 0x40000000LL, v127, &sm_cab_desc, &v352, 0LL, 0LL, 0LL, &v356);
                    if ((_DWORD)v128)
                    {
                      uint64_t v32 = v128;
                      uint64_t v52 = a6;
                      uint64_t v119 = v311;
LABEL_571:
                      unint64_t v117 = v125;
LABEL_572:
                      if (v318 <= *v307)
                      {
                        if (v280)
                        {
                          if (v316)
                          {
                            if ((_DWORD)v32) {
                              BOOL v242 = 0;
                            }
                            else {
                              BOOL v242 = v117 > v350;
                            }
                            if (v242)
                            {
                              unint64_t v243 = v357 || !v119
                                   ? *(void *)(v109 + 32LL * v314 + 48) + v357 + v358
                                   : v119 + v292;
                              if (v117 <= v243) {
                                unint64_t v117 = v243;
                              }
                            }
                          }

                          else
                          {
                            unint64_t v117 = 0LL;
                          }

                          uint64_t v244 = v365[v60 + 196];
                          unint64_t v241 = v117;
                          char v245 = 0;
LABEL_593:
                          spaceman_free_extent_cache_bitmap_scan_finished(v244, v241, v245);
                          uint64_t v52 = a6;
                        }
                      }

                      else if (v280)
                      {
                        if (v316) {
                          unint64_t v241 = *(void *)(v365[47] + 48LL * v60 + 48);
                        }
                        else {
                          unint64_t v241 = 0LL;
                        }
                        uint64_t v244 = v365[v60 + 196];
                        char v245 = 1;
                        goto LABEL_593;
                      }

LABEL_594:
                      uint64_t v246 = v357;
                      uint64_t v322 = v109;
                      if (!v357 && v119)
                      {
                        uint64_t v251 = *(unsigned int *)(v35 + 36);
                        unint64_t v252 = v292;
                        uint64_t v357 = v119;
                        uint64_t v358 = v292 % v251;
                        if ((_DWORD)v32) {
                          goto LABEL_654;
                        }
                        uint64_t v246 = v119;
                        if (!v292) {
                          goto LABEL_628;
                        }
                      }

                      else
                      {
                        if (v357 || (_DWORD)v32)
                        {
                          if ((_DWORD)v32) {
                            goto LABEL_654;
                          }
                        }

                        else
                        {
                          if (v318 == *(_DWORD *)(v35 + 48LL * v60 + 64) + 1)
                          {
                            int v50 = v327;
                            if ((v337 & 4) == 0)
                            {
                              pthread_mutex_unlock((pthread_mutex_t *)v365 + 6);
                              pthread_mutex_lock((pthread_mutex_t *)v365 + 8);
                              trim_time_tracking_start(v9, (uint64_t)v351, 0, 0);
                              uint64_t v247 = spaceman_free_completed(v9, (uint64_t)v365, v340, 1, (uint64_t)v351, a4);
                              trim_time_tracking_end(v9, (uint64_t)v351);
                              pthread_mutex_unlock((pthread_mutex_t *)v365 + 8);
                              pthread_mutex_lock((pthread_mutex_t *)v365 + 6);
                              uint64_t v52 = a6;
                              if (v247) {
                                int v50 = v312;
                              }
                            }

                            unint64_t v338 = v314;
                            if (v356)
                            {
                              obj_release(v356);
                              uint64_t v52 = a6;
                              uint64_t v356 = 0LL;
                              unint64_t v338 = v314;
                            }

                            goto LABEL_69;
                          }

                          uint64_t v246 = 0LL;
                        }

LABEL_628:
                        unint64_t v252 = v358 + *(void *)(v109 + 32LL * v314 + 48);
                        uint64_t v119 = v246;
                      }

                      unint64_t v293 = v252;
                      if ((_DWORD)v60 == 1) {
                        v252 |= 0x4000000000000000uLL >> __clz(__rbit64(*(unsigned int *)(*(void *)(v9 + 376) + 36LL)));
                      }
                      int v253 = spaceman_extent_check((void *)v9, (uint64_t)v365, v252, v119);
                      if (v253)
                      {
                        int v267 = v253;
                        if (nx_ratelimit_log_allowed(*(void *)(*a1 + 392LL)))
                        {
                          if (obj_type((uint64_t)a1) == 13)
                          {
                            if ((_DWORD)v60 == 1) {
                            log_err( "%s:%d: %s found free extent (0x%llx:0x%llx) which should not be free!: %d\n",  "spaceman_alloc",  7903,  v309,  v293,  v119,  v267);
                            }
                          }

                          else
                          {
                            if ((_DWORD)v60 == 1) {
                            log_err( "%s:%d: %s found free extent (0x%llx:0x%llx) which should not be free!: %d\n",  "spaceman_alloc",  7903,  (const char *)(a1[48] + 208LL),  v293,  v119,  v267);
                            }
                          }
                        }

                        uint64_t v255 = nx_corruption_detected_int(v9);
                      }

                      else
                      {
                        unint64_t v254 = *(void *)(v35 + 48LL * v60 + 48);
                        if ((v337 & 4) != 0 || v357 < 1) {
                          goto LABEL_685;
                        }
                        if (*(_BYTE *)(v9 + 627))
                        {
                          uint64_t v32 = 30LL;
                          goto LABEL_654;
                        }

                        if (v356)
                        {
                          obj_release(v356);
                          uint64_t v356 = 0LL;
                        }

                        if (v355)
                        {
                          obj_release(v355);
                          uint64_t v355 = 0LL;
                        }

                        if (v354)
                        {
                          obj_release(v354);
                          uint64_t v354 = 0LL;
                        }

                        uint64_t v255 = obj_modify(v365, 0LL, a4);
                        if (!(_DWORD)v255)
                        {
                          unint64_t v256 = v293;
                          if ((_DWORD)v60 == 1) {
                          uint64_t v32 = spaceman_modify_bits((void *)v9, v10, (uint64_t)v365, v256, v119, a4, 0, v332);
                          }
                          spaceman_free_extent_cache_remove(v365[v60 + 196], v293, v119);
                          if ((_DWORD)v32)
                          {
                            int v257 = obj_type((uint64_t)a1);
                            int v258 = (const char *)(a1 + 499);
                            if (v257 != 13) {
                              int v258 = (const char *)(a1[48] + 208LL);
                            }
                            log_err( "%s:%d: %s Failed to set bits for allocation %lld:%lld: %d\n",  "spaceman_alloc",  7948,  v258,  v293,  v119,  v32);
                            int v50 = v312;
                            if (!v316) {
                              goto LABEL_654;
                            }
                            spaceman_free_extent_cache_reset(v365[v60 + 196]);
                            char v48 = 1;
                            uint64_t v52 = a6;
                            unint64_t v47 = v314;
                            if ((v288 & 1) != 0) {
                              goto LABEL_654;
                            }
                            goto LABEL_68;
                          }

LABEL_685:
                          if (v293 + v119 >= v254) {
                            unint64_t v264 = 0LL;
                          }
                          else {
                            unint64_t v264 = v293 + v119;
                          }
                          if ((_DWORD)v60 == 1) {
                          unint64_t *v301 = v293;
                          }
                          if (a6) {
                            *a6 = v119;
                          }
                          int v265 = v365;
                          unsigned int v266 = (void *)v365[198];
                          if (v266)
                          {
                            v266[10] += v119;
                            if ((v275 & 1) != 0)
                            {
                              ++v266[3];
LABEL_704:
                              if ((*(_DWORD *)(v265[v60 + 186]
                                              + 4
                                              * (v265[17 * v60 + 152 + 4 * v304]
                                               / (unint64_t)*(unsigned int *)(v35 + 36))) & 0xFFFFFFu) <= v304)
                              {
                                int new_chunk_for_allocation_zone = spaceman_get_new_chunk_for_allocation_zone( v9,  (uint64_t)v265,  v60,  v304);
                                uint64_t v32 = 0LL;
                                if (!new_chunk_for_allocation_zone || new_chunk_for_allocation_zone == 28) {
                                  goto LABEL_654;
                                }
                                obj_type((uint64_t)a1);
                                log_err("%s:%d: %s failed to update chunk for alloc zone %d: %d\n");
                              }

LABEL_732:
                              uint64_t v32 = 0LL;
                              goto LABEL_654;
                            }
                          }

                          else if ((v275 & 1) != 0)
                          {
                            goto LABEL_704;
                          }

                          if ((v332 & 0x200) != 0)
                          {
                            unint64_t v269 = *(void *)(v9 + 1752);
                            char v270 = __clz(__rbit64(*(unsigned int *)(*(void *)(v9 + 376) + 36LL)));
                            unint64_t v271 = 0x4000000000000000uLL >> v270;
                            if ((_DWORD)v60 == (((0x4000000000000000uLL >> v270) & v269) != 0)
                              && (uint64_t v272 = (uint64_t)0xBFFFFFFFFFFFFFFFLL >> v270, v264 >= (v272 & v269))
                              && v264 < ((*(void *)(v9 + 1760) + v269) & v272))
                            {
                              uint64_t v32 = 0LL;
                              if ((_DWORD)v60 == 1) {
                                unint64_t v273 = v271;
                              }
                              else {
                                unint64_t v273 = 0LL;
                              }
                              unint64_t v269 = v273 | v264;
                            }

                            else
                            {
                              uint64_t v32 = 0LL;
                            }

                            *(void *)(v9 + 1768) = v269;
                            goto LABEL_654;
                          }

                          if ((v332 & 0x142) != 0
                            && (_DWORD)v60 == (((v300 << __clz(__rbit64(*(unsigned int *)(*(void *)(v9 + 376) + 36LL)))) & 0x4000000000000000LL) != 0))
                          {
                            if (v303) {
                              spaceman_update_metazone_alloc_index((uint64_t)v265, v60, v308, v264);
                            }
                          }

                          else
                          {
                            v265[v60 + 124] = v264;
                            if ((v328 & 1) != 0
                              && spaceman_should_avoid_data_allocation_at_block((uint64_t)v265, v60, v264, 5LL))
                            {
                              *(void *)&__int128 v362 = v264;
                              *((void *)&v362 + 1) = 1LL;
                              LOBYTE(v363) = 1;
                              BYTE8(v364) = 1;
                              *((void *)&v363 + 1) = 0LL;
                              *(void *)&__int128 v364 = 0LL;
                              spaceman_search_bitmap_hints_for_space((unint64_t)v365, v60, (uint64_t)&v362, &v359);
                              if (v274)
                              {
                                if (v274 != 28)
                                {
                                  obj_type((uint64_t)a1);
                                  log_err("%s:%d: %s failed to move roving pointer for dev %d error %d\n");
                                }
                              }

                              else if (*((uint64_t *)&v359 + 1) >= 1)
                              {
                                uint64_t v32 = 0LL;
                                v365[v60 + 124] = v359;
                                goto LABEL_654;
                              }
                            }
                          }

                          goto LABEL_732;
                        }
                      }

                      uint64_t v32 = v255;
                      goto LABEL_654;
                    }

                    unsigned int v121 = *(_DWORD *)(v35 + 44);
                    uint64_t v123 = v356;
                    unint64_t v117 = v125;
                    int v285 = v122;
                    unint64_t v124 = v125 / *(unsigned int *)(v35 + 36) / *(unsigned int *)(v35 + 40);
                  }

                  unint64_t v125 = v117;
                  uint64_t v126 = (uint64_t *)(*(void *)(v123 + 56) + 8LL * (v120 - v121 * v122) + 40);
                  LODWORD(v120) = v124;
                  uint64_t v119 = v311;
                }

                else
                {
                  unint64_t v125 = v117;
                  uint64_t v126 = (uint64_t *)(v365[v60 + 111] + 8LL * v120);
                }

                uint64_t v129 = *v126;
                uint64_t v352 = v35;
                unint64_t v353 = __PAIR64__(v120, v60);
                uint64_t v306 = v129;
                uint64_t v130 = obj_get(*(void *)(v9 + 392), 0x40000000LL, v129, &sm_cib_desc, &v352, 0LL, 0LL, 0LL, &v355);
                if ((_DWORD)v130)
                {
                  uint64_t v32 = v130;
                  uint64_t v52 = a6;
                  goto LABEL_571;
                }

                uint64_t v109 = *(void *)(v355 + 56);
                unsigned int v131 = *(_DWORD *)(v109 + 32);
                uint64_t v133 = *(unsigned int *)(v35 + 36);
                unsigned int v132 = *(_DWORD *)(v35 + 40);
                unint64_t v134 = v132 * (unint64_t)v131;
                uint64_t v52 = a6;
                unint64_t v117 = v125;
                unsigned int v135 = v318 == *v307 ? v350 / v133 - v134 + 1 : *(_DWORD *)(v109 + 36);
                unint64_t v136 = v324;
                unint64_t v137 = v125 / v133 - v132 * (unint64_t)v131;
                unint64_t v314 = v137;
                uint64_t v32 = 0LL;
LABEL_540:
                if (!v357 && v119 != v53)
                {
                  BOOL v231 = v136 || !v119 ? (_DWORD)v32 == 0 : (v32 | v299) == 0;
                  BOOL v232 = !v231;
                  if (((v232 | v298) & 1) == 0)
                  {
                    unint64_t v233 = v117;
                    uint64_t v234 = v119;
                    uint64_t v235 = v109;
                    unint64_t v236 = v136;
                    obj_release(v355);
                    unint64_t v118 = v236;
                    uint64_t v109 = v235;
                    uint64_t v119 = v234;
                    unint64_t v117 = v233;
                    uint64_t v52 = a6;
                    uint64_t v355 = 0LL;
                    if (++v318 <= *v307) {
                      continue;
                    }
                  }
                }

                goto LABEL_572;
              }

              unint64_t v283 = v135 - 1;
              unint64_t v338 = v137;
              unsigned int v281 = v135;
              unint64_t v315 = v135;
              __int16 v138 = v332;
              uint64_t v323 = *(void *)(v355 + 56);
              unint64_t v305 = v134;
LABEL_259:
              if (v321 <= 2)
              {
                unsigned int v140 = *(_DWORD *)(v35 + 36);
              }

              else
              {
                uint64_t v139 = v361;
                unsigned int v140 = *(_DWORD *)(v35 + 36);
                if (!((v294 ^ 1) & 1 | ((uint64_t)v361 < 1)) && v53 <= 2 * v140)
                {
                  if (v355)
                  {
                    obj_release(v355);
                    uint64_t v52 = a6;
                    uint64_t v355 = 0LL;
                    uint64_t v139 = v361;
                  }

                  char v294 = 0;
                  int64_t v350 = *((void *)&v360 + 1);
                  if (v52) {
                    uint64_t v53 = v139;
                  }
                  unsigned __int8 v328 = BYTE8(v361) != 0;
                  LOBYTE(v102) = v277;
                  int v237 = v278;
                  if (BYTE8(v361)) {
                    int v237 = 1;
                  }
                  if (v237) {
                    unint64_t v238 = v336;
                  }
                  else {
                    unint64_t v238 = 0LL;
                  }
                  unint64_t v239 = v335;
                  if (!v237) {
                    unint64_t v239 = 0LL;
                  }
                  unint64_t v335 = v239;
                  unint64_t v336 = v238;
                  if ((v237 & 1) == 0 && (v138 & 0x200) == 0)
                  {
                    unint64_t v335 = 0LL;
                    unint64_t v336 = 0LL;
                    unsigned __int8 v328 = 0;
                    char v294 = 0;
                    *(_BYTE *)(v9 + 636) = 1;
                    *(void *)(v9 + 1784) = 0LL;
                  }

                  continue;
                }
              }

              break;
            }

            uint64_t v141 = v109 + 32 * v338;
            unint64_t v142 = *(void *)(v141 + 48);
            v325 = (void *)(v141 + 48);
            unint64_t v143 = v134 + v338;
            if (v142 != (v134 + v338) * v140)
            {
              int v145 = obj_type((uint64_t)a1);
              uint64_t v146 = (const char *)(a1 + 499);
              if (v145 != 13) {
                uint64_t v146 = (const char *)(a1[48] + 208LL);
              }
              log_err( "%s:%d: %s skip bad chunk info ci @ block %lld (cib %lld) ci_index 0x%x ci_addr 0x%llx (expect 0x%llx)\n",  "spaceman_alloc",  7422,  v146,  v306,  *(void *)(v109 + 8),  v338,  *v325,  v143 * *(unsigned int *)(v35 + 36));
              unint64_t v147 = *(unsigned int *)(v35 + 36) + *(unsigned int *)(v35 + 36) * v143;
              uint64_t v52 = a6;
LABEL_344:
              unint64_t v136 = 0LL;
              if (v147 >= *v313) {
                unint64_t v117 = 0LL;
              }
              else {
                unint64_t v117 = v147;
              }
              goto LABEL_347;
            }

            if (v318 == *v307 && v350 / v140 - v134 == v338) {
              uint64_t v144 = v350 - v142;
            }
            else {
              uint64_t v144 = *(_DWORD *)(v109 + 32 * v338 + 56) & 0xFFFFFLL;
            }
            if (v326 && v331 > v142 && v331 < v144 + v142 && v331 - v142 < v144) {
              uint64_t v144 = v331 - v142;
            }
            if (v317)
            {
              unint64_t v148 = v336 - v142;
              BOOL v149 = v336 <= v142 || v336 >= v144 + v142;
              int v150 = v149;
              char v151 = v316;
              if (v149) {
                char v151 = 1;
              }
              int v152 = v150 ^ 1;
              if (v148 >= v144) {
                unint64_t v148 = v144;
              }
              if ((v151 & 1) != 0)
              {
                int v153 = v152;
              }

              else
              {
                uint64_t v144 = v148;
                int v153 = 0;
              }
            }

            else
            {
              int v153 = 0;
            }

            uint64_t v154 = v117 - v142;
            if (v326 && v330 > v142 && v330 < v144 + v142)
            {
              if (v330 - v142 > v154) {
                uint64_t v154 = v330 - v142;
              }
              unint64_t v117 = v154 + v142;
              if (v154 > 0) {
                unint64_t v136 = 0LL;
              }
            }

            if (v317 && v335 > v142 && v335 < v144 + v142)
            {
              if ((v316 & 1) != 0)
              {
                int v153 = 1;
                goto LABEL_305;
              }

              if (v335 - v142 > v154) {
                uint64_t v154 = v335 - v142;
              }
              unint64_t v117 = v154 + v142;
              if (v154 > 0) {
                unint64_t v136 = 0LL;
              }
              if (!v52)
              {
LABEL_391:
                uint64_t v189 = v323 + 32 * v338;
                int64_t v190 = *(_DWORD *)(v189 + 60) & 0xFFFFF;
                if (!v136 || v190 < (*(_DWORD *)(v189 + 56) & 0xFFFFFu) && (uint64_t)(v53 - v136) > v190)
                {
                  if ((_DWORD)v190)
                  {
                    if (v338 >= v283
                      || (uint64_t v191 = v323 + 32 * (v338 + 1),
                          unsigned int v192 = *(_DWORD *)(v191 + 60) & 0xFFFFF,
                          v53 <= v192 + v190))
                    {
                      unint64_t v136 = 0LL;
                    }

                    else
                    {
                      unint64_t v136 = 0LL;
                      if (v192 < (*(_DWORD *)(v191 + 56) & 0xFFFFFu)) {
                        int v153 = 1;
                      }
                    }
                  }

                  else
                  {
                    unint64_t v136 = 0LL;
                    int v153 = 2;
                  }
                }
              }
            }

            else
            {
LABEL_305:
              if (!v52) {
                goto LABEL_391;
              }
            }

            if (v326 && v330 >= v144 + v142 && v331 <= v154 + v142) {
              int v153 = 2;
            }
            if (v153) {
              BOOL v156 = 0;
            }
            else {
              BOOL v156 = v317;
            }
            BOOL v158 = v336 <= v154 + v142 && v335 >= v144 + v142;
            if (v156) {
              unsigned int v159 = v158;
            }
            else {
              unsigned int v159 = v153;
            }
            if (v52)
            {
              uint64_t v160 = v323;
              if ((*(_DWORD *)(v323 + 32 * v338 + 60) & 0xFFFFF) == 0) {
                unsigned int v159 = 2;
              }
            }

            else
            {
              uint64_t v160 = v323;
            }

            uint64_t v161 = v160 + 32 * v338;
            uint64_t v163 = *(void *)(v161 + 64);
            uint64_t v162 = (uint64_t *)(v161 + 64);
            if (!v163 && ((*(_DWORD *)(v160 + 32 * v338 + 56) ^ *(_DWORD *)(v160 + 32 * v338 + 60)) & 0xFFFFF) != 0) {
              unsigned int v159 = 2;
            }
            unint64_t v319 = v117;
            if (((v159 == 0) & v328) == 1)
            {
              unint64_t v164 = v136;
              BOOL should_avoid_data_allocation_at_block = spaceman_should_avoid_data_allocation_at_block( (uint64_t)v365,  v60,  v142,  v53);
              unint64_t v136 = v164;
              unint64_t v117 = v319;
              uint64_t v52 = a6;
              unsigned int v159 = should_avoid_data_allocation_at_block;
            }

            if (v159 > v316)
            {
              unint64_t v147 = v117 + v144 - v154;
              BOOL v166 = v326;
              if (v147 < v331) {
                BOOL v166 = 0;
              }
              __int16 v138 = v332;
              uint64_t v109 = v323;
              unint64_t v134 = v305;
              if (v166 && v147 < v330) {
                goto LABEL_343;
              }
              int v167 = v287;
              if (v147 < v336) {
                int v167 = 0;
              }
              if (v167 == 1 && v147 < v335) {
LABEL_343:
              }
                unint64_t v147 = *v325 + (*(_DWORD *)(v323 + 32 * v338 + 56) & 0xFFFFF);
              goto LABEL_344;
            }

            unint64_t v321 = (v321 + 1);
            uint64_t v168 = *v162;
            uint64_t v354 = 0LL;
            if (v168)
            {
              uint64_t v169 = v60;
              unint64_t v170 = v136;
              uint64_t v171 = obj_get(*(void *)(v9 + 392), 0x40000000LL, v168, &sm_bm_desc, 0LL, 0LL, 0LL, 0LL, &v354);
              if ((_DWORD)v171)
              {
                uint64_t v32 = v171;
                unint64_t v314 = v338;
                uint64_t v52 = a6;
                uint64_t v109 = v323;
                uint64_t v119 = v311;
                unint64_t v117 = v319;
                unint64_t v136 = v170;
                uint64_t v60 = v169;
                goto LABEL_540;
              }

              uint64_t v172 = v354;
              unint64_t v117 = v319;
              unint64_t v136 = v170;
              uint64_t v60 = v169;
              if (!v136)
              {
LABEL_435:
                unint64_t v320 = v117;
                if (v172)
                {
                  if (v365[v60 + 196])
                  {
                    if (v144 <= v154)
                    {
                      uint64_t v286 = 0LL;
                      uint64_t v201 = 0LL;
                    }

                    else
                    {
                      uint64_t v201 = 0LL;
                      uint64_t v286 = 0LL;
                      unint64_t v297 = v117 - v154;
                      uint64_t v202 = v154;
                      do
                      {
                        bitmap_range_find_first_clear_range( *(void *)(v354 + 56),  v144 - v202,  v202,  v144,  &v358,  &v357);
                        if (!v357) {
                          break;
                        }
                        if (v357 > v201)
                        {
                          BOOL v203 = v201 < v53;
                          if (v299) {
                            BOOL v203 = v201 == 0;
                          }
                          if (v203)
                          {
                            uint64_t v286 = v358;
                            if (v53 >= v357) {
                              uint64_t v201 = v357;
                            }
                            else {
                              uint64_t v201 = v53;
                            }
                          }
                        }

                        if (v159) {
                          BOOL v204 = 1;
                        }
                        else {
                          BOOL v204 = v201 < v53;
                        }
                        char v205 = v295;
                        if (v204) {
                          char v205 = 0;
                        }
                        if ((v205 & 1) != 0) {
                          break;
                        }
                        spaceman_free_extent_cache_insert(v365[v60 + 196], v302, v297 + v358, v357);
                        uint64_t v202 = v357 + v358;
                      }

                      while (v357 + v358 < v144);
                    }

                    unint64_t v208 = 0LL;
                    uint64_t v357 = v201;
                    uint64_t v358 = v286;
                    if (!v159)
                    {
                      uint64_t v52 = a6;
                      if (v201 >= v53)
                      {
                        unint64_t v136 = 0LL;
                        uint64_t v32 = 0LL;
                        unint64_t v117 = v144 - v154 + v320;
LABEL_525:
                        unint64_t v314 = v338;
                        goto LABEL_538;
                      }

LABEL_469:
                      unint64_t v210 = v357;
                      if (!v52)
                      {
                        unint64_t v211 = v320;
                        goto LABEL_482;
                      }

                      unint64_t v211 = v320;
                      if (v357 > (uint64_t)v311)
                      {
                        uint64_t v212 = v358;
                        if (v159)
                        {
                          unint64_t v213 = v208;
                          unint64_t v214 = v320 - v154;
                          if ((spaceman_clip_extent_to_zones( v9,  (uint64_t)v365,  v60,  v320 - v154 + v358,  v357,  v332,  v282,  &v348,  &v346) & 1) != 0)
                          {
                            unint64_t v215 = v311;
                            unint64_t v216 = v292;
                            if (v346 > v311) {
                              unint64_t v216 = v348;
                            }
                            uint64_t v292 = v216;
                            if (v346 > v311) {
                              unint64_t v215 = v346;
                            }
                            unint64_t v311 = v215;
                            unint64_t v210 = v357;
                            uint64_t v52 = a6;
                            unint64_t v211 = v320;
                            unint64_t v208 = v213;
                            goto LABEL_482;
                          }

                          unint64_t v210 = v357;
                          uint64_t v212 = v358;
                          uint64_t v52 = a6;
                          unint64_t v211 = v320;
                          unint64_t v208 = v213;
                        }

                        else
                        {
                          unint64_t v214 = v320 - v154;
                        }

                        uint64_t v292 = v214 + v212;
                        unint64_t v311 = v210;
                      }

LABEL_482:
                      __int16 v138 = v332;
                      unint64_t v134 = v305;
                      if (!v210 || v358 + v210 != v144)
                      {
                        if (v299 && v311)
                        {
                          unint64_t v136 = 0LL;
                          uint64_t v32 = 0LL;
                          unint64_t v117 = v144 - v154 + v211;
                          goto LABEL_525;
                        }

                        unint64_t v210 = v208;
                        if (!v208)
                        {
                          uint64_t v217 = v144 - v53;
                          if (v144 >= v53)
                          {
                            uint64_t v218 = v53;
                          }

                          else
                          {
                            uint64_t v217 = 0LL;
                            uint64_t v218 = v144;
                          }

                          int last_set = bitmap_range_find_last_set(*(void *)(v354 + 56), v217, v218, &v358);
                          uint64_t v52 = a6;
                          unint64_t v211 = v320;
                          if (last_set && v358 < v144 - 1)
                          {
                            unint64_t v210 = v144 + ~v358;
                            spaceman_free_extent_cache_insert(v365[v60 + 196], v302, v320 - v154 + v358 + 1, v210);
                            unint64_t v211 = v320;
                            uint64_t v52 = a6;
                          }

                          else
                          {
                            unint64_t v210 = 0LL;
                          }
                        }
                      }

                      uint64_t v357 = 0LL;
                      unint64_t v220 = v211 + v144 - v154;
                      BOOL v221 = v326;
                      if (v220 < v331) {
                        BOOL v221 = 0;
                      }
                      uint64_t v109 = v323;
                      if (v221 && v220 < v330) {
                        goto LABEL_502;
                      }
                      int v222 = v287;
                      if (v220 < v336) {
                        int v222 = 0;
                      }
                      if (v222 == 1 && v220 < v335)
                      {
LABEL_502:
                        unint64_t v210 = 0LL;
                        unint64_t v220 = *v325 + (*(_DWORD *)(v323 + 32 * v338 + 56) & 0xFFFFF);
                      }

                      if (v220 >= *v313) {
                        unint64_t v136 = 0LL;
                      }
                      else {
                        unint64_t v136 = v210;
                      }
                      if (v220 >= *v313) {
                        unint64_t v117 = 0LL;
                      }
                      else {
                        unint64_t v117 = v220;
                      }
                      if (v354)
                      {
                        unint64_t v223 = v117;
                        unint64_t v224 = v136;
                        obj_release(v354);
                        unint64_t v136 = v224;
                        uint64_t v109 = v323;
                        unint64_t v117 = v223;
                        uint64_t v52 = a6;
                      }

                      uint64_t v354 = 0LL;
                      if ((_DWORD)v321) {
                        BOOL v225 = v136 == 0;
                      }
                      else {
                        BOOL v225 = 0;
                      }
                      unsigned int v226 = v316;
                      if (!v225) {
                        unsigned int v226 = 0;
                      }
                      if (v226 == 1)
                      {
                        if (v311 | v347)
                        {
                          unint64_t v227 = v117;
                          int should_pause = spaceman_free_extent_cache_scan_should_pause(v365[v60 + 196], v321);
                          unint64_t v136 = 0LL;
                          if (should_pause)
                          {
                            uint64_t v32 = 0LL;
                            unint64_t v229 = v311;
                            int64_t v230 = v292;
                            if (v347 > v311) {
                              int64_t v230 = v349;
                            }
                            uint64_t v292 = v230;
                            if (v347 > v311) {
                              unint64_t v229 = v347;
                            }
                            int v298 = 1;
                            unint64_t v314 = v338;
                            uint64_t v119 = v229;
                            uint64_t v52 = a6;
                            unint64_t v117 = v227;
                            goto LABEL_540;
                          }

                          uint64_t v52 = a6;
                          unint64_t v117 = v227;
LABEL_520:
                          unint64_t v134 = v305;
                        }

                        else
                        {
                          unint64_t v136 = 0LL;
                          unint64_t v311 = 0LL;
                        }
                      }

                      goto LABEL_347;
                    }
                  }

                  else
                  {
                    if (bitmap_range_find_desired_or_first_clear_range( *(void *)(v172 + 56),  v53,  v154,  v144,  &v358,  &v357,  v299 != 0))
                    {
                      unint64_t v136 = 0LL;
                      uint64_t v32 = 0LL;
                      unint64_t v314 = v338;
                      uint64_t v52 = a6;
                      uint64_t v109 = v323;
                      uint64_t v119 = v311;
                      unint64_t v117 = v320;
                      goto LABEL_540;
                    }

                    unint64_t v208 = 0LL;
                  }
                }

                else
                {
                  uint64_t v206 = v144 - v154;
                  if (v53 >= v144 - v154) {
                    unint64_t v207 = v144 - v154;
                  }
                  else {
                    unint64_t v207 = v53;
                  }
                  uint64_t v357 = v207;
                  uint64_t v358 = v154;
                  if (v53 <= v144 - v154)
                  {
                    if (!v159)
                    {
                      unint64_t v136 = 0LL;
                      uint64_t v32 = 0LL;
LABEL_537:
                      unint64_t v314 = v338;
                      uint64_t v52 = a6;
LABEL_538:
                      uint64_t v109 = v323;
LABEL_539:
                      uint64_t v119 = v311;
                      goto LABEL_540;
                    }
                  }

                  else
                  {
                    uint64_t v206 = 0LL;
                  }

                  unint64_t v209 = v206;
                  spaceman_free_extent_cache_insert(v365[v60 + 196], v302, v117, v207);
                  unint64_t v208 = v209;
                }

                uint64_t v52 = a6;
                goto LABEL_469;
              }
            }

            else
            {
              uint64_t v172 = 0LL;
              if (!v136) {
                goto LABEL_435;
              }
            }

            uint64_t v173 = v53 - v136;
            if (v159) {
              uint64_t v174 = v144;
            }
            else {
              uint64_t v174 = v173;
            }
            if (!v172
              || (uint64_t v296 = v154,
                  unint64_t v175 = v136,
                  int first = bitmap_range_find_first(1, *(void *)(v172 + 56), 0LL, v174, &v358),
                  unint64_t v136 = v175,
                  uint64_t v177 = v296,
                  unint64_t v117 = v319,
                  !first))
            {
              uint64_t v185 = v174 + v136;
              if (!v159 && v53 == v185)
              {
                if (v354)
                {
                  unint64_t v240 = v136;
                  obj_release(v354);
                  unint64_t v136 = v240;
                  unint64_t v117 = v319;
                }

                uint64_t v32 = 0LL;
                uint64_t v292 = v117 - v136;
                uint64_t v354 = 0LL;
                unint64_t v314 = v338;
                uint64_t v119 = v53;
                uint64_t v52 = a6;
                uint64_t v109 = v323;
                goto LABEL_572;
              }

              unint64_t v186 = v117 - v136;
              spaceman_free_extent_cache_insert(v365[v60 + 196], v302, v117 - v136, v174 + v136);
              if (a6 && v185 > (uint64_t)v311)
              {
                if (v159
                  && spaceman_clip_extent_to_zones( v9,  (uint64_t)v365,  v60,  v186,  v185,  v332,  v282,  &v348,  &v346))
                {
                  unint64_t v187 = v346;
                  if (v346 >= v53) {
                    unint64_t v187 = v53;
                  }
                  unint64_t v346 = v187;
                  unint64_t v188 = v311;
                  if (v187 <= v311) {
                    unint64_t v186 = v292;
                  }
                  else {
                    unint64_t v186 = v348;
                  }
                  if (v187 > v311) {
                    unint64_t v188 = v187;
                  }
                  unint64_t v311 = v188;
                }

                else
                {
                  if (v185 >= v53) {
                    unint64_t v193 = v53;
                  }
                  else {
                    unint64_t v193 = v185;
                  }
                  unint64_t v311 = v193;
                }
              }

              else
              {
                unint64_t v186 = v292;
              }

              unint64_t v194 = v174 + v319;
              BOOL v195 = v326;
              if (v194 < v331) {
                BOOL v195 = 0;
              }
              if (v195 && v194 < v330) {
                goto LABEL_414;
              }
              int v196 = v287;
              if (v194 < v336) {
                int v196 = 0;
              }
              if (v196 == 1 && v194 < v335)
              {
LABEL_414:
                uint64_t v185 = 0LL;
                unint64_t v194 = *v325 + (*(_DWORD *)(v323 + 32 * v338 + 56) & 0xFFFFF);
              }

              unint64_t v197 = *v313;
              if (v194 < *v313) {
                unint64_t v117 = v194;
              }
              else {
                unint64_t v117 = 0LL;
              }
              if (v354)
              {
                unint64_t v198 = v117;
                obj_release(v354);
                unint64_t v117 = v198;
              }

              uint64_t v354 = 0LL;
              if (v194 < v197 && v185)
              {
                unint64_t v136 = v185;
                uint64_t v292 = v186;
                uint64_t v52 = a6;
                __int16 v138 = v332;
                uint64_t v109 = v323;
                goto LABEL_520;
              }

              unint64_t v136 = 0LL;
              uint64_t v52 = a6;
              __int16 v138 = v332;
              unint64_t v134 = v305;
              if (v299 && v311)
              {
                unint64_t v136 = 0LL;
                uint64_t v32 = 0LL;
                unint64_t v314 = v338;
                uint64_t v292 = v186;
                goto LABEL_538;
              }

              uint64_t v292 = v186;
              uint64_t v109 = v323;
LABEL_347:
              if (++v338 >= v315)
              {
                uint64_t v32 = 0LL;
                unint64_t v314 = v281;
                goto LABEL_539;
              }

              goto LABEL_259;
            }

            uint64_t v178 = v358;
            if (!a6) {
              goto LABEL_434;
            }
            uint64_t v179 = v358 + v136;
            if (v159)
            {
              uint64_t v180 = v319 - v136;
              unint64_t v181 = v136;
              if ((spaceman_clip_extent_to_zones(v9, (uint64_t)v365, v60, v319 - v136, v179, v332, v282, &v348, &v346) & 1) != 0)
              {
                unint64_t v182 = v346;
                if (v346 >= v53) {
                  unint64_t v182 = v53;
                }
                unint64_t v346 = v182;
                unint64_t v183 = v311;
                unint64_t v184 = v292;
                if (v182 > v311) {
                  unint64_t v184 = v348;
                }
                uint64_t v292 = v184;
                if (v182 > v311) {
                  unint64_t v183 = v182;
                }
                unint64_t v117 = v319;
                unint64_t v136 = v181;
                uint64_t v177 = v296;
LABEL_431:
                unint64_t v311 = v183;
                if (v183 && v299)
                {
                  if (v354)
                  {
                    obj_release(v354);
                    unint64_t v117 = v319;
                  }

                  unint64_t v136 = 0LL;
                  uint64_t v32 = 0LL;
                  uint64_t v354 = 0LL;
                  goto LABEL_537;
                }

                uint64_t v178 = v358;
LABEL_434:
                unint64_t v199 = v117;
                spaceman_free_extent_cache_insert(v365[v60 + 196], v302, v117 - v136, v178 + v136);
                unint64_t v200 = v199 - v177;
                uint64_t v154 = v358;
                unint64_t v117 = v200 + v358;
                uint64_t v172 = v354;
                goto LABEL_435;
              }

              uint64_t v179 = v358 + v181;
              uint64_t v292 = v180;
              unint64_t v117 = v319;
              unint64_t v136 = v181;
              uint64_t v177 = v296;
            }

            else
            {
              uint64_t v292 = v319 - v136;
            }

            if (v179 >= v53) {
              unint64_t v183 = v53;
            }
            else {
              unint64_t v183 = v179;
            }
            goto LABEL_431;
          }

          else {
            log_err( "%s:%d: %s failed to search bitmap hints: %d\n",  "spaceman_alloc",  7255,  (const char *)(a1[48] + 208LL),  v105);
          }
        }

        int v106 = 0;
        goto LABEL_203;
      }

      int64_t v349 = v79;
      unint64_t v347 = v53;
      unsigned int v86 = v56 & 0xFFFFDFFF;
      if ((v328 & 1) != 0) {
        int v87 = 0x2000;
      }
      else {
        int v87 = 0;
      }
      unsigned int v332 = v86 | v87;
      int v88 = spaceman_free_extent_cache_search(v83, (unsigned __int16)v86 | (unsigned __int16)v87, &v349, &v347);
      uint64_t v52 = a6;
    }

    while (v88 == 28);
    unint64_t v310 = v347;
    uint64_t v292 = v349;
    if (v347 && !v349)
    {
      unint64_t v310 = 0LL;
      unint64_t v347 = 0LL;
    }

    if (v291 == (_DWORD)v60) {
      int v90 = 0;
    }
    else {
      int v90 = 3;
    }
    if (v88 != 3) {
      int v90 = v88;
    }
    if (v90 != 3)
    {
      if (!v90 && v310 && v349)
      {
        BOOL v248 = (v56 & 0x200) == 0 && v69;
        unsigned int v316 = 1;
        char v275 = 0;
        if (v248)
        {
          if (v349 >= (uint64_t)v335)
          {
            unint64_t v314 = v338;
            uint64_t v32 = 0LL;
          }

          else
          {
            if ((uint64_t)(v310 + v349) < (uint64_t)v336)
            {
              unint64_t v314 = v338;
              uint64_t v32 = 0LL;
            }

            else
            {
              int v249 = obj_type((uint64_t)a1);
              int v250 = (const char *)(a1 + 499);
              if (v249 != 13) {
                int v250 = (const char *)(a1[48] + 208LL);
              }
              log_debug( "%s:%d: %s Could not find data to allocate outside the soft block-out range, disable soft block-out range\n",  "spaceman_alloc",  7208,  v250);
              char v275 = 0;
              uint64_t v32 = 0LL;
              unsigned int v316 = 1;
              *(_BYTE *)(v9 + 636) = 1;
              *(void *)(v9 + 1784) = 0LL;
              unint64_t v314 = v338;
            }

            uint64_t v52 = a6;
          }
        }

        else
        {
          unint64_t v314 = v338;
          uint64_t v32 = 0LL;
        }

        uint64_t v109 = v322;
        uint64_t v119 = v310;
        goto LABEL_594;
      }

      int v333 = v332 | 0x100;
      LOBYTE(v70) = v337;
      goto LABEL_190;
    }

    __int128 v344 = 0u;
    __int128 v345 = 0u;
    __int128 v343 = 0u;
    *(void *)&__int128 v343 = v365[v60 + 196];
    *((void *)&v343 + 1) = v53;
    *(void *)&__int128 v344 = v310;
    *((void *)&v344 + 1) = spaceman_free_extent_cache_search_better_length(v332, v53, v310);
    *(void *)&__int128 v345 = 0LL;
    *((void *)&v345 + 1) = v332;
    int v91 = v365;
    BOOL v92 = &v365[v60];
    uint64_t v93 = v92 + 102;
    uint64_t v94 = v92[102];
    if ((v94 & 0x10) != 0)
    {
      uint64_t v95 = v92[102];
      do
      {
        *uint64_t v93 = v95 | 0x20;
        cv_wait( (pthread_cond_t *)v91 + 16,  (pthread_mutex_t *)v91 + 6,  8LL,  (uint64_t)"spaceman_alloc_fxc_scan_wait",  0LL);
        int v91 = v365;
        uint64_t v93 = &v365[v60 + 102];
        uint64_t v95 = *v93;
      }

      while ((*v93 & 0x10) != 0);
      *uint64_t v93 = v95 | 0x10;
      int v50 = v312;
      if ((v94 & 0x10) == 0 || *(void *)(v91[v60 + 196] + 128LL) < *((void *)&v344 + 1)) {
        goto LABEL_169;
      }
      uint64_t v32 = 0LL;
    }

    else
    {
      *uint64_t v93 = v94 | 0x10;
      int v50 = v312;
LABEL_169:
      pthread_mutex_unlock((pthread_mutex_t *)v91 + 6);
      if ((_DWORD)v60 == 1) {
        unsigned int v96 = 42;
      }
      else {
        unsigned int v96 = 38;
      }
      LODWORD(v32) = spaceman_iterate_free_extents_internal( v9,  v96,  0LL,  (uint64_t (*)(void *, unint64_t, int64_t))spaceman_alloc_fxc_scan_free_extent_callback,  &v343);
      pthread_mutex_lock((pthread_mutex_t *)v365 + 6);
      if ((_DWORD)v32 == 34 || (_DWORD)v32 == 37) {
        unsigned int v98 = 0;
      }
      else {
        unsigned int v98 = v32;
      }
      if ((_DWORD)v32 == HIDWORD(v345)) {
        uint64_t v32 = v98;
      }
      else {
        uint64_t v32 = v32;
      }
      int v291 = v60;
    }

    unint64_t v347 = 0LL;
    int64_t v349 = 0LL;
    int v99 = v365;
    uint64_t v100 = v365[v60 + 102];
    if ((v100 & 0x20) != 0)
    {
      cv_wakeup((pthread_cond_t *)v365 + 16);
      int v99 = v365;
      uint64_t v100 = v365[v60 + 102];
    }

    uint64_t v52 = a6;
    v99[v60 + 102] = v100 & 0xFFFFFFFFFFFFFFCFLL;
  }

  while (!(_DWORD)v32);
LABEL_654:
  if (v356) {
    obj_release(v356);
  }
  if (v355) {
    obj_release(v355);
  }
  if (v354) {
    obj_release(v354);
  }
  pthread_mutex_unlock((pthread_mutex_t *)v365 + 6);
  uint64_t v34 = v365;
  if ((_DWORD)v32)
  {
LABEL_661:
    uint64_t v259 = v34[198];
    if (v259) {
      ++*(void *)(v259 + 72);
    }
    obj_release(v34);
    return v32;
  }

  obj_release(v365);
  if ((v332 & 4) != 0) {
    return 0LL;
  }
  uint64_t v32 = 0LL;
  uint64_t v261 = *(void *)(v9 + 1760);
  if (!v261 || (v332 & 0x200) != 0) {
    return v32;
  }
  int64_t v262 = *(void *)(v9 + 1752);
  if (*(_BYTE *)(v9 + 636))
  {
    if (a6) {
      uint64_t v53 = *a6;
    }
    unint64_t v263 = *(void *)(v9 + 1784) + v53;
    *(void *)(v9 + 1784) = v263;
    if (v263 >= 0x401)
    {
      log_debug( "%s:%d: %s Found enough data to allocate outside the soft block-out range, re-enable soft block-out range\n",  "spaceman_alloc",  8085,  v309);
      uint64_t v32 = 0LL;
      *(_BYTE *)(v9 + 636) = 0;
      return v32;
    }

    return 0LL;
  }

  log_debug( "%s:%d: %s Space outside soft block-out range seems fragmented (requested %llu, but could alloc only %llu), disable s oft block-out range\n",  "spaceman_alloc",  8092,  v309,  v53,  *a6);
  uint64_t v32 = 0LL;
  *(_BYTE *)(v9 + 636) = 1;
  *(void *)(v9 + 1784) = 0LL;
  return v32;
}

uint64_t spaceman_alloc_fxc_scan_free_extent_callback(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t result = *(unsigned int *)(a1 + 44);
  if (!(_DWORD)result)
  {
    uint64_t v5 = *(void *)(a1 + 32);
    if (!v5)
    {
      *(void *)(a1 + 32) = a2;
      uint64_t v5 = a2;
    }

    if (*(void *)(a1 + 24) <= a3)
    {
      uint64_t result = 37LL;
    }

    else
    {
      uint64_t v6 = *(unsigned int *)(*(void *)(*(void *)(*(void *)a1 + 8LL) + 376LL) + 36LL);
      uint64_t result = spaceman_free_extent_cache_scan_should_pause(*(void *)a1, (a2 - v5 / v6 * v6) / v6);
      if (!(_DWORD)result) {
        return result;
      }
      uint64_t result = 34LL;
    }

    *(_DWORD *)(a1 + 44) = result;
  }

  return result;
}

double spaceman_search_bitmap_hints_for_space(unint64_t a1, unsigned int a2, uint64_t a3, _OWORD *a4)
{
  char v6 = 0;
  __int128 v7 = *(_OWORD *)(a3 + 16);
  __int128 v8 = *(_OWORD *)(a3 + 32);
  v62[0] = *(_OWORD *)a3;
  v62[1] = v7;
  uint64_t v9 = *(void *)(a1 + 376);
  int v58 = *(unsigned __int8 *)(a3 + 16);
  int v52 = *(unsigned __int8 *)(a3 + 40);
  unint64_t v10 = *(void *)a3 / (uint64_t)*(unsigned int *)(v9 + 36);
  unint64_t v11 = v10;
  v62[2] = v8;
  uint64_t v13 = (void *)(a1 + 8LL * a2 + 1488);
  uint64_t v14 = *v13 + 4 * v10;
  uint64_t v56 = *(void *)(a3 + 8);
  *(void *)&__int128 v15 = 0LL;
  a4[1] = 0u;
  a4[2] = 0u;
  *a4 = 0u;
  uint64_t v57 = v9;
  BOOL v16 = (void *)(v9 + 48LL * a2 + 56);
  uint64_t v53 = v14;
  do
  {
    if (!v58)
    {
      int v29 = 1;
      uint64_t v30 = v56;
      uint64_t v14 = v53;
      unint64_t v31 = v10;
      goto LABEL_24;
    }

    uint64_t v17 = *(void *)(a1 + 376);
    if ((*(_BYTE *)(v14 + 3) & 0xC) == 0)
    {
      uint64_t v18 = v17 + 48LL * a2;
      unint64_t v19 = *(void *)(v18 + 56);
      if (v19 <= v11) {
        goto LABEL_19;
      }
      uint64_t v20 = *(void *)(a3 + 32);
      if (!v20) {
        goto LABEL_19;
      }
      unint64_t v21 = *(unsigned int *)(v17 + 36);
      uint64_t v22 = v21;
      if (v19 - 1 == v11) {
        uint64_t v22 = *(void *)(v18 + 48) % v21;
      }
      if (!calc_overlap_range(v11 * v21, v22, *(void *)(a3 + 24), v20, 0LL))
      {
LABEL_19:
        if (v11 == v10)
        {
          int v29 = 1;
        }

        else
        {
          int v29 = 0;
          *(void *)&v62[0] = v11 * *(unsigned int *)(v57 + 36);
        }

        unint64_t v31 = v11;
        uint64_t v30 = v56;
        goto LABEL_24;
      }

      uint64_t v17 = *(void *)(a1 + 376);
    }

    uint64_t v23 = v17 + 48LL * a2;
    unint64_t v24 = *(void *)(v23 + 56);
    if (v24 > v11 && (uint64_t v25 = *(void *)(a3 + 32)) != 0)
    {
      unint64_t v26 = *(unsigned int *)(v17 + 36);
      uint64_t v27 = v26;
      if (v24 - 1 == v11) {
        uint64_t v27 = *(void *)(v23 + 48) % v26;
      }
      BOOL v28 = calc_overlap_range(v11 * v26, v27, *(void *)(a3 + 24), v25, 0LL) != 0;
    }

    else
    {
      BOOL v28 = 0;
    }

    v6 |= v28;
    unint64_t v11 = (v11 + 1) % *v16;
    uint64_t v14 = *v13 + 4 * v11;
  }

  while (v11 != v10);
  if ((v6 & 1) == 0) {
    return *(double *)&v15;
  }
  int v29 = 1;
  uint64_t v30 = v56;
  unint64_t v31 = v10;
LABEL_24:
  if (v30 < 2) {
    goto LABEL_55;
  }
  LODWORD(v32) = *(_DWORD *)v14 & 0xFFFFFF;
  if ((*(_DWORD *)v14 & 0x2000000) != 0 && v31 < *v16 - 1LL)
  {
    int v33 = *(_DWORD *)(*v13 + 4 * v31 + 4);
    if ((v33 & 0x1000000) != 0 && (!v58 || (v33 & 0xC000000) == 0))
    {
      unsigned int v42 = v33 & 0xFFFFFF;
      int v37 = v52;
      if (v52)
      {
        uint64_t v36 = (uint64_t)a4;
        uint64_t v34 = v57;
        unsigned int v35 = *(_DWORD *)(v57 + 36);
        goto LABEL_32;
      }

      else {
        unint64_t v32 = v32;
      }
      if (v30 >= v32) {
        uint64_t v30 = v32;
      }
LABEL_55:
      uint64_t v36 = (uint64_t)a4;
      uint64_t v34 = v57;
      goto LABEL_56;
    }
  }

  uint64_t v34 = v57;
  unsigned int v35 = *(_DWORD *)(v57 + 36);
  uint64_t v36 = (uint64_t)a4;
  int v37 = v52;
  if (!v52)
  {
LABEL_36:
    *(void *)&v62[0] = v31 * v35;
    spaceman_iterate_bitmap_hints(a1, a2, 0LL, (uint64_t)v62, v36);
    uint64_t v39 = *(void *)(v36 + 8);
    if (v37) {
      BOOL v40 = v39 < v30;
    }
    else {
      BOOL v40 = 0;
    }
    int v41 = v40;
    if (!v39 || v41)
    {
      __int128 v15 = *(_OWORD *)(v36 + 24);
      *(_OWORD *)uint64_t v36 = v15;
      *(void *)(v36 + 16) = *(void *)(v36 + 40);
      *(void *)(v36 + 24) = 0LL;
      *(void *)(v36 + 32) = 0LL;
      *(void *)(v36 + 40) = 0LL;
    }

    return *(double *)&v15;
  }

uint64_t spaceman_modify_bits( void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, char a8)
{
  uint64_t v9 = a4;
  uint64_t v10 = a3;
  uint64_t v11 = (uint64_t)a1;
  uint64_t v107 = 0LL;
  unint64_t v111 = 0LL;
  char v109 = 0;
  uint64_t v12 = *(unsigned int **)(a3 + 376);
  uint64_t v135 = 0LL;
  uint64_t v136 = 0LL;
  unint64_t v133 = 0LL;
  uint64_t v134 = 0LL;
  char v13 = __clz(__rbit64(*(unsigned int *)(a1[47] + 36LL)));
  uint64_t v131 = 0LL;
  unsigned int v132 = 0LL;
  uint64_t v14 = ((uint64_t)0xBFFFFFFFFFFFFFFFLL >> v13) & a4;
  uint64_t v15 = ((unint64_t)(a4 << v13) >> 62) & 1;
  BOOL v16 = (pthread_mutex_t *)(a3 + (v15 << 6) + 640);
  uint64_t v17 = &v12[12 * v15 + 17];
  uint64_t v108 = v15;
  int v105 = (uint64_t *)(a3 + 8 * v15 + 888);
  int v106 = v16;
  unsigned int v121 = (pthread_mutex_t *)(a3 + 576);
  if (a2) {
    uint64_t v18 = a2;
  }
  else {
    uint64_t v18 = a1;
  }
  uint64_t v102 = (uint64_t)v18;
  int v101 = (const char *)(v18 + 499);
  unsigned int v103 = (const char *)(a2 + 499);
  unsigned int v110 = -1;
  unint64_t v115 = v12;
  uint64_t v104 = (uint64_t)&v12[12 * v15 + 17];
  while (1)
  {
    uint64_t v128 = v9;
    pthread_mutex_lock(v16);
    unint64_t v19 = v14 / v12[9];
    unint64_t v20 = v19 / v12[10];
    uint64_t v130 = v14;
    unsigned int v123 = *v17;
    if (*v17)
    {
      unsigned int v21 = v20 / v12[11];
      if (v21 != v110 || v107 == 0)
      {
        unint64_t v111 = *(void *)(*v105 + 8LL * v21);
        if (v136)
        {
          obj_release(v136);
          uint64_t v136 = 0LL;
        }

        unsigned int v132 = v12;
        unint64_t v133 = __PAIR64__(v21, v108);
        uint64_t v23 = obj_get(*(void *)(v11 + 392), 1073741829LL, v111, &sm_cab_desc, &v132, 0LL, 0LL, a6, &v136);
        if ((_DWORD)v23)
        {
          uint64_t v96 = v23;
          log_err( "%s:%d: %s error getting cab %d @ %lld: %d\n",  "spaceman_modify_bits",  5492,  (const char *)(*(void *)(v11 + 384) + 208LL),  v21,  v111,  v23);
          char v95 = 0;
          goto LABEL_127;
        }

        uint64_t v107 = *(void *)(v136 + 56);
        unsigned int v110 = v21;
      }

      else
      {
        obj_lock(v136, 2);
      }

      pthread_mutex_unlock(v16);
      if (obj_xid(v136) == a6)
      {
        uint64_t v25 = v111;
        unsigned int v26 = v110;
      }

      else
      {
        uint64_t v27 = spaceman_ip_block_alloc(v11, v10, a6, (unint64_t *)&v131);
        if ((_DWORD)v27)
        {
          uint64_t v96 = v27;
          if (nx_ratelimit_log_allowed(v11)) {
            log_err( "%s:%d: %s failed to allocate block from internal pool: %d\n",  "spaceman_modify_bits",  5511,  (const char *)(*(void *)(v11 + 384) + 208LL),  v96);
          }
          char v95 = 0;
          char v109 = 1;
          goto LABEL_128;
        }

        uint64_t v25 = v131;
        unsigned int v26 = v110;
        *(void *)(*v105 + 8LL * v110) = v131;
        obj_dirty(v136, a6, v25);
        uint64_t v28 = spaceman_ip_block_free(v11, (pthread_mutex_t *)v10, v111, a6);
        if ((_DWORD)v28)
        {
          uint64_t v96 = v28;
          log_err( "%s:%d: %s failed to free internal pool block %lld: %d\n",  "spaceman_modify_bits",  5518,  (const char *)(*(void *)(v11 + 384) + 208LL),  v111,  v28);
          char v95 = 0;
          char v109 = 1;
          goto LABEL_128;
        }
      }

      uint64_t v24 = v107 + 40;
      unint64_t v29 = v12[10];
      LODWORD(v20) = v20 - v12[11] * v26;
      unsigned int v132 = v12;
      LODWORD(v133) = v108;
      HIDWORD(v133) = v19 / v29;
      char v109 = 1;
      unint64_t v111 = v25;
    }

    else
    {
      uint64_t v24 = *v105;
      unsigned int v132 = v12;
      unint64_t v133 = __PAIR64__(v20, v108);
      if (!v24)
      {
        char v95 = 0;
        uint64_t v96 = 22LL;
        BOOL v16 = v106;
        goto LABEL_127;
      }
    }

    unint64_t v30 = *(void *)(v24 + 8LL * v20);
    uint64_t v31 = obj_get(*(void *)(v11 + 392), 1073741829LL, v30, &sm_cib_desc, &v132, 0LL, 0LL, a6, &v135);
    if ((_DWORD)v31)
    {
      uint64_t v96 = v31;
      if (v110 == -1) {
        int v94 = 0;
      }
      else {
        int v94 = v12[11] * v110;
      }
      BOOL v16 = v106;
      log_err( "%s:%d: %s error getting cib %d @ %lld: %d\n",  "spaceman_modify_bits",  5544,  (const char *)(*(void *)(v11 + 384) + 208LL),  v94 + v20,  v30,  v31);
      char v95 = 0;
      goto LABEL_124;
    }

    uint64_t v126 = *(void *)(v135 + 56);
    if (obj_xid(v135) == a6)
    {
      uint64_t v116 = v30;
      BOOL v16 = v106;
      uint64_t v32 = v126;
      goto LABEL_29;
    }

    uint64_t v33 = spaceman_ip_block_alloc(v11, v10, a6, (unint64_t *)&v131);
    if ((_DWORD)v33) {
      break;
    }
    *(void *)(v24 + 8LL * v20) = v131;
    if (v136) {
      obj_dirty(v136, a6, v111);
    }
    uint64_t v116 = v131;
    obj_dirty(v135, a6, v131);
    uint64_t v34 = spaceman_ip_block_free(v11, (pthread_mutex_t *)v10, v30, a6);
    BOOL v16 = v106;
    uint64_t v32 = v126;
    if ((_DWORD)v34)
    {
      uint64_t v96 = v34;
      log_err( "%s:%d: %s failed to free internal pool block %lld: %d\n",  "spaceman_modify_bits",  5564,  (const char *)(*(void *)(v11 + 384) + 208LL),  v30,  v34);
      char v95 = 1;
      goto LABEL_124;
    }

LABEL_29:
    if (!v123) {
      pthread_mutex_unlock(v16);
    }
    uint64_t v35 = a6;
    if (v136)
    {
      obj_unlock(v136, 2);
      char v109 = 0;
    }

    unint64_t v36 = v19 % v12[10];
    uint64_t v37 = v32 + 32 * v36;
    unint64_t v40 = *(void *)(v37 + 64);
    uint64_t v39 = (uint64_t *)(v37 + 64);
    unint64_t v38 = v40;
    if (a7 == 1)
    {
LABEL_34:
      if (v38) {
        goto LABEL_35;
      }
      if (((*(_DWORD *)(v32 + 32 * v36 + 56) ^ *(_DWORD *)(v32 + 32 * v36 + 60)) & 0xFFFFF) != 0) {
        uint64_t v96 = nx_corruption_detected_int(v11);
      }
      else {
        uint64_t v96 = 22LL;
      }
      char v95 = 1;
      goto LABEL_128;
    }

    while (1)
    {
LABEL_35:
      if (v38)
      {
        uint64_t v41 = obj_get(*(void *)(v11 + 392), 1073741825LL, v38, &sm_bm_desc, 0LL, 0LL, 0LL, v35, &v134);
        if ((_DWORD)v41)
        {
          uint64_t v96 = v41;
          log_err("%s:%d: %s error getting cib %d bitmap %d @ %lld: %d\n");
LABEL_117:
          char v95 = 1;
          goto LABEL_128;
        }

        unsigned int v42 = *(_DWORD **)(v134 + 56);
      }

      else
      {
        unsigned int v42 = 0LL;
      }

      uint64_t v43 = (uint64_t *)(v32 + 32 * v36 + 40);
      uint64_t v44 = v12[9];
      uint64_t v45 = v130 % v44;
      int64_t v46 = v44 - v130 % v44;
      if (a5 >= v46) {
        unint64_t v47 = v46;
      }
      else {
        unint64_t v47 = a5;
      }
      if (v38 && *v43 == v35)
      {
        unint64_t v48 = v38;
        unint64_t v49 = a1;
      }

      else
      {
        uint64_t v50 = spaceman_ip_block_alloc((uint64_t)a1, v10, v35, (unint64_t *)&v131);
        if ((_DWORD)v50)
        {
          uint64_t v93 = v50;
          log_err("%s:%d: %s failed to allocate block from internal pool: %d\n");
          goto LABEL_115;
        }

        *uint64_t v43 = v35;
        unint64_t v48 = v131;
        uint64_t *v39 = v131;
        if (v38)
        {
          obj_dirty(v134, v35, v48);
          unint64_t v49 = a1;
          uint64_t v51 = spaceman_ip_block_free((uint64_t)a1, (pthread_mutex_t *)v10, v38, v35);
          if ((_DWORD)v51)
          {
            uint64_t v93 = v51;
            log_err("%s:%d: %s failed to free internal pool block %lld: %d\n");
LABEL_115:
            char v95 = 1;
            uint64_t v96 = v93;
            goto LABEL_128;
          }
        }

        else
        {
          unint64_t v49 = a1;
          uint64_t v52 = obj_create(a1[49], 0x40000000, v48, (int)&sm_bm_desc, 0, 0, v35, (uint64_t)&v134);
          if ((_DWORD)v52)
          {
            uint64_t v96 = v52;
            log_err("%s:%d: %s failed to create bitmap object %lld: %d\n");
            goto LABEL_117;
          }

          unsigned int v42 = *(_DWORD **)(v134 + 56);
        }
      }

      uint64_t v122 = v48;
      unint64_t v124 = v47;
      uint64_t v53 = *(void *)(v10 + 376);
      char v54 = __clz(__rbit64(*(unsigned int *)(v49[47] + 36LL)));
      unint64_t v55 = (0x4000000000000000uLL >> v54) & v128;
      if (a7 == 1)
      {
        uint64_t v117 = *(void *)(v10 + 376);
        unsigned int v119 = v55 != 0;
        unint64_t v56 = bitmap_count_bits((uint64_t)v42, 0, v45, v47 + v45);
        unint64_t v57 = v56;
        if (v56) {
          log_err( "%s:%d: %s freeing 0x%llx:%lld, but %lld bits are already clear.  Double free?\n",  "spaceman_clear_bits_in_bm",  5290,  (const char *)(a1[48] + 208LL),  v128,  a5,  v56);
        }
        int64_t v58 = ((uint64_t)0xBFFFFFFFFFFFFFFFLL >> v54) & v128;
        uint64_t v59 = a1[47];
        uint64_t v60 = *(void *)(v59 + 1248);
        if (!v60
          || (uint64_t v61 = *(void *)(v59 + 1240),
              char v62 = __clz(__rbit64(*(unsigned int *)(v59 + 36))),
              (v55 != 0) == (((v61 << v62) & 0x4000000000000000LL) == 0)))
        {
          uint64_t v63 = a5;
          unint64_t v65 = 0LL;
          unint64_t v66 = v57;
        }

        else
        {
          uint64_t v63 = a5;
          unint64_t v137 = 0LL;
          unint64_t v64 = calc_overlap_range(v58, v47, ((uint64_t)0xBFFFFFFFFFFFFFFFLL >> v62) & v61, v60, &v137);
          unint64_t v65 = v64;
          if (v64) {
            unint64_t v64 = bitmap_count_bits( (uint64_t)v42,  0,  v137 - *(void *)(v126 + 32 * v36 + 48),  v137 + v64 - *(void *)(v126 + 32 * v36 + 48));
          }
          unint64_t v66 = v57 - v64;
        }

        BOOL v68 = v55 != 0;
        bitmap_clear_range((uint64_t)v42, v45, v47);
        update_bm_hint(a3, v119, v42, v58 / *(unsigned int *)(v117 + 36));
        unint64_t v120 = v36;
        *(_DWORD *)(v126 + 32 * v36 + 60) += v47 - v57;
        pthread_mutex_lock(v121);
        *(void *)(v117 + 48 * v68 + 72) += v47 - v66 - v65;
        a5 = v63;
        uint64_t v10 = a3;
        uint64_t v12 = v115;
        if ((a8 & 1) != 0)
        {
          uint64_t v69 = a3 + 8 * v68;
          unint64_t v70 = *(void *)(v69 + 976);
          BOOL v71 = v70 >= v47;
          unint64_t v72 = v70 - v47;
          if (!v71) {
            unint64_t v72 = 0LL;
          }
          *(void *)(v69 + 976) = v72;
        }

        goto LABEL_98;
      }

      uint64_t v67 = v126 + 32 * v36;
      if (bitmap_range_is_clear((uint64_t)v42, v45, v47))
      {
        bitmap_set_range((uint64_t)v42, v45, v47);
        unint64_t v120 = v36;
        update_bm_hint( v10,  v55 != 0,  v42,  v36 + *(unsigned int *)(v53 + 40) * (unint64_t)*(unsigned int *)(v126 + 32));
        pthread_mutex_lock(v121);
        *(_DWORD *)(v67 + 60) -= v47;
        uint64_t v118 = v53;
        *(void *)(v53 + 48LL * (v55 != 0) + 72) -= v47;
        if ((a8 & 1) != 0)
        {
          uint64_t v75 = v10 + 8LL * (v55 != 0);
          BOOL v76 = (void *)(v75 + 848);
          unint64_t v77 = *(void *)(v75 + 848);
          if (*(void *)(v75 + 832) < v77)
          {
            unint64_t v78 = "Main";
            if (v55) {
              unint64_t v78 = "T2";
            }
            panic( "%s, Reserved space < reserved metadata: %llu < %llu\n",  v78,  *(void *)(v10 + 832),  *(void *)(v10 + 848));
          }

          uint64_t v79 = (void *)(v75 + 832);
          uint64_t v12 = v115;
          if ((a8 & 0x40) != 0)
          {
            if (v77 < v47) {
              panic("reserved metadata space underflow: %lld (%lld)\n", v77, v47);
            }
            *BOOL v76 = v77 - v47;
            *v79 -= v47;
          }

          else
          {
            if (*v79 - v77 >= v47)
            {
              unint64_t v77 = *v79 - v47;
            }

            else if (obj_type(v102) == 13)
            {
              log_err( "%s:%d: %s reserved space underflow: %lld (+meta:%llu) < %lld\n",  "spaceman_set_bits_in_bm",  5403,  v101,  *v79 - v77,  v77,  v47);
            }

            else
            {
              log_err( "%s:%d: %s reserved space underflow: %lld (+meta:%llu) < %lld\n",  "spaceman_set_bits_in_bm",  5403,  (const char *)(*(void *)(v102 + 384) + 208LL),  *v79 - v77,  v77,  v47);
            }

            *uint64_t v79 = v77;
          }

          if (!a2) {
            goto LABEL_98;
          }
          unint64_t v80 = a2[51];
          BOOL v71 = v80 >= v47;
          unint64_t v81 = v80 - v47;
          if (!v71)
          {
            int v82 = obj_type((uint64_t)a2);
            uint64_t v83 = v103;
            if (v82 != 13) {
              uint64_t v83 = (const char *)(a2[48] + 208LL);
            }
            log_err( "%s:%d: %s fs reserved space underflow: %lld (%lld)\n",  "spaceman_set_bits_in_bm",  5415,  v83,  a2[51],  v47);
            unint64_t v81 = 0LL;
          }

          a2[51] = v81;
        }

        else
        {
          uint64_t v12 = v115;
          if (!a2) {
            goto LABEL_98;
          }
        }

        uint64_t v84 = a2[47];
        unint64_t v85 = *(void *)(v84 + 88);
        *(void *)(v84 + 88) = v85 + v47;
        unint64_t v86 = *(void *)(v84 + 72);
        if (v85 + v47 <= v86)
        {
          unint64_t v89 = (void *)(v118 + 192);
          unint64_t v87 = *(void *)(v118 + 192);
          uint64_t v88 = a6;
        }

        else
        {
          BOOL v71 = v86 >= v85;
          unint64_t v87 = v86 - v85;
          uint64_t v88 = a6;
          if (v87 == 0 || !v71) {
            goto LABEL_97;
          }
          unint64_t v89 = (void *)(v118 + 192);
          unint64_t v47 = *(void *)(v118 + 192);
        }

        void *v89 = v87 + v47;
LABEL_97:
        fs_sb_dirty((uint64_t)a2, v88);
LABEL_98:
        pthread_mutex_unlock(v121);
        char v74 = 0;
        uint64_t v96 = 0LL;
        int v73 = 1;
        uint64_t v11 = (uint64_t)a1;
        unint64_t v36 = v120;
        goto LABEL_99;
      }

      int v73 = 0;
      uint64_t v96 = 22LL;
      char v74 = 1;
      uint64_t v11 = (uint64_t)a1;
      uint64_t v12 = v115;
LABEL_99:
      obj_dirty(v10, a6, 0LL);
      obj_dirty(v135, a6, v116);
      obj_dirty(v134, a6, v122);
      obj_release(v134);
      uint64_t v134 = 0LL;
      uint64_t v9 = v124 + v128;
      v130 += v124;
      a5 -= v124;
      uint64_t v32 = v126;
      v128 += v124;
      ++v36;
      uint64_t v90 = v126 + 32 * v36;
      unint64_t v91 = *(void *)(v90 + 64);
      uint64_t v39 = (uint64_t *)(v90 + 64);
      unint64_t v38 = v91;
      uint64_t v35 = a6;
      if (a7 == 1) {
        goto LABEL_34;
      }
    }

    obj_unlock(v135, 2);
    obj_release(v135);
    uint64_t v135 = 0LL;
    if (a5 < 1) {
      char v92 = 1;
    }
    else {
      char v92 = v74;
    }
    BOOL v16 = v106;
    uint64_t v14 = v130;
    uint64_t v17 = (unsigned int *)v104;
    if ((v92 & 1) != 0)
    {
      char v95 = 0;
      goto LABEL_128;
    }
  }

  uint64_t v96 = v33;
  log_err( "%s:%d: %s failed to allocate block from internal pool: %d\n",  "spaceman_modify_bits",  5554,  (const char *)(*(void *)(v11 + 384) + 208LL),  v33);
  char v95 = 1;
  BOOL v16 = v106;
LABEL_124:
  if (!v123) {
LABEL_127:
  }
    pthread_mutex_unlock(v16);
LABEL_128:
  if (v136 && (v109 & 1) != 0) {
    obj_unlock(v136, 2);
  }
  char v97 = v95 ^ 1;
  if (!v135) {
    char v97 = 1;
  }
  if ((v97 & 1) == 0) {
    obj_unlock(v135, 2);
  }
  if (v136) {
    obj_release(v136);
  }
  if (v135) {
    obj_release(v135);
  }
  if (v134) {
    obj_release(v134);
  }
  if (a7 == 1)
  {
    if ((_DWORD)v96)
    {
      if (a5)
      {
        uint64_t v98 = a3 + 8 * v108;
        uint64_t v99 = *(void *)(v98 + 976);
        if (v99) {
          *(void *)(v98 + 976) = v99 - a5;
        }
      }
    }
  }

  return v96;
}

    pthread_mutex_unlock((pthread_mutex_t *)(v21 + 576));
    pthread_mutex_unlock((pthread_mutex_t *)(v21 + 384));
    obj_release(v21);
  }

  return v8;
}

        _apfs_free(v10, v8);
        goto LABEL_7;
      }

      *a2 = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x189604DB0], 0LL, MEMORY[0x189605228]);
      IOServiceClose(v20);
      if (*a2) {
        return 0LL;
      }
      else {
        return 12LL;
      }
    }

    else
    {
      return 22LL;
    }
  }

  return result;
}

      *(void *)(a1 + 88) = 3735928559LL;
      goto LABEL_30;
    }

    uint64_t v14 = *(void **)(a1 + 96);
    if ((v13 & 0x8000000) != 0)
    {
      if (!v12)
      {
        *(void *)(v4 + 760) = v14;
        goto LABEL_28;
      }
    }

    else if (!v12)
    {
      *(void *)(v4 + 744) = v14;
LABEL_28:
      char *v14 = v12;
      goto LABEL_29;
    }

    *(void *)(v12 + 96) = v14;
    uint64_t v14 = *(void **)(a1 + 96);
    goto LABEL_28;
  }

uint64_t spaceman_free(const char *a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  BOOL v24 = 0;
  if (obj_type((uint64_t)a1) == 13)
  {
    uint64_t v9 = *((void *)a1 + 49);
    uint64_t v10 = (uint64_t)a1;
  }

  else
  {
    uint64_t v10 = 0LL;
    uint64_t v9 = (uint64_t)a1;
  }

  else {
    uint64_t v11 = 1LL;
  }
  BOOL is_current_tx = xid_is_current_tx(v9, a5);
  uint64_t v13 = 22LL;
  if (a4 >= 1 && is_current_tx)
  {
    uint64_t v25 = 0LL;
    uint64_t v13 = spaceman_get(v9, &v25);
    if (!(_DWORD)v13)
    {
      uint64_t v14 = v25;
      uint64_t v15 = *(void *)(v25 + 1584);
      if (v15)
      {
        uint64_t v16 = *(void *)(v15 + 104) + a4;
        ++*(void *)(v15 + 96);
        *(void *)(v15 + 104) = v16;
      }

      int v17 = spaceman_extent_check((void *)v9, v14, a3, a4);
      if (v17)
      {
        int v18 = v17;
        if (nx_ratelimit_log_allowed(*(void *)(*(void *)a1 + 392LL)))
        {
          else {
            unint64_t v19 = (const char *)(*((void *)a1 + 48) + 208LL);
          }
          log_err( "%s:%d: %s attempt to free extent (0x%llx:0x%llx) which should not be freed: %d\n",  "spaceman_free",  8194,  v19,  a3,  a4,  v18);
        }

        uint64_t v13 = 22LL;
        goto LABEL_23;
      }

      uint64_t v13 = obj_modify(v25, 0LL, a5);
      if (!(_DWORD)v13)
      {
        if (*(_BYTE *)(v9 + 629))
        {
          int is_allocated_in_stable_state = spaceman_is_allocated_in_stable_state((void *)v9, a3, a4, &v24);
          if (is_allocated_in_stable_state | v24)
          {
            uint64_t v13 = 0LL;
            goto LABEL_23;
          }

          pthread_mutex_lock((pthread_mutex_t *)(v25 + 384));
          uint64_t v13 = spaceman_freed((void *)v9, v25, a3, a4, a5);
          dev_unmap_flush(*(void *)(v9 + 384));
          if (v10 && !(_DWORD)v13)
          {
            spaceman_free_fs_deduct_block_counts(v10, v25, a4, a5);
            obj_dirty(v25, a5, 0LL);
          }

          uint64_t v23 = (pthread_mutex_t *)(v25 + 384);
        }

        else
        {
          pthread_mutex_lock((pthread_mutex_t *)(v25 + 512));
          uint64_t v22 = spaceman_fq_tree_insert(v9, v25, v11, a3, a4, a5);
          uint64_t v13 = v22;
          if (v10 && !(_DWORD)v22)
          {
            pthread_mutex_lock((pthread_mutex_t *)(v25 + 384));
            spaceman_free_fs_deduct_block_counts(v10, v25, a4, a5);
            obj_dirty(v25, a5, 0LL);
            pthread_mutex_unlock((pthread_mutex_t *)(v25 + 384));
          }

          uint64_t v23 = (pthread_mutex_t *)(v25 + 512);
        }

        pthread_mutex_unlock(v23);
      }

LABEL_23:
      obj_release(v25);
    }
  }

  return v13;
}

        *(_BYTE *)(a1 + 65) = 0;
        goto LABEL_24;
      }
    }
  }

  return v4;
}

          IOObjectRelease(v18);
          goto LABEL_24;
        }

        uint64_t v13 = 49154LL;
      }

      else
      {
        uint64_t v13 = 49231LL;
      }

      int v18 = parent;
      goto LABEL_23;
    }
  }

  else
  {
    apfs_io_object = get_apfs_io_object(__s);
    if ((_DWORD)apfs_io_object)
    {
      uint64_t v12 = (uint64_t)apfs_io_object;
      first_child_of_class = get_first_child_of_class((uint64_t)apfs_io_object, "AppleAPFSContainer");
      parent = first_child_of_class;
      if (!first_child_of_class)
      {
        if (!a5 || (first_child_of_class = physical_store_to_container(v12), (parent = first_child_of_class) == 0))
        {
          uint64_t v13 = 49231LL;
          goto LABEL_24;
        }
      }

      goto LABEL_17;
    }
  }

  return 49154LL;
}

uint64_t spaceman_is_allocated_in_stable_state(void *a1, unint64_t a2, uint64_t a3, BOOL *a4)
{
  __int128 v8 = (pthread_mutex_t *)a1[52];
  pthread_mutex_lock(v8 + 8);
  pthread_mutex_lock(v8 + 6);
  uint64_t v9 = spaceman_check_allocation_status_internal(a1, (uint64_t)v8, 1, a2, a3, a4, 0LL);
  pthread_mutex_unlock(v8 + 6);
  pthread_mutex_unlock(v8 + 8);
  return v9;
}

uint64_t spaceman_freed(void *a1, uint64_t a2, unint64_t a3, unint64_t a4, uint64_t a5)
{
  int v10 = spaceman_extent_check(a1, a2, a3, a4);
  if (v10)
  {
    int v11 = v10;
    if (nx_ratelimit_log_allowed((uint64_t)a1)) {
      log_err( "%s:%d: %s attempt to free extent (0x%llx:0x%llx) which should not be free: %d\n",  "spaceman_freed",  5744,  (const char *)(a1[48] + 208LL),  a3,  a4,  v11);
    }
    return 22LL;
  }

  dev_unmap(a1[48], a3);
  return spaceman_freed_internal(a1, a2, a3, a4, 0, a5);
}

void spaceman_free_fs_deduct_block_counts(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v7 = *(void *)(a2 + 376);
  __int128 v8 = (pthread_mutex_t *)(a2 + 576);
  pthread_mutex_lock((pthread_mutex_t *)(a2 + 576));
  uint64_t v9 = *(void *)(a1 + 376);
  unint64_t v10 = *(void *)(v9 + 88);
  BOOL v11 = v10 >= a3;
  unint64_t v12 = v10 - a3;
  if (v11)
  {
    *(void *)(v9 + 88) = v12;
  }

  else
  {
    uint64_t v13 = obj_oid(a1);
    log_err( "%s:%d: %s fs %lld alloc count underflow: %lld (%lld)\n",  "spaceman_free_fs_deduct_block_counts",  8118,  (const char *)(a1 + 3992),  v13,  *(void *)(*(void *)(a1 + 376) + 88LL),  a3);
    unint64_t v12 = 0LL;
    uint64_t v9 = *(void *)(a1 + 376);
    *(void *)(v9 + 88) = 0LL;
  }

  unint64_t v14 = *(void *)(v9 + 72);
  if (v14)
  {
    unint64_t v15 = v12 + a3;
    BOOL v11 = v14 >= v12;
    unint64_t v16 = v14 - v12;
    if (!v11) {
      unint64_t v16 = 0LL;
    }
    if (v15 <= v14) {
      unint64_t v16 = a3;
    }
    unint64_t v17 = *(void *)(v7 + 192);
    unint64_t v18 = v17 - v16;
    if (v17 < v16)
    {
      log_err( "%s:%d: %s spaceman fs reserve alloc count underflow: %lld (%lld)\n",  "spaceman_free_fs_deduct_block_counts",  8133,  (const char *)(a1 + 3992),  *(void *)(v7 + 192),  v16);
      unint64_t v18 = 0LL;
    }

    *(void *)(v7 + 192) = v18;
  }

  pthread_mutex_unlock(v8);
  fs_sb_dirty(a1, a4);
}

uint64_t spaceman_fq_tree_insert( uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12 = *(void *)(a2 + 376);
  uint64_t v36 = 0LL;
  v35[0] = 0LL;
  __int128 v32 = 0uLL;
  uint64_t v33 = 0LL;
  *((void *)&v31 + 1) = 0LL;
  uint64_t v13 = spaceman_fq_tree_get(a1, a2, a3, a6, 1, &v36);
  if (!(_DWORD)v13)
  {
    *(void *)&__int128 v31 = 0LL;
    *(void *)&__int128 v34 = a6;
    *((void *)&v34 + 1) = a4;
    int v29 = 8;
    unsigned int v30 = 16;
    uint64_t v14 = bt_lookup_variant(v36, 0LL, (unint64_t *)&v34, &v30, 0x10u, v35, (unsigned int *)&v29, 1u, 0, 0LL);
    if ((_DWORD)v14 == 2) {
      goto LABEL_13;
    }
    uint64_t v13 = v14;
    if ((_DWORD)v14) {
      goto LABEL_43;
    }
    if ((void)v34 != a6) {
      goto LABEL_13;
    }
    if (v29)
    {
      uint64_t v15 = v35[0];
    }

    else
    {
      uint64_t v15 = 1LL;
      v35[0] = 1LL;
    }

    if (v15 + *((void *)&v34 + 1) <= a4)
    {
      if (v15 + *((void *)&v34 + 1) != a4) {
        goto LABEL_13;
      }
    }

    else
    {
      log_err( "%s:%d: %s range 0x%llx:%lld overlaps with recently-freed range 0x%llx:%lld\n",  "spaceman_fq_tree_insert",  4542,  (const char *)(*(void *)(a1 + 384) + 208LL),  a4,  a5,  *((void *)&v34 + 1),  v15);
      uint64_t v15 = v35[0];
      a5 += a4 - (v35[0] + *((void *)&v34 + 1));
      if (a5 < 1)
      {
        uint64_t v13 = 22LL;
        goto LABEL_43;
      }

      a4 = v35[0] + *((void *)&v34 + 1);
    }

    __int128 v32 = v34;
    uint64_t v16 = v15 + a5;
    uint64_t v33 = v15 + a5;
    if ((void)v34)
    {
LABEL_14:
      __int128 v34 = v32;
      int v29 = 8;
      unsigned int v30 = 16;
      uint64_t v17 = bt_lookup_variant(v36, 0LL, (unint64_t *)&v34, &v30, 0x10u, v35, (unsigned int *)&v29, 4u, 0, 0LL);
      if ((_DWORD)v17 == 2)
      {
LABEL_31:
        int v29 = 8 * (v16 != 1);
        uint64_t v13 = bt_insert(v36, 0LL, &v32, 16LL, &v33, v29, a6);
        if (!(_DWORD)v13)
        {
          pthread_mutex_lock((pthread_mutex_t *)(a2 + 576));
          uint64_t v22 = v12 + 40LL * a3;
          uint64_t v25 = *(void *)(v22 + 200);
          uint64_t v23 = (void *)(v22 + 200);
          uint64_t v24 = v25;
          if (!v25) {
            *(void *)(v12 + 40LL * a3 + 216) = a6;
          }
          *uint64_t v23 = v24 + a5;
          pthread_mutex_unlock((pthread_mutex_t *)(a2 + 576));
          obj_dirty(a2, a6, 0LL);
          if ((void)v31)
          {
            int v26 = bt_remove(v36, 0LL, (unint64_t *)&v31, 0x10u, a6);
            if (v26) {
              log_err( "%s:%d: %s removal of replaced free extent failed: %d\n",  "spaceman_fq_tree_insert",  4619,  (const char *)(*(void *)(a1 + 384) + 208LL),  v26);
            }
          }

          if (spaceman_fq_tree_over_threshold(a2, a3, v36, 0))
          {
            memset(v28, 0, sizeof(v28));
            trim_time_tracking_start(a1, (uint64_t)v28, 0, 0);
            while (spaceman_fq_tree_over_threshold(a2, a3, v36, 1)
                 && spaceman_free_completed(a1, a2, a3, 1LL, v28, a6))
              ;
            trim_time_tracking_end(a1, (uint64_t)v28);
          }

          uint64_t v13 = 0LL;
        }

        goto LABEL_43;
      }

      uint64_t v13 = v17;
      if (!(_DWORD)v17)
      {
        if ((void)v34 == a6)
        {
          if (v29)
          {
            uint64_t v18 = v35[0];
          }

          else
          {
            uint64_t v18 = 1LL;
            v35[0] = 1LL;
          }

          uint64_t v19 = v16 + *((void *)&v32 + 1);
          if (*((uint64_t *)&v34 + 1) <= v16 + *((void *)&v32 + 1))
          {
            if (*((uint64_t *)&v34 + 1) < v16 + *((void *)&v32 + 1))
            {
              uint64_t v20 = v18 + *((void *)&v34 + 1);
              log_err( "%s:%d: %s range 0x%llx:%lld overlaps with recently-freed range 0x%llx:%lld\n",  "spaceman_fq_tree_insert",  4584,  (const char *)(*(void *)(a1 + 384) + 208LL),  a4,  a5,  *((void *)&v34 + 1),  v18);
              if (v20 > v19)
              {
                v16 += v20 - v19;
                uint64_t v33 = v16;
              }

              if (v20 >= v19) {
                uint64_t v21 = v19;
              }
              else {
                uint64_t v21 = v20;
              }
              a5 = a5 - v21 + *((void *)&v34 + 1);
            }

            else
            {
              v16 += v18;
              uint64_t v33 = v16;
            }

            __int128 v31 = v34;
          }
        }

        goto LABEL_31;
      }

LABEL_43:
      obj_release(v36);
      return v13;
    }

LABEL_13:
    *(void *)&__int128 v32 = a6;
    *((void *)&v32 + 1) = a4;
    uint64_t v16 = a5;
    uint64_t v33 = a5;
    goto LABEL_14;
  }

  return v13;
}

    if ((_DWORD)v21)
    {
      if ((_DWORD)v21 != 79) {
        log_err("%s:%d: %s superblock failed sanity checks: %d\n");
      }
      goto LABEL_37;
    }

    LODWORD(v22) = v17[9];
LABEL_15:
    if ((_DWORD)v22 == v15) {
      break;
    }
    _apfs_free(v17, v15);
    dev_set_block_size((uint64_t)v33);
    uint64_t v15 = v22;
    if (v22 < v13)
    {
      log_err("%s:%d: %s container block size too small for device block size (%d < %d)\n");
      goto LABEL_42;
    }
  }

  if (v32)
  {
    if (v15 < v12)
    {
      log_err( "%s:%d: %s container block size too small for tier2 device block size (%d < %d)\n",  "nx_dev_init",  816,  v33 + 208,  v15,  v12);
LABEL_41:
      uint64_t v21 = 22LL;
      goto LABEL_37;
    }

    uint64_t v28 = dev_set_tier2_device((uint64_t)v33, (uint64_t)v32, 0x4000000000000000uLL >> __clz(__rbit64(v15)));
    if ((_DWORD)v28)
    {
      uint64_t v21 = v28;
      log_err("%s:%d: %s failed to set tier2 device: %d\n", "nx_dev_init", 824, v33 + 208, v28);
      goto LABEL_37;
    }

    __int128 v32 = 0LL;
  }

  if ((*((_BYTE *)v17 + 65) & 1) != 0 && (a7 & 1) == 0)
  {
    int v29 = _apfs_malloc(v15);
    if (!v29)
    {
      log_err("%s:%d: %s couldn't allocate memory for superblock of size %d\n", "nx_dev_init", 842, v33 + 208, v15);
      uint64_t v21 = 12LL;
      goto LABEL_37;
    }

    unsigned int v30 = dev_read((uint64_t)v33, 0x4000000000000000uLL >> __clz(__rbit64(v15)));
    if ((_DWORD)v30)
    {
      uint64_t v21 = v30;
      log_err("%s:%d: %s couldn't read tier2 device superblock of size %d\n", "nx_dev_init", 848, v33 + 208, v15);
      _apfs_free(v29, v15);
      goto LABEL_37;
    }

    if (!nx_superblock_agrees_with_main_superblock((uint64_t)v17, (uint64_t)v29, "tier2", 1))
    {
      log_err("%s:%d: %s tier2 device superblock doesn't agree with main superblock\n", "nx_dev_init", 853, v33 + 208);
      _apfs_free(v29, v15);
      goto LABEL_41;
    }

    _apfs_free(v29, v15);
  }

  uint64_t v21 = 0LL;
  *a9 = v17;
  _DWORD *v31 = v33;
  return v21;
}

  if (rename(v3, a2) < 0)
  {
    uint64_t v7 = *__error() | 0xC000u;
    if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_ERROR)) {
      APFSCaptureFinishCaptureForFile_cold_1();
    }
    uint64_t v12 = 0;
    goto LABEL_39;
  }

  uint64_t v9 = open(a2, 2);
  if ((v9 & 0x80000000) == 0)
  {
    unint64_t v10 = open(v3, 1538, 384LL);
    BOOL v11 = v10;
    if ((v10 & 0x80000000) != 0)
    {
      uint64_t v7 = *__error() | 0xC000u;
    }

    else if (fcntl(v9, 110, v10) < 0)
    {
      uint64_t v7 = *__error() | 0xC000u;
      if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_ERROR)) {
        APFSCaptureFinishCaptureForFile_cold_2();
      }
    }

    else
    {
      uint64_t v7 = 0LL;
    }

    uint64_t v12 = 1;
    if (!v6) {
      goto LABEL_42;
    }
    goto LABEL_41;
  }

  uint64_t v7 = *__error() | 0xC000u;
  uint64_t v12 = 1;
LABEL_40:
  BOOL v11 = -1;
  if (v6) {
    goto LABEL_41;
  }
LABEL_42:
  if (v8) {
    free(v8);
  }
  if ((v9 & 0x80000000) == 0) {
    close(v9);
  }
  if ((v11 & 0x80000000) == 0) {
    close(v11);
  }
  uint64_t v16 = v12 ^ 1;
  if (!(_DWORD)v7) {
    uint64_t v16 = 1;
  }
  if ((v16 & 1) == 0) {
    rename(a2, v3);
  }
  return v7;
}

  unint64_t v10 = pthread_rwlock_unlock((pthread_rwlock_t *)(a1 + 128));
  if (v10) {
    panic("%s:%d: unlock == 0 failed %d\n", "/Library/Caches/com.apple.xbs/Sources/apfs_framework/nx/obj.c", 1985, v10);
  }
  BOOL v11 = v22;
  if (v22)
  {
    uint64_t v12 = 0LL;
    uint64_t v13 = 0LL;
    do
    {
      uint64_t v15 = *(void *)(v11 + 88);
      uint64_t v14 = *(uint64_t **)(v11 + 96);
      if (v15)
      {
        *(void *)(v15 + 96) = v14;
        uint64_t v14 = *(uint64_t **)(v11 + 96);
      }

      else
      {
        uint64_t v23 = *(uint64_t **)(v11 + 96);
      }

      char *v14 = v15;
      *(void *)(v11 + 88) = 3735928559LL;
      uint64_t v16 = *(void *)(v11 + 16);
      if ((v16 & 0xC00000000LL) != 0)
      {
        uint64_t v17 = *(_DWORD *)(*(void *)(*(void *)(a1 + 392) + 376LL) + 36LL);
        uint64_t v18 = (v17 + *(_DWORD *)(v11 + 48) - 1) / v17;
        if ((v16 & 0x800000000LL) != 0) {
          uint64_t v19 = 0LL;
        }
        else {
          uint64_t v19 = v18;
        }
        v13 += v19;
        v12 += v18 & (v16 << 28 >> 63);
        *(void *)(v11 + 16) = v16 & 0xFFFFFFF3FFFFFFFFLL;
      }

      --*(_DWORD *)(a1 + 684);
      obj_destroy_internal(v11, 0);
      BOOL v11 = v15;
    }

    while (v15);
    obj_cache_unlock_write(a1);
    if (v13)
    {
      uint64_t v20 = spaceman_unreserve(a2, 0x48u, v13);
      if (v20) {
        log_err( "%s:%d: %s error unreserving space, %lld blocks: %d\n",  "obj_cache_remove_new_fs_objects",  2010,  (const char *)(a2 + 3992),  v13,  v20);
      }
    }

    if (v12)
    {
      uint64_t v21 = spaceman_unreserve(a2, 0x50u, v12);
      if (v21) {
        log_err( "%s:%d: %s error unreserving tier2 space, %lld blocks: %d\n",  "obj_cache_remove_new_fs_objects",  2016,  (const char *)(a2 + 3992),  v12,  v21);
      }
    }
  }

  else
  {
    obj_cache_unlock_write(a1);
  }

    obj_unlock((uint64_t)v4, 2);
    if ((*(_BYTE *)(v3 + 104) & 4) == 0) {
      goto LABEL_16;
    }
    uint64_t v9 = obj_descriptor_funcs_for_type(*(_DWORD *)(v3 + 72), &v18);
    if (v9) {
      goto LABEL_15;
    }
    if (!*(void *)(v18 + 24))
    {
      uint64_t v9 = 22;
LABEL_15:
      log_err( "%s:%d: %s object type 0x%x not reapable?: %d\n",  "nx_reaper",  1833,  (const char *)(a1[48] + 208),  *(_DWORD *)(v3 + 72),  v9);
      uint64_t v5 = 1;
LABEL_16:
      obj_lock((uint64_t)v20, 2);
      goto LABEL_17;
    }

    unint64_t v10 = nx_reaper_obj_get( a1,  *(_DWORD *)(v3 + 72),  *(_DWORD *)(v3 + 76),  *(void *)(v3 + 80),  *(void *)(v3 + 88),  &v16,  &v17);
    if (v10)
    {
      BOOL v11 = v10;
      log_err( "%s:%d: %s unable to get object 0x%llx of type 0x%x: %d\n",  "nx_reaper",  1838,  (const char *)(a1[48] + 208),  *(void *)(v3 + 88),  *(_DWORD *)(v3 + 72),  v10);
    }

    else
    {
      if ((*(_BYTE *)(v3 + 64) & 2) == 0) {
        bzero(*((void **)v20 + 48), *(unsigned int *)(v3 + 108));
      }
      uint64_t v12 = (*(uint64_t (**)(char *, void, void, void, uint64_t))(v18 + 24))( v17,  (*(_DWORD *)(v3 + 104) >> 3) & 3,  *((void *)v20 + 48),  *(unsigned int *)(v3 + 108),  v19);
      BOOL v11 = v12;
      if (v12 && v12 != 36) {
        log_err( "%s:%d: %s error reaping object 0x%llx of type 0x%x: %d\n",  "nx_reaper",  1852,  (const char *)(a1[48] + 208),  *(void *)(v3 + 88),  *(_DWORD *)(v3 + 72),  v12);
      }
      obj_release((uint64_t *)v17);
      if (v16)
      {
        obj_release(v16);
        uint64_t v16 = 0LL;
      }
    }

    obj_lock((uint64_t)v20, 2);
    if (v11 == 36)
    {
      *(_DWORD *)(v3 + 64) |= 2u;
      uint64_t v5 = 1;
      goto LABEL_20;
    }

    uint64_t v5 = 1;
LABEL_17:
    if ((*(_BYTE *)(v3 + 104) & 2) != 0) {
      *(void *)(v3 + 40) = *(void *)(v3 + 96);
    }
    *(_DWORD *)(v3 + 64) &= ~2u;
    *(void *)(v3 + 88) = 0LL;
LABEL_20:
    obj_dirty((uint64_t)v20, v19, 0LL);
    obj_unlock((uint64_t)v20, 2);
    spaceman_currently_available_space((uint64_t)a1, &v15, &v14, 0LL, 0LL);
    char v6 = tx_leave((uint64_t)a1, v19, (v14 < 0x3E8) | (4 * (v14 < 0x7D0)));
    obj_lock((uint64_t)v20, 2);
    BOOL v4 = v20;
    if (v6) {
      goto LABEL_37;
    }
    if (*((_DWORD *)v20 + 99))
    {
      uint64_t v13 = 0;
      char v6 = 0;
      goto LABEL_41;
    }
  }

  char v6 = record;
  uint64_t v13 = 1;
  BOOL v4 = v20;
LABEL_41:
  *((_DWORD *)v4 + 98) = 0;
  obj_unlock((uint64_t)v4, 2);
  obj_release((uint64_t *)v20);
  if (v13) {
    tx_leave((uint64_t)a1, v19, 0);
  }
  if (v6 | v5) {
    return v6;
  }
  else {
    return 2LL;
  }
}

uint64_t spaceman_check_allocation_status_internal( void *a1, uint64_t a2, char a3, unint64_t a4, uint64_t a5, BOOL *a6, void *a7)
{
  uint64_t v7 = a6;
  uint64_t v8 = a5;
  unint64_t v9 = a4;
  uint64_t v68 = 0LL;
  uint64_t v69 = 0LL;
  uint64_t v67 = 0LL;
  char v11 = __clz(__rbit64(*(unsigned int *)(a1[47] + 36LL)));
  unint64_t v12 = (0x4000000000000000uLL >> v11) & a4;
  BOOL v61 = v12 != 0;
  if (v12) {
    int v13 = 2;
  }
  else {
    int v13 = 1;
  }
  uint64_t v14 = ((uint64_t)0xBFFFFFFFFFFFFFFFLL >> v11) & a4;
  if ((a3 & 2) != 0) {
    *a7 = 0LL;
  }
  unint64_t v65 = 0LL;
  unint64_t v66 = 0LL;
  uint64_t v15 = *(unsigned int **)(a2 + 376);
  unint64_t v16 = *(void *)&v15[12 * (v12 != 0) + 12];
  if (v16 <= a5 || v14 > v16 - a5)
  {
    if (v12) {
      uint64_t v18 = "tier2";
    }
    else {
      uint64_t v18 = "main";
    }
    log_err( "%s:%d: %s block range %lld:%lld out of %s bounds %lld\n",  "spaceman_check_allocation_status_internal",  8292,  (const char *)(a1[48] + 208LL),  v14,  a5,  v18,  v16);
    return 22LL;
  }

  unsigned int v53 = v13;
  if (a5 <= 0)
  {
    BOOL is_set = 0;
    uint64_t v19 = 0LL;
    if ((a3 & 3) == 0) {
      goto LABEL_65;
    }
    goto LABEL_73;
  }

  BOOL is_set = 0;
  uint64_t v21 = 0LL;
  uint64_t v22 = v14 + a5;
  unint64_t v57 = &v15[12 * (v12 != 0) + 17];
  unint64_t v56 = (uint64_t *)(a2 + 8LL * (v12 != 0) + 888);
  int v60 = a3 & 3;
  int v23 = -1;
  while (1)
  {
    unint64_t v24 = v15[10];
    unint64_t v25 = v14 / v15[9];
    unint64_t v59 = v25;
    unint64_t v26 = v25 / v24;
    if (*v57) {
      break;
    }
    uint64_t v21 = *v56;
    unint64_t v32 = v25 / v24;
LABEL_25:
    unint64_t v65 = v15;
    unint64_t v66 = __PAIR64__(v26, v61);
    if (!v21)
    {
      uint64_t v19 = 22LL;
LABEL_60:
      uint64_t v7 = a6;
      unint64_t v9 = a4;
      uint64_t v8 = a5;
      goto LABEL_64;
    }

    int v58 = v23;
    uint64_t v33 = v21;
    uint64_t v34 = *(void *)(v21 + 8LL * v32);
    uint64_t v35 = obj_get(a1[49], 0x40000000LL, v34, &sm_cib_desc, &v65, 0LL, 0LL, 0LL, &v68);
    if ((_DWORD)v35)
    {
      uint64_t v19 = v35;
      log_err( "%s:%d: %s error getting cib %d @ %lld: %d\n",  "spaceman_check_allocation_status_internal",  8344,  (const char *)(a1[48] + 208LL),  v59 / v15[10],  v34,  v35);
      goto LABEL_63;
    }

    if (v14 < v22)
    {
      uint64_t v36 = *(void *)(v68 + 56);
      unint64_t v37 = v59 % v15[10];
      do
      {
        uint64_t v38 = *(void *)(v36 + 32 * v37 + 64);
        if (v38)
        {
          uint64_t v39 = obj_get(a1[49], 0x40000000LL, v38, &sm_bm_desc, 0LL, 0LL, 0LL, 0LL, &v67);
          if ((_DWORD)v39)
          {
            uint64_t v19 = v39;
            log_err( "%s:%d: %s error getting cib %d bitmap %d @ %lld: %d\n",  "spaceman_check_allocation_status_internal",  8371,  (const char *)(a1[48] + 208LL),  v59 / v15[10],  v37,  v38,  v39);
            goto LABEL_50;
          }

          uint64_t v40 = *(void *)(v67 + 56);
          uint64_t v41 = v15[9];
          uint64_t v42 = v14 % v41;
          uint64_t v43 = v41 - v14 % v41;
          if (v22 - v14 >= v43) {
            uint64_t v44 = v43;
          }
          else {
            uint64_t v44 = v22 - v14;
          }
          if ((a3 & 1) != 0)
          {
            int is_clear = bitmap_range_is_clear(v40, v42, v44);
            int v46 = a3 & 2 | is_clear;
            BOOL is_set = is_clear == 0;
            obj_release(v67);
            uint64_t v67 = 0LL;
            if (!v46)
            {
              uint64_t v19 = 0LL;
              BOOL is_set = 1;
              goto LABEL_58;
            }
          }

          else if ((a3 & 2) != 0)
          {
            *a7 += bitmap_count_bits(v40, 0, v42, v44 + v42);
            obj_release(v67);
            uint64_t v67 = 0LL;
          }

          else
          {
            BOOL is_set = bitmap_range_is_set(v40, v42, v44);
            obj_release(v67);
            uint64_t v67 = 0LL;
            if (!is_set) {
              goto LABEL_57;
            }
          }
        }

        else
        {
          if (!v60)
          {
            BOOL is_set = 0;
LABEL_57:
            uint64_t v19 = 0LL;
LABEL_58:
            uint64_t v7 = a6;
            goto LABEL_75;
          }

          if (v22 - v14 >= (*(_DWORD *)(v36 + 32 * v37 + 60) & 0xFFFFF) + v14 / v15[9] * v15[9] - v14) {
            uint64_t v44 = (*(_DWORD *)(v36 + 32 * v37 + 60) & 0xFFFFF) + v14 / v15[9] * v15[9] - v14;
          }
          else {
            uint64_t v44 = v22 - v14;
          }
          BOOL is_set = 0;
          if (a7) {
            *a7 += v44;
          }
        }

        v14 += v44;
        ++v37;
      }

      while (v14 < v22);
    }

    uint64_t v19 = 0LL;
LABEL_50:
    obj_release(v68);
    uint64_t v68 = 0LL;
    if (v14 < v22)
    {
      uint64_t v21 = v33;
      int v23 = v58;
      if (!(_DWORD)v19) {
        continue;
      }
    }

    goto LABEL_60;
  }

  unsigned int v27 = v15[11];
  unsigned int v28 = v26 / v27;
  unint64_t v29 = v25 / v24;
  if (v26 / v27 == v23)
  {
LABEL_23:
    LODWORD(v32) = v26 - v27 * v23;
    LODWORD(v26) = v29;
    goto LABEL_25;
  }

  uint64_t v30 = *(void *)(*v56 + 8LL * v28);
  if (v69)
  {
    obj_release(v69);
    uint64_t v69 = 0LL;
  }

  unint64_t v65 = v15;
  unint64_t v66 = __PAIR64__(v28, v61);
  uint64_t v31 = obj_get(a1[49], 0x40000000LL, v30, &sm_cab_desc, &v65, 0LL, 0LL, 0LL, &v69);
  if (!(_DWORD)v31)
  {
    uint64_t v21 = *(void *)(v69 + 56) + 40LL;
    unsigned int v27 = v15[11];
    int v23 = v28;
    unint64_t v29 = v59 / v15[10];
    goto LABEL_23;
  }

  uint64_t v47 = v31;
  log_err( "%s:%d: %s error getting cab %d @ %lld: %d\n",  "spaceman_check_allocation_status_internal",  8319,  (const char *)(a1[48] + 208LL),  v28,  v30,  v31);
  uint64_t v19 = v47;
LABEL_63:
  uint64_t v7 = a6;
  unint64_t v9 = a4;
  uint64_t v8 = a5;
LABEL_64:
  if (!v60)
  {
LABEL_65:
    if (!(_DWORD)v19 && is_set)
    {
      char v64 = 0;
      uint64_t overlap = spaceman_fq_tree_find_overlap((uint64_t)a1, a2, v53, v9, v8, &v64);
      uint64_t v19 = overlap;
      if (v64 && (_DWORD)overlap == 0) {
        BOOL is_set = 0;
      }
    }
  }

LABEL_73:
  if ((_DWORD)v19) {
    log_debug( "%s:%d: %s %lld:%lld error: %d\n",  "spaceman_check_allocation_status_internal",  8423,  (const char *)(a1[48] + 208LL),  v9,  v8,  v19);
  }
LABEL_75:
  if (v69) {
    obj_release(v69);
  }
  if (v68) {
    obj_release(v68);
  }
  if (v67) {
    obj_release(v67);
  }
  *uint64_t v7 = is_set;
  return v19;
}

uint64_t spaceman_reserve(uint64_t a1, int a2, unint64_t a3, uint64_t a4, int *a5)
{
  uint64_t v8 = a1;
  v34[1] = *MEMORY[0x1895F89C0];
  else {
    unint64_t v9 = 0LL;
  }
  if (v9) {
    uint64_t v8 = v9[49];
  }
  uint64_t v32 = 0LL;
  memset(v31, 0, sizeof(v31));
  uint64_t v33 = 0LL;
  v34[0] = 0LL;
  uint64_t v10 = spaceman_get(v8, &v32);
  if (!(_DWORD)v10)
  {
    char v11 = *(void **)(v32 + 376);
    if ((~a2 & 0x38) == 0) {
      panic("Absurd combination of allocation flags for spaceman %llx", v32);
    }
    if (*(void *)(*(void *)(v32 + 376) + 96LL)) {
      __asm { BR              X12 }
    }

    if ((a2 & 0x10) != 0)
    {
      uint64_t v10 = 22LL;
      goto LABEL_45;
    }

    LODWORD(v34[0]) = 0;
    LODWORD(v33) = 1;
    int v29 = a2 & 0x40;
    pthread_mutex_lock((pthread_mutex_t *)(v32 + 384));
    pthread_mutex_lock((pthread_mutex_t *)(v32 + 576));
    uint64_t v12 = 0LL;
LABEL_15:
    uint64_t v13 = *((unsigned int *)v34 + v12);
    uint64_t v14 = *((unsigned int *)&v34[-1] + v12++);
    BOOL v15 = 1;
    while (1)
    {
      if (v9)
      {
        uint64_t v16 = v9[47];
        unint64_t v17 = *(void *)(v16 + 80);
        if (v17)
        {
          if (*(void *)(v16 + 88) + a3 + v9[51] > v17)
          {
            uint64_t v10 = 69LL;
            goto LABEL_43;
          }
        }
      }

      unint64_t v18 = v11[30] + v11[9] + v11[15] + v11[35] + v11[24] - v11[23];
      if (v9)
      {
        uint64_t v19 = v9[47];
        unint64_t v20 = *(void *)(v19 + 72);
        unint64_t v21 = *(void *)(v19 + 88);
        BOOL v22 = v20 >= v21;
        unint64_t v23 = v20 - v21;
        if (!v22) {
          unint64_t v23 = 0LL;
        }
        v18 += v23;
      }

      if (v18 < a3)
      {
        uint64_t v10 = 28LL;
LABEL_43:
        unint64_t v24 = (pthread_mutex_t *)v32;
        goto LABEL_44;
      }

      unint64_t v24 = (pthread_mutex_t *)v32;
      unint64_t v25 = v11[6 * v13 + 9] - *(void *)(v32 + 8 * v13 + 832);
      if (v25 < a3)
      {
        if (!v15 || v11[5 * v14 + 25] + v25 < a3 || !v15)
        {
          if (v12 != 1) {
            goto LABEL_15;
          }
          uint64_t v10 = 28LL;
LABEL_44:
          pthread_mutex_unlock(v24 + 9);
          pthread_mutex_unlock((pthread_mutex_t *)(v32 + 384));
LABEL_45:
          obj_release(v32);
          return v10;
        }

        pthread_mutex_unlock((pthread_mutex_t *)(v32 + 576));
        pthread_mutex_unlock((pthread_mutex_t *)(v32 + 384));
        pthread_mutex_lock((pthread_mutex_t *)(v32 + 512));
        trim_time_tracking_start(v8, (uint64_t)v31, 0, 0);
        BOOL v15 = spaceman_free_completed(v8, v32, v14, 1LL, v31, a4) != 0;
        trim_time_tracking_end(v8, (uint64_t)v31);
        pthread_mutex_unlock((pthread_mutex_t *)(v32 + 512));
        pthread_mutex_lock((pthread_mutex_t *)(v32 + 384));
        pthread_mutex_lock((pthread_mutex_t *)(v32 + 576));
        unint64_t v25 = 0LL;
      }

      if (v25 >= a3)
      {
        unint64_t v24 = (pthread_mutex_t *)v32;
        uint64_t v26 = v32 + 8 * v13;
        *(void *)(v26 + 832) += a3;
        if (v29) {
          *(void *)(v26 + 848) += a3;
        }
        if (v9) {
          v9[51] += a3;
        }
        uint64_t v10 = 0LL;
        if ((_DWORD)v13 == 1) {
          int v27 = 16;
        }
        else {
          int v27 = 8;
        }
        *a5 = v27 | v29;
        goto LABEL_44;
      }
    }
  }

  return v10;
}

uint64_t spaceman_unreserve(uint64_t a1, unsigned int a2, unint64_t a3)
{
  else {
    uint64_t v6 = 0LL;
  }
  uint64_t v7 = (void *)a1;
  if (v6) {
    uint64_t v7 = *(void **)(v6 + 392);
  }
  uint64_t v21 = 0LL;
  uint64_t v8 = spaceman_get(v7, &v21);
  if (!(_DWORD)v8)
  {
    uint64_t v9 = (a2 >> 4) & 1;
    pthread_mutex_lock((pthread_mutex_t *)(v21 + 384));
    pthread_mutex_lock((pthread_mutex_t *)(v21 + 576));
    if (*(void *)(v21 + 8LL * v9 + 832) < *(void *)(v21 + 8LL * v9 + 848))
    {
      uint64_t v10 = "T2";
      if (!(_DWORD)v9) {
        uint64_t v10 = "Main";
      }
      panic( "%s, Reserved space < reserved metadata: %llu < %llu\n",  v10,  *(void *)(v21 + 832),  *(void *)(v21 + 848));
    }

    uint64_t v11 = v21;
    uint64_t v12 = v21 + 8 * v9;
    unint64_t v13 = *(void *)(v12 + 848);
    if ((a2 & 0x40) != 0)
    {
      if (v13 < a3) {
        panic("reserved metadata space underflow: %lld (%lld)\n", *(void *)(v12 + 848), a3);
      }
      *(void *)(v12 + 848) = v13 - a3;
      *(void *)(v11 + 8 * v9 + 832) -= a3;
      if (!v6) {
        goto LABEL_29;
      }
      goto LABEL_23;
    }

    uint64_t v14 = *(void *)(v12 + 832);
    if (v14 - v13 >= a3)
    {
      *(void *)(v12 + 832) = v14 - a3;
      if (v6)
      {
LABEL_23:
        unint64_t v16 = *(void *)(v6 + 408);
        BOOL v17 = v16 >= a3;
        unint64_t v18 = v16 - a3;
        if (!v17)
        {
          else {
            uint64_t v19 = (const char *)(*(void *)(a1 + 384) + 208LL);
          }
          log_err( "%s:%d: %s fs reserved space underflow: %lld (%lld)\n",  "spaceman_unreserve",  8678,  v19,  *(void *)(v6 + 408),  a3);
          unint64_t v18 = 0LL;
        }

        *(void *)(v6 + 408) = v18;
      }
    }

    else
    {
      else {
        BOOL v15 = (const char *)(*(void *)(a1 + 384) + 208LL);
      }
      log_err( "%s:%d: %s reserved space underflow: %lld (+meta:%llu) < %lld\n",  "spaceman_unreserve",  8669,  v15,  *(void *)(v21 + 8 * v9 + 832) - v13,  v13,  a3);
      *(void *)(v21 + 8 * v9 + 832) = v13;
      if (v6) {
        goto LABEL_23;
      }
    }

uint64_t spaceman_fs_bounds_clear(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v19 = 0LL;
  uint64_t result = spaceman_get(a1, (uint64_t *)&v19);
  if (!(_DWORD)result)
  {
    uint64_t v6 = *(void *)&v19[5].__opaque[48];
    uint64_t result = obj_modify(v19, 0, a3);
    if (!(_DWORD)result)
    {
      pthread_mutex_lock(v19 + 6);
      pthread_mutex_lock(v19 + 9);
      uint64_t v7 = *(void **)(a2 + 376);
      unint64_t v8 = v7[9];
      unint64_t v9 = v7[11];
      if (v9)
      {
        uint64_t v10 = obj_oid(a2);
        log_err( "%s:%d: %s file system %lld alloc block count is not zero: %lld/%lld\n",  "spaceman_fs_bounds_clear",  8844,  (const char *)(a2 + 3992),  v10,  v9,  v8);
        uint64_t v7 = *(void **)(a2 + 376);
        if (v7[9]) {
          goto LABEL_8;
        }
      }

      else if (v8)
      {
        goto LABEL_8;
      }

      if (!v7[10])
      {
LABEL_15:
        pthread_mutex_unlock(v19 + 9);
        pthread_mutex_unlock(v19 + 6);
        obj_release(&v19->__sig);
        return 0LL;
      }

uint64_t spaceman_unset_block_out_range(void *a1, uint64_t a2)
{
  uint64_t v2 = a1[47];
  if (!*(void *)(v2 + 1248)) {
    return 0LL;
  }
  uint64_t v9 = 0LL;
  uint64_t v10 = 0LL;
  uint64_t v5 = spaceman_get(a1, (uint64_t *)&v10);
  if (!(_DWORD)v5)
  {
    uint64_t v6 = *(void *)&v10[5].__opaque[48];
    uint64_t v5 = obj_modify(v10, 0, a2);
    if (!(_DWORD)v5)
    {
      uint64_t v7 = (*(void *)(v2 + 1240) << __clz(__rbit64(*(unsigned int *)(a1[47] + 36LL))) >> 62) & 1LL;
      pthread_mutex_lock(v10 + 8);
      pthread_mutex_lock(v10 + 6);
      uint64_t v5 = spaceman_check_allocation_status_internal( a1,  (uint64_t)v10,  2,  *(void *)(v2 + 1240),  *(void *)(v2 + 1248),  &v11,  &v9);
      pthread_mutex_lock(v10 + 9);
      *(void *)(v6 + 48LL * v7 + 72) += v9;
      pthread_mutex_unlock(v10 + 9);
      *(_OWORD *)(a1[47] + 1240LL) = 0u;
      pthread_mutex_unlock(v10 + 6);
      pthread_mutex_unlock(v10 + 8);
      obj_dirty((uint64_t)v10, a2, 0LL);
    }

    obj_release(&v10->__sig);
  }

  return v5;
}

uint64_t update_bm_hint(uint64_t result, unsigned int a2, _DWORD *a3, uint64_t a4)
{
  uint64_t v4 = *(void *)(result + 376);
  uint64_t v5 = *(void *)(result + 8LL * a2 + 1488);
  uint64_t v11 = 0LL;
  uint64_t v12 = 0LL;
  if (v5)
  {
    uint64_t v8 = *(void *)(result + 1584);
    if (v8) {
      ++*(void *)(v8 + 112);
    }
    if (*(void *)(v4 + 48LL * a2 + 56) - 1LL == a4) {
      unint64_t v9 = *(void *)(v4 + 48LL * a2 + 48) % (unint64_t)*(unsigned int *)(v4 + 36);
    }
    else {
      unint64_t v9 = *(unsigned int *)(v4 + 36);
    }
    *(_DWORD *)(v5 + 4 * a4) = (*(_DWORD *)(v5 + 4 * a4) & 0xFEFFFFFF | ((*a3 & 1) << 24)) ^ 0x1000000;
    uint64_t result = bitmap_range_find_clear_range((uint64_t)a3, 0xFFFFFFLL, 0LL, v9, &v12, &v11);
    if (v9 < 0x40 || (*(void *)&a3[2 * (v9 >> 6) - 2] & 0x8000000000000000LL) != 0) {
      unsigned int v10 = *(_DWORD *)(v5 + 4 * a4) & 0xFDFFFFFF;
    }
    else {
      unsigned int v10 = *(_DWORD *)(v5 + 4 * a4) | 0x2000000;
    }
    *(_DWORD *)(v5 + 4 * a4) = v10 & 0xFF000000 | v11 & 0xFFFFFF;
  }

  return result;
}

uint64_t trim_time_tracking_check(uint64_t result, uint64_t a2)
{
  if (a2)
  {
    if (*(_BYTE *)(a2 + 62))
    {
      if (!*(_BYTE *)(a2 + 63))
      {
        uint64_t v3 = result;
        v9.__darwin_time_t tv_sec = 0LL;
        v9.int tv_nsec = 0LL;
        uint64_t result = clock_gettime(_CLOCK_UPTIME_RAW_APPROX, &v9);
        __darwin_time_t tv_sec = v9.tv_sec;
        int tv_nsec = v9.tv_nsec;
        *(void *)a2 = v9.tv_sec;
        tv_nsec /= 1000;
        *(_DWORD *)(a2 + 8) = tv_nsec;
        uint64_t v6 = 1000000 * tv_sec + tv_nsec;
        *(void *)(a2 + 32) = v6;
        if (v6 - *(void *)(a2 + 24) >= 1000 * (unint64_t)*(unsigned __int16 *)(a2 + 60))
        {
          uint64_t v7 = (unint64_t *)(*(void *)(v3 + 384) + 168LL);
          do
            unint64_t v8 = __ldxr(v7);
          while (__stxr(v8 + 1, v7));
          ++*(_DWORD *)(a2 + 56);
          *(void *)(a2 + 24) = *(void *)(a2 + 32);
        }
      }
    }
  }

  return result;
}

uint64_t spaceman_ip_bm_block_free(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  uint64_t v4 = *(void *)(a2 + 376);
  unsigned int v5 = *(_DWORD *)(v4 + 164) & 0x7FFFFFFF;
  if (v5 <= a3) {
    return 22LL;
  }
  unsigned int v6 = *(unsigned __int16 *)(v4 + 322);
  if (v6 == 0xFFFF)
  {
    uint64_t v7 = *(void *)(a2 + 880);
  }

  else
  {
    if (v5 <= v6) {
      return nx_corruption_detected_int(a1);
    }
    uint64_t v7 = *(void *)(a2 + 880);
    *(_WORD *)(v7 + 2LL * *(unsigned __int16 *)(v4 + 322)) = a3;
  }

  *(_WORD *)(v7 + 2LL * a3) = -1;
  *(_WORD *)(v4 + 322) = a3;
  obj_dirty(a2, a4, 0LL);
  return 0LL;
}

uint64_t spaceman_decrement_free_queue_count( uint64_t result, uint64_t a2, unsigned int a3, unint64_t a4)
{
  uint64_t v4 = *(void *)(a2 + 376) + 40LL * a3;
  unint64_t v6 = *(void *)(v4 + 200);
  unsigned int v5 = (unint64_t *)(v4 + 200);
  unint64_t v7 = v6 - a4;
  if (v6 >= a4)
  {
    unint64_t *v5 = v7;
  }

  else
  {
    uint64_t v11 = result;
    uint64_t result = nx_ratelimit_log_allowed(result);
    if ((_DWORD)result) {
      uint64_t result = (uint64_t)log_err( "%s:%d: %s sfq %d count underflow %lld - %lld\n",  "spaceman_decrement_free_queue_count",  5765,  (const char *)(*(void *)(v11 + 384) + 208LL),  a3,  *(void *)(*(void *)(a2 + 376) + 40LL * a3 + 200),  a4);
    }
    *(void *)(*(void *)(a2 + 376) + 40LL * a3 + 200) = 0LL;
  }

  return result;
}

uint64_t spaceman_ip_extent_validate( uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t *a5)
{
  uint64_t v7 = *(void *)(*(void *)(a2 + 376) + 152LL);
  unint64_t v9 = 0LL;
  uint64_t result = spaceman_ip_block_index(a1, a2, a3, (uint64_t *)&v9);
  if ((_DWORD)result == 2) {
    return 22LL;
  }
  if ((_DWORD)result) {
    return result;
  }
  if ((v7 & 0x7FFFFFFFFFFFFFFFLL) <= a4 || v9 > (v7 & 0x7FFFFFFFFFFFFFFFuLL) - a4) {
    return 22LL;
  }
  uint64_t result = 0LL;
  if (a5) {
    *a5 = v9;
  }
  return result;
}

uint64_t spaceman_fq_trim_list_flush(uint64_t result, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  unint64_t v9 = (void *)result;
  if (a3)
  {
    if (!*(_WORD *)(a2 + 1532)) {
      return result;
    }
    pthread_mutex_unlock((pthread_mutex_t *)(a2 + 512));
    unsigned int v10 = *(unsigned __int16 *)(a2 + 1532) + 16;
    unsigned int v11 = 16;
  }

  else
  {
    if (!*(_WORD *)(a2 + 1534)) {
      return result;
    }
    pthread_mutex_unlock((pthread_mutex_t *)(a2 + 448));
    unsigned int v11 = 0;
    unsigned int v10 = *(unsigned __int16 *)(a2 + 1534);
  }

  trim_time_tracking_check((uint64_t)v9, a4);
  if (v11 < v10)
  {
    uint64_t v12 = 16LL * v11;
    unint64_t v13 = v10 - (unint64_t)v11;
    do
    {
      dev_unmap(v9[48], *(void *)(*(void *)(a2 + 1536) + v12));
      v12 += 16LL;
      --v13;
    }

    while (v13);
  }

  dev_unmap_flush(v9[48]);
  if (a3)
  {
    pthread_mutex_lock((pthread_mutex_t *)(a2 + 512));
    uint64_t v14 = (pthread_mutex_t *)(a2 + 384);
  }

  else
  {
    uint64_t v14 = (pthread_mutex_t *)(a2 + 448);
  }

  uint64_t result = pthread_mutex_lock(v14);
  if (v11 < v10)
  {
    uint64_t v15 = 16LL * v11;
    unint64_t v16 = v10 - (unint64_t)v11;
    do
    {
      uint64_t v17 = (unint64_t *)(*(void *)(a2 + 1536) + v15);
      unint64_t v18 = *v17;
      unint64_t v19 = v17[1];
      if (a3) {
        uint64_t result = spaceman_freed_internal(v9, a2, v18, v19, 1, a5);
      }
      else {
        uint64_t result = spaceman_ip_freed((uint64_t)v9, (void *)a2, v18, v19, a5);
      }
      v15 += 16LL;
      --v16;
    }

    while (v16);
  }

  if (a3)
  {
    uint64_t result = pthread_mutex_unlock((pthread_mutex_t *)(a2 + 384));
    *(void *)(a2 + 1552) = 0LL;
    *(_WORD *)(a2 + 1532) = 0;
  }

  else
  {
    *(void *)(a2 + 1544) = 0LL;
    *(_WORD *)(a2 + 1534) = 0;
  }

  return result;
}

uint64_t spaceman_ip_freed(uint64_t a1, void *a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = a2[47];
  uint64_t v25 = 0LL;
  uint64_t result = xid_is_current_tx(a1, a5);
  if ((_DWORD)result)
  {
    unint64_t v26 = 0LL;
    uint64_t v23 = 0LL;
    uint64_t v24 = 0LL;
    uint64_t result = spaceman_ip_extent_validate(a1, (uint64_t)a2, a3, a4, &v26);
    if ((_DWORD)result)
    {
      if ((_DWORD)result == 22) {
        return (uint64_t)log_err("%s:%d: %s attempt to free block(s) outside of internal pool: 0x%llx:0x%llx\n");
      }
      else {
        return (uint64_t)log_err("%s:%d: %s Error mapping freed IP block range 0x%llx:0x%llx to index: %d\n");
      }
    }

    else
    {
      int v12 = 8 * *(_DWORD *)(v10 + 32);
      if (v12) {
        BOOL v13 = a4 < 1;
      }
      else {
        BOOL v13 = 1;
      }
      if (!v13)
      {
        unint64_t v14 = v12;
        unint64_t v15 = v26;
        uint64_t v21 = v10;
        do
        {
          unint64_t v16 = v15 / v14;
          unsigned int v17 = *(unsigned __int16 *)(a2[109] + 2 * (v15 / v14));
          uint64_t result = spaceman_ip_bm_block_address(a1, v10, v17, &v24);
          if ((_DWORD)result) {
            break;
          }
          uint64_t result = obj_get(*(void *)(a1 + 392), 1073741825LL, v24, &sm_bm_desc, 0LL, 0LL, 0LL, a5, &v25);
          if ((_DWORD)result) {
            break;
          }
          uint64_t v18 = *(void *)(v25 + 56);
          unint64_t v19 = v26 % v14;
          else {
            uint64_t v20 = a4;
          }
          if (*(void *)(a2[108] + 8 * v16) != a5)
          {
            uint64_t v23 = 0LL;
            __int16 v22 = 0;
            if (spaceman_ip_bm_block_alloc(a1, (uint64_t)a2, a5, &v23, &v22)
              || spaceman_ip_bm_block_free(a1, (uint64_t)a2, v17, a5))
            {
              return obj_release(v25);
            }

            uint64_t v24 = v23;
            *(_WORD *)(a2[109] + 2 * v16) = v22;
            *(void *)(a2[108] + 8 * v16) = a5;
          }

          bitmap_clear_range(v18, v19, v20);
          obj_dirty(v25, a5, v24);
          uint64_t result = obj_release(v25);
          unint64_t v15 = v26 + v20;
          v26 += v20;
          BOOL v13 = a4 <= v20;
          a4 -= v20;
          uint64_t v10 = v21;
        }

        while (!v13);
      }
    }
  }

  return result;
}

uint64_t spaceman_freed_internal( void *a1, uint64_t a2, unint64_t a3, unint64_t a4, char a5, uint64_t a6)
{
  if (a4) {
    spaceman_handle_metazone_freed((uint64_t)a1, a2, a3);
  }
  uint64_t v12 = spaceman_modify_bits(a1, 0LL, a2, a3, a4, a6, 1, a5);
  if (!(_DWORD)v12)
  {
    char v13 = __clz(__rbit64(*(unsigned int *)(a1[47] + 36LL)));
    spaceman_free_extent_cache_insert( *(void *)(a2 + (((a3 << v13) & 0x4000000000000000LL) >> 59) + 1568),  0,  ((uint64_t)0xBFFFFFFFFFFFFFFFLL >> v13) & a3,  a4);
  }

  return v12;
}

unint64_t spaceman_iterate_bitmap_hints( unint64_t result, unsigned int a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = a5;
  unint64_t v7 = result;
  uint64_t v8 = *(void *)(result + 376);
  uint64_t v9 = a2;
  unint64_t v10 = *(void *)(v8 + 48LL * a2 + 56);
  uint64_t v11 = *(void *)(a4 + 8);
  uint64_t v12 = *(unsigned int *)(v8 + 36);
  uint64_t v13 = *(void *)a4 / v12;
  uint64_t v14 = result + 8LL * a2;
  unsigned int v15 = *(_DWORD *)(*(void *)(v14 + 1488) + 4 * v13) & 0xFFFFFF;
  if (a3) {
    unint64_t v16 = a3;
  }
  else {
    unint64_t v16 = *(void *)(v8 + 48LL * a2 + 56);
  }
  if (v10 < v16) {
    unint64_t v16 = *(void *)(v8 + 48LL * a2 + 56);
  }
  else {
    int v17 = *(_DWORD *)(v8 + 36);
  }
  if (v15 == v17 || v16 < 2)
  {
    unint64_t v19 = *(void *)a4 / v12;
    LODWORD(v14) = *(_DWORD *)(*(void *)(v14 + 1488) + 4 * v13) & 0xFFFFFF;
    goto LABEL_37;
  }

  uint64_t v20 = (uint64_t *)(v14 + 1488);
  unint64_t v21 = v16 - 1;
  unint64_t v22 = v13 + 1;
  unsigned int v23 = *(_DWORD *)(*(void *)(v14 + 1488) + 4 * v13) & 0xFFFFFF;
  uint64_t v24 = *(void *)a4 / v12;
  do
  {
    unint64_t v19 = v22 % v10;
    uint64_t v25 = *v20;
    int v26 = *(_DWORD *)(*v20 + 4 * (v22 % v10));
    LODWORD(v14) = v26 & 0xFFFFFF;
    if ((v26 & 0xFFFFFFu) > v15)
    {
      uint64_t v13 = v22 % v10;
      unsigned int v15 = v26 & 0xFFFFFF;
    }

    if (v14 > v23)
    {
      if (*(_BYTE *)(a4 + 16))
      {
        if ((v26 & 0xC000000) != 0) {
          goto LABEL_34;
        }
        uint64_t v27 = *(void *)(v7 + 376);
        uint64_t v28 = v27 + 48LL * v9;
        unint64_t v29 = *(void *)(v28 + 56);
        if (v29 > v19)
        {
          uint64_t v30 = *(void *)(a4 + 32);
          if (v30)
          {
            uint64_t v47 = v24;
            unint64_t v48 = v7;
            uint64_t v49 = v9;
            uint64_t v50 = v11;
            uint64_t v51 = v8;
            unint64_t v31 = *(unsigned int *)(v27 + 36);
            uint64_t v32 = v31;
            if (v29 - 1 == v19) {
              uint64_t v32 = *(void *)(v28 + 48) % v31;
            }
            uint64_t result = calc_overlap_range(v19 * v31, v32, *(void *)(a4 + 24), v30, 0LL);
            uint64_t v11 = v50;
            uint64_t v8 = v51;
            unint64_t v7 = v48;
            uint64_t v9 = v49;
            uint64_t v24 = v47;
            if (result) {
              goto LABEL_34;
            }
            LODWORD(v14) = *(_DWORD *)(v25 + 4 * v19) & 0xFFFFFF;
          }
        }
      }

      LODWORD(v12) = *(_DWORD *)(v8 + 36);
      else {
        int v33 = *(_DWORD *)(v8 + 36);
      }
      uint64_t v24 = v22 % v10;
      unsigned int v23 = v14;
    }

uint64_t spaceman_ip_block_free(uint64_t a1, pthread_mutex_t *a2, unint64_t a3, uint64_t a4)
{
  uint64_t v8 = 22LL;
  if (xid_is_current_tx(a1, a4))
  {
    pthread_mutex_lock(a2 + 7);
    unsigned int v9 = spaceman_ip_block_index(a1, (uint64_t)a2, a3, &v11);
    if (v9 == 2) {
      uint64_t v8 = 22LL;
    }
    else {
      uint64_t v8 = v9;
    }
    if (!(_DWORD)v8) {
      uint64_t v8 = spaceman_fq_tree_insert(a1, (uint64_t)a2, 0LL, a3, 1LL, a4);
    }
    pthread_mutex_unlock(a2 + 7);
  }

  return v8;
}

uint64_t supplemental_tree_destroy(uint64_t a1, int a2, int a3, uint64_t a4, uint64_t a5, void *a6)
{
  uint64_t v25 = *MEMORY[0x1895F89C0];
  if (a3 == 5)
  {
    uint64_t v11 = 0x20000001FLL;
    uint64_t v12 = fext_tree_key_cmp;
  }

  else
  {
    if (a3 != 6)
    {
      log_err( "%s:%d: %s unsupported tree type: %d\n",  "supplemental_tree_get_descriptor",  64,  (const char *)(a1 + 3992),  a3);
      return 45LL;
    }

    uint64_t v11 = 32LL;
    uint64_t v12 = pfkur_tree_key_cmp;
  }

  uint64_t v18 = 0LL;
  if (!a5)
  {
    uint64_t tree = jfs_get_tree(a1, a3, a4, (uint64_t *)&v18);
    if ((_DWORD)tree) {
      return tree;
    }
    goto LABEL_11;
  }

  v19[1] = 0LL;
  __int128 v20 = 0u;
  uint64_t v24 = 0LL;
  __int128 v22 = 0u;
  __int128 v23 = 0u;
  __int128 v21 = 0u;
  v19[0] = v12;
  v19[2] = v11;
  if ((unsigned __int16)a2 != 2)
  {
    uint64_t tree = 22LL;
    goto LABEL_15;
  }

  uint64_t tree = btree_get_extended(a1, a2 & 0xFFFF0000, a5, 0LL, 0, (uint64_t)v19, 0LL, (uint64_t *)&v18);
  if ((_DWORD)tree)
  {
LABEL_15:
    unint64_t v16 = strerror(tree);
    log_err( "%s:%d: %s Failed to get supplemental tree (type %d, oid %llu): %d (%s)\n",  "supplemental_tree_destroy",  159,  (const char *)(a1 + 3992),  a3,  a5,  tree,  v16);
    return tree;
  }

unint64_t fletcher64_set_cksum( unint64_t *a1, uint32x4_t *a2, unint64_t a3, unint64_t a4, int8x16_t a5, int8x16_t a6)
{
  unint64_t result = fletcher64(a2, a3, a4, a5, a6);
  unint64_t v8 = (HIDWORD(result)
      + result
      - 0xFFFFFFFF
      * ((unint64_t)(((HIDWORD(result) + result) * (unsigned __int128)0x200000003uLL) >> 64) >> 1)) ^ 0xFFFFFFFF;
  *a1 = v8 | ((unint64_t)~((_DWORD)v8
                                + (_DWORD)result
  return result;
}

unint64_t fletcher64_verify_cksum( void *a1, uint32x4_t *a2, unint64_t a3, unint64_t a4, int8x16_t a5, int8x16_t a6)
{
  unint64_t v7 = fletcher64(a2, a3, a4, a5, a6);
  unint64_t v8 = (HIDWORD(v7)
      + v7
      - 0xFFFFFFFF
      * ((unint64_t)(((HIDWORD(v7) + v7) * (unsigned __int128)0x200000003uLL) >> 64) >> 1)) ^ 0xFFFFFFFF;
  return (v8 | ((unint64_t)~((_DWORD)v8
                                  + (_DWORD)v7
}

uint64_t Base85::Decode( Base85 *this, const char *a2, uint64_t a3, unsigned __int8 *a4, uint64_t *a5, unint64_t *a6)
{
  *a5 = 0LL;
  char v6 = 1;
LABEL_2:
  unint64_t v7 = a2;
  unint64_t v8 = this;
  do
  {
    if (!v7) {
      return (v7 == 0LL) & v6;
    }
    int v9 = *(char *)v8;
    if (v9 < 0) {
      return (--v7 == 0LL) & v6;
    }
    unint64_t v8 = (Base85 *)((char *)v8 + 1);
    int v10 = Base85::m_DecodeTable[v9];
    --v7;
  }

  while (v10 == -2);
  if (v10 == -3 || v10 == -1) {
    return (v7 == 0LL) & v6;
  }
  uint64_t v12 = 0LL;
  while (v7 != v12 && (v12[(void)v8] & 0x80000000) == 0)
  {
    int v13 = Base85::m_DecodeTable[(v12++)[(void)v8]];
    if (v13 != -2)
    {
      if (v13 != -3 && v13 != -1)
      {
        this = (Base85 *)&a2[(void)this];
        unsigned int v15 = (Base85 *)&v12[(void)v8];
        a2 = (const char *)(v7 - v12);
        while (a2)
        {
          int v16 = *(char *)v15;
          if (v16 < 0) {
            return 0LL;
          }
          unsigned int v15 = (Base85 *)((char *)v15 + 1);
          int v17 = Base85::m_DecodeTable[v16];
          --a2;
          if (v17 != -2)
          {
            if (v17 != -1)
            {
              this = v15;
              goto LABEL_25;
            }

            return 0LL;
          }
        }

        int v17 = -3;
        while (1)
        {
LABEL_25:
          if (!a2)
          {
            int v19 = -3;
            goto LABEL_31;
          }

          int v18 = *(char *)this;
          if (v18 < 0) {
            break;
          }
          this = (Base85 *)((char *)this + 1);
          int v19 = Base85::m_DecodeTable[v18];
          --a2;
          if (v19 != -2)
          {
            if (v19 == -1) {
              return 0LL;
            }
            do
            {
LABEL_31:
              if (!a2)
              {
                int v21 = -3;
                goto LABEL_37;
              }

              int v20 = *(char *)this;
              if (v20 < 0) {
                return 0LL;
              }
              this = (Base85 *)((char *)this + 1);
              int v21 = Base85::m_DecodeTable[v20];
              --a2;
            }

            while (v21 == -2);
            if (v21 == -1) {
              return 0LL;
            }
LABEL_37:
            if (v17 == -3) {
              int v22 = -2;
            }
            else {
              int v22 = -1;
            }
            if (v17 == -3) {
              int v23 = -1;
            }
            else {
              int v23 = 0;
            }
            if (v17 == -3) {
              int v24 = 84;
            }
            else {
              int v24 = v17;
            }
            if (v19 == -3) {
              int v25 = v22;
            }
            else {
              int v25 = v23;
            }
            if (v19 == -3) {
              int v19 = 84;
            }
            BOOL v26 = v21 == -3;
            if (v21 == -3) {
              int v21 = 84;
            }
            int v27 = v25 - v26 + 4;
            unsigned int v28 = bswap32(v21 + 85 * (v19 + 85 * (v24 + 85 * (v13 + 85 * v10))));
            do
            {
              uint64_t v29 = *a5;
              if (*a5 >= (unint64_t)a4)
              {
                char v6 = 0;
              }

              else
              {
                *a5 = v29 + 1;
                *(_BYTE *)(a3 + v29) = v28;
              }

              v28 >>= 8;
              --v27;
            }

            while (v27);
            goto LABEL_2;
          }
        }
      }

      return 0LL;
    }
  }

  return 0LL;
}

uint64_t fusion_mt_key_cmp(uint64_t a1, void *a2, int a3, void *a4, int a5, int *a6)
{
  uint64_t result = 22LL;
  if (a3 == 8 && a5 == 8)
  {
    uint64_t result = 0LL;
    int v7 = *a2 > *a4;
    if (*a2 < *a4) {
      int v7 = -1;
    }
    *a6 = v7;
  }

  return result;
}

double nx_obj_cache_reset(uint64_t a1)
{
  *(void *)(a1 + 408) = 0LL;
  *(void *)(a1 + 720) = 0LL;
  *(void *)(a1 + 920) = 0LL;
  *(void *)(a1 + 1128) = 0LL;
  *(void *)(a1 + 1336) = 0LL;
  *(_BYTE *)(a1 + 635) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 424) = 0u;
  *(_OWORD *)(a1 + 440) = 0u;
  *(_OWORD *)(a1 + 456) = 0u;
  return result;
}

uint64_t nx_checkpoint_find_highest_xid(uint64_t a1, int *a2, unint64_t *a3)
{
  char v6 = _apfs_malloc(*(unsigned int *)(*(void *)(a1 + 376) + 36LL));
  if (!v6) {
    return 12LL;
  }
  int v7 = v6;
  uint64_t v19 = 0LL;
  uint64_t v8 = *(void *)(a1 + 376);
  if ((*(_DWORD *)(v8 + 104) & 0x7FFFFFFF) != 0)
  {
    unint64_t v9 = 0LL;
    BOOL v18 = 0;
    unint64_t v10 = 0LL;
    int v11 = -1;
    while (1)
    {
      v7[6] = 0;
      if (nx_checkpoint_desc_block_address(a1, v9, &v19)
        || dev_read(*(void *)(a1 + 384), v19))
      {
        log_err("%s:%d: %s couldn't read checkpoint descriptor block %d @ 0x%llx: %d\n");
      }

      else
      {
        int v14 = v7[6];
        if (v14 == -2147483647) {
          goto LABEL_12;
        }
        if (v14)
        {
          if (v14 == 1073741836)
          {
LABEL_12:
            if (obj_checksum_verify_phys(v7, *(_DWORD *)(*(void *)(a1 + 376) + 36LL), v12, v13))
            {
              log_err("%s:%d: %s invalid checksum for object type 0x%x @ checkpoint descriptor block %d @ 0x%llx\n");
            }

            else if (v7[7])
            {
              log_err("%s:%d: %s found unexpected subtype 0x%x for object type 0x%x @ checkpoint descriptor block %d\n");
            }

            else
            {
              unint64_t v15 = *((void *)v7 + 2);
              if (v15)
              {
                if (v15 >= v10)
                {
                  int v16 = v7[6];
                  if (v15 == v10 && v18 && v16 != -2147483647)
                  {
                    BOOL v18 = 1;
                  }

                  else
                  {
                    BOOL v18 = v16 == -2147483647;
                    unint64_t v10 = *((void *)v7 + 2);
                    int v11 = v9;
                  }
                }
              }

              else
              {
                log_err("%s:%d: %s found unexpected xid %lld @ checkpoint descriptor block %d\n");
              }
            }

            goto LABEL_7;
          }

          log_err("%s:%d: %s found unexpected object type 0x%x @ checkpoint descriptor block %d\n");
        }
      }

LABEL_7:
      ++v9;
      uint64_t v8 = *(void *)(a1 + 376);
      if (v9 >= (*(_DWORD *)(v8 + 104) & 0x7FFFFFFFu)) {
        goto LABEL_27;
      }
    }
  }

  unint64_t v10 = 0LL;
  int v11 = -1;
LABEL_27:
  _apfs_free(v7, *(unsigned int *)(v8 + 36));
  *a2 = v11;
  *a3 = v10;
  return 2 * (v10 == 0);
}

uint64_t nx_check_checkpoint_map_block( uint64_t a1, uint64_t a2, uint64_t a3, int a4, int8x16_t a5, int8x16_t a6)
{
  int v10 = obj_checksum_verify_phys((void *)a2, *(_DWORD *)(a1 + 36), a5, a6);
  unint64_t v11 = *(unsigned int *)(a2 + 36);
  if (!(_DWORD)v11) {
    return nx_corruption_detected_int(0LL);
  }
  if (v10) {
    int v12 = 2;
  }
  else {
    int v12 = 1;
  }
  if (*(_DWORD *)(a2 + 24) == 1073741836) {
    int v13 = v10 != 0;
  }
  else {
    int v13 = v12;
  }
  if (*(_DWORD *)(a2 + 28)) {
    ++v13;
  }
  if (*(void *)(a2 + 16) != *(void *)(a1 + 16)) {
    ++v13;
  }
  int v14 = *(void *)(a2 + 8) == a3 ? v13 : v13 + 1;
  uint64_t v15 = *(unsigned int *)(a1 + 36);
  if (v11 > (v15 - 40) / 0x28uLL || v14 != -(*(_DWORD *)(a2 + 32) & 1 ^ (a4 != 0))) {
    return nx_corruption_detected_int(0LL);
  }
  uint64_t v18 = 0LL;
  uint64_t v19 = *(unsigned int *)(a1 + 108);
  uint64_t v20 = a2 + 40;
  while (v11 != v18)
  {
    int v21 = *(_DWORD *)(v20 + 4);
    if ((*(_DWORD *)v20 & 0xC0000000) == 0x80000000) {
      int v22 = 1;
    }
    else {
      int v22 = 2;
    }
    else {
      int v24 = (*(_DWORD *)v20 & 0xC0000000) != 0x80000000;
    }
    if ((v21 & 0xC0000000) != 0) {
      ++v24;
    }
    if (((unsigned __int16)*(_DWORD *)(v20 + 4) > 0x24u || ((1LL << v21) & 0x100029CA01LL) == 0)
      && (unsigned __int16)*(_DWORD *)(v20 + 4) != 255)
    {
      ++v24;
    }

    if (!*(void *)(v20 + 24)) {
      ++v24;
    }
    if ((v19 & 0x80000000) != 0)
    {
      unsigned int v30 = v18;
    }

    else
    {
      unint64_t v25 = *(void *)(v20 + 32);
      unint64_t v26 = *(void *)(a1 + 120);
      if (v25 < v26) {
        ++v24;
      }
      if (v25 >= v26 + v19) {
        ++v24;
      }
      unsigned int v27 = v25 - v26;
      unsigned int v28 = *(_DWORD *)(a1 + 144);
      if (v28 <= v27) {
        int v29 = 0;
      }
      else {
        int v29 = *(_DWORD *)(a1 + 108);
      }
      unsigned int v30 = v29 - v28 + v27;
      if (v30 >= *(_DWORD *)(a1 + 148)) {
        ++v24;
      }
    }

    unsigned int v31 = *(_DWORD *)(v20 + 8);
    if (v31) {
      int v32 = v24;
    }
    else {
      int v32 = v24 + 1;
    }
    unsigned int v33 = v31 / v15;
    else {
      int v34 = 0;
    }
    if (v32 == v34)
    {
      ++v18;
      v20 += 40LL;
      if (v33 <= *(_DWORD *)(a1 + 148) - v30) {
        continue;
      }
    }

    return nx_corruption_detected_int(0LL);
  }

  return 0LL;
}

BOOL nx_superblock_agrees_with_main_superblock(uint64_t a1, uint64_t a2, const char *a3, int a4)
{
  if (*(void *)(a1 + 72) == *(void *)(a2 + 72) && *(void *)(a1 + 80) == *(void *)(a2 + 80))
  {
    int v9 = 0;
  }

  else
  {
    log_err("%s:%d: %s<->superblock mismatch on uuid\n", "nx_superblock_agrees_with_main_superblock", 263, a3);
    int v9 = 1;
  }

  BOOL v10 = *(void *)(a1 + 1280) == *(void *)(a2 + 1280) && *(void *)(a1 + 1287) == *(void *)(a2 + 1287);
  if (!v10 || (*(unsigned __int8 *)(a2 + 1295) ^ *(unsigned __int8 *)(a1 + 1295)) != a4)
  {
    log_err( "%s:%d: %s<->superblock mismatch on fusion uuid, tier2=%d\n",  "nx_superblock_agrees_with_main_superblock",  268,  a3,  a4);
    ++v9;
  }

  unint64_t v11 = *(void *)(a1 + 16);
  if (v11 > *(void *)(a2 + 16)) {
    log_err( "%s:%d: the %s superblock has a lower XID %lld than the main superblock %lld\n",  "nx_superblock_agrees_with_main_superblock",  273,  a3,  *(void *)(a2 + 16),  v11);
  }
  int v12 = *(_DWORD *)(a2 + 36);
  if (*(_DWORD *)(a1 + 36) != v12)
  {
    log_err( "%s:%d: %s<->superblock mismatch on block size: %d %d\n",  "nx_superblock_agrees_with_main_superblock",  279,  a3,  *(_DWORD *)(a1 + 36),  v12);
    ++v9;
  }

  uint64_t v13 = *(void *)(a2 + 40);
  if (*(void *)(a1 + 40) != v13)
  {
    log_err( "%s:%d: %s<->superblock mismatch on block count: %lld %lld\n",  "nx_superblock_agrees_with_main_superblock",  284,  a3,  *(void *)(a1 + 40),  v13);
    ++v9;
  }

  int v14 = *(_DWORD *)(a2 + 104);
  if (*(_DWORD *)(a1 + 104) != v14)
  {
    log_err( "%s:%d: %s<->superblock mismatch on checkpoint descriptor block count: %d %d\n",  "nx_superblock_agrees_with_main_superblock",  289,  a3,  *(_DWORD *)(a1 + 104),  v14);
    ++v9;
  }

  int v15 = *(_DWORD *)(a2 + 108);
  if (*(_DWORD *)(a1 + 108) != v15)
  {
    log_err( "%s:%d: %s<->superblock mismatch on checkpoint data block count: %d %d\n",  "nx_superblock_agrees_with_main_superblock",  294,  a3,  *(_DWORD *)(a1 + 108),  v15);
    ++v9;
  }

  uint64_t v16 = *(void *)(a2 + 112);
  if (*(void *)(a1 + 112) != v16)
  {
    log_err( "%s:%d: %s<->superblock mismatch on checkpoint descriptor base address: %lld %lld\n",  "nx_superblock_agrees_with_main_superblock",  299,  a3,  *(void *)(a1 + 112),  v16);
    ++v9;
  }

  uint64_t v17 = *(void *)(a2 + 120);
  if (*(void *)(a1 + 120) != v17)
  {
    log_err( "%s:%d: %s<->superblock mismatch on checkpoint data base address: %lld %lld\n",  "nx_superblock_agrees_with_main_superblock",  304,  a3,  *(void *)(a1 + 120),  v17);
    int v9 = 1;
  }

  return v9 == 0;
}

uint64_t nx_checkpoint_find_valid_checkpoint(uint64_t a1, uint64_t a2, int a3, uint64_t a4, unsigned int *a5)
{
  uint64_t v24 = 0LL;
  unint64_t v25 = 0LL;
  int v23 = 0LL;
  *a5 = -1;
  unsigned int v5 = *(_DWORD *)(a2 + 104) & 0x7FFFFFFF;
  if (!v5) {
    return 2LL;
  }
  int v10 = 0;
  unsigned int v11 = 0;
  int v21 = (_OWORD *)(a1 + 424);
  while (1)
  {
    if (v10 && (*(_BYTE *)(a2 + 1264) & 2) != 0) {
      return 35LL;
    }
    unsigned int v12 = (a3 + v5 + v10) % v5;
    uint64_t v26 = -1LL;
    if (nx_checkpoint_desc_block_address(a1, v12, &v26)
      || dev_read(*(void *)(a1 + 384), v26))
    {
      log_err("%s:%d: %s couldn't read checkpoint descriptor block %d @ %lld: %d\n");
      goto LABEL_8;
    }

    if (*(_DWORD *)(a4 + 24) == -2147483647)
    {
      if (nx_check_superblock(a4, *(_DWORD *)(a2 + 36), 1, v13, v14))
      {
        log_err("%s:%d: %s checkpoint superblock %d @ %lld: failed sanity check: %d\n");
        goto LABEL_8;
      }

      if ((*(void *)(a2 + 64) & 0xFFFFFFFFFFFFFEFDLL) != 0)
      {
        log_err( "%s:%d: %s unsupported nx_incompatible_features (0x%llx): unable to mount\n",  "nx_checkpoint_find_valid_checkpoint",  505,  (const char *)(*(void *)(a1 + 384) + 208LL),  *(void *)(a2 + 64) & 0xFFFFFFFFFFFFFEFDLL);
        return 75LL;
      }
    }

uint64_t nx_checkpoint_validate_checkpoint_map_blocks(uint64_t a1, unsigned int *a2)
{
  uint64_t v4 = _apfs_malloc(a2[9]);
  if (!v4) {
    return 12LL;
  }
  unsigned int v5 = v4;
  uint64_t v12 = 0LL;
  if (a2[35] == 1)
  {
LABEL_3:
    uint64_t v6 = 0LL;
  }

  else
  {
    int v7 = 0;
    while (1)
    {
      uint64_t v8 = nx_checkpoint_desc_block_address(a1, (v7 + a2[34]) % (a2[26] & 0x7FFFFFFF), &v12);
      if ((_DWORD)v8) {
        break;
      }
      uint64_t v8 = dev_read(*(void *)(a1 + 384), v12);
      if ((_DWORD)v8) {
        break;
      }
      uint64_t v8 = nx_check_checkpoint_map_block((uint64_t)a2, (uint64_t)v5, v12, v7 == a2[35] - 2, v9, v10);
      if ((_DWORD)v8) {
        break;
      }
      if (++v7 >= a2[35] - 1) {
        goto LABEL_3;
      }
    }

    uint64_t v6 = v8;
  }

  _apfs_free(v5, a2[9]);
  return v6;
}

uint64_t nx_checkpoint_load_data(uint64_t a1, uint64_t a2, unint64_t *a3, void *a4)
{
  size_t v6 = *(unsigned int *)(*(void *)(a1 + 376) + 36LL);
  unint64_t v42 = 0LL;
  int v7 = _apfs_malloc(v6);
  if (v7)
  {
    uint64_t v8 = v7;
    v45[0] = 0;
    uint64_t v43 = 0LL;
    uint64_t v44 = 0LL;
    unint64_t v40 = 0LL;
    uint64_t v41 = 0LL;
    if (*(_DWORD *)(a2 + 140) - 1 < 1)
    {
LABEL_28:
      _apfs_free(v8, v6);
      return 0LL;
    }

    else
    {
      int v9 = 0;
      unsigned int v10 = *(_DWORD *)(a2 + 144);
      unsigned int v11 = *(_DWORD *)(a2 + 136);
      int v38 = v6 - 1;
      int v34 = (char *)(v7 + 10);
      int v33 = *(_DWORD *)(a2 + 140) - 1;
      while (1)
      {
        uint64_t v41 = 0LL;
        unint64_t v12 = nx_checkpoint_desc_block_address(a1, v11, &v41);
        if ((_DWORD)v12
          || (unint64_t v12 = dev_read(*(void *)(a1 + 384), v41), (_DWORD)v12)
          || (unint64_t v12 = obj_checksum_verify_phys(v8, v6, v13, v14), (_DWORD)v12))
        {
          uint64_t v31 = v12;
          log_err("%s:%d: %s couldn't read checkpoint descriptor map block %d @ %lld: %d\n");
LABEL_39:
          _apfs_free(v8, v6);
LABEL_40:
          obj_cache_reset(*(pthread_mutex_t **)(a1 + 392), 0);
          *(void *)(a1 + 408) = 0LL;
          *(void *)(a1 + 720) = 0LL;
          *(void *)(a1 + 920) = 0LL;
          *(void *)(a1 + 1128) = 0LL;
          *(void *)(a1 + 1336) = 0LL;
          *(_BYTE *)(a1 + 635) = 0;
          *(_OWORD *)(a1 + 424) = 0u;
          *(_OWORD *)(a1 + 440) = 0u;
          *(_OWORD *)(a1 + 456) = 0u;
          return v31;
        }

        unsigned int v36 = v11;
        int v35 = v9;
        if (v8[9]) {
          break;
        }
LABEL_27:
        unsigned int v11 = (v36 + 1) % (*(_DWORD *)(a2 + 104) & 0x7FFFFFFFu);
        int v9 = v35 + 1;
        if (v35 + 1 == v33) {
          goto LABEL_28;
        }
      }

      unint64_t v15 = 0LL;
      unsigned int v16 = v34;
      while (1)
      {
        int v17 = *((_DWORD *)v16 + 2);
        uint64_t v41 = 0LL;
        uint64_t v18 = nx_checkpoint_data_block_address(a1, v10, &v41, &v40);
        if ((_DWORD)v18)
        {
          uint64_t v31 = v18;
          log_err( "%s:%d: %s couldn't read checkpoint data block %d @ %lld: %d\n",  "nx_checkpoint_load_data",  396,  (const char *)(*(void *)(a1 + 384) + 208LL),  v10,  v41,  v18);
          goto LABEL_39;
        }

        if (v41 != *((void *)v16 + 4)) {
          break;
        }
        unsigned int v19 = *(_DWORD *)(a2 + 144);
        unsigned int v20 = v10;
        if (v10 < v19) {
          unsigned int v20 = (*(_DWORD *)(a2 + 108) & 0x7FFFFFFF) + v10;
        }
        unsigned int v21 = v20 - v19;
        unsigned int v22 = *(_DWORD *)(a2 + 148);
        unsigned int v23 = (v38 + v17) / v6;
        if (v21 >= v22 || v21 + v23 > v22)
        {
          log_err( "%s:%d: %s checkpoint mapping (%d,%d) extends beyond checkpoint data range: %d,%d\n",  "nx_checkpoint_load_data",  412,  (const char *)(*(void *)(a1 + 384) + 208LL),  v21,  (v38 + v17) / v6,  *(_DWORD *)(a2 + 144),  v22);
          goto LABEL_34;
        }

        v45[0] = 0x80000000;
        uint64_t v24 = obj_descriptor_and_flags_for_type(*(_DWORD *)v16, v45, (uint64_t)&v43);
        HIDWORD(v43) = *((_DWORD *)v16 + 1);
        LODWORD(v44) = v17;
        if ((_DWORD)v24)
        {
          uint64_t v31 = v24;
LABEL_38:
          log_err("%s:%d: %s failed to load checkpoint data of type 0x%x:0x%x @ %lld\n");
          goto LABEL_39;
        }

        uint64_t v25 = obj_checkpoint_get( *(pthread_mutex_t **)(a1 + 392),  v45[0],  *((void *)v16 + 3),  (uint64_t)&v43,  v41,  v10,  v40,  *(void *)(a2 + 16),  (uint64_t *)&v42);
        if ((_DWORD)v25)
        {
          uint64_t v31 = v25;
          goto LABEL_38;
        }

        if (a3)
        {
          uint64_t v26 = v42;
          if (!*a4)
          {
            int v27 = obj_type((uint64_t)v42);
            uint64_t v26 = v42;
            if (v27 == 5)
            {
              unsigned int v28 = (void *)v42[7];
              unint64_t v29 = v28[32];
              if (v29 <= v28[27]) {
                unint64_t v29 = v28[27];
              }
              *a3 = v29;
              unint64_t v30 = v28[37];
              if (v30 <= v29) {
                unint64_t v30 = v29;
              }
              *a3 = v30;
              *a4 = *(void *)(a2 + 16);
            }
          }
        }

        else
        {
          uint64_t v26 = v42;
        }

        obj_release(v26);
        unsigned int v10 = (v23 + v10) % (*(_DWORD *)(a2 + 108) & 0x7FFFFFFFu);
        ++v15;
        v16 += 40;
      }

      log_err( "%s:%d: %s unexpected checkpoint map entry address: 0x%llx, expected 0x%llx\n",  "nx_checkpoint_load_data",  401,  (const char *)(*(void *)(a1 + 384) + 208LL),  *((void *)v16 + 4),  v41);
LABEL_34:
      uint64_t v31 = nx_corruption_detected_int(0LL);
      _apfs_free(v8, v6);
      if ((_DWORD)v31) {
        goto LABEL_40;
      }
    }
  }

  else
  {
    log_err( "%s:%d: %s couldn't allocate memory for checkpoint map block\n",  "nx_checkpoint_load_data",  367,  (const char *)(*(void *)(a1 + 384) + 208LL));
    return 12LL;
  }

  return v31;
}

uint64_t nx_dev_init( int *a1, const char *a2, int a3, int a4, char a5, uint64_t a6, char a7, const char **a8, void *a9)
{
  int v32 = 0LL;
  int v33 = 0LL;
  if (a4)
  {
    uint64_t v31 = a8;
    uint64_t v11 = 0LL;
    unsigned int v12 = 0;
    int v33 = (const char *)a1;
    goto LABEL_3;
  }

  if ((a5 & 1) != 0) {
    return 45LL;
  }
  uint64_t v25 = dev_init((const char *)a1, a3, (int **)&v33);
  if ((_DWORD)v25)
  {
    uint64_t v21 = v25;
    log_err("%s:%d: device initialization failed: %d\n", "nx_dev_init", 727, v25);
LABEL_43:
    if (v33) {
      dev_close((uint64_t)v33);
    }
    if (v32) {
      dev_close((uint64_t)v32);
    }
    return v21;
  }

  if (a2)
  {
    uint64_t v26 = dev_init(a2, a3, &v32);
    if ((_DWORD)v26)
    {
      uint64_t v21 = v26;
      log_err("%s:%d: tier2 device initialization failed: %d\n", "nx_dev_init", 732, v26);
      goto LABEL_43;
    }
  }

  uint64_t v31 = a8;
  if (v32)
  {
    unsigned int v12 = dev_block_size((uint64_t)v32);
    if (v32) {
      uint64_t v11 = dev_block_count((uint64_t)v32);
    }
    else {
      uint64_t v11 = 0LL;
    }
  }

  else
  {
    uint64_t v11 = 0LL;
    unsigned int v12 = 0;
  }

LABEL_3:
  unsigned int v13 = dev_block_size((uint64_t)v33);
  uint64_t v14 = dev_block_count((uint64_t)v33);
  if (v13 <= 0x1000) {
    unsigned int v15 = 4096;
  }
  else {
    unsigned int v15 = v13;
  }
  unint64_t v16 = v11 * v12 + v14 * v13;
  while (1)
  {
    if (v15 % v13)
    {
      log_err("%s:%d: %s block size %d is not an even multiple of device block size %d\n");
LABEL_42:
      uint64_t v21 = 22LL;
      goto LABEL_43;
    }

    if (v15 > v13) {
      dev_set_block_size((uint64_t)v33);
    }
    int v17 = (unsigned int *)_apfs_malloc(v15);
    if (!v17)
    {
      log_err("%s:%d: %s couldn't allocate memory for superblock of size %d\n", "nx_dev_init", 769, v33 + 208, v15);
      uint64_t v21 = 12LL;
      goto LABEL_43;
    }

    uint64_t v18 = dev_read((uint64_t)v33, 0LL);
    if ((_DWORD)v18)
    {
      uint64_t v21 = v18;
      log_err("%s:%d: %s couldn't read superblock of size %d\n");
LABEL_37:
      _apfs_free(v17, v15);
      goto LABEL_43;
    }

    uint64_t v21 = nx_check_superblock((uint64_t)v17, v15, 0, v19, v20);
    if ((_DWORD)v21) {
      goto LABEL_13;
    }
    if (v17[9] % v13)
    {
      log_err( "%s:%d: %s superblock block size %d not an even multiple of device block size %d\n",  "nx_dev_init",  785,  v33 + 208,  v17[9],  v13);
      uint64_t v21 = nx_corruption_detected_int(0LL);
      if ((a7 & 1) != 0) {
        goto LABEL_13;
      }
    }

    else
    {
      uint64_t v21 = 0LL;
      if ((a7 & 1) != 0) {
        goto LABEL_13;
      }
    }

    if (!(_DWORD)v21)
    {
      uint64_t v22 = v17[9];
      if (*((void *)v17 + 5) * v22 <= v16) {
        goto LABEL_15;
      }
      log_err( "%s:%d: %s superblock container size %lld greater than device size(s) %lld\n",  "nx_dev_init",  791,  v33 + 208,  *((void *)v17 + 5) * v22,  v16);
      uint64_t v21 = nx_corruption_detected_int(0LL);
    }

    obj_release(v18);
  }

  return v5;
}

uint64_t nx_mount(int *a1, uint64_t a2, uint64_t **a3)
{
  uint64_t v129 = *MEMORY[0x1895F89C0];
  uint64_t v126 = 0LL;
  uint64_t v127 = 0LL;
  memset(v128, 0, sizeof(v128));
  unint64_t v124 = 0LL;
  unint64_t v125 = 0LL;
  unsigned int v123 = 0LL;
  uint64_t v119 = 0LL;
  *a3 = 0LL;
  if (a2)
  {
    unsigned int v4 = *(unsigned __int16 *)(a2 + 8);
    uint64_t v5 = *(unsigned int *)(a2 + 4);
    int v6 = *(_DWORD *)a2 & 1;
    int16x4_t v7 = vdup_n_s16(v4);
    int16x4_t v8 = (int16x4_t)vand_s8((int8x8_t)v7, (int8x8_t)0x2000100001000004LL);
    if ((v4 & 8) != 0)
    {
      unsigned int v10 = *(const char **)(a2 + 16);
      int v9 = (v4 >> 6) & 1;
    }

    else
    {
      LOBYTE(v9) = 0;
      unsigned int v10 = 0LL;
    }

    BOOL v17 = (v4 & 0x4000 | v6) != 0;
    if ((vtst_s16(v8, v8).i8[6] & 1) != 0 && (v5 & 0x80000000) == 0)
    {
      log_err("%s:%d: conflicting mount options: load from temporary checkpoint AND checkpoint descriptor index %d\n");
LABEL_11:
      unsigned int v18 = 0;
      int8x16_t v19 = 0LL;
      uint64_t v20 = 22LL;
      goto LABEL_12;
    }

    if ((v4 & 0xC00) == 0x800)
    {
      log_err("%s:%d: conflicting mount options: is_system_graft but not is_graft\n");
      goto LABEL_11;
    }

    unint64_t v112 = a3;
    char v110 = v4 & 1;
    int v13 = (v4 >> 1) & 1;
    int8x8_t __n = (int8x8_t)vtst_s16(v7, (int16x4_t)0x2000100001000004LL);
    int v113 = (v4 >> 5) & 1;
    int v14 = (v4 >> 9) & 1;
    BOOL v22 = (v4 & 0xC00) != 0;
    int v115 = (v4 >> 11) & 1;
    crc32c_init();
    BOOL v12 = v22;
    if (v17) {
      int v23 = 16;
    }
    else {
      int v23 = 32;
    }
    int v15 = (v23 | (2 * v6)) ^ 2;
    uint64_t v24 = v5;
    char v11 = v110;
    uint64_t v16 = v24;
  }

  else
  {
    unint64_t v112 = a3;
    crc32c_init();
    int v6 = 0;
    char v11 = 0;
    int v113 = 0;
    BOOL v12 = 0;
    int v115 = 0;
    int v13 = 0;
    LOBYTE(v9) = 0;
    int v14 = 0;
    unsigned int v10 = 0LL;
    int8x8_t __n = 0LL;
    int v15 = 34;
    uint64_t v16 = 0xFFFFFFFFLL;
  }

  unsigned int v122 = 0;
  unint64_t v121 = 0LL;
  unsigned int v120 = 0;
  uint64_t v25 = a1;
  BOOL v26 = v12;
  uint64_t v27 = nx_dev_init(v25, v10, v15, v13, v12, 0LL, v9, &v127, &v124);
  if ((_DWORD)v27)
  {
    uint64_t v20 = v27;
    if ((_DWORD)v27 != 79) {
      log_err("%s:%d: device initialization failed: %d\n", "nx_mount", 1104, v27);
    }
    return v20;
  }

  BOOL v105 = v26;
  char v111 = v11;
  unint64_t v29 = v127;
  else {
    int v30 = 1;
  }
  int v107 = v30;
  int is_external = dev_is_external((uint64_t)v29);
  unsigned int v32 = dev_real_block_size((uint64_t)v29);
  int v33 = v124;
  size_t v34 = v124[9];
  BOOL v35 = v14 == 0;
  int v36 = 0x8000;
  if (v14) {
    unsigned int v37 = 128;
  }
  else {
    unsigned int v37 = 0x8000;
  }
  int v38 = 0x10000;
  if (v35) {
    int v39 = 0x10000;
  }
  else {
    int v39 = 128;
  }
  if (!v35)
  {
    int v38 = 128;
    int v36 = 128;
  }

  log_debug("%s:%d: %s initializing cache w/hash_size %u and cache size %u\n", "nx_mount", 1293, v29 + 208, v36, v38);
  unsigned int v40 = v39;
  unsigned int v18 = v34;
  uint64_t v41 = obj_cache_create(v37, v40, v34, &v126);
  if ((_DWORD)v41)
  {
    uint64_t v42 = v41;
    log_err("%s:%d: %s object cache initialization failed: %d\n", "nx_mount", 1297, v29 + 208, v41);
    int8x16_t v19 = 0LL;
    uint64_t v20 = v42;
    goto LABEL_12;
  }

  uint64_t v43 = (uint64_t)v33;
  uint64_t v44 = v126;
  if (v115) {
    *(void *)&v126[14].__opaque[16] = 1LL;
  }
  memset((char *)&v128[3] + 8, 0, 40);
  *(_OWORD *)((char *)&v128[2] + 8) = 0u;
  memset((char *)v128 + 8, 0, 32);
  *(void *)&v128[0] = __PAIR64__(v34, v32);
  *((void *)&v128[0] + 1) = v33[5];
  *((void *)&v128[1] + 1) = v29;
  *(void *)&v128[2] = 1LL;
  DWORD2(v128[2]) = v107;
  HIDWORD(v128[2]) = is_external != 0;
  v128[3] = vmovl_u16((uint16x4_t)vand_s8(__n, (int8x8_t)0x1000100010001LL));
  uint64_t bootstrap = obj_create_bootstrap(v44, 0x80000000, 1uLL, (uint64_t)&nx_desc, (uint64_t)v128, v34, 1LL, (uint64_t *)&v125);
  uint64_t v46 = v16;
  if ((_DWORD)bootstrap)
  {
    uint64_t v20 = bootstrap;
    log_err("%s:%d: %s object cache bootstrap failed: %d\n");
LABEL_47:
    int8x16_t v19 = 0LL;
    goto LABEL_12;
  }

  uint64_t v47 = v125;
  if (v113) {
    *((_BYTE *)v125 + 642) = 1;
  }
  memcpy((void *)v47[47], v33, v34);
  unint64_t v48 = (int64x2_t *)v126;
  uint64_t v49 = v125[47];
  *(void *)v126[6].__opaque = v125;
  v48[25].i64[0] = *(void *)(v49 + 88);
  __strlcpy_chk();
  obj_mem_mgr_register((int64x2_t *)v126, v105 & (v115 ^ 1));
  uint64_t v126 = 0LL;
  uint64_t v127 = 0LL;
  int v50 = *(_DWORD *)(v49 + 104);
  if (v50 < 0
    && (uint64_t v20 = nx_metadata_fragmented_sanity_check((uint64_t)v125, *(void *)(v49 + 112), v50 & 0x7FFFFFFF), (_DWORD)v20)
    || (int v51 = *(_DWORD *)(v49 + 108), v51 < 0)
    && (uint64_t v20 = nx_metadata_fragmented_sanity_check((uint64_t)v125, *(void *)(v49 + 120), v51 & 0x7FFFFFFF), (_DWORD)v20))
  {
    log_err("%s:%d: %s fragmented checkpoint area failed sanity check: %d\n");
    goto LABEL_47;
  }

  int8x16_t v19 = _apfs_malloc(v34);
  if (!v19)
  {
    log_err( "%s:%d: %s failed to allocate buffer for checkpoint superblock\n",  "nx_mount",  1402,  (const char *)(v125[48] + 208));
    uint64_t v20 = 12LL;
    goto LABEL_12;
  }

  __int8 v52 = __n.i8[2];
  if ((*(_BYTE *)(v49 + 1264) & 2) == 0) {
    goto LABEL_57;
  }
  unsigned int v53 = v125;
  *((_BYTE *)v125 + 626) = 1;
  if (*((_BYTE *)v53 + 628))
  {
    log_err("%s:%d: %s storage is untrusted. Container cleanly-unmounted flag ignored\n", *(double *)&__n);
  }

  else if (*(_DWORD *)(v49 + 140))
  {
    if (*(_DWORD *)(v49 + 148)) {
      goto LABEL_57;
    }
    log_err("%s:%d: %s checkpoint data length is bad.  Container cleanly-unmounted flag ignored\n", *(double *)&__n);
  }

  else
  {
    log_err( "%s:%d: %s checkpoint descriptor length is bad.  Container cleanly-unmounted flag ignored\n",  *(double *)&__n);
  }

  *(void *)(v49 + 1264) &= ~2uLL;
  v33[158] &= ~2uLL;
  __int8 v52 = __n.i8[2];
LABEL_57:
  int v116 = 0;
  uint64_t __na = v34;
  char v54 = 0;
  int v114 = 0;
  __int8 v106 = v52;
  char v108 = 0;
  while (1)
  {
    unint64_t v55 = v125;
    if ((*(_BYTE *)(v49 + 1264) & 2) != 0) {
      break;
    }
    if (((*((_BYTE *)v125 + 633) != 0) & v54) != 0)
    {
      int v56 = 1;
      goto LABEL_62;
    }

    uint64_t highest_xid = nx_checkpoint_find_highest_xid((uint64_t)v125, (int *)&v120, &v121);
    if ((_DWORD)highest_xid)
    {
      uint64_t v20 = highest_xid;
      log_err("%s:%d: %s failed to scan checkpoint descriptor area for largest xid: %d\n");
      goto LABEL_146;
    }

LABEL_66:
    if ((v46 & 0x80000000) == 0)
    {
      uint64_t v60 = v46;
      BOOL v61 = (const void *)v43;
      goto LABEL_75;
    }

    uint64_t v63 = (const void *)v43;
    uint64_t valid_checkpoint = nx_checkpoint_find_valid_checkpoint((uint64_t)v125, v43, v120, (uint64_t)v19, &v122);
    uint64_t v20 = valid_checkpoint;
    if ((_DWORD)valid_checkpoint == 35)
    {
      if ((*(_BYTE *)(v49 + 1264) & 2) == 0) {
        goto LABEL_124;
      }
      log_err( "%s:%d: %s Couldn't load checkpoint from cleanly-unmounted state.  Falling back to descriptor scan.\n",  "nx_mount",  1626,  (const char *)(v125[48] + 208));
      *(void *)(v49 + 1264) &= ~2uLL;
      *(void *)(v43 + 1264) &= ~2uLL;
    }

    else
    {
      if ((_DWORD)valid_checkpoint)
      {
LABEL_124:
        log_err( "%s:%d: %s failed to find valid checkpoint: %d\n",  "nx_mount",  1631,  (const char *)(v125[48] + 208),  valid_checkpoint);
        goto LABEL_146;
      }

      uint64_t v109 = v19[2];
      log_debug( "%s:%d: %s checkpoint search: largest xid %lld, best xid %lld @ %d\n",  "nx_mount",  1635,  (const char *)(v125[48] + 208),  v121,  v109,  v122);
      uint64_t v65 = *(void *)(v43 + 16);
      unint64_t v66 = v125;
      if (v65 != v19[2])
      {
        log_err( "%s:%d: %s reloading after unclean unmount, checkpoint xid %lld, superblock xid %lld\n",  "nx_mount",  1637,  (const char *)(v125[48] + 208),  v19[2],  v65);
        unint64_t v66 = v125;
        if (!*((_BYTE *)v125 + 633))
        {
          char v108 = 1;
          *((_BYTE *)v125 + 645) = 1;
        }
      }

LABEL_169:
        int v94 = spaceman_allocation_init(v90);
        if (v94) {
          log_err( "%s:%d: %s failed to set up sm allocation metadata: %d\n",  "nx_mount",  1765,  (const char *)(v125[48] + 208),  v94);
        }
        char v97 = v125;
        if ((v108 & 1) != 0)
        {
          obj_checksum_set((uint64_t)v125, v95, v96);
          uint64_t v98 = dev_write(v125[48], 0LL);
          char v97 = v125;
          if ((_DWORD)v98)
          {
            uint64_t v20 = v98;
            log_err("%s:%d: %s failed to write superblock to block 0: %d\n");
            goto LABEL_146;
          }

          uint64_t v99 = (_BYTE *)v125[47];
          if ((v99[65] & 1) != 0)
          {
            uint64_t v100 = nx_fusion_superblock_write((uint64_t)v125, v99);
            char v97 = v125;
            if ((_DWORD)v100)
            {
              uint64_t v20 = v100;
              log_err("%s:%d: %s failed to write superblock to fusion tier2 device block 0: %d\n");
              goto LABEL_146;
            }
          }
        }

        uint64_t v101 = v97[47];
        unint64_t v102 = *(void *)(v101 + 1384);
        unint64_t v103 = apfs_source_version_val_full();
        if (v102 < v103) {
          *(void *)(v101 + 1384) = v103;
        }
        nx_mount_initiate_free_space_trims(v97);
        nx_reaper_check_for_work(v125);
        goto LABEL_180;
      }

      nx_obj_cache_reset((uint64_t)v84);
      memcpy((void *)v125[47], v63, v34);
      char v54 = 1;
    }
  }

  log_info("%s:%d: %s container cleanly-unmounted flag set.\n", "nx_mount", 1436, (const char *)(v125[48] + 208));
  unint64_t v55 = v125;
  int v56 = *((unsigned __int8 *)v125 + 633);
LABEL_62:
  unsigned int v57 = *(_DWORD *)(v49 + 136) + *(_DWORD *)(v49 + 140) - 1;
  unsigned int v58 = *(_DWORD *)(v49 + 104) & 0x7FFFFFFF;
  uint64_t v59 = v57 % v58;
  unsigned int v120 = v57 % v58;
  unint64_t v121 = *(void *)(v49 + 16);
  if (v56 == 0 || (v54 & 1) == 0) {
    goto LABEL_66;
  }
  log_info( "%s:%d: %s Attempting to load from temporary checkpoint (start xid %lld).\n",  "nx_mount",  1441,  (const char *)(v55[48] + 208),  *(void *)(v49 + 1408));
  uint64_t v60 = v59;
  BOOL v61 = (const void *)v43;
  if (!*(void *)(v49 + 1408))
  {
    log_err( "%s:%d: %s No temporary checkpoint start xid!  Aborting!\n",  "nx_mount",  1443,  (const char *)(v125[48] + 208));
    uint64_t v20 = 100LL;
LABEL_146:
    unsigned int v18 = __na;
    goto LABEL_12;
  }

LABEL_75:
  unsigned int v67 = *(_DWORD *)(v49 + 104) & 0x7FFFFFFF;
  if (v60 >= v67)
  {
    log_err( "%s:%d: %s checkpoint descriptor index %d out of range [0...%d]\n",  "nx_mount",  1461,  (const char *)(v125[48] + 208),  v60,  v67 - 1);
    unint64_t v86 = v125;
LABEL_145:
    uint64_t v20 = nx_corruption_detected_int((uint64_t)v86);
    goto LABEL_146;
  }

  uint64_t v46 = v60;
  uint64_t v68 = nx_checkpoint_desc_block_address((uint64_t)v125, v60, &v119);
  if ((_DWORD)v68)
  {
    uint64_t v20 = v68;
LABEL_140:
    log_err("%s:%d: %s couldn't read checkpoint descriptor block %d @ %lld: %d\n");
    goto LABEL_12;
  }

  uint64_t v69 = dev_read(v125[48], v119);
  uint64_t v20 = v69;
  if (*((_BYTE *)v125 + 633))
  {
    if (!(_DWORD)v69 && (_DWORD)v34)
    {
      uint64_t v72 = 0LL;
      while (!*((_BYTE *)v19 + v72))
      {
        if (v34 == ++v72)
        {
          uint64_t v20 = 0LL;
          goto LABEL_85;
        }
      }

      log_err( "%s:%d: %s Attempt to load temporary checkpoint found unexpected data (0x%02x @ %d), checkpoint descriptor block %d @ %lld\n",  "nx_mount",  1477,  (const char *)(v125[48] + 208),  *((char *)v19 + v72),  v72,  v46,  v119);
      uint64_t v20 = 22LL;
    }

void nx_mount_initiate_free_space_trims(void *a1)
{
  int v2 = spaceman_scan_free_blocks(a1, 0, 1);
  if (v2) {
    log_err( "%s:%d: %s *** trim'ing free blocks returned: %d\n",  "nx_mount_initiate_free_space_trims",  964,  (const char *)(a1[48] + 208LL),  v2);
  }
  spaceman_free_extent_cache_print_stats(a1);
}

void nx_unmount(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 400);
  if (v2)
  {
    if (!*(_BYTE *)(a1 + 627))
    {
      tx_unmount(a1);
      uint64_t v2 = *(void *)(a1 + 400);
    }

    tx_mgr_destroy(a1, v2, *(_DWORD *)(*(void *)(a1 + 376) + 36LL));
  }

  uint64_t v3 = *(uint64_t **)(a1 + 408);
  if (v3)
  {
    obj_release(v3);
    *(void *)(a1 + 408) = 0LL;
  }

  for (uint64_t i = 0LL; i != 32; i += 8LL)
  {
    uint64_t v5 = *(uint64_t **)(a1 + 432 + i);
    if (v5) {
      obj_release(v5);
    }
  }

  uint64_t v6 = *(void *)(a1 + 464);
  if (v6)
  {
    btree_delete(v6, 0LL, 0LL);
    obj_release(*(uint64_t **)(a1 + 464));
  }

  uint64_t v7 = *(void *)(a1 + 1824);
  if (v7)
  {
    btree_delete(v7, 0LL, 0LL);
    obj_release(*(uint64_t **)(a1 + 1824));
    *(void *)(a1 + 1824) = 0LL;
  }

  uint64_t v8 = *(void *)(a1 + 384);
  if (v8) {
    dev_close(v8);
  }
  uint64_t v9 = *(void *)(a1 + 392);
  if (v9) {
    obj_cache_destroy(v9);
  }
}

uint64_t media_dev_barrier()
{
  return 45LL;
}

uint64_t media_dev_unmap_flush()
{
  return 45LL;
}

uint64_t media_dev_unmap()
{
  return 45LL;
}

uint64_t media_dev_features()
{
  return 45LL;
}

uint64_t media_dev_is_writable()
{
  return 0LL;
}

uint64_t media_dev_is_external(uint64_t a1)
{
  return *(unsigned int *)(a1 + 112);
}

uint64_t media_dev_real_block_size(uint64_t a1)
{
  return *(unsigned int *)(a1 + 96);
}

uint64_t media_dev_block_size(uint64_t a1)
{
  return *(unsigned int *)(a1 + 100);
}

uint64_t media_dev_set_block_size(uint64_t a1, unsigned int a2)
{
  unint64_t v2 = *(void *)(a1 + 128) * (unint64_t)*(unsigned int *)(a1 + 100) / a2;
  *(_DWORD *)(a1 + 100) = a2;
  *(void *)(a1 + 128) = v2;
  return 0LL;
}

uint64_t media_dev_block_count(uint64_t a1)
{
  return *(void *)(a1 + 128);
}

uint64_t media_dev_read(uint64_t a1, unint64_t a2, unint64_t a3)
{
  uint64_t v3 = *(void **)(a1 + 16);
  if (!v3) {
    return 6LL;
  }
  if (!*v3) {
    return 6LL;
  }
  unsigned int v4 = (unsigned int (*)(void))v3[1];
  if (!v4) {
    return 6LL;
  }
  unint64_t v5 = *(void *)(a1 + 128);
  BOOL v6 = v5 > a2;
  unint64_t v7 = v5 - a2;
  if (!v6 || v7 < a3) {
    return 6LL;
  }
  if (v4()) {
    return 5LL;
  }
  return 0LL;
}

uint64_t media_dev_close(void **a1)
{
  a1[2] = 0LL;
  _apfs_free(a1, 216LL);
  return 0LL;
}

uint64_t media_dev_write()
{
  return 45LL;
}

__CFDictionary *APFSContainerGetFreespaceInfo(const __CFString *a1, const __CFString *a2)
{
  int v28 = 0;
  uint64_t v26 = 0LL;
  unint64_t v27 = 0LL;
  uint64_t v25 = 0LL;
  memset(v24, 0, sizeof(v24));
  parse_nx_mount_options(0LL, (int *)v24);
  LODWORD(v24[0]) |= 1u;
  WORD4(v24[0]) |= 1u;
  apfs_log_level = 3;
  if (a2)
  {
    if (!a1)
    {
      if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_ERROR)) {
        APFSContainerGetFreespaceInfo_cold_6();
      }
      goto LABEL_12;
    }

    *(_OWORD *)value = 0u;
    int64x2_t v30 = 0u;
    if (((unsigned int (*)(const __CFString *, uint64_t, void **))a2)(a1, 2LL, value))
    {
      if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_ERROR)) {
        APFSContainerGetFreespaceInfo_cold_10();
      }
LABEL_12:
      if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_ERROR)) {
        APFSContainerGetFreespaceInfo_cold_5();
      }
LABEL_14:
      unint64_t v5 = 0LL;
      CFMutableArrayRef Mutable = 0LL;
LABEL_15:
      CFNumberRef v7 = 0LL;
      CFNumberRef v8 = 0LL;
      CFNumberRef v9 = 0LL;
      goto LABEL_16;
    }

    char v11 = (const __CFString **)_apfs_calloc(1uLL, 0x10uLL);
    if (!v11)
    {
      if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_ERROR)) {
        APFSContainerGetFreespaceInfo_cold_7();
      }
      goto LABEL_12;
    }

    BOOL v12 = v11;
    int v13 = (int64x2_t *)_apfs_calloc(1uLL, 0xD8uLL);
    if (!v13)
    {
      _apfs_free(v12, 16LL);
      if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_ERROR)) {
        APFSContainerGetFreespaceInfo_cold_8();
      }
      goto LABEL_12;
    }

    v13->i64[0] = -1LL;
    v13[7].i32[1] = 0;
    const char *v12 = a1;
    v12[1] = a2;
    v13[1].i64[0] = (uint64_t)v12;
    v13[4].i64[1] = (uint64_t)apfs_userio_media;
    int64x2_t v14 = *(int64x2_t *)value;
    int64x2_t v15 = v30;
    v13[8].i64[0] = (uint64_t)value[1];
    int64x2_t v16 = vzip1q_s64(v14, v15);
    v16.i32[1] = v16.i32[0];
    v13[6] = v16;
    v13[7].i32[0] = v30.i32[2] == 0;
    WORD4(v24[0]) |= 2u;
    if (nx_mount(v13->i32, (uint64_t)v24, &v25))
    {
      if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_ERROR)) {
        APFSContainerGetFreespaceInfo_cold_9();
      }
      goto LABEL_14;
    }
  }

  else
  {
    CStringPtr = (int *)CFStringGetCStringPtr(a1, 0x8000100u);
    if (!CStringPtr)
    {
      if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_ERROR)) {
        APFSContainerGetFreespaceInfo_cold_1();
      }
      goto LABEL_14;
    }

    if (nx_mount(CStringPtr, (uint64_t)v24, &v25))
    {
      if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_ERROR)) {
        APFSContainerGetFreespaceInfo_cold_4();
      }
      goto LABEL_14;
    }
  }

  unint64_t v5 = 0LL;
  CFMutableArrayRef Mutable = 0LL;
  CFNumberRef v7 = 0LL;
  CFNumberRef v8 = 0LL;
  CFNumberRef v9 = 0LL;
  if (!spaceman_size_info(v25, 0LL, 0, &v28, &v27, 0LL, 0LL, 0LL, 0LL))
  {
    BOOL v17 = (const __CFAllocator *)*MEMORY[0x189604DB0];
    CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x189604DB0], 0LL, MEMORY[0x189605228]);
    if (!Mutable)
    {
LABEL_62:
      unint64_t v5 = 0LL;
      goto LABEL_15;
    }

    if (spaceman_iterate_free_extents( (uint64_t)v25,  (uint64_t (*)(void *, unint64_t, int64_t))freeExtentInfoCallback,  Mutable))
    {
      if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_ERROR)) {
        APFSContainerGetFreespaceInfo_cold_3();
      }
      goto LABEL_62;
    }

    v34.length = CFArrayGetCount(Mutable);
    v34.location = 0LL;
    CFArraySortValues(Mutable, v34, (CFComparatorFunction)freeExtentInfoComparator, 0LL);
    int64_t v18 = v27;
    CFIndex Count = CFArrayGetCount(Mutable);
    if (Count)
    {
      ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(Mutable, Count - 1);
      if (!ValueAtIndex
        || (uint64_t v21 = ValueAtIndex,
            value[0] = 0LL,
            int64_t valuePtr = 0LL,
            int v33 = 0LL,
            int64_t v31 = 0LL,
            !CFDictionaryGetValueIfPresent( ValueAtIndex,  @"com.apple.apfs.container.extaddr",  (const void **)value))
        || !CFDictionaryGetValueIfPresent(v21, @"com.apple.apfs.container.extlen", (const void **)&v33)
        || !CFNumberGetValue((CFNumberRef)value[0], kCFNumberLongLongType, &valuePtr)
        || !CFNumberGetValue((CFNumberRef)v33, kCFNumberLongLongType, &v31))
      {
        uint64_t v26 = -1LL;
        goto LABEL_60;
      }

      if ((v18 <= valuePtr || v31 >= v18 - valuePtr) && valuePtr < v18) {
        int64_t v18 = valuePtr;
      }
    }

    uint64_t v26 = v18;
    if ((v18 & 0x8000000000000000LL) == 0)
    {
      CFNumberRef v8 = CFNumberCreate(v17, kCFNumberIntType, &v28);
      CFNumberRef v7 = CFNumberCreate(v17, kCFNumberLongLongType, &v27);
      CFNumberRef v22 = CFNumberCreate(v17, kCFNumberLongLongType, &v26);
      CFNumberRef v9 = v22;
      unint64_t v5 = 0LL;
      if (v8)
      {
        if (v7)
        {
          if (v22)
          {
            int v23 = CFDictionaryCreateMutable(v17, 0LL, MEMORY[0x189605240], MEMORY[0x189605250]);
            unint64_t v5 = v23;
            if (v23)
            {
              CFDictionaryAddValue(v23, @"com.apple.apfs.container.fstype", @"APFS");
              CFDictionaryAddValue(v5, @"com.apple.apfs.container.blksize", v8);
              CFDictionaryAddValue(v5, @"com.apple.apfs.container.size", v7);
              CFDictionaryAddValue(v5, @"com.apple.apfs.container.tidemark", v9);
              CFDictionaryAddValue(v5, @"com.apple.apfs.container.extlist", Mutable);
            }
          }
        }
      }

      goto LABEL_16;
    }

LABEL_60:
    if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_ERROR)) {
      APFSContainerGetFreespaceInfo_cold_2();
    }
    goto LABEL_62;
  }

    CFRange v34 = a2 == 0;
    BOOL v35 = a1[2];
    int v36 = (v35 & 0xC00000000LL) != 0;
    if ((v35 & 0x800000000LL) != 0) {
      unsigned int v37 = 113;
    }
    else {
      unsigned int v37 = 105;
    }
    int8x16_t v19 = v34 && v36;
    if (v34 && v36) {
      int v38 = v37;
    }
    else {
      int v38 = 72;
    }
    if ((v35 & 0x10000000) != 0)
    {
      uint64_t v49 = 0LL;
    }

    else
    {
      if (*((_WORD *)a1 + 18) == 11 || *((_WORD *)a1 + 20) == 11) {
        int v39 = 2LL;
      }
      else {
        int v39 = 1LL;
      }
      uint64_t v49 = v39;
    }

    unsigned int v40 = spaceman_alloc((void *)v6, v38, v12, a3, (unint64_t *)&v49, 0LL);
    if ((_DWORD)v40)
    {
      CFNumberRef v7 = v40;
      if (nx_ratelimit_log_allowed(*(void *)(*(void *)v6 + 392LL)))
      {
        if (*(_WORD *)(v6 + 36) == 13) {
          uint64_t v41 = (const char *)(v6 + 3992);
        }
        else {
          uint64_t v41 = (const char *)(*(void *)(v6 + 384) + 208LL);
        }
        log_err( "%s:%d: %s oid %lld flags 0x%llx 0x%x type 0x%x/0x%x xid %lld (cur xid %lld) error allocating space to write %d ; blkcount %d (o_size_phys %d) paddr %lld\n",
          "obj_write_prepare",
          6460,
          v41,
          a1[14],
          a1[2],
          *((_DWORD *)a1 + 8),
          *((_DWORD *)a1 + 9),
          *((_DWORD *)a1 + 10),
          a1[18],
          a3,
          v7,
          v47,
          *((_DWORD *)a1 + 12),
          v49);
      }

      int64_t v18 = 0LL;
      int8x16_t v19 = 0;
      goto LABEL_100;
    }

    if (a1[1]) {
      apfs_check_for_spillover();
    }
    int64x2_t v16 = v48;
    int64_t v18 = v49;
    int v33 = v49;
    if (v49)
    {
LABEL_81:
      uint64_t v49 = v33;
      uint64_t v42 = a1[2];
      uint64_t v43 = (v42 >> 2) & 0x700 | (v42 >> 8) & 0xE0 | 4;
      if ((v42 & 0x10000000) == 0) {
        uint64_t v43 = 0;
      }
      if (v13) {
        uint64_t v44 = v13;
      }
      else {
        uint64_t v44 = v16;
      }
      uint64_t v45 = omap_set(v6, a1[14], v44, v33, *((_DWORD *)a1 + 12), v43 | (v42 >> 26) & 8, a3);
      if (!(_DWORD)v45)
      {
        int64x2_t v16 = v48;
        goto LABEL_12;
      }

      CFNumberRef v7 = v45;
      if (nx_ratelimit_log_allowed(*(void *)(*(void *)v6 + 392LL)))
      {
        if (*(_WORD *)(v6 + 36) == 13) {
          uint64_t v46 = (const char *)(v6 + 3992);
        }
        else {
          uint64_t v46 = (const char *)(*(void *)(v6 + 384) + 208LL);
        }
        log_err( "%s:%d: %s oid 0x%llx flags 0x%llx 0x%x type 0x%x/0x%x error setting mapping for write %d\n",  "obj_write_prepare",  6491,  v46,  a1[14],  a1[2],  *((_DWORD *)a1 + 8),  *((_DWORD *)a1 + 9),  *((_DWORD *)a1 + 10),  v7);
      }

      if (!a2)
      {
LABEL_20:
        pthread_mutex_lock((pthread_mutex_t *)*a1);
        if (v18) {
          a1[19] = v18;
        }
        if (!v19) {
          goto LABEL_24;
        }
LABEL_23:
        a1[2] &= 0xFFFFFFF3FFFFFFFFLL;
LABEL_24:
        if (!(_DWORD)v7)
        {
          uint64_t v25 = a1[2];
          if ((v25 & 0x40) != 0) {
            a1[2] = v25 & 0xFFFFFFFFFFFFFFBFLL;
          }
          if (v13) {
            a1[15] = v13;
          }
          uint64_t v26 = a1[19];
          if (v26) {
            a1[16] = v26;
          }
          unint64_t v27 = (unsigned int *)(a1 + 4);
          do
            int v28 = __ldxr(v27);
          while (__stxr(v28, v27));
          if ((v28 & 1) == 0)
          {
            pthread_mutex_t *v14 = 0LL;
            v14[1] = 0LL;
          }
        }

        obj_cache_unlock_write(*a1);
        if (v17)
        {
          if (v13)
          {
            if (omap_delete(v6, a1[14], v48, v17, *((_DWORD *)a1 + 12), 0, a3)
              && nx_ratelimit_log_allowed(*(void *)(*(void *)v6 + 392LL)))
            {
              log_err( "%s:%d: %s oid 0x%llx flags 0x%llx 0x%x type 0x%x/0x%x error deleting old mapping %d\n",  "obj_write_prepare");
            }
          }

          else if (spaceman_free((const char *)v6, 0LL, v17, v47, a3) {
                 && nx_ratelimit_log_allowed(*(void *)(*(void *)v6 + 392LL)))
          }
          {
            log_err( "%s:%d: %s oid 0x%llx flags 0x%llx 0x%x type 0x%x/0x%x error freeing old location %d\n",  "obj_write_prepare");
          }
        }

        return v7;
      }

    IOObjectRelease(v33);
    if (v34)
    {
      int v13 = 1;
      goto LABEL_63;
    }
  }

  int v13 = 0;
LABEL_63:
  IOObjectRelease(v44[0]);
LABEL_44:
  IOObjectRelease(v26);
LABEL_45:
  IOObjectRelease(v25);
LABEL_13:
  *a4 = v13;
LABEL_14:
  if (a5)
  {
    v42.st_dev = 0;
    if (ioctl(a1, 0x4004644FuLL, &v42))
    {
      if (*__error() != 25)
      {
        int64x2_t v14 = __error();
        int64x2_t v15 = strerror(*v14);
        log_err("%s:%d: can't get solidstate for device (%s)\n", "io_get_device_features", 246, v15);
      }

      int64x2_t v16 = 1;
    }

    else
    {
      int64x2_t v16 = v42.st_dev;
    }

    *a5 = v16;
  }

  return 0LL;
}

uint64_t freeExtentInfoCallback(__CFArray *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v12 = a3;
  uint64_t valuePtr = a2;
  if (!a1) {
    return 0LL;
  }
  unsigned int v4 = (const __CFAllocator *)*MEMORY[0x189604DB0];
  CFMutableArrayRef Mutable = CFDictionaryCreateMutable( (CFAllocatorRef)*MEMORY[0x189604DB0],  0LL,  MEMORY[0x189604E40],  MEMORY[0x189605250]);
  CFNumberRef v6 = CFNumberCreate(v4, kCFNumberLongLongType, &valuePtr);
  CFNumberRef v7 = CFNumberCreate(v4, kCFNumberLongLongType, &v12);
  CFNumberRef v8 = v7;
  if (Mutable) {
    BOOL v9 = v6 == 0LL;
  }
  else {
    BOOL v9 = 1;
  }
  if (v9 || v7 == 0LL)
  {
    if (!v6)
    {
      if (!v7) {
        goto LABEL_13;
      }
      goto LABEL_12;
    }
  }

  else
  {
    CFDictionaryAddValue(Mutable, @"com.apple.apfs.container.extaddr", v6);
    CFDictionaryAddValue(Mutable, @"com.apple.apfs.container.extlen", v8);
    CFArrayAppendValue(a1, Mutable);
  }

  CFRelease(v6);
  if (v8) {
LABEL_12:
  }
    CFRelease(v8);
LABEL_13:
  if (Mutable) {
    CFRelease(Mutable);
  }
  return 0LL;
}

uint64_t freeExtentInfoComparator(const __CFDictionary *a1, const __CFDictionary *a2)
{
  CFNumberRef number = 0LL;
  value = 0LL;
  unint64_t v4 = 0LL;
  unint64_t valuePtr = 0LL;
  if (!CFDictionaryGetValueIfPresent(a1, @"com.apple.apfs.container.extaddr", (const void **)&value)
    || !CFDictionaryGetValueIfPresent(a2, @"com.apple.apfs.container.extaddr", (const void **)&number)
    || !CFNumberGetValue((CFNumberRef)value, kCFNumberLongLongType, &valuePtr)
    || !CFNumberGetValue(number, kCFNumberLongLongType, &v4))
  {
    return 0LL;
  }

  if (valuePtr >= v4) {
    return valuePtr != v4;
  }
  return -1LL;
}

uint64_t APFSContainerGetMinimalSize(char *a1, void *a2)
{
  io_connect_t v9 = 0;
  bzero(outputStruct, 0x978uLL);
  size_t outputStructCnt = 8LL;
  uint64_t v4 = apfs_container_iouc(a1, 0LL, &v9, 0LL, 1);
  if (!(_DWORD)v4)
  {
    LODWORD(outputStruct[0]) = physical_store_get_tier(a1);
    uint64_t v5 = IOConnectCallStructMethod(v9, 0x22u, outputStruct, 4uLL, outputStruct, &outputStructCnt);
    uint64_t v4 = v5;
    if (a2 && !(_DWORD)v5) {
      *a2 = outputStruct[0];
    }
    IOServiceClose(v9);
  }

  return v4;
}

uint64_t physical_store_get_tier(const char *a1)
{
  unint64_t v2 = strrchr(a1, 47);
  if (v2) {
    uint64_t v3 = v2 + 1;
  }
  else {
    uint64_t v3 = a1;
  }
  mach_port_t v4 = *MEMORY[0x1896086B0];
  uint64_t v5 = IOBSDNameMatching(*MEMORY[0x1896086B0], 0, v3);
  io_service_t MatchingService = IOServiceGetMatchingService(v4, v5);
  if (!MatchingService) {
    return 0LL;
  }
  io_object_t v7 = MatchingService;
  CFTypeRef CFProperty = (const __CFString *)IORegistryEntryCreateCFProperty( MatchingService,  @"TierType",  (CFAllocatorRef)*MEMORY[0x189604DB0],  0);
  if (CFProperty)
  {
    io_connect_t v9 = CFProperty;
    if (CFStringCompare(CFProperty, @"Secondary", 0LL)) {
      uint64_t v10 = 0x8000LL;
    }
    else {
      uint64_t v10 = 32769LL;
    }
    CFRelease(v9);
  }

  else
  {
    uint64_t v10 = 0LL;
  }

  IOObjectRelease(v7);
  return v10;
}

uint64_t APFSContainerResize(char *a1, uint64_t a2)
{
  return APFSContainerResizeEx(a1, a2, 0LL);
}

uint64_t APFSContainerResizeEx(char *a1, uint64_t a2, void *a3)
{
  io_connect_t v12 = 0;
  bzero(v11, 0x970uLL);
  size_t outputStructCnt = 16LL;
  uint64_t v6 = apfs_container_iouc(a1, 0LL, &v12, 0LL, 1);
  if (!(_DWORD)v6)
  {
    LODWORD(v11[0]) = physical_store_get_tier(a1);
    uint64_t outputStruct = a2;
    unsigned int v7 = IOConnectCallStructMethod(v12, 2u, &outputStruct, 0x10uLL, &outputStruct, &outputStructCnt);
    if (v7) {
      uint64_t v6 = v7;
    }
    else {
      uint64_t v6 = outputStruct;
    }
    if (a3) {
      *a3 = v11[0];
    }
    IOServiceClose(v12);
  }

  return v6;
}

uint64_t APFSContainerDefrag(char *a1)
{
  io_connect_t v6 = 0;
  bzero(inputStruct, 0x978uLL);
  size_t outputStructCnt = 0LL;
  uint64_t v2 = apfs_container_iouc(a1, 0LL, &v6, 0LL, 1);
  if (!(_DWORD)v2)
  {
    inputStruct[0] = physical_store_get_tier(a1);
    uint64_t v2 = IOConnectCallStructMethod(v6, 3u, inputStruct, 4uLL, 0LL, &outputStructCnt);
    IOServiceClose(v6);
  }

  return v2;
}

uint64_t APFSContainerGetResizeProgress(char *a1, _DWORD *a2)
{
  io_connect_t v9 = 0;
  bzero(outputStruct, 0x978uLL);
  size_t outputStructCnt = 4LL;
  uint64_t v4 = apfs_container_iouc(a1, 0LL, &v9, 0LL, 1);
  if (!(_DWORD)v4)
  {
    uint64_t v5 = IOConnectCallStructMethod(v9, 4u, 0LL, 0LL, outputStruct, &outputStructCnt);
    uint64_t v4 = v5;
    if (a2 && !(_DWORD)v5) {
      *a2 = outputStruct[0];
    }
    IOServiceClose(v9);
  }

  return v4;
}

uint64_t APFSCancelContainerResize(char *a1)
{
  mach_port_t connection = 0;
  size_t v3 = 0LL;
  uint64_t v1 = apfs_container_iouc(a1, 0LL, &connection, 0LL, 1);
  if (!(_DWORD)v1)
  {
    uint64_t v1 = IOConnectCallStructMethod(connection, 0x21u, 0LL, 0LL, 0LL, &v3);
    IOServiceClose(connection);
  }

  return v1;
}

uint64_t APFSContainerWipeVolumeKeys(char *a1)
{
  mach_port_t connection = 0;
  size_t v3 = 0LL;
  uint64_t v1 = apfs_container_iouc(a1, 0LL, &connection, 0LL, 0);
  if (!(_DWORD)v1)
  {
    uint64_t v1 = IOConnectCallStructMethod(connection, 5u, 0LL, 0LL, 0LL, &v3);
    IOServiceClose(connection);
  }

  return v1;
}

uint64_t APFSContainerGetSpaceInfo(char *a1, void *a2, void *a3)
{
  io_connect_t v17 = 0;
  bzero(outputStruct, 0x978uLL);
  size_t outputStructCnt = 2424LL;
  uint64_t v6 = apfs_container_iouc(a1, 0LL, &v17, 0LL, 0);
  if (!(_DWORD)v6)
  {
    uint64_t v6 = IOConnectCallStructMethod(v17, 6u, 0LL, 0LL, outputStruct, &outputStructCnt);
    if (!(_DWORD)v6)
    {
      uint64_t v7 = v11;
      if (a2) {
        *a2 = (v13 + v15) * v11;
      }
      if (a3) {
        *a3 = (v14 + v12 + v16) * v7;
      }
    }

    IOServiceClose(v17);
  }

  return v6;
}

uint64_t APFSContainerGetMaxVolumeCount(char *a1, void *a2)
{
  if (!a2) {
    return 49174LL;
  }
  CFDictionaryRef theDict = 0LL;
  uint64_t v4 = APFSExtendedSpaceInfo(a1, &theDict);
  if (!(_DWORD)v4)
  {
    uint64_t v5 = (const __CFAllocator *)*MEMORY[0x189604DB0];
    uint64_t v6 = device_basename(a1);
    CFStringRef v7 = CFStringCreateWithCString(v5, v6, 0x8000100u);
    CFDictionaryRef v8 = theDict;
    if (v7)
    {
      CFStringRef v9 = v7;
      Value = (const __CFDictionary *)CFDictionaryGetValue(theDict, v7);
      if (Value && (uint64_t v11 = (const __CFNumber *)CFDictionaryGetValue(Value, @"Max volume count")) != 0LL)
      {
        uint64_t v12 = v11;
        CFTypeID v13 = CFGetTypeID(v11);
        uint64_t v4 = 49154LL;
        if (v13 == CFNumberGetTypeID())
        {
          if (CFNumberGetValue(v12, kCFNumberSInt32Type, a2)) {
            uint64_t v4 = 0LL;
          }
          else {
            uint64_t v4 = 49154LL;
          }
        }
      }

      else
      {
        uint64_t v4 = 49154LL;
      }

      CFRelease(v9);
    }

    else
    {
      uint64_t v4 = 49154LL;
    }

    CFRelease(v8);
  }

  return v4;
}

uint64_t APFSExtendedSpaceInfo(char *a1, void *a2)
{
  io_connect_t v15 = 0;
  size_t outputStructCnt = -3LL;
  uint64_t outputStruct = 0LL;
  if (device_is_volume(a1))
  {
    bzero(v12, 0x978uLL);
    uint64_t v4 = apfs_container_iouc(a1, v12, &v15, 0LL, 0);
    if ((_DWORD)v4) {
      goto LABEL_7;
    }
    mach_port_t v5 = v15;
    uint64_t v6 = v12;
    uint32_t v7 = 65;
    size_t v8 = 4LL;
  }

  else
  {
    uint64_t v4 = apfs_container_iouc(a1, 0LL, &v15, 0LL, 0);
    if ((_DWORD)v4) {
      goto LABEL_7;
    }
    mach_port_t v5 = v15;
    uint32_t v7 = 8;
    uint64_t v6 = 0LL;
    size_t v8 = 0LL;
  }

  uint64_t v4 = IOConnectCallStructMethod(v5, v7, v6, v8, &outputStruct, &outputStructCnt);
LABEL_7:
  io_connect_t v9 = v15;
  if (v15)
  {
    if (!(_DWORD)v4)
    {
      CFTypeRef v10 = IOCFUnserialize(outputStruct, (CFAllocatorRef)*MEMORY[0x189604DB0], 0LL, 0LL);
      *a2 = v10;
      if (v10) {
        uint64_t v4 = 0LL;
      }
      else {
        uint64_t v4 = 3758097097LL;
      }
      MEMORY[0x186E24CFC](*MEMORY[0x1895FBBE0], outputStruct, outputStructCnt);
      io_connect_t v9 = v15;
    }

    IOServiceClose(v9);
  }

  return v4;
}

uint64_t APFSVolumeCreate(char *a1, const __CFDictionary *a2)
{
  uint64_t outputStruct = 0LL;
  bzero(inputStruct, 0x978uLL);
  parse_apfs_format_options(0LL, (uint64_t)inputStruct);
  Value = (const __CFNumber *)CFDictionaryGetValue(a2, @"com.apple.apfs.volume.reserve_size");
  uint64_t v4 = (const __CFNumber *)CFDictionaryGetValue(a2, @"com.apple.apfs.volume.quota_size");
  mach_port_t v5 = (const __CFString *)CFDictionaryGetValue(a2, @"com.apple.apfs.volume.name");
  uint64_t v6 = (const __CFNumber *)CFDictionaryGetValue(a2, @"com.apple.apfs.volume.role");
  uint32_t v7 = (const __CFBoolean *)CFDictionaryGetValue(a2, @"com.apple.apfs.volume.case_sensitive");
  size_t v8 = CFDictionaryGetValue(a2, @"com.apple.apfs.volume.encrypted");
  io_connect_t v9 = CFDictionaryGetValue(a2, @"com.apple.apfs.volume.encrypted.acm");
  CFTypeRef v10 = CFDictionaryGetValue(a2, @"com.apple.apfs.volume.cprotect");
  uint64_t v11 = CFDictionaryGetValue(a2, @"com.apple.apfs.volume.create_synchronous");
  valuePtr[0] = 0LL;
  int v45 = 0;
  int v43 = 0;
  if (Value && CFNumberGetValue(Value, kCFNumberSInt64Type, valuePtr)) {
    size_t v36 = valuePtr[0];
  }
  if (v4 && CFNumberGetValue(v4, kCFNumberSInt64Type, valuePtr)) {
    size_t v37 = valuePtr[0];
  }
  if (v5 && !CFStringGetCString(v5, v41, 256LL, 0x8000100u)) {
    return 49244LL;
  }
  if (v6 && CFNumberGetValue(v6, kCFNumberIntType, &v45)) {
    unsigned __int16 v40 = v45;
  }
  uint64_t v12 = (const __CFNumber *)CFDictionaryGetValue(a2, @"com.apple.apfs.volume.fs_index");
  if (v12 && CFNumberGetValue(v12, kCFNumberSInt32Type, &v45))
  {
    if (v45 < 0) {
      return 49186LL;
    }
    int v38 = v45;
  }

  if (v7)
  {
    if (CFBooleanGetValue(v7)) {
      __int16 v13 = 8;
    }
    else {
      __int16 v13 = 4;
    }
    __int16 v39 = v39 & 0xFFF3 | v13;
  }

  unsigned int v14 = v8 != 0LL;
  if (v9) {
    ++v14;
  }
  if (v14 > 1) {
    return 49174LL;
  }
  if (v10)
  {
    if (!v14) {
      return 49174LL;
    }
    v39 |= 0x200u;
  }

  if (v9) {
    return 49174LL;
  }
  if (v8)
  {
    CFTypeID v16 = CFGetTypeID(v8);
    if (v16 != CFBooleanGetTypeID()) {
      return 49231LL;
    }
    Boolean v17 = CFBooleanGetValue((CFBooleanRef)v8);
    __int16 v39 = v39 & 0xFFFE | v17 & 1;
  }

  if (v11)
  {
    CFTypeID v18 = CFGetTypeID(v11);
    if (v18 != CFBooleanGetTypeID()) {
      return 49174LL;
    }
    if (CFBooleanGetValue((CFBooleanRef)v11)) {
      v43 |= 0x10u;
    }
  }

  int8x16_t v19 = (const __CFBoolean *)CFDictionaryGetValue(a2, @"com.apple.apfs.volume.skip_eapfs");
  if (v19)
  {
    uint64_t v20 = v19;
    CFTypeID v21 = CFGetTypeID(v19);
    if (v21 != CFBooleanGetTypeID()) {
      return 49174LL;
    }
    if (CFBooleanGetValue(v20)) {
      v43 |= 0x200u;
    }
  }

  CFNumberRef v22 = (const __CFNumber *)CFDictionaryGetValue(a2, @"com.apple.apfs.volume.group_sibling_fsindex");
  if (v22 && CFNumberGetValue(v22, kCFNumberSInt32Type, &v45))
  {
    if (v45 >= 1)
    {
      int v42 = v45;
      goto LABEL_45;
    }

    return 49186LL;
  }

LABEL_45:
  int v23 = (const __CFBoolean *)CFDictionaryGetValue(a2, @"com.apple.apfs.volume.allow_unwritten");
  if (v23)
  {
    uint64_t v24 = v23;
    CFTypeID v25 = CFGetTypeID(v23);
    if (v25 != CFBooleanGetTypeID()) {
      return 49174LL;
    }
    Boolean v26 = CFBooleanGetValue(v24);
    __int16 v39 = v39 & 0xFBFF | ((v26 & 1) << 10);
  }

  unint64_t v27 = (const __CFBoolean *)CFDictionaryGetValue(a2, @"com.apple.apfs.volume.noautomount_at_create");
  if (v27)
  {
    int v28 = v27;
    CFTypeID v29 = CFGetTypeID(v27);
    if (v29 != CFBooleanGetTypeID()) {
      return 49174LL;
    }
    if (CFBooleanGetValue(v28)) {
      v43 |= 8u;
    }
  }

  uint64_t v15 = apfs_container_iouc(a1, 0LL, (io_connect_t *)&outputStruct + 1, 0LL, 0);
  if ((_DWORD)v15) {
    return v15;
  }
  if (v40 > 0xFFu)
  {
    if (v40 > 0x27Fu)
    {
      if (v40 != 704 && v40 != 640) {
        goto LABEL_74;
      }
    }

    else if (v40 != 256 && v40 != 320)
    {
      goto LABEL_74;
    }

LABEL_67:
    if ((v39 & 1) != 0) {
      return 49174LL;
    }
    int v31 = 1;
    goto LABEL_69;
  }

  if (v40 <= 0x20u && ((1LL << v40) & 0x100010110LL) != 0 || v40 == 192) {
    goto LABEL_67;
  }
LABEL_74:
  if (v42 >= 1)
  {
    if (v40 != 64 && v40 != 1) {
      return 49174LL;
    }
    int v31 = v43 | 2;
LABEL_69:
    int v43 = v31;
  }

  valuePtr[0] = 4LL;
  uint64_t v15 = IOConnectCallStructMethod(HIDWORD(outputStruct), 0, inputStruct, 0x1F8uLL, &outputStruct, valuePtr);
  if (!(_DWORD)v15)
  {
    CFNumberRef v32 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x189604DB0], kCFNumberSInt32Type, &outputStruct);
    if (v32)
    {
      CFNumberRef v33 = v32;
      CFDictionarySetValue(a2, @"com.apple.apfs.volume.fs_index", v32);
      CFRelease(v33);
    }
  }

  IOServiceClose(HIDWORD(outputStruct));
  return v15;
}

uint64_t APFSVolumeDelete(char *a1)
{
  return _APFSVolumeOperation(a1, 1u);
}

uint64_t _APFSVolumeOperation(char *a1, uint32_t a2)
{
  size_t outputStructCnt = 0LL;
  io_connect_t v8 = 0;
  bzero(inputStruct, 0x978uLL);
  uint64_t v4 = apfs_container_iouc(a1, inputStruct, &v8, 0LL, 0);
  if (!(_DWORD)v4)
  {
    uint64_t v4 = IOConnectCallStructMethod(v8, a2, inputStruct, 4uLL, 0LL, &outputStructCnt);
    IOServiceClose(v8);
  }

  return v4;
}

uint64_t APFSVolumeLock()
{
  return 45LL;
}

uint64_t APFSVolumeUpdateBounds(char *a1, uint64_t a2, uint64_t a3)
{
  io_connect_t v12 = 0;
  bzero(&inputStruct, 0x978uLL);
  size_t outputStructCnt = 0LL;
  uint64_t v6 = apfs_container_iouc(a1, &inputStruct, &v12, 0LL, 0);
  if (!(_DWORD)v6)
  {
    uint64_t v10 = a2;
    uint64_t v11 = a3;
    uint64_t v6 = IOConnectCallStructMethod(v12, 0x36u, &inputStruct, 0x18uLL, 0LL, &outputStructCnt);
    IOServiceClose(v12);
  }

  return v6;
}

uint64_t APFSVolumeGetSpaceInfo(char *a1, void *a2, void *a3)
{
  io_connect_t v10 = 0;
  bzero(outputStruct, 0x978uLL);
  size_t outputStructCnt = 16LL;
  uint64_t v6 = apfs_container_iouc(a1, outputStruct, &v10, 0LL, 0);
  if (!(_DWORD)v6)
  {
    uint64_t v6 = IOConnectCallStructMethod(v10, 7u, outputStruct, 4uLL, outputStruct, &outputStructCnt);
    if (!(_DWORD)v6)
    {
      if (a2) {
        *a2 = outputStruct[0];
      }
      if (a3) {
        *a3 = outputStruct[1];
      }
    }

    IOServiceClose(v10);
  }

  return v6;
}

uint64_t APFSVolumeRole(char *a1, unsigned __int16 *a2, unsigned __int16 *a3)
{
  size_t outputStructCnt = 2LL;
  if (!a1) {
    return 3758097090LL;
  }
  io_connect_t v21 = 0;
  bzero(&outputStruct, 0x978uLL);
  io_registry_entry_t volume_io_object = get_volume_io_object(a1, 0LL);
  if (volume_io_object)
  {
    io_object_t v7 = volume_io_object;
    CFTypeRef CFProperty = IORegistryEntryCreateCFProperty( volume_io_object,  @"RoleValue",  (CFAllocatorRef)*MEMORY[0x189604DB0],  0);
    if (CFProperty)
    {
      io_connect_t v9 = CFProperty;
      CFTypeID v10 = CFGetTypeID(CFProperty);
      if (v10 == CFNumberGetTypeID())
      {
        unsigned __int16 valuePtr = 0;
        if (CFNumberGetValue((CFNumberRef)v9, kCFNumberSInt16Type, &valuePtr))
        {
          if (a2) {
            *a2 = valuePtr;
          }
          if (!a3 || *a3 == valuePtr)
          {
            CFRelease(v9);
            IOObjectRelease(v7);
            return 0LL;
          }
        }
      }

      CFRelease(v9);
    }

    IOObjectRelease(v7);
  }

  uint64_t v11 = apfs_container_iouc(a1, &outputStruct, &v21, 0LL, 0);
  if (!(_DWORD)v11)
  {
    if (a3)
    {
      __int16 v12 = *a3;
      __int16 v13 = -1;
    }

    else
    {
      __int16 v13 = 0;
      __int16 v12 = 0;
    }

    __int16 v19 = v13;
    __int16 v20 = v12;
    uint64_t v14 = IOConnectCallStructMethod(v21, 9u, &outputStruct, 8uLL, &outputStruct, &outputStructCnt);
    uint64_t v11 = v14;
    if (a2 && !(_DWORD)v14) {
      *a2 = outputStruct;
    }
    IOServiceClose(v21);
  }

  return v11;
}

uint64_t APFSVolumeRoleFind(char *a1, int a2, __CFArray **a3)
{
  uint64_t v21 = *MEMORY[0x1895F89C0];
  uint64_t v19 = 0LL;
  io_registry_entry_t v18 = 0;
  memset(location, 0, sizeof(location));
  bzero(outputStruct, 0x978uLL);
  size_t v16 = 2LL;
  *a3 = 0LL;
  if (!apfs_container_iouc(a1, 0LL, (io_connect_t *)&v19 + 1, &v18, 0)
    || (uint64_t v6 = apfs_container_iouc(a1, outputStruct, (io_connect_t *)&v19 + 1, &v18, 0), !(_DWORD)v6))
  {
    uint64_t v6 = MEMORY[0x186E24780](v18, "IOService", &v19);
    if (!(_DWORD)v6)
    {
      io_object_t v7 = IOIteratorNext(v19);
      if (v7)
      {
        io_registry_entry_t v8 = v7;
        io_connect_t v9 = (const __CFAllocator *)*MEMORY[0x189604DB0];
        do
        {
          if (IOObjectConformsTo(v8, "AppleAPFSVolume"))
          {
            if (!IORegistryEntryGetLocationInPlane(v8, "IOService", location))
            {
              outputStruct[0] = strtol(location, 0LL, 0) - 1;
              outputStruct[1] = 0;
              if (!IOConnectCallStructMethod(HIDWORD(v19), 9u, outputStruct, 8uLL, outputStruct, &v16)
                && LOWORD(outputStruct[0]) == a2)
              {
                CFTypeRef CFProperty = (const __CFString *)IORegistryEntryCreateCFProperty(v8, @"BSD Name", v9, 0);
                if (CFProperty)
                {
                  uint64_t v11 = CFProperty;
                  MutableCopy = CFStringCreateMutableCopy(v9, 0LL, CFProperty);
                  if (MutableCopy)
                  {
                    __int16 v13 = MutableCopy;
                    CFStringInsert(MutableCopy, 0LL, @"/dev/");
                    CFMutableArrayRef Mutable = *a3;
                    if (*a3 || (CFMutableArrayRef Mutable = CFArrayCreateMutable(v9, 0LL, MEMORY[0x189605228]), (*a3 = Mutable) != 0LL)) {
                      CFArrayAppendValue(Mutable, v13);
                    }
                    CFRelease(v13);
                  }

                  CFRelease(v11);
                }
              }
            }
          }

          IOObjectRelease(v8);
          io_registry_entry_t v8 = IOIteratorNext(v19);
        }

        while (v8);
      }

      IOObjectRelease(v19);
      if (*a3) {
        uint64_t v6 = 0LL;
      }
      else {
        uint64_t v6 = 49245LL;
      }
    }

    IOObjectRelease(v18);
    IOServiceClose(HIDWORD(v19));
  }

  return v6;
}

uint64_t APFSVolumePayloadGet()
{
  uint64_t v0 = MEMORY[0x1895F8858]();
  uint64_t v17 = *MEMORY[0x1895F89C0];
  size_t v12 = 2052LL;
  if (!v3) {
    return 49174LL;
  }
  uint64_t v4 = v3;
  mach_port_t v5 = v2;
  __int16 v6 = v1;
  io_object_t v7 = (char *)v0;
  mach_port_t connection = 0;
  bzero(&outputStruct, 0x1178uLL);
  uint64_t v8 = apfs_container_iouc(v7, &outputStruct, &connection, 0LL, 0);
  if (!(_DWORD)v8)
  {
    v15[0] = v6;
    v15[1] = 1;
    int v16 = 2048;
    uint64_t v8 = IOConnectCallStructMethod(connection, 0xAu, &outputStruct, 0xCuLL, &outputStruct, &v12);
    if (!(_DWORD)v8)
    {
      size_t v9 = outputStruct;
      if (v5)
      {
        if (*v4 >= outputStruct) {
          size_t v10 = outputStruct;
        }
        else {
          size_t v10 = *v4;
        }
        memcpy(v5, v15, v10);
      }

      size_t *v4 = v9;
    }

    IOServiceClose(connection);
  }

  return v8;
}

uint64_t APFSVolumePayloadSet()
{
  uint64_t v0 = MEMORY[0x1895F8858]();
  unint64_t v2 = v1;
  __int16 v4 = v3;
  mach_port_t v5 = (char *)v0;
  uint64_t v15 = *MEMORY[0x1895F89C0];
  size_t v9 = 4LL;
  if (v6)
  {
    if (v1 <= 0x800) {
      goto LABEL_3;
    }
    return 49174LL;
  }

  if (v1) {
    return 49174LL;
  }
LABEL_3:
  mach_port_t connection = 0;
  bzero(&outputStruct, 0x1178uLL);
  uint64_t v7 = apfs_container_iouc(v5, &outputStruct, &connection, 0LL, 0);
  if (!(_DWORD)v7)
  {
    __int16 v12 = v4;
    __int16 v13 = 2;
    int v14 = v2;
    __memcpy_chk();
    uint64_t v7 = IOConnectCallStructMethod(connection, 0xAu, &outputStruct, v2 + 12, &outputStruct, &v9);
    IOServiceClose(connection);
  }

  return v7;
}

uint64_t APFSVolumeGetVEKState(char *a1, _BYTE *a2, _BYTE *a3)
{
  uint64_t result = 22LL;
  if (a1 && a2 && a3)
  {
    io_connect_t v9 = 0;
    bzero(outputStruct, 0x978uLL);
    size_t outputStructCnt = 2LL;
    uint64_t v7 = apfs_container_iouc(a1, outputStruct, &v9, 0LL, 0);
    if (!(_DWORD)v7)
    {
      uint64_t v7 = IOConnectCallStructMethod(v9, 0x13u, outputStruct, 4uLL, outputStruct, &outputStructCnt);
      IOServiceClose(v9);
      if (!(_DWORD)v7)
      {
        *a2 = outputStruct[0];
        *a3 = BYTE1(outputStruct[0]);
      }
    }

    return rc_to_errno(v7);
  }

  return result;
}

uint64_t APFSVolumeGetSiDPState(char *a1, _BYTE *a2, _BYTE *a3, _BYTE *a4)
{
  uint64_t result = 22LL;
  if (a1 && a2 && a3 && a4)
  {
    io_connect_t v11 = 0;
    bzero(outputStruct, 0x978uLL);
    size_t outputStructCnt = 3LL;
    uint64_t v9 = apfs_container_iouc(a1, outputStruct, &v11, 0LL, 0);
    if (!(_DWORD)v9)
    {
      uint64_t v9 = IOConnectCallStructMethod(v11, 0x38u, outputStruct, 4uLL, outputStruct, &outputStructCnt);
      IOServiceClose(v11);
      if (!(_DWORD)v9)
      {
        *a2 = outputStruct[0];
        *a3 = BYTE1(outputStruct[0]);
        *a4 = BYTE2(outputStruct[0]);
      }
    }

    return rc_to_errno(v9);
  }

  return result;
}

uint64_t APFSVolumeGetWVEK(char *a1, CFDataRef *a2)
{
  uint64_t v10 = *MEMORY[0x1895F89C0];
  size_t v6 = 520LL;
  uint64_t result = 22LL;
  if (a1 && a2)
  {
    mach_port_t connection = 0;
    bzero(&outputStruct, 0xB78uLL);
    int v5 = apfs_container_iouc(a1, &outputStruct, &connection, 0LL, 0);
    LOWORD(a1) = v5;
    if (!v5)
    {
      LODWORD(a1) = IOConnectCallStructMethod(connection, 0x39u, &outputStruct, 4uLL, &outputStruct, &v6);
      IOServiceClose(connection);
      if (!(_DWORD)a1) {
        *a2 = CFDataCreate((CFAllocatorRef)*MEMORY[0x189604DB0], v9, outputStruct);
      }
    }

    return (unsigned __int16)a1 & 0x3FFF;
  }

  return result;
}

uint64_t APFSVolumeEnableUserProtectionWithOptions( char *a1, unsigned __int8 *uu, const __CFData *a3, uint64_t a4)
{
  if (!a1) {
    return 22LL;
  }
  int is_null = uuid_is_null(uu);
  uint64_t result = 22LL;
  if (a3 && !is_null)
  {
    io_connect_t v16 = 0;
    bzero(&inputStruct, 0x978uLL);
    size_t outputStructCnt = 0LL;
    uint64_t v10 = apfs_container_iouc(a1, &inputStruct, &v16, 0LL, 0);
    if (!(_DWORD)v10)
    {
      uuid_copy(v12, uu);
      BytePtr = CFDataGetBytePtr(a3);
      CFIndex Length = CFDataGetLength(a3);
      uint64_t v15 = a4;
      uint64_t v10 = IOConnectCallStructMethod(v16, 0x14u, &inputStruct, 0x30uLL, 0LL, &outputStructCnt);
      IOServiceClose(v16);
    }

    return rc_to_errno(v10);
  }

  return result;
}

uint64_t APFSVolumeGetUnlockRecord(char *a1, unsigned __int8 *a2, CFDataRef *a3)
{
  return _APFSVolumeGetUnlockRecordOrHint(a1, a2, 3, a3);
}

uint64_t _APFSVolumeGetUnlockRecordOrHint(char *a1, unsigned __int8 *uu, int a3, CFDataRef *a4)
{
  uint64_t v17 = *MEMORY[0x1895F89C0];
  size_t v12 = 520LL;
  if (!a1) {
    return 22LL;
  }
  int is_null = uuid_is_null(uu);
  uint64_t result = 22LL;
  if ((a3 - 5) >= 0xFFFFFFFE && !is_null)
  {
    mach_port_t connection = 0;
    bzero(&outputStruct, 0xB78uLL);
    uint64_t v10 = apfs_container_iouc(a1, &outputStruct, &connection, 0LL, 0);
    if (!(_DWORD)v10)
    {
      uuid_copy((unsigned __int8 *)&outputStruct + 4, uu);
      __int16 v16 = a3;
      uint64_t v11 = IOConnectCallStructMethod(connection, 0xDu, &outputStruct, 0x18uLL, &outputStruct, &v12);
      uint64_t v10 = v11;
      if (a4)
      {
        if (!(_DWORD)v11) {
          *a4 = CFDataCreate((CFAllocatorRef)*MEMORY[0x189604DB0], v15, outputStruct);
        }
      }

      IOServiceClose(connection);
    }

    return rc_to_errno(v10);
  }

  return result;
}

uint64_t APFSVolumeGetHint(char *a1, unsigned __int8 *a2, CFDataRef *a3)
{
  return _APFSVolumeGetUnlockRecordOrHint(a1, a2, 4, a3);
}

uint64_t APFSVolumeListUUIDsOfUnlockRecords(char *a1, __CFArray **a2)
{
  CFTypeID TypeID = CFStringGetTypeID();
  return _APFSVolumeGetUUIDsOfUnlockRecords(a1, a2, TypeID);
}

uint64_t _APFSVolumeGetUUIDsOfUnlockRecords(char *a1, __CFArray **a2, uint64_t a3)
{
  uint64_t v22 = *MEMORY[0x1895F89C0];
  uint64_t result = 22LL;
  if (a1 && a2)
  {
    if (CFStringGetTypeID() == a3 || CFUUIDGetTypeID() == a3)
    {
      io_connect_t v20 = 0;
      bzero(outputStruct, 0x978uLL);
      int v18 = 0;
      *a2 = 0LL;
      uint64_t v7 = apfs_container_iouc(a1, &v18, &v20, 0LL, 0);
      if ((_DWORD)v7) {
        return rc_to_errno(v7);
      }
      LODWORD(outputStruct[0]) = v18;
      size_t v17 = 8LL;
      uint64_t v7 = IOConnectCallStructMethod(v20, 0x37u, outputStruct, 4uLL, outputStruct, &v17);
      if ((_DWORD)v7)
      {
LABEL_7:
        IOServiceClose(v20);
        return rc_to_errno(v7);
      }

      if (outputStruct[0])
      {
        uint64_t v8 = (16LL * outputStruct[0]) | 8;
        uint64_t v9 = (uint64_t *)_apfs_malloc(v8);
        if (!v9)
        {
          uint64_t v7 = 12LL;
          goto LABEL_7;
        }

        uint64_t v10 = v9;
        *(_DWORD *)uint64_t v9 = v18;
        *((_DWORD *)v9 + 1) = outputStruct[0];
        size_t v17 = (16LL * outputStruct[0]) | 8;
        uint64_t v7 = IOConnectCallStructMethod(v20, 0xEu, v10, 8uLL, v10, &v17);
        if (!(_DWORD)v7)
        {
          uint64_t v7 = *v10;
          uint64_t v11 = (const __CFAllocator *)*MEMORY[0x189604DB0];
          CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x189604DB0], *v10, MEMORY[0x189605228]);
          *a2 = Mutable;
          if (!Mutable)
          {
LABEL_28:
            uint64_t v7 = 12LL;
            goto LABEL_29;
          }

          if (v7)
          {
            __int16 v13 = (CFUUIDBytes *)(v10 + 1);
            while (1)
            {
              memset(out, 0, 37);
              if (CFStringGetTypeID() == a3)
              {
                uuid_unparse(&v13->byte0, out);
                int v14 = (void *)CFStringCreateWithCString(v11, out, 0x8000100u);
              }

              else
              {
                int v14 = CFUUIDCreateFromUUIDBytes(v11, *v13);
              }

              uint64_t v15 = v14;
              __int16 v16 = *a2;
              if (!v15) {
                break;
              }
              CFArrayAppendValue(v16, v15);
              CFRelease(v15);
              ++v13;
              if (!--v7) {
                goto LABEL_29;
              }
            }

            CFRelease(v16);
            *a2 = 0LL;
            goto LABEL_28;
          }
        }

uint64_t APFSVolumeListCFUUIDsOfUnlockRecords(char *a1, __CFArray **a2)
{
  CFTypeID v4 = CFUUIDGetTypeID();
  return _APFSVolumeGetUUIDsOfUnlockRecords(a1, a2, v4);
}

uint64_t APFSVolumeUnlockUnlockRecord(char *a1, unsigned __int8 *a2, const void *a3)
{
  return _APFSVolumeUnlockVerifyUnlockRecord(a1, a2, a3, 0LL, 0LL, 0);
}

uint64_t _APFSVolumeUnlockVerifyUnlockRecord( char *a1, unsigned __int8 *uu, const void *a3, unsigned __int8 *a4, uint64_t a5, char a6)
{
  size_t outputStructCnt = 0LL;
  if (!a1) {
    return 22LL;
  }
  int v12 = a4 == 0LL;
  int is_null = uuid_is_null(uu);
  uint64_t result = 22LL;
  if (!a3 || is_null == v12) {
    return result;
  }
  CFTypeID v15 = CFGetTypeID(a3);
  if (v15 != CFDataGetTypeID()) {
    return 22LL;
  }
  if (a4)
  {
    size_t outputStructCnt = 16LL;
    p_int inputStruct = &inputStruct;
  }

  else
  {
    p_int inputStruct = 0LL;
  }

  io_connect_t v26 = 0;
  bzero(&inputStruct, 0x978uLL);
  uint64_t v17 = apfs_container_iouc(a1, &inputStruct, &v26, 0LL, 0);
  if (!(_DWORD)v17)
  {
    uuid_copy(v22, uu);
    BytePtr = CFDataGetBytePtr((CFDataRef)a3);
    CFIndex Length = CFDataGetLength((CFDataRef)a3);
    char v21 = a6;
    CFIndex v24 = Length;
    uint64_t v25 = a5;
    uint64_t v17 = IOConnectCallStructMethod(v26, 0xFu, &inputStruct, 0x30uLL, p_inputStruct, &outputStructCnt);
    IOServiceClose(v26);
    if (a4)
    {
      if (!(_DWORD)v17) {
        uuid_copy(a4, (const unsigned __int8 *)&inputStruct);
      }
    }
  }

  return rc_to_errno(v17);
}

uint64_t APFSVolumeUnlockUnlockRecordWithOptions(char *a1, unsigned __int8 *a2, const void *a3, uint64_t a4)
{
  return _APFSVolumeUnlockVerifyUnlockRecord(a1, a2, a3, 0LL, a4, 0);
}

uint64_t APFSVolumeUnlockAnyUnlockRecord(char *a1, const void *a2, unsigned __int8 *a3)
{
  uint64_t v8 = *MEMORY[0x1895F89C0];
  memset(uu, 0, sizeof(uu));
  uuid_clear(uu);
  return _APFSVolumeUnlockVerifyUnlockRecord(a1, uu, a2, a3, 0LL, 0);
}

uint64_t APFSVolumeUnlockAnyUnlockRecordWithOptions( char *a1, const void *a2, unsigned __int8 *a3, uint64_t a4)
{
  uint64_t v10 = *MEMORY[0x1895F89C0];
  memset(uu, 0, sizeof(uu));
  uuid_clear(uu);
  return _APFSVolumeUnlockVerifyUnlockRecord(a1, uu, a2, a3, a4, 0);
}

uint64_t APFSVolumeVerifyUnlockRecord(char *a1, unsigned __int8 *a2, const void *a3)
{
  return _APFSVolumeUnlockVerifyUnlockRecord(a1, a2, a3, 0LL, 0LL, 1);
}

uint64_t APFSVolumeVerifyUnlockRecordWithOptions(char *a1, unsigned __int8 *a2, const void *a3, uint64_t a4)
{
  return _APFSVolumeUnlockVerifyUnlockRecord(a1, a2, a3, 0LL, a4, 1);
}

uint64_t APFSVolumeUnlockGetUnlockRecordState(char *a1, unsigned __int8 *uu, __CFDictionary **a3)
{
  size_t outputStructCnt = 8LL;
  if (!a1) {
    return 22LL;
  }
  int is_null = uuid_is_null(uu);
  uint64_t result = 22LL;
  if (a3 && !is_null)
  {
    io_connect_t v20 = 0;
    bzero(&outputStruct, 0x978uLL);
    uint64_t v8 = apfs_container_iouc(a1, &outputStruct, &v20, 0LL, 0);
    if (!(_DWORD)v8)
    {
      uuid_copy(v19, uu);
      uint64_t v8 = IOConnectCallStructMethod(v20, 0x20u, &outputStruct, 0x14uLL, &outputStruct, &outputStructCnt);
      IOServiceClose(v20);
      if (!(_DWORD)v8)
      {
        uint64_t v16 = outputStruct;
        uint64_t v9 = (const __CFAllocator *)*MEMORY[0x189604DB0];
        CFNumberRef v10 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x189604DB0], kCFNumberLongType, &v16);
        if (v10)
        {
          CFNumberRef v11 = v10;
          int v12 = v19[0];
          CFMutableArrayRef Mutable = CFDictionaryCreateMutable(v9, 0LL, MEMORY[0x189605240], MEMORY[0x189605250]);
          if (Mutable)
          {
            int v14 = Mutable;
            if (v12) {
              CFTypeID v15 = (const void *)*MEMORY[0x189604DE8];
            }
            else {
              CFTypeID v15 = (const void *)*MEMORY[0x189604DE0];
            }
            CFDictionaryAddValue(Mutable, @"Backoff", v11);
            CFDictionaryAddValue(v14, @"LockedOut", v15);
            uint64_t v8 = 0LL;
            *a3 = v14;
          }

          else
          {
            uint64_t v8 = 12LL;
          }

          CFRelease(v11);
        }

        else
        {
          uint64_t v8 = 12LL;
        }
      }
    }

    return rc_to_errno(v8);
  }

  return result;
}

uint64_t APFSVolumeAddUnlockRecords(char *a1, unsigned __int8 *a2, const void *a3, const void *a4)
{
  return _APFSVolumeAddUnlockRecordsOrHints(a1, a2, a3, a4, 3, 0LL);
}

uint64_t _APFSVolumeAddUnlockRecordsOrHints( char *a1, unsigned __int8 *uu, const void *a3, const void *a4, int a5, uint64_t a6)
{
  uint64_t v56 = *MEMORY[0x1895F89C0];
  size_t outputStructCnt = 0LL;
  if (!a1) {
    return 22LL;
  }
  if (uuid_is_null(uu)) {
    return 22LL;
  }
  if (a4)
  {
    CFTypeID v13 = CFGetTypeID(a4);
    if (v13 != CFDictionaryGetTypeID()) {
      return 22LL;
    }
  }

  CFTypeID v14 = CFGetTypeID(a3);
  if (v14 != CFDataGetTypeID()) {
    return 22LL;
  }
  if (a5 != 5 || (uint64_t result = _APFSVolumeUnlockVerifyUnlockRecord(a1, uu, a3, 0LL, a6, 1), !(_DWORD)result))
  {
    mach_port_t connection = 0;
    bzero(context, 0x978uLL);
    memset(out, 0, 37);
    memset(v54, 0, 37);
    unsigned int v35 = 0;
    size_t v36 = 0LL;
    size_t v37 = 0LL;
    unsigned int v29 = apfs_container_iouc(a1, context, &connection, 0LL, 0);
    if (!v29)
    {
      context[1] = a5;
      uuid_copy(v32, uu);
      BytePtr = CFDataGetBytePtr((CFDataRef)a3);
      CFIndex Length = CFDataGetLength((CFDataRef)a3);
      uint64_t v38 = a6;
      if (a4)
      {
        CFIndex Count = CFDictionaryGetCount((CFDictionaryRef)a4);
        size_t v36 = (unsigned __int8 *)_apfs_malloc(16 * Count);
        if (!v36 || (size_t v16 = CFDictionaryGetCount((CFDictionaryRef)a4), (v37 = _apfs_calloc(v16, 8uLL)) == 0LL))
        {
LABEL_20:
          int v19 = 12;
LABEL_21:
          unsigned int v29 = v19;
          goto LABEL_22;
        }

        if (CFDictionaryGetCount((CFDictionaryRef)a4) >= 1)
        {
          uint64_t v17 = 0LL;
          do
          {
            v37[v17] = _apfs_malloc(0x10uLL);
            if (!v37[v17]) {
              goto LABEL_20;
            }
          }

          while (CFDictionaryGetCount((CFDictionaryRef)a4) > ++v17);
        }

        CFDictionaryApplyFunction((CFDictionaryRef)a4, (CFDictionaryApplierFunction)records_callback, context);
        uint64_t v18 = v35;
        if (CFDictionaryGetCount((CFDictionaryRef)a4) != v18)
        {
          int v19 = 22;
          goto LABEL_21;
        }
      }

      unsigned int v29 = IOConnectCallStructMethod(connection, 0x10u, context, 0x48uLL, 0LL, &outputStructCnt);
      IOServiceClose(connection);
    }

uint64_t APFSVolumeAddUnlockRecordsWithOptions( char *a1, unsigned __int8 *a2, const void *a3, const void *a4, uint64_t a5)
{
  return _APFSVolumeAddUnlockRecordsOrHints(a1, a2, a3, a4, 3, a5);
}

uint64_t APFSVolumeAddHints(char *a1, unsigned __int8 *a2, const void *a3, const void *a4)
{
  return _APFSVolumeAddUnlockRecordsOrHints(a1, a2, a3, a4, 5, 0LL);
}

uint64_t APFSVolumeAddHintsWithOptions( char *a1, unsigned __int8 *a2, const void *a3, const void *a4, uint64_t a5)
{
  return _APFSVolumeAddUnlockRecordsOrHints(a1, a2, a3, a4, 5, a5);
}

uint64_t APFSVolumeSetHint(char *a1, unsigned __int8 *uu, const void *a3)
{
  if (a1 && (int is_null = uuid_is_null(uu), a3) && !is_null && CFDataGetLength((CFDataRef)a3)) {
    return _APFSVolumeAddUnlockRecordsOrHints(a1, uu, a3, 0LL, 4, 0LL);
  }
  else {
    return 22LL;
  }
}

uint64_t APFSVolumeSetUnlockRecord(char *a1, unsigned __int8 *uu, const void *a3)
{
  if (a1 && (int is_null = uuid_is_null(uu), a3) && !is_null && CFDataGetLength((CFDataRef)a3)) {
    return _APFSVolumeAddUnlockRecordsOrHints(a1, uu, a3, 0LL, 1, 0LL);
  }
  else {
    return 22LL;
  }
}

uint64_t APFSVolumeResetUnlockRecord( char *a1, unsigned __int8 *a2, const __CFData *a3, const unsigned __int8 *a4, const __CFData *a5)
{
  return APFSVolumeResetUnlockRecordWithOptions(a1, a2, a3, a4, a5, 0LL);
}

uint64_t APFSVolumeResetUnlockRecordWithOptions( char *a1, unsigned __int8 *uu, const __CFData *a3, const unsigned __int8 *a4, const __CFData *a5, uint64_t a6)
{
  uint64_t v46 = *MEMORY[0x1895F89C0];
  size_t outputStructCnt = 0LL;
  if (!a1 || uuid_is_null(uu)) {
    return 22LL;
  }
  int is_null = uuid_is_null(a4);
  uint64_t result = 22LL;
  if (a5 && a3 && !is_null)
  {
    if (!CFDataGetLength(a3)) {
      return 22LL;
    }
    if (!CFDataGetLength(a5)) {
      return 22LL;
    }
    CFTypeID v14 = CFGetTypeID(a3);
    if (v14 != CFDataGetTypeID()) {
      return 22LL;
    }
    CFTypeID v15 = CFGetTypeID(a5);
    if (v15 != CFDataGetTypeID()) {
      return 22LL;
    }
    io_connect_t v29 = 0;
    bzero(inputStruct, 0x978uLL);
    uint64_t v18 = 0LL;
    CFIndex v19 = 0LL;
    memset(out, 0, 37);
    memset(v44, 0, 37);
    uint64_t v16 = apfs_container_iouc(a1, inputStruct, &v29, 0LL, 0);
    if (!(_DWORD)v16)
    {
      inputStruct[1] = 3;
      uuid_copy(v22, uu);
      BytePtr = CFDataGetBytePtr(a3);
      CFIndex Length = CFDataGetLength(a3);
      int v25 = 1;
      unint64_t v26 = (unsigned __int8 *)_apfs_malloc(0x10uLL);
      uuid_copy(v26, a4);
      uint64_t v18 = CFDataGetBytePtr(a5);
      CFIndex v19 = CFDataGetLength(a5);
      unint64_t v27 = _apfs_malloc(8uLL);
      *unint64_t v27 = &v18;
      uint64_t v28 = a6;
      uint64_t v16 = IOConnectCallStructMethod(v29, 0x10u, inputStruct, 0x48uLL, 0LL, &outputStructCnt);
      _apfs_free(v27, 8LL);
      _apfs_free(v26, 16LL);
      IOServiceClose(v29);
    }

    uuid_unparse(uu, out);
    uuid_unparse(a4, v44);
    if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT))
    {
      int v17 = rc_to_errno(v16);
      *(_DWORD *)buf = 136316674;
      int v31 = "APFSVolumeResetUnlockRecordWithOptions";
      __int16 v32 = 1024;
      int v33 = 1880;
      __int16 v34 = 1024;
      int v35 = 3;
      __int16 v36 = 2080;
      size_t v37 = out;
      __int16 v38 = 2080;
      __int16 v39 = v44;
      __int16 v40 = 2080;
      uint64_t v41 = a1;
      __int16 v42 = 1024;
      int v43 = v17;
      _os_log_impl( &dword_183C4A000,  MEMORY[0x1895F8DA0],  OS_LOG_TYPE_DEFAULT,  "%s:%d: UR_RESET_UPDATE [ OP = %u, SRC UUID = %s, DST UUID = %s, VOLUME = %s, ret = %d ]\n",  buf,  0x3Cu);
    }

    return rc_to_errno(v16);
  }

  return result;
}

uint64_t APFSVolumeUpdateUnlockRecord(char *a1, unsigned __int8 *a2, const __CFData *a3, const __CFData *a4)
{
  return APFSVolumeResetUnlockRecordWithOptions(a1, a2, a3, a2, a4, 0LL);
}

uint64_t APFSVolumeUpdateUnlockRecordWithOptions( char *a1, unsigned __int8 *a2, const __CFData *a3, const __CFData *a4, uint64_t a5)
{
  return APFSVolumeResetUnlockRecordWithOptions(a1, a2, a3, a2, a4, a5);
}

uint64_t APFSVolumeRemoveHint(char *a1, unsigned __int8 *uu)
{
  if (a1 && !uuid_is_null(uu)) {
    return _APFSVolumeRemoveUnlockRecordsOrHint(a1, uu, 4);
  }
  else {
    return 22LL;
  }
}

uint64_t _APFSVolumeRemoveUnlockRecordsOrHint(char *a1, const unsigned __int8 *a2, int a3)
{
  uint64_t v31 = *MEMORY[0x1895F89C0];
  io_connect_t v17 = 0;
  bzero(&inputStruct, 0x978uLL);
  size_t outputStructCnt = 0LL;
  __int16 v16 = a3;
  uint64_t v6 = apfs_container_iouc(a1, &inputStruct, &v17, 0LL, 0);
  if (!(_DWORD)v6)
  {
    if (uuid_is_null(a2)) {
      uuid_clear(v15);
    }
    else {
      uuid_copy(v15, a2);
    }
    uint64_t v6 = IOConnectCallStructMethod(v17, 0x11u, &inputStruct, 0x18uLL, 0LL, &outputStructCnt);
    IOServiceClose(v17);
  }

  if (uuid_is_null(a2))
  {
    if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT))
    {
      int v7 = rc_to_errno(v6);
      *(_DWORD *)buf = 136315906;
      CFIndex v19 = "_APFSVolumeRemoveUnlockRecordsOrHint";
      __int16 v20 = 1024;
      int v21 = 1919;
      __int16 v22 = 2080;
      int v23 = a1;
      __int16 v24 = 1024;
      int v25 = v7;
      uint64_t v8 = (os_log_s *)MEMORY[0x1895F8DA0];
      uint64_t v9 = "%s:%d: UR_WIPE [ VOLUME = %s, ret = %d ]\n";
      uint32_t v10 = 34;
LABEL_11:
      _os_log_impl(&dword_183C4A000, v8, OS_LOG_TYPE_DEFAULT, v9, buf, v10);
    }
  }

  else
  {
    memset(out, 0, 37);
    uuid_unparse(a2, out);
    if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT))
    {
      int v11 = rc_to_errno(v6);
      *(_DWORD *)buf = 136316418;
      CFIndex v19 = "_APFSVolumeRemoveUnlockRecordsOrHint";
      __int16 v20 = 1024;
      int v21 = 1923;
      __int16 v22 = 2080;
      int v23 = out;
      __int16 v24 = 1024;
      int v25 = a3;
      __int16 v26 = 2080;
      unint64_t v27 = a1;
      __int16 v28 = 1024;
      int v29 = v11;
      uint64_t v8 = (os_log_s *)MEMORY[0x1895F8DA0];
      uint64_t v9 = "%s:%d: UR_REMOVE [ UUID = %s, tag = %d, VOLUME = %s, ret = %d ]\n";
      uint32_t v10 = 50;
      goto LABEL_11;
    }
  }

  return rc_to_errno(v6);
}

uint64_t APFSVolumeRemoveUnlockRecord(char *a1, unsigned __int8 *uu)
{
  if (!a1 || uuid_is_null(uu)) {
    return 22LL;
  }
  uint64_t result = _APFSVolumeRemoveUnlockRecordsOrHint(a1, uu, 3);
  if (!(_DWORD)result)
  {
    uint64_t result = _APFSVolumeGetUnlockRecordOrHint(a1, uu, 4, 0LL);
    if ((_DWORD)result == 2)
    {
      return 0LL;
    }

    else if (!(_DWORD)result)
    {
      return _APFSVolumeRemoveUnlockRecordsOrHint(a1, uu, 4);
    }
  }

  return result;
}

uint64_t APFSVolumeGeneratePersonalRecoveryKey()
{
  return 0LL;
}

uint64_t APFSVolumeEscrowVEK()
{
  return 45LL;
}

uint64_t APFSVolumeQueryCryptoProgress()
{
  return 45LL;
}

uint64_t APFSVolumeResumeCrypto()
{
  return 45LL;
}

uint64_t APFSVolumePauseCrypto()
{
  return 45LL;
}

uint64_t APFSVolumeEnableFilevaultWithOptions(char *a1)
{
  if (mounted_device(a1, 0LL)) {
    return 45LL;
  }
  else {
    return 22LL;
  }
}

uint64_t APFSVolumeEnableFilevault(char *a1)
{
  if (mounted_device(a1, 0LL)) {
    return 45LL;
  }
  else {
    return 22LL;
  }
}

uint64_t APFSVolumeDisableFileVaultWithOptions(char *a1)
{
  if (!mounted_device(a1, 0LL)) {
    return 22LL;
  }
  unsigned __int16 v4 = 0;
  uint64_t v2 = APFSVolumeRole(a1, &v4, 0LL);
  if ((_DWORD)v2) {
    return rc_to_errno(v2);
  }
  if (v4 == 576) {
    return 1LL;
  }
  return 45LL;
}

uint64_t APFSVolumeEnableUserProtection(char *a1, unsigned __int8 *a2, const __CFData *a3)
{
  return APFSVolumeEnableUserProtectionWithOptions(a1, a2, a3, 0LL);
}

uint64_t APFSVolumeBindNewKEKToVEKWithOptions( char *a1, unsigned __int8 *uu, const __CFData *a3, const __CFData *a4, uint64_t a5)
{
  uint64_t result = 22LL;
  if (a1 && a3 && a4)
  {
    if (uuid_is_null(uu))
    {
      return 22LL;
    }

    else
    {
      io_connect_t v20 = 0;
      bzero(&inputStruct, 0x978uLL);
      uint64_t v11 = apfs_container_iouc(a1, &inputStruct, &v20, 0LL, 0);
      if (!(_DWORD)v11)
      {
        size_t outputStructCnt = 0LL;
        uuid_copy(v14, uu);
        BytePtr = CFDataGetBytePtr(a3);
        CFIndex Length = CFDataGetLength(a3);
        io_connect_t v17 = CFDataGetBytePtr(a4);
        CFIndex v18 = CFDataGetLength(a4);
        uint64_t v19 = a5;
        uint64_t v11 = IOConnectCallStructMethod(v20, 0x16u, &inputStruct, 0x40uLL, 0LL, &outputStructCnt);
        IOServiceClose(v20);
      }

      return rc_to_errno(v11);
    }
  }

  return result;
}

uint64_t APFSVolumeBindNewKEKToVEK(char *a1, unsigned __int8 *a2, const __CFData *a3, const __CFData *a4)
{
  return APFSVolumeBindNewKEKToVEKWithOptions(a1, a2, a3, a4, 0LL);
}

uint64_t APFSContainerGetDefrag()
{
  return 45LL;
}

uint64_t APFSContainerSetDefrag()
{
  return 45LL;
}

uint64_t APFSVolumeGetDefrag()
{
  return 45LL;
}

uint64_t APFSVolumeSetDefrag()
{
  return 45LL;
}

uint64_t APFSVolumeInfoForUnmountedDisk()
{
  return 45LL;
}

uint64_t APFSContainerEFIEmbed()
{
  return 45LL;
}

uint64_t APFSContainerEFIGetVersion()
{
  return 45LL;
}

uint64_t APFSContainerGetBootDevice(void *a1)
{
  uint64_t v28 = *MEMORY[0x1895F89C0];
  if (!a1) {
    return 49174LL;
  }
  io_iterator_t existing = 0;
  uint64_t v2 = IOServiceMatching("AppleAPFSVolume");
  if (v2)
  {
    uint64_t MatchingServices = IOServiceGetMatchingServices(*MEMORY[0x1896086B0], v2, &existing);
    if (!(_DWORD)MatchingServices)
    {
      io_object_t v5 = IOIteratorNext(existing);
      if (v5)
      {
        io_registry_entry_t v6 = v5;
        uint64_t v4 = 0LL;
        CFTypeRef v15 = 0LL;
        int v7 = (const __CFAllocator *)*MEMORY[0x189604DB0];
        uint64_t v8 = (os_log_s *)MEMORY[0x1895F8DA0];
        do
        {
          io_registry_entry_t entry = 0;
          io_registry_entry_t parent = 0;
          uint64_t v17 = 0LL;
          uint64_t entryID = 0LL;
          IORegistryEntryGetRegistryEntryID(v6, &entryID);
          CFTypeRef CFProperty = (const __CFArray *)IORegistryEntryCreateCFProperty(v6, @"Role", v7, 0);
          if (CFProperty)
          {
            uint32_t v10 = CFProperty;
            CFTypeID v11 = CFGetTypeID(CFProperty);
            if (v11 == CFArrayGetTypeID())
            {
              char context = 0;
              v29.length = CFArrayGetCount(v10);
              v29.io_name_t location = 0LL;
              CFArrayApplyFunction(v10, v29, (CFArrayApplierFunction)is_system_role, &context);
              if (context)
              {
                uint64_t ParentEntry = IORegistryEntryGetParentEntry(v6, "IOService", &parent);
                if ((_DWORD)ParentEntry)
                {
                  uint64_t v4 = ParentEntry;
                  if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
                  {
                    *(_DWORD *)buf = 136315650;
                    int v23 = "APFSContainerGetBootDevice";
                    __int16 v24 = 1024;
                    int v25 = 2799;
                    __int16 v26 = 2048;
                    uint64_t v27 = entryID;
                    _os_log_error_impl( &dword_183C4A000,  v8,  OS_LOG_TYPE_ERROR,  "%s:%d: failed to get parent for volume 0x%llx\n",  buf,  0x1Cu);
                  }
                }

                else
                {
                  IORegistryEntryGetRegistryEntryID(parent, &v17);
                  uint64_t v4 = IORegistryEntryGetParentEntry(parent, "IOService", &entry);
                  if ((_DWORD)v4)
                  {
                    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
                    {
                      *(_DWORD *)buf = 136315650;
                      int v23 = "APFSContainerGetBootDevice";
                      __int16 v24 = 1024;
                      int v25 = 2806;
                      __int16 v26 = 2048;
                      uint64_t v27 = v17;
                      _os_log_error_impl( &dword_183C4A000,  v8,  OS_LOG_TYPE_ERROR,  "%s:%d: failed to get parent for container 0x%llx\n",  buf,  0x1Cu);
                    }

                    io_registry_entry_t v13 = parent;
                  }

                  else
                  {
                    CFTypeRef v15 = IORegistryEntryCreateCFProperty(entry, @"BSD Name", v7, 0);
                    if (!v15)
                    {
                      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
                      {
                        *(_DWORD *)buf = 136315650;
                        int v23 = "APFSContainerGetBootDevice";
                        __int16 v24 = 1024;
                        int v25 = 2813;
                        __int16 v26 = 2048;
                        uint64_t v27 = v17;
                        _os_log_error_impl( &dword_183C4A000,  v8,  OS_LOG_TYPE_ERROR,  "%s:%d: failed to create bsd name for container: %llx\n",  buf,  0x1Cu);
                      }

                      uint64_t v4 = 49164LL;
                    }

                    IOObjectRelease(parent);
                    io_registry_entry_t v13 = entry;
                  }

                  IOObjectRelease(v13);
                }
              }
            }

            else
            {
              if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 136315394;
                int v23 = "APFSContainerGetBootDevice";
                __int16 v24 = 1024;
                int v25 = 2783;
                _os_log_error_impl( &dword_183C4A000,  v8,  OS_LOG_TYPE_ERROR,  "%s:%d: volume roles property isnt of correct type. Expected CFArray\n",  buf,  0x12u);
              }

              uint64_t v4 = 49174LL;
            }

            CFRelease(v10);
          }

          IOObjectRelease(v6);
          io_registry_entry_t v6 = IOIteratorNext(existing);
        }

        while (v6);
        IOObjectRelease(existing);
        if (v15)
        {
          *a1 = v15;
          return v4;
        }

        if ((_DWORD)v4) {
          return v4;
        }
      }

      else
      {
        IOObjectRelease(existing);
      }

      return 49154LL;
    }

    uint64_t v4 = MatchingServices;
    if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_ERROR)) {
      APFSContainerGetBootDevice_cold_2(v4);
    }
  }

  else
  {
    if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_ERROR)) {
      APFSContainerGetBootDevice_cold_1();
    }
    return 49164LL;
  }

  return v4;
}

CFTypeID is_system_role(const __CFString *a1, _BYTE *a2)
{
  CFTypeID v4 = CFGetTypeID(a1);
  CFTypeID result = CFStringGetTypeID();
  if (v4 == result)
  {
    CFTypeID result = CFStringCompare(a1, @"System", 0LL);
    if (!result) {
      *a2 = 1;
    }
  }

  return result;
}

uint64_t APFSSetupMetadataRollingMediaKey(char *a1)
{
  uint64_t v25 = *MEMORY[0x1895F89C0];
  CFArrayRef theArray = 0LL;
  if (!a1) {
    return 22LL;
  }
  uint64_t v2 = 0LL;
  if (keygen_nvram_prop(0))
  {
    __int128 v23 = 0u;
    memset(v24, 0, sizeof(v24));
    __int128 v21 = 0u;
    __int128 v22 = 0u;
    __int128 v19 = 0u;
    __int128 v20 = 0u;
    __int128 v18 = 0u;
    __int128 v16 = 0u;
    __int128 v17 = 0u;
    __int128 v14 = 0u;
    __int128 v15 = 0u;
    __int128 v12 = 0u;
    __int128 v13 = 0u;
    *(_OWORD *)buffer = 0u;
    __int128 v11 = 0u;
    uint64_t v3 = APFSVolumeRoleFind(a1, 64, &theArray);
    if ((_DWORD)v3)
    {
      uint64_t v4 = v3;
      if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_ERROR)) {
        APFSSetupMetadataRollingMediaKey_cold_3(v4);
      }
      return rc_to_errno(v4);
    }

    CFArrayRef v6 = theArray;
    if (CFArrayGetCount(theArray) >= 2)
    {
      if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_ERROR))
      {
        APFSSetupMetadataRollingMediaKey_cold_1();
        if (!v6) {
          return 45LL;
        }
      }

      else if (!v6)
      {
        return 45LL;
      }

      CFRelease(v6);
      return 45LL;
    }

    ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v6, 0LL);
    CFStringGetCString(ValueAtIndex, buffer, 32LL, 0x8000100u);
    if (v6) {
      CFRelease(v6);
    }
    uint64_t v8 = _APFSVolumeOperation(buffer, 0x3Cu);
    uint64_t v2 = rc_to_errno(v8);
    if ((_DWORD)v2)
    {
      if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_ERROR)) {
        APFSSetupMetadataRollingMediaKey_cold_2();
      }
    }

    else
    {
      keygen_nvram_prop(1);
    }
  }

  return v2;
}

uint64_t APFSContainerMigrateMediaKeys(char *a1)
{
  mach_port_t connection = 0;
  size_t v4 = 0LL;
  uint64_t v2 = apfs_container_iouc(a1, 0LL, &connection, 0LL, 0);
  if (!(_DWORD)v2)
  {
    uint64_t v2 = IOConnectCallStructMethod(connection, 0x30u, 0LL, 0LL, 0LL, &v4);
    IOServiceClose(connection);
  }

  APFSSetupMetadataRollingMediaKey(a1);
  return v2;
}

uint64_t APFSMakeCompatibleName(const char *a1, void *a2)
{
  size_t v3 = strlen(a1);
  if (!a2) {
    return 22LL;
  }
  unint64_t v4 = v3;
  if (v3 > 0x2FD) {
    return 63LL;
  }
  if (!v3) {
    return 22LL;
  }
  CFArrayRef v6 = malloc(0x2FEuLL);
  if (!v6) {
    return 12LL;
  }
  int v7 = v6;
  __memcpy_chk();
  if (!utf8_normalizeOptCaseFoldAndHash( (unint64_t)v7,  v4,  0,  (void (*)(_OWORD *, uint64_t, uint64_t))nop_hash_func,  0LL))
  {
LABEL_17:
    v7[v4] = 0;
    __int128 v12 = realloc(v7, v4 + 1);
    if (v12)
    {
      __int128 v13 = v12;
      uint64_t result = 0LL;
      *a2 = v13;
      return result;
    }

    free(v7);
    return 12LL;
  }

  unint64_t v8 = 0LL;
  while (1)
  {
    int v9 = (char)v7[v8];
    if ((v9 & 0x80000000) == 0)
    {
      unint64_t v10 = 1LL;
      goto LABEL_13;
    }

    unint64_t v10 = 0LL;
    do
    {
      LOBYTE(v9) = 2 * v9;
      ++v10;
    }

    while ((v9 & 0x80) != 0);
    if (v10 >= 5) {
      break;
    }
LABEL_13:
    unint64_t v11 = v10 + v8;
    if (utf8_normalizeOptCaseFoldAndHash( (unint64_t)v7,  v10 + v8,  0,  (void (*)(_OWORD *, uint64_t, uint64_t))nop_hash_func,  0LL))
    {
      v7[v8++] = 63;
      memmove(&v7[v8], &v7[v11], v4 - v11);
      unint64_t v4 = v4 - v10 + 1;
    }

    else
    {
      v8 += v10;
    }

    if (v8 >= v4) {
      goto LABEL_17;
    }
  }

  free(v7);
  return 92LL;
}

uint64_t APFSUniquifyName(const char *a1, char **a2, unint64_t a3)
{
  if (!a2) {
    return 22LL;
  }
  size_t v6 = strlen(a1);
  if (v6 > 0x2FD) {
    return 63LL;
  }
  size_t v8 = v6;
  if (!v6) {
    return 22LL;
  }
  if (utf8_normalizeOptCaseFoldAndHash( (unint64_t)a1,  v6,  0,  (void (*)(_OWORD *, uint64_t, uint64_t))nop_hash_func,  0LL)) {
    return 92LL;
  }
  int v9 = strrchr(a1, 46);
  if (!v9 || (unint64_t v10 = v9, v11 = v9 - a1, v9 == a1) || (v12 = v8 - v11, v8 - v11 - 746 <= 0xFFFFFFFFFFFFFD01LL))
  {
    size_t v12 = 0LL;
    unint64_t v10 = "";
  }

  else
  {
    size_t v8 = v9 - a1;
  }

  unint64_t v13 = 0LL;
  if (a3)
  {
    unint64_t v14 = a3;
    do
    {
      ++v13;
      BOOL v15 = v14 > 9;
      v14 /= 0xAuLL;
    }

    while (v15);
  }

  if (v13 <= 1) {
    unint64_t v13 = 1LL;
  }
  unint64_t v16 = v13 + v12;
  size_t v17 = v16 + v8;
  if (v16 + v8 >= 0x2FE)
  {
    uint64_t result = 92LL;
    while (v8)
    {
      if (a1[--v8] < 0)
      {
        while ((a1[v8] & 0xC0) == 0x80)
        {
          if (--v8 >= 0xFFFFFFFFFFFFFFFELL) {
            return result;
          }
        }
      }

      size_t v17 = v16 + v8;
      if (v16 + v8 <= 0x2FD) {
        goto LABEL_28;
      }
    }

    return 92LL;
  }

LABEL_28:
  size_t v18 = v17 + 1;
  __int128 v19 = (char *)malloc(v17 + 1);
  if (!v19) {
    return 12LL;
  }
  __int128 v20 = v19;
  memcpy(v19, a1, v8);
  snprintf(&v20[v8], v18 - v8, "%llu%s", a3, v10);
  uint64_t result = 0LL;
  *a2 = v20;
  return result;
}

        *(_DWORD *)(v8 + 24) |= 0x80000u;
        goto LABEL_29;
      }

      int v9 = 0;
    }

    unint64_t v10 = 1;
    goto LABEL_10;
  }

  return 30LL;
}

uint64_t APFSContainerGetFreeExtentHistogram(io_service_t a1, __CFDictionary *a2)
{
  uint64_t free_extent_hist = 49174LL;
  if (a1)
  {
    if (a2)
    {
      if (IOObjectConformsTo(a1, "AppleAPFSContainer"))
      {
        io_connect_t connect = 0;
        uint64_t free_extent_hist = IOServiceOpen(a1, *MEMORY[0x1895FBBE0], 0, &connect);
        if (!(_DWORD)free_extent_hist)
        {
          uint64_t free_extent_hist = get_free_extent_hist(connect, a2);
          IOServiceClose(connect);
        }
      }
    }
  }

  return free_extent_hist;
}

uint64_t get_free_extent_hist(mach_port_t a1, __CFDictionary *a2)
{
  size_t v10 = 280LL;
  outputStruct[0] = 1;
  uint64_t result = IOConnectCallStructMethod(a1, 0x1Fu, outputStruct, 1uLL, outputStruct, &v10);
  if (!(_DWORD)result)
  {
    CFMutableArrayRef Mutable = CFArrayCreateMutable(0LL, 32LL, 0LL);
    if (Mutable)
    {
      size_t v6 = Mutable;
      for (CFIndex i = 0LL; i != 32; ++i)
        CFArraySetValueAtIndex(v6, i, *(const void **)&outputStruct[8 * i + 16]);
      CFDictionaryAddValue(a2, @"Histogram for free extents sizes, number of buckets is", v6);
      CFRelease(v6);
      CFNumberRef v8 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x189604DB0], kCFNumberSInt64Type, &v12);
      if (v8)
      {
        CFNumberRef v9 = v8;
        CFDictionaryAddValue(a2, @"Small free extents count", v8);
        CFRelease(v9);
        return 0LL;
      }

      CFDictionaryRemoveValue(a2, @"Histogram for free extents sizes, number of buckets is");
    }

    return 49164LL;
  }

  return result;
}

uint64_t APFSStatisticsProcessContainer(uint64_t a1, int a2, __CFDictionary *a3, CFTypeRef *a4)
{
  kern_return_t v18;
  mach_error_t v19;
  char *v20;
  __CFDictionary *Mutable;
  __CFDictionary *v22;
  char *v23;
  FTS *v24;
  FTS *v25;
  FTSENT *v26;
  unsigned __int16 fts_info;
  uint64_t st_blocks;
  unsigned int v29;
  FTSENT *v30;
  unint64_t i;
  void *v32;
  unsigned int v33;
  int v34;
  CFMutableArrayRef v35;
  __CFArray *v36;
  CFIndex j;
  CFMutableArrayRef v38;
  __CFArray *v39;
  CFIndex k;
  mach_port_t v42;
  CFIndex capacity;
  io_registry_entry_t parent[2];
  size_t outputStructCnt;
  int outputStruct;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  io_iterator_t iterator[2];
  _OWORD v55[8];
  void buf[6];
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  char buffer[16];
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  char *v70[5];
  v70[2] = *(char **)MEMORY[0x1895F89C0];
  uint64_t free_extent_hist = 49174LL;
  if (!(_DWORD)a1 || !a3 || !IOObjectConformsTo(a1, "AppleAPFSContainer")) {
    return free_extent_hist;
  }
  *(void *)io_registry_entry_t parent = 0LL;
  if (a4 && !IORegistryEntryGetParentEntry(a1, "IOService", &parent[1]))
  {
    *a4 = IORegistryEntryCreateCFProperty(parent[1], @"BSD Name", (CFAllocatorRef)*MEMORY[0x189604DB0], 0);
    IOObjectRelease(parent[1]);
  }

  uint64_t free_extent_hist = IOServiceOpen(a1, *MEMORY[0x1895FBBE0], 0, parent);
  if ((_DWORD)free_extent_hist) {
    return free_extent_hist;
  }
  if (a2)
  {
    uint64_t free_extent_hist = get_free_extent_hist(parent[0], a3);
    if ((_DWORD)free_extent_hist) {
      goto LABEL_66;
    }
  }

  mach_port_t v9 = parent[0];
  *(void *)iterator = 0LL;
  io_object_t v10 = IOIteratorNext(iterator[1]);
  if (!v10) {
    goto LABEL_64;
  }
  io_registry_entry_t v11 = v10;
  int v12 = 0;
  unint64_t v13 = (const __CFAllocator *)*MEMORY[0x189604DB0];
  if (a2) {
    uint64_t v14 = 8LL;
  }
  else {
    uint64_t v14 = 6LL;
  }
  capacity = v14;
  do
  {
    CFTypeRef CFProperty = (const __CFString *)IORegistryEntryCreateCFProperty(v11, @"BSD Name", v13, 0);
    if (!CFProperty) {
      goto LABEL_62;
    }
    unint64_t v16 = CFProperty;
    uint64_t v68 = 0u;
    uint64_t v69 = 0u;
    unint64_t v66 = 0u;
    unsigned int v67 = 0u;
    char v64 = 0u;
    uint64_t v65 = 0u;
    *(_OWORD *)buffer = 0u;
    uint64_t v63 = 0u;
    bzero(&outputStruct, 0x978uLL);
    size_t outputStructCnt = 64LL;
    CFStringEncoding SystemEncoding = CFStringGetSystemEncoding();
    if (!CFStringGetCString(v16, buffer, 128LL, SystemEncoding)) {
      goto LABEL_24;
    }
    unsigned int outputStruct = fsindex_parse(buffer, 0);
    if (outputStruct == -1)
    {
      if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_ERROR))
      {
        LODWORD(buf[0]) = 136315650;
        *(void *)((char *)buf + 4) = "process_volumes";
        WORD2(buf[1]) = 1024;
        *(_DWORD *)((char *)&buf[1] + 6) = 3334;
        WORD1(buf[2]) = 2080;
        *(void *)((char *)&buf[2] + 4) = buffer;
        _os_log_error_impl( &dword_183C4A000,  MEMORY[0x1895F8DA0],  OS_LOG_TYPE_ERROR,  "%s:%d: Cannot get index of volume '%s'\n",  (uint8_t *)buf,  0x1Cu);
      }

uint64_t APFSStatistics(int a1, __CFDictionary *a2)
{
  if (!a2) {
    return 49174LL;
  }
  io_iterator_t existing = 0;
  mach_port_t v4 = *MEMORY[0x1896086B0];
  io_object_t v5 = IOServiceMatching("AppleAPFSContainer");
  uint64_t MatchingServices = IOServiceGetMatchingServices(v4, v5, &existing);
  if (!(_DWORD)MatchingServices)
  {
    int v7 = (const __CFAllocator *)*MEMORY[0x189604DB0];
    CFNumberRef v8 = (const CFDictionaryKeyCallBacks *)MEMORY[0x189605240];
    mach_port_t v9 = (const CFDictionaryValueCallBacks *)MEMORY[0x189605250];
    while (1)
    {
      uint64_t v10 = IOIteratorNext(existing);
      if (!(_DWORD)v10)
      {
        IOObjectRelease(existing);
        return 0LL;
      }

      uint64_t v11 = v10;
      key = 0LL;
      CFMutableArrayRef Mutable = CFDictionaryCreateMutable(v7, 0LL, v8, v9);
      if (!Mutable) {
        break;
      }
      unint64_t v13 = Mutable;
      uint64_t MatchingServices = APFSStatisticsProcessContainer(v11, a1, Mutable, (CFTypeRef *)&key);
      if (!(_DWORD)MatchingServices) {
        CFDictionaryAddValue(a2, key, v13);
      }
      if (key) {
        CFRelease(key);
      }
      IOObjectRelease(v11);
      CFRelease(v13);
      if ((_DWORD)MatchingServices) {
        return MatchingServices;
      }
    }

    IOObjectRelease(v11);
    IOObjectRelease(existing);
    return 49164LL;
  }

  return MatchingServices;
}

uint64_t APFSStreamCreatePrepare( char *a1, const unsigned __int8 *a2, const unsigned __int8 *a3, const __CFDictionary *a4, pthread_mutex_t **a5)
{
  uint64_t v5 = 3758097090LL;
  size_t outputStructCnt = 16LL;
  if (!a1 || !a5) {
    return v5;
  }
  uint64_t v11 = (pthread_mutex_t *)calloc(1uLL, 0xD0uLL);
  if (!v11) {
    return 49164LL;
  }
  int v12 = v11;
  int v13 = new_lock(v11);
  if (v13)
  {
    int v14 = v13;
    free(v12);
    return v14 | 0xC000u;
  }

  bzero(&outputStruct, 0x978uLL);
  *(_DWORD *)v12[1].__opaque = 2097194;
  BOOL v15 = valloc(0x20002AuLL);
  v12[1].__sig = (uint64_t)v15;
  if (v15)
  {
    crc32c_init();
    v12[1].__opaque[11] = 1;
    *(void *)&v12[1].__opaque[24] = 0x1FFFFFFFFLL;
    uuid_copy((unsigned __int8 *)&v12[1].__opaque[32], a2);
    uuid_copy((unsigned __int8 *)&v12[1].__opaque[48], a3);
    if (a4)
    {
      int valuePtr = 0;
      Value = (const __CFNumber *)CFDictionaryGetValue(a4, @"com.apple.apfs.stream.create.read.alignment");
      if (Value && CFNumberGetValue(Value, kCFNumberSInt32Type, &valuePtr))
      {
        if ((valuePtr - 16777217) >> 24 != 255)
        {
LABEL_16:
          sig = (void *)v12[1].__sig;
          if (sig) {
            free(sig);
          }
          goto LABEL_19;
        }

        *(_DWORD *)&v12[1].__opaque[28] = valuePtr;
      }

      v12[1].__opaque[11] = CFDictionaryGetValue(a4, @"com.apple.apfs.stream.create.embed.crc") != (const void *)*MEMORY[0x189604DE0];
    }

    uint64_t v5 = apfs_container_iouc(a1, &v24, (io_connect_t *)&v12[1].__opaque[12], 0LL, 0);
    if (!(_DWORD)v5)
    {
      uuid_copy(v25, (const unsigned __int8 *)&v12[1].__opaque[32]);
      uuid_copy(v26, (const unsigned __int8 *)&v12[1].__opaque[48]);
      uint64_t outputStruct = v12[1].__sig;
      int v23 = *(_DWORD *)v12[1].__opaque;
      uint64_t v5 = IOConnectCallStructMethod( *(_DWORD *)&v12[1].__opaque[12],  0x24u,  &outputStruct,  0x30uLL,  &outputStruct,  &outputStructCnt);
      if (!(_DWORD)v5)
      {
        v12[1].__opaque[10] = 1;
        *a5 = v12;
        return v5;
      }
    }

    goto LABEL_16;
  }

  uint64_t v5 = 49164LL;
LABEL_19:
  io_connect_t v18 = *(_DWORD *)&v12[1].__opaque[12];
  if (v18) {
    IOServiceClose(v18);
  }
  free_lock(v12);
  free(v12);
  return v5;
}

uint64_t APFSStreamCreateRead(uint64_t a1, char *a2, unint64_t a3, size_t *a4)
{
  uint64_t v4 = 3758097090LL;
  if (a1 && a2 && a4)
  {
    pthread_mutex_lock((pthread_mutex_t *)a1);
    if (*(_BYTE *)(a1 + 82))
    {
      unint64_t v9 = *(unsigned int *)(a1 + 100);
      unint64_t v10 = a3 / v9 * v9;
      if (v10 >= v9 && v10 >= 0x20000)
      {
        size_t Flush = _APFSStreamCreateReadFlush(a1, a2, v10);
        *a4 = Flush;
        unsigned int v12 = *(_DWORD *)(a1 + 76);
        if (v12 > *(_DWORD *)(a1 + 72) >> 1)
        {
          uint64_t v4 = 0LL;
LABEL_11:
          pthread_mutex_unlock((pthread_mutex_t *)a1);
          return v4;
        }

        size_t v14 = Flush;
        if (*(_BYTE *)(a1 + 80)) {
          goto LABEL_14;
        }
        size_t outputStructCnt = 72LL;
        bzero(v25, 0x978uLL);
        LODWORD(v25[0]) = v12;
        uint64_t v19 = IOConnectCallStructMethod(*(_DWORD *)(a1 + 84), 0x25u, v25, 4uLL, v25, &outputStructCnt);
        if (!(_DWORD)v19)
        {
          uint64_t v20 = *(void *)(a1 + 88);
          int v21 = *(unsigned __int8 *)(a1 + 83);
          if (!v20) {
            *(void *)(*(void *)(a1 + 64) + 13LL) |= *(_BYTE *)(a1 + 83) == 0;
          }
          if (v21)
          {
            *(_DWORD *)(a1 + 96) = crc32c( *(unsigned int *)(a1 + 96),  *(void *)(a1 + 64) + *(unsigned int *)(a1 + 76),  v26);
            uint64_t v20 = *(void *)(a1 + 88);
          }

          __int128 v22 = v25[1];
          *(_OWORD *)(a1 + 136) = v25[0];
          *(int8x16_t *)(a1 + 152) = vextq_s8(v28, v28, 8uLL);
          uint64_t v23 = v26;
          unsigned int v12 = *(_DWORD *)(a1 + 76) + v26;
          *(_DWORD *)(a1 + 76) = v12;
          *(void *)(a1 + 88) = v20 + v23;
          int v24 = v27;
          *(_BYTE *)(a1 + 80) = v27 != 0;
          *(_OWORD *)(a1 + 168) = v22;
          *(_OWORD *)(a1 + 184) = v25[2];
          if (!v24)
          {
            if (!*(_BYTE *)(a1 + 81)) {
              goto LABEL_22;
            }
            goto LABEL_19;
          }

LABEL_14:
          if (!*(_BYTE *)(a1 + 81))
          {
            if (*(_DWORD *)(a1 + 72) - v12 >= 0x8D)
            {
              uint64_t v15 = *(void *)(a1 + 64) + v12;
              *(_OWORD *)(v15 + 125) = 0u;
              *(_OWORD *)(v15 + 96) = 0u;
              *(_OWORD *)(v15 + 112) = 0u;
              *(_OWORD *)(v15 + 64) = 0u;
              *(_OWORD *)(v15 + 80) = 0u;
              *(_OWORD *)(v15 + 32) = 0u;
              *(_OWORD *)(v15 + 48) = 0u;
              *(_OWORD *)uint64_t v15 = 0u;
              *(_OWORD *)(v15 + 16) = 0u;
              *(_BYTE *)uint64_t v15 = 6;
              *(void *)(v15 + 129) = *(void *)(a1 + 88) + 141LL;
              unsigned int v16 = *(unsigned __int8 *)(a1 + 83);
              if (*(_BYTE *)(a1 + 83)) {
                unsigned int v16 = ~crc32c(*(unsigned int *)(a1 + 96), v15, 137LL);
              }
              *(_DWORD *)(v15 + 137) = v16;
              unsigned int v12 = *(_DWORD *)(a1 + 76) + 141;
              *(_DWORD *)(a1 + 76) = v12;
              *(_BYTE *)(a1 + 81) = 1;
              goto LABEL_19;
            }

size_t _APFSStreamCreateReadFlush(uint64_t a1, void *__dst, unint64_t a3)
{
  unint64_t v3 = *(unsigned int *)(a1 + 100);
  unint64_t v4 = a3 / v3 * v3;
  if (v4 < v3) {
    return 0LL;
  }
  unint64_t v6 = *(unsigned int *)(a1 + 76);
  if (v4 >= v6) {
    unint64_t v4 = *(unsigned int *)(a1 + 76);
  }
  size_t v7 = v4 - v4 % v3;
  memcpy(__dst, *(const void **)(a1 + 64), v7);
  memmove(*(void **)(a1 + 64), (const void *)(*(void *)(a1 + 64) + v7), *(unsigned int *)(a1 + 76) - v7);
  *(_DWORD *)(a1 + 76) -= v7;
  return v7;
}

uint64_t APFSStreamCreateEstimateProgress(uint64_t a1, double *a2)
{
  uint64_t v2 = 49174LL;
  if (!a1 || !a2) {
    return v2;
  }
  if (!*(_BYTE *)(a1 + 82)) {
    return 4294895648LL;
  }
  uint64_t v3 = *(void *)(a1 + 144);
  if (!v3)
  {
    unint64_t v5 = *(void *)(a1 + 192);
    unint64_t v6 = *(void *)(a1 + 176);
    if (v5)
    {
      double v7 = 100.0;
      if (v6) {
        double v7 = 10.0;
      }
      double v4 = v7 * (double)*(unint64_t *)(a1 + 184) / (double)v5;
      if (!v6) {
        goto LABEL_14;
      }
    }

    else
    {
      double v4 = 0.0;
      if (!v6) {
        goto LABEL_14;
      }
    }

    double v8 = 90.0;
    if (!v5) {
      double v8 = 100.0;
    }
    double v4 = v4 + v8 * (double)*(unint64_t *)(a1 + 168) / (double)v6;
    goto LABEL_14;
  }

  double v4 = (double)(unint64_t)(*(void *)(a1 + 160) + *(void *)(a1 + 136))
     * 100.0
     / (double)(unint64_t)(*(void *)(a1 + 152) + v3);
LABEL_14:
  uint64_t v2 = 0LL;
  double v9 = fmin(v4, 100.0);
  *(double *)(a1 + 200) = v9;
  *a2 = v9;
  return v2;
}

void APFSStreamCreateFinish(uint64_t a1)
{
  if (a1)
  {
    IOConnectCallStructMethod(*(_DWORD *)(a1 + 84), 0x31u, 0LL, 0LL, 0LL, 0LL);
    IOServiceClose(*(_DWORD *)(a1 + 84));
    free_lock((pthread_mutex_t *)a1);
    free(*(void **)(a1 + 64));
    *(_OWORD *)(a1 + 176) = 0u;
    *(_OWORD *)(a1 + 192) = 0u;
    *(_OWORD *)(a1 + 144) = 0u;
    *(_OWORD *)(a1 + 160) = 0u;
    *(_OWORD *)(a1 + 112) = 0u;
    *(_OWORD *)(a1 + 128) = 0u;
    *(_OWORD *)(a1 + 80) = 0u;
    *(_OWORD *)(a1 + 96) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)(a1 + 64) = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)a1 = 0u;
    free((void *)a1);
  }

uint64_t APFSStreamRestorePrepare(char *a1, _BYTE *a2, unint64_t a3, BOOL a4, pthread_mutex_t **a5)
{
  uint64_t v5 = 3758097090LL;
  size_t outputStructCnt = 4LL;
  if (a1 && a2 && a5)
  {
    uint64_t v11 = (pthread_mutex_t *)calloc(1uLL, 0x478uLL);
    if (v11)
    {
      unsigned int v12 = v11;
      int v13 = new_lock(v11);
      if (v13)
      {
        int v14 = v13;
        free(v12);
        return v14 | 0xC000u;
      }

      else
      {
        if (a4)
        {
          Value = (const __CFBoolean *)CFDictionaryGetValue( (CFDictionaryRef)a4,  @"com.apple.apfs.stream.restore.skip.snapshot");
          if (Value) {
            a4 = CFBooleanGetValue(Value) != 0;
          }
          else {
            a4 = 0LL;
          }
        }

        bzero(&outputStruct, 0x978uLL);
        uint64_t v21 = 0LL;
        *(_DWORD *)&v12[1].__opaque[24] = 2097194;
        unsigned int v16 = valloc(0x20002AuLL);
        *(void *)&v12[1].__opaque[16] = v16;
        if (v16)
        {
          if (!delta_validate_op(a2, a3, (_DWORD *)&v21 + 1))
          {
            if (*a2 == 5)
            {
              uint64_t v5 = apfs_container_iouc(a1, &v21, (io_connect_t *)&v12[1].__sig + 1, 0LL, 0);
              if (!(_DWORD)v5)
              {
                crc32c_init();
                *(_DWORD *)&v12[1].__opaque[8] = -1;
                BYTE2(v12[1].__sig) = (*(void *)(a2 + 13) & 1LL) == 0;
                memcpy(&v12[1].__opaque[44], a2, 0x400uLL);
                memcpy(*(void **)&v12[1].__opaque[16], a2, 0x400uLL);
                uint64_t outputStruct = *(void *)&v12[1].__opaque[16];
                int v23 = *(_DWORD *)&v12[1].__opaque[24];
                int v24 = 1024;
                int v25 = v21;
                BOOL v26 = a4;
                uint64_t v5 = IOConnectCallStructMethod( HIDWORD(v12[1].__sig),  0x26u,  &outputStruct,  0x20uLL,  &outputStruct,  &outputStructCnt);
                if (!(_DWORD)v5)
                {
                  *(_DWORD *)&v12[1].__opaque[36] = outputStruct;
                  BYTE1(v12[1].__sig) = 1;
                  *a5 = v12;
                  return v5;
                }
              }
            }

            else
            {
              uint64_t v5 = 4294895649LL;
            }
          }
        }

        else
        {
          uint64_t v5 = 49164LL;
        }

        io_connect_t sig_high = HIDWORD(v12[1].__sig);
        if (sig_high) {
          IOServiceClose(sig_high);
        }
        size_t v18 = *(void **)&v12[1].__opaque[16];
        if (v18) {
          free(v18);
        }
        free_lock(v12);
        free(v12);
      }
    }

    else
    {
      return 49164LL;
    }
  }

  return v5;
}

uint64_t APFSStreamRestoreWrite(uint64_t a1, char *a2, unint64_t a3, _BYTE *a4)
{
  uint64_t v4 = 3758097090LL;
  if (a1)
  {
    uint64_t v5 = a2;
    if (a2)
    {
      if (a4)
      {
        uint64_t v4 = 4294895651LL;
        pthread_mutex_lock((pthread_mutex_t *)a1);
        if (*(_BYTE *)(a1 + 65))
        {
          char v9 = *(_BYTE *)(a1 + 64);
          if (a3 && !*(_BYTE *)(a1 + 64))
          {
            unsigned int v10 = *(_DWORD *)(a1 + 100);
            while (2)
            {
              if (a3 >= *(_DWORD *)(a1 + 96) - v10) {
                size_t v11 = *(_DWORD *)(a1 + 96) - v10;
              }
              else {
                size_t v11 = a3;
              }
              memcpy((void *)(*(void *)(a1 + 88) + v10), v5, v11);
              *(_DWORD *)(a1 + 100) += v11;
              while (!*(_BYTE *)(a1 + 64))
              {
                outputStruct[0] = 0;
                int v12 = delta_validate_op( (unsigned __int8 *)(*(void *)(a1 + 88) + *(unsigned int *)(a1 + 104)),  (*(_DWORD *)(a1 + 100) - *(_DWORD *)(a1 + 104)),  outputStruct);
                if (v12)
                {
                  if (v12 == 92)
                  {
LABEL_39:
                    uint64_t v4 = 4294895649LL;
                    goto LABEL_40;
                  }

                  break;
                }

                uint64_t v13 = *(unsigned int *)(a1 + 104);
                int v14 = (unsigned __int8 *)(*(void *)(a1 + 88) + v13);
                uint64_t v15 = *(void *)(a1 + 72);
                int v16 = *v14;
                if ((v15 == 0) != (v16 == 5)) {
                  goto LABEL_39;
                }
                if (v16 == 9) {
                  *(_DWORD *)(a1 + 112) += *(_DWORD *)(v14 + 17) / *(_DWORD *)(a1 + 108);
                }
                uint64_t v17 = outputStruct[0];
                *(_DWORD *)(a1 + 104) = outputStruct[0] + v13;
                uint64_t v18 = v15 + v17;
                *(void *)(a1 + 72) = v15 + v17;
                if (*(_BYTE *)(a1 + 66))
                {
                  if (*v14 == 6) {
                    goto LABEL_22;
                  }
                  *(_DWORD *)(a1 + 80) = crc32c(*(unsigned int *)(a1 + 80), v14, v17);
                }

                if (*v14 == 6)
                {
                  uint64_t v18 = *(void *)(a1 + 72);
LABEL_22:
                  if (v18 != *(void *)(v14 + 129))
                  {
                    if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_ERROR)) {
                      APFSStreamRestoreWrite_cold_2();
                    }
                    goto LABEL_40;
                  }

                  if (*(_BYTE *)(a1 + 66)) {
                    unsigned int v19 = ~crc32c(*(unsigned int *)(a1 + 80), v14, 137LL);
                  }
                  else {
                    unsigned int v19 = 0;
                  }
                  if (v19 != *(_DWORD *)(v14 + 137))
                  {
                    if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_ERROR)) {
                      APFSStreamRestoreWrite_cold_1();
                    }
                    goto LABEL_40;
                  }

                  *(_BYTE *)(a1 + 64) = 1;
                  break;
                }
              }

              unsigned int v10 = *(_DWORD *)(a1 + 100);
              if (v10 >= *(_DWORD *)(a1 + 96) || *(_BYTE *)(a1 + 64))
              {
                size_t outputStructCnt = 4LL;
                int v20 = *(_DWORD *)(a1 + 104);
                if (v20)
                {
                  bzero(&v26, 0x970uLL);
                  int v21 = *(_DWORD *)(a1 + 112);
                  outputStruct[0] = v20;
                  outputStruct[1] = v21;
                  uint64_t v22 = IOConnectCallStructMethod( *(_DWORD *)(a1 + 68),  0x27u,  outputStruct,  8uLL,  outputStruct,  &outputStructCnt);
                  if ((_DWORD)v22)
                  {
                    uint64_t v4 = v22;
                    goto LABEL_40;
                  }

                  memmove( *(void **)(a1 + 88),  (const void *)(*(void *)(a1 + 88) + *(unsigned int *)(a1 + 104)),  (*(_DWORD *)(a1 + 100) - *(_DWORD *)(a1 + 104)));
                  unsigned int v10 = *(_DWORD *)(a1 + 100) - *(_DWORD *)(a1 + 104);
                  *(void *)(a1 + 100) = v10;
                  *(_DWORD *)(a1 + 112) = 0;
                }
              }

              v5 += v11;
              a3 -= v11;
              if (a3) {
                continue;
              }
              break;
            }

            char v9 = *(_BYTE *)(a1 + 64);
          }

          uint64_t v4 = 0LL;
          *a4 = v9;
        }

        else
        {
          uint64_t v4 = 4294895648LL;
LABEL_40:
          *(_BYTE *)(a1 + 65) = 0;
        }

        pthread_mutex_unlock((pthread_mutex_t *)a1);
      }
    }
  }

  return v4;
}

uint64_t APFSStreamRestoreFinish(uint64_t a1, char a2)
{
  if (!a1) {
    return 3758097090LL;
  }
  uint64_t v3 = 0LL;
  if (*(_BYTE *)(a1 + 65) && (a2 & 1) == 0)
  {
    bzero(outputStruct, 0x978uLL);
    size_t v5 = 8LL;
    if (*(_BYTE *)(a1 + 64)) {
      uint64_t v3 = IOConnectCallStructMethod(*(_DWORD *)(a1 + 68), 0x28u, outputStruct, 4uLL, outputStruct, &v5);
    }
    else {
      uint64_t v3 = 4294895650LL;
    }
  }

  free(*(void **)(a1 + 88));
  free_lock((pthread_mutex_t *)a1);
  IOServiceClose(*(_DWORD *)(a1 + 68));
  bzero((void *)a1, 0x478uLL);
  free((void *)a1);
  return v3;
}

uint64_t APFSStreamFingerprintPrepare(uint64_t a1, pthread_mutex_t **a2)
{
  uint64_t v3 = (pthread_mutex_t *)calloc(1uLL, 0x200600uLL);
  if (!v3) {
    return 49164LL;
  }
  uint64_t v4 = v3;
  int v5 = new_lock(v3);
  if (v5)
  {
    int v6 = v5;
    free(v4);
    return v6 | 0xC000u;
  }

  else
  {
    CC_SHA512_Init((CC_SHA512_CTX *)&v4[32788].__opaque[40]);
    crc32c_init();
    uint64_t result = 0LL;
    *(_DWORD *)&v4[1].__opaque[16] = -1;
    *(_WORD *)((char *)&v4[1].__sig + 1) = 257;
    *a2 = v4;
  }

  return result;
}

uint64_t APFSStreamFingerprintWrite(uint64_t a1, char *a2, unint64_t a3, char *a4)
{
  uint64_t v4 = 3758097090LL;
  if (a1)
  {
    int v5 = a2;
    if (a2)
    {
      if (a4)
      {
        uint64_t v4 = 4294895651LL;
        pthread_mutex_lock((pthread_mutex_t *)a1);
        if (*(_BYTE *)(a1 + 65))
        {
          char v9 = *(_BYTE *)(a1 + 64);
          if (!a3 || *(_BYTE *)(a1 + 64))
          {
LABEL_21:
            uint64_t v4 = 0LL;
            *a4 = v9;
LABEL_24:
            pthread_mutex_unlock((pthread_mutex_t *)a1);
            return v4;
          }

          uint64_t v10 = *(void *)(a1 + 96);
          while (1)
          {
            unint64_t v20 = 0LL;
            if (v10)
            {
              if (1048597 - v10 >= a3) {
                size_t v11 = a3;
              }
              else {
                size_t v11 = 1048597 - v10;
              }
              memcpy((void *)(a1 + 104 + v10), v5, v11);
              unint64_t v12 = a3 - v11;
              a3 = *(void *)(a1 + 96) + v11;
              *(void *)(a1 + 96) = a3;
              v5 += v11;
              uint64_t v13 = (unsigned __int8 *)(a1 + 104);
            }

            else
            {
              unint64_t v12 = 0LL;
              uint64_t v13 = (unsigned __int8 *)v5;
            }

            unint64_t v20 = a3;
            int v14 = delta_canonicalize( (unsigned int *)(a1 + 1048704),  v13,  &v20,  (void (*)(unsigned __int8 *, size_t, uint64_t))_APFSStreamFingerprintCallback,  a1);
            if (*(_DWORD *)(a1 + 92))
            {
              uint64_t v4 = *(unsigned int *)(a1 + 92);
              goto LABEL_23;
            }

            if (v14 == 89) {
              break;
            }
            if (v14 == 92)
            {
              uint64_t v4 = 4294895649LL;
              if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_ERROR)) {
                APFSStreamFingerprintWrite_cold_1();
              }
              goto LABEL_23;
            }

            unint64_t v15 = v20;
            *(void *)(a1 + 72) += v20;
            if (*(_BYTE *)(a1 + 66))
            {
              *(_DWORD *)(a1 + 88) = crc32c(*(unsigned int *)(a1 + 88), v13, v15);
              unint64_t v15 = v20;
            }

            memmove((void *)(a1 + 104), &v13[v15], a3 - v15);
            uint64_t v10 = a3 - v20;
            *(void *)(a1 + 96) = a3 - v20;
            a3 = v12;
            if (!v12)
            {
              char v9 = *(_BYTE *)(a1 + 64);
              goto LABEL_21;
            }
          }

          unint64_t v17 = v20;
          uint64_t v18 = *(void *)(a1 + 72) + v20;
          *(void *)(a1 + 72) = v18;
          if (*(void *)(a1 + 2098465) == v18)
          {
            if (*(_BYTE *)(a1 + 66)) {
              unsigned int v19 = ~crc32c(*(unsigned int *)(a1 + 88), v13, v17 - 4);
            }
            else {
              unsigned int v19 = 0;
            }
            *(_DWORD *)(a1 + 88) = v19;
            if (*(_DWORD *)(a1 + 2098473) == v19)
            {
              char v9 = 1;
              *(_BYTE *)(a1 + 64) = 1;
              goto LABEL_21;
            }

            if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_ERROR)) {
              APFSStreamFingerprintWrite_cold_2();
            }
          }

          else if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_ERROR))
          {
            APFSStreamFingerprintWrite_cold_3();
          }
        }

        else
        {
          uint64_t v4 = 4294895648LL;
        }

uint64_t _APFSStreamFingerprintCallback(uint64_t __src, CC_LONG len, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 80);
  int v5 = *(unsigned __int8 *)__src;
  if ((v4 == 0) == (v5 == 5))
  {
    if (!*(_DWORD *)(a3 + 92))
    {
      uint64_t v7 = __src;
      if ((v5 - 7) >= 6)
      {
        if (v5 == 5)
        {
          __src = (uint64_t)memcpy((void *)(a3 + 2097312), (const void *)__src, 0x400uLL);
          *(_BYTE *)(a3 + 66) = (*(void *)(v7 + 13) & 1LL) == 0;
          if ((*(_BYTE *)(v7 + 13) & 2) == 0) {
            *(_DWORD *)(a3 + 92) = -71644;
          }
        }

        else if (v5 == 6)
        {
          *(_OWORD *)(a3 + 2098336) = *(_OWORD *)__src;
          __int128 v8 = *(_OWORD *)(__src + 16);
          __int128 v9 = *(_OWORD *)(__src + 32);
          __int128 v10 = *(_OWORD *)(__src + 64);
          *(_OWORD *)(a3 + 2098384) = *(_OWORD *)(__src + 48);
          *(_OWORD *)(a3 + 2098400) = v10;
          *(_OWORD *)(a3 + 2098352) = v8;
          *(_OWORD *)(a3 + 2098368) = v9;
          __int128 v11 = *(_OWORD *)(__src + 80);
          __int128 v12 = *(_OWORD *)(__src + 96);
          __int128 v13 = *(_OWORD *)(__src + 112);
          *(_OWORD *)(a3 + 2098461) = *(_OWORD *)(__src + 125);
          *(_OWORD *)(a3 + 2098432) = v12;
          *(_OWORD *)(a3 + 2098448) = v13;
          *(_OWORD *)(a3 + 2098416) = v11;
        }
      }

      else
      {
        __src = CC_SHA512_Update((CC_SHA512_CTX *)(a3 + 2098480), (const void *)__src, len);
        uint64_t v4 = *(void *)(a3 + 80);
      }

      *(void *)(a3 + 80) = v4 + len;
    }
  }

  else
  {
    *(_DWORD *)(a3 + 92) = -71647;
  }

  return __src;
}

uint64_t APFSStreamFingerprintFinish(pthread_mutex_t *a1, char **a2)
{
  uint64_t v25 = *MEMORY[0x1895F89C0];
  uint64_t v24 = 0LL;
  __int128 v22 = 0u;
  __int128 v23 = 0u;
  __int128 v20 = 0u;
  __int128 v21 = 0u;
  __int128 v18 = 0u;
  __int128 v19 = 0u;
  __int128 v16 = 0u;
  *(_OWORD *)uuid_t dst = 0u;
  __int128 v14 = 0u;
  __int128 v15 = 0u;
  *(_OWORD *)md = 0u;
  if (a1 && a2)
  {
    uint64_t v4 = 4294895648LL;
    if (BYTE1(a1[1].__sig))
    {
      if (LOBYTE(a1[1].__sig))
      {
        uint64_t v24 = 0LL;
        __int128 v22 = 0uLL;
        __int128 v23 = 0uLL;
        __int128 v20 = 0uLL;
        __int128 v21 = 0uLL;
        __int128 v18 = 0uLL;
        __int128 v19 = 0uLL;
        *(_OWORD *)uuid_t dst = 0uLL;
        uuid_copy(dst, (const unsigned __int8 *)&a1[32771].__opaque[1]);
        __int128 v5 = *(_OWORD *)&a1[32780].__opaque[12];
        __int128 v18 = *(_OWORD *)((char *)&a1[32780].__sig + 4);
        __int128 v19 = v5;
        *(void *)&__int128 v20 = *(void *)&a1[32779].__opaque[44] & 9LL;
        CC_SHA512_Update((CC_SHA512_CTX *)&a1[32788].__opaque[40], dst, 0x78u);
        CC_SHA512_Final(md, (CC_SHA512_CTX *)&a1[32788].__opaque[40]);
        int v6 = (char *)malloc(0x81uLL);
        if (v6)
        {
          uint64_t v7 = v6;
          uint64_t v8 = 0LL;
          __int128 v9 = md;
          do
          {
            unsigned int v10 = *v9++;
            __int128 v11 = &v6[v8];
            char *v11 = a0123456789abcd[(unint64_t)v10 >> 4];
            v11[1] = a0123456789abcd[v10 & 0xF];
            v8 += 2LL;
          }

          while (v8 != 128);
          v6[128] = 0;
          asprintf(a2, "%s:%s", "v0,sha512", v6);
          if (*a2) {
            uint64_t v4 = 0LL;
          }
          else {
            uint64_t v4 = 49164LL;
          }
          free(v7);
        }

        else
        {
          uint64_t v4 = 49164LL;
        }
      }

      else
      {
        uint64_t v4 = 4294895650LL;
      }
    }
  }

  else
  {
    uint64_t v4 = 3758097090LL;
    if (!a1) {
      return v4;
    }
  }

  free_lock(a1);
  bzero(a1, 0x200600uLL);
  free(a1);
  return v4;
}

uint64_t APFSContainerVolumeGroupAdd()
{
  return 49197LL;
}

uint64_t APFSContainerVolumeGroupRemove()
{
  return 49197LL;
}

uint64_t APFSGetVolumeGroupID()
{
  return 49197LL;
}

uint64_t APFSContainerVolumeGroupGet()
{
  return 49197LL;
}

uint64_t APFSContainerVolumeGroupGetVolumes()
{
  return 49197LL;
}

uint64_t APFSContainerVolumeGroupGetSystemAndDataVolumes()
{
  return 49197LL;
}

uint64_t APFSContainerVolumeGroupGetFirmlinks()
{
  return 49197LL;
}

uint64_t APFSContainerVolumeGroupSyncUnlockRecords()
{
  return 45LL;
}

uint64_t APFSGetFragmentationHistogram(char *a1, __CFArray **a2)
{
  size_t outputStructCnt = 408LL;
  uint64_t result = 49174LL;
  if (a1 && a2)
  {
    io_connect_t v17 = 0;
    bzero(&outputStruct, 0x978uLL);
    if (apfs_container_iouc(a1, 0LL, &v17, 0LL, 0))
    {
      uint64_t result = apfs_container_iouc(a1, &outputStruct, &v17, 0LL, 0);
      if ((_DWORD)result) {
        return result;
      }
      char v5 = 0;
    }

    else
    {
      char v5 = 1;
    }

    char v16 = v5;
    uint64_t v6 = IOConnectCallStructMethod(v17, 0x2Eu, &outputStruct, 8uLL, &outputStruct, &outputStructCnt);
    IOServiceClose(v17);
    if ((_DWORD)v6)
    {
      else {
        return v6;
      }
    }

    else
    {
      uint64_t v7 = (const __CFAllocator *)*MEMORY[0x189604DB0];
      CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x189604DB0], 51LL, MEMORY[0x189605228]);
      if (Mutable)
      {
        __int128 v9 = Mutable;
        CFIndex v10 = 0LL;
        for (CFIndex i = &outputStruct; ; i += 2)
        {
          CFNumberRef v12 = CFNumberCreate(v7, kCFNumberIntType, i);
          if (!v12) {
            break;
          }
          CFNumberRef v13 = v12;
          CFArraySetValueAtIndex(v9, v10, v12);
          CFRelease(v13);
          if (++v10 == 51)
          {
            uint64_t result = 0LL;
            *a2 = v9;
            return result;
          }
        }

        if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_ERROR)) {
          APFSGetFragmentationHistogram_cold_2();
        }
        CFRelease(v9);
      }

      else if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_ERROR))
      {
        APFSGetFragmentationHistogram_cold_1();
      }

      return 49164LL;
    }
  }

  return result;
}

uint64_t APFSContainerWriteBurstStats(char *a1, __CFDictionary **a2)
{
  unint64_t valuePtr = 0LL;
  unint64_t v19 = 0LL;
  double v16 = 0.0;
  uint64_t v17 = 45000000LL;
  uint64_t v2 = 49174LL;
  double v15 = 0.0;
  if (!a1 || !a2) {
    return v2;
  }
  *a2 = 0LL;
  io_registry_entry_t container_io_object = get_container_io_object(a1);
  if (!container_io_object) {
    return 49154LL;
  }
  io_object_t v5 = container_io_object;
  uint64_t v6 = (const __CFAllocator *)*MEMORY[0x189604DB0];
  CFTypeRef CFProperty = (const __CFDictionary *)IORegistryEntryCreateCFProperty( container_io_object,  @"Statistics",  (CFAllocatorRef)*MEMORY[0x189604DB0],  0);
  if (!CFProperty)
  {
    IOObjectRelease(v5);
    return 49154LL;
  }

  uint64_t v8 = CFProperty;
  unint64_t v24 = 0LL;
  unint64_t v22 = 0LL;
  unint64_t v23 = 0LL;
  unint64_t v20 = 0LL;
  unint64_t v21 = 0LL;
  uint64_t number = get_number(CFProperty, @"Write burst: Burst count", &v24);
  if ((_DWORD)number
    || (uint64_t number = get_number(v8, @"Write burst: Total time", &v23), (_DWORD)number)
    || (uint64_t number = get_number(v8, @"Write burst: Total number of bytes written", &v22), (_DWORD)number)
    || (uint64_t number = get_number(v8, @"Write burst: Total number of I/Os", &v21), (_DWORD)number)
    || (uint64_t number = get_number(v8, @"Write burst: Total time between bursts", &v20), (_DWORD)number))
  {
    uint64_t v2 = number;
LABEL_11:
    CFIndex v10 = 0LL;
    goto LABEL_12;
  }

  CFMutableArrayRef Mutable = CFDictionaryCreateMutable(v6, 5LL, MEMORY[0x189605240], MEMORY[0x189605250]);
  CFIndex v10 = Mutable;
  if (Mutable)
  {
    uint64_t v17 = 45LL;
    unint64_t v13 = v23 / 0xF4240;
    v23 /= 0xF4240uLL;
    unint64_t v14 = v20 / 0xF4240;
    v20 /= 0xF4240uLL;
    if (v24)
    {
      double v16 = (double)v13 / (double)v24;
      unint64_t valuePtr = v21 / v24;
      unint64_t v19 = v22 / v24;
      if (v24 != 1) {
        double v15 = (double)v14 / (double)(v24 - 1);
      }
    }

    if (add_number(Mutable, @"wb_average_io_count", kCFNumberSInt64Type, &valuePtr)
      && add_number(v10, @"wb_average_time", kCFNumberDoubleType, &v16)
      && add_number(v10, @"wb_average_capacity", kCFNumberSInt64Type, &v19)
      && add_number(v10, @"wb_average_time_between", kCFNumberDoubleType, &v15)
      && add_number(v10, @"wb_period_threshold", kCFNumberSInt64Type, &v17))
    {
      uint64_t v2 = 0LL;
      *a2 = v10;
      goto LABEL_11;
    }
  }

  uint64_t v2 = 49164LL;
LABEL_12:
  IOObjectRelease(v5);
  CFRelease(v8);
  if (v10) {
    CFRelease(v10);
  }
  return v2;
}

uint64_t get_number(const __CFDictionary *a1, const void *a2, void *a3)
{
  Value = (const __CFNumber *)CFDictionaryGetValue(a1, a2);
  if (!Value) {
    return 49154LL;
  }
  if (CFNumberGetValue(Value, kCFNumberSInt64Type, a3)) {
    return 0LL;
  }
  return 49174LL;
}

BOOL add_number(__CFDictionary *a1, const void *a2, CFNumberType theType, void *valuePtr)
{
  CFNumberRef v6 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x189604DB0], theType, valuePtr);
  if (v6)
  {
    CFDictionaryAddValue(a1, a2, v6);
    CFRelease(v6);
  }

  return v6 != 0LL;
}

uint64_t APFSContainerStitchVolumeGroup()
{
  return 45LL;
}

uint64_t APFSVolumeCreateForMSU()
{
  return 45LL;
}

uint64_t APFSVolumeTranscribePFK(char *a1)
{
  uint64_t v1 = _APFSVolumeOperation(a1, 0x42u);
  return rc_to_errno(v1);
}

uint64_t APFSVolumeMigrateMediaKey(char *a1)
{
  uint64_t v1 = _APFSVolumeOperation(a1, 0x43u);
  return rc_to_errno(v1);
}

uint64_t volumeNeedsCryptoMigrationHelper(char *a1, char a2, _BYTE *a3)
{
  kern_return_t v9;
  size_t outputStructCnt;
  int outputStruct;
  char v12;
  io_connect_t v13;
  size_t outputStructCnt = 1LL;
  uint64_t result = 22LL;
  if (a1 && a3)
  {
    unint64_t v13 = 0;
    bzero(&outputStruct, 0x978uLL);
    int v7 = apfs_container_iouc(a1, &outputStruct, &v13, 0LL, 0);
    __int16 v8 = v7;
    if (!v7)
    {
      CFNumberRef v12 = a2;
      __int128 v9 = IOConnectCallStructMethod(v13, 0x44u, &outputStruct, 8uLL, &outputStruct, &outputStructCnt);
      __int16 v8 = v9;
      if (!v9) {
        *a3 = outputStruct;
      }
      IOServiceClose(v13);
    }

    return v8 & 0x3FFF;
  }

  return result;
}

uint64_t APFSVolumeNeedsCryptoMigration(char *a1, _BYTE *a2)
{
  return volumeNeedsCryptoMigrationHelper(a1, 0, a2);
}

uint64_t APFSPersonaVolumeNeedsCryptoMigration(char *a1, _BYTE *a2)
{
  return volumeNeedsCryptoMigrationHelper(a1, 1, a2);
}

uint64_t APFSVolumeGetPurgeableSpace(char *a1, char a2, unint64_t a3, unint64_t a4)
{
  size_t outputStructCnt = 16LL;
  if (!a1 || !(a3 | a4)) {
    return 22LL;
  }
  io_connect_t v13 = 0;
  bzero(&outputStruct, 0x978uLL);
  uint64_t v8 = apfs_container_iouc(a1, &outputStruct, &v13, 0LL, 0);
  if (!(_DWORD)v8)
  {
    uint64_t v12 = a2 & 0xF;
    uint64_t v8 = IOConnectCallStructMethod(v13, 0x47u, &outputStruct, 0x10uLL, &outputStruct, &outputStructCnt);
    if (!(_DWORD)v8)
    {
      if (a3) {
        *(void *)a3 = outputStruct;
      }
      if (a4) {
        *(void *)a4 = v12;
      }
    }

    IOServiceClose(v13);
  }

  return rc_to_errno(v8);
}

uint64_t APFSVolumePerformOfflinePurge(char *a1, __int128 *a2, uint64_t a3)
{
  size_t outputStructCnt = 24LL;
  uint64_t result = 22LL;
  if (a1 && a2 && a3)
  {
    io_connect_t v22 = 0;
    bzero(outputStruct, 0x978uLL);
    __int128 v7 = a2[4];
    __int128 v18 = a2[5];
    __int128 v8 = a2[7];
    __int128 v19 = a2[6];
    __int128 v20 = v8;
    __int128 v21 = a2[8];
    __int128 v9 = *a2;
    __int128 v14 = a2[1];
    __int128 v10 = a2[3];
    __int128 v15 = a2[2];
    __int128 v16 = v10;
    __int128 v17 = v7;
    *(_OWORD *)&_BYTE outputStruct[8] = v9;
    uint64_t v11 = apfs_container_iouc(a1, outputStruct, &v22, 0LL, 0);
    if (!(_DWORD)v11)
    {
      uint64_t v11 = IOConnectCallStructMethod(v22, 0x49u, outputStruct, 0x98uLL, outputStruct, &outputStructCnt);
      if (!(_DWORD)v11)
      {
        *(_OWORD *)a3 = *(_OWORD *)outputStruct;
        *(void *)(a3 + 16) = *(void *)&outputStruct[16];
      }

      IOServiceClose(v22);
    }

    return rc_to_errno(v11);
  }

  return result;
}

uint64_t APFSVolumeCancelOfflinePurge(char *a1)
{
  size_t outputStructCnt = 0LL;
  if (!a1) {
    return 22LL;
  }
  io_connect_t v6 = 0;
  bzero(inputStruct, 0x978uLL);
  uint64_t v2 = apfs_container_iouc(a1, inputStruct, &v6, 0LL, 0);
  if (!(_DWORD)v2)
  {
    uint64_t v2 = IOConnectCallStructMethod(v6, 0x4Au, inputStruct, 0x10uLL, 0LL, &outputStructCnt);
    IOServiceClose(v6);
  }

  return rc_to_errno(v2);
}

uint64_t APFSCaptureCreatePreallocFile(const char *a1, uint64_t a2)
{
  __int128 v11 = 0u;
  __int128 v12 = 0u;
  memset(&v10, 0, sizeof(v10));
  *__error() = 0;
  if (lstat(a1, &v10) < 0 && *__error() != 2) {
    return *__error() | 0xC000u;
  }
  if (*__error())
  {
LABEL_4:
    uint64_t v4 = 0LL;
    goto LABEL_5;
  }

  if ((v10.st_mode & 0xF000) != 0xA000)
  {
    if ((unlink(a1) & 0x80000000) == 0) {
      goto LABEL_4;
    }
    return *__error() | 0xC000u;
  }

  __int128 v8 = realpath_DARWIN_EXTSN(a1, 0LL);
  if (!v8)
  {
    if (*__error() == 2) {
      goto LABEL_4;
    }
    return *__error() | 0xC000u;
  }

  uint64_t v4 = v8;
  if (unlink(v8) < 0)
  {
    uint64_t v7 = *__error() | 0xC000u;
    goto LABEL_16;
  }

LABEL_5:
  int v5 = open(a1, 514, 384LL);
  if (v5 < 0)
  {
    uint64_t v7 = *__error() | 0xC000u;
    if (!v4) {
      return v7;
    }
    goto LABEL_16;
  }

  int v6 = v5;
  __int128 v11 = 0x30000000CuLL;
  *(void *)&__int128 v12 = a2;
  if (fcntl(v5, 42, &v11) < 0) {
    uint64_t v7 = *__error() | 0xC000u;
  }
  else {
    uint64_t v7 = 0LL;
  }
  close(v6);
  if (v4) {
LABEL_16:
  }
    free(v4);
  return v7;
}

  if (v24) {
    obj_release(v24);
  }
  return v11;
}

uint64_t APFSCaptureStartCaptureInFile()
{
  return 0LL;
}

uint64_t APFSCaptureFinishCaptureForFile(const char *a1, const char *a2)
{
  uint64_t v3 = a1;
  memset(&v18, 0, sizeof(v18));
  if (lstat(a1, &v18) < 0) {
    return *__error() | 0xC000u;
  }
  mode_t st_mode = v18.st_mode;
  if ((v18.st_mode & 0xF000) != 0xA000)
  {
    int v6 = 0LL;
    goto LABEL_8;
  }

  int v5 = realpath_DARWIN_EXTSN(v3, 0LL);
  if (!v5) {
    return *__error() | 0xC000u;
  }
  int v6 = v5;
  if (stat(v5, &v18) < 0)
  {
    __int128 v8 = 0LL;
    char v12 = 0;
    uint64_t v7 = *__error() | 0xC000u;
    int v11 = -1;
    int v9 = -1;
LABEL_41:
    free(v6);
    goto LABEL_42;
  }

  mode_t st_mode = v18.st_mode;
  uint64_t v3 = v6;
LABEL_8:
  if ((st_mode & 0xF000) != 0x8000)
  {
    char v12 = 0;
    __int128 v8 = 0LL;
    goto LABEL_19;
  }

  *__error() = 0;
  if (lstat(a2, &v18) < 0 && *__error() != 2) {
    goto LABEL_37;
  }
  if (*__error())
  {
LABEL_12:
    __int128 v8 = 0LL;
    goto LABEL_13;
  }

  __int128 v8 = 0LL;
  int v13 = v18.st_mode & 0xF000;
  if (v13 != 0x8000)
  {
    if (v13 == 40960)
    {
      __int128 v14 = realpath_DARWIN_EXTSN(a2, 0LL);
      if (v14)
      {
        __int128 v8 = v14;
        if ((stat(v14, &v18) & 0x80000000) == 0)
        {
          a2 = v8;
          goto LABEL_13;
        }

        __int128 v15 = __error();
        char v12 = 0;
LABEL_38:
        uint64_t v7 = *v15 | 0xC000u;
LABEL_39:
        int v9 = -1;
        goto LABEL_40;
      }

      if (*__error() == 2) {
        goto LABEL_12;
      }
LABEL_37:
      __int128 v15 = __error();
      char v12 = 0;
      __int128 v8 = 0LL;
      goto LABEL_38;
    }

    char v12 = 0;
LABEL_19:
    int v9 = -1;
    uint64_t v7 = 49231LL;
    goto LABEL_40;
  }

uint64_t APFSCaptureExtendPreallocSizeForFile(const char *a1, uint64_t a2)
{
  v7[3] = 0LL;
  int v3 = open(a1, 2);
  if (v3 < 0) {
    return *__error() | 0xC000u;
  }
  int v4 = v3;
  v7[0] = 0x300000004LL;
  v7[1] = 0LL;
  v7[2] = a2;
  if (fcntl(v3, 42, v7) < 0) {
    uint64_t v5 = *__error() | 0xC000u;
  }
  else {
    uint64_t v5 = 0LL;
  }
  close(v4);
  return v5;
}

uint64_t APFSCaptureDeletePreallocFile(const char *a1)
{
  if (unlink(a1) < 0) {
    return *__error() | 0xC000u;
  }
  else {
    return 0LL;
  }
}

uint64_t APFSContainerCommitTemporaryCheckpoint(int *a1)
{
  __int128 v8 = 0LL;
  memset(v7, 0, sizeof(v7));
  parse_nx_mount_options(0LL, (int *)v7);
  WORD4(v7[0]) = WORD4(v7[0]) & 0xEFFE | 1;
  uint64_t v2 = nx_mount(a1, (uint64_t)v7, &v8);
  if ((_DWORD)v2)
  {
    uint64_t v3 = v2;
    if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_ERROR)) {
      APFSContainerCommitTemporaryCheckpoint_cold_3();
    }
  }

  else
  {
    uint64_t v6 = 0LL;
    uint64_t v4 = tx_enter((uint64_t)v8, &v6);
    if ((_DWORD)v4)
    {
      uint64_t v3 = v4;
      if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_ERROR)) {
        APFSContainerCommitTemporaryCheckpoint_cold_2();
      }
    }

    else
    {
      uint64_t v3 = tx_leave((uint64_t)v8, v6, 5);
      if ((_DWORD)v3 && os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_ERROR)) {
        APFSContainerCommitTemporaryCheckpoint_cold_1();
      }
    }

    nx_unmount((uint64_t)v8);
  }

  return v3;
}

uint64_t APFSVolumeConvertToUserCrypto(char *a1, const char *a2)
{
  size_t outputStructCnt = 144LL;
  if (!a1) {
    return 22LL;
  }
  io_connect_t v25 = 0;
  bzero(outputStruct, 0x978uLL);
  memset(v22, 0, sizeof(v22));
  time_t v4 = time(0LL);
  int v5 = apfs_container_iouc(a1, outputStruct, &v25, 0LL, 0);
  if (v5)
  {
    uint64_t v6 = v5 & 0x3FFF;
    record_failure(v22, 1126051, v6);
    if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_ERROR))
    {
      APFSVolumeConvertToUserCrypto_cold_3((uint64_t)a1, v6);
      if (!a2) {
        return v6;
      }
      goto LABEL_10;
    }

LABEL_9:
    if (!a2) {
      return v6;
    }
    goto LABEL_10;
  }

  uint64_t v6 = IOConnectCallStructMethod(v25, 0x45u, outputStruct, 4uLL, outputStruct, &outputStructCnt);
  v22[6] = outputStruct[6];
  v22[7] = outputStruct[7];
  v22[8] = outputStruct[8];
  uint64_t v22[2] = outputStruct[2];
  v22[3] = outputStruct[3];
  v22[4] = outputStruct[4];
  v22[5] = outputStruct[5];
  v22[0] = outputStruct[0];
  v22[1] = outputStruct[1];
  IOServiceClose(v25);
  if (!(_DWORD)v6) {
    goto LABEL_9;
  }
  v6 &= 0x3FFFu;
  record_failure(v22, 1126052, v6);
  if (!os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_ERROR)) {
    goto LABEL_9;
  }
  APFSVolumeConvertToUserCrypto_cold_2((uint64_t)a1, v6);
  if (!a2) {
    return v6;
  }
LABEL_10:
  bzero(v9, 0x2E8uLL);
  v9[2] = *(void *)&v22[0];
  int v10 = DWORD2(v22[0]);
  uint64_t v13 = *(void *)((char *)&v22[2] + 12);
  __int128 v11 = *(_OWORD *)((char *)v22 + 12);
  __int128 v12 = *(_OWORD *)((char *)&v22[1] + 12);
  int v14 = DWORD1(v22[3]);
  __int128 v16 = *(_OWORD *)((char *)&v22[4] + 8);
  __int128 v17 = *(_OWORD *)((char *)&v22[5] + 8);
  __int128 v18 = *(_OWORD *)((char *)&v22[6] + 8);
  __int128 v19 = *(_OWORD *)((char *)&v22[7] + 8);
  __int128 v15 = *(_OWORD *)((char *)&v22[3] + 8);
  int v21 = HIDWORD(v22[8]);
  int v20 = DWORD2(v22[8]);
  set_metric_path((uint64_t)v9, a1);
  set_metric_start_time((uint64_t)v9, v4);
  if (!strcmp(a2, "-"))
  {
    uint64_t v7 = (FILE *)*MEMORY[0x1895F89E0];
    if (*MEMORY[0x1895F89E0]) {
      goto LABEL_12;
    }
  }

  else
  {
    uint64_t v7 = fopen(a2, "w");
    if (v7)
    {
LABEL_12:
      set_metrics_file(v9, (uint64_t)v7);
      print_metrics_to_file((uint64_t)v9, 2);
      return v6;
    }
  }

  if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_ERROR)) {
    APFSVolumeConvertToUserCrypto_cold_1();
  }
  return v6;
}

  __int128 v12 = ((_WORD)v7 + 7) & 0xFFF8;
  a1[3] = v12;
  if (v12 < v7)
  {
LABEL_10:
    uint64_t result = 22LL;
LABEL_11:
    *(void *)a1 = 0LL;
    *((void *)a1 + 1) = 0LL;
    *((void *)a1 + 2) = 0LL;
    return result;
  }

  uint64_t v13 = 2 * v6;
  *((void *)a1 + 1) = _apfs_malloc(4 * v6);
  int v14 = _apfs_malloc(a1[3]);
  *((void *)a1 + 2) = v14;
  __int128 v15 = (void *)*((void *)a1 + 1);
  __int128 v16 = *a1;
  if (!v15 || !v14)
  {
    _apfs_free(v15, 4 * v16);
    _apfs_free(*((void **)a1 + 2), a1[3]);
    uint64_t result = 12LL;
    goto LABEL_11;
  }

  memcpy(v15, a2 + 2, 4 * v16);
  memcpy(*((void **)a1 + 2), &a2[v13 + 2], a1[2]);
  bzero((void *)(*((void *)a1 + 2) + a1[2]), a1[3] - (unint64_t)a1[2]);
  return 0LL;
}

uint64_t APFSDecodeMetricsString(char *a1)
{
  if (MetricsCompactor_Import(a1, (uint64_t)v4))
  {
    print_metrics((uint64_t)v4, 1);
    uint64_t v2 = v5;
    uint64_t v5 = 0LL;
  }

  else
  {
    uint64_t v2 = 0LL;
  }

  cleanup_metrics((uint64_t)v4);
  return v2;
}

uint64_t APFSOverProvModel()
{
  return 1LL;
}

uint64_t APFSShouldSealSystemVolume(_BYTE *a1)
{
  if (!a1) {
    return 49174LL;
  }
  char v2 = arv_enabled();
  uint64_t result = 0LL;
  *a1 = v2;
  return result;
}

CFTypeID records_callback(const __CFString *a1, const void *a2, uint64_t a3)
{
  uint64_t v6 = *(unsigned int *)(a3 + 40);
  CFTypeID v7 = CFGetTypeID(a1);
  CFTypeID result = CFStringGetTypeID();
  if (v7 == result)
  {
    CFTypeID v9 = CFGetTypeID(a2);
    CFTypeID result = CFDataGetTypeID();
    if (v9 == result)
    {
      CStringPtr = CFStringGetCStringPtr(a1, 0x8000100u);
      uuid_parse(CStringPtr, (unsigned __int8 *)(*(void *)(a3 + 48) + 16 * v6));
      **(void **)(*(void *)(a3 + 56) + 8 * v6) = CFDataGetBytePtr((CFDataRef)a2);
      CFTypeID result = CFDataGetLength((CFDataRef)a2);
      *(void *)(*(void *)(*(void *)(a3 + 56) + 8 * v6) + 8LL) = result;
      ++*(_DWORD *)(a3 + 40);
    }
  }

  return result;
}

uint64_t keygen_nvram_prop(int a1)
{
  kern_return_t v6;
  mach_error_t v7;
  uint64_t v8;
  CFTypeRef CFProperty;
  const void *v10;
  CFStringRef v2 = CFStringCreateWithCString(0LL, "apfs_roll_keygen", 0x8000100u);
  if (v2)
  {
    uint64_t v3 = v2;
    io_registry_entry_t v4 = IORegistryEntryFromPath(*MEMORY[0x1896086B0], "IODeviceTree:/options");
    if (v4)
    {
      io_object_t v5 = v4;
      if (a1)
      {
        uint64_t v6 = IORegistryEntrySetCFProperty(v4, @"IONVRAM-DELETE-PROPERTY", v3);
        if (!v6)
        {
          __int128 v8 = 1LL;
LABEL_19:
          CFRelease(v3);
          goto LABEL_20;
        }

        CFTypeID v7 = v6;
        if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_ERROR)) {
          keygen_nvram_prop_cold_3(v7);
        }
      }

      else
      {
        CFTypeRef CFProperty = IORegistryEntryCreateCFProperty(v4, v3, 0LL, 0);
        if (CFProperty)
        {
          int v10 = CFProperty;
          CFRelease(v3);
          CFRelease(v10);
          __int128 v8 = 1LL;
LABEL_20:
          IOObjectRelease(v5);
          return v8;
        }

        if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_ERROR)) {
          keygen_nvram_prop_cold_4();
        }
      }

      __int128 v8 = 0LL;
      goto LABEL_19;
    }

    if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_ERROR)) {
      keygen_nvram_prop_cold_2();
    }
    CFRelease(v3);
  }

  else if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_ERROR))
  {
    keygen_nvram_prop_cold_1();
  }

  return 0LL;
}

  ;
}

void OUTLINED_FUNCTION_1( void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

  ;
}

void OUTLINED_FUNCTION_3( void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

void OUTLINED_FUNCTION_4( void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

  ;
}

void OUTLINED_FUNCTION_6( void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

  ;
}

  ;
}

void OUTLINED_FUNCTION_9( void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

  ;
}

  ;
}

  ;
}

  ;
}

  ;
}

  ;
}

void OUTLINED_FUNCTION_16( void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

  ;
}

int *OUTLINED_FUNCTION_18@<X0>(uint64_t a1@<X8>)
{
  *(void *)(v1 - 24) = a1;
  return __error();
}

char *OUTLINED_FUNCTION_19@<X0>(int __errnum@<W1>, uint64_t a2@<X8>)
{
  *(void *)(v2 - 24) = a2;
  return strerror(__errnum);
}

void *tree_key_compare_function_for_type(unsigned __int16 a1)
{
  int v1 = a1;
  CFTypeID result = spaceman_free_queue_key_cmp;
  switch(v1)
  {
    case 9:
      return result;
    case 10:
      CFTypeID result = extent_list_key_cmp;
      break;
    case 11:
      CFTypeID result = omap_key_cmp;
      break;
    case 12:
    case 13:
    case 17:
    case 18:
    case 20:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 35:
      goto LABEL_5;
    case 14:
    case 15:
    case 16:
    case 36:
      CFTypeID result = apfs_key_compare;
      break;
    case 19:
      CFTypeID result = omap_snapshot_key_cmp;
      break;
    case 21:
      CFTypeID result = fusion_mt_key_cmp;
      break;
    case 31:
      CFTypeID result = fext_tree_key_cmp;
      break;
    case 32:
      CFTypeID result = pfkur_tree_key_cmp;
      break;
    case 33:
      CFTypeID result = evict_mapping_key_compare;
      break;
    case 34:
      CFTypeID result = doc_id_tree_key_cmp;
      break;
    default:
      if (v1 == 255) {
        CFTypeID result = (void *)test_key_compare_function;
      }
      else {
LABEL_5:
      }
        CFTypeID result = 0LL;
      break;
  }

  return result;
}

uint64_t default_test_key_compare()
{
  return 22LL;
}

uint64_t parse_str_to_role(const char *a1)
{
  if (strnlen(a1, 2uLL) > 1) {
    return -1LL;
  }
  int v3 = *a1;
  switch(*a1)
  {
    case 'S':
      return 448LL;
    case 'T':
    case 'U':
    case 'V':
    case 'W':
    case 'X':
    case 'Y':
    case 'Z':
    case '[':
    case '\\':
    case ']':
    case '^':
    case '_':
    case 'c':
    case 'f':
    case 'g':
    case 'j':
    case 'l':
    case 'm':
    case 'q':
    case 't':
    case 'w':
      return -1LL;
    case 'a':
      return 128LL;
    case 'b':
      return 16LL;
    case 'd':
      return 64LL;
    case 'e':
      return 576LL;
    case 'h':
      return 320LL;
    case 'i':
      return 32LL;
    case 'k':
      return 384LL;
    case 'n':
      return 512LL;
    case 'o':
      return 704LL;
    case 'p':
      return 192LL;
    case 'r':
      return 4LL;
    case 's':
      return 1LL;
    case 'u':
      return 2LL;
    case 'v':
      return 8LL;
    case 'x':
      return 256LL;
    default:
      if (v3 == 48)
      {
        uint64_t result = 0LL;
      }

      else
      {
        if (v3 != 68) {
          return -1LL;
        }
        uint64_t result = 640LL;
      }

      break;
  }

  return result;
}

unint64_t calc_overlap_range( unint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t *a5)
{
  unint64_t v5 = a2 + a1;
  unint64_t v6 = a4 + a3;
  if (a2 + a1 > a3)
  {
    BOOL v7 = v6 >= a1;
    BOOL v8 = v6 == a1;
  }

  else
  {
    BOOL v7 = 0;
    BOOL v8 = 0;
  }

  BOOL v9 = !v8 && v7 && v5 >= a1;
  if (!v9 || v6 < a3) {
    return 0LL;
  }
  if (a1 <= a3) {
    unint64_t v11 = a3;
  }
  else {
    unint64_t v11 = a1;
  }
  if (v5 >= v6) {
    unint64_t v5 = a4 + a3;
  }
  if (a5) {
    *a5 = v11;
  }
  return v5 - v11;
}

uint64_t ilog10(unint64_t a1)
{
  if (a1 > 0x8AC7230489E7FFFFLL) {
    return 19LL;
  }
  if (a1 > 0xDE0B6B3A763FFFFLL) {
    return 18LL;
  }
  if (a1 > 0x16345785D89FFFFLL) {
    return 17LL;
  }
  if (a1 > 0x2386F26FC0FFFFLL) {
    return 16LL;
  }
  if (a1 > 0x38D7EA4C67FFFLL) {
    return 15LL;
  }
  if (a1 > 0x5AF3107A3FFFLL) {
    return 14LL;
  }
  if (a1 > 0x9184E729FFFLL) {
    return 13LL;
  }
  if (a1 > 0xE8D4A50FFFLL) {
    return 12LL;
  }
  if (a1 > 0x174876E7FFLL) {
    return 11LL;
  }
  if (a1 > 0x2540BE3FFLL) {
    return 10LL;
  }
  if (a1 > 0x3B9AC9FF) {
    return 9LL;
  }
  if (a1 > 0x5F5E0FF) {
    return 8LL;
  }
  if (a1 > 0x98967F) {
    return 7LL;
  }
  if (a1 > 0xF423F) {
    return 6LL;
  }
  if (a1 >> 5 > 0xC34) {
    return 5LL;
  }
  if (a1 >> 4 > 0x270) {
    return 4LL;
  }
  if (a1 > 0x3E7) {
    return 3LL;
  }
  if (a1 <= 0x63) {
    return a1 > 9;
  }
  return 2LL;
}

uint64_t rc_to_errno(uint64_t result)
{
  if ((_DWORD)result)
  {
    int v1 = result;
    if ((result & 0x3FFF | 0xC000) == (_DWORD)result)
    {
      return result & 0x3FFF;
    }

    else if (result >= 0x6B)
    {
      uint64_t result = 6LL;
      if (v1 <= -536870175)
      {
        switch(v1)
        {
          case -536870195:
LABEL_14:
            uint64_t result = 13LL;
            break;
          case -536870194:
          case -536870192:
          case -536870191:
          case -536870189:
          case -536870188:
          case -536870186:
          case -536870185:
          case -536870184:
          case -536870182:
            return 94LL;
          case -536870193:
            uint64_t result = 30LL;
            break;
          case -536870190:
          case -536870187:
            uint64_t result = 16LL;
            break;
          case -536870183:
            return result;
          case -536870181:
            uint64_t result = 28LL;
            break;
          default:
            switch(v1)
            {
              case -536870211:
                uint64_t result = 12LL;
                break;
              case -536870210:
              case -536870209:
                return 94LL;
              case -536870208:
                return result;
              case -536870207:
                goto LABEL_14;
              case -536870206:
                uint64_t result = 22LL;
                break;
              default:
                if (v1 != -536870198) {
                  return 94LL;
                }
                uint64_t result = 5LL;
                break;
            }

            break;
        }
      }

      else if (v1 != -536870167 && v1 != -536870172)
      {
        if (v1 == -536870174) {
          return 1LL;
        }
        else {
          return 94LL;
        }
      }
    }
  }

  return result;
}

uint64_t doc_id_tree_key_cmp(uint64_t a1, _DWORD *a2, int a3, _DWORD *a4, int a5, int *a6)
{
  uint64_t result = 22LL;
  if (a3 == 4 && a5 == 4)
  {
    uint64_t result = 0LL;
    int v7 = *a2 > *a4;
    if (*a2 < *a4) {
      int v7 = -1;
    }
    *a6 = v7;
  }

  return result;
}

uint64_t gbitmap_key_compare(uint64_t a1, void *a2, int a3, void *a4, int a5, int *a6)
{
  uint64_t result = 22LL;
  if (a3 == 8 && a5 == 8)
  {
    uint64_t result = 0LL;
    int v7 = *a2 > *a4;
    if (*a2 < *a4) {
      int v7 = -1;
    }
    *a6 = v7;
  }

  return result;
}

uint64_t gbitmap_block_init(void *a1)
{
  uint64_t v1 = a1[7];
  a1[47] = v1;
  a1[48] = v1 + 32;
  return 0LL;
}

uint64_t gbitmap_init_phys(void *a1, uint64_t a2, uint64_t *a3)
{
  if (!a3) {
    return 22LL;
  }
  uint64_t result = 0LL;
  uint64_t v5 = *a3;
  a1[4] = a3[2];
  a1[5] = v5;
  a1[6] = 0LL;
  return result;
}

uint64_t gbitmap_init(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 376) = *(void *)(a1 + 56);
  *(void *)(a1 + 408) = 8LL * *(unsigned int *)(a1 + 48) - 256;
  if (a2) {
    *(void *)(a1 + 384) = *(void *)(a2 + 24);
  }
  return 0LL;
}

uint64_t gbitmap_reap(void *a1, uint64_t a2, unint64_t *a3, uint64_t a4, uint64_t a5)
{
  int v7 = (void *)a1[1];
  uint64_t v8 = *(void *)(*a1 + 392LL);
  if (v7) {
    uint64_t v9 = a1[1];
  }
  else {
    uint64_t v9 = *(void *)(*a1 + 392LL);
  }
  uint64_t v10 = a1[2];
  uint64_t v41 = 0LL;
  if (v7)
  {
    int v11 = obj_modify(v7, 0, a5);
    if (v11)
    {
      int v12 = v11;
      else {
        uint64_t v13 = (const char *)(v7[48] + 208LL);
      }
      uint64_t v14 = obj_oid((uint64_t)v7);
      log_err("%s:%d: %s obj_modify(fs %lld) failed: %d\n", "gbitmap_reap", 160, v13, v14, v12);
    }
  }

  int tree = gbitmap_get_tree(a1, 0LL, 0LL, (uint64_t *)&v41);
  if (tree)
  {
    int v16 = tree;
    else {
      __int128 v17 = (const char *)(*(void *)(v9 + 384) + 208LL);
    }
    log_err("%s:%d: %s Can't get tree: %d\n", "gbitmap_reap", 166, v17, v16);
  }

  if (v41)
  {
    unint64_t v18 = *a3;
    unint64_t v39 = 0LL;
    unint64_t v40 = v18;
    uint64_t v38 = 0LL;
    memset(v37, 0, sizeof(v37));
    bt_iterator_init((uint64_t)v37, (uint64_t)v41, 0LL, 0, &v40, 8, 8u, &v39, 8u);
    int v20 = v19;
    int v35 = (const char *)(v9 + 3992);
    int v21 = 1023;
    if (v19)
    {
LABEL_31:
      if (v20 != 2)
      {
        else {
          log_err( "%s:%d: %s Tree iteration threw %d at cursor %llu\n",  "gbitmap_reap",  203,  (const char *)(*(void *)(v9 + 384) + 208LL),  v20,  v40);
        }
      }
    }

    else
    {
      while (!bt_iterator_ended((uint64_t)v37))
      {
        if ((v10 & 0x40000000) != 0 && (unint64_t v22 = v39, (v39 & 0x8000000000000000LL) != 0))
        {
          v39 &= ~0x8000000000000000LL;
          spaceman_free((const char *)v9, 0LL, v22 & 0x7FFFFFFFFFFFFFFFLL, 1LL, a5);
        }

        else
        {
          int v23 = *((_DWORD *)a1 + 4);
          if (v7) {
            unint64_t v24 = obj_oid((uint64_t)v7);
          }
          else {
            unint64_t v24 = 0LL;
          }
          uint64_t v25 = *(void *)(v8 + 392);
          unsigned int v26 = v23 & 0xD8000000 | 0x1B;
          int v27 = obj_size_phys((uint64_t)a1);
          int v28 = obj_delete_and_free_by_oid(v25, v26, v27, v24, v39, a5);
          if (v28)
          {
            int v29 = v28;
            if (obj_type(v9) == 13) {
              log_err( "%s:%d: %s deletion threw %d for cursor %llu, oid %llu, oflags 0x%x\n",  "gbitmap_reap",  188,  v35,  v29,  v40,  v39,  v26);
            }
            else {
              log_err( "%s:%d: %s deletion threw %d for cursor %llu, oid %llu, oflags 0x%x\n",  "gbitmap_reap",  188,  (const char *)(*(void *)(v9 + 384) + 208LL),  v29,  v40,  v39,  v26);
            }
          }
        }

        *a3 = v40 + 1;
        if (!v21)
        {
          uint64_t v30 = 36LL;
          goto LABEL_41;
        }

        int v20 = bt_iterator_next((uint64_t)v37);
        --v21;
        if (v20) {
          goto LABEL_31;
        }
      }
    }

    int v31 = btree_delete((uint64_t)v41, a5, 0LL);
    if (v31)
    {
      int v32 = v31;
      uint64_t v33 = obj_oid((uint64_t)v41);
      log_err("%s:%d: %s Tree delete oid %llu threw %d\n", "gbitmap_reap", 208, v35, v33, v32);
    }
  }

  obj_delete_and_free(a1, a5);
  uint64_t v30 = 0LL;
LABEL_41:
  if (v41) {
    obj_release(v41);
  }
  return v30;
}

uint64_t gbitmap_get_tree(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  if (a1[1]) {
    uint64_t v8 = a1[1];
  }
  else {
    uint64_t v8 = *(void *)(*a1 + 392LL);
  }
  *a4 = 0LL;
  unsigned int v9 = obj_flags((uint64_t)a1) & 0xFFFFFC00;
  return btree_get(v8, v9, *(void *)(a1[47] + 32LL), a2, 3, a3 != 0, 26, (uint64_t)gbitmap_key_compare, a3, a4);
}

const char *log_debug(const char *result, ...)
{
  if (apfs_log_level >= 5) {
    return (const char *)vfprintf((FILE *)*MEMORY[0x1895F89D0], result, va);
  }
  return result;
}

const char *log_info(const char *result, ...)
{
  if (apfs_log_level >= 4) {
    return (const char *)vfprintf((FILE *)*MEMORY[0x1895F89D0], result, va);
  }
  return result;
}

const char *log_warn(const char *result, ...)
{
  if (apfs_log_level >= 3) {
    return (const char *)vfprintf((FILE *)*MEMORY[0x1895F89D0], result, va);
  }
  return result;
}

const char *log_err(const char *result, ...)
{
  if (apfs_log_level >= 2) {
    return (const char *)vfprintf((FILE *)*MEMORY[0x1895F89D0], result, va);
  }
  return result;
}

uint64_t log_corrupt( uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  if (apfs_log_level >= 1) {
    return vfprintf((FILE *)*MEMORY[0x1895F89D0], a2, &a9);
  }
  return result;
}

void jobj_release(uint64_t a1, unsigned __int8 *a2)
{
  if (a2)
  {
    switch(*a2)
    {
      case 1u:
        _apfs_free(*((void **)a2 + 9), *((unsigned __int16 *)a2 + 32));
        goto LABEL_20;
      case 2u:
        io_registry_entry_t v4 = a2;
        uint64_t v3 = 40LL;
        goto LABEL_26;
      case 3u:
        if ((*((_WORD *)a2 + 48) & 0xF000) == 0xA000)
        {
          uint64_t v5 = (void *)*((void *)a2 + 44);
          if (v5)
          {
            _apfs_free(v5, *((int *)a2 + 90));
            *((void *)a2 + 44) = 0LL;
          }
        }

        xf_release((uint64_t)(a2 + 408));
        if ((a2[117] & 0x10) != 0)
        {
          free_rwlock((pthread_rwlock_t *)(a2 + 448));
          free_rwlock((pthread_rwlock_t *)(a2 + 120));
          *((void *)a2 + 14) &= ~0x100000000000uLL;
        }

        _apfs_zfree(a2, 2u);
        return;
      case 4u:
      case 5u:
      case 7u:
      case 0xBu:
        goto LABEL_3;
      case 6u:
      case 0xCu:
        io_registry_entry_t v4 = a2;
        uint64_t v3 = 24LL;
        goto LABEL_26;
      case 8u:
        io_registry_entry_t v4 = a2;
        uint64_t v3 = 56LL;
        goto LABEL_26;
      case 9u:
        xf_release((uint64_t)(a2 + 32));
        _apfs_free(*((void **)a2 + 8), *((unsigned __int16 *)a2 + 31));
        goto LABEL_25;
      case 0xAu:
      case 0x12u:
        xf_release((uint64_t)(a2 + 64));
        io_registry_entry_t v4 = a2;
        uint64_t v3 = 96LL;
        goto LABEL_26;
      case 0xDu:
        int v6 = a2[16];
        if (v6 == 2) {
          goto LABEL_19;
        }
        if (v6 != 1) {
          return;
        }
LABEL_3:
        uint64_t v3 = *((unsigned __int16 *)a2 + 1);
        io_registry_entry_t v4 = a2;
LABEL_26:
        _apfs_free(v4, v3);
        break;
      case 0x10u:
LABEL_19:
        xf_release((uint64_t)(a2 + 56));
LABEL_20:
        io_registry_entry_t v4 = a2;
        uint64_t v3 = 80LL;
        goto LABEL_26;
      case 0x11u:
        io_registry_entry_t v4 = a2;
        uint64_t v3 = 32LL;
        goto LABEL_26;
      case 0x13u:
        xf_release((uint64_t)(a2 + 48));
LABEL_25:
        io_registry_entry_t v4 = a2;
        uint64_t v3 = 72LL;
        goto LABEL_26;
      default:
        log_err("%s:%d: *** Can't release unknown obj type %d\n", "jobj_release", 2823, *a2);
        return;
    }
  }

uint64_t make_jkey_from_jobj(uint64_t result, unsigned __int8 *a2, uint64_t a3, int *a4)
{
  uint64_t v7 = result;
  uint64_t v8 = *a2;
  unsigned int v9 = *a2;
  unint64_t v10 = v8 << 60;
  BOOL v11 = (v8 & 0xF0) == 0;
  unint64_t v12 = 0xE000000000000000LL;
  if (v11) {
    unint64_t v12 = v10;
  }
  *(void *)a3 = v12 & 0xF000000000000000LL | *((void *)a2 + 1) & 0xFFFFFFFFFFFFFFFLL;
  if (v9 >= 0x10)
  {
    if ((*(_BYTE *)(*(void *)(result + 376) + 57LL) & 2) == 0)
    {
      BOOL is_panic_on_corruption_enabled = nx_is_panic_on_corruption_enabled(*(void *)(result + 392));
      uint64_t result = log_corrupt( is_panic_on_corruption_enabled,  "%s:%d: %s ***: expanded obj type %d (obj_id %llu) found on unsupported volume\n",  v14,  v15,  v16,  v17,  v18,  v19,  (char)"make_jkey_from_jobj");
      *a4 = 0;
      return result;
    }

    if ((v9 & 0xFC) == 0x10)
    {
      *(_DWORD *)(a3 + 8) = v9;
    }

    else
    {
      BOOL v20 = nx_is_panic_on_corruption_enabled(*(void *)(result + 392));
      uint64_t result = log_corrupt( v20,  "%s:%d: %s Cannot make large jkey from unknown type %d (obj_id %llu)\n",  v21,  v22,  v23,  v24,  v25,  v26,  (char)"make_large_jkey_header_from_jobj");
      unsigned int v9 = *a2;
    }
  }

  switch(v9)
  {
    case 4u:
      size_t v28 = *((unsigned __int16 *)a2 + 10);
      *(_WORD *)(a3 + 8) = v28;
      uint64_t result = (uint64_t)memcpy((void *)(a3 + 10), a2 + 24, v28);
      int v29 = *((unsigned __int16 *)a2 + 10);
      goto LABEL_19;
    case 5u:
    case 8u:
      *(void *)(a3 + 8) = *((void *)a2 + 2);
      int v27 = 16;
      goto LABEL_26;
    case 9u:
      unsigned int v30 = *((unsigned __int16 *)a2 + 31);
      if ((*(_BYTE *)(*(void *)(v7 + 376) + 56LL) & 9) != 0)
      {
        *(_DWORD *)(a3 + 8) = *((_WORD *)a2 + 31) & 0x3FF | (*((_DWORD *)a2 + 14) << 10);
        int v31 = (void *)(a3 + 12);
        int v32 = 12;
      }

      else
      {
        *(_WORD *)(a3 + 8) = v30;
        int v31 = (void *)(a3 + 10);
        int v32 = 10;
      }

      uint64_t result = (uint64_t)memcpy(v31, *((const void **)a2 + 8), v30);
      int v27 = v32 + *((unsigned __int16 *)a2 + 31);
      goto LABEL_26;
    case 0xAu:
      int v27 = 96;
      goto LABEL_26;
    case 0xBu:
      size_t v33 = *((unsigned __int16 *)a2 + 12);
      *(_WORD *)(a3 + 8) = v33;
      uint64_t result = (uint64_t)memcpy((void *)(a3 + 10), a2 + 26, v33);
      int v29 = *((unsigned __int16 *)a2 + 12);
LABEL_19:
      int v27 = v29 + 10;
      goto LABEL_26;
    case 0xDu:
      *a4 = 16;
      *(void *)(a3 + 8) = __ROR8__(*((void *)a2 + 2), 8);
      return result;
    case 0xEu:
      *a4 = 0;
      BOOL v34 = nx_is_panic_on_corruption_enabled(*(void *)(v7 + 392));
      return log_corrupt( v34,  "%s:%d: %s ***: expanded type seen on in-memory obj!\n",  v35,  v36,  v37,  v38,  v39,  v40,  (char)"make_jkey_from_jobj");
    case 0x10u:
    case 0x13u:
      *(_OWORD *)(a3 + 12) = *((_OWORD *)a2 + 1);
      int v27 = 28;
      goto LABEL_26;
    case 0x11u:
      *(void *)(a3 + 12) = *((void *)a2 + 2);
      int v27 = 20;
      goto LABEL_26;
    case 0x12u:
      int v27 = 12;
      goto LABEL_26;
    default:
      int v27 = 8;
LABEL_26:
      *a4 = v27;
      break;
  }

  return result;
}

uint64_t jobj_validate_key_val(uint64_t a1, uint64_t a2)
{
  if (a2) {
    __asm { BR              X11 }
  }

  return 22LL;
}

uint64_t jobj_validate_large_key_val( uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5)
{
  if ((*(_BYTE *)(*(void *)(a1 + 376) + 57LL) & 2) != 0)
  {
    switch(*(_BYTE *)(a2 + 8))
    {
      case 0x10:
        if (a3 <= 0x1B)
        {
          log_err("%s:%d: %s key size (%zu) on purgeable record (%llu) is too small\n");
          return 22LL;
        }

        uint64_t result = 0LL;
        if (a4 && a5 <= 0x17)
        {
          log_err("%s:%d: %s value size (%zu) on purgeable record (%llu) is too small\n");
          return 22LL;
        }

        break;
      case 0x11:
        if (a3 <= 0x13)
        {
          log_err("%s:%d: %s key size (%zu) on purgeable tombstone (%llu) is too small\n");
          return 22LL;
        }

        uint64_t result = 0LL;
        if (a4 && a5 <= 7)
        {
          log_err("%s:%d: %s value size (%zu) on purgeable tombstone (%llu) is too small\n");
          return 22LL;
        }

        break;
      case 0x12:
        uint64_t result = 0LL;
        if (a4 && a5 <= 0x33)
        {
          log_err("%s:%d: %s value size (%zu) on dir stats (%llu) is too small\n");
          return 22LL;
        }

        break;
      case 0x13:
        if (a3 <= 0x1B)
        {
          log_err("%s:%d: %s key size (%zu) on clone mapping (%llu) is too small\n");
          return 22LL;
        }

        uint64_t result = 0LL;
        if (a4 && a5 <= 7)
        {
          log_err("%s:%d: %s value size (%zu) on clone mapping (%llu) is too small\n");
          return 22LL;
        }

        break;
      default:
        uint64_t result = 0LL;
        if (a4 && a5 <= 3)
        {
          log_err("%s:%d: %s value size (%zu) on unknown record (%llu) is too small\n");
          return 22LL;
        }

        break;
    }
  }

  else
  {
    log_err("%s:%d: %s ***: expanded obj type found on unsupported volume\n");
    return 22LL;
  }

  return result;
}

uint64_t apfs_key_compare(uint64_t a1, void *a2, unsigned int a3, void *a4, unsigned int a5, int *a6)
{
  uint64_t v6 = 22LL;
  if (a3 >= 8 && a5 >= 8)
  {
    unint64_t v10 = *a2 & 0xFFFFFFFFFFFFFFFLL;
    unint64_t v11 = *a4 & 0xFFFFFFFFFFFFFFFLL;
    if (v10 < v11)
    {
LABEL_4:
      int v12 = -1;
LABEL_24:
      uint64_t v6 = 0LL;
      *a6 = v12;
      return v6;
    }

    if (v10 > v11) {
      goto LABEL_6;
    }
    uint64_t v13 = *a2 >> 60;
    uint64_t v14 = *a4 >> 60;
    if (!(_DWORD)v13)
    {
      BOOL v17 = (_DWORD)v14 == 0;
LABEL_21:
      if (v17) {
        int v12 = 0;
      }
      else {
        int v12 = -1;
      }
      goto LABEL_24;
    }

    if (!(_DWORD)v14) {
      goto LABEL_6;
    }
    if ((_DWORD)v13 != 14)
    {
LABEL_16:
      int v12 = jobj_validate_key_val(a1, (uint64_t)a4);
      if (v12) {
        return 22LL;
      }
      switch((int)v13)
      {
        case 4:
        case 11:
          goto LABEL_27;
        case 5:
          unint64_t v23 = a2[1];
          unint64_t v24 = a4[1];
          if (!v23) {
            goto LABEL_60;
          }
          if (!v24) {
            break;
          }
          BOOL v25 = v23 >= v24;
          BOOL v26 = v23 > v24;
          goto LABEL_57;
        case 8:
          unint64_t v27 = a2[1];
          unint64_t v28 = a4[1];
          if (v27 == -1LL)
          {
            BOOL v17 = v28 == -1LL;
            goto LABEL_21;
          }

          if (v28 == -1LL) {
            break;
          }
          BOOL v29 = v27 > v28;
          if (v27 >= v28) {
            goto LABEL_73;
          }
          goto LABEL_4;
        case 9:
          if ((*(_BYTE *)(*(void *)(a1 + 376) + 56LL) & 9) == 0)
          {
LABEL_27:
            uint64_t v19 = (unsigned __int8 *)a2 + 10;
            BOOL v20 = (unsigned __int8 *)a4 + 10;
            unint64_t v21 = *((unsigned __int16 *)a2 + 4);
            unint64_t v22 = *((unsigned __int16 *)a4 + 4);
LABEL_28:
            int v12 = apfs_cstrncmp(v19, v20, v21, v22);
            goto LABEL_24;
          }

          unsigned int v30 = *((_DWORD *)a2 + 2);
          unsigned int v31 = *((_DWORD *)a4 + 2);
          if (v30 >> 10 < v31 >> 10) {
            goto LABEL_4;
          }
          if (v30 >> 10 <= v31 >> 10)
          {
            unint64_t v21 = v30 & 0x3FF;
            unint64_t v22 = v31 & 0x3FF;
            uint64_t v19 = (unsigned __int8 *)a2 + 12;
            BOOL v20 = (unsigned __int8 *)a4 + 12;
            goto LABEL_28;
          }

          break;
        case 13:
          unint64_t v32 = a2[1];
          unint64_t v33 = HIBYTE(v32);
          unint64_t v34 = a4[1];
          unint64_t v35 = HIBYTE(v34);
          if (!HIBYTE(v32))
          {
            BOOL v17 = v35 == 0;
            goto LABEL_21;
          }

          if (!v35) {
            break;
          }
          if (v33 != v35)
          {
            if (v33 < v35) {
              int v12 = -1;
            }
            else {
              int v12 = 1;
            }
            goto LABEL_24;
          }

          unint64_t v44 = v32 & 0xFFFFFFFFFFFFFFLL;
          unint64_t v45 = v34 & 0xFFFFFFFFFFFFFFLL;
          if (v44 == 0xFFFFFFFFFFFFFFLL)
          {
            BOOL v17 = v45 == 0xFFFFFFFFFFFFFFLL;
            goto LABEL_21;
          }

          if (v45 == 0xFFFFFFFFFFFFFFLL) {
            break;
          }
          BOOL v25 = v44 >= v45;
          BOOL v39 = v44 == v45;
LABEL_54:
          BOOL v26 = !v39;
LABEL_57:
          if (v25) {
            int v12 = v26;
          }
          else {
            int v12 = -1;
          }
          goto LABEL_24;
        case 16:
          unint64_t v36 = *(void *)((char *)a2 + 12);
          unint64_t v24 = *(void *)((char *)a4 + 12);
          if (!v36) {
            goto LABEL_60;
          }
          if (!v24) {
            break;
          }
          if (v36 < v24) {
            goto LABEL_4;
          }
          if (v36 != v24)
          {
            BOOL v29 = v36 > v24;
LABEL_73:
            int v12 = v29;
            goto LABEL_24;
          }

          unint64_t v37 = *(void *)((char *)a2 + 20);
          unint64_t v24 = *(void *)((char *)a4 + 20);
          if (!v37)
          {
LABEL_60:
            BOOL v17 = v24 == 0;
            goto LABEL_21;
          }

          if (!v24) {
            break;
          }
          if (v37 >= v24)
          {
            int v12 = v37 != v24;
            goto LABEL_24;
          }

          goto LABEL_4;
        case 17:
          unint64_t v38 = *(void *)((char *)a2 + 12);
          unint64_t v24 = *(void *)((char *)a4 + 12);
          if (!v38) {
            goto LABEL_60;
          }
          if (!v24) {
            break;
          }
          BOOL v25 = v38 >= v24;
          BOOL v39 = v38 == v24;
          goto LABEL_54;
        case 19:
          unint64_t v40 = *(void *)((char *)a2 + 12);
          unint64_t v41 = *(void *)((char *)a4 + 12);
          if (v40 < v41) {
            goto LABEL_4;
          }
          if (v40 > v41) {
            break;
          }
          unint64_t v42 = *(void *)((char *)a2 + 20);
          unint64_t v43 = *(void *)((char *)a4 + 20);
          BOOL v29 = v42 > v43;
          if (v42 < v43) {
            goto LABEL_4;
          }
          goto LABEL_73;
        default:
          goto LABEL_24;
      }

LABEL_6:
      int v12 = 1;
      goto LABEL_24;
    }

    uint64_t v6 = 22LL;
    if (a3 >= 0xC && a5 >= 0xC)
    {
      LODWORD(v13) = *((unsigned __int8 *)a2 + 8);
      unsigned int v16 = *((unsigned __int8 *)a4 + 8);
      goto LABEL_16;
    }
  }

  return v6;
}

  unint64_t v40 = 0LL;
  unint64_t v41 = 0LL;
  if (*(void *)(v6 + 88) && obj_type_is_or_contains_ephemeral(*(_DWORD *)(v6 + 72)))
  {
    uint64_t v8 = 0LL;
    if ((*(_DWORD *)(v6 + 104) & 0x10) == 0 && (*(_DWORD *)(v6 + 104) & 6) != 2)
    {
      unsigned int v9 = nx_reaper_obj_get( a1,  *(_DWORD *)(v6 + 72),  *(_DWORD *)(v6 + 76),  *(void *)(v6 + 80),  *(void *)(v6 + 88),  &v39,  &v40);
      if ((_DWORD)v9)
      {
        uint64_t v8 = v9;
        unint64_t v10 = a1[50];
        if (!v10 || !*(_DWORD *)(v10 + 76)) {
          log_err( "%s:%d: %s failed to get object oid %lld: %d\n",  "nx_reaper_checkpoint_traverse",  1207,  (const char *)(a1[48] + 208),  *(void *)(v6 + 88),  v9);
        }
      }

      else
      {
        if (v39) {
          unint64_t v35 = v39;
        }
        else {
          unint64_t v35 = a1;
        }
        uint64_t v8 = obj_checkpoint_traverse((uint64_t)v35, a2, (uint64_t)v40, v4);
        obj_release((uint64_t *)v40);
      }

      if (v39)
      {
        obj_release(v39);
        BOOL v39 = 0LL;
      }
    }
  }

  else
  {
    uint64_t v8 = 0LL;
  }

  if ((_DWORD)v8) {
    return v8;
  }
  unint64_t v11 = *(void *)(v6 + 48);
  if (!v11) {
    return v8;
  }
  unint64_t v37 = *(_DWORD *)(v6 + 68);
  unint64_t v38 = v4;
  do
  {
    int v12 = obj_get(a1[49], 0x80000000, v11, (int *)&nx_reap_list_desc, 0LL, 0LL, 0LL, 0LL, (uint64_t *)&v41);
    if ((_DWORD)v12)
    {
      uint64_t v8 = v12;
      unint64_t v33 = a1[50];
      if (!v33 || !*(_DWORD *)(v33 + 76)) {
        log_err( "%s:%d: %s failed to get reap list object oid %lld: %d\n",  "nx_reaper_checkpoint_traverse",  1227,  (const char *)(a1[48] + 208),  v11,  v12);
      }
      return v8;
    }

    uint64_t v13 = *((void *)v41 + 47);
    if ((_DWORD)v4 == 2)
    {
      uint64_t v14 = obj_checkpoint_known((uint64_t)v41);
      goto LABEL_23;
    }

    if ((_DWORD)v4 == 1)
    {
      uint64_t v14 = obj_checkpoint_start(v41);
LABEL_23:
      uint64_t v8 = v14;
      goto LABEL_25;
    }

    uint64_t v8 = 0LL;
LABEL_25:
    unint64_t v11 = *(void *)(v13 + 32);
    if ((_DWORD)v8) {
      goto LABEL_56;
    }
    uint64_t v15 = *(_DWORD *)(v13 + 52);
    if (v15 == -1) {
      goto LABEL_56;
    }
    unsigned int v16 = -1;
    while (1)
    {
      BOOL v17 = *(_DWORD *)(v13 + 40LL * v15 + 64);
      if (v17 != -1 && v17 > *(_DWORD *)(v13 + 44)) {
        break;
      }
      uint64_t v18 = v13 + 40LL * v15;
      unint64_t v21 = *(_DWORD *)(v18 + 72);
      BOOL v20 = (int *)(v18 + 72);
      uint64_t v19 = v21;
      if ((v21 != *(_DWORD *)(v6 + 72) || *(void *)(v13 + 40LL * v15 + 88) != *(void *)(v6 + 88))
        && (v16 == -1
         || v19 != *(_DWORD *)(v13 + 40LL * v16 + 72)
         || *(void *)(v13 + 64 + 40LL * v15 + 24) != *(void *)(v13 + 64 + 40LL * v16 + 24)))
      {
        uint64_t v8 = 0LL;
        if ((*(_DWORD *)(v13 + 40LL * v15 + 68) & 0x10) != 0 || (*(_DWORD *)(v13 + 40LL * v15 + 68) & 6) == 2) {
          goto LABEL_49;
        }
        if (obj_type_is_or_contains_ephemeral(v19))
        {
          unint64_t v22 = v13 + 40LL * v15;
          unint64_t v24 = *(void *)(v22 + 88);
          unint64_t v23 = (void *)(v22 + 88);
          BOOL v25 = nx_reaper_obj_get(a1, *v20, *((_DWORD *)v23 - 3), *(v23 - 1), v24, &v39, &v40);
          if ((_DWORD)v25)
          {
            uint64_t v8 = v25;
            BOOL v26 = a1[50];
            if (!v26 || !*(_DWORD *)(v26 + 76)) {
              log_err( "%s:%d: %s failed to get object oid %lld: %d\n",  "nx_reaper_checkpoint_traverse",  1287,  (const char *)(a1[48] + 208),  *v23,  v25);
            }
          }

          else
          {
            if (v39) {
              unint64_t v27 = v39;
            }
            else {
              unint64_t v27 = a1;
            }
            uint64_t v8 = obj_checkpoint_traverse((uint64_t)v27, a2, (uint64_t)v40, v38);
            obj_release((uint64_t *)v40);
          }

          if (v39)
          {
            obj_release(v39);
            BOOL v39 = 0LL;
          }

          goto LABEL_49;
        }
      }

      uint64_t v8 = 0LL;
LABEL_49:
      if (!(_DWORD)v8)
      {
        unsigned int v16 = v15;
        uint64_t v15 = v17;
        if (v17 != -1) {
          continue;
        }
      }

      goto LABEL_56;
    }

    unint64_t v28 = a1[50];
    if (!v28 || !*(_DWORD *)(v28 + 76)) {
      log_err( "%s:%d: %s Invalid reap list entry nrl_entries[%d].nrle_next = %d\n",  "nx_reaper_checkpoint_traverse",  1249,  (const char *)(a1[48] + 208),  v15,  v17);
    }
    obj_release((uint64_t *)v41);
    uint64_t v8 = nx_corruption_detected_int((uint64_t)a1);
LABEL_56:
    BOOL v29 = *(_DWORD *)(v6 + 68);
    if (!v29) {
      goto LABEL_68;
    }
    unsigned int v30 = v37 - 1;
    if (v11 && v37 == 1)
    {
      unsigned int v31 = a1[50];
      LODWORD(v4) = v38;
      if (!v31 || !*(_DWORD *)(v31 + 76)) {
        log_err( "%s:%d: %s reap list expected %u objects, but haven't seen last reap list object yet\n",  "nx_reaper_checkpoint_traverse",  1303,  (const char *)(a1[48] + 208),  v29);
      }
      uint64_t v8 = nx_corruption_detected_int((uint64_t)a1);
      unint64_t v37 = 0;
      goto LABEL_69;
    }

    --v37;
    if (v11)
    {
LABEL_68:
      LODWORD(v4) = v38;
      goto LABEL_69;
    }

    LODWORD(v4) = v38;
    if (v30)
    {
      unint64_t v32 = a1[50];
      if (!v32 || !*(_DWORD *)(v32 + 76)) {
        log_warn( "%s:%d: %s reap list expected %u objects, but got last reap list object with %u more objects left\n",  "nx_reaper_checkpoint_traverse",  1308,  (const char *)(a1[48] + 208),  v29,  v37);
      }
    }

uint64_t jfs_get_tree(uint64_t a1, int a2, uint64_t a3, uint64_t *a4)
{
  return jfs_get_tree_in_snap(a1, a2, a3, *(void *)(a1 + 432), a4);
}

uint64_t jfs_get_tree_in_snap(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v58 = *MEMORY[0x1895F89C0];
  extentref_int tree = 0LL;
  switch(a2)
  {
    case 1:
      goto LABEL_59;
    case 2:
      unint64_t v10 = (pthread_mutex_t *)(a1 + 1400);
      pthread_mutex_lock((pthread_mutex_t *)(a1 + 1400));
      unint64_t v11 = *(char **)(a1 + 3568);
      if (v11)
      {
        obj_retain(v11);
        if (a3)
        {
          extentref_int tree = obj_modify(*(void **)(a1 + 3568), 2, a3);
          int v12 = *(uint64_t **)(a1 + 3568);
          if ((_DWORD)extentref_tree)
          {
            obj_release(v12);
            goto LABEL_93;
          }

          *(void *)(*(void *)(a1 + 376) + 144LL) = obj_oid((uint64_t)v12);
        }

        extentref_int tree = 0LL;
        *a5 = *(void *)(a1 + 3568);
      }

      else
      {
        extentref_int tree = apfs_get_extentref_tree(a1, *(void *)(*(void *)(a1 + 376) + 144LL), a3, a5);
        if (!(_DWORD)extentref_tree)
        {
          if (a3) {
            *(void *)(*(void *)(a1 + 376) + 144LL) = obj_oid(*a5);
          }
          unsigned int v30 = (char *)*a5;
          *(void *)(a1 + 3568) = *a5;
          obj_retain(v30);
          extentref_int tree = 0LL;
        }
      }

LABEL_93:
      unint64_t v45 = v10;
      goto LABEL_114;
    case 3:
      unint64_t v10 = (pthread_mutex_t *)(a1 + 1464);
      pthread_mutex_lock((pthread_mutex_t *)(a1 + 1464));
      extentref_int tree = apfs_get_snap_meta_tree(a1, a3, a5);
      if (!(_DWORD)extentref_tree) {
        *(void *)(*(void *)(a1 + 376) + 152LL) = obj_oid(*a5);
      }
      goto LABEL_93;
    case 4:
      uint64_t v13 = *(uint64_t **)(a1 + 3560);
      if (v13)
      {
        obj_retain(*(char **)(a1 + 3560));
        if (!a3) {
          goto LABEL_78;
        }
        uint64_t v14 = obj_modify(v13, 0, a3);
        if (!(_DWORD)v14) {
          goto LABEL_78;
        }
        extentref_int tree = v14;
        obj_release(v13);
      }

      else
      {
        extentref_int tree = 0LL;
      }

LABEL_78:
        extentref_int tree = 0LL;
        *a5 = (uint64_t)v13;
      }

      return extentref_tree;
    default:
      return 22LL;
  }

uint64_t match_jobj_type_to_tree_type(uint64_t a1, unsigned int a2, int a3)
{
  if (a2 < 0x10)
  {
    unsigned __int8 v4 = 3;
    switch(a2)
    {
      case 1u:
      case 0xBu:
        return v4;
      case 2u:
        return 2;
      case 6u:
      case 7u:
        goto LABEL_5;
      case 8u:
        if ((*(_BYTE *)(*(void *)(a1 + 376) + 56LL) & 0x20) == 0)
        {
LABEL_5:
          if (a3 == 100) {
            return 1;
          }
          if (a3 == 101)
          {
            if ((*(_BYTE *)(*(void *)(a1 + 376) + 57LL) & 1) == 0) {
              panic("Requested forced secondary_fs_root but the tree is missing\n");
            }
          }

          else
          {
            if (!apfs_has_secondary_fsroot(a1)) {
              return a3;
            }
            if (a3 != 1) {
              panic("type = %u, req_tree != fs_root\n", a2);
            }
          }

          return 8;
        }

        if (a3 != 1) {
          panic("sealed, fext, req_tree != fs_root");
        }
        unsigned __int8 v4 = 5;
        break;
      default:
        return a3;
    }
  }

  else if ((*(_BYTE *)(*(void *)(a1 + 376) + 57LL) & 2) != 0)
  {
    if ((a2 & 0xFC) == 0x10)
    {
      if (apfs_has_secondary_fsroot(a1)) {
        return 8;
      }
      else {
        return 1;
      }
    }

    else
    {
      log_warn( "%s:%d: %s Warning: attempting to place unknown expanded type %hhu into fsroot.\n",  "match_jobj_expanded_type_to_tree_type",  4214,  (const char *)(a1 + 3992),  a2);
      return 1;
    }
  }

  else
  {
    log_err( "%s:%d: %s expanded obj type %hhu found on unsupported volume\n",  "match_jobj_expanded_type_to_tree_type",  4193,  (const char *)(a1 + 3992),  a2);
    return 0;
  }

  return v4;
}

unsigned __int16 *key_val_to_jobj( uint64_t a1, uint64_t a2, unint64_t a3, unsigned __int16 *a4, unint64_t a5)
{
  uint64_t v12 = *(void *)a2 >> 60;
  LODWORD(v13) = 40;
  switch((int)v12)
  {
    case 1:
      if (!a4) {
        return 0LL;
      }
      uint64_t v14 = a4[24];
      uint64_t v15 = 80LL;
      goto LABEL_32;
    case 2:
      goto LABEL_36;
    case 3:
      LODWORD(v13) = 648;
      goto LABEL_36;
    case 4:
      if (!a4) {
        return 0LL;
      }
      uint64_t v14 = *(unsigned __int16 *)(a2 + 8) + 24LL;
      uint64_t v15 = a4[1];
      goto LABEL_32;
    case 5:
      if (!a4) {
        return 0LL;
      }
      uint64_t v14 = a4[4];
      goto LABEL_18;
    case 6:
    case 12:
      LODWORD(v13) = 24;
      goto LABEL_36;
    case 7:
      if (!a4) {
        return 0LL;
      }
      if (a4[2] == 6) {
        uint64_t v14 = HIBYTE(a4[11]) + a4[11];
      }
      else {
        uint64_t v14 = a4[11];
      }
LABEL_18:
      uint64_t v15 = 40LL;
      goto LABEL_32;
    case 8:
      LODWORD(v13) = 56;
      goto LABEL_36;
    case 9:
      if ((*(_BYTE *)(*(void *)(a1 + 376) + 56LL) & 9) != 0)
      {
        LODWORD(v13) = (*(_DWORD *)(a2 + 8) & 0x3FF) + 72;
        goto LABEL_36;
      }

      uint64_t v14 = *(unsigned __int16 *)(a2 + 8);
      uint64_t v15 = 72LL;
LABEL_32:
      unint64_t v25 = v14 + v15;
      LODWORD(v13) = (unsigned __int16)v25;
      if (v25 >> 16) {
        BOOL v26 = 1;
      }
      else {
        BOOL v26 = (unsigned __int16)v25 == 0;
      }
      if (!v26) {
        goto LABEL_36;
      }
      return 0LL;
    case 10:
      LODWORD(v13) = 96;
      goto LABEL_36;
    case 11:
      uint64_t v14 = *(unsigned __int16 *)(a2 + 8);
      uint64_t v15 = 32LL;
      goto LABEL_32;
    case 13:
      if (!a4) {
        return 0LL;
      }
      int v16 = *(unsigned __int8 *)(a2 + 15);
      if (v16 == 2)
      {
        LODWORD(v13) = 80;
      }

      else
      {
        if (v16 != 1) {
          return 0LL;
        }
        LODWORD(v13) = *((unsigned __int8 *)a4 + 2) + 32;
      }

      goto LABEL_36;
    case 14:
      int v17 = *(_DWORD *)(a2 + 8);
      if ((v17 - 16) >= 4u)
      {
        BOOL is_panic_on_corruption_enabled = nx_is_panic_on_corruption_enabled(*(void *)(a1 + 392));
        log_corrupt( is_panic_on_corruption_enabled,  "%s:%d: %s *** unknown expanded obj type %hhu\n",  v19,  v20,  v21,  v22,  v23,  v24,  (char)"jobj_size_for_large_key_val");
        return 0LL;
      }

      unint64_t v13 = (0x48006000200050uLL >> (16 * (v17 - 16))) & 0x78;
LABEL_36:
      if (v12 == 14)
      {
        LODWORD(v27) = *(unsigned __int8 *)(a2 + 8);
        if (v27 <= 0xF)
        {
          log_err("%s:%d: unknown expanded type (%hhu) on record (%u)\n");
          return 0LL;
        }
      }

      else
      {
        uint64_t v27 = *(void *)a2 >> 60;
      }

      switch((int)v27)
      {
        case 1:
          unint64_t v10 = (unsigned __int16 *)_apfs_calloc(1uLL, 0x50uLL);
          if (!v10) {
            return v10;
          }
          unsigned int v30 = _apfs_calloc(1uLL, v13 - 80LL);
          *((void *)v10 + 9) = v30;
          if (v30) {
            goto LABEL_64;
          }
          unsigned int v31 = v10;
          uint64_t v32 = 80LL;
          goto LABEL_54;
        case 2:
          size_t v29 = 40LL;
          goto LABEL_62;
        case 3:
          uint64_t v28 = (unsigned __int16 *)_apfs_zalloc(2u);
          goto LABEL_63;
        case 4:
        case 5:
        case 7:
        case 11:
          goto LABEL_42;
        case 6:
        case 12:
          size_t v29 = 24LL;
          goto LABEL_62;
        case 8:
          size_t v29 = 56LL;
          goto LABEL_62;
        case 9:
          unint64_t v10 = (unsigned __int16 *)_apfs_calloc(1uLL, 0x48uLL);
          if (!v10) {
            return v10;
          }
          BOOL v33 = _apfs_malloc(v13 - 72LL);
          *((void *)v10 + 8) = v33;
          if (v33) {
            goto LABEL_64;
          }
          unsigned int v31 = v10;
          uint64_t v32 = 72LL;
LABEL_54:
          _apfs_free(v31, v32);
          return 0LL;
        case 10:
        case 18:
          size_t v29 = 96LL;
          goto LABEL_62;
        case 13:
          uint64_t v34 = HIBYTE(*(void *)(a2 + 8));
          if ((_DWORD)v34 == 2) {
            goto LABEL_58;
          }
          if ((_DWORD)v34 != 1)
          {
            log_err("%s:%d: *** Unknown file info type %llu\n");
            return 0LL;
          }

LABEL_42:
          uint64_t v28 = (unsigned __int16 *)_apfs_malloc(v13);
LABEL_63:
          unint64_t v10 = v28;
          if (!v28) {
            return v10;
          }
LABEL_64:
          unint64_t v35 = *(void *)a2;
          uint64_t v36 = *(void *)a2 & 0xFFFFFFFFFFFFFFFLL;
          *((void *)v10 + 1) = v36;
          v35 >>= 60;
          *(_BYTE *)unint64_t v10 = v35;
          *((_BYTE *)v10 + 1) = 1;
          v10[1] = v13;
          switch((int)v35)
          {
            case 1:
              *((_OWORD *)v10 + 1) = *(_OWORD *)a4;
              *((_OWORD *)v10 + 2) = *((_OWORD *)a4 + 1);
              *((void *)v10 + 6) = *((void *)a4 + 4);
              *((void *)v10 + 7) = *((void *)a4 + 5);
              size_t v37 = a4[24];
              v10[32] = v37;
              uint64_t v38 = (char *)*((void *)v10 + 9);
              uint64_t v39 = (const char *)(a4 + 25);
              goto LABEL_72;
            case 2:
              uint64_t v40 = *((void *)a4 + 1);
              uint64_t v41 = *(void *)a4 & 0xFFFFFFFFFFFFFFFLL;
              *((_BYTE *)v10 + 1) = *(void *)a4 >> 60;
              *((_DWORD *)v10 + 8) = *((_DWORD *)a4 + 4);
              *((void *)v10 + 2) = v41;
              *((void *)v10 + 3) = v40;
              return v10;
            case 3:
              *((void *)v10 + 2) = *(void *)a4;
              *((void *)v10 + 3) = *((void *)a4 + 1);
              *((void *)v10 + 4) = *((void *)a4 + 2);
              *((void *)v10 + 5) = *((void *)a4 + 3);
              *((void *)v10 + 6) = *((void *)a4 + 4);
              *((void *)v10 + 7) = *((void *)a4 + 5);
              *((_DWORD *)v10 + 18) = *((_DWORD *)a4 + 14);
              *((void *)v10 + 8) = *((void *)a4 + 6);
              *((_DWORD *)v10 + 19) = *((_DWORD *)a4 + 15);
              *((_DWORD *)v10 + 20) = *((_DWORD *)a4 + 16);
              *((_DWORD *)v10 + 21) = *((_DWORD *)a4 + 17);
              *((_DWORD *)v10 + 22) = *((_DWORD *)a4 + 18);
              *((_DWORD *)v10 + 23) = *((_DWORD *)a4 + 19);
              v10[48] = a4[40];
              v10[49] = a4[41];
              *((void *)v10 + 13) = *(void *)(a4 + 42);
              if (a5 < 0x5D) {
                return v10;
              }
              if (xf_init_with_blob(v10 + 204, a4 + 46, a5 - 92))
              {
                log_debug("%s:%d: failed to init extended fields on inode %lld from blob (xfret %d).\n");
                return v10;
              }

              uint64_t v61 = v10[204];
              if (!v10[204]) {
                return v10;
              }
              int v62 = 0;
              uint64_t v63 = (_WORD *)(*((void *)v10 + 52) + 2LL);
              break;
            case 4:
              size_t v42 = *(unsigned __int16 *)(a2 + 8);
              v10[10] = v42;
              strlcpy((char *)v10 + 24, (const char *)(a2 + 10), v42);
              *((_DWORD *)v10 + 4) = *a4;
              size_t v43 = a4[1];
              v10[11] = v43;
              unint64_t v44 = (char *)v10 + v10[10] + 24;
              unint64_t v45 = a4 + 2;
              goto LABEL_87;
            case 5:
              uint64_t v46 = *(void *)a4;
              *((void *)v10 + 2) = *(void *)(a2 + 8);
              *((void *)v10 + 3) = v46;
              size_t v37 = a4[4];
              v10[16] = v37;
              uint64_t v38 = (char *)(v10 + 17);
              uint64_t v39 = (const char *)(a4 + 5);
LABEL_72:
              strlcpy(v38, v39, v37);
              return v10;
            case 6:
              *((_DWORD *)v10 + 4) = *(_DWORD *)a4;
              return v10;
            case 7:
              *((_DWORD *)v10 + 4) = *(_DWORD *)a4;
              LODWORD(v47) = a4[11];
              int v49 = a4[2];
              __int16 v48 = a4 + 2;
              unint64_t v44 = (char *)(v10 + 10);
              if (v49 == 6) {
                uint64_t v47 = (v47 >> 8) + v47;
              }
              else {
                uint64_t v47 = v47;
              }
              size_t v43 = v47 + 20;
              unint64_t v45 = v48;
              goto LABEL_87;
            case 8:
              *((void *)v10 + 2) = *(void *)(a2 + 8);
              uint64_t v50 = *(void *)a4;
              *((void *)v10 + 5) = *(void *)a4 & 0xFFFFFFFFFFFFFFLL;
              *(_OWORD *)(v10 + 12) = *(_OWORD *)(a4 + 4);
              *((_BYTE *)v10 + 48) = HIBYTE(v50);
              return v10;
            case 9:
              if ((*(_BYTE *)(*(void *)(a1 + 376) + 56LL) & 9) != 0)
              {
                unsigned int v51 = *(_DWORD *)(a2 + 8);
                *((_DWORD *)v10 + 14) = v51 >> 10;
                v10[31] = v51 & 0x3FF;
                __int128 v52 = (char *)*((void *)v10 + 8);
                __int128 v53 = (const char *)(a2 + 12);
                size_t v54 = v51 & 0x3FF;
              }

              else
              {
                *((_DWORD *)v10 + 14) = 0;
                size_t v54 = *(unsigned __int16 *)(a2 + 8);
                v10[31] = v54;
                __int128 v52 = (char *)*((void *)v10 + 8);
                __int128 v53 = (const char *)(a2 + 10);
              }

              strlcpy(v52, v53, v54);
              *((void *)v10 + 2) = *(void *)a4;
              *((void *)v10 + 3) = *((void *)a4 + 1);
              v10[30] = a4[8];
              uint64_t v59 = v10 + 16;
              if (a5 < 0x13)
              {
                xf_init((uint64_t)v59, 0LL);
              }

              else if (xf_init_with_blob(v59, a4 + 9, a5 - 18))
              {
                log_debug("%s:%d: failed to init extended fields on drec %lld from blob.\n");
              }

              return v10;
            case 10:
              *(_OWORD *)(v10 + 12) = *(_OWORD *)a4;
              *((int8x16_t *)v10 + 3) = vextq_s8(*((int8x16_t *)a4 + 1), *((int8x16_t *)a4 + 1), 8uLL);
              return v10;
            case 11:
              size_t v55 = *(unsigned __int16 *)(a2 + 8);
              v10[12] = v55;
              strlcpy((char *)v10 + 26, (const char *)(a2 + 10), v55);
              goto LABEL_83;
            case 12:
LABEL_83:
              *((void *)v10 + 2) = *(void *)a4;
              return v10;
            case 13:
              unint64_t v56 = *(void *)(a2 + 8);
              *((_BYTE *)v10 + 16) = HIBYTE(v56);
              *((void *)&v57 + 1) = *(void *)(a2 + 8);
              *(void *)&__int128 v57 = v56;
              *((void *)v10 + 2) = v57 >> 56;
              if (HIBYTE(v56) == 2)
              {
                *((void *)v10 + 3) = *(void *)a4;
                *((void *)v10 + 4) = *((void *)a4 + 1);
                *((void *)v10 + 5) = *((void *)a4 + 2);
                v10[24] = a4[12];
                if (a5 < 0x1B)
                {
                  log_err( "%s:%d: %s s_hash <%llu> finfo attribution tag value <%zu> is less than sizeof(j_file_attribution_tag_val_t) <%lu\n");
                  return v10;
                }

                int v60 = xf_init_with_blob(v10 + 28, a4 + 13, a5 - 26);
                if (v60)
                {
                  strerror(v60);
                  log_debug( "%s:%d: failed to init extended fields on attribution tag record with objid <%lld> from blob due to error <%d> %s\n");
                  return v10;
                }

                uint64_t v65 = v10[28];
                if (v10[28])
                {
                  int v66 = 0;
                  for (CFIndex i = (unsigned __int16 *)(*((void *)v10 + 8) + 2LL); ; i += 2)
                  {
                    int v68 = *i;
                    if (*((_BYTE *)i - 2) == 1) {
                      break;
                    }
                    v66 += (v68 + 7) & 0x1FFF8;
                    if (!--v65) {
                      return v10;
                    }
                  }

                  if ((__int16)*i <= 0) {
                    log_err( "%s:%d: %s size (%d) of FILE_INFO_TAG_EXT_TYPE_SIGNING_ID in attribution tag record with s_hash <%llu> <= 0 \n");
                  }
                  else {
                    *(_BYTE *)(*((void *)v10 + 9) + v66 + v68 - 1) = 0;
                  }
                }
              }

              else if (HIBYTE(v56) == 1)
              {
                v10[12] = *a4;
                size_t v43 = *((unsigned __int8 *)a4 + 2);
                *((_BYTE *)v10 + 26) = v43;
                unint64_t v44 = (char *)v10 + 27;
                unint64_t v45 = (unsigned __int16 *)((char *)a4 + 3);
LABEL_87:
                memcpy(v44, v45, v43);
              }

              return v10;
            case 14:
              if (a3 < 0xC) {
                goto LABEL_91;
              }
              uint64_t v36 = *((void *)v10 + 1);
LABEL_91:
              uint64_t v58 = log_err( "%s:%d: %s cannot translate key-val (%llu) into valid jobj\n",  "key_val_to_jobj",  4923,  (const char *)(a1 + 3992),  v36);
              jobj_release((uint64_t)v58, (unsigned __int8 *)v10);
              return 0LL;
            default:
              return v10;
          }

          break;
        case 16:
LABEL_58:
          size_t v29 = 80LL;
          goto LABEL_62;
        case 17:
          size_t v29 = 32LL;
          goto LABEL_62;
        case 19:
          size_t v29 = 72LL;
LABEL_62:
          uint64_t v28 = (unsigned __int16 *)_apfs_calloc(1uLL, v29);
          goto LABEL_63;
        default:
          log_err("%s:%d: *** Can't allocate unknown obj type %d\n");
          return 0LL;
      }

      break;
    default:
      log_err("%s:%d: *** unknown obj type %d\n");
      return 0LL;
  }

  while (1)
  {
    int v64 = (unsigned __int16)*v63;
    if (*((_BYTE *)v63 - 2) == 4)
    {
      if (*v63) {
        break;
      }
    }

    v63 += 2;
    v62 += (v64 + 7) & 0x1FFF8;
    if (!--v61) {
      return v10;
    }
  }

  *(_BYTE *)(*((void *)v10 + 53) + v62 + v64 - 1) = 0;
  return v10;
}

uint64_t large_key_val_to_jobj(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, unint64_t a5)
{
  unsigned int v5 = *(unsigned __int8 *)(a3 + 8);
  if (v5 > 0xF)
  {
    uint64_t v6 = a2;
    *(_BYTE *)a2 = v5;
    switch(v5)
    {
      case 0x10u:
        *(_OWORD *)(a2 + 16) = *(_OWORD *)(a3 + 12);
        *(void *)(a2 + 32) = *a4;
        *(void *)(a2 + 40) = a4[1];
        *(_DWORD *)(a2 + 48) = *((_DWORD *)a4 + 4);
        *(_DWORD *)(a2 + 52) = *((_DWORD *)a4 + 5);
        uint64_t v7 = (unsigned __int16 *)(a2 + 56);
        if (a5 < 0x19) {
          goto LABEL_15;
        }
        break;
      case 0x11u:
        uint64_t v8 = *a4;
        *(void *)(a2 + 16) = *(void *)(a3 + 12);
        *(void *)(a2 + 24) = v8;
        break;
      case 0x12u:
        *(void *)(a2 + 16) = a4[3];
        *(void *)(a2 + 24) = *a4;
        *(void *)(a2 + 32) = a4[1];
        *(void *)(a2 + 40) = a4[2];
        *(void *)(a2 + 56) = a4[4];
        *(void *)(a2 + 48) = a4[5];
        *(_DWORD *)(a2 + 92) = *((_DWORD *)a4 + 12);
        uint64_t v7 = (unsigned __int16 *)(a2 + 64);
        if (a5 < 0x35) {
          goto LABEL_15;
        }
        break;
      case 0x13u:
        *(_OWORD *)(a2 + 16) = *(_OWORD *)(a3 + 12);
        *(void *)(a2 + 32) = *a4 & 0xFFFFFFFFFFFFFFLL;
        *(_DWORD *)(a2 + 40) = *((unsigned __int8 *)a4 + 7);
        uint64_t v7 = (unsigned __int16 *)(a2 + 48);
        if (a5 < 9)
        {
LABEL_15:
          xf_init((uint64_t)v7, 0LL);
        }

        else if (xf_init_with_blob(v7, (unsigned __int16 *)a4 + 4, a5 - 8))
        {
          log_err("%s:%d: %s failed to init extended fields on clone mapping <%llu/%llu> from blob\n");
        }

        break;
      default:
        return v6;
    }
  }

  else
  {
    log_err( "%s:%d: %s unknown expanded type (%hhu) on record (%u)\n",  "large_key_val_to_jobj",  4494,  (const char *)(a1 + 3992),  *(unsigned __int8 *)(a3 + 8),  *(void *)a3 >> 60);
    return 0LL;
  }

  return v6;
}

uint64_t lookup_jobj(uint64_t a1, int a2, uint64_t *a3, unsigned __int8 *a4, unsigned __int16 **a5)
{
  return lookup_jobj_in_snap(a1, a2, a3, a4, *(void *)(a1 + 432), a5);
}

uint64_t lookup_jobj_in_snap( uint64_t a1, int a2, uint64_t *a3, unsigned __int8 *a4, uint64_t a5, unsigned __int16 **a6)
{
  int matched = match_jobj_type_to_tree_type(a1, *a4, a2);
  uint64_t v12 = _apfs_zalloc(3u);
  if (!v12) {
    return 12LL;
  }
  uint64_t v13 = (uint64_t)v12;
  unsigned int v18 = 832;
  unsigned int v19 = 3808;
  make_jkey_from_jobj(a1, a4, (uint64_t)v12, (int *)&v18);
  int v17 = 0LL;
  uint64_t tree_in_snap = jfs_get_tree_in_snap(a1, matched, 0LL, a5, (uint64_t *)&v17);
  if ((_DWORD)tree_in_snap)
  {
    uint64_t v15 = tree_in_snap;
LABEL_6:
    _apfs_zfree((void *)v13, 3u);
    return v15;
  }

  uint64_t v15 = bt_lookup_variant((uint64_t)v17, a5, (unint64_t *)v13, &v18, 0x340u, (void *)(v13 + 832), &v19, 0, 0, a3);
  obj_release(v17);
  if ((_DWORD)v15) {
    goto LABEL_6;
  }
  *a6 = key_val_to_jobj(a1, v13, v18, (unsigned __int16 *)(v13 + 832), v19);
  _apfs_zfree((void *)v13, 3u);
  if (*a6) {
    return 0LL;
  }
  else {
    return nx_corruption_detected_int(*(void *)(a1 + 392));
  }
}

uint64_t initialize_phys_range_lock_state(uint64_t a1, unsigned int a2)
{
  *(void *)(a1 + 96) = 0LL;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  uint64_t v4 = a2;
  *(_DWORD *)(a1 + 92) = a2;
  unsigned int v5 = _apfs_calloc(a2, 0x10uLL);
  *(void *)a1 = v5;
  if (v5)
  {
    size_t v6 = (a2 + 63) >> 6;
    *(_DWORD *)(a1 + 88) = v6;
    uint64_t v7 = _apfs_calloc(v6, 8uLL);
    *(void *)(a1 + 72) = v7;
    if (v7)
    {
      uint64_t v8 = _apfs_calloc(*(unsigned int *)(a1 + 88), 8uLL);
      *(void *)(a1 + 80) = v8;
      if (v8)
      {
        new_lock((pthread_mutex_t *)(a1 + 8));
        return 0LL;
      }

      _apfs_free(*(void **)a1, 16 * v4);
      unint64_t v10 = *(void **)(a1 + 72);
      uint64_t v11 = 8LL * *(unsigned int *)(a1 + 88);
    }

    else
    {
      unint64_t v10 = *(void **)a1;
      uint64_t v11 = 16 * v4;
    }

    _apfs_free(v10, v11);
  }

  return 12LL;
}

uint64_t release_phys_range_lock_state(uint64_t a1)
{
  return free_lock((pthread_mutex_t *)(a1 + 8));
}

uint64_t apfs_cstrncmp(unsigned __int8 *a1, unsigned __int8 *a2, unint64_t a3, unint64_t a4)
{
  if (a3 >= a4) {
    unint64_t v4 = a4;
  }
  else {
    unint64_t v4 = a3;
  }
  unint64_t v5 = v4 - 2;
  if (v4 < 2)
  {
LABEL_11:
    if (a3 < a4) {
      LODWORD(v7) = -1;
    }
    else {
      LODWORD(v7) = 1;
    }
    if (a3 == a4) {
      return 0LL;
    }
    else {
      return v7;
    }
  }

  else
  {
    while (1)
    {
      int v6 = *a1;
      uint64_t v7 = v6 - *a2;
      if ((_DWORD)v7) {
        break;
      }
      ++a1;
      ++a2;
      if (v6) {
        BOOL v8 = v5 == 0;
      }
      else {
        BOOL v8 = 1;
      }
      --v5;
      if (v8) {
        goto LABEL_11;
      }
    }
  }

  return v7;
}

uint64_t apfs_check_for_spillover()
{
  return 0LL;
}

void fs_sb_dirty(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(a1 + 476) & 4) != 0)
  {
    uint64_t v4 = *(void *)(a1 + 376);
    if ((*(_BYTE *)(v4 + 264) & 4) == 0)
    {
      unint64_t v5 = (unint64_t *)(v4 + 264);
      do
        unint64_t v6 = __ldxr(v5);
      while (__stxr(v6 | 4, v5));
    }

    pthread_mutex_lock((pthread_mutex_t *)(a1 + 1272));
    *(void *)(a1 + 472) &= ~0x400000000uLL;
    pthread_mutex_unlock((pthread_mutex_t *)(a1 + 1272));
  }

  *(void *)(*(void *)(a1 + 376) + 1056LL) = a2;
  obj_dirty(a1, a2, 0LL);
}

uint64_t evict_mapping_key_compare(uint64_t a1, void *a2, uint64_t a3, void *a4, uint64_t a5, int *a6)
{
  int v6 = *a2 > *a4;
  if (*a2 < *a4) {
    int v6 = -1;
  }
  *a6 = v6;
  return 0LL;
}

uint64_t apfs_free_data_blocks(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  if (*(void *)(a1 + 496)) {
    uint64_t v7 = *(void *)(a1 + 496);
  }
  else {
    uint64_t v7 = a1;
  }
  uint64_t v8 = spaceman_free((const char *)v7, 0LL, a3, a4, a2);
  uint64_t v9 = v8;
  if ((_DWORD)v8)
  {
    unint64_t v10 = strerror(v8);
    log_err( "%s:%d: %s spaceman_free failed for LBA %llx, size %llu : %d %s\n",  "apfs_free_data_blocks",  31970,  (const char *)(v7 + 3992),  a3,  a4,  v9,  v10);
  }

  else
  {
    uint64_t v11 = (unint64_t *)(*(void *)(v7 + 376) + 232LL);
    do
      unint64_t v12 = __ldxr(v11);
    while (__stxr(v12 + a4, v11));
    fs_sb_dirty(v7, a2);
  }

  return v9;
}

BOOL fs_is_fully_unencrypted(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 496);
  if (!v1) {
    uint64_t v1 = a1;
  }
  return (*(_BYTE *)(*(void *)(v1 + 376) + 264LL) & 1) != 0 && *(void *)(*(void *)(a1 + 376) + 976LL) == 0LL;
}

uint64_t xf_init(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = 0LL;
  *(void *)(a1 + 8) = 0LL;
  *(void *)(a1 + 16) = 0LL;
  if (a2)
  {
    __int16 v2 = a2;
    *(_WORD *)(a1 + 2) = 4;
    uint64_t v4 = _apfs_malloc(0x10uLL);
    *(void *)(a1 + 8) = v4;
    if (!v4) {
      *(_WORD *)(a1 + 2) = 0;
    }
    *(_WORD *)(a1 + 6) = (v2 + 7) & 0xFFF8;
    unint64_t v5 = _apfs_malloc((unsigned __int16)(v2 + 7) & 0xFFF8);
    *(void *)(a1 + 16) = v5;
    if (!v5) {
      *(_WORD *)(a1 + 6) = 0;
    }
  }

  return 0LL;
}

uint64_t xf_init_with_blob(unsigned __int16 *a1, unsigned __int16 *a2, unint64_t a3)
{
  *(void *)a1 = 0LL;
  *((void *)a1 + 1) = 0LL;
  *((void *)a1 + 2) = 0LL;
  if (a3 < 4) {
    return 28LL;
  }
  uint64_t v6 = *a2;
  *a1 = v6;
  uint64_t v7 = a2[1];
  a1[2] = v7;
  a1[1] = v6;
  if (v7 + 4 * v6 + 4 > a3) {
    goto LABEL_10;
  }
  if ((_DWORD)v6)
  {
    unsigned int v8 = 0;
    uint64_t v9 = a2 + 3;
    uint64_t v10 = v6;
    while (v7 > v8)
    {
      signed int v11 = *v9;
      v8 += (v11 + 7) & 0x1FFF8;
      v9 += 2;
      if (!--v10) {
        goto LABEL_9;
      }
    }

    goto LABEL_10;
  }

uint64_t xf_get_from_blob( unsigned __int16 *a1, unint64_t a2, int a3, _DWORD *a4, void *a5, _DWORD *a6)
{
  if (a2 < 4) {
    return 28LL;
  }
  uint64_t v7 = *a1;
  uint64_t v8 = a1[1];
  if (v8 + 4 * v7 + 4 > a2) {
    return 22LL;
  }
  if (*a1)
  {
    unsigned int v9 = 0;
    uint64_t v10 = (uint64_t)&a1[2 * v7 + 2];
    for (CFIndex i = a1 + 3; ; i += 2)
    {
      int v12 = *i;
      if (*((unsigned __int8 *)i - 2) == a3)
      {
        if (a4) {
          *a4 = *((unsigned __int8 *)i - 1);
        }
        if (a6) {
          *a6 = v12;
        }
        uint64_t result = 0LL;
        *a5 = v10 + v9;
        return result;
      }

      v9 += (v12 + 7) & 0x1FFF8;
      if (!--v7) {
        return 2LL;
      }
    }

    return 22LL;
  }

  return 2LL;
}

uint64_t xf_release(uint64_t a1)
{
  *(void *)a1 = 0LL;
  *(void *)(a1 + 8) = 0LL;
  *(void *)(a1 + 16) = 0LL;
  return 0LL;
}

uint64_t new_lock(pthread_mutex_t *a1)
{
  return pthread_mutex_init(a1, 0LL);
}

uint64_t new_rwlock(pthread_rwlock_t *a1)
{
  return pthread_rwlock_init(a1, 0LL);
}

uint64_t new_cv(pthread_cond_t *a1)
{
  return pthread_cond_init(a1, 0LL);
}

pthread_cond_t *free_cv(pthread_cond_t *result)
{
  if (result) {
    return (pthread_cond_t *)pthread_cond_destroy(result);
  }
  return result;
}

uint64_t cv_wait(pthread_cond_t *a1, pthread_mutex_t *a2, uint64_t a3, uint64_t a4, timespec *a5)
{
  if (!a5) {
    return pthread_cond_wait(a1, a2);
  }
  v15.__darwin_time_t tv_sec = 0LL;
  v15.uint64_t tv_nsec = 0LL;
  clock_gettime(_CLOCK_REALTIME, &v15);
  BOOL v8 = __OFADD__(a5->tv_sec, v15.tv_sec);
  __darwin_time_t v9 = a5->tv_sec + v15.tv_sec;
  a5->__darwin_time_t tv_sec = v9;
  if (v8) {
    return 35LL;
  }
  uint64_t tv_nsec = a5->tv_nsec;
  BOOL v8 = __OFADD__(tv_nsec, v15.tv_nsec);
  unint64_t v12 = tv_nsec + v15.tv_nsec;
  if (v8) {
    unint64_t v12 = 999999999LL;
  }
  a5->uint64_t tv_nsec = v12;
  if (v12 > 0x3B9ACA00)
  {
    unint64_t v13 = v12 - 1000000000;
    unint64_t v14 = (v13 - 1) / 0x3B9ACA00;
    a5->__darwin_time_t tv_sec = v9 + v14 + 1;
    a5->uint64_t tv_nsec = v13 - 1000000000 * v14;
  }

  LODWORD(va_start(va, result) = pthread_cond_timedwait(a1, a2, a5);
  if ((_DWORD)result == 60) {
    return 35LL;
  }
  else {
    return result;
  }
}

uint64_t cv_wait_rw(pthread_cond_t *a1, pthread_mutex_t *a2, uint64_t a3, timespec *a4)
{
  return cv_wait(a1, a2, a3, (uint64_t)a4, a4);
}

uint64_t btree_node_space_stats(void *a1, _DWORD *a2, _DWORD *a3, int *a4)
{
  unint64_t v5 = (unsigned __int16 *)a1[7];
  *a2 = (a1[50] >> 27) & 0x1F000;
  LODWORD(v5) = v5[25] + v5[23] + v5[27];
  *a3 = (_DWORD)v5;
  BOOL v6 = *a2 >= v5;
  int v7 = *a2 - (_DWORD)v5;
  if (v6)
  {
    uint64_t result = 0LL;
  }

  else
  {
    uint64_t v11 = a1[1];
    if (v11) {
      unint64_t v12 = (const char *)(v11 + 3992);
    }
    else {
      unint64_t v12 = (const char *)(*(void *)(*(void *)(*a1 + 392LL) + 384LL) + 208LL);
    }
    uint64_t v14 = obj_oid((uint64_t)a1);
    log_err( "%s:%d: %s oid 0x%llx (level %d): freespace %u larger than nodespace %u\n",  "btree_node_space_stats",  52,  v12,  v14,  *(unsigned __int16 *)(a1[7] + 34LL),  *a3,  *a2);
    int v7 = 0;
    uint64_t result = 22LL;
  }

  *a4 = v7;
  return result;
}

uint64_t btree_node_debug_stats(uint64_t a1, void *a2, unsigned int a3, uint64_t a4)
{
  uint64_t v7 = a2[7];
  if ((*(_WORD *)(v7 + 32) & 2) != 0)
  {
    ++*(_DWORD *)(a4 + 4);
    *(_DWORD *)(a4 + 16) += *(_DWORD *)(v7 + 36);
  }

  else
  {
    ++*(_DWORD *)a4;
    *(_DWORD *)(a4 + 12) += *(_DWORD *)(v7 + 36);
  }

  if (*(_DWORD *)(a4 + 8) < a3) {
    *(_DWORD *)(a4 + 8) = a3;
  }
  unint64_t v8 = *(unsigned __int16 *)(v7 + 34);
  if (v8 <= 0xF) {
    ++*(_DWORD *)(a4 + 4 * v8 + 216);
  }
  uint64_t v9 = btree_node_sanity_check(a2, 0LL);
  if (!(_DWORD)v9)
  {
    unsigned int v33 = 0;
    unsigned int v31 = 0;
    int v32 = 0;
    uint64_t v9 = btree_node_space_stats(a2, &v33, &v32, (int *)&v31);
    uint64_t v10 = v31;
    uint64_t v11 = v33;
    uint64_t v12 = 5 * v31 / v33;
    ++*(_DWORD *)(a4 + 4LL * v12 + 20);
    uint64_t v13 = *(void *)(a4 + 56) + v10;
    *(void *)(a4 + 48) += v11;
    *(void *)(a4 + 56) = v13;
    if ((*(_BYTE *)(a2[7] + 32LL) & 2) != 0)
    {
      ++*(_DWORD *)(a4 + 4 * v12 + 104);
      uint64_t v15 = *(void *)(a4 + 136);
      *(void *)(a4 + 128) += v11;
      *(void *)(a4 + 136) = v15 + v10;
      if (*(_DWORD *)(v7 + 36))
      {
        unsigned int v16 = 0;
        do
        {
          unsigned int v17 = btree_node_key_len((uint64_t)a2, (unsigned __int16)v16);
          unsigned int v18 = btree_node_val_len((uint64_t)a2, (unsigned __int16)v16);
          uint64_t v19 = *(void *)(a1 + 392);
          if (*(_DWORD *)(v19 + 16) < v17)
          {
            if ((_DWORD)v9) {
              uint64_t v9 = v9;
            }
            else {
              uint64_t v9 = 22LL;
            }
            uint64_t v20 = a2[1];
            if (v20) {
              uint64_t v21 = (const char *)(v20 + 3992);
            }
            else {
              uint64_t v21 = (const char *)(*(void *)(*(void *)(*a2 + 392LL) + 384LL) + 208LL);
            }
            uint64_t v22 = obj_oid((uint64_t)a2);
            log_err( "%s:%d: %s oid 0x%llx (level %d): index %d key length %d longer than tree longest %d\n",  "btree_node_debug_stats",  110,  v21,  v22,  *(unsigned __int16 *)(a2[7] + 34LL),  v16,  v17,  *(_DWORD *)(*(void *)(a1 + 392) + 16LL));
            uint64_t v19 = *(void *)(a1 + 392);
            unsigned int v17 = *(unsigned __int16 *)(v19 + 16);
          }

          if (v18 == 65534
            || *(_DWORD *)(v19 + 20) < v18
            && ((_DWORD)v9 ? (uint64_t v9 = v9) : (uint64_t v9 = 22LL),
                (uint64_t v23 = a2[1]) == 0
              ? (uint64_t v24 = (const char *)(*(void *)(*(void *)(*a2 + 392LL) + 384LL) + 208LL))
              : (uint64_t v24 = (const char *)(v23 + 3992)),
                uint64_t v25 = obj_oid((uint64_t)a2),
                log_err( "%s:%d: %s oid 0x%llx (level %d): index %d val length %d longer than tree longest %d\n",  "btree_node_debug_stats",  115,  v24,  v25,  *(unsigned __int16 *)(a2[7] + 34LL),  v16,  v18,  *(_DWORD *)(*(void *)(a1 + 392) + 20LL)),  v19 = *(void *)(a1 + 392),  unsigned int v18 = (unsigned __int16)*(_DWORD *)(v19 + 20),  v18 == 65534))
          {
            unsigned int v18 = 0;
          }

          if (*(_DWORD *)(a4 + 208) < v17) {
            *(_DWORD *)(a4 + 208) = v17;
          }
          if (*(_DWORD *)(a4 + 212) < v18) {
            *(_DWORD *)(a4 + 212) = v18;
          }
          *(void *)(a4 + 144) += v17;
          unsigned int v26 = *(_DWORD *)(v19 + 16);
          uint64_t v27 = (_DWORD *)(a4 + 180);
          if (v26) {
            uint64_t v27 = (_DWORD *)(a4 + 4LL * (5 * v17 / v26) + 160);
          }
          ++*v27;
          *(void *)(a4 + 152) += v18;
          unsigned int v28 = *(_DWORD *)(v19 + 20);
          size_t v29 = (_DWORD *)(a4 + 204);
          if (v28) {
            size_t v29 = (_DWORD *)(a4 + 4LL * (5 * v18 / v28) + 184);
          }
          ++*v29;
          ++v16;
        }

        while (v16 < *(_DWORD *)(v7 + 36));
      }
    }

    else
    {
      ++*(_DWORD *)(a4 + 4 * v12 + 64);
      uint64_t v14 = *(void *)(a4 + 96) + v10;
      *(void *)(a4 + 88) += v11;
      *(void *)(a4 + 96) = v14;
    }
  }

  return v9;
}

uint64_t btree_node_check( void *a1, uint64_t a2, uint64_t a3, unsigned int a4, void *a5, unsigned int a6, uint64_t a7, int a8, uint64_t a9, char a10, unsigned __int8 a11)
{
  v286[1] = *MEMORY[0x1895F89C0];
  if (!a5 || (uint64_t v12 = a5[7]) == 0)
  {
    uint64_t v19 = a5[1];
    if (v19) {
      uint64_t v20 = (const char *)(v19 + 3992);
    }
    else {
      uint64_t v20 = (const char *)(*(void *)(*(void *)(*a5 + 392LL) + 384LL) + 208LL);
    }
    log_err("%s:%d: %s btree_node is null\n", "btree_node_check", 152, v20);
    return 22LL;
  }

  unsigned int v15 = a6;
  unsigned int v277 = a4;
  v279 = (_BYTE *)a3;
  uint64_t v276 = a2;
  uint64_t v17 = a5[1];
  if (!v17) {
    uint64_t v17 = *(void *)(*a5 + 392LL);
  }
  uint64_t v278 = v17;
  if (a9)
  {
    uint64_t v18 = btree_node_debug_stats((uint64_t)a1, a5, a6, a9);
    if ((_DWORD)v18) {
      return v18;
    }
  }

  if (!a1 && (a5[4] & 1) == 0) {
    return 0LL;
  }
  uint64_t v274 = a9;
  int v273 = a11;
  unsigned int v275 = v15;
  if ((a11 & 1) != 0)
  {
LABEL_17:
    uint64_t v285 = 0LL;
    v286[0] = 0LL;
    int v283 = 0;
    int v284 = 0;
    uint64_t v22 = a5[7];
    uint64_t v23 = (uint64_t)v279;
    unsigned int v24 = v277;
    if (v279 && *(_DWORD *)(v22 + 36))
    {
      uint64_t v25 = btree_node_key_ptr((uint64_t)v279, v277, v286, (_WORD *)&v284 + 1);
      if ((_DWORD)v25)
      {
        uint64_t v18 = v25;
        obj_oid((uint64_t)v279);
LABEL_249:
        log_err("%s:%d: %s oid 0x%llx (level %d): can't get key %d: %d\n");
        return v18;
      }

      uint64_t v33 = btree_node_key_ptr((uint64_t)a5, 0, &v285, &v284);
      if ((_DWORD)v33)
      {
        uint64_t v18 = v33;
        obj_oid((uint64_t)a5);
        goto LABEL_249;
      }

      uint64_t v54 = ((uint64_t (*)(uint64_t, void, void, uint64_t, void, int *))a5[52])( v278,  v286[0],  HIWORD(v284),  v285,  (unsigned __int16)v284,  &v283);
      if ((_DWORD)v54)
      {
        uint64_t v18 = v54;
        obj_oid((uint64_t)a5);
        log_err("%s:%d: %s oid 0x%llx (level %d): minkey compare error: %d\n");
        return v18;
      }

      if (v283 >= 1)
      {
        obj_oid((uint64_t)a5);
        log_err("%s:%d: %s oid 0x%llx (level %d): minkey not correct\n");
        return 22LL;
      }

      if (v283)
      {
        obj_oid((uint64_t)a5);
        log_err("%s:%d: %s oid 0x%llx (level %d): minkey not in sync\n");
        return 22LL;
      }

      uint64_t v22 = a5[7];
      uint64_t v23 = (uint64_t)v279;
      unsigned int v24 = v277;
    }

    unsigned int v82 = *(_DWORD *)(v22 + 36);
    if (v82 >= 2)
    {
      uint64_t v271 = a7;
      int v272 = a8;
      uint64_t v18 = 0LL;
      for (unsigned int i = 1; i < v82; ++i)
      {
        if (btree_node_key_off((uint64_t)a5, (unsigned __int16)(i - 1)) != 0xFFFF
          && btree_node_key_off((uint64_t)a5, (unsigned __int16)i) != 0xFFFF)
        {
          unsigned int v84 = btree_node_key_ptr((uint64_t)a5, (unsigned __int16)(i - 1), v286, (_WORD *)&v284 + 1);
          if (v84)
          {
            int v85 = v84;
            if ((_DWORD)v18) {
              uint64_t v18 = v18;
            }
            else {
              uint64_t v18 = v84;
            }
            uint64_t v86 = a5[1];
            if (v86) {
              unint64_t v87 = (const char *)(v86 + 3992);
            }
            else {
              unint64_t v87 = (const char *)(*(void *)(*(void *)(*a5 + 392LL) + 384LL) + 208LL);
            }
            uint64_t v88 = obj_oid((uint64_t)a5);
            log_err( "%s:%d: %s oid 0x%llx (level %d): can't get key %d: %d\n",  "btree_node_check",  536,  v87,  v88,  *(unsigned __int16 *)(a5[7] + 34LL),  i - 1,  v85);
          }

          else
          {
            unsigned int v89 = btree_node_key_ptr((uint64_t)a5, (unsigned __int16)i, &v285, &v284);
            if (v89)
            {
              int v90 = v89;
              if ((_DWORD)v18) {
                uint64_t v18 = v18;
              }
              else {
                uint64_t v18 = v89;
              }
              uint64_t v91 = a5[1];
              if (v91) {
                int8x16_t v92 = (const char *)(v91 + 3992);
              }
              else {
                int8x16_t v92 = (const char *)(*(void *)(*(void *)(*a5 + 392LL) + 384LL) + 208LL);
              }
              uint64_t v93 = obj_oid((uint64_t)a5);
              log_err( "%s:%d: %s oid 0x%llx (level %d): can't get key %d: %d\n",  "btree_node_check",  543,  v92,  v93,  *(unsigned __int16 *)(a5[7] + 34LL),  i,  v90);
            }
          }

          if (!(_DWORD)v18)
          {
            uint64_t v94 = ((uint64_t (*)(uint64_t, void, void, uint64_t, void, int *))a5[52])( v278,  v286[0],  HIWORD(v284),  v285,  (unsigned __int16)v284,  &v283);
            if ((_DWORD)v94)
            {
              uint64_t v18 = v94;
              uint64_t v95 = a5[1];
              if (v95) {
                int8x16_t v96 = (const char *)(v95 + 3992);
              }
              else {
                int8x16_t v96 = (const char *)(*(void *)(*(void *)(*a5 + 392LL) + 384LL) + 208LL);
              }
              uint64_t v97 = obj_oid((uint64_t)a5);
              log_err( "%s:%d: %s oid 0x%llx (level %d): key %d compare error: %d\n",  "btree_node_check",  547,  v96,  v97,  *(unsigned __int16 *)(a5[7] + 34LL),  i,  v18);
            }

            else if (v283 < 0)
            {
              uint64_t v18 = 0LL;
            }

            else
            {
              uint64_t v98 = a5[1];
              if (v98) {
                uint64_t v99 = (const char *)(v98 + 3992);
              }
              else {
                uint64_t v99 = (const char *)(*(void *)(*(void *)(*a5 + 392LL) + 384LL) + 208LL);
              }
              uint64_t v100 = obj_oid((uint64_t)a5);
              log_err( "%s:%d: %s oid 0x%llx (level %d): keys out of order: %d\n",  "btree_node_check",  550,  v99,  v100,  *(unsigned __int16 *)(a5[7] + 34LL),  i);
              uint64_t v18 = 22LL;
            }
          }
        }

        unsigned int v82 = *(_DWORD *)(a5[7] + 36LL);
      }

      a8 = v272;
      a7 = v271;
      LOWORD(v15) = v275;
      if ((_DWORD)v18) {
        return v18;
      }
      uint64_t v23 = (uint64_t)v279;
      unsigned int v24 = v277;
    }

    if (!v23) {
      goto LABEL_203;
    }
    int v101 = btree_node_key_ptr((uint64_t)a5, (unsigned __int16)(v82 - 1), v286, (_WORD *)&v284 + 1);
    if (v101)
    {
      int v102 = v101;
      uint64_t v103 = a5[1];
      if (v103) {
        uint64_t v104 = (const char *)(v103 + 3992);
      }
      else {
        uint64_t v104 = (const char *)(*(void *)(*(void *)(*a5 + 392LL) + 384LL) + 208LL);
      }
      uint64_t v105 = obj_oid((uint64_t)a5);
      log_err( "%s:%d: %s oid 0x%llx (level %d): can't get key %d: %d\n",  "btree_node_check",  559,  v104,  v105,  *(unsigned __int16 *)(a5[7] + 34LL),  *(_DWORD *)(a5[7] + 36LL) - 1,  v102);
      return 22LL;
    }

    if (*(_DWORD *)(*(void *)(v23 + 56) + 36LL) - 1 <= v24)
    {
      uint64_t v285 = a7;
      LOWORD(v284) = a8;
      int v107 = a8;
      uint64_t v108 = a7;
    }

    else
    {
      uint64_t v106 = btree_node_key_ptr(v23, (unsigned __int16)(v24 + 1), &v285, &v284);
      if ((_DWORD)v106)
      {
        uint64_t v18 = v106;
        obj_oid((uint64_t)v279);
        goto LABEL_249;
      }

      uint64_t v108 = v285;
      int v107 = (unsigned __int16)v284;
    }

    if (!v108 || !v107 || !HIWORD(v284)) {
      goto LABEL_203;
    }
    uint64_t v109 = ((uint64_t (*)(uint64_t, void))a5[52])(v278, v286[0]);
    if ((_DWORD)v109)
    {
      uint64_t v18 = v109;
      obj_oid((uint64_t)a5);
      log_err("%s:%d: %s oid 0x%llx (level %d): key %d compare error: %d\n");
      return v18;
    }

    if (v283 < 0)
    {
LABEL_203:
      if (a1)
      {
        uint64_t v110 = a5[7];
        if ((*(_WORD *)(v110 + 32) & 2) != 0 || *(_DWORD *)(v110 + 36))
        {
          uint64_t v18 = 0LL;
        }

        else
        {
          uint64_t v127 = a5[1];
          if (v127) {
            uint64_t v128 = (const char *)(v127 + 3992);
          }
          else {
            uint64_t v128 = (const char *)(*(void *)(*(void *)(*a5 + 392LL) + 384LL) + 208LL);
          }
          uint64_t v129 = obj_oid((uint64_t)a5);
          log_err( "%s:%d: %s oid 0x%llx (level %d): non-leaf node has no children?\n",  "btree_node_check",  595,  v128,  v129,  *(unsigned __int16 *)(a5[7] + 34LL));
          uint64_t v18 = 22LL;
        }

        if ((*(_WORD *)(a5[7] + 32LL) & 2) == 0 && (a10 & 1) == 0)
        {
          v279 = v261;
          MEMORY[0x1895F8858]();
          unint64_t v112 = &v261[-v111];
          bzero(&v261[-v111], v113);
          if (*(_DWORD *)(a5[7] + 36LL))
          {
            uint64_t v271 = a7;
            int v272 = a8;
            __int16 v114 = v15;
            unsigned int v115 = 0;
            LODWORD(v278) = (unsigned __int16)(v114 + 1);
            while (1)
            {
              if (btree_node_key_off((uint64_t)a5, (unsigned __int16)v115) != 0xFFFF
                && btree_node_val_off((uint64_t)a5, (unsigned __int16)v115) != 0xFFFF)
              {
                int v116 = btree_node_child_val((uint64_t)a5, (unsigned __int16)v115, v112);
                if (v116)
                {
                  int v117 = v116;
                  if ((_DWORD)v18) {
                    uint64_t v18 = v18;
                  }
                  else {
                    uint64_t v18 = 22LL;
                  }
                  uint64_t v118 = a5[1];
                  if (v118) {
                    uint64_t v119 = (const char *)(v118 + 3992);
                  }
                  else {
                    uint64_t v119 = (const char *)(*(void *)(*(void *)(*a5 + 392LL) + 384LL) + 208LL);
                  }
                  uint64_t v120 = obj_oid((uint64_t)a5);
                  log_err( "%s:%d: %s oid 0x%llx (level %d): can't get child %d oid: %d\n",  "btree_node_check",  606,  v119,  v120,  *(unsigned __int16 *)(a5[7] + 34LL),  v115,  v117);
                }

                else if (*v112)
                {
                  uint64_t v281 = v271;
                  unint64_t v282 = 0LL;
                  __int16 v280 = v272;
                  uint64_t v121 = a5[7];
                  if (v115 < *(_DWORD *)(v121 + 36) - 1)
                  {
                    int v122 = btree_node_key_ptr((uint64_t)a5, (unsigned __int16)(v115 + 1), &v281, &v280);
                    if (v122)
                    {
                      int v142 = v122;
                      if ((_DWORD)v18) {
                        uint64_t v18 = v18;
                      }
                      else {
                        uint64_t v18 = 22LL;
                      }
                      uint64_t v143 = a5[1];
                      if (v143) {
                        uint64_t v144 = (const char *)(v143 + 3992);
                      }
                      else {
                        uint64_t v144 = (const char *)(*(void *)(*(void *)(*a5 + 392LL) + 384LL) + 208LL);
                      }
                      uint64_t v161 = obj_oid((uint64_t)a5);
                      log_err( "%s:%d: %s oid 0x%llx (level %d): can't get key %d: %d\n",  "btree_node_check",  625,  v144,  v161,  *(unsigned __int16 *)(a5[7] + 34LL),  v115 + 1,  v142);
                      return v18;
                    }

                    uint64_t v121 = a5[7];
                  }

                  uint64_t v123 = v276;
                  else {
                    BOOL v124 = v282 == 0LL;
                  }
                  if (v124)
                  {
                    if ((_DWORD)v18) {
                      uint64_t v18 = v18;
                    }
                    else {
                      uint64_t v18 = 22LL;
                    }
                    obj_oid((uint64_t)a5);
                    log_err("%s:%d: %s oid 0x%llx (level %d): can't get child: 0x%llx\n");
                  }

                  else
                  {
                    unsigned int v125 = btree_node_check(a1, v123, a5, (unsigned __int16)v115);
                    if ((_DWORD)v18) {
                      BOOL v126 = 1;
                    }
                    else {
                      BOOL v126 = v125 == 0;
                    }
                    if (v126) {
                      uint64_t v18 = v18;
                    }
                    else {
                      uint64_t v18 = v125;
                    }
                    obj_unlock((uint64_t)v282, 1);
                    obj_release(v282);
                  }
                }

                else
                {
                  if ((_DWORD)v18) {
                    uint64_t v18 = v18;
                  }
                  else {
                    uint64_t v18 = 22LL;
                  }
                  obj_oid((uint64_t)a5);
                  log_err("%s:%d: %s oid 0x%llx (level %d): invalid child oid: 0x%llx\n");
                }
              }

              if (++v115 >= *(_DWORD *)(a5[7] + 36LL)) {
                return v18;
              }
            }
          }
        }

        return v18;
      }

      return 0LL;
    }

    obj_oid((uint64_t)a5);
    log_err("%s:%d: %s oid 0x%llx (level %d): node's max key is not less than next sibling's entry in parent\n");
    return 22LL;
  }

  uint64_t v18 = 0LL;
  if (v279 && (*(_WORD *)(v12 + 32) & 1) != 0)
  {
    uint64_t v26 = a5[1];
    if (v26) {
      uint64_t v27 = (const char *)(v26 + 3992);
    }
    else {
      uint64_t v27 = (const char *)(*(void *)(*(void *)(*a5 + 392LL) + 384LL) + 208LL);
    }
    uint64_t v28 = obj_oid((uint64_t)a5);
    int v29 = *(unsigned __int16 *)(a5[7] + 34LL);
    uint64_t v30 = obj_oid((uint64_t)v279);
    log_err( "%s:%d: %s oid 0x%llx (level %d): root node has a parent 0x%llx (level %d)\n",  "btree_node_check",  183,  v27,  v28,  v29,  v30,  *(unsigned __int16 *)(*((void *)v279 + 7) + 34LL));
    uint64_t v18 = 22LL;
    unsigned int v15 = v275;
  }

  if ((*(_WORD *)(v12 + 32) & 2) != 0 && *(_WORD *)(v12 + 34))
  {
    uint64_t v31 = a5[1];
    if (v31) {
      int v32 = (const char *)(v31 + 3992);
    }
    else {
      int v32 = (const char *)(*(void *)(*(void *)(*a5 + 392LL) + 384LL) + 208LL);
    }
    uint64_t v34 = obj_oid((uint64_t)a5);
    log_err( "%s:%d: %s oid 0x%llx (level %d): leaf node has non-zero level\n",  "btree_node_check",  186,  v32,  v34,  *(unsigned __int16 *)(v12 + 34));
    uint64_t v18 = 22LL;
  }

  if (a1)
  {
    if (*(unsigned __int16 *)(a5[7] + 34LL) > *(unsigned __int16 *)(a1[7] + 34LL))
    {
      if ((_DWORD)v18) {
        uint64_t v18 = v18;
      }
      else {
        uint64_t v18 = 22LL;
      }
      uint64_t v35 = a5[1];
      if (v35) {
        uint64_t v36 = (const char *)(v35 + 3992);
      }
      else {
        uint64_t v36 = (const char *)(*(void *)(*(void *)(*a5 + 392LL) + 384LL) + 208LL);
      }
      uint64_t v37 = obj_oid((uint64_t)a5);
      log_err( "%s:%d: %s oid 0x%llx (level %d): node level greater than root level %d\n",  "btree_node_check",  189,  v36,  v37,  *(unsigned __int16 *)(v12 + 34),  *(unsigned __int16 *)(a1[7] + 34LL));
    }

    unsigned int v38 = v15 - 1;
    if (*(unsigned __int16 *)(a1[7] + 34LL) - (v15 - 1) != *(unsigned __int16 *)(a5[7] + 34LL))
    {
      if ((_DWORD)v18) {
        uint64_t v18 = v18;
      }
      else {
        uint64_t v18 = 22LL;
      }
      uint64_t v39 = a5[1];
      if (v39) {
        uint64_t v40 = (const char *)(v39 + 3992);
      }
      else {
        uint64_t v40 = (const char *)(*(void *)(*(void *)(*a5 + 392LL) + 384LL) + 208LL);
      }
      uint64_t v41 = obj_oid((uint64_t)a5);
      log_err( "%s:%d: %s oid 0x%llx (level %d): node level should be %d\n",  "btree_node_check",  192,  v40,  v41,  *(unsigned __int16 *)(v12 + 34),  *(unsigned __int16 *)(a1[7] + 34LL) - v38);
    }
  }

  if ((*(_WORD *)(v12 + 32) & 1) != 0) {
    __int16 v42 = -96;
  }
  else {
    __int16 v42 = -56;
  }
  unsigned __int16 v43 = v42 + ((a5[50] >> 27) & 0xF000);
  if (*(_WORD *)(v12 + 40))
  {
    if ((_DWORD)v18) {
      uint64_t v18 = v18;
    }
    else {
      uint64_t v18 = 22LL;
    }
    uint64_t v44 = a5[1];
    if (v44) {
      unint64_t v45 = (const char *)(v44 + 3992);
    }
    else {
      unint64_t v45 = (const char *)(*(void *)(*(void *)(*a5 + 392LL) + 384LL) + 208LL);
    }
    uint64_t v46 = obj_oid((uint64_t)a5);
    log_err( "%s:%d: %s oid 0x%llx (level %d): invalid table space offset\n",  "btree_node_check",  203,  v45,  v46,  *(unsigned __int16 *)(a5[7] + 34LL));
  }

  if (*(unsigned __int16 *)(v12 + 42) > v43)
  {
    if ((_DWORD)v18) {
      uint64_t v18 = v18;
    }
    else {
      uint64_t v18 = 22LL;
    }
    uint64_t v47 = a5[1];
    if (v47) {
      __int16 v48 = (const char *)(v47 + 3992);
    }
    else {
      __int16 v48 = (const char *)(*(void *)(*(void *)(*a5 + 392LL) + 384LL) + 208LL);
    }
    uint64_t v49 = obj_oid((uint64_t)a5);
    log_err( "%s:%d: %s oid 0x%llx (level %d): table space length larger than available data space\n",  "btree_node_check",  206,  v48,  v49,  *(unsigned __int16 *)(a5[7] + 34LL));
  }

  if ((*(_WORD *)(v12 + 32) & 4) == 0)
  {
    unsigned int v50 = *(unsigned __int16 *)(v12 + 42);
    if (v50 < 8 * btree_node_toc_entry_size((uint64_t)a5))
    {
      if ((_DWORD)v18) {
        uint64_t v18 = v18;
      }
      else {
        uint64_t v18 = 22LL;
      }
      obj_oid((uint64_t)a5);
      log_err("%s:%d: %s oid 0x%llx (level %d): table space length smaller than minimum\n");
      return v18;
    }
  }

  if ((_DWORD)v18) {
    return v18;
  }
  uint64_t v51 = (unsigned __int16)(v43 - *(_WORD *)(v12 + 42));
  if (*(unsigned __int16 *)(v12 + 44) <= (unsigned __int16)(v43 - *(_WORD *)(v12 + 42)))
  {
    uint64_t v18 = 0LL;
  }

  else
  {
    uint64_t v52 = a5[1];
    if (v52) {
      __int128 v53 = (const char *)(v52 + 3992);
    }
    else {
      __int128 v53 = (const char *)(*(void *)(*(void *)(*a5 + 392LL) + 384LL) + 208LL);
    }
    uint64_t v55 = obj_oid((uint64_t)a5);
    log_err( "%s:%d: %s oid 0x%llx (level %d): free space offset too large\n",  "btree_node_check",  218,  v53,  v55,  *(unsigned __int16 *)(a5[7] + 34LL));
    uint64_t v18 = 22LL;
  }

  if (*(unsigned __int16 *)(v12 + 46) + *(unsigned __int16 *)(v12 + 44) > v51)
  {
    uint64_t v56 = a5[1];
    if (v56) {
      __int128 v57 = (const char *)(v56 + 3992);
    }
    else {
      __int128 v57 = (const char *)(*(void *)(*(void *)(*a5 + 392LL) + 384LL) + 208LL);
    }
    uint64_t v58 = obj_oid((uint64_t)a5);
    log_err( "%s:%d: %s oid 0x%llx (level %d): free space extends beyond end of node\n",  "btree_node_check",  221,  v57,  v58,  *(unsigned __int16 *)(a5[7] + 34LL));
    uint64_t v18 = 22LL;
  }

  uint64_t v270 = *(unsigned __int16 *)(v12 + 44);
  int v59 = *(unsigned __int16 *)(v12 + 46);
  if (*(_DWORD *)(v12 + 36) > v51)
  {
    if ((_DWORD)v18) {
      uint64_t v18 = v18;
    }
    else {
      uint64_t v18 = 22LL;
    }
    uint64_t v60 = a5[1];
    if (v60) {
      uint64_t v61 = (const char *)(v60 + 3992);
    }
    else {
      uint64_t v61 = (const char *)(*(void *)(*(void *)(*a5 + 392LL) + 384LL) + 208LL);
    }
    uint64_t v62 = obj_oid((uint64_t)a5);
    log_err( "%s:%d: %s oid 0x%llx (level %d): key count larger than possible\n",  "btree_node_check",  228,  v61,  v62,  *(unsigned __int16 *)(a5[7] + 34LL));
  }

  unsigned int v63 = *(_DWORD *)(v12 + 36);
  uint64_t v269 = v51;
  if (v63 > v270 && (*(__int16 *)(v12 + 32) & 0x80000000) == 0)
  {
    if ((_DWORD)v18) {
      uint64_t v18 = v18;
    }
    else {
      uint64_t v18 = 22LL;
    }
    uint64_t v64 = a5[1];
    if (v64) {
      uint64_t v65 = (const char *)(v64 + 3992);
    }
    else {
      uint64_t v65 = (const char *)(*(void *)(*(void *)(*a5 + 392LL) + 384LL) + 208LL);
    }
    uint64_t v66 = obj_oid((uint64_t)a5);
    log_err( "%s:%d: %s oid 0x%llx (level %d): key count larger than gross key space\n",  "btree_node_check",  231,  v65,  v66,  *(unsigned __int16 *)(a5[7] + 34LL));
  }

  unsigned int v67 = *(_DWORD *)(v12 + 36);
  unsigned int v68 = *(unsigned __int16 *)(v12 + 42);
  if (v67 > v68 / btree_node_toc_entry_size((uint64_t)a5))
  {
    if ((_DWORD)v18) {
      uint64_t v18 = v18;
    }
    else {
      uint64_t v18 = 22LL;
    }
    obj_oid((uint64_t)a5);
    log_err("%s:%d: %s oid 0x%llx (level %d): key count larger than TOC space\n");
    return v18;
  }

  if ((_DWORD)v18) {
    return v18;
  }
  if (a5[47] == v12 + 56)
  {
    uint64_t v18 = 0LL;
  }

  else
  {
    uint64_t v69 = a5[1];
    if (v69) {
      int8x16_t v70 = (const char *)(v69 + 3992);
    }
    else {
      int8x16_t v70 = (const char *)(*(void *)(*(void *)(*a5 + 392LL) + 384LL) + 208LL);
    }
    uint64_t v71 = obj_oid((uint64_t)a5);
    log_err( "%s:%d: %s oid 0x%llx (level %d): invalid TOC[] pointer\n",  "btree_node_check",  242,  v70,  v71,  *(unsigned __int16 *)(a5[7] + 34LL));
    uint64_t v18 = 22LL;
  }

  if (a5[48] != v12 + 56 + *(unsigned __int16 *)(v12 + 42))
  {
    uint64_t v72 = a5[1];
    if (v72) {
      int8x16_t v73 = (const char *)(v72 + 3992);
    }
    else {
      int8x16_t v73 = (const char *)(*(void *)(*(void *)(*a5 + 392LL) + 384LL) + 208LL);
    }
    uint64_t v74 = obj_oid((uint64_t)a5);
    log_err( "%s:%d: %s oid 0x%llx (level %d): invalid keys[] pointer\n",  "btree_node_check",  245,  v73,  v74,  *(unsigned __int16 *)(a5[7] + 34LL));
    uint64_t v18 = 22LL;
  }

  if ((*(_WORD *)(v12 + 32) & 1) != 0 && a5[49] != v12 + ((a5[50] >> 27) & 0x1F000LL) - 40)
  {
    if ((_DWORD)v18) {
      uint64_t v18 = v18;
    }
    else {
      uint64_t v18 = 22LL;
    }
    uint64_t v75 = a5[1];
    if (v75) {
      unsigned int v76 = (const char *)(v75 + 3992);
    }
    else {
      unsigned int v76 = (const char *)(*(void *)(*(void *)(*a5 + 392LL) + 384LL) + 208LL);
    }
    uint64_t v77 = obj_oid((uint64_t)a5);
    log_err( "%s:%d: %s oid 0x%llx (level %d): invalid vals[] pointer\n",  "btree_node_check",  248,  v76,  v77,  *(unsigned __int16 *)(a5[7] + 34LL));
  }

  if ((*(_WORD *)(v12 + 32) & 1) == 0 && a5[49] != v12 + ((a5[50] >> 27) & 0x1F000LL))
  {
    if ((_DWORD)v18) {
      uint64_t v18 = v18;
    }
    else {
      uint64_t v18 = 22LL;
    }
    obj_oid((uint64_t)a5);
    log_err("%s:%d: %s oid 0x%llx (level %d): invalid vals[] pointer\n");
    return v18;
  }

  if ((_DWORD)v18) {
    return v18;
  }
  int v78 = v270 + v59;
  if (*(unsigned __int16 *)(v12 + 50) <= v270)
  {
    uint64_t v18 = 0LL;
    int v81 = v269;
  }

  else
  {
    uint64_t v79 = a5[1];
    if (v79) {
      unint64_t v80 = (const char *)(v79 + 3992);
    }
    else {
      unint64_t v80 = (const char *)(*(void *)(*(void *)(*a5 + 392LL) + 384LL) + 208LL);
    }
    int v81 = v269;
    uint64_t v130 = obj_oid((uint64_t)a5);
    log_err( "%s:%d: %s oid 0x%llx (level %d): key free list space larger than key space available\n",  "btree_node_check",  259,  v80,  v130,  *(unsigned __int16 *)(a5[7] + 34LL));
    uint64_t v18 = 22LL;
  }

  int v131 = v81 - v78;
  unint64_t v132 = *(unsigned __int16 *)(v12 + 48);
  if (v132 != 0xFFFF && v270 - 4 < v132)
  {
    uint64_t v133 = a5[1];
    if (v133) {
      uint64_t v134 = (const char *)(v133 + 3992);
    }
    else {
      uint64_t v134 = (const char *)(*(void *)(*(void *)(*a5 + 392LL) + 384LL) + 208LL);
    }
    uint64_t v135 = obj_oid((uint64_t)a5);
    log_err( "%s:%d: %s oid 0x%llx (level %d): key free list head beyond key space available\n",  "btree_node_check",  263,  v134,  v135,  *(unsigned __int16 *)(a5[7] + 34LL));
    uint64_t v18 = 22LL;
  }

  if (*(unsigned __int16 *)(v12 + 54) > (unsigned __int16)v131)
  {
    if ((_DWORD)v18) {
      uint64_t v18 = v18;
    }
    else {
      uint64_t v18 = 22LL;
    }
    uint64_t v136 = a5[1];
    if (v136) {
      unint64_t v137 = (const char *)(v136 + 3992);
    }
    else {
      unint64_t v137 = (const char *)(*(void *)(*(void *)(*a5 + 392LL) + 384LL) + 208LL);
    }
    uint64_t v138 = obj_oid((uint64_t)a5);
    log_err( "%s:%d: %s oid 0x%llx (level %d): val free list space larger than val space available\n",  "btree_node_check",  266,  v137,  v138,  *(unsigned __int16 *)(a5[7] + 34LL));
  }

  unsigned int v139 = *(unsigned __int16 *)(v12 + 52);
  if (v139 != 0xFFFF)
  {
    if (v139 > (unsigned __int16)v131)
    {
      if ((_DWORD)v18) {
        uint64_t v18 = v18;
      }
      else {
        uint64_t v18 = 22LL;
      }
      uint64_t v140 = a5[1];
      if (v140) {
        uint64_t v141 = (const char *)(v140 + 3992);
      }
      else {
        uint64_t v141 = (const char *)(*(void *)(*(void *)(*a5 + 392LL) + 384LL) + 208LL);
      }
      uint64_t v145 = obj_oid((uint64_t)a5);
      log_err( "%s:%d: %s oid 0x%llx (level %d): val free list head beyond val space available\n",  "btree_node_check",  270,  v141,  v145,  *(unsigned __int16 *)(a5[7] + 34LL));
      unsigned int v139 = *(unsigned __int16 *)(v12 + 52);
    }

    if (v139 <= 3)
    {
      if ((_DWORD)v18) {
        uint64_t v18 = v18;
      }
      else {
        uint64_t v18 = 22LL;
      }
      obj_oid((uint64_t)a5);
      log_err("%s:%d: %s oid 0x%llx (level %d): val free list head beyond end of node\n");
      return v18;
    }
  }

  if ((_DWORD)v18) {
    return v18;
  }
  unint64_t v268 = v270 - 4;
  uint64_t v146 = _apfs_calloc((v269 + 63) >> 6, 8uLL);
  size_t v266 = (v269 + 63) >> 6;
  unint64_t v147 = _apfs_calloc(v266, 8uLL);
  int v267 = v147;
  if (!v146 || !v147)
  {
    uint64_t v158 = a5[1];
    if (v158) {
      unsigned int v159 = (const char *)(v158 + 3992);
    }
    else {
      unsigned int v159 = (const char *)(*(void *)(*(void *)(*a5 + 392LL) + 384LL) + 208LL);
    }
    uint64_t v160 = obj_oid((uint64_t)a5);
    log_err( "%s:%d: %s oid 0x%llx (level %d): couldn't allocate bitmap to check btree node space usage\n",  "btree_node_check",  286,  v159,  v160,  *(unsigned __int16 *)(a5[7] + 34LL));
    uint64_t v18 = 12LL;
    goto LABEL_343;
  }

  int v265 = v131;
  uint64_t v271 = a7;
  int v272 = a8;
  bitmap_set_range((uint64_t)v146, *(unsigned __int16 *)(v12 + 44), *(unsigned __int16 *)(v12 + 46));
  unsigned __int16 v148 = 0;
  LOWORD(v149) = *(_WORD *)(v12 + 48);
  int v150 = v146;
  while (1)
  {
    uint64_t v151 = (unsigned __int16)v149;
    if ((unsigned __int16)v149 >= v270 || v268 < (unsigned __int16)v149)
    {
      obj_oid((uint64_t)a5);
      log_err("%s:%d: %s oid 0x%llx (level %d): key free list entry starts beyond key space available\n");
LABEL_341:
      uint64_t v18 = 22LL;
      goto LABEL_342;
    }

    int v152 = (unsigned __int16 *)(a5[48] + (unsigned __int16)v149);
    uint64_t v153 = v152[1];
    if (v153 <= 3)
    {
LABEL_339:
      obj_oid((uint64_t)a5);
      log_err("%s:%d: %s oid 0x%llx (level %d): key free list entry len value too small\n");
      goto LABEL_341;
    }

    if (v153 + (unsigned __int16)v149 > v270)
    {
      obj_oid((uint64_t)a5);
      log_err("%s:%d: %s oid 0x%llx (level %d): key free list entry extends beyond key space available\n");
      goto LABEL_341;
    }

    if (!bitmap_range_is_clear((uint64_t)v146, (unsigned __int16)v149, v153))
    {
      obj_oid((uint64_t)a5);
      log_err("%s:%d: %s oid 0x%llx (level %d): key free list entry overlaps with other free space\n");
      goto LABEL_341;
    }

    bitmap_set_range((uint64_t)v146, v151, v152[1]);
    v148 += v152[1];
    unsigned int v154 = *(unsigned __int16 *)(v12 + 50);
    if (v148 <= v154)
    {
      uint64_t v18 = 0LL;
    }

    else
    {
      uint64_t v155 = a5[1];
      if (v155) {
        BOOL v156 = (const char *)(v155 + 3992);
      }
      else {
        BOOL v156 = (const char *)(*(void *)(*(void *)(*a5 + 392LL) + 384LL) + 208LL);
      }
      uint64_t v157 = obj_oid((uint64_t)a5);
      log_err( "%s:%d: %s oid 0x%llx (level %d): key free list entries total space exceeds free list space\n",  "btree_node_check",  326,  v156,  v157,  *(unsigned __int16 *)(a5[7] + 34LL));
      uint64_t v18 = 22LL;
    }

    int v149 = *v152;
    if ((_DWORD)v151 == v149)
    {
LABEL_340:
      obj_oid((uint64_t)a5);
      log_err("%s:%d: %s oid 0x%llx (level %d): key free list entry points to itself\n");
      goto LABEL_341;
    }

    uint64_t v146 = v150;
    if (v148 > v154) {
      goto LABEL_343;
    }
  }

  unsigned __int16 v162 = 0;
  LOWORD(v163) = *(_WORD *)(v12 + 52);
  while (1)
  {
    unsigned int v164 = (unsigned __int16)v163;
    if ((unsigned __int16)v163 <= 3u)
    {
      uint64_t v165 = a5[1];
      if (v165) {
        BOOL v166 = (const char *)(v165 + 3992);
      }
      else {
        BOOL v166 = (const char *)(*(void *)(*(void *)(*a5 + 392LL) + 384LL) + 208LL);
      }
      uint64_t v167 = obj_oid((uint64_t)a5);
      log_err( "%s:%d: %s oid 0x%llx (level %d): val free list entry beyond end of node\n",  "btree_node_check",  342,  v166,  v167,  *(unsigned __int16 *)(a5[7] + 34LL));
      uint64_t v18 = 22LL;
    }

    else
    {
      uint64_t v18 = 0LL;
    }

    if (v164 > (unsigned __int16)v265)
    {
      obj_oid((uint64_t)a5);
      log_err("%s:%d: %s oid 0x%llx (level %d): val free list entry starts beyond val space available\n");
      goto LABEL_341;
    }

    uint64_t v146 = v150;
    if (v164 < 4) {
      goto LABEL_343;
    }
    uint64_t v168 = (unsigned __int16 *)(a5[49] - v164);
    unint64_t v169 = v168[1];
    if (v169 <= 3) {
      goto LABEL_339;
    }
    if (v164 < v169)
    {
      obj_oid((uint64_t)a5);
      log_err("%s:%d: %s oid 0x%llx (level %d): val free list entry extends beyond val space available\n");
      goto LABEL_341;
    }

    if (!bitmap_range_is_clear((uint64_t)v150, (int)(v269 - v164), v169))
    {
      obj_oid((uint64_t)a5);
      log_err("%s:%d: %s oid 0x%llx (level %d): val free list entry overlaps with other free space\n");
      goto LABEL_341;
    }

    bitmap_set_range((uint64_t)v150, (int)(v269 - v164), v168[1]);
    v162 += v168[1];
    unsigned int v170 = *(unsigned __int16 *)(v12 + 54);
    if (v162 <= v170)
    {
      uint64_t v18 = 0LL;
    }

    else
    {
      uint64_t v171 = a5[1];
      if (v171) {
        uint64_t v172 = (const char *)(v171 + 3992);
      }
      else {
        uint64_t v172 = (const char *)(*(void *)(*(void *)(*a5 + 392LL) + 384LL) + 208LL);
      }
      uint64_t v173 = obj_oid((uint64_t)a5);
      log_err( "%s:%d: %s oid 0x%llx (level %d): val free list entries total space exceeds free list space\n",  "btree_node_check",  372,  v172,  v173,  *(unsigned __int16 *)(a5[7] + 34LL));
      uint64_t v18 = 22LL;
    }

    int v163 = *v168;
    if (v164 == v163) {
      goto LABEL_340;
    }
    uint64_t v146 = v150;
    if (v162 > v170) {
      goto LABEL_343;
    }
  }

  if ((*(_WORD *)(v12 + 32) & 4) != 0 && (a5[50] & 0x7FFE00) == 0)
  {
    uint64_t v176 = a5[1];
    if (v176) {
      uint64_t v177 = (const char *)(v176 + 3992);
    }
    else {
      uint64_t v177 = (const char *)(*(void *)(*(void *)(*a5 + 392LL) + 384LL) + 208LL);
    }
    uint64_t v178 = obj_oid((uint64_t)a5);
    log_err( "%s:%d: %s oid 0x%llx (level %d): node says kv size is fixed, but tree says key size is variable\n",  "btree_node_check",  387,  v177,  v178,  *(unsigned __int16 *)(a5[7] + 34LL));
    uint64_t v18 = 22LL;
  }

  else
  {
    uint64_t v18 = 0LL;
  }

  if ((*(_WORD *)(a5[7] + 32LL) & 2) == 0 && (a5[50] & 0x7FFE00) != 0 && (*(_WORD *)(v12 + 32) & 4) == 0)
  {
    uint64_t v174 = a5[1];
    if (v174) {
      unint64_t v175 = (const char *)(v174 + 3992);
    }
    else {
      unint64_t v175 = (const char *)(*(void *)(*(void *)(*a5 + 392LL) + 384LL) + 208LL);
    }
    uint64_t v179 = obj_oid((uint64_t)a5);
    log_err( "%s:%d: %s oid 0x%llx (level %d): tree says key size is fixed, but node says kv size is variable\n",  "btree_node_check",  390,  v175,  v179,  *(unsigned __int16 *)(a5[7] + 34LL));
    uint64_t v18 = 22LL;
  }

  if ((*(_WORD *)(v12 + 32) & 4) != 0 && (*(_WORD *)(a5[7] + 32LL) & 2) != 0 && (a5[50] & 0x7FFF800000LL) == 0)
  {
    if ((_DWORD)v18) {
      uint64_t v18 = v18;
    }
    else {
      uint64_t v18 = 22LL;
    }
    uint64_t v180 = a5[1];
    if (v180) {
      unint64_t v181 = (const char *)(v180 + 3992);
    }
    else {
      unint64_t v181 = (const char *)(*(void *)(*(void *)(*a5 + 392LL) + 384LL) + 208LL);
    }
    uint64_t v182 = obj_oid((uint64_t)a5);
    log_err( "%s:%d: %s oid 0x%llx (level %d): node says kv size is fixed, but tree says val size is variable\n",  "btree_node_check",  393,  v181,  v182,  *(unsigned __int16 *)(a5[7] + 34LL));
  }

  uint64_t v183 = a5[7];
  __int16 v184 = *(_WORD *)(v183 + 32);
  if ((v184 & 2) != 0)
  {
    uint64_t v185 = a5[50];
    if ((v185 & 0x7FFF800000LL) != 0 && (v185 & 4) == 0 && (v185 & 0x7FFE00) != 0 && (*(_WORD *)(v12 + 32) & 4) == 0)
    {
      if ((_DWORD)v18) {
        uint64_t v18 = v18;
      }
      else {
        uint64_t v18 = 22LL;
      }
      obj_oid((uint64_t)a5);
      log_err("%s:%d: %s oid 0x%llx (level %d): tree says kv sizes are fixed, but leaf says kv size is variable\n");
      goto LABEL_342;
    }
  }

  uint64_t v146 = v150;
  if ((_DWORD)v18) {
    goto LABEL_343;
  }
  uint64_t v186 = a5[47];
  if ((*(_WORD *)(v12 + 32) & 4) == 0)
  {
    if (*(_DWORD *)(v183 + 36))
    {
      unint64_t v187 = 0LL;
      unint64_t v188 = (unsigned __int16 *)(v186 + 4);
      while (1)
      {
        uint64_t v189 = *(v188 - 2);
        unint64_t v268 = *v188;
        uint64_t v190 = v188[1];
        if ((_DWORD)v189 == 0xFFFF)
        {
          uint64_t v18 = 0LL;
        }

        else
        {
          uint64_t v191 = *(v188 - 1);
          __int16 v192 = *(_WORD *)(v183 + 32);
          if ((v192 & 2) != 0
            && (a1 && *(_DWORD *)(a1[49] + 16LL) < v191
             || (v192 & 1) != 0 && *(_DWORD *)(a5[49] + 16LL) < v191))
          {
            uint64_t v193 = a5[1];
            if (v193) {
              unint64_t v194 = (const char *)(v193 + 3992);
            }
            else {
              unint64_t v194 = (const char *)(*(void *)(*(void *)(*a5 + 392LL) + 384LL) + 208LL);
            }
            uint64_t v195 = obj_oid((uint64_t)a5);
            log_err( "%s:%d: %s oid 0x%llx (level %d): key size greater than longest recorded for tree\n",  "btree_node_check",  475,  v194,  v195,  *(unsigned __int16 *)(a5[7] + 34LL));
            uint64_t v18 = 22LL;
          }

          else
          {
            uint64_t v18 = 0LL;
          }

          if (v189 >= v270)
          {
            uint64_t v196 = a5[1];
            if (v196) {
              unint64_t v197 = (const char *)(v196 + 3992);
            }
            else {
              unint64_t v197 = (const char *)(*(void *)(*(void *)(*a5 + 392LL) + 384LL) + 208LL);
            }
            uint64_t v198 = obj_oid((uint64_t)a5);
            log_err( "%s:%d: %s oid 0x%llx (level %d): key location not within key space\n",  "btree_node_check",  475,  v197,  v198,  *(unsigned __int16 *)(a5[7] + 34LL));
            uint64_t v18 = 22LL;
          }

          if ((int)v191 + (int)v189 <= v270)
          {
            if (!(_DWORD)v18)
            {
              if (bitmap_range_is_clear((uint64_t)v150, v189, v191))
              {
                uint64_t v18 = 0LL;
              }

              else
              {
                uint64_t v202 = a5[1];
                if (v202) {
                  BOOL v203 = (const char *)(v202 + 3992);
                }
                else {
                  BOOL v203 = (const char *)(*(void *)(*(void *)(*a5 + 392LL) + 384LL) + 208LL);
                }
                uint64_t v204 = obj_oid((uint64_t)a5);
                log_err( "%s:%d: %s oid 0x%llx (level %d): key entry overlaps with free space\n",  "btree_node_check",  475,  v203,  v204,  *(unsigned __int16 *)(a5[7] + 34LL));
                uint64_t v18 = 22LL;
              }

              if (!bitmap_range_is_clear((uint64_t)v267, v189, v191))
              {
                uint64_t v205 = a5[1];
                if (v205) {
                  uint64_t v206 = (const char *)(v205 + 3992);
                }
                else {
                  uint64_t v206 = (const char *)(*(void *)(*(void *)(*a5 + 392LL) + 384LL) + 208LL);
                }
                uint64_t v207 = obj_oid((uint64_t)a5);
                log_err( "%s:%d: %s oid 0x%llx (level %d): key entry overlaps with other entries\n",  "btree_node_check",  475,  v206,  v207,  *(unsigned __int16 *)(a5[7] + 34LL));
                uint64_t v18 = 22LL;
              }

              if ((a5[50] & 0x40LL) != 0) {
                uint64_t v208 = v191;
              }
              else {
                uint64_t v208 = ((_DWORD)v191 + 7) & 0x1FFF8;
              }
              bitmap_set_range((uint64_t)v267, v189, v208);
            }
          }

          else
          {
            if ((_DWORD)v18) {
              uint64_t v18 = v18;
            }
            else {
              uint64_t v18 = 22LL;
            }
            uint64_t v199 = a5[1];
            if (v199) {
              unint64_t v200 = (const char *)(v199 + 3992);
            }
            else {
              unint64_t v200 = (const char *)(*(void *)(*(void *)(*a5 + 392LL) + 384LL) + 208LL);
            }
            uint64_t v201 = obj_oid((uint64_t)a5);
            log_err( "%s:%d: %s oid 0x%llx (level %d): key location extends beyond key space\n",  "btree_node_check",  475,  v200,  v201,  *(unsigned __int16 *)(a5[7] + 34LL));
          }
        }

        if (v268 > 0xFFFD)
        {
          if ((_DWORD)v190 && (_DWORD)v190 != 65534)
          {
            if ((_DWORD)v18) {
              uint64_t v18 = v18;
            }
            else {
              uint64_t v18 = 22LL;
            }
            obj_oid((uint64_t)a5);
            log_err("%s:%d: %s oid 0x%llx (level %d): invalid val offset has non-zero length\n");
            goto LABEL_342;
          }
        }

        else
        {
          __int16 v209 = *(_WORD *)(a5[7] + 32LL);
          if ((v209 & 2) != 0
            && (a1 && *(_DWORD *)(a1[49] + 20LL) < v190
             || (v209 & 1) != 0 && *(_DWORD *)(a5[49] + 20LL) < v190))
          {
            if ((_DWORD)v18) {
              uint64_t v18 = v18;
            }
            else {
              uint64_t v18 = 22LL;
            }
            uint64_t v210 = a5[1];
            if (v210) {
              unint64_t v211 = (const char *)(v210 + 3992);
            }
            else {
              unint64_t v211 = (const char *)(*(void *)(*(void *)(*a5 + 392LL) + 384LL) + 208LL);
            }
            uint64_t v212 = obj_oid((uint64_t)a5);
            log_err( "%s:%d: %s oid 0x%llx (level %d): val size greater than longest recorded for tree\n",  "btree_node_check",  478,  v211,  v212,  *(unsigned __int16 *)(a5[7] + 34LL));
          }

          if (v268 > (unsigned __int16)v265)
          {
            if ((_DWORD)v18) {
              uint64_t v18 = v18;
            }
            else {
              uint64_t v18 = 22LL;
            }
            uint64_t v213 = a5[1];
            if (v213) {
              unint64_t v214 = (const char *)(v213 + 3992);
            }
            else {
              unint64_t v214 = (const char *)(*(void *)(*(void *)(*a5 + 392LL) + 384LL) + 208LL);
            }
            uint64_t v215 = obj_oid((uint64_t)a5);
            log_err( "%s:%d: %s oid 0x%llx (level %d): val location not within val space\n",  "btree_node_check",  478,  v214,  v215,  *(unsigned __int16 *)(a5[7] + 34LL));
          }

          if (v268 < v190)
          {
            if ((_DWORD)v18) {
              uint64_t v18 = v18;
            }
            else {
              uint64_t v18 = 22LL;
            }
            goto LABEL_575;
          }

          uint64_t v146 = v150;
          if ((_DWORD)v18) {
            goto LABEL_343;
          }
          uint64_t v216 = v269 - v268;
          if (bitmap_range_is_clear((uint64_t)v150, v269 - v268, v190))
          {
            uint64_t v18 = 0LL;
          }

          else
          {
            uint64_t v217 = a5[1];
            if (v217) {
              uint64_t v218 = (const char *)(v217 + 3992);
            }
            else {
              uint64_t v218 = (const char *)(*(void *)(*(void *)(*a5 + 392LL) + 384LL) + 208LL);
            }
            uint64_t v219 = obj_oid((uint64_t)a5);
            log_err( "%s:%d: %s oid 0x%llx (level %d): val entry overlaps with free space\n",  "btree_node_check",  478,  v218,  v219,  *(unsigned __int16 *)(a5[7] + 34LL));
            uint64_t v18 = 22LL;
          }

          if (!bitmap_range_is_clear((uint64_t)v267, v216, v190))
          {
            uint64_t v220 = a5[1];
            if (v220) {
              BOOL v221 = (const char *)(v220 + 3992);
            }
            else {
              BOOL v221 = (const char *)(*(void *)(*(void *)(*a5 + 392LL) + 384LL) + 208LL);
            }
            uint64_t v222 = obj_oid((uint64_t)a5);
            log_err( "%s:%d: %s oid 0x%llx (level %d): val entry overlaps with other entries\n",  "btree_node_check",  478,  v221,  v222,  *(unsigned __int16 *)(a5[7] + 34LL));
            uint64_t v18 = 22LL;
          }

          if ((a5[50] & 0x40LL) != 0) {
            uint64_t v223 = v190;
          }
          else {
            uint64_t v223 = ((_DWORD)v190 + 7) & 0x1FFF8;
          }
          bitmap_set_range((uint64_t)v267, v216, v223);
        }

        uint64_t v146 = v150;
        if ((_DWORD)v18) {
          goto LABEL_343;
        }
        v188 += 4;
        ++v187;
        uint64_t v183 = a5[7];
      }
    }

    goto LABEL_561;
  }

  unint64_t v224 = a5[50];
  if ((v184 & 2) != 0) {
    uint64_t v225 = (unsigned __int16)(v224 >> 23);
  }
  else {
    uint64_t v225 = 8LL;
  }
  if (!*(_DWORD *)(v183 + 36))
  {
LABEL_561:
    _apfs_free(v150, 8 * v266);
    _apfs_free(v267, 8 * v266);
    a8 = v272;
    a7 = v271;
    LOWORD(v15) = v275;
    goto LABEL_17;
  }

  unint64_t v226 = 0LL;
  unint64_t v264 = (v224 >> 9) & 0x3FFF;
  unsigned int v262 = ((_WORD)v264 + 7) & 0x7FF8;
  uint64_t v263 = ((_DWORD)v225 + 7) & 0x1FFF8;
  unint64_t v227 = (unsigned __int16 *)(v186 + 2);
  while (1)
  {
    uint64_t v228 = *(v227 - 1);
    unint64_t v268 = *v227;
    if ((_DWORD)v228 == 0xFFFF)
    {
      if ((*(__int16 *)(v12 + 32) & 0x80000000) == 0)
      {
LABEL_576:
        obj_oid((uint64_t)a5);
        log_err("%s:%d: %s oid 0x%llx (level %d): invalid key offset\n");
        goto LABEL_341;
      }

      uint64_t v18 = 0LL;
    }

    else
    {
      __int16 v229 = *(_WORD *)(v183 + 32);
      if ((v229 & 2) != 0
        && (a1 && *(_DWORD *)(a1[49] + 16LL) < v264
         || (v229 & 1) != 0 && *(_DWORD *)(a5[49] + 16LL) < v264))
      {
        uint64_t v230 = a5[1];
        if (v230) {
          BOOL v231 = (const char *)(v230 + 3992);
        }
        else {
          BOOL v231 = (const char *)(*(void *)(*(void *)(*a5 + 392LL) + 384LL) + 208LL);
        }
        uint64_t v232 = obj_oid((uint64_t)a5);
        log_err( "%s:%d: %s oid 0x%llx (level %d): key size greater than longest recorded for tree\n",  "btree_node_check",  452,  v231,  v232,  *(unsigned __int16 *)(a5[7] + 34LL));
        uint64_t v18 = 22LL;
      }

      else
      {
        uint64_t v18 = 0LL;
      }

      if (v228 >= v270)
      {
        uint64_t v233 = a5[1];
        if (v233) {
          uint64_t v234 = (const char *)(v233 + 3992);
        }
        else {
          uint64_t v234 = (const char *)(*(void *)(*(void *)(*a5 + 392LL) + 384LL) + 208LL);
        }
        uint64_t v235 = obj_oid((uint64_t)a5);
        log_err( "%s:%d: %s oid 0x%llx (level %d): key location not within key space\n",  "btree_node_check",  452,  v234,  v235,  *(unsigned __int16 *)(a5[7] + 34LL));
        uint64_t v18 = 22LL;
      }

      if ((int)v264 + (int)v228 <= v270)
      {
        if (!(_DWORD)v18)
        {
          if (bitmap_range_is_clear((uint64_t)v150, v228, v264))
          {
            uint64_t v18 = 0LL;
          }

          else
          {
            uint64_t v239 = a5[1];
            if (v239) {
              unint64_t v240 = (const char *)(v239 + 3992);
            }
            else {
              unint64_t v240 = (const char *)(*(void *)(*(void *)(*a5 + 392LL) + 384LL) + 208LL);
            }
            uint64_t v241 = obj_oid((uint64_t)a5);
            log_err( "%s:%d: %s oid 0x%llx (level %d): key entry overlaps with free space\n",  "btree_node_check",  452,  v240,  v241,  *(unsigned __int16 *)(a5[7] + 34LL));
            uint64_t v18 = 22LL;
          }

          if (!bitmap_range_is_clear((uint64_t)v267, v228, v264))
          {
            uint64_t v242 = a5[1];
            if (v242) {
              unint64_t v243 = (const char *)(v242 + 3992);
            }
            else {
              unint64_t v243 = (const char *)(*(void *)(*(void *)(*a5 + 392LL) + 384LL) + 208LL);
            }
            uint64_t v244 = obj_oid((uint64_t)a5);
            log_err( "%s:%d: %s oid 0x%llx (level %d): key entry overlaps with other entries\n",  "btree_node_check",  452,  v243,  v244,  *(unsigned __int16 *)(a5[7] + 34LL));
            uint64_t v18 = 22LL;
          }

          if ((a5[50] & 0x40LL) != 0) {
            uint64_t v245 = v264;
          }
          else {
            uint64_t v245 = v262;
          }
          bitmap_set_range((uint64_t)v267, v228, v245);
        }
      }

      else
      {
        uint64_t v18 = (_DWORD)v18 ? v18 : 22LL;
        uint64_t v236 = a5[1];
        int v237 = (const char *)(v236 ? v236 + 3992 : *(void *)(*(void *)(*a5 + 392LL) + 384LL) + 208LL);
        uint64_t v238 = obj_oid((uint64_t)a5);
        log_err( "%s:%d: %s oid 0x%llx (level %d): key location extends beyond key space\n",  "btree_node_check",  452,  v237,  v238,  *(unsigned __int16 *)(a5[7] + 34LL));
      }
    }

LABEL_559:
    uint64_t v146 = v150;
    if ((_DWORD)v18) {
      goto LABEL_343;
    }
    v227 += 2;
    ++v226;
    uint64_t v183 = a5[7];
  }

  __int16 v246 = *(_WORD *)(a5[7] + 32LL);
  if ((v246 & 2) != 0
    && (a1 && *(_DWORD *)(a1[49] + 20LL) < v225
     || (v246 & 1) != 0 && *(_DWORD *)(a5[49] + 20LL) < v225))
  {
    if ((_DWORD)v18) {
      uint64_t v18 = v18;
    }
    else {
      uint64_t v18 = 22LL;
    }
    uint64_t v247 = a5[1];
    if (v247) {
      BOOL v248 = (const char *)(v247 + 3992);
    }
    else {
      BOOL v248 = (const char *)(*(void *)(*(void *)(*a5 + 392LL) + 384LL) + 208LL);
    }
    uint64_t v249 = obj_oid((uint64_t)a5);
    log_err( "%s:%d: %s oid 0x%llx (level %d): val size greater than longest recorded for tree\n",  "btree_node_check",  455,  v248,  v249,  *(unsigned __int16 *)(a5[7] + 34LL));
  }

  if (v268 > (unsigned __int16)v265)
  {
    if ((_DWORD)v18) {
      uint64_t v18 = v18;
    }
    else {
      uint64_t v18 = 22LL;
    }
    uint64_t v250 = a5[1];
    if (v250) {
      uint64_t v251 = (const char *)(v250 + 3992);
    }
    else {
      uint64_t v251 = (const char *)(*(void *)(*(void *)(*a5 + 392LL) + 384LL) + 208LL);
    }
    uint64_t v252 = obj_oid((uint64_t)a5);
    log_err( "%s:%d: %s oid 0x%llx (level %d): val location not within val space\n",  "btree_node_check",  455,  v251,  v252,  *(unsigned __int16 *)(a5[7] + 34LL));
  }

  if (v268 >= v225)
  {
    uint64_t v146 = v150;
    if ((_DWORD)v18) {
      goto LABEL_343;
    }
    uint64_t v253 = v269 - v268;
    if (bitmap_range_is_clear((uint64_t)v150, v269 - v268, v225))
    {
      uint64_t v18 = 0LL;
    }

    else
    {
      uint64_t v254 = a5[1];
      if (v254) {
        uint64_t v255 = (const char *)(v254 + 3992);
      }
      else {
        uint64_t v255 = (const char *)(*(void *)(*(void *)(*a5 + 392LL) + 384LL) + 208LL);
      }
      uint64_t v256 = obj_oid((uint64_t)a5);
      log_err( "%s:%d: %s oid 0x%llx (level %d): val entry overlaps with free space\n",  "btree_node_check",  455,  v255,  v256,  *(unsigned __int16 *)(a5[7] + 34LL));
      uint64_t v18 = 22LL;
    }

    if (!bitmap_range_is_clear((uint64_t)v267, v253, v225))
    {
      uint64_t v257 = a5[1];
      if (v257) {
        int v258 = (const char *)(v257 + 3992);
      }
      else {
        int v258 = (const char *)(*(void *)(*(void *)(*a5 + 392LL) + 384LL) + 208LL);
      }
      uint64_t v259 = obj_oid((uint64_t)a5);
      log_err( "%s:%d: %s oid 0x%llx (level %d): val entry overlaps with other entries\n",  "btree_node_check",  455,  v258,  v259,  *(unsigned __int16 *)(a5[7] + 34LL));
      uint64_t v18 = 22LL;
    }

    if ((a5[50] & 0x40LL) != 0) {
      uint64_t v260 = v225;
    }
    else {
      uint64_t v260 = v263;
    }
    bitmap_set_range((uint64_t)v267, v253, v260);
    goto LABEL_559;
  }

  if ((_DWORD)v18) {
    uint64_t v18 = v18;
  }
  else {
    uint64_t v18 = 22LL;
  }
LABEL_575:
  obj_oid((uint64_t)a5);
  log_err("%s:%d: %s oid 0x%llx (level %d): val location extends beyond val space\n");
LABEL_342:
  uint64_t v146 = v150;
LABEL_343:
  if (v146) {
    _apfs_free(v146, (8 * v266));
  }
  if (v267) {
    _apfs_free(v267, (8 * v266));
  }
  return v18;
}

uint64_t btree_check_ext(FILE *a1, void *a2, uint64_t a3, int a4, int a5)
{
  if (obj_type((uint64_t)a2) == 2)
  {
    uint64_t v34 = 0LL;
    __int128 v32 = 0u;
    __int128 v33 = 0u;
    __int128 v30 = 0u;
    __int128 v31 = 0u;
    __int128 v28 = 0u;
    __int128 v29 = 0u;
    __int128 v26 = 0u;
    __int128 v27 = 0u;
    __int128 v24 = 0u;
    __int128 v25 = 0u;
    __int128 v22 = 0u;
    __int128 v23 = 0u;
    __int128 v20 = 0u;
    __int128 v21 = 0u;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    __int128 v17 = 0u;
    uint64_t v10 = btree_node_check(a2, a3, 0LL, 0, a2, 1u, 0LL, 0, (uint64_t)&v17, 0, 0);
    uint64_t v11 = v10;
    if (*(void *)(a2[49] + 24LL) != v18)
    {
      if ((_DWORD)v10) {
        uint64_t v11 = v10;
      }
      else {
        uint64_t v11 = 22LL;
      }
      uint64_t v12 = a2[1];
      if (v12) {
        uint64_t v13 = (const char *)(v12 + 3992);
      }
      else {
        uint64_t v13 = (const char *)(*(void *)(*(void *)(*a2 + 392LL) + 384LL) + 208LL);
      }
      uint64_t v14 = obj_oid((uint64_t)a2);
      log_err( "%s:%d: %s oid 0x%llx: btree key count (%llu) doesn't match # leaf entries (%u)\n",  "btree_check_ext",  681,  v13,  v14,  *(void *)(a2[49] + 24LL),  (_DWORD)v18);
    }

    if (*(void *)(a2[49] + 32LL) == DWORD1(v17) + (_DWORD)v17)
    {
      if (a5 && a4 && !(_DWORD)v11)
      {
        if (a1) {
          unsigned int v15 = a1;
        }
        else {
          unsigned int v15 = (FILE *)*MEMORY[0x1895F89E0];
        }
        btree_debug_stats_print(v15, (uint64_t)a2, &v17, a5);
      }
    }

    else
    {
      if ((_DWORD)v11) {
        uint64_t v11 = v11;
      }
      else {
        uint64_t v11 = 22LL;
      }
      obj_oid((uint64_t)a2);
      log_err("%s:%d: %s oid 0x%llx: btree node count (%llu) doesn't match # nodes traversed (%u)\n");
    }
  }

  else
  {
    uint64_t v11 = 22LL;
    if (a2[1]) {
      log_err("%s:%d: %s btree check called with non-root btree node: %d\n");
    }
    else {
      log_err( "%s:%d: %s btree check called with non-root btree node: %d\n",  "btree_check_ext",  672,  (const char *)(*(void *)(*(void *)(*a2 + 392LL) + 384LL) + 208LL),  22);
    }
  }

  return v11;
}

uint64_t btree_debug_stats_print(FILE *a1, uint64_t a2, _DWORD *a3, int a4)
{
  uint64_t v67 = *MEMORY[0x1895F89C0];
  if (a1) {
    a4 = 5;
  }
  if (a1) {
    uint64_t v7 = a1;
  }
  else {
    uint64_t v7 = (FILE *)*MEMORY[0x1895F89E0];
  }
  if (a4 >= 2)
  {
    unint64_t v8 = *(_DWORD **)(a2 + 392);
    int v9 = v8[1];
    int v10 = v8[2];
    int v11 = v8[3];
    if (v10) {
      int v12 = v10;
    }
    else {
      int v12 = 8;
    }
    if (v11) {
      int v13 = v11;
    }
    else {
      int v13 = 8;
    }
    unsigned int v14 = *a3;
    if (*a3 <= 1u) {
      unsigned int v14 = 1;
    }
    fprintf( v7,  "nodesize: %d  dataspace: %d  key size: %d  val size: %d  max keys: node %d leaf %d  avg keys: node %d leaf %d\n",  v9,  v9 - 56,  v10,  v11,  (v9 - 56) / (v12 + 8),  (v9 - 56) / (v13 + v12),  a3[3] / v14,  a3[4] / a3[1]);
  }

  unint64_t v16 = *((void *)a3 + 11);
  if (v16 <= 1) {
    unint64_t v16 = 1LL;
  }
  double v17 = (double)*((unint64_t *)a3 + 12) * 100.0 / (double)v16;
  unint64_t v18 = *((void *)a3 + 16);
  if (v18 <= 1) {
    unint64_t v18 = 1LL;
  }
  unsigned int v15 = a3[1];
  uint64_t result = fprintf( v7,  "levels: %d  keys: %lld  nodes: total %d  internal: %d (%.2f%%)  leaves: %d (%.2f%%)  usage: %.2f%% (%.2f%% %.2f%%)\n",  a3[2],  *(void *)(*(void *)(a2 + 392) + 24LL),  v15 + *a3,  *a3,  (double)*a3 * 100.0 / (double)(v15 + *a3),  v15,  (double)v15 * 100.0 / (double)(v15 + *a3),  (double)*((unint64_t *)a3 + 7) * 100.0 / (double)*((unint64_t *)a3 + 6),  v17,  (double)*((unint64_t *)a3 + 17) * 100.0 / (double)v18);
  if (a4 > 2)
  {
    uint64_t v20 = 0LL;
    int v21 = 0;
    __int128 v22 = a3 + 54;
    do
    {
      if (v22[v20])
      {
        if (v20) {
          uint64_t result = fprintf(v7, "level %d: %d nodes %.2f average descendents\n");
        }
        else {
          uint64_t result = fprintf(v7, "level %d: %d nodes\n");
        }
        v21 += v22[v20];
      }

      ++v20;
    }

    while (v20 != 16);
  }

  if (a4 >= 2)
  {
    LODWORD(v23) = a3[4];
    unint64_t v23 = v23 <= 1 ? 1LL : v23;
    uint64_t result = fprintf( v7,  "key/val sizes:  tree max k:%d v:%d  max k:%d v:%d  avg k:%llu v:%llu\n",  *(_DWORD *)(*(void *)(a2 + 392) + 16LL),  *(_DWORD *)(*(void *)(a2 + 392) + 20LL),  a3[52],  a3[53],  *((void *)a3 + 18) / v23,  *((void *)a3 + 19) / v23);
    if (a4 >= 4)
    {
      __int128 v65 = 0u;
      __int128 v66 = 0u;
      __int128 v63 = 0u;
      __int128 v64 = 0u;
      *(_OWORD *)__str = 0u;
      __int128 v62 = 0u;
      snprintf(__str, 0x10uLL, "<%d", *(_DWORD *)(*(void *)(a2 + 392) + 16LL) / 5u);
      snprintf((char *)&v62, 0x10uLL, "<%d", 2 * *(_DWORD *)(*(void *)(a2 + 392) + 16LL) / 5u);
      snprintf((char *)&v63, 0x10uLL, "<%d", 3 * *(_DWORD *)(*(void *)(a2 + 392) + 16LL) / 5u);
      snprintf((char *)&v64, 0x10uLL, "<%d", 4 * *(_DWORD *)(*(void *)(a2 + 392) + 16LL) / 5u);
      snprintf((char *)&v65, 0x10uLL, "<%d", *(_DWORD *)(*(void *)(a2 + 392) + 16LL));
      snprintf((char *)&v66, 0x10uLL, "=%d", *(_DWORD *)(*(void *)(a2 + 392) + 16LL));
      fprintf( v7,  "    keys: %9s %9s %9s %9s %9s %9s\n",  __str,  (const char *)&v62,  (const char *)&v63,  (const char *)&v64,  (const char *)&v65,  (const char *)&v66);
      fprintf(v7, "    keys: %9d %9d %9d %9d %9d %9d\n", a3[40], a3[41], a3[42], a3[43], a3[44], a3[45]);
      LODWORD(v29) = a3[40];
      double v30 = (double)v29 * 100.0;
      unsigned int v31 = a3[4];
      if (v31 <= 1) {
        unsigned int v31 = 1;
      }
      LODWORD(v24) = a3[41];
      LODWORD(v25) = a3[42];
      LODWORD(v26) = a3[43];
      LODWORD(v27) = a3[44];
      LODWORD(v28) = a3[45];
      fprintf( v7,  "    keys: %9.2f %9.2f %9.2f %9.2f %9.2f %9.2f\n",  v30 / (double)v31,  (double)v24 * 100.0 / (double)v31,  (double)v25 * 100.0 / (double)v31,  (double)v26 * 100.0 / (double)v31,  (double)v27 * 100.0 / (double)v31,  (double)v28 * 100.0 / (double)v31);
      snprintf(__str, 0x10uLL, "<%d", *(_DWORD *)(*(void *)(a2 + 392) + 20LL) / 5u);
      snprintf((char *)&v62, 0x10uLL, "<%d", 2 * *(_DWORD *)(*(void *)(a2 + 392) + 20LL) / 5u);
      snprintf((char *)&v63, 0x10uLL, "<%d", 3 * *(_DWORD *)(*(void *)(a2 + 392) + 20LL) / 5u);
      snprintf((char *)&v64, 0x10uLL, "<%d", 4 * *(_DWORD *)(*(void *)(a2 + 392) + 20LL) / 5u);
      snprintf((char *)&v65, 0x10uLL, "<%d", *(_DWORD *)(*(void *)(a2 + 392) + 20LL));
      snprintf((char *)&v66, 0x10uLL, "=%d", *(_DWORD *)(*(void *)(a2 + 392) + 20LL));
      fprintf( v7,  "  values: %9s %9s %9s %9s %9s %9s\n",  __str,  (const char *)&v62,  (const char *)&v63,  (const char *)&v64,  (const char *)&v65,  (const char *)&v66);
      fprintf(v7, "  values: %9d %9d %9d %9d %9d %9d\n", a3[46], a3[47], a3[48], a3[49], a3[50], a3[51]);
      LODWORD(v37) = a3[46];
      double v38 = (double)v37 * 100.0;
      unsigned int v39 = a3[4];
      if (v39 <= 1) {
        unsigned int v40 = 1;
      }
      else {
        unsigned int v40 = a3[4];
      }
      double v41 = v38 / (double)v40;
      LODWORD(v32) = a3[47];
      double v42 = (double)v32 * 100.0 / (double)v40;
      LODWORD(v33) = a3[48];
      LODWORD(v34) = a3[49];
      double v43 = (double)v33 * 100.0 / (double)v40;
      double v44 = (double)v34 * 100.0;
      double v45 = (double)v39;
      if (!v39) {
        double v45 = 1.0;
      }
      LODWORD(v35) = a3[50];
      LODWORD(v36) = a3[51];
      fprintf( v7,  "  values: %9.2f %9.2f %9.2f %9.2f %9.2f %9.2f\n",  v41,  v42,  v43,  v44 / v45,  (double)v35 * 100.0 / v45,  (double)v36 * 100.0 / v45);
      fprintf( v7,  "capacity: all    %llu / %llu => %.2f %% used\n",  *((void *)a3 + 7),  *((void *)a3 + 6),  (double)*((unint64_t *)a3 + 7) * 100.0 / (double)*((unint64_t *)a3 + 6));
      if (a4 == 4)
      {
        fprintf(v7, "capacity: nodes  %llu / %llu => %.2f %% used\n");
      }

      else
      {
        fprintf(v7, "capacity: %9s %9s %9s %9s %9s %9s\n", "<20", "<40", "<60", "<80", "<100", "FULL");
        fprintf(v7, "capacity: %9d %9d %9d %9d %9d %9d\n", a3[5], a3[6], a3[7], a3[8], a3[9], a3[10]);
        LODWORD(v46) = a3[5];
        LODWORD(v47) = a3[6];
        unsigned int v48 = a3[1] + *a3;
        LODWORD(v49) = a3[7];
        LODWORD(v50) = a3[8];
        LODWORD(v51) = a3[9];
        LODWORD(v52) = a3[10];
        fprintf( v7,  "capacity: %9.2f %9.2f %9.2f %9.2f %9.2f %9.2f\n",  (double)v46 * 100.0 / (double)v48,  (double)v47 * 100.0 / (double)v48,  (double)v49 * 100.0 / (double)v48,  (double)v50 * 100.0 / (double)v48,  (double)v51 * 100.0 / (double)v48,  (double)v52 * 100.0 / (double)v48);
        fprintf( v7,  "capacity: nodes  %llu / %llu => %.2f %% used\n",  *((void *)a3 + 12),  *((void *)a3 + 11),  (double)*((unint64_t *)a3 + 12) * 100.0 / (double)*((unint64_t *)a3 + 11));
        fprintf(v7, "capacity: %9s %9s %9s %9s %9s %9s\n", "<20", "<40", "<60", "<80", "<100", "FULL");
        fprintf(v7, "capacity: %9d %9d %9d %9d %9d %9d\n", a3[16], a3[17], a3[18], a3[19], a3[20], a3[21]);
        fprintf(v7, "capacity: %9.2f %9.2f %9.2f %9.2f %9.2f %9.2f\n");
      }

      uint64_t result = fprintf( v7,  "capacity: leaves %llu / %llu => %.2f %% used\n",  *((void *)a3 + 17),  *((void *)a3 + 16),  (double)*((unint64_t *)a3 + 17) * 100.0 / (double)*((unint64_t *)a3 + 16));
      if (a4 != 4)
      {
        fprintf(v7, "capacity: %9s %9s %9s %9s %9s %9s\n", "<20", "<40", "<60", "<80", "<100", "FULL");
        fprintf(v7, "capacity: %9d %9d %9d %9d %9d %9d\n", a3[26], a3[27], a3[28], a3[29], a3[30], a3[31]);
        LODWORD(v53) = a3[26];
        LODWORD(v54) = a3[27];
        LODWORD(v55) = a3[1];
        double v56 = (double)v55;
        LODWORD(v57) = a3[28];
        LODWORD(v58) = a3[29];
        LODWORD(v59) = a3[30];
        LODWORD(v60) = a3[31];
        return fprintf( v7,  "capacity: %9.2f %9.2f %9.2f %9.2f %9.2f %9.2f\n",  (double)v53 * 100.0 / v56,  (double)v54 * 100.0 / v56,  (double)v57 * 100.0 / v56,  (double)v58 * 100.0 / v56,  (double)v59 * 100.0 / v56,  (double)v60 * 100.0 / v56);
      }
    }
  }

  return result;
}

uint64_t btree_check(void *a1, uint64_t a2, int a3, int a4)
{
  return btree_check_ext(0LL, a1, a2, a3, a4);
}

uint64_t btree_check_recent_sanity( char *a1, unint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, unint64_t, void, void, uint64_t, void), uint64_t a4)
{
  uint64_t v40 = a4;
  double v41 = a3;
  v45[1] = *MEMORY[0x1895F89C0];
  uint64_t v6 = *((void *)a1 + 1);
  if (!v6) {
    uint64_t v6 = *(void *)(*(void *)a1 + 392LL);
  }
  MEMORY[0x1895F8858]();
  unint64_t v8 = (uint64_t *)((char *)&v40 - v7);
  bzero((char *)&v40 - v7, v9);
  uint64_t v44 = 0LL;
  v45[0] = 0LL;
  int v42 = 0;
  unsigned int v43 = 0;
  obj_lock((uint64_t)a1, 1);
  uint64_t v10 = btree_level_count((uint64_t)a1, &v43);
  if ((_DWORD)v10)
  {
    uint64_t v11 = v10;
    obj_unlock((uint64_t)a1, 1);
    return v11;
  }

  int v12 = _apfs_calloc(v43, 0x10uLL);
  if (!v12)
  {
    obj_unlock((uint64_t)a1, 1);
    return 12LL;
  }

  int v13 = v12;
  void *v12 = a1;
  *((_WORD *)v12 + 4) = 0;
  obj_retain(a1);
  unsigned __int16 v14 = 0;
  while (1)
  {
    while (1)
    {
      uint64_t v15 = v14;
      unint64_t v16 = &v13[2 * v14];
      if (obj_xid(*v16) <= a2)
      {
        uint64_t v21 = *v16;
        goto LABEL_16;
      }

      double v17 = (char *)&v13[2 * v15];
      unsigned int v20 = *((unsigned __int16 *)v17 + 4);
      __int128 v19 = v17 + 8;
      unsigned int v18 = v20;
      uint64_t v21 = *v16;
      uint64_t v22 = *(void *)(*v16 + 56);
      if (*(_DWORD *)(v22 + 36) > v20) {
        break;
      }
LABEL_16:
      btree_node_release(v21, 1);
      *unint64_t v16 = 0LL;
      unsigned __int16 v14 = v15 - 1;
      if ((((_WORD)v15 - 1) & 0x8000) != 0)
      {
LABEL_27:
        uint64_t v11 = 0LL;
        goto LABEL_29;
      }
    }

    if ((*(_WORD *)(v22 + 32) & 2) != 0) {
      break;
    }
    uint64_t v23 = btree_node_child_val(v21, v18, v8);
    if ((_DWORD)v23)
    {
      uint64_t v11 = v23;
      obj_oid(*v16);
      log_err("%s:%d: %s node 0x%llx (level %d): error getting index %d child oid: %d\n");
      goto LABEL_29;
    }

    ++*v19;
    unsigned __int16 v24 = v15 + 1;
    if (v43 <= (__int16)v24)
    {
      uint64_t v36 = *((void *)a1 + 1);
      if (v36) {
        unint64_t v37 = (const char *)(v36 + 3992);
      }
      else {
        unint64_t v37 = (const char *)(*(void *)(*(void *)(*(void *)a1 + 392LL) + 384LL) + 208LL);
      }
      double v38 = (char *)&v13[2 * (__int16)v24];
      uint64_t v39 = obj_oid(*((void *)v38 - 2));
      log_err( "%s:%d: %s node 0x%llx (level %d) index %d: more levels than expected\n",  "btree_check_recent_sanity",  769,  v37,  v39,  *(unsigned __int16 *)(*(void *)(*((void *)v38 - 2) + 56LL) + 34LL),  *((unsigned __int16 *)v38 - 4));
      uint64_t v11 = 22LL;
      goto LABEL_29;
    }

    unint64_t v25 = (char *)&v13[2 * (__int16)v24];
    *((_WORD *)v25 + 4) = 0;
    uint64_t v26 = (__int16)v24 - 1LL;
    uint64_t v27 = btree_node_get(a1, v8, 0LL, 2, *(_WORD *)(*(void *)(v13[2 * v26] + 56LL) + 34LL) - 1, 0LL, (uint64_t *)v25);
    unsigned __int16 v14 = v24;
    if ((_DWORD)v27)
    {
      uint64_t v11 = v27;
      obj_oid(v13[2 * v26]);
      log_err("%s:%d: %s node 0x%llx (level %d): error getting index %d child: %d\n");
      goto LABEL_29;
    }

    if ((v24 & 0x8000) != 0) {
      goto LABEL_27;
    }
  }

  if (!v41) {
    goto LABEL_16;
  }
  unsigned int v28 = 0;
  while (1)
  {
    uint64_t v29 = btree_node_key_ptr(v21, (unsigned __int16)v28, v45, (_WORD *)&v42 + 1);
    if ((_DWORD)v29
      || (uint64_t v29 = btree_node_val_ptr((void *)*v16, (unsigned __int16)v28, &v44, (__int16 *)&v42), (_DWORD)v29))
    {
      uint64_t v11 = v29;
      obj_oid(*v16);
      log_err("%s:%d: %s node 0x%llx (level %d): error getting index %d key/val: %d\n");
      goto LABEL_29;
    }

    uint64_t v30 = v41(v6, v40, a2, v45[0], HIWORD(v42), v44, (unsigned __int16)v42);
    if ((_DWORD)v30) {
      break;
    }
    ++v28;
    uint64_t v21 = *v16;
    if (v28 >= *(_DWORD *)(*(void *)(*v16 + 56) + 36LL)) {
      goto LABEL_16;
    }
  }

  uint64_t v11 = v30;
LABEL_29:
  unsigned int v31 = v43;
  if ((((_WORD)v43 - 1) & 0x8000) == 0)
  {
    unsigned __int16 v32 = v43 - 1;
    do
    {
      uint64_t v33 = v13[2 * v32];
      if (v33) {
        btree_node_release(v33, 1);
      }
      int v34 = (__int16)v32--;
    }

    while (v34 > 0);
    unsigned int v31 = v43;
  }

  _apfs_free(v13, 16LL * v31);
  return v11;
}

uint64_t nx_check(void *a1, char a2)
{
  uint64_t v3 = a1;
  uint64_t v276 = 0LL;
  unsigned int v277 = 0LL;
  int v275 = 0;
  int v273 = 0LL;
  uint64_t v274 = 0LL;
  uint64_t v271 = 0LL;
  int v272 = 0LL;
  __int128 v269 = 0uLL;
  unint64_t v270 = 0LL;
  unint64_t v267 = 0LL;
  unint64_t v268 = 0LL;
  uint64_t v265 = 0LL;
  uint64_t v266 = 0LL;
  uint64_t v4 = a1[47];
  uint64_t v5 = spaceman_get(a1, (uint64_t *)&v277);
  if ((_DWORD)v5)
  {
    uint64_t v6 = v5;
    log_err("%s:%d: %s unable to get spaceman: %d\n", "nx_check", 70, (const char *)(v3[48] + 208LL), v5);
    return v6;
  }

  uint64_t v7 = (uint32x2_t *)v277[47];
  unint64_t v8 = obj_xid((uint64_t)v277);
  __int32 v9 = v7[4].i32[0];
  uint64_t v256 = v4;
  int v10 = *(_DWORD *)(v4 + 36);
  if (v9 != v10)
  {
    ++v275;
    log_warn( "%s:%d: %s spaceman block size %d doesn't match nx superblock block size %d\n",  "nx_check",  78,  (const char *)(v3[48] + 208LL),  v9,  v10);
    __int32 v9 = v7[4].i32[0];
  }

  char v242 = a2;
  __int32 v11 = v7[4].i32[1];
  LODWORD(v12) = v9;
  if (v11 != 8 * v9)
  {
    ++v275;
    log_warn("%s:%d: %s spaceman blocks per chunk is bad: %d\n", "nx_check", 82, (const char *)(v3[48] + 208LL), v11);
    LODWORD(v12) = v7[4].i32[0];
  }

  unint64_t v13 = v12 + 0x1FFFFFFFD8LL;
  unint64_t v14 = v13 >> 5;
  __int32 v15 = v7[5].i32[0];
  if (v15 == (v13 >> 5))
  {
    uint64_t v12 = v12;
  }

  else
  {
    ++v275;
    log_warn("%s:%d: %s spaceman chunks per cib is bad: %d\n", "nx_check", 86, (const char *)(v3[48] + 208LL), v15);
    uint64_t v12 = v7[4].u32[0];
  }

  unint64_t v260 = v12 + 0x7FFFFFFD8LL;
  unint64_t v16 = (unint64_t)(v12 + 0x7FFFFFFD8LL) >> 3;
  __int32 v17 = v7[5].i32[1];
  unsigned int v250 = v16;
  if (v17 != (_DWORD)v16)
  {
    ++v275;
    log_warn("%s:%d: %s spaceman cibs per cab is bad: %d\n", "nx_check", 90, (const char *)(v3[48] + 208LL), v17);
  }

  unint64_t v18 = (8 * v9);
  uint32x2_t v19 = v7[6];
  uint64_t v20 = *(void *)&v7[12] + *(void *)&v19;
  uint64_t v21 = *(void *)(v256 + 40);
  if (v20 != v21)
  {
    ++v275;
    log_warn( "%s:%d: %s spaceman block count %lld doesn't match nx superblock block count %lld\n",  "nx_check",  94,  (const char *)(v3[48] + 208LL),  v20,  v21);
    uint32x2_t v19 = v7[6];
  }

  uint32x2_t v22 = v7[7];
  if (*(void *)&v19 % v18) {
    uint64_t v23 = *(void *)&v19 / v18 + 1;
  }
  else {
    uint64_t v23 = *(void *)&v19 / v18;
  }
  if (*(void *)&v22 != v23)
  {
    ++v275;
    log_warn( "%s:%d: %s spaceman chunk count is bad: %lld\n",  "nx_check",  97,  (const char *)(v3[48] + 208LL),  *(void *)&v22);
    uint32x2_t v22 = v7[7];
  }

  uint64_t v24 = v7[8].u32[0];
  unint64_t v25 = (v13 >> 5);
  unint64_t v249 = v25;
  if (*(void *)&v22 % v25) {
    uint64_t v26 = *(void *)&v22 / v25 + 1;
  }
  else {
    uint64_t v26 = *(void *)&v22 / v25;
  }
  if (v26 != v24)
  {
    ++v275;
    log_warn("%s:%d: %s spaceman cib count is bad: %d\n", "nx_check", 100, (const char *)(v3[48] + 208LL), v24);
    LODWORD(v24) = v7[8].i32[0];
  }

  unsigned int v27 = v24 / v250;
  if (v27 == 1) {
    unsigned int v28 = 0;
  }
  else {
    unsigned int v28 = v27;
  }
  __int32 v29 = v7[8].i32[1];
  if (v29 != v28)
  {
    ++v275;
    log_warn("%s:%d: %s spaceman cab count is bad: %d\n", "nx_check", 109, (const char *)(v3[48] + 208LL), v29);
  }

  uint32x2_t v30 = v7[9];
  uint32x2_t v31 = v7[6];
  if (*(void *)&v30 > *(void *)&v31)
  {
    ++v275;
    log_warn( "%s:%d: %s spaceman free count is too large: %lld > %lld\n",  "nx_check",  112,  (const char *)(v3[48] + 208LL),  *(void *)&v30,  *(void *)&v31);
  }

  uint32x2_t v33 = v7[12];
  uint32x2_t v32 = v7[13];
  if (*(void *)&v33 % v18) {
    uint64_t v34 = *(void *)&v33 / v18 + 1;
  }
  else {
    uint64_t v34 = *(void *)&v33 / v18;
  }
  if (*(void *)&v32 != v34)
  {
    ++v275;
    log_warn( "%s:%d: %s spaceman tier2 chunk count is bad: %lld\n",  "nx_check",  116,  (const char *)(v3[48] + 208LL),  *(void *)&v32);
    uint32x2_t v32 = v7[13];
  }

  uint64_t v35 = v7[14].u32[0];
  if (*(void *)&v32 % v249) {
    uint64_t v36 = *(void *)&v32 / v249 + 1;
  }
  else {
    uint64_t v36 = *(void *)&v32 / v249;
  }
  if (v36 != v35)
  {
    ++v275;
    log_warn("%s:%d: %s spaceman tier2 cib count is bad: %d\n", "nx_check", 119, (const char *)(v3[48] + 208LL), v35);
    LODWORD(v35) = v7[14].i32[0];
  }

  unsigned int v37 = v35 / v250;
  if (v37 == 1) {
    unsigned int v38 = 0;
  }
  else {
    unsigned int v38 = v37;
  }
  __int32 v39 = v7[14].i32[1];
  if (v39 != v38)
  {
    ++v275;
    log_warn("%s:%d: %s spaceman tier2 cab count is bad: %d\n", "nx_check", 128, (const char *)(v3[48] + 208LL), v39);
  }

  uint32x2_t v40 = v7[15];
  uint32x2_t v41 = v7[12];
  if (*(void *)&v40 > *(void *)&v41)
  {
    ++v275;
    log_warn( "%s:%d: %s spaceman tier2 free count is too large: %lld > %lld\n",  "nx_check",  131,  (const char *)(v3[48] + 208LL),  *(void *)&v40,  *(void *)&v41);
  }

  uint64_t v42 = vaddvq_s64((int64x2_t)vaddl_u32(v7[8], v7[14])) + *(void *)&v7[7] + *(void *)&v7[13];
  uint64_t v43 = *(void *)&v7[19] & 0x7FFFFFFFFFFFFFFFLL;
  if (v43 != 3 * v42)
  {
    ++v275;
    log_warn("%s:%d: %s spaceman IP block count is bad: %lld\n", "nx_check", 137, (const char *)(v3[48] + 208LL), v43);
    uint64_t v43 = *(void *)&v7[19] & 0x7FFFFFFFFFFFFFFFLL;
  }

  uint64_t v44 = v7[20].u32[0];
  if ((v7[4].u32[0] + 8 * ((unint64_t)(v43 + 63) >> 6) - 1) / v7[4].u32[0] != v44)
  {
    ++v275;
    log_warn("%s:%d: %s spaceman IP bm block count is bad: %d\n", "nx_check", 140, (const char *)(v3[48] + 208LL), v44);
  }

  unsigned int v45 = v7[20].i32[1] & 0x7FFFFFFF;
  if (v45 >= 0xFFFF)
  {
    ++v275;
    log_warn( "%s:%d: %s spaceman IP bitmap block count is too large: %d\n",  "nx_check",  143,  (const char *)(v3[48] + 208LL),  v45);
  }

  unsigned int v46 = v7[18].u32[1];
  if (v46 <= 3)
  {
    ++v275;
    log_warn( "%s:%d: %s spaceman IP bitmap tx multiplier is too small: %d\n",  "nx_check",  146,  (const char *)(v3[48] + 208LL),  v46);
  }

  unsigned __int32 v47 = v7[20].u32[0];
  unsigned int v48 = v7[20].i32[1] & 0x7FFFFFFF;
  if (v48 / v47 <= 3)
  {
    ++v275;
    log_warn( "%s:%d: %s spaceman IP bitmap block count per tx is too small: %d\n",  "nx_check",  149,  (const char *)(v3[48] + 208LL),  v48 / v47);
    unsigned __int32 v47 = v7[20].u32[0];
    unsigned int v48 = v7[20].i32[1] & 0x7FFFFFFF;
  }

  unsigned __int32 v49 = v7[18].u32[1];
  if (v48 != v49 * v47)
  {
    unsigned int v50 = 65534;
    if (v48 != 65534)
    {
      ++v275;
      log_warn( "%s:%d: %s spaceman IP bitmap block count is bad: %d\n",  "nx_check",  156,  (const char *)(v3[48] + 208LL),  v48);
      unsigned __int32 v47 = v7[20].u32[0];
      unsigned __int32 v49 = v7[18].u32[1];
      unsigned int v50 = v7[20].i32[1] & 0x7FFFFFFF;
    }

    if (v50 / v47 < v49 >> 1)
    {
      ++v275;
      log_warn( "%s:%d: %s spaceman IP bitmap block count is too low: %d\n",  "nx_check",  159,  (const char *)(v3[48] + 208LL),  v50);
    }
  }

  uint32x2_t v51 = v7[6];
  uint32x2_t v52 = v7[21];
  if (!*(void *)&v52 || *(void *)&v52 >= *(void *)&v51)
  {
    ++v275;
    log_warn( "%s:%d: %s spaceman IP bm base address is bad: %lld\n",  "nx_check",  166,  (const char *)(v3[48] + 208LL),  *(void *)&v52);
  }

  uint32x2_t v53 = v7[22];
  if (!*(void *)&v53 || *(void *)&v53 >= *(void *)&v51)
  {
    ++v275;
    log_warn( "%s:%d: %s spaceman IP base address is bad: %lld\n",  "nx_check",  169,  (const char *)(v3[48] + 208LL),  *(void *)&v53);
  }

  uint64_t v262 = v42;
  unint64_t v253 = v8;
  uint64_t v247 = v7;
  if (v7[20].i32[0])
  {
    unint64_t v54 = 0LL;
    unint64_t v244 = 0LL;
    do
    {
      unint64_t v55 = v277;
      unint64_t v56 = *(void *)(v277[108] + 8 * v54);
      if (v56 > v8)
      {
        ++v275;
        log_warn( "%s:%d: %s spaceman IP bitmap block %d xid %lld > spaceman xid %lld\n",  "nx_check",  176,  (const char *)(v3[48] + 208LL),  v54,  v56,  v8);
        unint64_t v55 = v277;
      }

      unsigned int v57 = *(unsigned __int16 *)(v55[109] + 2 * v54);
      if ((v7[20].i32[1] & 0x7FFFFFFFu) <= v57)
      {
        ++v275;
        log_warn( "%s:%d: %s spaceman IP bitmap block %d index %d out of range\n",  "nx_check",  179,  (const char *)(v3[48] + 208LL),  v54,  v57);
        unsigned int v57 = *(unsigned __int16 *)(v277[109] + 2 * v54);
      }

      int v58 = spaceman_ip_bm_block_address((uint64_t)v3, (uint64_t)v7, v57, &v267);
      if (v58
        || (int v58 = obj_get(v3[49], 0x40000000u, v267, (int *)&sm_bm_desc, 0LL, 0LL, 0LL, 0LL, (uint64_t *)&v272)) != 0)
      {
        ++v275;
        log_warn( "%s:%d: %s spaceman IP bitmap unable to get bitmap block %d @ %lld: %d\n",  "nx_check",  187,  (const char *)(v3[48] + 208LL),  v54,  v267,  v58);
      }

      else
      {
        if (v54 == v7[20].i32[0] - 1) {
          unint64_t v59 = (*(void *)&v7[19] & 0x7FFFFFFFFFFFFFFFuLL) % (8 * v7[4].i32[0]);
        }
        else {
          unint64_t v59 = (8 * v7[4].i32[0]);
        }
        v244 += bitmap_count_bits(v272[7], 0, 0LL, v59);
        obj_release(v272);
      }

      ++v54;
    }

    while (v54 < v7[20].u32[0]);
  }

  else
  {
    unint64_t v244 = 0LL;
  }

  uint64_t v60 = v42;
  unint64_t v61 = *(void *)&v7[7] + 2 * v42 + *(void *)&v7[13] - 1;
  if (v244 > v61)
  {
    ++v275;
    log_warn( "%s:%d: %s spaceman IP bitmap has too many free blocks %lld > %lld\n",  "nx_check",  196,  (const char *)(v3[48] + 208LL),  v244,  v61);
  }

  unsigned int v62 = v7[40].u16[0];
  __int32 v63 = v7[20].i32[1];
  LODWORD(v64) = v63 & 0x7FFFFFFF;
  if ((v63 & 0x7FFFFFFFu) <= v62)
  {
    ++v275;
    log_warn( "%s:%d: %s spaceman IP bitmap free head %d out of range\n",  "nx_check",  201,  (const char *)(v3[48] + 208LL),  v62);
    __int32 v63 = v7[20].i32[1];
    LODWORD(v64) = v63 & 0x7FFFFFFF;
  }

  unsigned int v65 = v7[40].u16[1];
  if (v64 > v65
    || (++v275,
        log_warn( "%s:%d: %s spaceman IP bitmap free head %d out of range\n",  "nx_check",  204,  (const char *)(v3[48] + 208LL),  v65),  __int32 v63 = v7[20].i32[1],  LODWORD(v64) = v63 & 0x7FFFFFFF,  (v63 & 0x7FFFFFFF) != 0))
  {
    unint64_t v66 = 0LL;
    uint64_t v67 = 0LL;
    uint64_t v68 = v277[110];
    do
    {
      unsigned int v69 = *(unsigned __int16 *)(v68 + 2 * v66);
      BOOL v70 = v69 == 0xFFFF || v64 > v69;
      if (!v70)
      {
        ++v275;
        log_warn( "%s:%d: %s spaceman IP bitmap free next %d, value %d invalid\n",  "nx_check",  209,  (const char *)(v3[48] + 208LL),  v66,  v69);
        __int32 v63 = v7[20].i32[1];
        uint64_t v68 = v277[110];
        unsigned int v69 = *(unsigned __int16 *)(v68 + 2 * v66);
      }

      unint64_t v64 = v63 & 0x7FFFFFFF;
      ++v66;
    }

    while (v66 < v64);
  }

  else
  {
    uint64_t v67 = 0LL;
  }

  uint64_t v71 = v7;
  unsigned int v72 = v7[40].u16[0];
  if (v72 == 0xFFFF) {
    uint64_t v73 = v67;
  }
  else {
    uint64_t v73 = v67 + 1;
  }
  uint64_t v74 = (v64 - v7[20].i32[0]);
  if (v73 != v74)
  {
    ++v275;
    log_warn( "%s:%d: %s spaceman IP bitmap next array free count is wrong, %lld != %d\n",  "nx_check",  224,  (const char *)(v3[48] + 208LL),  v73,  v74);
    __int32 v63 = v7[20].i32[1];
    unsigned int v72 = v7[40].u16[0];
  }

  unsigned int v75 = v63 & 0x7FFFFFFF;
  if (v75 && v75 > v72)
  {
    uint64_t v76 = 0LL;
    do
    {
      ++v76;
      unsigned int v72 = *(unsigned __int16 *)(v277[110] + 2LL * v72);
    }

    while (v76 < v75 && v75 > v72);
    v73 -= v76;
  }

  if (v73 < 0)
  {
    ++v275;
    log_warn("%s:%d: %s spaceman IP bitmap free list corrupted, too long, count %lld\n");
  }

  else if (v73)
  {
    ++v275;
    log_warn("%s:%d: %s spaceman IP bitmap free list corrupted, too short, count %lld\n");
  }

  unint64_t v78 = (unint64_t)v7[25];
  unint64_t v79 = *(void *)&v7[19] & 0x7FFFFFFFFFFFFFFFLL;
  if (v78 > v79)
  {
    ++v275;
    log_warn( "%s:%d: %s spaceman IP free queue count is too large: %lld > %lld\n",  "nx_check",  244,  (const char *)(v3[48] + 208LL),  v78,  v79);
  }

  if (v7[26])
  {
    int v80 = spaceman_fq_tree_get((uint64_t)v3, (uint64_t)v277, 0, 0LL, 0, (uint64_t *)&v271);
    if (v80)
    {
      ++v275;
      log_warn( "%s:%d: %s unable to get spaceman IP free queue tree: %d\n",  "nx_check",  252,  (const char *)(v3[48] + 208LL),  v80);
    }

    else if (v271)
    {
      int v151 = btree_check(v271, 0LL, 0, 0);
      if (v151)
      {
        int v152 = v151;
        ++v275;
        log_warn( "%s:%d: %s spaceman IP free queue tree sanity check failed: %d\n",  "nx_check",  256,  (const char *)(v3[48] + 208LL),  v151);
        uint64_t v266 = 0x1000000008LL;
      }

      else
      {
        uint64_t v266 = 0x1000000008LL;
        int v152 = bt_lookup_first((uint64_t)v271, 0LL, &v269, (_DWORD *)&v266 + 1, &v270, (unsigned int *)&v266);
      }

      unint64_t v178 = 0LL;
      uint64_t v81 = 0LL;
      for (uint64_t i = 0LL;
            !v152;
            int v152 = bt_lookup_variant( (uint64_t)v271,  0LL,  (unint64_t *)&v269,  (unsigned int *)&v266 + 1,  HIDWORD(v266),  &v270,  (unsigned int *)&v266,  4u,  0,  0LL))
      {
        if ((_DWORD)v266)
        {
          uint64_t v180 = v270;
        }

        else
        {
          unint64_t v270 = 1LL;
          uint64_t v180 = 1LL;
        }

        unint64_t v181 = v269;
        if ((unint64_t)v269 > v253)
        {
          ++v275;
          log_warn( "%s:%d: %s spaceman IP free queue tree entry %lld:%lld xid larger than spaceman xid %lld\n",  "nx_check",  269,  (const char *)(v3[48] + 208LL),  (void)v269,  *((void *)&v269 + 1),  v253);
          unint64_t v181 = v269;
        }

        if (v181 >= v178)
        {
          unint64_t v182 = *((void *)&v269 + 1);
          if (v181 == v178)
          {
            if (*((uint64_t *)&v269 + 1) < i)
            {
              ++v275;
              log_warn( "%s:%d: %s spaceman IP free queue tree entries out of order: addr %lld < %lld\n",  "nx_check",  277,  (const char *)(v3[48] + 208LL),  *((void *)&v269 + 1),  i);
              unint64_t v182 = *((void *)&v269 + 1);
            }

            uint64_t i = v270 + v182;
          }

          else
          {
            uint64_t i = 0LL;
            unint64_t v178 = v181;
          }
        }

        else
        {
          ++v275;
          log_warn( "%s:%d: %s spaceman IP free queue tree entries out of order: xid %lld < %lld\n",  "nx_check",  272,  (const char *)(v3[48] + 208LL),  v181,  v178);
          uint64_t i = 0LL;
          unint64_t v182 = *((void *)&v269 + 1);
          unint64_t v178 = v269;
        }

        int v183 = spaceman_ip_block_index((uint64_t)v3, (uint64_t)v277, v182, &v265);
        if (v183)
        {
          ++v275;
          if (v183 == 2) {
            log_warn("%s:%d: %s spaceman IP free queue tree entry %lld:%lld %lld addr is bad\n");
          }
          else {
            log_warn("%s:%d: %s error getting IP block index for spaceman IP free queue tree entry %lld:%lld %lld\n");
          }
        }

        if (v270 >= 2)
        {
          int v184 = spaceman_ip_block_index((uint64_t)v3, (uint64_t)v277, v270 + *((void *)&v269 + 1) - 1, &v265);
          if (v184)
          {
            ++v275;
            if (v184 == 2) {
              log_warn("%s:%d: %s spaceman IP free queue tree entry %lld:%lld %lld end addr is bad\n");
            }
            else {
              log_warn("%s:%d: %s error getting end block index for spaceman IP free queue tree entry %lld:%lld %lld\n");
            }
          }
        }

        v81 += v180;
        LODWORD(v266) = 8;
      }

      if (v152 != 2)
      {
        ++v275;
        log_warn( "%s:%d: %s spaceman IP free queue tree iteration aborted with error %d\n",  "nx_check",  304,  (const char *)(v3[48] + 208LL),  v152);
      }

      obj_release(v271);
      uint64_t v71 = v247;
      uint64_t v60 = v262;
      goto LABEL_127;
    }
  }

  uint64_t v81 = 0LL;
LABEL_127:
  uint32x2_t v82 = v71[25];
  if (v81 != *(void *)&v82)
  {
    ++v275;
    log_warn( "%s:%d: %s spaceman IP free queue count %lld doesn't match count in the free queue: %lld\n",  "nx_check",  310,  (const char *)(v3[48] + 208LL),  *(void *)&v82,  v81);
  }

  uint64_t v83 = 0LL;
  uint64_t v84 = 0LL;
  uint64_t v258 = 0LL;
  uint64_t v259 = v3;
  uint64_t v243 = 2 * v60;
  unint64_t v85 = (v260 >> 3);
  char v86 = 1;
  uint64_t v245 = v81;
  unint64_t v87 = v253;
  unint64_t v251 = v85;
  do
  {
    uint64_t v88 = &v71[6 * v83];
    __int32 v90 = v88[8].i32[0];
    unsigned int v89 = v88 + 8;
    char v246 = v86;
    if (v90)
    {
      unint64_t v91 = 0LL;
      uint64_t v261 = 0LL;
      uint64_t v263 = 0LL;
      uint64_t v255 = v83;
      int8x16_t v92 = &v71[6 * v83];
      uint64_t v254 = (_DWORD *)&v92[8] + 1;
      BOOL v248 = v92 + 7;
      uint64_t v93 = 0xFFFFFFFFLL;
      while (1)
      {
        if (!*v254)
        {
          uint64_t v257 = v93;
          uint64_t v98 = v277;
          uint64_t v99 = (unint64_t *)(v277[v83 + 111] + 8 * v91);
          goto LABEL_157;
        }

        unint64_t v95 = v91 / v85;
        unint64_t v96 = *(void *)(v277[v83 + 111] + 8LL * v95);
        if (v274)
        {
          obj_release(v274);
          uint64_t v274 = 0LL;
        }

        int v97 = obj_get(v3[49], 0x40000000u, v96, (int *)&sm_cab_desc, 0LL, 0LL, 0LL, 0LL, (uint64_t *)&v274);
        if (v97)
        {
          ++v275;
          log_warn( "%s:%d: %s unable to read cab %d @ %lld: %d\n",  "nx_check",  332,  (const char *)(v3[48] + 208LL),  v95,  v96,  v97);
          uint64_t v93 = v95;
          unint64_t v87 = v253;
          unint64_t v85 = v251;
        }

        else
        {
          uint64_t v100 = v274[7];
          unint64_t v101 = *(unsigned int *)(v100 + 36);
          if (v101 <= ((unint64_t)obj_size_phys((uint64_t)v274) - 40) >> 3)
          {
            if (obj_xid((uint64_t)v274) > v253)
            {
              ++v275;
              int v102 = (const char *)(v3[48] + 208LL);
              uint64_t v103 = obj_xid((uint64_t)v274);
              log_warn("%s:%d: %s cab %d xid %lld > spaceman xid %lld\n", "nx_check", 344, v102, v95, v103, v253);
            }

            int v104 = *(_DWORD *)(v100 + 32);
            uint64_t v93 = v95;
            if (v104 != (_DWORD)v95)
            {
              ++v275;
              log_warn( "%s:%d: %s cab %d index %d should be %d\n",  "nx_check",  347,  (const char *)(v3[48] + 208LL),  v95,  v104,  v95);
              uint64_t v93 = v95;
            }

            int v105 = *(_DWORD *)(v100 + 36);
            uint64_t v83 = v255;
            if (v105 != v250 && (*v254 - 1 != (_DWORD)v93 || v105 != v89->i32[0] % v250))
            {
              ++v275;
              int v106 = v250;
              if (*v254 - 1 == (_DWORD)v93) {
                int v106 = v89->i32[0] % v250;
              }
              log_warn( "%s:%d: %s cab %d cib count %d should be %d\n",  "nx_check",  352,  (const char *)(v3[48] + 208LL),  v93,  v105,  v106);
              uint64_t v93 = v95;
            }

            uint64_t v84 = v100;
            unint64_t v87 = v253;
            unint64_t v85 = v251;
LABEL_156:
            uint64_t v257 = v93;
            uint64_t v99 = (unint64_t *)(v84 + 8 * (v91 - v93 * v250) + 40);
            uint64_t v98 = v277;
LABEL_157:
            unint64_t v107 = *v99;
            int v108 = spaceman_ip_block_index((uint64_t)v3, (uint64_t)v98, *v99, &v265);
            if (v108)
            {
              ++v275;
              if (v108 == 2) {
                log_warn("%s:%d: %s spaceman chunk info block %lld addr %lld not within IP block range\n");
              }
              else {
                log_warn("%s:%d: %s error getting IP block index for spaceman chunk info block %lld addr %lld\n");
              }
            }

            int v109 = obj_get(v3[49], 0x40000000u, v107, (int *)&sm_cib_desc, 0LL, 0LL, 0LL, 0LL, (uint64_t *)&v273);
            if (v109)
            {
              ++v275;
              log_warn( "%s:%d: %s unable to read cib %lld @ %lld: %d\n",  "nx_check",  369,  (const char *)(v3[48] + 208LL),  v91,  v107,  v109);
LABEL_216:
              uint64_t v93 = v257;
              goto LABEL_217;
            }

            if (obj_xid((uint64_t)v273) > v87)
            {
              ++v275;
              uint64_t v110 = (const char *)(v3[48] + 208LL);
              uint64_t v111 = obj_xid((uint64_t)v273);
              log_warn("%s:%d: %s cib %lld xid %lld > spaceman xid %lld\n", "nx_check", 374, v110, v91, v111, v87);
            }

            uint64_t v112 = v273[7];
            uint64_t v113 = *(unsigned int *)(v112 + 32);
            if (v91 != v113)
            {
              ++v275;
              log_warn( "%s:%d: %s cib %lld index %d should be %lld\n",  "nx_check",  378,  (const char *)(v3[48] + 208LL),  v91,  v113,  v91);
            }

            uint64_t v114 = *(unsigned int *)(v112 + 36);
            unsigned int v115 = v14;
            if ((_DWORD)v114 != (_DWORD)v14)
            {
              if (v91 != v89->i32[0] - 1 || (unsigned int v115 = *(_DWORD *)(v112 + 36), *(void *)v248 % v249 != v114))
              {
                ++v275;
                unint64_t v116 = v249;
                if (v91 == v89->i32[0] - 1) {
                  unint64_t v116 = *(void *)v248 % v249;
                }
                log_warn( "%s:%d: %s cib %lld chunk info count %d should be %lld\n",  "nx_check",  383,  (const char *)(v3[48] + 208LL),  v91,  v114,  v116);
                unsigned int v115 = *(_DWORD *)(v112 + 36);
              }

              if (v115 > v14)
              {
                ++v275;
                log_warn( "%s:%d: %s cib %lld cib_chunk_info_count %d invalid\n",  "nx_check",  387,  (const char *)(v3[48] + 208LL),  v107,  v115);
                unsigned int v115 = *(_DWORD *)(v112 + 36);
              }
            }

            uint64_t v252 = v84;
            else {
              unsigned int v117 = v115;
            }
            if (!v117)
            {
LABEL_215:
              obj_release(v273);
              uint64_t v84 = v252;
              unint64_t v87 = v253;
              unint64_t v85 = v251;
              uint64_t v83 = v255;
              goto LABEL_216;
            }

            unint64_t v118 = 0LL;
            unint64_t v119 = v18 * (unint64_t)v249 * v91;
            uint64_t v120 = (unint64_t *)(v112 + 64);
            while (2)
            {
              unint64_t v121 = *(v120 - 3);
              if (v121 > obj_xid((uint64_t)v273))
              {
                ++v275;
                int v122 = (const char *)(v3[48] + 208LL);
                uint64_t v123 = *(v120 - 3);
                uint64_t v124 = obj_xid((uint64_t)v273);
                uint64_t v241 = v123;
                uint64_t v3 = v259;
                log_warn( "%s:%d: %s cib %lld chunk info %d xid %lld > cib xid %lld\n",  "nx_check",  392,  v122,  v91,  v118,  v241,  v124);
              }

              uint64_t v125 = *(v120 - 2);
              if (v119 != v125)
              {
                ++v275;
                log_warn( "%s:%d: %s cib %lld chunk info %d addr %lld should be %lld\n",  "nx_check",  396,  (const char *)(v3[48] + 208LL),  v91,  v118,  v125,  v119);
              }

              uint64_t v126 = *(_DWORD *)(v120 - 1) & 0xFFFFF;
              if ((_DWORD)v126 != (_DWORD)v18
                && (v91 != v89->i32[0] - 1 || v118 != *(_DWORD *)(v112 + 36) - 1 || *(void *)&v89[-2] % v18 != v126))
              {
                ++v275;
                log_warn("%s:%d: %s cib %lld chunk info %d block count %d should be %d\n");
                goto LABEL_209;
              }

              if ((*((_DWORD *)v120 - 1) & 0xFFFFFu) > v126)
              {
                ++v275;
                log_warn( "%s:%d: %s cib %lld chunk info %d free count %d > chunk block count %d\n",  "nx_check",  407,  (const char *)(v3[48] + 208LL),  v91,  v118,  *((_DWORD *)v120 - 1) & 0xFFFFF,  *(_DWORD *)(v120 - 1) & 0xFFFFF);
              }

              if (*v120)
              {
                int v127 = spaceman_ip_block_index((uint64_t)v3, (uint64_t)v277, *v120, &v265);
                if (v127)
                {
                  ++v275;
                  if (v127 == 2) {
                    log_warn("%s:%d: %s cib %lld ci %d bm addr %lld not within IP block range\n");
                  }
                  else {
                    log_warn("%s:%d: %s error getting IP block index for cib %lld ci %d bm addr %lld\n");
                  }
                  goto LABEL_209;
                }

                if (obj_get( v3[49],  0x40000000u,  *v120,  (int *)&sm_bm_desc,  0LL,  0LL,  0LL,  0LL,  (uint64_t *)&v272))
                {
                  ++v275;
                  log_warn("%s:%d: %s cib %lld chunk %d unable to get bitmap block @ %lld: %d\n");
                  goto LABEL_209;
                }

                unint64_t v128 = bitmap_count_bits(v272[7], 0, 0LL, *(_DWORD *)(v120 - 1) & 0xFFFFF);
              }

              else
              {
                ++v258;
                unint64_t v128 = *(_DWORD *)(v120 - 1) & 0xFFFFFLL;
              }

              uint64_t v129 = *((_DWORD *)v120 - 1) & 0xFFFFF;
              if (v128 != v129)
              {
                ++v275;
                log_warn( "%s:%d: %s cib %lld ci %d free count %d doesn't match free bits in bitmap block %lld\n",  "nx_check",  429,  (const char *)(v3[48] + 208LL),  v91,  v118,  *((_DWORD *)v120 - 1) & 0xFFFFF,  v128);
                uint64_t v129 = *((_DWORD *)v120 - 1) & 0xFFFFF;
              }

              v261 += v128;
              v263 += v129;
              uint64_t v130 = *(void *)(v256 + 1248);
              if (v130)
              {
                uint64_t v131 = *(void *)(v256 + 1240);
                char v132 = __clz(__rbit64(*(unsigned int *)(v3[47] + 36LL)));
                if (v255 == ((v131 << v132) & 0x4000000000000000uLL) >> 62)
                {
                  v278[0] = 0LL;
                  unint64_t v133 = calc_overlap_range( *(v120 - 2),  *(_DWORD *)(v120 - 1) & 0xFFFFF,  ((uint64_t)0xBFFFFFFFFFFFFFFFLL >> v132) & v131,  v130,  (unint64_t *)v278);
                  if (v133)
                  {
                    if (*v120) {
                      unint64_t v133 = bitmap_count_bits( v272[7],  0,  (uint64_t)v278[0] - *(v120 - 2),  (uint64_t)v278[0] + v133 - *(v120 - 2));
                    }
                    v261 -= v133;
                    v263 -= v133;
                  }
                }
              }

              if (*v120) {
                obj_release(v272);
              }
LABEL_209:
              ++v118;
              LODWORD(v134) = *(_DWORD *)(v112 + 36);
              else {
                unint64_t v134 = v134;
              }
              v119 += v18;
              v120 += 4;
              if (v118 >= v134) {
                goto LABEL_215;
              }
              continue;
            }
          }

          ++v275;
          log_warn( "%s:%d: %s cab %d @ %lld cab_cib_count %d invalid\n",  "nx_check",  337,  (const char *)(v3[48] + 208LL),  v95,  v96,  *(_DWORD *)(v100 + 36));
          uint64_t v93 = v95;
          unint64_t v85 = v251;
          unint64_t v91 = v91 + v251 - 1 + ~((v91 + v251 - 1) % v251);
          uint64_t v83 = v255;
          uint64_t v84 = v100;
          unint64_t v87 = v253;
        }

LABEL_217:
        if (++v91 >= v89->u32[0]) {
          goto LABEL_220;
        }
      }
    }

    uint64_t v261 = 0LL;
    uint64_t v263 = 0LL;
LABEL_220:
    if (v274)
    {
      obj_release(v274);
      uint64_t v274 = 0LL;
    }

    uint64_t v71 = v247;
    uint64_t v135 = &v247[6 * v83];
    uint32x2_t v138 = v135[9];
    unint64_t v137 = v135 + 9;
    uint64_t v136 = (uint64_t)v138;
    uint64_t v139 = v263;
    if (v263 != *(void *)&v138)
    {
      ++v275;
      log_warn( "%s:%d: %s spaceman free count %lld doesn't match free count in chunks %lld\n",  "nx_check",  469,  (const char *)(v3[48] + 208LL),  v136,  v263);
      uint64_t v139 = (uint64_t)*v137;
    }

    if (v261 != v139)
    {
      ++v275;
      log_warn( "%s:%d: %s spaceman free count %lld doesn't match free count in bitmap %lld\n",  "nx_check",  472,  (const char *)(v3[48] + 208LL),  v139,  v261);
    }

    char v86 = 0;
    uint64_t v83 = 1LL;
  }

  while ((v246 & 1) != 0);
  if (v245 + v244 != v258 + v243)
  {
    ++v275;
    log_warn( "%s:%d: %s spaceman IP free block count is wrong %lld != %lld\n",  "nx_check",  477,  (const char *)(v3[48] + 208LL),  v245 + v244,  v258 + v243);
  }

  uint32x2_t v140 = v247[30];
  uint32x2_t v141 = v247[6];
  if (*(void *)&v140 > *(void *)&v141)
  {
    ++v275;
    log_warn( "%s:%d: %s spaceman free queue count is too large: %lld > %lld\n",  "nx_check",  482,  (const char *)(v3[48] + 208LL),  *(void *)&v140,  *(void *)&v141);
  }

  if (!*(void *)&v247[31]) {
    goto LABEL_234;
  }
  int v142 = spaceman_fq_tree_get((uint64_t)v3, (uint64_t)v277, 1u, 0LL, 0, (uint64_t *)&v271);
  if (v142)
  {
    ++v275;
    log_warn( "%s:%d: %s unable to get spaceman free queue tree: %d\n",  "nx_check",  490,  (const char *)(v3[48] + 208LL),  v142);
    goto LABEL_234;
  }

  if (v271)
  {
    int v153 = btree_check(v271, 0LL, 0, 0);
    if (v153)
    {
      int v154 = v153;
      ++v275;
      log_warn( "%s:%d: %s spaceman free queue tree sanity check failed: %d\n",  "nx_check",  494,  (const char *)(v3[48] + 208LL),  v153);
      uint64_t v266 = 0x1000000008LL;
    }

    else
    {
      uint64_t v266 = 0x1000000008LL;
      int v154 = bt_lookup_first((uint64_t)v271, 0LL, &v269, (_DWORD *)&v266 + 1, &v270, (unsigned int *)&v266);
    }

    unint64_t v185 = 0LL;
    uint64_t v143 = 0LL;
    for (uint64_t j = 0LL;
          !v154;
          int v154 = bt_lookup_variant( (uint64_t)v271,  0LL,  (unint64_t *)&v269,  (unsigned int *)&v266 + 1,  HIDWORD(v266),  &v270,  (unsigned int *)&v266,  4u,  0,  0LL))
    {
      if ((_DWORD)v266)
      {
        uint64_t v187 = v270;
      }

      else
      {
        unint64_t v270 = 1LL;
        uint64_t v187 = 1LL;
      }

      unint64_t v188 = v269;
      if ((unint64_t)v269 > v253)
      {
        ++v275;
        log_warn( "%s:%d: %s spaceman free queue tree entry %lld:%lld xid larger than spaceman xid %lld\n",  "nx_check",  507,  (const char *)(v3[48] + 208LL),  (void)v269,  *((void *)&v269 + 1),  v253);
        unint64_t v188 = v269;
      }

      if (v188 >= v185)
      {
        uint64_t v189 = *((void *)&v269 + 1);
        if (v188 == v185)
        {
          if (*((uint64_t *)&v269 + 1) < j)
          {
            ++v275;
            log_warn( "%s:%d: %s spaceman free queue tree entries out of order: addr %lld < %lld\n",  "nx_check",  515,  (const char *)(v3[48] + 208LL),  *((void *)&v269 + 1),  j);
            uint64_t v189 = *((void *)&v269 + 1);
          }

          uint64_t j = v270 + v189;
        }

        else
        {
          uint64_t j = 0LL;
          unint64_t v185 = v188;
        }
      }

      else
      {
        ++v275;
        log_warn( "%s:%d: %s spaceman free queue tree entries out of order: xid %lld < %lld\n",  "nx_check",  510,  (const char *)(v3[48] + 208LL),  v188,  v185);
        uint64_t j = 0LL;
        uint64_t v189 = *((void *)&v269 + 1);
        unint64_t v185 = v269;
      }

      if (v189 < 1 || (unint64_t v190 = (unint64_t)v247[6], v189 >= v190))
      {
        ++v275;
        log_warn( "%s:%d: %s spaceman free queue tree entry %lld:%lld %lld addr is bad\n",  "nx_check",  524,  (const char *)(v3[48] + 208LL),  (void)v269,  v189,  v270);
        unint64_t v190 = (unint64_t)v247[6];
        uint64_t v189 = *((void *)&v269 + 1);
      }

      BOOL v70 = v190 > v270;
      unint64_t v191 = v190 - v270;
      if (!v70 || v189 > v191)
      {
        ++v275;
        log_warn( "%s:%d: %s spaceman free queue tree entry %lld:%lld %lld range is bad\n",  "nx_check",  527,  (const char *)(v3[48] + 208LL),  (void)v269,  v189,  v270);
      }

      v143 += v187;
      LODWORD(v266) = 8;
    }

    if (v154 != 2)
    {
      ++v275;
      log_warn( "%s:%d: %s spaceman free queue tree iteration aborted with error %d\n",  "nx_check",  534,  (const char *)(v3[48] + 208LL),  v154);
    }

    obj_release(v271);
    unint64_t v87 = v253;
    uint64_t v71 = v247;
  }

  else
  {
LABEL_234:
    uint64_t v143 = 0LL;
  }

  uint32x2_t v144 = v71[30];
  if (v143 != *(void *)&v144)
  {
    ++v275;
    log_warn( "%s:%d: %s spaceman free queue count %lld doesn't match count in the free queue: %lld\n",  "nx_check",  540,  (const char *)(v3[48] + 208LL),  *(void *)&v144,  v143);
  }

  uint32x2_t v145 = v71[35];
  uint32x2_t v146 = v71[12];
  if (*(void *)&v145 > *(void *)&v146)
  {
    ++v275;
    log_warn( "%s:%d: %s spaceman free queue count is too large: %lld > %lld\n",  "nx_check",  544,  (const char *)(v3[48] + 208LL),  *(void *)&v145,  *(void *)&v146);
  }

  if (!*(void *)&v71[36]) {
    goto LABEL_242;
  }
  int v147 = spaceman_fq_tree_get((uint64_t)v3, (uint64_t)v277, 2u, 0LL, 0, (uint64_t *)&v271);
  if (v147)
  {
    ++v275;
    log_warn( "%s:%d: %s unable to get spaceman free queue tree: %d\n",  "nx_check",  552,  (const char *)(v3[48] + 208LL),  v147);
    goto LABEL_242;
  }

  if (v271)
  {
    int v155 = btree_check(v271, 0LL, 0, 0);
    if (v155)
    {
      int v156 = v155;
      ++v275;
      log_warn( "%s:%d: %s spaceman free queue tree sanity check failed: %d\n",  "nx_check",  556,  (const char *)(v3[48] + 208LL),  v155);
      uint64_t v266 = 0x1000000008LL;
    }

    else
    {
      uint64_t v266 = 0x1000000008LL;
      int v156 = bt_lookup_first((uint64_t)v271, 0LL, &v269, (_DWORD *)&v266 + 1, &v270, (unsigned int *)&v266);
    }

    unint64_t v192 = 0LL;
    uint64_t v148 = 0LL;
    for (uint64_t k = 0LL;
          !v156;
          int v156 = bt_lookup_variant( (uint64_t)v271,  0LL,  (unint64_t *)&v269,  (unsigned int *)&v266 + 1,  HIDWORD(v266),  &v270,  (unsigned int *)&v266,  4u,  0,  0LL))
    {
      if ((_DWORD)v266)
      {
        uint64_t v194 = v270;
      }

      else
      {
        unint64_t v270 = 1LL;
        uint64_t v194 = 1LL;
      }

      unint64_t v195 = v269;
      if ((unint64_t)v269 > v253)
      {
        ++v275;
        log_warn( "%s:%d: %s spaceman free queue tree entry %lld:%lld xid larger than spaceman xid %lld\n",  "nx_check",  569,  (const char *)(v3[48] + 208LL),  (void)v269,  *((void *)&v269 + 1),  v253);
        unint64_t v195 = v269;
      }

      if (v195 >= v192)
      {
        uint64_t v196 = *((void *)&v269 + 1);
        if (v195 == v192)
        {
          if (*((uint64_t *)&v269 + 1) < k)
          {
            ++v275;
            log_warn( "%s:%d: %s spaceman free queue tree entries out of order: addr %lld < %lld\n",  "nx_check",  577,  (const char *)(v3[48] + 208LL),  *((void *)&v269 + 1),  k);
            uint64_t v196 = *((void *)&v269 + 1);
          }

          uint64_t k = v270 + v196;
        }

        else
        {
          uint64_t k = 0LL;
          unint64_t v192 = v195;
        }
      }

      else
      {
        ++v275;
        log_warn( "%s:%d: %s spaceman free queue tree entries out of order: xid %lld < %lld\n",  "nx_check",  572,  (const char *)(v3[48] + 208LL),  v195,  v192);
        uint64_t k = 0LL;
        uint64_t v196 = *((void *)&v269 + 1);
        unint64_t v192 = v269;
      }

      uint64_t v197 = ((uint64_t)0xBFFFFFFFFFFFFFFFLL >> __clz(__rbit64(*(unsigned int *)(v3[47] + 36LL)))) & v196;
      if (v197 < 1 || (unint64_t v198 = (unint64_t)v247[12], v197 >= v198))
      {
        ++v275;
        log_warn( "%s:%d: %s spaceman free queue tree entry %lld:%lld %lld addr is bad\n",  "nx_check",  587,  (const char *)(v3[48] + 208LL),  (void)v269,  v196,  v270);
        unint64_t v198 = (unint64_t)v247[12];
      }

      BOOL v70 = v198 > v270;
      unint64_t v199 = v198 - v270;
      if (!v70 || v197 > v199)
      {
        ++v275;
        log_warn( "%s:%d: %s spaceman free queue tree entry %lld:%lld %lld range is bad\n",  "nx_check",  590,  (const char *)(v3[48] + 208LL),  (void)v269,  *((void *)&v269 + 1),  v270);
      }

      v148 += v194;
      LODWORD(v266) = 8;
    }

    if (v156 != 2)
    {
      ++v275;
      log_warn( "%s:%d: %s spaceman free queue tree iteration aborted with error %d\n",  "nx_check",  597,  (const char *)(v3[48] + 208LL),  v156);
    }

    obj_release(v271);
    unint64_t v87 = v253;
    uint64_t v71 = v247;
  }

  else
  {
LABEL_242:
    uint64_t v148 = 0LL;
  }

  uint32x2_t v149 = v71[35];
  if (v148 != *(void *)&v149)
  {
    ++v275;
    log_warn( "%s:%d: %s spaceman free queue count %lld doesn't match count in the free queue: %lld\n",  "nx_check",  603,  (const char *)(v3[48] + 208LL),  *(void *)&v149,  v148);
  }

  if (*(void *)(v256 + 168))
  {
    uint64_t v150 = nx_reaper_get(v3, &v276);
    if ((_DWORD)v150)
    {
      uint64_t v6 = v150;
      log_err("%s:%d: %s unable to get reaper: %d\n");
      goto LABEL_386;
    }

    uint64_t v157 = *((void *)v276 + 47);
    unint64_t v158 = *(void *)(v157 + 32);
    if (*(void *)(v157 + 40) >= v158)
    {
      log_warn( "%s:%d: %s reaper completed ID 0x%llx not less than next reap ID 0x%llx\n",  "nx_check_reaper",  958,  (const char *)(v3[48] + 208LL),  *(void *)(v157 + 40),  v158);
      int v159 = 1;
    }

    else
    {
      int v159 = 0;
    }

    int v160 = *(_DWORD *)(v157 + 64);
    if ((v160 & 1) == 0)
    {
      ++v159;
      log_warn( "%s:%d: %s reaper needs more cowbell, flags 0x%x\n",  "nx_check_reaper",  961,  (const char *)(v3[48] + 208LL),  v160);
    }

    unint64_t v161 = *(void *)(v157 + 48);
    if (!v161)
    {
      if (!*(void *)(v157 + 56)
        || (++v159,
            log_warn("%s:%d: %s reaper has tail with no head\n", "nx_check_reaper", 965, (const char *)(v3[48] + 208LL)),
            (unint64_t v161 = *(void *)(v157 + 48)) == 0))
      {
LABEL_378:
        v275 += v159;
        obj_release((uint64_t *)v276);
        unint64_t v87 = v253;
        goto LABEL_379;
      }
    }

    v278[0] = 0LL;
    int v162 = *(_DWORD *)(v157 + 68);
    while (2)
    {
      uint64_t v163 = obj_get(v3[49], 0x80000000, v161, (int *)&nx_reap_list_desc, 0LL, 0LL, 0LL, 0LL, (uint64_t *)v278);
      if ((_DWORD)v163)
      {
        uint64_t v6 = v163;
        log_err( "%s:%d: %s failed to get reap list head: %d\n",  "nx_check_reaper",  974,  (const char *)(v3[48] + 208LL),  v163);
        obj_release((uint64_t *)v276);
        log_err("%s:%d: %s reaper check failed with error: %d\n");
        goto LABEL_386;
      }

      uint64_t v164 = v278[0][47];
      int v165 = *(_DWORD *)(v164 + 44);
      if (v165 != (((unint64_t)obj_size_phys((uint64_t)v278[0]) - 64) / 0x28))
      {
        ++v159;
        BOOL v166 = (const char *)(v259[48] + 208LL);
        int v167 = *(_DWORD *)(v164 + 44);
        unsigned int v168 = obj_size_phys((uint64_t)v278[0]);
        log_warn( "%s:%d: %s reap list object 0x%llx max record count %u not expected value %u\n",  "nx_check_reaper",  981,  v166,  v161,  v167,  ((unint64_t)v168 - 64) / 0x28);
      }

      unsigned int v169 = *(_DWORD *)(v164 + 44);
      if (*(_DWORD *)(v164 + 48) <= v169)
      {
        uint64_t v3 = v259;
      }

      else
      {
        ++v159;
        uint64_t v3 = v259;
        log_warn( "%s:%d: %s reap list object 0x%llx record count %d larger than max %d\n",  "nx_check_reaper",  984,  (const char *)(v259[48] + 208LL),  v161,  *(_DWORD *)(v164 + 48),  v169);
      }

      unsigned int v170 = *(_DWORD *)(v164 + 52);
      if (v170 != -1)
      {
        unsigned int v171 = *(_DWORD *)(v164 + 44);
        if (v170 > v171)
        {
          ++v159;
          log_warn( "%s:%d: %s reap list object 0x%llx first index %u larger than max %u\n",  "nx_check_reaper",  987,  (const char *)(v3[48] + 208LL),  v161,  *(_DWORD *)(v164 + 52),  v171);
        }
      }

      unsigned int v172 = *(_DWORD *)(v164 + 56);
      if (v172 != -1)
      {
        unsigned int v173 = *(_DWORD *)(v164 + 44);
        if (v172 > v173)
        {
          ++v159;
          log_warn( "%s:%d: %s reap list object 0x%llx last index %u larger than max %u\n",  "nx_check_reaper",  990,  (const char *)(v3[48] + 208LL),  v161,  *(_DWORD *)(v164 + 52),  v173);
        }
      }

      unsigned int v174 = *(_DWORD *)(v164 + 60);
      if (v174 != -1)
      {
        unsigned int v175 = *(_DWORD *)(v164 + 44);
        if (v174 > v175)
        {
          ++v159;
          log_warn( "%s:%d: %s reap list object 0x%llx free index %u larger than max %u\n",  "nx_check_reaper",  993,  (const char *)(v3[48] + 208LL),  v161,  *(_DWORD *)(v164 + 60),  v175);
        }
      }

      unint64_t v176 = *(void *)(v164 + 32);
      uint64_t v177 = *(void *)(v157 + 56);
      if (v176)
      {
LABEL_283:
        if (v177 == v161)
        {
          if (!v176) {
            goto LABEL_287;
          }
          ++v159;
          log_warn( "%s:%d: %s reap list tail 0x%llx is not last reap list object, next 0x%llx\n",  "nx_check_reaper",  1005,  (const char *)(v3[48] + 208LL),  v161,  v176);
          unint64_t v161 = *(void *)(v164 + 32);
        }

        else
        {
          unint64_t v161 = v176;
        }
      }

      else
      {
        if (v177 != v161)
        {
          ++v159;
          log_warn( "%s:%d: %s last reap list object 0x%llx doesn't match tail 0x%llx\n",  "nx_check_reaper",  1002,  (const char *)(v3[48] + 208LL),  v161,  v177);
          uint64_t v177 = *(void *)(v157 + 56);
          unint64_t v176 = *(void *)(v164 + 32);
          goto LABEL_283;
        }

LABEL_287:
        unint64_t v161 = 0LL;
      }

      obj_release(v278[0]);
      if (*(_DWORD *)(v157 + 68))
      {
        --v162;
        if (v161 && !v162)
        {
          ++v159;
          log_warn("%s:%d: %s reap list expected %u objects, but haven't seen last reap list object yet\n");
          goto LABEL_378;
        }

        if (!v161 && v162)
        {
          ++v159;
          log_warn("%s:%d: %s reap list expected %u objects, but got last reap list object with %u more objects left\n");
          goto LABEL_378;
        }
      }

      if (!v161) {
        goto LABEL_378;
      }
      continue;
    }
  }

LABEL_379:
  uint64_t v200 = v256;
  unint64_t v201 = *(void *)(v256 + 160);
  if (!v201) {
    goto LABEL_387;
  }
  uint64_t v202 = obj_get(v3[49], 0x40000000u, v201, (int *)&om_desc, 0LL, 0LL, 0LL, 0LL, (uint64_t *)&v268);
  if ((_DWORD)v202)
  {
    uint64_t v6 = v202;
    log_err("%s:%d: %s unable to get omap: %d\n");
    goto LABEL_386;
  }

  if (obj_xid((uint64_t)v268) > v87)
  {
    ++v275;
    uint64_t v203 = v3[48] + 208LL;
    uint64_t v204 = obj_xid((uint64_t)v268);
    uint64_t v235 = (const char *)v203;
    uint64_t v3 = v259;
    log_warn("%s:%d: %s omap xid %lld > spaceman xid %lld\n", "nx_check", 633, v235, v204, v87);
  }

  uint64_t v6 = nx_check_omap((uint64_t)v3, (uint64_t)v268, v87, &v275);
  obj_release(v268);
  uint64_t v200 = v256;
  if (!(_DWORD)v6)
  {
LABEL_387:
    v278[0] = 0LL;
    unint64_t v264 = 0LL;
    if (!*(_DWORD *)(v200 + 180))
    {
LABEL_448:
      obj_release(v277);
      if (v275) {
        return 22LL;
      }
      else {
        return 0LL;
      }
    }

    uint64_t v205 = 0LL;
    while (1)
    {
      unint64_t v206 = *(void *)(v256 + 184 + 8 * v205);
      if (v206)
      {
        int v207 = obj_get(v3[49], 0, v206, (int *)&apfs_desc, 0LL, 0LL, 0LL, 0LL, (uint64_t *)v278);
        if (v207)
        {
          log_err( "%s:%d: %s unable to get fs[%d] oid %lld, %d\n",  "nx_check",  654,  (const char *)(v3[48] + 208LL),  v205,  v206,  v207);
        }

        else
        {
          uint64_t v208 = v278[0];
          uint64_t v209 = v278[0][47];
          unint64_t v210 = *(void *)(v209 + 128);
          if (!v210) {
            goto LABEL_398;
          }
          int v211 = obj_get(v3[49], 0x40000000u, v210, (int *)&om_desc, 0LL, (uint64_t)v278[0], 0LL, 0LL, (uint64_t *)&v268);
          if (v211)
          {
            log_err( "%s:%d: %s unable to get omap %lld: %d\n",  "nx_check",  661,  (const char *)v278[0] + 3992,  *(void *)(v278[0][47] + 128),  v211);
            goto LABEL_446;
          }

          int v212 = nx_check_omap((uint64_t)v278[0], (uint64_t)v268, v253, &v275);
          obj_release(v268);
          uint64_t v208 = v278[0];
          if (!v212)
          {
            uint64_t v209 = v278[0][47];
LABEL_398:
            if (*(void *)(v209 + 136))
            {
              if ((*(_BYTE *)(v209 + 264) & 1) != 0 || (v242 & 1) != 0)
              {
                unint64_t v264 = 0LL;
                fsroot_int tree = apfs_get_fsroot_tree((uint64_t)v208, 0LL, 0LL, (uint64_t *)&v264);
                if (fsroot_tree)
                {
                  log_err( "%s:%d: %s unable to get fs root tree: %d\n",  "nx_check",  680,  (const char *)v278[0] + 3992,  fsroot_tree);
                }

                else
                {
                  if (obj_xid((uint64_t)v264) > v253)
                  {
                    ++v275;
                    unint64_t v214 = v278[0] + 499;
                    uint64_t v215 = obj_xid((uint64_t)v264);
                    uint64_t v236 = (const char *)v214;
                    uint64_t v3 = v259;
                    log_warn("%s:%d: %s fs root tree xid %lld > spaceman xid %lld\n", "nx_check", 683, v236, v215, v253);
                  }

                  int v216 = btree_check(v264, 0LL, 0, 0);
                  if (v216)
                  {
                    ++v275;
                    log_warn( "%s:%d: %s fs root tree sanity check failed: %d\n",  "nx_check",  688,  (const char *)v278[0] + 3992,  v216);
                  }
                }

                if (v264) {
                  obj_release(v264);
                }
              }

              else
              {
                log_err( "%s:%d: %s skipping check of fs[%d] oid %lld fs root tree because it's encrypted\n",  "nx_check",  675,  (const char *)v208 + 3992,  v205,  v206);
              }
            }

            uint64_t v217 = *(void *)(v278[0][47] + 144);
            if (v217)
            {
              unint64_t v264 = 0LL;
              extentref_int tree = apfs_get_extentref_tree((uint64_t)v278[0], v217, 0LL, (uint64_t *)&v264);
              if (extentref_tree)
              {
                log_err( "%s:%d: %s unable to get fs extentref tree: %d\n",  "nx_check",  700,  (const char *)v278[0] + 3992,  extentref_tree);
              }

              else
              {
                if (obj_xid((uint64_t)v264) > v253)
                {
                  ++v275;
                  uint64_t v219 = v278[0] + 499;
                  uint64_t v220 = obj_xid((uint64_t)v264);
                  int v237 = (const char *)v219;
                  uint64_t v3 = v259;
                  log_warn( "%s:%d: %s fs extentref tree xid %lld > spaceman xid %lld\n",  "nx_check",  703,  v237,  v220,  v253);
                }

                int v221 = btree_check(v264, 0LL, 0, 0);
                if (v221)
                {
                  ++v275;
                  log_warn( "%s:%d: %s fs extentref tree sanity check failed: %d\n",  "nx_check",  708,  (const char *)v278[0] + 3992,  v221);
                }
              }

              if (v264) {
                obj_release(v264);
              }
            }

            if (*(void *)(v278[0][47] + 152))
            {
              unint64_t v264 = 0LL;
              snap_meta_int tree = apfs_get_snap_meta_tree((uint64_t)v278[0], 0LL, (uint64_t *)&v264);
              if (snap_meta_tree)
              {
                log_err( "%s:%d: %s unable to get fs snap meta tree: %d\n",  "nx_check",  719,  (const char *)v278[0] + 3992,  snap_meta_tree);
              }

              else
              {
                if (obj_xid((uint64_t)v264) > v253)
                {
                  ++v275;
                  uint64_t v223 = v278[0] + 499;
                  uint64_t v224 = obj_xid((uint64_t)v264);
                  uint64_t v238 = (const char *)v223;
                  uint64_t v3 = v259;
                  log_warn( "%s:%d: %s fs snap meta tree xid %lld > spaceman xid %lld\n",  "nx_check",  722,  v238,  v224,  v253);
                }

                int v225 = btree_check(v264, 0LL, 0, 0);
                if (v225)
                {
                  ++v275;
                  log_warn( "%s:%d: %s fs snap meta tree sanity check failed: %d\n",  "nx_check",  727,  (const char *)v278[0] + 3992,  v225);
                }
              }

              if (v264) {
                obj_release(v264);
              }
            }

            if (*(void *)(v278[0][47] + 1072))
            {
              unint64_t v264 = 0LL;
              doc_id_int tree = apfs_get_doc_id_tree((uint64_t)v278[0], 0, 0LL, 0LL, (uint64_t *)&v264);
              if (doc_id_tree)
              {
                log_err( "%s:%d: %s unable to get doc-id tree: %d\n",  "nx_check",  738,  (const char *)v278[0] + 3992,  doc_id_tree);
              }

              else
              {
                if (obj_xid((uint64_t)v264) > v253)
                {
                  ++v275;
                  unint64_t v227 = v278[0] + 499;
                  uint64_t v228 = obj_xid((uint64_t)v264);
                  uint64_t v239 = (const char *)v227;
                  uint64_t v3 = v259;
                  log_warn("%s:%d: %s doc-id tree xid %lld > spaceman xid %lld\n", "nx_check", 741, v239, v228, v253);
                }

                int v229 = btree_check(v264, 0LL, 0, 0);
                if (v229)
                {
                  ++v275;
                  log_warn( "%s:%d: %s doc-id tree sanity check failed: %d\n",  "nx_check",  746,  (const char *)v278[0] + 3992,  v229);
                }
              }

              if (v264) {
                obj_release(v264);
              }
            }

            if (*(void *)(v278[0][47] + 1080))
            {
              unint64_t v264 = 0LL;
              int v230 = apfs_get_doc_id_tree((uint64_t)v278[0], 1, 0LL, 0LL, (uint64_t *)&v264);
              if (v230)
              {
                log_err( "%s:%d: %s unable to get prev doc-id tree: %d\n",  "nx_check",  757,  (const char *)v278[0] + 3992,  v230);
              }

              else
              {
                if (obj_xid((uint64_t)v264) > v253)
                {
                  ++v275;
                  BOOL v231 = v278[0] + 499;
                  uint64_t v232 = obj_xid((uint64_t)v264);
                  unint64_t v240 = (const char *)v231;
                  uint64_t v3 = v259;
                  log_warn( "%s:%d: %s prev doc-id tree xid %lld > spaceman xid %lld\n",  "nx_check",  760,  v240,  v232,  v253);
                }

                int v233 = btree_check(v264, 0LL, 0, 0);
                if (v233)
                {
                  ++v275;
                  log_warn( "%s:%d: %s prev doc-id tree sanity check failed: %d\n",  "nx_check",  765,  (const char *)v278[0] + 3992,  v233);
                }
              }

              if (v264) {
                obj_release(v264);
              }
            }

LABEL_446:
            obj_release(v278[0]);
            goto LABEL_447;
          }

          log_err( "%s:%d: %s omap check failed for omap %lld: %d\n",  "nx_check",  668,  (const char *)v278[0] + 3992,  *(void *)(v278[0][47] + 128),  v212);
          obj_release(v278[0]);
        }
      }

LABEL_447:
    }
  }

  log_err("%s:%d: %s omap check failed with error: %d\n");
LABEL_386:
  obj_release(v277);
  return v6;
}

uint64_t nx_check_omap(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  uint64_t v57 = *MEMORY[0x1895F89C0];
  unsigned __int32 v49 = 0LL;
  unint64_t v8 = (void *)a1;
  uint64_t v47 = 0LL;
  unsigned int v48 = 0LL;
  memset(v46, 0, sizeof(v46));
  uint64_t v9 = v8[47];
  unsigned int v10 = *(_DWORD *)(v9 + 36);
  if ((*(_BYTE *)(v9 + 65) & 1) != 0)
  {
    uint64_t v11 = spaceman_get(v8, (uint64_t *)&v49);
    if ((_DWORD)v11)
    {
      uint64_t extended = v11;
      else {
        unint64_t v13 = (const char *)(*(void *)(a1 + 384) + 208LL);
      }
      log_err("%s:%d: %s unable to get spaceman: %d\n", "nx_check_omap", 805, v13, extended);
      return extended;
    }
  }

  if (*(_DWORD *)(*(void *)(a2 + 376) + 36LL) >= 0x400u)
  {
    else {
      unint64_t v14 = (const char *)(*(void *)(a1 + 384) + 208LL);
    }
    log_warn( "%s:%d: %s omap snapshot count %d seems excessive\n",  "nx_check_omap",  811,  v14,  *(_DWORD *)(*(void *)(a2 + 376) + 36LL));
  }

  uint64_t v15 = *(void *)(a2 + 376);
  int v16 = *(_DWORD *)(v15 + 40);
  if (v16 == 1073741826 || v16 == -2147483646)
  {
    uint64_t v18 = *(void *)(v15 + 48);
    __int128 v51 = 0u;
    uint64_t v56 = 0LL;
    __int128 v55 = 0u;
    __int128 v54 = 0u;
    __int128 v53 = 0u;
    __int128 v52 = 0u;
    unsigned int v50 = omap_key_cmp;
    DWORD2(v51) = 11;
    if ((unsigned __int16)v16 == 2)
    {
      uint64_t extended = btree_get_extended(a1, v16 & 0xFFFF0000, v18, 0LL, 0, (uint64_t)&v50, 0LL, (uint64_t *)&v48);
      if (!(_DWORD)extended)
      {
        if (obj_xid((uint64_t)v48) <= a3)
        {
          int v24 = 0;
        }

        else
        {
          else {
            uint32x2_t v19 = (const char *)(*(void *)(a1 + 384) + 208LL);
          }
          uint64_t v25 = obj_xid((uint64_t)v48);
          log_warn("%s:%d: %s omap tree xid %lld > spaceman xid %lld\n", "nx_check_omap", 829, v19, v25, a3);
          int v24 = 1;
        }

        int v26 = btree_check(v48, 0LL, 0, 0);
        if (v26)
        {
          int v27 = v26;
          ++v24;
          else {
            unsigned int v28 = (const char *)(*(void *)(a1 + 384) + 208LL);
          }
          log_warn("%s:%d: %s omap tree sanity check failed: %d\n", "nx_check_omap", 834, v28, v27);
          goto LABEL_92;
        }

        unint64_t v44 = 0LL;
        uint64_t v45 = 0LL;
        unsigned int v50 = 0LL;
        *(void *)&__int128 v51 = 0LL;
        bt_iterator_init_with_hint( (uint64_t)v46,  (uint64_t)v48,  0LL,  0,  (unint64_t *)&v50,  16,  0x10u,  &v44,  0x10u,  0LL);
        if (bt_iterator_ended((uint64_t)v46))
        {
LABEL_92:
          obj_release(v48);
          goto LABEL_93;
        }

        __int32 v29 = 0LL;
        *(_DWORD *)&v42[8] = 0;
        uint64_t v43 = (const char *)(a1 + 3992);
        *(void *)uint64_t v42 = v10 - 1;
        uint64_t v30 = -1LL;
        while (1)
        {
          if ((unint64_t)v50 >= (unint64_t)v29)
          {
            unint64_t v31 = v51;
            if (v50 != v29)
            {
              *(void *)&v42[4] = 0LL;
              uint64_t v30 = -1LL;
              __int32 v29 = v50;
              goto LABEL_53;
            }

            if ((unint64_t)v51 <= *(void *)&v42[4])
            {
              ++v24;
              if (obj_type(a1) == 13) {
                log_warn( "%s:%d: %s omap tree entries out of order: oid %lld xid %lld <= lastxid %lld\n",  "nx_check_omap",  853,  v43,  v50,  (void)v51,  *(void *)&v42[4]);
              }
              else {
                log_warn( "%s:%d: %s omap tree entries out of order: oid %lld xid %lld <= lastxid %lld\n",  "nx_check_omap",  853,  (const char *)(*(void *)(a1 + 384) + 208LL),  v50,  (void)v51,  *(void *)&v42[4]);
              }
            }
          }

          else
          {
            if (obj_type(a1) == 13) {
              log_warn( "%s:%d: %s omap tree entries out of order: oid %lld < %lld\n",  "nx_check_omap",  847,  v43,  v50,  v29);
            }
            else {
              log_warn( "%s:%d: %s omap tree entries out of order: oid %lld < %lld\n",  "nx_check_omap",  847,  (const char *)(*(void *)(a1 + 384) + 208LL),  v50,  v29);
            }
            ++v24;
            uint64_t v30 = -1LL;
            __int32 v29 = v50;
          }

          unint64_t v31 = v51;
          *(void *)&v42[4] = v51;
LABEL_53:
          if (v31 > a3)
          {
            ++v24;
            if (obj_type(a1) == 13) {
              log_warn( "%s:%d: %s omap entry %lld:%lld xid > spaceman xid %lld\n",  "nx_check_omap",  862,  v43,  v50,  (void)v51,  a3);
            }
            else {
              log_warn( "%s:%d: %s omap entry %lld:%lld xid > spaceman xid %lld\n",  "nx_check_omap",  862,  (const char *)(*(void *)(a1 + 384) + 208LL),  v50,  (void)v51,  a3);
            }
          }

          if (v44 >= 0x800)
          {
            ++v24;
            if (obj_type(a1) == 13) {
              log_warn( "%s:%d: %s omap entry %lld:%lld unknown flags are set: 0x%x\n",  "nx_check_omap",  865,  v43,  v50,  (void)v51,  v44 & 0xFFFFFFFE);
            }
            else {
              log_warn( "%s:%d: %s omap entry %lld:%lld unknown flags are set: 0x%x\n",  "nx_check_omap",  865,  (const char *)(*(void *)(a1 + 384) + 208LL),  v50,  (void)v51,  v44 & 0xFFFFFFFE);
            }
          }

          if ((v44 & 1) != 0 && v30 == -1)
          {
            ++v24;
            if (obj_type(a1) == 13) {
              log_warn( "%s:%d: %s omap entry %lld:%lld marks deletion of object with no earlier mappings\n",  "nx_check_omap",  868,  v43,  v50,  (void)v51);
            }
            else {
              log_warn( "%s:%d: %s omap entry %lld:%lld marks deletion of object with no earlier mappings\n",  "nx_check_omap",  868,  (const char *)(*(void *)(a1 + 384) + 208LL),  v50,  (void)v51);
            }
          }

          else if (v30 != -1)
          {
            if (v30)
            {
              ++v24;
              if (obj_type(a1) == 13) {
                log_warn( "%s:%d: %s omap entry %lld:%lld beyond deletion entry @ xid %lld\n",  "nx_check_omap",  873,  v43,  v50,  (void)v51,  v30);
              }
              else {
                log_warn( "%s:%d: %s omap entry %lld:%lld beyond deletion entry @ xid %lld\n",  "nx_check_omap",  873,  (const char *)(*(void *)(a1 + 384) + 208LL),  v50,  (void)v51,  v30);
              }
            }

            else if ((v44 & 1) != 0)
            {
              uint64_t v30 = v51;
            }

            else
            {
              uint64_t v30 = 0LL;
            }

            goto LABEL_77;
          }

          if ((v44 & 1) != 0) {
            uint64_t v30 = v51;
          }
          else {
            uint64_t v30 = 0LL;
          }
LABEL_77:
          if (HIDWORD(v44) >= 0x100000)
          {
            ++v24;
            if (obj_type(a1) == 13) {
              log_warn( "%s:%d: %s omap entry %lld:%lld size %d seems excessive\n",  "nx_check_omap",  878,  v43,  v50,  (void)v51,  HIDWORD(v44));
            }
            else {
              log_warn( "%s:%d: %s omap entry %lld:%lld size %d seems excessive\n",  "nx_check_omap",  878,  (const char *)(*(void *)(a1 + 384) + 208LL),  v50,  (void)v51,  HIDWORD(v44));
            }
          }

          if (v49) {
            uint64_t v32 = v49[47];
          }
          else {
            uint64_t v32 = 0LL;
          }
          if (nx_superblock_sanity_check_extent( v8[47],  v32,  v45,  (*(_DWORD *)v42 + HIDWORD(v44)) / v10,  0))
          {
            ++v24;
            if (obj_type(a1) == 13) {
              log_warn( "%s:%d: %s omap entry %lld:%lld addr %lld size %d is bad\n",  "nx_check_omap",  883,  v43,  v50,  (void)v51,  v45,  HIDWORD(v44));
            }
            else {
              log_warn( "%s:%d: %s omap entry %lld:%lld addr %lld size %d is bad\n",  "nx_check_omap",  883,  (const char *)(*(void *)(a1 + 384) + 208LL),  v50,  (void)v51,  v45,  HIDWORD(v44));
            }
          }

          bt_iterator_next((uint64_t)v46);
        }
      }
    }

    else
    {
      uint64_t extended = 22LL;
    }

    else {
      uint32x2_t v22 = (const char *)(*(void *)(a1 + 384) + 208LL);
    }
    log_warn("%s:%d: %s unable to get omap tree: %d\n", "nx_check_omap", 821, v22, extended);
    int v23 = *a4 + 1;
    goto LABEL_106;
  }

  int v20 = obj_type(a1);
  if (v20 == 13) {
    uint64_t v21 = (const char *)(a1 + 3992);
  }
  else {
    uint64_t v21 = (const char *)(*(void *)(a1 + 384) + 208LL);
  }
  log_warn( "%s:%d: %s omap tree type 0x%x is bad\n",  "nx_check_omap",  893,  v21,  *(_DWORD *)(*(void *)(a2 + 376) + 40LL));
  int v24 = 1;
LABEL_93:
  uint64_t v33 = *(void *)(a2 + 376);
  uint64_t v34 = *(void *)(v33 + 56);
  if (!v34)
  {
LABEL_120:
    *a4 += v24;
    if (v49) {
      obj_release(v49);
    }
    return 0LL;
  }

  int v35 = *(_DWORD *)(v33 + 44);
  if (v35 != 1073741826 && v35 != -2147483646)
  {
    ++v24;
    else {
      unsigned int v37 = (const char *)(*(void *)(a1 + 384) + 208LL);
    }
    log_warn( "%s:%d: %s omap snapshot tree type 0x%x is bad\n",  "nx_check_omap",  935,  v37,  *(_DWORD *)(*(void *)(a2 + 376) + 40LL));
    goto LABEL_120;
  }

  __int128 v51 = 0u;
  uint64_t v56 = 0LL;
  __int128 v55 = 0u;
  __int128 v54 = 0u;
  __int128 v53 = 0u;
  __int128 v52 = 0u;
  unsigned int v50 = omap_snapshot_key_cmp;
  DWORD2(v51) = 19;
  uint64_t extended = btree_get_extended(a1, v35 & 0xFFFF0000, v34, 0LL, 0, (uint64_t)&v50, 0LL, (uint64_t *)&v48);
  if (!(_DWORD)extended)
  {
    if (obj_xid((uint64_t)v48) > a3)
    {
      ++v24;
      else {
        uint64_t v36 = (const char *)(*(void *)(a1 + 384) + 208LL);
      }
      uint64_t v39 = obj_xid((uint64_t)v48);
      log_warn("%s:%d: %s omap snapshot tree xid %lld > spaceman xid %lld\n", "nx_check_omap", 911, v36, v39, a3);
    }

    if (btree_check(v48, 0LL, 0, 0))
    {
      ++v24;
      obj_type(a1);
      log_warn("%s:%d: %s omap snapshot tree sanity check failed: %d\n");
    }

    else
    {
      unsigned int v50 = 0LL;
      *(void *)&__int128 v51 = 0LL;
      unint64_t v44 = 0LL;
      bt_iterator_init_with_hint((uint64_t)v46, (uint64_t)v48, 0LL, 0, &v44, 8, 8u, &v50, 0x10u, 0LL);
      uint64_t v40 = 0LL;
      if (!bt_iterator_ended((uint64_t)v46))
      {
        uint64_t v40 = 0LL;
        do
        {
          ++v40;
          bt_iterator_next((uint64_t)v46);
        }

        while (!bt_iterator_ended((uint64_t)v46));
      }

      if (v40 != *(_DWORD *)(*(void *)(a2 + 376) + 36LL))
      {
        ++v24;
        obj_type(a1);
        log_warn("%s:%d: %s omap snapshot count %d doesn't match snapshot tree record count %lld\n");
      }
    }

    obj_release(v48);
    goto LABEL_120;
  }

  else {
    unsigned int v38 = (const char *)(*(void *)(a1 + 384) + 208LL);
  }
  log_warn("%s:%d: %s unable to get omap snapshot tree: %d\n", "nx_check_omap", 903, v38, extended);
  int v23 = v24 + 1 + *a4;
LABEL_106:
  *a4 = v23;
  if (v49) {
    obj_release(v49);
  }
  return extended;
}

uint64_t omap_recent_sanity_callback( uint64_t a1, uint64_t a2, unint64_t a3, unint64_t *a4, int a5, _DWORD *a6, int a7)
{
  uint64_t v21 = 0LL;
  uint64_t v22 = 0LL;
  int v13 = obj_type(a1);
  uint64_t v14 = 0LL;
  uint64_t v15 = a1;
  if (v13 == 13)
  {
    uint64_t v15 = *(void *)(a1 + 392);
    uint64_t v14 = a1;
  }

  uint64_t v16 = 22LL;
  if (a5 == 16 && a7 == 16)
  {
    unint64_t v17 = a4[1];
    if (v17 <= a3) {
      return 0LL;
    }
    int v18 = *a6;
    if ((*a6 & 5) != 0)
    {
      return 0LL;
    }

    else
    {
      int v23 = 0LL;
      if ((v18 & 8) != 0) {
        unsigned int v20 = 536870936;
      }
      else {
        unsigned int v20 = 24;
      }
      LODWORD(v22) = a6[1];
      uint64_t v16 = obj_get(*(void *)(v15 + 392), v20, *a4, (int *)&v21, 0LL, v14, v17, 0LL, (uint64_t *)&v23);
      if ((_DWORD)v16)
      {
        if (obj_type(a1) == 13) {
          log_err( "%s:%d: %s check of oid:xid %lld:%lld  size %d paddr 0x%llx flags 0x%x failed: %d\n",  "omap_recent_sanity_callback",  1089,  (const char *)(a1 + 3992),  *a4,  a4[1],  a6[1],  *((void *)a6 + 1),  *a6,  v16);
        }
        else {
          log_err( "%s:%d: %s check of oid:xid %lld:%lld  size %d paddr 0x%llx flags 0x%x failed: %d\n",  "omap_recent_sanity_callback",  1089,  (const char *)(*(void *)(a1 + 384) + 208LL),  *a4,  a4[1],  a6[1],  *((void *)a6 + 1),  *a6,  v16);
        }
      }

      else
      {
        obj_release(v23);
      }
    }
  }

  return v16;
}

uint64_t nx_check_recent_sanity(void *a1)
{
  __int128 v53 = 0LL;
  __int128 v54 = 0LL;
  uint64_t v52 = 0LL;
  __int128 v51 = 0LL;
  uint64_t v2 = spaceman_get(a1, (uint64_t *)&v54);
  if ((_DWORD)v2)
  {
    uint64_t v3 = v2;
    log_err("%s:%d: %s unable to get spaceman: %d\n");
    return v3;
  }

  uint64_t v4 = v54[47];
  unint64_t v5 = obj_xid((uint64_t)v54);
  uint64_t v6 = 0LL;
  uint64_t v7 = 0LL;
  unint64_t v8 = v5 - 3;
  if (v5 < 3) {
    unint64_t v8 = 0LL;
  }
  unint64_t v44 = v8;
  uint64_t v45 = 0LL;
  unsigned __int32 v49 = 0LL;
  unsigned int v50 = 0LL;
  uint64_t v47 = 0LL;
  unint64_t v48 = 0LL;
  unint64_t v46 = 0LL;
  do
  {
    uint64_t v9 = v4 + 48 * v6;
    int v11 = *(_DWORD *)(v9 + 64);
    unsigned int v10 = (unsigned int *)(v9 + 64);
    if (!v11)
    {
      uint64_t v3 = 0LL;
      goto LABEL_30;
    }

    unint64_t v12 = 0LL;
    LODWORD(v13) = -1;
    while (1)
    {
      if (!*(_DWORD *)(v4 + 48 * v6 + 68))
      {
        int v18 = (unint64_t *)(v54[v6 + 111] + 8 * v12);
        goto LABEL_22;
      }

      unint64_t v14 = *(unsigned int *)(v4 + 44);
LABEL_20:
      int v18 = (unint64_t *)(v7 + 8 * (v12 - (v14 * v13)) + 40);
LABEL_22:
      unint64_t v19 = *v18;
      uint64_t v45 = v4;
      unint64_t v46 = __PAIR64__(v12, v6);
      uint64_t v20 = obj_get(a1[49], 0x40000000u, v19, (int *)&sm_cib_desc, &v45, 0LL, 0LL, 0LL, (uint64_t *)&v49);
      if ((_DWORD)v20)
      {
        uint64_t v22 = v20;
        log_err( "%s:%d: %s unable to read cib %lld @ %lld: %d\n",  "nx_check_recent_sanity",  1170,  (const char *)(a1[48] + 208LL),  v12,  v19,  v20);
        uint64_t v3 = v22;
        goto LABEL_30;
      }

      obj_release(v49);
      uint64_t v21 = 1LL;
LABEL_24:
      v12 += v21;
      if (v12 >= *v10)
      {
        uint64_t v3 = 0LL;
        goto LABEL_30;
      }
    }

    unint64_t v13 = v12 / v14;
    unint64_t v16 = *(void *)(v54[v6 + 111] + 8LL * (v12 / v14));
    if (v50)
    {
      obj_release(v50);
      unsigned int v50 = 0LL;
    }

    uint64_t v47 = v4;
    unint64_t v48 = __PAIR64__(v13, v6);
    uint64_t v17 = obj_get(a1[49], 0x40000000u, v16, (int *)&sm_cab_desc, &v47, 0LL, 0LL, 0LL, (uint64_t *)&v50);
    if (!(_DWORD)v17)
    {
      uint64_t v7 = v50[7];
      if (obj_xid((uint64_t)v50) <= v44)
      {
        uint64_t v21 = *(unsigned int *)(v7 + 36);
        goto LABEL_24;
      }

      LODWORD(v14) = *(_DWORD *)(v4 + 44);
      goto LABEL_20;
    }

    uint64_t v3 = v17;
    log_err( "%s:%d: %s unable to read cab %d @ %lld: %d\n",  "nx_check_recent_sanity",  1143,  (const char *)(a1[48] + 208LL),  v13,  v16,  v17);
LABEL_30:
    if (v50)
    {
      obj_release(v50);
      unsigned int v50 = 0LL;
    }
  }

  while (!(v3 | v6++));
  obj_release(v54);
  if ((_DWORD)v3) {
    return v3;
  }
  unint64_t v25 = *(void *)(a1[47] + 160LL);
  if (v25)
  {
    uint64_t v26 = obj_get(a1[49], 0x40000000u, v25, (int *)&om_desc, 0LL, 0LL, 0LL, 0LL, (uint64_t *)&v53);
    if ((_DWORD)v26)
    {
      uint64_t v3 = v26;
      log_err("%s:%d: %s unable to get omap: %d\n");
      return v3;
    }

    if (obj_xid((uint64_t)v53) <= v44)
    {
      obj_release(v53);
    }

    else
    {
      uint64_t v3 = nx_check_recent_sanity_omap((uint64_t)a1, (uint64_t)v53, v44);
      obj_release(v53);
      if ((_DWORD)v3)
      {
        log_err("%s:%d: %s omap check failed with error: %d\n");
        return v3;
      }
    }
  }

  uint64_t v27 = a1[47];
  if (!*(_DWORD *)(v27 + 180)) {
    return 0LL;
  }
  unint64_t v28 = 0LL;
  while (2)
  {
    unint64_t v29 = *(void *)(v27 + 8 * v28 + 184);
    if (!v29) {
      goto LABEL_75;
    }
    uint64_t v30 = obj_get(a1[49], 0, v29, (int *)&apfs_desc, 0LL, 0LL, 0LL, 0LL, &v52);
    if ((_DWORD)v30)
    {
      uint64_t v42 = v30;
      log_err( "%s:%d: %s unable to get fs[%d] oid %lld, %d\n",  "nx_check_recent_sanity",  1212,  (const char *)(a1[48] + 208LL),  v28,  v29,  v30);
      return v42;
    }

    unint64_t v31 = obj_xid(v52);
    uint64_t v32 = (uint64_t *)v52;
    if (v31 <= v44) {
      goto LABEL_74;
    }
    unint64_t v33 = *(void *)(*(void *)(v52 + 376) + 128LL);
    if (!v33) {
      goto LABEL_53;
    }
    uint64_t v34 = obj_get(a1[49], 0x40000000u, v33, (int *)&om_desc, 0LL, v52, 0LL, 0LL, (uint64_t *)&v53);
    if (!(_DWORD)v34)
    {
      if (obj_xid((uint64_t)v53) <= v44)
      {
        obj_release(v53);
        uint64_t v32 = (uint64_t *)v52;
      }

      else
      {
        uint64_t v35 = nx_check_recent_sanity_omap(v52, (uint64_t)v53, v44);
        obj_release(v53);
        uint64_t v32 = (uint64_t *)v52;
        if ((_DWORD)v35)
        {
          log_err("%s:%d: %s omap check failed for omap %lld: %d\n");
          goto LABEL_80;
        }
      }

LABEL_53:
      uint64_t v36 = v32[47];
      uint64_t v37 = *(void *)(v36 + 144);
      if (v37)
      {
        __int128 v51 = 0LL;
        extentref_int tree = apfs_get_extentref_tree((uint64_t)v32, v37, 0LL, (uint64_t *)&v51);
        if ((_DWORD)extentref_tree)
        {
          uint64_t v35 = extentref_tree;
          log_err( "%s:%d: %s unable to get extentref tree %lld: %d\n",  "nx_check_recent_sanity",  1246,  (const char *)(v52 + 3992),  *(void *)(*(void *)(v52 + 376) + 144LL),  extentref_tree);
        }

        else if (obj_xid((uint64_t)v51) <= v44)
        {
          uint64_t v35 = 0LL;
        }

        else
        {
          uint64_t v39 = btree_check_recent_sanity(v51, v44, 0LL, 0LL);
          uint64_t v35 = v39;
          if ((_DWORD)v39) {
            log_err( "%s:%d: %s extentref tree %lld: %d\n",  "nx_check_recent_sanity",  1251,  (const char *)(v52 + 3992),  *(void *)(*(void *)(v52 + 376) + 144LL),  v39);
          }
        }

        if (v51) {
          obj_release((uint64_t *)v51);
        }
        uint64_t v32 = (uint64_t *)v52;
        if ((_DWORD)v35)
        {
LABEL_78:
          uint64_t v43 = v32;
          goto LABEL_81;
        }

        uint64_t v36 = *(void *)(v52 + 376);
      }

      if (*(void *)(v36 + 152))
      {
        __int128 v51 = 0LL;
        snap_meta_int tree = apfs_get_snap_meta_tree((uint64_t)v32, 0LL, (uint64_t *)&v51);
        if ((_DWORD)snap_meta_tree)
        {
          uint64_t v35 = snap_meta_tree;
          log_err( "%s:%d: %s unable to get snap meta tree %lld: %d\n",  "nx_check_recent_sanity",  1268,  (const char *)(v52 + 3992),  *(void *)(*(void *)(v52 + 376) + 152LL),  snap_meta_tree);
        }

        else if (obj_xid((uint64_t)v51) <= v44)
        {
          uint64_t v35 = 0LL;
        }

        else
        {
          uint64_t v41 = btree_check_recent_sanity(v51, v44, 0LL, 0LL);
          uint64_t v35 = v41;
          if ((_DWORD)v41) {
            log_err( "%s:%d: %s snap meta tree %lld: %d\n",  "nx_check_recent_sanity",  1273,  (const char *)(v52 + 3992),  *(void *)(*(void *)(v52 + 376) + 144LL),  v41);
          }
        }

        if (v51) {
          obj_release((uint64_t *)v51);
        }
        uint64_t v32 = (uint64_t *)v52;
        if ((_DWORD)v35) {
          goto LABEL_78;
        }
      }

LABEL_74:
      obj_release(v32);
LABEL_75:
      ++v28;
      uint64_t v27 = a1[47];
      continue;
    }

    break;
  }

  uint64_t v35 = v34;
  log_err("%s:%d: %s unable to get omap %lld: %d\n");
LABEL_80:
  uint64_t v43 = (uint64_t *)v52;
LABEL_81:
  obj_release(v43);
  return v35;
}

uint64_t nx_check_recent_sanity_omap(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v22 = *MEMORY[0x1895F89C0];
  unint64_t v14 = 0LL;
  uint64_t v6 = *(void *)(a2 + 376);
  uint64_t v7 = *(void *)(v6 + 48);
  if (!v7) {
    goto LABEL_10;
  }
  int v8 = *(_DWORD *)(v6 + 40);
  __int128 v16 = 0u;
  uint64_t v21 = 0LL;
  __int128 v19 = 0u;
  __int128 v20 = 0u;
  __int128 v18 = 0u;
  __int128 v17 = 0u;
  uint64_t v15 = omap_key_cmp;
  DWORD2(v16) = 11;
  if ((unsigned __int16)v8 != 2)
  {
    uint64_t extended = 22LL;
    goto LABEL_8;
  }

  uint64_t extended = btree_get_extended(a1, v8 & 0xFFFF0000, v7, 0LL, 0, (uint64_t)&v15, 0LL, (uint64_t *)&v14);
  if ((_DWORD)extended)
  {
LABEL_8:
    obj_type(a1);
    log_err("%s:%d: %s unable to get omap tree: %d\n");
    return extended;
  }

  if (obj_xid((uint64_t)v14) <= a3)
  {
    obj_release(v14);
  }

  else
  {
    uint64_t extended = btree_check_recent_sanity( (char *)v14,  a3,  (uint64_t (*)(uint64_t, uint64_t, unint64_t, void, void, uint64_t, void))omap_recent_sanity_callback,  0LL);
    obj_release(v14);
    if ((_DWORD)extended) {
      return extended;
    }
  }

LABEL_10:
  uint64_t v10 = *(void *)(a2 + 376);
  uint64_t v11 = *(void *)(v10 + 56);
  if (!v11) {
    return 0LL;
  }
  int v12 = *(_DWORD *)(v10 + 44);
  __int128 v16 = 0u;
  uint64_t v21 = 0LL;
  __int128 v19 = 0u;
  __int128 v20 = 0u;
  __int128 v18 = 0u;
  __int128 v17 = 0u;
  uint64_t v15 = omap_snapshot_key_cmp;
  DWORD2(v16) = 19;
  if ((unsigned __int16)v12 != 2)
  {
    uint64_t extended = 22LL;
    goto LABEL_17;
  }

  uint64_t extended = btree_get_extended(a1, v12 & 0xFFFF0000, v11, 0LL, 0, (uint64_t)&v15, 0LL, (uint64_t *)&v14);
  if ((_DWORD)extended)
  {
LABEL_17:
    obj_type(a1);
    log_err("%s:%d: %s unable to get omap snapshot tree: %d\n");
    return extended;
  }

  else {
    uint64_t extended = btree_check_recent_sanity((char *)v14, a3, 0LL, 0LL);
  }
  obj_release(v14);
  return extended;
}

BOOL MetricsCompactor::Import(uint64_t a1, char *a2, uint64_t a3, void *a4)
{
  uint64_t v46 = *MEMORY[0x1895F89C0];
  *(_OWORD *)(a1 + 16) = 0u;
  int v8 = (uint64_t *)(a1 + 16);
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  uint64_t v9 = (unsigned __int8 *)(a1 + 32);
  *(_OWORD *)a1 = xmmword_183CA1EA0;
  *(_BYTE *)(a1 + 288) = 0;
  set_metric_default_values(a3);
  uint64_t v10 = (const char *)strlen(a2);
  *(void *)(a3 + 336) = v10;
  *(_BYTE *)(a1 + 288) = Base85::Decode( (Base85 *)a2,  v10,  (uint64_t)v9,  (unsigned __int8 *)0x100,  (uint64_t *)(a1 + 24),  v11) ^ 1;
  int v12 = MetricsCompactor::Read((MetricsCompactor *)a1);
  BOOL result = 0LL;
  *(_DWORD *)(a3 + 68) = v12;
  if (v12 > 11) {
    return result;
  }
  if (v12)
  {
    unint64_t v14 = MetricsCompactor::Read((MetricsCompactor *)a1);
    unint64_t v15 = v14 >> 1;
    if ((v14 & 1) != 0) {
      unint64_t v15 = -(uint64_t)v15;
    }
    unint64_t v16 = v15 + *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v16;
    *(_DWORD *)(a3 + 168) = MetricsCompactor::Read((MetricsCompactor *)a1);
    *(_DWORD *)(a3 + 152) = v16;
    if (*(int *)(a3 + 68) >= 2)
    {
      uint64_t v17 = 0LL;
      __int128 v18 = (_DWORD *)(a3 + 72);
      do
      {
        MetricsCompactor::Read((MetricsCompactor *)a1, v18, 0);
        ++v17;
        v18 += 2;
      }

      while (v17 < *(int *)(a3 + 68) - 1LL);
    }
  }

  uint64_t v19 = 0LL;
  uint64_t v20 = 0LL;
  uint64_t v21 = 0LL;
  *(void *)a1 = MetricsCompactor::Read((MetricsCompactor *)a1);
  do
  {
    switch((int)v19)
    {
      case 0:
        if (((*(void *)a1 >> v19) & 1) != 0) {
          *(void *)(a3 + 400) = MetricsCompactor::Read((MetricsCompactor *)a1);
        }
        break;
      case 1:
        if (((*(void *)a1 >> v19) & 1) != 0) {
          *(void *)(a3 + 376) = MetricsCompactor::Read((MetricsCompactor *)a1);
        }
        break;
      case 2:
        if (((*(void *)a1 >> v19) & 1) != 0) {
          *(void *)(a3 + 392) = MetricsCompactor::Read((MetricsCompactor *)a1);
        }
        break;
      case 3:
        if (((*(void *)a1 >> v19) & 1) != 0) {
          *(void *)(a3 + 344) = MetricsCompactor::Read((MetricsCompactor *)a1);
        }
        break;
      case 4:
        if (((*(void *)a1 >> v19) & 1) != 0) {
          *(void *)(a3 + 360) = MetricsCompactor::Read((MetricsCompactor *)a1);
        }
        break;
      case 5:
        if (((*(void *)a1 >> v19) & 1) != 0) {
          *(void *)(a3 + 384) = MetricsCompactor::Read((MetricsCompactor *)a1);
        }
        break;
      case 6:
        if (((*(void *)a1 >> v19) & 1) != 0) {
          *(void *)(a3 + 352) = MetricsCompactor::Read((MetricsCompactor *)a1);
        }
        break;
      case 7:
        if (((*(void *)a1 >> v19) & 1) != 0) {
          *(void *)(a3 + 368) = MetricsCompactor::Read((MetricsCompactor *)a1);
        }
        break;
      case 8:
        if ((*(void *)a1 & (1LL << v19)) != 0)
        {
          *(void *)(a3 + 264) = MetricsCompactor::Read((MetricsCompactor *)a1);
          if ((*(void *)a1 & (1LL << v19)) != 0) {
            *(void *)(a3 + 256) = MetricsCompactor::Read((MetricsCompactor *)a1);
          }
        }

        break;
      case 9:
        if ((*(void *)a1 & (1LL << v19)) != 0)
        {
          *(void *)(a3 + 280) = MetricsCompactor::Read((MetricsCompactor *)a1);
          if ((*(void *)a1 & (1LL << v19)) != 0) {
            *(void *)(a3 + 272) = MetricsCompactor::Read((MetricsCompactor *)a1);
          }
        }

        break;
      case 10:
        if (((*(void *)a1 >> v19) & 1) != 0) {
          *(void *)(a3 + 320) = MetricsCompactor::Read((MetricsCompactor *)a1);
        }
        break;
      case 11:
        if (((*(void *)a1 >> v19) & 1) != 0) {
          *(void *)(a3 + 312) = MetricsCompactor::Read((MetricsCompactor *)a1);
        }
        break;
      case 12:
        if (((*(void *)a1 >> v19) & 1) != 0) {
          *(void *)(a3 + 288) = MetricsCompactor::Read((MetricsCompactor *)a1);
        }
        break;
      case 13:
        if (((*(void *)a1 >> v19) & 1) != 0)
        {
          unint64_t v25 = MetricsCompactor::Read((MetricsCompactor *)a1);
          unint64_t v26 = v25 >> 1;
          if ((v25 & 1) != 0) {
            unint64_t v26 = -(uint64_t)v26;
          }
          *(void *)(a3 + 408) = v26;
        }

        break;
      case 14:
        if (((*(void *)a1 >> v19) & 1) != 0) {
          *(void *)(a3 + 416) = MetricsCompactor::Read((MetricsCompactor *)a1);
        }
        break;
      case 15:
        if (((*(void *)a1 >> v19) & 1) != 0)
        {
          unint64_t v27 = MetricsCompactor::Read((MetricsCompactor *)a1);
          unint64_t v28 = v27 >> 1;
          if ((v27 & 1) != 0) {
            unint64_t v28 = -(uint64_t)v28;
          }
          *(void *)(a3 + 424) = v28;
        }

        break;
      case 16:
        if (((*(void *)a1 >> v19) & 1) != 0)
        {
          unint64_t v29 = MetricsCompactor::Read((MetricsCompactor *)a1);
          unint64_t v30 = v29 >> 1;
          if ((v29 & 1) != 0) {
            unint64_t v30 = -(uint64_t)v30;
          }
          *(void *)(a3 + 432) = v30;
        }

        break;
      case 17:
        if (((*(void *)a1 >> v19) & 1) != 0) {
          *(void *)(a3 + 440) = MetricsCompactor::Read((MetricsCompactor *)a1);
        }
        break;
      case 18:
        if (((*(void *)a1 >> v19) & 1) != 0) {
          *(void *)(a3 + 448) = MetricsCompactor::Read((MetricsCompactor *)a1);
        }
        break;
      case 19:
        if (((*(void *)a1 >> v19) & 1) != 0) {
          *(void *)(a3 + 328) = MetricsCompactor::Read((MetricsCompactor *)a1);
        }
        break;
      case 20:
        if ((*(void *)a1 & (1LL << v19)) != 0)
        {
          uint64_t v20 = MetricsCompactor::Read((MetricsCompactor *)a1);
          if ((*(void *)a1 & (1LL << v19)) != 0) {
            uint64_t v21 = MetricsCompactor::Read((MetricsCompactor *)a1);
          }
        }

        break;
      case 21:
        if (((*(void *)a1 >> v19) & 1) != 0) {
          *(void *)(a3 + 456) = MetricsCompactor::Read((MetricsCompactor *)a1);
        }
        break;
      case 22:
        if (((*(void *)a1 >> v19) & 1) != 0) {
          *(void *)(a3 + 464) = MetricsCompactor::Read((MetricsCompactor *)a1);
        }
        break;
      case 23:
        if (((*(void *)a1 >> v19) & 1) != 0) {
          *(void *)(a3 + 472) = MetricsCompactor::Read((MetricsCompactor *)a1);
        }
        break;
      case 24:
        if (((*(void *)a1 >> v19) & 1) != 0) {
          *(void *)(a3 + 488) = MetricsCompactor::Read((MetricsCompactor *)a1);
        }
        break;
      case 25:
        if ((*(void *)a1 & (1LL << v19)) != 0)
        {
          *(void *)(a3 + 536) = MetricsCompactor::Read((MetricsCompactor *)a1);
          if ((*(void *)a1 & (1LL << v19)) != 0) {
            *(void *)(a3 + 560) = MetricsCompactor::Read((MetricsCompactor *)a1);
          }
        }

        break;
      case 26:
        if ((*(void *)a1 & (1LL << v19)) != 0)
        {
          *(void *)(a3 + 544) = MetricsCompactor::Read((MetricsCompactor *)a1);
          if ((*(void *)a1 & (1LL << v19)) != 0) {
            *(void *)(a3 + 568) = MetricsCompactor::Read((MetricsCompactor *)a1);
          }
        }

        break;
      case 27:
        if ((*(void *)a1 & (1LL << v19)) != 0)
        {
          *(void *)(a3 + 552) = MetricsCompactor::Read((MetricsCompactor *)a1);
          if ((*(void *)a1 & (1LL << v19)) != 0) {
            *(void *)(a3 + 576) = MetricsCompactor::Read((MetricsCompactor *)a1);
          }
        }

        break;
      case 28:
        if (((*(void *)a1 >> v19) & 1) != 0) {
          *(void *)(a3 + 504) = MetricsCompactor::Read((MetricsCompactor *)a1);
        }
        break;
      case 29:
        if (((*(void *)a1 >> v19) & 1) != 0) {
          *(void *)(a3 + 512) = MetricsCompactor::Read((MetricsCompactor *)a1);
        }
        break;
      case 30:
        if (((*(void *)a1 >> v19) & 1) != 0) {
          *(void *)(a3 + 520) = MetricsCompactor::Read((MetricsCompactor *)a1);
        }
        break;
      case 31:
        if (((*(void *)a1 >> v19) & 1) != 0) {
          *(void *)(a3 + 528) = MetricsCompactor::Read((MetricsCompactor *)a1);
        }
        break;
      case 32:
        uint64_t v22 = 1LL << v19;
        if ((*(void *)a1 & (1LL << v19)) != 0)
        {
          *(void *)(a3 + 584) = MetricsCompactor::Read((MetricsCompactor *)a1);
          if ((*(void *)a1 & v22) != 0)
          {
            *(void *)(a3 + 600) = MetricsCompactor::Read((MetricsCompactor *)a1);
            if ((*(void *)a1 & v22) != 0) {
              *(void *)(a3 + 616) = MetricsCompactor::Read((MetricsCompactor *)a1);
            }
          }
        }

        break;
      case 33:
        uint64_t v31 = 1LL << v19;
        if ((*(void *)a1 & (1LL << v19)) != 0)
        {
          *(void *)(a3 + 592) = MetricsCompactor::Read((MetricsCompactor *)a1);
          if ((*(void *)a1 & v31) != 0)
          {
            *(void *)(a3 + 608) = MetricsCompactor::Read((MetricsCompactor *)a1);
            if ((*(void *)a1 & v31) != 0) {
              *(void *)(a3 + 624) = MetricsCompactor::Read((MetricsCompactor *)a1);
            }
          }
        }

        break;
      case 34:
        if (((*(void *)a1 >> v19) & 1) != 0) {
          *(void *)(a3 + 496) = MetricsCompactor::Read((MetricsCompactor *)a1);
        }
        break;
      case 35:
        if (((*(void *)a1 >> v19) & 1) != 0) {
          *(void *)(a3 + 680) = MetricsCompactor::Read((MetricsCompactor *)a1);
        }
        break;
      case 36:
        uint64_t v23 = 1LL << v19;
        if ((*(void *)a1 & (1LL << v19)) != 0)
        {
          *(void *)(a3 + 688) = MetricsCompactor::Read((MetricsCompactor *)a1);
          if ((*(void *)a1 & v23) != 0)
          {
            *(void *)(a3 + 704) = MetricsCompactor::Read((MetricsCompactor *)a1);
            if ((*(void *)a1 & v23) != 0) {
              *(void *)(a3 + 712) = MetricsCompactor::Read((MetricsCompactor *)a1);
            }
          }
        }

        break;
      case 37:
        if (((*(void *)a1 >> v19) & 1) != 0) {
          *(void *)(a3 + 696) = MetricsCompactor::Read((MetricsCompactor *)a1);
        }
        break;
      case 38:
        if ((*(void *)a1 & (1LL << v19)) != 0)
        {
          *(void *)(a3 + 632) = MetricsCompactor::Read((MetricsCompactor *)a1);
          if ((*(void *)a1 & (1LL << v19)) != 0) {
            *(void *)(a3 + 640) = MetricsCompactor::Read((MetricsCompactor *)a1);
          }
        }

        break;
      case 39:
        if ((*(void *)a1 & (1LL << v19)) != 0)
        {
          *(void *)(a3 + 648) = MetricsCompactor::Read((MetricsCompactor *)a1);
          if ((*(void *)a1 & (1LL << v19)) != 0) {
            *(void *)(a3 + 656) = MetricsCompactor::Read((MetricsCompactor *)a1);
          }
        }

        break;
      case 40:
        if ((*(void *)a1 & (1LL << v19)) != 0)
        {
          *(void *)(a3 + 664) = MetricsCompactor::Read((MetricsCompactor *)a1);
          if ((*(void *)a1 & (1LL << v19)) != 0) {
            *(void *)(a3 + 672) = MetricsCompactor::Read((MetricsCompactor *)a1);
          }
        }

        break;
      case 41:
        if (((*(void *)a1 >> v19) & 1) != 0) {
          *(void *)(a3 + 304) = MetricsCompactor::Read((MetricsCompactor *)a1);
        }
        break;
      case 42:
        if (((*(void *)a1 >> v19) & 1) != 0) {
          *(void *)(a3 + 296) = MetricsCompactor::Read((MetricsCompactor *)a1);
        }
        break;
      case 44:
        uint64_t v24 = 1LL << v19;
        if ((*(void *)a1 & (1LL << v19)) != 0)
        {
          *(void *)(a3 + 720) = MetricsCompactor::Read((MetricsCompactor *)a1);
          if ((*(void *)a1 & v24) != 0)
          {
            *(void *)(a3 + 728) = MetricsCompactor::Read((MetricsCompactor *)a1);
            if ((*(void *)a1 & v24) != 0) {
              *(void *)(a3 + 736) = MetricsCompactor::Read((MetricsCompactor *)a1);
            }
          }
        }

        break;
      default:
        break;
    }

    ++v19;
  }

  while (v19 != 46);
  if ((*(_BYTE *)(a1 + 5) & 0x20) != 0)
  {
    if (!a4) {
      return 0LL;
    }
    MetricsCompactor::Read((MetricsCompactor *)a1, a4);
  }

  int v32 = MetricsCompactor::Read((MetricsCompactor *)a1);
  *(_DWORD *)(a3 + 24) = v32;
  if (v32 > 5) {
    return 0LL;
  }
  if (v32 >= 1)
  {
    uint64_t v33 = 0LL;
    uint64_t v34 = (_DWORD *)(a3 + 28);
    do
    {
      MetricsCompactor::Read((MetricsCompactor *)a1, v34, 1);
      ++v33;
      v34 += 2;
    }

    while (v33 < *(int *)(a3 + 24));
  }

  if ((*(_BYTE *)(a1 + 2) & 0x10) != 0)
  {
    int v45 = 0;
    __int128 v43 = 0u;
    __int128 v44 = 0u;
    *(_OWORD *)__str = 0u;
    snprintf(__str, 0x34uLL, "/dev/rdisk%llus%llu", v20, v21);
LABEL_136:
    *(void *)(a3 + 160) = strdup(__str);
    goto LABEL_137;
  }

  memset(__str, 0, sizeof(__str));
  *(void *)&__int128 v43 = 0LL;
  if ((MetricsCompactor::Read(a1, (uint64_t)__str) & 1) == 0)
  {
    if (SBYTE7(v43) < 0) {
      operator delete(*(void **)__str);
    }
    return 0LL;
  }

  if (SBYTE7(v43) < 0)
  {
    if (*(void *)&__str[8]) {
      *(void *)(a3 + 160) = strdup(*(const char **)__str);
    }
    operator delete(*(void **)__str);
    goto LABEL_137;
  }

  if (BYTE7(v43)) {
    goto LABEL_136;
  }
LABEL_137:
  if ((*(_BYTE *)(a1 + 5) & 8) == 0) {
    return *(_BYTE *)(a1 + 288) == 0;
  }
  uint64_t v35 = *v8;
  if (*v8)
  {
    int v36 = 0;
    do
    {
      v36 ^= *v9;
      int v37 = 8;
      do
      {
        int v38 = (char)v36;
        int v39 = 2 * v36;
        int v36 = (2 * v36) ^ 0x12;
        if (v38 >= 0) {
          int v36 = v39;
        }
        --v37;
      }

      while (v37);
      ++v9;
      --v35;
    }

    while (v35);
    uint64_t v40 = v36 >> 1;
  }

  else
  {
    uint64_t v40 = 0LL;
  }

  unint64_t v41 = MetricsCompactor::Read((MetricsCompactor *)a1);
  BOOL result = 0LL;
  if (v41 <= 0x7F && v41 == v40) {
    return *(_BYTE *)(a1 + 288) == 0;
  }
  return result;
}

void sub_183C813AC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MetricsCompactor::Read(MetricsCompactor *this)
{
  uint64_t v2 = 0LL;
  uint64_t result = 0LL;
  unint64_t v5 = *((void *)this + 2);
  unint64_t v4 = *((void *)this + 3);
  if (v5 > v4) {
    unint64_t v4 = *((void *)this + 2);
  }
  while (1)
  {
    if (v4 == v5)
    {
      *((_BYTE *)this + 288) = 1;
      return result;
    }

    *((void *)this + 2) = v5 + 1;
    uint64_t v6 = *((unsigned __int8 *)this + v5 + 32);
    if (v2 == 56) {
      break;
    }
    result |= (v6 & 0x7F) << v2;
    v2 += 7LL;
    ++v5;
    if ((v6 & 0x80) == 0) {
      return result;
    }
  }

  return result | (v6 << 56);
}

unint64_t MetricsCompactor::Read(MetricsCompactor *a1, _DWORD *a2, int a3)
{
  unint64_t v6 = MetricsCompactor::Read(a1);
  unint64_t v7 = v6 >> 1;
  if ((v6 & 1) != 0) {
    unint64_t v7 = -(uint64_t)v7;
  }
  unint64_t v8 = v7 + *((void *)a1 + 1);
  *((void *)a1 + 1) = v8;
  *a2 = v8;
  unint64_t result = MetricsCompactor::Read(a1);
  unint64_t v10 = result >> 1;
  if ((result & 1) != 0) {
    unint64_t v10 = -(uint64_t)v10;
  }
  if (!a3) {
    LODWORD(v10) = result;
  }
  a2[1] = v10;
  return result;
}

uint64_t MetricsCompactor::Read(MetricsCompactor *a1, void *a2)
{
  uint64_t v17 = *MEMORY[0x1895F89C0];
  unint64_t v4 = MetricsCompactor::Read(a1);
  uint64_t v5 = 0LL;
  __int16 v16 = 0;
  uint64_t v15 = 0LL;
  do
  {
    *((_BYTE *)&v15 + v5++) = v4 % 0x54;
    v4 /= 0x54uLL;
  }

  while (v5 != 10);
  uint64_t v6 = 0LL;
  uint64_t v7 = 0LL;
  for (uint64_t i = 0LL; i != 10; ++i)
  {
    unsigned int v9 = *((unsigned __int8 *)&v15 + i);
    if (*((_BYTE *)&v15 + i))
    {
      unint64_t v10 = MetricsCompactor::Read(a1);
      unint64_t v11 = v10 >> 1;
      if ((v10 & 1) != 0) {
        unint64_t v11 = -(uint64_t)v11;
      }
      v7 += v11;
      v6 += MetricsCompactor::Read(a1);
      if (v9 <= 0x53)
      {
        int v12 = &a2[3 * v9 - 3];
        void *v12 = v7;
        v12[1] = v6;
      }
    }
  }

  uint64_t v13 = MetricsCompactor::Read(a1);
  a2[255] = v13;
  if (v13)
  {
    a2[256] = MetricsCompactor::Read(a1) << 20;
    a2[257] = 1000000000 * MetricsCompactor::Read(a1);
  }

  uint64_t result = MetricsCompactor::Read(a1);
  a2[258] = result;
  if (result)
  {
    a2[259] = MetricsCompactor::Read(a1) << 20;
    uint64_t result = MetricsCompactor::Read(a1);
    a2[260] = 1000000000 * result;
  }

  return result;
}

uint64_t MetricsCompactor::Read(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = MetricsCompactor::Read((MetricsCompactor *)a1);
  uint64_t v5 = *(void *)(a1 + 16);
  if (v4 > *(void *)(a1 + 24) - v5)
  {
LABEL_2:
    uint64_t result = 0LL;
    *(_BYTE *)(a1 + 288) = 1;
    return result;
  }

  unint64_t v7 = v4;
  if (v4)
  {
    unint64_t v8 = (char *)(v5 + a1 + 32);
    unint64_t v9 = v4;
    do
    {
      int v10 = *v8++;
      if (v10 <= 31) {
        goto LABEL_2;
      }
    }

    while (--v9);
  }

  MEMORY[0x186E2481C](a2, a1 + v5 + 32, v4);
  *(void *)(a1 + 16) += v7;
  return 1LL;
}

BOOL MetricsCompactor_Import(char *a1, uint64_t a2)
{
  uint64_t v5 = *MEMORY[0x1895F89C0];
  uint64_t v4 = 0LL;
  memset(v3, 0, sizeof(v3));
  return MetricsCompactor::Import((uint64_t)v3, a1, a2, 0LL);
}

uint64_t io_get_device_block_size(int a1)
{
  uint64_t v8 = *MEMORY[0x1895F89C0];
  unsigned int v6 = 0;
  memset(&v5, 0, sizeof(v5));
  bzero(&v7, 0x878uLL);
  if (!ioctl(a1, 0x40046418uLL, &v6)) {
    return v6;
  }
  if (!fstatfs(a1, &v7)) {
    return v7.f_bsize;
  }
  if (!fstat(a1, &v5)) {
    return v5.st_blksize;
  }
  uint64_t v2 = __error();
  uint64_t v3 = strerror(*v2);
  log_err("%s:%d: can't get the device block size (%s). assuming 512\n", "io_get_device_block_size", 56, v3);
  return 512LL;
}

uint64_t dev_block_size(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 72))();
}

uint64_t dev_block_count(uint64_t a1)
{
  if (*(void *)(a1 + 80)) {
    uint64_t v2 = dev_block_count();
  }
  else {
    uint64_t v2 = 0LL;
  }
  return (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 72) + 8LL))(a1) + v2;
}

uint64_t dev_barrier(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 80);
  if (v4) {
    unsigned int v5 = dev_barrier(v4, a2);
  }
  else {
    unsigned int v5 = 0;
  }
  LODWORD(va_start(va, result) = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a1 + 72) + 80LL))(a1, a2);
  if ((_DWORD)result) {
    return result;
  }
  else {
    return v5;
  }
}

uint64_t dev_unmap(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1;
  uint64_t v3 = *(void *)(a1 + 80);
  if (v3)
  {
    while (1)
    {
      uint64_t v4 = v3;
      uint64_t v5 = *(void *)(v2 + 88);
      if ((v5 & a2) == 0) {
        break;
      }
      a2 &= ~v5;
      uint64_t v3 = *(void *)(v4 + 80);
      uint64_t v2 = v4;
      if (!v3) {
        return (*(uint64_t (**)(void))(*(void *)(v4 + 72) + 88LL))();
      }
    }
  }

  uint64_t v4 = v2;
  return (*(uint64_t (**)(void))(*(void *)(v4 + 72) + 88LL))();
}

uint64_t dev_unmap_flush(uint64_t a1)
{
  if (*(void *)(a1 + 80)) {
    unsigned int v2 = dev_unmap_flush();
  }
  else {
    unsigned int v2 = 0;
  }
  LODWORD(va_start(va, result) = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 72) + 104LL))(a1);
  if ((_DWORD)result) {
    return result;
  }
  else {
    return v2;
  }
}

uint64_t dev_close(uint64_t a1)
{
  if (*(void *)(a1 + 80)) {
    unsigned int v2 = dev_close();
  }
  else {
    unsigned int v2 = 0;
  }
  LODWORD(va_start(va, result) = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 72) + 112LL))(a1);
  if ((_DWORD)result) {
    return result;
  }
  else {
    return v2;
  }
}

uint64_t dev_real_block_size(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 72) + 120LL))();
}

uint64_t dev_set_block_size(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 72) + 128LL))();
}

uint64_t dev_is_writable(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 72) + 136LL))();
}

uint64_t dev_is_external(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 72) + 144LL))();
}

BOOL dev_is_solidstate(uint64_t a1)
{
  return *(_DWORD *)(a1 + 116) != 0;
}

uint64_t dev_read(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1;
  uint64_t v3 = *(void *)(a1 + 80);
  if (v3)
  {
    while (1)
    {
      uint64_t v4 = v3;
      uint64_t v5 = *(void *)(v2 + 88);
      if ((v5 & a2) == 0) {
        break;
      }
      a2 &= ~v5;
      uint64_t v3 = *(void *)(v4 + 80);
      uint64_t v2 = v4;
      if (!v3) {
        return (*(uint64_t (**)(void))(*(void *)(v4 + 72) + 24LL))();
      }
    }
  }

  uint64_t v4 = v2;
  return (*(uint64_t (**)(void))(*(void *)(v4 + 72) + 24LL))();
}

uint64_t dev_read_async(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7 = a1;
  uint64_t v8 = *(void *)(a1 + 80);
  if (v8)
  {
    while (1)
    {
      uint64_t v9 = v8;
      uint64_t v10 = *(void *)(v7 + 88);
      if ((v10 & a2) == 0) {
        break;
      }
      a2 &= ~v10;
      uint64_t v8 = *(void *)(v9 + 80);
      uint64_t v7 = v9;
      if (!v8) {
        goto LABEL_6;
      }
    }
  }

  uint64_t v9 = v7;
LABEL_6:
  uint64_t v11 = *(void *)(v9 + 72);
  int v12 = *(uint64_t (**)(void))(v11 + 32);
  if (v12) {
    return v12();
  }
  uint64_t v14 = (*(uint64_t (**)(void))(v11 + 24))();
  uint64_t v15 = v14;
  __int16 v16 = *(void (**)(uint64_t))a6;
  if (*(void *)a6)
  {
    *(_DWORD *)(a6 + 96) = v14;
    v16(a6);
  }

  return v15;
}

uint64_t dev_read_extended( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8, int a9)
{
  uint64_t v9 = a1;
  uint64_t v10 = *(void *)(a1 + 80);
  if (v10)
  {
    while (1)
    {
      uint64_t v11 = v10;
      uint64_t v12 = *(void *)(v9 + 88);
      if ((v12 & a2) == 0) {
        break;
      }
      a2 &= ~v12;
      uint64_t v10 = *(void *)(v11 + 80);
      uint64_t v9 = v11;
      if (!v10)
      {
        if (!a9) {
          goto LABEL_8;
        }
        goto LABEL_5;
      }
    }
  }

  uint64_t v11 = v9;
  if (a9)
  {
LABEL_5:
    uint64_t v13 = *(uint64_t (**)(void))(*(void *)(v11 + 72) + 40LL);
    if (v13) {
      return v13();
    }
    else {
      return 45LL;
    }
  }

  else
  {
LABEL_8:
    if (a6) {
      return dev_read_async(v11, a2, a3, a4, a5, a7);
    }
    else {
      return (*(uint64_t (**)(void))(*(void *)(v11 + 72) + 24LL))();
    }
  }

uint64_t dev_read_finish(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 72) + 48LL))();
}

uint64_t dev_read_poll(uint64_t a1)
{
  uint64_t v1 = *(uint64_t (**)(void))(*(void *)(a1 + 72) + 56LL);
  if (v1) {
    return v1();
  }
  else {
    return 45LL;
  }
}

uint64_t dev_write(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1;
  uint64_t v3 = *(void *)(a1 + 80);
  if (v3)
  {
    while (1)
    {
      uint64_t v4 = v3;
      uint64_t v5 = *(void *)(v2 + 88);
      if ((v5 & a2) == 0) {
        break;
      }
      a2 &= ~v5;
      uint64_t v3 = *(void *)(v4 + 80);
      uint64_t v2 = v4;
      if (!v3) {
        return (*(uint64_t (**)(void))(*(void *)(v4 + 72) + 64LL))();
      }
    }
  }

  uint64_t v4 = v2;
  return (*(uint64_t (**)(void))(*(void *)(v4 + 72) + 64LL))();
}

uint64_t dev_write_extended(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  uint64_t v7 = a1;
  uint64_t v8 = *(void *)(a1 + 80);
  if (v8)
  {
    while (1)
    {
      uint64_t v9 = v8;
      uint64_t v10 = *(void *)(v7 + 88);
      if ((v10 & a2) == 0) {
        break;
      }
      a2 &= ~v10;
      uint64_t v8 = *(void *)(v9 + 80);
      uint64_t v7 = v9;
      if (!v8) {
        goto LABEL_6;
      }
    }
  }

  uint64_t v9 = v7;
LABEL_6:
  uint64_t v11 = *(void *)(v9 + 72);
  if (!a7) {
    return (*(uint64_t (**)(void))(v11 + 64))();
  }
  uint64_t v12 = *(uint64_t (**)(void))(v11 + 72);
  if (v12) {
    return v12();
  }
  else {
    return 45LL;
  }
}

uint64_t dev_features(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 72) + 16LL))();
}

uint64_t fd_dev_read_poll(uint64_t a1, uint64_t a2)
{
  uint64_t result = aio_error((const aiocb *)(a2 + 8));
  if ((_DWORD)result == -1) {
    return *__error();
  }
  return result;
}

uint64_t fd_dev_block_size(uint64_t a1)
{
  return *(unsigned int *)(a1 + 100);
}

uint64_t fd_dev_block_count(uint64_t a1)
{
  return *(void *)(a1 + 128);
}

uint64_t fd_dev_features(_DWORD *a1, _DWORD *a2, _DWORD *a3, _DWORD *a4, _DWORD *a5)
{
  if (a2) {
    *a2 = a1[26];
  }
  if (a3) {
    *a3 = a1[27];
  }
  if (a4) {
    *a4 = a1[28];
  }
  if (a5) {
    *a5 = a1[29];
  }
  return 0LL;
}

uint64_t fd_dev_read_async( int *a1, unint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return fd_dev_read_async_helper(a1, a2, a3, a4, a5, a7);
}

uint64_t fd_dev_read_extended( uint64_t a1, unint64_t a2, unint64_t a3, void *a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8, unsigned int a9)
{
  if ((a9 & 0xFFFFFFFA) != 0)
  {
    uint64_t v9 = 45LL;
LABEL_7:
    log_err( "%s:%d: failed to read blknum 0x%llx size %zu flags 0x%x error %d dev_name = %s\n",  "fd_dev_read_extended",  622,  a2,  a3,  a9,  v9,  (const char *)(a1 + 208));
    return v9;
  }

  if (((a9 >> 2) ^ 1) != (a8 == 0))
  {
    uint64_t v9 = 22LL;
    goto LABEL_7;
  }

  if (a6) {
    return fd_dev_read_async_helper((int *)a1, a2, a3, (uint64_t)a4, a5, a7);
  }
  else {
    return fd_dev_read_helper(a1, a2, a3, a4, a5);
  }
}

uint64_t fd_dev_read_finish(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (aiocb *)(a2 + 8);
  aiocblist = (aiocb *)(a2 + 8);
  if (aio_suspend((const aiocb *const *)&aiocblist, 1, 0LL) || (unint64_t v5 = aio_return(v3), v5 == -1LL))
  {
    uint64_t v4 = *__error();
  }

  else if (v5 >= *(void *)(a2 + 32))
  {
    uint64_t v4 = 0LL;
  }

  else
  {
    uint64_t v4 = 5LL;
  }

  unsigned int v6 = *(void (**)(uint64_t))a2;
  if (*(void *)a2)
  {
    *(_DWORD *)(a2 + 96) = v4;
    v6(a2);
  }

  return v4;
}

uint64_t fd_dev_write_extended( uint64_t a1, unint64_t a2, unint64_t a3, char *a4, uint64_t a5, uint64_t a6, unsigned int a7)
{
  if ((a7 & 0xFFFFFFFA) != 0)
  {
    uint64_t v7 = 45LL;
  }

  else
  {
    if (((a7 >> 2) ^ 1) == (a6 == 0)) {
      return fd_dev_write_helper(a1, a2, a3, a4, a5, a7);
    }
    uint64_t v7 = 22LL;
  }

  log_err( "%s:%d: failed to write blknum 0x%llx size %zu flags 0x%x error %d dev_name = %s\n",  "fd_dev_write_extended",  866,  a2,  a3,  a7,  v7,  (const char *)(a1 + 208));
  return v7;
}

uint64_t fd_dev_barrier(uint64_t a1, int a2)
{
  uint64_t v4 = *(void **)(a1 + 24);
  if (v4)
  {
    unint64_t v5 = *(unsigned int *)(a1 + 36);
    if ((_DWORD)v5)
    {
      uint64_t result = _fd_dev_write(a1, *(void *)(a1 + 40), v5, v4, *(void *)(a1 + 48));
      if ((_DWORD)result) {
        return result;
      }
      *(_DWORD *)(a1 + 36) = 0;
    }
  }

  fsync(*(_DWORD *)a1);
  int v7 = *(_DWORD *)(a1 + 4);
  if ((v7 & 0x80000000) == 0) {
    fsync(v7);
  }
  if (!a2 && (*(_BYTE *)(a1 + 104) & 2) != 0)
  {
    __int128 v10 = xmmword_183CA1F10;
    uint64_t v11 = 2LL;
    int v9 = ioctl(*(_DWORD *)a1, 0x80186416uLL, &v10);
  }

  else
  {
    int v8 = *(_DWORD *)a1;
    if ((*(_WORD *)(a1 + 64) & 0xF000) == 0x8000) {
      int v9 = fcntl(v8, 51, 0LL);
    }
    else {
      int v9 = ioctl(v8, 0x20006416uLL, 0LL);
    }
  }

  if (v9 == -1) {
    return *__error();
  }
  else {
    return 0LL;
  }
}

uint64_t fd_dev_unmap()
{
  return 0LL;
}

uint64_t fd_dev_unmap_flush()
{
  return 0LL;
}

uint64_t fd_dev_close(uint64_t a1)
{
  uint64_t v2 = (const char *)(a1 + 208);
  size_t v3 = strlen((const char *)(a1 + 208));
  uint64_t v4 = *(void **)(a1 + 24);
  if (!v4)
  {
    uint64_t v7 = 0LL;
    goto LABEL_10;
  }

  unint64_t v5 = *(unsigned int *)(a1 + 36);
  if (!(_DWORD)v5)
  {
    uint64_t v7 = 0LL;
LABEL_9:
    _apfs_free(v4, (*(_DWORD *)(a1 + 100) * *(_DWORD *)(a1 + 32)));
    *(void *)(a1 + 24) = 0LL;
    goto LABEL_10;
  }

  uint64_t v6 = _fd_dev_write(a1, *(void *)(a1 + 40), v5, v4, *(void *)(a1 + 48));
  uint64_t v7 = v6;
  if ((_DWORD)v6) {
    log_err("%s:%d: Hit an error flushing the cache, %d dev_name = %s\n", "fd_dev_close", 370, v6, v2);
  }
  *(_DWORD *)(a1 + 36) = 0;
  uint64_t v4 = *(void **)(a1 + 24);
  if (v4) {
    goto LABEL_9;
  }
LABEL_10:
  if (close(*(_DWORD *)a1)) {
    uint64_t v7 = *__error();
  }
  int v8 = *(_DWORD *)(a1 + 4);
  if ((v8 & 0x80000000) == 0 && close(v8)) {
    uint64_t v7 = *__error();
  }
  int v9 = *(_DWORD *)(a1 + 8);
  if ((v9 & 0x80000000) == 0 && close(v9)) {
    uint64_t v7 = *__error();
  }
  _apfs_free((void *)a1, v3 + 216);
  return v7;
}

uint64_t fd_dev_real_block_size(uint64_t a1)
{
  return *(unsigned int *)(a1 + 96);
}

uint64_t fd_dev_set_block_size(uint64_t a1, unsigned int a2)
{
  unint64_t v2 = *(void *)(a1 + 128) * (unint64_t)*(unsigned int *)(a1 + 100) / a2;
  *(_DWORD *)(a1 + 100) = a2;
  *(void *)(a1 + 128) = v2;
  return 0LL;
}

BOOL fd_dev_is_writable(uint64_t a1)
{
  return *(_DWORD *)(a1 + 108) != 0;
}

BOOL fd_dev_is_external(uint64_t a1)
{
  return *(_DWORD *)(a1 + 112) != 0;
}

uint64_t fd_dev_crypto_type(uint64_t a1)
{
  return *(unsigned int *)(a1 + 120);
}

uint64_t dev_init_common(uint64_t a1)
{
  dev_t v16 = 0;
  int v15 = 0;
  uint64_t v14 = 0LL;
  memset(&v13, 0, sizeof(v13));
  if (fstat(*(_DWORD *)a1, &v13))
  {
    unint64_t v2 = __error();
    uint64_t v3 = *v2;
    log_err( "%s:%d: Couldn't fstat dev_fd (%d), err %d dev_name = %s\n",  "dev_init_common",  983,  *(_DWORD *)a1,  *v2,  (const char *)(a1 + 208));
  }

  else
  {
    *(void *)(a1 + 72) = apfs_userspace_io;
    int device_block_size = io_get_device_block_size(*(_DWORD *)a1);
    *(_DWORD *)(a1 + 96) = device_block_size;
    *(_DWORD *)(a1 + 100) = device_block_size;
    int v5 = *(_DWORD *)a1;
    off_t v18 = 0LL;
    memset(&v17, 0, sizeof(v17));
    if (ioctl(v5, 0x40086419uLL, &v18))
    {
      if (fstat(v5, &v17))
      {
        uint64_t v6 = __error();
        uint64_t v7 = strerror(*v6);
        log_err("%s:%d: can't get block count (%s)\n", "io_get_num_device_blocks", 77, v7);
        off_t v8 = 0LL;
      }

      else
      {
        off_t st_size = v17.st_size;
        off_t v8 = st_size / (int)io_get_device_block_size(v5);
      }
    }

    else
    {
      off_t v8 = v18;
    }

    *(void *)(a1 + 128) = v8;
    io_get_device_features(*(_DWORD *)a1, &v16, &v15, (int *)&v14 + 1, (dev_t *)&v14);
    uint64_t v3 = 0LL;
    int v10 = v15;
    *(_DWORD *)(a1 + 104) = v16;
    *(_DWORD *)(a1 + 108) = v10;
    int v11 = v14;
    *(_DWORD *)(a1 + 112) = HIDWORD(v14);
    *(_DWORD *)(a1 + 116) = v11;
    *(_WORD *)(a1 + 64) = v13.st_mode;
    *(_DWORD *)(a1 + 120) = 0;
  }

  return v3;
}

uint64_t dev_init(const char *a1, int a2, int **a3)
{
  uint64_t v39 = *MEMORY[0x1895F89C0];
  if (!strncmp(a1, "/dev/", 5uLL)) {
    uint64_t v6 = 5LL;
  }
  else {
    uint64_t v6 = 0LL;
  }
  uint64_t v7 = &a1[v6];
  size_t v8 = strlen(&a1[v6]);
  *a3 = 0LL;
  int v9 = (int *)_apfs_calloc(1uLL, v8 + 216);
  if (v9)
  {
    int v10 = v9;
    memset(&v35, 0, sizeof(v35));
    v9[17] = 0;
    if (stat(a1, &v35) || (v35.st_mode & 0xF000) != 0x4000)
    {
      unint64_t v13 = device_container_path(a1, 0LL);
      if (v13)
      {
        uint64_t v14 = (char *)v13;
        unsigned int v15 = a2 & 0xFFFFFFCF | 0x10;
        void v10[2] = -1;
        int v16 = open(a1, v15);
        v10[1] = v16;
        if (v16 < 0)
        {
          uint64_t v24 = __error();
          uint64_t v12 = *v24;
          unint64_t v25 = strerror(*v24);
          log_err("%s:%d: failed to open volume device %s: %s\n", "dev_init", 1107, a1, v25);
        }

        else
        {
          int v17 = open(v14, v15);
          *int v10 = v17;
          if ((v17 & 0x80000000) == 0)
          {
LABEL_30:
            uint64_t inited = dev_init_common((uint64_t)v10);
            if ((_DWORD)inited)
            {
              uint64_t v12 = inited;
              free(v14);
LABEL_38:
              _apfs_free(v10, v8 + 216);
              return v12;
            }

            strlcpy((char *)v10 + 208, v7, v8 + 1);
            free(v14);
LABEL_39:
            uint64_t v12 = 0LL;
            *a3 = v10;
            return v12;
          }

          off_t v18 = __error();
          uint64_t v12 = *v18;
          uint64_t v19 = strerror(*v18);
          log_err("%s:%d: failed to open container device %s: %s\n", "dev_init", 1113, v14, v19);
          close(v10[1]);
        }
      }

      else
      {
        *(void *)(v10 + 1) = -1LL;
        int v20 = open(a1, a2);
        *int v10 = v20;
        if ((v20 & 0x80000000) == 0)
        {
LABEL_29:
          uint64_t v14 = 0LL;
          goto LABEL_30;
        }

        uint64_t v34 = a3;
        int v21 = 30;
        while (*__error() == 16 && v21 != 0)
        {
          log_err("%s:%d: open %s hit EBUSY, attempts remaining: %u dev_name = %s\n", "dev_init", 1133, a1, v21, v7);
          sleep(1u);
          int v23 = open(a1, a2);
          *int v10 = v23;
          --v21;
          if ((v23 & 0x80000000) == 0)
          {
            uint64_t v14 = 0LL;
            a3 = v34;
            goto LABEL_30;
          }
        }

        uint64_t v14 = 0LL;
        uint64_t v12 = *__error();
        a3 = v34;
      }
    }

    else
    {
      bzero(__str, 0x400uLL);
      bzero(v37, 0x400uLL);
      bzero(v36, 0x400uLL);
      snprintf(__str, 0x400uLL, "%s/apfs", a1);
      snprintf(v36, 0x400uLL, "%s/apfs_data", a1);
      snprintf(v37, 0x400uLL, "%s/nx", a1);
      int v11 = open(__str, a2);
      v10[1] = v11;
      if (v11 < 0) {
        uint64_t v12 = *__error();
      }
      else {
        uint64_t v12 = 0LL;
      }
      int v26 = open(v36, a2);
      void v10[2] = v26;
      if (v26 < 0) {
        uint64_t v12 = *__error();
      }
      int v27 = open(v37, a2);
      int v28 = v27;
      *int v10 = v27;
      int v29 = v10[1];
      if ((v29 & 0x80000000) == 0 && (v10[2] & 0x80000000) == 0 && (v27 & 0x80000000) == 0) {
        goto LABEL_29;
      }
      if (!(_DWORD)v12)
      {
        uint64_t v12 = *__error();
        int v28 = *v10;
        int v29 = v10[1];
      }

      int v31 = v10[2];
      int v32 = strerror(v12);
      log_err( "%s:%d: failed to open apfs/nx special devices ['%s'(%d) / '%s'(%d) / '%s'(%d)] - err %d (%s) dev_name = '%s'\n",  "dev_init",  1094,  __str,  v29,  v36,  v31,  v37,  v28,  v12,  v32,  v7);
      close(*v10);
      close(v10[1]);
      close(v10[2]);
      uint64_t v14 = 0LL;
    }

    free(v14);
    if ((_DWORD)v12) {
      goto LABEL_38;
    }
    goto LABEL_39;
  }

  return 12LL;
}

uint64_t dev_set_tier2_device(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == a1) {
    return 22LL;
  }
  uint64_t result = 0LL;
  *(void *)(a1 + 80) = a2;
  *(void *)(a1 + 88) = a3;
  return result;
}

uint64_t fd_dev_read_helper(uint64_t a1, unint64_t a2, unint64_t a3, void *a4, uint64_t a5)
{
  uint64_t common = fd_dev_read_common(a1, a2, a3);
  if (!(_DWORD)common)
  {
    unint64_t v11 = *(unsigned int *)(a1 + 100);
    if ((a2 & 0x8000000000000000LL) == 0
      && is_mul_ok(a2, v11)
      && ((a2 * v11) & 0x8000000000000000LL) == 0
      && is_mul_ok(a3, v11))
    {
      unint64_t v13 = a3 * v11;
      if (!a5 || (int v14 = *(_DWORD *)(a1 + 4), v14 < 0)) {
        int v14 = *(_DWORD *)a1;
      }
      ssize_t v15 = pread(v14, a4, a3 * v11, a2 * v11);
      if (v15 < 0)
      {
        int v16 = __error();
        uint64_t common = *v16;
        log_err( "%s:%d: blknum 0x%llx size %zu, error %d dev_name = %s\n",  "fd_dev_read_helper",  510,  a2,  a3,  *v16,  (const char *)(a1 + 208));
      }

      else if (v15 == v13)
      {
        return 0LL;
      }

      else
      {
        return 5LL;
      }
    }

    else
    {
      log_err( "%s:%d: blknum %lld size %zu blksize %u invalid, dev_name = %s\n",  "fd_dev_read_helper",  476,  a2,  a3,  *(_DWORD *)(a1 + 100),  (const char *)(a1 + 208));
      return 22LL;
    }
  }

  return common;
}

uint64_t fd_dev_read_common(uint64_t a1, unint64_t a2, unint64_t a3)
{
  uint64_t v6 = *(void **)(a1 + 24);
  if (v6)
  {
    unint64_t v7 = *(unsigned int *)(a1 + 36);
    if ((_DWORD)v7)
    {
      unint64_t v8 = *(void *)(a1 + 40);
      if (a3 + a2 > v8 && v8 + v7 > a2)
      {
        uint64_t result = _fd_dev_write(a1, v8, v7, v6, *(void *)(a1 + 48));
        if ((_DWORD)result) {
          return result;
        }
        *(_DWORD *)(a1 + 36) = 0;
      }
    }
  }

  unint64_t v10 = *(void *)(a1 + 128);
  if (v10 - a2 >= a3 && v10 > a2) {
    return 0LL;
  }
  else {
    return 6LL;
  }
}

uint64_t _fd_dev_write(uint64_t a1, unint64_t a2, unint64_t a3, void *__buf, uint64_t a5)
{
  unint64_t v5 = *(void *)(a1 + 128);
  BOOL v6 = v5 > a2;
  unint64_t v7 = v5 - a2;
  if (!v6 || v7 < a3) {
    return 6LL;
  }
  unint64_t v10 = *(unsigned int *)(a1 + 100);
  if ((a2 & 0x8000000000000000LL) == 0
    && is_mul_ok(a2, v10)
    && (off_t v11 = a2 * v10, ((a2 * v10) & 0x8000000000000000LL) == 0)
    && is_mul_ok(a3, v10))
  {
    size_t v12 = a3 * v10;
    if (!a5 || (int v13 = *(_DWORD *)(a1 + 4), v13 < 0)) {
      int v13 = *(_DWORD *)a1;
    }
    ssize_t v14 = pwrite(v13, __buf, v12, v11);
    if (v14 < 0)
    {
      return *__error();
    }

    else if (v14 == v12)
    {
      return 0LL;
    }

    else
    {
      return 5LL;
    }
  }

  else
  {
    log_err( "%s:%d: blknum %lld size %zu blksize %u invalid, dev_name = %s\n",  "_fd_dev_write",  725,  a2,  a3,  *(_DWORD *)(a1 + 100),  (const char *)(a1 + 208));
    return 22LL;
  }

uint64_t fd_dev_read_async_helper( int *a1, unint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t common = fd_dev_read_common((uint64_t)a1, a2, a3);
  if (!(_DWORD)common)
  {
    *(_OWORD *)(a6 + 8) = 0u;
    ssize_t v14 = (aiocb *)(a6 + 8);
    *(void *)(a6 + 88) = a5;
    *(_OWORD *)(a6 + 24) = 0u;
    *(_OWORD *)(a6 + 40) = 0u;
    *(_OWORD *)(a6 + 56) = 0u;
    *(_OWORD *)(a6 + 72) = 0u;
    uint64_t v15 = a1[25];
    *(void *)(a6 + 16) = v15 * a2;
    *(void *)(a6 + 24) = a4;
    *(void *)(a6 + 32) = v15 * a3;
    if (!a5 || (int v16 = a1[1], v16 < 0)) {
      int v16 = *a1;
    }
    v14->aio_fildes = v16;
    if (!aio_read(v14)) {
      return 0LL;
    }
    if (*__error() == 35)
    {
      uint64_t common = 16LL;
    }

    else
    {
      uint64_t common = *__error();
      if (!(_DWORD)common) {
        return common;
      }
    }
  }

  int v13 = *(void (**)(uint64_t))a6;
  if (*(void *)a6)
  {
    *(_DWORD *)(a6 + 96) = common;
    v13(a6);
  }

  return common;
}

uint64_t fd_dev_write_helper( uint64_t a1, unint64_t a2, unint64_t a3, char *__buf, uint64_t a5, int a6)
{
  unint64_t v8 = __buf;
  unint64_t v9 = a3;
  unint64_t v10 = a2;
  uint64_t v12 = *(void *)(a1 + 24);
  if (*(_DWORD *)(a1 + 60))
  {
    if (!v12)
    {
      unsigned int v13 = *(_DWORD *)(a1 + 100);
      unsigned int v14 = v13 <= 0x100000 ? 0x100000 / v13 : 1;
      *(_DWORD *)(a1 + 32) = v14;
      int v16 = _apfs_malloc(v14 * v13);
      *(void *)(a1 + 24) = v16;
      *(_DWORD *)(a1 + 36) = 0;
      if (!v16) {
        return 12LL;
      }
    }
  }

  else if (!v12)
  {
    return _fd_dev_write(a1, a2, a3, __buf, a5);
  }

  if (!v9) {
    return 0LL;
  }
  unsigned int v17 = *(_DWORD *)(a1 + 36);
  while (1)
  {
    while (1)
    {
      unint64_t v18 = v9 >= *(_DWORD *)(a1 + 32) - v17 ? *(_DWORD *)(a1 + 32) - v17 : v9;
      if ((a6 & 4) != 0 || ((*(_DWORD *)(a1 + 56) ^ a6) & 1) != 0 || v10 != *(void *)(a1 + 40) + v17) {
        break;
      }
      if (!(_DWORD)v18 || *(void *)(a1 + 48) != a5) {
        break;
      }
      memcpy( (void *)(*(void *)(a1 + 24) + *(_DWORD *)(a1 + 100) * v17),  v8,  (*(_DWORD *)(a1 + 100) * v18));
      unsigned int v17 = *(_DWORD *)(a1 + 36) + v18;
      *(_DWORD *)(a1 + 36) = v17;
      v10 += v18;
      v9 -= v18;
      v8 += (*(_DWORD *)(a1 + 100) * v18);
      if (!v9) {
        return 0LL;
      }
    }

    if (v17)
    {
      uint64_t result = _fd_dev_write(a1, *(void *)(a1 + 40), v17, *(void **)(a1 + 24), *(void *)(a1 + 48));
      if ((_DWORD)result) {
        break;
      }
    }

    unsigned int v17 = 0;
    *(_DWORD *)(a1 + 36) = 0;
    *(void *)(a1 + 40) = v10;
    *(void *)(a1 + 48) = a5;
    *(_DWORD *)(a1 + 56) = a6;
  }

  return result;
}

uint64_t fext_tree_key_cmp(uint64_t a1, void *a2, int a3, void *a4, int a5, int *a6)
{
  uint64_t result = 22LL;
  if (a3 == 16 && a5 == 16)
  {
    if (*a2 >= *a4)
    {
      if (*a2 > *a4)
      {
        int v7 = 1;
      }

      else
      {
        unint64_t v8 = a2[1];
        unint64_t v9 = a4[1];
        BOOL v10 = v8 >= v9;
        int v7 = v8 > v9;
        if (!v10) {
          int v7 = -1;
        }
      }
    }

    else
    {
      int v7 = -1;
    }

    uint64_t result = 0LL;
    *a6 = v7;
  }

  return result;
}

unint64_t *fs_obj_zfree_oc(void *a1, uint64_t a2, int a3, uint64_t a4)
{
  return obj_cache_stats_update_zfree((unint64_t *)(omm + 136), a3, a2);
}

unint64_t *obj_cache_stats_update_zfree(unint64_t *result, int a2, uint64_t a3)
{
  unsigned int v4 = a2 & 0xC8000000;
  if (a2 < 0 != v3)
  {
    if (v4 == 0x80000000)
    {
      unint64_t v18 = result + 29;
      do
        unint64_t v19 = __ldxr(v18);
      while (__stxr(v19 - a3, v18));
      int v20 = result + 31;
      do
        unint64_t v21 = __ldxr(v20);
      while (__stxr(v21 + a3, v20));
      uint64_t v22 = result + 33;
      do
        unint64_t v23 = __ldxr(v22);
      while (__stxr(v23 + 1, v22));
    }

    else
    {
      if (v4 != -2013265920) {
        goto LABEL_24;
      }
      unint64_t v5 = result + 35;
      do
        unint64_t v6 = __ldxr(v5);
      while (__stxr(v6 - a3, v5));
      int v7 = result + 37;
      do
        unint64_t v8 = __ldxr(v7);
      while (__stxr(v8 + a3, v7));
      unint64_t v9 = result + 39;
      do
        unint64_t v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
    }
  }

  else
  {
    if (v4 != 0x40000000 && v4 != 0) {
LABEL_24:
    }
      panic("unexpected storagetype: 0x%x\n", a2 & 0xC8000000);
    uint64_t v12 = result + 23;
    do
      unint64_t v13 = __ldxr(v12);
    while (__stxr(v13 - a3, v12));
    unsigned int v14 = result + 25;
    do
      unint64_t v15 = __ldxr(v14);
    while (__stxr(v15 + a3, v14));
    int v16 = result + 27;
    do
      unint64_t v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }

  return result;
}

uint64_t obj_cache_create(unsigned int a1, unsigned int a2, unsigned int a3, void *a4)
{
  uint64_t v8 = obj_mem_mgr_init();
  if (!(_DWORD)v8)
  {
    unint64_t v9 = (char *)_apfs_calloc(1uLL, 0x550uLL);
    if (v9)
    {
      unint64_t v10 = v9;
      bzero(v9, 0x550uLL);
      uint64_t v11 = new_lock((pthread_mutex_t *)v10);
      if ((_DWORD)v11)
      {
        uint64_t v8 = v11;
LABEL_13:
        _apfs_free(v10, 1360LL);
        return v8;
      }

      uint64_t v12 = new_rwlock((pthread_rwlock_t *)(v10 + 128));
      if ((_DWORD)v12)
      {
        uint64_t v8 = v12;
LABEL_12:
        free_lock((pthread_mutex_t *)v10);
        goto LABEL_13;
      }

      uint64_t v13 = new_lock((pthread_mutex_t *)(v10 + 328));
      if ((_DWORD)v13)
      {
        uint64_t v8 = v13;
LABEL_11:
        free_rwlock((pthread_rwlock_t *)(v10 + 128));
        goto LABEL_12;
      }

      uint64_t v14 = new_cv((pthread_cond_t *)v10 + 27);
      if ((_DWORD)v14)
      {
        uint64_t v8 = v14;
        free_lock((pthread_mutex_t *)(v10 + 328));
        goto LABEL_11;
      }

      if (!a1) {
        a1 = 4096;
      }
      unint64_t v15 = _apfs_malloc(8LL * a1);
      *((void *)v10 + 88) = v15;
      if (v15)
      {
        bzero(v15, 8LL * a1);
        *((_DWORD *)v10 + 174) = a1;
        *((_DWORD *)v10 + 175) = a1 - 1;
        if (a2) {
          unsigned int v16 = a2;
        }
        else {
          unsigned int v16 = 4096;
        }
        *((_DWORD *)v10 + 169) = 128;
        *((_DWORD *)v10 + 170) = v16;
        *((_DWORD *)v10 + 171) = 0;
        *((void *)v10 + 86) = 0LL;
        *((_DWORD *)v10 + 168) = a3;
        obj_cache_stats_init((uint64_t)(v10 + 944), 0x80u, v16, a3);
        unint64_t v17 = _apfs_calloc(0x100uLL, 8uLL);
        *((void *)v10 + 109) = v17;
        if (v17)
        {
          uint64_t v8 = 0LL;
          *((void *)v10 + 93) = v10 + 736;
          *((void *)v10 + 95) = v10 + 752;
          *((void *)v10 + 97) = v10 + 768;
          *((void *)v10 + 99) = v10 + 784;
          *((void *)v10 + 101) = v10 + 800;
          *((void *)v10 + 103) = v10 + 816;
          *((void *)v10 + 169) = v10 + 1344;
          *((void *)v10 + 107) = v10 + 848;
          *((void *)v10 + 105) = v10 + 832;
          *(_OWORD *)(v10 + 712) = 0u;
          *((void *)v10 + 94) = 0LL;
          *((void *)v10 + 96) = 0LL;
          *((void *)v10 + 98) = 0LL;
          *((void *)v10 + 100) = 0LL;
          *((void *)v10 + 102) = 0LL;
          *((void *)v10 + 168) = 0LL;
          *((void *)v10 + 106) = 0LL;
          *((void *)v10 + 104) = 0LL;
          *((void *)v10 + 92) = 0LL;
          *((void *)v10 + 91) = 0LL;
          *((int64x2_t *)v10 + 25) = vdupq_n_s64(0x400uLL);
          *a4 = v10;
          return v8;
        }

        _apfs_free(*((void **)v10 + 88), 8LL * a1);
      }

      free_cv((pthread_cond_t *)v10 + 27);
      free_lock((pthread_mutex_t *)(v10 + 328));
      free_rwlock((pthread_rwlock_t *)(v10 + 128));
      free_lock((pthread_mutex_t *)v10);
      _apfs_free(v10, 1360LL);
    }

    return 12LL;
  }

  return v8;
}

uint64_t obj_mem_mgr_init()
{
  if (!atomic_load((unint64_t *)&omm))
  {
    char v3 = (char *)_apfs_calloc(1uLL, 0x1E0uLL);
    if (!v3) {
      return 12LL;
    }
    unint64_t v4 = (unint64_t)v3;
    unint64_t v5 = (pthread_mutex_t *)(v3 + 8);
    *((_OWORD *)v3 + 28) = 0u;
    *((_OWORD *)v3 + 29) = 0u;
    *((_OWORD *)v3 + 26) = 0u;
    *((_OWORD *)v3 + 27) = 0u;
    *((_OWORD *)v3 + 24) = 0u;
    *((_OWORD *)v3 + 25) = 0u;
    *((_OWORD *)v3 + 22) = 0u;
    *((_OWORD *)v3 + 23) = 0u;
    *((_OWORD *)v3 + 20) = 0u;
    *((_OWORD *)v3 + 21) = 0u;
    *((_OWORD *)v3 + 18) = 0u;
    *((_OWORD *)v3 + 19) = 0u;
    *((_OWORD *)v3 + 16) = 0u;
    *((_OWORD *)v3 + 17) = 0u;
    *((_OWORD *)v3 + 14) = 0u;
    *((_OWORD *)v3 + 15) = 0u;
    *((_OWORD *)v3 + 12) = 0u;
    *((_OWORD *)v3 + 13) = 0u;
    *((_OWORD *)v3 + 10) = 0u;
    *((_OWORD *)v3 + 11) = 0u;
    *((_OWORD *)v3 + 8) = 0u;
    *((_OWORD *)v3 + 9) = 0u;
    *((_OWORD *)v3 + 6) = 0u;
    *((_OWORD *)v3 + 7) = 0u;
    *((_OWORD *)v3 + 4) = 0u;
    *((_OWORD *)v3 + 5) = 0u;
    *((_OWORD *)v3 + 2) = 0u;
    *((_OWORD *)v3 + 3) = 0u;
    *(_OWORD *)char v3 = 0u;
    *((_OWORD *)v3 + 1) = 0u;
    uint64_t v6 = new_lock((pthread_mutex_t *)(v3 + 8));
    if ((_DWORD)v6)
    {
      uint64_t v1 = v6;
      log_err("%s:%d: object memory manager failed to create lock, error: %d\n", "obj_mem_mgr_init", 7179, v6);
      _apfs_free((void *)v4, 480LL);
      return v1;
    }

    *(void *)(v4 + 72) = 0LL;
    __tp.__darwin_time_t tv_sec = 0LL;
    __tp.uint64_t tv_nsec = 0LL;
    clock_gettime(_CLOCK_UPTIME_RAW_APPROX, &__tp);
    __darwin_time_t tv_sec = __tp.tv_sec;
    *(_OWORD *)(v4 + 136) = 0u;
    *(_OWORD *)(v4 + 440) = 0u;
    *(_OWORD *)(v4 + 456) = 0u;
    *(_OWORD *)(v4 + 408) = 0u;
    *(_OWORD *)(v4 + 424) = 0u;
    *(_OWORD *)(v4 + 376) = 0u;
    *(_OWORD *)(v4 + 392) = 0u;
    *(_OWORD *)(v4 + 344) = 0u;
    *(_OWORD *)(v4 + 360) = 0u;
    *(_OWORD *)(v4 + 312) = 0u;
    *(_OWORD *)(v4 + 328) = 0u;
    *(_OWORD *)(v4 + 280) = 0u;
    *(_OWORD *)(v4 + 296) = 0u;
    *(_OWORD *)(v4 + 248) = 0u;
    *(_OWORD *)(v4 + 264) = 0u;
    *(_OWORD *)(v4 + 216) = 0u;
    *(_OWORD *)(v4 + 232) = 0u;
    *(_OWORD *)(v4 + 184) = 0u;
    *(_OWORD *)(v4 + 200) = 0u;
    *(_OWORD *)(v4 + 152) = 0u;
    *(_OWORD *)(v4 + 168) = 0u;
    *(void *)(v4 + 464) = tv_sec;
    *(void *)(v4 + 472) = 0LL;
    do
    {
      if (__ldxr((unint64_t *)&omm))
      {
        __clrex();
        atomic_load((unint64_t *)&omm);
        free_lock(v5);
        _apfs_free((void *)v4, 480LL);
        return 0LL;
      }
    }

    while (__stlxr(v4, (unint64_t *)&omm));
    if ((*(_DWORD *)omm & 4) != 0) {
      log_debug( "%s:%d: object memory manager initialized with feature flags: 0x%x, apfs_mem_max: %lld\n",  "obj_mem_mgr_init",  7200,  *(_DWORD *)omm,  *(void *)(omm + 96));
    }
  }

  return 0LL;
}

double obj_cache_stats_init(uint64_t a1, unsigned int a2, unsigned int a3, unsigned int a4)
{
  v11.__darwin_time_t tv_sec = 0LL;
  v11.uint64_t tv_nsec = 0LL;
  clock_gettime(_CLOCK_UPTIME_RAW_APPROX, &v11);
  __darwin_time_t tv_sec = v11.tv_sec;
  double result = 0.0;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  unint64_t v10 = a4 * (unint64_t)a3;
  *(void *)(a1 + 8) = a4 * (unint64_t)a2;
  *(void *)(a1 + 16) = v10;
  *(void *)a1 = v10;
  *(void *)(a1 + 328) = tv_sec;
  *(void *)(a1 + 336) = 0LL;
  return result;
}

uint64_t obj_cache_ephemeral_adjust(uint64_t result, int a2, int a3, int a4)
{
  if ((a2 & 0x8000000) != 0)
  {
    *(_DWORD *)(result + 692) += a4;
  }

  else
  {
    *(_DWORD *)(result + 688) += a4;
    uint64_t v4 = *(void *)(result + 392);
    if (v4)
    {
      int v6 = *(_DWORD *)(result + 900);
      if (a4 < 0) {
        int v7 = v6 - v5;
      }
      else {
        int v7 = v6 + v5;
      }
    }

    else
    {
      int v7 = *(_DWORD *)(result + 900) + a4;
    }

    *(_DWORD *)(result + 900) = v7;
  }

  return result;
}

void obj_cache_unlock_write(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 720);
  if (v1)
  {
    *(void *)(a1 + 720) = 0LL;
    *(void *)(a1 + 728) = 0LL;
    pthread_mutex_unlock((pthread_mutex_t *)a1);
    do
    {
      uint64_t v2 = *(void *)(v1 + 72);
      obj_destroy_complete(v1, 0);
      uint64_t v1 = v2;
    }

    while (v2);
  }

  else
  {
    pthread_mutex_unlock((pthread_mutex_t *)a1);
  }

uint64_t obj_cache_lock_by_state(pthread_mutex_t *a1, int a2)
{
  if (a2 != 2 && a2 != 1) {
    panic("obj_cache_lock_by_state, invalid oc_lock_state %d\n", a2);
  }
  return pthread_mutex_lock(a1);
}

  ;
}

void obj_cache_unlock_by_state(pthread_mutex_t *a1, int a2)
{
  if (a2 == 2)
  {
    obj_cache_unlock_write((uint64_t)a1);
  }

  else
  {
    if (a2 != 1) {
      panic("obj_cache_unlock_by_state, invalid oc_lock_state %d\n", a2);
    }
    pthread_mutex_unlock(a1);
  }

void obj_cache_reset(pthread_mutex_t *a1, int a2)
{
  if (!a2)
  {
    pthread_mutex_lock(a1);
    uint64_t v4 = (unsigned int *)&a1[14].__opaque[8];
    do
      unsigned int v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }

  int v6 = (unsigned int *)&a1[14].__opaque[12];
  do
    unsigned int v7 = __ldxr(v6);
  while (__stxr(v7, v6));
  if (v7)
  {
    do
    {
      char v23 = 1;
      uint64_t sig = a1[21].__sig;
      if (sig)
      {
        if ((*(_BYTE *)(*(void *)(sig + 136) + 20LL) & 0x80) == 0)
        {
          obj_async_finish(sig, &v23);
          if (!v23) {
            pthread_mutex_lock(a1);
          }
        }
      }

      do
        unsigned int v9 = __ldxr(v6);
      while (__stxr(v9, v6));
    }

    while (v9);
  }

  if (a1[11].__sig)
  {
    unint64_t v10 = *(unsigned int *)&a1[10].__opaque[48];
    if ((_DWORD)v10)
    {
      for (unint64_t i = 0LL; i < v10; ++i)
      {
        uint64_t v12 = *(void *)(a1[11].__sig + 8 * i);
        if (v12)
        {
          do
          {
            uint64_t v13 = *(void *)(v12 + 72);
            if (v12 != *(void *)a1[6].__opaque)
            {
              uint64_t v14 = *(void *)(v12 + 16);
              if ((v14 & 0x80000000) != 0) {
                obj_cache_ephemeral_adjust((uint64_t)a1, v14, *(_DWORD *)(v12 + 48), -1);
              }
              else {
                --*(_DWORD *)&a1[10].__opaque[36];
              }
              obj_destroy_internal(v12, 0);
            }

            uint64_t v12 = v13;
          }

          while (v13);
          unint64_t v10 = *(unsigned int *)&a1[10].__opaque[48];
        }
      }
    }
  }

  uint64_t v15 = *(void *)a1[11].__opaque;
  if (v15)
  {
    do
    {
      uint64_t v16 = *(void *)(v15 + 72);
      --*(_DWORD *)&a1[10].__opaque[36];
      obj_destroy_internal(v15, 0);
      uint64_t v15 = v16;
    }

    while (v16);
  }

  uint64_t v17 = *(void *)&a1[11].__opaque[24];
  if (v17)
  {
    do
    {
      uint64_t v18 = *(void *)(v17 + 88);
      if (v17 != *(void *)a1[6].__opaque) {
        obj_destroy_internal(v17, 0);
      }
      uint64_t v17 = v18;
    }

    while (v18);
  }

  uint64_t v19 = *(void *)&a1[11].__opaque[40];
  if (v19)
  {
    do
    {
      uint64_t v20 = *(void *)(v19 + 88);
      obj_destroy_internal(v19, 0);
      uint64_t v19 = v20;
    }

    while (v20);
  }

  if (!a2)
  {
    obj_cache_unlock_write((uint64_t)a1);
    unint64_t v21 = (unsigned int *)&a1[14].__opaque[8];
    do
      unsigned int v22 = __ldxr(v21);
    while (__stxr(v22 - 1, v21));
  }

void obj_cache_destroy(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 1288);
  if ((v2 & 1) == 0) {
    goto LABEL_7;
  }
  *(void *)(a1 + 1288) = v2 & 0xFFFFFFFFFFFFFFFELL;
  uint64_t v3 = *(void *)(a1 + 928);
  if (v3) {
    *(void *)(v3 + 936) = *(void *)(a1 + 936);
  }
  **(void **)(a1 + 936) = v3;
  if ((v2 & 2) != 0)
  {
    *(void *)(a1 + 1288) = v2 & 0xFFFFFFFFFFFFFFFCLL;
LABEL_7:
    uint64_t v4 = omm;
    goto LABEL_8;
  }

  uint64_t v4 = omm;
  --*(void *)(omm + 104);
  *(int64x2_t *)(v4 + 136) = vsubq_s64(*(int64x2_t *)(v4 + 136), *(int64x2_t *)(a1 + 944));
  *(void *)(v4 + 152) -= *(void *)(a1 + 960);
LABEL_8:
  pthread_mutex_unlock((pthread_mutex_t *)(v4 + 8));
  pthread_mutex_lock((pthread_mutex_t *)a1);
  unsigned int v5 = (unsigned int *)(a1 + 912);
  do
    unsigned int v6 = __ldxr(v5);
  while (__stxr(v6 + 1, v5));
  obj_cache_reset((pthread_mutex_t *)a1, 1);
  uint64_t v7 = *(void *)(a1 + 392);
  if (v7)
  {
    obj_cache_ephemeral_adjust(a1, *(void *)(v7 + 16), *(_DWORD *)(v7 + 48), -1);
    obj_destroy_internal(*(void *)(a1 + 392), 0);
  }

  uint64_t v8 = *(void **)(a1 + 704);
  if (v8) {
    _apfs_free(v8, 8LL * *(unsigned int *)(a1 + 696));
  }
  obj_cache_unlock_write(a1);
  unsigned int v9 = *(void **)(a1 + 872);
  if (v9) {
    _apfs_free(v9, 2048LL);
  }
  free_cv((pthread_cond_t *)(a1 + 1296));
  free_lock((pthread_mutex_t *)(a1 + 328));
  free_rwlock((pthread_rwlock_t *)(a1 + 128));
  free_lock((pthread_mutex_t *)a1);
  _apfs_free((void *)a1, 1360LL);
}

uint64_t obj_cache_flush_prepare(uint64_t a1, unsigned int a2, char a3, uint64_t a4)
{
  unsigned int v94 = 0;
  if ((a2 & 0x80000000) != 0) {
    return 22LL;
  }
  pthread_mutex_lock((pthread_mutex_t *)a1);
  if (*(_DWORD *)(a1 + 908))
  {
    if (a2)
    {
      obj_cache_unlock_write(a1);
      return 0LL;
    }

    do
    {
      *(_DWORD *)(a1 + 908) = 2;
      cv_wait_rw((pthread_cond_t *)(a1 + 1296), (pthread_mutex_t *)a1, 2LL, 0LL);
    }

    while (*(_DWORD *)(a1 + 908));
  }

  *(_DWORD *)(a1 + 908) = 1;
  __int32 v90 = (pthread_rwlock_t *)(a1 + 128);
  int v9 = pthread_rwlock_wrlock((pthread_rwlock_t *)(a1 + 128));
  if (v9) {
    panic("%s:%d: wrlock == 0 failed %d\n", "/Library/Caches/com.apple.xbs/Sources/apfs_framework/nx/obj.c", 1097, v9);
  }
  uint64_t v89 = a4;
  if (!a2)
  {
    int v11 = 0;
    if ((a3 & 1) == 0)
    {
      int v10 = 0;
      goto LABEL_17;
    }

    uint64_t v13 = 0LL;
LABEL_95:
    int v38 = *(void **)(a1 + 816);
    if (a2) {
      BOOL v39 = v11 < 1;
    }
    else {
      BOOL v39 = 0;
    }
    char v40 = v39;
    if (v38 && (v40 & 1) == 0)
    {
      if (a2) {
        int v41 = -1;
      }
      else {
        int v41 = 0;
      }
      int v93 = v41;
      do
      {
        if (*((_DWORD *)v38 + 9) >> 30 != 1) {
          panic( "non-physical object on physical object dirty list: oid %lld flags 0x%llx 0x%x\n",  v38[14],  v38[2],  *((_DWORD *)v38 + 8));
        }
        __int128 v43 = (unsigned int *)(v38 + 4);
        int v42 = *((_DWORD *)v38 + 8);
        if ((v42 & 1) == 0) {
          panic("physical object on dirty list not dirty: oid %lld flags 0x%llx 0x%x\n", v38[14], v38[2], v42);
        }
        int v45 = v38 + 13;
        __int128 v44 = (const void *)v38[13];
        unint64_t v46 = v38[2];
        if ((v44 == (const void *)3735928559LL) == ((v46 >> 41) & 1)) {
          panic( "dirty object flush state inconsistent: oid %lld flags 0x%llx 0x%x fl %p\n",  v38[14],  v46,  *((_DWORD *)v38 + 8),  v44);
        }
        if ((v46 & 0x20000000000LL) == 0 || *v45 == 3735928559LL)
        {
          unsigned int v94 = 16000;
          if (obj_reference_release_wait(v38, (int *)&v94, 1, 2))
          {
            do
            {
              if (v94 > 0x773593FF)
              {
                uint64_t v47 = v38[1];
                if (!v47) {
                  uint64_t v47 = *(void *)(*v38 + 392LL);
                }
                if (nx_ratelimit_log_allowed(*(void *)(*(void *)v47 + 392LL)))
                {
                  if (*(_WORD *)(v47 + 36) == 13) {
                    unint64_t v48 = (const char *)(v47 + 3992);
                  }
                  else {
                    unint64_t v48 = (const char *)(*(void *)(v47 + 384) + 208LL);
                  }
                  log_debug( "%s:%d: %s oid %lld flags 0x%llx 0x%x refs 0x%llx taking too long to get reference!\n",  "obj_cache_flush_prepare",  1276,  v48,  v38[14],  v38[2],  *((_DWORD *)v38 + 8),  v38[3]);
                }
              }
            }

            while ((obj_reference_release_wait(v38, (int *)&v94, 1, 2) & 1) != 0);
          }
        }

        if (!*(_DWORD *)(a1 + 888)) {
          panic("physical object dirty count underflow\n");
        }
        uint64_t v49 = v38[11];
        unsigned int v50 = (void *)v38[12];
        if (v49)
        {
          *(void *)(v49 + 96) = v50;
          unsigned int v50 = (void *)v38[12];
        }

        else
        {
          *(void *)(a1 + 824) = v50;
        }

        void *v50 = v49;
        --*(_DWORD *)(a1 + 888);
        v38[11] = 3735928559LL;
        do
          unsigned int v51 = __ldxr(v43);
        while (__stxr(v51 & 0xFFFFFFFE, v43));
        v38[2] |= 0x20000000000uLL;
        if ((a3 & 2) != 0) {
          v38[8] = v38[7];
        }
        if (*v45 == 3735928559LL)
        {
          v38[13] = 0LL;
          **(void **)(a1 + 840) = v38;
          *(void *)(a1 + 840) = v45;
          ++*(_DWORD *)(a1 + 904);
        }

        v11 += v93;
        int v38 = *(void **)(a1 + 816);
        if (a2) {
          BOOL v52 = v11 < 1;
        }
        else {
          BOOL v52 = 0;
        }
        int v53 = v52;
      }

      while (v38 && !v53);
    }

    int v54 = pthread_rwlock_unlock(v90);
    if (v54) {
      panic( "%s:%d: unlock == 0 failed %d\n",  "/Library/Caches/com.apple.xbs/Sources/apfs_framework/nx/obj.c",  1305,  v54);
    }
    obj_cache_unlock_write(a1);
    uint64_t v57 = v13 + 13;
    if (!v13) {
      uint64_t v57 = (uint64_t **)(a1 + 832);
    }
    int v58 = *v57;
    if (*v57)
    {
      while (1)
      {
        uint64_t v59 = obj_write_prepare(v58, 0, v89, v55, v56);
        if ((_DWORD)v59) {
          break;
        }
        if ((a3 & 2) != 0)
        {
          uint64_t v60 = v58[19];
          if (!v60) {
            uint64_t v60 = v58[16];
          }
          v58[17] = v60;
        }

        int v58 = (uint64_t *)v58[13];
        if (!v58) {
          goto LABEL_155;
        }
      }

      uint64_t v8 = v59;
      if (!*(_DWORD *)(*(void *)(*(void *)(a1 + 392) + 400LL) + 76LL))
      {
        uint64_t v88 = v58[1];
        if (!v88) {
          uint64_t v88 = *(void *)(*v58 + 392);
        }
      }

      return v8;
    }

LABEL_155:
    int v61 = *(_DWORD *)(a1 + 904);
    if (v61 >= 2)
    {
      unsigned int v62 = 0LL;
      __int32 v63 = *(void **)(a1 + 832);
      for (int i = 1; i < v61; i *= 2)
      {
        if (v63)
        {
          unsigned int v65 = 0LL;
          char v66 = 1;
          uint64_t v67 = v63;
          while (1)
          {
            int v68 = i;
            unsigned int v69 = v67;
            if (i >= 2) {
              break;
            }
            BOOL v70 = (void *)v67[13];
            unsigned int v69 = v67;
            unsigned int v72 = v70;
            if (!v70) {
              goto LABEL_205;
            }
LABEL_167:
            uint64_t v74 = v67[19];
            if (!v74) {
              uint64_t v74 = v67[16];
            }
            uint64_t v75 = v70[19];
            if (!v75) {
              uint64_t v75 = v70[16];
            }
            uint64_t v76 = (void *)v72[13];
            BOOL v77 = v74 <= v75;
            if (v74 > v75) {
              unint64_t v78 = v70;
            }
            else {
              unint64_t v78 = (void *)v72[13];
            }
            if (v74 > v75) {
              unint64_t v79 = v67;
            }
            else {
              unint64_t v79 = v70;
            }
            if (v77) {
              unsigned int v62 = v72;
            }
            else {
              unsigned int v62 = v69;
            }
            if (!v77)
            {
              unsigned int v69 = v72;
              uint64_t v67 = v70;
            }

            if (v67 == v69 || v79 == v78)
            {
              uint64_t v81 = v67;
            }

            else
            {
              int v80 = v67;
              do
              {
                uint64_t v81 = (void *)v80[13];
                uint64_t v82 = v81[19];
                if (!v82) {
                  uint64_t v82 = v81[16];
                }
                uint64_t v83 = v79[19];
                if (!v83) {
                  uint64_t v83 = v79[16];
                }
                if (v82 > v83)
                {
                  uint64_t v84 = (void *)v79[13];
                  v79[13] = v81;
                  v80[13] = v79;
                  uint64_t v81 = v79;
                  unint64_t v79 = v84;
                }

                BOOL v85 = v81 == v69 || v79 == v78;
                int v80 = v81;
              }

              while (!v85);
            }

            if (v81 == v69) {
              v69[13] = v79;
            }
            else {
              unsigned int v62 = v69;
            }
            char v86 = v65 + 13;
            if ((v66 & 1) != 0)
            {
              char v86 = (void *)(a1 + 832);
              __int32 v63 = v67;
            }

            void *v86 = v67;
            unsigned int v65 = v62;
            uint64_t v67 = v76;
            char v66 = 0;
            if (!v76)
            {
              unsigned int v65 = v62;
              goto LABEL_205;
            }
          }

          while (1)
          {
            unsigned int v69 = (void *)v69[13];
            if (!v69) {
              break;
            }
            if (--v68 < 2)
            {
              BOOL v70 = (void *)v69[13];
              int v71 = i;
              unsigned int v72 = v70;
              if (!v70) {
                break;
              }
              while (1)
              {
                uint64_t v73 = (void *)v72[13];
                if (!v73) {
                  goto LABEL_167;
                }
                --v71;
                unsigned int v72 = (void *)v72[13];
                if (v71 < 2)
                {
                  unsigned int v72 = v73;
                  goto LABEL_167;
                }
              }
            }
          }

LABEL_205:
          if (v65) {
            v65[13] = v67;
          }
        }
      }

      if (v62)
      {
        uint64_t v8 = 0LL;
        *(void *)(a1 + 840) = v62 + 13;
        return v8;
      }
    }

    return 0LL;
  }

  if ((a3 & 1) != 0)
  {
    uint64_t v13 = 0LL;
    int v11 = a2;
    goto LABEL_95;
  }

  if (*(_DWORD *)(a1 + 884) >= a2) {
    int v10 = a2;
  }
  else {
    int v10 = *(_DWORD *)(a1 + 884);
  }
  int v11 = a2 - v10;
LABEL_17:
  int v12 = 0;
  uint64_t v13 = 0LL;
  uint64_t v92 = 0LL;
  if (a2) {
    int v14 = -1;
  }
  else {
    int v14 = 0;
  }
  int v91 = v14;
  while (2)
  {
    uint64_t v15 = *(void *)(a1 + 800);
    if (!v15) {
      goto LABEL_73;
    }
    while (!a2 || v10 >= 1)
    {
      if (*(_DWORD *)(v15 + 36) >> 30) {
        panic( "non-virtual object on virtual object dirty list: oid %lld flags 0x%llx 0x%x\n",  *(void *)(v15 + 112),  *(void *)(v15 + 16),  *(_DWORD *)(v15 + 32));
      }
      uint64_t v17 = (unsigned int *)(v15 + 32);
      int v16 = *(_DWORD *)(v15 + 32);
      if ((v16 & 1) == 0) {
        panic( "virtual object on dirty list not dirty: oid %lld flags 0x%llx 0x%x\n",  *(void *)(v15 + 112),  *(void *)(v15 + 16),  v16);
      }
      if (v12)
      {
        if (v12 > 1) {
          goto LABEL_36;
        }
      }

      else
      {
        uint64_t v18 = *(void *)(v15 + 8);
        if (!v18) {
          goto LABEL_53;
        }
        if (*(void *)(v18 + 496)) {
          uint64_t v18 = *(void *)(v18 + 496);
        }
        if ((*(_BYTE *)(*(void *)(v18 + 376) + 264LL) & 1) != 0) {
          goto LABEL_53;
        }
      }

      if (*(_WORD *)(v15 + 36) == 13)
      {
LABEL_53:
        uint64_t v15 = *(void *)(v15 + 88);
        *(void *)(a1 + 864) = v15;
        if (!v15) {
          goto LABEL_73;
        }
      }

      else
      {
LABEL_36:
        if (a2)
        {
          uint64_t v19 = (unint64_t *)(v15 + 24);
          do
            unint64_t v20 = __ldxr(v19);
          while (__stxr(v20, v19));
          if ((v20 & 0xFFFFFF) != ((v20 >> 24) & 0xFFFFF)) {
            goto LABEL_53;
          }
        }

        unsigned int v22 = (void *)(v15 + 104);
        unint64_t v21 = *(const void **)(v15 + 104);
        unint64_t v23 = *(void *)(v15 + 16);
        if ((v21 == (const void *)3735928559LL) == ((v23 >> 41) & 1)) {
          panic( "dirty object flush state inconsistent: oid %lld flags 0x%llx 0x%x fl %p\n",  *(void *)(v15 + 112),  v23,  *(_DWORD *)(v15 + 32),  v21);
        }
        if ((v23 & 0x20000000000LL) != 0 && *v22 != 3735928559LL) {
          goto LABEL_55;
        }
        if (v15 != v92) {
          unsigned int v94 = 16000;
        }
        *(void *)(a1 + 864) = v15;
        uint64_t v92 = v15;
        if (obj_reference_release_wait((void *)v15, (int *)&v94, 1, 2))
        {
          if (v94 > 0x773593FF)
          {
            uint64_t v24 = *(void *)(v15 + 8);
            if (!v24) {
              uint64_t v24 = *(void *)(*(void *)v15 + 392LL);
            }
            if (nx_ratelimit_log_allowed(*(void *)(*(void *)v24 + 392LL)))
            {
              if (*(_WORD *)(v24 + 36) == 13) {
                unint64_t v25 = (const char *)(v24 + 3992);
              }
              else {
                unint64_t v25 = (const char *)(*(void *)(v24 + 384) + 208LL);
              }
              log_debug( "%s:%d: %s oid %lld flags 0x%llx 0x%x refs 0x%llx taking too long to get reference!\n",  "obj_cache_flush_prepare",  1187,  v25,  *(void *)(v15 + 112),  *(void *)(v15 + 16),  *(_DWORD *)(v15 + 32),  *(void *)(v15 + 24));
            }
          }

          uint64_t v92 = v15;
        }

        else
        {
LABEL_55:
          uint64_t v26 = *(void *)(v15 + 88);
          *(void *)(a1 + 864) = v26;
          if (!*(_DWORD *)(a1 + 884)) {
            panic("virtual object dirty count underflow\n");
          }
          int v27 = *(void **)(v15 + 96);
          if (v26)
          {
            *(void *)(v26 + 96) = v27;
            int v27 = *(void **)(v15 + 96);
          }

          else
          {
            *(void *)(a1 + 808) = v27;
          }

          *int v27 = v26;
          --*(_DWORD *)(a1 + 884);
          *(void *)(v15 + 88) = 3735928559LL;
          do
            unsigned int v28 = __ldxr(v17);
          while (__stxr(v28 & 0xFFFFFFFE, v17));
          *(void *)(v15 + 16) |= 0x20000000000uLL;
          if ((a3 & 2) != 0) {
            *(void *)(v15 + 64) = *(void *)(v15 + 56);
          }
          if (*v22 == 3735928559LL)
          {
            *(void *)(v15 + 104) = 0LL;
            **(void **)(a1 + 840) = v15;
            *(void *)(a1 + 840) = v22;
            ++*(_DWORD *)(a1 + 904);
          }

          v10 += v91;
        }

        uint64_t v15 = *(void *)(a1 + 864);
        if (!v15) {
          goto LABEL_73;
        }
      }
    }

    int v12 = 3;
LABEL_73:
    int v29 = pthread_rwlock_unlock(v90);
    if (v29) {
      panic( "%s:%d: unlock == 0 failed %d\n",  "/Library/Caches/com.apple.xbs/Sources/apfs_framework/nx/obj.c",  1217,  v29);
    }
    obj_cache_unlock_write(a1);
    int v32 = v13 + 13;
    if (!v13) {
      int v32 = (uint64_t **)(a1 + 832);
    }
    uint64_t v33 = *v32;
    if (!v33)
    {
LABEL_84:
      pthread_mutex_lock((pthread_mutex_t *)a1);
      int v36 = pthread_rwlock_wrlock(v90);
      if (v36) {
        panic( "%s:%d: wrlock == 0 failed %d\n",  "/Library/Caches/com.apple.xbs/Sources/apfs_framework/nx/obj.c",  1244,  v36);
      }
      BOOL v39 = v12++ < 2;
      if (!v39) {
        goto LABEL_95;
      }
      continue;
    }

    break;
  }

  while (1)
  {
    uint64_t v13 = (uint64_t **)v33;
    uint64_t v34 = obj_write_prepare(v33, 0, v89, v30, v31);
    if ((_DWORD)v34) {
      break;
    }
    if ((a3 & 2) != 0)
    {
      stat v35 = v13[19];
      if (!v35) {
        stat v35 = v13[16];
      }
      v13[17] = v35;
    }

    uint64_t v33 = v13[13];
    if (!v33) {
      goto LABEL_84;
    }
  }

  uint64_t v8 = v34;
  if (!*(_DWORD *)(*(void *)(*(void *)(a1 + 392) + 400LL) + 76LL))
  {
    int v37 = v13[1];
    if (!v37) {
      int v37 = (uint64_t *)(*v13)[49];
    }
    if (nx_ratelimit_log_allowed(*(void *)(*v37 + 392))) {
LABEL_216:
    }
      log_err( "%s:%d: %s oid 0x%llx flags 0x%llx 0x%x type 0x%x/0x%x error preparing for write: %d\n",  "obj_cache_flush_prepare");
  }

  return v8;
}

uint64_t obj_type_and_flags(uint64_t a1)
{
  return *(unsigned int *)(a1 + 36);
}

uint64_t obj_type(uint64_t a1)
{
  return *(unsigned __int16 *)(a1 + 36);
}

uint64_t obj_reference_release_wait(void *a1, int *a2, int a3, int a4)
{
  uint64_t v8 = a1 + 3;
  uint64_t v7 = *a1;
  do
    unint64_t v9 = __ldxr(v8);
  while (__stxr(v9 + 16777217, v8));
  if ((v9 & 0xFFFFFF) == 0xFFFFFF) {
    panic("Reference count overflowed for object %p!\n", a1);
  }
  uint64_t v10 = (v9 >> 24) & 0xFFFFF;
  if (v10 == 0xFFFFF) {
    panic("Get count overflowed for object %p!\n", a1);
  }
  if ((-(v9 >> 44) & 0xFFFFF) == 0 || (v9 & 0xFFFFFF) != v10) {
    goto LABEL_37;
  }
  do
    unint64_t v12 = __ldxr(v8);
  while (__stxr(v12, v8));
  if ((-(v12 >> 44) & 0xFFFFF) != 0)
  {
    uint64_t v13 = (unsigned int *)(a1 + 4);
    do
      unsigned int v14 = __ldxr(v13);
    while (__stxr(v14 | 2, v13));
    do
      unint64_t v15 = __ldxr(v8);
    while (__stxr(v15 - 16777217, v8));
    if (a3)
    {
      int v16 = pthread_rwlock_unlock((pthread_rwlock_t *)(v7 + 128));
      if (v16) {
        panic( "%s:%d: unlock == 0 failed %d\n",  "/Library/Caches/com.apple.xbs/Sources/apfs_framework/nx/obj.c",  3966,  v16);
      }
    }

    uint64_t v17 = *a2 % 0x3B9ACA00u;
    v23.__darwin_time_t tv_sec = *a2 / 0x3B9ACA00uLL;
    v23.uint64_t tv_nsec = v17;
    if (a4 == 1) {
      uint64_t v18 = 1LL;
    }
    else {
      uint64_t v18 = 2LL;
    }
    if (cv_wait_rw((pthread_cond_t *)(v7 + 1296), (pthread_mutex_t *)v7, v18, &v23) == 35
      && *a2 != 2000000000)
    {
      else {
        int v19 = 4 * *a2;
      }
      *a2 = v19;
    }

    if (a3)
    {
      int v20 = pthread_rwlock_wrlock((pthread_rwlock_t *)(v7 + 128));
      if (v20) {
        panic( "%s:%d: wrlock == 0 failed %d\n",  "/Library/Caches/com.apple.xbs/Sources/apfs_framework/nx/obj.c",  3983,  v20);
      }
    }

    return 1LL;
  }

  else
  {
LABEL_37:
    do
      unint64_t v22 = __ldxr(v8);
    while (__stxr(v22 - 0x1000000, v8));
    return 0LL;
  }

uint64_t obj_write_prepare(uint64_t *a1, int a2, uint64_t a3, int8x16_t a4, int8x16_t a5)
{
  uint64_t v5 = *(void *)(*a1 + 392);
  if (a1[1]) {
    uint64_t v6 = a1[1];
  }
  else {
    uint64_t v6 = *(void *)(*a1 + 392);
  }
  if (*(_BYTE *)(v5 + 627)) {
    return 30LL;
  }
  unsigned int v14 = a1 + 18;
  unint64_t v13 = a1[18];
  uint64_t v15 = a1[2];
  unint64_t v16 = a1[15];
  unint64_t v48 = v16;
  if (a1[19])
  {
    uint64_t v49 = a1[19];
    goto LABEL_10;
  }

  uint64_t v49 = a1[16];
  if (v49)
  {
LABEL_10:
    if ((v15 & 0xC0000000) != 0)
    {
      uint64_t v47 = v12;
      unint64_t v17 = 0LL;
      unint64_t v18 = 0LL;
      int v19 = 0;
      goto LABEL_12;
    }

LABEL_51:
    uint64_t v47 = v12;
    if (v13 == v16)
    {
      unint64_t v17 = v49;
    }

    else
    {
      unint64_t v17 = v49;
      if (a2 || v13) {
        goto LABEL_60;
      }
    }

    unint64_t v32 = v17;
    unint64_t v17 = 0LL;
    if (v32)
    {
      int v19 = 0;
      goto LABEL_57;
    }

LABEL_100:
      pthread_mutex_lock((pthread_mutex_t *)*a1);
      unint64_t v17 = v18;
      if (!v19) {
        goto LABEL_24;
      }
      goto LABEL_23;
    }

LABEL_57:
    uint64_t v33 = a1[19];
    if (!v33)
    {
      unint64_t v18 = 0LL;
      goto LABEL_12;
    }

    unint64_t v18 = 0LL;
    if (v33 == a1[16])
    {
LABEL_12:
      if ((a1[2] & 0x80020000000LL) == 0)
      {
        uint64_t v20 = a1[7];
        a4.i64[0] = *(uint64_t *)((char *)a1 + 36);
        *(void *)(v20 + 24) = a4.i64[0];
        *(void *)(v20 + 8) = a1[14];
        if (v13) {
          unint64_t v21 = v13;
        }
        else {
          unint64_t v21 = v16;
        }
        *(void *)(v20 + 16) = v21;
        int v22 = *((_DWORD *)a1 + 12);
        timespec v23 = (unint64_t *)(*(void *)(*(void *)(*a1 + 392) + 376LL) + 984LL);
        do
          unint64_t v24 = __ldxr(v23);
        while (__stxr(v24 + 1, v23));
        fletcher64_set_cksum((unint64_t *)v20, (uint32x4_t *)(v20 + 8), (v22 - 8), 0LL, a4, a5);
      }

      uint64_t v7 = 0LL;
      goto LABEL_20;
    }

    goto LABEL_81;
  }

  if ((v15 & 0xC0000000) != 0)
  {
    if (nx_ratelimit_log_allowed(*(void *)(*(void *)v6 + 392LL)))
    {
      if (*(_WORD *)(v6 + 36) == 13) {
        int v29 = (const char *)(v6 + 3992);
      }
      else {
        int v29 = (const char *)(*(void *)(v6 + 384) + 208LL);
      }
      log_err( "%s:%d: %s oid 0x%llx flags 0x%llx 0x%x type 0x%x/0x%x non-virtual object missing paddr!\n",  "obj_write_prepare",  6413,  v29,  a1[14],  a1[2],  *((_DWORD *)a1 + 8),  *((_DWORD *)a1 + 9),  *((_DWORD *)a1 + 10));
    }

    return 22LL;
  }

  else
  {
    if ((v15 & 0x40) != 0) {
      goto LABEL_51;
    }
    uint64_t v30 = v12;
    uint64_t v31 = omap_get(v6, a1[14], v16, &v49, 0LL, 0LL, 0LL);
    unint64_t v16 = v48;
    uint64_t v12 = v30;
    if ((v31 & 0xFFFFFFFD) == 0) {
      goto LABEL_51;
    }
    uint64_t v7 = v31;
    if (nx_ratelimit_log_allowed(*(void *)(*(void *)v6 + 392LL))) {
      log_err( "%s:%d: %s oid 0x%llx flags 0x%llx 0x%x type 0x%x/0x%x error getting mapping to write %d\n",  "obj_write_prepare");
    }
  }

  return v7;
}

void obj_cache_flush_unprepare(uint64_t a1)
{
  int v2 = pthread_rwlock_wrlock((pthread_rwlock_t *)(a1 + 128));
  if (v2) {
    panic("%s:%d: wrlock == 0 failed %d\n", "/Library/Caches/com.apple.xbs/Sources/apfs_framework/nx/obj.c", 1354, v2);
  }
  for (uint64_t i = *(void *)(a1 + 832); i; uint64_t i = *(void *)(i + 104))
  {
    uint64_t v4 = (unsigned int *)(i + 32);
    do
      unsigned int v5 = __ldxr(v4);
    while (__stxr(v5 | 1, v4));
    if ((v5 & 1) == 0)
    {
      int v6 = *(_DWORD *)(i + 36) >> 30;
      if (v6)
      {
        if (v6 != 1) {
          panic( "bad object type in flush list: oid %lld flags 0x%llx 0x%x\n",  *(void *)(i + 112),  *(void *)(i + 16),  *(_DWORD *)(i + 32));
        }
        *(void *)(i + 88) = 0LL;
        uint64_t v8 = *(void **)(a1 + 824);
        *(void *)(i + 96) = v8;
        *uint64_t v8 = i;
        *(void *)(a1 + 824) = i + 88;
        ++*(_DWORD *)(a1 + 888);
      }

      else
      {
        *(void *)(i + 88) = 0LL;
        uint64_t v7 = *(void **)(a1 + 808);
        *(void *)(i + 96) = v7;
        *uint64_t v7 = i;
        *(void *)(a1 + 808) = i + 88;
        ++*(_DWORD *)(a1 + 884);
      }
    }

    uint64_t v9 = *(void *)(i + 16);
    *(void *)(i + 16) = v9 & 0xFFFFFDFFFFFFFFFFLL;
    if ((v9 & 0x80) != 0)
    {
      *(void *)(i + 16) = v9 & 0xFFFFFDFFFFFFFF7FLL;
      cv_wakeup((pthread_cond_t *)(a1 + 1296));
    }
  }

  int v10 = pthread_rwlock_unlock((pthread_rwlock_t *)(a1 + 128));
  if (v10) {
    panic("%s:%d: unlock == 0 failed %d\n", "/Library/Caches/com.apple.xbs/Sources/apfs_framework/nx/obj.c", 1374, v10);
  }
  obj_cache_unlock_write(a1);
  uint64_t v11 = *(void *)(a1 + 832);
  if (v11)
  {
    uint64_t v12 = (uint64_t *)(a1 + 832);
    do
    {
      uint64_t v13 = *(void *)(v11 + 104);
      uint64_t *v12 = v13;
      if (!v13) {
        *(void *)(a1 + 840) = v12;
      }
      *(void *)(v11 + 104) = 3735928559LL;
      --*(_DWORD *)(a1 + 904);
      unsigned int v14 = *(void **)(v11 + 64);
      if (v14)
      {
        *(void *)(v11 + 64) = 0LL;
        *(void *)(v11 + 136) = 0LL;
      }

      obj_release((uint64_t *)v11);
      uint64_t v11 = *v12;
    }

    while (*v12);
  }

  pthread_mutex_lock((pthread_mutex_t *)a1);
  if (*(_DWORD *)(a1 + 908) >= 2u) {
    cv_wakeup((pthread_cond_t *)(a1 + 1296));
  }
  *(_DWORD *)(a1 + 908) = 0;
  obj_cache_unlock_write(a1);
}

void obj_release(uint64_t *a1)
{
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  if (!v2) {
    uint64_t v2 = *(void *)(v3 + 392);
  }
  uint64_t v4 = (unint64_t *)(a1 + 3);
  do
    unint64_t v5 = __ldxr(v4);
  while (__stxr(v5 - 0x100000000001LL, v4));
  unint64_t v6 = v5 & 0xFFFFFF;
  if ((v5 & 0xFFFFFF) == 0) {
    panic("Reference count underflowed for object %p!\n", a1);
  }
  uint64_t v7 = -(uint64_t)(v5 >> 44) & 0xFFFFF;
  if (v7 == 0x80000) {
    panic("Release count overflowed for object %p!\n", a1);
  }
  if (v6 >= 2)
  {
    do
      unint64_t v8 = __ldxr(v4);
    while (__stxr(v8 + 0x100000000000LL, v4));
    if ((v8 & 0xFFFFFF) == 0 && (-(v8 >> 44) & 0xFFFFF) == 1) {
      cv_wakeup((pthread_cond_t *)(v3 + 1296));
    }
    return;
  }

  uint64_t v9 = a1[2];
  if ((v9 & 0xC) != 0) {
    goto LABEL_15;
  }
  if ((v9 & 0xC00000000LL) == 0) {
    goto LABEL_27;
  }
  uint64_t v13 = (unsigned int *)(a1 + 4);
  do
    unsigned int v14 = __ldxr(v13);
  while (__stxr(v14, v13));
  if ((v14 & 1) == 0)
  {
LABEL_15:
    pthread_mutex_lock((pthread_mutex_t *)v3);
    char v10 = 0;
    uint64_t v9 = a1[2];
    if (v7 && (v9 & 8) != 0)
    {
      do
        unint64_t v11 = __ldxr(v4);
      while (__stxr(v11, v4));
      if ((-(v11 >> 44) & 0xFFFFE) != 0)
      {
        do
        {
          __int128 v36 = xmmword_183CA1F90;
          cv_wait_rw((pthread_cond_t *)(v3 + 1296), (pthread_mutex_t *)v3, 2LL, (timespec *)&v36);
          do
            unint64_t v12 = __ldxr(v4);
          while (__stxr(v12, v4));
        }

        while ((-(v12 >> 44) & 0xFFFFE) != 0);
        char v10 = 0;
        uint64_t v9 = a1[2];
      }

      else
      {
        char v10 = 0;
      }
    }
  }

  else
  {
LABEL_27:
    char v10 = 1;
  }

  if ((v9 & 0x80000008) == 0 && *((_WORD *)a1 + 18) != 13 && (a1[4] & 1) == 0)
  {
    int v15 = pthread_rwlock_rdlock((pthread_rwlock_t *)(v3 + 128));
    if (v15) {
      panic( "%s:%d: rdlock == 0 failed %d\n",  "/Library/Caches/com.apple.xbs/Sources/apfs_framework/nx/obj.c",  5039,  v15);
    }
    obj_cache_enqueue_deferred_update(v3, (uint64_t)a1);
    int v16 = pthread_rwlock_unlock((pthread_rwlock_t *)(v3 + 128));
    if (v16) {
      panic( "%s:%d: unlock == 0 failed %d\n",  "/Library/Caches/com.apple.xbs/Sources/apfs_framework/nx/obj.c",  5041,  v16);
    }
  }

  uint64_t v17 = a1[14];
  int v18 = *((_DWORD *)a1 + 9);
  uint64_t v19 = a1[2];
  int v35 = *((_DWORD *)a1 + 10);
  if ((v10 & 1) != 0)
  {
    uint64_t v20 = 0LL;
    unsigned int v21 = 0;
    unsigned int v22 = 0;
LABEL_48:
    uint64_t v26 = (unsigned int *)(a1 + 4);
    do
      unsigned int v27 = __ldxr(v26);
    while (__stxr(v27 & 0xFFFFFFFD, v26));
    if ((v27 & 2) != 0) {
      uint64_t v20 = a1;
    }
    do
      unint64_t v28 = __ldxr(v4);
    while (__stxr(v28 + 0x100000000000LL, v4));
    if ((v28 & 0xFFFFFF) != 0) {
      goto LABEL_67;
    }
    goto LABEL_66;
  }

  if ((v19 & 4) != 0)
  {
    unint64_t v23 = v19 & 0xFFFFFFFFFFFFFFFBLL;
    a1[2] = v19 & 0xFFFFFFFFFFFFFFFBLL;
    uint64_t v20 = a1;
  }

  else
  {
    uint64_t v20 = 0LL;
    unint64_t v23 = a1[2];
  }

  if ((v23 & 0xC00000000LL) == 0) {
    goto LABEL_46;
  }
  unint64_t v24 = (unsigned int *)(a1 + 4);
  do
    unsigned int v25 = __ldxr(v24);
  while (__stxr(v25, v24));
  if ((v23 & 8) != 0 || (v25 & 1) == 0)
  {
    unsigned int v29 = *(_DWORD *)(*(void *)(*(void *)(v3 + 392) + 376LL) + 36LL);
    unsigned int v22 = (v29 + *((_DWORD *)a1 + 12) - 1) / v29;
    if ((v23 & 0x800000000LL) != 0) {
      unsigned int v21 = 80;
    }
    else {
      unsigned int v21 = 72;
    }
    v23 &= 0xFFFFFFF3FFFFFFFFLL;
    a1[2] = v23;
    if ((v23 & 8) == 0) {
      goto LABEL_47;
    }
  }

  else
  {
LABEL_46:
    unsigned int v22 = 0;
    unsigned int v21 = 0;
    if ((v23 & 8) == 0)
    {
LABEL_47:
      obj_cache_unlock_write(v3);
      goto LABEL_48;
    }
  }

  if ((v23 & 0x80000000) != 0) {
    obj_cache_ephemeral_adjust(v3, v23, *((_DWORD *)a1 + 12), -1);
  }
  else {
    --*(_DWORD *)(v3 + 684);
  }
  do
    unint64_t v30 = __ldxr(v4);
  while (__stxr(v30 + 0x100000000000LL, v4));
  uint64_t v31 = (unsigned int *)(a1 + 4);
  do
    unsigned int v32 = __ldxr(v31);
  while (__stxr(v32 & 0xFFFFFFFD, v31));
  obj_destroy_internal((uint64_t)a1, 0);
  obj_cache_unlock_write(v3);
  if ((v32 & 2) != 0) {
    goto LABEL_67;
  }
LABEL_66:
  if (v20) {
LABEL_67:
  }
    cv_wakeup((pthread_cond_t *)(v3 + 1296));
  if (v22)
  {
    int v33 = spaceman_unreserve(v2, v21, v22);
    if (v33)
    {
      if (*(_WORD *)(v2 + 36) == 13) {
        BOOL v34 = (const char *)(v2 + 3992);
      }
      else {
        BOOL v34 = (const char *)(*(void *)(v2 + 384) + 208LL);
      }
      log_err( "%s:%d: %s oid 0x%llx flags 0x%llx type 0x%x/0x%x error unreserving space on non-dirty release: %d\n",  "obj_release",  5136,  v34,  v17,  v19,  v18,  v35,  v33);
    }
  }

void obj_was_being_written_wakeup(uint64_t a1)
{
  uint64_t v2 = *(pthread_mutex_t **)a1;
  pthread_mutex_lock(*(pthread_mutex_t **)a1);
  uint64_t v3 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = (v3 & 0x80 ^ 0xFFFFFDFFFFFFFFFFLL) & v3;
  obj_cache_unlock_write((uint64_t)v2);
  if ((v3 & 0x80) != 0) {
    cv_wakeup((pthread_cond_t *)&v2[20].__opaque[8]);
  }
}

uint64_t obj_cache_flush_write(pthread_mutex_t *a1, unsigned int a2)
{
  uint64_t sig = a1[13].__sig;
  if (!sig)
  {
LABEL_37:
    pthread_mutex_lock(a1);
    if (*(_DWORD *)&a1[14].__opaque[4] >= 2u) {
      cv_wakeup((pthread_cond_t *)&a1[20].__opaque[8]);
    }
    *(_DWORD *)&a1[14].__opaque[4] = 0;
    obj_cache_unlock_write((uint64_t)a1);
    return 0LL;
  }

  uint64_t v4 = 0LL;
  uint64_t v5 = 0LL;
  unsigned int v22 = a1 + 13;
  int v6 = (a2 >> 1) & 1;
  do
  {
    while (1)
    {
      uint64_t v7 = sig;
      uint64_t sig = *(void *)(sig + 104);
      pthread_mutex_lock((pthread_mutex_t *)((char *)a1 + 328));
      unint64_t v8 = (unsigned int *)(v7 + 32);
      do
        unsigned int v9 = __ldaxr(v8);
      while (__stxr(v9 | 8, v8));
      while ((v9 & 8) != 0)
      {
        pthread_mutex_unlock((pthread_mutex_t *)((char *)a1 + 328));
        pthread_mutex_lock((pthread_mutex_t *)((char *)a1 + 328));
        do
          unsigned int v9 = __ldaxr(v8);
        while (__stxr(v9 | 8, v8));
      }

      unsigned int v10 = obj_write_internal(v7, v6);
      if (v10) {
        break;
      }
      int v16 = *(void **)(v7 + 56);
      int v15 = *(void **)(v7 + 64);
      *(void *)(v7 + 64) = 0LL;
      *(void *)(v7 + 136) = 0LL;
      do
        unsigned int v17 = __ldxr(v8);
      while (__stlxr(v17 & 0xFFFFFFF7, v8));
      pthread_mutex_unlock((pthread_mutex_t *)((char *)a1 + 328));
      if (v15 && v15 != v16) {
        fs_obj_zfree_oc(v15, *(unsigned int *)(v7 + 48), *(void *)(v7 + 16), (uint64_t)a1);
      }
      if (!v4)
      {
        uint64_t v20 = *(void *)(v22->__sig + 104);
        v22->__uint64_t sig = v20;
        int v18 = v22;
        if (v20) {
          goto LABEL_25;
        }
LABEL_24:
        *(void *)a1[13].__opaque = v18;
        goto LABEL_25;
      }

      int v18 = (pthread_mutex_t *)(v4 + 104);
      uint64_t v19 = *(void *)(*(void *)(v4 + 104) + 104LL);
      *(void *)(v4 + 104) = v19;
      if (!v19) {
        goto LABEL_24;
      }
LABEL_25:
      *(void *)(v7 + 104) = 3735928559LL;
      --*(_DWORD *)a1[14].__opaque;
      obj_was_being_written_wakeup(v7);
      obj_release((uint64_t *)v7);
      if (!sig) {
        goto LABEL_36;
      }
    }

    unsigned int v11 = v10;
    do
      unsigned int v12 = __ldxr(v8);
    while (__stlxr(v12 & 0xFFFFFFF7, v8));
    pthread_mutex_unlock((pthread_mutex_t *)((char *)a1 + 328));
    uint64_t v13 = *(void *)(v7 + 8);
    if (!v13) {
      uint64_t v13 = *(void *)(*(void *)v7 + 392LL);
    }
    if (nx_ratelimit_log_allowed(*(void *)(*(void *)v13 + 392LL)))
    {
      if (*(_WORD *)(v13 + 36) == 13) {
        unsigned int v14 = (const char *)(v13 + 3992);
      }
      else {
        unsigned int v14 = (const char *)(*(void *)(v13 + 384) + 208LL);
      }
      log_err( "%s:%d: %s oid 0x%llx flags 0x%llx 0x%x type 0x%x/0x%x error writing: %d\n",  "obj_cache_flush_write",  1472,  v14,  *(void *)(v7 + 112),  *(void *)(v7 + 16),  *(_DWORD *)(v7 + 32),  *(_DWORD *)(v7 + 36),  *(_DWORD *)(v7 + 40),  v11);
    }

    if ((_DWORD)v5) {
      uint64_t v5 = v5;
    }
    else {
      uint64_t v5 = v11;
    }
    uint64_t v4 = v7;
  }

  while (sig);
LABEL_36:
  if (!(_DWORD)v5) {
    goto LABEL_37;
  }
  return v5;
}

uint64_t obj_write_internal(uint64_t a1, int a2)
{
  uint64_t v2 = *(void *)(*(void *)a1 + 392LL);
  int v3 = *(_DWORD *)(a1 + 48);
  if (!a2)
  {
    uint64_t v4 = *(void *)(a1 + 56);
LABEL_7:
    uint64_t v5 = *(void *)(a1 + 152);
    if (!v5)
    {
      uint64_t v5 = *(void *)(a1 + 128);
      if (!v5) {
        panic( "Object has no address: o %p oid %llu flags 0x%llx 0x%x paddr %llu naddr %llu\n",  (const void *)a1,  *(void *)(a1 + 112),  *(void *)(a1 + 16),  *(_DWORD *)(a1 + 32),  0LL,  0LL);
      }
    }

    goto LABEL_10;
  }

  uint64_t v4 = *(void *)(a1 + 64);
  if (!v4) {
    uint64_t v4 = *(void *)(a1 + 56);
  }
  uint64_t v5 = *(void *)(a1 + 136);
  if (!v5) {
    goto LABEL_7;
  }
LABEL_10:
  if (*(_BYTE *)(v2 + 627)) {
    return 30LL;
  }
  unint64_t v7 = *(void *)(a1 + 16);
  if ((v7 & 0x10000000) != 0 && (v7 & 0x80000000000LL) == 0 && (uint64_t v12 = *(void *)(a1 + 8)) != 0)
  {
    if ((unsigned __int16)v7 >> 13 == 1)
    {
      uint64_t v9 = v12 + 624;
    }

    else
    {
      uint64_t v9 = v12 + 528;
    }

    uint64_t v10 = (v7 >> 10) & 7;
    if ((_DWORD)v10)
    {
      if ((_DWORD)v10 != 1) {
        panic("invalid tweak type %d\n");
      }
      uint64_t v8 = *(void *)(a1 + 112) ^ HIDWORD(*(void *)(a1 + 120)) | *(void *)(a1 + 112) & 0xFFFFFFFF00000000LL ^ (*(void *)(a1 + 120) << 32);
      LODWORD(v10) = 4;
    }

    else
    {
      uint64_t v8 = (v7 >> 10) & 7;
    }

    uint64_t v13 = *(void *)(v12 + 1136);
    if (v13) {
      uint64_t v11 = v13;
    }
    else {
      uint64_t v11 = *(void *)(v2 + 384);
    }
  }

  else
  {
    uint64_t v8 = 0LL;
    uint64_t v9 = 0LL;
    LODWORD(v10) = 0;
    uint64_t v11 = *(void *)(v2 + 384);
  }

  return dev_write_extended( v11,  v5,  (*(_DWORD *)(*(void *)(v2 + 376) + 36LL) + v3 - 1)
         / *(_DWORD *)(*(void *)(v2 + 376) + 36LL),
           v4,
           v9,
           v8,
           v10);
}

BOOL obj_cache_tx_start_closing(uint64_t a1)
{
  unsigned int v1 = *(_DWORD *)(a1 + 888) + *(_DWORD *)(a1 + 884);
  if (dev_is_solidstate(*(void *)(*(void *)(a1 + 392) + 384LL))) {
    unsigned int v2 = 1024;
  }
  else {
    unsigned int v2 = 256;
  }
  return v1 >= v2;
}

void obj_cache_remove(pthread_mutex_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = a2;
  if (!a2) {
    uint64_t v8 = *(void *)a1[6].__opaque;
  }
  pthread_mutex_lock(a1);
  uint64_t v9 = *(void *)(a1[11].__sig + 8LL * (*(_DWORD *)&a1[10].__opaque[52] & a3));
  if (!v9)
  {
    obj_cache_unlock_write((uint64_t)a1);
    return;
  }

  unint64_t v10 = 0LL;
  unint64_t v11 = 0LL;
  opaque = (uint64_t *)a1[11].__opaque;
  do
  {
    while (1)
    {
      uint64_t v13 = v9;
      unsigned int v14 = (uint64_t *)(v9 + 72);
      uint64_t v9 = *(void *)(v9 + 72);
      if (v13 != a2 && *(void *)(v13 + 8) == a2)
      {
        uint64_t v15 = *(void *)(v13 + 16);
        if ((v15 & 0xC0000000) == 0 && *(void *)(v13 + 112) == a3 && *(void *)(v13 + 120) == a4) {
          break;
        }
      }

void obj_cache_remove_reverted_fs_objects(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v8 = *(unsigned int *)(a1 + 696);
  if (!(_DWORD)v8)
  {
    obj_cache_unlock_write(a1);
    return;
  }

  unint64_t v9 = 0LL;
  unint64_t v30 = 0LL;
  unint64_t v31 = 0LL;
  unint64_t v10 = (uint64_t *)(a1 + 712);
  do
  {
    uint64_t v11 = *(void *)(*(void *)(a1 + 704) + 8 * v9);
    if (!v11) {
      goto LABEL_36;
    }
    do
    {
      while (1)
      {
        uint64_t v12 = v11;
        uint64_t v13 = (uint64_t *)(v11 + 72);
        uint64_t v11 = *(void *)(v11 + 72);
        if (v12 == a2) {
          goto LABEL_24;
        }
        if (*(void *)(v12 + 8) != a2) {
          goto LABEL_24;
        }
        uint64_t v14 = *(void *)(v12 + 16);
        if ((v14 & 0xC0000000) != 0) {
          goto LABEL_24;
        }
        unint64_t v15 = *(void *)(v12 + 120);
        if (v15 <= *(void *)(v12 + 144)) {
          unint64_t v15 = *(void *)(v12 + 144);
        }
        if (v15 < a3 || v15 > a4) {
          goto LABEL_24;
        }
        int v17 = *(_DWORD *)(v12 + 32);
        if ((v17 & 1) != 0) {
          log_debug( "%s:%d: %s danger: oid %lld type 0x%x/0x%x flags 0x%llx 0x%x xid %lld refs 0x%llx - is dirty\n",  "obj_cache_remove_reverted_fs_objects",  1801,  (const char *)(a2 + 3992),  *(void *)(v12 + 112),  *(_DWORD *)(v12 + 36),  *(_DWORD *)(v12 + 40),  v14,  v17,  v15,  *(void *)(v12 + 24));
        }
        unsigned int v18 = (unint64_t *)(v12 + 24);
        do
          unint64_t v19 = __ldxr(v18);
        while (__stxr(v19, v18));
        if ((v19 & 0xFFFFFF) != ((v19 >> 24) & 0xFFFFF)) {
          break;
        }
        uint64_t v20 = *(void *)(v12 + 16);
        if ((v20 & 0xC00000000LL) != 0)
        {
          unsigned int v21 = *(_DWORD *)(*(void *)(*(void *)(a1 + 392) + 376LL) + 36LL);
          uint64_t v22 = (v21 + *(_DWORD *)(v12 + 48) - 1) / v21;
          if ((v20 & 0x800000000LL) != 0) {
            uint64_t v23 = 0LL;
          }
          else {
            uint64_t v23 = v22;
          }
          v30 += v23;
          v31 += v22 & (v20 << 28 >> 63);
          *(void *)(v12 + 16) = v20 & 0xFFFFFFF3FFFFFFFFLL;
        }

        --*(_DWORD *)(a1 + 684);
        obj_destroy_internal(v12, 0);
LABEL_24:
        if (!v11) {
          goto LABEL_35;
        }
      }

      unint64_t v24 = *(void *)(v12 + 120);
      if (v24 <= *(void *)(v12 + 144)) {
        unint64_t v24 = *(void *)(v12 + 144);
      }
      log_debug( "%s:%d: %s danger: oid %lld type 0x%x/0x%x flags 0x%llx 0x%x xid %lld refs 0x%llx - has refs\n",  "obj_cache_remove_reverted_fs_objects",  1805,  (const char *)(a2 + 3992),  *(void *)(v12 + 112),  *(_DWORD *)(v12 + 36),  *(_DWORD *)(v12 + 40),  *(void *)(v12 + 16),  *(_DWORD *)(v12 + 32),  v24,  *(void *)(v12 + 24));
      uint64_t v25 = *(void *)(v12 + 16);
      if ((v25 & 1) != 0)
      {
        uint64_t v26 = *v13;
        if (*v13) {
          *(void *)(v26 + 80) = *(void *)(v12 + 80);
        }
        **(void **)(v12 + 80) = v26;
      }

      uint64_t v27 = *v10;
      *uint64_t v13 = *v10;
      if (v27) {
        *(void *)(v27 + 80) = v13;
      }
      *unint64_t v10 = v12;
      *(void *)(v12 + 80) = v10;
      *(void *)(v12 + 16) = v25 | 9;
    }

    while (v11);
LABEL_35:
    unint64_t v8 = *(unsigned int *)(a1 + 696);
LABEL_36:
    ++v9;
  }

  while (v9 < v8);
  obj_cache_unlock_write(a1);
  if (v30)
  {
    log_debug( "%s:%d: %s unreserving %lld blocks for reverted fs objects\n",  "obj_cache_remove_reverted_fs_objects",  1833,  (const char *)(a2 + 3992),  v30);
    int v28 = spaceman_unreserve(a2, 0x48u, v30);
    if (v28) {
      log_err( "%s:%d: %s error unreserving space, %lld blocks: %d\n",  "obj_cache_remove_reverted_fs_objects",  1836,  (const char *)(a2 + 3992),  v30,  v28);
    }
  }

  if (v31)
  {
    log_debug( "%s:%d: %s unreserving %lld blocks for reverted fs objects\n",  "obj_cache_remove_reverted_fs_objects",  1840,  (const char *)(a2 + 3992),  v31);
    int v29 = spaceman_unreserve(a2, 0x50u, v31);
    if (v29) {
      log_err( "%s:%d: %s error unreserving tier2 space, %lld blocks: %d\n",  "obj_cache_remove_reverted_fs_objects",  1843,  (const char *)(a2 + 3992),  v31,  v29);
    }
  }

uint64_t obj_oid(uint64_t a1)
{
  return *(void *)(a1 + 112);
}

uint64_t obj_xid(uint64_t a1)
{
  if (*(void *)(a1 + 120) <= *(void *)(a1 + 144)) {
    return *(void *)(a1 + 144);
  }
  else {
    return *(void *)(a1 + 120);
  }
}

void obj_cache_remove_new_fs_objects(uint64_t a1, uint64_t a2)
{
  uint64_t v22 = 0LL;
  uint64_t v23 = &v22;
  pthread_mutex_lock((pthread_mutex_t *)a1);
  int v4 = pthread_rwlock_wrlock((pthread_rwlock_t *)(a1 + 128));
  if (v4) {
    panic("%s:%d: wrlock == 0 failed %d\n", "/Library/Caches/com.apple.xbs/Sources/apfs_framework/nx/obj.c", 1973, v4);
  }
  for (i = *(void *)(a1 + 800); i; uint64_t v23 = v7)
  {
    while (1)
    {
      uint64_t v6 = i;
      unint64_t v7 = (uint64_t *)(i + 88);
      uint64_t i = *(void *)(i + 88);
      if (*(v7 - 10) == a2 && (*(_BYTE *)(v6 + 19) & 0xC0) == 0 && !*(void *)(v6 + 128)) {
        break;
      }
      if (!i) {
        goto LABEL_13;
      }
    }

    unint64_t v8 = *(void **)(v6 + 96);
    if (i)
    {
      *(void *)(i + 96) = v8;
      unint64_t v8 = *(void **)(v6 + 96);
    }

    else
    {
      *(void *)(a1 + 808) = v8;
    }

    *unint64_t v8 = i;
    --*(_DWORD *)(a1 + 884);
    unint64_t v9 = v23;
    *(void *)(v6 + 88) = 0LL;
    *(void *)(v6 + 96) = v9;
    *unint64_t v9 = v6;
  }

uint64_t obj_subtype(uint64_t a1)
{
  return *(unsigned __int16 *)(a1 + 40);
}

uint64_t obj_flags(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

uint64_t obj_size_phys(uint64_t a1)
{
  return *(unsigned int *)(a1 + 48);
}

uint64_t obj_type_is_or_contains_ephemeral(int a1)
{
  if (a1 < 0) {
    return 1LL;
  }
  char v1 = a1;
  uint64_t result = 1LL;
  if (((1 << v1) & 0x2832) == 0) {
    return 0LL;
  }
  return result;
}

uint64_t obj_create_bootstrap( pthread_mutex_t *a1, int a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t *a8)
{
  else {
    return 22LL;
  }
}

uint64_t obj_create_internal( pthread_mutex_t *a1, int a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unint64_t a8, uint64_t a9, char a10, uint64_t *a11)
{
  uint64_t v11 = *(void *)a1[6].__opaque;
  if (a7) {
    uint64_t v12 = a7;
  }
  else {
    uint64_t v12 = *(void *)a1[6].__opaque;
  }
  uint64_t v83 = 0LL;
  unsigned int v82 = 0;
  if (!a4) {
    return 22LL;
  }
  if (*(_DWORD *)(a4 + 12) < 0x178u) {
    return 22LL;
  }
  uint64_t v16 = a6;
  if (!(_DWORD)a6)
  {
    uint64_t v16 = *(unsigned int *)(a4 + 8);
    if (!(_DWORD)v16)
    {
      if (!v11) {
        return 22LL;
      }
      uint64_t v16 = *(unsigned int *)(*(void *)(v11 + 376) + 36LL);
      if (!(_DWORD)v16) {
        return 22LL;
      }
    }
  }

  unsigned int v20 = a2 | (*(unsigned __int16 *)(a4 + 2) << 16);
  unsigned int v21 = v20 >> 31;
  unsigned int v22 = v20 >> 30;
  if (!(v20 >> 30)) {
    ++v21;
  }
  unsigned int v23 = v21 + ((v20 & 0x40000000) >> 30);
  if ((v20 & 0x88000000) == 0x8000000 || v23 != 1) {
    return 22LL;
  }
  unsigned int v27 = a2 | (*(unsigned __int16 *)(a4 + 2) << 16);
  if (a7)
  {
    unsigned int v27 = a2 | (*(unsigned __int16 *)(a4 + 2) << 16);
    if (!v22)
    {
      uint64_t v28 = *(void *)(a7 + 496);
      if (!v28) {
        uint64_t v28 = a7;
      }
      if ((*(_BYTE *)(*(void *)(v28 + 376) + 264LL) & 1) != 0)
      {
        unsigned int v27 = v20 & 0xEFFF03FF;
      }

      else
      {
        if (*(_DWORD *)(a4 + 4) == 36) {
          int v29 = 268443648;
        }
        else {
          int v29 = 0x10000000;
        }
        int v72 = v29;
        uint64_t v76 = v12;
        BOOL has_secondary_fsroot = apfs_has_secondary_fsroot(a7);
        unsigned int v22 = 0;
        uint64_t v12 = v76;
        if (has_secondary_fsroot) {
          int v31 = 1024;
        }
        else {
          int v31 = 0;
        }
        unsigned int v27 = v72 | v31 | v20 & 0xEFFF03FF;
      }
    }
  }

  unint64_t v32 = a9;
  if ((v27 & 0x10000000) != 0)
  {
    unint64_t v81 = 0LL;
    if ((v27 & 0x8000000) != 0) {
      goto LABEL_46;
    }
  }

  else
  {
    if (*(_DWORD *)a4 == 11 || *(_DWORD *)(a4 + 4) == 11) {
      uint64_t v33 = 2LL;
    }
    else {
      uint64_t v33 = 1LL;
    }
    unint64_t v81 = v33;
    if ((v27 & 0x8000000) != 0) {
      goto LABEL_46;
    }
  }

  if ((a10 & 1) == 0)
  {
    if (*(_BYTE *)(v11 + 627)) {
      return 30LL;
    }
    unsigned int v74 = v27;
    uint64_t v77 = v12;
    unsigned int v79 = v22;
    BOOL is_current_tx = xid_is_current_tx(v11, a9);
    unint64_t v32 = a9;
    unsigned int v27 = v74;
    unsigned int v22 = v79;
    uint64_t v12 = v77;
    if (!is_current_tx) {
      return 22LL;
    }
  }

LABEL_46:
  unint64_t v35 = v32;
  if (a8)
  {
    unint64_t v35 = a8;
    if (a8 > v32) {
      return 22LL;
    }
  }

  if (a3) {
    char v36 = 1;
  }
  else {
    char v36 = a10;
  }
  uint64_t v84 = 0LL;
  if ((v20 & 0x40000000) != 0) {
    char v37 = v36;
  }
  else {
    char v37 = 1;
  }
  int v75 = v27;
  unsigned int v80 = v22;
  unint64_t v70 = v35;
  if ((v37 & 1) != 0)
  {
    if (v22)
    {
      LODWORD(v71) = 0;
      uint64_t v73 = v32;
      unint64_t v78 = (const char *)v12;
      goto LABEL_65;
    }

    char v69 = v37;
    int v38 = (const char *)v12;
    unint64_t v39 = v32;
    uint64_t v40 = spaceman_reserve(v12, 72, v71, v32, (int *)&v82);
    if ((_DWORD)v40)
    {
      uint64_t v25 = v40;
      log_err("%s:%d: %s flags 0x%x type 0x%x/0x%x error reserving %d blocks of space: %d\n", "obj_create_internal");
      return v25;
    }

    unint64_t v78 = v38;
    uint64_t v73 = v39;
  }

  else
  {
    char v69 = v37;
    int v41 = (const char *)v12;
    unint64_t v42 = v32;
    uint64_t v43 = spaceman_alloc(v12, 72LL);
    if ((_DWORD)v43)
    {
      uint64_t v25 = v43;
      log_err("%s:%d: %s flags 0x%x type 0x%x/0x%x error allocating new physical location %d\n");
      return v25;
    }

    uint64_t v73 = v42;
    unint64_t v78 = v41;
    if (a7) {
      apfs_check_for_spillover();
    }
  }

  char v37 = v69;
LABEL_65:
  pthread_mutex_lock(a1);
  uint64_t v44 = obj_alloc((uint64_t)a1, *(_DWORD *)(a4 + 12), *(_DWORD *)a4, v16, v75, 0LL, &v84);
  if ((_DWORD)v44)
  {
    uint64_t v25 = v44;
    obj_cache_unlock_write((uint64_t)a1);
    if ((v37 & 1) != 0)
    {
      if (v80) {
        return v25;
      }
      uint64_t v45 = v82;
      unsigned int v46 = v71;
LABEL_117:
      spaceman_unreserve(v78, v45, v46);
      return v25;
    }

    goto LABEL_118;
  }

  uint64_t v47 = v84;
  uint64_t v48 = *(void *)(v84 + 16) | v75 & 0xFFFFFC00;
  *(void *)(v84 + 16) = v48 | 0x42;
  unsigned int v49 = *(_DWORD *)a4 | v75 & 0xFFFF0000;
  *(_DWORD *)(v47 + 36) = v49;
  uint64_t v50 = *(unsigned int *)(a4 + 4);
  uint64_t v51 = v47;
  *(_DWORD *)(v47 + 40) = v50;
  if (!a7 || (uint64_t v52 = *(void *)(a7 + 496)) == 0) {
    uint64_t v52 = a7;
  }
  *(void *)(v51 + 8) = v52;
  *(void *)(v51 + 120) = v70;
  *(void *)(v51 + 144) = 0LL;
  unsigned int v53 = v80;
  if ((v20 & 0x80000000) == 0)
  {
    if ((v20 & 0x40000000) != 0)
    {
      if (a3) {
        unint64_t v81 = a3;
      }
      else {
        a3 = v81;
      }
      *(void *)(v51 + 128) = a3;
    }

    else
    {
      if (v80) {
        goto LABEL_92;
      }
      uint64_t v54 = 0x800000162LL;
      if ((v82 & 0x10) == 0) {
        uint64_t v54 = 0x400000162LL;
      }
      *(void *)(v51 + 16) = v48 | v54;
      if (!a3)
      {
        uint64_t v55 = *(void *)&a1[6].__opaque[8];
        *(void *)(v51 + 112) = v55;
        *(void *)&a1[6].__opaque[8] = v55 + 1;
        if (trace_obj_alloc && (obj_type_expected != v49 || obj_subtype_expected != v50))
        {
          int8x16_t v56 = "virtual";
LABEL_86:
          report_obj_alloc(v51, v56);
          unsigned int v53 = v80;
          goto LABEL_92;
        }

        goto LABEL_92;
      }
    }

    uint64_t updated = 0LL;
    goto LABEL_9;
  }

  if (*(void *)a1) {
    pthread_mutex_unlock((pthread_mutex_t *)(a1 + 16));
  }
  return 45LL;
}

LABEL_91:
    *(void *)(v51 + 112) = a3;
    goto LABEL_92;
  }

  if (a3) {
    goto LABEL_91;
  }
  if ((v75 & 0x8000000) == 0)
  {
    uint64_t v57 = *(void *)&a1[6].__opaque[8];
    *(void *)(v51 + 112) = v57;
    *(void *)&a1[6].__opaque[8] = v57 + 1;
    if (!trace_obj_alloc) {
      goto LABEL_92;
    }
    int8x16_t v56 = "ephemeral";
    goto LABEL_86;
  }

  uint64_t v68 = *(void *)&a1[6].__opaque[16];
  *(void *)(v51 + 112) = v68;
  *(void *)&a1[6].__opaque[16] = v68 + 1;
LABEL_92:
  if ((*(_BYTE *)(v51 + 19) & 0x20) == 0)
  {
    uint64_t v58 = *(void *)(v51 + 56);
    *(void *)(v58 + 24) = *(void *)(v51 + 36);
    *(_OWORD *)(v58 + 8) = *(_OWORD *)(v51 + 112);
  }

  uint64_t v59 = (unint64_t *)(v51 + 24);
  do
    unint64_t v60 = __ldxr(v59);
  while (__stxr(v60 + 1, v59));
  unsigned int v61 = v53;
  if ((~(_DWORD)v60 & 0xFFFFFFLL) == 0) {
    panic("Reference count overflowed for object %p!\n", (const void *)v51);
  }
  uint64_t v25 = obj_descriptor_funcs_for_type(*(_DWORD *)(v51 + 36), &v83);
  if ((_DWORD)v25
    || (unsigned int v62 = v83, *v83)
    && (uint64_t v25 = ((uint64_t (*)(void, uint64_t, uint64_t))*v83)(*(void *)(v51 + 56), v16, a5), (_DWORD)v25)
    || (v63 = (uint64_t (*)(uint64_t, uint64_t))v62[1]) != 0LL && (uint64_t v25 = v63(v51, a5), (_DWORD)v25))
  {
    if (v75 < 0) {
      obj_cache_ephemeral_adjust((uint64_t)a1, v75, v16, -1);
    }
    else {
      --*(_DWORD *)&a1[10].__opaque[36];
    }
    obj_destroy_internal(v51, 0);
    obj_cache_unlock_write((uint64_t)a1);
    if ((v37 & 1) != 0)
    {
      unsigned int v46 = v71;
      if (v61) {
        return v25;
      }
      uint64_t v45 = v82;
      goto LABEL_117;
    }

LABEL_118:
    spaceman_free(v78, 0LL, v81, v71, v73);
    return v25;
  }

  obj_init_wakeup(v51, v75);
  unint64_t v64 = (uint64_t *)(a1[11].__sig + 8 * (*(void *)(v51 + 112) & *(unsigned int *)&a1[10].__opaque[52]));
  uint64_t v65 = *v64;
  *(void *)(v51 + 72) = *v64;
  if (v65) {
    *(void *)(v65 + 80) = v51 + 72;
  }
  *unint64_t v64 = v51;
  *(void *)(v51 + 80) = v64;
  *(void *)(v51 + 16) |= 1uLL;
  if (v75 < 0)
  {
    *(void *)(v51 + 88) = 0LL;
    uint64_t v66 = 760LL;
    if ((v75 & 0x8000000) == 0) {
      uint64_t v66 = 744LL;
    }
    uint64_t v67 = *(uint64_t **)((char *)&a1->__sig + v66);
    *(void *)(v51 + 96) = v67;
    *uint64_t v67 = v51;
    *(uint64_t *)((char *)&a1->__sig + v66) = v51 + 88;
  }

  obj_cache_unlock_write((uint64_t)a1);
  if ((v75 & 4) != 0) {
    obj_lock(v51, 2);
  }
  uint64_t v25 = 0LL;
  *a11 = v51;
  return v25;
}

uint64_t obj_create( pthread_mutex_t *a1, int a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t *a8)
{
  return obj_create_internal(a1, a2, a3, a4, a5, 0LL, a6, 0LL, a7, 0, a8);
}

uint64_t obj_clone(pthread_cond_t **a1, __int16 a2, uint64_t *a3, _BYTE *a4)
{
  unint64_t v8 = a1[7];
  unint64_t v9 = *a1;
  v33[0] = 0LL;
  v33[1] = 0LL;
  unsigned int v32 = 0;
  if (a4) {
    *a4 = 0;
  }
  int v10 = a2 & 0x210;
  if ((a2 & 0x210) != 0
    || (uint64_t v26 = obj_descriptor_and_flags_for_type(*((_DWORD *)a1 + 9), &v32, (uint64_t)v33), !(_DWORD)v26))
  {
    uint64_t v11 = a1[2];
    uint64_t v34 = 0LL;
    uint64_t v12 = (unint64_t)v11 | 2;
    a1[2] = (pthread_cond_t *)((unint64_t)v11 | 2);
    if (*a3)
    {
      uint64_t v34 = *a3;
    }

    else
    {
      uint64_t v26 = obj_alloc( (uint64_t)v9,  *((_DWORD *)a1 + 11),  *((_DWORD *)a1 + 9),  *((_DWORD *)a1 + 12),  v11 & 0xC0000000,  a4,  &v34);
      if ((_DWORD)v26) {
        return v26;
      }
      uint64_t v12 = (uint64_t)a1[2];
    }

    LODWORD(v13) = v12 & 0xFFFFFFFB;
    a1[2] = (pthread_cond_t *)(v12 & 0xFFFFFE7FFFFFFFFBLL);
    if (!*((_DWORD *)a1 + 13))
    {
      LODWORD(v13) = v12 & 0xFFFFFFF9;
      a1[2] = (pthread_cond_t *)(v12 & 0xFFFFFE7FFFFFFFF9LL);
    }

    if ((v12 & 4) != 0)
    {
      cv_wakeup(*a1 + 27);
      unint64_t v13 = a1[2];
    }

    uint64_t v14 = v34;
    *(void *)(v34 + 36) = *(pthread_cond_t **)((char *)a1 + 36);
    *(void *)(v14 + 8) = a1[1];
    *(_OWORD *)(v14 + 112) = *((_OWORD *)a1 + 7);
    *(void *)(v14 + 128) = a1[16];
    uint64_t v15 = v13 & 0xFFFFFC00 | *(void *)(v14 + 16);
    uint64_t v16 = v15 | 0x40000000002LL;
    *(void *)(v14 + 16) = v15 | 0x40000000002LL;
    if ((a2 & 0x50) != 0)
    {
      uint64_t v16 = v15 | 0x4000000000ALL;
      *(void *)(v14 + 16) = v15 | 0x4000000000ALL;
      if ((a2 & 0x40) != 0)
      {
        uint64_t v16 = v15 | 0x4100000000ALL;
        *(void *)(v14 + 16) = v15 | 0x4100000000ALL;
      }
    }

    if ((a2 & 0x200) != 0) {
      *(void *)(v14 + 16) = v16 | 0x80000000000LL;
    }
    memcpy(*(void **)(v14 + 56), v8, *((unsigned int *)a1 + 12));
    if (v10) {
      goto LABEL_17;
    }
    uint64_t v31 = 0LL;
    memcpy((void *)(v14 + 376), a1 + 47, *((unsigned int *)a1 + 11) - 376LL);
    uint64_t v27 = obj_descriptor_funcs_for_type(*((_DWORD *)a1 + 9), &v31);
    if ((_DWORD)v27)
    {
      uint64_t v26 = v27;
    }

    else
    {
      int v29 = *(uint64_t (**)(uint64_t, void))(v31 + 8);
      if (!v29 || (uint64_t v26 = v29(v14, 0LL), !(_DWORD)v26))
      {
LABEL_17:
        unsigned int v17 = (uint64_t *)(*(void *)&v9[14].__opaque[24]
                        + 8 * (*(void *)(v14 + 112) & *(unsigned int *)&v9[14].__opaque[20]));
        uint64_t v18 = *v17;
        *(void *)(v14 + 72) = *v17;
        if (v18) {
          *(void *)(v18 + 80) = v14 + 72;
        }
        uint64_t *v17 = v14;
        *(void *)(v14 + 80) = v17;
        uint64_t v19 = *(void *)(v14 + 16);
        *(void *)(v14 + 16) = v19 | 1;
        unsigned int v20 = a1[2];
        if ((v20 & 0x80000000) != 0)
        {
          *(void *)(v14 + 88) = 0LL;
          BOOL v21 = (v20 & 0x8000000) == 0LL;
          uint64_t v22 = 760LL;
          if (v21) {
            uint64_t v22 = 744LL;
          }
          unsigned int v23 = *(uint64_t **)((char *)&v9->__sig + v22);
          *(void *)(v14 + 96) = v23;
          *unsigned int v23 = v14;
          *(uint64_t *)((char *)&v9->__sig + v22) = v14 + 88;
        }

        *(void *)(v14 + 16) = v19 & 0xFFFFFA7FFFFFFFFALL | 1;
        if (!(*(_DWORD *)(v14 + 52) | a2 & 0x10)) {
          *(void *)(v14 + 16) = v19 & 0xFFFFFA7FFFFFFFF8LL | 1;
        }
        if ((v19 & 4) != 0) {
          cv_wakeup((pthread_cond_t *)(*(void *)v14 + 1296LL));
        }
        unint64_t v24 = (unint64_t *)(v14 + 24);
        do
          unint64_t v25 = __ldxr(v24);
        while (__stxr(v25 + 1, v24));
        if ((~(_DWORD)v25 & 0xFFFFFFLL) == 0) {
          panic("Reference count overflowed for object %p!\n", (const void *)v14);
        }
        uint64_t v26 = 0LL;
        *a3 = v14;
        return v26;
      }
    }

    uint64_t v28 = *(void *)(v14 + 16);
    if ((v28 & 0x80000000) != 0) {
      obj_cache_ephemeral_adjust((uint64_t)v9, v28, *(_DWORD *)(v14 + 48), -1);
    }
    else {
      --*(_DWORD *)&v9[14].__opaque[4];
    }
    if (*a3) {
      *(void *)(v14 + 16) &= ~0x40000000000uLL;
    }
    else {
      obj_destroy_internal(v14, 0);
    }
  }

  return v26;
}

uint64_t obj_descriptor_and_flags_for_type(int a1, unsigned int *a2, uint64_t a3)
{
  uint64_t v3 = 22LL;
  switch((__int16)a1)
  {
    case 1:
      int v4 = &nx_desc;
      goto LABEL_17;
    case 2:
      *(_OWORD *)a3 = btree_node_desc;
      *(_DWORD *)a3 = 2;
      goto LABEL_18;
    case 3:
      int v4 = &btree_node_desc;
      goto LABEL_17;
    case 5:
      int v4 = &sm_desc;
      goto LABEL_17;
    case 6:
      int v4 = &sm_cab_desc;
      goto LABEL_17;
    case 7:
      int v4 = &sm_cib_desc;
      goto LABEL_17;
    case 8:
      int v4 = &sm_bm_desc;
      goto LABEL_17;
    case 11:
      int v4 = &om_desc;
      goto LABEL_17;
    case 13:
      int v4 = &apfs_desc;
      goto LABEL_17;
    case 17:
      int v4 = &nx_reaper_desc;
      goto LABEL_17;
    case 18:
      int v4 = &nx_reap_list_desc;
      goto LABEL_17;
    case 25:
      int v4 = &gbitmap_desc;
      goto LABEL_17;
    case 27:
      int v4 = &gbitmap_block_desc;
      goto LABEL_17;
    case 29:
      int v4 = &snap_meta_ext_desc;
      goto LABEL_17;
    case 30:
      int v4 = &integrity_meta_desc;
LABEL_17:
      *(_OWORD *)a3 = *v4;
LABEL_18:
      uint64_t v3 = 0LL;
      unsigned int v5 = *a2 | a1 & 0xFFFF0000;
      *a2 = v5;
      *a2 = v5 | (*(unsigned __int16 *)(a3 + 2) << 16);
      break;
    default:
      return v3;
  }

  return v3;
}

uint64_t obj_alloc(uint64_t a1, unsigned int a2, int a3, unsigned int a4, int a5, _BYTE *a6, uint64_t *a7)
{
  unint64_t v7 = a6;
  unsigned int v8 = a4;
  int v9 = a3;
  uint64_t v104 = *MEMORY[0x1895F89C0];
  if (a6) {
    *a6 = 0;
  }
  if (a2) {
    size_t v11 = a2;
  }
  else {
    size_t v11 = 376LL;
  }
  if (a4)
  {
    uint64_t v12 = 0LL;
LABEL_10:
    LOBYTE(v13) = 1;
    goto LABEL_11;
  }

  uint64_t v13 = *(void *)(a1 + 392);
  if (v13)
  {
    uint64_t v12 = 0LL;
    unsigned int v8 = *(_DWORD *)(*(void *)(v13 + 376) + 36LL);
    goto LABEL_10;
  }

  unsigned int v8 = 0;
  uint64_t v12 = 22LL;
LABEL_11:
  uint64_t v14 = *(void *)(a1 + 392);
  if (v11 < 0x178)
  {
    uint64_t v12 = 22LL;
    if (!v14) {
      goto LABEL_23;
    }
LABEL_19:
    log_err("%s:%d: %s invalid object size: %d size_phys %d\n");
    return v12;
  }

  if (v14)
  {
    if (v8 % *(_DWORD *)(*(void *)(v14 + 376) + 36LL))
    {
      LOBYTE(v13) = 0;
      uint64_t v12 = 22LL;
    }

    else
    {
      uint64_t v12 = v12;
    }

    if ((v13 & 1) == 0) {
      goto LABEL_19;
    }
  }

  else if ((v13 & 1) == 0)
  {
LABEL_23:
    log_err("%s:%d: invalid object size: %d size_phys %d\n");
    return v12;
  }

  size_t v87 = v11;
  unsigned int v85 = v8;
  if (a5 < 0)
  {
    char v84 = 0;
    char v19 = 0;
    char v82 = 0;
LABEL_84:
    obj_cache_unlock_write(a1);
    if (v7) {
      *unint64_t v7 = 1;
    }
    char v36 = _apfs_obj_zalloc(v8, *(void *)(a1 + 920));
    obj_cache_stats_update_zalloc((unint64_t *)(a1 + 944), a5, (uint64_t)v36, v8);
    uint64_t v89 = v36;
    obj_cache_stats_update_zalloc((unint64_t *)(omm + 136), a5, (uint64_t)v36, v8);
    switch((__int16)v9)
    {
      case 1:
        size_t v38 = 1928LL;
        goto LABEL_97;
      case 2:
      case 3:
      case 6:
      case 7:
      case 8:
        char v37 = _apfs_zalloc(4u);
        goto LABEL_98;
      case 5:
        size_t v38 = 1608LL;
        goto LABEL_97;
      case 11:
        size_t v38 = 496LL;
        goto LABEL_97;
      case 13:
        size_t v38 = 4024LL;
        goto LABEL_97;
      case 17:
      case 30:
        size_t v38 = 400LL;
        goto LABEL_97;
      case 18:
        size_t v38 = 384LL;
        goto LABEL_97;
      case 25:
        size_t v38 = 416LL;
        goto LABEL_97;
      case 27:
      case 29:
        size_t v38 = 392LL;
        goto LABEL_97;
      default:
        size_t v38 = 376LL;
LABEL_97:
        char v37 = _apfs_calloc(1uLL, v38);
LABEL_98:
        uint64_t v20 = (uint64_t)v37;
        unint64_t v39 = v89;
        if (v89 && v20)
        {
          *(void *)(v20 + 24) = 0LL;
          uint64_t v40 = new_rwlock((pthread_rwlock_t *)(v20 + 176));
          if (!(_DWORD)v40)
          {
            pthread_mutex_lock((pthread_mutex_t *)a1);
            if (a5 < 0)
            {
              int v16 = 1;
              obj_cache_ephemeral_adjust(a1, a5, v8, 1);
              goto LABEL_125;
            }

            unsigned int v17 = *(_DWORD *)(a1 + 684);
            int v16 = 1;
            if (*(_DWORD *)(a1 + 680) - 1 >= v17)
            {
              *(_DWORD *)(a1 + 684) = v17 + 1;
              goto LABEL_125;
            }

            uint64_t v15 = v20;
            goto LABEL_27;
          }

          uint64_t v12 = v40;
          unint64_t v39 = v89;
        }

        else
        {
          uint64_t v12 = 12LL;
          if (!v89) {
            goto LABEL_115;
          }
        }

        fs_obj_zfree_oc(v39, v8, a5, a1);
LABEL_115:
        if (v20) {
          obj_type_free((void *)v20, v9, v11);
        }
        pthread_mutex_lock((pthread_mutex_t *)a1);
        return v12;
    }
  }

  uint64_t v89 = 0LL;
  uint64_t v15 = 0LL;
  char v84 = 0;
  int v16 = 0;
  char v82 = 0;
  unsigned int v17 = *(_DWORD *)(a1 + 684);
LABEL_27:
  if (v17 < *(_DWORD *)(a1 + 676))
  {
    uint64_t v20 = 0LL;
    goto LABEL_82;
  }

  if ((a5 & 0x40000000) != 0) {
    BOOL v21 = (uint64_t *)(a1 + 784);
  }
  else {
    BOOL v21 = (uint64_t *)(a1 + 768);
  }
  if ((a5 & 0x40000000) != 0) {
    uint64_t v22 = (uint64_t *)(a1 + 768);
  }
  else {
    uint64_t v22 = (uint64_t *)(a1 + 784);
  }
  while (1)
  {
    int v23 = pthread_rwlock_wrlock((pthread_rwlock_t *)(a1 + 128));
    if (v23) {
      panic( "%s:%d: wrlock == 0 failed %d\n",  "/Library/Caches/com.apple.xbs/Sources/apfs_framework/nx/obj.c",  2172,  v23);
    }
    uint64_t v24 = *v21;
    if (!*v21)
    {
      uint64_t v25 = *v22;
      if (!*v22)
      {
        uint64_t v20 = 0LL;
        uint64_t v24 = 0LL;
        size_t v11 = v87;
        int v9 = a3;
        unsigned int v8 = v85;
        goto LABEL_78;
      }

      goto LABEL_42;
    }

    if ((*(_BYTE *)(v24 + 32) & 0x10) == 0) {
      break;
    }
LABEL_43:
    obj_cache_perform_deferred_updates(a1);
    int v26 = pthread_rwlock_unlock((pthread_rwlock_t *)(a1 + 128));
    if (v26) {
      panic( "%s:%d: unlock == 0 failed %d\n",  "/Library/Caches/com.apple.xbs/Sources/apfs_framework/nx/obj.c",  2209,  v26);
    }
    if (*(_DWORD *)(a1 + 684) < *(_DWORD *)(a1 + 676))
    {
      uint64_t v20 = 0LL;
      size_t v11 = v87;
      int v9 = a3;
      unsigned int v8 = v85;
      goto LABEL_82;
    }
  }

  uint64_t v25 = *v22;
  if (!*v22) {
    goto LABEL_47;
  }
LABEL_42:
  if ((*(_BYTE *)(v25 + 32) & 0x10) != 0) {
    goto LABEL_43;
  }
LABEL_47:
  __tp.__darwin_time_t tv_sec = 0LL;
  __tp.uint64_t tv_nsec = 0LL;
  clock_gettime(_CLOCK_UPTIME_RAW_APPROX, &__tp);
  int v9 = a3;
  if (v24 && __tp.tv_sec - *(unsigned int *)(v24 + 160) > 599)
  {
    size_t v11 = v87;
    unsigned int v8 = v85;
    goto LABEL_64;
  }

  size_t v11 = v87;
  unsigned int v8 = v85;
  if (!v25)
  {
    BOOL v28 = *(_DWORD *)(a1 + 684) < *(_DWORD *)(a1 + 680);
LABEL_62:
    uint64_t v20 = 0LL;
    if (!v28 && v24) {
      goto LABEL_64;
    }
    goto LABEL_72;
  }

  uint64_t v27 = *(unsigned int *)(v25 + 160);
  if (__tp.tv_sec - v27 > 599)
  {
    uint64_t v24 = v25;
    goto LABEL_64;
  }

  unsigned int v29 = *(_DWORD *)(a1 + 684);
  unsigned int v30 = *(_DWORD *)(a1 + 680);
  BOOL v31 = v29 >= v30;
  BOOL v28 = v29 < v30;
  if (!v24 || !v31)
  {
    uint64_t v24 = v25;
    goto LABEL_62;
  }

LABEL_125:
  *(void *)uint64_t v20 = a1;
  *(_DWORD *)(v20 + 36) = v9;
  *(_DWORD *)(v20 + 44) = v11;
  *(_DWORD *)(v20 + 48) = v8;
  *(void *)(v20 + 56) = v89;
  *(void *)(v20 + 88) = 3735928559LL;
  *(void *)(v20 + 104) = 3735928559LL;
  *(_DWORD *)(v20 + 160) = -1;
  if ((a5 & 0x80000000) == 0)
  {
    uint64_t v59 = (unint64_t *)(a1 + 1024);
    do
      unint64_t v60 = __ldxr(v59);
    while (__stxr(v60 + 1, v59));
    if (v16)
    {
      unsigned int v61 = (unint64_t *)(a1 + 1032);
      do
        unint64_t v62 = __ldxr(v61);
      while (__stxr(v62 + 1, v61));
      if ((v19 & 1) != 0)
      {
        __int32 v63 = (unint64_t *)(a1 + 1040);
        do
          unint64_t v64 = __ldxr(v63);
        while (__stxr(v64 + 1, v63));
      }

      uint64_t v65 = 104LL;
      if ((v82 & 1) != 0) {
        uint64_t v65 = 112LL;
      }
      uint64_t v66 = (unint64_t *)(a1 + v65 + 944);
      do
        unint64_t v67 = __ldxr(v66);
      while (__stxr(v67 + 1, v66));
    }

    if ((v84 & 1) != 0)
    {
      uint64_t v68 = (unint64_t *)(a1 + 1064);
      do
        unint64_t v69 = __ldxr(v68);
      while (__stxr(v69 + 1, v68));
    }

    uint64_t v70 = omm;
    unint64_t v71 = (unint64_t *)(omm + 216);
    do
      unint64_t v72 = __ldxr(v71);
    while (__stxr(v72 + 1, v71));
    if (v16)
    {
      uint64_t v73 = (unint64_t *)(v70 + 224);
      do
        unint64_t v74 = __ldxr(v73);
      while (__stxr(v74 + 1, v73));
      if ((v19 & 1) != 0)
      {
        int v75 = (unint64_t *)(v70 + 232);
        do
          unint64_t v76 = __ldxr(v75);
        while (__stxr(v76 + 1, v75));
      }

      uint64_t v77 = 104LL;
      if ((v82 & 1) != 0) {
        uint64_t v77 = 112LL;
      }
      unint64_t v78 = (unint64_t *)(v70 + v77 + 136);
      do
        unint64_t v79 = __ldxr(v78);
      while (__stxr(v79 + 1, v78));
    }

    if ((v84 & 1) != 0)
    {
      unsigned int v80 = (unint64_t *)(v70 + 256);
      do
        unint64_t v81 = __ldxr(v80);
      while (__stxr(v81 + 1, v80));
    }
  }

  uint64_t v12 = 0LL;
  *a7 = v20;
  return v12;
}

uint64_t obj_init_wakeup(uint64_t result, char a2)
{
  uint64_t v2 = *(void *)(result + 16);
  *(void *)(result + 16) = v2 & 0xFFFFFE7FFFFFFFFBLL;
  if (*(_DWORD *)(result + 52) | a2 & 0x10)
  {
    if ((v2 & 4) == 0) {
      return result;
    }
    return cv_wakeup((pthread_cond_t *)(*(void *)result + 1296LL));
  }

  *(void *)(result + 16) = v2 & 0xFFFFFE7FFFFFFFF9LL;
  if ((v2 & 4) != 0) {
    return cv_wakeup((pthread_cond_t *)(*(void *)result + 1296LL));
  }
  return result;
}

uint64_t obj_descriptor_funcs_for_type(__int16 a1, void *a2)
{
  __int16 v2 = a1 - 1;
  uint64_t result = 0LL;
  *a2 = off_189D3BC38[v2];
  return result;
}

void obj_delete_internal(uint64_t *a1, uint64_t a2, int a3)
{
  uint64_t v6 = *a1;
  if ((*((_BYTE *)a1 + 19) & 8) == 0 && !xid_is_current_tx(*(void *)(v6 + 392), a2)) {
    panic("can not delete an object w/a non-current xid %lld o == %p\n", a2, a1);
  }
  pthread_mutex_lock((pthread_mutex_t *)v6);
  for (uint64_t i = a1[2]; (i & 0x20000000000LL) != 0; uint64_t i = a1[2])
  {
    a1[2] = i | 0x80;
    cv_wait_rw((pthread_cond_t *)(v6 + 1296), (pthread_mutex_t *)v6, 2LL, 0LL);
  }

  a1[2] = i | 0x10;
  a1[18] = a2;
  if ((i & 0x80000000) != 0)
  {
    if (a3) {
      a1[2] = i & 0xFFFFFFEFFFFFFFE7LL | 0x18;
    }
    obj_cache_unlock_write(v6);
  }

  else
  {
    uint64_t v8 = a1[19];
    if (!v8) {
      uint64_t v8 = a1[16];
    }
    uint64_t v26 = v8;
    a1[16] = 0LL;
    int v9 = (unsigned int *)(a1 + 4);
    a1[19] = 0LL;
    do
      unsigned int v10 = __ldxr(v9);
    while (__stxr(v10 & 0xFFFFFFFE, v9));
    if ((v10 & 1) != 0)
    {
      int v11 = pthread_rwlock_wrlock((pthread_rwlock_t *)(v6 + 128));
      if (v11) {
        panic( "%s:%d: wrlock == 0 failed %d\n",  "/Library/Caches/com.apple.xbs/Sources/apfs_framework/nx/obj.c",  3014,  v11);
      }
      uint64_t v12 = a1[11];
      if (v12 != 3735928559LL)
      {
        uint64_t v13 = (uint64_t *)a1[12];
        if ((*((_BYTE *)a1 + 19) & 0x40) != 0)
        {
          if (v12)
          {
            *(void *)(v12 + 96) = v13;
            uint64_t v13 = (uint64_t *)a1[12];
          }

          else
          {
            *(void *)(v6 + 824) = v13;
          }

          *uint64_t v13 = v12;
          --*(_DWORD *)(v6 + 888);
        }

        else
        {
          if (v12)
          {
            *(void *)(v12 + 96) = v13;
            uint64_t v13 = (uint64_t *)a1[12];
          }

          else
          {
            *(void *)(v6 + 808) = v13;
          }

          *uint64_t v13 = v12;
          --*(_DWORD *)(v6 + 884);
        }

        a1[11] = 3735928559LL;
      }

      int v14 = pthread_rwlock_unlock((pthread_rwlock_t *)(v6 + 128));
      if (v14) {
        panic( "%s:%d: unlock == 0 failed %d\n",  "/Library/Caches/com.apple.xbs/Sources/apfs_framework/nx/obj.c",  3028,  v14);
      }
    }

    uint64_t v15 = a1[1];
    if (!v15) {
      uint64_t v15 = *(void *)(v6 + 392);
    }
    uint64_t v16 = a1[2];
    unint64_t v17 = a1[15];
    if (a3) {
      a1[2] = v16 & 0xFFFFFFEFFFFFFFF7LL | 8;
    }
    uint64_t v18 = a1[18];
    int v19 = *((_DWORD *)a1 + 12);
    uint64_t v20 = a1[14];
    int v22 = *((_DWORD *)a1 + 9);
    int v21 = *((_DWORD *)a1 + 10);
    obj_cache_unlock_write(v6);
    if (!(v8 | v16 & 0x40))
    {
      int v23 = omap_get(v15, v20, v17, &v26, 0LL, 0LL, 0LL);
      if (v23)
      {
        if (*(_WORD *)(v15 + 36) == 13) {
          uint64_t v24 = (const char *)(v15 + 3992);
        }
        else {
          uint64_t v24 = (const char *)(*(void *)(v15 + 384) + 208LL);
        }
        log_err( "%s:%d: %s oid 0x%llx flags 0x%llx type 0x%x/0x%x error getting mapping to free %d\n",  "obj_delete_internal",  3050,  v24,  v20,  v16,  v22,  v21,  v23);
      }

      uint64_t v8 = v26;
    }

    if (v8)
    {
      if ((v16 & 0x40000000) != 0)
      {
        unsigned int v25 = *(_DWORD *)(*(void *)(*(void *)(v6 + 392) + 376LL) + 36LL);
      }

      else if (omap_delete(v15, v20, v17, v8, v19, 1, v18))
      {
        log_err("%s:%d: %s oid 0x%llx flags 0x%llx type 0x%x/0x%x error deleting mapping %d\n", "obj_delete_internal");
      }
    }
  }

void obj_delete_and_free(uint64_t *a1, uint64_t a2)
{
}

void obj_free(uint64_t a1)
{
  __int16 v2 = *(pthread_mutex_t **)a1;
  pthread_mutex_lock(*(pthread_mutex_t **)a1);
  *(void *)(a1 + 16) = *(void *)(a1 + 16) & 0xFFFFFFEFFFFFFFF7LL | 8;
  obj_cache_unlock_write((uint64_t)v2);
}

uint64_t obj_delete_and_free_by_oid( uint64_t a1, int a2, int a3, unint64_t a4, unint64_t a5, uint64_t a6)
{
  uint64_t v12 = *(void *)(a1 + 392);
  BOOL v28 = 0LL;
  unsigned int v29 = 0LL;
  unsigned int v27 = 0;
  v26[0] = 0LL;
  v26[1] = 0LL;
  uint64_t v13 = obj_descriptor_and_flags_for_type(a2, &v27, (uint64_t)v26);
  if (!(_DWORD)v13)
  {
    uint64_t v25 = 0LL;
    if (a4)
    {
      uint64_t v15 = obj_get(a1, 0, a4, (int *)&apfs_desc, 0LL, 0LL, 0LL, 0LL, (uint64_t *)&v29);
      if ((_DWORD)v15)
      {
        uint64_t v13 = v15;
        log_err( "%s:%d: %s unable to get fs object 0x%llx: %d\n",  "obj_delete_and_free_by_oid",  3138,  (const char *)(*(void *)(v12 + 384) + 208LL),  a4,  v15);
        return v13;
      }

      uint64_t v16 = v29;
    }

    else
    {
      uint64_t v16 = 0LL;
    }

    if (v16) {
      uint64_t v17 = (uint64_t)v16;
    }
    else {
      uint64_t v17 = v12;
    }
    unsigned int v18 = v27;
    uint64_t v19 = obj_get(a1, v27, a5, 0LL, 0LL, (uint64_t)v16, 0LL, 0LL, (uint64_t *)&v28);
    if ((_DWORD)v19)
    {
      if ((v18 & 0x80000000) != 0)
      {
        uint64_t v13 = v19;
      }

      else if ((v18 & 0x40000000) != 0)
      {
        uint64_t v22 = spaceman_free( (const char *)v17,  0LL,  a5,  (a3 + *(_DWORD *)(*(void *)(v12 + 376) + 36LL) - 1)
              / *(_DWORD *)(*(void *)(v12 + 376) + 36LL),
                a6);
        uint64_t v13 = v22;
        if ((_DWORD)v22)
        {
          if (*(_WORD *)(v17 + 36) == 13) {
            log_err( "%s:%d: %s oid 0x%llx flags 0x%x type 0x%x error freeing space %d\n",  "obj_delete_and_free_by_oid",  3160,  (const char *)(v17 + 3992),  a5,  v18,  a2,  v22);
          }
          else {
            log_err( "%s:%d: %s oid 0x%llx flags 0x%x type 0x%x error freeing space %d\n",  "obj_delete_and_free_by_oid",  3160,  (const char *)(*(void *)(v17 + 384) + 208LL),  a5,  v18,  a2,  v22);
          }
        }
      }

      else
      {
        int v24 = 0;
        unint64_t v23 = 0LL;
        uint64_t v20 = omap_get(v17, a5, 0LL, &v25, &v24, 0LL, &v23);
        if ((_DWORD)v20)
        {
          uint64_t v13 = v20;
          log_err("%s:%d: %s oid 0x%llx flags 0x%x type 0x%x error getting mapping to free %d\n");
        }

        else
        {
          uint64_t v13 = omap_delete(v17, a5, v23, v25, a3, 1, a6);
          if ((_DWORD)v13) {
            log_err("%s:%d: %s oid 0x%llx flags 0x%x type 0x%x error deleting mapping %d\n");
          }
        }

        uint64_t v16 = v29;
      }
    }

    else
    {
      int v21 = v28;
      obj_delete_internal(v28, a6, 1);
      obj_release(v21);
      uint64_t v13 = 0LL;
    }

    if (v16) {
      obj_release(v16);
    }
  }

  return v13;
}

uint64_t obj_get( uint64_t a1, unsigned int a2, unint64_t a3, int *a4, _WORD *a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t *a9)
{
  int v126 = a2;
  if ((a2 & 8) != 0) {
    unint64_t v9 = a7;
  }
  else {
    unint64_t v9 = 0LL;
  }
  unint64_t v123 = v9;
  unint64_t v124 = 0LL;
  unsigned int v121 = 0;
  int v122 = 16000;
  __int16 v118 = 0;
  *a9 = 0LL;
  if (a2 >> 30 == 3) {
    return 22LL;
  }
  unint64_t v11 = a7;
  unsigned int v16 = a2;
  if ((a2 & 0x8000001) == 1)
  {
    BOOL is_current_tx = xid_is_current_tx(*(void *)(a1 + 392), a8);
    uint64_t finish = 22LL;
    if ((~v16 & 0x180) == 0 || !is_current_tx) {
      return finish;
    }
  }

  else if ((~a2 & 0x180) == 0)
  {
    return 22LL;
  }

  if ((~v16 & 0x81) == 0 || (v16 & 0x100) != 0 && (v16 & 0x15) != 0) {
    return 22LL;
  }
  uint64_t finish = 22LL;
  if ((v16 & 0x210) == 0x200 || !a3) {
    return finish;
  }
  if (*(void *)(a1 + 1344))
  {
    pthread_mutex_lock((pthread_mutex_t *)a1);
    unsigned __int8 v120 = 2;
    oc_poll_async_prefetch_objects(a1, &v118);
    if ((_BYTE)v118) {
      obj_cache_unlock_write(a1);
    }
  }

  if (a4)
  {
    v16 |= *((unsigned __int16 *)a4 + 1) << 16;
    int v126 = v16;
  }

  unsigned int v21 = v16 >> 30;
  if ((v16 & 0x40000000) == 0 && v16 >> 30 < 2) {
    int v22 = 4;
  }
  else {
    int v22 = 0;
  }
  unsigned int v23 = (v16 & 0x40000000) >> 30;
  if (v21 > 1) {
    ++v23;
  }
  if (v23 + ((v16 & 0x40000000) == 0 && v16 >> 30 < 2) != 1
    || (((v16 & 0x40000000) != 0 || v16 >> 30 >= 2) & ((unsigned __int16)(v16 & 0x200) >> 9)) != 0)
  {
    return 22LL;
  }

  if ((v16 & 0x40000000) != 0 || v16 >> 30 >= 2)
  {
    unint64_t v11 = 0LL;
    unint64_t v123 = 0LL;
  }

  if ((v16 & 0x8000000) != 0)
  {
    if (v21 >= 2)
    {
      unint64_t v24 = *(void *)(a1 + 408);
      if (v24 <= *(void *)(a1 + 400)) {
        unint64_t v24 = *(void *)(a1 + 400);
      }
      goto LABEL_41;
    }

    return 22LL;
  }

  if ((v16 & 1) != 0 && *(_BYTE *)(*(void *)(a1 + 392) + 627LL)) {
    return 30LL;
  }
  if ((v16 & 0x48000000) != 0) {
    goto LABEL_42;
  }
  unint64_t v24 = *(void *)(a1 + 400);
LABEL_41:
  if (v24 <= a3) {
    return 22LL;
  }
LABEL_42:
  if (a4)
  {
    int v114 = *a4;
    int v117 = a4[1];
  }

  else
  {
    int v114 = 0;
    int v117 = 0;
  }

  uint64_t v110 = a5;
  int v25 = v16;
  int v26 = v117;
  if (a6 != 0 && (v16 & 0x40000000) == 0 && v16 >> 30 < 2)
  {
    apfs_encryption_state_for_object(a6, v117, (unsigned int *)&v126);
    int v25 = v126;
  }

  unsigned int v116 = v25 & 0xFFFF0000 | v114;
  uint64_t v125 = 0LL;
  int v27 = v22 | (v16 >> 30) | 0x20;
  unsigned int v28 = v25;
  pthread_mutex_lock((pthread_mutex_t *)a1);
  unsigned int v29 = v27;
  unsigned int v30 = v28;
  uint64_t finish = 0LL;
  unsigned __int8 v120 = 1;
  int v31 = (unsigned __int16)v114;
  int v108 = (pthread_cond_t *)(a1 + 1296);
  uint64_t v32 = 512LL;
  if (!v11) {
    uint64_t v32 = 288LL;
  }
  uint64_t v109 = v32;
  int v112 = (unsigned __int16)v114;
  while (1)
  {
    unsigned int v33 = (v29 & 0xFFFFFFBF | (((v30 >> 8) & 1) << 6)) ^ 0x40;
    char v119 = 0;
    uint64_t v34 = *(void *)(*(void *)(a1 + 704) + 8LL * (*(_DWORD *)(a1 + 700) & a3));
    if (!v34)
    {
      if ((v29 & 2) != 0) {
        goto LABEL_241;
      }
LABEL_107:
      if (a4)
      {
        uint64_t v43 = v125;
        if (!v125)
        {
          unsigned int v113 = v33;
          char v44 = v120;
          if (v120 == 1) {
            char v44 = 2;
          }
          unsigned __int8 v120 = v44;
          unsigned int v46 = a4[2];
          unsigned int v45 = a4[3];
LABEL_172:
          int v26 = v117;
          unsigned int v47 = v126;
          uint64_t v68 = obj_alloc(a1, v45, v116, v46, v126, &v119, &v125);
          if ((_DWORD)v68)
          {
            uint64_t finish = v68;
            uint64_t v34 = 0LL;
LABEL_249:
            uint64_t v107 = 0LL;
            goto LABEL_250;
          }

          unsigned int v33 = v113;
          uint64_t finish = 0LL;
          if (v119) {
            goto LABEL_189;
          }
          uint64_t v43 = v125;
LABEL_115:
          uint64_t v125 = 0LL;
          uint64_t v48 = v47 & 0xFFFF0000;
          if (a4)
          {
            int v49 = a4[1];
            unsigned int v50 = *a4 | v48;
          }

          else
          {
            int v49 = 0;
            unsigned int v50 = v47 & 0xFFFF0000;
          }

          *(_DWORD *)(v43 + 36) = v50;
          *(_DWORD *)(v43 + 40) = v49;
          *(void *)(v43 + 112) = a3;
          if (!a6 || (uint64_t v52 = *(void *)(a6 + 496)) == 0) {
            uint64_t v52 = a6;
          }
          __int128 v53 = (uint64_t *)(*(void *)(a1 + 704) + 8LL * (*(_DWORD *)(a1 + 700) & a3));
          uint64_t v54 = *v53;
          *(void *)(v43 + 72) = *v53;
          *(void *)(v43 + 8) = v52;
          unint64_t v55 = v123;
          if ((v33 & 8) == 0) {
            unint64_t v55 = v11;
          }
          *(void *)(v43 + 120) = v55;
          if ((v33 & 1) != 0) {
            unint64_t v56 = a3;
          }
          else {
            unint64_t v56 = 0LL;
          }
          *(void *)(v43 + 128) = v56;
          uint64_t v111 = (void *)(v43 + 128);
          uint64_t v57 = *(void *)(v43 + 16);
          uint64_t v58 = (unsigned __int16)v47 & 0xFC00;
          if ((v33 & 4) != 0) {
            uint64_t v58 = 0LL;
          }
          if (v54) {
            *(void *)(v54 + 80) = v43 + 72;
          }
          uint64_t v59 = v57 | v48 | v58;
          uint64_t *v53 = v43;
          *(void *)(v43 + 80) = v53;
          uint64_t v60 = v59 | 0x10000000003LL;
          *(void *)(v43 + 16) = v59 | 0x10000000003LL;
          if ((v47 & 0x50) != 0)
          {
            uint64_t v60 = v59 | 0x1000000000BLL;
            *(void *)(v43 + 16) = v59 | 0x1000000000BLL;
            if ((v47 & 0x40) != 0)
            {
              uint64_t v60 = v59 | 0x1100000000BLL;
              *(void *)(v43 + 16) = v59 | 0x1100000000BLL;
            }
          }

          if ((v47 & 0x180) != 0) {
            v60 |= 0x8000000000uLL;
          }
          unint64_t v61 = v60 | ((unint64_t)(v47 & 0x200) << 34);
          if ((v33 & 4) != 0) {
            v61 |= v109;
          }
          if ((v47 & 0x380) != 0 || (v33 & 4) != 0) {
            *(void *)(v43 + 16) = v61;
          }
          unint64_t v62 = (unint64_t *)(v43 + 24);
          do
            unint64_t v63 = __ldxr(v62);
          while (__stxr(v63 + 1, v62));
          uint64_t v115 = v43;
          if ((~(_DWORD)v63 & 0xFFFFFF) == 0) {
            panic("Reference count overflowed for object %p!\n", (const void *)v43);
          }
          if ((v47 & 0x180) != 0) {
            int v64 = v33;
          }
          else {
            int v64 = v33 | 0x10;
          }
          obj_cache_unlock_write(a1);
          unsigned __int8 v120 = 0;
          LOBYTE(v113) = v64 & 0x9F;
          if ((v64 & 4) != 0)
          {
            uint64_t v66 = *(void *)(v115 + 8);
            if (!v66) {
              uint64_t v66 = *(void *)(a1 + 392);
            }
            uint64_t finish = omap_get(v66, a3, v11, v111, 0LL, &v121, &v124);
            if ((_DWORD)finish) {
              goto LABEL_179;
            }
            if ((v47 & 8) != 0 && v124 != v11)
            {
              uint64_t finish = 2LL;
              goto LABEL_179;
            }
          }

          else if ((_DWORD)finish)
          {
            goto LABEL_179;
          }

          if ((v47 & 0x180) != 0)
          {
            unint64_t v65 = obj_get_async_read(a1, v47, a4, v110, a6, v115, v124, v121, (_BYTE *)&v118 + 1);
            uint64_t finish = v65;
            if (HIBYTE(v118))
            {
              if ((_DWORD)v65)
              {
                uint64_t v107 = v115;
                obj_free(v115);
                uint64_t v34 = v115;
              }

              else
              {
                BOOL v106 = (v47 & 0x100) == 0;
                uint64_t v34 = v115;
                if (v106) {
                  uint64_t v107 = 0LL;
                }
                else {
                  uint64_t v107 = v115;
                }
              }

LABEL_250:
              LOBYTE(v33) = v113;
              goto LABEL_251;
            }
          }

          else
          {
            uint64_t finish = obj_read(v115, v124, v121, 0LL);
          }

LABEL_179:
          pthread_mutex_lock((pthread_mutex_t *)a1);
          unsigned __int8 v120 = 2;
          unint64_t v69 = v121;
          uint64_t v70 = v115;
          if ((v121 & 0xE0) != 0) {
            *(void *)(v115 + 16) = *(void *)(v115 + 16) & 0xFFFFFFFFFFFF1FFFLL | ((unint64_t)(v121 >> 5) << 13);
          }
          if ((v69 & 0x700) != 0) {
            *(void *)(v115 + 16) = *(void *)(v115 + 16) & 0xFFFFFFFFFFFFE3FFLL | (((v69 >> 8) & 7) << 10);
          }
          if ((_DWORD)finish) {
            goto LABEL_243;
          }
          uint64_t v71 = obj_init((pthread_cond_t **)v115, v47, a3, a4, (uint64_t)v110, v11, v116, v117);
          if ((_DWORD)v71)
          {
            uint64_t finish = v71;
            uint64_t v70 = v115;
LABEL_243:
            *(_DWORD *)(v70 + 52) = finish;
            obj_init_wakeup(v115, v47);
            uint64_t v107 = v115;
            uint64_t v34 = 0LL;
            if ((v64 & 0x10) != 0) {
              LOBYTE(v33) = v64 & 0x8F;
            }
            else {
              LOBYTE(v33) = v64 & 0x9F;
            }
            *(void *)(v115 + 16) = *(void *)(v115 + 16) & 0xFFFFFFEFFFFFFFF7LL | 8;
LABEL_251:
            uint64_t v87 = v125;
            if (v125) {
              goto LABEL_252;
            }
            goto LABEL_253;
          }

          unsigned int v33 = v64 & 0xFFFFFF9F;
          uint64_t v35 = v115;
          goto LABEL_186;
        }
      }

      else
      {
        if ((v126 & 0x10) == 0)
        {
          uint64_t v34 = 0LL;
          uint64_t v107 = 0LL;
          goto LABEL_251;
        }

        uint64_t v43 = v125;
        if (!v125)
        {
          unsigned int v113 = v33;
          unsigned int v45 = 0;
          unsigned int v46 = 0;
          char v67 = v120;
          if (v120 == 1) {
            char v67 = 2;
          }
          unsigned __int8 v120 = v67;
          goto LABEL_172;
        }
      }

      unsigned int v47 = v126;
      goto LABEL_115;
    }

    uint64_t v35 = 0LL;
LABEL_52:
    uint64_t v36 = *(void *)(v34 + 8);
    if (v36 != a6 && (!a6 || v36 != *(void *)(a6 + 496))) {
      goto LABEL_97;
    }
    uint64_t v37 = *(void *)(v34 + 16);
    if ((v37 & 0xC8000000) != (v30 & 0xC8000000) || *(void *)(v34 + 112) != a3) {
      goto LABEL_97;
    }
    if ((v37 & 2) == 0) {
      break;
    }
    if ((v30 & 0x180) == 0)
    {
      char v81 = v120;
      if (v120 == 1) {
        char v81 = 2;
      }
      unsigned __int8 v120 = v81;
      *(void *)(v34 + 16) = v37 | 4;
      unsigned int v82 = (v29 & 0xFFFFFFBF | (((v30 >> 8) & 1) << 6)) ^ 0x40;
      obj_initting_wait((uint64_t *)v34);
      int v31 = v112;
      unsigned int v33 = v82;
LABEL_231:
      int v26 = v117;
      goto LABEL_190;
    }

    if (*(_DWORD *)(v34 + 52))
    {
      uint64_t v107 = 0LL;
      uint64_t finish = *(unsigned int *)(v34 + 52);
      goto LABEL_251;
    }

    if ((~(_BYTE)v37 & 0xA) == 0)
    {
      uint64_t v107 = 0LL;
      uint64_t finish = 16LL;
      goto LABEL_251;
    }

    if ((v30 & 0x100) != 0)
    {
      uint64_t v107 = 0LL;
      uint64_t finish = 0LL;
      goto LABEL_251;
    }

    unsigned int v113 = (v29 & 0xFFFFFFBF | (((v30 >> 8) & 1) << 6)) ^ 0x40;
    if ((v37 & 0x8000000000LL) != 0)
    {
      *(void *)(v34 + 16) = v37 | 4;
      cv_wait_rw(v108, (pthread_mutex_t *)a1, 2LL, 0LL);
    }

    else if ((obj_reference_release_wait((void *)v34, &v122, 0, v120) & 1) == 0)
    {
      uint64_t v107 = 0LL;
      uint64_t finish = 0LL;
      goto LABEL_250;
    }

    unsigned int v33 = v113;
LABEL_189:
    int v31 = v112;
LABEL_190:
    unsigned int v30 = v126;
    unsigned int v29 = v33;
  }

  if (v31 && (unsigned __int16)*(_DWORD *)(v34 + 36) && ((*(_DWORD *)(v34 + 36) ^ v116) & 0xEFFFFFFF) != 0
    || v26 && *(_DWORD *)(v34 + 40) != v26)
  {
    goto LABEL_97;
  }

  if ((v29 & 3) != 0)
  {
    uint64_t v35 = v34;
    if ((v29 & 2) == 0) {
      goto LABEL_99;
    }
LABEL_176:
    if (v35) {
      goto LABEL_186;
    }
LABEL_241:
    uint64_t v34 = 0LL;
    uint64_t v107 = 0LL;
    uint64_t finish = 2LL;
    goto LABEL_251;
  }

  if (v123)
  {
    unint64_t v38 = *(void *)(v34 + 120);
    if (v38 <= *(void *)(v34 + 144)) {
      unint64_t v38 = *(void *)(v34 + 144);
    }
    if (!v11)
    {
      if (v38 < v123) {
        goto LABEL_97;
      }
LABEL_76:
      char v39 = 1;
      goto LABEL_77;
    }

    if (v38 != v123) {
      goto LABEL_97;
    }
  }

  else
  {
    if (!v11) {
      goto LABEL_76;
    }
    unint64_t v38 = *(void *)(v34 + 120);
    if (v38 <= *(void *)(v34 + 144)) {
      unint64_t v38 = *(void *)(v34 + 144);
    }
  }

  if (v38 > v11) {
    goto LABEL_97;
  }
  char v39 = 0;
LABEL_77:
  if (!v35) {
    goto LABEL_96;
  }
  unint64_t v40 = *(void *)(v34 + 120);
  if (v40 <= *(void *)(v34 + 144)) {
    unint64_t v40 = *(void *)(v34 + 144);
  }
  unint64_t v41 = *(void *)(v35 + 120);
  if (v41 <= *(void *)(v35 + 144)) {
    unint64_t v41 = *(void *)(v35 + 144);
  }
  if (v40 >= v41)
  {
    if (v40 == v41)
    {
      if ((v39 & 1) != 0)
      {
        if ((v37 & 0x200) != 0 && (*(_BYTE *)(v35 + 17) & 2) == 0) {
          goto LABEL_97;
        }
      }

      else if ((v37 & 0x200) == 0 && (*(_BYTE *)(v35 + 17) & 2) != 0)
      {
        goto LABEL_97;
      }
    }

    if ((v30 & 0x200) != 0)
    {
      if ((v37 & 0x80000000000LL) != 0 || (*(_BYTE *)(v35 + 21) & 8) == 0) {
LABEL_96:
      }
        uint64_t v35 = v34;
    }

    else if ((v37 & 0x80000000000LL) == 0 || (*(_BYTE *)(v35 + 21) & 8) != 0)
    {
      goto LABEL_96;
    }
  }

LABEL_97:
  uint64_t v34 = *(void *)(v34 + 72);
  if (v34) {
    goto LABEL_52;
  }
  if ((v29 & 2) != 0) {
    goto LABEL_176;
  }
LABEL_99:
  if (!v35 || (v29 & 4) == 0)
  {
    if (!v35) {
      goto LABEL_107;
    }
    if ((v29 & 4) != 0) {
      goto LABEL_119;
    }
LABEL_186:
    unsigned int v72 = v33;
    uint64_t v34 = v35;
    uint64_t finish = obj_get_finish(v35, v126, v11, (v33 >> 6) & 1, &v122, &v120);
    if ((_DWORD)finish != 35)
    {
      uint64_t v107 = 0LL;
      LOBYTE(v33) = v72;
      goto LABEL_251;
    }

    unsigned int v33 = v72;
LABEL_188:
    int v26 = v117;
    goto LABEL_189;
  }

  uint64_t v42 = *(void *)(v35 + 16);
  if ((v42 & 0x40) != 0)
  {
LABEL_119:
    uint64_t v42 = *(void *)(v35 + 16);
    if (v11) {
      goto LABEL_120;
    }
    goto LABEL_192;
  }

  if (!v11)
  {
    if (!(*(void *)(v35 + 16) & 0x20LL | v123)) {
      goto LABEL_210;
    }
LABEL_192:
    if ((v42 & 0x100) != 0) {
      goto LABEL_186;
    }
    char v51 = 1;
LABEL_194:
    char v73 = v120;
    if (v120 == 1) {
      char v73 = 2;
    }
    unsigned __int8 v120 = v73;
    unint64_t v74 = (unint64_t *)(v35 + 24);
    do
      unint64_t v75 = __ldxr(v74);
    while (__stxr(v75, v74));
    if ((v75 & 0xFFFFFF) == ((v75 >> 24) & 0xFFFFF))
    {
      if ((v51 & 1) != 0)
      {
        unint64_t v76 = v42 & 0xFFFFFFFFFFFFFCDFLL | 0x120;
LABEL_223:
        *(void *)(v35 + 16) = v76;
LABEL_227:
        if ((v33 & 8) == 0) {
          goto LABEL_186;
        }
        uint64_t v83 = *(void *)(v35 + 16);
        if ((v83 & 0x20000000000LL) == 0)
        {
          unint64_t v123 = *(void *)(v35 + 120);
          goto LABEL_107;
        }

        *(void *)(v35 + 16) = v83 | 0x80;
        unsigned int v84 = v33;
        cv_wait_rw(v108, (pthread_mutex_t *)a1, 2LL, 0LL);
        int v31 = v112;
        unsigned int v33 = v84 & 0xFFFFFFF7;
        goto LABEL_231;
      }

      if ((v30 & 0x200) == 0 || (v42 & 0x80000000000LL) != 0)
      {
        unint64_t v76 = v42 & 0xFFFFFFFFFFFFFCFFLL | 0x200;
        goto LABEL_223;
      }
    }

    else
    {
      if ((v51 & 1) != 0)
      {
        if ((v42 & 0x200) != 0)
        {
          unsigned int v113 = (v29 & 0xFFFFFFBF | (((v30 >> 8) & 1) << 6)) ^ 0x40;
          if (!v125)
          {
            uint64_t v34 = v35;
            uint64_t finish = obj_alloc( a1,  *(_DWORD *)(v35 + 44),  *(_DWORD *)(v35 + 36),  *(_DWORD *)(v35 + 48),  v30,  &v119,  &v125);
            if ((_DWORD)finish) {
              goto LABEL_249;
            }
            if (v125 == v34 || v119) {
              goto LABEL_214;
            }
            uint64_t v35 = v34;
            uint64_t v42 = *(void *)(v34 + 16);
          }

          *(void *)(v35 + 16) = v42 & 0xFFFFFFFFFFFFFFDFLL;
          uint64_t v77 = v35;
          if (obj_clone((pthread_cond_t **)v35, 0, &v125, &v119))
          {
            uint64_t finish = 0LL;
            unsigned int v33 = v113 | 8;
            uint64_t v35 = v77;
          }

          else
          {
            uint64_t v35 = v125;
            uint64_t v125 = 0LL;
            *(void *)(v35 + 16) |= 0x120uLL;
            unsigned int v85 = (unint64_t *)(v35 + 24);
            do
              unint64_t v86 = __ldxr(v85);
            while (__stxr(v86 - 1, v85));
            uint64_t finish = 0LL;
            unsigned int v33 = v113;
          }
        }

        goto LABEL_227;
      }

      if ((v42 & 0x100) == 0 || (v30 & 8) != 0)
      {
        if ((v30 & 0x200) != 0 && (v42 & 0x80000000000LL) == 0) {
          v33 |= 8u;
        }
        goto LABEL_227;
      }
    }

    v33 |= 8u;
    goto LABEL_227;
  }

  if (v11 <= *(void *)(v35 + 168) || v123)
  {
LABEL_120:
    if ((v42 & 0x200) != 0) {
      goto LABEL_186;
    }
    char v51 = 0;
    goto LABEL_194;
  }

LABEL_210:
  uint64_t v78 = v35;
  unsigned int v113 = (v29 & 0xFFFFFFBF | (((v30 >> 8) & 1) << 6)) ^ 0x40;
  int v79 = v120;
  obj_cache_unlock_by_state((pthread_mutex_t *)a1, v120);
  unsigned __int8 v120 = 0;
  uint64_t v80 = a6;
  if (!a6) {
    uint64_t v80 = *(void *)(a1 + 392);
  }
  uint64_t finish = omap_get(v80, a3, v11, 0LL, 0LL, 0LL, &v123);
  if (!(_DWORD)finish)
  {
    obj_cache_lock_by_state((pthread_mutex_t *)a1, v79);
    unsigned __int8 v120 = v79;
LABEL_214:
    unsigned int v33 = v113;
    goto LABEL_188;
  }

  uint64_t v87 = v125;
  if (v125)
  {
    pthread_mutex_lock((pthread_mutex_t *)a1);
    uint64_t v107 = 0LL;
    unsigned __int8 v120 = 2;
    LOBYTE(v33) = v113;
    uint64_t v34 = v78;
LABEL_252:
    --*(_DWORD *)(a1 + 684);
    uint64_t v88 = v87;
    char v89 = v33;
    obj_destroy_internal(v88, 1);
    LOBYTE(v33) = v89;
  }

  else
  {
    uint64_t v107 = 0LL;
    LOBYTE(v33) = v113;
    uint64_t v34 = v78;
  }

LABEL_253:
  char v90 = v33;
  if (v120) {
    obj_cache_unlock_by_state((pthread_mutex_t *)a1, v120);
  }
  if (v107) {
    obj_release(v107);
  }
  if (!(_DWORD)finish)
  {
    if (v34)
    {
      char v91 = v126;
      if ((v126 & 4) != 0)
      {
        if ((v126 & 1) != 0) {
          char v92 = 2;
        }
        else {
          char v92 = 1;
        }
        obj_lock(v34, v92);
        char v91 = v126;
      }

      if ((v91 & 1) != 0 && (uint64_t v93 = obj_modify((void *)v34, v91 & 3, a8), (_DWORD)v93))
      {
        uint64_t finish = v93;
        if ((v126 & 4) != 0)
        {
          if ((v126 & 1) != 0) {
            char v94 = 2;
          }
          else {
            char v94 = 1;
          }
          obj_unlock(v34, v94);
        }

        obj_release(v34);
      }

      else
      {
        if ((v90 & 2) == 0)
        {
          __int128 v95 = (unint64_t *)(a1 + 1072);
          do
            unint64_t v96 = __ldxr(v95);
          while (__stxr(v96 + 1, v95));
          __int128 v97 = (unint64_t *)(a1 + 1088);
          if ((v90 & 0x20) != 0) {
            __int128 v97 = (unint64_t *)(a1 + 1080);
          }
          do
            unint64_t v98 = __ldxr(v97);
          while (__stxr(v98 + 1, v97));
          uint64_t v99 = omm;
          __int128 v100 = (unint64_t *)(omm + 264);
          do
            unint64_t v101 = __ldxr(v100);
          while (__stxr(v101 + 1, v100));
          __int128 v102 = (unint64_t *)(v99 + 280);
          uint64_t v103 = (unint64_t *)(v99 + 272);
          if ((v90 & 0x20) == 0) {
            uint64_t v103 = v102;
          }
          do
            unint64_t v104 = __ldxr(v103);
          while (__stxr(v104 + 1, v103));
        }

        uint64_t finish = 0LL;
        if ((v126 & 0x100) != 0) {
          uint64_t v105 = 0LL;
        }
        else {
          uint64_t v105 = v34;
        }
        *a9 = v105;
      }
    }

    else
    {
      return 2LL;
    }
  }

  return finish;
}

uint64_t oc_poll_async_prefetch_objects(uint64_t result, _BYTE *a2)
{
  *a2 = 1;
  uint64_t v2 = *(void *)(result + 1344);
  if (v2)
  {
    uint64_t v4 = result;
    while (1)
    {
      if ((*(_BYTE *)(*(void *)(v2 + 136) + 20LL) & 0x80) == 0)
      {
        uint64_t result = dev_read_poll(*(void *)(*(void *)(v4 + 392) + 384LL));
        if ((_DWORD)result != 36) {
          break;
        }
      }

      uint64_t v2 = *(void *)(v2 + 104);
      if (!v2) {
        return result;
      }
    }

    return obj_async_finish(v2, a2);
  }

  return result;
}

uint64_t apfs_encryption_state_for_object(uint64_t result, int a2, unsigned int *a3)
{
  uint64_t v4 = *(void *)(result + 496);
  if (!v4) {
    uint64_t v4 = result;
  }
  uint64_t v5 = *(void *)(v4 + 376);
  unsigned int v6 = *a3;
  if ((*(_BYTE *)(v5 + 264) & 1) != 0)
  {
    unsigned int v10 = v6 & 0xEFFF03FF;
  }

  else
  {
    unsigned int v7 = v6 & 0xFFFF1FFF;
    if (a2 == 36) {
      int v8 = 268443648;
    }
    else {
      int v8 = 0x10000000;
    }
    *a3 = v7 | v8;
    uint64_t result = apfs_has_secondary_fsroot(result);
    if ((_DWORD)result) {
      int v9 = 1024;
    }
    else {
      int v9 = 0;
    }
    unsigned int v10 = *a3 & 0xFFFFE3FF | v9;
  }

  *a3 = v10;
  return result;
}

uint64_t obj_initting_wait(uint64_t *a1)
{
  uint64_t v1 = *a1;
  __int128 v5 = xmmword_183CA1F90;
  uint64_t v2 = a1[2];
  uint64_t result = cv_wait_rw( (pthread_cond_t *)(v1 + 1296),  (pthread_mutex_t *)v1,  2LL,  (timespec *)((unint64_t)&v5 & (v2 << 23 >> 63)));
  if ((v2 & 0x10000000000LL) != 0 && *(void *)(v1 + 1344))
  {
    char v4 = 0;
    uint64_t result = oc_poll_async_prefetch_objects(v1, &v4);
    if (!v4) {
      return pthread_mutex_lock((pthread_mutex_t *)v1);
    }
  }

  return result;
}

unint64_t obj_get_async_read( uint64_t a1, int a2, _OWORD *a3, _WORD *a4, uint64_t a5, uint64_t a6, unint64_t a7, unsigned int a8, _BYTE *a9)
{
  *a9 = 0;
  uint64_t v17 = (void (**)(uint64_t, int8x16_t, int8x16_t))_apfs_calloc(1uLL, 0xA0uLL);
  if (!v17)
  {
    unint64_t v21 = 12LL;
LABEL_15:
    *a9 = 1;
    return v21;
  }

  unsigned int v18 = v17;
  if (!a4) {
    goto LABEL_18;
  }
  if (*a4 != 25987)
  {
    if (!a5) {
      a5 = *(void *)(a1 + 392);
    }
    if (*(_WORD *)(a5 + 36) == 13) {
      int v22 = (const char *)(a5 + 3992);
    }
    else {
      int v22 = (const char *)(*(void *)(a5 + 384) + 208LL);
    }
    log_err( "%s:%d: %s oid 0x%llx flags 0x%x type 0x%x/0x%x: attempt to perform async fetch without proper init args\n",  "obj_get_async_read",  3588,  v22,  *(void *)(a6 + 112),  a2,  *(_DWORD *)(a6 + 36),  *(_DWORD *)(a6 + 40));
    unint64_t v21 = 22LL;
    goto LABEL_14;
  }

  if (!a4[1])
  {
    size_t v20 = 0LL;
    uint64_t v19 = v17[19];
    goto LABEL_17;
  }

  uint64_t v19 = (void (*)(uint64_t, int8x16_t, int8x16_t))_apfs_malloc((unsigned __int16)a4[1]);
  bzero(v19, (unsigned __int16)a4[1]);
  v18[19] = v19;
  if (!v19)
  {
    unint64_t v21 = 12LL;
LABEL_14:
    _apfs_free(v18, 160LL);
    goto LABEL_15;
  }

  size_t v20 = (unsigned __int16)a4[1];
LABEL_17:
  memcpy(v19, a4, v20);
  *((_BYTE *)v18 + 148) = 1;
LABEL_18:
  pthread_mutex_lock((pthread_mutex_t *)a1);
  v18[13] = 0LL;
  unsigned int v23 = *(void (****)(uint64_t, int8x16_t, int8x16_t))(a1 + 1352);
  v18[14] = (void (*)(uint64_t, int8x16_t, int8x16_t))v23;
  *unsigned int v23 = v18;
  *(void *)(a1 + 1352) = v18 + 13;
  obj_cache_unlock_write(a1);
  *unsigned int v18 = obj_get_callback;
  v18[17] = (void (*)(uint64_t, int8x16_t, int8x16_t))a6;
  *(_OWORD *)(v18 + 15) = *a3;
  *((_DWORD *)v18 + 36) = a2;
  unint64_t v24 = (unint64_t *)(a6 + 24);
  do
    unint64_t v25 = __ldxr(v24);
  while (__stxr(v25 + 1, v24));
  if ((~(_DWORD)v25 & 0xFFFFFFLL) == 0) {
    panic("Reference count overflowed for object %p!\n", (const void *)a6);
  }
  int v26 = (unsigned int *)(a1 + 916);
  do
    unsigned int v27 = __ldxr(v26);
  while (__stxr(v27 + 1, v26));
  unint64_t v21 = obj_read(a6, a7, a8, (uint64_t)v18);
  if (!(_DWORD)v21)
  {
    *a9 = 1;
    pthread_mutex_lock((pthread_mutex_t *)a1);
    uint64_t v28 = *(void *)(a6 + 16);
    unint64_t v29 = (v28 & 4 ^ 0xFFFFFF7FFFFFFFFFLL) & v28;
    if ((a8 & 0xE0) != 0) {
      unint64_t v29 = v29 & 0xFFFFFFFFFFFF1FFFLL | (a8 << 8) & 0xE000;
    }
    if ((a8 & 0x700) != 0) {
      unint64_t v29 = v29 & 0xFFFFFFFFFFFFE3FFLL | (4 * a8) & 0x1C00;
    }
    *(void *)(a6 + 16) = v29;
    obj_cache_unlock_write(a1);
    if ((v28 & 4) != 0) {
      cv_wakeup((pthread_cond_t *)(a1 + 1296));
    }
    return 0LL;
  }

  return v21;
}

unint64_t obj_read(uint64_t a1, unint64_t a2, unsigned int a3, uint64_t a4)
{
  uint64_t v7 = *(void *)(a1 + 128);
  uint64_t v8 = *(void *)(a1 + 8);
  if (v7)
  {
    int v9 = *(_DWORD *)(a1 + 36);
    if ((a3 & 4) != 0 && v8)
    {
      *(_DWORD *)(a1 + 36) = v9 | 0x10000000;
      if ((*(_BYTE *)(a1 + 21) & 8) != 0)
      {
        int v13 = 0;
        uint64_t v14 = 0LL;
        uint64_t v15 = 0LL;
        if ((a3 & 8) != 0) {
          goto LABEL_27;
        }
      }

      else
      {
        if (a3 >> 5 == 1)
        {
          uint64_t v10 = v8 + 624;
          uint64_t v11 = v8 + 816;
        }

        else
        {
          uint64_t v10 = v8 + 528;
          uint64_t v11 = v8 + 720;
        }

        if ((a3 & 0x10) != 0) {
          uint64_t v14 = v11;
        }
        else {
          uint64_t v14 = v10;
        }
        int v13 = (a3 >> 8) & 7;
        if (v13)
        {
          if (v13 != 1) {
            panic("invalid tweak type %d\n");
          }
          uint64_t v15 = *(void *)(a1 + 112) ^ HIDWORD(a2) | *(void *)(a1 + 112) & 0xFFFFFFFF00000000LL ^ (a2 << 32);
          int v13 = 4;
          if ((a3 & 8) != 0) {
            goto LABEL_27;
          }
        }

        else
        {
          uint64_t v15 = (a3 >> 8) & 7;
          if ((a3 & 8) != 0) {
            goto LABEL_27;
          }
        }
      }
    }

    else
    {
      int v13 = 0;
      uint64_t v14 = 0LL;
      uint64_t v15 = 0LL;
      *(_DWORD *)(a1 + 36) = v9 & 0xEFFFFFFF;
      if ((a3 & 8) != 0) {
        goto LABEL_27;
      }
    }

    if ((*(_BYTE *)(a1 + 21) & 8) == 0)
    {
LABEL_28:
      if (v14 && (uint64_t v17 = *(void *)(v8 + 1136)) != 0)
      {
        uint64_t v18 = *(void *)(*(void *)a1 + 392LL);
      }

      else
      {
        uint64_t v18 = *(void *)(*(void *)a1 + 392LL);
        uint64_t v17 = *(void *)(v18 + 384);
      }

      uint64_t extended = dev_read_extended( v17,  v7,  (*(_DWORD *)(a1 + 48) + *(_DWORD *)(*(void *)(v18 + 376) + 36LL) - 1)
                 / *(_DWORD *)(*(void *)(v18 + 376) + 36LL),
                   *(void *)(a1 + 56),
                   v14,
                   a4 != 0,
                   a4,
                   v15,
                   v13);
      unint64_t v16 = extended;
      if (!a4 && !(_DWORD)extended)
      {
        if ((*(void *)(a1 + 16) & 0x80020000000LL) != 0)
        {
          return 0LL;
        }

        else
        {
          unint64_t v16 = obj_checksum_verify(a1, v20, v21);
          if ((_DWORD)v16)
          {
            uint64_t v22 = *(void *)(a1 + 8);
            if (v22) {
              unsigned int v23 = (const char *)(v22 + 3992);
            }
            else {
              unsigned int v23 = (const char *)(*(void *)(*(void *)(*(void *)a1 + 392LL) + 384LL) + 208LL);
            }
            log_err( "%s:%d: %s oid 0x%llx flags 0x%llx 0x%x type 0x%x/0x%x paddr 0x%llx error verifying checksum\n",  "obj_read",  6372,  v23,  *(void *)(a1 + 112),  *(void *)(a1 + 16),  *(_DWORD *)(a1 + 32),  *(_DWORD *)(a1 + 36),  *(_DWORD *)(a1 + 40),  *(void *)(a1 + 128));
          }
        }
      }

      return v16;
    }

LABEL_27:
    *(void *)(a1 + 120) = a2;
    goto LABEL_28;
  }

  if (v8) {
    uint64_t v12 = (const char *)(v8 + 3992);
  }
  else {
    uint64_t v12 = (const char *)(*(void *)(*(void *)(*(void *)a1 + 392LL) + 384LL) + 208LL);
  }
  log_err( "%s:%d: %s oid 0x%llx flags 0x%llx 0x%x type 0x%x/0x%x object missing paddr!\n",  "obj_read",  6329,  v12,  *(void *)(a1 + 112),  *(void *)(a1 + 16),  *(_DWORD *)(a1 + 32),  *(_DWORD *)(a1 + 36),  *(_DWORD *)(a1 + 40));
  unint64_t v16 = 22LL;
  if (a4)
  {
    *(_DWORD *)(a4 + 96) = 22;
    (*(void (**)(uint64_t))a4)(a4);
  }

  return v16;
}

  int8x16_t v21 = a1[7];
  int8x16_t v20 = *(unsigned __int16 *)&v21->__opaque[16] | (*((unsigned __int16 *)a1 + 19) << 16);
  LODWORD(v21) = *(_DWORD *)&v21->__opaque[20];
  *((_DWORD *)a1 + 9) = v20;
  *((_DWORD *)a1 + 10) = (_DWORD)v21;
LABEL_28:
  uint64_t v12 = (unint64_t)a1[2];
  uint64_t v22 = v20 & 0x10000000;
  if ((v12 & 0x10000000) != v22)
  {
    uint64_t v12 = v12 & 0xFFFFFFFFEFFFFFFFLL | v22;
    a1[2] = (pthread_cond_t *)v12;
  }

  if (!(_DWORD)v13) {
    goto LABEL_2;
  }
LABEL_33:
  *((_DWORD *)a1 + 13) = v13;
  else {
    unsigned int v23 = 0xFFFFFE7FFFFFFFF9LL;
  }
  a1[2] = (pthread_cond_t *)(v12 & v23);
  if ((v12 & 4) != 0) {
    cv_wakeup(*a1 + 27);
  }
  return v13;
}

  if ((*(void *)(v23 + 16) & 0x80020000000LL) != 0)
  {
    pthread_mutex_lock(a1);
    goto LABEL_31;
  }

  uint64_t v36 = obj_checksum_verify(v23, v30, v31);
LABEL_30:
  int v13 = v36;
  pthread_mutex_lock(a1);
  if ((_DWORD)v13)
  {
LABEL_53:
    obj_cache_ephemeral_adjust((uint64_t)a1, *(void *)(v23 + 16), *(_DWORD *)(v23 + 48), -1);
    do
      unsigned int v46 = __ldxr(v24);
    while (__stxr(v46 - 1, v24));
    goto LABEL_55;
  }

        log_err( "%s:%d: %s dev %d Error %d, reinitializing\n",  "spaceman_free_extent_cache_insert",  1881,  (const char *)(*(void *)(*(void *)a1 + 384LL) + 208LL),  *(unsigned __int8 *)(a1 + 88),  updated);
        spaceman_free_extent_cache_reset(a1);
        goto LABEL_28;
      }

      unint64_t v55 = spaceman_fxc_tree_adjacent(a1, a1 + 1068, 1);
      if ((_DWORD)v55)
      {
        uint64_t updated = v55;
        unint64_t v56 = 0x7FFFFFFFFFFFFFFFLL;
        goto LABEL_77;
      }

      unint64_t v62 = *((unsigned __int16 *)v21 + 2 * *(unsigned __int8 *)(a1 + 1165));
      int v64 = *v63;
      unint64_t v56 = *v63 & 0xFFFFFFFFFFFFFLL;
      if (v4 + v30 < v56)
      {
        uint64_t updated = 2LL;
LABEL_77:
        spaceman_fxc_dropped(a1, v30, v4);
        unint64_t v65 = a1 + 16LL * (a2 ^ 1u);
        *(void *)(v65 + 296) = v30;
        *(void *)(v65 + 304) = v56;
        if ((_DWORD)updated != 2) {
          goto LABEL_27;
        }
LABEL_25:
        uint64_t updated = 0LL;
        goto LABEL_28;
      }

      uint64_t v66 = v63[1] & 0xFFFFFFFFFFFFFLL;
      char v67 = v56 - v30 + v66;
      if (v56 == *(void *)(a1 + 112)) {
        *(void *)(a1 + 112) = v30;
      }
      *unint64_t v63 = v64 & 0xFFF0000000000000LL | v30;
      uint64_t updated = spaceman_fxc_update_length(a1, v30, v66, v56 - v30 + v66, v62);
      if ((_DWORD)updated) {
        goto LABEL_27;
      }
      uint64_t v68 = a1 + 48LL * ((*(_DWORD *)(a1 + 280) & 4) == 0);
      uint64_t v70 = *(void *)(v68 + 176);
      unint64_t v69 = (unint64_t *)(v68 + 176);
      if (v70 >= v67) {
        goto LABEL_25;
      }
      uint64_t updated = 0LL;
      *unint64_t v69 = v67;
LABEL_28:
      if (*(void *)a1) {
        pthread_mutex_unlock((pthread_mutex_t *)(a1 + 16));
      }
      return updated;
    }

uint64_t obj_init( pthread_cond_t **a1, __int16 a2, uint64_t a3, _DWORD *a4, uint64_t a5, unint64_t a6, int a7, int a8)
{
  unint64_t v12 = (unint64_t)a1[2];
  if ((v12 & 0x80020000000LL) != 0)
  {
LABEL_2:
    uint64_t v13 = 0LL;
    if ((a2 & 0x210) == 0 && a4)
    {
      uint64_t v25 = 0LL;
      uint64_t v14 = obj_descriptor_funcs_for_type(*((_DWORD *)a1 + 9), &v25);
      if ((_DWORD)v14)
      {
        uint64_t v13 = v14;
      }

      else
      {
        uint64_t v19 = *(uint64_t (**)(pthread_cond_t **, uint64_t))(v25 + 8);
        if (v19)
        {
          uint64_t v13 = v19(a1, a5);
          unint64_t v12 = (unint64_t)a1[2];
        }

        else
        {
          uint64_t v13 = 0LL;
        }
      }
    }

    goto LABEL_33;
  }

  uint64_t v15 = a1[7];
  unint64_t v16 = *(pthread_cond_t **)&v15->__opaque[8];
  a1[15] = v16;
  if (!a8) {
    *((_DWORD *)a1 + 10) = *(_DWORD *)&v15->__opaque[20];
  }
  if ((!(_WORD)a7 || ((*(_DWORD *)&v15->__opaque[16] ^ a7) & 0xEFFFFFFF) == 0)
    && (!a8 || *(_DWORD *)&v15->__opaque[20] == a8)
    && *(void *)v15->__opaque == a3)
  {
    uint64_t v13 = 0LL;
    if (!a6 || (unint64_t)v16 <= a6)
    {
LABEL_19:
      if (!a4) {
        goto LABEL_27;
      }
      goto LABEL_25;
    }
  }

  if ((a2 & 0x20) != 0)
  {
    uint64_t v13 = 2LL;
    goto LABEL_19;
  }

  uint64_t v17 = a1[1];
  if (v17) {
    opaque = v17[83].__opaque;
  }
  else {
    opaque = (const char *)(*(void *)(*(void *)(*a1)[8].__opaque + 384LL) + 208LL);
  }
  log_err( "%s:%d: %s wrong object at 0x%llx - wanted oid 0x%llx type 0x%x:0x%x xid %lld - got oid 0x%llx type 0x%x:0x%x xid %lld\n",  "obj_init",  3220,  opaque,  a1[16],  a3,  a7,  a8,  a6,  *(void *)v15->__opaque,  *(_DWORD *)&v15->__opaque[16],  *(_DWORD *)&v15->__opaque[20],  v16);
  uint64_t v13 = nx_corruption_detected_int(*(void *)(*a1)[8].__opaque);
  if (!a4) {
    goto LABEL_27;
  }
LABEL_25:
  if (*a4)
  {
    int v20 = *((_DWORD *)a1 + 9);
    goto LABEL_28;
  }

uint64_t obj_get_finish(uint64_t a1, int a2, unint64_t a3, int a4, int *a5, _BYTE *a6)
{
  uint64_t v6 = *(void *)(a1 + 16);
  if ((v6 & 0x10) != 0) {
    return 2LL;
  }
  uint64_t v10 = *(void *)a1;
  if ((a2 & 0x40) == 0 && (v6 & 0x1000000008LL) == 0x1000000008LL)
  {
    if (*a6 == 1)
    {
      *a6 = 2;
      uint64_t v6 = *(void *)(a1 + 16);
    }

    *(void *)(a1 + 16) = v6 & 0xFFFFFFEFFFFFFFF7LL;
  }

  unsigned int v12 = a2 & 0xC8000000;
  uint64_t v13 = (unsigned int *)(a1 + 32);
  do
    unsigned int v14 = __ldxr(v13);
  while (__stxr(v14 & 0xFFFFFFFD, v13));
  if ((v14 & 2) != 0) {
    cv_wakeup((pthread_cond_t *)(v10 + 1296));
  }
  if ((*(_BYTE *)v13 & 1) == 0 && (*(_BYTE *)(a1 + 19) & 0x80) == 0)
  {
    int v15 = pthread_rwlock_rdlock((pthread_rwlock_t *)(v10 + 128));
    if (v15) {
      panic( "%s:%d: rdlock == 0 failed %d\n",  "/Library/Caches/com.apple.xbs/Sources/apfs_framework/nx/obj.c",  3303,  v15);
    }
    if (*(void *)(a1 + 88) != 3735928559LL) {
      obj_cache_enqueue_deferred_update(v10, a1);
    }
    int v16 = pthread_rwlock_unlock((pthread_rwlock_t *)(v10 + 128));
    if (v16) {
      panic( "%s:%d: unlock == 0 failed %d\n",  "/Library/Caches/com.apple.xbs/Sources/apfs_framework/nx/obj.c",  3307,  v16);
    }
  }

  uint64_t result = 0LL;
  if (!v12 && a3)
  {
    uint64_t result = 0LL;
    unint64_t v17 = *(void *)(a1 + 168);
    if (v17 <= a3) {
      unint64_t v17 = a3;
    }
    *(void *)(a1 + 168) = v17;
  }

  return result;
}

void obj_destroy_internal(uint64_t a1, char a2)
{
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = *(void *)(a1 + 16);
  if ((v5 & 1) != 0)
  {
    uint64_t v6 = *(void *)(a1 + 72);
    if (v6) {
      *(void *)(v6 + 80) = *(void *)(a1 + 80);
    }
    **(void **)(a1 + 80) = v6;
    *(void *)(a1 + 16) = v5 & 0xFFFFFFFFFFFFFFFELL;
  }

  uint64_t v7 = (unsigned int *)(a1 + 32);
  char v8 = atomic_load((unsigned int *)(a1 + 32));
  int v9 = v8 & 0x10;
  if (*(void *)(a1 + 88) != 3735928559LL || v9 != 0)
  {
    int v11 = pthread_rwlock_wrlock((pthread_rwlock_t *)(v4 + 128));
    if (v11) {
      panic( "%s:%d: wrlock == 0 failed %d\n",  "/Library/Caches/com.apple.xbs/Sources/apfs_framework/nx/obj.c",  2908,  v11);
    }
    uint64_t v12 = *(void *)(a1 + 88);
    if (v12 == 3735928559LL) {
      goto LABEL_30;
    }
    uint64_t v13 = *(void *)(a1 + 16);
    if ((v13 & 0x80000000) == 0)
    {
      if ((*(_BYTE *)v7 & 1) == 0)
      {
        obj_free_list_remove((uint64_t *)a1);
        do
LABEL_30:
          unsigned int v16 = __ldxr(v7);
        while (__stxr(v16 & 0xFFFFEF, v7));
        if ((v16 & 0x10) != 0) {
          *(void *)(*(void *)(v4 + 872) + 8LL * HIBYTE(v16)) = 0LL;
        }
        int v17 = pthread_rwlock_unlock((pthread_rwlock_t *)(v4 + 128));
        if (v17) {
          panic( "%s:%d: unlock == 0 failed %d\n",  "/Library/Caches/com.apple.xbs/Sources/apfs_framework/nx/obj.c",  2936,  v17);
        }
        goto LABEL_35;
      }

      if (*(void *)(v4 + 864) == a1) {
        *(void *)(v4 + 864) = v12;
      }
      int v15 = *(void **)(a1 + 96);
      if ((v13 & 0x40000000) != 0)
      {
        if (v12)
        {
          *(void *)(v12 + 96) = v15;
          int v15 = *(void **)(a1 + 96);
        }

        else
        {
          *(void *)(v4 + 824) = v15;
        }

        void *v15 = v12;
        --*(_DWORD *)(v4 + 888);
      }

      else
      {
        if (v12)
        {
          *(void *)(v12 + 96) = v15;
          int v15 = *(void **)(a1 + 96);
        }

        else
        {
          *(void *)(v4 + 808) = v15;
        }

        void *v15 = v12;
        --*(_DWORD *)(v4 + 884);
      }

LABEL_35:
  if ((a2 & 1) != 0 || !obj_destroy_for_obj(a1))
  {
    obj_destroy_complete(a1, 1);
  }

  else
  {
    if (*(void *)(v4 + 720))
    {
      uint64_t v18 = *(void *)(v4 + 728);
      uint64_t v20 = *(void *)(v18 + 72);
      uint64_t v19 = v18 + 72;
      *(void *)(a1 + 72) = v20;
      if (v20) {
        *(void *)(*(void *)v19 + 80LL) = a1 + 72;
      }
    }

    else
    {
      uint64_t v19 = v4 + 720;
      *(void *)(a1 + 72) = 0LL;
    }

    *(void *)uint64_t v19 = a1;
    *(void *)(a1 + 80) = v19;
    *(void *)(v4 + 728) = a1;
  }

uint64_t obj_lock(uint64_t a1, char a2)
{
  if ((a2 & 1) != 0)
  {
    if (pthread_rwlock_rdlock((pthread_rwlock_t *)(a1 + 176))) {
      panic("%s:%d: rdlock == 0 failed %d\n");
    }
  }

  else
  {
    if ((a2 & 2) == 0) {
      panic("invalid lock flags: 0x%x\n");
    }
    if (pthread_rwlock_wrlock((pthread_rwlock_t *)(a1 + 176))) {
      panic("%s:%d: wrlock == 0 failed %d\n");
    }
  }

  return 0LL;
}

uint64_t obj_modify(void *a1, char a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  uint64_t v7 = *(void *)(*a1 + 392LL);
  if (a1[1]) {
    uint64_t v8 = a1[1];
  }
  else {
    uint64_t v8 = *(void *)(*a1 + 392LL);
  }
  uint64_t v9 = a1[2];
  if ((v9 & 0x8000000) == 0)
  {
    if (*(_BYTE *)(v7 + 627)) {
      return 30LL;
    }
    if (!xid_is_current_tx(*(void *)(*a1 + 392LL), a3)) {
      return 22LL;
    }
    uint64_t v9 = a1[2];
  }

  if ((v9 & 0x10000000000LL) != 0)
  {
    if (*(_WORD *)(v8 + 36) == 13) {
      uint64_t v19 = (const char *)(v8 + 3992);
    }
    else {
      uint64_t v19 = (const char *)(*(void *)(v8 + 384) + 208LL);
    }
    log_err( "%s:%d: %s oid 0x%llx flags 0x%llx 0x%x type 0x%x/0x%x can't modify object before read completes\n",  "obj_modify",  5459,  v19,  a1[14],  v9,  *((_DWORD *)a1 + 8),  *((_DWORD *)a1 + 9),  *((_DWORD *)a1 + 10));
    return 22LL;
  }

  uint64_t v11 = a1[8];
  if (v11 && v11 == a1[7])
  {
    size_t v12 = *((unsigned int *)a1 + 12);
    uint64_t v13 = _apfs_obj_zalloc(v12, *(void *)(v6 + 920));
    obj_cache_stats_update_zalloc((unint64_t *)(v6 + 944), v9, (uint64_t)v13, v12);
    obj_cache_stats_update_zalloc((unint64_t *)(omm + 136), v9, (uint64_t)v13, v12);
    if (!v13) {
      return 12LL;
    }
    unsigned int v14 = (unsigned int *)(a1 + 4);
    do
      unsigned int v15 = __ldaxr(v14);
    while (__stxr(v15 | 8, v14));
    if ((v15 & 8) != 0)
    {
      do
      {
        pthread_mutex_lock((pthread_mutex_t *)(v6 + 328));
        pthread_mutex_unlock((pthread_mutex_t *)(v6 + 328));
        do
          unsigned int v16 = __ldaxr(v14);
        while (__stxr(v16 | 8, v14));
      }

      while ((v16 & 8) != 0);
    }

    int v17 = (const void *)a1[8];
    if (v17 && v17 == (const void *)a1[7])
    {
      memcpy(v13, v17, v12);
      a1[8] = v13;
      do
        unsigned int v20 = __ldxr(v14);
      while (__stlxr(v20 & 0xFFFFFFF7, v14));
    }

    else
    {
      do
        unsigned int v18 = __ldxr(v14);
      while (__stlxr(v18 & 0xFFFFFFF7, v14));
      fs_obj_zfree_oc(v13, v12, a1[2], v6);
    }
  }

  uint64_t v21 = a1[2];
  if ((v21 & 0x80000000) != 0) {
    return 0LL;
  }
  if ((v21 & 0xC0000000) == 0)
  {
    if ((v21 & 0xC00000000LL) != 0 || a1[15] == a3) {
      return 0LL;
    }
    pthread_mutex_lock((pthread_mutex_t *)v6);
    uint64_t v24 = a1[2];
    if ((v24 & 0xC00000000LL) == 0)
    {
      while (a1[15] != a3)
      {
        unsigned int v26 = *(_DWORD *)(*(void *)(v7 + 376) + 36LL);
        int v27 = *((_DWORD *)a1 + 12);
        int v43 = 0;
        if ((v24 & 0x100000000LL) == 0)
        {
          a1[2] = v24 | 0x100000000LL;
          unint64_t v31 = (v26 + v27 - 1) / v26;
          obj_cache_unlock_write(v6);
          uint64_t v10 = spaceman_reserve(v8, 72, v31, a3, &v43);
          pthread_mutex_lock((pthread_mutex_t *)v6);
          uint64_t v32 = a1[2];
          a1[2] = v32 & 0xFFFFFFFCFFFFFFFFLL;
          if ((_DWORD)v10)
          {
            if (*(_WORD *)(v8 + 36) == 13) {
              unsigned int v33 = (const char *)(v8 + 3992);
            }
            else {
              unsigned int v33 = (const char *)(*(void *)(v8 + 384) + 208LL);
            }
            log_err( "%s:%d: %s oid 0x%llx flags 0x%llx 0x%x type 0x%x/0x%x error reserving %d blocks of space: %d\n",  "obj_modify",  5575,  v33,  a1[14],  v32 & 0xFFFFFFFCFFFFFFFFLL,  *((_DWORD *)a1 + 8),  *((_DWORD *)a1 + 9),  *((_DWORD *)a1 + 10),  v31,  v10);
          }

          else
          {
            uint64_t v34 = 0x800000000LL;
            if ((v43 & 0x10) == 0) {
              uint64_t v34 = 0x400000000LL;
            }
            a1[2] = v34 | v32 & 0xFFFFFFFCFFFFFFFFLL;
          }

          obj_cache_unlock_write(v6);
          if ((v32 & 0x200000000LL) != 0) {
            cv_wakeup((pthread_cond_t *)(v6 + 1296));
          }
          return v10;
        }

        a1[2] = v24 | 0x200000000LL;
        cv_wait_rw((pthread_cond_t *)(v6 + 1296), (pthread_mutex_t *)v6, 2LL, 0LL);
        uint64_t v24 = a1[2];
        if ((v24 & 0xC00000000LL) != 0) {
          goto LABEL_43;
        }
      }
    }

    goto LABEL_43;
  }

  if ((a2 & 2) == 0) {
    return 0LL;
  }
  uint64_t v22 = (unsigned int *)(a1 + 4);
  if ((a1[4] & 1) != 0) {
    return 0LL;
  }
  pthread_mutex_lock((pthread_mutex_t *)v6);
  if ((*(_BYTE *)v22 & 1) != 0) {
    goto LABEL_43;
  }
  uint64_t v23 = a1[19];
  if (v23)
  {
LABEL_39:
    obj_dirty_locked(a1, a3, v23);
LABEL_43:
    obj_cache_unlock_write(v6);
    return 0LL;
  }

  if (a1[15] == a3)
  {
    uint64_t v23 = a1[16];
    goto LABEL_39;
  }

  do
    unsigned int v29 = __ldxr(v22);
  while (__stxr(v29 | 1, v22));
  obj_cache_unlock_write(v6);
  if ((*((_BYTE *)a1 + 19) & 0x10) != 0)
  {
    unint64_t v42 = 0LL;
  }

  else
  {
    if (*((_WORD *)a1 + 18) == 11 || *((_WORD *)a1 + 20) == 11) {
      uint64_t v30 = 2LL;
    }
    else {
      uint64_t v30 = 1LL;
    }
    unint64_t v42 = v30;
  }

  uint64_t v35 = spaceman_alloc((void *)v8, 72, v28, a3, &v42, 0LL);
  if ((_DWORD)v35)
  {
    uint64_t v10 = v35;
    if (*(_WORD *)(v8 + 36) == 13) {
      uint64_t v36 = (const char *)(v8 + 3992);
    }
    else {
      uint64_t v36 = (const char *)(*(void *)(v8 + 384) + 208LL);
    }
    log_err( "%s:%d: %s oid 0x%llx flags 0x%llx 0x%x type 0x%x/0x%x error allocating new location %d\n",  "obj_modify",  5632,  v36,  a1[14],  a1[2],  *((_DWORD *)a1 + 8),  *((_DWORD *)a1 + 9),  *((_DWORD *)a1 + 10),  v35);
    pthread_mutex_lock((pthread_mutex_t *)v6);
    do
      unsigned int v41 = __ldxr(v22);
    while (__stxr(v41 & 0xFFFFFFFE, v22));
    obj_cache_unlock_write(v6);
  }

  else
  {
    if (a1[1]) {
      apfs_check_for_spillover();
    }
    pthread_mutex_lock((pthread_mutex_t *)v6);
    unint64_t v37 = a1[16];
    do
      unsigned int v38 = __ldxr(v22);
    while (__stxr(v38 & 0xFFFFFFFE, v22));
    obj_dirty_locked(a1, a3, v42);
    obj_cache_unlock_write(v6);
    uint64_t v39 = spaceman_free((const char *)v8, 0LL, v37, v28, a3);
    uint64_t v10 = v39;
    if ((_DWORD)v39)
    {
      if (*(_WORD *)(v8 + 36) == 13) {
        unint64_t v40 = (const char *)(v8 + 3992);
      }
      else {
        unint64_t v40 = (const char *)(*(void *)(v8 + 384) + 208LL);
      }
      log_err( "%s:%d: %s oid 0x%llx flags 0x%llx 0x%x type 0x%x/0x%x error freeing old space @ 0x%llx: %d\n",  "obj_modify",  5654,  v40,  a1[14],  a1[2],  *((_DWORD *)a1 + 8),  *((_DWORD *)a1 + 9),  *((_DWORD *)a1 + 10),  v37,  v39);
    }
  }

  return v10;
}

uint64_t obj_unlock(uint64_t a1, char a2)
{
  if ((a2 & 1) != 0)
  {
    if (pthread_rwlock_unlock((pthread_rwlock_t *)(a1 + 176))) {
      goto LABEL_7;
    }
  }

  else
  {
    if ((a2 & 2) == 0) {
      panic("invalid unlock flags: 0x%x\n");
    }
    if (pthread_rwlock_unlock((pthread_rwlock_t *)(a1 + 176))) {
LABEL_7:
    }
      panic("%s:%d: unlock == 0 failed %d\n");
  }

  return 0LL;
}

uint64_t obj_checkpoint_get( pthread_mutex_t *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, unint64_t a7, uint64_t a8, uint64_t *a9)
{
  unint64_t v51 = a7;
  uint64_t v52 = a5;
  uint64_t v49 = 0LL;
  if (!a4) {
    return 22LL;
  }
  if (*(_DWORD *)(a4 + 12) < 0x178u) {
    return 22LL;
  }
  unsigned int v10 = *(_DWORD *)(a4 + 8);
  if (!v10) {
    return 22LL;
  }
  unsigned int v12 = *(_DWORD *)(*(void *)(*(void *)a1[6].__opaque + 376LL) + 36LL);
  if (v10 % v12) {
    return 22LL;
  }
  LODWORD(v16) = a6;
  __int16 v19 = a2;
  uint64_t v50 = 0LL;
  int v20 = a2 | (*(unsigned __int16 *)(a4 + 2) << 16);
  pthread_mutex_lock(a1);
  int v47 = v20;
  uint64_t v21 = obj_alloc((uint64_t)a1, *(_DWORD *)(a4 + 12), *(_DWORD *)a4, *(_DWORD *)(a4 + 8), v20, 0LL, &v50);
  if ((_DWORD)v21)
  {
    uint64_t v13 = v21;
    goto LABEL_56;
  }

  unint64_t v22 = (v10 + v12 - 1) / v12;
  uint64_t v23 = v50;
  *(_DWORD *)(v50 + 36) = *(_DWORD *)a4 | v47 & 0xFFFF0000;
  *(_DWORD *)(v23 + 40) = *(_DWORD *)(a4 + 4);
  *(void *)(v23 + 112) = a3;
  *(void *)(v23 + 120) = a8;
  *(void *)(v23 + 16) |= v47 & 0xA000FC00 | ((unint64_t)(v19 & 0x200) << 34) | 0x2000000002LL;
  *(void *)(v23 + 128) = a5;
  uint64_t v24 = (unint64_t *)(v23 + 24);
  do
    unint64_t v25 = __ldxr(v24);
  while (__stxr(v25 + 1, v24));
  if ((~(_DWORD)v25 & 0xFFFFFFLL) == 0) {
    panic("Reference count overflowed for object %p!\n", (const void *)v23);
  }
  obj_cache_unlock_write((uint64_t)a1);
  if (v22 <= a7)
  {
    unint64_t v36 = obj_read(v23, 0LL, 0, 0LL);
    goto LABEL_30;
  }

  uint64_t v26 = *(void *)(v23 + 56);
  int v27 = v22;
  do
  {
    if (v51 >= v27) {
      unint64_t v28 = v27;
    }
    else {
      unint64_t v28 = v51;
    }
    uint64_t v29 = dev_read(*(void *)(*(void *)(*(void *)v23 + 392LL) + 384LL), v52);
    if ((_DWORD)v29)
    {
      uint64_t v13 = v29;
      goto LABEL_40;
    }

    v27 -= v28;
    if (!v27) {
      goto LABEL_27;
    }
    uint64_t v32 = *(void *)a1[6].__opaque;
    uint64_t v33 = *(void *)(v32 + 376);
    else {
      unint64_t v16 = (v16 + v28);
    }
    v26 += v28 * *(unsigned int *)(v33 + 36);
    uint64_t v34 = nx_checkpoint_data_block_address(v32, v16, &v52, &v51);
  }

  while (v27 >= 1 && (_DWORD)v34 == 0);
  uint64_t v13 = v34;
  if ((_DWORD)v34)
  {
LABEL_40:
    pthread_mutex_lock(a1);
    goto LABEL_53;
  }

unint64_t obj_checksum_verify(uint64_t a1, int8x16_t a2, int8x16_t a3)
{
  uint64_t v4 = *(void *)(*(void *)a1 + 392LL);
  uint64_t v5 = *(void **)(a1 + 56);
  int v6 = *(_DWORD *)(a1 + 48);
  unint64_t result = fletcher64_verify_cksum(v5, (uint32x4_t *)(v5 + 1), (v6 - 8), 0LL, a2, a3);
  if (result)
  {
    uint64_t v8 = *(void *)(a1 + 8);
    if (v8) {
      uint64_t v9 = (const char *)(v8 + 3992);
    }
    else {
      uint64_t v9 = (const char *)(*(void *)(*(void *)(*(void *)a1 + 392LL) + 384LL) + 208LL);
    }
    log_err( "%s:%d: %s failed: cksum 0x%016llx, oid 0x%llx, o_xid 0x%llx, o_type 0x%x, o_subtype 0x%x, size %d\n",  "obj_checksum_verify",  6786,  v9,  *v5,  v5[1],  v5[2],  *((_DWORD *)v5 + 6),  *((_DWORD *)v5 + 7),  v6);
    unsigned int v10 = (unint64_t *)(*(void *)(v4 + 376) + 992LL);
    do
      unint64_t v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
    if (*(_BYTE *)(v4 + 625))
    {
      unsigned int v12 = *(void (**)(uint64_t))(v4 + 616);
      if (v12) {
        v12(a1);
      }
    }

    return nx_corruption_detected_int(v4);
  }

  return result;
}

uint64_t obj_async_finish(uint64_t result, _BYTE *a2)
{
  uint64_t v2 = *(pthread_mutex_t ***)(result + 136);
  uint64_t v3 = v2[2];
  if (((unint64_t)v3 & 0x10000000000LL) != 0)
  {
    uint64_t v5 = *v2;
    int v6 = (pthread_cond_t *)&(*v2)[20].__opaque[8];
    while (((unint64_t)v3 & 0x8000000000LL) != 0)
    {
      v2[2] = (pthread_mutex_t *)((unint64_t)v3 | 4);
      *a2 = 1;
      unint64_t result = cv_wait_rw(v6, v5, 2LL, 0LL);
      uint64_t v3 = v2[2];
    }

    v2[2] = (pthread_mutex_t *)((unint64_t)v3 | 0x8000000000LL);
    obj_cache_unlock_write((uint64_t)v5);
    *a2 = 0;
    return dev_read_finish(*(void *)(*(void *)(*v2)[6].__opaque + 384LL));
  }

  return result;
}

uint64_t obj_async_wait(uint64_t a1)
{
  uint64_t v2 = *(void *)a1;
  char v7 = 0;
  pthread_mutex_lock((pthread_mutex_t *)v2);
  uint64_t v3 = *(void *)(v2 + 1344);
  if (v3)
  {
    while (1)
    {
      while (*(void *)(v3 + 136) != a1)
      {
        uint64_t v3 = *(void *)(v3 + 104);
        if (!v3) {
          goto LABEL_7;
        }
      }

      uint64_t v4 = *(void *)(a1 + 16);
      if ((v4 & 0x8000000000LL) == 0) {
        break;
      }
      *(void *)(a1 + 16) = v4 | 4;
      cv_wait_rw((pthread_cond_t *)(v2 + 1296), (pthread_mutex_t *)v2, 2LL, 0LL);
      uint64_t v3 = *(void *)(v2 + 1344);
      if (!v3) {
        goto LABEL_7;
      }
    }

    obj_async_finish(v3, &v7);
    if (v7) {
      obj_cache_unlock_write(v2);
    }
    return *(unsigned int *)(a1 + 52);
  }

  else
  {
LABEL_7:
    if ((*(_BYTE *)(a1 + 21) & 1) != 0) {
      uint64_t v5 = 2LL;
    }
    else {
      uint64_t v5 = *(unsigned int *)(a1 + 52);
    }
    obj_cache_unlock_write(v2);
  }

  return v5;
}

char *obj_retain(char *result)
{
  uint64_t v1 = (unint64_t *)(result + 24);
  do
    unint64_t v2 = __ldxr(v1);
  while (__stxr(v2 + 1, v1));
  if ((~(_DWORD)v2 & 0xFFFFFFLL) == 0) {
    panic("Reference count overflowed for object %p!\n", result);
  }
  return result;
}

uint64_t obj_retain_ephemeral_no_ref(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 16);
  if ((v1 & 0x80000000) == 0) {
    panic( "obj %p oid 0x%llx flags 0x%llx 0x%x type 0x%x/0x%x refs 0x%llx is not ephemeral\n",  (const void *)result,  *(void *)(result + 112),  v1,  *(_DWORD *)(result + 32),  *(_DWORD *)(result + 36),  *(_DWORD *)(result + 40),  *(void *)(result + 24));
  }
  unint64_t v2 = (unint64_t *)(result + 24);
  do
    unint64_t v3 = __ldxr(v2);
  while (__stxr(v3 + 1, v2));
  if ((~(_DWORD)v3 & 0xFFFFFFLL) == 0) {
    panic("Reference count overflowed for object %p!\n", (const void *)result);
  }
  return result;
}

uint64_t obj_cache_enqueue_deferred_update(uint64_t result, uint64_t a2)
{
  uint64_t v2 = result;
  unint64_t v3 = (unsigned int *)(a2 + 32);
  do
    unsigned int v4 = __ldxr(v3);
  while (__stxr(v4 | 0x10, v3));
  if ((v4 & 0x10) == 0)
  {
    uint64_t v5 = (unsigned int *)(result + 880);
    do
      unsigned int v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
    unsigned int v7 = v6;
    if (v6 >= 0x100)
    {
      do
      {
        do
          unsigned int v8 = __ldxr(v5);
        while (__stxr(v8 - 1, v5));
        int v9 = pthread_rwlock_unlock((pthread_rwlock_t *)(v2 + 128));
        if (v9) {
          panic( "%s:%d: unlock == 0 failed %d\n",  "/Library/Caches/com.apple.xbs/Sources/apfs_framework/nx/obj.c",  483,  v9);
        }
        int v10 = pthread_rwlock_wrlock((pthread_rwlock_t *)(v2 + 128));
        if (v10) {
          panic( "%s:%d: wrlock == 0 failed %d\n",  "/Library/Caches/com.apple.xbs/Sources/apfs_framework/nx/obj.c",  484,  v10);
        }
        obj_cache_perform_deferred_updates(v2);
        int v11 = pthread_rwlock_unlock((pthread_rwlock_t *)(v2 + 128));
        if (v11) {
          panic( "%s:%d: unlock == 0 failed %d\n",  "/Library/Caches/com.apple.xbs/Sources/apfs_framework/nx/obj.c",  490,  v11);
        }
        unint64_t result = pthread_rwlock_rdlock((pthread_rwlock_t *)(v2 + 128));
        if ((_DWORD)result) {
          panic( "%s:%d: rdlock == 0 failed %d\n",  "/Library/Caches/com.apple.xbs/Sources/apfs_framework/nx/obj.c",  493,  result);
        }
        do
          unsigned int v7 = __ldxr(v5);
        while (__stxr(v7 + 1, v5));
      }

      while (v7 > 0xFF);
    }

    *(void *)(*(void *)(v2 + 872) + 8LL * v7) = a2;
    unsigned int v12 = v7 << 24;
    do
      unsigned int v13 = __ldxr(v3);
    while (__stxr(v13 | v12, v3));
  }

  return result;
}

uint64_t obj_ephemeral_set_persistent(uint64_t a1, int a2)
{
  if ((*(_BYTE *)(a1 + 19) & 0x80) == 0) {
    return 22LL;
  }
  uint64_t v5 = *(pthread_mutex_t **)a1;
  pthread_mutex_lock(*(pthread_mutex_t **)a1);
  uint64_t v6 = *(void *)(a1 + 16);
  if ((a2 != 0) != ((v6 & 0x8000000) == 0))
  {
    obj_cache_ephemeral_adjust((uint64_t)v5, v6, *(_DWORD *)(a1 + 48), -1);
    uint64_t v8 = *(void *)(a1 + 88);
    int v9 = *(void **)(a1 + 96);
    uint64_t v7 = a1 + 88;
    if (a2)
    {
      if (v8)
      {
        *(void *)(v8 + 96) = v9;
        int v9 = *(void **)(a1 + 96);
      }

      else
      {
        *(void *)&v5[11].__opaque[48] = v9;
      }

      *int v9 = v8;
      uint64_t v10 = *(void *)(a1 + 16);
      *(void *)(a1 + 16) = v10 & 0xFFFFFFFFF7FFFFFFLL;
      *(_DWORD *)(a1 + 36) &= ~0x8000000u;
      if ((v10 & 0x80020000000LL) == 0) {
        *(_DWORD *)(*(void *)(a1 + 56) + 24LL) &= ~0x8000000u;
      }
      int v11 = *(void **)&v5[11].__opaque[32];
      *(void *)(a1 + 88) = 0LL;
      *(void *)(a1 + 96) = v11;
      void *v11 = a1;
      *(void *)&v5[11].__opaque[32] = v7;
      opaque = (unint64_t *)v5[19].__opaque;
      uint64_t v13 = *(unsigned int *)(a1 + 48);
      do
        unint64_t v14 = __ldxr(opaque);
      while (__stxr(v14 - v13, opaque));
      unsigned int v15 = (unint64_t *)&v5[19].__opaque[16];
      do
        unint64_t v16 = __ldxr(v15);
      while (__stxr(v16 + v13, v15));
      int v17 = (unint64_t *)&v5[19].__opaque[32];
      do
        unint64_t v18 = __ldxr(v17);
      while (__stxr(v18 + 1, v17));
      uint64_t v19 = omm;
      int v20 = (unint64_t *)(omm + 416);
      uint64_t v21 = *(unsigned int *)(a1 + 48);
      do
        unint64_t v22 = __ldxr(v20);
      while (__stxr(v22 - v21, v20));
      uint64_t v23 = (unint64_t *)(v19 + 432);
      do
        unint64_t v24 = __ldxr(v23);
      while (__stxr(v24 + v21, v23));
      unint64_t v25 = (unint64_t *)(v19 + 448);
      do
        unint64_t v26 = __ldxr(v25);
      while (__stxr(v26 + 1, v25));
      if (*(void *)(a1 + 56))
      {
        int v27 = (unint64_t *)&v5[18].__opaque[16];
        uint64_t v28 = *(unsigned int *)(a1 + 48);
        do
          unint64_t v29 = __ldxr(v27);
        while (__stxr(v29 + v28, v27));
        int8x16_t v30 = (unint64_t *)&v5[18].__opaque[24];
        do
          unint64_t v31 = __ldxr(v30);
        while (__stxr(v31 + v28, v30));
        uint64_t v32 = (unint64_t *)&v5[18].__opaque[40];
      }

      else
      {
        uint64_t v32 = (unint64_t *)&v5[19];
      }

      do
        unint64_t v33 = __ldxr(v32);
      while (__stxr(v33 + 1, v32));
      if (*(void *)(a1 + 56))
      {
        uint64_t v34 = (unint64_t *)(v19 + 368);
        uint64_t v35 = *(unsigned int *)(a1 + 48);
        do
          unint64_t v36 = __ldxr(v34);
        while (__stxr(v36 + v35, v34));
        unint64_t v37 = (unint64_t *)(v19 + 376);
        do
          unint64_t v38 = __ldxr(v37);
        while (__stxr(v38 + v35, v37));
        uint64_t v39 = (unint64_t *)(v19 + 392);
      }

      else
      {
        uint64_t v39 = (unint64_t *)(v19 + 408);
      }
    }

    else
    {
      if (v8)
      {
        *(void *)(v8 + 96) = v9;
        int v9 = *(void **)(a1 + 96);
      }

      else
      {
        *(void *)&v5[11].__opaque[32] = v9;
      }

      *int v9 = v8;
      uint64_t v40 = *(void *)(a1 + 16);
      *(void *)(a1 + 16) = v40 | 0x8000000;
      *(_DWORD *)(a1 + 36) |= 0x8000000u;
      if ((v40 & 0x80020000000LL) == 0) {
        *(_DWORD *)(*(void *)(a1 + 56) + 24LL) |= 0x8000000u;
      }
      uint64_t v41 = *(void **)&v5[11].__opaque[48];
      *(void *)(a1 + 88) = 0LL;
      *(void *)(a1 + 96) = v41;
      void *v41 = a1;
      *(void *)&v5[11].__opaque[48] = v7;
      unint64_t v42 = (unint64_t *)&v5[18].__opaque[16];
      uint64_t v43 = *(unsigned int *)(a1 + 48);
      do
        unint64_t v44 = __ldxr(v42);
      while (__stxr(v44 - v43, v42));
      uint64_t v45 = (unint64_t *)&v5[18].__opaque[32];
      do
        unint64_t v46 = __ldxr(v45);
      while (__stxr(v46 + v43, v45));
      int v47 = (unint64_t *)&v5[18].__opaque[48];
      do
        unint64_t v48 = __ldxr(v47);
      while (__stxr(v48 + 1, v47));
      uint64_t v49 = omm;
      uint64_t v50 = (unint64_t *)(omm + 368);
      uint64_t v51 = *(unsigned int *)(a1 + 48);
      do
        unint64_t v52 = __ldxr(v50);
      while (__stxr(v52 - v51, v50));
      __int128 v53 = (unint64_t *)(v49 + 384);
      do
        unint64_t v54 = __ldxr(v53);
      while (__stxr(v54 + v51, v53));
      unint64_t v55 = (unint64_t *)(v49 + 400);
      do
        unint64_t v56 = __ldxr(v55);
      while (__stxr(v56 + 1, v55));
      if (*(void *)(a1 + 56))
      {
        uint64_t v57 = (unint64_t *)v5[19].__opaque;
        uint64_t v58 = *(unsigned int *)(a1 + 48);
        do
          unint64_t v59 = __ldxr(v57);
        while (__stxr(v59 + v58, v57));
        uint64_t v60 = (unint64_t *)&v5[19].__opaque[8];
        do
          unint64_t v61 = __ldxr(v60);
        while (__stxr(v61 + v58, v60));
        unint64_t v62 = (unint64_t *)&v5[19].__opaque[24];
      }

      else
      {
        unint64_t v62 = (unint64_t *)&v5[19].__opaque[40];
      }

      do
        unint64_t v63 = __ldxr(v62);
      while (__stxr(v63 + 1, v62));
      if (*(void *)(a1 + 56))
      {
        int v64 = (unint64_t *)(v49 + 416);
        uint64_t v65 = *(unsigned int *)(a1 + 48);
        do
          unint64_t v66 = __ldxr(v64);
        while (__stxr(v66 + v65, v64));
        char v67 = (unint64_t *)(v49 + 424);
        do
          unint64_t v68 = __ldxr(v67);
        while (__stxr(v68 + v65, v67));
        uint64_t v39 = (unint64_t *)(v49 + 440);
      }

      else
      {
        uint64_t v39 = (unint64_t *)(v49 + 456);
      }
    }

    do
      unint64_t v69 = __ldxr(v39);
    while (__stxr(v69 + 1, v39));
    obj_cache_ephemeral_adjust((uint64_t)v5, *(void *)(a1 + 16), *(_DWORD *)(a1 + 48), 1);
  }

  obj_cache_unlock_write((uint64_t)v5);
  return 0LL;
}

uint64_t obj_set_skip_checkpoint_traverse(uint64_t a1, int a2)
{
  BOOL v3 = a2 != 0;
  unsigned int v4 = *(pthread_mutex_t **)a1;
  pthread_mutex_lock(*(pthread_mutex_t **)a1);
  *(void *)(a1 + 16) = *(void *)(a1 + 16) & 0xFFFFFFBFFFFFFFFFLL | ((unint64_t)v3 << 38);
  obj_cache_unlock_write((uint64_t)v4);
  return 0LL;
}

void *obj_dirty_locked(void *result, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = result;
  uint64_t v6 = *result;
  uint64_t v7 = result[2];
  if ((v7 & 0x10) != 0) {
    panic("deleted object @ %p can not be dirtied!! (flags: 0x%llx)\n", result, v7);
  }
  if ((v7 & 0x80000000000LL) != 0) {
    panic("ciphertext object @ %p can not be dirtied!! (flags: 0x%llx)\n", result, v7);
  }
  if ((v7 & 0x8000000) == 0)
  {
    unint64_t result = (void *)xid_is_current_tx(*(void *)(v6 + 392), a2);
    if (!(_DWORD)result) {
      panic( "oid 0x%llx flags 0x%llx 0x%x type 0x%x/0x%x bad dirty xid: 0x%llx\n",  v5[14],  v5[2],  *((_DWORD *)v5 + 8),  *((_DWORD *)v5 + 9),  *((_DWORD *)v5 + 10),  a2);
    }
  }

  uint64_t v8 = v5[8];
  if (v8 && v8 == v5[7]) {
    panic( "oid 0x%llx flags 0x%llx 0x%x type 0x%x/0x%x object not prepared before dirtying\n",  v5[14],  v5[2],  *((_DWORD *)v5 + 8),  *((_DWORD *)v5 + 9),  *((_DWORD *)v5 + 10));
  }
  uint64_t v9 = v5[2];
  if ((v9 & 0x80000000) != 0)
  {
    v5[18] = a2;
  }

  else
  {
    uint64_t v10 = (unsigned int *)(v5 + 4);
    do
      unsigned int v11 = __ldxr(v10);
    while (__stxr(v11 | 1, v10));
    if ((v11 & 1) != 0)
    {
      if (a3 && v5[19] != a3) {
        panic("new address mismatch on redirty 0x%llx 0x%llx\n");
      }
    }

    else
    {
      unsigned int v12 = *((_DWORD *)v5 + 9);
      if ((v9 & 0xC00000000LL) == 0 && !(v12 >> 30))
      {
        uint64_t v13 = v5[15];
        if (v13 != a2 && v5[18] != a2) {
          panic( "virtual object not prepared before dirtying: oid 0x%llx flags 0x%llx 0x%x type 0x%x/0x%x xid 0x%llx 0x%llx 0x%llx\n",  v5[14],  v9,  *((_DWORD *)v5 + 8),  v12,  *((_DWORD *)v5 + 10),  v13,  v5[18],  a2);
        }
      }

      v5[21] = 0LL;
      if (v12 >> 30 == 1)
      {
        uint64_t v14 = v5[2];
        if ((v14 & 0x40) == 0)
        {
          uint64_t v15 = v5[15];
          if (v15 != a2)
          {
            uint64_t v16 = v5[18];
            if (v15 != v16 && !(v5[19] | a3)) {
              panic( "physical object not prepared before dirtying: oid 0x%llx flags 0x%llx 0x%x type 0x%x/0x%x xid 0x%llx 0x% llx 0x%llx naddr 0x%llx 0x%llx\n",  v5[14],  v14,  *((_DWORD *)v5 + 8),  v12,  *((_DWORD *)v5 + 10),  v15,  v16,  a2,  0LL,  0LL);
            }
          }
        }
      }

      uint64_t v17 = v5[19];
      if (v17)
      {
        if (v17 != a3)
        {
          if (a3)
          {
            int v18 = *((_DWORD *)v5 + 9);
            if ((v18 & 0xC0000000) == 0x40000000) {
              panic( "physical object new address mismatch: oid 0x%llx flags 0x%llx 0x%x type 0x%x/0x%x xid 0x%llx 0x%llx 0x%l lx naddr 0x%llx 0x%llx\n",  v5[14],  v5[2],  *((_DWORD *)v5 + 8),  v18,  *((_DWORD *)v5 + 10),  v5[15],  v5[18],  a2,  v5[19],  a3);
            }
          }
        }
      }

      else
      {
        v5[19] = a3;
        if (a3 && (v5[2] & 0x40000000) != 0 && v5[14] != a3)
        {
          uint64_t v19 = v5[9];
          if (v19) {
            *(void *)(v19 + 80) = v5[10];
          }
          *(void *)v5[10] = v19;
          v5[14] = a3;
          int v20 = (uint64_t *)(*(void *)(v6 + 704) + 8LL * (*(_DWORD *)(v6 + 700) & a3));
          uint64_t v21 = *v20;
          v5[9] = *v20;
          if (v21) {
            *(void *)(v21 + 80) = v5 + 9;
          }
          *int v20 = (uint64_t)v5;
          v5[10] = v20;
        }
      }

      v5[18] = a2;
      int v22 = pthread_rwlock_wrlock((pthread_rwlock_t *)(v6 + 128));
      if (v22) {
        panic( "%s:%d: wrlock == 0 failed %d\n",  "/Library/Caches/com.apple.xbs/Sources/apfs_framework/nx/obj.c",  5760,  v22);
      }
      uint64_t v23 = v5 + 11;
      if (v5[11] != 3735928559LL) {
        obj_free_list_remove(v5);
      }
      do
        unsigned int v24 = __ldxr(v10);
      while (__stxr(v24 & 0xFFFFEF, v10));
      if ((v24 & 0x10) != 0) {
        *(void *)(*(void *)(v6 + 872) + 8LL * HIBYTE(v24)) = 0LL;
      }
      if (*v23 != 3735928559LL) {
        panic( "obj %p oid 0x%llx flags 0x%llx 0x%x type 0x%x/0x%x dirty object on the free list?!\n",  v5,  v5[14],  v5[2],  *((_DWORD *)v5 + 8),  *((_DWORD *)v5 + 9),  *((_DWORD *)v5 + 10));
      }
      uint64_t v25 = v5[2];
      v5[11] = 0LL;
      if ((v25 & 0x40000000) != 0)
      {
        int v27 = *(void **)(v6 + 824);
        v5[12] = v27;
        *int v27 = v5;
        *(void *)(v6 + 824) = v23;
        ++*(_DWORD *)(v6 + 888);
      }

      else
      {
        unint64_t v26 = *(void **)(v6 + 808);
        v5[12] = v26;
        void *v26 = v5;
        *(void *)(v6 + 808) = v23;
        ++*(_DWORD *)(v6 + 884);
      }

      unint64_t result = (void *)pthread_rwlock_unlock((pthread_rwlock_t *)(v6 + 128));
      if ((_DWORD)result) {
        panic("%s:%d: unlock == 0 failed %d\n");
      }
    }
  }

  return result;
}

void obj_dirty(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((*(_BYTE *)(a1 + 19) & 0x80) != 0)
  {
    *(void *)(a1 + 144) = a2;
  }

  else
  {
    uint64_t v6 = *(pthread_mutex_t **)a1;
    uint64_t v7 = (unsigned int *)(a1 + 32);
    do
      unsigned int v8 = __ldxr(v7);
    while (__stxr(v8, v7));
    if ((v8 & 1) == 0)
    {
      pthread_mutex_lock(v6);
      obj_dirty_locked((void *)a1, a2, a3);
      obj_cache_unlock_write((uint64_t)v6);
    }
  }

uint64_t obj_exchange_phys(uint64_t a1, uint64_t a2)
{
  unsigned int v4 = *(pthread_mutex_t **)a1;
  pthread_mutex_lock(*(pthread_mutex_t **)a1);
  uint64_t v5 = *(void *)(a1 + 16);
  if ((v5 & 0x20000000000LL) != 0)
  {
    do
    {
      *(void *)(a1 + 16) = v5 | 0x80;
      uint64_t v7 = cv_wait_rw((pthread_cond_t *)&v4[20].__opaque[8], v4, 2LL, 0LL);
      uint64_t v5 = *(void *)(a1 + 16);
    }

    while ((v5 & 0x20000000000LL) != 0);
    uint64_t v6 = v7;
  }

  else
  {
    uint64_t v6 = 0LL;
  }

  uint64_t v8 = *(void *)(a1 + 56);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a2 + 56) = v8;
  obj_cache_unlock_write((uint64_t)v4);
  return v6;
}

uint64_t obj_checkpoint_start(unsigned int *a1)
{
  if ((*((_BYTE *)a1 + 19) & 0x80) == 0) {
    return nx_corruption_detected_int(*(void *)(*(void *)a1 + 392LL));
  }
  uint64_t v2 = a1 + 8;
  do
    unsigned int v3 = __ldxr(v2);
  while (__stxr(v3 | 4, v2));
  return (4 * v3) & 0x10;
}

uint64_t obj_checkpoint_done(unsigned int *a1)
{
  if ((*((_BYTE *)a1 + 19) & 0x80) == 0) {
    return nx_corruption_detected_int(*(void *)(*(void *)a1 + 392LL));
  }
  uint64_t v2 = a1 + 8;
  do
    unsigned int v3 = __ldxr(v2);
  while (__stxr(v3 & 0xFFFFFFFB, v2));
  if ((v3 & 4) != 0) {
    return 0LL;
  }
  else {
    return 22LL;
  }
}

uint64_t obj_checkpoint_known(uint64_t a1)
{
  uint64_t v1 = *(pthread_mutex_t **)a1;
  if ((*(_BYTE *)(a1 + 19) & 0x80) == 0) {
    return nx_corruption_detected_int(*(void *)v1[6].__opaque);
  }
  pthread_mutex_lock(*(pthread_mutex_t **)a1);
  uint64_t v4 = *(void *)(a1 + 16);
  if ((v4 & 0x2000000000LL) != 0)
  {
    *(void *)(a1 + 16) = v4 & 0xFFFFFFDFFFFFFFFFLL;
    obj_cache_unlock_write((uint64_t)v1);
    return 0LL;
  }

  else
  {
    obj_cache_unlock_write((uint64_t)v1);
    return 22LL;
  }

uint64_t obj_checkpoint_traverse(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned int v4 = *(unsigned __int16 *)(a3 + 36);
  if (v4 > 0xA)
  {
    if (v4 != 11)
    {
      if (v4 == 13) {
        return apfs_checkpoint_traverse(a1, a2, a3, a4);
      }
      return 22LL;
    }

    return omap_checkpoint_traverse(a1, a2, a3, a4);
  }

  else
  {
    if (v4 != 2)
    {
      if (v4 == 3) {
        return btree_node_checkpoint_traverse(a1, a2, 0LL, a3, a4);
      }
      return 22LL;
    }

    return btree_checkpoint_traverse(a1, a2, a3, a4);
  }

void obj_checkpoint_check_for_unknown(uint64_t a1)
{
  for (uint64_t i = *(void *)(a1 + 736); i; uint64_t i = *(void *)(i + 88))
  {
    if ((*(_BYTE *)(i + 20) & 0x20) != 0) {
      log_warn( "%s:%d: %s Unknown object loaded from checkpoint: oid 0x%llx type 0x%x/0x%x\n",  "obj_checkpoint_check_for_unknown",  5950,  (const char *)(*(void *)(*(void *)(a1 + 392) + 384LL) + 208LL),  *(void *)(i + 112),  *(_DWORD *)(i + 36),  *(_DWORD *)(i + 40));
    }
  }

  obj_cache_unlock_write(a1);
}

unint64_t obj_checksum_set(uint64_t a1, int8x16_t a2, int8x16_t a3)
{
  uint64_t v4 = *(void *)(*(void *)a1 + 392LL);
  uint64_t v5 = *(void *)(a1 + 56);
  int v6 = *(_DWORD *)(a1 + 48);
  uint64_t v7 = (unint64_t *)(*(void *)(v4 + 376) + 984LL);
  do
    unint64_t v8 = __ldxr(v7);
  while (__stxr(v8 + 1, v7));
  return fletcher64_set_cksum((unint64_t *)v5, (uint32x4_t *)(v5 + 8), (v6 - 8), 0LL, a2, a3);
}

unint64_t obj_checksum_set_phys(uint64_t a1, uint64_t a2, int a3, int8x16_t a4, int8x16_t a5)
{
  uint64_t v5 = (unint64_t *)(*(void *)(a1 + 376) + 984LL);
  do
    unint64_t v6 = __ldxr(v5);
  while (__stxr(v6 + 1, v5));
  return fletcher64_set_cksum((unint64_t *)a2, (uint32x4_t *)(a2 + 8), (a3 - 8), 0LL, a4, a5);
}

uint64_t obj_mem_mgr_register(int64x2_t *a1, int a2)
{
  uint64_t v4 = a1[80].i64[1];
  a1[80].i64[1] = v4 | 1;
  if (a2)
  {
    a1[80].i64[1] = v4 | 3;
    uint64_t v5 = omm;
    unint64_t v6 = (int64x2_t **)(omm + 80);
    uint64_t v7 = *(void *)(omm + 80);
    a1[58].i64[0] = v7;
    if (v7) {
      *(void *)(v7 + 936) = a1 + 58;
    }
    pthread_mutex_t *v6 = a1;
    a1[58].i64[1] = (uint64_t)v6;
  }

  else
  {
    uint64_t v5 = omm;
    uint64_t v8 = omm + 72;
    uint64_t v9 = *(void *)(omm + 72);
    a1[58].i64[0] = v9;
    if (v9) {
      *(void *)(v9 + 936) = a1 + 58;
    }
    *(void *)(v5 + 72) = a1;
    a1[58].i64[1] = v8;
    ++*(void *)(v5 + 104);
    *(int64x2_t *)(v5 + 136) = vaddq_s64(*(int64x2_t *)(v5 + 136), a1[59]);
    *(void *)(v5 + 152) += a1[60].i64[0];
  }

  return pthread_mutex_unlock((pthread_mutex_t *)(v5 + 8));
}

void report_obj_alloc(uint64_t a1, const char *a2)
{
  uint64_t v21 = *MEMORY[0x1895F89C0];
  __int128 v19 = 0u;
  __int128 v20 = 0u;
  __int128 v17 = 0u;
  __int128 v18 = 0u;
  __int128 v15 = 0u;
  __int128 v16 = 0u;
  *(_OWORD *)uint64_t v13 = 0u;
  __int128 v14 = 0u;
  int v4 = backtrace(v13, 16);
  uint64_t v5 = backtrace_symbols(v13, v4);
  unint64_t v6 = (FILE **)MEMORY[0x1895F89D0];
  fprintf( (FILE *)*MEMORY[0x1895F89D0],  "Allocated %s object with OID %lld flags %llx type %x %d from\n",  a2,  *(void *)(a1 + 112),  *(void *)(a1 + 16),  *(_DWORD *)(a1 + 36),  *(_DWORD *)(a1 + 40));
  if (v4 >= 1)
  {
    uint64_t v7 = v4;
    uint64_t v8 = v13;
    uint64_t v9 = (const char **)v5;
    do
    {
      unsigned int v11 = *v8++;
      uint64_t v10 = v11;
      unsigned int v12 = *v9++;
      fprintf(*v6, "\t%16p %s\n", v10, v12);
      --v7;
    }

    while (v7);
  }

  free(v5);
}

uint64_t *obj_cache_perform_deferred_updates(uint64_t a1)
{
  v20.int tv_sec = 0LL;
  v20.uint64_t tv_nsec = 0LL;
  unint64_t result = (uint64_t *)clock_gettime(_CLOCK_UPTIME_RAW_APPROX, &v20);
  unint64_t v3 = *(unsigned int *)(a1 + 880);
  if ((_DWORD)v3)
  {
    unint64_t v4 = 0LL;
    int tv_sec = v20.tv_sec;
    do
    {
      unint64_t result = *(uint64_t **)(*(void *)(a1 + 872) + 8 * v4);
      if (result)
      {
        unint64_t v6 = (unsigned int *)(result + 4);
        do
          unsigned int v7 = __ldxr(v6);
        while (__stxr(v7, v6));
        uint64_t v8 = (unint64_t *)(result + 3);
        do
          unint64_t v9 = __ldxr(v8);
        while (__stxr(v9, v8));
        unint64_t v10 = v9 & 0xFFFFFF;
        unint64_t v11 = (v9 >> 24) & 0xFFFFF;
        unint64_t v12 = -(v9 >> 44) & 0xFFFFF;
        uint64_t v13 = result + 11;
        uint64_t v14 = result[11];
        if (v10 <= v11 && v12 == 0)
        {
          if (v14 == 3735928559LL && *((_WORD *)result + 18) != 13)
          {
            *((_DWORD *)result + 40) = tv_sec;
            uint64_t v16 = result[2];
            result[11] = 0LL;
            if ((v16 & 0x40000000) != 0)
            {
              __int128 v18 = *(void **)(a1 + 792);
              result[12] = (uint64_t)v18;
              *__int128 v18 = result;
              *(void *)(a1 + 792) = v13;
              ++*(_DWORD *)(a1 + 896);
            }

            else
            {
              __int128 v17 = *(void **)(a1 + 776);
              result[12] = (uint64_t)v17;
              void *v17 = result;
              *(void *)(a1 + 776) = v13;
              ++*(_DWORD *)(a1 + 892);
            }
          }
        }

        else if (v14 != 3735928559LL)
        {
          unint64_t result = obj_free_list_remove(result);
        }

        do
          unsigned int v19 = __ldxr(v6);
        while (__stlxr(v19 & 0xFFFFEF, v6));
        unint64_t v3 = *(unsigned int *)(a1 + 880);
      }

      ++v4;
    }

    while (v4 < v3);
  }

  *(_DWORD *)(a1 + 880) = 0;
  return result;
}

uint64_t *obj_free_list_remove(uint64_t *result)
{
  uint64_t v1 = result[11];
  if (v1 != 3735928559LL)
  {
    uint64_t v2 = *result;
    unint64_t v3 = (void *)result[12];
    if ((*((_BYTE *)result + 19) & 0x40) != 0)
    {
      if (v1)
      {
        *(void *)(v1 + 96) = v3;
        unint64_t v3 = (void *)result[12];
      }

      else
      {
        *(void *)(v2 + 792) = v3;
      }

      *unint64_t v3 = v1;
      --*(_DWORD *)(v2 + 896);
    }

    else
    {
      if (v1)
      {
        *(void *)(v1 + 96) = v3;
        unint64_t v3 = (void *)result[12];
      }

      else
      {
        *(void *)(v2 + 776) = v3;
      }

      *unint64_t v3 = v1;
      --*(_DWORD *)(v2 + 892);
    }

    result[11] = 3735928559LL;
  }

  return result;
}

void obj_type_free(void *a1, __int16 a2, int a3)
{
  if (a3 == 376)
  {
LABEL_2:
    uint64_t v3 = 376LL;
LABEL_3:
    _apfs_free(a1, v3);
  }

  else
  {
    switch(a2)
    {
      case 1:
        uint64_t v3 = 1928LL;
        goto LABEL_3;
      case 2:
      case 3:
      case 6:
      case 7:
      case 8:
        _apfs_zfree(a1, 4u);
        break;
      case 5:
        uint64_t v3 = 1608LL;
        goto LABEL_3;
      case 11:
        uint64_t v3 = 496LL;
        goto LABEL_3;
      case 13:
        uint64_t v3 = 4024LL;
        goto LABEL_3;
      case 17:
      case 30:
        uint64_t v3 = 400LL;
        goto LABEL_3;
      case 18:
        uint64_t v3 = 384LL;
        goto LABEL_3;
      case 25:
        uint64_t v3 = 416LL;
        goto LABEL_3;
      case 27:
      case 29:
        uint64_t v3 = 392LL;
        goto LABEL_3;
      default:
        goto LABEL_2;
    }
  }

uint64_t obj_destroy_for_obj(uint64_t a1)
{
  uint64_t result = 0LL;
  uint64_t v3 = 0LL;
  if ((*(_BYTE *)(a1 + 16) & 2) == 0)
  {
    else {
      return *(void *)(v3 + 16);
    }
  }

  return result;
}

void obj_destroy_complete(uint64_t a1, char a2)
{
  if ((a2 & 1) == 0)
  {
    uint64_t v3 = (uint64_t (*)(uint64_t))obj_destroy_for_obj(a1);
    if (v3)
    {
      int v4 = v3(a1);
      if (v4)
      {
        uint64_t v5 = *(void *)(a1 + 8);
        if (v5) {
          unint64_t v6 = (const char *)(v5 + 3992);
        }
        else {
          unint64_t v6 = (const char *)(*(void *)(*(void *)(*(void *)a1 + 392LL) + 384LL) + 208LL);
        }
        log_err( "%s:%d: %s oid 0x%llx flags 0x%llx type 0x%x/0x%x error destroying: %d\n",  "obj_destroy_complete",  2871,  v6,  *(void *)(a1 + 112),  *(void *)(a1 + 16),  *(_DWORD *)(a1 + 36),  *(_DWORD *)(a1 + 40),  v4);
      }
    }
  }

  if (*(void *)(a1 + 88) != 3735928559LL) {
    panic( "object to be freed is on a list, o %p oid 0x%llx flags 0x%llx 0x%x type 0x%x/0x%x refs 0x%llx list %p/%p\n",  (const void *)a1,  *(void *)(a1 + 112),  *(void *)(a1 + 16),  *(_DWORD *)(a1 + 32),  *(_DWORD *)(a1 + 36),  *(_DWORD *)(a1 + 40),  *(void *)(a1 + 24),  *(const void **)(a1 + 88),  *(const void **)(a1 + 96));
  }
  free_rwlock((pthread_rwlock_t *)(a1 + 176));
  fs_obj_zfree_oc(*(void **)(a1 + 56), *(unsigned int *)(a1 + 48), *(void *)(a1 + 16), *(void *)a1);
  obj_type_free((void *)a1, *(_DWORD *)(a1 + 36), *(_DWORD *)(a1 + 44));
}

void obj_get_callback(uint64_t a1, int8x16_t a2, int8x16_t a3)
{
  int v24 = 16000;
  int v4 = *(_DWORD *)(a1 + 120);
  uint64_t v5 = *(pthread_cond_t ***)(a1 + 136);
  if (v4) {
    unint64_t v6 = (_DWORD *)(a1 + 120);
  }
  else {
    unint64_t v6 = 0LL;
  }
  if (*(_BYTE *)(a1 + 148)) {
    uint64_t v7 = *(void *)(a1 + 152);
  }
  else {
    uint64_t v7 = 0LL;
  }
  uint64_t v8 = (pthread_mutex_t *)*v5;
  int v9 = *(_DWORD *)(a1 + 96);
  int v10 = *(_DWORD *)(a1 + 144);
  unsigned int v11 = v10 & 0xFFFF0000;
  if (v4)
  {
    v11 |= v4;
    int v12 = *(_DWORD *)(a1 + 124);
    if (v9)
    {
LABEL_9:
      pthread_mutex_lock((pthread_mutex_t *)*v5);
      *((_DWORD *)v5 + 13) = v9;
      goto LABEL_10;
    }
  }

  else
  {
    int v12 = 0;
    if (v9) {
      goto LABEL_9;
    }
  }

  if (((unint64_t)v5[2] & 0x80020000000LL) != 0)
  {
    pthread_mutex_lock((pthread_mutex_t *)*v5);
    *((_DWORD *)v5 + 13) = 0;
LABEL_15:
    if (!obj_init(v5, v10, (uint64_t)v5[14], v6, v7, (unint64_t)v5[15], v11, v12))
    {
      char v23 = 2;
      int finish = obj_get_finish((uint64_t)v5, v10, (unint64_t)v5[15], 0, &v24, &v23);
      *((_DWORD *)v5 + 13) = finish;
      if (!finish) {
        goto LABEL_18;
      }
    }

    goto LABEL_17;
  }

  int v22 = obj_checksum_verify(*(void *)(a1 + 136), a2, a3);
  pthread_mutex_lock(v8);
  *((_DWORD *)v5 + 13) = v22;
  if (!v22) {
    goto LABEL_15;
  }
LABEL_10:
  unint64_t v13 = (unint64_t)v5[2];
  v5[2] = (pthread_cond_t *)(v13 & 0xFFFFFE7FFFFFFFFBLL);
  if ((v13 & 4) != 0) {
    cv_wakeup(*v5 + 27);
  }
LABEL_17:
  v5[2] = (pthread_cond_t *)((unint64_t)v5[2] & 0xFFFFFFEFFFFFFFF7LL | 8);
LABEL_18:
  uint64_t v15 = *(void *)(a1 + 104);
  uint64_t v16 = *(void **)(a1 + 112);
  if (v15)
  {
    *(void *)(v15 + 112) = v16;
    uint64_t v16 = *(void **)(a1 + 112);
  }

  else
  {
    *(void *)v8[21].__opaque = v16;
  }

  *uint64_t v16 = v15;
  obj_cache_unlock_write((uint64_t)v8);
  obj_release(v5);
  if (*(_BYTE *)(a1 + 148)) {
    _apfs_free(*(void **)(a1 + 152), *(unsigned __int16 *)(v7 + 2));
  }
  _apfs_free((void *)a1, 160LL);
  __int128 v17 = (unsigned int *)&v8[14].__opaque[12];
  do
  {
    unsigned int v18 = __ldxr(v17);
    unsigned int v19 = v18 - 1;
  }

  while (__stxr(v19, v17));
  if (!v19)
  {
    timespec v20 = (unsigned int *)&v8[14].__opaque[8];
    do
      unsigned int v21 = __ldxr(v20);
    while (__stxr(v21, v20));
    if (v21)
    {
      pthread_mutex_lock(v8);
      cv_wakeup((pthread_cond_t *)&v8[20].__opaque[8]);
      obj_cache_unlock_write((uint64_t)v8);
    }
  }

unint64_t *obj_cache_stats_update_zalloc(unint64_t *result, int a2, uint64_t a3, uint64_t a4)
{
  unsigned int v5 = a2 & 0xC8000000;
  if (a2 < 0 != v4)
  {
    if (v5 == 0x80000000)
    {
      if (a3)
      {
        __int128 v17 = result + 29;
        do
          unint64_t v18 = __ldxr(v17);
        while (__stxr(v18 + a4, v17));
        unsigned int v19 = result + 30;
        do
          unint64_t v20 = __ldxr(v19);
        while (__stxr(v20 + a4, v19));
        unsigned int v21 = result + 32;
      }

      else
      {
        unsigned int v21 = result + 34;
      }

      do
        unint64_t v24 = __ldxr(v21);
      while (__stxr(v24 + 1, v21));
    }

    else
    {
      if (v5 != -2013265920) {
        goto LABEL_28;
      }
      if (a3)
      {
        unint64_t v6 = result + 35;
        do
          unint64_t v7 = __ldxr(v6);
        while (__stxr(v7 + a4, v6));
        uint64_t v8 = result + 36;
        do
          unint64_t v9 = __ldxr(v8);
        while (__stxr(v9 + a4, v8));
        int v10 = result + 38;
      }

      else
      {
        int v10 = result + 40;
      }

      do
        unint64_t v23 = __ldxr(v10);
      while (__stxr(v23 + 1, v10));
    }
  }

  else
  {
    if (v5 != 0x40000000 && v5 != 0) {
LABEL_28:
    }
      panic("unexpected storagetype: 0x%x\n", a2 & 0xC8000000);
    if (a3)
    {
      int v12 = result + 23;
      do
        unint64_t v13 = __ldxr(v12);
      while (__stxr(v13 + a4, v12));
      uint64_t v14 = result + 24;
      do
        unint64_t v15 = __ldxr(v14);
      while (__stxr(v15 + a4, v14));
      uint64_t v16 = result + 26;
    }

    else
    {
      uint64_t v16 = result + 28;
    }

    do
      unint64_t v22 = __ldxr(v16);
    while (__stxr(v22 + 1, v16));
  }

  return result;
}

uint64_t apfs_update_dev_name(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = *(void *)(result + 496);
    uint64_t v2 = (char *)(result + 3992);
    if (v1) {
      return snprintf(v2, 0x20uLL, "%ss%d:%lld");
    }
    else {
      return snprintf(v2, 0x20uLL, "%ss%d");
    }
  }

  return result;
}

uint64_t apfs_init_phys(uint64_t a1)
{
  *(_DWORD *)(a1 + 32) = 1112756289;
  *(void *)(a1 + 48) = 0LL;
  *(void *)(a1 + 56) = 0LL;
  *(void *)(a1 + 40) = 0LL;
  *(void *)(a1 + 116) = 0x4000000200000002LL;
  *(_DWORD *)(a1 + 124) = 1073741826;
  *(int32x2_t *)(a1 + 1040) = vdup_n_s32(0x40000002u);
  *(_DWORD *)(a1 + 1068) = 2;
  *(_DWORD *)(a1 + 1104) = 2;
  return 0LL;
}

uint64_t apfs_init(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 56);
  uint64_t locked = apfs_sanity_check_tree_type(a1, *(_DWORD *)(v2 + 116));
  if (!(_DWORD)locked)
  {
    uint64_t locked = apfs_sanity_check_tree_type(a1, *(_DWORD *)(v2 + 120));
    if (!(_DWORD)locked)
    {
      uint64_t locked = apfs_sanity_check_tree_type(a1, *(_DWORD *)(v2 + 124));
      if (!(_DWORD)locked)
      {
        uint64_t v5 = *(void *)(v2 + 56);
        if ((v5 & 0x20) != 0)
        {
          uint64_t locked = apfs_sanity_check_tree_type(a1, *(_DWORD *)(v2 + 1040));
          if ((_DWORD)locked) {
            return locked;
          }
          uint64_t v5 = *(void *)(v2 + 56);
        }

        if ((v5 & 0x40) == 0 || (uint64_t locked = apfs_sanity_check_tree_type(a1, *(_DWORD *)(v2 + 1044)), !(_DWORD)locked))
        {
          uint64_t locked = apfs_locked_ids_init(a1 + 3288, (uint64_t)"apfs-stream-id-lock", 0x100u);
          if (!(_DWORD)locked)
          {
            uint64_t v6 = apfs_locked_ids_init(a1 + 3416, (uint64_t)"apfs-dir-stats-id-lock", 0x10u);
            if ((_DWORD)v6)
            {
              uint64_t locked = v6;
LABEL_15:
              apfs_locked_ids_destroy(a1 + 3288);
              return locked;
            }

            uint64_t v7 = initialize_phys_range_lock_state(a1 + 3624, 0x20u);
            if ((_DWORD)v7)
            {
              uint64_t locked = v7;
              apfs_locked_ids_destroy(a1 + 3416);
              goto LABEL_15;
            }

            *(void *)(a1 + 376) = v2;
            *(void *)(a1 + 392) = *(void *)(*(void *)a1 + 392LL);
            new_lock((pthread_mutex_t *)(a1 + 1208));
            new_lock((pthread_mutex_t *)(a1 + 1272));
            new_lock((pthread_mutex_t *)(a1 + 1336));
            new_lock((pthread_mutex_t *)(a1 + 1400));
            new_lock((pthread_mutex_t *)(a1 + 1464));
            new_lock((pthread_mutex_t *)(a1 + 1656));
            new_lock((pthread_mutex_t *)(a1 + 1528));
            new_lock((pthread_mutex_t *)(a1 + 1592));
            new_lock((pthread_mutex_t *)(a1 + 1144));
            new_lock((pthread_mutex_t *)(a1 + 3224));
            new_lock((pthread_mutex_t *)(a1 + 1720));
            new_lock((pthread_mutex_t *)(a1 + 3904));
            new_rwlock((pthread_rwlock_t *)(a1 + 1784));
            new_rwlock((pthread_rwlock_t *)(a1 + 3000));
            new_rwlock((pthread_rwlock_t *)(a1 + 1984));
            rolling_stats_init(a1 + 3784, 0xE10u, 0x18u);
            apfs_update_dev_name(a1);
            *(void *)(a1 + 592) = 0LL;
            if ((*(_BYTE *)(*(void *)(a1 + 376) + 57LL) & 1) != 0 && !fs_is_fully_unencrypted(a1))
            {
              uint64_t locked = 0LL;
              *(void *)(a1 + 688) = 1LL;
            }

            else
            {
              return 0LL;
            }
          }
        }
      }
    }
  }

  return locked;
}

uint64_t apfs_destroy(uint64_t a1)
{
  uint64_t v2 = *(uint64_t **)(a1 + 3608);
  if (v2 && !*(_DWORD *)(*(void *)a1 + 912LL)) {
    obj_release(v2);
  }
  apfs_locked_ids_destroy(a1 + 3416);
  apfs_locked_ids_destroy(a1 + 3288);
  rolling_stats_destroy(a1 + 3784);
  free_rwlock((pthread_rwlock_t *)(a1 + 2800));
  free_rwlock((pthread_rwlock_t *)(a1 + 2592));
  free_rwlock((pthread_rwlock_t *)(a1 + 2392));
  free_rwlock((pthread_rwlock_t *)(a1 + 2184));
  free_rwlock((pthread_rwlock_t *)(a1 + 1984));
  free_rwlock((pthread_rwlock_t *)(a1 + 3000));
  free_rwlock((pthread_rwlock_t *)(a1 + 1784));
  free_lock((pthread_mutex_t *)(a1 + 3224));
  free_lock((pthread_mutex_t *)(a1 + 1144));
  free_lock((pthread_mutex_t *)(a1 + 1208));
  free_lock((pthread_mutex_t *)(a1 + 1528));
  free_lock((pthread_mutex_t *)(a1 + 1592));
  free_lock((pthread_mutex_t *)(a1 + 1400));
  free_lock((pthread_mutex_t *)(a1 + 1464));
  free_lock((pthread_mutex_t *)(a1 + 1656));
  free_lock((pthread_mutex_t *)(a1 + 1272));
  free_lock((pthread_mutex_t *)(a1 + 1336));
  free_lock((pthread_mutex_t *)(a1 + 1720));
  free_lock((pthread_mutex_t *)(a1 + 3904));
  release_phys_range_lock_state(a1 + 3624);
  return 0LL;
}

uint64_t apfs_reap(uint64_t a1, char a2, uint64_t a3, unsigned int a4, uint64_t a5)
{
  unint64_t v21 = 0LL;
  if (a4 < 0x14) {
    return 28LL;
  }
  unsigned int v8 = *(_DWORD *)(a3 + 16);
  if (v8 < 5)
  {
    uint64_t v11 = obj_modify((void *)a1, 0, a5);
    if ((_DWORD)v11)
    {
      uint64_t v5 = v11;
      log_err( "%s:%d: %s failed to modify the apfs_t before reaping (error %d).\n",  "apfs_reap",  619,  (const char *)(a1 + 3992),  v11);
    }

    else if ((a2 & 1) != 0)
    {
      spaceman_fs_bounds_clear(*(void **)(a1 + 392), a1, a5);
      obj_delete_and_free((uint64_t *)a1, a5);
      return 0LL;
    }

    else
    {
      switch(*(_DWORD *)(a3 + 16))
      {
        case 0:
          *(_DWORD *)(a3 + 16) = 1;
          goto LABEL_10;
        case 1:
LABEL_10:
          uint64_t v5 = apfs_reap_snapshots(a1, a5, &v21, (uint64_t *)a3);
          if ((_DWORD)v5) {
            return v5;
          }
          *(void *)a3 = 0LL;
          *(_DWORD *)(a3 + 16) = 2;
LABEL_12:
          uint64_t v5 = apfs_reap_extentref_blocks(a1, a5, *(void *)(*(void *)(a1 + 376) + 144LL), &v21, (uint64_t *)a3);
          if ((_DWORD)v5) {
            return v5;
          }
          uint64_t v12 = *(void *)(a1 + 376);
          uint64_t v13 = *(void *)(v12 + 224);
          if (*(void *)(v12 + 232) != v13)
          {
            log_err( "%s:%d: %s freed != alloced (%llu freed, %llu alloced)\n",  "apfs_reap",  655,  (const char *)(a1 + 3992),  *(void *)(v12 + 232),  v13);
            uint64_t v12 = *(void *)(a1 + 376);
          }

          uint64_t v14 = *(void *)(v12 + 56);
          if ((v14 & 0x20) == 0) {
            goto LABEL_22;
          }
          uint64_t v15 = supplemental_tree_destroy(a1, *(_DWORD *)(v12 + 1040), 5, a5, 0LL, 0LL);
          if ((_DWORD)v15)
          {
            uint64_t v5 = v15;
            strerror(v15);
            log_err("%s:%d: %s supplemental_tree_destroy(fext_tree) failed: %d (%s)\n");
          }

          else
          {
            uint64_t v12 = *(void *)(a1 + 376);
            uint64_t v14 = *(void *)(v12 + 56);
LABEL_22:
            if ((v14 & 0x40) != 0
              && (uint64_t v17 = supplemental_tree_destroy(a1, *(_DWORD *)(v12 + 1044), 6, a5, 0LL, 0LL), (_DWORD)v17))
            {
              uint64_t v5 = v17;
              strerror(v17);
              log_err("%s:%d: %s supplemental_tree_destroy(pfkur_tree) failed: %d (%s)\n");
            }

            else
            {
              *(_DWORD *)(a3 + 16) = 3;
LABEL_26:
              obj_cache_remove_new_fs_objects(*(void *)(*(void *)(a1 + 392) + 392LL), a1);
              unint64_t v18 = *(uint64_t **)(a1 + 3544);
              if (v18)
              {
                obj_release(v18);
                *(void *)(a1 + 3544) = 0LL;
              }

              unsigned int v19 = *(uint64_t **)(a1 + 3592);
              if (v19)
              {
                obj_release(v19);
                *(void *)(a1 + 3592) = 0LL;
              }

              uint64_t v5 = omap_destroy(a1, *(void *)(*(void *)(a1 + 376) + 128LL), a5, 0LL);
              if ((_DWORD)v5)
              {
                log_err("%s:%d: %s omap_destroy returned %d!\n");
              }

              else
              {
                uint64_t v20 = *(void *)(a1 + 376);
                *(void *)(v20 + 976) = 0LL;
                *(void *)(v20 + 1032) = 0LL;
                *(void *)(v20 + 1048) = 0LL;
                *(_OWORD *)(v20 + 128) = 0u;
                *(_OWORD *)(v20 + 144) = 0u;
                *(_OWORD *)(v20 + 1072) = 0u;
                fs_sb_dirty(a1, a5);
                *(_DWORD *)(a3 + 16) = 4;
              }
            }
          }

          break;
        case 2:
          goto LABEL_12;
        case 3:
          goto LABEL_26;
        default:
          return 0LL;
      }
    }
  }

  else
  {
    log_err("%s:%d: %s bogus phase, %u\n", "apfs_reap", 613, (const char *)(a1 + 3992), v8);
    return 5LL;
  }

  return v5;
}

uint64_t apfs_checkpoint_traverse(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if ((*(_BYTE *)(a3 + 20) & 0x40) != 0) {
    return 0LL;
  }
  uint64_t v15 = 0LL;
  unint64_t v5 = *(void *)(*(void *)(a3 + 376) + 128LL);
  if (!v5) {
    goto LABEL_13;
  }
  uint64_t v9 = obj_get(*(void *)(a1 + 392), 0x40000000u, v5, (int *)&om_desc, 0LL, a3, 0LL, 0LL, (uint64_t *)&v15);
  if ((_DWORD)v9)
  {
    uint64_t v10 = v9;
    uint64_t v11 = *(void *)(a1 + 400);
    if (!v11 || !*(_DWORD *)(v11 + 76)) {
      log_err("%s:%d: %s failed to get omap %lld: %d\n");
    }
    return v10;
  }

  uint64_t v10 = omap_checkpoint_traverse(a3, a2, (uint64_t)v15, a4);
  uint64_t v12 = v15[2];
  obj_release(v15);
  if (!(_DWORD)v10)
  {
    if ((v12 & 0x4000000000LL) == 0) {
      return 0LL;
    }
LABEL_13:
    obj_set_skip_checkpoint_traverse(a3, 1);
    return 0LL;
  }

  uint64_t v13 = *(void *)(a1 + 400);
  if (!v13 || !*(_DWORD *)(v13 + 76)) {
    log_err("%s:%d: %s omap checkpoint traverse (op %d) failed: %d\n");
  }
  return v10;
}

uint64_t apfs_get_fsroot_tree_ext(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v15 = *MEMORY[0x1895F89C0];
  if (a2) {
    uint64_t v9 = a2;
  }
  else {
    uint64_t v9 = a1;
  }
  uint64_t v10 = *(void *)(v9 + 376);
  int v11 = *(_DWORD *)(v10 + 116);
  uint64_t v12 = *(void *)(v10 + 136);
  memset(&v14[2], 0, 64);
  v14[0] = xmmword_189D3BD48;
  v14[1] = unk_189D3BD58;
  if ((*(_BYTE *)(v10 + 56) & 0x20) == 0 || (uint64_t result = authapfs_get_hash_args(a1, v14), !(_DWORD)result))
  {
    else {
      return 22LL;
    }
  }

  return result;
}

BOOL apfs_fsroot_tree_last_key_pred(uint64_t a1, void *a2, unsigned int a3)
{
  return a3 >= 8 && (*a2 & 0xFFFFFFFFFFFFFFFLL) == *(void *)(*(void *)(a1 + 376) + 176LL) - 1LL;
}

BOOL apfs_has_secondary_fsroot(uint64_t a1)
{
  return (*(_BYTE *)(*(void *)(a1 + 376) + 57LL) & 1) != 0 && !fs_is_fully_unencrypted(a1);
}

uint64_t apfs_get_secondary_fsroot_tree_ext(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  if (a2) {
    uint64_t v5 = a2;
  }
  else {
    uint64_t v5 = a1;
  }
  if ((*(_BYTE *)(*(void *)(a1 + 376) + 57LL) & 1) == 0) {
    return 45LL;
  }
  uint64_t v10 = *(void *)(v5 + 376);
  int v11 = *(_DWORD *)(v10 + 1104);
  uint64_t v12 = *(void *)(v10 + 1096);
  if (fs_is_fully_unencrypted(a1)) {
    return 45LL;
  }
  if ((unsigned __int16)v11 == 2) {
    return btree_get_extended( a1,  v11 & 0xFFFF0000,  v12,  a3,  a4 != 0,  (uint64_t)apfs_get_secondary_fsroot_tree_ext_BTARGS,  a4,  a5);
  }
  return 22LL;
}

uint64_t apfs_get_fsroot_tree(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  return apfs_get_fsroot_tree_ext(a1, 0LL, a2, a3, a4);
}

uint64_t apfs_get_secondary_fsroot_tree(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  return apfs_get_secondary_fsroot_tree_ext(a1, 0LL, a2, a3, a4);
}

uint64_t apfs_get_extentref_tree(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  if ((unsigned __int16)*(_DWORD *)(*(void *)(a1 + 376) + 120LL) == 2) {
    return btree_get_extended( a1,  *(_DWORD *)(*(void *)(a1 + 376) + 120LL) & 0xFFFF0000,  a2,  0LL,  a3 != 0,  (uint64_t)&apfs_get_extentref_tree_BTARGS,  a3,  a4);
  }
  else {
    return 22LL;
  }
}

uint64_t apfs_get_snap_meta_tree(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = *(void *)(a1 + 376);
  if ((unsigned __int16)*(_DWORD *)(v3 + 124) == 2) {
    return btree_get_extended( a1,  *(_DWORD *)(v3 + 124) & 0xFFFF0000,  *(void *)(v3 + 152),  0LL,  a2 != 0,  (uint64_t)&apfs_get_snap_meta_tree_BTARGS,  a2,  a3);
  }
  else {
    return 22LL;
  }
}

uint64_t apfs_get_doc_id_tree_ext(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  if (a3) {
    uint64_t v6 = a3;
  }
  else {
    uint64_t v6 = a1;
  }
  uint64_t v7 = *(void *)(v6 + 376);
  uint64_t v8 = 1072LL;
  if (a2) {
    uint64_t v8 = 1080LL;
  }
  return btree_get_extended( a1,  *(_DWORD *)(v7 + 1068) & 0xFFFF0000,  *(void *)(v7 + v8),  a4,  a5 != 0,  (uint64_t)apfs_get_doc_id_tree_by_oid_BTARGS,  a5,  a6);
}

BOOL apfs_doc_id_tree_last_key_pred(uint64_t a1, _DWORD *a2, unsigned int a3)
{
  return a3 >= 4 && *a2 == *(_DWORD *)(*(void *)(a1 + 376) + 960LL) - 1;
}

uint64_t apfs_get_doc_id_tree(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  return apfs_get_doc_id_tree_ext(a1, a2, 0LL, a3, a4, a5);
}

uint64_t apfs_doc_id_index_supported(uint64_t a1)
{
  int v1 = *(unsigned __int16 *)(*(void *)(a1 + 376) + 964LL);
  uint64_t result = 1LL;
  if (v1 > 63)
  {
    if (v1 != 64 && v1 != 576) {
      return 0LL;
    }
  }

  else
  {
    if (v1) {
      BOOL v3 = v1 == 2;
    }
    else {
      BOOL v3 = 1;
    }
    if (!v3) {
      return 0LL;
    }
  }

  return result;
}

uint64_t apfs_locked_ids_init(uint64_t a1, uint64_t a2, unsigned int a3)
{
  *(_DWORD *)(a1 + 120) = a3;
  char v4 = _apfs_calloc(a3, 0x10uLL);
  *(void *)(a1 + 112) = v4;
  if (!v4) {
    return 12LL;
  }
  new_lock((pthread_mutex_t *)a1);
  new_cv((pthread_cond_t *)(a1 + 64));
  return 0LL;
}

void apfs_locked_ids_destroy(uint64_t a1)
{
}

uint64_t apfs_sanity_check_tree_type(uint64_t a1, int a2)
{
  else {
    return nx_corruption_detected_int(*(void *)(*(void *)a1 + 392LL));
  }
}

uint64_t apfs_reap_snapshots(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t *a4)
{
  uint64_t v18 = 0LL;
  unsigned int v19 = 0LL;
  uint64_t v8 = a4[1];
  if (!v8)
  {
    uint64_t next_snapshot_xid = omap_find_next_snapshot_xid(a1, 0LL, &v18);
    if ((_DWORD)next_snapshot_xid)
    {
      uint64_t v9 = next_snapshot_xid;
      if ((_DWORD)next_snapshot_xid == 2)
      {
LABEL_13:
        fs_delete_snapshot_metadata_tree(a1, a2, 0LL);
        return 0LL;
      }

      else
      {
        log_err("%s:%d: %s Hit %d looking up first snapshot\n");
      }

      return v9;
    }

    uint64_t v8 = v18;
    a4[1] = v18;
  }

  uint64_t v9 = fs_lookup_snapshot_metadata_by_xid(a1, v8, &v19);
  if ((_DWORD)v9)
  {
LABEL_3:
    log_err("%s:%d: %s Couldn't find snapshot metadata for xid %llu\n");
  }

  else
  {
    while (1)
    {
      uint64_t v12 = v19;
      uint64_t v13 = *((void *)v19 + 2);
      if (v13)
      {
        uint64_t v14 = apfs_reap_extentref_blocks(a1, a2, v13, a3, a4);
        if ((_DWORD)v14) {
          return v14;
        }
        uint64_t v12 = v19;
      }

      fs_delete_supplemental_tree(a1, 5, *((void *)v12 + 3), a2, 0LL);
      fs_delete_supplemental_tree(a1, 6, *((void *)v19 + 3), a2, 0LL);
      fs_delete_clone_superblock(a1, *((void *)v19 + 3), a2);
      uint64_t v15 = omap_find_next_snapshot_xid(a1, a4[1], &v18);
      if ((_DWORD)v15) {
        break;
      }
      uint64_t v10 = v18;
      *a4 = 0LL;
      a4[1] = v10;
      uint64_t v11 = fs_lookup_snapshot_metadata_by_xid(a1, v10, &v19);
      if ((_DWORD)v11)
      {
        uint64_t v9 = v11;
        goto LABEL_3;
      }
    }

    uint64_t v9 = v15;
    if ((_DWORD)v15 == 2) {
      goto LABEL_13;
    }
    log_err( "%s:%d: %s lookup_next_snapshot() returned %d\n",  "apfs_reap_snapshots",  591,  (const char *)(a1 + 3992),  v15);
  }

  return v9;
}

uint64_t apfs_reap_extentref_blocks(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4, uint64_t *a5)
{
  uint64_t v26 = 0LL;
  memset(v25, 0, sizeof(v25));
  uint64_t v23 = 0LL;
  unint64_t v24 = 0LL;
  unint64_t v20 = 0LL;
  unint64_t v21 = 0LL;
  int v22 = 0;
  extentref_int tree = apfs_get_extentref_tree(a1, a3, 0LL, (uint64_t *)&v24);
  if ((_DWORD)extentref_tree)
  {
    uint64_t v11 = extentref_tree;
    log_err( "%s:%d: apfs_get_extentref_tree(oid=%llu) returned %d\n",  "apfs_reap_extentref_blocks",  486,  a3,  extentref_tree);
  }

  else
  {
    uint64_t v23 = *a5 & 0xFFFFFFFFFFFFFFFLL | 0x2000000000000000LL;
    bt_iterator_init_with_hint((uint64_t)v25, (uint64_t)v24, 0LL, 4, (unint64_t *)&v23, 8, 8u, &v20, 0x14u, 0LL);
    if ((v12 & 0xFFFFFFFD) != 0)
    {
      uint64_t v11 = v12;
      log_err( "%s:%d: %s tree_iter_init() returned %d\n",  "apfs_reap_extentref_blocks",  496,  (const char *)(a1 + 3992),  v12);
    }

    else
    {
      while (1)
      {
        if (bt_iterator_ended((uint64_t)v25))
        {
          btree_delete((uint64_t)v24, a2, 0LL);
          uint64_t v11 = 0LL;
          goto LABEL_5;
        }

        unint64_t v14 = v23 & 0xFFFFFFFFFFFFFFFLL;
        *a5 = v23 & 0xFFFFFFFFFFFFFFFLL;
        if (v20 >> 60 == 1 && v21 <= 0xFFFFFFFFFFFFFFFDLL)
        {
          uint64_t v16 = v20 & 0xFFFFFFFFFFFFFFFLL;
          if ((v20 & 0xFFFFFFFFFFFFFFFLL) != 0)
          {
          }

          else
          {
            log_err("%s:%d: %s found bogus 0-length extent at lba %llu, ignoring\n");
          }

          unint64_t v17 = *a4 + v16;
          *a4 = v17;
          if (v17 > 0x4000) {
            break;
          }
        }

        uint64_t v18 = bt_iterator_next((uint64_t)v25);
        if ((v18 & 0xFFFFFFFD) != 0)
        {
          uint64_t v19 = v18;
          log_err( "%s:%d: %s iter_next returned %d\n",  "apfs_reap_extentref_blocks",  528,  (const char *)(a1 + 3992),  v18);
          uint64_t v11 = v19;
          goto LABEL_5;
        }
      }

      uint64_t v11 = 36LL;
    }
  }

void *_apfs_obj_zalloc(size_t __size, uint64_t a2)
{
  if (__size == 0x2000)
  {
    size_t v2 = qword_18C6633D8;
  }

  else
  {
    size_t v2 = __size;
    if (__size == 4096) {
      size_t v2 = *(void *)((char *)&apfs_zone_infos[1] + ((a2 << 63 >> 63) & 0x78));
    }
  }

  uint64_t result = calloc(1uLL, v2);
  if (result)
  {
    do
      unint64_t v4 = __ldxr(&apfs_allocated_mem_total);
    while (__stxr(v4 + v2, &apfs_allocated_mem_total));
  }

  return result;
}

void *_apfs_zalloc(unsigned int a1)
{
  size_t v1 = apfs_zone_infos[3 * a1 + 1];
  uint64_t result = calloc(1uLL, v1);
  if (result)
  {
    do
      unint64_t v3 = __ldxr(&apfs_allocated_mem_total);
    while (__stxr(v3 + v1, &apfs_allocated_mem_total));
  }

  return result;
}

void *_apfs_calloc(size_t a1, size_t a2)
{
  uint64_t result = calloc(a1, a2);
  if (result)
  {
    do
      unint64_t v5 = __ldxr(&apfs_allocated_mem_total);
    while (__stxr(v5 + a2 * a1, &apfs_allocated_mem_total));
  }

  return result;
}

void _apfs_obj_zfree(void *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x2000)
  {
    if (!a1) {
      return;
    }
    unint64_t v4 = &qword_18C6633D8;
  }

  else
  {
    uint64_t v3 = a2;
    if (a2 != 4096)
    {
      if (!a1) {
        return;
      }
      goto LABEL_9;
    }

    if (!a1) {
      return;
    }
    unint64_t v4 = (uint64_t *)((char *)&apfs_zone_infos + ((a3 << 63 >> 63) & 0x78) + 8);
  }

  uint64_t v3 = *v4;
LABEL_9:
  free(a1);
  do
    unint64_t v5 = __ldxr(&apfs_allocated_mem_total);
  while (__stxr(v5 - v3, &apfs_allocated_mem_total));
}

void _apfs_zfree(void *a1, unsigned int a2)
{
  if (a1)
  {
    uint64_t v2 = apfs_zone_infos[3 * a2 + 1];
    free(a1);
    do
      unint64_t v3 = __ldxr(&apfs_allocated_mem_total);
    while (__stxr(v3 - v2, &apfs_allocated_mem_total));
  }

void _apfs_free(void *a1, uint64_t a2)
{
  if (a1)
  {
    free(a1);
    do
      unint64_t v3 = __ldxr(&apfs_allocated_mem_total);
    while (__stxr(v3 - a2, &apfs_allocated_mem_total));
  }

void *_apfs_malloc(size_t a1)
{
  uint64_t result = malloc(a1);
  if (result)
  {
    do
      unint64_t v3 = __ldxr(&apfs_allocated_mem_total);
    while (__stxr(v3 + a1, &apfs_allocated_mem_total));
  }

  return result;
}

BOOL nx_is_panic_on_corruption_enabled(uint64_t a1)
{
  if (a1) {
    return *(_BYTE *)(a1 + 637) != 0;
  }
  else {
    return apfs_corruption_panics & 1;
  }
}

uint64_t nx_calculate_metadata_parameters( unsigned int a1, unint64_t a2, unint64_t a3, unsigned int a4, uint64_t a5)
{
  *(void *)(a5 + 208) = 0LL;
  *(_OWORD *)(a5 + 176) = 0u;
  *(_OWORD *)(a5 + 192) = 0u;
  *(_OWORD *)(a5 + 144) = 0u;
  *(_OWORD *)(a5 + 160) = 0u;
  *(_OWORD *)(a5 + 112) = 0u;
  *(_OWORD *)(a5 + 128) = 0u;
  *(_OWORD *)(a5 + 80) = 0u;
  *(_OWORD *)(a5 + 96) = 0u;
  *(_OWORD *)(a5 + 48) = 0u;
  *(_OWORD *)(a5 + 64) = 0u;
  *(_OWORD *)(a5 + 16) = 0u;
  *(_OWORD *)(a5 + 32) = 0u;
  uint64_t v5 = 22LL;
  *(_OWORD *)a5 = 0u;
  if (a1 - 65537 < 0xFFFF0FFF || !a2) {
    return v5;
  }
  unint64_t v6 = 8 * a1;
  unint64_t v7 = a1 - 40LL;
  *(void *)(a5 + 88) = v7 >> 5;
  *(void *)(a5 + 96) = v7 >> 3;
  *(void *)(a5 + 8) = a1;
  *(void *)(a5 + 16) = a2;
  unint64_t v8 = (a2 + v6 - 1) / v6;
  uint64_t v9 = (v7 >> 5) - 1;
  unint64_t v10 = (v9 + v8) / (v7 >> 5);
  *(void *)(a5 + 24) = v8;
  *(void *)(a5 + 32) = v10;
  uint64_t v11 = (v7 >> 3) - 1;
  unint64_t v12 = (v11 + v10) / (v7 >> 3);
  if (v12 == 1) {
    unint64_t v13 = 0LL;
  }
  else {
    unint64_t v13 = (v11 + v10) / (v7 >> 3);
  }
  *(void *)(a5 + 40) = v13;
  *(void *)(a5 + 48) = a3;
  unint64_t v14 = (a3 + v6 - 1) / v6;
  unint64_t v15 = (v9 + v14) / (v7 >> 5);
  *(void *)(a5 + 56) = v14;
  *(void *)(a5 + 64) = v15;
  unint64_t v16 = (v11 + v15) / (v7 >> 3);
  if (v16 == 1) {
    unint64_t v17 = 0LL;
  }
  else {
    unint64_t v17 = v16;
  }
  *(void *)(a5 + 72) = v17;
  *(void *)(a5 + 80) = v6;
  uint64_t v18 = 3 * (v10 + v8 + v14 + v15 + v13 + v17);
  *(void *)(a5 + 104) = v18;
  unint64_t v19 = (unint64_t)(v18 + 63) >> 6;
  unint64_t v20 = (a1 - 1LL + 8 * v19) / a1;
  if (HIDWORD(v20)) {
    return 27LL;
  }
  *(void *)(a5 + 112) = v20;
  *(void *)(a5 + 120) = 16LL;
  if (v20 < 0x1000)
  {
    uint64_t v21 = 16 * v20;
    goto LABEL_14;
  }

  if (v20 >> 13) {
    return 27LL;
  }
  uint64_t v21 = 65534LL;
LABEL_14:
  *(void *)(a5 + 128) = v21;
  uint64_t v22 = (2 * v21 + 6) & 0x7FFFFFFFFFFFFFF8LL;
  if (v13) {
    unint64_t v10 = v12;
  }
  if (v17) {
    unint64_t v23 = v16;
  }
  else {
    unint64_t v23 = v15;
  }
  unint64_t v24 = ((2 * v20 + 6) & 0x7FFFFFFFFFFFFFF8LL) + 8 * (v20 + v10 + v23) + v22 + 2520;
  if (v24 > 0x100000) {
    return 27LL;
  }
  *(void *)(a5 + 136) = v24;
  unint64_t v27 = 0x200000 / a1;
  uint64_t v28 = 15LL;
  if (a2 >= 0x100000) {
    uint64_t v29 = 15LL;
  }
  else {
    uint64_t v29 = 31LL;
  }
  if (a2 >= 0x100000) {
    char v30 = 4;
  }
  else {
    char v30 = 5;
  }
  if (a2 < 0x40000)
  {
    uint64_t v29 = 63LL;
    char v30 = 6;
  }

  unint64_t v31 = (v29 + a2) >> v30;
  unint64_t v32 = v26 - 1;
  unint64_t v33 = (v26 - 1 + v31) / v26;
  if (v33 >= v27) {
    unint64_t v33 = 0x200000 / a1;
  }
  if (v33 == 2) {
    unint64_t v33 = 3LL;
  }
  if (a3 >= 0x100000)
  {
    char v34 = 4;
  }

  else
  {
    uint64_t v28 = 31LL;
    char v34 = 5;
  }

  if (a3 < 0x40000)
  {
    uint64_t v28 = 63LL;
    char v34 = 6;
  }

  unint64_t v35 = (v32 + ((v28 + a3) >> v34)) / v26;
  if (v35 >= v27) {
    unint64_t v35 = 0x200000 / a1;
  }
  if (v35 == 2) {
    unint64_t v35 = 3LL;
  }
  *(void *)(a5 + 152) = v33;
  *(void *)(a5 + 160) = v35;
  unint64_t v36 = a3 + a2;
  if ((a3 + a2) >> 18)
  {
    if (v36 >> 20) {
      unint64_t v19 = (unint64_t)(v18 + 15) >> 4;
    }
    else {
      unint64_t v19 = (unint64_t)(v18 + 31) >> 5;
    }
  }

  unint64_t v37 = (v32 + v19) / v26;
  if (v37 >= v27) {
    unint64_t v37 = 0x200000 / a1;
  }
  if (v37 == 2) {
    unint64_t v37 = 3LL;
  }
  *(void *)(a5 + 144) = v37;
  uint64_t v38 = v24 / a1;
  uint64_t v39 = v38 - 1;
  uint64_t v40 = 8LL;
  if (v33 < 8) {
    uint64_t v40 = v33;
  }
  *(void *)(a5 + 192) = 4LL;
  *(void *)(a5 + 200) = v40;
  if (a4)
  {
    if (a4 > 0x64) {
      return 22LL;
    }
  }

  else
  {
    int v41 = v36 * a1;
    unint64_t v42 = (v36 * a1) >> 29;
    if ((v41 & 0x1FFFFFFF) != 0) {
      unint64_t v43 = v42 + 1;
    }
    else {
      unint64_t v43 = v42;
    }
    if (v43 >= 0x64) {
      a4 = 100;
    }
    else {
      a4 = v43;
    }
  }

  *(void *)(a5 + 184) = a4;
  uint64_t v44 = v40 * a4;
  uint64_t v45 = 2LL;
  if (a3) {
    uint64_t v45 = 3LL;
  }
  uint64_t v46 = v45 + v33 + v35 + v37 + v38 + v39 + 8 * v44;
  *(void *)(a5 + 168) = 4LL
                        * ((unsigned __int16)(v46 + (unsigned __int16)(a1 - 40) / 0x28u - 1)
                         / ((unsigned __int16)(a1 - 40)
                          / 0x28u))
                        + 4;
  *(void *)(a5 + 176) = 4 * v46;
  *(void *)(a5 + 208) = 0LL;
  uint64_t v5 = 0LL;
  if (a3)
  {
    unint64_t v47 = 0x100000000LL;
    if (0x800000000uLL / a1 < a2) {
      unint64_t v47 = 0x200000000LL;
    }
    unint64_t v48 = v47 / a1;
    if (v48 >= a2 / 5) {
      unint64_t v48 = a2 / 5;
    }
    *(void *)(a5 + 208) = v48;
  }

  return v5;
}

uint64_t nx_get_evict_mapping_tree(uint64_t a1, unsigned int a2, uint64_t a3, int a4, int a5, uint64_t *a6)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  *(void *)&__int128 v13 = 0LL;
  __int128 v14 = 0u;
  uint64_t v18 = 0LL;
  __int128 v16 = 0u;
  __int128 v17 = 0u;
  __int128 v15 = 0u;
  unint64_t v12 = evict_mapping_key_compare;
  DWORD2(v13) = 33;
  HIDWORD(v13) = a4;
  uint64_t result = btree_get_extended(a1, a2, a3, 0LL, 0, (uint64_t)&v12, 0LL, a6);
  if ((_DWORD)result == 92 && a5)
  {
    __int128 v13 = 0u;
    __int128 v14 = 0u;
    uint64_t v18 = 0LL;
    __int128 v16 = 0u;
    __int128 v17 = 0u;
    __int128 v15 = 0u;
    unint64_t v12 = evict_mapping_key_compare;
    HIDWORD(v13) = a4;
    uint64_t result = btree_get_extended(a1, 0, a3, 0LL, 0, (uint64_t)&v12, 0LL, a6);
    if (!(_DWORD)result)
    {
      log_debug( "%s:%d: %s found mapping tree with old subtype\n",  "nx_get_evict_mapping_tree",  544,  (const char *)(*(void *)(a1 + 384) + 208LL));
      return 0LL;
    }
  }

  return result;
}

uint64_t nx_init_phys(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!a3) {
    return 22LL;
  }
  int v5 = *(_DWORD *)(a3 + 4);
  *(_DWORD *)(a1 + 32) = 1112758350;
  *(_DWORD *)(a1 + 36) = v5;
  *(void *)(a1 + 1264) = 0LL;
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a3 + 8);
  *(_OWORD *)(a1 + 56) = xmmword_183CA1FF0;
  uint64_t v6 = *(void *)(a3 + 32);
  *(void *)(a1 + 88) = 1024LL;
  *(void *)(a1 + 96) = v6;
  uuid_copy((unsigned __int8 *)(a1 + 72), (const unsigned __int8 *)(a3 + 64));
  unint64_t v7 = (const unsigned __int8 *)(a3 + 80);
  if (uuid_is_null(v7)) {
    return 0LL;
  }
  uuid_copy((unsigned __int8 *)(a1 + 1280), v7);
  uint64_t result = 0LL;
  *(void *)(a1 + 64) |= 0x100uLL;
  return result;
}

uint64_t nx_init(uint64_t a1, unsigned int *a2)
{
  if (!a2) {
    return 22LL;
  }
  uint64_t v3 = *(void *)(a1 + 56);
  unsigned int v4 = *a2;
  *(_DWORD *)(a1 + 648) = *a2;
  *(_DWORD *)(a1 + 652) = *(_DWORD *)(v3 + 36) / v4;
  uint64_t v5 = *((void *)a2 + 3);
  *(void *)(a1 + 376) = v3;
  *(void *)(a1 + 384) = v5;
  LODWORD(v5) = a2[11];
  *(_BYTE *)(a1 + 627) = a2[10] != 0;
  *(_BYTE *)(a1 + 628) = (_DWORD)v5 != 0;
  LODWORD(v5) = a2[13];
  *(_BYTE *)(a1 + 629) = a2[12] != 0;
  *(_BYTE *)(a1 + 631) = (_DWORD)v5 != 0;
  LODWORD(v5) = a2[15];
  *(_BYTE *)(a1 + 632) = a2[14] != 0;
  *(_BYTE *)(a1 + 633) = (_DWORD)v5 != 0;
  *(void *)(a1 + 392) = *(void *)a1;
  new_lock((pthread_mutex_t *)(a1 + 656));
  new_lock((pthread_mutex_t *)(a1 + 848));
  *(_OWORD *)(a1 + 912) = 0u;
  new_rwlock((pthread_rwlock_t *)(a1 + 928));
  *(void *)(a1 + 1128) = 0LL;
  *(void *)(a1 + 1336) = 0LL;
  *(_BYTE *)(a1 + 635) = 0;
  new_lock((pthread_mutex_t *)(a1 + 1856));
  new_rwlock((pthread_rwlock_t *)(a1 + 1136));
  new_lock((pthread_mutex_t *)(a1 + 736));
  *(void *)(a1 + 812) = 0LL;
  *(void *)(a1 + 800) = 0LL;
  *(_WORD *)(a1 + 808) = 0;
  new_lock((pthread_mutex_t *)(a1 + 504));
  new_cv((pthread_cond_t *)(a1 + 568));
  return 0LL;
}

uint64_t nx_destroy(uint64_t a1)
{
  uint64_t v2 = *(uint64_t **)(a1 + 720);
  if (v2 && !*(_DWORD *)(*(void *)a1 + 912LL)) {
    obj_release(v2);
  }
  free_rwlock((pthread_rwlock_t *)(a1 + 928));
  free_rwlock((pthread_rwlock_t *)(a1 + 1136));
  free_lock((pthread_mutex_t *)(a1 + 848));
  free_lock((pthread_mutex_t *)(a1 + 656));
  free_lock((pthread_mutex_t *)(a1 + 1856));
  free_lock((pthread_mutex_t *)(a1 + 736));
  free_lock((pthread_mutex_t *)(a1 + 504));
  free_cv((pthread_cond_t *)(a1 + 568));
  return 0LL;
}

uint64_t nx_fusion_superblock_write(uint64_t a1, const void *a2)
{
  uint64_t v2 = *(void *)(a1 + 376);
  if ((*(_BYTE *)(v2 + 65) & 1) == 0) {
    return 0LL;
  }
  uint64_t v6 = _apfs_malloc(*(unsigned int *)(v2 + 36));
  memcpy(v6, a2, *(unsigned int *)(*(void *)(a1 + 376) + 36LL));
  v6[1295] |= 1u;
  obj_checksum_set_phys(a1, (uint64_t)v6, *(_DWORD *)(*(void *)(a1 + 376) + 36LL), v7, v8);
  uint64_t v9 = dev_write( *(void *)(a1 + 384),  0x4000000000000000uLL >> __clz(__rbit64(*(unsigned int *)(*(void *)(a1 + 376) + 36LL))));
  _apfs_free(v6, *(unsigned int *)(*(void *)(a1 + 376) + 36LL));
  return v9;
}

uint64_t nx_checkpoint_traverse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v44 = 0LL;
  uint64_t v45 = 0LL;
  unint64_t v43 = 0LL;
  unint64_t v42 = 0LL;
  uint64_t v6 = spaceman_get((void *)a1, (uint64_t *)&v45);
  if ((_DWORD)v6)
  {
    uint64_t v7 = v6;
    uint64_t v8 = *(void *)(a1 + 400);
    if (!v8 || !*(_DWORD *)(v8 + 76))
    {
      LODWORD(v9) = 831;
      log_err("%s:%d: %s failed to get spaceman oid %lld for checkpoint %s traverse: %d\n");
      goto LABEL_9;
    }

    return v7;
  }

  uint64_t v7 = spaceman_checkpoint_traverse(a1, a2, (uint64_t)v45, a3);
  obj_release(v45);
  if ((_DWORD)v7)
  {
    uint64_t v10 = *(void *)(a1 + 400);
    if (!v10 || !*(_DWORD *)(v10 + 76))
    {
      LODWORD(v9) = 838;
      log_err("%s:%d: %s spaceman checkpoint %s traverse failed: %d\n");
      goto LABEL_9;
    }

    return v7;
  }

  uint64_t v13 = *(void *)(a1 + 376);
  unint64_t v14 = *(void *)(v13 + 160);
  if (v14 && !*(_DWORD *)(a1 + 728))
  {
    uint64_t v17 = obj_get(*(void *)(a1 + 392), 0x40000000u, v14, (int *)&om_desc, 0LL, 0LL, 0LL, 0LL, (uint64_t *)&v43);
    if ((_DWORD)v17)
    {
      uint64_t v7 = v17;
      uint64_t v18 = *(void *)(a1 + 400);
      if (!v18 || !*(_DWORD *)(v18 + 76))
      {
        LODWORD(v9) = 848;
        log_err("%s:%d: %s failed to get omap for checkpoint %s traverse: %d\n");
        goto LABEL_9;
      }

      return v7;
    }

    uint64_t v7 = omap_checkpoint_traverse(a1, a2, (uint64_t)v43, a3);
    obj_release(v43);
    if ((_DWORD)v7)
    {
      uint64_t v20 = *(void *)(a1 + 400);
      if (!v20 || !*(_DWORD *)(v20 + 76))
      {
        LODWORD(v9) = 854;
        log_err("%s:%d: %s omap checkpoint %s traverse failed: %d\n");
        goto LABEL_9;
      }

      return v7;
    }

    uint64_t v13 = *(void *)(a1 + 376);
  }

  if (*(void *)(v13 + 168))
  {
    uint64_t v15 = nx_reaper_get((void *)a1, &v44);
    if ((_DWORD)v15)
    {
      uint64_t v7 = v15;
      uint64_t v16 = *(void *)(a1 + 400);
      if (!v16 || !*(_DWORD *)(v16 + 76))
      {
        LODWORD(v9) = 867;
        log_err("%s:%d: %s failed to get reaper for checkpoint %s traverse: %d\n");
        goto LABEL_9;
      }

      return v7;
    }

    uint64_t v7 = nx_reaper_checkpoint_traverse((uint64_t *)a1, a2, (uint64_t)v44, a3);
    obj_release((uint64_t *)v44);
    if ((_DWORD)v7)
    {
      uint64_t v19 = *(void *)(a1 + 400);
      if (!v19 || !*(_DWORD *)(v19 + 76))
      {
        LODWORD(v9) = 874;
        log_err("%s:%d: %s nx reaper checkpoint %s traverse failed: %d\n");
        goto LABEL_9;
      }

      return v7;
    }

    uint64_t v13 = *(void *)(a1 + 376);
  }

  if (*(_DWORD *)(v13 + 180))
  {
    for (unint64_t i = 0LL; i < *(unsigned int *)(v13 + 180); ++i)
    {
      unint64_t v22 = *(void *)(v13 + 8 * i + 184);
      if (v22)
      {
        uint64_t v23 = obj_get(*(void *)(a1 + 392), 0, v22, (int *)&apfs_desc, 0LL, 0LL, 0LL, 0LL, (uint64_t *)&v42);
        if ((_DWORD)v23)
        {
          uint64_t v7 = v23;
          uint64_t v28 = *(void *)(a1 + 400);
          if (v28 && *(_DWORD *)(v28 + 76)) {
            return v7;
          }
          uint64_t v29 = "<UNKNOWN>";
          if ((_DWORD)a3 == 2) {
            uint64_t v29 = "FIXUP";
          }
          if ((_DWORD)a3 == 1) {
            uint64_t v29 = "START";
          }
          uint64_t v36 = (uint64_t)v29;
          uint64_t v37 = v23;
          unint64_t v34 = i;
          unint64_t v35 = v22;
          uint64_t v33 = *(void *)(a1 + 384) + 208LL;
          uint64_t v9 = 898LL;
          unint64_t v27 = "%s:%d: %s failed to get fs[%d] oid %lld for checkpoint %s traverse: %d\n";
LABEL_58:
          log_err(v27, "nx_checkpoint_traverse", v9, v33, v34, v35, v36, v37, v38);
LABEL_9:
          uint64_t v11 = *(void *)(a1 + 400);
          if (v11)
          {
LABEL_10:
            *(_DWORD *)(v11 + 76) = v9;
            ++*(_WORD *)(v11 + 80);
          }

          return v7;
        }

        uint64_t v7 = apfs_checkpoint_traverse(a1, a2, (uint64_t)v42, a3);
        obj_release(v42);
        if ((_DWORD)v7)
        {
          uint64_t v30 = *(void *)(a1 + 400);
          if (!v30 || !*(_DWORD *)(v30 + 76))
          {
            LODWORD(v9) = 904;
            log_err("%s:%d: %s fs[%d] checkpoint %s traverse failed: %d\n");
            goto LABEL_9;
          }

          return v7;
        }

        uint64_t v13 = *(void *)(a1 + 376);
      }
    }
  }

  v41[0] = 0LL;
  v41[1] = 0LL;
  uint64_t v40 = 0LL;
  unsigned int v39 = 0;
  uint64_t v7 = obj_descriptor_and_flags_for_type(*(_DWORD *)(*(void *)(a1 + 376) + 176LL), &v39, (uint64_t)v41);
  HIDWORD(v41[0]) = 255;
  if ((_DWORD)v7
    || (uint64_t v7 = obj_get( *(void *)(a1 + 392),  v39,  *(void *)(*(void *)(a1 + 376) + 1344LL),  (int *)v41,  0LL,  0LL,  0LL,  0LL,  (uint64_t *)&v40),  (_DWORD)v7))
  {
    uint64_t v24 = *(void *)(a1 + 400);
    if (!v24 || !*(_DWORD *)(v24 + 76))
    {
      uint64_t v25 = *(void *)(a1 + 376);
      unint64_t v26 = "<UNKNOWN>";
      if ((_DWORD)a3 == 2) {
        unint64_t v26 = "FIXUP";
      }
      if ((_DWORD)a3 == 1) {
        unint64_t v26 = "START";
      }
      uint64_t v37 = (uint64_t)v26;
      uint64_t v38 = v7;
      unint64_t v35 = *(unsigned int *)(v25 + 176);
      uint64_t v36 = 255LL;
      uint64_t v33 = *(void *)(a1 + 384) + 208LL;
      unint64_t v34 = *(void *)(v25 + 1344);
      uint64_t v9 = 925LL;
      unint64_t v27 = "%s:%d: %s unable to get test object 0x%llx of type 0x%x/0x%x for checkpoint %s traverse: %d\n";
      goto LABEL_58;
    }
  }

  else
  {
    uint64_t v7 = obj_checkpoint_traverse(a1, a2, (uint64_t)v40, a3);
    obj_release(v40);
    if ((_DWORD)v7)
    {
      uint64_t v31 = *(void *)(a1 + 400);
      if (!v31 || !*(_DWORD *)(v31 + 76))
      {
        unint64_t v32 = "<UNKNOWN>";
        if ((_DWORD)a3 == 2) {
          unint64_t v32 = "FIXUP";
        }
        if ((_DWORD)a3 == 1) {
          unint64_t v32 = "START";
        }
        LODWORD(v9) = 931;
        log_err( "%s:%d: %s failed to checkpoint %s traverse test object 0x%llx of type 0x%x/0x%x: %d\n",  "nx_checkpoint_traverse",  931,  (const char *)(*(void *)(a1 + 384) + 208LL),  v32,  *(void *)(*(void *)(a1 + 376) + 1344LL),  *(_DWORD *)(*(void *)(a1 + 376) + 176LL),  255,  v7);
        uint64_t v11 = *(void *)(a1 + 400);
        if (v11) {
          goto LABEL_10;
        }
      }
    }
  }

  return v7;
}

uint64_t nx_reaper_get(void *a1, char **a2)
{
  uint64_t v3 = (char *)a1[53];
  *a2 = v3;
  if (v3) {
    goto LABEL_2;
  }
  uint64_t result = obj_get(a1[49], 0x80000000LL, *(void *)(a1[47] + 168LL), &nx_reaper_desc, 0LL, 0LL, 0LL, 0LL, a2);
  if (!(_DWORD)result)
  {
    a1[53] = *a2;
    uint64_t v3 = *a2;
LABEL_2:
    obj_retain(v3);
    return 0LL;
  }

  return result;
}

uint64_t nx_reaper_checkpoint_traverse(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v6 = *(void *)(a3 + 376);
  unsigned int v39 = 0LL;
  if ((_DWORD)a4 == 2)
  {
    uint64_t v7 = obj_checkpoint_known(a3);
LABEL_5:
    uint64_t v8 = v7;
    if ((_DWORD)v7) {
      return v8;
    }
    goto LABEL_6;
  }

  if ((_DWORD)a4 == 1)
  {
    uint64_t v7 = obj_checkpoint_start((unsigned int *)a3);
    goto LABEL_5;
  }

LABEL_69:
    obj_release((uint64_t *)v41);
  }

  while (!(_DWORD)v8 && v11);
  return v8;
}

uint64_t nx_reaper_init_phys(uint64_t a1, int a2)
{
  *(void *)(a1 + 32) = 1LL;
  *(void *)(a1 + 40) = 0LL;
  *(void *)(a1 + 48) = 0LL;
  *(void *)(a1 + 56) = 0LL;
  *(_DWORD *)(a1 + 64) = 1;
  *(_DWORD *)(a1 + 108) = (a2 & 0xFFFFFFFC) - 112;
  return 0LL;
}

uint64_t nx_reaper_init(void *a1)
{
  uint64_t v2 = a1[7];
  unint64_t v4 = *(void *)(v2 + 32);
  unint64_t v3 = *(void *)(v2 + 40);
  unint64_t v5 = *(unsigned int *)(v2 + 108);
  unint64_t v6 = (obj_size_phys((uint64_t)a1) & 0xFFFFFFFCLL) - 112;
  if (v3 < v4) {
    int v7 = 1;
  }
  else {
    int v7 = 2;
  }
  if (v6 >= v5) {
    BOOL v8 = v3 >= v4;
  }
  else {
    BOOL v8 = v7;
  }
  int v9 = *(_DWORD *)(v2 + 68);
  if (v9 == 1)
  {
    BOOL v10 = *(void *)(v2 + 48) == *(void *)(v2 + 56);
  }

  else
  {
    if (v9)
    {
      if (v8) {
        goto LABEL_19;
      }
      goto LABEL_20;
    }

    if (*(void *)(v2 + 48)) {
      goto LABEL_19;
    }
    BOOL v10 = *(void *)(v2 + 56) == 0LL;
  }

  if (!v10 || v8)
  {
LABEL_19:
    uint64_t result = nx_corruption_detected_int(*(void *)(*a1 + 392LL));
    if ((_DWORD)result) {
      return result;
    }
  }

uint64_t nx_reap_list_init_phys(uint64_t a1, unsigned int a2)
{
  unint64_t v2 = ((unint64_t)a2 - 64) / 0x28;
  *(_DWORD *)(a1 + 44) = v2;
  *(void *)(a1 + 52) = -1LL;
  *(_DWORD *)(a1 + 60) = 0;
  uint64_t v3 = (v2 - 1);
  if ((_DWORD)v3)
  {
    uint64_t v4 = 0LL;
    unint64_t v5 = (_DWORD *)(a1 + 64);
    do
    {
      _DWORD *v5 = ++v4;
      v5 += 10;
    }

    while (v3 != v4);
  }

  else
  {
    LODWORD(v3) = 0;
  }

  *(_DWORD *)(a1 + 40LL * v3 + 64) = -1;
  return 0LL;
}

uint64_t nx_reap_list_init(void *a1)
{
  unint64_t v2 = (_DWORD *)a1[7];
  unsigned int v3 = v2[11];
  BOOL v4 = v3 > (((unint64_t)obj_size_phys((uint64_t)a1) - 64) / 0x28);
  unsigned int v6 = v2[11];
  unsigned int v5 = v2[12];
  if (v4) {
    int v7 = 2;
  }
  else {
    int v7 = 1;
  }
  if (v5 <= v6) {
    int v8 = v4;
  }
  else {
    int v8 = v7;
  }
  unsigned int v9 = v2[13];
  unsigned int v10 = v2[14];
  if (v9 != -1 && v9 >= v6) {
    ++v8;
  }
  if (v10 != -1 && v10 >= v6) {
    ++v8;
  }
  unsigned int v13 = v2[15];
  if (v13 != -1 && v13 >= v6) {
    int v15 = v8 + 1;
  }
  else {
    int v15 = v8;
  }
  if (v5 == 1)
  {
    BOOL v16 = v9 == v10;
  }

  else
  {
    if (v5)
    {
      if (v15) {
        goto LABEL_36;
      }
      goto LABEL_37;
    }

    BOOL v16 = v9 == -1 && v10 == -1;
  }

  if (!v16 || v15 != 0)
  {
LABEL_36:
    uint64_t result = nx_corruption_detected_int(*(void *)(*a1 + 392LL));
    if ((_DWORD)result) {
      return result;
    }
  }

uint64_t nx_reaper_obj_get( uint64_t *a1, int a2, int a3, unint64_t a4, unint64_t a5, uint64_t **a6, char **a7)
{
  uint64_t v23 = 0LL;
  unsigned int v22 = 0;
  uint64_t v20 = 0LL;
  uint64_t v21 = 0LL;
  *a7 = 0LL;
  *a6 = 0LL;
  if (a4)
  {
    uint64_t v14 = obj_get(a1[49], 0, a4, (int *)&apfs_desc, 0LL, 0LL, 0LL, 0LL, (uint64_t *)&v23);
    if ((_DWORD)v14)
    {
      uint64_t v15 = v14;
      log_err( "%s:%d: %s unable to get fs object 0x%llx: %d\n",  "nx_reaper_obj_get",  1140,  (const char *)(a1[48] + 208),  a4,  v14);
      return v15;
    }

    unsigned int v17 = v23;
  }

  else
  {
    unsigned int v17 = 0LL;
  }

  *a6 = v17;
  if ((a2 & 0x4000FFFF) == 0x4000000B)
  {
    uint64_t v18 = (uint64_t)(v17 ? v17 : a1);
  }

  uint64_t v16 = obj_descriptor_and_flags_for_type(a2, &v22, (uint64_t)&v20);
  if ((_DWORD)v16
    || (LODWORD(v21) = a3,
        uint64_t v16 = obj_get(a1[49], v22, a5, (int *)&v20, 0LL, (uint64_t)v23, 0LL, 0LL, (uint64_t *)a7),
        (_DWORD)v16))
  {
    log_err( "%s:%d: %s unable to get object 0x%llx: %d\n",  "nx_reaper_obj_get",  1161,  (const char *)(a1[48] + 208),  a5,  v16);
    if (v23) {
      obj_release(v23);
    }
    *a7 = 0LL;
    *a6 = 0LL;
  }

  return v16;
}

uint64_t nx_reaper_add(uint64_t a1, int a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, void *a8)
{
  uint64_t v46 = 0LL;
  unint64_t v47 = 0LL;
  uint64_t v44 = 0LL;
  uint64_t v45 = 0LL;
  uint64_t v16 = nx_reaper_get((void *)a1, &v47);
  if ((_DWORD)v16) {
    return v16;
  }
  uint64_t v17 = *((void *)v47 + 47);
  uint64_t v16 = obj_descriptor_funcs_for_type(a2, &v44);
  if ((_DWORD)v16)
  {
LABEL_3:
    log_err( "%s:%d: %s object type 0x%x not reapable: %d\n",  "nx_reaper_add",  1357,  (const char *)(*(void *)(a1 + 384) + 208LL),  a2,  v16);
LABEL_14:
    obj_release(v47);
    return v16;
  }

  if (!*(void *)(v44 + 24))
  {
    uint64_t v16 = 22LL;
    goto LABEL_3;
  }

  obj_lock((uint64_t)v47, 2);
  uint64_t v18 = obj_modify(v47, 0, a6);
  if ((_DWORD)v18)
  {
    uint64_t v16 = v18;
LABEL_13:
    obj_unlock((uint64_t)v47, 2);
    goto LABEL_14;
  }

  int v19 = *(pthread_mutex_t **)(a1 + 392);
  if (*(_OWORD *)(v17 + 48) == 0LL)
  {
    uint64_t v20 = obj_create(v19, 0x80000000, 0LL, (uint64_t)&nx_reap_list_desc, 0LL, 0LL, a6, &v46);
    if ((_DWORD)v20)
    {
      uint64_t v16 = v20;
      log_err("%s:%d: %s failed to create reap list: %d\n");
      goto LABEL_13;
    }

    uint64_t v23 = obj_oid(v46);
    *(void *)(v17 + 48) = v23;
    *(void *)(v17 + 56) = v23;
    unint64_t v24 = (_DWORD *)(v17 + 68);
    goto LABEL_17;
  }

  uint64_t v21 = obj_get(v19, 2147483649LL, *(void *)(v17 + 56), &nx_reap_list_desc, 0LL, 0LL, 0LL, a6, &v46);
  if ((_DWORD)v21)
  {
    uint64_t v16 = v21;
    log_err("%s:%d: %s failed to get reap list tail: %d\n");
    goto LABEL_13;
  }

  unint64_t v24 = (_DWORD *)(v17 + 68);
  if (!*(_DWORD *)(v17 + 68) && *(void *)(v17 + 48) == *(void *)(v17 + 56))
  {
LABEL_17:
    _DWORD *v24 = 1;
    obj_dirty((uint64_t)v47, a6, 0LL);
  }

  uint64_t v25 = *(_DWORD **)(v46 + 376);
  if (v25[12] > (v25[11] - 2))
  {
    uint64_t v26 = obj_create(*(pthread_mutex_t **)(a1 + 392), 0x80000000, 0LL, (uint64_t)&nx_reap_list_desc, 0LL, 0LL, a6, &v45);
    if ((_DWORD)v26)
    {
      uint64_t v16 = v26;
      obj_unlock((uint64_t)v47, 2);
      obj_release(v46);
      goto LABEL_14;
    }

    uint64_t v27 = obj_oid(v45);
    *(void *)(*(void *)(v46 + 376) + 32LL) = v27;
    *(void *)(v17 + 56) = obj_oid(v45);
    int v28 = *(_DWORD *)(v17 + 68);
    if (v28) {
      *(_DWORD *)(v17 + 68) = v28 + 1;
    }
    obj_dirty((uint64_t)v47, a6, 0LL);
    obj_release(v46);
    uint64_t v46 = v45;
    uint64_t v25 = *(_DWORD **)(v45 + 376);
  }

  uint64_t v29 = *(void *)(v17 + 32);
  *(void *)(v17 + 32) = v29 + 1;
  int v30 = v25[15];
  if (v30 == -1)
  {
    log_err( "%s:%d: %s reap list object free list erroneously empty?\n",  "nx_reaper_add",  1427,  (const char *)(*(void *)(a1 + 384) + 208LL));
    obj_unlock((uint64_t)v47, 2);
    obj_release(v46);
    obj_release(v47);
    uint64_t v43 = a1;
    return nx_corruption_detected_int(v43);
  }

  uint64_t v31 = &v25[10 * v30];
  int v34 = v31[16];
  uint64_t v32 = v31 + 16;
  int v33 = v34;
  v25[15] = v34;
  int v35 = v25[14];
  if (v35 != -1) {
    v25[10 * v35 + 16] = v30;
  }
  if (v25[13] == -1) {
    v25[13] = v30;
  }
  v25[14] = v30;
  int v36 = v25[12];
  v25[12] = v36 + 1;
  *uint64_t v32 = -1;
  int v37 = &v25[10 * v30];
  if ((a7 & 2) != 0) {
    int v38 = 21;
  }
  else {
    int v38 = 5;
  }
  v37[17] = v38;
  v37[18] = a2;
  v37[19] = a3;
  *((void *)v37 + 10) = a4;
  *((void *)v37 + 11) = a5;
  *((void *)v37 + 12) = a6;
  if (v33 == -1)
  {
    log_err( "%s:%d: %s reap list object free list erroneously empty?\n",  "nx_reaper_add",  1458,  (const char *)(*(void *)(a1 + 384) + 208LL));
    obj_unlock((uint64_t)v47, 2);
    obj_release(v46);
    obj_release(v47);
    uint64_t v43 = a1;
    return nx_corruption_detected_int(v43);
  }

  unsigned int v39 = &v25[10 * v33];
  int v40 = v39[16];
  *uint64_t v32 = v33;
  v25[14] = v33;
  v25[15] = v40;
  v25[12] = v36 + 2;
  if ((a7 & 2) != 0) {
    int v41 = 19;
  }
  else {
    int v41 = 3;
  }
  if ((a7 & 1) != 0) {
    v41 |= 0xCu;
  }
  v39[16] = -1;
  v39[17] = v41;
  v39[18] = a2;
  v39[19] = a3;
  *((void *)v39 + 10) = a4;
  *((void *)v39 + 11) = a5;
  *((void *)v39 + 12) = v29;
  obj_dirty(v46, a6, 0LL);
  obj_unlock((uint64_t)v47, 2);
  obj_release(v46);
  obj_release(v47);
  if (!a8) {
    return 0LL;
  }
  uint64_t v42 = v29;
  uint64_t v16 = 0LL;
  *a8 = v42;
  return v16;
}

uint64_t nx_reaper_add_sub_object(uint64_t a1, int a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7)
{
  uint64_t v40 = 0LL;
  int v41 = 0LL;
  uint64_t v38 = 0LL;
  uint64_t v39 = 0LL;
  uint64_t v14 = nx_reaper_get((void *)a1, &v41);
  if ((_DWORD)v14) {
    return v14;
  }
  uint64_t v15 = *((void *)v41 + 47);
  uint64_t v14 = obj_descriptor_funcs_for_type(a2, &v38);
  if ((_DWORD)v14)
  {
LABEL_3:
    log_err( "%s:%d: %s object type 0x%x not reapable: %d\n",  "nx_reaper_add_sub_object",  1536,  (const char *)(*(void *)(a1 + 384) + 208LL),  a2,  v14);
LABEL_4:
    obj_release(v41);
    return v14;
  }

  if (!*(void *)(v38 + 24))
  {
    uint64_t v14 = 22LL;
    goto LABEL_3;
  }

  obj_lock((uint64_t)v41, 2);
  uint64_t v17 = obj_modify(v41, 0, a6);
  if ((_DWORD)v17)
  {
    uint64_t v14 = v17;
    obj_unlock((uint64_t)v41, 2);
    goto LABEL_4;
  }

  uint64_t v18 = *(void *)(v15 + 48);
  if (!v18 && !*(void *)(v15 + 56))
  {
    uint64_t v21 = obj_create(*(pthread_mutex_t **)(a1 + 392), 0x80000000, 0LL, (uint64_t)&nx_reap_list_desc, 0LL, 0LL, a6, &v40);
    if ((_DWORD)v21)
    {
      uint64_t v14 = v21;
      log_err("%s:%d: %s failed to create reap list: %d\n");
      goto LABEL_14;
    }

    uint64_t v22 = obj_oid(v40);
    *(void *)(v15 + 48) = v22;
    *(void *)(v15 + 56) = v22;
    uint64_t v20 = (_DWORD *)(v15 + 68);
    goto LABEL_21;
  }

  uint64_t v19 = obj_get(*(void *)(a1 + 392), 2147483649LL, v18, &nx_reap_list_desc, 0LL, 0LL, 0LL, a6, &v40);
  if ((_DWORD)v19)
  {
    uint64_t v14 = v19;
    log_err("%s:%d: %s failed to get reap list head: %d\n");
LABEL_14:
    log_err( "%s:%d: %s failed to get reap list head: %d\n",  "nx_reaper_add_sub_object",  1572,  (const char *)(*(void *)(a1 + 384) + 208LL),  v14);
    obj_unlock((uint64_t)v41, 2);
    obj_release(v41);
    return v14;
  }

  uint64_t v20 = (_DWORD *)(v15 + 68);
  if (!*(_DWORD *)(v15 + 68) && *(void *)(v15 + 48) == *(void *)(v15 + 56))
  {
LABEL_21:
    *uint64_t v20 = 1;
    obj_dirty((uint64_t)v41, a6, 0LL);
  }

  uint64_t v23 = *(_DWORD **)(v40 + 376);
  if (v23[12] > v23[11] + ~(a7 & 1u))
  {
    uint64_t v24 = obj_create(*(pthread_mutex_t **)(a1 + 392), 0x80000000, 0LL, (uint64_t)&nx_reap_list_desc, 0LL, 0LL, a6, &v39);
    if ((_DWORD)v24)
    {
      uint64_t v14 = v24;
      obj_unlock((uint64_t)v41, 2);
      obj_release(v40);
      goto LABEL_4;
    }

    uint64_t v25 = v39;
    *(void *)(*(void *)(v39 + 376) + 32LL) = *(void *)(v15 + 48);
    *(void *)(v15 + 48) = obj_oid(v25);
    int v26 = *(_DWORD *)(v15 + 68);
    if (v26) {
      *(_DWORD *)(v15 + 68) = v26 + 1;
    }
    obj_dirty((uint64_t)v41, a6, 0LL);
    obj_release(v40);
    uint64_t v40 = v39;
    uint64_t v23 = *(_DWORD **)(v39 + 376);
  }

  int v27 = v23[15];
  if ((a7 & 1) != 0)
  {
    if (v27 == -1)
    {
      log_err( "%s:%d: %s reap list object free list erroneously empty?\n",  "nx_reaper_add_sub_object",  1608,  (const char *)(*(void *)(a1 + 384) + 208LL));
      obj_unlock((uint64_t)v41, 2);
      obj_release(v40);
      obj_release(v41);
      uint64_t v37 = a1;
      return nx_corruption_detected_int(v37);
    }

    int v28 = &v23[10 * v27];
    int v29 = v28[16];
    v23[15] = v29;
    int v30 = v23[14];
    v28[16] = v23[13];
    v23[13] = v27;
    if (v30 == -1) {
      v23[14] = v27;
    }
    ++v23[12];
    uint64_t v31 = &v23[10 * v27];
    if ((a7 & 2) != 0) {
      int v32 = 29;
    }
    else {
      int v32 = 13;
    }
    v31[17] = v32;
    v31[18] = a2;
    v31[19] = a3;
    *((void *)v31 + 10) = a4;
    *((void *)v31 + 11) = a5;
    *((void *)v31 + 12) = a6;
    int v27 = v29;
  }

  if (v27 == -1)
  {
    log_err( "%s:%d: %s reap list object free list erroneously empty?\n",  "nx_reaper_add_sub_object",  1636,  (const char *)(*(void *)(a1 + 384) + 208LL));
    obj_unlock((uint64_t)v41, 2);
    obj_release(v40);
    obj_release(v41);
    uint64_t v37 = a1;
    return nx_corruption_detected_int(v37);
  }

  int v33 = &v23[10 * v27];
  v23[15] = v33[16];
  int v34 = v23[14];
  v33[16] = v23[13];
  v23[13] = v27;
  if (v34 == -1) {
    v23[14] = v27;
  }
  ++v23[12];
  int v35 = &v23[10 * v27];
  if ((a7 & 2) != 0) {
    int v36 = 21;
  }
  else {
    int v36 = 5;
  }
  v35[17] = v36;
  v35[18] = a2;
  v35[19] = a3;
  *((void *)v35 + 10) = a4;
  *((void *)v35 + 11) = a5;
  *((void *)v35 + 12) = a6;
  obj_dirty(v40, a6, 0LL);
  obj_unlock((uint64_t)v41, 2);
  obj_release(v40);
  obj_release(v41);
  return 0LL;
}

void nx_reaper_check_for_work(uint64_t *a1)
{
  unsigned int v5 = 0LL;
  unsigned int v6 = 0LL;
  if (!nx_reaper_get(a1, &v6))
  {
    uint64_t v2 = *((void *)v6 + 47);
    obj_lock((uint64_t)v6, 2);
    if (!*(void *)(v2 + 88))
    {
      unint64_t v3 = *(void *)(v2 + 48);
      if (!v3
        || obj_get(a1[49], 0x80000000, v3, (int *)&nx_reap_list_desc, 0LL, 0LL, 0LL, 0LL, (uint64_t *)&v5))
      {
        goto LABEL_4;
      }

      uint64_t v4 = v5[47];
      if (!*(_DWORD *)(v4 + 48) && !*(void *)(v4 + 32))
      {
        obj_release(v5);
        goto LABEL_4;
      }

      obj_release(v5);
    }

    obj_unlock((uint64_t)v6, 2);
    nx_reaper(a1);
    obj_lock((uint64_t)v6, 2);
LABEL_4:
    obj_unlock((uint64_t)v6, 2);
    obj_release((uint64_t *)v6);
  }

uint64_t nx_reaper(uint64_t *a1)
{
  uint64_t v20 = 0LL;
  uint64_t v18 = 0LL;
  uint64_t v19 = 0LL;
  uint64_t v16 = 0LL;
  uint64_t v17 = 0LL;
  uint64_t result = nx_reaper_get(a1, &v20);
  if ((_DWORD)result) {
    return result;
  }
  uint64_t v3 = *((void *)v20 + 47);
  obj_lock((uint64_t)v20, 2);
  uint64_t v4 = v20;
  if (*((_DWORD *)v20 + 98) || *((_DWORD *)v20 + 99))
  {
    obj_unlock((uint64_t)v20, 2);
    obj_release((uint64_t *)v20);
    log_debug("%s:%d: reaper thread is exiting, returning EBUSY\n", "nx_reaper", 1792);
    return 16LL;
  }

  int v5 = 0;
  *((_DWORD *)v20 + 98) = 1;
  while (1)
  {
    unint64_t v14 = 0LL;
    unint64_t v15 = 0LL;
    obj_unlock((uint64_t)v4, 2);
    uint64_t v19 = 0LL;
    unsigned int v6 = tx_enter((uint64_t)a1, &v19);
    obj_lock((uint64_t)v20, 2);
    uint64_t v4 = v20;
    if (v6)
    {
LABEL_37:
      int v13 = 0;
      goto LABEL_41;
    }

    unsigned int v7 = obj_modify(v20, 0, v19);
    uint64_t v4 = v20;
    if (v7)
    {
      unsigned int v6 = v7;
LABEL_40:
      int v13 = 1;
      goto LABEL_41;
    }

    if (*(void *)(v3 + 88)) {
      goto LABEL_13;
    }
    if (*((_DWORD *)v20 + 99)) {
      goto LABEL_39;
    }
    unsigned int record = nx_reaper_next_record((uint64_t)a1, (uint64_t)v20, v19);
    if (record) {
      break;
    }
    uint64_t v4 = v20;
    if (!*(void *)(v3 + 88))
    {
LABEL_39:
      unsigned int v6 = 0;
      goto LABEL_40;
    }

void nx_reaper_shut_down(void *a1)
{
  uint64_t v4 = 0LL;
  if (!nx_reaper_get(a1, &v4))
  {
    obj_lock((uint64_t)v4, 2);
    uint64_t v2 = v4;
    ++*((_DWORD *)v4 + 99);
    obj_unlock((uint64_t)v2, 2);
    uint64_t v3 = (uint64_t *)a1[53];
    if (v3)
    {
      obj_release(v3);
      a1[53] = 0LL;
    }

    obj_release((uint64_t *)v4);
  }

uint64_t extent_list_key_cmp(uint64_t a1, void *a2, int a3, void *a4, int a5, int *a6)
{
  uint64_t result = 22LL;
  if (a3 == 8 && a5 == 8)
  {
    uint64_t result = 0LL;
    int v7 = *a2 > *a4;
    if (*a2 < *a4) {
      int v7 = -1;
    }
    *a6 = v7;
  }

  return result;
}

uint64_t nx_metadata_fragmented_extent_list_tree_get(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  if (!a2) {
    return 22LL;
  }
  for (uint64_t i = 432LL; i != 464; i += 8LL)
  {
    int v7 = *(char **)(a1 + i);
    if (v7 && obj_oid(*(void *)(a1 + i)) == a2)
    {
      obj_retain(v7);
      uint64_t v12 = 0LL;
      *a3 = (uint64_t)v7;
      return v12;
    }
  }

  obj_lock(a1, 2);
  uint64_t v8 = 0LL;
  int v9 = -1;
  do
  {
    uint64_t v10 = a1 + 8 * v8;
    int v11 = *(char **)(v10 + 432);
    if (v11)
    {
      if (obj_oid(*(void *)(v10 + 432)) == a2)
      {
        obj_retain(v11);
        *a3 = (uint64_t)v11;
        obj_unlock(a1, 2);
        return 0LL;
      }
    }

    else if (v9 == -1)
    {
      int v9 = v8;
    }

    ++v8;
  }

  while (v8 != 4);
  if (a2 < 0)
  {
    uint64_t v12 = btree_get(a1, 0x88000000, a2 & 0x7FFFFFFFFFFFFFFFLL, 0LL, 0, 0, 10, (uint64_t)extent_list_key_cmp, 0LL, a3);
  }

  else
  {
    uint64_t v12 = btree_get(a1, 0x40000000u, a2, 0LL, 0, 0, 10, (uint64_t)extent_list_key_cmp, 0LL, a3);
    if (!(_DWORD)v12 && v9 != -1)
    {
      *(void *)(a1 + 8LL * v9 + 432) = *a3;
      obj_retain((char *)*a3);
      uint64_t v12 = 0LL;
    }
  }

  obj_unlock(a1, 2);
  return v12;
}

uint64_t nx_metadata_fragmented_sanity_check(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v18 = 0LL;
  uint64_t v15 = 0LL;
  unint64_t v16 = 0LL;
  uint64_t v14 = 0LL;
  memset(v13, 0, sizeof(v13));
  uint64_t v5 = nx_metadata_fragmented_extent_list_tree_get(a1, a2, (uint64_t *)&v18);
  if (!(_DWORD)v5)
  {
    unint64_t v17 = 0LL;
    bt_iterator_init((uint64_t)v13, (uint64_t)v18, 0LL, 0, &v17, 8, 8u, &v15, 0x10u);
    uint64_t v5 = v6;
    if (!(_DWORD)v6)
    {
      uint64_t v8 = 0LL;
      while (!bt_iterator_ended((uint64_t)v13))
      {
        if (v17 == v8) {
          uint64_t v5 = 0LL;
        }
        else {
          uint64_t v5 = nx_corruption_detected_int(a1);
        }
        unint64_t v9 = v16;
        if (v16 > (unint64_t)a3 - v8)
        {
          uint64_t v5 = nx_corruption_detected_int(a1);
          unint64_t v9 = v16;
        }

        if ((_DWORD)v5) {
          goto LABEL_3;
        }
        v8 += v9;
        uint64_t v10 = bt_iterator_next((uint64_t)v13);
        if ((_DWORD)v10)
        {
          uint64_t v5 = v10;
          int v11 = (const char *)(*(void *)(a1 + 384) + 208LL);
          uint64_t v12 = strerror(v10);
          log_err( "%s:%d: %s failed to get next extent in metadata fragmented extent list tree, error %s(%d)\n",  "nx_metadata_fragmented_sanity_check",  2445,  v11,  v12,  v5);
          goto LABEL_3;
        }
      }

      if (a3 == v8) {
        uint64_t v5 = 0LL;
      }
      else {
        uint64_t v5 = nx_corruption_detected_int(a1);
      }
    }

uint64_t nx_metadata_fragmented_block_address_lookup( uint64_t a1, uint64_t a2, unint64_t a3, void *a4, void *a5)
{
  uint64_t v16 = 0LL;
  uint64_t v13 = 0LL;
  unint64_t v14 = 0LL;
  uint64_t v8 = nx_metadata_fragmented_extent_list_tree_get(a1, a2, &v16);
  if (!(_DWORD)v8)
  {
    unint64_t v15 = a3;
    unsigned int v11 = 16;
    unsigned int v12 = 8;
    uint64_t v8 = bt_lookup_variant(v16, 0LL, &v15, &v12, 8u, &v13, &v11, 1u, 0, 0LL);
    if (!(_DWORD)v8)
    {
      uint64_t v9 = v14 - (a3 - v15);
      if (v14 <= a3 - v15)
      {
        uint64_t v8 = 2LL;
      }

      else
      {
        *a4 = v13 + a3 - v15;
        uint64_t v8 = 0LL;
        if (a5) {
          *a5 = v9;
        }
      }
    }

    obj_release(v16);
  }

  return v8;
}

uint64_t nx_metadata_range_overlap_check( void *a1, unint64_t a2, unint64_t a3, unint64_t *a4)
{
  uint64_t v8 = a1[60];
  if (!v8)
  {
    uint64_t v13 = 0LL;
    unint64_t v14 = 0LL;
    unint64_t v15 = a2;
    unsigned int v12 = 8;
    unsigned int v11 = 16;
    LODWORD(va_start(va, result) = bt_lookup_variant(a1[58], 0LL, &v15, &v12, 8u, &v13, &v11, 1u, 0, 0LL);
    if ((_DWORD)result || (unint64_t v10 = v15, a2 - v15 >= v14))
    {
      if ((_DWORD)result == 2) {
        uint64_t result = 0LL;
      }
      else {
        uint64_t result = result;
      }
      if (a3 < 2 || (_DWORD)result) {
        return result;
      }
      unint64_t v15 = a2;
      unsigned int v11 = 16;
      unsigned int v12 = 8;
      LODWORD(va_start(va, result) = bt_lookup_variant(a1[58], 0LL, &v15, &v12, 8u, &v13, &v11, 4u, 0, 0LL);
      if ((_DWORD)result || (unint64_t v10 = v15, v15 - a2 >= a3))
      {
        if ((_DWORD)result == 2) {
          return 0LL;
        }
        else {
          return result;
        }
      }
    }

    if (a4) {
      *a4 = v10;
    }
    return 17LL;
  }

  if (calc_overlap_range(a1[59], v8, a2, a3, a4)) {
    return 17LL;
  }
  if ((((uint64_t)0xBFFFFFFFFFFFFFFFLL >> __clz(__rbit64(*(unsigned int *)(a1[47] + 36LL)))) & a2) == 0)
  {
    if (a4) {
      *a4 = a2;
    }
    return 17LL;
  }

  return 0LL;
}

uint64_t nx_metadata_range_add(void *a1, unint64_t a2, int a3, char a4, int a5)
{
  if ((a4 & 1) == 0) {
    return nx_metadata_range_check_and_insert(a1, a2, a3 & 0x7FFFFFFF, a5);
  }
  uint64_t v18 = 0LL;
  unint64_t v15 = 0LL;
  unint64_t v16 = 0LL;
  memset(v13, 0, sizeof(v13));
  uint64_t v14 = 0LL;
  uint64_t v6 = nx_metadata_fragmented_extent_list_tree_get((uint64_t)a1, a2, (uint64_t *)&v18);
  if (!(_DWORD)v6)
  {
    uint64_t v7 = btree_iterate_nodes((uint64_t)v18, 0LL, 0, (uint64_t (*)(void))nx_metadata_range_add_btree_callback, 0LL, 0LL);
    if (!(_DWORD)v7)
    {
      unint64_t v17 = 0LL;
      bt_iterator_init((uint64_t)v13, (uint64_t)v18, 0LL, 0, &v17, 8, 8u, &v15, 0x10u);
      uint64_t v6 = v9;
      while (1)
      {
        uint64_t v7 = nx_metadata_range_check_and_insert(a1, v15, v16, 0);
        if ((_DWORD)v7) {
          break;
        }
        uint64_t v10 = bt_iterator_next((uint64_t)v13);
        if ((_DWORD)v10)
        {
          uint64_t v6 = v10;
          unsigned int v11 = (const char *)(a1[48] + 208LL);
          unsigned int v12 = strerror(v10);
          log_err( "%s:%d: %s failed to get next extent in metadata fragmented extent list tree, error %s(%d)\n",  "nx_metadata_range_add",  2681,  v11,  v12,  v6);
          goto LABEL_7;
        }

        if (bt_iterator_ended((uint64_t)v13))
        {
          uint64_t v6 = 0LL;
          goto LABEL_7;
        }
      }
    }

    uint64_t v6 = v7;
LABEL_7:
    obj_release(v18);
  }

  return v6;
}

uint64_t nx_metadata_range_check_and_insert(void *a1, unint64_t a2, unint64_t a3, int a4)
{
  if (a1[58])
  {
    uint64_t result = nx_metadata_range_overlap_check(a1, a2, a3, 0LL);
    if ((_DWORD)result) {
      return result;
    }
    goto LABEL_5;
  }

  uint64_t result = btree_create((uint64_t)a1, 0x88000000, 0, 10, 0, 8u, 16, (uint64_t)extent_list_key_cmp, 0LL, a1 + 58);
  if (!(_DWORD)result)
  {
LABEL_5:
    v8[1] = a3;
    unint64_t v9 = a2;
    v8[0] = a2;
    return bt_insert((void *)a1[58], 0LL, &v9, 8, v8, 0x10u, 0LL);
  }

  return result;
}

uint64_t nx_metadata_range_add_btree_callback(uint64_t a1)
{
  uint64_t v2 = *(void **)(*(void *)a1 + 392LL);
  unint64_t v3 = obj_oid(a1);
  unint64_t v4 = (obj_size_phys(a1) + *(_DWORD *)(v2[47] + 36LL) - 1) / *(_DWORD *)(v2[47] + 36LL);
  return nx_metadata_range_check_and_insert(v2, v3, v4, 0);
}

const char *nx_metadata_range_optimize(const char *result)
{
  *((void *)result + 59) = 0LL;
  *((void *)result + 60) = 0LL;
  uint64_t v1 = *((void *)result + 58);
  if (v1)
  {
    uint64_t v2 = result;
    __int128 v9 = 0uLL;
    memset(v6, 0, sizeof(v6));
    uint64_t v7 = 0LL;
    *(_OWORD *)uint64_t v8 = 0uLL;
    unint64_t v10 = 0LL;
    bt_iterator_init((uint64_t)v6, v1, 0LL, 0, &v10, 8, 8u, &v9, 0x10u);
    uint64_t result = (const char *)bt_iterator_ended((uint64_t)v6);
    if (!(_DWORD)result)
    {
      uint64_t v3 = 0LL;
      while (1)
      {
        uint64_t v4 = *((void *)&v9 + 1);
        uint64_t v5 = v9;
        if ((((uint64_t)0xBFFFFFFFFFFFFFFFLL >> __clz(__rbit64(*(unsigned int *)(*((void *)v2 + 47) + 36LL)))) & (unint64_t)v9) != 0)
        {
          if (*((void *)&v9 + 1)) {
            goto LABEL_9;
          }
        }

        else
        {
          uint64_t v5 = v9 + 1;
          uint64_t v4 = *((void *)&v9 + 1) - 1LL;
          *(void *)&__int128 v9 = v9 + 1;
          *((void *)&v9 + 1) = v4;
          if (v4)
          {
LABEL_9:
            if (v8[1] && v8[0] + v8[1] == v5)
            {
              v8[1] += v4;
            }

            else
            {
              ++v3;
              *(_OWORD *)uint64_t v8 = v9;
            }
          }
        }

        bt_iterator_next((uint64_t)v6);
        uint64_t result = (const char *)bt_iterator_ended((uint64_t)v6);
        if ((_DWORD)result)
        {
          if (v3 == 1) {
            *(_OWORD *)(v2 + 472) = *(_OWORD *)v8;
          }
          return result;
        }
      }
    }
  }

  return result;
}

uint64_t nx_checkpoint_desc_block_address(uint64_t a1, unint64_t a2, void *a3)
{
  uint64_t v3 = *(void *)(a1 + 376);
  int v4 = *(_DWORD *)(v3 + 104);
  if ((v4 & 0x7FFFFFFFu) <= a2) {
    return 22LL;
  }
  uint64_t v7 = *(void *)(v3 + 112);
  if (v4 < 0) {
    return nx_metadata_fragmented_block_address_lookup(a1, v7, a2, a3, 0LL);
  }
  uint64_t result = 0LL;
  *a3 = v7 + a2;
  return result;
}

uint64_t nx_checkpoint_data_block_address(uint64_t a1, unint64_t a2, void *a3, unint64_t *a4)
{
  uint64_t v4 = *(void *)(a1 + 376);
  int v5 = *(_DWORD *)(v4 + 108);
  unint64_t v6 = (v5 & 0x7FFFFFFF) - a2;
  if ((v5 & 0x7FFFFFFFu) <= a2) {
    return 22LL;
  }
  uint64_t v10 = *(void *)(v4 + 120);
  if (v5 < 0) {
    return nx_metadata_fragmented_block_address_lookup(a1, v10, a2, a3, a4);
  }
  *a3 = v10 + a2;
  uint64_t result = 0LL;
  if (a4) {
    *a4 = v6;
  }
  return result;
}

uint64_t nx_unblock_physical_range(void *a1)
{
  if (!*(void *)(a1[47] + 1256LL))
  {
LABEL_8:
    uint64_t v9 = 0LL;
    uint64_t v2 = tx_enter((uint64_t)a1, &v9);
    if ((_DWORD)v2) {
      return v2;
    }
    uint64_t v4 = spaceman_unset_block_out_range(a1, v9);
    if (!(_DWORD)v4) {
      return tx_leave((uint64_t)a1, v9, 0);
    }
    uint64_t v2 = v4;
    log_err("%s:%d: %s spaceman_unset_block_out_range failed with error %u\n");
    goto LABEL_11;
  }

  uint64_t v8 = 0LL;
  uint64_t v9 = 0LL;
  uint64_t v7 = 0LL;
  uint64_t v2 = tx_enter((uint64_t)a1, &v9);
  if ((_DWORD)v2) {
    return v2;
  }
  evict_mapping_int tree = nx_get_evict_mapping_tree( (uint64_t)a1,  0x40000000u,  *(void *)(a1[47] + 1256LL),  1,  1,  (uint64_t *)&v8);
  if ((_DWORD)evict_mapping_tree)
  {
    uint64_t v2 = evict_mapping_tree;
    log_err( "%s:%d: %s failed to get mapping tree, error: %d\n",  "nx_unblock_physical_range",  3023,  (const char *)(a1[48] + 208LL),  evict_mapping_tree);
    goto LABEL_11;
  }

  uint64_t v2 = btree_delete((uint64_t)v8, v9, &v7);
  obj_release(v8);
  if (!(_DWORD)v2)
  {
    *(void *)(a1[47] + 1256LL) = 0LL;
    uint64_t v2 = tx_leave((uint64_t)a1, v9, 0);
    if ((_DWORD)v2) {
      return v2;
    }
    goto LABEL_8;
  }

  log_err("%s:%d: %s failed to delete mapping, error: %d\n");
LABEL_11:
  int v5 = tx_leave((uint64_t)a1, v9, 0);
  if (v5) {
    log_err( "%s:%d: %s tx_leave failed with error: %d\n",  "nx_unblock_physical_range",  3067,  (const char *)(a1[48] + 208LL),  v5);
  }
  return v2;
}

uint64_t nx_ratelimit_log_allowed(uint64_t a1)
{
  if (!a1) {
    return 1LL;
  }
  uint64_t timestamp = get_timestamp();
  if ((unint64_t)(timestamp - *(void *)(a1 + 1792)) >= 0x3B9ACA01)
  {
    unint64_t v3 = 0LL;
    *(void *)(a1 + 1792) = timestamp;
LABEL_6:
    *(void *)(a1 + 1800) = v3 + 1;
    return 1LL;
  }

  unint64_t v3 = *(void *)(a1 + 1800);
  if (v3 <= 0xF) {
    goto LABEL_6;
  }
  return 0LL;
}

uint64_t nx_reaper_next_record(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a2 + 376);
  unint64_t v5 = *(void *)(v4 + 48);
  if (!v5) {
    return 0LL;
  }
  uint64_t v22 = 0LL;
  uint64_t v23 = 0LL;
  uint64_t v8 = obj_get(*(void *)(a1 + 392), 0x80000001, v5, (int *)&nx_reap_list_desc, 0LL, 0LL, 0LL, a3, (uint64_t *)&v23);
  if ((_DWORD)v8)
  {
    uint64_t v9 = v8;
    log_err( "%s:%d: %s failed to get reap list head: %d\n",  "nx_reaper_next_record",  1691,  (const char *)(*(void *)(a1 + 384) + 208LL),  v8);
    return v9;
  }

  uint64_t v10 = v23;
  if (*(void *)(v4 + 88))
  {
LABEL_21:
    obj_release(v10);
    return 0LL;
  }

  uint64_t v11 = v23[47];
  while (1)
  {
    while (1)
    {
      unsigned int v12 = *(_DWORD *)(v11 + 52);
      if (v12 == -1) {
        break;
      }
      uint64_t v13 = v11 + 40LL * v12;
      uint64_t v14 = (_DWORD *)(v13 + 68);
      *(_DWORD *)(v4 + 104) = *(_DWORD *)(v13 + 68);
      *(void *)(v4 + 72) = *(void *)(v13 + 72);
      *(_OWORD *)(v4 + 80) = *(_OWORD *)(v13 + 80);
      *(void *)(v4 + 96) = *(void *)(v13 + 96);
      obj_dirty(a2, a3, 0LL);
      int v17 = *(_DWORD *)(v13 + 64);
      unint64_t v16 = (_DWORD *)(v13 + 64);
      int v15 = v17;
      if (*(_DWORD *)(v11 + 52) == *(_DWORD *)(v11 + 56)) {
        *(_DWORD *)(v11 + 56) = v15;
      }
      _DWORD *v14 = 0;
      *unint64_t v16 = *(_DWORD *)(v11 + 60);
      *(_DWORD *)(v11 + 60) = v12;
      --*(_DWORD *)(v11 + 48);
      *(_DWORD *)(v11 + 52) = v15;
      obj_dirty((uint64_t)v23, a3, 0LL);
      if (*(void *)(v4 + 88)) {
        goto LABEL_20;
      }
    }

    unint64_t v18 = *(void *)(v11 + 32);
    if (!v18)
    {
      if (!*(_DWORD *)(v4 + 68) && *(void *)(v4 + 48) == *(void *)(v4 + 56))
      {
        *(_DWORD *)(v4 + 68) = 1;
        obj_dirty(a2, a3, 0LL);
      }

uint64_t spaceman_free_extent_cache_init( uint64_t a1, uint64_t a2, unsigned __int8 a3, unsigned int a4, char *a5)
{
  if (a4) {
    size_t v5 = a4;
  }
  else {
    size_t v5 = 0x10000LL;
  }
  bzero(a5, 0x558uLL);
  if (!a1 || (uint64_t result = new_lock((pthread_mutex_t *)(a5 + 16)), !(_DWORD)result))
  {
    *(void *)a5 = a1;
    *((void *)a5 + 1) = a2;
    *((_DWORD *)a5 + 22) = a3 | ((_DWORD)v5 << 8);
    uint64_t v11 = _apfs_calloc(v5, 0x18uLL);
    *((void *)a5 + 10) = v11;
    if (v11)
    {
      spaceman_free_extent_cache_table_init((uint64_t)a5);
      return 0LL;
    }

    else
    {
      if (a1) {
        free_lock((pthread_mutex_t *)(a5 + 16));
      }
      return 12LL;
    }
  }

  return result;
}

uint64_t spaceman_free_extent_cache_table_init(uint64_t result)
{
  unsigned int v1 = *(_DWORD *)(result + 88);
  if (v1 <= 0x2FF)
  {
    int v5 = (v1 >> 8) - 1;
    uint64_t v2 = *(void *)(result + 80);
  }

  else
  {
    uint64_t v2 = *(void *)(result + 80);
    int v3 = 1;
    int v4 = 1;
    do
    {
      *(void *)(v2 + 24LL * (unsigned __int16)v4++) = (v3 + 1);
      int v3 = (unsigned __int16)v4;
      int v5 = (*(_DWORD *)(result + 88) >> 8) - 1;
    }

    while (v5 > (unsigned __int16)v4);
  }

  *(void *)(v2 + 24LL * v5) = 0LL;
  *(_WORD *)(result + 92) = 1;
  return result;
}

void spaceman_free_extent_cache_destroy(uint64_t a1)
{
  if (a1)
  {
    uint64_t v2 = *(void **)(a1 + 80);
    if (v2)
    {
      _apfs_free(v2, 24 * ((unint64_t)*(unsigned int *)(a1 + 88) >> 8));
      *(void *)(a1 + 80) = 0LL;
    }

    if (*(void *)a1)
    {
      free_lock((pthread_mutex_t *)(a1 + 16));
      *(void *)a1 = 0LL;
    }
  }

uint64_t spaceman_free_extent_cache_reset(uint64_t a1)
{
  unsigned int v2 = *(_DWORD *)(a1 + 88);
  if (HIBYTE(v2))
  {
    uint64_t v5 = *(void *)a1;
    uint64_t v4 = *(void *)(a1 + 8);
    spaceman_free_extent_cache_destroy(a1);
    uint64_t result = spaceman_free_extent_cache_init(v5, v4, v2, (unsigned __int16)(v2 >> 8), (char *)a1);
    if ((_DWORD)result)
    {
      int v6 = *(unsigned __int8 *)(a1 + 88);
      uint64_t v7 = "main";
      if (v6 == 1) {
        uint64_t v7 = "tier2";
      }
      uint64_t result = (uint64_t)log_err( "%s:%d: %s dev %d Error reinitializing %s free extent cache: %d\n",  "spaceman_free_extent_cache_reset",  262,  (const char *)(*(void *)(*(void *)a1 + 384LL) + 208LL),  v6,  v7,  result);
      *(void *)(a1 + 280) |= 2uLL;
    }
  }

  else
  {
    bzero((void *)(a1 + 92), 0x4FCuLL);
    bzero(*(void **)(a1 + 80), 24LL * (unsigned __int16)(v2 >> 8));
    return spaceman_free_extent_cache_table_init(a1);
  }

  return result;
}

uint64_t spaceman_free_extent_cache_scan_should_pause(uint64_t a1, unint64_t a2)
{
  if (a2 <= 1) {
    unint64_t v2 = 1LL;
  }
  else {
    unint64_t v2 = a2;
  }
  if (*(void *)a1) {
    pthread_mutex_lock((pthread_mutex_t *)(a1 + 16));
  }
  unint64_t v5 = *(void *)(a1 + 176);
  if (v5 <= *(void *)(a1 + 224)) {
    unint64_t v5 = *(void *)(a1 + 224);
  }
  if (v5 < *(void *)(a1 + 248) || (uint64_t v6 = *(void *)(a1 + 128), (unint64_t)(v6 - *(void *)(a1 + 120)) > 3))
  {
LABEL_15:
    uint64_t v3 = 0LL;
  }

  else
  {
    *(void *)(a1 + 328) = v6;
    uint64_t v3 = 1LL;
  }

  if (*(void *)a1) {
    pthread_mutex_unlock((pthread_mutex_t *)(a1 + 16));
  }
  return v3;
}

void spaceman_free_extent_cache_print_stats(void *a1)
{
  int v30 = 0LL;
  if (!spaceman_get(a1, (uint64_t *)&v30))
  {
    uint64_t v1 = 0LL;
    for (char i = 1; ; char i = 0)
    {
      char v3 = i;
      uint64_t v4 = v30[47];
      unint64_t v5 = *(void *)(v4 + 48 * v1 + 48);
      if (!v5) {
        goto LABEL_42;
      }
      uint64_t v6 = v30[v1 + 196];
      if (!v6) {
        goto LABEL_42;
      }
      char v29 = v3;
      unint64_t v7 = *(void *)(v4 + 48 * v1 + 72);
      unint64_t v8 = *(unsigned __int16 *)(v6 + 94);
      if (*(void *)v6) {
        pthread_mutex_lock((pthread_mutex_t *)(v6 + 16));
      }
      uint64_t v9 = v6 + 1264;
      else {
        uint64_t v28 = *(void *)(*(void *)(v6 + 80)
      }
      if (spaceman_fxc_tree_first(v6, v6 + 1264))
      {
        uint64_t v10 = 0LL;
        uint64_t v11 = 0LL;
      }

      else
      {
        uint64_t v27 = *(void *)(*(void *)(v6 + 80) + 24LL
                                               * *(unsigned __int16 *)(v9 + 4LL * *(unsigned __int8 *)(v6 + 1361))) & 0xFFFFFFFFFFFFFLL;
        if (spaceman_fxc_tree_last(v6, v6 + 1264, 0))
        {
          uint64_t v11 = 0LL;
          uint64_t v10 = v27;
        }

        else
        {
          unsigned int v12 = (void *)(*(void *)(v6 + 80)
                         + 24LL * *(unsigned __int16 *)(v9 + 4LL * *(unsigned __int8 *)(v6 + 1361)));
          uint64_t v10 = v27;
          uint64_t v11 = (*v12 & 0xFFFFFFFFFFFFFLL) - v27 + (v12[1] & 0xFFFFFFFFFFFFFLL);
        }
      }

      unint64_t v13 = *(void *)(v6 + 96);
      if (v13 <= 1) {
        uint64_t v14 = 1LL;
      }
      else {
        uint64_t v14 = *(void *)(v6 + 96);
      }
      if (v7) {
        unint64_t v15 = v7;
      }
      else {
        unint64_t v15 = v14;
      }
      if ((_DWORD)v8) {
        unint64_t v16 = v13 / v8;
      }
      else {
        unint64_t v16 = 0LL;
      }
      log_info( "%s:%d: %s dev %d smfree %lld/%lld table %d/%d blocks %lld %lld:%lld:%lld %d.%02d%% range %lld:%lld %d.%02d%% scans %lld\n",  "spaceman_fxc_print_stats",  477,  (const char *)(*(void *)(*(void *)v6 + 384LL) + 208LL),  *(_DWORD *)(v6 + 88),  v7,  v5,  v8,  (*(_DWORD *)(v6 + 88) >> 8) - 1,  v13,  *(void *)(v6 + 120),  v16,  v28,  10000 * v13 / v15 / 0x64,  10000 * v13 / v15 % 0x64,  v10,  v11,  10000 * v11 / v5 / 0x64,  10000 * v11 / v5 % 0x64,  *(void *)(v6 + 336));
      int v17 = (void *)(v6 + 272);
      uint64_t v18 = 3LL;
      do
      {
        unint64_t v19 = *(v17 - 4);
        if (v19)
        {
          if (v7) {
            unint64_t v20 = v7;
          }
          else {
            unint64_t v20 = *(v17 - 4);
          }
          unint64_t v21 = *(v17 - 5);
          if (v21) {
            unint64_t v22 = v19 / v21;
          }
          else {
            unint64_t v22 = 0LL;
          }
          log_info( "%s:%d: %s dev %d scan_stats[%d]: foundmax %lld extents %lld blocks %lld long %lld avg %lld %d.%02d%% range % lld:%lld %d.%02d%%\n",  "spaceman_fxc_print_stats",  496,  (const char *)(*(void *)(*(void *)v6 + 384LL) + 208LL),  *(unsigned __int8 *)(v6 + 88),  v18 - 1,  *v17,  v21,  v19,  *(v17 - 3),  v22,  10000 * v19 / v20 / 0x64,  10000 * v19 / v20 % 0x64,  *(v17 - 2),  *(v17 - 1),  10000LL * *(v17 - 1) / v5 / 0x64,  10000LL * *(v17 - 1) / v5 % 0x64);
        }

        v17 -= 6;
        --v18;
      }

      while (v18);
      uint64_t v23 = *(void *)(v6 + 344);
      uint64_t v24 = *(void *)v6;
      if (v23)
      {
        log_info( "%s:%d: %s dev %d Searches: %lld success %lld fail %lld partial %lld, bm search yes:%lld (%lld/%lld/%lld) no:%lld/%lld\n",  "spaceman_fxc_print_stats",  509,  (const char *)(*(void *)(v24 + 384) + 208LL),  *(unsigned __int8 *)(v6 + 88),  v23,  *(void *)(v6 + 352),  *(void *)(v6 + 424),  *(void *)(v6 + 416),  *(void *)(v6 + 448),  *(void *)(v6 + 456),  *(void *)(v6 + 464),  *(void *)(v6 + 472),  *(void *)(v6 + 432),  *(void *)(v6 + 440));
        unint64_t v25 = *(void *)(v6 + 360);
        char v3 = v29;
        if (v25) {
          unint64_t v26 = *(void *)(v6 + 368) / v25;
        }
        else {
          unint64_t v26 = 0LL;
        }
        log_info( "%s:%d: %s dev %d Remainders: zero %lld one %lld tiny %lld small %lld good %lld, total %lld blocks %lld avg %lld\n",  "spaceman_fxc_print_stats",  515,  (const char *)(*(void *)(*(void *)v6 + 384LL) + 208LL),  *(unsigned __int8 *)(v6 + 88),  *(void *)(v6 + 408),  *(void *)(v6 + 400),  *(void *)(v6 + 392),  *(void *)(v6 + 384),  *(void *)(v6 + 376),  v25,  *(void *)(v6 + 368),  v26);
        if (!*(void *)v6) {
          goto LABEL_42;
        }
      }

      else
      {
        char v3 = v29;
        if (!v24) {
          goto LABEL_42;
        }
      }

      pthread_mutex_unlock((pthread_mutex_t *)(v6 + 16));
LABEL_42:
      uint64_t v1 = 1LL;
      if ((v3 & 1) == 0)
      {
        obj_release(v30);
        return;
      }
    }
  }

uint64_t spaceman_free_extent_cache_setup(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = 0LL;
  for (char i = 1; ; char i = 0)
  {
    char v6 = i;
    uint64_t v7 = a2 + 8 * v4;
    if (!*(void *)(v7 + 1568))
    {
      unint64_t v8 = *(void *)(*(void *)(a2 + 376) + 48 * v4 + 48);
      if (v8)
      {
        uint64_t v9 = v7 + 1568;
        uint64_t v10 = (char *)_apfs_calloc(1uLL, 0x558uLL);
        *(void *)uint64_t v9 = v10;
        if (!v10)
        {
          uint64_t v13 = 12LL;
          goto LABEL_13;
        }

        unint64_t v11 = v8 >> 18;
        if (v8 >> 18 >= 0xFF80) {
          LODWORD(v11) = 65408;
        }
        uint64_t v12 = spaceman_free_extent_cache_init(a1, a2, v4, (int)v11 + 128, v10);
        if ((_DWORD)v12) {
          break;
        }
      }
    }

    uint64_t v4 = 1LL;
    if ((v6 & 1) == 0) {
      return 0LL;
    }
  }

  uint64_t v13 = v12;
  if (*(void *)v9) {
    *(void *)(*(void *)v9 + 280LL) |= 2uLL;
  }
LABEL_13:
  log_err( "%s:%d: %s failed to initialize free extent cache for device %d, error %d\n",  "spaceman_free_extent_cache_setup",  1556,  (const char *)(*(void *)(a1 + 384) + 208LL),  v4,  v13);
  return v13;
}

uint64_t spaceman_free_extent_cache_insert(unint64_t a1, int a2, uint64_t a3, unint64_t a4)
{
  if (!a1) {
    return 22LL;
  }
  unint64_t v4 = a4;
  if ((a4 | a3) >> 52) {
    return 84LL;
  }
  if (!a4) {
    return 0LL;
  }
  if (*(void *)a1) {
    pthread_mutex_lock((pthread_mutex_t *)(a1 + 16));
  }
  uint64_t v8 = *(void *)(a1 + 280);
  if ((v8 & 2) == 0)
  {
    unint64_t v9 = a1 + 48LL * ((v8 & 4) == 0);
    unint64_t v11 = *(void *)(v9 + 176);
    uint64_t v10 = (unint64_t *)(v9 + 176);
    if (v11 < v4) {
      *uint64_t v10 = v4;
    }
    unsigned __int16 v74 = 0;
    int v12 = spaceman_fxc_tree_node_recycle_smallest_if_full(a1, v4, a3);
    if (v12 == 55)
    {
      unint64_t v13 = a1 + 16LL * (a2 ^ 1u);
      uint64_t v14 = *(void *)(v13 + 296);
      if (v14)
      {
        if (v14 < a3 && v4 + a3 < *(void *)(v13 + 304))
        {
          unint64_t v15 = (uint64_t *)(v13 + 296);
          spaceman_fxc_dropped(a1, a3, v4);
          uint64_t updated = 0LL;
          uint64_t *v15 = a3;
          goto LABEL_28;
        }
      }
    }

    int v17 = *(void **)a1;
    unint64_t v18 = a3;
    if (*(_BYTE *)(a1 + 88) == 1) {
      unint64_t v18 = (0x4000000000000000uLL >> __clz(__rbit64(*(unsigned int *)(v17[47] + 36LL)))) | a3;
    }
    int v19 = spaceman_extent_check(v17, *(void *)(a1 + 8), v18, v4);
    if (v19)
    {
      int v20 = v19;
      if (nx_ratelimit_log_allowed(*(void *)a1)) {
        log_err( "%s:%d: %s dev %d free extent %lld:%lld appears to span container metadata and should not be free: %d\n",  "spaceman_free_extent_cache_insert",  1648,  (const char *)(*(void *)(*(void *)a1 + 384LL) + 208LL),  *(unsigned __int8 *)(a1 + 88),  a3,  v4,  v20);
      }
      goto LABEL_25;
    }

    unint64_t v21 = (_OWORD *)(a1 + 1068);
    uint64_t updated = spaceman_fxc_tree_search(a1, 0, a3, v4, a1 + 1068);
    if ((_DWORD)updated) {
      goto LABEL_27;
    }
    int v23 = *((unsigned __int16 *)v21 + 2 * *(unsigned __int8 *)(a1 + 1165));
    uint64_t v24 = (_OWORD *)(a1 + 1166);
    __int128 v25 = *(_OWORD *)(a1 + 1148);
    *(_OWORD *)(a1 + 1230) = *(_OWORD *)(a1 + 1132);
    *(_OWORD *)(a1 + 1246) = v25;
    *(_WORD *)(a1 + 1262) = *(_WORD *)(a1 + 1164);
    __int128 v26 = *(_OWORD *)(a1 + 1084);
    *(_OWORD *)(a1 + 1166) = *v21;
    *(_OWORD *)(a1 + 1182) = v26;
    __int128 v27 = *(_OWORD *)(a1 + 1116);
    *(_OWORD *)(a1 + 1198) = *(_OWORD *)(a1 + 1100);
    *(_OWORD *)(a1 + 1214) = v27;
    if (v23)
    {
      uint64_t updated = 0LL;
    }

    else
    {
      uint64_t v48 = spaceman_fxc_tree_adjacent(a1, a1 + 1166, -1);
      uint64_t updated = v48;
      if ((v48 & 0xFFFFFFFD) != 0) {
        goto LABEL_27;
      }
      if ((_DWORD)v48 == 2)
      {
        uint64_t updated = 2LL;
        goto LABEL_34;
      }
    }

    unsigned int v28 = *((unsigned __int16 *)v24 + 2 * *(unsigned __int8 *)(a1 + 1263));
    char v29 = (void *)(*(void *)(a1 + 80) + 24LL * *((unsigned __int16 *)v24 + 2 * *(unsigned __int8 *)(a1 + 1263)));
    uint64_t v30 = *v29 & 0xFFFFFFFFFFFFFLL;
    unint64_t v31 = v29[1] & 0xFFFFFFFFFFFFFLL;
    if (v31 + v30 >= a3)
    {
      unint64_t v4 = v4 + a3 - v30;
      __int128 v49 = *(_OWORD *)(a1 + 1246);
      *(_OWORD *)(a1 + 1132) = *(_OWORD *)(a1 + 1230);
      *(_OWORD *)(a1 + 1148) = v49;
      *(_WORD *)(a1 + 1164) = *(_WORD *)(a1 + 1262);
      __int128 v50 = *(_OWORD *)(a1 + 1182);
      _OWORD *v21 = *v24;
      *(_OWORD *)(a1 + 1084) = v50;
      __int128 v51 = *(_OWORD *)(a1 + 1214);
      *(_OWORD *)(a1 + 1100) = *(_OWORD *)(a1 + 1198);
      *(_OWORD *)(a1 + 1116) = v51;
      if (v4 <= v31)
      {
        if ((_DWORD)updated)
        {
          uint64_t updated = 1LL;
          goto LABEL_27;
        }

        goto LABEL_28;
      }

      uint64_t updated = spaceman_fxc_update_length(a1, v30, v31, v4, v28);
      if ((_DWORD)updated) {
        goto LABEL_27;
      }
      unint64_t v52 = a1 + 48LL * ((*(_DWORD *)(a1 + 280) & 4) == 0);
      unint64_t v54 = *(void *)(v52 + 176);
      __int128 v53 = (unint64_t *)(v52 + 176);
      if (v54 < v4) {
        unint64_t *v53 = v4;
      }
      spaceman_fxc_insert_invalidate_last_unwanted_ranges_if_needed(a1, v30, v4);
      uint64_t updated = 0LL;
LABEL_35:
      int v32 = *(char *)(a1 + 1165);
      if (v32 < 0 || *((_WORD *)v21 + 2 * *(unsigned __int8 *)(a1 + 1165)))
      {
        if (!(_DWORD)updated)
        {
LABEL_38:
          unsigned int v72 = *((unsigned __int16 *)v21 + 2 * v32);
          unint64_t v73 = v4 + v30;
          unint64_t v33 = v4;
          while (1)
          {
            __int128 v34 = *(_OWORD *)(a1 + 1148);
            *(_OWORD *)(a1 + 1230) = *(_OWORD *)(a1 + 1132);
            *(_OWORD *)(a1 + 1246) = v34;
            *(_WORD *)(a1 + 1262) = *(_WORD *)(a1 + 1164);
            __int128 v35 = *(_OWORD *)(a1 + 1084);
            _OWORD *v24 = *v21;
            *(_OWORD *)(a1 + 1182) = v35;
            __int128 v36 = *(_OWORD *)(a1 + 1116);
            *(_OWORD *)(a1 + 1198) = *(_OWORD *)(a1 + 1100);
            *(_OWORD *)(a1 + 1214) = v36;
            uint64_t v37 = spaceman_fxc_tree_adjacent(a1, a1 + 1166, 1);
            if ((_DWORD)v37) {
              break;
            }
            unsigned int v38 = *((unsigned __int16 *)v24 + 2 * *(unsigned __int8 *)(a1 + 1263));
            uint64_t v39 = *(void *)(a1 + 80);
            unint64_t v40 = *(void *)(v39 + 24LL * *((unsigned __int16 *)v24 + 2 * *(unsigned __int8 *)(a1 + 1263))) & 0xFFFFFFFFFFFFFLL;
            if (v73 < v40) {
              goto LABEL_68;
            }
            uint64_t v41 = v30;
            unint64_t v42 = *(void *)(v39 + 24LL * *((unsigned __int16 *)v24 + 2 * *(unsigned __int8 *)(a1 + 1263)) + 8) & 0xFFFFFFFFFFFFFLL;
            if (v42 + v40 >= v73) {
              unint64_t v43 = v42 + v40 - v73;
            }
            else {
              unint64_t v43 = 0LL;
            }
            spaceman_fxc_tree_delete_at_path(a1, a1 + 1166);
            uint64_t v44 = spaceman_fxc_tree_search(a1, 1u, v40, v42, a1 + 1068);
            if ((_DWORD)v44)
            {
              uint64_t v61 = v44;
LABEL_74:
              log_err( "%s:%d: %s dev %d Failed to find successor node in length tree: %d\n",  "spaceman_free_extent_cache_insert",  1852,  (const char *)(*(void *)(*(void *)a1 + 384LL) + 208LL),  *(unsigned __int8 *)(a1 + 88),  v61);
              uint64_t updated = v61;
              goto LABEL_27;
            }

            if (!*((_WORD *)v21 + 2 * *(unsigned __int8 *)(a1 + 1165)))
            {
              uint64_t v61 = 2LL;
              goto LABEL_74;
            }

            if (v40 == *(void *)(a1 + 112))
            {
              __int128 v45 = *(_OWORD *)(a1 + 1148);
              *(_OWORD *)(a1 + 1230) = *(_OWORD *)(a1 + 1132);
              *(_OWORD *)(a1 + 1246) = v45;
              *(_WORD *)(a1 + 1262) = *(_WORD *)(a1 + 1164);
              __int128 v46 = *(_OWORD *)(a1 + 1084);
              _OWORD *v24 = *v21;
              *(_OWORD *)(a1 + 1182) = v46;
              __int128 v47 = *(_OWORD *)(a1 + 1116);
              *(_OWORD *)(a1 + 1198) = *(_OWORD *)(a1 + 1100);
              *(_OWORD *)(a1 + 1214) = v47;
              spaceman_fxc_update_smallest_with_successor(a1, a1 + 1166);
            }

            v33 += v43;
            spaceman_fxc_tree_delete_at_path(a1, a1 + 1068);
            spaceman_fxc_tree_node_free(a1, v38);
            uint64_t v30 = v41;
            uint64_t updated = spaceman_fxc_tree_search(a1, 0, v41, v4, a1 + 1068);
            if ((_DWORD)updated) {
              goto LABEL_27;
            }
          }

          uint64_t updated = v37;
          if ((_DWORD)v37 != 2) {
            goto LABEL_27;
          }
LABEL_68:
          if (v33 <= v4) {
            goto LABEL_25;
          }
          uint64_t updated = spaceman_fxc_update_length(a1, v30, v4, v33, v72);
          if (!(_DWORD)updated)
          {
            unint64_t v58 = a1 + 48LL * ((*(_DWORD *)(a1 + 280) & 4) == 0);
            unint64_t v60 = *(void *)(v58 + 176);
            unint64_t v59 = (unint64_t *)(v58 + 176);
            if (v60 >= v33) {
              goto LABEL_25;
            }
            uint64_t updated = 0LL;
            unint64_t *v59 = v33;
            goto LABEL_28;
          }

          goto LABEL_27;
        }

        goto LABEL_27;
      }

      if (v12 != 55)
      {
        unsigned __int16 v74 = 0;
        uint64_t updated = spaceman_fxc_tree_insert_at_path(a1, v30, v4, &v74, a1 + 1068);
        if (!(_DWORD)updated)
        {
          uint64_t v57 = spaceman_fxc_tree_insert(a1, 1u, v30, v4, &v74);
          if ((_DWORD)v57)
          {
            uint64_t updated = v57;
          }

          else
          {
            uint64_t v71 = *(void *)(a1 + 120);
            if (v71 - 1 >= v4 || v4 == v71 && v30 > *(void *)(a1 + 112))
            {
              *(void *)(a1 + 112) = v30;
              *(void *)(a1 + 120) = v4;
            }

            if (v4 > *(void *)(a1 + 128)) {
              *(void *)(a1 + 128) = v4;
            }
            uint64_t updated = spaceman_fxc_tree_search(a1, 0, v30, v4, a1 + 1068);
            spaceman_fxc_insert_invalidate_last_unwanted_ranges_if_needed(a1, v30, v4);
            LOBYTE(v32) = *(_BYTE *)(a1 + 1165);
            if (!(_DWORD)updated) {
              goto LABEL_38;
            }
          }
        }

uint64_t spaceman_fxc_tree_node_recycle_smallest_if_full(uint64_t a1, unint64_t a2, uint64_t a3)
{
  if (*(_WORD *)(a1 + 92)) {
    return 0LL;
  }
  unint64_t v5 = *(void *)(a1 + 120);
  if (v5 > a2) {
    return 55LL;
  }
  uint64_t v7 = (void *)(a1 + 112);
  uint64_t v8 = *(void *)(a1 + 112);
  if (v5 == a2 && v8 < a3) {
    return 55LL;
  }
  if (!v8) {
    return 0LL;
  }
  uint64_t v10 = (_OWORD *)(a1 + 480);
  if (spaceman_fxc_tree_search(a1, 0, v8, v5, a1 + 480)
    || (uint64_t v11 = 4LL * *(unsigned __int8 *)(a1 + 577),
        unsigned int v12 = *(unsigned __int16 *)((char *)v10 + v11),
        !*(_WORD *)((char *)v10 + v11)))
  {
    log_err("%s:%d: %s dev %d Failed to find smallest extent in paddr tree: %d\n");
  }

  else
  {
    spaceman_fxc_tree_delete_at_path(a1, a1 + 480);
    if (spaceman_fxc_tree_search(a1, 1u, *(void *)(a1 + 112), *(void *)(a1 + 120), a1 + 480)
      || !*((_WORD *)v10 + 2 * *(unsigned __int8 *)(a1 + 577)))
    {
      log_err("%s:%d: %s dev %d Failed to find smallest extent %d in length tree: %d\n");
    }

    else
    {
      spaceman_fxc_dropped(a1, *(void *)(a1 + 112), *(void *)(a1 + 120));
      __int128 v13 = *(_OWORD *)(a1 + 560);
      *(_OWORD *)(a1 + 642) = *(_OWORD *)(a1 + 544);
      *(_OWORD *)(a1 + 658) = v13;
      *(_WORD *)(a1 + 674) = *(_WORD *)(a1 + 576);
      __int128 v14 = *(_OWORD *)(a1 + 496);
      *(_OWORD *)(a1 + 578) = *v10;
      *(_OWORD *)(a1 + 594) = v14;
      __int128 v15 = *(_OWORD *)(a1 + 528);
      *(_OWORD *)(a1 + 610) = *(_OWORD *)(a1 + 512);
      *(_OWORD *)(a1 + 626) = v15;
      int v16 = spaceman_fxc_tree_adjacent(a1, a1 + 578, 1);
      if (!v16)
      {
        *(int8x16_t *)(a1 + 112) = vandq_s8( *(int8x16_t *)(*(void *)(a1 + 80)
                                                  + 24LL
                                                  * *(unsigned __int16 *)(a1 + 578 + 4LL
                                                                                   * *(unsigned __int8 *)(a1 + 675))),
                                     (int8x16_t)vdupq_n_s64(0xFFFFFFFFFFFFFuLL));
        goto LABEL_23;
      }

      if (v16 == 2)
      {
        *uint64_t v7 = 0LL;
        *(void *)(a1 + 120) = 0LL;
        *(void *)(a1 + 128) = 0LL;
LABEL_23:
        spaceman_fxc_tree_delete_at_path(a1, a1 + 480);
        spaceman_fxc_tree_node_free(a1, v12);
        return 0LL;
      }

      log_err("%s:%d: %s dev %d Failed to find next smallest extent in length tree: %d\n");
    }
  }

  return 3LL;
}

uint64_t spaceman_fxc_dropped(uint64_t a1, uint64_t a2, unint64_t a3)
{
  BOOL v3 = (*(_DWORD *)(a1 + 280) & 4) == 0;
  uint64_t v4 = a1 + 48LL * ((*(_DWORD *)(a1 + 280) & 4) == 0);
  unint64_t v6 = *(void *)(v4 + 152);
  unint64_t v5 = (unint64_t *)(v4 + 152);
  if (v6 < a3) {
    unint64_t *v5 = a3;
  }
  uint64_t v7 = (void *)(a1 + 48LL * v3);
  uint64_t v8 = v7[17];
  uint64_t v9 = v7[18];
  v7 += 17;
  *uint64_t v7 = v8 + 1;
  v7[1] = v9 + a3;
  return spaceman_fxc_dropped_range_update((uint64_t)v7, a2, a3);
}

uint64_t spaceman_fxc_tree_search(uint64_t a1, unsigned int a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  *(_WORD *)(a5 + 96) = 0;
  *(_OWORD *)(a5 + 64) = 0u;
  *(_OWORD *)(a5 + 80) = 0u;
  *(_OWORD *)(a5 + 32) = 0u;
  *(_OWORD *)(a5 + 48) = 0u;
  *(_OWORD *)a5 = 0u;
  *(_OWORD *)(a5 + 16) = 0u;
  *(_BYTE *)(a5 + 96) = a2;
  uint64_t v10 = *(unsigned __int16 *)(a1 + 2LL * a2 + 104);
  *(_WORD *)a5 = v10;
  if (v10)
  {
    uint64_t v11 = *(void *)(a1 + 80) + 24LL * v10;
    if (a2) {
      char v12 = *(_BYTE *)(v11 + 15);
    }
    else {
      char v12 = *(_BYTE *)(v11 + 7);
    }
    *(_BYTE *)(a5 + 2) = v12;
  }

  uint64_t v13 = 4LL * *(unsigned __int8 *)(a5 + 97);
  unsigned int v14 = *(unsigned __int16 *)(a5 + v13);
  if (*(_WORD *)(a5 + v13))
  {
    do
    {
      uint64_t v15 = *(void *)(a1 + 80);
      int v16 = (void *)(v15 + 24LL * v14);
      if (a2)
      {
        unint64_t v17 = *(void *)(v15 + 24LL * v14 + 8) & 0xFFFFFFFFFFFFFLL;
        BOOL v18 = v17 > a4;
        int v19 = v17 < a4;
        if (v18) {
          int v19 = -1;
        }
        if (!v19)
        {
          uint64_t v20 = *v16 & 0xFFFFFFFFFFFFFLL;
          int v19 = v20 > a3;
          if (v20 < a3) {
            goto LABEL_18;
          }
        }
      }

      else
      {
        uint64_t v21 = *v16 & 0xFFFFFFFFFFFFFLL;
        int v19 = v21 < a3;
        if (v21 > a3) {
          goto LABEL_18;
        }
      }

      if (!v19) {
        return 0LL;
      }
      if (v19 < 0)
      {
LABEL_18:
        uint64_t v22 = a1;
        uint64_t v23 = a5;
        __int16 v24 = -1;
        goto LABEL_19;
      }

      uint64_t v22 = a1;
      uint64_t v23 = a5;
      __int16 v24 = 1;
LABEL_19:
      uint64_t result = spaceman_fxtp_add_child(v22, v23, v24);
      if ((_DWORD)result) {
        return result;
      }
      uint64_t v26 = 4LL * *(unsigned __int8 *)(a5 + 97);
      unsigned int v14 = *(unsigned __int16 *)(a5 + v26);
    }

    while (*(_WORD *)(a5 + v26));
  }

  return 0LL;
}

uint64_t spaceman_fxc_update_length( uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4, unsigned int a5)
{
  __int16 v29 = a5;
  uint64_t v10 = a1 + 676;
  uint64_t v11 = *(void *)(a1 + 112);
  uint64_t v12 = spaceman_fxc_tree_search(a1, 1u, a2, a3, a1 + 676);
  if ((_DWORD)v12) {
    return v12;
  }
  if (*(unsigned __int16 *)(v10 + 4LL * *(unsigned __int8 *)(a1 + 773)) != a5)
  {
    log_err( "%s:%d: %s dev %d length tree search for 0x%llx 0x%llx returned node %d instead of %d\n",  "spaceman_fxc_update_length",  1400,  (const char *)(*(void *)(*(void *)a1 + 384LL) + 208LL),  *(unsigned __int8 *)(a1 + 88),  a2,  a3,  *(unsigned __int16 *)(v10 + 4LL * *(unsigned __int8 *)(a1 + 773)),  a5);
    return 22LL;
  }

  unsigned int v14 = (_OWORD *)(a1 + 774);
  uint64_t v15 = *(void *)(a1 + 96);
  uint64_t v16 = *(void *)(a1 + 80) + 24LL * a5;
  *(void *)(v16 + 8) = *(void *)(v16 + 8) & 0xFFF0000000000000LL | a4 & 0xFFFFFFFFFFFFFLL;
  *(void *)(a1 + 96) = a4 - a3 + v15;
  if (a4 <= a3)
  {
    if (v11 != a2)
    {
      __int128 v21 = *(_OWORD *)(v10 + 80);
      *(_OWORD *)(a1 + 838) = *(_OWORD *)(v10 + 64);
      *(_OWORD *)(a1 + 854) = v21;
      *(_WORD *)(a1 + 870) = *(_WORD *)(v10 + 96);
      __int128 v22 = *(_OWORD *)(v10 + 16);
      _OWORD *v14 = *(_OWORD *)v10;
      *(_OWORD *)(a1 + 790) = v22;
      __int128 v23 = *(_OWORD *)(v10 + 48);
      *(_OWORD *)(a1 + 806) = *(_OWORD *)(v10 + 32);
      *(_OWORD *)(a1 + 822) = v23;
      uint64_t v24 = spaceman_fxc_tree_adjacent(a1, a1 + 774, -1);
      if ((_DWORD)v24)
      {
        uint64_t v12 = v24;
        if ((_DWORD)v24 == 2) {
          log_err( "%s:%d: %s dev %d Failed to find length tree predecessor for node that wasn't the smallest\n",  "spaceman_fxc_update_length",  1463,  (const char *)(*(void *)(*(void *)a1 + 384LL) + 208LL),  *(unsigned __int8 *)(a1 + 88));
        }
        return v12;
      }

      if ((*(void *)(*(void *)(a1 + 80) + 24LL * *((unsigned __int16 *)v14 + 2 * *(unsigned __int8 *)(a1 + 871)) + 8) & 0xFFFFFFFFFFFFFuLL) >= a4)
      {
        unint64_t v27 = *(void *)(a1 + 120);
        if (v27 > a4 || v27 == a4 && *(void *)(a1 + 112) < a2)
        {
          *(void *)(a1 + 112) = a2;
          *(void *)(a1 + 120) = a4;
        }

        goto LABEL_36;
      }

      goto LABEL_31;
    }
  }

  else
  {
    __int128 v17 = *(_OWORD *)(v10 + 80);
    *(_OWORD *)(a1 + 838) = *(_OWORD *)(v10 + 64);
    *(_OWORD *)(a1 + 854) = v17;
    *(_WORD *)(a1 + 870) = *(_WORD *)(v10 + 96);
    __int128 v18 = *(_OWORD *)(v10 + 16);
    _OWORD *v14 = *(_OWORD *)v10;
    *(_OWORD *)(a1 + 790) = v18;
    __int128 v19 = *(_OWORD *)(v10 + 48);
    *(_OWORD *)(a1 + 806) = *(_OWORD *)(v10 + 32);
    *(_OWORD *)(a1 + 822) = v19;
    uint64_t v20 = spaceman_fxc_tree_adjacent(a1, a1 + 774, 1);
    if ((_DWORD)v20)
    {
      uint64_t v12 = v20;
      if ((_DWORD)v20 != 2) {
        return v12;
      }
      if (v11 == a2) {
        *(void *)(a1 + 120) = a4;
      }
      if (*(void *)(a1 + 128) >= a4) {
        return 0LL;
      }
      uint64_t v12 = 0LL;
LABEL_38:
      *(void *)(a1 + 128) = a4;
      return v12;
    }

    int8x16_t v25 = vandq_s8( *(int8x16_t *)(*(void *)(a1 + 80) + 24LL * *((unsigned __int16 *)v14 + 2 * *(unsigned __int8 *)(a1 + 871))),  (int8x16_t)vdupq_n_s64(0xFFFFFFFFFFFFFuLL));
    if (v25.i64[1] < a4 || (v25.i64[1] == a4 ? (BOOL v26 = v25.i64[0] <= a2) : (BOOL v26 = 1), !v26))
    {
      if (v11 == a2) {
        *(int8x16_t *)(a1 + 112) = v25;
      }
LABEL_36:
      spaceman_fxc_tree_delete_at_path(a1, v10);
      uint64_t v12 = spaceman_fxc_tree_insert(a1, 1u, a2, a4, &v29);
      goto LABEL_37;
    }

    if (v11 != a2)
    {
LABEL_31:
      uint64_t v12 = 0LL;
      goto LABEL_37;
    }
  }

  uint64_t v12 = 0LL;
  *(void *)(a1 + 120) = a4;
LABEL_37:
  unint64_t v28 = *(void *)(a1 + 128);
  if (v28 < a4) {
    goto LABEL_38;
  }
  if (v28 == a3) {
    spaceman_fxc_update_longest_from_last(a1);
  }
  return v12;
}

unint64_t spaceman_fxc_insert_invalidate_last_unwanted_ranges_if_needed( unint64_t result, uint64_t a2, uint64_t a3)
{
  unint64_t v3 = result;
  uint64_t v4 = 0LL;
  unint64_t v5 = a2 - 1;
  uint64_t v6 = a3 + 2;
  char v7 = 1;
  do
  {
    char v8 = v7;
    unint64_t v9 = v3 + 16 * v4;
    unint64_t v10 = *(void *)(v9 + 296);
    if (v10)
    {
      uint64_t result = calc_overlap_range(v5, v6, v10, *(void *)(v9 + 304) - v10, 0LL);
      if (result) {
        *(void *)(v9 + 296) = 0LL;
      }
    }

    char v7 = 0;
    uint64_t v4 = 1LL;
  }

  while ((v8 & 1) != 0);
  return result;
}

uint64_t spaceman_fxc_tree_insert_at_path(uint64_t a1, uint64_t a2, uint64_t a3, _WORD *a4, uint64_t a5)
{
  uint64_t v6 = *(unsigned __int8 *)(a5 + 96);
  if (a4 && (LOWORD(v7) = *a4) != 0)
  {
    uint64_t v8 = *(void *)(a1 + 80);
    unint64_t v9 = (void *)(v8 + 24LL * (unsigned __int16)*a4);
    *((_DWORD *)v9 + v6 + 4) = 0;
    if ((_DWORD)v6) {
      ++v9;
    }
    *v9 &= 0xFFFFFFFFFFFFFFuLL;
  }

  else
  {
    unsigned int v7 = *(unsigned __int16 *)(a1 + 92);
    if (v7 > *(_DWORD *)(a1 + 88) >> 8) {
      return 22LL;
    }
    if (!*(_WORD *)(a1 + 92)) {
      return 12LL;
    }
    uint64_t v11 = (void *)(*(void *)(a1 + 80) + 24LL * *(unsigned __int16 *)(a1 + 92));
    *(_WORD *)(a1 + 92) = *v11;
    ++*(_WORD *)(a1 + 94);
    *(void *)(a1 + 96) += a3;
    v11[1] = 0LL;
    _OWORD v11[2] = 0LL;
    void *v11 = 0LL;
    if (a4) {
      *a4 = v7;
    }
    uint64_t v8 = *(void *)(a1 + 80);
    uint64_t v12 = (void *)(v8 + 24LL * v7);
    void *v12 = a2;
    v12[1] = a3;
  }

  uint64_t v10 = *(unsigned __int8 *)(a5 + 97);
  uint64_t v13 = (_WORD *)(a5 + 4 * v10);
  *uint64_t v13 = v7;
  v13[1] = 0;
  if (!v10)
  {
    *(_WORD *)(a1 + 2 * v6 + 104) = v7;
    return v10;
  }

  int v14 = (char)v10;
  *(_WORD *)(v8
           + 24LL * *(unsigned __int16 *)(a5 + 4LL * (v10 - 1))
           + 4 * v6
           + 2LL
           * ((*(char *)(a5 + 4LL * (v10 - 1) + 3)
                              + 1
  unsigned __int8 v15 = v10;
  if (((char)v10 & 0x80000000) == 0)
  {
    while (!*(_BYTE *)(a5 + 4LL * v15 + 2))
    {
      int v16 = (char)v15--;
      if (v16 <= 0)
      {
        unsigned __int8 v15 = -1;
        break;
      }
    }
  }

  int v17 = (char)(v15 + 1);
  if (v17 < v14)
  {
    LOBYTE(v18) = v15 + 1;
    do
    {
      __int128 v19 = (unsigned __int16 *)(a5 + 4LL * v18);
      uint64_t v20 = v8 + 24LL * *v19;
      if ((_DWORD)v6) {
        v20 += 8LL;
      }
      char v21 = *((_BYTE *)v19 + 3);
      *(_BYTE *)(v20 + 7) = v21;
      *((_BYTE *)v19 + 2) = v21;
      int v18 = (char)(v18 + 1);
    }

    while (v18 < v14);
  }

  if ((v15 & 0x80) != 0) {
    return 0LL;
  }
  __int128 v22 = (unsigned __int16 *)(a5 + 4LL * v15);
  int v23 = *((char *)v22 + 3);
  if (*((char *)v22 + 2) + v23)
  {
    if (*((unsigned __int8 *)v22 + 2) == *((unsigned __int8 *)v22 + 3))
    {
      if (v15) {
        int8x16_t v25 = (unsigned __int16 *)(v8
      }
                                 + 24LL * *(unsigned __int16 *)(a5 + 4LL * (v15 - 1))
                                 + 4 * v6
                                 + 2LL
                                 * ((*(char *)(a5 + 4LL * (v15 - 1) + 3)
                                                    + 1
      else {
        int8x16_t v25 = (unsigned __int16 *)(a1 + 2 * v6 + 104);
      }
      int v26 = -v23;
      unint64_t v27 = (unsigned __int16 *)(a5 + 4LL * v17);
      int v28 = *((unsigned __int8 *)v27 + 2);
      if (v28 == *((unsigned __int8 *)v22 + 3))
      {
        spaceman_fxc_tree_single_rotate(a1, v6, (char)v26, *v22, v25);
      }

      else if ((char)v28 == v26)
      {
        spaceman_fxc_tree_double_rotate(a1, v6, (char)v23, *v22, *v27, v25);
      }
    }

    return 0LL;
  }

  uint64_t v10 = 0LL;
  uint64_t v24 = (void *)(v8 + 24LL * *v22);
  if ((_DWORD)v6) {
    ++v24;
  }
  *v24 &= 0xFFFFFFFFFFFFFFuLL;
  return v10;
}

uint64_t spaceman_fxc_tree_insert(uint64_t a1, unsigned int a2, uint64_t a3, unint64_t a4, _WORD *a5)
{
  if ((a4 | a3) >> 52) {
    return 84LL;
  }
  uint64_t v10 = a1 + 872;
  if (!a5 || !*a5) {
    spaceman_fxc_tree_node_recycle_smallest_if_full(a1, a4, a3);
  }
  uint64_t result = spaceman_fxc_tree_search(a1, a2, a3, a4, v10);
  if (!(_DWORD)result)
  {
    else {
      return spaceman_fxc_tree_insert_at_path(a1, a3, a4, a5, v10);
    }
  }

  return result;
}

uint64_t spaceman_fxc_tree_delete(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if ((a3 | a2) >> 52) {
    return 84LL;
  }
  uint64_t v4 = a1 + 970;
  uint64_t result = spaceman_fxc_tree_search(a1, 0, a2, a3, a1 + 970);
  if (!(_DWORD)result)
  {
    if (*(_WORD *)(v4 + 4LL * *(unsigned __int8 *)(a1 + 1067)))
    {
      spaceman_fxc_tree_delete_at_path(a1, v4);
      return 0LL;
    }

    else
    {
      return 2LL;
    }
  }

  return result;
}

uint64_t spaceman_fxc_tree_node_free(uint64_t result, unsigned int a2)
{
  if (a2 <= *(_DWORD *)(result + 88) >> 8)
  {
    unint64_t v2 = (void *)(*(void *)(result + 80) + 24LL * a2);
    uint64_t v3 = v2[1] & 0xFFFFFFFFFFFFFLL;
    --*(_WORD *)(result + 94);
    *(void *)(result + 96) -= v3;
    *unint64_t v2 = *(unsigned __int16 *)(result + 92);
    *(_WORD *)(result + 92) = a2;
  }

  return result;
}

uint64_t spaceman_fxc_tree_delete_at_path(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(unsigned __int8 *)(a2 + 96);
  uint64_t v5 = *(unsigned __int8 *)(a2 + 97);
  int v6 = (char)v5;
  unsigned int v7 = (_WORD *)(a2 + 4 * v5);
  uint64_t v8 = *(void *)(result + 80);
  uint64_t v9 = v8 + 24LL * (unsigned __int16)*v7;
  if (*(_BYTE *)(a2 + 96)) {
    char v10 = *(_BYTE *)(v9 + 15);
  }
  else {
    char v10 = *(_BYTE *)(v9 + 7);
  }
  uint64_t v11 = v8 + 24LL * (unsigned __int16)*v7 + 4 * v4;
  unsigned int v12 = *(unsigned __int16 *)(v11 + 18);
  unsigned __int8 v13 = v5 - 1;
  if ((char)v5 < 1)
  {
    uint64_t v16 = 0LL;
    unsigned int v15 = 0;
  }

  else
  {
    int v14 = (unsigned __int16 *)(a2 + 4LL * v13);
    unsigned int v15 = *v14;
    LODWORD(v14) = *((char *)v14 + 3) + 1;
    uint64_t result = (unsigned __int16)v14 & 0x8000;
    uint64_t v16 = ((v14 + (result >> 15)) >> 1);
  }

  __int16 v17 = *(_WORD *)(v11 + 16);
  if (!v12)
  {
    if ((_BYTE)v5) {
      uint64_t v37 = (_WORD *)(v8 + 24LL * v15 + 4 * v4 + 2 * v16 + 16);
    }
    else {
      uint64_t v37 = (_WORD *)(v3 + 2 * v4 + 104);
    }
    *uint64_t v37 = v17;
    *(_BYTE *)(a2 + 97) = v13;
    if ((((_BYTE)v5 - 1) & 0x80) != 0) {
      return result;
    }
    goto LABEL_28;
  }

  uint64_t result = 24LL;
  uint64_t v18 = v8 + 24LL * v12 + 4 * v4;
  unsigned int v21 = *(unsigned __int16 *)(v18 + 16);
  uint64_t v20 = (_WORD *)(v18 + 16);
  unsigned int v19 = v21;
  if (v21)
  {
    uint64_t v22 = a2 + 4 * v5;
    *(_BYTE *)(v22 + 3) = 1;
    int v23 = (_BYTE *)(v22 + 3);
    int v24 = v6 + 1;
    *(_BYTE *)(a2 + 97) = v6 + 1;
    uint64_t v25 = a2 + 4LL * (v6 + 1);
    *(_WORD *)uint64_t v25 = v12;
    *(_BYTE *)(v25 + 3) = 0;
    unsigned int v26 = v12;
    do
    {
      unsigned __int8 v13 = v24;
      unsigned int v27 = v26;
      unsigned int v26 = v19;
      *(_BYTE *)(a2 + 4LL * v24++ + 3) = -1;
      uint64_t v28 = a2 + 4LL * v24;
      *(_WORD *)uint64_t v28 = v26;
      *(_BYTE *)(v28 + 3) = 0;
      uint64_t v29 = v8 + 24LL * v26 + 4 * v4;
      unsigned int v31 = *(unsigned __int16 *)(v29 + 16);
      uint64_t v30 = (_WORD *)(v29 + 16);
      unsigned int v19 = v31;
    }

    while (v31);
    uint64_t result = v26;
    uint64_t v32 = v8 + 24LL * v26;
    uint64_t v33 = v32 + 4 * v4;
    *(_WORD *)(v8 + 24LL * v27 + 4 * v4 + 16) = *(_WORD *)(v33 + 18);
    *(_WORD *)(v33 + 18) = v12;
    *uint64_t v30 = v17;
    uint64_t v34 = v32 + 8;
    if (!(_DWORD)v4) {
      uint64_t v34 = v32;
    }
    *(_BYTE *)(v34 + 7) = v10;
    uint64_t v35 = v8 + 24LL * v15 + 4 * v4 + 2 * v16 + 16;
    if (v6) {
      __int128 v36 = (_WORD *)v35;
    }
    else {
      __int128 v36 = (_WORD *)(v3 + 2 * v4 + 104);
    }
    *__int128 v36 = result;
    *int v23 = 1;
    *unsigned int v7 = result;
    *(_BYTE *)(a2 + 97) = v13;
    if ((v13 & 0x80) != 0) {
      return result;
    }
LABEL_28:
    uint64_t v40 = v13 + 255LL;
    uint64_t v41 = (unsigned __int16 *)(a2 + 4LL * v13);
    unint64_t v42 = v41;
    while (1)
    {
      unsigned int v44 = *v42;
      v42 -= 2;
      unsigned int v43 = v44;
      uint64_t v45 = *(void *)(v3 + 80);
      uint64_t v46 = v45 + 24LL * v44;
      if ((_DWORD)v4) {
        char v47 = *(_BYTE *)(v45 + 24LL * v43 + 15);
      }
      else {
        char v47 = *(_BYTE *)(v46 + 7);
      }
      int v48 = *((unsigned __int8 *)v41 + 3);
      int v49 = (char)(v47 - v48);
      if (v49 < 0) {
        int v49 = -v49;
      }
      if (v49 << 24 > 0x1FFFFFF)
      {
        __int128 v51 = (unsigned __int16 *)(v3 + 2 * v4 + 104);
        if (v40 != 255) {
          __int128 v51 = (unsigned __int16 *)(v45
        }
                                   + 24LL * *(unsigned __int16 *)(a2 + 4LL * v40)
                                   + 4 * v4
                                   + 2LL
                                   * ((*(char *)(a2 + 4LL * v40 + 3)
                                                      + 1
        uint64_t v52 = (char)-(char)v48;
        uint64_t v53 = *(unsigned __int16 *)(v45
                                  + 24LL * v43
                                  + 4 * v4
                                  + 2LL
        uint64_t v54 = v45 + 24 * v53;
        if ((_DWORD)v4) {
          unsigned __int8 v55 = *(_BYTE *)(v54 + 15);
        }
        else {
          unsigned __int8 v55 = *(_BYTE *)(v54 + 7);
        }
        if (v48 == v55)
        {
          uint64_t result = spaceman_fxc_tree_double_rotate(v3, v4, v52, v43, v53, v51);
        }

        else
        {
          uint64_t result = spaceman_fxc_tree_single_rotate(v3, v4, (char)v48, v43, v51);
          if (!v55) {
            return result;
          }
        }
      }

      else
      {
        uint64_t v50 = v45 + 24LL * v43 + 8;
        if (!(_DWORD)v4) {
          uint64_t v50 = v46;
        }
        *(_BYTE *)(v50 + 7) = v47 - v48;
        if (!v47) {
          return result;
        }
      }

      uint64_t v56 = v40 - 255;
      --v40;
      uint64_t v41 = v42;
      if (v56 <= 0) {
        return result;
      }
    }
  }

  *uint64_t v20 = v17;
  unsigned int v38 = (_WORD *)(v8 + 24LL * v15 + 4 * v4 + 2 * v16 + 16);
  if (!(_BYTE)v5) {
    unsigned int v38 = (_WORD *)(v3 + 2 * v4 + 104);
  }
  *unsigned int v38 = v12;
  uint64_t v39 = v8 + 24LL * v12;
  if ((_DWORD)v4) {
    v39 += 8LL;
  }
  *(_BYTE *)(v39 + 7) = v10;
  *(_BYTE *)(a2 + 4 * v5 + 3) = 1;
  *unsigned int v7 = v12;
  unsigned __int8 v13 = v5;
  if ((v5 & 0x80) == 0) {
    goto LABEL_28;
  }
  return result;
}

const char *spaceman_fxc_update_smallest_with_successor(uint64_t a1, uint64_t a2)
{
  uint64_t result = (const char *)spaceman_fxc_tree_adjacent(a1, a2, 1);
  if ((_DWORD)result == 2)
  {
    *(void *)(a1 + 112) = 0LL;
    *(void *)(a1 + 120) = 0LL;
  }

  else if ((_DWORD)result)
  {
    return log_err( "%s:%d: %s dev %d Failed to find successor node from length tree while updating smallest: %d\n",  "spaceman_fxc_update_smallest_with_successor",  1520,  (const char *)(*(void *)(*(void *)a1 + 384LL) + 208LL),  *(unsigned __int8 *)(a1 + 88),  (_DWORD)result);
  }

  else
  {
    *(int8x16_t *)(a1 + 112) = vandq_s8( *(int8x16_t *)(*(void *)(a1 + 80)
                                              + 24LL * *(unsigned __int16 *)(a2 + 4LL * *(unsigned __int8 *)(a2 + 97))),
                                 (int8x16_t)vdupq_n_s64(0xFFFFFFFFFFFFFuLL));
  }

  return result;
}

uint64_t spaceman_free_extent_cache_remove(uint64_t a1, unint64_t a2, unint64_t a3)
{
  if (!a1) {
    return 22LL;
  }
  if ((a3 | a2) >> 52) {
    return 84LL;
  }
  if (!a3) {
    return 0LL;
  }
  if (*(void *)a1) {
    pthread_mutex_lock((pthread_mutex_t *)(a1 + 16));
  }
  if ((*(_BYTE *)(a1 + 280) & 2) == 0)
  {
    int v6 = (_OWORD *)(a1 + 1068);
    unsigned __int16 v34 = 0;
    uint64_t updated = spaceman_fxc_tree_search(a1, 0, a2, a3, a1 + 1068);
    if ((_DWORD)updated)
    {
LABEL_8:
      log_err( "%s:%d: %s dev %d Error %d, reinitializing\n",  "spaceman_free_extent_cache_remove",  2076,  (const char *)(*(void *)(*(void *)a1 + 384LL) + 208LL),  *(unsigned __int8 *)(a1 + 88),  updated);
      spaceman_free_extent_cache_reset(a1);
      goto LABEL_9;
    }

    uint64_t v9 = (_OWORD *)(a1 + 1166);
    uint64_t v10 = a3 + a2;
    uint64_t v11 = 4LL * *(unsigned __int8 *)(a1 + 1165);
    unsigned int v12 = *(unsigned __int16 *)((char *)v6 + v11);
    __int128 v19 = *(_OWORD *)(a1 + 1148);
    *(_OWORD *)(a1 + 1230) = *(_OWORD *)(a1 + 1132);
    *(_OWORD *)(a1 + 1246) = v19;
    *(_WORD *)(a1 + 1262) = *(_WORD *)(a1 + 1164);
    __int128 v20 = *(_OWORD *)(a1 + 1084);
    *uint64_t v9 = *v6;
    *(_OWORD *)(a1 + 1182) = v20;
    __int128 v21 = *(_OWORD *)(a1 + 1116);
    *(_OWORD *)(a1 + 1198) = *(_OWORD *)(a1 + 1100);
    *(_OWORD *)(a1 + 1214) = v21;
    uint64_t v22 = spaceman_fxc_tree_adjacent(a1, a1 + 1166, -1);
    if ((_DWORD)v22 == 2) {
      goto LABEL_42;
    }
    uint64_t updated = v22;
    if ((_DWORD)v22) {
      goto LABEL_8;
    }
    int v23 = (void *)(*(void *)(a1 + 80) + 24LL * *((unsigned __int16 *)v9 + 2 * *(unsigned __int8 *)(a1 + 1263)));
    unint64_t v24 = v23[1] & 0xFFFFFFFFFFFFFLL;
    unint64_t v25 = v24 + (*v23 & 0xFFFFFFFFFFFFFLL);
    if (v25 <= a2) {
      goto LABEL_42;
    }
    uint64_t updated = spaceman_fxc_update_length( a1,  *v23 & 0xFFFFFFFFFFFFFLL,  v24,  a2 - (*v23 & 0xFFFFFFFFFFFFFLL),  *((unsigned __int16 *)v9 + 2 * *(unsigned __int8 *)(a1 + 1263)));
    if ((_DWORD)updated) {
      goto LABEL_8;
    }
    unint64_t v26 = v25 - v10;
    if (v25 <= v10)
    {
LABEL_42:
      uint64_t v31 = spaceman_fxc_tree_adjacent(a1, a1 + 1068, 1);
      if ((_DWORD)v31 != 2)
      {
        uint64_t updated = v31;
        if ((_DWORD)v31) {
          goto LABEL_8;
        }
        unsigned int v12 = *((unsigned __int16 *)v6 + 2 * *(unsigned __int8 *)(a1 + 1165));
LABEL_19:
        unsigned __int8 v13 = (unint64_t *)(*(void *)(a1 + 80) + 24LL * v12);
        unint64_t v14 = *v13;
        uint64_t v15 = *v13 & 0xFFFFFFFFFFFFFLL;
        unint64_t v16 = v13[1] & 0xFFFFFFFFFFFFFLL;
        unint64_t v17 = v16 + v15;
        if (v10 >= v16 + v15)
        {
          while (1)
          {
            spaceman_fxc_tree_delete_at_path(a1, a1 + 1068);
            uint64_t v27 = spaceman_fxc_tree_search(a1, 1u, v15, v16, a1 + 1068);
            if ((_DWORD)v27)
            {
              uint64_t v32 = v27;
              log_err( "%s:%d: %s dev %d Failed to delete covered node from length tree: %d\n",  "spaceman_free_extent_cache_remove",  2016,  (const char *)(*(void *)(*(void *)a1 + 384LL) + 208LL),  *(unsigned __int8 *)(a1 + 88),  v27);
              uint64_t updated = v32;
              goto LABEL_8;
            }

            if (v15 == *(void *)(a1 + 112))
            {
              __int128 v28 = *(_OWORD *)(a1 + 1148);
              *(_OWORD *)(a1 + 1230) = *(_OWORD *)(a1 + 1132);
              *(_OWORD *)(a1 + 1246) = v28;
              *(_WORD *)(a1 + 1262) = *(_WORD *)(a1 + 1164);
              __int128 v29 = *(_OWORD *)(a1 + 1084);
              *uint64_t v9 = *v6;
              *(_OWORD *)(a1 + 1182) = v29;
              __int128 v30 = *(_OWORD *)(a1 + 1116);
              *(_OWORD *)(a1 + 1198) = *(_OWORD *)(a1 + 1100);
              *(_OWORD *)(a1 + 1214) = v30;
              spaceman_fxc_update_smallest_with_successor(a1, a1 + 1166);
            }

            spaceman_fxc_tree_delete_at_path(a1, a1 + 1068);
            spaceman_fxc_tree_node_free(a1, (unsigned __int16)v12);
            if (v16 == *(void *)(a1 + 128)) {
              spaceman_fxc_update_longest_from_last(a1);
            }
            uint64_t updated = spaceman_fxc_tree_search(a1, 0, v15, v16, a1 + 1068);
            if (!(_DWORD)updated) {
              uint64_t updated = spaceman_fxc_tree_adjacent(a1, a1 + 1068, 1);
            }
            if ((_DWORD)updated) {
              break;
            }
            unsigned int v12 = *((unsigned __int16 *)v6 + 2 * *(unsigned __int8 *)(a1 + 1165));
            unint64_t v14 = *v13;
            uint64_t v15 = *v13 & 0xFFFFFFFFFFFFFLL;
            unint64_t v16 = v13[1] & 0xFFFFFFFFFFFFFLL;
            unint64_t v17 = v16 + v15;
          }

          if ((_DWORD)updated == 2) {
            goto LABEL_46;
          }
          log_err( "%s:%d: %s dev %d Failed to get next extent: %d\n",  "spaceman_free_extent_cache_remove",  2047,  (const char *)(*(void *)(*(void *)a1 + 384LL) + 208LL),  *(unsigned __int8 *)(a1 + 88),  updated);
          goto LABEL_8;
        }

uint64_t spaceman_fxc_update_longest_from_last(uint64_t a1)
{
  uint64_t v2 = a1 + 676;
  uint64_t result = spaceman_fxc_tree_last(a1, a1 + 676, 1u);
  if ((_DWORD)result == 2)
  {
    uint64_t v4 = 0LL;
  }

  else
  {
    if ((_DWORD)result) {
      return result;
    }
    uint64_t v4 = *(void *)(*(void *)(a1 + 80) + 24LL * *(unsigned __int16 *)(v2 + 4LL * *(unsigned __int8 *)(a1 + 773)) + 8) & 0xFFFFFFFFFFFFFLL;
  }

  *(void *)(a1 + 128) = v4;
  return result;
}

uint64_t spaceman_fxc_tree_last(uint64_t a1, uint64_t a2, unsigned int a3)
{
  *(_WORD *)(a2 + 96) = 0;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 80) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_BYTE *)(a2 + 96) = a3;
  uint64_t v5 = *(unsigned __int16 *)(a1 + 2LL * a3 + 104);
  *(_WORD *)a2 = v5;
  if (v5)
  {
    uint64_t v6 = *(void *)(a1 + 80) + 24LL * v5;
    if (a3) {
      char v7 = *(_BYTE *)(v6 + 15);
    }
    else {
      char v7 = *(_BYTE *)(v6 + 7);
    }
    *(_BYTE *)(a2 + 2) = v7;
  }

  while (1)
  {
    uint64_t v8 = *(unsigned __int8 *)(a2 + 97);
    if (!*(_WORD *)(a2 + 4 * v8)) {
      break;
    }
    uint64_t result = spaceman_fxtp_add_child(a1, a2, 1);
    if ((_DWORD)result) {
      return result;
    }
  }

  unsigned int v10 = v8 - 1;
  *(_BYTE *)(a2 + 97) = v10;
  return (v10 >> 6) & 2;
}

uint64_t spaceman_free_extent_cache_bitmap_scan_begin(uint64_t a1, uint64_t *a2)
{
  if (!a1) {
    return 0LL;
  }
  if (*(void *)a1) {
    pthread_mutex_lock((pthread_mutex_t *)(a1 + 16));
  }
  uint64_t v4 = *(void *)(a1 + 280);
  BOOL v5 = (v4 & 6) == 0;
  if ((v4 & 6) == 0)
  {
    *(void *)(a1 + 280) = v4 | 4;
    uint64_t v6 = *(void *)(a1 + 288);
    if (v6)
    {
      if (a2)
      {
LABEL_9:
        *a2 = v6;
        goto LABEL_12;
      }
    }

    else
    {
      uint64_t v6 = 1LL;
      *(void *)(a1 + 288) = 1LL;
      if (a2) {
        goto LABEL_9;
      }
    }

    *(void *)(a1 + 280) = v4 | 0xC;
LABEL_12:
    if (!*(void *)a1) {
      return 1LL;
    }
    goto LABEL_13;
  }

  if (*(void *)a1)
  {
LABEL_13:
    pthread_mutex_unlock((pthread_mutex_t *)(a1 + 16));
    return v5;
  }

  return 0LL;
}

uint64_t spaceman_free_extent_cache_bitmap_scan_finished(uint64_t result, unint64_t a2, char a3)
{
  if (result)
  {
    uint64_t v5 = result;
    uint64_t v6 = *(void *)(result + 8);
    if (*(void *)result) {
      uint64_t result = pthread_mutex_lock((pthread_mutex_t *)(result + 16));
    }
    uint64_t v7 = *(void *)(v5 + 280);
    if ((v7 & 6) == 0) {
      goto LABEL_21;
    }
    if ((a3 & 1) != 0)
    {
      *(_OWORD *)(v5 + 184) = *(_OWORD *)(v5 + 136);
      *(_OWORD *)(v5 + 200) = *(_OWORD *)(v5 + 152);
      *(_OWORD *)(v5 + 216) = *(_OWORD *)(v5 + 168);
      *(void *)(v5 + 280) = v7 & 0xFFFFFFFFFFFFFFF3LL;
      *(_OWORD *)(v5 + 136) = 0u;
      *(_OWORD *)(v5 + 152) = 0u;
      *(_OWORD *)(v5 + 168) = 0u;
    }

    else
    {
      if (*(void *)(*(void *)(v6 + 376) + 48LL * *(unsigned __int8 *)(v5 + 88) + 48) > a2
        && ((unint64_t v8 = *(void *)(v5 + 288), (v7 & 8) != 0) || v8 <= a2))
      {
        int v9 = 0;
        if (v8 < a2) {
          *(void *)(v5 + 288) = a2;
        }
      }

      else
      {
        int v9 = 1;
      }

      unint64_t v10 = v7 & 0xFFFFFFFFFFFFFFF3LL;
      unsigned int v12 = (_OWORD *)(v5 + 136);
      uint64_t v11 = *(void *)(v5 + 136);
      *(void *)(v5 + 280) = v10;
      if (v11)
      {
        uint64_t v13 = *(void *)(v5 + 184) + v11;
        unint64_t v14 = *(void *)(v5 + 200);
        unint64_t v15 = *(void *)(v5 + 152);
        uint64_t v16 = *(void *)(v5 + 192) + *(void *)(v5 + 144);
        *(void *)(v5 + 184) = v13;
        *(void *)(v5 + 192) = v16;
        if (v14 < v15) {
          *(void *)(v5 + 200) = v15;
        }
        unint64_t v17 = *(void *)(v5 + 176);
        if (*(void *)(v5 + 224) < v17) {
          *(void *)(v5 + 224) = v17;
        }
        uint64_t result = spaceman_fxc_dropped_range_update(v5 + 184, *(void *)(v5 + 160), *(void *)(v5 + 168));
        *(_OWORD *)(v5 + 152) = 0u;
        *(_OWORD *)(v5 + 168) = 0u;
        _OWORD *v12 = 0u;
        if ((v9 & 1) == 0) {
          goto LABEL_21;
        }
      }

      else
      {
        *(_OWORD *)(v5 + 152) = 0u;
        *(_OWORD *)(v5 + 168) = 0u;
        _OWORD *v12 = 0u;
        if (!v9)
        {
LABEL_21:
          if (*(void *)v5) {
            return pthread_mutex_unlock((pthread_mutex_t *)(v5 + 16));
          }
          return result;
        }
      }
    }

    uint64_t v18 = *(void *)(v5 + 336) + 1LL;
    *(void *)(v5 + 328) = 0LL;
    *(void *)(v5 + 336) = v18;
    *(_OWORD *)(v5 + 232) = *(_OWORD *)(v5 + 184);
    *(_OWORD *)(v5 + 248) = *(_OWORD *)(v5 + 200);
    *(_OWORD *)(v5 + 264) = *(_OWORD *)(v5 + 216);
    *(_OWORD *)(v5 + 184) = 0u;
    *(_OWORD *)(v5 + 200) = 0u;
    *(_OWORD *)(v5 + 216) = 0u;
    *(void *)(v5 + 288) = 0LL;
    uint64_t v19 = *(void *)(v5 + 280);
    if ((v19 & 1) == 0) {
      *(void *)(v5 + 280) = v19 | 1;
    }
    goto LABEL_21;
  }

  return result;
}

uint64_t spaceman_fxc_dropped_range_update(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(result + 24);
  if (v3)
  {
    if (v3 <= a2)
    {
      uint64_t v4 = *(void *)(result + 32);
    }

    else
    {
      uint64_t v4 = v3 - a2 + *(void *)(result + 32);
      *(void *)(result + 24) = a2;
      *(void *)(result + 32) = v4;
      uint64_t v3 = a2;
    }

    uint64_t v5 = v4 + v3;
    if (a3 + a2 > v5) {
      *(void *)(result + 32) = v4 + a3 + a2 - v5;
    }
  }

  else
  {
    *(void *)(result + 24) = a2;
    *(void *)(result + 32) = a3;
  }

  return result;
}

unint64_t spaceman_free_extent_cache_search_better_length( __int16 a1, unint64_t a2, unint64_t a3)
{
  if ((a1 & 0x1000) == 0) {
    return a2;
  }
  if (a3 <= 1) {
    return a3 + 1;
  }
  if (a3 + (a3 >> 1) >= a2) {
    return a2;
  }
  else {
    return a3 + (a3 >> 1);
  }
}

uint64_t spaceman_free_extent_cache_search(uint64_t a1, __int16 a2, int64_t *a3, unint64_t *a4)
{
  int64_t v4 = *a3;
  unint64_t v5 = *a4;
  *a3 = 0LL;
  *a4 = 0LL;
  if (!a1) {
    return 6LL;
  }
  ++*(void *)(a1 + 344);
  if (!v5)
  {
    ++*(void *)(a1 + 352);
    return 22LL;
  }

  uint64_t v10 = *(void *)(*(void *)a1 + 376LL);
  uint64_t v11 = *(void *)(v10 + 1248);
  if (v11
    && (uint64_t v12 = *(void *)(v10 + 1240),
        char v13 = __clz(__rbit64(*(unsigned int *)(v10 + 36))),
        *(_BYTE *)(a1 + 88) == (((v12 << v13) & 0x4000000000000000LL) != 0)))
  {
    uint64_t v14 = ((uint64_t)0xBFFFFFFFFFFFFFFFLL >> v13) & v12;
    int v15 = 1;
  }

  else
  {
    int v15 = 0;
    uint64_t v14 = 0LL;
  }

  uint64_t v71 = 0LL;
  v72[0] = 0LL;
  unint64_t v67 = 0LL;
  unint64_t v68 = 0LL;
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 16));
  if ((*(_BYTE *)(a1 + 280) & 2) != 0)
  {
    if (*(void *)a1) {
      pthread_mutex_unlock((pthread_mutex_t *)(a1 + 16));
    }
    return 6LL;
  }

  unint64_t v63 = v14;
  int v64 = v15;
  uint64_t v16 = (_OWORD *)(a1 + 1068);
  uint64_t v69 = 0LL;
  uint64_t v70 = 0LL;
  unint64_t v65 = 0LL;
  uint64_t v66 = 0LL;
  int v17 = spaceman_fxc_tree_search(a1, 1u, v4, v5, a1 + 1068);
  if (!v17)
  {
    if (*((_WORD *)v16 + 2 * *(unsigned __int8 *)(a1 + 1165)))
    {
      uint64_t v18 = (void *)(*(void *)(a1 + 80) + 24LL * *((unsigned __int16 *)v16 + 2 * *(unsigned __int8 *)(a1 + 1165)));
      unint64_t v19 = *v18 & 0xFFFFFFFFFFFFFLL;
      uint64_t v70 = v19;
      uint64_t v20 = v18[1] & 0xFFFFFFFFFFFFFLL;
      uint64_t v66 = v20;
      if (v15)
      {
        spaceman_clip_extent(v19, v20, v63, v11, a2, v4, (unint64_t *)&v70, (unint64_t *)&v66);
        uint64_t v20 = v66;
        unint64_t v19 = v70;
      }

      if (v20)
      {
        int v21 = spaceman_clip_extent_to_zones( *(void *)a1,  *(void *)(a1 + 8),  *(unsigned __int8 *)(a1 + 88),  v19,  v20,  a2,  v4,  (unint64_t *)&v69,  &v65);
        unint64_t v19 = v70;
        unint64_t v22 = v66;
        if (v21)
        {
          uint64_t v71 = v70;
          unint64_t v67 = v66;
          unint64_t v19 = v69;
          uint64_t v70 = v69;
          unint64_t v22 = v65;
          uint64_t v66 = v65;
        }
      }

      else
      {
        unint64_t v22 = 0LL;
      }

      v72[0] = v19;
      unint64_t v68 = v22;
      if (v22 == v5) {
        goto LABEL_21;
      }
    }

    __int128 v28 = (_OWORD *)(a1 + 1166);
    __int128 v29 = *(_OWORD *)(a1 + 1148);
    *(_OWORD *)(a1 + 1230) = *(_OWORD *)(a1 + 1132);
    *(_OWORD *)(a1 + 1246) = v29;
    *(_WORD *)(a1 + 1262) = *(_WORD *)(a1 + 1164);
    __int128 v30 = *(_OWORD *)(a1 + 1084);
    *(_OWORD *)(a1 + 1166) = *v16;
    *(_OWORD *)(a1 + 1182) = v30;
    __int128 v31 = *(_OWORD *)(a1 + 1116);
    *(_OWORD *)(a1 + 1198) = *(_OWORD *)(a1 + 1100);
    *(_OWORD *)(a1 + 1214) = v31;
    int v17 = spaceman_fxc_search_walk( a1,  a1 + 1166,  v64,  v63,  v11,  a2,  v4,  v5,  0xFFFFFFFFFFFFFFFFLL,  v72,  &v68,  &v71,  &v67,  0x301u);
    if (!v17)
    {
      __int128 v32 = *(_OWORD *)(a1 + 1148);
      *(_OWORD *)(a1 + 1230) = *(_OWORD *)(a1 + 1132);
      *(_OWORD *)(a1 + 1246) = v32;
      *(_WORD *)(a1 + 1262) = *(_WORD *)(a1 + 1164);
      __int128 v33 = *(_OWORD *)(a1 + 1084);
      _OWORD *v28 = *v16;
      *(_OWORD *)(a1 + 1182) = v33;
      __int128 v34 = *(_OWORD *)(a1 + 1116);
      *(_OWORD *)(a1 + 1198) = *(_OWORD *)(a1 + 1100);
      *(_OWORD *)(a1 + 1214) = v34;
      int v17 = spaceman_fxc_search_walk( a1,  a1 + 1166,  v64,  v63,  v11,  a2,  v4,  v5,  0xFFFFFFFFFFFFFFFFLL,  v72,  &v68,  &v71,  &v67,  0x502u);
      if (!v17)
      {
        unint64_t v38 = v67;
        if (v68 >= v5 || v67 <= v68)
        {
          unint64_t v39 = v67;
          unint64_t v38 = v68;
        }

        else
        {
          unint64_t v39 = 0LL;
          uint64_t v40 = v71;
          uint64_t v71 = 0LL;
          v72[0] = v40;
          unint64_t v67 = 0LL;
          unint64_t v68 = v38;
          a2 &= ~0x2000u;
        }

        if (v38 < v5 && (a2 & 0x1000) == 0) {
          goto LABEL_21;
        }
        if (v4 <= v72[0])
        {
          unint64_t v41 = v72[0] - v4;
        }

        else
        {
          if (v4 - v72[0] < v38) {
            goto LABEL_21;
          }
          unint64_t v41 = v4 - (v38 + v72[0]);
        }

        if (!v41) {
          goto LABEL_21;
        }
        unint64_t v57 = v39;
        uint64_t v60 = v72[0];
        unint64_t v61 = v38;
        unint64_t v62 = v41;
        int v17 = spaceman_fxc_tree_search(a1, 0, v4, v5, a1 + 1068);
        if (!v17)
        {
          if (*((_WORD *)v16 + 2 * *(unsigned __int8 *)(a1 + 1165)))
          {
            unsigned int v43 = (void *)(*(void *)(a1 + 80)
                           + 24LL * *((unsigned __int16 *)v16 + 2 * *(unsigned __int8 *)(a1 + 1165)));
            uint64_t v44 = *v43 & 0xFFFFFFFFFFFFFLL;
            uint64_t v70 = v44;
            uint64_t v45 = v43[1] & 0xFFFFFFFFFFFFFLL;
            uint64_t v66 = v45;
            if (v64)
            {
              spaceman_clip_extent(v44, v45, v63, v11, a2, v4, (unint64_t *)&v70, (unint64_t *)&v66);
              uint64_t v45 = v66;
              uint64_t v44 = v70;
            }

            if (v45)
            {
              int v46 = spaceman_clip_extent_to_zones( *(void *)a1,  *(void *)(a1 + 8),  *(unsigned __int8 *)(a1 + 88),  v44,  v45,  a2,  v4,  (unint64_t *)&v69,  &v65);
              uint64_t v44 = v70;
              unint64_t v47 = v66;
              if (v46)
              {
                unint64_t v48 = v57;
                uint64_t v55 = v70;
                unint64_t v58 = v66;
                if (new_extent_is_better(v4, v5, v71, v48, v70, v66, a2))
                {
                  uint64_t v71 = v55;
                  unint64_t v67 = v58;
                }

                uint64_t v44 = v69;
                uint64_t v70 = v69;
                unint64_t v47 = v65;
                uint64_t v66 = v65;
              }
            }

            else
            {
              unint64_t v47 = 0LL;
            }

            uint64_t v56 = v44;
            unint64_t v59 = v47;
            if (new_extent_is_better(v4, v5, v60, v61, v44, v47, a2))
            {
              v72[0] = v56;
              unint64_t v68 = v59;
              goto LABEL_21;
            }
          }

          __int128 v49 = *(_OWORD *)(a1 + 1148);
          *(_OWORD *)(a1 + 1230) = *(_OWORD *)(a1 + 1132);
          *(_OWORD *)(a1 + 1246) = v49;
          *(_WORD *)(a1 + 1262) = *(_WORD *)(a1 + 1164);
          __int128 v50 = *(_OWORD *)(a1 + 1084);
          _OWORD *v28 = *v16;
          *(_OWORD *)(a1 + 1182) = v50;
          __int128 v51 = *(_OWORD *)(a1 + 1116);
          *(_OWORD *)(a1 + 1198) = *(_OWORD *)(a1 + 1100);
          *(_OWORD *)(a1 + 1214) = v51;
          int v17 = spaceman_fxc_search_walk(a1, a1 + 1166, v64, v63, v11, a2, v4, v5, v62, v72, &v68, &v71, &v67, 0x1802u);
          if (!v17)
          {
            __int128 v52 = *(_OWORD *)(a1 + 1148);
            *(_OWORD *)(a1 + 1230) = *(_OWORD *)(a1 + 1132);
            *(_OWORD *)(a1 + 1246) = v52;
            *(_WORD *)(a1 + 1262) = *(_WORD *)(a1 + 1164);
            __int128 v53 = *(_OWORD *)(a1 + 1084);
            _OWORD *v28 = *v16;
            *(_OWORD *)(a1 + 1182) = v53;
            __int128 v54 = *(_OWORD *)(a1 + 1116);
            *(_OWORD *)(a1 + 1198) = *(_OWORD *)(a1 + 1100);
            *(_OWORD *)(a1 + 1214) = v54;
            int v17 = spaceman_fxc_search_walk( a1,  a1 + 1166,  v64,  v63,  v11,  a2,  v4,  v5,  v62,  v72,  &v68,  &v71,  &v67,  0x1801u);
            if (!v17)
            {
LABEL_21:
              if (*(void *)a1) {
                pthread_mutex_unlock((pthread_mutex_t *)(a1 + 16));
              }
              unint64_t v24 = v68;
              if (!v68 && v67)
              {
                v72[0] = v71;
                unint64_t v24 = v67;
              }

              unint64_t v25 = v24 - v5;
              if (v24 > v5)
              {
                unint64_t v26 = *(void *)(a1 + 368) + v25;
                ++*(void *)(a1 + 360);
                *(void *)(a1 + 368) = v26;
                if (v25 == 1)
                {
                  uint64_t result = 0LL;
                  uint64_t v27 = (void *)(a1 + 400);
                }

                else if (v25 > 7)
                {
                  uint64_t result = 0LL;
                  if (v25 > 0xF) {
                    uint64_t v27 = (void *)(a1 + 376);
                  }
                  else {
                    uint64_t v27 = (void *)(a1 + 384);
                  }
                }

                else
                {
                  uint64_t result = 0LL;
                  uint64_t v27 = (void *)(a1 + 392);
                }

                goto LABEL_63;
              }

              if (v24 >= v5)
              {
                uint64_t result = 0LL;
                ++*(void *)(a1 + 408);
                if (v24)
                {
LABEL_64:
                  unint64_t v42 = (void *)(a1 + 352);
LABEL_80:
                  ++*v42;
                  *a3 = v72[0];
                  *a4 = v24;
                  return result;
                }
              }

              else
              {
                if ((a2 & 0x1000) != 0) {
                  unsigned int v37 = 0;
                }
                else {
                  unsigned int v37 = 28;
                }
                else {
                  uint64_t result = v37;
                }
                if ((a2 & 0x1000) != 0)
                {
                  if (v24)
                  {
                    uint64_t v27 = (void *)(a1 + 416);
                    unint64_t v5 = v24;
LABEL_63:
                    ++*v27;
                    unint64_t v24 = v5;
                    goto LABEL_64;
                  }

                  if ((_DWORD)result) {
                    uint64_t result = result;
                  }
                  else {
                    uint64_t result = 28LL;
                  }
                }

                else
                {
                  v72[0] = 0LL;
                }
              }

              unint64_t v24 = 0LL;
              unint64_t v42 = (void *)(a1 + 424);
              goto LABEL_80;
            }
          }
        }
      }
    }
  }

  int v35 = *(unsigned __int8 *)(a1 + 88);
  __int128 v36 = "main";
  if (v35 == 1) {
    __int128 v36 = "tier2";
  }
  log_err( "%s:%d: %s dev %d Error searching %s free extent cache: %d; Reinitializing.\n",
    "spaceman_free_extent_cache_search",
    3031,
    (const char *)(*(void *)(*(void *)a1 + 384LL) + 208LL),
    v35,
    v36,
    v17);
  spaceman_free_extent_cache_reset(a1);
  if (*(void *)a1) {
    pthread_mutex_unlock((pthread_mutex_t *)(a1 + 16));
  }
  return 3LL;
}

uint64_t spaceman_fxc_search_walk( uint64_t a1, uint64_t a2, int a3, unint64_t a4, uint64_t a5, __int16 a6, unint64_t a7, unint64_t a8, unint64_t a9, uint64_t *a10, unint64_t *a11, uint64_t *a12, unint64_t *a13, unsigned int a14)
{
  if ((a14 & 3) == 0 || (a14 & 0x1F00) == 0) {
    return 22LL;
  }
  uint64_t v21 = a2;
  uint64_t v22 = a1;
  uint64_t v49 = 0LL;
  unint64_t v50 = 0LL;
  unint64_t v47 = 0LL;
  unint64_t v48 = 0LL;
  if ((a14 & 1) != 0) {
    int v23 = 1;
  }
  else {
    int v23 = -1;
  }
  uint64_t v15 = spaceman_fxc_tree_adjacent(a1, a2, v23);
  if ((v15 & 0xFFFFFFFD) == 0)
  {
    int v44 = a3;
    uint64_t v39 = a5;
    __int16 v46 = a6;
    unsigned int v25 = 0;
    int v43 = (char)v23;
    uint64_t v45 = a7;
    uint64_t v40 = v22;
    uint64_t v41 = v21;
    do
    {
      if ((_DWORD)v15 == 2) {
        return 0LL;
      }
      unint64_t v26 = (void *)(*(void *)(v22 + 80) + 24LL * *(unsigned __int16 *)(v21 + 4LL * *(unsigned __int8 *)(v21 + 97)));
      unint64_t v27 = *v26 & 0xFFFFFFFFFFFFFLL;
      unint64_t v50 = v27;
      unint64_t v28 = v26[1] & 0xFFFFFFFFFFFFFLL;
      unint64_t v48 = v28;
      if (v44)
      {
        __int16 v29 = v46;
        spaceman_clip_extent(v27, v28, a4, v39, v46, a7, &v50, &v48);
        uint64_t v30 = v48;
        if (!v48) {
          goto LABEL_39;
        }
      }

      else
      {
        uint64_t v30 = v28;
        __int16 v29 = v46;
        if (!v28)
        {
LABEL_39:
          if ((a14 & 0x1000) != 0 && v25 > 0x7E) {
            return v15;
          }
          goto LABEL_44;
        }
      }

      int v31 = spaceman_clip_extent_to_zones( *(void *)v22,  *(void *)(v22 + 8),  *(unsigned __int8 *)(v22 + 88),  v50,  v30,  v29,  a7,  (unint64_t *)&v49,  &v47);
      __int16 v32 = v29;
      uint64_t v33 = v50;
      unint64_t v34 = v48;
      if (v31)
      {
        if (new_extent_is_better(a7, a8, *a12, *a13, v50, v48, v32))
        {
          *a12 = v33;
          *a13 = v34;
        }

        uint64_t v33 = v49;
        unint64_t v50 = v49;
        unint64_t v34 = v47;
        unint64_t v48 = v47;
      }

      unint64_t v35 = *a11;
      if (new_extent_is_better(v45, a8, *a10, *a11, v33, v34, v46))
      {
        *a10 = v33;
        *a11 = v34;
        unint64_t v35 = v34;
        if ((a14 & 0x800) != 0) {
          return v15;
        }
      }

      BOOL v36 = v34 == v28 && (v28 == a8) & BYTE1(a14);
      if (v36 || ((v35 > a8) & (a14 >> 9)) != 0) {
        return v15;
      }
      if ((a14 & 0x400) != 0 && v28 < a8 && v28 <= v35) {
        return v15;
      }
      a7 = v45;
      uint64_t v22 = v40;
      uint64_t v21 = v41;
      if ((a14 & 0x1000) != 0)
      {
        if (v25 > 0x7E) {
          return v15;
        }
        unint64_t v38 = v33 - v45;
        if (v33 < v45)
        {
          if (v45 - v33 >= v34) {
            unint64_t v38 = v45 - v33 - v34;
          }
          else {
            unint64_t v38 = 0LL;
          }
        }

        if (v38 >= a9) {
          return v15;
        }
      }

BOOL new_extent_is_better( uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, __int16 a7)
{
  if (!a6) {
    return 0LL;
  }
  if (!a4) {
    return 1LL;
  }
  if (a4 < a2)
  {
    if (a6 <= a4)
    {
      if (a6 != a4 || (a7 & 0x4000) == 0) {
        return 0LL;
      }
      if (a1 <= a3) {
        unint64_t v9 = a3 - a1;
      }
      else {
        unint64_t v9 = a1 - a3 >= a6 ? a1 - (a3 + a6) : 0LL;
      }
      if (a1 <= a5) {
        unint64_t v12 = a5 - a1;
      }
      else {
        unint64_t v12 = a1 - a5 >= a6 ? a1 - (a5 + a6) : 0LL;
      }
      if (v12 >= v9) {
        return 0LL;
      }
    }

    return 1LL;
  }

  if (a4 != a2)
  {
    unint64_t v10 = a4 - a2;
    if (a4 > a2)
    {
      unint64_t v11 = a6 - a2;
      if (a6 >= a2)
      {
        if (a6 == a2 || v10 <= 0xF && v11 > v10) {
          return 1LL;
        }
        if ((a7 & 0x4000) != 0)
        {
          if (a1 <= a3)
          {
            unint64_t v14 = a3 - a1;
          }

          else if (a1 - a3 >= a4)
          {
            unint64_t v14 = a1 - (a3 + a4);
          }

          else
          {
            unint64_t v14 = 0LL;
          }

          if (a1 <= a5)
          {
            unint64_t v15 = a5 - a1;
          }

          else if (a1 - a5 >= a6)
          {
            unint64_t v15 = a1 - (a5 + a6);
          }

          else
          {
            unint64_t v15 = 0LL;
          }

          return v11 >= 0x10 && v15 < v14;
        }

        if (v11 < v10 && v11 > 0xF) {
          return 1LL;
        }
      }
    }

    return 0LL;
  }

  if (a6 < a4 || a6 != a4 && (a7 & 0x4000) == 0) {
    return 0LL;
  }
  if (a1 <= a3) {
    unint64_t v8 = a3 - a1;
  }
  else {
    unint64_t v8 = a1 - a3 >= a4 ? a1 - (a3 + a4) : 0LL;
  }
  if (a1 <= a5) {
    unint64_t v13 = a5 - a1;
  }
  else {
    unint64_t v13 = a1 - a5 >= a6 ? a1 - (a5 + a6) : 0LL;
  }
  if (v13 >= v8) {
    return 0LL;
  }
  BOOL result = 1LL;
  if (a6 != a4 && a6 - a4 <= 0xF) {
    return 0LL;
  }
  return result;
}

uint64_t spaceman_fxc_bitmap_should_be_searched( uint64_t a1, __int16 a2, unint64_t a3, unint64_t a4)
{
  unint64_t v8 = a3;
  if ((a2 & 0x1000) != 0)
  {
    if (a4 > 1)
    {
      if (a4 + (a4 >> 1) >= a3) {
        unint64_t v8 = a3;
      }
      else {
        unint64_t v8 = a4 + (a4 >> 1);
      }
    }

    else
    {
      unint64_t v8 = a4 + 1;
    }
  }

  unint64_t v9 = *(void *)(a1 + 200);
  uint64_t v10 = *(void *)(a1 + 208);
  int64_t v11 = *(void *)(a1 + 160);
  if (*(void *)(a1 + 152) > v9) {
    unint64_t v9 = *(void *)(a1 + 152);
  }
  uint64_t v12 = *(void *)(a1 + 168);
  unint64_t v42 = v8;
  if (v10)
  {
    uint64_t v14 = v10 - v11;
    BOOL v13 = v10 <= v11;
    uint64_t v15 = v12 + v11;
    if (v10 < v11) {
      int64_t v11 = *(void *)(a1 + 208);
    }
    if (v13) {
      uint64_t v16 = 0LL;
    }
    else {
      uint64_t v16 = v14;
    }
    uint64_t v17 = *(void *)(a1 + 216) + v16;
    if (v15 > v17 + v11) {
      uint64_t v12 = v15 - v11;
    }
    else {
      uint64_t v12 = v17;
    }
  }

  uint64_t v18 = *(void *)(a1 + 136);
  uint64_t v19 = *(void *)(a1 + 144);
  uint64_t v21 = *(void *)(a1 + 184);
  uint64_t v20 = *(void *)(a1 + 192);
  unint64_t v23 = *(void *)(a1 + 248);
  unint64_t v22 = *(void *)(a1 + 256);
  if (v9 <= v23) {
    unint64_t v24 = *(void *)(a1 + 248);
  }
  else {
    unint64_t v24 = v9;
  }
  unint64_t v25 = calc_overlap_range(v22, *(void *)(a1 + 264), v11, v12, 0LL);
  uint64_t v26 = *(void *)(a1 + 96);
  uint64_t v27 = *(void *)(*(void *)(*(void *)(a1 + 8) + 376LL) + 48LL * *(_DWORD *)(a1 + 88) + 72);
  if (v26 == v27) {
    goto LABEL_22;
  }
  if ((*(_BYTE *)(a1 + 280) & 1) == 0)
  {
LABEL_53:
    *(void *)(a1 + 440) = 0LL;
    __int16 v29 = (void *)(a1 + 448);
    uint64_t result = 1LL;
    goto LABEL_54;
  }

  unint64_t v30 = v20 + v19;
  if (!v26 && v27 && v30 + *(void *)(a1 + 240))
  {
    uint64_t v41 = (void *)(a1 + 456);
    goto LABEL_52;
  }

  if ((a2 & 0x1000) == 0 || a4 <= (3 * a3) >> 2)
  {
    if (v24 >= v42)
    {
      uint64_t v41 = (void *)(a1 + 464);
      goto LABEL_52;
    }

    if (v24 <= a4) {
      unint64_t v31 = a4;
    }
    else {
      unint64_t v31 = v24;
    }
    if (v42 <= *(void *)(a1 + 240) + v30 + v31 + v31 * (v18 + v21 + *(void *)(a1 + 232)))
    {
      unsigned int v32 = *(unsigned __int16 *)(a1 + 94);
      int v33 = *(_DWORD *)(a1 + 88) >> 8;
      signed int v34 = v33 - 1;
      int v35 = v33 - v32;
      if (v35 <= 4) {
        LODWORD(v36) = v35 + 4;
      }
      else {
        LODWORD(v36) = 8;
      }
      uint64_t v36 = (int)v36;
      unint64_t v37 = (64 - v42) >> 4;
      if (v42 >= 0x40) {
        unint64_t v37 = 0LL;
      }
      unint64_t v38 = v36 + v37 + (*(void *)(a1 + 440) >> 14);
      if (v34 / 10 <= v32)
      {
        unint64_t v39 = *(void *)(a1 + 128);
        if (v39 < *(void *)(a1 + 328))
        {
          unint64_t v40 = *(void *)(a1 + 176);
          if (v40 <= *(void *)(a1 + 224)) {
            unint64_t v40 = *(void *)(a1 + 224);
          }
          if (v40 >= *(void *)(a1 + 248) && v39 - *(void *)(a1 + 120) < 4) {
            unint64_t v38 = 1LL;
          }
        }
      }

      if (v30 > (v12 - v25 + *(void *)(a1 + 264)) / v38)
      {
        uint64_t v41 = (void *)(a1 + 472);
LABEL_52:
        ++*v41;
        goto LABEL_53;
      }
    }
  }

uint64_t spaceman_fxc_tree_first(uint64_t a1, uint64_t a2)
{
  *(_WORD *)(a2 + 96) = 0;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 80) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_BYTE *)(a2 + 96) = 0;
  uint64_t v4 = *(unsigned __int16 *)(a1 + 104);
  *(_WORD *)a2 = v4;
  if (v4) {
    *(_BYTE *)(a2 + 2) = *(_BYTE *)(*(void *)(a1 + 80) + 24LL * v4 + 7);
  }
  while (1)
  {
    uint64_t v5 = *(unsigned __int8 *)(a2 + 97);
    if (!*(_WORD *)(a2 + 4 * v5)) {
      break;
    }
    uint64_t result = spaceman_fxtp_add_child(a1, a2, -1);
    if ((_DWORD)result) {
      return result;
    }
  }

  unsigned int v7 = v5 - 1;
  *(_BYTE *)(a2 + 97) = v7;
  return (v7 >> 6) & 2;
}

uint64_t spaceman_fxtp_add_child(uint64_t a1, uint64_t a2, __int16 a3)
{
  int v3 = *(char *)(a2 + 97);
  uint64_t v4 = *(unsigned __int8 *)(a2 + 97);
  *(_BYTE *)(a2 + 4 * v4 + 3) = a3;
  if (v3 < 23)
  {
    unsigned __int8 v7 = v4 + 1;
    *(_BYTE *)(a2 + 97) = v4 + 1;
    uint64_t v8 = *(void *)(a1 + 80);
    uint64_t v9 = *(unsigned __int8 *)(a2 + 96);
    uint64_t v10 = *(unsigned __int16 *)(v8 + 24LL * *(unsigned __int16 *)(a2 + 4 * v4) + 4 * v9 + ((a3 + 1) & 0x1FE) + 16);
    uint64_t v11 = (v4 + 1);
    uint64_t v12 = a2 + 4LL * v7;
    *(_WORD *)uint64_t v12 = v10;
    *(_BYTE *)(v12 + 3) = 0;
    if (v10)
    {
      if ((_DWORD)v9) {
        char v13 = *(_BYTE *)(v8 + 24LL * v10 + 15);
      }
      else {
        char v13 = *(_BYTE *)(v8 + 24LL * v10 + 7);
      }
    }

    else
    {
      char v13 = 0;
    }

    uint64_t result = 0LL;
    *(_BYTE *)(a2 + 4 * v11 + 2) = v13;
  }

  else
  {
    uint64_t v5 = "length";
    if (!*(_BYTE *)(a2 + 96)) {
      uint64_t v5 = "paddr";
    }
    log_err( "%s:%d: %s dev %d %s tree: PATH TOO LONG: %d\n",  "spaceman_fxtp_add_child",  752,  (const char *)(*(void *)(*(void *)a1 + 384LL) + 208LL),  *(unsigned __int8 *)(a1 + 88),  v5,  v4);
    return 84LL;
  }

  return result;
}

uint64_t spaceman_fxc_tree_adjacent(uint64_t a1, uint64_t a2, int a3)
{
  int v4 = -a3;
  uint64_t v5 = *(unsigned __int8 *)(a2 + 97);
  if (*(_WORD *)(*(void *)(a1 + 80)
                + 24LL * *(unsigned __int16 *)(a2 + 4 * v5)
                + 4LL * *(unsigned __int8 *)(a2 + 96)
                + (((_WORD)a3 + 1) & 0x1FE)
                + 16))
  {
    uint64_t result = spaceman_fxtp_add_child(a1, a2, a3);
    if (!(_DWORD)result)
    {
      while (1)
      {
        uint64_t v8 = *(unsigned __int8 *)(a2 + 97);
        if (!*(_WORD *)(a2 + 4 * v8)) {
          break;
        }
        uint64_t result = spaceman_fxtp_add_child(a1, a2, (char)v4);
        if ((_DWORD)result) {
          return result;
        }
      }

      unsigned __int8 v13 = v8 - 1;
      *(_BYTE *)(a2 + 97) = v13;
      uint64_t v11 = (_BYTE *)(a2 + 4LL * v13 + 3);
LABEL_12:
      uint64_t result = 0LL;
      _BYTE *v11 = 0;
    }
  }

  else
  {
    LODWORD(v5) = (char)v5;
    while (1)
    {
      BOOL v9 = __OFSUB__((_DWORD)v5, 1);
      LODWORD(v5) = v5 - 1;
      uint64_t v10 = a2 + 4LL * v5;
      int v12 = *(unsigned __int8 *)(v10 + 3);
      uint64_t v11 = (_BYTE *)(v10 + 3);
      if (v12 == v4)
      {
        *(_BYTE *)(a2 + 97) = v5;
        goto LABEL_12;
      }
    }
  }

  return result;
}

uint64_t spaceman_fxc_tree_single_rotate( uint64_t result, unsigned int a2, int a3, unsigned int a4, unsigned __int16 *a5)
{
  uint64_t v5 = *(void *)(result + 80);
  uint64_t v6 = v5
     + 24LL * a4
     + 4LL * a2
     + 2LL * (((char)-(char)a3 + 1 + ((((char)-(char)a3 + 1) & 0x8000u) >> 15)) >> 1);
  unsigned __int16 v7 = *(_WORD *)(v6 + 16);
  uint64_t v8 = v5 + 24LL * v7;
  uint64_t v9 = v8 + 4LL * a2 + 2LL * ((a3 + 1 + (((a3 + 1) & 0x8000u) >> 15)) >> 1);
  *(_WORD *)(v6 + 16) = *(_WORD *)(v9 + 16);
  *(_WORD *)(v9 + 16) = a4;
  *a5 = v7;
  uint64_t v10 = v8 + 8;
  if (!a2) {
    uint64_t v10 = v5 + 24LL * v7;
  }
  if (*(_BYTE *)(v10 + 7))
  {
    uint64_t v14 = (void *)(v5 + 24LL * a4);
    if (a2) {
      ++v14;
    }
    *v14 &= 0xFFFFFFFFFFFFFFuLL;
    unint64_t v13 = *(void *)v10 & 0xFFFFFFFFFFFFFFLL;
  }

  else
  {
    uint64_t v11 = (uint64_t *)(v5 + 24LL * a4);
    if (a2) {
      ++v11;
    }
    uint64_t v12 = *v11;
    if (a3 == -1)
    {
      uint64_t *v11 = v12 & 0xFFFFFFFFFFFFFFLL | 0x100000000000000LL;
      unint64_t v13 = *(void *)v10 | 0xFF00000000000000LL;
    }

    else
    {
      uint64_t *v11 = v12 | 0xFF00000000000000LL;
      unint64_t v13 = *(void *)v10 & 0xFFFFFFFFFFFFFFLL | 0x100000000000000LL;
    }
  }

  *(void *)uint64_t v10 = v13;
  return result;
}

uint64_t spaceman_fxc_tree_double_rotate( uint64_t a1, unsigned int a2, uint64_t a3, unsigned int a4, unsigned int a5, _WORD *a6)
{
  uint64_t v6 = *(void *)(a1 + 80);
  uint64_t v7 = v6
     + 24LL * a5
     + 4LL * a2
     + 2LL * (((char)-(char)a3 + 1 + ((((char)-(char)a3 + 1) & 0x8000u) >> 15)) >> 1);
  unsigned int v8 = *(unsigned __int16 *)(v7 + 16);
  uint64_t v9 = v6 + 24LL * *(unsigned __int16 *)(v7 + 16);
  uint64_t v10 = v9 + 4LL * a2 + 16;
  uint64_t result = *(unsigned __int16 *)(v10
                               + 2LL * (((_DWORD)a3 + 1 + ((((_DWORD)a3 + 1) & 0x8000u) >> 15)) >> 1));
  *(_WORD *)(v7 + 16) = result;
  *(_WORD *)(v10 + 2LL * (((_DWORD)a3 + 1 + ((((_DWORD)a3 + 1) & 0x8000u) >> 15)) >> 1)) = a5;
  *(_WORD *)(v6
           + 24LL * a4
           + 4LL * a2
           + 2LL * (((_DWORD)a3 + 1 + ((((_DWORD)a3 + 1) & 0x8000u) >> 15)) >> 1)
           + 16) = *(_WORD *)(v10
                            + 2LL
                            * (((char)-(char)a3 + 1 + ((((char)-(char)a3 + 1) & 0x8000u) >> 15)) >> 1));
  *(_WORD *)(v10 + 2LL * (((char)-(char)a3 + 1 + ((((char)-(char)a3 + 1) & 0x8000u) >> 15)) >> 1)) = a4;
  *a6 = v8;
  if (a2) {
    unsigned __int8 v12 = *(_BYTE *)(v6 + 24LL * v8 + 15);
  }
  else {
    unsigned __int8 v12 = *(_BYTE *)(v9 + 7);
  }
  if (v12 == a3)
  {
    uint64_t v13 = v6 + 24LL * a4;
    if (a2) {
      v13 += 8LL;
    }
    *(_BYTE *)(v13 + 7) = -(char)a3;
    uint64_t v14 = (uint64_t *)(v6 + 24LL * a5);
    if (a2) {
      ++v14;
    }
    uint64_t v15 = *v14 & 0xFFFFFFFFFFFFFFLL;
  }

  else
  {
    uint64_t v16 = (void *)(v6 + 24LL * a4);
    if (a2) {
      ++v16;
    }
    *v16 &= 0xFFFFFFFFFFFFFFuLL;
    uint64_t v14 = (uint64_t *)(v6 + 24LL * a5);
    if (a2) {
      ++v14;
    }
    uint64_t v15 = *v14 & 0xFFFFFFFFFFFFFFLL;
    if (v12) {
      v15 |= a3 << 56;
    }
  }

  uint64_t *v14 = v15;
  uint64_t v17 = (void *)(v6 + 24LL * v8 + 8);
  if (!a2) {
    uint64_t v17 = (void *)v9;
  }
  *v17 &= 0xFFFFFFFFFFFFFFuLL;
  return result;
}

void crc32c_init()
{
  uint64_t v0 = crc32c;
  if (!crc32c)
  {
    do
    {
      unsigned int v1 = 0;
      for (int i = 0; i != 8; ++i)
      {
        unsigned int v3 = (v0 >> i) ^ v1;
        unsigned int v4 = v1 >> 1;
        unsigned int v1 = (v1 >> 1) ^ 0x82F63B78;
        if ((v3 & 1) == 0) {
          unsigned int v1 = v4;
        }
      }

      crc32c_table[(void)v0] = v1;
      uint64_t v0 = (char *)v0 + 1;
    }

    while (v0 != (void *)256);
    crc32c = crc32c_soft;
  }

uint64_t crc32c_soft(uint64_t result, char *a2, uint64_t a3)
{
  {
    char v3 = *a2++;
    uint64_t result = crc32c_table[(v3 ^ result)] ^ (result >> 8);
  }

  return result;
}

uint64_t apfs_source_version_val_full()
{
  return 0x83B5A93981BC1LL;
}

uint64_t rolling_stats_init(uint64_t a1, unsigned int a2, unsigned int a3)
{
  uint64_t result = new_lock((pthread_mutex_t *)a1);
  if (!(_DWORD)result)
  {
    v8.int tv_sec = 0LL;
    v8.uint64_t tv_nsec = 0LL;
    clock_gettime(_CLOCK_UPTIME_RAW_APPROX, &v8);
    *(void *)(a1 + 64) = v8.tv_sec / a2 * a2;
    *(_DWORD *)(a1 + 72) = a2;
    *(_DWORD *)(a1 + 76) = a3;
    uint64_t v7 = _apfs_calloc(a3, 8uLL);
    *(void *)(a1 + 80) = v7;
    if (v7)
    {
      uint64_t result = 0LL;
      *(void *)(a1 + 88) = 0LL;
    }

    else
    {
      free_lock((pthread_mutex_t *)a1);
      return 12LL;
    }
  }

  return result;
}

uint64_t rolling_stats_destroy(uint64_t a1)
{
  *(void *)(a1 + 80) = 0LL;
  return free_lock((pthread_mutex_t *)a1);
}

BOOL bitmap_range_is_set(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 >= 0) {
    uint64_t v3 = a2;
  }
  else {
    uint64_t v3 = a2 + 63;
  }
  uint64_t v4 = v3 >> 6;
  unint64_t v5 = a2 - (v3 & 0xFFFFFFFFFFFFFFC0LL);
  unint64_t v6 = 0xFFFFFFFFFFFFFFFFLL >> ((v3 & 0xC0u) - a2);
  if (a3 >= 64)
  {
    while (((-1LL << v5) & ~((-1LL << v5) & *(void *)(a1 + 8 * v4))) == 0
         && (!v5 || (v6 & ~*(void *)(a1 + 8 * v4 + 8)) == 0))
    {
      uint64_t v7 = a3 - 64;
      ++v4;
      BOOL v8 = a3 <= 127;
      a3 -= 64LL;
      if (v8)
      {
        if (v7) {
          goto LABEL_13;
        }
        return 1LL;
      }
    }

    return 0LL;
  }

  uint64_t v7 = a3;
  if (!a3) {
    return 1LL;
  }
LABEL_13:
  unint64_t v9 = ~(-1LL << v7);
  unint64_t v10 = v9 << v5;
  unint64_t v11 = v9 >> (64 - v5);
  if (!v5) {
    unint64_t v11 = 0LL;
  }
  return (v10 & ~((-1LL << v5) & *(void *)(a1 + 8 * v4))) == 0
      && (v7 <= (uint64_t)(64 - v5) || !v11 || (v11 & ~(v6 & *(void *)(a1 + 8 * v4 + 8))) == 0);
}

uint64_t bitmap_range_is_clear(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 >= 0) {
    uint64_t v3 = a2;
  }
  else {
    uint64_t v3 = a2 + 63;
  }
  uint64_t v4 = v3 >> 6;
  unint64_t v5 = a2 - (v3 & 0xFFFFFFFFFFFFFFC0LL);
  uint64_t v6 = 64 - v5;
  if (a3 >= 64)
  {
    while (((-1LL << v5) & *(void *)(a1 + 8 * v4)) == 0
         && (!v5 || (*(void *)(a1 + 8 * v4 + 8) & (0xFFFFFFFFFFFFFFFFLL >> v6)) == 0))
    {
      uint64_t v7 = a3 - 64;
      ++v4;
      BOOL v8 = a3 <= 127;
      a3 -= 64LL;
      if (v8)
      {
        if (v7) {
          goto LABEL_13;
        }
        return 1LL;
      }
    }

    return 0LL;
  }

  uint64_t v7 = a3;
  if (a3)
  {
LABEL_13:
    unint64_t v9 = ~(-1LL << v7);
    unint64_t v10 = v9 << v5;
    unint64_t v11 = v9 >> v6;
    if (!v5) {
      unint64_t v11 = 0LL;
    }
    if ((v10 & (-1LL << v5) & *(void *)(a1 + 8 * v4)) != 0
      || v7 > v6 && v11 && ((0xFFFFFFFFFFFFFFFFLL >> v6) & v11 & *(void *)(a1 + 8 * v4 + 8)) != 0)
    {
      return 0LL;
    }
  }

  return 1LL;
}

uint64_t bitmap_set_range(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (a2 >= 0) {
    uint64_t v3 = a2;
  }
  else {
    uint64_t v3 = a2 + 63;
  }
  uint64_t v4 = v3 >> 6;
  unint64_t v5 = a2 - (v3 & 0xFFFFFFFFFFFFFFC0LL);
  uint64_t v6 = 64 - v5;
  if (a3 < 64)
  {
    uint64_t v7 = a3;
    if (!a3) {
      return result;
    }
    goto LABEL_12;
  }

  do
  {
    *(void *)(result + 8 * v4) = *(void *)(result + 8 * v4) & ~(-1LL << v5) | (-1LL << v5);
    if (v5) {
      *(void *)(result + 8 * v4 + 8) |= 0xFFFFFFFFFFFFFFFFLL >> v6;
    }
    uint64_t v7 = a3 - 64;
    ++v4;
    BOOL v8 = a3 <= 127;
    a3 -= 64LL;
  }

  while (!v8);
  if (v7)
  {
LABEL_12:
    unint64_t v9 = ~(-1LL << v7);
    unint64_t v10 = v9 << v5;
    unint64_t v11 = v9 >> v6;
    if (!v5) {
      unint64_t v11 = 0LL;
    }
    *(void *)(result + 8 * v4) = *(void *)(result + 8 * v4) & ~v10 | v10 & (-1LL << v5);
    if (v7 > v6)
    {
      if (v11) {
        *(void *)(result + 8 * v4 + 8) = *(void *)(result + 8 * v4 + 8) & ~v11 | v11 & (0xFFFFFFFFFFFFFFFFLL >> v6);
      }
    }
  }

  return result;
}

uint64_t bitmap_clear_range(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (a2 >= 0) {
    uint64_t v3 = a2;
  }
  else {
    uint64_t v3 = a2 + 63;
  }
  uint64_t v4 = v3 >> 6;
  unint64_t v5 = a2 - (v3 & 0xFFFFFFFFFFFFFFC0LL);
  uint64_t v6 = 64 - v5;
  if (a3 < 64)
  {
    uint64_t v7 = a3;
    if (!a3) {
      return result;
    }
    goto LABEL_12;
  }

  do
  {
    *(void *)(result + 8 * v4) &= ~(-1LL << v5);
    if (v5) {
      *(void *)(result + 8 * v4 + 8) &= ~(0xFFFFFFFFFFFFFFFFLL >> v6);
    }
    uint64_t v7 = a3 - 64;
    ++v4;
    BOOL v8 = a3 <= 127;
    a3 -= 64LL;
  }

  while (!v8);
  if (v7)
  {
LABEL_12:
    unint64_t v9 = ~(-1LL << v7);
    unint64_t v10 = v9 << v5;
    unint64_t v11 = v9 >> v6;
    if (v5) {
      unint64_t v12 = v11;
    }
    else {
      unint64_t v12 = 0LL;
    }
    *(void *)(result + 8 * v4) &= ~v10;
    if (v7 > v6)
    {
      if (v12) {
        *(void *)(result + 8 * v4 + 8) &= ~v12;
      }
    }
  }

  return result;
}

uint64_t bitmap_range_find_first(int a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  if (a4 < 1) {
    return 0LL;
  }
  if (a1) {
    uint64_t v5 = 0LL;
  }
  else {
    uint64_t v5 = -1LL;
  }
  uint64_t v6 = (unint64_t *)(a2 + 8 * (a3 / 64));
  while (1)
  {
    uint64_t v7 = a3 & 0x3F;
    if (a3 <= 0) {
      uint64_t v7 = -(-a3 & 0x3F);
    }
    unint64_t v8 = 64 - v7;
    unint64_t v10 = *v6++;
    unint64_t v9 = v10;
    unint64_t v11 = __clz(__rbit64((v9 >> v7) ^ v5));
    if (v8 > v11) {
      break;
    }
    a3 += v8;
    BOOL v12 = a4 <= (uint64_t)v8;
    a4 -= v8;
    if (v12) {
      return 0LL;
    }
  }

  *a5 = v11 + a3;
  return 1LL;
}

uint64_t bitmap_range_find_last_set(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  if (a3 < 1) {
    return 0LL;
  }
  uint64_t v4 = a3 + a2;
  uint64_t v5 = a3 + a2 - 1;
  if (a3 + a2 < 1) {
    uint64_t v5 = a3 + a2 + 62;
  }
  uint64_t v6 = (uint64_t *)(a1 + 8 * (v5 >> 6));
  while (1)
  {
    if (v4 <= 0) {
      uint64_t v7 = -(-v4 & 0x3F);
    }
    else {
      uint64_t v7 = v4 & 0x3F;
    }
    char v8 = 64 - v7;
    if (!v7)
    {
      uint64_t v7 = 64LL;
      char v8 = 0;
    }

    if (v7 >= a3) {
      uint64_t v7 = a3;
    }
    uint64_t v9 = *v6--;
    int64_t v10 = __clz(v9 << v8);
    if (v7 > v10) {
      break;
    }
    v4 -= v7;
    BOOL v11 = a3 <= v7;
    a3 -= v7;
    if (v11) {
      return 0LL;
    }
  }

  *a4 = v4 + ~v10;
  return 1LL;
}

BOOL bitmap_range_find_desired_or_first_clear_range( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t *a6, int a7)
{
  uint64_t v12 = 0LL;
  uint64_t v36 = 0LL;
  uint64_t v34 = a4 - 1;
  uint64_t v13 = -1LL;
  while (1)
  {
    if (v12 >= a2) {
      goto LABEL_40;
    }
    unint64_t v14 = a4 - a3;
    if (a4 - a3 < 1) {
      goto LABEL_40;
    }
    uint64_t v15 = 8 * (a3 / 64);
    while (1)
    {
      uint64_t v16 = a3 & 0x3F;
      if (a3 <= 0) {
        uint64_t v16 = -(-a3 & 0x3F);
      }
      unint64_t v17 = 64 - v16;
      if (64 - v16 >= v14) {
        unint64_t v17 = v14;
      }
      unint64_t v18 = __clz(__rbit64(~(*(void *)(a1 + v15) >> v16)));
      if (v17 > v18) {
        break;
      }
      a3 += v17;
      v15 += 8LL;
      BOOL v19 = (uint64_t)v14 <= (uint64_t)v17;
      v14 -= v17;
      if (v19) {
        goto LABEL_40;
      }
    }

    uint64_t v20 = v18 + a3;
    if ((uint64_t)(v18 + a3) >= a4 - v12)
    {
LABEL_40:
      uint64_t v20 = v13;
      goto LABEL_41;
    }

    if (!v12)
    {
      uint64_t v13 = v18 + a3;
      uint64_t v12 = 1LL;
      if (v20 >= v34)
      {
        uint64_t v12 = 1LL;
        goto LABEL_41;
      }
    }

    int v35 = a5;
    uint64_t v21 = v12 + 1;
    uint64_t v22 = v12 + 1 < a4 - v20 ? v12 + 1 : a4 - v20;
    a5 = v35;
    uint64_t v23 = v36;
    uint64_t v20 = v13;
LABEL_38:
    a3 = v23 + 1;
    if (a7) {
      goto LABEL_41;
    }
  }

  uint64_t v24 = a2 - v21;
  if (a2 != v21)
  {
    uint64_t v25 = v21 + v20;
    if (v24 >= a4 - (v21 + v20)) {
      uint64_t v24 = a4 - (v21 + v20);
    }
    if (v24 < 1)
    {
LABEL_35:
      uint64_t v12 = v24 + v21;
    }

    else
    {
      uint64_t v26 = v25 + 63;
      if (v25 >= 0) {
        uint64_t v26 = v21 + v20;
      }
      uint64_t v27 = (unint64_t *)(a1 + 8 * (v26 >> 6));
      unint64_t v28 = v24;
      while (1)
      {
        uint64_t v29 = v25 & 0x3F;
        if (v25 <= 0) {
          uint64_t v29 = -(-v25 & 0x3F);
        }
        unint64_t v30 = 64 - v29;
        if (64 - v29 >= v28) {
          unint64_t v30 = v28;
        }
        unint64_t v31 = *v27++;
        unint64_t v32 = __clz(__rbit64(v31 >> v29));
        if (v30 > v32) {
          break;
        }
        v25 += v30;
        BOOL v19 = (uint64_t)v28 <= (uint64_t)v30;
        v28 -= v30;
        if (v19) {
          goto LABEL_35;
        }
      }

      uint64_t v12 = v32 + v25 - v20;
    }

    a5 = v35;
    uint64_t v23 = v12 + v20;
    uint64_t v36 = v12 + v20;
    uint64_t v13 = v20;
    goto LABEL_38;
  }

  uint64_t v12 = a2;
  a5 = v35;
LABEL_41:
  *a5 = v20;
  *a6 = v12;
  return v12 == a2;
}

BOOL bitmap_range_find_clear_range(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t *a6)
{
  return bitmap_range_find_desired_or_first_clear_range(a1, a2, a3, a4, a5, a6, 0);
}

BOOL bitmap_range_find_first_clear_range( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t *a6)
{
  return bitmap_range_find_desired_or_first_clear_range(a1, a2, a3, a4, a5, a6, 1);
}

unint64_t bitmap_count_bits(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  if (a3 >= a4) {
    return 0LL;
  }
  unint64_t result = 0LL;
  if (a2) {
    uint64_t v6 = 0LL;
  }
  else {
    uint64_t v6 = -1LL;
  }
  if (a2) {
    uint64_t v7 = -1LL;
  }
  else {
    uint64_t v7 = 0LL;
  }
  do
  {
    unint64_t v8 = a4 - a3;
    if (a4 - a3 < 1) {
      break;
    }
    uint64_t v9 = (unint64_t *)(a1 + 8 * (a3 / 64));
    while (1)
    {
      uint64_t v10 = a3 & 0x3F;
      if (a3 <= 0) {
        uint64_t v10 = -(-a3 & 0x3F);
      }
      unint64_t v11 = 64 - v10;
      unint64_t v13 = *v9++;
      unint64_t v12 = v13;
      if (64 - v10 >= v8) {
        unint64_t v11 = v8;
      }
      unint64_t v14 = __clz(__rbit64((v12 >> v10) ^ v6));
      if (v11 > v14) {
        break;
      }
      a3 += v11;
      BOOL v15 = (uint64_t)v8 <= (uint64_t)v11;
      v8 -= v11;
      if (v15) {
        return result;
      }
    }

    uint64_t v16 = v14 + a3;
    uint64_t v17 = a4 - (v14 + a3);
    if (v17 < 1) {
      return result - v16 + a4;
    }
    uint64_t v18 = v16 + 63;
    if (v16 >= 0) {
      uint64_t v18 = v14 + a3;
    }
    BOOL v19 = (unint64_t *)(a1 + 8 * (v18 >> 6));
    uint64_t v20 = v14 + a3;
    while (1)
    {
      uint64_t v21 = v20 & 0x3F;
      if (v20 <= 0) {
        uint64_t v21 = -(-v20 & 0x3F);
      }
      unint64_t v22 = 64 - v21;
      unint64_t v24 = *v19++;
      unint64_t v23 = v24;
      unint64_t v25 = __clz(__rbit64((v23 >> v21) ^ v7));
      if (v22 > v25) {
        break;
      }
      v20 += v22;
      BOOL v15 = v17 <= (uint64_t)v22;
      v17 -= v22;
      if (v15) {
        return result - v16 + a4;
      }
    }

    a3 = v25 + v20;
    unint64_t result = result - v16 + v25 + v20;
  }

  while ((uint64_t)(v25 + v20) < a4);
  return result;
}

unint64_t fletcher64( uint32x4_t *a1, unint64_t a2, unint64_t a3, int8x16_t a4, int8x16_t a5)
{
  unint64_t v5 = a3;
  unint64_t v6 = HIDWORD(a3);
  if ((a2 & 3) == 0)
  {
    for (i = a2 >> 2; i; unint64_t v6 = v34 + HIDWORD(v34))
    {
      if (i >= 0x16A00) {
        uint64_t v8 = 92672LL;
      }
      else {
        uint64_t v8 = i;
      }
      i -= v8;
      int64x2_t v9 = (int64x2_t)veorq_s8(a4, a4);
      int64x2_t v10 = (int64x2_t)veorq_s8(a5, a5);
      v9.i64[0] = v5;
      v10.i64[0] = v6;
      if (v8 >= 16)
      {
        uint32x4_t v11 = *a1;
        uint32x4_t v12 = a1[1];
        uint32x4_t v13 = a1[2];
        uint32x4_t v14 = a1[3];
        a1 += 4;
        int64x2_t v15 = vshlq_n_s64(v9, 4uLL);
        uint64x2_t v16 = vmull_u32(*(uint32x2_t *)v12.i8, (uint32x2_t)constants[2]);
        uint64x2_t v17 = vmull_u32(*(uint32x2_t *)v13.i8, (uint32x2_t)constants[4]);
        int64x2_t v18 = (int64x2_t)vmlal_u32( vmlal_u32((uint64x2_t)v10, *(uint32x2_t *)v11.i8, (uint32x2_t)constants[0]),  *(uint32x2_t *)v14.i8,  (uint32x2_t)constants[6]);
        uint64x2_t v19 = vpadalq_u32(vpadalq_u32(vpadalq_u32((uint64x2_t)v9, v11), v12), v13);
        BOOL v20 = v8 < 32;
        for (v8 -= 32LL; !v20; v8 -= 16LL)
        {
          uint64x2_t v21 = vmlal_high_u32(v16, v11, *(uint32x4_t *)constants);
          uint32x4_t v22 = *a1;
          a1 += 4;
          uint32x4_t v11 = v22;
          uint64x2_t v23 = vmlal_high_u32(v17, v12, *(uint32x4_t *)&constants[2]);
          uint32x4_t v12 = a1[-3];
          int64x2_t v24 = (int64x2_t)vpadalq_u32(v19, v14);
          uint64x2_t v25 = vmlal_high_u32((uint64x2_t)vaddq_s64(v18, v15), v13, *(uint32x4_t *)&constants[4]);
          uint32x4_t v13 = a1[-2];
          uint64x2_t v26 = vmlal_high_u32(v21, v14, *(uint32x4_t *)&constants[6]);
          uint32x4_t v14 = a1[-1];
          int64x2_t v15 = vshlq_n_s64(v24, 4uLL);
          uint64x2_t v16 = vmlal_u32(v26, *(uint32x2_t *)v12.i8, (uint32x2_t)constants[2]);
          uint64x2_t v17 = vmlal_u32(v23, *(uint32x2_t *)v13.i8, (uint32x2_t)constants[4]);
          int64x2_t v18 = (int64x2_t)vmlal_u32( vmlal_u32(v25, *(uint32x2_t *)v22.i8, (uint32x2_t)constants[0]),  *(uint32x2_t *)v14.i8,  (uint32x2_t)constants[6]);
          uint64x2_t v19 = vpadalq_u32(vpadalq_u32(vpadalq_u32((uint64x2_t)v24, v22), v12), v13);
          BOOL v20 = v8 < 16;
        }

        int64x2_t v9 = (int64x2_t)vpadalq_u32(v19, v14);
        int64x2_t v10 = vaddq_s64( vaddq_s64( (int64x2_t)vmlal_high_u32((uint64x2_t)vaddq_s64(v18, v15), v13, *(uint32x4_t *)&constants[4]),  (int64x2_t)vmlal_high_u32(v17, v12, *(uint32x4_t *)&constants[2])),  (int64x2_t)vmlal_high_u32( vmlal_high_u32(v16, v11, *(uint32x4_t *)constants),  v14,  *(uint32x4_t *)&constants[6]));
      }

      if ((v8 & 8) != 0)
      {
        uint32x4_t v27 = *a1;
        a1 += 2;
        uint32x4_t v28 = a1[-1];
        int64x2_t v29 = vshlq_n_s64(v9, 3uLL);
        int64x2_t v9 = (int64x2_t)vpadalq_u32(vpadalq_u32((uint64x2_t)v9, v27), v28);
        int64x2_t v10 = vaddq_s64( (int64x2_t)vmlal_high_u32( vmlal_high_u32( vmlal_u32( vmlal_u32((uint64x2_t)v10, *(uint32x2_t *)v27.i8, (uint32x2_t)constants[4]),  *(uint32x2_t *)v28.i8,  (uint32x2_t)constants[6]),  v27,  *(uint32x4_t *)&constants[4]),  v28,  *(uint32x4_t *)&constants[6]),  v29);
      }

      if ((v8 & 4) != 0)
      {
        uint32x4_t v30 = *a1++;
        int64x2_t v31 = vshlq_n_s64(v9, 2uLL);
        int64x2_t v9 = (int64x2_t)vpadalq_u32((uint64x2_t)v9, v30);
        int64x2_t v10 = vaddq_s64( (int64x2_t)vmlal_high_u32( vmlal_u32((uint64x2_t)v10, *(uint32x2_t *)v30.i8, (uint32x2_t)constants[6]),  v30,  *(uint32x4_t *)&constants[6]),  v31);
      }

      uint64_t v32 = v8 & 3;
      a4 = (int8x16_t)vpaddq_s64(v9, v9);
      a5 = (int8x16_t)vpaddq_s64(v10, v10);
      unint64_t v33 = a4.i64[0];
      unint64_t v34 = a5.i64[0];
      if (v32)
      {
        do
        {
          unsigned __int32 v35 = a1->i32[0];
          a1 = (uint32x4_t *)((char *)a1 + 4);
          v33 += v35;
          v34 += v33;
          BOOL v20 = v32-- <= 1;
        }

        while (!v20);
      }

      unint64_t v5 = v33 + HIDWORD(v33);
    }
  }

  unint64_t v36 = v5 + HIDWORD(v5);
  unint64_t v37 = v6 + HIDWORD(v6);
  if (v36 == 0xFFFFFFFF) {
    unint64_t v36 = 0LL;
  }
  if (v37 == 0xFFFFFFFF) {
    unint64_t v37 = 0LL;
  }
  return v36 + (v37 << 32);
}

uint64_t nx_corruption_detected_int(uint64_t a1)
{
  if (a1)
  {
    BOOL is_panic_on_corruption_enabled = nx_is_panic_on_corruption_enabled(a1);
    log_corrupt( is_panic_on_corruption_enabled,  "%s:%d: %s Container corruption detected by %s:%u!\n",  v2,  v3,  v4,  v5,  v6,  v7,  (char)"nx_corruption_detected_int");
  }

  else
  {
    BOOL v8 = nx_is_panic_on_corruption_enabled(0LL);
    log_corrupt( v8,  "%s:%d: Container corruption detected by %s:%u!\n",  v9,  v10,  v11,  v12,  v13,  v14,  (char)"nx_corruption_detected_int");
  }

  return 92LL;
}

unint64_t obj_checksum_verify_phys(void *a1, int a2, int8x16_t a3, int8x16_t a4)
{
  unint64_t result = fletcher64_verify_cksum(a1, (uint32x4_t *)(a1 + 1), (a2 - 8), 0LL, a3, a4);
  if (result)
  {
    log_err( "%s:%d: failed: cksum 0x%016llx, oid 0x%llx, type 0x%x/0x%x, size %d\n",  "obj_checksum_verify_phys",  52,  *a1,  a1[1],  *((_DWORD *)a1 + 6),  *((_DWORD *)a1 + 7),  a2);
    BOOL is_panic_on_corruption_enabled = nx_is_panic_on_corruption_enabled(0LL);
    log_corrupt( is_panic_on_corruption_enabled,  "%s:%d: Container corruption detected by %s:%u!\n",  v8,  v9,  v10,  v11,  v12,  v13,  (char)"nx_corruption_detected_int");
    return 92LL;
  }

  return result;
}

uint64_t nx_superblock_sanity_check_extent(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, int a5)
{
  if ((*(_BYTE *)(a1 + 65) & 1) != 0)
  {
    if (a2)
    {
      unint64_t v7 = *(void *)(a2 + 48);
      unint64_t v5 = *(void *)(a2 + 96);
    }

    else
    {
      unint64_t v7 = *(void *)(a1 + 40);
      unint64_t v5 = v7;
    }

    int64_t v8 = 0x4000000000000000uLL >> __clz(__rbit64(*(unsigned int *)(a1 + 36)));
    int64_t v9 = v8 | v5;
  }

  else
  {
    unint64_t v5 = 0LL;
    uint64_t v6 = (unint64_t *)(a2 + 48);
    if (!a2) {
      uint64_t v6 = (unint64_t *)(a1 + 40);
    }
    unint64_t v7 = *v6;
    int64_t v8 = 0x7FFFFFFFFFFFFFFFLL;
    int64_t v9 = v7;
  }

  uint64_t result = 22LL;
  if ((a5 ^ 1u) <= a3 && v9 - 1 >= a3)
  {
    if (v5 && v7 <= a3)
    {
      if (a5)
      {
        if (v8 > a3) {
          return result;
        }
      }

      else if (v8 >= a3)
      {
        return result;
      }
    }

    if (a4 >= 2)
    {
      if (v9 - a3 >= a4)
      {
        if (v7 - a3 >= a4 || v7 <= a3 || v5 == 0) {
          return 0LL;
        }
        else {
          return 22LL;
        }
      }
    }

    else
    {
      return 0LL;
    }
  }

  return result;
}

unint64_t nx_check_superblock(uint64_t a1, unsigned int a2, int a3, int8x16_t a4, int8x16_t a5)
{
  if (a2 < 0x1000) {
    return 22LL;
  }
  if (*(_DWORD *)(a1 + 32) != 1112758350) {
    return 79LL;
  }
  if (a3 || (unsigned int v8 = *(_DWORD *)(a1 + 36), v8 == a2))
  {
    unint64_t result = obj_checksum_verify_phys((void *)a1, a2, a4, a5);
    if ((_DWORD)result) {
      return result;
    }
    unsigned int v8 = *(_DWORD *)(a1 + 36);
  }

  int v9 = *(_DWORD *)(a1 + 24);
  int v10 = v9 != -2147483647;
  if (v9 == -2147483647) {
    int v11 = 1;
  }
  else {
    int v11 = 2;
  }
  if (*(_DWORD *)(a1 + 28)) {
    int v10 = v11;
  }
  if (*(void *)(a1 + 8) != 1LL) {
    ++v10;
  }
  if (v8 < 0x1000) {
    ++v10;
  }
  if (v8 <= 0x10000) {
    int v12 = v10;
  }
  else {
    int v12 = v10 + 1;
  }
  if (*(void *)(a1 + 88) < 0x400uLL) {
    ++v12;
  }
  int v13 = *(_DWORD *)(a1 + 104);
  if ((v13 & 0x7FFFFFF8) != 0) {
    int v14 = v12;
  }
  else {
    int v14 = v12 + 1;
  }
  unint64_t v15 = v13 & 0x7FFFFFFF;
  unint64_t v16 = *(void *)(a1 + 40);
  uint64_t v17 = *(void *)(a1 + 112);
  if (v13 < 0) {
    unint64_t v18 = 1LL;
  }
  else {
    unint64_t v18 = v13 & 0x7FFFFFFF;
  }
  if (v13 < 0) {
    int v19 = 1;
  }
  else {
    int v19 = v13 & 0x7FFFFFFF;
  }
  unsigned int v45 = v19;
  int v46 = v14;
  int v20 = nx_superblock_sanity_check_extent(a1, 0LL, v17, v18, 0);
  unsigned int v44 = *(_DWORD *)(a1 + 128);
  int v21 = *(_DWORD *)(a1 + 108);
  unint64_t v22 = v21 & 0x7FFFFFFF;
  uint64_t v23 = *(void *)(a1 + 120);
  if (v21 < 0) {
    unint64_t v24 = 1LL;
  }
  else {
    unint64_t v24 = v21 & 0x7FFFFFFF;
  }
  if (v21 < 0) {
    unsigned int v25 = 1;
  }
  else {
    unsigned int v25 = v21 & 0x7FFFFFFF;
  }
  int v26 = nx_superblock_sanity_check_extent(a1, 0LL, *(void *)(a1 + 120), v24, 0);
  int v27 = v46;
  if (v17 >= v23) {
    uint64_t v28 = v25;
  }
  else {
    uint64_t v28 = v45;
  }
  if (v17 >= v23) {
    uint64_t v29 = v23;
  }
  else {
    uint64_t v29 = v17;
  }
  if (v17 <= v23) {
    uint64_t v30 = v23;
  }
  else {
    uint64_t v30 = v17;
  }
  if (v16 <= v15) {
    ++v27;
  }
  if (v20) {
    ++v27;
  }
  if ((v21 & 0x7FFFFFF8) == 0) {
    ++v27;
  }
  if (v16 <= v22) {
    ++v27;
  }
  if (v26) {
    ++v27;
  }
  uint64_t v31 = v29 + v28;
  else {
    int v32 = v27 + 1;
  }
  if (v31 <= v30) {
    int v33 = v32;
  }
  else {
    int v33 = v32 + 1;
  }
  if ((*(void *)(a1 + 64) & 0xFFFFFFFFFFFFFEFDLL) == 0)
  {
    unsigned int v34 = *(_DWORD *)(a1 + 140);
    if (!*(void *)(a1 + 152)) {
      ++v33;
    }
    if (!*(void *)(a1 + 160)) {
      ++v33;
    }
    if (!(a3 | v34))
    {
      if (!*(_DWORD *)(a1 + 148) && !*(_DWORD *)(a1 + 136) && !*(_DWORD *)(a1 + 144)) {
        goto LABEL_91;
      }
      unsigned int v34 = 0;
    }

    unsigned int v35 = *(_DWORD *)(a1 + 148);
    if (v34 < 2) {
      ++v33;
    }
    if (v35 < 2) {
      ++v33;
    }
LABEL_91:
    if (*(_DWORD *)(a1 + 180) <= 0x64u) {
      int v36 = 0;
    }
    else {
      int v36 = -1;
    }
    if (v33 != v36) {
      goto LABEL_96;
    }
    return 0LL;
  }

  if (!v33) {
    return 0LL;
  }
LABEL_96:
  BOOL is_panic_on_corruption_enabled = nx_is_panic_on_corruption_enabled(0LL);
  log_corrupt( is_panic_on_corruption_enabled,  "%s:%d: Container corruption detected by %s:%u!\n",  v38,  v39,  v40,  v41,  v42,  v43,  (char)"nx_corruption_detected_int");
  return 92LL;
}

uint64_t io_get_device_features(int a1, dev_t *a2, _DWORD *a3, int *a4, dev_t *a5)
{
  if (a2)
  {
    v42.dev_t st_dev = 0;
    if (ioctl(a1, 0x4004644CuLL, &v42))
    {
      if (*__error() != 25)
      {
        int v10 = __error();
        int v11 = strerror(*v10);
        log_err("%s:%d: can't get features for device (%s)\n", "io_get_device_features", 182, v11);
      }

      dev_t st_dev = 0;
    }

    else
    {
      dev_t st_dev = v42.st_dev;
    }

    *a2 = st_dev;
  }

  if (a3) {
    *a3 = (fcntl(a1, 3) & 3) != 0;
  }
  if (!a4) {
    goto LABEL_14;
  }
  memset(&v42, 0, sizeof(v42));
  if (fstat(a1, &v42) || (v42.st_mode & 0xB000 | 0x4000) != 0x6000 || (CFMutableDictionaryRef v17 = IOServiceMatching("IOMedia")) == 0LL)
  {
LABEL_12:
    int v13 = 0;
    goto LABEL_13;
  }

  unint64_t v18 = v17;
  int v40 = v42.st_rdev & 0xFFFFFF;
  unsigned int valuePtr = HIBYTE(v42.st_rdev);
  int v19 = (const __CFAllocator *)*MEMORY[0x189604DB0];
  CFNumberRef v20 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x189604DB0], kCFNumberIntType, &valuePtr);
  if (v20)
  {
    CFNumberRef v21 = v20;
    CFDictionarySetValue(v18, @"BSD Major", v20);
    CFRelease(v21);
  }

  CFNumberRef v22 = CFNumberCreate(v19, kCFNumberIntType, &v40);
  if (v22)
  {
    CFNumberRef v23 = v22;
    CFDictionarySetValue(v18, @"BSD Minor", v22);
    CFRelease(v23);
  }

  uint64_t MatchingService = IOServiceGetMatchingService(*MEMORY[0x1896086B0], v18);
  if (!(_DWORD)MatchingService)
  {
    log_debug( "%s:%d: fd %d is type %o rdev %d (%d, %d): I/O registry entry not found\n",  "io_get_device_features",  230,  a1,  v42.st_mode & 0xF000,  v42.st_rdev,  HIBYTE(v42.st_rdev),  v42.st_rdev & 0xFFFFFF);
    goto LABEL_12;
  }

  uint64_t v25 = MatchingService;
  IOObjectRetain(MatchingService);
  v44[0] = 0;
  uint64_t v26 = v25;
  while (1)
  {
    io_registry_entry_t parent = 0;
    if (IOObjectConformsTo(v26, "AppleAPFSContainerScheme")) {
      break;
    }
    if (IOObjectConformsTo(v26, "IOBlockStorageDevice")) {
      goto LABEL_43;
    }
    if (IORegistryEntryGetParentEntry(v26, "IOService", &parent)) {
      io_registry_entry_t parent = 0;
    }
    IOObjectRelease(v26);
    uint64_t v26 = parent;
    if (!parent)
    {
      int v13 = 0;
      goto LABEL_45;
    }
  }

  uint64_t v28 = (const __CFDictionary *)IORegistryEntrySearchCFProperty( v26,  "IOService",  @"Device Characteristics",  v19,  3u);
  if (v28)
  {
    uint64_t v29 = v28;
    Value = (const __CFBoolean *)CFDictionaryGetValue(v28, @"Target Disk Mode");
    if (Value)
    {
      int v31 = CFBooleanGetValue(Value);
      CFRelease(v29);
      if (v31)
      {
LABEL_43:
        int v13 = 0;
        goto LABEL_44;
      }
    }

    else
    {
      CFRelease(v29);
    }
  }

  while (1)
  {
    io_registry_entry_t v32 = IOIteratorNext(v44[0]);
    if (!v32) {
      break;
    }
    io_registry_entry_t v33 = v32;
    if (io_search_for_BOOLean_property(v32, @"image-format-read-only"))
    {
      BOOL v34 = 0;
    }

    else
    {
      if (!io_search_for_BOOLean_property(v33, @"Removable"))
      {
        CFTypeRef v35 = IORegistryEntrySearchCFProperty(v33, "IOService", @"Protocol Characteristics", v19, 3u);
        if (v35)
        {
          int v36 = v35;
          CFTypeID TypeID = CFDictionaryGetTypeID();
          if (TypeID != CFGetTypeID(v36)) {
            goto LABEL_56;
          }
          uint64_t v38 = CFDictionaryGetValue((CFDictionaryRef)v36, @"Physical Interconnect Location");
          if (!v38) {
            goto LABEL_57;
          }
          CFTypeID v39 = CFStringGetTypeID();
          if (v39 == CFGetTypeID(v38)) {
            LODWORD(v38) = CFEqual(v38, @"Internal") == 0;
          }
          else {
LABEL_56:
          }
            LODWORD(v38) = 0;
LABEL_57:
          CFRelease(v36);
        }

        else
        {
          LODWORD(v38) = 0;
        }

        BOOL v34 = (_DWORD)v38 != 0;
        goto LABEL_60;
      }

      BOOL v34 = 1;
    }

uint64_t device_parse(char *__s2, char *a2, char *a3, size_t a4, char **a5)
{
  if (!strncmp("/dev/", __s2, 5uLL)) {
    uint64_t v10 = 5LL;
  }
  else {
    uint64_t v10 = 0LL;
  }
  int v11 = &__s2[v10];
  if (!strncmp(&__s2[v10], "disk", 4uLL))
  {
    uint64_t result = snprintf(a2, a4, "%s%s", "/dev/", v11);
    if (a3) {
      uint64_t result = snprintf(a3, a4, "%sr%s");
    }
    goto LABEL_14;
  }

  if (!strncmp(v11, "rdisk", 5uLL))
  {
    uint64_t result = snprintf(a2, a4, "%s%s", "/dev/", v11 + 1);
    if (a3) {
      uint64_t result = snprintf(a3, a4, "%s%s");
    }
LABEL_14:
    if (!a5) {
      return result;
    }
    a2 += 5;
    goto LABEL_16;
  }

  uint64_t result = strlcpy(a2, __s2, a4);
  if (a3) {
    uint64_t result = strlcpy(a3, __s2, a4);
  }
  if (a5) {
LABEL_16:
  }
    *a5 = a2;
  return result;
}

uint64_t get_volume_io_object_from_snapshot(io_object_t *a1, _BYTE *a2)
{
  if (a2) {
    *a2 = 0;
  }
  BOOLean_t v4 = IOObjectConformsTo(*a1, "AppleAPFSSnapshot");
  io_registry_entry_t v5 = *a1;
  if (v4)
  {
    io_registry_entry_t parent = 0;
    if (IORegistryEntryGetParentEntry(v5, "IOService", &parent)) {
      return 0LL;
    }
    IOObjectRelease(*a1);
    io_registry_entry_t v5 = parent;
    *a1 = parent;
    if (a2) {
      *a2 = 1;
    }
  }

  uint64_t result = IOObjectConformsTo(v5, "AppleAPFSVolume");
  if ((_DWORD)result) {
    return *a1;
  }
  return result;
}

uint64_t get_container_io_object(char *bsdName)
{
  mach_port_t v1 = *MEMORY[0x1896086B0];
  uint64_t v2 = IOBSDNameMatching(*MEMORY[0x1896086B0], 0, bsdName);
  uint64_t result = IOServiceGetMatchingService(v1, v2);
  io_object_t object = result;
  if ((_DWORD)result)
  {
    char v4 = io_next_child(&object, "AppleAPFSContainer");
    uint64_t result = object;
    if ((v4 & 1) == 0)
    {
      IOObjectRelease(object);
      return 0LL;
    }
  }

  return result;
}

const char *device_basename(const char *a1)
{
  mach_port_t v1 = a1;
  if (!strncmp(a1, "/dev/", 5uLL))
  {
    int v2 = *((unsigned __int8 *)v1 + 5);
    v1 += 5;
    if (v2 == 114) {
      ++v1;
    }
  }

  return v1;
}

unint64_t device_container_path(const char *a1, _DWORD *a2)
{
  if (!device_is_volume(a1)) {
    return 0LL;
  }
  unint64_t result = (unint64_t)strrchr(a1, 115);
  if (result)
  {
    unint64_t v5 = result;
    unint64_t result = strtoul((const char *)(result + 1), 0LL, 10);
    if (result)
    {
      int v6 = result;
      unint64_t result = (unint64_t)strndup(a1, v5 - (void)a1);
      if (result)
      {
        if (a2) {
          *a2 = v6 - 1;
        }
      }
    }
  }

  return result;
}

BOOL device_is_volume(const char *a1)
{
  mach_port_t v1 = a1;
  if (!strncmp(a1, "/dev/", 5uLL))
  {
    int v2 = *((unsigned __int8 *)v1 + 5);
    v1 += 5;
    if (v2 == 114) {
      ++v1;
    }
  }

  mach_port_t v3 = *MEMORY[0x1896086B0];
  char v4 = IOBSDNameMatching(*MEMORY[0x1896086B0], 0, v1);
  io_service_t MatchingService = IOServiceGetMatchingService(v3, v4);
  if (!MatchingService) {
    return 0LL;
  }
  io_object_t v6 = MatchingService;
  BOOL v7 = IOObjectConformsTo(MatchingService, "AppleAPFSVolume") != 0;
  IOObjectRelease(v6);
  return v7;
}

uint64_t io_next_child(io_object_t *a1, const char *a2)
{
  io_iterator_t iterator = 0;
  int v4 = MEMORY[0x186E24780](*a1, "IOService", &iterator);
  uint64_t result = 0LL;
  if (!v4)
  {
    io_object_t v6 = IOIteratorNext(iterator);
    if (v6)
    {
      io_object_t v7 = v6;
      while (!IOObjectConformsTo(v7, a2))
      {
        IOObjectRelease(v7);
        io_object_t v7 = IOIteratorNext(iterator);
        if (!v7) {
          goto LABEL_6;
        }
      }

      IOObjectRelease(iterator);
      IOObjectRelease(*a1);
      *a1 = v7;
      return 1LL;
    }

    else
    {
LABEL_6:
      IOObjectRelease(iterator);
      return 0LL;
    }
  }

  return result;
}

uint64_t get_first_child_of_class(uint64_t a1, const char *a2)
{
  io_iterator_t iterator = 0;
  uint64_t v3 = 0LL;
  if (!MEMORY[0x186E24780](a1, "IOService", &iterator))
  {
    while (1)
    {
      uint64_t v4 = IOIteratorNext(iterator);
      uint64_t v3 = v4;
      if (!(_DWORD)v4 || IOObjectConformsTo(v4, a2)) {
        break;
      }
      IOObjectRelease(v3);
    }

    IOObjectRelease(iterator);
  }

  return v3;
}

char *mounted_device(char *a1, CFStringRef theString)
{
  uint64_t v5 = *MEMORY[0x1895F89C0];
  memset(v4, 0, sizeof(v4));
  return mounted_device_internal(a1, 0);
}

char *mounted_device_internal(char *result, int a2)
{
  uint64_t v17 = *MEMORY[0x1895F89C0];
  if (result)
  {
    uint64_t v3 = result;
    io_object_t v7 = 0LL;
    unsigned int v8 = 0LL;
    *(_OWORD *)__s1 = 0u;
    __int128 v10 = 0u;
    __int128 v11 = 0u;
    __int128 v12 = 0u;
    __int128 v13 = 0u;
    __int128 v14 = 0u;
    __int128 v15 = 0u;
    __int128 v16 = 0u;
    device_parse(result, __s1, 0LL, 0x80uLL, &v7);
    int v4 = getmntinfo(&v8, 2);
    if (!v4) {
      return 0LL;
    }
    int v5 = v4;
    for (unint64_t i = v8->f_mntfromname; ; i += 2168)
    {
      if (a2)
      {
        if (strstr(i, v3)) {
          return i - 1024;
        }
      }

      else if (!strcmp(__s1, i))
      {
        return i - 1024;
      }

      unsigned int v8 = (statfs *)(i + 1056);
      if (!--v5) {
        return 0LL;
      }
    }
  }

  return result;
}

uint64_t fsindex_parse(const char *a1, int a2)
{
  int v4 = strrchr(a1, 115);
  if (!v4) {
    return 0xFFFFFFFFLL;
  }
  if (a2)
  {
    int v5 = v4 - 1;
    while (v5 > a1)
    {
      int v7 = *v5--;
      char v6 = v7;
      if ((v7 - 48) >= 0xA)
      {
        if (v6 != 115) {
          return 0xFFFFFFFFLL;
        }
        int v4 = (char *)(v5 + 1);
        goto LABEL_8;
      }
    }

    return 0xFFFFFFFFLL;
  }

const char *get_apfs_io_object(const char *result)
{
  if (result)
  {
    mach_port_t v1 = result;
    if (!strncmp(result, "/dev/", 5uLL))
    {
      int v2 = *((unsigned __int8 *)v1 + 5);
      v1 += 5;
      if (v2 == 114) {
        ++v1;
      }
    }

    mach_port_t v3 = *MEMORY[0x1896086B0];
    int v4 = IOBSDNameMatching(*MEMORY[0x1896086B0], 0, v1);
    return (const char *)IOServiceGetMatchingService(v3, v4);
  }

  return result;
}

const char *get_volume_io_object(const char *a1, _BYTE *a2)
{
  uint64_t result = get_apfs_io_object(a1);
  io_object_t object = result;
  if ((_DWORD)result)
  {
    int volume_io_object_from_snapshot = get_volume_io_object_from_snapshot(&object, a2);
    uint64_t result = (const char *)object;
    if (!volume_io_object_from_snapshot)
    {
      IOObjectRelease(object);
      return 0LL;
    }
  }

  return result;
}

uint64_t physical_store_to_container(uint64_t a1)
{
  *(void *)io_iterator_t iterator = 0LL;
  io_iterator_t object = 0;
  uint64_t v1 = 0LL;
  uint64_t v2 = IOIteratorNext(iterator[1]);
  if (!(_DWORD)v2)
  {
LABEL_18:
    uint64_t v1 = 0LL;
    LODWORD(v5) = iterator[1];
    goto LABEL_20;
  }

  uint64_t v3 = v2;
  while (1)
  {
    if (!IOObjectConformsTo(v3, "AppleAPFSContainerScheme")
      || MEMORY[0x186E24780](v3, "IOService", iterator))
    {
      goto LABEL_17;
    }

    uint64_t v4 = IOIteratorNext(iterator[0]);
    if ((_DWORD)v4) {
      break;
    }
LABEL_16:
    IOObjectRelease(iterator[0]);
LABEL_17:
    IOObjectRelease(v3);
    uint64_t v3 = IOIteratorNext(iterator[1]);
    if (!(_DWORD)v3) {
      goto LABEL_18;
    }
  }

  uint64_t v5 = v4;
  while (1)
  {
    uint64_t v6 = IOIteratorNext(object);
    if ((_DWORD)v6) {
      break;
    }
LABEL_14:
    IOObjectRelease(object);
LABEL_15:
    IOObjectRelease(v5);
    uint64_t v5 = IOIteratorNext(iterator[0]);
    if (!(_DWORD)v5) {
      goto LABEL_16;
    }
  }

  uint64_t v1 = v6;
  while (!IOObjectConformsTo(v1, "AppleAPFSContainer"))
  {
    IOObjectRelease(v1);
    uint64_t v1 = IOIteratorNext(object);
    if (!(_DWORD)v1) {
      goto LABEL_14;
    }
  }

  IOObjectRelease(iterator[1]);
  IOObjectRelease(iterator[0]);
  IOObjectRelease(object);
  IOObjectRelease(v3);
LABEL_20:
  IOObjectRelease(v5);
  return v1;
}

uint64_t apfs_container_iouc(char *__s, _DWORD *a2, io_connect_t *a3, io_registry_entry_t *a4, int a5)
{
  io_registry_entry_t parent = 0;
  if (a2)
  {
    int v9 = strrchr(__s, 47);
    if (v9) {
      __int128 v10 = v9 + 1;
    }
    else {
      __int128 v10 = __s;
    }
    unsigned __int8 v20 = 0;
    io_registry_entry_t volume_io_object = get_volume_io_object(v10, &v20);
    if (volume_io_object)
    {
      LODWORD(v12) = volume_io_object;
      if (IORegistryEntryGetParentEntry(volume_io_object, "IOService", &parent))
      {
        uint64_t v13 = 49158LL;
LABEL_24:
        IOObjectRelease(v12);
        return v13;
      }

      if (IOObjectConformsTo(parent, "AppleAPFSContainer"))
      {
        int v17 = fsindex_parse(v10, v20);
        *a2 = v17;
        if (v17 != -1)
        {
          io_service_t first_child_of_class = parent;
LABEL_17:
          uint64_t v13 = IOServiceOpen(first_child_of_class, *MEMORY[0x1895FBBE0], 0, a3);
          io_registry_entry_t v18 = parent;
          if (a4 && !(_DWORD)v13)
          {
            *a4 = parent;
            goto LABEL_24;
          }

BOOL io_search_for_BOOLean_property(io_registry_entry_t a1, CFStringRef key)
{
  CFTypeRef v2 = IORegistryEntrySearchCFProperty(a1, "IOService", key, (CFAllocatorRef)*MEMORY[0x189604DB0], 3u);
  if (!v2) {
    return 0LL;
  }
  BOOL v3 = v2 == (CFTypeRef)*MEMORY[0x189604DE8];
  CFRelease(v2);
  return v3;
}

uint64_t tx_mgr_init(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6 = *(unsigned int *)(*(void *)(a1 + 376) + 36LL);
  int v7 = (pthread_mutex_t *)_apfs_calloc(1uLL, 0x130uLL);
  if (!v7) {
    return 12LL;
  }
  uint64_t v8 = (uint64_t)v7;
  v7[1].__uint64_t sig = a2;
  *(void *)v7[1].__opaque = 0LL;
  *(void *)&v7[1].__opaque[40] = 0LL;
  *(_DWORD *)&v7[1].__opaque[8] = 0;
  *(_DWORD *)&v7[1].__opaque[12] = (v6 - 40) / 0x28uLL;
  *(void *)&v7[1].__opaque[48] = (char *)v7 + 112;
  v7[2].__uint64_t sig = 0LL;
  *(void *)v7[2].__opaque = v7 + 2;
  uint64_t inited = new_lock(v7);
  if (!(_DWORD)inited)
  {
    uint64_t v10 = new_cv((pthread_cond_t *)(v8 + 256));
    if ((_DWORD)v10)
    {
      uint64_t inited = v10;
      free_lock((pthread_mutex_t *)v8);
    }

    else if (*(_BYTE *)(a1 + 627) || (uint64_t inited = tx_mgr_init_tx(v8, v6), !(_DWORD)inited))
    {
      uint64_t inited = 0LL;
      uint64_t v12 = *(void *)(a1 + 376);
      int v13 = *(_DWORD *)(v12 + 104) & 0x7FFFFFFF;
      int v14 = *(_DWORD *)(v12 + 108) & 0x7FFFFFFF;
      *(_DWORD *)(v8 + 88) = v13;
      *(_DWORD *)(v8 + 92) = v14;
      *(void *)(v8 + 96) = *(void *)(v12 + 128);
      *(_DWORD *)(v8 + 104) = v13;
      *(_DWORD *)(v8 + 108) = v14;
      *a3 = v8;
      return inited;
    }
  }

  _apfs_free((void *)v8, 304LL);
  return inited;
}

uint64_t tx_mgr_init_tx(uint64_t a1, unsigned int a2)
{
  size_t v3 = a2;
  int v4 = 4;
  while (1)
  {
    uint64_t v5 = _apfs_calloc(1uLL, 0x78uLL);
    if (!v5) {
      break;
    }
    uint64_t v6 = v5;
    v5[7] = _apfs_malloc(v3);
    v6[8] = _apfs_malloc(v3);
    int v7 = *(void **)(a1 + 120);
    void *v6 = 0LL;
    v6[1] = v7;
    *int v7 = v6;
    *(void *)(a1 + 120) = v6;
    if (!v6[7] || !v6[8]) {
      break;
    }
    if (!--v4) {
      return 0LL;
    }
  }

  while (1)
  {
    int v13 = *(uint64_t **)(a1 + 112);
    if (!v13) {
      break;
    }
    uint64_t v9 = *v13;
    uint64_t v10 = (void *)v13[1];
    if (*v13)
    {
      *(void *)(v9 + 8) = v10;
      uint64_t v10 = (void *)v13[1];
    }

    else
    {
      *(void *)(a1 + 120) = v10;
    }

    *uint64_t v10 = v9;
    __int128 v11 = (void *)v13[7];
    if (v11) {
      _apfs_free(v11, v3);
    }
    uint64_t v12 = (void *)v13[8];
    if (v12) {
      _apfs_free(v12, v3);
    }
    _apfs_free(v13, 120LL);
  }

  return 12LL;
}

void tx_mgr_free_tx(uint64_t a1, void *a2, unsigned int a3)
{
  uint64_t v6 = a2[18];
  if (v6)
  {
    log_err( "%s:%d: %s Trash unfinished tx xid=0x%llx\n",  "tx_mgr_free_tx",  189,  (const char *)(*(void *)(a1 + 384) + 208LL),  *(void *)(v6 + 16));
    int v7 = (void *)a2[18];
    uint64_t v8 = (void *)a2[15];
    *int v7 = 0LL;
    v7[1] = v8;
    *uint64_t v8 = v7;
    a2[15] = a2[18];
    a2[18] = 0LL;
  }

  uint64_t v9 = a2[16];
  if (v9)
  {
    log_err( "%s:%d: %s Trash unfinished pending tx, xid range = 0x%llx - 0x%llx\n",  "tx_mgr_free_tx",  197,  (const char *)(*(void *)(a1 + 384) + 208LL),  *(void *)(v9 + 16),  *(void *)(**(void **)(a2[17] + 8LL) + 16LL));
    uint64_t v10 = a2[16];
    if (v10)
    {
      *(void *)a2[15] = v10;
      *(void *)(a2[16] + 8LL) = a2[15];
      a2[15] = a2[17];
      a2[16] = 0LL;
      a2[17] = a2 + 16;
    }
  }

  __int128 v11 = (void *)a2[14];
  if (v11)
  {
    do
    {
      int v13 = (void *)*v11;
      uint64_t v12 = (void *)v11[1];
      if (*v11)
      {
        v13[1] = v12;
        uint64_t v12 = (void *)v11[1];
      }

      else
      {
        a2[15] = v12;
      }

      void *v12 = v13;
      int v14 = (void *)v11[7];
      if (v14) {
        _apfs_free(v14, a3);
      }
      __int128 v15 = (void *)v11[8];
      if (v15) {
        _apfs_free(v15, a3);
      }
      _apfs_free(v11, 120LL);
      __int128 v11 = v13;
    }

    while (v13);
  }

void tx_mgr_destroy(uint64_t a1, uint64_t a2, unsigned int a3)
{
}

BOOL xid_is_current_tx(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(a1 + 624))
  {
    CFTypeRef v2 = (void *)(*(void *)(a1 + 376) + 96LL);
    return *v2 == a2;
  }

  uint64_t v3 = *(void *)(a1 + 400);
  if (v3)
  {
    uint64_t v4 = *(void *)(v3 + 144);
    if (v4)
    {
      CFTypeRef v2 = (void *)(v4 + 16);
      return *v2 == a2;
    }
  }

  return 0LL;
}

uint64_t tx_checkpoint_space_check(uint64_t a1, uint64_t a2, int a3)
{
  char v6 = 0;
  uint64_t v7 = *(void *)(a1 + 400);
  while (1)
  {
    unsigned int v8 = *(_DWORD *)(v7 + 96);
    unsigned int v9 = *(_DWORD *)(v7 + 104);
    unsigned int v10 = v9;
    if (v8 > v9) {
      unsigned int v10 = *(_DWORD *)(v7 + 88) + v9;
    }
    unsigned int v11 = *(_DWORD *)(v7 + 100);
    unsigned int v12 = *(_DWORD *)(v7 + 108);
    unsigned int v13 = v12;
    if (v11 > v12) {
      unsigned int v13 = *(_DWORD *)(v7 + 92) + v12;
    }
    unsigned int v14 = v10 - v8;
    unsigned int v15 = v13 - v11;
    unsigned int v16 = *(_DWORD *)(a2 + 48) + a3;
    if (v16 <= v15 && !(v6 & 1 | (*(_DWORD *)(a2 + 40) + 1 > v14))) {
      return 0LL;
    }
    if ((v6 & 1) != 0 || !*(void *)(v7 + 128)) {
      break;
    }
    tx_barrier_internal(a1, 0x50u, 0);
    char v6 = 1;
  }

  if (!*(_WORD *)(v7 + 82)) {
    log_err( "%s:%d: %s checkpoint area out of space: stable: %d %d - next %d %d available %d %d tx[%lld] %d %d\n",  "tx_checkpoint_space_check",  495,  (const char *)(*(void *)(a1 + 384) + 208LL),  v9,  v12,  v8,  v11,  v14,  v15,  *(void *)(a2 + 16),  *(_DWORD *)(a2 + 40) + 1,  v16);
  }
  *(_WORD *)(v7 + 82) = 1;
  return 28LL;
}

uint64_t tx_barrier_internal(uint64_t a1, unsigned int a2, int a3)
{
  uint64_t v6 = *(void *)(a1 + 400);
  if ((a2 & 0x40) != 0)
  {
    uint64_t v7 = *(void *)(v6 + 128);
    if (!v7 || (*(_BYTE *)(v7 + 24) & 0x40) == 0) {
      return 0LL;
    }
  }

  if (a3) {
    pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 400));
  }
  uint64_t v8 = dev_barrier(*(void *)(a1 + 384), (a2 >> 4) & 1);
  if (a3) {
    pthread_mutex_lock((pthread_mutex_t *)v6);
  }
  if ((_DWORD)v8 == 25 || (_DWORD)v8 == 0)
  {
    uint64_t v8 = *(void *)(v6 + 128);
    if (v8)
    {
      do
      {
        uint64_t v10 = *(void *)v8;
        int v11 = *(_DWORD *)(v8 + 24);
        if ((v11 & 0x40) != 0)
        {
          *(_DWORD *)(v8 + 24) = v11 & 0xFFFFFFBF;
          v19.int tv_sec = 0LL;
          v19.uint64_t tv_nsec = 0LL;
          clock_gettime(_CLOCK_UPTIME_RAW_APPROX, &v19);
          __darwin_time_t v12 = 1000000 * v19.tv_sec + SLODWORD(v19.tv_nsec) / 1000;
          __darwin_time_t v13 = v12 - *(void *)(v8 + 72);
          *(void *)(v8 + 72) = v12;
          *(void *)(v8 + 104) += v13;
          unint64_t v14 = *(void *)(v8 + 16);
          if (!*(_BYTE *)(a1 + 632) || v14 < *(void *)(*(void *)(a1 + 376) + 1408LL))
          {
            *(_DWORD *)(v6 + 104) = *(_DWORD *)(v8 + 36);
            *(_DWORD *)(v6 + 108) = *(_DWORD *)(v8 + 44);
          }

          spaceman_tx_complete(a1, v14);
          uint64_t v15 = *(void *)v8;
          unsigned int v16 = *(uint64_t **)(v8 + 8);
          if (*(void *)v8)
          {
            *(void *)(v15 + 8) = v16;
            unsigned int v16 = *(uint64_t **)(v8 + 8);
          }

          else
          {
            *(void *)(v6 + 136) = v16;
          }

          *unsigned int v16 = v15;
          *(void *)uint64_t v8 = 0LL;
          int v17 = *(uint64_t **)(v6 + 120);
          *(void *)(v8 + 8) = v17;
          uint64_t *v17 = v8;
          *(void *)(v6 + 120) = v8;
          cv_wakeup((pthread_cond_t *)(v6 + 256));
        }

        uint64_t v8 = v10;
      }

      while (v10);
    }
  }

  return v8;
}

uint64_t tx_checkpoint_write_prepare(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 64);
  if (*(_DWORD *)(v6 + 36) == *(_DWORD *)(*(void *)(a1 + 400) + 84LL))
  {
    ++*(_DWORD *)(a2 + 40);
    *(_DWORD *)(v6 + 36) = 0;
  }

  uint64_t v7 = tx_checkpoint_space_check(a1, a2, v5);
  if (!(_DWORD)v7)
  {
    if ((*(_BYTE *)(a3 + 19) & 0x20) == 0)
    {
      uint64_t v10 = *(void **)(a3 + 56);
      v8.i64[0] = *(void *)(a3 + 36);
      v10[3] = v8.i64[0];
      uint64_t v11 = *(void *)(a2 + 16);
      v10[1] = *(void *)(a3 + 112);
      void v10[2] = v11;
      obj_checksum_set(a3, v8, v9);
    }

    *(void *)(a3 + 120) = *(void *)(a2 + 16);
    *(void *)(a3 + 144) = 0LL;
    ++*(_DWORD *)(*(void *)(a2 + 64) + 36LL);
    *(_DWORD *)(a2 + 48) += v5;
  }

  return v7;
}

uint64_t tx_checkpoint_write(void *a1, uint64_t a2, uint64_t a3, int8x16_t a4, int8x16_t a5)
{
  int8x16_t v8 = (_DWORD *)a1[50];
  uint64_t v42 = 0LL;
  unint64_t v40 = 0LL;
  size_t v9 = *(unsigned int *)(a1[47] + 36LL);
  int v10 = *(_DWORD *)(a3 + 48);
  uint64_t v11 = *(void *)(a2 + 64);
  if (*(_DWORD *)(v11 + 36) == v8[21])
  {
    obj_checksum_set_phys((uint64_t)a1, v11, *(_DWORD *)(a1[47] + 36LL), a4, a5);
    uint64_t v12 = dev_write(a1[48], *(void *)(*(void *)(a2 + 64) + 8LL));
    if ((_DWORD)v12)
    {
      uint64_t v13 = v12;
      if (!v8[19]) {
        log_err("%s:%d: %s failed to write checkpoint map block %lld: %d\n");
      }
      return v13;
    }

    unint64_t v14 = (*(_DWORD *)(a2 + 40) + v8[24]) % v8[22];
    uint64_t v42 = -1LL;
    uint64_t v15 = nx_checkpoint_desc_block_address((uint64_t)a1, v14, &v42);
    if ((_DWORD)v15)
    {
      uint64_t v13 = v15;
      if (!v8[19]) {
        log_err("%s:%d: %s error getting next checkpoint map block address %d: %d\n");
      }
      return v13;
    }

    bzero(*(void **)(a2 + 64), v9);
    uint64_t v16 = *(void *)(a2 + 64);
    *(_DWORD *)(v16 + 24) = 1073741836;
    *(void *)(v16 + 8) = v42;
    *(void *)(v16 + 16) = *(void *)(a2 + 16);
    ++*(_DWORD *)(a2 + 40);
  }

  unint64_t v17 = (*(_DWORD *)(a2 + 48) + v8[25]) % v8[23];
  uint64_t v41 = -1LL;
  uint64_t v18 = nx_checkpoint_data_block_address((uint64_t)a1, v17, &v41, &v40);
  if ((_DWORD)v18)
  {
    uint64_t v13 = v18;
    if (!v8[19]) {
      log_err("%s:%d: %s error getting next checkpoint data block address %d: %d\n");
    }
  }

  else
  {
    signed int v19 = ((int)v9 + v10 - 1) / v9;
    pthread_mutex_lock((pthread_mutex_t *)(a1[49] + 328LL));
    unsigned __int8 v20 = (unsigned int *)(a3 + 32);
    do
      unsigned int v21 = __ldxr(v20);
    while (__stxr(v21 | 8, v20));
    if ((v21 & 8) != 0)
    {
      do
      {
        pthread_mutex_unlock((pthread_mutex_t *)(a1[49] + 328LL));
        pthread_mutex_lock((pthread_mutex_t *)(a1[49] + 328LL));
        do
          unsigned int v22 = __ldxr(v20);
        while (__stxr(v22 | 8, v20));
      }

      while ((v22 & 8) != 0);
    }

    uint64_t v38 = a3;
    CFTypeID v39 = *(char **)(a3 + 64);
    *(void *)(a3 + 128) = v41;
    if (v19 < 1)
    {
LABEL_30:
      else {
        int v27 = v39;
      }
      *(void *)(v38 + 64) = 0LL;
      uint64_t v28 = a1[49];
      uint64_t v29 = *(void *)(*(void *)(v28 + 848) + 104LL);
      *(void *)(v28 + 848) = v29;
      if (!v29) {
        *(void *)(v28 + 856) = v28 + 848;
      }
      *(void *)(v38 + 104) = 3735928559LL;
      do
        unsigned int v30 = __ldxr(v20);
      while (__stxr(v30 & 0xFFFFFFF7, v20));
      pthread_mutex_unlock((pthread_mutex_t *)(a1[49] + 328LL));
      uint64_t v31 = *(void *)(a2 + 64);
      unsigned int v32 = *(_DWORD *)(v31 + 36);
      uint64_t v33 = v31 + 40LL * v32;
      *(void *)(v33 + 40) = *(void *)(v38 + 36);
      *(void *)(v33 + 48) = *(unsigned int *)(v38 + 48);
      uint64_t v34 = *(void *)(v38 + 8);
      if (v34)
      {
        uint64_t v34 = obj_oid(v34);
        uint64_t v31 = *(void *)(a2 + 64);
        unsigned int v32 = *(_DWORD *)(v31 + 36);
      }

      CFTypeRef v35 = (void *)(v31 + 40LL * v32);
      v35[7] = v34;
      v35[8] = *(void *)(v38 + 112);
      v35[9] = *(void *)(v38 + 128);
      *(_DWORD *)(v31 + 36) = v32 + 1;
      *(_DWORD *)(a2 + 48) += v19;
      if (v27) {
        fs_obj_zfree_oc(v27, *(unsigned int *)(v38 + 48), *(void *)(v38 + 16), a1[49]);
      }
      return 0LL;
    }

    else
    {
      CFNumberRef v23 = v39;
      int v24 = v19;
      while (1)
      {
        unint64_t v25 = v40 >= v24 ? v24 : v40;
        uint64_t v26 = dev_write(a1[48], v41);
        if ((_DWORD)v26) {
          break;
        }
        v24 -= v25;
        if (!v24) {
          goto LABEL_30;
        }
        unint64_t v17 = (int)v17 + (int)v25 >= (*(_DWORD *)(a1[47] + 108LL) & 0x7FFFFFFFu) ? 0LL : (v17 + v25);
        uint64_t v26 = nx_checkpoint_data_block_address((uint64_t)a1, v17, &v41, &v40);
        if ((_DWORD)v26) {
          break;
        }
        v23 += v25 * v9;
        if (v24 <= 0) {
          goto LABEL_30;
        }
      }

      uint64_t v13 = v26;
      do
        unsigned int v36 = __ldxr(v20);
      while (__stxr(v36 & 0xFFFFFFF7, v20));
      pthread_mutex_unlock((pthread_mutex_t *)(a1[49] + 328LL));
      if (!v8[19]) {
        log_err("%s:%d: %s failed to write checkpoint data block %lld: %d\n");
      }
    }
  }

  return v13;
}

uint64_t tx_barrier(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(void *)(a1 + 400);
  if ((a2 & 0x80) != 0 && (uint64_t v5 = *(void *)(v4 + 144)) != 0 && (*(_BYTE *)(v5 + 24) & 8) != 0)
  {
    int v6 = 0;
    if ((a2 & 0x40) == 0) {
      goto LABEL_11;
    }
  }

  else
  {
    pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 400));
    int v6 = 1;
    if ((a2 & 0x40) == 0) {
      goto LABEL_11;
    }
  }

  uint64_t v7 = *(void *)(v4 + 128);
  if (!v7 || (*(_BYTE *)(v7 + 24) & 0x40) == 0)
  {
    if (v6) {
      pthread_mutex_unlock((pthread_mutex_t *)v4);
    }
    return 0LL;
  }

uint64_t tx_unmount(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 400);
  pthread_mutex_lock((pthread_mutex_t *)v2);
  *(_DWORD *)(v2 + 72) |= 1u;
  pthread_mutex_unlock((pthread_mutex_t *)v2);
  while (1)
  {
    uint64_t result = tx_finish(a1, 8);
    if ((_DWORD)result != 16) {
      break;
    }
    log_debug( "%s:%d: %s waiting for transaction to finish\n",  "tx_unmount",  1880,  (const char *)(*(void *)(a1 + 384) + 208LL));
    sleep(1u);
  }

  if ((_DWORD)result)
  {
    uint64_t result = (uint64_t)log_err( "%s:%d: %s tx_finish() failed, %d\n",  "tx_unmount",  1895,  (const char *)(*(void *)(a1 + 384) + 208LL),  result);
    if (!*(_BYTE *)(a1 + 629))
    {
      pthread_mutex_lock((pthread_mutex_t *)v2);
      return pthread_mutex_unlock((pthread_mutex_t *)v2);
    }
  }

  else if (!*(_BYTE *)(a1 + 629))
  {
    pthread_mutex_lock((pthread_mutex_t *)v2);
    if ((*(_BYTE *)(v2 + 72) & 2) != 0)
    {
      int v4 = tx_barrier_internal(a1, 0x10u, 0);
      if (v4) {
        log_err( "%s:%d: %s First sync/barrier failed: %d\n",  "tx_unmount",  1909,  (const char *)(*(void *)(a1 + 384) + 208LL),  v4);
      }
      if (!*(_BYTE *)(a1 + 628))
      {
        uint64_t v7 = *(void *)(a1 + 376);
        if (*(_DWORD *)(v7 + 140))
        {
          if (*(_DWORD *)(v7 + 148)) {
            *(void *)(v7 + 1264) |= 2uLL;
          }
        }
      }

      obj_checksum_set(a1, v5, v6);
      int v8 = dev_write(*(void *)(a1 + 384), 0LL);
      if (v8) {
        log_err( "%s:%d: %s failed to write superblock to block 0: %d\n",  "tx_unmount",  1920,  (const char *)(*(void *)(a1 + 384) + 208LL),  v8);
      }
      size_t v9 = *(_BYTE **)(a1 + 376);
      if ((v9[65] & 1) != 0)
      {
        int v10 = nx_fusion_superblock_write(a1, v9);
        if (v10) {
          log_err( "%s:%d: %s failed to write superblock to fusion tier2 device block 0: %d\n",  "tx_unmount",  1925,  (const char *)(*(void *)(a1 + 384) + 208LL),  v10);
        }
      }

      int v11 = tx_barrier_internal(a1, 0x10u, 0);
      if (v11) {
        log_err( "%s:%d: %s Final sync/barrier failed: %d\n",  "tx_unmount",  1932,  (const char *)(*(void *)(a1 + 384) + 208LL),  v11);
      }
    }

    return pthread_mutex_unlock((pthread_mutex_t *)v2);
  }

  return result;
}

uint64_t tx_finish(uint64_t a1, __int16 a2)
{
  if (*(_BYTE *)(a1 + 627)) {
    return 30LL;
  }
  uint64_t v5 = *(void *)(a1 + 400);
  pthread_mutex_lock((pthread_mutex_t *)v5);
  int v6 = *(_DWORD *)(v5 + 72);
  if ((a2 & 8) == 0 && (v6 & 1) != 0)
  {
LABEL_18:
    uint64_t v2 = 1LL;
  }

  else
  {
    while (1)
    {
      uint64_t v7 = *(void *)(v5 + 144);
      if ((v6 & 0x40) == 0) {
        break;
      }
      if (v7) {
        *(_DWORD *)(v7 + 24) |= 0x100000u;
      }
      if ((a2 & 0x100) != 0)
      {
        *(_DWORD *)(v5 + 72) = v6 & 0xFFFFFFF3;
        cv_wakeup((pthread_cond_t *)(v5 + 256));
        uint64_t v7 = *(void *)(v5 + 144);
      }

      if (v7)
      {
        uint64_t v2 = *(unsigned int *)(v7 + 52);
        if ((_DWORD)v2) {
          goto LABEL_19;
        }
      }

      cv_wait( (pthread_cond_t *)(v5 + 256),  (pthread_mutex_t *)v5,  8LL,  (uint64_t)"nx_tx_finish_wait_for_dirty_data",  0LL);
      uint64_t v8 = *(void *)(v5 + 144);
      if (v8)
      {
        unsigned int v9 = *(_DWORD *)(v8 + 52);
        if (v9 | a2 & 0x100)
        {
          if (v9) {
            uint64_t v2 = v9;
          }
          else {
            uint64_t v2 = 35LL;
          }
          goto LABEL_19;
        }
      }

      else if ((a2 & 0x100) != 0)
      {
        goto LABEL_65;
      }

      int v6 = *(_DWORD *)(v5 + 72);
      if ((a2 & 8) == 0 && (v6 & 1) != 0) {
        goto LABEL_18;
      }
    }

    if (v7 || (uint64_t v7 = **(void **)(*(void *)(v5 + 136) + 8LL)) != 0 && (*(_BYTE *)(v7 + 24) & 0x30) != 0)
    {
      if ((a2 & 2) == 0 && (v6 & 0xC) == 8)
      {
        uint64_t v2 = 16LL;
        goto LABEL_19;
      }

      uint64_t v11 = *(void *)(v7 + 16);
      if ((a2 & 8) == 0) {
        ++*(void *)(v5 + 176);
      }
      int v12 = *(_DWORD *)(v7 + 24);
      int v13 = a2 & 1;
      if (v12 & 0x100000 | a2 & 0x10 | v13 | a2 & 0x20) {
        *(_DWORD *)(v7 + 24) = ((a2 & 0x30) << 14) | (v13 << 17) | v12 & 0xFFEFFFFF;
      }
      if ((v12 & 1) != 0) {
        tx_transition(v7, 1, 2);
      }
      if (*(_DWORD *)(v7 + 28))
      {
        uint64_t v2 = (16 * v13) ^ 0x10u;
      }

      else
      {
        if ((*(_BYTE *)(v7 + 24) & 2) != 0)
        {
          unint64_t v14 = tx_transition(v7, 2, 4);
          unint64_t v15 = v14;
          if (v14 >= 0xF4241) {
            log_warn( "%s:%d: %s tx xid %lld took %lld us to close\n",  "tx_finish",  2149,  (const char *)(*(void *)(a1 + 384) + 208LL),  *(void *)(v7 + 16),  v14);
          }
          *(void *)(v5 + 248) = (*(void *)(v5 + 248) + v15) >> 1;
        }

        uint64_t v2 = tx_flush_initiate(a1);
        if (!(_DWORD)v2)
        {
          int v16 = *(_DWORD *)(v5 + 72);
          if ((v16 & 0x40) != 0)
          {
            *(_DWORD *)(v5 + 72) = v16 & 0xFFFFFFF3;
            if ((a2 & 0x100) != 0)
            {
LABEL_65:
              uint64_t v2 = 35LL;
              goto LABEL_19;
            }

            cv_wakeup((pthread_cond_t *)(v5 + 256));
          }

          uint64_t v2 = 0LL;
        }
      }

      if ((a2 & 9) != 0)
      {
        if ((a2 & 1) != 0) {
          int v17 = 126;
        }
        else {
          int v17 = 62;
        }
        do
        {
          if (*(void *)(v7 + 16) != v11 || (*(_DWORD *)(v7 + 24) & v17) == 0) {
            break;
          }
          if (!(_DWORD)v2) {
            cv_wait((pthread_cond_t *)(v5 + 256), (pthread_mutex_t *)v5, 8LL, (uint64_t)"nx_tx_finish_wait", 0LL);
          }
          int v18 = *(_DWORD *)(v5 + 72);
          if ((a2 & 8) == 0 && (v18 & 1) != 0) {
            goto LABEL_18;
          }
          if ((a2 & 0x100) != 0 && (v18 & 4) == 0) {
            goto LABEL_65;
          }
        }

        while (!*(_DWORD *)(v5 + 76));
        uint64_t v19 = **(void **)(*(void *)(v5 + 136) + 8LL);
      }
    }

    else if ((a2 & 0x11) != 0)
    {
      uint64_t v2 = tx_barrier_internal(a1, a2 & 0x10, 0);
    }

    else
    {
      uint64_t v2 = 0LL;
    }
  }

uint64_t tx_enter_internal(uint64_t a1, uint64_t *a2, char a3)
{
  if (*(_BYTE *)(a1 + 627)) {
    return 30LL;
  }
  uint64_t v7 = *(void *)(a1 + 400);
  pthread_mutex_lock((pthread_mutex_t *)v7);
  if ((*(_DWORD *)(v7 + 72) & 1) != 0)
  {
LABEL_37:
    pthread_mutex_unlock((pthread_mutex_t *)v7);
    return 1LL;
  }

  uint64_t v8 = *a2;
  if (*a2 != -1)
  {
    if (v8) {
      goto LABEL_6;
    }
    goto LABEL_15;
  }

  uint64_t v11 = *(void *)(v7 + 144);
  if (v11) {
    BOOL v12 = (*(_DWORD *)(v7 + 72) & 0xC) == 8;
  }
  else {
    BOOL v12 = 1;
  }
  if (v12 || (*(_BYTE *)(v11 + 24) & 0x1C) != 0)
  {
    *a2 = 0LL;
LABEL_15:
    __tp.__darwin_time_t tv_sec = 0LL;
    __tp.uint64_t tv_nsec = 0LL;
    clock_gettime(_CLOCK_UPTIME_RAW_APPROX, &__tp);
    unint64_t v15 = 0LL;
    uint64_t v32 = SLODWORD(__tp.tv_nsec) / 1000;
    __darwin_time_t tv_sec = __tp.tv_sec;
    while (1)
    {
      uint64_t v9 = *(void *)(v7 + 144);
      if (v9 && (*(_BYTE *)(v9 + 24) & 0x1E) != 0)
      {
        int v16 = "nx_tx_wait";
        if ((a3 & 2) != 0)
        {
LABEL_20:
          int v17 = *(_DWORD *)(v9 + 24);
          unint64_t v15 = "nx_tx_wait_closing";
          if ((v17 & 2) == 0)
          {
            if ((v17 & 4) != 0)
            {
              uint64_t v18 = **(void **)(*(void *)(v7 + 136) + 8LL);
              if (!v18 || (unint64_t v15 = "nx_tx_wait_closed_prev_flushing", (*(_BYTE *)(v18 + 24) & 0x30) == 0)) {
                unint64_t v15 = "nx_tx_wait_closed";
              }
            }

            else if ((v17 & 0x18) != 0)
            {
              unint64_t v15 = "nx_tx_wait_flush";
            }

            else
            {
              unint64_t v15 = v16;
            }
          }

          goto LABEL_36;
        }
      }

      else
      {
        if ((a3 & 2) != 0 || (*(_BYTE *)(v7 + 72) & 8) == 0)
        {
          uint64_t v3 = 0LL;
          int v34 = 0;
          if (!v9) {
            goto LABEL_42;
          }
LABEL_40:
          if ((*(_BYTE *)(v9 + 24) & 1) != 0)
          {
            if (!(_DWORD)v3)
            {
              ++*(_DWORD *)(v9 + 28);
              *a2 = *(void *)(v9 + 16);
              if (v15)
              {
                int v10 = v34;
                if (v34)
                {
                  if (strcmp(v15, "nx_tx_wait_frozen"))
                  {
                    __tp.__darwin_time_t tv_sec = 0LL;
                    __tp.uint64_t tv_nsec = 0LL;
                    clock_gettime(_CLOCK_UPTIME_RAW_APPROX, &__tp);
                    unint64_t v26 = 1000000 * (__tp.tv_sec - tv_sec) - v32 + SLODWORD(__tp.tv_nsec) / 1000;
                    *(void *)(v7 + 168) += v26;
                    if (v26 > 0xF4240 && nx_ratelimit_log_allowed(a1)) {
                      log_warn( "%s:%d: %s waited %lld us to open tx xid %lld (%s)\n",  "tx_enter_internal",  2414,  (const char *)(*(void *)(a1 + 384) + 208LL),  v26,  *(void *)(v9 + 16),  v15);
                    }
                    ++*(void *)(v7 + 160);
                  }

                  int v10 = 1;
                }
              }

              else
              {
                int v10 = v34;
              }

LABEL_88:
              ++*(_DWORD *)(v9 + 32);
              pthread_mutex_unlock((pthread_mutex_t *)v7);
              if (v10) {
                spaceman_manage_free_queues((void *)a1, v9);
              }
              return 0LL;
            }

LABEL_86:
            pthread_mutex_unlock((pthread_mutex_t *)v7);
            return v3;
          }

          while (1)
          {
            int v23 = *(_DWORD *)(v9 + 24);
            if ((v23 & 1) == 0) {
              break;
            }
            do
            {
              log_debug( "%s:%d: %s waiting for available tx to open: xid %lld\n",  "tx_enter_internal",  2399,  (const char *)(*(void *)(a1 + 384) + 208LL),  *(void *)(v7 + 64));
              cv_wait((pthread_cond_t *)(v7 + 256), (pthread_mutex_t *)v7, 8LL, (uint64_t)"nx_tx_wait_open", 0LL);
LABEL_62:
              uint64_t v9 = *(void *)(v7 + 144);
              if (v9) {
                goto LABEL_40;
              }
LABEL_42:
              uint64_t v19 = *(uint64_t **)(v7 + 112);
            }

            while (!v19);
            *(void *)(v7 + 144) = v19;
            uint64_t v20 = *v19;
            unsigned int v21 = (void *)v19[1];
            if (*v19)
            {
              *(void *)(v20 + 8) = v21;
              unsigned int v21 = (void *)v19[1];
            }

            else
            {
              *(void *)(v7 + 120) = v21;
            }

            void *v21 = v20;
            uint64_t v22 = *(void *)(v7 + 64);
            *(void *)(v7 + 64) = v22 + 1;
            uint64_t v9 = *(void *)(v7 + 144);
            *(void *)(v9 + 16) = v22;
            *(void *)(v9 + 24) = 0LL;
            *(_DWORD *)(v9 + 32) = 0;
            *(_DWORD *)(v9 + 52) = 0;
          }

          if (*(_BYTE *)(a1 + 626))
          {
            obj_checksum_set(a1, v13, v14);
            uint64_t v3 = dev_write(*(void *)(a1 + 384), 0LL);
            if ((_DWORD)v3) {
              goto LABEL_50;
            }
            int v24 = *(_BYTE **)(a1 + 376);
            if ((v24[65] & 1) != 0)
            {
              uint64_t v25 = nx_fusion_superblock_write(a1, v24);
              if ((_DWORD)v25)
              {
                uint64_t v3 = v25;
                log_err( "%s:%d: %s failed to write superblock to fusion tier2 device block 0: %d\n",  "tx_enter_internal",  2371,  (const char *)(*(void *)(a1 + 384) + 208LL),  v25);
LABEL_50:
                log_err( "%s:%d: %s Error: tx[%lld] failed to unclean superblock: %d\n",  "tx_enter_internal",  2377,  (const char *)(*(void *)(a1 + 384) + 208LL),  *(void *)(*(void *)(v7 + 144) + 16LL),  v3);
                uint64_t v9 = *(void *)(v7 + 144);
LABEL_53:
                log_err( "%s:%d: %s Error: tx[%lld] failed to start: %d\n",  "tx_enter_internal",  2381,  (const char *)(*(void *)(a1 + 384) + 208LL),  *(void *)(v9 + 16),  v3);
                goto LABEL_62;
              }
            }

            *(_BYTE *)(a1 + 626) = 0;
            uint64_t v9 = *(void *)(v7 + 144);
            int v23 = *(_DWORD *)(v9 + 24);
            if ((v23 & 1) != 0) {
              panic("bad transition tx flags 0x%x to 0x%x (expected 0x%x)\n", v23, 1, 0);
            }
          }

          else if ((_DWORD)v3)
          {
            goto LABEL_53;
          }

          *(_DWORD *)(v9 + 24) = v23 | 1;
          __tp.__darwin_time_t tv_sec = 0LL;
          __tp.uint64_t tv_nsec = 0LL;
          clock_gettime(_CLOCK_UPTIME_RAW_APPROX, &__tp);
          *(void *)(v9 + 72) = 1000000 * __tp.tv_sec + SLODWORD(__tp.tv_nsec) / 1000;
          if ((a3 & 2) != 0) {
            *(_DWORD *)(*(void *)(v7 + 144) + 24LL) |= 0x10000u;
          }
          cv_wakeup((pthread_cond_t *)(v7 + 256));
          uint64_t v3 = 0LL;
          int v34 = 1;
          goto LABEL_62;
        }

        if (*(unsigned __int16 *)(v7 + 80) >= 0xAu)
        {
LABEL_73:
          uint64_t v27 = **(void **)(*(void *)(v7 + 136) + 8LL);
          if (v27)
          {
            if (*(_DWORD *)(v27 + 24) & 0x30)
            {
              BOOL v29 = 0;
            }

            else
            {
              uint64_t v27 = *(void *)(v7 + 144);
              BOOL v29 = v9 == 0;
            }

            if (!v29)
            {
              uint64_t v9 = v27;
              goto LABEL_82;
            }
          }

          else if (v9)
          {
LABEL_82:
            unsigned int v30 = *(_DWORD *)(v9 + 52);
            if (v30) {
              uint64_t v3 = v30;
            }
            else {
              uint64_t v3 = 5LL;
            }
            goto LABEL_86;
          }

          uint64_t v3 = 5LL;
          goto LABEL_86;
        }
      }

      if ((*(_DWORD *)(v7 + 72) & 8) != 0) {
        int v16 = "nx_tx_wait_frozen";
      }
      else {
        int v16 = "nx_tx_wait";
      }
      if (v9) {
        goto LABEL_20;
      }
      unint64_t v15 = v16;
LABEL_36:
      cv_wait((pthread_cond_t *)(v7 + 256), (pthread_mutex_t *)v7, 8LL, (uint64_t)v15, 0LL);
      if ((*(_BYTE *)(v7 + 72) & 1) != 0) {
        goto LABEL_37;
      }
    }
  }

  uint64_t v8 = *(void *)(v11 + 16);
  *a2 = v8;
  if (!v8) {
    goto LABEL_15;
  }
LABEL_6:
  uint64_t v9 = *(void *)(v7 + 144);
  if (v9 && v8 == *(void *)(v9 + 16))
  {
    int v10 = 0;
    ++*(_DWORD *)(v9 + 28);
    goto LABEL_88;
  }

  pthread_mutex_unlock((pthread_mutex_t *)v7);
  return 22LL;
}

__darwin_time_t tx_transition(uint64_t a1, int a2, int a3)
{
  if (a2)
  {
    int v4 = *(_DWORD *)(a1 + 24);
    if ((v4 & a2) == 0) {
      panic("can't transition from tx flags 0x%x to 0x%x (expected 0x%x)\n", v4, a3, a2);
    }
  }

  if (a3)
  {
    int v5 = *(_DWORD *)(a1 + 24);
    if ((v5 & a3) != 0) {
      panic("bad transition tx flags 0x%x to 0x%x (expected 0x%x)\n", v5, a3, a2);
    }
  }

  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a1 + 24) & ~a2 | a3;
  __tp.__darwin_time_t tv_sec = 0LL;
  __tp.uint64_t tv_nsec = 0LL;
  clock_gettime(_CLOCK_UPTIME_RAW_APPROX, &__tp);
  __darwin_time_t v6 = 1000000 * __tp.tv_sec + SLODWORD(__tp.tv_nsec) / 1000;
  __darwin_time_t result = v6 - *(void *)(a1 + 72);
  *(void *)(a1 + 72) = v6;
  return result;
}

uint64_t tx_flush_initiate(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 400);
  for (int i = *(_DWORD *)(v2 + 72); (i & 0x10) != 0; int i = *(_DWORD *)(v2 + 72))
  {
    *(_DWORD *)(v2 + 72) = i | 0x20;
    cv_wait((pthread_cond_t *)(v2 + 256), (pthread_mutex_t *)v2, 8LL, (uint64_t)"nx_tx_flush_busy", 0LL);
  }

  *(_DWORD *)(v2 + 72) = i | 0x10;
  uint64_t v4 = **(void **)(*(void *)(v2 + 136) + 8LL);
  if (!v4 || (int v5 = *(_DWORD *)(v4 + 24), (v5 & 0x10) == 0))
  {
    uint64_t v4 = *(void *)(v2 + 144);
    if (!v4) {
      goto LABEL_9;
    }
    int v5 = *(_DWORD *)(v4 + 24);
  }

  if ((v5 & 0x14) == 0 || (uint64_t v6 = tx_flush(a1, v4), !(_DWORD)v6))
  {
LABEL_9:
    uint64_t v7 = *(void *)(v2 + 144);
    if (v7 && (*(_BYTE *)(v7 + 24) & 4) != 0) {
      uint64_t v6 = tx_flush(a1, v7);
    }
    else {
      uint64_t v6 = 0LL;
    }
  }

  int v8 = *(_DWORD *)(v2 + 72);
  *(_DWORD *)(v2 + 72) = v8 & 0xFFFFFFCF;
  if ((v8 & 0x20) != 0) {
    cv_wakeup((pthread_cond_t *)(v2 + 256));
  }
  return v6;
}

uint64_t tx_enter(uint64_t a1, uint64_t *a2)
{
  return tx_enter_internal(a1, a2, 0);
}

uint64_t tx_leave(uint64_t a1, uint64_t a2, int a3)
{
  if (!*(_BYTE *)(a1 + 627))
  {
    uint64_t v7 = *(void *)(a1 + 400);
    pthread_mutex_lock((pthread_mutex_t *)v7);
    uint64_t v8 = *(void *)(v7 + 144);
    if ((*(_BYTE *)(v8 + 24) & 1) == 0) {
      goto LABEL_22;
    }
    if ((a3 & 4) != 0)
    {
      BOOL v9 = 0;
      ++*(void *)(v7 + 176);
    }

    else
    {
      if (*(_DWORD *)(v8 + 32) <= 0x186A0u && !obj_cache_tx_start_closing(*(void *)(a1 + 392)))
      {
        int started = spaceman_tx_start_closing((void *)a1);
        BOOL v9 = started == 0;
        BOOL v10 = started != 0;
LABEL_10:
        if ((*(_BYTE *)(v7 + 72) & 0x40) != 0)
        {
          if (!v9) {
            *(_DWORD *)(v8 + 24) |= 0x100000u;
          }
        }

        else
        {
          int v11 = *(_DWORD *)(v8 + 24);
          if ((v11 & 0x100000) != 0)
          {
            v11 &= ~0x100000u;
            *(_DWORD *)(v8 + 24) = v11;
          }

          else if (!v10)
          {
            goto LABEL_22;
          }

          if ((v11 & 1) == 0) {
            panic("can't transition from tx flags 0x%x to 0x%x (expected 0x%x)\n", v11, 2, 1);
          }
          if ((v11 & 2) != 0) {
            panic("bad transition tx flags 0x%x to 0x%x (expected 0x%x)\n", v11, 2, 1);
          }
          *(_DWORD *)(v8 + 24) = v11 & 0xFFFFFFFC | 2;
          __tp.__darwin_time_t tv_sec = 0LL;
          __tp.uint64_t tv_nsec = 0LL;
          clock_gettime(_CLOCK_UPTIME_RAW_APPROX, &__tp);
          *(void *)(v8 + 72) = 1000000 * __tp.tv_sec + SLODWORD(__tp.tv_nsec) / 1000;
        }

uint64_t tx_flush(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(a1 + 392);
  uint64_t v4 = *(void *)(a1 + 400);
  uint64_t v88 = 0LL;
  uint64_t v6 = **(void **)(*(void *)(v4 + 136) + 8LL);
  if (v6 && (*(_BYTE *)(v6 + 24) & 0x10) != 0)
  {
    if (v6 != a2) {
      panic("not handling the flushing tx!\n");
    }
  }

  else
  {
    if (*(void *)(v4 + 144) != a2) {
      panic("not handling the current tx!\n");
    }
    if ((*(_BYTE *)(a2 + 24) & 0x14) == 0) {
      panic("current tx not closed/flushing?!\n");
    }
  }

  int v7 = *(_DWORD *)(a2 + 24);
  if ((v7 & 0x10) != 0)
  {
LABEL_45:
    if (*(_BYTE *)(a1 + 629))
    {
      int v23 = *(_DWORD *)(a2 + 24);
      if ((v23 & 0x10) == 0) {
        panic("can't transition from tx flags 0x%x to 0x%x (expected 0x%x)\n", v23, 1, 16);
      }
      if ((v23 & 1) != 0) {
        panic("bad transition tx flags 0x%x to 0x%x (expected 0x%x)\n", v23, 1, 16);
      }
      *(_DWORD *)(a2 + 24) = v23 & 0xFFFFFFEE | 1;
      __tp.__darwin_time_t tv_sec = 0LL;
      __tp.uint64_t tv_nsec = 0LL;
      clock_gettime(_CLOCK_UPTIME_RAW_APPROX, &__tp);
      *(void *)(a2 + 72) = 1000000 * __tp.tv_sec + SLODWORD(__tp.tv_nsec) / 1000;
      *(_DWORD *)(a2 + 32) = 0;
      *(_DWORD *)(a2 + 52) = 0;
    }

    else if (*(void *)(v4 + 144) == a2)
    {
      *(void *)a2 = 0LL;
      int v24 = *(uint64_t **)(v4 + 136);
      *(void *)(a2 + 8) = v24;
      uint64_t *v24 = a2;
      *(void *)(v4 + 136) = a2;
      *(void *)(v4 + 144) = 0LL;
    }

    pthread_mutex_unlock((pthread_mutex_t *)v4);
    cv_wakeup((pthread_cond_t *)(v4 + 256));
    uint64_t v25 = obj_cache_flush_write((pthread_mutex_t *)v5, 2 * (*(_BYTE *)(a1 + 629) == 0));
    if (*(_BYTE *)(a1 + 629))
    {
      pthread_mutex_lock((pthread_mutex_t *)v4);
      obj_cache_flush_unprepare(v5);
      tx_barrier_internal(a1, 0, 0);
      cv_wakeup((pthread_cond_t *)(v4 + 256));
      uint64_t v11 = 0LL;
      *(_DWORD *)(a2 + 52) = 0;
      return v11;
    }

    uint64_t v11 = v25;
    if ((_DWORD)v25)
    {
      pthread_mutex_lock((pthread_mutex_t *)v4);
      if (!*(_DWORD *)(v4 + 76)) {
        log_err( "%s:%d: %s xid %lld error flushing objects from the cache: %d\n",  "tx_flush",  1120,  (const char *)(*(void *)(a1 + 384) + 208LL),  *(void *)(a2 + 16),  v11);
      }
      int v28 = 1122;
      goto LABEL_73;
    }

    while (1)
    {
      uint64_t v30 = *(void *)(v5 + 848);
      if (!v30) {
        break;
      }
      uint64_t v29 = tx_checkpoint_write((void *)a1, a2, *(void *)(v5 + 848), v26, v27);
      if ((_DWORD)v29)
      {
        uint64_t v11 = v29;
        pthread_mutex_lock((pthread_mutex_t *)v4);
        if (!*(_DWORD *)(v4 + 76)) {
          log_err( "%s:%d: %s xid %lld failed to write checkpoint data @ 0x%llx: %d\n",  "tx_flush",  1136,  (const char *)(*(void *)(a1 + 384) + 208LL),  *(void *)(a2 + 16),  *(void *)(v30 + 128),  v11);
        }
        int v28 = 1138;
        goto LABEL_73;
      }

      obj_checkpoint_done((unsigned int *)v30);
      obj_release((uint64_t *)v30);
    }

    uint64_t v31 = *(void *)(a2 + 64);
    *(_DWORD *)(v31 + 32) |= 1u;
    obj_checksum_set_phys(a1, v31, *(_DWORD *)(*(void *)(a1 + 376) + 36LL), v26, v27);
    uint64_t v32 = dev_write(*(void *)(a1 + 384), *(void *)(*(void *)(a2 + 64) + 8LL));
    if ((_DWORD)v32)
    {
      uint64_t v11 = v32;
      pthread_mutex_lock((pthread_mutex_t *)v4);
      if (!*(_DWORD *)(v4 + 76)) {
        log_err( "%s:%d: %s xid %lld failed to write last checkpoint map block %lld: %d\n",  "tx_flush",  1155,  (const char *)(*(void *)(a1 + 384) + 208LL),  *(void *)(a2 + 16),  *(void *)(*(void *)(a2 + 64) + 8LL),  v11);
      }
      int v28 = 1157;
LABEL_73:
      *(_DWORD *)(v4 + 76) = v28;
      ++*(_WORD *)(v4 + 80);
LABEL_74:
      uint64_t v19 = (pthread_cond_t *)(v4 + 256);
      goto LABEL_75;
    }

    ++*(_DWORD *)(a2 + 40);
    pthread_mutex_lock((pthread_mutex_t *)v4);
    int v41 = *(_DWORD *)(a2 + 40);
    uint64_t v42 = *(_DWORD **)(a2 + 56);
    int v43 = *(_DWORD *)(a2 + 48);
    int v44 = v42[37];
    if (v41 != v42[35] || v43 != v44) {
      panic("flush phase checkpoint lengths (%d %d) don't match prepare phase (%d %d)\n", v41, v43, v42[35], v44);
    }
    int v46 = *(_DWORD **)(a1 + 376);
    v46[34] = v42[34];
    v46[35] = v41;
    v46[36] = v42[36];
    v46[37] = v43;
    int v47 = *(_DWORD *)(a2 + 24);
    if ((v47 & 0x10) == 0) {
      panic("can't transition from tx flags 0x%x to 0x%x (expected 0x%x)\n", v47, 32, 16);
    }
    if ((v47 & 0x20) != 0) {
      panic("bad transition tx flags 0x%x to 0x%x (expected 0x%x)\n", v47, 32, 16);
    }
    *(_DWORD *)(a2 + 24) = v47 & 0xFFFFFFCF | 0x20;
    __tp.__darwin_time_t tv_sec = 0LL;
    __tp.uint64_t tv_nsec = 0LL;
    clock_gettime(_CLOCK_UPTIME_RAW_APPROX, &__tp);
    __darwin_time_t v48 = 1000000 * __tp.tv_sec + SLODWORD(__tp.tv_nsec) / 1000;
    unint64_t v49 = v48 - *(void *)(a2 + 72);
    *(void *)(a2 + 72) = v48;
    if (v49 > 0xF4240) {
      log_warn( "%s:%d: %s tx xid %lld took %lld us to flush\n",  "tx_flush",  1184,  (const char *)(*(void *)(a1 + 384) + 208LL),  *(void *)(a2 + 16),  v49);
    }
    *(void *)(a2 + 104) = v49;
    cv_wakeup((pthread_cond_t *)(v4 + 256));
    uint64_t v50 = tx_barrier_internal(a1, 0, 1);
    if ((_DWORD)v50)
    {
      uint64_t v11 = v50;
      if (!*(_DWORD *)(v4 + 76)) {
        log_err( "%s:%d: %s xid %lld sync/barrier failed: %d\n",  "tx_flush",  1193,  (const char *)(*(void *)(a1 + 384) + 208LL),  *(void *)(a2 + 16),  v50);
      }
      int v51 = 1195;
      goto LABEL_111;
    }

    pthread_mutex_unlock((pthread_mutex_t *)v4);
    if (*(_BYTE *)(a1 + 632))
    {
      *(_DWORD *)(a2 + 24) |= 0x80000u;
      bzero(*(void **)(a2 + 64), *(unsigned int *)(*(void *)(a1 + 376) + 36LL));
    }

    uint64_t v52 = dev_write(*(void *)(a1 + 384), *(void *)(a2 + 112));
    if ((_DWORD)v52)
    {
      uint64_t v11 = v52;
      pthread_mutex_lock((pthread_mutex_t *)v4);
      if (!*(_DWORD *)(v4 + 76)) {
        log_err( "%s:%d: %s xid %lld failed to write checkpoint superblock %lld: %d\n",  "tx_flush",  1222,  (const char *)(*(void *)(a1 + 384) + 208LL),  *(void *)(a2 + 16),  *(void *)(a2 + 112),  v11);
      }
      int v51 = 1224;
      goto LABEL_111;
    }

    if ((*(_BYTE *)(a2 + 26) & 8) == 0)
    {
LABEL_114:
      pthread_mutex_lock((pthread_mutex_t *)v4);
      unint64_t v55 = tx_transition(a2, 32, 64);
      unint64_t v56 = v55;
      if (v55 > 0xF4240) {
        log_warn( "%s:%d: %s tx xid %lld took %lld us to sync and write superblock\n",  "tx_flush",  1285,  (const char *)(*(void *)(a1 + 384) + 208LL),  *(void *)(a2 + 16),  v55);
      }
      *(void *)(a2 + 104) += v56;
      unsigned int v57 = *(_DWORD *)(a2 + 24);
      if ((v57 & 0x20000) == 0) {
        goto LABEL_144;
      }
      ++*(void *)(v4 + 184);
      if ((v57 & 0x40000) != 0) {
        ++*(void *)(v4 + 192);
      }
      uint64_t v58 = tx_barrier_internal(a1, (v57 >> 14) & 0x10, 0);
      if (!(_DWORD)v58)
      {
LABEL_144:
        *(_DWORD *)(a2 + 52) = 0;
        *(_DWORD *)(v4 + 72) |= 2u;
        *(void *)(v4 + 76) = 0LL;
        uint64_t v79 = *(void *)(a2 + 56);
        int v80 = *(_DWORD *)(v79 + 128);
        uint64_t v81 = *(void *)(a1 + 376);
        *(_DWORD *)(v81 + 128) = v80;
        *(_DWORD *)(v4 + 96) = v80;
        int v82 = *(_DWORD *)(v79 + 132);
        *(_DWORD *)(v81 + 132) = v82;
        *(_DWORD *)(v4 + 100) = v82;
        *(void *)(v81 + 16) = *(void *)(v79 + 16);
        uint64_t v83 = *(void *)(v4 + 152);
        *(void *)(v4 + 152) = v83 + 1;
        if (v83)
        {
          v84.i64[0] = *(unsigned int *)(a2 + 32);
          v84.i64[1] = *(void *)(a2 + 80);
          *(uint64x2_t *)(v4 + 200) = vshrq_n_u64((uint64x2_t)vaddq_s64(*(int64x2_t *)(v4 + 200), v84), 1uLL);
          *(uint64x2_t *)(v4 + 216) = vshrq_n_u64( (uint64x2_t)vaddq_s64(*(int64x2_t *)(a2 + 88), *(int64x2_t *)(v4 + 216)),  1uLL);
          *(void *)(v4 + 240) = (*(void *)(a2 + 104) + *(void *)(v4 + 240)) >> 1;
          if (__ROR8__(0xCCCCCCCCCCCCCCCDLL * (v83 + 1), 2) <= 0xCCCCCCCCCCCCCCCuLL
            && nx_ratelimit_log_allowed(a1))
          {
            unint64_t v85 = *(void *)(v4 + 160);
            if (v85 <= 1) {
              unint64_t v86 = 1LL;
            }
            else {
              unint64_t v86 = *(void *)(v4 + 160);
            }
            log_debug( "%s:%d: %s xid %llu tx stats: # %llu owait %llu %lluus finish %llu bar2 %lld f %lld enter %llu fq %llu %llu %lluus close %lluus prep %lluus flush %lluus\n",  "tx_flush",  1349,  (const char *)(*(void *)(a1 + 384) + 208LL),  *(void *)(a2 + 16),  *(void *)(v4 + 152),  v85,  *(void *)(v4 + 168) / v86,  *(void *)(v4 + 176),  *(void *)(v4 + 184),  *(void *)(v4 + 192),  *(void *)(v4 + 200),  *(void *)(v4 + 216),  *(void *)(v4 + 224),  *(void *)(v4 + 208),  *(void *)(v4 + 248),  *(void *)(v4 + 232),  *(void *)(v4 + 240));
          }
        }

        else
        {
          *(void *)(v4 + 200) = *(unsigned int *)(a2 + 32);
          *(_OWORD *)(v4 + 208) = *(_OWORD *)(a2 + 80);
          *(void *)(v4 + 224) = *(void *)(a2 + 96);
          *(void *)(v4 + 240) = *(void *)(a2 + 104);
        }

        cv_wakeup((pthread_cond_t *)(v4 + 256));
        return 0LL;
      }

      uint64_t v11 = v58;
      if (!*(_DWORD *)(v4 + 76)) {
        log_err( "%s:%d: %s xid %lld second sync/barrier failed: %d\n",  "tx_flush",  1297,  (const char *)(*(void *)(a1 + 384) + 208LL),  *(void *)(a2 + 16),  v58);
      }
      *(_DWORD *)(v4 + 76) = 1299;
      ++*(_WORD *)(v4 + 80);
      --*(_DWORD *)(a2 + 40);
      uint64_t v53 = a2;
      int v54 = 64;
LABEL_112:
      *(void *)(a2 + 104) += tx_transition(v53, v54, 16);
      goto LABEL_74;
    }

    uint64_t v78 = dev_write(*(void *)(a1 + 384), 0LL);
    if ((_DWORD)v78)
    {
      uint64_t v11 = v78;
      if (!*(_DWORD *)(v4 + 76)) {
        log_err("%s:%d: %s xid %lld failed to write block 0 superblock: %d\n");
      }
    }

    else
    {
      if ((*(_BYTE *)(*(void *)(a1 + 376) + 65LL) & 1) == 0) {
        goto LABEL_114;
      }
      uint64_t v87 = nx_fusion_superblock_write(a1, *(const void **)(a2 + 56));
      if (!(_DWORD)v87) {
        goto LABEL_114;
      }
      uint64_t v11 = v87;
      if (!*(_DWORD *)(v4 + 76)) {
        log_err("%s:%d: %s xid %lld failed to write superblock to fusion tier2 device block 0: %d\n");
      }
    }

    pthread_mutex_lock((pthread_mutex_t *)v4);
    int v51 = 1259;
LABEL_111:
    *(_DWORD *)(v4 + 76) = v51;
    ++*(_WORD *)(v4 + 80);
    --*(_DWORD *)(a2 + 40);
    uint64_t v53 = a2;
    int v54 = 32;
    goto LABEL_112;
  }

  if ((v7 & 4) == 0) {
    panic("can't transition from tx flags 0x%x to 0x%x (expected 0x%x)\n", v7, 8, 4);
  }
  if ((v7 & 8) != 0) {
    panic("bad transition tx flags 0x%x to 0x%x (expected 0x%x)\n", v7, 8, 4);
  }
  *(_DWORD *)(a2 + 24) = v7 & 0xFFFFFFF3 | 8;
  __tp.__darwin_time_t tv_sec = 0LL;
  __tp.uint64_t tv_nsec = 0LL;
  clock_gettime(_CLOCK_UPTIME_RAW_APPROX, &__tp);
  __darwin_time_t v8 = 1000000 * __tp.tv_sec + SLODWORD(__tp.tv_nsec) / 1000;
  unint64_t v9 = v8 - *(void *)(a2 + 72);
  *(void *)(a2 + 72) = v8;
  if (v9 > 0xF4240) {
    log_warn( "%s:%d: %s tx xid %lld was closed for %lld us waiting to prepare to flush\n",  "tx_flush",  853,  (const char *)(*(void *)(a1 + 384) + 208LL),  *(void *)(a2 + 16),  v9);
  }
  uint64_t v10 = obj_cache_flush_prepare(v5, 0, 2 * (*(_BYTE *)(a1 + 629) == 0), *(void *)(a2 + 16));
  if ((_DWORD)v10)
  {
    uint64_t v11 = v10;
    if (!*(_DWORD *)(v4 + 76)) {
      log_err( "%s:%d: %s xid %lld error preparing to flush object cache: %d\n",  "tx_flush",  859,  (const char *)(*(void *)(a1 + 384) + 208LL),  *(void *)(a2 + 16),  v10);
    }
    int v12 = 861;
    goto LABEL_20;
  }

  if (*(_BYTE *)(a1 + 629))
  {
    int v20 = *(_DWORD *)(a2 + 24);
    if ((v20 & 8) == 0) {
      panic("can't transition from tx flags 0x%x to 0x%x (expected 0x%x)\n", v20, 16, 8);
    }
    if ((v20 & 0x10) != 0) {
      panic("bad transition tx flags 0x%x to 0x%x (expected 0x%x)\n", v20, 16, 8);
    }
    *(_DWORD *)(a2 + 24) = v20 & 0xFFFFFFE7 | 0x10;
    __tp.__darwin_time_t tv_sec = 0LL;
    __tp.uint64_t tv_nsec = 0LL;
    clock_gettime(_CLOCK_UPTIME_RAW_APPROX, &__tp);
    __darwin_time_t v21 = 1000000 * __tp.tv_sec + SLODWORD(__tp.tv_nsec) / 1000;
    unint64_t v22 = v21 - *(void *)(a2 + 72);
    *(void *)(a2 + 72) = v21;
    if (v22 > 0xF4240) {
      log_warn( "%s:%d: %s tx xid %lld took %lld us to prepare to flush\n",  "tx_flush",  871,  (const char *)(*(void *)(a1 + 384) + 208LL),  *(void *)(a2 + 16),  v22);
    }
LABEL_44:
    *(void *)(v4 + 232) = (*(void *)(v4 + 232) + v22) >> 1;
    goto LABEL_45;
  }

  *(_DWORD *)(a2 + 36) = *(_DWORD *)(v4 + 96);
  *(_DWORD *)(a2 + 44) = *(_DWORD *)(v4 + 100);
  *(_DWORD *)(a2 + 48) = 0;
  *(_DWORD *)(a2 + 40) = 0;
  uint64_t v88 = -1LL;
  uint64_t v33 = nx_checkpoint_desc_block_address(a1, *(unsigned int *)(*(void *)(a1 + 376) + 128LL), &v88);
  if ((_DWORD)v33)
  {
    uint64_t v11 = v33;
    if (!*(_DWORD *)(v4 + 76)) {
      log_err( "%s:%d: %s xid %lld error getting first checkpoint map block address %d: %d\n",  "tx_flush",  891,  (const char *)(*(void *)(a1 + 384) + 208LL),  *(void *)(a2 + 16),  *(_DWORD *)(*(void *)(a1 + 376) + 128LL),  v33);
    }
    int v12 = 893;
    goto LABEL_20;
  }

  bzero(*(void **)(a2 + 64), *(unsigned int *)(*(void *)(a1 + 376) + 36LL));
  uint64_t v35 = *(void *)(a2 + 64);
  *(_DWORD *)(v35 + 24) = 1073741836;
  *(void *)(v35 + 8) = v88;
  *(void *)(v35 + 16) = *(void *)(a2 + 16);
  ++*(_DWORD *)(a2 + 40);
  uint64_t v11 = nx_checkpoint_traverse(a1, a2, 1LL);
  if ((_DWORD)v11) {
    goto LABEL_21;
  }
  uint64_t v36 = *(void *)(v5 + 736);
  if (!v36)
  {
LABEL_86:
    int v38 = *(_DWORD *)(v4 + 96);
    *(void *)(a2 + 112) = -1LL;
    unsigned int v39 = (*(_DWORD *)(a2 + 40) + v38) % *(_DWORD *)(v4 + 88);
    uint64_t v40 = nx_checkpoint_desc_block_address(a1, v39, (void *)(a2 + 112));
    if ((_DWORD)v40)
    {
      uint64_t v11 = v40;
      if (!*(_DWORD *)(v4 + 76)) {
        log_err( "%s:%d: %s xid %lld error getting next checkpoint superblock address %d: %d\n",  "tx_flush",  940,  (const char *)(*(void *)(a1 + 384) + 208LL),  *(void *)(a2 + 16),  v39,  v40);
      }
      int v12 = 942;
      goto LABEL_20;
    }

    ++*(_DWORD *)(a2 + 40);
    int v59 = *(_DWORD *)(v5 + 900) - 1;
    if (*(_DWORD *)(a2 + 48) != v59) {
      log_err( "%s:%d: %s xid %lld checkpoint data block count is not value tracked by cache: %d != %d\n",  "tx_flush",  992,  (const char *)(*(void *)(a1 + 384) + 208LL),  *(void *)(a2 + 16),  *(_DWORD *)(a2 + 48),  v59);
    }
    uint64_t v60 = *(void *)(a1 + 376);
    *(void *)(v60 + 88) = *(void *)(v5 + 400);
    *(void *)(v60 + 96) = *(void *)(v4 + 64);
    memcpy(*(void **)(a2 + 56), (const void *)v60, *(unsigned int *)(v60 + 36));
    uint64_t v63 = *(void *)(a2 + 16);
    uint64_t v64 = *(void *)(a2 + 56);
    *(void *)(v64 + 16) = v63;
    int v65 = *(_DWORD *)(v4 + 96);
    *(_DWORD *)(v64 + 136) = v65;
    int v66 = *(_DWORD *)(v4 + 100);
    *(_DWORD *)(v64 + 144) = v66;
    unsigned int v67 = *(_DWORD *)(a2 + 40);
    *(_DWORD *)(v64 + 140) = v67;
    unsigned int v68 = *(_DWORD *)(a2 + 48);
    *(_DWORD *)(v64 + 148) = v68;
    unsigned int v69 = v67 + v65;
    unsigned int v71 = *(_DWORD *)(v4 + 88);
    unsigned int v70 = *(_DWORD *)(v4 + 92);
    int v72 = v69 % v71;
    unsigned int v73 = (v68 + v66) % v70;
    if (!*(_DWORD *)(v4 + 76))
    {
      if (v67 > v71 >> 2)
      {
        log_err( "%s:%d: %s xid %lld checkpoint descriptor count is larger than expected: %d > %d\n",  "tx_flush",  1017,  (const char *)(*(void *)(a1 + 384) + 208LL),  v63,  v67,  v71 >> 2);
        unsigned int v68 = *(_DWORD *)(a2 + 48);
        unsigned int v70 = *(_DWORD *)(v4 + 92);
      }

      if (v68 > v70 >> 2)
      {
        log_err( "%s:%d: %s xid %lld checkpoint data block count is larger than expected: %d > %d\n",  "tx_flush",  1021,  (const char *)(*(void *)(a1 + 384) + 208LL),  *(void *)(a2 + 16),  v68,  v70 >> 2);
        unsigned int v68 = *(_DWORD *)(a2 + 48);
      }

      int v74 = *(_DWORD *)(v5 + 900) - 1;
      if (v68 != v74) {
        log_err( "%s:%d: %s xid %lld checkpoint data block count is not value tracked by cache: %d != %d\n",  "tx_flush",  1025,  (const char *)(*(void *)(a1 + 384) + 208LL),  *(void *)(a2 + 16),  v68,  v74);
      }
    }

    uint64_t v75 = *(void *)(a2 + 56);
    *(_DWORD *)(v75 + 128) = v72;
    *(_DWORD *)(v75 + 132) = v73;
    obj_checksum_set_phys(a1, v75, *(_DWORD *)(*(void *)(a1 + 376) + 36LL), v61, v62);
    *(_DWORD *)(a2 + 48) = 0;
    *(_DWORD *)(a2 + 40) = 1;
    *(_DWORD *)(*(void *)(a2 + 64) + 36LL) = 0;
    int v76 = *(_DWORD *)(a2 + 24);
    if ((v76 & 8) == 0) {
      panic("can't transition from tx flags 0x%x to 0x%x (expected 0x%x)\n", v76, 16, 8);
    }
    if ((v76 & 0x10) != 0) {
      panic("bad transition tx flags 0x%x to 0x%x (expected 0x%x)\n", v76, 16, 8);
    }
    *(_DWORD *)(a2 + 24) = v76 & 0xFFFFFFE7 | 0x10;
    __tp.__darwin_time_t tv_sec = 0LL;
    __tp.uint64_t tv_nsec = 0LL;
    clock_gettime(_CLOCK_UPTIME_RAW_APPROX, &__tp);
    __darwin_time_t v77 = 1000000 * __tp.tv_sec + SLODWORD(__tp.tv_nsec) / 1000;
    unint64_t v22 = v77 - *(void *)(a2 + 72);
    *(void *)(a2 + 72) = v77;
    if (v22 > 0xF4240) {
      log_warn( "%s:%d: %s tx xid %lld took %lld us to prepare to flush\n",  "tx_flush",  1048,  (const char *)(*(void *)(a1 + 384) + 208LL),  *(void *)(a2 + 16),  v22);
    }
    goto LABEL_44;
  }

  while (v36 == a1)
  {
LABEL_85:
    uint64_t v36 = *(void *)(v36 + 88);
    if (!v36) {
      goto LABEL_86;
    }
  }

  uint64_t v37 = tx_checkpoint_write_prepare(a1, a2, v36);
  if (!(_DWORD)v37)
  {
    obj_retain_ephemeral_no_ref(v36);
    if ((*(_BYTE *)(v36 + 32) & 4) == 0 && (*(_BYTE *)(v36 + 20) & 0x20) == 0) {
      log_warn( "%s:%d: %s Unknown NEW persistent ephemeral object found: oid 0x%llx type 0x%x/0x%x\n",  "tx_flush",  928,  (const char *)(*(void *)(a1 + 384) + 208LL),  *(void *)(v36 + 112),  *(_DWORD *)(v36 + 36),  *(_DWORD *)(v36 + 40));
    }
    *(void *)(v36 + 64) = *(void *)(v36 + 56);
    *(void *)(v36 + 104) = 0LL;
    **(void **)(v5 + 856) = v36;
    *(void *)(v5 + 856) = v36 + 104;
    goto LABEL_85;
  }

  uint64_t v11 = v37;
  if (!*(_DWORD *)(v4 + 76)) {
    log_err( "%s:%d: %s xid %lld error preparing ephemeral object (oid 0x%llx type 0x%x/0x%x): %d\n",  "tx_flush",  919,  (const char *)(*(void *)(a1 + 384) + 208LL),  *(void *)(a2 + 16),  *(void *)(v36 + 112),  *(_DWORD *)(v36 + 36),  *(_DWORD *)(v36 + 40),  v37);
  }
  int v12 = 921;
LABEL_20:
  *(_DWORD *)(v4 + 76) = v12;
  ++*(_WORD *)(v4 + 80);
LABEL_21:
  obj_cache_flush_unprepare(v5);
  uint64_t v13 = *(void *)(v5 + 848);
  if (v13)
  {
    int v14 = (uint64_t *)(v5 + 848);
    do
    {
      uint64_t v15 = *(void *)(v13 + 104);
      uint64_t *v14 = v15;
      if (!v15) {
        *(void *)(v5 + 856) = v14;
      }
      *(void *)(v13 + 104) = 3735928559LL;
      *(void *)(v13 + 64) = 0LL;
      obj_checkpoint_done((unsigned int *)v13);
      obj_release((uint64_t *)v13);
      uint64_t v13 = *v14;
    }

    while (*v14);
  }

  for (uint64_t i = *(void *)(v5 + 736); i; uint64_t i = *(void *)(i + 88))
  {
    if ((*(_BYTE *)(i + 32) & 4) != 0) {
      obj_checkpoint_done((unsigned int *)i);
    }
  }

  int v17 = *(_DWORD *)(v4 + 72);
  if ((v17 & 0x40) != 0) {
    *(_DWORD *)(v4 + 72) = v17 & 0xFFFFFFBF;
  }
  int v18 = *(_DWORD *)(a2 + 24);
  if ((v18 & 8) == 0) {
    panic("can't transition from tx flags 0x%x to 0x%x (expected 0x%x)\n", v18, 1, 8);
  }
  if ((v18 & 1) != 0) {
    panic("bad transition tx flags 0x%x to 0x%x (expected 0x%x)\n", v18, 1, 8);
  }
  *(_DWORD *)(a2 + 24) = v18 & 0xFFFFFFF6 | 1;
  __tp.__darwin_time_t tv_sec = 0LL;
  __tp.uint64_t tv_nsec = 0LL;
  clock_gettime(_CLOCK_UPTIME_RAW_APPROX, &__tp);
  *(void *)(a2 + 72) = 1000000 * __tp.tv_sec + SLODWORD(__tp.tv_nsec) / 1000;
  uint64_t v19 = (pthread_cond_t *)(v4 + 256);
LABEL_75:
  cv_wakeup(v19);
  *(_DWORD *)(a2 + 52) = v11;
  return v11;
}

void APFSContainerGetFreespaceInfo_cold_1()
{
}

void APFSContainerGetFreespaceInfo_cold_2()
{
}

void APFSContainerGetFreespaceInfo_cold_3()
{
  OUTLINED_FUNCTION_6( &dword_183C4A000,  MEMORY[0x1895F8DA0],  v0,  "%s:%d: failed to get free extent info from spaceman, error = %d\n",  v1,  v2,  v3,  v4,  2u);
  OUTLINED_FUNCTION_2();
}

void APFSContainerGetFreespaceInfo_cold_4()
{
}

void APFSContainerGetFreespaceInfo_cold_5()
{
}

void APFSContainerGetFreespaceInfo_cold_6()
{
}

void APFSContainerGetFreespaceInfo_cold_7()
{
}

void APFSContainerGetFreespaceInfo_cold_8()
{
}

void APFSContainerGetFreespaceInfo_cold_9()
{
}

void APFSContainerGetFreespaceInfo_cold_10()
{
}

void APFSContainerGetBootDevice_cold_1()
{
}

void APFSContainerGetBootDevice_cold_2(mach_error_t a1)
{
}

void APFSSetupMetadataRollingMediaKey_cold_1()
{
}

void APFSSetupMetadataRollingMediaKey_cold_2()
{
  uint64_t v7 = *MEMORY[0x1895F89C0];
  *(_DWORD *)uint64_t v3 = 136315906;
  OUTLINED_FUNCTION_0();
  *(_DWORD *)&v3[7] = 2978;
  v3[9] = 2080;
  uint64_t v4 = v0;
  __int16 v5 = v1;
  int v6 = v2;
  _os_log_error_impl( &dword_183C4A000,  MEMORY[0x1895F8DA0],  OS_LOG_TYPE_ERROR,  "%s:%d: failed to generate metadata rolling keys for the DATA volume in APFS container %s, error = %d\n",  (uint8_t *)v3,  0x22u);
  OUTLINED_FUNCTION_5();
}

void APFSSetupMetadataRollingMediaKey_cold_3(mach_error_t a1)
{
}

void APFSStreamRestoreWrite_cold_1()
{
  OUTLINED_FUNCTION_16( &dword_183C4A000,  MEMORY[0x1895F8DA0],  v0,  "%s:%d: comp_crc=0x%x embed_crc=0x%x\n",  v1,  v2,  v3,  v4,  2u);
  OUTLINED_FUNCTION_5();
}

void APFSStreamRestoreWrite_cold_2()
{
  OUTLINED_FUNCTION_3(&dword_183C4A000, MEMORY[0x1895F8DA0], v0, "%s:%d: len=%llu embed_len=%llu\n", v1, v2, v3, v4, 2u);
  OUTLINED_FUNCTION_5();
}

void APFSStreamFingerprintWrite_cold_1()
{
  OUTLINED_FUNCTION_1( &dword_183C4A000,  MEMORY[0x1895F8DA0],  v0,  "%s:%d: delta_canonicalize() returned EILSEQ...\n",  v1,  v2,  v3,  v4,  2u);
  OUTLINED_FUNCTION_2();
}

void APFSStreamFingerprintWrite_cold_2()
{
  OUTLINED_FUNCTION_16( &dword_183C4A000,  MEMORY[0x1895F8DA0],  v0,  "%s:%d: computed_crc=%x, embedded_crc=%x",  v1,  v2,  v3,  v4,  2u);
  OUTLINED_FUNCTION_5();
}

void APFSStreamFingerprintWrite_cold_3()
{
  OUTLINED_FUNCTION_3( &dword_183C4A000,  MEMORY[0x1895F8DA0],  v0,  "%s:%d: computed_len=%llu, embedded_len=%llu\n",  v1,  v2,  v3,  v4,  2u);
  OUTLINED_FUNCTION_5();
}

void APFSGetFragmentationHistogram_cold_1()
{
}

void APFSGetFragmentationHistogram_cold_2()
{
}

void APFSCaptureFinishCaptureForFile_cold_1()
{
}

void APFSCaptureFinishCaptureForFile_cold_2()
{
}

void APFSContainerCommitTemporaryCheckpoint_cold_1()
{
}

void APFSContainerCommitTemporaryCheckpoint_cold_2()
{
}

void APFSContainerCommitTemporaryCheckpoint_cold_3()
{
}

void APFSVolumeConvertToUserCrypto_cold_1()
{
  uint64_t v0 = OUTLINED_FUNCTION_18(*MEMORY[0x1895F89C0]);
  strerror(*v0);
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_3( &dword_183C4A000,  MEMORY[0x1895F8DA0],  v1,  "%s:%d: could not open metrics log file %s: %s",  v2,  v3,  v4,  v5,  2u);
  OUTLINED_FUNCTION_12();
}

void APFSVolumeConvertToUserCrypto_cold_2(uint64_t a1, int a2)
{
}

void APFSVolumeConvertToUserCrypto_cold_3(uint64_t a1, int a2)
{
}

void keygen_nvram_prop_cold_1()
{
}

void keygen_nvram_prop_cold_2()
{
}

void keygen_nvram_prop_cold_3(mach_error_t a1)
{
}

void keygen_nvram_prop_cold_4()
{
}

int CC_SHA512_Final(unsigned __int8 *md, CC_SHA512_CTX *c)
{
  return MEMORY[0x1895F8318](md, c);
}

int CC_SHA512_Init(CC_SHA512_CTX *c)
{
  return MEMORY[0x1895F8320](c);
}

int CC_SHA512_Update(CC_SHA512_CTX *c, const void *data, CC_LONG len)
{
  return MEMORY[0x1895F8328](c, data, *(void *)&len);
}

void CFArrayAppendValue(CFMutableArrayRef theArray, const void *value)
{
}

void CFArrayApplyFunction(CFArrayRef theArray, CFRange range, CFArrayApplierFunction applier, void *context)
{
}

CFMutableArrayRef CFArrayCreateMutable( CFAllocatorRef allocator, CFIndex capacity, const CFArrayCallBacks *callBacks)
{
  return (CFMutableArrayRef)MEMORY[0x189602648](allocator, capacity, callBacks);
}

CFIndex CFArrayGetCount(CFArrayRef theArray)
{
  return MEMORY[0x189602660](theArray);
}

CFTypeID CFArrayGetTypeID(void)
{
  return MEMORY[0x189602690]();
}

const void *__cdecl CFArrayGetValueAtIndex(CFArrayRef theArray, CFIndex idx)
{
  return (const void *)MEMORY[0x189602698](theArray, idx);
}

void CFArraySetValueAtIndex(CFMutableArrayRef theArray, CFIndex idx, const void *value)
{
}

void CFArraySortValues( CFMutableArrayRef theArray, CFRange range, CFComparatorFunction comparator, void *context)
{
}

CFTypeID CFBooleanGetTypeID(void)
{
  return MEMORY[0x1896027C8]();
}

Boolean CFBooleanGetValue(CFBooleanRef BOOLean)
{
  return MEMORY[0x1896027D0](BOOLean);
}

CFDataRef CFDataCreate(CFAllocatorRef allocator, const UInt8 *bytes, CFIndex length)
{
  return (CFDataRef)MEMORY[0x189602A58](allocator, bytes, length);
}

const UInt8 *__cdecl CFDataGetBytePtr(CFDataRef theData)
{
  return (const UInt8 *)MEMORY[0x189602A98](theData);
}

CFIndex CFDataGetLength(CFDataRef theData)
{
  return MEMORY[0x189602AB0](theData);
}

CFTypeID CFDataGetTypeID(void)
{
  return MEMORY[0x189602AC8]();
}

void CFDictionaryAddValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
}

void CFDictionaryApplyFunction(CFDictionaryRef theDict, CFDictionaryApplierFunction applier, void *context)
{
}

CFMutableDictionaryRef CFDictionaryCreateMutable( CFAllocatorRef allocator, CFIndex capacity, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return (CFMutableDictionaryRef)MEMORY[0x189602BB8](allocator, capacity, keyCallBacks, valueCallBacks);
}

CFIndex CFDictionaryGetCount(CFDictionaryRef theDict)
{
  return MEMORY[0x189602BD0](theDict);
}

CFTypeID CFDictionaryGetTypeID(void)
{
  return MEMORY[0x189602BF0]();
}

const void *__cdecl CFDictionaryGetValue(CFDictionaryRef theDict, const void *key)
{
  return (const void *)MEMORY[0x189602C00](theDict, key);
}

Boolean CFDictionaryGetValueIfPresent(CFDictionaryRef theDict, const void *key, const void **value)
{
  return MEMORY[0x189602C08](theDict, key, value);
}

void CFDictionaryRemoveValue(CFMutableDictionaryRef theDict, const void *key)
{
}

void CFDictionarySetValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
}

Boolean CFEqual(CFTypeRef cf1, CFTypeRef cf2)
{
  return MEMORY[0x189602C38](cf1, cf2);
}

CFTypeID CFGetTypeID(CFTypeRef cf)
{
  return MEMORY[0x189602D30](cf);
}

CFNumberRef CFNumberCreate(CFAllocatorRef allocator, CFNumberType theType, const void *valuePtr)
{
  return (CFNumberRef)MEMORY[0x189602EA0](allocator, theType, valuePtr);
}

CFTypeID CFNumberGetTypeID(void)
{
  return MEMORY[0x189602F08]();
}

Boolean CFNumberGetValue(CFNumberRef number, CFNumberType theType, void *valuePtr)
{
  return MEMORY[0x189602F10](number, theType, valuePtr);
}

void CFRelease(CFTypeRef cf)
{
}

CFComparisonResult CFStringCompare( CFStringRef theString1, CFStringRef theString2, CFStringCompareFlags compareOptions)
{
  return MEMORY[0x1896033C0](theString1, theString2, compareOptions);
}

CFMutableStringRef CFStringCreateMutableCopy(CFAllocatorRef alloc, CFIndex maxLength, CFStringRef theString)
{
  return (CFMutableStringRef)MEMORY[0x189603438](alloc, maxLength, theString);
}

CFStringRef CFStringCreateWithCString(CFAllocatorRef alloc, const char *cStr, CFStringEncoding encoding)
{
  return (CFStringRef)MEMORY[0x189603468](alloc, cStr, *(void *)&encoding);
}

CFStringRef CFStringCreateWithFormat(CFAllocatorRef alloc, CFDictionaryRef formatOptions, CFStringRef format, ...)
{
  return (CFStringRef)MEMORY[0x189603490](alloc, formatOptions, format);
}

Boolean CFStringGetCString(CFStringRef theString, char *buffer, CFIndex bufferSize, CFStringEncoding encoding)
{
  return MEMORY[0x1896034F8](theString, buffer, bufferSize, *(void *)&encoding);
}

const char *__cdecl CFStringGetCStringPtr(CFStringRef theString, CFStringEncoding encoding)
{
  return (const char *)MEMORY[0x189603500](theString, *(void *)&encoding);
}

CFStringEncoding CFStringGetSystemEncoding(void)
{
  return MEMORY[0x189603588]();
}

CFTypeID CFStringGetTypeID(void)
{
  return MEMORY[0x189603590]();
}

void CFStringInsert(CFMutableStringRef str, CFIndex idx, CFStringRef insertedStr)
{
}

CFUUIDRef CFUUIDCreateFromUUIDBytes(CFAllocatorRef alloc, CFUUIDBytes bytes)
{
  return (CFUUIDRef)MEMORY[0x189603880](alloc, *(void *)&bytes.byte0, *(void *)&bytes.byte8);
}

CFTypeID CFUUIDGetTypeID(void)
{
  return MEMORY[0x1896038A0]();
}

CFMutableDictionaryRef IOBSDNameMatching(mach_port_t mainPort, uint32_t options, const char *bsdName)
{
  return (CFMutableDictionaryRef)MEMORY[0x189607C80](*(void *)&mainPort, *(void *)&options, bsdName);
}

CFTypeRef IOCFUnserialize( const char *buffer, CFAllocatorRef allocator, CFOptionFlags options, CFStringRef *errorString)
{
  return (CFTypeRef)MEMORY[0x189607C90](buffer, allocator, options, errorString);
}

kern_return_t IOConnectCallStructMethod( mach_port_t connection, uint32_t selector, const void *inputStruct, size_t inputStructCnt, void *outputStruct, size_t *outputStructCnt)
{
  return MEMORY[0x189607CC8]( *(void *)&connection,  *(void *)&selector,  inputStruct,  inputStructCnt,  outputStruct,  outputStructCnt);
}

io_object_t IOIteratorNext(io_iterator_t iterator)
{
  return MEMORY[0x1896082F0](*(void *)&iterator);
}

BOOLean_t IOObjectConformsTo(io_object_t object, const io_name_t className)
{
  return MEMORY[0x189608360](*(void *)&object, className);
}

kern_return_t IOObjectRelease(io_object_t object)
{
  return MEMORY[0x189608398](*(void *)&object);
}

kern_return_t IOObjectRetain(io_object_t object)
{
  return MEMORY[0x1896083A0](*(void *)&object);
}

CFTypeRef IORegistryEntryCreateCFProperty( io_registry_entry_t entry, CFStringRef key, CFAllocatorRef allocator, IOOptionBits options)
{
  return (CFTypeRef)MEMORY[0x189608470](*(void *)&entry, key, allocator, *(void *)&options);
}

io_registry_entry_t IORegistryEntryFromPath(mach_port_t mainPort, const io_string_t path)
{
  return MEMORY[0x189608488](*(void *)&mainPort, path);
}

kern_return_t IORegistryEntryGetChildIterator( io_registry_entry_t entry, const io_name_t plane, io_iterator_t *iterator)
{
  return MEMORY[0x189608498](*(void *)&entry, plane, iterator);
}

kern_return_t IORegistryEntryGetLocationInPlane( io_registry_entry_t entry, const io_name_t plane, io_name_t location)
{
  return MEMORY[0x1896084A8](*(void *)&entry, plane, location);
}

kern_return_t IORegistryEntryGetParentEntry( io_registry_entry_t entry, const io_name_t plane, io_registry_entry_t *parent)
{
  return MEMORY[0x1896084D0](*(void *)&entry, plane, parent);
}

kern_return_t IORegistryEntryGetParentIterator( io_registry_entry_t entry, const io_name_t plane, io_iterator_t *iterator)
{
  return MEMORY[0x1896084D8](*(void *)&entry, plane, iterator);
}

kern_return_t IORegistryEntryGetRegistryEntryID(io_registry_entry_t entry, uint64_t *entryID)
{
  return MEMORY[0x189608500](*(void *)&entry, entryID);
}

CFTypeRef IORegistryEntrySearchCFProperty( io_registry_entry_t entry, const io_name_t plane, CFStringRef key, CFAllocatorRef allocator, IOOptionBits options)
{
  return (CFTypeRef)MEMORY[0x189608520](*(void *)&entry, plane, key, allocator, *(void *)&options);
}

kern_return_t IORegistryEntrySetCFProperty( io_registry_entry_t entry, CFStringRef propertyName, CFTypeRef property)
{
  return MEMORY[0x189608528](*(void *)&entry, propertyName, property);
}

kern_return_t IOServiceClose(io_connect_t connect)
{
  return MEMORY[0x189608550](*(void *)&connect);
}

io_service_t IOServiceGetMatchingService(mach_port_t mainPort, CFDictionaryRef matching)
{
  return MEMORY[0x189608560](*(void *)&mainPort, matching);
}

kern_return_t IOServiceGetMatchingServices( mach_port_t mainPort, CFDictionaryRef matching, io_iterator_t *existing)
{
  return MEMORY[0x189608578](*(void *)&mainPort, matching, existing);
}

CFMutableDictionaryRef IOServiceMatching(const char *name)
{
  return (CFMutableDictionaryRef)MEMORY[0x189608580](name);
}

kern_return_t IOServiceOpen(io_service_t service, task_port_t owningTask, uint32_t type, io_connect_t *connect)
{
  return MEMORY[0x189608598](*(void *)&service, *(void *)&owningTask, *(void *)&type, connect);
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
}

std::string *__cdecl std::string::assign( std::string *this, const std::string::value_type *__s, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x1896142F8](this, __s, __n);
}

void operator delete(void *__p)
{
}

int *__error(void)
{
  return (int *)MEMORY[0x1895F8898]();
}

uint64_t __memcpy_chk()
{
  return MEMORY[0x1895F8930]();
}

uint64_t __strlcpy_chk()
{
  return MEMORY[0x1895F8A08]();
}

void _os_log_error_impl( void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

int aio_error(const aiocb *aiocbp)
{
  return MEMORY[0x1895F9488](aiocbp);
}

int aio_read(aiocb *aiocbp)
{
  return MEMORY[0x1895F9490](aiocbp);
}

ssize_t aio_return(aiocb *aiocbp)
{
  return MEMORY[0x1895F9498](aiocbp);
}

int aio_suspend(const aiocb *const aiocblist[], int nent, const timespec *timeoutp)
{
  return MEMORY[0x1895F94A0](aiocblist, *(void *)&nent, timeoutp);
}

int asprintf(char **a1, const char *a2, ...)
{
  return MEMORY[0x1895F9540](a1, a2);
}

int backtrace(void **a1, int a2)
{
  return MEMORY[0x1895F95D0](a1, *(void *)&a2);
}

char **__cdecl backtrace_symbols(void *const *a1, int a2)
{
  return (char **)MEMORY[0x1895F95E0](a1, *(void *)&a2);
}

void bzero(void *a1, size_t a2)
{
}

void *__cdecl calloc(size_t __count, size_t __size)
{
  return (void *)MEMORY[0x1895F9710](__count, __size);
}

uint64_t ccdigest()
{
  return MEMORY[0x1895F9A90]();
}

uint64_t ccsha256_di()
{
  return MEMORY[0x1895FA278]();
}

uint64_t ccsha384_di()
{
  return MEMORY[0x1895FA280]();
}

uint64_t ccsha512_256_di()
{
  return MEMORY[0x1895FA288]();
}

uint64_t ccsha512_di()
{
  return MEMORY[0x1895FA298]();
}

int clock_gettime(clockid_t __clock_id, timespec *__tp)
{
  return MEMORY[0x1895FA570](*(void *)&__clock_id, __tp);
}

int close(int a1)
{
  return MEMORY[0x1895FA590](*(void *)&a1);
}

int fclose(FILE *a1)
{
  return MEMORY[0x1895FB208](a1);
}

int fcntl(int a1, int a2, ...)
{
  return MEMORY[0x1895FB210](*(void *)&a1, *(void *)&a2);
}

FILE *__cdecl fopen(const char *__filename, const char *__mode)
{
  return (FILE *)MEMORY[0x1895FB348](__filename, __mode);
}

int fprintf(FILE *a1, const char *a2, ...)
{
  return MEMORY[0x1895FB360](a1, a2);
}

void free(void *a1)
{
}

uint64_t freemntopts()
{
  return MEMORY[0x1896173C0]();
}

int fstat(int a1, stat *a2)
{
  return MEMORY[0x1895FB448](*(void *)&a1, a2);
}

int fstatfs(int a1, statfs *a2)
{
  return MEMORY[0x1895FB460](*(void *)&a1, a2);
}

int fsync(int a1)
{
  return MEMORY[0x1895FB468](*(void *)&a1);
}

FTSENT *__cdecl fts_children(FTS *a1, int a2)
{
  return (FTSENT *)MEMORY[0x1895FB488](a1, *(void *)&a2);
}

int fts_close(FTS *a1)
{
  return MEMORY[0x1895FB490](a1);
}

FTS *__cdecl fts_open(char *const *a1, int a2, int (__cdecl *a3)(const FTSENT **, const FTSENT **))
{
  return (FTS *)MEMORY[0x1895FB498](a1, *(void *)&a2, a3);
}

FTSENT *__cdecl fts_read(FTS *a1)
{
  return (FTSENT *)MEMORY[0x1895FB4A0](a1);
}

gid_t getgid(void)
{
  return MEMORY[0x1895FB550]();
}

int getmntinfo(statfs **a1, int a2)
{
  return MEMORY[0x1895FB5C8](a1, *(void *)&a2);
}

uint64_t getmntoptnum()
{
  return MEMORY[0x1896173D0]();
}

uint64_t getmntopts()
{
  return MEMORY[0x1896173D8]();
}

uid_t getuid(void)
{
  return MEMORY[0x1895FB6E8]();
}

int ioctl(int a1, unint64_t a2, ...)
{
  return MEMORY[0x1895FB850](*(void *)&a1, a2);
}

int lstat(const char *a1, stat *a2)
{
  return MEMORY[0x1895FBA88](a1, a2);
}

char *__cdecl mach_error_string(mach_error_t error_value)
{
  return (char *)MEMORY[0x1895FBAC0](*(void *)&error_value);
}

void *__cdecl malloc(size_t __size)
{
  return (void *)MEMORY[0x1895FBC88](__size);
}

int memcmp(const void *__s1, const void *__s2, size_t __n)
{
  return MEMORY[0x1895FBE08](__s1, __s2, __n);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x1895FBE18](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x1895FBE30](__dst, __src, __len);
}

int nanosleep(const timespec *__rqtp, timespec *__rmtp)
{
  return MEMORY[0x1895FBFB0](__rqtp, __rmtp);
}

int open(const char *a1, int a2, ...)
{
  return MEMORY[0x1895FC248](a1, *(void *)&a2);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x1895FC470](oslog, type);
}

uint64_t os_parse_boot_arg_string()
{
  return MEMORY[0x1895FC5E8]();
}

void panic(const char *a1, ...)
{
}

ssize_t pread(int __fd, void *__buf, size_t __nbyte, off_t a4)
{
  return MEMORY[0x1895FC880](*(void *)&__fd, __buf, __nbyte, a4);
}

int pthread_cond_broadcast(pthread_cond_t *a1)
{
  return MEMORY[0x1895FC998](a1);
}

int pthread_cond_destroy(pthread_cond_t *a1)
{
  return MEMORY[0x1895FC9A0](a1);
}

int pthread_cond_init(pthread_cond_t *a1, const pthread_condattr_t *a2)
{
  return MEMORY[0x1895FC9A8](a1, a2);
}

int pthread_cond_timedwait(pthread_cond_t *a1, pthread_mutex_t *a2, const timespec *a3)
{
  return MEMORY[0x1895FC9B8](a1, a2, a3);
}

int pthread_cond_wait(pthread_cond_t *a1, pthread_mutex_t *a2)
{
  return MEMORY[0x1895FC9C8](a1, a2);
}

int pthread_mutex_destroy(pthread_mutex_t *a1)
{
  return MEMORY[0x1895FCA88](a1);
}

int pthread_mutex_init(pthread_mutex_t *a1, const pthread_mutexattr_t *a2)
{
  return MEMORY[0x1895FCA90](a1, a2);
}

int pthread_mutex_lock(pthread_mutex_t *a1)
{
  return MEMORY[0x1895FCA98](a1);
}

int pthread_mutex_unlock(pthread_mutex_t *a1)
{
  return MEMORY[0x1895FCAA8](a1);
}

int pthread_rwlock_destroy(pthread_rwlock_t *a1)
{
  return MEMORY[0x1895FCAE8](a1);
}

int pthread_rwlock_init(pthread_rwlock_t *a1, const pthread_rwlockattr_t *a2)
{
  return MEMORY[0x1895FCAF0](a1, a2);
}

int pthread_rwlock_rdlock(pthread_rwlock_t *a1)
{
  return MEMORY[0x1895FCAF8](a1);
}

int pthread_rwlock_unlock(pthread_rwlock_t *a1)
{
  return MEMORY[0x1895FCB10](a1);
}

int pthread_rwlock_wrlock(pthread_rwlock_t *a1)
{
  return MEMORY[0x1895FCB18](a1);
}

ssize_t pwrite(int __fd, const void *__buf, size_t __nbyte, off_t a4)
{
  return MEMORY[0x1895FCBA0](*(void *)&__fd, __buf, __nbyte, a4);
}

void qsort(void *__base, size_t __nel, size_t __width, int (__cdecl *__compar)(const void *, const void *))
{
}

void *__cdecl realloc(void *__ptr, size_t __size)
{
  return (void *)MEMORY[0x1895FCC68](__ptr, __size);
}

char *__cdecl realpath_DARWIN_EXTSN(const char *a1, char *a2)
{
  return (char *)MEMORY[0x1895FCC80](a1, a2);
}

int rename(const char *__old, const char *__new)
{
  return MEMORY[0x1895FCD50](__old, __new);
}

unsigned int sleep(unsigned int a1)
{
  return MEMORY[0x1895FCF88](*(void *)&a1);
}

int snprintf(char *__str, size_t __size, const char *__format, ...)
{
  return MEMORY[0x1895FCF90](__str, __size, __format);
}

int stat(const char *a1, stat *a2)
{
  return MEMORY[0x1895FD010](a1, a2);
}

int strcasecmp(const char *a1, const char *a2)
{
  return MEMORY[0x1895FD030](a1, a2);
}

char *__cdecl strchr(const char *__s, int __c)
{
  return (char *)MEMORY[0x1895FD048](__s, *(void *)&__c);
}

int strcmp(const char *__s1, const char *__s2)
{
  return MEMORY[0x1895FD050](__s1, __s2);
}

char *__cdecl strdup(const char *__s1)
{
  return (char *)MEMORY[0x1895FD078](__s1);
}

char *__cdecl strerror(int __errnum)
{
  return (char *)MEMORY[0x1895FD080](*(void *)&__errnum);
}

size_t strlcpy(char *__dst, const char *__source, size_t __size)
{
  return MEMORY[0x1895FD0B0](__dst, __source, __size);
}

size_t strlen(const char *__s)
{
  return MEMORY[0x1895FD0B8](__s);
}

int strncasecmp(const char *a1, const char *a2, size_t a3)
{
  return MEMORY[0x1895FD0D0](a1, a2, a3);
}

int strncmp(const char *__s1, const char *__s2, size_t __n)
{
  return MEMORY[0x1895FD0E8](__s1, __s2, __n);
}

char *__cdecl strndup(const char *__s1, size_t __n)
{
  return (char *)MEMORY[0x1895FD0F8](__s1, __n);
}

size_t strnlen(const char *__s1, size_t __n)
{
  return MEMORY[0x1895FD100](__s1, __n);
}

char *__cdecl strrchr(const char *__s, int __c)
{
  return (char *)MEMORY[0x1895FD120](__s, *(void *)&__c);
}

char *__cdecl strstr(const char *__big, const char *__little)
{
  return (char *)MEMORY[0x1895FD148](__big, __little);
}

char *__cdecl strtok_r(char *__str, const char *__sep, char **__lasts)
{
  return (char *)MEMORY[0x1895FD178](__str, __sep, __lasts);
}

uint64_t strtol(const char *__str, char **__endptr, int __base)
{
  return MEMORY[0x1895FD180](__str, __endptr, *(void *)&__base);
}

unint64_t strtoul(const char *__str, char **__endptr, int __base)
{
  return MEMORY[0x1895FD1B8](__str, __endptr, *(void *)&__base);
}

unint64_t strtoull(const char *__str, char **__endptr, int __base)
{
  return MEMORY[0x1895FD1C8](__str, __endptr, *(void *)&__base);
}

time_t time(time_t *a1)
{
  return MEMORY[0x1895FD400](a1);
}

int unlink(const char *a1)
{
  return MEMORY[0x1895FD468](a1);
}

void uuid_clear(uuid_t uu)
{
}

void uuid_copy(uuid_t dst, const uuid_t src)
{
}

void uuid_generate(uuid_t out)
{
}

int uuid_is_null(const uuid_t uu)
{
  return MEMORY[0x1895FD4E0](uu);
}

int uuid_parse(const uuid_string_t in, uuid_t uu)
{
  return MEMORY[0x1895FD4E8](in, uu);
}

void uuid_unparse(const uuid_t uu, uuid_string_t out)
{
}

void *__cdecl valloc(size_t a1)
{
  return (void *)MEMORY[0x1895FD508](a1);
}

int vfprintf(FILE *a1, const char *a2, va_list a3)
{
  return MEMORY[0x1895FD528](a1, a2, a3);
}