uint64_t getEnumTagSinglePayload for CMTimeRange(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000ED550);
}

uint64_t sub_1000ED550(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    uint64_t v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
  }

  else
  {
    uint64_t v8 = sub_1000BED3C(&qword_100291FB0);
    uint64_t v10 = a1 + *(int *)(a3 + 20);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48LL);
  }

  return v9(v10, a2, v8);
}

uint64_t storeEnumTagSinglePayload for CMTimeRange(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000ED5D4);
}

uint64_t sub_1000ED5D4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
  }

  else
  {
    uint64_t v10 = sub_1000BED3C(&qword_100291FB0);
    uint64_t v12 = a1 + *(int *)(a4 + 20);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56LL);
  }

  return v11(v12, a2, a2, v10);
}

void sub_1000ED654(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UnknownStorage(319LL);
  if (v3 <= 0x3F)
  {
    uint64_t v6 = *(void *)(v2 - 8) + 64LL;
    sub_1000ED6D8(319LL);
    if (v5 <= 0x3F)
    {
      uint64_t v7 = *(void *)(v4 - 8) + 64LL;
      uint64_t v8 = v7;
      swift_initStructMetadata(a1, 256LL, 3LL, &v6, a1 + 16);
    }
  }

void sub_1000ED6D8(uint64_t a1)
{
  if (!qword_100293A40)
  {
    uint64_t v2 = type metadata accessor for CMTime(255LL);
    unint64_t v3 = type metadata accessor for Optional(a1, v2);
    if (!v4) {
      atomic_store(v3, (unint64_t *)&qword_100293A40);
    }
  }

uint64_t Goldilocks_CloudPhotosGoldilocksAPIAsync.initiateExit(operationID:sharedZoneID:exitType:retentionPolicy:participantUserIdsToRemove:participantIdsToRemove:zoneTtlForIcplexit:exitSource:stopAtStage:completion:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, __int16 a5, uint64_t a6, __int16 a7, uint64_t a8, uint64_t a9, uint64_t a10, unsigned __int8 a11, uint64_t a12, __int16 a13, uint64_t a14, __int16 a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  uint64_t v35 = a8;
  uint64_t v33 = a6;
  uint64_t v31 = a4;
  uint64_t v29 = a3;
  uint64_t v38 = a16;
  uint64_t v37 = a17;
  uint64_t v39 = a18;
  uint64_t v36 = a19;
  uint64_t v34 = a14;
  uint64_t v32 = a12;
  int v30 = a11;
  uint64_t v23 = type metadata accessor for Goldilocks_InitiateExitRequest(0LL);
  __chkstk_darwin(v23);
  v25 = (char *)&v29 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v41 = a1;
  uint64_t v42 = a2;
  uint64_t v43 = v29;
  uint64_t v44 = v31;
  __int16 v45 = a5 & 0x1FF;
  uint64_t v46 = v33;
  __int16 v47 = a7 & 0x1FF;
  uint64_t v48 = v35;
  uint64_t v49 = a9;
  uint64_t v50 = a10;
  char v51 = a11 & 1;
  uint64_t v52 = a12;
  __int16 v53 = a13 & 0x1FF;
  uint64_t v54 = a14;
  __int16 v55 = a15 & 0x1FF;
  v27 = v26;
  sub_1000BD35C(&qword_100293A90, v26, (uint64_t)&protocol conformance descriptor for Goldilocks_InitiateExitRequest);
  static Message.with(_:)(sub_1000ED938, v40);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v36 + 8))(v25, v38, v37, v39);
  return sub_1000CECE0((uint64_t)v25, v27);
}

uint64_t sub_1000ED938(uint64_t a1)
{
  return sub_1000EEBE0(a1);
}

uint64_t Goldilocks_CloudPhotosGoldilocksAPIAsync.checkDuplicates(operationID:zoneID:recordIds:completion:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v16 = type metadata accessor for Goldilocks_CheckDuplicatesRequest(0LL);
  __chkstk_darwin(v16);
  v18 = &v23[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v24 = a1;
  uint64_t v25 = a2;
  uint64_t v26 = a3;
  uint64_t v27 = a4;
  v20 = v19;
  sub_1000BD35C(&qword_100293A98, v19, (uint64_t)&protocol conformance descriptor for Goldilocks_CheckDuplicatesRequest);
  static Message.with(_:)(sub_1000F01E8, v23);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t, uint64_t))(a8 + 16))(v18, a5, a6, a7, a8);
  return sub_1000CECE0((uint64_t)v18, v20);
}

uint64_t Goldilocks_CloudPhotosGoldilocksAPIAsync.exitMoveBatch(operationID:zoneID:batchSize:completion:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v16 = type metadata accessor for Goldilocks_ExitMoveBatchRequest(0LL);
  __chkstk_darwin(v16);
  v18 = &v23[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v24 = a1;
  uint64_t v25 = a2;
  uint64_t v26 = a3;
  int v27 = a4;
  char v28 = BYTE4(a4) & 1;
  v20 = v19;
  sub_1000BD35C(&qword_1002950C0, v19, (uint64_t)&protocol conformance descriptor for Goldilocks_ExitMoveBatchRequest);
  static Message.with(_:)(sub_1000EDB80, v23);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t, uint64_t))(a8 + 24))(v18, a5, a6, a7, a8);
  return sub_1000CECE0((uint64_t)v18, v20);
}

uint64_t sub_1000EDB80(uint64_t a1)
{
  return sub_1000EF248(a1);
}

uint64_t Goldilocks_CloudPhotosGoldilocksAPIAsync.silentMoverRampingService(operationID:completion:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12 = type metadata accessor for Goldilocks_SilentMoverRampingRequest(0LL);
  __chkstk_darwin(v12);
  v14 = &v16[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v17 = a1;
  uint64_t v18 = a2;
  sub_1000BD35C( &qword_100293AA0,  type metadata accessor for Goldilocks_SilentMoverRampingRequest,  (uint64_t)&protocol conformance descriptor for Goldilocks_SilentMoverRampingRequest);
  static Message.with(_:)(sub_1000D7774, v16);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t, uint64_t))(a6 + 32))(v14, a3, a4, a5, a6);
  return sub_1000CECE0((uint64_t)v14, type metadata accessor for Goldilocks_SilentMoverRampingRequest);
}

uint64_t Goldilocks_CloudPhotosGoldilocksAPIAsync.exitMoveErrorFeedback(exitZoneID:items:moveBatchOperationID:moveBatchID:completion:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v24 = a8;
  uint64_t v23 = a7;
  uint64_t v16 = type metadata accessor for Goldilocks_ExitMoveBatchErrorFeedbackRequest(0LL);
  __chkstk_darwin(v16);
  uint64_t v18 = (char *)&v22 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v26 = a1;
  uint64_t v27 = a2;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v31 = a6;
  v20 = v19;
  sub_1000BD35C( &qword_100293AA8,  v19,  (uint64_t)&protocol conformance descriptor for Goldilocks_ExitMoveBatchErrorFeedbackRequest);
  static Message.with(_:)(sub_1000EDDAC, v25);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t, uint64_t))(a10 + 40))(v18, v23, v24, a9, a10);
  return sub_1000CECE0((uint64_t)v18, v20);
}

uint64_t sub_1000EDDAC(uint64_t *a1)
{
  return sub_1000EF698(a1);
}

uint64_t Goldilocks_CloudPhotosGoldilocksAPIAsync.exitStatusFeedback(operationID:shareID:status:completion:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, __int16 a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v23 = a8;
  uint64_t v16 = type metadata accessor for Goldilocks_ExitStatusFeedbackRequest(0LL);
  __chkstk_darwin(v16);
  uint64_t v18 = (char *)&v22 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v25 = a1;
  uint64_t v26 = a2;
  uint64_t v27 = a3;
  uint64_t v28 = a4;
  __int16 v29 = a5 & 0x1FF;
  v20 = v19;
  sub_1000BD35C( &qword_100293AB0,  v19,  (uint64_t)&protocol conformance descriptor for Goldilocks_ExitStatusFeedbackRequest);
  static Message.with(_:)(sub_1000EDED8, v24);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t, uint64_t))(a9 + 48))(v18, a6, a7, v23, a9);
  return sub_1000CECE0((uint64_t)v18, v20);
}

uint64_t sub_1000EDED8(uint64_t a1)
{
  return sub_1000EF9A4(a1);
}

void Goldilocks_CloudPhotosGoldilocksAPIAsyncClient.initiateExit(_:completion:)( uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_1000BED3C(&qword_100293AB8);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for Goldilocks_InitiateExitRequest(0LL);
  uint64_t v10 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56LL);
  v10(v8, 1LL, 1LL, v9);
  id v11 = objc_allocWithZone((Class)sub_1000BED3C(&qword_100293AC0));
  uint64_t v12 = (void *)CKCodeOperation.init(functionName:request:)(0x6574616974696E69LL, 0xEC00000074697845LL, v8);
  sub_1000CEC58(a1, (uint64_t)v8, type metadata accessor for Goldilocks_InitiateExitRequest);
  v10(v8, 0LL, 1LL, v9);
  dispatch thunk of CKCodeOperation.request.setter(v8);
  swift_retain(a3);
  dispatch thunk of CKCodeOperation.codeOperationResultBlock.setter(a2, a3);
  CKCodeService.add<A, B>(_:)(v12);
}

void Goldilocks_CloudPhotosGoldilocksAPIAsyncClient.checkDuplicates(_:completion:)( uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_1000BED3C(&qword_100293AC8);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for Goldilocks_CheckDuplicatesRequest(0LL);
  uint64_t v10 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56LL);
  v10(v8, 1LL, 1LL, v9);
  id v11 = objc_allocWithZone((Class)sub_1000BED3C(&qword_100293AD0));
  uint64_t v12 = (void *)CKCodeOperation.init(functionName:request:)(0x7075446B63656863LL, 0xEF7365746163696CLL, v8);
  sub_1000CEC58(a1, (uint64_t)v8, type metadata accessor for Goldilocks_CheckDuplicatesRequest);
  v10(v8, 0LL, 1LL, v9);
  dispatch thunk of CKCodeOperation.request.setter(v8);
  swift_retain(a3);
  dispatch thunk of CKCodeOperation.codeOperationResultBlock.setter(a2, a3);
  CKCodeService.add<A, B>(_:)(v12);
}

void Goldilocks_CloudPhotosGoldilocksAPIAsyncClient.exitMoveBatch(_:completion:)( uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_1000BED3C(&qword_100293AD8);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for Goldilocks_ExitMoveBatchRequest(0LL);
  uint64_t v10 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56LL);
  v10(v8, 1LL, 1LL, v9);
  id v11 = objc_allocWithZone((Class)sub_1000BED3C(&qword_100293AE0));
  uint64_t v12 = (void *)CKCodeOperation.init(functionName:request:)(0x65766F4D74697865LL, 0xED00006863746142LL, v8);
  sub_1000CEC58(a1, (uint64_t)v8, type metadata accessor for Goldilocks_ExitMoveBatchRequest);
  v10(v8, 0LL, 1LL, v9);
  dispatch thunk of CKCodeOperation.request.setter(v8);
  swift_retain(a3);
  dispatch thunk of CKCodeOperation.codeOperationResultBlock.setter(a2, a3);
  CKCodeService.add<A, B>(_:)(v12);
}

void Goldilocks_CloudPhotosGoldilocksAPIAsyncClient.silentMoverRampingService(_:completion:)( uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_1000BED3C((uint64_t *)&unk_1002950E0);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for Goldilocks_SilentMoverRampingRequest(0LL);
  uint64_t v10 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56LL);
  v10(v8, 1LL, 1LL, v9);
  id v11 = objc_allocWithZone((Class)sub_1000BED3C(&qword_100293AE8));
  uint64_t v12 = (void *)CKCodeOperation.init(functionName:request:)(0xD000000000000019LL, 0x80000001001D2CD0LL, v8);
  sub_1000CEC58(a1, (uint64_t)v8, type metadata accessor for Goldilocks_SilentMoverRampingRequest);
  v10(v8, 0LL, 1LL, v9);
  dispatch thunk of CKCodeOperation.request.setter(v8);
  swift_retain(a3);
  dispatch thunk of CKCodeOperation.codeOperationResultBlock.setter(a2, a3);
  CKCodeService.add<A, B>(_:)(v12);
}

void Goldilocks_CloudPhotosGoldilocksAPIAsyncClient.exitMoveErrorFeedback(_:completion:)( uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_1000BED3C((uint64_t *)&unk_100295040);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for Goldilocks_ExitMoveBatchErrorFeedbackRequest(0LL);
  uint64_t v10 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56LL);
  v10(v8, 1LL, 1LL, v9);
  id v11 = objc_allocWithZone((Class)sub_1000BED3C(&qword_100293AF0));
  uint64_t v12 = (void *)CKCodeOperation.init(functionName:request:)(0xD000000000000015LL, 0x80000001001D2CF0LL, v8);
  sub_1000CEC58(a1, (uint64_t)v8, type metadata accessor for Goldilocks_ExitMoveBatchErrorFeedbackRequest);
  v10(v8, 0LL, 1LL, v9);
  dispatch thunk of CKCodeOperation.request.setter(v8);
  swift_retain(a3);
  dispatch thunk of CKCodeOperation.codeOperationResultBlock.setter(a2, a3);
  CKCodeService.add<A, B>(_:)(v12);
}

void Goldilocks_CloudPhotosGoldilocksAPIAsyncClient.exitStatusFeedback(_:completion:)( uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_1000BED3C((uint64_t *)&unk_100295000);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for Goldilocks_ExitStatusFeedbackRequest(0LL);
  uint64_t v10 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56LL);
  v10(v8, 1LL, 1LL, v9);
  id v11 = objc_allocWithZone((Class)sub_1000BED3C(&qword_100293AF8));
  uint64_t v12 = (void *)CKCodeOperation.init(functionName:request:)(0xD000000000000012LL, 0x80000001001D2D10LL, v8);
  sub_1000CEC58(a1, (uint64_t)v8, type metadata accessor for Goldilocks_ExitStatusFeedbackRequest);
  v10(v8, 0LL, 1LL, v9);
  dispatch thunk of CKCodeOperation.request.setter(v8);
  swift_retain(a3);
  dispatch thunk of CKCodeOperation.codeOperationResultBlock.setter(a2, a3);
  CKCodeService.add<A, B>(_:)(v12);
}

void sub_1000EE680(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void sub_1000EE6A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void sub_1000EE6C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void sub_1000EE6E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void sub_1000EE700(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void sub_1000EE720(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

uint64_t Goldilocks_CloudPhotosGoldilocksAPIAsyncOperation.initiateExit(operationID:sharedZoneID:exitType:retentionPolicy:participantUserIdsToRemove:participantIdsToRemove:zoneTtlForIcplexit:exitSource:stopAtStage:completion:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, __int16 a5, uint64_t a6, __int16 a7, uint64_t a8, uint64_t a9, uint64_t a10, unsigned __int8 a11, uint64_t a12, __int16 a13, uint64_t a14, __int16 a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  uint64_t v36 = a8;
  uint64_t v34 = a6;
  uint64_t v32 = a4;
  uint64_t v30 = a3;
  uint64_t v39 = a16;
  uint64_t v38 = a17;
  uint64_t v40 = a18;
  uint64_t v37 = a19;
  uint64_t v35 = a14;
  uint64_t v33 = a12;
  int v31 = a11;
  uint64_t v23 = type metadata accessor for Goldilocks_InitiateExitRequest(0LL);
  __chkstk_darwin(v23);
  uint64_t v25 = (char *)&v30 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v42 = a1;
  uint64_t v43 = a2;
  uint64_t v44 = v30;
  uint64_t v45 = v32;
  __int16 v46 = a5 & 0x1FF;
  uint64_t v47 = v34;
  __int16 v48 = a7 & 0x1FF;
  uint64_t v49 = v36;
  uint64_t v50 = a9;
  uint64_t v51 = a10;
  char v52 = a11 & 1;
  uint64_t v53 = a12;
  __int16 v54 = a13 & 0x1FF;
  uint64_t v55 = a14;
  __int16 v56 = a15 & 0x1FF;
  uint64_t v27 = v26;
  sub_1000BD35C(&qword_100293A90, v26, (uint64_t)&protocol conformance descriptor for Goldilocks_InitiateExitRequest);
  static Message.with(_:)(sub_1000ED938, v41);
  uint64_t v28 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v37 + 8))(v25, v39, v38, v40);
  sub_1000CECE0((uint64_t)v25, v27);
  return v28;
}

uint64_t sub_1000EE954( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned __int16 a6, uint64_t a7, __int16 a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, __int16 a14, uint64_t a15, __int16 a16)
{
  uint64_t v37 = a5;
  uint64_t v38 = a7;
  uint64_t v39 = a2;
  int v40 = a6;
  uint64_t v20 = sub_1000BED3C(&qword_100295030);
  __chkstk_darwin(v20);
  uint64_t v22 = (char *)&v37 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v23 = type metadata accessor for Goldilocks_ZoneID(0LL);
  uint64_t v24 = *(void *)(v23 - 8);
  uint64_t v25 = __chkstk_darwin(v23);
  uint64_t v27 = (char *)&v37 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v25);
  __int16 v29 = (char *)&v37 - v28;
  if (a3)
  {
    uint64_t v30 = *(void *)(a1 + 8);
    swift_bridgeObjectRetain(a3);
    swift_bridgeObjectRelease(v30);
    *(void *)a1 = v39;
    *(void *)(a1 + 8) = a3;
  }

  sub_1000F011C(a4, (uint64_t)v22);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v22, 1LL, v23) == 1)
  {
    uint64_t result = sub_1000F0164((uint64_t)v22);
  }

  else
  {
    sub_1000F01A4((uint64_t)v22, (uint64_t)v29);
    sub_1000CEC58((uint64_t)v29, (uint64_t)v27, type metadata accessor for Goldilocks_ZoneID);
    uint64_t v32 = a1 + *(int *)(type metadata accessor for Goldilocks_InitiateExitRequest(0LL) + 52);
    sub_1000F0164(v32);
    sub_1000F01A4((uint64_t)v27, v32);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v24 + 56))(v32, 0LL, 1LL, v23);
    uint64_t result = sub_1000CECE0((uint64_t)v29, type metadata accessor for Goldilocks_ZoneID);
  }

  char v33 = v40;
  if ((v40 & 0x100) != 0)
  {
    uint64_t v34 = a10;
    if ((a8 & 0x100) != 0) {
      goto LABEL_8;
    }
  }

  else
  {
    *(void *)(a1 + 16) = v37;
    *(_BYTE *)(a1 + 24) = v33 & 1;
    uint64_t v34 = a10;
    if ((a8 & 0x100) != 0)
    {
LABEL_8:
      if (!*(void *)(a9 + 16)) {
        goto LABEL_10;
      }
      goto LABEL_9;
    }
  }

  *(void *)(a1 + 32) = v38;
  *(_BYTE *)(a1 + 40) = a8 & 1;
  if (*(void *)(a9 + 16))
  {
LABEL_9:
    uint64_t v35 = *(void *)(a1 + 48);
    swift_bridgeObjectRetain(a9);
    uint64_t result = swift_bridgeObjectRelease(v35);
    *(void *)(a1 + 48) = a9;
  }

uint64_t sub_1000EEBE0(uint64_t a1)
{
  return sub_1000EE954( a1,  *(void *)(v1 + 16),  *(void *)(v1 + 24),  *(void *)(v1 + 32),  *(void *)(v1 + 40),  *(unsigned __int8 *)(v1 + 48) | (unsigned __int16)(*(unsigned __int8 *)(v1 + 49) << 8),  *(void *)(v1 + 56),  *(unsigned __int8 *)(v1 + 64) | (unsigned __int16)(*(unsigned __int8 *)(v1 + 65) << 8),  *(void *)(v1 + 72),  *(void *)(v1 + 80),  *(void *)(v1 + 88),  *(_BYTE *)(v1 + 96),  *(void *)(v1 + 104),  *(unsigned __int8 *)(v1 + 112) | (unsigned __int16)(*(unsigned __int8 *)(v1 + 113) << 8),  *(void *)(v1 + 120),  *(unsigned __int8 *)(v1 + 128) | (unsigned __int16)(*(unsigned __int8 *)(v1 + 129) << 8));
}

uint64_t Goldilocks_CloudPhotosGoldilocksAPIAsyncOperation.checkDuplicates(operationID:zoneID:recordIds:completion:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v16 = type metadata accessor for Goldilocks_CheckDuplicatesRequest(0LL);
  __chkstk_darwin(v16);
  uint64_t v18 = &v24[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v25 = a1;
  uint64_t v26 = a2;
  uint64_t v27 = a3;
  uint64_t v28 = a4;
  uint64_t v20 = v19;
  sub_1000BD35C(&qword_100293A98, v19, (uint64_t)&protocol conformance descriptor for Goldilocks_CheckDuplicatesRequest);
  static Message.with(_:)(sub_1000EEF4C, v24);
  uint64_t v21 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t, uint64_t))(a8 + 16))(v18, a5, a6, a7, a8);
  sub_1000CECE0((uint64_t)v18, v20);
  return v21;
}

uint64_t sub_1000EED84(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v25 = a5;
  uint64_t v9 = sub_1000BED3C(&qword_100295030);
  __chkstk_darwin(v9);
  id v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for Goldilocks_ZoneID(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v24 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v14);
  uint64_t v18 = (char *)&v24 - v17;
  if (a3)
  {
    uint64_t v19 = a1[1];
    swift_bridgeObjectRetain(a3);
    swift_bridgeObjectRelease(v19);
    *a1 = a2;
    a1[1] = a3;
  }

  sub_1000F011C(a4, (uint64_t)v11);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1LL, v12) == 1)
  {
    uint64_t result = sub_1000F0164((uint64_t)v11);
  }

  else
  {
    sub_1000F01A4((uint64_t)v11, (uint64_t)v18);
    sub_1000CEC58((uint64_t)v18, (uint64_t)v16, type metadata accessor for Goldilocks_ZoneID);
    uint64_t v21 = (uint64_t)a1 + *(int *)(type metadata accessor for Goldilocks_CheckDuplicatesRequest(0LL) + 28);
    sub_1000F0164(v21);
    sub_1000F01A4((uint64_t)v16, v21);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v13 + 56))(v21, 0LL, 1LL, v12);
    uint64_t result = sub_1000CECE0((uint64_t)v18, type metadata accessor for Goldilocks_ZoneID);
  }

  uint64_t v22 = v25;
  if (*(void *)(v25 + 16))
  {
    uint64_t v23 = a1[2];
    swift_bridgeObjectRetain(v25);
    uint64_t result = swift_bridgeObjectRelease(v23);
    a1[2] = v22;
  }

  return result;
}

uint64_t sub_1000EEF4C(void *a1)
{
  return sub_1000EED84(a1, v1[2], v1[3], v1[4], v1[5]);
}

uint64_t Goldilocks_CloudPhotosGoldilocksAPIAsyncOperation.exitMoveBatch(operationID:zoneID:batchSize:completion:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v16 = type metadata accessor for Goldilocks_ExitMoveBatchRequest(0LL);
  __chkstk_darwin(v16);
  uint64_t v18 = &v24[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v25 = a1;
  uint64_t v26 = a2;
  uint64_t v27 = a3;
  int v28 = a4;
  char v29 = BYTE4(a4) & 1;
  uint64_t v20 = v19;
  sub_1000BD35C(&qword_1002950C0, v19, (uint64_t)&protocol conformance descriptor for Goldilocks_ExitMoveBatchRequest);
  static Message.with(_:)(sub_1000EDB80, v24);
  uint64_t v21 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t, uint64_t))(a8 + 24))(v18, a5, a6, a7, a8);
  sub_1000CECE0((uint64_t)v18, v20);
  return v21;
}

uint64_t sub_1000EF090(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v24 = a5;
  uint64_t v9 = sub_1000BED3C(&qword_100295030);
  __chkstk_darwin(v9);
  id v11 = (char *)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for Goldilocks_ZoneID(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v23 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v14);
  uint64_t v18 = (char *)&v23 - v17;
  if (a3)
  {
    uint64_t v19 = *(void *)(a1 + 8);
    swift_bridgeObjectRetain(a3);
    swift_bridgeObjectRelease(v19);
    *(void *)a1 = a2;
    *(void *)(a1 + 8) = a3;
  }

  sub_1000F011C(a4, (uint64_t)v11);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1LL, v12) != 1)
  {
    sub_1000F01A4((uint64_t)v11, (uint64_t)v18);
    sub_1000CEC58((uint64_t)v18, (uint64_t)v16, type metadata accessor for Goldilocks_ZoneID);
    uint64_t v22 = a1 + *(int *)(type metadata accessor for Goldilocks_ExitMoveBatchRequest(0LL) + 28);
    sub_1000F0164(v22);
    sub_1000F01A4((uint64_t)v16, v22);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v13 + 56))(v22, 0LL, 1LL, v12);
    uint64_t result = sub_1000CECE0((uint64_t)v18, type metadata accessor for Goldilocks_ZoneID);
    int v21 = v24;
    if ((v24 & 0x100000000LL) != 0) {
      return result;
    }
    goto LABEL_7;
  }

  uint64_t result = sub_1000F0164((uint64_t)v11);
  int v21 = v24;
  if ((v24 & 0x100000000LL) == 0) {
LABEL_7:
  }
    *(_DWORD *)(a1 + 16) = v21;
  return result;
}

uint64_t sub_1000EF248(uint64_t a1)
{
  return sub_1000EF090( a1,  *(void *)(v1 + 16),  *(void *)(v1 + 24),  *(void *)(v1 + 32),  *(unsigned int *)(v1 + 40) | ((unint64_t)*(unsigned __int8 *)(v1 + 44) << 32));
}

uint64_t Goldilocks_CloudPhotosGoldilocksAPIAsyncOperation.silentMoverRampingService(operationID:completion:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12 = type metadata accessor for Goldilocks_SilentMoverRampingRequest(0LL);
  __chkstk_darwin(v12);
  uint64_t v14 = &v17[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v18 = a1;
  uint64_t v19 = a2;
  sub_1000BD35C( &qword_100293AA0,  type metadata accessor for Goldilocks_SilentMoverRampingRequest,  (uint64_t)&protocol conformance descriptor for Goldilocks_SilentMoverRampingRequest);
  static Message.with(_:)(sub_1000D7774, v17);
  uint64_t v15 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t, uint64_t, uint64_t))(a6 + 32))(v14, a3, a4, a5, a6);
  sub_1000CECE0((uint64_t)v14, type metadata accessor for Goldilocks_SilentMoverRampingRequest);
  return v15;
}

uint64_t Goldilocks_CloudPhotosGoldilocksAPIAsyncOperation.exitMoveErrorFeedback(exitZoneID:items:moveBatchOperationID:moveBatchID:completion:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v25 = a8;
  uint64_t v24 = a7;
  uint64_t v16 = type metadata accessor for Goldilocks_ExitMoveBatchErrorFeedbackRequest(0LL);
  __chkstk_darwin(v16);
  uint64_t v18 = (char *)&v23 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v27 = a1;
  uint64_t v28 = a2;
  uint64_t v29 = a3;
  uint64_t v30 = a4;
  uint64_t v31 = a5;
  uint64_t v32 = a6;
  uint64_t v20 = v19;
  sub_1000BD35C( &qword_100293AA8,  v19,  (uint64_t)&protocol conformance descriptor for Goldilocks_ExitMoveBatchErrorFeedbackRequest);
  static Message.with(_:)(sub_1000EDDAC, v26);
  uint64_t v21 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t, uint64_t))(a10 + 40))(v18, v24, v25, a9, a10);
  sub_1000CECE0((uint64_t)v18, v20);
  return v21;
}

uint64_t sub_1000EF4A8(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v29 = a6;
  uint64_t v30 = a7;
  uint64_t v28 = a4;
  uint64_t v11 = sub_1000BED3C(&qword_100295030);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v27 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = type metadata accessor for Goldilocks_ZoneID(0LL);
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v18 = (char *)&v27 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v16);
  uint64_t v20 = (char *)&v27 - v19;
  sub_1000F011C(a2, (uint64_t)v13);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1LL, v14) == 1)
  {
    uint64_t result = sub_1000F0164((uint64_t)v13);
  }

  else
  {
    sub_1000F01A4((uint64_t)v13, (uint64_t)v20);
    sub_1000CEC58((uint64_t)v20, (uint64_t)v18, type metadata accessor for Goldilocks_ZoneID);
    uint64_t v22 = (uint64_t)a1 + *(int *)(type metadata accessor for Goldilocks_ExitMoveBatchErrorFeedbackRequest(0LL) + 32);
    sub_1000F0164(v22);
    sub_1000F01A4((uint64_t)v18, v22);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v15 + 56))(v22, 0LL, 1LL, v14);
    uint64_t result = sub_1000CECE0((uint64_t)v20, type metadata accessor for Goldilocks_ZoneID);
  }

  uint64_t v23 = v30;
  if (*(void *)(a3 + 16))
  {
    uint64_t v24 = *a1;
    swift_bridgeObjectRetain(a3);
    uint64_t result = swift_bridgeObjectRelease(v24);
    *a1 = a3;
  }

  if (a5)
  {
    uint64_t v25 = a1[2];
    swift_bridgeObjectRetain(a5);
    uint64_t result = swift_bridgeObjectRelease(v25);
    a1[1] = v28;
    a1[2] = a5;
  }

  if (v23)
  {
    uint64_t v26 = a1[4];
    swift_bridgeObjectRetain(v23);
    uint64_t result = swift_bridgeObjectRelease(v26);
    a1[3] = v29;
    a1[4] = v23;
  }

  return result;
}

uint64_t sub_1000EF698(uint64_t *a1)
{
  return sub_1000EF4A8(a1, v1[2], v1[3], v1[4], v1[5], v1[6], v1[7]);
}

uint64_t Goldilocks_CloudPhotosGoldilocksAPIAsyncOperation.exitStatusFeedback(operationID:shareID:status:completion:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, __int16 a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v24 = a8;
  uint64_t v16 = type metadata accessor for Goldilocks_ExitStatusFeedbackRequest(0LL);
  __chkstk_darwin(v16);
  uint64_t v18 = (char *)&v23 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v26 = a1;
  uint64_t v27 = a2;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  __int16 v30 = a5 & 0x1FF;
  uint64_t v20 = v19;
  sub_1000BD35C( &qword_100293AB0,  v19,  (uint64_t)&protocol conformance descriptor for Goldilocks_ExitStatusFeedbackRequest);
  static Message.with(_:)(sub_1000EDED8, v25);
  uint64_t v21 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t, uint64_t))(a9 + 48))(v18, a6, a7, v24, a9);
  sub_1000CECE0((uint64_t)v18, v20);
  return v21;
}

uint64_t sub_1000EF7D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned __int16 a6)
{
  uint64_t v24 = a5;
  int v25 = a6;
  uint64_t v10 = sub_1000BED3C(&qword_100295030);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for Goldilocks_ZoneID(0LL);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v17 = (char *)&v24 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v15);
  uint64_t v19 = (char *)&v24 - v18;
  if (a3)
  {
    uint64_t v20 = *(void *)(a1 + 8);
    swift_bridgeObjectRetain(a3);
    swift_bridgeObjectRelease(v20);
    *(void *)a1 = a2;
    *(void *)(a1 + 8) = a3;
  }

  sub_1000F011C(a4, (uint64_t)v12);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1LL, v13) != 1)
  {
    sub_1000F01A4((uint64_t)v12, (uint64_t)v19);
    sub_1000CEC58((uint64_t)v19, (uint64_t)v17, type metadata accessor for Goldilocks_ZoneID);
    uint64_t v23 = a1 + *(int *)(type metadata accessor for Goldilocks_ExitStatusFeedbackRequest(0LL) + 28);
    sub_1000F0164(v23);
    sub_1000F01A4((uint64_t)v17, v23);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v14 + 56))(v23, 0LL, 1LL, v13);
    uint64_t result = sub_1000CECE0((uint64_t)v19, type metadata accessor for Goldilocks_ZoneID);
    char v22 = v25;
    if ((v25 & 0x100) != 0) {
      return result;
    }
    goto LABEL_7;
  }

  uint64_t result = sub_1000F0164((uint64_t)v12);
  char v22 = v25;
  if ((v25 & 0x100) == 0)
  {
LABEL_7:
    *(void *)(a1 + 16) = v24;
    *(_BYTE *)(a1 + 24) = v22 & 1;
  }

  return result;
}

uint64_t sub_1000EF9A4(uint64_t a1)
{
  return sub_1000EF7D8( a1,  *(void *)(v1 + 16),  *(void *)(v1 + 24),  *(void *)(v1 + 32),  *(void *)(v1 + 40),  *(unsigned __int8 *)(v1 + 48) | (unsigned __int16)(*(unsigned __int8 *)(v1 + 49) << 8));
}

uint64_t Goldilocks_CloudPhotosGoldilocksAPIAsyncOperationClient.initiateExit(_:completion:)( uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_1000BED3C(&qword_100293AB8);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for Goldilocks_InitiateExitRequest(0LL);
  uint64_t v10 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56LL);
  v10(v8, 1LL, 1LL, v9);
  id v11 = objc_allocWithZone((Class)sub_1000BED3C(&qword_100293AC0));
  uint64_t v12 = CKCodeOperation.init(functionName:request:)(0x6574616974696E69LL, 0xEC00000074697845LL, v8);
  sub_1000CEC58(a1, (uint64_t)v8, type metadata accessor for Goldilocks_InitiateExitRequest);
  v10(v8, 0LL, 1LL, v9);
  dispatch thunk of CKCodeOperation.request.setter(v8);
  swift_retain(a3);
  dispatch thunk of CKCodeOperation.codeOperationResultBlock.setter(a2, a3);
  return v12;
}

uint64_t Goldilocks_CloudPhotosGoldilocksAPIAsyncOperationClient.checkDuplicates(_:completion:)( uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_1000BED3C(&qword_100293AC8);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for Goldilocks_CheckDuplicatesRequest(0LL);
  uint64_t v10 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56LL);
  v10(v8, 1LL, 1LL, v9);
  id v11 = objc_allocWithZone((Class)sub_1000BED3C(&qword_100293AD0));
  uint64_t v12 = CKCodeOperation.init(functionName:request:)(0x7075446B63656863LL, 0xEF7365746163696CLL, v8);
  sub_1000CEC58(a1, (uint64_t)v8, type metadata accessor for Goldilocks_CheckDuplicatesRequest);
  v10(v8, 0LL, 1LL, v9);
  dispatch thunk of CKCodeOperation.request.setter(v8);
  swift_retain(a3);
  dispatch thunk of CKCodeOperation.codeOperationResultBlock.setter(a2, a3);
  return v12;
}

uint64_t Goldilocks_CloudPhotosGoldilocksAPIAsyncOperationClient.exitMoveBatch(_:completion:)( uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_1000BED3C(&qword_100293AD8);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for Goldilocks_ExitMoveBatchRequest(0LL);
  uint64_t v10 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56LL);
  v10(v8, 1LL, 1LL, v9);
  id v11 = objc_allocWithZone((Class)sub_1000BED3C(&qword_100293AE0));
  uint64_t v12 = CKCodeOperation.init(functionName:request:)(0x65766F4D74697865LL, 0xED00006863746142LL, v8);
  sub_1000CEC58(a1, (uint64_t)v8, type metadata accessor for Goldilocks_ExitMoveBatchRequest);
  v10(v8, 0LL, 1LL, v9);
  dispatch thunk of CKCodeOperation.request.setter(v8);
  swift_retain(a3);
  dispatch thunk of CKCodeOperation.codeOperationResultBlock.setter(a2, a3);
  return v12;
}

uint64_t _s22CloudKitImplementation011Goldilocks_a6PhotosD23APIAsyncOperationClientC25silentMoverRampingService_10completion0aB4Code06CKCodeG0CyAA0d7_SilentjK7RequestVAA0d1_pjK8ResponseVGAJ_ys6ResultOyALs5Error_pGctF_0( uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_1000BED3C((uint64_t *)&unk_1002950E0);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for Goldilocks_SilentMoverRampingRequest(0LL);
  uint64_t v10 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56LL);
  v10(v8, 1LL, 1LL, v9);
  id v11 = objc_allocWithZone((Class)sub_1000BED3C(&qword_100293AE8));
  uint64_t v12 = CKCodeOperation.init(functionName:request:)(0xD000000000000019LL, 0x80000001001D2CD0LL, v8);
  sub_1000CEC58(a1, (uint64_t)v8, type metadata accessor for Goldilocks_SilentMoverRampingRequest);
  v10(v8, 0LL, 1LL, v9);
  dispatch thunk of CKCodeOperation.request.setter(v8);
  swift_retain(a3);
  dispatch thunk of CKCodeOperation.codeOperationResultBlock.setter(a2, a3);
  return v12;
}

uint64_t _s22CloudKitImplementation011Goldilocks_a6PhotosD23APIAsyncOperationClientC21exitMoveErrorFeedback_10completion0aB4Code06CKCodeG0CyAA0d5_Exitj5BatchkL7RequestVAA0d1_pjqkL8ResponseVGAJ_ys6ResultOyALs0K0_pGctF_0( uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_1000BED3C((uint64_t *)&unk_100295040);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for Goldilocks_ExitMoveBatchErrorFeedbackRequest(0LL);
  uint64_t v10 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56LL);
  v10(v8, 1LL, 1LL, v9);
  id v11 = objc_allocWithZone((Class)sub_1000BED3C(&qword_100293AF0));
  uint64_t v12 = CKCodeOperation.init(functionName:request:)(0xD000000000000015LL, 0x80000001001D2CF0LL, v8);
  sub_1000CEC58(a1, (uint64_t)v8, type metadata accessor for Goldilocks_ExitMoveBatchErrorFeedbackRequest);
  v10(v8, 0LL, 1LL, v9);
  dispatch thunk of CKCodeOperation.request.setter(v8);
  swift_retain(a3);
  dispatch thunk of CKCodeOperation.codeOperationResultBlock.setter(a2, a3);
  return v12;
}

uint64_t _s22CloudKitImplementation011Goldilocks_a6PhotosD23APIAsyncOperationClientC18exitStatusFeedback_10completion0aB4Code06CKCodeG0CyAA0d5_ExitjK7RequestVAA0d1_ojK8ResponseVGAJ_ys6ResultOyALs5Error_pGctF_0( uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_1000BED3C((uint64_t *)&unk_100295000);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for Goldilocks_ExitStatusFeedbackRequest(0LL);
  uint64_t v10 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56LL);
  v10(v8, 1LL, 1LL, v9);
  id v11 = objc_allocWithZone((Class)sub_1000BED3C(&qword_100293AF8));
  uint64_t v12 = CKCodeOperation.init(functionName:request:)(0xD000000000000012LL, 0x80000001001D2D10LL, v8);
  sub_1000CEC58(a1, (uint64_t)v8, type metadata accessor for Goldilocks_ExitStatusFeedbackRequest);
  v10(v8, 0LL, 1LL, v9);
  dispatch thunk of CKCodeOperation.request.setter(v8);
  swift_retain(a3);
  dispatch thunk of CKCodeOperation.codeOperationResultBlock.setter(a2, a3);
  return v12;
}

ValueMetadata *type metadata accessor for Goldilocks_CloudPhotosGoldilocksAPI()
{
  return &type metadata for Goldilocks_CloudPhotosGoldilocksAPI;
}

uint64_t type metadata accessor for Goldilocks_CloudPhotosGoldilocksAPIAsyncClient()
{
  return objc_opt_self(&OBJC_CLASS____TtC22CloudKitImplementation46Goldilocks_CloudPhotosGoldilocksAPIAsyncClient);
}

uint64_t type metadata accessor for Goldilocks_CloudPhotosGoldilocksAPIAsyncOperationClient()
{
  return objc_opt_self(&OBJC_CLASS____TtC22CloudKitImplementation55Goldilocks_CloudPhotosGoldilocksAPIAsyncOperationClient);
}

uint64_t sub_1000F011C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000BED3C(&qword_100295030);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000F0164(uint64_t a1)
{
  uint64_t v2 = sub_1000BED3C(&qword_100295030);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_1000F01A4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Goldilocks_ZoneID(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000F01E8(void *a1)
{
  return sub_1000EEF4C(a1);
}

uint64_t Goldilocks_InitiateExitRequest.sharedZoneID.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for Goldilocks_InitiateExitRequest(0LL) + 52);
  sub_1000CEDAC(v3, &qword_100295030);
  sub_1000CEC9C(a1, v3, type metadata accessor for Goldilocks_ZoneID);
  uint64_t v4 = type metadata accessor for Goldilocks_ZoneID(0LL);
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56LL))(v3, 0LL, 1LL, v4);
}

uint64_t type metadata accessor for Goldilocks_InitiateExitRequest(uint64_t a1)
{
  return sub_1000BCF80( a1,  (uint64_t *)&unk_1002940C0,  (uint64_t)&nominal type descriptor for Goldilocks_InitiateExitRequest);
}

uint64_t type metadata accessor for Goldilocks_ZoneID(uint64_t a1)
{
  return sub_1000BCF80(a1, qword_100294510, (uint64_t)&nominal type descriptor for Goldilocks_ZoneID);
}

uint64_t Goldilocks_CheckDuplicatesRequest.zoneID.setter(uint64_t a1)
{
  return sub_1000F3948( a1,  type metadata accessor for Goldilocks_CheckDuplicatesRequest,  &qword_100295030,  type metadata accessor for Goldilocks_ZoneID);
}

uint64_t type metadata accessor for Goldilocks_CheckDuplicatesRequest(uint64_t a1)
{
  return sub_1000BCF80(a1, qword_1002942B0, (uint64_t)&nominal type descriptor for Goldilocks_CheckDuplicatesRequest);
}

uint64_t Goldilocks_ExitMoveBatchRequest.zoneID.setter(uint64_t a1)
{
  return sub_1000F3948( a1,  type metadata accessor for Goldilocks_ExitMoveBatchRequest,  &qword_100295030,  type metadata accessor for Goldilocks_ZoneID);
}

uint64_t type metadata accessor for Goldilocks_ExitMoveBatchRequest(uint64_t a1)
{
  return sub_1000BCF80(a1, qword_1002945A8, (uint64_t)&nominal type descriptor for Goldilocks_ExitMoveBatchRequest);
}

uint64_t Goldilocks_ExitMoveBatchErrorFeedbackRequest.exitZoneID.setter(uint64_t a1)
{
  return sub_1000F3C98( a1,  type metadata accessor for Goldilocks_ExitMoveBatchErrorFeedbackRequest,  &qword_100295030,  type metadata accessor for Goldilocks_ZoneID);
}

uint64_t type metadata accessor for Goldilocks_ExitMoveBatchErrorFeedbackRequest(uint64_t a1)
{
  return sub_1000BCF80( a1,  qword_100294780,  (uint64_t)&nominal type descriptor for Goldilocks_ExitMoveBatchErrorFeedbackRequest);
}

uint64_t Goldilocks_ExitStatusFeedbackRequest.shareID.setter(uint64_t a1)
{
  return sub_1000F3948( a1,  type metadata accessor for Goldilocks_ExitStatusFeedbackRequest,  &qword_100295030,  type metadata accessor for Goldilocks_ZoneID);
}

uint64_t type metadata accessor for Goldilocks_ExitStatusFeedbackRequest(uint64_t a1)
{
  return sub_1000BCF80(a1, qword_100294C78, (uint64_t)&nominal type descriptor for Goldilocks_ExitStatusFeedbackRequest);
}

uint64_t Goldilocks_ExitStage.init(rawValue:)(uint64_t a1)
{
  return sub_1000B8D20(a1, (uint64_t (*)(void))sub_100105260);
}

uint64_t Goldilocks_ExitStage.rawValue.getter(uint64_t result, char a2)
{
  if ((a2 & 1) != 0) {
    return qword_100219938[result];
  }
  return result;
}

uint64_t sub_1000F0374@<X0>(uint64_t a1@<X8>)
{
  return sub_1000B8D60((uint64_t (*)(void))sub_100105260, a1);
}

uint64_t sub_1000F0380()
{
  uint64_t result = *v0;
  if (*((_BYTE *)v0 + 8) == 1) {
    return qword_100219938[result];
  }
  return result;
}

uint64_t sub_1000F03A0@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000B8DBC(a1, sub_100105260, a2);
}

void sub_1000F03AC(void *a1@<X8>)
{
  uint64_t v2 = *v1;
  if (*((_BYTE *)v1 + 8) == 1) {
    uint64_t v2 = qword_100219938[v2];
  }
  *a1 = v2;
}

uint64_t sub_1000F03D0(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_1001054C0();
  return Enum.hash(into:)(a1, a2, v4);
}

BOOL sub_1000F0408(uint64_t a1, uint64_t a2)
{
  return sub_1000B8BBC(*(void *)a1, *(_BYTE *)(a1 + 8), *(void *)a2, *(_BYTE *)(a2 + 8));
}

void sub_1000F0424()
{
  static Goldilocks_ExitStage.allCases = (uint64_t)&off_100243888;
}

uint64_t *Goldilocks_ExitStage.allCases.unsafeMutableAddressor()
{
  if (qword_100291890 != -1) {
    swift_once(&qword_100291890, sub_1000F0424);
  }
  return &static Goldilocks_ExitStage.allCases;
}

uint64_t static Goldilocks_ExitStage.allCases.getter()
{
  return sub_1000B92C0(&qword_100291890, &static Goldilocks_ExitStage.allCases);
}

uint64_t static Goldilocks_ExitStage.allCases.setter(uint64_t a1)
{
  return sub_1000B9334(a1, &qword_100291890, &static Goldilocks_ExitStage.allCases, (uint64_t)sub_1000F0424);
}

uint64_t (*static Goldilocks_ExitStage.allCases.modify(uint64_t a1))(void)
{
  if (qword_100291890 != -1) {
    swift_once(&qword_100291890, sub_1000F0424);
  }
  swift_beginAccess(&static Goldilocks_ExitStage.allCases, a1, 33LL, 0LL);
  return j_j__swift_endAccess;
}

uint64_t sub_1000F051C@<X0>(uint64_t *a1@<X8>)
{
  return sub_1000B9420(&qword_100291890, &static Goldilocks_ExitStage.allCases, (uint64_t)sub_1000F0424, a1);
}

uint64_t Goldilocks_ExitSource.init(rawValue:)(uint64_t a1)
{
  return sub_1000B8D20(a1, (uint64_t (*)(void))sub_100105350);
}

uint64_t sub_1000F0544@<X0>(uint64_t a1@<X8>)
{
  return sub_1000B8D60((uint64_t (*)(void))sub_100105350, a1);
}

uint64_t sub_1000F0550@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000B8DBC(a1, (uint64_t (*)(void))sub_100105350, a2);
}

uint64_t sub_1000F055C(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_100105504();
  return Enum.hash(into:)(a1, a2, v4);
}

void sub_1000F0594()
{
  static Goldilocks_ExitSource.allCases = (uint64_t)&off_100243938;
}

uint64_t *Goldilocks_ExitSource.allCases.unsafeMutableAddressor()
{
  if (qword_100291898 != -1) {
    swift_once(&qword_100291898, sub_1000F0594);
  }
  return &static Goldilocks_ExitSource.allCases;
}

uint64_t static Goldilocks_ExitSource.allCases.getter()
{
  return sub_1000B92C0(&qword_100291898, &static Goldilocks_ExitSource.allCases);
}

uint64_t static Goldilocks_ExitSource.allCases.setter(uint64_t a1)
{
  return sub_1000B9334(a1, &qword_100291898, &static Goldilocks_ExitSource.allCases, (uint64_t)sub_1000F0594);
}

uint64_t (*static Goldilocks_ExitSource.allCases.modify(uint64_t a1))(void)
{
  if (qword_100291898 != -1) {
    swift_once(&qword_100291898, sub_1000F0594);
  }
  swift_beginAccess(&static Goldilocks_ExitSource.allCases, a1, 33LL, 0LL);
  return j_j__swift_endAccess;
}

uint64_t sub_1000F068C@<X0>(uint64_t *a1@<X8>)
{
  return sub_1000B9420(&qword_100291898, &static Goldilocks_ExitSource.allCases, (uint64_t)sub_1000F0594, a1);
}

uint64_t sub_1000F06A8(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_10010558C();
  return Enum.hash(into:)(a1, a2, v4);
}

void sub_1000F06E0()
{
  static Goldilocks_ExitType.allCases = (uint64_t)&off_1002439A8;
}

uint64_t *Goldilocks_ExitType.allCases.unsafeMutableAddressor()
{
  if (qword_1002918A0 != -1) {
    swift_once(&qword_1002918A0, sub_1000F06E0);
  }
  return &static Goldilocks_ExitType.allCases;
}

uint64_t static Goldilocks_ExitType.allCases.getter()
{
  return sub_1000B92C0(&qword_1002918A0, &static Goldilocks_ExitType.allCases);
}

uint64_t static Goldilocks_ExitType.allCases.setter(uint64_t a1)
{
  return sub_1000B9334(a1, &qword_1002918A0, &static Goldilocks_ExitType.allCases, (uint64_t)sub_1000F06E0);
}

uint64_t (*static Goldilocks_ExitType.allCases.modify(uint64_t a1))(void)
{
  if (qword_1002918A0 != -1) {
    swift_once(&qword_1002918A0, sub_1000F06E0);
  }
  swift_beginAccess(&static Goldilocks_ExitType.allCases, a1, 33LL, 0LL);
  return j__swift_endAccess;
}

uint64_t sub_1000F07D8@<X0>(uint64_t *a1@<X8>)
{
  return sub_1000B9420(&qword_1002918A0, &static Goldilocks_ExitType.allCases, (uint64_t)sub_1000F06E0, a1);
}

uint64_t sub_1000F07F4(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_100105548();
  return Enum.hash(into:)(a1, a2, v4);
}

void sub_1000F082C()
{
  static Goldilocks_RecordRetentionPolicy.allCases = (uint64_t)&off_1002439F8;
}

uint64_t *Goldilocks_RecordRetentionPolicy.allCases.unsafeMutableAddressor()
{
  if (qword_1002918A8 != -1) {
    swift_once(&qword_1002918A8, sub_1000F082C);
  }
  return &static Goldilocks_RecordRetentionPolicy.allCases;
}

uint64_t static Goldilocks_RecordRetentionPolicy.allCases.getter()
{
  return sub_1000B92C0(&qword_1002918A8, &static Goldilocks_RecordRetentionPolicy.allCases);
}

uint64_t static Goldilocks_RecordRetentionPolicy.allCases.setter(uint64_t a1)
{
  return sub_1000B9334(a1, &qword_1002918A8, &static Goldilocks_RecordRetentionPolicy.allCases, (uint64_t)sub_1000F082C);
}

uint64_t (*static Goldilocks_RecordRetentionPolicy.allCases.modify(uint64_t a1))(void)
{
  if (qword_1002918A8 != -1) {
    swift_once(&qword_1002918A8, sub_1000F082C);
  }
  swift_beginAccess(&static Goldilocks_RecordRetentionPolicy.allCases, a1, 33LL, 0LL);
  return j_j__swift_endAccess;
}

uint64_t sub_1000F0924@<X0>(uint64_t *a1@<X8>)
{
  return sub_1000B9420(&qword_1002918A8, &static Goldilocks_RecordRetentionPolicy.allCases, (uint64_t)sub_1000F082C, a1);
}

  ;
}

BOOL Goldilocks_DuplicateType.rawValue.getter(BOOL result, char a2)
{
  if ((a2 & 1) != 0) {
    return result;
  }
  return result;
}

unint64_t sub_1000F0968@<X0>(unint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = result;
  *(_BYTE *)(a2 + 8) = result < 2;
  *(_BYTE *)(a2 + 9) = 0;
  return result;
}

uint64_t sub_1000F0980()
{
  if (v0[8]) {
    return *(void *)v0 != 0LL;
  }
  else {
    return *(void *)v0;
  }
}

void *sub_1000F099C@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  BOOL v2 = *result >= 2uLL;
  *(void *)a2 = *result;
  char v3 = !v2;
  *(_BYTE *)(a2 + 8) = v3;
  *(_BYTE *)(a2 + 9) = 0;
  return result;
}

void sub_1000F09B8(void *a1@<X8>)
{
  uint64_t v2 = *v1;
  if (*((_BYTE *)v1 + 8)) {
    uint64_t v2 = *v1 != 0;
  }
  *a1 = v2;
}

uint64_t sub_1000F09D8(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_1001055D0();
  return Enum.hash(into:)(a1, a2, v4);
}

BOOL sub_1000F0A10(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  if (*((_BYTE *)a1 + 8)) {
    uint64_t v2 = *a1 != 0;
  }
  uint64_t v3 = *a2 != 0;
  if (!*((_BYTE *)a2 + 8)) {
    uint64_t v3 = *a2;
  }
  return v2 == v3;
}

void sub_1000F0A4C()
{
  static Goldilocks_DuplicateType.allCases = (uint64_t)&off_100243A48;
}

uint64_t *Goldilocks_DuplicateType.allCases.unsafeMutableAddressor()
{
  if (qword_1002918B0 != -1) {
    swift_once(&qword_1002918B0, sub_1000F0A4C);
  }
  return &static Goldilocks_DuplicateType.allCases;
}

uint64_t static Goldilocks_DuplicateType.allCases.getter()
{
  return sub_1000B92C0(&qword_1002918B0, &static Goldilocks_DuplicateType.allCases);
}

uint64_t static Goldilocks_DuplicateType.allCases.setter(uint64_t a1)
{
  return sub_1000B9334(a1, &qword_1002918B0, &static Goldilocks_DuplicateType.allCases, (uint64_t)sub_1000F0A4C);
}

uint64_t (*static Goldilocks_DuplicateType.allCases.modify(uint64_t a1))(void)
{
  if (qword_1002918B0 != -1) {
    swift_once(&qword_1002918B0, sub_1000F0A4C);
  }
  swift_beginAccess(&static Goldilocks_DuplicateType.allCases, a1, 33LL, 0LL);
  return j_j__swift_endAccess;
}

uint64_t sub_1000F0B44@<X0>(uint64_t *a1@<X8>)
{
  return sub_1000B9420(&qword_1002918B0, &static Goldilocks_DuplicateType.allCases, (uint64_t)sub_1000F0A4C, a1);
}

uint64_t Goldilocks_InitiateExitRequest.sharedZoneID.getter@<X0>(void *a1@<X8>)
{
  uint64_t v3 = sub_1000BED3C(&qword_100295030);
  __chkstk_darwin(v3);
  unint64_t v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for Goldilocks_InitiateExitRequest(0LL);
  sub_1000CE7B4(v1 + *(int *)(v6 + 52), (uint64_t)v5, &qword_100295030);
  uint64_t v7 = type metadata accessor for Goldilocks_ZoneID(0LL);
  uint64_t v8 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48LL))(v5, 1LL, v7);
  if ((_DWORD)v8 != 1) {
    return sub_1000CEC9C((uint64_t)v5, (uint64_t)a1, type metadata accessor for Goldilocks_ZoneID);
  }
  *a1 = 0LL;
  a1[1] = 0xE000000000000000LL;
  a1[2] = 0LL;
  a1[3] = 0xE000000000000000LL;
  UnknownStorage.init()(v8);
  return sub_1000CEDAC((uint64_t)v5, &qword_100295030);
}

uint64_t Goldilocks_ZoneID.init()@<X0>(void *a1@<X8>)
{
  *a1 = 0LL;
  a1[1] = 0xE000000000000000LL;
  a1[2] = 0LL;
  a1[3] = 0xE000000000000000LL;
  uint64_t v1 = type metadata accessor for Goldilocks_ZoneID(0LL);
  return UnknownStorage.init()(v1);
}

void (*Goldilocks_InitiateExitRequest.sharedZoneID.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_1000BED3C(&qword_100295030);
  unint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[1] = v5;
  uint64_t v6 = type metadata accessor for Goldilocks_ZoneID(0LL);
  v3[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v3[3] = v7;
  size_t v8 = *(void *)(v7 + 64);
  v3[4] = malloc(v8);
  uint64_t v9 = malloc(v8);
  v3[5] = v9;
  uint64_t v10 = *(int *)(type metadata accessor for Goldilocks_InitiateExitRequest(0LL) + 52);
  *((_DWORD *)v3 + 12) = v10;
  sub_1000CE7B4(v1 + v10, (uint64_t)v5, &qword_100295030);
  uint64_t v11 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1LL, v6);
  if ((_DWORD)v11 == 1)
  {
    *uint64_t v9 = 0LL;
    v9[1] = 0xE000000000000000LL;
    v9[2] = 0LL;
    v9[3] = 0xE000000000000000LL;
    UnknownStorage.init()(v11);
    sub_1000CEDAC((uint64_t)v5, &qword_100295030);
  }

  else
  {
    sub_1000CEC9C((uint64_t)v5, (uint64_t)v9, type metadata accessor for Goldilocks_ZoneID);
  }

  return sub_1000F0DB4;
}

void sub_1000F0DB4(uint64_t a1, char a2)
{
}

BOOL Goldilocks_InitiateExitRequest.hasSharedZoneID.getter()
{
  uint64_t v1 = sub_1000BED3C(&qword_100295030);
  __chkstk_darwin(v1);
  uint64_t v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = type metadata accessor for Goldilocks_InitiateExitRequest(0LL);
  sub_1000CE7B4(v0 + *(int *)(v4 + 52), (uint64_t)v3, &qword_100295030);
  uint64_t v5 = type metadata accessor for Goldilocks_ZoneID(0LL);
  BOOL v6 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48LL))(v3, 1LL, v5) != 1;
  sub_1000CEDAC((uint64_t)v3, &qword_100295030);
  return v6;
}

Swift::Void __swiftcall Goldilocks_InitiateExitRequest.clearSharedZoneID()()
{
  uint64_t v1 = v0 + *(int *)(type metadata accessor for Goldilocks_InitiateExitRequest(0LL) + 52);
  sub_1000CEDAC(v1, &qword_100295030);
  uint64_t v2 = type metadata accessor for Goldilocks_ZoneID(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56LL))(v1, 1LL, 1LL, v2);
}

uint64_t Goldilocks_InitiateExitRequest.stopAtStage.getter()
{
  return *(void *)(v0 + 88);
}

uint64_t Goldilocks_InitiateExitRequest.stopAtStage.setter(uint64_t result, char a2)
{
  *(void *)(v2 + 88) = result;
  *(_BYTE *)(v2 + 96) = a2 & 1;
  return result;
}

uint64_t Goldilocks_InitiateExitRequest.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for Goldilocks_InitiateExitRequest(0LL) + 48);
  uint64_t v4 = type metadata accessor for UnknownStorage(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a1, v3, v4);
}

uint64_t Goldilocks_InitiateExitRequest.unknownFields.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for Goldilocks_InitiateExitRequest(0LL) + 48);
  uint64_t v4 = type metadata accessor for UnknownStorage(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40LL))(v3, a1, v4);
}

uint64_t (*Goldilocks_InitiateExitRequest.unknownFields.modify())(void, void)
{
  return Goldilocks_ExitType.rawValue.getter;
}

uint64_t Goldilocks_InitiateExitRequest.init()@<X0>(uint64_t a1@<X8>)
{
  *(void *)a1 = 0LL;
  *(void *)(a1 + 8) = 0xE000000000000000LL;
  *(void *)(a1 + 16) = 0LL;
  *(_BYTE *)(a1 + 24) = 1;
  *(void *)(a1 + 32) = 0LL;
  *(_BYTE *)(a1 + 40) = 1;
  *(void *)(a1 + 48) = &_swiftEmptyArrayStorage;
  *(void *)(a1 + 56) = &_swiftEmptyArrayStorage;
  *(void *)(a1 + 64) = 0LL;
  *(void *)(a1 + 72) = 0LL;
  *(_BYTE *)(a1 + 80) = 1;
  *(void *)(a1 + 88) = 0LL;
  *(_BYTE *)(a1 + 96) = 1;
  uint64_t v2 = type metadata accessor for Goldilocks_InitiateExitRequest(0LL);
  UnknownStorage.init()(v2);
  uint64_t v3 = a1 + *(int *)(v2 + 52);
  uint64_t v4 = type metadata accessor for Goldilocks_ZoneID(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56LL))(v3, 1LL, 1LL, v4);
}

uint64_t Goldilocks_InitiateExitResponse.batchError.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000F2B5C(type metadata accessor for Goldilocks_InitiateExitResponse, a1);
}

uint64_t Goldilocks_ErrorInfo.ResultError.init()@<X0>(uint64_t a1@<X8>)
{
  *(void *)a1 = 0LL;
  *(void *)(a1 + 8) = 0xE000000000000000LL;
  *(void *)(a1 + 16) = 0LL;
  *(_BYTE *)(a1 + 24) = 1;
  *(void *)(a1 + 32) = 0LL;
  *(void *)(a1 + 40) = 0xE000000000000000LL;
  *(_DWORD *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = &_swiftEmptyArrayStorage;
  *(void *)(a1 + 64) = 0LL;
  *(void *)(a1 + 72) = 0xE000000000000000LL;
  *(void *)(a1 + 80) = 0LL;
  *(void *)(a1 + 88) = 0xE000000000000000LL;
  uint64_t v2 = type metadata accessor for Goldilocks_ErrorInfo.ResultError(0LL);
  UnknownStorage.init()(v2);
  uint64_t v3 = a1 + *(int *)(v2 + 48);
  uint64_t v4 = type metadata accessor for Goldilocks_ErrorInfo.DatabaseFailure(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56LL))(v3, 1LL, 1LL, v4);
}

uint64_t Goldilocks_InitiateExitResponse.batchError.setter(uint64_t a1)
{
  return sub_1000F3948( a1,  type metadata accessor for Goldilocks_InitiateExitResponse,  &qword_100293C98,  type metadata accessor for Goldilocks_ErrorInfo.ResultError);
}

void (*Goldilocks_InitiateExitResponse.batchError.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_1000BED3C(&qword_100293C98);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[1] = v5;
  uint64_t v6 = type metadata accessor for Goldilocks_ErrorInfo.ResultError(0LL);
  v3[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v3[3] = v7;
  size_t v8 = *(void *)(v7 + 64);
  v3[4] = malloc(v8);
  uint64_t v9 = malloc(v8);
  v3[5] = v9;
  uint64_t v10 = *(int *)(type metadata accessor for Goldilocks_InitiateExitResponse(0LL) + 28);
  *((_DWORD *)v3 + 12) = v10;
  sub_1000CE7B4(v1 + v10, (uint64_t)v5, &qword_100293C98);
  uint64_t v11 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1LL, v6);
  if ((_DWORD)v11 == 1)
  {
    *uint64_t v9 = 0LL;
    v9[1] = 0xE000000000000000LL;
    v9[2] = 0LL;
    *((_BYTE *)v9 + 24) = 1;
    v9[4] = 0LL;
    v9[5] = 0xE000000000000000LL;
    *((_DWORD *)v9 + 12) = 0;
    v9[7] = &_swiftEmptyArrayStorage;
    v9[8] = 0LL;
    v9[9] = 0xE000000000000000LL;
    v9[10] = 0LL;
    v9[11] = 0xE000000000000000LL;
    UnknownStorage.init()(v11);
    uint64_t v12 = (char *)v9 + *(int *)(v6 + 48);
    uint64_t v13 = type metadata accessor for Goldilocks_ErrorInfo.DatabaseFailure(0LL);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56LL))(v12, 1LL, 1LL, v13);
    sub_1000CEDAC((uint64_t)v5, &qword_100293C98);
  }

  else
  {
    sub_1000CEC9C((uint64_t)v5, (uint64_t)v9, type metadata accessor for Goldilocks_ErrorInfo.ResultError);
  }

  return sub_1000F126C;
}

void sub_1000F126C(uint64_t a1, char a2)
{
}

BOOL Goldilocks_InitiateExitResponse.hasBatchError.getter()
{
  return sub_1000F18B0( &qword_100293C98,  type metadata accessor for Goldilocks_InitiateExitResponse,  type metadata accessor for Goldilocks_ErrorInfo.ResultError);
}

Swift::Void __swiftcall Goldilocks_InitiateExitResponse.clearBatchError()()
{
}

uint64_t Goldilocks_InitiateExitResponse.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000CFC8C(type metadata accessor for Goldilocks_InitiateExitResponse, a1);
}

uint64_t Goldilocks_InitiateExitResponse.unknownFields.setter(uint64_t a1)
{
  return sub_1000CFCE4(a1, type metadata accessor for Goldilocks_InitiateExitResponse);
}

uint64_t (*Goldilocks_InitiateExitResponse.unknownFields.modify())(void, void)
{
  return Goldilocks_ExitType.rawValue.getter;
}

uint64_t Goldilocks_InitiateExitResponse.init()@<X0>(void *a1@<X8>)
{
  return sub_1000F1C8C( type metadata accessor for Goldilocks_InitiateExitResponse,  type metadata accessor for Goldilocks_ErrorInfo.ResultError,  a1);
}

uint64_t Goldilocks_ParticipantExitResult.resultError.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_1000BED3C(&qword_100293C98);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for Goldilocks_ParticipantExitResult(0LL);
  sub_1000CE7B4(v1 + *(int *)(v6 + 24), (uint64_t)v5, &qword_100293C98);
  uint64_t v7 = type metadata accessor for Goldilocks_ErrorInfo.ResultError(0LL);
  uint64_t v8 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48LL))(v5, 1LL, v7);
  if ((_DWORD)v8 != 1) {
    return sub_1000CEC9C((uint64_t)v5, a1, type metadata accessor for Goldilocks_ErrorInfo.ResultError);
  }
  *(void *)a1 = 0LL;
  *(void *)(a1 + 8) = 0xE000000000000000LL;
  *(void *)(a1 + 16) = 0LL;
  *(_BYTE *)(a1 + 24) = 1;
  *(void *)(a1 + 32) = 0LL;
  *(void *)(a1 + 40) = 0xE000000000000000LL;
  *(_DWORD *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = &_swiftEmptyArrayStorage;
  *(void *)(a1 + 64) = 0LL;
  *(void *)(a1 + 72) = 0xE000000000000000LL;
  *(void *)(a1 + 80) = 0LL;
  *(void *)(a1 + 88) = 0xE000000000000000LL;
  UnknownStorage.init()(v8);
  uint64_t v9 = a1 + *(int *)(v7 + 48);
  uint64_t v10 = type metadata accessor for Goldilocks_ErrorInfo.DatabaseFailure(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56LL))(v9, 1LL, 1LL, v10);
  return sub_1000CEDAC((uint64_t)v5, &qword_100293C98);
}

uint64_t Goldilocks_ParticipantExitResult.resultError.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for Goldilocks_ParticipantExitResult(0LL) + 24);
  sub_1000CEDAC(v3, &qword_100293C98);
  sub_1000CEC9C(a1, v3, type metadata accessor for Goldilocks_ErrorInfo.ResultError);
  uint64_t v4 = type metadata accessor for Goldilocks_ErrorInfo.ResultError(0LL);
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56LL))(v3, 0LL, 1LL, v4);
}

void (*Goldilocks_ParticipantExitResult.resultError.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_1000BED3C(&qword_100293C98);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[1] = v5;
  uint64_t v6 = type metadata accessor for Goldilocks_ErrorInfo.ResultError(0LL);
  v3[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v3[3] = v7;
  size_t v8 = *(void *)(v7 + 64);
  v3[4] = malloc(v8);
  uint64_t v9 = malloc(v8);
  v3[5] = v9;
  uint64_t v10 = *(int *)(type metadata accessor for Goldilocks_ParticipantExitResult(0LL) + 24);
  *((_DWORD *)v3 + 12) = v10;
  sub_1000CE7B4(v1 + v10, (uint64_t)v5, &qword_100293C98);
  uint64_t v11 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1LL, v6);
  if ((_DWORD)v11 == 1)
  {
    *uint64_t v9 = 0LL;
    v9[1] = 0xE000000000000000LL;
    v9[2] = 0LL;
    *((_BYTE *)v9 + 24) = 1;
    v9[4] = 0LL;
    v9[5] = 0xE000000000000000LL;
    *((_DWORD *)v9 + 12) = 0;
    v9[7] = &_swiftEmptyArrayStorage;
    v9[8] = 0LL;
    v9[9] = 0xE000000000000000LL;
    v9[10] = 0LL;
    v9[11] = 0xE000000000000000LL;
    UnknownStorage.init()(v11);
    uint64_t v12 = (char *)v9 + *(int *)(v6 + 48);
    uint64_t v13 = type metadata accessor for Goldilocks_ErrorInfo.DatabaseFailure(0LL);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56LL))(v12, 1LL, 1LL, v13);
    sub_1000CEDAC((uint64_t)v5, &qword_100293C98);
  }

  else
  {
    sub_1000CEC9C((uint64_t)v5, (uint64_t)v9, type metadata accessor for Goldilocks_ErrorInfo.ResultError);
  }

  return sub_1000F126C;
}

BOOL Goldilocks_ParticipantExitResult.hasResultError.getter()
{
  uint64_t v1 = sub_1000BED3C(&qword_100293C98);
  __chkstk_darwin(v1);
  uint64_t v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = type metadata accessor for Goldilocks_ParticipantExitResult(0LL);
  sub_1000CE7B4(v0 + *(int *)(v4 + 24), (uint64_t)v3, &qword_100293C98);
  uint64_t v5 = type metadata accessor for Goldilocks_ErrorInfo.ResultError(0LL);
  BOOL v6 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48LL))(v3, 1LL, v5) != 1;
  sub_1000CEDAC((uint64_t)v3, &qword_100293C98);
  return v6;
}

Swift::Void __swiftcall Goldilocks_ParticipantExitResult.clearResultError()()
{
  uint64_t v1 = v0 + *(int *)(type metadata accessor for Goldilocks_ParticipantExitResult(0LL) + 24);
  sub_1000CEDAC(v1, &qword_100293C98);
  uint64_t v2 = type metadata accessor for Goldilocks_ErrorInfo.ResultError(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56LL))(v1, 1LL, 1LL, v2);
}

uint64_t Goldilocks_ParticipantExitResult.exitZoneID.getter@<X0>(void *a1@<X8>)
{
  return sub_1000F4A0C(type metadata accessor for Goldilocks_ParticipantExitResult, a1);
}

uint64_t Goldilocks_ParticipantExitResult.exitZoneID.setter(uint64_t a1)
{
  return sub_1000F3948( a1,  type metadata accessor for Goldilocks_ParticipantExitResult,  &qword_100295030,  type metadata accessor for Goldilocks_ZoneID);
}

void (*Goldilocks_ParticipantExitResult.exitZoneID.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_1000BED3C(&qword_100295030);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[1] = v5;
  uint64_t v6 = type metadata accessor for Goldilocks_ZoneID(0LL);
  v3[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v3[3] = v7;
  size_t v8 = *(void *)(v7 + 64);
  v3[4] = malloc(v8);
  uint64_t v9 = malloc(v8);
  v3[5] = v9;
  uint64_t v10 = *(int *)(type metadata accessor for Goldilocks_ParticipantExitResult(0LL) + 28);
  *((_DWORD *)v3 + 12) = v10;
  sub_1000CE7B4(v1 + v10, (uint64_t)v5, &qword_100295030);
  uint64_t v11 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1LL, v6);
  if ((_DWORD)v11 == 1)
  {
    *uint64_t v9 = 0LL;
    v9[1] = 0xE000000000000000LL;
    v9[2] = 0LL;
    v9[3] = 0xE000000000000000LL;
    UnknownStorage.init()(v11);
    sub_1000CEDAC((uint64_t)v5, &qword_100295030);
  }

  else
  {
    sub_1000CEC9C((uint64_t)v5, (uint64_t)v9, type metadata accessor for Goldilocks_ZoneID);
  }

  return sub_1000F0DB4;
}

BOOL Goldilocks_ParticipantExitResult.hasExitZoneID.getter()
{
  return sub_1000F18B0( &qword_100295030,  type metadata accessor for Goldilocks_ParticipantExitResult,  type metadata accessor for Goldilocks_ZoneID);
}

BOOL sub_1000F18B0(uint64_t *a1, uint64_t (*a2)(void), uint64_t (*a3)(void))
{
  uint64_t v7 = sub_1000BED3C(a1);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = a2(0LL);
  sub_1000CE7B4(v3 + *(int *)(v10 + 28), (uint64_t)v9, a1);
  uint64_t v11 = a3(0LL);
  BOOL v12 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v11 - 8) + 48LL))(v9, 1LL, v11) != 1;
  sub_1000CEDAC((uint64_t)v9, a1);
  return v12;
}

Swift::Void __swiftcall Goldilocks_ParticipantExitResult.clearExitZoneID()()
{
}

uint64_t sub_1000F1988(uint64_t (*a1)(void), uint64_t *a2, uint64_t (*a3)(void))
{
  uint64_t v6 = v3 + *(int *)(a1(0LL) + 28);
  sub_1000CEDAC(v6, a2);
  uint64_t v7 = a3(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL))(v6, 1LL, 1LL, v7);
}

uint64_t Goldilocks_ParticipantExitResult.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000B8C4C(type metadata accessor for Goldilocks_ParticipantExitResult, a1);
}

uint64_t Goldilocks_ParticipantExitResult.unknownFields.setter(uint64_t a1)
{
  return sub_1000B8CA4(a1, type metadata accessor for Goldilocks_ParticipantExitResult);
}

uint64_t (*Goldilocks_ParticipantExitResult.unknownFields.modify())(void, void)
{
  return Goldilocks_ExitType.rawValue.getter;
}

uint64_t Goldilocks_ParticipantExitResult.init()@<X0>(void *a1@<X8>)
{
  *a1 = 0LL;
  a1[1] = 0xE000000000000000LL;
  uint64_t v2 = type metadata accessor for Goldilocks_ParticipantExitResult(0LL);
  UnknownStorage.init()(v2);
  uint64_t v3 = (char *)a1 + *(int *)(v2 + 24);
  uint64_t v4 = type metadata accessor for Goldilocks_ErrorInfo.ResultError(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56LL))(v3, 1LL, 1LL, v4);
  uint64_t v5 = (char *)a1 + *(int *)(v2 + 28);
  uint64_t v6 = type metadata accessor for Goldilocks_ZoneID(0LL);
  return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56LL))(v5, 1LL, 1LL, v6);
}

uint64_t Goldilocks_CheckDuplicatesRequest.zoneID.getter@<X0>(void *a1@<X8>)
{
  return sub_1000F4A0C(type metadata accessor for Goldilocks_CheckDuplicatesRequest, a1);
}

void (*Goldilocks_CheckDuplicatesRequest.zoneID.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_1000BED3C(&qword_100295030);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[1] = v5;
  uint64_t v6 = type metadata accessor for Goldilocks_ZoneID(0LL);
  v3[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v3[3] = v7;
  size_t v8 = *(void *)(v7 + 64);
  v3[4] = malloc(v8);
  uint64_t v9 = malloc(v8);
  v3[5] = v9;
  uint64_t v10 = *(int *)(type metadata accessor for Goldilocks_CheckDuplicatesRequest(0LL) + 28);
  *((_DWORD *)v3 + 12) = v10;
  sub_1000CE7B4(v1 + v10, (uint64_t)v5, &qword_100295030);
  uint64_t v11 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1LL, v6);
  if ((_DWORD)v11 == 1)
  {
    *uint64_t v9 = 0LL;
    v9[1] = 0xE000000000000000LL;
    v9[2] = 0LL;
    v9[3] = 0xE000000000000000LL;
    UnknownStorage.init()(v11);
    sub_1000CEDAC((uint64_t)v5, &qword_100295030);
  }

  else
  {
    sub_1000CEC9C((uint64_t)v5, (uint64_t)v9, type metadata accessor for Goldilocks_ZoneID);
  }

  return sub_1000F0DB4;
}

BOOL Goldilocks_CheckDuplicatesRequest.hasZoneID.getter()
{
  return sub_1000F18B0( &qword_100295030,  type metadata accessor for Goldilocks_CheckDuplicatesRequest,  type metadata accessor for Goldilocks_ZoneID);
}

Swift::Void __swiftcall Goldilocks_CheckDuplicatesRequest.clearZoneID()()
{
}

uint64_t Goldilocks_CheckDuplicatesRequest.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000CFC8C(type metadata accessor for Goldilocks_CheckDuplicatesRequest, a1);
}

uint64_t Goldilocks_CheckDuplicatesRequest.unknownFields.setter(uint64_t a1)
{
  return sub_1000CFCE4(a1, type metadata accessor for Goldilocks_CheckDuplicatesRequest);
}

uint64_t (*Goldilocks_CheckDuplicatesRequest.unknownFields.modify())(void, void)
{
  return Goldilocks_ExitType.rawValue.getter;
}

uint64_t Goldilocks_CheckDuplicatesRequest.init()@<X0>(void *a1@<X8>)
{
  return sub_1000F1C8C( type metadata accessor for Goldilocks_CheckDuplicatesRequest,  type metadata accessor for Goldilocks_ZoneID,  a1);
}

uint64_t sub_1000F1C8C@<X0>( uint64_t (*a1)(void)@<X0>, uint64_t (*a2)(void)@<X1>, void *a3@<X8>)
{
  *a3 = 0LL;
  a3[1] = 0xE000000000000000LL;
  a3[2] = &_swiftEmptyArrayStorage;
  uint64_t v5 = a1(0LL);
  UnknownStorage.init()();
  uint64_t v6 = (char *)a3 + *(int *)(v5 + 28);
  uint64_t v7 = a2(0LL);
  return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL))(v6, 1LL, 1LL, v7);
}

uint64_t Goldilocks_CheckDuplicatesResponse.batchError.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000F2B5C(type metadata accessor for Goldilocks_CheckDuplicatesResponse, a1);
}

uint64_t Goldilocks_CheckDuplicatesResponse.batchError.setter(uint64_t a1)
{
  return sub_1000F3948( a1,  type metadata accessor for Goldilocks_CheckDuplicatesResponse,  &qword_100293C98,  type metadata accessor for Goldilocks_ErrorInfo.ResultError);
}

void (*Goldilocks_CheckDuplicatesResponse.batchError.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_1000BED3C(&qword_100293C98);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[1] = v5;
  uint64_t v6 = type metadata accessor for Goldilocks_ErrorInfo.ResultError(0LL);
  v3[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v3[3] = v7;
  size_t v8 = *(void *)(v7 + 64);
  v3[4] = malloc(v8);
  uint64_t v9 = malloc(v8);
  v3[5] = v9;
  uint64_t v10 = *(int *)(type metadata accessor for Goldilocks_CheckDuplicatesResponse(0LL) + 28);
  *((_DWORD *)v3 + 12) = v10;
  sub_1000CE7B4(v1 + v10, (uint64_t)v5, &qword_100293C98);
  uint64_t v11 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1LL, v6);
  if ((_DWORD)v11 == 1)
  {
    *uint64_t v9 = 0LL;
    v9[1] = 0xE000000000000000LL;
    v9[2] = 0LL;
    *((_BYTE *)v9 + 24) = 1;
    v9[4] = 0LL;
    v9[5] = 0xE000000000000000LL;
    *((_DWORD *)v9 + 12) = 0;
    v9[7] = &_swiftEmptyArrayStorage;
    v9[8] = 0LL;
    v9[9] = 0xE000000000000000LL;
    v9[10] = 0LL;
    v9[11] = 0xE000000000000000LL;
    UnknownStorage.init()(v11);
    BOOL v12 = (char *)v9 + *(int *)(v6 + 48);
    uint64_t v13 = type metadata accessor for Goldilocks_ErrorInfo.DatabaseFailure(0LL);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56LL))(v12, 1LL, 1LL, v13);
    sub_1000CEDAC((uint64_t)v5, &qword_100293C98);
  }

  else
  {
    sub_1000CEC9C((uint64_t)v5, (uint64_t)v9, type metadata accessor for Goldilocks_ErrorInfo.ResultError);
  }

  return sub_1000F126C;
}

BOOL Goldilocks_CheckDuplicatesResponse.hasBatchError.getter()
{
  return sub_1000F18B0( &qword_100293C98,  type metadata accessor for Goldilocks_CheckDuplicatesResponse,  type metadata accessor for Goldilocks_ErrorInfo.ResultError);
}

Swift::Void __swiftcall Goldilocks_CheckDuplicatesResponse.clearBatchError()()
{
}

uint64_t Goldilocks_CheckDuplicatesResponse.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000CFC8C(type metadata accessor for Goldilocks_CheckDuplicatesResponse, a1);
}

uint64_t Goldilocks_CheckDuplicatesResponse.unknownFields.setter(uint64_t a1)
{
  return sub_1000CFCE4(a1, type metadata accessor for Goldilocks_CheckDuplicatesResponse);
}

uint64_t (*Goldilocks_CheckDuplicatesResponse.unknownFields.modify())(void, void)
{
  return Goldilocks_ExitType.rawValue.getter;
}

uint64_t Goldilocks_CheckDuplicatesResponse.init()@<X0>(void *a1@<X8>)
{
  return sub_1000F1C8C( type metadata accessor for Goldilocks_CheckDuplicatesResponse,  type metadata accessor for Goldilocks_ErrorInfo.ResultError,  a1);
}

uint64_t Goldilocks_DuplicateState.resultError.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000F2B5C(type metadata accessor for Goldilocks_DuplicateState, a1);
}

uint64_t Goldilocks_DuplicateState.resultError.setter(uint64_t a1)
{
  return sub_1000F3948( a1,  type metadata accessor for Goldilocks_DuplicateState,  &qword_100293C98,  type metadata accessor for Goldilocks_ErrorInfo.ResultError);
}

void (*Goldilocks_DuplicateState.resultError.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_1000BED3C(&qword_100293C98);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[1] = v5;
  uint64_t v6 = type metadata accessor for Goldilocks_ErrorInfo.ResultError(0LL);
  v3[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v3[3] = v7;
  size_t v8 = *(void *)(v7 + 64);
  v3[4] = malloc(v8);
  uint64_t v9 = malloc(v8);
  v3[5] = v9;
  uint64_t v10 = *(int *)(type metadata accessor for Goldilocks_DuplicateState(0LL) + 28);
  *((_DWORD *)v3 + 12) = v10;
  sub_1000CE7B4(v1 + v10, (uint64_t)v5, &qword_100293C98);
  uint64_t v11 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1LL, v6);
  if ((_DWORD)v11 == 1)
  {
    *uint64_t v9 = 0LL;
    v9[1] = 0xE000000000000000LL;
    v9[2] = 0LL;
    *((_BYTE *)v9 + 24) = 1;
    v9[4] = 0LL;
    v9[5] = 0xE000000000000000LL;
    *((_DWORD *)v9 + 12) = 0;
    v9[7] = &_swiftEmptyArrayStorage;
    v9[8] = 0LL;
    v9[9] = 0xE000000000000000LL;
    v9[10] = 0LL;
    v9[11] = 0xE000000000000000LL;
    UnknownStorage.init()(v11);
    BOOL v12 = (char *)v9 + *(int *)(v6 + 48);
    uint64_t v13 = type metadata accessor for Goldilocks_ErrorInfo.DatabaseFailure(0LL);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56LL))(v12, 1LL, 1LL, v13);
    sub_1000CEDAC((uint64_t)v5, &qword_100293C98);
  }

  else
  {
    sub_1000CEC9C((uint64_t)v5, (uint64_t)v9, type metadata accessor for Goldilocks_ErrorInfo.ResultError);
  }

  return sub_1000F126C;
}

BOOL Goldilocks_DuplicateState.hasResultError.getter()
{
  return sub_1000F18B0( &qword_100293C98,  type metadata accessor for Goldilocks_DuplicateState,  type metadata accessor for Goldilocks_ErrorInfo.ResultError);
}

Swift::Void __swiftcall Goldilocks_DuplicateState.clearResultError()()
{
}

uint64_t Goldilocks_DuplicateState.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000CFC8C(type metadata accessor for Goldilocks_DuplicateState, a1);
}

uint64_t Goldilocks_DuplicateState.unknownFields.setter(uint64_t a1)
{
  return sub_1000CFCE4(a1, type metadata accessor for Goldilocks_DuplicateState);
}

uint64_t (*Goldilocks_DuplicateState.unknownFields.modify())(void, void)
{
  return Goldilocks_ExitType.rawValue.getter;
}

uint64_t Goldilocks_DuplicateState.init()@<X0>(void *a1@<X8>)
{
  return sub_1000F1C8C( type metadata accessor for Goldilocks_DuplicateState,  type metadata accessor for Goldilocks_ErrorInfo.ResultError,  a1);
}

uint64_t Goldilocks_FoundDuplicate.duplicateZoneID.getter@<X0>(void *a1@<X8>)
{
  return sub_1000F4A0C(type metadata accessor for Goldilocks_FoundDuplicate, a1);
}

uint64_t Goldilocks_FoundDuplicate.duplicateZoneID.setter(uint64_t a1)
{
  return sub_1000F3948( a1,  type metadata accessor for Goldilocks_FoundDuplicate,  &qword_100295030,  type metadata accessor for Goldilocks_ZoneID);
}

void (*Goldilocks_FoundDuplicate.duplicateZoneID.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_1000BED3C(&qword_100295030);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[1] = v5;
  uint64_t v6 = type metadata accessor for Goldilocks_ZoneID(0LL);
  v3[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v3[3] = v7;
  size_t v8 = *(void *)(v7 + 64);
  v3[4] = malloc(v8);
  uint64_t v9 = malloc(v8);
  v3[5] = v9;
  uint64_t v10 = *(int *)(type metadata accessor for Goldilocks_FoundDuplicate(0LL) + 28);
  *((_DWORD *)v3 + 12) = v10;
  sub_1000CE7B4(v1 + v10, (uint64_t)v5, &qword_100295030);
  uint64_t v11 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1LL, v6);
  if ((_DWORD)v11 == 1)
  {
    *uint64_t v9 = 0LL;
    v9[1] = 0xE000000000000000LL;
    v9[2] = 0LL;
    v9[3] = 0xE000000000000000LL;
    UnknownStorage.init()(v11);
    sub_1000CEDAC((uint64_t)v5, &qword_100295030);
  }

  else
  {
    sub_1000CEC9C((uint64_t)v5, (uint64_t)v9, type metadata accessor for Goldilocks_ZoneID);
  }

  return sub_1000F0DB4;
}

BOOL Goldilocks_FoundDuplicate.hasDuplicateZoneID.getter()
{
  return sub_1000F18B0( &qword_100295030,  type metadata accessor for Goldilocks_FoundDuplicate,  type metadata accessor for Goldilocks_ZoneID);
}

Swift::Void __swiftcall Goldilocks_FoundDuplicate.clearDuplicateZoneID()()
{
}

uint64_t Goldilocks_FoundDuplicate.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000CFC8C(type metadata accessor for Goldilocks_FoundDuplicate, a1);
}

uint64_t Goldilocks_FoundDuplicate.unknownFields.setter(uint64_t a1)
{
  return sub_1000CFCE4(a1, type metadata accessor for Goldilocks_FoundDuplicate);
}

uint64_t (*Goldilocks_FoundDuplicate.unknownFields.modify())(void, void)
{
  return Goldilocks_ExitType.rawValue.getter;
}

uint64_t Goldilocks_FoundDuplicate.init()@<X0>(uint64_t a1@<X8>)
{
  return sub_1000F4DA0(type metadata accessor for Goldilocks_FoundDuplicate, a1);
}

uint64_t Goldilocks_ZoneID.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000CFC8C(type metadata accessor for Goldilocks_ZoneID, a1);
}

uint64_t Goldilocks_ZoneID.unknownFields.setter(uint64_t a1)
{
  return sub_1000CFCE4(a1, type metadata accessor for Goldilocks_ZoneID);
}

uint64_t (*Goldilocks_ZoneID.unknownFields.modify())(void, void)
{
  return Goldilocks_ExitType.rawValue.getter;
}

uint64_t Goldilocks_ExitMoveBatchRequest.zoneID.getter@<X0>(void *a1@<X8>)
{
  return sub_1000F4A0C(type metadata accessor for Goldilocks_ExitMoveBatchRequest, a1);
}

void (*Goldilocks_ExitMoveBatchRequest.zoneID.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_1000BED3C(&qword_100295030);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[1] = v5;
  uint64_t v6 = type metadata accessor for Goldilocks_ZoneID(0LL);
  v3[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v3[3] = v7;
  size_t v8 = *(void *)(v7 + 64);
  v3[4] = malloc(v8);
  uint64_t v9 = malloc(v8);
  v3[5] = v9;
  uint64_t v10 = *(int *)(type metadata accessor for Goldilocks_ExitMoveBatchRequest(0LL) + 28);
  *((_DWORD *)v3 + 12) = v10;
  sub_1000CE7B4(v1 + v10, (uint64_t)v5, &qword_100295030);
  uint64_t v11 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1LL, v6);
  if ((_DWORD)v11 == 1)
  {
    *uint64_t v9 = 0LL;
    v9[1] = 0xE000000000000000LL;
    v9[2] = 0LL;
    v9[3] = 0xE000000000000000LL;
    UnknownStorage.init()(v11);
    sub_1000CEDAC((uint64_t)v5, &qword_100295030);
  }

  else
  {
    sub_1000CEC9C((uint64_t)v5, (uint64_t)v9, type metadata accessor for Goldilocks_ZoneID);
  }

  return sub_1000F0DB4;
}

BOOL Goldilocks_ExitMoveBatchRequest.hasZoneID.getter()
{
  return sub_1000F18B0( &qword_100295030,  type metadata accessor for Goldilocks_ExitMoveBatchRequest,  type metadata accessor for Goldilocks_ZoneID);
}

Swift::Void __swiftcall Goldilocks_ExitMoveBatchRequest.clearZoneID()()
{
}

uint64_t Goldilocks_ExitMoveBatchRequest.batchSize.getter()
{
  return *(unsigned int *)(v0 + 16);
}

uint64_t Goldilocks_ExitMoveBatchRequest.batchSize.setter(uint64_t result)
{
  *(_DWORD *)(v1 + 16) = result;
  return result;
}

uint64_t Goldilocks_ExitMoveBatchRequest.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000CFC8C(type metadata accessor for Goldilocks_ExitMoveBatchRequest, a1);
}

uint64_t Goldilocks_ExitMoveBatchRequest.unknownFields.setter(uint64_t a1)
{
  return sub_1000CFCE4(a1, type metadata accessor for Goldilocks_ExitMoveBatchRequest);
}

uint64_t (*Goldilocks_ExitMoveBatchRequest.unknownFields.modify())(void, void)
{
  return Goldilocks_ExitType.rawValue.getter;
}

uint64_t Goldilocks_ExitMoveBatchRequest.init()@<X0>(uint64_t a1@<X8>)
{
  *(void *)a1 = 0LL;
  *(void *)(a1 + 8) = 0xE000000000000000LL;
  *(_DWORD *)(a1 + 16) = 0;
  uint64_t v2 = type metadata accessor for Goldilocks_ExitMoveBatchRequest(0LL);
  UnknownStorage.init()(v2);
  uint64_t v3 = a1 + *(int *)(v2 + 28);
  uint64_t v4 = type metadata accessor for Goldilocks_ZoneID(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56LL))(v3, 1LL, 1LL, v4);
}

uint64_t Goldilocks_ExitMoveBatchResponse.resultError.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_1000BED3C(&qword_100293C98);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for Goldilocks_ExitMoveBatchResponse(0LL);
  sub_1000CE7B4(v1 + *(int *)(v6 + 40), (uint64_t)v5, &qword_100293C98);
  uint64_t v7 = type metadata accessor for Goldilocks_ErrorInfo.ResultError(0LL);
  uint64_t v8 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48LL))(v5, 1LL, v7);
  if ((_DWORD)v8 != 1) {
    return sub_1000CEC9C((uint64_t)v5, a1, type metadata accessor for Goldilocks_ErrorInfo.ResultError);
  }
  *(void *)a1 = 0LL;
  *(void *)(a1 + 8) = 0xE000000000000000LL;
  *(void *)(a1 + 16) = 0LL;
  *(_BYTE *)(a1 + 24) = 1;
  *(void *)(a1 + 32) = 0LL;
  *(void *)(a1 + 40) = 0xE000000000000000LL;
  *(_DWORD *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = &_swiftEmptyArrayStorage;
  *(void *)(a1 + 64) = 0LL;
  *(void *)(a1 + 72) = 0xE000000000000000LL;
  *(void *)(a1 + 80) = 0LL;
  *(void *)(a1 + 88) = 0xE000000000000000LL;
  UnknownStorage.init()(v8);
  uint64_t v9 = a1 + *(int *)(v7 + 48);
  uint64_t v10 = type metadata accessor for Goldilocks_ErrorInfo.DatabaseFailure(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56LL))(v9, 1LL, 1LL, v10);
  return sub_1000CEDAC((uint64_t)v5, &qword_100293C98);
}

uint64_t Goldilocks_ExitMoveBatchResponse.resultError.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for Goldilocks_ExitMoveBatchResponse(0LL) + 40);
  sub_1000CEDAC(v3, &qword_100293C98);
  sub_1000CEC9C(a1, v3, type metadata accessor for Goldilocks_ErrorInfo.ResultError);
  uint64_t v4 = type metadata accessor for Goldilocks_ErrorInfo.ResultError(0LL);
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56LL))(v3, 0LL, 1LL, v4);
}

void (*Goldilocks_ExitMoveBatchResponse.resultError.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_1000BED3C(&qword_100293C98);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[1] = v5;
  uint64_t v6 = type metadata accessor for Goldilocks_ErrorInfo.ResultError(0LL);
  v3[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v3[3] = v7;
  size_t v8 = *(void *)(v7 + 64);
  v3[4] = malloc(v8);
  uint64_t v9 = malloc(v8);
  v3[5] = v9;
  uint64_t v10 = *(int *)(type metadata accessor for Goldilocks_ExitMoveBatchResponse(0LL) + 40);
  *((_DWORD *)v3 + 12) = v10;
  sub_1000CE7B4(v1 + v10, (uint64_t)v5, &qword_100293C98);
  uint64_t v11 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1LL, v6);
  if ((_DWORD)v11 == 1)
  {
    *uint64_t v9 = 0LL;
    v9[1] = 0xE000000000000000LL;
    v9[2] = 0LL;
    *((_BYTE *)v9 + 24) = 1;
    v9[4] = 0LL;
    v9[5] = 0xE000000000000000LL;
    *((_DWORD *)v9 + 12) = 0;
    v9[7] = &_swiftEmptyArrayStorage;
    v9[8] = 0LL;
    v9[9] = 0xE000000000000000LL;
    v9[10] = 0LL;
    v9[11] = 0xE000000000000000LL;
    UnknownStorage.init()(v11);
    uint64_t v12 = (char *)v9 + *(int *)(v6 + 48);
    uint64_t v13 = type metadata accessor for Goldilocks_ErrorInfo.DatabaseFailure(0LL);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56LL))(v12, 1LL, 1LL, v13);
    sub_1000CEDAC((uint64_t)v5, &qword_100293C98);
  }

  else
  {
    sub_1000CEC9C((uint64_t)v5, (uint64_t)v9, type metadata accessor for Goldilocks_ErrorInfo.ResultError);
  }

  return sub_1000F126C;
}

BOOL Goldilocks_ExitMoveBatchResponse.hasResultError.getter()
{
  uint64_t v1 = sub_1000BED3C(&qword_100293C98);
  __chkstk_darwin(v1);
  uint64_t v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = type metadata accessor for Goldilocks_ExitMoveBatchResponse(0LL);
  sub_1000CE7B4(v0 + *(int *)(v4 + 40), (uint64_t)v3, &qword_100293C98);
  uint64_t v5 = type metadata accessor for Goldilocks_ErrorInfo.ResultError(0LL);
  BOOL v6 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48LL))(v3, 1LL, v5) != 1;
  sub_1000CEDAC((uint64_t)v3, &qword_100293C98);
  return v6;
}

Swift::Void __swiftcall Goldilocks_ExitMoveBatchResponse.clearResultError()()
{
  uint64_t v1 = v0 + *(int *)(type metadata accessor for Goldilocks_ExitMoveBatchResponse(0LL) + 40);
  sub_1000CEDAC(v1, &qword_100293C98);
  uint64_t v2 = type metadata accessor for Goldilocks_ErrorInfo.ResultError(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56LL))(v1, 1LL, 1LL, v2);
}

uint64_t Goldilocks_ExitMoveBatchResponse.retryAfterSec.getter()
{
  return *(void *)(v0 + 16);
}

uint64_t Goldilocks_ExitMoveBatchResponse.retryAfterSec.setter(uint64_t result)
{
  *(void *)(v1 + 16) = result;
  return result;
}

uint64_t Goldilocks_ExitMoveBatchResponse.recordIdsToMove.getter()
{
  return swift_bridgeObjectRetain(*(void *)(v0 + 40));
}

uint64_t Goldilocks_ExitMoveBatchResponse.recordIdsToMove.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease(*(void *)(v1 + 40));
  *(void *)(v1 + 40) = a1;
  return result;
}

uint64_t Goldilocks_ExitMoveBatchResponse.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for Goldilocks_ExitMoveBatchResponse(0LL) + 36);
  uint64_t v4 = type metadata accessor for UnknownStorage(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a1, v3, v4);
}

uint64_t Goldilocks_ExitMoveBatchResponse.unknownFields.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for Goldilocks_ExitMoveBatchResponse(0LL) + 36);
  uint64_t v4 = type metadata accessor for UnknownStorage(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40LL))(v3, a1, v4);
}

uint64_t (*Goldilocks_ExitMoveBatchResponse.unknownFields.modify())(void, void)
{
  return Goldilocks_ExitType.rawValue.getter;
}

uint64_t Goldilocks_ExitMoveBatchResponse.init()@<X0>(uint64_t a1@<X8>)
{
  *(void *)a1 = 0LL;
  *(void *)(a1 + 8) = 0xE000000000000000LL;
  *(void *)(a1 + 16) = 0LL;
  *(void *)(a1 + 24) = 0LL;
  *(void *)(a1 + 32) = 0xE000000000000000LL;
  *(void *)(a1 + 40) = &_swiftEmptyArrayStorage;
  *(_BYTE *)(a1 + 48) = 0;
  uint64_t v2 = type metadata accessor for Goldilocks_ExitMoveBatchResponse(0LL);
  UnknownStorage.init()(v2);
  uint64_t v3 = a1 + *(int *)(v2 + 40);
  uint64_t v4 = type metadata accessor for Goldilocks_ErrorInfo.ResultError(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56LL))(v3, 1LL, 1LL, v4);
}

uint64_t Goldilocks_ExitMoveBatchFeedbackItem.error.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000F2B5C(type metadata accessor for Goldilocks_ExitMoveBatchFeedbackItem, a1);
}

uint64_t sub_1000F2B5C@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = sub_1000BED3C(&qword_100293C98);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = a1(0LL);
  sub_1000CE7B4(v2 + *(int *)(v8 + 28), (uint64_t)v7, &qword_100293C98);
  uint64_t v9 = type metadata accessor for Goldilocks_ErrorInfo.ResultError(0LL);
  uint64_t v10 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48LL))(v7, 1LL, v9);
  if ((_DWORD)v10 != 1) {
    return sub_1000CEC9C((uint64_t)v7, a2, type metadata accessor for Goldilocks_ErrorInfo.ResultError);
  }
  *(void *)a2 = 0LL;
  *(void *)(a2 + 8) = 0xE000000000000000LL;
  *(void *)(a2 + 16) = 0LL;
  *(_BYTE *)(a2 + 24) = 1;
  *(void *)(a2 + 32) = 0LL;
  *(void *)(a2 + 40) = 0xE000000000000000LL;
  *(_DWORD *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = &_swiftEmptyArrayStorage;
  *(void *)(a2 + 64) = 0LL;
  *(void *)(a2 + 72) = 0xE000000000000000LL;
  *(void *)(a2 + 80) = 0LL;
  *(void *)(a2 + 88) = 0xE000000000000000LL;
  UnknownStorage.init()(v10);
  uint64_t v11 = a2 + *(int *)(v9 + 48);
  uint64_t v12 = type metadata accessor for Goldilocks_ErrorInfo.DatabaseFailure(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56LL))(v11, 1LL, 1LL, v12);
  return sub_1000CEDAC((uint64_t)v7, &qword_100293C98);
}

uint64_t Goldilocks_ExitMoveBatchFeedbackItem.error.setter(uint64_t a1)
{
  return sub_1000F3948( a1,  type metadata accessor for Goldilocks_ExitMoveBatchFeedbackItem,  &qword_100293C98,  type metadata accessor for Goldilocks_ErrorInfo.ResultError);
}

void (*Goldilocks_ExitMoveBatchFeedbackItem.error.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_1000BED3C(&qword_100293C98);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[1] = v5;
  uint64_t v6 = type metadata accessor for Goldilocks_ErrorInfo.ResultError(0LL);
  v3[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v3[3] = v7;
  size_t v8 = *(void *)(v7 + 64);
  v3[4] = malloc(v8);
  uint64_t v9 = malloc(v8);
  v3[5] = v9;
  uint64_t v10 = *(int *)(type metadata accessor for Goldilocks_ExitMoveBatchFeedbackItem(0LL) + 28);
  *((_DWORD *)v3 + 12) = v10;
  sub_1000CE7B4(v1 + v10, (uint64_t)v5, &qword_100293C98);
  uint64_t v11 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1LL, v6);
  if ((_DWORD)v11 == 1)
  {
    *uint64_t v9 = 0LL;
    v9[1] = 0xE000000000000000LL;
    v9[2] = 0LL;
    *((_BYTE *)v9 + 24) = 1;
    v9[4] = 0LL;
    v9[5] = 0xE000000000000000LL;
    *((_DWORD *)v9 + 12) = 0;
    v9[7] = &_swiftEmptyArrayStorage;
    v9[8] = 0LL;
    v9[9] = 0xE000000000000000LL;
    v9[10] = 0LL;
    v9[11] = 0xE000000000000000LL;
    UnknownStorage.init()(v11);
    uint64_t v12 = (char *)v9 + *(int *)(v6 + 48);
    uint64_t v13 = type metadata accessor for Goldilocks_ErrorInfo.DatabaseFailure(0LL);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56LL))(v12, 1LL, 1LL, v13);
    sub_1000CEDAC((uint64_t)v5, &qword_100293C98);
  }

  else
  {
    sub_1000CEC9C((uint64_t)v5, (uint64_t)v9, type metadata accessor for Goldilocks_ErrorInfo.ResultError);
  }

  return sub_1000F126C;
}

BOOL Goldilocks_ExitMoveBatchFeedbackItem.hasError.getter()
{
  return sub_1000F18B0( &qword_100293C98,  type metadata accessor for Goldilocks_ExitMoveBatchFeedbackItem,  type metadata accessor for Goldilocks_ErrorInfo.ResultError);
}

Swift::Void __swiftcall Goldilocks_ExitMoveBatchFeedbackItem.clearError()()
{
}

uint64_t Goldilocks_ExitMoveBatchFeedbackItem.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000CFC8C(type metadata accessor for Goldilocks_ExitMoveBatchFeedbackItem, a1);
}

uint64_t Goldilocks_ExitMoveBatchFeedbackItem.unknownFields.setter(uint64_t a1)
{
  return sub_1000CFCE4(a1, type metadata accessor for Goldilocks_ExitMoveBatchFeedbackItem);
}

uint64_t (*Goldilocks_ExitMoveBatchFeedbackItem.unknownFields.modify())(void, void)
{
  return Goldilocks_ExitType.rawValue.getter;
}

uint64_t Goldilocks_ExitMoveBatchFeedbackItem.init()@<X0>(void *a1@<X8>)
{
  *a1 = 0LL;
  a1[1] = 0xE000000000000000LL;
  a1[2] = 0LL;
  a1[3] = 0xE000000000000000LL;
  uint64_t v2 = type metadata accessor for Goldilocks_ExitMoveBatchFeedbackItem(0LL);
  UnknownStorage.init()(v2);
  uint64_t v3 = (char *)a1 + *(int *)(v2 + 28);
  uint64_t v4 = type metadata accessor for Goldilocks_ErrorInfo.ResultError(0LL);
  return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56LL))(v3, 1LL, 1LL, v4);
}

uint64_t Goldilocks_ExitMoveBatchErrorFeedbackRequest.exitZoneID.getter@<X0>(void *a1@<X8>)
{
  uint64_t v3 = sub_1000BED3C(&qword_100295030);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for Goldilocks_ExitMoveBatchErrorFeedbackRequest(0LL);
  sub_1000CE7B4(v1 + *(int *)(v6 + 32), (uint64_t)v5, &qword_100295030);
  uint64_t v7 = type metadata accessor for Goldilocks_ZoneID(0LL);
  uint64_t v8 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48LL))(v5, 1LL, v7);
  if ((_DWORD)v8 != 1) {
    return sub_1000CEC9C((uint64_t)v5, (uint64_t)a1, type metadata accessor for Goldilocks_ZoneID);
  }
  *a1 = 0LL;
  a1[1] = 0xE000000000000000LL;
  a1[2] = 0LL;
  a1[3] = 0xE000000000000000LL;
  UnknownStorage.init()(v8);
  return sub_1000CEDAC((uint64_t)v5, &qword_100295030);
}

void (*Goldilocks_ExitMoveBatchErrorFeedbackRequest.exitZoneID.modify( void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_1000BED3C(&qword_100295030);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[1] = v5;
  uint64_t v6 = type metadata accessor for Goldilocks_ZoneID(0LL);
  v3[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v3[3] = v7;
  size_t v8 = *(void *)(v7 + 64);
  v3[4] = malloc(v8);
  uint64_t v9 = malloc(v8);
  v3[5] = v9;
  uint64_t v10 = *(int *)(type metadata accessor for Goldilocks_ExitMoveBatchErrorFeedbackRequest(0LL) + 32);
  *((_DWORD *)v3 + 12) = v10;
  sub_1000CE7B4(v1 + v10, (uint64_t)v5, &qword_100295030);
  uint64_t v11 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1LL, v6);
  if ((_DWORD)v11 == 1)
  {
    *uint64_t v9 = 0LL;
    v9[1] = 0xE000000000000000LL;
    v9[2] = 0LL;
    v9[3] = 0xE000000000000000LL;
    UnknownStorage.init()(v11);
    sub_1000CEDAC((uint64_t)v5, &qword_100295030);
  }

  else
  {
    sub_1000CEC9C((uint64_t)v5, (uint64_t)v9, type metadata accessor for Goldilocks_ZoneID);
  }

  return sub_1000F0DB4;
}

BOOL Goldilocks_ExitMoveBatchErrorFeedbackRequest.hasExitZoneID.getter()
{
  return sub_1000F3EA8( &qword_100295030,  type metadata accessor for Goldilocks_ExitMoveBatchErrorFeedbackRequest,  type metadata accessor for Goldilocks_ZoneID);
}

Swift::Void __swiftcall Goldilocks_ExitMoveBatchErrorFeedbackRequest.clearExitZoneID()()
{
}

uint64_t Goldilocks_ExitMoveBatchErrorFeedbackRequest.moveBatchOperationID.getter()
{
  uint64_t v1 = *(void *)(v0 + 8);
  swift_bridgeObjectRetain(*(void *)(v0 + 16));
  return v1;
}

uint64_t Goldilocks_ExitMoveBatchErrorFeedbackRequest.moveBatchOperationID.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease(*(void *)(v2 + 16));
  *(void *)(v2 + 8) = a1;
  *(void *)(v2 + 16) = a2;
  return result;
}

uint64_t Goldilocks_ExitMoveBatchErrorFeedbackRequest.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for Goldilocks_ExitMoveBatchErrorFeedbackRequest(0LL) + 28);
  uint64_t v4 = type metadata accessor for UnknownStorage(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a1, v3, v4);
}

uint64_t Goldilocks_ExitMoveBatchErrorFeedbackRequest.unknownFields.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for Goldilocks_ExitMoveBatchErrorFeedbackRequest(0LL) + 28);
  uint64_t v4 = type metadata accessor for UnknownStorage(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40LL))(v3, a1, v4);
}

uint64_t (*Goldilocks_ExitMoveBatchErrorFeedbackRequest.unknownFields.modify())(void, void)
{
  return Goldilocks_ExitType.rawValue.getter;
}

uint64_t Goldilocks_ExitMoveBatchErrorFeedbackRequest.init()@<X0>(void *a1@<X8>)
{
  *a1 = &_swiftEmptyArrayStorage;
  a1[1] = 0LL;
  a1[2] = 0xE000000000000000LL;
  a1[3] = 0LL;
  a1[4] = 0xE000000000000000LL;
  uint64_t v2 = type metadata accessor for Goldilocks_ExitMoveBatchErrorFeedbackRequest(0LL);
  UnknownStorage.init()(v2);
  uint64_t v3 = (char *)a1 + *(int *)(v2 + 32);
  uint64_t v4 = type metadata accessor for Goldilocks_ZoneID(0LL);
  return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56LL))(v3, 1LL, 1LL, v4);
}

uint64_t Goldilocks_ExitMoveBatchErrorFeedbackResponse.serviceError.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_1000BED3C(&qword_100293C98);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for Goldilocks_ExitMoveBatchErrorFeedbackResponse(0LL);
  sub_1000CE7B4(v1 + *(int *)(v6 + 20), (uint64_t)v5, &qword_100293C98);
  uint64_t v7 = type metadata accessor for Goldilocks_ErrorInfo.ResultError(0LL);
  uint64_t v8 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48LL))(v5, 1LL, v7);
  if ((_DWORD)v8 != 1) {
    return sub_1000CEC9C((uint64_t)v5, a1, type metadata accessor for Goldilocks_ErrorInfo.ResultError);
  }
  *(void *)a1 = 0LL;
  *(void *)(a1 + 8) = 0xE000000000000000LL;
  *(void *)(a1 + 16) = 0LL;
  *(_BYTE *)(a1 + 24) = 1;
  *(void *)(a1 + 32) = 0LL;
  *(void *)(a1 + 40) = 0xE000000000000000LL;
  *(_DWORD *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = &_swiftEmptyArrayStorage;
  *(void *)(a1 + 64) = 0LL;
  *(void *)(a1 + 72) = 0xE000000000000000LL;
  *(void *)(a1 + 80) = 0LL;
  *(void *)(a1 + 88) = 0xE000000000000000LL;
  UnknownStorage.init()(v8);
  uint64_t v9 = a1 + *(int *)(v7 + 48);
  uint64_t v10 = type metadata accessor for Goldilocks_ErrorInfo.DatabaseFailure(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56LL))(v9, 1LL, 1LL, v10);
  return sub_1000CEDAC((uint64_t)v5, &qword_100293C98);
}

uint64_t Goldilocks_ExitMoveBatchErrorFeedbackResponse.serviceError.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for Goldilocks_ExitMoveBatchErrorFeedbackResponse(0LL) + 20);
  sub_1000CEDAC(v3, &qword_100293C98);
  sub_1000CEC9C(a1, v3, type metadata accessor for Goldilocks_ErrorInfo.ResultError);
  uint64_t v4 = type metadata accessor for Goldilocks_ErrorInfo.ResultError(0LL);
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56LL))(v3, 0LL, 1LL, v4);
}

void (*Goldilocks_ExitMoveBatchErrorFeedbackResponse.serviceError.modify( void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_1000BED3C(&qword_100293C98);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[1] = v5;
  uint64_t v6 = type metadata accessor for Goldilocks_ErrorInfo.ResultError(0LL);
  v3[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v3[3] = v7;
  size_t v8 = *(void *)(v7 + 64);
  v3[4] = malloc(v8);
  uint64_t v9 = malloc(v8);
  v3[5] = v9;
  uint64_t v10 = *(int *)(type metadata accessor for Goldilocks_ExitMoveBatchErrorFeedbackResponse(0LL) + 20);
  *((_DWORD *)v3 + 12) = v10;
  sub_1000CE7B4(v1 + v10, (uint64_t)v5, &qword_100293C98);
  uint64_t v11 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1LL, v6);
  if ((_DWORD)v11 == 1)
  {
    *uint64_t v9 = 0LL;
    v9[1] = 0xE000000000000000LL;
    v9[2] = 0LL;
    *((_BYTE *)v9 + 24) = 1;
    v9[4] = 0LL;
    v9[5] = 0xE000000000000000LL;
    *((_DWORD *)v9 + 12) = 0;
    v9[7] = &_swiftEmptyArrayStorage;
    v9[8] = 0LL;
    v9[9] = 0xE000000000000000LL;
    v9[10] = 0LL;
    v9[11] = 0xE000000000000000LL;
    UnknownStorage.init()(v11);
    uint64_t v12 = (char *)v9 + *(int *)(v6 + 48);
    uint64_t v13 = type metadata accessor for Goldilocks_ErrorInfo.DatabaseFailure(0LL);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56LL))(v12, 1LL, 1LL, v13);
    sub_1000CEDAC((uint64_t)v5, &qword_100293C98);
  }

  else
  {
    sub_1000CEC9C((uint64_t)v5, (uint64_t)v9, type metadata accessor for Goldilocks_ErrorInfo.ResultError);
  }

  return sub_1000F126C;
}

BOOL Goldilocks_ExitMoveBatchErrorFeedbackResponse.hasServiceError.getter()
{
  uint64_t v1 = sub_1000BED3C(&qword_100293C98);
  __chkstk_darwin(v1);
  uint64_t v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = type metadata accessor for Goldilocks_ExitMoveBatchErrorFeedbackResponse(0LL);
  sub_1000CE7B4(v0 + *(int *)(v4 + 20), (uint64_t)v3, &qword_100293C98);
  uint64_t v5 = type metadata accessor for Goldilocks_ErrorInfo.ResultError(0LL);
  BOOL v6 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48LL))(v3, 1LL, v5) != 1;
  sub_1000CEDAC((uint64_t)v3, &qword_100293C98);
  return v6;
}

Swift::Void __swiftcall Goldilocks_ExitMoveBatchErrorFeedbackResponse.clearServiceError()()
{
  uint64_t v1 = v0 + *(int *)(type metadata accessor for Goldilocks_ExitMoveBatchErrorFeedbackResponse(0LL) + 20);
  sub_1000CEDAC(v1, &qword_100293C98);
  uint64_t v2 = type metadata accessor for Goldilocks_ErrorInfo.ResultError(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56LL))(v1, 1LL, 1LL, v2);
}

uint64_t Goldilocks_ExitMoveBatchErrorFeedbackResponse.init()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a2 + *(int *)(type metadata accessor for Goldilocks_ExitMoveBatchErrorFeedbackResponse(0LL) + 20);
  uint64_t v4 = type metadata accessor for Goldilocks_ErrorInfo.ResultError(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56LL))(v3, 1LL, 1LL, v4);
}

uint64_t Goldilocks_SilentMoverRampingRequest.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000B8C4C(type metadata accessor for Goldilocks_SilentMoverRampingRequest, a1);
}

uint64_t Goldilocks_SilentMoverRampingRequest.unknownFields.setter(uint64_t a1)
{
  return sub_1000B8CA4(a1, type metadata accessor for Goldilocks_SilentMoverRampingRequest);
}

uint64_t (*Goldilocks_SilentMoverRampingRequest.unknownFields.modify())(void, void)
{
  return Goldilocks_ExitType.rawValue.getter;
}

uint64_t Goldilocks_SilentMoverRampingRequest.init()@<X0>(void *a1@<X8>)
{
  *a1 = 0LL;
  a1[1] = 0xE000000000000000LL;
  uint64_t v1 = type metadata accessor for Goldilocks_SilentMoverRampingRequest(0LL);
  return UnknownStorage.init()(v1);
}

uint64_t Goldilocks_SilentMoverRampingResponse.operationControl.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_1000BED3C(&qword_100293CA0);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for Goldilocks_SilentMoverRampingResponse(0LL);
  sub_1000CE7B4(v1 + *(int *)(v6 + 28), (uint64_t)v5, &qword_100293CA0);
  uint64_t v7 = type metadata accessor for Goldilocks_OperationControl(0LL);
  uint64_t v8 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48LL))(v5, 1LL, v7);
  if ((_DWORD)v8 != 1) {
    return sub_1000CEC9C((uint64_t)v5, a1, type metadata accessor for Goldilocks_OperationControl);
  }
  *(void *)a1 = 0LL;
  *(_BYTE *)(a1 + 8) = 1;
  *(_DWORD *)(a1 + 9) = 0;
  *(_WORD *)(a1 + 13) = 0;
  UnknownStorage.init()(v8);
  return sub_1000CEDAC((uint64_t)v5, &qword_100293CA0);
}

uint64_t Goldilocks_OperationControl.init()@<X0>(uint64_t a1@<X8>)
{
  *(void *)a1 = 0LL;
  *(_BYTE *)(a1 + 8) = 1;
  uint64_t v2 = type metadata accessor for Goldilocks_OperationControl(0LL);
  *(_DWORD *)(a1 + 9) = 0;
  *(_WORD *)(a1 + 13) = 0;
  return UnknownStorage.init()(v2);
}

uint64_t Goldilocks_SilentMoverRampingResponse.operationControl.setter(uint64_t a1)
{
  return sub_1000F3948( a1,  type metadata accessor for Goldilocks_SilentMoverRampingResponse,  &qword_100293CA0,  type metadata accessor for Goldilocks_OperationControl);
}

uint64_t sub_1000F3948( uint64_t a1, uint64_t (*a2)(void), uint64_t *a3, uint64_t (*a4)(void))
{
  uint64_t v8 = v4 + *(int *)(a2(0LL) + 28);
  sub_1000CEDAC(v8, a3);
  sub_1000CEC9C(a1, v8, a4);
  uint64_t v9 = a4(0LL);
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56LL))(v8, 0LL, 1LL, v9);
}

void (*Goldilocks_SilentMoverRampingResponse.operationControl.modify( void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_1000BED3C(&qword_100293CA0);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[1] = v5;
  uint64_t v6 = type metadata accessor for Goldilocks_OperationControl(0LL);
  v3[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v3[3] = v7;
  size_t v8 = *(void *)(v7 + 64);
  v3[4] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  v3[5] = v9;
  uint64_t v10 = *(int *)(type metadata accessor for Goldilocks_SilentMoverRampingResponse(0LL) + 28);
  *((_DWORD *)v3 + 12) = v10;
  sub_1000CE7B4(v1 + v10, (uint64_t)v5, &qword_100293CA0);
  uint64_t v11 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1LL, v6);
  if ((_DWORD)v11 == 1)
  {
    *(void *)uint64_t v9 = 0LL;
    v9[8] = 1;
    *(_DWORD *)(v9 + 9) = 0;
    *(_WORD *)(v9 + 13) = 0;
    UnknownStorage.init()(v11);
    sub_1000CEDAC((uint64_t)v5, &qword_100293CA0);
  }

  else
  {
    sub_1000CEC9C((uint64_t)v5, (uint64_t)v9, type metadata accessor for Goldilocks_OperationControl);
  }

  return sub_1000F3AF4;
}

void sub_1000F3AF4(uint64_t a1, char a2)
{
}

BOOL Goldilocks_SilentMoverRampingResponse.hasOperationControl.getter()
{
  return sub_1000F18B0( &qword_100293CA0,  type metadata accessor for Goldilocks_SilentMoverRampingResponse,  type metadata accessor for Goldilocks_OperationControl);
}

Swift::Void __swiftcall Goldilocks_SilentMoverRampingResponse.clearOperationControl()()
{
}

uint64_t Goldilocks_SilentMoverRampingResponse.resultError.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_1000BED3C(&qword_100293C98);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for Goldilocks_SilentMoverRampingResponse(0LL);
  sub_1000CE7B4(v1 + *(int *)(v6 + 32), (uint64_t)v5, &qword_100293C98);
  uint64_t v7 = type metadata accessor for Goldilocks_ErrorInfo.ResultError(0LL);
  uint64_t v8 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48LL))(v5, 1LL, v7);
  if ((_DWORD)v8 != 1) {
    return sub_1000CEC9C((uint64_t)v5, a1, type metadata accessor for Goldilocks_ErrorInfo.ResultError);
  }
  *(void *)a1 = 0LL;
  *(void *)(a1 + 8) = 0xE000000000000000LL;
  *(void *)(a1 + 16) = 0LL;
  *(_BYTE *)(a1 + 24) = 1;
  *(void *)(a1 + 32) = 0LL;
  *(void *)(a1 + 40) = 0xE000000000000000LL;
  *(_DWORD *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = &_swiftEmptyArrayStorage;
  *(void *)(a1 + 64) = 0LL;
  *(void *)(a1 + 72) = 0xE000000000000000LL;
  *(void *)(a1 + 80) = 0LL;
  *(void *)(a1 + 88) = 0xE000000000000000LL;
  UnknownStorage.init()(v8);
  uint64_t v9 = a1 + *(int *)(v7 + 48);
  uint64_t v10 = type metadata accessor for Goldilocks_ErrorInfo.DatabaseFailure(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56LL))(v9, 1LL, 1LL, v10);
  return sub_1000CEDAC((uint64_t)v5, &qword_100293C98);
}

uint64_t Goldilocks_SilentMoverRampingResponse.resultError.setter(uint64_t a1)
{
  return sub_1000F3C98( a1,  type metadata accessor for Goldilocks_SilentMoverRampingResponse,  &qword_100293C98,  type metadata accessor for Goldilocks_ErrorInfo.ResultError);
}

uint64_t sub_1000F3C98( uint64_t a1, uint64_t (*a2)(void), uint64_t *a3, uint64_t (*a4)(void))
{
  uint64_t v8 = v4 + *(int *)(a2(0LL) + 32);
  sub_1000CEDAC(v8, a3);
  sub_1000CEC9C(a1, v8, a4);
  uint64_t v9 = a4(0LL);
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56LL))(v8, 0LL, 1LL, v9);
}

void (*Goldilocks_SilentMoverRampingResponse.resultError.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_1000BED3C(&qword_100293C98);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[1] = v5;
  uint64_t v6 = type metadata accessor for Goldilocks_ErrorInfo.ResultError(0LL);
  v3[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v3[3] = v7;
  size_t v8 = *(void *)(v7 + 64);
  v3[4] = malloc(v8);
  uint64_t v9 = malloc(v8);
  v3[5] = v9;
  uint64_t v10 = *(int *)(type metadata accessor for Goldilocks_SilentMoverRampingResponse(0LL) + 32);
  *((_DWORD *)v3 + 12) = v10;
  sub_1000CE7B4(v1 + v10, (uint64_t)v5, &qword_100293C98);
  uint64_t v11 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1LL, v6);
  if ((_DWORD)v11 == 1)
  {
    *uint64_t v9 = 0LL;
    v9[1] = 0xE000000000000000LL;
    v9[2] = 0LL;
    *((_BYTE *)v9 + 24) = 1;
    v9[4] = 0LL;
    v9[5] = 0xE000000000000000LL;
    *((_DWORD *)v9 + 12) = 0;
    v9[7] = &_swiftEmptyArrayStorage;
    v9[8] = 0LL;
    v9[9] = 0xE000000000000000LL;
    v9[10] = 0LL;
    v9[11] = 0xE000000000000000LL;
    UnknownStorage.init()(v11);
    uint64_t v12 = (char *)v9 + *(int *)(v6 + 48);
    uint64_t v13 = type metadata accessor for Goldilocks_ErrorInfo.DatabaseFailure(0LL);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56LL))(v12, 1LL, 1LL, v13);
    sub_1000CEDAC((uint64_t)v5, &qword_100293C98);
  }

  else
  {
    sub_1000CEC9C((uint64_t)v5, (uint64_t)v9, type metadata accessor for Goldilocks_ErrorInfo.ResultError);
  }

  return sub_1000F126C;
}

BOOL Goldilocks_SilentMoverRampingResponse.hasResultError.getter()
{
  return sub_1000F3EA8( &qword_100293C98,  type metadata accessor for Goldilocks_SilentMoverRampingResponse,  type metadata accessor for Goldilocks_ErrorInfo.ResultError);
}

BOOL sub_1000F3EA8(uint64_t *a1, uint64_t (*a2)(void), uint64_t (*a3)(void))
{
  uint64_t v7 = sub_1000BED3C(a1);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = a2(0LL);
  sub_1000CE7B4(v3 + *(int *)(v10 + 32), (uint64_t)v9, a1);
  uint64_t v11 = a3(0LL);
  BOOL v12 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v11 - 8) + 48LL))(v9, 1LL, v11) != 1;
  sub_1000CEDAC((uint64_t)v9, a1);
  return v12;
}

Swift::Void __swiftcall Goldilocks_SilentMoverRampingResponse.clearResultError()()
{
}

uint64_t sub_1000F3F80(uint64_t (*a1)(void), uint64_t *a2, uint64_t (*a3)(void))
{
  uint64_t v6 = v3 + *(int *)(a1(0LL) + 32);
  sub_1000CEDAC(v6, a2);
  uint64_t v7 = a3(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL))(v6, 1LL, 1LL, v7);
}

uint64_t Goldilocks_SilentMoverRampingResponse.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000CFC8C(type metadata accessor for Goldilocks_SilentMoverRampingResponse, a1);
}

uint64_t Goldilocks_SilentMoverRampingResponse.unknownFields.setter(uint64_t a1)
{
  return sub_1000CFCE4(a1, type metadata accessor for Goldilocks_SilentMoverRampingResponse);
}

uint64_t (*Goldilocks_SilentMoverRampingResponse.unknownFields.modify())(void, void)
{
  return Goldilocks_ExitType.rawValue.getter;
}

uint64_t Goldilocks_SilentMoverRampingResponse.init()@<X0>(void *a1@<X8>)
{
  *a1 = 0LL;
  a1[1] = 0xE000000000000000LL;
  a1[2] = 0LL;
  uint64_t v2 = type metadata accessor for Goldilocks_SilentMoverRampingResponse(0LL);
  UnknownStorage.init()(v2);
  uint64_t v3 = (char *)a1 + *(int *)(v2 + 28);
  uint64_t v4 = type metadata accessor for Goldilocks_OperationControl(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56LL))(v3, 1LL, 1LL, v4);
  uint64_t v5 = (char *)a1 + *(int *)(v2 + 32);
  uint64_t v6 = type metadata accessor for Goldilocks_ErrorInfo.ResultError(0LL);
  return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56LL))(v5, 1LL, 1LL, v6);
}

double Goldilocks_OperationControl.unshareOperationPercentage.getter()
{
  double result = *(double *)v0;
  if (*(_BYTE *)(v0 + 8)) {
    return 0.0;
  }
  return result;
}

void Goldilocks_OperationControl.unshareOperationPercentage.setter(double a1)
{
  *(double *)uint64_t v1 = a1;
  *(_BYTE *)(v1 + 8) = 0;
}

void *(*Goldilocks_OperationControl.unshareOperationPercentage.modify( uint64_t a1))(void *result)
{
  *(void *)(a1 + 8) = v1;
  double v2 = *(double *)v1;
  if (*(_BYTE *)(v1 + 8)) {
    double v2 = 0.0;
  }
  *(double *)a1 = v2;
  return sub_1000F4114;
}

void *sub_1000F4114(void *result)
{
  uint64_t v1 = result[1];
  *(void *)uint64_t v1 = *result;
  *(_BYTE *)(v1 + 8) = 0;
  return result;
}

uint64_t Goldilocks_OperationControl.allowClone.getter()
{
  return *(unsigned __int8 *)(v0 + 9);
}

uint64_t Goldilocks_OperationControl.allowClone.setter(uint64_t result)
{
  *(_BYTE *)(v1 + 9) = result;
  return result;
}

uint64_t (*Goldilocks_OperationControl.allowClone.modify())(void, void)
{
  return Goldilocks_ExitType.rawValue.getter;
}

uint64_t Goldilocks_OperationControl.allowShare.getter()
{
  return *(unsigned __int8 *)(v0 + 10);
}

uint64_t Goldilocks_OperationControl.allowShare.setter(uint64_t result)
{
  *(_BYTE *)(v1 + 10) = result;
  return result;
}

uint64_t (*Goldilocks_OperationControl.allowShare.modify())(void, void)
{
  return Goldilocks_ExitType.rawValue.getter;
}

uint64_t Goldilocks_OperationControl.allowUnshare.getter()
{
  return *(unsigned __int8 *)(v0 + 11);
}

uint64_t Goldilocks_OperationControl.allowUnshare.setter(uint64_t result)
{
  *(_BYTE *)(v1 + 11) = result;
  return result;
}

uint64_t (*Goldilocks_OperationControl.allowUnshare.modify())(void, void)
{
  return Goldilocks_ExitType.rawValue.getter;
}

uint64_t Goldilocks_OperationControl.allowExit.getter()
{
  return *(unsigned __int8 *)(v0 + 12);
}

uint64_t Goldilocks_OperationControl.allowExit.setter(uint64_t result)
{
  *(_BYTE *)(v1 + 12) = result;
  return result;
}

uint64_t (*Goldilocks_OperationControl.allowExit.modify())(void, void)
{
  return Goldilocks_ExitType.rawValue.getter;
}

uint64_t Goldilocks_OperationControl.allowCleanup.getter()
{
  return *(unsigned __int8 *)(v0 + 13);
}

uint64_t Goldilocks_OperationControl.allowCleanup.setter(uint64_t result)
{
  *(_BYTE *)(v1 + 13) = result;
  return result;
}

uint64_t (*Goldilocks_OperationControl.allowCleanup.modify())(void, void)
{
  return Goldilocks_ExitType.rawValue.getter;
}

uint64_t Goldilocks_OperationControl.allowSharedLibrary.getter()
{
  return *(unsigned __int8 *)(v0 + 14);
}

uint64_t Goldilocks_OperationControl.allowSharedLibrary.setter(uint64_t result)
{
  *(_BYTE *)(v1 + 14) = result;
  return result;
}

uint64_t (*Goldilocks_OperationControl.allowSharedLibrary.modify())(void, void)
{
  return Goldilocks_ExitType.rawValue.getter;
}

uint64_t Goldilocks_OperationControl.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000F4824(type metadata accessor for Goldilocks_OperationControl, a1);
}

uint64_t Goldilocks_OperationControl.unknownFields.setter(uint64_t a1)
{
  return sub_1000F487C(a1, type metadata accessor for Goldilocks_OperationControl);
}

uint64_t (*Goldilocks_OperationControl.unknownFields.modify())(void, void)
{
  return Goldilocks_ExitType.rawValue.getter;
}

BOOL static Goldilocks_OperationControl.OneOf_OptionalUnshareOperationPercentage.__derived_enum_equals(_:_:)( double a1, double a2)
{
  return a1 == a2;
}

BOOL sub_1000F4230(double *a1, double *a2)
{
  return *a1 == *a2;
}

uint64_t Goldilocks_ErrorInfo.ResultErrorCode.init(rawValue:)(uint64_t a1)
{
  return sub_1000B8D20(a1, (uint64_t (*)(void))sub_100105468);
}

uint64_t sub_1000F4250@<X0>(uint64_t a1@<X8>)
{
  return sub_1000B8D60((uint64_t (*)(void))sub_100105468, a1);
}

uint64_t sub_1000F425C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000B8DBC(a1, (uint64_t (*)(void))sub_100105468, a2);
}

uint64_t sub_1000F4268(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_100105628();
  return Enum.hash(into:)(a1, a2, v4);
}

uint64_t Goldilocks_ErrorInfo.DatabaseFailure.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for Goldilocks_ErrorInfo.DatabaseFailure(0LL) + 32);
  uint64_t v4 = type metadata accessor for UnknownStorage(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a1, v3, v4);
}

uint64_t Goldilocks_ErrorInfo.DatabaseFailure.unknownFields.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for Goldilocks_ErrorInfo.DatabaseFailure(0LL) + 32);
  uint64_t v4 = type metadata accessor for UnknownStorage(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40LL))(v3, a1, v4);
}

uint64_t (*Goldilocks_ErrorInfo.DatabaseFailure.unknownFields.modify())(void, void)
{
  return Goldilocks_ExitType.rawValue.getter;
}

uint64_t Goldilocks_ErrorInfo.DatabaseFailure.init()@<X0>(uint64_t a1@<X8>)
{
  *(void *)a1 = 0LL;
  *(void *)(a1 + 8) = 0xE000000000000000LL;
  *(void *)(a1 + 16) = 0LL;
  *(void *)(a1 + 24) = 0xE000000000000000LL;
  *(void *)(a1 + 32) = 0LL;
  *(_BYTE *)(a1 + 40) = 1;
  *(void *)(a1 + 48) = 0LL;
  *(_BYTE *)(a1 + 56) = 1;
  uint64_t v1 = type metadata accessor for Goldilocks_ErrorInfo.DatabaseFailure(0LL);
  return UnknownStorage.init()(v1);
}

uint64_t Goldilocks_ErrorInfo.ResultError.databaseFailure.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_1000BED3C(&qword_100293CA8);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for Goldilocks_ErrorInfo.ResultError(0LL);
  sub_1000CE7B4(v1 + *(int *)(v6 + 48), (uint64_t)v5, &qword_100293CA8);
  uint64_t v7 = type metadata accessor for Goldilocks_ErrorInfo.DatabaseFailure(0LL);
  uint64_t v8 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48LL))(v5, 1LL, v7);
  if ((_DWORD)v8 != 1) {
    return sub_1000CEC9C((uint64_t)v5, a1, type metadata accessor for Goldilocks_ErrorInfo.DatabaseFailure);
  }
  *(void *)a1 = 0LL;
  *(void *)(a1 + 8) = 0xE000000000000000LL;
  *(void *)(a1 + 16) = 0LL;
  *(void *)(a1 + 24) = 0xE000000000000000LL;
  *(void *)(a1 + 32) = 0LL;
  *(_BYTE *)(a1 + 40) = 1;
  *(void *)(a1 + 48) = 0LL;
  *(_BYTE *)(a1 + 56) = 1;
  UnknownStorage.init()(v8);
  return sub_1000CEDAC((uint64_t)v5, &qword_100293CA8);
}

uint64_t Goldilocks_ErrorInfo.ResultError.databaseFailure.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for Goldilocks_ErrorInfo.ResultError(0LL) + 48);
  sub_1000CEDAC(v3, &qword_100293CA8);
  sub_1000CEC9C(a1, v3, type metadata accessor for Goldilocks_ErrorInfo.DatabaseFailure);
  uint64_t v4 = type metadata accessor for Goldilocks_ErrorInfo.DatabaseFailure(0LL);
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56LL))(v3, 0LL, 1LL, v4);
}

void (*Goldilocks_ErrorInfo.ResultError.databaseFailure.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_1000BED3C(&qword_100293CA8);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[1] = v5;
  uint64_t v6 = type metadata accessor for Goldilocks_ErrorInfo.DatabaseFailure(0LL);
  v3[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v3[3] = v7;
  size_t v8 = *(void *)(v7 + 64);
  v3[4] = malloc(v8);
  uint64_t v9 = malloc(v8);
  v3[5] = v9;
  uint64_t v10 = *(int *)(type metadata accessor for Goldilocks_ErrorInfo.ResultError(0LL) + 48);
  *((_DWORD *)v3 + 12) = v10;
  sub_1000CE7B4(v1 + v10, (uint64_t)v5, &qword_100293CA8);
  uint64_t v11 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1LL, v6);
  if ((_DWORD)v11 == 1)
  {
    *uint64_t v9 = 0LL;
    v9[1] = 0xE000000000000000LL;
    v9[2] = 0LL;
    v9[3] = 0xE000000000000000LL;
    v9[4] = 0LL;
    *((_BYTE *)v9 + 40) = 1;
    v9[6] = 0LL;
    *((_BYTE *)v9 + 56) = 1;
    UnknownStorage.init()(v11);
    sub_1000CEDAC((uint64_t)v5, &qword_100293CA8);
  }

  else
  {
    sub_1000CEC9C((uint64_t)v5, (uint64_t)v9, type metadata accessor for Goldilocks_ErrorInfo.DatabaseFailure);
  }

  return sub_1000F4658;
}

void sub_1000F4658(uint64_t a1, char a2)
{
}

BOOL Goldilocks_ErrorInfo.ResultError.hasDatabaseFailure.getter()
{
  uint64_t v1 = sub_1000BED3C(&qword_100293CA8);
  __chkstk_darwin(v1);
  uint64_t v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = type metadata accessor for Goldilocks_ErrorInfo.ResultError(0LL);
  sub_1000CE7B4(v0 + *(int *)(v4 + 48), (uint64_t)v3, &qword_100293CA8);
  uint64_t v5 = type metadata accessor for Goldilocks_ErrorInfo.DatabaseFailure(0LL);
  BOOL v6 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48LL))(v3, 1LL, v5) != 1;
  sub_1000CEDAC((uint64_t)v3, &qword_100293CA8);
  return v6;
}

Swift::Void __swiftcall Goldilocks_ErrorInfo.ResultError.clearDatabaseFailure()()
{
  uint64_t v1 = v0 + *(int *)(type metadata accessor for Goldilocks_ErrorInfo.ResultError(0LL) + 48);
  sub_1000CEDAC(v1, &qword_100293CA8);
  uint64_t v2 = type metadata accessor for Goldilocks_ErrorInfo.DatabaseFailure(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56LL))(v1, 1LL, 1LL, v2);
}

uint64_t Goldilocks_ErrorInfo.ResultError.errorCode.getter()
{
  return *(unsigned int *)(v0 + 48);
}

uint64_t Goldilocks_ErrorInfo.ResultError.errorCode.setter(uint64_t result)
{
  *(_DWORD *)(v1 + 48) = result;
  return result;
}

uint64_t Goldilocks_ErrorInfo.ResultError.databaseFailures.getter()
{
  return swift_bridgeObjectRetain(*(void *)(v0 + 56));
}

uint64_t Goldilocks_ErrorInfo.ResultError.databaseFailures.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease(*(void *)(v1 + 56));
  *(void *)(v1 + 56) = a1;
  return result;
}

uint64_t Goldilocks_ErrorInfo.ResultError.learnMoreLink.getter()
{
  uint64_t v1 = *(void *)(v0 + 80);
  swift_bridgeObjectRetain(*(void *)(v0 + 88));
  return v1;
}

uint64_t Goldilocks_ErrorInfo.ResultError.learnMoreLink.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease(*(void *)(v2 + 88));
  *(void *)(v2 + 80) = a1;
  *(void *)(v2 + 88) = a2;
  return result;
}

uint64_t Goldilocks_ErrorInfo.ResultError.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000F4824(type metadata accessor for Goldilocks_ErrorInfo.ResultError, a1);
}

uint64_t sub_1000F4824@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1(0LL) + 44);
  uint64_t v5 = type metadata accessor for UnknownStorage(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16LL))(a2, v4, v5);
}

uint64_t Goldilocks_ErrorInfo.ResultError.unknownFields.setter(uint64_t a1)
{
  return sub_1000F487C(a1, type metadata accessor for Goldilocks_ErrorInfo.ResultError);
}

uint64_t sub_1000F487C(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v4 = v2 + *(int *)(a2(0LL) + 44);
  uint64_t v5 = type metadata accessor for UnknownStorage(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40LL))(v4, a1, v5);
}

uint64_t (*Goldilocks_ErrorInfo.ResultError.unknownFields.modify())(void, void)
{
  return Goldilocks_ExitType.rawValue.getter;
}

void sub_1000F48EC()
{
  static Goldilocks_ErrorInfo.ResultErrorCode.allCases = (uint64_t)&off_100243A88;
}

uint64_t *Goldilocks_ErrorInfo.ResultErrorCode.allCases.unsafeMutableAddressor()
{
  if (qword_1002918B8 != -1) {
    swift_once(&qword_1002918B8, sub_1000F48EC);
  }
  return &static Goldilocks_ErrorInfo.ResultErrorCode.allCases;
}

uint64_t static Goldilocks_ErrorInfo.ResultErrorCode.allCases.getter()
{
  return sub_1000B92C0(&qword_1002918B8, &static Goldilocks_ErrorInfo.ResultErrorCode.allCases);
}

uint64_t static Goldilocks_ErrorInfo.ResultErrorCode.allCases.setter(uint64_t a1)
{
  return sub_1000B9334( a1,  &qword_1002918B8,  &static Goldilocks_ErrorInfo.ResultErrorCode.allCases,  (uint64_t)sub_1000F48EC);
}

uint64_t (*static Goldilocks_ErrorInfo.ResultErrorCode.allCases.modify(uint64_t a1))(void)
{
  if (qword_1002918B8 != -1) {
    swift_once(&qword_1002918B8, sub_1000F48EC);
  }
  swift_beginAccess(&static Goldilocks_ErrorInfo.ResultErrorCode.allCases, a1, 33LL, 0LL);
  return j_j__swift_endAccess;
}

uint64_t sub_1000F49E4@<X0>(uint64_t *a1@<X8>)
{
  return sub_1000B9420( &qword_1002918B8,  &static Goldilocks_ErrorInfo.ResultErrorCode.allCases,  (uint64_t)sub_1000F48EC,  a1);
}

uint64_t Goldilocks_ExitStatusFeedbackRequest.shareID.getter@<X0>(void *a1@<X8>)
{
  return sub_1000F4A0C(type metadata accessor for Goldilocks_ExitStatusFeedbackRequest, a1);
}

uint64_t sub_1000F4A0C@<X0>(uint64_t (*a1)(void)@<X0>, void *a2@<X8>)
{
  uint64_t v5 = sub_1000BED3C(&qword_100295030);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = a1(0LL);
  sub_1000CE7B4(v2 + *(int *)(v8 + 28), (uint64_t)v7, &qword_100295030);
  uint64_t v9 = type metadata accessor for Goldilocks_ZoneID(0LL);
  uint64_t v10 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48LL))(v7, 1LL, v9);
  if ((_DWORD)v10 != 1) {
    return sub_1000CEC9C((uint64_t)v7, (uint64_t)a2, type metadata accessor for Goldilocks_ZoneID);
  }
  *a2 = 0LL;
  a2[1] = 0xE000000000000000LL;
  a2[2] = 0LL;
  a2[3] = 0xE000000000000000LL;
  UnknownStorage.init()(v10);
  return sub_1000CEDAC((uint64_t)v7, &qword_100295030);
}

void (*Goldilocks_ExitStatusFeedbackRequest.shareID.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_1000BED3C(&qword_100295030);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[1] = v5;
  uint64_t v6 = type metadata accessor for Goldilocks_ZoneID(0LL);
  v3[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v3[3] = v7;
  size_t v8 = *(void *)(v7 + 64);
  v3[4] = malloc(v8);
  uint64_t v9 = malloc(v8);
  v3[5] = v9;
  uint64_t v10 = *(int *)(type metadata accessor for Goldilocks_ExitStatusFeedbackRequest(0LL) + 28);
  *((_DWORD *)v3 + 12) = v10;
  sub_1000CE7B4(v1 + v10, (uint64_t)v5, &qword_100295030);
  uint64_t v11 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1LL, v6);
  if ((_DWORD)v11 == 1)
  {
    *uint64_t v9 = 0LL;
    v9[1] = 0xE000000000000000LL;
    v9[2] = 0LL;
    v9[3] = 0xE000000000000000LL;
    UnknownStorage.init()(v11);
    sub_1000CEDAC((uint64_t)v5, &qword_100295030);
  }

  else
  {
    sub_1000CEC9C((uint64_t)v5, (uint64_t)v9, type metadata accessor for Goldilocks_ZoneID);
  }

  return sub_1000F0DB4;
}

BOOL Goldilocks_ExitStatusFeedbackRequest.hasShareID.getter()
{
  return sub_1000F18B0( &qword_100295030,  type metadata accessor for Goldilocks_ExitStatusFeedbackRequest,  type metadata accessor for Goldilocks_ZoneID);
}

Swift::Void __swiftcall Goldilocks_ExitStatusFeedbackRequest.clearShareID()()
{
}

uint64_t Goldilocks_ExitStatusFeedbackRequest.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000CFC8C(type metadata accessor for Goldilocks_ExitStatusFeedbackRequest, a1);
}

uint64_t Goldilocks_ExitStatusFeedbackRequest.unknownFields.setter(uint64_t a1)
{
  return sub_1000CFCE4(a1, type metadata accessor for Goldilocks_ExitStatusFeedbackRequest);
}

uint64_t (*Goldilocks_ExitStatusFeedbackRequest.unknownFields.modify())(void, void)
{
  return Goldilocks_ExitType.rawValue.getter;
}

uint64_t Goldilocks_ExitStatusFeedbackRequest.ClientStatus.init(rawValue:)(uint64_t a1)
{
  return sub_1000B8D20(a1, (uint64_t (*)(void))sub_10010547C);
}

uint64_t Goldilocks_ExitStatusFeedbackRequest.ClientStatus.rawValue.getter(uint64_t result, char a2)
{
  if ((a2 & 1) != 0) {
    return qword_100219908[result];
  }
  return result;
}

uint64_t sub_1000F4CC8@<X0>(uint64_t a1@<X8>)
{
  return sub_1000B8D60((uint64_t (*)(void))sub_10010547C, a1);
}

uint64_t sub_1000F4CD4()
{
  uint64_t result = *v0;
  if (*((_BYTE *)v0 + 8) == 1) {
    return qword_100219908[result];
  }
  return result;
}

uint64_t sub_1000F4CF4@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000B8DBC(a1, (uint64_t (*)(void))sub_10010547C, a2);
}

void sub_1000F4D00(void *a1@<X8>)
{
  uint64_t v2 = *v1;
  if (*((_BYTE *)v1 + 8) == 1) {
    uint64_t v2 = qword_100219908[v2];
  }
  *a1 = v2;
}

uint64_t sub_1000F4D24(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_10010566C();
  return Enum.hash(into:)(a1, a2, v4);
}

BOOL sub_1000F4D5C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  if (*((_BYTE *)a1 + 8) == 1) {
    uint64_t v2 = qword_100219908[v2];
  }
  uint64_t v3 = *a2;
  if (*((_BYTE *)a2 + 8)) {
    uint64_t v3 = qword_100219908[v3];
  }
  return v2 == v3;
}

uint64_t Goldilocks_ExitStatusFeedbackRequest.init()@<X0>(uint64_t a1@<X8>)
{
  return sub_1000F4DA0(type metadata accessor for Goldilocks_ExitStatusFeedbackRequest, a1);
}

uint64_t sub_1000F4DA0@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0LL;
  *(void *)(a2 + 8) = 0xE000000000000000LL;
  *(void *)(a2 + 16) = 0LL;
  *(_BYTE *)(a2 + 24) = 1;
  uint64_t v3 = a1(0LL);
  UnknownStorage.init()(v3);
  uint64_t v4 = a2 + *(int *)(v3 + 28);
  uint64_t v5 = type metadata accessor for Goldilocks_ZoneID(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56LL))(v4, 1LL, 1LL, v5);
}

void sub_1000F4E14()
{
  static Goldilocks_ExitStatusFeedbackRequest.ClientStatus.allCases = (uint64_t)&off_100243B68;
}

uint64_t *Goldilocks_ExitStatusFeedbackRequest.ClientStatus.allCases.unsafeMutableAddressor()
{
  if (qword_1002918C0 != -1) {
    swift_once(&qword_1002918C0, sub_1000F4E14);
  }
  return &static Goldilocks_ExitStatusFeedbackRequest.ClientStatus.allCases;
}

uint64_t static Goldilocks_ExitStatusFeedbackRequest.ClientStatus.allCases.getter()
{
  return sub_1000B92C0(&qword_1002918C0, &static Goldilocks_ExitStatusFeedbackRequest.ClientStatus.allCases);
}

uint64_t static Goldilocks_ExitStatusFeedbackRequest.ClientStatus.allCases.setter(uint64_t a1)
{
  return sub_1000B9334( a1,  &qword_1002918C0,  &static Goldilocks_ExitStatusFeedbackRequest.ClientStatus.allCases,  (uint64_t)sub_1000F4E14);
}

uint64_t (*static Goldilocks_ExitStatusFeedbackRequest.ClientStatus.allCases.modify( uint64_t a1))(void)
{
  if (qword_1002918C0 != -1) {
    swift_once(&qword_1002918C0, sub_1000F4E14);
  }
  swift_beginAccess(&static Goldilocks_ExitStatusFeedbackRequest.ClientStatus.allCases, a1, 33LL, 0LL);
  return j_j__swift_endAccess;
}

uint64_t sub_1000F4F0C@<X0>(uint64_t *a1@<X8>)
{
  return sub_1000B9420( &qword_1002918C0,  &static Goldilocks_ExitStatusFeedbackRequest.ClientStatus.allCases,  (uint64_t)sub_1000F4E14,  a1);
}

uint64_t sub_1000F4F28()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_1000BECFC(v0, static Goldilocks_ExitStage._protobuf_nameMap);
  sub_1000BCFB4(v0, (uint64_t)static Goldilocks_ExitStage._protobuf_nameMap);
  uint64_t v1 = sub_1000BED3C(&qword_100291D80);
  uint64_t v2 = sub_1000BED3C(&qword_100291D88);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 9 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002135A0;
  uint64_t v8 = v7 + v6;
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  *(void *)(v7 + v6) = -1LL;
  *(void *)uint64_t v9 = "UNKNOWN";
  *(void *)(v9 + 8) = 7LL;
  *(_BYTE *)(v9 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  uint64_t v13 = v8 + v4 + *(int *)(v2 + 48);
  *(void *)(v8 + v4) = 0LL;
  *(void *)uint64_t v13 = "NOT_IN_EXIT";
  *(void *)(v13 + 8) = 11LL;
  *(_BYTE *)(v13 + 16) = 2;
  v12();
  uint64_t v14 = (void *)(v8 + 2 * v4);
  uint64_t v15 = (char *)v14 + *(int *)(v2 + 48);
  void *v14 = 1000LL;
  *(void *)uint64_t v15 = "EXIT_INITIATED_COPY_IN_PROGRESS";
  *((void *)v15 + 1) = 31LL;
  v15[16] = 2;
  v12();
  uint64_t v16 = (void *)(v8 + 3 * v4);
  uint64_t v17 = (char *)v16 + *(int *)(v2 + 48);
  *uint64_t v16 = 1100LL;
  *(void *)uint64_t v17 = "EXIT_RECORD_COPY_COMPLETE";
  *((void *)v17 + 1) = 25LL;
  _BYTE v17[16] = 2;
  v12();
  uint64_t v18 = (void *)(v8 + 4 * v4);
  uint64_t v19 = (char *)v18 + *(int *)(v2 + 48);
  void *v18 = 1200LL;
  *(void *)uint64_t v19 = "EXIT_ADDED_PARTICIPANT_TO_EXIT_SHARE";
  *((void *)v19 + 1) = 36LL;
  v19[16] = 2;
  v12();
  uint64_t v20 = (void *)(v8 + 5 * v4);
  uint64_t v21 = (char *)v20 + *(int *)(v2 + 48);
  *uint64_t v20 = 1300LL;
  *(void *)uint64_t v21 = "EXIT_REMOVE_PARTICIPANT_FROM_SHARED_ALBUM";
  *((void *)v21 + 1) = 41LL;
  v21[16] = 2;
  v12();
  char v22 = (void *)(v8 + 6 * v4);
  uint64_t v23 = (char *)v22 + *(int *)(v2 + 48);
  *char v22 = 1400LL;
  *(void *)uint64_t v23 = "EXIT_REMOVE_PARTICIPANT_FROM_EXIT_STATE";
  *((void *)v23 + 1) = 39LL;
  _BYTE v23[16] = 2;
  v12();
  uint64_t v24 = (void *)(v8 + 7 * v4);
  int v25 = (char *)v24 + *(int *)(v2 + 48);
  *uint64_t v24 = 2000LL;
  *(void *)int v25 = "MOVE_RECORDS_OUT";
  *((void *)v25 + 1) = 16LL;
  _BYTE v25[16] = 2;
  v12();
  uint64_t v26 = v8 + 8 * v4 + *(int *)(v2 + 48);
  *(void *)(v8 + 8 * v4) = 3000LL;
  *(void *)uint64_t v26 = "EXIT_COMPLETE_ZONE_NOT_IN_USE";
  *(void *)(v26 + 8) = 29LL;
  *(_BYTE *)(v26 + 16) = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t Goldilocks_ExitStage._protobuf_nameMap.unsafeMutableAddressor()
{
  return sub_1000B9E20(&qword_1002918C8, (uint64_t)static Goldilocks_ExitStage._protobuf_nameMap, (uint64_t)sub_1000F4F28);
}

uint64_t static Goldilocks_ExitStage._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000B9E7C( &qword_1002918C8,  (uint64_t)static Goldilocks_ExitStage._protobuf_nameMap,  (uint64_t)sub_1000F4F28,  a1);
}

uint64_t sub_1000F5244@<X0>(uint64_t a1@<X8>)
{
  return sub_1000BA0EC( &qword_1002918C8,  (uint64_t)static Goldilocks_ExitStage._protobuf_nameMap,  (uint64_t)sub_1000F4F28,  a1);
}

uint64_t sub_1000F5260()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_1000BECFC(v0, static Goldilocks_ExitSource._protobuf_nameMap);
  sub_1000BCFB4(v0, (uint64_t)static Goldilocks_ExitSource._protobuf_nameMap);
  uint64_t v1 = sub_1000BED3C(&qword_100291D80);
  uint64_t v2 = sub_1000BED3C(&qword_100291D88);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 5 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_100216D40;
  uint64_t v8 = v7 + v6;
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  *(void *)(v7 + v6) = 0LL;
  *(void *)uint64_t v9 = "USER_DRIVEN";
  *(void *)(v9 + 8) = 11LL;
  *(_BYTE *)(v9 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  uint64_t v13 = v8 + v4 + *(int *)(v2 + 48);
  *(void *)(v8 + v4) = 1LL;
  *(void *)uint64_t v13 = "MANZANITA";
  *(void *)(v13 + 8) = 9LL;
  *(_BYTE *)(v13 + 16) = 2;
  v12();
  uint64_t v14 = (void *)(v8 + 2 * v4);
  uint64_t v15 = (char *)v14 + *(int *)(v2 + 48);
  void *v14 = 2LL;
  *(void *)uint64_t v15 = "ICPL_DISABLE_AND_DELETE";
  *((void *)v15 + 1) = 23LL;
  v15[16] = 2;
  v12();
  uint64_t v16 = (void *)(v8 + 3 * v4);
  uint64_t v17 = (char *)v16 + *(int *)(v2 + 48);
  *uint64_t v16 = 3LL;
  *(void *)uint64_t v17 = "TRIGGER_EXIT_ENDPOINT";
  *((void *)v17 + 1) = 21LL;
  _BYTE v17[16] = 2;
  v12();
  uint64_t v18 = v8 + 4 * v4 + *(int *)(v2 + 48);
  *(void *)(v8 + 4 * v4) = 4LL;
  *(void *)uint64_t v18 = "GROOMER_REENQUEUE";
  *(void *)(v18 + 8) = 17LL;
  *(_BYTE *)(v18 + 16) = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t Goldilocks_ExitSource._protobuf_nameMap.unsafeMutableAddressor()
{
  return sub_1000B9E20( &qword_1002918D0,  (uint64_t)static Goldilocks_ExitSource._protobuf_nameMap,  (uint64_t)sub_1000F5260);
}

uint64_t static Goldilocks_ExitSource._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000B9E7C( &qword_1002918D0,  (uint64_t)static Goldilocks_ExitSource._protobuf_nameMap,  (uint64_t)sub_1000F5260,  a1);
}

uint64_t sub_1000F5498@<X0>(uint64_t a1@<X8>)
{
  return sub_1000BA0EC( &qword_1002918D0,  (uint64_t)static Goldilocks_ExitSource._protobuf_nameMap,  (uint64_t)sub_1000F5260,  a1);
}

uint64_t sub_1000F54B4()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_1000BECFC(v0, static Goldilocks_ExitType._protobuf_nameMap);
  sub_1000BCFB4(v0, (uint64_t)static Goldilocks_ExitType._protobuf_nameMap);
  uint64_t v1 = sub_1000BED3C(&qword_100291D80);
  uint64_t v2 = sub_1000BED3C(&qword_100291D88);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 3 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002135D0;
  uint64_t v8 = (void *)(v7 + v6);
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  *uint64_t v8 = 0LL;
  *(void *)uint64_t v9 = "PARTICIPANT_SELF_EXIT";
  *(void *)(v9 + 8) = 21LL;
  *(_BYTE *)(v9 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  uint64_t v13 = (char *)v8 + v4 + *(int *)(v2 + 48);
  *(void *)((char *)v8 + v4) = 1LL;
  *(void *)uint64_t v13 = "PARTICIPANT_REMOVAL";
  *((void *)v13 + 1) = 19LL;
  v13[16] = 2;
  v12();
  uint64_t v14 = (uint64_t)v8 + 2 * v4 + *(int *)(v2 + 48);
  *(void *)((char *)v8 + 2 * v4) = 2LL;
  *(void *)uint64_t v14 = "OWNER_DISMANTLE";
  *(void *)(v14 + 8) = 15LL;
  *(_BYTE *)(v14 + 16) = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t Goldilocks_ExitType._protobuf_nameMap.unsafeMutableAddressor()
{
  return sub_1000B9E20(&qword_1002918D8, (uint64_t)static Goldilocks_ExitType._protobuf_nameMap, (uint64_t)sub_1000F54B4);
}

uint64_t static Goldilocks_ExitType._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000B9E7C( &qword_1002918D8,  (uint64_t)static Goldilocks_ExitType._protobuf_nameMap,  (uint64_t)sub_1000F54B4,  a1);
}

uint64_t sub_1000F567C@<X0>(uint64_t a1@<X8>)
{
  return sub_1000BA0EC( &qword_1002918D8,  (uint64_t)static Goldilocks_ExitType._protobuf_nameMap,  (uint64_t)sub_1000F54B4,  a1);
}

uint64_t sub_1000F5698()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_1000BECFC(v0, static Goldilocks_RecordRetentionPolicy._protobuf_nameMap);
  sub_1000BCFB4(v0, (uint64_t)static Goldilocks_RecordRetentionPolicy._protobuf_nameMap);
  uint64_t v1 = sub_1000BED3C(&qword_100291D80);
  uint64_t v2 = sub_1000BED3C(&qword_100291D88);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 3 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002135D0;
  uint64_t v8 = (void *)(v7 + v6);
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  *uint64_t v8 = 0LL;
  *(void *)uint64_t v9 = "SERVER_CHOICE";
  *(void *)(v9 + 8) = 13LL;
  *(_BYTE *)(v9 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  uint64_t v13 = (char *)v8 + v4 + *(int *)(v2 + 48);
  *(void *)((char *)v8 + v4) = 1LL;
  *(void *)uint64_t v13 = "CONTRIBUTED_ONLY";
  *((void *)v13 + 1) = 16LL;
  v13[16] = 2;
  v12();
  uint64_t v14 = (uint64_t)v8 + 2 * v4 + *(int *)(v2 + 48);
  *(void *)((char *)v8 + 2 * v4) = 2LL;
  *(void *)uint64_t v14 = "ALL";
  *(void *)(v14 + 8) = 3LL;
  *(_BYTE *)(v14 + 16) = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t Goldilocks_RecordRetentionPolicy._protobuf_nameMap.unsafeMutableAddressor()
{
  return sub_1000B9E20( &qword_1002918E0,  (uint64_t)static Goldilocks_RecordRetentionPolicy._protobuf_nameMap,  (uint64_t)sub_1000F5698);
}

uint64_t static Goldilocks_RecordRetentionPolicy._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000B9E7C( &qword_1002918E0,  (uint64_t)static Goldilocks_RecordRetentionPolicy._protobuf_nameMap,  (uint64_t)sub_1000F5698,  a1);
}

uint64_t sub_1000F5860@<X0>(uint64_t a1@<X8>)
{
  return sub_1000BA0EC( &qword_1002918E0,  (uint64_t)static Goldilocks_RecordRetentionPolicy._protobuf_nameMap,  (uint64_t)sub_1000F5698,  a1);
}

uint64_t sub_1000F587C()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_1000BECFC(v0, static Goldilocks_DuplicateType._protobuf_nameMap);
  sub_1000BCFB4(v0, (uint64_t)static Goldilocks_DuplicateType._protobuf_nameMap);
  uint64_t v1 = sub_1000BED3C(&qword_100291D80);
  uint64_t v2 = sub_1000BED3C(&qword_100291D88);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 2 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_100212570;
  uint64_t v8 = (void *)(v7 + v6);
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  *uint64_t v8 = 0LL;
  *(void *)uint64_t v9 = "NOT_A_DUPLICATE";
  *(void *)(v9 + 8) = 15LL;
  *(_BYTE *)(v9 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  uint64_t v13 = (char *)v8 + v4 + *(int *)(v2 + 48);
  *(void *)((char *)v8 + v4) = 1LL;
  *(void *)uint64_t v13 = "EXACT_DUPLICATE";
  *((void *)v13 + 1) = 15LL;
  v13[16] = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t Goldilocks_DuplicateType._protobuf_nameMap.unsafeMutableAddressor()
{
  return sub_1000B9E20( &qword_1002918E8,  (uint64_t)static Goldilocks_DuplicateType._protobuf_nameMap,  (uint64_t)sub_1000F587C);
}

uint64_t static Goldilocks_DuplicateType._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000B9E7C( &qword_1002918E8,  (uint64_t)static Goldilocks_DuplicateType._protobuf_nameMap,  (uint64_t)sub_1000F587C,  a1);
}

uint64_t sub_1000F5A08@<X0>(uint64_t a1@<X8>)
{
  return sub_1000BA0EC( &qword_1002918E8,  (uint64_t)static Goldilocks_DuplicateType._protobuf_nameMap,  (uint64_t)sub_1000F587C,  a1);
}

void *Goldilocks_InitiateExitRequest.protoMessageName.unsafeMutableAddressor()
{
  return &static Goldilocks_InitiateExitRequest.protoMessageName;
}

unint64_t static Goldilocks_InitiateExitRequest.protoMessageName.getter()
{
  return 0xD00000000000001ELL;
}

uint64_t sub_1000F5A4C()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_1000BECFC(v0, static Goldilocks_InitiateExitRequest._protobuf_nameMap);
  sub_1000BCFB4(v0, (uint64_t)static Goldilocks_InitiateExitRequest._protobuf_nameMap);
  uint64_t v1 = sub_1000BED3C(&qword_100291D80);
  uint64_t v2 = sub_1000BED3C(&qword_100291D88);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 9 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002135A0;
  uint64_t v8 = v7 + v6;
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  *(void *)(v7 + v6) = 1LL;
  *(void *)uint64_t v9 = "operationID";
  *(void *)(v9 + 8) = 11LL;
  *(_BYTE *)(v9 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  uint64_t v13 = v8 + v4 + *(int *)(v2 + 48);
  *(void *)(v8 + v4) = 2LL;
  *(void *)uint64_t v13 = "sharedZoneID";
  *(void *)(v13 + 8) = 12LL;
  *(_BYTE *)(v13 + 16) = 2;
  v12();
  uint64_t v14 = (void *)(v8 + 2 * v4);
  uint64_t v15 = (char *)v14 + *(int *)(v2 + 48);
  void *v14 = 3LL;
  *(void *)uint64_t v15 = "exitType";
  *((void *)v15 + 1) = 8LL;
  v15[16] = 2;
  v12();
  uint64_t v16 = (void *)(v8 + 3 * v4);
  uint64_t v17 = (char *)v16 + *(int *)(v2 + 48);
  *uint64_t v16 = 4LL;
  *(void *)uint64_t v17 = "retentionPolicy";
  *((void *)v17 + 1) = 15LL;
  _BYTE v17[16] = 2;
  v12();
  uint64_t v18 = (void *)(v8 + 4 * v4);
  uint64_t v19 = (char *)v18 + *(int *)(v2 + 48);
  void *v18 = 5LL;
  *(void *)uint64_t v19 = "participantUserIDsToRemove";
  *((void *)v19 + 1) = 26LL;
  v19[16] = 2;
  v12();
  uint64_t v20 = (void *)(v8 + 5 * v4);
  uint64_t v21 = (char *)v20 + *(int *)(v2 + 48);
  *uint64_t v20 = 6LL;
  *(void *)uint64_t v21 = "participantIDsToRemove";
  *((void *)v21 + 1) = 22LL;
  v21[16] = 2;
  v12();
  char v22 = (void *)(v8 + 6 * v4);
  uint64_t v23 = (char *)v22 + *(int *)(v2 + 48);
  *char v22 = 8LL;
  *(void *)uint64_t v23 = "zoneTtlForICPLExit";
  *((void *)v23 + 1) = 18LL;
  _BYTE v23[16] = 2;
  v12();
  uint64_t v24 = (void *)(v8 + 7 * v4);
  int v25 = (char *)v24 + *(int *)(v2 + 48);
  *uint64_t v24 = 9LL;
  *(void *)int v25 = "exitSource";
  *((void *)v25 + 1) = 10LL;
  _BYTE v25[16] = 2;
  v12();
  uint64_t v26 = v8 + 8 * v4 + *(int *)(v2 + 48);
  *(void *)(v8 + 8 * v4) = 101LL;
  *(void *)uint64_t v26 = "stopAtStage";
  *(void *)(v26 + 8) = 11LL;
  *(_BYTE *)(v26 + 16) = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t Goldilocks_InitiateExitRequest._protobuf_nameMap.unsafeMutableAddressor()
{
  return sub_1000B9E20( &qword_1002918F0,  (uint64_t)static Goldilocks_InitiateExitRequest._protobuf_nameMap,  (uint64_t)sub_1000F5A4C);
}

uint64_t static Goldilocks_InitiateExitRequest._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000B9E7C( &qword_1002918F0,  (uint64_t)static Goldilocks_InitiateExitRequest._protobuf_nameMap,  (uint64_t)sub_1000F5A4C,  a1);
}

uint64_t Goldilocks_InitiateExitRequest.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  uint64_t v9 = v4;
  if (!v4)
  {
    while ((v8 & 1) == 0)
    {
      switch(result)
      {
        case 1LL:
          uint64_t v10 = v9;
          dispatch thunk of Decoder.decodeSingularStringField(value:)(v3, a2, a3);
          goto LABEL_17;
        case 2LL:
          uint64_t v14 = v3 + *(int *)(type metadata accessor for Goldilocks_InitiateExitRequest(0LL) + 52);
          uint64_t v15 = type metadata accessor for Goldilocks_ZoneID(0LL);
          uint64_t v16 = sub_1000BD35C( &qword_100293CD0,  type metadata accessor for Goldilocks_ZoneID,  (uint64_t)&protocol conformance descriptor for Goldilocks_ZoneID);
          uint64_t v10 = v9;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)(v14, v15, v16, a2, a3);
          goto LABEL_17;
        case 3LL:
          unint64_t v11 = sub_10010558C();
          uint64_t v12 = v3 + 16;
          uint64_t v13 = &type metadata for Goldilocks_ExitType;
          goto LABEL_16;
        case 4LL:
          unint64_t v11 = sub_100105548();
          uint64_t v12 = v3 + 32;
          uint64_t v13 = &type metadata for Goldilocks_RecordRetentionPolicy;
          goto LABEL_16;
        case 5LL:
          uint64_t v17 = v3 + 48;
          goto LABEL_13;
        case 6LL:
          uint64_t v17 = v3 + 56;
LABEL_13:
          uint64_t v10 = v9;
          dispatch thunk of Decoder.decodeRepeatedStringField(value:)(v17, a2, a3);
          goto LABEL_17;
        case 7LL:
          goto LABEL_18;
        case 8LL:
          uint64_t v10 = v9;
          dispatch thunk of Decoder.decodeSingularInt64Field(value:)(v3 + 64, a2, a3);
          goto LABEL_17;
        case 9LL:
          unint64_t v11 = sub_100105504();
          uint64_t v12 = v3 + 72;
          uint64_t v13 = &type metadata for Goldilocks_ExitSource;
          goto LABEL_16;
        default:
          if (result != 101) {
            goto LABEL_18;
          }
          unint64_t v11 = sub_1001054C0();
          uint64_t v12 = v3 + 88;
          uint64_t v13 = &type metadata for Goldilocks_ExitStage;
LABEL_16:
          uint64_t v10 = v9;
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)(v12, v13, v11, a2, a3);
LABEL_17:
          uint64_t v9 = v10;
LABEL_18:
          uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
          break;
      }
    }
  }

  return result;
}

uint64_t Goldilocks_InitiateExitRequest.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t v9 = sub_1000BED3C(&qword_100295030);
  __chkstk_darwin(v9);
  unint64_t v11 = (char *)&v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for Goldilocks_ZoneID(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v29 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v16 = *(void *)(v5 + 8);
  uint64_t v17 = HIBYTE(v16) & 0xF;
  if ((v16 & 0x2000000000000000LL) == 0) {
    uint64_t v17 = *(void *)v5 & 0xFFFFFFFFFFFFLL;
  }
  if (!v17
    || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(*(void *)v5, v16), !v4))
  {
    uint64_t v31 = type metadata accessor for Goldilocks_InitiateExitRequest(0LL);
    sub_1000CE7B4(v5 + *(int *)(v31 + 52), (uint64_t)v11, &qword_100295030);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1LL, v12) == 1)
    {
      sub_1000CEDAC((uint64_t)v11, &qword_100295030);
    }

    else
    {
      sub_1000CEC9C((uint64_t)v11, (uint64_t)v15, type metadata accessor for Goldilocks_ZoneID);
      uint64_t v19 = sub_1000BD35C( &qword_100293CD0,  type metadata accessor for Goldilocks_ZoneID,  (uint64_t)&protocol conformance descriptor for Goldilocks_ZoneID);
      dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v15, 2LL, v12, v19, a2, a3);
      uint64_t result = sub_1000CECE0((uint64_t)v15, type metadata accessor for Goldilocks_ZoneID);
      if (v4) {
        return result;
      }
    }

    if (!*(void *)(v5 + 16)
      || (char v20 = *(_BYTE *)(v5 + 24),
          uint64_t v29 = *(void *)(v5 + 16),
          char v30 = v20,
          unint64_t v21 = sub_10010558C(),
          uint64_t result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)( &v29,  3LL,  &type metadata for Goldilocks_ExitType,  v21,  a2,  a3),  !v4))
    {
      if (!*(void *)(v5 + 32)
        || (char v22 = *(_BYTE *)(v5 + 40),
            uint64_t v29 = *(void *)(v5 + 32),
            char v30 = v22,
            unint64_t v23 = sub_100105548(),
            uint64_t result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)( &v29,  4LL,  &type metadata for Goldilocks_RecordRetentionPolicy,  v23,  a2,  a3),  !v4))
      {
        if (!*(void *)(*(void *)(v5 + 48) + 16LL)
          || (uint64_t result = dispatch thunk of Visitor.visitRepeatedStringField(value:fieldNumber:)(), !v4))
        {
          if (!*(void *)(*(void *)(v5 + 56) + 16LL)
            || (uint64_t result = dispatch thunk of Visitor.visitRepeatedStringField(value:fieldNumber:)(), !v4))
          {
            uint64_t v24 = *(void *)(v5 + 64);
            if (!v24
              || (uint64_t result = dispatch thunk of Visitor.visitSingularInt64Field(value:fieldNumber:)(v24, 8LL, a2, a3), !v4))
            {
              if (!*(void *)(v5 + 72)
                || (char v25 = *(_BYTE *)(v5 + 80),
                    uint64_t v29 = *(void *)(v5 + 72),
                    char v30 = v25,
                    unint64_t v26 = sub_100105504(),
                    uint64_t result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)( &v29,  9LL,  &type metadata for Goldilocks_ExitSource,  v26,  a2,  a3),  !v4))
              {
                if (!*(void *)(v5 + 88)) {
                  return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
                }
                char v27 = *(_BYTE *)(v5 + 96);
                uint64_t v29 = *(void *)(v5 + 88);
                char v30 = v27;
                unint64_t v28 = sub_1001054C0();
                uint64_t result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)( &v29,  101LL,  &type metadata for Goldilocks_ExitStage,  v28,  a2,  a3);
                if (!v4) {
                  return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
                }
              }
            }
          }
        }
      }
    }
  }

  return result;
}

Swift::Int Goldilocks_InitiateExitRequest.hashValue.getter()
{
  return sub_1000BC318( type metadata accessor for Goldilocks_InitiateExitRequest,  &qword_100293CD8,  (uint64_t)&protocol conformance descriptor for Goldilocks_InitiateExitRequest);
}

uint64_t sub_1000F62E0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0LL;
  *(void *)(a2 + 8) = 0xE000000000000000LL;
  *(void *)(a2 + 16) = 0LL;
  *(_BYTE *)(a2 + 24) = 1;
  *(void *)(a2 + 32) = 0LL;
  *(_BYTE *)(a2 + 40) = 1;
  *(void *)(a2 + 48) = &_swiftEmptyArrayStorage;
  *(void *)(a2 + 56) = &_swiftEmptyArrayStorage;
  *(void *)(a2 + 64) = 0LL;
  *(void *)(a2 + 72) = 0LL;
  *(_BYTE *)(a2 + 80) = 1;
  *(void *)(a2 + 88) = 0LL;
  *(_BYTE *)(a2 + 96) = 1;
  UnknownStorage.init()(a1);
  uint64_t v4 = a2 + *(int *)(a1 + 52);
  uint64_t v5 = type metadata accessor for Goldilocks_ZoneID(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56LL))(v4, 1LL, 1LL, v5);
}

uint64_t sub_1000F636C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return Goldilocks_InitiateExitRequest.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t sub_1000F6380(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return Goldilocks_InitiateExitRequest.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t sub_1000F6394(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000BD35C( &qword_100294DE8,  type metadata accessor for Goldilocks_InitiateExitRequest,  (uint64_t)&protocol conformance descriptor for Goldilocks_InitiateExitRequest);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000F63E4@<X0>(uint64_t a1@<X8>)
{
  return sub_1000BA0EC( &qword_1002918F0,  (uint64_t)static Goldilocks_InitiateExitRequest._protobuf_nameMap,  (uint64_t)sub_1000F5A4C,  a1);
}

uint64_t sub_1000F6400(uint64_t a1)
{
  uint64_t v2 = sub_1000BD35C( &qword_100293A90,  type metadata accessor for Goldilocks_InitiateExitRequest,  (uint64_t)&protocol conformance descriptor for Goldilocks_InitiateExitRequest);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000F6440(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000BD35C( &qword_100293A90,  type metadata accessor for Goldilocks_InitiateExitRequest,  (uint64_t)&protocol conformance descriptor for Goldilocks_InitiateExitRequest);
  return Message.hash(into:)(a1, a2, v4);
}

void *Goldilocks_InitiateExitResponse.protoMessageName.unsafeMutableAddressor()
{
  return &static Goldilocks_InitiateExitResponse.protoMessageName;
}

unint64_t static Goldilocks_InitiateExitResponse.protoMessageName.getter()
{
  return 0xD00000000000001FLL;
}

uint64_t sub_1000F64B8()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_1000BECFC(v0, static Goldilocks_InitiateExitResponse._protobuf_nameMap);
  sub_1000BCFB4(v0, (uint64_t)static Goldilocks_InitiateExitResponse._protobuf_nameMap);
  uint64_t v1 = sub_1000BED3C(&qword_100291D80);
  uint64_t v2 = sub_1000BED3C(&qword_100291D88);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 3 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002135D0;
  char v8 = (void *)(v7 + v6);
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  *char v8 = 1LL;
  *(void *)uint64_t v9 = "operationID";
  *(void *)(v9 + 8) = 11LL;
  *(_BYTE *)(v9 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  uint64_t v13 = (char *)v8 + v4 + *(int *)(v2 + 48);
  *(void *)((char *)v8 + v4) = 2LL;
  *(void *)uint64_t v13 = "batchError";
  *((void *)v13 + 1) = 10LL;
  v13[16] = 2;
  v12();
  uint64_t v14 = (uint64_t)v8 + 2 * v4 + *(int *)(v2 + 48);
  *(void *)((char *)v8 + 2 * v4) = 3LL;
  *(void *)uint64_t v14 = "participantExitResult";
  *(void *)(v14 + 8) = 21LL;
  *(_BYTE *)(v14 + 16) = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t Goldilocks_InitiateExitResponse._protobuf_nameMap.unsafeMutableAddressor()
{
  return sub_1000B9E20( &qword_1002918F8,  (uint64_t)static Goldilocks_InitiateExitResponse._protobuf_nameMap,  (uint64_t)sub_1000F64B8);
}

uint64_t static Goldilocks_InitiateExitResponse._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000B9E7C( &qword_1002918F8,  (uint64_t)static Goldilocks_InitiateExitResponse._protobuf_nameMap,  (uint64_t)sub_1000F64B8,  a1);
}

uint64_t Goldilocks_InitiateExitResponse.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000F7D78( a1,  a2,  a3,  type metadata accessor for Goldilocks_InitiateExitResponse,  type metadata accessor for Goldilocks_ParticipantExitResult,  &qword_100293CE0,  (uint64_t)&protocol conformance descriptor for Goldilocks_ParticipantExitResult);
}

uint64_t Goldilocks_InitiateExitResponse.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000F7F34( a1,  a2,  a3,  type metadata accessor for Goldilocks_InitiateExitResponse,  type metadata accessor for Goldilocks_ParticipantExitResult,  &qword_100293CE0,  (uint64_t)&protocol conformance descriptor for Goldilocks_ParticipantExitResult);
}

uint64_t static Goldilocks_InitiateExitResponse.== infix(_:_:)(uint64_t *a1, void *a2)
{
  return sub_10010326C( a1,  a2,  type metadata accessor for Goldilocks_InitiateExitResponse,  type metadata accessor for Goldilocks_ParticipantExitResult,  _s22CloudKitImplementation32Goldilocks_ParticipantExitResultV2eeoiySbAC_ACtFZ_0) & 1;
}

Swift::Int Goldilocks_InitiateExitResponse.hashValue.getter()
{
  return sub_1000BC318( type metadata accessor for Goldilocks_InitiateExitResponse,  &qword_100293CE8,  (uint64_t)&protocol conformance descriptor for Goldilocks_InitiateExitResponse);
}

uint64_t sub_1000F6738@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return sub_1000F7618(a1, type metadata accessor for Goldilocks_ErrorInfo.ResultError, a2);
}

uint64_t sub_1000F6744(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return Goldilocks_InitiateExitResponse.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t sub_1000F6758(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return Goldilocks_InitiateExitResponse.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t sub_1000F676C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000BD35C( &qword_100294DE0,  type metadata accessor for Goldilocks_InitiateExitResponse,  (uint64_t)&protocol conformance descriptor for Goldilocks_InitiateExitResponse);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000F67BC@<X0>(uint64_t a1@<X8>)
{
  return sub_1000BA0EC( &qword_1002918F8,  (uint64_t)static Goldilocks_InitiateExitResponse._protobuf_nameMap,  (uint64_t)sub_1000F64B8,  a1);
}

uint64_t sub_1000F67D8(uint64_t a1)
{
  uint64_t v2 = sub_1000BD35C( &qword_100293EF8,  type metadata accessor for Goldilocks_InitiateExitResponse,  (uint64_t)&protocol conformance descriptor for Goldilocks_InitiateExitResponse);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000F6818(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000BD35C( &qword_100293EF8,  type metadata accessor for Goldilocks_InitiateExitResponse,  (uint64_t)&protocol conformance descriptor for Goldilocks_InitiateExitResponse);
  return Message.hash(into:)(a1, a2, v4);
}

void *Goldilocks_ParticipantExitResult.protoMessageName.unsafeMutableAddressor()
{
  return &static Goldilocks_ParticipantExitResult.protoMessageName;
}

unint64_t static Goldilocks_ParticipantExitResult.protoMessageName.getter()
{
  return 0xD000000000000020LL;
}

uint64_t sub_1000F6890()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_1000BECFC(v0, static Goldilocks_ParticipantExitResult._protobuf_nameMap);
  sub_1000BCFB4(v0, (uint64_t)static Goldilocks_ParticipantExitResult._protobuf_nameMap);
  uint64_t v1 = sub_1000BED3C(&qword_100291D80);
  uint64_t v2 = sub_1000BED3C(&qword_100291D88);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 3 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002135D0;
  char v8 = (void *)(v7 + v6);
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  *char v8 = 1LL;
  *(void *)uint64_t v9 = "participantUserID";
  *(void *)(v9 + 8) = 17LL;
  *(_BYTE *)(v9 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  uint64_t v13 = (char *)v8 + v4 + *(int *)(v2 + 48);
  *(void *)((char *)v8 + v4) = 2LL;
  *(void *)uint64_t v13 = "resultError";
  *((void *)v13 + 1) = 11LL;
  v13[16] = 2;
  v12();
  uint64_t v14 = (uint64_t)v8 + 2 * v4 + *(int *)(v2 + 48);
  *(void *)((char *)v8 + 2 * v4) = 3LL;
  *(void *)uint64_t v14 = "exitZoneID";
  *(void *)(v14 + 8) = 10LL;
  *(_BYTE *)(v14 + 16) = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t Goldilocks_ParticipantExitResult._protobuf_nameMap.unsafeMutableAddressor()
{
  return sub_1000B9E20( &qword_100291900,  (uint64_t)static Goldilocks_ParticipantExitResult._protobuf_nameMap,  (uint64_t)sub_1000F6890);
}

uint64_t static Goldilocks_ParticipantExitResult._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000B9E7C( &qword_100291900,  (uint64_t)static Goldilocks_ParticipantExitResult._protobuf_nameMap,  (uint64_t)sub_1000F6890,  a1);
}

uint64_t Goldilocks_ParticipantExitResult.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  if (!v4)
  {
    while (1)
    {
      if ((v8 & 1) != 0) {
        return result;
      }
      if (result == 3) {
        break;
      }
      if (result == 2)
      {
        uint64_t v9 = v3 + *(int *)(type metadata accessor for Goldilocks_ParticipantExitResult(0LL) + 24);
        uint64_t v10 = type metadata accessor for Goldilocks_ErrorInfo.ResultError(0LL);
        uint64_t v11 = &qword_100295070;
        uint64_t v12 = type metadata accessor for Goldilocks_ErrorInfo.ResultError;
        uint64_t v13 = &protocol conformance descriptor for Goldilocks_ErrorInfo.ResultError;
        goto LABEL_5;
      }

      if (result == 1) {
        dispatch thunk of Decoder.decodeSingularStringField(value:)(v3, a2, a3);
      }
LABEL_11:
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }

    uint64_t v9 = v3 + *(int *)(type metadata accessor for Goldilocks_ParticipantExitResult(0LL) + 28);
    uint64_t v10 = type metadata accessor for Goldilocks_ZoneID(0LL);
    uint64_t v11 = &qword_100293CD0;
    uint64_t v12 = type metadata accessor for Goldilocks_ZoneID;
    uint64_t v13 = &protocol conformance descriptor for Goldilocks_ZoneID;
LABEL_5:
    uint64_t v14 = sub_1000BD35C(v11, v12, (uint64_t)v13);
    dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)(v9, v10, v14, a2, a3);
    goto LABEL_11;
  }

  return result;
}

uint64_t Goldilocks_ParticipantExitResult.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t v9 = sub_1000BED3C(&qword_100295030);
  __chkstk_darwin(v9);
  uint64_t v34 = (uint64_t)&v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v35 = type metadata accessor for Goldilocks_ZoneID(0LL);
  uint64_t v33 = *(void *)(v35 - 8);
  __chkstk_darwin(v35);
  uint64_t v32 = (uint64_t)&v31 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = sub_1000BED3C(&qword_100293C98);
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v31 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = type metadata accessor for Goldilocks_ErrorInfo.ResultError(0LL);
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  uint64_t v18 = (char *)&v31 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = *v5;
  unint64_t v20 = v5[1];
  uint64_t v21 = HIBYTE(v20) & 0xF;
  if ((v20 & 0x2000000000000000LL) == 0) {
    uint64_t v21 = *v5 & 0xFFFFFFFFFFFFLL;
  }
  uint64_t v37 = a3;
  uint64_t v36 = a2;
  if (v21)
  {
    uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(v19, v20);
    uint64_t v23 = a1;
    if (v4) {
      return result;
    }
  }

  else
  {
    uint64_t v23 = a1;
  }

  uint64_t v24 = type metadata accessor for Goldilocks_ParticipantExitResult(0LL);
  sub_1000CE7B4((uint64_t)v5 + *(int *)(v24 + 24), (uint64_t)v14, &qword_100293C98);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1LL, v15) == 1)
  {
    sub_1000CEDAC((uint64_t)v14, &qword_100293C98);
  }

  else
  {
    sub_1000CEC9C((uint64_t)v14, (uint64_t)v18, type metadata accessor for Goldilocks_ErrorInfo.ResultError);
    uint64_t v25 = sub_1000BD35C( &qword_100295070,  type metadata accessor for Goldilocks_ErrorInfo.ResultError,  (uint64_t)&protocol conformance descriptor for Goldilocks_ErrorInfo.ResultError);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v18, 2LL, v15, v25, v36, v37);
    uint64_t result = sub_1000CECE0((uint64_t)v18, type metadata accessor for Goldilocks_ErrorInfo.ResultError);
    if (v4) {
      return result;
    }
  }

  uint64_t v26 = v34;
  sub_1000CE7B4((uint64_t)v5 + *(int *)(v24 + 28), v34, &qword_100295030);
  uint64_t v27 = v35;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v33 + 48))(v26, 1LL, v35) == 1)
  {
    sub_1000CEDAC(v26, &qword_100295030);
  }

  else
  {
    uint64_t v28 = v26;
    uint64_t v29 = v32;
    sub_1000CEC9C(v28, v32, type metadata accessor for Goldilocks_ZoneID);
    uint64_t v30 = sub_1000BD35C( &qword_100293CD0,  type metadata accessor for Goldilocks_ZoneID,  (uint64_t)&protocol conformance descriptor for Goldilocks_ZoneID);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v29, 3LL, v27, v30, v36, v37);
    uint64_t result = sub_1000CECE0(v29, type metadata accessor for Goldilocks_ZoneID);
    if (v4) {
      return result;
    }
  }

  return UnknownStorage.traverse<A>(visitor:)(v23, v36, v37);
}

Swift::Int Goldilocks_ParticipantExitResult.hashValue.getter()
{
  return sub_1000BC318( type metadata accessor for Goldilocks_ParticipantExitResult,  &qword_100293CF0,  (uint64_t)&protocol conformance descriptor for Goldilocks_ParticipantExitResult);
}

uint64_t sub_1000F6EFC@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = 0LL;
  a2[1] = 0xE000000000000000LL;
  UnknownStorage.init()(a1);
  uint64_t v4 = (char *)a2 + *(int *)(a1 + 24);
  uint64_t v5 = type metadata accessor for Goldilocks_ErrorInfo.ResultError(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56LL))(v4, 1LL, 1LL, v5);
  uint64_t v6 = (char *)a2 + *(int *)(a1 + 28);
  uint64_t v7 = type metadata accessor for Goldilocks_ZoneID(0LL);
  return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL))(v6, 1LL, 1LL, v7);
}

uint64_t sub_1000F6F8C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return Goldilocks_ParticipantExitResult.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t sub_1000F6FA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return Goldilocks_ParticipantExitResult.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t sub_1000F6FB4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000BD35C( &qword_100294DD8,  type metadata accessor for Goldilocks_ParticipantExitResult,  (uint64_t)&protocol conformance descriptor for Goldilocks_ParticipantExitResult);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000F7004@<X0>(uint64_t a1@<X8>)
{
  return sub_1000BA0EC( &qword_100291900,  (uint64_t)static Goldilocks_ParticipantExitResult._protobuf_nameMap,  (uint64_t)sub_1000F6890,  a1);
}

uint64_t sub_1000F7020(uint64_t a1)
{
  uint64_t v2 = sub_1000BD35C( &qword_100293CE0,  type metadata accessor for Goldilocks_ParticipantExitResult,  (uint64_t)&protocol conformance descriptor for Goldilocks_ParticipantExitResult);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000F7060(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000BD35C( &qword_100293CE0,  type metadata accessor for Goldilocks_ParticipantExitResult,  (uint64_t)&protocol conformance descriptor for Goldilocks_ParticipantExitResult);
  return Message.hash(into:)(a1, a2, v4);
}

void *Goldilocks_CheckDuplicatesRequest.protoMessageName.unsafeMutableAddressor()
{
  return &static Goldilocks_CheckDuplicatesRequest.protoMessageName;
}

unint64_t static Goldilocks_CheckDuplicatesRequest.protoMessageName.getter()
{
  return 0xD000000000000021LL;
}

uint64_t sub_1000F70DC()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_1000BECFC(v0, static Goldilocks_CheckDuplicatesRequest._protobuf_nameMap);
  sub_1000BCFB4(v0, (uint64_t)static Goldilocks_CheckDuplicatesRequest._protobuf_nameMap);
  uint64_t v1 = sub_1000BED3C(&qword_100291D80);
  uint64_t v2 = sub_1000BED3C(&qword_100291D88);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 3 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002135D0;
  char v8 = (void *)(v7 + v6);
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  *char v8 = 1LL;
  *(void *)uint64_t v9 = "operationID";
  *(void *)(v9 + 8) = 11LL;
  *(_BYTE *)(v9 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  uint64_t v13 = (char *)v8 + v4 + *(int *)(v2 + 48);
  *(void *)((char *)v8 + v4) = 2LL;
  *(void *)uint64_t v13 = "zoneID";
  *((void *)v13 + 1) = 6LL;
  v13[16] = 2;
  v12();
  uint64_t v14 = (uint64_t)v8 + 2 * v4 + *(int *)(v2 + 48);
  *(void *)((char *)v8 + 2 * v4) = 3LL;
  *(void *)uint64_t v14 = "recordIDs";
  *(void *)(v14 + 8) = 9LL;
  *(_BYTE *)(v14 + 16) = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t Goldilocks_CheckDuplicatesRequest._protobuf_nameMap.unsafeMutableAddressor()
{
  return sub_1000B9E20( &qword_100291908,  (uint64_t)static Goldilocks_CheckDuplicatesRequest._protobuf_nameMap,  (uint64_t)sub_1000F70DC);
}

uint64_t static Goldilocks_CheckDuplicatesRequest._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000B9E7C( &qword_100291908,  (uint64_t)static Goldilocks_CheckDuplicatesRequest._protobuf_nameMap,  (uint64_t)sub_1000F70DC,  a1);
}

uint64_t Goldilocks_CheckDuplicatesRequest.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  uint64_t v9 = v4;
  if (!v4)
  {
    while (1)
    {
      if ((v8 & 1) != 0) {
        return result;
      }
      if (result == 3) {
        break;
      }
      if (result == 2)
      {
        uint64_t v11 = v3 + *(int *)(type metadata accessor for Goldilocks_CheckDuplicatesRequest(0LL) + 28);
        uint64_t v12 = type metadata accessor for Goldilocks_ZoneID(0LL);
        uint64_t v13 = sub_1000BD35C( &qword_100293CD0,  type metadata accessor for Goldilocks_ZoneID,  (uint64_t)&protocol conformance descriptor for Goldilocks_ZoneID);
        uint64_t v10 = v9;
        dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)(v11, v12, v13, a2, a3);
        goto LABEL_5;
      }

      if (result == 1)
      {
        uint64_t v10 = v9;
        dispatch thunk of Decoder.decodeSingularStringField(value:)(v3, a2, a3);
        goto LABEL_5;
      }

uint64_t Goldilocks_CheckDuplicatesRequest.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t v9 = sub_1000BED3C(&qword_100295030);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for Goldilocks_ZoneID(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v23 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = *v5;
  unint64_t v17 = v5[1];
  uint64_t v18 = HIBYTE(v17) & 0xF;
  if ((v17 & 0x2000000000000000LL) == 0) {
    uint64_t v18 = *v5 & 0xFFFFFFFFFFFFLL;
  }
  uint64_t v25 = a3;
  uint64_t v24 = a1;
  if (v18)
  {
    uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(v16, v17);
    uint64_t v20 = a2;
    if (v4) {
      return result;
    }
  }

  else
  {
    uint64_t v20 = a2;
  }

  uint64_t v21 = type metadata accessor for Goldilocks_CheckDuplicatesRequest(0LL);
  sub_1000CE7B4((uint64_t)v5 + *(int *)(v21 + 28), (uint64_t)v11, &qword_100295030);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1LL, v12) == 1)
  {
    sub_1000CEDAC((uint64_t)v11, &qword_100295030);
  }

  else
  {
    sub_1000CEC9C((uint64_t)v11, (uint64_t)v15, type metadata accessor for Goldilocks_ZoneID);
    uint64_t v22 = sub_1000BD35C( &qword_100293CD0,  type metadata accessor for Goldilocks_ZoneID,  (uint64_t)&protocol conformance descriptor for Goldilocks_ZoneID);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v15, 2LL, v12, v22, v20, v25);
    uint64_t result = sub_1000CECE0((uint64_t)v15, type metadata accessor for Goldilocks_ZoneID);
    if (v4) {
      return result;
    }
  }

  if (!*(void *)(v5[2] + 16)) {
    return UnknownStorage.traverse<A>(visitor:)(v24, v20, v25);
  }
  uint64_t result = dispatch thunk of Visitor.visitRepeatedStringField(value:fieldNumber:)();
  if (!v4) {
    return UnknownStorage.traverse<A>(visitor:)(v24, v20, v25);
  }
  return result;
}

Swift::Int Goldilocks_CheckDuplicatesRequest.hashValue.getter()
{
  return sub_1000BC318( type metadata accessor for Goldilocks_CheckDuplicatesRequest,  &qword_100293CF8,  (uint64_t)&protocol conformance descriptor for Goldilocks_CheckDuplicatesRequest);
}

uint64_t sub_1000F760C@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return sub_1000F7618(a1, type metadata accessor for Goldilocks_ZoneID, a2);
}

uint64_t sub_1000F7618@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(void)@<X2>, void *a3@<X8>)
{
  *a3 = 0LL;
  a3[1] = 0xE000000000000000LL;
  a3[2] = &_swiftEmptyArrayStorage;
  UnknownStorage.init()();
  uint64_t v6 = (char *)a3 + *(int *)(a1 + 28);
  uint64_t v7 = a2(0LL);
  return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL))(v6, 1LL, 1LL, v7);
}

uint64_t sub_1000F768C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return Goldilocks_CheckDuplicatesRequest.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t sub_1000F76A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return Goldilocks_CheckDuplicatesRequest.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t sub_1000F76B4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000BD35C( &qword_100294DD0,  type metadata accessor for Goldilocks_CheckDuplicatesRequest,  (uint64_t)&protocol conformance descriptor for Goldilocks_CheckDuplicatesRequest);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000F7704@<X0>(uint64_t a1@<X8>)
{
  return sub_1000BA0EC( &qword_100291908,  (uint64_t)static Goldilocks_CheckDuplicatesRequest._protobuf_nameMap,  (uint64_t)sub_1000F70DC,  a1);
}

uint64_t sub_1000F7720(uint64_t a1)
{
  uint64_t v2 = sub_1000BD35C( &qword_100293A98,  type metadata accessor for Goldilocks_CheckDuplicatesRequest,  (uint64_t)&protocol conformance descriptor for Goldilocks_CheckDuplicatesRequest);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000F7760(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000BD35C( &qword_100293A98,  type metadata accessor for Goldilocks_CheckDuplicatesRequest,  (uint64_t)&protocol conformance descriptor for Goldilocks_CheckDuplicatesRequest);
  return Message.hash(into:)(a1, a2, v4);
}

void *Goldilocks_CheckDuplicatesResponse.protoMessageName.unsafeMutableAddressor()
{
  return &static Goldilocks_CheckDuplicatesResponse.protoMessageName;
}

unint64_t static Goldilocks_CheckDuplicatesResponse.protoMessageName.getter()
{
  return 0xD000000000000022LL;
}

uint64_t sub_1000F77D8()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_1000BECFC(v0, static Goldilocks_CheckDuplicatesResponse._protobuf_nameMap);
  sub_1000BCFB4(v0, (uint64_t)static Goldilocks_CheckDuplicatesResponse._protobuf_nameMap);
  uint64_t v1 = sub_1000BED3C(&qword_100291D80);
  uint64_t v2 = sub_1000BED3C(&qword_100291D88);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 3 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002135D0;
  char v8 = (void *)(v7 + v6);
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  *char v8 = 1LL;
  *(void *)uint64_t v9 = "operationID";
  *(void *)(v9 + 8) = 11LL;
  *(_BYTE *)(v9 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  uint64_t v13 = (char *)v8 + v4 + *(int *)(v2 + 48);
  *(void *)((char *)v8 + v4) = 2LL;
  *(void *)uint64_t v13 = "batchError";
  *((void *)v13 + 1) = 10LL;
  v13[16] = 2;
  v12();
  uint64_t v14 = (uint64_t)v8 + 2 * v4 + *(int *)(v2 + 48);
  *(void *)((char *)v8 + 2 * v4) = 3LL;
  *(void *)uint64_t v14 = "duplicateStates";
  *(void *)(v14 + 8) = 15LL;
  *(_BYTE *)(v14 + 16) = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t Goldilocks_CheckDuplicatesResponse._protobuf_nameMap.unsafeMutableAddressor()
{
  return sub_1000B9E20( &qword_100291910,  (uint64_t)static Goldilocks_CheckDuplicatesResponse._protobuf_nameMap,  (uint64_t)sub_1000F77D8);
}

uint64_t static Goldilocks_CheckDuplicatesResponse._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000B9E7C( &qword_100291910,  (uint64_t)static Goldilocks_CheckDuplicatesResponse._protobuf_nameMap,  (uint64_t)sub_1000F77D8,  a1);
}

uint64_t Goldilocks_CheckDuplicatesResponse.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000F7D78( a1,  a2,  a3,  type metadata accessor for Goldilocks_CheckDuplicatesResponse,  type metadata accessor for Goldilocks_DuplicateState,  &qword_100293D00,  (uint64_t)&protocol conformance descriptor for Goldilocks_DuplicateState);
}

uint64_t Goldilocks_CheckDuplicatesResponse.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000F7F34( a1,  a2,  a3,  type metadata accessor for Goldilocks_CheckDuplicatesResponse,  type metadata accessor for Goldilocks_DuplicateState,  &qword_100293D00,  (uint64_t)&protocol conformance descriptor for Goldilocks_DuplicateState);
}

Swift::Int Goldilocks_CheckDuplicatesResponse.hashValue.getter()
{
  return sub_1000BC318( type metadata accessor for Goldilocks_CheckDuplicatesResponse,  &qword_100293D08,  (uint64_t)&protocol conformance descriptor for Goldilocks_CheckDuplicatesResponse);
}

uint64_t sub_1000F7A2C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return Goldilocks_CheckDuplicatesResponse.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t sub_1000F7A40(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return Goldilocks_CheckDuplicatesResponse.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t sub_1000F7A54(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000BD35C( &qword_100294DC8,  type metadata accessor for Goldilocks_CheckDuplicatesResponse,  (uint64_t)&protocol conformance descriptor for Goldilocks_CheckDuplicatesResponse);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000F7AA4@<X0>(uint64_t a1@<X8>)
{
  return sub_1000BA0EC( &qword_100291910,  (uint64_t)static Goldilocks_CheckDuplicatesResponse._protobuf_nameMap,  (uint64_t)sub_1000F77D8,  a1);
}

uint64_t sub_1000F7AC0(uint64_t a1)
{
  uint64_t v2 = sub_1000BD35C( &qword_100293F30,  type metadata accessor for Goldilocks_CheckDuplicatesResponse,  (uint64_t)&protocol conformance descriptor for Goldilocks_CheckDuplicatesResponse);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000F7B00(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000BD35C( &qword_100293F30,  type metadata accessor for Goldilocks_CheckDuplicatesResponse,  (uint64_t)&protocol conformance descriptor for Goldilocks_CheckDuplicatesResponse);
  return Message.hash(into:)(a1, a2, v4);
}

void *Goldilocks_DuplicateState.protoMessageName.unsafeMutableAddressor()
{
  return &static Goldilocks_DuplicateState.protoMessageName;
}

unint64_t static Goldilocks_DuplicateState.protoMessageName.getter()
{
  return 0xD000000000000019LL;
}

uint64_t sub_1000F7B78()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_1000BECFC(v0, static Goldilocks_DuplicateState._protobuf_nameMap);
  sub_1000BCFB4(v0, (uint64_t)static Goldilocks_DuplicateState._protobuf_nameMap);
  uint64_t v1 = sub_1000BED3C(&qword_100291D80);
  uint64_t v2 = sub_1000BED3C(&qword_100291D88);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 3 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002135D0;
  char v8 = (void *)(v7 + v6);
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  *char v8 = 1LL;
  *(void *)uint64_t v9 = "recordID";
  *(void *)(v9 + 8) = 8LL;
  *(_BYTE *)(v9 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  uint64_t v13 = (char *)v8 + v4 + *(int *)(v2 + 48);
  *(void *)((char *)v8 + v4) = 2LL;
  *(void *)uint64_t v13 = "resultError";
  *((void *)v13 + 1) = 11LL;
  v13[16] = 2;
  v12();
  uint64_t v14 = (uint64_t)v8 + 2 * v4 + *(int *)(v2 + 48);
  *(void *)((char *)v8 + 2 * v4) = 3LL;
  *(void *)uint64_t v14 = "foundDuplicates";
  *(void *)(v14 + 8) = 15LL;
  *(_BYTE *)(v14 + 16) = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t Goldilocks_DuplicateState._protobuf_nameMap.unsafeMutableAddressor()
{
  return sub_1000B9E20( &qword_100291918,  (uint64_t)static Goldilocks_DuplicateState._protobuf_nameMap,  (uint64_t)sub_1000F7B78);
}

uint64_t static Goldilocks_DuplicateState._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000B9E7C( &qword_100291918,  (uint64_t)static Goldilocks_DuplicateState._protobuf_nameMap,  (uint64_t)sub_1000F7B78,  a1);
}

uint64_t Goldilocks_DuplicateState.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000F7D78( a1,  a2,  a3,  type metadata accessor for Goldilocks_DuplicateState,  type metadata accessor for Goldilocks_FoundDuplicate,  &qword_100293D10,  (uint64_t)&protocol conformance descriptor for Goldilocks_FoundDuplicate);
}

uint64_t sub_1000F7D78( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void), uint64_t (*a5)(uint64_t), unint64_t *a6, uint64_t a7)
{
  uint64_t v13 = v7;
  uint64_t v15 = a2;
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  uint64_t v18 = v8;
  if (!v8)
  {
    while (1)
    {
      if ((v17 & 1) != 0) {
        return result;
      }
      if (result == 3) {
        break;
      }
      if (result == 2)
      {
        uint64_t v26 = v13 + *(int *)(a4(0LL) + 28);
        uint64_t v22 = v15;
        uint64_t v23 = type metadata accessor for Goldilocks_ErrorInfo.ResultError(0LL);
        uint64_t v24 = sub_1000BD35C( &qword_100295070,  type metadata accessor for Goldilocks_ErrorInfo.ResultError,  (uint64_t)&protocol conformance descriptor for Goldilocks_ErrorInfo.ResultError);
        uint64_t v25 = v23;
        uint64_t v15 = v22;
        uint64_t v21 = v18;
        dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)(v26, v25, v24, v22, a3);
        goto LABEL_5;
      }

      if (result == 1)
      {
        uint64_t v21 = v18;
        dispatch thunk of Decoder.decodeSingularStringField(value:)(v13, v15, a3);
        goto LABEL_5;
      }

uint64_t Goldilocks_DuplicateState.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000F7F34( a1,  a2,  a3,  type metadata accessor for Goldilocks_DuplicateState,  type metadata accessor for Goldilocks_FoundDuplicate,  &qword_100293D10,  (uint64_t)&protocol conformance descriptor for Goldilocks_FoundDuplicate);
}

uint64_t sub_1000F7F34( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void), uint64_t (*a5)(uint64_t), unint64_t *a6, uint64_t a7)
{
  uint64_t v33 = a5;
  uint64_t v34 = a7;
  uint64_t v32 = a6;
  uint64_t v35 = a4;
  uint64_t v9 = v7;
  uint64_t v13 = sub_1000BED3C(&qword_100293C98);
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)&v31 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = type metadata accessor for Goldilocks_ErrorInfo.ResultError(0LL);
  uint64_t v17 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  uint64_t v19 = (char *)&v31 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v20 = *v9;
  unint64_t v21 = v9[1];
  uint64_t v22 = HIBYTE(v21) & 0xF;
  if ((v21 & 0x2000000000000000LL) == 0) {
    uint64_t v22 = *v9 & 0xFFFFFFFFFFFFLL;
  }
  uint64_t v37 = a3;
  uint64_t v36 = a1;
  if (v22)
  {
    uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(v20, v21);
    uint64_t v24 = a2;
    if (v8) {
      return result;
    }
  }

  else
  {
    uint64_t v24 = a2;
  }

  uint64_t v25 = v35(0LL);
  sub_1000CE7B4((uint64_t)v9 + *(int *)(v25 + 28), (uint64_t)v15, &qword_100293C98);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1LL, v16) == 1)
  {
    sub_1000CEDAC((uint64_t)v15, &qword_100293C98);
  }

  else
  {
    sub_1000CEC9C((uint64_t)v15, (uint64_t)v19, type metadata accessor for Goldilocks_ErrorInfo.ResultError);
    uint64_t v26 = sub_1000BD35C( &qword_100295070,  type metadata accessor for Goldilocks_ErrorInfo.ResultError,  (uint64_t)&protocol conformance descriptor for Goldilocks_ErrorInfo.ResultError);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v19, 2LL, v16, v26, v24, v37);
    uint64_t result = sub_1000CECE0((uint64_t)v19, type metadata accessor for Goldilocks_ErrorInfo.ResultError);
    if (v8) {
      return result;
    }
  }

  uint64_t v27 = v9[2];
  if (!*(void *)(v27 + 16)) {
    return UnknownStorage.traverse<A>(visitor:)(v36, v24, v37);
  }
  uint64_t v28 = v33;
  uint64_t v29 = v33(0LL);
  uint64_t v30 = sub_1000BD35C(v32, v28, v34);
  uint64_t result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(v27, 3LL, v29, v30, v24, v37);
  if (!v8) {
    return UnknownStorage.traverse<A>(visitor:)(v36, v24, v37);
  }
  return result;
}

uint64_t static Goldilocks_DuplicateState.== infix(_:_:)(uint64_t *a1, void *a2)
{
  return sub_10010326C( a1,  a2,  type metadata accessor for Goldilocks_DuplicateState,  type metadata accessor for Goldilocks_FoundDuplicate,  (uint64_t (*)(char *, char *))_s22CloudKitImplementation25Goldilocks_FoundDuplicateV2eeoiySbAC_ACtFZ_0) & 1;
}

Swift::Int Goldilocks_DuplicateState.hashValue.getter()
{
  return sub_1000BC318( type metadata accessor for Goldilocks_DuplicateState,  &qword_100293D18,  (uint64_t)&protocol conformance descriptor for Goldilocks_DuplicateState);
}

uint64_t sub_1000F81DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return Goldilocks_DuplicateState.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t sub_1000F81F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return Goldilocks_DuplicateState.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t sub_1000F8204(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000BD35C( &qword_100294DC0,  type metadata accessor for Goldilocks_DuplicateState,  (uint64_t)&protocol conformance descriptor for Goldilocks_DuplicateState);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000F8254@<X0>(uint64_t a1@<X8>)
{
  return sub_1000BA0EC( &qword_100291918,  (uint64_t)static Goldilocks_DuplicateState._protobuf_nameMap,  (uint64_t)sub_1000F7B78,  a1);
}

uint64_t sub_1000F8270(uint64_t a1)
{
  uint64_t v2 = sub_1000BD35C( &qword_100293D00,  type metadata accessor for Goldilocks_DuplicateState,  (uint64_t)&protocol conformance descriptor for Goldilocks_DuplicateState);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000F82B0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000BD35C( &qword_100293D00,  type metadata accessor for Goldilocks_DuplicateState,  (uint64_t)&protocol conformance descriptor for Goldilocks_DuplicateState);
  return Message.hash(into:)(a1, a2, v4);
}

void *Goldilocks_FoundDuplicate.protoMessageName.unsafeMutableAddressor()
{
  return &static Goldilocks_FoundDuplicate.protoMessageName;
}

unint64_t static Goldilocks_FoundDuplicate.protoMessageName.getter()
{
  return 0xD000000000000019LL;
}

uint64_t sub_1000F8328()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_1000BECFC(v0, static Goldilocks_FoundDuplicate._protobuf_nameMap);
  sub_1000BCFB4(v0, (uint64_t)static Goldilocks_FoundDuplicate._protobuf_nameMap);
  uint64_t v1 = sub_1000BED3C(&qword_100291D80);
  uint64_t v2 = sub_1000BED3C(&qword_100291D88);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 3 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002135D0;
  uint64_t v8 = (void *)(v7 + v6);
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  *uint64_t v8 = 1LL;
  *(void *)uint64_t v9 = "duplicateRecordID";
  *(void *)(v9 + 8) = 17LL;
  *(_BYTE *)(v9 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  uint64_t v13 = (char *)v8 + v4 + *(int *)(v2 + 48);
  *(void *)((char *)v8 + v4) = 2LL;
  *(void *)uint64_t v13 = "duplicateZoneID";
  *((void *)v13 + 1) = 15LL;
  v13[16] = 2;
  v12();
  uint64_t v14 = (uint64_t)v8 + 2 * v4 + *(int *)(v2 + 48);
  *(void *)((char *)v8 + 2 * v4) = 3LL;
  *(void *)uint64_t v14 = "duplicateType";
  *(void *)(v14 + 8) = 13LL;
  *(_BYTE *)(v14 + 16) = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t Goldilocks_FoundDuplicate._protobuf_nameMap.unsafeMutableAddressor()
{
  return sub_1000B9E20( &qword_100291920,  (uint64_t)static Goldilocks_FoundDuplicate._protobuf_nameMap,  (uint64_t)sub_1000F8328);
}

uint64_t static Goldilocks_FoundDuplicate._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000B9E7C( &qword_100291920,  (uint64_t)static Goldilocks_FoundDuplicate._protobuf_nameMap,  (uint64_t)sub_1000F8328,  a1);
}

uint64_t Goldilocks_FoundDuplicate.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000FD824( a1,  a2,  a3,  type metadata accessor for Goldilocks_FoundDuplicate,  (uint64_t (*)(void))sub_1001055D0,  (uint64_t)&type metadata for Goldilocks_DuplicateType);
}

uint64_t Goldilocks_FoundDuplicate.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000FD9BC( a1,  a2,  a3,  type metadata accessor for Goldilocks_FoundDuplicate,  (uint64_t (*)(uint64_t))sub_1001055D0,  (uint64_t)&type metadata for Goldilocks_DuplicateType);
}

Swift::Int Goldilocks_FoundDuplicate.hashValue.getter()
{
  return sub_1000BC318( type metadata accessor for Goldilocks_FoundDuplicate,  &qword_100293D28,  (uint64_t)&protocol conformance descriptor for Goldilocks_FoundDuplicate);
}

uint64_t sub_1000F8570(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return Goldilocks_FoundDuplicate.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t sub_1000F8584(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return Goldilocks_FoundDuplicate.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t sub_1000F8598(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000BD35C( &qword_100294DB8,  type metadata accessor for Goldilocks_FoundDuplicate,  (uint64_t)&protocol conformance descriptor for Goldilocks_FoundDuplicate);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000F85E8@<X0>(uint64_t a1@<X8>)
{
  return sub_1000BA0EC( &qword_100291920,  (uint64_t)static Goldilocks_FoundDuplicate._protobuf_nameMap,  (uint64_t)sub_1000F8328,  a1);
}

uint64_t sub_1000F8604(uint64_t a1)
{
  uint64_t v2 = sub_1000BD35C( &qword_100293D10,  type metadata accessor for Goldilocks_FoundDuplicate,  (uint64_t)&protocol conformance descriptor for Goldilocks_FoundDuplicate);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000F8644(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000BD35C( &qword_100293D10,  type metadata accessor for Goldilocks_FoundDuplicate,  (uint64_t)&protocol conformance descriptor for Goldilocks_FoundDuplicate);
  return Message.hash(into:)(a1, a2, v4);
}

void *Goldilocks_ZoneID.protoMessageName.unsafeMutableAddressor()
{
  return &static Goldilocks_ZoneID.protoMessageName;
}

unint64_t static Goldilocks_ZoneID.protoMessageName.getter()
{
  return 0xD000000000000011LL;
}

uint64_t sub_1000F86C0()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_1000BECFC(v0, static Goldilocks_ZoneID._protobuf_nameMap);
  sub_1000BCFB4(v0, (uint64_t)static Goldilocks_ZoneID._protobuf_nameMap);
  uint64_t v1 = sub_1000BED3C(&qword_100291D80);
  uint64_t v2 = sub_1000BED3C(&qword_100291D88);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 2 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_100212570;
  uint64_t v8 = (void *)(v7 + v6);
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  *uint64_t v8 = 1LL;
  *(void *)uint64_t v9 = "name";
  *(void *)(v9 + 8) = 4LL;
  *(_BYTE *)(v9 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  uint64_t v13 = (char *)v8 + v4 + *(int *)(v2 + 48);
  *(void *)((char *)v8 + v4) = 2LL;
  *(void *)uint64_t v13 = "ownerUserID";
  *((void *)v13 + 1) = 11LL;
  v13[16] = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t Goldilocks_ZoneID._protobuf_nameMap.unsafeMutableAddressor()
{
  return sub_1000B9E20(&qword_100291928, (uint64_t)static Goldilocks_ZoneID._protobuf_nameMap, (uint64_t)sub_1000F86C0);
}

uint64_t static Goldilocks_ZoneID._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000B9E7C( &qword_100291928,  (uint64_t)static Goldilocks_ZoneID._protobuf_nameMap,  (uint64_t)sub_1000F86C0,  a1);
}

uint64_t Goldilocks_ZoneID.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v8 = v3[1];
  uint64_t v9 = HIBYTE(v8) & 0xF;
  if ((v8 & 0x2000000000000000LL) == 0) {
    uint64_t v9 = *v3 & 0xFFFFFFFFFFFFLL;
  }
  if (!v9 || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(*v3, v8), !v4))
  {
    uint64_t v11 = v3[2];
    unint64_t v12 = v3[3];
    uint64_t v13 = HIBYTE(v12) & 0xF;
    if ((v12 & 0x2000000000000000LL) == 0) {
      uint64_t v13 = v11 & 0xFFFFFFFFFFFFLL;
    }
    if (!v13 || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(v11, v12), !v4))
    {
      type metadata accessor for Goldilocks_ZoneID(0LL);
      return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
    }
  }

  return result;
}

Swift::Int Goldilocks_ZoneID.hashValue.getter()
{
  return sub_1000BC318( type metadata accessor for Goldilocks_ZoneID,  &qword_100293D30,  (uint64_t)&protocol conformance descriptor for Goldilocks_ZoneID);
}

uint64_t sub_1000F8940(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return Goldilocks_ZoneID.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t sub_1000F8954(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000BD35C( &qword_100294DB0,  type metadata accessor for Goldilocks_ZoneID,  (uint64_t)&protocol conformance descriptor for Goldilocks_ZoneID);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000F89A4@<X0>(uint64_t a1@<X8>)
{
  return sub_1000BA0EC( &qword_100291928,  (uint64_t)static Goldilocks_ZoneID._protobuf_nameMap,  (uint64_t)sub_1000F86C0,  a1);
}

uint64_t sub_1000F89C0(uint64_t a1)
{
  uint64_t v2 = sub_1000BD35C( &qword_100293CD0,  type metadata accessor for Goldilocks_ZoneID,  (uint64_t)&protocol conformance descriptor for Goldilocks_ZoneID);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000F8A00(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000BD35C( &qword_100293CD0,  type metadata accessor for Goldilocks_ZoneID,  (uint64_t)&protocol conformance descriptor for Goldilocks_ZoneID);
  return Message.hash(into:)(a1, a2, v4);
}

void *Goldilocks_ExitMoveBatchRequest.protoMessageName.unsafeMutableAddressor()
{
  return &static Goldilocks_ExitMoveBatchRequest.protoMessageName;
}

unint64_t static Goldilocks_ExitMoveBatchRequest.protoMessageName.getter()
{
  return 0xD00000000000001FLL;
}

uint64_t sub_1000F8A78()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_1000BECFC(v0, static Goldilocks_ExitMoveBatchRequest._protobuf_nameMap);
  sub_1000BCFB4(v0, (uint64_t)static Goldilocks_ExitMoveBatchRequest._protobuf_nameMap);
  uint64_t v1 = sub_1000BED3C(&qword_100291D80);
  uint64_t v2 = sub_1000BED3C(&qword_100291D88);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 3 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002135D0;
  unint64_t v8 = (void *)(v7 + v6);
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  *unint64_t v8 = 1LL;
  *(void *)uint64_t v9 = "operationID";
  *(void *)(v9 + 8) = 11LL;
  *(_BYTE *)(v9 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  unint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  uint64_t v13 = (char *)v8 + v4 + *(int *)(v2 + 48);
  *(void *)((char *)v8 + v4) = 2LL;
  *(void *)uint64_t v13 = "zoneID";
  *((void *)v13 + 1) = 6LL;
  v13[16] = 2;
  v12();
  uint64_t v14 = (uint64_t)v8 + 2 * v4 + *(int *)(v2 + 48);
  *(void *)((char *)v8 + 2 * v4) = 3LL;
  *(void *)uint64_t v14 = "batchSize";
  *(void *)(v14 + 8) = 9LL;
  *(_BYTE *)(v14 + 16) = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t Goldilocks_ExitMoveBatchRequest._protobuf_nameMap.unsafeMutableAddressor()
{
  return sub_1000B9E20( &qword_100291930,  (uint64_t)static Goldilocks_ExitMoveBatchRequest._protobuf_nameMap,  (uint64_t)sub_1000F8A78);
}

uint64_t static Goldilocks_ExitMoveBatchRequest._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000B9E7C( &qword_100291930,  (uint64_t)static Goldilocks_ExitMoveBatchRequest._protobuf_nameMap,  (uint64_t)sub_1000F8A78,  a1);
}

uint64_t Goldilocks_ExitMoveBatchRequest.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  uint64_t v9 = v4;
  if (!v4)
  {
    while (1)
    {
      if ((v8 & 1) != 0) {
        return result;
      }
      if (result == 3) {
        break;
      }
      if (result == 2)
      {
        uint64_t v11 = v3 + *(int *)(type metadata accessor for Goldilocks_ExitMoveBatchRequest(0LL) + 28);
        uint64_t v12 = type metadata accessor for Goldilocks_ZoneID(0LL);
        uint64_t v13 = sub_1000BD35C( &qword_100293CD0,  type metadata accessor for Goldilocks_ZoneID,  (uint64_t)&protocol conformance descriptor for Goldilocks_ZoneID);
        uint64_t v10 = v9;
        dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)(v11, v12, v13, a2, a3);
        goto LABEL_5;
      }

      if (result == 1)
      {
        uint64_t v10 = v9;
        dispatch thunk of Decoder.decodeSingularStringField(value:)(v3, a2, a3);
        goto LABEL_5;
      }

uint64_t Goldilocks_ExitMoveBatchRequest.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t v9 = sub_1000BED3C(&qword_100295030);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for Goldilocks_ZoneID(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v24 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = *v5;
  unint64_t v17 = v5[1];
  uint64_t v18 = HIBYTE(v17) & 0xF;
  if ((v17 & 0x2000000000000000LL) == 0) {
    uint64_t v18 = *v5 & 0xFFFFFFFFFFFFLL;
  }
  uint64_t v26 = a3;
  uint64_t v25 = a1;
  if (v18)
  {
    uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(v16, v17);
    uint64_t v20 = a2;
    if (v4) {
      return result;
    }
  }

  else
  {
    uint64_t v20 = a2;
  }

  uint64_t v21 = type metadata accessor for Goldilocks_ExitMoveBatchRequest(0LL);
  sub_1000CE7B4((uint64_t)v5 + *(int *)(v21 + 28), (uint64_t)v11, &qword_100295030);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1LL, v12) == 1)
  {
    sub_1000CEDAC((uint64_t)v11, &qword_100295030);
  }

  else
  {
    sub_1000CEC9C((uint64_t)v11, (uint64_t)v15, type metadata accessor for Goldilocks_ZoneID);
    uint64_t v22 = sub_1000BD35C( &qword_100293CD0,  type metadata accessor for Goldilocks_ZoneID,  (uint64_t)&protocol conformance descriptor for Goldilocks_ZoneID);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v15, 2LL, v12, v22, v20, v26);
    uint64_t result = sub_1000CECE0((uint64_t)v15, type metadata accessor for Goldilocks_ZoneID);
    if (v4) {
      return result;
    }
  }

  uint64_t v23 = *((unsigned int *)v5 + 4);
  if (!(_DWORD)v23) {
    return UnknownStorage.traverse<A>(visitor:)(v25, v20, v26);
  }
  uint64_t result = dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)(v23, 3LL, v20, v26);
  if (!v4) {
    return UnknownStorage.traverse<A>(visitor:)(v25, v20, v26);
  }
  return result;
}

Swift::Int Goldilocks_ExitMoveBatchRequest.hashValue.getter()
{
  return sub_1000BC318( type metadata accessor for Goldilocks_ExitMoveBatchRequest,  &qword_100293D38,  (uint64_t)&protocol conformance descriptor for Goldilocks_ExitMoveBatchRequest);
}

uint64_t sub_1000F8FA4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0LL;
  *(void *)(a2 + 8) = 0xE000000000000000LL;
  *(_DWORD *)(a2 + 16) = 0;
  UnknownStorage.init()(a1);
  uint64_t v4 = a2 + *(int *)(a1 + 28);
  uint64_t v5 = type metadata accessor for Goldilocks_ZoneID(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56LL))(v4, 1LL, 1LL, v5);
}

uint64_t sub_1000F9004(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return Goldilocks_ExitMoveBatchRequest.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t sub_1000F9018(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return Goldilocks_ExitMoveBatchRequest.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t sub_1000F902C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000BD35C( &qword_100294DA8,  type metadata accessor for Goldilocks_ExitMoveBatchRequest,  (uint64_t)&protocol conformance descriptor for Goldilocks_ExitMoveBatchRequest);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000F907C@<X0>(uint64_t a1@<X8>)
{
  return sub_1000BA0EC( &qword_100291930,  (uint64_t)static Goldilocks_ExitMoveBatchRequest._protobuf_nameMap,  (uint64_t)sub_1000F8A78,  a1);
}

uint64_t sub_1000F9098(uint64_t a1)
{
  uint64_t v2 = sub_1000BD35C( &qword_1002950C0,  type metadata accessor for Goldilocks_ExitMoveBatchRequest,  (uint64_t)&protocol conformance descriptor for Goldilocks_ExitMoveBatchRequest);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000F90D8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000BD35C( &qword_1002950C0,  type metadata accessor for Goldilocks_ExitMoveBatchRequest,  (uint64_t)&protocol conformance descriptor for Goldilocks_ExitMoveBatchRequest);
  return Message.hash(into:)(a1, a2, v4);
}

void *Goldilocks_ExitMoveBatchResponse.protoMessageName.unsafeMutableAddressor()
{
  return &static Goldilocks_ExitMoveBatchResponse.protoMessageName;
}

unint64_t static Goldilocks_ExitMoveBatchResponse.protoMessageName.getter()
{
  return 0xD000000000000020LL;
}

uint64_t sub_1000F9150()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_1000BECFC(v0, static Goldilocks_ExitMoveBatchResponse._protobuf_nameMap);
  sub_1000BCFB4(v0, (uint64_t)static Goldilocks_ExitMoveBatchResponse._protobuf_nameMap);
  uint64_t v1 = sub_1000BED3C(&qword_100291D80);
  uint64_t v2 = sub_1000BED3C(&qword_100291D88);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 6 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002135B0;
  uint64_t v8 = v7 + v6;
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  *(void *)(v7 + v6) = 1LL;
  *(void *)uint64_t v9 = "operationID";
  *(void *)(v9 + 8) = 11LL;
  *(_BYTE *)(v9 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  uint64_t v13 = v8 + v4 + *(int *)(v2 + 48);
  *(void *)(v8 + v4) = 2LL;
  *(void *)uint64_t v13 = "resultError";
  *(void *)(v13 + 8) = 11LL;
  *(_BYTE *)(v13 + 16) = 2;
  v12();
  uint64_t v14 = (void *)(v8 + 2 * v4);
  uint64_t v15 = (char *)v14 + *(int *)(v2 + 48);
  void *v14 = 3LL;
  *(void *)uint64_t v15 = "retryAfterSec";
  *((void *)v15 + 1) = 13LL;
  v15[16] = 2;
  v12();
  uint64_t v16 = (void *)(v8 + 3 * v4);
  unint64_t v17 = (char *)v16 + *(int *)(v2 + 48);
  *uint64_t v16 = 4LL;
  *(void *)unint64_t v17 = "batchID";
  *((void *)v17 + 1) = 7LL;
  _BYTE v17[16] = 2;
  v12();
  uint64_t v18 = (void *)(v8 + 4 * v4);
  uint64_t v19 = (char *)v18 + *(int *)(v2 + 48);
  void *v18 = 5LL;
  *(void *)uint64_t v19 = "recordIDsToMove";
  *((void *)v19 + 1) = 15LL;
  v19[16] = 2;
  v12();
  uint64_t v20 = (void *)(v8 + 5 * v4);
  uint64_t v21 = (char *)v20 + *(int *)(v2 + 48);
  *uint64_t v20 = 6LL;
  *(void *)uint64_t v21 = "movesComplete";
  *((void *)v21 + 1) = 13LL;
  v21[16] = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t Goldilocks_ExitMoveBatchResponse._protobuf_nameMap.unsafeMutableAddressor()
{
  return sub_1000B9E20( &qword_100291938,  (uint64_t)static Goldilocks_ExitMoveBatchResponse._protobuf_nameMap,  (uint64_t)sub_1000F9150);
}

uint64_t static Goldilocks_ExitMoveBatchResponse._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000B9E7C( &qword_100291938,  (uint64_t)static Goldilocks_ExitMoveBatchResponse._protobuf_nameMap,  (uint64_t)sub_1000F9150,  a1);
}

uint64_t Goldilocks_ExitMoveBatchResponse.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  uint64_t v9 = v4;
  if (!v4)
  {
    while ((v8 & 1) == 0)
    {
      switch(result)
      {
        case 1LL:
          uint64_t v10 = v3;
          goto LABEL_5;
        case 2LL:
          uint64_t v12 = v3 + *(int *)(type metadata accessor for Goldilocks_ExitMoveBatchResponse(0LL) + 40);
          uint64_t v13 = type metadata accessor for Goldilocks_ErrorInfo.ResultError(0LL);
          uint64_t v14 = sub_1000BD35C( &qword_100295070,  type metadata accessor for Goldilocks_ErrorInfo.ResultError,  (uint64_t)&protocol conformance descriptor for Goldilocks_ErrorInfo.ResultError);
          uint64_t v11 = v9;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)(v12, v13, v14, a2, a3);
          goto LABEL_6;
        case 3LL:
          uint64_t v11 = v9;
          dispatch thunk of Decoder.decodeSingularInt64Field(value:)(v3 + 16, a2, a3);
          goto LABEL_6;
        case 4LL:
          uint64_t v10 = v3 + 24;
LABEL_5:
          uint64_t v11 = v9;
          dispatch thunk of Decoder.decodeSingularStringField(value:)(v10, a2, a3);
          goto LABEL_6;
        case 5LL:
          uint64_t v11 = v9;
          dispatch thunk of Decoder.decodeRepeatedStringField(value:)(v3 + 40, a2, a3);
          goto LABEL_6;
        case 6LL:
          uint64_t v11 = v9;
          dispatch thunk of Decoder.decodeSingularBoolField(value:)(v3 + 48, a2, a3);
LABEL_6:
          uint64_t v9 = v11;
          break;
        default:
          break;
      }

      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }
  }

  return result;
}

uint64_t Goldilocks_ExitMoveBatchResponse.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t v9 = sub_1000BED3C(&qword_100293C98);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for Goldilocks_ErrorInfo.ResultError(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v24 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v16 = *(void *)(v5 + 8);
  uint64_t v17 = HIBYTE(v16) & 0xF;
  if ((v16 & 0x2000000000000000LL) == 0) {
    uint64_t v17 = *(void *)v5 & 0xFFFFFFFFFFFFLL;
  }
  if (!v17
    || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(*(void *)v5, v16), !v4))
  {
    uint64_t v25 = type metadata accessor for Goldilocks_ExitMoveBatchResponse(0LL);
    sub_1000CE7B4(v5 + *(int *)(v25 + 40), (uint64_t)v11, &qword_100293C98);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1LL, v12) == 1)
    {
      sub_1000CEDAC((uint64_t)v11, &qword_100293C98);
    }

    else
    {
      sub_1000CEC9C((uint64_t)v11, (uint64_t)v15, type metadata accessor for Goldilocks_ErrorInfo.ResultError);
      uint64_t v19 = sub_1000BD35C( &qword_100295070,  type metadata accessor for Goldilocks_ErrorInfo.ResultError,  (uint64_t)&protocol conformance descriptor for Goldilocks_ErrorInfo.ResultError);
      dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v15, 2LL, v12, v19, a2, a3);
      uint64_t result = sub_1000CECE0((uint64_t)v15, type metadata accessor for Goldilocks_ErrorInfo.ResultError);
      if (v4) {
        return result;
      }
    }

    uint64_t v20 = *(void *)(v5 + 16);
    if (!v20 || (uint64_t result = dispatch thunk of Visitor.visitSingularInt64Field(value:fieldNumber:)(v20, 3LL, a2, a3), !v4))
    {
      uint64_t v21 = *(void *)(v5 + 24);
      unint64_t v22 = *(void *)(v5 + 32);
      uint64_t v23 = HIBYTE(v22) & 0xF;
      if ((v22 & 0x2000000000000000LL) == 0) {
        uint64_t v23 = v21 & 0xFFFFFFFFFFFFLL;
      }
      if (!v23 || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(v21, v22), !v4))
      {
        if (!*(void *)(*(void *)(v5 + 40) + 16LL)
          || (uint64_t result = dispatch thunk of Visitor.visitRepeatedStringField(value:fieldNumber:)(), !v4))
        {
          if (*(_BYTE *)(v5 + 48) != 1) {
            return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
          }
          uint64_t result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(1LL, 6LL, a2, a3);
          if (!v4) {
            return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
          }
        }
      }
    }
  }

  return result;
}

Swift::Int Goldilocks_ExitMoveBatchResponse.hashValue.getter()
{
  return sub_1000BC318( type metadata accessor for Goldilocks_ExitMoveBatchResponse,  &qword_100293D40,  (uint64_t)&protocol conformance descriptor for Goldilocks_ExitMoveBatchResponse);
}

uint64_t sub_1000F97E8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0LL;
  *(void *)(a2 + 8) = 0xE000000000000000LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(void *)(a2 + 32) = 0xE000000000000000LL;
  *(void *)(a2 + 40) = &_swiftEmptyArrayStorage;
  *(_BYTE *)(a2 + 48) = 0;
  UnknownStorage.init()(a1);
  uint64_t v4 = a2 + *(int *)(a1 + 40);
  uint64_t v5 = type metadata accessor for Goldilocks_ErrorInfo.ResultError(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56LL))(v4, 1LL, 1LL, v5);
}

uint64_t sub_1000F9858@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 36);
  uint64_t v5 = type metadata accessor for UnknownStorage(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16LL))(a2, v4, v5);
}

uint64_t sub_1000F9898(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + *(int *)(a2 + 36);
  uint64_t v5 = type metadata accessor for UnknownStorage(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40LL))(v4, a1, v5);
}

uint64_t (*sub_1000F98D8())(void, void)
{
  return Goldilocks_ExitType.rawValue.getter;
}

uint64_t sub_1000F98EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return Goldilocks_ExitMoveBatchResponse.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t sub_1000F9900(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return Goldilocks_ExitMoveBatchResponse.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t sub_1000F9914(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000BD35C( &qword_100294DA0,  type metadata accessor for Goldilocks_ExitMoveBatchResponse,  (uint64_t)&protocol conformance descriptor for Goldilocks_ExitMoveBatchResponse);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000F9964@<X0>(uint64_t a1@<X8>)
{
  return sub_1000BA0EC( &qword_100291938,  (uint64_t)static Goldilocks_ExitMoveBatchResponse._protobuf_nameMap,  (uint64_t)sub_1000F9150,  a1);
}

uint64_t sub_1000F9980(uint64_t a1)
{
  uint64_t v2 = sub_1000BD35C( &qword_100293F88,  type metadata accessor for Goldilocks_ExitMoveBatchResponse,  (uint64_t)&protocol conformance descriptor for Goldilocks_ExitMoveBatchResponse);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000F99C0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000BD35C( &qword_100293F88,  type metadata accessor for Goldilocks_ExitMoveBatchResponse,  (uint64_t)&protocol conformance descriptor for Goldilocks_ExitMoveBatchResponse);
  return Message.hash(into:)(a1, a2, v4);
}

void *Goldilocks_ExitMoveBatchFeedbackItem.protoMessageName.unsafeMutableAddressor()
{
  return &static Goldilocks_ExitMoveBatchFeedbackItem.protoMessageName;
}

unint64_t static Goldilocks_ExitMoveBatchFeedbackItem.protoMessageName.getter()
{
  return 0xD000000000000024LL;
}

uint64_t sub_1000F9A38()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_1000BECFC(v0, static Goldilocks_ExitMoveBatchFeedbackItem._protobuf_nameMap);
  sub_1000BCFB4(v0, (uint64_t)static Goldilocks_ExitMoveBatchFeedbackItem._protobuf_nameMap);
  uint64_t v1 = sub_1000BED3C(&qword_100291D80);
  uint64_t v2 = sub_1000BED3C(&qword_100291D88);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 3 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002135D0;
  char v8 = (void *)(v7 + v6);
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  *char v8 = 1LL;
  *(void *)uint64_t v9 = "originRecordID";
  *(void *)(v9 + 8) = 14LL;
  *(_BYTE *)(v9 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  uint64_t v13 = (char *)v8 + v4 + *(int *)(v2 + 48);
  *(void *)((char *)v8 + v4) = 2LL;
  *(void *)uint64_t v13 = "destinationRecordID";
  *((void *)v13 + 1) = 19LL;
  v13[16] = 2;
  v12();
  uint64_t v14 = (uint64_t)v8 + 2 * v4 + *(int *)(v2 + 48);
  *(void *)((char *)v8 + 2 * v4) = 3LL;
  *(void *)uint64_t v14 = "error";
  *(void *)(v14 + 8) = 5LL;
  *(_BYTE *)(v14 + 16) = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t Goldilocks_ExitMoveBatchFeedbackItem._protobuf_nameMap.unsafeMutableAddressor()
{
  return sub_1000B9E20( &qword_100291940,  (uint64_t)static Goldilocks_ExitMoveBatchFeedbackItem._protobuf_nameMap,  (uint64_t)sub_1000F9A38);
}

uint64_t static Goldilocks_ExitMoveBatchFeedbackItem._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000B9E7C( &qword_100291940,  (uint64_t)static Goldilocks_ExitMoveBatchFeedbackItem._protobuf_nameMap,  (uint64_t)sub_1000F9A38,  a1);
}

uint64_t Goldilocks_ExitMoveBatchFeedbackItem.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  if (!v4)
  {
    while (1)
    {
      if ((v8 & 1) != 0) {
        return result;
      }
      switch(result)
      {
        case 3LL:
          uint64_t v9 = v3 + *(int *)(type metadata accessor for Goldilocks_ExitMoveBatchFeedbackItem(0LL) + 28);
          uint64_t v10 = type metadata accessor for Goldilocks_ErrorInfo.ResultError(0LL);
          uint64_t v11 = sub_1000BD35C( &qword_100295070,  type metadata accessor for Goldilocks_ErrorInfo.ResultError,  (uint64_t)&protocol conformance descriptor for Goldilocks_ErrorInfo.ResultError);
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)(v9, v10, v11, a2, a3);
          goto LABEL_12;
        case 2LL:
          uint64_t v12 = v3 + 16;
          break;
        case 1LL:
          uint64_t v12 = v3;
          break;
        default:
          goto LABEL_12;
      }

      dispatch thunk of Decoder.decodeSingularStringField(value:)(v12, a2, a3);
LABEL_12:
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }
  }

  return result;
}

uint64_t Goldilocks_ExitMoveBatchFeedbackItem.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t v9 = sub_1000BED3C(&qword_100293C98);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for Goldilocks_ErrorInfo.ResultError(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v25 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = *v5;
  unint64_t v17 = v5[1];
  uint64_t v18 = HIBYTE(v17) & 0xF;
  if ((v17 & 0x2000000000000000LL) == 0) {
    uint64_t v18 = *v5 & 0xFFFFFFFFFFFFLL;
  }
  uint64_t v26 = a3;
  if (!v18 || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(v16, v17), !v4))
  {
    uint64_t v20 = v5[2];
    unint64_t v21 = v5[3];
    uint64_t v22 = HIBYTE(v21) & 0xF;
    if ((v21 & 0x2000000000000000LL) == 0) {
      uint64_t v22 = v20 & 0xFFFFFFFFFFFFLL;
    }
    if (!v22 || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(v20, v21), !v4))
    {
      uint64_t v23 = type metadata accessor for Goldilocks_ExitMoveBatchFeedbackItem(0LL);
      sub_1000CE7B4((uint64_t)v5 + *(int *)(v23 + 28), (uint64_t)v11, &qword_100293C98);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1LL, v12) == 1)
      {
        sub_1000CEDAC((uint64_t)v11, &qword_100293C98);
      }

      else
      {
        sub_1000CEC9C((uint64_t)v11, (uint64_t)v15, type metadata accessor for Goldilocks_ErrorInfo.ResultError);
        uint64_t v24 = sub_1000BD35C( &qword_100295070,  type metadata accessor for Goldilocks_ErrorInfo.ResultError,  (uint64_t)&protocol conformance descriptor for Goldilocks_ErrorInfo.ResultError);
        dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v15, 3LL, v12, v24, a2, v26);
        uint64_t result = sub_1000CECE0((uint64_t)v15, type metadata accessor for Goldilocks_ErrorInfo.ResultError);
        if (v4) {
          return result;
        }
      }

      return UnknownStorage.traverse<A>(visitor:)(a1, a2, v26);
    }
  }

  return result;
}

Swift::Int Goldilocks_ExitMoveBatchFeedbackItem.hashValue.getter()
{
  return sub_1000BC318( type metadata accessor for Goldilocks_ExitMoveBatchFeedbackItem,  &qword_100293D48,  (uint64_t)&protocol conformance descriptor for Goldilocks_ExitMoveBatchFeedbackItem);
}

uint64_t sub_1000F9F6C@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = 0LL;
  a2[1] = 0xE000000000000000LL;
  a2[2] = 0LL;
  a2[3] = 0xE000000000000000LL;
  UnknownStorage.init()(a1);
  uint64_t v4 = (char *)a2 + *(int *)(a1 + 28);
  uint64_t v5 = type metadata accessor for Goldilocks_ErrorInfo.ResultError(0LL);
  return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56LL))(v4, 1LL, 1LL, v5);
}

uint64_t sub_1000F9FCC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return Goldilocks_ExitMoveBatchFeedbackItem.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t sub_1000F9FE0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return Goldilocks_ExitMoveBatchFeedbackItem.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t sub_1000F9FF4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000BD35C( &qword_100294D98,  type metadata accessor for Goldilocks_ExitMoveBatchFeedbackItem,  (uint64_t)&protocol conformance descriptor for Goldilocks_ExitMoveBatchFeedbackItem);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000FA044@<X0>(uint64_t a1@<X8>)
{
  return sub_1000BA0EC( &qword_100291940,  (uint64_t)static Goldilocks_ExitMoveBatchFeedbackItem._protobuf_nameMap,  (uint64_t)sub_1000F9A38,  a1);
}

uint64_t sub_1000FA060(uint64_t a1)
{
  uint64_t v2 = sub_1000BD35C( &qword_100293D50,  type metadata accessor for Goldilocks_ExitMoveBatchFeedbackItem,  (uint64_t)&protocol conformance descriptor for Goldilocks_ExitMoveBatchFeedbackItem);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000FA0A0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000BD35C( &qword_100293D50,  type metadata accessor for Goldilocks_ExitMoveBatchFeedbackItem,  (uint64_t)&protocol conformance descriptor for Goldilocks_ExitMoveBatchFeedbackItem);
  return Message.hash(into:)(a1, a2, v4);
}

void *Goldilocks_ExitMoveBatchErrorFeedbackRequest.protoMessageName.unsafeMutableAddressor()
{
  return &static Goldilocks_ExitMoveBatchErrorFeedbackRequest.protoMessageName;
}

unint64_t static Goldilocks_ExitMoveBatchErrorFeedbackRequest.protoMessageName.getter()
{
  return 0xD00000000000002CLL;
}

uint64_t sub_1000FA118()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_1000BECFC(v0, static Goldilocks_ExitMoveBatchErrorFeedbackRequest._protobuf_nameMap);
  sub_1000BCFB4(v0, (uint64_t)static Goldilocks_ExitMoveBatchErrorFeedbackRequest._protobuf_nameMap);
  uint64_t v1 = sub_1000BED3C(&qword_100291D80);
  uint64_t v2 = sub_1000BED3C(&qword_100291D88);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 4 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002135C0;
  uint64_t v8 = v7 + v6;
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  *(void *)(v7 + v6) = 1LL;
  *(void *)uint64_t v9 = "exitZoneID";
  *(void *)(v9 + 8) = 10LL;
  *(_BYTE *)(v9 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  uint64_t v13 = v8 + v4 + *(int *)(v2 + 48);
  *(void *)(v8 + v4) = 2LL;
  *(void *)uint64_t v13 = "items";
  *(void *)(v13 + 8) = 5LL;
  *(_BYTE *)(v13 + 16) = 2;
  v12();
  uint64_t v14 = (void *)(v8 + 2 * v4);
  uint64_t v15 = (char *)v14 + *(int *)(v2 + 48);
  void *v14 = 101LL;
  *(void *)uint64_t v15 = "moveBatchOperationID";
  *((void *)v15 + 1) = 20LL;
  v15[16] = 2;
  v12();
  uint64_t v16 = (void *)(v8 + 3 * v4);
  unint64_t v17 = (char *)v16 + *(int *)(v2 + 48);
  *uint64_t v16 = 102LL;
  *(void *)unint64_t v17 = "moveBatchID";
  *((void *)v17 + 1) = 11LL;
  _BYTE v17[16] = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t Goldilocks_ExitMoveBatchErrorFeedbackRequest._protobuf_nameMap.unsafeMutableAddressor()
{
  return sub_1000B9E20( &qword_100291948,  (uint64_t)static Goldilocks_ExitMoveBatchErrorFeedbackRequest._protobuf_nameMap,  (uint64_t)sub_1000FA118);
}

uint64_t static Goldilocks_ExitMoveBatchErrorFeedbackRequest._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000B9E7C( &qword_100291948,  (uint64_t)static Goldilocks_ExitMoveBatchErrorFeedbackRequest._protobuf_nameMap,  (uint64_t)sub_1000FA118,  a1);
}

uint64_t Goldilocks_ExitMoveBatchErrorFeedbackRequest.decodeMessage<A>(decoder:)( uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  uint64_t v9 = v4;
  if (!v4)
  {
    while (1)
    {
      if ((v8 & 1) != 0) {
        return result;
      }
      if (result > 100)
      {
        if (result == 101)
        {
          uint64_t v16 = v3 + 8;
LABEL_16:
          uint64_t v13 = v9;
          dispatch thunk of Decoder.decodeSingularStringField(value:)(v16, a2, a3);
LABEL_5:
          uint64_t v9 = v13;
          goto LABEL_6;
        }

        if (result == 102)
        {
          uint64_t v16 = v3 + 24;
          goto LABEL_16;
        }
      }

      else
      {
        if (result == 1)
        {
          uint64_t v10 = v3 + *(int *)(type metadata accessor for Goldilocks_ExitMoveBatchErrorFeedbackRequest(0LL) + 32);
          uint64_t v11 = type metadata accessor for Goldilocks_ZoneID(0LL);
          uint64_t v12 = sub_1000BD35C( &qword_100293CD0,  type metadata accessor for Goldilocks_ZoneID,  (uint64_t)&protocol conformance descriptor for Goldilocks_ZoneID);
          uint64_t v13 = v9;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)(v10, v11, v12, a2, a3);
          goto LABEL_5;
        }

        if (result == 2)
        {
          uint64_t v14 = type metadata accessor for Goldilocks_ExitMoveBatchFeedbackItem(0LL);
          uint64_t v15 = sub_1000BD35C( &qword_100293D50,  type metadata accessor for Goldilocks_ExitMoveBatchFeedbackItem,  (uint64_t)&protocol conformance descriptor for Goldilocks_ExitMoveBatchFeedbackItem);
          uint64_t v13 = v9;
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)(v3, v14, v15, a2, a3);
          goto LABEL_5;
        }
      }

uint64_t Goldilocks_ExitMoveBatchErrorFeedbackRequest.traverse<A>(visitor:)( uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v29 = a3;
  uint64_t v28 = a1;
  uint64_t v6 = sub_1000BED3C(&qword_100295030);
  __chkstk_darwin(v6);
  char v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for Goldilocks_ZoneID(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v27 = type metadata accessor for Goldilocks_ExitMoveBatchErrorFeedbackRequest(0LL);
  uint64_t v13 = v3;
  sub_1000CE7B4((uint64_t)v3 + *(int *)(v27 + 32), (uint64_t)v8, &qword_100295030);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1LL, v9) == 1)
  {
    sub_1000CEDAC((uint64_t)v8, &qword_100295030);
    uint64_t v14 = v29;
    uint64_t v15 = v28;
  }

  else
  {
    sub_1000CEC9C((uint64_t)v8, (uint64_t)v12, type metadata accessor for Goldilocks_ZoneID);
    uint64_t v16 = sub_1000BD35C( &qword_100293CD0,  type metadata accessor for Goldilocks_ZoneID,  (uint64_t)&protocol conformance descriptor for Goldilocks_ZoneID);
    uint64_t v15 = v28;
    uint64_t v14 = v29;
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 1LL, v9, v16, a2, v29);
    uint64_t result = sub_1000CECE0((uint64_t)v12, type metadata accessor for Goldilocks_ZoneID);
    if (v4) {
      return result;
    }
  }

  uint64_t v18 = *v13;
  if (!*(void *)(*v13 + 16LL)
    || (uint64_t v19 = type metadata accessor for Goldilocks_ExitMoveBatchFeedbackItem(0LL),
        uint64_t v20 = sub_1000BD35C( &qword_100293D50,  type metadata accessor for Goldilocks_ExitMoveBatchFeedbackItem,  (uint64_t)&protocol conformance descriptor for Goldilocks_ExitMoveBatchFeedbackItem),  result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(v18, 2LL, v19, v20, a2, v14),  !v4))
  {
    uint64_t v21 = v13[1];
    unint64_t v22 = v13[2];
    uint64_t v23 = HIBYTE(v22) & 0xF;
    if ((v22 & 0x2000000000000000LL) == 0) {
      uint64_t v23 = v21 & 0xFFFFFFFFFFFFLL;
    }
    if (!v23 || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(v21, v22), !v4))
    {
      uint64_t v24 = v13[3];
      unint64_t v25 = v13[4];
      uint64_t v26 = HIBYTE(v25) & 0xF;
      if ((v25 & 0x2000000000000000LL) == 0) {
        uint64_t v26 = v24 & 0xFFFFFFFFFFFFLL;
      }
      if (!v26) {
        return UnknownStorage.traverse<A>(visitor:)(v15, a2, v14);
      }
      uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(v24, v25);
      if (!v4) {
        return UnknownStorage.traverse<A>(visitor:)(v15, a2, v14);
      }
    }
  }

  return result;
}

Swift::Int Goldilocks_ExitMoveBatchErrorFeedbackRequest.hashValue.getter()
{
  return sub_1000BC318( type metadata accessor for Goldilocks_ExitMoveBatchErrorFeedbackRequest,  &qword_100293D58,  (uint64_t)&protocol conformance descriptor for Goldilocks_ExitMoveBatchErrorFeedbackRequest);
}

uint64_t sub_1000FA720@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = &_swiftEmptyArrayStorage;
  a2[1] = 0LL;
  a2[2] = 0xE000000000000000LL;
  a2[3] = 0LL;
  a2[4] = 0xE000000000000000LL;
  UnknownStorage.init()(a1);
  uint64_t v4 = (char *)a2 + *(int *)(a1 + 32);
  uint64_t v5 = type metadata accessor for Goldilocks_ZoneID(0LL);
  return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56LL))(v4, 1LL, 1LL, v5);
}

uint64_t sub_1000FA78C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return Goldilocks_ExitMoveBatchErrorFeedbackRequest.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t sub_1000FA7A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return Goldilocks_ExitMoveBatchErrorFeedbackRequest.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t sub_1000FA7B4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000BD35C( &qword_100294D90,  type metadata accessor for Goldilocks_ExitMoveBatchErrorFeedbackRequest,  (uint64_t)&protocol conformance descriptor for Goldilocks_ExitMoveBatchErrorFeedbackRequest);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000FA804@<X0>(uint64_t a1@<X8>)
{
  return sub_1000BA0EC( &qword_100291948,  (uint64_t)static Goldilocks_ExitMoveBatchErrorFeedbackRequest._protobuf_nameMap,  (uint64_t)sub_1000FA118,  a1);
}

uint64_t sub_1000FA820(uint64_t a1)
{
  uint64_t v2 = sub_1000BD35C( &qword_100293AA8,  type metadata accessor for Goldilocks_ExitMoveBatchErrorFeedbackRequest,  (uint64_t)&protocol conformance descriptor for Goldilocks_ExitMoveBatchErrorFeedbackRequest);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000FA860(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000BD35C( &qword_100293AA8,  type metadata accessor for Goldilocks_ExitMoveBatchErrorFeedbackRequest,  (uint64_t)&protocol conformance descriptor for Goldilocks_ExitMoveBatchErrorFeedbackRequest);
  return Message.hash(into:)(a1, a2, v4);
}

void *Goldilocks_ExitMoveBatchErrorFeedbackResponse.protoMessageName.unsafeMutableAddressor()
{
  return &static Goldilocks_ExitMoveBatchErrorFeedbackResponse.protoMessageName;
}

unint64_t static Goldilocks_ExitMoveBatchErrorFeedbackResponse.protoMessageName.getter()
{
  return 0xD00000000000002DLL;
}

uint64_t sub_1000FA8D8(uint64_t a1)
{
  return sub_1000E4214( a1,  static Goldilocks_ExitMoveBatchErrorFeedbackResponse._protobuf_nameMap,  (uint64_t)"serviceError",  12LL);
}

uint64_t Goldilocks_ExitMoveBatchErrorFeedbackResponse._protobuf_nameMap.unsafeMutableAddressor()
{
  return sub_1000B9E20( &qword_100291950,  (uint64_t)static Goldilocks_ExitMoveBatchErrorFeedbackResponse._protobuf_nameMap,  (uint64_t)sub_1000FA8D8);
}

uint64_t static Goldilocks_ExitMoveBatchErrorFeedbackResponse._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000B9E7C( &qword_100291950,  (uint64_t)static Goldilocks_ExitMoveBatchErrorFeedbackResponse._protobuf_nameMap,  (uint64_t)sub_1000FA8D8,  a1);
}

uint64_t Goldilocks_ExitMoveBatchErrorFeedbackResponse.decodeMessage<A>(decoder:)( uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  if (!v4)
  {
    while ((v8 & 1) == 0)
    {
      if (result == 1)
      {
        uint64_t v9 = v3 + *(int *)(type metadata accessor for Goldilocks_ExitMoveBatchErrorFeedbackResponse(0LL) + 20);
        uint64_t v10 = type metadata accessor for Goldilocks_ErrorInfo.ResultError(0LL);
        uint64_t v11 = sub_1000BD35C( &qword_100295070,  type metadata accessor for Goldilocks_ErrorInfo.ResultError,  (uint64_t)&protocol conformance descriptor for Goldilocks_ErrorInfo.ResultError);
        dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)(v9, v10, v11, a2, a3);
      }

      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }
  }

  return result;
}

uint64_t Goldilocks_ExitMoveBatchErrorFeedbackResponse.traverse<A>(visitor:)( uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v21 = a3;
  uint64_t v7 = sub_1000BED3C(&qword_100293C98);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for Goldilocks_ErrorInfo.ResultError(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v19 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = *(int *)(type metadata accessor for Goldilocks_ExitMoveBatchErrorFeedbackResponse(0LL) + 20);
  uint64_t v20 = v3;
  sub_1000CE7B4(v3 + v14, (uint64_t)v9, &qword_100293C98);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1LL, v10) == 1)
  {
    sub_1000CEDAC((uint64_t)v9, &qword_100293C98);
    uint64_t v15 = v21;
  }

  else
  {
    sub_1000CEC9C((uint64_t)v9, (uint64_t)v13, type metadata accessor for Goldilocks_ErrorInfo.ResultError);
    uint64_t v16 = sub_1000BD35C( &qword_100295070,  type metadata accessor for Goldilocks_ErrorInfo.ResultError,  (uint64_t)&protocol conformance descriptor for Goldilocks_ErrorInfo.ResultError);
    uint64_t v17 = v21;
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v13, 1LL, v10, v16, a2, v21);
    uint64_t result = sub_1000CECE0((uint64_t)v13, type metadata accessor for Goldilocks_ErrorInfo.ResultError);
    uint64_t v15 = v17;
    if (v4) {
      return result;
    }
  }

  return UnknownStorage.traverse<A>(visitor:)(a1, a2, v15);
}

Swift::Int Goldilocks_ExitMoveBatchErrorFeedbackResponse.hashValue.getter()
{
  return sub_1000BC318( type metadata accessor for Goldilocks_ExitMoveBatchErrorFeedbackResponse,  &qword_100293D60,  (uint64_t)&protocol conformance descriptor for Goldilocks_ExitMoveBatchErrorFeedbackResponse);
}

uint64_t sub_1000FABDC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = a2 + *(int *)(a1 + 20);
  uint64_t v5 = type metadata accessor for Goldilocks_ErrorInfo.ResultError(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56LL))(v4, 1LL, 1LL, v5);
}

uint64_t sub_1000FAC28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return Goldilocks_ExitMoveBatchErrorFeedbackResponse.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t sub_1000FAC3C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return Goldilocks_ExitMoveBatchErrorFeedbackResponse.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t sub_1000FAC50(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000BD35C( &qword_100294D88,  type metadata accessor for Goldilocks_ExitMoveBatchErrorFeedbackResponse,  (uint64_t)&protocol conformance descriptor for Goldilocks_ExitMoveBatchErrorFeedbackResponse);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000FACA0@<X0>(uint64_t a1@<X8>)
{
  return sub_1000BA0EC( &qword_100291950,  (uint64_t)static Goldilocks_ExitMoveBatchErrorFeedbackResponse._protobuf_nameMap,  (uint64_t)sub_1000FA8D8,  a1);
}

uint64_t sub_1000FACBC(uint64_t a1)
{
  uint64_t v2 = sub_1000BD35C( &qword_100293FC0,  type metadata accessor for Goldilocks_ExitMoveBatchErrorFeedbackResponse,  (uint64_t)&protocol conformance descriptor for Goldilocks_ExitMoveBatchErrorFeedbackResponse);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000FACFC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000BD35C( &qword_100293FC0,  type metadata accessor for Goldilocks_ExitMoveBatchErrorFeedbackResponse,  (uint64_t)&protocol conformance descriptor for Goldilocks_ExitMoveBatchErrorFeedbackResponse);
  return Message.hash(into:)(a1, a2, v4);
}

void *Goldilocks_SilentMoverRampingRequest.protoMessageName.unsafeMutableAddressor()
{
  return &static Goldilocks_SilentMoverRampingRequest.protoMessageName;
}

unint64_t static Goldilocks_SilentMoverRampingRequest.protoMessageName.getter()
{
  return 0xD000000000000024LL;
}

uint64_t sub_1000FAD74(uint64_t a1)
{
  return sub_1000E4214(a1, static Goldilocks_SilentMoverRampingRequest._protobuf_nameMap, (uint64_t)"operationID", 11LL);
}

uint64_t Goldilocks_SilentMoverRampingRequest._protobuf_nameMap.unsafeMutableAddressor()
{
  return sub_1000B9E20( &qword_100291958,  (uint64_t)static Goldilocks_SilentMoverRampingRequest._protobuf_nameMap,  (uint64_t)sub_1000FAD74);
}

uint64_t static Goldilocks_SilentMoverRampingRequest._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000B9E7C( &qword_100291958,  (uint64_t)static Goldilocks_SilentMoverRampingRequest._protobuf_nameMap,  (uint64_t)sub_1000FAD74,  a1);
}

uint64_t Goldilocks_SilentMoverRampingRequest.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v8 = v3[1];
  uint64_t v9 = HIBYTE(v8) & 0xF;
  if ((v8 & 0x2000000000000000LL) == 0) {
    uint64_t v9 = *v3 & 0xFFFFFFFFFFFFLL;
  }
  if (!v9 || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(*v3, v8), !v4))
  {
    type metadata accessor for Goldilocks_SilentMoverRampingRequest(0LL);
    return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
  }

  return result;
}

Swift::Int Goldilocks_SilentMoverRampingRequest.hashValue.getter()
{
  return sub_1000BC318( type metadata accessor for Goldilocks_SilentMoverRampingRequest,  &qword_100293D68,  (uint64_t)&protocol conformance descriptor for Goldilocks_SilentMoverRampingRequest);
}

uint64_t sub_1000FAE84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return Goldilocks_SilentMoverRampingRequest.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t sub_1000FAE98(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000BD35C( &qword_100294D80,  type metadata accessor for Goldilocks_SilentMoverRampingRequest,  (uint64_t)&protocol conformance descriptor for Goldilocks_SilentMoverRampingRequest);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000FAEE8@<X0>(uint64_t a1@<X8>)
{
  return sub_1000BA0EC( &qword_100291958,  (uint64_t)static Goldilocks_SilentMoverRampingRequest._protobuf_nameMap,  (uint64_t)sub_1000FAD74,  a1);
}

uint64_t sub_1000FAF04(uint64_t a1)
{
  uint64_t v2 = sub_1000BD35C( &qword_100293AA0,  type metadata accessor for Goldilocks_SilentMoverRampingRequest,  (uint64_t)&protocol conformance descriptor for Goldilocks_SilentMoverRampingRequest);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000FAF44(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000BD35C( &qword_100293AA0,  type metadata accessor for Goldilocks_SilentMoverRampingRequest,  (uint64_t)&protocol conformance descriptor for Goldilocks_SilentMoverRampingRequest);
  return Message.hash(into:)(a1, a2, v4);
}

void *Goldilocks_SilentMoverRampingResponse.protoMessageName.unsafeMutableAddressor()
{
  return &static Goldilocks_SilentMoverRampingResponse.protoMessageName;
}

unint64_t static Goldilocks_SilentMoverRampingResponse.protoMessageName.getter()
{
  return 0xD000000000000025LL;
}

uint64_t sub_1000FAFBC()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_1000BECFC(v0, static Goldilocks_SilentMoverRampingResponse._protobuf_nameMap);
  sub_1000BCFB4(v0, (uint64_t)static Goldilocks_SilentMoverRampingResponse._protobuf_nameMap);
  uint64_t v1 = sub_1000BED3C(&qword_100291D80);
  uint64_t v2 = sub_1000BED3C(&qword_100291D88);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 4 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002135C0;
  uint64_t v8 = v7 + v6;
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  *(void *)(v7 + v6) = 1LL;
  *(void *)uint64_t v9 = "operationID";
  *(void *)(v9 + 8) = 11LL;
  *(_BYTE *)(v9 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  uint64_t v13 = v8 + v4 + *(int *)(v2 + 48);
  *(void *)(v8 + v4) = 2LL;
  *(void *)uint64_t v13 = "retryAfterSec";
  *(void *)(v13 + 8) = 13LL;
  *(_BYTE *)(v13 + 16) = 2;
  v12();
  uint64_t v14 = (void *)(v8 + 2 * v4);
  uint64_t v15 = (char *)v14 + *(int *)(v2 + 48);
  void *v14 = 3LL;
  *(void *)uint64_t v15 = "operationControl";
  *((void *)v15 + 1) = 16LL;
  v15[16] = 2;
  v12();
  uint64_t v16 = (void *)(v8 + 3 * v4);
  uint64_t v17 = (char *)v16 + *(int *)(v2 + 48);
  *uint64_t v16 = 4LL;
  *(void *)uint64_t v17 = "resultError";
  *((void *)v17 + 1) = 11LL;
  _BYTE v17[16] = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t Goldilocks_SilentMoverRampingResponse._protobuf_nameMap.unsafeMutableAddressor()
{
  return sub_1000B9E20( &qword_100291960,  (uint64_t)static Goldilocks_SilentMoverRampingResponse._protobuf_nameMap,  (uint64_t)sub_1000FAFBC);
}

uint64_t static Goldilocks_SilentMoverRampingResponse._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000B9E7C( &qword_100291960,  (uint64_t)static Goldilocks_SilentMoverRampingResponse._protobuf_nameMap,  (uint64_t)sub_1000FAFBC,  a1);
}

uint64_t Goldilocks_SilentMoverRampingResponse.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  uint64_t v9 = v4;
  if (!v4)
  {
    while ((v8 & 1) == 0)
    {
      switch(result)
      {
        case 1LL:
          uint64_t v10 = v9;
          dispatch thunk of Decoder.decodeSingularStringField(value:)(v3, a2, a3);
          goto LABEL_5;
        case 2LL:
          uint64_t v10 = v9;
          dispatch thunk of Decoder.decodeSingularInt64Field(value:)(v3 + 16, a2, a3);
          goto LABEL_5;
        case 3LL:
          uint64_t v11 = v3 + *(int *)(type metadata accessor for Goldilocks_SilentMoverRampingResponse(0LL) + 28);
          uint64_t v12 = type metadata accessor for Goldilocks_OperationControl(0LL);
          uint64_t v13 = (unint64_t *)&unk_100293D70;
          uint64_t v14 = type metadata accessor for Goldilocks_OperationControl;
          uint64_t v15 = &protocol conformance descriptor for Goldilocks_OperationControl;
          goto LABEL_12;
        case 4LL:
          uint64_t v11 = v3 + *(int *)(type metadata accessor for Goldilocks_SilentMoverRampingResponse(0LL) + 32);
          uint64_t v12 = type metadata accessor for Goldilocks_ErrorInfo.ResultError(0LL);
          uint64_t v13 = &qword_100295070;
          uint64_t v14 = type metadata accessor for Goldilocks_ErrorInfo.ResultError;
          uint64_t v15 = &protocol conformance descriptor for Goldilocks_ErrorInfo.ResultError;
LABEL_12:
          uint64_t v16 = sub_1000BD35C(v13, v14, (uint64_t)v15);
          uint64_t v10 = v9;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)(v11, v12, v16, a2, a3);
LABEL_5:
          uint64_t v9 = v10;
          break;
        default:
          break;
      }

      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }
  }

  return result;
}

uint64_t Goldilocks_SilentMoverRampingResponse.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t v9 = sub_1000BED3C(&qword_100293C98);
  __chkstk_darwin(v9);
  uint64_t v34 = (uint64_t)&v32 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v35 = type metadata accessor for Goldilocks_ErrorInfo.ResultError(0LL);
  uint64_t v33 = *(void *)(v35 - 8);
  __chkstk_darwin(v35);
  uint64_t v32 = (uint64_t)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = sub_1000BED3C(&qword_100293CA0);
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v32 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = type metadata accessor for Goldilocks_OperationControl(0LL);
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  uint64_t v18 = (char *)&v32 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = *v5;
  unint64_t v20 = v5[1];
  uint64_t v21 = HIBYTE(v20) & 0xF;
  if ((v20 & 0x2000000000000000LL) == 0) {
    uint64_t v21 = *v5 & 0xFFFFFFFFFFFFLL;
  }
  uint64_t v36 = a3;
  if (v21)
  {
    uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(v19, v20);
    uint64_t v23 = a2;
    if (v4) {
      return result;
    }
    uint64_t v24 = v5[2];
    if (!v24) {
      goto LABEL_9;
    }
  }

  else
  {
    uint64_t v23 = a2;
    uint64_t v24 = v5[2];
    if (!v24) {
      goto LABEL_9;
    }
  }

  uint64_t result = dispatch thunk of Visitor.visitSingularInt64Field(value:fieldNumber:)(v24, 2LL, v23, v36);
  if (v4) {
    return result;
  }
LABEL_9:
  uint64_t v25 = type metadata accessor for Goldilocks_SilentMoverRampingResponse(0LL);
  sub_1000CE7B4((uint64_t)v5 + *(int *)(v25 + 28), (uint64_t)v14, &qword_100293CA0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1LL, v15) == 1)
  {
    sub_1000CEDAC((uint64_t)v14, &qword_100293CA0);
  }

  else
  {
    sub_1000CEC9C((uint64_t)v14, (uint64_t)v18, type metadata accessor for Goldilocks_OperationControl);
    uint64_t v26 = sub_1000BD35C( &qword_100293D70,  type metadata accessor for Goldilocks_OperationControl,  (uint64_t)&protocol conformance descriptor for Goldilocks_OperationControl);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v18, 3LL, v15, v26, v23, v36);
    uint64_t result = sub_1000CECE0((uint64_t)v18, type metadata accessor for Goldilocks_OperationControl);
    if (v4) {
      return result;
    }
  }

  uint64_t v27 = v34;
  sub_1000CE7B4((uint64_t)v5 + *(int *)(v25 + 32), v34, &qword_100293C98);
  uint64_t v28 = v35;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v33 + 48))(v27, 1LL, v35) == 1)
  {
    sub_1000CEDAC(v27, &qword_100293C98);
  }

  else
  {
    uint64_t v29 = v27;
    uint64_t v30 = v32;
    sub_1000CEC9C(v29, v32, type metadata accessor for Goldilocks_ErrorInfo.ResultError);
    uint64_t v31 = sub_1000BD35C( &qword_100295070,  type metadata accessor for Goldilocks_ErrorInfo.ResultError,  (uint64_t)&protocol conformance descriptor for Goldilocks_ErrorInfo.ResultError);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v30, 4LL, v28, v31, v23, v36);
    uint64_t result = sub_1000CECE0(v30, type metadata accessor for Goldilocks_ErrorInfo.ResultError);
    if (v4) {
      return result;
    }
  }

  return UnknownStorage.traverse<A>(visitor:)(a1, v23, v36);
}

Swift::Int Goldilocks_SilentMoverRampingResponse.hashValue.getter()
{
  return sub_1000BC318( type metadata accessor for Goldilocks_SilentMoverRampingResponse,  &qword_100293D78,  (uint64_t)&protocol conformance descriptor for Goldilocks_SilentMoverRampingResponse);
}

uint64_t sub_1000FB690@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = 0LL;
  a2[1] = 0xE000000000000000LL;
  a2[2] = 0LL;
  UnknownStorage.init()(a1);
  uint64_t v4 = (char *)a2 + *(int *)(a1 + 28);
  uint64_t v5 = type metadata accessor for Goldilocks_OperationControl(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56LL))(v4, 1LL, 1LL, v5);
  uint64_t v6 = (char *)a2 + *(int *)(a1 + 32);
  uint64_t v7 = type metadata accessor for Goldilocks_ErrorInfo.ResultError(0LL);
  return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL))(v6, 1LL, 1LL, v7);
}

uint64_t sub_1000FB724(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return Goldilocks_SilentMoverRampingResponse.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t sub_1000FB738(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return Goldilocks_SilentMoverRampingResponse.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t sub_1000FB74C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000BD35C( &qword_100294D78,  type metadata accessor for Goldilocks_SilentMoverRampingResponse,  (uint64_t)&protocol conformance descriptor for Goldilocks_SilentMoverRampingResponse);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000FB79C@<X0>(uint64_t a1@<X8>)
{
  return sub_1000BA0EC( &qword_100291960,  (uint64_t)static Goldilocks_SilentMoverRampingResponse._protobuf_nameMap,  (uint64_t)sub_1000FAFBC,  a1);
}

uint64_t sub_1000FB7B8(uint64_t a1)
{
  uint64_t v2 = sub_1000BD35C( &qword_100293FE8,  type metadata accessor for Goldilocks_SilentMoverRampingResponse,  (uint64_t)&protocol conformance descriptor for Goldilocks_SilentMoverRampingResponse);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000FB7F8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000BD35C( &qword_100293FE8,  type metadata accessor for Goldilocks_SilentMoverRampingResponse,  (uint64_t)&protocol conformance descriptor for Goldilocks_SilentMoverRampingResponse);
  return Message.hash(into:)(a1, a2, v4);
}

void *Goldilocks_OperationControl.protoMessageName.unsafeMutableAddressor()
{
  return &static Goldilocks_OperationControl.protoMessageName;
}

unint64_t static Goldilocks_OperationControl.protoMessageName.getter()
{
  return 0xD00000000000001BLL;
}

uint64_t sub_1000FB870()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_1000BECFC(v0, static Goldilocks_OperationControl._protobuf_nameMap);
  sub_1000BCFB4(v0, (uint64_t)static Goldilocks_OperationControl._protobuf_nameMap);
  uint64_t v1 = sub_1000BED3C(&qword_100291D80);
  uint64_t v2 = sub_1000BED3C(&qword_100291D88);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 - v4 + 8 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_100212530;
  uint64_t v8 = v7 + v6;
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  *(void *)(v7 + v6) = 1LL;
  *(void *)uint64_t v9 = "unshareOperationPercentage";
  *(void *)(v9 + 8) = 26LL;
  *(_BYTE *)(v9 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  uint64_t v13 = v8 + v4 + *(int *)(v2 + 48);
  *(void *)(v8 + v4) = 2LL;
  *(void *)uint64_t v13 = "allowClone";
  *(void *)(v13 + 8) = 10LL;
  *(_BYTE *)(v13 + 16) = 2;
  v12();
  uint64_t v14 = (void *)(v8 + 2 * v4);
  uint64_t v15 = (char *)v14 + *(int *)(v2 + 48);
  void *v14 = 3LL;
  *(void *)uint64_t v15 = "allowShare";
  *((void *)v15 + 1) = 10LL;
  v15[16] = 2;
  v12();
  uint64_t v16 = (void *)(v8 + 3 * v4);
  uint64_t v17 = (char *)v16 + *(int *)(v2 + 48);
  *uint64_t v16 = 4LL;
  *(void *)uint64_t v17 = "allowUnshare";
  *((void *)v17 + 1) = 12LL;
  _BYTE v17[16] = 2;
  v12();
  uint64_t v18 = (void *)(v8 + 4 * v4);
  uint64_t v19 = (char *)v18 + *(int *)(v2 + 48);
  void *v18 = 5LL;
  *(void *)uint64_t v19 = "allowExit";
  *((void *)v19 + 1) = 9LL;
  v19[16] = 2;
  v12();
  unint64_t v20 = (void *)(v8 + 5 * v4);
  uint64_t v21 = (char *)v20 + *(int *)(v2 + 48);
  *unint64_t v20 = 6LL;
  *(void *)uint64_t v21 = "allowCleanup";
  *((void *)v21 + 1) = 12LL;
  v21[16] = 2;
  v12();
  unint64_t v22 = (void *)(v8 + 6 * v4);
  uint64_t v23 = (char *)v22 + *(int *)(v2 + 48);
  *unint64_t v22 = 7LL;
  *(void *)uint64_t v23 = "allowSharedLibrary";
  *((void *)v23 + 1) = 18LL;
  _BYTE v23[16] = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t Goldilocks_OperationControl._protobuf_nameMap.unsafeMutableAddressor()
{
  return sub_1000B9E20( &qword_100291968,  (uint64_t)static Goldilocks_OperationControl._protobuf_nameMap,  (uint64_t)sub_1000FB870);
}

uint64_t static Goldilocks_OperationControl._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000B9E7C( &qword_100291968,  (uint64_t)static Goldilocks_OperationControl._protobuf_nameMap,  (uint64_t)sub_1000FB870,  a1);
}

uint64_t Goldilocks_OperationControl.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  if (!v4)
  {
    uint64_t v12 = v3 + 14;
    while ((v8 & 1) == 0)
    {
      switch(result)
      {
        case 1LL:
          if ((*(_BYTE *)(v3 + 8) & 1) == 0) {
            dispatch thunk of Decoder.handleConflictingOneOf()(a2, a3);
          }
          uint64_t v10 = 0LL;
          char v11 = 1;
          dispatch thunk of Decoder.decodeSingularDoubleField(value:)(&v10, a2, a3);
          if ((v11 & 1) == 0)
          {
            *(void *)uint64_t v3 = v10;
            *(_BYTE *)(v3 + 8) = 0;
          }

          break;
        case 2LL:
          uint64_t v9 = v3 + 9;
          goto LABEL_5;
        case 3LL:
          uint64_t v9 = v3 + 10;
          goto LABEL_5;
        case 4LL:
          uint64_t v9 = v3 + 11;
          goto LABEL_5;
        case 5LL:
          uint64_t v9 = v3 + 12;
          goto LABEL_5;
        case 6LL:
          uint64_t v9 = v3 + 13;
          goto LABEL_5;
        case 7LL:
          uint64_t v9 = v12;
LABEL_5:
          dispatch thunk of Decoder.decodeSingularBoolField(value:)(v9, a2, a3);
          break;
        default:
          break;
      }

      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }
  }

  return result;
}

uint64_t Goldilocks_OperationControl.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  if ((*(_BYTE *)(v5 + 8) & 1) != 0
    || (uint64_t result = dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(1LL, a2, a3, *(double *)v5), !v4))
  {
    if (*(_BYTE *)(v5 + 9) != 1
      || (uint64_t result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(1LL, 2LL, a2, a3), !v4))
    {
      if (*(_BYTE *)(v5 + 10) != 1
        || (uint64_t result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(1LL, 3LL, a2, a3), !v4))
      {
        if (*(_BYTE *)(v5 + 11) != 1
          || (uint64_t result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(1LL, 4LL, a2, a3), !v4))
        {
          if (*(_BYTE *)(v5 + 12) != 1
            || (uint64_t result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(1LL, 5LL, a2, a3), !v4))
          {
            if (*(_BYTE *)(v5 + 13) != 1
              || (uint64_t result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(1LL, 6LL, a2, a3), !v4))
            {
              if (*(_BYTE *)(v5 + 14) != 1
                || (uint64_t result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(1LL, 7LL, a2, a3), !v4))
              {
                type metadata accessor for Goldilocks_OperationControl(0LL);
                return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
              }
            }
          }
        }
      }
    }
  }

  return result;
}

Swift::Int Goldilocks_OperationControl.hashValue.getter()
{
  return sub_1000BC318( type metadata accessor for Goldilocks_OperationControl,  &qword_100293D80,  (uint64_t)&protocol conformance descriptor for Goldilocks_OperationControl);
}

uint64_t sub_1000FBE14@<X0>(uint64_t a1@<X8>)
{
  *(void *)a1 = 0LL;
  *(_BYTE *)(a1 + 8) = 1;
  *(_DWORD *)(a1 + 9) = 0;
  *(_WORD *)(a1 + 13) = 0;
  return UnknownStorage.init()();
}

uint64_t sub_1000FBE4C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return Goldilocks_OperationControl.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t sub_1000FBE60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return Goldilocks_OperationControl.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t sub_1000FBE74(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000BD35C( &qword_100294D70,  type metadata accessor for Goldilocks_OperationControl,  (uint64_t)&protocol conformance descriptor for Goldilocks_OperationControl);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000FBEC4@<X0>(uint64_t a1@<X8>)
{
  return sub_1000BA0EC( &qword_100291968,  (uint64_t)static Goldilocks_OperationControl._protobuf_nameMap,  (uint64_t)sub_1000FB870,  a1);
}

uint64_t sub_1000FBEE0(uint64_t a1)
{
  uint64_t v2 = sub_1000BD35C( &qword_100293D70,  type metadata accessor for Goldilocks_OperationControl,  (uint64_t)&protocol conformance descriptor for Goldilocks_OperationControl);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000FBF20(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000BD35C( &qword_100293D70,  type metadata accessor for Goldilocks_OperationControl,  (uint64_t)&protocol conformance descriptor for Goldilocks_OperationControl);
  return Message.hash(into:)(a1, a2, v4);
}

void *Goldilocks_ErrorInfo.protoMessageName.unsafeMutableAddressor()
{
  return &static Goldilocks_ErrorInfo.protoMessageName;
}

unint64_t static Goldilocks_ErrorInfo.protoMessageName.getter()
{
  return 0xD000000000000014LL;
}

uint64_t sub_1000FBF98(uint64_t a1)
{
  return sub_1000D106C(a1, static Goldilocks_ErrorInfo._protobuf_nameMap);
}

uint64_t Goldilocks_ErrorInfo._protobuf_nameMap.unsafeMutableAddressor()
{
  return sub_1000B9E20(&qword_100291970, (uint64_t)static Goldilocks_ErrorInfo._protobuf_nameMap, (uint64_t)sub_1000FBF98);
}

uint64_t static Goldilocks_ErrorInfo._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000B9E7C( &qword_100291970,  (uint64_t)static Goldilocks_ErrorInfo._protobuf_nameMap,  (uint64_t)sub_1000FBF98,  a1);
}

Swift::Int Goldilocks_ErrorInfo.hashValue.getter()
{
  return sub_1000BC318( type metadata accessor for Goldilocks_ErrorInfo,  &qword_100293D88,  (uint64_t)&protocol conformance descriptor for Goldilocks_ErrorInfo);
}

uint64_t sub_1000FBFF8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000BD35C( &qword_100294D68,  type metadata accessor for Goldilocks_ErrorInfo,  (uint64_t)&protocol conformance descriptor for Goldilocks_ErrorInfo);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000FC048@<X0>(uint64_t a1@<X8>)
{
  return sub_1000BA0EC( &qword_100291970,  (uint64_t)static Goldilocks_ErrorInfo._protobuf_nameMap,  (uint64_t)sub_1000FBF98,  a1);
}

uint64_t sub_1000FC064(uint64_t a1)
{
  uint64_t v2 = sub_1000BD35C( &qword_100294010,  type metadata accessor for Goldilocks_ErrorInfo,  (uint64_t)&protocol conformance descriptor for Goldilocks_ErrorInfo);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000FC0A4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000BD35C( &qword_100294010,  type metadata accessor for Goldilocks_ErrorInfo,  (uint64_t)&protocol conformance descriptor for Goldilocks_ErrorInfo);
  return Message.hash(into:)(a1, a2, v4);
}

uint64_t sub_1000FC0F4()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_1000BECFC(v0, static Goldilocks_ErrorInfo.ResultErrorCode._protobuf_nameMap);
  sub_1000BCFB4(v0, (uint64_t)static Goldilocks_ErrorInfo.ResultErrorCode._protobuf_nameMap);
  uint64_t v1 = sub_1000BED3C(&qword_100291D80);
  uint64_t v2 = sub_1000BED3C(&qword_100291D88);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v33 = swift_allocObject(v1, v6 + 12 * v4, v5 | 7);
  *(_OWORD *)(v33 + 16) = xmmword_100216D50;
  uint64_t v7 = v33 + v6;
  uint64_t v8 = v33 + v6 + *(int *)(v2 + 48);
  *(void *)(v33 + v6) = 0LL;
  *(void *)uint64_t v8 = "NO_ERROR";
  *(void *)(v8 + 8) = 8LL;
  *(_BYTE *)(v8 + 16) = 2;
  uint64_t v9 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v10 = type metadata accessor for _NameMap.NameDescription(0LL);
  char v11 = *(void (**)(void))(*(void *)(v10 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v11)(v8, v9, v10);
  uint64_t v12 = v33 + v6 + v4 + *(int *)(v2 + 48);
  *(void *)(v7 + v4) = 1LL;
  *(void *)uint64_t v12 = "UNKNOWN";
  *(void *)(v12 + 8) = 7LL;
  *(_BYTE *)(v12 + 16) = 2;
  v11();
  uint64_t v13 = (void *)(v33 + v6 + 2 * v4);
  uint64_t v14 = (char *)v13 + *(int *)(v2 + 48);
  *uint64_t v13 = 2LL;
  *(void *)uint64_t v14 = "SERVER_ERROR";
  *((void *)v14 + 1) = 12LL;
  v14[16] = 2;
  v11();
  uint64_t v15 = (void *)(v33 + v6 + 3 * v4);
  uint64_t v16 = (char *)v15 + *(int *)(v2 + 48);
  *uint64_t v15 = 3LL;
  *(void *)uint64_t v16 = "FAILED_CK_CALL";
  *((void *)v16 + 1) = 14LL;
  _BYTE v16[16] = 2;
  v11();
  uint64_t v17 = (void *)(v33 + v6 + 4 * v4);
  uint64_t v18 = (char *)v17 + *(int *)(v2 + 48);
  *uint64_t v17 = 4LL;
  *(void *)uint64_t v18 = "MISSING_ARGUMENTS";
  *((void *)v18 + 1) = 17LL;
  v18[16] = 2;
  v11();
  uint64_t v19 = (void *)(v33 + v6 + 5 * v4);
  unint64_t v20 = (char *)v19 + *(int *)(v2 + 48);
  *uint64_t v19 = 5LL;
  *(void *)unint64_t v20 = "INVALID_ARGUMENTS";
  *((void *)v20 + 1) = 17LL;
  v20[16] = 2;
  v11();
  uint64_t v21 = (void *)(v33 + v6 + 6 * v4);
  unint64_t v22 = (char *)v21 + *(int *)(v2 + 48);
  *uint64_t v21 = 6LL;
  *(void *)unint64_t v22 = "ZONE_NOT_FOUND";
  *((void *)v22 + 1) = 14LL;
  v22[16] = 2;
  v11();
  uint64_t v23 = (void *)(v33 + v6 + 7 * v4);
  uint64_t v24 = (char *)v23 + *(int *)(v2 + 48);
  *uint64_t v23 = 7LL;
  *(void *)uint64_t v24 = "RECORD_NOT_FOUND";
  *((void *)v24 + 1) = 16LL;
  _BYTE v24[16] = 2;
  v11();
  uint64_t v25 = v33 + v6 + 8 * v4 + *(int *)(v2 + 48);
  *(void *)(v7 + 8 * v4) = 8LL;
  *(void *)uint64_t v25 = "PERMISSION_DENIED";
  *(void *)(v25 + 8) = 17LL;
  *(_BYTE *)(v25 + 16) = 2;
  v11();
  uint64_t v26 = (void *)(v33 + v6 + 9 * v4);
  uint64_t v27 = (char *)v26 + *(int *)(v2 + 48);
  *uint64_t v26 = 9LL;
  *(void *)uint64_t v27 = "MULTI_STATUS";
  *((void *)v27 + 1) = 12LL;
  v27[16] = 2;
  v11();
  uint64_t v28 = (void *)(v33 + v6 + 10 * v4);
  uint64_t v29 = (char *)v28 + *(int *)(v2 + 48);
  *uint64_t v28 = 10LL;
  *(void *)uint64_t v29 = "NOT_YET_SUPPORTED";
  *((void *)v29 + 1) = 17LL;
  v29[16] = 2;
  v11();
  uint64_t v30 = (void *)(v33 + v6 + 11 * v4);
  uint64_t v31 = (char *)v30 + *(int *)(v2 + 48);
  *uint64_t v30 = 11LL;
  *(void *)uint64_t v31 = "ALL_RECORDS_IN_PROGRESS";
  *((void *)v31 + 1) = 23LL;
  v31[16] = 2;
  v11();
  return _NameMap.init(dictionaryLiteral:)(v33);
}

uint64_t Goldilocks_ErrorInfo.ResultErrorCode._protobuf_nameMap.unsafeMutableAddressor()
{
  return sub_1000B9E20( &qword_100291978,  (uint64_t)static Goldilocks_ErrorInfo.ResultErrorCode._protobuf_nameMap,  (uint64_t)sub_1000FC0F4);
}

uint64_t static Goldilocks_ErrorInfo.ResultErrorCode._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000B9E7C( &qword_100291978,  (uint64_t)static Goldilocks_ErrorInfo.ResultErrorCode._protobuf_nameMap,  (uint64_t)sub_1000FC0F4,  a1);
}

uint64_t sub_1000FC494@<X0>(uint64_t a1@<X8>)
{
  return sub_1000BA0EC( &qword_100291978,  (uint64_t)static Goldilocks_ErrorInfo.ResultErrorCode._protobuf_nameMap,  (uint64_t)sub_1000FC0F4,  a1);
}

void sub_1000FC4B0(int a1)
{
  v1._object = (void *)0x80000001001D2070LL;
  v1._countAndFlagsBits = 0xD000000000000010LL;
  sub_1000FCB5C( a1,  v1,  static Goldilocks_ErrorInfo.DatabaseFailure.protoMessageName,  &static Goldilocks_ErrorInfo.DatabaseFailure.protoMessageName[1]);
}

void *Goldilocks_ErrorInfo.DatabaseFailure.protoMessageName.unsafeMutableAddressor()
{
  if (qword_100291980 != -1) {
    swift_once(&qword_100291980, sub_1000FC4B0);
  }
  return static Goldilocks_ErrorInfo.DatabaseFailure.protoMessageName;
}

uint64_t static Goldilocks_ErrorInfo.DatabaseFailure.protoMessageName.getter()
{
  return sub_1000BB594( &qword_100291980,  static Goldilocks_ErrorInfo.DatabaseFailure.protoMessageName,  &static Goldilocks_ErrorInfo.DatabaseFailure.protoMessageName[1],  (uint64_t)sub_1000FC4B0);
}

uint64_t sub_1000FC538()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_1000BECFC(v0, static Goldilocks_ErrorInfo.DatabaseFailure._protobuf_nameMap);
  sub_1000BCFB4(v0, (uint64_t)static Goldilocks_ErrorInfo.DatabaseFailure._protobuf_nameMap);
  uint64_t v1 = sub_1000BED3C(&qword_100291D80);
  uint64_t v2 = sub_1000BED3C(&qword_100291D88);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 4 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002135C0;
  uint64_t v8 = v7 + v6;
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  *(void *)(v7 + v6) = 1LL;
  *(void *)uint64_t v9 = "ckOperation";
  *(void *)(v9 + 8) = 11LL;
  *(_BYTE *)(v9 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  uint64_t v13 = v8 + v4 + *(int *)(v2 + 48);
  *(void *)(v8 + v4) = 2LL;
  *(void *)uint64_t v13 = "description";
  *(void *)(v13 + 8) = 11LL;
  *(_BYTE *)(v13 + 16) = 2;
  v12();
  uint64_t v14 = (void *)(v8 + 2 * v4);
  uint64_t v15 = (char *)v14 + *(int *)(v2 + 48);
  void *v14 = 3LL;
  *(void *)uint64_t v15 = "clientCode";
  *((void *)v15 + 1) = 10LL;
  v15[16] = 2;
  v12();
  uint64_t v16 = (void *)(v8 + 3 * v4);
  uint64_t v17 = (char *)v16 + *(int *)(v2 + 48);
  *uint64_t v16 = 4LL;
  *(void *)uint64_t v17 = "serverCode";
  *((void *)v17 + 1) = 10LL;
  _BYTE v17[16] = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t Goldilocks_ErrorInfo.DatabaseFailure._protobuf_nameMap.unsafeMutableAddressor()
{
  return sub_1000B9E20( &qword_100291988,  (uint64_t)static Goldilocks_ErrorInfo.DatabaseFailure._protobuf_nameMap,  (uint64_t)sub_1000FC538);
}

uint64_t static Goldilocks_ErrorInfo.DatabaseFailure._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000B9E7C( &qword_100291988,  (uint64_t)static Goldilocks_ErrorInfo.DatabaseFailure._protobuf_nameMap,  (uint64_t)sub_1000FC538,  a1);
}

uint64_t Goldilocks_ErrorInfo.DatabaseFailure.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  if (!v4)
  {
    while ((v8 & 1) == 0)
    {
      switch(result)
      {
        case 1LL:
          uint64_t v9 = v3;
          goto LABEL_5;
        case 2LL:
          uint64_t v9 = v3 + 16;
LABEL_5:
          dispatch thunk of Decoder.decodeSingularStringField(value:)(v9, a2, a3);
          break;
        case 3LL:
          unint64_t v10 = sub_1000BD010();
          uint64_t v11 = v3 + 32;
          uint64_t v12 = &type metadata for Rpcproto_ErrorInfo.Client.Code;
          goto LABEL_11;
        case 4LL:
          unint64_t v10 = sub_1000BCFCC();
          uint64_t v11 = v3 + 48;
          uint64_t v12 = &type metadata for Rpcproto_ErrorInfo.Server.Code;
LABEL_11:
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)(v11, v12, v10, a2, a3);
          break;
        default:
          break;
      }

      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }
  }

  return result;
}

uint64_t Goldilocks_ErrorInfo.DatabaseFailure.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  unint64_t v9 = *(void *)(v5 + 8);
  uint64_t v10 = HIBYTE(v9) & 0xF;
  if ((v9 & 0x2000000000000000LL) == 0) {
    uint64_t v10 = *(void *)v5 & 0xFFFFFFFFFFFFLL;
  }
  if (!v10 || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(*(void *)v5, v9), !v4))
  {
    uint64_t v12 = *(void *)(v5 + 16);
    unint64_t v13 = *(void *)(v5 + 24);
    uint64_t v14 = HIBYTE(v13) & 0xF;
    if ((v13 & 0x2000000000000000LL) == 0) {
      uint64_t v14 = v12 & 0xFFFFFFFFFFFFLL;
    }
    if (!v14 || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(v12, v13), !v4))
    {
      uint64_t v15 = *(void *)(v5 + 32);
      char v16 = *(_BYTE *)(v5 + 40);
      if (!Rpcproto_ErrorInfo.Client.Code.rawValue.getter(v15, v16)
        || (uint64_t v20 = v15,
            char v21 = v16,
            unint64_t v17 = sub_1000BD010(),
            uint64_t result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)( &v20,  3LL,  &type metadata for Rpcproto_ErrorInfo.Client.Code,  v17,  a2,  a3),  !v4))
      {
        if (!*(void *)(v5 + 48)
          || (char v18 = *(_BYTE *)(v5 + 56),
              uint64_t v20 = *(void *)(v5 + 48),
              char v21 = v18,
              unint64_t v19 = sub_1000BCFCC(),
              uint64_t result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)( &v20,  4LL,  &type metadata for Rpcproto_ErrorInfo.Server.Code,  v19,  a2,  a3),  !v4))
        {
          type metadata accessor for Goldilocks_ErrorInfo.DatabaseFailure(0LL);
          return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
        }
      }
    }
  }

  return result;
}

Swift::Int Goldilocks_ErrorInfo.DatabaseFailure.hashValue.getter()
{
  return sub_1000BC318( type metadata accessor for Goldilocks_ErrorInfo.DatabaseFailure,  &qword_100293D90,  (uint64_t)&protocol conformance descriptor for Goldilocks_ErrorInfo.DatabaseFailure);
}

uint64_t sub_1000FC9E8(uint64_t a1, uint64_t a2)
{
  return sub_1000BB8E8( a1,  a2,  &qword_100291980,  static Goldilocks_ErrorInfo.DatabaseFailure.protoMessageName,  &static Goldilocks_ErrorInfo.DatabaseFailure.protoMessageName[1],  (uint64_t)sub_1000FC4B0);
}

uint64_t sub_1000FCA08(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return Goldilocks_ErrorInfo.DatabaseFailure.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t sub_1000FCA1C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return Goldilocks_ErrorInfo.DatabaseFailure.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t sub_1000FCA30(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000BD35C( &qword_100294D60,  type metadata accessor for Goldilocks_ErrorInfo.DatabaseFailure,  (uint64_t)&protocol conformance descriptor for Goldilocks_ErrorInfo.DatabaseFailure);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000FCA80@<X0>(uint64_t a1@<X8>)
{
  return sub_1000BA0EC( &qword_100291988,  (uint64_t)static Goldilocks_ErrorInfo.DatabaseFailure._protobuf_nameMap,  (uint64_t)sub_1000FC538,  a1);
}

uint64_t sub_1000FCA9C(uint64_t a1)
{
  uint64_t v2 = sub_1000BD35C( &qword_100293D98,  type metadata accessor for Goldilocks_ErrorInfo.DatabaseFailure,  (uint64_t)&protocol conformance descriptor for Goldilocks_ErrorInfo.DatabaseFailure);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000FCADC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000BD35C( &qword_100293D98,  type metadata accessor for Goldilocks_ErrorInfo.DatabaseFailure,  (uint64_t)&protocol conformance descriptor for Goldilocks_ErrorInfo.DatabaseFailure);
  return Message.hash(into:)(a1, a2, v4);
}

void sub_1000FCB30(int a1)
{
  v1._countAndFlagsBits = 0x45746C757365522ELL;
  v1._object = (void *)0xEC000000726F7272LL;
  sub_1000FCB5C( a1,  v1,  static Goldilocks_ErrorInfo.ResultError.protoMessageName,  &static Goldilocks_ErrorInfo.ResultError.protoMessageName[1]);
}

void sub_1000FCB5C(int a1, Swift::String a2, void *a3, void *a4)
{
  *a3 = 0xD000000000000014LL;
  *a4 = 0x80000001001D3070LL;
}

void *Goldilocks_ErrorInfo.ResultError.protoMessageName.unsafeMutableAddressor()
{
  if (qword_100291990 != -1) {
    swift_once(&qword_100291990, sub_1000FCB30);
  }
  return static Goldilocks_ErrorInfo.ResultError.protoMessageName;
}

uint64_t static Goldilocks_ErrorInfo.ResultError.protoMessageName.getter()
{
  return sub_1000BB594( &qword_100291990,  static Goldilocks_ErrorInfo.ResultError.protoMessageName,  &static Goldilocks_ErrorInfo.ResultError.protoMessageName[1],  (uint64_t)sub_1000FCB30);
}

uint64_t sub_1000FCC24()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_1000BECFC(v0, static Goldilocks_ErrorInfo.ResultError._protobuf_nameMap);
  sub_1000BCFB4(v0, (uint64_t)static Goldilocks_ErrorInfo.ResultError._protobuf_nameMap);
  uint64_t v1 = sub_1000BED3C(&qword_100291D80);
  uint64_t v2 = sub_1000BED3C(&qword_100291D88);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 8 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_100214670;
  uint64_t v8 = v7 + v6;
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  *(void *)(v7 + v6) = 1LL;
  *(void *)uint64_t v9 = "errorMessage";
  *(void *)(v9 + 8) = 12LL;
  *(_BYTE *)(v9 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  uint64_t v13 = v8 + v4 + *(int *)(v2 + 48);
  *(void *)(v8 + v4) = 2LL;
  *(void *)uint64_t v13 = "resultErrorCode";
  *(void *)(v13 + 8) = 15LL;
  *(_BYTE *)(v13 + 16) = 2;
  v12();
  uint64_t v14 = (void *)(v8 + 2 * v4);
  uint64_t v15 = (char *)v14 + *(int *)(v2 + 48);
  void *v14 = 3LL;
  *(void *)uint64_t v15 = "databaseFailure";
  *((void *)v15 + 1) = 15LL;
  v15[16] = 2;
  v12();
  char v16 = (void *)(v8 + 3 * v4);
  unint64_t v17 = (char *)v16 + *(int *)(v2 + 48);
  *char v16 = 4LL;
  *(void *)unint64_t v17 = "errorDomain";
  *((void *)v17 + 1) = 11LL;
  _BYTE v17[16] = 2;
  v12();
  char v18 = (void *)(v8 + 4 * v4);
  unint64_t v19 = (char *)v18 + *(int *)(v2 + 48);
  void *v18 = 5LL;
  *(void *)unint64_t v19 = "errorCode";
  *((void *)v19 + 1) = 9LL;
  v19[16] = 2;
  v12();
  uint64_t v20 = (void *)(v8 + 5 * v4);
  char v21 = (char *)v20 + *(int *)(v2 + 48);
  *uint64_t v20 = 6LL;
  *(void *)char v21 = "databaseFailures";
  *((void *)v21 + 1) = 16LL;
  v21[16] = 2;
  v12();
  unint64_t v22 = (void *)(v8 + 6 * v4);
  uint64_t v23 = (char *)v22 + *(int *)(v2 + 48);
  *unint64_t v22 = 7LL;
  *(void *)uint64_t v23 = "localizedErrorDescription";
  *((void *)v23 + 1) = 25LL;
  _BYTE v23[16] = 2;
  v12();
  uint64_t v24 = (void *)(v8 + 7 * v4);
  uint64_t v25 = (char *)v24 + *(int *)(v2 + 48);
  *uint64_t v24 = 8LL;
  *(void *)uint64_t v25 = "learnMoreLink";
  *((void *)v25 + 1) = 13LL;
  _BYTE v25[16] = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t Goldilocks_ErrorInfo.ResultError._protobuf_nameMap.unsafeMutableAddressor()
{
  return sub_1000B9E20( &qword_100291998,  (uint64_t)static Goldilocks_ErrorInfo.ResultError._protobuf_nameMap,  (uint64_t)sub_1000FCC24);
}

uint64_t static Goldilocks_ErrorInfo.ResultError._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000B9E7C( &qword_100291998,  (uint64_t)static Goldilocks_ErrorInfo.ResultError._protobuf_nameMap,  (uint64_t)sub_1000FCC24,  a1);
}

uint64_t Goldilocks_ErrorInfo.ResultError.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  uint64_t v9 = v4;
  if (!v4)
  {
    while ((v8 & 1) == 0)
    {
      switch(result)
      {
        case 1LL:
          uint64_t v10 = v3;
          goto LABEL_13;
        case 2LL:
          unint64_t v11 = sub_100105628();
          uint64_t v12 = v9;
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)( v3 + 16,  &type metadata for Goldilocks_ErrorInfo.ResultErrorCode,  v11,  a2,  a3);
          goto LABEL_14;
        case 3LL:
          uint64_t v13 = v3 + *(int *)(type metadata accessor for Goldilocks_ErrorInfo.ResultError(0LL) + 48);
          uint64_t v14 = type metadata accessor for Goldilocks_ErrorInfo.DatabaseFailure(0LL);
          uint64_t v15 = sub_1000BD35C( &qword_100293D98,  type metadata accessor for Goldilocks_ErrorInfo.DatabaseFailure,  (uint64_t)&protocol conformance descriptor for Goldilocks_ErrorInfo.DatabaseFailure);
          uint64_t v12 = v9;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)(v13, v14, v15, a2, a3);
          goto LABEL_14;
        case 4LL:
          uint64_t v10 = v3 + 32;
          goto LABEL_13;
        case 5LL:
          uint64_t v12 = v9;
          dispatch thunk of Decoder.decodeSingularInt32Field(value:)(v3 + 48, a2, a3);
          goto LABEL_14;
        case 6LL:
          uint64_t v16 = type metadata accessor for Goldilocks_ErrorInfo.DatabaseFailure(0LL);
          uint64_t v17 = sub_1000BD35C( &qword_100293D98,  type metadata accessor for Goldilocks_ErrorInfo.DatabaseFailure,  (uint64_t)&protocol conformance descriptor for Goldilocks_ErrorInfo.DatabaseFailure);
          uint64_t v12 = v9;
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)(v3 + 56, v16, v17, a2, a3);
          goto LABEL_14;
        case 7LL:
          uint64_t v10 = v3 + 64;
          goto LABEL_13;
        case 8LL:
          uint64_t v10 = v3 + 80;
LABEL_13:
          uint64_t v12 = v9;
          dispatch thunk of Decoder.decodeSingularStringField(value:)(v10, a2, a3);
LABEL_14:
          uint64_t v9 = v12;
          break;
        default:
          break;
      }

      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }
  }

  return result;
}

uint64_t Goldilocks_ErrorInfo.ResultError.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t v9 = sub_1000BED3C(&qword_100293CA8);
  __chkstk_darwin(v9);
  unint64_t v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for Goldilocks_ErrorInfo.DatabaseFailure(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v34 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v16 = *(void *)(v5 + 8);
  uint64_t v17 = HIBYTE(v16) & 0xF;
  if ((v16 & 0x2000000000000000LL) == 0) {
    uint64_t v17 = *(void *)v5 & 0xFFFFFFFFFFFFLL;
  }
  if (!v17
    || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(*(void *)v5, v16), !v4))
  {
    if (!*(void *)(v5 + 16)
      || (char v19 = *(_BYTE *)(v5 + 24),
          uint64_t v34 = *(void *)(v5 + 16),
          char v35 = v19,
          unint64_t v20 = sub_100105628(),
          uint64_t result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)( &v34,  2LL,  &type metadata for Goldilocks_ErrorInfo.ResultErrorCode,  v20,  a2,  a3),  !v4))
    {
      uint64_t v36 = type metadata accessor for Goldilocks_ErrorInfo.ResultError(0LL);
      sub_1000CE7B4(v5 + *(int *)(v36 + 48), (uint64_t)v11, &qword_100293CA8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1LL, v12) == 1)
      {
        sub_1000CEDAC((uint64_t)v11, &qword_100293CA8);
      }

      else
      {
        sub_1000CEC9C((uint64_t)v11, (uint64_t)v15, type metadata accessor for Goldilocks_ErrorInfo.DatabaseFailure);
        uint64_t v21 = sub_1000BD35C( &qword_100293D98,  type metadata accessor for Goldilocks_ErrorInfo.DatabaseFailure,  (uint64_t)&protocol conformance descriptor for Goldilocks_ErrorInfo.DatabaseFailure);
        dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v15, 3LL, v12, v21, a2, a3);
        uint64_t result = sub_1000CECE0((uint64_t)v15, type metadata accessor for Goldilocks_ErrorInfo.DatabaseFailure);
        if (v4) {
          return result;
        }
      }

      uint64_t v22 = *(void *)(v5 + 32);
      unint64_t v23 = *(void *)(v5 + 40);
      uint64_t v24 = HIBYTE(v23) & 0xF;
      if ((v23 & 0x2000000000000000LL) == 0) {
        uint64_t v24 = v22 & 0xFFFFFFFFFFFFLL;
      }
      if (!v24 || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(v22, v23), !v4))
      {
        uint64_t v25 = *(unsigned int *)(v5 + 48);
        if (!(_DWORD)v25
          || (uint64_t result = dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)(v25, 5LL, a2, a3), !v4))
        {
          uint64_t v26 = *(void *)(v5 + 56);
          if (!*(void *)(v26 + 16)
            || (uint64_t v27 = sub_1000BD35C( &qword_100293D98,  type metadata accessor for Goldilocks_ErrorInfo.DatabaseFailure,  (uint64_t)&protocol conformance descriptor for Goldilocks_ErrorInfo.DatabaseFailure),  result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)( v26,  6LL,  v12,  v27,  a2,  a3),  !v4))
          {
            uint64_t v28 = *(void *)(v5 + 64);
            unint64_t v29 = *(void *)(v5 + 72);
            uint64_t v30 = HIBYTE(v29) & 0xF;
            if ((v29 & 0x2000000000000000LL) == 0) {
              uint64_t v30 = v28 & 0xFFFFFFFFFFFFLL;
            }
            if (!v30
              || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(v28, v29), !v4))
            {
              uint64_t v31 = *(void *)(v5 + 80);
              unint64_t v32 = *(void *)(v5 + 88);
              uint64_t v33 = HIBYTE(v32) & 0xF;
              if ((v32 & 0x2000000000000000LL) == 0) {
                uint64_t v33 = v31 & 0xFFFFFFFFFFFFLL;
              }
              if (!v33) {
                return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
              }
              uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(v31, v32);
              if (!v4) {
                return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
              }
            }
          }
        }
      }
    }
  }

  return result;
}

Swift::Int Goldilocks_ErrorInfo.ResultError.hashValue.getter()
{
  return sub_1000BC318( type metadata accessor for Goldilocks_ErrorInfo.ResultError,  &qword_100293DA8,  (uint64_t)&protocol conformance descriptor for Goldilocks_ErrorInfo.ResultError);
}

uint64_t sub_1000FD43C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0LL;
  *(void *)(a2 + 8) = 0xE000000000000000LL;
  *(void *)(a2 + 16) = 0LL;
  *(_BYTE *)(a2 + 24) = 1;
  *(void *)(a2 + 32) = 0LL;
  *(void *)(a2 + 40) = 0xE000000000000000LL;
  *(_DWORD *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = &_swiftEmptyArrayStorage;
  *(void *)(a2 + 64) = 0LL;
  *(void *)(a2 + 72) = 0xE000000000000000LL;
  *(void *)(a2 + 80) = 0LL;
  *(void *)(a2 + 88) = 0xE000000000000000LL;
  UnknownStorage.init()(a1);
  uint64_t v4 = a2 + *(int *)(a1 + 48);
  uint64_t v5 = type metadata accessor for Goldilocks_ErrorInfo.DatabaseFailure(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56LL))(v4, 1LL, 1LL, v5);
}

uint64_t sub_1000FD4C0(uint64_t a1, uint64_t a2)
{
  return sub_1000BB8E8( a1,  a2,  &qword_100291990,  static Goldilocks_ErrorInfo.ResultError.protoMessageName,  &static Goldilocks_ErrorInfo.ResultError.protoMessageName[1],  (uint64_t)sub_1000FCB30);
}

uint64_t sub_1000FD4E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return Goldilocks_ErrorInfo.ResultError.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t sub_1000FD4F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return Goldilocks_ErrorInfo.ResultError.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t sub_1000FD508(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000BD35C( &qword_100294D58,  type metadata accessor for Goldilocks_ErrorInfo.ResultError,  (uint64_t)&protocol conformance descriptor for Goldilocks_ErrorInfo.ResultError);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000FD558@<X0>(uint64_t a1@<X8>)
{
  return sub_1000BA0EC( &qword_100291998,  (uint64_t)static Goldilocks_ErrorInfo.ResultError._protobuf_nameMap,  (uint64_t)sub_1000FCC24,  a1);
}

uint64_t sub_1000FD574(uint64_t a1)
{
  uint64_t v2 = sub_1000BD35C( &qword_100295070,  type metadata accessor for Goldilocks_ErrorInfo.ResultError,  (uint64_t)&protocol conformance descriptor for Goldilocks_ErrorInfo.ResultError);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000FD5B4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000BD35C( &qword_100295070,  type metadata accessor for Goldilocks_ErrorInfo.ResultError,  (uint64_t)&protocol conformance descriptor for Goldilocks_ErrorInfo.ResultError);
  return Message.hash(into:)(a1, a2, v4);
}

void *Goldilocks_ExitStatusFeedbackRequest.protoMessageName.unsafeMutableAddressor()
{
  return &static Goldilocks_ExitStatusFeedbackRequest.protoMessageName;
}

unint64_t static Goldilocks_ExitStatusFeedbackRequest.protoMessageName.getter()
{
  return 0xD000000000000024LL;
}

uint64_t sub_1000FD62C()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_1000BECFC(v0, static Goldilocks_ExitStatusFeedbackRequest._protobuf_nameMap);
  sub_1000BCFB4(v0, (uint64_t)static Goldilocks_ExitStatusFeedbackRequest._protobuf_nameMap);
  uint64_t v1 = sub_1000BED3C(&qword_100291D80);
  uint64_t v2 = sub_1000BED3C(&qword_100291D88);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 3 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002135D0;
  char v8 = (void *)(v7 + v6);
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  *char v8 = 1LL;
  *(void *)uint64_t v9 = "operationID";
  *(void *)(v9 + 8) = 11LL;
  *(_BYTE *)(v9 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  uint64_t v13 = (char *)v8 + v4 + *(int *)(v2 + 48);
  *(void *)((char *)v8 + v4) = 2LL;
  *(void *)uint64_t v13 = "shareID";
  *((void *)v13 + 1) = 7LL;
  v13[16] = 2;
  v12();
  uint64_t v14 = (uint64_t)v8 + 2 * v4 + *(int *)(v2 + 48);
  *(void *)((char *)v8 + 2 * v4) = 3LL;
  *(void *)uint64_t v14 = "status";
  *(void *)(v14 + 8) = 6LL;
  *(_BYTE *)(v14 + 16) = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t Goldilocks_ExitStatusFeedbackRequest._protobuf_nameMap.unsafeMutableAddressor()
{
  return sub_1000B9E20( &qword_1002919A0,  (uint64_t)static Goldilocks_ExitStatusFeedbackRequest._protobuf_nameMap,  (uint64_t)sub_1000FD62C);
}

uint64_t static Goldilocks_ExitStatusFeedbackRequest._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000B9E7C( &qword_1002919A0,  (uint64_t)static Goldilocks_ExitStatusFeedbackRequest._protobuf_nameMap,  (uint64_t)sub_1000FD62C,  a1);
}

uint64_t Goldilocks_ExitStatusFeedbackRequest.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000FD824( a1,  a2,  a3,  type metadata accessor for Goldilocks_ExitStatusFeedbackRequest,  (uint64_t (*)(void))sub_10010566C,  (uint64_t)&type metadata for Goldilocks_ExitStatusFeedbackRequest.ClientStatus);
}

uint64_t sub_1000FD824( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void), uint64_t (*a5)(void), uint64_t a6)
{
  uint64_t v11 = v6;
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  if (!v7)
  {
    while ((v15 & 1) == 0)
    {
      switch(result)
      {
        case 3LL:
          uint64_t v16 = a5();
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)(v6 + 16, a6, v16, a2, a3);
          break;
        case 2LL:
          uint64_t v17 = v11;
          uint64_t v20 = v11 + *(int *)(a4(0LL) + 28);
          uint64_t v18 = type metadata accessor for Goldilocks_ZoneID(0LL);
          uint64_t v19 = sub_1000BD35C( &qword_100293CD0,  type metadata accessor for Goldilocks_ZoneID,  (uint64_t)&protocol conformance descriptor for Goldilocks_ZoneID);
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)(v20, v18, v19, a2, a3);
          uint64_t v11 = v17;
          break;
        case 1LL:
          dispatch thunk of Decoder.decodeSingularStringField(value:)(v11, a2, a3);
          break;
      }

      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }
  }

  return result;
}

uint64_t Goldilocks_ExitStatusFeedbackRequest.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000FD9BC( a1,  a2,  a3,  type metadata accessor for Goldilocks_ExitStatusFeedbackRequest,  (uint64_t (*)(uint64_t))sub_10010566C,  (uint64_t)&type metadata for Goldilocks_ExitStatusFeedbackRequest.ClientStatus);
}

uint64_t sub_1000FD9BC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void), uint64_t (*a5)(uint64_t), uint64_t a6)
{
  uint64_t v28 = a5;
  uint64_t v29 = a6;
  uint64_t v30 = a4;
  char v8 = v6;
  uint64_t v12 = sub_1000BED3C(&qword_100295030);
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v28 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = type metadata accessor for Goldilocks_ZoneID(0LL);
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  uint64_t v18 = (char *)&v28 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = *v8;
  unint64_t v20 = v8[1];
  uint64_t v21 = HIBYTE(v20) & 0xF;
  if ((v20 & 0x2000000000000000LL) == 0) {
    uint64_t v21 = *v8 & 0xFFFFFFFFFFFFLL;
  }
  uint64_t v34 = a3;
  uint64_t v31 = a1;
  if (v21)
  {
    uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(v19, v20);
    uint64_t v23 = a2;
    if (v7) {
      return result;
    }
  }

  else
  {
    uint64_t v23 = a2;
  }

  uint64_t v24 = v30(0LL);
  sub_1000CE7B4((uint64_t)v8 + *(int *)(v24 + 28), (uint64_t)v14, &qword_100295030);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1LL, v15) == 1)
  {
    uint64_t result = sub_1000CEDAC((uint64_t)v14, &qword_100295030);
  }

  else
  {
    sub_1000CEC9C((uint64_t)v14, (uint64_t)v18, type metadata accessor for Goldilocks_ZoneID);
    uint64_t v25 = sub_1000BD35C( &qword_100293CD0,  type metadata accessor for Goldilocks_ZoneID,  (uint64_t)&protocol conformance descriptor for Goldilocks_ZoneID);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v18, 2LL, v15, v25, v23, v34);
    uint64_t result = sub_1000CECE0((uint64_t)v18, type metadata accessor for Goldilocks_ZoneID);
    if (v7) {
      return result;
    }
  }

  if (!v8[2]) {
    return UnknownStorage.traverse<A>(visitor:)(v31, v23, v34);
  }
  char v26 = *((_BYTE *)v8 + 24);
  uint64_t v32 = v8[2];
  char v33 = v26;
  uint64_t v27 = v28(result);
  uint64_t result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(&v32, 3LL, v29, v27, v23, v34);
  if (!v7) {
    return UnknownStorage.traverse<A>(visitor:)(v31, v23, v34);
  }
  return result;
}

Swift::Int Goldilocks_ExitStatusFeedbackRequest.hashValue.getter()
{
  return sub_1000BC318( type metadata accessor for Goldilocks_ExitStatusFeedbackRequest,  &qword_100293DB8,  (uint64_t)&protocol conformance descriptor for Goldilocks_ExitStatusFeedbackRequest);
}

uint64_t sub_1000FDC1C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0LL;
  *(void *)(a2 + 8) = 0xE000000000000000LL;
  *(void *)(a2 + 16) = 0LL;
  *(_BYTE *)(a2 + 24) = 1;
  UnknownStorage.init()(a1);
  uint64_t v4 = a2 + *(int *)(a1 + 28);
  uint64_t v5 = type metadata accessor for Goldilocks_ZoneID(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56LL))(v4, 1LL, 1LL, v5);
}

uint64_t sub_1000FDC84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return Goldilocks_ExitStatusFeedbackRequest.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t sub_1000FDC98(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return Goldilocks_ExitStatusFeedbackRequest.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t sub_1000FDCAC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000BD35C( &qword_100294D50,  type metadata accessor for Goldilocks_ExitStatusFeedbackRequest,  (uint64_t)&protocol conformance descriptor for Goldilocks_ExitStatusFeedbackRequest);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000FDCFC@<X0>(uint64_t a1@<X8>)
{
  return sub_1000BA0EC( &qword_1002919A0,  (uint64_t)static Goldilocks_ExitStatusFeedbackRequest._protobuf_nameMap,  (uint64_t)sub_1000FD62C,  a1);
}

uint64_t sub_1000FDD18(uint64_t a1)
{
  uint64_t v2 = sub_1000BD35C( &qword_100293AB0,  type metadata accessor for Goldilocks_ExitStatusFeedbackRequest,  (uint64_t)&protocol conformance descriptor for Goldilocks_ExitStatusFeedbackRequest);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000FDD58(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000BD35C( &qword_100293AB0,  type metadata accessor for Goldilocks_ExitStatusFeedbackRequest,  (uint64_t)&protocol conformance descriptor for Goldilocks_ExitStatusFeedbackRequest);
  return Message.hash(into:)(a1, a2, v4);
}

uint64_t sub_1000FDDA8()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_1000BECFC(v0, static Goldilocks_ExitStatusFeedbackRequest.ClientStatus._protobuf_nameMap);
  sub_1000BCFB4(v0, (uint64_t)static Goldilocks_ExitStatusFeedbackRequest.ClientStatus._protobuf_nameMap);
  uint64_t v1 = sub_1000BED3C(&qword_100291D80);
  uint64_t v2 = sub_1000BED3C(&qword_100291D88);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 6 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002135B0;
  uint64_t v8 = v7 + v6;
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  *(void *)(v7 + v6) = 0LL;
  *(void *)uint64_t v9 = "UNKNOWN";
  *(void *)(v9 + 8) = 7LL;
  *(_BYTE *)(v9 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  uint64_t v13 = v8 + v4 + *(int *)(v2 + 48);
  *(void *)(v8 + v4) = 1LL;
  *(void *)uint64_t v13 = "PARTICIPANT_WAITING_FOR_EXIT_ZONE";
  *(void *)(v13 + 8) = 33LL;
  *(_BYTE *)(v13 + 16) = 2;
  v12();
  uint64_t v14 = (void *)(v8 + 2 * v4);
  uint64_t v15 = (char *)v14 + *(int *)(v2 + 48);
  void *v14 = 2LL;
  *(void *)uint64_t v15 = "OWNER_WAITING_FOR_MOVEOUT_ELIGIBILITY";
  *((void *)v15 + 1) = 37LL;
  v15[16] = 2;
  v12();
  uint64_t v16 = (void *)(v8 + 3 * v4);
  uint64_t v17 = (char *)v16 + *(int *)(v2 + 48);
  *uint64_t v16 = 3LL;
  *(void *)uint64_t v17 = "WAITING_FOR_PARTICIPANT_EXIT_COMPLETION";
  *((void *)v17 + 1) = 39LL;
  _BYTE v17[16] = 2;
  v12();
  uint64_t v18 = (void *)(v8 + 4 * v4);
  uint64_t v19 = (char *)v18 + *(int *)(v2 + 48);
  void *v18 = 10LL;
  *(void *)uint64_t v19 = "WAITING_FOR_DISCRETIONARY_WINDOW_MOVE_BATCH";
  *((void *)v19 + 1) = 43LL;
  v19[16] = 2;
  v12();
  unint64_t v20 = (void *)(v8 + 5 * v4);
  uint64_t v21 = (char *)v20 + *(int *)(v2 + 48);
  *unint64_t v20 = 11LL;
  *(void *)uint64_t v21 = "WAITING_FOR_DISCRETIONARY_WINDOW_MOVE_RECORDS";
  *((void *)v21 + 1) = 45LL;
  v21[16] = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t Goldilocks_ExitStatusFeedbackRequest.ClientStatus._protobuf_nameMap.unsafeMutableAddressor()
{
  return sub_1000B9E20( &qword_1002919A8,  (uint64_t)static Goldilocks_ExitStatusFeedbackRequest.ClientStatus._protobuf_nameMap,  (uint64_t)sub_1000FDDA8);
}

uint64_t static Goldilocks_ExitStatusFeedbackRequest.ClientStatus._protobuf_nameMap.getter@<X0>( uint64_t a1@<X8>)
{
  return sub_1000B9E7C( &qword_1002919A8,  (uint64_t)static Goldilocks_ExitStatusFeedbackRequest.ClientStatus._protobuf_nameMap,  (uint64_t)sub_1000FDDA8,  a1);
}

uint64_t sub_1000FE010@<X0>(uint64_t a1@<X8>)
{
  return sub_1000BA0EC( &qword_1002919A8,  (uint64_t)static Goldilocks_ExitStatusFeedbackRequest.ClientStatus._protobuf_nameMap,  (uint64_t)sub_1000FDDA8,  a1);
}

void *Goldilocks_ExitStatusFeedbackResponse.protoMessageName.unsafeMutableAddressor()
{
  return &static Goldilocks_ExitStatusFeedbackResponse.protoMessageName;
}

unint64_t static Goldilocks_ExitStatusFeedbackResponse.protoMessageName.getter()
{
  return 0xD000000000000025LL;
}

uint64_t sub_1000FE054(uint64_t a1)
{
  return sub_1000D106C(a1, static Goldilocks_ExitStatusFeedbackResponse._protobuf_nameMap);
}

uint64_t Goldilocks_ExitStatusFeedbackResponse._protobuf_nameMap.unsafeMutableAddressor()
{
  return sub_1000B9E20( &qword_1002919B0,  (uint64_t)static Goldilocks_ExitStatusFeedbackResponse._protobuf_nameMap,  (uint64_t)sub_1000FE054);
}

uint64_t static Goldilocks_ExitStatusFeedbackResponse._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000B9E7C( &qword_1002919B0,  (uint64_t)static Goldilocks_ExitStatusFeedbackResponse._protobuf_nameMap,  (uint64_t)sub_1000FE054,  a1);
}

Swift::Int Goldilocks_ExitStatusFeedbackResponse.hashValue.getter()
{
  return sub_1000BC318( type metadata accessor for Goldilocks_ExitStatusFeedbackResponse,  &qword_100293DC0,  (uint64_t)&protocol conformance descriptor for Goldilocks_ExitStatusFeedbackResponse);
}

uint64_t sub_1000FE0B4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000BD35C( &qword_100294D48,  type metadata accessor for Goldilocks_ExitStatusFeedbackResponse,  (uint64_t)&protocol conformance descriptor for Goldilocks_ExitStatusFeedbackResponse);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000FE104@<X0>(uint64_t a1@<X8>)
{
  return sub_1000BA0EC( &qword_1002919B0,  (uint64_t)static Goldilocks_ExitStatusFeedbackResponse._protobuf_nameMap,  (uint64_t)sub_1000FE054,  a1);
}

uint64_t sub_1000FE120(uint64_t a1)
{
  uint64_t v2 = sub_1000BD35C( &qword_100294058,  type metadata accessor for Goldilocks_ExitStatusFeedbackResponse,  (uint64_t)&protocol conformance descriptor for Goldilocks_ExitStatusFeedbackResponse);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000FE160(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000BD35C( &qword_100294058,  type metadata accessor for Goldilocks_ExitStatusFeedbackResponse,  (uint64_t)&protocol conformance descriptor for Goldilocks_ExitStatusFeedbackResponse);
  return Message.hash(into:)(a1, a2, v4);
}

uint64_t sub_1000FE1B0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Goldilocks_ErrorInfo.ResultError(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v57 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = sub_1000BED3C(&qword_100293C98);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v57 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = sub_1000BED3C(&qword_100294E00);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v57 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = type metadata accessor for Goldilocks_ExitMoveBatchFeedbackItem(0LL);
  uint64_t v15 = __chkstk_darwin(v14);
  uint64_t v17 = (char **)((char *)&v57 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v18 = __chkstk_darwin(v15);
  uint64_t v21 = (char **)((char *)&v57 - v20);
  uint64_t v22 = *(void *)(a1 + 16);
  if (v22 != *(void *)(a2 + 16))
  {
LABEL_30:
    char v53 = 0;
    return v53 & 1;
  }

  v63 = v13;
  uint64_t v64 = v11;
  uint64_t v65 = v4;
  uint64_t v66 = v18;
  v58 = v10;
  if (v22 && a1 != a2)
  {
    v57 = v7;
    uint64_t v62 = v5;
    unint64_t v23 = (*(unsigned __int8 *)(v19 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
    uint64_t v59 = *(void *)(v19 + 72);
    uint64_t v24 = v22 - 1;
    uint64_t v25 = v66;
    uint64_t v60 = a1;
    uint64_t v61 = a2;
    while (1)
    {
      sub_1000CEC58(a1 + v23, (uint64_t)v21, type metadata accessor for Goldilocks_ExitMoveBatchFeedbackItem);
      sub_1000CEC58(a2 + v23, (uint64_t)v17, type metadata accessor for Goldilocks_ExitMoveBatchFeedbackItem);
      uint64_t v26 = v21[1];
      uint64_t v27 = v17[1];
      BOOL v28 = *v21 == *v17 && v26 == v27;
      if (!v28 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v21, v26, *v17, v27, 0LL) & 1) == 0) {
        break;
      }
      uint64_t v29 = v21[2];
      uint64_t v30 = v21[3];
      uint64_t v31 = v17[2];
      uint64_t v32 = v17[3];
      BOOL v33 = v29 == v31 && v30 == v32;
      if (!v33 && (_stringCompareWithSmolCheck(_:_:expecting:)(v29, v30, v31, v32, 0LL) & 1) == 0) {
        break;
      }
      uint64_t v34 = *(int *)(v25 + 28);
      char v35 = (char *)v17 + v34;
      uint64_t v36 = (uint64_t)v63;
      uint64_t v37 = (uint64_t)&v63[*(int *)(v64 + 48)];
      sub_1000CE7B4((uint64_t)v21 + v34, (uint64_t)v63, &qword_100293C98);
      uint64_t v38 = (uint64_t)v35;
      uint64_t v39 = v36;
      sub_1000CE7B4(v38, v37, &qword_100293C98);
      int v40 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v62 + 48);
      uint64_t v41 = v36;
      uint64_t v42 = v65;
      if (v40(v41, 1LL, v65) == 1)
      {
        if (v40(v37, 1LL, v42) != 1) {
          goto LABEL_28;
        }
        sub_1000CEDAC(v39, &qword_100293C98);
        uint64_t v25 = v66;
      }

      else
      {
        uint64_t v43 = v39;
        uint64_t v44 = v39;
        uint64_t v45 = (uint64_t)v58;
        sub_1000CE7B4(v43, (uint64_t)v58, &qword_100293C98);
        if (v40(v37, 1LL, v42) == 1)
        {
          sub_1000CECE0(v45, type metadata accessor for Goldilocks_ErrorInfo.ResultError);
          uint64_t v39 = v44;
LABEL_28:
          sub_1000CEDAC(v39, &qword_100294E00);
          break;
        }

        uint64_t v46 = (uint64_t)v57;
        sub_1000CEC9C(v37, (uint64_t)v57, type metadata accessor for Goldilocks_ErrorInfo.ResultError);
        char v47 = _s22CloudKitImplementation20Goldilocks_ErrorInfoV06ResultE0V2eeoiySbAE_AEtFZ_0(v45, v46);
        sub_1000CECE0(v46, type metadata accessor for Goldilocks_ErrorInfo.ResultError);
        sub_1000CECE0(v45, type metadata accessor for Goldilocks_ErrorInfo.ResultError);
        sub_1000CEDAC(v44, &qword_100293C98);
        uint64_t v25 = v66;
        if ((v47 & 1) == 0) {
          break;
        }
      }

      uint64_t v48 = *(int *)(v25 + 24);
      uint64_t v49 = (char *)v21 + v48;
      uint64_t v50 = (char *)v17 + v48;
      uint64_t v51 = type metadata accessor for UnknownStorage(0LL);
      uint64_t v52 = sub_1000BD35C( &qword_100291D78,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
      char v53 = dispatch thunk of static Equatable.== infix(_:_:)(v49, v50, v51, v52);
      sub_1000CECE0((uint64_t)v17, type metadata accessor for Goldilocks_ExitMoveBatchFeedbackItem);
      sub_1000CECE0((uint64_t)v21, type metadata accessor for Goldilocks_ExitMoveBatchFeedbackItem);
      BOOL v55 = v24-- != 0;
      if ((v53 & 1) != 0)
      {
        a1 = v60;
        v23 += v59;
        a2 = v61;
        if (v55) {
          continue;
        }
      }

      return v53 & 1;
    }

    sub_1000CECE0((uint64_t)v17, type metadata accessor for Goldilocks_ExitMoveBatchFeedbackItem);
    sub_1000CECE0((uint64_t)v21, type metadata accessor for Goldilocks_ExitMoveBatchFeedbackItem);
    goto LABEL_30;
  }

  char v53 = 1;
  return v53 & 1;
}

uint64_t sub_1000FE5AC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Goldilocks_ZoneID(0LL);
  uint64_t v118 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  v119 = (uint64_t *)((char *)&v96 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v6 = sub_1000BED3C(&qword_100295030);
  __chkstk_darwin(v6);
  v122 = (uint64_t *)((char *)&v96 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v117 = sub_1000BED3C(&qword_100294DF0);
  __chkstk_darwin(v117);
  uint64_t v9 = (char *)&v96 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t found = type metadata accessor for Goldilocks_FoundDuplicate(0LL);
  uint64_t v10 = *(void *)(found - 8);
  uint64_t v11 = __chkstk_darwin(found);
  uint64_t v13 = (char *)&v96 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v96 - v14;
  uint64_t v16 = type metadata accessor for Goldilocks_ErrorInfo.ResultError(0LL);
  uint64_t v111 = *(void *)(v16 - 8);
  uint64_t v112 = v16;
  __chkstk_darwin(v16);
  uint64_t v107 = (uint64_t)&v96 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = sub_1000BED3C(&qword_100293C98);
  __chkstk_darwin(v18);
  uint64_t v108 = (uint64_t)&v96 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v20 = sub_1000BED3C(&qword_100294E00);
  __chkstk_darwin(v20);
  uint64_t v110 = (uint64_t)&v96 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v22 = type metadata accessor for Goldilocks_DuplicateState(0LL);
  uint64_t v23 = __chkstk_darwin(v22);
  uint64_t v25 = (uint64_t *)((char *)&v96 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v26 = __chkstk_darwin(v23);
  v120 = (uint64_t *)((char *)&v96 - v28);
  uint64_t v29 = *(void *)(a1 + 16);
  if (v29 != *(void *)(a2 + 16))
  {
LABEL_58:
    char v94 = 0;
    return v94 & 1;
  }

  if (!v29 || a1 == a2)
  {
    char v94 = 1;
    return v94 & 1;
  }

  uint64_t v105 = v26;
  uint64_t v97 = v10;
  uint64_t v30 = 0LL;
  unint64_t v31 = (*(unsigned __int8 *)(v27 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v27 + 80);
  uint64_t v32 = a1 + v31;
  uint64_t v33 = a2 + v31;
  uint64_t v34 = *(void *)(v27 + 72);
  uint64_t v109 = v4;
  uint64_t v103 = v20;
  v113 = v25;
  uint64_t v101 = v29;
  uint64_t v100 = v32;
  uint64_t v99 = v33;
  uint64_t v98 = v34;
  while (1)
  {
    uint64_t v104 = v30;
    uint64_t v35 = v34 * v30;
    uint64_t v36 = v120;
    sub_1000CEC58(v32 + v34 * v30, (uint64_t)v120, type metadata accessor for Goldilocks_DuplicateState);
    sub_1000CEC58(v33 + v35, (uint64_t)v25, type metadata accessor for Goldilocks_DuplicateState);
    uint64_t v37 = v36[1];
    uint64_t v38 = v25[1];
    BOOL v39 = *v36 == *v25 && v37 == v38;
    if (!v39 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v36, v37, *v25, v38, 0LL) & 1) == 0) {
      goto LABEL_57;
    }
    uint64_t v40 = *(int *)(v105 + 28);
    uint64_t v41 = (uint64_t)v113 + v40;
    uint64_t v42 = v110;
    uint64_t v43 = v110 + *(int *)(v103 + 48);
    sub_1000CE7B4((uint64_t)v120 + v40, v110, &qword_100293C98);
    sub_1000CE7B4(v41, v43, &qword_100293C98);
    uint64_t v44 = v112;
    uint64_t v45 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v111 + 48);
    if (v45(v42, 1LL, v112) == 1)
    {
      if (v45(v43, 1LL, v44) != 1) {
        goto LABEL_61;
      }
      sub_1000CEDAC(v42, &qword_100293C98);
    }

    else
    {
      uint64_t v46 = v42;
      uint64_t v47 = v42;
      uint64_t v48 = v108;
      sub_1000CE7B4(v46, v108, &qword_100293C98);
      if (v45(v43, 1LL, v44) == 1)
      {
        sub_1000CECE0(v48, type metadata accessor for Goldilocks_ErrorInfo.ResultError);
        uint64_t v42 = v47;
LABEL_61:
        sub_1000CEDAC(v42, &qword_100294E00);
LABEL_57:
        sub_1000CECE0((uint64_t)v113, type metadata accessor for Goldilocks_DuplicateState);
        sub_1000CECE0((uint64_t)v120, type metadata accessor for Goldilocks_DuplicateState);
        goto LABEL_58;
      }

      uint64_t v49 = v107;
      sub_1000CEC9C(v43, v107, type metadata accessor for Goldilocks_ErrorInfo.ResultError);
      char v50 = _s22CloudKitImplementation20Goldilocks_ErrorInfoV06ResultE0V2eeoiySbAE_AEtFZ_0(v48, v49);
      sub_1000CECE0(v49, type metadata accessor for Goldilocks_ErrorInfo.ResultError);
      sub_1000CECE0(v48, type metadata accessor for Goldilocks_ErrorInfo.ResultError);
      sub_1000CEDAC(v47, &qword_100293C98);
      if ((v50 & 1) == 0) {
        goto LABEL_57;
      }
    }

    uint64_t v51 = v113[2];
    uint64_t v114 = v120[2];
    uint64_t v115 = *(void *)(v114 + 16);
    uint64_t v116 = v51;
    if (v115 != *(void *)(v51 + 16)) {
      goto LABEL_57;
    }
    uint64_t v52 = v116;
    if (v115)
    {
      if (v114 != v116) {
        break;
      }
    }

uint64_t sub_1000FEEBC(void *a1, void *a2)
{
  uint64_t v2 = a1[2];
  if (v2 != a2[2]) {
    return 0LL;
  }
  if (!v2 || a1 == a2) {
    return 1LL;
  }
  uint64_t v5 = a1[4];
  uint64_t v6 = a1[5];
  uint64_t v7 = a2[4];
  uint64_t v8 = a2[5];
  BOOL v9 = v5 == v7 && v6 == v8;
  if (v9 || (char v10 = _stringCompareWithSmolCheck(_:_:expecting:)(v5, v6, v7, v8, 0LL), result = 0LL, (v10 & 1) != 0))
  {
    uint64_t v12 = v2 - 1;
    if (!v12) {
      return 1LL;
    }
    uint64_t v13 = a2 + 7;
    for (i = a1 + 7; ; i += 2)
    {
      uint64_t v15 = *(i - 1);
      uint64_t v16 = *i;
      uint64_t v17 = *(v13 - 1);
      uint64_t v18 = *v13;
      BOOL v19 = v15 == v17 && v16 == v18;
      if (!v19 && (_stringCompareWithSmolCheck(_:_:expecting:)(v15, v16, v17, v18, 0LL) & 1) == 0) {
        break;
      }
      v13 += 2;
      if (!--v12) {
        return 1LL;
      }
    }

    return 0LL;
  }

  return result;
}

uint64_t sub_1000FEF80(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Utility_ErrorInfo.ResultError(0LL);
  uint64_t v48 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v46 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = sub_1000BED3C(&qword_100292070);
  __chkstk_darwin(v7);
  BOOL v9 = (char *)&v46 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = sub_1000BED3C(&qword_1002926E8);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v46 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for Utility_DeleteZoneResponse(0LL);
  uint64_t v14 = __chkstk_darwin(v13);
  uint64_t v16 = (char **)((char *)&v46 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v17 = __chkstk_darwin(v14);
  uint64_t v20 = (char *)&v46 - v19;
  uint64_t v21 = *(void *)(a1 + 16);
  uint64_t v49 = a2;
  if (v21 != *(void *)(a2 + 16)) {
    goto LABEL_20;
  }
  if (!v21 || (uint64_t v22 = a1, a1 == v49))
  {
    char v44 = 1;
    return v44 & 1;
  }

  uint64_t v52 = (char *)&v46 - v19;
  uint64_t v53 = v17;
  unint64_t v23 = (*(unsigned __int8 *)(v18 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80);
  uint64_t v24 = *(void *)(v18 + 72);
  uint64_t v46 = v6;
  uint64_t v47 = v24;
  uint64_t v25 = v21 - 1;
  while (1)
  {
    uint64_t v51 = v25;
    unint64_t v26 = v23;
    sub_1000CEC58(v22 + v23, (uint64_t)v20, type metadata accessor for Utility_DeleteZoneResponse);
    unint64_t v50 = v26;
    sub_1000CEC58(v49 + v26, (uint64_t)v16, type metadata accessor for Utility_DeleteZoneResponse);
    uint64_t v27 = *(int *)(v53 + 24);
    uint64_t v28 = (uint64_t)&v20[v27];
    uint64_t v29 = (uint64_t)v16 + v27;
    uint64_t v30 = (uint64_t)&v12[*(int *)(v10 + 48)];
    sub_1000CE7B4(v28, (uint64_t)v12, &qword_100292070);
    sub_1000CE7B4(v29, v30, &qword_100292070);
    unint64_t v31 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v48 + 48);
    if (v31(v12, 1LL, v4) != 1) {
      break;
    }
    unsigned int v32 = v31((char *)v30, 1LL, v4);
    uint64_t v33 = v52;
    if (v32 != 1) {
      goto LABEL_18;
    }
    sub_1000CEDAC((uint64_t)v12, &qword_100292070);
LABEL_10:
    uint64_t v36 = v33[1];
    uint64_t v37 = v16[1];
    if ((*v33 != *v16 || v36 != v37)
      && (_stringCompareWithSmolCheck(_:_:expecting:)(*v33, v36, *v16, v37, 0LL) & 1) == 0)
    {
      goto LABEL_19;
    }

    uint64_t v38 = *(int *)(v53 + 20);
    BOOL v39 = (char *)v33 + v38;
    uint64_t v40 = (char *)v16 + v38;
    uint64_t v41 = type metadata accessor for UnknownStorage(0LL);
    uint64_t v42 = sub_1000BD35C( &qword_100291D78,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
    uint64_t v43 = v40;
    uint64_t v20 = v52;
    char v44 = dispatch thunk of static Equatable.== infix(_:_:)(v39, v43, v41, v42);
    sub_1000CECE0((uint64_t)v16, type metadata accessor for Utility_DeleteZoneResponse);
    sub_1000CECE0((uint64_t)v20, type metadata accessor for Utility_DeleteZoneResponse);
    uint64_t v25 = v51 - 1;
    if ((v44 & 1) != 0)
    {
      unint64_t v23 = v50 + v47;
      if (v51) {
        continue;
      }
    }

    return v44 & 1;
  }

  sub_1000CE7B4((uint64_t)v12, (uint64_t)v9, &qword_100292070);
  if (v31((char *)v30, 1LL, v4) != 1)
  {
    uint64_t v34 = (uint64_t)v46;
    sub_1000CEC9C(v30, (uint64_t)v46, type metadata accessor for Utility_ErrorInfo.ResultError);
    char v35 = static Utility_ErrorInfo.ResultError.== infix(_:_:)(v9, v34);
    sub_1000CECE0(v34, type metadata accessor for Utility_ErrorInfo.ResultError);
    sub_1000CECE0((uint64_t)v9, type metadata accessor for Utility_ErrorInfo.ResultError);
    sub_1000CEDAC((uint64_t)v12, &qword_100292070);
    uint64_t v33 = v52;
    if ((v35 & 1) == 0) {
      goto LABEL_19;
    }
    goto LABEL_10;
  }

  sub_1000CECE0((uint64_t)v9, type metadata accessor for Utility_ErrorInfo.ResultError);
  uint64_t v33 = v52;
LABEL_18:
  sub_1000CEDAC((uint64_t)v12, &qword_1002926E8);
LABEL_19:
  sub_1000CECE0((uint64_t)v16, type metadata accessor for Utility_DeleteZoneResponse);
  sub_1000CECE0((uint64_t)v33, type metadata accessor for Utility_DeleteZoneResponse);
LABEL_20:
  char v44 = 0;
  return v44 & 1;
}

uint64_t sub_1000FF35C(uint64_t a1, uint64_t a2)
{
  return sub_1000FF370( a1,  a2,  type metadata accessor for ResponseItem,  (uint64_t (*)(char *, char *))static ResponseItem.== infix(_:_:));
}

uint64_t sub_1000FF370( uint64_t a1, uint64_t a2, uint64_t (*a3)(void), uint64_t (*a4)(char *, char *))
{
  uint64_t v8 = a3(0LL);
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v9);
  uint64_t v14 = (char *)&v23 - v13;
  uint64_t v15 = *(void *)(a1 + 16);
  if (v15 == *(void *)(a2 + 16))
  {
    if (!v15 || a1 == a2)
    {
      char v19 = 1;
    }

    else
    {
      unint64_t v16 = (*(unsigned __int8 *)(v12 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
      uint64_t v17 = *(void *)(v12 + 72);
      uint64_t v18 = v15 - 1;
      do
      {
        sub_1000CEC58(a1 + v16, (uint64_t)v14, a3);
        sub_1000CEC58(a2 + v16, (uint64_t)v11, a3);
        char v19 = a4(v14, v11);
        sub_1000CECE0((uint64_t)v11, a3);
        sub_1000CECE0((uint64_t)v14, a3);
        BOOL v21 = v18-- != 0;
        if ((v19 & 1) == 0) {
          break;
        }
        v16 += v17;
      }

      while (v21);
    }
  }

  else
  {
    char v19 = 0;
  }

  return v19 & 1;
}

uint64_t sub_1000FF4AC(uint64_t a1, uint64_t a2)
{
  uint64_t v27 = type metadata accessor for UploadResource(0LL);
  uint64_t v4 = __chkstk_darwin(v27);
  uint64_t v6 = (char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v4);
  uint64_t v9 = (uint64_t *)((char *)&v26 - v8);
  uint64_t v10 = *(void *)(a1 + 16);
  if (v10 != *(void *)(a2 + 16)) {
    return 0LL;
  }
  if (v10 && a1 != a2)
  {
    unint64_t v11 = (*(unsigned __int8 *)(v7 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
    uint64_t v26 = *(void *)(v7 + 72);
    while (1)
    {
      sub_1000CEC58(a1 + v11, (uint64_t)v9, type metadata accessor for UploadResource);
      sub_1000CEC58(a2 + v11, (uint64_t)v6, type metadata accessor for UploadResource);
      uint64_t v12 = *v9;
      uint64_t v13 = *(void *)v6;
      if (v6[8] == 1)
      {
        if (v13)
        {
          if (v13 == 1)
          {
            if (v12 != 1) {
              break;
            }
          }

          else if (v12 != 2)
          {
            break;
          }
        }

        else if (v12)
        {
          break;
        }
      }

      else if (v12 != v13)
      {
        break;
      }

      uint64_t v14 = v9[2];
      uint64_t v15 = v9[3];
      uint64_t v16 = *((void *)v6 + 2);
      uint64_t v17 = *((void *)v6 + 3);
      BOOL v18 = v14 == v16 && v15 == v17;
      if (!v18 && (_stringCompareWithSmolCheck(_:_:expecting:)(v14, v15, v16, v17, 0LL) & 1) == 0) {
        break;
      }
      uint64_t v19 = *((void *)v6 + 4);
      if (v6[40] == 1) {
        __asm { BR              X10 }
      }

      if (v9[4] != v19) {
        break;
      }
      if ((sub_1000FF828(v9[6], *((void *)v6 + 6)) & 1) == 0) {
        break;
      }
      uint64_t v20 = *(int *)(v27 + 32);
      BOOL v21 = (char *)v9 + v20;
      uint64_t v22 = &v6[v20];
      uint64_t v23 = type metadata accessor for UnknownStorage(0LL);
      uint64_t v24 = sub_1000BD35C( &qword_100291D78,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
      if ((dispatch thunk of static Equatable.== infix(_:_:)(v21, v22, v23, v24) & 1) == 0) {
        break;
      }
      sub_1000CECE0((uint64_t)v6, type metadata accessor for UploadResource);
      sub_1000CECE0((uint64_t)v9, type metadata accessor for UploadResource);
      v11 += v26;
      if (!--v10) {
        return 1LL;
      }
    }

    sub_1000CECE0((uint64_t)v6, type metadata accessor for UploadResource);
    sub_1000CECE0((uint64_t)v9, type metadata accessor for UploadResource);
    return 0LL;
  }

  return 1LL;
}

uint64_t sub_1000FF828(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != *(void *)(a2 + 16)) {
    return 0LL;
  }
  if (!v2 || a1 == a2) {
    return 1LL;
  }
  uint64_t v3 = (uint64_t *)(a1 + 32);
  for (i = (_BYTE *)(a2 + 40); ; i += 16)
  {
    uint64_t v6 = *v3;
    v3 += 2;
    uint64_t v5 = v6;
    uint64_t v7 = *((void *)i - 1);
    if (*i == 1) {
      break;
    }
    if (v5 != v7) {
      return 0LL;
    }
    if (!--v2) {
      return 1LL;
    }
  }

  return ((uint64_t (*)(void))((char *)&loc_1000FF858 + 4 * byte_100216DA3[v7]))();
}

uint64_t sub_1000FF9D4(uint64_t a1, uint64_t a2)
{
  uint64_t v20 = type metadata accessor for RequestItem(0LL);
  uint64_t v4 = __chkstk_darwin(v20);
  uint64_t v6 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v4);
  uint64_t v9 = (char *)&v19 - v8;
  uint64_t v10 = *(void *)(a1 + 16);
  if (v10 == *(void *)(a2 + 16))
  {
    if (!v10 || a1 == a2) {
      return 1LL;
    }
    unint64_t v11 = (*(unsigned __int8 *)(v7 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
    uint64_t v19 = *(void *)(v7 + 72);
    while (1)
    {
      sub_1000CEC58(a1 + v11, (uint64_t)v9, type metadata accessor for RequestItem);
      sub_1000CEC58(a2 + v11, (uint64_t)v6, type metadata accessor for RequestItem);
      uint64_t v12 = *(int *)(v20 + 20);
      uint64_t v13 = *(void **)&v9[v12];
      uint64_t v14 = *(void *)&v6[v12];
      if (v13 != (void *)v14)
      {
        swift_retain(*(void *)&v9[v12]);
        swift_retain(v14);
        char v15 = sub_1000E0AB4(v13, v14);
        swift_release(v14);
        swift_release(v13);
        if ((v15 & 1) == 0) {
          break;
        }
      }

      uint64_t v16 = type metadata accessor for UnknownStorage(0LL);
      uint64_t v17 = sub_1000BD35C( &qword_100291D78,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
      if ((dispatch thunk of static Equatable.== infix(_:_:)(v9, v6, v16, v17) & 1) == 0) {
        break;
      }
      sub_1000CECE0((uint64_t)v6, type metadata accessor for RequestItem);
      sub_1000CECE0((uint64_t)v9, type metadata accessor for RequestItem);
      v11 += v19;
      if (!--v10) {
        return 1LL;
      }
    }

    sub_1000CECE0((uint64_t)v6, type metadata accessor for RequestItem);
    sub_1000CECE0((uint64_t)v9, type metadata accessor for RequestItem);
  }

  return 0LL;
}

uint64_t sub_1000FFBA8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UntranscodableItem(0LL);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v47 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v5);
  uint64_t v10 = (char *)&v47 - v9;
  uint64_t v11 = *(void *)(a1 + 16);
  if (v11 == *(void *)(a2 + 16))
  {
    if (!v11 || a1 == a2) {
      return 1LL;
    }
    unint64_t v12 = (*(unsigned __int8 *)(v8 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
    uint64_t v47 = *(void *)(v8 + 72);
    uint64_t v13 = type metadata accessor for UntranscodableItem;
    while (1)
    {
      sub_1000CEC58(a1 + v12, (uint64_t)v10, v13);
      sub_1000CEC58(a2 + v12, (uint64_t)v7, v13);
      uint64_t v14 = *((void *)v10 + 1);
      uint64_t v15 = *((void *)v7 + 1);
      BOOL v16 = *(void *)v10 == *(void *)v7 && v14 == v15;
      if (!v16 && (_stringCompareWithSmolCheck(_:_:expecting:)(*(void *)v10, v14, *(void *)v7, v15, 0LL) & 1) == 0) {
        break;
      }
      uint64_t v17 = *((void *)v10 + 2);
      uint64_t v18 = *((void *)v10 + 3);
      uint64_t v19 = *((void *)v7 + 2);
      uint64_t v20 = *((void *)v7 + 3);
      BOOL v21 = v17 == v19 && v18 == v20;
      if (!v21 && (_stringCompareWithSmolCheck(_:_:expecting:)(v17, v18, v19, v20, 0LL) & 1) == 0) {
        break;
      }
      uint64_t v22 = *((void *)v10 + 4);
      uint64_t v23 = *((void *)v10 + 5);
      uint64_t v24 = *((void *)v7 + 4);
      uint64_t v25 = *((void *)v7 + 5);
      if ((v22 != v24 || v23 != v25) && (_stringCompareWithSmolCheck(_:_:expecting:)(v22, v23, v24, v25, 0LL) & 1) == 0) {
        break;
      }
      if (v10[48] != v7[48]) {
        break;
      }
      uint64_t v26 = *((void *)v10 + 7);
      uint64_t v27 = *((void *)v10 + 8);
      uint64_t v28 = *((void *)v7 + 7);
      uint64_t v29 = *((void *)v7 + 8);
      if ((v26 != v28 || v27 != v29) && (_stringCompareWithSmolCheck(_:_:expecting:)(v26, v27, v28, v29, 0LL) & 1) == 0) {
        break;
      }
      uint64_t v30 = *((void *)v10 + 9);
      uint64_t v31 = *((void *)v10 + 10);
      uint64_t v32 = *((void *)v7 + 9);
      uint64_t v33 = *((void *)v7 + 10);
      if ((v30 != v32 || v31 != v33) && (_stringCompareWithSmolCheck(_:_:expecting:)(v30, v31, v32, v33, 0LL) & 1) == 0) {
        break;
      }
      uint64_t v34 = *(int *)(v4 + 40);
      char v35 = &v10[v34];
      unint64_t v48 = v12;
      uint64_t v36 = v11;
      uint64_t v37 = &v7[v34];
      uint64_t v38 = a2;
      uint64_t v39 = v4;
      uint64_t v40 = v13;
      uint64_t v41 = type metadata accessor for UnknownStorage(0LL);
      uint64_t v42 = sub_1000BD35C( &qword_100291D78,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
      uint64_t v43 = v37;
      uint64_t v44 = v36;
      unint64_t v45 = v48;
      if ((dispatch thunk of static Equatable.== infix(_:_:)(v35, v43, v41, v42) & 1) == 0) {
        break;
      }
      uint64_t v13 = v40;
      uint64_t v4 = v39;
      a2 = v38;
      sub_1000CECE0((uint64_t)v7, v13);
      sub_1000CECE0((uint64_t)v10, v13);
      unint64_t v12 = v45 + v47;
      uint64_t v11 = v44 - 1;
      if (!v11) {
        return 1LL;
      }
    }

    sub_1000CECE0((uint64_t)v7, type metadata accessor for UntranscodableItem);
    sub_1000CECE0((uint64_t)v10, type metadata accessor for UntranscodableItem);
  }

  return 0LL;
}

uint64_t sub_1000FFE20(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Goldilocks_ErrorInfo.DatabaseFailure(0LL);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v5);
  uint64_t v10 = (char *)&v19 - v9;
  uint64_t v11 = *(void *)(a1 + 16);
  if (v11 == *(void *)(a2 + 16))
  {
    if (!v11 || a1 == a2)
    {
      char v15 = 1;
    }

    else
    {
      unint64_t v12 = (*(unsigned __int8 *)(v8 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
      uint64_t v13 = *(void *)(v8 + 72);
      uint64_t v14 = v11 - 1;
      do
      {
        sub_1000CEC58(a1 + v12, (uint64_t)v10, type metadata accessor for Goldilocks_ErrorInfo.DatabaseFailure);
        sub_1000CEC58(a2 + v12, (uint64_t)v7, type metadata accessor for Goldilocks_ErrorInfo.DatabaseFailure);
        char v15 = _s22CloudKitImplementation20Goldilocks_ErrorInfoV15DatabaseFailureV2eeoiySbAE_AEtFZ_0( (uint64_t)v10,  (uint64_t)v7);
        sub_1000CECE0((uint64_t)v7, type metadata accessor for Goldilocks_ErrorInfo.DatabaseFailure);
        sub_1000CECE0((uint64_t)v10, type metadata accessor for Goldilocks_ErrorInfo.DatabaseFailure);
        BOOL v17 = v14-- != 0;
        if ((v15 & 1) == 0) {
          break;
        }
        v12 += v13;
      }

      while (v17);
    }
  }

  else
  {
    char v15 = 0;
  }

  return v15 & 1;
}

uint64_t sub_1000FFF5C(uint64_t a1, uint64_t a2)
{
  uint64_t v27 = type metadata accessor for Rpcproto_ErrorInfo.LoggingDetail(0LL);
  uint64_t v4 = ((uint64_t (*)(void))__chkstk_darwin)();
  uint64_t v6 = (uint64_t *)((char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  __chkstk_darwin(v4);
  uint64_t v9 = (uint64_t *)((char *)&v26 - v8);
  uint64_t v10 = *(void *)(a1 + 16);
  if (v10 == *(void *)(a2 + 16))
  {
    if (!v10 || a1 == a2) {
      return 1LL;
    }
    unint64_t v11 = (*(unsigned __int8 *)(v7 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
    uint64_t v26 = *(void *)(v7 + 72);
    while (1)
    {
      sub_1000CEC58(a1 + v11, (uint64_t)v9, type metadata accessor for Rpcproto_ErrorInfo.LoggingDetail);
      sub_1000CEC58(a2 + v11, (uint64_t)v6, type metadata accessor for Rpcproto_ErrorInfo.LoggingDetail);
      uint64_t v12 = v9[1];
      uint64_t v13 = v6[1];
      BOOL v14 = *v9 == *v6 && v12 == v13;
      if (!v14 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v9, v12, *v6, v13, 0LL) & 1) == 0) {
        break;
      }
      uint64_t v15 = v9[2];
      uint64_t v16 = v9[3];
      uint64_t v17 = v6[2];
      uint64_t v18 = v6[3];
      BOOL v19 = v15 == v17 && v16 == v18;
      if (!v19 && (_stringCompareWithSmolCheck(_:_:expecting:)(v15, v16, v17, v18, 0LL) & 1) == 0) {
        break;
      }
      uint64_t v20 = *(int *)(v27 + 24);
      BOOL v21 = (char *)v9 + v20;
      uint64_t v22 = (char *)v6 + v20;
      uint64_t v23 = type metadata accessor for UnknownStorage(0LL);
      uint64_t v24 = sub_1000BD35C( &qword_100291D78,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
      if ((dispatch thunk of static Equatable.== infix(_:_:)(v21, v22, v23, v24) & 1) == 0) {
        break;
      }
      sub_1000CECE0((uint64_t)v6, type metadata accessor for Rpcproto_ErrorInfo.LoggingDetail);
      sub_1000CECE0((uint64_t)v9, type metadata accessor for Rpcproto_ErrorInfo.LoggingDetail);
      v11 += v26;
      if (!--v10) {
        return 1LL;
      }
    }

    sub_1000CECE0((uint64_t)v6, type metadata accessor for Rpcproto_ErrorInfo.LoggingDetail);
    sub_1000CECE0((uint64_t)v9, type metadata accessor for Rpcproto_ErrorInfo.LoggingDetail);
  }

  return 0LL;
}

uint64_t sub_100100134(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Ckcode_RecordTransport(0LL);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v5);
  uint64_t v10 = (char *)&v23 - v9;
  uint64_t v11 = *(void *)(a1 + 16);
  if (v11 == *(void *)(a2 + 16))
  {
    if (!v11 || a1 == a2)
    {
      char v18 = 1;
    }

    else
    {
      unint64_t v12 = (*(unsigned __int8 *)(v8 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
      uint64_t v23 = *(void *)(v8 + 72);
      uint64_t v24 = v8;
      uint64_t v13 = *(void (**)(char *, unint64_t, uint64_t))(v8 + 16);
      uint64_t v14 = v11 - 1;
      do
      {
        uint64_t v15 = a1;
        v13(v10, a1 + v12, v4);
        uint64_t v16 = a2;
        v13(v7, a2 + v12, v4);
        uint64_t v17 = sub_1000BD35C( &qword_1002938E8,  (uint64_t (*)(uint64_t))&type metadata accessor for Ckcode_RecordTransport,  (uint64_t)&protocol conformance descriptor for Ckcode_RecordTransport);
        char v18 = dispatch thunk of static Equatable.== infix(_:_:)(v10, v7, v4, v17);
        BOOL v19 = *(void (**)(char *, uint64_t))(v24 + 8);
        v19(v7, v4);
        v19(v10, v4);
        BOOL v21 = v14-- != 0;
        if ((v18 & 1) == 0) {
          break;
        }
        v12 += v23;
        a2 = v16;
        a1 = v15;
      }

      while (v21);
    }
  }

  else
  {
    char v18 = 0;
  }

  return v18 & 1;
}

uint64_t sub_1001002B8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != *(void *)(a2 + 16)) {
    return 0LL;
  }
  if (v2 && a1 != a2)
  {
    uint64_t v3 = (uint64_t *)(a1 + 32);
    uint64_t v4 = (_BYTE *)(a2 + 40);
    do
    {
      uint64_t v6 = *v3;
      v3 += 2;
      uint64_t v5 = v6;
      uint64_t v7 = *((void *)v4 - 1);
      if (*v4 == 1)
      {
        if (v7)
        {
          if (v7 == 1)
          {
            if (v5 != 1) {
              return 0LL;
            }
          }

          else if (v5 != 2)
          {
            return 0LL;
          }
        }

        else if (v5)
        {
          return 0LL;
        }
      }

      else if (v5 != v7)
      {
        return 0LL;
      }

      v4 += 16;
      --v2;
    }

    while (v2);
  }

  return 1LL;
}

uint64_t _s22CloudKitImplementation45Goldilocks_ExitMoveBatchErrorFeedbackResponseV2eeoiySbAC_ACtFZ_0( uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v44 = *(void *)(v4 - 8);
  uint64_t v45 = v4;
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v43 = (char *)&v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v5);
  uint64_t v42 = (char *)&v39 - v7;
  uint64_t v8 = type metadata accessor for Goldilocks_ErrorInfo.ResultError(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v39 = (uint64_t)&v39 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = sub_1000BED3C(&qword_100294E00);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v39 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = sub_1000BED3C(&qword_100293C98);
  uint64_t v15 = __chkstk_darwin(v14);
  uint64_t v46 = (uint64_t)&v39 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = __chkstk_darwin(v15);
  BOOL v19 = (char *)&v39 - v18;
  __chkstk_darwin(v17);
  BOOL v21 = (char *)&v39 - v20;
  uint64_t v22 = type metadata accessor for Goldilocks_ExitMoveBatchErrorFeedbackResponse(0LL);
  uint64_t v23 = *(int *)(v22 + 20);
  uint64_t v40 = a1;
  sub_1000CE7B4(a1 + v23, (uint64_t)v21, &qword_100293C98);
  uint64_t v24 = *(int *)(v22 + 20);
  uint64_t v41 = a2;
  sub_1000CE7B4(a2 + v24, (uint64_t)v19, &qword_100293C98);
  uint64_t v25 = (uint64_t)&v13[*(int *)(v11 + 48)];
  sub_1000CE7B4((uint64_t)v21, (uint64_t)v13, &qword_100293C98);
  sub_1000CE7B4((uint64_t)v19, v25, &qword_100293C98);
  uint64_t v26 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
  if (v26((uint64_t)v13, 1LL, v8) != 1)
  {
    uint64_t v27 = v46;
    sub_1000CE7B4((uint64_t)v13, v46, &qword_100293C98);
    if (v26(v25, 1LL, v8) != 1)
    {
      uint64_t v28 = v39;
      sub_1000CEC9C(v25, v39, type metadata accessor for Goldilocks_ErrorInfo.ResultError);
      char v29 = _s22CloudKitImplementation20Goldilocks_ErrorInfoV06ResultE0V2eeoiySbAE_AEtFZ_0(v27, v28);
      sub_1000CECE0(v28, type metadata accessor for Goldilocks_ErrorInfo.ResultError);
      sub_1000CEDAC((uint64_t)v19, &qword_100293C98);
      sub_1000CEDAC((uint64_t)v21, &qword_100293C98);
      sub_1000CECE0(v27, type metadata accessor for Goldilocks_ErrorInfo.ResultError);
      sub_1000CEDAC((uint64_t)v13, &qword_100293C98);
      if ((v29 & 1) != 0) {
        goto LABEL_8;
      }
LABEL_9:
      char v36 = 0;
      return v36 & 1;
    }

    sub_1000CEDAC((uint64_t)v19, &qword_100293C98);
    sub_1000CEDAC((uint64_t)v21, &qword_100293C98);
    sub_1000CECE0(v27, type metadata accessor for Goldilocks_ErrorInfo.ResultError);
LABEL_6:
    sub_1000CEDAC((uint64_t)v13, &qword_100294E00);
    goto LABEL_9;
  }

  sub_1000CEDAC((uint64_t)v19, &qword_100293C98);
  sub_1000CEDAC((uint64_t)v21, &qword_100293C98);
  if (v26(v25, 1LL, v8) != 1) {
    goto LABEL_6;
  }
  sub_1000CEDAC((uint64_t)v13, &qword_100293C98);
LABEL_8:
  uint64_t v31 = v44;
  uint64_t v30 = v45;
  uint64_t v32 = *(void (**)(char *, uint64_t, uint64_t))(v44 + 16);
  uint64_t v33 = v42;
  v32(v42, v40, v45);
  uint64_t v34 = v43;
  v32(v43, v41, v30);
  uint64_t v35 = sub_1000BD35C( &qword_100291D78,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
  char v36 = dispatch thunk of static Equatable.== infix(_:_:)(v33, v34, v30, v35);
  uint64_t v37 = *(void (**)(char *, uint64_t))(v31 + 8);
  v37(v34, v30);
  v37(v33, v30);
  return v36 & 1;
}

uint64_t _s22CloudKitImplementation44Goldilocks_ExitMoveBatchErrorFeedbackRequestV2eeoiySbAC_ACtFZ_0( uint64_t *a1, uint64_t *a2)
{
  uint64_t v71 = a2;
  uint64_t v3 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v67 = *(void *)(v3 - 8);
  uint64_t v68 = v3;
  uint64_t v4 = __chkstk_darwin(v3);
  uint64_t v66 = (char *)&v64 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v4);
  uint64_t v65 = (char *)&v64 - v6;
  uint64_t v7 = type metadata accessor for Goldilocks_ZoneID(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v70 = (char *)&v64 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = sub_1000BED3C(&qword_100294DF0);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v64 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = sub_1000BED3C(&qword_100295030);
  uint64_t v14 = __chkstk_darwin(v13);
  uint64_t v16 = (uint64_t *)((char *)&v64 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v17 = __chkstk_darwin(v14);
  BOOL v19 = (char *)&v64 - v18;
  __chkstk_darwin(v17);
  BOOL v21 = (char *)&v64 - v20;
  uint64_t v22 = type metadata accessor for Goldilocks_ExitMoveBatchErrorFeedbackRequest(0LL);
  uint64_t v23 = *(int *)(v22 + 32);
  uint64_t v69 = a1;
  sub_1000CE7B4((uint64_t)a1 + v23, (uint64_t)v21, &qword_100295030);
  uint64_t v64 = v22;
  uint64_t v24 = *(int *)(v22 + 32);
  uint64_t v25 = v7;
  sub_1000CE7B4((uint64_t)v71 + v24, (uint64_t)v19, &qword_100295030);
  uint64_t v26 = (uint64_t)&v12[*(int *)(v10 + 48)];
  sub_1000CE7B4((uint64_t)v21, (uint64_t)v12, &qword_100295030);
  sub_1000CE7B4((uint64_t)v19, v26, &qword_100295030);
  uint64_t v27 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
  if (v27((uint64_t)v12, 1LL, v7) == 1)
  {
    sub_1000CEDAC((uint64_t)v19, &qword_100295030);
    sub_1000CEDAC((uint64_t)v21, &qword_100295030);
    if (v27(v26, 1LL, v7) == 1)
    {
      sub_1000CEDAC((uint64_t)v12, &qword_100295030);
      goto LABEL_17;
    }

    goto LABEL_6;
  }

  uint64_t v28 = v70;
  sub_1000CE7B4((uint64_t)v12, (uint64_t)v16, &qword_100295030);
  if (v27(v26, 1LL, v25) == 1)
  {
    sub_1000CEDAC((uint64_t)v19, &qword_100295030);
    sub_1000CEDAC((uint64_t)v21, &qword_100295030);
    sub_1000CECE0((uint64_t)v16, type metadata accessor for Goldilocks_ZoneID);
LABEL_6:
    char v29 = &qword_100294DF0;
    uint64_t v30 = (uint64_t)v12;
LABEL_7:
    sub_1000CEDAC(v30, v29);
LABEL_25:
    char v48 = 0;
    return v48 & 1;
  }

  sub_1000CEC9C(v26, (uint64_t)v28, type metadata accessor for Goldilocks_ZoneID);
  uint64_t v31 = v16[1];
  uint64_t v32 = v28[1];
  BOOL v33 = *v16 == *v28 && v31 == v32;
  if (!v33 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v16, v31, *v28, v32, 0LL) & 1) == 0
    || ((uint64_t v34 = v16[2], v35 = v16[3], v36 = v28[2], v37 = v28[3], v34 != v36) || v35 != v37)
    && (_stringCompareWithSmolCheck(_:_:expecting:)(v34, v35, v36, v37, 0LL) & 1) == 0)
  {
    sub_1000CECE0((uint64_t)v28, type metadata accessor for Goldilocks_ZoneID);
    sub_1000CEDAC((uint64_t)v19, &qword_100295030);
    sub_1000CEDAC((uint64_t)v21, &qword_100295030);
    sub_1000CECE0((uint64_t)v16, type metadata accessor for Goldilocks_ZoneID);
    uint64_t v30 = (uint64_t)v12;
    char v29 = &qword_100295030;
    goto LABEL_7;
  }

  uint64_t v38 = *(int *)(v25 + 24);
  uint64_t v39 = (char *)v16 + v38;
  uint64_t v40 = (char *)v28 + v38;
  uint64_t v41 = sub_1000BD35C( &qword_100291D78,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
  LOBYTE(v39) = dispatch thunk of static Equatable.== infix(_:_:)(v39, v40, v68, v41);
  sub_1000CECE0((uint64_t)v28, type metadata accessor for Goldilocks_ZoneID);
  sub_1000CEDAC((uint64_t)v19, &qword_100295030);
  sub_1000CEDAC((uint64_t)v21, &qword_100295030);
  sub_1000CECE0((uint64_t)v16, type metadata accessor for Goldilocks_ZoneID);
  sub_1000CEDAC((uint64_t)v12, &qword_100295030);
LABEL_17:
  uint64_t v42 = v69;
  uint64_t v43 = v71;
  if ((sub_1000FE1B0(*v69, *v71) & 1) == 0) {
    goto LABEL_25;
  }
  uint64_t v44 = v42[1];
  uint64_t v45 = v42[2];
  uint64_t v46 = v43[1];
  uint64_t v47 = v43[2];
  if (v44 == v46 && v45 == v47
    || (char v48 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)(v44, v45, v46, v47, 0LL) & 1) != 0))
  {
    uint64_t v49 = v42[3];
    uint64_t v50 = v42[4];
    uint64_t v51 = v43[3];
    uint64_t v52 = v43[4];
    if (v49 == v51 && v50 == v52
      || (char v48 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)(v49, v50, v51, v52, 0LL) & 1) != 0))
    {
      uint64_t v53 = v64;
      unint64_t v54 = v65;
      BOOL v55 = (char *)v42 + *(int *)(v64 + 28);
      uint64_t v57 = v67;
      uint64_t v56 = v68;
      BOOL v58 = *(void (**)(char *, char *, uint64_t))(v67 + 16);
      v58(v65, v55, v68);
      uint64_t v59 = (char *)v43 + *(int *)(v53 + 28);
      uint64_t v60 = v66;
      v58(v66, v59, v56);
      uint64_t v61 = sub_1000BD35C( &qword_100291D78,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
      char v48 = dispatch thunk of static Equatable.== infix(_:_:)(v54, v60, v56, v61);
      uint64_t v62 = *(void (**)(char *, uint64_t))(v57 + 8);
      v62(v60, v56);
      v62(v54, v56);
    }
  }

  return v48 & 1;
}

uint64_t _s22CloudKitImplementation37Goldilocks_SilentMoverRampingResponseV2eeoiySbAC_ACtFZ_0( void *a1, void *a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v73 = *(void *)(v4 - 8);
  uint64_t v74 = v4;
  uint64_t v5 = __chkstk_darwin(v4);
  v72 = (char *)&v67 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v5);
  uint64_t v71 = (char *)&v67 - v7;
  uint64_t v80 = type metadata accessor for Goldilocks_ErrorInfo.ResultError(0LL);
  uint64_t v77 = *(void *)(v80 - 8);
  __chkstk_darwin(v80);
  uint64_t v70 = (uint64_t)&v67 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v76 = sub_1000BED3C(&qword_100294E00);
  __chkstk_darwin(v76);
  uint64_t v81 = (uint64_t)&v67 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = sub_1000BED3C(&qword_100293C98);
  uint64_t v11 = __chkstk_darwin(v10);
  uint64_t v75 = (uint64_t)&v67 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v78 = (uint64_t)&v67 - v14;
  __chkstk_darwin(v13);
  uint64_t v79 = (uint64_t)&v67 - v15;
  uint64_t v16 = type metadata accessor for Goldilocks_OperationControl(0LL);
  uint64_t v17 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  BOOL v19 = (char *)&v67 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v20 = sub_1000BED3C(&qword_100294E08);
  __chkstk_darwin(v20);
  uint64_t v22 = (char *)&v67 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v23 = sub_1000BED3C(&qword_100293CA0);
  uint64_t v24 = __chkstk_darwin(v23);
  uint64_t v26 = (char *)&v67 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v27 = __chkstk_darwin(v24);
  char v29 = (char *)&v67 - v28;
  __chkstk_darwin(v27);
  uint64_t v31 = (char *)&v67 - v30;
  uint64_t v32 = *a1;
  uint64_t v33 = a1[1];
  uint64_t v34 = *a2;
  uint64_t v35 = a2[1];
  uint64_t v82 = a2;
  if (v32 == v34 && v33 == v35
    || (char v36 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)(v32, v33, v34, v35, 0LL) & 1) != 0))
  {
    if (a1[2] == v82[2])
    {
      uint64_t v67 = v19;
      uint64_t v37 = a1;
      uint64_t v38 = v82;
      uint64_t v39 = type metadata accessor for Goldilocks_SilentMoverRampingResponse(0LL);
      uint64_t v40 = *(int *)(v39 + 28);
      uint64_t v69 = v37;
      sub_1000CE7B4((uint64_t)v37 + v40, (uint64_t)v31, &qword_100293CA0);
      uint64_t v68 = v39;
      sub_1000CE7B4((uint64_t)v38 + *(int *)(v39 + 28), (uint64_t)v29, &qword_100293CA0);
      uint64_t v41 = (uint64_t)&v22[*(int *)(v20 + 48)];
      sub_1000CE7B4((uint64_t)v31, (uint64_t)v22, &qword_100293CA0);
      sub_1000CE7B4((uint64_t)v29, v41, &qword_100293CA0);
      uint64_t v42 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v17 + 48);
      if (v42((uint64_t)v22, 1LL, v16) == 1)
      {
        sub_1000CEDAC((uint64_t)v29, &qword_100293CA0);
        sub_1000CEDAC((uint64_t)v31, &qword_100293CA0);
        if (v42(v41, 1LL, v16) == 1)
        {
          sub_1000CEDAC((uint64_t)v22, &qword_100293CA0);
LABEL_12:
          uint64_t v48 = v68;
          uint64_t v47 = v69;
          uint64_t v49 = v79;
          sub_1000CE7B4((uint64_t)v69 + *(int *)(v68 + 32), v79, &qword_100293C98);
          uint64_t v50 = v78;
          sub_1000CE7B4((uint64_t)v82 + *(int *)(v48 + 32), v78, &qword_100293C98);
          uint64_t v51 = v81;
          uint64_t v52 = v81 + *(int *)(v76 + 48);
          sub_1000CE7B4(v49, v81, &qword_100293C98);
          sub_1000CE7B4(v50, v52, &qword_100293C98);
          uint64_t v53 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v77 + 48);
          uint64_t v54 = v80;
          if (v53(v51, 1LL, v80) == 1)
          {
            sub_1000CEDAC(v50, &qword_100293C98);
            sub_1000CEDAC(v49, &qword_100293C98);
            if (v53(v52, 1LL, v54) == 1)
            {
              sub_1000CEDAC(v51, &qword_100293C98);
LABEL_22:
              uint64_t v59 = (uint64_t)v47 + *(int *)(v48 + 24);
              uint64_t v61 = v73;
              uint64_t v60 = v74;
              uint64_t v62 = *(void (**)(char *, uint64_t, uint64_t))(v73 + 16);
              uint64_t v63 = v71;
              v62(v71, v59, v74);
              uint64_t v64 = v72;
              v62(v72, (uint64_t)v82 + *(int *)(v48 + 24), v60);
              uint64_t v65 = sub_1000BD35C( &qword_100291D78,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
              char v36 = dispatch thunk of static Equatable.== infix(_:_:)(v63, v64, v60, v65);
              uint64_t v66 = *(void (**)(char *, uint64_t))(v61 + 8);
              v66(v64, v60);
              v66(v63, v60);
              return v36 & 1;
            }
          }

          else
          {
            uint64_t v55 = v75;
            sub_1000CE7B4(v51, v75, &qword_100293C98);
            if (v53(v52, 1LL, v54) != 1)
            {
              uint64_t v57 = v70;
              sub_1000CEC9C(v52, v70, type metadata accessor for Goldilocks_ErrorInfo.ResultError);
              char v58 = _s22CloudKitImplementation20Goldilocks_ErrorInfoV06ResultE0V2eeoiySbAE_AEtFZ_0(v55, v57);
              sub_1000CECE0(v57, type metadata accessor for Goldilocks_ErrorInfo.ResultError);
              sub_1000CEDAC(v50, &qword_100293C98);
              sub_1000CEDAC(v49, &qword_100293C98);
              sub_1000CECE0(v55, type metadata accessor for Goldilocks_ErrorInfo.ResultError);
              sub_1000CEDAC(v51, &qword_100293C98);
              if ((v58 & 1) != 0) {
                goto LABEL_22;
              }
              goto LABEL_19;
            }

            sub_1000CEDAC(v50, &qword_100293C98);
            sub_1000CEDAC(v49, &qword_100293C98);
            sub_1000CECE0(v55, type metadata accessor for Goldilocks_ErrorInfo.ResultError);
          }

          uint64_t v43 = &qword_100294E00;
          uint64_t v44 = v51;
          goto LABEL_18;
        }

uint64_t _s22CloudKitImplementation36Goldilocks_SilentMoverRampingRequestV2eeoiySbAC_ACtFZ_0( void *a1, char *a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v21 - v9;
  uint64_t v11 = a1[1];
  uint64_t v12 = *((void *)a2 + 1);
  BOOL v13 = *a1 == *(void *)a2 && v11 == v12;
  if (v13 || (char v14 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)(*a1, v11, *(void *)a2, v12, 0LL) & 1) != 0))
  {
    uint64_t v15 = type metadata accessor for Goldilocks_SilentMoverRampingRequest(0LL);
    uint64_t v16 = (char *)a1 + *(int *)(v15 + 20);
    uint64_t v17 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
    v17(v10, v16, v4);
    v17(v8, &a2[*(int *)(v15 + 20)], v4);
    uint64_t v18 = sub_1000BD35C( &qword_100291D78,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
    char v14 = dispatch thunk of static Equatable.== infix(_:_:)(v10, v8, v4, v18);
    BOOL v19 = *(void (**)(char *, uint64_t))(v5 + 8);
    v19(v8, v4);
    v19(v10, v4);
  }

  return v14 & 1;
}

uint64_t _s22CloudKitImplementation36Goldilocks_ExitStatusFeedbackRequestV2eeoiySbAC_ACtFZ_0( void *a1, void *a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v60 = *(void *)(v4 - 8);
  uint64_t v61 = v4;
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v59 = (char *)&v56 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v5);
  char v58 = (char *)&v56 - v7;
  uint64_t v8 = type metadata accessor for Goldilocks_ZoneID(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (uint64_t *)((char *)&v56 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v12 = sub_1000BED3C(&qword_100294DF0);
  __chkstk_darwin(v12);
  char v14 = (char *)&v56 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = sub_1000BED3C(&qword_100295030);
  uint64_t v16 = __chkstk_darwin(v15);
  uint64_t v18 = (uint64_t *)((char *)&v56 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v19 = __chkstk_darwin(v16);
  uint64_t v21 = (char *)&v56 - v20;
  __chkstk_darwin(v19);
  uint64_t v23 = (char *)&v56 - v22;
  uint64_t v24 = *a1;
  uint64_t v25 = a1[1];
  uint64_t v62 = a1;
  uint64_t v63 = a2;
  uint64_t v26 = *a2;
  uint64_t v27 = a2[1];
  if (v24 == *a2 && v25 == v27
    || (char v28 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)(v24, v25, v26, v27, 0LL) & 1) != 0))
  {
    uint64_t v29 = type metadata accessor for Goldilocks_ExitStatusFeedbackRequest(0LL);
    sub_1000CE7B4((uint64_t)v62 + *(int *)(v29 + 28), (uint64_t)v23, &qword_100295030);
    uint64_t v57 = v29;
    sub_1000CE7B4((uint64_t)v63 + *(int *)(v29 + 28), (uint64_t)v21, &qword_100295030);
    uint64_t v30 = (uint64_t)&v14[*(int *)(v12 + 48)];
    sub_1000CE7B4((uint64_t)v23, (uint64_t)v14, &qword_100295030);
    sub_1000CE7B4((uint64_t)v21, v30, &qword_100295030);
    uint64_t v31 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
    if (v31((uint64_t)v14, 1LL, v8) == 1)
    {
      sub_1000CEDAC((uint64_t)v21, &qword_100295030);
      sub_1000CEDAC((uint64_t)v23, &qword_100295030);
      if (v31(v30, 1LL, v8) == 1)
      {
        sub_1000CEDAC((uint64_t)v14, &qword_100295030);
        goto LABEL_20;
      }
    }

    else
    {
      sub_1000CE7B4((uint64_t)v14, (uint64_t)v18, &qword_100295030);
      if (v31(v30, 1LL, v8) != 1)
      {
        sub_1000CEC9C(v30, (uint64_t)v11, type metadata accessor for Goldilocks_ZoneID);
        uint64_t v35 = v18[1];
        uint64_t v36 = v11[1];
        if (*v18 == *v11 && v35 == v36
          || (_stringCompareWithSmolCheck(_:_:expecting:)(*v18, v35, *v11, v36, 0LL) & 1) != 0)
        {
          if ((uint64_t v37 = v18[2], v38 = v18[3], v39 = v11[2], v40 = v11[3], v37 == v39) && v38 == v40
            || (_stringCompareWithSmolCheck(_:_:expecting:)(v37, v38, v39, v40, 0LL) & 1) != 0)
          {
            uint64_t v41 = *(int *)(v8 + 24);
            uint64_t v42 = (char *)v18 + v41;
            uint64_t v43 = (char *)v11 + v41;
            uint64_t v44 = sub_1000BD35C( &qword_100291D78,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
            LOBYTE(v42) = dispatch thunk of static Equatable.== infix(_:_:)(v42, v43, v61, v44);
            sub_1000CECE0((uint64_t)v11, type metadata accessor for Goldilocks_ZoneID);
            sub_1000CEDAC((uint64_t)v21, &qword_100295030);
            sub_1000CEDAC((uint64_t)v23, &qword_100295030);
            sub_1000CECE0((uint64_t)v18, type metadata accessor for Goldilocks_ZoneID);
            sub_1000CEDAC((uint64_t)v14, &qword_100295030);
            if ((v42 & 1) != 0)
            {
LABEL_20:
              uint64_t v45 = v62[2];
              if (*((_BYTE *)v62 + 24) == 1) {
                uint64_t v45 = qword_100219908[v45];
              }
              uint64_t v46 = v63[2];
              if (*((_BYTE *)v63 + 24)) {
                __asm { BR              X11 }
              }

              if (v45 == v46)
              {
                uint64_t v47 = v57;
                uint64_t v48 = v58;
                uint64_t v49 = v61;
                uint64_t v50 = v60;
                uint64_t v51 = *(void (**)(char *, char *, uint64_t))(v60 + 16);
                v51(v58, (char *)v62 + *(int *)(v57 + 24), v61);
                uint64_t v52 = (char *)v63 + *(int *)(v47 + 24);
                uint64_t v53 = v59;
                v51(v59, v52, v49);
                uint64_t v54 = sub_1000BD35C( &qword_100291D78,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
                char v28 = dispatch thunk of static Equatable.== infix(_:_:)(v48, v53, v49, v54);
                uint64_t v55 = *(void (**)(char *, uint64_t))(v50 + 8);
                v55(v53, v49);
                v55(v48, v49);
                return v28 & 1;
              }
            }

uint64_t _s22CloudKitImplementation36Goldilocks_ExitMoveBatchFeedbackItemV2eeoiySbAC_ACtFZ_0( void *a1, void *a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v50 = *(void *)(v4 - 8);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v49 = (char *)&v46 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v5);
  uint64_t v48 = (char *)&v46 - v7;
  uint64_t v8 = type metadata accessor for Goldilocks_ErrorInfo.ResultError(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v47 = (uint64_t)&v46 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = sub_1000BED3C(&qword_100294E00);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v46 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = sub_1000BED3C(&qword_100293C98);
  uint64_t v15 = __chkstk_darwin(v14);
  uint64_t v51 = (uint64_t)&v46 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = __chkstk_darwin(v15);
  uint64_t v19 = (char *)&v46 - v18;
  __chkstk_darwin(v17);
  uint64_t v21 = (char *)&v46 - v20;
  uint64_t v22 = a1[1];
  uint64_t v23 = a2[1];
  if (*a1 == *a2 && v22 == v23
    || (char v24 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)(*a1, v22, *a2, v23, 0LL) & 1) != 0))
  {
    if ((uint64_t v25 = a1[2], v26 = a1[3], v27 = a2[2], v28 = a2[3], v25 == v27) && v26 == v28
      || (char v24 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)(v25, v26, v27, v28, 0LL) & 1) != 0))
    {
      uint64_t v46 = v4;
      uint64_t v29 = type metadata accessor for Goldilocks_ExitMoveBatchFeedbackItem(0LL);
      sub_1000CE7B4((uint64_t)a1 + *(int *)(v29 + 28), (uint64_t)v21, &qword_100293C98);
      sub_1000CE7B4((uint64_t)a2 + *(int *)(v29 + 28), (uint64_t)v19, &qword_100293C98);
      uint64_t v30 = (uint64_t)&v13[*(int *)(v11 + 48)];
      sub_1000CE7B4((uint64_t)v21, (uint64_t)v13, &qword_100293C98);
      sub_1000CE7B4((uint64_t)v19, v30, &qword_100293C98);
      uint64_t v31 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
      if (v31((uint64_t)v13, 1LL, v8) == 1)
      {
        sub_1000CEDAC((uint64_t)v19, &qword_100293C98);
        sub_1000CEDAC((uint64_t)v21, &qword_100293C98);
        if (v31(v30, 1LL, v8) == 1)
        {
          sub_1000CEDAC((uint64_t)v13, &qword_100293C98);
LABEL_14:
          uint64_t v36 = (char *)a1 + *(int *)(v29 + 24);
          uint64_t v37 = v50;
          uint64_t v38 = *(void (**)(char *, char *, uint64_t))(v50 + 16);
          uint64_t v39 = v48;
          uint64_t v40 = v46;
          v38(v48, v36, v46);
          uint64_t v41 = (char *)a2 + *(int *)(v29 + 24);
          uint64_t v42 = v49;
          v38(v49, v41, v40);
          uint64_t v43 = sub_1000BD35C( &qword_100291D78,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
          char v24 = dispatch thunk of static Equatable.== infix(_:_:)(v39, v42, v40, v43);
          uint64_t v44 = *(void (**)(char *, uint64_t))(v37 + 8);
          v44(v42, v40);
          v44(v39, v40);
          return v24 & 1;
        }
      }

      else
      {
        uint64_t v32 = v51;
        sub_1000CE7B4((uint64_t)v13, v51, &qword_100293C98);
        if (v31(v30, 1LL, v8) != 1)
        {
          uint64_t v33 = v32;
          uint64_t v34 = v47;
          sub_1000CEC9C(v30, v47, type metadata accessor for Goldilocks_ErrorInfo.ResultError);
          char v35 = _s22CloudKitImplementation20Goldilocks_ErrorInfoV06ResultE0V2eeoiySbAE_AEtFZ_0(v33, v34);
          sub_1000CECE0(v34, type metadata accessor for Goldilocks_ErrorInfo.ResultError);
          sub_1000CEDAC((uint64_t)v19, &qword_100293C98);
          sub_1000CEDAC((uint64_t)v21, &qword_100293C98);
          sub_1000CECE0(v33, type metadata accessor for Goldilocks_ErrorInfo.ResultError);
          sub_1000CEDAC((uint64_t)v13, &qword_100293C98);
          if ((v35 & 1) != 0) {
            goto LABEL_14;
          }
LABEL_15:
          char v24 = 0;
          return v24 & 1;
        }

        sub_1000CEDAC((uint64_t)v19, &qword_100293C98);
        sub_1000CEDAC((uint64_t)v21, &qword_100293C98);
        sub_1000CECE0(v32, type metadata accessor for Goldilocks_ErrorInfo.ResultError);
      }

      sub_1000CEDAC((uint64_t)v13, &qword_100294E00);
      goto LABEL_15;
    }
  }

  return v24 & 1;
}

uint64_t _s22CloudKitImplementation34Goldilocks_CheckDuplicatesResponseV2eeoiySbAC_ACtFZ_0( uint64_t *a1, void *a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v47 = *(void *)(v4 - 8);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v46 = (char *)&v44 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v5);
  uint64_t v45 = (char *)&v44 - v7;
  uint64_t v8 = type metadata accessor for Goldilocks_ErrorInfo.ResultError(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v48 = (uint64_t)&v44 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = sub_1000BED3C(&qword_100294E00);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v44 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = sub_1000BED3C(&qword_100293C98);
  uint64_t v15 = __chkstk_darwin(v14);
  uint64_t v17 = (char *)&v44 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = __chkstk_darwin(v15);
  uint64_t v20 = (char *)&v44 - v19;
  __chkstk_darwin(v18);
  uint64_t v22 = (char *)&v44 - v21;
  uint64_t v23 = *a1;
  uint64_t v24 = a1[1];
  uint64_t v25 = *a2;
  uint64_t v26 = a2[1];
  uint64_t v49 = a2;
  if (v23 == v25 && v24 == v26
    || (char v27 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)(v23, v24, v25, v26, 0LL) & 1) != 0))
  {
    uint64_t v44 = v4;
    uint64_t v28 = type metadata accessor for Goldilocks_CheckDuplicatesResponse(0LL);
    sub_1000CE7B4((uint64_t)a1 + *(int *)(v28 + 28), (uint64_t)v22, &qword_100293C98);
    sub_1000CE7B4((uint64_t)v49 + *(int *)(v28 + 28), (uint64_t)v20, &qword_100293C98);
    uint64_t v29 = (uint64_t)&v13[*(int *)(v11 + 48)];
    sub_1000CE7B4((uint64_t)v22, (uint64_t)v13, &qword_100293C98);
    sub_1000CE7B4((uint64_t)v20, v29, &qword_100293C98);
    uint64_t v30 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
    if (v30((uint64_t)v13, 1LL, v8) == 1)
    {
      sub_1000CEDAC((uint64_t)v20, &qword_100293C98);
      sub_1000CEDAC((uint64_t)v22, &qword_100293C98);
      if (v30(v29, 1LL, v8) == 1)
      {
        sub_1000CEDAC((uint64_t)v13, &qword_100293C98);
LABEL_11:
        uint64_t v33 = v49;
        if ((sub_1000FE5AC(a1[2], v49[2]) & 1) != 0)
        {
          uint64_t v34 = (char *)a1 + *(int *)(v28 + 24);
          uint64_t v35 = v47;
          uint64_t v36 = *(void (**)(char *, char *, uint64_t))(v47 + 16);
          uint64_t v37 = v44;
          uint64_t v38 = v45;
          v36(v45, v34, v44);
          uint64_t v39 = (char *)v33 + *(int *)(v28 + 24);
          uint64_t v40 = v46;
          v36(v46, v39, v37);
          uint64_t v41 = sub_1000BD35C( &qword_100291D78,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
          char v27 = dispatch thunk of static Equatable.== infix(_:_:)(v38, v40, v37, v41);
          uint64_t v42 = *(void (**)(char *, uint64_t))(v35 + 8);
          v42(v40, v37);
          v42(v38, v37);
          return v27 & 1;
        }

uint64_t _s22CloudKitImplementation33Goldilocks_CheckDuplicatesRequestV2eeoiySbAC_ACtFZ_0( void *a1, void *a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v65 = *(void *)(v4 - 8);
  uint64_t v66 = v4;
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v64 = (char *)&v60 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v5);
  uint64_t v63 = (char *)&v60 - v7;
  uint64_t v8 = type metadata accessor for Goldilocks_ZoneID(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (uint64_t *)((char *)&v60 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v12 = sub_1000BED3C(&qword_100294DF0);
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v60 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = sub_1000BED3C(&qword_100295030);
  uint64_t v16 = __chkstk_darwin(v15);
  uint64_t v18 = (uint64_t *)((char *)&v60 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v19 = __chkstk_darwin(v16);
  uint64_t v21 = (char *)&v60 - v20;
  __chkstk_darwin(v19);
  uint64_t v23 = (char *)&v60 - v22;
  uint64_t v24 = *a1;
  uint64_t v25 = a1[1];
  uint64_t v26 = *a2;
  uint64_t v27 = a2[1];
  uint64_t v67 = a2;
  if (v24 == v26 && v25 == v27
    || (char v28 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)(v24, v25, v26, v27, 0LL) & 1) != 0))
  {
    uint64_t v29 = type metadata accessor for Goldilocks_CheckDuplicatesRequest(0LL);
    uint64_t v30 = a1;
    uint64_t v31 = v29;
    uint64_t v32 = *(int *)(v29 + 28);
    uint64_t v62 = v30;
    sub_1000CE7B4((uint64_t)v30 + v32, (uint64_t)v23, &qword_100295030);
    uint64_t v61 = v31;
    sub_1000CE7B4((uint64_t)v67 + *(int *)(v31 + 28), (uint64_t)v21, &qword_100295030);
    uint64_t v33 = (uint64_t)&v14[*(int *)(v12 + 48)];
    sub_1000CE7B4((uint64_t)v23, (uint64_t)v14, &qword_100295030);
    sub_1000CE7B4((uint64_t)v21, v33, &qword_100295030);
    uint64_t v34 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
    if (v34((uint64_t)v14, 1LL, v8) == 1)
    {
      sub_1000CEDAC((uint64_t)v21, &qword_100295030);
      sub_1000CEDAC((uint64_t)v23, &qword_100295030);
      if (v34(v33, 1LL, v8) == 1)
      {
        sub_1000CEDAC((uint64_t)v14, &qword_100295030);
LABEL_7:
        uint64_t v35 = v62;
        uint64_t v36 = v67;
        if ((sub_1000FEEBC((void *)v62[2], (void *)v67[2]) & 1) != 0)
        {
          uint64_t v37 = v61;
          uint64_t v38 = (uint64_t)v35 + *(int *)(v61 + 24);
          uint64_t v40 = v65;
          uint64_t v39 = v66;
          uint64_t v41 = *(void (**)(char *, uint64_t, uint64_t))(v65 + 16);
          uint64_t v42 = v63;
          v41(v63, v38, v66);
          uint64_t v43 = (uint64_t)v36 + *(int *)(v37 + 24);
          uint64_t v44 = v64;
          v41(v64, v43, v39);
          uint64_t v45 = sub_1000BD35C( &qword_100291D78,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
          char v28 = dispatch thunk of static Equatable.== infix(_:_:)(v42, v44, v39, v45);
          uint64_t v46 = *(void (**)(char *, uint64_t))(v40 + 8);
          v46(v44, v39);
          v46(v42, v39);
          return v28 & 1;
        }

uint64_t _s22CloudKitImplementation32Goldilocks_ExitMoveBatchResponseV2eeoiySbAC_ACtFZ_0( void *a1, void *a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v57 = *(void *)(v4 - 8);
  uint64_t v58 = v4;
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v56 = (char *)&v53 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v5);
  uint64_t v55 = (char *)&v53 - v7;
  uint64_t v8 = type metadata accessor for Goldilocks_ErrorInfo.ResultError(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v53 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = sub_1000BED3C(&qword_100294E00);
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v53 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = sub_1000BED3C(&qword_100293C98);
  uint64_t v16 = __chkstk_darwin(v15);
  uint64_t v18 = (char *)&v53 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = __chkstk_darwin(v16);
  uint64_t v21 = (char *)&v53 - v20;
  __chkstk_darwin(v19);
  uint64_t v23 = (char *)&v53 - v22;
  uint64_t v24 = *a1;
  uint64_t v25 = a1[1];
  uint64_t v26 = *a2;
  uint64_t v27 = a2[1];
  uint64_t v60 = a2;
  if (v24 != v26 || v25 != v27)
  {
    char v28 = 0;
    if ((_stringCompareWithSmolCheck(_:_:expecting:)(v24, v25, v26, v27, 0LL) & 1) == 0) {
      return v28 & 1;
    }
  }

  uint64_t v29 = type metadata accessor for Goldilocks_ExitMoveBatchResponse(0LL);
  uint64_t v30 = a1;
  uint64_t v31 = v29;
  uint64_t v32 = *(int *)(v29 + 40);
  uint64_t v59 = v30;
  sub_1000CE7B4((uint64_t)v30 + v32, (uint64_t)v23, &qword_100293C98);
  uint64_t v54 = v31;
  sub_1000CE7B4((uint64_t)v60 + *(int *)(v31 + 40), (uint64_t)v21, &qword_100293C98);
  uint64_t v33 = (uint64_t)&v14[*(int *)(v12 + 48)];
  sub_1000CE7B4((uint64_t)v23, (uint64_t)v14, &qword_100293C98);
  sub_1000CE7B4((uint64_t)v21, v33, &qword_100293C98);
  uint64_t v34 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
  if (v34((uint64_t)v14, 1LL, v8) == 1)
  {
    sub_1000CEDAC((uint64_t)v21, &qword_100293C98);
    sub_1000CEDAC((uint64_t)v23, &qword_100293C98);
    if (v34(v33, 1LL, v8) == 1)
    {
      sub_1000CEDAC((uint64_t)v14, &qword_100293C98);
      goto LABEL_11;
    }

uint64_t _s22CloudKitImplementation32Goldilocks_ParticipantExitResultV2eeoiySbAC_ACtFZ_0(char *a1, char *a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v74 = *(void *)(v4 - 8);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v73 = (char *)&v69 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v5);
  v72 = (char *)&v69 - v7;
  uint64_t v81 = type metadata accessor for Goldilocks_ZoneID(0LL);
  uint64_t v78 = *(void *)(v81 - 8);
  __chkstk_darwin(v81);
  uint64_t v71 = (uint64_t *)((char *)&v69 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v77 = sub_1000BED3C(&qword_100294DF0);
  __chkstk_darwin(v77);
  uint64_t v82 = (uint64_t)&v69 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = sub_1000BED3C(&qword_100295030);
  uint64_t v11 = __chkstk_darwin(v10);
  uint64_t v75 = (uint64_t *)((char *)&v69 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v79 = (uint64_t)&v69 - v14;
  __chkstk_darwin(v13);
  uint64_t v80 = (uint64_t)&v69 - v15;
  uint64_t v16 = type metadata accessor for Goldilocks_ErrorInfo.ResultError(0LL);
  uint64_t v17 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  uint64_t v76 = (uint64_t)&v69 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = sub_1000BED3C(&qword_100294E00);
  __chkstk_darwin(v19);
  uint64_t v21 = (char *)&v69 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v22 = sub_1000BED3C(&qword_100293C98);
  uint64_t v23 = __chkstk_darwin(v22);
  uint64_t v25 = (char *)&v69 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v26 = __chkstk_darwin(v23);
  char v28 = (char *)&v69 - v27;
  __chkstk_darwin(v26);
  uint64_t v30 = (char *)&v69 - v29;
  uint64_t v31 = *(void *)a1;
  uint64_t v32 = *((void *)a1 + 1);
  v83 = a1;
  v84 = a2;
  uint64_t v33 = *(void *)a2;
  uint64_t v34 = *((void *)a2 + 1);
  if (v31 == *(void *)a2 && v32 == v34
    || (char v35 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)(v31, v32, v33, v34, 0LL) & 1) != 0))
  {
    uint64_t v70 = v4;
    uint64_t v36 = (int *)type metadata accessor for Goldilocks_ParticipantExitResult(0LL);
    sub_1000CE7B4((uint64_t)&v83[v36[6]], (uint64_t)v30, &qword_100293C98);
    sub_1000CE7B4((uint64_t)&v84[v36[6]], (uint64_t)v28, &qword_100293C98);
    uint64_t v37 = (uint64_t)&v21[*(int *)(v19 + 48)];
    sub_1000CE7B4((uint64_t)v30, (uint64_t)v21, &qword_100293C98);
    sub_1000CE7B4((uint64_t)v28, v37, &qword_100293C98);
    uint64_t v38 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v17 + 48);
    if (v38((uint64_t)v21, 1LL, v16) == 1)
    {
      sub_1000CEDAC((uint64_t)v28, &qword_100293C98);
      sub_1000CEDAC((uint64_t)v30, &qword_100293C98);
      if (v38(v37, 1LL, v16) == 1)
      {
        sub_1000CEDAC((uint64_t)v21, &qword_100293C98);
LABEL_11:
        uint64_t v43 = v80;
        sub_1000CE7B4((uint64_t)&v83[v36[7]], v80, &qword_100295030);
        uint64_t v44 = v79;
        sub_1000CE7B4((uint64_t)&v84[v36[7]], v79, &qword_100295030);
        uint64_t v45 = v82;
        uint64_t v46 = v82 + *(int *)(v77 + 48);
        sub_1000CE7B4(v43, v82, &qword_100295030);
        sub_1000CE7B4(v44, v46, &qword_100295030);
        uint64_t v47 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v78 + 48);
        uint64_t v48 = v81;
        if (v47(v45, 1LL, v81) == 1)
        {
          sub_1000CEDAC(v44, &qword_100295030);
          sub_1000CEDAC(v43, &qword_100295030);
          if (v47(v46, 1LL, v48) == 1)
          {
            sub_1000CEDAC(v45, &qword_100295030);
LABEL_14:
            uint64_t v49 = v74;
            uint64_t v50 = *(void (**)(char *, char *, uint64_t))(v74 + 16);
            uint64_t v51 = v72;
            uint64_t v52 = v70;
            v50(v72, &v83[v36[5]], v70);
            uint64_t v53 = v73;
            v50(v73, &v84[v36[5]], v52);
            uint64_t v54 = sub_1000BD35C( &qword_100291D78,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
            char v35 = dispatch thunk of static Equatable.== infix(_:_:)(v51, v53, v52, v54);
            uint64_t v55 = *(void (**)(char *, uint64_t))(v49 + 8);
            v55(v53, v52);
            v55(v51, v52);
            return v35 & 1;
          }

          goto LABEL_17;
        }

        uint64_t v56 = v75;
        sub_1000CE7B4(v45, (uint64_t)v75, &qword_100295030);
        if (v47(v46, 1LL, v48) == 1)
        {
          sub_1000CEDAC(v44, &qword_100295030);
          sub_1000CEDAC(v43, &qword_100295030);
          sub_1000CECE0((uint64_t)v56, type metadata accessor for Goldilocks_ZoneID);
LABEL_17:
          uint64_t v39 = &qword_100294DF0;
          uint64_t v40 = v45;
          goto LABEL_18;
        }

        uint64_t v58 = v71;
        sub_1000CEC9C(v46, (uint64_t)v71, type metadata accessor for Goldilocks_ZoneID);
        uint64_t v59 = v56[1];
        uint64_t v60 = v58[1];
        if ((*v56 != *v58 || v59 != v60)
          && (_stringCompareWithSmolCheck(_:_:expecting:)(*v56, v59, *v58, v60, 0LL) & 1) == 0
          || ((uint64_t v61 = v56[2], v62 = v56[3], v63 = v58[2], v64 = v58[3], v61 != v63) || v62 != v64)
          && (_stringCompareWithSmolCheck(_:_:expecting:)(v61, v62, v63, v64, 0LL) & 1) == 0)
        {
          sub_1000CECE0((uint64_t)v58, type metadata accessor for Goldilocks_ZoneID);
          sub_1000CEDAC(v44, &qword_100295030);
          sub_1000CEDAC(v43, &qword_100295030);
          sub_1000CECE0((uint64_t)v56, type metadata accessor for Goldilocks_ZoneID);
          uint64_t v40 = v45;
          uint64_t v39 = &qword_100295030;
          goto LABEL_18;
        }

        uint64_t v65 = *(int *)(v48 + 24);
        uint64_t v66 = (char *)v56 + v65;
        uint64_t v67 = (char *)v58 + v65;
        uint64_t v68 = sub_1000BD35C( &qword_100291D78,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
        LOBYTE(v66) = dispatch thunk of static Equatable.== infix(_:_:)(v66, v67, v70, v68);
        sub_1000CECE0((uint64_t)v58, type metadata accessor for Goldilocks_ZoneID);
        sub_1000CEDAC(v44, &qword_100295030);
        sub_1000CEDAC(v43, &qword_100295030);
        sub_1000CECE0((uint64_t)v56, type metadata accessor for Goldilocks_ZoneID);
        sub_1000CEDAC(v45, &qword_100295030);
LABEL_19:
        char v35 = 0;
        return v35 & 1;
      }
    }

    else
    {
      sub_1000CE7B4((uint64_t)v21, (uint64_t)v25, &qword_100293C98);
      if (v38(v37, 1LL, v16) != 1)
      {
        uint64_t v41 = v76;
        sub_1000CEC9C(v37, v76, type metadata accessor for Goldilocks_ErrorInfo.ResultError);
        char v42 = _s22CloudKitImplementation20Goldilocks_ErrorInfoV06ResultE0V2eeoiySbAE_AEtFZ_0((uint64_t)v25, v41);
        sub_1000CECE0(v41, type metadata accessor for Goldilocks_ErrorInfo.ResultError);
        sub_1000CEDAC((uint64_t)v28, &qword_100293C98);
        sub_1000CEDAC((uint64_t)v30, &qword_100293C98);
        sub_1000CECE0((uint64_t)v25, type metadata accessor for Goldilocks_ErrorInfo.ResultError);
        sub_1000CEDAC((uint64_t)v21, &qword_100293C98);
        if ((v42 & 1) == 0) {
          goto LABEL_19;
        }
        goto LABEL_11;
      }

      sub_1000CEDAC((uint64_t)v28, &qword_100293C98);
      sub_1000CEDAC((uint64_t)v30, &qword_100293C98);
      sub_1000CECE0((uint64_t)v25, type metadata accessor for Goldilocks_ErrorInfo.ResultError);
    }

    uint64_t v39 = &qword_100294E00;
    uint64_t v40 = (uint64_t)v21;
LABEL_18:
    sub_1000CEDAC(v40, v39);
    goto LABEL_19;
  }

  return v35 & 1;
}

uint64_t sub_10010326C( uint64_t *a1, void *a2, uint64_t (*a3)(void), uint64_t (*a4)(void), uint64_t (*a5)(char *, char *))
{
  uint64_t v53 = a4;
  uint64_t v54 = a5;
  uint64_t v55 = a3;
  uint64_t v7 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v51 = *(void *)(v7 - 8);
  uint64_t v8 = __chkstk_darwin(v7);
  uint64_t v50 = (char *)&v47 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v8);
  uint64_t v49 = (char *)&v47 - v10;
  uint64_t v11 = type metadata accessor for Goldilocks_ErrorInfo.ResultError(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v52 = (uint64_t)&v47 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = sub_1000BED3C(&qword_100294E00);
  __chkstk_darwin(v14);
  uint64_t v16 = (char *)&v47 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = sub_1000BED3C(&qword_100293C98);
  uint64_t v18 = __chkstk_darwin(v17);
  uint64_t v20 = (char *)&v47 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v21 = __chkstk_darwin(v18);
  uint64_t v23 = (char *)&v47 - v22;
  __chkstk_darwin(v21);
  uint64_t v25 = (char *)&v47 - v24;
  uint64_t v26 = *a1;
  uint64_t v27 = a1[1];
  uint64_t v28 = *a2;
  uint64_t v29 = a2[1];
  uint64_t v56 = a2;
  if (v26 == v28 && v27 == v29
    || (char v30 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)(v26, v27, v28, v29, 0LL) & 1) != 0))
  {
    uint64_t v48 = v7;
    uint64_t v31 = v55(0LL);
    sub_1000CE7B4((uint64_t)a1 + *(int *)(v31 + 28), (uint64_t)v25, &qword_100293C98);
    sub_1000CE7B4((uint64_t)v56 + *(int *)(v31 + 28), (uint64_t)v23, &qword_100293C98);
    uint64_t v32 = (uint64_t)&v16[*(int *)(v14 + 48)];
    sub_1000CE7B4((uint64_t)v25, (uint64_t)v16, &qword_100293C98);
    sub_1000CE7B4((uint64_t)v23, v32, &qword_100293C98);
    uint64_t v33 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    if (v33((uint64_t)v16, 1LL, v11) == 1)
    {
      sub_1000CEDAC((uint64_t)v23, &qword_100293C98);
      sub_1000CEDAC((uint64_t)v25, &qword_100293C98);
      if (v33(v32, 1LL, v11) == 1)
      {
        sub_1000CEDAC((uint64_t)v16, &qword_100293C98);
LABEL_11:
        uint64_t v36 = v56;
        if ((sub_1000FF370(a1[2], v56[2], v53, v54) & 1) != 0)
        {
          uint64_t v37 = (char *)a1 + *(int *)(v31 + 24);
          uint64_t v38 = v51;
          uint64_t v39 = *(void (**)(char *, char *, uint64_t))(v51 + 16);
          uint64_t v40 = v48;
          uint64_t v41 = v49;
          v39(v49, v37, v48);
          char v42 = (char *)v36 + *(int *)(v31 + 24);
          uint64_t v43 = v50;
          v39(v50, v42, v40);
          uint64_t v44 = sub_1000BD35C( &qword_100291D78,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
          char v30 = dispatch thunk of static Equatable.== infix(_:_:)(v41, v43, v40, v44);
          uint64_t v45 = *(void (**)(char *, uint64_t))(v38 + 8);
          v45(v43, v40);
          v45(v41, v40);
          return v30 & 1;
        }

uint64_t _s22CloudKitImplementation31Goldilocks_ExitMoveBatchRequestV2eeoiySbAC_ACtFZ_0(char *a1, void *a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v63 = *(void *)(v4 - 8);
  uint64_t v64 = v4;
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v62 = (char *)&v58 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v5);
  uint64_t v61 = (char *)&v58 - v7;
  uint64_t v8 = type metadata accessor for Goldilocks_ZoneID(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (uint64_t *)((char *)&v58 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v12 = sub_1000BED3C(&qword_100294DF0);
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v58 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = sub_1000BED3C(&qword_100295030);
  uint64_t v16 = __chkstk_darwin(v15);
  uint64_t v18 = (uint64_t *)((char *)&v58 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v19 = __chkstk_darwin(v16);
  uint64_t v21 = (char *)&v58 - v20;
  __chkstk_darwin(v19);
  uint64_t v23 = (char *)&v58 - v22;
  uint64_t v24 = *(void *)a1;
  uint64_t v25 = *((void *)a1 + 1);
  uint64_t v26 = *a2;
  uint64_t v27 = a2[1];
  uint64_t v65 = a2;
  if (v24 == v26 && v25 == v27
    || (char v28 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)(v24, v25, v26, v27, 0LL) & 1) != 0))
  {
    uint64_t v29 = type metadata accessor for Goldilocks_ExitMoveBatchRequest(0LL);
    char v30 = a1;
    uint64_t v31 = v29;
    uint64_t v32 = *(int *)(v29 + 28);
    uint64_t v60 = v30;
    sub_1000CE7B4((uint64_t)&v30[v32], (uint64_t)v23, &qword_100295030);
    uint64_t v59 = v31;
    sub_1000CE7B4((uint64_t)v65 + *(int *)(v31 + 28), (uint64_t)v21, &qword_100295030);
    uint64_t v33 = (uint64_t)&v14[*(int *)(v12 + 48)];
    sub_1000CE7B4((uint64_t)v23, (uint64_t)v14, &qword_100295030);
    sub_1000CE7B4((uint64_t)v21, v33, &qword_100295030);
    uint64_t v34 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
    if (v34((uint64_t)v14, 1LL, v8) == 1)
    {
      sub_1000CEDAC((uint64_t)v21, &qword_100295030);
      sub_1000CEDAC((uint64_t)v23, &qword_100295030);
      if (v34(v33, 1LL, v8) == 1)
      {
        sub_1000CEDAC((uint64_t)v14, &qword_100295030);
LABEL_7:
        char v35 = v65;
        if (*((_DWORD *)v60 + 4) == *((_DWORD *)v65 + 4))
        {
          uint64_t v36 = v59;
          uint64_t v38 = v63;
          uint64_t v37 = v64;
          uint64_t v39 = *(void (**)(char *, char *, uint64_t))(v63 + 16);
          uint64_t v40 = v61;
          v39(v61, &v60[*(int *)(v59 + 24)], v64);
          uint64_t v41 = (char *)v35 + *(int *)(v36 + 24);
          char v42 = v62;
          v39(v62, v41, v37);
          uint64_t v43 = sub_1000BD35C( &qword_100291D78,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
          char v28 = dispatch thunk of static Equatable.== infix(_:_:)(v40, v42, v37, v43);
          uint64_t v44 = *(void (**)(char *, uint64_t))(v38 + 8);
          v44(v42, v37);
          v44(v40, v37);
          return v28 & 1;
        }

uint64_t _s22CloudKitImplementation30Goldilocks_InitiateExitRequestV2eeoiySbAC_ACtFZ_0( void *a1, void *a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v69 = *(void *)(v4 - 8);
  uint64_t v70 = v4;
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v68 = (char *)&v64 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v5);
  uint64_t v67 = (char *)&v64 - v7;
  uint64_t v8 = type metadata accessor for Goldilocks_ZoneID(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v64 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = sub_1000BED3C(&qword_100294DF0);
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v64 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = sub_1000BED3C(&qword_100295030);
  uint64_t v16 = __chkstk_darwin(v15);
  uint64_t v18 = (uint64_t *)((char *)&v64 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v19 = __chkstk_darwin(v16);
  uint64_t v21 = (char *)&v64 - v20;
  __chkstk_darwin(v19);
  uint64_t v23 = (char *)&v64 - v22;
  uint64_t v24 = *a1;
  uint64_t v25 = a1[1];
  uint64_t v71 = a1;
  uint64_t v26 = a2[1];
  if (v24 == *a2 && v25 == v26
    || (char v27 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)(v24, v25, *a2, v26, 0LL) & 1) != 0))
  {
    uint64_t v66 = v11;
    char v28 = a2;
    uint64_t v29 = type metadata accessor for Goldilocks_InitiateExitRequest(0LL);
    sub_1000CE7B4((uint64_t)v71 + *(int *)(v29 + 52), (uint64_t)v23, &qword_100295030);
    uint64_t v65 = v29;
    sub_1000CE7B4((uint64_t)v28 + *(int *)(v29 + 52), (uint64_t)v21, &qword_100295030);
    uint64_t v30 = (uint64_t)&v14[*(int *)(v12 + 48)];
    sub_1000CE7B4((uint64_t)v23, (uint64_t)v14, &qword_100295030);
    sub_1000CE7B4((uint64_t)v21, v30, &qword_100295030);
    uint64_t v31 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
    if (v31((uint64_t)v14, 1LL, v8) == 1)
    {
      sub_1000CEDAC((uint64_t)v21, &qword_100295030);
      sub_1000CEDAC((uint64_t)v23, &qword_100295030);
      if (v31(v30, 1LL, v8) == 1)
      {
        sub_1000CEDAC((uint64_t)v14, &qword_100295030);
        goto LABEL_20;
      }
    }

    else
    {
      sub_1000CE7B4((uint64_t)v14, (uint64_t)v18, &qword_100295030);
      if (v31(v30, 1LL, v8) != 1)
      {
        char v35 = v66;
        sub_1000CEC9C(v30, (uint64_t)v66, type metadata accessor for Goldilocks_ZoneID);
        uint64_t v36 = v18[1];
        uint64_t v37 = v35[1];
        if (*v18 == *v35 && v36 == v37
          || (_stringCompareWithSmolCheck(_:_:expecting:)(*v18, v36, *v35, v37, 0LL) & 1) != 0)
        {
          if ((uint64_t v38 = v18[2], v39 = v18[3], v40 = v35[2], v41 = v35[3], v38 == v40) && v39 == v41
            || (_stringCompareWithSmolCheck(_:_:expecting:)(v38, v39, v40, v41, 0LL) & 1) != 0)
          {
            uint64_t v42 = *(int *)(v8 + 24);
            uint64_t v43 = (char *)v18 + v42;
            uint64_t v44 = (char *)v35 + v42;
            uint64_t v45 = sub_1000BD35C( &qword_100291D78,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
            LOBYTE(v43) = dispatch thunk of static Equatable.== infix(_:_:)(v43, v44, v70, v45);
            sub_1000CECE0((uint64_t)v35, type metadata accessor for Goldilocks_ZoneID);
            sub_1000CEDAC((uint64_t)v21, &qword_100295030);
            sub_1000CEDAC((uint64_t)v23, &qword_100295030);
            sub_1000CECE0((uint64_t)v18, type metadata accessor for Goldilocks_ZoneID);
            sub_1000CEDAC((uint64_t)v14, &qword_100295030);
LABEL_20:
            uint64_t v46 = v71;
            uint64_t v47 = v71[2];
            uint64_t v48 = v28[2];
            if (*((_BYTE *)v28 + 24) == 1)
            {
              if (v48)
              {
                if (v48 == 1)
                {
                  if (v47 != 1) {
                    goto LABEL_11;
                  }
                }

                else if (v47 != 2)
                {
                  goto LABEL_11;
                }
              }

              else if (v47)
              {
                goto LABEL_11;
              }
            }

            else if (v47 != v48)
            {
              goto LABEL_11;
            }

            uint64_t v49 = v71[4];
            uint64_t v50 = v28[4];
            if (*((_BYTE *)v28 + 40) == 1)
            {
              if (v50)
              {
                if (v50 == 1)
                {
                  if (v49 == 1) {
                    goto LABEL_41;
                  }
                }

                else if (v49 == 2)
                {
                  goto LABEL_41;
                }

LABEL_41:
            if ((sub_1000FEEBC((void *)v71[6], (void *)v28[6]) & 1) != 0
              && (sub_1000FEEBC((void *)v46[7], (void *)v28[7]) & 1) != 0
              && v46[8] == v28[8])
            {
              uint64_t v51 = v28[9];
              if (*((_BYTE *)v28 + 80) == 1) {
                __asm { BR              X11 }
              }

              if (v46[9] == v51)
              {
                uint64_t v52 = v46[11];
                if (*((_BYTE *)v46 + 96) == 1) {
                  uint64_t v52 = qword_100219938[v52];
                }
                uint64_t v53 = v28[11];
                if (*((_BYTE *)v28 + 96)) {
                  __asm { BR              X11 }
                }

                if (v52 == v53)
                {
                  uint64_t v54 = v65;
                  uint64_t v55 = (uint64_t)v46 + *(int *)(v65 + 48);
                  uint64_t v57 = v69;
                  uint64_t v56 = v70;
                  uint64_t v58 = *(void (**)(char *, uint64_t, uint64_t))(v69 + 16);
                  uint64_t v59 = v67;
                  v58(v67, v55, v70);
                  uint64_t v60 = (char *)v28 + *(int *)(v54 + 48);
                  uint64_t v61 = v68;
                  v58(v68, (uint64_t)v60, v56);
                  uint64_t v62 = sub_1000BD35C( &qword_100291D78,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
                  char v27 = dispatch thunk of static Equatable.== infix(_:_:)(v59, v61, v56, v62);
                  uint64_t v63 = *(void (**)(char *, uint64_t))(v57 + 8);
                  v63(v61, v56);
                  v63(v59, v56);
                  return v27 & 1;
                }
              }
            }

            goto LABEL_11;
          }
        }

        sub_1000CECE0((uint64_t)v35, type metadata accessor for Goldilocks_ZoneID);
        sub_1000CEDAC((uint64_t)v21, &qword_100295030);
        sub_1000CEDAC((uint64_t)v23, &qword_100295030);
        sub_1000CECE0((uint64_t)v18, type metadata accessor for Goldilocks_ZoneID);
        uint64_t v33 = (uint64_t)v14;
        uint64_t v32 = &qword_100295030;
LABEL_10:
        sub_1000CEDAC(v33, v32);
        goto LABEL_11;
      }

      sub_1000CEDAC((uint64_t)v21, &qword_100295030);
      sub_1000CEDAC((uint64_t)v23, &qword_100295030);
      sub_1000CECE0((uint64_t)v18, type metadata accessor for Goldilocks_ZoneID);
    }

    uint64_t v32 = &qword_100294DF0;
    uint64_t v33 = (uint64_t)v14;
    goto LABEL_10;
  }

  return v27 & 1;
}

        uint64_t v33 = 1;
        goto LABEL_43;
      }

      if (buf[0])
      {
        if (!self->_trackAllStoresAndDeletes || _CPLSilentLogging != 0) {
          goto LABEL_35;
        }
        char v28 = sub_1001892A0();
        uint64_t v29 = (os_log_s *)objc_claimAutoreleasedReturnValue(v28);
        if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v30 = (void *)objc_claimAutoreleasedReturnValue([v8 lastPathComponent]);
          *(_DWORD *)buf = 138412546;
          uint64_t v41 = v7;
          uint64_t v42 = 2112;
          uint64_t v43 = v30;
          _os_log_impl( (void *)&_mh_execute_header,  v29,  OS_LOG_TYPE_DEFAULT,  "DELETING %@ from %@: mark for delete",  buf,  0x16u);
        }

        goto LABEL_34;
      }

      uint64_t v11 = v26;
    }

    if (self->_trackAllStoresAndDeletes && _CPLSilentLogging == 0)
    {
      uint64_t v13 = sub_1001892A0();
      uint64_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([v8 lastPathComponent]);
        *(_DWORD *)buf = 138412546;
        uint64_t v41 = v7;
        uint64_t v42 = 2112;
        uint64_t v43 = v15;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "DELETING %@ from %@", buf, 0x16u);
      }
    }

    fileManager = self->_fileManager;
    uint64_t v37 = v11;
    uint64_t v17 = -[NSFileManager removeItemAtURL:error:](fileManager, "removeItemAtURL:error:", v8, &v37);
    uint64_t v10 = v37;

    if ((v17 & 1) == 0)
    {
      if (!-[NSFileManager cplIsFileDoesNotExistError:]( self->_fileManager,  "cplIsFileDoesNotExistError:",  v10))
      {
        uint64_t v33 = 0;
        goto LABEL_43;
      }

      if (!_CPLSilentLogging)
      {
        uint64_t v18 = sub_1001892A0();
        uint64_t v19 = (os_log_s *)objc_claimAutoreleasedReturnValue(v18);
        if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue([v8 path]);
          *(_DWORD *)buf = 138412290;
          uint64_t v41 = v20;
          uint64_t v21 = "Deleting %@ failed because the file was already gone";
          uint64_t v22 = v19;
          uint64_t v23 = OS_LOG_TYPE_DEBUG;
          uint64_t v24 = 12;
LABEL_46:
          _os_log_impl((void *)&_mh_execute_header, v22, v23, v21, buf, v24);

          goto LABEL_47;
        }

        goto LABEL_47;
      }
    }

    goto LABEL_41;
  }

  if (self->_trackAllStoresAndDeletes && _CPLSilentLogging == 0)
  {
    uint64_t v31 = sub_1001892A0();
    uint64_t v29 = (os_log_s *)objc_claimAutoreleasedReturnValue(v31);
    if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v32 = (void *)objc_claimAutoreleasedReturnValue([v8 lastPathComponent]);
      *(_DWORD *)buf = 138412546;
      uint64_t v41 = v7;
      uint64_t v42 = 2112;
      uint64_t v43 = v32;
      _os_log_impl( (void *)&_mh_execute_header,  v29,  OS_LOG_TYPE_DEFAULT,  "DELETING %@ from %@: resource is retained",  buf,  0x16u);
    }

    uint64_t v10 = 0LL;
LABEL_34:

    goto LABEL_35;
  }

  uint64_t v10 = 0LL;
LABEL_35:
  uint64_t v38 = v10;
  uint64_t v33 = -[CPLBucketFileStorage _markURLForDelete:error:](self, "_markURLForDelete:error:", v8, &v38);
  uint64_t v19 = (os_log_s *)v10;
  uint64_t v10 = v38;
LABEL_36:

LABEL_43:
  return v33;
}

uint64_t _s22CloudKitImplementation27Goldilocks_OperationControlV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v19 - v9;
  char v11 = *(_BYTE *)(a2 + 8);
  if ((*(_BYTE *)(a1 + 8) & 1) != 0)
  {
    if (!*(_BYTE *)(a2 + 8)) {
      goto LABEL_13;
    }
  }

  else
  {
    if ((v11 & 1) != 0) {
      goto LABEL_13;
    }
  }

  if (*(unsigned __int8 *)(a1 + 9) == *(unsigned __int8 *)(a2 + 9)
    && *(unsigned __int8 *)(a1 + 10) == *(unsigned __int8 *)(a2 + 10)
    && *(unsigned __int8 *)(a1 + 11) == *(unsigned __int8 *)(a2 + 11)
    && *(unsigned __int8 *)(a1 + 12) == *(unsigned __int8 *)(a2 + 12)
    && *(unsigned __int8 *)(a1 + 13) == *(unsigned __int8 *)(a2 + 13)
    && *(unsigned __int8 *)(a1 + 14) == *(unsigned __int8 *)(a2 + 14))
  {
    uint64_t v14 = type metadata accessor for Goldilocks_OperationControl(0LL);
    uint64_t v15 = a1 + *(int *)(v14 + 44);
    uint64_t v16 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v16(v10, v15, v4);
    v16(v8, a2 + *(int *)(v14 + 44), v4);
    uint64_t v17 = sub_1000BD35C( &qword_100291D78,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
    char v12 = dispatch thunk of static Equatable.== infix(_:_:)(v10, v8, v4, v17);
    uint64_t v18 = *(void (**)(char *, uint64_t))(v5 + 8);
    v18(v8, v4);
    v18(v10, v4);
    return v12 & 1;
  }

uint64_t _s22CloudKitImplementation25Goldilocks_FoundDuplicateV2eeoiySbAC_ACtFZ_0(void *a1, void *a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v60 = *(void *)(v4 - 8);
  uint64_t v61 = v4;
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v59 = (char *)&v56 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v5);
  uint64_t v58 = (char *)&v56 - v7;
  uint64_t v8 = type metadata accessor for Goldilocks_ZoneID(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  char v11 = (uint64_t *)((char *)&v56 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v12 = sub_1000BED3C(&qword_100294DF0);
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v56 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = sub_1000BED3C(&qword_100295030);
  uint64_t v16 = __chkstk_darwin(v15);
  uint64_t v18 = (uint64_t *)((char *)&v56 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v19 = __chkstk_darwin(v16);
  uint64_t v21 = (char *)&v56 - v20;
  __chkstk_darwin(v19);
  uint64_t v23 = (char *)&v56 - v22;
  uint64_t v24 = *a1;
  uint64_t v25 = a1[1];
  uint64_t v62 = a1;
  uint64_t v63 = a2;
  uint64_t v26 = *a2;
  uint64_t v27 = a2[1];
  if (v24 == *a2 && v25 == v27
    || (char v28 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)(v24, v25, v26, v27, 0LL) & 1) != 0))
  {
    uint64_t found = type metadata accessor for Goldilocks_FoundDuplicate(0LL);
    sub_1000CE7B4((uint64_t)v62 + *(int *)(found + 28), (uint64_t)v23, &qword_100295030);
    uint64_t v57 = found;
    sub_1000CE7B4((uint64_t)v63 + *(int *)(found + 28), (uint64_t)v21, &qword_100295030);
    uint64_t v30 = (uint64_t)&v14[*(int *)(v12 + 48)];
    sub_1000CE7B4((uint64_t)v23, (uint64_t)v14, &qword_100295030);
    sub_1000CE7B4((uint64_t)v21, v30, &qword_100295030);
    uint64_t v31 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
    if (v31((uint64_t)v14, 1LL, v8) == 1)
    {
      sub_1000CEDAC((uint64_t)v21, &qword_100295030);
      sub_1000CEDAC((uint64_t)v23, &qword_100295030);
      if (v31(v30, 1LL, v8) == 1)
      {
        sub_1000CEDAC((uint64_t)v14, &qword_100295030);
        goto LABEL_20;
      }
    }

    else
    {
      sub_1000CE7B4((uint64_t)v14, (uint64_t)v18, &qword_100295030);
      if (v31(v30, 1LL, v8) != 1)
      {
        sub_1000CEC9C(v30, (uint64_t)v11, type metadata accessor for Goldilocks_ZoneID);
        uint64_t v35 = v18[1];
        uint64_t v36 = v11[1];
        if (*v18 == *v11 && v35 == v36
          || (_stringCompareWithSmolCheck(_:_:expecting:)(*v18, v35, *v11, v36, 0LL) & 1) != 0)
        {
          if ((uint64_t v37 = v18[2], v38 = v18[3], v39 = v11[2], v40 = v11[3], v37 == v39) && v38 == v40
            || (_stringCompareWithSmolCheck(_:_:expecting:)(v37, v38, v39, v40, 0LL) & 1) != 0)
          {
            uint64_t v41 = *(int *)(v8 + 24);
            uint64_t v42 = (char *)v18 + v41;
            uint64_t v43 = (char *)v11 + v41;
            uint64_t v44 = sub_1000BD35C( &qword_100291D78,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
            LOBYTE(v42) = dispatch thunk of static Equatable.== infix(_:_:)(v42, v43, v61, v44);
            sub_1000CECE0((uint64_t)v11, type metadata accessor for Goldilocks_ZoneID);
            sub_1000CEDAC((uint64_t)v21, &qword_100295030);
            sub_1000CEDAC((uint64_t)v23, &qword_100295030);
            sub_1000CECE0((uint64_t)v18, type metadata accessor for Goldilocks_ZoneID);
            sub_1000CEDAC((uint64_t)v14, &qword_100295030);
            if ((v42 & 1) != 0)
            {
LABEL_20:
              uint64_t v45 = v62[2];
              uint64_t v46 = v63[2];
              if (*((_BYTE *)v62 + 24)) {
                uint64_t v45 = v45 != 0;
              }
              if (*((_BYTE *)v63 + 24) == 1)
              {
                if (v46)
                {
                  if (v45 == 1) {
                    goto LABEL_30;
                  }
                }

                else if (!v45)
                {
LABEL_30:
                  uint64_t v47 = v57;
                  uint64_t v48 = v58;
                  uint64_t v49 = v61;
                  uint64_t v50 = v60;
                  uint64_t v51 = *(void (**)(char *, char *, uint64_t))(v60 + 16);
                  v51(v58, (char *)v62 + *(int *)(v57 + 24), v61);
                  uint64_t v52 = (char *)v63 + *(int *)(v47 + 24);
                  uint64_t v53 = v59;
                  v51(v59, v52, v49);
                  uint64_t v54 = sub_1000BD35C( &qword_100291D78,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
                  char v28 = dispatch thunk of static Equatable.== infix(_:_:)(v48, v53, v49, v54);
                  uint64_t v55 = *(void (**)(char *, uint64_t))(v50 + 8);
                  v55(v53, v49);
                  v55(v48, v49);
                  return v28 & 1;
                }
              }

              else if (v45 == v46)
              {
                goto LABEL_30;
              }
            }

uint64_t _s22CloudKitImplementation20Goldilocks_ErrorInfoV15DatabaseFailureV2eeoiySbAE_AEtFZ_0( uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v31 - v9;
  uint64_t v11 = *(void *)(a1 + 8);
  uint64_t v12 = *(void *)(a2 + 8);
  BOOL v13 = *(void *)a1 == *(void *)a2 && v11 == v12;
  if (v13
    || (char v14 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)(*(void *)a1, v11, *(void *)a2, v12, 0LL) & 1) != 0))
  {
    uint64_t v15 = *(void *)(a1 + 16);
    uint64_t v16 = *(void *)(a1 + 24);
    uint64_t v17 = *(void *)(a2 + 16);
    uint64_t v18 = *(void *)(a2 + 24);
    BOOL v19 = v15 == v17 && v16 == v18;
    if (v19 || (char v14 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)(v15, v16, v17, v18, 0LL) & 1) != 0))
    {
      uint64_t v20 = *(void *)(a2 + 32);
      char v21 = *(_BYTE *)(a2 + 40);
      uint64_t v22 = Rpcproto_ErrorInfo.Client.Code.rawValue.getter(*(void *)(a1 + 32), *(_BYTE *)(a1 + 40));
      if (v22 != Rpcproto_ErrorInfo.Client.Code.rawValue.getter(v20, v21)) {
        goto LABEL_16;
      }
      uint64_t v23 = *(void *)(a1 + 48);
      if (*(_BYTE *)(a1 + 56) == 1) {
        uint64_t v23 = qword_100219980[v23];
      }
      uint64_t v24 = *(void *)(a2 + 48);
      if (*(_BYTE *)(a2 + 56)) {
        __asm { BR              X11 }
      }

      if (v23 == v24)
      {
        uint64_t v25 = type metadata accessor for Goldilocks_ErrorInfo.DatabaseFailure(0LL);
        uint64_t v26 = a1 + *(int *)(v25 + 32);
        uint64_t v27 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
        v27(v10, v26, v4);
        v27(v8, a2 + *(int *)(v25 + 32), v4);
        uint64_t v28 = sub_1000BD35C( &qword_100291D78,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
        char v14 = dispatch thunk of static Equatable.== infix(_:_:)(v10, v8, v4, v28);
        uint64_t v29 = *(void (**)(char *, uint64_t))(v5 + 8);
        v29(v8, v4);
        v29(v10, v4);
      }

      else
      {
LABEL_16:
        char v14 = 0;
      }
    }
  }

  return v14 & 1;
}

uint64_t _s22CloudKitImplementation20Goldilocks_ErrorInfoV06ResultE0V2eeoiySbAE_AEtFZ_0( uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v61 = *(void *)(v4 - 8);
  uint64_t v62 = v4;
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v60 = (char *)&v56 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v5);
  uint64_t v59 = (char *)&v56 - v7;
  uint64_t v8 = type metadata accessor for Goldilocks_ErrorInfo.DatabaseFailure(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v56 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = sub_1000BED3C(&qword_100294DF8);
  __chkstk_darwin(v12);
  char v14 = (char *)&v56 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = sub_1000BED3C(&qword_100293CA8);
  uint64_t v16 = __chkstk_darwin(v15);
  uint64_t v63 = (uint64_t)&v56 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = __chkstk_darwin(v16);
  uint64_t v20 = (char *)&v56 - v19;
  __chkstk_darwin(v18);
  uint64_t v22 = (char *)&v56 - v21;
  uint64_t v23 = *(void *)(a1 + 8);
  uint64_t v24 = *(void *)(a2 + 8);
  if (*(void *)a1 != *(void *)a2 || v23 != v24)
  {
    char v25 = 0;
    if ((_stringCompareWithSmolCheck(_:_:expecting:)(*(void *)a1, v23, *(void *)a2, v24, 0LL) & 1) == 0) {
      return v25 & 1;
    }
  }

  uint64_t v26 = *(void *)(a2 + 16);
  if (*(_BYTE *)(a2 + 24) == 1) {
    __asm { BR              X11 }
  }

  if (*(void *)(a1 + 16) != v26)
  {
LABEL_26:
    char v25 = 0;
    return v25 & 1;
  }

  uint64_t v58 = v11;
  uint64_t v27 = type metadata accessor for Goldilocks_ErrorInfo.ResultError(0LL);
  sub_1000CE7B4(a1 + *(int *)(v27 + 48), (uint64_t)v22, &qword_100293CA8);
  uint64_t v57 = v27;
  sub_1000CE7B4(a2 + *(int *)(v27 + 48), (uint64_t)v20, &qword_100293CA8);
  uint64_t v28 = (uint64_t)&v14[*(int *)(v12 + 48)];
  sub_1000CE7B4((uint64_t)v22, (uint64_t)v14, &qword_100293CA8);
  sub_1000CE7B4((uint64_t)v20, v28, &qword_100293CA8);
  uint64_t v29 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
  if (v29((uint64_t)v14, 1LL, v8) == 1)
  {
    sub_1000CEDAC((uint64_t)v20, &qword_100293CA8);
    sub_1000CEDAC((uint64_t)v22, &qword_100293CA8);
    if (v29(v28, 1LL, v8) == 1)
    {
      sub_1000CEDAC((uint64_t)v14, &qword_100293CA8);
      goto LABEL_14;
    }

uint64_t _s22CloudKitImplementation17Goldilocks_ZoneIDV2eeoiySbAC_ACtFZ_0(void *a1, char *a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v26 - v9;
  uint64_t v11 = a1[1];
  uint64_t v12 = *((void *)a2 + 1);
  BOOL v13 = *a1 == *(void *)a2 && v11 == v12;
  if (v13 || (char v14 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)(*a1, v11, *(void *)a2, v12, 0LL) & 1) != 0))
  {
    uint64_t v15 = a1[2];
    uint64_t v16 = a1[3];
    uint64_t v17 = *((void *)a2 + 2);
    uint64_t v18 = *((void *)a2 + 3);
    BOOL v19 = v15 == v17 && v16 == v18;
    if (v19 || (char v14 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)(v15, v16, v17, v18, 0LL) & 1) != 0))
    {
      uint64_t v20 = type metadata accessor for Goldilocks_ZoneID(0LL);
      uint64_t v21 = (char *)a1 + *(int *)(v20 + 24);
      uint64_t v22 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
      v22(v10, v21, v4);
      v22(v8, &a2[*(int *)(v20 + 24)], v4);
      uint64_t v23 = sub_1000BD35C( &qword_100291D78,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
      char v14 = dispatch thunk of static Equatable.== infix(_:_:)(v10, v8, v4, v23);
      uint64_t v24 = *(void (**)(char *, uint64_t))(v5 + 8);
      v24(v8, v4);
      v24(v10, v4);
    }
  }

  return v14 & 1;
}

uint64_t sub_100105260(uint64_t result)
{
  if (result <= 1199)
  {
    if (result > 999)
    {
      if (result == 1000)
      {
        return 2LL;
      }

      else if (result == 1100)
      {
        return 3LL;
      }
    }

    else if (result == -1)
    {
      return 1LL;
    }
  }

  else if (result <= 1399)
  {
    if (result == 1200)
    {
      return 4LL;
    }

    else if (result == 1300)
    {
      return 5LL;
    }
  }

  else
  {
    switch(result)
    {
      case 1400LL:
        return 6LL;
      case 2000LL:
        return 7LL;
      case 3000LL:
        return 8LL;
    }
  }

  return result;
}

  ;
}

uint64_t type metadata accessor for Goldilocks_InitiateExitResponse(uint64_t a1)
{
  return sub_1000BCF80( a1,  (uint64_t *)&unk_100294178,  (uint64_t)&nominal type descriptor for Goldilocks_InitiateExitResponse);
}

uint64_t type metadata accessor for Goldilocks_ErrorInfo.ResultError(uint64_t a1)
{
  return sub_1000BCF80( a1,  (uint64_t *)&unk_100294BC0,  (uint64_t)&nominal type descriptor for Goldilocks_ErrorInfo.ResultError);
}

uint64_t type metadata accessor for Goldilocks_ErrorInfo.DatabaseFailure(uint64_t a1)
{
  return sub_1000BCF80(a1, qword_100294B20, (uint64_t)&nominal type descriptor for Goldilocks_ErrorInfo.DatabaseFailure);
}

uint64_t type metadata accessor for Goldilocks_ParticipantExitResult(uint64_t a1)
{
  return sub_1000BCF80(a1, qword_100294218, (uint64_t)&nominal type descriptor for Goldilocks_ParticipantExitResult);
}

uint64_t type metadata accessor for Goldilocks_CheckDuplicatesResponse(uint64_t a1)
{
  return sub_1000BCF80(a1, qword_100294348, (uint64_t)&nominal type descriptor for Goldilocks_CheckDuplicatesResponse);
}

uint64_t type metadata accessor for Goldilocks_DuplicateState(uint64_t a1)
{
  return sub_1000BCF80(a1, qword_1002943E0, (uint64_t)&nominal type descriptor for Goldilocks_DuplicateState);
}

uint64_t type metadata accessor for Goldilocks_FoundDuplicate(uint64_t a1)
{
  return sub_1000BCF80(a1, qword_100294478, (uint64_t)&nominal type descriptor for Goldilocks_FoundDuplicate);
}

uint64_t type metadata accessor for Goldilocks_ExitMoveBatchResponse(uint64_t a1)
{
  return sub_1000BCF80(a1, qword_100294640, (uint64_t)&nominal type descriptor for Goldilocks_ExitMoveBatchResponse);
}

uint64_t type metadata accessor for Goldilocks_ExitMoveBatchFeedbackItem(uint64_t a1)
{
  return sub_1000BCF80(a1, qword_1002946E8, (uint64_t)&nominal type descriptor for Goldilocks_ExitMoveBatchFeedbackItem);
}

uint64_t type metadata accessor for Goldilocks_ExitMoveBatchErrorFeedbackResponse(uint64_t a1)
{
  return sub_1000BCF80( a1,  qword_100294820,  (uint64_t)&nominal type descriptor for Goldilocks_ExitMoveBatchErrorFeedbackResponse);
}

uint64_t type metadata accessor for Goldilocks_SilentMoverRampingRequest(uint64_t a1)
{
  return sub_1000BCF80(a1, qword_1002948B0, (uint64_t)&nominal type descriptor for Goldilocks_SilentMoverRampingRequest);
}

uint64_t type metadata accessor for Goldilocks_SilentMoverRampingResponse(uint64_t a1)
{
  return sub_1000BCF80( a1,  (uint64_t *)&unk_100294940,  (uint64_t)&nominal type descriptor for Goldilocks_SilentMoverRampingResponse);
}

uint64_t type metadata accessor for Goldilocks_OperationControl(uint64_t a1)
{
  return sub_1000BCF80(a1, qword_1002949E8, (uint64_t)&nominal type descriptor for Goldilocks_OperationControl);
}

  ;
}

unint64_t sub_10010547C(unint64_t result)
{
  uint64_t v1 = 5LL;
  uint64_t v2 = 4LL;
  if (result != 10) {
    uint64_t v2 = result;
  }
  if (result != 11) {
    uint64_t v1 = v2;
  }
  if (result >= 4) {
    return v1;
  }
  return result;
}

unint64_t sub_1001054C0()
{
  unint64_t result = qword_100293CB0;
  if (!qword_100293CB0)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for Goldilocks_ExitStage,  &type metadata for Goldilocks_ExitStage);
    atomic_store(result, (unint64_t *)&qword_100293CB0);
  }

  return result;
}

unint64_t sub_100105504()
{
  unint64_t result = qword_100293CB8;
  if (!qword_100293CB8)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for Goldilocks_ExitSource,  &type metadata for Goldilocks_ExitSource);
    atomic_store(result, (unint64_t *)&qword_100293CB8);
  }

  return result;
}

unint64_t sub_100105548()
{
  unint64_t result = qword_100293CC0;
  if (!qword_100293CC0)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for Goldilocks_RecordRetentionPolicy,  &type metadata for Goldilocks_RecordRetentionPolicy);
    atomic_store(result, (unint64_t *)&qword_100293CC0);
  }

  return result;
}

unint64_t sub_10010558C()
{
  unint64_t result = qword_100293CC8;
  if (!qword_100293CC8)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for Goldilocks_ExitType,  &type metadata for Goldilocks_ExitType);
    atomic_store(result, (unint64_t *)&qword_100293CC8);
  }

  return result;
}

unint64_t sub_1001055D0()
{
  unint64_t result = qword_100293D20;
  if (!qword_100293D20)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for Goldilocks_DuplicateType,  &type metadata for Goldilocks_DuplicateType);
    atomic_store(result, (unint64_t *)&qword_100293D20);
  }

  return result;
}

uint64_t type metadata accessor for Goldilocks_ErrorInfo(uint64_t a1)
{
  return sub_1000BCF80(a1, qword_100294A90, (uint64_t)&nominal type descriptor for Goldilocks_ErrorInfo);
}

unint64_t sub_100105628()
{
  unint64_t result = qword_100293DA0;
  if (!qword_100293DA0)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for Goldilocks_ErrorInfo.ResultErrorCode,  &type metadata for Goldilocks_ErrorInfo.ResultErrorCode);
    atomic_store(result, (unint64_t *)&qword_100293DA0);
  }

  return result;
}

unint64_t sub_10010566C()
{
  unint64_t result = qword_100293DB0;
  if (!qword_100293DB0)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for Goldilocks_ExitStatusFeedbackRequest.ClientStatus,  &type metadata for Goldilocks_ExitStatusFeedbackRequest.ClientStatus);
    atomic_store(result, (unint64_t *)&qword_100293DB0);
  }

  return result;
}

uint64_t type metadata accessor for Goldilocks_ExitStatusFeedbackResponse(uint64_t a1)
{
  return sub_1000BCF80(a1, qword_100294D10, (uint64_t)&nominal type descriptor for Goldilocks_ExitStatusFeedbackResponse);
}

unint64_t sub_1001056C8()
{
  unint64_t result = qword_100293DC8;
  if (!qword_100293DC8)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for Goldilocks_ExitStage,  &type metadata for Goldilocks_ExitStage);
    atomic_store(result, (unint64_t *)&qword_100293DC8);
  }

  return result;
}

unint64_t sub_100105710()
{
  unint64_t result = qword_100293DD0;
  if (!qword_100293DD0)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for Goldilocks_ExitStage,  &type metadata for Goldilocks_ExitStage);
    atomic_store(result, (unint64_t *)&qword_100293DD0);
  }

  return result;
}

unint64_t sub_100105758()
{
  unint64_t result = qword_100293DD8;
  if (!qword_100293DD8)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for Goldilocks_ExitStage,  &type metadata for Goldilocks_ExitStage);
    atomic_store(result, (unint64_t *)&qword_100293DD8);
  }

  return result;
}

uint64_t sub_10010579C()
{
  return sub_1000BDAD8(&qword_100293DE0, &qword_100293DE8);
}

unint64_t sub_1001057C4()
{
  unint64_t result = qword_100293DF0;
  if (!qword_100293DF0)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for Goldilocks_ExitSource,  &type metadata for Goldilocks_ExitSource);
    atomic_store(result, (unint64_t *)&qword_100293DF0);
  }

  return result;
}

unint64_t sub_10010580C()
{
  unint64_t result = qword_100293DF8;
  if (!qword_100293DF8)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for Goldilocks_ExitSource,  &type metadata for Goldilocks_ExitSource);
    atomic_store(result, (unint64_t *)&qword_100293DF8);
  }

  return result;
}

unint64_t sub_100105854()
{
  unint64_t result = qword_100293E00;
  if (!qword_100293E00)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for Goldilocks_ExitSource,  &type metadata for Goldilocks_ExitSource);
    atomic_store(result, (unint64_t *)&qword_100293E00);
  }

  return result;
}

uint64_t sub_100105898()
{
  return sub_1000BDAD8(&qword_100293E08, &qword_100293E10);
}

unint64_t sub_1001058C0()
{
  unint64_t result = qword_100293E18;
  if (!qword_100293E18)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for Goldilocks_ExitType,  &type metadata for Goldilocks_ExitType);
    atomic_store(result, (unint64_t *)&qword_100293E18);
  }

  return result;
}

unint64_t sub_100105908()
{
  unint64_t result = qword_100293E20;
  if (!qword_100293E20)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for Goldilocks_ExitType,  &type metadata for Goldilocks_ExitType);
    atomic_store(result, (unint64_t *)&qword_100293E20);
  }

  return result;
}

unint64_t sub_100105950()
{
  unint64_t result = qword_100293E28;
  if (!qword_100293E28)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for Goldilocks_ExitType,  &type metadata for Goldilocks_ExitType);
    atomic_store(result, (unint64_t *)&qword_100293E28);
  }

  return result;
}

uint64_t sub_100105994()
{
  return sub_1000BDAD8(&qword_100293E30, &qword_100293E38);
}

unint64_t sub_1001059BC()
{
  unint64_t result = qword_100293E40;
  if (!qword_100293E40)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for Goldilocks_RecordRetentionPolicy,  &type metadata for Goldilocks_RecordRetentionPolicy);
    atomic_store(result, (unint64_t *)&qword_100293E40);
  }

  return result;
}

unint64_t sub_100105A04()
{
  unint64_t result = qword_100293E48;
  if (!qword_100293E48)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for Goldilocks_RecordRetentionPolicy,  &type metadata for Goldilocks_RecordRetentionPolicy);
    atomic_store(result, (unint64_t *)&qword_100293E48);
  }

  return result;
}

unint64_t sub_100105A4C()
{
  unint64_t result = qword_100293E50;
  if (!qword_100293E50)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for Goldilocks_RecordRetentionPolicy,  &type metadata for Goldilocks_RecordRetentionPolicy);
    atomic_store(result, (unint64_t *)&qword_100293E50);
  }

  return result;
}

uint64_t sub_100105A90()
{
  return sub_1000BDAD8(&qword_100293E58, &qword_100293E60);
}

unint64_t sub_100105AB8()
{
  unint64_t result = qword_100293E68;
  if (!qword_100293E68)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for Goldilocks_DuplicateType,  &type metadata for Goldilocks_DuplicateType);
    atomic_store(result, (unint64_t *)&qword_100293E68);
  }

  return result;
}

unint64_t sub_100105B00()
{
  unint64_t result = qword_100293E70;
  if (!qword_100293E70)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for Goldilocks_DuplicateType,  &type metadata for Goldilocks_DuplicateType);
    atomic_store(result, (unint64_t *)&qword_100293E70);
  }

  return result;
}

unint64_t sub_100105B48()
{
  unint64_t result = qword_100293E78;
  if (!qword_100293E78)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for Goldilocks_DuplicateType,  &type metadata for Goldilocks_DuplicateType);
    atomic_store(result, (unint64_t *)&qword_100293E78);
  }

  return result;
}

uint64_t sub_100105B8C()
{
  return sub_1000BDAD8(&qword_100293E80, &qword_100293E88);
}

unint64_t sub_100105BB4()
{
  unint64_t result = qword_100293E90;
  if (!qword_100293E90)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for Goldilocks_ErrorInfo.ResultErrorCode,  &type metadata for Goldilocks_ErrorInfo.ResultErrorCode);
    atomic_store(result, (unint64_t *)&qword_100293E90);
  }

  return result;
}

unint64_t sub_100105BFC()
{
  unint64_t result = qword_100293E98;
  if (!qword_100293E98)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for Goldilocks_ErrorInfo.ResultErrorCode,  &type metadata for Goldilocks_ErrorInfo.ResultErrorCode);
    atomic_store(result, (unint64_t *)&qword_100293E98);
  }

  return result;
}

unint64_t sub_100105C44()
{
  unint64_t result = qword_100293EA0;
  if (!qword_100293EA0)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for Goldilocks_ErrorInfo.ResultErrorCode,  &type metadata for Goldilocks_ErrorInfo.ResultErrorCode);
    atomic_store(result, (unint64_t *)&qword_100293EA0);
  }

  return result;
}

uint64_t sub_100105C88()
{
  return sub_1000BDAD8(&qword_100293EA8, &qword_100293EB0);
}

unint64_t sub_100105CB0()
{
  unint64_t result = qword_100293EB8;
  if (!qword_100293EB8)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for Goldilocks_ExitStatusFeedbackRequest.ClientStatus,  &type metadata for Goldilocks_ExitStatusFeedbackRequest.ClientStatus);
    atomic_store(result, (unint64_t *)&qword_100293EB8);
  }

  return result;
}

unint64_t sub_100105CF8()
{
  unint64_t result = qword_100293EC0;
  if (!qword_100293EC0)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for Goldilocks_ExitStatusFeedbackRequest.ClientStatus,  &type metadata for Goldilocks_ExitStatusFeedbackRequest.ClientStatus);
    atomic_store(result, (unint64_t *)&qword_100293EC0);
  }

  return result;
}

unint64_t sub_100105D40()
{
  unint64_t result = qword_100293EC8;
  if (!qword_100293EC8)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for Goldilocks_ExitStatusFeedbackRequest.ClientStatus,  &type metadata for Goldilocks_ExitStatusFeedbackRequest.ClientStatus);
    atomic_store(result, (unint64_t *)&qword_100293EC8);
  }

  return result;
}

uint64_t sub_100105D84()
{
  return sub_1000BDAD8(&qword_100293ED0, &qword_100293ED8);
}

uint64_t sub_100105DA8()
{
  return sub_1000BD35C( &qword_100293EE0,  type metadata accessor for Goldilocks_InitiateExitRequest,  (uint64_t)&protocol conformance descriptor for Goldilocks_InitiateExitRequest);
}

uint64_t sub_100105DD4()
{
  return sub_1000BD35C( &qword_100293A90,  type metadata accessor for Goldilocks_InitiateExitRequest,  (uint64_t)&protocol conformance descriptor for Goldilocks_InitiateExitRequest);
}

uint64_t sub_100105E00()
{
  return sub_1000BD35C( &qword_100293CD8,  type metadata accessor for Goldilocks_InitiateExitRequest,  (uint64_t)&protocol conformance descriptor for Goldilocks_InitiateExitRequest);
}

uint64_t sub_100105E2C()
{
  return sub_1000BD35C( &qword_100293EE8,  type metadata accessor for Goldilocks_InitiateExitRequest,  (uint64_t)&protocol conformance descriptor for Goldilocks_InitiateExitRequest);
}

uint64_t sub_100105E58()
{
  return sub_1000BD35C( &qword_100293EF0,  type metadata accessor for Goldilocks_InitiateExitResponse,  (uint64_t)&protocol conformance descriptor for Goldilocks_InitiateExitResponse);
}

uint64_t sub_100105E84()
{
  return sub_1000BD35C( &qword_100293EF8,  type metadata accessor for Goldilocks_InitiateExitResponse,  (uint64_t)&protocol conformance descriptor for Goldilocks_InitiateExitResponse);
}

uint64_t sub_100105EB0()
{
  return sub_1000BD35C( &qword_100293CE8,  type metadata accessor for Goldilocks_InitiateExitResponse,  (uint64_t)&protocol conformance descriptor for Goldilocks_InitiateExitResponse);
}

uint64_t sub_100105EDC()
{
  return sub_1000BD35C( &qword_100293F00,  type metadata accessor for Goldilocks_InitiateExitResponse,  (uint64_t)&protocol conformance descriptor for Goldilocks_InitiateExitResponse);
}

uint64_t sub_100105F08()
{
  return sub_1000BD35C( &qword_100293F08,  type metadata accessor for Goldilocks_ParticipantExitResult,  (uint64_t)&protocol conformance descriptor for Goldilocks_ParticipantExitResult);
}

uint64_t sub_100105F34()
{
  return sub_1000BD35C( &qword_100293CE0,  type metadata accessor for Goldilocks_ParticipantExitResult,  (uint64_t)&protocol conformance descriptor for Goldilocks_ParticipantExitResult);
}

uint64_t sub_100105F60()
{
  return sub_1000BD35C( &qword_100293CF0,  type metadata accessor for Goldilocks_ParticipantExitResult,  (uint64_t)&protocol conformance descriptor for Goldilocks_ParticipantExitResult);
}

uint64_t sub_100105F8C()
{
  return sub_1000BD35C( &qword_100293F10,  type metadata accessor for Goldilocks_ParticipantExitResult,  (uint64_t)&protocol conformance descriptor for Goldilocks_ParticipantExitResult);
}

uint64_t sub_100105FB8()
{
  return sub_1000BD35C( &qword_100293F18,  type metadata accessor for Goldilocks_CheckDuplicatesRequest,  (uint64_t)&protocol conformance descriptor for Goldilocks_CheckDuplicatesRequest);
}

uint64_t sub_100105FE4()
{
  return sub_1000BD35C( &qword_100293A98,  type metadata accessor for Goldilocks_CheckDuplicatesRequest,  (uint64_t)&protocol conformance descriptor for Goldilocks_CheckDuplicatesRequest);
}

uint64_t sub_100106010()
{
  return sub_1000BD35C( &qword_100293CF8,  type metadata accessor for Goldilocks_CheckDuplicatesRequest,  (uint64_t)&protocol conformance descriptor for Goldilocks_CheckDuplicatesRequest);
}

uint64_t sub_10010603C()
{
  return sub_1000BD35C( &qword_100293F20,  type metadata accessor for Goldilocks_CheckDuplicatesRequest,  (uint64_t)&protocol conformance descriptor for Goldilocks_CheckDuplicatesRequest);
}

uint64_t sub_100106068()
{
  return sub_1000BD35C( &qword_100293F28,  type metadata accessor for Goldilocks_CheckDuplicatesResponse,  (uint64_t)&protocol conformance descriptor for Goldilocks_CheckDuplicatesResponse);
}

uint64_t sub_100106094()
{
  return sub_1000BD35C( &qword_100293F30,  type metadata accessor for Goldilocks_CheckDuplicatesResponse,  (uint64_t)&protocol conformance descriptor for Goldilocks_CheckDuplicatesResponse);
}

uint64_t sub_1001060C0()
{
  return sub_1000BD35C( &qword_100293D08,  type metadata accessor for Goldilocks_CheckDuplicatesResponse,  (uint64_t)&protocol conformance descriptor for Goldilocks_CheckDuplicatesResponse);
}

uint64_t sub_1001060EC()
{
  return sub_1000BD35C( &qword_100293F38,  type metadata accessor for Goldilocks_CheckDuplicatesResponse,  (uint64_t)&protocol conformance descriptor for Goldilocks_CheckDuplicatesResponse);
}

uint64_t sub_100106118()
{
  return sub_1000BD35C( &qword_100293F40,  type metadata accessor for Goldilocks_DuplicateState,  (uint64_t)&protocol conformance descriptor for Goldilocks_DuplicateState);
}

uint64_t sub_100106144()
{
  return sub_1000BD35C( &qword_100293D00,  type metadata accessor for Goldilocks_DuplicateState,  (uint64_t)&protocol conformance descriptor for Goldilocks_DuplicateState);
}

uint64_t sub_100106170()
{
  return sub_1000BD35C( &qword_100293D18,  type metadata accessor for Goldilocks_DuplicateState,  (uint64_t)&protocol conformance descriptor for Goldilocks_DuplicateState);
}

uint64_t sub_10010619C()
{
  return sub_1000BD35C( &qword_100293F48,  type metadata accessor for Goldilocks_DuplicateState,  (uint64_t)&protocol conformance descriptor for Goldilocks_DuplicateState);
}

uint64_t sub_1001061C8()
{
  return sub_1000BD35C( &qword_100293F50,  type metadata accessor for Goldilocks_FoundDuplicate,  (uint64_t)&protocol conformance descriptor for Goldilocks_FoundDuplicate);
}

uint64_t sub_1001061F4()
{
  return sub_1000BD35C( &qword_100293D10,  type metadata accessor for Goldilocks_FoundDuplicate,  (uint64_t)&protocol conformance descriptor for Goldilocks_FoundDuplicate);
}

uint64_t sub_100106220()
{
  return sub_1000BD35C( &qword_100293D28,  type metadata accessor for Goldilocks_FoundDuplicate,  (uint64_t)&protocol conformance descriptor for Goldilocks_FoundDuplicate);
}

uint64_t sub_10010624C()
{
  return sub_1000BD35C( &qword_100293F58,  type metadata accessor for Goldilocks_FoundDuplicate,  (uint64_t)&protocol conformance descriptor for Goldilocks_FoundDuplicate);
}

uint64_t sub_100106278()
{
  return sub_1000BD35C( &qword_100293F60,  type metadata accessor for Goldilocks_ZoneID,  (uint64_t)&protocol conformance descriptor for Goldilocks_ZoneID);
}

uint64_t sub_1001062A4()
{
  return sub_1000BD35C( &qword_100293CD0,  type metadata accessor for Goldilocks_ZoneID,  (uint64_t)&protocol conformance descriptor for Goldilocks_ZoneID);
}

uint64_t sub_1001062D0()
{
  return sub_1000BD35C( &qword_100293D30,  type metadata accessor for Goldilocks_ZoneID,  (uint64_t)&protocol conformance descriptor for Goldilocks_ZoneID);
}

uint64_t sub_1001062FC()
{
  return sub_1000BD35C( &qword_100293F68,  type metadata accessor for Goldilocks_ZoneID,  (uint64_t)&protocol conformance descriptor for Goldilocks_ZoneID);
}

uint64_t sub_100106328()
{
  return sub_1000BD35C( &qword_100293F70,  type metadata accessor for Goldilocks_ExitMoveBatchRequest,  (uint64_t)&protocol conformance descriptor for Goldilocks_ExitMoveBatchRequest);
}

uint64_t sub_100106354()
{
  return sub_1000BD35C( &qword_1002950C0,  type metadata accessor for Goldilocks_ExitMoveBatchRequest,  (uint64_t)&protocol conformance descriptor for Goldilocks_ExitMoveBatchRequest);
}

uint64_t sub_100106380()
{
  return sub_1000BD35C( &qword_100293D38,  type metadata accessor for Goldilocks_ExitMoveBatchRequest,  (uint64_t)&protocol conformance descriptor for Goldilocks_ExitMoveBatchRequest);
}

uint64_t sub_1001063AC()
{
  return sub_1000BD35C( &qword_100293F78,  type metadata accessor for Goldilocks_ExitMoveBatchRequest,  (uint64_t)&protocol conformance descriptor for Goldilocks_ExitMoveBatchRequest);
}

uint64_t sub_1001063D8()
{
  return sub_1000BD35C( &qword_100293F80,  type metadata accessor for Goldilocks_ExitMoveBatchResponse,  (uint64_t)&protocol conformance descriptor for Goldilocks_ExitMoveBatchResponse);
}

uint64_t sub_100106404()
{
  return sub_1000BD35C( &qword_100293F88,  type metadata accessor for Goldilocks_ExitMoveBatchResponse,  (uint64_t)&protocol conformance descriptor for Goldilocks_ExitMoveBatchResponse);
}

uint64_t sub_100106430()
{
  return sub_1000BD35C( &qword_100293D40,  type metadata accessor for Goldilocks_ExitMoveBatchResponse,  (uint64_t)&protocol conformance descriptor for Goldilocks_ExitMoveBatchResponse);
}

uint64_t sub_10010645C()
{
  return sub_1000BD35C( &qword_100293F90,  type metadata accessor for Goldilocks_ExitMoveBatchResponse,  (uint64_t)&protocol conformance descriptor for Goldilocks_ExitMoveBatchResponse);
}

uint64_t sub_100106488()
{
  return sub_1000BD35C( &qword_100293F98,  type metadata accessor for Goldilocks_ExitMoveBatchFeedbackItem,  (uint64_t)&protocol conformance descriptor for Goldilocks_ExitMoveBatchFeedbackItem);
}

uint64_t sub_1001064B4()
{
  return sub_1000BD35C( &qword_100293D50,  type metadata accessor for Goldilocks_ExitMoveBatchFeedbackItem,  (uint64_t)&protocol conformance descriptor for Goldilocks_ExitMoveBatchFeedbackItem);
}

uint64_t sub_1001064E0()
{
  return sub_1000BD35C( &qword_100293D48,  type metadata accessor for Goldilocks_ExitMoveBatchFeedbackItem,  (uint64_t)&protocol conformance descriptor for Goldilocks_ExitMoveBatchFeedbackItem);
}

uint64_t sub_10010650C()
{
  return sub_1000BD35C( &qword_100293FA0,  type metadata accessor for Goldilocks_ExitMoveBatchFeedbackItem,  (uint64_t)&protocol conformance descriptor for Goldilocks_ExitMoveBatchFeedbackItem);
}

uint64_t sub_100106538()
{
  return sub_1000BD35C( &qword_100293FA8,  type metadata accessor for Goldilocks_ExitMoveBatchErrorFeedbackRequest,  (uint64_t)&protocol conformance descriptor for Goldilocks_ExitMoveBatchErrorFeedbackRequest);
}

uint64_t sub_100106564()
{
  return sub_1000BD35C( &qword_100293AA8,  type metadata accessor for Goldilocks_ExitMoveBatchErrorFeedbackRequest,  (uint64_t)&protocol conformance descriptor for Goldilocks_ExitMoveBatchErrorFeedbackRequest);
}

uint64_t sub_100106590()
{
  return sub_1000BD35C( &qword_100293D58,  type metadata accessor for Goldilocks_ExitMoveBatchErrorFeedbackRequest,  (uint64_t)&protocol conformance descriptor for Goldilocks_ExitMoveBatchErrorFeedbackRequest);
}

uint64_t sub_1001065BC()
{
  return sub_1000BD35C( &qword_100293FB0,  type metadata accessor for Goldilocks_ExitMoveBatchErrorFeedbackRequest,  (uint64_t)&protocol conformance descriptor for Goldilocks_ExitMoveBatchErrorFeedbackRequest);
}

uint64_t sub_1001065E8()
{
  return sub_1000BD35C( &qword_100293FB8,  type metadata accessor for Goldilocks_ExitMoveBatchErrorFeedbackResponse,  (uint64_t)&protocol conformance descriptor for Goldilocks_ExitMoveBatchErrorFeedbackResponse);
}

uint64_t sub_100106614()
{
  return sub_1000BD35C( &qword_100293FC0,  type metadata accessor for Goldilocks_ExitMoveBatchErrorFeedbackResponse,  (uint64_t)&protocol conformance descriptor for Goldilocks_ExitMoveBatchErrorFeedbackResponse);
}

uint64_t sub_100106640()
{
  return sub_1000BD35C( &qword_100293D60,  type metadata accessor for Goldilocks_ExitMoveBatchErrorFeedbackResponse,  (uint64_t)&protocol conformance descriptor for Goldilocks_ExitMoveBatchErrorFeedbackResponse);
}

uint64_t sub_10010666C()
{
  return sub_1000BD35C( &qword_100293FC8,  type metadata accessor for Goldilocks_ExitMoveBatchErrorFeedbackResponse,  (uint64_t)&protocol conformance descriptor for Goldilocks_ExitMoveBatchErrorFeedbackResponse);
}

uint64_t sub_100106698()
{
  return sub_1000BD35C( &qword_100293FD0,  type metadata accessor for Goldilocks_SilentMoverRampingRequest,  (uint64_t)&protocol conformance descriptor for Goldilocks_SilentMoverRampingRequest);
}

uint64_t sub_1001066C4()
{
  return sub_1000BD35C( &qword_100293AA0,  type metadata accessor for Goldilocks_SilentMoverRampingRequest,  (uint64_t)&protocol conformance descriptor for Goldilocks_SilentMoverRampingRequest);
}

uint64_t sub_1001066F0()
{
  return sub_1000BD35C( &qword_100293D68,  type metadata accessor for Goldilocks_SilentMoverRampingRequest,  (uint64_t)&protocol conformance descriptor for Goldilocks_SilentMoverRampingRequest);
}

uint64_t sub_10010671C()
{
  return sub_1000BD35C( &qword_100293FD8,  type metadata accessor for Goldilocks_SilentMoverRampingRequest,  (uint64_t)&protocol conformance descriptor for Goldilocks_SilentMoverRampingRequest);
}

uint64_t sub_100106748()
{
  return sub_1000BD35C( &qword_100293FE0,  type metadata accessor for Goldilocks_SilentMoverRampingResponse,  (uint64_t)&protocol conformance descriptor for Goldilocks_SilentMoverRampingResponse);
}

uint64_t sub_100106774()
{
  return sub_1000BD35C( &qword_100293FE8,  type metadata accessor for Goldilocks_SilentMoverRampingResponse,  (uint64_t)&protocol conformance descriptor for Goldilocks_SilentMoverRampingResponse);
}

uint64_t sub_1001067A0()
{
  return sub_1000BD35C( &qword_100293D78,  type metadata accessor for Goldilocks_SilentMoverRampingResponse,  (uint64_t)&protocol conformance descriptor for Goldilocks_SilentMoverRampingResponse);
}

uint64_t sub_1001067CC()
{
  return sub_1000BD35C( &qword_100293FF0,  type metadata accessor for Goldilocks_SilentMoverRampingResponse,  (uint64_t)&protocol conformance descriptor for Goldilocks_SilentMoverRampingResponse);
}

uint64_t sub_1001067F8()
{
  return sub_1000BD35C( &qword_100293FF8,  type metadata accessor for Goldilocks_OperationControl,  (uint64_t)&protocol conformance descriptor for Goldilocks_OperationControl);
}

uint64_t sub_100106824()
{
  return sub_1000BD35C( &qword_100293D70,  type metadata accessor for Goldilocks_OperationControl,  (uint64_t)&protocol conformance descriptor for Goldilocks_OperationControl);
}

uint64_t sub_100106850()
{
  return sub_1000BD35C( &qword_100293D80,  type metadata accessor for Goldilocks_OperationControl,  (uint64_t)&protocol conformance descriptor for Goldilocks_OperationControl);
}

uint64_t sub_10010687C()
{
  return sub_1000BD35C( &qword_100294000,  type metadata accessor for Goldilocks_OperationControl,  (uint64_t)&protocol conformance descriptor for Goldilocks_OperationControl);
}

uint64_t sub_1001068A8()
{
  return sub_1000BD35C( &qword_100294008,  type metadata accessor for Goldilocks_ErrorInfo,  (uint64_t)&protocol conformance descriptor for Goldilocks_ErrorInfo);
}

uint64_t sub_1001068D4()
{
  return sub_1000BD35C( &qword_100294010,  type metadata accessor for Goldilocks_ErrorInfo,  (uint64_t)&protocol conformance descriptor for Goldilocks_ErrorInfo);
}

uint64_t sub_100106900()
{
  return sub_1000BD35C( &qword_100293D88,  type metadata accessor for Goldilocks_ErrorInfo,  (uint64_t)&protocol conformance descriptor for Goldilocks_ErrorInfo);
}

uint64_t sub_10010692C()
{
  return sub_1000BD35C( &qword_100294018,  type metadata accessor for Goldilocks_ErrorInfo,  (uint64_t)&protocol conformance descriptor for Goldilocks_ErrorInfo);
}

uint64_t sub_100106958()
{
  return sub_1000BD35C( &qword_100294020,  type metadata accessor for Goldilocks_ErrorInfo.DatabaseFailure,  (uint64_t)&protocol conformance descriptor for Goldilocks_ErrorInfo.DatabaseFailure);
}

uint64_t sub_100106984()
{
  return sub_1000BD35C( &qword_100293D98,  type metadata accessor for Goldilocks_ErrorInfo.DatabaseFailure,  (uint64_t)&protocol conformance descriptor for Goldilocks_ErrorInfo.DatabaseFailure);
}

uint64_t sub_1001069B0()
{
  return sub_1000BD35C( &qword_100293D90,  type metadata accessor for Goldilocks_ErrorInfo.DatabaseFailure,  (uint64_t)&protocol conformance descriptor for Goldilocks_ErrorInfo.DatabaseFailure);
}

uint64_t sub_1001069DC()
{
  return sub_1000BD35C( &qword_100294028,  type metadata accessor for Goldilocks_ErrorInfo.DatabaseFailure,  (uint64_t)&protocol conformance descriptor for Goldilocks_ErrorInfo.DatabaseFailure);
}

uint64_t sub_100106A08()
{
  return sub_1000BD35C( &qword_100294030,  type metadata accessor for Goldilocks_ErrorInfo.ResultError,  (uint64_t)&protocol conformance descriptor for Goldilocks_ErrorInfo.ResultError);
}

uint64_t sub_100106A34()
{
  return sub_1000BD35C( &qword_100295070,  type metadata accessor for Goldilocks_ErrorInfo.ResultError,  (uint64_t)&protocol conformance descriptor for Goldilocks_ErrorInfo.ResultError);
}

uint64_t sub_100106A60()
{
  return sub_1000BD35C( &qword_100293DA8,  type metadata accessor for Goldilocks_ErrorInfo.ResultError,  (uint64_t)&protocol conformance descriptor for Goldilocks_ErrorInfo.ResultError);
}

uint64_t sub_100106A8C()
{
  return sub_1000BD35C( &qword_100294038,  type metadata accessor for Goldilocks_ErrorInfo.ResultError,  (uint64_t)&protocol conformance descriptor for Goldilocks_ErrorInfo.ResultError);
}

uint64_t sub_100106AB8()
{
  return sub_1000BD35C( &qword_100294040,  type metadata accessor for Goldilocks_ExitStatusFeedbackRequest,  (uint64_t)&protocol conformance descriptor for Goldilocks_ExitStatusFeedbackRequest);
}

uint64_t sub_100106AE4()
{
  return sub_1000BD35C( &qword_100293AB0,  type metadata accessor for Goldilocks_ExitStatusFeedbackRequest,  (uint64_t)&protocol conformance descriptor for Goldilocks_ExitStatusFeedbackRequest);
}

uint64_t sub_100106B10()
{
  return sub_1000BD35C( &qword_100293DB8,  type metadata accessor for Goldilocks_ExitStatusFeedbackRequest,  (uint64_t)&protocol conformance descriptor for Goldilocks_ExitStatusFeedbackRequest);
}

uint64_t sub_100106B3C()
{
  return sub_1000BD35C( &qword_100294048,  type metadata accessor for Goldilocks_ExitStatusFeedbackRequest,  (uint64_t)&protocol conformance descriptor for Goldilocks_ExitStatusFeedbackRequest);
}

uint64_t sub_100106B68()
{
  return sub_1000BD35C( &qword_100294050,  type metadata accessor for Goldilocks_ExitStatusFeedbackResponse,  (uint64_t)&protocol conformance descriptor for Goldilocks_ExitStatusFeedbackResponse);
}

uint64_t sub_100106B94()
{
  return sub_1000BD35C( &qword_100294058,  type metadata accessor for Goldilocks_ExitStatusFeedbackResponse,  (uint64_t)&protocol conformance descriptor for Goldilocks_ExitStatusFeedbackResponse);
}

uint64_t sub_100106BC0()
{
  return sub_1000BD35C( &qword_100293DC0,  type metadata accessor for Goldilocks_ExitStatusFeedbackResponse,  (uint64_t)&protocol conformance descriptor for Goldilocks_ExitStatusFeedbackResponse);
}

uint64_t sub_100106BEC()
{
  return sub_1000BD35C( &qword_100294060,  type metadata accessor for Goldilocks_ExitStatusFeedbackResponse,  (uint64_t)&protocol conformance descriptor for Goldilocks_ExitStatusFeedbackResponse);
}

ValueMetadata *type metadata accessor for Goldilocks_ExitStage()
{
  return &type metadata for Goldilocks_ExitStage;
}

ValueMetadata *type metadata accessor for Goldilocks_ExitSource()
{
  return &type metadata for Goldilocks_ExitSource;
}

ValueMetadata *type metadata accessor for Goldilocks_ExitType()
{
  return &type metadata for Goldilocks_ExitType;
}

ValueMetadata *type metadata accessor for Goldilocks_RecordRetentionPolicy()
{
  return &type metadata for Goldilocks_RecordRetentionPolicy;
}

ValueMetadata *type metadata accessor for Goldilocks_DuplicateType()
{
  return &type metadata for Goldilocks_DuplicateType;
}

void *initializeBufferWithCopyOfBuffer for Goldilocks_InitiateExitRequest( uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = (void *)a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v22 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (void *)(v22 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v22);
  }

  else
  {
    uint64_t v7 = a2[1];
    *(void *)a1 = *a2;
    *(void *)(a1 + 8) = v7;
    *(void *)(a1 + 16) = a2[2];
    *(_BYTE *)(a1 + 24) = *((_BYTE *)a2 + 24);
    *(void *)(a1 + 32) = a2[4];
    *(_BYTE *)(a1 + 40) = *((_BYTE *)a2 + 40);
    uint64_t v8 = a2[6];
    uint64_t v9 = a2[7];
    *(_BYTE *)(a1 + 80) = *((_BYTE *)a2 + 80);
    uint64_t v10 = a2[9];
    *(void *)(a1 + 64) = a2[8];
    *(void *)(a1 + 72) = v10;
    *(_BYTE *)(a1 + 96) = *((_BYTE *)a2 + 96);
    *(void *)(a1 + 88) = a2[11];
    uint64_t v11 = *(int *)(a3 + 48);
    uint64_t v12 = a1 + v11;
    uint64_t v13 = (uint64_t)a2 + v11;
    *(void *)(a1 + 48) = v8;
    *(void *)(a1 + 56) = v9;
    uint64_t v14 = type metadata accessor for UnknownStorage(0LL);
    uint64_t v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 16LL);
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v9);
    v15(v12, v13, v14);
    uint64_t v16 = *(int *)(a3 + 52);
    uint64_t v17 = (void *)((char *)v4 + v16);
    uint64_t v18 = (uint64_t *)((char *)a2 + v16);
    uint64_t v19 = type metadata accessor for Goldilocks_ZoneID(0LL);
    uint64_t v20 = *(void *)(v19 - 8);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v20 + 48))(v18, 1LL, v19))
    {
      uint64_t v21 = sub_1000BED3C(&qword_100295030);
      memcpy(v17, v18, *(void *)(*(void *)(v21 - 8) + 64LL));
    }

    else
    {
      uint64_t v23 = v18[1];
      *uint64_t v17 = *v18;
      v17[1] = v23;
      uint64_t v24 = v18[3];
      v17[2] = v18[2];
      v17[3] = v24;
      uint64_t v25 = *(int *)(v19 + 24);
      uint64_t v26 = (char *)v17 + v25;
      uint64_t v27 = (char *)v18 + v25;
      swift_bridgeObjectRetain(v23);
      swift_bridgeObjectRetain(v24);
      v15((uint64_t)v26, (uint64_t)v27, v14);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v20 + 56))(v17, 0LL, 1LL, v19);
    }
  }

  return v4;
}

uint64_t destroy for Goldilocks_InitiateExitRequest(void *a1, uint64_t a2)
{
  uint64_t v4 = (char *)a1 + *(int *)(a2 + 48);
  uint64_t v5 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v9 = *(void (**)(char *, uint64_t))(*(void *)(v5 - 8) + 8LL);
  v9(v4, v5);
  uint64_t v6 = (char *)a1 + *(int *)(a2 + 52);
  uint64_t v7 = type metadata accessor for Goldilocks_ZoneID(0LL);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48LL))(v6, 1LL, v7);
  if (!(_DWORD)result)
  {
    swift_bridgeObjectRelease(*((void *)v6 + 1));
    swift_bridgeObjectRelease(*((void *)v6 + 3));
    return ((uint64_t (*)(char *, uint64_t))v9)(&v6[*(int *)(v7 + 24)], v5);
  }

  return result;
}

uint64_t initializeWithCopy for Goldilocks_InitiateExitRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  uint64_t v7 = *(void *)(a2 + 48);
  uint64_t v8 = *(void *)(a2 + 56);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  uint64_t v9 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v9;
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  uint64_t v10 = *(int *)(a3 + 48);
  uint64_t v11 = a1 + v10;
  uint64_t v12 = a2 + v10;
  *(void *)(a1 + 48) = v7;
  *(void *)(a1 + 56) = v8;
  uint64_t v13 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 16LL);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  v14(v11, v12, v13);
  uint64_t v15 = *(int *)(a3 + 52);
  uint64_t v16 = (void *)(a1 + v15);
  uint64_t v17 = (void *)(a2 + v15);
  uint64_t v18 = type metadata accessor for Goldilocks_ZoneID(0LL);
  uint64_t v19 = *(void *)(v18 - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v19 + 48))(v17, 1LL, v18))
  {
    uint64_t v20 = sub_1000BED3C(&qword_100295030);
    memcpy(v16, v17, *(void *)(*(void *)(v20 - 8) + 64LL));
  }

  else
  {
    uint64_t v21 = v17[1];
    *uint64_t v16 = *v17;
    v16[1] = v21;
    uint64_t v22 = v17[3];
    v16[2] = v17[2];
    v16[3] = v22;
    uint64_t v23 = *(int *)(v18 + 24);
    uint64_t v24 = (char *)v16 + v23;
    uint64_t v25 = (char *)v17 + v23;
    swift_bridgeObjectRetain(v21);
    swift_bridgeObjectRetain(v22);
    v14((uint64_t)v24, (uint64_t)v25, v13);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v19 + 56))(v16, 0LL, 1LL, v18);
  }

  return a1;
}

uint64_t assignWithCopy for Goldilocks_InitiateExitRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v6 = *(void *)(a2 + 8);
  uint64_t v7 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = *(void *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(void *)(a1 + 16) = v8;
  LOBYTE(v8) = *(_BYTE *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = v8;
  uint64_t v9 = *(void *)(a2 + 48);
  uint64_t v10 = *(void *)(a1 + 48);
  *(void *)(a1 + 48) = v9;
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRelease(v10);
  uint64_t v11 = *(void *)(a2 + 56);
  uint64_t v12 = *(void *)(a1 + 56);
  *(void *)(a1 + 56) = v11;
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRelease(v12);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  uint64_t v13 = *(void *)(a2 + 72);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  *(void *)(a1 + 72) = v13;
  uint64_t v14 = *(void *)(a2 + 88);
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  *(void *)(a1 + 88) = v14;
  uint64_t v15 = *(int *)(a3 + 48);
  uint64_t v16 = a1 + v15;
  uint64_t v17 = a2 + v15;
  uint64_t v18 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v20 = *(void (**)(uint64_t, uint64_t, uint64_t))(v19 + 24);
  v20(v16, v17, v18);
  uint64_t v21 = *(int *)(a3 + 52);
  uint64_t v22 = (void *)(a1 + v21);
  uint64_t v23 = (void *)(a2 + v21);
  uint64_t v24 = type metadata accessor for Goldilocks_ZoneID(0LL);
  uint64_t v25 = *(void *)(v24 - 8);
  uint64_t v26 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v25 + 48);
  LODWORD(v17) = v26(v22, 1LL, v24);
  int v27 = v26(v23, 1LL, v24);
  if (!(_DWORD)v17)
  {
    if (!v27)
    {
      *uint64_t v22 = *v23;
      uint64_t v36 = v23[1];
      uint64_t v37 = v22[1];
      v22[1] = v36;
      swift_bridgeObjectRetain(v36);
      swift_bridgeObjectRelease(v37);
      v22[2] = v23[2];
      uint64_t v38 = v23[3];
      uint64_t v39 = v22[3];
      v22[3] = v38;
      swift_bridgeObjectRetain(v38);
      swift_bridgeObjectRelease(v39);
      v20((uint64_t)v22 + *(int *)(v24 + 24), (uint64_t)v23 + *(int *)(v24 + 24), v18);
      return a1;
    }

    sub_1000CECE0((uint64_t)v22, type metadata accessor for Goldilocks_ZoneID);
    goto LABEL_6;
  }

  if (v27)
  {
LABEL_6:
    uint64_t v34 = sub_1000BED3C(&qword_100295030);
    memcpy(v22, v23, *(void *)(*(void *)(v34 - 8) + 64LL));
    return a1;
  }

  *uint64_t v22 = *v23;
  uint64_t v28 = v23[1];
  v22[1] = v28;
  v22[2] = v23[2];
  uint64_t v29 = v23[3];
  v22[3] = v29;
  uint64_t v30 = *(int *)(v24 + 24);
  uint64_t v31 = (char *)v22 + v30;
  char v32 = (char *)v23 + v30;
  uint64_t v33 = *(void (**)(char *, char *, uint64_t))(v19 + 16);
  swift_bridgeObjectRetain(v28);
  swift_bridgeObjectRetain(v29);
  v33(v31, v32, v18);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v25 + 56))(v22, 0LL, 1LL, v24);
  return a1;
}

uint64_t initializeWithTake for Goldilocks_InitiateExitRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  __int128 v6 = *(_OWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  uint64_t v7 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v7;
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  uint64_t v8 = *(int *)(a3 + 48);
  uint64_t v9 = (char *)(a1 + v8);
  uint64_t v10 = (char *)(a2 + v8);
  *(_OWORD *)(a1 + 48) = v6;
  uint64_t v11 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 32LL);
  v12(v9, v10, v11);
  uint64_t v13 = *(int *)(a3 + 52);
  uint64_t v14 = (_OWORD *)(a1 + v13);
  uint64_t v15 = (_OWORD *)(a2 + v13);
  uint64_t v16 = type metadata accessor for Goldilocks_ZoneID(0LL);
  uint64_t v17 = *(void *)(v16 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v17 + 48))(v15, 1LL, v16))
  {
    uint64_t v18 = sub_1000BED3C(&qword_100295030);
    memcpy(v14, v15, *(void *)(*(void *)(v18 - 8) + 64LL));
  }

  else
  {
    __int128 v19 = v15[1];
    _OWORD *v14 = *v15;
    v14[1] = v19;
    v12((char *)v14 + *(int *)(v16 + 24), (char *)v15 + *(int *)(v16 + 24), v11);
    (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v17 + 56))(v14, 0LL, 1LL, v16);
  }

  return a1;
}

uint64_t assignWithTake for Goldilocks_InitiateExitRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  uint64_t v7 = *(void *)(a1 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  swift_bridgeObjectRelease(v7);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  uint64_t v8 = *(void *)(a1 + 48);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRelease(v8);
  uint64_t v9 = *(void *)(a1 + 56);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRelease(v9);
  uint64_t v10 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v10;
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  uint64_t v11 = *(int *)(a3 + 48);
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  uint64_t v14 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 40);
  v16(v12, v13, v14);
  uint64_t v17 = *(int *)(a3 + 52);
  uint64_t v18 = (void *)(a1 + v17);
  __int128 v19 = (void *)(a2 + v17);
  uint64_t v20 = type metadata accessor for Goldilocks_ZoneID(0LL);
  uint64_t v21 = *(void *)(v20 - 8);
  uint64_t v22 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v21 + 48);
  LODWORD(v13) = v22(v18, 1LL, v20);
  int v23 = v22(v19, 1LL, v20);
  if (!(_DWORD)v13)
  {
    if (!v23)
    {
      uint64_t v27 = v19[1];
      uint64_t v28 = v18[1];
      void *v18 = *v19;
      v18[1] = v27;
      swift_bridgeObjectRelease(v28);
      uint64_t v29 = v19[3];
      uint64_t v30 = v18[3];
      v18[2] = v19[2];
      v18[3] = v29;
      swift_bridgeObjectRelease(v30);
      v16((uint64_t)v18 + *(int *)(v20 + 24), (uint64_t)v19 + *(int *)(v20 + 24), v14);
      return a1;
    }

    sub_1000CECE0((uint64_t)v18, type metadata accessor for Goldilocks_ZoneID);
    goto LABEL_6;
  }

  if (v23)
  {
LABEL_6:
    uint64_t v25 = sub_1000BED3C(&qword_100295030);
    memcpy(v18, v19, *(void *)(*(void *)(v25 - 8) + 64LL));
    return a1;
  }

  __int128 v24 = *((_OWORD *)v19 + 1);
  *(_OWORD *)uint64_t v18 = *(_OWORD *)v19;
  *((_OWORD *)v18 + 1) = v24;
  (*(void (**)(char *, char *, uint64_t))(v15 + 32))( (char *)v18 + *(int *)(v20 + 24),  (char *)v19 + *(int *)(v20 + 24),  v14);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v21 + 56))(v18, 0LL, 1LL, v20);
  return a1;
}

uint64_t getEnumTagSinglePayload for Goldilocks_InitiateExitRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100107600);
}

uint64_t sub_100107600(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }

  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage(0LL);
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      uint64_t v10 = v8;
      uint64_t v11 = *(int *)(a3 + 48);
    }

    else
    {
      uint64_t v10 = sub_1000BED3C(&qword_100295030);
      uint64_t v9 = *(void *)(v10 - 8);
      uint64_t v11 = *(int *)(a3 + 52);
    }

    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }

uint64_t storeEnumTagSinglePayload for Goldilocks_InitiateExitRequest( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1001076B0);
}

uint64_t sub_1001076B0(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }

  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage(0LL);
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      uint64_t v10 = v8;
      uint64_t v11 = *(int *)(a4 + 48);
    }

    else
    {
      uint64_t v10 = sub_1000BED3C(&qword_100295030);
      uint64_t v9 = *(void *)(v10 - 8);
      uint64_t v11 = *(int *)(a4 + 52);
    }

    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }

  return result;
}

void sub_100107750(uint64_t a1)
{
  v6[0] = &unk_100219570;
  v6[1] = &unk_100219588;
  v6[2] = &unk_100219588;
  v6[3] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v6[4] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v6[5] = (char *)&value witness table for Builtin.Int64 + 64;
  v6[6] = &unk_100219588;
  v6[7] = &unk_100219588;
  uint64_t v2 = type metadata accessor for UnknownStorage(319LL);
  if (v3 <= 0x3F)
  {
    v6[8] = *(void *)(v2 - 8) + 64LL;
    sub_1000D71B0(319LL, (unint64_t *)&unk_1002940D0, type metadata accessor for Goldilocks_ZoneID);
    if (v5 <= 0x3F)
    {
      v6[9] = *(void *)(v4 - 8) + 64LL;
      swift_initStructMetadata(a1, 256LL, 10LL, v6, a1 + 16);
    }
  }

uint64_t getEnumTagSinglePayload for Goldilocks_InitiateExitResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100107840);
}

uint64_t sub_100107840(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100112B4C(a1, a2, a3, &qword_100293C98);
}

uint64_t storeEnumTagSinglePayload for Goldilocks_InitiateExitResponse( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100107858);
}

uint64_t sub_100107858(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return sub_100112C08(a1, a2, a3, a4, &qword_100293C98);
}

void sub_100107864(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

uint64_t *initializeBufferWithCopyOfBuffer for Goldilocks_ParticipantExitResult( uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v19 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v19 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v19);
  }

  else
  {
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    uint64_t v8 = a3[5];
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for UnknownStorage(0LL);
    uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16LL);
    swift_bridgeObjectRetain(v7);
    v12(v9, v10, v11);
    uint64_t v13 = a3[6];
    uint64_t v14 = (uint64_t *)((char *)v4 + v13);
    uint64_t v15 = (uint64_t *)((char *)a2 + v13);
    uint64_t v16 = type metadata accessor for Goldilocks_ErrorInfo.ResultError(0LL);
    uint64_t v17 = *(void *)(v16 - 8);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v17 + 48))(v15, 1LL, v16))
    {
      uint64_t v18 = sub_1000BED3C(&qword_100293C98);
      memcpy(v14, v15, *(void *)(*(void *)(v18 - 8) + 64LL));
    }

    else
    {
      uint64_t v57 = v17;
      uint64_t v20 = v15[1];
      void *v14 = *v15;
      v14[1] = v20;
      v14[2] = v15[2];
      *((_BYTE *)v14 + 24) = *((_BYTE *)v15 + 24);
      uint64_t v21 = v15[5];
      v14[4] = v15[4];
      v14[5] = v21;
      *((_DWORD *)v14 + 12) = *((_DWORD *)v15 + 12);
      uint64_t v58 = v12;
      uint64_t v59 = v11;
      uint64_t v23 = v15[7];
      uint64_t v22 = v15[8];
      v14[7] = v23;
      v14[8] = v22;
      uint64_t v25 = v15[9];
      uint64_t v24 = v15[10];
      v14[9] = v25;
      v14[10] = v24;
      uint64_t v26 = v15[11];
      v14[11] = v26;
      uint64_t v27 = *(int *)(v16 + 44);
      uint64_t v54 = (char *)v15 + v27;
      uint64_t v55 = (char *)v14 + v27;
      swift_bridgeObjectRetain(v20);
      swift_bridgeObjectRetain(v21);
      swift_bridgeObjectRetain(v23);
      swift_bridgeObjectRetain(v25);
      uint64_t v28 = v26;
      uint64_t v12 = v58;
      swift_bridgeObjectRetain(v28);
      v58(v55, v54, v59);
      uint64_t v29 = *(int *)(v16 + 48);
      uint64_t v30 = (void *)((char *)v14 + v29);
      uint64_t v31 = (void *)((char *)v15 + v29);
      uint64_t v32 = type metadata accessor for Goldilocks_ErrorInfo.DatabaseFailure(0LL);
      uint64_t v33 = *(void *)(v32 - 8);
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v33 + 48))(v31, 1LL, v32))
      {
        uint64_t v34 = sub_1000BED3C(&qword_100293CA8);
        memcpy(v30, v31, *(void *)(*(void *)(v34 - 8) + 64LL));
        uint64_t v11 = v59;
      }

      else
      {
        uint64_t v35 = v31[1];
        *uint64_t v30 = *v31;
        v30[1] = v35;
        uint64_t v36 = v31[3];
        v30[2] = v31[2];
        v30[3] = v36;
        v30[4] = v31[4];
        *((_BYTE *)v30 + 40) = *((_BYTE *)v31 + 40);
        v30[6] = v31[6];
        *((_BYTE *)v30 + 56) = *((_BYTE *)v31 + 56);
        uint64_t v37 = *(int *)(v32 + 32);
        uint64_t v56 = (char *)v30 + v37;
        uint64_t v38 = (char *)v31 + v37;
        swift_bridgeObjectRetain(v35);
        uint64_t v39 = v36;
        uint64_t v12 = v58;
        swift_bridgeObjectRetain(v39);
        uint64_t v40 = v38;
        uint64_t v11 = v59;
        v58(v56, v40, v59);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v33 + 56))(v30, 0LL, 1LL, v32);
      }

      (*(void (**)(void *, void, uint64_t, uint64_t))(v57 + 56))(v14, 0LL, 1LL, v16);
    }

    uint64_t v41 = a3[7];
    uint64_t v42 = (uint64_t *)((char *)v4 + v41);
    uint64_t v43 = (uint64_t *)((char *)a2 + v41);
    uint64_t v44 = type metadata accessor for Goldilocks_ZoneID(0LL);
    uint64_t v45 = *(void *)(v44 - 8);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v45 + 48))(v43, 1LL, v44))
    {
      uint64_t v46 = sub_1000BED3C(&qword_100295030);
      memcpy(v42, v43, *(void *)(*(void *)(v46 - 8) + 64LL));
    }

    else
    {
      uint64_t v47 = v43[1];
      *uint64_t v42 = *v43;
      v42[1] = v47;
      uint64_t v48 = v12;
      uint64_t v49 = v43[3];
      v42[2] = v43[2];
      v42[3] = v49;
      uint64_t v50 = *(int *)(v44 + 24);
      uint64_t v51 = (char *)v42 + v50;
      uint64_t v52 = (char *)v43 + v50;
      swift_bridgeObjectRetain(v47);
      swift_bridgeObjectRetain(v49);
      v48(v51, v52, v11);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v45 + 56))(v42, 0LL, 1LL, v44);
    }
  }

  return v4;
}

uint64_t destroy for Goldilocks_ParticipantExitResult(uint64_t a1, int *a2)
{
  uint64_t v4 = a1 + a2[5];
  uint64_t v5 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v13 = *(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8LL);
  v13(v4, v5);
  uint64_t v6 = (void *)(a1 + a2[6]);
  uint64_t v7 = type metadata accessor for Goldilocks_ErrorInfo.ResultError(0LL);
  if (!(*(unsigned int (**)(void *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48LL))(v6, 1LL, v7))
  {
    swift_bridgeObjectRelease(v6[1]);
    swift_bridgeObjectRelease(v6[5]);
    swift_bridgeObjectRelease(v6[7]);
    swift_bridgeObjectRelease(v6[9]);
    swift_bridgeObjectRelease(v6[11]);
    v13((uint64_t)v6 + *(int *)(v7 + 44), v5);
    uint64_t v8 = (char *)v6 + *(int *)(v7 + 48);
    uint64_t v9 = type metadata accessor for Goldilocks_ErrorInfo.DatabaseFailure(0LL);
    if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48LL))(v8, 1LL, v9))
    {
      swift_bridgeObjectRelease(*((void *)v8 + 1));
      swift_bridgeObjectRelease(*((void *)v8 + 3));
      v13((uint64_t)&v8[*(int *)(v9 + 32)], v5);
    }
  }

  uint64_t v10 = a1 + a2[7];
  uint64_t v11 = type metadata accessor for Goldilocks_ZoneID(0LL);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 48LL))(v10, 1LL, v11);
  if (!(_DWORD)result)
  {
    swift_bridgeObjectRelease(*(void *)(v10 + 8));
    swift_bridgeObjectRelease(*(void *)(v10 + 24));
    return ((uint64_t (*)(uint64_t, uint64_t))v13)(v10 + *(int *)(v11 + 24), v5);
  }

  return result;
}

void *initializeWithCopy for Goldilocks_ParticipantExitResult(void *a1, void *a2, uint64_t a3)
{
  uint64_t v3 = a3;
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16LL);
  swift_bridgeObjectRetain(v6);
  v11(v8, v9, v10);
  uint64_t v12 = *(int *)(v3 + 24);
  uint64_t v13 = (void *)((char *)a1 + v12);
  uint64_t v14 = (void *)((char *)a2 + v12);
  uint64_t v15 = type metadata accessor for Goldilocks_ErrorInfo.ResultError(0LL);
  uint64_t v16 = *(void *)(v15 - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v16 + 48))(v14, 1LL, v15))
  {
    uint64_t v17 = sub_1000BED3C(&qword_100293C98);
    memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64LL));
  }

  else
  {
    uint64_t v56 = v3;
    uint64_t v59 = v16;
    uint64_t v18 = v14[1];
    *uint64_t v13 = *v14;
    v13[1] = v18;
    v13[2] = v14[2];
    *((_BYTE *)v13 + 24) = *((_BYTE *)v14 + 24);
    uint64_t v19 = v14[5];
    v13[4] = v14[4];
    v13[5] = v19;
    *((_DWORD *)v13 + 12) = *((_DWORD *)v14 + 12);
    uint64_t v20 = v10;
    uint64_t v22 = v14[7];
    uint64_t v21 = v14[8];
    v13[7] = v22;
    v13[8] = v21;
    uint64_t v24 = v14[9];
    uint64_t v23 = v14[10];
    v13[9] = v24;
    v13[10] = v23;
    uint64_t v60 = v11;
    uint64_t v25 = v14[11];
    v13[11] = v25;
    uint64_t v26 = *(int *)(v15 + 44);
    uint64_t v57 = (char *)v13 + v26;
    uint64_t v55 = (char *)v14 + v26;
    swift_bridgeObjectRetain(v18);
    swift_bridgeObjectRetain(v19);
    swift_bridgeObjectRetain(v22);
    swift_bridgeObjectRetain(v24);
    uint64_t v27 = v25;
    uint64_t v11 = v60;
    swift_bridgeObjectRetain(v27);
    uint64_t v28 = v57;
    uint64_t v58 = v20;
    v60(v28, v55, v20);
    uint64_t v29 = *(int *)(v15 + 48);
    uint64_t v30 = (void *)((char *)v13 + v29);
    uint64_t v31 = (void *)((char *)v14 + v29);
    uint64_t v32 = type metadata accessor for Goldilocks_ErrorInfo.DatabaseFailure(0LL);
    uint64_t v33 = *(void *)(v32 - 8);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v33 + 48))(v31, 1LL, v32))
    {
      uint64_t v34 = sub_1000BED3C(&qword_100293CA8);
      memcpy(v30, v31, *(void *)(*(void *)(v34 - 8) + 64LL));
      uint64_t v10 = v20;
    }

    else
    {
      uint64_t v35 = v31[1];
      *uint64_t v30 = *v31;
      v30[1] = v35;
      uint64_t v36 = v31[3];
      v30[2] = v31[2];
      v30[3] = v36;
      v30[4] = v31[4];
      *((_BYTE *)v30 + 40) = *((_BYTE *)v31 + 40);
      v30[6] = v31[6];
      *((_BYTE *)v30 + 56) = *((_BYTE *)v31 + 56);
      uint64_t v37 = *(int *)(v32 + 32);
      uint64_t v38 = (char *)v30 + v37;
      uint64_t v39 = (char *)v31 + v37;
      swift_bridgeObjectRetain(v35);
      uint64_t v40 = v36;
      uint64_t v11 = v60;
      swift_bridgeObjectRetain(v40);
      uint64_t v41 = v39;
      uint64_t v10 = v58;
      v60(v38, v41, v58);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v33 + 56))(v30, 0LL, 1LL, v32);
    }

    (*(void (**)(void *, void, uint64_t, uint64_t))(v59 + 56))(v13, 0LL, 1LL, v15);
    uint64_t v3 = v56;
  }

  uint64_t v42 = *(int *)(v3 + 28);
  uint64_t v43 = (void *)((char *)a1 + v42);
  uint64_t v44 = (void *)((char *)a2 + v42);
  uint64_t v45 = type metadata accessor for Goldilocks_ZoneID(0LL);
  uint64_t v46 = *(void *)(v45 - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v46 + 48))(v44, 1LL, v45))
  {
    uint64_t v47 = sub_1000BED3C(&qword_100295030);
    memcpy(v43, v44, *(void *)(*(void *)(v47 - 8) + 64LL));
  }

  else
  {
    uint64_t v48 = v44[1];
    *uint64_t v43 = *v44;
    v43[1] = v48;
    uint64_t v49 = v11;
    uint64_t v50 = v44[3];
    v43[2] = v44[2];
    v43[3] = v50;
    uint64_t v51 = *(int *)(v45 + 24);
    uint64_t v52 = (char *)v43 + v51;
    uint64_t v53 = (char *)v44 + v51;
    swift_bridgeObjectRetain(v48);
    swift_bridgeObjectRetain(v50);
    v49(v52, v53, v10);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v46 + 56))(v43, 0LL, 1LL, v45);
  }

  return a1;
}

void *assignWithCopy for Goldilocks_ParticipantExitResult(void *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = a2;
  *a1 = *a2;
  uint64_t v6 = a2[1];
  uint64_t v7 = a1[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)v4 + v8;
  uint64_t v11 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v105 = *(void *)(v11 - 8);
  uint64_t v12 = *(void (**)(char *, char *, uint64_t))(v105 + 24);
  v12(v9, v10, v11);
  uint64_t v106 = a3;
  uint64_t v13 = *(int *)(a3 + 24);
  uint64_t v14 = (uint64_t)a1 + v13;
  uint64_t v15 = (char *)v4 + v13;
  uint64_t v16 = type metadata accessor for Goldilocks_ErrorInfo.ResultError(0LL);
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v18 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v17 + 48);
  int v19 = v18(v14, 1LL, v16);
  int v20 = v18((uint64_t)v15, 1LL, v16);
  if (!v19)
  {
    if (!v20)
    {
      *(void *)uint64_t v14 = *(void *)v15;
      uint64_t v38 = *((void *)v15 + 1);
      uint64_t v39 = *(void *)(v14 + 8);
      *(void *)(v14 + 8) = v38;
      swift_bridgeObjectRetain(v38);
      swift_bridgeObjectRelease(v39);
      uint64_t v40 = *((void *)v15 + 2);
      *(_BYTE *)(v14 + 24) = v15[24];
      *(void *)(v14 + 16) = v40;
      *(void *)(v14 + 32) = *((void *)v15 + 4);
      uint64_t v41 = *((void *)v15 + 5);
      uint64_t v42 = *(void *)(v14 + 40);
      *(void *)(v14 + 40) = v41;
      swift_bridgeObjectRetain(v41);
      swift_bridgeObjectRelease(v42);
      *(_DWORD *)(v14 + 48) = *((_DWORD *)v15 + 12);
      uint64_t v43 = *((void *)v15 + 7);
      uint64_t v44 = *(void *)(v14 + 56);
      *(void *)(v14 + 56) = v43;
      swift_bridgeObjectRetain(v43);
      swift_bridgeObjectRelease(v44);
      *(void *)(v14 + 64) = *((void *)v15 + 8);
      uint64_t v45 = *((void *)v15 + 9);
      uint64_t v46 = *(void *)(v14 + 72);
      *(void *)(v14 + 72) = v45;
      swift_bridgeObjectRetain(v45);
      swift_bridgeObjectRelease(v46);
      *(void *)(v14 + 80) = *((void *)v15 + 10);
      uint64_t v47 = *((void *)v15 + 11);
      uint64_t v48 = *(void *)(v14 + 88);
      *(void *)(v14 + 88) = v47;
      swift_bridgeObjectRetain(v47);
      swift_bridgeObjectRelease(v48);
      v12((char *)(v14 + *(int *)(v16 + 44)), &v15[*(int *)(v16 + 44)], v11);
      uint64_t v49 = *(int *)(v16 + 48);
      uint64_t v50 = v14 + v49;
      uint64_t v51 = &v15[v49];
      uint64_t v52 = type metadata accessor for Goldilocks_ErrorInfo.DatabaseFailure(0LL);
      uint64_t v53 = *(void *)(v52 - 8);
      uint64_t v54 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v53 + 48);
      LODWORD(v48) = v54(v50, 1LL, v52);
      int v55 = v54((uint64_t)v51, 1LL, v52);
      if ((_DWORD)v48)
      {
        if (!v55)
        {
          *(void *)uint64_t v50 = *(void *)v51;
          uint64_t v56 = *((void *)v51 + 1);
          *(void *)(v50 + 8) = v56;
          *(void *)(v50 + 16) = *((void *)v51 + 2);
          uint64_t v57 = *((void *)v51 + 3);
          *(void *)(v50 + 24) = v57;
          uint64_t v58 = *((void *)v51 + 4);
          *(_BYTE *)(v50 + 40) = v51[40];
          *(void *)(v50 + 32) = v58;
          uint64_t v59 = *((void *)v51 + 6);
          *(_BYTE *)(v50 + 56) = v51[56];
          *(void *)(v50 + 48) = v59;
          uint64_t v60 = *(int *)(v52 + 32);
          uint64_t v104 = v12;
          uint64_t v61 = v11;
          uint64_t v62 = v50 + v60;
          uint64_t v63 = &v51[v60];
          uint64_t v64 = *(void (**)(uint64_t, char *, uint64_t))(v105 + 16);
          swift_bridgeObjectRetain(v56);
          swift_bridgeObjectRetain(v57);
          uint64_t v65 = v62;
          uint64_t v11 = v61;
          uint64_t v12 = v104;
          v64(v65, v63, v11);
          (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v53 + 56))(v50, 0LL, 1LL, v52);
          goto LABEL_14;
        }
      }

      else
      {
        if (!v55)
        {
          *(void *)uint64_t v50 = *(void *)v51;
          uint64_t v92 = *((void *)v51 + 1);
          uint64_t v93 = *(void *)(v50 + 8);
          *(void *)(v50 + 8) = v92;
          swift_bridgeObjectRetain(v92);
          swift_bridgeObjectRelease(v93);
          *(void *)(v50 + 16) = *((void *)v51 + 2);
          uint64_t v94 = *((void *)v51 + 3);
          uint64_t v95 = *(void *)(v50 + 24);
          *(void *)(v50 + 24) = v94;
          swift_bridgeObjectRetain(v94);
          swift_bridgeObjectRelease(v95);
          uint64_t v96 = *((void *)v51 + 4);
          *(_BYTE *)(v50 + 40) = v51[40];
          *(void *)(v50 + 32) = v96;
          uint64_t v97 = *((void *)v51 + 6);
          *(_BYTE *)(v50 + 56) = v51[56];
          *(void *)(v50 + 48) = v97;
          v12((char *)(v50 + *(int *)(v52 + 32)), &v51[*(int *)(v52 + 32)], v11);
          goto LABEL_14;
        }

        sub_1000CECE0(v50, type metadata accessor for Goldilocks_ErrorInfo.DatabaseFailure);
      }

      size_t v35 = *(void *)(*(void *)(sub_1000BED3C(&qword_100293CA8) - 8) + 64LL);
      uint64_t v36 = (void *)v50;
      uint64_t v37 = v51;
LABEL_8:
      memcpy(v36, v37, v35);
      goto LABEL_14;
    }

    sub_1000CECE0(v14, type metadata accessor for Goldilocks_ErrorInfo.ResultError);
LABEL_7:
    size_t v35 = *(void *)(*(void *)(sub_1000BED3C(&qword_100293C98) - 8) + 64LL);
    uint64_t v36 = (void *)v14;
    uint64_t v37 = v15;
    goto LABEL_8;
  }

  if (v20) {
    goto LABEL_7;
  }
  v102 = v4;
  uint64_t v103 = v12;
  *(void *)uint64_t v14 = *(void *)v15;
  uint64_t v21 = *((void *)v15 + 1);
  *(void *)(v14 + 8) = v21;
  uint64_t v22 = *((void *)v15 + 2);
  *(_BYTE *)(v14 + 24) = v15[24];
  *(void *)(v14 + 16) = v22;
  *(void *)(v14 + 32) = *((void *)v15 + 4);
  uint64_t v23 = *((void *)v15 + 5);
  *(void *)(v14 + 40) = v23;
  *(_DWORD *)(v14 + 48) = *((_DWORD *)v15 + 12);
  uint64_t v101 = v11;
  uint64_t v24 = *((void *)v15 + 7);
  *(void *)(v14 + 56) = v24;
  *(void *)(v14 + 64) = *((void *)v15 + 8);
  uint64_t v25 = *((void *)v15 + 9);
  *(void *)(v14 + 72) = v25;
  *(void *)(v14 + 80) = *((void *)v15 + 10);
  uint64_t v26 = *((void *)v15 + 11);
  *(void *)(v14 + 88) = v26;
  uint64_t v27 = *(int *)(v16 + 44);
  uint64_t v98 = &v15[v27];
  uint64_t v100 = v14 + v27;
  uint64_t v28 = *(void (**)(uint64_t, char *, uint64_t))(v105 + 16);
  swift_bridgeObjectRetain(v21);
  swift_bridgeObjectRetain(v23);
  swift_bridgeObjectRetain(v24);
  swift_bridgeObjectRetain(v25);
  swift_bridgeObjectRetain(v26);
  v28(v100, v98, v101);
  uint64_t v29 = *(int *)(v16 + 48);
  uint64_t v30 = (void *)(v14 + v29);
  uint64_t v31 = &v15[v29];
  uint64_t v32 = type metadata accessor for Goldilocks_ErrorInfo.DatabaseFailure(0LL);
  uint64_t v33 = *(void *)(v32 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v33 + 48))(v31, 1LL, v32))
  {
    uint64_t v34 = sub_1000BED3C(&qword_100293CA8);
    memcpy(v30, v31, *(void *)(*(void *)(v34 - 8) + 64LL));
  }

  else
  {
    *uint64_t v30 = *(void *)v31;
    uint64_t v66 = *((void *)v31 + 1);
    v30[1] = v66;
    v30[2] = *((void *)v31 + 2);
    uint64_t v67 = *((void *)v31 + 3);
    v30[3] = v67;
    uint64_t v68 = *((void *)v31 + 4);
    *((_BYTE *)v30 + 40) = v31[40];
    v30[4] = v68;
    uint64_t v69 = *((void *)v31 + 6);
    *((_BYTE *)v30 + 56) = v31[56];
    v30[6] = v69;
    uint64_t v70 = *(int *)(v32 + 32);
    uint64_t v99 = (char *)v30 + v70;
    uint64_t v71 = &v31[v70];
    swift_bridgeObjectRetain(v66);
    swift_bridgeObjectRetain(v67);
    v28((uint64_t)v99, v71, v101);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v33 + 56))(v30, 0LL, 1LL, v32);
  }

  uint64_t v11 = v101;
  uint64_t v4 = v102;
  uint64_t v12 = v103;
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v17 + 56))(v14, 0LL, 1LL, v16);
LABEL_14:
  uint64_t v72 = *(int *)(v106 + 28);
  uint64_t v73 = (char *)a1 + v72;
  uint64_t v74 = (char *)v4 + v72;
  uint64_t v75 = type metadata accessor for Goldilocks_ZoneID(0LL);
  uint64_t v76 = *(void *)(v75 - 8);
  uint64_t v77 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v76 + 48);
  int v78 = v77(v73, 1LL, v75);
  int v79 = v77(v74, 1LL, v75);
  if (!v78)
  {
    if (!v79)
    {
      *(void *)uint64_t v73 = *(void *)v74;
      uint64_t v88 = *((void *)v74 + 1);
      uint64_t v89 = *((void *)v73 + 1);
      *((void *)v73 + 1) = v88;
      swift_bridgeObjectRetain(v88);
      swift_bridgeObjectRelease(v89);
      *((void *)v73 + 2) = *((void *)v74 + 2);
      uint64_t v90 = *((void *)v74 + 3);
      uint64_t v91 = *((void *)v73 + 3);
      *((void *)v73 + 3) = v90;
      swift_bridgeObjectRetain(v90);
      swift_bridgeObjectRelease(v91);
      v12(&v73[*(int *)(v75 + 24)], &v74[*(int *)(v75 + 24)], v11);
      return a1;
    }

    sub_1000CECE0((uint64_t)v73, type metadata accessor for Goldilocks_ZoneID);
    goto LABEL_19;
  }

  if (v79)
  {
LABEL_19:
    uint64_t v86 = sub_1000BED3C(&qword_100295030);
    memcpy(v73, v74, *(void *)(*(void *)(v86 - 8) + 64LL));
    return a1;
  }

  *(void *)uint64_t v73 = *(void *)v74;
  uint64_t v80 = *((void *)v74 + 1);
  *((void *)v73 + 1) = v80;
  *((void *)v73 + 2) = *((void *)v74 + 2);
  uint64_t v81 = *((void *)v74 + 3);
  *((void *)v73 + 3) = v81;
  uint64_t v82 = *(int *)(v75 + 24);
  v83 = &v73[v82];
  v84 = &v74[v82];
  uint64_t v85 = *(void (**)(char *, char *, uint64_t))(v105 + 16);
  swift_bridgeObjectRetain(v80);
  swift_bridgeObjectRetain(v81);
  v85(v83, v84, v11);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v76 + 56))(v73, 0LL, 1LL, v75);
  return a1;
}

_OWORD *initializeWithTake for Goldilocks_ParticipantExitResult(_OWORD *a1, _OWORD *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32LL);
  v10(v7, v8, v9);
  uint64_t v11 = a3[6];
  uint64_t v12 = (_OWORD *)((char *)a1 + v11);
  uint64_t v13 = (_OWORD *)((char *)a2 + v11);
  uint64_t v14 = type metadata accessor for Goldilocks_ErrorInfo.ResultError(0LL);
  uint64_t v15 = *(void *)(v14 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v15 + 48))(v13, 1LL, v14))
  {
    uint64_t v16 = sub_1000BED3C(&qword_100293C98);
    memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64LL));
  }

  else
  {
    *uint64_t v12 = *v13;
    *((void *)v12 + 2) = *((void *)v13 + 2);
    *((_BYTE *)v12 + 24) = *((_BYTE *)v13 + 24);
    v12[2] = v13[2];
    *((_DWORD *)v12 + 12) = *((_DWORD *)v13 + 12);
    *((void *)v12 + 7) = *((void *)v13 + 7);
    __int128 v17 = v13[5];
    v12[4] = v13[4];
    v12[5] = v17;
    v10((char *)v12 + *(int *)(v14 + 44), (char *)v13 + *(int *)(v14 + 44), v9);
    uint64_t v18 = *(int *)(v14 + 48);
    uint64_t v33 = v10;
    int v19 = (_OWORD *)((char *)v12 + v18);
    int v20 = (_OWORD *)((char *)v13 + v18);
    uint64_t v21 = type metadata accessor for Goldilocks_ErrorInfo.DatabaseFailure(0LL);
    uint64_t v32 = *(void *)(v21 - 8);
    if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v32 + 48))(v20, 1LL, v21))
    {
      uint64_t v22 = sub_1000BED3C(&qword_100293CA8);
      memcpy(v19, v20, *(void *)(*(void *)(v22 - 8) + 64LL));
    }

    else
    {
      __int128 v23 = v20[1];
      *int v19 = *v20;
      v19[1] = v23;
      *((void *)v19 + 4) = *((void *)v20 + 4);
      *((_BYTE *)v19 + 40) = *((_BYTE *)v20 + 40);
      *((void *)v19 + 6) = *((void *)v20 + 6);
      *((_BYTE *)v19 + 56) = *((_BYTE *)v20 + 56);
      v33((char *)v19 + *(int *)(v21 + 32), (char *)v20 + *(int *)(v21 + 32), v9);
      (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v32 + 56))(v19, 0LL, 1LL, v21);
    }

    (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0LL, 1LL, v14);
    uint64_t v10 = v33;
  }

  uint64_t v24 = a3[7];
  uint64_t v25 = (_OWORD *)((char *)a1 + v24);
  uint64_t v26 = (_OWORD *)((char *)a2 + v24);
  uint64_t v27 = type metadata accessor for Goldilocks_ZoneID(0LL);
  uint64_t v28 = *(void *)(v27 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v28 + 48))(v26, 1LL, v27))
  {
    uint64_t v29 = sub_1000BED3C(&qword_100295030);
    memcpy(v25, v26, *(void *)(*(void *)(v29 - 8) + 64LL));
  }

  else
  {
    __int128 v30 = v26[1];
    _OWORD *v25 = *v26;
    v25[1] = v30;
    v10((char *)v25 + *(int *)(v27 + 24), (char *)v26 + *(int *)(v27 + 24), v9);
    (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v28 + 56))(v25, 0LL, 1LL, v27);
  }

  return a1;
}

void *assignWithTake for Goldilocks_ParticipantExitResult(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  uint64_t v7 = a1[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = a3[5];
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v72 = *(void *)(v11 - 8);
  uint64_t v71 = *(void (**)(char *, char *, uint64_t))(v72 + 40);
  v71(v9, v10, v11);
  uint64_t v12 = a3[6];
  uint64_t v13 = (uint64_t)a1 + v12;
  uint64_t v14 = (char *)a2 + v12;
  uint64_t v15 = type metadata accessor for Goldilocks_ErrorInfo.ResultError(0LL);
  uint64_t v16 = *(void *)(v15 - 8);
  __int128 v17 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v16 + 48);
  int v18 = v17(v13, 1LL, v15);
  int v19 = v17((uint64_t)v14, 1LL, v15);
  if (!v18)
  {
    if (!v19)
    {
      uint64_t v28 = *((void *)v14 + 1);
      uint64_t v29 = *(void *)(v13 + 8);
      *(void *)uint64_t v13 = *(void *)v14;
      *(void *)(v13 + 8) = v28;
      swift_bridgeObjectRelease(v29);
      *(void *)(v13 + 16) = *((void *)v14 + 2);
      *(_BYTE *)(v13 + 24) = v14[24];
      uint64_t v30 = *((void *)v14 + 5);
      uint64_t v31 = *(void *)(v13 + 40);
      *(void *)(v13 + 32) = *((void *)v14 + 4);
      *(void *)(v13 + 40) = v30;
      swift_bridgeObjectRelease(v31);
      *(_DWORD *)(v13 + 48) = *((_DWORD *)v14 + 12);
      uint64_t v32 = *(void *)(v13 + 56);
      *(void *)(v13 + 56) = *((void *)v14 + 7);
      swift_bridgeObjectRelease(v32);
      uint64_t v33 = *((void *)v14 + 9);
      uint64_t v34 = *(void *)(v13 + 72);
      *(void *)(v13 + 64) = *((void *)v14 + 8);
      *(void *)(v13 + 72) = v33;
      swift_bridgeObjectRelease(v34);
      uint64_t v35 = *((void *)v14 + 11);
      uint64_t v36 = *(void *)(v13 + 88);
      *(void *)(v13 + 80) = *((void *)v14 + 10);
      *(void *)(v13 + 88) = v35;
      swift_bridgeObjectRelease(v36);
      uint64_t v37 = v11;
      v71((char *)(v13 + *(int *)(v15 + 44)), &v14[*(int *)(v15 + 44)], v11);
      uint64_t v38 = *(int *)(v15 + 48);
      uint64_t v39 = (char *)(v13 + v38);
      uint64_t v40 = &v14[v38];
      uint64_t v41 = type metadata accessor for Goldilocks_ErrorInfo.DatabaseFailure(0LL);
      uint64_t v42 = *(void *)(v41 - 8);
      uint64_t v43 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v42 + 48);
      int v44 = v43(v39, 1LL, v41);
      int v45 = v43(v40, 1LL, v41);
      if (v44)
      {
        if (!v45)
        {
          __int128 v46 = *((_OWORD *)v40 + 1);
          *(_OWORD *)uint64_t v39 = *(_OWORD *)v40;
          *((_OWORD *)v39 + 1) = v46;
          *((void *)v39 + 4) = *((void *)v40 + 4);
          v39[40] = v40[40];
          *((void *)v39 + 6) = *((void *)v40 + 6);
          v39[56] = v40[56];
          (*(void (**)(char *, char *, uint64_t))(v72 + 32))( &v39[*(int *)(v41 + 32)],  &v40[*(int *)(v41 + 32)],  v37);
          uint64_t v47 = *(void (**)(char *, void, uint64_t, uint64_t))(v42 + 56);
          uint64_t v11 = v37;
          v47(v39, 0LL, 1LL, v41);
          goto LABEL_16;
        }
      }

      else
      {
        if (!v45)
        {
          uint64_t v65 = *((void *)v40 + 1);
          uint64_t v66 = *((void *)v39 + 1);
          *(void *)uint64_t v39 = *(void *)v40;
          *((void *)v39 + 1) = v65;
          swift_bridgeObjectRelease(v66);
          uint64_t v67 = *((void *)v40 + 3);
          uint64_t v68 = *((void *)v39 + 3);
          *((void *)v39 + 2) = *((void *)v40 + 2);
          *((void *)v39 + 3) = v67;
          swift_bridgeObjectRelease(v68);
          *((void *)v39 + 4) = *((void *)v40 + 4);
          v39[40] = v40[40];
          *((void *)v39 + 6) = *((void *)v40 + 6);
          v39[56] = v40[56];
          uint64_t v11 = v37;
          v71(&v39[*(int *)(v41 + 32)], &v40[*(int *)(v41 + 32)], v37);
          goto LABEL_16;
        }

        sub_1000CECE0((uint64_t)v39, type metadata accessor for Goldilocks_ErrorInfo.DatabaseFailure);
      }

      uint64_t v49 = sub_1000BED3C(&qword_100293CA8);
      memcpy(v39, v40, *(void *)(*(void *)(v49 - 8) + 64LL));
      uint64_t v11 = v37;
      goto LABEL_16;
    }

    sub_1000CECE0(v13, type metadata accessor for Goldilocks_ErrorInfo.ResultError);
LABEL_7:
    uint64_t v27 = sub_1000BED3C(&qword_100293C98);
    memcpy((void *)v13, v14, *(void *)(*(void *)(v27 - 8) + 64LL));
    goto LABEL_16;
  }

  if (v19) {
    goto LABEL_7;
  }
  *(_OWORD *)uint64_t v13 = *(_OWORD *)v14;
  *(_BYTE *)(v13 + 24) = v14[24];
  *(void *)(v13 + 16) = *((void *)v14 + 2);
  *(_OWORD *)(v13 + 32) = *((_OWORD *)v14 + 2);
  *(_DWORD *)(v13 + 48) = *((_DWORD *)v14 + 12);
  *(void *)(v13 + 56) = *((void *)v14 + 7);
  __int128 v20 = *((_OWORD *)v14 + 5);
  *(_OWORD *)(v13 + 64) = *((_OWORD *)v14 + 4);
  *(_OWORD *)(v13 + 80) = v20;
  uint64_t v70 = *(void (**)(uint64_t, char *, uint64_t))(v72 + 32);
  v70(v13 + *(int *)(v15 + 44), &v14[*(int *)(v15 + 44)], v11);
  uint64_t v21 = *(int *)(v15 + 48);
  uint64_t v22 = (_OWORD *)(v13 + v21);
  __int128 v23 = &v14[v21];
  uint64_t v24 = v11;
  uint64_t v25 = type metadata accessor for Goldilocks_ErrorInfo.DatabaseFailure(0LL);
  uint64_t v69 = *(void *)(v25 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v69 + 48))(v23, 1LL, v25))
  {
    uint64_t v26 = sub_1000BED3C(&qword_100293CA8);
    memcpy(v22, v23, *(void *)(*(void *)(v26 - 8) + 64LL));
  }

  else
  {
    __int128 v48 = *((_OWORD *)v23 + 1);
    *uint64_t v22 = *(_OWORD *)v23;
    v22[1] = v48;
    *((void *)v22 + 4) = *((void *)v23 + 4);
    *((_BYTE *)v22 + 40) = v23[40];
    *((void *)v22 + 6) = *((void *)v23 + 6);
    *((_BYTE *)v22 + 56) = v23[56];
    v70((uint64_t)v22 + *(int *)(v25 + 32), &v23[*(int *)(v25 + 32)], v24);
    (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v69 + 56))(v22, 0LL, 1LL, v25);
  }

  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v16 + 56))(v13, 0LL, 1LL, v15);
  uint64_t v11 = v24;
LABEL_16:
  uint64_t v50 = a3[7];
  uint64_t v51 = (char *)a1 + v50;
  uint64_t v52 = (char *)a2 + v50;
  uint64_t v53 = type metadata accessor for Goldilocks_ZoneID(0LL);
  uint64_t v54 = *(void *)(v53 - 8);
  int v55 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v54 + 48);
  int v56 = v55(v51, 1LL, v53);
  int v57 = v55(v52, 1LL, v53);
  if (!v56)
  {
    if (!v57)
    {
      uint64_t v61 = *((void *)v52 + 1);
      uint64_t v62 = *((void *)v51 + 1);
      *(void *)uint64_t v51 = *(void *)v52;
      *((void *)v51 + 1) = v61;
      swift_bridgeObjectRelease(v62);
      uint64_t v63 = *((void *)v52 + 3);
      uint64_t v64 = *((void *)v51 + 3);
      *((void *)v51 + 2) = *((void *)v52 + 2);
      *((void *)v51 + 3) = v63;
      swift_bridgeObjectRelease(v64);
      v71(&v51[*(int *)(v53 + 24)], &v52[*(int *)(v53 + 24)], v11);
      return a1;
    }

    sub_1000CECE0((uint64_t)v51, type metadata accessor for Goldilocks_ZoneID);
    goto LABEL_21;
  }

  if (v57)
  {
LABEL_21:
    uint64_t v59 = sub_1000BED3C(&qword_100295030);
    memcpy(v51, v52, *(void *)(*(void *)(v59 - 8) + 64LL));
    return a1;
  }

  __int128 v58 = *((_OWORD *)v52 + 1);
  *(_OWORD *)uint64_t v51 = *(_OWORD *)v52;
  *((_OWORD *)v51 + 1) = v58;
  (*(void (**)(char *, char *, uint64_t))(v72 + 32))(&v51[*(int *)(v53 + 24)], &v52[*(int *)(v53 + 24)], v11);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v54 + 56))(v51, 0LL, 1LL, v53);
  return a1;
}

uint64_t getEnumTagSinglePayload for Goldilocks_ParticipantExitResult(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100108EC0);
}

uint64_t sub_100108EC0(uint64_t a1, uint64_t a2, int *a3)
{
  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }

  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage(0LL);
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      uint64_t v10 = v8;
      uint64_t v11 = a3[5];
    }

    else
    {
      uint64_t v12 = sub_1000BED3C(&qword_100293C98);
      uint64_t v9 = *(void *)(v12 - 8);
      if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
      {
        uint64_t v10 = v12;
        uint64_t v11 = a3[6];
      }

      else
      {
        uint64_t v10 = sub_1000BED3C(&qword_100295030);
        uint64_t v9 = *(void *)(v10 - 8);
        uint64_t v11 = a3[7];
      }
    }

    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }

uint64_t storeEnumTagSinglePayload for Goldilocks_ParticipantExitResult( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100108F98);
}

uint64_t sub_100108F98(uint64_t result, uint64_t a2, int a3, int *a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }

  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage(0LL);
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      uint64_t v10 = v8;
      uint64_t v11 = a4[5];
    }

    else
    {
      uint64_t v12 = sub_1000BED3C(&qword_100293C98);
      uint64_t v9 = *(void *)(v12 - 8);
      if (*(_DWORD *)(v9 + 84) == a3)
      {
        uint64_t v10 = v12;
        uint64_t v11 = a4[6];
      }

      else
      {
        uint64_t v10 = sub_1000BED3C(&qword_100295030);
        uint64_t v9 = *(void *)(v10 - 8);
        uint64_t v11 = a4[7];
      }
    }

    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }

  return result;
}

void sub_100109060(uint64_t a1)
{
  v8[0] = &unk_100219570;
  uint64_t v2 = type metadata accessor for UnknownStorage(319LL);
  if (v3 <= 0x3F)
  {
    v8[1] = *(void *)(v2 - 8) + 64LL;
    sub_1000D71B0( 319LL,  (unint64_t *)&unk_100294188,  type metadata accessor for Goldilocks_ErrorInfo.ResultError);
    if (v5 <= 0x3F)
    {
      v8[2] = *(void *)(v4 - 8) + 64LL;
      sub_1000D71B0(319LL, (unint64_t *)&unk_1002940D0, type metadata accessor for Goldilocks_ZoneID);
      if (v7 <= 0x3F)
      {
        v8[3] = *(void *)(v6 - 8) + 64LL;
        swift_initStructMetadata(a1, 256LL, 4LL, v8, a1 + 16);
      }
    }
  }

uint64_t *initializeBufferWithCopyOfBuffer for Goldilocks_CheckDuplicatesRequest( uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v20 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v20 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v20);
  }

  else
  {
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    uint64_t v8 = a2[2];
    a1[2] = v8;
    uint64_t v9 = *(int *)(a3 + 24);
    uint64_t v10 = (char *)a1 + v9;
    uint64_t v11 = (char *)a2 + v9;
    uint64_t v12 = type metadata accessor for UnknownStorage(0LL);
    uint64_t v13 = *(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16LL);
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v8);
    v13(v10, v11, v12);
    uint64_t v14 = *(int *)(a3 + 28);
    uint64_t v15 = (uint64_t *)((char *)v4 + v14);
    uint64_t v16 = (uint64_t *)((char *)a2 + v14);
    uint64_t v17 = type metadata accessor for Goldilocks_ZoneID(0LL);
    uint64_t v18 = *(void *)(v17 - 8);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v18 + 48))(v16, 1LL, v17))
    {
      uint64_t v19 = sub_1000BED3C(&qword_100295030);
      memcpy(v15, v16, *(void *)(*(void *)(v19 - 8) + 64LL));
    }

    else
    {
      uint64_t v21 = v16[1];
      *uint64_t v15 = *v16;
      v15[1] = v21;
      uint64_t v22 = v16[3];
      v15[2] = v16[2];
      v15[3] = v22;
      uint64_t v23 = *(int *)(v17 + 24);
      uint64_t v24 = (char *)v15 + v23;
      uint64_t v25 = (char *)v16 + v23;
      swift_bridgeObjectRetain(v21);
      swift_bridgeObjectRetain(v22);
      v13(v24, v25, v12);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v18 + 56))(v15, 0LL, 1LL, v17);
    }
  }

  return v4;
}

uint64_t destroy for Goldilocks_CheckDuplicatesRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + *(int *)(a2 + 24);
  uint64_t v5 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v9 = *(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8LL);
  v9(v4, v5);
  uint64_t v6 = a1 + *(int *)(a2 + 28);
  uint64_t v7 = type metadata accessor for Goldilocks_ZoneID(0LL);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48LL))(v6, 1LL, v7);
  if (!(_DWORD)result)
  {
    swift_bridgeObjectRelease(*(void *)(v6 + 8));
    swift_bridgeObjectRelease(*(void *)(v6 + 24));
    return ((uint64_t (*)(uint64_t, uint64_t))v9)(v6 + *(int *)(v7 + 24), v5);
  }

  return result;
}

void *initializeWithCopy for Goldilocks_CheckDuplicatesRequest(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = a2[2];
  a1[2] = v7;
  uint64_t v8 = *(int *)(a3 + 24);
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16LL);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  v12(v9, v10, v11);
  uint64_t v13 = *(int *)(a3 + 28);
  uint64_t v14 = (void *)((char *)a1 + v13);
  uint64_t v15 = (void *)((char *)a2 + v13);
  uint64_t v16 = type metadata accessor for Goldilocks_ZoneID(0LL);
  uint64_t v17 = *(void *)(v16 - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v17 + 48))(v15, 1LL, v16))
  {
    uint64_t v18 = sub_1000BED3C(&qword_100295030);
    memcpy(v14, v15, *(void *)(*(void *)(v18 - 8) + 64LL));
  }

  else
  {
    uint64_t v19 = v15[1];
    void *v14 = *v15;
    v14[1] = v19;
    uint64_t v20 = v15[3];
    v14[2] = v15[2];
    v14[3] = v20;
    uint64_t v21 = *(int *)(v16 + 24);
    uint64_t v22 = (char *)v14 + v21;
    uint64_t v23 = (char *)v15 + v21;
    swift_bridgeObjectRetain(v19);
    swift_bridgeObjectRetain(v20);
    v12(v22, v23, v11);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v17 + 56))(v14, 0LL, 1LL, v16);
  }

  return a1;
}

void *assignWithCopy for Goldilocks_CheckDuplicatesRequest(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = a2[1];
  uint64_t v7 = a1[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = a2[2];
  uint64_t v9 = a1[2];
  a1[2] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  uint64_t v10 = *(int *)(a3 + 24);
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(void (**)(char *, char *, uint64_t))(v14 + 24);
  v15(v11, v12, v13);
  uint64_t v16 = *(int *)(a3 + 28);
  uint64_t v17 = (char *)a1 + v16;
  uint64_t v18 = (char *)a2 + v16;
  uint64_t v19 = type metadata accessor for Goldilocks_ZoneID(0LL);
  uint64_t v20 = *(void *)(v19 - 8);
  uint64_t v21 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v20 + 48);
  LODWORD(v12) = v21(v17, 1LL, v19);
  int v22 = v21(v18, 1LL, v19);
  if (!(_DWORD)v12)
  {
    if (!v22)
    {
      *(void *)uint64_t v17 = *(void *)v18;
      uint64_t v31 = *((void *)v18 + 1);
      uint64_t v32 = *((void *)v17 + 1);
      *((void *)v17 + 1) = v31;
      swift_bridgeObjectRetain(v31);
      swift_bridgeObjectRelease(v32);
      *((void *)v17 + 2) = *((void *)v18 + 2);
      uint64_t v33 = *((void *)v18 + 3);
      uint64_t v34 = *((void *)v17 + 3);
      *((void *)v17 + 3) = v33;
      swift_bridgeObjectRetain(v33);
      swift_bridgeObjectRelease(v34);
      v15(&v17[*(int *)(v19 + 24)], &v18[*(int *)(v19 + 24)], v13);
      return a1;
    }

    sub_1000CECE0((uint64_t)v17, type metadata accessor for Goldilocks_ZoneID);
    goto LABEL_6;
  }

  if (v22)
  {
LABEL_6:
    uint64_t v29 = sub_1000BED3C(&qword_100295030);
    memcpy(v17, v18, *(void *)(*(void *)(v29 - 8) + 64LL));
    return a1;
  }

  *(void *)uint64_t v17 = *(void *)v18;
  uint64_t v23 = *((void *)v18 + 1);
  *((void *)v17 + 1) = v23;
  *((void *)v17 + 2) = *((void *)v18 + 2);
  uint64_t v24 = *((void *)v18 + 3);
  *((void *)v17 + 3) = v24;
  uint64_t v25 = *(int *)(v19 + 24);
  uint64_t v26 = &v17[v25];
  uint64_t v27 = &v18[v25];
  uint64_t v28 = *(void (**)(char *, char *, uint64_t))(v14 + 16);
  swift_bridgeObjectRetain(v23);
  swift_bridgeObjectRetain(v24);
  v28(v26, v27, v13);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v20 + 56))(v17, 0LL, 1LL, v19);
  return a1;
}

uint64_t initializeWithTake for Goldilocks_CheckDuplicatesRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  uint64_t v6 = *(int *)(a3 + 24);
  uint64_t v7 = (char *)(a1 + v6);
  uint64_t v8 = (char *)(a2 + v6);
  uint64_t v9 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32LL);
  v10(v7, v8, v9);
  uint64_t v11 = *(int *)(a3 + 28);
  uint64_t v12 = (_OWORD *)(a1 + v11);
  uint64_t v13 = (_OWORD *)(a2 + v11);
  uint64_t v14 = type metadata accessor for Goldilocks_ZoneID(0LL);
  uint64_t v15 = *(void *)(v14 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v15 + 48))(v13, 1LL, v14))
  {
    uint64_t v16 = sub_1000BED3C(&qword_100295030);
    memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64LL));
  }

  else
  {
    __int128 v17 = v13[1];
    *uint64_t v12 = *v13;
    v12[1] = v17;
    v10((char *)v12 + *(int *)(v14 + 24), (char *)v13 + *(int *)(v14 + 24), v9);
    (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0LL, 1LL, v14);
  }

  return a1;
}

void *assignWithTake for Goldilocks_CheckDuplicatesRequest(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  uint64_t v7 = a1[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = a1[2];
  a1[2] = a2[2];
  swift_bridgeObjectRelease(v8);
  uint64_t v9 = *(int *)(a3 + 24);
  uint64_t v10 = (char *)a1 + v9;
  uint64_t v11 = (char *)a2 + v9;
  uint64_t v12 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = *(void (**)(char *, char *, uint64_t))(v13 + 40);
  v14(v10, v11, v12);
  uint64_t v15 = *(int *)(a3 + 28);
  uint64_t v16 = (char *)a1 + v15;
  __int128 v17 = (char *)a2 + v15;
  uint64_t v18 = type metadata accessor for Goldilocks_ZoneID(0LL);
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v20 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v19 + 48);
  LODWORD(v11) = v20(v16, 1LL, v18);
  int v21 = v20(v17, 1LL, v18);
  if (!(_DWORD)v11)
  {
    if (!v21)
    {
      uint64_t v25 = *((void *)v17 + 1);
      uint64_t v26 = *((void *)v16 + 1);
      *(void *)uint64_t v16 = *(void *)v17;
      *((void *)v16 + 1) = v25;
      swift_bridgeObjectRelease(v26);
      uint64_t v27 = *((void *)v17 + 3);
      uint64_t v28 = *((void *)v16 + 3);
      *((void *)v16 + 2) = *((void *)v17 + 2);
      *((void *)v16 + 3) = v27;
      swift_bridgeObjectRelease(v28);
      v14(&v16[*(int *)(v18 + 24)], &v17[*(int *)(v18 + 24)], v12);
      return a1;
    }

    sub_1000CECE0((uint64_t)v16, type metadata accessor for Goldilocks_ZoneID);
    goto LABEL_6;
  }

  if (v21)
  {
LABEL_6:
    uint64_t v23 = sub_1000BED3C(&qword_100295030);
    memcpy(v16, v17, *(void *)(*(void *)(v23 - 8) + 64LL));
    return a1;
  }

  __int128 v22 = *((_OWORD *)v17 + 1);
  *(_OWORD *)uint64_t v16 = *(_OWORD *)v17;
  *((_OWORD *)v16 + 1) = v22;
  (*(void (**)(char *, char *, uint64_t))(v13 + 32))(&v16[*(int *)(v18 + 24)], &v17[*(int *)(v18 + 24)], v12);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v19 + 56))(v16, 0LL, 1LL, v18);
  return a1;
}

uint64_t getEnumTagSinglePayload for Goldilocks_CheckDuplicatesRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10010993C);
}

uint64_t sub_10010993C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100112B4C(a1, a2, a3, &qword_100295030);
}

uint64_t storeEnumTagSinglePayload for Goldilocks_CheckDuplicatesRequest( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100109954);
}

uint64_t sub_100109954(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return sub_100112C08(a1, a2, a3, a4, &qword_100295030);
}

void sub_100109960(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

uint64_t *_s22CloudKitImplementation31Goldilocks_InitiateExitResponseVwCP_0( uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v20 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v20 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v20);
  }

  else
  {
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    uint64_t v8 = a2[2];
    a1[2] = v8;
    uint64_t v9 = *(int *)(a3 + 24);
    uint64_t v10 = (char *)a1 + v9;
    uint64_t v11 = (char *)a2 + v9;
    uint64_t v12 = type metadata accessor for UnknownStorage(0LL);
    uint64_t v13 = *(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16LL);
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v8);
    v13(v10, v11, v12);
    uint64_t v14 = *(int *)(a3 + 28);
    uint64_t v15 = (uint64_t *)((char *)v4 + v14);
    uint64_t v16 = (uint64_t *)((char *)a2 + v14);
    uint64_t v17 = type metadata accessor for Goldilocks_ErrorInfo.ResultError(0LL);
    uint64_t v18 = *(void *)(v17 - 8);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v18 + 48))(v16, 1LL, v17))
    {
      uint64_t v19 = sub_1000BED3C(&qword_100293C98);
      memcpy(v15, v16, *(void *)(*(void *)(v19 - 8) + 64LL));
    }

    else
    {
      uint64_t v43 = v18;
      uint64_t v21 = v16[1];
      *uint64_t v15 = *v16;
      v15[1] = v21;
      v15[2] = v16[2];
      *((_BYTE *)v15 + 24) = *((_BYTE *)v16 + 24);
      uint64_t v22 = v16[5];
      v15[4] = v16[4];
      v15[5] = v22;
      *((_DWORD *)v15 + 12) = *((_DWORD *)v16 + 12);
      uint64_t v24 = v16[7];
      uint64_t v23 = v16[8];
      v15[7] = v24;
      v15[8] = v23;
      uint64_t v26 = v16[9];
      uint64_t v25 = v16[10];
      v15[9] = v26;
      v15[10] = v25;
      int v44 = v13;
      uint64_t v27 = v16[11];
      v15[11] = v27;
      uint64_t v28 = *(int *)(v17 + 44);
      uint64_t v29 = (char *)v15 + v28;
      uint64_t v42 = (char *)v16 + v28;
      swift_bridgeObjectRetain(v21);
      swift_bridgeObjectRetain(v22);
      swift_bridgeObjectRetain(v24);
      swift_bridgeObjectRetain(v26);
      swift_bridgeObjectRetain(v27);
      v44(v29, v42, v12);
      uint64_t v30 = *(int *)(v17 + 48);
      uint64_t v31 = (void *)((char *)v15 + v30);
      uint64_t v32 = (void *)((char *)v16 + v30);
      uint64_t v33 = type metadata accessor for Goldilocks_ErrorInfo.DatabaseFailure(0LL);
      uint64_t v34 = *(void *)(v33 - 8);
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v34 + 48))(v32, 1LL, v33))
      {
        uint64_t v35 = sub_1000BED3C(&qword_100293CA8);
        memcpy(v31, v32, *(void *)(*(void *)(v35 - 8) + 64LL));
      }

      else
      {
        uint64_t v36 = v32[1];
        *uint64_t v31 = *v32;
        v31[1] = v36;
        uint64_t v37 = v32[3];
        v31[2] = v32[2];
        v31[3] = v37;
        v31[4] = v32[4];
        *((_BYTE *)v31 + 40) = *((_BYTE *)v32 + 40);
        v31[6] = v32[6];
        *((_BYTE *)v31 + 56) = *((_BYTE *)v32 + 56);
        uint64_t v38 = *(int *)(v33 + 32);
        uint64_t v39 = (char *)v31 + v38;
        uint64_t v40 = (char *)v32 + v38;
        swift_bridgeObjectRetain(v36);
        swift_bridgeObjectRetain(v37);
        v44(v39, v40, v12);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v34 + 56))(v31, 0LL, 1LL, v33);
      }

      (*(void (**)(void *, void, uint64_t, uint64_t))(v43 + 56))(v15, 0LL, 1LL, v17);
    }
  }

  return v4;
}

uint64_t _s22CloudKitImplementation31Goldilocks_InitiateExitResponseVwxx_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + *(int *)(a2 + 24);
  uint64_t v5 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v11 = *(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8LL);
  v11(v4, v5);
  uint64_t v6 = (void *)(a1 + *(int *)(a2 + 28));
  uint64_t v7 = type metadata accessor for Goldilocks_ErrorInfo.ResultError(0LL);
  uint64_t result = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48LL))(v6, 1LL, v7);
  if (!(_DWORD)result)
  {
    swift_bridgeObjectRelease(v6[1]);
    swift_bridgeObjectRelease(v6[5]);
    swift_bridgeObjectRelease(v6[7]);
    swift_bridgeObjectRelease(v6[9]);
    swift_bridgeObjectRelease(v6[11]);
    v11((uint64_t)v6 + *(int *)(v7 + 44), v5);
    uint64_t v9 = (char *)v6 + *(int *)(v7 + 48);
    uint64_t v10 = type metadata accessor for Goldilocks_ErrorInfo.DatabaseFailure(0LL);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48LL))(v9, 1LL, v10);
    if (!(_DWORD)result)
    {
      swift_bridgeObjectRelease(*((void *)v9 + 1));
      swift_bridgeObjectRelease(*((void *)v9 + 3));
      return ((uint64_t (*)(char *, uint64_t))v11)(&v9[*(int *)(v10 + 32)], v5);
    }
  }

  return result;
}

void *_s22CloudKitImplementation31Goldilocks_InitiateExitResponseVwcp_0( void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = a2[2];
  a1[2] = v7;
  uint64_t v8 = *(int *)(a3 + 24);
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16LL);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  v12(v9, v10, v11);
  uint64_t v13 = *(int *)(a3 + 28);
  uint64_t v14 = (void *)((char *)a1 + v13);
  uint64_t v15 = (void *)((char *)a2 + v13);
  uint64_t v16 = type metadata accessor for Goldilocks_ErrorInfo.ResultError(0LL);
  uint64_t v17 = *(void *)(v16 - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v17 + 48))(v15, 1LL, v16))
  {
    uint64_t v18 = sub_1000BED3C(&qword_100293C98);
    memcpy(v14, v15, *(void *)(*(void *)(v18 - 8) + 64LL));
  }

  else
  {
    uint64_t v41 = v17;
    uint64_t v19 = v15[1];
    void *v14 = *v15;
    v14[1] = v19;
    v14[2] = v15[2];
    *((_BYTE *)v14 + 24) = *((_BYTE *)v15 + 24);
    uint64_t v20 = v15[5];
    v14[4] = v15[4];
    v14[5] = v20;
    *((_DWORD *)v14 + 12) = *((_DWORD *)v15 + 12);
    uint64_t v22 = v15[7];
    uint64_t v21 = v15[8];
    v14[7] = v22;
    v14[8] = v21;
    uint64_t v24 = v15[9];
    uint64_t v23 = v15[10];
    v14[9] = v24;
    v14[10] = v23;
    uint64_t v42 = v12;
    uint64_t v25 = v15[11];
    v14[11] = v25;
    uint64_t v26 = *(int *)(v16 + 44);
    uint64_t v27 = (char *)v14 + v26;
    uint64_t v40 = (char *)v15 + v26;
    swift_bridgeObjectRetain(v19);
    swift_bridgeObjectRetain(v20);
    swift_bridgeObjectRetain(v22);
    swift_bridgeObjectRetain(v24);
    swift_bridgeObjectRetain(v25);
    v42(v27, v40, v11);
    uint64_t v28 = *(int *)(v16 + 48);
    uint64_t v29 = (void *)((char *)v14 + v28);
    uint64_t v30 = (void *)((char *)v15 + v28);
    uint64_t v31 = type metadata accessor for Goldilocks_ErrorInfo.DatabaseFailure(0LL);
    uint64_t v32 = *(void *)(v31 - 8);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v32 + 48))(v30, 1LL, v31))
    {
      uint64_t v33 = sub_1000BED3C(&qword_100293CA8);
      memcpy(v29, v30, *(void *)(*(void *)(v33 - 8) + 64LL));
    }

    else
    {
      uint64_t v34 = v30[1];
      *uint64_t v29 = *v30;
      v29[1] = v34;
      uint64_t v35 = v30[3];
      v29[2] = v30[2];
      v29[3] = v35;
      v29[4] = v30[4];
      *((_BYTE *)v29 + 40) = *((_BYTE *)v30 + 40);
      v29[6] = v30[6];
      *((_BYTE *)v29 + 56) = *((_BYTE *)v30 + 56);
      uint64_t v36 = *(int *)(v31 + 32);
      uint64_t v37 = (char *)v29 + v36;
      uint64_t v38 = (char *)v30 + v36;
      swift_bridgeObjectRetain(v34);
      swift_bridgeObjectRetain(v35);
      v42(v37, v38, v11);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v32 + 56))(v29, 0LL, 1LL, v31);
    }

    (*(void (**)(void *, void, uint64_t, uint64_t))(v41 + 56))(v14, 0LL, 1LL, v16);
  }

  return a1;
}

uint64_t _s22CloudKitImplementation31Goldilocks_InitiateExitResponseVwtk_0( uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  uint64_t v6 = *(int *)(a3 + 24);
  uint64_t v7 = (char *)(a1 + v6);
  uint64_t v8 = (char *)(a2 + v6);
  uint64_t v9 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32LL);
  v10(v7, v8, v9);
  uint64_t v11 = *(int *)(a3 + 28);
  uint64_t v12 = (_OWORD *)(a1 + v11);
  uint64_t v13 = (_OWORD *)(a2 + v11);
  uint64_t v14 = type metadata accessor for Goldilocks_ErrorInfo.ResultError(0LL);
  uint64_t v15 = *(void *)(v14 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v15 + 48))(v13, 1LL, v14))
  {
    uint64_t v16 = sub_1000BED3C(&qword_100293C98);
    memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64LL));
  }

  else
  {
    *uint64_t v12 = *v13;
    *((void *)v12 + 2) = *((void *)v13 + 2);
    *((_BYTE *)v12 + 24) = *((_BYTE *)v13 + 24);
    v12[2] = v13[2];
    *((_DWORD *)v12 + 12) = *((_DWORD *)v13 + 12);
    *((void *)v12 + 7) = *((void *)v13 + 7);
    __int128 v17 = v13[5];
    v12[4] = v13[4];
    v12[5] = v17;
    v10((char *)v12 + *(int *)(v14 + 44), (char *)v13 + *(int *)(v14 + 44), v9);
    uint64_t v18 = *(int *)(v14 + 48);
    uint64_t v19 = (_OWORD *)((char *)v12 + v18);
    uint64_t v20 = (_OWORD *)((char *)v13 + v18);
    uint64_t v21 = type metadata accessor for Goldilocks_ErrorInfo.DatabaseFailure(0LL);
    uint64_t v22 = *(void *)(v21 - 8);
    if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v22 + 48))(v20, 1LL, v21))
    {
      uint64_t v23 = sub_1000BED3C(&qword_100293CA8);
      memcpy(v19, v20, *(void *)(*(void *)(v23 - 8) + 64LL));
    }

    else
    {
      __int128 v24 = v20[1];
      *uint64_t v19 = *v20;
      v19[1] = v24;
      *((void *)v19 + 4) = *((void *)v20 + 4);
      *((_BYTE *)v19 + 40) = *((_BYTE *)v20 + 40);
      *((void *)v19 + 6) = *((void *)v20 + 6);
      *((_BYTE *)v19 + 56) = *((_BYTE *)v20 + 56);
      v10((char *)v19 + *(int *)(v21 + 32), (char *)v20 + *(int *)(v21 + 32), v9);
      (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v22 + 56))(v19, 0LL, 1LL, v21);
    }

    (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0LL, 1LL, v14);
  }

  return a1;
}

uint64_t getEnumTagSinglePayload for Goldilocks_CheckDuplicatesResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10010A1C4);
}

uint64_t sub_10010A1C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100112B4C(a1, a2, a3, &qword_100293C98);
}

uint64_t storeEnumTagSinglePayload for Goldilocks_CheckDuplicatesResponse( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10010A1DC);
}

uint64_t sub_10010A1DC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return sub_100112C08(a1, a2, a3, a4, &qword_100293C98);
}

void *_s22CloudKitImplementation31Goldilocks_InitiateExitResponseVwca_0( void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = a2[1];
  uint64_t v7 = a1[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = a2[2];
  uint64_t v9 = a1[2];
  a1[2] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  uint64_t v10 = *(int *)(a3 + 24);
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(void (**)(char *, char *, uint64_t))(v14 + 24);
  v15(v11, v12, v13);
  uint64_t v16 = *(int *)(a3 + 28);
  uint64_t v17 = (uint64_t)a1 + v16;
  uint64_t v18 = (char *)a2 + v16;
  uint64_t v19 = type metadata accessor for Goldilocks_ErrorInfo.ResultError(0LL);
  uint64_t v20 = *(void *)(v19 - 8);
  uint64_t v21 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v20 + 48);
  LODWORD(v12) = v21(v17, 1LL, v19);
  int v22 = v21((uint64_t)v18, 1LL, v19);
  if (!(_DWORD)v12)
  {
    if (!v22)
    {
      uint64_t v43 = v14;
      *(void *)uint64_t v17 = *(void *)v18;
      uint64_t v44 = *((void *)v18 + 1);
      uint64_t v45 = *(void *)(v17 + 8);
      *(void *)(v17 + 8) = v44;
      swift_bridgeObjectRetain(v44);
      swift_bridgeObjectRelease(v45);
      uint64_t v46 = *((void *)v18 + 2);
      *(_BYTE *)(v17 + 24) = v18[24];
      *(void *)(v17 + 16) = v46;
      *(void *)(v17 + 32) = *((void *)v18 + 4);
      uint64_t v47 = *((void *)v18 + 5);
      uint64_t v48 = *(void *)(v17 + 40);
      *(void *)(v17 + 40) = v47;
      swift_bridgeObjectRetain(v47);
      swift_bridgeObjectRelease(v48);
      *(_DWORD *)(v17 + 48) = *((_DWORD *)v18 + 12);
      uint64_t v49 = *((void *)v18 + 7);
      uint64_t v50 = *(void *)(v17 + 56);
      *(void *)(v17 + 56) = v49;
      swift_bridgeObjectRetain(v49);
      swift_bridgeObjectRelease(v50);
      *(void *)(v17 + 64) = *((void *)v18 + 8);
      uint64_t v51 = *((void *)v18 + 9);
      uint64_t v52 = *(void *)(v17 + 72);
      *(void *)(v17 + 72) = v51;
      swift_bridgeObjectRetain(v51);
      swift_bridgeObjectRelease(v52);
      *(void *)(v17 + 80) = *((void *)v18 + 10);
      uint64_t v53 = *((void *)v18 + 11);
      uint64_t v54 = *(void *)(v17 + 88);
      *(void *)(v17 + 88) = v53;
      swift_bridgeObjectRetain(v53);
      swift_bridgeObjectRelease(v54);
      v15((char *)(v17 + *(int *)(v19 + 44)), &v18[*(int *)(v19 + 44)], v13);
      uint64_t v55 = *(int *)(v19 + 48);
      uint64_t v56 = v17 + v55;
      int v57 = &v18[v55];
      uint64_t v58 = type metadata accessor for Goldilocks_ErrorInfo.DatabaseFailure(0LL);
      uint64_t v59 = *(void *)(v58 - 8);
      uint64_t v60 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v59 + 48);
      LODWORD(v54) = v60(v56, 1LL, v58);
      int v61 = v60((uint64_t)v57, 1LL, v58);
      if ((_DWORD)v54)
      {
        if (!v61)
        {
          *(void *)uint64_t v56 = *(void *)v57;
          uint64_t v62 = *((void *)v57 + 1);
          *(void *)(v56 + 8) = v62;
          *(void *)(v56 + 16) = *((void *)v57 + 2);
          uint64_t v63 = *((void *)v57 + 3);
          *(void *)(v56 + 24) = v63;
          uint64_t v64 = *((void *)v57 + 4);
          *(_BYTE *)(v56 + 40) = v57[40];
          *(void *)(v56 + 32) = v64;
          uint64_t v65 = *((void *)v57 + 6);
          *(_BYTE *)(v56 + 56) = v57[56];
          *(void *)(v56 + 48) = v65;
          uint64_t v66 = *(int *)(v58 + 32);
          uint64_t v67 = v56 + v66;
          uint64_t v68 = &v57[v66];
          uint64_t v69 = *(void (**)(uint64_t, char *, uint64_t))(v43 + 16);
          swift_bridgeObjectRetain(v62);
          swift_bridgeObjectRetain(v63);
          v69(v67, v68, v13);
          (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v59 + 56))(v56, 0LL, 1LL, v58);
          return a1;
        }
      }

      else
      {
        if (!v61)
        {
          *(void *)uint64_t v56 = *(void *)v57;
          uint64_t v78 = *((void *)v57 + 1);
          uint64_t v79 = *(void *)(v56 + 8);
          *(void *)(v56 + 8) = v78;
          swift_bridgeObjectRetain(v78);
          swift_bridgeObjectRelease(v79);
          *(void *)(v56 + 16) = *((void *)v57 + 2);
          uint64_t v80 = *((void *)v57 + 3);
          uint64_t v81 = *(void *)(v56 + 24);
          *(void *)(v56 + 24) = v80;
          swift_bridgeObjectRetain(v80);
          swift_bridgeObjectRelease(v81);
          uint64_t v82 = *((void *)v57 + 4);
          *(_BYTE *)(v56 + 40) = v57[40];
          *(void *)(v56 + 32) = v82;
          uint64_t v83 = *((void *)v57 + 6);
          *(_BYTE *)(v56 + 56) = v57[56];
          *(void *)(v56 + 48) = v83;
          v15((char *)(v56 + *(int *)(v58 + 32)), &v57[*(int *)(v58 + 32)], v13);
          return a1;
        }

        sub_1000CECE0(v56, type metadata accessor for Goldilocks_ErrorInfo.DatabaseFailure);
      }

      size_t v40 = *(void *)(*(void *)(sub_1000BED3C(&qword_100293CA8) - 8) + 64LL);
      uint64_t v41 = (void *)v56;
      uint64_t v42 = v57;
      goto LABEL_8;
    }

    sub_1000CECE0(v17, type metadata accessor for Goldilocks_ErrorInfo.ResultError);
LABEL_7:
    size_t v40 = *(void *)(*(void *)(sub_1000BED3C(&qword_100293C98) - 8) + 64LL);
    uint64_t v41 = (void *)v17;
    uint64_t v42 = v18;
LABEL_8:
    memcpy(v41, v42, v40);
    return a1;
  }

  if (v22) {
    goto LABEL_7;
  }
  uint64_t v87 = v20;
  *(void *)uint64_t v17 = *(void *)v18;
  uint64_t v23 = *((void *)v18 + 1);
  *(void *)(v17 + 8) = v23;
  uint64_t v24 = *((void *)v18 + 2);
  *(_BYTE *)(v17 + 24) = v18[24];
  *(void *)(v17 + 16) = v24;
  *(void *)(v17 + 32) = *((void *)v18 + 4);
  uint64_t v25 = *((void *)v18 + 5);
  *(void *)(v17 + 40) = v25;
  *(_DWORD *)(v17 + 48) = *((_DWORD *)v18 + 12);
  uint64_t v26 = *((void *)v18 + 7);
  *(void *)(v17 + 56) = v26;
  *(void *)(v17 + 64) = *((void *)v18 + 8);
  uint64_t v27 = v14;
  uint64_t v28 = *((void *)v18 + 9);
  *(void *)(v17 + 72) = v28;
  *(void *)(v17 + 80) = *((void *)v18 + 10);
  uint64_t v29 = v13;
  uint64_t v30 = *((void *)v18 + 11);
  *(void *)(v17 + 88) = v30;
  uint64_t v31 = *(int *)(v19 + 44);
  v84 = &v18[v31];
  uint64_t v85 = v17 + v31;
  uint64_t v32 = *(void (**)(uint64_t, char *, uint64_t))(v27 + 16);
  swift_bridgeObjectRetain(v23);
  swift_bridgeObjectRetain(v25);
  swift_bridgeObjectRetain(v26);
  swift_bridgeObjectRetain(v28);
  swift_bridgeObjectRetain(v30);
  uint64_t v33 = v85;
  uint64_t v86 = v29;
  v32(v33, v84, v29);
  uint64_t v34 = *(int *)(v19 + 48);
  uint64_t v35 = (void *)(v17 + v34);
  uint64_t v36 = &v18[v34];
  uint64_t v37 = type metadata accessor for Goldilocks_ErrorInfo.DatabaseFailure(0LL);
  uint64_t v38 = *(void *)(v37 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v38 + 48))(v36, 1LL, v37))
  {
    uint64_t v39 = sub_1000BED3C(&qword_100293CA8);
    memcpy(v35, v36, *(void *)(*(void *)(v39 - 8) + 64LL));
  }

  else
  {
    *uint64_t v35 = *(void *)v36;
    uint64_t v70 = *((void *)v36 + 1);
    v35[1] = v70;
    v35[2] = *((void *)v36 + 2);
    uint64_t v71 = *((void *)v36 + 3);
    v35[3] = v71;
    uint64_t v72 = *((void *)v36 + 4);
    *((_BYTE *)v35 + 40) = v36[40];
    v35[4] = v72;
    uint64_t v73 = *((void *)v36 + 6);
    *((_BYTE *)v35 + 56) = v36[56];
    v35[6] = v73;
    uint64_t v74 = *(int *)(v37 + 32);
    uint64_t v75 = (char *)v35 + v74;
    uint64_t v76 = &v36[v74];
    swift_bridgeObjectRetain(v70);
    swift_bridgeObjectRetain(v71);
    v32((uint64_t)v75, v76, v86);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v38 + 56))(v35, 0LL, 1LL, v37);
  }

  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v87 + 56))(v17, 0LL, 1LL, v19);
  return a1;
}

void *_s22CloudKitImplementation31Goldilocks_InitiateExitResponseVwta_0( void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  uint64_t v7 = a1[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = a1[2];
  a1[2] = a2[2];
  swift_bridgeObjectRelease(v8);
  uint64_t v9 = *(int *)(a3 + 24);
  uint64_t v10 = (char *)a1 + v9;
  uint64_t v11 = (char *)a2 + v9;
  uint64_t v12 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = *(void (**)(char *, char *, uint64_t))(v13 + 40);
  v14(v10, v11, v12);
  uint64_t v15 = *(int *)(a3 + 28);
  uint64_t v16 = (uint64_t)a1 + v15;
  uint64_t v17 = (char *)a2 + v15;
  uint64_t v18 = type metadata accessor for Goldilocks_ErrorInfo.ResultError(0LL);
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v20 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v19 + 48);
  LODWORD(v11) = v20(v16, 1LL, v18);
  int v21 = v20((uint64_t)v17, 1LL, v18);
  if (!(_DWORD)v11)
  {
    if (!v21)
    {
      uint64_t v33 = *((void *)v17 + 1);
      uint64_t v34 = *(void *)(v16 + 8);
      *(void *)uint64_t v16 = *(void *)v17;
      *(void *)(v16 + 8) = v33;
      swift_bridgeObjectRelease(v34);
      *(void *)(v16 + 16) = *((void *)v17 + 2);
      *(_BYTE *)(v16 + 24) = v17[24];
      uint64_t v35 = *((void *)v17 + 5);
      uint64_t v36 = *(void *)(v16 + 40);
      *(void *)(v16 + 32) = *((void *)v17 + 4);
      *(void *)(v16 + 40) = v35;
      swift_bridgeObjectRelease(v36);
      *(_DWORD *)(v16 + 48) = *((_DWORD *)v17 + 12);
      uint64_t v37 = *(void *)(v16 + 56);
      *(void *)(v16 + 56) = *((void *)v17 + 7);
      swift_bridgeObjectRelease(v37);
      uint64_t v38 = *((void *)v17 + 9);
      uint64_t v39 = *(void *)(v16 + 72);
      *(void *)(v16 + 64) = *((void *)v17 + 8);
      *(void *)(v16 + 72) = v38;
      swift_bridgeObjectRelease(v39);
      uint64_t v40 = *((void *)v17 + 11);
      uint64_t v41 = *(void *)(v16 + 88);
      *(void *)(v16 + 80) = *((void *)v17 + 10);
      *(void *)(v16 + 88) = v40;
      swift_bridgeObjectRelease(v41);
      v14((char *)(v16 + *(int *)(v18 + 44)), &v17[*(int *)(v18 + 44)], v12);
      uint64_t v42 = *(int *)(v18 + 48);
      uint64_t v43 = v16 + v42;
      uint64_t v44 = &v17[v42];
      uint64_t v45 = type metadata accessor for Goldilocks_ErrorInfo.DatabaseFailure(0LL);
      uint64_t v46 = *(void *)(v45 - 8);
      uint64_t v47 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v46 + 48);
      int v48 = v47(v43, 1LL, v45);
      int v49 = v47((uint64_t)v44, 1LL, v45);
      if (v48)
      {
        if (!v49)
        {
          __int128 v50 = *((_OWORD *)v44 + 1);
          *(_OWORD *)uint64_t v43 = *(_OWORD *)v44;
          *(_OWORD *)(v43 + 16) = v50;
          *(void *)(v43 + 32) = *((void *)v44 + 4);
          *(_BYTE *)(v43 + 40) = v44[40];
          *(void *)(v43 + 48) = *((void *)v44 + 6);
          *(_BYTE *)(v43 + 56) = v44[56];
          (*(void (**)(uint64_t, char *, uint64_t))(v13 + 32))( v43 + *(int *)(v45 + 32),  &v44[*(int *)(v45 + 32)],  v12);
          (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v46 + 56))(v43, 0LL, 1LL, v45);
          return a1;
        }
      }

      else
      {
        if (!v49)
        {
          uint64_t v53 = *((void *)v44 + 1);
          uint64_t v54 = *(void *)(v43 + 8);
          *(void *)uint64_t v43 = *(void *)v44;
          *(void *)(v43 + 8) = v53;
          swift_bridgeObjectRelease(v54);
          uint64_t v55 = *((void *)v44 + 3);
          uint64_t v56 = *(void *)(v43 + 24);
          *(void *)(v43 + 16) = *((void *)v44 + 2);
          *(void *)(v43 + 24) = v55;
          swift_bridgeObjectRelease(v56);
          *(void *)(v43 + 32) = *((void *)v44 + 4);
          *(_BYTE *)(v43 + 40) = v44[40];
          *(void *)(v43 + 48) = *((void *)v44 + 6);
          *(_BYTE *)(v43 + 56) = v44[56];
          v14((char *)(v43 + *(int *)(v45 + 32)), &v44[*(int *)(v45 + 32)], v12);
          return a1;
        }

        sub_1000CECE0(v43, type metadata accessor for Goldilocks_ErrorInfo.DatabaseFailure);
      }

      size_t v30 = *(void *)(*(void *)(sub_1000BED3C(&qword_100293CA8) - 8) + 64LL);
      uint64_t v31 = (void *)v43;
      uint64_t v32 = v44;
      goto LABEL_8;
    }

    sub_1000CECE0(v16, type metadata accessor for Goldilocks_ErrorInfo.ResultError);
LABEL_7:
    size_t v30 = *(void *)(*(void *)(sub_1000BED3C(&qword_100293C98) - 8) + 64LL);
    uint64_t v31 = (void *)v16;
    uint64_t v32 = v17;
LABEL_8:
    memcpy(v31, v32, v30);
    return a1;
  }

  if (v21) {
    goto LABEL_7;
  }
  *(_OWORD *)uint64_t v16 = *(_OWORD *)v17;
  *(_BYTE *)(v16 + 24) = v17[24];
  *(void *)(v16 + 16) = *((void *)v17 + 2);
  *(_OWORD *)(v16 + 32) = *((_OWORD *)v17 + 2);
  *(_DWORD *)(v16 + 48) = *((_DWORD *)v17 + 12);
  *(void *)(v16 + 56) = *((void *)v17 + 7);
  __int128 v22 = *((_OWORD *)v17 + 5);
  *(_OWORD *)(v16 + 64) = *((_OWORD *)v17 + 4);
  *(_OWORD *)(v16 + 80) = v22;
  uint64_t v23 = *(void (**)(uint64_t, char *, uint64_t))(v13 + 32);
  v23(v16 + *(int *)(v18 + 44), &v17[*(int *)(v18 + 44)], v12);
  uint64_t v24 = *(int *)(v18 + 48);
  uint64_t v25 = (_OWORD *)(v16 + v24);
  uint64_t v26 = &v17[v24];
  uint64_t v27 = type metadata accessor for Goldilocks_ErrorInfo.DatabaseFailure(0LL);
  uint64_t v28 = *(void *)(v27 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48))(v26, 1LL, v27))
  {
    uint64_t v29 = sub_1000BED3C(&qword_100293CA8);
    memcpy(v25, v26, *(void *)(*(void *)(v29 - 8) + 64LL));
  }

  else
  {
    __int128 v51 = *((_OWORD *)v26 + 1);
    _OWORD *v25 = *(_OWORD *)v26;
    v25[1] = v51;
    *((void *)v25 + 4) = *((void *)v26 + 4);
    *((_BYTE *)v25 + 40) = v26[40];
    *((void *)v25 + 6) = *((void *)v26 + 6);
    *((_BYTE *)v25 + 56) = v26[56];
    v23((uint64_t)v25 + *(int *)(v27 + 32), &v26[*(int *)(v27 + 32)], v12);
    (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v28 + 56))(v25, 0LL, 1LL, v27);
  }

  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v19 + 56))(v16, 0LL, 1LL, v18);
  return a1;
}

uint64_t getEnumTagSinglePayload for Goldilocks_DuplicateState(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10010AAF8);
}

uint64_t sub_10010AAF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100112B4C(a1, a2, a3, &qword_100293C98);
}

uint64_t storeEnumTagSinglePayload for Goldilocks_DuplicateState( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10010AB10);
}

uint64_t sub_10010AB10(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return sub_100112C08(a1, a2, a3, a4, &qword_100293C98);
}

uint64_t getEnumTagSinglePayload for Goldilocks_FoundDuplicate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10010AB40);
}

uint64_t sub_10010AB40(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100112B4C(a1, a2, a3, &qword_100295030);
}

uint64_t storeEnumTagSinglePayload for Goldilocks_FoundDuplicate( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10010AB58);
}

uint64_t sub_10010AB58(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return sub_100112C08(a1, a2, a3, a4, &qword_100295030);
}

void sub_10010AB64(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

uint64_t getEnumTagSinglePayload for Goldilocks_ZoneID(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10010AB8C);
}

uint64_t sub_10010AB8C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }

  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage(0LL);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48LL))( a1 + *(int *)(a3 + 24),  a2,  v8);
  }

uint64_t storeEnumTagSinglePayload for Goldilocks_ZoneID(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10010AC14);
}

uint64_t sub_10010AC14(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }

  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage(0LL);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL))( v5 + *(int *)(a4 + 24),  a2,  a2,  v7);
  }

  return result;
}

uint64_t sub_10010AC88(uint64_t a1)
{
  v4[0] = &unk_100219570;
  v4[1] = &unk_100219570;
  uint64_t result = type metadata accessor for UnknownStorage(319LL);
  if (v3 <= 0x3F)
  {
    v4[2] = *(void *)(result - 8) + 64LL;
    swift_initStructMetadata(a1, 256LL, 3LL, v4, a1 + 16);
    return 0LL;
  }

  return result;
}

void *initializeBufferWithCopyOfBuffer for Goldilocks_ExitMoveBatchRequest( uint64_t a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v4 = (void *)a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v19 = *a2;
    *unint64_t v4 = *a2;
    unint64_t v4 = (void *)(v19 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v19);
  }

  else
  {
    uint64_t v7 = a2[1];
    *(void *)a1 = *a2;
    *(void *)(a1 + 8) = v7;
    *(_DWORD *)(a1 + 16) = *((_DWORD *)a2 + 4);
    uint64_t v8 = *(int *)(a3 + 24);
    uint64_t v9 = a1 + v8;
    uint64_t v10 = (uint64_t)a2 + v8;
    uint64_t v11 = type metadata accessor for UnknownStorage(0LL);
    uint64_t v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 16LL);
    swift_bridgeObjectRetain(v7);
    v12(v9, v10, v11);
    uint64_t v13 = *(int *)(a3 + 28);
    uint64_t v14 = (void *)((char *)v4 + v13);
    uint64_t v15 = (uint64_t *)((char *)a2 + v13);
    uint64_t v16 = type metadata accessor for Goldilocks_ZoneID(0LL);
    uint64_t v17 = *(void *)(v16 - 8);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v17 + 48))(v15, 1LL, v16))
    {
      uint64_t v18 = sub_1000BED3C(&qword_100295030);
      memcpy(v14, v15, *(void *)(*(void *)(v18 - 8) + 64LL));
    }

    else
    {
      uint64_t v20 = v15[1];
      void *v14 = *v15;
      v14[1] = v20;
      uint64_t v21 = v15[3];
      v14[2] = v15[2];
      v14[3] = v21;
      uint64_t v22 = *(int *)(v16 + 24);
      uint64_t v23 = (char *)v14 + v22;
      uint64_t v24 = (char *)v15 + v22;
      swift_bridgeObjectRetain(v20);
      swift_bridgeObjectRetain(v21);
      v12((uint64_t)v23, (uint64_t)v24, v11);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v17 + 56))(v14, 0LL, 1LL, v16);
    }
  }

  return v4;
}

uint64_t _s22CloudKitImplementation25Goldilocks_FoundDuplicateVwxx_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + *(int *)(a2 + 24);
  uint64_t v5 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v9 = *(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8LL);
  v9(v4, v5);
  uint64_t v6 = a1 + *(int *)(a2 + 28);
  uint64_t v7 = type metadata accessor for Goldilocks_ZoneID(0LL);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48LL))(v6, 1LL, v7);
  if (!(_DWORD)result)
  {
    swift_bridgeObjectRelease(*(void *)(v6 + 8));
    swift_bridgeObjectRelease(*(void *)(v6 + 24));
    return ((uint64_t (*)(uint64_t, uint64_t))v9)(v6 + *(int *)(v7 + 24), v5);
  }

  return result;
}

uint64_t initializeWithCopy for Goldilocks_ExitMoveBatchRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  uint64_t v7 = *(int *)(a3 + 24);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16LL);
  swift_bridgeObjectRetain(v6);
  v11(v8, v9, v10);
  uint64_t v12 = *(int *)(a3 + 28);
  uint64_t v13 = (void *)(a1 + v12);
  uint64_t v14 = (void *)(a2 + v12);
  uint64_t v15 = type metadata accessor for Goldilocks_ZoneID(0LL);
  uint64_t v16 = *(void *)(v15 - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v16 + 48))(v14, 1LL, v15))
  {
    uint64_t v17 = sub_1000BED3C(&qword_100295030);
    memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64LL));
  }

  else
  {
    uint64_t v18 = v14[1];
    *uint64_t v13 = *v14;
    v13[1] = v18;
    uint64_t v19 = v14[3];
    v13[2] = v14[2];
    v13[3] = v19;
    uint64_t v20 = *(int *)(v15 + 24);
    uint64_t v21 = (char *)v13 + v20;
    uint64_t v22 = (char *)v14 + v20;
    swift_bridgeObjectRetain(v18);
    swift_bridgeObjectRetain(v19);
    v11((uint64_t)v21, (uint64_t)v22, v10);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0LL, 1LL, v15);
  }

  return a1;
}

uint64_t assignWithCopy for Goldilocks_ExitMoveBatchRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v6 = *(void *)(a2 + 8);
  uint64_t v7 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  uint64_t v8 = *(int *)(a3 + 24);
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 24);
  v13(v9, v10, v11);
  uint64_t v14 = *(int *)(a3 + 28);
  uint64_t v15 = (void *)(a1 + v14);
  uint64_t v16 = (void *)(a2 + v14);
  uint64_t v17 = type metadata accessor for Goldilocks_ZoneID(0LL);
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v19 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v18 + 48);
  LODWORD(v10) = v19(v15, 1LL, v17);
  int v20 = v19(v16, 1LL, v17);
  if (!(_DWORD)v10)
  {
    if (!v20)
    {
      *uint64_t v15 = *v16;
      uint64_t v29 = v16[1];
      uint64_t v30 = v15[1];
      v15[1] = v29;
      swift_bridgeObjectRetain(v29);
      swift_bridgeObjectRelease(v30);
      v15[2] = v16[2];
      uint64_t v31 = v16[3];
      uint64_t v32 = v15[3];
      v15[3] = v31;
      swift_bridgeObjectRetain(v31);
      swift_bridgeObjectRelease(v32);
      v13((uint64_t)v15 + *(int *)(v17 + 24), (uint64_t)v16 + *(int *)(v17 + 24), v11);
      return a1;
    }

    sub_1000CECE0((uint64_t)v15, type metadata accessor for Goldilocks_ZoneID);
    goto LABEL_6;
  }

  if (v20)
  {
LABEL_6:
    uint64_t v27 = sub_1000BED3C(&qword_100295030);
    memcpy(v15, v16, *(void *)(*(void *)(v27 - 8) + 64LL));
    return a1;
  }

  *uint64_t v15 = *v16;
  uint64_t v21 = v16[1];
  v15[1] = v21;
  v15[2] = v16[2];
  uint64_t v22 = v16[3];
  v15[3] = v22;
  uint64_t v23 = *(int *)(v17 + 24);
  uint64_t v24 = (char *)v15 + v23;
  uint64_t v25 = (char *)v16 + v23;
  uint64_t v26 = *(void (**)(char *, char *, uint64_t))(v12 + 16);
  swift_bridgeObjectRetain(v21);
  swift_bridgeObjectRetain(v22);
  v26(v24, v25, v11);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v18 + 56))(v15, 0LL, 1LL, v17);
  return a1;
}

uint64_t initializeWithTake for Goldilocks_ExitMoveBatchRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  uint64_t v6 = *(int *)(a3 + 24);
  uint64_t v7 = (char *)(a1 + v6);
  uint64_t v8 = (char *)(a2 + v6);
  uint64_t v9 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32LL);
  v10(v7, v8, v9);
  uint64_t v11 = *(int *)(a3 + 28);
  uint64_t v12 = (_OWORD *)(a1 + v11);
  uint64_t v13 = (_OWORD *)(a2 + v11);
  uint64_t v14 = type metadata accessor for Goldilocks_ZoneID(0LL);
  uint64_t v15 = *(void *)(v14 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v15 + 48))(v13, 1LL, v14))
  {
    uint64_t v16 = sub_1000BED3C(&qword_100295030);
    memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64LL));
  }

  else
  {
    __int128 v17 = v13[1];
    *uint64_t v12 = *v13;
    v12[1] = v17;
    v10((char *)v12 + *(int *)(v14 + 24), (char *)v13 + *(int *)(v14 + 24), v9);
    (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0LL, 1LL, v14);
  }

  return a1;
}

uint64_t assignWithTake for Goldilocks_ExitMoveBatchRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  uint64_t v7 = *(void *)(a1 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  swift_bridgeObjectRelease(v7);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  uint64_t v8 = *(int *)(a3 + 24);
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 40);
  v13(v9, v10, v11);
  uint64_t v14 = *(int *)(a3 + 28);
  uint64_t v15 = (void *)(a1 + v14);
  uint64_t v16 = (void *)(a2 + v14);
  uint64_t v17 = type metadata accessor for Goldilocks_ZoneID(0LL);
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v19 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v18 + 48);
  LODWORD(v10) = v19(v15, 1LL, v17);
  int v20 = v19(v16, 1LL, v17);
  if (!(_DWORD)v10)
  {
    if (!v20)
    {
      uint64_t v24 = v16[1];
      uint64_t v25 = v15[1];
      *uint64_t v15 = *v16;
      v15[1] = v24;
      swift_bridgeObjectRelease(v25);
      uint64_t v26 = v16[3];
      uint64_t v27 = v15[3];
      v15[2] = v16[2];
      v15[3] = v26;
      swift_bridgeObjectRelease(v27);
      v13((uint64_t)v15 + *(int *)(v17 + 24), (uint64_t)v16 + *(int *)(v17 + 24), v11);
      return a1;
    }

    sub_1000CECE0((uint64_t)v15, type metadata accessor for Goldilocks_ZoneID);
    goto LABEL_6;
  }

  if (v20)
  {
LABEL_6:
    uint64_t v22 = sub_1000BED3C(&qword_100295030);
    memcpy(v15, v16, *(void *)(*(void *)(v22 - 8) + 64LL));
    return a1;
  }

  __int128 v21 = *((_OWORD *)v16 + 1);
  *(_OWORD *)uint64_t v15 = *(_OWORD *)v16;
  *((_OWORD *)v15 + 1) = v21;
  (*(void (**)(char *, char *, uint64_t))(v12 + 32))( (char *)v15 + *(int *)(v17 + 24),  (char *)v16 + *(int *)(v17 + 24),  v11);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v18 + 56))(v15, 0LL, 1LL, v17);
  return a1;
}

uint64_t getEnumTagSinglePayload for Goldilocks_ExitMoveBatchRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10010B4DC);
}

uint64_t sub_10010B4DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100112B4C(a1, a2, a3, &qword_100295030);
}

uint64_t storeEnumTagSinglePayload for Goldilocks_ExitMoveBatchRequest( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10010B4F4);
}

uint64_t sub_10010B4F4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return sub_100112C08(a1, a2, a3, a4, &qword_100295030);
}

void sub_10010B500(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void *initializeBufferWithCopyOfBuffer for Goldilocks_ExitMoveBatchResponse( uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = (void *)a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v21 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (void *)(v21 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v21);
  }

  else
  {
    uint64_t v7 = a2[1];
    *(void *)a1 = *a2;
    *(void *)(a1 + 8) = v7;
    *(_OWORD *)(a1 + 16) = *((_OWORD *)a2 + 1);
    uint64_t v8 = a2[4];
    uint64_t v9 = a2[5];
    *(_BYTE *)(a1 + 48) = *((_BYTE *)a2 + 48);
    uint64_t v10 = *(int *)(a3 + 36);
    uint64_t v11 = a1 + v10;
    uint64_t v12 = (uint64_t)a2 + v10;
    *(void *)(a1 + 32) = v8;
    *(void *)(a1 + 40) = v9;
    uint64_t v13 = type metadata accessor for UnknownStorage(0LL);
    uint64_t v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 16LL);
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v9);
    v14(v11, v12, v13);
    uint64_t v15 = *(int *)(a3 + 40);
    uint64_t v16 = (void *)((char *)v4 + v15);
    uint64_t v17 = (uint64_t *)((char *)a2 + v15);
    uint64_t v18 = type metadata accessor for Goldilocks_ErrorInfo.ResultError(0LL);
    uint64_t v19 = *(void *)(v18 - 8);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v19 + 48))(v17, 1LL, v18))
    {
      uint64_t v20 = sub_1000BED3C(&qword_100293C98);
      memcpy(v16, v17, *(void *)(*(void *)(v20 - 8) + 64LL));
    }

    else
    {
      uint64_t v46 = v19;
      uint64_t v22 = v17[1];
      *uint64_t v16 = *v17;
      v16[1] = v22;
      v16[2] = v17[2];
      *((_BYTE *)v16 + 24) = *((_BYTE *)v17 + 24);
      uint64_t v23 = v17[5];
      v16[4] = v17[4];
      v16[5] = v23;
      *((_DWORD *)v16 + 12) = *((_DWORD *)v17 + 12);
      uint64_t v25 = v17[7];
      uint64_t v24 = v17[8];
      v16[7] = v25;
      v16[8] = v24;
      uint64_t v27 = v17[9];
      uint64_t v26 = v17[10];
      v16[9] = v27;
      v16[10] = v26;
      uint64_t v28 = v17[11];
      v16[11] = v28;
      uint64_t v29 = *(int *)(v18 + 44);
      uint64_t v43 = (char *)v17 + v29;
      uint64_t v44 = (char *)v16 + v29;
      swift_bridgeObjectRetain(v22);
      swift_bridgeObjectRetain(v23);
      swift_bridgeObjectRetain(v25);
      swift_bridgeObjectRetain(v27);
      swift_bridgeObjectRetain(v28);
      uint64_t v30 = v44;
      uint64_t v45 = (void (*)(char *, char *, uint64_t))v14;
      v14((uint64_t)v30, (uint64_t)v43, v13);
      uint64_t v31 = *(int *)(v18 + 48);
      uint64_t v32 = (void *)((char *)v16 + v31);
      uint64_t v33 = (void *)((char *)v17 + v31);
      uint64_t v34 = type metadata accessor for Goldilocks_ErrorInfo.DatabaseFailure(0LL);
      uint64_t v35 = *(void *)(v34 - 8);
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v35 + 48))(v33, 1LL, v34))
      {
        uint64_t v36 = sub_1000BED3C(&qword_100293CA8);
        memcpy(v32, v33, *(void *)(*(void *)(v36 - 8) + 64LL));
      }

      else
      {
        uint64_t v37 = v33[1];
        *uint64_t v32 = *v33;
        v32[1] = v37;
        uint64_t v38 = v33[3];
        v32[2] = v33[2];
        v32[3] = v38;
        v32[4] = v33[4];
        *((_BYTE *)v32 + 40) = *((_BYTE *)v33 + 40);
        v32[6] = v33[6];
        *((_BYTE *)v32 + 56) = *((_BYTE *)v33 + 56);
        uint64_t v39 = *(int *)(v34 + 32);
        uint64_t v40 = (char *)v32 + v39;
        uint64_t v41 = (char *)v33 + v39;
        swift_bridgeObjectRetain(v37);
        swift_bridgeObjectRetain(v38);
        v45(v40, v41, v13);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v35 + 56))(v32, 0LL, 1LL, v34);
      }

      (*(void (**)(void *, void, uint64_t, uint64_t))(v46 + 56))(v16, 0LL, 1LL, v18);
    }
  }

  return v4;
}

uint64_t destroy for Goldilocks_ExitMoveBatchResponse(void *a1, uint64_t a2)
{
  uint64_t v4 = (char *)a1 + *(int *)(a2 + 36);
  uint64_t v5 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v11 = *(void (**)(char *, uint64_t))(*(void *)(v5 - 8) + 8LL);
  v11(v4, v5);
  uint64_t v6 = (char *)a1 + *(int *)(a2 + 40);
  uint64_t v7 = type metadata accessor for Goldilocks_ErrorInfo.ResultError(0LL);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48LL))(v6, 1LL, v7);
  if (!(_DWORD)result)
  {
    swift_bridgeObjectRelease(*((void *)v6 + 1));
    swift_bridgeObjectRelease(*((void *)v6 + 5));
    swift_bridgeObjectRelease(*((void *)v6 + 7));
    swift_bridgeObjectRelease(*((void *)v6 + 9));
    swift_bridgeObjectRelease(*((void *)v6 + 11));
    v11(&v6[*(int *)(v7 + 44)], v5);
    uint64_t v9 = &v6[*(int *)(v7 + 48)];
    uint64_t v10 = type metadata accessor for Goldilocks_ErrorInfo.DatabaseFailure(0LL);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48LL))(v9, 1LL, v10);
    if (!(_DWORD)result)
    {
      swift_bridgeObjectRelease(*((void *)v9 + 1));
      swift_bridgeObjectRelease(*((void *)v9 + 3));
      return ((uint64_t (*)(char *, uint64_t))v11)(&v9[*(int *)(v10 + 32)], v5);
    }
  }

  return result;
}

uint64_t initializeWithCopy for Goldilocks_ExitMoveBatchResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  uint64_t v7 = *(void *)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  uint64_t v9 = *(int *)(a3 + 36);
  uint64_t v10 = a1 + v9;
  uint64_t v11 = a2 + v9;
  *(void *)(a1 + 32) = v7;
  *(void *)(a1 + 40) = v8;
  uint64_t v12 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 16LL);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  v13(v10, v11, v12);
  uint64_t v14 = *(int *)(a3 + 40);
  uint64_t v15 = (void *)(a1 + v14);
  uint64_t v16 = (void *)(a2 + v14);
  uint64_t v17 = type metadata accessor for Goldilocks_ErrorInfo.ResultError(0LL);
  uint64_t v18 = *(void *)(v17 - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v18 + 48))(v16, 1LL, v17))
  {
    uint64_t v19 = sub_1000BED3C(&qword_100293C98);
    memcpy(v15, v16, *(void *)(*(void *)(v19 - 8) + 64LL));
  }

  else
  {
    uint64_t v44 = v18;
    uint64_t v20 = v16[1];
    *uint64_t v15 = *v16;
    v15[1] = v20;
    v15[2] = v16[2];
    *((_BYTE *)v15 + 24) = *((_BYTE *)v16 + 24);
    uint64_t v21 = v16[5];
    v15[4] = v16[4];
    v15[5] = v21;
    *((_DWORD *)v15 + 12) = *((_DWORD *)v16 + 12);
    uint64_t v23 = v16[7];
    uint64_t v22 = v16[8];
    v15[7] = v23;
    v15[8] = v22;
    uint64_t v25 = v16[9];
    uint64_t v24 = v16[10];
    v15[9] = v25;
    v15[10] = v24;
    uint64_t v26 = v16[11];
    v15[11] = v26;
    uint64_t v27 = *(int *)(v17 + 44);
    uint64_t v41 = (char *)v16 + v27;
    uint64_t v42 = (char *)v15 + v27;
    swift_bridgeObjectRetain(v20);
    swift_bridgeObjectRetain(v21);
    swift_bridgeObjectRetain(v23);
    swift_bridgeObjectRetain(v25);
    swift_bridgeObjectRetain(v26);
    uint64_t v28 = v42;
    uint64_t v43 = (void (*)(char *, char *, uint64_t))v13;
    v13((uint64_t)v28, (uint64_t)v41, v12);
    uint64_t v29 = *(int *)(v17 + 48);
    uint64_t v30 = (void *)((char *)v15 + v29);
    uint64_t v31 = (void *)((char *)v16 + v29);
    uint64_t v32 = type metadata accessor for Goldilocks_ErrorInfo.DatabaseFailure(0LL);
    uint64_t v33 = *(void *)(v32 - 8);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v33 + 48))(v31, 1LL, v32))
    {
      uint64_t v34 = sub_1000BED3C(&qword_100293CA8);
      memcpy(v30, v31, *(void *)(*(void *)(v34 - 8) + 64LL));
    }

    else
    {
      uint64_t v35 = v31[1];
      *uint64_t v30 = *v31;
      v30[1] = v35;
      uint64_t v36 = v31[3];
      v30[2] = v31[2];
      v30[3] = v36;
      v30[4] = v31[4];
      *((_BYTE *)v30 + 40) = *((_BYTE *)v31 + 40);
      v30[6] = v31[6];
      *((_BYTE *)v30 + 56) = *((_BYTE *)v31 + 56);
      uint64_t v37 = *(int *)(v32 + 32);
      uint64_t v38 = (char *)v30 + v37;
      uint64_t v39 = (char *)v31 + v37;
      swift_bridgeObjectRetain(v35);
      swift_bridgeObjectRetain(v36);
      v43(v38, v39, v12);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v33 + 56))(v30, 0LL, 1LL, v32);
    }

    (*(void (**)(void *, void, uint64_t, uint64_t))(v44 + 56))(v15, 0LL, 1LL, v17);
  }

  return a1;
}

uint64_t assignWithCopy for Goldilocks_ExitMoveBatchResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v6 = *(void *)(a2 + 8);
  uint64_t v7 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  uint64_t v8 = *(void *)(a2 + 32);
  uint64_t v9 = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  uint64_t v10 = *(void *)(a2 + 40);
  uint64_t v11 = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  uint64_t v12 = *(int *)(a3 + 36);
  uint64_t v13 = a1 + v12;
  uint64_t v14 = a2 + v12;
  uint64_t v15 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = *(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 24);
  v17(v13, v14, v15);
  uint64_t v18 = *(int *)(a3 + 40);
  uint64_t v19 = a1 + v18;
  uint64_t v20 = a2 + v18;
  uint64_t v21 = type metadata accessor for Goldilocks_ErrorInfo.ResultError(0LL);
  uint64_t v22 = *(void *)(v21 - 8);
  uint64_t v23 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v22 + 48);
  LODWORD(v14) = v23(v19, 1LL, v21);
  int v24 = v23(v20, 1LL, v21);
  if (!(_DWORD)v14)
  {
    if (!v24)
    {
      uint64_t v45 = v16;
      *(void *)uint64_t v19 = *(void *)v20;
      uint64_t v46 = *(void *)(v20 + 8);
      uint64_t v47 = *(void *)(v19 + 8);
      *(void *)(v19 + 8) = v46;
      swift_bridgeObjectRetain(v46);
      swift_bridgeObjectRelease(v47);
      uint64_t v48 = *(void *)(v20 + 16);
      *(_BYTE *)(v19 + 24) = *(_BYTE *)(v20 + 24);
      *(void *)(v19 + 16) = v48;
      *(void *)(v19 + 32) = *(void *)(v20 + 32);
      uint64_t v49 = *(void *)(v20 + 40);
      uint64_t v50 = *(void *)(v19 + 40);
      *(void *)(v19 + 40) = v49;
      swift_bridgeObjectRetain(v49);
      swift_bridgeObjectRelease(v50);
      *(_DWORD *)(v19 + 48) = *(_DWORD *)(v20 + 48);
      uint64_t v51 = *(void *)(v20 + 56);
      uint64_t v52 = *(void *)(v19 + 56);
      *(void *)(v19 + 56) = v51;
      swift_bridgeObjectRetain(v51);
      swift_bridgeObjectRelease(v52);
      *(void *)(v19 + 64) = *(void *)(v20 + 64);
      uint64_t v53 = *(void *)(v20 + 72);
      uint64_t v54 = *(void *)(v19 + 72);
      *(void *)(v19 + 72) = v53;
      swift_bridgeObjectRetain(v53);
      swift_bridgeObjectRelease(v54);
      *(void *)(v19 + 80) = *(void *)(v20 + 80);
      uint64_t v55 = *(void *)(v20 + 88);
      uint64_t v56 = *(void *)(v19 + 88);
      *(void *)(v19 + 88) = v55;
      swift_bridgeObjectRetain(v55);
      swift_bridgeObjectRelease(v56);
      v17(v19 + *(int *)(v21 + 44), v20 + *(int *)(v21 + 44), v15);
      uint64_t v57 = *(int *)(v21 + 48);
      uint64_t v58 = v19 + v57;
      uint64_t v59 = (void *)(v20 + v57);
      uint64_t v60 = type metadata accessor for Goldilocks_ErrorInfo.DatabaseFailure(0LL);
      uint64_t v61 = *(void *)(v60 - 8);
      uint64_t v62 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v61 + 48);
      LODWORD(v56) = v62(v58, 1LL, v60);
      int v63 = v62((uint64_t)v59, 1LL, v60);
      if ((_DWORD)v56)
      {
        if (!v63)
        {
          *(void *)uint64_t v58 = *v59;
          uint64_t v64 = v59[1];
          *(void *)(v58 + 8) = v64;
          *(void *)(v58 + 16) = v59[2];
          uint64_t v65 = v59[3];
          *(void *)(v58 + 24) = v65;
          uint64_t v66 = v59[4];
          *(_BYTE *)(v58 + 40) = *((_BYTE *)v59 + 40);
          *(void *)(v58 + 32) = v66;
          uint64_t v67 = v59[6];
          *(_BYTE *)(v58 + 56) = *((_BYTE *)v59 + 56);
          *(void *)(v58 + 48) = v67;
          uint64_t v68 = *(int *)(v60 + 32);
          uint64_t v69 = v58 + v68;
          uint64_t v70 = (char *)v59 + v68;
          uint64_t v71 = *(void (**)(uint64_t, char *, uint64_t))(v45 + 16);
          swift_bridgeObjectRetain(v64);
          swift_bridgeObjectRetain(v65);
          v71(v69, v70, v15);
          (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v61 + 56))(v58, 0LL, 1LL, v60);
          return a1;
        }
      }

      else
      {
        if (!v63)
        {
          *(void *)uint64_t v58 = *v59;
          uint64_t v80 = v59[1];
          uint64_t v81 = *(void *)(v58 + 8);
          *(void *)(v58 + 8) = v80;
          swift_bridgeObjectRetain(v80);
          swift_bridgeObjectRelease(v81);
          *(void *)(v58 + 16) = v59[2];
          uint64_t v82 = v59[3];
          uint64_t v83 = *(void *)(v58 + 24);
          *(void *)(v58 + 24) = v82;
          swift_bridgeObjectRetain(v82);
          swift_bridgeObjectRelease(v83);
          uint64_t v84 = v59[4];
          *(_BYTE *)(v58 + 40) = *((_BYTE *)v59 + 40);
          *(void *)(v58 + 32) = v84;
          uint64_t v85 = v59[6];
          *(_BYTE *)(v58 + 56) = *((_BYTE *)v59 + 56);
          *(void *)(v58 + 48) = v85;
          v17(v58 + *(int *)(v60 + 32), (uint64_t)v59 + *(int *)(v60 + 32), v15);
          return a1;
        }

        sub_1000CECE0(v58, type metadata accessor for Goldilocks_ErrorInfo.DatabaseFailure);
      }

      size_t v42 = *(void *)(*(void *)(sub_1000BED3C(&qword_100293CA8) - 8) + 64LL);
      uint64_t v43 = (void *)v58;
      uint64_t v44 = v59;
      goto LABEL_8;
    }

    sub_1000CECE0(v19, type metadata accessor for Goldilocks_ErrorInfo.ResultError);
LABEL_7:
    size_t v42 = *(void *)(*(void *)(sub_1000BED3C(&qword_100293C98) - 8) + 64LL);
    uint64_t v43 = (void *)v19;
    uint64_t v44 = (const void *)v20;
LABEL_8:
    memcpy(v43, v44, v42);
    return a1;
  }

  if (v24) {
    goto LABEL_7;
  }
  uint64_t v89 = v22;
  *(void *)uint64_t v19 = *(void *)v20;
  uint64_t v25 = *(void *)(v20 + 8);
  *(void *)(v19 + 8) = v25;
  uint64_t v26 = *(void *)(v20 + 16);
  *(_BYTE *)(v19 + 24) = *(_BYTE *)(v20 + 24);
  *(void *)(v19 + 16) = v26;
  *(void *)(v19 + 32) = *(void *)(v20 + 32);
  uint64_t v27 = *(void *)(v20 + 40);
  *(void *)(v19 + 40) = v27;
  *(_DWORD *)(v19 + 48) = *(_DWORD *)(v20 + 48);
  uint64_t v28 = *(void *)(v20 + 56);
  *(void *)(v19 + 56) = v28;
  *(void *)(v19 + 64) = *(void *)(v20 + 64);
  uint64_t v29 = v16;
  uint64_t v30 = *(void *)(v20 + 72);
  *(void *)(v19 + 72) = v30;
  *(void *)(v19 + 80) = *(void *)(v20 + 80);
  uint64_t v31 = v15;
  uint64_t v32 = *(void *)(v20 + 88);
  *(void *)(v19 + 88) = v32;
  uint64_t v33 = *(int *)(v21 + 44);
  uint64_t v86 = v20 + v33;
  uint64_t v87 = v19 + v33;
  uint64_t v34 = *(void (**)(uint64_t, uint64_t, uint64_t))(v29 + 16);
  swift_bridgeObjectRetain(v25);
  swift_bridgeObjectRetain(v27);
  swift_bridgeObjectRetain(v28);
  swift_bridgeObjectRetain(v30);
  swift_bridgeObjectRetain(v32);
  uint64_t v35 = v87;
  uint64_t v88 = v31;
  v34(v35, v86, v31);
  uint64_t v36 = *(int *)(v21 + 48);
  uint64_t v37 = (void *)(v19 + v36);
  uint64_t v38 = (void *)(v20 + v36);
  uint64_t v39 = type metadata accessor for Goldilocks_ErrorInfo.DatabaseFailure(0LL);
  uint64_t v40 = *(void *)(v39 - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v40 + 48))(v38, 1LL, v39))
  {
    uint64_t v41 = sub_1000BED3C(&qword_100293CA8);
    memcpy(v37, v38, *(void *)(*(void *)(v41 - 8) + 64LL));
  }

  else
  {
    *uint64_t v37 = *v38;
    uint64_t v72 = v38[1];
    v37[1] = v72;
    v37[2] = v38[2];
    uint64_t v73 = v38[3];
    v37[3] = v73;
    uint64_t v74 = v38[4];
    *((_BYTE *)v37 + 40) = *((_BYTE *)v38 + 40);
    v37[4] = v74;
    uint64_t v75 = v38[6];
    *((_BYTE *)v37 + 56) = *((_BYTE *)v38 + 56);
    v37[6] = v75;
    uint64_t v76 = *(int *)(v39 + 32);
    uint64_t v77 = (char *)v37 + v76;
    uint64_t v78 = (char *)v38 + v76;
    swift_bridgeObjectRetain(v72);
    swift_bridgeObjectRetain(v73);
    v34((uint64_t)v77, (uint64_t)v78, v88);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v40 + 56))(v37, 0LL, 1LL, v39);
  }

  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v89 + 56))(v19, 0LL, 1LL, v21);
  return a1;
}

uint64_t initializeWithTake for Goldilocks_ExitMoveBatchResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  uint64_t v6 = *(int *)(a3 + 36);
  uint64_t v7 = (char *)(a1 + v6);
  uint64_t v8 = (char *)(a2 + v6);
  uint64_t v9 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32LL);
  v10(v7, v8, v9);
  uint64_t v11 = *(int *)(a3 + 40);
  uint64_t v12 = (_OWORD *)(a1 + v11);
  uint64_t v13 = (_OWORD *)(a2 + v11);
  uint64_t v14 = type metadata accessor for Goldilocks_ErrorInfo.ResultError(0LL);
  uint64_t v15 = *(void *)(v14 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v15 + 48))(v13, 1LL, v14))
  {
    uint64_t v16 = sub_1000BED3C(&qword_100293C98);
    memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64LL));
  }

  else
  {
    *uint64_t v12 = *v13;
    *((void *)v12 + 2) = *((void *)v13 + 2);
    *((_BYTE *)v12 + 24) = *((_BYTE *)v13 + 24);
    v12[2] = v13[2];
    *((_DWORD *)v12 + 12) = *((_DWORD *)v13 + 12);
    *((void *)v12 + 7) = *((void *)v13 + 7);
    __int128 v17 = v13[5];
    v12[4] = v13[4];
    v12[5] = v17;
    v10((char *)v12 + *(int *)(v14 + 44), (char *)v13 + *(int *)(v14 + 44), v9);
    uint64_t v18 = *(int *)(v14 + 48);
    uint64_t v19 = (_OWORD *)((char *)v12 + v18);
    uint64_t v20 = (_OWORD *)((char *)v13 + v18);
    uint64_t v21 = type metadata accessor for Goldilocks_ErrorInfo.DatabaseFailure(0LL);
    uint64_t v22 = *(void *)(v21 - 8);
    if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v22 + 48))(v20, 1LL, v21))
    {
      uint64_t v23 = sub_1000BED3C(&qword_100293CA8);
      memcpy(v19, v20, *(void *)(*(void *)(v23 - 8) + 64LL));
    }

    else
    {
      __int128 v24 = v20[1];
      *uint64_t v19 = *v20;
      v19[1] = v24;
      *((void *)v19 + 4) = *((void *)v20 + 4);
      *((_BYTE *)v19 + 40) = *((_BYTE *)v20 + 40);
      *((void *)v19 + 6) = *((void *)v20 + 6);
      *((_BYTE *)v19 + 56) = *((_BYTE *)v20 + 56);
      v10((char *)v19 + *(int *)(v21 + 32), (char *)v20 + *(int *)(v21 + 32), v9);
      (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v22 + 56))(v19, 0LL, 1LL, v21);
    }

    (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0LL, 1LL, v14);
  }

  return a1;
}

uint64_t assignWithTake for Goldilocks_ExitMoveBatchResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  uint64_t v7 = *(void *)(a1 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  swift_bridgeObjectRelease(v7);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  uint64_t v8 = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRelease(v8);
  uint64_t v9 = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRelease(v9);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  uint64_t v10 = *(int *)(a3 + 36);
  uint64_t v11 = a1 + v10;
  uint64_t v12 = a2 + v10;
  uint64_t v13 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 40);
  v15(v11, v12, v13);
  uint64_t v16 = *(int *)(a3 + 40);
  uint64_t v17 = a1 + v16;
  uint64_t v18 = a2 + v16;
  uint64_t v19 = type metadata accessor for Goldilocks_ErrorInfo.ResultError(0LL);
  uint64_t v20 = *(void *)(v19 - 8);
  uint64_t v21 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v20 + 48);
  LODWORD(v12) = v21(v17, 1LL, v19);
  int v22 = v21(v18, 1LL, v19);
  if (!(_DWORD)v12)
  {
    if (!v22)
    {
      uint64_t v34 = *(void *)(v18 + 8);
      uint64_t v35 = *(void *)(v17 + 8);
      *(void *)uint64_t v17 = *(void *)v18;
      *(void *)(v17 + 8) = v34;
      swift_bridgeObjectRelease(v35);
      *(void *)(v17 + 16) = *(void *)(v18 + 16);
      *(_BYTE *)(v17 + 24) = *(_BYTE *)(v18 + 24);
      uint64_t v36 = *(void *)(v18 + 40);
      uint64_t v37 = *(void *)(v17 + 40);
      *(void *)(v17 + 32) = *(void *)(v18 + 32);
      *(void *)(v17 + 40) = v36;
      swift_bridgeObjectRelease(v37);
      *(_DWORD *)(v17 + 48) = *(_DWORD *)(v18 + 48);
      uint64_t v38 = *(void *)(v17 + 56);
      *(void *)(v17 + 56) = *(void *)(v18 + 56);
      swift_bridgeObjectRelease(v38);
      uint64_t v39 = *(void *)(v18 + 72);
      uint64_t v40 = *(void *)(v17 + 72);
      *(void *)(v17 + 64) = *(void *)(v18 + 64);
      *(void *)(v17 + 72) = v39;
      swift_bridgeObjectRelease(v40);
      uint64_t v41 = *(void *)(v18 + 88);
      uint64_t v42 = *(void *)(v17 + 88);
      *(void *)(v17 + 80) = *(void *)(v18 + 80);
      *(void *)(v17 + 88) = v41;
      swift_bridgeObjectRelease(v42);
      v15(v17 + *(int *)(v19 + 44), v18 + *(int *)(v19 + 44), v13);
      uint64_t v43 = *(int *)(v19 + 48);
      uint64_t v44 = v17 + v43;
      uint64_t v45 = (_OWORD *)(v18 + v43);
      uint64_t v46 = type metadata accessor for Goldilocks_ErrorInfo.DatabaseFailure(0LL);
      uint64_t v47 = *(void *)(v46 - 8);
      uint64_t v48 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v47 + 48);
      int v49 = v48(v44, 1LL, v46);
      int v50 = v48((uint64_t)v45, 1LL, v46);
      if (v49)
      {
        if (!v50)
        {
          __int128 v51 = v45[1];
          *(_OWORD *)uint64_t v44 = *v45;
          *(_OWORD *)(v44 + 16) = v51;
          *(void *)(v44 + 32) = *((void *)v45 + 4);
          *(_BYTE *)(v44 + 40) = *((_BYTE *)v45 + 40);
          *(void *)(v44 + 48) = *((void *)v45 + 6);
          *(_BYTE *)(v44 + 56) = *((_BYTE *)v45 + 56);
          (*(void (**)(uint64_t, char *, uint64_t))(v14 + 32))( v44 + *(int *)(v46 + 32),  (char *)v45 + *(int *)(v46 + 32),  v13);
          (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v47 + 56))(v44, 0LL, 1LL, v46);
          return a1;
        }
      }

      else
      {
        if (!v50)
        {
          uint64_t v54 = *((void *)v45 + 1);
          uint64_t v55 = *(void *)(v44 + 8);
          *(void *)uint64_t v44 = *(void *)v45;
          *(void *)(v44 + 8) = v54;
          swift_bridgeObjectRelease(v55);
          uint64_t v56 = *((void *)v45 + 3);
          uint64_t v57 = *(void *)(v44 + 24);
          *(void *)(v44 + 16) = *((void *)v45 + 2);
          *(void *)(v44 + 24) = v56;
          swift_bridgeObjectRelease(v57);
          *(void *)(v44 + 32) = *((void *)v45 + 4);
          *(_BYTE *)(v44 + 40) = *((_BYTE *)v45 + 40);
          *(void *)(v44 + 48) = *((void *)v45 + 6);
          *(_BYTE *)(v44 + 56) = *((_BYTE *)v45 + 56);
          v15(v44 + *(int *)(v46 + 32), (uint64_t)v45 + *(int *)(v46 + 32), v13);
          return a1;
        }

        sub_1000CECE0(v44, type metadata accessor for Goldilocks_ErrorInfo.DatabaseFailure);
      }

      size_t v31 = *(void *)(*(void *)(sub_1000BED3C(&qword_100293CA8) - 8) + 64LL);
      uint64_t v32 = (void *)v44;
      uint64_t v33 = v45;
      goto LABEL_8;
    }

    sub_1000CECE0(v17, type metadata accessor for Goldilocks_ErrorInfo.ResultError);
LABEL_7:
    size_t v31 = *(void *)(*(void *)(sub_1000BED3C(&qword_100293C98) - 8) + 64LL);
    uint64_t v32 = (void *)v17;
    uint64_t v33 = (const void *)v18;
LABEL_8:
    memcpy(v32, v33, v31);
    return a1;
  }

  if (v22) {
    goto LABEL_7;
  }
  *(_OWORD *)uint64_t v17 = *(_OWORD *)v18;
  *(_BYTE *)(v17 + 24) = *(_BYTE *)(v18 + 24);
  *(void *)(v17 + 16) = *(void *)(v18 + 16);
  *(_OWORD *)(v17 + 32) = *(_OWORD *)(v18 + 32);
  *(_DWORD *)(v17 + 48) = *(_DWORD *)(v18 + 48);
  *(void *)(v17 + 56) = *(void *)(v18 + 56);
  __int128 v23 = *(_OWORD *)(v18 + 80);
  *(_OWORD *)(v17 + 64) = *(_OWORD *)(v18 + 64);
  *(_OWORD *)(v17 + 80) = v23;
  __int128 v24 = *(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 32);
  v24(v17 + *(int *)(v19 + 44), v18 + *(int *)(v19 + 44), v13);
  uint64_t v25 = *(int *)(v19 + 48);
  uint64_t v26 = (_OWORD *)(v17 + v25);
  uint64_t v27 = (_OWORD *)(v18 + v25);
  uint64_t v28 = type metadata accessor for Goldilocks_ErrorInfo.DatabaseFailure(0LL);
  uint64_t v29 = *(void *)(v28 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v29 + 48))(v27, 1LL, v28))
  {
    uint64_t v30 = sub_1000BED3C(&qword_100293CA8);
    memcpy(v26, v27, *(void *)(*(void *)(v30 - 8) + 64LL));
  }

  else
  {
    __int128 v52 = v27[1];
    *uint64_t v26 = *v27;
    v26[1] = v52;
    *((void *)v26 + 4) = *((void *)v27 + 4);
    *((_BYTE *)v26 + 40) = *((_BYTE *)v27 + 40);
    *((void *)v26 + 6) = *((void *)v27 + 6);
    *((_BYTE *)v26 + 56) = *((_BYTE *)v27 + 56);
    v24((uint64_t)v26 + *(int *)(v28 + 32), (uint64_t)v27 + *(int *)(v28 + 32), v13);
    (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v29 + 56))(v26, 0LL, 1LL, v28);
  }

  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v20 + 56))(v17, 0LL, 1LL, v19);
  return a1;
}

uint64_t getEnumTagSinglePayload for Goldilocks_ExitMoveBatchResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10010C6F8);
}

uint64_t sub_10010C6F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }

  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage(0LL);
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      uint64_t v10 = v8;
      uint64_t v11 = *(int *)(a3 + 36);
    }

    else
    {
      uint64_t v10 = sub_1000BED3C(&qword_100293C98);
      uint64_t v9 = *(void *)(v10 - 8);
      uint64_t v11 = *(int *)(a3 + 40);
    }

    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }

uint64_t storeEnumTagSinglePayload for Goldilocks_ExitMoveBatchResponse( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10010C7A8);
}

uint64_t sub_10010C7A8(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }

  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage(0LL);
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      uint64_t v10 = v8;
      uint64_t v11 = *(int *)(a4 + 36);
    }

    else
    {
      uint64_t v10 = sub_1000BED3C(&qword_100293C98);
      uint64_t v9 = *(void *)(v10 - 8);
      uint64_t v11 = *(int *)(a4 + 40);
    }

    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }

  return result;
}

void sub_10010C848(uint64_t a1)
{
  v6[0] = &unk_100219570;
  v6[1] = (char *)&value witness table for Builtin.Int64 + 64;
  v6[2] = &unk_100219570;
  v6[3] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v6[4] = &unk_1002196F8;
  uint64_t v2 = type metadata accessor for UnknownStorage(319LL);
  if (v3 <= 0x3F)
  {
    v6[5] = *(void *)(v2 - 8) + 64LL;
    sub_1000D71B0( 319LL,  (unint64_t *)&unk_100294188,  type metadata accessor for Goldilocks_ErrorInfo.ResultError);
    if (v5 <= 0x3F)
    {
      v6[6] = *(void *)(v4 - 8) + 64LL;
      swift_initStructMetadata(a1, 256LL, 7LL, v6, a1 + 16);
    }
  }

uint64_t *initializeBufferWithCopyOfBuffer for Goldilocks_ExitMoveBatchFeedbackItem( uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v20 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v20 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v20);
  }

  else
  {
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    uint64_t v8 = a2[3];
    a1[2] = a2[2];
    a1[3] = v8;
    uint64_t v9 = *(int *)(a3 + 24);
    uint64_t v10 = (char *)a1 + v9;
    uint64_t v11 = (char *)a2 + v9;
    uint64_t v12 = type metadata accessor for UnknownStorage(0LL);
    uint64_t v13 = *(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16LL);
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v8);
    v13(v10, v11, v12);
    uint64_t v14 = *(int *)(a3 + 28);
    uint64_t v15 = (uint64_t *)((char *)v4 + v14);
    uint64_t v16 = (uint64_t *)((char *)a2 + v14);
    uint64_t v17 = type metadata accessor for Goldilocks_ErrorInfo.ResultError(0LL);
    uint64_t v18 = *(void *)(v17 - 8);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v18 + 48))(v16, 1LL, v17))
    {
      uint64_t v19 = sub_1000BED3C(&qword_100293C98);
      memcpy(v15, v16, *(void *)(*(void *)(v19 - 8) + 64LL));
    }

    else
    {
      uint64_t v43 = v18;
      uint64_t v21 = v16[1];
      *uint64_t v15 = *v16;
      v15[1] = v21;
      v15[2] = v16[2];
      *((_BYTE *)v15 + 24) = *((_BYTE *)v16 + 24);
      uint64_t v22 = v16[5];
      v15[4] = v16[4];
      v15[5] = v22;
      *((_DWORD *)v15 + 12) = *((_DWORD *)v16 + 12);
      uint64_t v24 = v16[7];
      uint64_t v23 = v16[8];
      v15[7] = v24;
      v15[8] = v23;
      uint64_t v26 = v16[9];
      uint64_t v25 = v16[10];
      v15[9] = v26;
      v15[10] = v25;
      uint64_t v44 = v13;
      uint64_t v27 = v16[11];
      v15[11] = v27;
      uint64_t v28 = *(int *)(v17 + 44);
      uint64_t v29 = (char *)v15 + v28;
      uint64_t v42 = (char *)v16 + v28;
      swift_bridgeObjectRetain(v21);
      swift_bridgeObjectRetain(v22);
      swift_bridgeObjectRetain(v24);
      swift_bridgeObjectRetain(v26);
      swift_bridgeObjectRetain(v27);
      v44(v29, v42, v12);
      uint64_t v30 = *(int *)(v17 + 48);
      size_t v31 = (void *)((char *)v15 + v30);
      uint64_t v32 = (void *)((char *)v16 + v30);
      uint64_t v33 = type metadata accessor for Goldilocks_ErrorInfo.DatabaseFailure(0LL);
      uint64_t v34 = *(void *)(v33 - 8);
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v34 + 48))(v32, 1LL, v33))
      {
        uint64_t v35 = sub_1000BED3C(&qword_100293CA8);
        memcpy(v31, v32, *(void *)(*(void *)(v35 - 8) + 64LL));
      }

      else
      {
        uint64_t v36 = v32[1];
        *size_t v31 = *v32;
        v31[1] = v36;
        uint64_t v37 = v32[3];
        v31[2] = v32[2];
        v31[3] = v37;
        v31[4] = v32[4];
        *((_BYTE *)v31 + 40) = *((_BYTE *)v32 + 40);
        v31[6] = v32[6];
        *((_BYTE *)v31 + 56) = *((_BYTE *)v32 + 56);
        uint64_t v38 = *(int *)(v33 + 32);
        uint64_t v39 = (char *)v31 + v38;
        uint64_t v40 = (char *)v32 + v38;
        swift_bridgeObjectRetain(v36);
        swift_bridgeObjectRetain(v37);
        v44(v39, v40, v12);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v34 + 56))(v31, 0LL, 1LL, v33);
      }

      (*(void (**)(void *, void, uint64_t, uint64_t))(v43 + 56))(v15, 0LL, 1LL, v17);
    }
  }

  return v4;
}

uint64_t destroy for Goldilocks_ExitMoveBatchFeedbackItem(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + *(int *)(a2 + 24);
  uint64_t v5 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v11 = *(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8LL);
  v11(v4, v5);
  uint64_t v6 = (void *)(a1 + *(int *)(a2 + 28));
  uint64_t v7 = type metadata accessor for Goldilocks_ErrorInfo.ResultError(0LL);
  uint64_t result = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48LL))(v6, 1LL, v7);
  if (!(_DWORD)result)
  {
    swift_bridgeObjectRelease(v6[1]);
    swift_bridgeObjectRelease(v6[5]);
    swift_bridgeObjectRelease(v6[7]);
    swift_bridgeObjectRelease(v6[9]);
    swift_bridgeObjectRelease(v6[11]);
    v11((uint64_t)v6 + *(int *)(v7 + 44), v5);
    uint64_t v9 = (char *)v6 + *(int *)(v7 + 48);
    uint64_t v10 = type metadata accessor for Goldilocks_ErrorInfo.DatabaseFailure(0LL);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48LL))(v9, 1LL, v10);
    if (!(_DWORD)result)
    {
      swift_bridgeObjectRelease(*((void *)v9 + 1));
      swift_bridgeObjectRelease(*((void *)v9 + 3));
      return ((uint64_t (*)(char *, uint64_t))v11)(&v9[*(int *)(v10 + 32)], v5);
    }
  }

  return result;
}

void *initializeWithCopy for Goldilocks_ExitMoveBatchFeedbackItem(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  uint64_t v8 = *(int *)(a3 + 24);
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16LL);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  v12(v9, v10, v11);
  uint64_t v13 = *(int *)(a3 + 28);
  uint64_t v14 = (void *)((char *)a1 + v13);
  uint64_t v15 = (void *)((char *)a2 + v13);
  uint64_t v16 = type metadata accessor for Goldilocks_ErrorInfo.ResultError(0LL);
  uint64_t v17 = *(void *)(v16 - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v17 + 48))(v15, 1LL, v16))
  {
    uint64_t v18 = sub_1000BED3C(&qword_100293C98);
    memcpy(v14, v15, *(void *)(*(void *)(v18 - 8) + 64LL));
  }

  else
  {
    uint64_t v41 = v17;
    uint64_t v19 = v15[1];
    void *v14 = *v15;
    v14[1] = v19;
    v14[2] = v15[2];
    *((_BYTE *)v14 + 24) = *((_BYTE *)v15 + 24);
    uint64_t v20 = v15[5];
    v14[4] = v15[4];
    v14[5] = v20;
    *((_DWORD *)v14 + 12) = *((_DWORD *)v15 + 12);
    uint64_t v22 = v15[7];
    uint64_t v21 = v15[8];
    v14[7] = v22;
    v14[8] = v21;
    uint64_t v24 = v15[9];
    uint64_t v23 = v15[10];
    v14[9] = v24;
    v14[10] = v23;
    uint64_t v42 = v12;
    uint64_t v25 = v15[11];
    v14[11] = v25;
    uint64_t v26 = *(int *)(v16 + 44);
    uint64_t v27 = (char *)v14 + v26;
    uint64_t v40 = (char *)v15 + v26;
    swift_bridgeObjectRetain(v19);
    swift_bridgeObjectRetain(v20);
    swift_bridgeObjectRetain(v22);
    swift_bridgeObjectRetain(v24);
    swift_bridgeObjectRetain(v25);
    v42(v27, v40, v11);
    uint64_t v28 = *(int *)(v16 + 48);
    uint64_t v29 = (void *)((char *)v14 + v28);
    uint64_t v30 = (void *)((char *)v15 + v28);
    uint64_t v31 = type metadata accessor for Goldilocks_ErrorInfo.DatabaseFailure(0LL);
    uint64_t v32 = *(void *)(v31 - 8);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v32 + 48))(v30, 1LL, v31))
    {
      uint64_t v33 = sub_1000BED3C(&qword_100293CA8);
      memcpy(v29, v30, *(void *)(*(void *)(v33 - 8) + 64LL));
    }

    else
    {
      uint64_t v34 = v30[1];
      *uint64_t v29 = *v30;
      v29[1] = v34;
      uint64_t v35 = v30[3];
      v29[2] = v30[2];
      v29[3] = v35;
      v29[4] = v30[4];
      *((_BYTE *)v29 + 40) = *((_BYTE *)v30 + 40);
      v29[6] = v30[6];
      *((_BYTE *)v29 + 56) = *((_BYTE *)v30 + 56);
      uint64_t v36 = *(int *)(v31 + 32);
      uint64_t v37 = (char *)v29 + v36;
      uint64_t v38 = (char *)v30 + v36;
      swift_bridgeObjectRetain(v34);
      swift_bridgeObjectRetain(v35);
      v42(v37, v38, v11);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v32 + 56))(v29, 0LL, 1LL, v31);
    }

    (*(void (**)(void *, void, uint64_t, uint64_t))(v41 + 56))(v14, 0LL, 1LL, v16);
  }

  return a1;
}

void *assignWithCopy for Goldilocks_ExitMoveBatchFeedbackItem(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = a2[1];
  uint64_t v7 = a1[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  a1[2] = a2[2];
  uint64_t v8 = a2[3];
  uint64_t v9 = a1[3];
  a1[3] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  uint64_t v10 = *(int *)(a3 + 24);
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(void (**)(char *, char *, uint64_t))(v14 + 24);
  v15(v11, v12, v13);
  uint64_t v16 = *(int *)(a3 + 28);
  uint64_t v17 = (uint64_t)a1 + v16;
  uint64_t v18 = (char *)a2 + v16;
  uint64_t v19 = type metadata accessor for Goldilocks_ErrorInfo.ResultError(0LL);
  uint64_t v20 = *(void *)(v19 - 8);
  uint64_t v21 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v20 + 48);
  LODWORD(v12) = v21(v17, 1LL, v19);
  int v22 = v21((uint64_t)v18, 1LL, v19);
  if (!(_DWORD)v12)
  {
    if (!v22)
    {
      uint64_t v43 = v14;
      *(void *)uint64_t v17 = *(void *)v18;
      uint64_t v44 = *((void *)v18 + 1);
      uint64_t v45 = *(void *)(v17 + 8);
      *(void *)(v17 + 8) = v44;
      swift_bridgeObjectRetain(v44);
      swift_bridgeObjectRelease(v45);
      uint64_t v46 = *((void *)v18 + 2);
      *(_BYTE *)(v17 + 24) = v18[24];
      *(void *)(v17 + 16) = v46;
      *(void *)(v17 + 32) = *((void *)v18 + 4);
      uint64_t v47 = *((void *)v18 + 5);
      uint64_t v48 = *(void *)(v17 + 40);
      *(void *)(v17 + 40) = v47;
      swift_bridgeObjectRetain(v47);
      swift_bridgeObjectRelease(v48);
      *(_DWORD *)(v17 + 48) = *((_DWORD *)v18 + 12);
      uint64_t v49 = *((void *)v18 + 7);
      uint64_t v50 = *(void *)(v17 + 56);
      *(void *)(v17 + 56) = v49;
      swift_bridgeObjectRetain(v49);
      swift_bridgeObjectRelease(v50);
      *(void *)(v17 + 64) = *((void *)v18 + 8);
      uint64_t v51 = *((void *)v18 + 9);
      uint64_t v52 = *(void *)(v17 + 72);
      *(void *)(v17 + 72) = v51;
      swift_bridgeObjectRetain(v51);
      swift_bridgeObjectRelease(v52);
      *(void *)(v17 + 80) = *((void *)v18 + 10);
      uint64_t v53 = *((void *)v18 + 11);
      uint64_t v54 = *(void *)(v17 + 88);
      *(void *)(v17 + 88) = v53;
      swift_bridgeObjectRetain(v53);
      swift_bridgeObjectRelease(v54);
      v15((char *)(v17 + *(int *)(v19 + 44)), &v18[*(int *)(v19 + 44)], v13);
      uint64_t v55 = *(int *)(v19 + 48);
      uint64_t v56 = v17 + v55;
      uint64_t v57 = &v18[v55];
      uint64_t v58 = type metadata accessor for Goldilocks_ErrorInfo.DatabaseFailure(0LL);
      uint64_t v59 = *(void *)(v58 - 8);
      uint64_t v60 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v59 + 48);
      LODWORD(v54) = v60(v56, 1LL, v58);
      int v61 = v60((uint64_t)v57, 1LL, v58);
      if ((_DWORD)v54)
      {
        if (!v61)
        {
          *(void *)uint64_t v56 = *(void *)v57;
          uint64_t v62 = *((void *)v57 + 1);
          *(void *)(v56 + 8) = v62;
          *(void *)(v56 + 16) = *((void *)v57 + 2);
          uint64_t v63 = *((void *)v57 + 3);
          *(void *)(v56 + 24) = v63;
          uint64_t v64 = *((void *)v57 + 4);
          *(_BYTE *)(v56 + 40) = v57[40];
          *(void *)(v56 + 32) = v64;
          uint64_t v65 = *((void *)v57 + 6);
          *(_BYTE *)(v56 + 56) = v57[56];
          *(void *)(v56 + 48) = v65;
          uint64_t v66 = *(int *)(v58 + 32);
          uint64_t v67 = v56 + v66;
          uint64_t v68 = &v57[v66];
          uint64_t v69 = *(void (**)(uint64_t, char *, uint64_t))(v43 + 16);
          swift_bridgeObjectRetain(v62);
          swift_bridgeObjectRetain(v63);
          v69(v67, v68, v13);
          (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v59 + 56))(v56, 0LL, 1LL, v58);
          return a1;
        }
      }

      else
      {
        if (!v61)
        {
          *(void *)uint64_t v56 = *(void *)v57;
          uint64_t v78 = *((void *)v57 + 1);
          uint64_t v79 = *(void *)(v56 + 8);
          *(void *)(v56 + 8) = v78;
          swift_bridgeObjectRetain(v78);
          swift_bridgeObjectRelease(v79);
          *(void *)(v56 + 16) = *((void *)v57 + 2);
          uint64_t v80 = *((void *)v57 + 3);
          uint64_t v81 = *(void *)(v56 + 24);
          *(void *)(v56 + 24) = v80;
          swift_bridgeObjectRetain(v80);
          swift_bridgeObjectRelease(v81);
          uint64_t v82 = *((void *)v57 + 4);
          *(_BYTE *)(v56 + 40) = v57[40];
          *(void *)(v56 + 32) = v82;
          uint64_t v83 = *((void *)v57 + 6);
          *(_BYTE *)(v56 + 56) = v57[56];
          *(void *)(v56 + 48) = v83;
          v15((char *)(v56 + *(int *)(v58 + 32)), &v57[*(int *)(v58 + 32)], v13);
          return a1;
        }

        sub_1000CECE0(v56, type metadata accessor for Goldilocks_ErrorInfo.DatabaseFailure);
      }

      size_t v40 = *(void *)(*(void *)(sub_1000BED3C(&qword_100293CA8) - 8) + 64LL);
      uint64_t v41 = (void *)v56;
      uint64_t v42 = v57;
      goto LABEL_8;
    }

    sub_1000CECE0(v17, type metadata accessor for Goldilocks_ErrorInfo.ResultError);
LABEL_7:
    size_t v40 = *(void *)(*(void *)(sub_1000BED3C(&qword_100293C98) - 8) + 64LL);
    uint64_t v41 = (void *)v17;
    uint64_t v42 = v18;
LABEL_8:
    memcpy(v41, v42, v40);
    return a1;
  }

  if (v22) {
    goto LABEL_7;
  }
  uint64_t v87 = v20;
  *(void *)uint64_t v17 = *(void *)v18;
  uint64_t v23 = *((void *)v18 + 1);
  *(void *)(v17 + 8) = v23;
  uint64_t v24 = *((void *)v18 + 2);
  *(_BYTE *)(v17 + 24) = v18[24];
  *(void *)(v17 + 16) = v24;
  *(void *)(v17 + 32) = *((void *)v18 + 4);
  uint64_t v25 = *((void *)v18 + 5);
  *(void *)(v17 + 40) = v25;
  *(_DWORD *)(v17 + 48) = *((_DWORD *)v18 + 12);
  uint64_t v26 = *((void *)v18 + 7);
  *(void *)(v17 + 56) = v26;
  *(void *)(v17 + 64) = *((void *)v18 + 8);
  uint64_t v27 = v14;
  uint64_t v28 = *((void *)v18 + 9);
  *(void *)(v17 + 72) = v28;
  *(void *)(v17 + 80) = *((void *)v18 + 10);
  uint64_t v29 = v13;
  uint64_t v30 = *((void *)v18 + 11);
  *(void *)(v17 + 88) = v30;
  uint64_t v31 = *(int *)(v19 + 44);
  uint64_t v84 = &v18[v31];
  uint64_t v85 = v17 + v31;
  uint64_t v32 = *(void (**)(uint64_t, char *, uint64_t))(v27 + 16);
  swift_bridgeObjectRetain(v23);
  swift_bridgeObjectRetain(v25);
  swift_bridgeObjectRetain(v26);
  swift_bridgeObjectRetain(v28);
  swift_bridgeObjectRetain(v30);
  uint64_t v33 = v85;
  uint64_t v86 = v29;
  v32(v33, v84, v29);
  uint64_t v34 = *(int *)(v19 + 48);
  uint64_t v35 = (void *)(v17 + v34);
  uint64_t v36 = &v18[v34];
  uint64_t v37 = type metadata accessor for Goldilocks_ErrorInfo.DatabaseFailure(0LL);
  uint64_t v38 = *(void *)(v37 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v38 + 48))(v36, 1LL, v37))
  {
    uint64_t v39 = sub_1000BED3C(&qword_100293CA8);
    memcpy(v35, v36, *(void *)(*(void *)(v39 - 8) + 64LL));
  }

  else
  {
    *uint64_t v35 = *(void *)v36;
    uint64_t v70 = *((void *)v36 + 1);
    v35[1] = v70;
    v35[2] = *((void *)v36 + 2);
    uint64_t v71 = *((void *)v36 + 3);
    v35[3] = v71;
    uint64_t v72 = *((void *)v36 + 4);
    *((_BYTE *)v35 + 40) = v36[40];
    v35[4] = v72;
    uint64_t v73 = *((void *)v36 + 6);
    *((_BYTE *)v35 + 56) = v36[56];
    v35[6] = v73;
    uint64_t v74 = *(int *)(v37 + 32);
    uint64_t v75 = (char *)v35 + v74;
    uint64_t v76 = &v36[v74];
    swift_bridgeObjectRetain(v70);
    swift_bridgeObjectRetain(v71);
    v32((uint64_t)v75, v76, v86);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v38 + 56))(v35, 0LL, 1LL, v37);
  }

  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v87 + 56))(v17, 0LL, 1LL, v19);
  return a1;
}

_OWORD *initializeWithTake for Goldilocks_ExitMoveBatchFeedbackItem(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  __int128 v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = *(int *)(a3 + 24);
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 32LL);
  v11(v8, v9, v10);
  uint64_t v12 = *(int *)(a3 + 28);
  uint64_t v13 = (_OWORD *)((char *)a1 + v12);
  uint64_t v14 = (_OWORD *)((char *)a2 + v12);
  uint64_t v15 = type metadata accessor for Goldilocks_ErrorInfo.ResultError(0LL);
  uint64_t v16 = *(void *)(v15 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v16 + 48))(v14, 1LL, v15))
  {
    uint64_t v17 = sub_1000BED3C(&qword_100293C98);
    memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64LL));
  }

  else
  {
    *uint64_t v13 = *v14;
    *((void *)v13 + 2) = *((void *)v14 + 2);
    *((_BYTE *)v13 + 24) = *((_BYTE *)v14 + 24);
    v13[2] = v14[2];
    *((_DWORD *)v13 + 12) = *((_DWORD *)v14 + 12);
    *((void *)v13 + 7) = *((void *)v14 + 7);
    __int128 v18 = v14[5];
    v13[4] = v14[4];
    v13[5] = v18;
    v11((char *)v13 + *(int *)(v15 + 44), (char *)v14 + *(int *)(v15 + 44), v10);
    uint64_t v19 = *(int *)(v15 + 48);
    uint64_t v20 = (_OWORD *)((char *)v13 + v19);
    uint64_t v21 = (_OWORD *)((char *)v14 + v19);
    uint64_t v22 = type metadata accessor for Goldilocks_ErrorInfo.DatabaseFailure(0LL);
    uint64_t v23 = *(void *)(v22 - 8);
    if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v23 + 48))(v21, 1LL, v22))
    {
      uint64_t v24 = sub_1000BED3C(&qword_100293CA8);
      memcpy(v20, v21, *(void *)(*(void *)(v24 - 8) + 64LL));
    }

    else
    {
      __int128 v25 = v21[1];
      *uint64_t v20 = *v21;
      v20[1] = v25;
      *((void *)v20 + 4) = *((void *)v21 + 4);
      *((_BYTE *)v20 + 40) = *((_BYTE *)v21 + 40);
      *((void *)v20 + 6) = *((void *)v21 + 6);
      *((_BYTE *)v20 + 56) = *((_BYTE *)v21 + 56);
      v11((char *)v20 + *(int *)(v22 + 32), (char *)v21 + *(int *)(v22 + 32), v10);
      (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v23 + 56))(v20, 0LL, 1LL, v22);
    }

    (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0LL, 1LL, v15);
  }

  return a1;
}

void *assignWithTake for Goldilocks_ExitMoveBatchFeedbackItem(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  uint64_t v7 = a1[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = a2[3];
  uint64_t v9 = a1[3];
  a1[2] = a2[2];
  a1[3] = v8;
  swift_bridgeObjectRelease(v9);
  uint64_t v10 = *(int *)(a3 + 24);
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(void (**)(char *, char *, uint64_t))(v14 + 40);
  v15(v11, v12, v13);
  uint64_t v16 = *(int *)(a3 + 28);
  uint64_t v17 = (uint64_t)a1 + v16;
  __int128 v18 = (char *)a2 + v16;
  uint64_t v19 = type metadata accessor for Goldilocks_ErrorInfo.ResultError(0LL);
  uint64_t v20 = *(void *)(v19 - 8);
  uint64_t v21 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v20 + 48);
  LODWORD(v12) = v21(v17, 1LL, v19);
  int v22 = v21((uint64_t)v18, 1LL, v19);
  if (!(_DWORD)v12)
  {
    if (!v22)
    {
      uint64_t v34 = *((void *)v18 + 1);
      uint64_t v35 = *(void *)(v17 + 8);
      *(void *)uint64_t v17 = *(void *)v18;
      *(void *)(v17 + 8) = v34;
      swift_bridgeObjectRelease(v35);
      *(void *)(v17 + 16) = *((void *)v18 + 2);
      *(_BYTE *)(v17 + 24) = v18[24];
      uint64_t v36 = *((void *)v18 + 5);
      uint64_t v37 = *(void *)(v17 + 40);
      *(void *)(v17 + 32) = *((void *)v18 + 4);
      *(void *)(v17 + 40) = v36;
      swift_bridgeObjectRelease(v37);
      *(_DWORD *)(v17 + 48) = *((_DWORD *)v18 + 12);
      uint64_t v38 = *(void *)(v17 + 56);
      *(void *)(v17 + 56) = *((void *)v18 + 7);
      swift_bridgeObjectRelease(v38);
      uint64_t v39 = *((void *)v18 + 9);
      uint64_t v40 = *(void *)(v17 + 72);
      *(void *)(v17 + 64) = *((void *)v18 + 8);
      *(void *)(v17 + 72) = v39;
      swift_bridgeObjectRelease(v40);
      uint64_t v41 = *((void *)v18 + 11);
      uint64_t v42 = *(void *)(v17 + 88);
      *(void *)(v17 + 80) = *((void *)v18 + 10);
      *(void *)(v17 + 88) = v41;
      swift_bridgeObjectRelease(v42);
      v15((char *)(v17 + *(int *)(v19 + 44)), &v18[*(int *)(v19 + 44)], v13);
      uint64_t v43 = *(int *)(v19 + 48);
      uint64_t v44 = v17 + v43;
      uint64_t v45 = &v18[v43];
      uint64_t v46 = type metadata accessor for Goldilocks_ErrorInfo.DatabaseFailure(0LL);
      uint64_t v47 = *(void *)(v46 - 8);
      uint64_t v48 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v47 + 48);
      int v49 = v48(v44, 1LL, v46);
      int v50 = v48((uint64_t)v45, 1LL, v46);
      if (v49)
      {
        if (!v50)
        {
          __int128 v51 = *((_OWORD *)v45 + 1);
          *(_OWORD *)uint64_t v44 = *(_OWORD *)v45;
          *(_OWORD *)(v44 + 16) = v51;
          *(void *)(v44 + 32) = *((void *)v45 + 4);
          *(_BYTE *)(v44 + 40) = v45[40];
          *(void *)(v44 + 48) = *((void *)v45 + 6);
          *(_BYTE *)(v44 + 56) = v45[56];
          (*(void (**)(uint64_t, char *, uint64_t))(v14 + 32))( v44 + *(int *)(v46 + 32),  &v45[*(int *)(v46 + 32)],  v13);
          (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v47 + 56))(v44, 0LL, 1LL, v46);
          return a1;
        }
      }

      else
      {
        if (!v50)
        {
          uint64_t v54 = *((void *)v45 + 1);
          uint64_t v55 = *(void *)(v44 + 8);
          *(void *)uint64_t v44 = *(void *)v45;
          *(void *)(v44 + 8) = v54;
          swift_bridgeObjectRelease(v55);
          uint64_t v56 = *((void *)v45 + 3);
          uint64_t v57 = *(void *)(v44 + 24);
          *(void *)(v44 + 16) = *((void *)v45 + 2);
          *(void *)(v44 + 24) = v56;
          swift_bridgeObjectRelease(v57);
          *(void *)(v44 + 32) = *((void *)v45 + 4);
          *(_BYTE *)(v44 + 40) = v45[40];
          *(void *)(v44 + 48) = *((void *)v45 + 6);
          *(_BYTE *)(v44 + 56) = v45[56];
          v15((char *)(v44 + *(int *)(v46 + 32)), &v45[*(int *)(v46 + 32)], v13);
          return a1;
        }

        sub_1000CECE0(v44, type metadata accessor for Goldilocks_ErrorInfo.DatabaseFailure);
      }

      size_t v31 = *(void *)(*(void *)(sub_1000BED3C(&qword_100293CA8) - 8) + 64LL);
      uint64_t v32 = (void *)v44;
      uint64_t v33 = v45;
      goto LABEL_8;
    }

    sub_1000CECE0(v17, type metadata accessor for Goldilocks_ErrorInfo.ResultError);
LABEL_7:
    size_t v31 = *(void *)(*(void *)(sub_1000BED3C(&qword_100293C98) - 8) + 64LL);
    uint64_t v32 = (void *)v17;
    uint64_t v33 = v18;
LABEL_8:
    memcpy(v32, v33, v31);
    return a1;
  }

  if (v22) {
    goto LABEL_7;
  }
  *(_OWORD *)uint64_t v17 = *(_OWORD *)v18;
  *(_BYTE *)(v17 + 24) = v18[24];
  *(void *)(v17 + 16) = *((void *)v18 + 2);
  *(_OWORD *)(v17 + 32) = *((_OWORD *)v18 + 2);
  *(_DWORD *)(v17 + 48) = *((_DWORD *)v18 + 12);
  *(void *)(v17 + 56) = *((void *)v18 + 7);
  __int128 v23 = *((_OWORD *)v18 + 5);
  *(_OWORD *)(v17 + 64) = *((_OWORD *)v18 + 4);
  *(_OWORD *)(v17 + 80) = v23;
  uint64_t v24 = *(void (**)(uint64_t, char *, uint64_t))(v14 + 32);
  v24(v17 + *(int *)(v19 + 44), &v18[*(int *)(v19 + 44)], v13);
  uint64_t v25 = *(int *)(v19 + 48);
  uint64_t v26 = (_OWORD *)(v17 + v25);
  uint64_t v27 = &v18[v25];
  uint64_t v28 = type metadata accessor for Goldilocks_ErrorInfo.DatabaseFailure(0LL);
  uint64_t v29 = *(void *)(v28 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48))(v27, 1LL, v28))
  {
    uint64_t v30 = sub_1000BED3C(&qword_100293CA8);
    memcpy(v26, v27, *(void *)(*(void *)(v30 - 8) + 64LL));
  }

  else
  {
    __int128 v52 = *((_OWORD *)v27 + 1);
    *uint64_t v26 = *(_OWORD *)v27;
    v26[1] = v52;
    *((void *)v26 + 4) = *((void *)v27 + 4);
    *((_BYTE *)v26 + 40) = v27[40];
    *((void *)v26 + 6) = *((void *)v27 + 6);
    *((_BYTE *)v26 + 56) = v27[56];
    v24((uint64_t)v26 + *(int *)(v28 + 32), &v27[*(int *)(v28 + 32)], v13);
    (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v29 + 56))(v26, 0LL, 1LL, v28);
  }

  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v20 + 56))(v17, 0LL, 1LL, v19);
  return a1;
}

uint64_t getEnumTagSinglePayload for Goldilocks_ExitMoveBatchFeedbackItem(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10010DA58);
}

uint64_t sub_10010DA58(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100112B4C(a1, a2, a3, &qword_100293C98);
}

uint64_t storeEnumTagSinglePayload for Goldilocks_ExitMoveBatchFeedbackItem( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10010DA70);
}

uint64_t sub_10010DA70(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return sub_100112C08(a1, a2, a3, a4, &qword_100293C98);
}

void sub_10010DA7C(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

uint64_t *initializeBufferWithCopyOfBuffer for Goldilocks_ExitMoveBatchErrorFeedbackRequest( uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  uint64_t v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v7 = (uint64_t *)(v4 + ((v3 + 16LL) & ~(unint64_t)v3));
    swift_retain(v4);
  }

  else
  {
    uint64_t v7 = a1;
    uint64_t v8 = a2[2];
    a1[1] = a2[1];
    a1[2] = v8;
    uint64_t v9 = a2[4];
    a1[3] = a2[3];
    a1[4] = v9;
    uint64_t v10 = *(int *)(a3 + 28);
    uint64_t v11 = (char *)a1 + v10;
    uint64_t v12 = (char *)a2 + v10;
    uint64_t v13 = type metadata accessor for UnknownStorage(0LL);
    uint64_t v14 = *(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 16LL);
    swift_bridgeObjectRetain(v4);
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v9);
    v14(v11, v12, v13);
    uint64_t v15 = *(int *)(a3 + 32);
    uint64_t v16 = (uint64_t *)((char *)v7 + v15);
    uint64_t v17 = (uint64_t *)((char *)a2 + v15);
    uint64_t v18 = type metadata accessor for Goldilocks_ZoneID(0LL);
    uint64_t v19 = *(void *)(v18 - 8);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v19 + 48))(v17, 1LL, v18))
    {
      uint64_t v20 = sub_1000BED3C(&qword_100295030);
      memcpy(v16, v17, *(void *)(*(void *)(v20 - 8) + 64LL));
    }

    else
    {
      uint64_t v21 = v17[1];
      *uint64_t v16 = *v17;
      v16[1] = v21;
      uint64_t v22 = v17[3];
      v16[2] = v17[2];
      v16[3] = v22;
      uint64_t v23 = *(int *)(v18 + 24);
      uint64_t v24 = (char *)v16 + v23;
      uint64_t v25 = (char *)v17 + v23;
      swift_bridgeObjectRetain(v21);
      swift_bridgeObjectRetain(v22);
      v14(v24, v25, v13);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v19 + 56))(v16, 0LL, 1LL, v18);
    }
  }

  return v7;
}

uint64_t destroy for Goldilocks_ExitMoveBatchErrorFeedbackRequest(void *a1, uint64_t a2)
{
  uint64_t v4 = (char *)a1 + *(int *)(a2 + 28);
  uint64_t v5 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v9 = *(void (**)(char *, uint64_t))(*(void *)(v5 - 8) + 8LL);
  v9(v4, v5);
  uint64_t v6 = (char *)a1 + *(int *)(a2 + 32);
  uint64_t v7 = type metadata accessor for Goldilocks_ZoneID(0LL);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48LL))(v6, 1LL, v7);
  if (!(_DWORD)result)
  {
    swift_bridgeObjectRelease(*((void *)v6 + 1));
    swift_bridgeObjectRelease(*((void *)v6 + 3));
    return ((uint64_t (*)(char *, uint64_t))v9)(&v6[*(int *)(v7 + 24)], v5);
  }

  return result;
}

uint64_t *initializeWithCopy for Goldilocks_ExitMoveBatchErrorFeedbackRequest( uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v7 = *a2;
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v9 = a2[2];
  uint64_t v8 = a2[3];
  a1[2] = v9;
  a1[3] = v8;
  uint64_t v10 = a2[4];
  a1[4] = v10;
  uint64_t v11 = *(int *)(a3 + 28);
  uint64_t v12 = (char *)a1 + v11;
  uint64_t v13 = (char *)a2 + v11;
  uint64_t v14 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v15 = *(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 16LL);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRetain(v10);
  v15(v12, v13, v14);
  uint64_t v16 = *(int *)(a3 + 32);
  uint64_t v17 = (uint64_t *)((char *)a1 + v16);
  uint64_t v18 = (uint64_t *)((char *)a2 + v16);
  uint64_t v19 = type metadata accessor for Goldilocks_ZoneID(0LL);
  uint64_t v20 = *(void *)(v19 - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v20 + 48))(v18, 1LL, v19))
  {
    uint64_t v21 = sub_1000BED3C(&qword_100295030);
    memcpy(v17, v18, *(void *)(*(void *)(v21 - 8) + 64LL));
  }

  else
  {
    uint64_t v22 = v18[1];
    *uint64_t v17 = *v18;
    v17[1] = v22;
    uint64_t v23 = v18[3];
    v17[2] = v18[2];
    v17[3] = v23;
    uint64_t v24 = *(int *)(v19 + 24);
    uint64_t v25 = (char *)v17 + v24;
    uint64_t v26 = (char *)v18 + v24;
    swift_bridgeObjectRetain(v22);
    swift_bridgeObjectRetain(v23);
    v15(v25, v26, v14);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v20 + 56))(v17, 0LL, 1LL, v19);
  }

  return a1;
}

uint64_t *assignWithCopy for Goldilocks_ExitMoveBatchErrorFeedbackRequest( uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  uint64_t v7 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  a1[1] = a2[1];
  uint64_t v8 = a2[2];
  uint64_t v9 = a1[2];
  a1[2] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  a1[3] = a2[3];
  uint64_t v10 = a2[4];
  uint64_t v11 = a1[4];
  a1[4] = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  uint64_t v12 = *(int *)(a3 + 28);
  uint64_t v13 = (char *)a1 + v12;
  uint64_t v14 = (char *)a2 + v12;
  uint64_t v15 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = *(void (**)(char *, char *, uint64_t))(v16 + 24);
  v17(v13, v14, v15);
  uint64_t v18 = *(int *)(a3 + 32);
  uint64_t v19 = (char *)a1 + v18;
  uint64_t v20 = (char *)a2 + v18;
  uint64_t v21 = type metadata accessor for Goldilocks_ZoneID(0LL);
  uint64_t v22 = *(void *)(v21 - 8);
  uint64_t v23 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v22 + 48);
  LODWORD(v14) = v23(v19, 1LL, v21);
  int v24 = v23(v20, 1LL, v21);
  if (!(_DWORD)v14)
  {
    if (!v24)
    {
      *(void *)uint64_t v19 = *(void *)v20;
      uint64_t v33 = *((void *)v20 + 1);
      uint64_t v34 = *((void *)v19 + 1);
      *((void *)v19 + 1) = v33;
      swift_bridgeObjectRetain(v33);
      swift_bridgeObjectRelease(v34);
      *((void *)v19 + 2) = *((void *)v20 + 2);
      uint64_t v35 = *((void *)v20 + 3);
      uint64_t v36 = *((void *)v19 + 3);
      *((void *)v19 + 3) = v35;
      swift_bridgeObjectRetain(v35);
      swift_bridgeObjectRelease(v36);
      v17(&v19[*(int *)(v21 + 24)], &v20[*(int *)(v21 + 24)], v15);
      return a1;
    }

    sub_1000CECE0((uint64_t)v19, type metadata accessor for Goldilocks_ZoneID);
    goto LABEL_6;
  }

  if (v24)
  {
LABEL_6:
    uint64_t v31 = sub_1000BED3C(&qword_100295030);
    memcpy(v19, v20, *(void *)(*(void *)(v31 - 8) + 64LL));
    return a1;
  }

  *(void *)uint64_t v19 = *(void *)v20;
  uint64_t v25 = *((void *)v20 + 1);
  *((void *)v19 + 1) = v25;
  *((void *)v19 + 2) = *((void *)v20 + 2);
  uint64_t v26 = *((void *)v20 + 3);
  *((void *)v19 + 3) = v26;
  uint64_t v27 = *(int *)(v21 + 24);
  uint64_t v28 = &v19[v27];
  uint64_t v29 = &v20[v27];
  uint64_t v30 = *(void (**)(char *, char *, uint64_t))(v16 + 16);
  swift_bridgeObjectRetain(v25);
  swift_bridgeObjectRetain(v26);
  v30(v28, v29, v15);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v22 + 56))(v19, 0LL, 1LL, v21);
  return a1;
}

uint64_t initializeWithTake for Goldilocks_ExitMoveBatchErrorFeedbackRequest( uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  uint64_t v6 = *(int *)(a3 + 28);
  uint64_t v7 = (char *)(a1 + v6);
  uint64_t v8 = (char *)(a2 + v6);
  uint64_t v9 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32LL);
  v10(v7, v8, v9);
  uint64_t v11 = *(int *)(a3 + 32);
  uint64_t v12 = (_OWORD *)(a1 + v11);
  uint64_t v13 = (_OWORD *)(a2 + v11);
  uint64_t v14 = type metadata accessor for Goldilocks_ZoneID(0LL);
  uint64_t v15 = *(void *)(v14 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v15 + 48))(v13, 1LL, v14))
  {
    uint64_t v16 = sub_1000BED3C(&qword_100295030);
    memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64LL));
  }

  else
  {
    __int128 v17 = v13[1];
    *uint64_t v12 = *v13;
    v12[1] = v17;
    v10((char *)v12 + *(int *)(v14 + 24), (char *)v13 + *(int *)(v14 + 24), v9);
    (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0LL, 1LL, v14);
  }

  return a1;
}

uint64_t *assignWithTake for Goldilocks_ExitMoveBatchErrorFeedbackRequest( uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRelease(v6);
  uint64_t v7 = a2[2];
  uint64_t v8 = a1[2];
  a1[1] = a2[1];
  a1[2] = v7;
  swift_bridgeObjectRelease(v8);
  uint64_t v9 = a2[4];
  uint64_t v10 = a1[4];
  a1[3] = a2[3];
  a1[4] = v9;
  swift_bridgeObjectRelease(v10);
  uint64_t v11 = *(int *)(a3 + 28);
  uint64_t v12 = (char *)a1 + v11;
  uint64_t v13 = (char *)a2 + v11;
  uint64_t v14 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = *(void (**)(char *, char *, uint64_t))(v15 + 40);
  v16(v12, v13, v14);
  uint64_t v17 = *(int *)(a3 + 32);
  uint64_t v18 = (char *)a1 + v17;
  uint64_t v19 = (char *)a2 + v17;
  uint64_t v20 = type metadata accessor for Goldilocks_ZoneID(0LL);
  uint64_t v21 = *(void *)(v20 - 8);
  uint64_t v22 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v21 + 48);
  LODWORD(v13) = v22(v18, 1LL, v20);
  int v23 = v22(v19, 1LL, v20);
  if (!(_DWORD)v13)
  {
    if (!v23)
    {
      uint64_t v27 = *((void *)v19 + 1);
      uint64_t v28 = *((void *)v18 + 1);
      *(void *)uint64_t v18 = *(void *)v19;
      *((void *)v18 + 1) = v27;
      swift_bridgeObjectRelease(v28);
      uint64_t v29 = *((void *)v19 + 3);
      uint64_t v30 = *((void *)v18 + 3);
      *((void *)v18 + 2) = *((void *)v19 + 2);
      *((void *)v18 + 3) = v29;
      swift_bridgeObjectRelease(v30);
      v16(&v18[*(int *)(v20 + 24)], &v19[*(int *)(v20 + 24)], v14);
      return a1;
    }

    sub_1000CECE0((uint64_t)v18, type metadata accessor for Goldilocks_ZoneID);
    goto LABEL_6;
  }

  if (v23)
  {
LABEL_6:
    uint64_t v25 = sub_1000BED3C(&qword_100295030);
    memcpy(v18, v19, *(void *)(*(void *)(v25 - 8) + 64LL));
    return a1;
  }

  __int128 v24 = *((_OWORD *)v19 + 1);
  *(_OWORD *)uint64_t v18 = *(_OWORD *)v19;
  *((_OWORD *)v18 + 1) = v24;
  (*(void (**)(char *, char *, uint64_t))(v15 + 32))(&v18[*(int *)(v20 + 24)], &v19[*(int *)(v20 + 24)], v14);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v21 + 56))(v18, 0LL, 1LL, v20);
  return a1;
}

uint64_t getEnumTagSinglePayload for Goldilocks_ExitMoveBatchErrorFeedbackRequest( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10010E304);
}

uint64_t sub_10010E304(char *a1, uint64_t a2, uint64_t a3)
{
  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *(void *)a1;
    if (*(void *)a1 >= 0xFFFFFFFFuLL) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }

  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage(0LL);
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      uint64_t v10 = v8;
      uint64_t v11 = *(int *)(a3 + 28);
    }

    else
    {
      uint64_t v10 = sub_1000BED3C(&qword_100295030);
      uint64_t v9 = *(void *)(v10 - 8);
      uint64_t v11 = *(int *)(a3 + 32);
    }

    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48))(&a1[v11], a2, v10);
  }

uint64_t storeEnumTagSinglePayload for Goldilocks_ExitMoveBatchErrorFeedbackRequest( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10010E3B4);
}

char *sub_10010E3B4(char *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)uint64_t result = (a2 - 1);
  }

  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage(0LL);
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      uint64_t v10 = v8;
      uint64_t v11 = *(int *)(a4 + 28);
    }

    else
    {
      uint64_t v10 = sub_1000BED3C(&qword_100295030);
      uint64_t v9 = *(void *)(v10 - 8);
      uint64_t v11 = *(int *)(a4 + 32);
    }

    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(&v5[v11], a2, a2, v10);
  }

  return result;
}

void sub_10010E454(uint64_t a1)
{
  v6[0] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v6[1] = &unk_100219570;
  v6[2] = &unk_100219570;
  uint64_t v2 = type metadata accessor for UnknownStorage(319LL);
  if (v3 <= 0x3F)
  {
    v6[3] = *(void *)(v2 - 8) + 64LL;
    sub_1000D71B0(319LL, (unint64_t *)&unk_1002940D0, type metadata accessor for Goldilocks_ZoneID);
    if (v5 <= 0x3F)
    {
      v6[4] = *(void *)(v4 - 8) + 64LL;
      swift_initStructMetadata(a1, 256LL, 5LL, v6, a1 + 16);
    }
  }

char *initializeBufferWithCopyOfBuffer for Goldilocks_ExitMoveBatchErrorFeedbackResponse( char *a1, char *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v15 = *(void *)a2;
    *(void *)a1 = *(void *)a2;
    a1 = (char *)(v15 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v15);
  }

  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage(0LL);
    uint64_t v8 = *(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16LL);
    v8(a1, a2, v7);
    uint64_t v9 = *(int *)(a3 + 20);
    uint64_t v10 = &a1[v9];
    uint64_t v11 = &a2[v9];
    uint64_t v12 = type metadata accessor for Goldilocks_ErrorInfo.ResultError(0LL);
    uint64_t v13 = *(void *)(v12 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1LL, v12))
    {
      uint64_t v14 = sub_1000BED3C(&qword_100293C98);
      memcpy(v10, v11, *(void *)(*(void *)(v14 - 8) + 64LL));
    }

    else
    {
      uint64_t v38 = v13;
      uint64_t v39 = v8;
      uint64_t v16 = *((void *)v11 + 1);
      *(void *)uint64_t v10 = *(void *)v11;
      *((void *)v10 + 1) = v16;
      *((void *)v10 + 2) = *((void *)v11 + 2);
      v10[24] = v11[24];
      uint64_t v17 = *((void *)v11 + 5);
      *((void *)v10 + 4) = *((void *)v11 + 4);
      *((void *)v10 + 5) = v17;
      *((_DWORD *)v10 + 12) = *((_DWORD *)v11 + 12);
      uint64_t v19 = *((void *)v11 + 7);
      uint64_t v18 = *((void *)v11 + 8);
      *((void *)v10 + 7) = v19;
      *((void *)v10 + 8) = v18;
      uint64_t v21 = *((void *)v11 + 9);
      uint64_t v20 = *((void *)v11 + 10);
      *((void *)v10 + 9) = v21;
      *((void *)v10 + 10) = v20;
      uint64_t v22 = *((void *)v11 + 11);
      *((void *)v10 + 11) = v22;
      uint64_t v23 = *(int *)(v12 + 44);
      __int128 v24 = &v10[v23];
      uint64_t v37 = &v11[v23];
      swift_bridgeObjectRetain(v16);
      swift_bridgeObjectRetain(v17);
      swift_bridgeObjectRetain(v19);
      swift_bridgeObjectRetain(v21);
      swift_bridgeObjectRetain(v22);
      v39(v24, v37, v7);
      uint64_t v25 = *(int *)(v12 + 48);
      uint64_t v26 = &v10[v25];
      uint64_t v27 = &v11[v25];
      uint64_t v28 = type metadata accessor for Goldilocks_ErrorInfo.DatabaseFailure(0LL);
      uint64_t v29 = *(void *)(v28 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48))(v27, 1LL, v28))
      {
        uint64_t v30 = sub_1000BED3C(&qword_100293CA8);
        memcpy(v26, v27, *(void *)(*(void *)(v30 - 8) + 64LL));
      }

      else
      {
        uint64_t v31 = *((void *)v27 + 1);
        *(void *)uint64_t v26 = *(void *)v27;
        *((void *)v26 + 1) = v31;
        uint64_t v32 = *((void *)v27 + 3);
        *((void *)v26 + 2) = *((void *)v27 + 2);
        *((void *)v26 + 3) = v32;
        *((void *)v26 + 4) = *((void *)v27 + 4);
        v26[40] = v27[40];
        *((void *)v26 + 6) = *((void *)v27 + 6);
        v26[56] = v27[56];
        uint64_t v33 = *(int *)(v28 + 32);
        uint64_t v34 = &v26[v33];
        uint64_t v35 = &v27[v33];
        swift_bridgeObjectRetain(v31);
        swift_bridgeObjectRetain(v32);
        v39(v34, v35, v7);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v29 + 56))(v26, 0LL, 1LL, v28);
      }

      (*(void (**)(char *, void, uint64_t, uint64_t))(v38 + 56))(v10, 0LL, 1LL, v12);
    }
  }

  return a1;
}

uint64_t destroy for Goldilocks_ExitMoveBatchErrorFeedbackResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8LL);
  v10(a1, v4);
  int v5 = (void *)(a1 + *(int *)(a2 + 20));
  uint64_t v6 = type metadata accessor for Goldilocks_ErrorInfo.ResultError(0LL);
  uint64_t result = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)(v6 - 8) + 48LL))(v5, 1LL, v6);
  if (!(_DWORD)result)
  {
    swift_bridgeObjectRelease(v5[1]);
    swift_bridgeObjectRelease(v5[5]);
    swift_bridgeObjectRelease(v5[7]);
    swift_bridgeObjectRelease(v5[9]);
    swift_bridgeObjectRelease(v5[11]);
    v10((uint64_t)v5 + *(int *)(v6 + 44), v4);
    uint64_t v8 = (char *)v5 + *(int *)(v6 + 48);
    uint64_t v9 = type metadata accessor for Goldilocks_ErrorInfo.DatabaseFailure(0LL);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48LL))(v8, 1LL, v9);
    if (!(_DWORD)result)
    {
      swift_bridgeObjectRelease(*((void *)v8 + 1));
      swift_bridgeObjectRelease(*((void *)v8 + 3));
      return ((uint64_t (*)(char *, uint64_t))v10)(&v8[*(int *)(v9 + 32)], v4);
    }
  }

  return result;
}

char *initializeWithCopy for Goldilocks_ExitMoveBatchErrorFeedbackResponse(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v7 = *(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16LL);
  v7(a1, a2, v6);
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v9 = &a1[v8];
  uint64_t v10 = &a2[v8];
  uint64_t v11 = type metadata accessor for Goldilocks_ErrorInfo.ResultError(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1LL, v11))
  {
    uint64_t v13 = sub_1000BED3C(&qword_100293C98);
    memcpy(v9, v10, *(void *)(*(void *)(v13 - 8) + 64LL));
  }

  else
  {
    uint64_t v36 = v12;
    uint64_t v37 = v7;
    uint64_t v14 = *((void *)v10 + 1);
    *(void *)uint64_t v9 = *(void *)v10;
    *((void *)v9 + 1) = v14;
    *((void *)v9 + 2) = *((void *)v10 + 2);
    v9[24] = v10[24];
    uint64_t v15 = *((void *)v10 + 5);
    *((void *)v9 + 4) = *((void *)v10 + 4);
    *((void *)v9 + 5) = v15;
    *((_DWORD *)v9 + 12) = *((_DWORD *)v10 + 12);
    uint64_t v17 = *((void *)v10 + 7);
    uint64_t v16 = *((void *)v10 + 8);
    *((void *)v9 + 7) = v17;
    *((void *)v9 + 8) = v16;
    uint64_t v19 = *((void *)v10 + 9);
    uint64_t v18 = *((void *)v10 + 10);
    *((void *)v9 + 9) = v19;
    *((void *)v9 + 10) = v18;
    uint64_t v20 = *((void *)v10 + 11);
    *((void *)v9 + 11) = v20;
    uint64_t v21 = *(int *)(v11 + 44);
    uint64_t v22 = &v9[v21];
    uint64_t v35 = &v10[v21];
    swift_bridgeObjectRetain(v14);
    swift_bridgeObjectRetain(v15);
    swift_bridgeObjectRetain(v17);
    swift_bridgeObjectRetain(v19);
    swift_bridgeObjectRetain(v20);
    v37(v22, v35, v6);
    uint64_t v23 = *(int *)(v11 + 48);
    __int128 v24 = &v9[v23];
    uint64_t v25 = &v10[v23];
    uint64_t v26 = type metadata accessor for Goldilocks_ErrorInfo.DatabaseFailure(0LL);
    uint64_t v27 = *(void *)(v26 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v25, 1LL, v26))
    {
      uint64_t v28 = sub_1000BED3C(&qword_100293CA8);
      memcpy(v24, v25, *(void *)(*(void *)(v28 - 8) + 64LL));
    }

    else
    {
      uint64_t v29 = *((void *)v25 + 1);
      *(void *)__int128 v24 = *(void *)v25;
      *((void *)v24 + 1) = v29;
      uint64_t v30 = *((void *)v25 + 3);
      *((void *)v24 + 2) = *((void *)v25 + 2);
      *((void *)v24 + 3) = v30;
      *((void *)v24 + 4) = *((void *)v25 + 4);
      v24[40] = v25[40];
      *((void *)v24 + 6) = *((void *)v25 + 6);
      v24[56] = v25[56];
      uint64_t v31 = *(int *)(v26 + 32);
      uint64_t v32 = &v24[v31];
      uint64_t v33 = &v25[v31];
      swift_bridgeObjectRetain(v29);
      swift_bridgeObjectRetain(v30);
      v37(v32, v33, v6);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v27 + 56))(v24, 0LL, 1LL, v26);
    }

    (*(void (**)(char *, void, uint64_t, uint64_t))(v36 + 56))(v9, 0LL, 1LL, v11);
  }

  return a1;
}

uint64_t assignWithCopy for Goldilocks_ExitMoveBatchErrorFeedbackResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 24);
  v8(a1, a2, v6);
  uint64_t v9 = *(int *)(a3 + 20);
  uint64_t v10 = a1 + v9;
  uint64_t v11 = a2 + v9;
  uint64_t v12 = type metadata accessor for Goldilocks_ErrorInfo.ResultError(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v13 + 48);
  int v15 = v14(v10, 1LL, v12);
  int v16 = v14(v11, 1LL, v12);
  if (!v15)
  {
    if (!v16)
    {
      *(void *)uint64_t v10 = *(void *)v11;
      uint64_t v37 = *(void *)(v11 + 8);
      uint64_t v38 = *(void *)(v10 + 8);
      *(void *)(v10 + 8) = v37;
      swift_bridgeObjectRetain(v37);
      swift_bridgeObjectRelease(v38);
      uint64_t v39 = *(void *)(v11 + 16);
      *(_BYTE *)(v10 + 24) = *(_BYTE *)(v11 + 24);
      *(void *)(v10 + 16) = v39;
      *(void *)(v10 + 32) = *(void *)(v11 + 32);
      uint64_t v40 = *(void *)(v11 + 40);
      uint64_t v41 = *(void *)(v10 + 40);
      *(void *)(v10 + 40) = v40;
      swift_bridgeObjectRetain(v40);
      swift_bridgeObjectRelease(v41);
      *(_DWORD *)(v10 + 48) = *(_DWORD *)(v11 + 48);
      uint64_t v42 = *(void *)(v11 + 56);
      uint64_t v43 = *(void *)(v10 + 56);
      *(void *)(v10 + 56) = v42;
      swift_bridgeObjectRetain(v42);
      swift_bridgeObjectRelease(v43);
      *(void *)(v10 + 64) = *(void *)(v11 + 64);
      uint64_t v44 = *(void *)(v11 + 72);
      uint64_t v45 = *(void *)(v10 + 72);
      *(void *)(v10 + 72) = v44;
      swift_bridgeObjectRetain(v44);
      swift_bridgeObjectRelease(v45);
      *(void *)(v10 + 80) = *(void *)(v11 + 80);
      uint64_t v46 = *(void *)(v11 + 88);
      uint64_t v47 = *(void *)(v10 + 88);
      *(void *)(v10 + 88) = v46;
      swift_bridgeObjectRetain(v46);
      swift_bridgeObjectRelease(v47);
      v8(v10 + *(int *)(v12 + 44), v11 + *(int *)(v12 + 44), v6);
      uint64_t v48 = *(int *)(v12 + 48);
      uint64_t v49 = v10 + v48;
      int v50 = (void *)(v11 + v48);
      uint64_t v51 = type metadata accessor for Goldilocks_ErrorInfo.DatabaseFailure(0LL);
      uint64_t v52 = *(void *)(v51 - 8);
      uint64_t v53 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v52 + 48);
      LODWORD(v47) = v53(v49, 1LL, v51);
      int v54 = v53((uint64_t)v50, 1LL, v51);
      if ((_DWORD)v47)
      {
        if (!v54)
        {
          *(void *)uint64_t v49 = *v50;
          uint64_t v55 = v50[1];
          *(void *)(v49 + 8) = v55;
          *(void *)(v49 + 16) = v50[2];
          uint64_t v56 = v50[3];
          *(void *)(v49 + 24) = v56;
          uint64_t v57 = v50[4];
          *(_BYTE *)(v49 + 40) = *((_BYTE *)v50 + 40);
          *(void *)(v49 + 32) = v57;
          uint64_t v58 = v50[6];
          *(_BYTE *)(v49 + 56) = *((_BYTE *)v50 + 56);
          *(void *)(v49 + 48) = v58;
          uint64_t v59 = *(int *)(v51 + 32);
          uint64_t v60 = v49 + v59;
          int v61 = (char *)v50 + v59;
          uint64_t v62 = *(void (**)(uint64_t, char *, uint64_t))(v7 + 16);
          swift_bridgeObjectRetain(v55);
          swift_bridgeObjectRetain(v56);
          v62(v60, v61, v6);
          (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v52 + 56))(v49, 0LL, 1LL, v51);
          return a1;
        }
      }

      else
      {
        if (!v54)
        {
          *(void *)uint64_t v49 = *v50;
          uint64_t v71 = v50[1];
          uint64_t v72 = *(void *)(v49 + 8);
          *(void *)(v49 + 8) = v71;
          swift_bridgeObjectRetain(v71);
          swift_bridgeObjectRelease(v72);
          *(void *)(v49 + 16) = v50[2];
          uint64_t v73 = v50[3];
          uint64_t v74 = *(void *)(v49 + 24);
          *(void *)(v49 + 24) = v73;
          swift_bridgeObjectRetain(v73);
          swift_bridgeObjectRelease(v74);
          uint64_t v75 = v50[4];
          *(_BYTE *)(v49 + 40) = *((_BYTE *)v50 + 40);
          *(void *)(v49 + 32) = v75;
          uint64_t v76 = v50[6];
          *(_BYTE *)(v49 + 56) = *((_BYTE *)v50 + 56);
          *(void *)(v49 + 48) = v76;
          v8(v49 + *(int *)(v51 + 32), (uint64_t)v50 + *(int *)(v51 + 32), v6);
          return a1;
        }

        sub_1000CECE0(v49, type metadata accessor for Goldilocks_ErrorInfo.DatabaseFailure);
      }

      size_t v34 = *(void *)(*(void *)(sub_1000BED3C(&qword_100293CA8) - 8) + 64LL);
      uint64_t v35 = (void *)v49;
      uint64_t v36 = v50;
      goto LABEL_8;
    }

    sub_1000CECE0(v10, type metadata accessor for Goldilocks_ErrorInfo.ResultError);
LABEL_7:
    size_t v34 = *(void *)(*(void *)(sub_1000BED3C(&qword_100293C98) - 8) + 64LL);
    uint64_t v35 = (void *)v10;
    uint64_t v36 = (const void *)v11;
LABEL_8:
    memcpy(v35, v36, v34);
    return a1;
  }

  if (v16) {
    goto LABEL_7;
  }
  uint64_t v80 = a1;
  *(void *)uint64_t v10 = *(void *)v11;
  uint64_t v17 = *(void *)(v11 + 8);
  *(void *)(v10 + 8) = v17;
  uint64_t v18 = *(void *)(v11 + 16);
  *(_BYTE *)(v10 + 24) = *(_BYTE *)(v11 + 24);
  *(void *)(v10 + 16) = v18;
  *(void *)(v10 + 32) = *(void *)(v11 + 32);
  uint64_t v19 = *(void *)(v11 + 40);
  *(void *)(v10 + 40) = v19;
  *(_DWORD *)(v10 + 48) = *(_DWORD *)(v11 + 48);
  uint64_t v20 = *(void *)(v11 + 56);
  *(void *)(v10 + 56) = v20;
  *(void *)(v10 + 64) = *(void *)(v11 + 64);
  uint64_t v21 = *(void *)(v11 + 72);
  *(void *)(v10 + 72) = v21;
  *(void *)(v10 + 80) = *(void *)(v11 + 80);
  uint64_t v22 = v7;
  uint64_t v23 = *(void *)(v11 + 88);
  *(void *)(v10 + 88) = v23;
  uint64_t v24 = *(int *)(v12 + 44);
  uint64_t v79 = v6;
  uint64_t v25 = (char *)(v10 + v24);
  uint64_t v77 = (char *)(v11 + v24);
  uint64_t v26 = *(void (**)(char *, char *, uint64_t))(v22 + 16);
  swift_bridgeObjectRetain(v17);
  swift_bridgeObjectRetain(v19);
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRetain(v21);
  swift_bridgeObjectRetain(v23);
  uint64_t v27 = v77;
  uint64_t v78 = v26;
  v26(v25, v27, v79);
  uint64_t v28 = *(int *)(v12 + 48);
  uint64_t v29 = (void *)(v10 + v28);
  uint64_t v30 = (void *)(v11 + v28);
  uint64_t v31 = type metadata accessor for Goldilocks_ErrorInfo.DatabaseFailure(0LL);
  uint64_t v32 = *(void *)(v31 - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v32 + 48))(v30, 1LL, v31))
  {
    uint64_t v33 = sub_1000BED3C(&qword_100293CA8);
    memcpy(v29, v30, *(void *)(*(void *)(v33 - 8) + 64LL));
  }

  else
  {
    *uint64_t v29 = *v30;
    uint64_t v63 = v30[1];
    v29[1] = v63;
    v29[2] = v30[2];
    uint64_t v64 = v30[3];
    v29[3] = v64;
    uint64_t v65 = v30[4];
    *((_BYTE *)v29 + 40) = *((_BYTE *)v30 + 40);
    v29[4] = v65;
    uint64_t v66 = v30[6];
    *((_BYTE *)v29 + 56) = *((_BYTE *)v30 + 56);
    v29[6] = v66;
    uint64_t v67 = *(int *)(v31 + 32);
    uint64_t v68 = (char *)v29 + v67;
    uint64_t v69 = (char *)v30 + v67;
    swift_bridgeObjectRetain(v63);
    swift_bridgeObjectRetain(v64);
    v78(v68, v69, v79);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v32 + 56))(v29, 0LL, 1LL, v31);
  }

  a1 = v80;
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v13 + 56))(v10, 0LL, 1LL, v12);
  return a1;
}

char *initializeWithTake for Goldilocks_ExitMoveBatchErrorFeedbackResponse(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v7 = *(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32LL);
  v7(a1, a2, v6);
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v9 = &a1[v8];
  uint64_t v10 = &a2[v8];
  uint64_t v11 = type metadata accessor for Goldilocks_ErrorInfo.ResultError(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1LL, v11))
  {
    uint64_t v13 = sub_1000BED3C(&qword_100293C98);
    memcpy(v9, v10, *(void *)(*(void *)(v13 - 8) + 64LL));
  }

  else
  {
    *(_OWORD *)uint64_t v9 = *(_OWORD *)v10;
    *((void *)v9 + 2) = *((void *)v10 + 2);
    v9[24] = v10[24];
    *((_OWORD *)v9 + 2) = *((_OWORD *)v10 + 2);
    *((_DWORD *)v9 + 12) = *((_DWORD *)v10 + 12);
    *((void *)v9 + 7) = *((void *)v10 + 7);
    __int128 v14 = *((_OWORD *)v10 + 5);
    *((_OWORD *)v9 + 4) = *((_OWORD *)v10 + 4);
    *((_OWORD *)v9 + 5) = v14;
    v7(&v9[*(int *)(v11 + 44)], &v10[*(int *)(v11 + 44)], v6);
    uint64_t v15 = *(int *)(v11 + 48);
    int v16 = &v9[v15];
    uint64_t v17 = &v10[v15];
    uint64_t v18 = type metadata accessor for Goldilocks_ErrorInfo.DatabaseFailure(0LL);
    uint64_t v19 = *(void *)(v18 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v17, 1LL, v18))
    {
      uint64_t v20 = sub_1000BED3C(&qword_100293CA8);
      memcpy(v16, v17, *(void *)(*(void *)(v20 - 8) + 64LL));
    }

    else
    {
      __int128 v21 = *((_OWORD *)v17 + 1);
      *(_OWORD *)int v16 = *(_OWORD *)v17;
      *((_OWORD *)v16 + 1) = v21;
      *((void *)v16 + 4) = *((void *)v17 + 4);
      v16[40] = v17[40];
      *((void *)v16 + 6) = *((void *)v17 + 6);
      v16[56] = v17[56];
      v7(&v16[*(int *)(v18 + 32)], &v17[*(int *)(v18 + 32)], v6);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v19 + 56))(v16, 0LL, 1LL, v18);
    }

    (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0LL, 1LL, v11);
  }

  return a1;
}

uint64_t assignWithTake for Goldilocks_ExitMoveBatchErrorFeedbackResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 40);
  v8(a1, a2, v6);
  uint64_t v9 = *(int *)(a3 + 20);
  uint64_t v10 = a1 + v9;
  uint64_t v11 = a2 + v9;
  uint64_t v12 = type metadata accessor for Goldilocks_ErrorInfo.ResultError(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  __int128 v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v13 + 48);
  int v15 = v14(v10, 1LL, v12);
  int v16 = v14(v11, 1LL, v12);
  if (!v15)
  {
    if (!v16)
    {
      uint64_t v28 = *(void *)(v11 + 8);
      uint64_t v29 = *(void *)(v10 + 8);
      *(void *)uint64_t v10 = *(void *)v11;
      *(void *)(v10 + 8) = v28;
      swift_bridgeObjectRelease(v29);
      *(void *)(v10 + 16) = *(void *)(v11 + 16);
      *(_BYTE *)(v10 + 24) = *(_BYTE *)(v11 + 24);
      uint64_t v30 = *(void *)(v11 + 40);
      uint64_t v31 = *(void *)(v10 + 40);
      *(void *)(v10 + 32) = *(void *)(v11 + 32);
      *(void *)(v10 + 40) = v30;
      swift_bridgeObjectRelease(v31);
      *(_DWORD *)(v10 + 48) = *(_DWORD *)(v11 + 48);
      uint64_t v32 = *(void *)(v10 + 56);
      *(void *)(v10 + 56) = *(void *)(v11 + 56);
      swift_bridgeObjectRelease(v32);
      uint64_t v33 = *(void *)(v11 + 72);
      uint64_t v34 = *(void *)(v10 + 72);
      *(void *)(v10 + 64) = *(void *)(v11 + 64);
      *(void *)(v10 + 72) = v33;
      swift_bridgeObjectRelease(v34);
      uint64_t v35 = *(void *)(v11 + 88);
      uint64_t v36 = *(void *)(v10 + 88);
      *(void *)(v10 + 80) = *(void *)(v11 + 80);
      *(void *)(v10 + 88) = v35;
      swift_bridgeObjectRelease(v36);
      v8(v10 + *(int *)(v12 + 44), v11 + *(int *)(v12 + 44), v6);
      uint64_t v37 = *(int *)(v12 + 48);
      uint64_t v38 = v10 + v37;
      uint64_t v39 = (_OWORD *)(v11 + v37);
      uint64_t v40 = type metadata accessor for Goldilocks_ErrorInfo.DatabaseFailure(0LL);
      uint64_t v41 = *(void *)(v40 - 8);
      uint64_t v42 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v41 + 48);
      int v43 = v42(v38, 1LL, v40);
      int v44 = v42((uint64_t)v39, 1LL, v40);
      if (v43)
      {
        if (!v44)
        {
          __int128 v45 = v39[1];
          *(_OWORD *)uint64_t v38 = *v39;
          *(_OWORD *)(v38 + 16) = v45;
          *(void *)(v38 + 32) = *((void *)v39 + 4);
          *(_BYTE *)(v38 + 40) = *((_BYTE *)v39 + 40);
          *(void *)(v38 + 48) = *((void *)v39 + 6);
          *(_BYTE *)(v38 + 56) = *((_BYTE *)v39 + 56);
          (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))( v38 + *(int *)(v40 + 32),  (char *)v39 + *(int *)(v40 + 32),  v6);
          (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v41 + 56))(v38, 0LL, 1LL, v40);
          return a1;
        }
      }

      else
      {
        if (!v44)
        {
          uint64_t v48 = *((void *)v39 + 1);
          uint64_t v49 = *(void *)(v38 + 8);
          *(void *)uint64_t v38 = *(void *)v39;
          *(void *)(v38 + 8) = v48;
          swift_bridgeObjectRelease(v49);
          uint64_t v50 = *((void *)v39 + 3);
          uint64_t v51 = *(void *)(v38 + 24);
          *(void *)(v38 + 16) = *((void *)v39 + 2);
          *(void *)(v38 + 24) = v50;
          swift_bridgeObjectRelease(v51);
          *(void *)(v38 + 32) = *((void *)v39 + 4);
          *(_BYTE *)(v38 + 40) = *((_BYTE *)v39 + 40);
          *(void *)(v38 + 48) = *((void *)v39 + 6);
          *(_BYTE *)(v38 + 56) = *((_BYTE *)v39 + 56);
          v8(v38 + *(int *)(v40 + 32), (uint64_t)v39 + *(int *)(v40 + 32), v6);
          return a1;
        }

        sub_1000CECE0(v38, type metadata accessor for Goldilocks_ErrorInfo.DatabaseFailure);
      }

      size_t v25 = *(void *)(*(void *)(sub_1000BED3C(&qword_100293CA8) - 8) + 64LL);
      uint64_t v26 = (void *)v38;
      uint64_t v27 = v39;
      goto LABEL_8;
    }

    sub_1000CECE0(v10, type metadata accessor for Goldilocks_ErrorInfo.ResultError);
LABEL_7:
    size_t v25 = *(void *)(*(void *)(sub_1000BED3C(&qword_100293C98) - 8) + 64LL);
    uint64_t v26 = (void *)v10;
    uint64_t v27 = (const void *)v11;
LABEL_8:
    memcpy(v26, v27, v25);
    return a1;
  }

  if (v16) {
    goto LABEL_7;
  }
  *(_OWORD *)uint64_t v10 = *(_OWORD *)v11;
  *(_BYTE *)(v10 + 24) = *(_BYTE *)(v11 + 24);
  *(void *)(v10 + 16) = *(void *)(v11 + 16);
  *(_OWORD *)(v10 + 32) = *(_OWORD *)(v11 + 32);
  *(_DWORD *)(v10 + 48) = *(_DWORD *)(v11 + 48);
  *(void *)(v10 + 56) = *(void *)(v11 + 56);
  __int128 v17 = *(_OWORD *)(v11 + 80);
  *(_OWORD *)(v10 + 64) = *(_OWORD *)(v11 + 64);
  *(_OWORD *)(v10 + 80) = v17;
  uint64_t v18 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 32);
  v18(v10 + *(int *)(v12 + 44), v11 + *(int *)(v12 + 44), v6);
  uint64_t v19 = *(int *)(v12 + 48);
  uint64_t v20 = (_OWORD *)(v10 + v19);
  __int128 v21 = (_OWORD *)(v11 + v19);
  uint64_t v22 = type metadata accessor for Goldilocks_ErrorInfo.DatabaseFailure(0LL);
  uint64_t v23 = *(void *)(v22 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v23 + 48))(v21, 1LL, v22))
  {
    uint64_t v24 = sub_1000BED3C(&qword_100293CA8);
    memcpy(v20, v21, *(void *)(*(void *)(v24 - 8) + 64LL));
  }

  else
  {
    __int128 v46 = v21[1];
    *uint64_t v20 = *v21;
    v20[1] = v46;
    *((void *)v20 + 4) = *((void *)v21 + 4);
    *((_BYTE *)v20 + 40) = *((_BYTE *)v21 + 40);
    *((void *)v20 + 6) = *((void *)v21 + 6);
    *((_BYTE *)v20 + 56) = *((_BYTE *)v21 + 56);
    v18((uint64_t)v20 + *(int *)(v22 + 32), (uint64_t)v21 + *(int *)(v22 + 32), v6);
    (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v23 + 56))(v20, 0LL, 1LL, v22);
  }

  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v13 + 56))(v10, 0LL, 1LL, v12);
  return a1;
}

uint64_t getEnumTagSinglePayload for Goldilocks_ExitMoveBatchErrorFeedbackResponse( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10010F54C);
}

uint64_t sub_10010F54C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
  }

  else
  {
    uint64_t v8 = sub_1000BED3C(&qword_100293C98);
    uint64_t v10 = a1 + *(int *)(a3 + 20);
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48LL);
  }

  return v9(v10, a2, v8);
}

uint64_t storeEnumTagSinglePayload for Goldilocks_ExitMoveBatchErrorFeedbackResponse( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10010F5D0);
}

uint64_t sub_10010F5D0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
  }

  else
  {
    uint64_t v10 = sub_1000BED3C(&qword_100293C98);
    uint64_t v12 = a1 + *(int *)(a4 + 20);
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56LL);
  }

  return v11(v12, a2, a2, v10);
}

void sub_10010F650(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UnknownStorage(319LL);
  if (v3 <= 0x3F)
  {
    v6[0] = *(void *)(v2 - 8) + 64LL;
    sub_1000D71B0( 319LL,  (unint64_t *)&unk_100294188,  type metadata accessor for Goldilocks_ErrorInfo.ResultError);
    if (v5 <= 0x3F)
    {
      v6[1] = *(void *)(v4 - 8) + 64LL;
      swift_initStructMetadata(a1, 256LL, 2LL, v6, a1 + 16);
    }
  }

uint64_t getEnumTagSinglePayload for Goldilocks_SilentMoverRampingRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10010F6F0);
}

uint64_t sub_10010F6F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }

  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage(0LL);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48LL))( a1 + *(int *)(a3 + 20),  a2,  v8);
  }

uint64_t storeEnumTagSinglePayload for Goldilocks_SilentMoverRampingRequest( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10010F778);
}

uint64_t sub_10010F778(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }

  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage(0LL);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL))( v5 + *(int *)(a4 + 20),  a2,  a2,  v7);
  }

  return result;
}

uint64_t sub_10010F7EC(uint64_t a1)
{
  v4[0] = &unk_100219570;
  uint64_t result = type metadata accessor for UnknownStorage(319LL);
  if (v3 <= 0x3F)
  {
    v4[1] = *(void *)(result - 8) + 64LL;
    swift_initStructMetadata(a1, 256LL, 2LL, v4, a1 + 16);
    return 0LL;
  }

  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for Goldilocks_SilentMoverRampingResponse( uint64_t *a1, uint64_t *a2, int *a3)
{
  unint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v19 = *a2;
    *unint64_t v4 = *a2;
    unint64_t v4 = (uint64_t *)(v19 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v19);
  }

  else
  {
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    a1[2] = a2[2];
    uint64_t v8 = a3[6];
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for UnknownStorage(0LL);
    uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16LL);
    swift_bridgeObjectRetain(v7);
    v12(v9, v10, v11);
    uint64_t v13 = a3[7];
    __int128 v14 = (uint64_t *)((char *)v4 + v13);
    int v15 = (uint64_t *)((char *)a2 + v13);
    uint64_t v16 = type metadata accessor for Goldilocks_OperationControl(0LL);
    uint64_t v17 = *(void *)(v16 - 8);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v17 + 48))(v15, 1LL, v16))
    {
      uint64_t v18 = sub_1000BED3C(&qword_100293CA0);
      memcpy(v14, v15, *(void *)(*(void *)(v18 - 8) + 64LL));
    }

    else
    {
      void *v14 = *v15;
      *((_BYTE *)v14 + 8) = *((_BYTE *)v15 + 8);
      *(_DWORD *)((char *)v14 + 9) = *(_DWORD *)((char *)v15 + 9);
      *(_WORD *)((char *)v14 + 13) = *(_WORD *)((char *)v15 + 13);
      v12((char *)v14 + *(int *)(v16 + 44), (char *)v15 + *(int *)(v16 + 44), v11);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v17 + 56))(v14, 0LL, 1LL, v16);
    }

    uint64_t v20 = a3[8];
    __int128 v21 = (uint64_t *)((char *)v4 + v20);
    uint64_t v22 = (uint64_t *)((char *)a2 + v20);
    uint64_t v23 = type metadata accessor for Goldilocks_ErrorInfo.ResultError(0LL);
    uint64_t v24 = *(void *)(v23 - 8);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v24 + 48))(v22, 1LL, v23))
    {
      uint64_t v25 = sub_1000BED3C(&qword_100293C98);
      memcpy(v21, v22, *(void *)(*(void *)(v25 - 8) + 64LL));
    }

    else
    {
      uint64_t v48 = v24;
      uint64_t v26 = v22[1];
      *__int128 v21 = *v22;
      v21[1] = v26;
      v21[2] = v22[2];
      *((_BYTE *)v21 + 24) = *((_BYTE *)v22 + 24);
      uint64_t v27 = v22[5];
      v21[4] = v22[4];
      v21[5] = v27;
      *((_DWORD *)v21 + 12) = *((_DWORD *)v22 + 12);
      uint64_t v29 = v22[7];
      uint64_t v28 = v22[8];
      v21[7] = v29;
      v21[8] = v28;
      uint64_t v31 = v22[9];
      uint64_t v30 = v22[10];
      v21[9] = v31;
      v21[10] = v30;
      uint64_t v49 = v12;
      uint64_t v32 = v22[11];
      v21[11] = v32;
      uint64_t v33 = *(int *)(v23 + 44);
      uint64_t v34 = (char *)v21 + v33;
      uint64_t v47 = (char *)v22 + v33;
      swift_bridgeObjectRetain(v26);
      swift_bridgeObjectRetain(v27);
      swift_bridgeObjectRetain(v29);
      swift_bridgeObjectRetain(v31);
      swift_bridgeObjectRetain(v32);
      v49(v34, v47, v11);
      uint64_t v35 = *(int *)(v23 + 48);
      uint64_t v36 = (void *)((char *)v21 + v35);
      uint64_t v37 = (void *)((char *)v22 + v35);
      uint64_t v38 = type metadata accessor for Goldilocks_ErrorInfo.DatabaseFailure(0LL);
      uint64_t v39 = *(void *)(v38 - 8);
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v39 + 48))(v37, 1LL, v38))
      {
        uint64_t v40 = sub_1000BED3C(&qword_100293CA8);
        memcpy(v36, v37, *(void *)(*(void *)(v40 - 8) + 64LL));
      }

      else
      {
        uint64_t v41 = v37[1];
        *uint64_t v36 = *v37;
        v36[1] = v41;
        uint64_t v42 = v37[3];
        v36[2] = v37[2];
        v36[3] = v42;
        v36[4] = v37[4];
        *((_BYTE *)v36 + 40) = *((_BYTE *)v37 + 40);
        v36[6] = v37[6];
        *((_BYTE *)v36 + 56) = *((_BYTE *)v37 + 56);
        uint64_t v43 = *(int *)(v38 + 32);
        int v44 = (char *)v36 + v43;
        __int128 v45 = (char *)v37 + v43;
        swift_bridgeObjectRetain(v41);
        swift_bridgeObjectRetain(v42);
        v49(v44, v45, v11);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v39 + 56))(v36, 0LL, 1LL, v38);
      }

      (*(void (**)(void *, void, uint64_t, uint64_t))(v48 + 56))(v21, 0LL, 1LL, v23);
    }
  }

  return v4;
}

uint64_t destroy for Goldilocks_SilentMoverRampingResponse(uint64_t a1, int *a2)
{
  uint64_t v4 = a1 + a2[6];
  uint64_t v5 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v13 = *(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8LL);
  v13(v4, v5);
  uint64_t v6 = a1 + a2[7];
  uint64_t v7 = type metadata accessor for Goldilocks_OperationControl(0LL);
  uint64_t v8 = (void *)(a1 + a2[8]);
  uint64_t v9 = type metadata accessor for Goldilocks_ErrorInfo.ResultError(0LL);
  uint64_t result = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48LL))(v8, 1LL, v9);
  if (!(_DWORD)result)
  {
    swift_bridgeObjectRelease(v8[1]);
    swift_bridgeObjectRelease(v8[5]);
    swift_bridgeObjectRelease(v8[7]);
    swift_bridgeObjectRelease(v8[9]);
    swift_bridgeObjectRelease(v8[11]);
    v13((uint64_t)v8 + *(int *)(v9 + 44), v5);
    uint64_t v11 = (char *)v8 + *(int *)(v9 + 48);
    uint64_t v12 = type metadata accessor for Goldilocks_ErrorInfo.DatabaseFailure(0LL);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v12 - 8) + 48LL))(v11, 1LL, v12);
    if (!(_DWORD)result)
    {
      swift_bridgeObjectRelease(*((void *)v11 + 1));
      swift_bridgeObjectRelease(*((void *)v11 + 3));
      return ((uint64_t (*)(char *, uint64_t))v13)(&v11[*(int *)(v12 + 32)], v5);
    }
  }

  return result;
}

void *initializeWithCopy for Goldilocks_SilentMoverRampingResponse(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  a1[2] = a2[2];
  uint64_t v7 = a3[6];
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16LL);
  swift_bridgeObjectRetain(v6);
  v11(v8, v9, v10);
  uint64_t v12 = a3[7];
  uint64_t v13 = (void *)((char *)a1 + v12);
  __int128 v14 = (void *)((char *)a2 + v12);
  uint64_t v15 = type metadata accessor for Goldilocks_OperationControl(0LL);
  uint64_t v16 = *(void *)(v15 - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v16 + 48))(v14, 1LL, v15))
  {
    uint64_t v17 = sub_1000BED3C(&qword_100293CA0);
    memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64LL));
  }

  else
  {
    *uint64_t v13 = *v14;
    *((_BYTE *)v13 + 8) = *((_BYTE *)v14 + 8);
    *(_DWORD *)((char *)v13 + 9) = *(_DWORD *)((char *)v14 + 9);
    *(_WORD *)((char *)v13 + 13) = *(_WORD *)((char *)v14 + 13);
    v11((char *)v13 + *(int *)(v15 + 44), (char *)v14 + *(int *)(v15 + 44), v10);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0LL, 1LL, v15);
  }

  uint64_t v18 = a3[8];
  uint64_t v19 = (void *)((char *)a1 + v18);
  uint64_t v20 = (void *)((char *)a2 + v18);
  uint64_t v21 = type metadata accessor for Goldilocks_ErrorInfo.ResultError(0LL);
  uint64_t v22 = *(void *)(v21 - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v22 + 48))(v20, 1LL, v21))
  {
    uint64_t v23 = sub_1000BED3C(&qword_100293C98);
    memcpy(v19, v20, *(void *)(*(void *)(v23 - 8) + 64LL));
  }

  else
  {
    uint64_t v46 = v22;
    uint64_t v24 = v20[1];
    *uint64_t v19 = *v20;
    v19[1] = v24;
    v19[2] = v20[2];
    *((_BYTE *)v19 + 24) = *((_BYTE *)v20 + 24);
    uint64_t v25 = v20[5];
    v19[4] = v20[4];
    v19[5] = v25;
    *((_DWORD *)v19 + 12) = *((_DWORD *)v20 + 12);
    uint64_t v27 = v20[7];
    uint64_t v26 = v20[8];
    v19[7] = v27;
    v19[8] = v26;
    uint64_t v29 = v20[9];
    uint64_t v28 = v20[10];
    v19[9] = v29;
    v19[10] = v28;
    uint64_t v47 = v11;
    uint64_t v30 = v20[11];
    v19[11] = v30;
    uint64_t v31 = *(int *)(v21 + 44);
    uint64_t v32 = (char *)v19 + v31;
    __int128 v45 = (char *)v20 + v31;
    swift_bridgeObjectRetain(v24);
    swift_bridgeObjectRetain(v25);
    swift_bridgeObjectRetain(v27);
    swift_bridgeObjectRetain(v29);
    swift_bridgeObjectRetain(v30);
    v47(v32, v45, v10);
    uint64_t v33 = *(int *)(v21 + 48);
    uint64_t v34 = (void *)((char *)v19 + v33);
    uint64_t v35 = (void *)((char *)v20 + v33);
    uint64_t v36 = type metadata accessor for Goldilocks_ErrorInfo.DatabaseFailure(0LL);
    uint64_t v37 = *(void *)(v36 - 8);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v37 + 48))(v35, 1LL, v36))
    {
      uint64_t v38 = sub_1000BED3C(&qword_100293CA8);
      memcpy(v34, v35, *(void *)(*(void *)(v38 - 8) + 64LL));
    }

    else
    {
      uint64_t v39 = v35[1];
      *uint64_t v34 = *v35;
      v34[1] = v39;
      uint64_t v40 = v35[3];
      v34[2] = v35[2];
      v34[3] = v40;
      v34[4] = v35[4];
      *((_BYTE *)v34 + 40) = *((_BYTE *)v35 + 40);
      v34[6] = v35[6];
      *((_BYTE *)v34 + 56) = *((_BYTE *)v35 + 56);
      uint64_t v41 = *(int *)(v36 + 32);
      uint64_t v42 = (char *)v34 + v41;
      uint64_t v43 = (char *)v35 + v41;
      swift_bridgeObjectRetain(v39);
      swift_bridgeObjectRetain(v40);
      v47(v42, v43, v10);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v37 + 56))(v34, 0LL, 1LL, v36);
    }

    (*(void (**)(void *, void, uint64_t, uint64_t))(v46 + 56))(v19, 0LL, 1LL, v21);
  }

  return a1;
}

void *assignWithCopy for Goldilocks_SilentMoverRampingResponse(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a2[1];
  uint64_t v7 = a1[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  a1[2] = a2[2];
  uint64_t v8 = a3[6];
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v91 = *(void *)(v11 - 8);
  uint64_t v93 = v11;
  uint64_t v12 = *(void (**)(char *, char *))(v91 + 24);
  v12(v9, v10);
  uint64_t v13 = a3[7];
  __int128 v14 = (char *)a1 + v13;
  uint64_t v15 = (char *)a2 + v13;
  uint64_t v16 = type metadata accessor for Goldilocks_OperationControl(0LL);
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v18 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v17 + 48);
  int v19 = v18(v14, 1LL, v16);
  int v20 = v18(v15, 1LL, v16);
  if (v19)
  {
    if (!v20)
    {
      uint64_t v21 = *(void *)v15;
      v14[8] = v15[8];
      *(void *)__int128 v14 = v21;
      v14[9] = v15[9];
      v14[10] = v15[10];
      v14[11] = v15[11];
      v14[12] = v15[12];
      v14[13] = v15[13];
      v14[14] = v15[14];
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v91 + 16))( &v14[*(int *)(v16 + 44)],  &v15[*(int *)(v16 + 44)],  v93);
      (*(void (**)(_BYTE *, void, uint64_t, uint64_t))(v17 + 56))(v14, 0LL, 1LL, v16);
      goto LABEL_7;
    }

    goto LABEL_6;
  }

  if (v20)
  {
    sub_1000CECE0((uint64_t)v14, type metadata accessor for Goldilocks_OperationControl);
LABEL_6:
    uint64_t v22 = sub_1000BED3C(&qword_100293CA0);
    memcpy(v14, v15, *(void *)(*(void *)(v22 - 8) + 64LL));
    goto LABEL_7;
  }

  uint64_t v48 = *(void *)v15;
  v14[8] = v15[8];
  *(void *)__int128 v14 = v48;
  v14[9] = v15[9];
  v14[10] = v15[10];
  v14[11] = v15[11];
  v14[12] = v15[12];
  v14[13] = v15[13];
  v14[14] = v15[14];
  ((void (*)(_BYTE *, _BYTE *, uint64_t))v12)(&v14[*(int *)(v16 + 44)], &v15[*(int *)(v16 + 44)], v93);
LABEL_7:
  uint64_t v23 = a3[8];
  uint64_t v24 = (uint64_t)a1 + v23;
  uint64_t v25 = (char *)a2 + v23;
  uint64_t v26 = type metadata accessor for Goldilocks_ErrorInfo.ResultError(0LL);
  uint64_t v27 = *(void *)(v26 - 8);
  uint64_t v28 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v27 + 48);
  int v29 = v28(v24, 1LL, v26);
  int v30 = v28((uint64_t)v25, 1LL, v26);
  if (!v29)
  {
    if (!v30)
    {
      *(void *)uint64_t v24 = *(void *)v25;
      uint64_t v49 = *((void *)v25 + 1);
      uint64_t v50 = *(void *)(v24 + 8);
      *(void *)(v24 + 8) = v49;
      swift_bridgeObjectRetain(v49);
      swift_bridgeObjectRelease(v50);
      uint64_t v51 = *((void *)v25 + 2);
      *(_BYTE *)(v24 + 24) = v25[24];
      *(void *)(v24 + 16) = v51;
      *(void *)(v24 + 32) = *((void *)v25 + 4);
      uint64_t v52 = *((void *)v25 + 5);
      uint64_t v53 = *(void *)(v24 + 40);
      *(void *)(v24 + 40) = v52;
      swift_bridgeObjectRetain(v52);
      swift_bridgeObjectRelease(v53);
      *(_DWORD *)(v24 + 48) = *((_DWORD *)v25 + 12);
      uint64_t v54 = *((void *)v25 + 7);
      uint64_t v55 = *(void *)(v24 + 56);
      *(void *)(v24 + 56) = v54;
      swift_bridgeObjectRetain(v54);
      swift_bridgeObjectRelease(v55);
      *(void *)(v24 + 64) = *((void *)v25 + 8);
      uint64_t v56 = *((void *)v25 + 9);
      uint64_t v57 = *(void *)(v24 + 72);
      *(void *)(v24 + 72) = v56;
      swift_bridgeObjectRetain(v56);
      swift_bridgeObjectRelease(v57);
      *(void *)(v24 + 80) = *((void *)v25 + 10);
      uint64_t v58 = *((void *)v25 + 11);
      uint64_t v59 = *(void *)(v24 + 88);
      *(void *)(v24 + 88) = v58;
      swift_bridgeObjectRetain(v58);
      swift_bridgeObjectRelease(v59);
      ((void (*)(uint64_t, char *, uint64_t))v12)(v24 + *(int *)(v26 + 44), &v25[*(int *)(v26 + 44)], v93);
      uint64_t v60 = *(int *)(v26 + 48);
      uint64_t v61 = v24 + v60;
      uint64_t v62 = &v25[v60];
      uint64_t v63 = type metadata accessor for Goldilocks_ErrorInfo.DatabaseFailure(0LL);
      uint64_t v64 = *(void *)(v63 - 8);
      uint64_t v65 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v64 + 48);
      LODWORD(v59) = v65(v61, 1LL, v63);
      int v66 = v65((uint64_t)v62, 1LL, v63);
      if ((_DWORD)v59)
      {
        if (!v66)
        {
          *(void *)uint64_t v61 = *(void *)v62;
          uint64_t v67 = *((void *)v62 + 1);
          *(void *)(v61 + 8) = v67;
          *(void *)(v61 + 16) = *((void *)v62 + 2);
          uint64_t v68 = *((void *)v62 + 3);
          *(void *)(v61 + 24) = v68;
          uint64_t v69 = *((void *)v62 + 4);
          *(_BYTE *)(v61 + 40) = v62[40];
          *(void *)(v61 + 32) = v69;
          uint64_t v70 = *((void *)v62 + 6);
          *(_BYTE *)(v61 + 56) = v62[56];
          *(void *)(v61 + 48) = v70;
          uint64_t v71 = *(int *)(v63 + 32);
          uint64_t v72 = v61 + v71;
          uint64_t v73 = &v62[v71];
          uint64_t v74 = *(void (**)(uint64_t, char *, uint64_t))(v91 + 16);
          swift_bridgeObjectRetain(v67);
          swift_bridgeObjectRetain(v68);
          v74(v72, v73, v93);
          (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v64 + 56))(v61, 0LL, 1LL, v63);
          return a1;
        }
      }

      else
      {
        if (!v66)
        {
          *(void *)uint64_t v61 = *(void *)v62;
          uint64_t v83 = *((void *)v62 + 1);
          uint64_t v84 = *(void *)(v61 + 8);
          *(void *)(v61 + 8) = v83;
          swift_bridgeObjectRetain(v83);
          swift_bridgeObjectRelease(v84);
          *(void *)(v61 + 16) = *((void *)v62 + 2);
          uint64_t v85 = *((void *)v62 + 3);
          uint64_t v86 = *(void *)(v61 + 24);
          *(void *)(v61 + 24) = v85;
          swift_bridgeObjectRetain(v85);
          swift_bridgeObjectRelease(v86);
          uint64_t v87 = *((void *)v62 + 4);
          *(_BYTE *)(v61 + 40) = v62[40];
          *(void *)(v61 + 32) = v87;
          uint64_t v88 = *((void *)v62 + 6);
          *(_BYTE *)(v61 + 56) = v62[56];
          *(void *)(v61 + 48) = v88;
          ((void (*)(uint64_t, char *, uint64_t))v12)(v61 + *(int *)(v63 + 32), &v62[*(int *)(v63 + 32)], v93);
          return a1;
        }

        sub_1000CECE0(v61, type metadata accessor for Goldilocks_ErrorInfo.DatabaseFailure);
      }

      size_t v45 = *(void *)(*(void *)(sub_1000BED3C(&qword_100293CA8) - 8) + 64LL);
      uint64_t v46 = (void *)v61;
      uint64_t v47 = v62;
      goto LABEL_14;
    }

    sub_1000CECE0(v24, type metadata accessor for Goldilocks_ErrorInfo.ResultError);
LABEL_13:
    size_t v45 = *(void *)(*(void *)(sub_1000BED3C(&qword_100293C98) - 8) + 64LL);
    uint64_t v46 = (void *)v24;
    uint64_t v47 = v25;
LABEL_14:
    memcpy(v46, v47, v45);
    return a1;
  }

  if (v30) {
    goto LABEL_13;
  }
  *(void *)uint64_t v24 = *(void *)v25;
  uint64_t v31 = *((void *)v25 + 1);
  *(void *)(v24 + 8) = v31;
  uint64_t v32 = *((void *)v25 + 2);
  *(_BYTE *)(v24 + 24) = v25[24];
  *(void *)(v24 + 16) = v32;
  *(void *)(v24 + 32) = *((void *)v25 + 4);
  uint64_t v33 = *((void *)v25 + 5);
  *(void *)(v24 + 40) = v33;
  *(_DWORD *)(v24 + 48) = *((_DWORD *)v25 + 12);
  uint64_t v34 = *((void *)v25 + 7);
  *(void *)(v24 + 56) = v34;
  *(void *)(v24 + 64) = *((void *)v25 + 8);
  uint64_t v35 = *((void *)v25 + 9);
  *(void *)(v24 + 72) = v35;
  *(void *)(v24 + 80) = *((void *)v25 + 10);
  uint64_t v36 = *((void *)v25 + 11);
  *(void *)(v24 + 88) = v36;
  uint64_t v37 = *(int *)(v26 + 44);
  uint64_t v89 = &v25[v37];
  uint64_t v90 = (char *)(v24 + v37);
  uint64_t v38 = *(void (**)(char *, char *, uint64_t))(v91 + 16);
  swift_bridgeObjectRetain(v31);
  swift_bridgeObjectRetain(v33);
  swift_bridgeObjectRetain(v34);
  swift_bridgeObjectRetain(v35);
  swift_bridgeObjectRetain(v36);
  uint64_t v92 = v38;
  v38(v90, v89, v93);
  uint64_t v39 = *(int *)(v26 + 48);
  uint64_t v40 = (void *)(v24 + v39);
  uint64_t v41 = &v25[v39];
  uint64_t v42 = type metadata accessor for Goldilocks_ErrorInfo.DatabaseFailure(0LL);
  uint64_t v43 = *(void *)(v42 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v43 + 48))(v41, 1LL, v42))
  {
    uint64_t v44 = sub_1000BED3C(&qword_100293CA8);
    memcpy(v40, v41, *(void *)(*(void *)(v44 - 8) + 64LL));
  }

  else
  {
    *uint64_t v40 = *(void *)v41;
    uint64_t v75 = *((void *)v41 + 1);
    v40[1] = v75;
    v40[2] = *((void *)v41 + 2);
    uint64_t v76 = *((void *)v41 + 3);
    v40[3] = v76;
    uint64_t v77 = *((void *)v41 + 4);
    *((_BYTE *)v40 + 40) = v41[40];
    v40[4] = v77;
    uint64_t v78 = *((void *)v41 + 6);
    *((_BYTE *)v40 + 56) = v41[56];
    v40[6] = v78;
    uint64_t v79 = *(int *)(v42 + 32);
    uint64_t v80 = (char *)v40 + v79;
    uint64_t v81 = &v41[v79];
    swift_bridgeObjectRetain(v75);
    swift_bridgeObjectRetain(v76);
    v92(v80, v81, v93);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v43 + 56))(v40, 0LL, 1LL, v42);
  }

  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v27 + 56))(v24, 0LL, 1LL, v26);
  return a1;
}

uint64_t initializeWithTake for Goldilocks_SilentMoverRampingResponse(uint64_t a1, uint64_t a2, int *a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  uint64_t v6 = a3[6];
  uint64_t v7 = (char *)(a1 + v6);
  uint64_t v8 = (char *)(a2 + v6);
  uint64_t v9 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32LL);
  v10(v7, v8, v9);
  uint64_t v11 = a3[7];
  uint64_t v12 = (void *)(a1 + v11);
  uint64_t v13 = (void *)(a2 + v11);
  uint64_t v14 = type metadata accessor for Goldilocks_OperationControl(0LL);
  uint64_t v15 = *(void *)(v14 - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v15 + 48))(v13, 1LL, v14))
  {
    uint64_t v16 = sub_1000BED3C(&qword_100293CA0);
    memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64LL));
  }

  else
  {
    *uint64_t v12 = *v13;
    *((_BYTE *)v12 + 8) = *((_BYTE *)v13 + 8);
    *(_DWORD *)((char *)v12 + 9) = *(_DWORD *)((char *)v13 + 9);
    *(_WORD *)((char *)v12 + 13) = *(_WORD *)((char *)v13 + 13);
    v10((char *)v12 + *(int *)(v14 + 44), (char *)v13 + *(int *)(v14 + 44), v9);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0LL, 1LL, v14);
  }

  uint64_t v17 = a3[8];
  uint64_t v18 = (_OWORD *)(a1 + v17);
  int v19 = (_OWORD *)(a2 + v17);
  uint64_t v20 = type metadata accessor for Goldilocks_ErrorInfo.ResultError(0LL);
  uint64_t v21 = *(void *)(v20 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v21 + 48))(v19, 1LL, v20))
  {
    uint64_t v22 = sub_1000BED3C(&qword_100293C98);
    memcpy(v18, v19, *(void *)(*(void *)(v22 - 8) + 64LL));
  }

  else
  {
    _OWORD *v18 = *v19;
    *((void *)v18 + 2) = *((void *)v19 + 2);
    *((_BYTE *)v18 + 24) = *((_BYTE *)v19 + 24);
    v18[2] = v19[2];
    *((_DWORD *)v18 + 12) = *((_DWORD *)v19 + 12);
    *((void *)v18 + 7) = *((void *)v19 + 7);
    __int128 v23 = v19[5];
    v18[4] = v19[4];
    v18[5] = v23;
    v10((char *)v18 + *(int *)(v20 + 44), (char *)v19 + *(int *)(v20 + 44), v9);
    uint64_t v24 = *(int *)(v20 + 48);
    uint64_t v25 = (_OWORD *)((char *)v18 + v24);
    uint64_t v26 = (_OWORD *)((char *)v19 + v24);
    uint64_t v27 = type metadata accessor for Goldilocks_ErrorInfo.DatabaseFailure(0LL);
    uint64_t v28 = *(void *)(v27 - 8);
    if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v28 + 48))(v26, 1LL, v27))
    {
      uint64_t v29 = sub_1000BED3C(&qword_100293CA8);
      memcpy(v25, v26, *(void *)(*(void *)(v29 - 8) + 64LL));
    }

    else
    {
      __int128 v30 = v26[1];
      _OWORD *v25 = *v26;
      v25[1] = v30;
      *((void *)v25 + 4) = *((void *)v26 + 4);
      *((_BYTE *)v25 + 40) = *((_BYTE *)v26 + 40);
      *((void *)v25 + 6) = *((void *)v26 + 6);
      *((_BYTE *)v25 + 56) = *((_BYTE *)v26 + 56);
      v10((char *)v25 + *(int *)(v27 + 32), (char *)v26 + *(int *)(v27 + 32), v9);
      (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v28 + 56))(v25, 0LL, 1LL, v27);
    }

    (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v21 + 56))(v18, 0LL, 1LL, v20);
  }

  return a1;
}

void *assignWithTake for Goldilocks_SilentMoverRampingResponse(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  uint64_t v7 = a1[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease(v7);
  a1[2] = a2[2];
  uint64_t v8 = a3[6];
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v66 = *(void *)(v11 - 8);
  uint64_t v67 = v11;
  uint64_t v12 = *(void (**)(char *, char *))(v66 + 40);
  v12(v9, v10);
  uint64_t v13 = a3[7];
  uint64_t v14 = (char *)a1 + v13;
  uint64_t v15 = (char *)a2 + v13;
  uint64_t v16 = type metadata accessor for Goldilocks_OperationControl(0LL);
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v18 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v17 + 48);
  int v19 = v18(v14, 1LL, v16);
  int v20 = v18(v15, 1LL, v16);
  if (v19)
  {
    if (!v20)
    {
      *(void *)uint64_t v14 = *(void *)v15;
      v14[8] = v15[8];
      *(_DWORD *)(v14 + 9) = *(_DWORD *)(v15 + 9);
      *(_WORD *)(v14 + 13) = *(_WORD *)(v15 + 13);
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v66 + 32))( &v14[*(int *)(v16 + 44)],  &v15[*(int *)(v16 + 44)],  v67);
      (*(void (**)(_BYTE *, void, uint64_t, uint64_t))(v17 + 56))(v14, 0LL, 1LL, v16);
LABEL_7:
      uint64_t v22 = (void (*)(uint64_t, char *, uint64_t))v12;
      goto LABEL_8;
    }

uint64_t getEnumTagSinglePayload for Goldilocks_SilentMoverRampingResponse( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100110E40);
}

uint64_t sub_100110E40(uint64_t a1, uint64_t a2, int *a3)
{
  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }

  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage(0LL);
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      uint64_t v10 = v8;
      uint64_t v11 = a3[6];
    }

    else
    {
      uint64_t v12 = sub_1000BED3C(&qword_100293CA0);
      uint64_t v9 = *(void *)(v12 - 8);
      if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
      {
        uint64_t v10 = v12;
        uint64_t v11 = a3[7];
      }

      else
      {
        uint64_t v10 = sub_1000BED3C(&qword_100293C98);
        uint64_t v9 = *(void *)(v10 - 8);
        uint64_t v11 = a3[8];
      }
    }

    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }

uint64_t storeEnumTagSinglePayload for Goldilocks_SilentMoverRampingResponse( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100110F18);
}

uint64_t sub_100110F18(uint64_t result, uint64_t a2, int a3, int *a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }

  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage(0LL);
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      uint64_t v10 = v8;
      uint64_t v11 = a4[6];
    }

    else
    {
      uint64_t v12 = sub_1000BED3C(&qword_100293CA0);
      uint64_t v9 = *(void *)(v12 - 8);
      if (*(_DWORD *)(v9 + 84) == a3)
      {
        uint64_t v10 = v12;
        uint64_t v11 = a4[7];
      }

      else
      {
        uint64_t v10 = sub_1000BED3C(&qword_100293C98);
        uint64_t v9 = *(void *)(v10 - 8);
        uint64_t v11 = a4[8];
      }
    }

    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }

  return result;
}

void sub_100110FE0(uint64_t a1)
{
  v8[0] = &unk_100219570;
  v8[1] = (char *)&value witness table for Builtin.Int64 + 64;
  uint64_t v2 = type metadata accessor for UnknownStorage(319LL);
  if (v3 <= 0x3F)
  {
    v8[2] = *(void *)(v2 - 8) + 64LL;
    sub_1000D71B0(319LL, (unint64_t *)&unk_100294950, type metadata accessor for Goldilocks_OperationControl);
    if (v5 <= 0x3F)
    {
      v8[3] = *(void *)(v4 - 8) + 64LL;
      sub_1000D71B0( 319LL,  (unint64_t *)&unk_100294188,  type metadata accessor for Goldilocks_ErrorInfo.ResultError);
      if (v7 <= 0x3F)
      {
        void v8[4] = *(void *)(v6 - 8) + 64LL;
        swift_initStructMetadata(a1, 256LL, 5LL, v8, a1 + 16);
      }
    }
  }

void *initializeBufferWithCopyOfBuffer for Goldilocks_OperationControl( uint64_t a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v3 = (void *)a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *unint64_t v3 = *a2;
    unint64_t v3 = (void *)(v9 + ((v4 + 16LL) & ~(unint64_t)v4));
    swift_retain(v9);
  }

  else
  {
    *(void *)a1 = *a2;
    *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
    *(_DWORD *)(a1 + 9) = *(_DWORD *)((char *)a2 + 9);
    *(_WORD *)(a1 + 13) = *(_WORD *)((char *)a2 + 13);
    uint64_t v5 = *(int *)(a3 + 44);
    uint64_t v6 = a1 + v5;
    uint64_t v7 = (uint64_t)a2 + v5;
    uint64_t v8 = type metadata accessor for UnknownStorage(0LL);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 16LL))(v6, v7, v8);
  }

  return v3;
}

uint64_t destroy for Goldilocks_OperationControl(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1 + *(int *)(a2 + 44);
  uint64_t v3 = type metadata accessor for UnknownStorage(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8LL))(v2, v3);
}

uint64_t initializeWithCopy for Goldilocks_OperationControl(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_DWORD *)(a1 + 9) = *(_DWORD *)(a2 + 9);
  *(_WORD *)(a1 + 13) = *(_WORD *)(a2 + 13);
  uint64_t v4 = *(int *)(a3 + 44);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16LL))(v5, v6, v7);
  return a1;
}

uint64_t assignWithCopy for Goldilocks_OperationControl(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = *a2;
  *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
  *(void *)a1 = v4;
  *(_BYTE *)(a1 + 9) = *((_BYTE *)a2 + 9);
  *(_BYTE *)(a1 + 10) = *((_BYTE *)a2 + 10);
  *(_BYTE *)(a1 + 11) = *((_BYTE *)a2 + 11);
  *(_BYTE *)(a1 + 12) = *((_BYTE *)a2 + 12);
  *(_BYTE *)(a1 + 13) = *((_BYTE *)a2 + 13);
  *(_BYTE *)(a1 + 14) = *((_BYTE *)a2 + 14);
  uint64_t v5 = *(int *)(a3 + 44);
  uint64_t v6 = a1 + v5;
  uint64_t v7 = (uint64_t)a2 + v5;
  uint64_t v8 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 24LL))(v6, v7, v8);
  return a1;
}

uint64_t initializeWithTake for Goldilocks_OperationControl(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_DWORD *)(a1 + 9) = *(_DWORD *)(a2 + 9);
  *(_WORD *)(a1 + 13) = *(_WORD *)(a2 + 13);
  uint64_t v4 = *(int *)(a3 + 44);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32LL))(v5, v6, v7);
  return a1;
}

uint64_t assignWithTake for Goldilocks_OperationControl(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_BYTE *)(a1 + 9) = *(_BYTE *)(a2 + 9);
  *(_BYTE *)(a1 + 10) = *(_BYTE *)(a2 + 10);
  *(_BYTE *)(a1 + 11) = *(_BYTE *)(a2 + 11);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(a2 + 12);
  *(_BYTE *)(a1 + 13) = *(_BYTE *)(a2 + 13);
  uint64_t v4 = *(int *)(a3 + 44);
  uint64_t v5 = a2 + v4;
  uint64_t v6 = a1 + v4;
  *(_BYTE *)(a1 + 14) = *(_BYTE *)(a2 + 14);
  uint64_t v7 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 40LL))(v6, v5, v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for Goldilocks_OperationControl(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1001113AC);
}

uint64_t sub_1001113AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((_DWORD)a2 == 254)
  {
    unsigned int v4 = *(unsigned __int8 *)(a1 + 9);
    BOOL v5 = v4 >= 2;
    int v6 = (v4 + 2147483646) & 0x7FFFFFFF;
    if (v5) {
      return (v6 + 1);
    }
    else {
      return 0LL;
    }
  }

  else
  {
    uint64_t v10 = type metadata accessor for UnknownStorage(0LL);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48LL))( a1 + *(int *)(a3 + 44),  a2,  v10);
  }

uint64_t storeEnumTagSinglePayload for Goldilocks_OperationControl( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100111434);
}

uint64_t sub_100111434(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 254)
  {
    *(_BYTE *)(result + 9) = a2 + 1;
  }

  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage(0LL);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL))( v5 + *(int *)(a4 + 44),  a2,  a2,  v7);
  }

  return result;
}

uint64_t sub_1001114A4(uint64_t a1)
{
  v4[0] = &unk_100219588;
  v4[1] = &unk_1002196F8;
  void v4[2] = &unk_1002196F8;
  void v4[3] = &unk_1002196F8;
  v4[4] = &unk_1002196F8;
  v4[5] = &unk_1002196F8;
  v4[6] = &unk_1002196F8;
  uint64_t result = type metadata accessor for UnknownStorage(319LL);
  if (v3 <= 0x3F)
  {
    v4[7] = *(void *)(result - 8) + 64LL;
    swift_initStructMetadata(a1, 256LL, 8LL, v4, a1 + 16);
    return 0LL;
  }

  return result;
}

void *initializeBufferWithCopyOfBuffer for Goldilocks_OperationControl.OneOf_OptionalUnshareOperationPercentage( void *result, void *a2)
{
  *uint64_t result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for Goldilocks_OperationControl.OneOf_OptionalUnshareOperationPercentage( uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 8)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t storeEnumTagSinglePayload for Goldilocks_OperationControl.OneOf_OptionalUnshareOperationPercentage( uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)uint64_t result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }

  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }

  *(_BYTE *)(result + 8) = v3;
  return result;
}

ValueMetadata *type metadata accessor for Goldilocks_OperationControl.OneOf_OptionalUnshareOperationPercentage()
{
  return &type metadata for Goldilocks_OperationControl.OneOf_OptionalUnshareOperationPercentage;
}

uint64_t getEnumTagSinglePayload for Goldilocks_ErrorInfo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10011159C);
}

uint64_t storeEnumTagSinglePayload for Goldilocks_ErrorInfo(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1001115AC);
}

ValueMetadata *type metadata accessor for Goldilocks_ErrorInfo.ResultErrorCode()
{
  return &type metadata for Goldilocks_ErrorInfo.ResultErrorCode;
}

uint64_t getEnumTagSinglePayload for Goldilocks_ErrorInfo.DatabaseFailure(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1001115CC);
}

uint64_t sub_1001115CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }

  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage(0LL);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48LL))( a1 + *(int *)(a3 + 32),  a2,  v8);
  }

uint64_t storeEnumTagSinglePayload for Goldilocks_ErrorInfo.DatabaseFailure( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100111654);
}

uint64_t sub_100111654(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }

  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage(0LL);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL))( v5 + *(int *)(a4 + 32),  a2,  a2,  v7);
  }

  return result;
}

uint64_t sub_1001116C8(uint64_t a1)
{
  v4[0] = &unk_100219570;
  v4[1] = &unk_100219570;
  void v4[2] = &unk_100219588;
  void v4[3] = &unk_100219588;
  uint64_t result = type metadata accessor for UnknownStorage(319LL);
  if (v3 <= 0x3F)
  {
    v4[4] = *(void *)(result - 8) + 64LL;
    swift_initStructMetadata(a1, 256LL, 5LL, v4, a1 + 16);
    return 0LL;
  }

  return result;
}

void *initializeBufferWithCopyOfBuffer for Goldilocks_ErrorInfo.ResultError( uint64_t a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v4 = (void *)a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v23 = *a2;
    *unint64_t v4 = *a2;
    unint64_t v4 = (void *)(v23 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v23);
  }

  else
  {
    uint64_t v7 = a2[1];
    *(void *)a1 = *a2;
    *(void *)(a1 + 8) = v7;
    *(void *)(a1 + 16) = a2[2];
    *(_BYTE *)(a1 + 24) = *((_BYTE *)a2 + 24);
    uint64_t v8 = a2[5];
    *(void *)(a1 + 32) = a2[4];
    *(void *)(a1 + 40) = v8;
    *(_DWORD *)(a1 + 48) = *((_DWORD *)a2 + 12);
    uint64_t v10 = a2[7];
    uint64_t v9 = a2[8];
    *(void *)(a1 + 56) = v10;
    *(void *)(a1 + 64) = v9;
    uint64_t v12 = a2[9];
    uint64_t v11 = a2[10];
    *(void *)(a1 + 72) = v12;
    *(void *)(a1 + 80) = v11;
    uint64_t v13 = a2[11];
    uint64_t v14 = *(int *)(a3 + 44);
    uint64_t v30 = (uint64_t)a2 + v14;
    uint64_t v31 = a1 + v14;
    *(void *)(a1 + 88) = v13;
    uint64_t v15 = type metadata accessor for UnknownStorage(0LL);
    uint64_t v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 16LL);
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v10);
    swift_bridgeObjectRetain(v12);
    swift_bridgeObjectRetain(v13);
    v16(v31, v30, v15);
    uint64_t v17 = *(int *)(a3 + 48);
    uint64_t v18 = (void *)((char *)v4 + v17);
    int v19 = (uint64_t *)((char *)a2 + v17);
    uint64_t v20 = type metadata accessor for Goldilocks_ErrorInfo.DatabaseFailure(0LL);
    uint64_t v21 = *(void *)(v20 - 8);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v21 + 48))(v19, 1LL, v20))
    {
      uint64_t v22 = sub_1000BED3C(&qword_100293CA8);
      memcpy(v18, v19, *(void *)(*(void *)(v22 - 8) + 64LL));
    }

    else
    {
      uint64_t v24 = v19[1];
      void *v18 = *v19;
      v18[1] = v24;
      uint64_t v25 = v19[3];
      v18[2] = v19[2];
      v18[3] = v25;
      v18[4] = v19[4];
      *((_BYTE *)v18 + 40) = *((_BYTE *)v19 + 40);
      v18[6] = v19[6];
      *((_BYTE *)v18 + 56) = *((_BYTE *)v19 + 56);
      uint64_t v26 = *(int *)(v20 + 32);
      uint64_t v27 = (char *)v18 + v26;
      uint64_t v28 = (char *)v19 + v26;
      swift_bridgeObjectRetain(v24);
      swift_bridgeObjectRetain(v25);
      v16((uint64_t)v27, (uint64_t)v28, v15);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v21 + 56))(v18, 0LL, 1LL, v20);
    }
  }

  return v4;
}

uint64_t destroy for Goldilocks_ErrorInfo.ResultError(void *a1, uint64_t a2)
{
  unint64_t v4 = (char *)a1 + *(int *)(a2 + 44);
  uint64_t v5 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v9 = *(void (**)(char *, uint64_t))(*(void *)(v5 - 8) + 8LL);
  v9(v4, v5);
  int v6 = (char *)a1 + *(int *)(a2 + 48);
  uint64_t v7 = type metadata accessor for Goldilocks_ErrorInfo.DatabaseFailure(0LL);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48LL))(v6, 1LL, v7);
  if (!(_DWORD)result)
  {
    swift_bridgeObjectRelease(*((void *)v6 + 1));
    swift_bridgeObjectRelease(*((void *)v6 + 3));
    return ((uint64_t (*)(char *, uint64_t))v9)(&v6[*(int *)(v7 + 32)], v5);
  }

  return result;
}

uint64_t initializeWithCopy for Goldilocks_ErrorInfo.ResultError(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v5;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  uint64_t v6 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v6;
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  uint64_t v8 = *(void *)(a2 + 56);
  uint64_t v7 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = v8;
  *(void *)(a1 + 64) = v7;
  uint64_t v10 = *(void *)(a2 + 72);
  uint64_t v9 = *(void *)(a2 + 80);
  *(void *)(a1 + 72) = v10;
  *(void *)(a1 + 80) = v9;
  uint64_t v11 = *(void *)(a2 + 88);
  uint64_t v12 = *(int *)(a3 + 44);
  uint64_t v13 = (char *)(a1 + v12);
  uint64_t v30 = (char *)(a2 + v12);
  *(void *)(a1 + 88) = v11;
  uint64_t v14 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v15 = *(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 16LL);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v10);
  uint64_t v16 = v11;
  uint64_t v17 = v15;
  swift_bridgeObjectRetain(v16);
  v15(v13, v30, v14);
  uint64_t v18 = *(int *)(a3 + 48);
  int v19 = (void *)(a1 + v18);
  uint64_t v20 = (void *)(a2 + v18);
  uint64_t v21 = type metadata accessor for Goldilocks_ErrorInfo.DatabaseFailure(0LL);
  uint64_t v22 = *(void *)(v21 - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v22 + 48))(v20, 1LL, v21))
  {
    uint64_t v23 = sub_1000BED3C(&qword_100293CA8);
    memcpy(v19, v20, *(void *)(*(void *)(v23 - 8) + 64LL));
  }

  else
  {
    uint64_t v24 = v20[1];
    *int v19 = *v20;
    v19[1] = v24;
    uint64_t v25 = v20[3];
    v19[2] = v20[2];
    v19[3] = v25;
    v19[4] = v20[4];
    *((_BYTE *)v19 + 40) = *((_BYTE *)v20 + 40);
    v19[6] = v20[6];
    *((_BYTE *)v19 + 56) = *((_BYTE *)v20 + 56);
    uint64_t v26 = *(int *)(v21 + 32);
    uint64_t v27 = (char *)v19 + v26;
    uint64_t v28 = (char *)v20 + v26;
    swift_bridgeObjectRetain(v24);
    swift_bridgeObjectRetain(v25);
    v17(v27, v28, v14);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v22 + 56))(v19, 0LL, 1LL, v21);
  }

  return a1;
}

uint64_t assignWithCopy for Goldilocks_ErrorInfo.ResultError(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v6 = *(void *)(a2 + 8);
  uint64_t v7 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = *(void *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(void *)(a1 + 16) = v8;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  uint64_t v9 = *(void *)(a2 + 40);
  uint64_t v10 = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = v9;
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRelease(v10);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  uint64_t v11 = *(void *)(a2 + 56);
  uint64_t v12 = *(void *)(a1 + 56);
  *(void *)(a1 + 56) = v11;
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRelease(v12);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  uint64_t v13 = *(void *)(a2 + 72);
  uint64_t v14 = *(void *)(a1 + 72);
  *(void *)(a1 + 72) = v13;
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRelease(v14);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  uint64_t v15 = *(void *)(a2 + 88);
  uint64_t v16 = *(void *)(a1 + 88);
  *(void *)(a1 + 88) = v15;
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRelease(v16);
  uint64_t v17 = *(int *)(a3 + 44);
  uint64_t v18 = a1 + v17;
  uint64_t v19 = a2 + v17;
  uint64_t v20 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v21 = *(void *)(v20 - 8);
  uint64_t v22 = *(void (**)(uint64_t, uint64_t, uint64_t))(v21 + 24);
  v22(v18, v19, v20);
  uint64_t v23 = *(int *)(a3 + 48);
  uint64_t v24 = a1 + v23;
  uint64_t v25 = a2 + v23;
  uint64_t v26 = type metadata accessor for Goldilocks_ErrorInfo.DatabaseFailure(0LL);
  uint64_t v27 = *(void *)(v26 - 8);
  uint64_t v28 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v27 + 48);
  LODWORD(v19) = v28(v24, 1LL, v26);
  int v29 = v28(v25, 1LL, v26);
  if (!(_DWORD)v19)
  {
    if (!v29)
    {
      *(void *)uint64_t v24 = *(void *)v25;
      uint64_t v40 = *(void *)(v25 + 8);
      uint64_t v41 = *(void *)(v24 + 8);
      *(void *)(v24 + 8) = v40;
      swift_bridgeObjectRetain(v40);
      swift_bridgeObjectRelease(v41);
      *(void *)(v24 + 16) = *(void *)(v25 + 16);
      uint64_t v42 = *(void *)(v25 + 24);
      uint64_t v43 = *(void *)(v24 + 24);
      *(void *)(v24 + 24) = v42;
      swift_bridgeObjectRetain(v42);
      swift_bridgeObjectRelease(v43);
      uint64_t v44 = *(void *)(v25 + 32);
      *(_BYTE *)(v24 + 40) = *(_BYTE *)(v25 + 40);
      *(void *)(v24 + 32) = v44;
      uint64_t v45 = *(void *)(v25 + 48);
      *(_BYTE *)(v24 + 56) = *(_BYTE *)(v25 + 56);
      *(void *)(v24 + 48) = v45;
      v22(v24 + *(int *)(v26 + 32), v25 + *(int *)(v26 + 32), v20);
      return a1;
    }

    sub_1000CECE0(v24, type metadata accessor for Goldilocks_ErrorInfo.DatabaseFailure);
    goto LABEL_6;
  }

  if (v29)
  {
LABEL_6:
    uint64_t v38 = sub_1000BED3C(&qword_100293CA8);
    memcpy((void *)v24, (const void *)v25, *(void *)(*(void *)(v38 - 8) + 64LL));
    return a1;
  }

  *(void *)uint64_t v24 = *(void *)v25;
  uint64_t v30 = *(void *)(v25 + 8);
  *(void *)(v24 + 8) = v30;
  *(void *)(v24 + 16) = *(void *)(v25 + 16);
  uint64_t v31 = *(void *)(v25 + 24);
  *(void *)(v24 + 24) = v31;
  uint64_t v32 = *(void *)(v25 + 32);
  *(_BYTE *)(v24 + 40) = *(_BYTE *)(v25 + 40);
  *(void *)(v24 + 32) = v32;
  uint64_t v33 = *(void *)(v25 + 48);
  *(_BYTE *)(v24 + 56) = *(_BYTE *)(v25 + 56);
  *(void *)(v24 + 48) = v33;
  uint64_t v34 = *(int *)(v26 + 32);
  uint64_t v35 = v24 + v34;
  uint64_t v36 = v25 + v34;
  uint64_t v37 = *(void (**)(uint64_t, uint64_t, uint64_t))(v21 + 16);
  swift_bridgeObjectRetain(v30);
  swift_bridgeObjectRetain(v31);
  v37(v35, v36, v20);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v27 + 56))(v24, 0LL, 1LL, v26);
  return a1;
}

uint64_t initializeWithTake for Goldilocks_ErrorInfo.ResultError(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  __int128 v6 = *(_OWORD *)(a2 + 80);
  uint64_t v7 = *(int *)(a3 + 44);
  uint64_t v8 = (char *)(a1 + v7);
  uint64_t v9 = (char *)(a2 + v7);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v6;
  uint64_t v10 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 32LL);
  v11(v8, v9, v10);
  uint64_t v12 = *(int *)(a3 + 48);
  uint64_t v13 = (_OWORD *)(a1 + v12);
  uint64_t v14 = (_OWORD *)(a2 + v12);
  uint64_t v15 = type metadata accessor for Goldilocks_ErrorInfo.DatabaseFailure(0LL);
  uint64_t v16 = *(void *)(v15 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v16 + 48))(v14, 1LL, v15))
  {
    uint64_t v17 = sub_1000BED3C(&qword_100293CA8);
    memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64LL));
  }

  else
  {
    __int128 v18 = v14[1];
    *uint64_t v13 = *v14;
    v13[1] = v18;
    *((void *)v13 + 4) = *((void *)v14 + 4);
    *((_BYTE *)v13 + 40) = *((_BYTE *)v14 + 40);
    *((void *)v13 + 6) = *((void *)v14 + 6);
    *((_BYTE *)v13 + 56) = *((_BYTE *)v14 + 56);
    v11((char *)v13 + *(int *)(v15 + 32), (char *)v14 + *(int *)(v15 + 32), v10);
    (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0LL, 1LL, v15);
  }

  return a1;
}

uint64_t assignWithTake for Goldilocks_ErrorInfo.ResultError(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  uint64_t v7 = *(void *)(a1 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  swift_bridgeObjectRelease(v7);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v9 = *(void *)(a1 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v8;
  swift_bridgeObjectRelease(v9);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  uint64_t v10 = *(void *)(a1 + 56);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRelease(v10);
  uint64_t v11 = *(void *)(a2 + 72);
  uint64_t v12 = *(void *)(a1 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v11;
  swift_bridgeObjectRelease(v12);
  uint64_t v13 = *(void *)(a2 + 88);
  uint64_t v14 = *(void *)(a1 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v13;
  swift_bridgeObjectRelease(v14);
  uint64_t v15 = *(int *)(a3 + 44);
  uint64_t v16 = a1 + v15;
  uint64_t v17 = a2 + v15;
  uint64_t v18 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v20 = *(void (**)(uint64_t, uint64_t, uint64_t))(v19 + 40);
  v20(v16, v17, v18);
  uint64_t v21 = *(int *)(a3 + 48);
  uint64_t v22 = a1 + v21;
  uint64_t v23 = a2 + v21;
  uint64_t v24 = type metadata accessor for Goldilocks_ErrorInfo.DatabaseFailure(0LL);
  uint64_t v25 = *(void *)(v24 - 8);
  uint64_t v26 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v25 + 48);
  LODWORD(v17) = v26(v22, 1LL, v24);
  int v27 = v26(v23, 1LL, v24);
  if (!(_DWORD)v17)
  {
    if (!v27)
    {
      uint64_t v31 = *(void *)(v23 + 8);
      uint64_t v32 = *(void *)(v22 + 8);
      *(void *)uint64_t v22 = *(void *)v23;
      *(void *)(v22 + 8) = v31;
      swift_bridgeObjectRelease(v32);
      uint64_t v33 = *(void *)(v23 + 24);
      uint64_t v34 = *(void *)(v22 + 24);
      *(void *)(v22 + 16) = *(void *)(v23 + 16);
      *(void *)(v22 + 24) = v33;
      swift_bridgeObjectRelease(v34);
      *(void *)(v22 + 32) = *(void *)(v23 + 32);
      *(_BYTE *)(v22 + 40) = *(_BYTE *)(v23 + 40);
      *(void *)(v22 + 48) = *(void *)(v23 + 48);
      *(_BYTE *)(v22 + 56) = *(_BYTE *)(v23 + 56);
      v20(v22 + *(int *)(v24 + 32), v23 + *(int *)(v24 + 32), v18);
      return a1;
    }

    sub_1000CECE0(v22, type metadata accessor for Goldilocks_ErrorInfo.DatabaseFailure);
    goto LABEL_6;
  }

  if (v27)
  {
LABEL_6:
    uint64_t v29 = sub_1000BED3C(&qword_100293CA8);
    memcpy((void *)v22, (const void *)v23, *(void *)(*(void *)(v29 - 8) + 64LL));
    return a1;
  }

  __int128 v28 = *(_OWORD *)(v23 + 16);
  *(_OWORD *)uint64_t v22 = *(_OWORD *)v23;
  *(_OWORD *)(v22 + 16) = v28;
  *(void *)(v22 + 32) = *(void *)(v23 + 32);
  *(_BYTE *)(v22 + 40) = *(_BYTE *)(v23 + 40);
  *(void *)(v22 + 48) = *(void *)(v23 + 48);
  *(_BYTE *)(v22 + 56) = *(_BYTE *)(v23 + 56);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v19 + 32))( v22 + *(int *)(v24 + 32),  v23 + *(int *)(v24 + 32),  v18);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v25 + 56))(v22, 0LL, 1LL, v24);
  return a1;
}

uint64_t getEnumTagSinglePayload for Goldilocks_ErrorInfo.ResultError(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1001121E4);
}

uint64_t sub_1001121E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }

  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage(0LL);
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      uint64_t v10 = v8;
      uint64_t v11 = *(int *)(a3 + 44);
    }

    else
    {
      uint64_t v10 = sub_1000BED3C(&qword_100293CA8);
      uint64_t v9 = *(void *)(v10 - 8);
      uint64_t v11 = *(int *)(a3 + 48);
    }

    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }

uint64_t storeEnumTagSinglePayload for Goldilocks_ErrorInfo.ResultError( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100112294);
}

uint64_t sub_100112294(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }

  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage(0LL);
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      uint64_t v10 = v8;
      uint64_t v11 = *(int *)(a4 + 44);
    }

    else
    {
      uint64_t v10 = sub_1000BED3C(&qword_100293CA8);
      uint64_t v9 = *(void *)(v10 - 8);
      uint64_t v11 = *(int *)(a4 + 48);
    }

    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }

  return result;
}

void sub_100112334(uint64_t a1)
{
  v6[0] = &unk_100219570;
  v6[1] = &unk_100219588;
  void v6[2] = &unk_100219570;
  v6[3] = (char *)&value witness table for Builtin.Int32 + 64;
  v6[4] = (char *)&value witness table for Builtin.BridgeObject + 64;
  void v6[5] = &unk_100219570;
  v6[6] = &unk_100219570;
  uint64_t v2 = type metadata accessor for UnknownStorage(319LL);
  if (v3 <= 0x3F)
  {
    void v6[7] = *(void *)(v2 - 8) + 64LL;
    sub_1000D71B0( 319LL,  (unint64_t *)&unk_100294BD0,  type metadata accessor for Goldilocks_ErrorInfo.DatabaseFailure);
    if (v5 <= 0x3F)
    {
      v6[8] = *(void *)(v4 - 8) + 64LL;
      swift_initStructMetadata(a1, 256LL, 9LL, v6, a1 + 16);
    }
  }

void *_s22CloudKitImplementation25Goldilocks_FoundDuplicateVwCP_0(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = (void *)a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v19 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (void *)(v19 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v19);
  }

  else
  {
    uint64_t v7 = a2[1];
    *(void *)a1 = *a2;
    *(void *)(a1 + 8) = v7;
    *(void *)(a1 + 16) = a2[2];
    *(_BYTE *)(a1 + 24) = *((_BYTE *)a2 + 24);
    uint64_t v8 = *(int *)(a3 + 24);
    uint64_t v9 = a1 + v8;
    uint64_t v10 = (uint64_t)a2 + v8;
    uint64_t v11 = type metadata accessor for UnknownStorage(0LL);
    uint64_t v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 16LL);
    swift_bridgeObjectRetain(v7);
    v12(v9, v10, v11);
    uint64_t v13 = *(int *)(a3 + 28);
    uint64_t v14 = (void *)((char *)v4 + v13);
    uint64_t v15 = (uint64_t *)((char *)a2 + v13);
    uint64_t v16 = type metadata accessor for Goldilocks_ZoneID(0LL);
    uint64_t v17 = *(void *)(v16 - 8);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v17 + 48))(v15, 1LL, v16))
    {
      uint64_t v18 = sub_1000BED3C(&qword_100295030);
      memcpy(v14, v15, *(void *)(*(void *)(v18 - 8) + 64LL));
    }

    else
    {
      uint64_t v20 = v15[1];
      void *v14 = *v15;
      v14[1] = v20;
      uint64_t v21 = v15[3];
      v14[2] = v15[2];
      v14[3] = v21;
      uint64_t v22 = *(int *)(v16 + 24);
      uint64_t v23 = (char *)v14 + v22;
      uint64_t v24 = (char *)v15 + v22;
      swift_bridgeObjectRetain(v20);
      swift_bridgeObjectRetain(v21);
      v12((uint64_t)v23, (uint64_t)v24, v11);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v17 + 56))(v14, 0LL, 1LL, v16);
    }
  }

  return v4;
}

uint64_t _s22CloudKitImplementation25Goldilocks_FoundDuplicateVwcp_0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  uint64_t v7 = *(int *)(a3 + 24);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16LL);
  swift_bridgeObjectRetain(v6);
  v11(v8, v9, v10);
  uint64_t v12 = *(int *)(a3 + 28);
  uint64_t v13 = (void *)(a1 + v12);
  uint64_t v14 = (void *)(a2 + v12);
  uint64_t v15 = type metadata accessor for Goldilocks_ZoneID(0LL);
  uint64_t v16 = *(void *)(v15 - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v16 + 48))(v14, 1LL, v15))
  {
    uint64_t v17 = sub_1000BED3C(&qword_100295030);
    memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64LL));
  }

  else
  {
    uint64_t v18 = v14[1];
    *uint64_t v13 = *v14;
    v13[1] = v18;
    uint64_t v19 = v14[3];
    v13[2] = v14[2];
    v13[3] = v19;
    uint64_t v20 = *(int *)(v15 + 24);
    uint64_t v21 = (char *)v13 + v20;
    uint64_t v22 = (char *)v14 + v20;
    swift_bridgeObjectRetain(v18);
    swift_bridgeObjectRetain(v19);
    v11((uint64_t)v21, (uint64_t)v22, v10);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0LL, 1LL, v15);
  }

  return a1;
}

uint64_t _s22CloudKitImplementation25Goldilocks_FoundDuplicateVwca_0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v6 = *(void *)(a2 + 8);
  uint64_t v7 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = *(void *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(void *)(a1 + 16) = v8;
  uint64_t v9 = *(int *)(a3 + 24);
  uint64_t v10 = a1 + v9;
  uint64_t v11 = a2 + v9;
  uint64_t v12 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 24);
  v14(v10, v11, v12);
  uint64_t v15 = *(int *)(a3 + 28);
  uint64_t v16 = (void *)(a1 + v15);
  uint64_t v17 = (void *)(a2 + v15);
  uint64_t v18 = type metadata accessor for Goldilocks_ZoneID(0LL);
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v20 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v19 + 48);
  LODWORD(v11) = v20(v16, 1LL, v18);
  int v21 = v20(v17, 1LL, v18);
  if (!(_DWORD)v11)
  {
    if (!v21)
    {
      *uint64_t v16 = *v17;
      uint64_t v30 = v17[1];
      uint64_t v31 = v16[1];
      v16[1] = v30;
      swift_bridgeObjectRetain(v30);
      swift_bridgeObjectRelease(v31);
      v16[2] = v17[2];
      uint64_t v32 = v17[3];
      uint64_t v33 = v16[3];
      v16[3] = v32;
      swift_bridgeObjectRetain(v32);
      swift_bridgeObjectRelease(v33);
      v14((uint64_t)v16 + *(int *)(v18 + 24), (uint64_t)v17 + *(int *)(v18 + 24), v12);
      return a1;
    }

    sub_1000CECE0((uint64_t)v16, type metadata accessor for Goldilocks_ZoneID);
    goto LABEL_6;
  }

  if (v21)
  {
LABEL_6:
    uint64_t v28 = sub_1000BED3C(&qword_100295030);
    memcpy(v16, v17, *(void *)(*(void *)(v28 - 8) + 64LL));
    return a1;
  }

  *uint64_t v16 = *v17;
  uint64_t v22 = v17[1];
  v16[1] = v22;
  v16[2] = v17[2];
  uint64_t v23 = v17[3];
  v16[3] = v23;
  uint64_t v24 = *(int *)(v18 + 24);
  uint64_t v25 = (char *)v16 + v24;
  uint64_t v26 = (char *)v17 + v24;
  int v27 = *(void (**)(char *, char *, uint64_t))(v13 + 16);
  swift_bridgeObjectRetain(v22);
  swift_bridgeObjectRetain(v23);
  v27(v25, v26, v12);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v19 + 56))(v16, 0LL, 1LL, v18);
  return a1;
}

uint64_t _s22CloudKitImplementation25Goldilocks_FoundDuplicateVwtk_0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  uint64_t v6 = *(int *)(a3 + 24);
  uint64_t v7 = (char *)(a1 + v6);
  uint64_t v8 = (char *)(a2 + v6);
  uint64_t v9 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32LL);
  v10(v7, v8, v9);
  uint64_t v11 = *(int *)(a3 + 28);
  uint64_t v12 = (_OWORD *)(a1 + v11);
  uint64_t v13 = (_OWORD *)(a2 + v11);
  uint64_t v14 = type metadata accessor for Goldilocks_ZoneID(0LL);
  uint64_t v15 = *(void *)(v14 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v15 + 48))(v13, 1LL, v14))
  {
    uint64_t v16 = sub_1000BED3C(&qword_100295030);
    memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64LL));
  }

  else
  {
    __int128 v17 = v13[1];
    *uint64_t v12 = *v13;
    v12[1] = v17;
    v10((char *)v12 + *(int *)(v14 + 24), (char *)v13 + *(int *)(v14 + 24), v9);
    (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0LL, 1LL, v14);
  }

  return a1;
}

uint64_t _s22CloudKitImplementation25Goldilocks_FoundDuplicateVwta_0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  uint64_t v7 = *(void *)(a1 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  swift_bridgeObjectRelease(v7);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  uint64_t v8 = *(int *)(a3 + 24);
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 40);
  v13(v9, v10, v11);
  uint64_t v14 = *(int *)(a3 + 28);
  uint64_t v15 = (void *)(a1 + v14);
  uint64_t v16 = (void *)(a2 + v14);
  uint64_t v17 = type metadata accessor for Goldilocks_ZoneID(0LL);
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v19 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v18 + 48);
  LODWORD(v10) = v19(v15, 1LL, v17);
  int v20 = v19(v16, 1LL, v17);
  if (!(_DWORD)v10)
  {
    if (!v20)
    {
      uint64_t v24 = v16[1];
      uint64_t v25 = v15[1];
      *uint64_t v15 = *v16;
      v15[1] = v24;
      swift_bridgeObjectRelease(v25);
      uint64_t v26 = v16[3];
      uint64_t v27 = v15[3];
      v15[2] = v16[2];
      v15[3] = v26;
      swift_bridgeObjectRelease(v27);
      v13((uint64_t)v15 + *(int *)(v17 + 24), (uint64_t)v16 + *(int *)(v17 + 24), v11);
      return a1;
    }

    sub_1000CECE0((uint64_t)v15, type metadata accessor for Goldilocks_ZoneID);
    goto LABEL_6;
  }

  if (v20)
  {
LABEL_6:
    uint64_t v22 = sub_1000BED3C(&qword_100295030);
    memcpy(v15, v16, *(void *)(*(void *)(v22 - 8) + 64LL));
    return a1;
  }

  __int128 v21 = *((_OWORD *)v16 + 1);
  *(_OWORD *)uint64_t v15 = *(_OWORD *)v16;
  *((_OWORD *)v15 + 1) = v21;
  (*(void (**)(char *, char *, uint64_t))(v12 + 32))( (char *)v15 + *(int *)(v17 + 24),  (char *)v16 + *(int *)(v17 + 24),  v11);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v18 + 56))(v15, 0LL, 1LL, v17);
  return a1;
}

uint64_t getEnumTagSinglePayload for Goldilocks_ExitStatusFeedbackRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100112B40);
}

uint64_t sub_100112B40(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100112B4C(a1, a2, a3, &qword_100295030);
}

uint64_t sub_100112B4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    unint64_t v5 = *(void *)(a1 + 8);
    if (v5 >= 0xFFFFFFFF) {
      LODWORD(v5) = -1;
    }
    return (v5 + 1);
  }

  else
  {
    uint64_t v10 = type metadata accessor for UnknownStorage(0LL);
    uint64_t v11 = *(void *)(v10 - 8);
    if (*(_DWORD *)(v11 + 84) == (_DWORD)a2)
    {
      uint64_t v12 = v10;
      uint64_t v13 = *(int *)(a3 + 24);
    }

    else
    {
      uint64_t v12 = sub_1000BED3C(a4);
      uint64_t v11 = *(void *)(v12 - 8);
      uint64_t v13 = *(int *)(a3 + 28);
    }

    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(a1 + v13, a2, v12);
  }

uint64_t storeEnumTagSinglePayload for Goldilocks_ExitStatusFeedbackRequest( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100112BFC);
}

uint64_t sub_100112BFC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return sub_100112C08(a1, a2, a3, a4, &qword_100295030);
}

uint64_t sub_100112C08(uint64_t result, uint64_t a2, int a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v6 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }

  else
  {
    uint64_t v10 = type metadata accessor for UnknownStorage(0LL);
    uint64_t v11 = *(void *)(v10 - 8);
    if (*(_DWORD *)(v11 + 84) == a3)
    {
      uint64_t v12 = v10;
      uint64_t v13 = *(int *)(a4 + 24);
    }

    else
    {
      uint64_t v12 = sub_1000BED3C(a5);
      uint64_t v11 = *(void *)(v12 - 8);
      uint64_t v13 = *(int *)(a4 + 28);
    }

    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 56))(v6 + v13, a2, a2, v12);
  }

  return result;
}

void sub_100112CB4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t *a5, uint64_t (*a6)(uint64_t))
{
  v13[0] = &unk_100219570;
  v13[1] = a4;
  uint64_t v9 = type metadata accessor for UnknownStorage(319LL);
  if (v10 <= 0x3F)
  {
    v13[2] = *(void *)(v9 - 8) + 64LL;
    sub_1000D71B0(319LL, a5, a6);
    if (v12 <= 0x3F)
    {
      v13[3] = *(void *)(v11 - 8) + 64LL;
      swift_initStructMetadata(a1, 256LL, 4LL, v13, a1 + 16);
    }
  }

ValueMetadata *type metadata accessor for Goldilocks_ExitStatusFeedbackRequest.ClientStatus()
{
  return &type metadata for Goldilocks_ExitStatusFeedbackRequest.ClientStatus;
}

uint64_t getEnumTagSinglePayload for Goldilocks_ExitStatusFeedbackResponse( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100112D78);
}

uint64_t storeEnumTagSinglePayload for Goldilocks_ExitStatusFeedbackResponse( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100112D88);
}

uint64_t sub_100112DAC(uint64_t a1, __n128 a2)
{
  if (a1 < 1)
  {
    id v2 = [(id)objc_opt_self(NSUserDefaults) standardUserDefaults];
    NSString v3 = String._bridgeToObjectiveC()();
    [v2 doubleForKey:v3];
    double v5 = v4;

    a2.n128_u64[0] = 0x40AC200000000000LL;
    if (v5 >= 1.0) {
      a2.n128_f64[0] = v5;
    }
  }

  else
  {
    a2.n128_f64[0] = (double)a1 / 1000.0;
  }

  return Date.init(timeIntervalSinceNow:)(a2);
}

id sub_100112E78(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v9 = v8;
  uint64_t v10 = sub_1000BED3C(&qword_100291F40);
  if ((a3 & 0x2000000000000000LL) != 0) {
    uint64_t v11 = HIBYTE(a3) & 0xF;
  }
  else {
    uint64_t v11 = a2 & 0xFFFFFFFFFFFFLL;
  }
  if (a4 < 1)
  {
    uint64_t inited = swift_initStackObject(v10, v25);
    *(_OWORD *)(inited + 16) = xmmword_100212550;
    *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(NSLocalizedDescriptionKey);
    *(void *)(inited + 40) = v15;
    if (v11)
    {
      swift_bridgeObjectRetain(a3);
    }

    else
    {
      a2 = 0x65206E776F6E6B55LL;
      a3 = 0xEC000000726F7272LL;
    }

    *(void *)(inited + 72) = &type metadata for String;
    *(void *)(inited + 48) = a2;
    *(void *)(inited + 56) = a3;
    unint64_t v18 = sub_100113E94(inited);
    id v19 = objc_allocWithZone(&OBJC_CLASS___NSError);
    NSString v20 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v9);
  }

  else
  {
    uint64_t v12 = swift_initStackObject(v10, &v24);
    *(_OWORD *)(v12 + 16) = xmmword_100212570;
    *(void *)(v12 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(NSLocalizedDescriptionKey);
    *(void *)(v12 + 40) = v13;
    if (v11)
    {
      swift_bridgeObjectRetain(a3);
    }

    else
    {
      a2 = 0x65206E776F6E6B55LL;
      a3 = 0xEC000000726F7272LL;
    }

    *(void *)(v12 + 72) = &type metadata for String;
    *(void *)(v12 + 48) = a2;
    *(void *)(v12 + 56) = a3;
    *(void *)(v12 + 80) = static String._unconditionallyBridgeFromObjectiveC(_:)(CPLErrorRetryAfterDateKey);
    *(void *)(v12 + 88) = v16;
    *(void *)(v12 + 120) = type metadata accessor for Date(0LL);
    sub_1000CE1FC((void *)(v12 + 96));
    sub_100112DAC(a4, v17);
    unint64_t v18 = sub_100113E94(v12);
    id v19 = objc_allocWithZone(&OBJC_CLASS___NSError);
    NSString v20 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v9);
  }

  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v18);
  id v22 = [v19 initWithDomain:v20 code:a1 userInfo:isa];

  return v22;
}

id sub_1001130EC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if ((*(_BYTE *)(a1 + 24) & 1) != 0)
  {
    unint64_t v5 = *(void *)a1;
    unint64_t v4 = *(void *)(a1 + 8);
    uint64_t v6 = HIBYTE(v4) & 0xF;
    if ((v4 & 0x2000000000000000LL) == 0) {
      uint64_t v6 = *(void *)a1 & 0xFFFFFFFFFFFFLL;
    }
    if (v6)
    {
      swift_bridgeObjectRetain(*(void *)(a1 + 8));
    }

    else
    {
      unint64_t v5 = 0xD000000000000015LL;
      unint64_t v4 = 0x80000001001D3850LL;
    }

    uint64_t v10 = qword_100219A10[v3];
    uint64_t v11 = v5;
  }

  else
  {
    uint64_t v7 = *(void *)a1;
    unint64_t v8 = *(void *)(a1 + 8);
    uint64_t v9 = HIBYTE(v8) & 0xF;
    if ((v8 & 0x2000000000000000LL) == 0) {
      uint64_t v9 = *(void *)a1 & 0xFFFFFFFFFFFFLL;
    }
    if (v9)
    {
      swift_bridgeObjectRetain(*(void *)(a1 + 8));
    }

    else
    {
      uint64_t v7 = 0xD000000000000012LL;
      unint64_t v8 = 0x80000001001D3870LL;
    }

    v12._countAndFlagsBits = v7;
    v12._object = (void *)v8;
    String.append(_:)(v12);
    swift_bridgeObjectRelease(v8);
    v13._countAndFlagsBits = 0x203A65646F632820LL;
    v13._object = (void *)0xE800000000000000LL;
    String.append(_:)(v13);
    v14._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
    object = v14._object;
    String.append(_:)(v14);
    swift_bridgeObjectRelease(object);
    v16._countAndFlagsBits = 41LL;
    v16._object = (void *)0xE100000000000000LL;
    String.append(_:)(v16);
    uint64_t v11 = 0LL;
    unint64_t v4 = 0xE000000000000000LL;
    uint64_t v10 = 150LL;
  }

  id v17 = sub_100112E78(v10, v11, v4, a2);
  swift_bridgeObjectRelease(v4);
  return v17;
}

uint64_t sub_100113260(uint64_t a1, void *a2, void (*a3)(uint64_t, id), uint64_t a4)
{
  uint64_t v34 = a4;
  uint64_t v35 = a3;
  uint64_t v33 = a2;
  uint64_t v5 = type metadata accessor for Utility_ErrorInfo.ResultError(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  unint64_t v8 = (char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = sub_1000BED3C(&qword_100292070);
  uint64_t v10 = __chkstk_darwin(v9);
  uint64_t v32 = (uint64_t)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v10);
  Swift::String v13 = (char *)&v32 - v12;
  uint64_t v14 = sub_1000BED3C((uint64_t *)&unk_100294E60);
  __chkstk_darwin(v14);
  Swift::String v16 = (char *)&v32 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = type metadata accessor for Utility_DeleteZoneResponse(0LL);
  uint64_t v18 = *(void *)(v17 - 8);
  __chkstk_darwin(v17);
  NSString v20 = (char *)&v32 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_1000CE7B4(a1, (uint64_t)v16, (uint64_t *)&unk_100294E60);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1LL, v17) == 1)
  {
    sub_1000CEDAC((uint64_t)v16, (uint64_t *)&unk_100294E60);
    __int128 v21 = v33;
    if (v33) {
      id v22 = v33;
    }
    else {
      id v22 = sub_100112E78(150LL, 0xD00000000000001ALL, 0x80000001001D3830LL, 0LL);
    }
    swift_errorRetain(v21);
    v35(0LL, v22);
    return swift_errorRelease(v22);
  }

  else
  {
    sub_1000CEC9C((uint64_t)v16, (uint64_t)v20, type metadata accessor for Utility_DeleteZoneResponse);
    uint64_t v23 = (uint64_t)&v20[*(int *)(v17 + 24)];
    sub_1000CE7B4(v23, (uint64_t)v13, &qword_100292070);
    uint64_t v24 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 48);
    int v25 = v24(v13, 1LL, v5);
    sub_1000CEDAC((uint64_t)v13, &qword_100292070);
    if (v25 == 1)
    {
      v35(1LL, 0LL);
    }

    else
    {
      uint64_t v26 = v32;
      sub_1000CE7B4(v23, v32, &qword_100292070);
      uint64_t v27 = v24((char *)v26, 1LL, v5);
      if ((_DWORD)v27 == 1)
      {
        *(void *)unint64_t v8 = 0LL;
        *((void *)v8 + 1) = 0xE000000000000000LL;
        *((void *)v8 + 2) = 0LL;
        v8[24] = 1;
        UnknownStorage.init()(v27);
        uint64_t v28 = &v8[*(int *)(v5 + 28)];
        uint64_t v29 = type metadata accessor for Utility_ErrorInfo.DatabaseFailure(0LL);
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v29 - 8) + 56LL))(v28, 1LL, 1LL, v29);
        sub_1000CEDAC(v26, &qword_100292070);
      }

      else
      {
        sub_1000CEC9C(v26, (uint64_t)v8, type metadata accessor for Utility_ErrorInfo.ResultError);
      }

      id v31 = sub_1001130EC((uint64_t)v8, 0LL);
      sub_1000CECE0((uint64_t)v8, type metadata accessor for Utility_ErrorInfo.ResultError);
      v35(0LL, v31);
      swift_errorRelease(v31);
    }

    return sub_1000CECE0((uint64_t)v20, type metadata accessor for Utility_DeleteZoneResponse);
  }

uint64_t sub_100113638(uint64_t a1, void *a2, void (*a3)(uint64_t, id))
{
  uint64_t v6 = sub_1000BED3C(&qword_100294E48);
  __chkstk_darwin(v6);
  unint64_t v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for Utility_DeleteAllZonesResponse(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_1000CE7B4(a1, (uint64_t)v8, &qword_100294E48);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1LL, v9) == 1)
  {
    sub_1000CEDAC((uint64_t)v8, &qword_100294E48);
    if (a2) {
      id v13 = a2;
    }
    else {
      id v13 = sub_100112E78(150LL, 0xD000000000000018LL, 0x80000001001D37E0LL, 0LL);
    }
    swift_errorRetain(a2);
    a3(0LL, v13);
    return swift_errorRelease(v13);
  }

  else
  {
    sub_1000CEC9C((uint64_t)v8, (uint64_t)v12, type metadata accessor for Utility_DeleteAllZonesResponse);
    if (*((void *)v12 + 1))
    {
      if (a2) {
        id v14 = a2;
      }
      else {
        id v14 = sub_100112E78(150LL, 0xD000000000000018LL, 0x80000001001D37E0LL, 0LL);
      }
      swift_errorRetain(a2);
      a3(0LL, v14);
      swift_errorRelease(v14);
    }

    else
    {
      a3(1LL, 0LL);
    }

    return sub_1000CECE0((uint64_t)v12, type metadata accessor for Utility_DeleteAllZonesResponse);
  }

id CPLCKPhotosSharedLibraryOperation.__allocating_init()()
{
  return [objc_allocWithZone(v0) init];
}

id CPLCKUtilitiesOperation.init()()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CPLCKUtilitiesOperation();
  return objc_msgSendSuper2(&v2, "init");
}

id CPLCKUtilitiesOperation.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CPLCKUtilitiesOperation();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t _s22CloudKitImplementation23CPLCKUtilitiesOperationC10deleteZone8withName17completionHandlerSo010CKDatabaseE0CSS_ySb_s5Error_pSgtctFZ_0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v30 = a3;
  uint64_t v31 = a4;
  uint64_t v6 = sub_1000BED3C(&qword_100294E50);
  uint64_t v28 = *(void *)(v6 - 8);
  uint64_t v29 = v6;
  __chkstk_darwin(v6);
  unint64_t v8 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = sub_1000BED3C(&qword_1002926F0);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for Utility_DeleteZoneRequest(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v28 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = __chkstk_darwin(v14);
  uint64_t v19 = (uint64_t *)((char *)&v28 - v18);
  __chkstk_darwin(v17);
  __int128 v21 = (char *)&v28 - v20;
  *uint64_t v19 = 0LL;
  v19[1] = 0xE000000000000000LL;
  uint64_t v22 = swift_bridgeObjectRetain(a2);
  UnknownStorage.init()(v22);
  uint64_t v33 = a1;
  uint64_t v34 = a2;
  sub_1000D7788();
  static Message.with(_:)(sub_100113E38, v32);
  sub_1000CECE0((uint64_t)v19, type metadata accessor for Utility_DeleteZoneRequest);
  swift_bridgeObjectRelease(a2);
  sub_1000CEC9C((uint64_t)v16, (uint64_t)v19, type metadata accessor for Utility_DeleteZoneRequest);
  sub_1000CEC9C((uint64_t)v19, (uint64_t)v21, type metadata accessor for Utility_DeleteZoneRequest);
  sub_1000CEC58((uint64_t)v21, (uint64_t)v11, type metadata accessor for Utility_DeleteZoneRequest);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v11, 0LL, 1LL, v12);
  (*(void (**)(char *, void, uint64_t))(v28 + 104))( v8,  enum case for CodeOperation.DestinationServer.default<A, B>(_:),  v29);
  id v23 = objc_allocWithZone((Class)sub_1000BED3C(&qword_100294E58));
  uint64_t v24 = CodeOperation.init(service:functionName:request:destinationServer:)( 0x7455736F746F6850LL,  0xED00007974696C69LL,  0x6F5A6574656C6564LL,  0xEA0000000000656ELL,  v11,  v8);
  uint64_t v25 = swift_allocObject(&unk_100245508, 32LL, 7LL);
  *(void *)(v25 + 16) = v30;
  uint64_t v26 = v31;
  *(void *)(v25 + 24) = v31;
  swift_retain(v26);
  dispatch thunk of CodeOperation.codeOperationCompletionBlock.setter(sub_100113E80, v25);
  sub_1000CECE0((uint64_t)v21, type metadata accessor for Utility_DeleteZoneRequest);
  return v24;
}

uint64_t _s22CloudKitImplementation23CPLCKUtilitiesOperationC14deleteAllZones17completionHandlerSo010CKDatabaseE0CySb_s5Error_pSgtc_tFZ_0( uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000BED3C(&qword_100294E38);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = sub_1000BED3C(&qword_100292700);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for Utility_DeleteAllZonesRequest(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v20 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  UnknownStorage.init()(v13);
  sub_1000CEC58((uint64_t)v15, (uint64_t)v10, type metadata accessor for Utility_DeleteAllZonesRequest);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v10, 0LL, 1LL, v11);
  (*(void (**)(char *, void, uint64_t))(v5 + 104))( v7,  enum case for CodeOperation.DestinationServer.default<A, B>(_:),  v4);
  id v16 = objc_allocWithZone((Class)sub_1000BED3C(&qword_100294E40));
  uint64_t v17 = CodeOperation.init(service:functionName:request:destinationServer:)( 0x7455736F746F6850LL,  0xED00007974696C69LL,  0x6C416574656C6564LL,  0xEE0073656E6F5A6CLL,  v10,  v7);
  uint64_t v18 = swift_allocObject(&unk_1002454E0, 32LL, 7LL);
  *(void *)(v18 + 16) = a1;
  *(void *)(v18 + 24) = a2;
  swift_retain(a2);
  dispatch thunk of CodeOperation.codeOperationCompletionBlock.setter(sub_100113E30, v18);
  sub_1000CECE0((uint64_t)v15, type metadata accessor for Utility_DeleteAllZonesRequest);
  return v17;
}

uint64_t type metadata accessor for CPLCKUtilitiesOperation()
{
  return objc_opt_self(&OBJC_CLASS___CPLCKUtilitiesOperation);
}

uint64_t sub_100113DE0()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

void sub_100113E04(char a1, uint64_t a2)
{
}

uint64_t sub_100113E0C()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_100113E30(uint64_t a1, void *a2)
{
  return sub_100113638(a1, a2, *(void (**)(uint64_t, id))(v2 + 16));
}

uint64_t sub_100113E38(void *a1)
{
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v3 = *(void *)(v1 + 24);
  uint64_t v5 = a1[1];
  swift_bridgeObjectRetain(v3);
  uint64_t result = swift_bridgeObjectRelease(v5);
  *a1 = v4;
  a1[1] = v3;
  return result;
}

uint64_t sub_100113E80(uint64_t a1, void *a2)
{
  return sub_100113260(a1, a2, *(void (**)(uint64_t, id))(v2 + 16), *(void *)(v2 + 24));
}

unint64_t sub_100113E94(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2)
  {
    uint64_t v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }

  sub_1000BED3C(&qword_100295018);
  uint64_t v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  uint64_t v4 = (void *)v3;
  uint64_t v5 = *(void *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }

  uint64_t v6 = v3 + 64;
  uint64_t v7 = a1 + 32;
  swift_retain(v3);
  while (1)
  {
    sub_1000CE7B4(v7, (uint64_t)&v16, (uint64_t *)&unk_100295020);
    uint64_t v8 = v16;
    uint64_t v9 = v17;
    unint64_t result = sub_100119098(v16, v17);
    if ((v11 & 1) != 0) {
      break;
    }
    *(void *)(v6 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << result;
    uint64_t v12 = (uint64_t *)(v4[6] + 16 * result);
    *uint64_t v12 = v8;
    v12[1] = v9;
    unint64_t result = (unint64_t)sub_10011C5EC(&v18, (_OWORD *)(v4[7] + 32 * result));
    uint64_t v13 = v4[2];
    BOOL v14 = __OFADD__(v13, 1LL);
    uint64_t v15 = v13 + 1;
    if (v14) {
      goto LABEL_11;
    }
    void v4[2] = v15;
    v7 += 48LL;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }

  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

void sub_100113FC8(char a1, uint64_t a2, uint64_t a3)
{
  if (a2) {
    uint64_t v5 = _convertErrorToNSError(_:)(a2);
  }
  else {
    uint64_t v5 = 0LL;
  }
  id v6 = (id)v5;
  (*(void (**)(uint64_t, void))(a3 + 16))(a3, a1 & 1);
}

unint64_t sub_100114020(uint64_t a1, char a2)
{
  if ((a2 & 1) != 0) {
    __asm { BR              X9 }
  }

  _StringGuts.grow(_:)(33LL);
  swift_bridgeObjectRelease(0xE000000000000000LL);
  v2._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
  object = v2._object;
  String.append(_:)(v2);
  swift_bridgeObjectRelease(object);
  return 0xD00000000000001FLL;
}

uint64_t sub_1001141CC@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, int a6@<W5>, uint64_t a7@<X6>, int a8@<W7>, uint64_t a9@<X8>, uint64_t a10, unsigned __int8 a11, uint64_t a12, uint64_t a13, uint64_t a14, __int16 a15)
{
  int v40 = a8;
  uint64_t v39 = a7;
  int v37 = a6;
  uint64_t v35 = a5;
  uint64_t v31 = a3;
  uint64_t v38 = a14;
  int v36 = a11;
  uint64_t v34 = a10;
  uint64_t v33 = a13;
  uint64_t v32 = a12;
  uint64_t v19 = type metadata accessor for Goldilocks_InitiateExitRequest(0LL);
  __chkstk_darwin(v19);
  __int128 v21 = (char *)&v30 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v22 = type metadata accessor for Goldilocks_ZoneID(0LL);
  uint64_t v23 = *(void *)(v22 - 8);
  uint64_t v24 = __chkstk_darwin(v22);
  uint64_t v26 = (char *)&v30 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  *(void *)a9 = 0LL;
  *(void *)(a9 + 8) = 0xE000000000000000LL;
  *(void *)(a9 + 16) = 0LL;
  *(_BYTE *)(a9 + 24) = 1;
  *(void *)(a9 + 32) = 0LL;
  *(_BYTE *)(a9 + 40) = 1;
  *(void *)(a9 + 48) = &_swiftEmptyArrayStorage;
  *(void *)(a9 + 56) = &_swiftEmptyArrayStorage;
  *(void *)(a9 + 64) = 0LL;
  *(void *)(a9 + 72) = 0LL;
  *(_BYTE *)(a9 + 80) = 1;
  *(void *)(a9 + 88) = 0LL;
  *(_BYTE *)(a9 + 96) = 1;
  UnknownStorage.init()(v24);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v23 + 56))(a9 + *(int *)(v19 + 52), 1LL, 1LL, v22);
  uint64_t v54 = a1;
  uint64_t v55 = a2;
  uint64_t v56 = v31;
  uint64_t v57 = a4;
  sub_1000BD35C( &qword_100293CD0,  type metadata accessor for Goldilocks_ZoneID,  (uint64_t)&protocol conformance descriptor for Goldilocks_ZoneID);
  static Message.with(_:)(sub_10011C6D8, v53);
  swift_bridgeObjectRelease(a4);
  swift_bridgeObjectRelease(a2);
  uint64_t v42 = v26;
  uint64_t v43 = v35;
  char v44 = v37 & 1;
  uint64_t v27 = v32;
  uint64_t v28 = v33;
  uint64_t v45 = v32;
  uint64_t v46 = v33;
  uint64_t v47 = v39;
  char v48 = v40 & 1;
  uint64_t v49 = v34;
  char v50 = v36 & 1;
  uint64_t v51 = v38;
  __int16 v52 = a15 & 0x1FF;
  sub_1000BD35C( &qword_100293A90,  type metadata accessor for Goldilocks_InitiateExitRequest,  (uint64_t)&protocol conformance descriptor for Goldilocks_InitiateExitRequest);
  static Message.with(_:)(sub_10011C6F4, v41);
  sub_1000CECE0(a9, type metadata accessor for Goldilocks_InitiateExitRequest);
  swift_bridgeObjectRelease(v28);
  swift_bridgeObjectRelease(v27);
  sub_1000CECE0((uint64_t)v26, type metadata accessor for Goldilocks_ZoneID);
  return sub_1000CEC9C((uint64_t)v21, a9, type metadata accessor for Goldilocks_InitiateExitRequest);
}

uint64_t sub_1001144AC( uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8, uint64_t a9, unsigned __int8 a10, uint64_t a11, unsigned __int16 a12)
{
  int v39 = a8;
  uint64_t v38 = a7;
  int v34 = a4;
  uint64_t v33 = a3;
  int v41 = a12;
  int v36 = a10;
  uint64_t v35 = a9;
  uint64_t v40 = type metadata accessor for UUID(0LL);
  uint64_t v37 = *(void *)(v40 - 8);
  __chkstk_darwin(v40);
  uint64_t v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = type metadata accessor for Goldilocks_ZoneID(0LL);
  uint64_t v19 = *(void *)(v18 - 8);
  __chkstk_darwin(v18);
  __int128 v21 = (char *)&v32 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_1000CEC58(a2, (uint64_t)v21, type metadata accessor for Goldilocks_ZoneID);
  uint64_t v22 = a1 + *(int *)(type metadata accessor for Goldilocks_InitiateExitRequest(0LL) + 52);
  sub_1000CEDAC(v22, &qword_100295030);
  sub_1000CEC9C((uint64_t)v21, v22, type metadata accessor for Goldilocks_ZoneID);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v19 + 56))(v22, 0LL, 1LL, v18);
  *(void *)(a1 + 32) = v33;
  *(_BYTE *)(a1 + 40) = v34 & 1;
  uint64_t v23 = *(void *)(a1 + 48);
  swift_bridgeObjectRetain(a5);
  swift_bridgeObjectRelease(v23);
  *(void *)(a1 + 48) = a5;
  uint64_t v24 = *(void *)(a1 + 56);
  swift_bridgeObjectRetain(a6);
  uint64_t v25 = swift_bridgeObjectRelease(v24);
  *(void *)(a1 + 56) = a6;
  *(void *)(a1 + 16) = v38;
  *(_BYTE *)(a1 + 24) = v39 & 1;
  *(void *)(a1 + 72) = v35;
  *(_BYTE *)(a1 + 80) = v36 & 1;
  uint64_t v26 = UUID.init()(v25);
  uint64_t v27 = UUID.uuidString.getter(v26);
  uint64_t v29 = v28;
  (*(void (**)(char *, uint64_t))(v37 + 8))(v17, v40);
  uint64_t result = swift_bridgeObjectRelease(*(void *)(a1 + 8));
  __int16 v31 = v41;
  *(void *)a1 = v27;
  *(void *)(a1 + 8) = v29;
  if ((v31 & 0x100) == 0)
  {
    *(void *)(a1 + 88) = a11;
    *(_BYTE *)(a1 + 96) = v31 & 1;
  }

  return result;
}

uint64_t sub_1001146BC(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = a1[1];
  swift_bridgeObjectRetain(a3);
  swift_bridgeObjectRelease(v10);
  *a1 = a2;
  a1[1] = a3;
  uint64_t v11 = a1[3];
  swift_bridgeObjectRetain(a5);
  uint64_t result = swift_bridgeObjectRelease(v11);
  a1[2] = a4;
  a1[3] = a5;
  return result;
}

uint64_t sub_100114730(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v24 = a4;
  int v25 = a3;
  uint64_t v23 = type metadata accessor for UUID(0LL);
  uint64_t v8 = *(void *)(v23 - 8);
  __chkstk_darwin(v23);
  uint64_t v10 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for Goldilocks_ZoneID(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  BOOL v14 = (char *)&v22 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_1000CEC58(a2, (uint64_t)v14, type metadata accessor for Goldilocks_ZoneID);
  uint64_t v15 = a1 + *(int *)(type metadata accessor for Goldilocks_ExitMoveBatchRequest(0LL) + 28);
  sub_1000CEDAC(v15, &qword_100295030);
  sub_1000CEC9C((uint64_t)v14, v15, type metadata accessor for Goldilocks_ZoneID);
  uint64_t v16 = (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v12 + 56))(v15, 0LL, 1LL, v11);
  *(_DWORD *)(a1 + 16) = v25;
  if (a5)
  {
    uint64_t v17 = *(void *)(a1 + 8);
    swift_bridgeObjectRetain(a5);
    uint64_t result = swift_bridgeObjectRelease(v17);
    *(void *)a1 = v24;
  }

  else
  {
    uint64_t v19 = UUID.init()(v16);
    uint64_t v20 = UUID.uuidString.getter(v19);
    a5 = v21;
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v23);
    uint64_t result = swift_bridgeObjectRelease(*(void *)(a1 + 8));
    *(void *)a1 = v20;
  }

  *(void *)(a1 + 8) = a5;
  return result;
}

uint64_t sub_1001148C0(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin();
  uint64_t v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (a3)
  {
    uint64_t v11 = a1[1];
    swift_bridgeObjectRetain(a3);
    uint64_t result = swift_bridgeObjectRelease(v11);
    *a1 = a2;
    a1[1] = a3;
  }

  else
  {
    uint64_t v13 = UUID.init()(v8);
    uint64_t v14 = UUID.uuidString.getter(v13);
    uint64_t v16 = v15;
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    uint64_t result = swift_bridgeObjectRelease(a1[1]);
    *a1 = v14;
    a1[1] = v16;
  }

  return result;
}

uint64_t sub_100114994(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12 = *(void *)(a1 + 8);
  swift_bridgeObjectRetain(a3);
  swift_bridgeObjectRelease(v12);
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = a3;
  *(_DWORD *)(a1 + 48) = Int32.init(truncating:)(a4);
  uint64_t v13 = *(void *)(a1 + 40);
  swift_bridgeObjectRetain(a6);
  uint64_t result = swift_bridgeObjectRelease(v13);
  *(void *)(a1 + 32) = a5;
  *(void *)(a1 + 40) = a6;
  return result;
}

uint64_t sub_100114A20(uint64_t *a1, void *a2)
{
  uint64_t v4 = type metadata accessor for Goldilocks_ErrorInfo.ResultError(0LL);
  uint64_t v39 = *(void *)(v4 - 8);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v32 = &v33[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  __chkstk_darwin(v5);
  uint64_t v8 = &v33[-v7];
  id v9 = [a2 originRecordID];
  uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
  uint64_t v12 = v11;

  swift_bridgeObjectRelease(a1[1]);
  *a1 = v10;
  a1[1] = v12;
  id v13 = [a2 destinationRecordID];
  uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
  uint64_t v16 = v15;

  swift_bridgeObjectRelease(a1[3]);
  a1[2] = v14;
  a1[3] = v16;
  id v17 = [a2 errorMessage];
  uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
  uint64_t v20 = v19;

  id v21 = [a2 errorCode];
  id v22 = [a2 errorDomain];
  uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)(v22);
  uint64_t v25 = v24;

  *(void *)uint64_t v8 = 0LL;
  *((void *)v8 + 1) = 0xE000000000000000LL;
  *((void *)v8 + 2) = 0LL;
  v8[24] = 1;
  *((void *)v8 + 4) = 0LL;
  *((void *)v8 + 5) = 0xE000000000000000LL;
  *((_DWORD *)v8 + 12) = 0;
  *((void *)v8 + 7) = &_swiftEmptyArrayStorage;
  *((void *)v8 + 8) = 0LL;
  *((void *)v8 + 9) = 0xE000000000000000LL;
  *((void *)v8 + 10) = 0LL;
  *((void *)v8 + 11) = 0xE000000000000000LL;
  UnknownStorage.init()(v26);
  uint64_t v27 = &v8[*(int *)(v4 + 48)];
  uint64_t v28 = type metadata accessor for Goldilocks_ErrorInfo.DatabaseFailure(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v28 - 8) + 56LL))(v27, 1LL, 1LL, v28);
  uint64_t v34 = v18;
  uint64_t v35 = v20;
  id v36 = v21;
  uint64_t v37 = v23;
  uint64_t v38 = v25;
  sub_1000BD35C( &qword_100295070,  type metadata accessor for Goldilocks_ErrorInfo.ResultError,  (uint64_t)&protocol conformance descriptor for Goldilocks_ErrorInfo.ResultError);
  uint64_t v29 = (uint64_t)v32;
  static Message.with(_:)(sub_10011C6B4, v33);
  sub_1000CECE0((uint64_t)v8, type metadata accessor for Goldilocks_ErrorInfo.ResultError);
  swift_bridgeObjectRelease(v25);
  swift_bridgeObjectRelease(v20);

  sub_1000CEC9C(v29, (uint64_t)v8, type metadata accessor for Goldilocks_ErrorInfo.ResultError);
  uint64_t v30 = (uint64_t)a1 + *(int *)(type metadata accessor for Goldilocks_ExitMoveBatchFeedbackItem(0LL) + 28);
  sub_1000CEDAC(v30, &qword_100293C98);
  sub_1000CEC9C((uint64_t)v8, v30, type metadata accessor for Goldilocks_ErrorInfo.ResultError);
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v39 + 56))(v30, 0LL, 1LL, v4);
}

size_t sub_100114CE4(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char **a6)
{
  uint64_t v68 = a5;
  uint64_t v69 = a6;
  uint64_t v70 = type metadata accessor for Goldilocks_ExitMoveBatchFeedbackItem(0LL);
  uint64_t v72 = *(void *)(v70 - 8);
  uint64_t v10 = __chkstk_darwin(v70);
  uint64_t v64 = (char *)&v64 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v71 = (char *)&v64 - v13;
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v16 = (char **)((char *)&v64 - v15);
  __chkstk_darwin(v14);
  uint64_t v65 = (char *)&v64 - v17;
  uint64_t v18 = type metadata accessor for Goldilocks_ZoneID(0LL);
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v20 = __chkstk_darwin(v18);
  id v22 = (char *)&v64 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v20);
  uint64_t v24 = (char *)&v64 - v23;
  uint64_t v25 = a1[2];
  swift_bridgeObjectRetain(a3);
  swift_bridgeObjectRelease(v25);
  a1[1] = a2;
  a1[2] = a3;
  uint64_t v27 = *(void *)(a4 + 24);
  uint64_t v26 = *(void *)(a4 + 32);
  uint64_t v28 = a1[4];
  swift_bridgeObjectRetain(v26);
  swift_bridgeObjectRelease(v28);
  a1[3] = v27;
  a1[4] = v26;
  uint64_t v75 = v68;
  sub_1000BD35C( &qword_100293CD0,  type metadata accessor for Goldilocks_ZoneID,  (uint64_t)&protocol conformance descriptor for Goldilocks_ZoneID);
  uint64_t v29 = v73;
  static Message.with(_:)(sub_10011C79C, v74);
  uint64_t v30 = v29;
  uint64_t v66 = v24;
  sub_1000CEC58((uint64_t)v24, (uint64_t)v22, type metadata accessor for Goldilocks_ZoneID);
  uint64_t v31 = *(int *)(type metadata accessor for Goldilocks_ExitMoveBatchErrorFeedbackRequest(0LL) + 32);
  uint64_t v67 = a1;
  uint64_t v32 = (uint64_t)a1 + v31;
  sub_1000CEDAC((uint64_t)a1 + v31, &qword_100295030);
  sub_1000CEC9C((uint64_t)v22, v32, type metadata accessor for Goldilocks_ZoneID);
  uint64_t v33 = v32;
  uint64_t v34 = (uint64_t)v69;
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v19 + 56))(v33, 0LL, 1LL, v18);
  if ((unint64_t)v34 >> 62)
  {
    if (v34 < 0) {
      uint64_t v63 = v34;
    }
    else {
      uint64_t v63 = v34 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v34);
    uint64_t v35 = _CocoaArrayWrapper.endIndex.getter(v63);
    swift_bridgeObjectRelease(v34);
  }

  else
  {
    uint64_t v35 = *(void *)((v34 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  }

  id v36 = &_swiftEmptyArrayStorage;
  if (!v35)
  {
LABEL_19:
    sub_1000CECE0((uint64_t)v66, type metadata accessor for Goldilocks_ZoneID);
    uint64_t v62 = v67;
    size_t result = swift_bridgeObjectRelease(*v67);
    *uint64_t v62 = v36;
    return result;
  }

  uint64_t v76 = &_swiftEmptyArrayStorage;
  size_t result = sub_10011ABE4(0LL, v35 & ~(v35 >> 63), 0);
  if ((v35 & 0x8000000000000000LL) == 0)
  {
    uint64_t v73 = v30;
    if ((v34 & 0xC000000000000001LL) != 0)
    {
      uint64_t v38 = 0LL;
      uint64_t v39 = (uint64_t)v65;
      uint64_t v68 = v35;
      uint64_t v40 = (uint64_t)v71;
      do
      {
        uint64_t v41 = specialized _ArrayBuffer._getElementSlowPath(_:)(v38, v34);
        *uint64_t v16 = 0LL;
        v16[1] = 0xE000000000000000LL;
        v16[2] = 0LL;
        v16[3] = 0xE000000000000000LL;
        uint64_t v42 = v70;
        UnknownStorage.init()(v41);
        uint64_t v43 = (char *)v16 + *(int *)(v42 + 28);
        uint64_t v44 = type metadata accessor for Goldilocks_ErrorInfo.ResultError(0LL);
        uint64_t v45 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v44 - 8) + 56LL))( v43,  1LL,  1LL,  v44);
        __chkstk_darwin(v45);
        *(&v64 - 2) = (char *)v41;
        sub_1000BD35C( &qword_100293D50,  type metadata accessor for Goldilocks_ExitMoveBatchFeedbackItem,  (uint64_t)&protocol conformance descriptor for Goldilocks_ExitMoveBatchFeedbackItem);
        uint64_t v46 = v73;
        static Message.with(_:)(sub_10011C69C, &v64 - 4);
        uint64_t v73 = v46;
        sub_1000CECE0((uint64_t)v16, type metadata accessor for Goldilocks_ExitMoveBatchFeedbackItem);
        swift_unknownObjectRelease(v41);
        sub_1000CEC9C(v40, (uint64_t)v16, type metadata accessor for Goldilocks_ExitMoveBatchFeedbackItem);
        sub_1000CEC9C((uint64_t)v16, v39, type metadata accessor for Goldilocks_ExitMoveBatchFeedbackItem);
        id v36 = v76;
        if ((swift_isUniquelyReferenced_nonNull_native(v76) & 1) == 0)
        {
          sub_10011ABE4(0LL, v36[2] + 1LL, 1);
          id v36 = v76;
        }

        unint64_t v48 = v36[2];
        unint64_t v47 = v36[3];
        uint64_t v49 = v68;
        if (v48 >= v47 >> 1)
        {
          sub_10011ABE4(v47 > 1, v48 + 1, 1);
          id v36 = v76;
        }

        ++v38;
        v36[2] = v48 + 1;
        sub_1000CEC9C( v39,  (uint64_t)v36 + ((*(unsigned __int8 *)(v72 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v72 + 80))
        + *(void *)(v72 + 72) * v48,
          type metadata accessor for Goldilocks_ExitMoveBatchFeedbackItem);
        uint64_t v34 = (uint64_t)v69;
      }

      while (v49 != v38);
    }

    else
    {
      char v50 = (char **)(v34 + 32);
      uint64_t v51 = (uint64_t)v64;
      uint64_t v52 = v70;
      uint64_t v53 = (uint64_t)v71;
      do
      {
        uint64_t v69 = v50;
        uint64_t v54 = *v50;
        *uint64_t v16 = 0LL;
        v16[1] = 0xE000000000000000LL;
        v16[2] = 0LL;
        v16[3] = 0xE000000000000000LL;
        uint64_t v55 = swift_unknownObjectRetain(v54);
        UnknownStorage.init()(v55);
        uint64_t v56 = (char *)v16 + *(int *)(v52 + 28);
        uint64_t v57 = type metadata accessor for Goldilocks_ErrorInfo.ResultError(0LL);
        uint64_t v58 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v57 - 8) + 56LL))( v56,  1LL,  1LL,  v57);
        __chkstk_darwin(v58);
        *(&v64 - 2) = v54;
        sub_1000BD35C( &qword_100293D50,  type metadata accessor for Goldilocks_ExitMoveBatchFeedbackItem,  (uint64_t)&protocol conformance descriptor for Goldilocks_ExitMoveBatchFeedbackItem);
        uint64_t v59 = v73;
        static Message.with(_:)(sub_10011C7B0, &v64 - 4);
        uint64_t v73 = v59;
        sub_1000CECE0((uint64_t)v16, type metadata accessor for Goldilocks_ExitMoveBatchFeedbackItem);
        swift_unknownObjectRelease(v54);
        sub_1000CEC9C(v53, (uint64_t)v16, type metadata accessor for Goldilocks_ExitMoveBatchFeedbackItem);
        sub_1000CEC9C((uint64_t)v16, v51, type metadata accessor for Goldilocks_ExitMoveBatchFeedbackItem);
        id v36 = v76;
        if ((swift_isUniquelyReferenced_nonNull_native(v76) & 1) == 0)
        {
          sub_10011ABE4(0LL, v36[2] + 1LL, 1);
          id v36 = v76;
        }

        unint64_t v61 = v36[2];
        unint64_t v60 = v36[3];
        if (v61 >= v60 >> 1)
        {
          sub_10011ABE4(v60 > 1, v61 + 1, 1);
          id v36 = v76;
        }

        v36[2] = v61 + 1;
        sub_1000CEC9C( v51,  (uint64_t)v36 + ((*(unsigned __int8 *)(v72 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v72 + 80))
        + *(void *)(v72 + 72) * v61,
          type metadata accessor for Goldilocks_ExitMoveBatchFeedbackItem);
        char v50 = v69 + 1;
        --v35;
      }

      while (v35);
    }

    goto LABEL_19;
  }

  __break(1u);
  return result;
}

uint64_t sub_100115300(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  unint64_t v24 = a5;
  uint64_t v9 = type metadata accessor for Goldilocks_ZoneID(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v13 = &v22[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  __chkstk_darwin(v11);
  uint64_t v15 = &v22[-v14];
  uint64_t v16 = *(void *)(a1 + 8);
  swift_bridgeObjectRetain(a3);
  swift_bridgeObjectRelease(v16);
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = a3;
  uint64_t v23 = a4;
  sub_1000BD35C( &qword_100293CD0,  type metadata accessor for Goldilocks_ZoneID,  (uint64_t)&protocol conformance descriptor for Goldilocks_ZoneID);
  static Message.with(_:)(sub_10011C61C, v22);
  sub_1000CEC58((uint64_t)v15, (uint64_t)v13, type metadata accessor for Goldilocks_ZoneID);
  uint64_t v17 = a1 + *(int *)(type metadata accessor for Goldilocks_ExitStatusFeedbackRequest(0LL) + 28);
  sub_1000CEDAC(v17, &qword_100295030);
  sub_1000CEC9C((uint64_t)v13, v17, type metadata accessor for Goldilocks_ZoneID);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v10 + 56))(v17, 0LL, 1LL, v9);
  unint64_t v18 = sub_10011B02C(v24);
  __int16 v20 = v19;
  uint64_t result = sub_1000CECE0((uint64_t)v15, type metadata accessor for Goldilocks_ZoneID);
  if ((v20 & 0x100) == 0)
  {
    *(void *)(a1 + 16) = v18;
    *(_BYTE *)(a1 + 24) = v20 & 1;
  }

  return result;
}

uint64_t sub_100115494(uint64_t *a1, id a2)
{
  id v4 = [a2 zoneName];
  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
  uint64_t v7 = v6;

  swift_bridgeObjectRelease(a1[1]);
  *a1 = v5;
  a1[1] = v7;
  id v8 = [a2 ownerName];
  uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
  uint64_t v11 = v10;

  uint64_t result = swift_bridgeObjectRelease(a1[3]);
  a1[2] = v9;
  a1[3] = v11;
  return result;
}

id sub_10011553C( uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, unint64_t a8)
{
  unint64_t v14 = sub_100113E94((uint64_t)&_swiftEmptyArrayStorage);
  unint64_t v67 = a8;
  if (a4 >= 1)
  {
    uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(CPLErrorRetryAfterDateKey);
    uint64_t v17 = v16;
    uint64_t v72 = (void *)type metadata accessor for Date(0LL);
    sub_1000CE1FC(&v71);
    v18.n128_f64[0] = (double)a4 / 1000.0;
    Date.init(timeIntervalSinceNow:)(v18);
    sub_10011C5EC(&v71, v70);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v14);
    sub_10011A25C(v70, v15, v17, isUniquelyReferenced_nonNull_native);
    swift_bridgeObjectRelease(v17);
    swift_bridgeObjectRelease(0x8000000000000000LL);
  }

  __int16 v20 = (void *)objc_opt_self(&OBJC_CLASS___NSUserDefaults);
  id v21 = [v20 standardUserDefaults];
  NSString v22 = String._bridgeToObjectiveC()();
  id v23 = [v21 stringForKey:v22];

  if (v23)
  {
    uint64_t v24 = static String._unconditionallyBridgeFromObjectiveC(_:)(v23);
    uint64_t v26 = v25;

    uint64_t v27 = static String._unconditionallyBridgeFromObjectiveC(_:)(CPLErrorServerGeneratedLocalizedDescriptionKey);
    uint64_t v29 = v28;
    uint64_t v72 = &type metadata for String;
    *(void *)&__int128 v71 = v24;
    *((void *)&v71 + 1) = v26;
    sub_10011C5EC(&v71, v70);
    char v30 = swift_isUniquelyReferenced_nonNull_native(v14);
    sub_10011A25C(v70, v27, v29, v30);
    uint64_t v31 = v29;
LABEL_9:
    swift_bridgeObjectRelease(v31);
    swift_bridgeObjectRelease(0x8000000000000000LL);
    goto LABEL_10;
  }

  uint64_t v32 = HIBYTE(a6) & 0xF;
  if ((a6 & 0x2000000000000000LL) == 0) {
    uint64_t v32 = a5 & 0xFFFFFFFFFFFFLL;
  }
  if (v32)
  {
    uint64_t v33 = static String._unconditionallyBridgeFromObjectiveC(_:)(CPLErrorServerGeneratedLocalizedDescriptionKey);
    uint64_t v35 = v34;
    uint64_t v72 = &type metadata for String;
    *(void *)&__int128 v71 = a5;
    *((void *)&v71 + 1) = a6;
    sub_10011C5EC(&v71, v70);
    swift_bridgeObjectRetain(a6);
    char v36 = swift_isUniquelyReferenced_nonNull_native(v14);
    sub_10011A25C(v70, v33, v35, v36);
    uint64_t v31 = v35;
    goto LABEL_9;
  }

uint64_t CPLCKPhotosSharedLibraryExitResponse.participantUserID.getter()
{
  return sub_100116188(&OBJC_IVAR___CPLCKPhotosSharedLibraryExitResponse_participantUserID);
}

uint64_t CPLCKPhotosSharedLibraryExitResponse.participantUserID.setter(uint64_t a1, uint64_t a2)
{
  return sub_100116258(a1, a2, &OBJC_IVAR___CPLCKPhotosSharedLibraryExitResponse_participantUserID);
}

void *CPLCKPhotosSharedLibraryExitResponse.participantUserID.modify(uint64_t a1)
{
  return &j_j__swift_endAccess;
}

id CPLCKPhotosSharedLibraryExitResponse.stagingZoneID.getter()
{
  uint64_t v1 = (id *)(v0 + OBJC_IVAR___CPLCKPhotosSharedLibraryExitResponse_stagingZoneID);
  swift_beginAccess(v0 + OBJC_IVAR___CPLCKPhotosSharedLibraryExitResponse_stagingZoneID, v3, 0LL, 0LL);
  return *v1;
}

void CPLCKPhotosSharedLibraryExitResponse.stagingZoneID.setter(void *a1)
{
}

void *CPLCKPhotosSharedLibraryExitResponse.stagingZoneID.modify(uint64_t a1)
{
  return &j__swift_endAccess;
}

uint64_t CPLCKPhotosSharedLibraryExitResponse.error.getter()
{
  uint64_t v1 = (uint64_t *)(v0 + OBJC_IVAR___CPLCKPhotosSharedLibraryExitResponse_error);
  swift_beginAccess(v0 + OBJC_IVAR___CPLCKPhotosSharedLibraryExitResponse_error, v4, 0LL, 0LL);
  uint64_t v2 = *v1;
  swift_errorRetain(v2);
  return v2;
}

uint64_t CPLCKPhotosSharedLibraryExitResponse.error.setter(uint64_t a1)
{
  uint64_t v3 = (uint64_t *)(v1 + OBJC_IVAR___CPLCKPhotosSharedLibraryExitResponse_error);
  swift_beginAccess(v3, v6, 1LL, 0LL);
  uint64_t v4 = *v3;
  *uint64_t v3 = a1;
  return swift_errorRelease(v4);
}

void *CPLCKPhotosSharedLibraryExitResponse.error.modify(uint64_t a1)
{
  return &j_j__swift_endAccess;
}

void CPLCKPhotosSharedLibraryExitResponse.init()()
{
}

id CPLCKPhotosSharedLibraryExitResponse.__deallocating_deinit()
{
  return sub_100119068(type metadata accessor for CPLCKPhotosSharedLibraryExitResponse);
}

uint64_t type metadata accessor for CPLCKPhotosSharedLibraryExitResponse()
{
  return objc_opt_self(&OBJC_CLASS___CPLCKPhotosSharedLibraryExitResponse);
}

uint64_t CPLCKPhotosSharedLibraryExitMoveBatchFeedbackItem.originRecordID.getter()
{
  return sub_100116188(&OBJC_IVAR___CPLCKPhotosSharedLibraryExitMoveBatchFeedbackItem_originRecordID);
}

uint64_t CPLCKPhotosSharedLibraryExitMoveBatchFeedbackItem.originRecordID.setter(uint64_t a1, uint64_t a2)
{
  return sub_100116258(a1, a2, &OBJC_IVAR___CPLCKPhotosSharedLibraryExitMoveBatchFeedbackItem_originRecordID);
}

void *CPLCKPhotosSharedLibraryExitMoveBatchFeedbackItem.originRecordID.modify(uint64_t a1)
{
  return &j_j__swift_endAccess;
}

uint64_t CPLCKPhotosSharedLibraryExitMoveBatchFeedbackItem.destinationRecordID.getter()
{
  return sub_100116188(&OBJC_IVAR___CPLCKPhotosSharedLibraryExitMoveBatchFeedbackItem_destinationRecordID);
}

uint64_t CPLCKPhotosSharedLibraryExitMoveBatchFeedbackItem.destinationRecordID.setter(uint64_t a1, uint64_t a2)
{
  return sub_100116258(a1, a2, &OBJC_IVAR___CPLCKPhotosSharedLibraryExitMoveBatchFeedbackItem_destinationRecordID);
}

void *CPLCKPhotosSharedLibraryExitMoveBatchFeedbackItem.destinationRecordID.modify(uint64_t a1)
{
  return &j_j__swift_endAccess;
}

uint64_t CPLCKPhotosSharedLibraryExitMoveBatchFeedbackItem.errorMessage.getter()
{
  return sub_100116188(&OBJC_IVAR___CPLCKPhotosSharedLibraryExitMoveBatchFeedbackItem_errorMessage);
}

uint64_t CPLCKPhotosSharedLibraryExitMoveBatchFeedbackItem.errorMessage.setter(uint64_t a1, uint64_t a2)
{
  return sub_100116258(a1, a2, &OBJC_IVAR___CPLCKPhotosSharedLibraryExitMoveBatchFeedbackItem_errorMessage);
}

void *CPLCKPhotosSharedLibraryExitMoveBatchFeedbackItem.errorMessage.modify(uint64_t a1)
{
  return &j_j__swift_endAccess;
}

id CPLCKPhotosSharedLibraryExitMoveBatchFeedbackItem.errorCode.getter()
{
  uint64_t v1 = (id *)(v0 + OBJC_IVAR___CPLCKPhotosSharedLibraryExitMoveBatchFeedbackItem_errorCode);
  swift_beginAccess(v0 + OBJC_IVAR___CPLCKPhotosSharedLibraryExitMoveBatchFeedbackItem_errorCode, v3, 0LL, 0LL);
  return *v1;
}

void sub_100116018(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  uint64_t v5 = (void **)(a1 + *a4);
  swift_beginAccess(v5, v8, 1LL, 0LL);
  uint64_t v6 = *v5;
  *uint64_t v5 = a3;
  id v7 = a3;
}

void CPLCKPhotosSharedLibraryExitMoveBatchFeedbackItem.errorCode.setter(void *a1)
{
}

void sub_10011607C(void *a1, void *a2)
{
  uint64_t v4 = (void **)(v2 + *a2);
  swift_beginAccess(v4, v6, 1LL, 0LL);
  uint64_t v5 = *v4;
  *uint64_t v4 = a1;
}

void *CPLCKPhotosSharedLibraryExitMoveBatchFeedbackItem.errorCode.modify(uint64_t a1)
{
  return &j_j__swift_endAccess;
}

id sub_100116118(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = a1 + *a3;
  swift_beginAccess(v3, v7, 0LL, 0LL);
  uint64_t v4 = *(void *)(v3 + 8);
  swift_bridgeObjectRetain(v4);
  NSString v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v4);
  return v5;
}

uint64_t CPLCKPhotosSharedLibraryExitMoveBatchFeedbackItem.errorDomain.getter()
{
  return sub_100116188(&OBJC_IVAR___CPLCKPhotosSharedLibraryExitMoveBatchFeedbackItem_errorDomain);
}

uint64_t sub_100116188(void *a1)
{
  uint64_t v2 = (uint64_t *)(v1 + *a1);
  swift_beginAccess(v2, v5, 0LL, 0LL);
  uint64_t v3 = *v2;
  swift_bridgeObjectRetain(v2[1]);
  return v3;
}

uint64_t sub_1001161E4(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(a3);
  uint64_t v8 = v7;
  uint64_t v9 = (uint64_t *)(a1 + *a4);
  swift_beginAccess(v9, v12, 1LL, 0LL);
  uint64_t v10 = v9[1];
  *uint64_t v9 = v6;
  v9[1] = v8;
  return swift_bridgeObjectRelease(v10);
}

uint64_t CPLCKPhotosSharedLibraryExitMoveBatchFeedbackItem.errorDomain.setter(uint64_t a1, uint64_t a2)
{
  return sub_100116258(a1, a2, &OBJC_IVAR___CPLCKPhotosSharedLibraryExitMoveBatchFeedbackItem_errorDomain);
}

uint64_t sub_100116258(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = (void *)(v3 + *a3);
  swift_beginAccess(v6, v9, 1LL, 0LL);
  uint64_t v7 = v6[1];
  *uint64_t v6 = a1;
  v6[1] = a2;
  return swift_bridgeObjectRelease(v7);
}

void *CPLCKPhotosSharedLibraryExitMoveBatchFeedbackItem.errorDomain.modify(uint64_t a1)
{
  return &j_j__swift_endAccess;
}

id CPLCKPhotosSharedLibraryExitMoveBatchFeedbackItem.init()()
{
  uint64_t v1 = &v0[OBJC_IVAR___CPLCKPhotosSharedLibraryExitMoveBatchFeedbackItem_originRecordID];
  *(void *)uint64_t v1 = 0LL;
  *((void *)v1 + 1) = 0xE000000000000000LL;
  uint64_t v2 = &v0[OBJC_IVAR___CPLCKPhotosSharedLibraryExitMoveBatchFeedbackItem_destinationRecordID];
  *(void *)uint64_t v2 = 0LL;
  *((void *)v2 + 1) = 0xE000000000000000LL;
  uint64_t v3 = &v0[OBJC_IVAR___CPLCKPhotosSharedLibraryExitMoveBatchFeedbackItem_errorMessage];
  *(void *)uint64_t v3 = 0LL;
  *((void *)v3 + 1) = 0xE000000000000000LL;
  uint64_t v4 = OBJC_IVAR___CPLCKPhotosSharedLibraryExitMoveBatchFeedbackItem_errorCode;
  id v5 = objc_allocWithZone(&OBJC_CLASS___NSNumber);
  uint64_t v6 = v0;
  *(void *)&v0[v4] = [v5 init];
  uint64_t v7 = &v6[OBJC_IVAR___CPLCKPhotosSharedLibraryExitMoveBatchFeedbackItem_errorDomain];
  *(void *)uint64_t v7 = 0LL;
  *((void *)v7 + 1) = 0xE000000000000000LL;

  v9.receiver = v6;
  v9.super_class = (Class)type metadata accessor for CPLCKPhotosSharedLibraryExitMoveBatchFeedbackItem();
  return objc_msgSendSuper2(&v9, "init");
}

uint64_t type metadata accessor for CPLCKPhotosSharedLibraryExitMoveBatchFeedbackItem()
{
  return objc_opt_self(&OBJC_CLASS___CPLCKPhotosSharedLibraryExitMoveBatchFeedbackItem);
}

id CPLCKPhotosSharedLibraryExitMoveBatchFeedbackItem.__deallocating_deinit()
{
  return sub_100119068(type metadata accessor for CPLCKPhotosSharedLibraryExitMoveBatchFeedbackItem);
}

uint64_t sub_100116520( uint64_t a1, void *a2, void (*a3)(uint64_t, uint64_t, uint64_t, void *, uint64_t, uint64_t, uint64_t, void, int, void), uint64_t a4)
{
  uint64_t v86 = a4;
  uint64_t v87 = a3;
  uint64_t v84 = a2;
  uint64_t v88 = a1;
  uint64_t v4 = type metadata accessor for Goldilocks_ErrorInfo.ResultError(0LL);
  uint64_t v85 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v79 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for Goldilocks_OperationControl(0LL);
  uint64_t v81 = *(void *)(v7 - 8);
  uint64_t v82 = v7;
  __chkstk_darwin(v7);
  uint64_t v80 = (uint64_t *)((char *)&v79 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v9 = sub_1000BED3C(&qword_100293CA0);
  uint64_t v10 = __chkstk_darwin(v9);
  uint64_t v79 = (uint64_t)&v79 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v79 - v12;
  uint64_t v14 = sub_1000BED3C(&qword_100293C98);
  uint64_t v15 = __chkstk_darwin(v14);
  uint64_t v83 = (uint64_t)&v79 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v15);
  __n128 v18 = (char *)&v79 - v17;
  uint64_t v19 = sub_1000BED3C(&qword_100295100);
  __chkstk_darwin(v19);
  id v21 = (char *)&v79 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v22 = type metadata accessor for Goldilocks_SilentMoverRampingResponse(0LL);
  uint64_t v23 = *(void *)(v22 - 8);
  uint64_t v24 = __chkstk_darwin(v22);
  uint64_t v26 = (char *)&v79 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v24);
  uint64_t v28 = (char *)&v79 - v27;
  sub_1000CE7B4(v88, (uint64_t)v21, &qword_100295100);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v21, 1LL, v22) != 1)
  {
    sub_1000CEC9C((uint64_t)v21, (uint64_t)v28, type metadata accessor for Goldilocks_SilentMoverRampingResponse);
    uint64_t v31 = (uint64_t)&v28[*(int *)(v22 + 32)];
    sub_1000CE7B4(v31, (uint64_t)v18, &qword_100293C98);
    uint64_t v32 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))*((void *)v85 + 6);
    uint64_t v88 = v4;
    uint64_t v85 = v32;
    unsigned int v33 = v32((uint64_t)v18, 1LL, v4);
    sub_1000CEDAC((uint64_t)v18, &qword_100293C98);
    uint64_t v34 = v28;
    sub_1000CEC58((uint64_t)v28, (uint64_t)v26, type metadata accessor for Goldilocks_SilentMoverRampingResponse);
    if (v33 == 1)
    {
      sub_1000CE7B4((uint64_t)&v26[*(int *)(v22 + 28)], (uint64_t)v13, &qword_100293CA0);
      uint64_t v35 = v82;
      char v36 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v81 + 48);
      int v37 = v36(v13, 1LL, v82);
      sub_1000CEDAC((uint64_t)v13, &qword_100293CA0);
      sub_1000CECE0((uint64_t)v26, type metadata accessor for Goldilocks_SilentMoverRampingResponse);
      if (v37 != 1)
      {
        NSString v38 = v34;
        uint64_t v39 = v79;
        sub_1000CE7B4((uint64_t)v34 + *(int *)(v22 + 28), v79, &qword_100293CA0);
        uint64_t v40 = v36((char *)v39, 1LL, v35);
        uint64_t v41 = v80;
        if ((_DWORD)v40 == 1)
        {
          *uint64_t v80 = 0LL;
          *((_BYTE *)v41 + 8) = 1;
          *(_DWORD *)((char *)v41 + 9) = 0;
          *(_WORD *)((char *)v41 + 13) = 0;
          UnknownStorage.init()(v40);
          uint64_t result = sub_1000CEDAC(v39, &qword_100293CA0);
        }

        else
        {
          uint64_t result = sub_1000CEC9C(v39, (uint64_t)v80, type metadata accessor for Goldilocks_OperationControl);
        }

        uint64_t v63 = *((unsigned __int8 *)v41 + 9);
        char v64 = *((_BYTE *)v41 + 11);
        char v65 = *((_BYTE *)v41 + 12);
        char v66 = *((_BYTE *)v41 + 13);
        char v67 = *((_BYTE *)v41 + 14);
        char v68 = *((_BYTE *)v41 + 8);
        uint64_t v69 = (void *)v38[2];
        LODWORD(v88) = *((unsigned __int8 *)v41 + 10);
        if ((v68 & 1) != 0)
        {
          uint64_t v70 = v38;
          uint64_t v71 = *v38;
          uint64_t v72 = v70[1];
          uint64_t v73 = v69;
          swift_bridgeObjectRetain(v72);
          HIBYTE(v77) = v67;
          BYTE2(v77) = v66;
          BYTE1(v77) = v65;
          LOBYTE(v77) = v64;
          v87(1LL, v71, v72, v73, 0LL, 0LL, v63, v88, v77, 0LL);
LABEL_30:
          swift_bridgeObjectRelease(v72);
          sub_1000CECE0((uint64_t)v41, type metadata accessor for Goldilocks_OperationControl);
          uint64_t v62 = (uint64_t)v70;
          return sub_1000CECE0(v62, type metadata accessor for Goldilocks_SilentMoverRampingResponse);
        }

        if ((~*v41 & 0x7FF0000000000000LL) != 0)
        {
          double v74 = *(double *)v41;
          if (*(double *)v41 > -2147483650.0)
          {
            uint64_t v84 = v69;
            LODWORD(v85) = v63;
            if (v74 < 2147483650.0)
            {
              uint64_t v70 = v38;
              uint64_t v75 = *v38;
              uint64_t v72 = v70[1];
              uint64_t v76 = (int)v74;
              swift_bridgeObjectRetain(v72);
              HIBYTE(v78) = v67;
              BYTE2(v78) = v66;
              BYTE1(v78) = v65;
              LOBYTE(v78) = v64;
              v87(1LL, v75, v72, v84, 1LL, v76, v85, v88, v78, 0LL);
              uint64_t v41 = v80;
              goto LABEL_30;
            }

void sub_100116D48( char a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, unsigned int a6, char a7, char a8, int a9, uint64_t a10, uint64_t a11)
{
  if (!a3)
  {
    NSString v14 = 0LL;
    if (a10) {
      goto LABEL_3;
    }
LABEL_5:
    uint64_t v15 = 0LL;
    goto LABEL_6;
  }

  NSString v14 = String._bridgeToObjectiveC()();
  if (!a10) {
    goto LABEL_5;
  }
LABEL_3:
  uint64_t v15 = _convertErrorToNSError(_:)(a10);
LABEL_6:
  id v16 = (id)v15;
  (*(void (**)(uint64_t, void, NSString, uint64_t, void, void, void, void, int, uint64_t))(a11 + 16))( a11,  a1 & 1,  v14,  a4,  a5 & 1,  a6,  a7 & 1,  a8 & 1,  a9 & 0x1010101,  v15);
}

uint64_t sub_100116E40( uint64_t a1, void *a2, void (*a3)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, BOOL, id), uint64_t a4)
{
  uint64_t v58 = a4;
  uint64_t v59 = a3;
  uint64_t v57 = type metadata accessor for Goldilocks_ErrorInfo.ResultError(0LL);
  uint64_t v6 = *(void *)(v57 - 8);
  __chkstk_darwin(v57);
  uint64_t v8 = (char *)&v56 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = sub_1000BED3C(&qword_100293C98);
  uint64_t v10 = __chkstk_darwin(v9);
  uint64_t v56 = (uint64_t)&v56 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v56 - v12;
  uint64_t v14 = sub_1000BED3C(&qword_1002950D0);
  __chkstk_darwin(v14);
  id v16 = (char *)&v56 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = type metadata accessor for Goldilocks_ExitMoveBatchResponse(0LL);
  uint64_t v18 = *(void *)(v17 - 8);
  __chkstk_darwin(v17);
  uint64_t v20 = (char *)&v56 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_1000CE7B4(a1, (uint64_t)v16, &qword_1002950D0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1LL, v17) != 1)
  {
    sub_1000CEC9C((uint64_t)v16, (uint64_t)v20, type metadata accessor for Goldilocks_ExitMoveBatchResponse);
    uint64_t v22 = (uint64_t)&v20[*(int *)(v17 + 40)];
    sub_1000CE7B4(v22, (uint64_t)v13, &qword_100293C98);
    uint64_t v23 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 48);
    uint64_t v24 = v57;
    int v25 = v23(v13, 1LL, v57);
    sub_1000CEDAC((uint64_t)v13, &qword_100293C98);
    if (v25 == 1)
    {
      uint64_t v26 = *((void *)v20 + 5);
      if (*(void *)(v26 + 16))
      {
        uint64_t v27 = *(void *)v20;
        uint64_t v28 = *((void *)v20 + 1);
        uint64_t v30 = *((void *)v20 + 3);
        uint64_t v29 = *((void *)v20 + 4);
        char v31 = v20[48];
        swift_bridgeObjectRetain(*((void *)v20 + 5));
        swift_bridgeObjectRetain(v28);
        swift_bridgeObjectRetain(v29);
        v59(v26, v27, v28, v30, v29, (v31 & 1) == 0, 0LL);
        swift_bridgeObjectRelease(v26);
      }

      else
      {
        uint64_t v49 = *(void *)v20;
        uint64_t v28 = *((void *)v20 + 1);
        uint64_t v50 = *((void *)v20 + 3);
        uint64_t v29 = *((void *)v20 + 4);
        char v51 = v20[48];
        swift_bridgeObjectRetain(v28);
        swift_bridgeObjectRetain(v29);
        v59((uint64_t)&_swiftEmptyArrayStorage, v49, v28, v50, v29, (v51 & 1) == 0, 0LL);
      }

      swift_bridgeObjectRelease(v28);
      uint64_t v52 = v29;
      goto LABEL_23;
    }

    uint64_t v32 = *(void *)v20;
    uint64_t v33 = *((void *)v20 + 1);
    uint64_t v34 = *((void *)v20 + 3);
    uint64_t v35 = *((void *)v20 + 4);
    uint64_t v36 = v56;
    sub_1000CE7B4(v22, v56, &qword_100293C98);
    if (v23((char *)v36, 1LL, v24) == 1)
    {
      *(void *)uint64_t v8 = 0LL;
      *((void *)v8 + 1) = 0xE000000000000000LL;
      *((void *)v8 + 2) = 0LL;
      _BYTE v8[24] = 1;
      *((void *)v8 + 4) = 0LL;
      *((void *)v8 + 5) = 0xE000000000000000LL;
      *((_DWORD *)v8 + 12) = 0;
      *((void *)v8 + 7) = &_swiftEmptyArrayStorage;
      *((void *)v8 + 8) = 0LL;
      *((void *)v8 + 9) = 0xE000000000000000LL;
      *((void *)v8 + 10) = 0LL;
      *((void *)v8 + 11) = 0xE000000000000000LL;
      swift_bridgeObjectRetain(v33);
      uint64_t v37 = swift_bridgeObjectRetain(v35);
      UnknownStorage.init()(v37);
      NSString v38 = &v8[*(int *)(v24 + 48)];
      uint64_t v39 = type metadata accessor for Goldilocks_ErrorInfo.DatabaseFailure(0LL);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v39 - 8) + 56LL))(v38, 1LL, 1LL, v39);
      uint64_t result = sub_1000CEDAC(v36, &qword_100293C98);
    }

    else
    {
      sub_1000CEC9C(v36, (uint64_t)v8, type metadata accessor for Goldilocks_ErrorInfo.ResultError);
      swift_bridgeObjectRetain(v33);
      uint64_t result = swift_bridgeObjectRetain(v35);
    }

    uint64_t v41 = *((void *)v20 + 2);
    uint64_t v42 = 1000 * v41;
    if ((unsigned __int128)(v41 * (__int128)1000LL) >> 64 != (1000 * v41) >> 63)
    {
      __break(1u);
      return result;
    }

    uint64_t v57 = v35;
    unint64_t v44 = *((void *)v8 + 1);
    uint64_t v43 = *((void *)v8 + 2);
    int v45 = v8[24];
    unint64_t v46 = *(void *)v8;
    uint64_t v47 = HIBYTE(v44) & 0xF;
    if ((v44 & 0x2000000000000000LL) == 0) {
      uint64_t v47 = *(void *)v8 & 0xFFFFFFFFFFFFLL;
    }
    if (v47)
    {
      swift_bridgeObjectRetain(*((void *)v8 + 1));
      if (v45)
      {
LABEL_17:
        uint64_t v48 = qword_100219B30[v43];
LABEL_22:
        id v54 = sub_10011553C( v48,  v46,  v44,  v42,  *((void *)v8 + 8),  *((void *)v8 + 9),  *((void *)v8 + 10),  *((void *)v8 + 11));
        swift_bridgeObjectRelease(v44);
        sub_1000CECE0((uint64_t)v8, type metadata accessor for Goldilocks_ErrorInfo.ResultError);
        uint64_t v55 = v57;
        v59(0LL, v32, v33, v34, v57, 0, v54);
        swift_errorRelease(v54);
        swift_bridgeObjectRelease(v33);
        uint64_t v52 = v55;
LABEL_23:
        swift_bridgeObjectRelease(v52);
        return sub_1000CECE0((uint64_t)v20, type metadata accessor for Goldilocks_ExitMoveBatchResponse);
      }
    }

    else
    {
      unint64_t v46 = sub_100114020(*((void *)v8 + 2), v8[24]);
      unint64_t v44 = v53;
      if (v45) {
        goto LABEL_17;
      }
    }

    uint64_t v48 = 150LL;
    goto LABEL_22;
  }

  sub_1000CEDAC((uint64_t)v16, &qword_1002950D0);
  if (a2) {
    id v21 = a2;
  }
  else {
    id v21 = sub_10011553C( 150LL,  0xD00000000000001ALL,  0x80000001001D3830LL,  0LL,  0LL,  0xE000000000000000LL,  0LL,  0xE000000000000000LL);
  }
  swift_errorRetain(a2);
  v59(0LL, 0LL, 0LL, 0LL, 0LL, 0, v21);
  return swift_errorRelease(v21);
}

void sub_1001173D0( uint64_t a1, uint64_t a2, void *a3, uint64_t a4, NSString a5, char a6, uint64_t a7, uint64_t a8)
{
  NSString v12 = a3;
  if (a1)
  {
    v13.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
    if (!v12) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }

  v13.super.Class isa = 0LL;
  if (a3) {
LABEL_3:
  }
    NSString v12 = String._bridgeToObjectiveC()();
LABEL_4:
  if (a5) {
    a5 = String._bridgeToObjectiveC()();
  }
  if (a7) {
    uint64_t v14 = _convertErrorToNSError(_:)(a7);
  }
  else {
    uint64_t v14 = 0LL;
  }
  id v15 = (id)v14;
  (*(void (**)(uint64_t, Class, NSString, NSString, void))(a8 + 16))(a8, v13.super.isa, v12, a5, a6 & 1);
}

uint64_t sub_1001174B8( uint64_t a1, void *a2, void (*a3)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void), uint64_t a4)
{
  uint64_t v65 = a4;
  char v66 = a3;
  uint64_t v63 = a2;
  uint64_t v64 = type metadata accessor for Goldilocks_ErrorInfo.ResultError(0LL);
  uint64_t v5 = *(void *)(v64 - 8);
  __chkstk_darwin(v64);
  uint64_t v7 = (char *)&v59 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = sub_1000BED3C(&qword_100293C98);
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v59 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v9);
  NSArray v13 = (char *)&v59 - v12;
  uint64_t v14 = sub_1000BED3C(&qword_1002950D0);
  __chkstk_darwin(v14);
  id v16 = (char *)&v59 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = type metadata accessor for Goldilocks_ExitMoveBatchResponse(0LL);
  uint64_t v18 = *(void *)(v17 - 8);
  __chkstk_darwin(v17);
  uint64_t v20 = (char *)&v59 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_1000CE7B4(a1, (uint64_t)v16, &qword_1002950D0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1LL, v17) != 1)
  {
    sub_1000CEC9C((uint64_t)v16, (uint64_t)v20, type metadata accessor for Goldilocks_ExitMoveBatchResponse);
    uint64_t v23 = (uint64_t)&v20[*(int *)(v17 + 40)];
    sub_1000CE7B4(v23, (uint64_t)v13, &qword_100293C98);
    uint64_t v24 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 48);
    int v25 = v24(v13, 1LL, v64);
    sub_1000CEDAC((uint64_t)v13, &qword_100293C98);
    uint64_t v26 = v20[48];
    uint64_t v27 = *(void *)v20;
    uint64_t v28 = *((void *)v20 + 1);
    if (v25 == 1)
    {
      uint64_t v30 = *((void *)v20 + 2);
      uint64_t v29 = *((void *)v20 + 3);
      uint64_t v31 = *((void *)v20 + 4);
      uint64_t v32 = *((void *)v20 + 5);
      swift_bridgeObjectRetain(*((void *)v20 + 1));
      swift_bridgeObjectRetain(v31);
      swift_bridgeObjectRetain(v32);
      v66(1LL, v26, v27, v28, v29, v31, v30, v32, 0LL);
      swift_bridgeObjectRelease(v28);
      swift_bridgeObjectRelease(v31);
      uint64_t v33 = v32;
LABEL_19:
      swift_bridgeObjectRelease(v33);
      return sub_1000CECE0((uint64_t)v20, type metadata accessor for Goldilocks_ExitMoveBatchResponse);
    }

    uint64_t v62 = *(void *)v20;
    uint64_t v34 = *((void *)v20 + 4);
    uint64_t v35 = *((void *)v20 + 2);
    uint64_t v59 = *((void *)v20 + 3);
    uint64_t v60 = v35;
    uint64_t v36 = *((void *)v20 + 5);
    uint64_t v37 = v23;
    uint64_t v38 = (uint64_t)v11;
    sub_1000CE7B4(v37, (uint64_t)v11, &qword_100293C98);
    int v39 = v24(v11, 1LL, v64);
    LODWORD(v63) = v26;
    uint64_t v61 = v34;
    if (v39 == 1)
    {
      *(void *)uint64_t v7 = 0LL;
      *((void *)v7 + 1) = 0xE000000000000000LL;
      *((void *)v7 + 2) = 0LL;
      _BYTE v7[24] = 1;
      *((void *)v7 + 4) = 0LL;
      *((void *)v7 + 5) = 0xE000000000000000LL;
      *((_DWORD *)v7 + 12) = 0;
      *((void *)v7 + 7) = &_swiftEmptyArrayStorage;
      *((void *)v7 + 8) = 0LL;
      *((void *)v7 + 9) = 0xE000000000000000LL;
      *((void *)v7 + 10) = 0LL;
      *((void *)v7 + 11) = 0xE000000000000000LL;
      uint64_t v40 = v34;
      uint64_t v41 = v64;
      swift_bridgeObjectRetain(v28);
      swift_bridgeObjectRetain(v40);
      uint64_t v42 = swift_bridgeObjectRetain(v36);
      UnknownStorage.init()(v42);
      uint64_t v43 = &v7[*(int *)(v41 + 48)];
      uint64_t v44 = type metadata accessor for Goldilocks_ErrorInfo.DatabaseFailure(0LL);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v44 - 8) + 56LL))(v43, 1LL, 1LL, v44);
      sub_1000CEDAC(v38, &qword_100293C98);
    }

    else
    {
      sub_1000CEC9C((uint64_t)v11, (uint64_t)v7, type metadata accessor for Goldilocks_ErrorInfo.ResultError);
      swift_bridgeObjectRetain(v28);
      swift_bridgeObjectRetain(v34);
      swift_bridgeObjectRetain(v36);
    }

    uint64_t v47 = v36;
    uint64_t v48 = v59;
    unint64_t v50 = *((void *)v7 + 1);
    uint64_t v49 = *((void *)v7 + 2);
    int v51 = v7[24];
    unint64_t v52 = *(void *)v7;
    uint64_t v53 = HIBYTE(v50) & 0xF;
    if ((v50 & 0x2000000000000000LL) == 0) {
      uint64_t v53 = *(void *)v7 & 0xFFFFFFFFFFFFLL;
    }
    if (v53)
    {
      swift_bridgeObjectRetain(*((void *)v7 + 1));
      if (v51)
      {
LABEL_15:
        uint64_t v54 = qword_100219B30[v49];
LABEL_18:
        uint64_t v56 = (void (*)(void, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, id))v66;
        id v57 = sub_10011553C( v54,  v52,  v50,  0LL,  *((void *)v7 + 8),  *((void *)v7 + 9),  *((void *)v7 + 10),  *((void *)v7 + 11));
        swift_bridgeObjectRelease(v50);
        sub_1000CECE0((uint64_t)v7, type metadata accessor for Goldilocks_ErrorInfo.ResultError);
        uint64_t v58 = v61;
        v56(0LL, v63, v62, v28, v48, v61, v60, v47, v57);
        swift_errorRelease(v57);
        swift_bridgeObjectRelease(v28);
        swift_bridgeObjectRelease(v58);
        uint64_t v33 = v47;
        goto LABEL_19;
      }
    }

    else
    {
      unint64_t v52 = sub_100114020(*((void *)v7 + 2), v7[24]);
      unint64_t v50 = v55;
      if (v51) {
        goto LABEL_15;
      }
    }

    uint64_t v54 = 150LL;
    goto LABEL_18;
  }

  sub_1000CEDAC((uint64_t)v16, &qword_1002950D0);
  id v21 = v63;
  if (v63) {
    id v22 = v63;
  }
  else {
    id v22 = sub_10011553C( 150LL,  0xD00000000000001ALL,  0x80000001001D3830LL,  0LL,  0LL,  0xE000000000000000LL,  0LL,  0xE000000000000000LL);
  }
  int v45 = (void (*)(void, void, void, void, void, void, void, void, id))v66;
  swift_errorRetain(v21);
  v45(0LL, 0LL, 0LL, 0LL, 0LL, 0LL, 0LL, 0LL, v22);
  return swift_errorRelease(v22);
}

void sub_100117A64( char a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, Class isa, uint64_t a9, uint64_t a10)
{
  NSString v12 = a6;
  if (a4)
  {
    NSString v15 = String._bridgeToObjectiveC()();
    if (!v12) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }

  NSString v15 = 0LL;
  if (a6) {
LABEL_3:
  }
    NSString v12 = String._bridgeToObjectiveC()();
LABEL_4:
  if (isa) {
    Class isa = Array._bridgeToObjectiveC()().super.isa;
  }
  if (a9) {
    uint64_t v16 = _convertErrorToNSError(_:)(a9);
  }
  else {
    uint64_t v16 = 0LL;
  }
  id v17 = (id)v16;
  (*(void (**)(uint64_t, void, void, NSString, NSString, uint64_t, Class))(a10 + 16))( a10,  a1 & 1,  a2 & 1,  v15,  v12,  a7,  isa);
}

void static CPLCKPhotosSharedLibraryOperation.exitSharedLibraryOperation(with:retentionPolicy:exitType:exitSource:stopAt:participantUserIDsToRemove:participantIDsToRemove:completionHandler:)( void *a1, unint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_100117B68( uint64_t a1, char *a2, void (*a3)(void, void, void, void, id), uint64_t a4)
{
  uint64_t v128 = a4;
  v141 = a2;
  uint64_t v6 = type metadata accessor for Goldilocks_ErrorInfo.ResultError(0LL);
  uint64_t v138 = *(void *)(v6 - 8);
  uint64_t v139 = v6;
  uint64_t v7 = __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v121 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v7);
  v130 = (uint64_t *)((char *)&v121 - v10);
  uint64_t v11 = sub_1000BED3C(&qword_100293C98);
  uint64_t v12 = __chkstk_darwin(v11);
  uint64_t v125 = (uint64_t)&v121 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v129 = (uint64_t)&v121 - v15;
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v136 = (uint64_t)&v121 - v17;
  __chkstk_darwin(v16);
  uint64_t v126 = (uint64_t)&v121 - v18;
  uint64_t v19 = sub_1000BED3C(&qword_100295030);
  __chkstk_darwin(v19);
  uint64_t v135 = (uint64_t)&v121 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v21 = type metadata accessor for Goldilocks_ZoneID(0LL);
  uint64_t v133 = *(void *)(v21 - 8);
  uint64_t v134 = v21;
  __chkstk_darwin(v21);
  v137 = (uint64_t *)((char *)&v121 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v142 = type metadata accessor for Goldilocks_ParticipantExitResult(0LL);
  uint64_t v23 = *(void *)(v142 - 8);
  __chkstk_darwin(v142);
  int v25 = (uint64_t *)((char *)&v121 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v26 = sub_1000BED3C(&qword_100295098);
  __chkstk_darwin(v26);
  uint64_t v28 = (char *)&v121 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v29 = type metadata accessor for Goldilocks_InitiateExitResponse(0LL);
  uint64_t v30 = *(void *)(v29 - 8);
  __chkstk_darwin(v29);
  uint64_t v32 = (char *)&v121 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_1000CE7B4(a1, (uint64_t)v28, &qword_100295098);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v30 + 48))(v28, 1LL, v29) == 1)
  {
    sub_1000CEDAC((uint64_t)v28, &qword_100295098);
    uint64_t v33 = v141;
    if (v141) {
      id v34 = v141;
    }
    else {
      id v34 = sub_10011553C( 150LL,  0xD00000000000001ALL,  0x80000001001D3830LL,  0LL,  0LL,  0xE000000000000000LL,  0LL,  0xE000000000000000LL);
    }
    swift_errorRetain(v33);
    a3(0LL, 0LL, 0LL, 0LL, v34);
    return swift_errorRelease(v34);
  }

  uint64_t v124 = v29;
  sub_1000CEC9C((uint64_t)v28, (uint64_t)v32, type metadata accessor for Goldilocks_InitiateExitResponse);
  uint64_t v146 = (uint64_t)&_swiftEmptyArrayStorage;
  v127 = v32;
  uint64_t v35 = *((void *)v32 + 2);
  uint64_t v36 = *(char **)(v35 + 16);
  uint64_t v37 = v139;
  if (!v36) {
    goto LABEL_26;
  }
  v122 = v9;
  v123 = a3;
  uint64_t v38 = sub_1000CE284(0LL, (unint64_t *)&unk_1002950A0, &OBJC_CLASS___CKRecordZoneID_ptr);
  uint64_t v39 = v35 + ((*(unsigned __int8 *)(v23 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v23 + 80));
  uint64_t v131 = *(void *)(v23 + 72);
  uint64_t v132 = v38;
  uint64_t v121 = v35;
  swift_bridgeObjectRetain(v35);
  uint64_t v40 = v137;
  do
  {
    v141 = v36;
    sub_1000CEC58(v39, (uint64_t)v25, type metadata accessor for Goldilocks_ParticipantExitResult);
    uint64_t v41 = v135;
    sub_1000CE7B4((uint64_t)v25 + *(int *)(v142 + 28), v135, &qword_100295030);
    uint64_t v42 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v133 + 48))(v41, 1LL, v134);
    if ((_DWORD)v42 == 1)
    {
      *uint64_t v40 = 0LL;
      v40[1] = 0xE000000000000000LL;
      v40[2] = 0LL;
      v40[3] = 0xE000000000000000LL;
      UnknownStorage.init()(v42);
      sub_1000CEDAC(v41, &qword_100295030);
    }

    else
    {
      sub_1000CEC9C(v41, (uint64_t)v40, type metadata accessor for Goldilocks_ZoneID);
    }

    uint64_t v43 = *v40;
    uint64_t v44 = (void *)v40[1];
    uint64_t v45 = v40[2];
    unint64_t v46 = (void *)v40[3];
    swift_bridgeObjectRetain(v44);
    swift_bridgeObjectRetain(v46);
    v47._countAndFlagsBits = v43;
    v47._object = v44;
    v48._countAndFlagsBits = v45;
    v48._object = v46;
    Class isa = CKRecordZoneID.init(zoneName:ownerName:)(v47, v48).super.isa;
    uint64_t v49 = (uint64_t)v25 + *(int *)(v142 + 24);
    uint64_t v50 = v136;
    sub_1000CE7B4(v49, v136, &qword_100293C98);
    int v51 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v138 + 48);
    LODWORD(v45) = v51(v50, 1LL, v37);
    sub_1000CEDAC(v50, &qword_100293C98);
    if ((_DWORD)v45 == 1)
    {
      id v52 = 0LL;
      goto LABEL_22;
    }

    uint64_t v53 = v129;
    sub_1000CE7B4(v49, v129, &qword_100293C98);
    uint64_t v54 = v51(v53, 1LL, v37);
    unint64_t v55 = v130;
    if ((_DWORD)v54 == 1)
    {
      void *v130 = 0LL;
      v55[1] = 0xE000000000000000LL;
      v55[2] = 0LL;
      v55[4] = 0LL;
      v55[5] = 0xE000000000000000LL;
      *((_DWORD *)v55 + 12) = 0;
      v55[7] = &_swiftEmptyArrayStorage;
      v55[8] = 0LL;
      v55[9] = 0xE000000000000000LL;
      v55[10] = 0LL;
      v55[11] = 0xE000000000000000LL;
      *((_BYTE *)v55 + 24) = 1;
      UnknownStorage.init()(v54);
      uint64_t v56 = (char *)v55 + *(int *)(v37 + 48);
      uint64_t v57 = type metadata accessor for Goldilocks_ErrorInfo.DatabaseFailure(0LL);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v57 - 8) + 56LL))(v56, 1LL, 1LL, v57);
      sub_1000CEDAC(v53, &qword_100293C98);
    }

    else
    {
      sub_1000CEC9C(v53, (uint64_t)v130, type metadata accessor for Goldilocks_ErrorInfo.ResultError);
    }

    unint64_t v58 = v55[1];
    uint64_t v59 = v55[2];
    int v60 = *((unsigned __int8 *)v55 + 24);
    unint64_t v61 = *v55;
    uint64_t v62 = HIBYTE(v58) & 0xF;
    if ((v58 & 0x2000000000000000LL) == 0) {
      uint64_t v62 = *v55 & 0xFFFFFFFFFFFFLL;
    }
    if (v62)
    {
      swift_bridgeObjectRetain(v55[1]);
      if (!v60) {
        goto LABEL_20;
      }
    }

    else
    {
      unint64_t v61 = sub_100114020(v55[2], *((_BYTE *)v55 + 24));
      unint64_t v58 = v64;
      if (!v60)
      {
LABEL_20:
        uint64_t v63 = 150LL;
        goto LABEL_21;
      }
    }

    uint64_t v63 = qword_100219B30[v59];
LABEL_21:
    id v52 = sub_10011553C(v63, v61, v58, 0LL, v55[8], v55[9], v55[10], v55[11]);
    swift_bridgeObjectRelease(v58);
    sub_1000CECE0((uint64_t)v55, type metadata accessor for Goldilocks_ErrorInfo.ResultError);
LABEL_22:
    uint64_t v66 = *v25;
    uint64_t v65 = v25[1];
    char v67 = (objc_class *)type metadata accessor for CPLCKPhotosSharedLibraryExitResponse();
    char v68 = (char *)objc_allocWithZone(v67);
    uint64_t v69 = &v68[OBJC_IVAR___CPLCKPhotosSharedLibraryExitResponse_participantUserID];
    *(void *)uint64_t v69 = 0LL;
    *((void *)v69 + 1) = 0xE000000000000000LL;
    uint64_t v70 = &v68[OBJC_IVAR___CPLCKPhotosSharedLibraryExitResponse_error];
    *(void *)&v68[OBJC_IVAR___CPLCKPhotosSharedLibraryExitResponse_error] = 0LL;
    swift_beginAccess(v69, v145, 1LL, 0LL);
    uint64_t v71 = *((void *)v69 + 1);
    *(void *)uint64_t v69 = v66;
    *((void *)v69 + 1) = v65;
    swift_bridgeObjectRetain(v65);
    uint64_t v72 = isa;
    swift_errorRetain(v52);
    uint64_t v73 = v68;
    swift_bridgeObjectRelease(v71);
    *(void *)&v73[OBJC_IVAR___CPLCKPhotosSharedLibraryExitResponse_stagingZoneID] = v72;
    swift_beginAccess(v70, v144, 1LL, 0LL);
    uint64_t v74 = *(void *)v70;
    *(void *)uint64_t v70 = v52;
    uint64_t v75 = v72;
    swift_errorRetain(v52);
    swift_errorRelease(v74);

    v143.receiver = v73;
    v143.super_class = v67;
    id v76 = objc_msgSendSuper2(&v143, "init");
    swift_errorRelease(v52);

    id v77 = v76;
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    unint64_t v79 = *(void *)((v146 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
    unint64_t v78 = *(void *)((v146 & 0xFFFFFFFFFFFFFF8LL) + 0x18);
    if (v79 >= v78 >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v78 > 1, v79 + 1, 1LL);
    }
    uint64_t v80 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v79, v77);
    specialized Array._endMutation()(v80);

    swift_errorRelease(v52);
    uint64_t v40 = v137;
    sub_1000CECE0((uint64_t)v137, type metadata accessor for Goldilocks_ZoneID);
    sub_1000CECE0((uint64_t)v25, type metadata accessor for Goldilocks_ParticipantExitResult);
    v39 += v131;
    uint64_t v36 = v141 - 1;
    uint64_t v37 = v139;
  }

  while (v141 != (char *)1);
  swift_bridgeObjectRelease(v121);
  a3 = v123;
  uint64_t v9 = v122;
LABEL_26:
  id v81 = [(id)objc_opt_self(NSUserDefaults) standardUserDefaults];
  NSString v82 = String._bridgeToObjectiveC()();
  unsigned __int8 v83 = [v81 BOOLForKey:v82];

  uint64_t v84 = (uint64_t)v127 + *(int *)(v124 + 28);
  uint64_t v85 = v126;
  sub_1000CE7B4(v84, v126, &qword_100293C98);
  uint64_t v86 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v138 + 48);
  int v87 = v86(v85, 1LL, v37);
  uint64_t v88 = sub_1000CEDAC(v85, &qword_100293C98);
  if (v87 != 1)
  {
    if ((v83 & 1) == 0)
    {
      uint64_t v99 = v84;
      uint64_t v100 = v125;
      sub_1000CE7B4(v99, v125, &qword_100293C98);
      uint64_t v101 = v86(v100, 1LL, v37);
      if ((_DWORD)v101 == 1)
      {
        *(void *)uint64_t v9 = 0LL;
        *((void *)v9 + 1) = 0xE000000000000000LL;
        *((void *)v9 + 2) = 0LL;
        _BYTE v9[24] = 1;
        *((void *)v9 + 4) = 0LL;
        *((void *)v9 + 5) = 0xE000000000000000LL;
        *((_DWORD *)v9 + 12) = 0;
        *((void *)v9 + 7) = &_swiftEmptyArrayStorage;
        *((void *)v9 + 8) = 0LL;
        *((void *)v9 + 9) = 0xE000000000000000LL;
        *((void *)v9 + 10) = 0LL;
        *((void *)v9 + 11) = 0xE000000000000000LL;
        UnknownStorage.init()(v101);
        v102 = &v9[*(int *)(v37 + 48)];
        uint64_t v103 = type metadata accessor for Goldilocks_ErrorInfo.DatabaseFailure(0LL);
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v103 - 8) + 56LL))(v102, 1LL, 1LL, v103);
        sub_1000CEDAC(v100, &qword_100293C98);
      }

      else
      {
        sub_1000CEC9C(v100, (uint64_t)v9, type metadata accessor for Goldilocks_ErrorInfo.ResultError);
      }

void sub_10011889C(char a1, uint64_t a2, uint64_t a3, objc_class *a4, uint64_t a5, uint64_t a6)
{
  Class isa = a4;
  if (a3)
  {
    NSString v10 = String._bridgeToObjectiveC()();
    if (!isa) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }

  NSString v10 = 0LL;
  if (a4)
  {
LABEL_3:
    sub_1000BED3C(&qword_100294FF0);
    Class isa = Array._bridgeToObjectiveC()().super.isa;
  }

uint64_t sub_100118960(uint64_t a1, void *a2, void (*a3)(uint64_t, id), uint64_t a4)
{
  uint64_t v44 = a3;
  uint64_t v45 = a4;
  uint64_t v42 = a2;
  uint64_t v43 = type metadata accessor for Goldilocks_ErrorInfo.ResultError(0LL);
  uint64_t v5 = *(void *)(v43 - 8);
  __chkstk_darwin(v43);
  uint64_t v7 = (char *)&v42 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = sub_1000BED3C(&qword_100293C98);
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v42 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v42 - v12;
  uint64_t v14 = sub_1000BED3C((uint64_t *)&unk_100295060);
  __chkstk_darwin(v14);
  uint64_t v16 = (char *)&v42 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = type metadata accessor for Goldilocks_ExitMoveBatchErrorFeedbackResponse(0LL);
  uint64_t v18 = *(void *)(v17 - 8);
  __chkstk_darwin(v17);
  uint64_t v20 = (char *)&v42 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_1000CE7B4(a1, (uint64_t)v16, (uint64_t *)&unk_100295060);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1LL, v17) != 1)
  {
    uint64_t v23 = (uint64_t)v11;
    sub_1000CEC9C((uint64_t)v16, (uint64_t)v20, type metadata accessor for Goldilocks_ExitMoveBatchErrorFeedbackResponse);
    uint64_t v24 = (uint64_t)&v20[*(int *)(v17 + 20)];
    sub_1000CE7B4(v24, (uint64_t)v13, &qword_100293C98);
    int v25 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 48);
    uint64_t v26 = v43;
    int v27 = v25(v13, 1LL, v43);
    sub_1000CEDAC((uint64_t)v13, &qword_100293C98);
    if (v27 == 1)
    {
      v44(1LL, 0LL);
      return sub_1000CECE0((uint64_t)v20, type metadata accessor for Goldilocks_ExitMoveBatchErrorFeedbackResponse);
    }

    sub_1000CE7B4(v24, v23, &qword_100293C98);
    uint64_t v28 = v25((char *)v23, 1LL, v26);
    if ((_DWORD)v28 == 1)
    {
      *(void *)uint64_t v7 = 0LL;
      *((void *)v7 + 1) = 0xE000000000000000LL;
      *((void *)v7 + 2) = 0LL;
      _BYTE v7[24] = 1;
      *((void *)v7 + 4) = 0LL;
      *((void *)v7 + 5) = 0xE000000000000000LL;
      *((_DWORD *)v7 + 12) = 0;
      *((void *)v7 + 7) = &_swiftEmptyArrayStorage;
      *((void *)v7 + 8) = 0LL;
      *((void *)v7 + 9) = 0xE000000000000000LL;
      *((void *)v7 + 10) = 0LL;
      *((void *)v7 + 11) = 0xE000000000000000LL;
      UnknownStorage.init()(v28);
      uint64_t v29 = &v7[*(int *)(v26 + 48)];
      uint64_t v30 = type metadata accessor for Goldilocks_ErrorInfo.DatabaseFailure(0LL);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v30 - 8) + 56LL))(v29, 1LL, 1LL, v30);
      sub_1000CEDAC(v23, &qword_100293C98);
    }

    else
    {
      sub_1000CEC9C(v23, (uint64_t)v7, type metadata accessor for Goldilocks_ErrorInfo.ResultError);
    }

    uint64_t v33 = v44;
    unint64_t v35 = *((void *)v7 + 1);
    uint64_t v34 = *((void *)v7 + 2);
    int v36 = v7[24];
    unint64_t v37 = *(void *)v7;
    uint64_t v38 = HIBYTE(v35) & 0xF;
    if ((v35 & 0x2000000000000000LL) == 0) {
      uint64_t v38 = *(void *)v7 & 0xFFFFFFFFFFFFLL;
    }
    if (v38)
    {
      swift_bridgeObjectRetain(*((void *)v7 + 1));
      if (v36)
      {
LABEL_15:
        uint64_t v39 = qword_100219B30[v34];
LABEL_18:
        id v41 = sub_10011553C( v39,  v37,  v35,  0LL,  *((void *)v7 + 8),  *((void *)v7 + 9),  *((void *)v7 + 10),  *((void *)v7 + 11));
        swift_bridgeObjectRelease(v35);
        sub_1000CECE0((uint64_t)v7, type metadata accessor for Goldilocks_ErrorInfo.ResultError);
        v33(0LL, v41);
        swift_errorRelease(v41);
        return sub_1000CECE0((uint64_t)v20, type metadata accessor for Goldilocks_ExitMoveBatchErrorFeedbackResponse);
      }
    }

    else
    {
      unint64_t v37 = sub_100114020(*((void *)v7 + 2), v7[24]);
      unint64_t v35 = v40;
      if (v36) {
        goto LABEL_15;
      }
    }

    uint64_t v39 = 150LL;
    goto LABEL_18;
  }

  sub_1000CEDAC((uint64_t)v16, (uint64_t *)&unk_100295060);
  uint64_t v21 = v42;
  if (v42) {
    id v22 = v42;
  }
  else {
    id v22 = sub_10011553C( 150LL,  0xD00000000000001ALL,  0x80000001001D3830LL,  0LL,  0LL,  0xE000000000000000LL,  0LL,  0xE000000000000000LL);
  }
  uint64_t v31 = v44;
  swift_errorRetain(v21);
  v31(0LL, v22);
  return swift_errorRelease(v22);
}

uint64_t sub_100118E64(uint64_t a1, void *a2, uint64_t (*a3)(uint64_t, id))
{
  uint64_t v6 = type metadata accessor for Goldilocks_ExitStatusFeedbackResponse(0LL);
  if (a2) {
    id v7 = a2;
  }
  else {
    id v7 = sub_10011553C( 150LL,  0xD00000000000001ALL,  0x80000001001D3830LL,  0LL,  0LL,  0xE000000000000000LL,  0LL,  0xE000000000000000LL);
  }
  swift_errorRetain(a2);
  a3(0LL, v7);
  return swift_errorRelease(v7);
}

id CPLCKPhotosSharedLibraryOperation.init()()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CPLCKPhotosSharedLibraryOperation();
  return objc_msgSendSuper2(&v2, "init");
}

id CPLCKPhotosSharedLibraryOperation.__deallocating_deinit()
{
  return sub_100119068(type metadata accessor for CPLCKPhotosSharedLibraryOperation);
}

id sub_100119068(uint64_t (*a1)(void))
{
  v3.receiver = v1;
  v3.super_class = (Class)a1();
  return objc_msgSendSuper2(&v3, "dealloc");
}

unint64_t sub_100119098(uint64_t a1, uint64_t a2)
{
  Swift::Int v5 = Hasher._finalize()();
  return sub_10011912C(a1, a2, v5);
}

unint64_t sub_1001190FC(uint64_t a1)
{
  uint64_t v2 = v1;
  Swift::Int v4 = NSObject._rawHashValue(seed:)(*(void *)(v2 + 40));
  return sub_10011920C(a1, v4);
}

unint64_t sub_10011912C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1LL << *(_BYTE *)(v3 + 32);
  unint64_t v6 = a3 & ~v5;
  if (((*(void *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) != 0)
  {
    uint64_t v9 = *(void *)(v3 + 48);
    uint64_t v10 = (void *)(v9 + 16 * v6);
    uint64_t v11 = v10[1];
    BOOL v12 = *v10 == a1 && v11 == a2;
    if (!v12 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v10, v11, a1, a2, 0LL) & 1) == 0)
    {
      uint64_t v13 = ~v5;
      do
      {
        unint64_t v6 = (v6 + 1) & v13;
        if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) == 0) {
          break;
        }
        uint64_t v14 = (void *)(v9 + 16 * v6);
        uint64_t v15 = v14[1];
        BOOL v16 = *v14 == a1 && v15 == a2;
      }

      while (!v16 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v14, v15, a1, a2, 0LL) & 1) == 0);
    }
  }

  return v6;
}

unint64_t sub_10011920C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2 + 64;
  uint64_t v4 = -1LL << *(_BYTE *)(v2 + 32);
  unint64_t i = a2 & ~v4;
  if (((*(void *)(v2 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFF8LL)) >> i) & 1) != 0)
  {
    sub_1000CE284(0LL, &qword_100291F00, &OBJC_CLASS___CKRecordID_ptr);
    id v6 = *(id *)(*(void *)(v2 + 48) + 8 * i);
    char v7 = static NSObject.== infix(_:_:)();

    if ((v7 & 1) == 0)
    {
      uint64_t v8 = ~v4;
      for (unint64_t i = (i + 1) & v8; ((*(void *)(v3 + ((i >> 3) & 0xFFFFFFFFFFFFF8LL)) >> i) & 1) != 0; unint64_t i = (i + 1) & v8)
      {
        id v9 = *(id *)(*(void *)(v2 + 48) + 8 * i);
        char v10 = static NSObject.== infix(_:_:)();

        if ((v10 & 1) != 0) {
          break;
        }
      }
    }
  }

  return i;
}

Swift::Int sub_100119324(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  if (*(void *)(*v2 + 24) <= a1) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = *(void *)(*v2 + 24);
  }
  sub_1000BED3C((uint64_t *)&unk_100295118);
  char v39 = a2;
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  uint64_t v8 = v7;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_43;
  }
  uint64_t v9 = 1LL << *(_BYTE *)(v5 + 32);
  uint64_t v38 = v5 + 64;
  if (v9 < 64) {
    uint64_t v10 = ~(-1LL << v9);
  }
  else {
    uint64_t v10 = -1LL;
  }
  unint64_t v11 = v10 & *(void *)(v5 + 64);
  int v36 = v3;
  int64_t v37 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v12 = v7 + 64;
  Swift::Int result = swift_retain(v5);
  int64_t v14 = 0LL;
  while (1)
  {
    if (v11)
    {
      unint64_t v20 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v21 = v20 | (v14 << 6);
      goto LABEL_34;
    }

    int64_t v22 = v14 + 1;
    if (__OFADD__(v14, 1LL))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }

    if (v22 >= v37) {
      break;
    }
    uint64_t v23 = (void *)(v5 + 64);
    unint64_t v24 = *(void *)(v38 + 8 * v22);
    ++v14;
    if (!v24)
    {
      int64_t v14 = v22 + 1;
      if (v22 + 1 >= v37) {
        goto LABEL_36;
      }
      unint64_t v24 = *(void *)(v38 + 8 * v14);
      if (!v24)
      {
        int64_t v25 = v22 + 2;
        if (v25 >= v37)
        {
LABEL_36:
          swift_release(v5);
          uint64_t v3 = v36;
          if ((v39 & 1) == 0) {
            goto LABEL_43;
          }
          goto LABEL_39;
        }

        unint64_t v24 = *(void *)(v38 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            int64_t v14 = v25 + 1;
            if (__OFADD__(v25, 1LL)) {
              goto LABEL_45;
            }
            if (v14 >= v37) {
              goto LABEL_36;
            }
            unint64_t v24 = *(void *)(v38 + 8 * v14);
            ++v25;
            if (v24) {
              goto LABEL_33;
            }
          }
        }

        int64_t v14 = v25;
      }
    }

Swift::Int sub_100119630(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  if (*(void *)(*v2 + 24) <= a1) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = *(void *)(*v2 + 24);
  }
  sub_1000BED3C((uint64_t *)&unk_100295128);
  char v39 = a2;
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  uint64_t v8 = v7;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_43;
  }
  uint64_t v9 = 1LL << *(_BYTE *)(v5 + 32);
  int64_t v37 = v3;
  uint64_t v38 = v5 + 64;
  if (v9 < 64) {
    uint64_t v10 = ~(-1LL << v9);
  }
  else {
    uint64_t v10 = -1LL;
  }
  unint64_t v11 = v10 & *(void *)(v5 + 64);
  int64_t v12 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v13 = v7 + 64;
  Swift::Int result = swift_retain(v5);
  int64_t v15 = 0LL;
  while (1)
  {
    if (v11)
    {
      unint64_t v21 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v22 = v21 | (v15 << 6);
      goto LABEL_34;
    }

    int64_t v23 = v15 + 1;
    if (__OFADD__(v15, 1LL))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }

    if (v23 >= v12) {
      break;
    }
    unint64_t v24 = (void *)(v5 + 64);
    unint64_t v25 = *(void *)(v38 + 8 * v23);
    ++v15;
    if (!v25)
    {
      int64_t v15 = v23 + 1;
      if (v23 + 1 >= v12) {
        goto LABEL_36;
      }
      unint64_t v25 = *(void *)(v38 + 8 * v15);
      if (!v25)
      {
        int64_t v26 = v23 + 2;
        if (v26 >= v12)
        {
LABEL_36:
          swift_release(v5);
          uint64_t v3 = v37;
          if ((v39 & 1) == 0) {
            goto LABEL_43;
          }
          goto LABEL_39;
        }

        unint64_t v25 = *(void *)(v38 + 8 * v26);
        if (!v25)
        {
          while (1)
          {
            int64_t v15 = v26 + 1;
            if (__OFADD__(v26, 1LL)) {
              goto LABEL_45;
            }
            if (v15 >= v12) {
              goto LABEL_36;
            }
            unint64_t v25 = *(void *)(v38 + 8 * v15);
            ++v26;
            if (v25) {
              goto LABEL_33;
            }
          }
        }

        int64_t v15 = v26;
      }
    }

Swift::Int sub_100119914(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for ResponseItem(0LL);
  uint64_t v43 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = *v3;
  if (*(void *)(*v3 + 24) > a1) {
    a1 = *(void *)(*v3 + 24);
  }
  sub_1000BED3C(&qword_100295138);
  int v44 = a2;
  uint64_t v10 = static _DictionaryStorage.resize(original:capacity:move:)(v9, a1, a2);
  uint64_t v11 = v10;
  if (!*(void *)(v9 + 16)) {
    goto LABEL_43;
  }
  uint64_t v12 = 1LL << *(_BYTE *)(v9 + 32);
  uint64_t v13 = *(void *)(v9 + 64);
  uint64_t v42 = (void *)(v9 + 64);
  if (v12 < 64) {
    uint64_t v14 = ~(-1LL << v12);
  }
  else {
    uint64_t v14 = -1LL;
  }
  unint64_t v15 = v14 & v13;
  unint64_t v40 = v3;
  int64_t v41 = (unint64_t)(v12 + 63) >> 6;
  uint64_t v16 = v10 + 64;
  Swift::Int result = swift_retain(v9);
  int64_t v18 = 0LL;
  while (1)
  {
    if (v15)
    {
      unint64_t v21 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      unint64_t v22 = v21 | (v18 << 6);
      goto LABEL_24;
    }

    int64_t v23 = v18 + 1;
    if (__OFADD__(v18, 1LL))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }

    if (v23 >= v41) {
      break;
    }
    unint64_t v24 = v42;
    unint64_t v25 = v42[v23];
    ++v18;
    if (!v25)
    {
      int64_t v18 = v23 + 1;
      if (v23 + 1 >= v41) {
        goto LABEL_36;
      }
      unint64_t v25 = v42[v18];
      if (!v25)
      {
        int64_t v26 = v23 + 2;
        if (v26 >= v41)
        {
LABEL_36:
          swift_release(v9);
          uint64_t v3 = v40;
          if ((v44 & 1) == 0) {
            goto LABEL_43;
          }
          goto LABEL_39;
        }

        unint64_t v25 = v42[v26];
        if (!v25)
        {
          while (1)
          {
            int64_t v18 = v26 + 1;
            if (__OFADD__(v26, 1LL)) {
              goto LABEL_45;
            }
            if (v18 >= v41) {
              goto LABEL_36;
            }
            unint64_t v25 = v42[v18];
            ++v26;
            if (v25) {
              goto LABEL_23;
            }
          }
        }

        int64_t v18 = v26;
      }
    }

uint64_t sub_100119C94(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  if (*(void *)(*v2 + 24) <= a1) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = *(void *)(*v2 + 24);
  }
  sub_1000BED3C(&qword_100295018);
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  uint64_t v8 = v7;
  if (*(void *)(v5 + 16))
  {
    unint64_t v34 = v3;
    uint64_t v9 = 1LL << *(_BYTE *)(v5 + 32);
    unint64_t v36 = (void *)(v5 + 64);
    if (v9 < 64) {
      uint64_t v10 = ~(-1LL << v9);
    }
    else {
      uint64_t v10 = -1LL;
    }
    unint64_t v11 = v10 & *(void *)(v5 + 64);
    int64_t v35 = (unint64_t)(v9 + 63) >> 6;
    uint64_t v12 = v7 + 64;
    uint64_t result = swift_retain(v5);
    int64_t v14 = 0LL;
    while (1)
    {
      if (v11)
      {
        unint64_t v17 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        unint64_t v18 = v17 | (v14 << 6);
      }

      else
      {
        int64_t v19 = v14 + 1;
        if (__OFADD__(v14, 1LL))
        {
LABEL_43:
          __break(1u);
LABEL_44:
          __break(1u);
          return result;
        }

        if (v19 >= v35) {
          goto LABEL_37;
        }
        unint64_t v20 = v36[v19];
        ++v14;
        if (!v20)
        {
          int64_t v14 = v19 + 1;
          if (v19 + 1 >= v35) {
            goto LABEL_37;
          }
          unint64_t v20 = v36[v14];
          if (!v20)
          {
            int64_t v21 = v19 + 2;
            if (v21 >= v35)
            {
LABEL_37:
              swift_release(v5);
              uint64_t v3 = v34;
              if ((a2 & 1) != 0)
              {
                uint64_t v33 = 1LL << *(_BYTE *)(v5 + 32);
                if (v33 >= 64) {
                  bzero(v36, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
                }
                else {
                  *unint64_t v36 = -1LL << v33;
                }
                *(void *)(v5 + 16) = 0LL;
              }

              break;
            }

            unint64_t v20 = v36[v21];
            if (!v20)
            {
              while (1)
              {
                int64_t v14 = v21 + 1;
                if (__OFADD__(v21, 1LL)) {
                  goto LABEL_44;
                }
                if (v14 >= v35) {
                  goto LABEL_37;
                }
                unint64_t v20 = v36[v14];
                ++v21;
                if (v20) {
                  goto LABEL_24;
                }
              }
            }

            int64_t v14 = v21;
          }
        }

void sub_100119F90(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = *v4;
  unint64_t v12 = sub_100119098(a2, a3);
  uint64_t v13 = *(void *)(v10 + 16);
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }

  char v16 = v11;
  uint64_t v17 = *(void *)(v10 + 24);
  if (v17 >= v15 && (a4 & 1) != 0) {
    goto LABEL_7;
  }
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    sub_10011A3F4();
LABEL_7:
    unint64_t v18 = (void *)*v5;
    if ((v16 & 1) != 0)
    {
LABEL_8:
      uint64_t v19 = v18[7];

      *(void *)(v19 + 8 * v12) = a1;
      return;
    }

id sub_10011A0EC(uint64_t a1, uint64_t a2, void *a3, char a4)
{
  uint64_t v5 = v4;
  uint64_t v9 = *v4;
  unint64_t v11 = sub_1001190FC((uint64_t)a3);
  uint64_t v12 = *(void *)(v9 + 16);
  BOOL v13 = (v10 & 1) == 0;
  uint64_t v14 = v12 + v13;
  if (__OFADD__(v12, v13))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }

  char v15 = v10;
  uint64_t v16 = *(void *)(v9 + 24);
  if (v16 >= v14 && (a4 & 1) != 0) {
    goto LABEL_7;
  }
  if (v16 >= v14 && (a4 & 1) == 0)
  {
    sub_10011A5A4();
LABEL_7:
    uint64_t v17 = (void *)*v5;
    if ((v15 & 1) != 0)
    {
LABEL_8:
      unint64_t v18 = (void *)(v17[7] + 16 * v11);
      id result = (id)swift_bridgeObjectRelease(v18[1]);
      void *v18 = a1;
      v18[1] = a2;
      return result;
    }

_OWORD *sub_10011A25C(_OWORD *a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = (void **)v4;
  char v10 = (void *)*v4;
  unint64_t v12 = sub_100119098(a2, a3);
  uint64_t v13 = v10[2];
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }

  else
  {
    char v16 = v11;
    uint64_t v17 = v10[3];
    if (v17 >= v15 && (a4 & 1) != 0)
    {
LABEL_7:
      unint64_t v18 = *v5;
      if ((v16 & 1) != 0)
      {
LABEL_8:
        uint64_t v19 = (void *)(v18[7] + 32 * v12);
        sub_10011C5FC(v19);
        return sub_10011C5EC(a1, v19);
      }

      goto LABEL_11;
    }

    if (v17 >= v15 && (a4 & 1) == 0)
    {
      sub_10011A99C();
      goto LABEL_7;
    }

    sub_100119C94(v15, a4 & 1);
    unint64_t v21 = sub_100119098(a2, a3);
    if ((v16 & 1) == (v22 & 1))
    {
      unint64_t v12 = v21;
      unint64_t v18 = *v5;
      if ((v16 & 1) != 0) {
        goto LABEL_8;
      }
LABEL_11:
      sub_10011A38C(v12, a2, a3, a1, v18);
      return (_OWORD *)swift_bridgeObjectRetain(a3);
    }
  }

  id result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

_OWORD *sub_10011A38C(unint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4, void *a5)
{
  a5[(a1 >> 6) + 8] |= 1LL << a1;
  uint64_t v6 = (void *)(a5[6] + 16 * a1);
  *uint64_t v6 = a2;
  v6[1] = a3;
  id result = sub_10011C5EC(a4, (_OWORD *)(a5[7] + 32 * a1));
  uint64_t v8 = a5[2];
  BOOL v9 = __OFADD__(v8, 1LL);
  uint64_t v10 = v8 + 1;
  if (v9) {
    __break(1u);
  }
  else {
    a5[2] = v10;
  }
  return result;
}

id sub_10011A3F4()
{
  uint64_t v1 = v0;
  sub_1000BED3C((uint64_t *)&unk_100295118);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (id)swift_release(v2);
    *uint64_t v1 = v4;
    return result;
  }

  id result = (id)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }

void *sub_10011A5A4()
{
  uint64_t v1 = v0;
  sub_1000BED3C((uint64_t *)&unk_100295128);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (void *)swift_release(v2);
    *uint64_t v1 = v4;
    return result;
  }

  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v24 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v24 >= v13) {
      goto LABEL_26;
    }
    unint64_t v25 = *(void *)(v6 + 8 * v24);
    ++v9;
    if (!v25)
    {
      int64_t v9 = v24 + 1;
      if (v24 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v25 = *(void *)(v6 + 8 * v9);
      if (!v25) {
        break;
      }
    }

void *sub_10011A758()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for ResponseItem(0LL);
  uint64_t v29 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v26 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_1000BED3C(&qword_100295138);
  uint64_t v5 = *v0;
  uint64_t v6 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16))
  {
    id result = (void *)swift_release(v5);
LABEL_28:
    *uint64_t v1 = v7;
    return result;
  }

  int64_t v26 = v1;
  id result = (void *)(v6 + 64);
  unint64_t v9 = (unint64_t)((1LL << *(_BYTE *)(v7 + 32)) + 63) >> 6;
  uint64_t v27 = v5 + 64;
  int64_t v11 = 0LL;
  *(void *)(v7 + 16) = *(void *)(v5 + 16);
  uint64_t v12 = 1LL << *(_BYTE *)(v5 + 32);
  uint64_t v13 = -1LL;
  if (v12 < 64) {
    uint64_t v13 = ~(-1LL << v12);
  }
  unint64_t v14 = v13 & *(void *)(v5 + 64);
  int64_t v28 = (unint64_t)(v12 + 63) >> 6;
  while (1)
  {
    if (v14)
    {
      unint64_t v15 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      unint64_t v16 = v15 | (v11 << 6);
      goto LABEL_12;
    }

    int64_t v23 = v11 + 1;
    if (__OFADD__(v11, 1LL))
    {
      __break(1u);
      goto LABEL_30;
    }

    if (v23 >= v28) {
      goto LABEL_26;
    }
    unint64_t v24 = *(void *)(v27 + 8 * v23);
    ++v11;
    if (!v24)
    {
      int64_t v11 = v23 + 1;
      if (v23 + 1 >= v28) {
        goto LABEL_26;
      }
      unint64_t v24 = *(void *)(v27 + 8 * v11);
      if (!v24) {
        break;
      }
    }

void *sub_10011A99C()
{
  uint64_t v1 = v0;
  sub_1000BED3C(&qword_100295018);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    id result = (void *)swift_release(v2);
LABEL_28:
    *uint64_t v1 = v4;
    return result;
  }

  int64_t v25 = v1;
  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_30;
    }

    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }

size_t sub_10011AB80(size_t a1, int64_t a2, char a3)
{
  size_t result = sub_10011AE04( a1,  a2,  a3,  (void *)*v3,  &qword_100295110,  (uint64_t (*)(void))&type metadata accessor for Ckcode_RecordTransport);
  *uint64_t v3 = result;
  return result;
}

char *sub_10011ABAC(char *a1, int64_t a2, char a3)
{
  size_t result = sub_10011AC10(a1, a2, a3, *v3);
  *uint64_t v3 = result;
  return result;
}

char *sub_10011ABC8(char *a1, int64_t a2, char a3)
{
  size_t result = sub_10011AD10(a1, a2, a3, *v3);
  *uint64_t v3 = result;
  return result;
}

size_t sub_10011ABE4(size_t a1, int64_t a2, char a3)
{
  size_t result = sub_10011AE04( a1,  a2,  a3,  (void *)*v3,  &qword_100295078,  type metadata accessor for Goldilocks_ExitMoveBatchFeedbackItem);
  *uint64_t v3 = result;
  return result;
}

char *sub_10011AC10(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_1000BED3C(&qword_100291F50);
    uint64_t v11 = (char *)swift_allocObject(v10, 16 * v9 + 32, 7LL);
    int64_t v12 = j__malloc_size(v11);
    uint64_t v13 = v12 - 32;
    if (v12 < 32) {
      uint64_t v13 = v12 - 17;
    }
    *((void *)v11 + 2) = v8;
    *((void *)v11 + 3) = 2 * (v13 >> 4);
  }

  else
  {
    uint64_t v11 = (char *)&_swiftEmptyArrayStorage;
  }

  unint64_t v14 = v11 + 32;
  unint64_t v15 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[16 * v8]) {
      memmove(v14, v15, 16 * v8);
    }
    *((void *)a4 + 2) = 0LL;
  }

  else
  {
    swift_arrayInitWithCopy(v14, v15, v8, &type metadata for String);
  }

  swift_release(a4);
  return v11;
}

char *sub_10011AD10(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_1000BED3C(&qword_100295108);
    uint64_t v11 = (char *)swift_allocObject(v10, 16 * v9 + 32, 7LL);
    int64_t v12 = j__malloc_size(v11);
    uint64_t v13 = v12 - 32;
    if (v12 < 32) {
      uint64_t v13 = v12 - 17;
    }
    *((void *)v11 + 2) = v8;
    *((void *)v11 + 3) = 2 * (v13 >> 4);
  }

  else
  {
    uint64_t v11 = (char *)&_swiftEmptyArrayStorage;
  }

  unint64_t v14 = v11 + 32;
  unint64_t v15 = a4 + 32;
  size_t v16 = 16 * v8;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[v16]) {
      memmove(v14, v15, v16);
    }
    *((void *)a4 + 2) = 0LL;
  }

  else
  {
    memcpy(v14, v15, v16);
  }

  swift_release(a4);
  return v11;
}

size_t sub_10011AE04( size_t result, int64_t a2, char a3, void *a4, uint64_t *a5, uint64_t (*a6)(void))
{
  char v8 = result;
  if ((a3 & 1) != 0)
  {
    unint64_t v9 = a4[3];
    int64_t v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000LL < 0)
      {
LABEL_30:
        __break(1u);
        return result;
      }

      int64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v10 = a2;
  }

  uint64_t v11 = a4[2];
  if (v10 <= v11) {
    uint64_t v12 = a4[2];
  }
  else {
    uint64_t v12 = v10;
  }
  if (!v12)
  {
    uint64_t v18 = &_swiftEmptyArrayStorage;
    goto LABEL_19;
  }

  uint64_t v13 = sub_1000BED3C(a5);
  uint64_t v14 = *(void *)(a6(0LL) - 8);
  uint64_t v15 = *(void *)(v14 + 72);
  uint64_t v16 = *(unsigned __int8 *)(v14 + 80);
  uint64_t v17 = (v16 + 32) & ~v16;
  uint64_t v18 = (void *)swift_allocObject(v13, v17 + v15 * v12, v16 | 7);
  size_t result = j__malloc_size(v18);
  if (!v15)
  {
    __break(1u);
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }

  if (result - v17 == 0x8000000000000000LL && v15 == -1) {
    goto LABEL_29;
  }
  v18[2] = v11;
  v18[3] = 2 * ((uint64_t)(result - v17) / v15);
LABEL_19:
  uint64_t v20 = a6(0LL);
  uint64_t v21 = *(void *)(v20 - 8);
  unint64_t v22 = (*(unsigned __int8 *)(v21 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80);
  unint64_t v23 = (char *)v18 + v22;
  int64_t v24 = (char *)a4 + v22;
  if ((v8 & 1) != 0)
  {
    if (v18 < a4 || v23 >= &v24[*(void *)(v21 + 72) * v11])
    {
      swift_arrayInitWithTakeFrontToBack(v23, v24, v11, v20);
    }

    else if (v18 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }

    a4[2] = 0LL;
  }

  else
  {
    swift_arrayInitWithCopy(v23, v24, v11, v20);
  }

  swift_release(a4);
  return (size_t)v18;
}

uint64_t sub_10011AF78(uint64_t result)
{
  switch(result)
  {
    case 0LL:
      return result;
    case 1LL:
      size_t result = 2LL;
      break;
    case 2LL:
      size_t result = 3LL;
      break;
    case 3LL:
      size_t result = 4LL;
      break;
    case 4LL:
      size_t result = 5LL;
      break;
    case 5LL:
      size_t result = 6LL;
      break;
    default:
      v7[1] = v2;
      v7[2] = v1;
      v7[3] = v3;
      v7[4] = v4;
      uint64_t v5 = result;
      type metadata accessor for CPLCKSharedLibraryExitStage(0LL);
      v7[0] = v5;
      size_t result = _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)(v6, v7, v6, &type metadata for Int);
      __break(1u);
      break;
  }

  return result;
}

unint64_t sub_10011B02C(unint64_t result)
{
  if (result >= 6)
  {
    v7[1] = v2;
    v7[2] = v1;
    v7[3] = v3;
    v7[4] = v4;
    unint64_t v5 = result;
    type metadata accessor for CPLCKSharedLibraryExitStatus(0LL);
    v7[0] = v5;
    size_t result = _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)(v6, v7, v6, &type metadata for Int);
    __break(1u);
  }

  return result;
}

uint64_t _s22CloudKitImplementation33CPLCKPhotosSharedLibraryOperationC021silentMoverServerRampG004withG2ID17completionHandlerSo010CKDatabaseG0CSSSg_ySb_AIs5Int64VSbs5Int32VS6bs5Error_pSgtctFZ_0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v30 = a3;
  uint64_t v31 = a4;
  uint64_t v6 = sub_1000BED3C(&qword_1002950D8);
  uint64_t v28 = *(void *)(v6 - 8);
  uint64_t v29 = v6;
  __chkstk_darwin(v6);
  char v8 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = sub_1000BED3C((uint64_t *)&unk_1002950E0);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for Goldilocks_SilentMoverRampingRequest(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v28 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = __chkstk_darwin(v14);
  uint64_t v19 = (uint64_t *)((char *)&v28 - v18);
  __chkstk_darwin(v17);
  uint64_t v21 = (char *)&v28 - v20;
  *uint64_t v19 = 0LL;
  v19[1] = 0xE000000000000000LL;
  uint64_t v22 = swift_bridgeObjectRetain(a2);
  UnknownStorage.init()(v22);
  uint64_t v33 = a1;
  uint64_t v34 = a2;
  sub_1000BD35C( &qword_100293AA0,  type metadata accessor for Goldilocks_SilentMoverRampingRequest,  (uint64_t)&protocol conformance descriptor for Goldilocks_SilentMoverRampingRequest);
  static Message.with(_:)(sub_10011C77C, v32);
  sub_1000CECE0((uint64_t)v19, type metadata accessor for Goldilocks_SilentMoverRampingRequest);
  swift_bridgeObjectRelease(a2);
  sub_1000CEC9C((uint64_t)v16, (uint64_t)v19, type metadata accessor for Goldilocks_SilentMoverRampingRequest);
  sub_1000CEC9C((uint64_t)v19, (uint64_t)v21, type metadata accessor for Goldilocks_SilentMoverRampingRequest);
  sub_1000CEC58((uint64_t)v21, (uint64_t)v11, type metadata accessor for Goldilocks_SilentMoverRampingRequest);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v11, 0LL, 1LL, v12);
  (*(void (**)(char *, void, uint64_t))(v28 + 104))( v8,  enum case for CodeOperation.DestinationServer.default<A, B>(_:),  v29);
  id v23 = objc_allocWithZone((Class)sub_1000BED3C((uint64_t *)&unk_1002950F0));
  uint64_t v24 = CodeOperation.init(service:functionName:request:destinationServer:)( 0xD000000000000015LL,  0x80000001001D3A50LL,  0xD000000000000019LL,  0x80000001001D2CD0LL,  v11,  v8);
  uint64_t v25 = swift_allocObject(&unk_1002456E8, 32LL, 7LL);
  *(void *)(v25 + 16) = v30;
  uint64_t v26 = v31;
  *(void *)(v25 + 24) = v31;
  swift_retain(v26);
  dispatch thunk of CodeOperation.codeOperationCompletionBlock.setter(sub_10011C794, v25);
  sub_1000CECE0((uint64_t)v21, type metadata accessor for Goldilocks_SilentMoverRampingRequest);
  return v24;
}

void _s22CloudKitImplementation33CPLCKPhotosSharedLibraryOperationC18getNextBatchToMove4with9batchSize17completionHandlerSo010CKDatabaseG0CSo14CKRecordZoneIDC_SiySaySSGSg_SSSgANSbs5Error_pSgtctFZ_0( void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v41 = a3;
  uint64_t v42 = a4;
  uint64_t v39 = sub_1000BED3C((uint64_t *)&unk_1002950B0);
  uint64_t v37 = *(void *)(v39 - 8);
  __chkstk_darwin(v39);
  unint64_t v40 = (char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = sub_1000BED3C(&qword_100293AD8);
  __chkstk_darwin(v7);
  uint64_t v38 = (uint64_t)&v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for Goldilocks_ZoneID(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for Goldilocks_ExitMoveBatchRequest(0LL);
  uint64_t v36 = *(void *)(v13 - 8);
  uint64_t v14 = __chkstk_darwin(v13);
  int64_t v35 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v14);
  uint64_t v17 = (char *)&v34 - v16;
  id v18 = [a1 zoneName];
  uint64_t v34 = static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
  uint64_t v20 = v19;

  id v21 = [a1 ownerName];
  uint64_t v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(v21);
  uint64_t v24 = v23;

  if (a2 < (uint64_t)0xFFFFFFFF80000000LL)
  {
    __break(1u);
  }

  else if (a2 <= 0x7FFFFFFF)
  {
    *(void *)uint64_t v17 = 0LL;
    *((void *)v17 + 1) = 0xE000000000000000LL;
    *((_DWORD *)v17 + 4) = 0;
    UnknownStorage.init()(v25);
    uint64_t v26 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56))( &v17[*(int *)(v13 + 28)],  1LL,  1LL,  v9);
    __chkstk_darwin(v26);
    *(&v34 - 4) = v34;
    *(&v34 - 3) = v20;
    *(&v34 - 2) = v22;
    *(&v34 - 1) = v24;
    sub_1000BD35C( &qword_100293CD0,  type metadata accessor for Goldilocks_ZoneID,  (uint64_t)&protocol conformance descriptor for Goldilocks_ZoneID);
    static Message.with(_:)(sub_10011C7F0, &v34 - 6);
    swift_bridgeObjectRelease(v24);
    uint64_t v27 = swift_bridgeObjectRelease(v20);
    __chkstk_darwin(v27);
    *(&v34 - 4) = (uint64_t)v12;
    *((_DWORD *)&v34 - 6) = a2;
    sub_1000BD35C( &qword_1002950C0,  type metadata accessor for Goldilocks_ExitMoveBatchRequest,  (uint64_t)&protocol conformance descriptor for Goldilocks_ExitMoveBatchRequest);
    *(&v34 - 2) = 0LL;
    *(&v34 - 1) = 0LL;
    uint64_t v28 = (uint64_t)v35;
    static Message.with(_:)(sub_10011C804, &v34 - 6);
    sub_1000CECE0((uint64_t)v17, type metadata accessor for Goldilocks_ExitMoveBatchRequest);
    sub_1000CECE0((uint64_t)v12, type metadata accessor for Goldilocks_ZoneID);
    sub_1000CEC9C(v28, (uint64_t)v17, type metadata accessor for Goldilocks_ExitMoveBatchRequest);
    uint64_t v29 = v38;
    sub_1000CEC58((uint64_t)v17, v38, type metadata accessor for Goldilocks_ExitMoveBatchRequest);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v29, 0LL, 1LL, v13);
    uint64_t v30 = v40;
    (*(void (**)(char *, void, uint64_t))(v37 + 104))( v40,  enum case for CodeOperation.DestinationServer.default<A, B>(_:),  v39);
    id v31 = objc_allocWithZone((Class)sub_1000BED3C(&qword_1002950C8));
    CodeOperation.init(service:functionName:request:destinationServer:)( 0xD000000000000015LL,  0x80000001001D3A50LL,  0x65766F4D74697865LL,  0xED00006863746142LL,  v29,  v30);
    uint64_t v32 = swift_allocObject(&unk_1002456C0, 32LL, 7LL);
    *(void *)(v32 + 16) = v41;
    uint64_t v33 = v42;
    *(void *)(v32 + 24) = v42;
    swift_retain(v33);
    dispatch thunk of CodeOperation.codeOperationCompletionBlock.setter(sub_10011C774, v32);
    sub_1000CECE0((uint64_t)v17, type metadata accessor for Goldilocks_ExitMoveBatchRequest);
    return;
  }

  __break(1u);
}

uint64_t _s22CloudKitImplementation33CPLCKPhotosSharedLibraryOperationC09moveBatchefG04with9batchSize11operationID17completionHandlerSo010CKDatabaseG0CSo012CKRecordZoneN0C_s5Int32VSSSgySb_SbA2Os5Int64VSaySSGSgs5Error_pSgtctFZ_0( void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v47 = a5;
  uint64_t v48 = a6;
  uint64_t v39 = a4;
  uint64_t v42 = a3;
  int v41 = a2;
  uint64_t v7 = sub_1000BED3C((uint64_t *)&unk_1002950B0);
  uint64_t v45 = *(void *)(v7 - 8);
  uint64_t v46 = v7;
  __chkstk_darwin(v7);
  int v44 = (char *)&v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = sub_1000BED3C(&qword_100293AD8);
  __chkstk_darwin(v9);
  uint64_t v43 = (uint64_t)&v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for Goldilocks_ZoneID(0LL);
  uint64_t v37 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v37 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = type metadata accessor for Goldilocks_ExitMoveBatchRequest(0LL);
  uint64_t v40 = *(void *)(v14 - 8);
  uint64_t v15 = __chkstk_darwin(v14);
  uint64_t v38 = (char *)&v37 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v15);
  id v18 = (char *)&v37 - v17;
  id v19 = [a1 zoneName];
  uint64_t v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
  uint64_t v22 = v21;

  id v23 = [a1 ownerName];
  uint64_t v24 = static String._unconditionallyBridgeFromObjectiveC(_:)(v23);
  uint64_t v26 = v25;

  *(void *)id v18 = 0LL;
  *((void *)v18 + 1) = 0xE000000000000000LL;
  *((_DWORD *)v18 + 4) = 0;
  uint64_t v27 = v39;
  uint64_t v28 = swift_bridgeObjectRetain(v39);
  UnknownStorage.init()(v28);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v37 + 56))(&v18[*(int *)(v14 + 28)], 1LL, 1LL, v11);
  uint64_t v55 = v20;
  uint64_t v56 = v22;
  uint64_t v57 = v24;
  uint64_t v58 = v26;
  sub_1000BD35C( &qword_100293CD0,  type metadata accessor for Goldilocks_ZoneID,  (uint64_t)&protocol conformance descriptor for Goldilocks_ZoneID);
  static Message.with(_:)(sub_10011C7F0, v54);
  swift_bridgeObjectRelease(v26);
  swift_bridgeObjectRelease(v22);
  uint64_t v50 = v13;
  int v51 = v41;
  uint64_t v52 = v42;
  uint64_t v53 = v27;
  sub_1000BD35C( &qword_1002950C0,  type metadata accessor for Goldilocks_ExitMoveBatchRequest,  (uint64_t)&protocol conformance descriptor for Goldilocks_ExitMoveBatchRequest);
  uint64_t v29 = (uint64_t)v38;
  static Message.with(_:)(sub_10011C74C, v49);
  sub_1000CECE0((uint64_t)v18, type metadata accessor for Goldilocks_ExitMoveBatchRequest);
  swift_bridgeObjectRelease(v27);
  sub_1000CECE0((uint64_t)v13, type metadata accessor for Goldilocks_ZoneID);
  sub_1000CEC9C(v29, (uint64_t)v18, type metadata accessor for Goldilocks_ExitMoveBatchRequest);
  uint64_t v30 = v43;
  sub_1000CEC58((uint64_t)v18, v43, type metadata accessor for Goldilocks_ExitMoveBatchRequest);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v40 + 56))(v30, 0LL, 1LL, v14);
  id v31 = v44;
  (*(void (**)(char *, void, uint64_t))(v45 + 104))( v44,  enum case for CodeOperation.DestinationServer.default<A, B>(_:),  v46);
  id v32 = objc_allocWithZone((Class)sub_1000BED3C(&qword_1002950C8));
  uint64_t v33 = CodeOperation.init(service:functionName:request:destinationServer:)( 0xD000000000000015LL,  0x80000001001D3A50LL,  0x65766F4D74697865LL,  0xED00006863746142LL,  v30,  v31);
  uint64_t v34 = swift_allocObject(&unk_100245698, 32LL, 7LL);
  *(void *)(v34 + 16) = v47;
  uint64_t v35 = v48;
  *(void *)(v34 + 24) = v48;
  swift_retain(v35);
  dispatch thunk of CodeOperation.codeOperationCompletionBlock.setter(sub_10011C76C, v34);
  sub_1000CECE0((uint64_t)v18, type metadata accessor for Goldilocks_ExitMoveBatchRequest);
  return v33;
}

void sub_10011BB60( void *a1, unint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v55 = a8;
  uint64_t v49 = a7;
  uint64_t v50 = a6;
  uint64_t v13 = sub_1000BED3C((uint64_t *)&unk_100295080);
  uint64_t v52 = *(void *)(v13 - 8);
  uint64_t v53 = v13;
  __chkstk_darwin(v13);
  uint64_t v54 = (char *)&v42 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = sub_1000BED3C(&qword_100293AB8);
  __chkstk_darwin(v15);
  uint64_t v17 = (char *)&v42 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = type metadata accessor for Goldilocks_InitiateExitRequest(0LL);
  uint64_t v47 = *(void *)(v18 - 8);
  uint64_t v48 = v18;
  __chkstk_darwin(v18);
  uint64_t v51 = (uint64_t)&v42 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100105350();
  uint64_t v46 = v21;
  if ((v20 & 0x100) != 0)
  {
    __break(1u);
  }

  else
  {
    char v22 = v20;
    uint64_t v45 = a9;
    BOOL v43 = a2 < 3;
    BOOL v44 = a3 < 3;
    uint64_t v42 = sub_10011AF78(a5);
    __int16 v24 = v23;
    id v25 = [a1 zoneName];
    uint64_t v26 = static String._unconditionallyBridgeFromObjectiveC(_:)(v25);
    uint64_t v28 = v27;

    id v29 = [a1 ownerName];
    uint64_t v30 = static String._unconditionallyBridgeFromObjectiveC(_:)(v29);
    uint64_t v31 = a3;
    uint64_t v33 = v32;

    LOBYTE(v29) = v22 & 1;
    uint64_t v34 = v50;
    swift_bridgeObjectRetain(v50);
    uint64_t v35 = swift_bridgeObjectRetain(v49);
    __int16 v41 = v24 & 0x1FF;
    uint64_t v36 = v51;
    sub_1001141CC(v26, v28, v30, v33, a2, v43, v31, v44, v51, v46, v29, v34, v35, v42, v41);
    sub_1000CEC58(v36, (uint64_t)v17, type metadata accessor for Goldilocks_InitiateExitRequest);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v47 + 56))(v17, 0LL, 1LL, v48);
    uint64_t v37 = v54;
    (*(void (**)(char *, void, uint64_t))(v52 + 104))( v54,  enum case for CodeOperation.DestinationServer.default<A, B>(_:),  v53);
    id v38 = objc_allocWithZone((Class)sub_1000BED3C(&qword_100295090));
    CodeOperation.init(service:functionName:request:destinationServer:)( 0xD000000000000015LL,  0x80000001001D3A50LL,  0x6574616974696E69LL,  0xEC00000074697845LL,  v17,  v37);
    uint64_t v39 = swift_allocObject(&unk_100245670, 32LL, 7LL);
    *(void *)(v39 + 16) = v55;
    uint64_t v40 = v45;
    *(void *)(v39 + 24) = v45;
    swift_retain(v40);
    dispatch thunk of CodeOperation.codeOperationCompletionBlock.setter(sub_10011C6D0, v39);
    sub_1000CECE0(v36, type metadata accessor for Goldilocks_InitiateExitRequest);
  }

uint64_t _s22CloudKitImplementation33CPLCKPhotosSharedLibraryOperationC25sendExitMoveBatchFeedback04withjkG2ID04movekN008exitZoneN013feedbackItems17completionHandlerSo010CKDatabaseG0CSSSg_ALSo08CKRecordqN0CSaySo0defijkL4Item_pGySb_s5Error_pSgtctFZ_0( uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v47 = a7;
  uint64_t v48 = a8;
  id v40 = a5;
  uint64_t v41 = a6;
  uint64_t v11 = sub_1000BED3C(&qword_100295038);
  uint64_t v45 = *(void *)(v11 - 8);
  uint64_t v46 = v11;
  __chkstk_darwin(v11);
  BOOL v44 = (char *)&v39 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = sub_1000BED3C((uint64_t *)&unk_100295040);
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)&v39 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = type metadata accessor for Goldilocks_ExitMoveBatchErrorFeedbackRequest(0LL);
  uint64_t v43 = *(void *)(v16 - 8);
  uint64_t v17 = __chkstk_darwin(v16);
  uint64_t v19 = (char *)&v39 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v20 = __chkstk_darwin(v17);
  char v22 = (uint64_t *)((char *)&v39 - v21);
  __chkstk_darwin(v20);
  uint64_t v42 = (uint64_t)&v39 - v23;
  if (a2) {
    uint64_t v24 = a1;
  }
  else {
    uint64_t v24 = 0LL;
  }
  if (a2) {
    unint64_t v25 = a2;
  }
  else {
    unint64_t v25 = 0xE000000000000000LL;
  }
  if (a4) {
    unint64_t v26 = a4;
  }
  else {
    unint64_t v26 = 0xE000000000000000LL;
  }
  swift_bridgeObjectRetain(a2);
  swift_bridgeObjectRetain(a4);
  id v27 = v40;
  uint64_t v28 = v41;
  swift_bridgeObjectRetain(v41);
  uint64_t v29 = swift_bridgeObjectRelease(v26);
  *char v22 = &_swiftEmptyArrayStorage;
  v22[1] = 0LL;
  v22[2] = 0xE000000000000000LL;
  v22[3] = 0LL;
  v22[4] = 0xE000000000000000LL;
  UnknownStorage.init()(v29);
  uint64_t v30 = (char *)v22 + *(int *)(v16 + 32);
  uint64_t v31 = type metadata accessor for Goldilocks_ZoneID(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v31 - 8) + 56LL))(v30, 1LL, 1LL, v31);
  uint64_t v50 = v24;
  unint64_t v51 = v25;
  uint64_t v52 = v22;
  id v53 = v27;
  uint64_t v54 = v28;
  sub_1000BD35C( &qword_100293AA8,  type metadata accessor for Goldilocks_ExitMoveBatchErrorFeedbackRequest,  (uint64_t)&protocol conformance descriptor for Goldilocks_ExitMoveBatchErrorFeedbackRequest);
  static Message.with(_:)(sub_10011C634, v49);
  swift_bridgeObjectRelease(v28);
  swift_bridgeObjectRelease(v25);

  sub_10011C650((uint64_t)v19, (uint64_t)v22);
  uint64_t v32 = v42;
  sub_1000CEC9C((uint64_t)v22, v42, type metadata accessor for Goldilocks_ExitMoveBatchErrorFeedbackRequest);
  sub_1000CEC58(v32, (uint64_t)v15, type metadata accessor for Goldilocks_ExitMoveBatchErrorFeedbackRequest);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v43 + 56))(v15, 0LL, 1LL, v16);
  uint64_t v33 = v44;
  (*(void (**)(char *, void, uint64_t))(v45 + 104))( v44,  enum case for CodeOperation.DestinationServer.default<A, B>(_:),  v46);
  id v34 = objc_allocWithZone((Class)sub_1000BED3C((uint64_t *)&unk_100295050));
  uint64_t v35 = CodeOperation.init(service:functionName:request:destinationServer:)( 0xD000000000000015LL,  0x80000001001D3A50LL,  0xD000000000000015LL,  0x80000001001D2CF0LL,  v15,  v33);
  uint64_t v36 = swift_allocObject(&unk_100245648, 32LL, 7LL);
  *(void *)(v36 + 16) = v47;
  uint64_t v37 = v48;
  *(void *)(v36 + 24) = v48;
  swift_retain(v37);
  dispatch thunk of CodeOperation.codeOperationCompletionBlock.setter(sub_10011C694, v36);
  sub_1000CECE0(v32, type metadata accessor for Goldilocks_ExitMoveBatchErrorFeedbackRequest);
  return v35;
}

uint64_t _s22CloudKitImplementation33CPLCKPhotosSharedLibraryOperationC22sendExitStatusFeedback04withG2ID5share6status17completionHandlerSo010CKDatabaseG0CSSSg_So012CKRecordZoneM0CSo011CPLCKSharedfiJ0VySb_s5Error_pSgtctFZ_0( uint64_t a1, unint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v40 = a5;
  uint64_t v41 = a6;
  uint64_t v35 = a4;
  uint64_t v9 = sub_1000BED3C(&qword_100294FF8);
  uint64_t v38 = *(void *)(v9 - 8);
  uint64_t v39 = v9;
  __chkstk_darwin(v9);
  uint64_t v37 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = sub_1000BED3C((uint64_t *)&unk_100295000);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v34 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = type metadata accessor for Goldilocks_ExitStatusFeedbackRequest(0LL);
  uint64_t v36 = *(void *)(v14 - 8);
  uint64_t v15 = __chkstk_darwin(v14);
  uint64_t v17 = (char *)&v34 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = __chkstk_darwin(v15);
  uint64_t v20 = (char *)&v34 - v19;
  __chkstk_darwin(v18);
  char v22 = (char *)&v34 - v21;
  if (a2) {
    uint64_t v23 = a1;
  }
  else {
    uint64_t v23 = 0LL;
  }
  if (a2) {
    unint64_t v24 = a2;
  }
  else {
    unint64_t v24 = 0xE000000000000000LL;
  }
  *(void *)uint64_t v20 = 0LL;
  *((void *)v20 + 1) = 0xE000000000000000LL;
  *((void *)v20 + 2) = 0LL;
  v20[24] = 1;
  swift_bridgeObjectRetain(a2);
  id v25 = a3;
  UnknownStorage.init()(v25);
  unint64_t v26 = &v20[*(int *)(v14 + 28)];
  uint64_t v27 = type metadata accessor for Goldilocks_ZoneID(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v27 - 8) + 56LL))(v26, 1LL, 1LL, v27);
  uint64_t v43 = v23;
  unint64_t v44 = v24;
  id v45 = v25;
  uint64_t v46 = v35;
  sub_1000BD35C( &qword_100293AB0,  type metadata accessor for Goldilocks_ExitStatusFeedbackRequest,  (uint64_t)&protocol conformance descriptor for Goldilocks_ExitStatusFeedbackRequest);
  static Message.with(_:)(sub_10011C5A4, v42);
  sub_1000CECE0((uint64_t)v20, type metadata accessor for Goldilocks_ExitStatusFeedbackRequest);
  swift_bridgeObjectRelease(v24);

  sub_1000CEC9C((uint64_t)v17, (uint64_t)v20, type metadata accessor for Goldilocks_ExitStatusFeedbackRequest);
  sub_1000CEC9C((uint64_t)v20, (uint64_t)v22, type metadata accessor for Goldilocks_ExitStatusFeedbackRequest);
  sub_1000CEC58((uint64_t)v22, (uint64_t)v13, type metadata accessor for Goldilocks_ExitStatusFeedbackRequest);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v36 + 56))(v13, 0LL, 1LL, v14);
  uint64_t v28 = v37;
  (*(void (**)(char *, void, uint64_t))(v38 + 104))( v37,  enum case for CodeOperation.DestinationServer.default<A, B>(_:),  v39);
  id v29 = objc_allocWithZone((Class)sub_1000BED3C(&qword_100295010));
  uint64_t v30 = CodeOperation.init(service:functionName:request:destinationServer:)( 0xD000000000000015LL,  0x80000001001D3A50LL,  0xD000000000000012LL,  0x80000001001D2D10LL,  v13,  v28);
  uint64_t v31 = swift_allocObject(&unk_100245620, 32LL, 7LL);
  *(void *)(v31 + 16) = v40;
  uint64_t v32 = v41;
  *(void *)(v31 + 24) = v41;
  swift_retain(v32);
  dispatch thunk of CodeOperation.codeOperationCompletionBlock.setter(sub_10011C5E4, v31);
  sub_1000CECE0((uint64_t)v22, type metadata accessor for Goldilocks_ExitStatusFeedbackRequest);
  return v30;
}

uint64_t type metadata accessor for CPLCKPhotosSharedLibraryOperation()
{
  return objc_opt_self(&OBJC_CLASS___CPLCKPhotosSharedLibraryOperation);
}

uint64_t sub_10011C500()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

void sub_10011C524(char a1, uint64_t a2, uint64_t a3, objc_class *a4, uint64_t a5)
{
}

void sub_10011C52C( char a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, objc_class *a8, uint64_t a9)
{
}

void sub_10011C554(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, char a6, uint64_t a7)
{
}

void sub_10011C55C( char a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, unsigned int a6, char a7, char a8, int a9, uint64_t a10)
{
}

uint64_t sub_10011C5A4(uint64_t a1)
{
  return sub_100115300(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40));
}

uint64_t sub_10011C5C0()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_10011C5E4(uint64_t a1, void *a2)
{
  return sub_100118E64(a1, a2, *(uint64_t (**)(uint64_t, id))(v2 + 16));
}

_OWORD *sub_10011C5EC(_OWORD *a1, _OWORD *a2)
{
  __int128 v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

uint64_t sub_10011C5FC(void *a1)
{
  uint64_t v1 = *(void *)(a1[3] - 8LL);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0) {
    return swift_release(*a1);
  }
  else {
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

uint64_t sub_10011C61C(uint64_t *a1)
{
  return sub_100115494(a1, *(id *)(v1 + 16));
}

uint64_t sub_10011C634(uint64_t a1)
{
  return sub_1000CE5C8(a1, (uint64_t (*)(uint64_t, void, void, void, void, void))sub_100114CE4);
}

uint64_t sub_10011C650(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Goldilocks_ExitMoveBatchErrorFeedbackRequest(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_10011C694(uint64_t a1, void *a2)
{
  return sub_100118960(a1, a2, *(void (**)(uint64_t, id))(v2 + 16), *(void *)(v2 + 24));
}

uint64_t sub_10011C69C(uint64_t *a1)
{
  return sub_100114A20(a1, *(void **)(v1 + 16));
}

uint64_t sub_10011C6B4(uint64_t a1)
{
  return sub_1000CE5C8(a1, sub_100114994);
}

uint64_t sub_10011C6D0(uint64_t a1, char *a2)
{
  return sub_100117B68( a1,  a2,  *(void (**)(void, void, void, void, id))(v2 + 16),  *(void *)(v2 + 24));
}

uint64_t sub_10011C6D8(void *a1)
{
  return sub_1001146BC(a1, v1[2], v1[3], v1[4], v1[5]);
}

uint64_t sub_10011C6F4(uint64_t a1)
{
  return sub_1001144AC( a1,  *(void *)(v1 + 16),  *(void *)(v1 + 24),  *(unsigned __int8 *)(v1 + 32),  *(void *)(v1 + 40),  *(void *)(v1 + 48),  *(void *)(v1 + 56),  *(unsigned __int8 *)(v1 + 64),  *(void *)(v1 + 72),  *(_BYTE *)(v1 + 80),  *(void *)(v1 + 88),  *(unsigned __int8 *)(v1 + 96) | (unsigned __int16)(*(unsigned __int8 *)(v1 + 97) << 8));
}

uint64_t sub_10011C74C(uint64_t a1)
{
  return sub_100114730(a1, *(void *)(v1 + 16), *(_DWORD *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40));
}

uint64_t sub_10011C76C(uint64_t a1, void *a2)
{
  return sub_1001174B8( a1,  a2,  *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void))(v2 + 16),  *(void *)(v2 + 24));
}

uint64_t sub_10011C774(uint64_t a1, void *a2)
{
  return sub_100116E40( a1,  a2,  *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, BOOL, id))(v2 + 16),  *(void *)(v2 + 24));
}

uint64_t sub_10011C77C(uint64_t *a1)
{
  return sub_1001148C0(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_10011C794(uint64_t a1, void *a2)
{
  return sub_100116520( a1,  a2,  *(void (**)(uint64_t, uint64_t, uint64_t, void *, uint64_t, uint64_t, uint64_t, void, int, void))(v2 + 16),  *(void *)(v2 + 24));
}

uint64_t sub_10011C79C(uint64_t *a1)
{
  return sub_10011C61C(a1);
}

uint64_t sub_10011C7B0(uint64_t *a1)
{
  return sub_10011C69C(a1);
}

uint64_t sub_10011C7F0(void *a1)
{
  return sub_10011C6D8(a1);
}

uint64_t sub_10011C804(uint64_t a1)
{
  return sub_10011C74C(a1);
}

void sub_10011CCBC(uint64_t a1)
{
  if (!_CPLSilentLogging)
  {
    id v2 = sub_10011CDF4();
    uint64_t v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v4 = *(void *)(a1 + 32);
      uint64_t v5 = *(void *)(v4 + 96);
      *(_DWORD *)buf = 138412546;
      uint64_t v13 = v4;
      __int16 v14 = 2112;
      uint64_t v15 = v5;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "%@ attaching to %@", buf, 0x16u);
    }
  }

  uint64_t v7 = *(void *)(a1 + 32);
  uint64_t v6 = *(void **)(a1 + 40);
  uint64_t v8 = *(void **)(v7 + 96);
  v9[0] = _NSConcreteStackBlock;
  v9[2] = sub_10011CE34;
  v9[3] = &unk_1002457A8;
  v9[1] = 3221225472LL;
  v9[4] = v7;
  char v11 = *(_BYTE *)(a1 + 48);
  id v10 = v6;
  [v8 attachObject:v7 withCompletionHandler:v9];
}

id sub_10011CDF4()
{
  if (qword_1002A3790 != -1) {
    dispatch_once(&qword_1002A3790, &stru_100246D20);
  }
  return (id)qword_1002A3798;
}

void sub_10011CE34(uint64_t a1, void *a2)
{
  uint64_t v27 = a2;
  if (v27)
  {
    if (!_CPLSilentLogging)
    {
      id v3 = sub_10011CDF4();
      uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      {
        uint64_t v5 = *(void *)(a1 + 32);
        uint64_t v6 = *(void *)(v5 + 96);
        *(_DWORD *)buf = 138412802;
        *(void *)&uint8_t buf[4] = v5;
        *(_WORD *)&buf[12] = 2112;
        *(void *)&buf[14] = v6;
        *(_WORD *)&buf[22] = 2112;
        uint64_t v57 = v27;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "%@ failed to attach to %@: %@", buf, 0x20u);
      }
    }

    uint64_t v7 = *(void **)(*(void *)(a1 + 32) + 104LL);
    v29[0] = _NSConcreteStackBlock;
    v29[1] = 3221225472LL;
    v29[2] = sub_10011DA98;
    v29[3] = &unk_10023DFE0;
    id v31 = *(id *)(a1 + 40);
    uint64_t v30 = v27;
    uint64_t v8 = v29;
    *(void *)buf = _NSConcreteStackBlock;
    *(void *)&buf[8] = 3221225472LL;
    *(void *)&buf[16] = sub_10013AA68;
    uint64_t v57 = (uint64_t (*)(uint64_t, uint64_t))&unk_10023DBC8;
    uint64_t v58 = v8;
    uint64_t v9 = v7;
    dispatch_block_t v10 = dispatch_block_create(DISPATCH_BLOCK_ENFORCE_QOS_CLASS|DISPATCH_BLOCK_ASSIGN_CURRENT, buf);
    dispatch_async(v9, v10);

    uint64_t v11 = *(void *)(a1 + 32);
    if (*(_BYTE *)(v11 + 8))
    {
      if (!_CPLSilentLogging)
      {
        id v12 = sub_10011CDF4();
        uint64_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
        if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v14 = *(void *)(*(void *)(a1 + 32) + 96LL);
          *(_DWORD *)buf = 138412290;
          *(void *)&uint8_t buf[4] = v14;
          _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "Closing %@ now", buf, 0xCu);
        }

        uint64_t v11 = *(void *)(a1 + 32);
      }

      uint64_t v15 = *(void **)(v11 + 96);
      v28[0] = _NSConcreteStackBlock;
      v28[1] = 3221225472LL;
      v28[2] = sub_10011DAB8;
      v28[3] = &unk_10023E430;
      v28[4] = v11;
      objc_msgSend(v15, "closeAndDeactivate:completionHandler:", 0, v28, v27);
    }

    id v16 = v31;
  }

  else
  {
    if (!_CPLSilentLogging)
    {
      id v17 = sub_10011CDF4();
      uint64_t v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(v17);
      if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v19 = *(void *)(a1 + 32);
        uint64_t v20 = *(void *)(v19 + 96);
        *(_DWORD *)buf = 138412546;
        *(void *)&uint8_t buf[4] = v19;
        *(_WORD *)&buf[12] = 2112;
        *(void *)&buf[14] = v20;
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "%@ attached successfully to %@.", buf, 0x16u);
      }
    }

    uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(void *)(a1 + 32) + 96), "store", 0));
    char v22 = (void *)objc_claimAutoreleasedReturnValue([v21 outgoingResources]);
    *(void *)buf = 0LL;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x3032000000LL;
    uint64_t v57 = sub_10011D36C;
    uint64_t v58 = sub_10011D37C;
    id v59 = 0LL;
    v55[0] = 0LL;
    v55[1] = v55;
    v55[2] = 0x2020000000LL;
    v55[3] = 0LL;
    v54[0] = 0LL;
    v54[1] = v54;
    v54[2] = 0x2020000000LL;
    v54[3] = 0LL;
    v53[0] = 0LL;
    v53[1] = v53;
    v53[2] = 0x2020000000LL;
    v53[3] = 0LL;
    v52[0] = 0LL;
    v52[1] = v52;
    v52[2] = 0x2020000000LL;
    v52[3] = 0LL;
    v51[0] = 0LL;
    v51[1] = v51;
    v51[2] = 0x2020000000LL;
    v51[3] = 0LL;
    v40[0] = _NSConcreteStackBlock;
    v40[1] = 3221225472LL;
    v40[2] = sub_10011D384;
    v40[3] = &unk_100245730;
    unint64_t v44 = buf;
    id v16 = v21;
    id v41 = v16;
    id v45 = v55;
    uint64_t v46 = v54;
    uint64_t v47 = v53;
    id v23 = v22;
    uint64_t v48 = v52;
    uint64_t v49 = v51;
    char v50 = *(_BYTE *)(a1 + 48);
    uint64_t v24 = *(void *)(a1 + 32);
    id v42 = v23;
    uint64_t v43 = v24;
    v32[0] = _NSConcreteStackBlock;
    v32[1] = 3221225472LL;
    v32[2] = sub_10011D5E4;
    v32[3] = &unk_100245780;
    id v25 = *(id *)(a1 + 40);
    v32[4] = *(void *)(a1 + 32);
    id v33 = v25;
    uint64_t v34 = v55;
    uint64_t v35 = v54;
    uint64_t v36 = v53;
    uint64_t v37 = v52;
    uint64_t v38 = v51;
    uint64_t v39 = buf;
    id v26 = [v16 performWriteTransactionWithBlock:v40 completionHandler:v32];

    _Block_object_dispose(v51, 8);
    _Block_object_dispose(v52, 8);
    _Block_object_dispose(v53, 8);
    _Block_object_dispose(v54, 8);
    _Block_object_dispose(v55, 8);
    _Block_object_dispose(buf, 8);
  }
}

void sub_10011D310( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, char a47, uint64_t a48, uint64_t a49, uint64_t a50,char a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55)
{
}

uint64_t sub_10011D36C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_10011D37C(uint64_t a1)
{
}

void sub_10011D384(uint64_t a1, void *a2)
{
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  void v6[2] = sub_10011D434;
  v6[3] = &unk_100245708;
  uint64_t v10 = *(void *)(a1 + 56);
  id v7 = *(id *)(a1 + 32);
  __int128 v11 = *(_OWORD *)(a1 + 64);
  uint64_t v12 = *(void *)(a1 + 80);
  id v4 = *(id *)(a1 + 40);
  __int128 v13 = *(_OWORD *)(a1 + 88);
  char v14 = *(_BYTE *)(a1 + 104);
  uint64_t v5 = *(void *)(a1 + 48);
  id v8 = v4;
  uint64_t v9 = v5;
  [a2 do:v6];
}

uint64_t sub_10011D434(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) libraryVersion]);
  uint64_t v5 = *(void *)(*(void *)(a1 + 56) + 8LL);
  uint64_t v6 = *(void **)(v5 + 40);
  *(void *)(v5 + 40) = v4;

  id v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) resourceStorage]);
  *(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 24) = [v7 sizeOfResourcesToUpload];

  id v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) resourceStorage]);
  *(void *)(*(void *)(*(void *)(a1 + 72) + 8) + 24) = [v8 sizeOfOriginalResourcesToUpload];

  *(void *)(*(void *)(*(void *)(a1 + 80) + 8) + 24) = [*(id *)(a1 + 40) countOfOriginalImages];
  *(void *)(*(void *)(*(void *)(a1 + 88) + 8) + 24) = [*(id *)(a1 + 40) countOfOriginalVideos];
  *(void *)(*(void *)(*(void *)(a1 + 96) + 8) + 24) = [*(id *)(a1 + 40) countOfOriginalOthers];
  if (!_CPLSilentLogging)
  {
    id v9 = sub_10011CDF4();
    uint64_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v11 = *(void *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 40LL);
      int v16 = 138412290;
      uint64_t v17 = v11;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEBUG,  "Got inital library version %@",  (uint8_t *)&v16,  0xCu);
    }
  }

  if (!*(_BYTE *)(a1 + 104)) {
    return 1LL;
  }
  uint64_t v12 = *(void **)(a1 + 32);
  __int128 v13 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) abstractObject]);
  id v14 = objc_msgSend(v12, "updateLibraryOptions:error:", objc_msgSend(v13, "libraryOptions"), a2);

  return (uint64_t)v14;
}

void sub_10011D5E4(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 error]);

  if (v4)
  {
    if (!_CPLSilentLogging)
    {
      id v5 = sub_10011CDF4();
      uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      {
        id v7 = (void *)objc_claimAutoreleasedReturnValue([v3 error]);
        LODWORD(buf) = 138412290;
        *(void *)((char *)&buf + 4) = v7;
        _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_ERROR,  "Unable to get initial library version: %@",  (uint8_t *)&buf,  0xCu);
      }
    }

    uint64_t v8 = *(void *)(a1 + 40);
    id v9 = (void *)objc_claimAutoreleasedReturnValue([v3 error]);
    (*(void (**)(uint64_t, void *, void, void, void, void))(v8 + 16))(v8, v9, 0LL, 0LL, 0LL, 0LL);

    uint64_t v10 = *(void *)(a1 + 32);
    if (*(_BYTE *)(v10 + 8))
    {
      if (!_CPLSilentLogging)
      {
        id v11 = sub_10011CDF4();
        uint64_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
        if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v13 = *(void *)(*(void *)(a1 + 32) + 96LL);
          LODWORD(buf) = 138412290;
          *(void *)((char *)&buf + 4) = v13;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "Closing %@ now", (uint8_t *)&buf, 0xCu);
        }

        uint64_t v10 = *(void *)(a1 + 32);
      }

      id v14 = *(void **)(v10 + 96);
      v28[0] = _NSConcreteStackBlock;
      v28[1] = 3221225472LL;
      v28[2] = sub_10011D8BC;
      v28[3] = &unk_10023E430;
      v28[4] = v10;
      [v14 closeAndDeactivate:0 completionHandler:v28];
    }
  }

  else
  {
    uint64_t v15 = *(void *)(a1 + 32);
    int v16 = *(void **)(v15 + 104);
    v23[0] = _NSConcreteStackBlock;
    v23[2] = sub_10011D99C;
    v23[3] = &unk_100245758;
    v23[4] = v15;
    __int128 v17 = *(_OWORD *)(a1 + 72);
    __int128 v25 = *(_OWORD *)(a1 + 56);
    __int128 v26 = v17;
    __int128 v22 = *(_OWORD *)(a1 + 40);
    v23[1] = 3221225472LL;
    id v18 = (id)v22;
    __int128 v24 = v22;
    uint64_t v27 = *(void *)(a1 + 88);
    uint64_t v19 = v23;
    *(void *)&__int128 buf = _NSConcreteStackBlock;
    *((void *)&buf + 1) = 3221225472LL;
    uint64_t v30 = sub_10013AA68;
    id v31 = &unk_10023DBC8;
    id v32 = v19;
    uint64_t v20 = v16;
    dispatch_block_t v21 = dispatch_block_create(DISPATCH_BLOCK_ENFORCE_QOS_CLASS|DISPATCH_BLOCK_ASSIGN_CURRENT, &buf);
    dispatch_async(v20, v21);
  }
}

void sub_10011D8BC(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (!_CPLSilentLogging)
  {
    id v4 = sub_10011CDF4();
    id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v6 = *(void *)(*(void *)(a1 + 32) + 96LL);
      int v7 = 138412546;
      uint64_t v8 = v6;
      __int16 v9 = 2112;
      id v10 = v3;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "%@ closed with error %@", (uint8_t *)&v7, 0x16u);
    }
  }
}

void sub_10011D99C(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) abstractObject]);
  [v2 _setSizeOfResourcesToUpload:*(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) sizeOfOriginalResourcesToUpload:*(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) numberOfImages:*(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 24) numberOfVideos:*(void *)(*(void *)(*(void *)(a1 + 72) + 8) + 24) numberOfOtherItems:*(void *)(*(void *)(*(void *)(a1 + 80) + 8) + 24)];

  uint64_t v3 = *(void *)(*(void *)(*(void *)(a1 + 88) + 8LL) + 40LL);
  uint64_t v4 = *(void *)(a1 + 40);
  id v7 = (id)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 96) libraryIdentifier]);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 96) mainScopeIdentifier]);
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 96) clientLibraryBaseURL]);
  (*(void (**)(uint64_t, void, uint64_t, id, void *, void *))(v4 + 16))(v4, 0LL, v3, v7, v5, v6);
}

uint64_t sub_10011DA98(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void, void, void, void))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  *(void *)(a1 + 32),  0LL,  0LL,  0LL,  0LL);
}

void sub_10011DAB8(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (!_CPLSilentLogging)
  {
    id v4 = sub_10011CDF4();
    id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v6 = *(void *)(*(void *)(a1 + 32) + 96LL);
      int v7 = 138412546;
      uint64_t v8 = v6;
      __int16 v9 = 2112;
      id v10 = v3;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "%@ closed with error %@", (uint8_t *)&v7, 0x16u);
    }
  }
}

void sub_10011DB98(void *a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    if (!_CPLSilentLogging)
    {
      id v4 = sub_10011CDF4();
      id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      {
        uint64_t v6 = *(void *)(a1[4] + 96LL);
        int v10 = 138412546;
        uint64_t v11 = v6;
        __int16 v12 = 2112;
        id v13 = v3;
        _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_ERROR,  "%@ failed to open: %@",  (uint8_t *)&v10,  0x16u);
      }
    }

    (*(void (**)(void))(a1[6] + 16LL))();
  }

  else
  {
    if (!_CPLSilentLogging)
    {
      id v7 = sub_10011CDF4();
      uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v9 = *(void *)(a1[4] + 96LL);
        int v10 = 138412290;
        uint64_t v11 = v9;
        _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEBUG,  "%@ opened successfully.",  (uint8_t *)&v10,  0xCu);
      }
    }

    (*(void (**)(void))(a1[5] + 16LL))();
  }
}

id sub_10011DFF8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = *(void **)(v2 + 56);
  if (v3)
  {
    [v3 cancel];
    uint64_t v4 = *(void *)(a1 + 32);
    id v5 = *(void **)(v4 + 56);
    *(void *)(v4 + 56) = 0LL;

    uint64_t v2 = *(void *)(a1 + 32);
  }

  uint64_t v6 = *(void **)(v2 + 64);
  if (v6)
  {
    [v6 cancelTask];
    uint64_t v7 = *(void *)(a1 + 32);
    uint64_t v8 = *(void **)(v7 + 64);
    *(void *)(v7 + 64) = 0LL;

    uint64_t v2 = *(void *)(a1 + 32);
  }

  [*(id *)(v2 + 72) makeObjectsPerformSelector:"cancel"];
  return [*(id *)(*(void *)(a1 + 32) + 72) removeAllObjects];
}

void sub_10011E088(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v5 = *(void *)(a1 + 32);
  uint64_t v4 = *(void **)(a1 + 40);
  uint64_t v6 = *(void **)(v5 + 96);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  v8[2] = sub_10011E130;
  v8[3] = &unk_100242070;
  void v8[4] = v5;
  id v9 = v3;
  id v10 = v4;
  id v7 = v3;
  [v6 detachObject:v5 withCompletionHandler:v8];
}

void sub_10011E130(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3 && !_CPLSilentLogging)
  {
    id v4 = sub_10011CDF4();
    uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      uint64_t v6 = *(void *)(a1 + 32);
      uint64_t v7 = *(void *)(v6 + 96);
      *(_DWORD *)__int128 buf = 138412802;
      *(void *)&uint8_t buf[4] = v6;
      *(_WORD *)&buf[12] = 2112;
      *(void *)&buf[14] = v7;
      *(_WORD *)&buf[22] = 2112;
      id v18 = v3;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "%@ failed to detach from %@: %@", buf, 0x20u);
    }
  }

  uint64_t v8 = *(void **)(*(void *)(a1 + 32) + 104LL);
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472LL;
  v13[2] = sub_10011E2F4;
  v13[3] = &unk_10023EA48;
  id v16 = *(id *)(a1 + 48);
  id v14 = *(id *)(a1 + 40);
  id v15 = v3;
  id v9 = v13;
  *(void *)__int128 buf = _NSConcreteStackBlock;
  *(void *)&buf[8] = 3221225472LL;
  *(void *)&buf[16] = sub_10013AA68;
  id v18 = &unk_10023DBC8;
  id v19 = v9;
  id v10 = v8;
  id v11 = v3;
  dispatch_block_t v12 = dispatch_block_create(DISPATCH_BLOCK_ENFORCE_QOS_CLASS|DISPATCH_BLOCK_ASSIGN_CURRENT, buf);
  dispatch_async(v10, v12);
}

uint64_t sub_10011E2F4(void *a1)
{
  uint64_t v2 = a1[6];
  uint64_t v3 = a1[4];
  if (!v3) {
    uint64_t v3 = a1[5];
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 16))(v2, v3);
}

void sub_10011E310(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3 && !_CPLSilentLogging)
  {
    id v4 = sub_10011CDF4();
    uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      uint64_t v6 = *(void *)(a1 + 32);
      uint64_t v7 = *(void *)(v6 + 96);
      *(_DWORD *)__int128 buf = 138412802;
      *(void *)&uint8_t buf[4] = v6;
      *(_WORD *)&buf[12] = 2112;
      *(void *)&buf[14] = v7;
      *(_WORD *)&buf[22] = 2112;
      id v18 = v3;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "%@ failed to detach from %@: %@", buf, 0x20u);
    }
  }

  uint64_t v8 = *(void **)(a1 + 40);
  id v9 = *(void **)(*(void *)(a1 + 32) + 104LL);
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472LL;
  v14[2] = sub_10011E4BC;
  v14[3] = &unk_10023DFE0;
  id v15 = v3;
  id v16 = v8;
  id v10 = v14;
  *(void *)__int128 buf = _NSConcreteStackBlock;
  *(void *)&buf[8] = 3221225472LL;
  *(void *)&buf[16] = sub_10013AA68;
  id v18 = &unk_10023DBC8;
  id v19 = v10;
  id v11 = v9;
  id v12 = v3;
  dispatch_block_t v13 = dispatch_block_create(DISPATCH_BLOCK_ENFORCE_QOS_CLASS|DISPATCH_BLOCK_ASSIGN_CURRENT, buf);
  dispatch_async(v11, v13);
}

uint64_t sub_10011E4BC(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  *(void *)(a1 + 32));
}

void sub_10011E5F8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = *(void **)(v2 + 56);
  if (v3)
  {
    [v3 cancel];
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = *(void **)(v4 + 56);
    *(void *)(v4 + 56) = 0LL;

    uint64_t v2 = *(void *)(a1 + 32);
  }

  uint64_t v6 = *(void **)(v2 + 64);
  if (v6)
  {
    [v6 cancelTask];
    uint64_t v7 = *(void *)(a1 + 32);
    uint64_t v8 = *(void **)(v7 + 64);
    *(void *)(v7 + 64) = 0LL;
  }

void sub_10011E66C(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    if (!_CPLSilentLogging)
    {
      id v4 = sub_10011CDF4();
      uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      {
        int v7 = 138412290;
        id v8 = v3;
        _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_ERROR,  "Can't deactivate library: %@",  (uint8_t *)&v7,  0xCu);
      }
    }

    uint64_t v6 = *(void (**)(void))(*(void *)(a1 + 32) + 16LL);
  }

  else
  {
    uint64_t v6 = *(void (**)(void))(*(void *)(a1 + 32) + 16LL);
  }

  v6();
}

void sub_10011E878(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) scopes]);
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472LL;
  v13[2] = sub_10011E968;
  v13[3] = &unk_10023F188;
  id v14 = v4;
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472LL;
  v10[2] = sub_10011E9E0;
  v10[3] = &unk_100245820;
  uint64_t v5 = *(void **)(a1 + 32);
  v10[4] = *(void *)(a1 + 40);
  id v6 = *(id *)(a1 + 48);
  id v11 = v3;
  id v12 = v6;
  id v7 = v3;
  id v8 = v4;
  id v9 = [v5 performWriteTransactionByPassBlocker:v7 withBlock:v13 completionHandler:v10];
}

void sub_10011E968(uint64_t a1, void *a2)
{
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  v3[2] = sub_10011E9D4;
  v3[3] = &unk_1002457F8;
  id v4 = *(id *)(a1 + 32);
  [a2 do:v3];
}

id sub_10011E9D4(uint64_t a1, uint64_t a2)
{
  return _[*(id *)(a1 + 32) enablePrimaryScopeWithError:a2];
}

void sub_10011E9E0(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(*(void *)(a1 + 32) + 104LL);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472LL;
  v9[2] = sub_10011EAF4;
  v9[3] = &unk_10023EA48;
  id v12 = *(id *)(a1 + 48);
  id v10 = v3;
  id v11 = *(id *)(a1 + 40);
  uint64_t v5 = v9;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_10013AA68;
  block[3] = &unk_10023DBC8;
  id v14 = v5;
  id v6 = v4;
  id v7 = v3;
  dispatch_block_t v8 = dispatch_block_create(DISPATCH_BLOCK_ENFORCE_QOS_CLASS|DISPATCH_BLOCK_ASSIGN_CURRENT, block);
  dispatch_async(v6, v8);
}

id sub_10011EAF4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  if (v2)
  {
    id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) error]);
    (*(void (**)(uint64_t, void *))(v2 + 16))(v2, v3);
  }

  return [*(id *)(a1 + 40) unblock];
}

void sub_10011EBF8(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) scopes]);
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472LL;
  v13[2] = sub_10011ECE8;
  v13[3] = &unk_10023F188;
  id v14 = v4;
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472LL;
  v10[2] = sub_10011ED60;
  v10[3] = &unk_100245820;
  uint64_t v5 = *(void **)(a1 + 32);
  v10[4] = *(void *)(a1 + 40);
  id v6 = *(id *)(a1 + 48);
  id v11 = v3;
  id v12 = v6;
  id v7 = v3;
  id v8 = v4;
  id v9 = [v5 performWriteTransactionByPassBlocker:v7 withBlock:v13 completionHandler:v10];
}

void sub_10011ECE8(uint64_t a1, void *a2)
{
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  v3[2] = sub_10011ED54;
  v3[3] = &unk_1002457F8;
  id v4 = *(id *)(a1 + 32);
  [a2 do:v3];
}

id sub_10011ED54(uint64_t a1, uint64_t a2)
{
  return _[*(id *)(a1 + 32) disablePrimaryScopeWithError:a2];
}

void sub_10011ED60(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(*(void *)(a1 + 32) + 104LL);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472LL;
  v9[2] = sub_10011EE74;
  v9[3] = &unk_10023EA48;
  id v12 = *(id *)(a1 + 48);
  id v10 = v3;
  id v11 = *(id *)(a1 + 40);
  uint64_t v5 = v9;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_10013AA68;
  block[3] = &unk_10023DBC8;
  id v14 = v5;
  id v6 = v4;
  id v7 = v3;
  dispatch_block_t v8 = dispatch_block_create(DISPATCH_BLOCK_ENFORCE_QOS_CLASS|DISPATCH_BLOCK_ASSIGN_CURRENT, block);
  dispatch_async(v6, v8);
}

id sub_10011EE74(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  if (v2)
  {
    id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) error]);
    (*(void (**)(uint64_t, void *))(v2 + 16))(v2, v3);
  }

  return [*(id *)(a1 + 40) unblock];
}

void sub_10011EFE4(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) scopes]);
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472LL;
  v13[2] = sub_10011F108;
  v13[3] = &unk_100245870;
  id v14 = v4;
  uint64_t v5 = *(void **)(a1 + 32);
  id v15 = *(id *)(a1 + 40);
  id v16 = *(id *)(a1 + 32);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472LL;
  v10[2] = sub_10011F370;
  v10[3] = &unk_100245820;
  id v6 = *(void **)(a1 + 56);
  v10[4] = *(void *)(a1 + 48);
  id v11 = v3;
  id v12 = v6;
  id v7 = v3;
  id v8 = v4;
  id v9 = [v5 performWriteTransactionByPassBlocker:v7 withBlock:v13 completionHandler:v10];
}

void sub_10011F108(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v9 = 0LL;
  id v10 = &v9;
  uint64_t v11 = 0x3032000000LL;
  id v12 = sub_10011D36C;
  dispatch_block_t v13 = sub_10011D37C;
  id v14 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) scopeWithIdentifier:*(void *)(a1 + 40)]);
  if (v10[5])
  {
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472LL;
    v5[2] = sub_10011F23C;
    v5[3] = &unk_10023F1D8;
    id v6 = *(id *)(a1 + 48);
    id v8 = &v9;
    id v7 = *(id *)(a1 + 32);
    [v3 do:v5];

    id v4 = v6;
  }

  else
  {
    id v4 = (void *)objc_claimAutoreleasedReturnValue( +[CPLErrors invalidScopeErrorWithScopeIdentifier:]( &OBJC_CLASS___CPLErrors,  "invalidScopeErrorWithScopeIdentifier:",  *(void *)(a1 + 40)));
    [v3 setError:v4];
  }

  _Block_object_dispose(&v9, 8);
}

void sub_10011F224( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

uint64_t sub_10011F23C(uint64_t a1, uint64_t a2)
{
  unsigned int v4 = [*(id *)(a1 + 32) canActivateScope:*(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) error:a2];
  uint64_t v5 = *(void **)(a1 + 40);
  uint64_t v6 = *(void *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 40LL);
  if (v4) {
    return (uint64_t)_[v5 activateScope:v6 error:a2];
  }
  if (!_CPLSilentLogging)
  {
    id v7 = sub_10011CDF4();
    id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      uint64_t v9 = *(void *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 40LL);
      int v11 = 138412290;
      uint64_t v12 = v9;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_ERROR,  "Client is trying to activate %@ while it should not - fortunately it is already active",  (uint8_t *)&v11,  0xCu);
    }
  }

  return 1LL;
}

void sub_10011F370(uint64_t a1, void *a2)
{
  id v3 = a2;
  unsigned int v4 = *(void **)(*(void *)(a1 + 32) + 104LL);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472LL;
  v9[2] = sub_10011F484;
  v9[3] = &unk_10023EA48;
  id v12 = *(id *)(a1 + 48);
  id v10 = v3;
  id v11 = *(id *)(a1 + 40);
  uint64_t v5 = v9;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_10013AA68;
  block[3] = &unk_10023DBC8;
  id v14 = v5;
  uint64_t v6 = v4;
  id v7 = v3;
  dispatch_block_t v8 = dispatch_block_create(DISPATCH_BLOCK_ENFORCE_QOS_CLASS|DISPATCH_BLOCK_ASSIGN_CURRENT, block);
  dispatch_async(v6, v8);
}

id sub_10011F484(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  if (v2)
  {
    id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) error]);
    (*(void (**)(uint64_t, void *))(v2 + 16))(v2, v3);
  }

  return [*(id *)(a1 + 40) unblock];
}

void sub_10011F5F4(uint64_t a1, void *a2)
{
  id v3 = a2;
  unsigned int v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) scopes]);
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472LL;
  v13[2] = sub_10011F718;
  v13[3] = &unk_100245870;
  id v14 = v4;
  uint64_t v5 = *(void **)(a1 + 32);
  id v15 = *(id *)(a1 + 40);
  id v16 = *(id *)(a1 + 32);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472LL;
  v10[2] = sub_10011F954;
  v10[3] = &unk_100245820;
  uint64_t v6 = *(void **)(a1 + 56);
  v10[4] = *(void *)(a1 + 48);
  id v11 = v3;
  id v12 = v6;
  id v7 = v3;
  id v8 = v4;
  id v9 = [v5 performWriteTransactionByPassBlocker:v7 withBlock:v13 completionHandler:v10];
}

void sub_10011F718(id *a1, void *a2)
{
  id v3 = a2;
  v9[0] = 0LL;
  v9[1] = v9;
  v9[2] = 0x3032000000LL;
  v9[3] = sub_10011D36C;
  void v9[4] = sub_10011D37C;
  id v10 = 0LL;
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  void v4[2] = sub_10011F818;
  void v4[3] = &unk_1002458C0;
  id v8 = v9;
  id v5 = a1[4];
  id v6 = a1[5];
  id v7 = a1[6];
  [v3 do:v4];

  _Block_object_dispose(v9, 8);
}

void sub_10011F800( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

uint64_t sub_10011F818(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) scopeWithIdentifier:*(void *)(a1 + 40)]);
  uint64_t v5 = *(void *)(*(void *)(a1 + 56) + 8LL);
  id v6 = *(void **)(v5 + 40);
  *(void *)(v5 + 40) = v4;

  uint64_t v7 = *(void *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 40LL);
  if (v7)
  {
    uint64_t result = (uint64_t)[*(id *)(a1 + 48) canActivateScope:v7 error:a2];
    if ((_DWORD)result) {
      return (uint64_t)_[*(id *)(a1 + 32) deactivateScope:*(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) error:a2];
    }
  }

  else
  {
    if (!_CPLSilentLogging)
    {
      id v9 = sub_10011CDF4();
      id v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v11 = *(void *)(a1 + 40);
        int v12 = 138412290;
        uint64_t v13 = v11;
        _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "Disabling unknown scope %@",  (uint8_t *)&v12,  0xCu);
      }
    }

    return 1LL;
  }

  return result;
}

void sub_10011F954(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void **)(*(void *)(a1 + 32) + 104LL);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472LL;
  v9[2] = sub_10011FA68;
  v9[3] = &unk_10023EA48;
  id v12 = *(id *)(a1 + 48);
  id v10 = v3;
  id v11 = *(id *)(a1 + 40);
  uint64_t v5 = v9;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_10013AA68;
  block[3] = &unk_10023DBC8;
  id v14 = v5;
  id v6 = v4;
  id v7 = v3;
  dispatch_block_t v8 = dispatch_block_create(DISPATCH_BLOCK_ENFORCE_QOS_CLASS|DISPATCH_BLOCK_ASSIGN_CURRENT, block);
  dispatch_async(v6, v8);
}

id sub_10011FA68(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  if (v2)
  {
    id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) error]);
    (*(void (**)(uint64_t, void *))(v2 + 16))(v2, v3);
  }

  return [*(id *)(a1 + 40) unblock];
}

void sub_10011FBC4(uint64_t a1, void *a2)
{
  id v5 = a2;
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) scopeWithIdentifier:*(void *)(a1 + 40)]);
  if (v3)
  {
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472LL;
    void v6[2] = sub_10011FCA0;
    v6[3] = &unk_1002458E8;
    id v7 = *(id *)(a1 + 32);
    id v8 = v3;
    [v5 do:v6];

    uint64_t v4 = v7;
  }

  else
  {
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue( +[CPLErrors cplErrorWithCode:description:]( &OBJC_CLASS___CPLErrors,  "cplErrorWithCode:description:",  2001LL,  @"%@ is unknown",  *(void *)(a1 + 40)));
    [v5 setError:v4];
  }
}

id sub_10011FCA0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) flagsForScope:*(void *)(a1 + 40)]);
  [v4 setValue:1 forFlag:0x20000];
  id v5 = [*(id *)(a1 + 32) updateFlags:v4 forScope:*(void *)(a1 + 40) error:a2];

  return v5;
}

void sub_10011FD04(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = (id)objc_claimAutoreleasedReturnValue([a2 error]);
  (*(void (**)(uint64_t, id))(v2 + 16))(v2, v3);
}

void sub_10011FEF8(uint64_t a1, void *a2)
{
  id v31 = a2;
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) abstractObject]);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 resourceProgressDelegate]);
  id v32 = v3;
  if ((objc_opt_respondsToSelector(v4, "libraryManager:downloadDidProgress:forResourceTransferTask:") & 1) != 0)
  {
    v50[0] = _NSConcreteStackBlock;
    v50[1] = 3221225472LL;
    v50[2] = sub_1001203B4;
    v50[3] = &unk_100245938;
    v50[4] = *(void *)(a1 + 32);
    id v51 = v4;
    id v52 = v3;
    id v5 = objc_retainBlock(v50);
  }

  else
  {
    id v5 = 0LL;
  }

  uint64_t v44 = 0LL;
  id v45 = &v44;
  uint64_t v46 = 0x3032000000LL;
  uint64_t v47 = sub_10011D36C;
  uint64_t v48 = sub_10011D37C;
  id v49 = 0LL;
  id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) downloadQueue]);
  uint64_t v7 = *(void *)(a1 + 48);
  uint64_t v8 = *(void *)(a1 + 56);
  id v9 = v5;
  uint64_t v10 = *(void *)(a1 + 64);
  uint64_t v11 = *(void *)(a1 + 72);
  v41[0] = _NSConcreteStackBlock;
  v41[1] = 3221225472LL;
  v41[2] = sub_1001204DC;
  v41[3] = &unk_100245960;
  v41[4] = *(void *)(a1 + 32);
  id v30 = v4;
  id v42 = v30;
  id v43 = v32;
  v38[0] = _NSConcreteStackBlock;
  v38[1] = 3221225472LL;
  _OWORD v38[2] = sub_1001205F8;
  v38[3] = &unk_1002459B0;
  v38[4] = *(void *)(a1 + 32);
  id v12 = v43;
  id v39 = v12;
  uint64_t v40 = &v44;
  uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue( [v6 downloadTaskForLocalResource:v7 clientBundleID:v8 options:v10 proposedTaskIdentifier:v11 didStartHandler:v41 progressH andler:v9 completionHandler:v38]);

  if (v13)
  {
    if ([*(id *)(a1 + 64) shouldKeepPower])
    {
      id v14 = +[CPLTransaction newTransactionWithIdentifier:description:keepPower:]( &OBJC_CLASS___CPLTransaction,  "newTransactionWithIdentifier:description:keepPower:",  @"cpl.downloadresource",  @"client downloading resources",  1LL);
      id v15 = (void *)v45[5];
      v45[5] = (uint64_t)v14;
    }

    id v16 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 96) syncManager]);
    [v16 beginClientWork:@"client downloading resources"];

    __int128 v17 = *(void **)(*(void *)(a1 + 32) + 104LL);
    v35[0] = _NSConcreteStackBlock;
    v35[1] = 3221225472LL;
    v35[2] = sub_1001207E8;
    v35[3] = &unk_10023DFE0;
    id v37 = *(id *)(a1 + 80);
    id v18 = v13;
    id v36 = v18;
    id v19 = v35;
    *(void *)&__int128 block = _NSConcreteStackBlock;
    *((void *)&block + 1) = 3221225472LL;
    uint64_t v54 = sub_10013AA68;
    uint64_t v55 = &unk_10023DBC8;
    id v56 = v19;
    uint64_t v20 = v17;
    dispatch_block_t v21 = dispatch_block_create(DISPATCH_BLOCK_ENFORCE_QOS_CLASS|DISPATCH_BLOCK_ASSIGN_CURRENT, &block);
    dispatch_async(v20, v21);

    [v18 launch];
    __int128 v22 = &v37;
  }

  else
  {
    if (!_CPLSilentLogging)
    {
      id v23 = sub_10011CDF4();
      __int128 v24 = (os_log_s *)objc_claimAutoreleasedReturnValue(v23);
      if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
      {
        uint64_t v25 = *(void *)(a1 + 48);
        LODWORD(block) = 138412290;
        *(void *)((char *)&block + 4) = v25;
        _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_ERROR,  "Can't get a task to download %@",  (uint8_t *)&block,  0xCu);
      }
    }

    __int128 v26 = *(void **)(*(void *)(a1 + 32) + 104LL);
    v33[0] = _NSConcreteStackBlock;
    v33[1] = 3221225472LL;
    v33[2] = sub_1001207F8;
    v33[3] = &unk_10023DBC8;
    id v34 = *(id *)(a1 + 80);
    uint64_t v27 = v33;
    *(void *)&__int128 block = _NSConcreteStackBlock;
    *((void *)&block + 1) = 3221225472LL;
    uint64_t v54 = sub_10013AA68;
    uint64_t v55 = &unk_10023DBC8;
    id v56 = v27;
    uint64_t v28 = v26;
    dispatch_block_t v29 = dispatch_block_create(DISPATCH_BLOCK_ENFORCE_QOS_CLASS|DISPATCH_BLOCK_ASSIGN_CURRENT, &block);
    dispatch_async(v28, v29);

    __int128 v22 = &v34;
  }

  _Block_object_dispose(&v44, 8);
}

void sub_100120394( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, char a38)
{
}

void sub_1001203B4(uint64_t a1, void *a2, float a3)
{
  id v5 = a2;
  id v6 = *(void **)(a1 + 40);
  uint64_t v7 = *(void **)(*(void *)(a1 + 32) + 104LL);
  v13[2] = sub_1001204C8;
  v13[3] = &unk_10023ED50;
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472LL;
  id v14 = v6;
  id v8 = *(id *)(a1 + 48);
  float v17 = a3;
  id v15 = v8;
  id v16 = v5;
  id v9 = v13;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_10013AA68;
  block[3] = &unk_10023DBC8;
  id v19 = v9;
  uint64_t v10 = v7;
  id v11 = v5;
  dispatch_block_t v12 = dispatch_block_create(DISPATCH_BLOCK_ENFORCE_QOS_CLASS|DISPATCH_BLOCK_ASSIGN_CURRENT, block);
  dispatch_async(v10, v12);
}

id sub_1001204C8(uint64_t a1, double a2)
{
  LODWORD(a2) = *(_DWORD *)(a1 + 56);
  return _[*(id *)(a1 + 32) libraryManager:*(void *)(a1 + 40) downloadDidProgress:*(void *)(a1 + 48) forResourceTransferTask:a2];
}

void sub_1001204DC(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void **)(a1 + 40);
  id v5 = *(void **)(*(void *)(a1 + 32) + 104LL);
  v10[2] = sub_1001205E8;
  v10[3] = &unk_10023DE80;
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472LL;
  id v11 = v4;
  id v12 = *(id *)(a1 + 48);
  id v13 = v3;
  id v6 = v10;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_10013AA68;
  block[3] = &unk_10023DBC8;
  id v15 = v6;
  uint64_t v7 = v5;
  id v8 = v3;
  dispatch_block_t v9 = dispatch_block_create(DISPATCH_BLOCK_ENFORCE_QOS_CLASS|DISPATCH_BLOCK_ASSIGN_CURRENT, block);
  dispatch_async(v7, v9);
}

id sub_1001205E8(uint64_t a1)
{
  return _[*(id *)(a1 + 32) libraryManager:*(void *)(a1 + 40) downloadDidStartForResourceTransferTask:*(void *)(a1 + 48)];
}

void sub_1001205F8(void *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1[4] + 96) syncManager]);
  [v7 endClientWork:@"client downloading resources"];

  id v8 = (void *)a1[5];
  dispatch_block_t v9 = *(void **)(a1[4] + 104LL);
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3221225472LL;
  v16[2] = sub_10012074C;
  v16[3] = &unk_100245988;
  id v17 = v8;
  id v18 = v5;
  uint64_t v10 = a1[6];
  id v19 = v6;
  uint64_t v20 = v10;
  id v11 = v16;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_10013AA68;
  block[3] = &unk_10023DBC8;
  id v22 = v11;
  id v12 = v9;
  id v13 = v6;
  id v14 = v5;
  dispatch_block_t v15 = dispatch_block_create(DISPATCH_BLOCK_ENFORCE_QOS_CLASS|DISPATCH_BLOCK_ASSIGN_CURRENT, block);
  dispatch_async(v12, v15);
}

id sub_10012074C(void *a1)
{
  uint64_t v2 = (void *)a1[4];
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 resourceProgressDelegate]);
  uint64_t v4 = (void *)a1[5];
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v4 resource]);
  uint64_t v6 = a1[6];
  id v7 = v4;
  id v8 = v2;
  [v3 libraryManager:v8 downloadDidFinishForResourceTransferTask:v7 finalResource:v5 withError:v6];

  return _[*(id *)(*(void *)(a1[7] + 8) + 40) endTransaction];
}

uint64_t sub_1001207E8(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  *(void *)(a1 + 32));
}

uint64_t sub_1001207F8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_100120BA0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = (id)objc_claimAutoreleasedReturnValue( +[CPLErrors cplErrorWithCode:description:]( &OBJC_CLASS___CPLErrors,  "cplErrorWithCode:description:",  1013LL,  @"Network is constrained. We should avoid autoplay"));
  (*(void (**)(uint64_t, void, void, void, void, id))(v1 + 16))(v1, 0LL, 0LL, 0LL, 0LL, v2);
}

void sub_100120C08(uint64_t a1, void *a2)
{
  id v3 = (void *)objc_claimAutoreleasedReturnValue([a2 error]);
  if (v3)
  {
    uint64_t v4 = *(void **)(*(void *)(a1 + 32) + 104LL);
    v54[0] = _NSConcreteStackBlock;
    v54[1] = 3221225472LL;
    v54[2] = sub_100120FF4;
    v54[3] = &unk_10023EA48;
    id v57 = *(id *)(a1 + 88);
    id v55 = v3;
    id v56 = *(id *)(a1 + 40);
    *(void *)&__int128 block = _NSConcreteStackBlock;
    *((void *)&block + 1) = 3221225472LL;
    *(void *)&__int128 v44 = sub_10013AA68;
    *((void *)&v44 + 1) = &unk_10023DBC8;
    *(void *)&__int128 v45 = v54;
    id v5 = v4;
    dispatch_block_t v6 = dispatch_block_create(DISPATCH_BLOCK_ENFORCE_QOS_CLASS|DISPATCH_BLOCK_ASSIGN_CURRENT, &block);
    dispatch_async(v5, v6);

    id v7 = v57;
  }

  else
  {
    id v8 = *(void **)(a1 + 56);
    id v9 = *(id *)(a1 + 48);
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v8 transactionTransportScopeMapping]);
    id v11 = *(void **)(a1 + 64);
    id v51 = 0LL;
    id v52 = v9;
    id v50 = 0LL;
    uint64_t v12 = objc_claimAutoreleasedReturnValue( [v11 cloudResourceForLocalResource:&v52 cloudRecord:0 target:&v51 shouldNotTrustCaches:&v53 allowUnsafeClientCache:1 transportScopeMapping:v10 error:&v50]);
    id v7 = v52;

    id v13 = v51;
    id v14 = v50;
    uint64_t v15 = *(void *)(a1 + 32);
    if (v12)
    {
      id v16 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v15 + 96) transport]);
      id v35 = v14;
      uint64_t v18 = *(void *)(a1 + 72);
      uint64_t v17 = *(void *)(a1 + 80);
      v46[0] = _NSConcreteStackBlock;
      v46[1] = 3221225472LL;
      v46[2] = sub_100121040;
      v46[3] = &unk_100245A88;
      id v36 = &v49;
      id v19 = (void *)v12;
      id v20 = v13;
      dispatch_block_t v21 = v10;
      uint64_t v22 = *(void *)(a1 + 96);
      id v23 = *(id *)(a1 + 88);
      uint64_t v24 = *(void *)(a1 + 32);
      id v49 = v23;
      v46[4] = v24;
      id v47 = *(id *)(a1 + 48);
      id v48 = *(id *)(a1 + 40);
      __int128 v25 = *(_OWORD *)(a1 + 120);
      __int128 block = *(_OWORD *)(a1 + 104);
      __int128 v44 = v25;
      __int128 v45 = *(_OWORD *)(a1 + 136);
      uint64_t v26 = v22;
      uint64_t v10 = v21;
      id v13 = v20;
      uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue( [v16 getStreamingURLTaskForResource:v19 intent:v26 hints:v18 timeRange:&block target:v20 transportScopeMapping:v10 clientBundleI D:v17 completionHandler:v46]);

      v41[0] = _NSConcreteStackBlock;
      v41[1] = 3221225472LL;
      v41[2] = sub_1001212E0;
      v41[3] = &unk_10023DDE8;
      uint64_t v28 = *(void **)(a1 + 40);
      v41[4] = *(void *)(a1 + 32);
      id v42 = v27;
      id v29 = v27;
      id v14 = v35;
      id v30 = v29;
      [v28 performAsCurrentWithPendingUnitCount:1 usingBlock:v41];
    }

    else
    {
      id v31 = *(void **)(v15 + 104);
      v37[1] = 3221225472LL;
      v37[2] = sub_100121328;
      v37[3] = &unk_10023EA48;
      id v36 = &v40;
      v37[0] = _NSConcreteStackBlock;
      id v40 = *(id *)(a1 + 88);
      id v38 = v14;
      id v39 = *(id *)(a1 + 40);
      id v32 = v37;
      *(void *)&__int128 block = _NSConcreteStackBlock;
      *((void *)&block + 1) = 3221225472LL;
      *(void *)&__int128 v44 = sub_10013AA68;
      *((void *)&v44 + 1) = &unk_10023DBC8;
      *(void *)&__int128 v45 = v32;
      id v33 = v31;
      dispatch_block_t v34 = dispatch_block_create(DISPATCH_BLOCK_ENFORCE_QOS_CLASS|DISPATCH_BLOCK_ASSIGN_CURRENT, &block);
      dispatch_async(v33, v34);

      id v19 = 0LL;
    }
  }
}

id sub_100120FF4(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 40), "setCompletedUnitCount:", objc_msgSend(*(id *)(a1 + 40), "totalUnitCount"));
}

void sub_100121040(uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6)
{
  id v11 = a2;
  id v12 = a3;
  id v13 = a4;
  id v14 = a5;
  id v15 = a6;
  id v16 = v15;
  if (*(void *)(a1 + 56))
  {
    uint64_t v17 = *(void **)(*(void *)(a1 + 32) + 104LL);
    dispatch_block_t v21 = _NSConcreteStackBlock;
    uint64_t v22 = 3221225472LL;
    id v23 = sub_1001211FC;
    uint64_t v24 = &unk_100245A60;
    id v25 = v15;
    id v26 = *(id *)(a1 + 40);
    id v31 = *(id *)(a1 + 56);
    id v27 = v11;
    id v28 = v12;
    id v29 = v13;
    id v30 = v14;
    uint64_t v18 = &v21;
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_10013AA68;
    block[3] = &unk_10023DBC8;
    id v33 = v18;
    id v19 = v17;
    dispatch_block_t v20 = dispatch_block_create(DISPATCH_BLOCK_ENFORCE_QOS_CLASS|DISPATCH_BLOCK_ASSIGN_CURRENT, block);
    dispatch_async(v19, v20);
  }

  objc_msgSend( *(id *)(a1 + 48),  "setCompletedUnitCount:",  objc_msgSend(*(id *)(a1 + 48), "totalUnitCount", v21, v22, v23, v24));
}

uint64_t sub_1001211FC(void *a1)
{
  if (a1[4]) {
    BOOL v2 = _CPLSilentLogging == 0;
  }
  else {
    BOOL v2 = 0;
  }
  if (v2)
  {
    id v3 = sub_10011CDF4();
    uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      uint64_t v6 = a1[4];
      uint64_t v5 = a1[5];
      int v8 = 138412546;
      uint64_t v9 = v5;
      __int16 v10 = 2112;
      uint64_t v11 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_ERROR,  "Getting a streaming URL for %@ failed: %@",  (uint8_t *)&v8,  0x16u);
    }
  }

  return (*(uint64_t (**)(void))(a1[10] + 16LL))();
}

id sub_1001212E0(uint64_t a1)
{
  BOOL v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 96) syncManager]);
  [v2 configureDirectTransportTask:*(void *)(a1 + 40)];

  return [*(id *)(a1 + 40) runWithNoSyncSession];
}

id sub_100121328(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 40), "setCompletedUnitCount:", objc_msgSend(*(id *)(a1 + 40), "totalUnitCount"));
}

void sub_100121374(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = (id)objc_claimAutoreleasedReturnValue( +[CPLErrors incorrectParametersErrorForParameter:]( &OBJC_CLASS___CPLErrors,  "incorrectParametersErrorForParameter:",  @"itemScopedIdentifier"));
  (*(void (**)(uint64_t, void, void, void, void, id))(v1 + 16))(v1, 0LL, 0LL, 0LL, 0LL, v2);
}

void sub_100121544(uint64_t a1)
{
  id v2 = *(id **)(a1 + 32);
  if (v2[7])
  {
    [v2[7] cancel];
    uint64_t v3 = *(void *)(a1 + 32);
    uint64_t v4 = *(void **)(v3 + 56);
    *(void *)(v3 + 56) = 0LL;

    id v2 = *(id **)(a1 + 32);
  }

  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v2 engineLibrary]);
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v5 transport]);

  uint64_t v18 = 0LL;
  id v19 = (id *)&v18;
  uint64_t v20 = 0x3032000000LL;
  dispatch_block_t v21 = sub_10011D36C;
  uint64_t v22 = sub_10011D37C;
  id v23 = 0LL;
  uint64_t v8 = *(void *)(a1 + 56);
  uint64_t v7 = *(void *)(a1 + 64);
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472LL;
  v14[2] = sub_1001216FC;
  v14[3] = &unk_100245B00;
  void v14[4] = *(void *)(a1 + 32);
  id v16 = *(id *)(a1 + 48);
  uint64_t v17 = &v18;
  id v15 = *(id *)(a1 + 40);
  uint64_t v9 = objc_claimAutoreleasedReturnValue([v6 rampingRequestTaskForResourceType:v8 numRequested:v7 completionHandler:v14]);
  uint64_t v10 = *(void *)(a1 + 32);
  uint64_t v11 = *(void **)(v10 + 56);
  *(void *)(v10 + 56) = v9;

  objc_storeStrong(v19 + 5, *(id *)(*(void *)(a1 + 32) + 56LL));
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472LL;
  v13[2] = sub_1001218B4;
  v13[3] = &unk_10023DC70;
  id v12 = *(void **)(a1 + 40);
  void v13[4] = *(void *)(a1 + 32);
  [v12 performAsCurrentWithPendingUnitCount:1 usingBlock:v13];

  _Block_object_dispose(&v18, 8);
}

void sub_1001216E4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
}

void sub_1001216FC(uint64_t a1, char a2, uint64_t a3, void *a4)
{
  id v7 = a4;
  uint64_t v8 = *(void **)(*(void *)(a1 + 32) + 104LL);
  v17[0] = _NSConcreteStackBlock;
  v17[1] = 3221225472LL;
  v17[2] = sub_10012182C;
  v17[3] = &unk_100245AD8;
  id v9 = *(id *)(a1 + 48);
  char v24 = a2;
  uint64_t v10 = *(void *)(a1 + 56);
  id v21 = v9;
  uint64_t v22 = v10;
  uint64_t v23 = a3;
  uint64_t v11 = *(void *)(a1 + 32);
  id v12 = *(void **)(a1 + 40);
  id v18 = v7;
  uint64_t v19 = v11;
  id v20 = v12;
  id v13 = v17;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_10013AA68;
  block[3] = &unk_10023DBC8;
  id v26 = v13;
  id v14 = v8;
  id v15 = v7;
  dispatch_block_t v16 = dispatch_block_create(DISPATCH_BLOCK_ENFORCE_QOS_CLASS|DISPATCH_BLOCK_ASSIGN_CURRENT, block);
  dispatch_async(v14, v16);
}

id sub_10012182C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 56);
  if (v2) {
    (*(void (**)(uint64_t, void, void, void))(v2 + 16))( v2,  *(unsigned __int8 *)(a1 + 80),  *(void *)(a1 + 72),  *(void *)(a1 + 32));
  }
  uint64_t v3 = *(void *)(*(void *)(a1 + 64) + 8LL);
  uint64_t v4 = *(void **)(v3 + 40);
  uint64_t v5 = *(void *)(a1 + 40);
  if (v4 == *(void **)(v5 + 56))
  {
    *(void *)(v5 + 56) = 0LL;

    uint64_t v3 = *(void *)(*(void *)(a1 + 64) + 8LL);
    uint64_t v4 = *(void **)(v3 + 40);
  }

  *(void *)(v3 + 40) = 0LL;

  return objc_msgSend(*(id *)(a1 + 48), "setCompletedUnitCount:", objc_msgSend(*(id *)(a1 + 48), "totalUnitCount"));
}

id sub_1001218B4(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) engineLibrary]);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([v2 syncManager]);
  [v3 configureDirectTransportTask:*(void *)(*(void *)(a1 + 32) + 56)];

  return [*(id *)(*(void *)(a1 + 32) + 56) runWithNoSyncSession];
}

void sub_100121A40(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) abstractObject]);
  uint64_t v63 = 0LL;
  unint64_t v64 = &v63;
  uint64_t v65 = 0x3032000000LL;
  uint64_t v66 = sub_10011D36C;
  char v67 = sub_10011D37C;
  id v68 = 0LL;
  v61[0] = _NSConcreteStackBlock;
  v61[1] = 3221225472LL;
  v61[2] = sub_100121F70;
  v61[3] = &unk_100245B78;
  v61[4] = *(void *)(a1 + 32);
  id v5 = v4;
  id v62 = v5;
  uint64_t v6 = objc_retainBlock(v61);
  id v7 = (void *)objc_claimAutoreleasedReturnValue([v3 error]);
  if (!v7)
  {
    id v41 = v3;
    id v12 = *(id *)(a1 + 40);
    id v13 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) transactionTransportScopeMapping]);
    id v14 = *(void **)(a1 + 56);
    id v59 = 0LL;
    id v60 = v12;
    id v57 = 0LL;
    id v58 = 0LL;
    id v15 = (void *)objc_claimAutoreleasedReturnValue( [v14 cloudResourceForLocalResource:&v60 cloudRecord:&v59 target:&v58 shouldNotTrustCaches:block allowUnsafeClientCache:0 trans portScopeMapping:v13 error:&v57]);
    id v44 = v60;

    id v16 = v59;
    id v43 = v58;
    id v11 = v57;
    id v42 = v16;
    if (!v15 || v16)
    {
      if (v15)
      {
        id v40 = v13;
        id v18 = (void *)objc_claimAutoreleasedReturnValue([v15 itemScopedIdentifier]);
        uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue([v18 scopeIdentifier]);
        id v20 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) scopes]);
        id v56 = 0LL;
        unsigned int v38 = [v40 addTransportScopeForScopeIdentifier:v19 scopes:v20 useStagingScopeIfNecessary:1 error:&v56];
        id v21 = v56;

        if (v38)
        {
          id v39 = objc_alloc(&OBJC_CLASS___CPLInMemoryResourceDownloadTask);
          uint64_t v22 = v21;
          uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue(+[NSUUID UUID](&OBJC_CLASS___NSUUID, "UUID"));
          char v24 = (void *)objc_claimAutoreleasedReturnValue([v23 UUIDString]);
          v52[0] = _NSConcreteStackBlock;
          v52[1] = 3221225472LL;
          v52[2] = sub_100122170;
          v52[3] = &unk_100245BC8;
          void v52[4] = *(void *)(a1 + 32);
          id v53 = v43;
          id v54 = v40;
          id v55 = *(id *)(a1 + 64);
          v49[0] = _NSConcreteStackBlock;
          v49[1] = 3221225472LL;
          v49[2] = sub_100122290;
          v49[3] = &unk_100245C18;
          v49[4] = *(void *)(a1 + 32);
          id v51 = &v63;
          id v50 = v5;
          id v25 = -[CPLInMemoryResourceDownloadTask initWithResource:taskIdentifier:launchHandler:completionHandler:]( v39,  "initWithResource:taskIdentifier:launchHandler:completionHandler:",  v44,  v24,  v52,  v49);
          id v26 = (void *)v64[5];
          v64[5] = (uint64_t)v25;

          [(id)v64[5] associateCloudResource:v15 ofRecord:v42];
          [(id)v64[5] setHighPriority:0];
          [(id)v64[5] setClientBundleID:*(void *)(a1 + 64)];
        }

        else
        {
          uint64_t v30 = ((uint64_t (*)(void *, id, id))v6[2])(v6, v21, v44);
          uint64_t v31 = objc_claimAutoreleasedReturnValue(v30);
          uint64_t v22 = v21;
          id v32 = (void *)v64[5];
          v64[5] = v31;
        }

        char v10 = 1;
        id v13 = v40;
LABEL_14:

        id v3 = v41;
        goto LABEL_15;
      }
    }

    else
    {

      uint64_t v17 = objc_claimAutoreleasedReturnValue( +[CPLErrors cplErrorWithCode:description:]( &OBJC_CLASS___CPLErrors,  "cplErrorWithCode:description:",  25LL,  @"Record is not found in storage"));
      id v11 = (id)v17;
    }

    id v27 = v44;
    if (!v44) {
      id v27 = *(id *)(a1 + 40);
    }
    uint64_t v28 = ((uint64_t (*)(void *, id, id))v6[2])(v6, v11, v27);
    uint64_t v29 = objc_claimAutoreleasedReturnValue(v28);
    char v10 = 0;
    id v15 = (void *)v64[5];
    v64[5] = v29;
    goto LABEL_14;
  }

  uint64_t v8 = ((uint64_t (*)(void *, void *, void))v6[2])(v6, v7, *(void *)(a1 + 40));
  uint64_t v9 = objc_claimAutoreleasedReturnValue(v8);
  char v10 = 0;
  id v11 = (id)v64[5];
  v64[5] = v9;
LABEL_15:

  uint64_t v33 = *(void *)(a1 + 32);
  dispatch_block_t v34 = *(void **)(v33 + 104);
  v45[0] = _NSConcreteStackBlock;
  v45[1] = 3221225472LL;
  v45[2] = sub_100122464;
  v45[3] = &unk_100245C40;
  char v48 = v10;
  v45[4] = v33;
  id v47 = &v63;
  id v46 = *(id *)(a1 + 72);
  id v35 = v45;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_10013AA68;
  block[3] = &unk_10023DBC8;
  id v70 = v35;
  id v36 = v34;
  dispatch_block_t v37 = dispatch_block_create(DISPATCH_BLOCK_ENFORCE_QOS_CLASS|DISPATCH_BLOCK_ASSIGN_CURRENT, block);
  dispatch_async(v36, v37);

  _Block_object_dispose(&v63, 8);
}

void sub_100121F4C(_Unwind_Exception *a1)
{
}

id sub_100121F70(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  v8[2] = sub_10012200C;
  v8[3] = &unk_100245B50;
  id v5 = *(void **)(a1 + 40);
  void v8[4] = *(void *)(a1 + 32);
  id v9 = v5;
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue( +[CPLInMemoryResourceDownloadTask failedTaskForResource:error:completionHandler:]( &OBJC_CLASS___CPLInMemoryResourceDownloadTask,  "failedTaskForResource:error:completionHandler:",  a3,  a2,  v8));

  return v6;
}

void sub_10012200C(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v6 = a2;
  id v7 = a4;
  uint64_t v8 = *(void **)(a1 + 40);
  id v9 = *(void **)(*(void *)(a1 + 32) + 104LL);
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472LL;
  v15[2] = sub_100122128;
  v15[3] = &unk_10023DE80;
  id v16 = v8;
  id v17 = v6;
  id v18 = v7;
  char v10 = v15;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_10013AA68;
  block[3] = &unk_10023DBC8;
  id v20 = v10;
  id v11 = v9;
  id v12 = v7;
  id v13 = v6;
  dispatch_block_t v14 = dispatch_block_create(DISPATCH_BLOCK_ENFORCE_QOS_CLASS|DISPATCH_BLOCK_ASSIGN_CURRENT, block);
  dispatch_async(v11, v14);
}

void sub_100122128(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) resourceProgressDelegate]);
  [v2 libraryManager:*(void *)(a1 + 32) inMemoryDownloadDidFinishForResourceTransferTask:*(void *)(a1 + 40) data:0 withError:*(void *)(a1 + 48)];
}

void sub_100122170(void *a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1[4] + 96) transport]);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v3 cloudResource]);
  id v6 = (void *)objc_claimAutoreleasedReturnValue([v3 cloudRecord]);
  uint64_t v7 = a1[5];
  uint64_t v8 = a1[6];
  uint64_t v9 = a1[7];
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472LL;
  v12[2] = sub_100122280;
  v12[3] = &unk_100245BA0;
  id v13 = v3;
  id v10 = v3;
  id v11 = (void *)objc_claimAutoreleasedReturnValue( [v4 inMemoryDownloadTaskForResource:v5 record:v6 target:v7 transportScopeMapping:v8 clientBundleID:v9 completionHandler:v12]);

  [v10 launchTransportTask:v11];
}

id sub_100122280(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _[*(id *)(a1 + 32) finishWithData:a2 error:a3];
}

void sub_100122290(void *a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  uint64_t v10 = a1[4];
  id v11 = (void *)a1[5];
  id v12 = *(void **)(v10 + 104);
  v19[2] = sub_1001223E0;
  v19[3] = &unk_100245BF0;
  v19[0] = _NSConcreteStackBlock;
  v19[1] = 3221225472LL;
  uint64_t v24 = a1[6];
  v19[4] = v10;
  id v20 = v11;
  id v21 = v7;
  id v22 = v8;
  id v23 = v9;
  id v13 = v19;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_10013AA68;
  block[3] = &unk_10023DBC8;
  id v26 = v13;
  dispatch_block_t v14 = v12;
  id v15 = v9;
  id v16 = v8;
  id v17 = v7;
  dispatch_block_t v18 = dispatch_block_create(DISPATCH_BLOCK_ENFORCE_QOS_CLASS|DISPATCH_BLOCK_ASSIGN_CURRENT, block);
  dispatch_async(v14, v18);
}

void sub_1001223E0(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)(a1 + 72) + 8LL);
  id v3 = *(void **)(v2 + 40);
  uint64_t v4 = *(void *)(a1 + 32);
  if (v3 == *(void **)(v4 + 64))
  {
    *(void *)(v4 + 64) = 0LL;

    uint64_t v2 = *(void *)(*(void *)(a1 + 72) + 8LL);
    id v3 = *(void **)(v2 + 40);
  }

  *(void *)(v2 + 40) = 0LL;

  id v5 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) resourceProgressDelegate]);
  [v5 libraryManager:*(void *)(a1 + 40) inMemoryDownloadDidFinishForResourceTransferTask:*(void *)(a1 + 48) data:*(void *)(a1 + 56) withError:*(void *)(a1 + 64)];
}

id sub_100122464(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 56))
  {
    uint64_t v2 = *(void *)(a1 + 32);
    id v3 = *(void **)(v2 + 64);
    if (v3)
    {
      [v3 cancelTask];
      uint64_t v2 = *(void *)(a1 + 32);
    }

    objc_storeStrong((id *)(v2 + 64), *(id *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 40LL));
  }

  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
  return [*(id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) launch];
}

void sub_100122624(id *a1, void *a2)
{
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  void v4[2] = sub_1001226BC;
  void v4[3] = &unk_100245C90;
  id v5 = a1[4];
  id v6 = a1[5];
  id v7 = a1[6];
  [a2 do:v4];
}

uint64_t sub_1001226BC(id *a1)
{
  __int128 v10 = 0u;
  __int128 v11 = 0u;
  __int128 v12 = 0u;
  __int128 v13 = 0u;
  id v2 = a1[4];
  id v3 = [v2 countByEnumeratingWithState:&v10 objects:v14 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v11;
    do
    {
      for (unint64_t i = 0LL; i != v4; unint64_t i = (char *)i + 1)
      {
        if (*(void *)v11 != v5) {
          objc_enumerationMutation(v2);
        }
        uint64_t v7 = *(void *)(*((void *)&v10 + 1) + 8LL * (void)i);
        id v8 = (void *)objc_claimAutoreleasedReturnValue( objc_msgSend( a1[5],  "localScopedIdentifierForCloudScopedIdentifierIncludeRemappedRecords:",  v7,  (void)v10));
        if (v8) {
          [a1[6] setObject:v8 forKey:v7];
        }
      }

      id v4 = [v2 countByEnumeratingWithState:&v10 objects:v14 count:16];
    }

    while (v4);
  }

  return 1LL;
}

void sub_1001227DC(uint64_t a1, void *a2)
{
  id v6 = a2;
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v6 error]);

  uint64_t v4 = *(void *)(a1 + 40);
  if (v3)
  {
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v6 error]);
    (*(void (**)(uint64_t, void, void *))(v4 + 16))(v4, 0LL, v5);
  }

  else
  {
    (*(void (**)(void, void, void))(v4 + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32), 0LL);
  }
}

void sub_100122964(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 error]);

  if (!v4)
  {
    id v6 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
    __int128 v17 = 0u;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    __int128 v20 = 0u;
    id v7 = *(id *)(a1 + 32);
    id v8 = [v7 countByEnumeratingWithState:&v17 objects:v21 count:16];
    if (!v8) {
      goto LABEL_17;
    }
    id v9 = v8;
    uint64_t v10 = *(void *)v18;
    while (1)
    {
      for (unint64_t i = 0LL; i != v9; unint64_t i = (char *)i + 1)
      {
        if (*(void *)v18 != v10) {
          objc_enumerationMutation(v7);
        }
        uint64_t v12 = *(void *)(*((void *)&v17 + 1) + 8LL * (void)i);
        char v16 = 0;
        __int128 v13 = *(void **)(a1 + 40);
        if (!*(_BYTE *)(a1 + 56))
        {
          id v15 = (void *)objc_claimAutoreleasedReturnValue([v13 localScopedIdentifierForCloudScopedIdentifier:v12 isFinal:&v16]);
          if (!v15) {
            continue;
          }
LABEL_13:
          -[NSMutableDictionary setObject:forKey:](v6, "setObject:forKey:", v15, v12);
LABEL_14:

          continue;
        }

        uint64_t v14 = objc_claimAutoreleasedReturnValue([v13 cloudScopedIdentifierForLocalScopedIdentifier:v12 isFinal:&v16]);
        id v15 = (void *)v14;
        if (!v16) {
          goto LABEL_14;
        }
        if (v14) {
          goto LABEL_13;
        }
      }

      id v9 = [v7 countByEnumeratingWithState:&v17 objects:v21 count:16];
      if (!v9)
      {
LABEL_17:

        (*(void (**)(void, NSMutableDictionary *, void))(*(void *)(a1 + 48) + 16LL))( *(void *)(a1 + 48),  v6,  0LL);
        goto LABEL_18;
      }
    }
  }

  uint64_t v5 = *(void *)(a1 + 48);
  id v6 = (NSMutableDictionary *)objc_claimAutoreleasedReturnValue([v3 error]);
  (*(void (**)(uint64_t, void, NSMutableDictionary *))(v5 + 16))(v5, 0LL, v6);
LABEL_18:
}

void sub_100122DC0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (v1)
  {
    id v2 = (id)objc_claimAutoreleasedReturnValue(+[CPLErrors readOnlyError](&OBJC_CLASS___CPLErrors, "readOnlyError"));
    (*(void (**)(uint64_t, void, id))(v1 + 16))(v1, 0LL, v2);
  }

void sub_100122E24(uint64_t a1, void *a2)
{
  id v3 = a2;
  v25[0] = _NSConcreteStackBlock;
  v25[1] = 3221225472LL;
  v25[2] = sub_100123008;
  v25[3] = &unk_100245D08;
  id v28 = *(id *)(a1 + 64);
  id v4 = v3;
  id v26 = v4;
  id v27 = *(id *)(a1 + 32);
  uint64_t v5 = objc_retainBlock(v25);
  v18[0] = _NSConcreteStackBlock;
  v18[1] = 3221225472LL;
  v18[2] = sub_10012304C;
  v18[3] = &unk_100245E20;
  id v6 = *(void **)(a1 + 48);
  v18[4] = *(void *)(a1 + 40);
  id v7 = v6;
  uint64_t v8 = *(void *)(a1 + 72);
  id v19 = v7;
  uint64_t v24 = v8;
  id v20 = *(id *)(a1 + 56);
  id v9 = v4;
  id v21 = v9;
  uint64_t v10 = v5;
  id v23 = v10;
  id v22 = *(id *)(a1 + 32);
  __int128 v11 = objc_retainBlock(v18);
  if ([*(id *)(a1 + 48) scopeType] == (id)4)
  {
    uint64_t v12 = *(void **)(a1 + 56);
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472LL;
    v14[2] = sub_100123B58;
    v14[3] = &unk_100245E48;
    id v15 = v12;
    char v16 = v11;
    __int128 v17 = v10;
    id v13 = [v15 performReadTransactionWithBlock:v14];
  }

  else
  {
    ((void (*)(void *))v11[2])(v11);
  }
}

id sub_100123008(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  if (v2) {
    (*(void (**)(void))(v2 + 16))();
  }
  [*(id *)(a1 + 32) unblock];
  return objc_msgSend(*(id *)(a1 + 40), "setCompletedUnitCount:", objc_msgSend(*(id *)(a1 + 40), "totalUnitCount"));
}

void sub_10012304C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = *(void **)(a1 + 40);
  id v4 = *(void **)(v2 + 104);
  v10[2] = sub_100123184;
  v10[3] = &unk_100245E20;
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472LL;
  void v10[4] = v2;
  id v5 = v3;
  uint64_t v6 = *(void *)(a1 + 80);
  id v11 = v5;
  uint64_t v16 = v6;
  id v12 = *(id *)(a1 + 48);
  id v13 = *(id *)(a1 + 56);
  id v15 = *(id *)(a1 + 72);
  id v14 = *(id *)(a1 + 64);
  id v7 = v10;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_10013AA68;
  block[3] = &unk_10023DBC8;
  id v18 = v7;
  uint64_t v8 = v4;
  dispatch_block_t v9 = dispatch_block_create(DISPATCH_BLOCK_ENFORCE_QOS_CLASS|DISPATCH_BLOCK_ASSIGN_CURRENT, block);
  dispatch_async(v8, v9);
}

void sub_100123184(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) engineLibrary]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 transport]);

  v17[0] = 0LL;
  v17[1] = v17;
  v17[2] = 0x3032000000LL;
  v17[3] = sub_10011D36C;
  void v17[4] = sub_10011D37C;
  id v18 = 0LL;
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472LL;
  v11[2] = sub_10012331C;
  v11[3] = &unk_100245DF8;
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  uint64_t v16 = *(void *)(a1 + 80);
  v11[4] = v4;
  id v12 = *(id *)(a1 + 48);
  id v13 = *(id *)(a1 + 56);
  id v15 = v17;
  id v14 = *(id *)(a1 + 72);
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v3 createScopeTaskForScope:v5 completionHandler:v11]);
  id v7 = *(void **)(a1 + 64);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472LL;
  v9[2] = sub_100123B04;
  v9[3] = &unk_10023DDE8;
  void v9[4] = *(void *)(a1 + 32);
  id v8 = v6;
  id v10 = v8;
  [v7 performAsCurrentWithPendingUnitCount:1 usingBlock:v9];

  _Block_object_dispose(v17, 8);
}

void sub_100123304(_Unwind_Exception *a1)
{
}

void sub_10012331C(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  if (v9)
  {
    id v10 = *(void **)(*(void *)(a1 + 32) + 104LL);
    v24[0] = _NSConcreteStackBlock;
    v24[1] = 3221225472LL;
    v24[2] = sub_100123AF0;
    v24[3] = &unk_10023EA48;
    id v11 = &v27;
    id v27 = *(id *)(a1 + 56);
    id v12 = &v25;
    id v25 = v7;
    id v13 = &v26;
    id v26 = v9;
    id v14 = v24;
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_10013AA68;
    block[3] = &unk_10023DBC8;
    id v37 = v14;
    id v15 = v10;
    dispatch_block_t v16 = dispatch_block_create(DISPATCH_BLOCK_ENFORCE_QOS_CLASS|DISPATCH_BLOCK_ASSIGN_CURRENT, block);
    dispatch_async(v15, v16);

LABEL_5:
    return;
  }

  if (![v7 needsToSetScopeIdentifier])
  {
    uint64_t v17 = *(void *)(a1 + 48);
    id v23 = *(void **)(a1 + 40);
    v32[0] = _NSConcreteStackBlock;
    v32[1] = 3221225472LL;
    v32[2] = sub_100123560;
    v32[3] = &unk_100245D58;
    id v11 = &v33;
    id v18 = v7;
    id v33 = v18;
    id v12 = &v34;
    id v34 = *(id *)(a1 + 40);
    id v13 = (id *)v35;
    v35[0] = v8;
    v28[0] = _NSConcreteStackBlock;
    v28[1] = 3221225472LL;
    v28[2] = sub_1001237BC;
    v28[3] = &unk_100245DD0;
    __int128 v19 = *(_OWORD *)(a1 + 64);
    v35[1] = *(void *)(a1 + 64);
    __int128 v31 = v19;
    v28[4] = *(void *)(a1 + 32);
    id v29 = v18;
    id v30 = *(id *)(a1 + 56);
    id v20 = [v23 performWriteTransactionByPassBlocker:v17 withBlock:v32 completionHandler:v28];

    goto LABEL_5;
  }

  uint64_t v21 = sub_100198840(v7, a1);
  sub_100123560(v21, v22);
}

void sub_100123560(uint64_t a1, void *a2)
{
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  void v6[2] = sub_1001235FC;
  v6[3] = &unk_100245D30;
  id v7 = *(id *)(a1 + 32);
  id v8 = *(id *)(a1 + 40);
  id v4 = *(id *)(a1 + 48);
  uint64_t v5 = *(void *)(a1 + 56);
  id v9 = v4;
  uint64_t v10 = v5;
  [a2 do:v6];
}

uint64_t sub_1001235FC(uint64_t a1, uint64_t a2)
{
  id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) scopeIdentifier]);
  if (!_CPLSilentLogging)
  {
    id v5 = sub_10011CDF4();
    uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      int v16 = 138543362;
      uint64_t v17 = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Creating scope with identifier %{public}@ after publishing",  (uint8_t *)&v16,  0xCu);
    }
  }

  id v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) scopes]);
  unint64_t v8 = (unint64_t)[*(id *)(a1 + 32) defaultFlags];
  if (!objc_msgSend( v7,  "shouldAutoactivateScopeWithIdentifier:scopeType:",  v4,  objc_msgSend(*(id *)(a1 + 32), "scopeType"))) {
    v8 |= 0x10uLL;
  }
  uint64_t v9 = objc_claimAutoreleasedReturnValue( objc_msgSend( v7,  "createScopeWithIdentifier:scopeType:flags:transportScope:error:",  v4,  objc_msgSend(*(id *)(a1 + 32), "scopeType"),  v8,  *(void *)(a1 + 48),  a2));
  if (v9)
  {
    uint64_t v10 = (void *)v9;
    if ([v7 setPullFromTransportExpirationInterval:v9 scope:a2 error:86400.0]
      && [v7 storeScopeChange:*(void *)(a1 + 32) forScope:v10 error:a2])
    {
      uint64_t v11 = objc_claimAutoreleasedReturnValue([v7 scopeChangeForScope:v10]);
      uint64_t v12 = *(void *)(*(void *)(a1 + 56) + 8LL);
      id v13 = *(void **)(v12 + 40);
      *(void *)(v12 + 40) = v11;

      uint64_t v14 = 1LL;
    }

    else
    {
      uint64_t v14 = 0LL;
    }
  }

  else
  {
    uint64_t v14 = 0LL;
  }

  return v14;
}

void sub_1001237BC(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(*(void *)(*(void *)(a1 + 56) + 8LL) + 40LL);
  if (v4 && [v4 needsToSetScopeIdentifier])
  {
    sub_100198A08(a1 + 56, a1);
    goto LABEL_13;
  }

  id v5 = (void *)objc_claimAutoreleasedReturnValue([v3 error]);

  if (!v5)
  {
    if (*(void *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 40LL))
    {
      uint64_t v24 = *(void **)(*(void *)(a1 + 32) + 104LL);
      __int128 v31 = _NSConcreteStackBlock;
      *(void *)&__int128 v32 = 3221225472LL;
      *((void *)&v32 + 1) = sub_100123AD4;
      id v33 = &unk_100245DA8;
      id v18 = (id *)&v34;
      id v25 = *(id *)(a1 + 48);
      uint64_t v26 = *(void *)(a1 + 56);
      uint64_t v34 = (uint64_t)v25;
      uint64_t v35 = v26;
      id v27 = &v31;
      *(void *)__int128 buf = _NSConcreteStackBlock;
      *(void *)&buf[8] = 3221225472LL;
      *(void *)&buf[16] = sub_10013AA68;
      id v44 = &unk_10023DBC8;
      __int128 v45 = v27;
      id v28 = v24;
      dispatch_block_t v29 = dispatch_block_create(DISPATCH_BLOCK_ENFORCE_QOS_CLASS|DISPATCH_BLOCK_ASSIGN_CURRENT, buf);
      dispatch_async(v28, v29);

      goto LABEL_11;
    }

void sub_100123A80(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  uint64_t v2 = *(void *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 40LL);
  id v3 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) error]);
  (*(void (**)(uint64_t, uint64_t, id))(v1 + 16))(v1, v2, v3);
}

uint64_t sub_100123AD4(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 32) + 16LL))( *(void *)(a1 + 32),  *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL),  0LL);
}

uint64_t sub_100123AF0(void *a1)
{
  return (*(uint64_t (**)(void, void, void))(a1[6] + 16LL))(a1[6], a1[4], a1[5]);
}

id sub_100123B04(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) engineLibrary]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 syncManager]);
  [v3 configureDirectTransportTask:*(void *)(a1 + 40)];

  return [*(id *)(a1 + 40) runWithNoSyncSession];
}

void sub_100123B58(uint64_t a1)
{
  id v8 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) scopes]);
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([v8 primaryScope]);
  id v3 = @"iCPL scope has not been seen by CPL yet";
  if (v2) {
    id v4 = 0LL;
  }
  else {
    id v4 = @"iCPL scope has not been seen by CPL yet";
  }
  id v5 = v4;
  if (v2)
  {
    if ([v8 valueForFlag:16 forScope:v2])
    {
      id v3 = @"iCPL has not been activated by client";
    }

    else
    {
      uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v8 transportScopeForScope:v2]);

      if (v6)
      {
        (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
        goto LABEL_13;
      }

      id v3 = @"iCPL zone has not been fetched or created yet";
    }
  }

  if ([*(id *)(a1 + 32) hasPendingResetSync]) {
    id v3 = (__CFString *)objc_claimAutoreleasedReturnValue( -[__CFString stringByAppendingString:]( v3,  "stringByAppendingString:",  @" - maybe because of a reset sync"));
  }
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue( +[CPLErrors cplErrorWithCode:description:]( &OBJC_CLASS___CPLErrors,  "cplErrorWithCode:description:",  100LL,  @"Can't create a Shared Library: %@",  v3));
  (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();

LABEL_13:
}

void sub_100123E7C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (v1)
  {
    id v2 = (id)objc_claimAutoreleasedReturnValue(+[CPLErrors readOnlyError](&OBJC_CLASS___CPLErrors, "readOnlyError"));
    (*(void (**)(uint64_t, void, id))(v1 + 16))(v1, 0LL, v2);
  }

void sub_100123EE0(uint64_t a1, void *a2)
{
  id v3 = a2;
  v27[0] = _NSConcreteStackBlock;
  v27[1] = 3221225472LL;
  v27[2] = sub_1001240CC;
  v27[3] = &unk_100245D08;
  id v30 = *(id *)(a1 + 64);
  id v4 = v3;
  id v28 = v4;
  id v29 = *(id *)(a1 + 32);
  id v5 = objc_retainBlock(v27);
  v25[0] = 0LL;
  v25[1] = v25;
  v25[2] = 0x3032000000LL;
  v25[3] = sub_10011D36C;
  void v25[4] = sub_10011D37C;
  id v26 = 0LL;
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) scopes]);
  uint64_t v7 = *(void **)(a1 + 40);
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472LL;
  v15[2] = sub_100124110;
  v15[3] = &unk_100245F10;
  id v8 = v6;
  id v16 = v8;
  id v9 = *(id *)(a1 + 48);
  dispatch_block_t v23 = v25;
  uint64_t v10 = *(void *)(a1 + 56);
  id v17 = v9;
  uint64_t v18 = v10;
  id v19 = *(id *)(a1 + 40);
  id v11 = v4;
  id v20 = v11;
  uint64_t v12 = v5;
  uint64_t v13 = *(void *)(a1 + 72);
  id v22 = v12;
  uint64_t v24 = v13;
  id v21 = *(id *)(a1 + 32);
  id v14 = [v7 performReadTransactionWithBlock:v15];

  _Block_object_dispose(v25, 8);
}

void sub_1001240B4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
}

id sub_1001240CC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  if (v2) {
    (*(void (**)(void))(v2 + 16))();
  }
  [*(id *)(a1 + 32) unblock];
  return objc_msgSend(*(id *)(a1 + 40), "setCompletedUnitCount:", objc_msgSend(*(id *)(a1 + 40), "totalUnitCount"));
}

void sub_100124110(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) scopeIdentifier]);
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v2 scopeWithIdentifier:v3]);

  if (v4)
  {
    uint64_t v5 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) transportScopeForScope:v4]);
    uint64_t v6 = *(void *)(*(void *)(a1 + 88) + 8LL);
    uint64_t v7 = *(void **)(v6 + 40);
    *(void *)(v6 + 40) = v5;
  }

  else if (!_CPLSilentLogging)
  {
    id v8 = sub_10011CDF4();
    id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v10 = *(void *)(a1 + 40);
      LODWORD(buf) = 138412290;
      *(void *)((char *)&buf + 4) = v10;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "Trying to update share for an unknown scope %@ – will proceed anyway",  (uint8_t *)&buf,  0xCu);
    }
  }

  uint64_t v12 = *(void **)(a1 + 40);
  uint64_t v11 = *(void *)(a1 + 48);
  uint64_t v13 = *(void **)(v11 + 104);
  v21[2] = sub_10012435C;
  v21[3] = &unk_100245EE8;
  v21[0] = _NSConcreteStackBlock;
  v21[1] = 3221225472LL;
  v21[4] = v11;
  id v14 = v12;
  uint64_t v29 = *(void *)(a1 + 88);
  id v22 = v14;
  id v23 = v4;
  id v24 = *(id *)(a1 + 56);
  id v25 = *(id *)(a1 + 64);
  id v26 = *(id *)(a1 + 32);
  id v15 = *(id *)(a1 + 80);
  uint64_t v16 = *(void *)(a1 + 96);
  id v28 = v15;
  uint64_t v30 = v16;
  id v27 = *(id *)(a1 + 72);
  id v17 = v21;
  *(void *)&__int128 buf = _NSConcreteStackBlock;
  *((void *)&buf + 1) = 3221225472LL;
  __int128 v32 = sub_10013AA68;
  id v33 = &unk_10023DBC8;
  id v34 = v17;
  uint64_t v18 = v13;
  id v19 = v4;
  dispatch_block_t v20 = dispatch_block_create(DISPATCH_BLOCK_ENFORCE_QOS_CLASS|DISPATCH_BLOCK_ASSIGN_CURRENT, &buf);
  dispatch_async(v18, v20);
}

void sub_10012435C(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) engineLibrary]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 transport]);

  v24[0] = 0LL;
  v24[1] = v24;
  v24[2] = 0x3032000000LL;
  v24[3] = sub_10011D36C;
  void v24[4] = sub_10011D37C;
  id v25 = 0LL;
  uint64_t v4 = *(void *)(*(void *)(*(void *)(a1 + 96) + 8LL) + 40LL);
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472LL;
  v15[2] = sub_100124530;
  v15[3] = &unk_100245EC0;
  uint64_t v5 = *(void *)(a1 + 40);
  id v16 = *(id *)(a1 + 48);
  id v17 = *(id *)(a1 + 56);
  id v18 = *(id *)(a1 + 64);
  id v6 = *(id *)(a1 + 72);
  id v22 = v24;
  uint64_t v7 = *(void *)(a1 + 32);
  id v19 = v6;
  uint64_t v20 = v7;
  id v8 = *(id *)(a1 + 88);
  uint64_t v9 = *(void *)(a1 + 104);
  id v21 = v8;
  uint64_t v23 = v9;
  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v3 updateShareTaskForScope:v5 transportScope:v4 completionHandler:v15]);
  uint64_t v11 = *(void **)(a1 + 80);
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472LL;
  v13[2] = sub_100124B54;
  v13[3] = &unk_10023DDE8;
  void v13[4] = *(void *)(a1 + 32);
  id v12 = v10;
  id v14 = v12;
  [v11 performAsCurrentWithPendingUnitCount:1 usingBlock:v13];

  _Block_object_dispose(v24, 8);
}

void sub_100124518(_Unwind_Exception *a1)
{
}

void sub_100124530(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6 || !*(void *)(a1 + 32))
  {
    uint64_t v7 = *(void **)(a1 + 72);
    id v8 = *(void **)(*(void *)(a1 + 64) + 104LL);
    v24[0] = _NSConcreteStackBlock;
    v24[1] = 3221225472LL;
    v24[2] = sub_100124B40;
    v24[3] = &unk_10023EA48;
    uint64_t v9 = &v27;
    id v27 = v7;
    uint64_t v10 = &v25;
    id v25 = v5;
    uint64_t v11 = &v26;
    id v26 = v6;
    id v12 = v24;
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_10013AA68;
    block[3] = &unk_10023DBC8;
    id v38 = v12;
    uint64_t v13 = v8;
    dispatch_block_t v14 = dispatch_block_create(DISPATCH_BLOCK_ENFORCE_QOS_CLASS|DISPATCH_BLOCK_ASSIGN_CURRENT, block);
    dispatch_async(v13, v14);
  }

  else
  {
    id v15 = *(void **)(a1 + 40);
    uint64_t v16 = *(void *)(a1 + 48);
    v33[0] = _NSConcreteStackBlock;
    v33[1] = 3221225472LL;
    v33[2] = sub_100124748;
    v33[3] = &unk_100245D58;
    uint64_t v9 = &v34;
    id v34 = *(id *)(a1 + 56);
    uint64_t v10 = &v35;
    id v17 = v5;
    id v35 = v17;
    uint64_t v11 = (id *)v36;
    id v18 = *(id *)(a1 + 32);
    uint64_t v19 = *(void *)(a1 + 80);
    v36[0] = v18;
    v36[1] = v19;
    v28[0] = _NSConcreteStackBlock;
    v28[1] = 3221225472LL;
    v28[2] = sub_100124840;
    v28[3] = &unk_100245E98;
    id v20 = v17;
    uint64_t v21 = *(void *)(a1 + 64);
    id v22 = *(void **)(a1 + 72);
    id v29 = v20;
    uint64_t v30 = v21;
    id v31 = v22;
    __int128 v32 = *(_OWORD *)(a1 + 80);
    id v23 = [v15 performWriteTransactionByPassBlocker:v16 withBlock:v33 completionHandler:v28];
  }
}

void sub_100124748(uint64_t a1, void *a2)
{
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  void v6[2] = sub_1001247E4;
  v6[3] = &unk_100245D30;
  id v7 = *(id *)(a1 + 32);
  id v8 = *(id *)(a1 + 40);
  id v4 = *(id *)(a1 + 48);
  uint64_t v5 = *(void *)(a1 + 56);
  id v9 = v4;
  uint64_t v10 = v5;
  [a2 do:v6];
}

id sub_1001247E4(uint64_t a1, uint64_t a2)
{
  id v3 = [*(id *)(a1 + 32) storeScopeChange:*(void *)(a1 + 40) forScope:*(void *)(a1 + 48) error:a2];
  if ((_DWORD)v3)
  {
    uint64_t v4 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) scopeChangeForScope:*(void *)(a1 + 48)]);
    uint64_t v5 = *(void *)(*(void *)(a1 + 56) + 8LL);
    id v6 = *(void **)(v5 + 40);
    *(void *)(v5 + 40) = v4;
  }

  return v3;
}

void sub_100124840(void *a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 error]);

  if (v4)
  {
    if (!_CPLSilentLogging)
    {
      id v12 = sub_10011CDF4();
      uint64_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      {
        uint64_t v14 = a1[4];
        id v15 = (void *)objc_claimAutoreleasedReturnValue([v3 error]);
        *(_DWORD *)__int128 buf = 138412546;
        *(void *)&uint8_t buf[4] = v14;
        *(_WORD *)&buf[12] = 2112;
        *(void *)&buf[14] = v15;
        _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_ERROR,  "Unable to update share for %@ in storage: %@",  buf,  0x16u);
      }
    }

    uint64_t v16 = (void *)a1[6];
    id v17 = *(void **)(a1[5] + 104LL);
    uint64_t v37 = _NSConcreteStackBlock;
    uint64_t v38 = 3221225472LL;
    id v39 = sub_100124AD0;
    id v40 = &unk_100245D80;
    id v18 = (id *)&v42;
    id v19 = v16;
    uint64_t v20 = a1[7];
    uint64_t v42 = (uint64_t)v19;
    uint64_t v43 = v20;
    id v41 = v3;
    uint64_t v21 = &v37;
    *(void *)__int128 buf = _NSConcreteStackBlock;
    *(void *)&buf[8] = 3221225472LL;
    *(void *)&buf[16] = sub_10013AA68;
    __int128 v45 = &unk_10023DBC8;
    id v46 = v21;
    id v22 = v17;
    dispatch_block_t v23 = dispatch_block_create(DISPATCH_BLOCK_ENFORCE_QOS_CLASS|DISPATCH_BLOCK_ASSIGN_CURRENT, buf);
    dispatch_async(v22, v23);
  }

  else
  {
    if (!*(void *)(*(void *)(a1[7] + 8LL) + 40LL)) {
      sub_100198AFC( (uint64_t)a1,  v5,  v6,  v7,  v8,  v9,  v10,  v11,  v31,  (uint64_t)v32,  v33,  (uint64_t)v34,  v35,  v36,  (uint64_t)v37,  v38,  (uint64_t)v39,  (uint64_t)v40,  (uint64_t)v41,  v42,  v43);
    }
    id v24 = (void *)a1[6];
    id v25 = *(void **)(a1[5] + 104LL);
    __int128 v32 = _NSConcreteStackBlock;
    *(void *)&__int128 v33 = 3221225472LL;
    *((void *)&v33 + 1) = sub_100124B24;
    id v34 = &unk_100245DA8;
    id v18 = (id *)&v35;
    id v26 = v24;
    uint64_t v27 = a1[7];
    uint64_t v35 = (uint64_t)v26;
    uint64_t v36 = v27;
    id v28 = &v32;
    *(void *)__int128 buf = _NSConcreteStackBlock;
    *(void *)&buf[8] = 3221225472LL;
    *(void *)&buf[16] = sub_10013AA68;
    __int128 v45 = &unk_10023DBC8;
    id v46 = v28;
    id v29 = v25;
    dispatch_block_t v30 = dispatch_block_create(DISPATCH_BLOCK_ENFORCE_QOS_CLASS|DISPATCH_BLOCK_ASSIGN_CURRENT, buf);
    dispatch_async(v29, v30);
  }
}

void sub_100124AD0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  uint64_t v2 = *(void *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 40LL);
  id v3 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) error]);
  (*(void (**)(uint64_t, uint64_t, id))(v1 + 16))(v1, v2, v3);
}

uint64_t sub_100124B24(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 32) + 16LL))( *(void *)(a1 + 32),  *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL),  0LL);
}

uint64_t sub_100124B40(void *a1)
{
  return (*(uint64_t (**)(void, void, void))(a1[6] + 16LL))(a1[6], a1[4], a1[5]);
}

id sub_100124B54(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) engineLibrary]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 syncManager]);
  [v3 configureDirectTransportTask:*(void *)(a1 + 40)];

  return [*(id *)(a1 + 40) runWithNoSyncSession];
}

void sub_100124D98(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (v1)
  {
    id v2 = (id)objc_claimAutoreleasedReturnValue(+[CPLErrors readOnlyError](&OBJC_CLASS___CPLErrors, "readOnlyError"));
    (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
  }

void sub_100124DF8(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) engineLibrary]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 transport]);

  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) engineLibrary]);
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v4 store]);

  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v5 scopes]);
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472LL;
  v13[2] = sub_100124F40;
  v13[3] = &unk_100245F60;
  id v20 = *(id *)(a1 + 56);
  id v14 = v6;
  id v7 = *(id *)(a1 + 40);
  uint64_t v8 = *(void *)(a1 + 32);
  id v15 = v7;
  uint64_t v16 = v8;
  id v17 = v3;
  id v18 = v5;
  char v21 = *(_BYTE *)(a1 + 64);
  id v19 = *(id *)(a1 + 48);
  id v9 = v5;
  id v10 = v3;
  id v11 = v6;
  id v12 = [v9 performReadTransactionWithBlock:v13];
}

void sub_100124F40(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 error]);

  if (v4)
  {
    uint64_t v5 = *(void *)(a1 + 80);
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v3 error]);
    (*(void (**)(uint64_t, void *))(v5 + 16))(v5, v6);
  }

  else
  {
    id v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) scopeWithIdentifier:*(void *)(a1 + 40)]);
    if (v7)
    {
      uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) transportScopeForScope:v7]);
      if (v8)
      {
        id v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) engineLibrary]);
        v16[0] = _NSConcreteStackBlock;
        v16[1] = 3221225472LL;
        v16[2] = sub_100125154;
        v16[3] = &unk_100245F38;
        id v24 = *(id *)(a1 + 80);
        id v17 = *(id *)(a1 + 56);
        id v18 = v8;
        id v19 = v7;
        id v20 = *(id *)(a1 + 64);
        id v21 = *(id *)(a1 + 32);
        char v25 = *(_BYTE *)(a1 + 88);
        id v10 = *(id *)(a1 + 72);
        uint64_t v11 = *(void *)(a1 + 48);
        id v22 = v10;
        uint64_t v23 = v11;
        [v9 blockEngineWithReason:@"Deleting scope" onlyIfBlocked:0 block:v16];
      }

      else
      {
        uint64_t v14 = *(void *)(a1 + 80);
        id v15 = (void *)objc_claimAutoreleasedReturnValue( +[CPLErrors invalidScopeErrorWithScopeIdentifier:]( &OBJC_CLASS___CPLErrors,  "invalidScopeErrorWithScopeIdentifier:",  *(void *)(a1 + 40)));
        (*(void (**)(uint64_t, void *))(v14 + 16))(v14, v15);
      }
    }

    else
    {
      uint64_t v12 = *(void *)(a1 + 80);
      uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue( +[CPLErrors cplErrorWithCode:description:]( &OBJC_CLASS___CPLErrors,  "cplErrorWithCode:description:",  2001LL,  @"Unknown scope %@",  *(void *)(a1 + 40)));
      (*(void (**)(uint64_t, void *))(v12 + 16))(v12, v13);
    }
  }
}

void sub_100125154(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    v22[0] = _NSConcreteStackBlock;
    v22[1] = 3221225472LL;
    v22[2] = sub_100125338;
    v22[3] = &unk_10023E118;
    id v24 = *(id *)(a1 + 88);
    id v4 = v3;
    id v23 = v4;
    uint64_t v5 = objc_retainBlock(v22);
    uint64_t v6 = *(void **)(a1 + 32);
    uint64_t v7 = *(void *)(a1 + 40);
    v16[0] = _NSConcreteStackBlock;
    v16[1] = 3221225472LL;
    v16[2] = sub_100125364;
    v16[3] = &unk_100241BE0;
    id v21 = v5;
    uint64_t v8 = *(void **)(a1 + 48);
    id v17 = v8;
    id v18 = *(id *)(a1 + 56);
    id v19 = v4;
    id v20 = *(id *)(a1 + 64);
    id v9 = v5;
    id v10 = (void *)objc_claimAutoreleasedReturnValue([v6 deleteTransportScope:v7 scope:v8 completionHandler:v16]);
    [v10 setForced:*(unsigned __int8 *)(a1 + 96)];
    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) createGroupForTransportScopeDelete]);
    [v10 setTransportGroup:v11];

    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472LL;
    v14[2] = sub_1001255EC;
    v14[3] = &unk_10023DDE8;
    uint64_t v12 = *(void **)(a1 + 72);
    void v14[4] = *(void *)(a1 + 80);
    id v15 = v10;
    id v13 = v10;
    [v12 performAsCurrentWithPendingUnitCount:1 usingBlock:v14];
  }

  else
  {
    (*(void (**)(void))(*(void *)(a1 + 88) + 16LL))();
  }
}

id sub_100125338(uint64_t a1)
{
  return [*(id *)(a1 + 32) unblock];
}

void sub_100125364(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    (*(void (**)(void))(*(void *)(a1 + 64) + 16LL))();
  }

  else
  {
    if (!_CPLSilentLogging)
    {
      id v4 = sub_10011CDF4();
      uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v6 = *(void *)(a1 + 32);
        *(_DWORD *)__int128 buf = 138412290;
        uint64_t v16 = v6;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Successfully deleted %@", buf, 0xCu);
      }
    }

    uint64_t v7 = *(void **)(a1 + 40);
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) writeTransactionBlocker]);
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472LL;
    v12[2] = sub_100125508;
    v12[3] = &unk_10023E318;
    id v13 = *(id *)(a1 + 56);
    id v14 = *(id *)(a1 + 32);
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472LL;
    v10[2] = sub_1001255A4;
    v10[3] = &unk_100245910;
    id v11 = *(id *)(a1 + 64);
    id v9 = [v7 performWriteTransactionByPassBlocker:v8 withBlock:v12 completionHandler:v10];
  }
}

void sub_100125508(uint64_t a1, void *a2)
{
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  void v4[2] = sub_10012558C;
  void v4[3] = &unk_1002458E8;
  id v5 = *(id *)(a1 + 32);
  id v6 = *(id *)(a1 + 40);
  [a2 do:v4];
}

id sub_10012558C(uint64_t a1, uint64_t a2)
{
  return _[*(id *)(a1 + 32) setValue:1 forFlag:4 forScope:*(void *)(a1 + 40) error:a2];
}

void sub_1001255A4(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = (id)objc_claimAutoreleasedReturnValue([a2 error]);
  (*(void (**)(uint64_t, id))(v2 + 16))(v2, v3);
}

id sub_1001255EC(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) engineLibrary]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 syncManager]);
  [v3 configureDirectTransportTask:*(void *)(a1 + 40)];

  return [*(id *)(a1 + 40) runWithNoSyncSession];
}

uint64_t sub_10012579C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

id sub_1001257AC(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) engineLibrary]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 syncManager]);
  [v3 configureDirectTransportTask:*(void *)(a1 + 40)];

  return [*(id *)(a1 + 40) runWithNoSyncSession];
}

void sub_100125A24(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (v1)
  {
    id v2 = (id)objc_claimAutoreleasedReturnValue(+[CPLErrors readOnlyError](&OBJC_CLASS___CPLErrors, "readOnlyError"));
    (*(void (**)(uint64_t, void, id))(v1 + 16))(v1, 0LL, v2);
  }

void sub_100125A88(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v5)
  {
    v30[0] = _NSConcreteStackBlock;
    v30[1] = 3221225472LL;
    v30[2] = sub_100125CB8;
    v30[3] = &unk_100245D08;
    id v33 = *(id *)(a1 + 64);
    id v7 = v5;
    id v31 = v7;
    id v32 = *(id *)(a1 + 32);
    uint64_t v8 = objc_retainBlock(v30);
    v28[0] = 0LL;
    v28[1] = v28;
    v28[2] = 0x3032000000LL;
    v28[3] = sub_10011D36C;
    void v28[4] = sub_10011D37C;
    id v29 = 0LL;
    id v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) scopes]);
    id v10 = *(void **)(a1 + 40);
    v18[0] = _NSConcreteStackBlock;
    v18[1] = 3221225472LL;
    v18[2] = sub_100125CFC;
    v18[3] = &unk_100245F10;
    id v11 = v9;
    id v19 = v11;
    id v12 = *(id *)(a1 + 48);
    id v26 = v28;
    uint64_t v13 = *(void *)(a1 + 56);
    id v20 = v12;
    uint64_t v21 = v13;
    id v22 = *(id *)(a1 + 40);
    id v14 = v7;
    uint64_t v15 = *(void *)(a1 + 72);
    id v23 = v14;
    uint64_t v27 = v15;
    uint64_t v16 = v8;
    id v25 = v16;
    id v24 = *(id *)(a1 + 32);
    id v17 = [v10 performReadTransactionWithBlock:v18];

    _Block_object_dispose(v28, 8);
  }

  else
  {
    (*(void (**)(void))(*(void *)(a1 + 64) + 16LL))();
    objc_msgSend(*(id *)(a1 + 32), "setCompletedUnitCount:", objc_msgSend(*(id *)(a1 + 32), "totalUnitCount"));
  }
}

void sub_100125CA0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
}

id sub_100125CB8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  if (v2) {
    (*(void (**)(void))(v2 + 16))();
  }
  [*(id *)(a1 + 32) unblock];
  return objc_msgSend(*(id *)(a1 + 40), "setCompletedUnitCount:", objc_msgSend(*(id *)(a1 + 40), "totalUnitCount"));
}

void sub_100125CFC(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v56 = 0LL;
  id v57 = &v56;
  uint64_t v58 = 0x3032000000LL;
  id v59 = sub_10011D36C;
  id v60 = sub_10011D37C;
  id v61 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) scopeWithIdentifier:*(void *)(a1 + 40)]);
  uint64_t v4 = v57[5];
  if (v4)
  {
    id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) scopeChangeForScope:v57[5]]);
  }

  else
  {
    if (!_CPLSilentLogging)
    {
      id v6 = sub_10011CDF4();
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v8 = *(void *)(a1 + 40);
        *(_DWORD *)__int128 buf = 138543362;
        uint64_t v63 = v8;
        _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Trying to refresh scope for an scope %{public}@",  buf,  0xCu);
      }
    }

    id v9 = -[CPLEngineScope initWithScopeIdentifier:scopeType:]( objc_alloc(&OBJC_CLASS___CPLEngineScope),  "initWithScopeIdentifier:scopeType:",  *(void *)(a1 + 40),  0LL);
    id v10 = (void *)v57[5];
    v57[5] = (uint64_t)v9;

    id v5 = 0LL;
  }

  uint64_t v11 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) transportScopeForScope:v57[5]]);
  uint64_t v12 = *(void *)(*(void *)(a1 + 88) + 8LL);
  uint64_t v13 = *(void **)(v12 + 40);
  *(void *)(v12 + 40) = v11;

  id v14 = *(id *)(*(void *)(*(void *)(a1 + 88) + 8LL) + 40LL);
  uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) engineLibrary]);
  uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue([v15 transport]);

  id v17 = (void *)objc_claimAutoreleasedReturnValue([v16 createGroupForTransportScopeRefresh]);
  BOOL v18 = v4 == 0;
  v40[0] = _NSConcreteStackBlock;
  v40[1] = 3221225472LL;
  v40[2] = sub_100126170;
  v40[3] = &unk_1002460B8;
  id v19 = v16;
  uint64_t v20 = *(void *)(a1 + 88);
  id v41 = v19;
  uint64_t v52 = v20;
  id v53 = &v56;
  id v21 = v5;
  id v42 = v21;
  id v43 = *(id *)(a1 + 56);
  id v44 = *(id *)(a1 + 64);
  BOOL v55 = v18;
  id v45 = *(id *)(a1 + 32);
  id v46 = *(id *)(a1 + 40);
  id v22 = v14;
  uint64_t v54 = *(void *)(a1 + 96);
  uint64_t v23 = *(void *)(a1 + 48);
  id v47 = v22;
  uint64_t v48 = v23;
  id v51 = *(id *)(a1 + 80);
  id v24 = v17;
  id v49 = v24;
  id v50 = *(id *)(a1 + 72);
  id v25 = objc_retainBlock(v40);
  id v26 = v25;
  if (*(void *)(*(void *)(*(void *)(a1 + 88) + 8LL) + 40LL))
  {
    ((void (*)(void *))v25[2])(v25);
  }

  else
  {
    if (!_CPLSilentLogging)
    {
      id v27 = sub_10011CDF4();
      id v28 = (os_log_s *)objc_claimAutoreleasedReturnValue(v27);
      if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v29 = v57[5];
        *(_DWORD *)__int128 buf = 138412290;
        uint64_t v63 = v29;
        _os_log_impl( (void *)&_mh_execute_header,  v28,  OS_LOG_TYPE_DEFAULT,  "Trying to refresh scope with an unknown transport scope for %@ - will try to find transport scope first",  buf,  0xCu);
      }
    }

    dispatch_block_t v30 = *(void **)(a1 + 48);
    uint64_t v31 = v57[5];
    v35[0] = _NSConcreteStackBlock;
    v35[1] = 3221225472LL;
    void v35[2] = sub_100126C88;
    v35[3] = &unk_1002460E0;
    uint64_t v32 = *(void *)(a1 + 72);
    id v37 = *(id *)(a1 + 80);
    id v33 = *(id *)(a1 + 40);
    uint64_t v34 = *(void *)(a1 + 88);
    id v36 = v33;
    uint64_t v39 = v34;
    id v38 = v26;
    [v30 _fetchTransportScopeForScope:v31 transportGroup:v24 progress:v32 completionHandler:v35];
  }

  _Block_object_dispose(&v56, 8);
}

void sub_100126144(_Unwind_Exception *a1)
{
}

void sub_100126170(uint64_t a1)
{
  v29[0] = 0LL;
  v29[1] = v29;
  v29[2] = 0x3032000000LL;
  v29[3] = sub_10011D36C;
  void v29[4] = sub_10011D37C;
  id v30 = 0LL;
  uint64_t v2 = *(void *)(*(void *)(*(void *)(a1 + 120) + 8LL) + 40LL);
  uint64_t v3 = *(void *)(*(void *)(*(void *)(a1 + 128) + 8LL) + 40LL);
  id v5 = *(void **)(a1 + 32);
  uint64_t v4 = *(void *)(a1 + 40);
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3221225472LL;
  v16[2] = sub_100126370;
  v16[3] = &unk_100246090;
  id v17 = *(id *)(a1 + 48);
  id v6 = *(id *)(a1 + 56);
  char v28 = *(_BYTE *)(a1 + 144);
  uint64_t v7 = *(void *)(a1 + 128);
  id v18 = v6;
  uint64_t v25 = v7;
  id v19 = *(id *)(a1 + 64);
  id v20 = *(id *)(a1 + 72);
  id v21 = *(id *)(a1 + 80);
  id v8 = *(id *)(a1 + 32);
  uint64_t v9 = *(void *)(a1 + 136);
  uint64_t v10 = *(void *)(a1 + 88);
  id v22 = v8;
  uint64_t v23 = v10;
  id v26 = v29;
  uint64_t v27 = v9;
  id v24 = *(id *)(a1 + 112);
  uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue( [v5 getScopeInfoWithTransportScope:v2 scope:v3 previousScopeChange:v4 completionHandler:v16]);
  [v11 setTransportGroup:*(void *)(a1 + 96)];
  uint64_t v12 = *(void **)(a1 + 104);
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472LL;
  v14[2] = sub_100126C34;
  v14[3] = &unk_10023DDE8;
  void v14[4] = *(void *)(a1 + 88);
  id v13 = v11;
  id v15 = v13;
  [v12 performAsCurrentWithPendingUnitCount:1 usingBlock:v14];

  _Block_object_dispose(v29, 8);
}

void sub_100126358(_Unwind_Exception *a1)
{
}

void sub_100126370(uint64_t a1, uint64_t a2, void *a3, void *a4, void *a5, void *a6)
{
  id v11 = a3;
  id v12 = a4;
  id v30 = a5;
  id v13 = a6;
  if (v13)
  {
    id v14 = *(void **)(a1 + 88);
    id v15 = *(void **)(*(void *)(a1 + 80) + 104LL);
    v31[0] = _NSConcreteStackBlock;
    v31[1] = 3221225472LL;
    v31[2] = sub_100126C20;
    v31[3] = &unk_10023EA48;
    uint64_t v16 = &v34;
    id v34 = v14;
    id v17 = &v32;
    id v32 = v11;
    id v18 = &v33;
    id v33 = v13;
    id v19 = v31;
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_10013AA68;
    block[3] = &unk_10023DBC8;
    id v56 = v19;
    id v20 = v15;
    dispatch_block_t v21 = dispatch_block_create(DISPATCH_BLOCK_ENFORCE_QOS_CLASS|DISPATCH_BLOCK_ASSIGN_CURRENT, block);
    dispatch_async(v20, v21);
  }

  else
  {
    id v22 = *(void **)(a1 + 32);
    uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) writeTransactionBlocker]);
    v40[0] = _NSConcreteStackBlock;
    v40[1] = 3221225472LL;
    v40[2] = sub_100126630;
    v40[3] = &unk_100246040;
    char v54 = *(_BYTE *)(a1 + 120);
    uint64_t v50 = *(void *)(a1 + 96);
    uint64_t v16 = &v41;
    id v41 = *(id *)(a1 + 48);
    id v17 = &v42;
    id v42 = *(id *)(a1 + 56);
    id v18 = &v43;
    id v43 = v30;
    uint64_t v52 = a2;
    id v44 = v11;
    id v45 = v12;
    id v46 = *(id *)(a1 + 64);
    id v47 = *(id *)(a1 + 32);
    id v24 = *(id *)(a1 + 72);
    v35[0] = _NSConcreteStackBlock;
    uint64_t v25 = *(void *)(a1 + 80);
    id v26 = *(void **)(a1 + 88);
    id v48 = v24;
    uint64_t v49 = v25;
    void v35[2] = sub_1001268EC;
    v35[3] = &unk_100246068;
    uint64_t v27 = *(void *)(a1 + 104);
    uint64_t v28 = *(void *)(a1 + 96);
    uint64_t v53 = *(void *)(a1 + 112);
    uint64_t v51 = v27;
    v35[1] = 3221225472LL;
    uint64_t v37 = v27;
    uint64_t v38 = v28;
    void v35[4] = v25;
    uint64_t v39 = v53;
    id v36 = v26;
    id v29 = [v22 performWriteTransactionByPassBlocker:v23 withBlock:v40 completionHandler:v35];
  }
}

void sub_100126630(uint64_t a1, void *a2)
{
  id v8 = a2;
  if (*(_BYTE *)(a1 + 136))
  {
    v17[0] = _NSConcreteStackBlock;
    v17[1] = 3221225472LL;
    v17[2] = sub_1001267D0;
    v17[3] = &unk_1002458C0;
    uint64_t v21 = *(void *)(a1 + 104);
    id v18 = *(id *)(a1 + 32);
    id v19 = *(id *)(a1 + 40);
    id v20 = *(id *)(a1 + 48);
    [v8 do:v17];
  }

  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([v8 error]);

  if (!v3) {
    +[CPLScopeUpdateScopeTask updateScopeWithNewScopeType:scope:updatedScopeChange:updatedFlags:oldTransportScope:updatedTransportScope:shouldUpdateTransportScope:store:transport:session:inTransaction:]( &OBJC_CLASS___CPLScopeUpdateScopeTask,  "updateScopeWithNewScopeType:scope:updatedScopeChange:updatedFlags:oldTransportScope:updatedTransportScope:shouldUp dateTransportScope:store:transport:session:inTransaction:",  *(void *)(a1 + 120),  *(void *)(*(void *)(*(void *)(a1 + 104) + 8LL) + 40LL),  *(void *)(a1 + 56),  *(void *)(a1 + 64),  *(void *)(a1 + 72),  *(void *)(a1 + 48),  &stru_100245FF0,  *(void *)(a1 + 80),  *(void *)(a1 + 88),  0LL,  v8);
  }
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472LL;
  v9[2] = sub_100126838;
  v9[3] = &unk_100246018;
  uint64_t v14 = *(void *)(a1 + 104);
  id v10 = *(id *)(a1 + 32);
  id v4 = *(id *)(a1 + 40);
  uint64_t v16 = *(void *)(a1 + 128);
  uint64_t v5 = *(void *)(a1 + 96);
  id v11 = v4;
  uint64_t v12 = v5;
  id v6 = *(id *)(a1 + 56);
  uint64_t v7 = *(void *)(a1 + 112);
  id v13 = v6;
  uint64_t v15 = v7;
  [v8 do:v9];
}

BOOL sub_1001267D0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = objc_claimAutoreleasedReturnValue( [*(id *)(a1 + 32) createScopeWithIdentifier:*(void *)(a1 + 40) scopeType:0 flags:16 transportScope:*(void *)(a1 + 48) error:a2]);
  uint64_t v4 = *(void *)(*(void *)(a1 + 56) + 8LL);
  uint64_t v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 40) = v3;

  return *(void *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 40LL) != 0LL;
}

BOOL sub_100126830(id a1, NSData *a2)
{
  return 1;
}

uint64_t sub_100126838(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + 40;
  uint64_t v5 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) scopeWithIdentifier:*(void *)(a1 + 40)]);
  uint64_t v6 = *(void *)(*(void *)(v4 + 24) + 8LL);
  uint64_t v7 = *(void **)(v6 + 40);
  *(void *)(v6 + 40) = v5;

  uint64_t v8 = *(void *)(*(void *)(*(void *)(v4 + 24) + 8LL) + 40LL);
  if (v8)
  {
    id v9 = [*(id *)(a1 + 32) storeScopeChange:*(void *)(a1 + 56) forScope:v8 error:a2];
    if ((_DWORD)v9)
    {
      uint64_t v10 = objc_claimAutoreleasedReturnValue( [*(id *)(a1 + 32) scopeChangeForScope:*(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 40)]);
      uint64_t v11 = *(void *)(*(void *)(a1 + 72) + 8LL);
      uint64_t v12 = *(void **)(v11 + 40);
      *(void *)(v11 + 40) = v10;
    }

    return (uint64_t)v9;
  }

  else
  {
    uint64_t v14 = sub_100198BE8(v4, a1);
    return sub_1001268EC(v14);
  }

void sub_1001268EC(void *a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void **)(*(void *)(a1[6] + 8LL) + 40LL);
  if (v4 && [v4 needsToSetScopeIdentifier])
  {
    sub_100198DC8(a1 + 6, a1);
    goto LABEL_13;
  }

  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v3 error]);

  if (!v5)
  {
    if (*(void *)(*(void *)(a1[6] + 8LL) + 40LL))
    {
      uint64_t v25 = (void *)a1[5];
      id v26 = *(void **)(a1[4] + 104LL);
      id v33 = _NSConcreteStackBlock;
      *(void *)&__int128 v34 = 3221225472LL;
      *((void *)&v34 + 1) = sub_100126C04;
      uint64_t v35 = &unk_100245DA8;
      id v19 = (id *)&v36;
      id v27 = v25;
      uint64_t v28 = a1[6];
      uint64_t v36 = (uint64_t)v27;
      uint64_t v37 = v28;
      id v29 = &v33;
      *(void *)__int128 buf = _NSConcreteStackBlock;
      *(void *)&buf[8] = 3221225472LL;
      *(void *)&buf[16] = sub_10013AA68;
      id v46 = &unk_10023DBC8;
      id v47 = v29;
      id v30 = v26;
      dispatch_block_t v31 = dispatch_block_create(DISPATCH_BLOCK_ENFORCE_QOS_CLASS|DISPATCH_BLOCK_ASSIGN_CURRENT, buf);
      dispatch_async(v30, v31);

      goto LABEL_11;
    }

void sub_100126BB0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  uint64_t v2 = *(void *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 40LL);
  id v3 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) error]);
  (*(void (**)(uint64_t, uint64_t, id))(v1 + 16))(v1, v2, v3);
}

uint64_t sub_100126C04(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 32) + 16LL))( *(void *)(a1 + 32),  *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL),  0LL);
}

uint64_t sub_100126C20(void *a1)
{
  return (*(uint64_t (**)(void, void, void))(a1[6] + 16LL))(a1[6], a1[4], a1[5]);
}

id sub_100126C34(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) engineLibrary]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 syncManager]);
  [v3 configureDirectTransportTask:*(void *)(a1 + 40)];

  return [*(id *)(a1 + 40) runWithNoSyncSession];
}

void sub_100126C88(void *a1, void *a2, void *a3)
{
  id v9 = a2;
  id v6 = a3;
  if (v6)
  {
    (*(void (**)(void))(a1[5] + 16LL))();
  }

  else if (v9)
  {
    objc_storeStrong((id *)(*(void *)(a1[7] + 8LL) + 40LL), a2);
    (*(void (**)(void))(a1[6] + 16LL))();
  }

  else
  {
    uint64_t v7 = a1[5];
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue( +[CPLErrors cplErrorWithCode:description:]( &OBJC_CLASS___CPLErrors,  "cplErrorWithCode:description:",  2001LL,  @"Unknown transport scope for %@",  a1[4]));
    (*(void (**)(uint64_t, void, void *))(v7 + 16))(v7, 0LL, v8);
  }
}

void sub_10012709C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (v1)
  {
    id v2 = (id)objc_claimAutoreleasedReturnValue(+[CPLErrors readOnlyError](&OBJC_CLASS___CPLErrors, "readOnlyError"));
    (*(void (**)(uint64_t, void, id))(v1 + 16))(v1, 0LL, v2);
  }

void sub_100127100(id *a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([a1[4] engineLibrary]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 transport]);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v2 store]);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  v7[2] = sub_100127200;
  v7[3] = &unk_1002461A8;
  v7[4] = a1[4];
  id v12 = a1[7];
  id v8 = a1[5];
  id v9 = v3;
  id v10 = a1[6];
  id v11 = v4;
  id v5 = v4;
  id v6 = v3;
  [v5 blockWriteTransactionsWithCompletionHandler:v7];
}

void sub_100127200(uint64_t a1, void *a2)
{
  id v3 = a2;
  v18[0] = _NSConcreteStackBlock;
  v18[1] = 3221225472LL;
  v18[2] = sub_100127388;
  v18[3] = &unk_100246158;
  void v18[4] = *(void *)(a1 + 32);
  id v21 = *(id *)(a1 + 72);
  id v19 = v3;
  id v20 = *(id *)(a1 + 40);
  id v4 = v3;
  id v5 = objc_retainBlock(v18);
  id v6 = *(void **)(a1 + 48);
  uint64_t v7 = *(void *)(a1 + 56);
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472LL;
  v14[2] = sub_10012758C;
  v14[3] = &unk_100245D08;
  id v17 = v5;
  id v15 = *(id *)(a1 + 64);
  id v16 = *(id *)(a1 + 56);
  id v8 = v5;
  id v9 = (void *)objc_claimAutoreleasedReturnValue([v6 fetchTaskForScopeWithShareURL:v7 completionHandler:v14]);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472LL;
  v12[2] = sub_1001279FC;
  v12[3] = &unk_10023DDE8;
  id v10 = *(void **)(a1 + 40);
  void v12[4] = *(void *)(a1 + 32);
  id v13 = v9;
  id v11 = v9;
  [v10 performAsCurrentWithPendingUnitCount:1 usingBlock:v12];
}

void sub_100127388(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(void **)(*(void *)(a1 + 32) + 104LL);
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3221225472LL;
  v16[2] = sub_1001274DC;
  v16[3] = &unk_100246130;
  id v8 = *(id *)(a1 + 56);
  uint64_t v9 = *(void *)(a1 + 32);
  id v10 = *(void **)(a1 + 40);
  id v17 = v5;
  uint64_t v18 = v9;
  id v22 = v8;
  id v19 = v6;
  id v20 = v10;
  id v21 = *(id *)(a1 + 48);
  id v11 = v16;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_10013AA68;
  block[3] = &unk_10023DBC8;
  id v24 = v11;
  id v12 = v7;
  id v13 = v6;
  id v14 = v5;
  dispatch_block_t v15 = dispatch_block_create(DISPATCH_BLOCK_ENFORCE_QOS_CLASS|DISPATCH_BLOCK_ASSIGN_CURRENT, block);
  dispatch_async(v12, v15);
}

id sub_1001274DC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    uint64_t v3 = *(void *)(a1 + 32);
    if (v3)
    {
      id v4 = *(void **)(a1 + 40);
      id v9 = 0LL;
      unsigned int v5 = [v4 _isValidScopeForClient:v3 error:&v9];
      id v6 = v9;
      uint64_t v2 = *(void *)(a1 + 72);
      if (!v5)
      {
        uint64_t v7 = *(void (**)(void))(v2 + 16);
        goto LABEL_8;
      }
    }

    else
    {
      id v6 = 0LL;
    }

    uint64_t v7 = *(void (**)(void))(v2 + 16);
LABEL_8:
    v7();
  }

  [*(id *)(a1 + 56) unblock];
  return objc_msgSend(*(id *)(a1 + 64), "setCompletedUnitCount:", objc_msgSend(*(id *)(a1 + 64), "totalUnitCount"));
}

void sub_10012758C(id *a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  if (a3)
  {
    (*((void (**)(void))a1[6] + 2))();
  }

  else
  {
    id v6 = a1[4];
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472LL;
    v8[2] = sub_100127674;
    v8[3] = &unk_100246180;
    id v12 = a1[6];
    id v9 = v5;
    id v10 = a1[4];
    id v11 = a1[5];
    id v7 = [v6 performReadTransactionWithBlock:v8];
  }
}

void sub_100127674(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 error]);

  if (!v4)
  {
    id v7 = *(id *)(a1 + 32);
    id v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) scopes]);
    id v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) scopeIdentifier]);
    id v10 = (void *)objc_claimAutoreleasedReturnValue([v8 scopeWithIdentifier:v9]);

    if (!v10)
    {
      [v7 setActivated:0];
      id v17 = 0LL;
LABEL_20:
      (*(void (**)(void))(*(void *)(a1 + 56) + 16LL))();

      goto LABEL_21;
    }

    id v11 = (void *)objc_claimAutoreleasedReturnValue([v8 flagsForScope:v10]);
    if ([v11 valueForFlag:32])
    {
      if (!_CPLSilentLogging)
      {
        id v12 = sub_10011CDF4();
        id v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
        if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
        {
          id v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "cpl_redactedShareURL"));
          *(_DWORD *)__int128 buf = 138543618;
          id v24 = v14;
          __int16 v25 = 2112;
          id v26 = v10;
          _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_ERROR,  "Trying to fetch a share at %{public}@ resulting to %@ which has already been scheduled to be deleted by client",  buf,  0x16u);
        }
      }

      dispatch_block_t v15 = (os_log_s *)objc_claimAutoreleasedReturnValue([v10 scopeIdentifier]);
      id v16 = +[CPLErrors cplErrorWithCode:description:]( &OBJC_CLASS___CPLErrors,  "cplErrorWithCode:description:",  23LL,  @"%@ has been deleted by client already",  v15);
    }

    else
    {
      if (![v11 valueForFlag:4])
      {
        objc_msgSend(v7, "setActivated:", objc_msgSend(v11, "valueForFlag:", 16) ^ 1);
        id v17 = 0LL;
        id v21 = sub_10011CDF4();
        dispatch_block_t v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(v21);
        if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
        {
          id v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "cpl_redactedShareURL"));
          *(_DWORD *)__int128 buf = 138543618;
          id v24 = v22;
          __int16 v25 = 2112;
          id v26 = v10;
          _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "Client fetched share at %{public}@ which is already active as %@",  buf,  0x16u);
        }

        id v17 = 0LL;
LABEL_18:

LABEL_19:
        goto LABEL_20;
      }

      if (!_CPLSilentLogging)
      {
        id v18 = sub_10011CDF4();
        id v19 = (os_log_s *)objc_claimAutoreleasedReturnValue(v18);
        if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
        {
          id v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "cpl_redactedShareURL"));
          *(_DWORD *)__int128 buf = 138543618;
          id v24 = v20;
          __int16 v25 = 2112;
          id v26 = v10;
          _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_ERROR,  "Trying to fetch a share at %{public}@ resulting to %@ which has already been found to be deleted",  buf,  0x16u);
        }
      }

      dispatch_block_t v15 = (os_log_s *)objc_claimAutoreleasedReturnValue([v10 scopeIdentifier]);
      id v16 = +[CPLErrors cplErrorWithCode:description:]( &OBJC_CLASS___CPLErrors,  "cplErrorWithCode:description:",  23LL,  @"%@ has been deleted on server already",  v15);
    }

    id v17 = (void *)objc_claimAutoreleasedReturnValue(v16);
    id v7 = 0LL;
    goto LABEL_18;
  }

  uint64_t v5 = *(void *)(a1 + 56);
  id v6 = (void *)objc_claimAutoreleasedReturnValue([v3 error]);
  (*(void (**)(uint64_t, void, void *))(v5 + 16))(v5, 0LL, v6);

LABEL_21:
}

id sub_1001279FC(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) engineLibrary]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 syncManager]);
  [v3 configureDirectTransportTask:*(void *)(a1 + 40)];

  return [*(id *)(a1 + 40) runWithNoSyncSession];
}

void sub_100127CD0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (v1)
  {
    id v2 = (id)objc_claimAutoreleasedReturnValue(+[CPLErrors readOnlyError](&OBJC_CLASS___CPLErrors, "readOnlyError"));
    (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
  }

void sub_100127D30(uint64_t a1, void *a2)
{
  id v3 = a2;
  v21[0] = _NSConcreteStackBlock;
  v21[1] = 3221225472LL;
  v21[2] = sub_100127F18;
  v21[3] = &unk_10023F888;
  v21[4] = *(void *)(a1 + 32);
  id v24 = *(id *)(a1 + 64);
  id v4 = v3;
  id v22 = v4;
  id v23 = *(id *)(a1 + 40);
  uint64_t v5 = objc_retainBlock(v21);
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472LL;
  v15[2] = sub_100128088;
  v15[3] = &unk_100246298;
  void v15[4] = *(void *)(a1 + 32);
  id v16 = *(id *)(a1 + 48);
  id v17 = *(id *)(a1 + 56);
  id v6 = v4;
  id v18 = v6;
  id v7 = v5;
  id v20 = v7;
  id v19 = *(id *)(a1 + 40);
  id v8 = objc_retainBlock(v15);
  if ([*(id *)(a1 + 48) scopeType] == (id)5)
  {
    id v9 = *(void **)(a1 + 56);
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472LL;
    v11[2] = sub_1001287FC;
    v11[3] = &unk_100245E48;
    id v12 = v9;
    id v13 = v8;
    id v14 = v7;
    id v10 = [v12 performReadTransactionWithBlock:v11];
  }

  else
  {
    ((void (*)(void *))v8[2])(v8);
  }
}

void sub_100127F18(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(*(void *)(a1 + 32) + 104LL);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472LL;
  v9[2] = sub_100128040;
  v9[3] = &unk_1002461D0;
  id v13 = *(id *)(a1 + 56);
  id v10 = v3;
  id v11 = *(id *)(a1 + 40);
  id v12 = *(id *)(a1 + 48);
  uint64_t v5 = v9;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_10013AA68;
  block[3] = &unk_10023DBC8;
  id v15 = v5;
  id v6 = v4;
  id v7 = v3;
  dispatch_block_t v8 = dispatch_block_create(DISPATCH_BLOCK_ENFORCE_QOS_CLASS|DISPATCH_BLOCK_ASSIGN_CURRENT, block);
  dispatch_async(v6, v8);
}

id sub_100128040(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 56);
  if (v2) {
    (*(void (**)(uint64_t, void))(v2 + 16))(v2, *(void *)(a1 + 32));
  }
  [*(id *)(a1 + 40) unblock];
  return objc_msgSend(*(id *)(a1 + 48), "setCompletedUnitCount:", objc_msgSend(*(id *)(a1 + 48), "totalUnitCount"));
}

void sub_100128088(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = *(void **)(a1 + 40);
  id v4 = *(void **)(v2 + 104);
  v8[2] = sub_1001281B8;
  v8[3] = &unk_100246298;
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  void v8[4] = v2;
  id v9 = v3;
  id v10 = *(id *)(a1 + 48);
  id v11 = *(id *)(a1 + 56);
  id v13 = *(id *)(a1 + 72);
  id v12 = *(id *)(a1 + 64);
  uint64_t v5 = v8;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_10013AA68;
  block[3] = &unk_10023DBC8;
  id v15 = v5;
  id v6 = v4;
  dispatch_block_t v7 = dispatch_block_create(DISPATCH_BLOCK_ENFORCE_QOS_CLASS|DISPATCH_BLOCK_ASSIGN_CURRENT, block);
  dispatch_async(v6, v7);
}

void sub_1001281B8(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) engineLibrary]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 transport]);

  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472LL;
  v10[2] = sub_1001282EC;
  v10[3] = &unk_100246270;
  uint64_t v4 = *(void *)(a1 + 40);
  id v11 = *(id *)(a1 + 48);
  id v12 = *(id *)(a1 + 56);
  id v13 = *(id *)(a1 + 40);
  id v14 = *(id *)(a1 + 72);
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v3 acceptTaskForSharedScope:v4 completionHandler:v10]);
  id v6 = *(void **)(a1 + 64);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  v8[2] = sub_1001287A8;
  v8[3] = &unk_10023DDE8;
  void v8[4] = *(void *)(a1 + 32);
  id v9 = v5;
  id v7 = v5;
  [v6 performAsCurrentWithPendingUnitCount:1 usingBlock:v8];
}

void sub_1001282EC(uint64_t a1, void *a2, void *a3, void *a4, uint64_t a5)
{
  id v9 = a2;
  id v10 = a3;
  id v11 = a4;
  if (a5)
  {
    (*(void (**)(void))(*(void *)(a1 + 56) + 16LL))();
  }

  else
  {
    id v12 = *(void **)(a1 + 32);
    uint64_t v13 = *(void *)(a1 + 40);
    v18[0] = _NSConcreteStackBlock;
    v18[1] = 3221225472LL;
    v18[2] = sub_10012844C;
    v18[3] = &unk_100246220;
    id v19 = v9;
    id v20 = *(id *)(a1 + 32);
    id v21 = v11;
    id v22 = v10;
    v15[0] = _NSConcreteStackBlock;
    v15[1] = 3221225472LL;
    v15[2] = sub_10012867C;
    v15[3] = &unk_100246248;
    id v16 = *(id *)(a1 + 48);
    id v17 = *(id *)(a1 + 56);
    id v14 = [v12 performWriteTransactionByPassBlocker:v13 withBlock:v18 completionHandler:v15];
  }
}

void sub_10012844C(id *a1, void *a2)
{
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  void v4[2] = sub_1001284F8;
  void v4[3] = &unk_1002461F8;
  id v5 = a1[4];
  id v6 = a1[5];
  id v7 = a1[6];
  id v8 = a1[7];
  [a2 do:v4];
}

id sub_1001284F8(uint64_t a1, uint64_t a2)
{
  if (!_CPLSilentLogging)
  {
    id v4 = sub_10011CDF4();
    id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v6 = *(void *)(a1 + 32);
      int v14 = 138412290;
      uint64_t v15 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Creating %@ after accepting",  (uint8_t *)&v14,  0xCu);
    }
  }

  id v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) scopeIdentifier]);
  id v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) scopes]);
  unint64_t v9 = (unint64_t)[*(id *)(a1 + 32) defaultFlags];
  unint64_t v10 = (unint64_t)[*(id *)(a1 + 48) flags] | v9;
  if (!objc_msgSend( v8,  "shouldAutoactivateScopeWithIdentifier:scopeType:",  v7,  objc_msgSend(*(id *)(a1 + 32), "scopeType"))) {
    v10 |= 0x10uLL;
  }
  id v11 = (void *)objc_claimAutoreleasedReturnValue( objc_msgSend( v8,  "createScopeWithIdentifier:scopeType:flags:transportScope:error:",  v7,  objc_msgSend(*(id *)(a1 + 32), "scopeType"),  v10,  *(void *)(a1 + 56),  a2));
  if (v11) {
    id v12 = [v8 storeScopeChange:*(void *)(a1 + 32) forScope:v11 error:a2];
  }
  else {
    id v12 = 0LL;
  }

  return v12;
}

void sub_10012867C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 error]);

  if (v4 && !_CPLSilentLogging)
  {
    id v5 = sub_10011CDF4();
    uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      uint64_t v7 = *(void *)(a1 + 32);
      id v8 = (void *)objc_claimAutoreleasedReturnValue([v3 error]);
      int v11 = 138412546;
      uint64_t v12 = v7;
      __int16 v13 = 2112;
      int v14 = v8;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_ERROR,  "Unable to create %@: %@",  (uint8_t *)&v11,  0x16u);
    }
  }

  uint64_t v9 = *(void *)(a1 + 40);
  unint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v3 error]);
  (*(void (**)(uint64_t, void *))(v9 + 16))(v9, v10);
}

id sub_1001287A8(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) engineLibrary]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 syncManager]);
  [v3 configureDirectTransportTask:*(void *)(a1 + 40)];

  return [*(id *)(a1 + 40) runWithNoSyncSession];
}

void sub_1001287FC(uint64_t a1)
{
  id v8 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) scopes]);
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([v8 primaryScope]);
  id v3 = @"iCPL scope has not been seen by CPL yet";
  if (v2) {
    id v4 = 0LL;
  }
  else {
    id v4 = @"iCPL scope has not been seen by CPL yet";
  }
  id v5 = v4;
  if (v2)
  {
    if ([v8 valueForFlag:16 forScope:v2])
    {
      id v3 = @"iCPL has not been activated by client";
    }

    else
    {
      uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v8 transportScopeForScope:v2]);

      if (v6)
      {
        (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
        goto LABEL_13;
      }

      id v3 = @"iCPL zone has not been fetched or created yet";
    }
  }

  if ([*(id *)(a1 + 32) hasPendingResetSync]) {
    id v3 = (__CFString *)objc_claimAutoreleasedReturnValue( -[__CFString stringByAppendingString:]( v3,  "stringByAppendingString:",  @" - maybe because of a reset sync"));
  }
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue( +[CPLErrors cplErrorWithCode:description:]( &OBJC_CLASS___CPLErrors,  "cplErrorWithCode:description:",  100LL,  @"Can't join a Shared Library: %@",  v3));
  (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();

LABEL_13:
}

void sub_100128A88(uint64_t a1, void *a2, void *a3, void *a4, uint64_t a5)
{
  id v9 = a2;
  id v10 = a3;
  id v11 = a4;
  if (a5)
  {
    (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
  }

  else
  {
    uint64_t v12 = *(void **)(a1 + 32);
    uint64_t v13 = *(void *)(a1 + 40);
    v18[0] = _NSConcreteStackBlock;
    v18[1] = 3221225472LL;
    v18[2] = sub_100128BEC;
    v18[3] = &unk_100246220;
    id v19 = v9;
    id v20 = *(id *)(a1 + 32);
    id v21 = v11;
    id v22 = v10;
    v15[0] = _NSConcreteStackBlock;
    v15[1] = 3221225472LL;
    v15[2] = sub_100128E1C;
    v15[3] = &unk_100246248;
    id v16 = v19;
    id v17 = *(id *)(a1 + 48);
    id v14 = [v12 performWriteTransactionByPassBlocker:v13 withBlock:v18 completionHandler:v15];
  }
}

void sub_100128BEC(id *a1, void *a2)
{
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  void v4[2] = sub_100128C98;
  void v4[3] = &unk_1002461F8;
  id v5 = a1[4];
  id v6 = a1[5];
  id v7 = a1[6];
  id v8 = a1[7];
  [a2 do:v4];
}

id sub_100128C98(uint64_t a1, uint64_t a2)
{
  if (!_CPLSilentLogging)
  {
    id v4 = sub_10011CDF4();
    id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v6 = *(void *)(a1 + 32);
      int v14 = 138412290;
      uint64_t v15 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Creating %@ after accepting",  (uint8_t *)&v14,  0xCu);
    }
  }

  id v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) scopeIdentifier]);
  id v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) scopes]);
  unint64_t v9 = (unint64_t)[*(id *)(a1 + 32) defaultFlags];
  unint64_t v10 = (unint64_t)[*(id *)(a1 + 48) flags] | v9;
  if (!objc_msgSend( v8,  "shouldAutoactivateScopeWithIdentifier:scopeType:",  v7,  objc_msgSend(*(id *)(a1 + 32), "scopeType"))) {
    v10 |= 0x10uLL;
  }
  id v11 = (void *)objc_claimAutoreleasedReturnValue( objc_msgSend( v8,  "createScopeWithIdentifier:scopeType:flags:transportScope:error:",  v7,  objc_msgSend(*(id *)(a1 + 32), "scopeType"),  v10,  *(void *)(a1 + 56),  a2));
  if (v11) {
    id v12 = [v8 storeScopeChange:*(void *)(a1 + 32) forScope:v11 error:a2];
  }
  else {
    id v12 = 0LL;
  }

  return v12;
}

void sub_100128E1C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 error]);

  if (v4)
  {
    if (!_CPLSilentLogging)
    {
      id v5 = sub_10011CDF4();
      uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      {
        uint64_t v7 = *(void *)(a1 + 32);
        id v8 = (void *)objc_claimAutoreleasedReturnValue([v3 error]);
        int v11 = 138412546;
        uint64_t v12 = v7;
        __int16 v13 = 2112;
        int v14 = v8;
        _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_ERROR,  "Unable to store %@: %@",  (uint8_t *)&v11,  0x16u);
      }
    }

    uint64_t v9 = *(void *)(a1 + 40);
    unint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v3 error]);
    (*(void (**)(uint64_t, void, void *))(v9 + 16))(v9, 0LL, v10);
  }

  else
  {
    (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
  }
}

id sub_100128F60(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) engineLibrary]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 syncManager]);
  [v3 configureDirectTransportTask:*(void *)(a1 + 40)];

  return [*(id *)(a1 + 40) runWithNoSyncSession];
}

void sub_100129184(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (v1)
  {
    id v2 = (id)objc_claimAutoreleasedReturnValue(+[CPLErrors readOnlyError](&OBJC_CLASS___CPLErrors, "readOnlyError"));
    (*(void (**)(uint64_t, void, id))(v1 + 16))(v1, 0LL, v2);
  }

void sub_1001291E8(uint64_t a1, void *a2)
{
  id v3 = a2;
  v32[0] = _NSConcreteStackBlock;
  v32[1] = 3221225472LL;
  v32[2] = sub_100129418;
  v32[3] = &unk_100246158;
  void v32[4] = *(void *)(a1 + 32);
  id v35 = *(id *)(a1 + 56);
  id v4 = v3;
  id v33 = v4;
  id v34 = *(id *)(a1 + 40);
  id v5 = objc_retainBlock(v32);
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](&OBJC_CLASS___NSUserDefaults, "standardUserDefaults"));
  unsigned int v7 = [v6 BOOLForKey:@"CPLAlwaysFetchExistingSharedScopeFromTransport"];

  if (v7)
  {
    uint64_t v8 = *(void *)(a1 + 32);
    uint64_t v9 = *(void **)(a1 + 40);
    unint64_t v10 = *(void **)(v8 + 104);
    v28[0] = _NSConcreteStackBlock;
    v28[1] = 3221225472LL;
    v28[2] = sub_1001295B0;
    v28[3] = &unk_10023E160;
    void v28[4] = v8;
    id v29 = v9;
    id v30 = v4;
    id v31 = v5;
    int v11 = v28;
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_10013AA68;
    block[3] = &unk_10023DBC8;
    id v37 = v11;
    uint64_t v12 = v5;
    __int16 v13 = v10;
    dispatch_block_t v14 = dispatch_block_create(DISPATCH_BLOCK_ENFORCE_QOS_CLASS|DISPATCH_BLOCK_ASSIGN_CURRENT, block);
    dispatch_async(v13, v14);

    uint64_t v15 = v29;
  }

  else
  {
    id v16 = *(void **)(a1 + 48);
    v22[0] = _NSConcreteStackBlock;
    v22[1] = 3221225472LL;
    v22[2] = sub_1001295C0;
    v22[3] = &unk_100246338;
    id v17 = v16;
    id v27 = v5;
    uint64_t v18 = *(void *)(a1 + 32);
    id v19 = *(void **)(a1 + 40);
    id v23 = v17;
    uint64_t v24 = v18;
    id v25 = v19;
    id v26 = v4;
    id v20 = v5;
    id v21 = [v17 performReadTransactionWithBlock:v22];

    uint64_t v15 = v23;
  }
}

void sub_100129418(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  unsigned int v7 = *(void **)(*(void *)(a1 + 32) + 104LL);
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472LL;
  v13[2] = sub_100129568;
  v13[3] = &unk_100246310;
  id v18 = *(id *)(a1 + 56);
  id v14 = v5;
  id v15 = v6;
  id v16 = *(id *)(a1 + 40);
  id v17 = *(id *)(a1 + 48);
  uint64_t v8 = v13;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_10013AA68;
  block[3] = &unk_10023DBC8;
  id v20 = v8;
  uint64_t v9 = v7;
  id v10 = v6;
  id v11 = v5;
  dispatch_block_t v12 = dispatch_block_create(DISPATCH_BLOCK_ENFORCE_QOS_CLASS|DISPATCH_BLOCK_ASSIGN_CURRENT, block);
  dispatch_async(v9, v12);
}

id sub_100129568(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 64);
  if (v2) {
    (*(void (**)(uint64_t, void, void))(v2 + 16))(v2, *(void *)(a1 + 32), *(void *)(a1 + 40));
  }
  [*(id *)(a1 + 48) unblock];
  return objc_msgSend(*(id *)(a1 + 56), "setCompletedUnitCount:", objc_msgSend(*(id *)(a1 + 56), "totalUnitCount"));
}

id sub_1001295B0(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _fetchExistingSharedLibraryScopeWithProgress:*(void *)(a1 + 40) blocker:*(void *)(a1 + 48) completionHandler:*(void *)(a1 + 56)];
}

void sub_1001295C0(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) scopes]);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v4 primaryScope]);
  if (v5
    && (uint64_t v6 = objc_claimAutoreleasedReturnValue([v4 sharingScopeForScope:v5])) != 0
    && (unsigned int v7 = (void *)v6,
        uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v4 scopeChangeForScope:v6]),
        v7,
        v8))
  {
LABEL_20:
    (*(void (**)(void))(*(void *)(a1 + 64) + 16LL))();
  }

  else
  {
    __int128 v30 = 0u;
    __int128 v31 = 0u;
    __int128 v28 = 0u;
    __int128 v29 = 0u;
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v4 allScopeIdentifiersIncludeInactive:1]);
    id v10 = [v9 countByEnumeratingWithState:&v28 objects:v34 count:16];
    if (v10)
    {
      id v11 = v10;
      id v23 = v3;
      uint64_t v8 = 0LL;
      uint64_t v12 = *(void *)v29;
      do
      {
        __int16 v13 = 0LL;
        do
        {
          if (*(void *)v29 != v12) {
            objc_enumerationMutation(v9);
          }
          id v14 = (void *)objc_claimAutoreleasedReturnValue( [v4 scopeWithIdentifier:*(void *)(*((void *)&v28 + 1) + 8 * (void)v13)]);
          if (v14 && ([v4 valueForFlag:4 forScope:v14] & 1) == 0)
          {
            if (((unint64_t)[v14 scopeType] & 0xFFFFFFFFFFFFFFFELL) == 4)
            {
              uint64_t v15 = objc_claimAutoreleasedReturnValue([v4 scopeChangeForScope:v14]);

              uint64_t v8 = (void *)v15;
            }
          }

          else if (v8)
          {

            id v3 = v23;
            goto LABEL_20;
          }

          __int16 v13 = (char *)v13 + 1;
        }

        while (v11 != v13);
        id v16 = [v9 countByEnumeratingWithState:&v28 objects:v34 count:16];
        id v11 = v16;
      }

      while (v16);

      id v3 = v23;
      if (v8) {
        goto LABEL_20;
      }
    }

    else
    {
    }

    uint64_t v17 = *(void *)(a1 + 40);
    id v18 = *(void **)(a1 + 48);
    id v19 = *(void **)(v17 + 104);
    v24[2] = sub_1001298B0;
    v24[3] = &unk_10023E160;
    v24[0] = _NSConcreteStackBlock;
    v24[1] = 3221225472LL;
    void v24[4] = v17;
    id v25 = v18;
    id v26 = *(id *)(a1 + 56);
    id v27 = *(id *)(a1 + 64);
    id v20 = v24;
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_10013AA68;
    block[3] = &unk_10023DBC8;
    id v33 = v20;
    id v21 = v19;
    dispatch_block_t v22 = dispatch_block_create(DISPATCH_BLOCK_ENFORCE_QOS_CLASS|DISPATCH_BLOCK_ASSIGN_CURRENT, block);
    dispatch_async(v21, v22);

    uint64_t v8 = 0LL;
  }
}

id sub_1001298B0(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _fetchExistingSharedLibraryScopeWithProgress:*(void *)(a1 + 40) blocker:*(void *)(a1 + 48) completionHandler:*(void *)(a1 + 56)];
}

void sub_100129ABC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (v1)
  {
    id v2 = (id)objc_claimAutoreleasedReturnValue(+[CPLErrors readOnlyError](&OBJC_CLASS___CPLErrors, "readOnlyError"));
    (*(void (**)(uint64_t, void, id))(v1 + 16))(v1, 0LL, v2);
  }

void sub_100129B20(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) engineLibrary]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 transport]);

  id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) engineLibrary]);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v4 store]);

  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v5 scopes]);
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472LL;
  v13[2] = sub_100129C68;
  v13[3] = &unk_100246450;
  id v20 = *(id *)(a1 + 56);
  id v14 = v6;
  id v7 = *(id *)(a1 + 40);
  uint64_t v8 = *(void *)(a1 + 32);
  id v15 = v7;
  uint64_t v16 = v8;
  __int128 v21 = *(_OWORD *)(a1 + 64);
  id v17 = v3;
  id v18 = v5;
  id v19 = *(id *)(a1 + 48);
  id v9 = v5;
  id v10 = v3;
  id v11 = v6;
  id v12 = [v9 performReadTransactionWithBlock:v13];
}

void sub_100129C68(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 error]);

  if (!v4)
  {
    id v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) scopeWithIdentifier:*(void *)(a1 + 40)]);
    if (!v7)
    {
      uint64_t v11 = *(void *)(a1 + 80);
      uint64_t v12 = objc_claimAutoreleasedReturnValue( +[CPLErrors cplErrorWithCode:description:]( &OBJC_CLASS___CPLErrors,  "cplErrorWithCode:description:",  2001LL,  @"Unknown scope %@",  *(void *)(a1 + 40)));
LABEL_19:
      __int128 v21 = (void *)v12;
      (*(void (**)(uint64_t, void, uint64_t))(v11 + 16))(v11, 0LL, v12);

LABEL_20:
      goto LABEL_21;
    }

    if ([*(id *)(a1 + 32) valueForFlag:16 forScope:v7])
    {
      if (_CPLSilentLogging)
      {
LABEL_18:
        uint64_t v11 = *(void *)(a1 + 80);
        uint64_t v12 = objc_claimAutoreleasedReturnValue( +[CPLErrors invalidScopeErrorWithScopeIdentifier:]( &OBJC_CLASS___CPLErrors,  "invalidScopeErrorWithScopeIdentifier:",  *(void *)(a1 + 40)));
        goto LABEL_19;
      }

      id v8 = sub_10011CDF4();
      id v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
      if (!os_log_type_enabled((os_log_t)v9, OS_LOG_TYPE_ERROR))
      {
LABEL_17:

        goto LABEL_18;
      }

      *(_DWORD *)__int128 buf = 138412290;
      uint64_t v39 = v7;
      id v10 = "Trying to exit %@ but it is inactive";
    }

    else
    {
      if (((unint64_t)[v7 scopeType] & 0xFFFFFFFFFFFFFFFELL) == 4)
      {
        __int16 v13 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) scopeChangeForScope:v7]);
        id v14 = (void *)objc_claimAutoreleasedReturnValue([v13 share]);

        if (v14)
        {
          id v15 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) transportScopeForScope:v7]);
          if (v15)
          {
            uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) engineLibrary]);
            v27[0] = _NSConcreteStackBlock;
            v27[1] = 3221225472LL;
            v27[2] = sub_10012A07C;
            v27[3] = &unk_100246428;
            id v36 = *(id *)(a1 + 80);
            id v28 = *(id *)(a1 + 56);
            id v29 = v7;
            id v15 = v15;
            id v30 = v15;
            id v31 = v14;
            __int128 v37 = *(_OWORD *)(a1 + 88);
            id v32 = *(id *)(a1 + 64);
            id v33 = *(id *)(a1 + 32);
            id v17 = *(id *)(a1 + 72);
            uint64_t v18 = *(void *)(a1 + 48);
            id v34 = v17;
            uint64_t v35 = v18;
            [v16 blockEngineWithReason:@"Exiting shared library" onlyIfBlocked:0 block:v27];
          }

          else
          {
            uint64_t v25 = *(void *)(a1 + 80);
            id v26 = (void *)objc_claimAutoreleasedReturnValue( +[CPLErrors invalidScopeErrorWithScopeIdentifier:]( &OBJC_CLASS___CPLErrors,  "invalidScopeErrorWithScopeIdentifier:",  *(void *)(a1 + 40)));
            (*(void (**)(uint64_t, void, void *))(v25 + 16))(v25, 0LL, v26);
          }
        }

        else
        {
          if (!_CPLSilentLogging)
          {
            id v22 = sub_10011CDF4();
            id v23 = (os_log_s *)objc_claimAutoreleasedReturnValue(v22);
            if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)__int128 buf = 138412290;
              uint64_t v39 = v7;
              _os_log_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_ERROR,  "Trying to exit %@ but we have no share",  buf,  0xCu);
            }
          }

          uint64_t v24 = *(void *)(a1 + 80);
          id v15 = (id)objc_claimAutoreleasedReturnValue( +[CPLErrors invalidScopeErrorWithScopeIdentifier:]( &OBJC_CLASS___CPLErrors,  "invalidScopeErrorWithScopeIdentifier:",  *(void *)(a1 + 40)));
          (*(void (**)(uint64_t, void, id))(v24 + 16))(v24, 0LL, v15);
        }

        goto LABEL_20;
      }

      if (_CPLSilentLogging) {
        goto LABEL_18;
      }
      id v19 = sub_10011CDF4();
      id v9 = (void *)objc_claimAutoreleasedReturnValue(v19);
      if (!os_log_type_enabled((os_log_t)v9, OS_LOG_TYPE_ERROR)) {
        goto LABEL_17;
      }
      id v20 = *(void **)(a1 + 40);
      *(_DWORD *)__int128 buf = 138412290;
      uint64_t v39 = v20;
      id v10 = "Trying to exit non library share %@";
    }

    _os_log_impl((void *)&_mh_execute_header, (os_log_t)v9, OS_LOG_TYPE_ERROR, v10, buf, 0xCu);
    goto LABEL_17;
  }

  uint64_t v5 = *(void *)(a1 + 80);
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v3 error]);
  (*(void (**)(uint64_t, void, void *))(v5 + 16))(v5, 0LL, v6);

LABEL_21:
}

void sub_10012A07C(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    v26[0] = _NSConcreteStackBlock;
    v26[1] = 3221225472LL;
    _OWORD v26[2] = sub_10012A280;
    v26[3] = &unk_100246388;
    id v28 = *(id *)(a1 + 96);
    id v4 = v3;
    id v27 = v4;
    uint64_t v5 = objc_retainBlock(v26);
    uint64_t v6 = *(void *)(a1 + 48);
    uint64_t v7 = *(void *)(a1 + 56);
    uint64_t v8 = *(void *)(a1 + 104);
    uint64_t v9 = *(void *)(a1 + 112);
    v19[0] = _NSConcreteStackBlock;
    v19[1] = 3221225472LL;
    v19[2] = sub_10012A2AC;
    v19[3] = &unk_100246400;
    id v24 = v5;
    id v10 = *(void **)(a1 + 32);
    uint64_t v11 = *(void **)(a1 + 40);
    id v20 = v11;
    id v21 = *(id *)(a1 + 64);
    id v22 = v4;
    id v23 = *(id *)(a1 + 72);
    __int128 v25 = *(_OWORD *)(a1 + 104);
    uint64_t v12 = v5;
    __int16 v13 = (void *)objc_claimAutoreleasedReturnValue( [v10 startExitTaskFromSharedScope:v11 transportScope:v6 share:v7 retentionPolicy:v8 exitSource:v9 completionHandler:v19]);
    id v14 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) createGroupForExitSharedLibrary]);
    [v13 setTransportGroup:v14];

    v17[0] = _NSConcreteStackBlock;
    v17[1] = 3221225472LL;
    v17[2] = sub_10012A830;
    v17[3] = &unk_10023DDE8;
    id v15 = *(void **)(a1 + 80);
    void v17[4] = *(void *)(a1 + 88);
    id v18 = v13;
    id v16 = v13;
    [v15 performAsCurrentWithPendingUnitCount:1 usingBlock:v17];
  }

  else
  {
    (*(void (**)(void))(*(void *)(a1 + 96) + 16LL))();
  }
}

id sub_10012A280(uint64_t a1)
{
  return [*(id *)(a1 + 32) unblock];
}

void sub_10012A2AC(uint64_t a1, void *a2, void *a3, void *a4, void *a5)
{
  id v9 = a2;
  id v10 = a3;
  id v11 = a4;
  id v12 = a5;
  if (v12)
  {
    (*(void (**)(void))(*(void *)(a1 + 64) + 16LL))();
  }

  else
  {
    if (!_CPLSilentLogging)
    {
      id v13 = sub_10011CDF4();
      id v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v15 = *(void *)(a1 + 32);
        LODWORD(buf) = 138412290;
        *(void *)((char *)&buf + 4) = v15;
        _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "Successfully started exit for %@",  (uint8_t *)&buf,  0xCu);
      }
    }

    *(void *)&__int128 buf = 0LL;
    *((void *)&buf + 1) = &buf;
    uint64_t v29 = 0x3032000000LL;
    id v30 = sub_10011D36C;
    id v31 = sub_10011D37C;
    id v32 = 0LL;
    id v16 = *(void **)(a1 + 40);
    id v17 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) writeTransactionBlocker]);
    v22[0] = _NSConcreteStackBlock;
    v22[1] = 3221225472LL;
    v22[2] = sub_10012A510;
    v22[3] = &unk_1002463B0;
    p___int128 buf = &buf;
    id v23 = *(id *)(a1 + 56);
    id v24 = *(id *)(a1 + 32);
    id v25 = v11;
    __int128 v27 = *(_OWORD *)(a1 + 72);
    v19[0] = _NSConcreteStackBlock;
    v19[1] = 3221225472LL;
    v19[2] = sub_10012A798;
    v19[3] = &unk_1002463D8;
    id v20 = *(id *)(a1 + 64);
    id v21 = &buf;
    id v18 = [v16 performWriteTransactionByPassBlocker:v17 withBlock:v22 completionHandler:v19];

    _Block_object_dispose(&buf, 8);
  }
}

void sub_10012A4F0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
}

void sub_10012A510(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  uint64_t v4 = *(void *)(a1 + 40);
  id v5 = a2;
  uint64_t v6 = objc_claimAutoreleasedReturnValue([v3 scopeChangeForScope:v4]);
  uint64_t v7 = *(void *)(*(void *)(a1 + 56) + 8LL);
  uint64_t v8 = *(void **)(v7 + 40);
  *(void *)(v7 + 40) = v6;

  id v9 = *(void **)(*(void *)(*(void *)(a1 + 56) + 8LL) + 40LL);
  if (v9)
  {
    if (!_CPLSilentLogging)
    {
      id v10 = sub_10011CDF4();
      id v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v12 = *(void *)(a1 + 40);
        uint64_t v13 = *(void *)(a1 + 48);
        *(_DWORD *)__int128 buf = 138412546;
        uint64_t v25 = v12;
        __int16 v26 = 2114;
        uint64_t v27 = v13;
        _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "After requesting exit from %@, exiting user identifiers are: %{public}@",  buf,  0x16u);
      }

      id v9 = *(void **)(*(void *)(*(void *)(a1 + 56) + 8LL) + 40LL);
    }

    [v9 addExitingUserIdentifiers:*(void *)(a1 + 48)];
    [*(id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) setExitRetentionPolicy:*(void *)(a1 + 64)];
    [*(id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) setExitSource:*(void *)(a1 + 72)];
    v20[0] = _NSConcreteStackBlock;
    v20[1] = 3221225472LL;
    v20[2] = sub_10012A73C;
    v20[3] = &unk_10023F1D8;
    id v14 = *(id *)(a1 + 32);
    uint64_t v15 = *(void *)(a1 + 56);
    id v21 = v14;
    uint64_t v23 = v15;
    id v22 = *(id *)(a1 + 40);
    [v5 do:v20];

    id v16 = v21;
  }

  else
  {
    if (!_CPLSilentLogging)
    {
      id v17 = sub_10011CDF4();
      id v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(v17);
      if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
      {
        uint64_t v19 = *(void *)(a1 + 40);
        *(_DWORD *)__int128 buf = 138412290;
        uint64_t v25 = v19;
        _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_ERROR,  "%@ has disappeared while starting exit",  buf,  0xCu);
      }
    }

    id v16 = (void *)objc_claimAutoreleasedReturnValue(+[CPLErrors unknownError](&OBJC_CLASS___CPLErrors, "unknownError"));
    [v5 setError:v16];
  }
}

id sub_10012A73C(uint64_t a1, uint64_t a2)
{
  id v4 = [*(id *)(a1 + 32) storeScopeChange:*(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) forScope:*(void *)(a1 + 40) error:a2];
  if ((_DWORD)v4) {
    [*(id *)(a1 + 32) setScopeNeedsUpdateFromTransport:*(void *)(a1 + 40) error:a2];
  }
  return v4;
}

void sub_10012A798(uint64_t a1, void *a2)
{
  id v6 = a2;
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v6 error]);

  uint64_t v4 = *(void *)(a1 + 32);
  if (v3)
  {
    id v5 = (void *)objc_claimAutoreleasedReturnValue([v6 error]);
    (*(void (**)(uint64_t, void, void *))(v4 + 16))(v4, 0LL, v5);
  }

  else
  {
    (*(void (**)(void, void, void))(v4 + 16))( *(void *)(a1 + 32),  *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL),  0LL);
  }
}

id sub_10012A830(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) engineLibrary]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 syncManager]);
  [v3 configureDirectTransportTask:*(void *)(a1 + 40)];

  return [*(id *)(a1 + 40) runWithNoSyncSession];
}

void sub_10012AAA0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (v1)
  {
    id v2 = (id)objc_claimAutoreleasedReturnValue(+[CPLErrors readOnlyError](&OBJC_CLASS___CPLErrors, "readOnlyError"));
    (*(void (**)(uint64_t, void, id))(v1 + 16))(v1, 0LL, v2);
  }

void sub_10012AB04(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) engineLibrary]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 transport]);

  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) engineLibrary]);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v4 store]);

  id v6 = (void *)objc_claimAutoreleasedReturnValue([v5 scopes]);
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472LL;
  v13[2] = sub_10012AC60;
  v13[3] = &unk_100246518;
  id v21 = *(id *)(a1 + 64);
  id v14 = v6;
  id v15 = *(id *)(a1 + 40);
  id v7 = *(id *)(a1 + 48);
  uint64_t v8 = *(void *)(a1 + 32);
  id v16 = v7;
  uint64_t v17 = v8;
  __int128 v22 = *(_OWORD *)(a1 + 72);
  id v18 = v3;
  id v19 = v5;
  id v20 = *(id *)(a1 + 56);
  id v9 = v5;
  id v10 = v3;
  id v11 = v6;
  id v12 = [v9 performReadTransactionWithBlock:v13];
}

void sub_10012AC60(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 error]);

  if (v4)
  {
    uint64_t v5 = *(void *)(a1 + 88);
    id v6 = (void *)objc_claimAutoreleasedReturnValue([v3 error]);
    (*(void (**)(uint64_t, void, void *))(v5 + 16))(v5, 0LL, v6);

    goto LABEL_85;
  }

  id v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) scopeWithIdentifier:*(void *)(a1 + 40)]);
  if (!v7)
  {
    uint64_t v11 = *(void *)(a1 + 88);
    uint64_t v12 = objc_claimAutoreleasedReturnValue( +[CPLErrors cplErrorWithCode:description:]( &OBJC_CLASS___CPLErrors,  "cplErrorWithCode:description:",  2001LL,  @"Unknown scope %@",  *(void *)(a1 + 40)));
LABEL_83:
    uint64_t v66 = (void *)v12;
    (*(void (**)(uint64_t, void, uint64_t))(v11 + 16))(v11, 0LL, v12);

    goto LABEL_84;
  }

  if ([*(id *)(a1 + 32) valueForFlag:16 forScope:v7])
  {
    if (!_CPLSilentLogging)
    {
      id v8 = sub_10011CDF4();
      id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)__int128 buf = 138412290;
        v140 = v7;
        id v10 = "Trying to remove participants from %@ but it is inactive";
LABEL_80:
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, v10, buf, 0xCu);
        goto LABEL_81;
      }

      goto LABEL_81;
    }

    goto LABEL_82;
  }

  if (((unint64_t)[v7 scopeType] & 0xFFFFFFFFFFFFFFFELL) != 4)
  {
    if (!_CPLSilentLogging)
    {
      id v64 = sub_10011CDF4();
      id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v64);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
        uint64_t v65 = *(void **)(a1 + 40);
        *(_DWORD *)__int128 buf = 138412290;
        v140 = v65;
        id v10 = "Trying to remove participants from a non library share %@";
        goto LABEL_80;
      }

LABEL_81:
    }

      return v5;
    }

    return 0;
  }

  if (a3 > 74)
  {
    if (a3 == 75)
    {
      if (!-[CPLPrequeliteStorage shouldUpgradeSchema](self, "shouldUpgradeSchema")) {
        return v5;
      }
      if (!_CPLSilentLogging)
      {
        id v51 = sub_10017CB04();
        uint64_t v52 = (os_log_s *)objc_claimAutoreleasedReturnValue(v51);
        if (os_log_type_enabled(v52, OS_LOG_TYPE_DEFAULT))
        {
          id v53 = (void *)objc_claimAutoreleasedReturnValue(-[CPLPrequeliteStorage mainTable](self, "mainTable"));
          *(_DWORD *)__int128 buf = 138412546;
          uint64_t v70 = v53;
          id v71 = 2048;
          uint64_t v72 = 75LL;
          _os_log_impl( (void *)&_mh_execute_header,  v52,  OS_LOG_TYPE_DEFAULT,  "Upgrading %@ to version %llu: adding flags column",  buf,  0x16u);
        }
      }

      id v54 = (void *)objc_claimAutoreleasedReturnValue(-[CPLPrequeliteStorage pqStore](self, "pqStore"));
      id v20 = (void *)objc_claimAutoreleasedReturnValue([v54 pqlConnection]);

      BOOL v55 = (void *)objc_claimAutoreleasedReturnValue(-[CPLPrequeliteStorage mainTable](self, "mainTable"));
      id v56 = [v20 cplExecute:@"ALTER TABLE %@ ADD COLUMN flags INTEGER DEFAULT 0", v55];

      if (v56)
      {
        uint64_t v50 = -[CPLPrequelitePushRepository createIndexWithName:withDefinition:unique:error:]( self,  "createIndexWithName:withDefinition:unique:error:",  @"flags",  @"scopeIndex, flags",  0LL,  0LL);
        goto LABEL_64;
      }
    }

    else
    {
      if (a3 != 83)
      {
        if (a3 == 84 && -[CPLPrequeliteStorage shouldUpgradeSchema](self, "shouldUpgradeSchema"))
        {
          if (!_CPLSilentLogging)
          {
            uint64_t v13 = sub_10017CB04();
            id v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
            if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
            {
              id v15 = (void *)objc_claimAutoreleasedReturnValue(-[CPLPrequeliteStorage mainTable](self, "mainTable"));
              *(_DWORD *)__int128 buf = 138412546;
              uint64_t v70 = v15;
              id v71 = 2048;
              uint64_t v72 = 84LL;
              _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "Upgrading %@ to version %llu: adding indexes for local conflict resolution",  buf,  0x16u);
            }
          }

          uint64_t v5 = 0;
          if (-[CPLPrequelitePushRepository createIndexWithName:withDefinition:unique:error:]( self,  "createIndexWithName:withDefinition:unique:error:",  @"relatedIdentifier.all",  @"scopeIndex, relatedIdentifier",  0LL,  0LL))
          {
            uint64_t v16 = @"secondaryIdentifier.all";
            uint64_t v17 = @"scopeIndex, secondaryIdentifier";
            return -[CPLPrequelitePushRepository createIndexWithName:withDefinition:unique:error:]( self,  "createIndexWithName:withDefinition:unique:error:",  v16,  v17,  0LL,  0LL);
          }
        }

        return v5;
      }

      if (!-[CPLPrequeliteStorage shouldUpgradeSchema](self, "shouldUpgradeSchema")) {
        return v5;
      }
      if (!_CPLSilentLogging)
      {
        id v57 = sub_10017CB04();
        uint64_t v58 = (os_log_s *)objc_claimAutoreleasedReturnValue(v57);
        if (os_log_type_enabled(v58, OS_LOG_TYPE_DEFAULT))
        {
          id v59 = (void *)objc_claimAutoreleasedReturnValue(-[CPLPrequeliteStorage mainTable](self, "mainTable"));
          *(_DWORD *)__int128 buf = 138412546;
          uint64_t v70 = v59;
          id v71 = 2048;
          uint64_t v72 = 83LL;
          _os_log_impl( (void *)&_mh_execute_header,  v58,  OS_LOG_TYPE_DEFAULT,  "Upgrading %@ to version %llu: adding priority column",  buf,  0x16u);
        }
      }

      id v60 = (void *)objc_claimAutoreleasedReturnValue(-[CPLPrequeliteStorage pqStore](self, "pqStore"));
      id v20 = (void *)objc_claimAutoreleasedReturnValue([v60 pqlConnection]);

      id v61 = (void *)objc_claimAutoreleasedReturnValue(-[CPLPrequeliteStorage mainTable](self, "mainTable"));
      id v62 = [v20 cplExecute:@"ALTER TABLE %@ ADD COLUMN priority INTEGER DEFAULT 0", v61];

      if (v62)
      {
        uint64_t v50 = -[CPLPrequelitePushRepository _createIndexesWithPriority:](self, "_createIndexesWithPriority:", 1LL);
        goto LABEL_64;
      }
    }

    uint64_t v5 = 0;
    goto LABEL_81;
  }

  if (a3 == 58)
  {
    if (!-[CPLPrequeliteStorage shouldUpgradeSchema](self, "shouldUpgradeSchema")) {
      return v5;
    }
    if (!-[CPLPrequeliteStorage dropIndexWithName:error:](self, "dropIndexWithName:error:", @"class", 0LL)
      || !-[CPLPrequeliteStorage dropIndexWithName:error:](self, "dropIndexWithName:error:", @"dequeueOrder", 0LL)
      || !-[CPLPrequeliteStorage dropIndexWithName:error:]( self,  "dropIndexWithName:error:",  @"class.trashed",  0LL)
      || !-[CPLPrequeliteStorage dropIndexWithName:error:]( self,  "dropIndexWithName:error:",  @"class.changeType",  0LL))
    {
      return 0;
    }

    uint64_t v5 = 0;
    if (!-[CPLPrequelitePushRepository createIndexWithName:withDefinition:unique:error:]( self,  "createIndexWithName:withDefinition:unique:error:",  @"relatedIdentifier",  @"class, scopeIndex, relatedIdentifier",  0LL,  0LL)) {
      return v5;
    }
    uint64_t v5 = 0;
    if (!-[CPLPrequelitePushRepository createIndexWithName:withDefinition:unique:error:]( self,  "createIndexWithName:withDefinition:unique:error:",  @"secondaryIdentifier",  @"class, scopeIndex, secondaryIdentifier",  0LL,  0LL)) {
      return v5;
    }
    uint64_t v5 = 0;
    if (!-[CPLPrequelitePushRepository createIndexWithName:withDefinition:unique:error:]( self,  "createIndexWithName:withDefinition:unique:error:",  @"class",  @"scopeIndex, class, dequeueOrder DESC",  0LL,  0LL)) {
      return v5;
    }
    uint64_t v5 = 0;
    if (!-[CPLPrequelitePushRepository createIndexWithName:withDefinition:unique:error:]( self,  "createIndexWithName:withDefinition:unique:error:",  @"class.trashed",  @"scopeIndex, class, trashed, dequeueOrder DESC",  0LL,  0LL)) {
      return v5;
    }
    uint64_t v16 = @"class.changeType";
    uint64_t v17 = @"scopeIndex, class, changeType, dequeueOrder DESC";
    return -[CPLPrequelitePushRepository createIndexWithName:withDefinition:unique:error:]( self,  "createIndexWithName:withDefinition:unique:error:",  v16,  v17,  0LL,  0LL);
  }

  if (a3 == 63 && -[CPLPrequeliteStorage shouldUpgradeSchema](self, "shouldUpgradeSchema"))
  {
    if (!_CPLSilentLogging)
    {
      uint64_t v26 = sub_10017CB04();
      uint64_t v27 = (os_log_s *)objc_claimAutoreleasedReturnValue(v26);
      if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
      {
        id v28 = (void *)objc_claimAutoreleasedReturnValue(-[CPLPrequeliteStorage mainTable](self, "mainTable"));
        *(_DWORD *)__int128 buf = 138412546;
        uint64_t v70 = v28;
        id v71 = 2048;
        uint64_t v72 = 63LL;
        _os_log_impl( (void *)&_mh_execute_header,  v27,  OS_LOG_TYPE_DEFAULT,  "Upgrading %@ to version %llu: adding serializedRecord column",  buf,  0x16u);
      }
    }

    uint64_t v29 = (void *)objc_claimAutoreleasedReturnValue(-[CPLPrequeliteStorage pqStore](self, "pqStore"));
    id v30 = (void *)objc_claimAutoreleasedReturnValue([v29 pqlConnection]);

    uint64_t v31 = (void *)objc_claimAutoreleasedReturnValue(-[CPLPrequeliteStorage mainTable](self, "mainTable"));
    id v32 = [v30 cplExecute:@"ALTER TABLE %@ ADD COLUMN serializedRecord DATA DEFAULT NULL", v31];

    if (v32)
    {
      id v33 = (void *)objc_claimAutoreleasedReturnValue(-[CPLPrequeliteStorage pqStore](self, "pqStore"));
      id v34 = (void *)objc_claimAutoreleasedReturnValue([v33 clientCache]);
      uint64_t v35 = objc_claimAutoreleasedReturnValue([v34 mainTable]);

      id v36 = (void *)objc_claimAutoreleasedReturnValue(-[CPLPrequeliteStorage mainTable](self, "mainTable"));
      uint64_t v66 = (void *)v35;
      id v67 = v30;
      id v37 = [v30 cplFetch:@"SELECT %@.rowid, %@.changeType, %@.serializedRecord FROM %@, %@ WHERE %@.scopeIndex = %@.scopeIndex AND %@.identifier = %@.identifier AND (changeType != %ld AND changeType != %ld)", v36, v36, v35, v36, v35, v36, v35, v36, v35, 1024, 0];
      uint64_t v38 = 0LL;
      uint64_t v39 = 1;
      while ([v37 next])
      {
        id v40 = objc_autoreleasePoolPush();
        id v41 = [v37 integerAtIndex:0];
        id v42 = [v37 integerAtIndex:1];
        uint64_t v43 = (void *)objc_claimAutoreleasedReturnValue([v37 cplChangeAtIndex:2]);
        unsigned __int8 v44 = v43;
        if (v43)
        {
          id v45 = [v43 copyChangeType:v42];
          id v46 = objc_claimAutoreleasedReturnValue( +[CPLArchiver archivedDataWithRootObject:]( &OBJC_CLASS___CPLArchiver,  "archivedDataWithRootObject:",  v45));
          id v47 = (void *)v46;
          if (v46)
          {
            id v48 = [v67 execute:@"UPDATE %@ SET serializedRecord = %@ WHERE rowid = %ld", v36, v46, v41];
            uint64_t v39 = v48;
            v38 += v48;
          }
        }

        objc_autoreleasePoolPop(v40);
        if ((v39 & 1) == 0) {
          goto LABEL_89;
        }
      }

      if ((v39 & 1) != 0)
      {
        if ([v67 execute:@"UPDATE %@ SET serializedRecord = (SELECT serializedRecord FROM %@ WHERE scopeIndex = %@.scopeIndex AND identifier = %@.identifier) WHERE changeType = %ld", v36, v66, v36, v36, 0])
        {
          id v64 = (uint64_t)[v67 changes] + v38;
          if (v64 >= 1)
          {
            uint64_t v65 = (void *)objc_claimAutoreleasedReturnValue(-[CPLPrequeliteStorage pqStore](self, "pqStore"));
            objc_msgSend( v65,  "recordUpgradeEvent:",  @"Transferred %lld records from client cache to push repository",  v64);
          }

          uint64_t v39 = 1;
        }

        else
        {
          uint64_t v39 = 0;
        }
      }

LABEL_124:
  }

void sub_10012BBF4(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    v30[0] = _NSConcreteStackBlock;
    v30[1] = 3221225472LL;
    v30[2] = sub_10012BE3C;
    v30[3] = &unk_100246388;
    id v32 = *(id *)(a1 + 120);
    id v4 = v3;
    id v31 = v4;
    uint64_t v5 = objc_retainBlock(v30);
    uint64_t v6 = *(void *)(a1 + 48);
    uint64_t v17 = *(void *)(a1 + 40);
    id v18 = *(void **)(a1 + 32);
    uint64_t v7 = *(void *)(a1 + 56);
    id v8 = *(void **)(a1 + 64);
    uint64_t v9 = *(void *)(a1 + 128);
    uint64_t v10 = *(void *)(a1 + 136);
    v21[0] = _NSConcreteStackBlock;
    v21[1] = 3221225472LL;
    v21[2] = sub_10012BE68;
    v21[3] = &unk_1002464C8;
    id v29 = v5;
    uint64_t v11 = *(void *)(a1 + 72);
    id v22 = v8;
    id v23 = *(id *)(a1 + 72);
    id v24 = *(id *)(a1 + 40);
    id v25 = *(id *)(a1 + 80);
    id v26 = v4;
    id v27 = *(id *)(a1 + 88);
    id v28 = *(id *)(a1 + 96);
    uint64_t v12 = v5;
    uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue( [v18 removeParticipantInSharedLibraryTaskFromSharedScope:v17 transportScope:v6 share:v7 retentionPolicy:v9 exitSourc e:v10 userIdentifiersToRemove:v8 participantIDsToRemove:v11 completionHandler:v21]);
    id v14 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) createGroupForExitSharedLibrary]);
    [v13 setTransportGroup:v14];

    v19[0] = _NSConcreteStackBlock;
    v19[1] = 3221225472LL;
    v19[2] = sub_10012C458;
    v19[3] = &unk_10023DDE8;
    id v15 = *(void **)(a1 + 104);
    void v19[4] = *(void *)(a1 + 112);
    id v20 = v13;
    id v16 = v13;
    [v15 performAsCurrentWithPendingUnitCount:1 usingBlock:v19];
  }

  else
  {
    (*(void (**)(void))(*(void *)(a1 + 120) + 16LL))();
  }
}

id sub_10012BE3C(uint64_t a1)
{
  return [*(id *)(a1 + 32) unblock];
}

void sub_10012BE68(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    (*(void (**)(void))(*(void *)(a1 + 88) + 16LL))();
  }

  else
  {
    if (!_CPLSilentLogging)
    {
      id v7 = sub_10011CDF4();
      id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v9 = *(void **)(a1 + 32);
        if (v9) {
          uint64_t v10 = objc_claimAutoreleasedReturnValue([v9 componentsJoinedByString:@","]);
        }
        else {
          uint64_t v10 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) componentsJoinedByString:@","]);
        }
        uint64_t v11 = (void *)v10;
        uint64_t v12 = *(void *)(a1 + 48);
        uint64_t v13 = (uint64_t (*)(uint64_t, uint64_t))objc_claimAutoreleasedReturnValue([v5 componentsJoinedByString:@","]);
        *(_DWORD *)__int128 buf = 138543874;
        *(void *)&uint8_t buf[4] = v11;
        *(_WORD *)&buf[12] = 2112;
        *(void *)&buf[14] = v12;
        *(_WORD *)&buf[22] = 2114;
        id v27 = v13;
        _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Successfully removed %{public}@ for %@ - Exiting user identifiers: %{public}@",  buf,  0x20u);
      }
    }

    *(void *)__int128 buf = 0LL;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x3032000000LL;
    id v27 = sub_10011D36C;
    id v28 = sub_10011D37C;
    id v29 = 0LL;
    id v14 = *(void **)(a1 + 56);
    id v15 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 64) writeTransactionBlocker]);
    v20[0] = _NSConcreteStackBlock;
    v20[1] = 3221225472LL;
    v20[2] = sub_10012C11C;
    v20[3] = &unk_1002464A0;
    id v25 = buf;
    id v21 = *(id *)(a1 + 72);
    id v22 = *(id *)(a1 + 48);
    id v23 = v5;
    id v24 = *(id *)(a1 + 80);
    v17[0] = _NSConcreteStackBlock;
    v17[1] = 3221225472LL;
    v17[2] = sub_10012C3C0;
    v17[3] = &unk_1002463D8;
    id v18 = *(id *)(a1 + 88);
    id v19 = buf;
    id v16 = [v14 performWriteTransactionByPassBlocker:v15 withBlock:v20 completionHandler:v17];

    _Block_object_dispose(buf, 8);
  }
}

void sub_10012C0FC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
}

void sub_10012C11C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) scopeChangeForScope:*(void *)(a1 + 40)]);
  uint64_t v5 = *(void *)(*(void *)(a1 + 64) + 8LL);
  id v6 = *(void **)(v5 + 40);
  *(void *)(v5 + 40) = v4;

  id v7 = *(void **)(*(void *)(*(void *)(a1 + 64) + 8LL) + 40LL);
  if (v7)
  {
    [v7 addExitingUserIdentifiers:*(void *)(a1 + 48)];
    [*(id *)(*(void *)(*(void *)(a1 + 64) + 8) + 40) removePendingParticipantIDs:*(void *)(a1 + 56)];
    if (!_CPLSilentLogging)
    {
      id v8 = sub_10011CDF4();
      uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v10 = *(void *)(a1 + 40);
        uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([v11 componentsJoinedByString:@","]);
        *(_DWORD *)__int128 buf = 138412546;
        uint64_t v24 = v10;
        __int16 v25 = 2114;
        id v26 = v12;
        _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "After removing participants from %@, exiting user identifiers are: %{public}@",  buf,  0x16u);
      }
    }

    v19[0] = _NSConcreteStackBlock;
    v19[1] = 3221225472LL;
    v19[2] = sub_10012C364;
    v19[3] = &unk_10023F1D8;
    id v13 = *(id *)(a1 + 32);
    uint64_t v14 = *(void *)(a1 + 64);
    id v20 = v13;
    uint64_t v22 = v14;
    id v21 = *(id *)(a1 + 40);
    [v3 do:v19];

    id v15 = v20;
  }

  else
  {
    if (!_CPLSilentLogging)
    {
      id v16 = sub_10011CDF4();
      uint64_t v17 = (os_log_s *)objc_claimAutoreleasedReturnValue(v16);
      if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
      {
        uint64_t v18 = *(void *)(a1 + 40);
        *(_DWORD *)__int128 buf = 138412290;
        uint64_t v24 = v18;
        _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_ERROR,  "%@ has disappeared while starting exit",  buf,  0xCu);
      }
    }

    id v15 = (void *)objc_claimAutoreleasedReturnValue(+[CPLErrors unknownError](&OBJC_CLASS___CPLErrors, "unknownError"));
    [v3 setError:v15];
  }
}

id sub_10012C364(uint64_t a1, uint64_t a2)
{
  id v4 = [*(id *)(a1 + 32) storeScopeChange:*(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) forScope:*(void *)(a1 + 40) error:a2];
  if ((_DWORD)v4) {
    [*(id *)(a1 + 32) setScopeNeedsUpdateFromTransport:*(void *)(a1 + 40) error:a2];
  }
  return v4;
}

void sub_10012C3C0(uint64_t a1, void *a2)
{
  id v6 = a2;
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v6 error]);

  uint64_t v4 = *(void *)(a1 + 32);
  if (v3)
  {
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v6 error]);
    (*(void (**)(uint64_t, void, void *))(v4 + 16))(v4, 0LL, v5);
  }

  else
  {
    (*(void (**)(void, void, void))(v4 + 16))( *(void *)(a1 + 32),  *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL),  0LL);
  }
}

id sub_10012C458(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) engineLibrary]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 syncManager]);
  [v3 configureDirectTransportTask:*(void *)(a1 + 40)];

  return [*(id *)(a1 + 40) runWithNoSyncSession];
}

void sub_10012C644(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = (id)objc_claimAutoreleasedReturnValue( +[CPLErrors incorrectParametersErrorForParameter:]( &OBJC_CLASS___CPLErrors,  "incorrectParametersErrorForParameter:",  @"maximumCount"));
  (*(void (**)(uint64_t, void, id))(v1 + 16))(v1, 0LL, v2);
}

void sub_10012C69C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 error]);

  if (v4)
  {
    uint64_t v5 = *(void *)(a1 + 56);
    id v6 = (void *)objc_claimAutoreleasedReturnValue([v3 error]);
    (*(void (**)(uint64_t, void, void *))(v5 + 16))(v5, 0LL, v6);
  }

  else
  {
    id v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) scopes]);
    id v8 = (void *)objc_claimAutoreleasedReturnValue([v7 scopeWithIdentifier:*(void *)(a1 + 40)]);
    if (v8)
    {
      uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v7 scopeForSharingScope:v8]);
      uint64_t v10 = v9;
      if (v9)
      {
        id v57 = v8;
        uint64_t v58 = v7;
        id v59 = v3;
        id v61 = v9;
        uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v9 scopeIdentifier]);
        uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) pushRepository]);
        uint64_t v56 = a1;
        id v60 = -[NSMutableSet initWithCapacity:]( objc_alloc(&OBJC_CLASS___NSMutableSet),  "initWithCapacity:",  *(void *)(a1 + 64));
        __int128 v69 = 0u;
        __int128 v70 = 0u;
        __int128 v71 = 0u;
        __int128 v72 = 0u;
        BOOL v55 = (void *)objc_claimAutoreleasedReturnValue([v12 storedExtractedBatch]);
        id v13 = (void *)objc_claimAutoreleasedReturnValue([v55 batch]);
        id v14 = [v13 countByEnumeratingWithState:&v69 objects:v85 count:16];
        if (v14)
        {
          id v15 = v14;
          uint64_t v16 = *(void *)v70;
          do
          {
            for (unint64_t i = 0LL; i != v15; unint64_t i = (char *)i + 1)
            {
              if (*(void *)v70 != v16) {
                objc_enumerationMutation(v13);
              }
              uint64_t v18 = *(void **)(*((void *)&v69 + 1) + 8LL * (void)i);
              id v19 = (void *)objc_claimAutoreleasedReturnValue([v18 scopedIdentifier]);
              id v20 = (void *)objc_claimAutoreleasedReturnValue([v19 scopeIdentifier]);
              unsigned int v21 = [v20 isEqualToString:v11];

              if (v21)
              {
                uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue([v18 _pushContext]);
                unsigned __int8 v23 = [v22 flags];

                if ((v23 & 1) != 0)
                {
                  id v24 = [v61 localIndex];
                  __int16 v25 = (void *)objc_claimAutoreleasedReturnValue([v18 scopedIdentifier]);
                  [v25 setScopeIndex:v24];

                  id v26 = (void *)objc_claimAutoreleasedReturnValue([v18 scopedIdentifier]);
                  id v27 = (void *)objc_claimAutoreleasedReturnValue([v12 changeWithScopedIdentifier:v26]);

                  if (v27)
                  {
                    id v28 = (void *)objc_claimAutoreleasedReturnValue([v27 _pushContext]);
                    unsigned __int8 v29 = [v28 flags];

                    if ((v29 & 2) == 0)
                    {
                      id v30 = (void *)objc_claimAutoreleasedReturnValue([v18 scopedIdentifier]);
                      -[NSMutableSet addObject:](v60, "addObject:", v30);
                    }
                  }
                }
              }
            }

            id v15 = [v13 countByEnumeratingWithState:&v69 objects:v85 count:16];
          }

          while (v15);
        }

        id v7 = v58;
        id v3 = v59;
        if ((unint64_t)-[NSMutableSet count](v60, "count") < *(void *)(v56 + 64))
        {
          __int128 v67 = 0u;
          __int128 v68 = 0u;
          __int128 v65 = 0u;
          __int128 v66 = 0u;
          id v31 = (void *)objc_claimAutoreleasedReturnValue([v12 scopedIdentifiersForChangesWithFlag:1 forScopeWithIdentifier:v11]);
          id v32 = [v31 countByEnumeratingWithState:&v65 objects:v84 count:16];
          if (v32)
          {
            id v33 = v32;
            uint64_t v34 = *(void *)v66;
LABEL_21:
            uint64_t v35 = 0LL;
            while (1)
            {
              if (*(void *)v66 != v34) {
                objc_enumerationMutation(v31);
              }
              -[NSMutableSet addObject:](v60, "addObject:", *(void *)(*((void *)&v65 + 1) + 8 * v35));
              if (v33 == (id)++v35)
              {
                id v33 = [v31 countByEnumeratingWithState:&v65 objects:v84 count:16];
                if (v33) {
                  goto LABEL_21;
                }
                break;
              }
            }
          }
        }

        id v36 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v56 + 32) statusCenter]);
        id v37 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableSet allObjects](v60, "allObjects"));
        uint64_t v38 = (void *)objc_claimAutoreleasedReturnValue([v36 statusesForRecordsWithScopedIdentifiers:v37]);

        uint64_t v39 = *(void **)(v56 + 56);
        id v40 = *(void **)(*(void *)(v56 + 48) + 104LL);
        v62[0] = _NSConcreteStackBlock;
        v62[1] = 3221225472LL;
        v62[2] = sub_10012CD80;
        v62[3] = &unk_10023DFE0;
        id v63 = v38;
        id v64 = v39;
        id v41 = v62;
        __int128 block = _NSConcreteStackBlock;
        uint64_t v80 = 3221225472LL;
        id v81 = sub_10013AA68;
        NSString v82 = &unk_10023DBC8;
        id v83 = v41;
        id v42 = v40;
        id v43 = v38;
        dispatch_block_t v44 = dispatch_block_create(DISPATCH_BLOCK_ENFORCE_QOS_CLASS|DISPATCH_BLOCK_ASSIGN_CURRENT, &block);
        dispatch_async(v42, v44);

        id v8 = v57;
        uint64_t v10 = v61;
      }

      else
      {
        uint64_t v50 = *(void **)(a1 + 56);
        id v51 = *(void **)(*(void *)(a1 + 48) + 104LL);
        v73[0] = _NSConcreteStackBlock;
        v73[1] = 3221225472LL;
        v73[2] = sub_10012CD2C;
        v73[3] = &unk_10023DFE0;
        id v75 = v50;
        id v74 = *(id *)(a1 + 40);
        uint64_t v52 = v73;
        __int128 block = _NSConcreteStackBlock;
        uint64_t v80 = 3221225472LL;
        id v81 = sub_10013AA68;
        NSString v82 = &unk_10023DBC8;
        id v83 = v52;
        id v53 = v51;
        dispatch_block_t v54 = dispatch_block_create(DISPATCH_BLOCK_ENFORCE_QOS_CLASS|DISPATCH_BLOCK_ASSIGN_CURRENT, &block);
        dispatch_async(v53, v54);

        uint64_t v11 = v75;
      }
    }

    else
    {
      id v45 = *(void **)(a1 + 56);
      id v46 = *(void **)(*(void *)(a1 + 48) + 104LL);
      v76[0] = _NSConcreteStackBlock;
      v76[1] = 3221225472LL;
      v76[2] = sub_10012CCD8;
      v76[3] = &unk_10023DFE0;
      id v78 = v45;
      id v77 = *(id *)(a1 + 40);
      id v47 = v76;
      __int128 block = _NSConcreteStackBlock;
      uint64_t v80 = 3221225472LL;
      id v81 = sub_10013AA68;
      NSString v82 = &unk_10023DBC8;
      id v83 = v47;
      id v48 = v46;
      dispatch_block_t v49 = dispatch_block_create(DISPATCH_BLOCK_ENFORCE_QOS_CLASS|DISPATCH_BLOCK_ASSIGN_CURRENT, &block);
      dispatch_async(v48, v49);

      uint64_t v10 = v78;
    }
  }
}

void sub_10012CCD8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  id v2 = (id)objc_claimAutoreleasedReturnValue( +[CPLErrors invalidScopeErrorWithScopeIdentifier:]( &OBJC_CLASS___CPLErrors,  "invalidScopeErrorWithScopeIdentifier:",  *(void *)(a1 + 32)));
  (*(void (**)(uint64_t, void, id))(v1 + 16))(v1, 0LL, v2);
}

void sub_10012CD2C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  id v2 = (id)objc_claimAutoreleasedReturnValue( +[CPLErrors invalidScopeErrorWithScopeIdentifier:]( &OBJC_CLASS___CPLErrors,  "invalidScopeErrorWithScopeIdentifier:",  *(void *)(a1 + 32)));
  (*(void (**)(uint64_t, void, id))(v1 + 16))(v1, 0LL, v2);
}

void sub_10012CD80(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) allValues]);
  (*(void (**)(uint64_t, id, void))(v1 + 16))(v1, v2, 0LL);
}

void sub_10012CF20(id *a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([a1[4] engineLibrary]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 transport]);

  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472LL;
  v9[2] = sub_10012D02C;
  v9[3] = &unk_1002465B8;
  void v9[4] = a1[4];
  id v11 = a1[6];
  id v10 = a1[5];
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 sharedLibraryServerRampTaskWithCompletionHandler:v9]);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  v7[2] = sub_10012D194;
  v7[3] = &unk_10023DDE8;
  id v5 = a1[5];
  v7[4] = a1[4];
  id v8 = v4;
  id v6 = v4;
  [v5 performAsCurrentWithPendingUnitCount:1 usingBlock:v7];
}

void sub_10012D02C(uint64_t a1, char a2, void *a3)
{
  id v5 = a3;
  id v6 = *(void **)(*(void *)(a1 + 32) + 104LL);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472LL;
  v12[2] = sub_10012D150;
  v12[3] = &unk_100246590;
  id v7 = *(id *)(a1 + 48);
  char v16 = a2;
  id v15 = v7;
  id v13 = v5;
  id v14 = *(id *)(a1 + 40);
  id v8 = v12;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_10013AA68;
  block[3] = &unk_10023DBC8;
  id v18 = v8;
  uint64_t v9 = v6;
  id v10 = v5;
  dispatch_block_t v11 = dispatch_block_create(DISPATCH_BLOCK_ENFORCE_QOS_CLASS|DISPATCH_BLOCK_ASSIGN_CURRENT, block);
  dispatch_async(v9, v11);
}

id sub_10012D150(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  if (v2) {
    (*(void (**)(uint64_t, void, void))(v2 + 16))(v2, *(unsigned __int8 *)(a1 + 56), *(void *)(a1 + 32));
  }
  return objc_msgSend(*(id *)(a1 + 40), "setCompletedUnitCount:", objc_msgSend(*(id *)(a1 + 40), "totalUnitCount"));
}

id sub_10012D194(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) engineLibrary]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 syncManager]);
  [v3 configureDirectTransportTask:*(void *)(a1 + 40)];

  return [*(id *)(a1 + 40) runWithNoSyncSession];
}

void sub_10012D368(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) engineLibrary]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 transport]);

  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472LL;
  v10[2] = sub_10012D47C;
  v10[3] = &unk_1002465E0;
  uint64_t v4 = *(void *)(a1 + 40);
  void v10[4] = *(void *)(a1 + 32);
  id v12 = *(id *)(a1 + 56);
  id v11 = *(id *)(a1 + 48);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v3 queryUserDetailsTaskForParticipants:v4 completionHandler:v10]);
  id v6 = *(void **)(a1 + 48);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  v8[2] = sub_10012D5F8;
  v8[3] = &unk_10023DDE8;
  void v8[4] = *(void *)(a1 + 32);
  id v9 = v5;
  id v7 = v5;
  [v6 performAsCurrentWithPendingUnitCount:1 usingBlock:v8];
}

void sub_10012D47C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = *(void **)(*(void *)(a1 + 32) + 104LL);
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472LL;
  v13[2] = sub_10012D5B8;
  v13[3] = &unk_1002461D0;
  id v17 = *(id *)(a1 + 48);
  id v14 = v5;
  id v15 = v6;
  id v16 = *(id *)(a1 + 40);
  id v8 = v13;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_10013AA68;
  block[3] = &unk_10023DBC8;
  id v19 = v8;
  id v9 = v7;
  id v10 = v6;
  id v11 = v5;
  dispatch_block_t v12 = dispatch_block_create(DISPATCH_BLOCK_ENFORCE_QOS_CLASS|DISPATCH_BLOCK_ASSIGN_CURRENT, block);
  dispatch_async(v9, v12);
}

id sub_10012D5B8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 56);
  if (v2) {
    (*(void (**)(uint64_t, void, void))(v2 + 16))(v2, *(void *)(a1 + 32), *(void *)(a1 + 40));
  }
  return objc_msgSend(*(id *)(a1 + 48), "setCompletedUnitCount:", objc_msgSend(*(id *)(a1 + 48), "totalUnitCount"));
}

id sub_10012D5F8(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) engineLibrary]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 syncManager]);
  [v3 configureDirectTransportTask:*(void *)(a1 + 40)];

  return [*(id *)(a1 + 40) runWithNoSyncSession];
}

void sub_10012D780(uint64_t a1)
{
  id v6 = -[CPLForceSyncTask initWithScopeIdentifiers:]( objc_alloc(&OBJC_CLASS___CPLForceSyncTask),  "initWithScopeIdentifiers:",  *(void *)(a1 + 32));
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSUUID UUID](&OBJC_CLASS___NSUUID, "UUID"));
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 UUIDString]);
  -[CPLForceSyncTask setTaskIdentifier:](v6, "setTaskIdentifier:", v3);

  (*(void (**)(void))(*(void *)(a1 + 56) + 16LL))();
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) abstractObject]);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v4 forceSyncDelegate]);
  [v5 libraryManager:v4 didFinishForceSyncTask:v6 withErrors:*(void *)(a1 + 48)];
}

void sub_10012D930(uint64_t a1, unint64_t a2)
{
  BOOL v3 = a2 < 5;
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  void v6[2] = sub_10012D9EC;
  v6[3] = &unk_100246630;
  uint64_t v4 = *(void **)(a1 + 32);
  void v6[4] = *(void *)(a1 + 40);
  id v7 = *(id *)(a1 + 48);
  id v9 = *(id *)(a1 + 56);
  id v8 = *(id *)(a1 + 32);
  BOOL v10 = v3;
  id v5 = [v4 performReadTransactionWithBlock:v6];
}

void sub_10012D9EC(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 error]);

  if (v4)
  {
    id v5 = *(void **)(a1 + 32);
    uint64_t v6 = *(void *)(a1 + 40);
    id v7 = (void *)objc_claimAutoreleasedReturnValue([v3 error]);
    id v8 = (void *)objc_claimAutoreleasedReturnValue( +[CPLErrors errorsForIdentifiers:error:]( &OBJC_CLASS___CPLErrors,  "errorsForIdentifiers:error:",  v6,  v7));
    [v5 _dispatchForceSyncForScopeIdentifiers:v6 errors:v8 completionHandler:*(void *)(a1 + 56)];

    goto LABEL_52;
  }

  id v49 = v3;
  id v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) scopes]);
  unsigned int v52 = [*(id *)(a1 + 32) _isManagementLibraryManager];
  BOOL v10 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
  id v51 = -[NSMutableArray initWithCapacity:]( [NSMutableArray alloc],  "initWithCapacity:",  [*(id *)(a1 + 40) count]);
  __int128 v61 = 0u;
  __int128 v62 = 0u;
  __int128 v63 = 0u;
  __int128 v64 = 0u;
  uint64_t v50 = a1;
  id obj = *(id *)(a1 + 40);
  id v11 = [obj countByEnumeratingWithState:&v61 objects:v65 count:16];
  id v53 = v10;
  if (!v11) {
    goto LABEL_42;
  }
  id v12 = v11;
  uint64_t v13 = *(void *)v62;
  do
  {
    id v14 = 0LL;
    do
    {
      if (*(void *)v62 != v13) {
        objc_enumerationMutation(obj);
      }
      uint64_t v15 = *(void *)(*((void *)&v61 + 1) + 8LL * (void)v14);
      id v16 = (void *)objc_claimAutoreleasedReturnValue([v9 scopeWithIdentifier:v15]);
      if (!v16)
      {
        unsigned int v21 = (void *)objc_claimAutoreleasedReturnValue( +[CPLErrors cplErrorWithCode:description:]( &OBJC_CLASS___CPLErrors,  "cplErrorWithCode:description:",  2001LL,  @"Scope %@ is unknown",  v15));
        -[NSMutableDictionary setObject:forKeyedSubscript:](v10, "setObject:forKeyedSubscript:", v21, v15);

        goto LABEL_31;
      }

      id v17 = (void *)objc_claimAutoreleasedReturnValue([v9 flagsForScope:v16]);
      unsigned int v18 = [v17 flags];

      if ((v18 & 8) != 0)
      {
        id v19 = (void *)objc_claimAutoreleasedReturnValue( +[CPLErrors cplErrorWithCode:description:]( &OBJC_CLASS___CPLErrors,  "cplErrorWithCode:description:",  33LL,  @"Scope %@ is disabled",  v15));
        if (v19) {
          goto LABEL_26;
        }
      }

      if ((v18 & 0x10) != 0)
      {
        uint64_t v20 = objc_claimAutoreleasedReturnValue( +[CPLErrors cplErrorWithCode:description:]( &OBJC_CLASS___CPLErrors,  "cplErrorWithCode:description:",  2001LL,  @"Scope %@ is inactive",  v15));
        if (v20) {
          goto LABEL_17;
        }
      }

      else
      {
        uint64_t v20 = 0LL;
      }

      if ((v18 & 0x24) != 0)
      {
        uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue( +[CPLErrors cplErrorWithCode:description:]( &OBJC_CLASS___CPLErrors,  "cplErrorWithCode:description:",  23LL,  @"Scope %@ has been deleted",  v15));
        -[NSMutableDictionary setObject:forKeyedSubscript:](v10, "setObject:forKeyedSubscript:", v22, v15);
      }

void sub_10012E198(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(void *)(a1 + 32);
  id v8 = *(void **)(a1 + 40);
  id v9 = *(void **)(v7 + 104);
  v15[2] = sub_10012E2D0;
  v15[3] = &unk_10023ED78;
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472LL;
  void v15[4] = v7;
  id v16 = v6;
  id v17 = v8;
  id v18 = *(id *)(a1 + 48);
  id v19 = v5;
  BOOL v10 = v15;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_10013AA68;
  block[3] = &unk_10023DBC8;
  id v21 = v10;
  id v11 = v9;
  id v12 = v5;
  id v13 = v6;
  dispatch_block_t v14 = dispatch_block_create(DISPATCH_BLOCK_ENFORCE_QOS_CLASS|DISPATCH_BLOCK_ASSIGN_CURRENT, block);
  dispatch_async(v11, v14);
}

void sub_10012E2D0(uint64_t a1)
{
  id v8 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) abstractObject]);
  uint64_t v2 = *(void **)(a1 + 40);
  if (v2)
  {
    id v3 = v2;
    if ([v3 isCPLOperationCancelledError])
    {
      uint64_t v4 = objc_claimAutoreleasedReturnValue( +[CPLErrors cplErrorWithCode:description:]( &OBJC_CLASS___CPLErrors,  "cplErrorWithCode:description:",  10LL,  @"Scope will be synchronized in background"));

      id v3 = (id)v4;
    }

    id v5 = (id)objc_claimAutoreleasedReturnValue( +[CPLErrors errorsForIdentifiers:error:]( &OBJC_CLASS___CPLErrors,  "errorsForIdentifiers:error:",  *(void *)(a1 + 48),  v3));
    if ([*(id *)(a1 + 56) count])
    {
      [*(id *)(a1 + 56) addEntriesFromDictionary:v5];
      id v6 = *(id *)(a1 + 56);

      id v5 = v6;
    }
  }

  else
  {
    id v5 = *(id *)(a1 + 56);
  }

  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v8 forceSyncDelegate]);
  [v7 libraryManager:v8 didFinishForceSyncTask:*(void *)(a1 + 64) withErrors:v5];
}

uint64_t sub_10012E3D0(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  *(void *)(a1 + 32));
}

void sub_10012EE14(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) store]);
  id v5 = (id)objc_claimAutoreleasedReturnValue([v2 downloadQueue]);

  id v3 = [v5 hasActiveOrQueuedBackgroundDownloadOperations];
  uint64_t v4 = *(void *)(a1 + 40);
  if (v4) {
    (*(void (**)(uint64_t, id, void))(v4 + 16))(v4, v3, 0LL);
  }
}

void sub_10012EF64(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) statusCenter]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 statusesForRecordsWithScopedIdentifiers:*(void *)(a1 + 40)]);

  uint64_t v4 = *(void **)(a1 + 56);
  if (v4)
  {
    id v5 = *(void **)(*(void *)(a1 + 48) + 104LL);
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472LL;
    v9[2] = sub_10012F080;
    v9[3] = &unk_10023DFE0;
    id v11 = v4;
    id v10 = v3;
    id v6 = v9;
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_10013AA68;
    block[3] = &unk_10023DBC8;
    id v13 = v6;
    uint64_t v7 = v5;
    dispatch_block_t v8 = dispatch_block_create(DISPATCH_BLOCK_ENFORCE_QOS_CLASS|DISPATCH_BLOCK_ASSIGN_CURRENT, block);
    dispatch_async(v7, v8);
  }
}

uint64_t sub_10012F080(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  *(void *)(a1 + 32),  0LL);
}

void sub_10012F154(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) statusCenter]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 statusChanges]);

  uint64_t v4 = *(void **)(a1 + 48);
  if (v4)
  {
    id v5 = *(void **)(*(void *)(a1 + 40) + 104LL);
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472LL;
    v9[2] = sub_10012F26C;
    v9[3] = &unk_10023DFE0;
    id v11 = v4;
    id v10 = v3;
    id v6 = v9;
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_10013AA68;
    block[3] = &unk_10023DBC8;
    id v13 = v6;
    uint64_t v7 = v5;
    dispatch_block_t v8 = dispatch_block_create(DISPATCH_BLOCK_ENFORCE_QOS_CLASS|DISPATCH_BLOCK_ASSIGN_CURRENT, block);
    dispatch_async(v7, v8);
  }
}

uint64_t sub_10012F26C(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  *(void *)(a1 + 32),  0LL);
}

void sub_10012F378(uint64_t a1, void *a2)
{
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  void v4[2] = sub_10012F3FC;
  void v4[3] = &unk_1002458E8;
  id v5 = *(id *)(a1 + 32);
  id v6 = *(id *)(a1 + 40);
  [a2 do:v4];
}

id sub_10012F3FC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) statusCenter]);
  id v5 = [v4 acknowledgeChangedStatuses:*(void *)(a1 + 40) error:a2];

  return v5;
}

void sub_10012F44C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 error]);

  if (v4 && !_CPLSilentLogging)
  {
    id v5 = sub_10011CDF4();
    id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      uint64_t v7 = *(void *)(a1 + 32);
      dispatch_block_t v8 = (void *)objc_claimAutoreleasedReturnValue([v3 error]);
      int v9 = 138412546;
      uint64_t v10 = v7;
      __int16 v11 = 2112;
      id v12 = v8;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_ERROR,  "Unable to acknowledege status changes for %@: %@",  (uint8_t *)&v9,  0x16u);
    }
  }
}

void sub_10012F648(uint64_t a1, void *a2)
{
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  void v4[2] = sub_10012F6D4;
  void v4[3] = &unk_1002466A8;
  id v5 = *(id *)(a1 + 32);
  id v6 = *(id *)(a1 + 40);
  char v7 = *(_BYTE *)(a1 + 48);
  [a2 do:v4];
}

uint64_t sub_10012F6D4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) statusCenter]);
  __int128 v14 = 0u;
  __int128 v15 = 0u;
  __int128 v16 = 0u;
  __int128 v17 = 0u;
  id v5 = *(id *)(a1 + 40);
  id v6 = [v5 countByEnumeratingWithState:&v14 objects:v18 count:16];
  if (v6)
  {
    id v7 = v6;
    uint64_t v8 = *(void *)v15;
    while (2)
    {
      int v9 = 0LL;
      do
      {
        if (*(void *)v15 != v8) {
          objc_enumerationMutation(v5);
        }
        uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue( objc_msgSend( v4,  "recordViewForStatusWithScopedIdentifier:",  *(void *)(*((void *)&v14 + 1) + 8 * (void)v9),  (void)v14));
        unsigned int v11 = [v4 notifyStatusForRecordViewHasChanged:v10 persist:*(unsigned __int8 *)(a1 + 48) error:a2];

        if (!v11)
        {
          uint64_t v12 = 0LL;
          goto LABEL_11;
        }

        int v9 = (char *)v9 + 1;
      }

      while (v7 != v9);
      id v7 = [v5 countByEnumeratingWithState:&v14 objects:v18 count:16];
      if (v7) {
        continue;
      }
      break;
    }
  }

  uint64_t v12 = 1LL;
LABEL_11:

  return v12;
}

void sub_10012F824(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 error]);

  if (v4 && !_CPLSilentLogging)
  {
    id v5 = sub_10011CDF4();
    id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      id v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "componentsJoinedByString:", @", "));
      uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v3 error]);
      int v9 = 138412546;
      uint64_t v10 = v7;
      __int16 v11 = 2112;
      uint64_t v12 = v8;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_ERROR,  "Unable to add status changes for %@: %@",  (uint8_t *)&v9,  0x16u);
    }
  }
}

void sub_10012FA24(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 error]);

  if (v4)
  {
    id v5 = *(void **)(*(void *)(a1 + 32) + 104LL);
    v29[0] = _NSConcreteStackBlock;
    v29[1] = 3221225472LL;
    v29[2] = sub_10012FD7C;
    v29[3] = &unk_10023DFE0;
    id v31 = *(id *)(a1 + 56);
    id v30 = v3;
    id v6 = v29;
    __int128 block = _NSConcreteStackBlock;
    uint64_t v33 = 3221225472LL;
    uint64_t v34 = sub_10013AA68;
    uint64_t v35 = &unk_10023DBC8;
    id v36 = v6;
    id v7 = v5;
    dispatch_block_t v8 = dispatch_block_create(DISPATCH_BLOCK_ENFORCE_QOS_CLASS|DISPATCH_BLOCK_ASSIGN_CURRENT, &block);
    dispatch_async(v7, v8);
  }

  else
  {
    int v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) scopes]);
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v9 scopeWithIdentifier:*(void *)(a1 + 48)]);
    if (v10)
    {
      if ([v9 valueForFlag:16 forScope:v10])
      {
        __int16 v11 = (void *)objc_claimAutoreleasedReturnValue([v9 scopeForSharingScope:v10]);
        uint64_t v12 = v11;
        uint64_t v14 = *(void *)(a1 + 48);
        uint64_t v13 = *(void *)(a1 + 56);
        if (v11)
        {
          __int128 v15 = (void *)objc_claimAutoreleasedReturnValue([v11 scopeIdentifier]);
          __int128 v16 = (void *)objc_claimAutoreleasedReturnValue( +[CPLErrors cplErrorWithCode:description:]( &OBJC_CLASS___CPLErrors,  "cplErrorWithCode:description:",  2001LL,  @"%@ is a shared scope and counts should be asked through %@",  v14,  v15));
          (*(void (**)(uint64_t, void, void *))(v13 + 16))(v13, 0LL, v16);
        }

        else
        {
          __int128 v15 = (void *)objc_claimAutoreleasedReturnValue( +[CPLErrors cplErrorWithCode:description:]( &OBJC_CLASS___CPLErrors,  "cplErrorWithCode:description:",  2001LL,  @"%@ is not active",  *(void *)(a1 + 48)));
          (*(void (**)(uint64_t, void, void *))(v13 + 16))(v13, 0LL, v15);
        }
      }

      else
      {
        uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) pushRepository]);
        id v18 = (void *)objc_claimAutoreleasedReturnValue([v12 countPerFlagsForScopeWithIdentifier:*(void *)(a1 + 48)]);
        id v19 = [[CPLScopeStatusCounts alloc] initWithFlagsCounts:v18];
        uint64_t v20 = *(void **)(*(void *)(a1 + 32) + 104LL);
        v26[0] = _NSConcreteStackBlock;
        v26[1] = 3221225472LL;
        _OWORD v26[2] = sub_10012FDC4;
        v26[3] = &unk_10023DFE0;
        id v21 = *(id *)(a1 + 56);
        id v27 = v19;
        id v28 = v21;
        uint64_t v22 = v26;
        __int128 block = _NSConcreteStackBlock;
        uint64_t v33 = 3221225472LL;
        uint64_t v34 = sub_10013AA68;
        uint64_t v35 = &unk_10023DBC8;
        id v36 = v22;
        char v23 = v20;
        id v24 = v19;
        dispatch_block_t v25 = dispatch_block_create(DISPATCH_BLOCK_ENFORCE_QOS_CLASS|DISPATCH_BLOCK_ASSIGN_CURRENT, &block);
        dispatch_async(v23, v25);
      }
    }

    else
    {
      uint64_t v17 = *(void *)(a1 + 56);
      uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue( +[CPLErrors cplErrorWithCode:description:]( &OBJC_CLASS___CPLErrors,  "cplErrorWithCode:description:",  2001LL,  @"%@ is unknown",  *(void *)(a1 + 48)));
      (*(void (**)(uint64_t, void, void *))(v17 + 16))(v17, 0LL, v12);
    }
  }
}

void sub_10012FD7C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) error]);
  (*(void (**)(uint64_t, void, id))(v1 + 16))(v1, 0LL, v2);
}

uint64_t sub_10012FDC4(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  *(void *)(a1 + 32),  0LL);
}

void sub_100130288(uint64_t a1, uint64_t a2, void *a3)
{
  id v6 = a3;
  id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKeyedSubscript:a2]);
  if (v5) {
    [*(id *)(a1 + 40) setObject:v6 forKeyedSubscript:v5];
  }
}

void sub_10013043C(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v10 = a3;
  uint64_t v7 = *(void *)(a1 + 48);
  if (a4)
  {
    (*(void (**)(void, void, void, uint64_t))(v7 + 16))(*(void *)(a1 + 48), 0LL, 0LL, a4);
  }

  else
  {
    dispatch_block_t v8 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(a1 + 32) _localResourceFromCloudResources:a2 usingMapping:*(void *)(a1 + 40)]);
    int v9 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(a1 + 32) _localResourceFromCloudResourcesAndErrors:v10 usingMapping:*(void *)(a1 + 40)]);
    (*(void (**)(uint64_t, void *, void *, void))(v7 + 16))(v7, v8, v9, 0LL);
  }
}

void sub_1001313F4(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  uint64_t v7 = *(void **)(a1 + 32);
  uint64_t v8 = *(unsigned __int8 *)(a1 + 48);
  id v9 = a4;
  id v10 = a2;
  [v7 notePruningRequestForResource:v10 realPrune:v8 successful:0];
  id v11 = (id)objc_claimAutoreleasedReturnValue( +[CPLErrors cplErrorWithCode:description:]( &OBJC_CLASS___CPLErrors,  "cplErrorWithCode:description:",  a3,  @"Resource unsafe to prune: %@",  v9));

  [*(id *)(a1 + 40) setObject:v11 forKeyedSubscript:v10];
}

void sub_100131B10( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,char a53)
{
}

void sub_100131B80(void *a1)
{
  uint64_t v2 = a1[6];
  uint64_t v3 = a1[4];
  id v5 = (id)objc_claimAutoreleasedReturnValue(+[CPLErrors unknownError](&OBJC_CLASS___CPLErrors, "unknownError"));
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue( +[CPLErrors unsafeResources:withError:realPrune:resourceStorage:]( &OBJC_CLASS___CPLErrors,  "unsafeResources:withError:realPrune:resourceStorage:",  v3,  v5,  0LL,  a1[5]));
  (*(void (**)(uint64_t, void *, void *))(v2 + 16))(v2, &__NSArray0__struct, v4);
}

void sub_100131C0C(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  uint64_t v7 = *(void **)(a1 + 32);
  uint64_t v8 = *(unsigned __int8 *)(a1 + 48);
  id v9 = a4;
  id v10 = a2;
  [v7 notePruningRequestForResource:v10 realPrune:v8 successful:0];
  id v11 = (id)objc_claimAutoreleasedReturnValue( +[CPLErrors cplErrorWithCode:description:]( &OBJC_CLASS___CPLErrors,  "cplErrorWithCode:description:",  a3,  @"Resource unsafe to prune: %@",  v9));

  [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) setObject:v11 forKeyedSubscript:v10];
}

void sub_100131CBC(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 identity]);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v4 fileURL]);

  if (v5)
  {
    if (*(_BYTE *)(a1 + 72))
    {
      [*(id *)(a1 + 32) notePruningRequestForResource:v3 realPrune:*(unsigned __int8 *)(a1 + 73) successful:1];
      [*(id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) addObject:v3];
      goto LABEL_28;
    }

    id v11 = *(void **)(a1 + 40);
    id v20 = 0LL;
    unsigned int v12 = [v11 removeItemAtURL:v5 error:&v20];
    id v13 = v20;
    if (v12)
    {
      if (!_CPLSilentLogging)
      {
        id v14 = sub_10011CDF4();
        __int128 v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(v14);
        if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
        {
          __int128 v16 = (void *)objc_claimAutoreleasedReturnValue([v5 path]);
          *(_DWORD *)__int128 buf = 138412546;
          uint64_t v22 = (const char *)v3;
          __int16 v23 = 2112;
          id v24 = v16;
          _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "Successfully deleted %@ at %@", buf, 0x16u);
        }
      }

      [*(id *)(a1 + 32) notePruningRequestForResource:v3 realPrune:*(unsigned __int8 *)(a1 + 73) successful:1];
    }

    else
    {
      if (![*(id *)(a1 + 40) cplIsFileDoesNotExistError:v13])
      {
        [*(id *)(a1 + 32) notePruningRequestForResource:v3 realPrune:*(unsigned __int8 *)(a1 + 73) successful:0];
        [*(id *)(*(void *)(*(void *)(a1 + 64) + 8) + 40) setObject:v13 forKeyedSubscript:v3];
        goto LABEL_27;
      }

      if (!_CPLSilentLogging)
      {
        id v17 = sub_10011CDF4();
        id v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(v17);
        if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
        {
          id v19 = (void *)objc_claimAutoreleasedReturnValue([v5 path]);
          *(_DWORD *)__int128 buf = 138412546;
          uint64_t v22 = (const char *)v3;
          __int16 v23 = 2112;
          id v24 = v19;
          _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEBUG,  "File does not exist for %@ at %@. Considering it deleted",  buf,  0x16u);
        }
      }

      [*(id *)(a1 + 32) notePruningRequestForResource:v3 realPrune:*(unsigned __int8 *)(a1 + 73) successful:1 prunedSize:0];
    }

    [*(id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) addObject:v3];
LABEL_27:

    goto LABEL_28;
  }

  if (!_CPLSilentLogging)
  {
    id v6 = sub_10011CDF4();
    uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      uint64_t v8 = "check (prune)";
      BOOL v9 = *(_BYTE *)(a1 + 72) == 0;
      if (!*(_BYTE *)(a1 + 72)) {
        uint64_t v8 = "delete";
      }
      *(_DWORD *)__int128 buf = 136315650;
      uint64_t v22 = v8;
      id v10 = "check";
      if (v9) {
        id v10 = "delete";
      }
      __int16 v23 = 2112;
      id v24 = v3;
      __int16 v25 = 2080;
      id v26 = v10;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_ERROR,  "Client asked to %s %@ but did not provide a file URL to %s",  buf,  0x20u);
    }
  }

  [*(id *)(a1 + 32) notePruningRequestForResource:v3 realPrune:*(unsigned __int8 *)(a1 + 73) successful:0];
  (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
LABEL_28:
}

void sub_100132004(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (*(_BYTE *)(a1 + 120))
  {
    BOOL v4 = 1LL;
  }

  else
  {
    if (qword_1002A37A0 != -1) {
      dispatch_once(&qword_1002A37A0, &stru_100246D60);
    }
    BOOL v4 = byte_1002A37A8 != 0;
  }

  id v5 = *(void **)(a1 + 32);
  uint64_t v6 = *(void *)(a1 + 88);
  uint64_t v7 = *(void *)(*(void *)(a1 + 80) + 8LL);
  uint64_t v8 = *(unsigned __int8 *)(a1 + 121);
  id obj = *(id *)(v7 + 40);
  BOOL v9 = (void *)objc_claimAutoreleasedReturnValue( [v5 safeResourcesToDeleteFromProposedResources:*(void *)(a1 + 40) realPrune:v8 checkServerIfNecessary:v4 allowUnconfirmed:0 resource sToCheckOnServer:&obj targetScopeMapping:*(void *)(a1 + 48) unsafeResources:*(void *)(*(void *)(v6 + 8) + 40)]);
  objc_storeStrong((id *)(v7 + 40), obj);
  __int128 v23 = 0u;
  __int128 v24 = 0u;
  __int128 v21 = 0u;
  __int128 v22 = 0u;
  id v10 = v9;
  id v11 = (char *)[v10 countByEnumeratingWithState:&v21 objects:v26 count:16];
  if (v11)
  {
    unsigned int v12 = v11;
    uint64_t v13 = *(void *)v22;
    do
    {
      for (unint64_t i = 0LL; i != v12; ++i)
      {
        if (*(void *)v22 != v13) {
          objc_enumerationMutation(v10);
        }
        (*(void (**)(void))(*(void *)(a1 + 72) + 16LL))();
      }

      unsigned int v12 = (char *)[v10 countByEnumeratingWithState:&v21 objects:v26 count:16];
    }

    while (v12);
  }

  if ([*(id *)(*(void *)(*(void *)(a1 + 80) + 8) + 40) count])
  {
    if (!v4) {
      sub_100198EBC(a1, (uint64_t *)(a1 + 32));
    }
    uint64_t v15 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) clientCacheIdentifier]);
    uint64_t v16 = *(void *)(*(void *)(a1 + 96) + 8LL);
    id v17 = *(void **)(v16 + 40);
    *(void *)(v16 + 40) = v15;

    uint64_t v18 = objc_claimAutoreleasedReturnValue( [*(id *)(a1 + 32) _cloudResourcesToLocalResourcesWithLocalResources:*(void *)(*(void *)(*(void *)(a1 + 80) + 8) + 40) targetMapping:*(void *)(a1 + 64)]);
    uint64_t v19 = *(void *)(*(void *)(a1 + 104) + 8LL);
    id v20 = *(void **)(v19 + 40);
    *(void *)(v19 + 40) = v18;
  }
}

void sub_100132220(uint64_t a1, void *a2)
{
  id v3 = a2;
  BOOL v4 = (void *)objc_claimAutoreleasedReturnValue([v3 error]);

  if (v4)
  {
    if (!_CPLSilentLogging)
    {
      id v5 = sub_10011CDF4();
      uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      {
        if (*(_BYTE *)(a1 + 136)) {
          uint64_t v7 = "check (prune)";
        }
        else {
          uint64_t v7 = "prune";
        }
        uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v3 error]);
        *(_DWORD *)__int128 buf = 136315394;
        *(void *)&uint8_t buf[4] = v7;
        *(_WORD *)&buf[12] = 2112;
        *(void *)&buf[14] = v8;
        _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_ERROR,  "Got a transaction error trying to %s some resources: %@",  buf,  0x16u);
      }
    }

    if (![*(id *)(*(void *)(*(void *)(a1 + 96) + 8) + 40) count])
    {
      uint64_t v38 = *(void **)(*(void *)(a1 + 32) + 104LL);
      v56[0] = _NSConcreteStackBlock;
      v56[1] = 3221225472LL;
      v56[2] = sub_10013278C;
      v56[3] = &unk_100246810;
      id v17 = &v60;
      id v60 = *(id *)(a1 + 80);
      id v57 = *(id *)(a1 + 40);
      id v58 = v3;
      char v61 = *(_BYTE *)(a1 + 137);
      id v59 = *(id *)(a1 + 48);
      uint64_t v39 = v56;
      *(void *)__int128 buf = _NSConcreteStackBlock;
      *(void *)&buf[8] = 3221225472LL;
      *(void *)&buf[16] = sub_10013AA68;
      __int128 v63 = &unk_10023DBC8;
      v64[0] = v39;
      id v40 = v38;
      dispatch_block_t v41 = dispatch_block_create(DISPATCH_BLOCK_ENFORCE_QOS_CLASS|DISPATCH_BLOCK_ASSIGN_CURRENT, buf);
      dispatch_async(v40, v41);

      id v26 = v57;
LABEL_28:

      goto LABEL_29;
    }
  }

  if ([*(id *)(*(void *)(*(void *)(a1 + 104) + 8) + 40) count])
  {
    if (!_CPLSilentLogging)
    {
      id v9 = sub_10011CDF4();
      id v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        if (*(_BYTE *)(a1 + 136)) {
          id v11 = "Checked-prune";
        }
        else {
          id v11 = "Pruned";
        }
        id v12 = [*(id *)(*(void *)(*(void *)(a1 + 96) + 8) + 40) count];
        id v13 = [*(id *)(*(void *)(*(void *)(a1 + 112) + 8) + 40) count];
        id v14 = [*(id *)(*(void *)(*(void *)(a1 + 104) + 8) + 40) count];
        *(_DWORD *)__int128 buf = 136315906;
        *(void *)&uint8_t buf[4] = v11;
        *(_WORD *)&buf[12] = 2048;
        *(void *)&buf[14] = v12;
        *(_WORD *)&buf[22] = 2048;
        __int128 v63 = v13;
        LOWORD(v64[0]) = 2048;
        *(id *)((char *)v64 + 2) = v14;
        _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "%s %lu resources, and found %lu resources unsafe to prune but %lu resources need to be checked on server",  buf,  0x2Au);
      }
    }

    uint64_t v15 = *(void **)(a1 + 32);
    uint64_t v16 = *(void *)(*(void *)(*(void *)(a1 + 104) + 8LL) + 40LL);
    v44[0] = _NSConcreteStackBlock;
    v44[1] = 3221225472LL;
    v44[2] = sub_100132814;
    v44[3] = &unk_1002468B0;
    __int128 v51 = *(_OWORD *)(a1 + 112);
    char v54 = *(_BYTE *)(a1 + 137);
    id v17 = (id *)v45;
    uint64_t v19 = *(void *)(a1 + 56);
    uint64_t v18 = *(void *)(a1 + 64);
    id v20 = *(id *)(a1 + 48);
    uint64_t v21 = *(void *)(a1 + 32);
    v45[0] = v20;
    v45[1] = v21;
    id v22 = *(id *)(a1 + 80);
    uint64_t v23 = *(void *)(a1 + 96);
    id v49 = v22;
    uint64_t v52 = v23;
    id v24 = *(id *)(a1 + 72);
    uint64_t v25 = *(void *)(a1 + 128);
    id v46 = v24;
    uint64_t v53 = v25;
    id v47 = *(id *)(a1 + 64);
    id v50 = *(id *)(a1 + 88);
    char v55 = *(_BYTE *)(a1 + 136);
    id v48 = *(id *)(a1 + 40);
    [v15 checkServerForResources:v16 targetMapping:v19 transportScopeMapping:v18 completionHandler:v44];

    id v26 = v49;
    goto LABEL_28;
  }

  if (!_CPLSilentLogging)
  {
    id v27 = sub_10011CDF4();
    id v28 = (os_log_s *)objc_claimAutoreleasedReturnValue(v27);
    if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
    {
      if (*(_BYTE *)(a1 + 136)) {
        id v29 = "Checked (prune)";
      }
      else {
        id v29 = "Pruned";
      }
      id v30 = [*(id *)(*(void *)(*(void *)(a1 + 96) + 8) + 40) count];
      id v31 = [*(id *)(*(void *)(*(void *)(a1 + 112) + 8) + 40) count];
      *(_DWORD *)__int128 buf = 136315650;
      *(void *)&uint8_t buf[4] = v29;
      *(_WORD *)&buf[12] = 2048;
      *(void *)&buf[14] = v30;
      *(_WORD *)&buf[22] = 2048;
      __int128 v63 = v31;
      _os_log_impl( (void *)&_mh_execute_header,  v28,  OS_LOG_TYPE_DEFAULT,  "%s %lu resources, and found %lu resources unsafe to prune",  buf,  0x20u);
    }
  }

  id v32 = *(void **)(*(void *)(a1 + 32) + 104LL);
  v42[0] = _NSConcreteStackBlock;
  v42[1] = 3221225472LL;
  v42[2] = sub_10013328C;
  v42[3] = &unk_100246838;
  id v17 = (id *)v43;
  id v33 = *(id *)(a1 + 80);
  uint64_t v34 = *(void *)(a1 + 96);
  v43[0] = v33;
  v43[1] = v34;
  v43[2] = *(void *)(a1 + 112);
  uint64_t v35 = v42;
  *(void *)__int128 buf = _NSConcreteStackBlock;
  *(void *)&buf[8] = 3221225472LL;
  *(void *)&buf[16] = sub_10013AA68;
  __int128 v63 = &unk_10023DBC8;
  v64[0] = v35;
  id v36 = v32;
  dispatch_block_t v37 = dispatch_block_create(DISPATCH_BLOCK_ENFORCE_QOS_CLASS|DISPATCH_BLOCK_ASSIGN_CURRENT, buf);
  dispatch_async(v36, v37);

LABEL_29:
}

void sub_10013278C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 56);
  uint64_t v3 = *(void *)(a1 + 32);
  id v5 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) error]);
  BOOL v4 = (void *)objc_claimAutoreleasedReturnValue( +[CPLErrors unsafeResources:withError:realPrune:resourceStorage:]( &OBJC_CLASS___CPLErrors,  "unsafeResources:withError:realPrune:resourceStorage:",  v3,  v5,  *(unsigned __int8 *)(a1 + 64),  *(void *)(a1 + 48)));
  (*(void (**)(uint64_t, void *, void *))(v2 + 16))(v2, &__NSArray0__struct, v4);
}

void sub_100132814(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  if (v9)
  {
    if (!_CPLSilentLogging)
    {
      id v10 = sub_10011CDF4();
      id v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        LODWORD(buf) = 138412290;
        *(void *)((char *)&buf + 4) = v9;
        _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "Failed to check resources to prune on server: %@",  (uint8_t *)&buf,  0xCu);
      }
    }

    id v12 = *(void **)(*(void *)(*(void *)(a1 + 88) + 8LL) + 40LL);
    uint64_t v13 = *(void *)(*(void *)(*(void *)(a1 + 96) + 8LL) + 40LL);
    id v14 = (void *)objc_claimAutoreleasedReturnValue( +[CPLErrors cplErrorWithCode:description:]( &OBJC_CLASS___CPLErrors,  "cplErrorWithCode:description:",  80LL,  @"Failed to check server"));
    uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue( +[CPLErrors unsafeResources:withError:realPrune:resourceStorage:]( &OBJC_CLASS___CPLErrors,  "unsafeResources:withError:realPrune:resourceStorage:",  v13,  v14,  *(unsigned __int8 *)(a1 + 120),  *(void *)(a1 + 32)));
    [v12 addEntriesFromDictionary:v15];

    uint64_t v16 = *(void **)(*(void *)(a1 + 40) + 104LL);
    v53[0] = _NSConcreteStackBlock;
    v53[1] = 3221225472LL;
    v53[2] = sub_100132C08;
    v53[3] = &unk_100246838;
    id v17 = (id *)v54;
    id v18 = *(id *)(a1 + 72);
    uint64_t v19 = *(void *)(a1 + 104);
    v54[0] = v18;
    v54[1] = v19;
    v54[2] = *(void *)(a1 + 88);
    id v20 = v53;
    *(void *)&__int128 buf = _NSConcreteStackBlock;
    *((void *)&buf + 1) = 3221225472LL;
    id v56 = sub_10013AA68;
    id v57 = &unk_10023DBC8;
    id v58 = v20;
    uint64_t v21 = v16;
    dispatch_block_t v22 = dispatch_block_create(DISPATCH_BLOCK_ENFORCE_QOS_CLASS|DISPATCH_BLOCK_ASSIGN_CURRENT, &buf);
    dispatch_async(v21, v22);
  }

  else
  {
    if (!_CPLSilentLogging)
    {
      id v23 = sub_10011CDF4();
      id v24 = (os_log_s *)objc_claimAutoreleasedReturnValue(v23);
      if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
      {
        LODWORD(buf) = 134217984;
        *(void *)((char *)&buf + 4) = [v7 count];
        _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_DEFAULT,  "After checking server, found %lu additional resources are safe to prune",  (uint8_t *)&buf,  0xCu);
      }
    }

    if ([v8 count]) {
      [*(id *)(*(void *)(*(void *)(a1 + 88) + 8) + 40) addEntriesFromDictionary:v8];
    }
    uint64_t v25 = *(void **)(a1 + 48);
    v43[0] = _NSConcreteStackBlock;
    v43[1] = 3221225472LL;
    v43[2] = sub_100132C2C;
    void v43[3] = &unk_100246860;
    id v17 = &v44;
    id v26 = v25;
    uint64_t v27 = *(void *)(a1 + 112);
    id v44 = v26;
    uint64_t v28 = *(void *)(a1 + 88);
    uint64_t v50 = v27;
    uint64_t v51 = v28;
    id v45 = v7;
    char v52 = *(_BYTE *)(a1 + 120);
    id v29 = *(id *)(a1 + 32);
    uint64_t v30 = *(void *)(a1 + 40);
    id v46 = v29;
    uint64_t v47 = v30;
    id v48 = *(id *)(a1 + 56);
    id v49 = *(id *)(a1 + 80);
    v35[0] = _NSConcreteStackBlock;
    v35[1] = 3221225472LL;
    void v35[2] = sub_100132E4C;
    v35[3] = &unk_100246888;
    char v41 = *(_BYTE *)(a1 + 121);
    uint64_t v31 = *(void *)(a1 + 40);
    uint64_t v39 = *(void *)(a1 + 104);
    void v35[4] = v31;
    id v38 = *(id *)(a1 + 72);
    id v36 = *(id *)(a1 + 64);
    char v42 = *(_BYTE *)(a1 + 120);
    id v32 = *(id *)(a1 + 32);
    uint64_t v33 = *(void *)(a1 + 88);
    id v37 = v32;
    uint64_t v40 = v33;
    id v34 = [v26 performWriteTransactionWithBlock:v43 completionHandler:v35];
  }
}

uint64_t sub_100132C08(void *a1)
{
  return (*(uint64_t (**)(void, void, void))(a1[4] + 16LL))( a1[4],  *(void *)(*(void *)(a1[5] + 8LL) + 40LL),  *(void *)(*(void *)(a1[6] + 8LL) + 40LL));
}

void sub_100132C2C(uint64_t a1)
{
  uint64_t v2 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) clientCacheIdentifier]);
  unint64_t v3 = *(void *)(*(void *)(*(void *)(a1 + 80) + 8LL) + 40LL);
  if (v3) {
    BOOL v4 = v2 == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4)
  {
    if (!(v3 | v2)) {
      goto LABEL_13;
    }
  }

  else if ([(id)v3 isEqual:v2])
  {
LABEL_13:
    id v9 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(a1 + 56) safeResourcesToDeleteFromProposedResources:*(void *)(a1 + 40) realPrune:*(unsigned __int8 *)(a1 + 96) checkServerIfNecessary:0 allowUnconfirmed:1 resour cesToCheckOnServer:0 targetScopeMapping:*(void *)(a1 + 64) unsafeResources:*(void *)(*(void *)(*(void *)(a1 + 88) + 8) + 40)]);
    __int128 v15 = 0u;
    __int128 v16 = 0u;
    __int128 v17 = 0u;
    __int128 v18 = 0u;
    id v11 = (char *)[v9 countByEnumeratingWithState:&v15 objects:v20 count:16];
    if (v11)
    {
      id v12 = v11;
      uint64_t v13 = *(void *)v16;
      do
      {
        for (unint64_t i = 0LL; i != v12; ++i)
        {
          if (*(void *)v16 != v13) {
            objc_enumerationMutation(v9);
          }
          (*(void (**)(void))(*(void *)(a1 + 72) + 16LL))();
        }

        id v12 = (char *)[v9 countByEnumeratingWithState:&v15 objects:v20 count:16];
      }

      while (v12);
    }

    goto LABEL_20;
  }

  if (!_CPLSilentLogging)
  {
    id v5 = sub_10011CDF4();
    uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_ERROR,  "Store has been reset during the resources check on server",  buf,  2u);
    }
  }

  id v7 = *(void **)(*(void *)(*(void *)(a1 + 88) + 8LL) + 40LL);
  uint64_t v8 = *(void *)(a1 + 40);
  id v9 = (void *)objc_claimAutoreleasedReturnValue( +[CPLErrors cplErrorWithCode:description:]( &OBJC_CLASS___CPLErrors,  "cplErrorWithCode:description:",  27LL,  @"Store has been reset"));
  id v10 = (void *)objc_claimAutoreleasedReturnValue( +[CPLErrors unsafeResources:withError:realPrune:resourceStorage:]( &OBJC_CLASS___CPLErrors,  "unsafeResources:withError:realPrune:resourceStorage:",  v8,  v9,  *(unsigned __int8 *)(a1 + 96),  *(void *)(a1 + 48)));
  [v7 addEntriesFromDictionary:v10];

LABEL_20:
}

void sub_100132E4C(uint64_t a1, void *a2)
{
  id v3 = a2;
  BOOL v4 = (void *)objc_claimAutoreleasedReturnValue([v3 error]);

  if (!v4) {
    goto LABEL_10;
  }
  if (!_CPLSilentLogging)
  {
    id v5 = sub_10011CDF4();
    uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      if (*(_BYTE *)(a1 + 80)) {
        id v7 = "check (prune)";
      }
      else {
        id v7 = "prune";
      }
      uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v3 error]);
      *(_DWORD *)__int128 buf = 136315394;
      *(void *)&uint8_t buf[4] = v7;
      *(_WORD *)&buf[12] = 2112;
      *(void *)&buf[14] = v8;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_ERROR,  "Got a transaction error trying to %s some resources: %@",  buf,  0x16u);
    }
  }

  if (![*(id *)(*(void *)(*(void *)(a1 + 64) + 8) + 40) count])
  {
    uint64_t v19 = *(void **)(*(void *)(a1 + 32) + 104LL);
    v26[0] = _NSConcreteStackBlock;
    v26[1] = 3221225472LL;
    _OWORD v26[2] = sub_1001331E0;
    v26[3] = &unk_100246810;
    __int128 v15 = &v30;
    id v30 = *(id *)(a1 + 56);
    id v27 = *(id *)(a1 + 40);
    id v28 = v3;
    char v31 = *(_BYTE *)(a1 + 81);
    id v29 = *(id *)(a1 + 48);
    id v20 = v26;
    *(void *)__int128 buf = _NSConcreteStackBlock;
    *(void *)&uint8_t buf[8] = 3221225472LL;
    *(void *)&buf[16] = sub_10013AA68;
    uint64_t v33 = &unk_10023DBC8;
    id v34 = v20;
    uint64_t v21 = v19;
    dispatch_block_t v22 = dispatch_block_create(DISPATCH_BLOCK_ENFORCE_QOS_CLASS|DISPATCH_BLOCK_ASSIGN_CURRENT, buf);
    dispatch_async(v21, v22);
  }

  else
  {
LABEL_10:
    if (!_CPLSilentLogging)
    {
      id v9 = sub_10011CDF4();
      id v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        if (*(_BYTE *)(a1 + 80)) {
          id v11 = "Checked (prune)";
        }
        else {
          id v11 = "Pruned";
        }
        id v12 = [*(id *)(*(void *)(*(void *)(a1 + 64) + 8) + 40) count];
        id v13 = [*(id *)(*(void *)(*(void *)(a1 + 72) + 8) + 40) count];
        *(_DWORD *)__int128 buf = 136315650;
        *(void *)&uint8_t buf[4] = v11;
        *(_WORD *)&buf[12] = 2048;
        *(void *)&buf[14] = v12;
        *(_WORD *)&buf[22] = 2048;
        uint64_t v33 = v13;
        _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "%s %lu resources, and found %lu resources unsafe to prune",  buf,  0x20u);
      }
    }

    id v14 = *(void **)(*(void *)(a1 + 32) + 104LL);
    v23[0] = _NSConcreteStackBlock;
    v23[1] = 3221225472LL;
    v23[2] = sub_100133268;
    v23[3] = &unk_100246838;
    __int128 v15 = &v24;
    id v24 = *(id *)(a1 + 56);
    __int128 v25 = *(_OWORD *)(a1 + 64);
    __int128 v16 = v23;
    *(void *)__int128 buf = _NSConcreteStackBlock;
    *(void *)&uint8_t buf[8] = 3221225472LL;
    *(void *)&buf[16] = sub_10013AA68;
    uint64_t v33 = &unk_10023DBC8;
    id v34 = v16;
    __int128 v17 = v14;
    dispatch_block_t v18 = dispatch_block_create(DISPATCH_BLOCK_ENFORCE_QOS_CLASS|DISPATCH_BLOCK_ASSIGN_CURRENT, buf);
    dispatch_async(v17, v18);
  }
}

void sub_1001331E0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 56);
  uint64_t v3 = *(void *)(a1 + 32);
  id v5 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) error]);
  BOOL v4 = (void *)objc_claimAutoreleasedReturnValue( +[CPLErrors unsafeResources:withError:realPrune:resourceStorage:]( &OBJC_CLASS___CPLErrors,  "unsafeResources:withError:realPrune:resourceStorage:",  v3,  v5,  *(unsigned __int8 *)(a1 + 64),  *(void *)(a1 + 48)));
  (*(void (**)(uint64_t, void *, void *))(v2 + 16))(v2, &__NSArray0__struct, v4);
}

uint64_t sub_100133268(void *a1)
{
  return (*(uint64_t (**)(void, void, void))(a1[4] + 16LL))( a1[4],  *(void *)(*(void *)(a1[5] + 8LL) + 40LL),  *(void *)(*(void *)(a1[6] + 8LL) + 40LL));
}

uint64_t sub_10013328C(void *a1)
{
  return (*(uint64_t (**)(void, void, void))(a1[4] + 16LL))( a1[4],  *(void *)(*(void *)(a1[5] + 8LL) + 40LL),  *(void *)(*(void *)(a1[6] + 8LL) + 40LL));
}

void sub_10013342C(uint64_t a1, void *a2)
{
  id v3 = a2;
  v29[0] = 0LL;
  v29[1] = v29;
  v29[2] = 0x3032000000LL;
  v29[3] = sub_10011D36C;
  void v29[4] = sub_10011D37C;
  id v30 = 0LL;
  v21[0] = _NSConcreteStackBlock;
  v21[1] = 3221225472LL;
  v21[2] = sub_1001336DC;
  v21[3] = &unk_100246900;
  id v22 = *(id *)(a1 + 32);
  id v23 = *(id *)(a1 + 40);
  id v24 = *(id *)(a1 + 48);
  id v25 = *(id *)(a1 + 56);
  id v4 = *(id *)(a1 + 64);
  uint64_t v5 = *(void *)(a1 + 72);
  uint64_t v6 = *(void **)(a1 + 80);
  id v26 = v4;
  uint64_t v27 = v5;
  id v28 = v6;
  [v3 do:v21];
  id v7 = (void *)objc_claimAutoreleasedReturnValue([v3 error]);

  uint64_t v8 = *(void **)(*(void *)(a1 + 72) + 104LL);
  if (v7)
  {
    v18[0] = _NSConcreteStackBlock;
    v18[1] = 3221225472LL;
    v18[2] = sub_100133B30;
    v18[3] = &unk_10023DFE0;
    id v9 = &v20;
    id v20 = *(id *)(a1 + 80);
    id v19 = v3;
    id v10 = v18;
    __int128 block = _NSConcreteStackBlock;
    uint64_t v32 = 3221225472LL;
    uint64_t v33 = sub_10013AA68;
    id v34 = &unk_10023DBC8;
    id v35 = v10;
    id v11 = v8;
    dispatch_block_t v12 = dispatch_block_create(DISPATCH_BLOCK_ENFORCE_QOS_CLASS|DISPATCH_BLOCK_ASSIGN_CURRENT, &block);
    dispatch_async(v11, v12);
  }

  else
  {
    v16[0] = _NSConcreteStackBlock;
    v16[1] = 3221225472LL;
    v16[2] = sub_100133B78;
    v16[3] = &unk_100245DA8;
    id v9 = (id *)v17;
    v17[0] = *(id *)(a1 + 80);
    v17[1] = v29;
    id v13 = v16;
    __int128 block = _NSConcreteStackBlock;
    uint64_t v32 = 3221225472LL;
    uint64_t v33 = sub_10013AA68;
    id v34 = &unk_10023DBC8;
    id v35 = v13;
    id v14 = v8;
    dispatch_block_t v15 = dispatch_block_create(DISPATCH_BLOCK_ENFORCE_QOS_CLASS|DISPATCH_BLOCK_ASSIGN_CURRENT, &block);
    dispatch_async(v14, v15);
  }

  _Block_object_dispose(v29, 8);
}

void sub_1001336C4(_Unwind_Exception *a1)
{
}

uint64_t sub_1001336DC(uint64_t a1, void *a2)
{
  if (*(void *)(a1 + 32))
  {
    id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) transactionClientCacheView]);
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v4 recordViewWithScopedIdentifier:*(void *)(a1 + 32)]);
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v5 changeForType:8]);

    if (v6)
    {
      if ([v6 supportsResources])
      {
        id v7 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(a1 + 48) cloudScopedIdentifierForLocalScopedIdentifier:*(void *)(a1 + 32) isFinal:&v46]);
        if (v7)
        {
          uint64_t v33 = v7;
          uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) recordWithScopedIdentifier:v7 isFinal:0]);
          __int128 v42 = 0u;
          __int128 v43 = 0u;
          __int128 v44 = 0u;
          __int128 v45 = 0u;
          id v34 = v6;
          id v9 = (void *)objc_claimAutoreleasedReturnValue([v6 resources]);
          id v10 = [v9 countByEnumeratingWithState:&v42 objects:v50 count:16];
          if (v10)
          {
            id v11 = v10;
            uint64_t v12 = *(void *)v43;
            do
            {
              for (unint64_t i = 0LL; i != v11; unint64_t i = (char *)i + 1)
              {
                if (*(void *)v43 != v12) {
                  objc_enumerationMutation(v9);
                }
                id v14 = *(void **)(*((void *)&v42 + 1) + 8LL * (void)i);
                dispatch_block_t v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "resourceForType:", objc_msgSend(v14, "resourceType")));
                __int128 v16 = (void *)objc_claimAutoreleasedReturnValue([v15 identity]);
                unsigned int v17 = [v16 isAvailable];

                if (v17) {
                  uint64_t v18 = [*(id *)(a1 + 64) shouldUploadResource:v14] ^ 1;
                }
                else {
                  uint64_t v18 = 0LL;
                }
                id v19 = (void *)objc_claimAutoreleasedReturnValue([v14 identity]);
                [v19 setAvailable:v18];
              }

              id v11 = [v9 countByEnumeratingWithState:&v42 objects:v50 count:16];
            }

            while (v11);
          }

          id v7 = v33;
          uint64_t v6 = v34;
        }

        else
        {
          __int128 v40 = 0u;
          __int128 v41 = 0u;
          __int128 v38 = 0u;
          __int128 v39 = 0u;
          uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v6 resources]);
          id v22 = [v8 countByEnumeratingWithState:&v38 objects:v49 count:16];
          if (v22)
          {
            id v23 = v22;
            uint64_t v24 = *(void *)v39;
            do
            {
              for (j = 0LL; j != v23; j = (char *)j + 1)
              {
                if (*(void *)v39 != v24) {
                  objc_enumerationMutation(v8);
                }
                [v26 setAvailable:0];
              }

              id v23 = [v8 countByEnumeratingWithState:&v38 objects:v49 count:16];
            }

            while (v23);
          }
        }

        uint64_t v27 = *(void **)(a1 + 80);
        id v28 = *(void **)(*(void *)(a1 + 72) + 104LL);
        v35[0] = _NSConcreteStackBlock;
        v35[1] = 3221225472LL;
        void v35[2] = sub_100133AE8;
        v35[3] = &unk_10023DFE0;
        id v37 = v27;
        id v36 = v6;
        id v29 = v35;
        block[0] = _NSConcreteStackBlock;
        block[1] = 3221225472LL;
        block[2] = sub_10013AA68;
        block[3] = &unk_10023DBC8;
        id v48 = v29;
        id v30 = v28;
        dispatch_block_t v31 = dispatch_block_create(DISPATCH_BLOCK_ENFORCE_QOS_CLASS|DISPATCH_BLOCK_ASSIGN_CURRENT, block);
        dispatch_async(v30, v31);

        uint64_t v20 = 1LL;
        goto LABEL_33;
      }

      if (a2)
      {
        uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue( +[CPLErrors incorrectParametersErrorForParameter:]( &OBJC_CLASS___CPLErrors,  "incorrectParametersErrorForParameter:",  @"itemScopedIdentifier"));
        goto LABEL_22;
      }
    }

    else if (a2)
    {
      uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue( +[CPLErrors cplErrorWithCode:description:]( &OBJC_CLASS___CPLErrors,  "cplErrorWithCode:description:",  25LL,  @"%@ is not in client cache",  *(void *)(a1 + 32)));
LABEL_22:
      uint64_t v20 = 0LL;
      *a2 = v21;
LABEL_33:

      return v20;
    }

    uint64_t v20 = 0LL;
    goto LABEL_33;
  }

  uint64_t v20 = 0LL;
  if (a2) {
    *a2 = (id)objc_claimAutoreleasedReturnValue( +[CPLErrors incorrectParametersErrorForParameter:]( &OBJC_CLASS___CPLErrors,  "incorrectParametersErrorForParameter:",  @"itemScopedIdentifier"));
  }
  return v20;
}

void sub_100133AE8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) resources]);
  (*(void (**)(uint64_t, void, id))(v1 + 16))(v1, 0LL, v2);
}

void sub_100133B30(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) error]);
  (*(void (**)(uint64_t, id, void))(v1 + 16))(v1, v2, 0LL);
}

uint64_t sub_100133B78(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 32) + 16LL))( *(void *)(a1 + 32),  0LL,  *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL));
}

void sub_100133C60(uint64_t a1, void *a2)
{
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  v3[2] = sub_100133CCC;
  v3[3] = &unk_1002457F8;
  id v4 = *(id *)(a1 + 32);
  [a2 do:v3];
}

id sub_100133CCC(uint64_t a1, uint64_t a2)
{
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) resourceStorage]);
  id v4 = [v3 compactWithError:a2];

  return v4;
}

void sub_100133D0C(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = (id)objc_claimAutoreleasedReturnValue([a2 error]);
  (*(void (**)(uint64_t, id))(v2 + 16))(v2, v3);
}

void sub_100133FF0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  uint64_t v2 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) ownerNameForEngineLibrary:*(void *)(*(void *)(a1 + 32) + 96)]);
  id v3 = @"client";
  if (v2) {
    id v3 = (const __CFString *)v2;
  }
  id v5 = (id)v2;
  id v4 = (void *)objc_claimAutoreleasedReturnValue( +[CPLErrors cplErrorWithCode:description:]( &OBJC_CLASS___CPLErrors,  "cplErrorWithCode:description:",  150LL,  @"%@ is not allowed to perform this action",  v3));
  (*(void (**)(uint64_t, void, void *))(v1 + 16))(v1, 0LL, v4);
}

void sub_10013407C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = *(void **)(a1 + 40);
  uint64_t v8 = *(void **)(*(void *)(a1 + 32) + 104LL);
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472LL;
  v14[2] = sub_100134198;
  v14[3] = &unk_10023EA48;
  id v16 = v6;
  id v17 = v7;
  id v15 = v5;
  id v9 = v14;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_10013AA68;
  block[3] = &unk_10023DBC8;
  id v19 = v9;
  id v10 = v8;
  id v11 = v6;
  id v12 = v5;
  dispatch_block_t v13 = dispatch_block_create(DISPATCH_BLOCK_ENFORCE_QOS_CLASS|DISPATCH_BLOCK_ASSIGN_CURRENT, block);
  dispatch_async(v10, v13);
}

uint64_t sub_100134198(void *a1)
{
  return (*(uint64_t (**)(void, void, void))(a1[6] + 16LL))(a1[6], a1[4], a1[5]);
}

void sub_100134288(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 error]);

  if (v4)
  {
    uint64_t v5 = *(void *)(a1 + 48);
    id v6 = (void *)objc_claimAutoreleasedReturnValue([v3 error]);
    (*(void (**)(uint64_t, void, void *))(v5 + 16))(v5, 0LL, v6);
  }

  else
  {
    id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) cloudCache]);
    id v7 = -[NSMutableDictionary initWithCapacity:]( [NSMutableDictionary alloc],  "initWithCapacity:",  [*(id *)(a1 + 40) count]);
    __int128 v15 = 0u;
    __int128 v16 = 0u;
    __int128 v17 = 0u;
    __int128 v18 = 0u;
    id v8 = *(id *)(a1 + 40);
    id v9 = [v8 countByEnumeratingWithState:&v15 objects:v19 count:16];
    if (v9)
    {
      id v10 = v9;
      uint64_t v11 = *(void *)v16;
      do
      {
        for (unint64_t i = 0LL; i != v10; unint64_t i = (char *)i + 1)
        {
          if (*(void *)v16 != v11) {
            objc_enumerationMutation(v8);
          }
          uint64_t v13 = *(void *)(*((void *)&v15 + 1) + 8LL * (void)i);
          id v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "targetForRecordWithCloudScopedIdentifier:", v13, (void)v15));
          if (v14) {
            -[NSMutableDictionary setObject:forKeyedSubscript:](v7, "setObject:forKeyedSubscript:", v14, v13);
          }
        }

        id v10 = [v8 countByEnumeratingWithState:&v15 objects:v19 count:16];
      }

      while (v10);
    }

    (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
  }
}

void sub_100134694(uint64_t a1)
{
  id v4 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) abstractObject]);
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([v4 delegate]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) abstractObject]);
  [v2 libraryManagerHasChangesToPull:v3];
}

void sub_100134878(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) abstractObject]);
  id v4 = (id)objc_claimAutoreleasedReturnValue([v2 delegate]);

  if (v4 && (objc_opt_respondsToSelector(v4, "libraryManagerHasStatusChanges:") & 1) != 0)
  {
    id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) abstractObject]);
    [v4 libraryManagerHasStatusChanges:v3];
  }
}

void sub_100134AA8(uint64_t a1)
{
  id v4 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) abstractObject]);
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([v4 resourceProgressDelegate]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) abstractObject]);
  [v2 libraryManager:v3 backgroundDownloadDidFinishForResource:*(void *)(a1 + 40)];
}

void sub_100134CC8(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) abstractObject]);
  id v4 = (id)objc_claimAutoreleasedReturnValue([v2 resourceProgressDelegate]);

  if ((objc_opt_respondsToSelector(v4, "libraryManager:backgroundDownloadDidFailForResource:") & 1) != 0)
  {
    id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) abstractObject]);
    [v4 libraryManager:v3 backgroundDownloadDidFailForResource:*(void *)(a1 + 40)];
  }
}

void sub_100134E30(uint64_t a1)
{
  id v4 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) abstractObject]);
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([v4 resourceProgressDelegate]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) abstractObject]);
  [v2 libraryManager:v3 uploadDidStartForResourceTransferTask:*(void *)(a1 + 40)];
}

void sub_100134FB8(uint64_t a1)
{
  id v3 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) resourceProgressDelegate]);
  if ((objc_opt_respondsToSelector(v3, "libraryManager:uploadDidProgress:forResourceTransferTask:") & 1) != 0)
  {
    LODWORD(v2) = *(_DWORD *)(a1 + 48);
    [v3 libraryManager:*(void *)(a1 + 32) uploadDidProgress:*(void *)(a1 + 40) forResourceTransferTask:v2];
  }
}

void sub_100135124(uint64_t a1)
{
  id v4 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) abstractObject]);
  double v2 = (void *)objc_claimAutoreleasedReturnValue([v4 resourceProgressDelegate]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) abstractObject]);
  [v2 libraryManager:v3 uploadDidFinishForResourceTransferTask:*(void *)(a1 + 40) withError:*(void *)(a1 + 48)];
}

void sub_100135260(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) abstractObject]);
  [v2 _setSizeOfResourcesToUpload:*(void *)(a1 + 40) sizeOfOriginalResourcesToUpload:*(void *)(a1 + 48) numberOfImages:*(void *)(a1 + 56) numberOfVideos:*(void *)(a1 + 64) numberOfOtherItems:*(void *)(a1 + 72)];
}

void sub_1001353C0(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) abstractObject]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 delegate]);
  if ((objc_opt_respondsToSelector(v3, "libraryManager:provideLocalResource:recordClass:completionHandler:") & 1) == 0)
  {
    if (v3)
    {
      if (!_CPLSilentLogging)
      {
        id v4 = sub_10011CDF4();
        uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
        if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
        {
          int v10 = 138412290;
          uint64_t v11 = v3;
          id v6 = "%@ does not support data recovery yet";
          id v7 = v5;
          uint32_t v8 = 12;
LABEL_10:
          _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, v6, (uint8_t *)&v10, v8);
          goto LABEL_11;
        }

        goto LABEL_11;
      }
    }

    else if (!_CPLSilentLogging)
    {
      id v9 = sub_10011CDF4();
      uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v10) = 0;
        id v6 = "Library manager has no delegate";
        id v7 = v5;
        uint32_t v8 = 2;
        goto LABEL_10;
      }

void sub_100135608(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) abstractObject]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 delegate]);
  if ((objc_opt_respondsToSelector(v3, "libraryManager:pushAllChangesWithCompletionHandler:") & 1) == 0)
  {
    if (v3)
    {
      if (!_CPLSilentLogging)
      {
        id v4 = sub_10011CDF4();
        uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
        if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)id v12 = 138412290;
          *(void *)&void v12[4] = v3;
          id v6 = "%@ does not support pushing all changes yet";
          id v7 = v5;
          uint32_t v8 = 12;
LABEL_10:
          _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, v6, v12, v8);
          goto LABEL_11;
        }

        goto LABEL_11;
      }
    }

    else if (!_CPLSilentLogging)
    {
      id v9 = sub_10011CDF4();
      uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)id v12 = 0;
        id v6 = "Library manager has no delegate";
        id v7 = v5;
        uint32_t v8 = 2;
        goto LABEL_10;
      }

void sub_1001358E8(uint64_t a1)
{
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  v3[2] = sub_1001359A0;
  v3[3] = &unk_10023E1B0;
  id v2 = *(void **)(a1 + 32);
  void v3[4] = *(void *)(a1 + 40);
  id v4 = *(id *)(a1 + 48);
  id v5 = *(id *)(a1 + 56);
  id v6 = *(id *)(a1 + 32);
  id v7 = *(id *)(a1 + 64);
  [v2 performAsCurrentWithPendingUnitCount:1 usingBlock:v3];
}

void sub_1001359A0(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) abstractObject]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 recordComputeStateDelegate]);
  if (v3)
  {
    uint64_t v4 = *(void *)(a1 + 40);
    uint64_t v5 = *(void *)(a1 + 48);
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472LL;
    v11[2] = sub_100135AF0;
    v11[3] = &unk_1002469F0;
    id v12 = *(id *)(a1 + 56);
    id v13 = *(id *)(a1 + 64);
    [v3 libraryManager:v2 providePayloadForComputeStates:v4 inFolderWithURL:v5 completionHandler:v11];

    id v6 = v12;
  }

  else
  {
    if (!_CPLSilentLogging)
    {
      id v7 = sub_10011CDF4();
      uint32_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)uint64_t v10 = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_ERROR,  "Library manager has no compute state delegate",  v10,  2u);
      }
    }

    uint64_t v9 = *(void *)(a1 + 64);
    id v6 = (void *)objc_claimAutoreleasedReturnValue(+[CPLErrors notImplementedError](&OBJC_CLASS___CPLErrors, "notImplementedError"));
    (*(void (**)(uint64_t, void, void *))(v9 + 16))(v9, 0LL, v6);
  }
}

void sub_100135AF0(uint64_t a1, void *a2, void *a3)
{
  id v9 = a2;
  id v5 = a3;
  unsigned int v6 = [*(id *)(a1 + 32) isCancelled];
  uint64_t v7 = *(void *)(a1 + 40);
  if (v6)
  {
    uint32_t v8 = (void *)objc_claimAutoreleasedReturnValue(+[CPLErrors operationCancelledError](&OBJC_CLASS___CPLErrors, "operationCancelledError"));
    (*(void (**)(uint64_t, void, void *))(v7 + 16))(v7, 0LL, v8);
  }

  else
  {
    (*(void (**)(uint64_t, id, id))(v7 + 16))(v7, v9, v5);
  }
}

void sub_100135E14(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](&OBJC_CLASS___NSNotificationCenter, "defaultCenter"));
  [v2 postNotificationName:CPLLibraryMustBeWipedNotificationName object:*(void *)(*(void *)(a1 + 32) + 96)];
}

void sub_100135E70(uint64_t a1, void *a2)
{
  v6[0] = _NSConcreteStackBlock;
  void v6[2] = sub_100135F04;
  v6[3] = &unk_100246A18;
  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = *(void **)(a1 + 40);
  uint64_t v9 = *(void *)(a1 + 56);
  void v6[4] = v4;
  v6[1] = 3221225472LL;
  id v7 = v5;
  id v8 = *(id *)(a1 + 48);
  [a2 do:v6];
}

uint64_t sub_100135F04(uint64_t a1, void *a2)
{
  switch(*(void *)(a1 + 56))
  {
    case 0LL:
      uint64_t v4 = *(void **)(a1 + 32);
      uint64_t v5 = *(void *)(a1 + 40);
      uint64_t v6 = *(void *)(a1 + 48);
      id v7 = "resetLocalSyncStateWithCause:error:";
      return (uint64_t)[v4 _resetStore:v5 reason:v6 resetSelector:v7 error:a2];
    case 1LL:
      uint64_t v4 = *(void **)(a1 + 32);
      uint64_t v5 = *(void *)(a1 + 40);
      uint64_t v6 = *(void *)(a1 + 48);
      id v7 = "resetCompleteSyncStateWithCause:error:";
      return (uint64_t)[v4 _resetStore:v5 reason:v6 resetSelector:v7 error:a2];
    case 2LL:
      uint64_t result = (uint64_t)[*(id *)(a1 + 32) _resetStore:*(void *)(a1 + 40) reason:*(void *)(a1 + 48) resetSelector:"resetCompleteSyncStateIncludingIDMappingWithCause:error:" error:a2];
      if (!(_DWORD)result) {
        return result;
      }
      __int128 v27 = 0u;
      __int128 v28 = 0u;
      __int128 v25 = 0u;
      __int128 v26 = 0u;
      uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) scopes]);
      uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v10 enumeratorForScopesIncludeInactive:0]);

      id v12 = [v11 countByEnumeratingWithState:&v25 objects:v29 count:16];
      if (!v12) {
        goto LABEL_15;
      }
      id v13 = v12;
      uint64_t v14 = *(void *)v26;
      break;
    case 3LL:
      uint64_t v4 = *(void **)(a1 + 32);
      uint64_t v5 = *(void *)(a1 + 40);
      uint64_t v6 = *(void *)(a1 + 48);
      id v7 = "resetSyncAnchorWithCause:error:";
      return (uint64_t)[v4 _resetStore:v5 reason:v6 resetSelector:v7 error:a2];
    case 4LL:
      if (!_CPLSilentLogging)
      {
        id v20 = sub_10011CDF4();
        uint64_t v21 = (os_log_s *)objc_claimAutoreleasedReturnValue(v20);
        if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)uint64_t v24 = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_ERROR,  "Client tried to unquarantine all records at once but it's not supported anymore",  v24,  2u);
        }
      }

      return 1LL;
    case 5LL:
      if (!_CPLSilentLogging)
      {
        id v22 = sub_10011CDF4();
        id v23 = (os_log_s *)objc_claimAutoreleasedReturnValue(v22);
        if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)uint64_t v24 = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_DEFAULT,  "Will refresh list of disabled features",  v24,  2u);
        }
      }

      return (uint64_t)[*(id *)(a1 + 40) setShouldUpdateDisabledFeaturesWithError:a2];
    default:
      if (!a2) {
        return 0LL;
      }
      id v8 = (id)objc_claimAutoreleasedReturnValue( +[CPLErrors incorrectParametersErrorForParameter:]( &OBJC_CLASS___CPLErrors,  "incorrectParametersErrorForParameter:",  @"option"));
      uint64_t result = 0LL;
      *a2 = v8;
      return result;
  }

  while (2)
  {
    for (unint64_t i = 0LL; i != v13; unint64_t i = (char *)i + 1)
    {
      if (*(void *)v26 != v14) {
        objc_enumerationMutation(v11);
      }
      __int128 v16 = *(void **)(*((void *)&v25 + 1) + 8LL * (void)i);
      __int128 v17 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) scopes]);
      __int128 v18 = (void *)objc_claimAutoreleasedReturnValue([v16 scopeIdentifier]);
      unsigned int v19 = [v17 resetStableRecordsForScopeWithIdentifier:v18 error:a2];

      if (!v19)
      {

        return 0LL;
      }
    }

    id v13 = [v11 countByEnumeratingWithState:&v25 objects:v29 count:16];
    if (v13) {
      continue;
    }
    break;
  }

void sub_10013623C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void **)(a1 + 40);
  uint64_t v5 = *(void **)(*(void *)(a1 + 32) + 104LL);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472LL;
  v10[2] = sub_100136334;
  v10[3] = &unk_10023DFE0;
  id v11 = v3;
  id v12 = v4;
  uint64_t v6 = v10;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_10013AA68;
  block[3] = &unk_10023DBC8;
  id v14 = v6;
  id v7 = v5;
  id v8 = v3;
  dispatch_block_t v9 = dispatch_block_create(DISPATCH_BLOCK_ENFORCE_QOS_CLASS|DISPATCH_BLOCK_ASSIGN_CURRENT, block);
  dispatch_async(v7, v9);
}

void sub_100136334(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) error]);
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
}

void sub_1001364B4(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 error]);

  if (v4)
  {
    uint64_t v5 = *(void *)(a1 + 56);
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v3 error]);
    (*(void (**)(uint64_t, void, void *))(v5 + 16))(v5, 0LL, v6);
  }

  else
  {
    if (*(_BYTE *)(a1 + 64))
    {
      id v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) storages]);
      id v8 = -[NSMutableDictionary initWithCapacity:]( [NSMutableDictionary alloc],  "initWithCapacity:",  [v7 count]);
      __int128 v47 = 0u;
      __int128 v48 = 0u;
      __int128 v49 = 0u;
      __int128 v50 = 0u;
      id v9 = v7;
      id v10 = [v9 countByEnumeratingWithState:&v47 objects:v53 count:16];
      if (v10)
      {
        id v11 = v10;
        uint64_t v12 = *(void *)v48;
        do
        {
          for (unint64_t i = 0LL; i != v11; unint64_t i = (char *)i + 1)
          {
            if (*(void *)v48 != v12) {
              objc_enumerationMutation(v9);
            }
            id v14 = *(void **)(*((void *)&v47 + 1) + 8LL * (void)i);
            if ([v14 shouldIncludeInStatus] && objc_msgSend(v14, "scopeType"))
            {
              __int128 v15 = (void *)objc_claimAutoreleasedReturnValue([v14 statusPerScopeIndex]);
              if (v15)
              {
                __int128 v16 = (void *)objc_claimAutoreleasedReturnValue([v14 name]);
                -[NSMutableDictionary setObject:forKeyedSubscript:](v8, "setObject:forKeyedSubscript:", v15, v16);
              }
            }
          }

          id v11 = [v9 countByEnumeratingWithState:&v47 objects:v53 count:16];
        }

        while (v11);
      }
    }

    else
    {
      id v9 = 0LL;
      id v8 = 0LL;
    }

    __int128 v17 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
    v41[0] = _NSConcreteStackBlock;
    v41[1] = 3221225472LL;
    v41[2] = sub_1001368B4;
    v41[3] = &unk_100246A68;
    char v46 = *(_BYTE *)(a1 + 64);
    id v42 = *(id *)(a1 + 40);
    __int128 v18 = v8;
    __int128 v43 = v18;
    id v19 = v9;
    id v44 = v19;
    id v20 = v17;
    __int128 v45 = v20;
    uint64_t v21 = objc_retainBlock(v41);
    if ([*(id *)(a1 + 48) count])
    {
      __int128 v39 = 0uLL;
      __int128 v40 = 0uLL;
      __int128 v37 = 0uLL;
      __int128 v38 = 0uLL;
      id v22 = *(id *)(a1 + 48);
      id v23 = [v22 countByEnumeratingWithState:&v37 objects:v52 count:16];
      if (v23)
      {
        id v24 = v23;
        uint64_t v32 = v18;
        uint64_t v25 = *(void *)v38;
        do
        {
          for (j = 0LL; j != v24; j = (char *)j + 1)
          {
            if (*(void *)v38 != v25) {
              objc_enumerationMutation(v22);
            }
            __int128 v27 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(a1 + 40) scopeWithIdentifier:*(void *)(*((void *)&v37 + 1) + 8 * (void)j)]);
            if (v27) {
              ((void (*)(void *, void *))v21[2])(v21, v27);
            }
          }

          id v24 = [v22 countByEnumeratingWithState:&v37 objects:v52 count:16];
        }

        while (v24);
        __int128 v18 = v32;
      }
    }

    else
    {
      __int128 v35 = 0uLL;
      __int128 v36 = 0uLL;
      __int128 v33 = 0uLL;
      __int128 v34 = 0uLL;
      id v22 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) enumeratorForScopesIncludeInactive:1]);
      id v28 = [v22 countByEnumeratingWithState:&v33 objects:v51 count:16];
      if (v28)
      {
        id v29 = v28;
        uint64_t v30 = *(void *)v34;
        do
        {
          for (k = 0LL; k != v29; k = (char *)k + 1)
          {
            if (*(void *)v34 != v30) {
              objc_enumerationMutation(v22);
            }
            ((void (*)(void *, void))v21[2])(v21, *(void *)(*((void *)&v33 + 1) + 8LL * (void)k));
          }

          id v29 = [v22 countByEnumeratingWithState:&v33 objects:v51 count:16];
        }

        while (v29);
      }
    }

    (*(void (**)(void))(*(void *)(a1 + 56) + 16LL))();
  }
}

void sub_1001368B4(uint64_t a1, void *a2)
{
  id v4 = a2;
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v4 scopeIdentifier]);
  int v6 = *(unsigned __int8 *)(a1 + 64);
  uint64_t v25 = v4;
  id v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) statusDictionaryForScope:v4]);
  id v8 = v7;
  if (v6)
  {
    id v22 = v5;
    id v21 = [v7 mutableCopy];

    id v23 = -[NSMutableDictionary initWithCapacity:]( [NSMutableDictionary alloc],  "initWithCapacity:",  [*(id *)(a1 + 40) count]);
    __int128 v26 = 0u;
    __int128 v27 = 0u;
    __int128 v28 = 0u;
    __int128 v29 = 0u;
    id obj = *(id *)(a1 + 48);
    id v9 = [obj countByEnumeratingWithState:&v26 objects:v30 count:16];
    if (v9)
    {
      id v10 = v9;
      uint64_t v11 = *(void *)v27;
      do
      {
        for (unint64_t i = 0LL; i != v10; unint64_t i = (char *)i + 1)
        {
          if (*(void *)v27 != v11) {
            objc_enumerationMutation(obj);
          }
          id v13 = *(void **)(*((void *)&v26 + 1) + 8LL * (void)i);
          switch((unint64_t)[v13 scopeType])
          {
            case 0uLL:
              continue;
            case 1uLL:
              id v14 = [v25 localIndex];
              goto LABEL_11;
            case 2uLL:
              id v14 = [v25 cloudIndex];
              goto LABEL_11;
            case 3uLL:
              id v14 = [v25 stableIndex];
LABEL_11:
              id v2 = v14;
              break;
            default:
              break;
          }

          __int128 v15 = *(void **)(a1 + 40);
          __int128 v16 = (void *)objc_claimAutoreleasedReturnValue([v13 name]);
          __int128 v17 = (void *)objc_claimAutoreleasedReturnValue([v15 objectForKeyedSubscript:v16]);
          __int128 v18 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInteger:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInteger:",  v2));
          id v19 = (void *)objc_claimAutoreleasedReturnValue([v17 objectForKeyedSubscript:v18]);

          if (v19)
          {
            id v20 = (void *)objc_claimAutoreleasedReturnValue([v13 name]);
            -[NSMutableDictionary setObject:forKeyedSubscript:](v23, "setObject:forKeyedSubscript:", v19, v20);
          }
        }

        id v10 = [obj countByEnumeratingWithState:&v26 objects:v30 count:16];
      }

      while (v10);
    }

    [v21 setObject:v23 forKeyedSubscript:CPLEngineScopeStatusKeyStorages];
    uint64_t v5 = v22;
    [*(id *)(a1 + 56) setObject:v21 forKeyedSubscript:v22];
  }

  else
  {
    [*(id *)(a1 + 56) setObject:v7 forKeyedSubscript:v5];
  }
}

void sub_100136C30(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 error]);

  if (v4)
  {
    uint64_t v5 = *(void **)(*(void *)(a1 + 32) + 104LL);
    v37[0] = _NSConcreteStackBlock;
    v37[1] = 3221225472LL;
    v37[2] = sub_100136FD8;
    v37[3] = &unk_10023DFE0;
    id v39 = *(id *)(a1 + 56);
    id v38 = v3;
    int v6 = v37;
    __int128 block = _NSConcreteStackBlock;
    uint64_t v41 = 3221225472LL;
    id v42 = sub_10013AA68;
    __int128 v43 = &unk_10023DBC8;
    id v44 = v6;
    id v7 = v5;
    dispatch_block_t v8 = dispatch_block_create(DISPATCH_BLOCK_ENFORCE_QOS_CLASS|DISPATCH_BLOCK_ASSIGN_CURRENT, &block);
    dispatch_async(v7, v8);

    id v9 = v39;
LABEL_3:

    goto LABEL_10;
  }

  if (!*(void *)(a1 + 40))
  {
    id v20 = *(void **)(*(void *)(a1 + 32) + 104LL);
    v28[0] = _NSConcreteStackBlock;
    v28[1] = 3221225472LL;
    v28[2] = sub_100137098;
    v28[3] = &unk_10023DBC8;
    id v29 = *(id *)(a1 + 56);
    id v21 = v28;
    __int128 block = _NSConcreteStackBlock;
    uint64_t v41 = 3221225472LL;
    id v42 = sub_10013AA68;
    __int128 v43 = &unk_10023DBC8;
    id v44 = v21;
    id v22 = v20;
    dispatch_block_t v23 = dispatch_block_create(DISPATCH_BLOCK_ENFORCE_QOS_CLASS|DISPATCH_BLOCK_ASSIGN_CURRENT, &block);
    dispatch_async(v22, v23);

    id v9 = v29;
    goto LABEL_3;
  }

  id v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) idMapping]);
  uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue( [v10 cloudScopedIdentifierForLocalScopedIdentifier:*(void *)(a1 + 40) isFinal:&v36]);

  if (v11)
  {
    uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) cloudCache]);
    id v13 = (void *)objc_claimAutoreleasedReturnValue([v12 recordWithScopedIdentifier:v11 isFinal:1]);

    id v14 = *(void **)(*(void *)(a1 + 32) + 104LL);
    v33[0] = _NSConcreteStackBlock;
    v33[1] = 3221225472LL;
    v33[2] = sub_100137020;
    v33[3] = &unk_10023DFE0;
    id v15 = *(id *)(a1 + 56);
    id v34 = v13;
    id v35 = v15;
    __int128 v16 = v33;
    __int128 block = _NSConcreteStackBlock;
    uint64_t v41 = 3221225472LL;
    id v42 = sub_10013AA68;
    __int128 v43 = &unk_10023DBC8;
    id v44 = v16;
    __int128 v17 = v14;
    id v18 = v13;
    dispatch_block_t v19 = dispatch_block_create(DISPATCH_BLOCK_ENFORCE_QOS_CLASS|DISPATCH_BLOCK_ASSIGN_CURRENT, &block);
    dispatch_async(v17, v19);
  }

  else
  {
    id v24 = *(void **)(*(void *)(a1 + 32) + 104LL);
    v30[0] = _NSConcreteStackBlock;
    v30[1] = 3221225472LL;
    v30[2] = sub_100137034;
    v30[3] = &unk_10023DFE0;
    id v32 = *(id *)(a1 + 56);
    id v31 = *(id *)(a1 + 40);
    uint64_t v25 = v30;
    __int128 block = _NSConcreteStackBlock;
    uint64_t v41 = 3221225472LL;
    id v42 = sub_10013AA68;
    __int128 v43 = &unk_10023DBC8;
    id v44 = v25;
    __int128 v26 = v24;
    dispatch_block_t v27 = dispatch_block_create(DISPATCH_BLOCK_ENFORCE_QOS_CLASS|DISPATCH_BLOCK_ASSIGN_CURRENT, &block);
    dispatch_async(v26, v27);

    id v18 = v32;
  }

LABEL_10:
}

void sub_100136FD8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) error]);
  (*(void (**)(uint64_t, void, id))(v1 + 16))(v1, 0LL, v2);
}

uint64_t sub_100137020(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  *(void *)(a1 + 32),  0LL);
}

void sub_100137034(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  id v2 = (id)objc_claimAutoreleasedReturnValue( +[CPLErrors cplErrorWithCode:description:]( &OBJC_CLASS___CPLErrors,  "cplErrorWithCode:description:",  25LL,  @"record with identifier %@ is not known",  *(void *)(a1 + 32)));
  (*(void (**)(uint64_t, void, id))(v1 + 16))(v1, 0LL, v2);
}

void sub_100137098(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = (id)objc_claimAutoreleasedReturnValue( +[CPLErrors incorrectParametersErrorForParameter:]( &OBJC_CLASS___CPLErrors,  "incorrectParametersErrorForParameter:",  @"scopedIdentifier"));
  (*(void (**)(uint64_t, void, id))(v1 + 16))(v1, 0LL, v2);
}

void sub_1001371D0(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 error]);

  if (!v4)
  {
    if (!*(void *)(a1 + 40))
    {
      id v31 = *(void **)(*(void *)(a1 + 32) + 104LL);
      v50[0] = _NSConcreteStackBlock;
      v50[1] = 3221225472LL;
      v50[2] = sub_1001378D4;
      v50[3] = &unk_10023DBC8;
      id v51 = *(id *)(a1 + 56);
      id v32 = v50;
      __int128 block = _NSConcreteStackBlock;
      uint64_t v73 = 3221225472LL;
      id v74 = sub_10013AA68;
      id v75 = &unk_10023DBC8;
      id v76 = v32;
      __int128 v33 = v31;
      dispatch_block_t v34 = dispatch_block_create(DISPATCH_BLOCK_ENFORCE_QOS_CLASS|DISPATCH_BLOCK_ASSIGN_CURRENT, &block);
      dispatch_async(v33, v34);

      id v9 = v51;
      goto LABEL_3;
    }

    id v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) idMapping]);
    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue( [v10 cloudScopedIdentifierForLocalScopedIdentifier:*(void *)(a1 + 40) isFinal:&v68]);

    if (!v11)
    {
      id v35 = *(void **)(*(void *)(a1 + 32) + 104LL);
      v52[0] = _NSConcreteStackBlock;
      v52[1] = 3221225472LL;
      v52[2] = sub_10013786C;
      v52[3] = &unk_10023DFE0;
      id v54 = *(id *)(a1 + 56);
      id v53 = *(id *)(a1 + 40);
      char v36 = v52;
      __int128 block = _NSConcreteStackBlock;
      uint64_t v73 = 3221225472LL;
      id v74 = sub_10013AA68;
      id v75 = &unk_10023DBC8;
      id v76 = v36;
      __int128 v37 = v35;
      dispatch_block_t v38 = dispatch_block_create(DISPATCH_BLOCK_ENFORCE_QOS_CLASS|DISPATCH_BLOCK_ASSIGN_CURRENT, &block);
      dispatch_async(v37, v38);

      id v17 = v54;
LABEL_25:

      goto LABEL_26;
    }

    int v12 = *(unsigned __int8 *)(a1 + 64);
    id v13 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) cloudCache]);
    id v14 = v13;
    if (v12)
    {
      __int128 v49 = v11;
      id v15 = (void *)objc_claimAutoreleasedReturnValue([v13 recordsWithRelatedScopedIdentifier:v11 isFinal:0]);

      __int128 v16 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
      __int128 v64 = 0u;
      __int128 v65 = 0u;
      __int128 v66 = 0u;
      __int128 v67 = 0u;
      id v17 = v15;
      id v18 = [v17 countByEnumeratingWithState:&v64 objects:v77 count:16];
      if (v18)
      {
        id v19 = v18;
        uint64_t v20 = *(void *)v65;
        do
        {
          id v21 = 0LL;
          do
          {
            if (*(void *)v65 != v20) {
              objc_enumerationMutation(v17);
            }
            uint64_t v22 = *(void *)(*((void *)&v64 + 1) + 8LL * (void)v21);
            dispatch_block_t v23 = objc_autoreleasePoolPush();
            id v24 = (void *)objc_claimAutoreleasedReturnValue( +[CPLArchiver displayablePropertyListWithRootObject:]( &OBJC_CLASS___CPLArchiver,  "displayablePropertyListWithRootObject:",  v22));
            if (v24) {
              -[NSMutableArray addObject:](v16, "addObject:", v24);
            }

            objc_autoreleasePoolPop(v23);
            id v21 = (char *)v21 + 1;
          }

          while (v19 != v21);
          id v19 = [v17 countByEnumeratingWithState:&v64 objects:v77 count:16];
        }

        while (v19);
      }

      uint64_t v25 = *(void **)(*(void *)(a1 + 32) + 104LL);
      v61[0] = _NSConcreteStackBlock;
      v61[1] = 3221225472LL;
      v61[2] = sub_10013783C;
      v61[3] = &unk_10023DFE0;
      id v26 = *(id *)(a1 + 56);
      __int128 v62 = v16;
      id v63 = v26;
      dispatch_block_t v27 = v61;
      __int128 block = _NSConcreteStackBlock;
      uint64_t v73 = 3221225472LL;
      id v74 = sub_10013AA68;
      id v75 = &unk_10023DBC8;
      id v76 = v27;
      __int128 v28 = v25;
      id v29 = v16;
      dispatch_block_t v30 = dispatch_block_create(DISPATCH_BLOCK_ENFORCE_QOS_CLASS|DISPATCH_BLOCK_ASSIGN_CURRENT, &block);
      dispatch_async(v28, v30);

      uint64_t v11 = v49;
      goto LABEL_25;
    }

    id v59 = 0LL;
    id v60 = 0LL;
    [v13 getCommittedRecord:&v60 stagedRecord:&v59 forScopedIdentifier:v11];
    id v17 = v60;
    id v39 = v59;

    if (v17)
    {
      __int128 v40 = (void *)objc_claimAutoreleasedReturnValue( +[CPLArchiver displayablePropertyListWithRootObject:]( &OBJC_CLASS___CPLArchiver,  "displayablePropertyListWithRootObject:",  v17));
      if (v39)
      {
LABEL_21:
        uint64_t v41 = (void *)objc_claimAutoreleasedReturnValue( +[CPLArchiver displayablePropertyListWithRootObject:]( &OBJC_CLASS___CPLArchiver,  "displayablePropertyListWithRootObject:",  v17));
LABEL_24:
        id v42 = *(void **)(*(void *)(a1 + 32) + 104LL);
        v55[0] = _NSConcreteStackBlock;
        v55[1] = 3221225472LL;
        v55[2] = sub_100137854;
        v55[3] = &unk_10023EA48;
        id v43 = *(id *)(a1 + 56);
        id v57 = v41;
        id v58 = v43;
        id v56 = v40;
        id v44 = v55;
        __int128 block = _NSConcreteStackBlock;
        uint64_t v73 = 3221225472LL;
        id v74 = sub_10013AA68;
        id v75 = &unk_10023DBC8;
        id v76 = v44;
        __int128 v45 = v42;
        id v46 = v41;
        id v47 = v40;
        dispatch_block_t v48 = dispatch_block_create(DISPATCH_BLOCK_ENFORCE_QOS_CLASS|DISPATCH_BLOCK_ASSIGN_CURRENT, &block);
        dispatch_async(v45, v48);

        goto LABEL_25;
      }
    }

    else
    {
      __int128 v40 = 0LL;
      if (v39) {
        goto LABEL_21;
      }
    }

    uint64_t v41 = 0LL;
    goto LABEL_24;
  }

  uint64_t v5 = *(void **)(*(void *)(a1 + 32) + 104LL);
  v69[0] = _NSConcreteStackBlock;
  v69[1] = 3221225472LL;
  v69[2] = sub_1001377F0;
  v69[3] = &unk_10023DFE0;
  id v71 = *(id *)(a1 + 56);
  id v70 = v3;
  int v6 = v69;
  __int128 block = _NSConcreteStackBlock;
  uint64_t v73 = 3221225472LL;
  id v74 = sub_10013AA68;
  id v75 = &unk_10023DBC8;
  id v76 = v6;
  id v7 = v5;
  dispatch_block_t v8 = dispatch_block_create(DISPATCH_BLOCK_ENFORCE_QOS_CLASS|DISPATCH_BLOCK_ASSIGN_CURRENT, &block);
  dispatch_async(v7, v8);

  id v9 = v71;
LABEL_3:

LABEL_26:
}

void sub_1001377F0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) error]);
  (*(void (**)(uint64_t, void, void, id))(v1 + 16))(v1, 0LL, 0LL, v2);
}

uint64_t sub_10013783C(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void, void))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  *(void *)(a1 + 32),  0LL,  0LL);
}

uint64_t sub_100137854(void *a1)
{
  return (*(uint64_t (**)(void, void, void, void))(a1[6] + 16LL))(a1[6], a1[4], a1[5], 0LL);
}

void sub_10013786C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  id v2 = (id)objc_claimAutoreleasedReturnValue( +[CPLErrors cplErrorWithCode:description:]( &OBJC_CLASS___CPLErrors,  "cplErrorWithCode:description:",  25LL,  @"record with identifier %@ is not known",  *(void *)(a1 + 32)));
  (*(void (**)(uint64_t, void, void, id))(v1 + 16))(v1, 0LL, 0LL, v2);
}

void sub_1001378D4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = (id)objc_claimAutoreleasedReturnValue( +[CPLErrors incorrectParametersErrorForParameter:]( &OBJC_CLASS___CPLErrors,  "incorrectParametersErrorForParameter:",  @"scopedIdentifier"));
  (*(void (**)(uint64_t, void, void, id))(v1 + 16))(v1, 0LL, 0LL, v2);
}

void sub_100137E84( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, char a25, uint64_t a26, uint64_t a27, uint64_t a28, char a29)
{
}

void sub_100137EB4(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  id v4 = a2;
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v3 recordComputeStatePushQueue]);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  v7[2] = sub_100137F7C;
  v7[3] = &unk_100246AE0;
  id v8 = *(id *)(a1 + 32);
  id v9 = *(id *)(a1 + 40);
  id v10 = v5;
  __int128 v11 = *(_OWORD *)(a1 + 48);
  id v6 = v5;
  [v4 do:v7];
}

uint64_t sub_100137F7C(uint64_t a1, void *a2)
{
  if ([*(id *)(a1 + 32) isClientInSyncWithClientCache])
  {
    id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) scopes]);
    dispatch_block_t v34 = objc_alloc_init(&OBJC_CLASS___NSMutableSet);
    __int128 v40 = 0u;
    __int128 v41 = 0u;
    __int128 v42 = 0u;
    __int128 v43 = 0u;
    id obj = *(id *)(a1 + 40);
    id v5 = [obj countByEnumeratingWithState:&v40 objects:v47 count:16];
    if (v5)
    {
      id v6 = v5;
      id v7 = 0LL;
      uint64_t v8 = *(void *)v41;
LABEL_4:
      id v9 = 0LL;
      id v10 = v7;
      while (1)
      {
        if (*(void *)v41 != v8) {
          objc_enumerationMutation(obj);
        }
        __int128 v11 = *(void **)(*((void *)&v40 + 1) + 8LL * (void)v9);
        int v12 = *(void **)(a1 + 48);
        id v39 = v10;
        unsigned int v13 = [v12 addComputeState:v11 error:&v39];
        id v7 = v39;

        if (!v13) {
          break;
        }
        id v14 = (void *)objc_claimAutoreleasedReturnValue([v11 itemScopedIdentifier]);
        id v15 = (void *)objc_claimAutoreleasedReturnValue([v14 scopeIdentifier]);
        __int128 v16 = (void *)objc_claimAutoreleasedReturnValue([v4 scopeWithIdentifier:v15]);

        if ([v4 valueForFlag:16 forScope:v16])
        {
          id v31 = (void *)objc_claimAutoreleasedReturnValue([v16 scopeIdentifier]);
          id v18 = (id)objc_claimAutoreleasedReturnValue( +[CPLErrors cplErrorWithCode:description:]( &OBJC_CLASS___CPLErrors,  "cplErrorWithCode:description:",  2001LL,  @"Scope %@ is inactive",  v31));

          if (a2) {
            *a2 = v18;
          }

          uint64_t v19 = 0LL;
          goto LABEL_41;
        }

        if (v16)
        {
          -[NSMutableSet addObject:](v34, "addObject:", v16);
          ++*(void *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 24LL);
        }

        id v9 = (char *)v9 + 1;
        id v10 = v7;
        if (v6 == v9)
        {
          id v6 = [obj countByEnumeratingWithState:&v40 objects:v47 count:16];
          if (v6) {
            goto LABEL_4;
          }
          goto LABEL_17;
        }
      }

      if (a2)
      {
        id v18 = v7;
        uint64_t v19 = 0LL;
        *a2 = v18;
        goto LABEL_41;
      }

      uint64_t v19 = 0LL;
    }

    else
    {
      id v7 = 0LL;
LABEL_17:

      if (*(void *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 24LL))
      {
        __int128 v37 = 0u;
        __int128 v38 = 0u;
        __int128 v35 = 0u;
        __int128 v36 = 0u;
        uint64_t v20 = v34;
        id v21 = -[NSMutableSet countByEnumeratingWithState:objects:count:]( v20,  "countByEnumeratingWithState:objects:count:",  &v35,  v46,  16LL);
        if (v21)
        {
          id v22 = v21;
          uint64_t v23 = *(void *)v36;
          do
          {
            for (unint64_t i = 0LL; i != v22; unint64_t i = (char *)i + 1)
            {
              if (*(void *)v36 != v23) {
                objc_enumerationMutation(v20);
              }
              [v4 setScopeNeedsToUploadComputeState:*(void *)(*((void *)&v35 + 1) + 8 * (void)i) error:a2];
            }

            id v22 = -[NSMutableSet countByEnumeratingWithState:objects:count:]( v20,  "countByEnumeratingWithState:objects:count:",  &v35,  v46,  16LL);
          }

          while (v22);
        }

        uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) engineLibrary]);
        id v26 = (void *)objc_claimAutoreleasedReturnValue([v25 configuration]);

        id v27 = [v26 maximumComputeStatesToUploadPerBatch];
        if ([*(id *)(a1 + 48) countOfComputeStates] >= v27) {
          *(_BYTE *)(*(void *)(*(void *)(a1 + 64) + 8LL) + 24LL) = 1;
        }
        if (!_CPLSilentLogging)
        {
          id v28 = sub_10011CDF4();
          uint64_t v29 = (os_log_s *)objc_claimAutoreleasedReturnValue(v28);
          if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v30 = *(void *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 24LL);
            *(_DWORD *)__int128 buf = 134217984;
            uint64_t v45 = v30;
            _os_log_impl( (void *)&_mh_execute_header,  v29,  OS_LOG_TYPE_DEFAULT,  "Added %lu record compute states to the record compute state push queue",  buf,  0xCu);
          }
        }
      }

      uint64_t v19 = 1LL;
    }

    id v18 = v7;
LABEL_41:
  }

  else
  {
    id v17 = (void *)objc_claimAutoreleasedReturnValue( +[CPLErrors cplErrorWithCode:description:]( &OBJC_CLASS___CPLErrors,  "cplErrorWithCode:description:",  20LL,  @"Engine is not in sync with client. Should try again later to attach compute states for %@",  *(void *)(a1 + 40)));
    id v18 = v17;
    if (a2)
    {
      id v18 = v17;
      uint64_t v19 = 0LL;
      *a2 = v18;
    }

    else
    {
      uint64_t v19 = 0LL;
    }
  }

  return v19;
}

uint64_t sub_1001383B4(uint64_t a1, void *a2)
{
  id v3 = (void *)objc_claimAutoreleasedReturnValue([a2 error]);
  uint64_t v4 = *(void *)(*(void *)(a1 + 48) + 8LL);
  id v5 = v3;
  if (!v3) {
    id v5 = *(void **)(v4 + 40);
  }
  objc_storeStrong((id *)(v4 + 40), v5);

  if (!*(void *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 40LL)
    && *(_BYTE *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 24LL))
  {
    id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) engineLibrary]);
    id v7 = (void *)objc_claimAutoreleasedReturnValue([v6 scheduler]);
    [v7 noteScopeNeedsToUploadComputeState];
  }

  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_100138510(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v9 = 0LL;
  id v10 = &v9;
  uint64_t v11 = 0x2020000000LL;
  char v12 = 0;
  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = *(dispatch_queue_s **)(v4 + 104);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_10013861C;
  block[3] = &unk_10023DD58;
  void block[4] = v4;
  block[5] = &v9;
  dispatch_sync(v5, block);
  if (*((_BYTE *)v10 + 24))
  {
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472LL;
    void v6[2] = sub_100138640;
    v6[3] = &unk_1002457F8;
    id v7 = *(id *)(a1 + 40);
    [v3 do:v6];
  }

  _Block_object_dispose(&v9, 8);
}

void sub_100138604(_Unwind_Exception *a1)
{
}

uint64_t sub_10013861C(uint64_t result)
{
  *(_BYTE *)(*(void *)(*(void *)(result + 40) + 8LL) + 24LL) = *(void *)(*(void *)(result + 32) + 80LL) == 0LL;
  return result;
}

id sub_100138640(uint64_t a1, uint64_t a2)
{
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) recordComputeStatePushQueue]);
  id v4 = [v3 deleteIncomingDownloadFolderWithError:a2];

  return v4;
}

void sub_100138680(id a1, CPLEngineStoreTransaction *a2)
{
  id v2 = a2;
  uint64_t v3 = objc_claimAutoreleasedReturnValue(-[CPLEngineStoreTransaction error](v2, "error"));
  if (v3)
  {
    id v4 = (void *)v3;
    id v5 = (void *)objc_claimAutoreleasedReturnValue(-[CPLEngineStoreTransaction error](v2, "error"));
    unsigned __int8 v6 = [v5 isCPLErrorWithCode:2];

    if ((v6 & 1) == 0 && !_CPLSilentLogging)
    {
      id v7 = sub_10011CDF4();
      uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue(-[CPLEngineStoreTransaction error](v2, "error"));
        int v10 = 138412290;
        uint64_t v11 = v9;
        _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Failed to clean-up compute state temp folder: %@",  (uint8_t *)&v10,  0xCu);
      }
    }
  }
}

void sub_100138914(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 32);
  id v2 = *(void **)(a1 + 40);
  if (v3 == v2[11])
  {
    [v2 _cleanupComputeStateDownloadQueue];
    uint64_t v4 = *(void *)(a1 + 40);
    id v5 = *(void **)(v4 + 88);
    *(void *)(v4 + 8_Block_object_dispose((const void *)(v1 - 80), 8) = 0LL;
  }

void sub_100138E88( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,char a62,uint64_t a63)
{
}

void sub_100138EF0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(void *)(a1 + 32);
  uint64_t v8 = *(void **)(a1 + 40);
  uint64_t v9 = *(void **)(v7 + 104);
  v16[2] = sub_10013903C;
  v16[3] = &unk_100246B78;
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3221225472LL;
  __int128 v21 = *(_OWORD *)(a1 + 56);
  void v16[4] = v7;
  uint64_t v22 = *(void *)(a1 + 72);
  id v17 = v8;
  id v10 = *(id *)(a1 + 48);
  id v19 = v6;
  id v20 = v10;
  id v18 = v5;
  uint64_t v11 = v16;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_10013AA68;
  block[3] = &unk_10023DBC8;
  id v24 = v11;
  char v12 = v9;
  id v13 = v6;
  id v14 = v5;
  dispatch_block_t v15 = dispatch_block_create(DISPATCH_BLOCK_ENFORCE_QOS_CLASS|DISPATCH_BLOCK_ASSIGN_CURRENT, block);
  dispatch_async(v12, v15);
}

void *sub_10013903C(void *result)
{
  uint64_t v1 = *(void *)(result[9] + 8LL);
  if (!*(_BYTE *)(v1 + 24))
  {
    id v2 = result;
    *(_BYTE *)(v1 + 24) = 1;
    if (*(void *)(*(void *)(result[10] + 8LL) + 40LL))
    {
      objc_msgSend(*(id *)(result[4] + 72), "removeObject:");
      uint64_t v3 = *(void *)(v2[10] + 8LL);
      uint64_t v4 = *(void **)(v3 + 40);
      *(void *)(v3 + 40) = 0LL;
    }

    if (*(void *)(*(void *)(v2[11] + 8LL) + 40LL))
    {
      dispatch_time_t v5 = dispatch_time(0LL, 600000000000LL);
      id v6 = *(dispatch_queue_s **)(v2[4] + 104LL);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472LL;
      block[2] = sub_10013914C;
      block[3] = &unk_10023DD30;
      void block[4] = v2[11];
      dispatch_after(v5, v6, block);
    }

    objc_msgSend((id)v2[5], "setCompletedUnitCount:", objc_msgSend((id)v2[5], "totalUnitCount"));
    (*(void (**)(void))(v2[8] + 16LL))();
    return [(id)v2[4] _endComputeStateDownload];
  }

  return result;
}

void sub_10013914C(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager"));
  uint64_t v3 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 40LL);
  id v9 = 0LL;
  unsigned __int8 v4 = [v2 removeItemAtURL:v3 error:&v9];
  id v5 = v9;

  if ((v4 & 1) == 0 && !_CPLSilentLogging)
  {
    id v6 = sub_10011CDF4();
    uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) path]);
      *(_DWORD *)__int128 buf = 138412546;
      uint64_t v11 = v8;
      __int16 v12 = 2112;
      id v13 = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Failed to remove temporary folder at %@: %@",  buf,  0x16u);
    }
  }
}

id sub_100139274(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _startComputeStateDownload];
}

void sub_10013927C(uint64_t a1, void *a2)
{
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  void v6[2] = sub_100139340;
  v6[3] = &unk_100246BC8;
  id v4 = *(id *)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 64);
  id v7 = v4;
  uint64_t v11 = v5;
  id v8 = *(id *)(a1 + 40);
  id v9 = *(id *)(a1 + 48);
  id v10 = *(id *)(a1 + 56);
  __int128 v12 = *(_OWORD *)(a1 + 72);
  uint64_t v13 = *(void *)(a1 + 88);
  [a2 do:v6];
}

BOOL sub_100139340(uint64_t a1, void *a2)
{
  __int128 v50 = 0u;
  __int128 v51 = 0u;
  __int128 v52 = 0u;
  __int128 v53 = 0u;
  id v4 = *(id *)(a1 + 32);
  id v5 = [v4 countByEnumeratingWithState:&v50 objects:v54 count:16];
  if (!v5) {
    goto LABEL_14;
  }
  id v6 = v5;
  uint64_t v7 = *(void *)v51;
  while (2)
  {
    id v8 = 0LL;
    do
    {
      if (*(void *)v51 != v7) {
        objc_enumerationMutation(v4);
      }
      id v9 = *(void **)(*((void *)&v50 + 1) + 8LL * (void)v8);
      if (*(void *)(*(void *)(*(void *)(a1 + 64) + 8LL) + 40LL))
      {
        id v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*((void *)&v50 + 1) + 8 * (void)v8) scopeIdentifier]);
        unsigned __int8 v12 = [v10 isEqualToString:v11];

        if ((v12 & 1) == 0)
        {
          uint64_t v23 = objc_claimAutoreleasedReturnValue( +[CPLErrors cplErrorWithCode:description:]( &OBJC_CLASS___CPLErrors,  "cplErrorWithCode:description:",  50LL,  @"Can't download compute state for this scope:%@",  v22));
LABEL_17:
          id v21 = (id)v23;

          goto LABEL_18;
        }
      }

      else
      {
        uint64_t v13 = *(void **)(a1 + 40);
        id v14 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*((void *)&v50 + 1) + 8 * (void)v8) scopeIdentifier]);
        uint64_t v15 = objc_claimAutoreleasedReturnValue([v13 scopeWithIdentifier:v14]);
        uint64_t v16 = *(void *)(*(void *)(a1 + 64) + 8LL);
        id v17 = *(void **)(v16 + 40);
        *(void *)(v16 + 40) = v15;

        if (!*(void *)(*(void *)(*(void *)(a1 + 64) + 8LL) + 40LL))
        {
          uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue([0 scopeIdentifier]);
          uint64_t v23 = objc_claimAutoreleasedReturnValue( +[CPLErrors invalidScopeErrorWithScopeIdentifier:]( &OBJC_CLASS___CPLErrors,  "invalidScopeErrorWithScopeIdentifier:",  v22));
          goto LABEL_17;
        }
      }

      id v18 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) idMapping]);
      id v19 = (id)objc_claimAutoreleasedReturnValue([v18 cloudScopedIdentifierForLocalScopedIdentifier:v9 isFinal:&v49]);

      if (!v19) {
        id v19 = [v9 copy];
      }
      [*(id *)(a1 + 56) addObject:v19];

      id v8 = (char *)v8 + 1;
    }

    while (v6 != v8);
    id v6 = [v4 countByEnumeratingWithState:&v50 objects:v54 count:16];
    if (v6) {
      continue;
    }
    break;
  }

void sub_1001397C4(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 error]);

  if (v4)
  {
    uint64_t v5 = *(void *)(a1 + 88);
    id v6 = (void *)objc_claimAutoreleasedReturnValue([v3 error]);
    (*(void (**)(uint64_t, void, void *))(v5 + 16))(v5, 0LL, v6);
  }

  else if ([*(id *)(a1 + 32) count])
  {
    uint64_t v7 = *(void **)(a1 + 48);
    id v8 = *(void **)(*(void *)(a1 + 40) + 104LL);
    v17[0] = _NSConcreteStackBlock;
    v17[1] = 3221225472LL;
    void v17[2] = sub_1001399CC;
    v17[3] = &unk_100246CB8;
    id v9 = v7;
    uint64_t v10 = *(void *)(a1 + 96);
    id v18 = v9;
    uint64_t v25 = v10;
    int8x16_t v16 = *(int8x16_t *)(a1 + 32);
    id v11 = (id)v16.i64[0];
    int8x16_t v19 = vextq_s8(v16, v16, 8uLL);
    __int128 v12 = *(_OWORD *)(a1 + 120);
    __int128 v26 = *(_OWORD *)(a1 + 104);
    __int128 v27 = v12;
    id v24 = *(id *)(a1 + 88);
    id v20 = *(id *)(a1 + 56);
    id v21 = *(id *)(a1 + 64);
    char v28 = *(_BYTE *)(a1 + 136);
    id v22 = *(id *)(a1 + 72);
    char v29 = *(_BYTE *)(a1 + 137);
    id v23 = *(id *)(a1 + 80);
    uint64_t v13 = v17;
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_10013AA68;
    block[3] = &unk_10023DBC8;
    id v31 = v13;
    id v14 = v8;
    dispatch_block_t v15 = dispatch_block_create(DISPATCH_BLOCK_ENFORCE_QOS_CLASS|DISPATCH_BLOCK_ASSIGN_CURRENT, block);
    dispatch_async(v14, v15);
  }

  else
  {
    (*(void (**)(void))(*(void *)(a1 + 88) + 16LL))();
  }
}

void sub_1001399CC(uint64_t a1)
{
  id v2 = -[NSMutableDictionary initWithCapacity:]( [NSMutableDictionary alloc],  "initWithCapacity:",  [*(id *)(a1 + 32) count]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 40) + 96) transport]);
  id v4 = *(void **)(a1 + 48);
  uint64_t v5 = *(void *)(*(void *)(*(void *)(a1 + 104) + 8LL) + 40LL);
  uint64_t v6 = *(void *)(*(void *)(*(void *)(a1 + 112) + 8LL) + 40LL);
  uint64_t v7 = *(void *)(*(void *)(*(void *)(a1 + 120) + 8LL) + 40LL);
  uint64_t v8 = *(void *)(*(void *)(*(void *)(a1 + 128) + 8LL) + 40LL);
  v22[0] = _NSConcreteStackBlock;
  v22[1] = 3221225472LL;
  v22[2] = sub_100139BEC;
  v22[3] = &unk_100246C68;
  id v9 = v4;
  uint64_t v10 = *(void *)(a1 + 40);
  id v23 = v9;
  uint64_t v24 = v10;
  id v28 = *(id *)(a1 + 88);
  id v25 = *(id *)(a1 + 56);
  id v11 = *(id *)(a1 + 64);
  uint64_t v29 = *(void *)(a1 + 104);
  id v26 = v11;
  __int128 v27 = v2;
  __int128 v12 = v2;
  uint64_t v13 = objc_claimAutoreleasedReturnValue( [v3 downloadComputeStatesWithScopedIdentifiers:v9 scope:v5 sharedScope:v6 targetStorageURL:v7 transportScopeMapping:v8 completionHandler:v22]);
  uint64_t v14 = *(void *)(*(void *)(a1 + 96) + 8LL);
  dispatch_block_t v15 = *(void **)(v14 + 40);
  *(void *)(v14 + 40) = v13;

  [*(id *)(*(void *)(*(void *)(a1 + 96) + 8) + 40) setShouldDecrypt:*(unsigned __int8 *)(a1 + 136)];
  [*(id *)(*(void *)(a1 + 40) + 72) addObject:*(void *)(*(void *)(*(void *)(a1 + 96) + 8) + 40)];
  v18[0] = _NSConcreteStackBlock;
  v18[1] = 3221225472LL;
  v18[2] = sub_10013A074;
  v18[3] = &unk_100246C90;
  uint64_t v16 = *(void *)(a1 + 96);
  void v18[4] = *(void *)(a1 + 40);
  uint64_t v20 = v16;
  char v21 = *(_BYTE *)(a1 + 137);
  id v17 = *(void **)(a1 + 72);
  id v19 = *(id *)(a1 + 80);
  [v17 performAsCurrentWithPendingUnitCount:1 usingBlock:v18];
}

void sub_100139BEC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = [*(id *)(a1 + 32) count];
  id v8 = [v5 count];
  id v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) engineLibrary]);
  uint64_t v10 = v9;
  if (v6 || v7 == v8)
  {
    uint64_t v11 = 0LL;
    id v12 = v6;
  }

  else
  {
    uint64_t v11 = 1LL;
    id v12 = 0LL;
  }

  [v9 updateComputeSyncMetrics:1 silentDecryptionFailed:v11 error:v12];

  if ([v5 count])
  {
    v17[0] = _NSConcreteStackBlock;
    v17[1] = 3221225472LL;
    void v17[2] = sub_100139D7C;
    v17[3] = &unk_100246C40;
    uint64_t v13 = *(void **)(a1 + 48);
    id v18 = *(id *)(a1 + 56);
    __int128 v16 = *(_OWORD *)(a1 + 72);
    id v14 = (id)v16;
    __int128 v23 = v16;
    id v19 = v5;
    id v20 = *(id *)(a1 + 48);
    id v21 = *(id *)(a1 + 64);
    id v22 = v6;
    id v15 = [v13 performReadTransactionWithBlock:v17];
  }

  else
  {
    (*(void (**)(void))(*(void *)(a1 + 72) + 16LL))();
  }
}

void sub_100139D7C(uint64_t a1)
{
  id v5 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) validLocalScopeIndexes]);
  if (objc_msgSend( v5,  "containsIndex:",  objc_msgSend(*(id *)(*(void *)(*(void *)(a1 + 80) + 8) + 40), "localIndex")))
  {
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472LL;
    void v6[2] = sub_100139E9C;
    v6[3] = &unk_100246C18;
    id v2 = *(void **)(a1 + 40);
    id v7 = *(id *)(a1 + 48);
    id v8 = *(id *)(a1 + 56);
    [v2 enumerateKeysAndObjectsUsingBlock:v6];
    (*(void (**)(void))(*(void *)(a1 + 72) + 16LL))();

    id v3 = v7;
  }

  else
  {
    id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(*(void *)(a1 + 80) + 8) + 40) scopeIdentifier]);
    id v3 = (void *)objc_claimAutoreleasedReturnValue( +[CPLErrors invalidScopeErrorWithScopeIdentifier:]( &OBJC_CLASS___CPLErrors,  "invalidScopeErrorWithScopeIdentifier:",  v4));

    (*(void (**)(void))(*(void *)(a1 + 72) + 16LL))();
  }
}

void sub_100139E9C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = *(void **)(a1 + 32);
  id v7 = a3;
  id v8 = (void *)objc_claimAutoreleasedReturnValue([v6 idMapping]);
  id v9 = (id)objc_claimAutoreleasedReturnValue([v8 localScopedIdentifierForCloudScopedIdentifier:v5 isFinal:&v19]);

  if (!v9)
  {
    if (!_CPLSilentLogging)
    {
      id v10 = sub_10011CDF4();
      uint64_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)__int128 buf = 138412290;
        id v21 = v5;
        _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "Couldn't find localScopedIdentifier for cloudScopedIdentifier %@ in cloudCache for compute state",  buf,  0xCu);
      }
    }

    id v9 = [v5 copy];
  }

  id v12 = objc_alloc(&OBJC_CLASS___CPLRecordComputeState);
  uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([v7 fileStorageIdentifier]);
  id v14 = (void *)objc_claimAutoreleasedReturnValue([v7 version]);
  id v15 = (void *)objc_claimAutoreleasedReturnValue([v7 fileURL]);
  __int128 v16 = (void *)objc_claimAutoreleasedReturnValue([v7 adjustmentFingerprint]);
  id v17 = (void *)objc_claimAutoreleasedReturnValue([v7 lastUpdatedDate]);

  id v18 = [v12 initWithItemScopedIdentifier:v9 fileStorageIdentifier:v13 version:v14 fileURL:v15 adjustmentFingerprint:v16 lastUpdatedDate:v17];
  [*(id *)(a1 + 40) setObject:v18 forKeyedSubscript:v9];
}

id sub_10013A074(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) engineLibrary]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 syncManager]);
  [v3 configureDirectTransportTask:*(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40)];

  id v4 = *(void **)(a1 + 40);
  if (*(_BYTE *)(a1 + 56)) {
    uint64_t v5 = objc_claimAutoreleasedReturnValue([v4 createGroupForComputeStateDownloadOnDemand]);
  }
  else {
    uint64_t v5 = objc_claimAutoreleasedReturnValue([v4 createGroupForComputeStateDownloadPrefetch]);
  }
  id v6 = (void *)v5;
  [*(id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) setTransportGroup:v5];

  return [*(id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) runWithNoSyncSession];
}

void sub_10013A284(uint64_t a1, void *a2)
{
  id v32 = a2;
  if (qword_1002A3788 != -1) {
    dispatch_once(&qword_1002A3788, &stru_100246D00);
  }
  id v3 = [*(id *)(a1 + 32) mutableCopy];
  [v3 removeObjectForKey:CPLMiscInformationAppendCPLReport];
  id v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
  id v5 = sub_10013A5FC((uint64_t)v4, v4);
  id v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
  [v3 setObject:v6 forKeyedSubscript:@"deviceTimestamp"];

  id v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) scopes]);
  id v8 = (void *)objc_claimAutoreleasedReturnValue([v7 primaryScope]);
  if (v8)
  {
    unsigned int v9 = [v7 valueForFlag:16 forScope:v8];
    char v10 = v9;
    if (v9) {
      uint64_t v11 = @"off";
    }
    else {
      uint64_t v11 = @"on";
    }
    [v3 setObject:v11 forKeyedSubscript:@"iCPL"];
    if ((v10 & 1) == 0)
    {
      id v12 = (void *)objc_claimAutoreleasedReturnValue([v7 lastDateOfClearedPushRepositoryForScope:v8]);
      uint64_t v13 = v12;
      if (v12)
      {
        id v14 = sub_10013A5FC((uint64_t)v12, v12);
        id v15 = (void *)objc_claimAutoreleasedReturnValue(v14);
        [v3 setObject:v15 forKeyedSubscript:@"iCPLLastClearedPush"];
      }

      __int128 v16 = (void *)objc_claimAutoreleasedReturnValue([v7 lastDateOfCompletedPullFromTransportForScope:v8]);

      if (v16)
      {
        id v18 = sub_10013A5FC(v17, v16);
        char v19 = (void *)objc_claimAutoreleasedReturnValue(v18);
        [v3 setObject:v19 forKeyedSubscript:@"iCPLLastDownSync"];
      }

      id v20 = (void *)objc_claimAutoreleasedReturnValue([v8 scopeIdentifier]);
      id v21 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) pushRepository]);
      id v22 = [v21 countOfChangesInScopeWithIdentifier:v20];

      __int128 v23 = (void *)qword_1002A3780;
      uint64_t v24 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInteger:", v22));
      id v25 = (void *)objc_claimAutoreleasedReturnValue([v23 stringFromNumber:v24]);
      [v3 setObject:v25 forKeyedSubscript:@"iCPLPushCount"];

      id v26 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) quarantinedRecords]);
      id v27 = [v26 countOfQuarantinedRecordsInScopeWithIdentifier:v20];

      id v28 = (void *)qword_1002A3780;
      uint64_t v29 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInteger:", v27));
      uint64_t v30 = (void *)objc_claimAutoreleasedReturnValue([v28 stringFromNumber:v29]);
      [v3 setObject:v30 forKeyedSubscript:@"iCPLQuarantineCount"];
    }
  }

  else
  {
    [v3 setObject:@"off" forKeyedSubscript:@"iCPL"];
  }

  id v31 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 48) + 96) feedback]);
  [v31 reportMiscInformation:v3];
}

void sub_10013A57C(id a1)
{
  uint64_t v1 = objc_alloc_init(&OBJC_CLASS___NSNumberFormatter);
  id v2 = (void *)qword_1002A3780;
  qword_1002A3780 = (uint64_t)v1;

  id v3 = (id)objc_claimAutoreleasedReturnValue( +[NSLocale localeWithLocaleIdentifier:]( &OBJC_CLASS___NSLocale,  "localeWithLocaleIdentifier:",  @"en_US"));
  [(id)qword_1002A3780 setLocale:v3];
  [(id)qword_1002A3780 setNumberStyle:1];
  [(id)qword_1002A3780 setUsesGroupingSeparator:0];
}

id sub_10013A5FC(uint64_t a1, void *a2)
{
  id v2 = (void *)qword_1002A3780;
  [a2 timeIntervalSinceReferenceDate];
  id v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithLongLong:](&OBJC_CLASS___NSNumber, "numberWithLongLong:", (uint64_t)v3));
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v2 stringFromNumber:v4]);

  return v5;
}

void sub_10013AA3C(id a1)
{
  uint64_t v1 = (const char *)_CPLOSLogSubsystem(a1);
  os_log_t v2 = os_log_create(v1, "client.librarymanager.directlibrarymanager");
  double v3 = (void *)qword_1002A3798;
  qword_1002A3798 = (uint64_t)v2;
}

void sub_10013AA68(uint64_t a1)
{
  os_log_t v2 = objc_autoreleasePoolPush();
  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
  objc_autoreleasePoolPop(v2);
}

void sub_10013AA9C(uint64_t a1)
{
  if (!_CPLSilentLogging)
  {
    uint64_t v2 = __CPLGenericOSLogDomain();
    double v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v4 = *(void *)(a1 + 32);
      id v5 = NSStringFromSelector(*(SEL *)(a1 + 40));
      id v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
      int v7 = 138412546;
      uint64_t v8 = v4;
      __int16 v9 = 2112;
      char v10 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "-[%@ %@] was cancelled by caller",  (uint8_t *)&v7,  0x16u);
    }
  }

void sub_10013AB74(id a1)
{
  id v1 = (id)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](&OBJC_CLASS___NSUserDefaults, "standardUserDefaults"));
  byte_1002A37A8 = [v1 BOOLForKey:@"CPLAlwaysCheckServerForDeleteResources"];
}

id sub_10013AF3C()
{
  if (qword_1002A37D0 != -1) {
    dispatch_once(&qword_1002A37D0, &stru_100246F00);
  }
  return (id)qword_1002A37D8;
}

void sub_10013AF7C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = (id)objc_claimAutoreleasedReturnValue(+[CPLErrors libraryClosedError](&OBJC_CLASS___CPLErrors, "libraryClosedError"));
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
}

void sub_10013AFC8(uint64_t a1, void *a2)
{
  double v3 = (id *)(*(void *)(a1 + 32) + 98LL);
  id v4 = a2;
  id WeakRetained = objc_loadWeakRetained(v3);
  [WeakRetained dropUnacknowledgedBatch];

  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472LL;
  v11[2] = sub_10013B0BC;
  v11[3] = &unk_100245C90;
  id v6 = *(void **)(a1 + 40);
  void v11[4] = *(void *)(a1 + 32);
  id v12 = v6;
  id v13 = *(id *)(a1 + 48);
  [v4 do:v11];

  id v7 = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 98LL));
  uint64_t v8 = objc_claimAutoreleasedReturnValue([v7 libraryVersion]);
  uint64_t v9 = *(void *)(a1 + 32);
  char v10 = *(void **)(v9 + 82);
  *(void *)(v9 + 82) = v8;
}

uint64_t sub_10013B0BC(uint64_t a1, uint64_t a2)
{
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 98LL));
  id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) abstractObject]);
  uint64_t v6 = *(void *)(a1 + 40);
  id v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) resetTracker]);
  LODWORD(v6) = [WeakRetained beginChangeSession:v5 withLibraryVersion:v6 resetTracker:v7 error:a2];

  if (!(_DWORD)v6) {
    return 0LL;
  }
  uint64_t v8 = *(void *)(a1 + 32);
  uint64_t v9 = *(void *)(a1 + 48);
  id v10 = objc_loadWeakRetained((id *)(v8 + 98));
  unsigned int v11 = [(id)v8 processSessionContext:v9 inStore:v10 error:a2];

  if (!v11) {
    return 0LL;
  }
  uint64_t result = 1LL;
  if (!*(void *)(a1 + 40)) {
    *(_BYTE *)(*(void *)(a1 + 32) + 34LL) = 1;
  }
  return result;
}

void sub_10013B1B0(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 error]);

  if (!v4) {
    [*(id *)(a1 + 32) beginClientWork];
  }
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  v8[2] = sub_10013B260;
  v8[3] = &unk_10023DFE0;
  id v5 = *(void **)(a1 + 32);
  id v6 = *(id *)(a1 + 40);
  id v9 = v3;
  id v10 = v6;
  id v7 = v3;
  [v5 dispatchCallback:v8];
}

void sub_10013B260(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) error]);
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
}

void sub_10013B4F4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, char a26)
{
}

void sub_10013B520(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = (id)objc_claimAutoreleasedReturnValue(+[CPLErrors libraryClosedError](&OBJC_CLASS___CPLErrors, "libraryClosedError"));
  (*(void (**)(uint64_t, id, void))(v1 + 16))(v1, v2, 0LL);
}

uint64_t sub_10013B570(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_10013B580(uint64_t a1)
{
}

void sub_10013B588(uint64_t a1, void *a2)
{
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 98LL));
  [WeakRetained dropUnacknowledgedBatch];

  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472LL;
  v12[2] = sub_10013B6D4;
  v12[3] = &unk_1002457F8;
  void v12[4] = *(void *)(a1 + 32);
  [v3 do:v12];
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  v8[2] = sub_10013B738;
  v8[3] = &unk_100246D88;
  uint64_t v5 = *(void *)(a1 + 40);
  void v8[4] = *(void *)(a1 + 32);
  uint64_t v10 = v5;
  id v7 = v3;
  id v9 = v7;
  __int128 v11 = *(_OWORD *)(a1 + 48);
  [v7 do:v8];
  id v6 = (id)objc_claimAutoreleasedReturnValue([v7 error]);
  if (v6 || *(void *)(*(void *)(a1 + 32) + 66LL)) {
    goto LABEL_5;
  }
  if ([*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) count])
  {
    id v6 = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 98LL));
    [v6 keepUnacknowledgedBatch:*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40)];
LABEL_5:
  }
}

id sub_10013B6D4(uint64_t a1, uint64_t a2)
{
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 98LL));
  id v5 = [WeakRetained applyPreviousChangeSessionUpdateWithExpectedLibraryVersion:*(void *)(*(void *)(a1 + 32) + 82) error:a2];

  return v5;
}

uint64_t sub_10013B738(void *a1, void *a2)
{
  id v4 = a1 + 4;
  id WeakRetained = objc_loadWeakRetained((id *)(a1[4] + 98LL));
  [WeakRetained assertNoUnacknowledgedChanges];

  id v6 = objc_loadWeakRetained((id *)(*v4 + 98));
  id v7 = (void *)objc_claimAutoreleasedReturnValue([v6 transactionClientCacheView]);

  id v8 = objc_loadWeakRetained((id *)(*v4 + 106));
  uint64_t v9 = objc_claimAutoreleasedReturnValue([v8 scopeChangesNeedingToBePulledByClientWithMaximumCount:5]);
  uint64_t v10 = *(void **)(*v4 + 66);
  *(void *)(*v4 + 66) = v9;

  uint64_t v11 = *v4;
  if (*(void *)(*v4 + 66))
  {
    id v12 = *(id *)(v11 + 74);
    *(void *)(v11 + 74) = 0LL;
  }

  else
  {
    id v12 = objc_loadWeakRetained((id *)(v11 + 98));
    id v13 = (void *)objc_claimAutoreleasedReturnValue([v12 revertRecords]);
    uint64_t v14 = objc_claimAutoreleasedReturnValue([v13 nextBatchOfRecordsToRevert]);
    id v15 = *(void **)(*v4 + 74);
    *(void *)(*v4 + 74) = v14;
  }

  uint64_t v16 = *v4;
  uint64_t v17 = *(void **)(*v4 + 66);
  if (v17 || (uint64_t v17 = *(void **)(v16 + 74)) != 0LL)
  {
    objc_storeStrong((id *)(*(void *)(a1[6] + 8LL) + 40LL), v17);
    objc_storeStrong((id *)(a1[4] + 42LL), *(id *)(*(void *)(a1[6] + 8LL) + 40LL));
    id v18 = 0LL;
LABEL_7:
    uint64_t v19 = 1LL;
    goto LABEL_8;
  }

  id v21 = objc_loadWeakRetained((id *)(v16 + 98));
  id v22 = (void *)objc_claimAutoreleasedReturnValue([v21 pushPullGatekeepers]);
  id v23 = [v22 count];

  id v70 = a2;
  if (v23)
  {
    if (!_CPLSilentLogging)
    {
      id v24 = sub_10013AF3C();
      id v25 = (os_log_s *)objc_claimAutoreleasedReturnValue(v24);
      if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)__int128 buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v25,  OS_LOG_TYPE_DEFAULT,  "Removing all push/pull gatekeepers",  buf,  2u);
      }
    }

    id v26 = objc_loadWeakRetained((id *)(*v4 + 98));
    id v76 = 0LL;
    unsigned int v27 = [v26 clearAllPushPullGatekeepersWithError:&v76];
    id v18 = v76;

    if (!v27)
    {
      uint64_t v19 = 0LL;
      goto LABEL_51;
    }
  }

  else
  {
    id v18 = 0LL;
  }

  if (*(void *)(*v4 + 42))
  {
    if (!_CPLSilentLogging)
    {
      id v28 = sub_10013AF3C();
      uint64_t v29 = (os_log_s *)objc_claimAutoreleasedReturnValue(v28);
      if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
      {
        uint64_t v30 = *(void *)(*v4 + 42);
        *(_DWORD *)__int128 buf = 138412290;
        uint64_t v78 = v30;
        _os_log_impl( (void *)&_mh_execute_header,  v29,  OS_LOG_TYPE_ERROR,  "Trying to get a batch while we are still waiting to acknowledge the previous one:\n%@",  buf,  0xCu);
      }
    }

    id v31 = (void *)a1[5];
    id v32 = (void *)objc_claimAutoreleasedReturnValue( +[CPLErrors incorrectMachineStateErrorWithReason:]( &OBJC_CLASS___CPLErrors,  "incorrectMachineStateErrorWithReason:",  @"Trying to pull a batch before acknowledging the previous one"));
    [v31 setError:v32];

    goto LABEL_7;
  }

  id v33 = objc_loadWeakRetained((id *)(*v4 + 114));
  uint64_t v72 = 99LL;
  id v71 = v33;
  while (1)
  {
    dispatch_block_t v34 = objc_autoreleasePoolPush();
    uint64_t v35 = objc_claimAutoreleasedReturnValue([v33 nextBatch]);
    uint64_t v36 = a1[4];
    __int128 v37 = *(void **)(v36 + 50);
    *(void *)(v36 + 50) = v35;

    uint64_t v38 = a1[4];
    unsigned int v39 = *(void **)(v38 + 58);
    *(void *)(v38 + 5_Block_object_dispose((const void *)(v26 - 128), 8) = 0LL;

    uint64_t v40 = *(void *)(a1[6] + 8LL);
    __int128 v41 = *(void **)(v40 + 40);
    *(void *)(v40 + 40) = 0LL;

    uint64_t v42 = a1[4];
    uint64_t v43 = *(void *)(v42 + 50);
    if (!v43) {
      break;
    }
    if (!_CPLSilentLogging)
    {
      id v44 = sub_10013AF3C();
      uint64_t v45 = (os_log_s *)objc_claimAutoreleasedReturnValue(v44);
      if (os_log_type_enabled(v45, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v46 = *(void *)(*v4 + 50);
        *(_DWORD *)__int128 buf = 138412290;
        uint64_t v78 = v46;
        _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_DEBUG, "Next cloud batch is %@", buf, 0xCu);
      }

      uint64_t v42 = *v4;
      uint64_t v43 = *(void *)(*v4 + 50);
    }

    id v47 = objc_loadWeakRetained((id *)(v42 + 122));
    id v75 = 0LL;
    uint64_t v48 = objc_claimAutoreleasedReturnValue([v7 localChangeBatchFromCloudBatch:v43 usingMapping:v47 withError:&v75]);
    id v49 = v75;
    __int128 v50 = *(void **)(*v4 + 58);
    *(void *)(*v4 + 5_Block_object_dispose((const void *)(v26 - 128), 8) = v48;

    if (!*(void *)(*v4 + 58))
    {
      id v33 = v71;
LABEL_43:

      objc_autoreleasePoolPop(v34);
LABEL_44:
      uint64_t v19 = 0LL;
      id v18 = v49;
      goto LABEL_50;
    }

    uint64_t v51 = objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "compactedBatchFromExpandedBatch:"));
    uint64_t v52 = *(void *)(a1[6] + 8LL);
    __int128 v53 = *(void **)(v52 + 40);
    *(void *)(v52 + 40) = v51;

    if (!_CPLSilentLogging)
    {
      id v54 = sub_10013AF3C();
      char v55 = (os_log_s *)objc_claimAutoreleasedReturnValue(v54);
      if (os_log_type_enabled(v55, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v56 = *(void *)(*(void *)(a1[6] + 8LL) + 40LL);
        *(_DWORD *)__int128 buf = 138412290;
        uint64_t v78 = v56;
        _os_log_impl((void *)&_mh_execute_header, v55, OS_LOG_TYPE_DEBUG, "Compacted client batch is %@", buf, 0xCu);
      }
    }

    if (!*(void *)(*(void *)(a1[6] + 8LL) + 40LL)) {
      sub_100199084(v4, 58LL, (uint64_t)a1);
    }

    id v33 = v71;
    if ([*(id *)(*(void *)(a1[6] + 8) + 40) count]) {
      goto LABEL_47;
    }
    id v74 = 0LL;
    unsigned int v57 = [v71 popNextBatchWithError:&v74];
    id v58 = v74;
    id v49 = v58;
    if (!v57) {
      goto LABEL_43;
    }

    if (!v72)
    {
      *(_BYTE *)(*(void *)(a1[7] + 8LL) + 24LL) = 1;
      uint64_t v61 = *(void *)(a1[6] + 8LL);
      id v60 = *(os_log_s **)(v61 + 40);
      *(void *)(v61 + 40) = 0LL;
      goto LABEL_46;
    }

    objc_autoreleasePoolPop(v34);
    --v72;
  }

  if (!_CPLSilentLogging)
  {
    id v59 = sub_10013AF3C();
    id v60 = (os_log_s *)objc_claimAutoreleasedReturnValue(v59);
    if (os_log_type_enabled(v60, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v60,  OS_LOG_TYPE_DEBUG,  "Pull queue has no batches left to serve",  buf,  2u);
    }

LABEL_46:
  }

  return v10;
}

void sub_10013BE80(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 error]);

  if (v4)
  {
    [*(id *)(a1 + 32) endClientWork];
    v16[0] = _NSConcreteStackBlock;
    v16[1] = 3221225472LL;
    v16[2] = sub_10013C054;
    v16[3] = &unk_10023DFE0;
    id v5 = *(void **)(a1 + 32);
    id v18 = *(id *)(a1 + 40);
    id v17 = v3;
    [v5 dispatchCallback:v16];

    id v6 = v18;
LABEL_3:

    goto LABEL_11;
  }

  if (!*(_BYTE *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL))
  {
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472LL;
    v12[2] = sub_10013C09C;
    v12[3] = &unk_100246DD8;
    uint64_t v9 = *(void **)(a1 + 40);
    id v13 = *(id *)(a1 + 32);
    id v10 = v9;
    uint64_t v11 = *(void *)(a1 + 56);
    id v14 = v10;
    uint64_t v15 = v11;
    [v13 dispatchCallback:v12];
    id v6 = v14;
    goto LABEL_3;
  }

  if ([*(id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) count]) {
    sub_100199190(_CPLSilentLogging == 0, a1);
  }
  if (!_CPLSilentLogging)
  {
    id v7 = sub_10013AF3C();
    id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 134217984;
      uint64_t v20 = 100LL;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Failed to get a non empty batch after getting %lu batches from the pull queue - will continue to look for one",  buf,  0xCu);
    }
  }

  [*(id *)(a1 + 32) getChangeBatchWithCompletionHandler:*(void *)(a1 + 40)];
LABEL_11:
}

void sub_10013C054(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) error]);
  (*(void (**)(uint64_t, id, void))(v1 + 16))(v1, v2, 0LL);
}

uint64_t sub_10013C09C(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 130LL));
  [WeakRetained willRunEngineElement:CPLEngineElementClientPullsBatch];

  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_10013C344(_Unwind_Exception *a1)
{
}

void sub_10013C364(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = (id)objc_claimAutoreleasedReturnValue(+[CPLErrors libraryClosedError](&OBJC_CLASS___CPLErrors, "libraryClosedError"));
  (*(void (**)(uint64_t, id, void))(v1 + 16))(v1, v2, 0LL);
}

void sub_10013C3B4(uint64_t a1, void *a2)
{
  id v3 = (id *)(*(void *)(a1 + 32) + 98LL);
  id v4 = a2;
  id WeakRetained = objc_loadWeakRetained(v3);
  [WeakRetained dropUnacknowledgedBatch];

  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472LL;
  v11[2] = sub_10013C4C0;
  v11[3] = &unk_1002457F8;
  void v11[4] = *(void *)(a1 + 32);
  [v4 do:v11];
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  v8[2] = sub_10013C524;
  v8[3] = &unk_100246E70;
  id v6 = *(void **)(a1 + 40);
  void v8[4] = *(void *)(a1 + 32);
  id v9 = v6;
  __int128 v10 = *(_OWORD *)(a1 + 48);
  [v4 do:v8];
  id v7 = (void *)objc_claimAutoreleasedReturnValue([v4 error]);

  if (!v7) {
    [*(id *)(a1 + 32) registerTentativeResetReason];
  }
}

id sub_10013C4C0(uint64_t a1, uint64_t a2)
{
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 98LL));
  id v5 = [WeakRetained checkExpectedLibraryVersion:*(void *)(*(void *)(a1 + 32) + 82) error:a2];

  return v5;
}

uint64_t sub_10013C524(uint64_t a1, void *a2)
{
  if (qword_1002A37B8 != -1) {
    dispatch_once(&qword_1002A37B8, &stru_100246E20);
  }
  id v4 = *(void **)(*(void *)(a1 + 32) + 42LL);
  id v5 = &selRef_fileManager_shouldRemoveItemAtURL_;
  if (!v4)
  {
    if (a2)
    {
      uint64_t v16 = @"Trying to acknowledge a pulled batch before actually getting one";
      goto LABEL_18;
    }

void sub_10013C9A8(id a1)
{
  int has_internal_content = os_variant_has_internal_content("com.apple.cpl.client.check-ack-batch");
  byte_1002A37B0 = has_internal_content;
  else {
    BOOL v2 = 0;
  }
  if (v2)
  {
    id v3 = sub_10013AF3C();
    id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)id v5 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Checking acknowledged batches in pull session",  v5,  2u);
    }
  }

void sub_10013CA38(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectAtIndex:a3]);
  uint64_t v7 = objc_opt_class(v5);
  if (v7 == objc_opt_class(v6))
  {
    id v9 = objc_alloc_init(&OBJC_CLASS___CPLDiffTracker);
    if ([v5 cplProperties:0 areEqualToPropertiesOf:v6 diffTracker:v9 withEqualityBlock:0])
    {
LABEL_16:

      goto LABEL_17;
    }

    __int128 v10 = (void *)objc_claimAutoreleasedReturnValue([v9 differingProperties]);
    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v10 anyObject]);

    if (v11)
    {
      if (!_CPLSilentLogging)
      {
        id v12 = sub_10013AF3C();
        id v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
        if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
        {
          id v14 = (void *)objc_claimAutoreleasedReturnValue([v5 valueForKey:v11]);
          id v15 = (void *)objc_claimAutoreleasedReturnValue([v6 valueForKey:v11]);
          int v20 = 138413314;
          id v21 = v5;
          __int16 v22 = 2112;
          id v23 = v6;
          __int16 v24 = 2112;
          id v25 = v11;
          __int16 v26 = 2112;
          id v27 = v14;
          __int16 v28 = 2112;
          uint64_t v29 = v15;
          uint64_t v16 = "Expected record:\n%@\nvs. acknowledged record:\n%@\nDifferent on %@: %@ vs. %@";
          uint64_t v17 = v13;
          uint32_t v18 = 52;
LABEL_13:
          _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, v16, (uint8_t *)&v20, v18);

          goto LABEL_14;
        }

        goto LABEL_14;
      }
    }

    else if (!_CPLSilentLogging)
    {
      id v19 = sub_10013AF3C();
      id v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v19);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      {
        id v14 = (void *)objc_claimAutoreleasedReturnValue([v5 cplFullDescription]);
        id v15 = (void *)objc_claimAutoreleasedReturnValue([v6 cplFullDescription]);
        int v20 = 138412546;
        id v21 = v14;
        __int16 v22 = 2112;
        id v23 = v15;
        uint64_t v16 = "Expected record:\n%@\n====\nReceived:\n%@";
        uint64_t v17 = v13;
        uint32_t v18 = 22;
        goto LABEL_13;
      }

void sub_10013CCD8(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (!*(void *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 40LL))
  {
    id v5 = (void *)objc_claimAutoreleasedReturnValue([v3 error]);

    if (!v5)
    {
      if (!_CPLSilentLogging)
      {
        id v6 = sub_10013AF3C();
        uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
        if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)__int128 buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_ERROR,  "Engine is returning a nil library version but no error. This is a bug",  buf,  2u);
        }
      }

      id v8 = (void *)objc_claimAutoreleasedReturnValue(+[CPLErrors missingError](&OBJC_CLASS___CPLErrors, "missingError"));
      [v4 setError:v8];
    }
  }

  id v9 = (void *)objc_claimAutoreleasedReturnValue([v4 error]);

  __int128 v10 = *(void **)(a1 + 32);
  if (v9)
  {
    [v10 endClientWork];
    v22[0] = _NSConcreteStackBlock;
    v22[1] = 3221225472LL;
    v22[2] = sub_10013CEC0;
    v22[3] = &unk_10023DFE0;
    uint64_t v11 = *(void **)(a1 + 32);
    id v24 = *(id *)(a1 + 40);
    id v23 = v4;
    [v11 dispatchCallback:v22];

    id v12 = v24;
  }

  else
  {
    id v13 = (void *)objc_claimAutoreleasedReturnValue([v10 abstractObject]);
    id v14 = (void *)objc_claimAutoreleasedReturnValue([v13 libraryManager]);
    [v14 _setLibraryVersion:*(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40)];

    *(_BYTE *)(*(void *)(a1 + 32) + 34LL) = 0;
    v18[0] = _NSConcreteStackBlock;
    v18[1] = 3221225472LL;
    v18[2] = sub_10013CF08;
    v18[3] = &unk_100246DD8;
    id v15 = *(void **)(a1 + 40);
    id v19 = *(id *)(a1 + 32);
    id v16 = v15;
    uint64_t v17 = *(void *)(a1 + 48);
    id v20 = v16;
    uint64_t v21 = v17;
    [v19 dispatchCallback:v18];
    id v12 = v20;
  }
}

void sub_10013CEC0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) error]);
  (*(void (**)(uint64_t, id, void))(v1 + 16))(v1, v2, 0LL);
}

uint64_t sub_10013CF08(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 130LL));
  [WeakRetained willRunEngineElement:CPLEngineElementPullSweetSpot];

  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_10013D128(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = (id)objc_claimAutoreleasedReturnValue(+[CPLErrors libraryClosedError](&OBJC_CLASS___CPLErrors, "libraryClosedError"));
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
}

void sub_10013D174(uint64_t a1, void *a2)
{
  id v3 = (id *)(*(void *)(a1 + 32) + 98LL);
  id v4 = a2;
  id WeakRetained = objc_loadWeakRetained(v3);
  [WeakRetained dropUnacknowledgedBatch];

  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  v7[2] = sub_10013D240;
  v7[3] = &unk_1002457F8;
  void v7[4] = *(void *)(a1 + 32);
  [v4 do:v7];
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  void v6[2] = sub_10013D2A4;
  v6[3] = &unk_1002457F8;
  void v6[4] = *(void *)(a1 + 32);
  [v4 do:v6];
}

id sub_10013D240(uint64_t a1, uint64_t a2)
{
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 98LL));
  id v5 = [WeakRetained applyPreviousChangeSessionUpdateWithExpectedLibraryVersion:*(void *)(*(void *)(a1 + 32) + 82) error:a2];

  return v5;
}

uint64_t sub_10013D2A4(uint64_t a1, uint64_t a2)
{
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 98LL));
  [WeakRetained assertNoUnacknowledgedChanges];

  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = *(void **)(v4 + 42);
  if (v5)
  {
    if (!_CPLSilentLogging)
    {
      id v6 = sub_10013AF3C();
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        id v8 = *(void **)(*(void *)(a1 + 32) + 42LL);
        *(_DWORD *)__int128 buf = 138412290;
        uint64_t v62 = v8;
        _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Client did not acknowledge %@. We will send it back the next time",  buf,  0xCu);
      }

      uint64_t v4 = *(void *)(a1 + 32);
      id v5 = *(void **)(v4 + 42);
    }

    *(void *)(v4 + 42) = 0LL;

    uint64_t v9 = *(void *)(a1 + 32);
    __int128 v10 = *(void **)(v9 + 50);
    *(void *)(v9 + 50) = 0LL;
  }

  if (!_CPLSilentLogging)
  {
    id v11 = sub_10013AF3C();
    id v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "Compacting pull queue", buf, 2u);
    }
  }

  id v13 = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 114LL));
  unsigned int v14 = [v13 compactChangeBatchesWithError:a2];

  if (!v14) {
    return 0LL;
  }
  id v15 = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 114LL));
  unsigned int v16 = [v15 isEmpty];

  if (!v16) {
    return 1LL;
  }
  if (!_CPLSilentLogging)
  {
    id v17 = sub_10013AF3C();
    uint32_t v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(v17);
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEFAULT,  "No remaining changes in pull queue, comitting remaining records in cloud cache",  buf,  2u);
    }
  }

  id v19 = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 98LL));
  id v20 = (void *)objc_claimAutoreleasedReturnValue([v19 transientPullRepository]);

  id v21 = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 98LL));
  id v54 = (void *)objc_claimAutoreleasedReturnValue([v21 cloudCache]);

  id v22 = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 98LL));
  uint64_t v52 = (void *)objc_claimAutoreleasedReturnValue([v22 pushRepository]);

  __int128 v58 = 0u;
  __int128 v59 = 0u;
  __int128 v56 = 0u;
  __int128 v57 = 0u;
  id v23 = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 106LL));
  id v24 = (void *)objc_claimAutoreleasedReturnValue([v23 enumeratorForScopesIncludeInactive:0]);

  id v25 = [v24 countByEnumeratingWithState:&v56 objects:v60 count:16];
  if (!v25)
  {
    LOBYTE(v29) = 1;
    goto LABEL_49;
  }

  id v27 = v25;
  uint64_t v28 = *(void *)v57;
  LOBYTE(v29) = 1;
  *(void *)&__int128 v26 = 138412290LL;
  __int128 v51 = v26;
  uint64_t v30 = a2;
  __int16 v53 = v24;
  while (2)
  {
    for (unint64_t i = 0LL; i != v27; unint64_t i = (char *)i + 1)
    {
      if (*(void *)v57 != v28) {
        objc_enumerationMutation(v24);
      }
      id v32 = *(void **)(*((void *)&v56 + 1) + 8LL * (void)i);
      uint64_t v33 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v32, "scopeIdentifier", v51));
      if ((v29 & 1) != 0)
      {
        if (![v20 hasOnlyMingledRecordsWithScopeIdentifier:v33])
        {
LABEL_41:
          LOBYTE(v29) = [v20 deleteMingledRecordsForScopeWithIdentifier:v33 error:v30];
          goto LABEL_42;
        }

        id v34 = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 106LL));
        uint64_t v35 = (void *)objc_claimAutoreleasedReturnValue([v34 transientSyncAnchorForScope:v32]);

        if (v35)
        {
          if ([v52 hasChangesInScopeWithIdentifier:v33])
          {
            if (_CPLSilentLogging) {
              goto LABEL_40;
            }
            id v36 = sub_10013AF3C();
            __int128 v37 = (os_log_s *)objc_claimAutoreleasedReturnValue(v36);
            if (os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT))
            {
              uint64_t v38 = (void *)objc_claimAutoreleasedReturnValue([v32 scopeIdentifier]);
              *(_DWORD *)__int128 buf = v51;
              uint64_t v62 = v38;
              _os_log_impl( (void *)&_mh_execute_header,  v37,  OS_LOG_TYPE_DEFAULT,  "No more changes for %@, but there are still changes to push to the transport",  buf,  0xCu);
            }

void sub_10013D8B8(uint64_t a1, void *a2)
{
  id v3 = a2;
  [*(id *)(a1 + 32) endClientWork];
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  v7[2] = sub_10013D954;
  v7[3] = &unk_10023DFE0;
  uint64_t v4 = *(void **)(a1 + 32);
  id v5 = *(id *)(a1 + 40);
  id v8 = v3;
  id v9 = v5;
  id v6 = v3;
  [v4 dispatchCallback:v7];
}

void sub_10013D954(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) error]);
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
}

void sub_10013D9D8(id a1)
{
  uint64_t v1 = objc_alloc(&OBJC_CLASS___NSString);
  id v5 = (id)objc_claimAutoreleasedReturnValue(+[NSProcessInfo processInfo](&OBJC_CLASS___NSProcessInfo, "processInfo"));
  id v2 = (void *)objc_claimAutoreleasedReturnValue([v5 processName]);
  id v3 = -[NSString initWithFormat:](v1, "initWithFormat:", @"%@ unexpectedly quit during pull session", v2);
  uint64_t v4 = (void *)qword_1002A37C8;
  qword_1002A37C8 = (uint64_t)v3;
}

void sub_10013DB44(id a1)
{
  uint64_t v1 = (const char *)_CPLOSLogSubsystem(a1);
  os_log_t v2 = os_log_create(v1, "client.session.pull.direct");
  id v3 = (void *)qword_1002A37D8;
  qword_1002A37D8 = (uint64_t)v2;
}

void sub_10013DD14(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (!*(_BYTE *)(v1 + 33) && !*(_BYTE *)(v1 + 32))
  {
    +[CPLTransaction beginTransactionWithIdentifier:description:keepPower:]( &OBJC_CLASS___CPLTransaction,  "beginTransactionWithIdentifier:description:keepPower:",  @"cpl.clientwork",  @"client work",  1LL);
    id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) abstractObject]);
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 libraryManager]);
    id v5 = (void *)objc_claimAutoreleasedReturnValue([v4 platformObject]);
    id v6 = (void *)objc_claimAutoreleasedReturnValue([v5 engineLibrary]);
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v6 syncManager]);
    id v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) clientWorkDescription]);
    [v7 beginClientWork:v8];

    *(_BYTE *)(*(void *)(a1 + 32) + 32LL) = 1;
  }

_BYTE *sub_10013E0B0(uint64_t a1)
{
  uint64_t result = *(_BYTE **)(a1 + 32);
  if (result[32])
  {
    id v3 = (void *)objc_claimAutoreleasedReturnValue([result abstractObject]);
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 libraryManager]);
    id v5 = (void *)objc_claimAutoreleasedReturnValue([v4 platformObject]);
    id v6 = (void *)objc_claimAutoreleasedReturnValue([v5 engineLibrary]);
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v6 syncManager]);
    id v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) clientWorkDescription]);
    [v7 endClientWork:v8];

    uint64_t result = +[CPLTransaction endTransactionWithIdentifier:]( &OBJC_CLASS___CPLTransaction,  "endTransactionWithIdentifier:",  @"cpl.clientwork");
    *(_BYTE *)(*(void *)(a1 + 32) + 32LL) = 0;
  }

  return result;
}

void sub_10013E308( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
}

_BYTE *sub_10013E324(uint64_t a1)
{
  uint64_t result = *(_BYTE **)(a1 + 32);
  if (result[32])
  {
    id v3 = (void *)objc_claimAutoreleasedReturnValue([result abstractObject]);
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 libraryManager]);
    id v5 = (void *)objc_claimAutoreleasedReturnValue([v4 platformObject]);
    id v6 = (void *)objc_claimAutoreleasedReturnValue([v5 engineLibrary]);
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v6 syncManager]);
    id v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) clientWorkDescription]);
    [v7 endClientWork:v8];

    +[CPLTransaction endTransactionWithIdentifier:]( &OBJC_CLASS___CPLTransaction,  "endTransactionWithIdentifier:",  @"cpl.clientwork");
    *(_BYTE *)(*(void *)(a1 + 32) + 32LL) = 0;
    uint64_t result = *(_BYTE **)(a1 + 32);
  }

  if (!result[33])
  {
    result[33] = 1;
    *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = 1;
  }

  return result;
}

uint64_t sub_10013E420(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

uint64_t sub_10013E58C(uint64_t result)
{
  *(_BYTE *)(*(void *)(*(void *)(result + 40) + 8LL) + 24LL) = *(_BYTE *)(*(void *)(result + 32) + 33LL);
  return result;
}

void sub_10013E5E8(id a1)
{
  uint64_t v1 = objc_alloc(&OBJC_CLASS___NSString);
  id v5 = (id)objc_claimAutoreleasedReturnValue(+[NSProcessInfo processInfo](&OBJC_CLASS___NSProcessInfo, "processInfo"));
  os_log_t v2 = (void *)objc_claimAutoreleasedReturnValue([v5 processName]);
  id v3 = -[NSString initWithFormat:](v1, "initWithFormat:", @"%@ unexpectedly quit during generic session", v2);
  uint64_t v4 = (void *)qword_1002A37E8;
  qword_1002A37E8 = (uint64_t)v3;
}

void sub_10013E77C(uint64_t a1)
{
  os_log_t v2 = objc_autoreleasePoolPush();
  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
  objc_autoreleasePoolPop(v2);
}

id sub_10013EB00()
{
  if (qword_1002A3800 != -1) {
    dispatch_once(&qword_1002A3800, &stru_100247050);
  }
  return (id)qword_1002A3808;
}

void sub_10013EB40(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = (id)objc_claimAutoreleasedReturnValue(+[CPLErrors libraryClosedError](&OBJC_CLASS___CPLErrors, "libraryClosedError"));
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
}

void sub_10013EB8C(uint64_t a1, void *a2)
{
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472LL;
  v9[2] = sub_10013EC54;
  v9[3] = &unk_100245C90;
  uint64_t v4 = *(void **)(a1 + 40);
  void v9[4] = *(void *)(a1 + 32);
  id v10 = v4;
  id v11 = *(id *)(a1 + 48);
  [a2 do:v9];
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 58LL));
  uint64_t v6 = objc_claimAutoreleasedReturnValue([WeakRetained libraryVersion]);
  uint64_t v7 = *(void *)(a1 + 32);
  id v8 = *(void **)(v7 + 42);
  *(void *)(v7 + 42) = v6;
}

id sub_10013EC54(uint64_t a1, uint64_t a2)
{
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 58LL));
  id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) abstractObject]);
  uint64_t v6 = *(void *)(a1 + 40);
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) resetTracker]);
  LODWORD(v6) = [WeakRetained beginChangeSession:v5 withLibraryVersion:v6 resetTracker:v7 error:a2];

  if (!(_DWORD)v6) {
    return 0LL;
  }
  uint64_t v8 = *(void *)(a1 + 32);
  uint64_t v9 = *(void *)(a1 + 48);
  id v10 = objc_loadWeakRetained((id *)(v8 + 58));
  id v11 = [(id)v8 processSessionContext:v9 inStore:v10 error:a2];

  return v11;
}

void sub_10013ED2C(uint64_t a1, void *a2)
{
  id v3 = (void *)objc_claimAutoreleasedReturnValue([a2 error]);
  if (!v3) {
    [*(id *)(a1 + 32) beginClientWork];
  }
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  v7[2] = sub_10013EDD4;
  v7[3] = &unk_10023DFE0;
  uint64_t v4 = *(void **)(a1 + 32);
  id v5 = *(id *)(a1 + 40);
  id v8 = v3;
  id v9 = v5;
  id v6 = v3;
  [v4 dispatchCallback:v7];
}

uint64_t sub_10013EDD4(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  *(void *)(a1 + 32));
}

void sub_10013EFC4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = (id)objc_claimAutoreleasedReturnValue(+[CPLErrors libraryClosedError](&OBJC_CLASS___CPLErrors, "libraryClosedError"));
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
}

void sub_10013F010(uint64_t a1, void *a2)
{
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  v5[2] = sub_10013F0B4;
  v5[3] = &unk_1002457F8;
  void v5[4] = *(void *)(a1 + 32);
  id v3 = a2;
  [v3 do:v5];
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  void v4[2] = sub_10013F118;
  void v4[3] = &unk_1002457F8;
  void v4[4] = *(void *)(a1 + 32);
  [v3 do:v4];
}

id sub_10013F0B4(uint64_t a1, uint64_t a2)
{
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 58LL));
  id v5 = [WeakRetained applyPreviousChangeSessionUpdateWithExpectedLibraryVersion:*(void *)(*(void *)(a1 + 32) + 42) error:a2];

  return v5;
}

uint64_t sub_10013F118(uint64_t a1)
{
  if (!_CPLSilentLogging)
  {
    id v2 = sub_10013EB00();
    id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
    {
      if (*(_BYTE *)(*(void *)(a1 + 32) + 34LL)) {
        uint64_t v4 = "some changes";
      }
      else {
        uint64_t v4 = "no changes";
      }
      *(_DWORD *)__int128 buf = 136315138;
      uint64_t v31 = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEBUG,  "Finalized push session and %s were pushed by the client",  buf,  0xCu);
    }
  }

  uint64_t v5 = *(void *)(a1 + 32);
  if (*(_BYTE *)(v5 + 34))
  {
    if (*(_BYTE *)(v5 + 35))
    {
      id WeakRetained = objc_loadWeakRetained((id *)(v5 + 50));
      uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained syncManager]);
      id v8 = (void *)objc_claimAutoreleasedReturnValue([v7 lastError]);
      unsigned int v9 = [v8 isCPLErrorWithCode:30];

      if (v9)
      {
        id v10 = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 58LL));
        id v11 = (void *)objc_claimAutoreleasedReturnValue([v10 scopes]);

        id v12 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
        __int128 v25 = 0u;
        __int128 v26 = 0u;
        __int128 v27 = 0u;
        __int128 v28 = 0u;
        id v13 = *(id *)(*(void *)(a1 + 32) + 82LL);
        id v14 = [v13 countByEnumeratingWithState:&v25 objects:v29 count:16];
        if (v14)
        {
          id v15 = v14;
          uint64_t v16 = *(void *)v26;
          do
          {
            for (unint64_t i = 0LL; i != v15; unint64_t i = (char *)i + 1)
            {
              if (*(void *)v26 != v16) {
                objc_enumerationMutation(v13);
              }
              uint64_t v18 = *(void *)(*((void *)&v25 + 1) + 8LL * (void)i);
              id v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "scopeWithIdentifier:", v18, (void)v25));
            }

            id v15 = [v13 countByEnumeratingWithState:&v25 objects:v29 count:16];
          }

          while (v15);
        }

        if (-[NSMutableArray count](v12, "count"))
        {
          if (!_CPLSilentLogging)
          {
            id v20 = sub_10013EB00();
            id v21 = (os_log_s *)objc_claimAutoreleasedReturnValue(v20);
            if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
            {
              id v22 = (char *)objc_claimAutoreleasedReturnValue(-[NSMutableArray componentsJoinedByString:](v12, "componentsJoinedByString:", @", "));
              *(_DWORD *)__int128 buf = 138412290;
              uint64_t v31 = v22;
              _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_DEFAULT,  "Resetting scheduler back-off to try to move %@ under quota",  buf,  0xCu);
            }
          }

          id v23 = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 74LL));
          [v23 resetBackoffInterval];
        }
      }
    }
  }

  return 1LL;
}

void sub_10013F434(uint64_t a1, void *a2)
{
  id v3 = a2;
  [*(id *)(a1 + 32) endClientWork];
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  v7[2] = sub_10013F4D0;
  v7[3] = &unk_10023DFE0;
  uint64_t v4 = *(void **)(a1 + 32);
  id v5 = *(id *)(a1 + 40);
  id v8 = v3;
  id v9 = v5;
  id v6 = v3;
  [v4 dispatchCallback:v7];
}

void sub_10013F4D0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) error]);
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
}

void sub_10013F7DC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, char a28, uint64_t a29, uint64_t a30, uint64_t a31, char a32)
{
}

void sub_10013F814(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = (id)objc_claimAutoreleasedReturnValue(+[CPLErrors libraryClosedError](&OBJC_CLASS___CPLErrors, "libraryClosedError"));
  (*(void (**)(uint64_t, id, void, void, void))(v1 + 16))(v1, v2, 0LL, 0LL, 0LL);
}

uint64_t sub_10013F86C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_10013F87C(uint64_t a1)
{
}

void sub_10013F884(uint64_t a1, void *a2)
{
  id v3 = a2;
  v43[0] = _NSConcreteStackBlock;
  v43[1] = 3221225472LL;
  v43[2] = sub_10013FD7C;
  void v43[3] = &unk_1002457F8;
  uint64_t v4 = (id *)(a1 + 32);
  void v43[4] = *(void *)(a1 + 32);
  [v3 do:v43];
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v3 error]);

  if (v5) {
    goto LABEL_35;
  }
  id v6 = (CPLChangeBatch *)*(id *)(a1 + 40);
  if (CPLIsInTestReadonlyMode() && -[CPLChangeBatch count](v6, "count"))
  {
    if (!_CPLSilentLogging)
    {
      id v7 = sub_10013EB00();
      id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)__int128 buf = 138412290;
        uint64_t v45 = v6;
        _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Automatically dropping batch in read-only mode: %@",  buf,  0xCu);
      }
    }

    id v9 = objc_alloc_init(&OBJC_CLASS___CPLChangeBatch);

    id v6 = v9;
  }

  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 58LL));
  [WeakRetained assertNoUnacknowledgedChanges];

  id v11 = objc_alloc(&OBJC_CLASS___CPLPushSessionTracker);
  id v12 = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 58LL));
  id v42 = 0LL;
  id v13 = [v11 initWithIncomingBatch:v6 store:v12 error:&v42];
  id v14 = (CPLChangeBatch *)v42;
  uint64_t v15 = a1 + 48;
  uint64_t v16 = *(void *)(*(void *)(a1 + 48) + 8LL);
  id v17 = *(void **)(v16 + 40);
  *(void *)(v16 + 40) = v13;

  if (*(void *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 40LL))
  {
    uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
    [*(id *)(*(void *)(*(void *)v15 + 8) + 40) setNow:v18];
    id v19 = *(void **)(*(void *)(*(void *)v15 + 8LL) + 40LL);
    id v41 = 0LL;
    unsigned __int8 v20 = [v19 computeExpandedBatchWithError:&v41];
    id v21 = v41;
    if ((v20 & 1) != 0)
    {
      if (!_CPLSilentLogging)
      {
        id v22 = sub_10013EB00();
        id v23 = (os_log_s *)objc_claimAutoreleasedReturnValue(v22);
        if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG))
        {
          id v24 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(*(void *)v15 + 8) + 40) expandedBatch]);
          *(_DWORD *)__int128 buf = 138412546;
          uint64_t v45 = v6;
          __int16 v46 = 2112;
          unsigned int v47 = v24;
          _os_log_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_DEBUG,  "Expanded batch from: \n%@\nis:\n%@",  buf,  0x16u);
        }
      }

      if (!*((_BYTE *)*v4 + 35)) {
        *((_BYTE *)*v4 + 35) = [*(id *)(*(void *)(*(void *)v15 + 8) + 40) diffedBatchCanLowerQuota];
      }
      __int128 v25 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(*(void *)v15 + 8) + 40) diffedBatch]);
    }

    else
    {
      [v3 setError:v21];
      __int128 v25 = 0LL;
    }
  }

  else
  {
    if (!_CPLSilentLogging)
    {
      id v26 = sub_10013EB00();
      __int128 v27 = (os_log_s *)objc_claimAutoreleasedReturnValue(v26);
      if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)__int128 buf = 138412290;
        uint64_t v45 = v14;
        _os_log_impl( (void *)&_mh_execute_header,  v27,  OS_LOG_TYPE_ERROR,  "Client tried to push an invalid batch: %@",  buf,  0xCu);
      }
    }

    [v3 setError:v14];
    __int128 v25 = 0LL;
  }

  __int128 v28 = (void *)objc_claimAutoreleasedReturnValue([v3 error]);
  if (v28)
  {
  }

  else if ([v25 count] {
         || (uint64_t v31 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(void *)(*(void *)v15 + 8)
  }
                                                                                + 40LL), "revertedChanges")),
             id v32 = [v31 count],
             v31,
             v32))
  {
    v39[2] = _NSConcreteStackBlock;
    v39[3] = 3221225472LL;
    v39[4] = sub_10013FDE0;
    v39[5] = &unk_100246F48;
    uint64_t v33 = *(void *)(a1 + 48);
    v39[6] = *(void *)(a1 + 32);
    v39[7] = v33;
    unsigned int v29 = &v40;
    uint64_t v30 = (uint64_t *)(a1 + 56);
    goto LABEL_32;
  }

  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 40LL), *(id *)(*(void *)(a1 + 32) + 42LL));
  uint64_t v35 = _NSConcreteStackBlock;
  uint64_t v36 = 3221225472LL;
  __int128 v37 = sub_10013FEC4;
  uint64_t v38 = &unk_100246F70;
  v39[1] = *(void *)(a1 + 48);
  unsigned int v29 = v39;
  uint64_t v30 = (uint64_t *)(a1 + 32);
LABEL_32:
  *unsigned int v29 = *v30;
  objc_msgSend(v3, "do:", v35, v36, v37, v38);
  id v34 = (void *)objc_claimAutoreleasedReturnValue([v3 error]);

  if (!v34) {
    [*v4 registerTentativeResetReason];
  }

LABEL_35:
}

id sub_10013FD7C(uint64_t a1, uint64_t a2)
{
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 58LL));
  id v5 = [WeakRetained applyPreviousChangeSessionUpdateWithExpectedLibraryVersion:*(void *)(*(void *)(a1 + 32) + 42) error:a2];

  return v5;
}

uint64_t sub_10013FDE0(void *a1, uint64_t a2)
{
  id v4 = [[CPLPushSessionUpdate alloc] initWithPushSessionTracker:*(void *)(*(void *)(a1[5] + 8) + 40) error:a2];
  if (v4)
  {
    id WeakRetained = objc_loadWeakRetained((id *)(a1[4] + 58LL));
    uint64_t v6 = (uint64_t)[WeakRetained storeChangeSessionUpdate:v4 error:a2];

    if ((_DWORD)v6)
    {
      uint64_t v7 = objc_claimAutoreleasedReturnValue([v4 libraryVersion]);
      uint64_t v8 = *(void *)(a1[6] + 8LL);
      id v9 = *(void **)(v8 + 40);
      *(void *)(v8 + 40) = v7;

      uint64_t v6 = 1LL;
      *(_BYTE *)(a1[4] + 34LL) = 1;
      objc_storeStrong((id *)(a1[4] + 42LL), *(id *)(*(void *)(a1[6] + 8LL) + 40LL));
    }
  }

  else
  {
    uint64_t v6 = 0LL;
  }

  return v6;
}

id sub_10013FEC4(uint64_t a1, uint64_t a2)
{
  id result = [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) notifyClientOfStatusChangesIfNecessaryWithError:a2];
  if ((_DWORD)result)
  {
    id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 58LL));
    id v6 = [WeakRetained storeClientIsInSyncWithClientCacheWithError:a2];

    return v6;
  }

  return result;
}

void sub_10013FF28(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (!*(void *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 40LL))
  {
    id v5 = (void *)objc_claimAutoreleasedReturnValue([v3 error]);

    if (!v5)
    {
      if (!_CPLSilentLogging)
      {
        id v6 = sub_10013EB00();
        uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
        if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)__int128 buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_ERROR,  "Engine is returning a nil library version but no error. This is a bug",  buf,  2u);
        }
      }

      uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(+[CPLErrors missingError](&OBJC_CLASS___CPLErrors, "missingError"));
      [v4 setError:v8];
    }
  }

  id v9 = (void *)objc_claimAutoreleasedReturnValue([v4 error]);

  if (v9)
  {
    [*(id *)(a1 + 32) endClientWork];
    id v10 = *(void **)(a1 + 32);
    v26[0] = _NSConcreteStackBlock;
    v26[1] = 3221225472LL;
    _OWORD v26[2] = sub_10014028C;
    v26[3] = &unk_10023E6A8;
    id v11 = v4;
    uint64_t v30 = *(void *)(a1 + 64);
    uint64_t v12 = *(void *)(a1 + 32);
    id v13 = *(void **)(a1 + 40);
    id v27 = v11;
    uint64_t v28 = v12;
    id v29 = v13;
    [v10 dispatchCallback:v26];

    id v14 = v27;
  }

  else
  {
    if (*(_BYTE *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 24LL))
    {
      if (!_CPLSilentLogging)
      {
        id v15 = sub_10013EB00();
        uint64_t v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(v15);
        if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
        {
          id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 50LL));
          uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained syncManager]);
          *(_DWORD *)__int128 buf = 138412290;
          __int128 v37 = v18;
          _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "Cancelling upload for %@", buf, 0xCu);
        }
      }

      id v19 = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 50LL));
      unsigned __int8 v20 = (void *)objc_claimAutoreleasedReturnValue([v19 syncManager]);
      [v20 cancelCurrentSyncSession];
    }

    id v21 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) abstractObject]);
    id v22 = (void *)objc_claimAutoreleasedReturnValue([v21 libraryManager]);
    [v22 _setLibraryVersion:*(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40)];

    v31[0] = _NSConcreteStackBlock;
    v31[1] = 3221225472LL;
    v31[2] = sub_100140214;
    v31[3] = &unk_100246FC0;
    id v23 = *(void **)(a1 + 40);
    id v32 = *(id *)(a1 + 32);
    id v24 = v23;
    uint64_t v25 = *(void *)(a1 + 64);
    id v33 = v24;
    uint64_t v34 = v25;
    uint64_t v35 = *(void *)(a1 + 48);
    [v32 dispatchCallback:v31];
    id v14 = v33;
  }
}

uint64_t sub_100140214(void *a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1[4] + 74LL));
  [WeakRetained willRunEngineElement:CPLEngineElementPushSweetSpot];

  return (*(uint64_t (**)(void, void, id, void, void))(a1[5] + 16))( a1[5],  0,  [*(id *)(*(void *)(a1[6] + 8) + 40) ignoredRecordCount],  0,  *(void *)(*(void *)(a1[7] + 8) + 40));
}

void sub_10014028C(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) error]);
  unsigned int v3 = [v2 isCPLErrorWithCode:18];

  if (v3)
  {
    id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) pushChangeTasks]);
    v13[0] = 0LL;
    v13[1] = v13;
    v13[2] = 0x3032000000LL;
    v13[3] = sub_10013F86C;
    void v13[4] = sub_10013F87C;
    id v14 = 0LL;
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472LL;
    v9[2] = sub_1001403F0;
    v9[3] = &unk_100246FE8;
    id v5 = objc_alloc_init(&OBJC_CLASS___NSMutableIndexSet);
    uint64_t v6 = *(void *)(a1 + 40);
    id v10 = v5;
    uint64_t v11 = v6;
    uint64_t v12 = v13;
    [v4 enumerateScopedTasksWithBlock:v9];

    _Block_object_dispose(v13, 8);
  }

  else
  {
    id v4 = 0LL;
  }

  uint64_t v7 = *(void *)(a1 + 48);
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) error]);
  (*(void (**)(uint64_t, void *, void, void *, void))(v7 + 16))(v7, v8, 0LL, v4, 0LL);
}

void sub_1001403D8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_1001403F0(uint64_t a1, uint64_t a2)
{
  if (([*(id *)(a1 + 32) containsIndex:a2] & 1) == 0)
  {
    [*(id *)(a1 + 32) addIndex:a2];
    uint64_t v4 = *(void *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 40LL);
    if (!v4)
    {
      id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) abstractObject]);
      uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v5 libraryManager]);
      uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v6 platformObject]);
      id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 40) + 50LL));
      uint64_t v9 = objc_claimAutoreleasedReturnValue([v7 displayableNameForEngineLibrary:WeakRetained]);
      uint64_t v10 = *(void *)(*(void *)(a1 + 48) + 8LL);
      uint64_t v11 = *(void **)(v10 + 40);
      *(void *)(v10 + 40) = v9;

      uint64_t v4 = *(void *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 40LL);
    }

    id v12 = (id)objc_claimAutoreleasedReturnValue( +[CPLPushChangeTasks descriptionForTaskType:]( &OBJC_CLASS___CPLPushChangeTasks,  "descriptionForTaskType:",  a2));
    +[CPLResetTracker registerLikelyResetReason:]( &OBJC_CLASS___CPLResetTracker,  "registerLikelyResetReason:",  @"rejected record pushed by %@ (%@)",  v4,  v12);
  }

void sub_100140564(id a1)
{
  uint64_t v1 = objc_alloc(&OBJC_CLASS___NSString);
  id v5 = (id)objc_claimAutoreleasedReturnValue(+[NSProcessInfo processInfo](&OBJC_CLASS___NSProcessInfo, "processInfo"));
  id v2 = (void *)objc_claimAutoreleasedReturnValue([v5 processName]);
  unsigned int v3 = -[NSString initWithFormat:](v1, "initWithFormat:", @"%@ unexpectedly quit during push session", v2);
  uint64_t v4 = (void *)qword_1002A37F8;
  qword_1002A37F8 = (uint64_t)v3;
}

void sub_100140660(id a1)
{
  uint64_t v1 = (const char *)_CPLOSLogSubsystem(a1);
  os_log_t v2 = os_log_create(v1, "client.session.push.direct");
  unsigned int v3 = (void *)qword_1002A3808;
  qword_1002A3808 = (uint64_t)v2;
}

id sub_100140908()
{
  if (qword_1002A3928 != -1) {
    dispatch_once(&qword_1002A3928, &stru_100247320);
  }
  return (id)qword_1002A3930;
}

void sub_1001409F4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

id sub_100140A0C()
{
  if (qword_1002A3940 != -1) {
    dispatch_once(&qword_1002A3940, &stru_100247340);
  }
  return (id)qword_1002A3938;
}

void sub_100140A4C(void *a1, void *a2, void *a3, _BYTE *a4)
{
  id v7 = a2;
  if ([a3 containsIndex:a1[5]]
    && (a1[6] & (unint64_t)[v7 integerValue]) != 0)
  {
    *(_BYTE *)(*(void *)(a1[4] + 8LL) + 24LL) = 1;
    *a4 = 1;
  }
}

void sub_100140B64(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
}

LABEL_129:
      LOBYTE(v4) = 0;
      goto LABEL_130;
    case '*':
      if (!-[CPLPrequeliteStorage shouldUpgradeSchema](self, "shouldUpgradeSchema")) {
        return v4;
      }
      uint64_t v62 = (void *)objc_claimAutoreleasedReturnValue(+[CPLPrequeliteType integerType](&OBJC_CLASS___CPLPrequeliteType, "integerType"));
      uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue( +[CPLPrequeliteVariable variableWithName:defaultValue:type:]( &OBJC_CLASS___CPLPrequeliteVariable,  "variableWithName:defaultValue:type:",  @"nextIndex",  &off_10025A290,  v62));

      id v63 = (void *)objc_claimAutoreleasedReturnValue(-[CPLPrequeliteStorage pqStore](self, "pqStore"));
      id v12 = (void *)objc_claimAutoreleasedReturnValue([v63 valueForGlobalVariable:v11]);

      if (-[CPLPrequeliteStorage createVariable:defaultValue:error:]( self,  "createVariable:defaultValue:error:",  *(void *)(&self->super._shouldUpgradeSchema + 1),  v12,  0LL))
      {
        id v13 = (void *)objc_claimAutoreleasedReturnValue([*(id *)((char *)&self->_modifiedVariables + 4) scopeIdentifierVar]);
        __int128 v64 = -[CPLPrequeliteStorage createIndexOnColumnVariable:error:]( self,  "createIndexOnColumnVariable:error:",  v13,  0LL);
        goto LABEL_117;
      }

      LOBYTE(v4) = 0;
      goto LABEL_131;
    case '+':
      if (-[CPLPrequeliteStorage shouldUpgradeSchema](self, "shouldUpgradeSchema"))
      {
        if (!-[CPLPrequeliteStorage addColumnVariable:error:]( self,  "addColumnVariable:error:",  *(_CPLPrequeliteScopeBase **)((char *)&self->_base + 4),  0LL)) {
          goto LABEL_110;
        }
        if (!-[CPLPrequeliteStorage addColumnVariable:error:]( self,  "addColumnVariable:error:",  *(CPLPrequeliteVariable **)((char *)&self->_flagsVar + 4),  0LL)) {
          goto LABEL_110;
        }
        if (!-[CPLPrequeliteStorage addColumnVariable:error:]( self,  "addColumnVariable:error:",  *(CPLPrequeliteVariable **)((char *)&self->_disabledDateVar + 4),  0LL)) {
          goto LABEL_110;
        }
        if (!-[CPLPrequeliteStorage addColumnVariable:error:]( self,  "addColumnVariable:error:",  *(CPLPrequeliteVariable **)((char *)&self->_deleteDateVar + 4),  0LL)) {
          goto LABEL_110;
        }
        if (!-[CPLPrequeliteStorage addColumnVariable:error:]( self,  "addColumnVariable:error:",  *(CPLPrequeliteVariable **)((char *)&self->_scopeChangeVar + 4),  0LL)) {
          goto LABEL_110;
        }
        __int128 v65 = (void *)objc_claimAutoreleasedReturnValue([*(id *)((char *)&self->_transportScopeVar + 4) droppedSomeRecordsVar]);
        uint64_t v66 = -[CPLPrequeliteStorage addColumnVariable:error:](self, "addColumnVariable:error:", v65, 0LL);

        if (!v66) {
          goto LABEL_110;
        }
      }

      __int128 v67 = (void *)objc_claimAutoreleasedReturnValue(-[CPLPrequeliteScopeStorage abstractObject](self, "abstractObject"));
      id v68 = (void *)objc_claimAutoreleasedReturnValue([v67 engineStore]);
      unsigned int v69 = (void *)objc_claimAutoreleasedReturnValue([v68 engineLibrary]);

      unint64_t v115 = (void *)objc_claimAutoreleasedReturnValue([v69 transport]);
      id v120 = 0u;
      uint64_t v121 = 0u;
      v122 = 0u;
      id v123 = 0u;
      id obj = (id)objc_claimAutoreleasedReturnValue( -[CPLPrequeliteScopeStorage enumeratorForScopesIncludeInactive:]( self,  "enumeratorForScopesIncludeInactive:",  0LL));
      id v119 = [obj countByEnumeratingWithState:&v120 objects:v130 count:16];
      if (!v119)
      {
        id v70 = 1;
        goto LABEL_121;
      }

      id v117 = *(void *)v121;
      id v70 = 1;
      while (2)
      {
        id v71 = 0LL;
LABEL_45:
        if (*(void *)v121 != v117) {
          objc_enumerationMutation(obj);
        }
        uint64_t v72 = *(void **)(*((void *)&v120 + 1) + 8 * v71);
        id v73 = (void *)objc_claimAutoreleasedReturnValue([v72 scopeIdentifier]);
        id v74 = (void *)objc_claimAutoreleasedReturnValue(-[CPLPrequeliteScopeStorage flagsForScope:](self, "flagsForScope:", v72));
        id v75 = (void *)objc_claimAutoreleasedReturnValue(-[CPLPrequeliteStorage mainScopeIdentifier](self, "mainScopeIdentifier"));
        id v76 = [v73 isEqualToString:v75];

        if (v76)
        {
          id v77 = [v69 isExceedingQuota];
          uint64_t v78 = [v69 iCloudLibraryHasBeenWiped];
          id v79 = (void *)objc_claimAutoreleasedReturnValue([v69 exitDeleteTime]);
          if (v78)
          {
            [v74 setValue:1 forFlag:4];
            if (!v77)
            {
LABEL_50:
              if (!v79) {
                goto LABEL_51;
              }
              goto LABEL_57;
            }
          }

          else if (!v77)
          {
            goto LABEL_50;
          }

          [v74 setValue:1 forFlag:2];
          if (!v79)
          {
LABEL_51:
            if ((v70 & 1) == 0) {
              goto LABEL_66;
            }
LABEL_63:
            if ([v74 valueForFlag:12]) {
              id v70 = -[CPLPrequeliteScopeStorage setDidDropSomeRecordsForScope:error:]( self,  "setDidDropSomeRecordsForScope:error:",  v72,  0LL);
            }
            goto LABEL_66;
          }

LABEL_121:
      LOBYTE(v4) = v70 & 1;
      return v4;
    case ',':
    case '-':
    case '0':
    case '1':
    case '2':
    case '3':
    case '4':
    case '5':
    case '7':
    case '8':
    case '9':
    case ':':
    case ';':
    case '=':
    case '?':
      return v4;
    case '.':
      if (-[CPLPrequeliteStorage shouldUpgradeSchema](self, "shouldUpgradeSchema"))
      {
        if (!-[CPLPrequeliteStorage addColumnVariableGroup:error:]( self,  "addColumnVariableGroup:error:",  *(CPLPrequeliteVariable **)((char *)&self->_supervisorInfoVar + 4),  0LL)
          || !-[CPLPrequeliteStorage addColumnVariableGroup:error:]( self,  "addColumnVariableGroup:error:",  *(CPLPrequeliteTodoVar **)((char *)&self->_pushToTransportTodoVar + 4),  0LL))
        {
          goto LABEL_112;
        }

        uint64_t v88 = (void *)objc_claimAutoreleasedReturnValue([*(id *)((char *)&self->_modifiedVariables + 4) scopeTypeVar]);
        uint64_t v89 = -[CPLPrequeliteStorage addColumnVariable:error:](self, "addColumnVariable:error:", v88, 0LL);

        if (!v89) {
          goto LABEL_113;
        }
        if (-[CPLPrequeliteStorage addColumnVariableGroup:error:]( self,  "addColumnVariableGroup:error:",  *(CPLPrequeliteTodoVar **)((char *)&self->_pullFromTransportTodoVar + 4),  0LL))
        {
          uint64_t v89 = -[CPLPrequeliteStorage addColumnVariableGroup:error:]( self,  "addColumnVariableGroup:error:",  *(CPLPrequeliteTodoVar **)((char *)&self->_clientNeedsToPullTodoVar + 4),  0LL);
        }

        else
        {
LABEL_112:
          uint64_t v89 = 0;
        }
      }

      else
      {
        uint64_t v89 = 1;
      }

id sub_1001435AC(id a1, id a2)
{
  return a2;
}

id sub_1001435C0(id a1, id a2)
{
  return a2;
}

id sub_1001435D4(id a1, id a2)
{
  return a2;
}

id sub_1001435E8(id a1, id a2)
{
  return a2;
}

id sub_1001435FC(id a1, id a2)
{
  if (a2) {
    return a2;
  }
  else {
    return &stru_1002482B0;
  }
}

id sub_100143610(id a1, id a2)
{
  return a2;
}

id sub_100143624(id a1, id a2)
{
  return a2;
}

id sub_100143638(id a1, id a2)
{
  if (a2) {
    return a2;
  }
  else {
    return &off_10025A290;
  }
}

id sub_10014364C(id a1, id a2)
{
  if (a2) {
    return a2;
  }
  else {
    return &off_10025A290;
  }
}

id sub_100143660(uint64_t a1, void *a2)
{
  if (a2)
  {
    os_log_t v2 = *(void **)(a1 + 32);
    id v3 = a2;
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v2 engineLibrary]);
    id v5 = (void *)objc_claimAutoreleasedReturnValue([v4 transport]);
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v5 transportScopeForUpgradeFromScopeName:v3]);
  }

  else
  {
    uint64_t v6 = 0LL;
  }

  return v6;
}

id sub_1001436D4(id a1, id a2)
{
  id v2 = a2;
  id v3 = v2;
  if (v2) {
    uint64_t v4 = (_UNKNOWN **)v2;
  }
  else {
    uint64_t v4 = &off_10025A2C0;
  }

  return v4;
}

void sub_100143B64( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, char a37, uint64_t a38, uint64_t a39, uint64_t a40, char a41)
{
}

void sub_100143BB0(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  uint64_t v6 = *(void **)(a1 + 32);
  id v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) mainTable]);
  uint64_t v8 = *(void *)(a1 + 40);
  uint64_t v9 = *(void *)(v8 + 68);
  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v8 + 60) scopeTypeVar]);
  *(_BYTE *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = [v6 cplExecute:@"UPDATE %@ SET %@ = (%@ | %ld) WHERE %@ = %ld", v7, v9, v9, 0x10000, v10, a2];

  if (*(_BYTE *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL)) {
    *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) += [*(id *)(a1 + 32) changes];
  }
  else {
    *a3 = 1;
  }
}

CPLEngineScope *sub_100143C98(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = objc_alloc(&OBJC_CLASS___CPLEngineScope);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 60) valuesInSet:v3]);

  uint64_t v6 = -[CPLEngineScope initWithPrequeliteDictionary:base:]( v4,  "initWithPrequeliteDictionary:base:",  v5,  *(void *)(*(void *)(a1 + 32) + 60LL));
  return v6;
}

void sub_100143DC8(id a1, sqlite3_context *a2, int a3, sqlite3_value **a4)
{
  if (sqlite3_value_type(*a4) == 1)
  {
    int v6 = sqlite3_value_int(*a4);
    if (v6 < 0)
    {
      LODWORD(v7) = 7;
    }

    else
    {
      LODWORD(v7) = v6;
    }
  }

  else
  {
    LODWORD(v7) = 0;
  }

  sqlite3_result_int(a2, v7);
}

CPLEngineScope *sub_100144568(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = objc_alloc(&OBJC_CLASS___CPLEngineScope);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 60) valuesInSet:v3]);

  int v6 = -[CPLEngineScope initWithPrequeliteDictionary:base:]( v4,  "initWithPrequeliteDictionary:base:",  v5,  *(void *)(*(void *)(a1 + 32) + 60LL));
  return v6;
}

CPLEngineScope *sub_1001445F4(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = objc_alloc(&OBJC_CLASS___CPLEngineScope);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 60) valuesInSet:v3]);

  int v6 = -[CPLEngineScope initWithPrequeliteDictionary:base:]( v4,  "initWithPrequeliteDictionary:base:",  v5,  *(void *)(*(void *)(a1 + 32) + 60LL));
  return v6;
}

CPLEngineScope *sub_10014483C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = objc_alloc(&OBJC_CLASS___CPLEngineScope);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 60) valuesInSet:v3]);

  int v6 = -[CPLEngineScope initWithPrequeliteDictionary:base:]( v4,  "initWithPrequeliteDictionary:base:",  v5,  *(void *)(*(void *)(a1 + 32) + 60LL));
  return v6;
}

CPLEngineScope *sub_1001449C4(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = objc_alloc(&OBJC_CLASS___CPLEngineScope);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 60) valuesInSet:v3]);

  int v6 = -[CPLEngineScope initWithPrequeliteDictionary:base:]( v4,  "initWithPrequeliteDictionary:base:",  v5,  *(void *)(*(void *)(a1 + 32) + 60LL));
  return v6;
}

id sub_100144F10(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _fillScopeTypeOrder:&unk_1002A3810 withOrderOfScopeTypes:&off_10025C678 name:@"push-highpriority-to-transport"];
}

CPLEngineScope *sub_100144F30(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = objc_alloc(&OBJC_CLASS___CPLEngineScope);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 60) valuesInSet:v3]);

  int v6 = -[CPLEngineScope initWithPrequeliteDictionary:base:]( v4,  "initWithPrequeliteDictionary:base:",  v5,  *(void *)(*(void *)(a1 + 32) + 60LL));
  return v6;
}

id sub_100145264(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _fillScopeTypeOrder:&unk_1002A3850 withOrderOfScopeTypes:&off_10025C690 name:@"push-to-transport"];
}

CPLEngineScope *sub_100145284(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = objc_alloc(&OBJC_CLASS___CPLEngineScope);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 60) valuesInSet:v3]);

  int v6 = -[CPLEngineScope initWithPrequeliteDictionary:base:]( v4,  "initWithPrequeliteDictionary:base:",  v5,  *(void *)(*(void *)(a1 + 32) + 60LL));
  return v6;
}

id sub_100145764(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _fillScopeTypeOrder:&unk_1002A3890 withOrderOfScopeTypes:&off_10025C6A8 name:@"pull-from-transport"];
}

CPLEngineScope *sub_100145784(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = objc_alloc(&OBJC_CLASS___CPLEngineScope);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 60) valuesInSet:v3]);

  int v6 = -[CPLEngineScope initWithPrequeliteDictionary:base:]( v4,  "initWithPrequeliteDictionary:base:",  v5,  *(void *)(*(void *)(a1 + 32) + 60LL));
  return v6;
}

id sub_100145D24(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _fillScopeTypeOrder:&unk_1002A38D0 withOrderOfScopeTypes:&off_10025C6C0 name:@"mingling"];
}

CPLEngineScope *sub_100145D44(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = objc_alloc(&OBJC_CLASS___CPLEngineScope);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 60) valuesInSet:v3]);

  int v6 = -[CPLEngineScope initWithPrequeliteDictionary:base:]( v4,  "initWithPrequeliteDictionary:base:",  v5,  *(void *)(*(void *)(a1 + 32) + 60LL));
  return v6;
}

CPLEngineScope *sub_100146090(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = objc_alloc(&OBJC_CLASS___CPLEngineScope);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 60) valuesInSet:v3]);

  int v6 = -[CPLEngineScope initWithPrequeliteDictionary:base:]( v4,  "initWithPrequeliteDictionary:base:",  v5,  *(void *)(*(void *)(a1 + 32) + 60LL));
  return v6;
}

CPLEngineScope *sub_10014646C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = objc_alloc(&OBJC_CLASS___CPLEngineScope);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 60) valuesInSet:v3]);

  int v6 = -[CPLEngineScope initWithPrequeliteDictionary:base:]( v4,  "initWithPrequeliteDictionary:base:",  v5,  *(void *)(*(void *)(a1 + 32) + 60LL));
  return v6;
}

CPLEngineScope *sub_1001467F0(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = objc_alloc(&OBJC_CLASS___CPLEngineScope);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 60) valuesInSet:v3]);

  int v6 = -[CPLEngineScope initWithPrequeliteDictionary:base:]( v4,  "initWithPrequeliteDictionary:base:",  v5,  *(void *)(*(void *)(a1 + 32) + 60LL));
  return v6;
}

CPLEngineScope *sub_1001473E8(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = objc_alloc(&OBJC_CLASS___CPLEngineScope);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 60) valuesInSet:v3]);

  int v6 = -[CPLEngineScope initWithPrequeliteDictionary:base:]( v4,  "initWithPrequeliteDictionary:base:",  v5,  *(void *)(*(void *)(a1 + 32) + 60LL));
  return v6;
}

void sub_100147BA8(id a1)
{
  uint64_t v1 = objc_alloc(&OBJC_CLASS___NSSet);
  uint64_t v2 = objc_opt_class(&OBJC_CLASS___NSSet);
  id v3 = -[NSSet initWithObjects:](v1, "initWithObjects:", v2, objc_opt_class(&OBJC_CLASS___NSData), 0LL);
  uint64_t v4 = (void *)qword_1002A3910;
  qword_1002A3910 = (uint64_t)v3;
}

id sub_1001484D8(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) valueFromSet:a2 atIndex:0];
}

id sub_100148910(uint64_t a1, uint64_t a2)
{
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 260) valuesInSet:a2]);
  id v4 = objc_alloc_init(&OBJC_CLASS___CPLLibraryState);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v3 objectForKeyedSubscript:*(void *)(*(void *)(a1 + 32) + 68)]);
  objc_msgSend(v4, "setDisabled:", ((unint64_t)objc_msgSend(v5, "integerValue") >> 3) & 1);

  int v6 = (void *)objc_claimAutoreleasedReturnValue([v3 objectForKeyedSubscript:*(void *)(*(void *)(a1 + 32) + 76)]);
  [v4 setDisabledDate:v6];

  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v3 objectForKeyedSubscript:*(void *)(*(void *)(a1 + 32) + 84)]);
  [v4 setDeleteDate:v7];

  return v4;
}

id sub_10014AA00(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) pqStore]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) mainTable]);
  id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 124) stagedSyncAnchorVar]);
  id v5 = (void *)objc_claimAutoreleasedReturnValue( +[PQLFormatInjection formatInjection:]( &OBJC_CLASS___PQLFormatInjection,  "formatInjection:",  @"(%@ IS NOT NULL)",  v4));
  int v6 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithBool:]( NSNumber,  "numberWithBool:",  [v2 table:v3 hasRecordsMatchingQuery:v5]));

  return v6;
}

id sub_10014BAA4()
{
  if (qword_1002A3950 != -1) {
    dispatch_once(&qword_1002A3950, &stru_100247360);
  }
  return (id)qword_1002A3948;
}

void sub_10014D368(id a1)
{
  uint64_t v1 = (const char *)_CPLOSLogSubsystem(a1);
  os_log_t v2 = os_log_create(v1, "engine.scopestorage.pql");
  id v3 = (void *)qword_1002A3930;
  qword_1002A3930 = (uint64_t)v2;
}

void sub_10014D394(id a1)
{
  v22[0] = &off_10025A398;
  uint64_t v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSIndexSet indexSetWithIndex:](&OBJC_CLASS___NSIndexSet, "indexSetWithIndex:", 1LL));
  v23[0] = v1;
  v22[1] = &off_10025A3B0;
  uint64_t v9 = sub_10014D498(2LL, v2, v3, v4, v5, v6, v7, v8, 3LL);
  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
  v23[1] = v10;
  v22[2] = &off_10025A3C8;
  uint64_t v18 = sub_10014D498(4LL, v11, v12, v13, v14, v15, v16, v17, 5LL);
  id v19 = (void *)objc_claimAutoreleasedReturnValue(v18);
  v23[2] = v19;
  uint64_t v20 = objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v23,  v22,  3LL));
  id v21 = (void *)qword_1002A3938;
  qword_1002A3938 = v20;
}

NSMutableIndexSet *sub_10014D498( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v15 = &a9;
  uint64_t v10 = objc_alloc_init(&OBJC_CLASS___NSMutableIndexSet);
  uint64_t v11 = v10;
  uint64_t v12 = a1;
  while (1)
  {
    -[NSMutableIndexSet addIndex:](v10, "addIndex:", v12);
    uint64_t v13 = v15++;
    uint64_t v12 = *v13;
    if (!*v13) {
      break;
    }
    uint64_t v10 = v11;
  }

  return v11;
}

void sub_10014D4FC(id a1)
{
  uint64_t v1 = objc_claimAutoreleasedReturnValue(+[PQLNameInjection nameWithString:](&OBJC_CLASS___PQLNameInjection, "nameWithString:", @"scopeIndex"));
  uint64_t v2 = (void *)qword_1002A3948;
  qword_1002A3948 = v1;
}

LABEL_48:
LABEL_63:
  if (!_CPLSilentLogging)
  {
    NSString v82 = sub_10014E628();
    id v83 = (os_log_s *)objc_claimAutoreleasedReturnValue(v82);
    if (os_log_type_enabled(v83, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__int128 buf = 138412546;
      uint64_t v113 = v13;
      uint64_t v114 = 2112;
      unint64_t v115 = v35;
      _os_log_impl((void *)&_mh_execute_header, v83, OS_LOG_TYPE_ERROR, "Failed to migrate %@: %@", buf, 0x16u);
    }
  }

  if (a7)
  {
    uint64_t v35 = v35;
    id v81 = 0;
    *a7 = v35;
  }

  else
  {
    id v81 = 0;
  }

LABEL_70:
  return v81;
}

id sub_10014E628()
{
  if (qword_1002A3958 != -1) {
    dispatch_once(&qword_1002A3958, &stru_100247380);
  }
  return (id)qword_1002A3960;
}

LABEL_52:
  return v26;
}

void sub_10014EEE0(id a1)
{
  uint64_t v1 = (const char *)_CPLOSLogSubsystem(a1);
  os_log_t v2 = os_log_create(v1, "engine.store.pql.migration.101386451");
  uint64_t v3 = (void *)qword_1002A3960;
  qword_1002A3960 = (uint64_t)v2;
}

#error "10014F0E8: call analysis failed (funcsize=13)"
id sub_10014F0EC()
{
  if (qword_1002A3968 != -1) {
    dispatch_once(&qword_1002A3968, &stru_1002473C8);
  }
  return (id)qword_1002A3970;
}

#error "10014F338: call analysis failed (funcsize=70)"
BOOL __cdecl -[CPLPrequeliteStorage upgradeStorageToVersion:](CPLPrequeliteStorage *self, SEL a2, int64_t a3)
{
  id v4;
  os_log_s *v5;
  int v7;
  int64_t v8;
  if (!_CPLSilentLogging)
  {
    uint64_t v4 = sub_10014F0EC();
    uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v7 = 134217984;
      uint64_t v8 = a3;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "Upgrading to %lld", (uint8_t *)&v7, 0xCu);
    }
  }

  return 1;
}

void sub_100150CA4(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v5 = *(void **)(a1 + 32);
  id v6 = a2;
  id v12 = (id)objc_claimAutoreleasedReturnValue( objc_msgSend( v5,  "additionalStatusForScopeWithIndex:baseRecordCount:",  objc_msgSend(v6, "integerValue"),  a3));
  uint64_t v7 = objc_alloc(&OBJC_CLASS___NSMutableString);
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) recordsDesignation]);
  if (v12) {
    uint64_t v9 = -[NSMutableString initWithFormat:](v7, "initWithFormat:", @"%lu %@ (%@)", a3, v8, v12);
  }
  else {
    uint64_t v9 = -[NSMutableString initWithFormat:](v7, "initWithFormat:", @"%lu %@", a3, v8, v11);
  }
  uint64_t v10 = v9;
  [*(id *)(a1 + 40) setObject:v9 forKeyedSubscript:v6];
}

void sub_100151B14(id a1)
{
  uint64_t v1 = (const char *)_CPLOSLogSubsystem(a1);
  os_log_t v2 = os_log_create(v1, "engine.storage.pql");
  uint64_t v3 = (void *)qword_1002A3970;
  qword_1002A3970 = (uint64_t)v2;
}

  ;
}

id sub_100151E20()
{
  if (qword_1002A3A60 != -1) {
    dispatch_once(&qword_1002A3A60, &stru_100247410);
  }
  return (id)qword_1002A3A68;
}

void *sub_100151FBC(void *result)
{
  uint64_t v1 = result[4];
  if (*(void *)(v1 + 16) == result[5] && *(double *)(v1 + 24) > 0.0)
  {
    *(void *)(v1 + 24) = 0LL;
    if (!_CPLSilentLogging)
    {
      os_log_t v2 = result;
      id v3 = sub_100151E20();
      uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v5 = v2[4];
        int v6 = 138412290;
        uint64_t v7 = v5;
        _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEBUG,  "%@ stop showing sync indicator",  (uint8_t *)&v6,  0xCu);
      }
    }

    return +[CPLSyncIndicator hideSyncIndicator](&OBJC_CLASS___CPLSyncIndicator, "hideSyncIndicator");
  }

  return result;
}

id sub_1001522D4(uint64_t a1)
{
  if (![*(id *)(*(void *)(a1 + 32) + 8) count]) {
    [*(id *)(a1 + 32) _actuallyStartShowingIndicatorLocked];
  }
  [*(id *)(*(void *)(a1 + 32) + 8) addObject:*(void *)(a1 + 40)];
  return [*(id *)(a1 + 32) _emitActivityStateLog];
}

id sub_100152418(uint64_t a1)
{
  os_log_t v2 = (uint64_t *)(a1 + 32);
  if (![*(id *)(*(void *)(a1 + 32) + 8) countForObject:*(void *)(a1 + 40)]) {
    sub_10019A554(a1, v2);
  }
  id result = [*(id *)(*(void *)(a1 + 32) + 8) countForObject:*(void *)(a1 + 40)];
  if (result)
  {
    [*(id *)(*(void *)(a1 + 32) + 8) removeObject:*(void *)(a1 + 40)];
    [*(id *)(a1 + 32) _emitActivityStateLog];
    id result = [*(id *)(*(void *)(a1 + 32) + 8) count];
    if (!result) {
      return _[(id)*v2 _actuallyStopShowingIndicatorLocked];
    }
  }

  return result;
}

id sub_10015278C()
{
  if (qword_1002A3A70 != -1) {
    dispatch_once(&qword_1002A3A70, &stru_100247430);
  }
  return (id)qword_1002A3A78;
}

id sub_100153068(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return [*(id *)(*(void *)(a1 + 32) + 48) setUserInfoObject:a3 forKey:a2];
}

void sub_1001534E8(id a1)
{
  uint64_t v1 = (const char *)_CPLOSLogSubsystem(a1);
  os_log_t v2 = os_log_create(v1, "engine.syncmanager.activity");
  id v3 = (void *)qword_1002A3A68;
  qword_1002A3A68 = (uint64_t)v2;
}

void sub_100153514(uint64_t a1)
{
  os_log_t v2 = objc_autoreleasePoolPush();
  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
  objc_autoreleasePoolPop(v2);
}

void sub_100153548(id a1)
{
  uint64_t v1 = (const char *)_CPLOSLogSubsystem(a1);
  os_log_t v2 = os_log_create(v1, "engine.syncmanager.syncstate");
  id v3 = (void *)qword_1002A3A78;
  qword_1002A3A78 = (uint64_t)v2;
}

void sub_100153574(id a1)
{
  uint64_t v1 = 0LL;
  uint64_t v2 = 0LL;
  do
  {
    uint64_t v3 = v1 + 1;
    else {
      uint64_t v4 = qword_100219C80[v1];
    }
    qword_1002A3980[v1] = v4;
    qword_1002A39F0[v1] = v2;
    v2 += v4;
    ++v1;
  }

  while (v3 != 13);
  qword_1002A3978 = v2;
}

id sub_10015409C()
{
  if (qword_1002A3A90 != -1) {
    dispatch_once(&qword_1002A3A90, &stru_100247620);
  }
  return (id)qword_1002A3A98;
}

id sub_100154370(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ([*(id *)(*(void *)(a1 + 32) + 32) executeRaw:@"CREATE TABLE IF NOT EXISTS globals (libraryVersion TEXT)"])
  {
    if ([v3 executeRaw:@"INSERT INTO globals values (NULL)"])
    {
      uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) abstractObject]);
      uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v4 engineLibrary]);
      id v6 = [v5 libraryOptions];

      uint64_t v7 = *(void **)(a1 + 32);
      uint64_t v8 = v7[22];
      uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInteger:", v6));
      id v10 = [v7 addGlobalVariable:v8 defaultValue:v9 error:0];

      if (!(_DWORD)v10) {
        goto LABEL_42;
      }
      uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) abstractObject]);
      id v12 = (void *)objc_claimAutoreleasedReturnValue([v11 storages]);

      __int128 v46 = 0u;
      __int128 v47 = 0u;
      __int128 v44 = 0u;
      __int128 v45 = 0u;
      id v13 = v12;
      id v14 = [v13 countByEnumeratingWithState:&v44 objects:v52 count:16];
      if (v14)
      {
        id v15 = v14;
        uint64_t v16 = *(void *)v45;
        while (2)
        {
          for (unint64_t i = 0LL; i != v15; unint64_t i = (char *)i + 1)
          {
            if (*(void *)v45 != v16) {
              objc_enumerationMutation(v13);
            }
            uint64_t v18 = *(void **)(*((void *)&v44 + 1) + 8LL * (void)i);
            if ((objc_msgSend(v18, "shouldBeCreatedDynamically", (void)v44) & 1) == 0)
            {
              id v19 = (void *)objc_claimAutoreleasedReturnValue([v18 platformObject]);
              if (([v19 createStorage] & 1) == 0)
              {
                if (!_CPLSilentLogging)
                {
                  id v36 = sub_10015409C();
                  __int128 v37 = (os_log_s *)objc_claimAutoreleasedReturnValue(v36);
                  if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR))
                  {
                    uint64_t v38 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 32) lastCPLError]);
                    id v39 = (void *)objc_claimAutoreleasedReturnValue([v38 localizedDescription]);
                    *(_DWORD *)__int128 buf = 138412546;
                    unsigned __int8 v49 = v18;
                    __int16 v50 = 2112;
                    __int128 v51 = v39;
                    _os_log_impl( (void *)&_mh_execute_header,  v37,  OS_LOG_TYPE_ERROR,  "Unable to initialize %@: %@",  buf,  0x16u);
                  }
                }

                goto LABEL_40;
              }
            }
          }

          id v15 = [v13 countByEnumeratingWithState:&v44 objects:v52 count:16];
          if (v15) {
            continue;
          }
          break;
        }
      }

      uint64_t v20 = *(void **)(a1 + 32);
      id v21 = (void *)objc_claimAutoreleasedReturnValue([v20 createNewLibraryVersion]);
      LOBYTE(v20) = [v20 storeLibraryVersion:v21 withError:0];

      if ((v20 & 1) != 0
        && [*(id *)(a1 + 32) addGlobalVariable:*(void *)(*(void *)(a1 + 32) + 88) defaultValue:0 error:0]
        && [*(id *)(a1 + 32) addGlobalVariable:*(void *)(*(void *)(a1 + 32) + 96) defaultValue:0 error:0])
      {
        id v22 = *(void **)(a1 + 32);
        uint64_t v23 = v22[13];
        id v24 = (void *)objc_claimAutoreleasedReturnValue([v22 createNewClientCacheIdentifier]);
        id v10 = [v22 addGlobalVariable:v23 defaultValue:v24 error:0];

        if (!(_DWORD)v10) {
          goto LABEL_42;
        }
        if ([*(id *)(a1 + 32) addGlobalVariable:*(void *)(*(void *)(a1 + 32) + 112) defaultValue:0 error:0])
        {
          uint64_t v25 = *(void **)(a1 + 32);
          uint64_t v26 = v25[15];
          id v27 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
          id v10 = [v25 addGlobalVariable:v26 defaultValue:v27 error:0];

          if (!(_DWORD)v10) {
            goto LABEL_42;
          }
          if ([*(id *)(a1 + 32) addGlobalVariable:*(void *)(*(void *)(a1 + 32) + 128) defaultValue:0 error:0]
            && [*(id *)(a1 + 32) addGlobalVariable:*(void *)(*(void *)(a1 + 32) + 136) defaultValue:0 error:0]
            && [*(id *)(a1 + 32) addGlobalVariable:*(void *)(*(void *)(a1 + 32) + 184) defaultValue:&off_10025A428 error:0]
            && [*(id *)(a1 + 32) addGlobalVariable:*(void *)(*(void *)(a1 + 32) + 192) defaultValue:0 error:0]
            && [*(id *)(a1 + 32) addGlobalVariable:*(void *)(*(void *)(a1 + 32) + 208) defaultValue:0 error:0]
            && [*(id *)(a1 + 32) addGlobalVariable:*(void *)(*(void *)(a1 + 32) + 216) defaultValue:&off_10025A428 error:0])
          {
            uint64_t v28 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) abstractObject]);
            id v29 = (void *)objc_claimAutoreleasedReturnValue([v28 mainScopeIdentifier]);

            if (!_CPLSilentLogging)
            {
              id v30 = sub_10015409C();
              uint64_t v31 = (os_log_s *)objc_claimAutoreleasedReturnValue(v30);
              if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)__int128 buf = 138412290;
                unsigned __int8 v49 = v29;
                _os_log_impl( (void *)&_mh_execute_header,  v31,  OS_LOG_TYPE_DEFAULT,  "Store is created with main scope identifier %@",  buf,  0xCu);
              }
            }

            unsigned int v32 = objc_msgSend( *(id *)(a1 + 32),  "addGlobalVariable:defaultValue:error:",  *(void *)(*(void *)(a1 + 32) + 224),  v29,  0,  (void)v44);

            if (v32)
            {
              id v10 = [*(id *)(*(void *)(a1 + 32) + 32) setUserVersion:92];
              goto LABEL_42;
            }
          }
        }
      }
    }
  }

  else
  {
    if (_CPLSilentLogging)
    {
      id v10 = 0LL;
      goto LABEL_46;
    }

    id v33 = sub_10015409C();
    id v13 = (id)objc_claimAutoreleasedReturnValue(v33);
    if (os_log_type_enabled((os_log_t)v13, OS_LOG_TYPE_ERROR))
    {
      uint64_t v34 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 32) lastCPLError]);
      uint64_t v35 = (void *)objc_claimAutoreleasedReturnValue([v34 localizedDescription]);
      *(_DWORD *)__int128 buf = 138412290;
      unsigned __int8 v49 = v35;
      _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v13,  OS_LOG_TYPE_ERROR,  "Unable to create database globals table: %@",  buf,  0xCu);
    }

void sub_100154CB0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
}

void sub_100154CDC(uint64_t a1, void *a2, sqlite3_stmt *a3, unint64_t a4)
{
  id v7 = a2;
  id WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    uint64_t v9 = sqlite3_sql(a3);
    id v10 = -[NSString initWithBytesNoCopy:length:encoding:freeWhenDone:]( objc_alloc(&OBJC_CLASS___NSString),  "initWithBytesNoCopy:length:encoding:freeWhenDone:",  v9,  strlen(v9),  4LL,  0LL);
    uint64_t v11 = (_CPLPrequeliteStatementStatistic *)objc_claimAutoreleasedReturnValue([WeakRetained[45] objectForKeyedSubscript:v10]);
    if (!v11)
    {
      uint64_t v11 = -[_CPLPrequeliteStatementStatistic initWithStatement:]( objc_alloc(&OBJC_CLASS____CPLPrequeliteStatementStatistic),  "initWithStatement:",  v10);
      id v12 = WeakRetained[45];
      id v13 = (void *)objc_claimAutoreleasedReturnValue(-[_CPLPrequeliteStatementStatistic statement](v11, "statement"));
      [v12 setObject:v11 forKeyedSubscript:v13];
    }

    -[_CPLPrequeliteStatementStatistic setCount:]( v11,  "setCount:",  (char *)-[_CPLPrequeliteStatementStatistic count](v11, "count") + 1);
    -[_CPLPrequeliteStatementStatistic setResultsCount:]( v11,  "setResultsCount:",  (char *)-[_CPLPrequeliteStatementStatistic resultsCount](v11, "resultsCount") + a4);
    unint64_t v14 = sqlite3_stmt_status(a3, 1, 1);
    if (sqlite3_stmt_readonly(a3))
    {
      if (a4 < 0xB)
      {
        if (a4 + 3 >= v14 || _CPLSilentLogging) {
          goto LABEL_25;
        }
        id v20 = sub_10015501C();
        uint64_t v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(v20);
        if (!os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_24;
        }
      }

      else
      {
        if (v14 < 2 * a4 || _CPLSilentLogging) {
          goto LABEL_25;
        }
        id v15 = sub_10015501C();
        uint64_t v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(v15);
        if (!os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
        {
LABEL_24:

LABEL_25:
          goto LABEL_26;
        }
      }

      int v22 = 136315650;
      uint64_t v23 = v9;
      __int16 v24 = 2048;
      unint64_t v25 = v14;
      __int16 v26 = 2048;
      unint64_t v27 = a4;
      uint64_t v17 = "'%s' performed %lu steps to return %lu rows";
    }

    else
    {
      unint64_t v18 = (unint64_t)[v7 changes];
      if (v18 < 0xB)
      {
        if (v18 + 3 >= v14 || _CPLSilentLogging) {
          goto LABEL_25;
        }
        id v21 = sub_10015501C();
        uint64_t v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(v21);
        if (!os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_24;
        }
      }

      else
      {
        if (v14 < 2 * v18 || _CPLSilentLogging) {
          goto LABEL_25;
        }
        id v19 = sub_10015501C();
        uint64_t v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(v19);
        if (!os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_24;
        }
      }

      int v22 = 136315650;
      uint64_t v23 = v9;
      __int16 v24 = 2048;
      unint64_t v25 = v14;
      __int16 v26 = 2048;
      unint64_t v27 = a4;
      uint64_t v17 = "'%s' performed %lu steps to perform %lu changes";
    }

    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, v17, (uint8_t *)&v22, 0x20u);
    goto LABEL_24;
  }

id sub_10015501C()
{
  if (qword_1002A3AA0 != -1) {
    dispatch_once(&qword_1002A3AA0, &stru_100247640);
  }
  return (id)qword_1002A3AA8;
}

uint64_t sub_10015505C(int a1, void *a2, sqlite3_stmt *a3, void *a4)
{
  id v7 = a2;
  if (a1 == 2)
  {
    uint64_t v8 = sqlite3_sql(a3);
    uint64_t v9 = -[NSString initWithBytesNoCopy:length:encoding:freeWhenDone:]( objc_alloc(&OBJC_CLASS___NSString),  "initWithBytesNoCopy:length:encoding:freeWhenDone:",  v8,  strlen(v8),  4LL,  0LL);
    id v10 = (_CPLPrequeliteStatementStatistic *)objc_claimAutoreleasedReturnValue([v7[45] objectForKeyedSubscript:v9]);
    if (!v10)
    {
      id v10 = -[_CPLPrequeliteStatementStatistic initWithStatement:]( objc_alloc(&OBJC_CLASS____CPLPrequeliteStatementStatistic),  "initWithStatement:",  v9);
      id v11 = v7[45];
      id v12 = (void *)objc_claimAutoreleasedReturnValue(-[_CPLPrequeliteStatementStatistic statement](v10, "statement"));
      [v11 setObject:v10 forKeyedSubscript:v12];
    }

    -[_CPLPrequeliteStatementStatistic setDurationInNanoSeconds:]( v10,  "setDurationInNanoSeconds:",  (char *)-[_CPLPrequeliteStatementStatistic durationInNanoSeconds](v10, "durationInNanoSeconds") + *a4);
  }

  return 0LL;
}

void sub_1001554D0(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    objc_end_catch();
    JUMPOUT(0x1001554A4LL);
  }

  _Unwind_Resume(a1);
}

void sub_1001554F0(uint64_t a1, int a2)
{
  if (a2) {
    objc_terminate();
  }
  JUMPOUT(0x1001554FCLL);
}

id sub_100155AAC(uint64_t a1)
{
  id result = *(id *)(*(void *)(a1 + 32) + 32LL);
  if (result)
  {
    if (!_CPLSilentLogging)
    {
      id v3 = sub_10015409C();
      uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t v5 = 0;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Dropping clientCache now", v5, 2u);
      }

      id result = *(id *)(*(void *)(a1 + 32) + 32LL);
    }

    id result = [result execute:@"DROP TABLE clientCache"];
    if ((_DWORD)result) {
      return [*(id *)(a1 + 32) startVacuumWithCompletionHandler:&stru_100247518];
    }
  }

  return result;
}

id sub_100157988(uint64_t a1)
{
  if (![*(id *)(a1 + 32) _upgradeToVersion:*(void *)(a1 + 48)])
  {
    if (_CPLSilentLogging) {
      return 0LL;
    }
    id v18 = sub_10015409C();
    uint64_t v2 = (os_log_s *)objc_claimAutoreleasedReturnValue(v18);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
    {
      id v19 = *(id **)(a1 + 32);
      uint64_t v20 = *(void *)(a1 + 48);
      uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue([v19[4] lastCPLError]);
      uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v16 localizedDescription]);
      *(_DWORD *)__int128 buf = 138412802;
      __int128 v47 = v19;
      __int16 v48 = 2048;
      uint64_t v49 = v20;
      __int16 v50 = 2112;
      __int128 v51 = v8;
      uint64_t v17 = "Unable to upgrade %@ to version %lld: %@";
LABEL_21:
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, v17, buf, 0x20u);

LABEL_27:
    }

LABEL_77:
  uint64_t v15 = 0LL;
LABEL_78:
  id v71 = self->_db;
  if (!v71)
  {
    id v70 = 0;
    goto LABEL_82;
  }

  -[PQLConnection close:](v71, "close:", 0LL);
  id v70 = 0;
  __int128 v67 = self->_db;
  self->_db = 0LL;
LABEL_80:

LABEL_82:
  objc_destroyWeak(v78);
  objc_destroyWeak(&v77);
  objc_destroyWeak(&from);
  objc_destroyWeak(&location);
  return v70;
}

void sub_100158F8C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, id location, id a20)
{
}

void sub_100158FFC(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  uint64_t v8 = a3;
  id v9 = a4;
  objc_copyWeak(&to, (id *)(a1 + 32));
  id v10 = objc_loadWeakRetained(&to);
  BOOL v11 = v10 == 0LL;

  if (v11)
  {
    if (!_CPLSilentLogging)
    {
      id v42 = sub_10015409C();
      __int128 v43 = (os_log_s *)objc_claimAutoreleasedReturnValue(v42);
      if (os_log_type_enabled(v43, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)__int128 buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v43,  OS_LOG_TYPE_ERROR,  "Prequelite store is not referenced anymore",  buf,  2u);
      }
    }

    __int128 v44 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
    uint64_t v45 = *(void *)(a1 + 48);
    id v46 = objc_loadWeakRetained(&to);
    __int128 v47 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/Prequeli teStore/CPLPrequeliteStore.m"));
    [v44 handleFailureInMethod:v45 object:v46 file:v47 lineNumber:1170 description:@"Prequelite store is not referenced anymore"];

    abort();
  }

  id v12 = (void *)objc_claimAutoreleasedReturnValue([v9 domain]);
  unsigned int v13 = [v12 isEqual:PQLSqliteErrorDomain];

  if (!v13) {
    goto LABEL_15;
  }
  id v14 = [v9 code];
  if (v14 <= 0x1Au && ((1 << (char)v14) & 0x5000800) != 0)
  {
    uint64_t v15 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
    uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
    -[NSMutableDictionary setObject:forKeyedSubscript:](v15, "setObject:forKeyedSubscript:", v16, @"date");

    uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", v14));
    -[NSMutableDictionary setObject:forKeyedSubscript:](v15, "setObject:forKeyedSubscript:", v17, @"SQLErrorCode");

    id v18 = (id *)(a1 + 40);
    id WeakRetained = objc_loadWeakRetained(v18);
    uint64_t v20 = (sqlite3 *)[WeakRetained dbHandle];

    if (v20)
    {
      id v21 = sqlite3_errmsg(v20);
      if (v21)
      {
        int v22 = -[NSString initWithFormat:]( objc_alloc(&OBJC_CLASS___NSString),  "initWithFormat:",  @"corrupted database: %s",  v21);
        -[NSMutableDictionary setObject:forKeyedSubscript:](v15, "setObject:forKeyedSubscript:", v22, @"comment");
      }

      uint64_t v23 = +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", sqlite3_extended_errcode(v20));
      __int16 v24 = (void *)objc_claimAutoreleasedReturnValue(v23);
      -[NSMutableDictionary setObject:forKeyedSubscript:]( v15,  "setObject:forKeyedSubscript:",  v24,  @"extendedSQLErrorCode");
    }

    unint64_t v25 = +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *__error());
    __int16 v26 = (void *)objc_claimAutoreleasedReturnValue(v25);
    -[NSMutableDictionary setObject:forKeyedSubscript:]( v15,  "setObject:forKeyedSubscript:",  v26,  @"POSIXErrorCode");

    id v27 = objc_loadWeakRetained(&to);
    uint64_t v28 = (void *)objc_claimAutoreleasedReturnValue([v27 abstractObject]);
    id v29 = (void *)objc_claimAutoreleasedReturnValue([v28 engineLibrary]);
    id v30 = (void *)objc_claimAutoreleasedReturnValue([v29 systemMonitor]);
    id v31 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( NSNumber,  "numberWithUnsignedLongLong:",  [v30 freeDiskSpaceSize]));
    -[NSMutableDictionary setObject:forKeyedSubscript:]( v15,  "setObject:forKeyedSubscript:",  v31,  @"FreeDiskSpace");

    if (!_CPLSilentLogging)
    {
      id v32 = sub_10015409C();
      uint64_t v33 = (os_log_s *)objc_claimAutoreleasedReturnValue(v32);
      if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)__int128 buf = 138412290;
        __int16 v50 = v15;
        _os_log_impl( (void *)&_mh_execute_header,  v33,  OS_LOG_TYPE_ERROR,  "Database is corrupted. Extra information:\n%@",  buf,  0xCu);
      }
    }

    id v34 = objc_loadWeakRetained(&to);
    [v34 _markLibraryAsCorruptedWithInfo:v15];

    id v35 = objc_loadWeakRetained(v18);
    id v36 = (void *)objc_claimAutoreleasedReturnValue( +[CPLErrors cplErrorWithCode:underlyingError:userInfo:description:]( &OBJC_CLASS___CPLErrors,  "cplErrorWithCode:underlyingError:userInfo:description:",  3LL,  v9,  0LL,  @"Library is corrupted"));
    [v35 setLastError:v36];

    __int128 v37 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](&OBJC_CLASS___NSNotificationCenter, "defaultCenter"));
    id v38 = objc_loadWeakRetained(&to);
    uint64_t v39 = (void *)objc_claimAutoreleasedReturnValue([v38 abstractObject]);
    id v40 = (void *)objc_claimAutoreleasedReturnValue([v39 engineLibrary]);
    [v37 postNotificationName:CPLLibraryMustBeWipedNotificationName object:v40];

LABEL_18:
    goto LABEL_19;
  }

  if ([v9 code] != (id)19)
  {
LABEL_15:
    if (!_CPLSilentLogging)
    {
      id v41 = sub_10015409C();
      uint64_t v15 = (NSMutableDictionary *)objc_claimAutoreleasedReturnValue(v41);
      if (os_log_type_enabled((os_log_t)v15, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)__int128 buf = 138412546;
        __int16 v50 = v8;
        __int16 v51 = 2112;
        id v52 = v9;
        _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v15,  OS_LOG_TYPE_ERROR,  "SQL error executing %@: %@",  buf,  0x16u);
      }

      goto LABEL_18;
    }
  }

void sub_10015953C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id location)
{
}

void sub_100159978(uint64_t a1)
{
  uint64_t v2 = objc_autoreleasePoolPush();
  uint64_t v21 = 0LL;
  int v22 = &v21;
  uint64_t v23 = 0x2020000000LL;
  char v24 = 0;
  id v3 = *(os_unfair_lock_s **)(a1 + 32);
  id v4 = v3 + 6;
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3221225472LL;
  uint64_t v17 = sub_100159C3C;
  id v18 = &unk_10023DD58;
  id v19 = v3;
  uint64_t v20 = &v21;
  uint64_t v5 = v16;
  os_unfair_lock_lock(v4);
  v17((uint64_t)v5);
  os_unfair_lock_unlock(v4);

  id v6 = *(void **)(a1 + 32);
  if (!v6[4] || *((_BYTE *)v22 + 24))
  {
    if (!_CPLSilentLogging)
    {
      id v7 = sub_10015409C();
      uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v9 = *(void *)(a1 + 40);
        LODWORD(buf) = 138412290;
        *(void *)((char *)&buf + 4) = v9;
        _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEBUG,  "Trying to perform %@ while the database is already closed",  (uint8_t *)&buf,  0xCu);
      }
    }

    id v10 = *(void **)(a1 + 40);
    BOOL v11 = (void *)objc_claimAutoreleasedReturnValue(+[CPLErrors libraryClosedError](&OBJC_CLASS___CPLErrors, "libraryClosedError"));
    [v10 setError:v11];

    (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
    goto LABEL_10;
  }

  *(void *)&__int128 buf = 0LL;
  *((void *)&buf + 1) = &buf;
  uint64_t v26 = 0x3032000000LL;
  id v27 = sub_100159C58;
  uint64_t v28 = sub_100159C68;
  id v29 = 0LL;
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472LL;
  v13[2] = sub_100159C70;
  v13[3] = &unk_100247590;
  id v14 = *(id *)(a1 + 48);
  p___int128 buf = &buf;
  [v6 _performWithFlags:2 action:v13];
  id v12 = *(void **)(*((void *)&buf + 1) + 40LL);
  if (!v12)
  {

    _Block_object_dispose(&buf, 8);
LABEL_10:
    _Block_object_dispose(&v21, 8);
    objc_autoreleasePoolPop(v2);
    return;
  }

  objc_exception_throw(v12);
  __break(1u);
}

void sub_100159C08()
{
}

void sub_100159C14(uint64_t a1, int a2)
{
  if (a2)
  {
    objc_terminate();
    JUMPOUT(0x100159C20LL);
  }

  JUMPOUT(0x100159C34LL);
}

uint64_t sub_100159C3C(uint64_t result)
{
  *(_BYTE *)(*(void *)(*(void *)(result + 40) + 8LL) + 24LL) = *(_BYTE *)(*(void *)(result + 32) + 28LL);
  return result;
}

uint64_t sub_100159C58(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_100159C68(uint64_t a1)
{
}

BOOL sub_100159C70(uint64_t a1, void *a2)
{
  id v3 = a2;
  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
  BOOL v4 = *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL) == 0LL;

  return v4;
}

void sub_100159CBC(void *a1, uint64_t a2)
{
}

void sub_100159E38(uint64_t a1)
{
  uint64_t v2 = objc_autoreleasePoolPush();
  id v3 = *(void **)(a1 + 32);
  if (!v3[4])
  {
    if (!_CPLSilentLogging)
    {
      id v7 = sub_10015409C();
      uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v9 = *(void *)(a1 + 40);
        LODWORD(buf) = 138412290;
        *(void *)((char *)&buf + 4) = v9;
        _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEBUG,  "Trying to perform %@ while the database is already closed",  (uint8_t *)&buf,  0xCu);
      }
    }

    id v10 = *(void **)(a1 + 40);
    BOOL v11 = (void *)objc_claimAutoreleasedReturnValue(+[CPLErrors libraryClosedError](&OBJC_CLASS___CPLErrors, "libraryClosedError"));
    [v10 setError:v11];

    uint64_t v12 = *(void *)(a1 + 48);
    unsigned int v13 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) error]);
    (*(void (**)(uint64_t, void *))(v12 + 16))(v12, v13);

    goto LABEL_16;
  }

  *(void *)&__int128 buf = 0LL;
  *((void *)&buf + 1) = &buf;
  uint64_t v21 = 0x3032000000LL;
  int v22 = sub_100159C58;
  uint64_t v23 = sub_100159C68;
  id v24 = 0LL;
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3221225472LL;
  void v16[2] = sub_10015A0C0;
  v16[3] = &unk_1002475B8;
  id v18 = *(id *)(a1 + 56);
  p___int128 buf = &buf;
  id v17 = *(id *)(a1 + 40);
  unsigned int v4 = [v3 _performWithFlags:10 action:v16];
  uint64_t v5 = *(void **)(*((void *)&buf + 1) + 40LL);
  if (!v5)
  {
    uint64_t v6 = *(void *)(a1 + 48);
    if (v4)
    {
      (*(void (**)(void, void))(v6 + 16))(*(void *)(a1 + 48), 0LL);
    }

    else
    {
      id v14 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) error]);
      uint64_t v15 = v14;
      if (!v14) {
        uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 32) lastCPLError]);
      }
      (*(void (**)(uint64_t, void *))(v6 + 16))(v6, v15);
      if (!v14) {
    }
      }

    _Block_object_dispose(&buf, 8);
LABEL_16:
    objc_autoreleasePoolPop(v2);
    return;
  }

  objc_exception_throw(v5);
  __break(1u);
}

void sub_10015A0A0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

BOOL sub_10015A0C0(uint64_t a1, void *a2)
{
  id v3 = a2;
  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
  unsigned int v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) error]);
  if (v4) {
    BOOL v5 = 0LL;
  }
  else {
    BOOL v5 = *(void *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 40LL) == 0LL;
  }

  return v5;
}

void sub_10015A128(void *a1, uint64_t a2)
{
}

void sub_10015A21C(uint64_t a1)
{
  uint64_t v2 = -[CPLPrequeliteWriteTransactionBlocker initWithBypassQueue:blockedQueue:]( objc_alloc(&OBJC_CLASS___CPLPrequeliteWriteTransactionBlocker),  "initWithBypassQueue:blockedQueue:",  *(void *)(*(void *)(a1 + 32) + 8LL),  *(void *)(*(void *)(a1 + 32) + 16LL));
  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

uint64_t sub_10015A3AC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

id sub_10015AB5C(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) valueFromSet:a2 atIndex:0];
}

void sub_10015B198(uint64_t a1)
{
  *(_BYTE *)(*(void *)(a1 + 32) + 248LL) = 1;
  if (!_CPLSilentLogging)
  {
    id v1 = sub_10015409C();
    uint64_t v2 = (os_log_s *)objc_claimAutoreleasedReturnValue(v1);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)id v3 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEBUG,  "Client is now in sync with client cache",  v3,  2u);
    }
  }

void sub_10015B304(uint64_t a1)
{
  *(_BYTE *)(*(void *)(a1 + 32) + 248LL) = 0;
  if (!_CPLSilentLogging)
  {
    id v1 = sub_10015409C();
    uint64_t v2 = (os_log_s *)objc_claimAutoreleasedReturnValue(v1);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)id v3 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEBUG,  "Client is not in sync with client cache any more",  v3,  2u);
    }
  }

uint64_t sub_10015B41C(uint64_t result)
{
  *(_BYTE *)(*(void *)(*(void *)(result + 40) + 8LL) + 24LL) = *(_BYTE *)(*(void *)(result + 32) + 248LL);
  return result;
}

void sub_10015D0E8(void *a1)
{
  uint64_t v15 = 0LL;
  uint64_t v16 = &v15;
  uint64_t v17 = 0x2020000000LL;
  uint64_t v2 = a1[5];
  uint64_t v18 = v2;
  if (v2 > 0)
  {
    id v3 = &v18;
    do
    {
      if (v2 >= 10485760) {
        uint64_t v4 = 10485760LL;
      }
      else {
        uint64_t v4 = v2;
      }
      *id v3 = v2 - v4;
      uint64_t v5 = a1[4];
      uint64_t v6 = *(dispatch_queue_s **)(v5 + 8);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472LL;
      block[2] = sub_10015D264;
      block[3] = &unk_10023FBE8;
      void block[5] = &v15;
      void block[6] = v4;
      void block[4] = v5;
      dispatch_sync(v6, block);
      id v3 = v16 + 3;
      uint64_t v2 = v16[3];
    }

    while (v2 > 0);
  }

  uint64_t v7 = a1[4];
  uint64_t v8 = *(void **)(v7 + 8);
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472LL;
  v13[2] = sub_10015D31C;
  v13[3] = &unk_10023DC98;
  uint64_t v9 = a1[6];
  void v13[4] = v7;
  void v13[5] = v9;
  id v10 = v13;
  v19[0] = _NSConcreteStackBlock;
  v19[1] = 3221225472LL;
  v19[2] = sub_10015ECB8;
  v19[3] = &unk_10023DBC8;
  id v20 = v10;
  BOOL v11 = v8;
  dispatch_block_t v12 = dispatch_block_create(DISPATCH_BLOCK_ENFORCE_QOS_CLASS|DISPATCH_BLOCK_ASSIGN_CURRENT, v19);
  dispatch_async(v11, v12);

  _Block_object_dispose(&v15, 8);
}

void sub_10015D264(void *a1)
{
  uint64_t v1 = a1[4];
  if (*(_BYTE *)(v1 + 328))
  {
    id v3 = *(void **)(v1 + 32);
  }

  else if (!_CPLSilentLogging)
  {
    id v4 = sub_10015409C();
    uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Vacuum has been interrupted", v6, 2u);
    }
  }

id sub_10015D31C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*(void *)(v2 + 32))
  {
    id v3 = [(id)v2 _sizeInBytes];
    if ((uint64_t)v3 < *(void *)(a1 + 40) && _CPLSilentLogging == 0)
    {
      id v5 = v3;
      id v6 = sub_10015409C();
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue( +[NSByteCountFormatter stringFromByteCount:countStyle:]( &OBJC_CLASS___NSByteCountFormatter,  "stringFromByteCount:countStyle:",  *(void *)(a1 + 40) - (void)v5,  0LL));
        *(_DWORD *)__int128 buf = 138412290;
        id v19 = v8;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Reclaimed %@ after vacuum", buf, 0xCu);
      }
    }

    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue( +[CPLPrequeliteTable tableWithName:]( &OBJC_CLASS___CPLPrequeliteTable,  "tableWithName:",  @"initialQueryTracker"));
    if ([*(id *)(a1 + 32) hasTable:v9])
    {
      if (!_CPLSilentLogging)
      {
        id v10 = sub_10015409C();
        BOOL v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
        if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
        {
          dispatch_block_t v12 = (void *)objc_claimAutoreleasedReturnValue([v9 tableName]);
          *(_DWORD *)__int128 buf = 138543362;
          id v19 = v12;
          _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Dropping %{public}@", buf, 0xCu);
        }
      }

      if (([*(id *)(*(void *)(a1 + 32) + 32) cplExecute:@"DROP TABLE %@", v9] & 1) == 0
        && !_CPLSilentLogging)
      {
        id v13 = sub_10015409C();
        id v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
        if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
        {
          uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([v9 tableName]);
          uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 32) lastError]);
          *(_DWORD *)__int128 buf = 138543618;
          id v19 = v15;
          __int16 v20 = 2112;
          uint64_t v21 = v16;
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "Failed to drop %{public}@: %@", buf, 0x16u);
        }
      }
    }

    uint64_t v2 = *(void *)(a1 + 32);
  }

  *(_BYTE *)(v2 + 32_Block_object_dispose(va, 8) = 0;
  return [*(id *)(a1 + 32) _notifyVacuumDidComplete];
}

id *sub_10015D670(uint64_t a1)
{
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 336LL);
  if (!v2)
  {
    id v3 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
    uint64_t v4 = *(void *)(a1 + 32);
    id v5 = *(void **)(v4 + 336);
    *(void *)(v4 + 336) = v3;

    uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 336LL);
  }

  id v6 = objc_retainBlock(*(id *)(a1 + 40));
  [v2 addObject:v6];

  id result = *(id **)(a1 + 32);
  if (!result[4]) {
    return (id *)[result _notifyVacuumDidComplete];
  }
  if (*((_BYTE *)result + 328)) {
    return result;
  }
  uint64_t v8 = (uint64_t)[result[4] autovacuumableSpaceInBytes];
  if (v8 < 1)
  {
    id result = *(id **)(a1 + 32);
    return (id *)[result _notifyVacuumDidComplete];
  }

  uint64_t v9 = v8;
  if (!_CPLSilentLogging)
  {
    id v10 = sub_10015409C();
    BOOL v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      dispatch_block_t v12 = (void *)objc_claimAutoreleasedReturnValue( +[NSByteCountFormatter stringFromByteCount:countStyle:]( &OBJC_CLASS___NSByteCountFormatter,  "stringFromByteCount:countStyle:",  v9,  0LL));
      int v13 = 138412290;
      id v14 = v12;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "Starting vacuum for %@",  (uint8_t *)&v13,  0xCu);
    }
  }

  *(_BYTE *)(*(void *)(a1 + 32) + 328LL) = 1;
  return (id *)objc_msgSend( *(id *)(a1 + 32),  "_vacuum:withInitialDatabaseSize:",  v9,  objc_msgSend(*(id *)(a1 + 32), "_sizeInBytes"));
}

uint64_t sub_10015D8F4(uint64_t result)
{
  *(_BYTE *)(*(void *)(result + 32) + 328LL) = 0;
  return result;
}

void sub_10015DB44(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
  {
    objc_begin_catch(exception_object);
    os_unfair_lock_unlock(v2);
    objc_exception_rethrow();
    __break(1u);
    JUMPOUT(0x10015DB64LL);
  }

  _Unwind_Resume(exception_object);
}

uint64_t sub_10015DB90(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 32);
  if (*(_BYTE *)(v1 + 28)) {
    *(_BYTE *)(*(void *)(*(void *)(result + 40) + 8LL) + 24LL) = 0;
  }
  else {
    *(_BYTE *)(v1 + 2_Block_object_dispose(va, 8) = 1;
  }
  return result;
}

uint64_t sub_10015DBC0(uint64_t result)
{
  if (!*(_BYTE *)(*(void *)(*(void *)(result + 40) + 8LL) + 24LL))
  {
    uint64_t v4 = result;
    if (!_CPLSilentLogging)
    {
      id v1 = sub_10015409C();
      uint64_t v2 = (os_log_s *)objc_claimAutoreleasedReturnValue(v1);
      if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
      {
        uint64_t v3 = *(void *)(v4 + 32);
        *(_DWORD *)__int128 buf = 138412290;
        uint64_t v6 = v3;
        _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_ERROR,  "Emergency close of %@ timed out. Exiting now",  buf,  0xCu);
      }
    }

    exit(0);
  }

  return result;
}

void sub_10015DC90(uint64_t a1)
{
  if (!_CPLSilentLogging)
  {
    id v2 = sub_10015409C();
    uint64_t v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v4 = *(void *)(a1 + 32);
      *(_DWORD *)__int128 buf = 138412290;
      uint64_t v8 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Suspending queue for %@", buf, 0xCu);
    }
  }

  dispatch_suspend(*(dispatch_object_t *)(*(void *)(a1 + 32) + 8LL));
  dispatch_suspend(*(dispatch_object_t *)(*(void *)(a1 + 32) + 16LL));
  [*(id *)(a1 + 32) closeWithError:0];
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_10015DDB4;
  block[3] = &unk_10023DD30;
  id v5 = *(dispatch_queue_s **)(a1 + 40);
  void block[4] = *(void *)(a1 + 48);
  dispatch_sync(v5, block);
}

uint64_t sub_10015DDB4(uint64_t result)
{
  *(_BYTE *)(*(void *)(*(void *)(result + 32) + 8LL) + 24LL) = 1;
  return result;
}

void sub_10015DE88(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  v9[0] = @"date";
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
  v9[1] = @"comment";
  v10[0] = v3;
  v10[1] = @"manually marked as corrupted";
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v10,  v9,  2LL));
  [v2 _markLibraryAsCorruptedWithInfo:v4];

  id v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](&OBJC_CLASS___NSNotificationCenter, "defaultCenter"));
  uint64_t v6 = CPLLibraryMustBeWipedNotificationName;
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) abstractObject]);
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v7 engineLibrary]);
  [v5 postNotificationName:v6 object:v8];
}

void sub_10015E978(uint64_t a1)
{
  if (!_CPLSilentLogging)
  {
    id v2 = sub_10015409C();
    uint64_t v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)uint64_t v4 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "Unblocking write queue", v4, 2u);
    }
  }

  dispatch_resume(*(dispatch_object_t *)(a1 + 32));
}

void sub_10015EBC8(id a1)
{
  id v1 = (const char *)_CPLOSLogSubsystem(a1);
  os_log_t v2 = os_log_create(v1, "engine.store.pql");
  uint64_t v3 = (void *)qword_1002A3A98;
  qword_1002A3A98 = (uint64_t)v2;
}

void sub_10015EBF4(id a1)
{
  id v1 = (const char *)_CPLOSLogSubsystem(a1);
  os_log_t v2 = os_log_create(v1, "engine.store.pql.statistics");
  uint64_t v3 = (void *)qword_1002A3AA8;
  qword_1002A3AA8 = (uint64_t)v2;
}

void sub_10015EC20(id a1)
{
  v3[0] = @"wiping database because the current version is really too old";
  v3[1] = @"wiping database because the current version is too new";
  v4[0] = @"Local Synchronization state is really too old and needs to be wiped and rebuilt";
  v4[1] = @"Framework version has been downgraded and the local Synchronization state needs to be rebuilt from scratch to match what's on the server";
  uint64_t v1 = objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v4,  v3,  2LL));
  os_log_t v2 = (void *)qword_1002A3AB0;
  qword_1002A3AB0 = v1;
}

void sub_10015ECB8(uint64_t a1)
{
  os_log_t v2 = objc_autoreleasePoolPush();
  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
  objc_autoreleasePoolPop(v2);
}

void sub_10015ECEC()
{
}

void sub_10015ECF4(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *(void *)(a2 + 8);
  uint64_t v3 = *(void **)(v2 + 40);
  *(void *)(v2 + 40) = a1;
}

id sub_10015EFF8()
{
  if (qword_1002A3AC0 != -1) {
    dispatch_once(&qword_1002A3AC0, &stru_100247710);
  }
  return (id)qword_1002A3AC8;
}

void sub_1001601EC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

uint64_t sub_100160204(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_100160214(uint64_t a1)
{
}

void sub_10016021C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 1)
  {
    uint64_t v6 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
    id v7 = [*(id *)(a1 + 32) countOfOriginalImages];
    if (v7)
    {
      uint64_t v8 = -[NSString initWithFormat:](objc_alloc(&OBJC_CLASS___NSString), "initWithFormat:", @"%lu images", v7);
      -[NSMutableArray addObject:](v6, "addObject:", v8);
    }

    id v9 = [*(id *)(a1 + 32) countOfOriginalVideos];
    if (v9)
    {
      id v10 = -[NSString initWithFormat:](objc_alloc(&OBJC_CLASS___NSString), "initWithFormat:", @"%lu videos", v9);
      -[NSMutableArray addObject:](v6, "addObject:", v10);
    }

    id v11 = [*(id *)(a1 + 32) countOfOriginalOthers];
    if (v11)
    {
      dispatch_block_t v12 = -[NSString initWithFormat:](objc_alloc(&OBJC_CLASS___NSString), "initWithFormat:", @"%lu others", v11);
      -[NSMutableArray addObject:](v6, "addObject:", v12);
    }

    if (-[NSMutableArray count](v6, "count"))
    {
      int v13 = objc_alloc(&OBJC_CLASS___NSString);
      id v14 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableArray componentsJoinedByString:](v6, "componentsJoinedByString:", @", "));
      uint64_t v15 = -[NSString initWithFormat:](v13, "initWithFormat:", @" (%@)", v14);
    }

    else
    {
      uint64_t v15 = &stru_1002482B0;
    }
  }

  else
  {
    uint64_t v15 = &stru_1002482B0;
  }

  uint64_t v16 = *(void **)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL);
  if (v16)
  {
    uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue( +[CPLResource shortDescriptionForResourceType:]( &OBJC_CLASS___CPLResource,  "shortDescriptionForResourceType:",  a2));
    [v16 appendFormat:@"\n\t%@: %ld%@", v17, a3, v15];
  }

  else
  {
    v24.receiver = *(id *)(a1 + 32);
    v24.super_class = (Class)&OBJC_CLASS___CPLPrequeliteOutgoingResources;
    id v18 = objc_msgSendSuper2(&v24, "status");
    id v19 = (void *)objc_claimAutoreleasedReturnValue(v18);
    __int16 v20 = (void *)objc_claimAutoreleasedReturnValue( +[CPLResource shortDescriptionForResourceType:]( &OBJC_CLASS___CPLResource,  "shortDescriptionForResourceType:",  a2));
    uint64_t v21 = objc_claimAutoreleasedReturnValue( +[NSMutableString stringWithFormat:]( &OBJC_CLASS___NSMutableString,  "stringWithFormat:",  @"%@\n\t%@: %ld%@",  v19,  v20,  a3,  v15));
    uint64_t v22 = *(void *)(*(void *)(a1 + 40) + 8LL);
    uint64_t v23 = *(void **)(v22 + 40);
    *(void *)(v22 + 40) = v21;
  }
}

NSString *__cdecl sub_1001604A4(id a1, NSNumber *a2)
{
  return (NSString *)+[CPLResource shortDescriptionForResourceType:]( &OBJC_CLASS___CPLResource,  "shortDescriptionForResourceType:",  -[NSNumber unsignedIntegerValue](a2, "unsignedIntegerValue"));
}

void sub_1001607A8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
}

void sub_1001607DC(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  uint64_t v6 = *(void **)(a1 + 32);
  id v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) mainTable]);
  *(_BYTE *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = [v6 cplExecute:@"DELETE FROM %@ WHERE rowID = %ld", v7, a2];

  if (!*(_BYTE *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL)) {
    *a3 = 1;
  }
}

void sub_100160864(id a1)
{
  uint64_t v1 = (const char *)_CPLOSLogSubsystem(a1);
  os_log_t v2 = os_log_create(v1, "engine.outgoingResources.pql");
  uint64_t v3 = (void *)qword_1002A3AC8;
  qword_1002A3AC8 = (uint64_t)v2;
}

id sub_1001615D8()
{
  if (qword_1002A3AD0 != -1) {
    dispatch_once(&qword_1002A3AD0, &stru_100247958);
  }
  return (id)qword_1002A3AD8;
}

id sub_100161730(uint64_t a1, void *a2)
{
  id v3 = a2;
  **(_BYTE **)(a1 + 32) = [v3 intAtIndex:1] == 0;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 stringAtIndex:0]);

  return v4;
}

id sub_100162CA8(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [v3 integerAtIndex:1];
  id v5 = v4;
  if (*(_BYTE *)(a1 + 56)) {
    BOOL v6 = 0;
  }
  else {
    BOOL v6 = v4 == 0LL;
  }
  if (v6)
  {
    dispatch_block_t v12 = (void *)objc_claimAutoreleasedReturnValue([v3 cplChangeAtIndex:2]);
    if (v12)
    {
      uint64_t v8 = v12;
      [v12 setScopedIdentifier:*(void *)(a1 + 32)];
      int v13 = (void *)objc_claimAutoreleasedReturnValue([v3 stringAtIndex:7]);
      [v8 setRelatedIdentifier:v13];

      id v10 = (void *)objc_claimAutoreleasedReturnValue([v3 stringAtIndex:8]);
      [v8 setSecondaryIdentifier:v10];
      uint64_t v11 = 9LL;
      goto LABEL_9;
    }

id sub_100162F90(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [v3 integerAtIndex:1];
  id v5 = *(_BYTE **)(a1 + 48);
  if (!v4)
  {
    *id v5 = 1;
    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v3 cplChangeAtIndex:2]);
    if (v11)
    {
      id v7 = v11;
      [v11 setScopedIdentifier:*(void *)(a1 + 32)];
      **(_BYTE **)(a1 + 56) = 1;
      dispatch_block_t v12 = (void *)objc_claimAutoreleasedReturnValue([v3 stringAtIndex:7]);
      [v7 setRelatedIdentifier:v12];

      id v9 = (void *)objc_claimAutoreleasedReturnValue([v3 stringAtIndex:8]);
      [v7 setSecondaryIdentifier:v9];
      uint64_t v10 = 9LL;
      goto LABEL_6;
    }

id sub_1001633B4(uint64_t a1, void *a2)
{
  id v3 = a2;
  unsigned int v4 = *(unsigned __int8 *)(a1 + 72) | [v3 intAtIndex:1];
  BOOL v5 = v4 != 0;
  if (v4) {
    uint64_t v6 = 3LL;
  }
  else {
    uint64_t v6 = 2LL;
  }
  uint64_t v7 = objc_claimAutoreleasedReturnValue([v3 cplChangeAtIndex:v6]);
  uint64_t v8 = (void *)v7;
  uint64_t v9 = *(void *)(a1 + 56);
  if (v9 && (objc_opt_isKindOfClass(v7, v9) & 1) == 0)
  {
  }

  else if (v8)
  {
    if (v5) {
      uint64_t v10 = 4LL;
    }
    else {
      uint64_t v10 = 7LL;
    }
    uint64_t v11 = objc_claimAutoreleasedReturnValue([v3 stringAtIndex:v10]);
    dispatch_block_t v12 = (void *)v11;
    uint64_t v13 = *(void *)(a1 + 32);
    if (v11) {
      BOOL v14 = v13 == 0;
    }
    else {
      BOOL v14 = 1;
    }
    if (v14)
    {
      if (!(v11 | v13))
      {
LABEL_20:
        unsigned __int8 v15 = (void *)objc_claimAutoreleasedReturnValue([v3 stringAtIndex:0]);
        uint64_t v16 = -[CPLScopedIdentifier initWithScopeIdentifier:identifier:]( objc_alloc(&OBJC_CLASS___CPLScopedIdentifier),  "initWithScopeIdentifier:identifier:",  *(void *)(a1 + 40),  v15);
        -[CPLScopedIdentifier setScopeIndex:](v16, "setScopeIndex:", *(void *)(a1 + 64));
        [v8 setScopedIdentifier:v16];
        [v8 setRelatedIdentifier:v12];
        if (v5) {
          uint64_t v17 = 5LL;
        }
        else {
          uint64_t v17 = 8LL;
        }
        if (v5) {
          uint64_t v18 = 6LL;
        }
        else {
          uint64_t v18 = 9LL;
        }
        id v19 = (void *)objc_claimAutoreleasedReturnValue([v3 stringAtIndex:v17]);
        [v8 setSecondaryIdentifier:v19];

        objc_msgSend( *(id *)(a1 + 48),  "_updateOtherScopeIdentifierInRecord:otherScopeIndex:",  v8,  objc_msgSend(v3, "integerAtIndex:", v18));
        [v8 awakeFromStorage];

        goto LABEL_27;
      }
    }

    else if (objc_msgSend((id)v11, "isEqual:"))
    {
      goto LABEL_20;
    }

    unsigned __int8 v15 = v8;
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSNull null](&OBJC_CLASS___NSNull, "null"));
LABEL_27:

    goto LABEL_28;
  }

  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSNull null](&OBJC_CLASS___NSNull, "null"));
LABEL_28:

  return v8;
}

id sub_10016373C(id a1, PQLResultSet *a2, id *a3)
{
  id v3 = a2;
  unsigned int v4 = (void *)objc_claimAutoreleasedReturnValue(-[PQLResultSet stringAtIndex:](v3, "stringAtIndex:", 1LL));
  if (!v4)
  {
    unsigned int v4 = (void *)objc_claimAutoreleasedReturnValue(-[PQLResultSet stringAtIndex:](v3, "stringAtIndex:", 0LL));
    if (!v4) {
      unsigned int v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSNull null](&OBJC_CLASS___NSNull, "null"));
    }
  }

  return v4;
}

id sub_100163B48(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ([v3 integerAtIndex:5] == *(id *)(a1 + 48)
    && (unsigned int v4 = (void *)objc_claimAutoreleasedReturnValue([v3 cplChangeAtIndex:1])) != 0)
  {
    BOOL v5 = v4;
    [v4 setScopedIdentifier:*(void *)(a1 + 32)];
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v3 stringAtIndex:2]);
    [v5 setRelatedIdentifier:v6];

    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v3 stringAtIndex:3]);
    [v5 setSecondaryIdentifier:v7];

    [v5 awakeFromStorage];
    objc_msgSend( *(id *)(a1 + 40),  "_updateOtherScopeIdentifierInRecord:otherScopeIndex:",  v5,  objc_msgSend(v3, "integerAtIndex:", 4));
  }

  else
  {
    BOOL v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSNull null](&OBJC_CLASS___NSNull, "null"));
  }

  return v5;
}

id sub_100163FDC(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = objc_claimAutoreleasedReturnValue([v3 cplChangeAtIndex:1]);
  BOOL v5 = (void *)v4;
  uint64_t v6 = *(void *)(a1 + 56);
  if (v6 && (objc_opt_isKindOfClass(v4, v6) & 1) == 0)
  {

    goto LABEL_7;
  }

  if (!v5)
  {
LABEL_7:
    BOOL v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSNull null](&OBJC_CLASS___NSNull, "null"));
    goto LABEL_8;
  }

  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v3 stringAtIndex:0]);
  uint64_t v8 = -[CPLScopedIdentifier initWithScopeIdentifier:identifier:]( objc_alloc(&OBJC_CLASS___CPLScopedIdentifier),  "initWithScopeIdentifier:identifier:",  *(void *)(a1 + 32),  v7);
  -[CPLScopedIdentifier setScopeIndex:](v8, "setScopeIndex:", *(void *)(a1 + 64));
  [v5 setScopedIdentifier:v8];
  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v3 stringAtIndex:2]);
  [v5 setRelatedIdentifier:v9];

  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v3 stringAtIndex:3]);
  [v5 setSecondaryIdentifier:v10];

  [v5 awakeFromStorage];
  objc_msgSend( *(id *)(a1 + 40),  "_updateOtherScopeIdentifierInRecord:otherScopeIndex:",  v5,  objc_msgSend(v3, "integerAtIndex:", 4));

LABEL_8:
  return v5;
}

id sub_100164EDC(uint64_t a1, void *a2)
{
  id v3 = a2;
  BOOL v4 = (*(unsigned __int8 *)(a1 + 40) | [v3 intAtIndex:1]) == 0;
  BOOL v5 = v4;
  if (v4) {
    uint64_t v6 = 2LL;
  }
  else {
    uint64_t v6 = 3LL;
  }
  uint64_t v7 = objc_claimAutoreleasedReturnValue([v3 cplChangeAtIndex:v6]);
  if (v7)
  {
    uint64_t v8 = (void *)v7;
    uint64_t v9 = *(void **)(a1 + 32);
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v3 stringAtIndex:0]);
    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue( objc_msgSend( v9,  "scopedIdentifierForCloudIdentifier:scopeIndex:",  v10,  objc_msgSend(v3, "integerAtIndex:", 10)));

    if (v11)
    {
      [v8 setScopedIdentifier:v11];
      if (v5) {
        uint64_t v12 = 7LL;
      }
      else {
        uint64_t v12 = 4LL;
      }
      if (v5) {
        uint64_t v13 = 8LL;
      }
      else {
        uint64_t v13 = 5LL;
      }
      if (v5) {
        uint64_t v14 = 9LL;
      }
      else {
        uint64_t v14 = 6LL;
      }
      unsigned __int8 v15 = (void *)objc_claimAutoreleasedReturnValue([v3 stringAtIndex:v12]);
      [v8 setRelatedIdentifier:v15];

      uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue([v3 stringAtIndex:v13]);
      [v8 setSecondaryIdentifier:v16];

      objc_msgSend( *(id *)(a1 + 32),  "_updateOtherScopeIdentifierInRecord:otherScopeIndex:",  v8,  objc_msgSend(v3, "integerAtIndex:", v14));
      [v8 awakeFromStorage];
    }

    else
    {
      uint64_t v17 = objc_claimAutoreleasedReturnValue(+[NSNull null](&OBJC_CLASS___NSNull, "null"));

      uint64_t v8 = (void *)v17;
    }
  }

  else
  {
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSNull null](&OBJC_CLASS___NSNull, "null"));
  }

  return v8;
}

id sub_100165214(uint64_t a1, void *a2)
{
  id v3 = a2;
  BOOL v4 = (*(unsigned __int8 *)(a1 + 40) | [v3 intAtIndex:1]) == 0;
  BOOL v5 = v4;
  if (v4) {
    uint64_t v6 = 2LL;
  }
  else {
    uint64_t v6 = 3LL;
  }
  uint64_t v7 = objc_claimAutoreleasedReturnValue([v3 cplChangeAtIndex:v6]);
  if (v7)
  {
    uint64_t v8 = (void *)v7;
    uint64_t v9 = *(void **)(a1 + 32);
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v3 stringAtIndex:0]);
    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue( objc_msgSend( v9,  "scopedIdentifierForCloudIdentifier:scopeIndex:",  v10,  objc_msgSend(v3, "integerAtIndex:", 10)));

    if (v11)
    {
      [v8 setScopedIdentifier:v11];
      if (v5) {
        uint64_t v12 = 7LL;
      }
      else {
        uint64_t v12 = 4LL;
      }
      if (v5) {
        uint64_t v13 = 8LL;
      }
      else {
        uint64_t v13 = 5LL;
      }
      if (v5) {
        uint64_t v14 = 9LL;
      }
      else {
        uint64_t v14 = 6LL;
      }
      unsigned __int8 v15 = (void *)objc_claimAutoreleasedReturnValue([v3 stringAtIndex:v12]);
      [v8 setRelatedIdentifier:v15];

      uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue([v3 stringAtIndex:v13]);
      [v8 setSecondaryIdentifier:v16];

      objc_msgSend( *(id *)(a1 + 32),  "_updateOtherScopeIdentifierInRecord:otherScopeIndex:",  v8,  objc_msgSend(v3, "integerAtIndex:", v14));
      [v8 awakeFromStorage];
    }

    else
    {
      uint64_t v17 = objc_claimAutoreleasedReturnValue(+[NSNull null](&OBJC_CLASS___NSNull, "null"));

      uint64_t v8 = (void *)v17;
    }
  }

  else
  {
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSNull null](&OBJC_CLASS___NSNull, "null"));
  }

  return v8;
}

void sub_100165604( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_10016561C(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  if (!v5
    || (v8 = v5, uint64_t v6 = (uint64_t)[v5 integerValue], v5 = v8, v6 < 1)
    || (uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "scopeWithLocalScopeIndex:")),
        v7,
        id v5 = v8,
        !v7))
  {
    *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) += a3;
  }
}

void sub_10016580C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

uint64_t sub_100165828(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_100165838(uint64_t a1)
{
}

void sub_100165840(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  if (v5) {
    uint64_t v6 = v5;
  }
  else {
    uint64_t v6 = @"(nil)";
  }
  uint64_t v7 = (__CFString *)v6;
  [*(id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) appendFormat:@"\n\t%@: %ld", v6, a3];
}

void sub_1001659D4(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  if (!v5) {
    id v5 = @"(nil)";
  }
  id v8 = (__CFString *)v5;
  uint64_t v6 = *(void **)(a1 + 32);
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInteger:", a3));
  [v6 setObject:v7 forKey:v8];
}

NSString *__cdecl sub_100165BD8(id a1, NSString *a2)
{
  return a2;
}

id sub_100165CA8(id a1, PQLResultSet *a2, id *a3)
{
  id v3 = a2;
  BOOL v4 = (void *)objc_claimAutoreleasedReturnValue(-[PQLResultSet stringAtIndex:](v3, "stringAtIndex:", 1LL));
  if (!v4)
  {
    BOOL v4 = (void *)objc_claimAutoreleasedReturnValue(-[PQLResultSet stringAtIndex:](v3, "stringAtIndex:", 0LL));
    if (!v4) {
      BOOL v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSNull null](&OBJC_CLASS___NSNull, "null"));
    }
  }

  return v4;
}

void sub_1001661FC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, char a26)
{
}

void sub_100166224(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  *(_BYTE *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = [*(id *)(a1 + 32) cplExecute:@"UPDATE %@ SET otherScopeIndex = 0, stagedOtherScopeIndex = 0 WHERE rowID = %lu", *(void *)(a1 + 40), a2];
  if (!*(_BYTE *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL))
  {
    uint64_t v5 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) lastError]);
    uint64_t v6 = *(void *)(*(void *)(a1 + 56) + 8LL);
    uint64_t v7 = *(void **)(v6 + 40);
    *(void *)(v6 + 40) = v5;

    *a3 = 1;
  }

void sub_1001662BC(id a1)
{
  uint64_t v1 = (const char *)_CPLOSLogSubsystem(a1);
  os_log_t v2 = os_log_create(v1, "engine.cloudcache.pql");
  id v3 = (void *)qword_1002A3AD8;
  qword_1002A3AD8 = (uint64_t)v2;
}

void sub_10016635C(uint64_t a1)
{
  id v1 = [objc_alloc(*(Class *)(a1 + 32)) initWithTypeName:"INTEGER" defaultValue:&off_10025A458 objcClass:objc_opt_class(NSNumber)];
  os_log_t v2 = (void *)qword_1002A3AE0;
  qword_1002A3AE0 = (uint64_t)v1;
}

void sub_100166428(uint64_t a1)
{
  id v1 = [objc_alloc(*(Class *)(a1 + 32)) initWithTypeName:"DATA" defaultValue:0 objcClass:objc_opt_class(NSData)];
  os_log_t v2 = (void *)qword_1002A3AF0;
  qword_1002A3AF0 = (uint64_t)v1;
}

void sub_1001664F0(uint64_t a1)
{
  id v1 = [objc_alloc(*(Class *)(a1 + 32)) initWithTypeName:"TEXT" defaultValue:0 objcClass:objc_opt_class(NSString)];
  os_log_t v2 = (void *)qword_1002A3B00;
  qword_1002A3B00 = (uint64_t)v1;
}

void sub_100166584(id a1)
{
  id v1 = objc_alloc_init(&OBJC_CLASS____CPLPrequeliteDateType);
  os_log_t v2 = (void *)qword_1002A3B10;
  qword_1002A3B10 = (uint64_t)v1;
}

uint64_t sub_100168B34(sqlite3_context *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (uint64_t (**)(void *, sqlite3_context *, uint64_t, uint64_t))sqlite3_user_data(a1);
  return v6[2](v6, a1, a2, a3);
}

void sub_100168B90(id a1, sqlite3_context *a2, int a3, sqlite3_value **a4)
{
  if (sqlite3_value_type(*a4) == 1)
  {
    sqlite3_int64 v6 = sqlite3_value_int64(*a4);
    uint64_t v7 = pql_sqlite3_value_object(a4[1]);
    id v8 = (id)objc_claimAutoreleasedReturnValue(v7);
    sqlite3_result_int(a2, (int)[v8 containsIndex:v6]);
  }

  else
  {
    sqlite3_result_int(a2, 0);
  }

uint64_t sub_100169154()
{
  return objc_opt_class(v0);
}

CPLScopedIdentifier *sub_100169704(uint64_t a1, void *a2)
{
  id v3 = a2;
  BOOL v4 = (void *)objc_claimAutoreleasedReturnValue([v3 stringAtIndex:0]);
  unsigned int v5 = [v3 intAtIndex:1];

  **(_BYTE **)(a1 + 40) = v5 == 1;
  sqlite3_int64 v6 = objc_alloc(&OBJC_CLASS___CPLScopedIdentifier);
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) scopeIdentifier]);
  id v8 = -[CPLScopedIdentifier initWithScopeIdentifier:identifier:](v6, "initWithScopeIdentifier:identifier:", v7, v4);

  return v8;
}

CPLScopedIdentifier *sub_100169944(uint64_t a1, void *a2)
{
  id v3 = a2;
  BOOL v4 = (void *)objc_claimAutoreleasedReturnValue([v3 stringAtIndex:0]);
  unsigned int v5 = [v3 intAtIndex:1];

  **(_BYTE **)(a1 + 40) = v5 == 1;
  sqlite3_int64 v6 = objc_alloc(&OBJC_CLASS___CPLScopedIdentifier);
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) scopeIdentifier]);
  id v8 = -[CPLScopedIdentifier initWithScopeIdentifier:identifier:](v6, "initWithScopeIdentifier:identifier:", v7, v4);

  return v8;
}

id sub_100169EB0()
{
  if (qword_1002A3B28 != -1) {
    dispatch_once(&qword_1002A3B28, &stru_1002479E0);
  }
  return (id)qword_1002A3B30;
}

void sub_10016ACC0(id a1)
{
  id v1 = (const char *)_CPLOSLogSubsystem(a1);
  os_log_t v2 = os_log_create(v1, "engine.idmapping.pql");
  id v3 = (void *)qword_1002A3B30;
  qword_1002A3B30 = (uint64_t)v2;
}

id sub_10016AF58()
{
  if (qword_1002A3B38 != -1) {
    dispatch_once(&qword_1002A3B38, &stru_100247A48);
  }
  return (id)qword_1002A3B40;
}

id sub_10016CCF0(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = -[CPLPrequeliteDownloadResource initFromPQLResultSet:error:]( objc_alloc(&OBJC_CLASS___CPLPrequeliteDownloadResource),  "initFromPQLResultSet:error:",  v3,  0LL);

  unsigned int v5 = (void *)objc_claimAutoreleasedReturnValue([v4 resourceWithDownloadQueue:*(void *)(a1 + 32)]);
  sqlite3_int64 v6 = v5;
  if (v5) {
    id v7 = v5;
  }
  else {
    id v7 = (id)objc_claimAutoreleasedReturnValue(+[NSNull null](&OBJC_CLASS___NSNull, "null"));
  }
  id v8 = v7;

  return v8;
}

void sub_10016D084(_Unwind_Exception *a1)
{
}

uint64_t sub_10016D0B8(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_10016D0C8(uint64_t a1)
{
}

void sub_10016D0D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5 = *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
  sqlite3_int64 v6 = *(void **)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL);
  uint64_t v7 = objc_claimAutoreleasedReturnValue( +[CPLResource shortDescriptionForResourceType:]( &OBJC_CLASS___CPLResource,  "shortDescriptionForResourceType:",  a2));
  id v8 = (id)v7;
  if (v5)
  {
    [v6 appendFormat:@":\n\t%@: %ld", v7, a3];

    *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = 0;
  }

  else
  {
    [v6 appendFormat:@"\n\t%@: %ld", v7, a3];
  }

NSString *__cdecl sub_10016D1CC(id a1, NSNumber *a2)
{
  return (NSString *)+[CPLResource shortDescriptionForResourceType:]( &OBJC_CLASS___CPLResource,  "shortDescriptionForResourceType:",  -[NSNumber unsignedIntegerValue](a2, "unsignedIntegerValue"));
}

void sub_10016D308(id a1)
{
  uint64_t v1 = (const char *)_CPLOSLogSubsystem(a1);
  os_log_t v2 = os_log_create(v1, "engine.downloadQueue.pql");
  id v3 = (void *)qword_1002A3B40;
  qword_1002A3B40 = (uint64_t)v2;
}

id sub_10016DE90()
{
  if (qword_1002A3B48 != -1) {
    dispatch_once(&qword_1002A3B48, &stru_100247AF8);
  }
  return (id)qword_1002A3B50;
}

id sub_10016E358(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (objc_msgSend(*(id *)(a1 + 32), "isLocalScopeIndexValid:", objc_msgSend(v3, "integerAtIndex:", 0)))
  {
    id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 cplChangeAtIndex:1]);
    [v4 setScopeIndex:0];
  }

  else
  {
    id v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSNull null](&OBJC_CLASS___NSNull, "null"));
  }

  return v4;
}

id sub_10016E4E8(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (objc_msgSend(*(id *)(a1 + 32), "isLocalScopeIndexValid:", objc_msgSend(v3, "integerAtIndex:", 0)))
  {
    id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 cplChangeAtIndex:1]);
    [v4 setScopeIndex:0];
  }

  else
  {
    id v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSNull null](&OBJC_CLASS___NSNull, "null"));
  }

  return v4;
}

id sub_10016E69C(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (objc_msgSend(*(id *)(a1 + 32), "isLocalScopeIndexValid:", objc_msgSend(v3, "integerAtIndex:", 0)))
  {
    id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 cplChangeAtIndex:1]);
    [v4 setScopeIndex:0];
  }

  else
  {
    id v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSNull null](&OBJC_CLASS___NSNull, "null"));
  }

  return v4;
}

id sub_10016E7FC(id a1, PQLResultSet *a2, id *a3)
{
  id v3 = (void *)objc_claimAutoreleasedReturnValue(-[PQLResultSet cplChangeAtIndex:](a2, "cplChangeAtIndex:", 0LL));
  [v3 setScopeIndex:0];
  return v3;
}

id sub_10016EB0C(id a1, PQLResultSet *a2, id *a3)
{
  id v3 = (void *)objc_claimAutoreleasedReturnValue(-[PQLResultSet cplChangeAtIndex:](a2, "cplChangeAtIndex:", 0LL));
  [v3 setScopeIndex:0];
  return v3;
}

id sub_10016F040(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ([v3 integerAtIndex:2] == (id)1
    || !objc_msgSend( *(id *)(a1 + 32),  "isLocalScopeIndexValid:",  objc_msgSend(v3, "integerAtIndex:", 0)))
  {
    id v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSNull null](&OBJC_CLASS___NSNull, "null"));
  }

  else
  {
    id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 cplChangeAtIndex:1]);
    [v4 setScopeIndex:0];
  }

  return v4;
}

id sub_10016F21C(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (objc_msgSend(*(id *)(a1 + 32), "isLocalScopeIndexValid:", objc_msgSend(v3, "integerAtIndex:", 0)))
  {
    id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 cplChangeAtIndex:1]);
    [v4 setScopeIndex:0];
  }

  else
  {
    id v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSNull null](&OBJC_CLASS___NSNull, "null"));
  }

  return v4;
}

id sub_10016F4A8(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (objc_msgSend(*(id *)(a1 + 32), "isLocalScopeIndexValid:", objc_msgSend(v3, "integerAtIndex:", 0)))
  {
    id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 cplChangeAtIndex:1]);
    if ((objc_opt_isKindOfClass(v4, *(void *)(a1 + 40)) & 1) != 0)
    {
      [v4 setScopeIndex:0];
      id v5 = v4;
    }

    else
    {
      id v5 = (id)objc_claimAutoreleasedReturnValue(+[NSNull null](&OBJC_CLASS___NSNull, "null"));
    }

    sqlite3_int64 v6 = v5;
  }

  else
  {
    sqlite3_int64 v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSNull null](&OBJC_CLASS___NSNull, "null"));
  }

  return v6;
}

void sub_1001704AC(id a1)
{
  uint64_t v1 = (const char *)_CPLOSLogSubsystem(a1);
  os_log_t v2 = os_log_create(v1, "engine.transientrepository.pql");
  id v3 = (void *)qword_1002A3B50;
  qword_1002A3B50 = (uint64_t)v2;
}

NSString *sub_100170548(void *a1)
{
  id v1 = a1;
  os_log_t v2 = -[NSString initWithFormat:]( objc_alloc(&OBJC_CLASS___NSString),  "initWithFormat:",  @"CPLPreventWipeUntil-%@",  v1);

  return v2;
}

id sub_1001713AC()
{
  if (qword_1002A3B58 != -1) {
    dispatch_once(&qword_1002A3B58, &stru_100247B18);
  }
  return (id)qword_1002A3B60;
}

uint64_t sub_1001716A8(uint64_t result, unint64_t a2, uint64_t a3)
{
  if (result)
  {
    uint64_t v5 = result;
    id result = sub_100172298(result, (uint64_t)[(id)result totalResourceSize] + a2, a3);
    if ((_DWORD)result)
    {
      if ((unint64_t)+[CPLResource largeResourceSizeThreshold]( &OBJC_CLASS___CPLResource,  "largeResourceSizeThreshold") >= a2) {
        return 1LL;
      }
      else {
        return sub_100172058(v5, a2, a3);
      }
    }
  }

  return result;
}

char *sub_100171724(char *result, uint64_t a2, uint64_t a3)
{
  if (result)
  {
    id v4 = result;
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( NSNumber,  "numberWithUnsignedLongLong:",  (char *)[result totalOriginalResourceSize] + a2));
    id v6 = [v4 setValue:v5 forVariable:*(void *)(v4 + 44) error:a3];

    return (char *)v6;
  }

  return result;
}

uint64_t sub_10017191C(uint64_t a1, unint64_t a2, uint64_t a3)
{
  if (!a1) {
    return 0LL;
  }
  unint64_t v6 = (unint64_t)[(id)a1 totalResourceSize];
  unint64_t v7 = v6 - a2;
  if (v6 < a2)
  {
    if (!_CPLSilentLogging)
    {
      id v8 = sub_1001713AC();
      uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
        int v24 = 134218240;
        unint64_t v25 = a2;
        __int16 v26 = 2048;
        unint64_t v27 = v6;
        _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_ERROR,  "Total resource size inconsistency (removing %llu from %llu)",  (uint8_t *)&v24,  0x16u);
      }
    }

    unint64_t v7 = 0LL;
  }

  if (v6 >> 24 >= 0x19 && v7 >> 24 <= 0x18)
  {
    if (!_CPLSilentLogging)
    {
      id v10 = sub_1001713AC();
      uint64_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v12 = NSLocalizedFileSizeDescription(419430400LL, 0LL, 287834112LL);
        uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue(v12);
        uint64_t v14 = NSLocalizedFileSizeDescription(v7, 0LL, 287834112LL);
        unsigned __int8 v15 = (void *)objc_claimAutoreleasedReturnValue(v14);
        int v24 = 138412546;
        unint64_t v25 = (unint64_t)v13;
        __int16 v26 = 2112;
        unint64_t v27 = (unint64_t)v15;
        _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "Resource storage went under %@ (%@)",  (uint8_t *)&v24,  0x16u);
      }
    }

    uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue([(id)a1 abstractObject]);
    uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue([v16 engineStore]);
    uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue([v17 engineLibrary]);
    [v18 requestAttachedLibrary];
  }

  if ((unint64_t)+[CPLResource largeResourceSizeThreshold]( &OBJC_CLASS___CPLResource,  "largeResourceSizeThreshold") >= a2) {
    return 1LL;
  }
  id v19 = (void *)objc_claimAutoreleasedReturnValue([(id)a1 valueForVariable:*(void *)(a1 + 52)]);
  if (v19
    && (__int16 v20 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( NSNumber,  "numberWithUnsignedLongLong:",  a2)),  v21 = [v19 compare:v20],  v20,  v21 != (id)1))
  {
    uint64_t v22 = (uint64_t)[(id)a1 _refreshLargestResourceSizeWithError:a3];
  }

  else
  {
    uint64_t v22 = 1LL;
  }

  return v22;
}

id sub_100171BB0(uint64_t a1, unint64_t a2, uint64_t a3)
{
  if (!a1) {
    return 0LL;
  }
  unint64_t v6 = (char *)[(id)a1 totalOriginalResourceSize];
  unint64_t v7 = &v6[-a2];
  if ((unint64_t)v6 < a2)
  {
    if (!_CPLSilentLogging)
    {
      id v8 = v6;
      id v9 = sub_1001713AC();
      id v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        int v14 = 134218240;
        unint64_t v15 = a2;
        __int16 v16 = 2048;
        uint64_t v17 = v8;
        _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_ERROR,  "Total original resource size inconsistency (removing %llu from %llu)",  (uint8_t *)&v14,  0x16u);
      }
    }

    unint64_t v7 = 0LL;
  }

  uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](&OBJC_CLASS___NSNumber, "numberWithUnsignedLongLong:", v7));
  id v12 = [(id)a1 setValue:v11 forVariable:*(void *)(a1 + 44) error:a3];

  return v12;
}

uint64_t sub_100172058(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!a1) {
    return 0LL;
  }
  unint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([(id)a1 valueForVariable:*(void *)(a1 + 52)]);
  if (!v6
    || (unint64_t v7 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( NSNumber,  "numberWithUnsignedLongLong:",  a2)),  v8 = [v6 compare:v7],  v7,  v8 == (id)-1))
  {
    id v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](&OBJC_CLASS___NSNumber, "numberWithUnsignedLongLong:", a2));
    unsigned int v10 = [(id)a1 setValue:v9 forVariable:*(void *)(a1 + 52) error:a3];

    if (!v10)
    {
      uint64_t v14 = 0LL;
      goto LABEL_8;
    }

    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([(id)a1 abstractObject]);
    id v12 = (void *)objc_claimAutoreleasedReturnValue([v11 engineStore]);
    uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](&OBJC_CLASS___NSNumber, "numberWithUnsignedLongLong:", a2));
    [v12 predictSyncSessionValue:v13 ofType:CPLSyncSessionPredictionTypeLargestResourceSize];
  }

  uint64_t v14 = 1LL;
LABEL_8:

  return v14;
}

uint64_t sub_100172298(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result)
  {
    uint64_t v5 = result;
    unint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](&OBJC_CLASS___NSNumber, "numberWithUnsignedLongLong:", a2));
    LODWORD(a3) = [(id)v5 setValue:v6 forVariable:*(void *)(v5 + 36) error:a3];

    if ((_DWORD)a3)
    {
      unint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([(id)v5 abstractObject]);
      id v8 = (void *)objc_claimAutoreleasedReturnValue([v7 engineStore]);
      id v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](&OBJC_CLASS___NSNumber, "numberWithUnsignedLongLong:", a2));
      [v8 predictSyncSessionValue:v9 ofType:CPLSyncSessionPredictionTypeUploadResourceSize];

      return 1LL;
    }

    else
    {
      return 0LL;
    }
  }

  return result;
}

void sub_100172604(id a1)
{
  id v1 = (const char *)_CPLOSLogSubsystem(a1);
  os_log_t v2 = os_log_create(v1, "engine.resourcestorage.pql");
  id v3 = (void *)qword_1002A3B60;
  qword_1002A3B60 = (uint64_t)v2;
}

id sub_100172E1C()
{
  if (qword_1002A3B68 != -1) {
    dispatch_once(&qword_1002A3B68, &stru_100247B38);
  }
  return (id)qword_1002A3B70;
}

void sub_100172E84(id a1)
{
  id v1 = (const char *)_CPLOSLogSubsystem(a1);
  os_log_t v2 = os_log_create(v1, "engine.store.pql.migration.107137447");
  id v3 = (void *)qword_1002A3B70;
  qword_1002A3B70 = (uint64_t)v2;
}

id sub_100173B50()
{
  if (qword_1002A3B78 != -1) {
    dispatch_once(&qword_1002A3B78, &stru_100247B98);
  }
  return (id)qword_1002A3B80;
}

id sub_1001746E0(id a1, PQLResultSet *a2, id *a3)
{
  id v3 = a2;
  id v4 = (void *)objc_claimAutoreleasedReturnValue(-[PQLResultSet cplChangeAtIndex:](v3, "cplChangeAtIndex:", 1LL));
  id v5 = -[PQLResultSet integerAtIndex:](v3, "integerAtIndex:", 0LL);

  [v4 setScopeIndex:v5];
  return v4;
}

id sub_100174A9C(id a1, PQLResultSet *a2, id *a3)
{
  id v3 = a2;
  id v4 = (void *)objc_claimAutoreleasedReturnValue(-[PQLResultSet cplChangeAtIndex:](v3, "cplChangeAtIndex:", 1LL));
  id v5 = -[PQLResultSet integerAtIndex:](v3, "integerAtIndex:", 0LL);

  [v4 setScopeIndex:v5];
  return v4;
}

void sub_100175A44(id a1)
{
  id v1 = (const char *)_CPLOSLogSubsystem(a1);
  os_log_t v2 = os_log_create(v1, "engine.changepipe.pql");
  id v3 = (void *)qword_1002A3B80;
  qword_1002A3B80 = (uint64_t)v2;
}

void sub_100176334( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
}

void sub_100176360(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  id v7 = a2;
  id v8 = [v7 supportsResources];
  if ((_DWORD)v8)
  {
    id v8 = [v7 hasChangeType:8];
    if ((_DWORD)v8)
    {
      id v9 = (void *)objc_claimAutoreleasedReturnValue([v7 resources]);
      id v10 = [v9 count];

      if (v10) {
        *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = 1;
      }
    }
  }

  if ((a3 & 2) == 0)
  {
    if ([v7 supportsResources] && objc_msgSend(v7, "hasChangeType:", 8))
    {
      uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSUUID UUID](&OBJC_CLASS___NSUUID, "UUID"));
      id v12 = (void *)objc_claimAutoreleasedReturnValue([v11 UUIDString]);

      *(_BYTE *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = [*(id *)(a1 + 32) _enqueueResourcesForChange:v7 inOutgo ingResourcesWithUploadIdentifier:v12];
    }

    else
    {
      id v12 = 0LL;
    }

    if (*(_BYTE *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL))
    {
      id v13 = +[CPLRecordPushContext newEmptyPushContext](&OBJC_CLASS___CPLRecordPushContext, "newEmptyPushContext");
      uint64_t v14 = v13;
      if (v12)
      {
        id v15 = [v13 copyContextWithUploadIdentifier:v12];

        uint64_t v14 = v15;
      }

      *(_BYTE *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = [*(id *)(*(void *)(a1 + 32) + 16) storeChange:v7 pushContext:v14 error:0];
    }
  }

  if (!*(_BYTE *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL))
  {
    if (!_CPLSilentLogging)
    {
      uint64_t v16 = __CPLGenericOSLogDomain(v8);
      uint64_t v17 = (os_log_s *)objc_claimAutoreleasedReturnValue(v16);
      if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
      {
        int v18 = 138412546;
        id v19 = v7;
        __int16 v20 = 2048;
        uint64_t v21 = a3;
        _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_ERROR,  "Failed to migrate %@ (alteration: %lu)",  (uint8_t *)&v18,  0x16u);
      }
    }

    *a4 = 1;
  }

  ++*(void *)(*(void *)(a1 + 32) + 48LL);
}

void sub_1001765A8(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  id v6 = a2;
  if ([v6 supportsResources] && objc_msgSend(v6, "hasChangeType:", 8))
  {
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    __int128 v16 = 0u;
    __int128 v17 = 0u;
    id v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "resources", 0));
    id v8 = [v7 countByEnumeratingWithState:&v16 objects:v22 count:16];
    if (v8)
    {
      id v9 = v8;
      uint64_t v10 = *(void *)v17;
      while (2)
      {
        for (unint64_t i = 0LL; i != v9; unint64_t i = (char *)i + 1)
        {
          if (*(void *)v17 != v10) {
            objc_enumerationMutation(v7);
          }
          uint64_t v12 = *(void *)(*((void *)&v16 + 1) + 8LL * (void)i);
          id v13 = [*(id *)(a1 + 32) _discardResourceForUpload:v12];
          *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = (_BYTE)v13;
          if (!*(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL))
          {
            if (!_CPLSilentLogging)
            {
              uint64_t v14 = __CPLGenericOSLogDomain(v13);
              id v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(v14);
              if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)__int128 buf = 138412290;
                uint64_t v21 = v12;
                _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "Failed to discard %@", buf, 0xCu);
              }
            }

            goto LABEL_16;
          }
        }

        id v9 = [v7 countByEnumeratingWithState:&v16 objects:v22 count:16];
        if (v9) {
          continue;
        }
        break;
      }
    }

void sub_100176BC4(id a1)
{
  id v1 = (const char *)_CPLOSLogSubsystem(a1);
  os_log_t v2 = os_log_create(v1, "engine.store.pql.migration.110019222");
  id v3 = (void *)qword_1002A3B90;
  qword_1002A3B90 = (uint64_t)v2;
}

id sub_1001772CC()
{
  if (qword_1002A3B98 != -1) {
    dispatch_once(&qword_1002A3B98, &stru_100247C48);
  }
  return (id)qword_1002A3BA0;
}

id sub_1001778EC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = (void *)objc_claimAutoreleasedReturnValue([v5 cplChangeAtIndex:1]);
  id v7 = v6;
  if (v6)
  {
    [v6 setScopedIdentifier:*(void *)(a1 + 32)];
    id v8 = (void *)objc_claimAutoreleasedReturnValue([v5 stringAtIndex:2]);
    [v7 setRelatedIdentifier:v8];

    id v9 = (void *)objc_claimAutoreleasedReturnValue([v5 stringAtIndex:3]);
    [v7 setSecondaryIdentifier:v9];

    [v7 awakeFromStorage];
  }

  else
  {
    if (!_CPLSilentLogging)
    {
      id v10 = sub_1001772CC();
      uint64_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        uint64_t v12 = *(void *)(a1 + 32);
        int v14 = 138412290;
        uint64_t v15 = v12;
        _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_ERROR,  "Unable to deserialized record with identifier %@",  (uint8_t *)&v14,  0xCu);
      }
    }

    if (a3) {
      *a3 = (id)objc_claimAutoreleasedReturnValue( +[CPLErrors invalidClientCacheErrorWithReason:]( &OBJC_CLASS___CPLErrors,  "invalidClientCacheErrorWithReason:",  0LL));
    }
  }

  return v7;
}

id sub_100177E6C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = (void *)objc_claimAutoreleasedReturnValue([v5 cplChangeAtIndex:1]);
  id v7 = objc_alloc(&OBJC_CLASS___CPLScopedIdentifier);
  uint64_t v8 = *(void *)(a1 + 32);
  id v9 = (void *)objc_claimAutoreleasedReturnValue([v5 stringAtIndex:0]);
  id v10 = -[CPLScopedIdentifier initWithScopeIdentifier:identifier:](v7, "initWithScopeIdentifier:identifier:", v8, v9);

  -[CPLScopedIdentifier setScopeIndex:](v10, "setScopeIndex:", *(void *)(a1 + 40));
  if (v6)
  {
    [v6 setScopedIdentifier:v10];
    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v5 stringAtIndex:2]);
    [v6 setRelatedIdentifier:v11];

    uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([v5 stringAtIndex:3]);
    [v6 setSecondaryIdentifier:v12];

    [v6 awakeFromStorage];
  }

  else
  {
    if (!_CPLSilentLogging)
    {
      id v13 = sub_1001772CC();
      int v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
      {
        int v16 = 138412290;
        __int128 v17 = v10;
        _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_ERROR,  "Unable to deserialized record with identifier %@",  (uint8_t *)&v16,  0xCu);
      }
    }

    if (a3) {
      *a3 = (id)objc_claimAutoreleasedReturnValue( +[CPLErrors invalidClientCacheErrorWithReason:]( &OBJC_CLASS___CPLErrors,  "invalidClientCacheErrorWithReason:",  0LL));
    }
  }

  return v6;
}

id sub_100178238(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = (void *)objc_claimAutoreleasedReturnValue([v5 cplChangeAtIndex:1]);
  id v7 = objc_alloc(&OBJC_CLASS___CPLScopedIdentifier);
  uint64_t v8 = *(void *)(a1 + 32);
  id v9 = (void *)objc_claimAutoreleasedReturnValue([v5 stringAtIndex:0]);
  id v10 = -[CPLScopedIdentifier initWithScopeIdentifier:identifier:](v7, "initWithScopeIdentifier:identifier:", v8, v9);

  -[CPLScopedIdentifier setScopeIndex:](v10, "setScopeIndex:", *(void *)(a1 + 40));
  if (v6)
  {
    [v6 setScopedIdentifier:v10];
    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v5 stringAtIndex:2]);
    [v6 setRelatedIdentifier:v11];

    uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([v5 stringAtIndex:3]);
    [v6 setSecondaryIdentifier:v12];

    [v6 awakeFromStorage];
  }

  else
  {
    if (!_CPLSilentLogging)
    {
      id v13 = sub_1001772CC();
      int v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
      {
        int v16 = 138412290;
        __int128 v17 = v10;
        _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_ERROR,  "Unable to deserialized record with identifier %@",  (uint8_t *)&v16,  0xCu);
      }
    }

    if (a3) {
      *a3 = (id)objc_claimAutoreleasedReturnValue( +[CPLErrors invalidClientCacheErrorWithReason:]( &OBJC_CLASS___CPLErrors,  "invalidClientCacheErrorWithReason:",  0LL));
    }
  }

  return v6;
}

void sub_1001788DC(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  if (v5) {
    id v6 = v5;
  }
  else {
    id v6 = @"(nil)";
  }
  id v7 = (__CFString *)v6;
  [*(id *)(a1 + 32) appendFormat:@"\n\t%@: %ld", v6, a3];
}

void sub_1001789F4(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  if (!v5) {
    id v5 = @"(nil)";
  }
  uint64_t v8 = (__CFString *)v5;
  id v6 = *(void **)(a1 + 32);
  id v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInteger:", a3));
  [v6 setObject:v7 forKey:v8];
}

NSString *__cdecl sub_100178AB0(id a1, NSString *a2)
{
  return a2;
}

id sub_100178BF0(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 stringAtIndex:0]);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v3 stringAtIndex:1]);

  if (v4) {
    [*(id *)(a1 + 32) setRelatedIdentifier:v4];
  }
  if (v5) {
    [*(id *)(a1 + 32) setSecondaryIdentifier:v5];
  }
  id v6 = *(id *)(a1 + 32);

  return v6;
}

void sub_100178D48(id a1)
{
  id v1 = (const char *)_CPLOSLogSubsystem(a1);
  os_log_t v2 = os_log_create(v1, "engine.clientcache.pql");
  id v3 = (void *)qword_1002A3BA0;
  qword_1002A3BA0 = (uint64_t)v2;
}

id sub_100179034()
{
  if (qword_1002A3BA8 != -1) {
    dispatch_once(&qword_1002A3BA8, &stru_100247C68);
  }
  return (id)qword_1002A3BB0;
}

void sub_100179614(id a1)
{
  id v1 = (const char *)_CPLOSLogSubsystem(a1);
  os_log_t v2 = os_log_create(v1, "engine.pendingrecordchecks.pql");
  id v3 = (void *)qword_1002A3BB0;
  qword_1002A3BB0 = (uint64_t)v2;
}

id sub_100179AC8()
{
  if (qword_1002A3BB8 != -1) {
    dispatch_once(&qword_1002A3BB8, &stru_100247C88);
  }
  return (id)qword_1002A3BC0;
}

id sub_100179EAC(void *a1)
{
  id v1 = a1;
  else {
    id v2 = v1;
  }

  return v2;
}

void sub_10017ABE8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

void sub_10017AC18(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  id v6 = *(void **)(a1 + 32);
  id v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) mainTable]);
  *(_BYTE *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = [v6 cplExecute:@"DELETE FROM %@ WHERE rowID = %ld", v7, a2];

  if (!*(_BYTE *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL)) {
    *a3 = 1;
  }
}

void sub_10017ACFC(id a1)
{
  id v1 = (const char *)_CPLOSLogSubsystem(a1);
  os_log_t v2 = os_log_create(v1, "engine.computestatequeue.pql");
  id v3 = (void *)qword_1002A3BC0;
  qword_1002A3BC0 = (uint64_t)v2;
}

id sub_10017AE44(uint64_t a1)
{
  os_log_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) pqStore]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) mainTable]);
  id v4 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithInt:]( NSNumber,  "numberWithInt:",  [v2 tableHasRecords:v3] ^ 1));

  return v4;
}

id sub_10017B794(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 cplChangeAtIndex:2]);
  id v5 = v4;
  if (v4)
  {
    [v4 setScopedIdentifier:*(void *)(a1 + 32)];
    [v5 awakeFromStorage];
    id v6 = (void *)objc_claimAutoreleasedReturnValue( +[NSDate dateWithTimeIntervalSinceReferenceDate:]( NSDate,  "dateWithTimeIntervalSinceReferenceDate:",  (double)(uint64_t)[v3 integerAtIndex:3]));
    id v7 = [[CPLIgnoredRecord alloc] initWithRecord:v5 ignoredDate:v6];
  }

  else
  {
    id v7 = (id)objc_claimAutoreleasedReturnValue(+[NSNull null](&OBJC_CLASS___NSNull, "null"));
  }

  return v7;
}

id sub_10017BEB8(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 cplChangeAtIndex:2]);
  if (v4)
  {
    id v5 = objc_alloc(&OBJC_CLASS___CPLScopedIdentifier);
    uint64_t v6 = *(void *)(a1 + 32);
    id v7 = (void *)objc_claimAutoreleasedReturnValue([v3 stringAtIndex:1]);
    uint64_t v8 = -[CPLScopedIdentifier initWithScopeIdentifier:identifier:scopeIndex:]( v5,  "initWithScopeIdentifier:identifier:scopeIndex:",  v6,  v7,  *(void *)(a1 + 40));

    [v4 setScopedIdentifier:v8];
    [v4 awakeFromStorage];
    id v9 = (void *)objc_claimAutoreleasedReturnValue( +[NSDate dateWithTimeIntervalSinceReferenceDate:]( NSDate,  "dateWithTimeIntervalSinceReferenceDate:",  (double)(uint64_t)[v3 integerAtIndex:3]));
    id v10 = [[CPLIgnoredRecord alloc] initWithRecord:v4 ignoredDate:v9];
  }

  else
  {
    id v10 = (id)objc_claimAutoreleasedReturnValue(+[NSNull null](&OBJC_CLASS___NSNull, "null"));
  }

  return v10;
}

void sub_10017C62C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
}

uint64_t sub_10017C654(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_10017C664(uint64_t a1)
{
}

void sub_10017C66C(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  *(_BYTE *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = [*(id *)(a1 + 32) cplExecute:@"UPDATE %@ SET otherScopeIndex = 0 WHERE rowID = %lu", *(void *)(a1 + 40), a2];
  if (!*(_BYTE *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL))
  {
    uint64_t v5 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) lastError]);
    uint64_t v6 = *(void *)(*(void *)(a1 + 56) + 8LL);
    id v7 = *(void **)(v6 + 40);
    *(void *)(v6 + 40) = v5;

    *a3 = 1;
  }

id *sub_10017C958(id *a1, void *a2, void *a3)
{
  id v6 = a2;
  id v7 = a3;
  if (a1)
  {
    v25.receiver = a1;
    v25.super_class = (Class)&OBJC_CLASS___CPLPrequelitePushedChange;
    a1 = (id *)objc_msgSendSuper2(&v25, "init");
    if (a1)
    {
      uint64_t v8 = objc_opt_class(v6);
      uint64_t v9 = objc_claimAutoreleasedReturnValue(v8);
      id v10 = a1[3];
      a1[3] = (id)v9;

      uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v6 scopedIdentifier]);
      id v12 = [v11 scopeIndex];
      a1[4] = v12;
      if (v12 == (id)0x7FFFFFFFFFFFFFFFLL) {
        sub_10019C384();
      }
      id v13 = (void *)objc_claimAutoreleasedReturnValue([v11 identifier]);
      id v14 = [v13 copy];
      id v15 = a1[5];
      a1[5] = v14;

      a1[6] = [v6 changeType];
      uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue([v6 relatedIdentifier]);
      id v17 = [v16 copy];
      id v18 = a1[7];
      a1[7] = v17;

      __int128 v19 = (void *)objc_claimAutoreleasedReturnValue([v6 secondaryIdentifier]);
      id v20 = [v19 copy];
      id v21 = a1[8];
      a1[8] = v20;

      a1[9] = [v6 dequeueOrder];
      else {
        unsigned __int8 v22 = [v6 inTrash];
      }
      *((_BYTE *)a1 + _Block_object_dispose((const void *)(v16 - 120), 8) = v22;
      objc_storeStrong(a1 + 10, a3);
      else {
        int v23 = 0;
      }
      *((_DWORD *)a1 + 3) = v23;
      objc_storeStrong(a1 + 11, a2);
    }
  }

  return a1;
}

id sub_10017CB04()
{
  if (qword_1002A3BC8 != -1) {
    dispatch_once(&qword_1002A3BC8, &stru_100247D70);
  }
  return (id)qword_1002A3BD0;
}

id sub_10017CB50(id a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  if (a1)
  {
    v22.receiver = a1;
    v22.super_class = (Class)&OBJC_CLASS___CPLPrequelitePushedChange;
    a1 = objc_msgSendSuper2(&v22, "init");
    if (a1)
    {
      id v6 = (NSString *)objc_claimAutoreleasedReturnValue([v5 stringAtIndex:a3]);
      Class v7 = NSClassFromString(v6);
      uint64_t v8 = objc_claimAutoreleasedReturnValue(v7);
      uint64_t v9 = (void *)*((void *)a1 + 3);
      *((void *)a1 + 3) = v8;

      *((void *)a1 + 4) = [v5 integerAtIndex:(a3 + 1)];
      uint64_t v10 = objc_claimAutoreleasedReturnValue([v5 stringAtIndex:(a3 + 2)]);
      uint64_t v11 = (void *)*((void *)a1 + 5);
      *((void *)a1 + 5) = v10;

      *((void *)a1 + 6) = (int)[v5 intAtIndex:(a3 + 3)];
      uint64_t v12 = objc_claimAutoreleasedReturnValue([v5 stringAtIndex:(a3 + 4)]);
      id v13 = (void *)*((void *)a1 + 7);
      *((void *)a1 + 7) = v12;

      uint64_t v14 = objc_claimAutoreleasedReturnValue([v5 stringAtIndex:(a3 + 5)]);
      id v15 = (void *)*((void *)a1 + 8);
      *((void *)a1 + _Block_object_dispose((const void *)(v16 - 120), 8) = v14;

      *((void *)a1 + 9) = [v5 longAtIndex:(a3 + 6)];
      *((_BYTE *)a1 + _Block_object_dispose((const void *)(v16 - 120), 8) = [v5 intAtIndex:(a3 + 7)] == 1;
      uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue([v5 stringAtIndex:(a3 + 8)]);
      id v17 = -[CPLRecordPushContext initWithUploadIdentifier:flags:priority:]( [CPLRecordPushContext alloc],  "initWithUploadIdentifier:flags:priority:",  v16,  [v5 integerAtIndex:(a3 + 9)],  objc_msgSend(v5, "unsignedIntegerAtIndex:", (a3 + 10)));
      id v18 = (void *)*((void *)a1 + 10);
      *((void *)a1 + 10) = v17;

      *((_DWORD *)a1 + 3) = [v5 intAtIndex:(a3 + 11)];
      uint64_t v19 = objc_claimAutoreleasedReturnValue([v5 dataAtIndex:(a3 + 12)]);
      id v20 = (void *)*((void *)a1 + 2);
      *((void *)a1 + 2) = v19;
    }
  }

  return a1;
}

void *sub_10017CD50(void *a1)
{
  if (a1)
  {
    id v1 = a1;
    os_log_t v2 = (void *)a1[2];
    if (!v2)
    {
      id v3 = (void *)a1[11];
      if (v3 && v1[6] != 1024LL)
      {
        id v4 = [v3 copy];
        [v4 clearIdentifiers];
        [v4 prepareForStorage];
        uint64_t v5 = objc_claimAutoreleasedReturnValue(+[CPLArchiver archivedDataWithRootObject:](&OBJC_CLASS___CPLArchiver, "archivedDataWithRootObject:", v4));
        id v6 = (void *)v1[2];
        v1[2] = v5;

        os_log_t v2 = (void *)v1[2];
      }

      else
      {
        os_log_t v2 = 0LL;
      }
    }

    a1 = v2;
  }

  return a1;
}

id sub_10017CDD4(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (a1)
  {
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue( [v3 _scopedIdentifierForIdentifier:*(void *)(a1 + 40) scopeIndex:*(void *)(a1 + 32)]);
    if (!v5)
    {
      if (!_CPLSilentLogging)
      {
        id v12 = sub_10017CB04();
        id v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
        if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
        {
          uint64_t v14 = *(void *)(a1 + 32);
          uint64_t v15 = *(void *)(a1 + 40);
          *(_DWORD *)__int128 buf = 134218242;
          uint64_t v19 = v14;
          __int16 v20 = 2112;
          uint64_t v21 = v15;
          _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_ERROR,  "impossible to create scoped identifier for %ld/%@",  buf,  0x16u);
        }
      }

      uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
      id v17 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/Preque liteStore/CPLPrequelitePushRepository.m"));
      [v16 handleFailureInMethod:"changeWithinPushRepository:", a1, v17, 205, @"impossible to create scoped identifier for %ld/%@", *(void *)(a1 + 32), *(void *)(a1 + 40) object file lineNumber description];

      abort();
    }

    id v6 = v5;
    [v5 setScopeIndex:*(void *)(a1 + 32)];
    if (*(void *)(a1 + 48) == 1024LL)
    {
      id v7 = [*(id *)(a1 + 24) newDeleteChangeWithScopedIdentifier:v6];
    }

    else
    {
      uint64_t v8 = *(void **)(a1 + 88);
      if (v8)
      {
        id v7 = [v8 copy];
        [v7 setScopedIdentifier:v6];
      }

      else
      {
        uint64_t v9 = *(void *)(a1 + 16);
        if (v9)
        {
          id v10 = +[CPLArchiver unarchiveObjectWithData:ofClass:]( &OBJC_CLASS___CPLArchiver,  "unarchiveObjectWithData:ofClass:",  v9,  objc_opt_class(&OBJC_CLASS___CPLRecordChange));
          id v7 = (id)objc_claimAutoreleasedReturnValue(v10);
          [v7 setScopedIdentifier:v6];
          [v7 setRelatedIdentifier:*(void *)(a1 + 56)];
          [v7 setSecondaryIdentifier:*(void *)(a1 + 64)];
          [v7 awakeFromStorage];
        }

        else
        {
          id v7 = objc_msgSend(*(id *)(a1 + 24), "newChangeWithScopedIdentifier:changeType:", v6);
          [v7 setRelatedIdentifier:*(void *)(a1 + 56)];
          [v7 setSecondaryIdentifier:*(void *)(a1 + 64)];
        }
      }
    }

    [v7 _setPushContext:*(void *)(a1 + 80)];
    if (*(_DWORD *)(a1 + 12) == 2) {
      [v7 _setShouldNotTrustCloudCache:1];
    }
  }

  else
  {
    id v7 = 0LL;
  }

  return v7;
}

void sub_10017D034(uint64_t a1, void *a2)
{
  id v4 = a2;
  if (a1)
  {
    id v12 = v4;
    objc_storeStrong((id *)(a1 + 88), a2);
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v12 relatedIdentifier]);
    id v6 = [v5 copy];
    id v7 = *(void **)(a1 + 56);
    *(void *)(a1 + 56) = v6;

    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v12 secondaryIdentifier]);
    id v9 = [v8 copy];
    id v10 = *(void **)(a1 + 64);
    *(void *)(a1 + 64) = v9;

    *(void *)(a1 + 72) = [v12 dequeueOrder];
    else {
      unsigned __int8 v11 = [v12 inTrash];
    }
    *(_BYTE *)(a1 + _Block_object_dispose((const void *)(v16 - 120), 8) = v11;
    id v4 = v12;
  }
}

void sub_10017D0F0(uint64_t a1, void *a2)
{
  if (a1) {
    objc_storeStrong((id *)(a1 + 16), a2);
  }
}

void sub_10017D100(uint64_t a1, void *a2)
{
  if (a1) {
    objc_storeStrong((id *)(a1 + 80), a2);
  }
}

LABEL_89:
      id v30 = v67;
    }

    else
    {
      uint64_t v39 = 0;
    }

    return v39 & 1;
  }

  return v5;
}

#error "10017FC20: call analysis failed (funcsize=94)"
BOOL __cdecl -[CPLPrequelitePushRepository resetPriorityForScopeWithIdentifier:maxCount:hasMore:error:]( CPLPrequelitePushRepository *self,  SEL a2,  id a3,  unint64_t a4,  BOOL *a5,  id *a6)
{
  id v10;
  int64_t v11;
  unsigned int v12;
  int64_t v13;
  void *v14;
  void *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  os_log_s *v20;
  uint8_t buf[4];
  uint64_t v23;
  __int16 v24;
  id v25;
  id v10 = a3;
  *a5 = 0;
  unsigned __int8 v11 = -[CPLPrequelitePushRepository _scopeIndexForScopeIdentifier:](self, "_scopeIndexForScopeIdentifier:", v10);
  if (v11 == 0x7FFFFFFFFFFFFFFFLL)
  {
    LOBYTE(v12) = 1;
  }

  else
  {
    id v13 = v11;
    uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue(-[CPLPrequeliteStorage pqStore](self, "pqStore"));
    uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([v14 pqlConnection]);

    uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue(-[CPLPrequeliteStorage mainTable](self, "mainTable"));
    id v12 = [v15 cplExecute:@"UPDATE %@ SET priority = 0 WHERE priority != 0 AND scopeIndex = %ld LIMIT %lu", v16, v13, a4];

    if (v12)
    {
      id v17 = (uint64_t)[v15 changes];
      if (v17 >= 1)
      {
        if (!_CPLSilentLogging)
        {
          id v18 = v17;
          uint64_t v19 = sub_10017CB04();
          __int16 v20 = (os_log_s *)objc_claimAutoreleasedReturnValue(v19);
          if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)__int128 buf = 134218242;
            int v23 = v18;
            int v24 = 2114;
            objc_super v25 = v10;
            _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_DEFAULT,  "Reset priority for %llu records in %{public}@",  buf,  0x16u);
          }
        }

        *a5 = 1;
      }
    }

    else if (a6)
    {
      *a6 = (id)objc_claimAutoreleasedReturnValue([v15 lastError]);
    }
  }

  return v12;
}

id sub_10017FFD0(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  id v6 = -[CPLPrequelitePushedChange initFromPQLResultSet:error:]( objc_alloc(&OBJC_CLASS___CPLPrequelitePushedChange),  "initFromPQLResultSet:error:",  v5,  a3);

  id v7 = sub_10017CDD4((uint64_t)v6, *(void **)(a1 + 32));
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
  id v9 = v8;
  if (v8) {
    id v10 = v8;
  }
  else {
    id v10 = (id)objc_claimAutoreleasedReturnValue(+[NSNull null](&OBJC_CLASS___NSNull, "null"));
  }
  unsigned __int8 v11 = v10;

  return v11;
}

id sub_100180748(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  id v6 = -[CPLPrequelitePushedChange initFromPQLResultSet:error:]( objc_alloc(&OBJC_CLASS___CPLPrequelitePushedChange),  "initFromPQLResultSet:error:",  v5,  a3);

  id v7 = sub_10017CDD4((uint64_t)v6, *(void **)(a1 + 32));
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
  id v9 = v8;
  if (v8) {
    id v10 = v8;
  }
  else {
    id v10 = (id)objc_claimAutoreleasedReturnValue(+[NSNull null](&OBJC_CLASS___NSNull, "null"));
  }
  unsigned __int8 v11 = v10;

  return v11;
}

void sub_100181128(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  if (!v5) {
    id v5 = @"(nil)";
  }
  id v7 = (__CFString *)v5;
  id v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInteger:", a3));
  [*(id *)(a1 + 32) setObject:v6 forKeyedSubscript:v7];
}

void sub_100181650(uint64_t a1, void *a2, void *a3)
{
  id v4 = a2;
  id v5 = a3;
  id v6 = objc_alloc_init(&OBJC_CLASS___NSMutableString);
  __int128 v16 = 0u;
  __int128 v17 = 0u;
  __int128 v18 = 0u;
  __int128 v19 = 0u;
  id v7 = (void *)objc_claimAutoreleasedReturnValue([v5 allKeys]);
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v7 sortedArrayUsingSelector:"compare:"]);

  id v9 = [v8 countByEnumeratingWithState:&v16 objects:v20 count:16];
  if (v9)
  {
    id v10 = v9;
    uint64_t v11 = *(void *)v17;
    do
    {
      for (unint64_t i = 0LL; i != v10; unint64_t i = (char *)i + 1)
      {
        if (*(void *)v17 != v11) {
          objc_enumerationMutation(v8);
        }
        uint64_t v13 = *(void *)(*((void *)&v16 + 1) + 8LL * (void)i);
        uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([v5 objectForKeyedSubscript:v13]);
        -[NSMutableString appendFormat:](v6, "appendFormat:", @"\n\t%@: %@", v13, v14);
      }

      id v10 = [v8 countByEnumeratingWithState:&v16 objects:v20 count:16];
    }

    while (v10);
  }

  [*(id *)(a1 + 32) setObject:v6 forKeyedSubscript:v4];
}

void sub_1001817DC(uint64_t a1, uint64_t a2, void *a3)
{
  id v13 = a3;
  id v5 = [*(id *)(a1 + 32) indexForLocalScopeIdentifier:a2];
  id v6 = *(void **)(a1 + 40);
  id v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", v5));
  uint64_t v8 = (NSMutableString *)objc_claimAutoreleasedReturnValue([v6 objectForKeyedSubscript:v7]);

  if (v8)
  {
    id v9 = (void *)objc_claimAutoreleasedReturnValue([v13 summaryDescription]);
    -[NSMutableString appendFormat:](v8, "appendFormat:", @"\n\textracted: %@", v9);
  }

  else
  {
    id v10 = objc_alloc(&OBJC_CLASS___NSMutableString);
    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v13 summaryDescription]);
    uint64_t v8 = -[NSMutableString initWithFormat:](v10, "initWithFormat:", @"\n\textracted: %@", v11);

    id v12 = *(void **)(a1 + 40);
    id v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", v5));
    [v12 setObject:v8 forKeyedSubscript:v9];
  }
}

void sub_100181B20( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

void sub_100181B50(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  id v6 = *(void **)(a1 + 32);
  id v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) mainTable]);
  *(_BYTE *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = [v6 cplExecute:@"DELETE FROM %@ WHERE rowID = %ld", v7, a2];

  if (!*(_BYTE *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL)) {
    *a3 = 1;
  }
}

id sub_100181E14(uint64_t a1, void *a2)
{
  *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = 1;
  os_log_t v2 = (void *)objc_claimAutoreleasedReturnValue([a2 stringAtIndex:0]);
  id v3 = v2;
  if (v2) {
    id v4 = v2;
  }
  else {
    id v4 = (id)objc_claimAutoreleasedReturnValue(+[NSNull null](&OBJC_CLASS___NSNull, "null"));
  }
  id v5 = v4;

  return v5;
}

void sub_100182064(uint64_t a1, void *a2, void *a3)
{
  id v29 = a2;
  id v5 = [a3 flags];
  if (v5)
  {
    id v6 = v5;
    id v7 = (void *)objc_claimAutoreleasedReturnValue([v29 scopeIdentifier]);
    unsigned int v8 = [v7 isEqualToString:*(void *)(a1 + 32)];

    if (v8)
    {
      id v9 = *(void **)(a1 + 40);
      id v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) mainTable]);
      uint64_t v11 = *(void *)(a1 + 64);
      id v12 = (void *)objc_claimAutoreleasedReturnValue([v29 identifier]);
      id v13 = [v9 cplFetch:@"SELECT flags, changeType FROM %@ WHERE scopeIndex = %ld AND identifier = %@", v10, v11, v12];

      if (![v13 next])
      {
LABEL_9:
        int v23 = *(void **)(a1 + 56);
        int v24 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", v6));
        objc_super v25 = (void *)objc_claimAutoreleasedReturnValue([v23 objectForKeyedSubscript:v24]);
        __int16 v26 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInteger:]( NSNumber,  "numberWithUnsignedInteger:",  (char *)[v25 unsignedIntegerValue] + 1));
        unint64_t v27 = *(void **)(a1 + 56);
        uint64_t v28 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", v6));
        [v27 setObject:v26 forKeyedSubscript:v28];

        goto LABEL_10;
      }

      id v14 = [v13 integerAtIndex:0];
      id v15 = +[CPLRecordPushContext mergingFlags:previousFlags:changeType:]( CPLRecordPushContext,  "mergingFlags:previousFlags:changeType:",  v14,  v6,  [v13 integerAtIndex:1]);
      id v6 = v15;
      if (v14)
      {
        if (v15 == v14) {
          goto LABEL_10;
        }
        __int128 v16 = *(void **)(a1 + 56);
        __int128 v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", v14));
        __int128 v18 = (void *)objc_claimAutoreleasedReturnValue([v16 objectForKeyedSubscript:v17]);
        __int128 v19 = (char *)[v18 unsignedIntegerValue];

        if (v19)
        {
          __int16 v20 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInteger:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInteger:",  v19 - 1));
          uint64_t v21 = *(void **)(a1 + 56);
          objc_super v22 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", v14));
          [v21 setObject:v20 forKeyedSubscript:v22];
        }
      }

      if (v6) {
        goto LABEL_9;
      }
LABEL_10:
    }
  }
}

CPLScopedIdentifier *sub_1001823D8(uint64_t a1, void *a2)
{
  id v3 = (void *)objc_claimAutoreleasedReturnValue([a2 stringAtIndex:0]);
  if (v3) {
    id v4 = -[CPLScopedIdentifier initWithScopeIdentifier:identifier:scopeIndex:]( objc_alloc(&OBJC_CLASS___CPLScopedIdentifier),  "initWithScopeIdentifier:identifier:scopeIndex:",  *(void *)(a1 + 32),  v3,  *(void *)(a1 + 40));
  }
  else {
    id v4 = (CPLScopedIdentifier *)objc_claimAutoreleasedReturnValue(+[NSNull null](&OBJC_CLASS___NSNull, "null"));
  }
  id v5 = v4;

  return v5;
}

id sub_10018271C(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  id v6 = -[CPLPrequelitePushedChange initFromPQLResultSet:error:]( objc_alloc(&OBJC_CLASS___CPLPrequelitePushedChange),  "initFromPQLResultSet:error:",  v5,  a3);

  id v7 = sub_10017CDD4((uint64_t)v6, *(void **)(a1 + 32));
  unsigned int v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
  id v9 = v8;
  if (v8) {
    id v10 = v8;
  }
  else {
    id v10 = (id)objc_claimAutoreleasedReturnValue(+[NSNull null](&OBJC_CLASS___NSNull, "null"));
  }
  uint64_t v11 = v10;

  return v11;
}

void sub_100182C48( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, char a39)
{
}

id sub_100182C78(uint64_t a1, void *a2)
{
  id v3 = a2;
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = [v3 unsignedIntegerAtIndex:0];
  id v4 = sub_10017CB50(objc_alloc(&OBJC_CLASS___CPLPrequelitePushedChange), v3, 1LL);

  if (v4) {
    id v5 = v4;
  }
  else {
    id v5 = (id)objc_claimAutoreleasedReturnValue(+[NSNull null](&OBJC_CLASS___NSNull, "null"));
  }
  id v6 = v5;

  return v6;
}

#error "1001833F4: call analysis failed (funcsize=10)"
id __cdecl -[CPLPrequelitePushRepositoryBatchStorage changeWithScopedIdentifier:]( CPLPrequelitePushRepositoryBatchStorage *self,  SEL a2,  id a3)
{
  CPLPrequelitePushRepository **p_pushRepository;
  id v4;
  id WeakRetained;
  void *v6;
  p_pushRepository = &self->_pushRepository;
  id v4 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)p_pushRepository);
  id v6 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained changeWithScopedIdentifier:v4]);

  return v6;
}

void sub_100183800(id a1)
{
  id v1 = (const char *)_CPLOSLogSubsystem(a1);
  os_log_t v2 = os_log_create(v1, "engine.pushrepository.pql");
  id v3 = (void *)qword_1002A3BD0;
  qword_1002A3BD0 = (uint64_t)v2;
}

id sub_100183948()
{
  if (qword_1002A3BD8 != -1) {
    dispatch_once(&qword_1002A3BD8, &stru_100247D90);
  }
  return (id)qword_1002A3BE0;
}

void sub_1001849F4(id a1)
{
  id v1 = (const char *)_CPLOSLogSubsystem(a1);
  os_log_t v2 = os_log_create(v1, "engine.store.history");
  id v3 = (void *)qword_1002A3BE0;
  qword_1002A3BE0 = (uint64_t)v2;
}

id sub_100184CE4()
{
  if (qword_1002A3BE8 != -1) {
    dispatch_once(&qword_1002A3BE8, &stru_100247DB0);
  }
  return (id)qword_1002A3BF0;
}

CPLScopedIdentifier *sub_100185290(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = objc_alloc(&OBJC_CLASS___CPLScopedIdentifier);
  uint64_t v5 = *(void *)(a1 + 32);
  id v6 = (void *)objc_claimAutoreleasedReturnValue([v3 stringAtIndex:0]);

  id v7 = -[CPLScopedIdentifier initWithScopeIdentifier:identifier:scopeIndex:]( v4,  "initWithScopeIdentifier:identifier:scopeIndex:",  v5,  v6,  *(void *)(a1 + 40));
  return v7;
}

id *sub_1001855E8(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 stringAtIndex:0]);
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v3 stringAtIndex:1]);

  if (v4 && v5)
  {
    id v6 = -[CPLScopedIdentifier initWithScopeIdentifier:identifier:scopeIndex:]( objc_alloc(&OBJC_CLASS___CPLScopedIdentifier),  "initWithScopeIdentifier:identifier:scopeIndex:",  *(void *)(a1 + 32),  v4,  *(void *)(a1 + 40));
    id v7 = -[CPLScopedIdentifier initWithScopeIdentifier:identifier:scopeIndex:]( objc_alloc(&OBJC_CLASS___CPLScopedIdentifier),  "initWithScopeIdentifier:identifier:scopeIndex:",  *(void *)(a1 + 32),  v5,  *(void *)(a1 + 40));
    unsigned int v8 = sub_1001856C8((id *)objc_alloc(&OBJC_CLASS___CPLPrequeliteRemappedRecord), v6, v7);
  }

  else
  {
    unsigned int v8 = (id *)objc_claimAutoreleasedReturnValue(+[NSNull null](&OBJC_CLASS___NSNull, "null"));
  }

  return v8;
}

id *sub_1001856C8(id *a1, void *a2, void *a3)
{
  id v6 = a2;
  id v7 = a3;
  if (a1)
  {
    v10.receiver = a1;
    v10.super_class = (Class)&OBJC_CLASS___CPLPrequeliteRemappedRecord;
    unsigned int v8 = (id *)objc_msgSendSuper2(&v10, "init");
    a1 = v8;
    if (v8)
    {
      objc_storeStrong(v8 + 1, a2);
      objc_storeStrong(a1 + 2, a3);
    }
  }

  return a1;
}

void sub_100185800(id a1)
{
  id v1 = (const char *)_CPLOSLogSubsystem(a1);
  os_log_t v2 = os_log_create(v1, "engine.remappedrecords.pql");
  id v3 = (void *)qword_1002A3BF0;
  qword_1002A3BF0 = (uint64_t)v2;
}

id sub_100185948(uint64_t a1)
{
  os_log_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) pqStore]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) mainTable]);
  id v4 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithInt:]( NSNumber,  "numberWithInt:",  [v2 tableHasRecords:v3] ^ 1));

  return v4;
}

void sub_100185EDC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v13 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose((const void *)(v11 - 96), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100185F14(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_100185F24(uint64_t a1)
{
}

CPLPlaceholderRecord *sub_100185F2C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [v3 integerAtIndex:0];
  uint64_t v5 = *(void *)(*(void *)(a1 + 40) + 8LL);
  if (v4 != *(id *)(v5 + 24))
  {
    *(void *)(v5 + 24) = v4;
    id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) scopeWithStableIndex:v4]);
    if (v6 && ([*(id *)(a1 + 32) valueForFlag:16 forScope:v6] & 1) == 0)
    {
      uint64_t v8 = objc_claimAutoreleasedReturnValue([v6 scopeIdentifier]);
      uint64_t v9 = *(void *)(*(void *)(a1 + 56) + 8LL);
      objc_super v10 = *(void **)(v9 + 40);
      *(void *)(v9 + 40) = v8;

      char v7 = 1;
    }

    else
    {
      char v7 = 0;
    }

    *(_BYTE *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL) = v7;
  }

  if (!*(_BYTE *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL)) {
    goto LABEL_15;
  }
  uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v3 stringAtIndex:1]);
  id v12 = (NSString *)objc_claimAutoreleasedReturnValue([v3 stringAtIndex:2]);
  uint64_t v13 = v12;
  if (!v11
    || !v12
    || (Class v14 = NSClassFromString(v12)) == 0LL
    || (Class v15 = v14,
        (-[objc_class isSubclassOfClass:]( v14,  "isSubclassOfClass:",  objc_opt_class(&OBJC_CLASS___CPLRecordChange)) & 1) == 0))
  {

LABEL_15:
    uint64_t v17 = (CPLPlaceholderRecord *)objc_claimAutoreleasedReturnValue(+[NSNull null](&OBJC_CLASS___NSNull, "null"));
    goto LABEL_16;
  }

  uint64_t v16 = -[CPLScopedIdentifier initWithScopeIdentifier:identifier:]( objc_alloc(&OBJC_CLASS___CPLScopedIdentifier),  "initWithScopeIdentifier:identifier:",  *(void *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 40LL),  v11);
  uint64_t v17 = -[CPLPlaceholderRecord initWithRecordClass:scopedIdentifier:relatedRecordClass:relatedIdentifier:]( objc_alloc(&OBJC_CLASS___CPLPlaceholderRecord),  "initWithRecordClass:scopedIdentifier:relatedRecordClass:relatedIdentifier:",  v15,  v16,  0LL,  0LL);

  if (!v17) {
    goto LABEL_15;
  }
LABEL_16:

  return v17;
}

void sub_1001864E0(id a1)
{
  id v1 = (const char *)_CPLOSLogSubsystem(a1);
  os_log_t v2 = os_log_create(v1, "engine.revertrecords.pql");
  id v3 = (void *)qword_1002A3C00;
  qword_1002A3C00 = (uint64_t)v2;
}

void sub_100186F88(id a1)
{
  id v1 = (const char *)_CPLOSLogSubsystem(a1);
  os_log_t v2 = os_log_create(v1, "engine.quarantinedrecords.pql");
  id v3 = (void *)qword_1002A3C10;
  qword_1002A3C10 = (uint64_t)v2;
}

id sub_100187904(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  id v6 = -[CPLRecordStatus initFromPQLResultSet:center:error:]( objc_alloc(&OBJC_CLASS___CPLRecordStatus),  "initFromPQLResultSet:center:error:",  v5,  *(void *)(a1 + 32),  a3);

  return v6;
}

void sub_10018805C(id a1)
{
  id v1 = (const char *)_CPLOSLogSubsystem(a1);
  os_log_t v2 = os_log_create(v1, "engine.statuscenter.pql");
  id v3 = (void *)qword_1002A3C20;
  qword_1002A3C20 = (uint64_t)v2;
}

id sub_1001892A0()
{
  if (qword_1002A3C30 != -1) {
    dispatch_once(&qword_1002A3C30, &stru_100247EC0);
  }
  return (id)qword_1002A3C38;
}

LABEL_51:
  return v27;
}

uint64_t sub_10018BD4C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  id v6 = (void *)objc_claimAutoreleasedReturnValue([a2 lastPathComponent]);
  char v7 = (void *)objc_claimAutoreleasedReturnValue( +[CPLResourceIdentity identityForStorageName:]( &OBJC_CLASS___CPLResourceIdentity,  "identityForStorageName:",  v6));
  [v7 setAvailable:1];
  if (v7) {
    (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
  }

  return 1LL;
}

BOOL sub_10018C3F8(id a1, NSURL *a2, NSError *a3)
{
  return 1;
}

void sub_10018C70C(id a1)
{
  id v1 = (const char *)_CPLOSLogSubsystem(a1);
  os_log_t v2 = os_log_create(v1, "engine.resourcestorage.filestorage.bucket");
  id v3 = (void *)qword_1002A3C38;
  qword_1002A3C38 = (uint64_t)v2;
}

id sub_10018CE40()
{
  if (qword_1002A3C40 != -1) {
    dispatch_once(&qword_1002A3C40, &stru_100247F30);
  }
  return (id)qword_1002A3C48;
}

uint64_t sub_10018CF14(uint64_t result)
{
  *(void *)(*(void *)(*(void *)(result + 40) + 8LL) + 24LL) = ++*(void *)(*(void *)(result + 32) + 32LL);
  return result;
}

id sub_10018D044(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 32);
  os_log_t v2 = *(void **)(a1 + 40);
  id v4 = *(void **)(v3 + 40);
  if (v4 == v2)
  {
    *(void *)(v3 + 40) = 0LL;

    os_log_t v2 = *(void **)(a1 + 40);
  }

  return [v2 sessionIsDone];
}

void sub_10018D198(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 32);
  os_log_t v2 = *(void **)(a1 + 40);
  if (*(void **)(v3 + 40) == v2)
  {
    if ([*(id *)(a1 + 48) isCPLOperationDeferredError]
      && (id v4 = (id *)(*(void *)(a1 + 32) + 48LL), !*v4))
    {
      objc_storeStrong(v4, *(id *)(a1 + 40));
      v8[0] = _NSConcreteStackBlock;
      v8[1] = 3221225472LL;
      v8[2] = sub_10018D278;
      v8[3] = &unk_10023DDE8;
      id v5 = *(void **)(a1 + 40);
      void v8[4] = *(void *)(a1 + 32);
      id v9 = v5;
      [v9 deferWithBlock:v8];
    }

    else
    {
      [*(id *)(a1 + 40) sessionIsDone];
    }

    uint64_t v6 = *(void *)(a1 + 32);
    char v7 = *(void **)(v6 + 40);
    *(void *)(v6 + 40) = 0LL;
  }

  else
  {
    [v2 sessionIsDone];
  }

void sub_10018D278(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  os_log_t v2 = *(void **)(a1 + 40);
  uint64_t v3 = *(void **)(v1 + 8);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  v7[2] = sub_10018D34C;
  v7[3] = &unk_10023DDE8;
  void v7[4] = v1;
  id v8 = v2;
  id v4 = v7;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_10018E398;
  block[3] = &unk_10023DBC8;
  id v10 = v4;
  id v5 = v3;
  dispatch_block_t v6 = dispatch_block_create(DISPATCH_BLOCK_ENFORCE_QOS_CLASS|DISPATCH_BLOCK_ASSIGN_CURRENT, block);
  dispatch_async(v5, v6);
}

void sub_10018D34C(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 32);
  os_log_t v2 = *(void **)(a1 + 40);
  id v4 = *(void **)(v3 + 48);
  if (v4 == v2)
  {
    objc_storeStrong((id *)(v3 + 40), v4);
    uint64_t v5 = *(void *)(a1 + 32);
    dispatch_block_t v6 = *(void **)(v5 + 48);
    *(void *)(v5 + 4_Block_object_dispose(va, 8) = 0LL;

    id v7 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) abstractObject]);
    [v7 startRequiredSyncSessionNow:*(void *)(a1 + 40)];
  }

  else
  {
    [v2 sessionIsDone];
  }

uint64_t sub_10018D4BC(uint64_t a1)
{
  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterAddObserver( DarwinNotifyCenter,  *(const void **)(a1 + 32),  (CFNotificationCallback)sub_10018D508,  @"com.apple.cpl.test.haschanges",  0LL,  CFNotificationSuspensionBehaviorDeliverImmediately);
  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_10018D508(uint64_t a1, void *a2, uint64_t a3)
{
  id v4 = a2;
  if (!_CPLSilentLogging)
  {
    id v5 = sub_10018CE40();
    dispatch_block_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
    {
      int v8 = 138412546;
      id v9 = v4;
      __int16 v10 = 2112;
      uint64_t v11 = a3;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEBUG,  "%@ got test notification of external changes: %@",  (uint8_t *)&v8,  0x16u);
    }
  }

  id v7 = (void *)objc_claimAutoreleasedReturnValue([v4 abstractObject]);
  [v7 noteServerHasChanges];
}

void sub_10018D6D8(uint64_t a1)
{
  *(_BYTE *)(*(void *)(a1 + 32) + 56LL) = 1;
  os_log_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) abstractObject]);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([v2 engineLibrary]);
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 transport]);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  v8[2] = sub_10018D7C0;
  v8[3] = &unk_100247EE8;
  id v5 = *(void **)(a1 + 40);
  uint64_t v9 = *(void *)(a1 + 32);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  void v6[2] = sub_10018D934;
  v6[3] = &unk_100247F10;
  void v6[4] = v9;
  id v7 = v5;
  [v4 findPersistedInitialSyncSession:v8 completionHandler:v6];
}

void sub_10018D7C0(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = *(void **)(v4 + 8);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472LL;
  void v10[2] = sub_10018D8AC;
  v10[3] = &unk_10023DDE8;
  void v10[4] = v4;
  id v11 = v3;
  dispatch_block_t v6 = v10;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_10018E398;
  block[3] = &unk_10023DBC8;
  id v13 = v6;
  id v7 = v5;
  id v8 = v3;
  dispatch_block_t v9 = dispatch_block_create(DISPATCH_BLOCK_ENFORCE_QOS_CLASS|DISPATCH_BLOCK_ASSIGN_CURRENT, block);
  dispatch_async(v7, v9);
}

void sub_10018D8AC(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 32);
  os_log_t v2 = *(void **)(a1 + 40);
  uint64_t v4 = *(void **)(v3 + 48);
  if (v4 == v2)
  {
    objc_storeStrong((id *)(v3 + 40), v4);
    uint64_t v5 = *(void *)(a1 + 32);
    dispatch_block_t v6 = *(void **)(v5 + 48);
    *(void *)(v5 + 4_Block_object_dispose(va, 8) = 0LL;

    id v7 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) abstractObject]);
    [v7 startRequiredSyncSessionNow:*(void *)(a1 + 40)];
  }

  else
  {
    [v2 sessionIsDone];
  }

void sub_10018D934(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void **)(a1 + 40);
  dispatch_block_t v6 = *(void **)(v4 + 8);
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472LL;
  v11[2] = sub_10018DA30;
  v11[3] = &unk_10023DB10;
  void v11[4] = v4;
  id v12 = v3;
  id v13 = v5;
  id v7 = v11;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_10018E398;
  block[3] = &unk_10023DBC8;
  id v15 = v7;
  id v8 = v6;
  id v9 = v3;
  dispatch_block_t v10 = dispatch_block_create(DISPATCH_BLOCK_ENFORCE_QOS_CLASS|DISPATCH_BLOCK_ASSIGN_CURRENT, block);
  dispatch_async(v8, v10);
}

id sub_10018DA30(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (!*(_BYTE *)(v2 + 56)) {
    return [*(id *)(a1 + 40) sessionWontHappen];
  }
  *(_BYTE *)(v2 + 56) = 0;
  objc_storeStrong((id *)(*(void *)(a1 + 32) + 48LL), *(id *)(a1 + 40));
  return (id)(*(uint64_t (**)(void))(*(void *)(a1 + 48) + 16LL))();
}

void sub_10018DB58(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*(_BYTE *)(v2 + 56))
  {
    *(_BYTE *)(v2 + 56) = 0;
    id v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) abstractObject]);
    id v3 = (void *)objc_claimAutoreleasedReturnValue([v8 engineLibrary]);
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 transport]);
    [v4 dropPersistedInitialSyncSession];
  }

  else
  {
    uint64_t v5 = *(void **)(v2 + 48);
    if (v5)
    {
      [v5 sessionWontHappen];
      uint64_t v6 = *(void *)(a1 + 32);
      id v7 = *(void **)(v6 + 48);
      *(void *)(v6 + 4_Block_object_dispose(va, 8) = 0LL;
    }
  }

uint64_t sub_10018DCF8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = *(dispatch_source_s **)(v2 + 16);
  if (v3)
  {
    dispatch_source_cancel(v3);
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = *(void **)(v4 + 16);
    *(void *)(v4 + 16) = 0LL;

    uint64_t v2 = *(void *)(a1 + 32);
  }

  uint64_t v6 = *(void **)(v2 + 48);
  if (v6)
  {
    if (*(_BYTE *)(a1 + 48)) {
      [v6 sessionWontHappen];
    }
    else {
      [v6 engineIsClosing];
    }
    uint64_t v7 = *(void *)(a1 + 32);
    id v8 = *(void **)(v7 + 48);
    *(void *)(v7 + 4_Block_object_dispose(va, 8) = 0LL;
  }

  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterRemoveObserver( DarwinNotifyCenter,  *(const void **)(a1 + 32),  @"com.apple.cpl.test.haschanges",  0LL);
  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_10018DF14(uint64_t a1)
{
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 48LL);
  if (v2)
  {
    [v2 sessionWontHappen];
    uint64_t v3 = *(void *)(a1 + 32);
    uint64_t v4 = *(dispatch_source_s **)(v3 + 16);
    if (v4)
    {
      dispatch_source_cancel(v4);
      uint64_t v5 = *(void *)(a1 + 32);
      uint64_t v6 = *(void **)(v5 + 16);
      *(void *)(v5 + 16) = 0LL;

      uint64_t v3 = *(void *)(a1 + 32);
    }

    uint64_t v7 = *(void **)(v3 + 48);
    *(void *)(v3 + 4_Block_object_dispose(va, 8) = 0LL;
  }

  [*(id *)(a1 + 40) timeIntervalSinceNow];
  if (v8 < 0.100000001) {
    double v8 = 0.100000001;
  }
  uint64_t v9 = 60000000000LL;
  if (v8 < 600.0) {
    uint64_t v9 = 5000000000LL;
  }
  if (v8 >= 60.0) {
    uint64_t v10 = v9;
  }
  else {
    uint64_t v10 = 0LL;
  }
  double v11 = v8 * 1000000000.0;
  objc_storeStrong((id *)(*(void *)(a1 + 32) + 48LL), *(id *)(a1 + 48));
  id v12 = dispatch_source_create( (dispatch_source_type_t)&_dispatch_source_type_timer,  0LL,  0LL,  *(dispatch_queue_t *)(*(void *)(a1 + 32) + 8LL));
  v19[0] = _NSConcreteStackBlock;
  v19[1] = 3221225472LL;
  v19[2] = sub_10018E0D0;
  v19[3] = &unk_10023DDE8;
  id v13 = *(id *)(a1 + 48);
  uint64_t v14 = *(void *)(a1 + 32);
  id v20 = v13;
  uint64_t v21 = v14;
  dispatch_source_set_event_handler(v12, v19);
  dispatch_time_t v15 = dispatch_walltime(0LL, (uint64_t)v11);
  dispatch_source_set_timer(v12, v15, 0xFFFFFFFFFFFFFFFFLL, v10);
  uint64_t v16 = *(void *)(a1 + 32);
  uint64_t v17 = *(void **)(v16 + 16);
  *(void *)(v16 + 16) = v12;
  __int128 v18 = v12;

  dispatch_resume(*(dispatch_object_t *)(*(void *)(a1 + 32) + 16LL));
}

void sub_10018E0D0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  if (*(void *)(a1 + 32) == *(void *)(v1 + 48))
  {
    dispatch_source_cancel(*(dispatch_source_t *)(v1 + 16));
    objc_storeStrong((id *)(*(void *)(a1 + 40) + 40LL), *(id *)(a1 + 32));
    uint64_t v3 = *(void *)(a1 + 40);
    uint64_t v4 = *(void **)(v3 + 48);
    *(void *)(v3 + 4_Block_object_dispose(va, 8) = 0LL;

    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) abstractObject]);
    [v5 startRequiredSyncSessionNow:*(void *)(a1 + 32)];

    uint64_t v6 = *(void *)(a1 + 40);
    uint64_t v7 = *(void **)(v6 + 16);
    *(void *)(v6 + 16) = 0LL;
  }

void sub_10018E260(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 40);
  uint64_t v3 = *(void **)(*(void *)(a1 + 32) + 48LL);
  if (v3 == v2)
  {
    [v3 sessionWontHappen];
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = *(dispatch_source_s **)(v4 + 16);
    if (v5)
    {
      dispatch_source_cancel(v5);
      uint64_t v6 = *(void *)(a1 + 32);
      uint64_t v7 = *(void **)(v6 + 16);
      *(void *)(v6 + 16) = 0LL;

      uint64_t v4 = *(void *)(a1 + 32);
    }

    double v8 = *(void **)(v4 + 48);
    *(void *)(v4 + 4_Block_object_dispose(va, 8) = 0LL;
  }

void sub_10018E36C(id a1)
{
  uint64_t v1 = (const char *)_CPLOSLogSubsystem(a1);
  os_log_t v2 = os_log_create(v1, "engine.scheduler.base");
  uint64_t v3 = (void *)qword_1002A3C48;
  qword_1002A3C48 = (uint64_t)v2;
}

void sub_10018E398(uint64_t a1)
{
  os_log_t v2 = objc_autoreleasePoolPush();
  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
  objc_autoreleasePoolPop(v2);
}

void sub_10018E3CC(uint64_t a1, uint64_t *a2)
{
  if (!_CPLSilentLogging)
  {
    uint64_t v5 = __CPLGenericOSLogDomain();
    uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    if (sub_100004A78(v6)) {
      sub_100004A64((void *)&_mh_execute_header, v7, v8, "APS connection should not be set here", v9, v10, v11, v12, 0);
    }
  }

  id v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
  uint64_t v14 = *(void *)(a1 + 56);
  uint64_t v15 = *a2;
  uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Daemon/CPLCloudKitPushNoti ficationCenter.m"));
  [v13 handleFailureInMethod:v14 object:v15 file:v16 lineNumber:126 description:@"APS connection should not be set here"];

  abort();
}

void sub_10018E488(uint64_t a1, uint64_t *a2)
{
  if (!_CPLSilentLogging)
  {
    uint64_t v5 = __CPLGenericOSLogDomain();
    uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    if (sub_100004A78(v6)) {
      sub_100004A64((void *)&_mh_execute_header, v7, v8, "Idle APS connection should be set here", v9, v10, v11, v12, 0);
    }
  }

  id v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
  uint64_t v14 = *(void *)(a1 + 56);
  uint64_t v15 = *a2;
  uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Daemon/CPLCloudKitPushNoti ficationCenter.m"));
  [v13 handleFailureInMethod:v14 object:v15 file:v16 lineNumber:112 description:@"Idle APS connection should be set here"];

  abort();
}

void sub_10018E544(uint64_t a1, uint64_t *a2)
{
  if (!_CPLSilentLogging)
  {
    uint64_t v5 = __CPLGenericOSLogDomain();
    uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    if (sub_100004A78(v6)) {
      sub_100004A64( (void *)&_mh_execute_header,  v7,  v8,  "Idle APS environment should be set here",  v9,  v10,  v11,  v12,  0);
    }
  }

  id v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
  uint64_t v14 = *(void *)(a1 + 56);
  uint64_t v15 = *a2;
  uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Daemon/CPLCloudKitPushNoti ficationCenter.m"));
  [v13 handleFailureInMethod:v14 object:v15 file:v16 lineNumber:113 description:@"Idle APS environment should be set here"];

  abort();
}

void sub_10018E600(uint64_t a1)
{
  if (!_CPLSilentLogging)
  {
    uint64_t v2 = __CPLGenericOSLogDomain();
    uint64_t v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t v9 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Missing bundle identifier", v9, 2u);
    }
  }

  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
  uint64_t v7 = a1 + 32;
  uint64_t v5 = *(void *)(a1 + 32);
  uint64_t v6 = *(void *)(v7 + 8);
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Daemon/CPLDaemon.m"));
  [v4 handleFailureInMethod:v6 object:v5 file:v8 lineNumber:378 description:@"Missing bundle identifier"];

  abort();
}

void sub_10018E6CC(void *a1, uint64_t a2, uint64_t a3)
{
  if (!_CPLSilentLogging)
  {
    uint64_t v6 = __CPLGenericOSLogDomain();
    uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([a1 libraryIdentifier]);
      *(_DWORD *)__int128 buf = 138412290;
      id v13 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "No engine provided for %@", buf, 0xCu);
    }
  }

  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Daemon/CPLEngineWrapper.m"));
  uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([a1 libraryIdentifier]);
  [v9 handleFailureInMethod:a2, a3, v10, 65, @"No engine provided for %@", v11 object file lineNumber description];

  abort();
}

void sub_10018E7E8(uint64_t a1, uint64_t a2)
{
  if (!_CPLSilentLogging)
  {
    uint64_t v4 = __CPLGenericOSLogDomain();
    uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__int128 buf = 138412290;
      uint64_t v9 = a1;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_ERROR,  "Trying to get a proxy for %@ but the connection is closed",  buf,  0xCu);
    }
  }

  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Daemon/CPLDaemonProcessProtocol.m"));
  [v6 handleFailureInMethod:a2, a1, v7, 82, @"Trying to get a proxy for %@ but the connection is closed", a1 object file lineNumber description];

  abort();
}

void sub_10018E8D4(uint64_t a1, uint64_t a2)
{
  if (!_CPLSilentLogging)
  {
    uint64_t v4 = __CPLGenericOSLogDomain();
    uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t v8 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_ERROR,  "There are more closing wrappers than total wrappers",  v8,  2u);
    }
  }

  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Daemon/CPLEngineWrapperArray.m"));
  [v6 handleFailureInMethod:a1 object:a2 file:v7 lineNumber:296 description:@"There are more closing wrappers than total wrappers"];

  abort();
}

void sub_10018E9A0(uint64_t *a1, uint64_t a2)
{
  if (!_CPLSilentLogging)
  {
    uint64_t v4 = __CPLGenericOSLogDomain();
    uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__int128 buf = 138412290;
      id v12 = (id)sub_1000228A8();
      id v6 = v12;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_ERROR,  "Incorrect class for library manager implementation: %@",  buf,  0xCu);
    }
  }

  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
  uint64_t v8 = *(void *)(a2 + 96);
  uint64_t v9 = *a1;
  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Daemon/CPLDaemonLibraryManager.m"));
  [v7 handleFailureInMethod:v8, v9, v10, 296, @"Incorrect class for library manager implementation: %@", sub_1000228A8() object file lineNumber description];

  abort();
}

void sub_10018EAAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Daemon/CPLBGSTActivityReport.m"));
  objc_msgSend( v6,  "handleFailureInMethod:object:file:lineNumber:description:",  a1,  a2,  v7,  132,  @"Invalid phase %ld",  a3);

  abort();
}

void sub_10018EB30(uint64_t a1, uint64_t a2)
{
  if (!_CPLSilentLogging)
  {
    uint64_t v7 = __CPLGenericOSLogDomain();
    uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
    if (sub_100004A78(v8))
    {
      uint64_t v9 = (void *)sub_1000235A0();
      sub_1000235C0(v9);
      uint64_t v10 = (void *)sub_1000235A8();
      id v11 = sub_100023574(v10);
      sub_10002358C((void *)&_mh_execute_header, v12, v13, "%@ only supports %@", v14, v15, v16, v17, v20, v21, v22);
    }
  }

  __int128 v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
  __int128 v19 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Daemon/CPLBGSTActivityReport.m"));
  sub_1000235A0();
  [v18 handleFailureInMethod:a2, a1, v19, 186, @"%@ only supports %@", v3, sub_1000235B4() object file lineNumber description];

  abort();
}

void sub_10018EC2C(uint64_t a1, uint64_t a2)
{
  if (!_CPLSilentLogging)
  {
    uint64_t v7 = __CPLGenericOSLogDomain();
    uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
    if (sub_100004A78(v8))
    {
      uint64_t v9 = (void *)sub_1000235A0();
      sub_1000235C0(v9);
      uint64_t v10 = (void *)sub_1000235A8();
      id v11 = sub_100023574(v10);
      sub_10002358C((void *)&_mh_execute_header, v12, v13, "%@ only supports %@", v14, v15, v16, v17, v20, v21, v22);
    }
  }

  __int128 v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
  __int128 v19 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Daemon/CPLBGSTActivityReport.m"));
  sub_1000235A0();
  [v18 handleFailureInMethod:a2, a1, v19, 198, @"%@ only supports %@", v3, sub_1000235B4() object file lineNumber description];

  abort();
}

void sub_10018ED28(void *a1, uint64_t a2, uint64_t a3)
{
  if (!_CPLSilentLogging)
  {
    uint64_t v6 = __CPLGenericOSLogDomain();
    uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([a1 asPlist]);
      *(_DWORD *)__int128 buf = 138412546;
      int v13 = v8;
      __int16 v14 = 2112;
      uint64_t v15 = a2;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "Failed to serialize %@: %@", buf, 0x16u);
    }
  }

  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Daemon/CPLEngineParameters.m"));
  id v11 = (void *)objc_claimAutoreleasedReturnValue([a1 asPlist]);
  [v9 handleFailureInMethod:a3, a1, v10, 141, @"Failed to serialize %@: %@", v11, a2 object file lineNumber description];

  abort();
}

void sub_10018EE50( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, __int128 a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21)
{
  a20 = v22;
  a21 = v23;
  objc_super v25 = v24;
  if (!_CPLSilentLogging)
  {
    uint64_t v26 = __CPLGenericOSLogDomain();
    unint64_t v27 = (os_log_s *)objc_claimAutoreleasedReturnValue(v26);
    if (sub_100004A78(v27))
    {
      uint64_t v28 = (void *)objc_claimAutoreleasedReturnValue([v25 currentActivity]);
      id v29 = (void *)objc_claimAutoreleasedReturnValue([v28 task]);
      LODWORD(a11) = 138412290;
      *(void *)((char *)&a11 + 4) = v29;
      sub_10002B4B0((void *)&_mh_execute_header, v21, v30, "Dropping rescheduler while %@ is running", (uint8_t *)&a11);
    }
  }

  id v31 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
  id v32 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Daemon/CPLBGSTRescheduler.m"));
  uint64_t v33 = (void *)objc_claimAutoreleasedReturnValue([v25 currentActivity]);
  id v34 = (void *)objc_claimAutoreleasedReturnValue([v33 task]);
  objc_msgSend((id)sub_10002B4BC(), "handleFailureInMethod:object:file:lineNumber:description:");

  abort();
}

void sub_10018EF70( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, __int128 a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21)
{
  a20 = v22;
  a21 = v23;
  objc_super v25 = v24;
  if (!_CPLSilentLogging)
  {
    uint64_t v26 = __CPLGenericOSLogDomain();
    unint64_t v27 = (os_log_s *)objc_claimAutoreleasedReturnValue(v26);
    if (sub_100004A78(v27))
    {
      uint64_t v28 = (void *)objc_claimAutoreleasedReturnValue([v25 taskIdentifier]);
      LODWORD(a11) = 138412290;
      *(void *)((char *)&a11 + 4) = v28;
      sub_10002B4B0( (void *)&_mh_execute_header,  v21,  v29,  "Dropping rescheduler for %@ while there are still clients interested",  (uint8_t *)&a11);
    }
  }

  uint64_t v30 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
  id v31 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Daemon/CPLBGSTRescheduler.m"));
  id v32 = (void *)objc_claimAutoreleasedReturnValue([v25 taskIdentifier]);
  objc_msgSend((id)sub_10002B4BC(), "handleFailureInMethod:object:file:lineNumber:description:");

  abort();
}

void sub_10018F070(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Daemon/CPLBGSTRescheduler.m"));
  [v6 handleFailureInMethod:a1, a2, v7, 219, @"Acquired %@ for %@ but while we are not interested", a3, a2 object file lineNumber description];

  abort();
}

void sub_10018F0F4(uint64_t a1)
{
  if (!_CPLSilentLogging)
  {
    uint64_t v3 = __CPLGenericOSLogDomain();
    uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
    if (sub_100004A78(v4))
    {
      int v8 = 138412290;
      uint64_t v9 = a1;
      sub_10002B4B0((void *)&_mh_execute_header, v1, v5, "Acquired Task for %@ twice", (uint8_t *)&v8);
    }
  }

  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Daemon/CPLBGSTRescheduler.m"));
  objc_msgSend((id)sub_10002B4BC(), "handleFailureInMethod:object:file:lineNumber:description:", a1);

  abort();
}

void sub_10018F1CC()
{
  if (!_CPLSilentLogging)
  {
    uint64_t v1 = __CPLGenericOSLogDomain();
    uint64_t v2 = (os_log_s *)objc_claimAutoreleasedReturnValue(v1);
    if (sub_100004A78(v2)) {
      sub_100004A64((void *)&_mh_execute_header, v3, v4, "Missing acquire date when expiring", v5, v6, v7, v8, 0);
    }
  }

  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Daemon/CPLBGSTRescheduler.m"));
  objc_msgSend((id)sub_10002B4BC(), "handleFailureInMethod:object:file:lineNumber:description:");

  abort();
}

#error "10018F2FC: call analysis failed (funcsize=52)"
#error "10018F3DC: call analysis failed (funcsize=52)"
void sub_10018F444( uint64_t a1,  uint64_t a2,  uint64_t a3,  uint64_t a4,  uint64_t a5,  uint64_t a6,  uint64_t a7,  uint64_t a8,  uint64_t a9,  uint64_t a10,  __int128 buf,  uint64_t a12,  uint64_t a13,  uint64_t a14,  uint64_t a15,  uint64_t a16,  uint64_t a17,  uint64_t a18,  uint64_t a19,  uint64_t a20,  uint64_t a21)
{
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  os_log_s *v28;
  uint64_t v29;
  void *v30;
  void *v31;
  sub_10002B4D0();
  a20 = v21;
  a21 = v22;
  int v24 = v23;
  uint64_t v26 = v25;
  if (!_CPLSilentLogging)
  {
    unint64_t v27 = __CPLGenericOSLogDomain();
    uint64_t v28 = (os_log_s *)objc_claimAutoreleasedReturnValue(v27);
    if (sub_10002B4A8(v28))
    {
      uint64_t v29 = *(void *)(v24 + 104);
      LODWORD(buf) = 138412546;
      *(void *)((char *)&buf + 4) = v26;
      WORD6(buf) = 2112;
      *(void *)((char *)&buf + 14) = v29;
      _os_log_impl( (void *)&_mh_execute_header,  v28,  OS_LOG_TYPE_ERROR,  "Trying to deregister for %@ while we are registered for %@",  (uint8_t *)&buf,  0x16u);
    }
  }

  uint64_t v30 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
  id v31 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Daemon/CPLBGSTRescheduler.m"));
  objc_msgSend((id)sub_10002B4E4(), "handleFailureInMethod:object:file:lineNumber:description:");

  abort();
}

void sub_10018F540()
{
  if (!_CPLSilentLogging)
  {
    uint64_t v1 = __CPLGenericOSLogDomain();
    uint64_t v2 = (os_log_s *)objc_claimAutoreleasedReturnValue(v1);
    if (sub_100004A78(v2)) {
      sub_100004A64((void *)&_mh_execute_header, v3, v4, "Acquired task without a request", v5, v6, v7, v8, 0);
    }
  }

  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Daemon/CPLBGSTRescheduler.m"));
  objc_msgSend((id)sub_10002B4BC(), "handleFailureInMethod:object:file:lineNumber:description:");

  abort();
}

void sub_10018F5F0()
{
  if (!_CPLSilentLogging)
  {
    uint64_t v1 = __CPLGenericOSLogDomain();
    uint64_t v2 = (os_log_s *)objc_claimAutoreleasedReturnValue(v1);
    if (sub_100004A78(v2)) {
      sub_100004A64( (void *)&_mh_execute_header,  v3,  v4,  "Acquired task without having a current registered task identifier",  v5,  v6,  v7,  v8,  0);
    }
  }

  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Daemon/CPLBGSTRescheduler.m"));
  objc_msgSend((id)sub_10002B4BC(), "handleFailureInMethod:object:file:lineNumber:description:");

  abort();
}

void sub_10018F6A0()
{
  if (!_CPLSilentLogging)
  {
    uint64_t v1 = __CPLGenericOSLogDomain();
    uint64_t v2 = (os_log_s *)objc_claimAutoreleasedReturnValue(v1);
    if (sub_100004A78(v2)) {
      sub_100004A64( (void *)&_mh_execute_header,  v3,  v4,  "Acquired task without an interested rescheduler",  v5,  v6,  v7,  v8,  0);
    }
  }

  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Daemon/CPLBGSTRescheduler.m"));
  objc_msgSend((id)sub_10002B4BC(), "handleFailureInMethod:object:file:lineNumber:description:");

  abort();
}

void sub_10018F750()
{
  if (!_CPLSilentLogging)
  {
    uint64_t v1 = __CPLGenericOSLogDomain();
    uint64_t v2 = (os_log_s *)objc_claimAutoreleasedReturnValue(v1);
    if (sub_100004A78(v2)) {
      sub_100004A64((void *)&_mh_execute_header, v3, v4, "Missing task or error", v5, v6, v7, v8, 0);
    }
  }

  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Daemon/CPLBGSTRescheduler.m"));
  objc_msgSend((id)sub_10002B4BC(), "handleFailureInMethod:object:file:lineNumber:description:");

  abort();
}

#error "10018F874: call analysis failed (funcsize=50)"
#error "10018F950: call analysis failed (funcsize=52)"
#error "10018FA30: call analysis failed (funcsize=52)"
void sub_10018FA98(uint64_t a1)
{
  void *v1;
  uint64_t v2;
  os_log_s *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  if (!_CPLSilentLogging)
  {
    uint64_t v2 = __CPLGenericOSLogDomain(a1);
    uint64_t v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
    if (sub_100004A78(v3)) {
      sub_100004A64((void *)&_mh_execute_header, v4, v5, "Trying to cancel a nil task request", v6, v7, v8, v9, 0);
    }
  }

  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
  id v11 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Daemon/CPLBGSTRescheduler.m"));
  objc_msgSend((id)sub_10002B4BC(), "handleFailureInMethod:object:file:lineNumber:description:");

  abort();
}

void sub_10018FB48(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Daemon/CPLBGSTRescheduler.m"));
  [v8 handleFailureInMethod:a2, a3, v9, 785, @"Failed to cancel %@: %@", *a1, a4 object file lineNumber description];

  abort();
}

void sub_10018FBD4(uint64_t a1)
{
  if (!_CPLSilentLogging)
  {
    uint64_t v2 = __CPLGenericOSLogDomain(a1);
    uint64_t v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
    if (sub_100004A78(v3)) {
      sub_100004A64((void *)&_mh_execute_header, v4, v5, "Trying to update an unknown task request", v6, v7, v8, v9, 0);
    }
  }

  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
  id v11 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Daemon/CPLBGSTRescheduler.m"));
  objc_msgSend((id)sub_10002B4BC(), "handleFailureInMethod:object:file:lineNumber:description:");

  abort();
}

void sub_10018FC84( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, __int128 a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21)
{
  a20 = v22;
  a21 = v24;
  uint64_t v26 = v25;
  unint64_t v27 = v23;
  if (!_CPLSilentLogging)
  {
    uint64_t v28 = __CPLGenericOSLogDomain(v23);
    uint64_t v29 = (os_log_s *)objc_claimAutoreleasedReturnValue(v28);
    if (sub_100004A78(v29))
    {
      uint64_t v31 = *(void *)(*v27 + 48);
      LODWORD(a11) = 138412290;
      *(void *)((char *)&a11 + 4) = v31;
      sub_10002B4B0((void *)&_mh_execute_header, v21, v30, "Initial %@ should have been cleared", (uint8_t *)&a11);
    }
  }

  id v32 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
  uint64_t v33 = *(void *)(v26 + 40);
  uint64_t v34 = *v27;
  id v35 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Daemon/CPLBGSTRescheduler.m"));
  [v32 handleFailureInMethod:v33 object:v34 file:v35 lineNumber:893 description:@"Initial %@ should have been cleared"];

  abort();
}

void sub_10018FD78(void *a1, uint64_t a2)
{
  if (!_CPLSilentLogging)
  {
    uint64_t v4 = __CPLGenericOSLogDomain(a1);
    uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      uint64_t v7 = *a1;
      int v12 = 138412290;
      uint64_t v13 = v7;
      sub_10002B4B0( (void *)&_mh_execute_header,  v5,  v6,  "Trying to acquire CloudKit rescheduler manager for %@ twice",  (uint8_t *)&v12);
    }
  }

  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
  uint64_t v10 = *(void *)(a2 + 64);
  uint64_t v9 = *(void *)(a2 + 72);
  id v11 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Daemon/CPLCloudKitReschedu lerCoordinator.m"));
  [v8 handleFailureInMethod:v10, v9, v11, 69, @"Trying to acquire CloudKit rescheduler manager for %@ twice", *a1 object file lineNumber description];

  abort();
}

void sub_10018FE6C(uint64_t a1)
{
  if (!_CPLSilentLogging)
  {
    uint64_t v2 = __CPLGenericOSLogDomain(a1);
    uint64_t v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      uint64_t v4 = NSStringFromSelector(*(SEL *)(a1 + 32));
      uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
      int v13 = 138412290;
      __int16 v14 = v5;
      sub_10002B4B0((void *)&_mh_execute_header, v3, v6, "Calling %@ too many times", (uint8_t *)&v13);
    }
  }

  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
  uint64_t v8 = *(void *)(a1 + 32);
  uint64_t v9 = *(void *)(a1 + 40);
  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Daemon/CPLCloudKitReschedu lerCoordinator.m"));
  id v11 = NSStringFromSelector(*(SEL *)(a1 + 32));
  int v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
  [v7 handleFailureInMethod:v8, v9, v10, 118, @"Calling %@ too many times", v12 object file lineNumber description];

  abort();
}

void sub_10018FF7C(uint64_t *a1, uint64_t a2)
{
  if (!_CPLSilentLogging)
  {
    id v5 = sub_100030230();
    uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    if (sub_100004A78(v6))
    {
      uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*a1 + 312) scopeIdentifier]);
      uint64_t v8 = *(void *)(a2 + 48);
      *(_DWORD *)__int128 buf = 138412546;
      uint64_t v15 = v7;
      __int16 v16 = 2112;
      uint64_t v17 = v8;
      _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_ERROR,  "Zone for %@ (%@) was not actually created",  buf,  0x16u);
    }
  }

  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
  uint64_t v10 = *(void *)(a2 + 64);
  uint64_t v11 = *a1;
  int v12 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/CloudKit/C PLCloudKitFetchTransportScopeTask.m"));
  int v13 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*a1 + 312) scopeIdentifier]);
  [v9 handleFailureInMethod:v10, v11, v12, 80, @"Zone for %@ (%@) was not actually created", v13, *(void *)(a2 + 48) object file lineNumber description];

  abort();
}

void sub_1001900C0(uint64_t a1, uint64_t *a2)
{
  if (!_CPLSilentLogging)
  {
    id v5 = sub_100030230();
    uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    if (sub_100004A78(v6)) {
      sub_100004A64( (void *)&_mh_execute_header,  v7,  v8,  "Zone ID for Zone should have been determined by now",  v9,  v10,  v11,  v12,  0);
    }
  }

  int v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
  uint64_t v14 = *(void *)(a1 + 104);
  uint64_t v15 = *a2;
  __int16 v16 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/CloudKit/C PLCloudKitFetchTransportScopeTask.m"));
  [v13 handleFailureInMethod:v14 object:v15 file:v16 lineNumber:292 description:@"Zone ID for Zone should have been determined by now"];

  abort();
}

void sub_10019017C(uint64_t a1, uint64_t *a2)
{
  if (!_CPLSilentLogging)
  {
    id v5 = sub_100030230();
    uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    if (sub_100004A78(v6)) {
      sub_100004A64((void *)&_mh_execute_header, v7, v8, "Zone should have been fetched by now", v9, v10, v11, v12, 0);
    }
  }

  int v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
  uint64_t v14 = *(void *)(a1 + 104);
  uint64_t v15 = *a2;
  __int16 v16 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/CloudKit/C PLCloudKitFetchTransportScopeTask.m"));
  [v13 handleFailureInMethod:v14 object:v15 file:v16 lineNumber:263 description:@"Zone should have been fetched by now"];

  abort();
}

#error "1001902A8: call analysis failed (funcsize=49)"
void sub_10019030C(uint64_t a1, uint64_t a2)
{
  id v4;
  os_log_s *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  int v10;
  uint64_t v11;
  if (!_CPLSilentLogging)
  {
    uint64_t v4 = sub_100032740();
    id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
    if (sub_10002B4A8(v5))
    {
      uint64_t v7 = *(void *)(a1 + 128);
      uint64_t v10 = 138412290;
      uint64_t v11 = v7;
      sub_10002B4B0( (void *)&_mh_execute_header,  v5,  v6,  "Trying to delete shared record for %@ without any shared record ID",  (uint8_t *)&v10);
    }
  }

  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/CloudKit/CP LCKBatchUploadPlanner.m"));
  [v8 handleFailureInMethod:a2, a1, v9, 456, @"Trying to delete shared record for %@ without any shared record ID", *(void *)(a1 + 128) object file lineNumber description];

  abort();
}

#error "100190464: call analysis failed (funcsize=49)"
#error "100190538: call analysis failed (funcsize=49)"
#error "10019060C: call analysis failed (funcsize=49)"
void sub_100190670( uint64_t a1,  uint64_t a2,  uint64_t a3,  uint64_t a4,  uint64_t a5,  uint64_t a6,  uint64_t a7,  uint64_t a8,  uint64_t a9,  uint64_t a10,  __int128 a11,  uint64_t a12,  uint64_t a13,  uint64_t a14,  uint64_t a15,  uint64_t a16,  uint64_t a17,  uint64_t a18,  uint64_t a19,  uint64_t a20,  uint64_t a21)
{
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  id v28;
  os_log_s *v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  sub_10002B4D0();
  a20 = v21;
  a21 = v22;
  uint64_t v24 = v23;
  uint64_t v26 = v25;
  if ((v27 & 1) != 0)
  {
    uint64_t v28 = sub_100032740();
    uint64_t v29 = (os_log_s *)objc_claimAutoreleasedReturnValue(v28);
    if (sub_10002B4A8(v29))
    {
      LODWORD(a11) = 138412290;
      *(void *)((char *)&a11 + 4) = v26;
      sub_10002B4B0((void *)&_mh_execute_header, v29, v30, "%@ was not merged but actually copied", (uint8_t *)&a11);
    }
  }

  uint64_t v31 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
  uint64_t v34 = v24 + 40;
  id v32 = *(void *)(v24 + 40);
  uint64_t v33 = *(void *)(v34 + 8);
  id v35 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/CloudKit/C PLCKBatchUploadPlanner.m"));
  [v31 handleFailureInMethod:v33 object:v32 file:v35 lineNumber:786 description:@"%@ was not merged but actually copied"];

  abort();
}

void sub_100190748( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, __int128 a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21)
{
  a20 = v21;
  a21 = v22;
  uint64_t v24 = v23;
  uint64_t v26 = v25;
  if ((v27 & 1) != 0)
  {
    id v28 = sub_100032740();
    uint64_t v29 = (os_log_s *)objc_claimAutoreleasedReturnValue(v28);
    if (sub_10002B4A8(v29))
    {
      LODWORD(a11) = 138412290;
      *(void *)((char *)&a11 + 4) = v26;
      sub_10002B4B0((void *)&_mh_execute_header, v29, v30, "%@ was not merged but actually copied", (uint8_t *)&a11);
    }
  }

  uint64_t v31 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
  uint64_t v34 = v24 + 40;
  uint64_t v32 = *(void *)(v24 + 40);
  uint64_t v33 = *(void *)(v34 + 8);
  id v35 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/CloudKit/C PLCKBatchUploadPlanner.m"));
  [v31 handleFailureInMethod:v33 object:v32 file:v35 lineNumber:966 description:@"%@ was not merged but actually copied"];

  abort();
}

void sub_100190820( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, __int128 a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21)
{
  a20 = v21;
  a21 = v22;
  uint64_t v24 = v23;
  uint64_t v26 = v25;
  if (!_CPLSilentLogging)
  {
    id v27 = sub_100032740();
    id v28 = (os_log_s *)objc_claimAutoreleasedReturnValue(v27);
    if (sub_10002B4A8(v28))
    {
      uint64_t v29 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v26 + 48) otherScopedIdentifier]);
      LODWORD(a11) = 138412290;
      *(void *)((char *)&a11 + 4) = v29;
      sub_10002B4B0( (void *)&_mh_execute_header,  v28,  v30,  "Trying to piggy-back on updating %@ but found no such record in the list of shared record to upload",  (uint8_t *)&a11);
    }
  }

  uint64_t v31 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
  uint64_t v32 = *(void *)(v26 + 80);
  uint64_t v33 = *v24;
  uint64_t v34 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/CloudKit/C PLCKBatchUploadPlanner.m"));
  id v35 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v26 + 48) otherScopedIdentifier]);
  [v31 handleFailureInMethod:v32 object:v33 file:v34 lineNumber:1024 description:@"Trying to piggy-back on updating %@ but found no such record in the list of shared record to upload"];

  abort();
}

#error "1001909A0: call analysis failed (funcsize=49)"
void sub_100190A04( uint64_t a1,  uint64_t a2,  uint64_t a3,  uint64_t a4,  uint64_t a5,  uint64_t a6,  uint64_t a7,  uint64_t a8,  uint64_t a9,  uint64_t a10,  __int128 buf,  uint64_t a12,  uint64_t a13,  uint64_t a14,  uint64_t a15,  uint64_t a16,  uint64_t a17,  uint64_t a18,  uint64_t a19,  uint64_t a20,  uint64_t a21)
{
  os_log_s *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  os_log_s *v29;
  uint64_t v30;
  void *v31;
  void *v32;
  sub_10002B4D0();
  a20 = v22;
  a21 = v23;
  uint64_t v25 = v24;
  id v27 = v26;
  if (!_CPLSilentLogging)
  {
    id v28 = sub_100032740();
    uint64_t v29 = (os_log_s *)objc_claimAutoreleasedReturnValue(v28);
    if (sub_10003A438(v29))
    {
      uint64_t v30 = *(void *)(v25 + 128);
      LODWORD(buf) = 138412546;
      *(void *)((char *)&buf + 4) = v27;
      WORD6(buf) = 2112;
      *(void *)((char *)&buf + 14) = v30;
      _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_ERROR,  "Trying to update %@ for %@ but it is not a supported key",  (uint8_t *)&buf,  0x16u);
    }
  }

  uint64_t v31 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
  uint64_t v32 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/CloudKit/C PLCKBatchUploadPlanner.m"));
  objc_msgSend((id)sub_10002B4E4(), "handleFailureInMethod:object:file:lineNumber:description:");

  abort();
}

#error "100190B6C: call analysis failed (funcsize=49)"
#error "100190C40: call analysis failed (funcsize=49)"
#error "100190D14: call analysis failed (funcsize=49)"
#error "100190DE8: call analysis failed (funcsize=49)"
void sub_100190E4C(uint64_t a1, uint64_t a2)
{
  os_log_s *v2;
  id v5;
  os_log_s *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint8_t buf[4];
  uint64_t v12;
  if (!_CPLSilentLogging)
  {
    id v5 = sub_10003AF08();
    uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    if (sub_100004A78(v6))
    {
      *(_DWORD *)__int128 buf = 138412290;
      uint64_t v12 = a1;
      _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_ERROR,  "Record for %@ has not been downloaded",  buf,  0xCu);
    }
  }

  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
  uint64_t v8 = *(void *)(a2 + 104);
  uint64_t v9 = *(void *)(a2 + 48);
  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/CloudKit/C PLCloudKitTransportTask+CKRecordCopy.m"));
  [v7 handleFailureInMethod:v8, v9, v10, 132, @"Record for %@ has not been downloaded", a1 object file lineNumber description];

  abort();
}

void sub_100190F3C(uint64_t a1, uint64_t *a2)
{
  if (!_CPLSilentLogging)
  {
    id v5 = sub_10003AF08();
    uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    if (sub_100004A78(v6))
    {
      *(_WORD *)uint64_t v11 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_ERROR,  "Source recordIDs have not been populated correctly",  v11,  2u);
    }
  }

  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
  uint64_t v8 = *(void *)(a1 + 80);
  uint64_t v9 = *a2;
  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/CloudKit/C PLCloudKitTransportTask+CKRecordCopy.m"));
  [v7 handleFailureInMethod:v8 object:v9 file:v10 lineNumber:263 description:@"Source recordIDs have not been populated correctly"];

  abort();
}

void sub_100191008(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!_CPLSilentLogging)
  {
    uint64_t v6 = __CPLGenericOSLogDomain(a1);
    uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__int128 buf = 138412290;
      uint64_t v11 = a1;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_ERROR,  "Failed to find target for resource-ful record %@",  buf,  0xCu);
    }
  }

  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/CloudKit/CP LCKRecordBuilder.m"));
  [v8 handleFailureInMethod:a2, a3, v9, 48, @"Failed to find target for resource-ful record %@", a1 object file lineNumber description];

  abort();
}

void sub_1001910FC(uint64_t a1, uint64_t a2)
{
  if (!_CPLSilentLogging)
  {
    uint64_t v4 = __CPLGenericOSLogDomain(a1);
    id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t v8 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_ERROR,  "Trying to create an union builder with no builders",  v8,  2u);
    }
  }

  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/CloudKit/CP LCKRecordBuilder.m"));
  [v6 handleFailureInMethod:a1 object:a2 file:v7 lineNumber:96 description:@"Trying to create an union builder with no builders"];

  abort();
}

void sub_1001911C8()
{
  __assert_rtn("-[CPLRemappedRecord writeTo:]", "CPLRemappedRecord.m", 83, "nil != self->_createdByUserID");
}

void sub_1001911F0()
{
  __assert_rtn("-[CPLRemappedRecord writeTo:]", "CPLRemappedRecord.m", 88, "nil != self->_recordID");
}

void sub_100191218(uint64_t a1, uint64_t a2)
{
  if (!_CPLSilentLogging)
  {
    uint64_t v4 = __CPLGenericOSLogDomain(a1);
    id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "Failed to encode prefix", v8, 2u);
    }
  }

  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/CloudKit/CP LCloudKitComputeStateEncryptionHelper.m"));
  [v6 handleFailureInMethod:a1 object:a2 file:v7 lineNumber:142 description:@"Failed to encode prefix"];

  abort();
}

void sub_1001912E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!_CPLSilentLogging)
  {
    uint64_t v6 = __CPLGenericOSLogDomain(a1);
    uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__int128 buf = 138412290;
      uint64_t v11 = a1;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "%@ was unable to produce any data", buf, 0xCu);
    }
  }

  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/CloudKit/CP LCKFeedbackOperation.m"));
  [v8 handleFailureInMethod:a2, a3, v9, 27, @"%@ was unable to produce any data", a1 object file lineNumber description];

  abort();
}

void sub_1001913E0(uint64_t a1, uint64_t a2)
{
  if (!_CPLSilentLogging)
  {
    uint64_t v4 = __CPLGenericOSLogDomain(a1);
    id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "Missing throttling error", v8, 2u);
    }
  }

  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/CloudKit/CP LCloudKitTransportTaskGate.m"));
  [v6 handleFailureInMethod:a1 object:a2 file:v7 lineNumber:237 description:@"Missing throttling error"];

  abort();
}

void sub_1001914AC(void *a1, uint64_t a2, uint64_t a3)
{
  if (!_CPLSilentLogging)
  {
    id v7 = sub_100045100();
    uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
    if (sub_10003A438(v8)) {
      sub_10002B494((void *)&_mh_execute_header, v9, v10, "Did not find query for %@", v11, v12, v13, v14, v17, v18, 2u);
    }
  }

  uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
  __int16 v16 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/CloudKit/C PLCloudKitQueryTask.m"));
  [v15 handleFailureInMethod:a2, a3, v16, 180, @"Did not find query for %@", *a1 object file lineNumber description];

  abort();
}

void sub_100191598(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!_CPLSilentLogging)
  {
    id v7 = sub_100045100();
    uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
    if (sub_10003A438(v8)) {
      sub_10002B494( (void *)&_mh_execute_header,  v9,  v10,  "Invalid class for cursor %@",  v11,  v12,  v13,  v14,  v17,  v18,  2u);
    }
  }

  uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
  __int16 v16 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/CloudKit/C PLCloudKitQueryTask.m"));
  [v15 handleFailureInMethod:a2, a3, v16, 346, @"Invalid class for cursor %@", a1 object file lineNumber description];

  abort();
}

void sub_100191674(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!_CPLSilentLogging)
  {
    uint64_t v6 = __CPLGenericOSLogDomain(a1);
    id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__int128 buf = 138412290;
      uint64_t v11 = a1;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "Invalid CloudKit rescheduler: %@", buf, 0xCu);
    }
  }

  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
  int v9 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/CloudKit/CP LCloudKitRescheduler.m"));
  [v8 handleFailureInMethod:a2, a3, v9, 26, @"Invalid CloudKit rescheduler: %@", a1 object file lineNumber description];

  abort();
}

void sub_100191768()
{
}

void sub_100191790()
{
  __assert_rtn( "-[_CPLFakeDerivativeMapper _dimensionsFromBaseResource:]",  "CPLCloudKitFakeDynamicDerivatives.m",  427,  "scale <= 1.0f");
}

void sub_1001917B8(id *a1, uint64_t a2)
{
  if (!_CPLSilentLogging)
  {
    id v5 = sub_10004BC14();
    uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    if (sub_100004A78(v6))
    {
      id v7 = (void *)objc_claimAutoreleasedReturnValue([*a1 scope]);
      sub_10005061C( (void *)&_mh_execute_header,  v8,  v9,  "Failed to find a share record to create for %@",  v10,  v11,  v12,  v13,  v19,  v20,  2u);
    }
  }

  int v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
  uint64_t v15 = *(void *)(a2 + 48);
  id v16 = *a1;
  uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/CloudKit/C PLCloudKitCreateScopeTask.m"));
  uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue([*a1 scope]);
  [v14 handleFailureInMethod:v15, v16, v17, 370, @"Failed to find a share record to create for %@", v18 object file lineNumber description];

  abort();
}

void sub_1001918C0(id *a1, uint64_t a2)
{
  if (!_CPLSilentLogging)
  {
    id v5 = sub_10004BC14();
    uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    if (sub_100004A78(v6))
    {
      id v7 = (void *)objc_claimAutoreleasedReturnValue([*a1 scope]);
      sub_10005061C( (void *)&_mh_execute_header,  v8,  v9,  "Failed to find a share type to create for %@",  v10,  v11,  v12,  v13,  v19,  v20,  2u);
    }
  }

  int v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
  uint64_t v15 = *(void *)(a2 + 48);
  id v16 = *a1;
  uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/CloudKit/C PLCloudKitCreateScopeTask.m"));
  uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue([*a1 scope]);
  [v14 handleFailureInMethod:v15, v16, v17, 384, @"Failed to find a share type to create for %@", v18 object file lineNumber description];

  abort();
}

void sub_1001919C8(uint64_t a1, uint64_t a2)
{
  if (!_CPLSilentLogging)
  {
    id v5 = sub_100050D54();
    uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    if (sub_100004A78(v6)) {
      sub_10005061C( (void *)&_mh_execute_header,  v7,  v8,  "%@ should have an identification at this point",  v9,  v10,  v11,  v12,  v15,  v16,  2u);
    }
  }

  int v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
  int v14 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/CloudKit/C PLCloudKitAcceptSharedScopeTask.m"));
  [v13 handleFailureInMethod:a2, a1, v14, 91, @"%@ should have an identification at this point", *(void *)(a1 + 272) object file lineNumber description];

  abort();
}

void sub_100191AB4(uint64_t a1, uint64_t a2)
{
  if (!_CPLSilentLogging)
  {
    id v5 = sub_100050D54();
    uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    if (sub_100004A78(v6)) {
      sub_10005061C( (void *)&_mh_execute_header,  v7,  v8,  "Should have a zone identification for %@",  v9,  v10,  v11,  v12,  v15,  v16,  2u);
    }
  }

  int v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
  int v14 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/CloudKit/C PLCloudKitAcceptSharedScopeTask.m"));
  [v13 handleFailureInMethod:a2, a1, v14, 229, @"Should have a zone identification for %@", *(void *)(a1 + 272) object file lineNumber description];

  abort();
}

void sub_100191BA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!_CPLSilentLogging)
  {
    id v6 = sub_100052C30();
    int v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
    if (sub_10002B4A8(v7)) {
      sub_10002B494( (void *)&_mh_execute_header,  v8,  v9,  "Missing transport scope for partner scope %@",  v10,  v11,  v12,  v13,  v16,  v17,  2u);
    }
  }

  int v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
  uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/CloudKit/C PLCloudKitDownloadBatchTask.m"));
  [v14 handleFailureInMethod:a2, a3, v15, 94, @"Missing transport scope for partner scope %@", a1 object file lineNumber description];

  abort();
}

void sub_100191C80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!_CPLSilentLogging)
  {
    id v6 = sub_100052C30();
    int v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
    if (sub_10002B4A8(v7)) {
      sub_10002B494((void *)&_mh_execute_header, v8, v9, "No zone ID for %@", v10, v11, v12, v13, v16, v17, 2u);
    }
  }

  int v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
  uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/CloudKit/C PLCloudKitDownloadBatchTask.m"));
  [v14 handleFailureInMethod:a2, a3, v15, 101, @"No zone ID for %@", a1 object file lineNumber description];

  abort();
}

void sub_100191D60(uint64_t a1)
{
  if (!_CPLSilentLogging)
  {
    id v2 = sub_100052C30();
    uint64_t v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
    if (sub_10002B4A8(v3))
    {
      *(_WORD *)int v8 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_ERROR,  "Should not have any more changes coming",  v8,  2u);
    }
  }

  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
  uint64_t v5 = *(void *)(a1 + 80);
  uint64_t v6 = *(void *)(a1 + 40);
  int v7 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/CloudKit/CP LCloudKitDownloadBatchTask.m"));
  [v4 handleFailureInMethod:v5 object:v6 file:v7 lineNumber:469 description:@"Should not have any more changes coming"];

  abort();
}

void sub_100191E2C(uint64_t a1, uint64_t a2)
{
  if (!_CPLSilentLogging)
  {
    uint64_t v4 = __CPLGenericOSLogDomain(a1);
    uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)int v8 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_ERROR,  "Push notification center can only be set once on CloudKit coordinator",  v8,  2u);
    }
  }

  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
  int v7 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/CloudKit/CP LCloudKitCoordinator.m"));
  [v6 handleFailureInMethod:a1 object:a2 file:v7 lineNumber:113 description:@"Push notification center can only be set once on CloudKit coordinator"];

  abort();
}

void sub_100191EF8(void *a1, uint64_t a2, uint64_t a3)
{
  if (!_CPLSilentLogging)
  {
    uint64_t v7 = __CPLGenericOSLogDomain(a1);
    int v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
    if (sub_10003A438(v8))
    {
      int v9 = (void *)objc_claimAutoreleasedReturnValue([a1 cplOperationClassDescription]);
      sub_10002B494( (void *)&_mh_execute_header,  v10,  v11,  "Trying to run a database operation against container: %@",  v12,  v13,  v14,  v15,  v19,  v20,  2u);
    }
  }

  uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
  uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/CloudKit/C PLCloudKitCoordinator.m"));
  uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue([a1 cplOperationClassDescription]);
  [v16 handleFailureInMethod:a2, a3, v17, 450, @"Trying to run a database operation against container: %@", v18 object file lineNumber description];

  abort();
}

void sub_100191FFC(void *a1, uint64_t a2, uint64_t a3)
{
  if (!_CPLSilentLogging)
  {
    uint64_t v7 = __CPLGenericOSLogDomain(a1);
    int v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
    if (sub_10003A438(v8))
    {
      int v9 = (void *)objc_claimAutoreleasedReturnValue([a1 cplOperationClassDescription]);
      sub_10002B494( (void *)&_mh_execute_header,  v10,  v11,  "Trying to run a non database operation against private database: %@",  v12,  v13,  v14,  v15,  v19,  v20,  2u);
    }
  }

  uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
  uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/CloudKit/C PLCloudKitCoordinator.m"));
  uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue([a1 cplOperationClassDescription]);
  [v16 handleFailureInMethod:a2, a3, v17, 454, @"Trying to run a non database operation against private database: %@", v18 object file lineNumber description];

  abort();
}

void sub_100192100(void *a1, uint64_t a2, uint64_t a3)
{
  if (!_CPLSilentLogging)
  {
    uint64_t v7 = __CPLGenericOSLogDomain(a1);
    int v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
    if (sub_10003A438(v8))
    {
      int v9 = (void *)objc_claimAutoreleasedReturnValue([a1 cplOperationClassDescription]);
      sub_10002B494( (void *)&_mh_execute_header,  v10,  v11,  "Trying to run a non database operation against shared database: %@",  v12,  v13,  v14,  v15,  v19,  v20,  2u);
    }
  }

  uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
  uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/CloudKit/C PLCloudKitCoordinator.m"));
  uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue([a1 cplOperationClassDescription]);
  [v16 handleFailureInMethod:a2, a3, v17, 458, @"Trying to run a non database operation against shared database: %@", v18 object file lineNumber description];

  abort();
}

void sub_100192204(void *a1, uint64_t a2, uint64_t a3)
{
  if (!_CPLSilentLogging)
  {
    uint64_t v7 = __CPLGenericOSLogDomain(a1);
    int v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
    if (sub_10003A438(v8))
    {
      int v9 = (void *)objc_claimAutoreleasedReturnValue([a1 cplOperationClassDescription]);
      sub_10002B494( (void *)&_mh_execute_header,  v10,  v11,  "Trying to run a non database operation against private database: %@",  v12,  v13,  v14,  v15,  v19,  v20,  2u);
    }
  }

  uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
  uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/CloudKit/C PLCloudKitCoordinator.m"));
  uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue([a1 cplOperationClassDescription]);
  [v16 handleFailureInMethod:a2, a3, v17, 462, @"Trying to run a non database operation against private database: %@", v18 object file lineNumber description];

  abort();
}

void sub_100192308(void *a1, uint64_t a2, uint64_t a3)
{
  if (!_CPLSilentLogging)
  {
    uint64_t v7 = __CPLGenericOSLogDomain(a1);
    int v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
    if (sub_10003A438(v8))
    {
      int v9 = (void *)objc_claimAutoreleasedReturnValue([a1 cplOperationClassDescription]);
      sub_10002B494( (void *)&_mh_execute_header,  v10,  v11,  "Trying to run a non database operation against private database: %@",  v12,  v13,  v14,  v15,  v19,  v20,  2u);
    }
  }

  uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
  uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/CloudKit/C PLCloudKitCoordinator.m"));
  uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue([a1 cplOperationClassDescription]);
  [v16 handleFailureInMethod:a2, a3, v17, 466, @"Trying to run a non database operation against private database: %@", v18 object file lineNumber description];

  abort();
}

void sub_10019240C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/CloudKit/CP LCloudKitCoordinator.m"));
  [v4 handleFailureInMethod:a1 object:a2 file:v5 lineNumber:549 description:@"Should not try to determine database for a container operation type"];

  abort();
}

void sub_100192480(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/CloudKit/CP LCloudKitCoordinator.m"));
  [v4 handleFailureInMethod:a1 object:a2 file:v5 lineNumber:537 description:@"Should not try to determine database for a container operation type"];

  abort();
}

void sub_1001924F4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint8_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22)
{
  a21 = v23;
  a22 = v25;
  uint64_t v26 = v24;
  if (!_CPLSilentLogging)
  {
    uint64_t v27 = __CPLGenericOSLogDomain(v24);
    id v28 = (os_log_s *)objc_claimAutoreleasedReturnValue(v27);
    if (sub_100004A78(v28))
    {
      uint64_t v29 = NSStringFromSelector(*(SEL *)(v26 + 56));
      uint64_t v30 = (void *)objc_claimAutoreleasedReturnValue(v29);
      sub_10005B6A4();
      sub_10005B698((void *)&_mh_execute_header, v22, v31, "%@ called twice for %@", &a11);
    }
  }

  uint64_t v32 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
  uint64_t v33 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/CloudKit/C PLCloudKitOperationsTracker.m"));
  uint64_t v34 = NSStringFromSelector(*(SEL *)(v26 + 56));
  id v35 = (void *)objc_claimAutoreleasedReturnValue(v34);
  objc_msgSend((id)sub_10005B6BC(), "handleFailureInMethod:object:file:lineNumber:description:");

  abort();
}

void sub_100192608(uint64_t a1, void *a2)
{
  if (!_CPLSilentLogging)
  {
    uint64_t v5 = __CPLGenericOSLogDomain(a1);
    uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    if (sub_100004A78(v6))
    {
      uint64_t v7 = NSStringFromSelector(*(SEL *)(a1 + 72));
      int v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
      uint64_t v9 = *(void *)(a1 + 40);
      uint64_t v10 = *a2;
      *(_DWORD *)__int128 buf = 138412802;
      uint64_t v16 = v8;
      __int16 v17 = 2112;
      uint64_t v18 = v9;
      __int16 v19 = 2112;
      uint64_t v20 = v10;
      _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_ERROR,  "%@ has been called for %@ but %@ has not been started yet",  buf,  0x20u);
    }
  }

  int v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
  int v12 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/CloudKit/C PLCloudKitOperationsTracker.m"));
  int v13 = NSStringFromSelector(*(SEL *)(a1 + 72));
  int v14 = (void *)objc_claimAutoreleasedReturnValue(v13);
  objc_msgSend( (id)sub_10005B6BC(),  "handleFailureInMethod:object:file:lineNumber:description:",  v14,  *(void *)(a1 + 40),  *a2);

  abort();
}

void sub_100192748( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, __int128 a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21)
{
  a20 = v21;
  a21 = v23;
  uint64_t v25 = v24;
  uint64_t v27 = v26;
  uint64_t v28 = v22;
  if (!_CPLSilentLogging)
  {
    uint64_t v29 = __CPLGenericOSLogDomain(v22);
    uint64_t v30 = (os_log_s *)objc_claimAutoreleasedReturnValue(v29);
    if (sub_10002B4A8(v30))
    {
      LODWORD(a11) = 138412290;
      *(void *)((char *)&a11 + 4) = v28;
      sub_10002B4B0((void *)&_mh_execute_header, v30, v31, "%@ has no associated task", (uint8_t *)&a11);
    }
  }

  uint64_t v32 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
  uint64_t v33 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/CloudKit/C PLCloudKitOperationsTracker.m"));
  [v32 handleFailureInMethod:v27 object:v25 file:v33 lineNumber:205 description:@"%@ has no associated task"];

  abort();
}

void sub_10019282C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint8_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22)
{
  a21 = v22;
  a22 = v24;
  uint64_t v26 = v25;
  uint64_t v27 = v23;
  if (!_CPLSilentLogging)
  {
    uint64_t v28 = __CPLGenericOSLogDomain(v23);
    uint64_t v29 = (os_log_s *)objc_claimAutoreleasedReturnValue(v28);
    if (sub_10002B4A8(v29))
    {
      uint64_t v30 = NSStringFromSelector(*(SEL *)(v27 + 56));
      uint64_t v31 = (void *)objc_claimAutoreleasedReturnValue(v30);
      sub_10005B6A4();
      sub_10005B698((void *)&_mh_execute_header, v29, v32, "%@ was called for %@ with no associated context", &a11);
    }
  }

  uint64_t v33 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
  uint64_t v34 = *(void *)(v27 + 56);
  uint64_t v35 = *v26;
  id v36 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/CloudKit/C PLCloudKitOperationsTracker.m"));
  __int128 v37 = NSStringFromSelector(*(SEL *)(v27 + 56));
  id v38 = (void *)objc_claimAutoreleasedReturnValue(v37);
  [v33 handleFailureInMethod:v34 object:v35 file:v36 lineNumber:214 description:@"%@ was called for %@ with no associated context"];

  abort();
}

void sub_10019294C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint8_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22)
{
  a21 = v22;
  a22 = v24;
  uint64_t v26 = v25;
  uint64_t v27 = v23;
  if (!_CPLSilentLogging)
  {
    uint64_t v28 = __CPLGenericOSLogDomain(v23);
    uint64_t v29 = (os_log_s *)objc_claimAutoreleasedReturnValue(v28);
    if (sub_10002B4A8(v29))
    {
      uint64_t v30 = NSStringFromSelector(*(SEL *)(v27 + 56));
      uint64_t v31 = (void *)objc_claimAutoreleasedReturnValue(v30);
      sub_10005B6A4();
      sub_10005B698((void *)&_mh_execute_header, v29, v32, "%@ was called for %@ with no associated context", &a11);
    }
  }

  uint64_t v33 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
  uint64_t v34 = *(void *)(v27 + 56);
  uint64_t v35 = *v26;
  id v36 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/CloudKit/C PLCloudKitOperationsTracker.m"));
  __int128 v37 = NSStringFromSelector(*(SEL *)(v27 + 56));
  id v38 = (void *)objc_claimAutoreleasedReturnValue(v37);
  [v33 handleFailureInMethod:v34 object:v35 file:v36 lineNumber:223 description:@"%@ was called for %@ with no associated context"];

  abort();
}

void sub_100192A6C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint8_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22)
{
  a21 = v22;
  a22 = v24;
  uint64_t v26 = v25;
  uint64_t v27 = v23;
  if (!_CPLSilentLogging)
  {
    uint64_t v28 = __CPLGenericOSLogDomain(v23);
    uint64_t v29 = (os_log_s *)objc_claimAutoreleasedReturnValue(v28);
    if (sub_10002B4A8(v29))
    {
      uint64_t v30 = NSStringFromSelector(*(SEL *)(v27 + 48));
      uint64_t v31 = (void *)objc_claimAutoreleasedReturnValue(v30);
      sub_10005B6A4();
      sub_10005B698((void *)&_mh_execute_header, v29, v32, "%@ was called for %@ with no associated context", &a11);
    }
  }

  uint64_t v33 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
  uint64_t v34 = *(void *)(v27 + 48);
  uint64_t v35 = *v26;
  id v36 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/CloudKit/C PLCloudKitOperationsTracker.m"));
  __int128 v37 = NSStringFromSelector(*(SEL *)(v27 + 48));
  id v38 = (void *)objc_claimAutoreleasedReturnValue(v37);
  [v33 handleFailureInMethod:v34 object:v35 file:v36 lineNumber:233 description:@"%@ was called for %@ with no associated context"];

  abort();
}

void sub_100192B8C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint8_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22)
{
  a21 = v23;
  a22 = v25;
  uint64_t v26 = v24;
  if (!_CPLSilentLogging)
  {
    uint64_t v27 = __CPLGenericOSLogDomain(v24);
    uint64_t v28 = (os_log_s *)objc_claimAutoreleasedReturnValue(v27);
    if (sub_100004A78(v28))
    {
      uint64_t v29 = NSStringFromSelector(*(SEL *)(v26 + 48));
      uint64_t v30 = (void *)objc_claimAutoreleasedReturnValue(v29);
      sub_10005B6A4();
      sub_10005B698((void *)&_mh_execute_header, v22, v31, "%@ called for %@ with no associated task", &a11);
    }
  }

  uint64_t v32 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
  uint64_t v33 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/CloudKit/C PLCloudKitOperationsTracker.m"));
  uint64_t v34 = NSStringFromSelector(*(SEL *)(v26 + 48));
  uint64_t v35 = (void *)objc_claimAutoreleasedReturnValue(v34);
  objc_msgSend((id)sub_10005B6BC(), "handleFailureInMethod:object:file:lineNumber:description:");

  abort();
}

void sub_100192C9C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, __int128 a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21)
{
  a20 = v22;
  a21 = v24;
  uint64_t v26 = v25;
  uint64_t v27 = v23;
  if (!_CPLSilentLogging)
  {
    uint64_t v28 = __CPLGenericOSLogDomain(v23);
    uint64_t v29 = (os_log_s *)objc_claimAutoreleasedReturnValue(v28);
    if (sub_100004A78(v29))
    {
      uint64_t v30 = NSStringFromSelector(*(SEL *)(v27 + 48));
      uint64_t v31 = (void *)objc_claimAutoreleasedReturnValue(v30);
      LODWORD(a11) = 138412546;
      *(void *)((char *)&a11 + 4) = v31;
      WORD6(a11) = 2112;
      *(void *)((char *)&a11 + 14) = v26;
      sub_10005B698((void *)&_mh_execute_header, v21, v32, "%@ called while %@ has not yet started", (uint8_t *)&a11);
    }
  }

  uint64_t v33 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
  uint64_t v34 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/CloudKit/C PLCloudKitOperationsTracker.m"));
  uint64_t v35 = NSStringFromSelector(*(SEL *)(v27 + 48));
  id v36 = (void *)objc_claimAutoreleasedReturnValue(v35);
  objc_msgSend((id)sub_10005B6BC(), "handleFailureInMethod:object:file:lineNumber:description:");

  abort();
}

void sub_100192DAC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, __int128 a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21)
{
  a20 = v22;
  a21 = v24;
  uint64_t v26 = v25;
  uint64_t v27 = v23;
  if (!_CPLSilentLogging)
  {
    uint64_t v28 = __CPLGenericOSLogDomain(v23);
    uint64_t v29 = (os_log_s *)objc_claimAutoreleasedReturnValue(v28);
    if (sub_100004A78(v29))
    {
      uint64_t v31 = *v27;
      LODWORD(a11) = 138412290;
      *(void *)((char *)&a11 + 4) = v31;
      sub_10002B4B0((void *)&_mh_execute_header, v21, v30, "%@ should have an associated context here", (uint8_t *)&a11);
    }
  }

  uint64_t v32 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
  uint64_t v35 = v26 + 40;
  uint64_t v33 = *(void *)(v26 + 40);
  uint64_t v34 = *(void *)(v35 + 8);
  id v36 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/CloudKit/C PLCloudKitOperationsTracker.m"));
  [v32 handleFailureInMethod:v34 object:v33 file:v36 lineNumber:251 description:@"%@ should have an associated context here"];

  abort();
}

void sub_100192E94( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint8_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22)
{
  a21 = v22;
  a22 = v24;
  uint64_t v26 = v25;
  uint64_t v27 = v23;
  if (!_CPLSilentLogging)
  {
    uint64_t v28 = __CPLGenericOSLogDomain(v23);
    uint64_t v29 = (os_log_s *)objc_claimAutoreleasedReturnValue(v28);
    if (sub_10002B4A8(v29))
    {
      uint64_t v30 = NSStringFromSelector(*(SEL *)(v27 + 48));
      uint64_t v31 = (void *)objc_claimAutoreleasedReturnValue(v30);
      sub_10005B6A4();
      sub_10005B698((void *)&_mh_execute_header, v29, v32, "%@ was called for %@ with no associated context", &a11);
    }
  }

  uint64_t v33 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
  uint64_t v34 = *(void *)(v27 + 48);
  uint64_t v35 = *v26;
  id v36 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/CloudKit/C PLCloudKitOperationsTracker.m"));
  __int128 v37 = NSStringFromSelector(*(SEL *)(v27 + 48));
  id v38 = (void *)objc_claimAutoreleasedReturnValue(v37);
  [v33 handleFailureInMethod:v34 object:v35 file:v36 lineNumber:263 description:@"%@ was called for %@ with no associated context"];

  abort();
}

void sub_100192FB4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint8_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22)
{
  a21 = v23;
  a22 = v25;
  uint64_t v26 = v24;
  if (!_CPLSilentLogging)
  {
    uint64_t v27 = __CPLGenericOSLogDomain(v24);
    uint64_t v28 = (os_log_s *)objc_claimAutoreleasedReturnValue(v27);
    if (sub_100004A78(v28))
    {
      uint64_t v29 = NSStringFromSelector(*(SEL *)(v26 + 48));
      uint64_t v30 = (void *)objc_claimAutoreleasedReturnValue(v29);
      sub_10005B6A4();
      sub_10005B698((void *)&_mh_execute_header, v22, v31, "%@ has been called while %@ has not started yet", &a11);
    }
  }

  uint64_t v32 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
  uint64_t v33 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/CloudKit/C PLCloudKitOperationsTracker.m"));
  uint64_t v34 = NSStringFromSelector(*(SEL *)(v26 + 48));
  uint64_t v35 = (void *)objc_claimAutoreleasedReturnValue(v34);
  objc_msgSend((id)sub_10005B6BC(), "handleFailureInMethod:object:file:lineNumber:description:");

  abort();
}

void sub_1001930C4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint8_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22)
{
  a21 = v23;
  a22 = v25;
  uint64_t v26 = v24;
  if (!_CPLSilentLogging)
  {
    uint64_t v27 = __CPLGenericOSLogDomain(v24);
    uint64_t v28 = (os_log_s *)objc_claimAutoreleasedReturnValue(v27);
    if (sub_100004A78(v28))
    {
      uint64_t v29 = NSStringFromSelector(*(SEL *)(v26 + 48));
      uint64_t v30 = (void *)objc_claimAutoreleasedReturnValue(v29);
      sub_10005B6A4();
      sub_10005B698((void *)&_mh_execute_header, v22, v31, "%@ has been called while %@ has not started yet", &a11);
    }
  }

  uint64_t v32 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
  uint64_t v33 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/CloudKit/C PLCloudKitOperationsTracker.m"));
  uint64_t v34 = NSStringFromSelector(*(SEL *)(v26 + 48));
  uint64_t v35 = (void *)objc_claimAutoreleasedReturnValue(v34);
  objc_msgSend((id)sub_10005B6BC(), "handleFailureInMethod:object:file:lineNumber:description:");

  abort();
}

void sub_1001931D4(uint64_t a1, uint64_t a2)
{
  if (!_CPLSilentLogging)
  {
    uint64_t v5 = __CPLGenericOSLogDomain(a1);
    uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    if (sub_100004A78(v6)) {
      sub_100004A64( (void *)&_mh_execute_header,  v7,  v8,  "Trying to create a CPLCloudKitScope with no zone",  v9,  v10,  v11,  v12,  0);
    }
  }

  int v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
  int v14 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/CloudKit/C PLCloudKitScope.m"));
  [v13 handleFailureInMethod:a1 object:a2 file:v14 lineNumber:65 description:@"Trying to create a CPLCloudKitScope with no zone"];

  abort();
}

void sub_100193288(uint64_t a1, uint64_t a2)
{
  if (!_CPLSilentLogging)
  {
    uint64_t v5 = __CPLGenericOSLogDomain(a1);
    uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    if (sub_100004A78(v6)) {
      sub_100004A64( (void *)&_mh_execute_header,  v7,  v8,  "Trying to create a CPLCloudKitScope with no zone ID",  v9,  v10,  v11,  v12,  0);
    }
  }

  int v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
  int v14 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/CloudKit/C PLCloudKitScope.m"));
  [v13 handleFailureInMethod:a1 object:a2 file:v14 lineNumber:73 description:@"Trying to create a CPLCloudKitScope with no zone ID"];

  abort();
}

void sub_10019333C(uint64_t a1, uint64_t a2)
{
  if (!_CPLSilentLogging)
  {
    uint64_t v5 = __CPLGenericOSLogDomain(a1);
    uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    if (sub_100004A78(v6)) {
      sub_100004A64( (void *)&_mh_execute_header,  v7,  v8,  "Trying to create a CPLCloudKitScope with no zone ID",  v9,  v10,  v11,  v12,  0);
    }
  }

  int v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
  int v14 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/CloudKit/C PLCloudKitScope.m"));
  [v13 handleFailureInMethod:a1 object:a2 file:v14 lineNumber:87 description:@"Trying to create a CPLCloudKitScope with no zone ID"];

  abort();
}

void sub_1001933F0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "CPLCloudKitOperationType CPLCloudKitOperationTypeForScope(CPLCloudKitScope *__strong _Nonnull)"));
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/CloudKit/CP LCloudKitTransportTask.m"));
  [v4 handleFailureInFunction:v5, v6, 62, @"Invalid database scope for %@: %ld", a1, a2 file lineNumber description];

  abort();
}

void sub_100193488()
{
  uint64_t v0 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
  uint64_t v1 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "CKDatabaseScope CPLCKDatabaseScopeForCPLCloudKitOperationType(CPLCloudKitOperationType)"));
  id v2 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/CloudKit/CP LCloudKitTransportTask.m"));
  [v0 handleFailureInFunction:v1 file:v2 lineNumber:71 description:@"Invalid source type for record copy"];

  abort();
}

void sub_10019350C( int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint8_t buf, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22)
{
  a21 = v23;
  a22 = v24;
  uint64_t v26 = v25;
  if (!_CPLSilentLogging)
  {
    id v27 = sub_10005E3FC();
    uint64_t v28 = (os_log_s *)objc_claimAutoreleasedReturnValue(v27);
    if (sub_10003A438(v28))
    {
      uint64_t v29 = (void *)objc_opt_class(*v26);
      id v30 = sub_100064B34(v29);
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_ERROR, "Unexpected current user ID (%@)", &buf, 0xCu);
    }
  }

  uint64_t v31 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
  uint64_t v32 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/CloudKit/C PLCloudKitTransportTask.m"));
  objc_opt_class(*v26);
  objc_msgSend((id)sub_10002B4E4(), "handleFailureInMethod:object:file:lineNumber:description:");

  abort();
}

#error "100193680: call analysis failed (funcsize=52)"
#error "100193758: call analysis failed (funcsize=55)"
#error "100193844: call analysis failed (funcsize=55)"
#error "100193944: call analysis failed (funcsize=63)"
#error "100193A54: call analysis failed (funcsize=63)"
#error "100193B64: call analysis failed (funcsize=63)"
#error "100193C70: call analysis failed (funcsize=63)"
#error "100193D7C: call analysis failed (funcsize=63)"
#error "100193E88: call analysis failed (funcsize=63)"
void sub_100193F0C(uint64_t a1, void *a2)
{
  void *v2;
  id v5;
  os_log_s *v6;
  void *v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  void *v14;
  void *v15;
  uint64_t v16;
  void *v17;
  CFStringRef v18;
  uint64_t v19;
  uint64_t v20;
  if (!_CPLSilentLogging)
  {
    uint64_t v5 = sub_10005E3FC();
    uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    if (sub_10003A438(v6))
    {
      uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([a2 idleDescription]);
      sub_100064B18( (void *)&_mh_execute_header,  v8,  v9,  "Trying to launch %@ while %@",  v10,  v11,  v12,  v13,  v19,  v20,  2u);
    }
  }

  int v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
  int v15 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/CloudKit/C PLCloudKitTransportTask.m"));
  uint64_t v16 = objc_claimAutoreleasedReturnValue([a2 idleDescription]);
  __int16 v17 = (void *)v16;
  if (v16) {
    uint64_t v18 = (const __CFString *)v16;
  }
  else {
    uint64_t v18 = @"running some other operation";
  }
  objc_msgSend((id)sub_10002B4E4(), "handleFailureInMethod:object:file:lineNumber:description:", a1, v18);

  abort();
}

#error "1001940BC: call analysis failed (funcsize=60)"
#error "1001941D8: call analysis failed (funcsize=72)"
#error "100194308: call analysis failed (funcsize=72)"
#error "100194438: call analysis failed (funcsize=72)"
void sub_1001944CC(uint64_t a1, uint64_t a2)
{
  id v4;
  os_log_s *v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  if (!_CPLSilentLogging)
  {
    uint64_t v4 = sub_10005E3FC();
    uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
    if (sub_10002B4A8(v5)) {
      sub_10005061C( (void *)&_mh_execute_header,  v6,  v7,  "%@ while the task is not running",  v8,  v9,  v10,  v11,  v14,  v15,  2u);
    }
  }

  uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
  int v13 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/CloudKit/C PLCloudKitTransportTask.m"));
  [v12 handleFailureInMethod:a2, a1, v13, 1092, @"%@ while the task is not running", a1 object file lineNumber description];

  abort();
}

#error "10019462C: call analysis failed (funcsize=63)"
#error "100194730: call analysis failed (funcsize=60)"
void sub_1001947B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  id v7;
  os_log_s *v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  void *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  if (!_CPLSilentLogging)
  {
    uint64_t v7 = sub_1000650DC();
    uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
    if (sub_10003A438(v8)) {
      sub_10002B494( (void *)&_mh_execute_header,  v9,  v10,  "Unable to find scoped identifier matching %@",  v11,  v12,  v13,  v14,  v17,  v18,  2u);
    }
  }

  int v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
  uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/CloudKit/C PLCloudKitReshareRecordsTask.m"));
  [v15 handleFailureInMethod:a2, a3, v16, 157, @"Unable to find scoped identifier matching %@", a1 object file lineNumber description];

  abort();
}

void sub_10019488C(void *a1, uint64_t a2, uint64_t a3)
{
  if (!_CPLSilentLogging)
  {
    id v7 = sub_1000650DC();
    uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
    if (sub_10003A438(v8)) {
      sub_10002B494( (void *)&_mh_execute_header,  v9,  v10,  "Unable to find destination shared record for %@",  v11,  v12,  v13,  v14,  v17,  v18,  2u);
    }
  }

  int v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
  uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/CloudKit/C PLCloudKitReshareRecordsTask.m"));
  [v15 handleFailureInMethod:a2, a3, v16, 159, @"Unable to find destination shared record for %@", *a1 object file lineNumber description];

  abort();
}

void sub_100194970(void *a1, uint64_t a2)
{
  if (!_CPLSilentLogging)
  {
    uint64_t v4 = __CPLGenericOSLogDomain(a1);
    uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
    if (sub_10002B4A8(v5))
    {
      uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "componentsJoinedByString:", @", "));
      int v13 = 138412290;
      int v14 = v6;
      sub_10002B4B0( (void *)&_mh_execute_header,  v5,  v7,  "Trying to add keys %@ not bound to any property",  (uint8_t *)&v13);
    }
  }

  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
  uint64_t v9 = *(void *)(a2 + 88);
  uint64_t v10 = *(void *)(a2 + 32);
  int v11 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/CloudKit/C PLCKRecordPropertyMapping.m"));
  int v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "componentsJoinedByString:", @", "));
  [v8 handleFailureInMethod:v9, v10, v11, 254, @"Trying to add keys %@ not bound to any property", v12 object file lineNumber description];

  abort();
}

void sub_100194A94(void *a1)
{
  if (!_CPLSilentLogging)
  {
    uint64_t v2 = __CPLGenericOSLogDomain(a1);
    uint64_t v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
    if (sub_10002B4A8(v3))
    {
      uint64_t v5 = *(void *)(*(void *)(a1[6] + 8LL) + 24LL);
      int v10 = 138412290;
      uint64_t v11 = v5;
      sub_10002B4B0( (void *)&_mh_execute_header,  v3,  v4,  "Trying to add shared properties to non-shareable class %@",  (uint8_t *)&v10);
    }
  }

  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
  uint64_t v7 = a1[11];
  uint64_t v8 = a1[4];
  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/CloudKit/CP LCKRecordPropertyMapping.m"));
  [v6 handleFailureInMethod:v7, v8, v9, 274, @"Trying to add shared properties to non-shareable class %@", *(void *)(*(void *)(a1[6] + 8) + 24) object file lineNumber description];

  abort();
}

void sub_100194B94(uint64_t a1, void *a2)
{
  char v3 = a1;
  if (!_CPLSilentLogging)
  {
    uint64_t v4 = __CPLGenericOSLogDomain(a1);
    uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
    if (sub_10002B4A8(v5)) {
      sub_10002358C( (void *)&_mh_execute_header,  v6,  v7,  "%s called too many times on %@",  v8,  v9,  v10,  v11,  v17,  v18,  2u);
    }
  }

  int v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
  uint64_t v13 = a2[11];
  uint64_t v14 = a2[4];
  int v15 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/CloudKit/C PLCKRecordPropertyMapping.m"));
  if ((v3 & 1) != 0) {
    uint64_t v16 = "BEGIN_SHARED_AND_PRIVATE_PROPERTIES";
  }
  else {
    uint64_t v16 = "BEGIN_SHARED_PROPERTIES";
  }
  [v12 handleFailureInMethod:v13, v14, v15, 275, @"%s called too many times on %@", v16, *(void *)(*(void *)(a2[6] + 8) + 24) object file lineNumber description];

  abort();
}

void sub_100194CC0(uint64_t a1, uint64_t a2)
{
  char v3 = a1;
  if (!_CPLSilentLogging)
  {
    uint64_t v4 = __CPLGenericOSLogDomain(a1);
    uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
    if (sub_10002B4A8(v5)) {
      sub_10002358C((void *)&_mh_execute_header, v6, v7, "%s called but expected %s", v8, v9, v10, v11, v18, v19, 2u);
    }
  }

  int v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
  uint64_t v13 = *(void *)(a2 + 80);
  uint64_t v14 = *(void *)(a2 + 32);
  int v15 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/CloudKit/C PLCKRecordPropertyMapping.m"));
  if ((v3 & 1) != 0) {
    uint64_t v16 = "END_SHARED_AND_PRIVATE_PROPERTIES";
  }
  else {
    uint64_t v16 = "END_SHARED_PROPERTIES";
  }
  if ((v3 & 1) != 0) {
    uint64_t v17 = "END_SHARED_PROPERTIES";
  }
  else {
    uint64_t v17 = "END_SHARED_AND_PRIVATE_PROPERTIES";
  }
  objc_msgSend( v12,  "handleFailureInMethod:object:file:lineNumber:description:",  v13,  v14,  v15,  286,  @"%s called but expected %s",  v16,  v17);

  abort();
}

void sub_100194DDC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!_CPLSilentLogging)
  {
    uint64_t v6 = __CPLGenericOSLogDomain(a1);
    int v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
    if (sub_10002B4A8(v7))
    {
      int v11 = 138412290;
      uint64_t v12 = a1;
      sub_10002B4B0((void *)&_mh_execute_header, v7, v8, "Unsupported %@", (uint8_t *)&v11);
    }
  }

  int v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
  int v10 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/CloudKit/C PLCKRecordPropertyMapping.m"));
  [v9 handleFailureInMethod:a2, a3, v10, 391, @"Unsupported %@", a1 object file lineNumber description];

  abort();
}

void sub_100194EC4(uint64_t a1)
{
  if (!_CPLSilentLogging)
  {
    uint64_t v2 = __CPLGenericOSLogDomain(a1);
    char v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
    if (sub_10002B4A8(v3))
    {
      int v8 = 138412290;
      uint64_t v9 = a1;
      sub_10002B4B0((void *)&_mh_execute_header, v3, v4, "%@ has no associated record type", (uint8_t *)&v8);
    }
  }

  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "NSString * _Nonnull CKRecordTypeForCPLRecordChangeClass(__unsafe_unretained Class _Nonnull)"));
  int v7 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/CloudKit/CK Record+CPL_base.m"));
  [v5 handleFailureInFunction:v6, v7, 87, @"%@ has no associated record type", a1 file lineNumber description];

  abort();
}

void sub_100194FB8(uint64_t a1)
{
  if (!_CPLSilentLogging)
  {
    uint64_t v2 = __CPLGenericOSLogDomain(a1);
    char v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
    if (sub_10002B4A8(v3))
    {
      int v8 = 138412290;
      uint64_t v9 = a1;
      sub_10002B4B0((void *)&_mh_execute_header, v3, v4, "Missing record identifier for %@", (uint8_t *)&v8);
    }
  }

  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "CKRecord * _Nonnull CPLBaseCKRecordFromCPLRecordChange(CPLRecordChange *__strong _Nonnull, CKRecordZo ne *__strong _Nonnull, CPLRecordTarget *__strong _Nonnull)"));
  int v7 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/CloudKit/CK Record+CPL_base.m"));
  [v5 handleFailureInFunction:v6, v7, 110, @"Missing record identifier for %@", a1 file lineNumber description];

  abort();
}

void sub_1001950B4(uint64_t a1)
{
  if (!_CPLSilentLogging)
  {
    uint64_t v2 = __CPLGenericOSLogDomain(a1);
    char v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
    if (sub_10002B4A8(v3))
    {
      int v8 = 138412290;
      uint64_t v9 = a1;
      sub_10002B4B0((void *)&_mh_execute_header, v3, v4, "Missing shared record identifier for %@", (uint8_t *)&v8);
    }
  }

  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "CKRecord * _Nonnull CPLBaseSharedCKRecordFromCPLRecordChange(CPLRecordChange *__strong _Nonnull, CKRe cordZone *__strong _Nonnull, CPLRecordTarget *__strong _Nonnull)"));
  int v7 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/CloudKit/CK Record+CPL_base.m"));
  [v5 handleFailureInFunction:v6, v7, 171, @"Missing shared record identifier for %@", a1 file lineNumber description];

  abort();
}

void sub_1001951B0(uint64_t a1)
{
  if (!_CPLSilentLogging)
  {
    uint64_t v3 = __CPLGenericOSLogDomain(a1);
    uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
    if (sub_10003A438(v4)) {
      sub_10002B494((void *)&_mh_execute_header, v5, v6, "Unsupported class type: %@", v7, v8, v9, v10, v13, v14, 2u);
    }
  }

  int v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
  uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/CloudKit/C KRecord+CPL_base.m"));
  objc_msgSend((id)sub_10002B4E4(), "handleFailureInMethod:object:file:lineNumber:description:", a1);

  abort();
}

void sub_100195290(uint64_t a1)
{
  if (!_CPLSilentLogging)
  {
    uint64_t v2 = __CPLGenericOSLogDomain(a1);
    uint64_t v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
    if (sub_10003A438(v3))
    {
      uint64_t v4 = (void *)sub_1000715D0();
      id v5 = sub_100064B34(v4);
      sub_10002B494( (void *)&_mh_execute_header,  v6,  v7,  "%@ should be directly deleted and not expunged",  v8,  v9,  v10,  v11,  v14,  v16,  v17);
    }
  }

  uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
  uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/CloudKit/C KRecord+CPL_base.m"));
  uint64_t v15 = sub_1000715D0();
  objc_msgSend((id)sub_10002B4E4(), "handleFailureInMethod:object:file:lineNumber:description:", v15);

  abort();
}

void sub_100195374(uint64_t a1)
{
  if (!_CPLSilentLogging)
  {
    uint64_t v2 = __CPLGenericOSLogDomain(a1);
    uint64_t v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
    if (sub_10003A438(v3))
    {
      uint64_t v4 = (void *)sub_1000715D0();
      id v5 = sub_100064B34(v4);
      sub_10002B494( (void *)&_mh_execute_header,  v6,  v7,  "%@ does not support deletion",  v8,  v9,  v10,  v11,  v14,  v16,  v17);
    }
  }

  uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
  uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/CloudKit/C KRecord+CPL_base.m"));
  uint64_t v15 = sub_1000715D0();
  objc_msgSend((id)sub_10002B4E4(), "handleFailureInMethod:object:file:lineNumber:description:", v15);

  abort();
}

void sub_100195458(uint64_t a1)
{
  if (!_CPLSilentLogging)
  {
    uint64_t v2 = __CPLGenericOSLogDomain(a1);
    uint64_t v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
    if (sub_10003A438(v3))
    {
      uint64_t v4 = (void *)sub_1000715D0();
      id v5 = sub_100064B34(v4);
      sub_10002B494( (void *)&_mh_execute_header,  v6,  v7,  "%@ should be directly deleted and not expunged",  v8,  v9,  v10,  v11,  v14,  v16,  v17);
    }
  }

  uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
  uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/CloudKit/C KRecord+CPL_base.m"));
  uint64_t v15 = sub_1000715D0();
  objc_msgSend((id)sub_10002B4E4(), "handleFailureInMethod:object:file:lineNumber:description:", v15);

  abort();
}

void sub_10019553C(uint64_t a1)
{
  if (!_CPLSilentLogging)
  {
    uint64_t v2 = __CPLGenericOSLogDomain(a1);
    uint64_t v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
    if (sub_10003A438(v3))
    {
      uint64_t v4 = (void *)sub_1000715D0();
      id v5 = sub_100064B34(v4);
      sub_10002B494( (void *)&_mh_execute_header,  v6,  v7,  "%@ does not support deletion",  v8,  v9,  v10,  v11,  v14,  v16,  v17);
    }
  }

  uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
  uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/CloudKit/C KRecord+CPL_base.m"));
  uint64_t v15 = sub_1000715D0();
  objc_msgSend((id)sub_10002B4E4(), "handleFailureInMethod:object:file:lineNumber:description:", v15);

  abort();
}

void sub_100195620(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
  id v5 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/CloudKit/CK Record+CPL_base.m"));
  [v4 handleFailureInMethod:a1, a2, v5, 826, @"Don't know how to clean %@", a2 object file lineNumber description];

  abort();
}

void sub_10019569C(void *a1, uint64_t a2, uint64_t a3)
{
  id v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
  int v6 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/CloudKit/CK Record+CPL_base.m"));
  int v7 = (void *)objc_claimAutoreleasedReturnValue([a1 localizedDescription]);
  objc_msgSend((id)sub_10002B4E4(), "handleFailureInMethod:object:file:lineNumber:description:", a3, v7);

  abort();
}

void sub_100195730(uint64_t a1, uint64_t a2)
{
  if (!_CPLSilentLogging)
  {
    id v4 = sub_1000733A0();
    id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
    if (sub_10002B4A8(v5))
    {
      *(_WORD *)int v8 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_ERROR,  "Trying to fetch records using a container operation",  v8,  2u);
    }
  }

  int v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
  int v7 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/CloudKit/CP LCloudKitSimpleRecordFetchTask.m"));
  [v6 handleFailureInMethod:a1 object:a2 file:v7 lineNumber:75 description:@"Trying to fetch records using a container operation"];

  abort();
}

void sub_1001957F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!_CPLSilentLogging)
  {
    id v6 = sub_1000733A0();
    int v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
    if (sub_10002B4A8(v7))
    {
      int v11 = 138412290;
      uint64_t v12 = a1;
      sub_10002B4B0((void *)&_mh_execute_header, v7, v8, "%@ should not be expunged here", (uint8_t *)&v11);
    }
  }

  int v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
  int v10 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/CloudKit/C PLCloudKitSimpleRecordFetchTask.m"));
  [v9 handleFailureInMethod:a2, a3, v10, 523, @"%@ should not be expunged here", a1 object file lineNumber description];

  abort();
}

void sub_1001958E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!_CPLSilentLogging)
  {
    id v6 = sub_1000733A0();
    int v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
    if (sub_10002B4A8(v7))
    {
      int v11 = 138412290;
      uint64_t v12 = a1;
      sub_10002B4B0((void *)&_mh_execute_header, v7, v8, "Asked to fetch %@ with no proposed target", (uint8_t *)&v11);
    }
  }

  int v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
  int v10 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/CloudKit/C PLCloudKitSimpleRecordFetchTask.m"));
  [v9 handleFailureInMethod:a2, a3, v10, 598, @"Asked to fetch %@ with no proposed target", a1 object file lineNumber description];

  abort();
}

void sub_1001959C8(uint64_t a1, uint64_t a2)
{
  if (!_CPLSilentLogging)
  {
    id v4 = sub_1000733A0();
    id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
    if (sub_10002B4A8(v5))
    {
      int v11 = 138412290;
      uint64_t v12 = a1;
      sub_10002B4B0((void *)&_mh_execute_header, v5, v6, "Impossible to find target for %@", (uint8_t *)&v11);
    }
  }

  int v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
  uint64_t v8 = *(void *)(a2 + 64);
  uint64_t v9 = *(void *)(a2 + 48);
  int v10 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/CloudKit/C PLCloudKitSimpleRecordFetchTask.m"));
  [v7 handleFailureInMethod:v8, v9, v10, 711, @"Impossible to find target for %@", a1 object file lineNumber description];

  abort();
}

void sub_100195AB4(uint64_t a1, uint64_t a2)
{
  if (!_CPLSilentLogging)
  {
    id v4 = sub_100078FF0();
    id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
    if (sub_10002B4A8(v5)) {
      sub_100004A64( (void *)&_mh_execute_header,  v6,  v7,  "We should have a destination scope identifier here",  v8,  v9,  v10,  v11,  0);
    }
  }

  uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
  uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/CloudKit/C PLCloudKitFixUpSparseRecordTask.m"));
  [v12 handleFailureInMethod:a1 object:a2 file:v13 lineNumber:77 description:@"We should have a destination scope identifier here"];

  abort();
}

void sub_100195B6C(uint64_t a1, uint64_t a2)
{
  if (!_CPLSilentLogging)
  {
    id v4 = sub_100078FF0();
    id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
    if (sub_10002B4A8(v5)) {
      sub_100004A64( (void *)&_mh_execute_header,  v6,  v7,  "We should have a destination CloudKit scope here",  v8,  v9,  v10,  v11,  0);
    }
  }

  uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
  uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/CloudKit/C PLCloudKitFixUpSparseRecordTask.m"));
  [v12 handleFailureInMethod:a1 object:a2 file:v13 lineNumber:79 description:@"We should have a destination CloudKit scope here"];

  abort();
}

void sub_100195C24(void *a1, uint64_t a2, uint64_t a3)
{
  if (!_CPLSilentLogging)
  {
    id v6 = sub_100078FF0();
    uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
    if (sub_10002B4A8(v7))
    {
      uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([a1 realCloudScopedIdentifier]);
      uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([a1 privateCloudScopedIdentifier]);
      *(_DWORD *)__int128 buf = 138412546;
      uint64_t v15 = v8;
      __int16 v16 = 2112;
      uint8_t v17 = v9;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_ERROR,  "Unable to find CloudKit scope for %@ (fixing %@)",  buf,  0x16u);
    }
  }

  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
  uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/CloudKit/C PLCloudKitFixUpSparseRecordTask.m"));
  uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([a1 realCloudScopedIdentifier]);
  uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([a1 privateCloudScopedIdentifier]);
  [v10 handleFailureInMethod:a2, a3, v11, 66, @"Unable to find CloudKit scope for %@ (fixing %@)", v12, v13 object file lineNumber description];

  abort();
}

void sub_100195D70(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  if (!_CPLSilentLogging)
  {
    id v6 = sub_100078FF0();
    uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
    if (sub_10002B4A8(v7))
    {
      *(_DWORD *)__int128 buf = 138412290;
      uint64_t v13 = a1;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_ERROR,  "Failed to transform a CK error to a CPL error: %@",  buf,  0xCu);
    }
  }

  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
  uint64_t v9 = *(void *)(a2 + 64);
  uint64_t v10 = *a3;
  uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/CloudKit/C PLCloudKitFixUpSparseRecordTask.m"));
  [v8 handleFailureInMethod:v9, v10, v11, 91, @"Failed to transform a CK error to a CPL error: %@", a1 object file lineNumber description];

  abort();
}

void sub_100195E68(const char *a1, uint64_t a2)
{
  if (!_CPLSilentLogging)
  {
    uint64_t v5 = __CPLGenericOSLogDomain(a1);
    id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    if (sub_100004A78(v6))
    {
      uint64_t v7 = NSStringFromSelector(a1);
      uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
      int v14 = 138412290;
      uint64_t v15 = v8;
      sub_10002B4B0((void *)&_mh_execute_header, v2, v9, "%@ was called too many times", (uint8_t *)&v14);
    }
  }

  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
  uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/CloudKit/C PLCloudKitTransport.m"));
  uint64_t v12 = NSStringFromSelector(a1);
  uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue(v12);
  [v10 handleFailureInMethod:a1, a2, v11, 1575, @"%@ was called too many times", v13 object file lineNumber description];

  abort();
}

void sub_100195F70(uint64_t a1, uint64_t a2)
{
  if (!_CPLSilentLogging)
  {
    uint64_t v5 = __CPLGenericOSLogDomain(a1);
    id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    if (sub_100004A78(v6))
    {
      *(_WORD *)uint64_t v9 = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "expect error", v9, 2u);
    }
  }

  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/CloudKit/CP LCloudKitTransport.m"));
  [v7 handleFailureInMethod:a1 object:a2 file:v8 lineNumber:1735 description:@"expect error"];

  abort();
}

void sub_100196034(void *a1, uint64_t a2)
{
  if (!_CPLSilentLogging)
  {
    uint64_t v5 = __CPLGenericOSLogDomain(a1);
    id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    if (sub_100004A78(v6))
    {
      uint64_t v8 = *a1;
      int v13 = 138412290;
      uint64_t v14 = v8;
      sub_10002B4B0( (void *)&_mh_execute_header,  v2,  v7,  "Engine was unable to set a file URL on recovered resource %@",  (uint8_t *)&v13);
    }
  }

  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
  uint64_t v10 = *(void *)(a2 + 72);
  uint64_t v11 = *(void *)(a2 + 40);
  uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/CloudKit/C PLCloudKitTransport.m"));
  [v9 handleFailureInMethod:v10, v11, v12, 2110, @"Engine was unable to set a file URL on recovered resource %@", *a1 object file lineNumber description];

  abort();
}

void sub_100196124(void *a1, uint64_t a2, uint64_t *a3)
{
  if (!_CPLSilentLogging)
  {
    uint64_t v6 = __CPLGenericOSLogDomain(a1);
    uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      uint64_t v9 = *a1;
      int v14 = 138412290;
      uint64_t v15 = v9;
      sub_10002B4B0((void *)&_mh_execute_header, v7, v8, "A helper for %@ has already been registered", (uint8_t *)&v14);
    }
  }

  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
  uint64_t v11 = *(void *)(a2 + 56);
  uint64_t v12 = *a3;
  int v13 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/CloudKit/C PLCloudKitTransport.m"));
  [v10 handleFailureInMethod:v11, v12, v13, 2367, @"A helper for %@ has already been registered", *a1 object file lineNumber description];

  abort();
}

void sub_100196220(uint64_t a1, uint64_t a2)
{
  if (!_CPLSilentLogging)
  {
    id v5 = sub_10008595C();
    uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    if (sub_100004A78(v6)) {
      sub_100004A64((void *)&_mh_execute_header, v7, v8, "missing error parameter", v9, v10, v11, v12, 0);
    }
  }

  int v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
  int v14 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/CloudKit/C PLCloudKitResourcesDownloadTask.m"));
  [v13 handleFailureInMethod:a1 object:a2 file:v14 lineNumber:149 description:@"missing error parameter"];

  abort();
}

void sub_1001962D4(uint64_t a1, uint64_t a2)
{
  if (!_CPLSilentLogging)
  {
    id v5 = sub_10008595C();
    uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    if (sub_100004A78(v6)) {
      sub_100004A64( (void *)&_mh_execute_header,  v7,  v8,  "Did not manage to produce a group of tasks to download",  v9,  v10,  v11,  v12,  0);
    }
  }

  int v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
  int v14 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/CloudKit/C PLCloudKitResourcesDownloadTask.m"));
  [v13 handleFailureInMethod:a1 object:a2 file:v14 lineNumber:406 description:@"Did not manage to produce a group of tasks to download"];

  abort();
}

void sub_100196388(uint64_t a1, uint64_t a2)
{
  if (!_CPLSilentLogging)
  {
    id v5 = sub_10008595C();
    uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    if (sub_100004A78(v6)) {
      sub_100004A64( (void *)&_mh_execute_header,  v7,  v8,  "We should at least be able to download the first task",  v9,  v10,  v11,  v12,  0);
    }
  }

  int v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
  int v14 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/CloudKit/C PLCloudKitResourcesDownloadTask.m"));
  [v13 handleFailureInMethod:a1 object:a2 file:v14 lineNumber:381 description:@"We should at least be able to download the first task"];

  abort();
}

void sub_10019643C(uint64_t a1, uint64_t *a2)
{
  if (!_CPLSilentLogging)
  {
    id v5 = sub_10008595C();
    uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    if (sub_100004A78(v6)) {
      sub_100004A64((void *)&_mh_execute_header, v7, v8, "invalid scope", v9, v10, v11, v12, 0);
    }
  }

  int v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
  uint64_t v14 = *(void *)(a1 + 40);
  uint64_t v15 = *a2;
  __int16 v16 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/CloudKit/C PLCloudKitResourcesDownloadTask.m"));
  [v13 handleFailureInMethod:v14 object:v15 file:v16 lineNumber:423 description:@"invalid scope"];

  abort();
}

void sub_1001964F8(void *a1, uint64_t a2, uint64_t a3)
{
  if (!_CPLSilentLogging)
  {
    id v7 = sub_10008595C();
    uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
    if (sub_10003A438(v8))
    {
      uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue([a1 resource]);
      sub_100064B18( (void *)&_mh_execute_header,  v9,  v10,  "%@ (%@) has no cloud resource to download",  v11,  v12,  v13,  v14,  v18,  v19,  2u);
    }
  }

  uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
  __int16 v16 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/CloudKit/C PLCloudKitResourcesDownloadTask.m"));
  uint8_t v17 = (void *)objc_claimAutoreleasedReturnValue([a1 resource]);
  [v15 handleFailureInMethod:a2, a3, v16, 477, @"%@ (%@) has no cloud resource to download", a1, v17 object file lineNumber description];

  abort();
}

void sub_100196608(void *a1, uint64_t a2, uint64_t a3)
{
  if (!_CPLSilentLogging)
  {
    id v7 = sub_10008595C();
    uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
    if (sub_10003A438(v8))
    {
      uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue([a1 resource]);
      sub_100064B18( (void *)&_mh_execute_header,  v9,  v10,  "%@ (%@) has no cloud resource to download",  v11,  v12,  v13,  v14,  v18,  v19,  2u);
    }
  }

  uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
  __int16 v16 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/CloudKit/C PLCloudKitResourcesDownloadTask.m"));
  uint8_t v17 = (void *)objc_claimAutoreleasedReturnValue([a1 resource]);
  [v15 handleFailureInMethod:a2, a3, v16, 696, @"%@ (%@) has no cloud resource to download", a1, v17 object file lineNumber description];

  abort();
}

void sub_100196718(uint64_t a1, uint64_t a2)
{
  if (!_CPLSilentLogging)
  {
    id v4 = sub_10008A55C();
    id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
    if (sub_10002B4A8(v5))
    {
      *(_WORD *)uint64_t v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "Missing shared zone identification", v8, 2u);
    }
  }

  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
  id v7 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/CloudKit/CP LCloudKitSimpleRecordUpdateTask.m"));
  [v6 handleFailureInMethod:a1 object:a2 file:v7 lineNumber:55 description:@"Missing shared zone identification"];

  abort();
}

void sub_1001967E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!_CPLSilentLogging)
  {
    id v6 = sub_10008A55C();
    id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
    if (sub_10002B4A8(v7))
    {
      int v11 = 138412290;
      uint64_t v12 = a1;
      sub_10002B4B0( (void *)&_mh_execute_header,  v7,  v8,  "Trying to create sparse private records for a non supported record class %@",  (uint8_t *)&v11);
    }
  }

  int v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
  int v10 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/CloudKit/C PLCloudKitSimpleRecordUpdateTask.m"));
  [v9 handleFailureInMethod:a2, a3, v10, 49, @"Trying to create sparse private records for a non supported record class %@", a1 object file lineNumber description];

  abort();
}

void sub_1001968C8(uint64_t a1, uint64_t a2)
{
  if (!_CPLSilentLogging)
  {
    id v4 = sub_10008A55C();
    id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
    if (sub_10002B4A8(v5))
    {
      int v11 = 138412290;
      uint64_t v12 = a1;
      sub_10002B4B0((void *)&_mh_execute_header, v5, v6, "Missing private record ID matching %@", (uint8_t *)&v11);
    }
  }

  id v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
  uint64_t v8 = *(void *)(a2 + 104);
  uint64_t v9 = *(void *)(a2 + 48);
  int v10 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/CloudKit/C PLCloudKitSimpleRecordUpdateTask.m"));
  [v7 handleFailureInMethod:v8, v9, v10, 74, @"Missing private record ID matching %@", a1 object file lineNumber description];

  abort();
}

void sub_1001969B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!_CPLSilentLogging)
  {
    id v6 = sub_10008A55C();
    id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
    if (sub_10002B4A8(v7))
    {
      int v11 = 138412290;
      uint64_t v12 = a1;
      sub_10002B4B0((void *)&_mh_execute_header, v7, v8, "Missing target for %@", (uint8_t *)&v11);
    }
  }

  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
  int v10 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/CloudKit/C PLCloudKitSimpleRecordUpdateTask.m"));
  [v9 handleFailureInMethod:a2, a3, v10, 363, @"Missing target for %@", a1 object file lineNumber description];

  abort();
}

void sub_100196A9C(uint64_t a1, uint64_t a2)
{
  if (!_CPLSilentLogging)
  {
    uint64_t v4 = __CPLGenericOSLogDomain(a1);
    id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
    if (sub_10002B4A8(v5)) {
      sub_10005061C( (void *)&_mh_execute_header,  v6,  v7,  "Root record for %@ has not type",  v8,  v9,  v10,  v11,  v14,  v15,  2u);
    }
  }

  uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
  int v13 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/CloudKit/C PLCloudKitZoneIdentification.m"));
  [v12 handleFailureInMethod:a2, a1, v13, 154, @"Root record for %@ has not type", *(void *)(a1 + 32) object file lineNumber description];

  abort();
}

void sub_100196B7C(uint64_t a1, uint64_t a2)
{
  if (!_CPLSilentLogging)
  {
    uint64_t v4 = __CPLGenericOSLogDomain(a1);
    id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
    if (sub_10002B4A8(v5)) {
      sub_10005061C( (void *)&_mh_execute_header,  v6,  v7,  "Scope change for %@ should not be nil",  v8,  v9,  v10,  v11,  v14,  v15,  2u);
    }
  }

  uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
  int v13 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/CloudKit/C PLCloudKitZoneIdentification.m"));
  [v12 handleFailureInMethod:a2, a1, v13, 163, @"Scope change for %@ should not be nil", *(void *)(a1 + 32) object file lineNumber description];

  abort();
}

void sub_100196C5C(uint64_t a1, uint64_t a2)
{
  if (!_CPLSilentLogging)
  {
    uint64_t v4 = __CPLGenericOSLogDomain(a1);
    id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
    if (sub_10002B4A8(v5)) {
      sub_10005061C( (void *)&_mh_execute_header,  v6,  v7,  "Root record for %@ has not type",  v8,  v9,  v10,  v11,  v14,  v15,  2u);
    }
  }

  uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
  int v13 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/CloudKit/C PLCloudKitZoneIdentification.m"));
  [v12 handleFailureInMethod:a2, a1, v13, 191, @"Root record for %@ has not type", *(void *)(a1 + 32) object file lineNumber description];

  abort();
}

void sub_100196D3C(uint64_t a1, uint64_t a2)
{
  if (!_CPLSilentLogging)
  {
    uint64_t v4 = __CPLGenericOSLogDomain(a1);
    id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
    if (sub_10002B4A8(v5)) {
      sub_10005061C((void *)&_mh_execute_header, v6, v7, "Missing share types for %@", v8, v9, v10, v11, v14, v15, 2u);
    }
  }

  uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
  int v13 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/CloudKit/C PLCloudKitZoneIdentification.m"));
  [v12 handleFailureInMethod:a2, a1, v13, 210, @"Missing share types for %@", *(void *)(a1 + 32) object file lineNumber description];

  abort();
}

void sub_100196E1C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!_CPLSilentLogging)
  {
    uint64_t v6 = __CPLGenericOSLogDomain(a1);
    int v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
    if (sub_10002B4A8(v7)) {
      sub_100064B18( (void *)&_mh_execute_header,  v8,  v9,  "Invalid scope change %@ for %@",  v10,  v11,  v12,  v13,  v16,  v17,  2u);
    }
  }

  uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
  uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/CloudKit/C PLCloudKitZoneIdentification.m"));
  [v14 handleFailureInMethod:a3, a2, v15, 809, @"Invalid scope change %@ for %@", a1, a2 object file lineNumber description];

  abort();
}

void sub_100196F08(void *a1, uint64_t a2, uint64_t a3)
{
  if (!_CPLSilentLogging)
  {
    uint64_t v5 = __CPLGenericOSLogDomain(a1);
    uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    if (sub_10002B4A8(v6))
    {
      int v7 = (void *)objc_claimAutoreleasedReturnValue([a1 engineScope]);
      int v8 = (void *)sub_1000715D0();
      id v9 = sub_100093120(v8);
      sub_100064B18( (void *)&_mh_execute_header,  v10,  v11,  "Unexpected class for %@: %@",  v12,  v13,  v14,  v15,  v19,  v20,  v21);
    }
  }

  uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
  uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/CloudKit/C PLCloudKitZoneIdentification.m"));
  uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue([a1 engineScope]);
  [v16 handleFailureInMethod:a3, a1, v17, 1000, @"Unexpected class for %@: %@", v18, sub_1000715D0() object file lineNumber description];

  abort();
}

void sub_10019701C(void *a1, uint64_t a2, uint64_t a3)
{
  if (!_CPLSilentLogging)
  {
    uint64_t v5 = __CPLGenericOSLogDomain(a1);
    uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    if (sub_10002B4A8(v6))
    {
      int v7 = (void *)objc_claimAutoreleasedReturnValue([a1 engineScope]);
      int v8 = (void *)sub_1000715D0();
      id v9 = sub_100093120(v8);
      sub_100064B18( (void *)&_mh_execute_header,  v10,  v11,  "Unexpected class for %@: %@",  v12,  v13,  v14,  v15,  v19,  v20,  v21);
    }
  }

  uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
  uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/CloudKit/C PLCloudKitZoneIdentification.m"));
  uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue([a1 engineScope]);
  [v16 handleFailureInMethod:a3, a1, v17, 1033, @"Unexpected class for %@: %@", v18, sub_1000715D0() object file lineNumber description];

  abort();
}

void sub_100197130(void *a1, uint64_t a2, uint64_t a3)
{
  if (!_CPLSilentLogging)
  {
    uint64_t v5 = __CPLGenericOSLogDomain(a1);
    uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    if (sub_10002B4A8(v6))
    {
      int v7 = (void *)objc_claimAutoreleasedReturnValue([a1 engineScope]);
      int v8 = (void *)sub_1000715D0();
      id v9 = sub_100093120(v8);
      sub_100064B18( (void *)&_mh_execute_header,  v10,  v11,  "Unexpected class for %@: %@",  v12,  v13,  v14,  v15,  v19,  v20,  v21);
    }
  }

  uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
  uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/CloudKit/C PLCloudKitZoneIdentification.m"));
  uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue([a1 engineScope]);
  [v16 handleFailureInMethod:a3, a1, v17, 1066, @"Unexpected class for %@: %@", v18, sub_1000715D0() object file lineNumber description];

  abort();
}

void sub_100197244(void *a1, uint64_t a2)
{
  if (!_CPLSilentLogging)
  {
    id v5 = sub_100094394();
    uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    if (sub_100004A78(v6)) {
      sub_10005061C( (void *)&_mh_execute_header,  v7,  v8,  "Failed to find scoped identifier for %@",  v9,  v10,  v11,  v12,  v17,  v18,  2u);
    }
  }

  int v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
  uint64_t v14 = *(void *)(a2 + 104);
  uint64_t v15 = *(void *)(a2 + 48);
  uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/CloudKit/C PLCloudKitDownloadComputeStatesTask.m"));
  [v13 handleFailureInMethod:v14, v15, v16, 144, @"Failed to find scoped identifier for %@", *a1 object file lineNumber description];

  abort();
}

void sub_10019732C(uint64_t a1, uint64_t a2)
{
  if (!_CPLSilentLogging)
  {
    id v5 = sub_100094394();
    uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    if (sub_100004A78(v6)) {
      sub_10005061C( (void *)&_mh_execute_header,  v7,  v8,  "%@ should have a payload file",  v9,  v10,  v11,  v12,  v17,  v18,  2u);
    }
  }

  int v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
  uint64_t v14 = *(void *)(a2 + 104);
  uint64_t v15 = *(void *)(a2 + 48);
  uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/CloudKit/C PLCloudKitDownloadComputeStatesTask.m"));
  [v13 handleFailureInMethod:v14, v15, v16, 177, @"%@ should have a payload file", a1 object file lineNumber description];

  abort();
}

void sub_10019740C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!_CPLSilentLogging)
  {
    id v7 = sub_1000955C4();
    int v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
    if (sub_10003A438(v8)) {
      sub_10002B494( (void *)&_mh_execute_header,  v9,  v10,  "Asked to fetch shared records %@ but we have no shared sync zone to work with",  v11,  v12,  v13,  v14,  v17,  v18,  2u);
    }
  }

  uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
  uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/CloudKit/C PLCloudKitUploadBatchTask.m"));
  [v15 handleFailureInMethod:a2, a3, v16, 408, @"Asked to fetch shared records %@ but we have no shared sync zone to work with", a1 object file lineNumber description];

  abort();
}

void sub_1001974E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!_CPLSilentLogging)
  {
    id v7 = sub_1000955C4();
    int v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
    if (sub_10003A438(v8)) {
      sub_10002B494( (void *)&_mh_execute_header,  v9,  v10,  "Asked to fetch shared records %@ but we have no shared sync zone to work with",  v11,  v12,  v13,  v14,  v17,  v18,  2u);
    }
  }

  uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
  uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/CloudKit/C PLCloudKitUploadBatchTask.m"));
  [v15 handleFailureInMethod:a2, a3, v16, 444, @"Asked to fetch shared records %@ but we have no shared sync zone to work with", a1 object file lineNumber description];

  abort();
}

void sub_1001975C4(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  if (!_CPLSilentLogging)
  {
    id v7 = sub_1000955C4();
    int v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
    if (sub_10003A438(v8)) {
      sub_10002B494( (void *)&_mh_execute_header,  v9,  v10,  "Failed to transform a CK error to a CPL error: %@",  v11,  v12,  v13,  v14,  v19,  v20,  2u);
    }
  }

  uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
  uint64_t v16 = *(void *)(a2 + 96);
  uint64_t v17 = *a3;
  uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/CloudKit/C PLCloudKitUploadBatchTask.m"));
  [v15 handleFailureInMethod:v16, v17, v18, 560, @"Failed to transform a CK error to a CPL error: %@", a1 object file lineNumber description];

  abort();
}

void sub_1001976A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!_CPLSilentLogging)
  {
    uint64_t v6 = __CPLGenericOSLogDomain(a1);
    id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__int128 buf = 138412290;
      uint64_t v11 = a1;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_ERROR,  "Unable to find a scoped identifier for %@",  buf,  0xCu);
    }
  }

  int v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
  int v9 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/CloudKit/CP LCKRecordTranslator.m"));
  [v8 handleFailureInMethod:a2, a3, v9, 61, @"Unable to find a scoped identifier for %@", a1 object file lineNumber description];

  abort();
}

void sub_10019779C(uint64_t a1, uint64_t a2)
{
  if (!_CPLSilentLogging)
  {
    uint64_t v5 = __CPLGenericOSLogDomain(a1);
    uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    if (sub_100004A78(v6)) {
      sub_10005061C( (void *)&_mh_execute_header,  v7,  v8,  "Cannot have nil personIdentifier for %@",  v9,  v10,  v11,  v12,  v15,  v16,  2u);
    }
  }

  int v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
  int v14 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/CloudKit/C KRecord+CPLFaceCrop.i"));
  [v13 handleFailureInMethod:a2, a1, v14, 11, @"Cannot have nil personIdentifier for %@", a1 object file lineNumber description];

  abort();
}

void sub_100197870(uint64_t a1, uint64_t a2)
{
  if (!_CPLSilentLogging)
  {
    uint64_t v5 = __CPLGenericOSLogDomain(a1);
    uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    if (sub_100004A78(v6)) {
      sub_10005061C((void *)&_mh_execute_header, v7, v8, "Missing resourceData for %@", v9, v10, v11, v12, v15, v16, 2u);
    }
  }

  int v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
  int v14 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/CloudKit/C KRecord+CPLFaceCrop.i"));
  [v13 handleFailureInMethod:a2, a1, v14, 25, @"Missing resourceData for %@", a1 object file lineNumber description];

  abort();
}

void sub_100197944(uint64_t a1, uint64_t a2)
{
  if (!_CPLSilentLogging)
  {
    uint64_t v5 = __CPLGenericOSLogDomain(a1);
    uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    if (sub_100004A78(v6)) {
      sub_10005061C((void *)&_mh_execute_header, v7, v8, "%@ should have a master", v9, v10, v11, v12, v15, v16, 2u);
    }
  }

  int v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
  int v14 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/CloudKit/C KRecord+CPLAsset.i"));
  [v13 handleFailureInMethod:a2, a1, v14, 87, @"%@ should have a master", a1 object file lineNumber description];

  abort();
}

void sub_100197A18(uint64_t a1, uint64_t a2)
{
  if (!_CPLSilentLogging)
  {
    uint64_t v4 = __CPLGenericOSLogDomain(a1);
    uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
    if (sub_10002B4A8(v5))
    {
      *(_WORD *)int v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "expect error", v8, 2u);
    }
  }

  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
  int v7 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/CloudKit/CP LCloudKitErrors.m"));
  [v6 handleFailureInMethod:a1 object:a2 file:v7 lineNumber:67 description:@"expect error"];

  abort();
}

void sub_100197AE0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!_CPLSilentLogging)
  {
    uint64_t v6 = __CPLGenericOSLogDomain(a1);
    int v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
    if (sub_10002B4A8(v7))
    {
      *(_DWORD *)__int128 buf = 138412290;
      uint64_t v11 = a1;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "incorrect partial failure error: %@", buf, 0xCu);
    }
  }

  int v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
  int v9 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/CloudKit/CP LCloudKitErrors.m"));
  [v8 handleFailureInMethod:a2, a3, v9, 656, @"incorrect partial failure error: %@", a1 object file lineNumber description];

  abort();
}

void sub_100197BD0(void *a1, void *a2)
{
  if (!_CPLSilentLogging)
  {
    uint64_t v4 = __CPLGenericOSLogDomain(a1);
    uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
    if (sub_10002B4A8(v5))
    {
      uint64_t v6 = *a1;
      uint64_t v7 = a2[4];
      *(_DWORD *)__int128 buf = 138412546;
      uint64_t v13 = v6;
      __int16 v14 = 2112;
      uint64_t v15 = v7;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_ERROR,  "incorrect item (not %@) in partial failure error %@",  buf,  0x16u);
    }
  }

  int v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
  uint64_t v9 = a2[7];
  uint64_t v10 = a2[8];
  uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/CloudKit/C PLCloudKitErrors.m"));
  [v8 handleFailureInMethod:v9, v10, v11, 660, @"incorrect item (not %@) in partial failure error %@", *a1, a2[4] object file lineNumber description];

  abort();
}

void sub_100197CDC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!_CPLSilentLogging)
  {
    uint64_t v6 = __CPLGenericOSLogDomain(a1);
    uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__int128 buf = 138412290;
      uint64_t v11 = a1;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_ERROR,  "Current session does not have a task of class %@",  buf,  0xCu);
    }
  }

  int v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/CloudKit/CP LCloudKitOperationCounter.m"));
  [v8 handleFailureInMethod:a2, a3, v9, 86, @"Current session does not have a task of class %@", a1 object file lineNumber description];

  abort();
}

void sub_100197DD0()
{
  if (!_CPLSilentLogging)
  {
    id v1 = sub_1000AD2D4();
    uint64_t v2 = (os_log_s *)objc_claimAutoreleasedReturnValue(v1);
    if (sub_100004A78(v2))
    {
      *(_WORD *)uint64_t v5 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v0,  OS_LOG_TYPE_ERROR,  "Trying to launch auxiliary operation but it is not relevant to begin with",  v5,  2u);
    }
  }

  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/CloudKit/CP LCloudKitCleanupStagedScopeTask.m"));
  objc_msgSend((id)sub_10002B4BC(), "handleFailureInMethod:object:file:lineNumber:description:");

  abort();
}

void sub_100197E90( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, __int128 buf, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21)
{
  a20 = v21;
  a21 = v22;
  uint64_t v24 = v23;
  uint64_t v26 = v25;
  uint64_t v28 = v27;
  if (!_CPLSilentLogging)
  {
    id v29 = sub_1000AD2D4();
    id v30 = (os_log_s *)objc_claimAutoreleasedReturnValue(v29);
    if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
    {
      uint64_t v31 = *v28;
      LODWORD(buf) = 138412290;
      *(void *)((char *)&buf + 4) = v31;
      _os_log_impl( (void *)&_mh_execute_header,  v30,  OS_LOG_TYPE_ERROR,  "main %@ is already launched",  (uint8_t *)&buf,  0xCu);
    }
  }

  uint64_t v32 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
  uint64_t v33 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/CloudKit/C PLCloudKitCleanupStagedScopeTask.m"));
  [v32 handleFailureInMethod:v26 object:v24 file:v33 lineNumber:242 description:@"main %@ is already launched"];

  abort();
}

#error "100198004: call analysis failed (funcsize=58)"
#error "1001980FC: call analysis failed (funcsize=58)"
#error "1001981F4: call analysis failed (funcsize=58)"
#error "1001982EC: call analysis failed (funcsize=58)"
#error "1001983E0: call analysis failed (funcsize=53)"
#error "1001984C8: call analysis failed (funcsize=58)"
void sub_100198544(const char *a1, uint64_t a2)
{
  uint64_t v4;
  os_log_s *v5;
  NSString *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  NSString *v11;
  void *v12;
  uint8_t buf[4];
  void *v14;
  __int16 v15;
  uint64_t v16;
  if (!_CPLSilentLogging)
  {
    uint64_t v4 = __CPLGenericOSLogDomain(a1);
    uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      uint64_t v6 = NSStringFromSelector(a1);
      uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
      int v8 = *(void *)(a2 + 32);
      *(_DWORD *)__int128 buf = 138412546;
      __int16 v14 = v7;
      uint64_t v15 = 2112;
      uint64_t v16 = v8;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "%@ called too many times for %@", buf, 0x16u);
    }
  }

  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/CloudKit/C PLCloudKitMetric.m"));
  uint64_t v11 = NSStringFromSelector(a1);
  int v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
  [v9 handleFailureInMethod:a1, a2, v10, 118, @"%@ called too many times for %@", v12, *(void *)(a2 + 32) object file lineNumber description];

  abort();
}

void sub_100198670(uint64_t a1, uint64_t *a2)
{
  if (!_CPLSilentLogging)
  {
    id v4 = sub_1000B20D0();
    uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t v10 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_ERROR,  "We should have the current user ID here",  v10,  2u);
    }
  }

  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
  uint64_t v7 = *(void *)(a1 + 56);
  uint64_t v8 = *a2;
  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/CloudKit/CP LCloudKitExitSharedLibraryTask.m"));
  [v6 handleFailureInMethod:v7 object:v8 file:v9 lineNumber:93 description:@"We should have the current user ID here"];

  abort();
}

void sub_100198744(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  if (!_CPLSilentLogging)
  {
    id v6 = sub_1000B20D0();
    uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__int128 buf = 138412290;
      uint64_t v13 = a1;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_ERROR,  "Failed to compute staging scope identifier from staging zone ID %@",  buf,  0xCu);
    }
  }

  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
  uint64_t v9 = *(void *)(a2 + 56);
  uint64_t v10 = *a3;
  uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/CloudKit/C PLCloudKitExitSharedLibraryTask.m"));
  [v8 handleFailureInMethod:v9, v10, v11, 129, @"Failed to compute staging scope identifier from staging zone ID %@", a1 object file lineNumber description];

  abort();
}

#error "1001988AC: call analysis failed (funcsize=51)"
void sub_10019891C( uint64_t a1,  uint64_t a2,  uint64_t a3,  uint64_t a4,  uint64_t a5,  uint64_t a6,  uint64_t a7,  uint64_t a8,  uint64_t a9,  uint64_t a10,  __int128 a11,  uint64_t a12,  uint64_t a13,  uint64_t a14,  uint64_t a15,  uint64_t a16,  uint64_t a17,  uint64_t a18,  uint64_t a19,  uint64_t a20,  uint64_t a21)
{
  uint64_t v21;
  void *v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  os_log_s *v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  sub_10002B4D0();
  a20 = v21;
  a21 = v23;
  uint64_t v24 = v22;
  if (!_CPLSilentLogging)
  {
    uint64_t v25 = __CPLGenericOSLogDomain(v22);
    uint64_t v26 = (os_log_s *)objc_claimAutoreleasedReturnValue(v25);
    if (sub_10002B4A8(v26))
    {
      uint64_t v28 = v24[5];
      LODWORD(a11) = 138412290;
      *(void *)((char *)&a11 + 4) = v28;
      sub_10002B4B0( (void *)&_mh_execute_header,  v26,  v27,  "Failed to properly get the final scope change for %@",  (uint8_t *)&a11);
    }
  }

  id v29 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
  id v30 = v24[8];
  uint64_t v31 = v24[4];
  uint64_t v32 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/DirectClie ntToEngine/CPLDirectLibraryManager.m"));
  [v29 handleFailureInMethod:v30 object:v31 file:v32 lineNumber:777 description:@"Failed to properly get the final scope change for %@"];

  abort();
}

#error "100198A80: call analysis failed (funcsize=57)"
void sub_100198AFC( uint64_t a1,  uint64_t a2,  uint64_t a3,  uint64_t a4,  uint64_t a5,  uint64_t a6,  uint64_t a7,  uint64_t a8,  uint64_t a9,  uint64_t a10,  __int128 a11,  uint64_t a12,  uint64_t a13,  uint64_t a14,  uint64_t a15,  uint64_t a16,  uint64_t a17,  uint64_t a18,  uint64_t a19,  uint64_t a20,  uint64_t a21)
{
  uint64_t v21;
  void *v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  os_log_s *v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  sub_10002B4D0();
  a20 = v21;
  a21 = v23;
  uint64_t v24 = v22;
  if (!_CPLSilentLogging)
  {
    uint64_t v25 = __CPLGenericOSLogDomain(v22);
    uint64_t v26 = (os_log_s *)objc_claimAutoreleasedReturnValue(v25);
    if (sub_10002B4A8(v26))
    {
      uint64_t v28 = v24[4];
      LODWORD(a11) = 138412290;
      *(void *)((char *)&a11 + 4) = v28;
      sub_10002B4B0( (void *)&_mh_execute_header,  v26,  v27,  "Failed to properly get the final scope change for %@",  (uint8_t *)&a11);
    }
  }

  id v29 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
  id v30 = v24[8];
  uint64_t v31 = v24[5];
  uint64_t v32 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/DirectClie ntToEngine/CPLDirectLibraryManager.m"));
  [v29 handleFailureInMethod:v30 object:v31 file:v32 lineNumber:875 description:@"Failed to properly get the final scope change for %@"];

  abort();
}

#error "100198C58: call analysis failed (funcsize=53)"
void sub_100198CCC( uint64_t a1,  uint64_t a2,  uint64_t a3,  uint64_t a4,  uint64_t a5,  uint64_t a6,  uint64_t a7,  uint64_t a8,  uint64_t a9,  uint64_t a10,  __int128 a11,  uint64_t a12,  uint64_t a13,  uint64_t a14,  uint64_t a15,  uint64_t a16,  uint64_t a17,  uint64_t a18,  uint64_t a19,  uint64_t a20,  uint64_t a21)
{
  uint64_t v21;
  void *v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  os_log_s *v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  sub_10002B4D0();
  a20 = v21;
  a21 = v23;
  uint64_t v24 = v22;
  if (!_CPLSilentLogging)
  {
    uint64_t v25 = __CPLGenericOSLogDomain(v22);
    uint64_t v26 = (os_log_s *)objc_claimAutoreleasedReturnValue(v25);
    if (sub_10002B4A8(v26))
    {
      uint64_t v28 = *(void *)(*(void *)(v24[7] + 8LL) + 40LL);
      LODWORD(a11) = 138412290;
      *(void *)((char *)&a11 + 4) = v28;
      sub_10002B4B0( (void *)&_mh_execute_header,  v26,  v27,  "Failed to properly get the final scope change for %@",  (uint8_t *)&a11);
    }
  }

  id v29 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
  id v30 = v24[8];
  uint64_t v31 = v24[4];
  uint64_t v32 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/DirectClie ntToEngine/CPLDirectLibraryManager.m"));
  [v29 handleFailureInMethod:v30 object:v31 file:v32 lineNumber:1058 description:@"Failed to properly get the final scope change for %@"];

  abort();
}

#error "100198E40: call analysis failed (funcsize=57)"
void sub_100198EBC(uint64_t a1, uint64_t *a2)
{
  os_log_s *v2;
  uint64_t v5;
  os_log_s *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint8_t v11[16];
  if (!_CPLSilentLogging)
  {
    uint64_t v5 = __CPLGenericOSLogDomain(a1);
    id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    if (sub_100004A78(v6))
    {
      *(_WORD *)uint64_t v11 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_ERROR,  "There should be no resources to check on server when not asked to perform such check",  v11,  2u);
    }
  }

  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
  uint64_t v8 = *(void *)(a1 + 112);
  uint64_t v9 = *a2;
  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/DirectClie ntToEngine/CPLDirectLibraryManager.m"));
  [v7 handleFailureInMethod:v8 object:v9 file:v10 lineNumber:2532 description:@"There should be no resources to check on server when not asked to perform such check"];

  abort();
}

#error "100199004: call analysis failed (funcsize=59)"
void sub_100199084(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  id v6;
  os_log_s *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint8_t buf[4];
  uint64_t v14;
  if (!_CPLSilentLogging)
  {
    id v6 = sub_10013AF3C();
    uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      uint64_t v8 = *(void *)(*a1 + a2);
      *(_DWORD *)__int128 buf = 138412290;
      __int16 v14 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "Compacted batch for %@ is nil", buf, 0xCu);
    }
  }

  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
  uint64_t v10 = *(void *)(a3 + 64);
  uint64_t v11 = *a1;
  int v12 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/DirectClie ntToEngine/CPLDirectPullChangeSession.m"));
  [v9 handleFailureInMethod:v10, v11, v12, 177, @"Compacted batch for %@ is nil", *(void *)(*a1 + a2) object file lineNumber description];

  abort();
}

void sub_100199190(char a1, uint64_t a2)
{
  if ((a1 & 1) != 0)
  {
    id v3 = sub_10013AF3C();
    id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t v9 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_ERROR,  "We should not have a non-empty batch yet as we are trying to look for one",  v9,  2u);
    }
  }

  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
  uint64_t v6 = *(void *)(a2 + 64);
  uint64_t v7 = *(void *)(a2 + 32);
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/DirectClien tToEngine/CPLDirectPullChangeSession.m"));
  [v5 handleFailureInMethod:v6 object:v7 file:v8 lineNumber:238 description:@"We should not have a non-empty batch yet as we are trying to look for one"];

  abort();
}

void sub_100199254(const char *a1, uint64_t a2)
{
  if (!_CPLSilentLogging)
  {
    uint64_t v4 = __CPLGenericOSLogDomain(a1);
    uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      uint64_t v6 = NSStringFromSelector(a1);
      uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
      *(_DWORD *)__int128 buf = 138412290;
      uint64_t v13 = v7;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "%@ called too many times", buf, 0xCu);
    }
  }

  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/DirectClien tToEngine/CPLDirectChangeSession.m"));
  uint64_t v10 = NSStringFromSelector(a1);
  uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
  [v8 handleFailureInMethod:a1, a2, v9, 146, @"%@ called too many times", v11 object file lineNumber description];

  abort();
}

void sub_10019936C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  if (!_CPLSilentLogging)
  {
    id v6 = sub_10013EB00();
    uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(*(void *)a1 + 8) + 40) incomingBatch]);
      *(_DWORD *)__int128 buf = 138412290;
      uint64_t v15 = v8;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_ERROR,  "Failed to create a diff from incoming batch:\n%@",  buf,  0xCu);
    }
  }

  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
  uint64_t v10 = *(void *)(a2 + 64);
  uint64_t v11 = *a3;
  int v12 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/DirectClie ntToEngine/CPLDirectPushChangeSession.m"));
  uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(*(void *)a1 + 8) + 40) incomingBatch]);
  [v9 handleFailureInMethod:v10, v11, v12, 195, @"Failed to create a diff from incoming batch:\n%@", v13 object file lineNumber description];

  abort();
}

void sub_1001994A0(uint64_t a1, uint64_t a2)
{
  if (!_CPLSilentLogging)
  {
    id v4 = sub_100140908();
    uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
    if (sub_10002B4A8(v5)) {
      sub_100004A64( (void *)&_mh_execute_header,  v6,  v7,  "invalid scope in scope storage: missing identifier",  v8,  v9,  v10,  v11,  0);
    }
  }

  int v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
  uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/Prequelite Store/CPLPrequeliteScopeStorage.m"));
  [v12 handleFailureInMethod:a1 object:a2 file:v13 lineNumber:62 description:@"invalid scope in scope storage: missing identifier"];

  abort();
}

void sub_100199558(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/PrequeliteS tore/CPLPrequeliteScopeStorage.m"));
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue( +[CPLScopeChange descriptionForScopeType:]( &OBJC_CLASS___CPLScopeChange,  "descriptionForScopeType:",  a1));
  [v6 handleFailureInMethod:a2, a3, v7, 313, @"%@ should not be directly synchronized with client", v8 object file lineNumber description];

  abort();
}

void sub_1001995F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!_CPLSilentLogging)
  {
    id v6 = sub_100140908();
    uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
    if (sub_10002B4A8(v7))
    {
      int v11 = 138412290;
      uint64_t v12 = a1;
      sub_10002B4B0( (void *)&_mh_execute_header,  v7,  v8,  "Missing scope types in order of scope types for %@",  (uint8_t *)&v11);
    }
  }

  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/Prequelite Store/CPLPrequeliteScopeStorage.m"));
  [v9 handleFailureInMethod:a2, a3, v10, 778, @"Missing scope types in order of scope types for %@", a1 object file lineNumber description];

  abort();
}

void sub_1001996E0(uint64_t a1, uint64_t a2)
{
  if (!_CPLSilentLogging)
  {
    id v4 = sub_100140908();
    uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
    if (sub_10002B4A8(v5)) {
      sub_100004A64( (void *)&_mh_execute_header,  v6,  v7,  "Unable to determine transport group class",  v8,  v9,  v10,  v11,  0);
    }
  }

  uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
  uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/Prequelite Store/CPLPrequeliteScopeStorage.m"));
  [v12 handleFailureInMethod:a1 object:a2 file:v13 lineNumber:1699 description:@"Unable to determine transport group class"];

  abort();
}

void sub_100199798(void *a1)
{
  id v1 = objc_begin_catch(a1);
  if (!_CPLSilentLogging)
  {
    id v2 = sub_100140908();
    id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
    if (sub_10002B4A8(v3))
    {
      int v5 = 138412290;
      id v6 = v1;
      sub_10002B4B0( (void *)&_mh_execute_header,  v3,  v4,  "Stored transport group does not seem supported anymore (%@)",  (uint8_t *)&v5);
    }
  }

  objc_end_catch();
}

void sub_100199854(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!_CPLSilentLogging)
  {
    id v6 = sub_100140908();
    uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
    if (sub_10002B4A8(v7))
    {
      int v11 = 138412290;
      uint64_t v12 = a1;
      sub_10002B4B0((void *)&_mh_execute_header, v7, v8, "Can't serialize %@", (uint8_t *)&v11);
    }
  }

  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/Prequelite Store/CPLPrequeliteScopeStorage.m"));
  [v9 handleFailureInMethod:a2, a3, v10, 1724, @"Can't serialize %@", a1 object file lineNumber description];

  abort();
}

void sub_10019993C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!_CPLSilentLogging)
  {
    uint64_t v6 = __CPLGenericOSLogDomain(a1);
    uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__int128 buf = 138412290;
      uint64_t v11 = a1;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_ERROR,  "Can't get related scoped identifier from %@",  buf,  0xCu);
    }
  }

  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/PrequeliteS tore/CPLStoreMigrationAssistant_101386451.m"));
  [v8 handleFailureInMethod:a2, a3, v9, 172, @"Can't get related scoped identifier from %@", a1 object file lineNumber description];

  abort();
}

void sub_100199A30( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, __int128 a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21)
{
  a20 = v21;
  a21 = v22;
  uint64_t v24 = v23;
  uint64_t v26 = v25;
  if (!_CPLSilentLogging)
  {
    id v27 = sub_10014F0EC();
    uint64_t v28 = (os_log_s *)objc_claimAutoreleasedReturnValue(v27);
    if (sub_10002B4A8(v28))
    {
      id v29 = NSStringFromSelector("initializeStorage");
      id v30 = (void *)objc_claimAutoreleasedReturnValue(v29);
      LODWORD(a11) = 138412546;
      *(void *)((char *)&a11 + 4) = v26;
      WORD6(a11) = 2112;
      *(void *)((char *)&a11 + 14) = v30;
      sub_10005B698( (void *)&_mh_execute_header,  v28,  v31,  "%@ did not call its super implementation of %@",  (uint8_t *)&a11);
    }
  }

  uint64_t v32 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
  uint64_t v33 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/Prequelite Store/CPLPrequeliteStorage.m"));
  uint64_t v34 = NSStringFromSelector("initializeStorage");
  uint64_t v35 = (void *)objc_claimAutoreleasedReturnValue(v34);
  [v32 handleFailureInMethod:v24 object:v26 file:v33 lineNumber:61 description:@"%@ did not call its super implementation of %@"];

  abort();
}

void sub_100199B48( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, __int128 a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21)
{
  a20 = v21;
  a21 = v22;
  uint64_t v24 = v23;
  uint64_t v26 = v25;
  if ((v27 & 1) != 0)
  {
    id v28 = sub_10014F0EC();
    id v29 = (os_log_s *)objc_claimAutoreleasedReturnValue(v28);
    if (sub_10002B4A8(v29))
    {
      id v30 = (void *)sub_1000235A0();
      id v31 = v30;
      uint64_t v32 = NSStringFromSelector(v24);
      uint64_t v33 = (void *)objc_claimAutoreleasedReturnValue(v32);
      LODWORD(a11) = 138412546;
      *(void *)((char *)&a11 + 4) = v30;
      WORD6(a11) = 2112;
      *(void *)((char *)&a11 + 14) = v33;
      sub_10005B698( (void *)&_mh_execute_header,  v29,  v34,  "-[%@ %@] while it was not supposed to initialize its storage",  (uint8_t *)&a11);
    }
  }

  uint64_t v35 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
  id v36 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/Prequelite Store/CPLPrequeliteStorage.m"));
  sub_1000235A0();
  __int128 v37 = NSStringFromSelector(v24);
  id v38 = (void *)objc_claimAutoreleasedReturnValue(v37);
  [v35 handleFailureInMethod:v24 object:v26 file:v36 lineNumber:78 description:@"-[%@ %@] while it was not supposed to initialize its storage"];

  abort();
}

#error "100199CEC: call analysis failed (funcsize=55)"
#error "100199DD8: call analysis failed (funcsize=55)"
#error "100199EC4: call analysis failed (funcsize=55)"
#error "100199FB0: call analysis failed (funcsize=55)"
#error "10019A08C: call analysis failed (funcsize=49)"
#error "10019A160: call analysis failed (funcsize=49)"
#error "10019A234: call analysis failed (funcsize=49)"
#error "10019A308: call analysis failed (funcsize=49)"
void sub_10019A36C(uint64_t a1, uint64_t a2)
{
  id v4;
  os_log_s *v5;
  id v6;
  uint64_t v7;
  void *v8;
  void *v9;
  int v10;
  id v11;
  if (!_CPLSilentLogging)
  {
    uint64_t v4 = sub_10014F0EC();
    int v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
    if (sub_10002B4A8(v5))
    {
      uint64_t v10 = 138412290;
      uint64_t v11 = (id)sub_1000235A0();
      uint64_t v6 = v11;
      sub_10002B4B0( (void *)&_mh_execute_header,  v5,  v7,  "Trying to recreate main table for %@ while it was just already created",  (uint8_t *)&v10);
    }
  }

  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/PrequeliteS tore/CPLPrequeliteStorage.m"));
  [v8 handleFailureInMethod:a2, a1, v9, 467, @"Trying to recreate main table for %@ while it was just already created", sub_1000235A0() object file lineNumber description];

  abort();
}

void sub_10019A460( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, __int128 a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21)
{
  a20 = v21;
  a21 = v22;
  uint64_t v24 = v23;
  uint64_t v26 = v25;
  if (!_CPLSilentLogging)
  {
    id v27 = sub_10014F0EC();
    id v28 = (os_log_s *)objc_claimAutoreleasedReturnValue(v27);
    if (sub_10002B4A8(v28))
    {
      uint64_t v30 = *(void *)(v26 + 16);
      LODWORD(a11) = 138412290;
      *(void *)((char *)&a11 + 4) = v30;
      sub_10002B4B0( (void *)&_mh_execute_header,  v28,  v29,  "trying to recreate main table %@ while already creating the main table",  (uint8_t *)&a11);
    }
  }

  id v31 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
  uint64_t v32 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/Prequelite Store/CPLPrequeliteStorage.m"));
  [v31 handleFailureInMethod:v24 object:v26 file:v32 lineNumber:466 description:@"trying to recreate main table %@ while already creating the main table"];

  abort();
}

void sub_10019A554(uint64_t a1, uint64_t *a2)
{
  if (!_CPLSilentLogging)
  {
    uint64_t v5 = __CPLGenericOSLogDomain(a1);
    uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    if (sub_100004A78(v6))
    {
      uint64_t v7 = NSStringFromSelector(*(SEL *)(a1 + 48));
      uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
      *(_DWORD *)__int128 buf = 138412290;
      uint64_t v16 = v8;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "%@ called too many times", buf, 0xCu);
    }
  }

  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
  uint64_t v10 = *(void *)(a1 + 48);
  uint64_t v11 = *a2;
  uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/Base/CPLBaseSyncManager.m"));
  uint64_t v13 = NSStringFromSelector(*(SEL *)(a1 + 48));
  __int16 v14 = (void *)objc_claimAutoreleasedReturnValue(v13);
  [v9 handleFailureInMethod:v10, v11, v12, 232, @"%@ called too many times", v14 object file lineNumber description];

  abort();
}

void sub_10019A66C(uint64_t a1, uint64_t a2)
{
  if (!_CPLSilentLogging)
  {
    uint64_t v5 = __CPLGenericOSLogDomain(a1);
    uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    if (sub_100004A78(v6))
    {
      *(_WORD *)uint64_t v9 = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "We should not have a progress here", v9, 2u);
    }
  }

  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/Base/CPLBaseSyncManager.m"));
  [v7 handleFailureInMethod:a1 object:a2 file:v8 lineNumber:511 description:@"We should not have a progress here"];

  abort();
}

void sub_10019A730(uint64_t a1, uint64_t a2)
{
  if (!_CPLSilentLogging)
  {
    id v4 = sub_10015409C();
    uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
    if (sub_10002B4A8(v5)) {
      sub_100004A64( (void *)&_mh_execute_header,  v6,  v7,  "Trying to schedule client cache drop twice",  v8,  v9,  v10,  v11,  0);
    }
  }

  uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
  uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/Prequelite Store/CPLPrequeliteStore.m"));
  [v12 handleFailureInMethod:a1 object:a2 file:v13 lineNumber:623 description:@"Trying to schedule client cache drop twice"];

  abort();
}

void sub_10019A7E8(uint64_t a1, uint64_t a2)
{
  if (!_CPLSilentLogging)
  {
    id v4 = sub_10015409C();
    uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
    if (sub_10002B4A8(v5)) {
      sub_100004A64( (void *)&_mh_execute_header,  v6,  v7,  "Trying to open the upgrade journal twice",  v8,  v9,  v10,  v11,  0);
    }
  }

  uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
  uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/Prequelite Store/CPLPrequeliteStore.m"));
  [v12 handleFailureInMethod:a1 object:a2 file:v13 lineNumber:1037 description:@"Trying to open the upgrade journal twice"];

  abort();
}

void sub_10019A8A0(void *a1, uint64_t a2, uint64_t a3)
{
  id v4 = objc_begin_catch(a1);
  sub_10015ECF4((uint64_t)v4, *(void *)(a3 + 40));
  sub_10015ECEC();
}

void sub_10019A8CC(void *a1, uint64_t a2, uint64_t a3)
{
  id v4 = objc_begin_catch(a1);
  sub_10015ECF4((uint64_t)v4, *(void *)(a3 + 48));
  sub_10015ECEC();
}

void sub_10019A8F8(uint64_t a1, uint64_t a2)
{
  if (!_CPLSilentLogging)
  {
    id v4 = sub_10015409C();
    uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
    if (sub_10002B4A8(v5)) {
      sub_100004A64( (void *)&_mh_execute_header,  v6,  v7,  "Unable to determine user identifier class",  v8,  v9,  v10,  v11,  0);
    }
  }

  uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
  uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/Prequelite Store/CPLPrequeliteStore.m"));
  [v12 handleFailureInMethod:a1 object:a2 file:v13 lineNumber:1552 description:@"Unable to determine user identifier class"];

  abort();
}

void sub_10019A9B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!_CPLSilentLogging)
  {
    id v6 = sub_10015409C();
    uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
    if (sub_10002B4A8(v7)) {
      sub_10002B494((void *)&_mh_execute_header, v8, v9, "Can't serialize %@", v10, v11, v12, v13, v16, v17, 2u);
    }
  }

  __int16 v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
  uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/Prequelite Store/CPLPrequeliteStore.m"));
  [v14 handleFailureInMethod:a2, a3, v15, 1580, @"Can't serialize %@", a1 object file lineNumber description];

  abort();
}

void sub_10019AA90(void *a1)
{
  id v1 = objc_begin_catch(a1);
  if (!_CPLSilentLogging)
  {
    id v2 = sub_10015409C();
    id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
    if (sub_10002B4A8(v3))
    {
      int v4 = 138412290;
      id v5 = v1;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_ERROR,  "Unable to unarchive stored change session update: %@",  (uint8_t *)&v4,  0xCu);
    }
  }

  objc_end_catch();
}

void sub_10019AB54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!_CPLSilentLogging)
  {
    id v6 = sub_10015409C();
    uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
    if (sub_10002B4A8(v7)) {
      sub_10002B494((void *)&_mh_execute_header, v8, v9, "Unable to archive %@", v10, v11, v12, v13, v16, v17, 2u);
    }
  }

  __int16 v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
  uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/Prequelite Store/CPLPrequeliteStore.m"));
  [v14 handleFailureInMethod:a2, a3, v15, 1761, @"Unable to archive %@", a1 object file lineNumber description];

  abort();
}

void sub_10019AC34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!_CPLSilentLogging)
  {
    id v6 = sub_10015409C();
    uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
    if (sub_10002B4A8(v7)) {
      sub_10002B494((void *)&_mh_execute_header, v8, v9, "Failed to archive %@", v10, v11, v12, v13, v16, v17, 2u);
    }
  }

  __int16 v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
  uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/Prequelite Store/CPLPrequeliteStore.m"));
  [v14 handleFailureInMethod:a2, a3, v15, 1825, @"Failed to archive %@", a1 object file lineNumber description];

  abort();
}

void sub_10019AD14(uint64_t a1, uint64_t a2)
{
  if (!_CPLSilentLogging)
  {
    id v4 = sub_10015409C();
    id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
    if (sub_10002B4A8(v5)) {
      sub_100004A64( (void *)&_mh_execute_header,  v6,  v7,  "Trying to access client cache outside of authorized migration",  v8,  v9,  v10,  v11,  0);
    }
  }

  int v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
  int v13 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/Prequelite Store/CPLPrequeliteStore.m"));
  [v12 handleFailureInMethod:a1 object:a2 file:v13 lineNumber:1995 description:@"Trying to access client cache outside of authorized migration"];

  abort();
}

void sub_10019ADCC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!_CPLSilentLogging)
  {
    id v6 = sub_10015409C();
    uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
    if (sub_10002B4A8(v7)) {
      sub_10002B494( (void *)&_mh_execute_header,  v8,  v9,  "%@ is not a dynamically created storage",  v10,  v11,  v12,  v13,  v16,  v17,  2u);
    }
  }

  __int16 v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
  uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/Prequelite Store/CPLPrequeliteStore.m"));
  [v14 handleFailureInMethod:a2, a3, v15, 2143, @"%@ is not a dynamically created storage", a1 object file lineNumber description];

  abort();
}

void sub_10019AEAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!_CPLSilentLogging)
  {
    id v6 = sub_10015409C();
    uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
    if (sub_10002B4A8(v7)) {
      sub_10002B494( (void *)&_mh_execute_header,  v8,  v9,  "%@ is not a dynamically created storage",  v10,  v11,  v12,  v13,  v16,  v17,  2u);
    }
  }

  __int16 v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
  uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/Prequelite Store/CPLPrequeliteStore.m"));
  [v14 handleFailureInMethod:a2, a3, v15, 2160, @"%@ is not a dynamically created storage", a1 object file lineNumber description];

  abort();
}

void sub_10019AF8C(uint64_t a1, uint64_t a2)
{
  if (!_CPLSilentLogging)
  {
    id v4 = sub_10015EFF8();
    id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)int v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "scope index has not been set", v8, 2u);
    }
  }

  id v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/PrequeliteS tore/CPLPrequeliteOutgoingResources.m"));
  [v6 handleFailureInMethod:a1 object:a2 file:v7 lineNumber:88 description:@"scope index has not been set"];

  abort();
}

#error "10019B0D8: call analysis failed (funcsize=59)"
#error "10019B1D4: call analysis failed (funcsize=59)"
#error "10019B2D0: call analysis failed (funcsize=59)"
#error "10019B3CC: call analysis failed (funcsize=59)"
#error "10019B4C8: call analysis failed (funcsize=59)"
#error "10019B5C4: call analysis failed (funcsize=59)"
void sub_10019B640(const char *a1, uint64_t a2)
{
  uint64_t v4;
  os_log_s *v5;
  NSString *v6;
  void *v7;
  void *v8;
  void *v9;
  NSString *v10;
  void *v11;
  uint8_t buf[4];
  void *v13;
  if (!_CPLSilentLogging)
  {
    id v4 = __CPLGenericOSLogDomain(a1);
    id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      id v6 = NSStringFromSelector(a1);
      uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
      *(_DWORD *)__int128 buf = 138412290;
      int v13 = v7;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "%@ does not support type DATA", buf, 0xCu);
    }
  }

  int v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
  int v9 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/PrequeliteS tore/CPLPrequeliteUtilites.m"));
  int v10 = NSStringFromSelector(a1);
  int v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
  [v8 handleFailureInMethod:a1, a2, v9, 113, @"%@ does not support type DATA", v11 object file lineNumber description];

  abort();
}

void sub_10019B758(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!_CPLSilentLogging)
  {
    uint64_t v7 = __CPLGenericOSLogDomain(a1);
    int v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      int v9 = (void *)objc_opt_class(&OBJC_CLASS___NSDate);
      id v10 = v9;
      *(_DWORD *)__int128 buf = 138413058;
      uint64_t v15 = a1;
      __int16 v16 = 2112;
      uint64_t v17 = v9;
      __int16 v18 = 2112;
      id v19 = (id)sub_100169154();
      __int16 v20 = 2112;
      uint64_t v21 = a2;
      id v11 = v19;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "Invalid value for %@ (%@): %@ '%@'", buf, 0x2Au);
    }
  }

  int v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
  int v13 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/Prequelite Store/CPLPrequeliteUtilites.m"));
  objc_opt_class(&OBJC_CLASS___NSDate);
  [v12 handleFailureInMethod:a3, a1, v13, 136, @"Invalid value for %@ (%@): %@ '%@'", a1, v3, sub_100169154(), a2 object file lineNumber description];

  abort();
}

void sub_10019B8A4()
{
  if (!_CPLSilentLogging)
  {
    id v1 = sub_10016AF58();
    id v2 = (os_log_s *)objc_claimAutoreleasedReturnValue(v1);
    if (sub_100004A78(v2)) {
      sub_100004A64((void *)&_mh_execute_header, v3, v4, "scope index should have already been set", v5, v6, v7, v8, 0);
    }
  }

  int v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
  id v10 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/Prequelite Store/CPLPrequeliteResourceDownloadQueue.m"));
  objc_msgSend((id)sub_10002B4BC(), "handleFailureInMethod:object:file:lineNumber:description:");

  abort();
}

void sub_10019B954()
{
  if (!_CPLSilentLogging)
  {
    id v1 = sub_10016AF58();
    id v2 = (os_log_s *)objc_claimAutoreleasedReturnValue(v1);
    if (sub_100004A78(v2)) {
      sub_100004A64((void *)&_mh_execute_header, v3, v4, "scope index should have been set here", v5, v6, v7, v8, 0);
    }
  }

  int v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
  id v10 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/Prequelite Store/CPLPrequeliteResourceDownloadQueue.m"));
  objc_msgSend((id)sub_10002B4BC(), "handleFailureInMethod:object:file:lineNumber:description:");

  abort();
}

void sub_10019BA04()
{
  if (!_CPLSilentLogging)
  {
    id v1 = sub_10016AF58();
    id v2 = (os_log_s *)objc_claimAutoreleasedReturnValue(v1);
    if (sub_100004A78(v2)) {
      sub_100004A64((void *)&_mh_execute_header, v3, v4, "Scope index should be set here", v5, v6, v7, v8, 0);
    }
  }

  int v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
  id v10 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/Prequelite Store/CPLPrequeliteResourceDownloadQueue.m"));
  objc_msgSend((id)sub_10002B4BC(), "handleFailureInMethod:object:file:lineNumber:description:");

  abort();
}

void sub_10019BAB4()
{
  if (!_CPLSilentLogging)
  {
    id v1 = sub_10016AF58();
    id v2 = (os_log_s *)objc_claimAutoreleasedReturnValue(v1);
    if (sub_100004A78(v2)) {
      sub_100004A64((void *)&_mh_execute_header, v3, v4, "scope index should be set here", v5, v6, v7, v8, 0);
    }
  }

  int v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
  id v10 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/Prequelite Store/CPLPrequeliteResourceDownloadQueue.m"));
  objc_msgSend((id)sub_10002B4BC(), "handleFailureInMethod:object:file:lineNumber:description:");

  abort();
}

void sub_10019BB64()
{
  if (!_CPLSilentLogging)
  {
    id v1 = sub_10016AF58();
    id v2 = (os_log_s *)objc_claimAutoreleasedReturnValue(v1);
    if (sub_100004A78(v2)) {
      sub_100004A64((void *)&_mh_execute_header, v3, v4, "Scope index should be set here", v5, v6, v7, v8, 0);
    }
  }

  int v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
  id v10 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/Prequelite Store/CPLPrequeliteResourceDownloadQueue.m"));
  objc_msgSend((id)sub_10002B4BC(), "handleFailureInMethod:object:file:lineNumber:description:");

  abort();
}

void sub_10019BC14()
{
  if (!_CPLSilentLogging)
  {
    id v1 = sub_10016AF58();
    id v2 = (os_log_s *)objc_claimAutoreleasedReturnValue(v1);
    if (sub_100004A78(v2)) {
      sub_100004A64((void *)&_mh_execute_header, v3, v4, "Scope index should be set here", v5, v6, v7, v8, 0);
    }
  }

  int v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
  id v10 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/Prequelite Store/CPLPrequeliteResourceDownloadQueue.m"));
  objc_msgSend((id)sub_10002B4BC(), "handleFailureInMethod:object:file:lineNumber:description:");

  abort();
}

void sub_10019BCC4()
{
  if (!_CPLSilentLogging)
  {
    id v1 = sub_10016AF58();
    id v2 = (os_log_s *)objc_claimAutoreleasedReturnValue(v1);
    if (sub_100004A78(v2)) {
      sub_100004A64((void *)&_mh_execute_header, v3, v4, "scope index should be set here", v5, v6, v7, v8, 0);
    }
  }

  int v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
  id v10 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/Prequelite Store/CPLPrequeliteResourceDownloadQueue.m"));
  objc_msgSend((id)sub_10002B4BC(), "handleFailureInMethod:object:file:lineNumber:description:");

  abort();
}

void sub_10019BD74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!_CPLSilentLogging)
  {
    id v7 = sub_10016DE90();
    uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
    if (sub_10003A438(v8)) {
      sub_10002B494( (void *)&_mh_execute_header,  v9,  v10,  "Getting a remapped change from transient repository without an identifier: %@",  v11,  v12,  v13,  v14,  v17,  v18,  2u);
    }
  }

  uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
  __int16 v16 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/Prequelite Store/CPLPrequeliteTransientRepository.m"));
  [v15 handleFailureInMethod:a2, a3, v16, 398, @"Getting a remapped change from transient repository without an identifier: %@", a1 object file lineNumber description];

  abort();
}

void sub_10019BE50(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!_CPLSilentLogging)
  {
    id v7 = sub_10016DE90();
    uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
    if (sub_10003A438(v8)) {
      sub_10002B494( (void *)&_mh_execute_header,  v9,  v10,  "Popping a remapped change from transient repository without an identifier: %@",  v11,  v12,  v13,  v14,  v17,  v18,  2u);
    }
  }

  uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
  __int16 v16 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/Prequelite Store/CPLPrequeliteTransientRepository.m"));
  [v15 handleFailureInMethod:a2, a3, v16, 418, @"Popping a remapped change from transient repository without an identifier: %@", a1 object file lineNumber description];

  abort();
}

void sub_10019BF2C(uint64_t a1, uint64_t a2)
{
  if (!_CPLSilentLogging)
  {
    id v5 = sub_100173B50();
    uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    if (sub_100004A78(v6)) {
      sub_100004A64((void *)&_mh_execute_header, v7, v8, "scope index should be set here", v9, v10, v11, v12, 0);
    }
  }

  int v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
  int v14 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/Prequelite Store/CPLPrequeliteChangePipe.m"));
  [v13 handleFailureInMethod:a1 object:a2 file:v14 lineNumber:241 description:@"scope index should be set here"];

  abort();
}

void sub_10019BFE0(uint64_t a1, uint64_t a2)
{
  if (!_CPLSilentLogging)
  {
    id v5 = sub_100173B50();
    uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    if (sub_100004A78(v6)) {
      sub_100004A64((void *)&_mh_execute_header, v7, v8, "scope index should be set here", v9, v10, v11, v12, 0);
    }
  }

  int v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
  int v14 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/Prequelite Store/CPLPrequeliteChangePipe.m"));
  [v13 handleFailureInMethod:a1 object:a2 file:v14 lineNumber:281 description:@"scope index should be set here"];

  abort();
}

void sub_10019C094(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!_CPLSilentLogging)
  {
    id v6 = sub_100179034();
    uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__int128 buf = 138412290;
      uint64_t v11 = a1;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_ERROR,  "%@ should have a scope index set here",  buf,  0xCu);
    }
  }

  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/PrequeliteS tore/CPLPrequelitePendingRecordChecks.m"));
  [v8 handleFailureInMethod:a2, a3, v9, 60, @"%@ should have a scope index set here", a1 object file lineNumber description];

  abort();
}

void sub_10019C188(uint64_t a1, uint64_t a2)
{
  if (!_CPLSilentLogging)
  {
    uint64_t v4 = __CPLGenericOSLogDomain(a1);
    id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__int128 buf = 138412290;
      id v10 = (id)objc_opt_class(a1);
      id v6 = v10;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "No platform object specified for %@", buf, 0xCu);
    }
  }

  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/PrequeliteS tore/CPLPrequeliteClientCacheMigrator.m"));
  [v7 handleFailureInMethod:a2, a1, v8, 19, @"No platform object specified for %@", objc_opt_class(a1) object file lineNumber description];

  abort();
}

void sub_10019C290(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!_CPLSilentLogging)
  {
    id v6 = sub_100179AC8();
    uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__int128 buf = 138412290;
      uint64_t v11 = a1;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_ERROR,  "Missing file storage identifier for %@",  buf,  0xCu);
    }
  }

  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/PrequeliteS tore/CPLPrequeliteRecordComputeStatePushQueue.m"));
  [v8 handleFailureInMethod:a2, a3, v9, 137, @"Missing file storage identifier for %@", a1 object file lineNumber description];

  abort();
}

void sub_10019C384()
{
  if (!_CPLSilentLogging)
  {
    id v0 = sub_10017CB04();
    id v1 = (os_log_s *)objc_claimAutoreleasedReturnValue(v0);
    if (sub_10002B4A8(v1))
    {
      *(_WORD *)uint64_t v4 = 0;
      _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "Scope index should have been set here", v4, 2u);
    }
  }

  id v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/PrequeliteS tore/CPLPrequelitePushRepository.m"));
  objc_msgSend((id)sub_10002B4BC(), "handleFailureInMethod:object:file:lineNumber:description:");

  abort();
}

void sub_10019C448()
{
  id v0 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
  id v1 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/PrequeliteS tore/CPLPrequelitePushRepository.m"));
  objc_msgSend((id)sub_10002B4BC(), "handleFailureInMethod:object:file:lineNumber:description:");

  abort();
}

void sub_10019C4B8()
{
  id v0 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
  id v1 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/PrequeliteS tore/CPLPrequelitePushRepository.m"));
  objc_msgSend((id)sub_10002B4BC(), "handleFailureInMethod:object:file:lineNumber:description:");

  abort();
}

void sub_10019C528()
{
  id v0 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
  id v1 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/PrequeliteS tore/CPLPrequelitePushRepository.m"));
  objc_msgSend((id)sub_10002B4BC(), "handleFailureInMethod:object:file:lineNumber:description:");

  abort();
}

#error "10019C608: call analysis failed (funcsize=49)"
#error "10019C6E8: call analysis failed (funcsize=54)"
#error "10019C7D8: call analysis failed (funcsize=61)"
#error "10019C8C8: call analysis failed (funcsize=49)"
#error "10019C99C: call analysis failed (funcsize=49)"
#error "10019CA70: call analysis failed (funcsize=49)"
#error "10019CB44: call analysis failed (funcsize=49)"
void sub_10019CBA8( uint64_t a1,  uint64_t a2,  uint64_t a3,  uint64_t a4,  uint64_t a5,  uint64_t a6,  uint64_t a7,  uint64_t a8,  uint64_t a9,  uint64_t a10,  __int128 a11,  uint64_t a12,  uint64_t a13,  uint64_t a14,  uint64_t a15,  uint64_t a16,  uint64_t a17,  uint64_t a18,  uint64_t a19,  uint64_t a20,  uint64_t a21)
{
  uint64_t v21;
  uint64_t v22;
  void *v23;
  void *v24;
  id v25;
  os_log_s *v26;
  void *v27;
  uint64_t v28;
  void *v29;
  void *v30;
  void *v31;
  sub_10002B4D0();
  a20 = v21;
  a21 = v22;
  uint64_t v24 = v23;
  if (!_CPLSilentLogging)
  {
    uint64_t v25 = sub_10017CB04();
    uint64_t v26 = (os_log_s *)objc_claimAutoreleasedReturnValue(v25);
    if (sub_10002B4A8(v26))
    {
      id v27 = (void *)objc_claimAutoreleasedReturnValue([v24 abstractObject]);
      LODWORD(a11) = 138412290;
      *(void *)((char *)&a11 + 4) = v27;
      sub_10002B4B0((void *)&_mh_execute_header, v26, v28, "%@ should not manage the extracted batch", (uint8_t *)&a11);
    }
  }

  uint64_t v29 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
  uint64_t v30 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/Prequelite Store/CPLPrequelitePushRepository.m"));
  id v31 = (void *)objc_claimAutoreleasedReturnValue([v24 abstractObject]);
  objc_msgSend((id)sub_10002B4BC(), "handleFailureInMethod:object:file:lineNumber:description:");

  abort();
}

#error "10019CD1C: call analysis failed (funcsize=49)"
void sub_10019CD80( uint64_t a1,  uint64_t a2,  uint64_t a3,  uint64_t a4,  uint64_t a5,  uint64_t a6,  uint64_t a7,  uint64_t a8,  uint64_t a9,  uint64_t a10,  __int128 a11,  uint64_t a12,  uint64_t a13,  uint64_t a14,  uint64_t a15,  uint64_t a16,  uint64_t a17,  uint64_t a18,  uint64_t a19,  uint64_t a20,  uint64_t a21)
{
  uint64_t v21;
  uint64_t v22;
  void *v23;
  void *v24;
  id v25;
  os_log_s *v26;
  void *v27;
  uint64_t v28;
  void *v29;
  void *v30;
  void *v31;
  sub_10002B4D0();
  a20 = v21;
  a21 = v22;
  uint64_t v24 = v23;
  if (!_CPLSilentLogging)
  {
    uint64_t v25 = sub_10017CB04();
    uint64_t v26 = (os_log_s *)objc_claimAutoreleasedReturnValue(v25);
    if (sub_10002B4A8(v26))
    {
      id v27 = (void *)objc_claimAutoreleasedReturnValue([v24 abstractObject]);
      LODWORD(a11) = 138412290;
      *(void *)((char *)&a11 + 4) = v27;
      sub_10002B4B0((void *)&_mh_execute_header, v26, v28, "%@ should not manage the extracted batch", (uint8_t *)&a11);
    }
  }

  uint64_t v29 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
  uint64_t v30 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/Prequelite Store/CPLPrequelitePushRepository.m"));
  id v31 = (void *)objc_claimAutoreleasedReturnValue([v24 abstractObject]);
  objc_msgSend((id)sub_10002B4BC(), "handleFailureInMethod:object:file:lineNumber:description:");

  abort();
}

void sub_10019CE8C(void *a1)
{
  id v1 = objc_begin_catch(a1);
  if (!_CPLSilentLogging)
  {
    id v2 = sub_10017CB04();
    uint64_t v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
    if (sub_10002B4A8(v3))
    {
      int v5 = 138412290;
      id v6 = v1;
      sub_10002B4B0( (void *)&_mh_execute_header,  v3,  v4,  "Stored extracted batch does not seem supported anymore (%@)",  (uint8_t *)&v5);
    }
  }

  objc_end_catch();
}

#error "10019CFB8: call analysis failed (funcsize=49)"
#error "10019D08C: call analysis failed (funcsize=49)"
#error "10019D160: call analysis failed (funcsize=49)"
#error "10019D234: call analysis failed (funcsize=49)"
#error "10019D308: call analysis failed (funcsize=49)"
#error "10019D3E4: call analysis failed (funcsize=49)"
#error "10019D4C0: call analysis failed (funcsize=49)"
#error "10019D594: call analysis failed (funcsize=49)"
void sub_10019D5F8( uint64_t a1,  uint64_t a2,  uint64_t a3,  uint64_t a4,  uint64_t a5,  uint64_t a6,  uint64_t a7,  uint64_t a8,  uint64_t a9,  uint64_t a10,  __int128 buf,  uint64_t a12,  uint64_t a13,  uint64_t a14,  uint64_t a15,  uint64_t a16,  uint64_t a17,  uint64_t a18,  uint64_t a19,  uint64_t a20,  uint64_t a21)
{
  uint64_t v21;
  uint64_t v22;
  const char *v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  os_log_s *v28;
  void *v29;
  id v30;
  NSString *v31;
  void *v32;
  void *v33;
  void *v34;
  NSString *v35;
  void *v36;
  sub_10002B4D0();
  a20 = v21;
  a21 = v22;
  uint64_t v24 = v23;
  uint64_t v26 = v25;
  if (!_CPLSilentLogging)
  {
    id v27 = sub_10017CB04();
    id v28 = (os_log_s *)objc_claimAutoreleasedReturnValue(v27);
    if (sub_10002B4A8(v28))
    {
      uint64_t v29 = (void *)objc_opt_class(v26);
      uint64_t v30 = v29;
      id v31 = NSStringFromSelector(v24);
      uint64_t v32 = (void *)objc_claimAutoreleasedReturnValue(v31);
      LODWORD(buf) = 138412546;
      *(void *)((char *)&buf + 4) = v29;
      WORD6(buf) = 2112;
      *(void *)((char *)&buf + 14) = v32;
      _os_log_impl( (void *)&_mh_execute_header,  v28,  OS_LOG_TYPE_ERROR,  "Trying to call -[%@ %@] too many times",  (uint8_t *)&buf,  0x16u);
    }
  }

  uint64_t v33 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
  uint64_t v34 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/Prequelite Store/CPLPrequelitePushRepository.m"));
  objc_opt_class(v26);
  uint64_t v35 = NSStringFromSelector(v24);
  id v36 = (void *)objc_claimAutoreleasedReturnValue(v35);
  objc_msgSend((id)sub_10002B4BC(), "handleFailureInMethod:object:file:lineNumber:description:");

  abort();
}

void sub_10019D734(uint64_t a1, uint64_t a2)
{
  if (!_CPLSilentLogging)
  {
    uint64_t v4 = __CPLGenericOSLogDomain(a1);
    int v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__int128 buf = 134217984;
      uint64_t v9 = 0x404E000000000000LL;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_ERROR,  "Expiration interval should be greater or equal to %f",  buf,  0xCu);
    }
  }

  id v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/PrequeliteS tore/CPLPrequeliteTodoVar.m"));
  objc_msgSend( v6,  "handleFailureInMethod:object:file:lineNumber:description:",  a1,  a2,  v7,  53,  @"Expiration interval should be greater or equal to %f",  0x404E000000000000);

  abort();
}

void sub_10019D828(uint64_t a1, uint64_t a2)
{
  if (!_CPLSilentLogging)
  {
    id v4 = sub_1001892A0();
    int v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t v8 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_ERROR,  "Trying to store a file without an finger print",  v8,  2u);
    }
  }

  id v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/Resources/C PLBucketFileStorage.m"));
  [v6 handleFailureInMethod:a1 object:a2 file:v7 lineNumber:77 description:@"Trying to store a file without an finger print"];

  abort();
}

id objc_msgSend_CPLErrorForCloudKitError_scopeProvider_withRequestUUIDs_description_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "CPLErrorForCloudKitError:scopeProvider:withRequestUUIDs:description:");
}

id objc_msgSend_CPLErrorForCloudKitError_scopeProvider_withRequestUUIDs_description_arguments_( void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "CPLErrorForCloudKitError:scopeProvider:withRequestUUIDs:description:arguments:");
}

id objc_msgSend_CPLErrorForCloudKitError_withRequestUUIDs_description_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "CPLErrorForCloudKitError:withRequestUUIDs:description:");
}

id objc_msgSend_CPLErrorForCloudKitUploadError_getDestinationRecordIDs_scopeProvider_withRequestUUIDs_uploadAction_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "CPLErrorForCloudKitUploadError:getDestinationRecordIDs:scopeProvider:withRequestUUIDs:uploadAction:");
}

id objc_msgSend_JSONObjectWithData_options_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "JSONObjectWithData:options:error:");
}

id objc_msgSend_URL(void *a1, const char *a2, ...)
{
  return _[a1 URL];
}

id objc_msgSend_URLByAppendingPathComponent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "URLByAppendingPathComponent:");
}

id objc_msgSend_URLByAppendingPathComponent_isDirectory_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "URLByAppendingPathComponent:isDirectory:");
}

id objc_msgSend_URLByAppendingPathExtension_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "URLByAppendingPathExtension:");
}

id objc_msgSend_URLByDeletingLastPathComponent(void *a1, const char *a2, ...)
{
  return _[a1 URLByDeletingLastPathComponent];
}

id objc_msgSend_UTF8String(void *a1, const char *a2, ...)
{
  return _[a1 UTF8String];
}

id objc_msgSend_UUID(void *a1, const char *a2, ...)
{
  return _[a1 UUID];
}

id objc_msgSend_UUIDString(void *a1, const char *a2, ...)
{
  return _[a1 UUIDString];
}

id objc_msgSend__acceptShareWithMetadata_currentUserID_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_acceptShareWithMetadata:currentUserID:completionHandler:");
}

id objc_msgSend__acceptShareWithURL_currentUserID_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_acceptShareWithURL:currentUserID:completionHandler:");
}

id objc_msgSend__acquireActivityAndLaunchOperation(void *a1, const char *a2, ...)
{
  return _[a1 _acquireActivityAndLaunchOperation];
}

id objc_msgSend__acquiredTask_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_acquiredTask:error:");
}

id objc_msgSend__activityHasExpired(void *a1, const char *a2, ...)
{
  return _[a1 _activityHasExpired];
}

id objc_msgSend__actuallyStartShowingIndicatorLocked(void *a1, const char *a2, ...)
{
  return _[a1 _actuallyStartShowingIndicatorLocked];
}

id objc_msgSend__addCKRecordIDForResourcesUploadProgressTracking_size_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_addCKRecordIDForResourcesUploadProgressTracking:size:");
}

id objc_msgSend__addClient_interestedInZoneIDs_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_addClient:interestedInZoneIDs:");
}

id objc_msgSend__addClientInterestedInAllZones_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_addClientInterestedInAllZones:");
}

id objc_msgSend__addClientToInterestingZones_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_addClientToInterestingZones:");
}

id objc_msgSend__addEngineWrapperOpenObserver_withIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_addEngineWrapperOpenObserver:withIdentifier:");
}

id objc_msgSend__addParticipant_toEmails_phoneNumbers_userRecordIDs_participantIDs_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_addParticipant:toEmails:phoneNumbers:userRecordIDs:participantIDs:");
}

id objc_msgSend__addPostUpgradeMigration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_addPostUpgradeMigration:");
}

id objc_msgSend__addRecordWithScopedIdentifierToShareTodos_recordClass_proposedContributorUserIdentifiers_target_force_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "_addRecordWithScopedIdentifierToShareTodos:recordClass:proposedContributorUserIdentifiers:target:force:");
}

id objc_msgSend__addRecordWithScopedIdentifierToUnshareTodos_recordClass_target_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_addRecordWithScopedIdentifierToUnshareTodos:recordClass:target:");
}

id objc_msgSend__addScope_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_addScope:error:");
}

id objc_msgSend__adjustThrottlingDateWithNow_andError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_adjustThrottlingDateWithNow:andError:");
}

id objc_msgSend__afterInitializeStorage(void *a1, const char *a2, ...)
{
  return _[a1 _afterInitializeStorage];
}

id objc_msgSend__allChangesWithScopeIdentifier_scopeIndex_ordered_table_query_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_allChangesWithScopeIdentifier:scopeIndex:ordered:table:query:");
}

id objc_msgSend__allKeys(void *a1, const char *a2, ...)
{
  return _[a1 _allKeys];
}

id objc_msgSend__allKeysWithoutExpungedState(void *a1, const char *a2, ...)
{
  return _[a1 _allKeysWithoutExpungedState];
}

id objc_msgSend__appendChange_alreadyMingled_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_appendChange:alreadyMingled:error:");
}

id objc_msgSend__applyMoveChanges_sourceType_destinationType_helper_operationContext_completionHandler_( void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_applyMoveChanges:sourceType:destinationType:helper:operationContext:completionHandler:");
}

id objc_msgSend__askNextClient_toProvideCKAssetWithRecordID_fieldName_recordType_signature_bestResponseYet_completionHandler_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "_askNextClient:toProvideCKAssetWithRecordID:fieldName:recordType:signature:bestResponseYet:completionHandler:");
}

id objc_msgSend__assetCountsFromCKRecord_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_assetCountsFromCKRecord:");
}

id objc_msgSend__autoCloseOneWrapper(void *a1, const char *a2, ...)
{
  return _[a1 _autoCloseOneWrapper];
}

id objc_msgSend__autoCloseWrapper_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_autoCloseWrapper:");
}

id objc_msgSend__availabilityOfResource_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_availabilityOfResource:");
}

id objc_msgSend__backgroundDownloadTaskIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 _backgroundDownloadTaskIdentifier];
}

id objc_msgSend__badContainerRelationsIdentifiers(void *a1, const char *a2, ...)
{
  return _[a1 _badContainerRelationsIdentifiers];
}

id objc_msgSend__baseProgressForState_totalUnits_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_baseProgressForState:totalUnits:");
}

id objc_msgSend__baseScopeChange(void *a1, const char *a2, ...)
{
  return _[a1 _baseScopeChange];
}

id objc_msgSend__beforeInitializeStorage(void *a1, const char *a2, ...)
{
  return _[a1 _beforeInitializeStorage];
}

id objc_msgSend__bestClientToReceivePushNotification_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_bestClientToReceivePushNotification:");
}

id objc_msgSend__bestErrorForUnderlyingError_scopeProvider_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_bestErrorForUnderlyingError:scopeProvider:");
}

id objc_msgSend__bestSourceResourceFromResources_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_bestSourceResourceFromResources:");
}

id objc_msgSend__betterErrorForRecordId_recordError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_betterErrorForRecordId:recordError:");
}

id objc_msgSend__bindableValueForValue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_bindableValueForValue:");
}

id objc_msgSend__blockedReason(void *a1, const char *a2, ...)
{
  return _[a1 _blockedReason];
}

id objc_msgSend__blockedReasonStatus(void *a1, const char *a2, ...)
{
  return _[a1 _blockedReasonStatus];
}

id objc_msgSend__BOOLValueForDuetKeyPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_BOOLValueForDuetKeyPath:");
}

id objc_msgSend__budgetOverrideKeyPath(void *a1, const char *a2, ...)
{
  return _[a1 _budgetOverrideKeyPath];
}

id objc_msgSend__bumpIndexWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_bumpIndexWithError:");
}

id objc_msgSend__bundleIdentifiersFromCKOperation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_bundleIdentifiersFromCKOperation:");
}

id objc_msgSend__cacheAttributes(void *a1, const char *a2, ...)
{
  return _[a1 _cacheAttributes];
}

id objc_msgSend__cacheCountOfOriginalsIfNecessary(void *a1, const char *a2, ...)
{
  return _[a1 _cacheCountOfOriginalsIfNecessary];
}

id objc_msgSend__cacheLocalScopedIdentifier_cloudScopedIdentifier_isFinal_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_cacheLocalScopedIdentifier:cloudScopedIdentifier:isFinal:");
}

id objc_msgSend__cacheUploadSizesIfNecessary(void *a1, const char *a2, ...)
{
  return _[a1 _cacheUploadSizesIfNecessary];
}

id objc_msgSend__cacheValue_forColumnVariable_scope_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_cacheValue:forColumnVariable:scope:");
}

id objc_msgSend__cacheValue_forVariable_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_cacheValue:forVariable:");
}

id objc_msgSend__callCompletionWithZone_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_callCompletionWithZone:");
}

id objc_msgSend__callStopAllBlocks(void *a1, const char *a2, ...)
{
  return _[a1 _callStopAllBlocks];
}

id objc_msgSend__canAutoCloseWrapper_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_canAutoCloseWrapper:");
}

id objc_msgSend__canReallyOpenWrapper_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_canReallyOpenWrapper:error:");
}

id objc_msgSend__cancelAllOperationsIfBlocked(void *a1, const char *a2, ...)
{
  return _[a1 _cancelAllOperationsIfBlocked];
}

id objc_msgSend__cancelCallbackProgress(void *a1, const char *a2, ...)
{
  return _[a1 _cancelCallbackProgress];
}

id objc_msgSend__checkExitSupervisorInTransaction_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_checkExitSupervisorInTransaction:");
}

id objc_msgSend__checkParticipant_inEmails_phoneNumbers_userRecordIDs_participantIDs_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_checkParticipant:inEmails:phoneNumbers:userRecordIDs:participantIDs:");
}

id objc_msgSend__checkResource_record_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_checkResource:record:error:");
}

id objc_msgSend__cleanTempRecoveredDataURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_cleanTempRecoveredDataURL:");
}

id objc_msgSend__cleanupComputeStateDownloadQueue(void *a1, const char *a2, ...)
{
  return _[a1 _cleanupComputeStateDownloadQueue];
}

id objc_msgSend__clearFlagsOnFd_url_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_clearFlagsOnFd:url:");
}

id objc_msgSend__clearFlagsOnURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_clearFlagsOnURL:");
}

id objc_msgSend__clearPartiallyCreatedZoneIfNecessary(void *a1, const char *a2, ...)
{
  return _[a1 _clearPartiallyCreatedZoneIfNecessary];
}

id objc_msgSend__clearScopedIdentifiersCache(void *a1, const char *a2, ...)
{
  return _[a1 _clearScopedIdentifiersCache];
}

id objc_msgSend__clientWithErrorHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_clientWithErrorHandler:");
}

id objc_msgSend__clientsInterestedToReceiveAPushNotificationForZoneID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_clientsInterestedToReceiveAPushNotificationForZoneID:");
}

id objc_msgSend__closeUpgradeJournal(void *a1, const char *a2, ...)
{
  return _[a1 _closeUpgradeJournal];
}

id objc_msgSend__closeWipeAndReOpenWithReason_warnUserIfPossible_createRadar_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_closeWipeAndReOpenWithReason:warnUserIfPossible:createRadar:error:");
}

id objc_msgSend__cloudKitReschedulerManagerForLibraryWithIdentifier_involvedProcesses_relatedApplications_( void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_cloudKitReschedulerManagerForLibraryWithIdentifier:involvedProcesses:relatedApplications:");
}

id objc_msgSend__cloudKitScopeForTask_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_cloudKitScopeForTask:");
}

id objc_msgSend__cloudResourcesToLocalResourcesWithLocalResources_targetMapping_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_cloudResourcesToLocalResourcesWithLocalResources:targetMapping:");
}

id objc_msgSend__computeUpdatedSharedCKRecordsFromFoundRecord_usingUpdates_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_computeUpdatedSharedCKRecordsFromFoundRecord:usingUpdates:error:");
}

id objc_msgSend__container(void *a1, const char *a2, ...)
{
  return _[a1 _container];
}

id objc_msgSend__containerOptionsIsZoneish_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_containerOptionsIsZoneish:");
}

id objc_msgSend__contextForOperation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_contextForOperation:");
}

id objc_msgSend__coordinator_provideCKAssetWithRecordID_fieldName_recordType_signature_tempFolderURL_completionHandler_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "_coordinator:provideCKAssetWithRecordID:fieldName:recordType:signature:tempFolderURL:completionHandler:");
}

id objc_msgSend__coordinatorWontBeUsed(void *a1, const char *a2, ...)
{
  return _[a1 _coordinatorWontBeUsed];
}

id objc_msgSend__copyPrivateMasterWithScopedIdentifier_masterTarget_uploadIndex_reason_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_copyPrivateMasterWithScopedIdentifier:masterTarget:uploadIndex:reason:");
}

id objc_msgSend__corruptionMarkerURL(void *a1, const char *a2, ...)
{
  return _[a1 _corruptionMarkerURL];
}

id objc_msgSend__countOfRecordsWithStatus_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_countOfRecordsWithStatus:");
}

id objc_msgSend__countOfUnconfirmedRecords(void *a1, const char *a2, ...)
{
  return _[a1 _countOfUnconfirmedRecords];
}

id objc_msgSend__createCKShare_andRootRecord_currentUserID_withCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_createCKShare:andRootRecord:currentUserID:withCompletionHandler:");
}

id objc_msgSend__createFlagsIndexes(void *a1, const char *a2, ...)
{
  return _[a1 _createFlagsIndexes];
}

id objc_msgSend__createIndexForFlags_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_createIndexForFlags:");
}

id objc_msgSend__createIndexesWithPriority_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_createIndexesWithPriority:");
}

id objc_msgSend__createInitialPrimarySyncScope(void *a1, const char *a2, ...)
{
  return _[a1 _createInitialPrimarySyncScope];
}

id objc_msgSend__createLibraryShareWithScopeChange_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_createLibraryShareWithScopeChange:completionHandler:");
}

id objc_msgSend__createLibraryWithScopeChange_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_createLibraryWithScopeChange:completionHandler:");
}

id objc_msgSend__createMomentShareWithScopeChange_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_createMomentShareWithScopeChange:completionHandler:");
}

id objc_msgSend__createResourceTypeAndStatusIndex(void *a1, const char *a2, ...)
{
  return _[a1 _createResourceTypeAndStatusIndex];
}

id objc_msgSend__createSparsePrivateRecordsIfNecessary_recordClass_userRecordID_completionHandler_( void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_createSparsePrivateRecordsIfNecessary:recordClass:userRecordID:completionHandler:");
}

id objc_msgSend__createZoneWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_createZoneWithCompletionHandler:");
}

id objc_msgSend__daemonLibraryManagerWantsToExitNow_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_daemonLibraryManagerWantsToExitNow:");
}

id objc_msgSend__deactivateMarkerURL(void *a1, const char *a2, ...)
{
  return _[a1 _deactivateMarkerURL];
}

id objc_msgSend__defaultClient(void *a1, const char *a2, ...)
{
  return _[a1 _defaultClient];
}

id objc_msgSend__defaultIdentificationClasses(void *a1, const char *a2, ...)
{
  return _[a1 _defaultIdentificationClasses];
}

id objc_msgSend__defaultValuesObject(void *a1, const char *a2, ...)
{
  return _[a1 _defaultValuesObject];
}

id objc_msgSend__defaultsKey(void *a1, const char *a2, ...)
{
  return _[a1 _defaultsKey];
}

id objc_msgSend__deleteAllChangesWithScopedIdentifier_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_deleteAllChangesWithScopedIdentifier:error:");
}

id objc_msgSend__deleteBadRelations(void *a1, const char *a2, ...)
{
  return _[a1 _deleteBadRelations];
}

id objc_msgSend__deleteCorruptionInfo(void *a1, const char *a2, ...)
{
  return _[a1 _deleteCorruptionInfo];
}

id objc_msgSend__deleteEnqueuedResource_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_deleteEnqueuedResource:error:");
}

id objc_msgSend__deleteRecord(void *a1, const char *a2, ...)
{
  return _[a1 _deleteRecord];
}

id objc_msgSend__deleteRecordWithScopedIdentifier_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_deleteRecordWithScopedIdentifier:error:");
}

id objc_msgSend__deleteSharedRecord(void *a1, const char *a2, ...)
{
  return _[a1 _deleteSharedRecord];
}

id objc_msgSend__deleteSourceRecordIDs_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_deleteSourceRecordIDs:");
}

id objc_msgSend__deleteWipeReason(void *a1, const char *a2, ...)
{
  return _[a1 _deleteWipeReason];
}

id objc_msgSend__deregisterTaskIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_deregisterTaskIdentifier:");
}

id objc_msgSend__destinationRecordsFromSourceRecords_recordIDs_sourceType_destinationRecordIDs_helper_sourceRecordIDs_operationContext_action_error_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "_destinationRecordsFromSourceRecords:recordIDs:sourceType:destinationRecordIDs:helper:sourceRecordIDs:operati onContext:action:error:");
}

id objc_msgSend__destinationURLForIdentity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_destinationURLForIdentity:");
}

id objc_msgSend__determineScopeTypeAndFetchLibraryInfoWithCurrentUserID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_determineScopeTypeAndFetchLibraryInfoWithCurrentUserID:");
}

id objc_msgSend__didFinishDeleteWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_didFinishDeleteWithError:");
}

id objc_msgSend__dimensionsFromBaseResource_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_dimensionsFromBaseResource:");
}

id objc_msgSend__disableSchedulerBecauseAccountIsUnavailableWithReason_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_disableSchedulerBecauseAccountIsUnavailableWithReason:");
}

id objc_msgSend__discardCachedValuesForGroup_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_discardCachedValuesForGroup:");
}

id objc_msgSend__discardResourceForUpload_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_discardResourceForUpload:");
}

id objc_msgSend__dispatchForceSyncForScopeIdentifiers_errors_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_dispatchForceSyncForScopeIdentifiers:errors:completionHandler:");
}

id objc_msgSend__dontUnshareRecordWithScopedIdentifier_recordClass_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_dontUnshareRecordWithScopedIdentifier:recordClass:");
}

id objc_msgSend__downloadComputeStates(void *a1, const char *a2, ...)
{
  return _[a1 _downloadComputeStates];
}

id objc_msgSend__downloadCurrentGroup(void *a1, const char *a2, ...)
{
  return _[a1 _downloadCurrentGroup];
}

id objc_msgSend__downloadNextGroup(void *a1, const char *a2, ...)
{
  return _[a1 _downloadNextGroup];
}

id objc_msgSend__downloadNextOperationType(void *a1, const char *a2, ...)
{
  return _[a1 _downloadNextOperationType];
}

id objc_msgSend__downloadOperationWithRecordIDsAndTasks_keys_perRecordProgressBlock_perRecordCompletionBlock_completionBlock_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "_downloadOperationWithRecordIDsAndTasks:keys:perRecordProgressBlock:perRecordCompletionBlock:completionBlock:");
}

id objc_msgSend__dropAllOtherLibraryManagersAndCallBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_dropAllOtherLibraryManagersAndCallBlock:");
}

id objc_msgSend__dropManagerWithCompletionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_dropManagerWithCompletionBlock:");
}

id objc_msgSend__dropTaskRequest(void *a1, const char *a2, ...)
{
  return _[a1 _dropTaskRequest];
}

id objc_msgSend__dropVoucherForTaskWithIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_dropVoucherForTaskWithIdentifier:");
}

id objc_msgSend__dropWithCompletionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_dropWithCompletionBlock:");
}

id objc_msgSend__emergencyExit(void *a1, const char *a2, ...)
{
  return _[a1 _emergencyExit];
}

id objc_msgSend__emitActivityStateLog(void *a1, const char *a2, ...)
{
  return _[a1 _emitActivityStateLog];
}

id objc_msgSend__emitLogForCurrentTasks(void *a1, const char *a2, ...)
{
  return _[a1 _emitLogForCurrentTasks];
}

id objc_msgSend__enableSchedulerBecauseAccountIsAvailable(void *a1, const char *a2, ...)
{
  return _[a1 _enableSchedulerBecauseAccountIsAvailable];
}

id objc_msgSend__endComputeStateDownload(void *a1, const char *a2, ...)
{
  return _[a1 _endComputeStateDownload];
}

id objc_msgSend__enqueueResourcesForChange_inOutgoingResourcesWithUploadIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_enqueueResourcesForChange:inOutgoingResourcesWithUploadIdentifier:");
}

id objc_msgSend__enqueuedResourceForResource_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_enqueuedResourceForResource:");
}

id objc_msgSend__enqueuedResourceForResource_verifyScopeIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_enqueuedResourceForResource:verifyScopeIndex:");
}

id objc_msgSend__enumerateAllZonesForSharedDatabase_block_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_enumerateAllZonesForSharedDatabase:block:completionHandler:");
}

id objc_msgSend__enumeratorForRecordsWithScopeIndex_maximumCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_enumeratorForRecordsWithScopeIndex:maximumCount:");
}

id objc_msgSend__enumeratorForRecordsWithTransientType_scopeIndex_class_maximumCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_enumeratorForRecordsWithTransientType:scopeIndex:class:maximumCount:");
}

id objc_msgSend__enumeratorForRecordsWithTransientType_scopeIndex_maximumCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_enumeratorForRecordsWithTransientType:scopeIndex:maximumCount:");
}

id objc_msgSend__errorForCancelledError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_errorForCancelledError:");
}

id objc_msgSend__errorForDeleteError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_errorForDeleteError:");
}

id objc_msgSend__errorForUpdateError_scopeProvider_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_errorForUpdateError:scopeProvider:");
}

id objc_msgSend__executeMaintenanceWithEnumerator_progress_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_executeMaintenanceWithEnumerator:progress:completionHandler:");
}

id objc_msgSend__executeSharePlanFromPlanner_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_executeSharePlanFromPlanner:completionHandler:");
}

id objc_msgSend__executeUnsharePlanFromPlanner_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_executeUnsharePlanFromPlanner:completionHandler:");
}

id objc_msgSend__exitErrorFromError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_exitErrorFromError:");
}

id objc_msgSend__expectedDurationFromPrediction_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_expectedDurationFromPrediction:");
}

id objc_msgSend__expiredCountLockedWithDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_expiredCountLockedWithDate:");
}

id objc_msgSend__failAllFutureOperationsWithContainerHasBeenWipedError(void *a1, const char *a2, ...)
{
  return _[a1 _failAllFutureOperationsWithContainerHasBeenWipedError];
}

id objc_msgSend__fetchAndMoveNextBatchWithUserRecordID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_fetchAndMoveNextBatchWithUserRecordID:");
}

id objc_msgSend__fetchCKShareWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_fetchCKShareWithCompletionHandler:");
}

id objc_msgSend__fetchLibraryInfoAndStateWithCurrentSyncAnchor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_fetchLibraryInfoAndStateWithCurrentSyncAnchor:");
}

id objc_msgSend__fetchMetadataForShareURL_currentUserID_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_fetchMetadataForShareURL:currentUserID:completion:");
}

id objc_msgSend__fetchNextOperationType_followRemapping_recordIDMapping_inResult_storeRequestUUIDsIn_completionHandler_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "_fetchNextOperationType:followRemapping:recordIDMapping:inResult:storeRequestUUIDsIn:completionHandler:");
}

id objc_msgSend__fetchPlaceholderRecordAndStartDownload(void *a1, const char *a2, ...)
{
  return _[a1 _fetchPlaceholderRecordAndStartDownload];
}

id objc_msgSend__fetchPrivateRecordsFromPlanner_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_fetchPrivateRecordsFromPlanner:completionHandler:");
}

id objc_msgSend__fetchRecordWithIdentifier_expectedClass_currentUserRecordID_completionHandler_( void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_fetchRecordWithIdentifier:expectedClass:currentUserRecordID:completionHandler:");
}

id objc_msgSend__fetchRecordWithScopedIdentifiers_followRemapping_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_fetchRecordWithScopedIdentifiers:followRemapping:completionHandler:");
}

id objc_msgSend__fetchRecordsFollowRemappingWithIDs_alreadyFetchRecordIDs_remappedRecordIDs_realRecords_type_storeRequestUUIDsIn_completionHandler_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "_fetchRecordsFollowRemappingWithIDs:alreadyFetchRecordIDs:remappedRecordIDs:realRecords:type:storeRequestUUID sIn:completionHandler:");
}

id objc_msgSend__fetchRecordsForNextOperationTypeInEnumerator_task_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_fetchRecordsForNextOperationTypeInEnumerator:task:completionHandler:");
}

id objc_msgSend__fetchRecordsForRemainingScopedIdentifiers_alreadyFetchedScopedIdentifiers_userRecordID_foundCPLRecords_foundCKRecords_targetMapping_completionHandler_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "_fetchRecordsForRemainingScopedIdentifiers:alreadyFetchedScopedIdentifiers:userRecordID:foundCPLRecords:found CKRecords:targetMapping:completionHandler:");
}

id objc_msgSend__fetchRequestedRecordsFromPlanner_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_fetchRequestedRecordsFromPlanner:completionHandler:");
}

id objc_msgSend__fetchSharedRecordsFromPlanner_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_fetchSharedRecordsFromPlanner:completionHandler:");
}

id objc_msgSend__fetchSparseRecordsWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_fetchSparseRecordsWithCompletionHandler:");
}

id objc_msgSend__fetchTransportScopeForScope_transportGroup_progress_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_fetchTransportScopeForScope:transportGroup:progress:completionHandler:");
}

id objc_msgSend__fetchZoneForZoneID_operationType_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_fetchZoneForZoneID:operationType:completionHandler:");
}

id objc_msgSend__filteredPartialFailureError_itemClass_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_filteredPartialFailureError:itemClass:");
}

id objc_msgSend__finishRemainingTasksWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_finishRemainingTasksWithError:");
}

id objc_msgSend__fix22666940(void *a1, const char *a2, ...)
{
  return _[a1 _fix22666940];
}

id objc_msgSend__fixStoreAfterAnyVersionChange(void *a1, const char *a2, ...)
{
  return _[a1 _fixStoreAfterAnyVersionChange];
}

id objc_msgSend__fixupStoredDestinationURL_isOriginal_needsCommit_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_fixupStoredDestinationURL:isOriginal:needsCommit:error:");
}

id objc_msgSend__forceBackupWithActivity_forceClientPush_enumerator_progress_completionHandler_( void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_forceBackupWithActivity:forceClientPush:enumerator:progress:completionHandler:");
}

id objc_msgSend__forceUpdateAccountInfoWithReason_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_forceUpdateAccountInfoWithReason:completionHandler:");
}

id objc_msgSend__getEncryptionHelper(void *a1, const char *a2, ...)
{
  return _[a1 _getEncryptionHelper];
}

id objc_msgSend__getIsOriginal_markedForDelete_forDestinationURL_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_getIsOriginal:markedForDelete:forDestinationURL:error:");
}

id objc_msgSend__getLocalIndexes_cloudIndexes_forScopeIdentifiers_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_getLocalIndexes:cloudIndexes:forScopeIdentifiers:");
}

id objc_msgSend__getNextPosition_andBumpWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_getNextPosition:andBumpWithError:");
}

id objc_msgSend__getTemporaryFolder(void *a1, const char *a2, ...)
{
  return _[a1 _getTemporaryFolder];
}

id objc_msgSend__group_dispatchWhenFinished_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_group:dispatchWhenFinished:");
}

id objc_msgSend__hasDeactivateMarker(void *a1, const char *a2, ...)
{
  return _[a1 _hasDeactivateMarker];
}

id objc_msgSend__hasRecordWithScopedIdentifier_isStaged_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_hasRecordWithScopedIdentifier:isStaged:");
}

id objc_msgSend__inMemoryDownloadOperationForRecordID_resource_record_keys_operationType_completionBlock_( void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_inMemoryDownloadOperationForRecordID:resource:record:keys:operationType:completionBlock:");
}

id objc_msgSend__incrementThrottledCount(void *a1, const char *a2, ...)
{
  return _[a1 _incrementThrottledCount];
}

id objc_msgSend__initializeDB(void *a1, const char *a2, ...)
{
  return _[a1 _initializeDB];
}

id objc_msgSend__injectionForChangeType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_injectionForChangeType:");
}

id objc_msgSend__injectionForFilter_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_injectionForFilter:");
}

id objc_msgSend__injectionForScopesAllowingPullFromTransport(void *a1, const char *a2, ...)
{
  return _[a1 _injectionForScopesAllowingPullFromTransport];
}

id objc_msgSend__insertFinalRecordWithScopedIdentifier_className_relatedIdentifier_secondaryIdentifier_otherScopeIndex_serializedRecord_confirmed_error_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "_insertFinalRecordWithScopedIdentifier:className:relatedIdentifier:secondaryIdentifier:otherScopeIndex:serial izedRecord:confirmed:error:");
}

id objc_msgSend__insertStagedRecordWithScopedIdentifier_className_relatedIdentifier_secondaryIdentifier_otherScopeIndex_serializedRecord_error_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "_insertStagedRecordWithScopedIdentifier:className:relatedIdentifier:secondaryIdentifier:otherScopeIndex:seria lizedRecord:error:");
}

id objc_msgSend__instantiateWrapperWithParameters_createIfNecessary_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_instantiateWrapperWithParameters:createIfNecessary:error:");
}

id objc_msgSend__interpretedChangeFromCKRecord_scopedIdentifier_userRecordID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_interpretedChangeFromCKRecord:scopedIdentifier:userRecordID:");
}

id objc_msgSend__interpretedSharedChangeFromCKRecord_scopedIdentifier_userRecordID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_interpretedSharedChangeFromCKRecord:scopedIdentifier:userRecordID:");
}

id objc_msgSend__isAppLibrary(void *a1, const char *a2, ...)
{
  return _[a1 _isAppLibrary];
}

id objc_msgSend__isBlockedKeyPath(void *a1, const char *a2, ...)
{
  return _[a1 _isBlockedKeyPath];
}

id objc_msgSend__isCKErrorForRejectedRecord_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_isCKErrorForRejectedRecord:");
}

id objc_msgSend__isCloudScopedIdentifier_aSuspiciousRemappingToCloudScopedIdentifier_primaryScope_( void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_isCloudScopedIdentifier:aSuspiciousRemappingToCloudScopedIdentifier:primaryScope:");
}

id objc_msgSend__isCurrentUserOwnerOrAdminOfShare_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_isCurrentUserOwnerOrAdminOfShare:");
}

id objc_msgSend__isEmpty(void *a1, const char *a2, ...)
{
  return _[a1 _isEmpty];
}

id objc_msgSend__isManagementLibraryManager(void *a1, const char *a2, ...)
{
  return _[a1 _isManagementLibraryManager];
}

id objc_msgSend__isScopeReadonlyFromCKShare_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_isScopeReadonlyFromCKShare:");
}

id objc_msgSend__isSuspiciousAsset_isBadAsset_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_isSuspiciousAsset:isBadAsset:");
}

id objc_msgSend__isUnBlockedKeyPath(void *a1, const char *a2, ...)
{
  return _[a1 _isUnBlockedKeyPath];
}

id objc_msgSend__isValidListOfShareParticipants_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_isValidListOfShareParticipants:");
}

id objc_msgSend__isValidScopeForClient_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_isValidScopeForClient:error:");
}

id objc_msgSend__itemErrorFromError_forID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_itemErrorFromError:forID:");
}

id objc_msgSend__keyForInsanityForLibraryIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_keyForInsanityForLibraryIdentifier:");
}

id objc_msgSend__killWithCompletionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_killWithCompletionBlock:");
}

id objc_msgSend__launchForcedExitForSupervisor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_launchForcedExitForSupervisor:");
}

id objc_msgSend__launchOperationForSharedDatabase_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_launchOperationForSharedDatabase:");
}

id objc_msgSend__libraryHasBeenDeleted(void *a1, const char *a2, ...)
{
  return _[a1 _libraryHasBeenDeleted];
}

id objc_msgSend__libraryInfoForScope_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_libraryInfoForScope:");
}

id objc_msgSend__librarySateForScope_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_librarySateForScope:");
}

id objc_msgSend__libraryStateFromCKRecord_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_libraryStateFromCKRecord:");
}

id objc_msgSend__libraryStateFromRootRecord_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_libraryStateFromRootRecord:");
}

id objc_msgSend__loadWrapperWithIdentifier_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_loadWrapperWithIdentifier:error:");
}

id objc_msgSend__localResourceFromCloudResources_usingMapping_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_localResourceFromCloudResources:usingMapping:");
}

id objc_msgSend__localResourceFromCloudResourcesAndErrors_usingMapping_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_localResourceFromCloudResourcesAndErrors:usingMapping:");
}

id objc_msgSend__markChangesWithScopedIdentifiersAsMingled_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_markChangesWithScopedIdentifiersAsMingled:error:");
}

id objc_msgSend__markFirstSyncOfPrimaryAsSuccessfulWithScope_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_markFirstSyncOfPrimaryAsSuccessfulWithScope:");
}

id objc_msgSend__markLibraryAsCorruptedWithInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_markLibraryAsCorruptedWithInfo:");
}

id objc_msgSend__markURLForDelete_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_markURLForDelete:error:");
}

id objc_msgSend__mergeChange_overChange_discardedUploadIdentifier_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_mergeChange:overChange:discardedUploadIdentifier:error:");
}

id objc_msgSend__mergeFoundCKRecords_updateFoundCPLRecords_remainingScopedIdentifiers_fetchedScopedIdentifiers_userRecordID_targetMapping_error_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "_mergeFoundCKRecords:updateFoundCPLRecords:remainingScopedIdentifiers:fetchedScopedIdentifiers:userRecordID:t argetMapping:error:");
}

id objc_msgSend__mergePrivateRecord_withSharedRecord_merger_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_mergePrivateRecord:withSharedRecord:merger:");
}

id objc_msgSend__metadataWithoutOrientation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_metadataWithoutOrientation:");
}

id objc_msgSend__migratePushQueue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_migratePushQueue:");
}

id objc_msgSend__minimalPullFromTranportExpirationInterval(void *a1, const char *a2, ...)
{
  return _[a1 _minimalPullFromTranportExpirationInterval];
}

id objc_msgSend__minimumUploadSizeForLargeSession(void *a1, const char *a2, ...)
{
  return _[a1 _minimumUploadSizeForLargeSession];
}

id objc_msgSend__minimumUploadSizeForVeryLargeSession(void *a1, const char *a2, ...)
{
  return _[a1 _minimumUploadSizeForVeryLargeSession];
}

id objc_msgSend__modifyParticipantsOfCKShare_newParticipants_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_modifyParticipantsOfCKShare:newParticipants:");
}

id objc_msgSend__moveBatchRecordWithNames_userRecordID_operationID_moveBatchID_hasMore_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_moveBatchRecordWithNames:userRecordID:operationID:moveBatchID:hasMore:");
}

id objc_msgSend__moveChangesFromSourceRecords_recordIDs_sourceType_destinationRecordIDs_helper_sourceRecordIDs_operationContext_error_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "_moveChangesFromSourceRecords:recordIDs:sourceType:destinationRecordIDs:helper:sourceRecordIDs:operationContext:error:");
}

id objc_msgSend__networkBehaviorForConfiguration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_networkBehaviorForConfiguration:");
}

id objc_msgSend__nextSequenceNumber(void *a1, const char *a2, ...)
{
  return _[a1 _nextSequenceNumber];
}

id objc_msgSend__noteContainerHasBeenWiped(void *a1, const char *a2, ...)
{
  return _[a1 _noteContainerHasBeenWiped];
}

id objc_msgSend__noteEndOfResetIfNecessary(void *a1, const char *a2, ...)
{
  return _[a1 _noteEndOfResetIfNecessary];
}

id objc_msgSend__noteMasterWillBeUploadedToPrivateZone_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_noteMasterWillBeUploadedToPrivateZone:");
}

id objc_msgSend__noteMasterWillBeUploadedToSharedZone_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_noteMasterWillBeUploadedToSharedZone:");
}

id objc_msgSend__noteRecordWithScopedIdentifierWillMoveToSplitState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_noteRecordWithScopedIdentifierWillMoveToSplitState:");
}

id objc_msgSend__notifyVacuumDidComplete(void *a1, const char *a2, ...)
{
  return _[a1 _notifyVacuumDidComplete];
}

id objc_msgSend__openUpgradeJournal(void *a1, const char *a2, ...)
{
  return _[a1 _openUpgradeJournal];
}

id objc_msgSend__openWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_openWithError:");
}

id objc_msgSend__operationAllowsCellular_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_operationAllowsCellular:");
}

id objc_msgSend__operationsShouldBeDiscretionary(void *a1, const char *a2, ...)
{
  return _[a1 _operationsShouldBeDiscretionary];
}

id objc_msgSend__otherScopeIndexForRecord_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_otherScopeIndexForRecord:");
}

id objc_msgSend__outputOptionsFromSource_matchingResource_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_outputOptionsFromSource:matchingResource:");
}

id objc_msgSend__overwriteChange_pushContext_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_overwriteChange:pushContext:error:");
}

id objc_msgSend__partnerScopesNeedingToPullChangesFromZoneIDsWithSyncObligations_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_partnerScopesNeedingToPullChangesFromZoneIDsWithSyncObligations:");
}

id objc_msgSend__pendingTaskStatus(void *a1, const char *a2, ...)
{
  return _[a1 _pendingTaskStatus];
}

id objc_msgSend__performAfterRegistrations_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_performAfterRegistrations:");
}

id objc_msgSend__performMigrationForRemappedRecord_primaryScope_sharingScope_revertedCount_error_( void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_performMigrationForRemappedRecord:primaryScope:sharingScope:revertedCount:error:");
}

id objc_msgSend__performMigrationWithPrimaryScope_sharingScope_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_performMigrationWithPrimaryScope:sharingScope:error:");
}

id objc_msgSend__performOnceDeviceIsUnlocked_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_performOnceDeviceIsUnlocked:");
}

id objc_msgSend__performPendingBlockAfterFirstUnlock(void *a1, const char *a2, ...)
{
  return _[a1 _performPendingBlockAfterFirstUnlock];
}

id objc_msgSend__performWithFlags_action_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_performWithFlags:action:");
}

id objc_msgSend__permissionFromCKShare_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_permissionFromCKShare:");
}

id objc_msgSend__persistedSyncSessionForScheduler_startSyncSessionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_persistedSyncSessionForScheduler:startSyncSessionBlock:");
}

id objc_msgSend__postUpgradeToVersion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_postUpgradeToVersion:");
}

id objc_msgSend__pqlChangeWithScopedIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_pqlChangeWithScopedIdentifier:");
}

id objc_msgSend__prepareRecordsToDelete(void *a1, const char *a2, ...)
{
  return _[a1 _prepareRecordsToDelete];
}

id objc_msgSend__priorityDescriptionForOperation_forTask_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_priorityDescriptionForOperation:forTask:");
}

id objc_msgSend__processConnectionDidInvalidate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_processConnectionDidInvalidate:");
}

id objc_msgSend__processFinalSyncObligationsWithZoneIDs_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_processFinalSyncObligationsWithZoneIDs:");
}

id objc_msgSend__processListener_shouldAcceptNewConnection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_processListener:shouldAcceptNewConnection:");
}

id objc_msgSend__publishRealProgressIfNecessary(void *a1, const char *a2, ...)
{
  return _[a1 _publishRealProgressIfNecessary];
}

id objc_msgSend__pullMarker(void *a1, const char *a2, ...)
{
  return _[a1 _pullMarker];
}

id objc_msgSend__pushContext(void *a1, const char *a2, ...)
{
  return _[a1 _pushContext];
}

id objc_msgSend__pushMarker(void *a1, const char *a2, ...)
{
  return _[a1 _pushMarker];
}

id objc_msgSend__queue(void *a1, const char *a2, ...)
{
  return _[a1 _queue];
}

id objc_msgSend__reallyStartOperation(void *a1, const char *a2, ...)
{
  return _[a1 _reallyStartOperation];
}

id objc_msgSend__reallySubmitTaskRequest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_reallySubmitTaskRequest:");
}

id objc_msgSend__recordIDForResourcesWithItemScopedIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_recordIDForResourcesWithItemScopedIdentifier:");
}

id objc_msgSend__recordIDFromScopedIdentifier_cloudKitScope_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_recordIDFromScopedIdentifier:cloudKitScope:error:");
}

id objc_msgSend__recordWithRecordID_usingRealRecords_remappedRecordIDs_wantsAllRecords_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_recordWithRecordID:usingRealRecords:remappedRecordIDs:wantsAllRecords:");
}

id objc_msgSend__refreshLargestResourceSizeWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_refreshLargestResourceSizeWithError:");
}

id objc_msgSend__registerAfterLaunchWhenAllEnginesAreOpened(void *a1, const char *a2, ...)
{
  return _[a1 _registerAfterLaunchWhenAllEnginesAreOpened];
}

id objc_msgSend__registerForBackupRequests(void *a1, const char *a2, ...)
{
  return _[a1 _registerForBackupRequests];
}

id objc_msgSend__registerForConfigurationRefresh(void *a1, const char *a2, ...)
{
  return _[a1 _registerForConfigurationRefresh];
}

id objc_msgSend__registerForFastPassInitialDownload(void *a1, const char *a2, ...)
{
  return _[a1 _registerForFastPassInitialDownload];
}

id objc_msgSend__registerForMaintenance(void *a1, const char *a2, ...)
{
  return _[a1 _registerForMaintenance];
}

id objc_msgSend__registerForPeriodicUploadOfComputeStates(void *a1, const char *a2, ...)
{
  return _[a1 _registerForPeriodicUploadOfComputeStates];
}

id objc_msgSend__registerFromPersistentSyncSessionWithLaunchBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_registerFromPersistentSyncSessionWithLaunchBlock:");
}

id objc_msgSend__registerOpenError_forWrapper_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_registerOpenError:forWrapper:");
}

id objc_msgSend__registerWithTaskIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_registerWithTaskIdentifier:");
}

id objc_msgSend__rejectionReasonFromPartialError_identifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_rejectionReasonFromPartialError:identifier:");
}

id objc_msgSend__relatedIdentifierForRecordWithIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_relatedIdentifierForRecordWithIdentifier:");
}

id objc_msgSend__relatedRecordShouldBeShared(void *a1, const char *a2, ...)
{
  return _[a1 _relatedRecordShouldBeShared];
}

id objc_msgSend__removeClient_interestedInSomeZones_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_removeClient:interestedInSomeZones:");
}

id objc_msgSend__removeClientFromInterestingZones_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_removeClientFromInterestingZones:");
}

id objc_msgSend__removeEngineWrapperOpenObserverWithIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_removeEngineWrapperOpenObserverWithIdentifier:");
}

id objc_msgSend__removeExpiredEntriesLockedForNow_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_removeExpiredEntriesLockedForNow:");
}

id objc_msgSend__removeFirstEntriesCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_removeFirstEntriesCount:");
}

id objc_msgSend__removeKeyForInsanityForLibraryIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_removeKeyForInsanityForLibraryIdentifier:");
}

id objc_msgSend__reportForTaskWithIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_reportForTaskWithIdentifier:");
}

id objc_msgSend__reportICPLFeatureCheckpoint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_reportICPLFeatureCheckpoint:");
}

id objc_msgSend__requestFromUpdatedRequest_updatedPrediction_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_requestFromUpdatedRequest:updatedPrediction:");
}

id objc_msgSend__resetPlannerState(void *a1, const char *a2, ...)
{
  return _[a1 _resetPlannerState];
}

id objc_msgSend__resetPushAndPullMarkersIfEmptyWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_resetPushAndPullMarkersIfEmptyWithError:");
}

id objc_msgSend__resetPushAndPullMarkersWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_resetPushAndPullMarkersWithError:");
}

id objc_msgSend__resetStore_reason_resetSelector_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_resetStore:reason:resetSelector:error:");
}

id objc_msgSend__revertRecordWithLocalScopedIdentifier_class_revertedCount_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_revertRecordWithLocalScopedIdentifier:class:revertedCount:error:");
}

id objc_msgSend__rootRef(void *a1, const char *a2, ...)
{
  return _[a1 _rootRef];
}

id objc_msgSend__runOperations(void *a1, const char *a2, ...)
{
  return _[a1 _runOperations];
}

id objc_msgSend__runQueryWithCurrentUserID_cursor_additionalInfo_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_runQueryWithCurrentUserID:cursor:additionalInfo:completionHandler:");
}

id objc_msgSend__save(void *a1, const char *a2, ...)
{
  return _[a1 _save];
}

id objc_msgSend__saveParameters_withKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_saveParameters:withKey:");
}

id objc_msgSend__saveRegisteredTaskIdentifiers(void *a1, const char *a2, ...)
{
  return _[a1 _saveRegisteredTaskIdentifiers];
}

id objc_msgSend__savedParametersForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_savedParametersForKey:");
}

id objc_msgSend__scheduleBlockedTimeout(void *a1, const char *a2, ...)
{
  return _[a1 _scheduleBlockedTimeout];
}

id objc_msgSend__scheduleClientCacheDrop(void *a1, const char *a2, ...)
{
  return _[a1 _scheduleClientCacheDrop];
}

id objc_msgSend__scheduleClientCacheDropIfNecessary(void *a1, const char *a2, ...)
{
  return _[a1 _scheduleClientCacheDropIfNecessary];
}

id objc_msgSend__scheduleOrLaunchIfNecessary(void *a1, const char *a2, ...)
{
  return _[a1 _scheduleOrLaunchIfNecessary];
}

id objc_msgSend__scopeChangeFromShareMetadata_currentUserID_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_scopeChangeFromShareMetadata:currentUserID:error:");
}

id objc_msgSend__scopeIdentifierFromZoneID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_scopeIdentifierFromZoneID:");
}

id objc_msgSend__scopeIndexForScopeIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_scopeIndexForScopeIdentifier:");
}

id objc_msgSend__scopeIndexForScopedIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_scopeIndexForScopedIdentifier:");
}

id objc_msgSend__scopeType_supportsClientSyncWithOptions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_scopeType:supportsClientSyncWithOptions:");
}

id objc_msgSend__scopeTypeForCloudKitScope_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_scopeTypeForCloudKitScope:");
}

id objc_msgSend__scopeTypeSupportsClientSync_scopeIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_scopeTypeSupportsClientSync:scopeIdentifier:");
}

id objc_msgSend__scopeWithQuery_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_scopeWithQuery:");
}

id objc_msgSend__scopedIdentifierForIdentifier_scopeIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_scopedIdentifierForIdentifier:scopeIndex:");
}

id objc_msgSend__scopes(void *a1, const char *a2, ...)
{
  return _[a1 _scopes];
}

id objc_msgSend__sendExitFeedbackForSupervisor_cloudKitScope_exitState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_sendExitFeedbackForSupervisor:cloudKitScope:exitState:");
}

id objc_msgSend__sendExitFeedbackWithSourceRecordIDs_destinationRecordIDs_moveError_operationID_moveBatchID_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "_sendExitFeedbackWithSourceRecordIDs:destinationRecordIDs:moveError:operationID:moveBatchID:");
}

id objc_msgSend__sessionIsDoneOrWontHappen(void *a1, const char *a2, ...)
{
  return _[a1 _sessionIsDoneOrWontHappen];
}

id objc_msgSend__setBackgroundDownloadTaskIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setBackgroundDownloadTaskIdentifier:");
}

id objc_msgSend__setCurrentActivity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setCurrentActivity:");
}

id objc_msgSend__setEnabledTopics_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setEnabledTopics:");
}

id objc_msgSend__setIsOriginal_markedForDelete_onDestinationURL_clearFlags_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setIsOriginal:markedForDelete:onDestinationURL:clearFlags:error:");
}

id objc_msgSend__setKeyForInsanityIfNecessaryForParameters_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setKeyForInsanityIfNecessaryForParameters:");
}

id objc_msgSend__setLastError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setLastError:");
}

id objc_msgSend__setLibraryVersion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setLibraryVersion:");
}

id objc_msgSend__setPullMarker_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setPullMarker:error:");
}

id objc_msgSend__setPushContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setPushContext:");
}

id objc_msgSend__setPushMarker_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setPushMarker:error:");
}

id objc_msgSend__setPushRegistrationStatus_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setPushRegistrationStatus:error:");
}

id objc_msgSend__setQueue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setQueue:");
}

id objc_msgSend__setShouldNotTrustCloudCache_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setShouldNotTrustCloudCache:");
}

id objc_msgSend__setSizeOfResourcesToUpload_sizeOfOriginalResourcesToUpload_numberOfImages_numberOfVideos_numberOfOtherItems_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "_setSizeOfResourcesToUpload:sizeOfOriginalResourcesToUpload:numberOfImages:numberOfVideos:numberOfOtherItems:");
}

id objc_msgSend__setupCallbacks(void *a1, const char *a2, ...)
{
  return _[a1 _setupCallbacks];
}

id objc_msgSend__setupDBIfNeeded(void *a1, const char *a2, ...)
{
  return _[a1 _setupDBIfNeeded];
}

id objc_msgSend__setupPragmasAndFunctions(void *a1, const char *a2, ...)
{
  return _[a1 _setupPragmasAndFunctions];
}

id objc_msgSend__setupProfilingHooks(void *a1, const char *a2, ...)
{
  return _[a1 _setupProfilingHooks];
}

id objc_msgSend__shareTodoForRecordWithScopedIdentifier_recordClass_proposedContributorUserIdentifiers_target_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "_shareTodoForRecordWithScopedIdentifier:recordClass:proposedContributorUserIdentifiers:target:");
}

id objc_msgSend__sharedRecordToPrivateRecord_scopedIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_sharedRecordToPrivateRecord:scopedIdentifier:");
}

id objc_msgSend__shouldAutoOpenWrapper_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_shouldAutoOpenWrapper:error:");
}

id objc_msgSend__shouldNotTrustCloudCache(void *a1, const char *a2, ...)
{
  return _[a1 _shouldNotTrustCloudCache];
}

id objc_msgSend__shouldShowIndicator(void *a1, const char *a2, ...)
{
  return _[a1 _shouldShowIndicator];
}

id objc_msgSend__shouldSkipRampingRequest(void *a1, const char *a2, ...)
{
  return _[a1 _shouldSkipRampingRequest];
}

id objc_msgSend__shouldUpdateKeyOnCKRecord_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_shouldUpdateKeyOnCKRecord:");
}

id objc_msgSend__shouldUpdateKeyOnSharedCKRecord_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_shouldUpdateKeyOnSharedCKRecord:");
}

id objc_msgSend__significantWorkKeyPath(void *a1, const char *a2, ...)
{
  return _[a1 _significantWorkKeyPath];
}

id objc_msgSend__simulateExitForScopeIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_simulateExitForScopeIdentifier:");
}

id objc_msgSend__sizeInBytes(void *a1, const char *a2, ...)
{
  return _[a1 _sizeInBytes];
}

id objc_msgSend__startDownload(void *a1, const char *a2, ...)
{
  return _[a1 _startDownload];
}

id objc_msgSend__startShowingIndicator_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_startShowingIndicator:");
}

id objc_msgSend__startWatchingAccountInfoChangesWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_startWatchingAccountInfoChangesWithCompletionHandler:");
}

id objc_msgSend__startWatchingSystemState(void *a1, const char *a2, ...)
{
  return _[a1 _startWatchingSystemState];
}

id objc_msgSend__startWatchingURL_forPauseReason_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_startWatchingURL:forPauseReason:");
}

id objc_msgSend__statusPerScopeIndex(void *a1, const char *a2, ...)
{
  return _[a1 _statusPerScopeIndex];
}

id objc_msgSend__stopShowingIndicator_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_stopShowingIndicator:");
}

id objc_msgSend__stopWatchingAccountInfoChanges(void *a1, const char *a2, ...)
{
  return _[a1 _stopWatchingAccountInfoChanges];
}

id objc_msgSend__stopWatchingSystemState(void *a1, const char *a2, ...)
{
  return _[a1 _stopWatchingSystemState];
}

id objc_msgSend__storeChange_update_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_storeChange:update:error:");
}

id objc_msgSend__storeLibraryInfo_forScope_libraryInfoHasBeenUpdated_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_storeLibraryInfo:forScope:libraryInfoHasBeenUpdated:error:");
}

id objc_msgSend__storeSupervisorInfoInTransaction_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_storeSupervisorInfoInTransaction:");
}

id objc_msgSend__storeTransportGroup_inColumnVariable_forScope_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_storeTransportGroup:inColumnVariable:forScope:error:");
}

id objc_msgSend__storeUploadTransferTask_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_storeUploadTransferTask:");
}

id objc_msgSend__storeValue_forColumnVariable_scope_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_storeValue:forColumnVariable:scope:error:");
}

id objc_msgSend__storeVoucher_forTaskWithIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_storeVoucher:forTaskWithIdentifier:");
}

id objc_msgSend__streamOperationForKey_operationType_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_streamOperationForKey:operationType:completionHandler:");
}

id objc_msgSend__stringForQoS_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_stringForQoS:");
}

id objc_msgSend__submitIfNecessary(void *a1, const char *a2, ...)
{
  return _[a1 _submitIfNecessary];
}

id objc_msgSend__submitTaskRequest(void *a1, const char *a2, ...)
{
  return _[a1 _submitTaskRequest];
}

id objc_msgSend__summaryForTaskRequest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_summaryForTaskRequest:");
}

id objc_msgSend__supervisorExitStateForScopeChange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_supervisorExitStateForScopeChange:");
}

id objc_msgSend__supportedScopeTypesWithOptions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_supportedScopeTypesWithOptions:");
}

id objc_msgSend__tempDestinationURLForRecoveredDataWithTempFolderURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_tempDestinationURLForRecoveredDataWithTempFolderURL:");
}

id objc_msgSend__transactionStatsDescription(void *a1, const char *a2, ...)
{
  return _[a1 _transactionStatsDescription];
}

id objc_msgSend__transferImageFromSource_toDestination_matchingResource_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_transferImageFromSource:toDestination:matchingResource:");
}

id objc_msgSend__transferValueFromVariable_type_ofStorage_toColumnVariable_transformer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_transferValueFromVariable:type:ofStorage:toColumnVariable:transformer:");
}

id objc_msgSend__transportGroupClass(void *a1, const char *a2, ...)
{
  return _[a1 _transportGroupClass];
}

id objc_msgSend__transportGroupForColumnVariable_forScope_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_transportGroupForColumnVariable:forScope:");
}

id objc_msgSend__unBlockedReason(void *a1, const char *a2, ...)
{
  return _[a1 _unBlockedReason];
}

id objc_msgSend__unpublish(void *a1, const char *a2, ...)
{
  return _[a1 _unpublish];
}

id objc_msgSend__unscheduleBlockedTimeout(void *a1, const char *a2, ...)
{
  return _[a1 _unscheduleBlockedTimeout];
}

id objc_msgSend__unscheduleInQueue(void *a1, const char *a2, ...)
{
  return _[a1 _unscheduleInQueue];
}

id objc_msgSend__unsetupProfilingHooks(void *a1, const char *a2, ...)
{
  return _[a1 _unsetupProfilingHooks];
}

id objc_msgSend__updateAccountInfoWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateAccountInfoWithCompletionHandler:");
}

id objc_msgSend__updateAcquireError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateAcquireError:");
}

id objc_msgSend__updateBudgets(void *a1, const char *a2, ...)
{
  return _[a1 _updateBudgets];
}

id objc_msgSend__updateCKRecordsInSharedScope_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateCKRecordsInSharedScope:");
}

id objc_msgSend__updateCKShare_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateCKShare:completionHandler:");
}

id objc_msgSend__updateCloudKitScopeWithZone_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateCloudKitScopeWithZone:");
}

id objc_msgSend__updateConfigurationRefreshIntervalIfNecessary(void *a1, const char *a2, ...)
{
  return _[a1 _updateConfigurationRefreshIntervalIfNecessary];
}

id objc_msgSend__updateFinalRecordWithScopedIdentifer_relatedIdentifier_secondaryIdentifier_otherScopeIndex_serializedRecord_confirmed_error_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "_updateFinalRecordWithScopedIdentifer:relatedIdentifier:secondaryIdentifier:otherScopeIndex:serializedRecord: confirmed:error:");
}

id objc_msgSend__updateOtherScopeIdentifierInRecord_otherScopeIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateOtherScopeIdentifierInRecord:otherScopeIndex:");
}

id objc_msgSend__updateOverridingForeground(void *a1, const char *a2, ...)
{
  return _[a1 _updateOverridingForeground];
}

id objc_msgSend__updateRelatedIdentifier_forRecordWithIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateRelatedIdentifier:forRecordWithIdentifier:");
}

id objc_msgSend__updateRequestIfNecessary(void *a1, const char *a2, ...)
{
  return _[a1 _updateRequestIfNecessary];
}

id objc_msgSend__updateScopeAndFlagsWithCKRecord_currentUserID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateScopeAndFlagsWithCKRecord:currentUserID:");
}

id objc_msgSend__updateScopeParticipantsWithCKShare_currentUserID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateScopeParticipantsWithCKShare:currentUserID:");
}

id objc_msgSend__updateSparseRecords_currentUserRecordID_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateSparseRecords:currentUserRecordID:completionHandler:");
}

id objc_msgSend__updateStagedRecordWithScopedIdentifer_relatedIdentifier_secondaryIdentifier_otherScopeIndex_serializedRecord_error_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "_updateStagedRecordWithScopedIdentifer:relatedIdentifier:secondaryIdentifier:otherScopeIndex:serializedRecord:error:");
}

id objc_msgSend__updateStateWithAccountInfo_walrusEnabledDefault_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateStateWithAccountInfo:walrusEnabledDefault:");
}

id objc_msgSend__updateStateWithAccountStatus_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateStateWithAccountStatus:");
}

id objc_msgSend__updateStatusForMainScopeChange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateStatusForMainScopeChange:");
}

id objc_msgSend__updateTaskIdentifierWithRequest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateTaskIdentifierWithRequest:");
}

id objc_msgSend__updateWalrusTo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateWalrusTo:");
}

id objc_msgSend__upgradeDB_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_upgradeDB:");
}

id objc_msgSend__upgradeToVersion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_upgradeToVersion:");
}

id objc_msgSend__uploadBatchFromPlanner_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_uploadBatchFromPlanner:completionHandler:");
}

id objc_msgSend__uploadCKShare_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_uploadCKShare:completionHandler:");
}

id objc_msgSend__uploadDestinationRecords_destinationType_scopeProvider_operationContext_uploadAction_completionHandler_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "_uploadDestinationRecords:destinationType:scopeProvider:operationContext:uploadAction:completionHandler:");
}

id objc_msgSend__uploadRecords_deleteRecordIDs_identification_fromPlanner_uploadContext_updateProgress_completionHandler_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "_uploadRecords:deleteRecordIDs:identification:fromPlanner:uploadContext:updateProgress:completionHandler:");
}

id objc_msgSend__uploadSharedBatchFromPlanner_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_uploadSharedBatchFromPlanner:completionHandler:");
}

id objc_msgSend__userIdentifierClass(void *a1, const char *a2, ...)
{
  return _[a1 _userIdentifierClass];
}

id objc_msgSend__vacuum_withInitialDatabaseSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_vacuum:withInitialDatabaseSize:");
}

id objc_msgSend__validateLastZoneIDInArray_currentUserID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_validateLastZoneIDInArray:currentUserID:");
}

id objc_msgSend__valueForBindableValue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_valueForBindableValue:");
}

id objc_msgSend__valueForColumnVariable_scope_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_valueForColumnVariable:scope:");
}

id objc_msgSend__valueForKey_class_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_valueForKey:class:");
}

id objc_msgSend__waitForClients(void *a1, const char *a2, ...)
{
  return _[a1 _waitForClients];
}

id objc_msgSend__waitForClientsIfNecessaryLocked(void *a1, const char *a2, ...)
{
  return _[a1 _waitForClientsIfNecessaryLocked];
}

id objc_msgSend__whenThereIsNoOtherLibraryManagersOpenedWithLibraryIdentifier_callBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_whenThereIsNoOtherLibraryManagersOpenedWithLibraryIdentifier:callBlock:");
}

id objc_msgSend__willUpdateCKRecordWithID_onBehalfOfRecordWithScopedIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_willUpdateCKRecordWithID:onBehalfOfRecordWithScopedIdentifier:");
}

id objc_msgSend__wipeBeforeOpeningIfNecessary(void *a1, const char *a2, ...)
{
  return _[a1 _wipeBeforeOpeningIfNecessary];
}

id objc_msgSend__wipeIfDeactivated_didWipeDatabase_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_wipeIfDeactivated:didWipeDatabase:error:");
}

id objc_msgSend__wipeReasonFromCorruptionInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_wipeReasonFromCorruptionInfo:");
}

id objc_msgSend__wipeStoreMarkerURL(void *a1, const char *a2, ...)
{
  return _[a1 _wipeStoreMarkerURL];
}

id objc_msgSend__wipeStoreMarkerURLWithCloudLibraryStateStorageURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_wipeStoreMarkerURLWithCloudLibraryStateStorageURL:");
}

id objc_msgSend__wipeWithReason_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_wipeWithReason:");
}

id objc_msgSend__withTempCKAssetForData_tempFolderURL_block_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_withTempCKAssetForData:tempFolderURL:block:");
}

id objc_msgSend__withVoucherForTaskWithIdentifier_do_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_withVoucherForTaskWithIdentifier:do:");
}

id objc_msgSend__wrappersLibraryIdentifierEnumerator(void *a1, const char *a2, ...)
{
  return _[a1 _wrappersLibraryIdentifierEnumerator];
}

id objc_msgSend__writeStoreMarkerAtURL_reason_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_writeStoreMarkerAtURL:reason:");
}

id objc_msgSend__zoneishContainer(void *a1, const char *a2, ...)
{
  return _[a1 _zoneishContainer];
}

id objc_msgSend_abstractObject(void *a1, const char *a2, ...)
{
  return _[a1 abstractObject];
}

id objc_msgSend_acceptSharedScope_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "acceptSharedScope:completionHandler:");
}

id objc_msgSend_acceptTaskForSharedScope_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "acceptTaskForSharedScope:completionHandler:");
}

id objc_msgSend_acceptanceStatus(void *a1, const char *a2, ...)
{
  return _[a1 acceptanceStatus];
}

id objc_msgSend_accessibilityDescription(void *a1, const char *a2, ...)
{
  return _[a1 accessibilityDescription];
}

id objc_msgSend_accountInfoWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "accountInfoWithCompletionHandler:");
}

id objc_msgSend_accountStatusWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "accountStatusWithCompletionHandler:");
}

id objc_msgSend_acknowledgeChangeBatch_withCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "acknowledgeChangeBatch:withCompletionHandler:");
}

id objc_msgSend_acknowledgeChangedStatuses_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "acknowledgeChangedStatuses:");
}

id objc_msgSend_acknowledgeChangedStatuses_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "acknowledgeChangedStatuses:error:");
}

id objc_msgSend_acquireBackgroundActivityWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "acquireBackgroundActivityWithCompletionHandler:");
}

id objc_msgSend_acquireError(void *a1, const char *a2, ...)
{
  return _[a1 acquireError];
}

id objc_msgSend_acquireHelperWithIdentifier_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "acquireHelperWithIdentifier:completionHandler:");
}

id objc_msgSend_acquiredTask_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "acquiredTask:");
}

id objc_msgSend_actionData(void *a1, const char *a2, ...)
{
  return _[a1 actionData];
}

id objc_msgSend_activateScopeWithIdentifier_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "activateScopeWithIdentifier:completionHandler:");
}

id objc_msgSend_activationDate(void *a1, const char *a2, ...)
{
  return _[a1 activationDate];
}

id objc_msgSend_activityHasExpired_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "activityHasExpired:");
}

id objc_msgSend_activityHasExpired_forRescheduler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "activityHasExpired:forRescheduler:");
}

id objc_msgSend_activityState(void *a1, const char *a2, ...)
{
  return _[a1 activityState];
}

id objc_msgSend_addBudgetDelegate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addBudgetDelegate:");
}

id objc_msgSend_addCKKeys_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addCKKeys:");
}

id objc_msgSend_addChange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addChange:");
}

id objc_msgSend_addChild_withPendingUnitCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addChild:withPendingUnitCount:");
}

id objc_msgSend_addColumnVariable_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addColumnVariable:error:");
}

id objc_msgSend_addColumnVariableGroup_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addColumnVariableGroup:error:");
}

id objc_msgSend_addComputeState_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addComputeState:error:");
}

id objc_msgSend_addCopyMoveFromRecordID_toRecordID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addCopyMoveFromRecordID:toRecordID:");
}

id objc_msgSend_addDeferHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addDeferHandler:");
}

id objc_msgSend_addDownloadTask_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addDownloadTask:");
}

id objc_msgSend_addDropDerivativesRecipe_writeToUserDefaults_withCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addDropDerivativesRecipe:writeToUserDefaults:withCompletionHandler:");
}

id objc_msgSend_addEntriesFromDictionary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addEntriesFromDictionary:");
}

id objc_msgSend_addExitingUserIdentifiers_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addExitingUserIdentifiers:");
}

id objc_msgSend_addExpungeableResourceStateToCKRecord_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addExpungeableResourceStateToCKRecord:");
}

id objc_msgSend_addFeatureVersion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addFeatureVersion:");
}

id objc_msgSend_addFeatures_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addFeatures:");
}

id objc_msgSend_addGlobalVariable_defaultValue_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addGlobalVariable:defaultValue:error:");
}

id objc_msgSend_addIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addIndex:");
}

id objc_msgSend_addIndexes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addIndexes:");
}

id objc_msgSend_addInfoToLog_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addInfoToLog:");
}

id objc_msgSend_addKeysAndValues_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addKeysAndValues:");
}

id objc_msgSend_addKnownTarget_forRecordWithScopedIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addKnownTarget:forRecordWithScopedIdentifier:");
}

id objc_msgSend_addMessages_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addMessages:");
}

id objc_msgSend_addObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addObject:");
}

id objc_msgSend_addObjectsFromArray_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addObjectsFromArray:");
}

id objc_msgSend_addObserver_selector_name_object_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addObserver:selector:name:object:");
}

id objc_msgSend_addObserverForName_object_queue_usingBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addObserverForName:object:queue:usingBlock:");
}

id objc_msgSend_addOperation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addOperation:");
}

id objc_msgSend_addParticipant_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addParticipant:");
}

id objc_msgSend_addPushPullGatekeeper_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addPushPullGatekeeper:error:");
}

id objc_msgSend_addRecord_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addRecord:");
}

id objc_msgSend_addRecord_forRecordID_ignoreResources_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addRecord:forRecordID:ignoreResources:");
}

id objc_msgSend_addRecordsToRevertWithLocalScopedIdentifier_class_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addRecordsToRevertWithLocalScopedIdentifier:class:error:");
}

id objc_msgSend_addRequest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addRequest:");
}

id objc_msgSend_addResource_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addResource:");
}

id objc_msgSend_addResourceType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addResourceType:");
}

id objc_msgSend_addShareTodo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addShareTodo:");
}

id objc_msgSend_addStatusChangesForRecordsWithScopedIdentifiers_persist_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addStatusChangesForRecordsWithScopedIdentifiers:persist:");
}

id objc_msgSend_addSyncAnchor_forFeatureVersion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addSyncAnchor:forFeatureVersion:");
}

id objc_msgSend_addTransportScopeForScopeIdentifier_scopes_useStagingScopeIfNecessary_error_( void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addTransportScopeForScopeIdentifier:scopes:useStagingScopeIfNecessary:error:");
}

id objc_msgSend_addVolumeUnmountObserver_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addVolumeUnmountObserver:");
}

id objc_msgSend_addedDate(void *a1, const char *a2, ...)
{
  return _[a1 addedDate];
}

id objc_msgSend_additionalInfo(void *a1, const char *a2, ...)
{
  return _[a1 additionalInfo];
}

id objc_msgSend_additionalStatusForScopeWithIndex_baseRecordCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "additionalStatusForScopeWithIndex:baseRecordCount:");
}

id objc_msgSend_adds(void *a1, const char *a2, ...)
{
  return _[a1 adds];
}

id objc_msgSend_adjustedMediaMetaData(void *a1, const char *a2, ...)
{
  return _[a1 adjustedMediaMetaData];
}

id objc_msgSend_adjustedMediaMetaDataType(void *a1, const char *a2, ...)
{
  return _[a1 adjustedMediaMetaDataType];
}

id objc_msgSend_adjustmentCompoundVersion(void *a1, const char *a2, ...)
{
  return _[a1 adjustmentCompoundVersion];
}

id objc_msgSend_adjustmentCreatorCode(void *a1, const char *a2, ...)
{
  return _[a1 adjustmentCreatorCode];
}

id objc_msgSend_adjustmentFingerprint(void *a1, const char *a2, ...)
{
  return _[a1 adjustmentFingerprint];
}

id objc_msgSend_adjustmentRenderTypes(void *a1, const char *a2, ...)
{
  return _[a1 adjustmentRenderTypes];
}

id objc_msgSend_adjustmentSourceType(void *a1, const char *a2, ...)
{
  return _[a1 adjustmentSourceType];
}

id objc_msgSend_adjustmentTimestamp(void *a1, const char *a2, ...)
{
  return _[a1 adjustmentTimestamp];
}

id objc_msgSend_adjustmentType(void *a1, const char *a2, ...)
{
  return _[a1 adjustmentType];
}

id objc_msgSend_adjustments(void *a1, const char *a2, ...)
{
  return _[a1 adjustments];
}

id objc_msgSend_albumSortAscending(void *a1, const char *a2, ...)
{
  return _[a1 albumSortAscending];
}

id objc_msgSend_albumSortType(void *a1, const char *a2, ...)
{
  return _[a1 albumSortType];
}

id objc_msgSend_albumType(void *a1, const char *a2, ...)
{
  return _[a1 albumType];
}

id objc_msgSend_allChangesWithClass_relatedScopedIdentifier_table_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "allChangesWithClass:relatedScopedIdentifier:table:");
}

id objc_msgSend_allChangesWithClass_scopeIdentifier_changeType_table_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "allChangesWithClass:scopeIdentifier:changeType:table:");
}

id objc_msgSend_allChangesWithClass_scopeIdentifier_trashed_table_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "allChangesWithClass:scopeIdentifier:trashed:table:");
}

id objc_msgSend_allChangesWithClass_secondaryScopedIdentifier_table_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "allChangesWithClass:secondaryScopedIdentifier:table:");
}

id objc_msgSend_allChangesWithScopeIdentifier_table_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "allChangesWithScopeIdentifier:table:");
}

id objc_msgSend_allDefinedParameters(void *a1, const char *a2, ...)
{
  return _[a1 allDefinedParameters];
}

id objc_msgSend_allDownloadsDidFailWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "allDownloadsDidFailWithError:");
}

id objc_msgSend_allDownloadsDidStartWithOperationID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "allDownloadsDidStartWithOperationID:");
}

id objc_msgSend_allKeys(void *a1, const char *a2, ...)
{
  return _[a1 allKeys];
}

id objc_msgSend_allNonDeletedChangesWithClass_scopeIdentifier_table_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "allNonDeletedChangesWithClass:scopeIdentifier:table:");
}

id objc_msgSend_allObjects(void *a1, const char *a2, ...)
{
  return _[a1 allObjects];
}

id objc_msgSend_allResourcesAreAvailable(void *a1, const char *a2, ...)
{
  return _[a1 allResourcesAreAvailable];
}

id objc_msgSend_allScopeIdentifiersIncludeInactive_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "allScopeIdentifiersIncludeInactive:");
}

id objc_msgSend_allSourceBundleIdentifiers(void *a1, const char *a2, ...)
{
  return _[a1 allSourceBundleIdentifiers];
}

id objc_msgSend_allTargetScopedIdentifiers(void *a1, const char *a2, ...)
{
  return _[a1 allTargetScopedIdentifiers];
}

id objc_msgSend_allValues(void *a1, const char *a2, ...)
{
  return _[a1 allValues];
}

id objc_msgSend_allocWithZone_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "allocWithZone:");
}

id objc_msgSend_allowed(void *a1, const char *a2, ...)
{
  return _[a1 allowed];
}

id objc_msgSend_allowedProtocolForClientAccess_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "allowedProtocolForClientAccess:");
}

id objc_msgSend_allowsCellular(void *a1, const char *a2, ...)
{
  return _[a1 allowsCellular];
}

id objc_msgSend_allowsCellularAccess(void *a1, const char *a2, ...)
{
  return _[a1 allowsCellularAccess];
}

id objc_msgSend_allowsCellularForDownloadOperationOfResource_isForeground_isHighPriority_( void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "allowsCellularForDownloadOperationOfResource:isForeground:isHighPriority:");
}

id objc_msgSend_allowsCellularForDownloadOperationOfSize_isForeground_isHighPriority_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "allowsCellularForDownloadOperationOfSize:isForeground:isHighPriority:");
}

id objc_msgSend_allowsConfigurationRefreshForWrapperArray_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "allowsConfigurationRefreshForWrapperArray:");
}

id objc_msgSend_allowsFetchCache(void *a1, const char *a2, ...)
{
  return _[a1 allowsFetchCache];
}

id objc_msgSend_allowsSyncOverCellular(void *a1, const char *a2, ...)
{
  return _[a1 allowsSyncOverCellular];
}

id objc_msgSend_allowsSyncOverExpensiveNetwork(void *a1, const char *a2, ...)
{
  return _[a1 allowsSyncOverExpensiveNetwork];
}

id objc_msgSend_allowsUserInitiatedOperationsOverExpensiveNetwork(void *a1, const char *a2, ...)
{
  return _[a1 allowsUserInitiatedOperationsOverExpensiveNetwork];
}

id objc_msgSend_altitude(void *a1, const char *a2, ...)
{
  return _[a1 altitude];
}

id objc_msgSend_alwaysCreateEPPMomentShares(void *a1, const char *a2, ...)
{
  return _[a1 alwaysCreateEPPMomentShares];
}

id objc_msgSend_anyObject(void *a1, const char *a2, ...)
{
  return _[a1 anyObject];
}

id objc_msgSend_appendBatch_alreadyMingled_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appendBatch:alreadyMingled:error:");
}

id objc_msgSend_appendBytes_length_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appendBytes:length:");
}

id objc_msgSend_appendData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appendData:");
}

id objc_msgSend_appendFormat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appendFormat:");
}

id objc_msgSend_appendString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appendString:");
}

id objc_msgSend_applicationBundleIdentifierOverrideForContainerAccess(void *a1, const char *a2, ...)
{
  return _[a1 applicationBundleIdentifierOverrideForContainerAccess];
}

id objc_msgSend_applicationBundleIdentifierOverrideForNetworkAttribution(void *a1, const char *a2, ...)
{
  return _[a1 applicationBundleIdentifierOverrideForNetworkAttribution];
}

id objc_msgSend_applyChange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "applyChange:");
}

id objc_msgSend_applyPreviousChangeSessionUpdateWithExpectedLibraryVersion_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "applyPreviousChangeSessionUpdateWithExpectedLibraryVersion:error:");
}

id objc_msgSend_approximativeBlockedInterval(void *a1, const char *a2, ...)
{
  return _[a1 approximativeBlockedInterval];
}

id objc_msgSend_archiveCursor(void *a1, const char *a2, ...)
{
  return _[a1 archiveCursor];
}

id objc_msgSend_archiveFileAtURL_outputFileURL_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "archiveFileAtURL:outputFileURL:error:");
}

id objc_msgSend_archivedDataWithRootObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "archivedDataWithRootObject:");
}

id objc_msgSend_archivedDataWithRootObject_usingBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "archivedDataWithRootObject:usingBlock:");
}

id objc_msgSend_areObjectsDifferentOnProperty_changeType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "areObjectsDifferentOnProperty:changeType:");
}

id objc_msgSend_areSomeUsersExiting(void *a1, const char *a2, ...)
{
  return _[a1 areSomeUsersExiting];
}

id objc_msgSend_array(void *a1, const char *a2, ...)
{
  return _[a1 array];
}

id objc_msgSend_arrayByAddingObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "arrayByAddingObject:");
}

id objc_msgSend_arrayByAddingObjectsFromArray_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "arrayByAddingObjectsFromArray:");
}

id objc_msgSend_arrayForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "arrayForKey:");
}

id objc_msgSend_arrayWithCapacity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "arrayWithCapacity:");
}

id objc_msgSend_arrayWithObjects_count_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "arrayWithObjects:count:");
}

id objc_msgSend_asPlist(void *a1, const char *a2, ...)
{
  return _[a1 asPlist];
}

id objc_msgSend_assertNoUnacknowledgedChanges(void *a1, const char *a2, ...)
{
  return _[a1 assertNoUnacknowledgedChanges];
}

id objc_msgSend_assetContent(void *a1, const char *a2, ...)
{
  return _[a1 assetContent];
}

id objc_msgSend_assetCounts(void *a1, const char *a2, ...)
{
  return _[a1 assetCounts];
}

id objc_msgSend_assetDate(void *a1, const char *a2, ...)
{
  return _[a1 assetDate];
}

id objc_msgSend_assetHDRType(void *a1, const char *a2, ...)
{
  return _[a1 assetHDRType];
}

id objc_msgSend_assetList(void *a1, const char *a2, ...)
{
  return _[a1 assetList];
}

id objc_msgSend_assetListPredicate(void *a1, const char *a2, ...)
{
  return _[a1 assetListPredicate];
}

id objc_msgSend_assetReference(void *a1, const char *a2, ...)
{
  return _[a1 assetReference];
}

id objc_msgSend_assetSortOrder(void *a1, const char *a2, ...)
{
  return _[a1 assetSortOrder];
}

id objc_msgSend_assetSubtype(void *a1, const char *a2, ...)
{
  return _[a1 assetSubtype];
}

id objc_msgSend_assetTransferOptions(void *a1, const char *a2, ...)
{
  return _[a1 assetTransferOptions];
}

id objc_msgSend_assetTransferOptionsByRecordTypeAndKey(void *a1, const char *a2, ...)
{
  return _[a1 assetTransferOptionsByRecordTypeAndKey];
}

id objc_msgSend_associateCloudResource_ofRecord_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "associateCloudResource:ofRecord:");
}

id objc_msgSend_associateMetric_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "associateMetric:");
}

id objc_msgSend_associateWithCompletedOperation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "associateWithCompletedOperation:");
}

id objc_msgSend_associateWithOperation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "associateWithOperation:");
}

id objc_msgSend_associatedOperationDidComplete_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "associatedOperationDidComplete:");
}

id objc_msgSend_attachComputeStates_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "attachComputeStates:completionHandler:");
}

id objc_msgSend_attachObject_withCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "attachObject:withCompletionHandler:");
}

id objc_msgSend_attachToCKOperation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "attachToCKOperation:");
}

id objc_msgSend_attachToCKOperationConfiguration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "attachToCKOperationConfiguration:");
}

id objc_msgSend_attachedDiffTracker(void *a1, const char *a2, ...)
{
  return _[a1 attachedDiffTracker];
}

id objc_msgSend_auditToken(void *a1, const char *a2, ...)
{
  return _[a1 auditToken];
}

id objc_msgSend_autovacuumableSpaceInBytes(void *a1, const char *a2, ...)
{
  return _[a1 autovacuumableSpaceInBytes];
}

id objc_msgSend_auxiliaryOperationDidFinishWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "auxiliaryOperationDidFinishWithError:");
}

id objc_msgSend_awakeFromStorage(void *a1, const char *a2, ...)
{
  return _[a1 awakeFromStorage];
}

id objc_msgSend_backgroundDownloadDidFailForResource_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "backgroundDownloadDidFailForResource:");
}

id objc_msgSend_backgroundDownloadDidFinishForResource_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "backgroundDownloadDidFinishForResource:");
}

id objc_msgSend_base64EncodedStringWithOptions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "base64EncodedStringWithOptions:");
}

id objc_msgSend_baseCKRecord(void *a1, const char *a2, ...)
{
  return _[a1 baseCKRecord];
}

id objc_msgSend_baseConfigurationForTask(void *a1, const char *a2, ...)
{
  return _[a1 baseConfigurationForTask];
}

id objc_msgSend_baseDestinationCKRecordForSourceCKRecord_destinationCKRecordID_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "baseDestinationCKRecordForSourceCKRecord:destinationCKRecordID:error:");
}

id objc_msgSend_baseURL(void *a1, const char *a2, ...)
{
  return _[a1 baseURL];
}

id objc_msgSend_batch(void *a1, const char *a2, ...)
{
  return _[a1 batch];
}

id objc_msgSend_begin(void *a1, const char *a2, ...)
{
  return _[a1 begin];
}

id objc_msgSend_beginChangeSession_withLibraryVersion_resetTracker_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "beginChangeSession:withLibraryVersion:resetTracker:error:");
}

id objc_msgSend_beginClientWork(void *a1, const char *a2, ...)
{
  return _[a1 beginClientWork];
}

id objc_msgSend_beginClientWork_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "beginClientWork:");
}

id objc_msgSend_beginDownloadForResource_clientBundleID_options_proposedTaskIdentifier_completionHandler_( void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "beginDownloadForResource:clientBundleID:options:proposedTaskIdentifier:completionHandler:");
}

id objc_msgSend_beginInMemoryDownloadOfResource_clientBundleID_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "beginInMemoryDownloadOfResource:clientBundleID:completionHandler:");
}

id objc_msgSend_beginPullChangeSessionWithKnownLibraryVersion_resetTracker_completionHandler_( void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "beginPullChangeSessionWithKnownLibraryVersion:resetTracker:completionHandler:");
}

id objc_msgSend_beginPushChangeSessionWithKnownLibraryVersion_resetTracker_completionHandler_( void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "beginPushChangeSessionWithKnownLibraryVersion:resetTracker:completionHandler:");
}

id objc_msgSend_beginRegisteringKnownReschedulerManager(void *a1, const char *a2, ...)
{
  return _[a1 beginRegisteringKnownReschedulerManager];
}

id objc_msgSend_beginTask_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "beginTask:");
}

id objc_msgSend_beginTransactionWithIdentifier_description_keepPower_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "beginTransactionWithIdentifier:description:keepPower:");
}

id objc_msgSend_bestErrorForUnderlyingError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bestErrorForUnderlyingError:");
}

id objc_msgSend_bindValuesToKeepAlive(void *a1, const char *a2, ...)
{
  return _[a1 bindValuesToKeepAlive];
}

id objc_msgSend_bindWithStatement_startingAtIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bindWithStatement:startingAtIndex:");
}

id objc_msgSend_bindableValueForDefaultValue(void *a1, const char *a2, ...)
{
  return _[a1 bindableValueForDefaultValue];
}

id objc_msgSend_bindableValueForValue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bindableValueForValue:");
}

id objc_msgSend_blacklistedFeature(void *a1, const char *a2, ...)
{
  return _[a1 blacklistedFeature];
}

id objc_msgSend_blockEngineElement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "blockEngineElement:");
}

id objc_msgSend_blockEngineWithReason_onlyIfBlocked_block_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "blockEngineWithReason:onlyIfBlocked:block:");
}

id objc_msgSend_blockWithAdaptedQOS_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "blockWithAdaptedQOS:");
}

id objc_msgSend_blockWriteTransactionsWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "blockWriteTransactionsWithCompletionHandler:");
}

id objc_msgSend_blocker(void *a1, const char *a2, ...)
{
  return _[a1 blocker];
}

id objc_msgSend_BOOLAtIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "BOOLAtIndex:");
}

id objc_msgSend_BOOLForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "BOOLForKey:");
}

id objc_msgSend_BOOLValue(void *a1, const char *a2, ...)
{
  return _[a1 BOOLValue];
}

id objc_msgSend_boostPriorityForScopeWithIdentifier_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "boostPriorityForScopeWithIdentifier:completionHandler:");
}

id objc_msgSend_boundaryKey(void *a1, const char *a2, ...)
{
  return _[a1 boundaryKey];
}

id objc_msgSend_bumpPullFromTransportExpirationIntervalWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bumpPullFromTransportExpirationIntervalWithError:");
}

id objc_msgSend_bundleIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 bundleIdentifier];
}

id objc_msgSend_bundleIdentifiers(void *a1, const char *a2, ...)
{
  return _[a1 bundleIdentifiers];
}

id objc_msgSend_burstFlags(void *a1, const char *a2, ...)
{
  return _[a1 burstFlags];
}

id objc_msgSend_burstIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 burstIdentifier];
}

id objc_msgSend_busyStateVar(void *a1, const char *a2, ...)
{
  return _[a1 busyStateVar];
}

id objc_msgSend_bypassQueue(void *a1, const char *a2, ...)
{
  return _[a1 bypassQueue];
}

id objc_msgSend_bytes(void *a1, const char *a2, ...)
{
  return _[a1 bytes];
}

id objc_msgSend_cachedRecordWithID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cachedRecordWithID:");
}

id objc_msgSend_cachedValueForIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cachedValueForIdentifier:");
}

id objc_msgSend_callDidFinish(void *a1, const char *a2, ...)
{
  return _[a1 callDidFinish];
}

id objc_msgSend_callbackOperationDidFinishWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "callbackOperationDidFinishWithError:");
}

id objc_msgSend_cameraWatcherDidChangeState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cameraWatcherDidChangeState:");
}

id objc_msgSend_canAcceptShareWithCloudKit(void *a1, const char *a2, ...)
{
  return _[a1 canAcceptShareWithCloudKit];
}

id objc_msgSend_canActivateScope_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "canActivateScope:error:");
}

id objc_msgSend_canBoostBackgroundOperations(void *a1, const char *a2, ...)
{
  return _[a1 canBoostBackgroundOperations];
}

id objc_msgSend_canBoostOperations(void *a1, const char *a2, ...)
{
  return _[a1 canBoostOperations];
}

id objc_msgSend_canMatchSignatureToFingerprint(void *a1, const char *a2, ...)
{
  return _[a1 canMatchSignatureToFingerprint];
}

id objc_msgSend_cancel(void *a1, const char *a2, ...)
{
  return _[a1 cancel];
}

id objc_msgSend_cancelAllOperations(void *a1, const char *a2, ...)
{
  return _[a1 cancelAllOperations];
}

id objc_msgSend_cancelAllOperationsWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cancelAllOperationsWithCompletionHandler:");
}

id objc_msgSend_cancelConfigurationDictionariesRefresh(void *a1, const char *a2, ...)
{
  return _[a1 cancelConfigurationDictionariesRefresh];
}

id objc_msgSend_cancelCurrentSyncSession(void *a1, const char *a2, ...)
{
  return _[a1 cancelCurrentSyncSession];
}

id objc_msgSend_cancelDownloadTask_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cancelDownloadTask:");
}

id objc_msgSend_cancelTask(void *a1, const char *a2, ...)
{
  return _[a1 cancelTask];
}

id objc_msgSend_cancelTaskRequestWithIdentifier_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cancelTaskRequestWithIdentifier:error:");
}

id objc_msgSend_caption(void *a1, const char *a2, ...)
{
  return _[a1 caption];
}

id objc_msgSend_category(void *a1, const char *a2, ...)
{
  return _[a1 category];
}

id objc_msgSend_center_didReceivePushNotification_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "center:didReceivePushNotification:");
}

id objc_msgSend_changeForType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "changeForType:");
}

id objc_msgSend_changeType(void *a1, const char *a2, ...)
{
  return _[a1 changeType];
}

id objc_msgSend_changeWithScopedIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "changeWithScopedIdentifier:");
}

id objc_msgSend_changeWithSourceRecordID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "changeWithSourceRecordID:");
}

id objc_msgSend_changedKeys(void *a1, const char *a2, ...)
{
  return _[a1 changedKeys];
}

id objc_msgSend_changedKeysSet(void *a1, const char *a2, ...)
{
  return _[a1 changedKeysSet];
}

id objc_msgSend_changes(void *a1, const char *a2, ...)
{
  return _[a1 changes];
}

id objc_msgSend_characterAtIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "characterAtIndex:");
}

id objc_msgSend_characterIsMember_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "characterIsMember:");
}

id objc_msgSend_checkExpectedLibraryVersion_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "checkExpectedLibraryVersion:error:");
}

id objc_msgSend_checkHasBackgroundDownloadOperationsWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "checkHasBackgroundDownloadOperationsWithCompletionHandler:");
}

id objc_msgSend_checkInWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "checkInWithError:");
}

id objc_msgSend_checkOutWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "checkOutWithError:");
}

id objc_msgSend_checkResourcesAreSafeToPrune_checkServerIfNecessary_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "checkResourcesAreSafeToPrune:checkServerIfNecessary:completionHandler:");
}

id objc_msgSend_checkScopeIsValidWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "checkScopeIsValidWithError:");
}

id objc_msgSend_checkServerForResources_targetMapping_transportScopeMapping_completionHandler_( void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "checkServerForResources:targetMapping:transportScopeMapping:completionHandler:");
}

id objc_msgSend_ckAssetProperties(void *a1, const char *a2, ...)
{
  return _[a1 ckAssetProperties];
}

id objc_msgSend_ckKeys(void *a1, const char *a2, ...)
{
  return _[a1 ckKeys];
}

id objc_msgSend_ckPropertyForRelatedIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 ckPropertyForRelatedIdentifier];
}

id objc_msgSend_ckRecordForLibraryShareSettingsWithZoneID_userID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ckRecordForLibraryShareSettingsWithZoneID:userID:");
}

id objc_msgSend_ckRecordIDsToDelete(void *a1, const char *a2, ...)
{
  return _[a1 ckRecordIDsToDelete];
}

id objc_msgSend_ckRecordIDsToShare(void *a1, const char *a2, ...)
{
  return _[a1 ckRecordIDsToShare];
}

id objc_msgSend_ckRecordIDsToUnshare(void *a1, const char *a2, ...)
{
  return _[a1 ckRecordIDsToUnshare];
}

id objc_msgSend_ckRecordsToUpload(void *a1, const char *a2, ...)
{
  return _[a1 ckRecordsToUpload];
}

id objc_msgSend_ckValueForRelatedRecord_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ckValueForRelatedRecord:");
}

id objc_msgSend_classForInitialQueryVar(void *a1, const char *a2, ...)
{
  return _[a1 classForInitialQueryVar];
}

id objc_msgSend_cleanupUnusedUpgradeHistoriesWithUsedBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cleanupUnusedUpgradeHistoriesWithUsedBlock:");
}

id objc_msgSend_clearAllPushPullGatekeepersWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clearAllPushPullGatekeepersWithError:");
}

id objc_msgSend_clearAllQuotaFlagsForMainScopeWithReason_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clearAllQuotaFlagsForMainScopeWithReason:error:");
}

id objc_msgSend_clearFeatureVersions(void *a1, const char *a2, ...)
{
  return _[a1 clearFeatureVersions];
}

id objc_msgSend_clearFeatures(void *a1, const char *a2, ...)
{
  return _[a1 clearFeatures];
}

id objc_msgSend_clearIdentifiers(void *a1, const char *a2, ...)
{
  return _[a1 clearIdentifiers];
}

id objc_msgSend_clientAppBundleIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 clientAppBundleIdentifier];
}

id objc_msgSend_clientBundleID(void *a1, const char *a2, ...)
{
  return _[a1 clientBundleID];
}

id objc_msgSend_clientCache(void *a1, const char *a2, ...)
{
  return _[a1 clientCache];
}

id objc_msgSend_clientCacheIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 clientCacheIdentifier];
}

id objc_msgSend_clientIsForeground(void *a1, const char *a2, ...)
{
  return _[a1 clientIsForeground];
}

id objc_msgSend_clientIsPushingChanges(void *a1, const char *a2, ...)
{
  return _[a1 clientIsPushingChanges];
}

id objc_msgSend_clientLibraryBaseURL(void *a1, const char *a2, ...)
{
  return _[a1 clientLibraryBaseURL];
}

id objc_msgSend_clientProtocolInterface(void *a1, const char *a2, ...)
{
  return _[a1 clientProtocolInterface];
}

id objc_msgSend_clientWorkDescription(void *a1, const char *a2, ...)
{
  return _[a1 clientWorkDescription];
}

id objc_msgSend_close(void *a1, const char *a2, ...)
{
  return _[a1 close];
}

id objc_msgSend_close_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "close:");
}

id objc_msgSend_closeAndDeactivate_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "closeAndDeactivate:completionHandler:");
}

id objc_msgSend_closeWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "closeWithCompletionHandler:");
}

id objc_msgSend_closeWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "closeWithError:");
}

id objc_msgSend_cloudCache(void *a1, const char *a2, ...)
{
  return _[a1 cloudCache];
}

id objc_msgSend_cloudCacheGetDescriptionForRecordWithScopedIdentifier_related_completionHandler_( void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cloudCacheGetDescriptionForRecordWithScopedIdentifier:related:completionHandler:");
}

id objc_msgSend_cloudIndex(void *a1, const char *a2, ...)
{
  return _[a1 cloudIndex];
}

id objc_msgSend_cloudIndexVar(void *a1, const char *a2, ...)
{
  return _[a1 cloudIndexVar];
}

id objc_msgSend_cloudIndexesInjection(void *a1, const char *a2, ...)
{
  return _[a1 cloudIndexesInjection];
}

id objc_msgSend_cloudKitClientIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 cloudKitClientIdentifier];
}

id objc_msgSend_cloudKitRescheduler(void *a1, const char *a2, ...)
{
  return _[a1 cloudKitRescheduler];
}

id objc_msgSend_cloudKitReschedulerManagerForLibraryWithIdentifier_involvedProcesses_relatedApplications_( void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cloudKitReschedulerManagerForLibraryWithIdentifier:involvedProcesses:relatedApplications:");
}

id objc_msgSend_cloudKitScope(void *a1, const char *a2, ...)
{
  return _[a1 cloudKitScope];
}

id objc_msgSend_cloudKitScopeForScopeIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cloudKitScopeForScopeIdentifier:");
}

id objc_msgSend_cloudKitScopeListSyncAnchorWithScopeListSyncAnchor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cloudKitScopeListSyncAnchorWithScopeListSyncAnchor:");
}

id objc_msgSend_cloudLibraryResourceStorageURL(void *a1, const char *a2, ...)
{
  return _[a1 cloudLibraryResourceStorageURL];
}

id objc_msgSend_cloudLibraryStateStorageURL(void *a1, const char *a2, ...)
{
  return _[a1 cloudLibraryStateStorageURL];
}

id objc_msgSend_cloudRecord(void *a1, const char *a2, ...)
{
  return _[a1 cloudRecord];
}

id objc_msgSend_cloudResource(void *a1, const char *a2, ...)
{
  return _[a1 cloudResource];
}

id objc_msgSend_cloudResourceForLocalResource_cloudRecord_target_shouldNotTrustCaches_allowUnsafeClientCache_transportScopeMapping_error_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "cloudResourceForLocalResource:cloudRecord:target:shouldNotTrustCaches:allowUnsafeClientCache:transportScopeMapping:error:");
}

id objc_msgSend_cloudResourceForRecordWithScopedIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cloudResourceForRecordWithScopedIdentifier:");
}

id objc_msgSend_cloudScopeIndexForScopeIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cloudScopeIndexForScopeIdentifier:");
}

id objc_msgSend_cloudScopedIdentifierForLocalScopedIdentifier_isFinal_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cloudScopedIdentifierForLocalScopedIdentifier:isFinal:");
}

id objc_msgSend_code(void *a1, const char *a2, ...)
{
  return _[a1 code];
}

id objc_msgSend_codec(void *a1, const char *a2, ...)
{
  return _[a1 codec];
}

id objc_msgSend_columnDefinition(void *a1, const char *a2, ...)
{
  return _[a1 columnDefinition];
}

id objc_msgSend_commitChangeBatch_withUnderlyingCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "commitChangeBatch:withUnderlyingCompletionHandler:");
}

id objc_msgSend_commitStagedChangesForScopeWithIdentifier_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "commitStagedChangesForScopeWithIdentifier:error:");
}

id objc_msgSend_compactChangeBatchesWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "compactChangeBatchesWithError:");
}

id objc_msgSend_compactFileCacheWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "compactFileCacheWithCompletionHandler:");
}

id objc_msgSend_compactWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "compactWithError:");
}

id objc_msgSend_compactedBatchFromExpandedBatch_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "compactedBatchFromExpandedBatch:");
}

id objc_msgSend_compare_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "compare:");
}

id objc_msgSend_completedUnitCount(void *a1, const char *a2, ...)
{
  return _[a1 completedUnitCount];
}

id objc_msgSend_completionBlock(void *a1, const char *a2, ...)
{
  return _[a1 completionBlock];
}

id objc_msgSend_completionHandler(void *a1, const char *a2, ...)
{
  return _[a1 completionHandler];
}

id objc_msgSend_componentsJoinedByString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "componentsJoinedByString:");
}

id objc_msgSend_componentsSeparatedByString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "componentsSeparatedByString:");
}

id objc_msgSend_componentsWithString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "componentsWithString:");
}

id objc_msgSend_computeDiff(void *a1, const char *a2, ...)
{
  return _[a1 computeDiff];
}

id objc_msgSend_computeExpandedBatchWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "computeExpandedBatchWithError:");
}

id objc_msgSend_computeStateAdjustmentFingerprint(void *a1, const char *a2, ...)
{
  return _[a1 computeStateAdjustmentFingerprint];
}

id objc_msgSend_computeStateVersion(void *a1, const char *a2, ...)
{
  return _[a1 computeStateVersion];
}

id objc_msgSend_configuration(void *a1, const char *a2, ...)
{
  return _[a1 configuration];
}

id objc_msgSend_configurationDictionary(void *a1, const char *a2, ...)
{
  return _[a1 configurationDictionary];
}

id objc_msgSend_configureAssetTransferOptionsForCKAsset_fromReference_scopeProvider_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "configureAssetTransferOptionsForCKAsset:fromReference:scopeProvider:");
}

id objc_msgSend_configureAssetTransferOptionsForCKAsset_scopeProvider_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "configureAssetTransferOptionsForCKAsset:scopeProvider:");
}

id objc_msgSend_configureDirectTransportTask_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "configureDirectTransportTask:");
}

id objc_msgSend_conformsToProtocol_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "conformsToProtocol:");
}

id objc_msgSend_conformsToType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "conformsToType:");
}

id objc_msgSend_contactDescriptor(void *a1, const char *a2, ...)
{
  return _[a1 contactDescriptor];
}

id objc_msgSend_container(void *a1, const char *a2, ...)
{
  return _[a1 container];
}

id objc_msgSend_containerHasBeenWiped(void *a1, const char *a2, ...)
{
  return _[a1 containerHasBeenWiped];
}

id objc_msgSend_containerID(void *a1, const char *a2, ...)
{
  return _[a1 containerID];
}

id objc_msgSend_containerIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 containerIdentifier];
}

id objc_msgSend_containsIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "containsIndex:");
}

id objc_msgSend_containsObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "containsObject:");
}

id objc_msgSend_contextForOperation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "contextForOperation:");
}

id objc_msgSend_controller(void *a1, const char *a2, ...)
{
  return _[a1 controller];
}

id objc_msgSend_coordinate(void *a1, const char *a2, ...)
{
  return _[a1 coordinate];
}

id objc_msgSend_coordinator_provideCKAssetWithRecordID_fieldName_recordType_signature_completionHandler_( void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "coordinator:provideCKAssetWithRecordID:fieldName:recordType:signature:completionHandler:");
}

id objc_msgSend_coordinatorDidReceiveAPushNotification_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "coordinatorDidReceiveAPushNotification:");
}

id objc_msgSend_coordinatorWontBeUsed(void *a1, const char *a2, ...)
{
  return _[a1 coordinatorWontBeUsed];
}

id objc_msgSend_copiedRecordFromSourceRecord_action_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "copiedRecordFromSourceRecord:action:error:");
}

id objc_msgSend_copiedRecordFromSourceRecord_sourceDatabaseScope_toRecordID_helper_action_error_( void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "copiedRecordFromSourceRecord:sourceDatabaseScope:toRecordID:helper:action:error:");
}

id objc_msgSend_copy(void *a1, const char *a2, ...)
{
  return _[a1 copy];
}

id objc_msgSend_copyChangeType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "copyChangeType:");
}

id objc_msgSend_copyContextWithUploadIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "copyContextWithUploadIdentifier:");
}

id objc_msgSend_copyRecordsWithIDs_followRemapping_sourceType_destinationRecordIDs_destinationType_helper_completionHandler_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "copyRecordsWithIDs:followRemapping:sourceType:destinationRecordIDs:destinationType:helper:completionHandler:");
}

id objc_msgSend_copyWithZone_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "copyWithZone:");
}

id objc_msgSend_corruptionInfo(void *a1, const char *a2, ...)
{
  return _[a1 corruptionInfo];
}

id objc_msgSend_count(void *a1, const char *a2, ...)
{
  return _[a1 count];
}

id objc_msgSend_countByEnumeratingWithState_objects_count_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "countByEnumeratingWithState:objects:count:");
}

id objc_msgSend_countForObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "countForObject:");
}

id objc_msgSend_countOfChangesInScopeWithIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "countOfChangesInScopeWithIdentifier:");
}

id objc_msgSend_countOfComputeStates(void *a1, const char *a2, ...)
{
  return _[a1 countOfComputeStates];
}

id objc_msgSend_countOfDownloadTasks(void *a1, const char *a2, ...)
{
  return _[a1 countOfDownloadTasks];
}

id objc_msgSend_countOfOperationClasses(void *a1, const char *a2, ...)
{
  return _[a1 countOfOperationClasses];
}

id objc_msgSend_countOfOperationWithCellularAccessClasses(void *a1, const char *a2, ...)
{
  return _[a1 countOfOperationWithCellularAccessClasses];
}

id objc_msgSend_countOfOriginalImages(void *a1, const char *a2, ...)
{
  return _[a1 countOfOriginalImages];
}

id objc_msgSend_countOfOriginalOthers(void *a1, const char *a2, ...)
{
  return _[a1 countOfOriginalOthers];
}

id objc_msgSend_countOfOriginalVideos(void *a1, const char *a2, ...)
{
  return _[a1 countOfOriginalVideos];
}

id objc_msgSend_countOfQuarantinedRecordsInScopeWithIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "countOfQuarantinedRecordsInScopeWithIdentifier:");
}

id objc_msgSend_countOfQueuedBatches(void *a1, const char *a2, ...)
{
  return _[a1 countOfQueuedBatches];
}

id objc_msgSend_countOfStashedRecords(void *a1, const char *a2, ...)
{
  return _[a1 countOfStashedRecords];
}

id objc_msgSend_countOfUnacknowledgesRecords(void *a1, const char *a2, ...)
{
  return _[a1 countOfUnacknowledgesRecords];
}

id objc_msgSend_countOfUnmingledRecords(void *a1, const char *a2, ...)
{
  return _[a1 countOfUnmingledRecords];
}

id objc_msgSend_countPerFlagsForScopeWithIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "countPerFlagsForScopeWithIdentifier:");
}

id objc_msgSend_course(void *a1, const char *a2, ...)
{
  return _[a1 course];
}

id objc_msgSend_cplChangeAtIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cplChangeAtIndex:");
}

id objc_msgSend_cplCopyCleanAsset(void *a1, const char *a2, ...)
{
  return _[a1 cplCopyCleanAsset];
}

id objc_msgSend_cplCopyItemAtURL_toURL_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cplCopyItemAtURL:toURL:error:");
}

id objc_msgSend_cplDiscretionary(void *a1, const char *a2, ...)
{
  return _[a1 cplDiscretionary];
}

id objc_msgSend_cplEnabledDate(void *a1, const char *a2, ...)
{
  return _[a1 cplEnabledDate];
}

id objc_msgSend_cplErrorCausedBySharedSyncForError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cplErrorCausedBySharedSyncForError:");
}

id objc_msgSend_cplErrorWithCode_description_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cplErrorWithCode:description:");
}

id objc_msgSend_cplErrorWithCode_underlyingError_description_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cplErrorWithCode:underlyingError:description:");
}

id objc_msgSend_cplErrorWithCode_underlyingError_userInfo_description_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cplErrorWithCode:underlyingError:userInfo:description:");
}

id objc_msgSend_cplExecute_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cplExecute:");
}

id objc_msgSend_cplFetch_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cplFetch:");
}

id objc_msgSend_cplFetchObject_sql_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cplFetchObject:sql:");
}

id objc_msgSend_cplFetchObjectOfClass_sql_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cplFetchObjectOfClass:sql:");
}

id objc_msgSend_cplFileExistsAtURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cplFileExistsAtURL:");
}

id objc_msgSend_cplFingerPrint(void *a1, const char *a2, ...)
{
  return _[a1 cplFingerPrint];
}

id objc_msgSend_cplFingerPrintForSignature_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cplFingerPrintForSignature:");
}

id objc_msgSend_cplFullDescription(void *a1, const char *a2, ...)
{
  return _[a1 cplFullDescription];
}

id objc_msgSend_cplInjectionFor_isInIndexSet_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cplInjectionFor:isInIndexSet:");
}

id objc_msgSend_cplInjectionFor_isNotInIndexSet_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cplInjectionFor:isNotInIndexSet:");
}

id objc_msgSend_cplIsFileDoesNotExistError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cplIsFileDoesNotExistError:");
}

id objc_msgSend_cplIsFileExistsError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cplIsFileExistsError:");
}

id objc_msgSend_cplLocationDictionary(void *a1, const char *a2, ...)
{
  return _[a1 cplLocationDictionary];
}

id objc_msgSend_cplMoveItemAtURL_toURL_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cplMoveItemAtURL:toURL:error:");
}

id objc_msgSend_cplNotificationTypeDescription(void *a1, const char *a2, ...)
{
  return _[a1 cplNotificationTypeDescription];
}

id objc_msgSend_cplOperationClassDescription(void *a1, const char *a2, ...)
{
  return _[a1 cplOperationClassDescription];
}

id objc_msgSend_cplPlaceAnnotationDictionary(void *a1, const char *a2, ...)
{
  return _[a1 cplPlaceAnnotationDictionary];
}

id objc_msgSend_cplProperties_areEqualToPropertiesOf_diffTracker_withEqualityBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cplProperties:areEqualToPropertiesOf:diffTracker:withEqualityBlock:");
}

id objc_msgSend_cplReason(void *a1, const char *a2, ...)
{
  return _[a1 cplReason];
}

id objc_msgSend_cplRecordWithName_zonedID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cplRecordWithName:zonedID:");
}

id objc_msgSend_cplRegisterDeterministicFunction_nArgs_handler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cplRegisterDeterministicFunction:nArgs:handler:");
}

id objc_msgSend_cplResourceWithType_scopedIdentifier_forRecord_isCoherent_scopeProvider_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cplResourceWithType:scopedIdentifier:forRecord:isCoherent:scopeProvider:");
}

id objc_msgSend_cplResourcesWithScopedIdentifier_coherent_forRecord_scopeProvider_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cplResourcesWithScopedIdentifier:coherent:forRecord:scopeProvider:");
}

id objc_msgSend_cplSafeErrorForXPC(void *a1, const char *a2, ...)
{
  return _[a1 cplSafeErrorForXPC];
}

id objc_msgSend_cplShouldGenerateDerivatives(void *a1, const char *a2, ...)
{
  return _[a1 cplShouldGenerateDerivatives];
}

id objc_msgSend_cplSyncAnchorDescription(void *a1, const char *a2, ...)
{
  return _[a1 cplSyncAnchorDescription];
}

id objc_msgSend_cplUnderlyingError(void *a1, const char *a2, ...)
{
  return _[a1 cplUnderlyingError];
}

id objc_msgSend_cplUnderlyingPOSIXError(void *a1, const char *a2, ...)
{
  return _[a1 cplUnderlyingPOSIXError];
}

id objc_msgSend_cplValidateAndWarnIntegrityOfResourceData_withFingerPrintKey_andFileSizeKey_fingerprintScheme_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "cplValidateAndWarnIntegrityOfResourceData:withFingerPrintKey:andFileSizeKey:fingerprintScheme:");
}

id objc_msgSend_cpl_archivedDataWithRootObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cpl_archivedDataWithRootObject:");
}

id objc_msgSend_cpl_decryptedObjectForKey_validateClass_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cpl_decryptedObjectForKey:validateClass:");
}

id objc_msgSend_cpl_destinationRecordIDInPrivateScopeWithCurrentUserRecordID_proposedDestinationRecordID_( void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cpl_destinationRecordIDInPrivateScopeWithCurrentUserRecordID:proposedDestinationRecordID:");
}

id objc_msgSend_cpl_expungedRecordFromCPLRecordChange_inZone_target_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cpl_expungedRecordFromCPLRecordChange:inZone:target:");
}

id objc_msgSend_cpl_expungedSharedRecordFromCPLRecordChange_inZone_target_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cpl_expungedSharedRecordFromCPLRecordChange:inZone:target:");
}

id objc_msgSend_cpl_inExpunged(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cpl_inExpunged");
}

id objc_msgSend_cpl_isSparseRecord(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cpl_isSparseRecord");
}

id objc_msgSend_cpl_legacyDecryptedObjectForKey_validateClass_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cpl_legacyDecryptedObjectForKey:validateClass:");
}

id objc_msgSend_cpl_objectForKey_validateClass_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cpl_objectForKey:validateClass:");
}

id objc_msgSend_cpl_recordChangeClassForRecordType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cpl_recordChangeClassForRecordType:");
}

id objc_msgSend_cpl_recordChangeMissingResourceProperties_scopeIdentifier_scopeProvider_currentUserRecordID_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "cpl_recordChangeMissingResourceProperties:scopeIdentifier:scopeProvider:currentUserRecordID:");
}

id objc_msgSend_cpl_redactedShareURL(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cpl_redactedShareURL");
}

id objc_msgSend_cpl_safeUnarchiveObjectWithData_class_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cpl_safeUnarchiveObjectWithData:class:");
}

id objc_msgSend_cpl_safeUnarchiveObjectWithData_classes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cpl_safeUnarchiveObjectWithData:classes:");
}

id objc_msgSend_cpl_scopedIdentifierWithScopeIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cpl_scopedIdentifierWithScopeIdentifier:");
}

id objc_msgSend_cpl_setEncryptedObject_forKey_validateClass_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cpl_setEncryptedObject:forKey:validateClass:");
}

id objc_msgSend_cpl_setLegacyEncryptedObject_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cpl_setLegacyEncryptedObject:forKey:");
}

id objc_msgSend_cpl_setTask_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cpl_setTask:");
}

id objc_msgSend_cpl_sharingRecordScopedIdentifierWithScopeProvider_currentUserRecordID_isSparseRecord_( void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cpl_sharingRecordScopedIdentifierWithScopeProvider:currentUserRecordID:isSparseRecord:");
}

id objc_msgSend_cpl_task(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cpl_task");
}

id objc_msgSend_cpl_updateContributorsOnSharedRecord_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cpl_updateContributorsOnSharedRecord:");
}

id objc_msgSend_cpl_updatePrivateRecordSharedToRecordWithID_currentUserRecordID_setSparseRecordFlag_force_( void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cpl_updatePrivateRecordSharedToRecordWithID:currentUserRecordID:setSparseRecordFlag:force:");
}

id objc_msgSend_cpl_validObjectForKey_class_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cpl_validObjectForKey:class:");
}

id objc_msgSend_cpl_zoneName(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cpl_zoneName");
}

id objc_msgSend_createCloudKitReschedulerIfNecessary(void *a1, const char *a2, ...)
{
  return _[a1 createCloudKitReschedulerIfNecessary];
}

id objc_msgSend_createDirectoryAtURL_withIntermediateDirectories_attributes_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createDirectoryAtURL:withIntermediateDirectories:attributes:error:");
}

id objc_msgSend_createGroupAllowsCellular_allowsExpensiveNetwork_foreground_upload_metadata_( void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createGroupAllowsCellular:allowsExpensiveNetwork:foreground:upload:metadata:");
}

id objc_msgSend_createGroupForAcceptingLibraryShare(void *a1, const char *a2, ...)
{
  return _[a1 createGroupForAcceptingLibraryShare];
}

id objc_msgSend_createGroupForAcceptingMomentShare(void *a1, const char *a2, ...)
{
  return _[a1 createGroupForAcceptingMomentShare];
}

id objc_msgSend_createGroupForAnalysisDownload(void *a1, const char *a2, ...)
{
  return _[a1 createGroupForAnalysisDownload];
}

id objc_msgSend_createGroupForComputeStateDownloadOnDemand(void *a1, const char *a2, ...)
{
  return _[a1 createGroupForComputeStateDownloadOnDemand];
}

id objc_msgSend_createGroupForComputeStateDownloadPrefetch(void *a1, const char *a2, ...)
{
  return _[a1 createGroupForComputeStateDownloadPrefetch];
}

id objc_msgSend_createGroupForExitSharedLibrary(void *a1, const char *a2, ...)
{
  return _[a1 createGroupForExitSharedLibrary];
}

id objc_msgSend_createGroupForFeedback(void *a1, const char *a2, ...)
{
  return _[a1 createGroupForFeedback];
}

id objc_msgSend_createGroupForFetchingExistingSharedScope(void *a1, const char *a2, ...)
{
  return _[a1 createGroupForFetchingExistingSharedScope];
}

id objc_msgSend_createGroupForFetchingLibraryShare(void *a1, const char *a2, ...)
{
  return _[a1 createGroupForFetchingLibraryShare];
}

id objc_msgSend_createGroupForFetchingMomentShare(void *a1, const char *a2, ...)
{
  return _[a1 createGroupForFetchingMomentShare];
}

id objc_msgSend_createGroupForMovieStreamingWithIntent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createGroupForMovieStreamingWithIntent:");
}

id objc_msgSend_createGroupForPruningCheck(void *a1, const char *a2, ...)
{
  return _[a1 createGroupForPruningCheck];
}

id objc_msgSend_createGroupForPublishingLibraryShare(void *a1, const char *a2, ...)
{
  return _[a1 createGroupForPublishingLibraryShare];
}

id objc_msgSend_createGroupForPublishingMomentShare(void *a1, const char *a2, ...)
{
  return _[a1 createGroupForPublishingMomentShare];
}

id objc_msgSend_createGroupForQueryUserIdentities(void *a1, const char *a2, ...)
{
  return _[a1 createGroupForQueryUserIdentities];
}

id objc_msgSend_createGroupForSendExitStatus(void *a1, const char *a2, ...)
{
  return _[a1 createGroupForSendExitStatus];
}

id objc_msgSend_createGroupForSetup(void *a1, const char *a2, ...)
{
  return _[a1 createGroupForSetup];
}

id objc_msgSend_createGroupForSharedLibraryRampCheck(void *a1, const char *a2, ...)
{
  return _[a1 createGroupForSharedLibraryRampCheck];
}

id objc_msgSend_createGroupForTransportScopeDelete(void *a1, const char *a2, ...)
{
  return _[a1 createGroupForTransportScopeDelete];
}

id objc_msgSend_createGroupForTransportScopeRefresh(void *a1, const char *a2, ...)
{
  return _[a1 createGroupForTransportScopeRefresh];
}

id objc_msgSend_createIndex_withDefinition_condition_unique_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createIndex:withDefinition:condition:unique:error:");
}

id objc_msgSend_createIndexOnColumn_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createIndexOnColumn:error:");
}

id objc_msgSend_createIndexOnColumnVariable_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createIndexOnColumnVariable:error:");
}

id objc_msgSend_createIndexWithName_withDefinition_condition_unique_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createIndexWithName:withDefinition:condition:unique:error:");
}

id objc_msgSend_createIndexWithName_withDefinition_unique_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createIndexWithName:withDefinition:unique:error:");
}

id objc_msgSend_createLibraryWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createLibraryWithError:");
}

id objc_msgSend_createMainTableWithColumnVariables_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createMainTableWithColumnVariables:error:");
}

id objc_msgSend_createMainTableWithDefinition_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createMainTableWithDefinition:error:");
}

id objc_msgSend_createNewClientCacheIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 createNewClientCacheIdentifier];
}

id objc_msgSend_createNewLibraryVersion(void *a1, const char *a2, ...)
{
  return _[a1 createNewLibraryVersion];
}

id objc_msgSend_createNewTempDownloadFolderWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createNewTempDownloadFolderWithError:");
}

id objc_msgSend_createRadarURL(void *a1, const char *a2, ...)
{
  return _[a1 createRadarURL];
}

id objc_msgSend_createRecordZoneWithID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createRecordZoneWithID:");
}

id objc_msgSend_createReschedulerForSession_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createReschedulerForSession:");
}

id objc_msgSend_createScope_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createScope:completionHandler:");
}

id objc_msgSend_createScopeTaskForScope_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createScopeTaskForScope:completionHandler:");
}

id objc_msgSend_createScopeWithIdentifier_scopeType_flags_transportScope_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createScopeWithIdentifier:scopeType:flags:transportScope:error:");
}

id objc_msgSend_createStorage(void *a1, const char *a2, ...)
{
  return _[a1 createStorage];
}

id objc_msgSend_createVariable_defaultValue_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createVariable:defaultValue:error:");
}

id objc_msgSend_creationDate(void *a1, const char *a2, ...)
{
  return _[a1 creationDate];
}

id objc_msgSend_creationDateForScope_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "creationDateForScope:");
}

id objc_msgSend_creationDateVar(void *a1, const char *a2, ...)
{
  return _[a1 creationDateVar];
}

id objc_msgSend_currentActivity(void *a1, const char *a2, ...)
{
  return _[a1 currentActivity];
}

id objc_msgSend_currentClosingComponentName(void *a1, const char *a2, ...)
{
  return _[a1 currentClosingComponentName];
}

id objc_msgSend_currentFeatureVersion(void *a1, const char *a2, ...)
{
  return _[a1 currentFeatureVersion];
}

id objc_msgSend_currentFetchRecordZoneChangesOperation(void *a1, const char *a2, ...)
{
  return _[a1 currentFetchRecordZoneChangesOperation];
}

id objc_msgSend_currentHandler(void *a1, const char *a2, ...)
{
  return _[a1 currentHandler];
}

id objc_msgSend_currentOperation(void *a1, const char *a2, ...)
{
  return _[a1 currentOperation];
}

id objc_msgSend_currentPlatform(void *a1, const char *a2, ...)
{
  return _[a1 currentPlatform];
}

id objc_msgSend_currentPrediction(void *a1, const char *a2, ...)
{
  return _[a1 currentPrediction];
}

id objc_msgSend_currentProgress(void *a1, const char *a2, ...)
{
  return _[a1 currentProgress];
}

id objc_msgSend_currentRunLoop(void *a1, const char *a2, ...)
{
  return _[a1 currentRunLoop];
}

id objc_msgSend_currentServerChangeToken(void *a1, const char *a2, ...)
{
  return _[a1 currentServerChangeToken];
}

id objc_msgSend_currentSession(void *a1, const char *a2, ...)
{
  return _[a1 currentSession];
}

id objc_msgSend_currentTracker(void *a1, const char *a2, ...)
{
  return _[a1 currentTracker];
}

id objc_msgSend_currentUserID(void *a1, const char *a2, ...)
{
  return _[a1 currentUserID];
}

id objc_msgSend_currentUserParticipant(void *a1, const char *a2, ...)
{
  return _[a1 currentUserParticipant];
}

id objc_msgSend_currentUserRecordID(void *a1, const char *a2, ...)
{
  return _[a1 currentUserRecordID];
}

id objc_msgSend_cursorData(void *a1, const char *a2, ...)
{
  return _[a1 cursorData];
}

id objc_msgSend_customRenderedValue(void *a1, const char *a2, ...)
{
  return _[a1 customRenderedValue];
}

id objc_msgSend_customTitle(void *a1, const char *a2, ...)
{
  return _[a1 customTitle];
}

id objc_msgSend_customUserAssetList(void *a1, const char *a2, ...)
{
  return _[a1 customUserAssetList];
}

id objc_msgSend_daemonLibraryManager_engineWrapperWithClientLibraryBaseURL_cloudLibraryStateStorageURL_cloudLibraryResourceStorageURL_libraryIdentifier_mainScopeIdentifier_options_error_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "daemonLibraryManager:engineWrapperWithClientLibraryBaseURL:cloudLibraryStateStorageURL:cloudLibraryResourceSt orageURL:libraryIdentifier:mainScopeIdentifier:options:error:");
}

id objc_msgSend_daemonLibraryManager_wantsToExitAfterResettingParametersForLibraryWithIdentifier_( void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "daemonLibraryManager:wantsToExitAfterResettingParametersForLibraryWithIdentifier:");
}

id objc_msgSend_daemonLibraryManagerHasBeenDisconnected_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "daemonLibraryManagerHasBeenDisconnected:");
}

id objc_msgSend_daemonLibraryManagerOtherLibraryManager_withLibraryIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "daemonLibraryManagerOtherLibraryManager:withLibraryIdentifier:");
}

id objc_msgSend_daemonLibraryManagerWantsToExitNow_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "daemonLibraryManagerWantsToExitNow:");
}

id objc_msgSend_daemonProtocolInterface(void *a1, const char *a2, ...)
{
  return _[a1 daemonProtocolInterface];
}

id objc_msgSend_data(void *a1, const char *a2, ...)
{
  return _[a1 data];
}

id objc_msgSend_dataAtIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dataAtIndex:");
}

id objc_msgSend_dataClassType(void *a1, const char *a2, ...)
{
  return _[a1 dataClassType];
}

id objc_msgSend_dataRepresentationWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dataRepresentationWithError:");
}

id objc_msgSend_dataType(void *a1, const char *a2, ...)
{
  return _[a1 dataType];
}

id objc_msgSend_dataUsingEncoding_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dataUsingEncoding:");
}

id objc_msgSend_dataWithContentsOfURL_options_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dataWithContentsOfURL:options:error:");
}

id objc_msgSend_dataWithPropertyList_format_options_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dataWithPropertyList:format:options:error:");
}

id objc_msgSend_database(void *a1, const char *a2, ...)
{
  return _[a1 database];
}

id objc_msgSend_databaseForOperationType_relativeToOperationType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "databaseForOperationType:relativeToOperationType:");
}

id objc_msgSend_databaseScope(void *a1, const char *a2, ...)
{
  return _[a1 databaseScope];
}

id objc_msgSend_date(void *a1, const char *a2, ...)
{
  return _[a1 date];
}

id objc_msgSend_dateByAddingTimeInterval_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dateByAddingTimeInterval:");
}

id objc_msgSend_dateType(void *a1, const char *a2, ...)
{
  return _[a1 dateType];
}

id objc_msgSend_dateWithTimeIntervalSinceNow_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dateWithTimeIntervalSinceNow:");
}

id objc_msgSend_dateWithTimeIntervalSinceReferenceDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dateWithTimeIntervalSinceReferenceDate:");
}

id objc_msgSend_dbHandle(void *a1, const char *a2, ...)
{
  return _[a1 dbHandle];
}

id objc_msgSend_deactivateMarkerURL(void *a1, const char *a2, ...)
{
  return _[a1 deactivateMarkerURL];
}

id objc_msgSend_deactivateScopeWithIdentifier_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deactivateScopeWithIdentifier:completionHandler:");
}

id objc_msgSend_deactivateWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deactivateWithCompletionHandler:");
}

id objc_msgSend_decodeBoolForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "decodeBoolForKey:");
}

id objc_msgSend_decodeIntegerForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "decodeIntegerForKey:");
}

id objc_msgSend_decodeObjectOfClass_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "decodeObjectOfClass:forKey:");
}

id objc_msgSend_decodeObjectOfClasses_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "decodeObjectOfClasses:forKey:");
}

id objc_msgSend_decryptFileAtURL_outputFileURL_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "decryptFileAtURL:outputFileURL:error:");
}

id objc_msgSend_defaultCenter(void *a1, const char *a2, ...)
{
  return _[a1 defaultCenter];
}

id objc_msgSend_defaultConfiguration(void *a1, const char *a2, ...)
{
  return _[a1 defaultConfiguration];
}

id objc_msgSend_defaultFlags(void *a1, const char *a2, ...)
{
  return _[a1 defaultFlags];
}

id objc_msgSend_defaultManager(void *a1, const char *a2, ...)
{
  return _[a1 defaultManager];
}

id objc_msgSend_defaultOptions(void *a1, const char *a2, ...)
{
  return _[a1 defaultOptions];
}

id objc_msgSend_defaultSourceBundleIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 defaultSourceBundleIdentifier];
}

id objc_msgSend_defaultSupportedLibraryIdentifiers(void *a1, const char *a2, ...)
{
  return _[a1 defaultSupportedLibraryIdentifiers];
}

id objc_msgSend_defaultValue(void *a1, const char *a2, ...)
{
  return _[a1 defaultValue];
}

id objc_msgSend_defaultValueForNull(void *a1, const char *a2, ...)
{
  return _[a1 defaultValueForNull];
}

id objc_msgSend_defaultWorkspace(void *a1, const char *a2, ...)
{
  return _[a1 defaultWorkspace];
}

id objc_msgSend_deferWithBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deferWithBlock:");
}

id objc_msgSend_definitionInjection(void *a1, const char *a2, ...)
{
  return _[a1 definitionInjection];
}

id objc_msgSend_delegate(void *a1, const char *a2, ...)
{
  return _[a1 delegate];
}

id objc_msgSend_deleteChangeWithScopedIdentifier_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deleteChangeWithScopedIdentifier:error:");
}

id objc_msgSend_deleteIncomingDownloadFolderWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deleteIncomingDownloadFolderWithError:");
}

id objc_msgSend_deleteMingledRecordsForScopeWithIdentifier_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deleteMingledRecordsForScopeWithIdentifier:error:");
}

id objc_msgSend_deleteResources_checkServerIfNecessary_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deleteResources:checkServerIfNecessary:completionHandler:");
}

id objc_msgSend_deleteScopeWithIdentifier_forced_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deleteScopeWithIdentifier:forced:completionHandler:");
}

id objc_msgSend_deleteTransportScope_scope_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deleteTransportScope:scope:completionHandler:");
}

id objc_msgSend_deletes(void *a1, const char *a2, ...)
{
  return _[a1 deletes];
}

id objc_msgSend_dequeueOrder(void *a1, const char *a2, ...)
{
  return _[a1 dequeueOrder];
}

id objc_msgSend_deregisterTaskWithIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deregisterTaskWithIdentifier:");
}

id objc_msgSend_derivativesCache(void *a1, const char *a2, ...)
{
  return _[a1 derivativesCache];
}

id objc_msgSend_description(void *a1, const char *a2, ...)
{
  return _[a1 description];
}

id objc_msgSend_descriptionForBudgets_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "descriptionForBudgets:");
}

id objc_msgSend_descriptionForBusyState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "descriptionForBusyState:");
}

id objc_msgSend_descriptionForChangeType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "descriptionForChangeType:");
}

id objc_msgSend_descriptionForCloudKitScopeOptions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "descriptionForCloudKitScopeOptions:");
}

id objc_msgSend_descriptionForDirection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "descriptionForDirection:");
}

id objc_msgSend_descriptionForExitState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "descriptionForExitState:");
}

id objc_msgSend_descriptionForFlags_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "descriptionForFlags:");
}

id objc_msgSend_descriptionForIntent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "descriptionForIntent:");
}

id objc_msgSend_descriptionForPhase_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "descriptionForPhase:");
}

id objc_msgSend_descriptionForScopeType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "descriptionForScopeType:");
}

id objc_msgSend_descriptionForTaskType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "descriptionForTaskType:");
}

id objc_msgSend_descriptionWithScopeIdentifier_identifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "descriptionWithScopeIdentifier:identifier:");
}

id objc_msgSend_destinationRecord(void *a1, const char *a2, ...)
{
  return _[a1 destinationRecord];
}

id objc_msgSend_destinationZoneIdentification(void *a1, const char *a2, ...)
{
  return _[a1 destinationZoneIdentification];
}

id objc_msgSend_destinationresourceTypeFromShortDescription_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "destinationresourceTypeFromShortDescription:");
}

id objc_msgSend_detachFromCKOperation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "detachFromCKOperation:");
}

id objc_msgSend_detachObject_withCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "detachObject:withCompletionHandler:");
}

id objc_msgSend_detachedActivity(void *a1, const char *a2, ...)
{
  return _[a1 detachedActivity];
}

id objc_msgSend_detectionType(void *a1, const char *a2, ...)
{
  return _[a1 detectionType];
}

id objc_msgSend_dictionary(void *a1, const char *a2, ...)
{
  return _[a1 dictionary];
}

id objc_msgSend_dictionaryForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dictionaryForKey:");
}

id objc_msgSend_dictionaryRepresentation(void *a1, const char *a2, ...)
{
  return _[a1 dictionaryRepresentation];
}

id objc_msgSend_dictionaryWithContentsOfURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dictionaryWithContentsOfURL:");
}

id objc_msgSend_dictionaryWithDictionary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dictionaryWithDictionary:");
}

id objc_msgSend_dictionaryWithObjects_forKeys_count_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dictionaryWithObjects:forKeys:count:");
}

id objc_msgSend_didAcquire(void *a1, const char *a2, ...)
{
  return _[a1 didAcquire];
}

id objc_msgSend_didAcquireTaskWithIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didAcquireTaskWithIdentifier:");
}

id objc_msgSend_didCancel(void *a1, const char *a2, ...)
{
  return _[a1 didCancel];
}

id objc_msgSend_didCancelTaskWithIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didCancelTaskWithIdentifier:");
}

id objc_msgSend_didDefer(void *a1, const char *a2, ...)
{
  return _[a1 didDefer];
}

id objc_msgSend_didDeferTaskWithIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didDeferTaskWithIdentifier:");
}

id objc_msgSend_didError(void *a1, const char *a2, ...)
{
  return _[a1 didError];
}

id objc_msgSend_didErrorTaskWithIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didErrorTaskWithIdentifier:");
}

id objc_msgSend_didExpire(void *a1, const char *a2, ...)
{
  return _[a1 didExpire];
}

id objc_msgSend_didExpireTaskWithIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didExpireTaskWithIdentifier:");
}

id objc_msgSend_didFetchPrivateCKRecord_forRecordWithRecordID_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didFetchPrivateCKRecord:forRecordWithRecordID:error:");
}

id objc_msgSend_didFetchRecordWithID_record_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didFetchRecordWithID:record:");
}

id objc_msgSend_didFetchSharedCKRecord_forRecordWithRecordID_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didFetchSharedCKRecord:forRecordWithRecordID:error:");
}

id objc_msgSend_didFinish(void *a1, const char *a2, ...)
{
  return _[a1 didFinish];
}

id objc_msgSend_didFinishExecutingPlanWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didFinishExecutingPlanWithError:");
}

id objc_msgSend_didFinishTaskWithIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didFinishTaskWithIdentifier:");
}

id objc_msgSend_didFinishUploadOfRecordsWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didFinishUploadOfRecordsWithError:");
}

id objc_msgSend_didFinishUploadOfSharedRecordsWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didFinishUploadOfSharedRecordsWithError:");
}

id objc_msgSend_didModifyRecordWithID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didModifyRecordWithID:");
}

id objc_msgSend_didStartHandler(void *a1, const char *a2, ...)
{
  return _[a1 didStartHandler];
}

id objc_msgSend_didSubmit(void *a1, const char *a2, ...)
{
  return _[a1 didSubmit];
}

id objc_msgSend_didSubmitTaskWithIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didSubmitTaskWithIdentifier:");
}

id objc_msgSend_diffedBatch(void *a1, const char *a2, ...)
{
  return _[a1 diffedBatch];
}

id objc_msgSend_diffedBatchCanLowerQuota(void *a1, const char *a2, ...)
{
  return _[a1 diffedBatchCanLowerQuota];
}

id objc_msgSend_differingProperties(void *a1, const char *a2, ...)
{
  return _[a1 differingProperties];
}

id objc_msgSend_disableMainScopeWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "disableMainScopeWithCompletionHandler:");
}

id objc_msgSend_disableMingling(void *a1, const char *a2, ...)
{
  return _[a1 disableMingling];
}

id objc_msgSend_disableSynchronizationWithReason_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "disableSynchronizationWithReason:");
}

id objc_msgSend_disabledDate(void *a1, const char *a2, ...)
{
  return _[a1 disabledDate];
}

id objc_msgSend_disabledFeatures(void *a1, const char *a2, ...)
{
  return _[a1 disabledFeatures];
}

id objc_msgSend_discardCachedValue(void *a1, const char *a2, ...)
{
  return _[a1 discardCachedValue];
}

id objc_msgSend_discardResource_currentlyStoredResource_lastReference_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "discardResource:currentlyStoredResource:lastReference:error:");
}

id objc_msgSend_discardResource_discardedResource_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "discardResource:discardedResource:error:");
}

id objc_msgSend_discardTentativeResetReason(void *a1, const char *a2, ...)
{
  return _[a1 discardTentativeResetReason];
}

id objc_msgSend_discardTentativeResetReason_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "discardTentativeResetReason:");
}

id objc_msgSend_discardTracker_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "discardTracker:");
}

id objc_msgSend_discretionaryNetworkBehavior(void *a1, const char *a2, ...)
{
  return _[a1 discretionaryNetworkBehavior];
}

id objc_msgSend_dispatchAfter_block_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dispatchAfter:block:");
}

id objc_msgSend_dispatchAsync_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dispatchAsync:");
}

id objc_msgSend_dispatchCallback_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dispatchCallback:");
}

id objc_msgSend_dispatchCallbackOperation_progress_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dispatchCallbackOperation:progress:");
}

id objc_msgSend_dispatchSynchronousWork_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dispatchSynchronousWork:");
}

id objc_msgSend_displayName(void *a1, const char *a2, ...)
{
  return _[a1 displayName];
}

id objc_msgSend_displayableNameForEngineLibrary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "displayableNameForEngineLibrary:");
}

id objc_msgSend_displayableNameForLibraryManager_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "displayableNameForLibraryManager:");
}

id objc_msgSend_displayablePropertyListWithRootObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "displayablePropertyListWithRootObject:");
}

id objc_msgSend_distantPast(void *a1, const char *a2, ...)
{
  return _[a1 distantPast];
}

id objc_msgSend_do_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "do:");
}

id objc_msgSend_doScopesNeedMetadataSync_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "doScopesNeedMetadataSync:");
}

id objc_msgSend_doesRecordClassSupportSparseRecords_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "doesRecordClassSupportSparseRecords:");
}

id objc_msgSend_doesScopeNeedToPullChangesFromTransport_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "doesScopeNeedToPullChangesFromTransport:");
}

id objc_msgSend_domain(void *a1, const char *a2, ...)
{
  return _[a1 domain];
}

id objc_msgSend_doubleForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "doubleForKey:");
}

id objc_msgSend_doubleValue(void *a1, const char *a2, ...)
{
  return _[a1 doubleValue];
}

id objc_msgSend_downloadComputeStatesWithScopedIdentifiers_scope_sharedScope_targetStorageURL_transportScopeMapping_completionHandler_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "downloadComputeStatesWithScopedIdentifiers:scope:sharedScope:targetStorageURL:transportScopeMapping:completionHandler:");
}

id objc_msgSend_downloadDidFinishForResourceTransferTask_finalResource_withError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "downloadDidFinishForResourceTransferTask:finalResource:withError:");
}

id objc_msgSend_downloadDidProgress_forResourceTransferTask_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "downloadDidProgress:forResourceTransferTask:");
}

id objc_msgSend_downloadDidStartForResourceTransferTask_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "downloadDidStartForResourceTransferTask:");
}

id objc_msgSend_downloadOperationWithRecordIDsAndTasks_keys_downloadType_perRecordProgressBlock_perRecordCompletionBlock_completionBlock_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "downloadOperationWithRecordIDsAndTasks:keys:downloadType:perRecordProgressBlock:perRecordCompletionBlock:completionBlock:");
}

id objc_msgSend_downloadProgress(void *a1, const char *a2, ...)
{
  return _[a1 downloadProgress];
}

id objc_msgSend_downloadQueue(void *a1, const char *a2, ...)
{
  return _[a1 downloadQueue];
}

id objc_msgSend_downloadSize(void *a1, const char *a2, ...)
{
  return _[a1 downloadSize];
}

id objc_msgSend_downloadTaskForLocalResource_clientBundleID_options_proposedTaskIdentifier_didStartHandler_progressHandler_completionHandler_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "downloadTaskForLocalResource:clientBundleID:options:proposedTaskIdentifier:didStartHandler:progressHandler:co mpletionHandler:");
}

id objc_msgSend_downloadTransportGroupVar(void *a1, const char *a2, ...)
{
  return _[a1 downloadTransportGroupVar];
}

id objc_msgSend_downloadURL(void *a1, const char *a2, ...)
{
  return _[a1 downloadURL];
}

id objc_msgSend_downloadURLExpiration(void *a1, const char *a2, ...)
{
  return _[a1 downloadURLExpiration];
}

id objc_msgSend_downloadedItemCount(void *a1, const char *a2, ...)
{
  return _[a1 downloadedItemCount];
}

id objc_msgSend_downloadedSize(void *a1, const char *a2, ...)
{
  return _[a1 downloadedSize];
}

id objc_msgSend_dropBackgroundActivityRequest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dropBackgroundActivityRequest:");
}

id objc_msgSend_dropCloudKitReschedulerManagerForLibraryWithIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dropCloudKitReschedulerManagerForLibraryWithIdentifier:");
}

id objc_msgSend_dropExpungedResources_withExpungeableResourceStates_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dropExpungedResources:withExpungeableResourceStates:");
}

id objc_msgSend_dropIndexWithName_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dropIndexWithName:error:");
}

id objc_msgSend_dropPersistedInitialSyncSession(void *a1, const char *a2, ...)
{
  return _[a1 dropPersistedInitialSyncSession];
}

id objc_msgSend_dropResourceForUpload_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dropResourceForUpload:error:");
}

id objc_msgSend_dropTaskRequest_forRescheduler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dropTaskRequest:forRescheduler:");
}

id objc_msgSend_dropUnacknowledgedBatch(void *a1, const char *a2, ...)
{
  return _[a1 dropUnacknowledgedBatch];
}

id objc_msgSend_droppedSomeRecordsVar(void *a1, const char *a2, ...)
{
  return _[a1 droppedSomeRecordsVar];
}

id objc_msgSend_duetStatuses(void *a1, const char *a2, ...)
{
  return _[a1 duetStatuses];
}

id objc_msgSend_duetTicketProvider(void *a1, const char *a2, ...)
{
  return _[a1 duetTicketProvider];
}

id objc_msgSend_duration(void *a1, const char *a2, ...)
{
  return _[a1 duration];
}

id objc_msgSend_durationInNanoSeconds(void *a1, const char *a2, ...)
{
  return _[a1 durationInNanoSeconds];
}

id objc_msgSend_earliestReasonDate(void *a1, const char *a2, ...)
{
  return _[a1 earliestReasonDate];
}

id objc_msgSend_effectiveResourceSizeToUploadUsingStorage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "effectiveResourceSizeToUploadUsingStorage:");
}

id objc_msgSend_email(void *a1, const char *a2, ...)
{
  return _[a1 email];
}

id objc_msgSend_emailAddress(void *a1, const char *a2, ...)
{
  return _[a1 emailAddress];
}

id objc_msgSend_emergencyClose(void *a1, const char *a2, ...)
{
  return _[a1 emergencyClose];
}

id objc_msgSend_emergencyExitForWrapperArray_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "emergencyExitForWrapperArray:");
}

id objc_msgSend_emergencyStop(void *a1, const char *a2, ...)
{
  return _[a1 emergencyStop];
}

id objc_msgSend_enableMainScopeWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enableMainScopeWithCompletionHandler:");
}

id objc_msgSend_enableMingling(void *a1, const char *a2, ...)
{
  return _[a1 enableMingling];
}

id objc_msgSend_enableSynchronizationWithReason_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enableSynchronizationWithReason:");
}

id objc_msgSend_enableTransactions(void *a1, const char *a2, ...)
{
  return _[a1 enableTransactions];
}

id objc_msgSend_enableTurboMode(void *a1, const char *a2, ...)
{
  return _[a1 enableTurboMode];
}

id objc_msgSend_enabledTopics(void *a1, const char *a2, ...)
{
  return _[a1 enabledTopics];
}

id objc_msgSend_encodeBool_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "encodeBool:forKey:");
}

id objc_msgSend_encodeInteger_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "encodeInteger:forKey:");
}

id objc_msgSend_encodeObject_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "encodeObject:forKey:");
}

id objc_msgSend_encodeWithCoder_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "encodeWithCoder:");
}

id objc_msgSend_encryptFileAtURL_outputFileURL_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "encryptFileAtURL:outputFileURL:error:");
}

id objc_msgSend_encryptedValueStore(void *a1, const char *a2, ...)
{
  return _[a1 encryptedValueStore];
}

id objc_msgSend_encryptedValues(void *a1, const char *a2, ...)
{
  return _[a1 encryptedValues];
}

id objc_msgSend_end(void *a1, const char *a2, ...)
{
  return _[a1 end];
}

id objc_msgSend_endClientWork(void *a1, const char *a2, ...)
{
  return _[a1 endClientWork];
}

id objc_msgSend_endClientWork_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "endClientWork:");
}

id objc_msgSend_endDate(void *a1, const char *a2, ...)
{
  return _[a1 endDate];
}

id objc_msgSend_endRegisteringKnownReschedulerManagers(void *a1, const char *a2, ...)
{
  return _[a1 endRegisteringKnownReschedulerManagers];
}

id objc_msgSend_endTask_withOperationClasses_operationsAllowingCellular_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "endTask:withOperationClasses:operationsAllowingCellular:");
}

id objc_msgSend_endTransactionWithIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "endTransactionWithIdentifier:");
}

id objc_msgSend_engine(void *a1, const char *a2, ...)
{
  return _[a1 engine];
}

id objc_msgSend_engineIsClosing(void *a1, const char *a2, ...)
{
  return _[a1 engineIsClosing];
}

id objc_msgSend_engineLibrary(void *a1, const char *a2, ...)
{
  return _[a1 engineLibrary];
}

id objc_msgSend_engineScope(void *a1, const char *a2, ...)
{
  return _[a1 engineScope];
}

id objc_msgSend_engineStore(void *a1, const char *a2, ...)
{
  return _[a1 engineStore];
}

id objc_msgSend_engineWrapper(void *a1, const char *a2, ...)
{
  return _[a1 engineWrapper];
}

id objc_msgSend_enumerateAllZonesWithBlock_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumerateAllZonesWithBlock:completionHandler:");
}

id objc_msgSend_enumerateChangesWithBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumerateChangesWithBlock:");
}

id objc_msgSend_enumerateConcreteScopesWithBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumerateConcreteScopesWithBlock:");
}

id objc_msgSend_enumerateDaemonLibraryManagersWithLibraryIdentifier_block_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumerateDaemonLibraryManagersWithLibraryIdentifier:block:");
}

id objc_msgSend_enumerateIndexesUsingBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumerateIndexesUsingBlock:");
}

id objc_msgSend_enumerateKeysAndObjectsUsingBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumerateKeysAndObjectsUsingBlock:");
}

id objc_msgSend_enumerateObjects_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumerateObjects:");
}

id objc_msgSend_enumerateObjectsOfClass_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumerateObjectsOfClass:");
}

id objc_msgSend_enumerateObjectsUsingBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumerateObjectsUsingBlock:");
}

id objc_msgSend_enumerateOpenedWrappersWithBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumerateOpenedWrappersWithBlock:");
}

id objc_msgSend_enumeratePushContextsWithBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumeratePushContextsWithBlock:");
}

id objc_msgSend_enumerateRecordScopedIdentifiersAndTasksWithBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumerateRecordScopedIdentifiersAndTasksWithBlock:");
}

id objc_msgSend_enumerateResourceTypesWithBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumerateResourceTypesWithBlock:");
}

id objc_msgSend_enumerateScopedTasksWithBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumerateScopedTasksWithBlock:");
}

id objc_msgSend_enumerateWrappersWithBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumerateWrappersWithBlock:");
}

id objc_msgSend_enumeratorAtURL_includingPropertiesForKeys_options_errorHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumeratorAtURL:includingPropertiesForKeys:options:errorHandler:");
}

id objc_msgSend_enumeratorForScopesIncludeInactive_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumeratorForScopesIncludeInactive:");
}

id objc_msgSend_environment(void *a1, const char *a2, ...)
{
  return _[a1 environment];
}

id objc_msgSend_error(void *a1, const char *a2, ...)
{
  return _[a1 error];
}

id objc_msgSend_errorForAllOperations(void *a1, const char *a2, ...)
{
  return _[a1 errorForAllOperations];
}

id objc_msgSend_errorForDB_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "errorForDB:");
}

id objc_msgSend_errorWithDomain_code_userInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "errorWithDomain:code:userInfo:");
}

id objc_msgSend_errorsForIdentifiers_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "errorsForIdentifiers:error:");
}

id objc_msgSend_errorsPerRecordIDForPartialFailureError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "errorsPerRecordIDForPartialFailureError:");
}

id objc_msgSend_errorsPerZoneIDForPartialFailureError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "errorsPerZoneIDForPartialFailureError:");
}

id objc_msgSend_estimatedAssetCountForScope_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "estimatedAssetCountForScope:");
}

id objc_msgSend_estimatedBatchSize(void *a1, const char *a2, ...)
{
  return _[a1 estimatedBatchSize];
}

id objc_msgSend_estimatedInitialAssetCountForLocalLibrary(void *a1, const char *a2, ...)
{
  return _[a1 estimatedInitialAssetCountForLocalLibrary];
}

id objc_msgSend_estimatedInitialSizeForLocalLibrary(void *a1, const char *a2, ...)
{
  return _[a1 estimatedInitialSizeForLocalLibrary];
}

id objc_msgSend_estimatedResourceSize(void *a1, const char *a2, ...)
{
  return _[a1 estimatedResourceSize];
}

id objc_msgSend_estimatedRunningTimeFromPrediction_minimumRuntime_minimumRuntimeWithExtendedTime_minimumRuntimeWithVeryLongExtendedTime_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "estimatedRunningTimeFromPrediction:minimumRuntime:minimumRuntimeWithExtendedTime:minimumRuntimeWithVeryLongExtendedTime:");
}

id objc_msgSend_estimatedSizeForScope_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "estimatedSizeForScope:");
}

id objc_msgSend_etag(void *a1, const char *a2, ...)
{
  return _[a1 etag];
}

id objc_msgSend_excludedScopeIdentifiers(void *a1, const char *a2, ...)
{
  return _[a1 excludedScopeIdentifiers];
}

id objc_msgSend_execute_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "execute:");
}

id objc_msgSend_execute_args_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "execute:args:");
}

id objc_msgSend_executeMaintenanceWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "executeMaintenanceWithCompletionHandler:");
}

id objc_msgSend_executePeriodicUploadOfComputeStatesWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "executePeriodicUploadOfComputeStatesWithCompletionHandler:");
}

id objc_msgSend_executeRaw_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "executeRaw:");
}

id objc_msgSend_executeSynchronousWork_onItems_description_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "executeSynchronousWork:onItems:description:completionHandler:");
}

id objc_msgSend_exitDeleteTime(void *a1, const char *a2, ...)
{
  return _[a1 exitDeleteTime];
}

id objc_msgSend_exitRetentionPolicy(void *a1, const char *a2, ...)
{
  return _[a1 exitRetentionPolicy];
}

id objc_msgSend_exitSharedLibraryOperationWithZoneID_retentionPolicy_exitType_exitSource_stopAt_participantUserIDsToRemove_participantIDsToRemove_completionHandler_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "exitSharedLibraryOperationWithZoneID:retentionPolicy:exitType:exitSource:stopAt:participantUserIDsToRemove:pa rticipantIDsToRemove:completionHandler:");
}

id objc_msgSend_exitSource(void *a1, const char *a2, ...)
{
  return _[a1 exitSource];
}

id objc_msgSend_exitStageMapping(void *a1, const char *a2, ...)
{
  return _[a1 exitStageMapping];
}

id objc_msgSend_exitState(void *a1, const char *a2, ...)
{
  return _[a1 exitState];
}

id objc_msgSend_exitType(void *a1, const char *a2, ...)
{
  return _[a1 exitType];
}

id objc_msgSend_exitingUserIdentifiers(void *a1, const char *a2, ...)
{
  return _[a1 exitingUserIdentifiers];
}

id objc_msgSend_expandedBatch(void *a1, const char *a2, ...)
{
  return _[a1 expandedBatch];
}

id objc_msgSend_expectedDuration(void *a1, const char *a2, ...)
{
  return _[a1 expectedDuration];
}

id objc_msgSend_expectedReceiveSize(void *a1, const char *a2, ...)
{
  return _[a1 expectedReceiveSize];
}

id objc_msgSend_expectedSendSize(void *a1, const char *a2, ...)
{
  return _[a1 expectedSendSize];
}

id objc_msgSend_expirationDate(void *a1, const char *a2, ...)
{
  return _[a1 expirationDate];
}

id objc_msgSend_expirationIntervalVar(void *a1, const char *a2, ...)
{
  return _[a1 expirationIntervalVar];
}

id objc_msgSend_expungeDate(void *a1, const char *a2, ...)
{
  return _[a1 expungeDate];
}

id objc_msgSend_expungeableResourceStates(void *a1, const char *a2, ...)
{
  return _[a1 expungeableResourceStates];
}

id objc_msgSend_expungeableResourceStatesFromCKRecord_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "expungeableResourceStatesFromCKRecord:");
}

id objc_msgSend_expungedDate(void *a1, const char *a2, ...)
{
  return _[a1 expungedDate];
}

id objc_msgSend_expungedState(void *a1, const char *a2, ...)
{
  return _[a1 expungedState];
}

id objc_msgSend_extendedDescription(void *a1, const char *a2, ...)
{
  return _[a1 extendedDescription];
}

id objc_msgSend_extendedStatusDescriptionStrings(void *a1, const char *a2, ...)
{
  return _[a1 extendedStatusDescriptionStrings];
}

id objc_msgSend_faceCropType(void *a1, const char *a2, ...)
{
  return _[a1 faceCropType];
}

id objc_msgSend_facesAdjustmentsFingerprint(void *a1, const char *a2, ...)
{
  return _[a1 facesAdjustmentsFingerprint];
}

id objc_msgSend_facesData(void *a1, const char *a2, ...)
{
  return _[a1 facesData];
}

id objc_msgSend_facesVersion(void *a1, const char *a2, ...)
{
  return _[a1 facesVersion];
}

id objc_msgSend_failedTaskForResource_error_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "failedTaskForResource:error:completionHandler:");
}

id objc_msgSend_failedToAcquireTaskWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "failedToAcquireTaskWithError:");
}

id objc_msgSend_fakeDerivativesDescription(void *a1, const char *a2, ...)
{
  return _[a1 fakeDerivativesDescription];
}

id objc_msgSend_fakeIdentity(void *a1, const char *a2, ...)
{
  return _[a1 fakeIdentity];
}

id objc_msgSend_feature(void *a1, const char *a2, ...)
{
  return _[a1 feature];
}

id objc_msgSend_featureCheckAvailabilityCompletionBlock(void *a1, const char *a2, ...)
{
  return _[a1 featureCheckAvailabilityCompletionBlock];
}

id objc_msgSend_featureCompatibleVersion(void *a1, const char *a2, ...)
{
  return _[a1 featureCompatibleVersion];
}

id objc_msgSend_featureVersionAtIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "featureVersionAtIndex:");
}

id objc_msgSend_featureVersionHistory(void *a1, const char *a2, ...)
{
  return _[a1 featureVersionHistory];
}

id objc_msgSend_featureVersionVar(void *a1, const char *a2, ...)
{
  return _[a1 featureVersionVar];
}

id objc_msgSend_featureVersionsCount(void *a1, const char *a2, ...)
{
  return _[a1 featureVersionsCount];
}

id objc_msgSend_features(void *a1, const char *a2, ...)
{
  return _[a1 features];
}

id objc_msgSend_featuresAtIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "featuresAtIndex:");
}

id objc_msgSend_featuresCount(void *a1, const char *a2, ...)
{
  return _[a1 featuresCount];
}

id objc_msgSend_featuresData(void *a1, const char *a2, ...)
{
  return _[a1 featuresData];
}

id objc_msgSend_feedback(void *a1, const char *a2, ...)
{
  return _[a1 feedback];
}

id objc_msgSend_feedbackCompletionBlock(void *a1, const char *a2, ...)
{
  return _[a1 feedbackCompletionBlock];
}

id objc_msgSend_fetch_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetch:");
}

id objc_msgSend_fetch_args_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetch:args:");
}

id objc_msgSend_fetchAccountInfoWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchAccountInfoWithCompletionHandler:");
}

id objc_msgSend_fetchAllRecordZonesOperation(void *a1, const char *a2, ...)
{
  return _[a1 fetchAllRecordZonesOperation];
}

id objc_msgSend_fetchCache(void *a1, const char *a2, ...)
{
  return _[a1 fetchCache];
}

id objc_msgSend_fetchComputeStatesForRecordsWithScopedIdentifiers_validator_shouldDecrypt_onDemand_completionHandler_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "fetchComputeStatesForRecordsWithScopedIdentifiers:validator:shouldDecrypt:onDemand:completionHandler:");
}

id objc_msgSend_fetchConfigurationDictionary_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchConfigurationDictionary:completionHandler:");
}

id objc_msgSend_fetchCurrentUserRecordOperation(void *a1, const char *a2, ...)
{
  return _[a1 fetchCurrentUserRecordOperation];
}

id objc_msgSend_fetchDerivativesFilter(void *a1, const char *a2, ...)
{
  return _[a1 fetchDerivativesFilter];
}

id objc_msgSend_fetchDerivativesUploadConfigurationWithCompletionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchDerivativesUploadConfigurationWithCompletionBlock:");
}

id objc_msgSend_fetchDisabledFeatures(void *a1, const char *a2, ...)
{
  return _[a1 fetchDisabledFeatures];
}

id objc_msgSend_fetchExistingSharedLibraryScopeTaskWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchExistingSharedLibraryScopeTaskWithCompletionHandler:");
}

id objc_msgSend_fetchExistingSharedLibraryScopeWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchExistingSharedLibraryScopeWithCompletionHandler:");
}

id objc_msgSend_fetchFullRecordsForScopedIdentifiers_targetMapping_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchFullRecordsForScopedIdentifiers:targetMapping:completionHandler:");
}

id objc_msgSend_fetchObject_sql_args_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchObject:sql:args:");
}

id objc_msgSend_fetchObjectOfClass_initializer_sql_args_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchObjectOfClass:initializer:sql:args:");
}

id objc_msgSend_fetchObjectOfClass_sql_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchObjectOfClass:sql:");
}

id objc_msgSend_fetchObjectOfClass_sql_args_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchObjectOfClass:sql:args:");
}

id objc_msgSend_fetchPlaceholderRecordsForScopedIdentifiers_targetMapping_completionHandler_( void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchPlaceholderRecordsForScopedIdentifiers:targetMapping:completionHandler:");
}

id objc_msgSend_fetchRecordWithNames_inScope_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchRecordWithNames:inScope:completionHandler:");
}

id objc_msgSend_fetchRecordWithScopedIdentifiers_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchRecordWithScopedIdentifiers:completionHandler:");
}

id objc_msgSend_fetchRecordsFollowRemappingWithIDs_wantsAllRecords_type_completionHandler_( void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchRecordsFollowRemappingWithIDs:wantsAllRecords:type:completionHandler:");
}

id objc_msgSend_fetchRecordsWithIDs_fetchResources_desiredKeys_wantsAllRecords_type_completionHandler_( void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchRecordsWithIDs:fetchResources:desiredKeys:wantsAllRecords:type:completionHandler:");
}

id objc_msgSend_fetchRecordsWithIDs_fetchResources_desiredKeys_wantsAllRecords_type_perFoundRecordBlock_completionHandler_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "fetchRecordsWithIDs:fetchResources:desiredKeys:wantsAllRecords:type:perFoundRecordBlock:completionHandler:");
}

id objc_msgSend_fetchRecordsWithIDs_fetchResources_inScope_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchRecordsWithIDs:fetchResources:inScope:completionHandler:");
}

id objc_msgSend_fetchRecordsWithIDs_fetchResources_wantsAllRecords_type_completionHandler_( void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchRecordsWithIDs:fetchResources:wantsAllRecords:type:completionHandler:");
}

id objc_msgSend_fetchRequestedRecordsForTransportTask_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchRequestedRecordsForTransportTask:completionHandler:");
}

id objc_msgSend_fetchShareParticipantsForParticipants_completionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchShareParticipantsForParticipants:completionBlock:");
}

id objc_msgSend_fetchSharedScopeFromShareURL_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchSharedScopeFromShareURL:completionHandler:");
}

id objc_msgSend_fetchTaskForScopeWithShareURL_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchTaskForScopeWithShareURL:completionHandler:");
}

id objc_msgSend_fetchTransportScopeForScope_transportScope_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchTransportScopeForScope:transportScope:completionHandler:");
}

id objc_msgSend_fetchUnknownTargetsInMapping_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchUnknownTargetsInMapping:completionHandler:");
}

id objc_msgSend_fetchUserRecordIDFetchWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchUserRecordIDFetchWithCompletionHandler:");
}

id objc_msgSend_fetchZoneForScope_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchZoneForScope:completionHandler:");
}

id objc_msgSend_fieldName(void *a1, const char *a2, ...)
{
  return _[a1 fieldName];
}

id objc_msgSend_fileExistsAtPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fileExistsAtPath:");
}

id objc_msgSend_fileExistsAtPath_isDirectory_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fileExistsAtPath:isDirectory:");
}

id objc_msgSend_fileKind(void *a1, const char *a2, ...)
{
  return _[a1 fileKind];
}

id objc_msgSend_fileSignature(void *a1, const char *a2, ...)
{
  return _[a1 fileSignature];
}

id objc_msgSend_fileSize(void *a1, const char *a2, ...)
{
  return _[a1 fileSize];
}

id objc_msgSend_fileStorageIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 fileStorageIdentifier];
}

id objc_msgSend_fileSystemRepresentation(void *a1, const char *a2, ...)
{
  return _[a1 fileSystemRepresentation];
}

id objc_msgSend_fileURL(void *a1, const char *a2, ...)
{
  return _[a1 fileURL];
}

id objc_msgSend_fileURLWithPath_isDirectory_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fileURLWithPath:isDirectory:");
}

id objc_msgSend_fileUTI(void *a1, const char *a2, ...)
{
  return _[a1 fileUTI];
}

id objc_msgSend_filename(void *a1, const char *a2, ...)
{
  return _[a1 filename];
}

id objc_msgSend_fillCKRecordBuilder_scopeProvider_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fillCKRecordBuilder:scopeProvider:");
}

id objc_msgSend_fillCKRecordBuilderWithResourceChange_resourceCountAndSize_scopeProvider_error_( void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fillCKRecordBuilderWithResourceChange:resourceCountAndSize:scopeProvider:error:");
}

id objc_msgSend_fillMissingCKAssetProperties_withCKRecord_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fillMissingCKAssetProperties:withCKRecord:");
}

id objc_msgSend_fillRelatedIdentifiersInChange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fillRelatedIdentifiersInChange:");
}

id objc_msgSend_fillResourcesOfCKRecordBuilder_clearMissing_resourceCountAndSize_scopeProvider_error_( void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fillResourcesOfCKRecordBuilder:clearMissing:resourceCountAndSize:scopeProvider:error:");
}

id objc_msgSend_fillWithCKRecord_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fillWithCKRecord:");
}

id objc_msgSend_fillWithCKRecord_missingResourceProperties_scopeProvider_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fillWithCKRecord:missingResourceProperties:scopeProvider:");
}

id objc_msgSend_filterForExcludedScopeIdentifiers_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "filterForExcludedScopeIdentifiers:");
}

id objc_msgSend_filterForIncludedScopeIdentifiers_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "filterForIncludedScopeIdentifiers:");
}

id objc_msgSend_finalizePlan(void *a1, const char *a2, ...)
{
  return _[a1 finalizePlan];
}

id objc_msgSend_finalizeWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "finalizeWithCompletionHandler:");
}

id objc_msgSend_finalizedDestinationCKRecordFromProposedCKRecord_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "finalizedDestinationCKRecordFromProposedCKRecord:error:");
}

id objc_msgSend_findPersistedInitialSyncSession_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "findPersistedInitialSyncSession:completionHandler:");
}

id objc_msgSend_findPersistedSyncSession_forScheduler_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "findPersistedSyncSession:forScheduler:completionHandler:");
}

id objc_msgSend_fingerPrint(void *a1, const char *a2, ...)
{
  return _[a1 fingerPrint];
}

id objc_msgSend_fingerPrintForData_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fingerPrintForData:error:");
}

id objc_msgSend_fingerprintContext(void *a1, const char *a2, ...)
{
  return _[a1 fingerprintContext];
}

id objc_msgSend_fingerprintSchemeDescription(void *a1, const char *a2, ...)
{
  return _[a1 fingerprintSchemeDescription];
}

id objc_msgSend_fingerprintSchemeForFingerprint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fingerprintSchemeForFingerprint:");
}

id objc_msgSend_fingerprintSchemeForNewMasterAsset(void *a1, const char *a2, ...)
{
  return _[a1 fingerprintSchemeForNewMasterAsset];
}

id objc_msgSend_fingerprintSchemeForSignature_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fingerprintSchemeForSignature:");
}

id objc_msgSend_fingerprintSchemeWithContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fingerprintSchemeWithContext:");
}

id objc_msgSend_firstIndex(void *a1, const char *a2, ...)
{
  return _[a1 firstIndex];
}

id objc_msgSend_firstObject(void *a1, const char *a2, ...)
{
  return _[a1 firstObject];
}

id objc_msgSend_fixStorageAfterAnyVersionChange(void *a1, const char *a2, ...)
{
  return _[a1 fixStorageAfterAnyVersionChange];
}

id objc_msgSend_flags(void *a1, const char *a2, ...)
{
  return _[a1 flags];
}

id objc_msgSend_flagsForScope_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "flagsForScope:");
}

id objc_msgSend_forceApplyPendingChangeSessionUpdateWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "forceApplyPendingChangeSessionUpdateWithError:");
}

id objc_msgSend_forceBackupWithActivity_forceClientPush_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "forceBackupWithActivity:forceClientPush:completionHandler:");
}

id objc_msgSend_forceBackupWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "forceBackupWithCompletionHandler:");
}

id objc_msgSend_forceIdentifyUknownScopesWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "forceIdentifyUknownScopesWithError:");
}

id objc_msgSend_forceInitialDownloadWithActivity_scopeIdentifiers_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "forceInitialDownloadWithActivity:scopeIdentifiers:completionHandler:");
}

id objc_msgSend_forcePushToTransportForActiveScopesWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "forcePushToTransportForActiveScopesWithError:");
}

id objc_msgSend_forceScopeIndexOnAllRecordsTo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "forceScopeIndexOnAllRecordsTo:");
}

id objc_msgSend_forceSyncDelegate(void *a1, const char *a2, ...)
{
  return _[a1 forceSyncDelegate];
}

id objc_msgSend_forceSyncDidFinishForTask_withErrors_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "forceSyncDidFinishForTask:withErrors:");
}

id objc_msgSend_forceSynchronizingScopeWithIdentifiers_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "forceSynchronizingScopeWithIdentifiers:completionHandler:");
}

id objc_msgSend_forceUpdatePrimarySyncStateOnce(void *a1, const char *a2, ...)
{
  return _[a1 forceUpdatePrimarySyncStateOnce];
}

id objc_msgSend_foreground(void *a1, const char *a2, ...)
{
  return _[a1 foreground];
}

id objc_msgSend_formatInjection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "formatInjection:");
}

id objc_msgSend_freeDiskSpaceSize(void *a1, const char *a2, ...)
{
  return _[a1 freeDiskSpaceSize];
}

id objc_msgSend_fullName(void *a1, const char *a2, ...)
{
  return _[a1 fullName];
}

id objc_msgSend_fullSizeJPEGSource(void *a1, const char *a2, ...)
{
  return _[a1 fullSizeJPEGSource];
}

id objc_msgSend_generation(void *a1, const char *a2, ...)
{
  return _[a1 generation];
}

id objc_msgSend_getChangeBatchWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getChangeBatchWithCompletionHandler:");
}

id objc_msgSend_getChangedStatusesWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getChangedStatusesWithCompletionHandler:");
}

id objc_msgSend_getCloudCacheForRecordWithScopedIdentifier_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getCloudCacheForRecordWithScopedIdentifier:completionHandler:");
}

id objc_msgSend_getCloudKitErrorCode_internalCode_fromError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getCloudKitErrorCode:internalCode:fromError:");
}

id objc_msgSend_getCloudScopedIdentifiersForLocalScopedIdentifiers_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getCloudScopedIdentifiersForLocalScopedIdentifiers:completionHandler:");
}

id objc_msgSend_getCommittedRecord_stagedRecord_forScopedIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getCommittedRecord:stagedRecord:forScopedIdentifier:");
}

id objc_msgSend_getCurrentRequiredStateWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getCurrentRequiredStateWithCompletionHandler:");
}

id objc_msgSend_getLastClientServedWithAPushNotificationWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getLastClientServedWithAPushNotificationWithCompletionHandler:");
}

id objc_msgSend_getListOfComponentsWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getListOfComponentsWithCompletionHandler:");
}

id objc_msgSend_getLocalScopedIdentifiersForCloudScopedIdentifiers_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getLocalScopedIdentifiersForCloudScopedIdentifiers:completionHandler:");
}

id objc_msgSend_getNextBatchToMoveOperationWithZoneID_batchSize_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getNextBatchToMoveOperationWithZoneID:batchSize:completionHandler:");
}

id objc_msgSend_getRelatedScopedIdentifier_forRecordWithScopedIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getRelatedScopedIdentifier:forRecordWithScopedIdentifier:");
}

id objc_msgSend_getResourceValue_forKey_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getResourceValue:forKey:error:");
}

id objc_msgSend_getResourcesForItemWithScopedIdentifier_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getResourcesForItemWithScopedIdentifier:completionHandler:");
}

id objc_msgSend_getScopeInfoWithTransportScope_scope_previousScopeChange_completionHandler_( void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getScopeInfoWithTransportScope:scope:previousScopeChange:completionHandler:");
}

id objc_msgSend_getScopeStatusCountsForScopeWithIdentifier_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getScopeStatusCountsForScopeWithIdentifier:completionHandler:");
}

id objc_msgSend_getStatusArrayForComponents_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getStatusArrayForComponents:completionHandler:");
}

id objc_msgSend_getStatusDictionaryWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getStatusDictionaryWithCompletionHandler:");
}

id objc_msgSend_getStatusForClient_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getStatusForClient:completionHandler:");
}

id objc_msgSend_getStatusForComponents_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getStatusForComponents:completionHandler:");
}

id objc_msgSend_getStatusForPendingRecordsSharedToScopeWithIdentifier_maximumCount_completionHandler_( void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getStatusForPendingRecordsSharedToScopeWithIdentifier:maximumCount:completionHandler:");
}

id objc_msgSend_getStatusForRecordsWithScopedIdentifiers_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getStatusForRecordsWithScopedIdentifiers:completionHandler:");
}

id objc_msgSend_getStatusWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getStatusWithCompletionHandler:");
}

id objc_msgSend_getStatusesForScopesWithIdentifiers_includeStorages_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getStatusesForScopesWithIdentifiers:includeStorages:completionHandler:");
}

id objc_msgSend_getStreamingURLOrMediaMakerDataForResource_intent_hints_timeRange_clientBundleID_completionHandler_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "getStreamingURLOrMediaMakerDataForResource:intent:hints:timeRange:clientBundleID:completionHandler:");
}

id objc_msgSend_getStreamingURLTaskForResource_intent_hints_timeRange_target_transportScopeMapping_clientBundleID_completionHandler_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "getStreamingURLTaskForResource:intent:hints:timeRange:target:transportScopeMapping:clientBundleID:completionHandler:");
}

id objc_msgSend_getSystemBudgetsWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getSystemBudgetsWithCompletionHandler:");
}

id objc_msgSend_getTargetsForRecordsWithScopedIdentifiers_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getTargetsForRecordsWithScopedIdentifiers:completionHandler:");
}

id objc_msgSend_getTemporaryFolderWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getTemporaryFolderWithCompletionHandler:");
}

id objc_msgSend_getTemporaryFolderWithName_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getTemporaryFolderWithName:completionHandler:");
}

id objc_msgSend_getUserRecordIDFetchIfNecessaryWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getUserRecordIDFetchIfNecessaryWithCompletionHandler:");
}

id objc_msgSend_goodConditionsDescription(void *a1, const char *a2, ...)
{
  return _[a1 goodConditionsDescription];
}

id objc_msgSend_graphData(void *a1, const char *a2, ...)
{
  return _[a1 graphData];
}

id objc_msgSend_graphVersion(void *a1, const char *a2, ...)
{
  return _[a1 graphVersion];
}

id objc_msgSend_group(void *a1, const char *a2, ...)
{
  return _[a1 group];
}

id objc_msgSend_groupNameForAppLibrarySync(void *a1, const char *a2, ...)
{
  return _[a1 groupNameForAppLibrarySync];
}

id objc_msgSend_groupNameForGroupName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "groupNameForGroupName:");
}

id objc_msgSend_groupNameForSystemLibrarySync(void *a1, const char *a2, ...)
{
  return _[a1 groupNameForSystemLibrarySync];
}

id objc_msgSend_handleFailureInFunction_file_lineNumber_description_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleFailureInFunction:file:lineNumber:description:");
}

id objc_msgSend_handleFailureInMethod_object_file_lineNumber_description_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleFailureInMethod:object:file:lineNumber:description:");
}

id objc_msgSend_hasActiveOrQueuedBackgroundDownloadOperations(void *a1, const char *a2, ...)
{
  return _[a1 hasActiveOrQueuedBackgroundDownloadOperations];
}

id objc_msgSend_hasBackgroundActivity(void *a1, const char *a2, ...)
{
  return _[a1 hasBackgroundActivity];
}

id objc_msgSend_hasBlockedOperationsIncludingBackground_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasBlockedOperationsIncludingBackground:");
}

id objc_msgSend_hasCKKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasCKKey:");
}

id objc_msgSend_hasCachedValueForIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasCachedValueForIdentifier:");
}

id objc_msgSend_hasChangeType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasChangeType:");
}

id objc_msgSend_hasChanges(void *a1, const char *a2, ...)
{
  return _[a1 hasChanges];
}

id objc_msgSend_hasChangesInScopeWithIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasChangesInScopeWithIdentifier:");
}

id objc_msgSend_hasChangesInScopeWithIdentifier_table_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasChangesInScopeWithIdentifier:table:");
}

id objc_msgSend_hasDownloadTasks(void *a1, const char *a2, ...)
{
  return _[a1 hasDownloadTasks];
}

id objc_msgSend_hasEPPAssets(void *a1, const char *a2, ...)
{
  return _[a1 hasEPPAssets];
}

id objc_msgSend_hasEnoughPowerForAutomaticOverride(void *a1, const char *a2, ...)
{
  return _[a1 hasEnoughPowerForAutomaticOverride];
}

id objc_msgSend_hasFetchedInitialSyncAnchorVar(void *a1, const char *a2, ...)
{
  return _[a1 hasFetchedInitialSyncAnchorVar];
}

id objc_msgSend_hasFileSize(void *a1, const char *a2, ...)
{
  return _[a1 hasFileSize];
}

id objc_msgSend_hasFileUTI(void *a1, const char *a2, ...)
{
  return _[a1 hasFileUTI];
}

id objc_msgSend_hasImageDimensions(void *a1, const char *a2, ...)
{
  return _[a1 hasImageDimensions];
}

id objc_msgSend_hasOnlyMingledRecordsWithScopeIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasOnlyMingledRecordsWithScopeIdentifier:");
}

id objc_msgSend_hasPendingResetSync(void *a1, const char *a2, ...)
{
  return _[a1 hasPendingResetSync];
}

id objc_msgSend_hasPrefix_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasPrefix:");
}

id objc_msgSend_hasProperty_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasProperty:");
}

id objc_msgSend_hasQueuedBatches(void *a1, const char *a2, ...)
{
  return _[a1 hasQueuedBatches];
}

id objc_msgSend_hasRecordWithScopedIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasRecordWithScopedIdentifier:");
}

id objc_msgSend_hasServerToken(void *a1, const char *a2, ...)
{
  return _[a1 hasServerToken];
}

id objc_msgSend_hasShareTodoForScopedIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasShareTodoForScopedIdentifier:");
}

id objc_msgSend_hasSignificantWork(void *a1, const char *a2, ...)
{
  return _[a1 hasSignificantWork];
}

id objc_msgSend_hasSomethingTodo(void *a1, const char *a2, ...)
{
  return _[a1 hasSomethingTodo];
}

id objc_msgSend_hasSomethingTodoNow_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasSomethingTodoNow:");
}

id objc_msgSend_hasStableHash(void *a1, const char *a2, ...)
{
  return _[a1 hasStableHash];
}

id objc_msgSend_hasStagingScopes(void *a1, const char *a2, ...)
{
  return _[a1 hasStagingScopes];
}

id objc_msgSend_hasSuffix_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasSuffix:");
}

id objc_msgSend_hasTable_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasTable:");
}

id objc_msgSend_hasUnknownTargets(void *a1, const char *a2, ...)
{
  return _[a1 hasUnknownTargets];
}

id objc_msgSend_hasValidCredentials(void *a1, const char *a2, ...)
{
  return _[a1 hasValidCredentials];
}

id objc_msgSend_hasVersion(void *a1, const char *a2, ...)
{
  return _[a1 hasVersion];
}

id objc_msgSend_hash(void *a1, const char *a2, ...)
{
  return _[a1 hash];
}

id objc_msgSend_hasiCloudAccount(void *a1, const char *a2, ...)
{
  return _[a1 hasiCloudAccount];
}

id objc_msgSend_height(void *a1, const char *a2, ...)
{
  return _[a1 height];
}

id objc_msgSend_helper(void *a1, const char *a2, ...)
{
  return _[a1 helper];
}

id objc_msgSend_hideNetworkIndicatorForBundleWithIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hideNetworkIndicatorForBundleWithIdentifier:");
}

id objc_msgSend_hideSyncIndicator(void *a1, const char *a2, ...)
{
  return _[a1 hideSyncIndicator];
}

id objc_msgSend_horizontalAccuracy(void *a1, const char *a2, ...)
{
  return _[a1 horizontalAccuracy];
}

id objc_msgSend_iCloudLibraryClientVersionTooOld(void *a1, const char *a2, ...)
{
  return _[a1 iCloudLibraryClientVersionTooOld];
}

id objc_msgSend_iCloudLibraryHasBeenWiped(void *a1, const char *a2, ...)
{
  return _[a1 iCloudLibraryHasBeenWiped];
}

id objc_msgSend_idMapping(void *a1, const char *a2, ...)
{
  return _[a1 idMapping];
}

id objc_msgSend_identification(void *a1, const char *a2, ...)
{
  return _[a1 identification];
}

id objc_msgSend_identifier(void *a1, const char *a2, ...)
{
  return _[a1 identifier];
}

id objc_msgSend_identity(void *a1, const char *a2, ...)
{
  return _[a1 identity];
}

id objc_msgSend_identityForStorage(void *a1, const char *a2, ...)
{
  return _[a1 identityForStorage];
}

id objc_msgSend_identityForStorageName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "identityForStorageName:");
}

id objc_msgSend_identityFromStoredIdentity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "identityFromStoredIdentity:");
}

id objc_msgSend_idleDescription(void *a1, const char *a2, ...)
{
  return _[a1 idleDescription];
}

id objc_msgSend_ignoreBeforeDate(void *a1, const char *a2, ...)
{
  return _[a1 ignoreBeforeDate];
}

id objc_msgSend_ignoredRecordCount(void *a1, const char *a2, ...)
{
  return _[a1 ignoredRecordCount];
}

id objc_msgSend_ignoredTopics(void *a1, const char *a2, ...)
{
  return _[a1 ignoredTopics];
}

id objc_msgSend_imageDimensions(void *a1, const char *a2, ...)
{
  return _[a1 imageDimensions];
}

id objc_msgSend_importDate(void *a1, const char *a2, ...)
{
  return _[a1 importDate];
}

id objc_msgSend_importGroupIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 importGroupIdentifier];
}

id objc_msgSend_importedBy(void *a1, const char *a2, ...)
{
  return _[a1 importedBy];
}

id objc_msgSend_importedByBundleIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 importedByBundleIdentifier];
}

id objc_msgSend_importedByDisplayName(void *a1, const char *a2, ...)
{
  return _[a1 importedByDisplayName];
}

id objc_msgSend_inEmergencyClosing(void *a1, const char *a2, ...)
{
  return _[a1 inEmergencyClosing];
}

id objc_msgSend_inExpunged(void *a1, const char *a2, ...)
{
  return _[a1 inExpunged];
}

id objc_msgSend_inMemoryDownloadDidFinishForResourceTransferTask_data_withError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "inMemoryDownloadDidFinishForResourceTransferTask:data:withError:");
}

id objc_msgSend_inMemoryDownloadOperationForRecordID_resource_record_keys_downloadType_completionBlock_( void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "inMemoryDownloadOperationForRecordID:resource:record:keys:downloadType:completionBlock:");
}

id objc_msgSend_inMemoryDownloadTaskForResource_record_target_transportScopeMapping_clientBundleID_completionHandler_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "inMemoryDownloadTaskForResource:record:target:transportScopeMapping:clientBundleID:completionHandler:");
}

id objc_msgSend_inTrash(void *a1, const char *a2, ...)
{
  return _[a1 inTrash];
}

id objc_msgSend_includedScopeIdentifiers(void *a1, const char *a2, ...)
{
  return _[a1 includedScopeIdentifiers];
}

id objc_msgSend_incomingBatch(void *a1, const char *a2, ...)
{
  return _[a1 incomingBatch];
}

id objc_msgSend_incorrectMachineStateErrorWithReason_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "incorrectMachineStateErrorWithReason:");
}

id objc_msgSend_incorrectParametersErrorForParameter_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "incorrectParametersErrorForParameter:");
}

id objc_msgSend_incrementalVacuum_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "incrementalVacuum:");
}

id objc_msgSend_indexForCloudScopeIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "indexForCloudScopeIdentifier:");
}

id objc_msgSend_indexForLocalScopeIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "indexForLocalScopeIdentifier:");
}

id objc_msgSend_indexOfObject_inSortedRange_options_usingComparator_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "indexOfObject:inSortedRange:options:usingComparator:");
}

id objc_msgSend_indexOfObjectIdenticalTo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "indexOfObjectIdenticalTo:");
}

id objc_msgSend_indexOfObjectPassingTest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "indexOfObjectPassingTest:");
}

id objc_msgSend_indexOfObjectWithOptions_passingTest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "indexOfObjectWithOptions:passingTest:");
}

id objc_msgSend_indexSetWithIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "indexSetWithIndex:");
}

id objc_msgSend_indexVariableForVariableWithName_forTable_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "indexVariableForVariableWithName:forTable:");
}

id objc_msgSend_init(void *a1, const char *a2, ...)
{
  return _[a1 init];
}

id objc_msgSend_initFileURLWithPath_isDirectory_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initFileURLWithPath:isDirectory:");
}

id objc_msgSend_initForSyncBubble_forceClientPush_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initForSyncBubble:forceClientPush:");
}

id objc_msgSend_initFromPQLResultSet_center_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initFromPQLResultSet:center:error:");
}

id objc_msgSend_initFromPQLResultSet_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initFromPQLResultSet:error:");
}

id objc_msgSend_initFromZoneID_toZoneID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initFromZoneID:toZoneID:");
}

id objc_msgSend_initRelativeToScopedIdentifier_identifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initRelativeToScopedIdentifier:identifier:");
}

id objc_msgSend_initRemoveParticipantsWithController_cloudKitScope_scope_share_userIdentifiersToRemove_participantIDsToRemove_retentionPolicy_exitSource_completionHandler_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "initRemoveParticipantsWithController:cloudKitScope:scope:share:userIdentifiersToRemove:participantIDsToRemove :retentionPolicy:exitSource:completionHandler:");
}

id objc_msgSend_initSelfExitWithController_cloudKitScope_scope_share_retentionPolicy_exitSource_completionHandler_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "initSelfExitWithController:cloudKitScope:scope:share:retentionPolicy:exitSource:completionHandler:");
}

id objc_msgSend_initSharedInstance(void *a1, const char *a2, ...)
{
  return _[a1 initSharedInstance];
}

id objc_msgSend_initWithArray_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithArray:");
}

id objc_msgSend_initWithAssetContent_itemTypeHint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithAssetContent:itemTypeHint:");
}

id objc_msgSend_initWithAssetReference_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithAssetReference:");
}

id objc_msgSend_initWithBaseCKRecord_scopeProvider_currentUserRecordID_targetMapping_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithBaseCKRecord:scopeProvider:currentUserRecordID:targetMapping:");
}

id objc_msgSend_initWithBaseCKRecord_sourceRecordID_fromPrivateRecord_recordClass_sourceDatabaseScope_destinationRecordID_planner_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "initWithBaseCKRecord:sourceRecordID:fromPrivateRecord:recordClass:sourceDatabaseScope:destinationRecordID:planner:");
}

id objc_msgSend_initWithBundleIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithBundleIdentifier:");
}

id objc_msgSend_initWithBypassQueue_blockedQueue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithBypassQueue:blockedQueue:");
}

id objc_msgSend_initWithBytes_length_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithBytes:length:");
}

id objc_msgSend_initWithBytesNoCopy_length_encoding_freeWhenDone_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithBytesNoCopy:length:encoding:freeWhenDone:");
}

id objc_msgSend_initWithCKRecord_scopedIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithCKRecord:scopedIdentifier:");
}

id objc_msgSend_initWithCKRecord_zone_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithCKRecord:zone:");
}

id objc_msgSend_initWithCKShare_currentUserID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithCKShare:currentUserID:");
}

id objc_msgSend_initWithCKShareParticipant_currentUserID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithCKShareParticipant:currentUserID:");
}

id objc_msgSend_initWithCPLScopeIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithCPLScopeIdentifier:");
}

id objc_msgSend_initWithCapacity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithCapacity:");
}

id objc_msgSend_initWithClientBundlerIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithClientBundlerIdentifier:");
}

id objc_msgSend_initWithClientDidAcknowledgeBatchBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithClientDidAcknowledgeBatchBlock:");
}

id objc_msgSend_initWithClientLibraryBaseURL_cloudLibraryStateStorageURL_cloudLibraryResourceStorageURL_libraryIdentifier_mainScopeIdentifier_options_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "initWithClientLibraryBaseURL:cloudLibraryStateStorageURL:cloudLibraryResourceStorageURL:libraryIdentifier:mai nScopeIdentifier:options:");
}

id objc_msgSend_initWithCloudKitClientIdentifier_defaultSourceBundleIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithCloudKitClientIdentifier:defaultSourceBundleIdentifier:");
}

id objc_msgSend_initWithCloudKitScope_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithCloudKitScope:");
}

id objc_msgSend_initWithCloudKitScope_engineScope_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithCloudKitScope:engineScope:");
}

id objc_msgSend_initWithConfigurationURL_delegate_queue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithConfigurationURL:delegate:queue:");
}

id objc_msgSend_initWithConnection_name_allowedProcol_isManagement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithConnection:name:allowedProcol:isManagement:");
}

id objc_msgSend_initWithContainerID_options_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithContainerID:options:");
}

id objc_msgSend_initWithContainerIdentifier_environment_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithContainerIdentifier:environment:");
}

id objc_msgSend_initWithContentsOfURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithContentsOfURL:");
}

id objc_msgSend_initWithContentsOfURL_encoding_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithContentsOfURL:encoding:error:");
}

id objc_msgSend_initWithContentsOfURL_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithContentsOfURL:error:");
}

id objc_msgSend_initWithContentsOfURL_options_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithContentsOfURL:options:error:");
}

id objc_msgSend_initWithController_cloudKitScope_scope_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithController:cloudKitScope:scope:completionHandler:");
}

id objc_msgSend_initWithController_cloudKitScope_scope_previousScopeChange_completionHandler_( void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithController:cloudKitScope:scope:previousScopeChange:completionHandler:");
}

id objc_msgSend_initWithController_cloudKitScope_scope_scopeChange_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithController:cloudKitScope:scope:scopeChange:completionHandler:");
}

id objc_msgSend_initWithController_cloudKitScope_scope_share_retentionPolicy_exitType_exitSource_userIdentifiersToRemove_participantIDsToRemove_completionHandler_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "initWithController:cloudKitScope:scope:share:retentionPolicy:exitType:exitSource:userIdentifiersToRemove:part icipantIDsToRemove:completionHandler:");
}

id objc_msgSend_initWithController_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithController:completionHandler:");
}

id objc_msgSend_initWithController_computeStates_scope_sharedScope_targetMapping_transportScopeMapping_knownRecords_completionHandler_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "initWithController:computeStates:scope:sharedScope:targetMapping:transportScopeMapping:knownRecords:completionHandler:");
}

id objc_msgSend_initWithController_cursor_class_scope_transportScopeMapping_progressHandler_completionHandler_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "initWithController:cursor:class:scope:transportScopeMapping:progressHandler:completionHandler:");
}

id objc_msgSend_initWithController_messages_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithController:messages:completionHandler:");
}

id objc_msgSend_initWithController_participants_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithController:participants:completionHandler:");
}

id objc_msgSend_initWithController_records_sourceScope_destinationScope_transportScopeMapping_completionHandler_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "initWithController:records:sourceScope:destinationScope:transportScopeMapping:completionHandler:");
}

id objc_msgSend_initWithController_resource_hints_timeRange_target_transportScopeMapping_cache_completionHandler_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "initWithController:resource:hints:timeRange:target:transportScopeMapping:cache:completionHandler:");
}

id objc_msgSend_initWithController_resource_record_target_transportScopeMapping_completionHandler_( void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithController:resource:record:target:transportScopeMapping:completionHandler:");
}

id objc_msgSend_initWithController_resourceType_numRequested_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithController:resourceType:numRequested:completionHandler:");
}

id objc_msgSend_initWithController_resources_targetMapping_transportScopeMapping_completionHandler_( void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithController:resources:targetMapping:transportScopeMapping:completionHandler:");
}

id objc_msgSend_initWithController_scope_cloudKitScope_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithController:scope:cloudKitScope:completionHandler:");
}

id objc_msgSend_initWithController_scope_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithController:scope:completionHandler:");
}

id objc_msgSend_initWithController_scope_targetMapping_transportScopeMapping_progressHandler_completionHandler_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "initWithController:scope:targetMapping:transportScopeMapping:progressHandler:completionHandler:");
}

id objc_msgSend_initWithController_scope_transportScope_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithController:scope:transportScope:completionHandler:");
}

id objc_msgSend_initWithController_scopeIdentifier_cloudKitScope_status_completionHandler_( void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithController:scopeIdentifier:cloudKitScope:status:completionHandler:");
}

id objc_msgSend_initWithController_scopeListSyncAnchor_progressHandler_completionHandler_( void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithController:scopeListSyncAnchor:progressHandler:completionHandler:");
}

id objc_msgSend_initWithController_scopedIdentifiers_scope_sharedScope_targetStorageURL_transportScopeMapping_completionHandler_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "initWithController:scopedIdentifiers:scope:sharedScope:targetStorageURL:transportScopeMapping:completionHandler:");
}

id objc_msgSend_initWithController_scopedIdentifiers_targetMapping_transportScopeMapping_completionHandler_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "initWithController:scopedIdentifiers:targetMapping:transportScopeMapping:completionHandler:");
}

id objc_msgSend_initWithController_shareURL_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithController:shareURL:completionHandler:");
}

id objc_msgSend_initWithController_sharedScope_contributorsUpdates_transportScopeMapping_completionHandler_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "initWithController:sharedScope:contributorsUpdates:transportScopeMapping:completionHandler:");
}

id objc_msgSend_initWithController_sourceRecordIDs_destinationRecordIDs_moveError_operationID_moveBatchID_exitZoneID_scope_completionHandler_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "initWithController:sourceRecordIDs:destinationRecordIDs:moveError:operationID:moveBatchID:exitZoneID:scope:co mpletionHandler:");
}

id objc_msgSend_initWithController_sourceRecordsWithIDs_followRemapping_sourceType_destinationRecordIDs_destinationType_helper_completionHandler_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "initWithController:sourceRecordsWithIDs:followRemapping:sourceType:destinationRecordIDs:destinationType:helpe r:completionHandler:");
}

id objc_msgSend_initWithController_stagedScope_stagingScope_destinationScope_transportScopeMapping_progressHandler_completionHandler_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "initWithController:stagedScope:stagingScope:destinationScope:transportScopeMapping:progressHandler:completionHandler:");
}

id objc_msgSend_initWithController_syncAnchor_scope_transportScopeMapping_currentScopeChange_progressHandler_completionHandler_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "initWithController:syncAnchor:scope:transportScopeMapping:currentScopeChange:progressHandler:completionHandler:");
}

id objc_msgSend_initWithController_tasks_transportScopeMapping_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithController:tasks:transportScopeMapping:completionHandler:");
}

id objc_msgSend_initWithController_updateDisabledFeatures_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithController:updateDisabledFeatures:completionHandler:");
}

id objc_msgSend_initWithCoordinate_altitude_horizontalAccuracy_verticalAccuracy_course_speed_timestamp_( void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithCoordinate:altitude:horizontalAccuracy:verticalAccuracy:course:speed:timestamp:");
}

id objc_msgSend_initWithCurrentFeatureVersion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithCurrentFeatureVersion:");
}

id objc_msgSend_initWithCursor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithCursor:");
}

id objc_msgSend_initWithCursorData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithCursorData:");
}

id objc_msgSend_initWithData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithData:");
}

id objc_msgSend_initWithData_encoding_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithData:encoding:");
}

id objc_msgSend_initWithDirectoryEnumerator_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDirectoryEnumerator:");
}

id objc_msgSend_initWithDispatchQueue_delegate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDispatchQueue:delegate:");
}

id objc_msgSend_initWithDomain_code_userInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDomain:code:userInfo:");
}

id objc_msgSend_initWithEmailAddress_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithEmailAddress:");
}

id objc_msgSend_initWithEngineLibrary_delegate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithEngineLibrary:delegate:");
}

id objc_msgSend_initWithEngineLibrary_queue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithEngineLibrary:queue:");
}

id objc_msgSend_initWithEnumerator_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithEnumerator:");
}

id objc_msgSend_initWithEnvironmentName_namedDelegatePort_queue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithEnvironmentName:namedDelegatePort:queue:");
}

id objc_msgSend_initWithEventName_atTime_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithEventName:atTime:");
}

id objc_msgSend_initWithExcludedScopeIdentifiers_localIndexesInjection_localIndexes_cloudIndexesInjection_cloudIndexes_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "initWithExcludedScopeIdentifiers:localIndexesInjection:localIndexes:cloudIndexesInjection:cloudIndexes:");
}

id objc_msgSend_initWithExistingRecordID_databaseScope_fieldName_fileSignature_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithExistingRecordID:databaseScope:fieldName:fileSignature:");
}

id objc_msgSend_initWithFakeFingerPrint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithFakeFingerPrint:");
}

id objc_msgSend_initWithFakeIdentity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithFakeIdentity:");
}

id objc_msgSend_initWithFeedbackMessages_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithFeedbackMessages:");
}

id objc_msgSend_initWithFetchCache_scopeProvider_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithFetchCache:scopeProvider:");
}

id objc_msgSend_initWithFileURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithFileURL:");
}

id objc_msgSend_initWithFileURL_name_ownerIdentifier_delegate_queue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithFileURL:name:ownerIdentifier:delegate:queue:");
}

id objc_msgSend_initWithFileURL_signature_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithFileURL:signature:");
}

id objc_msgSend_initWithFlags_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithFlags:");
}

id objc_msgSend_initWithFlagsCounts_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithFlagsCounts:");
}

id objc_msgSend_initWithFormat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithFormat:");
}

id objc_msgSend_initWithFormat_arguments_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithFormat:arguments:");
}

id objc_msgSend_initWithGroupName_minimumThrottlingInterval_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithGroupName:minimumThrottlingInterval:");
}

id objc_msgSend_initWithIdentificationClasses_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithIdentificationClasses:");
}

id objc_msgSend_initWithIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithIdentifier:");
}

id objc_msgSend_initWithIdentifier_cumulativeProductionCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithIdentifier:cumulativeProductionCount:");
}

id objc_msgSend_initWithIdentifier_firstSyncOfMainLibrary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithIdentifier:firstSyncOfMainLibrary:");
}

id objc_msgSend_initWithIdentity_url_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithIdentity:url:");
}

id objc_msgSend_initWithIncludedScopeIdentifiers_localIndexesInjection_localIndexes_cloudIndexesInjection_cloudIndexes_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "initWithIncludedScopeIdentifiers:localIndexesInjection:localIndexes:cloudIndexesInjection:cloudIndexes:");
}

id objc_msgSend_initWithIncomingBatch_store_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithIncomingBatch:store:error:");
}

id objc_msgSend_initWithIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithIndex:");
}

id objc_msgSend_initWithInjection_indexSet_exclude_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithInjection:indexSet:exclude:");
}

id objc_msgSend_initWithItemScopedIdentifier_fileStorageIdentifier_version_fileURL_adjustmentFingerprint_lastUpdatedDate_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "initWithItemScopedIdentifier:fileStorageIdentifier:version:fileURL:adjustmentFingerprint:lastUpdatedDate:");
}

id objc_msgSend_initWithKey_object_expirationDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithKey:object:expirationDate:");
}

id objc_msgSend_initWithKeyOptions_valueOptions_capacity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithKeyOptions:valueOptions:capacity:");
}

id objc_msgSend_initWithLeewayInterval_maximumCapacity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithLeewayInterval:maximumCapacity:");
}

id objc_msgSend_initWithLevel_name_value_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithLevel:name:value:");
}

id objc_msgSend_initWithLibraryIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithLibraryIdentifier:");
}

id objc_msgSend_initWithLibraryIdentifier_reason_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithLibraryIdentifier:reason:");
}

id objc_msgSend_initWithMachServiceName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithMachServiceName:");
}

id objc_msgSend_initWithMachServiceName_options_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithMachServiceName:options:");
}

id objc_msgSend_initWithMapping_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithMapping:");
}

id objc_msgSend_initWithMappingAtURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithMappingAtURL:");
}

id objc_msgSend_initWithMappingInFolderWithURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithMappingInFolderWithURL:");
}

id objc_msgSend_initWithMoveChanges_sourceDatabase_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithMoveChanges:sourceDatabase:");
}

id objc_msgSend_initWithMoveStep_workItemDelay_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithMoveStep:workItemDelay:");
}

id objc_msgSend_initWithName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithName:");
}

id objc_msgSend_initWithName_defaultExpirationInterval_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithName:defaultExpirationInterval:");
}

id objc_msgSend_initWithName_defaultValue_table_type_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithName:defaultValue:table:type:");
}

id objc_msgSend_initWithObjects_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithObjects:");
}

id objc_msgSend_initWithObjects_count_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithObjects:count:");
}

id objc_msgSend_initWithParameters_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithParameters:");
}

id objc_msgSend_initWithParameters_clientCount_isOpened_openError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithParameters:clientCount:isOpened:openError:");
}

id objc_msgSend_initWithParameters_engine_queue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithParameters:engine:queue:");
}

id objc_msgSend_initWithParameters_openError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithParameters:openError:");
}

id objc_msgSend_initWithParametersStorage_queue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithParametersStorage:queue:");
}

id objc_msgSend_initWithParent_userInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithParent:userInfo:");
}

id objc_msgSend_initWithPattern_options_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithPattern:options:error:");
}

id objc_msgSend_initWithPhoneNumber_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithPhoneNumber:");
}

id objc_msgSend_initWithPlanner_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithPlanner:");
}

id objc_msgSend_initWithPlist_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithPlist:");
}

id objc_msgSend_initWithPrefix_resourceType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithPrefix:resourceType:");
}

id objc_msgSend_initWithPrequeliteDictionary_base_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithPrequeliteDictionary:base:");
}

id objc_msgSend_initWithPreviousServerChangeToken_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithPreviousServerChangeToken:");
}

id objc_msgSend_initWithPrivateChangeToken_sharedChangeToken_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithPrivateChangeToken:sharedChangeToken:");
}

id objc_msgSend_initWithProfile_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithProfile:");
}

id objc_msgSend_initWithProperties_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithProperties:");
}

id objc_msgSend_initWithProperty_andKeys_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithProperty:andKeys:");
}

id objc_msgSend_initWithPushRepository_priority_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithPushRepository:priority:");
}

id objc_msgSend_initWithPushSessionTracker_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithPushSessionTracker:error:");
}

id objc_msgSend_initWithQuery_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithQuery:");
}

id objc_msgSend_initWithQueryCursor_additionalInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithQueryCursor:additionalInfo:");
}

id objc_msgSend_initWithRealResourceType_realFingerPrint_outputType_dimensions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithRealResourceType:realFingerPrint:outputType:dimensions:");
}

id objc_msgSend_initWithRecord_action_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithRecord:action:");
}

id objc_msgSend_initWithRecord_generation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithRecord:generation:");
}

id objc_msgSend_initWithRecord_ignoredDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithRecord:ignoredDate:");
}

id objc_msgSend_initWithRecordBuilders_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithRecordBuilders:");
}

id objc_msgSend_initWithRecordClass_scopedIdentifier_relatedRecordClass_relatedIdentifier_( void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithRecordClass:scopedIdentifier:relatedRecordClass:relatedIdentifier:");
}

id objc_msgSend_initWithRecordID_action_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithRecordID:action:");
}

id objc_msgSend_initWithRecordID_resourceKey_fingerPrint_filename_groupName_timeRange_useEncryptedStream_( void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithRecordID:resourceKey:fingerPrint:filename:groupName:timeRange:useEncryptedStream:");
}

id objc_msgSend_initWithRecordIDs_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithRecordIDs:");
}

id objc_msgSend_initWithRecordName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithRecordName:");
}

id objc_msgSend_initWithRecordName_zoneID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithRecordName:zoneID:");
}

id objc_msgSend_initWithRecordType_predicate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithRecordType:predicate:");
}

id objc_msgSend_initWithRecordType_predicate_resultsLimit_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithRecordType:predicate:resultsLimit:");
}

id objc_msgSend_initWithRecordType_recordID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithRecordType:recordID:");
}

id objc_msgSend_initWithRecordZoneID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithRecordZoneID:");
}

id objc_msgSend_initWithRecordZoneIDs_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithRecordZoneIDs:");
}

id objc_msgSend_initWithRecordZoneIDs_configurationsByRecordZoneID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithRecordZoneIDs:configurationsByRecordZoneID:");
}

id objc_msgSend_initWithRecordZonesToSave_recordZoneIDsToDelete_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithRecordZonesToSave:recordZoneIDsToDelete:");
}

id objc_msgSend_initWithRecordsToSave_recordIDsToDelete_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithRecordsToSave:recordIDsToDelete:");
}

id objc_msgSend_initWithRequest_reschedulerManager_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithRequest:reschedulerManager:");
}

id objc_msgSend_initWithResource_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithResource:");
}

id objc_msgSend_initWithResource_taskIdentifier_launchHandler_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithResource:taskIdentifier:launchHandler:completionHandler:");
}

id objc_msgSend_initWithResource_uploadIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithResource:uploadIdentifier:");
}

id objc_msgSend_initWithResourceIdentity_itemScopedIdentifier_resourceType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithResourceIdentity:itemScopedIdentifier:resourceType:");
}

id objc_msgSend_initWithResourceType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithResourceType:");
}

id objc_msgSend_initWithResourceType_defaultSourceBundleIdentifier_fingerprintContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithResourceType:defaultSourceBundleIdentifier:fingerprintContext:");
}

id objc_msgSend_initWithRootRecord_shareID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithRootRecord:shareID:");
}

id objc_msgSend_initWithRule_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithRule:");
}

id objc_msgSend_initWithSQL_generation_now_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithSQL:generation:now:");
}

id objc_msgSend_initWithSQL_now_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithSQL:now:");
}

id objc_msgSend_initWithScopeIdentifier_exitState_supervisorInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithScopeIdentifier:exitState:supervisorInfo:");
}

id objc_msgSend_initWithScopeIdentifier_identifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithScopeIdentifier:identifier:");
}

id objc_msgSend_initWithScopeIdentifier_identifier_scopeIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithScopeIdentifier:identifier:scopeIndex:");
}

id objc_msgSend_initWithScopeIdentifier_scopeType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithScopeIdentifier:scopeType:");
}

id objc_msgSend_initWithScopeIdentifiers_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithScopeIdentifiers:");
}

id objc_msgSend_initWithScopeIdentifiers_engineLibrary_filter_delegate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithScopeIdentifiers:engineLibrary:filter:delegate:");
}

id objc_msgSend_initWithScopeProvider_destinationZoneIdentification_sharedZoneIdentification_propertyMapping_currentUserRecordID_targetMapping_fetchCache_cplEnabledDate_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "initWithScopeProvider:destinationZoneIdentification:sharedZoneIdentification:propertyMapping:currentUserRecor dID:targetMapping:fetchCache:cplEnabledDate:");
}

id objc_msgSend_initWithScopedIdentifier_otherScopedIdentifier_targetState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithScopedIdentifier:otherScopedIdentifier:targetState:");
}

id objc_msgSend_initWithSequenceNumber_expectedDate_scheduler_configuration_scopeFilter_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithSequenceNumber:expectedDate:scheduler:configuration:scopeFilter:");
}

id objc_msgSend_initWithSerializedString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithSerializedString:");
}

id objc_msgSend_initWithServiceName_functionName_responseClass_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithServiceName:functionName:responseClass:");
}

id objc_msgSend_initWithShareMetadatas_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithShareMetadatas:");
}

id objc_msgSend_initWithShareURLs_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithShareURLs:");
}

id objc_msgSend_initWithStatement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithStatement:");
}

id objc_msgSend_initWithStore_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithStore:");
}

id objc_msgSend_initWithStore_expandedClientBatch_expandedCloudBatch_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithStore:expandedClientBatch:expandedCloudBatch:");
}

id objc_msgSend_initWithStore_revertedChangesBatch_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithStore:revertedChangesBatch:");
}

id objc_msgSend_initWithStore_scopesChangeBatch_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithStore:scopesChangeBatch:");
}

id objc_msgSend_initWithStore_table_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithStore:table:");
}

id objc_msgSend_initWithString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithString:");
}

id objc_msgSend_initWithSuiteName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithSuiteName:");
}

id objc_msgSend_initWithTask_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithTask:");
}

id objc_msgSend_initWithTask_request_rescheduler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithTask:request:rescheduler:");
}

id objc_msgSend_initWithTask_scopedIdentifiers_destinationZoneIdentification_sharedZoneIdentification_targetMapping_propertyMapping_fingerprintContext_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "initWithTask:scopedIdentifiers:destinationZoneIdentification:sharedZoneIdentification:targetMapping:propertyM apping:fingerprintContext:");
}

id objc_msgSend_initWithTaskIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithTaskIdentifier:");
}

id objc_msgSend_initWithTaskIdentifier_involvedProcesses_relatedApplications_groupName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithTaskIdentifier:involvedProcesses:relatedApplications:groupName:");
}

id objc_msgSend_initWithTimeIntervalSinceReferenceDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithTimeIntervalSinceReferenceDate:");
}

id objc_msgSend_initWithTranslator_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithTranslator:");
}

id objc_msgSend_initWithTypeName_defaultValue_objcClass_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithTypeName:defaultValue:objcClass:");
}

id objc_msgSend_initWithUploadIdentifier_flags_priority_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithUploadIdentifier:flags:priority:");
}

id objc_msgSend_initWithUserDefaults_bundleIdentifier_supportedLibraryIdentifiers_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithUserDefaults:bundleIdentifier:supportedLibraryIdentifiers:");
}

id objc_msgSend_initWithUserIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithUserIdentifier:");
}

id objc_msgSend_initWithUserIdentityLookupInfos_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithUserIdentityLookupInfos:");
}

id objc_msgSend_initWithUserRecordID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithUserRecordID:");
}

id objc_msgSend_initWithUserRecordID_scopeProvider_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithUserRecordID:scopeProvider:");
}

id objc_msgSend_initWithVariables_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithVariables:");
}

id objc_msgSend_initWithVariables_object_sql_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithVariables:object:sql:");
}

id objc_msgSend_initWithVolumeURL_queue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithVolumeURL:queue:");
}

id objc_msgSend_initWithWrapper_clientCount_isOpened_openError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithWrapper:clientCount:isOpened:openError:");
}

id objc_msgSend_initWithWrappers_queue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithWrappers:queue:");
}

id objc_msgSend_initWithZone_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithZone:");
}

id objc_msgSend_initWithZone_options_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithZone:options:");
}

id objc_msgSend_initWithZoneID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithZoneID:");
}

id objc_msgSend_initWithZoneID_options_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithZoneID:options:");
}

id objc_msgSend_initWithZoneName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithZoneName:");
}

id objc_msgSend_initWithZoneName_ownerName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithZoneName:ownerName:");
}

id objc_msgSend_initWithZoneName_ownerName_databaseScope_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithZoneName:ownerName:databaseScope:");
}

id objc_msgSend_init_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "init_");
}

id objc_msgSend_initialDownloadDate(void *a1, const char *a2, ...)
{
  return _[a1 initialDownloadDate];
}

id objc_msgSend_initialDownloadHelper_checkActiveAccountWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initialDownloadHelper:checkActiveAccountWithCompletionHandler:");
}

id objc_msgSend_initialDownloadIsRunning(void *a1, const char *a2, ...)
{
  return _[a1 initialDownloadIsRunning];
}

id objc_msgSend_initialSyncAnchorForScope_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initialSyncAnchorForScope:");
}

id objc_msgSend_initialSyncAnchorVar(void *a1, const char *a2, ...)
{
  return _[a1 initialSyncAnchorVar];
}

id objc_msgSend_initialSyncDate(void *a1, const char *a2, ...)
{
  return _[a1 initialSyncDate];
}

id objc_msgSend_initialSyncDateForScope_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initialSyncDateForScope:");
}

id objc_msgSend_initializeStorage(void *a1, const char *a2, ...)
{
  return _[a1 initializeStorage];
}

id objc_msgSend_injectionForDefaultValuesUpdate(void *a1, const char *a2, ...)
{
  return _[a1 injectionForDefaultValuesUpdate];
}

id objc_msgSend_injectionForUpdates_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "injectionForUpdates:");
}

id objc_msgSend_injectionForValues_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "injectionForValues:");
}

id objc_msgSend_insertObject_atIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "insertObject:atIndex:");
}

id objc_msgSend_intAtIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "intAtIndex:");
}

id objc_msgSend_intValue(void *a1, const char *a2, ...)
{
  return _[a1 intValue];
}

id objc_msgSend_integerAtIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "integerAtIndex:");
}

id objc_msgSend_integerForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "integerForKey:");
}

id objc_msgSend_integerType(void *a1, const char *a2, ...)
{
  return _[a1 integerType];
}

id objc_msgSend_integerValue(void *a1, const char *a2, ...)
{
  return _[a1 integerValue];
}

id objc_msgSend_intent(void *a1, const char *a2, ...)
{
  return _[a1 intent];
}

id objc_msgSend_interestingZoneIDsForCoordinator_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "interestingZoneIDsForCoordinator:");
}

id objc_msgSend_interfaceWithProtocol_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "interfaceWithProtocol:");
}

id objc_msgSend_interval(void *a1, const char *a2, ...)
{
  return _[a1 interval];
}

id objc_msgSend_invalidClientCacheErrorWithReason_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "invalidClientCacheErrorWithReason:");
}

id objc_msgSend_invalidCloudCacheErrorWithReason_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "invalidCloudCacheErrorWithReason:");
}

id objc_msgSend_invalidScopeErrorWithScopeIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "invalidScopeErrorWithScopeIdentifier:");
}

id objc_msgSend_invalidScopeErrorWithScopeIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "invalidScopeErrorWithScopeIndex:");
}

id objc_msgSend_invalidScopeErrorWithScopedIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "invalidScopeErrorWithScopedIdentifier:");
}

id objc_msgSend_invalidate(void *a1, const char *a2, ...)
{
  return _[a1 invalidate];
}

id objc_msgSend_invoke(void *a1, const char *a2, ...)
{
  return _[a1 invoke];
}

id objc_msgSend_involvedProcesses(void *a1, const char *a2, ...)
{
  return _[a1 involvedProcesses];
}

id objc_msgSend_isActivated(void *a1, const char *a2, ...)
{
  return _[a1 isActivated];
}

id objc_msgSend_isAlive(void *a1, const char *a2, ...)
{
  return _[a1 isAlive];
}

id objc_msgSend_isAppLibrary(void *a1, const char *a2, ...)
{
  return _[a1 isAppLibrary];
}

id objc_msgSend_isAssetChange(void *a1, const char *a2, ...)
{
  return _[a1 isAssetChange];
}

id objc_msgSend_isAuxiliaryOperationResultRelevant(void *a1, const char *a2, ...)
{
  return _[a1 isAuxiliaryOperationResultRelevant];
}

id objc_msgSend_isAvailable(void *a1, const char *a2, ...)
{
  return _[a1 isAvailable];
}

id objc_msgSend_isBlocked(void *a1, const char *a2, ...)
{
  return _[a1 isBlocked];
}

id objc_msgSend_isBoostable(void *a1, const char *a2, ...)
{
  return _[a1 isBoostable];
}

id objc_msgSend_isCPLEngineParametersStorageKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isCPLEngineParametersStorageKey:");
}

id objc_msgSend_isCPLError(void *a1, const char *a2, ...)
{
  return _[a1 isCPLError];
}

id objc_msgSend_isCPLErrorWithCode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isCPLErrorWithCode:");
}

id objc_msgSend_isCPLOperationCancelledError(void *a1, const char *a2, ...)
{
  return _[a1 isCPLOperationCancelledError];
}

id objc_msgSend_isCPLOperationDeferredError(void *a1, const char *a2, ...)
{
  return _[a1 isCPLOperationDeferredError];
}

id objc_msgSend_isCPLThrottlingError(void *a1, const char *a2, ...)
{
  return _[a1 isCPLThrottlingError];
}

id objc_msgSend_isCameraRunning(void *a1, const char *a2, ...)
{
  return _[a1 isCameraRunning];
}

id objc_msgSend_isCancelled(void *a1, const char *a2, ...)
{
  return _[a1 isCancelled];
}

id objc_msgSend_isClientInForeground(void *a1, const char *a2, ...)
{
  return _[a1 isClientInForeground];
}

id objc_msgSend_isClientInSyncWithClientCache(void *a1, const char *a2, ...)
{
  return _[a1 isClientInSyncWithClientCache];
}

id objc_msgSend_isCloudKitOperationCancelledError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isCloudKitOperationCancelledError:");
}

id objc_msgSend_isCoherent(void *a1, const char *a2, ...)
{
  return _[a1 isCoherent];
}

id objc_msgSend_isContainerHasBeenWipedError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isContainerHasBeenWipedError:");
}

id objc_msgSend_isCurrentUser(void *a1, const char *a2, ...)
{
  return _[a1 isCurrentUser];
}

id objc_msgSend_isDelete(void *a1, const char *a2, ...)
{
  return _[a1 isDelete];
}

id objc_msgSend_isDisabled(void *a1, const char *a2, ...)
{
  return _[a1 isDisabled];
}

id objc_msgSend_isEmpty(void *a1, const char *a2, ...)
{
  return _[a1 isEmpty];
}

id objc_msgSend_isEqual_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEqual:");
}

id objc_msgSend_isEqualToString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEqualToString:");
}

id objc_msgSend_isExceedingQuota(void *a1, const char *a2, ...)
{
  return _[a1 isExceedingQuota];
}

id objc_msgSend_isExecuting(void *a1, const char *a2, ...)
{
  return _[a1 isExecuting];
}

id objc_msgSend_isExpiredForNow_withLeeway_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isExpiredForNow:withLeeway:");
}

id objc_msgSend_isFakeDerivative_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isFakeDerivative:");
}

id objc_msgSend_isFavorite(void *a1, const char *a2, ...)
{
  return _[a1 isFavorite];
}

id objc_msgSend_isFinished(void *a1, const char *a2, ...)
{
  return _[a1 isFinished];
}

id objc_msgSend_isForStableHash(void *a1, const char *a2, ...)
{
  return _[a1 isForStableHash];
}

id objc_msgSend_isForeground(void *a1, const char *a2, ...)
{
  return _[a1 isForeground];
}

id objc_msgSend_isForegroundOperationForIntent_priority_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isForegroundOperationForIntent:priority:");
}

id objc_msgSend_isFullRecord(void *a1, const char *a2, ...)
{
  return _[a1 isFullRecord];
}

id objc_msgSend_isHidden(void *a1, const char *a2, ...)
{
  return _[a1 isHidden];
}

id objc_msgSend_isHighPriority(void *a1, const char *a2, ...)
{
  return _[a1 isHighPriority];
}

id objc_msgSend_isInterestedInZoneID_forCoordinator_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isInterestedInZoneID:forCoordinator:");
}

id objc_msgSend_isKeyAsset(void *a1, const char *a2, ...)
{
  return _[a1 isKeyAsset];
}

id objc_msgSend_isKeyReadOnly_recordClass_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isKeyReadOnly:recordClass:");
}

id objc_msgSend_isKeychainCDPEnabled(void *a1, const char *a2, ...)
{
  return _[a1 isKeychainCDPEnabled];
}

id objc_msgSend_isKnownToServer(void *a1, const char *a2, ...)
{
  return _[a1 isKnownToServer];
}

id objc_msgSend_isLargeUploadSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isLargeUploadSize:");
}

id objc_msgSend_isLibraryManager(void *a1, const char *a2, ...)
{
  return _[a1 isLibraryManager];
}

id objc_msgSend_isLibraryManager_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isLibraryManager:");
}

id objc_msgSend_isLocalScopeIndexValid_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isLocalScopeIndexValid:");
}

id objc_msgSend_isMMCSv2(void *a1, const char *a2, ...)
{
  return _[a1 isMMCSv2];
}

id objc_msgSend_isManagementLibraryManager_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isManagementLibraryManager:");
}

id objc_msgSend_isMasterChange(void *a1, const char *a2, ...)
{
  return _[a1 isMasterChange];
}

id objc_msgSend_isMemberOfClass_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isMemberOfClass:");
}

id objc_msgSend_isNetworkConnected(void *a1, const char *a2, ...)
{
  return _[a1 isNetworkConnected];
}

id objc_msgSend_isNetworkConstrained(void *a1, const char *a2, ...)
{
  return _[a1 isNetworkConstrained];
}

id objc_msgSend_isNewCloudKitScope_compatibleWithOldCloudKitScope_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isNewCloudKitScope:compatibleWithOldCloudKitScope:");
}

id objc_msgSend_isOngoing(void *a1, const char *a2, ...)
{
  return _[a1 isOngoing];
}

id objc_msgSend_isOperationBlocked_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isOperationBlocked:");
}

id objc_msgSend_isOperationCancelledOrDeferredError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isOperationCancelledOrDeferredError:");
}

id objc_msgSend_isOperationThrottledError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isOperationThrottledError:");
}

id objc_msgSend_isPartialFailureError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isPartialFailureError:");
}

id objc_msgSend_isRecordNotFoundError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isRecordNotFoundError:");
}

id objc_msgSend_isReference(void *a1, const char *a2, ...)
{
  return _[a1 isReference];
}

id objc_msgSend_isRejected(void *a1, const char *a2, ...)
{
  return _[a1 isRejected];
}

id objc_msgSend_isScopeReadonlyFromCKShare_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isScopeReadonlyFromCKShare:");
}

id objc_msgSend_isShared(void *a1, const char *a2, ...)
{
  return _[a1 isShared];
}

id objc_msgSend_isSharedInScopeWithIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isSharedInScopeWithIdentifier:");
}

id objc_msgSend_isSparseFullChange(void *a1, const char *a2, ...)
{
  return _[a1 isSparseFullChange];
}

id objc_msgSend_isStale(void *a1, const char *a2, ...)
{
  return _[a1 isStale];
}

id objc_msgSend_isSubclassOfClass_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isSubclassOfClass:");
}

id objc_msgSend_isSupportedShare_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isSupportedShare:");
}

id objc_msgSend_isSupportedShareType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isSupportedShareType:");
}

id objc_msgSend_isSupportedZoneID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isSupportedZoneID:");
}

id objc_msgSend_isSystemLibrary(void *a1, const char *a2, ...)
{
  return _[a1 isSystemLibrary];
}

id objc_msgSend_isValid(void *a1, const char *a2, ...)
{
  return _[a1 isValid];
}

id objc_msgSend_isVeryLargeUploadSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isVeryLargeUploadSize:");
}

id objc_msgSend_isWalrusEnabled(void *a1, const char *a2, ...)
{
  return _[a1 isWalrusEnabled];
}

id objc_msgSend_isWrapperOpened_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isWrapperOpened:");
}

id objc_msgSend_isZoneish(void *a1, const char *a2, ...)
{
  return _[a1 isZoneish];
}

id objc_msgSend_itemCount(void *a1, const char *a2, ...)
{
  return _[a1 itemCount];
}

id objc_msgSend_itemIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 itemIdentifier];
}

id objc_msgSend_itemScopedIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 itemScopedIdentifier];
}

id objc_msgSend_itemType(void *a1, const char *a2, ...)
{
  return _[a1 itemType];
}

id objc_msgSend_itemTypeHint(void *a1, const char *a2, ...)
{
  return _[a1 itemTypeHint];
}

id objc_msgSend_keepUnacknowledgedBatch_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "keepUnacknowledgedBatch:");
}

id objc_msgSend_key(void *a1, const char *a2, ...)
{
  return _[a1 key];
}

id objc_msgSend_keyAssetIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 keyAssetIdentifier];
}

id objc_msgSend_keyEnumerator(void *a1, const char *a2, ...)
{
  return _[a1 keyEnumerator];
}

id objc_msgSend_keyForLibraryIdentifier_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "keyForLibraryIdentifier:error:");
}

id objc_msgSend_keywords(void *a1, const char *a2, ...)
{
  return _[a1 keywords];
}

id objc_msgSend_largeResourceSizeThreshold(void *a1, const char *a2, ...)
{
  return _[a1 largeResourceSizeThreshold];
}

id objc_msgSend_lastCPLError(void *a1, const char *a2, ...)
{
  return _[a1 lastCPLError];
}

id objc_msgSend_lastCPLUpgradeDate(void *a1, const char *a2, ...)
{
  return _[a1 lastCPLUpgradeDate];
}

id objc_msgSend_lastClearedPushVar(void *a1, const char *a2, ...)
{
  return _[a1 lastClearedPushVar];
}

id objc_msgSend_lastCompletionDateVar(void *a1, const char *a2, ...)
{
  return _[a1 lastCompletionDateVar];
}

id objc_msgSend_lastDBUpgradeDate(void *a1, const char *a2, ...)
{
  return _[a1 lastDBUpgradeDate];
}

id objc_msgSend_lastDateOfClearedPushRepositoryForScope_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lastDateOfClearedPushRepositoryForScope:");
}

id objc_msgSend_lastDateOfCompletedPullFromTransportForScope_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lastDateOfCompletedPullFromTransportForScope:");
}

id objc_msgSend_lastError(void *a1, const char *a2, ...)
{
  return _[a1 lastError];
}

id objc_msgSend_lastOSBuildUpgradeDate(void *a1, const char *a2, ...)
{
  return _[a1 lastOSBuildUpgradeDate];
}

id objc_msgSend_lastObject(void *a1, const char *a2, ...)
{
  return _[a1 lastObject];
}

id objc_msgSend_lastOperationRequestUUIDs(void *a1, const char *a2, ...)
{
  return _[a1 lastOperationRequestUUIDs];
}

id objc_msgSend_lastPathComponent(void *a1, const char *a2, ...)
{
  return _[a1 lastPathComponent];
}

id objc_msgSend_lastSeenCPLVersion(void *a1, const char *a2, ...)
{
  return _[a1 lastSeenCPLVersion];
}

id objc_msgSend_lastSeenDBVersion(void *a1, const char *a2, ...)
{
  return _[a1 lastSeenDBVersion];
}

id objc_msgSend_lastSeenOSBuildVersion(void *a1, const char *a2, ...)
{
  return _[a1 lastSeenOSBuildVersion];
}

id objc_msgSend_lastSharedDate(void *a1, const char *a2, ...)
{
  return _[a1 lastSharedDate];
}

id objc_msgSend_lastUpdatedDate(void *a1, const char *a2, ...)
{
  return _[a1 lastUpdatedDate];
}

id objc_msgSend_lastViewedDate(void *a1, const char *a2, ...)
{
  return _[a1 lastViewedDate];
}

id objc_msgSend_laterDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "laterDate:");
}

id objc_msgSend_launch(void *a1, const char *a2, ...)
{
  return _[a1 launch];
}

id objc_msgSend_launchAuxiliaryOperation_type_withContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "launchAuxiliaryOperation:type:withContext:");
}

id objc_msgSend_launchOperation_type_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "launchOperation:type:");
}

id objc_msgSend_launchOperation_type_forClient_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "launchOperation:type:forClient:");
}

id objc_msgSend_launchOperation_type_withContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "launchOperation:type:withContext:");
}

id objc_msgSend_launchOperation_type_withContext_sourceBundleIdentifiers_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "launchOperation:type:withContext:sourceBundleIdentifiers:");
}

id objc_msgSend_launchTask(void *a1, const char *a2, ...)
{
  return _[a1 launchTask];
}

id objc_msgSend_launchTransportTask_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "launchTransportTask:");
}

id objc_msgSend_length(void *a1, const char *a2, ...)
{
  return _[a1 length];
}

id objc_msgSend_libraryClosedError(void *a1, const char *a2, ...)
{
  return _[a1 libraryClosedError];
}

id objc_msgSend_libraryCreationDate(void *a1, const char *a2, ...)
{
  return _[a1 libraryCreationDate];
}

id objc_msgSend_libraryDoesNotAutoOpenError(void *a1, const char *a2, ...)
{
  return _[a1 libraryDoesNotAutoOpenError];
}

id objc_msgSend_libraryIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 libraryIdentifier];
}

id objc_msgSend_libraryInfo(void *a1, const char *a2, ...)
{
  return _[a1 libraryInfo];
}

id objc_msgSend_libraryInfoRecordName(void *a1, const char *a2, ...)
{
  return _[a1 libraryInfoRecordName];
}

id objc_msgSend_libraryManager(void *a1, const char *a2, ...)
{
  return _[a1 libraryManager];
}

id objc_msgSend_libraryManager_backgroundDownloadDidFailForResource_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "libraryManager:backgroundDownloadDidFailForResource:");
}

id objc_msgSend_libraryManager_backgroundDownloadDidFinishForResource_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "libraryManager:backgroundDownloadDidFinishForResource:");
}

id objc_msgSend_libraryManager_didFinishForceSyncTask_withErrors_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "libraryManager:didFinishForceSyncTask:withErrors:");
}

id objc_msgSend_libraryManager_downloadDidFinishForResourceTransferTask_finalResource_withError_( void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "libraryManager:downloadDidFinishForResourceTransferTask:finalResource:withError:");
}

id objc_msgSend_libraryManager_getStatusDictionaryWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "libraryManager:getStatusDictionaryWithCompletionHandler:");
}

id objc_msgSend_libraryManager_getStatusWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "libraryManager:getStatusWithCompletionHandler:");
}

id objc_msgSend_libraryManager_inMemoryDownloadDidFinishForResourceTransferTask_data_withError_( void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "libraryManager:inMemoryDownloadDidFinishForResourceTransferTask:data:withError:");
}

id objc_msgSend_libraryManager_noteClientIsInForeground_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "libraryManager:noteClientIsInForeground:");
}

id objc_msgSend_libraryManager_provideLocalResource_recordClass_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "libraryManager:provideLocalResource:recordClass:completionHandler:");
}

id objc_msgSend_libraryManager_providePayloadForComputeStates_inFolderWithURL_completionHandler_( void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "libraryManager:providePayloadForComputeStates:inFolderWithURL:completionHandler:");
}

id objc_msgSend_libraryManager_pushAllChangesWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "libraryManager:pushAllChangesWithCompletionHandler:");
}

id objc_msgSend_libraryManager_uploadDidFinishForResourceTransferTask_withError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "libraryManager:uploadDidFinishForResourceTransferTask:withError:");
}

id objc_msgSend_libraryManager_uploadDidProgress_forResourceTransferTask_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "libraryManager:uploadDidProgress:forResourceTransferTask:");
}

id objc_msgSend_libraryManager_uploadDidStartForResourceTransferTask_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "libraryManager:uploadDidStartForResourceTransferTask:");
}

id objc_msgSend_libraryManagerDidUpdateSizeOfResourcesToUploadToSize_sizeOfOriginalResourcesToUpload_numberOfImages_numberOfVideos_numberOfOtherItems_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "libraryManagerDidUpdateSizeOfResourcesToUploadToSize:sizeOfOriginalResourcesToUpload:numberOfImages:numberOfV ideos:numberOfOtherItems:");
}

id objc_msgSend_libraryManagerDidUpdateStatusWithProperties_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "libraryManagerDidUpdateStatusWithProperties:");
}

id objc_msgSend_libraryManagerHasBeenReplaced(void *a1, const char *a2, ...)
{
  return _[a1 libraryManagerHasBeenReplaced];
}

id objc_msgSend_libraryManagerHasChangesToPull(void *a1, const char *a2, ...)
{
  return _[a1 libraryManagerHasChangesToPull];
}

id objc_msgSend_libraryManagerHasChangesToPull_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "libraryManagerHasChangesToPull:");
}

id objc_msgSend_libraryManagerHasStatusChanges(void *a1, const char *a2, ...)
{
  return _[a1 libraryManagerHasStatusChanges];
}

id objc_msgSend_libraryManagerHasStatusChanges_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "libraryManagerHasStatusChanges:");
}

id objc_msgSend_libraryOptions(void *a1, const char *a2, ...)
{
  return _[a1 libraryOptions];
}

id objc_msgSend_libraryVersion(void *a1, const char *a2, ...)
{
  return _[a1 libraryVersion];
}

id objc_msgSend_loadRegisteredWrappers(void *a1, const char *a2, ...)
{
  return _[a1 loadRegisteredWrappers];
}

id objc_msgSend_localChangeBatchFromCloudBatch_usingMapping_withError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "localChangeBatchFromCloudBatch:usingMapping:withError:");
}

id objc_msgSend_localIndex(void *a1, const char *a2, ...)
{
  return _[a1 localIndex];
}

id objc_msgSend_localIndexVar(void *a1, const char *a2, ...)
{
  return _[a1 localIndexVar];
}

id objc_msgSend_localIndexes(void *a1, const char *a2, ...)
{
  return _[a1 localIndexes];
}

id objc_msgSend_localIndexesInjection(void *a1, const char *a2, ...)
{
  return _[a1 localIndexesInjection];
}

id objc_msgSend_localScopeIndexForScopeIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "localScopeIndexForScopeIdentifier:");
}

id objc_msgSend_localScopedIdentifierForCloudScopedIdentifier_isFinal_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "localScopedIdentifierForCloudScopedIdentifier:isFinal:");
}

id objc_msgSend_localScopedIdentifierForCloudScopedIdentifierIncludeRemappedRecords_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "localScopedIdentifierForCloudScopedIdentifierIncludeRemappedRecords:");
}

id objc_msgSend_localWakingRegistrationWithIdentifier_contextualPredicate_callback_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "localWakingRegistrationWithIdentifier:contextualPredicate:callback:");
}

id objc_msgSend_localeWithLocaleIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "localeWithLocaleIdentifier:");
}

id objc_msgSend_localizedDescription(void *a1, const char *a2, ...)
{
  return _[a1 localizedDescription];
}

id objc_msgSend_location(void *a1, const char *a2, ...)
{
  return _[a1 location];
}

id objc_msgSend_locationWithCPLLocationDictionary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "locationWithCPLLocationDictionary:");
}

id objc_msgSend_longAtIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "longAtIndex:");
}

id objc_msgSend_longLongValue(void *a1, const char *a2, ...)
{
  return _[a1 longLongValue];
}

id objc_msgSend_lookupInfo(void *a1, const char *a2, ...)
{
  return _[a1 lookupInfo];
}

id objc_msgSend_lowercaseLetterCharacterSet(void *a1, const char *a2, ...)
{
  return _[a1 lowercaseLetterCharacterSet];
}

id objc_msgSend_lowercaseString(void *a1, const char *a2, ...)
{
  return _[a1 lowercaseString];
}

id objc_msgSend_mainBundle(void *a1, const char *a2, ...)
{
  return _[a1 mainBundle];
}

id objc_msgSend_mainScopeIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 mainScopeIdentifier];
}

id objc_msgSend_mainScopeSupportsSharingScopeWithIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mainScopeSupportsSharingScopeWithIdentifier:");
}

id objc_msgSend_mainSourceBundleIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 mainSourceBundleIdentifier];
}

id objc_msgSend_mainTable(void *a1, const char *a2, ...)
{
  return _[a1 mainTable];
}

id objc_msgSend_makeObjectsPerformSelector_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "makeObjectsPerformSelector:");
}

id objc_msgSend_manualSortOrder(void *a1, const char *a2, ...)
{
  return _[a1 manualSortOrder];
}

id objc_msgSend_mappingExitSources(void *a1, const char *a2, ...)
{
  return _[a1 mappingExitSources];
}

id objc_msgSend_mappingForMoveSteps(void *a1, const char *a2, ...)
{
  return _[a1 mappingForMoveSteps];
}

id objc_msgSend_mappingList(void *a1, const char *a2, ...)
{
  return _[a1 mappingList];
}

id objc_msgSend_markAsCorrupted(void *a1, const char *a2, ...)
{
  return _[a1 markAsCorrupted];
}

id objc_msgSend_markLibraryManagerAsInvalid(void *a1, const char *a2, ...)
{
  return _[a1 markLibraryManagerAsInvalid];
}

id objc_msgSend_masterIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 masterIdentifier];
}

id objc_msgSend_masterScopedIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 masterScopedIdentifier];
}

id objc_msgSend_matchesParameters_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "matchesParameters:");
}

id objc_msgSend_maximumComputeStatesToUploadPerBatch(void *a1, const char *a2, ...)
{
  return _[a1 maximumComputeStatesToUploadPerBatch];
}

id objc_msgSend_maximumResourceDownloadSizeForResourceType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "maximumResourceDownloadSizeForResourceType:");
}

id objc_msgSend_mediaGroupIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 mediaGroupIdentifier];
}

id objc_msgSend_mediaItemMaker(void *a1, const char *a2, ...)
{
  return _[a1 mediaItemMaker];
}

id objc_msgSend_mediaItemMakerData(void *a1, const char *a2, ...)
{
  return _[a1 mediaItemMakerData];
}

id objc_msgSend_mediaMetaData(void *a1, const char *a2, ...)
{
  return _[a1 mediaMetaData];
}

id objc_msgSend_mediaMetaDataType(void *a1, const char *a2, ...)
{
  return _[a1 mediaMetaDataType];
}

id objc_msgSend_mergeFrom_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mergeFrom:");
}

id objc_msgSend_mergeRecord_isSharedRecord_inPrivateRecord_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mergeRecord:isSharedRecord:inPrivateRecord:");
}

id objc_msgSend_mergeRecordChangeWithNewRecordChange_direction_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mergeRecordChangeWithNewRecordChange:direction:");
}

id objc_msgSend_mergeTargetPersonIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 mergeTargetPersonIdentifier];
}

id objc_msgSend_mergingFlags_previousFlags_changeType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mergingFlags:previousFlags:changeType:");
}

id objc_msgSend_mightBeBlocked(void *a1, const char *a2, ...)
{
  return _[a1 mightBeBlocked];
}

id objc_msgSend_migrate(void *a1, const char *a2, ...)
{
  return _[a1 migrate];
}

id objc_msgSend_migrationDescription(void *a1, const char *a2, ...)
{
  return _[a1 migrationDescription];
}

id objc_msgSend_minimumRuntime(void *a1, const char *a2, ...)
{
  return _[a1 minimumRuntime];
}

id objc_msgSend_minimumRuntimeLeeway(void *a1, const char *a2, ...)
{
  return _[a1 minimumRuntimeLeeway];
}

id objc_msgSend_missingError(void *a1, const char *a2, ...)
{
  return _[a1 missingError];
}

id objc_msgSend_modifies(void *a1, const char *a2, ...)
{
  return _[a1 modifies];
}

id objc_msgSend_momentShare(void *a1, const char *a2, ...)
{
  return _[a1 momentShare];
}

id objc_msgSend_mostRecentConfigurationDictionary(void *a1, const char *a2, ...)
{
  return _[a1 mostRecentConfigurationDictionary];
}

id objc_msgSend_moveItemAtURL_toURL_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "moveItemAtURL:toURL:error:");
}

id objc_msgSend_moveRecordsWithIDs_followRemapping_sourceType_destinationRecordIDs_destinationType_helper_completionHandler_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "moveRecordsWithIDs:followRemapping:sourceType:destinationRecordIDs:destinationType:helper:completionHandler:");
}

id objc_msgSend_moveRecordsWithIDs_followRemapping_sourceType_destinationRecordIDs_destinationType_helper_finalizeMoveChanges_completionHandler_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "moveRecordsWithIDs:followRemapping:sourceType:destinationRecordIDs:destinationType:helper:finalizeMoveChanges :completionHandler:");
}

id objc_msgSend_moveStep(void *a1, const char *a2, ...)
{
  return _[a1 moveStep];
}

id objc_msgSend_movieData(void *a1, const char *a2, ...)
{
  return _[a1 movieData];
}

id objc_msgSend_mutableCopy(void *a1, const char *a2, ...)
{
  return _[a1 mutableCopy];
}

id objc_msgSend_name(void *a1, const char *a2, ...)
{
  return _[a1 name];
}

id objc_msgSend_nameComponents(void *a1, const char *a2, ...)
{
  return _[a1 nameComponents];
}

id objc_msgSend_nameWithString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "nameWithString:");
}

id objc_msgSend_namesInjection(void *a1, const char *a2, ...)
{
  return _[a1 namesInjection];
}

id objc_msgSend_needsRequestedRecords(void *a1, const char *a2, ...)
{
  return _[a1 needsRequestedRecords];
}

id objc_msgSend_needsToAcquireRescheduler(void *a1, const char *a2, ...)
{
  return _[a1 needsToAcquireRescheduler];
}

id objc_msgSend_needsToSetScopeIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 needsToSetScopeIdentifier];
}

id objc_msgSend_networkBehaviorShouldBeDiscretionaryForForegroundOperation_upload_metadata_( void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "networkBehaviorShouldBeDiscretionaryForForegroundOperation:upload:metadata:");
}

id objc_msgSend_newChangeWithScopedIdentifier_changeType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "newChangeWithScopedIdentifier:changeType:");
}

id objc_msgSend_newCloudKitReschedulerForSession_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "newCloudKitReschedulerForSession:");
}

id objc_msgSend_newDeleteChangeWithScopedIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "newDeleteChangeWithScopedIdentifier:");
}

id objc_msgSend_newEmptyPushContext(void *a1, const char *a2, ...)
{
  return _[a1 newEmptyPushContext];
}

id objc_msgSend_newOperationConfiguration(void *a1, const char *a2, ...)
{
  return _[a1 newOperationConfiguration];
}

id objc_msgSend_newPlatformImplementationForObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "newPlatformImplementationForObject:");
}

id objc_msgSend_newRecordWithScopedIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "newRecordWithScopedIdentifier:");
}

id objc_msgSend_newScopeChangeInferClassWithScopeIdentifier_type_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "newScopeChangeInferClassWithScopeIdentifier:type:");
}

id objc_msgSend_newScopeIdentifierRelativeToMainScopeIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "newScopeIdentifierRelativeToMainScopeIdentifier:");
}

id objc_msgSend_newTaskRequestForSession_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "newTaskRequestForSession:");
}

id objc_msgSend_newTaskRequestWithExpectedDuration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "newTaskRequestWithExpectedDuration:");
}

id objc_msgSend_newTransactionWithIdentifier_description_keepPower_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "newTransactionWithIdentifier:description:keepPower:");
}

id objc_msgSend_next(void *a1, const char *a2, ...)
{
  return _[a1 next];
}

id objc_msgSend_nextBatch(void *a1, const char *a2, ...)
{
  return _[a1 nextBatch];
}

id objc_msgSend_nextBatchOfRecordsToRevert(void *a1, const char *a2, ...)
{
  return _[a1 nextBatchOfRecordsToRevert];
}

id objc_msgSend_nextForcedExitDate(void *a1, const char *a2, ...)
{
  return _[a1 nextForcedExitDate];
}

id objc_msgSend_nextObject(void *a1, const char *a2, ...)
{
  return _[a1 nextObject];
}

id objc_msgSend_nonPrivateFingerprintScheme(void *a1, const char *a2, ...)
{
  return _[a1 nonPrivateFingerprintScheme];
}

id objc_msgSend_notImplementedError(void *a1, const char *a2, ...)
{
  return _[a1 notImplementedError];
}

id objc_msgSend_noteClientIsInBackground(void *a1, const char *a2, ...)
{
  return _[a1 noteClientIsInBackground];
}

id objc_msgSend_noteClientIsInForegroundQuietly_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "noteClientIsInForegroundQuietly:");
}

id objc_msgSend_noteClientIsInSyncWithClientCache(void *a1, const char *a2, ...)
{
  return _[a1 noteClientIsInSyncWithClientCache];
}

id objc_msgSend_noteClientIsNotInSyncWithClientCache(void *a1, const char *a2, ...)
{
  return _[a1 noteClientIsNotInSyncWithClientCache];
}

id objc_msgSend_noteComputeStateDownloadRequest(void *a1, const char *a2, ...)
{
  return _[a1 noteComputeStateDownloadRequest];
}

id objc_msgSend_noteDatabaseWasUpgradedToVersion_fromVersion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "noteDatabaseWasUpgradedToVersion:fromVersion:");
}

id objc_msgSend_noteOtherResetEvent_cause_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "noteOtherResetEvent:cause:");
}

id objc_msgSend_notePruningRequestForResource_realPrune_successful_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "notePruningRequestForResource:realPrune:successful:");
}

id objc_msgSend_notePruningRequestForResource_realPrune_successful_prunedSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "notePruningRequestForResource:realPrune:successful:prunedSize:");
}

id objc_msgSend_noteResetSyncFinished(void *a1, const char *a2, ...)
{
  return _[a1 noteResetSyncFinished];
}

id objc_msgSend_noteScopeNeedsToUploadComputeState(void *a1, const char *a2, ...)
{
  return _[a1 noteScopeNeedsToUploadComputeState];
}

id objc_msgSend_noteServerHasChanges(void *a1, const char *a2, ...)
{
  return _[a1 noteServerHasChanges];
}

id objc_msgSend_noteServerMightBeAvailableNow(void *a1, const char *a2, ...)
{
  return _[a1 noteServerMightBeAvailableNow];
}

id objc_msgSend_noteStoreNeedsToUpdateDisabledFeatures(void *a1, const char *a2, ...)
{
  return _[a1 noteStoreNeedsToUpdateDisabledFeatures];
}

id objc_msgSend_noteZoneIDChangeWasIgnored_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "noteZoneIDChangeWasIgnored:");
}

id objc_msgSend_notificationFromRemoteNotificationDictionary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "notificationFromRemoteNotificationDictionary:");
}

id objc_msgSend_notificationID(void *a1, const char *a2, ...)
{
  return _[a1 notificationID];
}

id objc_msgSend_notificationState(void *a1, const char *a2, ...)
{
  return _[a1 notificationState];
}

id objc_msgSend_notificationType(void *a1, const char *a2, ...)
{
  return _[a1 notificationType];
}

id objc_msgSend_notificationUUID(void *a1, const char *a2, ...)
{
  return _[a1 notificationUUID];
}

id objc_msgSend_notifyAttachedObjectsPullQueueIsFull(void *a1, const char *a2, ...)
{
  return _[a1 notifyAttachedObjectsPullQueueIsFull];
}

id objc_msgSend_notifyAttachedObjectsThatPushRepositoryFlagsCountsHaveChanged(void *a1, const char *a2, ...)
{
  return _[a1 notifyAttachedObjectsThatPushRepositoryFlagsCountsHaveChanged];
}

id objc_msgSend_notifyClientOfStatusChangesIfNecessaryWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "notifyClientOfStatusChangesIfNecessaryWithError:");
}

id objc_msgSend_notifyStatusForRecordViewHasChanged_persist_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "notifyStatusForRecordViewHasChanged:persist:error:");
}

id objc_msgSend_now(void *a1, const char *a2, ...)
{
  return _[a1 now];
}

id objc_msgSend_null(void *a1, const char *a2, ...)
{
  return _[a1 null];
}

id objc_msgSend_numberOfImagesToUpload(void *a1, const char *a2, ...)
{
  return _[a1 numberOfImagesToUpload];
}

id objc_msgSend_numberOfOtherItemsToUpload(void *a1, const char *a2, ...)
{
  return _[a1 numberOfOtherItemsToUpload];
}

id objc_msgSend_numberOfVideosToUpload(void *a1, const char *a2, ...)
{
  return _[a1 numberOfVideosToUpload];
}

id objc_msgSend_numberWithBool_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithBool:");
}

id objc_msgSend_numberWithDouble_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithDouble:");
}

id objc_msgSend_numberWithInt_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithInt:");
}

id objc_msgSend_numberWithInteger_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithInteger:");
}

id objc_msgSend_numberWithLongLong_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithLongLong:");
}

id objc_msgSend_numberWithShort_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithShort:");
}

id objc_msgSend_numberWithUnsignedInteger_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithUnsignedInteger:");
}

id objc_msgSend_numberWithUnsignedLong_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithUnsignedLong:");
}

id objc_msgSend_numberWithUnsignedLongLong_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithUnsignedLongLong:");
}

id objc_msgSend_numberWithUnsignedShort_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithUnsignedShort:");
}

id objc_msgSend_objcClass(void *a1, const char *a2, ...)
{
  return _[a1 objcClass];
}

id objc_msgSend_object(void *a1, const char *a2, ...)
{
  return _[a1 object];
}

id objc_msgSend_objectAtIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "objectAtIndex:");
}

id objc_msgSend_objectAtIndexedSubscript_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "objectAtIndexedSubscript:");
}

id objc_msgSend_objectEnumerator(void *a1, const char *a2, ...)
{
  return _[a1 objectEnumerator];
}

id objc_msgSend_objectForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "objectForKey:");
}

id objc_msgSend_objectForKey_date_expirationDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "objectForKey:date:expirationDate:");
}

id objc_msgSend_objectForKeyedSubscript_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "objectForKeyedSubscript:");
}

id objc_msgSend_objectOfClass_atIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "objectOfClass:atIndex:");
}

id objc_msgSend_observeAsyncCallOn_selector_block_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "observeAsyncCallOn:selector:block:");
}

id objc_msgSend_observeSyncCallOn_selector_block_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "observeSyncCallOn:selector:block:");
}

id objc_msgSend_oldestConfigurationDictionary(void *a1, const char *a2, ...)
{
  return _[a1 oldestConfigurationDictionary];
}

id objc_msgSend_openAtURL_sharedCache_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "openAtURL:sharedCache:error:");
}

id objc_msgSend_openError(void *a1, const char *a2, ...)
{
  return _[a1 openError];
}

id objc_msgSend_openURL_configuration_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "openURL:configuration:completionHandler:");
}

id objc_msgSend_openWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "openWithCompletionHandler:");
}

id objc_msgSend_opened(void *a1, const char *a2, ...)
{
  return _[a1 opened];
}

id objc_msgSend_openedWrapperWithLibraryIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "openedWrapperWithLibraryIdentifier:");
}

id objc_msgSend_operation_forTask_didFinishWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "operation:forTask:didFinishWithError:");
}

id objc_msgSend_operation_updateContextWithBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "operation:updateContextWithBlock:");
}

id objc_msgSend_operation_updateProgress_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "operation:updateProgress:");
}

id objc_msgSend_operationCancelledError(void *a1, const char *a2, ...)
{
  return _[a1 operationCancelledError];
}

id objc_msgSend_operationDescription(void *a1, const char *a2, ...)
{
  return _[a1 operationDescription];
}

id objc_msgSend_operationDidFinish_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "operationDidFinish:");
}

id objc_msgSend_operationDidFinish_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "operationDidFinish:error:");
}

id objc_msgSend_operationDidFinishNow_withError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "operationDidFinishNow:withError:");
}

id objc_msgSend_operationDidFinishWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "operationDidFinishWithError:");
}

id objc_msgSend_operationDidProgressOneBatch_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "operationDidProgressOneBatch:");
}

id objc_msgSend_operationGroup(void *a1, const char *a2, ...)
{
  return _[a1 operationGroup];
}

id objc_msgSend_operationHasBeenCancelled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "operationHasBeenCancelled:");
}

id objc_msgSend_operationID(void *a1, const char *a2, ...)
{
  return _[a1 operationID];
}

id objc_msgSend_operationStatusDictionaries(void *a1, const char *a2, ...)
{
  return _[a1 operationStatusDictionaries];
}

id objc_msgSend_operationTracker(void *a1, const char *a2, ...)
{
  return _[a1 operationTracker];
}

id objc_msgSend_operationType(void *a1, const char *a2, ...)
{
  return _[a1 operationType];
}

id objc_msgSend_operationWillStart_context_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "operationWillStart:context:");
}

id objc_msgSend_operationWillStart_forTask_withContext_bundleIdentifiers_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "operationWillStart:forTask:withContext:bundleIdentifiers:");
}

id objc_msgSend_operationWithGroupName_didFinishNow_withError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "operationWithGroupName:didFinishNow:withError:");
}

id objc_msgSend_opportunisticTopics(void *a1, const char *a2, ...)
{
  return _[a1 opportunisticTopics];
}

id objc_msgSend_options(void *a1, const char *a2, ...)
{
  return _[a1 options];
}

id objc_msgSend_orientation(void *a1, const char *a2, ...)
{
  return _[a1 orientation];
}

id objc_msgSend_originalChoice(void *a1, const char *a2, ...)
{
  return _[a1 originalChoice];
}

id objc_msgSend_originalOrientation(void *a1, const char *a2, ...)
{
  return _[a1 originalOrientation];
}

id objc_msgSend_originatingFingerprint(void *a1, const char *a2, ...)
{
  return _[a1 originatingFingerprint];
}

id objc_msgSend_originatingScopeIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 originatingScopeIdentifier];
}

id objc_msgSend_otherAdjustmentsFingerprint(void *a1, const char *a2, ...)
{
  return _[a1 otherAdjustmentsFingerprint];
}

id objc_msgSend_otherItemCount(void *a1, const char *a2, ...)
{
  return _[a1 otherItemCount];
}

id objc_msgSend_otherScopedIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 otherScopedIdentifier];
}

id objc_msgSend_outgoingResources(void *a1, const char *a2, ...)
{
  return _[a1 outgoingResources];
}

id objc_msgSend_outputType(void *a1, const char *a2, ...)
{
  return _[a1 outputType];
}

id objc_msgSend_outstandingBeginCount(void *a1, const char *a2, ...)
{
  return _[a1 outstandingBeginCount];
}

id objc_msgSend_overriddenResourcesFromResources_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "overriddenResourcesFromResources:");
}

id objc_msgSend_overrideRateLimiting(void *a1, const char *a2, ...)
{
  return _[a1 overrideRateLimiting];
}

id objc_msgSend_owner(void *a1, const char *a2, ...)
{
  return _[a1 owner];
}

id objc_msgSend_ownerIsCurrentUser(void *a1, const char *a2, ...)
{
  return _[a1 ownerIsCurrentUser];
}

id objc_msgSend_ownerName(void *a1, const char *a2, ...)
{
  return _[a1 ownerName];
}

id objc_msgSend_ownerNameForEngineLibrary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ownerNameForEngineLibrary:");
}

id objc_msgSend_ownerNameForLibraryManager_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ownerNameForLibraryManager:");
}

id objc_msgSend_parameters(void *a1, const char *a2, ...)
{
  return _[a1 parameters];
}

id objc_msgSend_parametersForLibraryIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "parametersForLibraryIdentifier:");
}

id objc_msgSend_parentIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 parentIdentifier];
}

id objc_msgSend_participantID(void *a1, const char *a2, ...)
{
  return _[a1 participantID];
}

id objc_msgSend_participantUserID(void *a1, const char *a2, ...)
{
  return _[a1 participantUserID];
}

id objc_msgSend_participants(void *a1, const char *a2, ...)
{
  return _[a1 participants];
}

id objc_msgSend_path(void *a1, const char *a2, ...)
{
  return _[a1 path];
}

id objc_msgSend_pathComponents(void *a1, const char *a2, ...)
{
  return _[a1 pathComponents];
}

id objc_msgSend_pathExtension(void *a1, const char *a2, ...)
{
  return _[a1 pathExtension];
}

id objc_msgSend_pause(void *a1, const char *a2, ...)
{
  return _[a1 pause];
}

id objc_msgSend_pendingCount(void *a1, const char *a2, ...)
{
  return _[a1 pendingCount];
}

id objc_msgSend_people(void *a1, const char *a2, ...)
{
  return _[a1 people];
}

id objc_msgSend_performAsCurrentWithPendingUnitCount_usingBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performAsCurrentWithPendingUnitCount:usingBlock:");
}

id objc_msgSend_performBatchedWriteTransactionWithBlock_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performBatchedWriteTransactionWithBlock:completionHandler:");
}

id objc_msgSend_performMaintenanceCleanupWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performMaintenanceCleanupWithCompletionHandler:");
}

id objc_msgSend_performMigrationWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performMigrationWithError:");
}

id objc_msgSend_performReadTransactionWithBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performReadTransactionWithBlock:");
}

id objc_msgSend_performWithFlags_action_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performWithFlags:action:");
}

id objc_msgSend_performWriteTransactionByPassBlocker_withBlock_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performWriteTransactionByPassBlocker:withBlock:completionHandler:");
}

id objc_msgSend_performWriteTransactionWithBlock_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performWriteTransactionWithBlock:completionHandler:");
}

id objc_msgSend_permission(void *a1, const char *a2, ...)
{
  return _[a1 permission];
}

id objc_msgSend_persistentDomainForName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "persistentDomainForName:");
}

id objc_msgSend_personScopedIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 personScopedIdentifier];
}

id objc_msgSend_personType(void *a1, const char *a2, ...)
{
  return _[a1 personType];
}

id objc_msgSend_personsData(void *a1, const char *a2, ...)
{
  return _[a1 personsData];
}

id objc_msgSend_phoneNumber(void *a1, const char *a2, ...)
{
  return _[a1 phoneNumber];
}

id objc_msgSend_ping(void *a1, const char *a2, ...)
{
  return _[a1 ping];
}

id objc_msgSend_placeAnnotation(void *a1, const char *a2, ...)
{
  return _[a1 placeAnnotation];
}

id objc_msgSend_placeAnnotationWithCPLPlaceAnnotationDictionary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "placeAnnotationWithCPLPlaceAnnotationDictionary:");
}

id objc_msgSend_placeLevel(void *a1, const char *a2, ...)
{
  return _[a1 placeLevel];
}

id objc_msgSend_placeName(void *a1, const char *a2, ...)
{
  return _[a1 placeName];
}

id objc_msgSend_planProgess(void *a1, const char *a2, ...)
{
  return _[a1 planProgess];
}

id objc_msgSend_planRecordChangeUpload_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "planRecordChangeUpload:error:");
}

id objc_msgSend_platformObject(void *a1, const char *a2, ...)
{
  return _[a1 platformObject];
}

id objc_msgSend_playCount(void *a1, const char *a2, ...)
{
  return _[a1 playCount];
}

id objc_msgSend_pluginFields(void *a1, const char *a2, ...)
{
  return _[a1 pluginFields];
}

id objc_msgSend_popNextBatchWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "popNextBatchWithError:");
}

id objc_msgSend_popSignificantWorkIsPending(void *a1, const char *a2, ...)
{
  return _[a1 popSignificantWorkIsPending];
}

id objc_msgSend_popTaskOperation(void *a1, const char *a2, ...)
{
  return _[a1 popTaskOperation];
}

id objc_msgSend_position(void *a1, const char *a2, ...)
{
  return _[a1 position];
}

id objc_msgSend_posixErrorForURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "posixErrorForURL:");
}

id objc_msgSend_postNotificationName_object_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "postNotificationName:object:");
}

id objc_msgSend_postNotificationName_object_userInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "postNotificationName:object:userInfo:");
}

id objc_msgSend_powerNap(void *a1, const char *a2, ...)
{
  return _[a1 powerNap];
}

id objc_msgSend_pqStore(void *a1, const char *a2, ...)
{
  return _[a1 pqStore];
}

id objc_msgSend_pqlConnection(void *a1, const char *a2, ...)
{
  return _[a1 pqlConnection];
}

id objc_msgSend_predicateForChangeAtKeyPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "predicateForChangeAtKeyPath:");
}

id objc_msgSend_predicateWithFormat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "predicateWithFormat:");
}

id objc_msgSend_predictSyncSessionValue_ofType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "predictSyncSessionValue:ofType:");
}

id objc_msgSend_predictor(void *a1, const char *a2, ...)
{
  return _[a1 predictor];
}

id objc_msgSend_prefixForNewScopesRelativeToMainScopeIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "prefixForNewScopesRelativeToMainScopeIdentifier:");
}

id objc_msgSend_prepareCKEventMetric_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "prepareCKEventMetric:");
}

id objc_msgSend_prepareCopyForCKRecordID_fromCKRecord_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "prepareCopyForCKRecordID:fromCKRecord:");
}

id objc_msgSend_prepareForStorage(void *a1, const char *a2, ...)
{
  return _[a1 prepareForStorage];
}

id objc_msgSend_prepareWithCKRecord_scopeIdentifier_scopeProvider_currentUserRecordID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "prepareWithCKRecord:scopeIdentifier:scopeProvider:currentUserRecordID:");
}

id objc_msgSend_prepareWithCKRecordBuilder_resourceCountAndSize_scopeProvider_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "prepareWithCKRecordBuilder:resourceCountAndSize:scopeProvider:error:");
}

id objc_msgSend_preventWipeErrorWithReason_preventedByUser_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "preventWipeErrorWithReason:preventedByUser:");
}

id objc_msgSend_previewImageData(void *a1, const char *a2, ...)
{
  return _[a1 previewImageData];
}

id objc_msgSend_previousCPLVersion(void *a1, const char *a2, ...)
{
  return _[a1 previousCPLVersion];
}

id objc_msgSend_previousDBVersion(void *a1, const char *a2, ...)
{
  return _[a1 previousDBVersion];
}

id objc_msgSend_previousOSBuildVersion(void *a1, const char *a2, ...)
{
  return _[a1 previousOSBuildVersion];
}

id objc_msgSend_primaryScope(void *a1, const char *a2, ...)
{
  return _[a1 primaryScope];
}

id objc_msgSend_primaryZoneIDFromProposedZoneIDs_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "primaryZoneIDFromProposedZoneIDs:");
}

id objc_msgSend_priority(void *a1, const char *a2, ...)
{
  return _[a1 priority];
}

id objc_msgSend_privateChangeToken(void *a1, const char *a2, ...)
{
  return _[a1 privateChangeToken];
}

id objc_msgSend_privateCloudDatabase(void *a1, const char *a2, ...)
{
  return _[a1 privateCloudDatabase];
}

id objc_msgSend_privateCloudScopedIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 privateCloudScopedIdentifier];
}

id objc_msgSend_privateRecordIDs(void *a1, const char *a2, ...)
{
  return _[a1 privateRecordIDs];
}

id objc_msgSend_processErrorIfNeeded_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "processErrorIfNeeded:");
}

id objc_msgSend_processIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 processIdentifier];
}

id objc_msgSend_processInfo(void *a1, const char *a2, ...)
{
  return _[a1 processInfo];
}

id objc_msgSend_processName(void *a1, const char *a2, ...)
{
  return _[a1 processName];
}

id objc_msgSend_processSessionContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "processSessionContext:");
}

id objc_msgSend_processSessionContext_inStore_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "processSessionContext:inStore:error:");
}

id objc_msgSend_processedFetchedRequestedRecordsWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "processedFetchedRequestedRecordsWithError:");
}

id objc_msgSend_processesInvolvedInSyncSessions(void *a1, const char *a2, ...)
{
  return _[a1 processesInvolvedInSyncSessions];
}

id objc_msgSend_producedCumulativeResults_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "producedCumulativeResults:error:");
}

id objc_msgSend_progress(void *a1, const char *a2, ...)
{
  return _[a1 progress];
}

id objc_msgSend_progressHandler(void *a1, const char *a2, ...)
{
  return _[a1 progressHandler];
}

id objc_msgSend_progressWithTotalUnitCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "progressWithTotalUnitCount:");
}

id objc_msgSend_projectData(void *a1, const char *a2, ...)
{
  return _[a1 projectData];
}

id objc_msgSend_projectDocumentType(void *a1, const char *a2, ...)
{
  return _[a1 projectDocumentType];
}

id objc_msgSend_projectPreviewImageData(void *a1, const char *a2, ...)
{
  return _[a1 projectPreviewImageData];
}

id objc_msgSend_promisedAssetCount(void *a1, const char *a2, ...)
{
  return _[a1 promisedAssetCount];
}

id objc_msgSend_promisedPhotosCount(void *a1, const char *a2, ...)
{
  return _[a1 promisedPhotosCount];
}

id objc_msgSend_promisedVideosCount(void *a1, const char *a2, ...)
{
  return _[a1 promisedVideosCount];
}

id objc_msgSend_properties(void *a1, const char *a2, ...)
{
  return _[a1 properties];
}

id objc_msgSend_propertyKeys(void *a1, const char *a2, ...)
{
  return _[a1 propertyKeys];
}

id objc_msgSend_propertyListWithData_options_format_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "propertyListWithData:options:format:error:");
}

id objc_msgSend_propertyMapping(void *a1, const char *a2, ...)
{
  return _[a1 propertyMapping];
}

id objc_msgSend_proposedScopeTypeForCloudKitScope_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "proposedScopeTypeForCloudKitScope:");
}

id objc_msgSend_proposedStagingZoneIdentificationWithCurrentUserID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "proposedStagingZoneIdentificationWithCurrentUserID:");
}

id objc_msgSend_provideCKAssetWithRecordID_fieldName_recordType_signature_completionHandler_( void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "provideCKAssetWithRecordID:fieldName:recordType:signature:completionHandler:");
}

id objc_msgSend_provideCloudResource_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "provideCloudResource:completionHandler:");
}

id objc_msgSend_provideLocalResource_recordClassString_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "provideLocalResource:recordClassString:completionHandler:");
}

id objc_msgSend_providePayloadForComputeStates_inFolderWithURL_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "providePayloadForComputeStates:inFolderWithURL:completionHandler:");
}

id objc_msgSend_provideRecordWithCloudScopeIdentifier_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "provideRecordWithCloudScopeIdentifier:completionHandler:");
}

id objc_msgSend_provideScopeChangeForScopeWithIdentifier_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "provideScopeChangeForScopeWithIdentifier:completionHandler:");
}

id objc_msgSend_publicPermission(void *a1, const char *a2, ...)
{
  return _[a1 publicPermission];
}

id objc_msgSend_publish(void *a1, const char *a2, ...)
{
  return _[a1 publish];
}

id objc_msgSend_pullQueue(void *a1, const char *a2, ...)
{
  return _[a1 pullQueue];
}

id objc_msgSend_pushAllChangesWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pushAllChangesWithCompletionHandler:");
}

id objc_msgSend_pushChangeTasks(void *a1, const char *a2, ...)
{
  return _[a1 pushChangeTasks];
}

id objc_msgSend_pushContextMergingFlags_changeType_uploadIdentifier_priority_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pushContextMergingFlags:changeType:uploadIdentifier:priority:");
}

id objc_msgSend_pushPullGatekeepers(void *a1, const char *a2, ...)
{
  return _[a1 pushPullGatekeepers];
}

id objc_msgSend_pushRepository(void *a1, const char *a2, ...)
{
  return _[a1 pushRepository];
}

id objc_msgSend_pushSignificantWorkIsPending(void *a1, const char *a2, ...)
{
  return _[a1 pushSignificantWorkIsPending];
}

id objc_msgSend_pushTaskOperation(void *a1, const char *a2, ...)
{
  return _[a1 pushTaskOperation];
}

id objc_msgSend_qualityOfService(void *a1, const char *a2, ...)
{
  return _[a1 qualityOfService];
}

id objc_msgSend_qualityOfServiceForForcedTasks(void *a1, const char *a2, ...)
{
  return _[a1 qualityOfServiceForForcedTasks];
}

id objc_msgSend_qualityOfServiceForSyncSessions(void *a1, const char *a2, ...)
{
  return _[a1 qualityOfServiceForSyncSessions];
}

id objc_msgSend_quantity(void *a1, const char *a2, ...)
{
  return _[a1 quantity];
}

id objc_msgSend_quarantinedRecords(void *a1, const char *a2, ...)
{
  return _[a1 quarantinedRecords];
}

id objc_msgSend_query(void *a1, const char *a2, ...)
{
  return _[a1 query];
}

id objc_msgSend_queryCursor(void *a1, const char *a2, ...)
{
  return _[a1 queryCursor];
}

id objc_msgSend_queryItemWithName_value_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "queryItemWithName:value:");
}

id objc_msgSend_queryUserDetailsForShareParticipants_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "queryUserDetailsForShareParticipants:completionHandler:");
}

id objc_msgSend_queryUserDetailsTaskForParticipants_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "queryUserDetailsTaskForParticipants:completionHandler:");
}

id objc_msgSend_queue(void *a1, const char *a2, ...)
{
  return _[a1 queue];
}

id objc_msgSend_queuedResourceForResource_pendingCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "queuedResourceForResource:pendingCount:");
}

id objc_msgSend_rampingRequestForResourceType_numRequested_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "rampingRequestForResourceType:numRequested:completionHandler:");
}

id objc_msgSend_rampingRequestTaskForResourceType_numRequested_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "rampingRequestTaskForResourceType:numRequested:completionHandler:");
}

id objc_msgSend_rangeOfData_options_range_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "rangeOfData:options:range:");
}

id objc_msgSend_rangeOfString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "rangeOfString:");
}

id objc_msgSend_rawInjection_length_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "rawInjection:length:");
}

id objc_msgSend_rawInjectionForValue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "rawInjectionForValue:");
}

id objc_msgSend_readOnlyError(void *a1, const char *a2, ...)
{
  return _[a1 readOnlyError];
}

id objc_msgSend_realCloudScopedIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 realCloudScopedIdentifier];
}

id objc_msgSend_realErrorForError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "realErrorForError:");
}

id objc_msgSend_realIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 realIdentifier];
}

id objc_msgSend_realResourceType(void *a1, const char *a2, ...)
{
  return _[a1 realResourceType];
}

id objc_msgSend_realResourceTypeForResource_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "realResourceTypeForResource:");
}

id objc_msgSend_realScopedIdentifierForRemappedScopedIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "realScopedIdentifierForRemappedScopedIdentifier:");
}

id objc_msgSend_reason(void *a1, const char *a2, ...)
{
  return _[a1 reason];
}

id objc_msgSend_record(void *a1, const char *a2, ...)
{
  return _[a1 record];
}

id objc_msgSend_recordBuilderForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "recordBuilderForKey:");
}

id objc_msgSend_recordChangeData(void *a1, const char *a2, ...)
{
  return _[a1 recordChangeData];
}

id objc_msgSend_recordChangeTag(void *a1, const char *a2, ...)
{
  return _[a1 recordChangeTag];
}

id objc_msgSend_recordClass(void *a1, const char *a2, ...)
{
  return _[a1 recordClass];
}

id objc_msgSend_recordComputeStateDelegate(void *a1, const char *a2, ...)
{
  return _[a1 recordComputeStateDelegate];
}

id objc_msgSend_recordComputeStatePushQueue(void *a1, const char *a2, ...)
{
  return _[a1 recordComputeStatePushQueue];
}

id objc_msgSend_recordID(void *a1, const char *a2, ...)
{
  return _[a1 recordID];
}

id objc_msgSend_recordIDForResourcesOfRecordWithScopedIdentifier_cloudKitScope_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "recordIDForResourcesOfRecordWithScopedIdentifier:cloudKitScope:error:");
}

id objc_msgSend_recordIDWithRecordName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "recordIDWithRecordName:");
}

id objc_msgSend_recordList(void *a1, const char *a2, ...)
{
  return _[a1 recordList];
}

id objc_msgSend_recordModificationDate(void *a1, const char *a2, ...)
{
  return _[a1 recordModificationDate];
}

id objc_msgSend_recordName(void *a1, const char *a2, ...)
{
  return _[a1 recordName];
}

id objc_msgSend_recordNameInDestinationCKRecordFromRecordName_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "recordNameInDestinationCKRecordFromRecordName:error:");
}

id objc_msgSend_recordNamesForScopeInfo(void *a1, const char *a2, ...)
{
  return _[a1 recordNamesForScopeInfo];
}

id objc_msgSend_recordRequestor(void *a1, const char *a2, ...)
{
  return _[a1 recordRequestor];
}

id objc_msgSend_recordType(void *a1, const char *a2, ...)
{
  return _[a1 recordType];
}

id objc_msgSend_recordUpgradeEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "recordUpgradeEvent:");
}

id objc_msgSend_recordUpgradeEvent_arguments_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "recordUpgradeEvent:arguments:");
}

id objc_msgSend_recordViewForStatusWithScopedIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "recordViewForStatusWithScopedIdentifier:");
}

id objc_msgSend_recordViewWithScopedIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "recordViewWithScopedIdentifier:");
}

id objc_msgSend_recordWithScopedIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "recordWithScopedIdentifier:");
}

id objc_msgSend_recordWithScopedIdentifier_isConfirmed_isStaged_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "recordWithScopedIdentifier:isConfirmed:isStaged:");
}

id objc_msgSend_recordWithScopedIdentifier_isFinal_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "recordWithScopedIdentifier:isFinal:");
}

id objc_msgSend_recordZoneID(void *a1, const char *a2, ...)
{
  return _[a1 recordZoneID];
}

id objc_msgSend_recordZoneIDsWithSyncObligations(void *a1, const char *a2, ...)
{
  return _[a1 recordZoneIDsWithSyncObligations];
}

id objc_msgSend_records(void *a1, const char *a2, ...)
{
  return _[a1 records];
}

id objc_msgSend_recordsDesignation(void *a1, const char *a2, ...)
{
  return _[a1 recordsDesignation];
}

id objc_msgSend_recordsToFetchForScopeInfoWithCurrentUserID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "recordsToFetchForScopeInfoWithCurrentUserID:");
}

id objc_msgSend_recordsToFetchToIdentifyCloudKitScope_proposedScopeType_currentUserID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "recordsToFetchToIdentifyCloudKitScope:proposedScopeType:currentUserID:");
}

id objc_msgSend_recordsToFetchToIdentifyZoneID_proposedScopeType_currentUserID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "recordsToFetchToIdentifyZoneID:proposedScopeType:currentUserID:");
}

id objc_msgSend_recordsToUpdateFromScopeChange_currentUserID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "recordsToUpdateFromScopeChange:currentUserID:");
}

id objc_msgSend_recordsWithRelatedScopedIdentifier_isFinal_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "recordsWithRelatedScopedIdentifier:isFinal:");
}

id objc_msgSend_recreateMainTableWithCopyInstructions_oldFields_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "recreateMainTableWithCopyInstructions:oldFields:error:");
}

id objc_msgSend_referenceAction(void *a1, const char *a2, ...)
{
  return _[a1 referenceAction];
}

id objc_msgSend_referencedResourcesCount(void *a1, const char *a2, ...)
{
  return _[a1 referencedResourcesCount];
}

id objc_msgSend_referencedResourcesSize(void *a1, const char *a2, ...)
{
  return _[a1 referencedResourcesSize];
}

id objc_msgSend_refreshAllConfigurationDictionaries(void *a1, const char *a2, ...)
{
  return _[a1 refreshAllConfigurationDictionaries];
}

id objc_msgSend_refreshAllConfigurationDictionariesWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "refreshAllConfigurationDictionariesWithCompletionHandler:");
}

id objc_msgSend_refreshInterval(void *a1, const char *a2, ...)
{
  return _[a1 refreshInterval];
}

id objc_msgSend_refreshScopeWithIdentifier_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "refreshScopeWithIdentifier:completionHandler:");
}

id objc_msgSend_registerCallback_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "registerCallback:");
}

id objc_msgSend_registerClient_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "registerClient:");
}

id objc_msgSend_registerForTaskWithIdentifier_usingQueue_launchHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "registerForTaskWithIdentifier:usingQueue:launchHandler:");
}

id objc_msgSend_registerHelper_withIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "registerHelper:withIdentifier:");
}

id objc_msgSend_registerLikelyResetReason_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "registerLikelyResetReason:");
}

id objc_msgSend_registerTentativeResetReason(void *a1, const char *a2, ...)
{
  return _[a1 registerTentativeResetReason];
}

id objc_msgSend_registerTentativeResetReasonIfCrashing_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "registerTentativeResetReasonIfCrashing:");
}

id objc_msgSend_registeredLibraryIdentifiers(void *a1, const char *a2, ...)
{
  return _[a1 registeredLibraryIdentifiers];
}

id objc_msgSend_registeredWrapperCreateIfNecessaryWithParameters_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "registeredWrapperCreateIfNecessaryWithParameters:error:");
}

id objc_msgSend_registeredWrapperWithLibraryIdentifier_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "registeredWrapperWithLibraryIdentifier:error:");
}

id objc_msgSend_rejectedPersonIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 rejectedPersonIdentifier];
}

id objc_msgSend_rejectedScopedIdentifierForRejectedCKRecordID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "rejectedScopedIdentifierForRejectedCKRecordID:");
}

id objc_msgSend_relatedIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 relatedIdentifier];
}

id objc_msgSend_relatedRecordClass(void *a1, const char *a2, ...)
{
  return _[a1 relatedRecordClass];
}

id objc_msgSend_relatedScopedIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 relatedScopedIdentifier];
}

id objc_msgSend_relation(void *a1, const char *a2, ...)
{
  return _[a1 relation];
}

id objc_msgSend_releaseFileURL_forResource_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "releaseFileURL:forResource:error:");
}

id objc_msgSend_relevantUntilDate(void *a1, const char *a2, ...)
{
  return _[a1 relevantUntilDate];
}

id objc_msgSend_remapAllRecordsWithPreviousScopedIdentifier_newScopedIdentifier_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "remapAllRecordsWithPreviousScopedIdentifier:newScopedIdentifier:error:");
}

id objc_msgSend_remappedRecordEnumeratorInScope_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "remappedRecordEnumeratorInScope:");
}

id objc_msgSend_remappedRecords(void *a1, const char *a2, ...)
{
  return _[a1 remappedRecords];
}

id objc_msgSend_remoteObjectProxyWithErrorHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "remoteObjectProxyWithErrorHandler:");
}

id objc_msgSend_removeAllObjects(void *a1, const char *a2, ...)
{
  return _[a1 removeAllObjects];
}

id objc_msgSend_removeBudgetDelegate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeBudgetDelegate:");
}

id objc_msgSend_removeDeferHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeDeferHandler:");
}

id objc_msgSend_removeItemAtURL_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeItemAtURL:error:");
}

id objc_msgSend_removeLastObject(void *a1, const char *a2, ...)
{
  return _[a1 removeLastObject];
}

id objc_msgSend_removeMappingForCloudScopedIdentifier_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeMappingForCloudScopedIdentifier:error:");
}

id objc_msgSend_removeMappingForLocalScopedIdentifier_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeMappingForLocalScopedIdentifier:error:");
}

id objc_msgSend_removeObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeObject:");
}

id objc_msgSend_removeObjectAtIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeObjectAtIndex:");
}

id objc_msgSend_removeObjectForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeObjectForKey:");
}

id objc_msgSend_removeObjectsAtIndexes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeObjectsAtIndexes:");
}

id objc_msgSend_removeObjectsInRange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeObjectsInRange:");
}

id objc_msgSend_removeObserver_name_object_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeObserver:name:object:");
}

id objc_msgSend_removeParametersWithLibraryIdentifier_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeParametersWithLibraryIdentifier:error:");
}

id objc_msgSend_removeParticipantInSharedLibraryTaskFromSharedScope_transportScope_share_retentionPolicy_exitSource_userIdentifiersToRemove_participantIDsToRemove_completionHandler_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "removeParticipantInSharedLibraryTaskFromSharedScope:transportScope:share:retentionPolicy:exitSource:userIdent ifiersToRemove:participantIDsToRemove:completionHandler:");
}

id objc_msgSend_removeParticipants_fromSharedScopeWithIdentifier_retentionPolicy_exitSource_completionHandler_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "removeParticipants:fromSharedScopeWithIdentifier:retentionPolicy:exitSource:completionHandler:");
}

id objc_msgSend_removePendingParticipantIDs_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removePendingParticipantIDs:");
}

id objc_msgSend_removeShareTodoForScopedIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeShareTodoForScopedIdentifier:");
}

id objc_msgSend_removeVolumeUnmountObserver_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeVolumeUnmountObserver:");
}

id objc_msgSend_replaceBytesInRange_withBytes_length_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "replaceBytesInRange:withBytes:length:");
}

id objc_msgSend_replaceCharactersInRange_withString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "replaceCharactersInRange:withString:");
}

id objc_msgSend_replaceOccurrencesOfString_withString_options_range_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "replaceOccurrencesOfString:withString:options:range:");
}

id objc_msgSend_reportFeatureCheckpoint_forFeature_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "reportFeatureCheckpoint:forFeature:error:");
}

id objc_msgSend_reportLibraryCorrupted(void *a1, const char *a2, ...)
{
  return _[a1 reportLibraryCorrupted];
}

id objc_msgSend_reportMiscInformation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "reportMiscInformation:");
}

id objc_msgSend_reportQuarantineCountIfNecessary(void *a1, const char *a2, ...)
{
  return _[a1 reportQuarantineCountIfNecessary];
}

id objc_msgSend_reportSetting_hasBeenSetToValue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "reportSetting:hasBeenSetToValue:");
}

id objc_msgSend_request(void *a1, const char *a2, ...)
{
  return _[a1 request];
}

id objc_msgSend_requestAttachedLibrary(void *a1, const char *a2, ...)
{
  return _[a1 requestAttachedLibrary];
}

id objc_msgSend_requestClientToPullAllChangesInScopeIdentifier_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "requestClientToPullAllChangesInScopeIdentifier:completionHandler:");
}

id objc_msgSend_requestClientToPullAllChangesWithScopeIdentifiers_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "requestClientToPullAllChangesWithScopeIdentifiers:completionHandler:");
}

id objc_msgSend_requestClientToPushAllChangesWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "requestClientToPushAllChangesWithCompletionHandler:");
}

id objc_msgSend_requestCompletedBlock(void *a1, const char *a2, ...)
{
  return _[a1 requestCompletedBlock];
}

id objc_msgSend_requestInitialDownloadOfMainScopeForLibraryWithIdentifier_progressHandler_completionHandler_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "requestInitialDownloadOfMainScopeForLibraryWithIdentifier:progressHandler:completionHandler:");
}

id objc_msgSend_requestLibraryWithIdentifier_withActivatedMainScope_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "requestLibraryWithIdentifier:withActivatedMainScope:completionHandler:");
}

id objc_msgSend_requestPrivateCKRecordWithRecordIDBeforeUpload_fetchedBlock_reason_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "requestPrivateCKRecordWithRecordIDBeforeUpload:fetchedBlock:reason:");
}

id objc_msgSend_requestRecordWithID_cloudKitScope_forKey_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "requestRecordWithID:cloudKitScope:forKey:completionHandler:");
}

id objc_msgSend_requestRecordWithRecordID_operationType_forRecordWithRecordID_completionHandler_( void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "requestRecordWithRecordID:operationType:forRecordWithRecordID:completionHandler:");
}

id objc_msgSend_requestRegisteredWrapperWithIdentifier_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "requestRegisteredWrapperWithIdentifier:completionHandler:");
}

id objc_msgSend_requestScopesWithIdentifiersToBeActivated_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "requestScopesWithIdentifiersToBeActivated:completionHandler:");
}

id objc_msgSend_requestSharedCKRecordWithRecordIDBeforeUpload_fetchedBlock_reason_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "requestSharedCKRecordWithRecordIDBeforeUpload:fetchedBlock:reason:");
}

id objc_msgSend_requestUUID(void *a1, const char *a2, ...)
{
  return _[a1 requestUUID];
}

id objc_msgSend_requestedItemCount(void *a1, const char *a2, ...)
{
  return _[a1 requestedItemCount];
}

id objc_msgSend_requestedPrivateCKRecordIDs(void *a1, const char *a2, ...)
{
  return _[a1 requestedPrivateCKRecordIDs];
}

id objc_msgSend_requestedSharedCKRecordIDs(void *a1, const char *a2, ...)
{
  return _[a1 requestedSharedCKRecordIDs];
}

id objc_msgSend_requiresExternalPower(void *a1, const char *a2, ...)
{
  return _[a1 requiresExternalPower];
}

id objc_msgSend_requiresNetworkConnectivity(void *a1, const char *a2, ...)
{
  return _[a1 requiresNetworkConnectivity];
}

id objc_msgSend_requiresSignificantUserInactivity(void *a1, const char *a2, ...)
{
  return _[a1 requiresSignificantUserInactivity];
}

id objc_msgSend_requiresStableHashForResourceType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "requiresStableHashForResourceType:");
}

id objc_msgSend_requiresUserInactivity(void *a1, const char *a2, ...)
{
  return _[a1 requiresUserInactivity];
}

id objc_msgSend_rescheduler(void *a1, const char *a2, ...)
{
  return _[a1 rescheduler];
}

id objc_msgSend_reschedulerDescription(void *a1, const char *a2, ...)
{
  return _[a1 reschedulerDescription];
}

id objc_msgSend_reschedulerManager(void *a1, const char *a2, ...)
{
  return _[a1 reschedulerManager];
}

id objc_msgSend_resetBackoffInterval(void *a1, const char *a2, ...)
{
  return _[a1 resetBackoffInterval];
}

id objc_msgSend_resetCacheWithOption_reason_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "resetCacheWithOption:reason:completionHandler:");
}

id objc_msgSend_resetCloudKitScope_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "resetCloudKitScope:");
}

id objc_msgSend_resetCompleteSyncStateIncludingIDMappingWithCause_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "resetCompleteSyncStateIncludingIDMappingWithCause:error:");
}

id objc_msgSend_resetCompleteSyncStateWithCause_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "resetCompleteSyncStateWithCause:error:");
}

id objc_msgSend_resetLocalSyncStateWithCause_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "resetLocalSyncStateWithCause:error:");
}

id objc_msgSend_resetNotificationForLibraryIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "resetNotificationForLibraryIdentifier:");
}

id objc_msgSend_resetStableRecordsForScopeWithIdentifier_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "resetStableRecordsForScopeWithIdentifier:error:");
}

id objc_msgSend_resetSyncAnchorForScope_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "resetSyncAnchorForScope:error:");
}

id objc_msgSend_resetSyncAnchorWithCause_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "resetSyncAnchorWithCause:error:");
}

id objc_msgSend_resetTracker(void *a1, const char *a2, ...)
{
  return _[a1 resetTracker];
}

id objc_msgSend_resetTrackingCounts(void *a1, const char *a2, ...)
{
  return _[a1 resetTrackingCounts];
}

id objc_msgSend_resetValueForGlobalVariable_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "resetValueForGlobalVariable:error:");
}

id objc_msgSend_resetVersionHasChanged(void *a1, const char *a2, ...)
{
  return _[a1 resetVersionHasChanged];
}

id objc_msgSend_resolveLocalScopedIdentifiersForCloudScopedIdentifiers_completionHandler_( void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "resolveLocalScopedIdentifiersForCloudScopedIdentifiers:completionHandler:");
}

id objc_msgSend_resolvedConfiguration(void *a1, const char *a2, ...)
{
  return _[a1 resolvedConfiguration];
}

id objc_msgSend_resource(void *a1, const char *a2, ...)
{
  return _[a1 resource];
}

id objc_msgSend_resourceCheckTaskForResources_targetMapping_transportScopeMapping_completionHandler_( void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "resourceCheckTaskForResources:targetMapping:transportScopeMapping:completionHandler:");
}

id objc_msgSend_resourceCopyFromScopedIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 resourceCopyFromScopedIdentifier];
}

id objc_msgSend_resourceData(void *a1, const char *a2, ...)
{
  return _[a1 resourceData];
}

id objc_msgSend_resourceForType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "resourceForType:");
}

id objc_msgSend_resourceIntensive(void *a1, const char *a2, ...)
{
  return _[a1 resourceIntensive];
}

id objc_msgSend_resourceKey(void *a1, const char *a2, ...)
{
  return _[a1 resourceKey];
}

id objc_msgSend_resourceProgressDelegate(void *a1, const char *a2, ...)
{
  return _[a1 resourceProgressDelegate];
}

id objc_msgSend_resourceScopedIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 resourceScopedIdentifier];
}

id objc_msgSend_resourceStorage(void *a1, const char *a2, ...)
{
  return _[a1 resourceStorage];
}

id objc_msgSend_resourceType(void *a1, const char *a2, ...)
{
  return _[a1 resourceType];
}

id objc_msgSend_resourceTypeDescription(void *a1, const char *a2, ...)
{
  return _[a1 resourceTypeDescription];
}

id objc_msgSend_resourceTypeFromShortDescription_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "resourceTypeFromShortDescription:");
}

id objc_msgSend_resourceTypeSupportsResourceExpunge_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "resourceTypeSupportsResourceExpunge:");
}

id objc_msgSend_resourceWithDownloadQueue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "resourceWithDownloadQueue:");
}

id objc_msgSend_resourceWithOutgoingResources_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "resourceWithOutgoingResources:");
}

id objc_msgSend_resourceWithRecordScopedIdentifier_didDownloadCKAsset_withOperationType_transcoderVersion_withFingerPrint_andFileUTI_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "resourceWithRecordScopedIdentifier:didDownloadCKAsset:withOperationType:transcoderVersion:withFingerPrint:andFileUTI:");
}

id objc_msgSend_resourceWithRecordScopedIdentifier_didFailToDownloadWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "resourceWithRecordScopedIdentifier:didFailToDownloadWithError:");
}

id objc_msgSend_resourceWithRecordScopedIdentifier_didProgress_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "resourceWithRecordScopedIdentifier:didProgress:");
}

id objc_msgSend_resourceWithRecordScopedIdentifierDidStart_operationID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "resourceWithRecordScopedIdentifierDidStart:operationID:");
}

id objc_msgSend_resourceWithScopeIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "resourceWithScopeIdentifier:");
}

id objc_msgSend_resources(void *a1, const char *a2, ...)
{
  return _[a1 resources];
}

id objc_msgSend_responses(void *a1, const char *a2, ...)
{
  return _[a1 responses];
}

id objc_msgSend_resubmitTaskRequestForRescheduler_updatedPrediction_afterTaskHasBeenDeferred_( void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "resubmitTaskRequestForRescheduler:updatedPrediction:afterTaskHasBeenDeferred:");
}

id objc_msgSend_result(void *a1, const char *a2, ...)
{
  return _[a1 result];
}

id objc_msgSend_resultDescription(void *a1, const char *a2, ...)
{
  return _[a1 resultDescription];
}

id objc_msgSend_resultsCount(void *a1, const char *a2, ...)
{
  return _[a1 resultsCount];
}

id objc_msgSend_resultsLimit(void *a1, const char *a2, ...)
{
  return _[a1 resultsLimit];
}

id objc_msgSend_resume(void *a1, const char *a2, ...)
{
  return _[a1 resume];
}

id objc_msgSend_retainFileURLForResource_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "retainFileURLForResource:error:");
}

id objc_msgSend_retryAfterMillis(void *a1, const char *a2, ...)
{
  return _[a1 retryAfterMillis];
}

id objc_msgSend_retryCount(void *a1, const char *a2, ...)
{
  return _[a1 retryCount];
}

id objc_msgSend_revertRecords(void *a1, const char *a2, ...)
{
  return _[a1 revertRecords];
}

id objc_msgSend_revertedChanges(void *a1, const char *a2, ...)
{
  return _[a1 revertedChanges];
}

id objc_msgSend_rewindAnchorsPerSharingScopes(void *a1, const char *a2, ...)
{
  return _[a1 rewindAnchorsPerSharingScopes];
}

id objc_msgSend_rewindSyncAnchorsVar(void *a1, const char *a2, ...)
{
  return _[a1 rewindSyncAnchorsVar];
}

id objc_msgSend_role(void *a1, const char *a2, ...)
{
  return _[a1 role];
}

id objc_msgSend_rootRecord(void *a1, const char *a2, ...)
{
  return _[a1 rootRecord];
}

id objc_msgSend_rootRecordID(void *a1, const char *a2, ...)
{
  return _[a1 rootRecordID];
}

id objc_msgSend_rootRecordName(void *a1, const char *a2, ...)
{
  return _[a1 rootRecordName];
}

id objc_msgSend_rootRecordType(void *a1, const char *a2, ...)
{
  return _[a1 rootRecordType];
}

id objc_msgSend_rootRecordUsingTempCKAssetURL_inZone_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "rootRecordUsingTempCKAssetURL:inZone:");
}

id objc_msgSend_run(void *a1, const char *a2, ...)
{
  return _[a1 run];
}

id objc_msgSend_runAuxiliaryOperation(void *a1, const char *a2, ...)
{
  return _[a1 runAuxiliaryOperation];
}

id objc_msgSend_runOperations(void *a1, const char *a2, ...)
{
  return _[a1 runOperations];
}

id objc_msgSend_runWithNoSyncSession(void *a1, const char *a2, ...)
{
  return _[a1 runWithNoSyncSession];
}

id objc_msgSend_safeFilename(void *a1, const char *a2, ...)
{
  return _[a1 safeFilename];
}

id objc_msgSend_safeResourcesToDeleteFromProposedResources_realPrune_checkServerIfNecessary_allowUnconfirmed_resourcesToCheckOnServer_targetScopeMapping_unsafeResources_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "safeResourcesToDeleteFromProposedResources:realPrune:checkServerIfNecessary:allowUnconfirmed:resourcesToCheck OnServer:targetScopeMapping:unsafeResources:");
}

id objc_msgSend_saveParameters_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "saveParameters:error:");
}

id objc_msgSend_scheduleSendBarrierBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scheduleSendBarrierBlock:");
}

id objc_msgSend_scheduler(void *a1, const char *a2, ...)
{
  return _[a1 scheduler];
}

id objc_msgSend_scope(void *a1, const char *a2, ...)
{
  return _[a1 scope];
}

id objc_msgSend_scopeChangeForScope_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scopeChangeForScope:");
}

id objc_msgSend_scopeChangeFromCKRecords_currentUserID_previousScopeChange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scopeChangeFromCKRecords:currentUserID:previousScopeChange:");
}

id objc_msgSend_scopeChangesNeedingToBePulledByClientWithMaximumCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scopeChangesNeedingToBePulledByClientWithMaximumCount:");
}

id objc_msgSend_scopeFlagsUpdateFromCKRecords_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scopeFlagsUpdateFromCKRecords:");
}

id objc_msgSend_scopeForSharingScope_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scopeForSharingScope:");
}

id objc_msgSend_scopeFromTransportScope_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scopeFromTransportScope:");
}

id objc_msgSend_scopeIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 scopeIdentifier];
}

id objc_msgSend_scopeIdentifierForCloudScopeIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scopeIdentifierForCloudScopeIndex:");
}

id objc_msgSend_scopeIdentifierForLocalScopeIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scopeIdentifierForLocalScopeIndex:");
}

id objc_msgSend_scopeIdentifierFromZoneID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scopeIdentifierFromZoneID:");
}

id objc_msgSend_scopeIdentifierVar(void *a1, const char *a2, ...)
{
  return _[a1 scopeIdentifierVar];
}

id objc_msgSend_scopeIdentifiers(void *a1, const char *a2, ...)
{
  return _[a1 scopeIdentifiers];
}

id objc_msgSend_scopeIndex(void *a1, const char *a2, ...)
{
  return _[a1 scopeIndex];
}

id objc_msgSend_scopeIndexColumnName(void *a1, const char *a2, ...)
{
  return _[a1 scopeIndexColumnName];
}

id objc_msgSend_scopeIndexForCloudScopedIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scopeIndexForCloudScopedIdentifier:");
}

id objc_msgSend_scopeIndexForLocalScopedIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scopeIndexForLocalScopedIdentifier:");
}

id objc_msgSend_scopeListSyncAnchor(void *a1, const char *a2, ...)
{
  return _[a1 scopeListSyncAnchor];
}

id objc_msgSend_scopeType(void *a1, const char *a2, ...)
{
  return _[a1 scopeType];
}

id objc_msgSend_scopeTypeForCloudKitScope_proposedScopeType_fetchedRecords_currentUserID_( void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scopeTypeForCloudKitScope:proposedScopeType:fetchedRecords:currentUserID:");
}

id objc_msgSend_scopeTypeVar(void *a1, const char *a2, ...)
{
  return _[a1 scopeTypeVar];
}

id objc_msgSend_scopeWithCloudScopeIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scopeWithCloudScopeIndex:");
}

id objc_msgSend_scopeWithIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scopeWithIdentifier:");
}

id objc_msgSend_scopeWithLocalScopeIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scopeWithLocalScopeIndex:");
}

id objc_msgSend_scopeWithStableIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scopeWithStableIndex:");
}

id objc_msgSend_scopedIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 scopedIdentifier];
}

id objc_msgSend_scopedIdentifierForCKRecordID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scopedIdentifierForCKRecordID:");
}

id objc_msgSend_scopedIdentifierForCloudIdentifier_scopeIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scopedIdentifierForCloudIdentifier:scopeIndex:");
}

id objc_msgSend_scopedIdentifierForCloudScopedIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scopedIdentifierForCloudScopedIdentifier:");
}

id objc_msgSend_scopedIdentifierForLocalIdentifier_scopeIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scopedIdentifierForLocalIdentifier:scopeIndex:");
}

id objc_msgSend_scopedIdentifierForLocalScopedIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scopedIdentifierForLocalScopedIdentifier:");
}

id objc_msgSend_scopedIdentifierWithIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scopedIdentifierWithIdentifier:");
}

id objc_msgSend_scopedIdentifierWithString_includeScopeIndex_defaultScopeIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scopedIdentifierWithString:includeScopeIndex:defaultScopeIdentifier:");
}

id objc_msgSend_scopedIdentifiersForChangesWithFlag_forScopeWithIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scopedIdentifiersForChangesWithFlag:forScopeWithIdentifier:");
}

id objc_msgSend_scopedIdentifiersRemappedToScopedIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scopedIdentifiersRemappedToScopedIdentifier:");
}

id objc_msgSend_scopes(void *a1, const char *a2, ...)
{
  return _[a1 scopes];
}

id objc_msgSend_score(void *a1, const char *a2, ...)
{
  return _[a1 score];
}

id objc_msgSend_secondaryIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 secondaryIdentifier];
}

id objc_msgSend_selector(void *a1, const char *a2, ...)
{
  return _[a1 selector];
}

id objc_msgSend_selfCrashResetReason(void *a1, const char *a2, ...)
{
  return _[a1 selfCrashResetReason];
}

id objc_msgSend_selfIfMatchesRecordName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "selfIfMatchesRecordName:");
}

id objc_msgSend_sendExitMoveBatchFeedbackWithMoveBatchOperationID_moveBatchID_exitZoneID_feedbackItems_completionHandler_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "sendExitMoveBatchFeedbackWithMoveBatchOperationID:moveBatchID:exitZoneID:feedbackItems:completionHandler:");
}

id objc_msgSend_sendExitStatusFeedbackWithOperationID_shareID_status_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendExitStatusFeedbackWithOperationID:shareID:status:completionHandler:");
}

id objc_msgSend_sendFeedbackToServerIfNecessary(void *a1, const char *a2, ...)
{
  return _[a1 sendFeedbackToServerIfNecessary];
}

id objc_msgSend_sendProgressBatch_updatedCursor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendProgressBatch:updatedCursor:");
}

id objc_msgSend_sendProgressBatch_updatedScopeChange_updatedFlags_updatedSyncAnchor_zoneIDsWithSyncObligations_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "sendProgressBatch:updatedScopeChange:updatedFlags:updatedSyncAnchor:zoneIDsWithSyncObligations:");
}

id objc_msgSend_serializedString(void *a1, const char *a2, ...)
{
  return _[a1 serializedString];
}

id objc_msgSend_serverMessage(void *a1, const char *a2, ...)
{
  return _[a1 serverMessage];
}

id objc_msgSend_serverPreferredPushEnvironmentWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "serverPreferredPushEnvironmentWithCompletionHandler:");
}

id objc_msgSend_serverRecordIsCorrupted(void *a1, const char *a2, ...)
{
  return _[a1 serverRecordIsCorrupted];
}

id objc_msgSend_serverSupportsAssetSortOrder(void *a1, const char *a2, ...)
{
  return _[a1 serverSupportsAssetSortOrder];
}

id objc_msgSend_serverSupportsDeletedByUserIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 serverSupportsDeletedByUserIdentifier];
}

id objc_msgSend_serverSupportsDetectionType(void *a1, const char *a2, ...)
{
  return _[a1 serverSupportsDetectionType];
}

id objc_msgSend_serverSupportsGraphPeopleHome(void *a1, const char *a2, ...)
{
  return _[a1 serverSupportsGraphPeopleHome];
}

id objc_msgSend_serverSupportsLastViewedDate(void *a1, const char *a2, ...)
{
  return _[a1 serverSupportsLastViewedDate];
}

id objc_msgSend_serverSupportsLibraryShareSettingsRecordSyncing(void *a1, const char *a2, ...)
{
  return _[a1 serverSupportsLibraryShareSettingsRecordSyncing];
}

id objc_msgSend_serverSupportsLibraryShareSettingsUserViewedParticipantTrashNotificationDateSyncing( void *a1, const char *a2, ...)
{
  return _[a1 serverSupportsLibraryShareSettingsUserViewedParticipantTrashNotificationDateSyncing];
}

id objc_msgSend_serverSupportsMergeTargetRef(void *a1, const char *a2, ...)
{
  return _[a1 serverSupportsMergeTargetRef];
}

id objc_msgSend_serverSupportsSharedLibrarySharingState(void *a1, const char *a2, ...)
{
  return _[a1 serverSupportsSharedLibrarySharingState];
}

id objc_msgSend_serverToken(void *a1, const char *a2, ...)
{
  return _[a1 serverToken];
}

id objc_msgSend_session(void *a1, const char *a2, ...)
{
  return _[a1 session];
}

id objc_msgSend_sessionHasBeenDeferredError(void *a1, const char *a2, ...)
{
  return _[a1 sessionHasBeenDeferredError];
}

id objc_msgSend_sessionIsDone(void *a1, const char *a2, ...)
{
  return _[a1 sessionIsDone];
}

id objc_msgSend_sessionWontHappen(void *a1, const char *a2, ...)
{
  return _[a1 sessionWontHappen];
}

id objc_msgSend_setAcceptSharesCompletionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAcceptSharesCompletionBlock:");
}

id objc_msgSend_setAcceptanceStatus_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAcceptanceStatus:");
}

id objc_msgSend_setAccessibilityDescription_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAccessibilityDescription:");
}

id objc_msgSend_setAccountFlagsData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAccountFlagsData:");
}

id objc_msgSend_setActionData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setActionData:");
}

id objc_msgSend_setActivated_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setActivated:");
}

id objc_msgSend_setActivationDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setActivationDate:");
}

id objc_msgSend_setAddedDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAddedDate:");
}

id objc_msgSend_setAdditionalRequestHTTPHeaders_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAdditionalRequestHTTPHeaders:");
}

id objc_msgSend_setAdds_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAdds:");
}

id objc_msgSend_setAdjustedMediaMetaData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAdjustedMediaMetaData:");
}

id objc_msgSend_setAdjustedMediaMetaDataType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAdjustedMediaMetaDataType:");
}

id objc_msgSend_setAdjustmentCompoundVersion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAdjustmentCompoundVersion:");
}

id objc_msgSend_setAdjustmentCreatorCode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAdjustmentCreatorCode:");
}

id objc_msgSend_setAdjustmentRenderTypes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAdjustmentRenderTypes:");
}

id objc_msgSend_setAdjustmentSourceType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAdjustmentSourceType:");
}

id objc_msgSend_setAdjustmentTimestamp_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAdjustmentTimestamp:");
}

id objc_msgSend_setAdjustmentType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAdjustmentType:");
}

id objc_msgSend_setAdjustments_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAdjustments:");
}

id objc_msgSend_setAlbumSortAscending_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAlbumSortAscending:");
}

id objc_msgSend_setAlbumSortType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAlbumSortType:");
}

id objc_msgSend_setAlbumType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAlbumType:");
}

id objc_msgSend_setAllowsAnonymousPublicAccess_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAllowsAnonymousPublicAccess:");
}

id objc_msgSend_setAllowsCellular_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAllowsCellular:");
}

id objc_msgSend_setAllowsCellularAccess_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAllowsCellularAccess:");
}

id objc_msgSend_setAllowsExpensiveNetworkAccess_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAllowsExpensiveNetworkAccess:");
}

id objc_msgSend_setAllowsFakeDerivatives_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAllowsFakeDerivatives:");
}

id objc_msgSend_setAllowsNull_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAllowsNull:");
}

id objc_msgSend_setApplicationBundleIdentifierOverride_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setApplicationBundleIdentifierOverride:");
}

id objc_msgSend_setApplicationBundleIdentifierOverrideForContainerAccess_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setApplicationBundleIdentifierOverrideForContainerAccess:");
}

id objc_msgSend_setApplicationBundleIdentifierOverrideForNetworkAttribution_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setApplicationBundleIdentifierOverrideForNetworkAttribution:");
}

id objc_msgSend_setApplicationBundleIdentifierOverrideForPushTopicGeneration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setApplicationBundleIdentifierOverrideForPushTopicGeneration:");
}

id objc_msgSend_setArchiveCursor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setArchiveCursor:");
}

id objc_msgSend_setAssetCounts_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAssetCounts:");
}

id objc_msgSend_setAssetDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAssetDate:");
}

id objc_msgSend_setAssetHDRType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAssetHDRType:");
}

id objc_msgSend_setAssetList_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAssetList:");
}

id objc_msgSend_setAssetListPredicate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAssetListPredicate:");
}

id objc_msgSend_setAssetPublishedBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAssetPublishedBlock:");
}

id objc_msgSend_setAssetSortOrder_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAssetSortOrder:");
}

id objc_msgSend_setAssetSubtype_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAssetSubtype:");
}

id objc_msgSend_setAssetTransferOptions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAssetTransferOptions:");
}

id objc_msgSend_setAssetTransferOptionsByRecordTypeAndKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAssetTransferOptionsByRecordTypeAndKey:");
}

id objc_msgSend_setAutoRollbackHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAutoRollbackHandler:");
}

id objc_msgSend_setAvailable_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAvailable:");
}

id objc_msgSend_setBatch_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBatch:");
}

id objc_msgSend_setBlacklistedFeature_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBlacklistedFeature:");
}

id objc_msgSend_setBoostable_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBoostable:");
}

id objc_msgSend_setBoundaryKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBoundaryKey:");
}

id objc_msgSend_setBundleIdentifiers_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBundleIdentifiers:");
}

id objc_msgSend_setBurstFlags_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBurstFlags:");
}

id objc_msgSend_setBurstIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBurstIdentifier:");
}

id objc_msgSend_setBusyState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBusyState:");
}

id objc_msgSend_setBypassForceSyncLimitations_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBypassForceSyncLimitations:");
}

id objc_msgSend_setCKAsset_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCKAsset:forKey:");
}

id objc_msgSend_setCKReferenceWithScopedIdentifier_forKey_referenceAction_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCKReferenceWithScopedIdentifier:forKey:referenceAction:");
}

id objc_msgSend_setCPLDiscretionary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCPLDiscretionary:");
}

id objc_msgSend_setCachedValue_forIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCachedValue:forIdentifier:");
}

id objc_msgSend_setCancellable_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCancellable:");
}

id objc_msgSend_setCancellationHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCancellationHandler:");
}

id objc_msgSend_setCancelled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCancelled:");
}

id objc_msgSend_setCaption_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCaption:");
}

id objc_msgSend_setCategory_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCategory:");
}

id objc_msgSend_setChangeTokenUpdatedBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setChangeTokenUpdatedBlock:");
}

id objc_msgSend_setChangeType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setChangeType:");
}

id objc_msgSend_setClasses_forSelector_argumentIndex_ofReply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setClasses:forSelector:argumentIndex:ofReply:");
}

id objc_msgSend_setClientBundleID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setClientBundleID:");
}

id objc_msgSend_setClientQueue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setClientQueue:");
}

id objc_msgSend_setCloudIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCloudIndex:");
}

id objc_msgSend_setCodeOperationCompletionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCodeOperationCompletionBlock:");
}

id objc_msgSend_setCodec_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCodec:");
}

id objc_msgSend_setCompletedUnitCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCompletedUnitCount:");
}

id objc_msgSend_setCompletionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCompletionBlock:");
}

id objc_msgSend_setComputeStateAdjustmentFingerprint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setComputeStateAdjustmentFingerprint:");
}

id objc_msgSend_setComputeStateLastUpdatedDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setComputeStateLastUpdatedDate:");
}

id objc_msgSend_setComputeStateVersion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setComputeStateVersion:");
}

id objc_msgSend_setConfiguration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setConfiguration:");
}

id objc_msgSend_setContactDescriptor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setContactDescriptor:");
}

id objc_msgSend_setContainer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setContainer:");
}

id objc_msgSend_setContainerHasBeenWiped_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setContainerHasBeenWiped:");
}

id objc_msgSend_setContainerIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setContainerIdentifier:");
}

id objc_msgSend_setCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCount:");
}

id objc_msgSend_setCplEnabledDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCplEnabledDate:");
}

id objc_msgSend_setCreationDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCreationDate:");
}

id objc_msgSend_setCurrentFetchRecordZoneChangesOperation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCurrentFetchRecordZoneChangesOperation:");
}

id objc_msgSend_setCustomRenderedValue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCustomRenderedValue:");
}

id objc_msgSend_setCustomTitle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCustomTitle:");
}

id objc_msgSend_setCustomUserAssetList_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCustomUserAssetList:");
}

id objc_msgSend_setDateDeleted_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDateDeleted:");
}

id objc_msgSend_setDefaultConfiguration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDefaultConfiguration:");
}

id objc_msgSend_setDefaultHEVC_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDefaultHEVC:");
}

id objc_msgSend_setDefaultPlatform_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDefaultPlatform:");
}

id objc_msgSend_setDelegate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDelegate:");
}

id objc_msgSend_setDeleteDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDeleteDate:");
}

id objc_msgSend_setDeleteDate_forScope_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDeleteDate:forScope:error:");
}

id objc_msgSend_setDeletedByUserIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDeletedByUserIdentifier:");
}

id objc_msgSend_setDeletes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDeletes:");
}

id objc_msgSend_setDerivativeGeneratorClass_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDerivativeGeneratorClass:");
}

id objc_msgSend_setDesiredKeys_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDesiredKeys:");
}

id objc_msgSend_setDestinationRecord_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDestinationRecord:");
}

id objc_msgSend_setDestinationRecordID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDestinationRecordID:");
}

id objc_msgSend_setDetectionType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDetectionType:");
}

id objc_msgSend_setDictionary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDictionary:");
}

id objc_msgSend_setDidDropSomeRecordsForScope_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDidDropSomeRecordsForScope:error:");
}

id objc_msgSend_setDirectClientImplementationForPlatform_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDirectClientImplementationForPlatform:");
}

id objc_msgSend_setDisabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDisabled:");
}

id objc_msgSend_setDisabledDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDisabledDate:");
}

id objc_msgSend_setDisabledDate_forScope_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDisabledDate:forScope:error:");
}

id objc_msgSend_setDisplayName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDisplayName:");
}

id objc_msgSend_setDownloadedItemCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDownloadedItemCount:");
}

id objc_msgSend_setDownloadedSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDownloadedSize:");
}

id objc_msgSend_setDuration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDuration:");
}

id objc_msgSend_setDurationInNanoSeconds_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDurationInNanoSeconds:");
}

id objc_msgSend_setEmail_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEmail:");
}

id objc_msgSend_setEnabledTopics_ignoredTopics_opportunisticTopics_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEnabledTopics:ignoredTopics:opportunisticTopics:");
}

id objc_msgSend_setEncryptedObject_forKey_validateClass_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEncryptedObject:forKey:validateClass:");
}

id objc_msgSend_setEndDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEndDate:");
}

id objc_msgSend_setEndTime_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEndTime:");
}

id objc_msgSend_setEngineLibrary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEngineLibrary:");
}

id objc_msgSend_setError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setError:");
}

id objc_msgSend_setErrorCode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setErrorCode:");
}

id objc_msgSend_setErrorDomain_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setErrorDomain:");
}

id objc_msgSend_setErrorForAllOperations_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setErrorForAllOperations:");
}

id objc_msgSend_setErrorMessage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setErrorMessage:");
}

id objc_msgSend_setEstimatedInitialSizeForLocalLibrary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEstimatedInitialSizeForLocalLibrary:");
}

id objc_msgSend_setEtag_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEtag:");
}

id objc_msgSend_setExitRetentionPolicy_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setExitRetentionPolicy:");
}

id objc_msgSend_setExitSource_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setExitSource:");
}

id objc_msgSend_setExitState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setExitState:");
}

id objc_msgSend_setExitType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setExitType:");
}

id objc_msgSend_setExitingUserIdentifiers_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setExitingUserIdentifiers:");
}

id objc_msgSend_setExpectedDuration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setExpectedDuration:");
}

id objc_msgSend_setExpectedSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setExpectedSize:");
}

id objc_msgSend_setExpirationHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setExpirationHandler:");
}

id objc_msgSend_setExpiryDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setExpiryDate:");
}

id objc_msgSend_setExportedInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setExportedInterface:");
}

id objc_msgSend_setExportedObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setExportedObject:");
}

id objc_msgSend_setExpungeDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setExpungeDate:");
}

id objc_msgSend_setExpungeableResourceStates_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setExpungeableResourceStates:");
}

id objc_msgSend_setExpungedDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setExpungedDate:");
}

id objc_msgSend_setExpungedState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setExpungedState:");
}

id objc_msgSend_setExtendedDescription_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setExtendedDescription:");
}

id objc_msgSend_setFaceCropType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFaceCropType:");
}

id objc_msgSend_setFacesAdjustmentsFingerprint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFacesAdjustmentsFingerprint:");
}

id objc_msgSend_setFacesData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFacesData:");
}

id objc_msgSend_setFacesVersion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFacesVersion:");
}

id objc_msgSend_setFavorite_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFavorite:");
}

id objc_msgSend_setFeature_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFeature:");
}

id objc_msgSend_setFeatureCheckAvailabilityCompletionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFeatureCheckAvailabilityCompletionBlock:");
}

id objc_msgSend_setFeatureCodes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFeatureCodes:");
}

id objc_msgSend_setFeatureCompatibleVersion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFeatureCompatibleVersion:");
}

id objc_msgSend_setFeatureVersionHistory_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFeatureVersionHistory:");
}

id objc_msgSend_setFeaturesData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFeaturesData:");
}

id objc_msgSend_setFeedbackCompletionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFeedbackCompletionBlock:");
}

id objc_msgSend_setFetchAllChanges_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFetchAllChanges:");
}

id objc_msgSend_setFetchAllResults_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFetchAllResults:");
}

id objc_msgSend_setFetchCache_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFetchCache:");
}

id objc_msgSend_setFetchDatabaseChangesCompletionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFetchDatabaseChangesCompletionBlock:");
}

id objc_msgSend_setFetchRecordZoneChangesCompletionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFetchRecordZoneChangesCompletionBlock:");
}

id objc_msgSend_setFetchRecordZonesCompletionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFetchRecordZonesCompletionBlock:");
}

id objc_msgSend_setFetchRecordsCompletionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFetchRecordsCompletionBlock:");
}

id objc_msgSend_setFetchShareMetadataCompletionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFetchShareMetadataCompletionBlock:");
}

id objc_msgSend_setFetchShareParticipantsCompletionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFetchShareParticipantsCompletionBlock:");
}

id objc_msgSend_setFileNamesByAssetFieldNames_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFileNamesByAssetFieldNames:");
}

id objc_msgSend_setFileSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFileSize:");
}

id objc_msgSend_setFileURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFileURL:");
}

id objc_msgSend_setFileUTI_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFileUTI:");
}

id objc_msgSend_setFilename_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFilename:");
}

id objc_msgSend_setFingerPrint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFingerPrint:");
}

id objc_msgSend_setForceSyncDelegate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setForceSyncDelegate:");
}

id objc_msgSend_setForceUpdatePrimarySyncStateOnce_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setForceUpdatePrimarySyncStateOnce:");
}

id objc_msgSend_setForced_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setForced:");
}

id objc_msgSend_setForeground_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setForeground:");
}

id objc_msgSend_setFullName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFullName:");
}

id objc_msgSend_setFullSizeJPEGSource_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFullSizeJPEGSource:");
}

id objc_msgSend_setGate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setGate:");
}

id objc_msgSend_setGraphData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setGraphData:");
}

id objc_msgSend_setGraphVersion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setGraphVersion:");
}

id objc_msgSend_setGroup_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setGroup:");
}

id objc_msgSend_setGroupConcurrencyLimit_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setGroupConcurrencyLimit:");
}

id objc_msgSend_setGroupName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setGroupName:");
}

id objc_msgSend_setHasBackgroundActivity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHasBackgroundActivity:");
}

id objc_msgSend_setHasCellularBudget_hasBatteryBudget_hasLowBatteryLevel_isConstrainedNetwork_hasHeavyResourceUsage_hasPoorNetworkQuality_hasModerateThermalPressure_hasThermalPressure_hasPoorSystemConditions_isBudgetValid_blockedReason_unBlockedReason_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "setHasCellularBudget:hasBatteryBudget:hasLowBatteryLevel:isConstrainedNetwork:hasHeavyResourceUsage:hasPoorNe tworkQuality:hasModerateThermalPressure:hasThermalPressure:hasPoorSystemConditions:isBudgetValid:blockedReaso n:unBlockedReason:");
}

id objc_msgSend_setHasCompletedGeneration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHasCompletedGeneration:");
}

id objc_msgSend_setHasCompletedGeneration_now_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHasCompletedGeneration:now:");
}

id objc_msgSend_setHasEPPAssets_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHasEPPAssets:");
}

id objc_msgSend_setHasSomethingTodo(void *a1, const char *a2, ...)
{
  return _[a1 setHasSomethingTodo];
}

id objc_msgSend_setHasVersion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHasVersion:");
}

id objc_msgSend_setHasiCloudAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHasiCloudAccount:");
}

id objc_msgSend_setHeight_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHeight:");
}

id objc_msgSend_setHidden_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHidden:");
}

id objc_msgSend_setHighPriority_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHighPriority:");
}

id objc_msgSend_setICloudLibraryClientIsNotAuthenticated_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setICloudLibraryClientIsNotAuthenticated:");
}

id objc_msgSend_setICloudLibraryClientVersionTooOld_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setICloudLibraryClientVersionTooOld:");
}

id objc_msgSend_setIdleDescription_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIdleDescription:");
}

id objc_msgSend_setImageDimensions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setImageDimensions:");
}

id objc_msgSend_setImportDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setImportDate:");
}

id objc_msgSend_setImportGroupIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setImportGroupIdentifier:");
}

id objc_msgSend_setImportedBy_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setImportedBy:");
}

id objc_msgSend_setImportedByBundleIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setImportedByBundleIdentifier:");
}

id objc_msgSend_setImportedByDisplayName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setImportedByDisplayName:");
}

id objc_msgSend_setInEmergencyClosing_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setInEmergencyClosing:");
}

id objc_msgSend_setInExpunged_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setInExpunged:");
}

id objc_msgSend_setInTrash_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setInTrash:");
}

id objc_msgSend_setInitialSyncAnchor_forScope_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setInitialSyncAnchor:forScope:error:");
}

id objc_msgSend_setIntent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIntent:");
}

id objc_msgSend_setInterval_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setInterval:");
}

id objc_msgSend_setInvalidationHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setInvalidationHandler:");
}

id objc_msgSend_setInvolvedProcesses_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setInvolvedProcesses:");
}

id objc_msgSend_setIsCurrentUser_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsCurrentUser:");
}

id objc_msgSend_setIsMetadata_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsMetadata:");
}

id objc_msgSend_setIsUpload_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsUpload:");
}

id objc_msgSend_setItemCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setItemCount:");
}

id objc_msgSend_setItemIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setItemIdentifier:");
}

id objc_msgSend_setItemScopedIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setItemScopedIdentifier:");
}

id objc_msgSend_setItemType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setItemType:");
}

id objc_msgSend_setItemTypeHint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setItemTypeHint:");
}

id objc_msgSend_setKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setKey:");
}

id objc_msgSend_setKeyAsset_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setKeyAsset:");
}

id objc_msgSend_setKeyAssetIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setKeyAssetIdentifier:");
}

id objc_msgSend_setKeychainCDPEnabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setKeychainCDPEnabled:");
}

id objc_msgSend_setKeywords_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setKeywords:");
}

id objc_msgSend_setKnownToServer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setKnownToServer:");
}

id objc_msgSend_setLastBatchDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLastBatchDate:");
}

id objc_msgSend_setLastError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLastError:");
}

id objc_msgSend_setLastSharedDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLastSharedDate:");
}

id objc_msgSend_setLastViewedDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLastViewedDate:");
}

id objc_msgSend_setLegacyEncryptedObject_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLegacyEncryptedObject:forKey:");
}

id objc_msgSend_setLibraryInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLibraryInfo:");
}

id objc_msgSend_setLibraryState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLibraryState:");
}

id objc_msgSend_setLocalIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLocalIndex:");
}

id objc_msgSend_setLocale_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLocale:");
}

id objc_msgSend_setLocation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLocation:");
}

id objc_msgSend_setManualSortOrder_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setManualSortOrder:");
}

id objc_msgSend_setMasterIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMasterIdentifier:");
}

id objc_msgSend_setMediaGroupIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMediaGroupIdentifier:");
}

id objc_msgSend_setMediaItemMakerData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMediaItemMakerData:");
}

id objc_msgSend_setMediaMetaData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMediaMetaData:");
}

id objc_msgSend_setMediaMetaDataType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMediaMetaDataType:");
}

id objc_msgSend_setMergeTargetPersonIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMergeTargetPersonIdentifier:");
}

id objc_msgSend_setMetric_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMetric:");
}

id objc_msgSend_setMinDurationBetweenInstances_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMinDurationBetweenInstances:");
}

id objc_msgSend_setMinimumThrottlingInterval_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMinimumThrottlingInterval:");
}

id objc_msgSend_setMmcsEncryptionSupport_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMmcsEncryptionSupport:");
}

id objc_msgSend_setModifies_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setModifies:");
}

id objc_msgSend_setModifyRecordZonesCompletionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setModifyRecordZonesCompletionBlock:");
}

id objc_msgSend_setModifyRecordsCompletionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setModifyRecordsCompletionBlock:");
}

id objc_msgSend_setMomentShare_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMomentShare:");
}

id objc_msgSend_setMostRecentAddedDateOnCKRecord_withCPLEnabledDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMostRecentAddedDateOnCKRecord:withCPLEnabledDate:");
}

id objc_msgSend_setMovePhotosCompletionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMovePhotosCompletionBlock:");
}

id objc_msgSend_setMovieData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMovieData:");
}

id objc_msgSend_setName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setName:");
}

id objc_msgSend_setNameComponents_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNameComponents:");
}

id objc_msgSend_setNetworkDownloadSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNetworkDownloadSize:");
}

id objc_msgSend_setNetworkUploadSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNetworkUploadSize:");
}

id objc_msgSend_setNotificationState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNotificationState:");
}

id objc_msgSend_setNow_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNow:");
}

id objc_msgSend_setNumRequested_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNumRequested:");
}

id objc_msgSend_setNumberStyle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNumberStyle:");
}

id objc_msgSend_setObject_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setObject:forKey:");
}

id objc_msgSend_setObject_forKey_expirationDate_date_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setObject:forKey:expirationDate:date:");
}

id objc_msgSend_setObject_forKeyedSubscript_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setObject:forKeyedSubscript:");
}

id objc_msgSend_setOpened_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setOpened:");
}

id objc_msgSend_setOperation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setOperation:");
}

id objc_msgSend_setOrientation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setOrientation:");
}

id objc_msgSend_setOriginRecordID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setOriginRecordID:");
}

id objc_msgSend_setOriginalChoice_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setOriginalChoice:");
}

id objc_msgSend_setOriginalOrientation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setOriginalOrientation:");
}

id objc_msgSend_setOriginatingFingerprint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setOriginatingFingerprint:");
}

id objc_msgSend_setOriginatingScopeIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setOriginatingScopeIdentifier:");
}

id objc_msgSend_setOtherAdjustmentsFingerprint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setOtherAdjustmentsFingerprint:");
}

id objc_msgSend_setOtherItemCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setOtherItemCount:");
}

id objc_msgSend_setOverrideRateLimiting_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setOverrideRateLimiting:");
}

id objc_msgSend_setOwner_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setOwner:");
}

id objc_msgSend_setParent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setParent:");
}

id objc_msgSend_setParentIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setParentIdentifier:");
}

id objc_msgSend_setParticipantID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setParticipantID:");
}

id objc_msgSend_setParticipants_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setParticipants:");
}

id objc_msgSend_setPausable_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPausable:");
}

id objc_msgSend_setPeople_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPeople:");
}

id objc_msgSend_setPerRecordCompletionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPerRecordCompletionBlock:");
}

id objc_msgSend_setPerRecordDeleteBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPerRecordDeleteBlock:");
}

id objc_msgSend_setPerRecordMoveBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPerRecordMoveBlock:");
}

id objc_msgSend_setPerRecordProgressBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPerRecordProgressBlock:");
}

id objc_msgSend_setPerRecordSaveBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPerRecordSaveBlock:");
}

id objc_msgSend_setPerShareCompletionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPerShareCompletionBlock:");
}

id objc_msgSend_setPerShareMetadataBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPerShareMetadataBlock:");
}

id objc_msgSend_setPerShareParticipantCompletionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPerShareParticipantCompletionBlock:");
}

id objc_msgSend_setPermission_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPermission:");
}

id objc_msgSend_setPersonIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPersonIdentifier:");
}

id objc_msgSend_setPersonType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPersonType:");
}

id objc_msgSend_setPersonsData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPersonsData:");
}

id objc_msgSend_setPhoneNumber_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPhoneNumber:");
}

id objc_msgSend_setPlaceAnnotation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPlaceAnnotation:");
}

id objc_msgSend_setPlaceLevel_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPlaceLevel:");
}

id objc_msgSend_setPlaceName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPlaceName:");
}

id objc_msgSend_setPlatformImplementation_forClass_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPlatformImplementation:forClass:");
}

id objc_msgSend_setPlayCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPlayCount:");
}

id objc_msgSend_setPluginFields_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPluginFields:");
}

id objc_msgSend_setPosition_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPosition:");
}

id objc_msgSend_setPrequeliteStoreImplementationForPlatform_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPrequeliteStoreImplementationForPlatform:");
}

id objc_msgSend_setPreviewImageData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPreviewImageData:");
}

id objc_msgSend_setPreviousServerChangeToken_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPreviousServerChangeToken:");
}

id objc_msgSend_setPriority_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPriority:");
}

id objc_msgSend_setProblematicFormerSharedScopeIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setProblematicFormerSharedScopeIdentifier:");
}

id objc_msgSend_setProcessingTaskIdentifiers_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setProcessingTaskIdentifiers:");
}

id objc_msgSend_setProducedResultIdentifiers_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setProducedResultIdentifiers:");
}

id objc_msgSend_setProfilingHook_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setProfilingHook:");
}

id objc_msgSend_setProgress_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setProgress:");
}

id objc_msgSend_setProgressHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setProgressHandler:");
}

id objc_msgSend_setProjectData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setProjectData:");
}

id objc_msgSend_setProjectDocumentType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setProjectDocumentType:");
}

id objc_msgSend_setProjectPreviewImageData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setProjectPreviewImageData:");
}

id objc_msgSend_setPromisedAssetCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPromisedAssetCount:");
}

id objc_msgSend_setPromisedPhotosCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPromisedPhotosCount:");
}

id objc_msgSend_setPromisedVideosCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPromisedVideosCount:");
}

id objc_msgSend_setPublicPermission_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPublicPermission:");
}

id objc_msgSend_setPublishAssetCompletionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPublishAssetCompletionBlock:");
}

id objc_msgSend_setPullFromTransportExpirationInterval_scope_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPullFromTransportExpirationInterval:scope:error:");
}

id objc_msgSend_setPushNotificationCenter_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPushNotificationCenter:");
}

id objc_msgSend_setQualityOfService_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setQualityOfService:");
}

id objc_msgSend_setQueryCompletionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setQueryCompletionBlock:");
}

id objc_msgSend_setQueryCursorFetchedBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setQueryCursorFetchedBlock:");
}

id objc_msgSend_setQueryItems_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setQueryItems:");
}

id objc_msgSend_setQueue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setQueue:");
}

id objc_msgSend_setQueuePriority_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setQueuePriority:");
}

id objc_msgSend_setReRun_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setReRun:");
}

id objc_msgSend_setRealIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRealIdentifier:");
}

id objc_msgSend_setRecordChangeData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRecordChangeData:");
}

id objc_msgSend_setRecordComputeStateDelegate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRecordComputeStateDelegate:");
}

id objc_msgSend_setRecordList_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRecordList:");
}

id objc_msgSend_setRecordMatchedBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRecordMatchedBlock:");
}

id objc_msgSend_setRecordModificationDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRecordModificationDate:");
}

id objc_msgSend_setRecordWasChangedBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRecordWasChangedBlock:");
}

id objc_msgSend_setRecordWithIDWasDeletedBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRecordWithIDWasDeletedBlock:");
}

id objc_msgSend_setRecordZoneChangeTokensUpdatedBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRecordZoneChangeTokensUpdatedBlock:");
}

id objc_msgSend_setRecordZoneFetchCompletionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRecordZoneFetchCompletionBlock:");
}

id objc_msgSend_setRecordZoneWithIDChangedBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRecordZoneWithIDChangedBlock:");
}

id objc_msgSend_setRecordZoneWithIDWasDeletedBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRecordZoneWithIDWasDeletedBlock:");
}

id objc_msgSend_setReferencedResourcesCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setReferencedResourcesCount:");
}

id objc_msgSend_setReferencedResourcesSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setReferencedResourcesSize:");
}

id objc_msgSend_setRejected_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRejected:");
}

id objc_msgSend_setRejectedPersonIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRejectedPersonIdentifier:");
}

id objc_msgSend_setRelatedApplications_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRelatedApplications:");
}

id objc_msgSend_setRelatedIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRelatedIdentifier:");
}

id objc_msgSend_setRelatedValueOnRecord_fromRelatedRecord_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRelatedValueOnRecord:fromRelatedRecord:");
}

id objc_msgSend_setRelation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRelation:");
}

id objc_msgSend_setRelevantUntilDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRelevantUntilDate:");
}

id objc_msgSend_setRemoteObjectInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRemoteObjectInterface:");
}

id objc_msgSend_setRequest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRequest:");
}

id objc_msgSend_setRequestCompletedBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRequestCompletedBlock:");
}

id objc_msgSend_setRequestedItemCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRequestedItemCount:");
}

id objc_msgSend_setRequiresExternalPower_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRequiresExternalPower:");
}

id objc_msgSend_setRequiresNetworkConnectivity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRequiresNetworkConnectivity:");
}

id objc_msgSend_setRequiresProtectionClass_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRequiresProtectionClass:");
}

id objc_msgSend_setRescheduler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRescheduler:");
}

id objc_msgSend_setReschedulerManager_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setReschedulerManager:");
}

id objc_msgSend_setResource_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setResource:");
}

id objc_msgSend_setResourceData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setResourceData:");
}

id objc_msgSend_setResourceProgressDelegate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setResourceProgressDelegate:");
}

id objc_msgSend_setResourceType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setResourceType:");
}

id objc_msgSend_setResources_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setResources:");
}

id objc_msgSend_setResultsCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setResultsCount:");
}

id objc_msgSend_setResultsLimit_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setResultsLimit:");
}

id objc_msgSend_setRewindAnchorsPerSharingScopes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRewindAnchorsPerSharingScopes:");
}

id objc_msgSend_setRole_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRole:");
}

id objc_msgSend_setSavePolicy_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSavePolicy:");
}

id objc_msgSend_setScheduleAfter_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setScheduleAfter:");
}

id objc_msgSend_setScopeIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setScopeIndex:");
}

id objc_msgSend_setScopeNeedsToUploadComputeState_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setScopeNeedsToUploadComputeState:error:");
}

id objc_msgSend_setScopeNeedsUpdateFromTransport_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setScopeNeedsUpdateFromTransport:error:");
}

id objc_msgSend_setScopedIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setScopedIdentifier:");
}

id objc_msgSend_setScore_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setScore:");
}

id objc_msgSend_setSecondaryIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSecondaryIdentifier:");
}

id objc_msgSend_setServerFeatureCompatibleVersion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setServerFeatureCompatibleVersion:");
}

id objc_msgSend_setServerRecordIsCorrupted_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setServerRecordIsCorrupted:");
}

id objc_msgSend_setServerToken_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setServerToken:");
}

id objc_msgSend_setShare_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setShare:");
}

id objc_msgSend_setShareCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setShareCount:");
}

id objc_msgSend_setSharedLibrarySharingState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSharedLibrarySharingState:");
}

id objc_msgSend_setSharingContributorUserIdentifiers_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSharingContributorUserIdentifiers:");
}

id objc_msgSend_setSharingRecordChangeData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSharingRecordChangeData:");
}

id objc_msgSend_setSharingRecordScopedIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSharingRecordScopedIdentifier:");
}

id objc_msgSend_setSharingScopeIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSharingScopeIdentifier:");
}

id objc_msgSend_setShouldCheckFilesForUpload_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setShouldCheckFilesForUpload:");
}

id objc_msgSend_setShouldCreateScopeIfNecessary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setShouldCreateScopeIfNecessary:");
}

id objc_msgSend_setShouldDecrypt_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setShouldDecrypt:");
}

id objc_msgSend_setShouldFetchAssetContent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setShouldFetchAssetContent:");
}

id objc_msgSend_setShouldFetchAssetContentInMemory_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setShouldFetchAssetContentInMemory:");
}

id objc_msgSend_setShouldFetchAssetContents_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setShouldFetchAssetContents:");
}

id objc_msgSend_setShouldFetchRootRecord_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setShouldFetchRootRecord:");
}

id objc_msgSend_setShouldNotCacheValue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setShouldNotCacheValue:");
}

id objc_msgSend_setShouldOverride_forSystemBudgets_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setShouldOverride:forSystemBudgets:");
}

id objc_msgSend_setShouldUpdateDisabledFeaturesWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setShouldUpdateDisabledFeaturesWithError:");
}

id objc_msgSend_setShouldWarnUserBeforeWipeOnUpgrade_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setShouldWarnUserBeforeWipeOnUpgrade:");
}

id objc_msgSend_setSimilarToOriginalAdjustmentsFingerprint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSimilarToOriginalAdjustmentsFingerprint:");
}

id objc_msgSend_setSimpleAdjustmentData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSimpleAdjustmentData:");
}

id objc_msgSend_setSourceBundleIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSourceBundleIdentifier:");
}

id objc_msgSend_setSourceRecordChangeTag_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSourceRecordChangeTag:");
}

id objc_msgSend_setSourceRecordID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSourceRecordID:");
}

id objc_msgSend_setSqliteErrorHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSqliteErrorHandler:");
}

id objc_msgSend_setStableHash_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setStableHash:");
}

id objc_msgSend_setStableIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setStableIndex:");
}

id objc_msgSend_setStagedScopeChange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setStagedScopeChange:");
}

id objc_msgSend_setStagedTransportScope_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setStagedTransportScope:");
}

id objc_msgSend_setStagingCloudKitScope_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setStagingCloudKitScope:");
}

id objc_msgSend_setStagingScopeIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setStagingScopeIdentifier:");
}

id objc_msgSend_setStartDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setStartDate:");
}

id objc_msgSend_setState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setState:");
}

id objc_msgSend_setStatus_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setStatus:");
}

id objc_msgSend_setStorageGroupingPolicy_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setStorageGroupingPolicy:");
}

id objc_msgSend_setStreamingURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setStreamingURL:");
}

id objc_msgSend_setSubcategory_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSubcategory:");
}

id objc_msgSend_setSubtitle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSubtitle:");
}

id objc_msgSend_setSubtype_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSubtype:");
}

id objc_msgSend_setSupervisor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSupervisor:");
}

id objc_msgSend_setSupplementalChangeTokenByZoneID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSupplementalChangeTokenByZoneID:");
}

id objc_msgSend_setSupportedDeviceCapabilities_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSupportedDeviceCapabilities:");
}

id objc_msgSend_setSyncAnchor_forScope_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSyncAnchor:forScope:error:");
}

id objc_msgSend_setSyndicationIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSyndicationIdentifier:");
}

id objc_msgSend_setTarget_forRecordWithScopedIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTarget:forRecordWithScopedIdentifier:");
}

id objc_msgSend_setTaskCompleted(void *a1, const char *a2, ...)
{
  return _[a1 setTaskCompleted];
}

id objc_msgSend_setTaskDidFinishWithErrorBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTaskDidFinishWithErrorBlock:");
}

id objc_msgSend_setTaskExpiredWithRetryAfter_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTaskExpiredWithRetryAfter:error:");
}

id objc_msgSend_setTaskIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTaskIdentifier:");
}

id objc_msgSend_setThumbnailImageData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setThumbnailImageData:");
}

id objc_msgSend_setTimeZoneName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTimeZoneName:");
}

id objc_msgSend_setTimeZoneOffset_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTimeZoneOffset:");
}

id objc_msgSend_setTimeoutIntervalForRequest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTimeoutIntervalForRequest:");
}

id objc_msgSend_setTimeoutIntervalForResource_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTimeoutIntervalForResource:");
}

id objc_msgSend_setTitle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTitle:");
}

id objc_msgSend_setTotalUnitCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTotalUnitCount:");
}

id objc_msgSend_setTrackingContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTrackingContext:");
}

id objc_msgSend_setTranscodedItemCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTranscodedItemCount:");
}

id objc_msgSend_setTransportGroup_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTransportGroup:");
}

id objc_msgSend_setTransportIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTransportIdentifier:");
}

id objc_msgSend_setTransportScopeMapping_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTransportScopeMapping:");
}

id objc_msgSend_setTrashed_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTrashed:");
}

id objc_msgSend_setTrashedReason_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTrashedReason:");
}

id objc_msgSend_setTrySchedulingBefore_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTrySchedulingBefore:");
}

id objc_msgSend_setType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setType:");
}

id objc_msgSend_setURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setURL:");
}

id objc_msgSend_setURLOptions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setURLOptions:");
}

id objc_msgSend_setUnderlyingQueue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUnderlyingQueue:");
}

id objc_msgSend_setUnique_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUnique:");
}

id objc_msgSend_setUpgradeSuggestedToAccessAllPhotos_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUpgradeSuggestedToAccessAllPhotos:");
}

id objc_msgSend_setUploadSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUploadSize:");
}

id objc_msgSend_setUploadedSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUploadedSize:");
}

id objc_msgSend_setUseMMCSEncryptionV2_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUseMMCSEncryptionV2:");
}

id objc_msgSend_setUseZoneWidePCS_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUseZoneWidePCS:");
}

id objc_msgSend_setUserActionOptions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUserActionOptions:");
}

id objc_msgSend_setUserDefinedRules_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUserDefinedRules:");
}

id objc_msgSend_setUserInfoObject_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUserInfoObject:forKey:");
}

id objc_msgSend_setUserVersion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUserVersion:");
}

id objc_msgSend_setUserViewedParticipantTrashNotificationDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUserViewedParticipantTrashNotificationDate:");
}

id objc_msgSend_setUsesGroupingSeparator_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUsesGroupingSeparator:");
}

id objc_msgSend_setValue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setValue:");
}

id objc_msgSend_setValue_forFlag_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setValue:forFlag:");
}

id objc_msgSend_setValue_forGlobalVariable_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setValue:forGlobalVariable:error:");
}

id objc_msgSend_setValue_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setValue:forKey:");
}

id objc_msgSend_setValue_forVariable_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setValue:forVariable:error:");
}

id objc_msgSend_setVerifiedType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setVerifiedType:");
}

id objc_msgSend_setVersion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setVersion:");
}

id objc_msgSend_setVideoComplementDurationTimescale_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setVideoComplementDurationTimescale:");
}

id objc_msgSend_setVideoComplementDurationValue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setVideoComplementDurationValue:");
}

id objc_msgSend_setVideoComplementImageDisplayTimescale_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setVideoComplementImageDisplayTimescale:");
}

id objc_msgSend_setVideoComplementImageDisplayValue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setVideoComplementImageDisplayValue:");
}

id objc_msgSend_setVideoComplementVisibilityState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setVideoComplementVisibilityState:");
}

id objc_msgSend_setVideoFrameRate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setVideoFrameRate:");
}

id objc_msgSend_setViewCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setViewCount:");
}

id objc_msgSend_setViewPresentation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setViewPresentation:");
}

id objc_msgSend_setVolumeURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setVolumeURL:");
}

id objc_msgSend_setWalrusEnabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWalrusEnabled:");
}

id objc_msgSend_setWidth_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWidth:");
}

id objc_msgSend_setWithArray_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWithArray:");
}

id objc_msgSend_setWithObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWithObject:");
}

id objc_msgSend_setWithObjects_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWithObjects:");
}

id objc_msgSend_setZoneID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setZoneID:");
}

id objc_msgSend_setupConfigurationForOperation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setupConfigurationForOperation:");
}

id objc_msgSend_setupPragmas(void *a1, const char *a2, ...)
{
  return _[a1 setupPragmas];
}

id objc_msgSend_setupRootOnRecord_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setupRootOnRecord:");
}

id objc_msgSend_share(void *a1, const char *a2, ...)
{
  return _[a1 share];
}

id objc_msgSend_shareCount(void *a1, const char *a2, ...)
{
  return _[a1 shareCount];
}

id objc_msgSend_shareParticipantsFromCKShareParticipants_currentUserID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shareParticipantsFromCKShareParticipants:currentUserID:");
}

id objc_msgSend_sharePlan(void *a1, const char *a2, ...)
{
  return _[a1 sharePlan];
}

id objc_msgSend_shareRecordIDToDelete(void *a1, const char *a2, ...)
{
  return _[a1 shareRecordIDToDelete];
}

id objc_msgSend_shareRecordName(void *a1, const char *a2, ...)
{
  return _[a1 shareRecordName];
}

id objc_msgSend_shareTypeForScopeChange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shareTypeForScopeChange:");
}

id objc_msgSend_shareTypes(void *a1, const char *a2, ...)
{
  return _[a1 shareTypes];
}

id objc_msgSend_sharedCKRecordIDs(void *a1, const char *a2, ...)
{
  return _[a1 sharedCKRecordIDs];
}

id objc_msgSend_sharedCKRecordIDsToDelete(void *a1, const char *a2, ...)
{
  return _[a1 sharedCKRecordIDsToDelete];
}

id objc_msgSend_sharedCKRecordsToUpload(void *a1, const char *a2, ...)
{
  return _[a1 sharedCKRecordsToUpload];
}

id objc_msgSend_sharedChangeToken(void *a1, const char *a2, ...)
{
  return _[a1 sharedChangeToken];
}

id objc_msgSend_sharedCloudDatabase(void *a1, const char *a2, ...)
{
  return _[a1 sharedCloudDatabase];
}

id objc_msgSend_sharedCloudScopedIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 sharedCloudScopedIdentifier];
}

id objc_msgSend_sharedContext(void *a1, const char *a2, ...)
{
  return _[a1 sharedContext];
}

id objc_msgSend_sharedCoordinator(void *a1, const char *a2, ...)
{
  return _[a1 sharedCoordinator];
}

id objc_msgSend_sharedDatabase(void *a1, const char *a2, ...)
{
  return _[a1 sharedDatabase];
}

id objc_msgSend_sharedDuetTicketProvider(void *a1, const char *a2, ...)
{
  return _[a1 sharedDuetTicketProvider];
}

id objc_msgSend_sharedInstance(void *a1, const char *a2, ...)
{
  return _[a1 sharedInstance];
}

id objc_msgSend_sharedLibraryRampCheckWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sharedLibraryRampCheckWithCompletionHandler:");
}

id objc_msgSend_sharedLibraryServerRampTaskWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sharedLibraryServerRampTaskWithCompletionHandler:");
}

id objc_msgSend_sharedLibrarySharingState(void *a1, const char *a2, ...)
{
  return _[a1 sharedLibrarySharingState];
}

id objc_msgSend_sharedRecordIDsToMissingPrivateRecordIDs(void *a1, const char *a2, ...)
{
  return _[a1 sharedRecordIDsToMissingPrivateRecordIDs];
}

id objc_msgSend_sharedScheduler(void *a1, const char *a2, ...)
{
  return _[a1 sharedScheduler];
}

id objc_msgSend_sharedZoneIdentification(void *a1, const char *a2, ...)
{
  return _[a1 sharedZoneIdentification];
}

id objc_msgSend_sharingContributorUserIdentifiers(void *a1, const char *a2, ...)
{
  return _[a1 sharingContributorUserIdentifiers];
}

id objc_msgSend_sharingRecordChangeData(void *a1, const char *a2, ...)
{
  return _[a1 sharingRecordChangeData];
}

id objc_msgSend_sharingRecordScopedIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 sharingRecordScopedIdentifier];
}

id objc_msgSend_sharingScopeForScope_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sharingScopeForScope:");
}

id objc_msgSend_sharingScopeIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 sharingScopeIdentifier];
}

id objc_msgSend_shortDescription(void *a1, const char *a2, ...)
{
  return _[a1 shortDescription];
}

id objc_msgSend_shortDescriptionForResourceType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shortDescriptionForResourceType:");
}

id objc_msgSend_shortDescriptionForState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shortDescriptionForState:");
}

id objc_msgSend_shouldApplyPropertiesWithSelector_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldApplyPropertiesWithSelector:");
}

id objc_msgSend_shouldAutoactivateScopeWithIdentifier_scopeType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldAutoactivateScopeWithIdentifier:scopeType:");
}

id objc_msgSend_shouldBeCreatedDynamically(void *a1, const char *a2, ...)
{
  return _[a1 shouldBeCreatedDynamically];
}

id objc_msgSend_shouldBeDiscretionary(void *a1, const char *a2, ...)
{
  return _[a1 shouldBeDiscretionary];
}

id objc_msgSend_shouldBoostPriority(void *a1, const char *a2, ...)
{
  return _[a1 shouldBoostPriority];
}

id objc_msgSend_shouldCheckFilesForUpload(void *a1, const char *a2, ...)
{
  return _[a1 shouldCheckFilesForUpload];
}

id objc_msgSend_shouldClearMissingResourcesInCKRecord(void *a1, const char *a2, ...)
{
  return _[a1 shouldClearMissingResourcesInCKRecord];
}

id objc_msgSend_shouldCopyCKRecordKeyToDestinationCKRecord_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldCopyCKRecordKeyToDestinationCKRecord:");
}

id objc_msgSend_shouldDefer(void *a1, const char *a2, ...)
{
  return _[a1 shouldDefer];
}

id objc_msgSend_shouldIgnoreDefaultsCPLKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldIgnoreDefaultsCPLKey:");
}

id objc_msgSend_shouldIgnoreResourceTypeOnUpload_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldIgnoreResourceTypeOnUpload:");
}

id objc_msgSend_shouldIgnoreZoneWithZoneID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldIgnoreZoneWithZoneID:");
}

id objc_msgSend_shouldIncludeInStatus(void *a1, const char *a2, ...)
{
  return _[a1 shouldIncludeInStatus];
}

id objc_msgSend_shouldKeepPower(void *a1, const char *a2, ...)
{
  return _[a1 shouldKeepPower];
}

id objc_msgSend_shouldLaunchAuxiliaryOperation(void *a1, const char *a2, ...)
{
  return _[a1 shouldLaunchAuxiliaryOperation];
}

id objc_msgSend_shouldOnlyUploadNewResources(void *a1, const char *a2, ...)
{
  return _[a1 shouldOnlyUploadNewResources];
}

id objc_msgSend_shouldPreventWipeOnUpgrade(void *a1, const char *a2, ...)
{
  return _[a1 shouldPreventWipeOnUpgrade];
}

id objc_msgSend_shouldPreventWipeOnUpgradeCreateRadar_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldPreventWipeOnUpgradeCreateRadar:");
}

id objc_msgSend_shouldProtectResourceTypeFromClearing_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldProtectResourceTypeFromClearing:");
}

id objc_msgSend_shouldProtectZoneIDFromDeletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldProtectZoneIDFromDeletion:");
}

id objc_msgSend_shouldRegisterClient(void *a1, const char *a2, ...)
{
  return _[a1 shouldRegisterClient];
}

id objc_msgSend_shouldRequestEncryptedStream(void *a1, const char *a2, ...)
{
  return _[a1 shouldRequestEncryptedStream];
}

id objc_msgSend_shouldRequestMoreTime(void *a1, const char *a2, ...)
{
  return _[a1 shouldRequestMoreTime];
}

id objc_msgSend_shouldRunForceProcessingStagedScopesTaskNow(void *a1, const char *a2, ...)
{
  return _[a1 shouldRunForceProcessingStagedScopesTaskNow];
}

id objc_msgSend_shouldRunForceProcessingStagedScopesTaskNowMovingToForeground(void *a1, const char *a2, ...)
{
  return _[a1 shouldRunForceProcessingStagedScopesTaskNowMovingToForeground];
}

id objc_msgSend_shouldRunOperationsForTask_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldRunOperationsForTask:error:");
}

id objc_msgSend_shouldRunOperationsNow_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldRunOperationsNow:error:");
}

id objc_msgSend_shouldRunOperationsNow_forGroupName_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldRunOperationsNow:forGroupName:error:");
}

id objc_msgSend_shouldRunOperationsWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldRunOperationsWithError:");
}

id objc_msgSend_shouldScheduleForceProcessingStagedScopesTask(void *a1, const char *a2, ...)
{
  return _[a1 shouldScheduleForceProcessingStagedScopesTask];
}

id objc_msgSend_shouldSplitIndirectRecordForKey_recordClass_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldSplitIndirectRecordForKey:recordClass:");
}

id objc_msgSend_shouldTryReopening(void *a1, const char *a2, ...)
{
  return _[a1 shouldTryReopening];
}

id objc_msgSend_shouldTryReopeningWithoutLibrary(void *a1, const char *a2, ...)
{
  return _[a1 shouldTryReopeningWithoutLibrary];
}

id objc_msgSend_shouldUpdateKeyOnBothRecords_recordClass_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldUpdateKeyOnBothRecords:recordClass:");
}

id objc_msgSend_shouldUpdateKeyOnPrivateRecord_recordClass_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldUpdateKeyOnPrivateRecord:recordClass:");
}

id objc_msgSend_shouldUpdateKeyOnSharedRecord_recordClass_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldUpdateKeyOnSharedRecord:recordClass:");
}

id objc_msgSend_shouldUpgradeSchema(void *a1, const char *a2, ...)
{
  return _[a1 shouldUpgradeSchema];
}

id objc_msgSend_shouldUploadResource_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldUploadResource:");
}

id objc_msgSend_shouldUploadToOtherRecord(void *a1, const char *a2, ...)
{
  return _[a1 shouldUploadToOtherRecord];
}

id objc_msgSend_shouldUseEncryptedPropertiesIfPossible(void *a1, const char *a2, ...)
{
  return _[a1 shouldUseEncryptedPropertiesIfPossible];
}

id objc_msgSend_shouldUseEncryptedPropertiesIfPossibleWithContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldUseEncryptedPropertiesIfPossibleWithContext:");
}

id objc_msgSend_shouldWarnUserBeforeWipeOnUpgrade(void *a1, const char *a2, ...)
{
  return _[a1 shouldWarnUserBeforeWipeOnUpgrade];
}

id objc_msgSend_showNetworkIndicatorForBundleWithIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "showNetworkIndicatorForBundleWithIdentifier:");
}

id objc_msgSend_showSyncIndicator(void *a1, const char *a2, ...)
{
  return _[a1 showSyncIndicator];
}

id objc_msgSend_shutdown(void *a1, const char *a2, ...)
{
  return _[a1 shutdown];
}

id objc_msgSend_signature(void *a1, const char *a2, ...)
{
  return _[a1 signature];
}

id objc_msgSend_silentMoverServerRampOperationWithOperationID_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "silentMoverServerRampOperationWithOperationID:completionHandler:");
}

id objc_msgSend_similarToOriginalAdjustmentsFingerprint(void *a1, const char *a2, ...)
{
  return _[a1 similarToOriginalAdjustmentsFingerprint];
}

id objc_msgSend_simpleAdjustmentData(void *a1, const char *a2, ...)
{
  return _[a1 simpleAdjustmentData];
}

id objc_msgSend_simplifiedTaskIdentifierForTaskIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "simplifiedTaskIdentifierForTaskIdentifier:");
}

id objc_msgSend_size(void *a1, const char *a2, ...)
{
  return _[a1 size];
}

id objc_msgSend_sizeOfOriginalResourcesToUpload(void *a1, const char *a2, ...)
{
  return _[a1 sizeOfOriginalResourcesToUpload];
}

id objc_msgSend_sizeOfResourcesToUpload(void *a1, const char *a2, ...)
{
  return _[a1 sizeOfResourcesToUpload];
}

id objc_msgSend_sortUsingComparator_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sortUsingComparator:");
}

id objc_msgSend_sortUsingSelector_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sortUsingSelector:");
}

id objc_msgSend_sortedArrayUsingComparator_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sortedArrayUsingComparator:");
}

id objc_msgSend_sortedArrayUsingSelector_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sortedArrayUsingSelector:");
}

id objc_msgSend_sourceBundleIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 sourceBundleIdentifier];
}

id objc_msgSend_sourceRecordChangeTag(void *a1, const char *a2, ...)
{
  return _[a1 sourceRecordChangeTag];
}

id objc_msgSend_sourceRecordID(void *a1, const char *a2, ...)
{
  return _[a1 sourceRecordID];
}

id objc_msgSend_sourceResourceType(void *a1, const char *a2, ...)
{
  return _[a1 sourceResourceType];
}

id objc_msgSend_speed(void *a1, const char *a2, ...)
{
  return _[a1 speed];
}

id objc_msgSend_sql(void *a1, const char *a2, ...)
{
  return _[a1 sql];
}

id objc_msgSend_sqliteBind_index_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sqliteBind:index:");
}

id objc_msgSend_sqliteErrorHandler(void *a1, const char *a2, ...)
{
  return _[a1 sqliteErrorHandler];
}

id objc_msgSend_stableHash(void *a1, const char *a2, ...)
{
  return _[a1 stableHash];
}

id objc_msgSend_stableIndex(void *a1, const char *a2, ...)
{
  return _[a1 stableIndex];
}

id objc_msgSend_stableIndexVar(void *a1, const char *a2, ...)
{
  return _[a1 stableIndexVar];
}

id objc_msgSend_stableScopeIndexForScopeIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stableScopeIndexForScopeIdentifier:");
}

id objc_msgSend_stagedScopeChange(void *a1, const char *a2, ...)
{
  return _[a1 stagedScopeChange];
}

id objc_msgSend_stagedSyncAnchorVar(void *a1, const char *a2, ...)
{
  return _[a1 stagedSyncAnchorVar];
}

id objc_msgSend_stagingScopeForScope_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stagingScopeForScope:");
}

id objc_msgSend_stagingZoneID(void *a1, const char *a2, ...)
{
  return _[a1 stagingZoneID];
}

id objc_msgSend_standardUserDefaults(void *a1, const char *a2, ...)
{
  return _[a1 standardUserDefaults];
}

id objc_msgSend_start(void *a1, const char *a2, ...)
{
  return _[a1 start];
}

id objc_msgSend_startAutomaticOverridingSystemBudgets_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startAutomaticOverridingSystemBudgets:");
}

id objc_msgSend_startDate(void *a1, const char *a2, ...)
{
  return _[a1 startDate];
}

id objc_msgSend_startDateDescriptionWithNow_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startDateDescriptionWithNow:");
}

id objc_msgSend_startExitFromSharedScopeWithIdentifier_retentionPolicy_exitSource_completionHandler_( void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startExitFromSharedScopeWithIdentifier:retentionPolicy:exitSource:completionHandler:");
}

id objc_msgSend_startExitTaskFromSharedScope_transportScope_share_retentionPolicy_exitSource_completionHandler_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "startExitTaskFromSharedScope:transportScope:share:retentionPolicy:exitSource:completionHandler:");
}

id objc_msgSend_startOverridingSystemBudgets_reason_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startOverridingSystemBudgets:reason:");
}

id objc_msgSend_startOverridingSystemBudgetsForClient_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startOverridingSystemBudgetsForClient:");
}

id objc_msgSend_startRequiredSyncSessionNow_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startRequiredSyncSessionNow:");
}

id objc_msgSend_startSyncTaskForDaemonLibraryManager_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startSyncTaskForDaemonLibraryManager:");
}

id objc_msgSend_startVacuumWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startVacuumWithCompletionHandler:");
}

id objc_msgSend_startWaitingForPushNotificationsForContainer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startWaitingForPushNotificationsForContainer:");
}

id objc_msgSend_startWatching(void *a1, const char *a2, ...)
{
  return _[a1 startWatching];
}

id objc_msgSend_startWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startWithError:");
}

id objc_msgSend_state(void *a1, const char *a2, ...)
{
  return _[a1 state];
}

id objc_msgSend_statement(void *a1, const char *a2, ...)
{
  return _[a1 statement];
}

id objc_msgSend_status(void *a1, const char *a2, ...)
{
  return _[a1 status];
}

id objc_msgSend_statusCenter(void *a1, const char *a2, ...)
{
  return _[a1 statusCenter];
}

id objc_msgSend_statusChanges(void *a1, const char *a2, ...)
{
  return _[a1 statusChanges];
}

id objc_msgSend_statusDictionary(void *a1, const char *a2, ...)
{
  return _[a1 statusDictionary];
}

id objc_msgSend_statusDictionaryForScope_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "statusDictionaryForScope:");
}

id objc_msgSend_statusError(void *a1, const char *a2, ...)
{
  return _[a1 statusError];
}

id objc_msgSend_statusObject(void *a1, const char *a2, ...)
{
  return _[a1 statusObject];
}

id objc_msgSend_statusPerOperationType(void *a1, const char *a2, ...)
{
  return _[a1 statusPerOperationType];
}

id objc_msgSend_statusPerScopeIndex(void *a1, const char *a2, ...)
{
  return _[a1 statusPerScopeIndex];
}

id objc_msgSend_statusWithIndent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "statusWithIndent:");
}

id objc_msgSend_statusWithNow_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "statusWithNow:");
}

id objc_msgSend_statusesForRecordsWithScopedIdentifiers_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "statusesForRecordsWithScopedIdentifiers:");
}

id objc_msgSend_statusesWithNow_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "statusesWithNow:");
}

id objc_msgSend_stop(void *a1, const char *a2, ...)
{
  return _[a1 stop];
}

id objc_msgSend_stopAllWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stopAllWithCompletionHandler:");
}

id objc_msgSend_stopOverridingSystemBudgets_reason_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stopOverridingSystemBudgets:reason:");
}

id objc_msgSend_stopOverridingSystemBudgetsForClient_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stopOverridingSystemBudgetsForClient:");
}

id objc_msgSend_stopWatching(void *a1, const char *a2, ...)
{
  return _[a1 stopWatching];
}

id objc_msgSend_storageNameForFingerPrint_fileUTI_bucket_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "storageNameForFingerPrint:fileUTI:bucket:");
}

id objc_msgSend_storages(void *a1, const char *a2, ...)
{
  return _[a1 storages];
}

id objc_msgSend_store(void *a1, const char *a2, ...)
{
  return _[a1 store];
}

id objc_msgSend_storeChange_pushContext_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "storeChange:pushContext:error:");
}

id objc_msgSend_storeChangeSessionUpdate_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "storeChangeSessionUpdate:error:");
}

id objc_msgSend_storeClientIsInSyncWithClientCacheWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "storeClientIsInSyncWithClientCacheWithError:");
}

id objc_msgSend_storeEstimatedSize_estimatedAssetCount_forScope_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "storeEstimatedSize:estimatedAssetCount:forScope:error:");
}

id objc_msgSend_storeExtractedBatch_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "storeExtractedBatch:error:");
}

id objc_msgSend_storeInitialMetadataDownloadDate_forScope_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "storeInitialMetadataDownloadDate:forScope:error:");
}

id objc_msgSend_storeInitialMetadataQueriesDate_forScope_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "storeInitialMetadataQueriesDate:forScope:error:");
}

id objc_msgSend_storeInitialMingleDate_forScope_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "storeInitialMingleDate:forScope:error:");
}

id objc_msgSend_storeLibraryVersion_withError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "storeLibraryVersion:withError:");
}

id objc_msgSend_storeResourcesToUpload_withUploadIdentifier_shouldCheckResources_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "storeResourcesToUpload:withUploadIdentifier:shouldCheckResources:error:");
}

id objc_msgSend_storeScopeChange_forScope_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "storeScopeChange:forScope:error:");
}

id objc_msgSend_storeSupportedFeatureVersionInLastSync_forScope_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "storeSupportedFeatureVersionInLastSync:forScope:error:");
}

id objc_msgSend_storeTransientSyncAnchor_forScope_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "storeTransientSyncAnchor:forScope:error:");
}

id objc_msgSend_storedExtractedBatch(void *a1, const char *a2, ...)
{
  return _[a1 storedExtractedBatch];
}

id objc_msgSend_streamOperationForRecordID_key_downloadType_filename_timeRange_mediaRequestHints_completionBlock_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "streamOperationForRecordID:key:downloadType:filename:timeRange:mediaRequestHints:completionBlock:");
}

id objc_msgSend_streamingURL(void *a1, const char *a2, ...)
{
  return _[a1 streamingURL];
}

id objc_msgSend_stringAtIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringAtIndex:");
}

id objc_msgSend_stringByAbbreviatingWithTildeInPath(void *a1, const char *a2, ...)
{
  return _[a1 stringByAbbreviatingWithTildeInPath];
}

id objc_msgSend_stringByAppendingString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringByAppendingString:");
}

id objc_msgSend_stringByDeletingPathExtension(void *a1, const char *a2, ...)
{
  return _[a1 stringByDeletingPathExtension];
}

id objc_msgSend_stringByReplacingMatchesInString_options_range_withTemplate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringByReplacingMatchesInString:options:range:withTemplate:");
}

id objc_msgSend_stringByReplacingOccurrencesOfString_withString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringByReplacingOccurrencesOfString:withString:");
}

id objc_msgSend_stringByTrimmingCharactersInSet_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringByTrimmingCharactersInSet:");
}

id objc_msgSend_stringForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringForKey:");
}

id objc_msgSend_stringForTimeInterval_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringForTimeInterval:");
}

id objc_msgSend_stringForTimeIntervalAgo_now_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringForTimeIntervalAgo:now:");
}

id objc_msgSend_stringFromByteCount_countStyle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringFromByteCount:countStyle:");
}

id objc_msgSend_stringFromDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringFromDate:");
}

id objc_msgSend_stringFromDateAgo_now_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringFromDateAgo:now:");
}

id objc_msgSend_stringFromNumber_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringFromNumber:");
}

id objc_msgSend_stringType(void *a1, const char *a2, ...)
{
  return _[a1 stringType];
}

id objc_msgSend_stringWithContentsOfURL_encoding_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringWithContentsOfURL:encoding:error:");
}

id objc_msgSend_stringWithFormat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringWithFormat:");
}

id objc_msgSend_stringWithUTF8String_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringWithUTF8String:");
}

id objc_msgSend_strongToStrongObjectsMapTable(void *a1, const char *a2, ...)
{
  return _[a1 strongToStrongObjectsMapTable];
}

id objc_msgSend_subarrayWithRange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "subarrayWithRange:");
}

id objc_msgSend_subcategory(void *a1, const char *a2, ...)
{
  return _[a1 subcategory];
}

id objc_msgSend_subdataWithRange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "subdataWithRange:");
}

id objc_msgSend_submitEventMetric_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "submitEventMetric:");
}

id objc_msgSend_submitTaskRequest_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "submitTaskRequest:error:");
}

id objc_msgSend_submitTaskRequestForRescheduler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "submitTaskRequestForRescheduler:");
}

id objc_msgSend_submitted(void *a1, const char *a2, ...)
{
  return _[a1 submitted];
}

id objc_msgSend_subscriptionID(void *a1, const char *a2, ...)
{
  return _[a1 subscriptionID];
}

id objc_msgSend_substringFromIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "substringFromIndex:");
}

id objc_msgSend_substringToIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "substringToIndex:");
}

id objc_msgSend_substringWithRange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "substringWithRange:");
}

id objc_msgSend_subtitle(void *a1, const char *a2, ...)
{
  return _[a1 subtitle];
}

id objc_msgSend_subtype(void *a1, const char *a2, ...)
{
  return _[a1 subtype];
}

id objc_msgSend_summaryDescription(void *a1, const char *a2, ...)
{
  return _[a1 summaryDescription];
}

id objc_msgSend_supervisor(void *a1, const char *a2, ...)
{
  return _[a1 supervisor];
}

id objc_msgSend_supervisorInfo(void *a1, const char *a2, ...)
{
  return _[a1 supervisorInfo];
}

id objc_msgSend_supervisorInfoForScope_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "supervisorInfoForScope:");
}

id objc_msgSend_supportedFeatureVersionInLastSyncForScope_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "supportedFeatureVersionInLastSyncForScope:");
}

id objc_msgSend_supportedZonePrefixes(void *a1, const char *a2, ...)
{
  return _[a1 supportedZonePrefixes];
}

id objc_msgSend_supportsCloudKitScope_engineScope_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "supportsCloudKitScope:engineScope:");
}

id objc_msgSend_supportsDeletion(void *a1, const char *a2, ...)
{
  return _[a1 supportsDeletion];
}

id objc_msgSend_supportsDeletionOfRecord_scopeProvider_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "supportsDeletionOfRecord:scopeProvider:");
}

id objc_msgSend_supportsDeletionOfRecordClass_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "supportsDeletionOfRecordClass:");
}

id objc_msgSend_supportsDeviceToDeviceEncryption(void *a1, const char *a2, ...)
{
  return _[a1 supportsDeviceToDeviceEncryption];
}

id objc_msgSend_supportsDirectDeletion(void *a1, const char *a2, ...)
{
  return _[a1 supportsDirectDeletion];
}

id objc_msgSend_supportsDirectDeletionOfRecord_scopeProvider_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "supportsDirectDeletionOfRecord:scopeProvider:");
}

id objc_msgSend_supportsDirectDeletionOfRecordClass_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "supportsDirectDeletionOfRecordClass:");
}

id objc_msgSend_supportsDownloadOfChange_scopeProvider_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "supportsDownloadOfChange:scopeProvider:");
}

id objc_msgSend_supportsDownloadOfRecordClass_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "supportsDownloadOfRecordClass:");
}

id objc_msgSend_supportsEPP(void *a1, const char *a2, ...)
{
  return _[a1 supportsEPP];
}

id objc_msgSend_supportsResourceType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "supportsResourceType:");
}

id objc_msgSend_supportsResources(void *a1, const char *a2, ...)
{
  return _[a1 supportsResources];
}

id objc_msgSend_supportsSharedDatabase(void *a1, const char *a2, ...)
{
  return _[a1 supportsSharedDatabase];
}

id objc_msgSend_supportsSharing(void *a1, const char *a2, ...)
{
  return _[a1 supportsSharing];
}

id objc_msgSend_supportsSharingScopedIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 supportsSharingScopedIdentifier];
}

id objc_msgSend_supportsStagingScopeForScopeWithType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "supportsStagingScopeForScopeWithType:");
}

id objc_msgSend_supportsZoneCreation(void *a1, const char *a2, ...)
{
  return _[a1 supportsZoneCreation];
}

id objc_msgSend_supportsZoneDelete(void *a1, const char *a2, ...)
{
  return _[a1 supportsZoneDelete];
}

id objc_msgSend_syncAnchorVar(void *a1, const char *a2, ...)
{
  return _[a1 syncAnchorVar];
}

id objc_msgSend_syncManager(void *a1, const char *a2, ...)
{
  return _[a1 syncManager];
}

id objc_msgSend_synchronize(void *a1, const char *a2, ...)
{
  return _[a1 synchronize];
}

id objc_msgSend_synchronousWorkQueue(void *a1, const char *a2, ...)
{
  return _[a1 synchronousWorkQueue];
}

id objc_msgSend_syndicationIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 syndicationIdentifier];
}

id objc_msgSend_systemMonitor(void *a1, const char *a2, ...)
{
  return _[a1 systemMonitor];
}

id objc_msgSend_table(void *a1, const char *a2, ...)
{
  return _[a1 table];
}

id objc_msgSend_table_countOfRecordsMatchingQuery_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "table:countOfRecordsMatchingQuery:");
}

id objc_msgSend_table_enumerateCountGroupedByProperty_block_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "table:enumerateCountGroupedByProperty:block:");
}

id objc_msgSend_table_enumerateCountGroupedByUnsignedIntegerProperty_block_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "table:enumerateCountGroupedByUnsignedIntegerProperty:block:");
}

id objc_msgSend_table_hasColumnWithName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "table:hasColumnWithName:");
}

id objc_msgSend_table_hasRecordsMatchingQuery_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "table:hasRecordsMatchingQuery:");
}

id objc_msgSend_tableCountOfRecords_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "tableCountOfRecords:");
}

id objc_msgSend_tableHasRecords_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "tableHasRecords:");
}

id objc_msgSend_tableName(void *a1, const char *a2, ...)
{
  return _[a1 tableName];
}

id objc_msgSend_tableWithName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "tableWithName:");
}

id objc_msgSend_target(void *a1, const char *a2, ...)
{
  return _[a1 target];
}

id objc_msgSend_targetDescriptions(void *a1, const char *a2, ...)
{
  return _[a1 targetDescriptions];
}

id objc_msgSend_targetForRecordWithCloudScopedIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "targetForRecordWithCloudScopedIdentifier:");
}

id objc_msgSend_targetForRecordWithOtherScopedIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "targetForRecordWithOtherScopedIdentifier:");
}

id objc_msgSend_targetForRecordWithScopedIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "targetForRecordWithScopedIdentifier:");
}

id objc_msgSend_targetGenerationVar(void *a1, const char *a2, ...)
{
  return _[a1 targetGenerationVar];
}

id objc_msgSend_targetMapping(void *a1, const char *a2, ...)
{
  return _[a1 targetMapping];
}

id objc_msgSend_targetState(void *a1, const char *a2, ...)
{
  return _[a1 targetState];
}

id objc_msgSend_task(void *a1, const char *a2, ...)
{
  return _[a1 task];
}

id objc_msgSend_taskDidFinish_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "taskDidFinish:");
}

id objc_msgSend_taskIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 taskIdentifier];
}

id objc_msgSend_taskIdentifierForLibraryIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "taskIdentifierForLibraryIdentifier:");
}

id objc_msgSend_taskIdentifierForSystemLibrary(void *a1, const char *a2, ...)
{
  return _[a1 taskIdentifierForSystemLibrary];
}

id objc_msgSend_taskRequestForIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "taskRequestForIdentifier:");
}

id objc_msgSend_taskStatusesWithNow_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "taskStatusesWithNow:");
}

id objc_msgSend_taskWillStart_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "taskWillStart:");
}

id objc_msgSend_tearedDown(void *a1, const char *a2, ...)
{
  return _[a1 tearedDown];
}

id objc_msgSend_testKey_value_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "testKey:value:completionHandler:");
}

id objc_msgSend_thumbnailImageData(void *a1, const char *a2, ...)
{
  return _[a1 thumbnailImageData];
}

id objc_msgSend_timeIntervalSinceDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "timeIntervalSinceDate:");
}

id objc_msgSend_timeIntervalSinceNow(void *a1, const char *a2, ...)
{
  return _[a1 timeIntervalSinceNow];
}

id objc_msgSend_timeIntervalSinceReferenceDate(void *a1, const char *a2, ...)
{
  return _[a1 timeIntervalSinceReferenceDate];
}

id objc_msgSend_timeZoneName(void *a1, const char *a2, ...)
{
  return _[a1 timeZoneName];
}

id objc_msgSend_timeZoneOffset(void *a1, const char *a2, ...)
{
  return _[a1 timeZoneOffset];
}

id objc_msgSend_timeoutIntervalForRequest(void *a1, const char *a2, ...)
{
  return _[a1 timeoutIntervalForRequest];
}

id objc_msgSend_timeoutIntervalForResource(void *a1, const char *a2, ...)
{
  return _[a1 timeoutIntervalForResource];
}

id objc_msgSend_timestamp(void *a1, const char *a2, ...)
{
  return _[a1 timestamp];
}

id objc_msgSend_title(void *a1, const char *a2, ...)
{
  return _[a1 title];
}

id objc_msgSend_todoVariableWithName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "todoVariableWithName:");
}

id objc_msgSend_todoVariableWithName_defaultExpirationInterval_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "todoVariableWithName:defaultExpirationInterval:");
}

id objc_msgSend_tooManyOpenedEnginesError(void *a1, const char *a2, ...)
{
  return _[a1 tooManyOpenedEnginesError];
}

id objc_msgSend_topic(void *a1, const char *a2, ...)
{
  return _[a1 topic];
}

id objc_msgSend_totalDurationOfUpload(void *a1, const char *a2, ...)
{
  return _[a1 totalDurationOfUpload];
}

id objc_msgSend_totalOriginalResourceSize(void *a1, const char *a2, ...)
{
  return _[a1 totalOriginalResourceSize];
}

id objc_msgSend_totalResourceSize(void *a1, const char *a2, ...)
{
  return _[a1 totalResourceSize];
}

id objc_msgSend_totalUnitCount(void *a1, const char *a2, ...)
{
  return _[a1 totalUnitCount];
}

id objc_msgSend_trackingContext(void *a1, const char *a2, ...)
{
  return _[a1 trackingContext];
}

id objc_msgSend_transactionClientCacheView(void *a1, const char *a2, ...)
{
  return _[a1 transactionClientCacheView];
}

id objc_msgSend_transactionCount(void *a1, const char *a2, ...)
{
  return _[a1 transactionCount];
}

id objc_msgSend_transactionTransportScopeMapping(void *a1, const char *a2, ...)
{
  return _[a1 transactionTransportScopeMapping];
}

id objc_msgSend_transactions(void *a1, const char *a2, ...)
{
  return _[a1 transactions];
}

id objc_msgSend_transcodedItemCount(void *a1, const char *a2, ...)
{
  return _[a1 transcodedItemCount];
}

id objc_msgSend_transformData_fileType_matchingResource_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "transformData:fileType:matchingResource:error:");
}

id objc_msgSend_transformFromURL_fileType_toTargetURL_matchingResource_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "transformFromURL:fileType:toTargetURL:matchingResource:error:");
}

id objc_msgSend_transientPullRepository(void *a1, const char *a2, ...)
{
  return _[a1 transientPullRepository];
}

id objc_msgSend_transientSyncAnchorForScope_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "transientSyncAnchorForScope:");
}

id objc_msgSend_transientSyncAnchorVar(void *a1, const char *a2, ...)
{
  return _[a1 transientSyncAnchorVar];
}

id objc_msgSend_transport(void *a1, const char *a2, ...)
{
  return _[a1 transport];
}

id objc_msgSend_transportGroup(void *a1, const char *a2, ...)
{
  return _[a1 transportGroup];
}

id objc_msgSend_transportGroupClass(void *a1, const char *a2, ...)
{
  return _[a1 transportGroupClass];
}

id objc_msgSend_transportNotedServerHasChanges_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "transportNotedServerHasChanges:");
}

id objc_msgSend_transportScope(void *a1, const char *a2, ...)
{
  return _[a1 transportScope];
}

id objc_msgSend_transportScopeForScope_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "transportScopeForScope:");
}

id objc_msgSend_transportScopeForUpgradeFromScopeName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "transportScopeForUpgradeFromScopeName:");
}

id objc_msgSend_transportScopeMapping(void *a1, const char *a2, ...)
{
  return _[a1 transportScopeMapping];
}

id objc_msgSend_trashed(void *a1, const char *a2, ...)
{
  return _[a1 trashed];
}

id objc_msgSend_trashedReason(void *a1, const char *a2, ...)
{
  return _[a1 trashedReason];
}

id objc_msgSend_triggerResetAfterUpgrade_withReason_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "triggerResetAfterUpgrade:withReason:");
}

id objc_msgSend_type(void *a1, const char *a2, ...)
{
  return _[a1 type];
}

id objc_msgSend_typeWithIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "typeWithIdentifier:");
}

id objc_msgSend_unarchiveArrayOfCPLDropDerivativeRecipesFrom_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unarchiveArrayOfCPLDropDerivativeRecipesFrom:");
}

id objc_msgSend_unarchiveFileAtURL_outputFileURL_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unarchiveFileAtURL:outputFileURL:error:");
}

id objc_msgSend_unarchiveObjectWithData_ofClass_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unarchiveObjectWithData:ofClass:");
}

id objc_msgSend_unblock(void *a1, const char *a2, ...)
{
  return _[a1 unblock];
}

id objc_msgSend_unblockEngineElement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unblockEngineElement:");
}

id objc_msgSend_unblockEngineElementOnce_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unblockEngineElementOnce:");
}

id objc_msgSend_underlyingErrorWithReason_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "underlyingErrorWithReason:");
}

id objc_msgSend_unionSet_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unionSet:");
}

id objc_msgSend_unknownError(void *a1, const char *a2, ...)
{
  return _[a1 unknownError];
}

id objc_msgSend_unknownTargetScopedIdentifiers(void *a1, const char *a2, ...)
{
  return _[a1 unknownTargetScopedIdentifiers];
}

id objc_msgSend_unopenedCount(void *a1, const char *a2, ...)
{
  return _[a1 unopenedCount];
}

id objc_msgSend_unpublish(void *a1, const char *a2, ...)
{
  return _[a1 unpublish];
}

id objc_msgSend_unregister(void *a1, const char *a2, ...)
{
  return _[a1 unregister];
}

id objc_msgSend_unregisterClient_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unregisterClient:");
}

id objc_msgSend_unregisterFromUploadRequestsWithMachServiceName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unregisterFromUploadRequestsWithMachServiceName:");
}

id objc_msgSend_unregisterUnusedReschedulerWithTaskIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unregisterUnusedReschedulerWithTaskIdentifier:");
}

id objc_msgSend_unsafeResources_withError_realPrune_resourceStorage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unsafeResources:withError:realPrune:resourceStorage:");
}

id objc_msgSend_unsharePlan(void *a1, const char *a2, ...)
{
  return _[a1 unsharePlan];
}

id objc_msgSend_unsignedIntegerAtIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unsignedIntegerAtIndex:");
}

id objc_msgSend_unsignedIntegerValue(void *a1, const char *a2, ...)
{
  return _[a1 unsignedIntegerValue];
}

id objc_msgSend_unsignedLongLongValue(void *a1, const char *a2, ...)
{
  return _[a1 unsignedLongLongValue];
}

id objc_msgSend_updateCKShare_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateCKShare:");
}

id objc_msgSend_updateCKShareParticipant_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateCKShareParticipant:");
}

id objc_msgSend_updateComputeSyncMetrics_silentDecryptionFailed_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateComputeSyncMetrics:silentDecryptionFailed:error:");
}

id objc_msgSend_updateConfigurationDictionary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateConfigurationDictionary:");
}

id objc_msgSend_updateContextWithBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateContextWithBlock:");
}

id objc_msgSend_updateContextWithBlock_forOperation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateContextWithBlock:forOperation:");
}

id objc_msgSend_updateExitConfigFromPreviousScopeChange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateExitConfigFromPreviousScopeChange:");
}

id objc_msgSend_updateFlags_forScope_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateFlags:forScope:error:");
}

id objc_msgSend_updateInitialDownloadDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateInitialDownloadDate:");
}

id objc_msgSend_updateInitialSyncDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateInitialSyncDate:");
}

id objc_msgSend_updateLibraryOptions_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateLibraryOptions:error:");
}

id objc_msgSend_updateLibraryShareSettingsWithCKRecord_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateLibraryShareSettingsWithCKRecord:");
}

id objc_msgSend_updateOneBatchForOperation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateOneBatchForOperation:");
}

id objc_msgSend_updatePrivatePropertiesOnAssetsWithScopedIdentifiers_desiredKeys_destinationZoneIdentification_sharedZoneIdentification_targetMapping_knownRecords_shouldUpdateRecord_updateBlock_completionHandler_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "updatePrivatePropertiesOnAssetsWithScopedIdentifiers:desiredKeys:destinationZoneIdentification:sharedZoneIden tification:targetMapping:knownRecords:shouldUpdateRecord:updateBlock:completionHandler:");
}

id objc_msgSend_updatePrivateRecord_sharedToRecordWithID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updatePrivateRecord:sharedToRecordWithID:");
}

id objc_msgSend_updateProgress_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateProgress:");
}

id objc_msgSend_updateRecords_cloudKitScope_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateRecords:cloudKitScope:completionHandler:");
}

id objc_msgSend_updateResources_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateResources:");
}

id objc_msgSend_updateScopeIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateScopeIdentifier:");
}

id objc_msgSend_updateScopeWithNewScopeType_scope_updatedScopeChange_updatedFlags_oldTransportScope_updatedTransportScope_shouldUpdateTransportScope_store_transport_session_inTransaction_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "updateScopeWithNewScopeType:scope:updatedScopeChange:updatedFlags:oldTransportScope:updatedTransportScope:sho uldUpdateTransportScope:store:transport:session:inTransaction:");
}

id objc_msgSend_updateShareForScope_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateShareForScope:completionHandler:");
}

id objc_msgSend_updateShareTaskForScope_transportScope_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateShareTaskForScope:transportScope:completionHandler:");
}

id objc_msgSend_updateSharingContributorUserIdentifiers(void *a1, const char *a2, ...)
{
  return _[a1 updateSharingContributorUserIdentifiers];
}

id objc_msgSend_updateTargetMappingAfterUpload(void *a1, const char *a2, ...)
{
  return _[a1 updateTargetMappingAfterUpload];
}

id objc_msgSend_updateTargetMappingAfterUploadWithRealSourceRecordIDs_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateTargetMappingAfterUploadWithRealSourceRecordIDs:");
}

id objc_msgSend_updateTaskRequest_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateTaskRequest:error:");
}

id objc_msgSend_updateTaskRequest_updatedPrediction_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateTaskRequest:updatedPrediction:");
}

id objc_msgSend_updateWithCKRecord_zone_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateWithCKRecord:zone:");
}

id objc_msgSend_updateWithCKShare_currentUserID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateWithCKShare:currentUserID:");
}

id objc_msgSend_updateWithExitConfigRecord_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateWithExitConfigRecord:");
}

id objc_msgSend_updateWithExitStatesRecord_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateWithExitStatesRecord:");
}

id objc_msgSend_updateWithLibraryInfoCKRecord_zone_userRecordID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateWithLibraryInfoCKRecord:zone:userRecordID:");
}

id objc_msgSend_updateWithPrediction_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateWithPrediction:");
}

id objc_msgSend_updateWithRootCKRecord_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateWithRootCKRecord:");
}

id objc_msgSend_updateWithTransportScopeMapping_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateWithTransportScopeMapping:");
}

id objc_msgSend_updatedFlagsFromCKRecord_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updatedFlagsFromCKRecord:");
}

id objc_msgSend_updatedFlagsFromDeletedCKRecordID_recordType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updatedFlagsFromDeletedCKRecordID:recordType:");
}

id objc_msgSend_updatedFlagsFromFlags_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updatedFlagsFromFlags:");
}

id objc_msgSend_updatedFlagsMask(void *a1, const char *a2, ...)
{
  return _[a1 updatedFlagsMask];
}

id objc_msgSend_updatedScopeChangeFromScopeChange_currentUserID_withCKRecord_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updatedScopeChangeFromScopeChange:currentUserID:withCKRecord:");
}

id objc_msgSend_updatedScopeChangeFromScopeChange_currentUserID_withDeletedCKRecordID_recordType_( void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updatedScopeChangeFromScopeChange:currentUserID:withDeletedCKRecordID:recordType:");
}

id objc_msgSend_upgradeFlags_fromTransportScope_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "upgradeFlags:fromTransportScope:");
}

id objc_msgSend_upgradeScopesWithNewLibraryOptions_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "upgradeScopesWithNewLibraryOptions:error:");
}

id objc_msgSend_upgradeStorageToVersion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "upgradeStorageToVersion:");
}

id objc_msgSend_uploadCKRecord_forScopedIdentifier_triggeringKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "uploadCKRecord:forScopedIdentifier:triggeringKey:");
}

id objc_msgSend_uploadDidStartForResource_withResourceTransferTask_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "uploadDidStartForResource:withResourceTransferTask:");
}

id objc_msgSend_uploadIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 uploadIdentifier];
}

id objc_msgSend_uploadOfRecordID_didProgress_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "uploadOfRecordID:didProgress:");
}

id objc_msgSend_uploadOfResource_didFinishForResourceTransferTask_withError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "uploadOfResource:didFinishForResourceTransferTask:withError:");
}

id objc_msgSend_uploadOfResource_didProgress_forResourceTransferTask_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "uploadOfResource:didProgress:forResourceTransferTask:");
}

id objc_msgSend_uploadOfSharedRecordID_didProgress_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "uploadOfSharedRecordID:didProgress:");
}

id objc_msgSend_uploadRecords_cloudKitScope_scopeProvider_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "uploadRecords:cloudKitScope:scopeProvider:completionHandler:");
}

id objc_msgSend_uploadSharedCKRecord_forScopedIdentifier_triggeringKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "uploadSharedCKRecord:forScopedIdentifier:triggeringKey:");
}

id objc_msgSend_uploadSize(void *a1, const char *a2, ...)
{
  return _[a1 uploadSize];
}

id objc_msgSend_uploadTransportGroupVar(void *a1, const char *a2, ...)
{
  return _[a1 uploadTransportGroupVar];
}

id objc_msgSend_uploadedSize(void *a1, const char *a2, ...)
{
  return _[a1 uploadedSize];
}

id objc_msgSend_uppercaseString(void *a1, const char *a2, ...)
{
  return _[a1 uppercaseString];
}

id objc_msgSend_userActionOptions(void *a1, const char *a2, ...)
{
  return _[a1 userActionOptions];
}

id objc_msgSend_userContext(void *a1, const char *a2, ...)
{
  return _[a1 userContext];
}

id objc_msgSend_userDefinedRules(void *a1, const char *a2, ...)
{
  return _[a1 userDefinedRules];
}

id objc_msgSend_userIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 userIdentifier];
}

id objc_msgSend_userIdentifierClass(void *a1, const char *a2, ...)
{
  return _[a1 userIdentifierClass];
}

id objc_msgSend_userIdentity(void *a1, const char *a2, ...)
{
  return _[a1 userIdentity];
}

id objc_msgSend_userInfo(void *a1, const char *a2, ...)
{
  return _[a1 userInfo];
}

id objc_msgSend_userRecordID(void *a1, const char *a2, ...)
{
  return _[a1 userRecordID];
}

id objc_msgSend_userVersion(void *a1, const char *a2, ...)
{
  return _[a1 userVersion];
}

id objc_msgSend_userViewedParticipantTrashNotificationDate(void *a1, const char *a2, ...)
{
  return _[a1 userViewedParticipantTrashNotificationDate];
}

id objc_msgSend_usesSandboxEnvironment(void *a1, const char *a2, ...)
{
  return _[a1 usesSandboxEnvironment];
}

id objc_msgSend_validCloudScopeIndexes(void *a1, const char *a2, ...)
{
  return _[a1 validCloudScopeIndexes];
}

id objc_msgSend_validLocalScopeIndexes(void *a1, const char *a2, ...)
{
  return _[a1 validLocalScopeIndexes];
}

id objc_msgSend_validateAcceptSharedScopeTask_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "validateAcceptSharedScopeTask:completionHandler:");
}

id objc_msgSend_validateCreateScopeTask_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "validateCreateScopeTask:completionHandler:");
}

id objc_msgSend_valueForEntitlement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "valueForEntitlement:");
}

id objc_msgSend_valueForFlag_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "valueForFlag:");
}

id objc_msgSend_valueForFlag_forScope_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "valueForFlag:forScope:");
}

id objc_msgSend_valueForGlobalVariable_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "valueForGlobalVariable:");
}

id objc_msgSend_valueForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "valueForKey:");
}

id objc_msgSend_valueForVariable_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "valueForVariable:");
}

id objc_msgSend_valueFromSet_atIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "valueFromSet:atIndex:");
}

id objc_msgSend_valueStore(void *a1, const char *a2, ...)
{
  return _[a1 valueStore];
}

id objc_msgSend_valueWithConstructor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "valueWithConstructor:");
}

id objc_msgSend_valuesInSet_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "valuesInSet:");
}

id objc_msgSend_variableGroupWithVariables_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "variableGroupWithVariables:");
}

id objc_msgSend_variableGroupWithVariablesAndGroups_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "variableGroupWithVariablesAndGroups:");
}

id objc_msgSend_variableName(void *a1, const char *a2, ...)
{
  return _[a1 variableName];
}

id objc_msgSend_variableWithName_defaultValue_type_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "variableWithName:defaultValue:type:");
}

id objc_msgSend_variableWithName_forTable_type_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "variableWithName:forTable:type:");
}

id objc_msgSend_variableWithName_type_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "variableWithName:type:");
}

id objc_msgSend_variables(void *a1, const char *a2, ...)
{
  return _[a1 variables];
}

id objc_msgSend_verifiedType(void *a1, const char *a2, ...)
{
  return _[a1 verifiedType];
}

id objc_msgSend_version(void *a1, const char *a2, ...)
{
  return _[a1 version];
}

id objc_msgSend_versionHasChanged(void *a1, const char *a2, ...)
{
  return _[a1 versionHasChanged];
}

id objc_msgSend_verticalAccuracy(void *a1, const char *a2, ...)
{
  return _[a1 verticalAccuracy];
}

id objc_msgSend_videoComplementDurationTimescale(void *a1, const char *a2, ...)
{
  return _[a1 videoComplementDurationTimescale];
}

id objc_msgSend_videoComplementDurationValue(void *a1, const char *a2, ...)
{
  return _[a1 videoComplementDurationValue];
}

id objc_msgSend_videoComplementImageDisplayTimescale(void *a1, const char *a2, ...)
{
  return _[a1 videoComplementImageDisplayTimescale];
}

id objc_msgSend_videoComplementImageDisplayValue(void *a1, const char *a2, ...)
{
  return _[a1 videoComplementImageDisplayValue];
}

id objc_msgSend_videoComplementVisibilityState(void *a1, const char *a2, ...)
{
  return _[a1 videoComplementVisibilityState];
}

id objc_msgSend_videoFrameRate(void *a1, const char *a2, ...)
{
  return _[a1 videoFrameRate];
}

id objc_msgSend_viewCount(void *a1, const char *a2, ...)
{
  return _[a1 viewCount];
}

id objc_msgSend_viewPresentation(void *a1, const char *a2, ...)
{
  return _[a1 viewPresentation];
}

id objc_msgSend_walrusStatus(void *a1, const char *a2, ...)
{
  return _[a1 walrusStatus];
}

id objc_msgSend_weakObjectsHashTable(void *a1, const char *a2, ...)
{
  return _[a1 weakObjectsHashTable];
}

id objc_msgSend_weakToStrongObjectsMapTable(void *a1, const char *a2, ...)
{
  return _[a1 weakToStrongObjectsMapTable];
}

id objc_msgSend_whitespaceAndNewlineCharacterSet(void *a1, const char *a2, ...)
{
  return _[a1 whitespaceAndNewlineCharacterSet];
}

id objc_msgSend_whitespaceCharacterSet(void *a1, const char *a2, ...)
{
  return _[a1 whitespaceCharacterSet];
}

id objc_msgSend_width(void *a1, const char *a2, ...)
{
  return _[a1 width];
}

id objc_msgSend_willFetchRecordCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "willFetchRecordCount:");
}

id objc_msgSend_willRunEngineElement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "willRunEngineElement:");
}

id objc_msgSend_willUploadRecords(void *a1, const char *a2, ...)
{
  return _[a1 willUploadRecords];
}

id objc_msgSend_willUploadSharedRecords(void *a1, const char *a2, ...)
{
  return _[a1 willUploadSharedRecords];
}

id objc_msgSend_wipeEnginesIfNecessary(void *a1, const char *a2, ...)
{
  return _[a1 wipeEnginesIfNecessary];
}

id objc_msgSend_wipeReason(void *a1, const char *a2, ...)
{
  return _[a1 wipeReason];
}

id objc_msgSend_wipeStoreAtNextOpeningWithCloudLibraryStorageURL_reason_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "wipeStoreAtNextOpeningWithCloudLibraryStorageURL:reason:");
}

id objc_msgSend_wipeStoreAtNextOpeningWithReason_completionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "wipeStoreAtNextOpeningWithReason:completionBlock:");
}

id objc_msgSend_wipeWithReason_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "wipeWithReason:completionHandler:");
}

id objc_msgSend_workItemDelay(void *a1, const char *a2, ...)
{
  return _[a1 workItemDelay];
}

id objc_msgSend_wrapper_getStatusDictionaryWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "wrapper:getStatusDictionaryWithCompletionHandler:");
}

id objc_msgSend_wrapper_getStatusWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "wrapper:getStatusWithCompletionHandler:");
}

id objc_msgSend_wrapper_libraryDidOpenWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "wrapper:libraryDidOpenWithError:");
}

id objc_msgSend_wrapperArray_countOfClientsForWrapper_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "wrapperArray:countOfClientsForWrapper:");
}

id objc_msgSend_wrapperArray_engineWrapperWithParameters_createIfNecessary_queue_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "wrapperArray:engineWrapperWithParameters:createIfNecessary:queue:error:");
}

id objc_msgSend_wrapperArray_getStatusDictionaryWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "wrapperArray:getStatusDictionaryWithCompletionHandler:");
}

id objc_msgSend_wrapperArray_getStatusWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "wrapperArray:getStatusWithCompletionHandler:");
}

id objc_msgSend_wrapperArray_wrapperDidCompleteInitialSyncOfMainScope_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "wrapperArray:wrapperDidCompleteInitialSyncOfMainScope:");
}

id objc_msgSend_wrapperArray_wrapperNeedsInitialDownloadOfMainScope_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "wrapperArray:wrapperNeedsInitialDownloadOfMainScope:");
}

id objc_msgSend_wrapperArray_wrapperShouldBeDropped_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "wrapperArray:wrapperShouldBeDropped:");
}

id objc_msgSend_wrapperArrayCountDidChange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "wrapperArrayCountDidChange:");
}

id objc_msgSend_wrapperDidCompleteInitialSyncOfMainScope_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "wrapperDidCompleteInitialSyncOfMainScope:");
}

id objc_msgSend_wrapperEmergencyExit_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "wrapperEmergencyExit:");
}

id objc_msgSend_wrapperLibraryDidClose_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "wrapperLibraryDidClose:");
}

id objc_msgSend_wrapperNeedsInitialDownloadOfMainScope_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "wrapperNeedsInitialDownloadOfMainScope:");
}

id objc_msgSend_wrapperShouldBeDropped_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "wrapperShouldBeDropped:");
}

id objc_msgSend_wrapperStatuses(void *a1, const char *a2, ...)
{
  return _[a1 wrapperStatuses];
}

id objc_msgSend_writeToURL_atomically_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "writeToURL:atomically:");
}

id objc_msgSend_writeToURL_atomically_encoding_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "writeToURL:atomically:encoding:error:");
}

id objc_msgSend_writeToURL_options_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "writeToURL:options:error:");
}

id objc_msgSend_writeTransactionBlocker(void *a1, const char *a2, ...)
{
  return _[a1 writeTransactionBlocker];
}

id objc_msgSend_zone(void *a1, const char *a2, ...)
{
  return _[a1 zone];
}

id objc_msgSend_zoneID(void *a1, const char *a2, ...)
{
  return _[a1 zoneID];
}

id objc_msgSend_zoneIDFromScopeIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "zoneIDFromScopeIdentifier:");
}

id objc_msgSend_zoneIdentificationForCloudKitScope_engineScope_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "zoneIdentificationForCloudKitScope:engineScope:");
}

id objc_msgSend_zoneName(void *a1, const char *a2, ...)
{
  return _[a1 zoneName];
}

id objc_msgSend_zoneishContainer(void *a1, const char *a2, ...)
{
  return _[a1 zoneishContainer];
}